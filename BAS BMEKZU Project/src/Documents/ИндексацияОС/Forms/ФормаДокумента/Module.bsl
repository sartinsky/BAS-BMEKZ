#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма")
		И ВладелецФормы.ИмяФормы = "Справочник.ОсновныеСредства.Форма.ФормаЭлемента" Тогда
		
		Если ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
			Оповестить("ИзмененаИнформацияОС", ВладелецФормы.Параметры.Ключ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборОсновныхСредств.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПодготовитьФормуНаСервере();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) И Объект.ОС.Количество() > 0 Тогда
		ЗаполнитьИнвентарныеНомераОС();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;

	ТребуетсяВызовСервера = Ложь;

	// Проверим наличие строк в табличной части.
	Если Объект.ОС.Количество() > 0 Тогда
		ТребуетсяВызовСервера = НЕ ЗначениеЗаполнено(МаксПериодПервоначальныхСведенийОС) 
			ИЛИ (МаксПериодПервоначальныхСведенийОС >= Объект.Дата);
	КонецЕсли;
		
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура КоэффициентИндексацииПриИзменении(Элемент)
	РассчитатьПроиндексированныеСтоимости();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования,ЭтотОбъект,"Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыОС

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	ОсновноеСредство = СтрокаТЧ.ОсновноеСредство;
	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		СтрокаТЧ.ИнвентарныйНомер = "";
	Иначе
		СтруктураСведений 					= СведенияОбИнвентарномНомереОС(ОсновноеСредство, Объект.Организация, Объект.Дата);
		СтрокаТЧ.ИнвентарныйНомер 			= СтруктураСведений.ИнвентарныйНомер;
		МаксПериодПервоначальныхСведенийОС 	= Макс(МаксПериодПервоначальныхСведенийОС, СтруктураСведений.Период);
		
		ПараметрыОС = СведенияОПараметрахОС(ОсновноеСредство, Объект.Организация, Объект.Дата);
		
		Если ЗначениеЗаполнено(ПараметрыОС) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ПараметрыОС);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОСБалансоваяСтоимостьНУПриИзменении(Элемент)
	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	РассчитатьПроиндексированныеСтоимостиСтрокиОС(СтрокаТЧ, Объект.КоэффициентИндексации);
КонецПроцедуры

&НаКлиенте
Процедура ОСНакопленнаяАмортизацияНУПриИзменении(Элемент)
	СтрокаТЧ = Элементы.ОС.ТекущиеДанные;
	РассчитатьПроиндексированныеСтоимостиСтрокиОС(СтрокаТЧ, Объект.КоэффициентИндексации);
КонецПроцедуры

&НаКлиенте
Процедура ОСНоваяБалансоваяСтоимостьНУПриИзменении(Элемент)
	РассчитатьВычисляемыеПоляПоСтроке(Элементы.ОС.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ОСНоваяНакопленнаяАмортизацияНУПриИзменении(Элемент)
	РассчитатьВычисляемыеПоляПоСтроке(Элементы.ОС.ТекущиеДанные);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьДляСпискаОС(Команда)

	Если Объект.Проведен Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Заполнение возможно только в непроведенном документе';uk='Заповнення можливе тільки в непроведеному документі'"), 60);
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();

	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(, , НСтр("ru='Организация';uk='Організація'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Организация");
		Возврат;
	КонецЕсли;

	ТекстВопроса = НСтр("ru='При заполнении существующие данные будут пересчитаны!
|Продолжить?';uk='При заповненні існуючі дані будуть перераховані!
|Продовжити?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьДляСпискаОСЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДляСпискаОСЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьДляСпискаОССервер();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;

	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Для каждого Строка Из Объект.ОС Цикл
		
		РассчитатьВычисляемыеПоляПоСтроке(Строка);
		
	КонецЦикла;
	
	ЗаполнитьИнвентарныеНомераОС();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнвентарныеНомераОС()
	
	ТаблицаОС = Объект.ОС.Выгрузить();

	ТаблицаНомеров = УчетОС.ПолучитьТаблицуИнвентарныхНомеровОС(ТаблицаОС,
		Объект.Организация, Объект.Дата);

	ТаблицаОС.ЗагрузитьКолонку(ТаблицаНомеров.ВыгрузитьКолонку("ИнвентарныйНомер"), "ИнвентарныйНомер");
	Объект.ОС.Загрузить(ТаблицаОС);
	
	// Запомним максимальную дату первоначальных сведений ОС
	ТаблицаНомеров.Сортировать("Период");
	Если ТаблицаНомеров.Количество() > 0 Тогда
		МаксПериодПервоначальныхСведенийОС = ТаблицаНомеров[ТаблицаНомеров.Количество() - 1].Период;
	Иначе
		МаксПериодПервоначальныхСведенийОС = '0001-01-01';
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОбИнвентарномНомереОС(ОсновноеСредство, Организация, Дата)

	Возврат УчетОС.СведенияОбИнвентарномНомереОС(ОсновноеСредство, Организация, Дата);

КонецФункции

&НаСервереБезКонтекста
Функция СведенияОПараметрахОС(ОсновноеСредство, Организация, Дата)

	// "Невидимые" на форме параметры ОС
	ПараметрыОС = Новый Структура("СрокПолезногоИспользованияНУ, СрокИспользованияДляВычисленияАмортизацииНУ");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("Дата",             Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыАмортизацииОСНалоговыйУчетУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ПараметрыАмортизацииОСНалоговыйУчетУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользованияНУ,
	|	ПараметрыАмортизацииОСНалоговыйУчетУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизацииНУ
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(&Дата, Организация = &Организация И ОсновноеСредство В (&ОсновноеСредство)) КАК ПараметрыАмортизацииОСНалоговыйУчетУчетСрезПоследних";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОС, Результат);
	КонецЕсли;	
	
	Возврат ПараметрыОС;

КонецФункции

&НаСервере
Процедура ЗаполнитьДляСпискаОССервер()

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СубконтоОС" 	, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Запрос.УстановитьПараметр("Организация"	, Объект.Организация);
	Запрос.УстановитьПараметр("Период"		, '20141231235959');
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПараметрыАмортизацииНУ.ОсновноеСредство КАК ОсновноеСредство,
		|	ПараметрыАмортизацииНУ.СрокПолезногоИспользования КАК СрокПолезногоИспользованияНУ,
		|	ПараметрыАмортизацииНУ.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизацииНУ,
		|	ПараметрыАмортизацииНУ.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизацииНУ,
		|	ЕСТЬNULL(СтоимостьОстатки.СуммаНУОстатокДт, 0) КАК БалансоваяСтоимостьНУ,
		|	ЕСТЬNULL(АмортизацияОстатки.СуммаНУОстатокКт, 0) КАК НакопленнаяАмортизацияНУ,
		|	ЕСТЬNULL(СтоимостьОстатки.СуммаНУОстатокДт, 0) - ЕСТЬNULL(АмортизацияОстатки.СуммаНУОстатокКт, 0) КАК ОстаточнаяСтоимостьНУ
		|ИЗ
		|	РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(&Период, Организация = &Организация) КАК ПараметрыАмортизацииНУ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				&Период,
		|				Счет В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						СчетаБУ.СчетУчета
		|					ИЗ
		|						РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&Период, Организация = &Организация) КАК СчетаБУ),
		|				&СубконтоОС,
		|				Организация = &Организация) КАК СтоимостьОстатки
		|		ПО ПараметрыАмортизацииНУ.ОсновноеСредство = СтоимостьОстатки.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
		|				&Период,
		|				Счет В
		|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|						СчетаБУ.СчетНачисленияАмортизации
		|					ИЗ
		|						РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&Период, Организация = &Организация) КАК СчетаБУ),
		|				&СубконтоОС,
		|				Организация = &Организация) КАК АмортизацияОстатки
		|		ПО ПараметрыАмортизацииНУ.ОсновноеСредство = АмортизацияОстатки.Субконто1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(&Период, Организация = &Организация) КАК НачислениеАмортизацииОС
		|		ПО ПараметрыАмортизацииНУ.ОсновноеСредство = НачислениеАмортизацииОС.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НалоговыеНазначенияОС.СрезПоследних(&Период, Организация = &Организация) КАК НалоговыеНазначенияОС
		|		ПО ПараметрыАмортизацииНУ.ОсновноеСредство = НалоговыеНазначенияОС.ОсновноеСредство
		|ГДЕ
		|	ЕСТЬNULL(СтоимостьОстатки.СуммаНУОстатокДт, 0) - ЕСТЬNULL(АмортизацияОстатки.СуммаНУОстатокКт, 0) > 0
		|	И ЕСТЬNULL(НачислениеАмортизацииОС.НачислятьАмортизацию, ЛОЖЬ) = ИСТИНА
		|	И НалоговыеНазначенияОС.НалоговоеНазначение <> ЗНАЧЕНИЕ(Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность)";
	ТЗ = Запрос.Выполнить().Выгрузить();

	Объект.ОС.Очистить();
	
	Для Каждого СтрокаТЗ Из ТЗ Цикл

		СтрокаОС = Объект.ОС.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаОС, СтрокаТЗ);
		
		РассчитатьПроиндексированныеСтоимостиСтрокиОС(СтрокаОС, Объект.КоэффициентИндексации);
		
		РассчитатьВычисляемыеПоляПоСтроке(СтрокаОС);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьВычисляемыеПоляПоСтроке(Строка)

	Строка.ИндексацияБалансовойСтоимости 	= Строка.НоваяБалансоваяСтоимостьНУ - Строка.БалансоваяСтоимостьНУ;
	Строка.ИндексацияНакопленнойАмортизации = Строка.НоваяНакопленнаяАмортизацияНУ - Строка.НакопленнаяАмортизацияНУ;

КонецПроцедуры

&НаСервере
Процедура РассчитатьПроиндексированныеСтоимости()
	
	Для Каждого СтрокаТЧ Из Объект.ОС Цикл
		РассчитатьПроиндексированныеСтоимостиСтрокиОС(СтрокаТЧ, Объект.КоэффициентИндексации)
	КонецЦикла;	
	
КонецПроцедуры                                                         

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьПроиндексированныеСтоимостиСтрокиОС(СтрокаТЧ, КоэффициентИндексации)
	
	СтрокаТЧ.НоваяНакопленнаяАмортизацияНУ 				= СтрокаТЧ.НакопленнаяАмортизацияНУ * КоэффициентИндексации;
	СтрокаТЧ.НоваяБалансоваяСтоимостьНУ 				= СтрокаТЧ.БалансоваяСтоимостьНУ * КоэффициентИндексации;
	СтрокаТЧ.НоваяСтоимостьДляВычисленияАмортизацииНУ 	= СтрокаТЧ.СтоимостьДляВычисленияАмортизацииНУ * КоэффициентИндексации;
	
	РассчитатьВычисляемыеПоляПоСтроке(СтрокаТЧ)
	
КонецПроцедуры                                                         

&НаСервере
Функция ПоместитьОСВХранилище()
	
	ТаблицаОС = Объект.ОС.Выгрузить(, "НомерСтроки, ОсновноеСредство");
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОС);
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(Знач ВыбранноеЗначение)
	
	ДобавленныеСтроки = УчетОС.ОбработатьПодборОсновныхСредств(Объект.ОС, ВыбранноеЗначение);
	
	ЗаполнитьИнвентарныеНомераОС();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	ЗаполнитьИнвентарныеНомераОС();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ БСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
