#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Процедура определяет параметры учетной политики
//
Процедура ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок)
	
	СтруктураШапкиДокумента.Вставить("ЕстьНалогНаПрибыль"             , УчетнаяПолитика.ПлательщикНалогаНаПрибыль(СтруктураШапкиДокумента.Организация, КонецМесяца(СтруктураШапкиДокумента.Дата)));
	СтруктураШапкиДокумента.Вставить("ЕстьНДС"                        , УчетнаяПолитика.ПлательщикНДС(СтруктураШапкиДокумента.Организация, КонецМесяца(СтруктураШапкиДокумента.Дата)));
	
КонецПроцедуры // ПодготовитьПараметрыУчетнойПолитики()

// Выполняет движения по регистрам 
//
Процедура ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);

	ДатаДок = СтруктураШапкиДокумента.Дата;
//	ДатаПроводок = КонецГода(ДобавитьМесяц(ДатаДок, -12)); // конец прошлого года
	ДатаПроводок = '20141231235959';

	УправлениеНеоборотнымиАктивами.ДополнитьТабличнуюЧастьСведениямиОбОСБухНалогРегл(ДатаПроводок, ТаблицаПоОС,
													  СтруктураШапкиДокумента, 
													  Отказ, Заголовок, , Истина);
													  
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;								
													  
	ПараметрыАмортизацииНУ 	= Движения.ПараметрыАмортизацииОСНалоговыйУчет;
	ПроводкиБУ 				= Движения.Хозрасчетный;
	ОперацииОС 				= Движения.СобытияОСОрганизаций;
	
	
	Для Каждого СтрокаТЧ Из ТаблицаПоОС Цикл
		
		ТекОС = СтрокаТЧ.ОсновноеСредство;
		
		// ПараметрыАмортизацииОСНалоговыйУчет
		СтрокаДвижений = ПараметрыАмортизацииНУ.Добавить();
		
		СтрокаДвижений.Период           = ДатаПроводок;
		СтрокаДвижений.ОсновноеСредство = ТекОС;
		СтрокаДвижений.Организация      = СтруктураШапкиДокумента.Организация;
		
		СтрокаДвижений.СрокПолезногоИспользования                  = СтрокаТЧ.СрокПолезногоИспользованияНУ;
		СтрокаДвижений.СрокИспользованияДляВычисленияАмортизации   = СтрокаТЧ.СрокИспользованияДляВычисленияАмортизацииНУ;
		СтрокаДвижений.СтоимостьДляВычисленияАмортизации           = СтрокаТЧ.НоваяСтоимостьДляВычисленияАмортизацииНУ;
		
		// СобытияОСОрганизаций
		СтрокаДвижений = ОперацииОС.Добавить();

		СтрокаДвижений.Период            = ДатаПроводок;
		СтрокаДвижений.ОсновноеСредство  = ТекОС;
		СтрокаДвижений.Организация       = СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.Событие           = СтруктураШапкиДокумента.СобытиеОС;
		СтрокаДвижений.НазваниеДокумента = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		СтрокаДвижений.НомерДокумента    = СтруктураШапкиДокумента.Номер;
		
		// Хозрасчетный
		Если СтрокаТЧ.ИндексацияБалансовойСтоимости > 0 ИЛИ СтрокаТЧ.ИндексацияНакопленнойАмортизации > 0 Тогда 
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = ДатаПроводок;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = НСтр("ru='Индексация стоимости ОС ""';uk='Індексація вартості ОЗ ""'",Локализация.КодЯзыкаИнформационнойБазы()) + ТекОС + """";
			Проводка.НомерЖурнала = НСтр("ru='ОС';uk='ОЗ'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.СуммаНУДт    = СтрокаТЧ.ИндексацияБалансовойСтоимости;
			Проводка.СуммаНУКт    = СтрокаТЧ.ИндексацияНакопленнойАмортизации;
			
			Проводка.СчетДт       = СтрокаТЧ.СчетУчетаБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ОсновныеСредства", ТекОС);
			
			Проводка.СчетКт       = СтрокаТЧ.СчетНачисленияАмортизацииБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ТекОС);
			
			Проводка.НалоговоеНазначениеДт = СтрокаТЧ.НалоговоеНазначение_ОС;
			Проводка.НалоговоеНазначениеКт = СтрокаТЧ.НалоговоеНазначение_ОС;
			
		КонецЕсли;	
		
	КонецЦикла;

КонецПроцедуры // ДвиженияПоРегистрам

Процедура ДополнитьСтруктуруПолейТабличнойЧастиОСРегл(СтруктураШапкиДокумента, СтруктураПолей)
	
	СтруктураПолей.Вставить("СрокПолезногоИспользованияНУ"                 	, "СрокПолезногоИспользованияНУ");
	СтруктураПолей.Вставить("СрокИспользованияДляВычисленияАмортизацииНУ"  	, "СрокИспользованияДляВычисленияАмортизацииНУ");
	СтруктураПолей.Вставить("СтоимостьДляВычисленияАмортизацииНУ"          	, "СтоимостьДляВычисленияАмортизацииНУ");
	СтруктураПолей.Вставить("НакопленнаяАмортизацияНУ"                    	, "НакопленнаяАмортизацияНУ");
	СтруктураПолей.Вставить("БалансоваяСтоимостьНУ"                    		, "БалансоваяСтоимостьНУ");
	СтруктураПолей.Вставить("НоваяСтоимостьДляВычисленияАмортизацииНУ"      , "НоваяСтоимостьДляВычисленияАмортизацииНУ");
	СтруктураПолей.Вставить("НоваяБалансоваяСтоимостьНУ"                    , "НоваяБалансоваяСтоимостьНУ");
	СтруктураПолей.Вставить("НоваяНакопленнаяАмортизацияНУ"                 , "НоваяНакопленнаяАмортизацияНУ");
	
КонецПроцедуры

// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента) Экспорт

	// Сформируем структуру реквизитов шапки документа
	СтруктураШапкиДокумента = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(ЭтотОбъект);
	СтруктураШапкиДокумента.Вставить("ВидСобытияОС",СтруктураШапкиДокумента.СобытиеОС.ВидСобытияОС);
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Процедура формирует таблицы документа.
//
Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок) Экспорт
	
	// Сформируем структуру табличной части
	СтруктураПолей = Новый Структура;
	СтруктураСложныхПолей = Новый Структура;
	
	СтруктураПолей.Вставить("ОсновноеСредство" , "ОсновноеСредство");

	ДополнитьСтруктуруПолейТабличнойЧастиОСРегл(СтруктураШапкиДокумента,СтруктураПолей);

	СтруктураСложныхПолей.Вставить("ИндексацияБалансовойСтоимости"    	, "НоваяБалансоваяСтоимостьНУ - БалансоваяСтоимостьНУ");
	СтруктураСложныхПолей.Вставить("ИндексацияНакопленнойАмортизации"   , "НоваяНакопленнаяАмортизацияНУ - НакопленнаяАмортизацияНУ");
	
	РезультатЗапросаПоОС = ОбщегоНазначенияРед12.СформироватьЗапросПоТабличнойЧасти(ЭтотОбъект, "ОС", СтруктураПолей, , СтруктураСложныхПолей);
	ТаблицаПоОС          = РезультатЗапросаПоОС.Выгрузить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

Процедура ЗаполнитьПоДокументуОснованию(Основание)

	// Заполним реквизиты из стандартного набора по документу основанию.
	ЗаполнениеДокументов.ЗаполнитьПоОснованию(ЭтотОбъект, Основание);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено И ТипДанныхЗаполнения <> Тип("Структура")
		И Метаданные().ВводитсяНаОсновании.Содержит(ДанныеЗаполнения.Метаданные()) Тогда
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
	КонецЕсли;
	ЗаполнениеДокументов.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	// Специфические для конкретного документа действия
	Если НЕ ЗначениеЗаполнено(СобытиеОС) Тогда
		СобытиеОС = УчетОС.ПолучитьСобытиеПоОСИзСправочника(Перечисления.ВидыСобытийОС.Прочее);
	КонецЕсли;
	
	// За 2014  год
	// Индекс инфляции = 124.9%
	// Коэффициент индексации = (124.9 - 10) / 100 = 1.149 
	КоэффициентИндексации = 1.149;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	УправлениеВнеоборотнымиАктивами.ПроверитьОтсутствиеДублейВТабличнойЧасти(ЭтотОбъект, "ОС", Новый Структура("ОсновноеСредство"), Отказ);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ)

	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаПоОС;
	
	Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);

	// ПОДГОТОВКА ПРОВЕДЕНИЯ ПО ДАННЫМ ДОКУМЕНТА

	ПроведениеСервер.ПодготовитьНаборыЗаписейКПроведению(ЭтотОбъект);
	Если РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);
	
	// Получим данные учетной политики
	ПодготовитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента, Отказ, Заголовок);
	
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);

	//проверка, нет ли списанных ОС в табличной части
	УправлениеНеоборотнымиАктивами.ПроверитьНаСписанность(МоментВремени(), Организация, ТаблицаПоОС, Отказ, Заголовок);
	

	Если Не Отказ Тогда
		ДвиженияПоРегистрам(СтруктураШапкиДокумента, ТаблицаПоОС, Отказ, Заголовок);
	КонецЕсли;

	ПроведениеСервер.ПодготовитьНаборыЗаписейКЗаписиДвижений(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКОтменеПроведения(ЭтотОбъект);
	Движения.Записать();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Ответственный = Пользователи.ТекущийПользователь();

КонецПроцедуры

#КонецЕсли
