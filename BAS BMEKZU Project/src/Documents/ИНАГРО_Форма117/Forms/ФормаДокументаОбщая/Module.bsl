#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
		
	Если Параметры.Ключ.Пустая() Тогда
		ПодготовитьФормуНаСервере();		
	КонецЕсли;
	
	// Уведомим о появлении функционала рабочей даты
	ЭтаФорма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента = ЭтаФорма.НастройкиПредупреждений.РабочаяДатаИзДокумента
	И ЭтаФорма.Параметры.Ключ.Пустая()
	И НЕ ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата"));
	
	УстановитьПараметрыВыбораВидОперации();
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Параметры.Свойство("ИзменитьВидОперации")
		И Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Объект.ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
		
		УстановитьЗаголовокФормы();		
		УправлениеФормойНаСервере();
		
		Модифицированность = Истина;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	
	Если  ТипЗнч(Параметр) = Тип("Структура") 
		И Параметр.Свойство("ИдентификаторВызывающейФормы")
		И Параметр.ИдентификаторВызывающейФормы = УникальныйИдентификатор Тогда
		
		Если ИмяСобытия = "СозданЛабораторныйАнализ" ИЛИ ИмяСобытия = "ИзмененЛабораторныйАнализ" Тогда
			
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСырье Тогда
				ТекущаяСтраница = "Сырье";
			ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПродукция Тогда
				ТекущаяСтраница = "Продукция";
			КонецЕсли;
			
			ТекущиеДанные = Элементы[ТекущаяСтраница].ТекущиеДанные;
			
			Если ИНАГРО_Элеватор.ЛабораторныйАнализПроверкаЗаполнения(Параметр.ДокументСсылка, ПолучитьПараметрыДляПроверкиЗаполнения(ТекущиеДанные)) Тогда
				ТекущиеДанные.ЛабораторныйАнализ = Параметр.ДокументСсылка;
				Модифицированность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияБПКлиент.ОбработкаОповещенияФормыДокумента(ЭтаФорма, Объект.Ссылка, ИмяСобытия, Параметр, Источник);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьЗаголовокФормы();	
	
	УстановитьСостояниеДокумента();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДатаДокумента) Тогда
		// Изменение времени не влияет на поведение документа.
		ТекущаяДатаДокумента = Объект.Дата;
		Возврат;
	КонецЕсли;
	
	// Общие проверки условий по датам.
	ТребуетсяВызовСервера = ИНАГРО_ЭлеваторКлиент.ТребуетсяВызовСервераПриИзмененииДатыДокумента(Объект.Дата, ТекущаяДатаДокумента);
	
	// Если определили, что изменение даты может повлиять на какие-либо параметры, 
	// то передаем обработку на сервер.
	Если ТребуетсяВызовСервера Тогда
		ДатаПриИзмененииНаСервере();
	КонецЕсли;
	
	// Запомним новую дату документа.
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидОперации) Тогда		
		ВидОперацииПриИзмененииНаСервере();		
	КонецЕсли; 	
	
КонецПроцедуры

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере()
	
	УстановитьЗаголовокФормы();
	
	УправлениеФормойНаСервере();		
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();	
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Владелец) Тогда		
		
		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);		
		
		ВладелецПриИзмененииНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВладелецПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();
	
	УправлениеФормойНаСервере(); 	
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента.ВидВзаиморасчетов) Тогда
		НайденВидХранения = Справочники.ИНАГРО_ВидыХранения.НайтиПоРеквизиту("ТипДоговора", Объект.ДоговорКонтрагента.ВидВзаиморасчетов); 
		Если НайденВидХранения <> Неопределено Тогда
			Объект.ВидХранения = НайденВидХранения.Ссылка;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидХраненияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		
		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);
		
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда		
		ПодразделениеОрганизацииПриИзмененииНаСервере();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеОрганизацииПриИзмененииНаСервере()
	
	УстановитьФункциональныеОпцииФормы();

	Объект.ОтражатьВРасчетномВыходеПродукции = ВестиРасчетныйВыпускПродукции;

КонецПроцедуры

&НаКлиенте
Процедура ВидПомолаПриИзменении(Элемент)
	
	ТекстВопроса = НСтр("ru='Перезаполнить список готовой продукции и характеристик расчета согласно выбраному виду помола?';uk='Перезаповнити список готової продукції і характеристик розрахунку згідно вибраному виду помолу?'");
	Оповещение = Новый ОписаниеОповещения("ВидПомолаПриИзмененииЗавершение", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);		
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПомолаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 	   
		Возврат;
	КонецЕсли;
	
	ВидПомолаПриИзмененииЗавершениеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВидПомолаПриИзмененииЗавершениеНаСервере()
	
	Объект.Продукция.Очистить();
	Объект.Расчеты.Очистить();
	Объект.Сырье.Очистить();
	
	ЗаполнитьГотовуюПродукциюИзВидаПомолаНаСервере();
	ЗаполнитьХарактеристикиИзВидаПомолаНаСервере();
	
	Объект.РасчетныйПроцентМехПотерь = Объект.ВидПомола.МехПотери;
	
КонецПроцедуры

&НаКлиенте
Процедура УрожайПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Урожай) Тогда				
		
		ПараметрыОтбораДоговора = ПолучитьПараметрыДляДоговоров();
		
		ИНАГРО_ЭлеваторЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(Объект.Дата, Объект.Организация, Объект.Владелец, Объект.ДоговорКонтрагента, ПараметрыОтбораДоговора);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВлажностьПродукцииПриИзменении(Элемент)
	
	ОбновитьСообщенияНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетныйПроцентМехПотерьПриИзменении(Элемент)
	
	ОбновитьСообщенияНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическийПроцентМехПотерьПриИзменении(Элемент)
	
	ОбновитьСообщенияНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеДвиженияФормы36НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.ОписаниеДвиженияФормы36",
		НСтр("ru='Описание движения формы 36';uk='Опис руху форми 36'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования,
		ЭтотОбъект,
		"Объект.Комментарий");
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыСырье

&НаКлиенте
Процедура СырьеЛабораторныйАнализНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация",  Объект.Организация);		
	КонецЕсли;	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийФорма117.ПоВладельцу") Тогда
		Если ЗначениеЗаполнено(Объект.Владелец) Тогда
			ПараметрыОтбора.Вставить("Владелец",           Объект.Владелец);
		КонецЕсли;	
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			ПараметрыОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);		
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПараметрыОтбора.Вставить("Склад",        Объект.Склад);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		ПараметрыОтбора.Вставить("ВидХранения",  Объект.ВидХранения);
	КонецЕсли;	
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		ПараметрыОтбора.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",  ПараметрыОтбора);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ИНАГРО_ЛабораторныйАнализ.Форма.ФормаВыбора", ПараметрыФормы, Элемент, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПродукцияПоВладельцам

&НаКлиенте
Процедура ПродукцияПоВладельцамПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьСообщенияНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПоВладельцамПослеУдаления(Элемент)
	
	ОбновитьСообщенияНаФорме();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПродукция

&НаКлиенте
Процедура ПродукцияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока Тогда
		Если КоличествоПродуктовБольшеДопустимого() Тогда
			ТекстСообщения = Нстр("ru='Строка удалена, т.к. количество строк превышает допустимое значение!';uk='Рядок видалений, т.я. кількість рядків перевищує допустиме значення!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);			
			Объект.Продукция.Удалить(Элементы.Продукция.ТекущаяСтрока);
		Иначе
			ТекстСообщения = Нстр("ru='Была добавлена строка продукции, необходимо пересчитать документ';uk='Була доданий рядок продукції, необхідно перерахувати документ'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);		
		КонецЕсли;
		УстановитьВидимостьКолонокРасчета(ЭтаФорма);
	КонецЕсли;
	
	ОбновитьСообщенияНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПослеУдаления(Элемент)
	
	ТекстСообщения = Нстр("ru='Была удалена строка продукции, необходимо пересчитать документ';uk='Була видалена рядок продукції, необхідно перерахувати документ'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	УстановитьВидимостьКолонокРасчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияФактическийВесВыходаПродукцииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = ПолучитьДанныеСтрокиТаблицыПродукция(ТекущиеДанные);
	
	ПродукцияФактическийВесВыходаПродукцииПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияФактическийВесВыходаПродукцииПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.ФактическийПроцентВыходаПродукции = ?(Документы.ИНАГРО_Форма117.ПолучитьВесПущенногоВПереработкуЗерна(Объект) = 0,
	                                                           0,
															   СтрокаТабличнойЧасти.ФактическийВесВыходаПродукции * 100 / Документы.ИНАГРО_Форма117.ПолучитьВесПущенногоВПереработкуЗерна(Объект));
	
	ИзменитьОтклонение(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияФактическийПроцентВыходаПродукцииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = ПолучитьДанныеСтрокиТаблицыПродукция(ТекущиеДанные);
	
	ПродукцияФактическийПроцентВыходаПродукцииПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы); 
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияФактическийПроцентВыходаПродукцииПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.ФактическийВесВыходаПродукции = СтрокаТабличнойЧасти.ФактическийПроцентВыходаПродукции * Документы.ИНАГРО_Форма117.ПолучитьВесПущенногоВПереработкуЗерна(Объект) / 100;
	
	ИзменитьОтклонение(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияРасчетныйПроцентВыходаПродукцииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = ПолучитьДанныеСтрокиТаблицыПродукция(ТекущиеДанные);
	
	ПродукцияРасчетныйПроцентВыходаПродукцииПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);	
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияРасчетныйПроцентВыходаПродукцииПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.РасчетныйВесВыходаПродукции = СтрокаТабличнойЧасти.РасчетныйПроцентВыходаПродукции * Документы.ИНАГРО_Форма117.ПолучитьВесПущенногоВПереработкуЗерна(Объект) / 100;
	
	ИзменитьОтклонение(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЛабораторныйАнализНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	ПараметрыОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПараметрыОтбора.Вставить("Организация",  Объект.Организация);		
	КонецЕсли;	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийФорма117.ПоВладельцу") Тогда
		Если ЗначениеЗаполнено(Объект.Владелец) Тогда
			ПараметрыОтбора.Вставить("Владелец", Объект.Владелец);
		КонецЕсли;	
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			ПараметрыОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);		
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		ПараметрыОтбора.Вставить("Склад",        Объект.Склад);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.ВидХранения) Тогда
		ПараметрыОтбора.Вставить("ВидХранения",  Объект.ВидХранения);
	КонецЕсли;	
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		ПараметрыОтбора.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",  ПараметрыОтбора);
	ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
	
	ОткрытьФорму("Документ.ИНАГРО_ЛабораторныйАнализ.Форма.ФормаВыбора", ПараметрыФормы, Элемент, УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасчеты

&НаКлиенте
Процедура РасчетыХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Расчеты.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = ПолучитьДанныеСтрокиТаблицыРасчеты(ТекущиеДанные);
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные); 
	
	РасчетыХарактеристикаПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РасчетыХарактеристикаПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	Характеристика = СтрокаТабличнойЧасти.Характеристика;
	
	Если ЗначениеЗаполнено(Характеристика) Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения                 = Характеристика.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.КачествоЗерна                    = Характеристика.ТипЗначения.ПривестиЗначение(СтрокаТабличнойЧасти.КачествоЗерна);
		СтрокаТабличнойЧасти.КоэффициентВлиянияХарактеристики = Характеристика.ТипЗначения.ПривестиЗначение(СтрокаТабличнойЧасти.КоэффициентВлиянияХарактеристики);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыКачествоЗернаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Расчеты.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = ПолучитьДанныеСтрокиТаблицыРасчеты(ТекущиеДанные);
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные); 
	
	РасчетыКачествоЗернаКоэффициентВыходаПродукцииПриИзмененииНаСервере(ДанныеСтрокиТаблицы);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеСтрокиТаблицы);	
	
КонецПроцедуры

&НаСервере
Процедура РасчетыКачествоЗернаКоэффициентВыходаПродукцииПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	РассчитатьКоэффициентВлиянияКачестваЗерна(СтрокаТабличнойЧасти);
	
	РассчитатьВыходПродукции();
	
	ОбновитьСообщенияНаФорме();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыФормыВыбора = Новый Структура("НачалоПериода, КонецПериода", Объект.ДатаНачала, Объект.ДатаОкончания);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыФормыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаНачала	 = РезультатВыбора.НачалоПериода;
	Объект.ДатаОкончания = РезультатВыбора.КонецПериода;		
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЛабораторныйАнализ(Команда)
	
	Если ТекущийЭлемент = Элементы.Сырье ИЛИ ТекущийЭлемент = Элементы.Продукция Тогда
		
		ИмяТабличнойЧасти = ТекущийЭлемент.Имя;
		
		ТекущиеДанные = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
		
		Если Объект[ИмяТабличнойЧасти].Количество() = 0 ИЛИ ТекущиеДанные = Неопределено Тогда			
			Возврат;
		Иначе
			
			ЗначенияЗаполнения = Новый Структура;
			ЗначенияЗаполнения.Вставить("Ссылка",             ПредопределенноеЗначение("Документ.ИНАГРО_ЛабораторныйАнализ.ПустаяСсылка"));
			ЗначенияЗаполнения.Вставить("Дата",               Объект.Дата);
			ЗначенияЗаполнения.Вставить("Организация",        Объект.Организация);
			ЗначенияЗаполнения.Вставить("Владелец",           Объект.Владелец);
			ЗначенияЗаполнения.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
			ЗначенияЗаполнения.Вставить("Склад",        	  Объект.Склад);
			ЗначенияЗаполнения.Вставить("ВидХранения",        Объект.ВидХранения);
			ЗначенияЗаполнения.Вставить("Урожай",             Объект.Урожай);
			ЗначенияЗаполнения.Вставить("Номенклатура",       ТекущиеДанные.Номенклатура);
			
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСырье Тогда
				ЗначенияЗаполнения.Вставить("МассаПартии", ТекущиеДанные.ФизическийВес);
			КонецЕсли;
			
			ИНАГРО_ЭлеваторКлиент.СоздатьДокументНаОсновании(ЭтаФорма, ЗначенияЗаполнения);
			
		КонецЕсли;

	Иначе
		
		ТекстСообщения = НСтр("ru='Лабораторный анализ можно создать только для строки табличной части!';uk='Лабораторний аналіз можна створити тільки для рядка табличної частини!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Сырье");
		ТекущийЭлемент = Элементы.Сырье;
			
		Возврат;	

	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	
	ТекстВопроса = НСтр("ru='Пересчитать документ?';uk='Перерахувати документ?'");
	Оповещение = Новый ОписаниеОповещения("РассчитатьЗавершение", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);	
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 	   
		Возврат;
	КонецЕсли;
	
	Если НЕ КоличествоПродуктовБольшеДопустимого() Тогда
		РассчитатьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНаСервере()
	
	ВсегоПлановыйПроцентВыходаПродукции     = 0;
	ВсегоПлановыйПроцентВыходаГодныхОтходов = 0;
	
	ПолучитьИтогиПоПлановомуВыходуПродукции(ВсегоПлановыйПроцентВыходаПродукции, ВсегоПлановыйПроцентВыходаГодныхОтходов);
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Расчеты Цикл
		
		// Расчет влияния качества зерна на выход продукции (кол. 3)
		РассчитатьКоэффициентВлиянияКачестваЗерна(СтрокаТабличнойЧасти);
		// Расчет коефициентов для каждой продукции продукции по характеристике
		РассчитатьВыход(СтрокаТабличнойЧасти);
		
	КонецЦикла;	
	
	РассчитатьВыходПродукции();
	
	ОбновитьСообщенияНаФорме();
	
КонецПроцедуры

#Область Заполнить

&НаКлиенте
Процедура ЗаполнитьПоФормам117ЗаПериод(Команда)
	
	Если Объект.Сырье.Количество() > 0 Тогда		
		ТекстВопроса = НСтр("ru='Табличная часть ""Помольная партия"" будет очищена. Продолжить?';uk='Таблична частина ""Помольна партія"" буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоФормам117ЗаПериодЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьПоФормам117ЗаПериодНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоФормам117ЗаПериодЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 	   
		Возврат;
	КонецЕсли;
	
	Объект.Сырье.Очистить();
	
	ЗаполнитьПоФормам117ЗаПериодНаСервере();	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоФормам117ЗаПериодНаСервере()
	
	Запрос = Новый Запрос;
	
	Фильтр = "";
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Организация),              " И ИНАГРО_Форма117Сырье.Ссылка.Организация = &Организация ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.ПодразделениеОрганизации), " И ИНАГРО_Форма117Сырье.Ссылка.ПодразделениеОрганизации = &ПодразделениеОрганизации ", "");
	
	Запрос.Текст =	
		"ВЫБРАТЬ
		|	ИНАГРО_Форма117Сырье.Ссылка,
		|	ИНАГРО_Форма117Сырье.Номенклатура,
		|	ИНАГРО_Форма117Сырье.ФизическийВес,
		|	ИНАГРО_Форма117Сырье.ЛабораторныйАнализ
		|ИЗ
		|	Документ.ИНАГРО_Форма117.Сырье КАК ИНАГРО_Форма117Сырье
		|ГДЕ
		|	ИНАГРО_Форма117Сырье.Ссылка.Проведен
		|	И НЕ ИНАГРО_Форма117Сырье.Ссылка.ПометкаУдаления
		|	И ИНАГРО_Форма117Сырье.Ссылка.Дата <= &ДатаКон
		|	И ИНАГРО_Форма117Сырье.Ссылка.Дата >= &ДатаНач
		|	И ИНАГРО_Форма117Сырье.Ссылка.ВидПомола = &ВидПомола
		|  " + Фильтр + "
		|	И ИНАГРО_Форма117Сырье.Ссылка.ОтражатьВРасчетномВыходеПродукции";
	
	Запрос.УстановитьПараметр("ДатаНач",                  НачалоДня(Объект.ДатаНачала));
	Запрос.УстановитьПараметр("ДатаКон",                  КонецДня(Объект.ДатаОкончания));
	Запрос.УстановитьПараметр("Организация",              Объект.Организация);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", Объект.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("ВидПомола",                Объект.ВидПомола);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Сырье.Добавить();
		НоваяСтрока.Номенклатура 	   = Выборка.Номенклатура;
		НоваяСтрока.ЛабораторныйАнализ = Выборка.ЛабораторныйАнализ;
		НоваяСтрока.ФизическийВес	   = Выборка.ФизическийВес;
	КонецЦикла;
	
	ОбновитьСообщенияНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоФормам117ПоВладельцам(Команда)
	
	Если Объект.ПродукцияПоВладельцам.Количество() > 0 Тогда		
		ТекстВопроса = НСтр("ru='Табличная часть ""Продукция по владельцам"" будет очищена. Продолжить?';uk='Таблична частина ""Продукція по власникам"" буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоФормам117ПоВладельцамЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьПоФормам117ПоВладельцамНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоФормам117ПоВладельцамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 	   
		Возврат;
	КонецЕсли;
	
	Объект.ПродукцияПоВладельцам.Очистить();
	
	ЗаполнитьПоФормам117ПоВладельцамНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоФормам117ПоВладельцамНаСервере()
	
	Запрос = Новый Запрос;
	
	Фильтр = "";
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Организация),              " Организация = &Организация ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.ПодразделениеОрганизации), " И ПодразделениеОрганизации = &ПодразделениеОрганизации ", "");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИНАГРО_РасчетныйВыпускПродукцииОбороты.Организация КАК Организация,
	|	ИНАГРО_РасчетныйВыпускПродукцииОбороты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ИНАГРО_РасчетныйВыпускПродукцииОбороты.Владелец КАК Владелец,
	|	ИНАГРО_РасчетныйВыпускПродукцииОбороты.Продукция КАК Продукция,
	|	СУММА(ИНАГРО_РасчетныйВыпускПродукцииОбороты.ВесПриход) КАК ВесПриход
	|ИЗ
	|	РегистрНакопления.ИНАГРО_РасчетныйВыпускПродукции.Обороты(&ДатаНач, &ДатаКон, ," + Фильтр + ") КАК ИНАГРО_РасчетныйВыпускПродукцииОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ИНАГРО_РасчетныйВыпускПродукцииОбороты.Организация,
	|	ИНАГРО_РасчетныйВыпускПродукцииОбороты.ПодразделениеОрганизации,	
	|	ИНАГРО_РасчетныйВыпускПродукцииОбороты.Владелец,	
	|	ИНАГРО_РасчетныйВыпускПродукцииОбороты.Продукция
	|
	|УПОРЯДОЧИТЬ ПО
	|	Владелец,
	|	Продукция
	|ИТОГИ
	|	СУММА(ВесПриход)
	|ПО
	|	Владелец,
	|	Продукция";
	
	Запрос.УстановитьПараметр("ДатаНач",                  Новый Граница(НачалоДня(Объект.ДатаНачала), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКон",                  Новый Граница(КонецДня(Объект.ДатаОкончания), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",              Объект.Организация);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", Объект.ПодразделениеОрганизации);
	
	ВыборкаОбщ = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаОбщ.Количество() > 0 Тогда
		
		Пока ВыборкаОбщ.Следующий() Цикл
			
			НоваяСтрока = Объект.ПродукцияПоВладельцам.Добавить();
			НоваяСтрока.Владелец = ВыборкаОбщ.Владелец;			
			
			ВыборкаПродукция = ВыборкаОбщ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПродукция.Следующий() Цикл				
				
				НомерКолонкиПродукции = ПолучитьНомерКолонкиПродукции(ВыборкаПродукция.Продукция);
				
				Если НомерКолонкиПродукции = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока["Продукция" + НомерКолонкиПродукции] = ВыборкаПродукция.ВесПриход;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьСообщенияНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСводнуюФорму(Команда)
	
	РассчитатьСводнуюФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСводнуюФормуНаСервере()
	
	// предварительный расчет качества сырья
	
	// расчет Формы117
	РассчитатьНаСервере();
	
	РасчетныйПроцентВыходаПродукции        = ПолучитьРасчетныйПроцентВыходаПродукции();
	СводныйРасчетныйПроцентВыходаПродукции = ПолучитьСводныйРасчетныйПроцентВыходаПродукции();
	Отклонение                             = РасчетныйПроцентВыходаПродукции - СводныйРасчетныйПроцентВыходаПродукции;	
	
	// корректировка качества сырья
	ТабХарактеристик = Новый ТаблицаЗначений;
	ТабХарактеристик.Колонки.Добавить("Характеристика");
	ТабХарактеристик.Добавить().Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.ЗерноваяПримесь;
	ТабХарактеристик.Добавить().Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.ЗерноваяПримесь2;
	ТабХарактеристик.Добавить().Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.Натура;
	
	КвоСтрокТабХарактеристик      = ТабХарактеристик.Количество();
	ИндексСтрокиТабХарактеристики = 0;
	Ключ                          = 0;
	
	Выход = Ложь;
	
	Пока НЕ Выход Цикл
		
		Если Отклонение > 0 Тогда
			
			СтрокаТабХарактеристики = ТабХарактеристик.Получить(ИндексСтрокиТабХарактеристики);
			Характеристика = СтрокаТабХарактеристики.Характеристика;
			
			Если Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.ЗерноваяПримесь или
				Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.ЗерноваяПримесь2 Тогда
				ОткоректироватьКачествоЗерна(ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.ЗерноваяПримесь, 0.1);
				ОткоректироватьКачествоЗерна(ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.ЗерноваяПримесь2, 0.1);
			Иначе
				ОткоректироватьКачествоЗерна(Характеристика, -1);
			КонецЕсли;
			
		ИначеЕсли Отклонение < 0 Тогда
			
			СтрокаТабХарактеристики = ТабХарактеристик.Получить(ИндексСтрокиТабХарактеристики);
			Характеристика = СтрокаТабХарактеристики.Характеристика;
			
			Если Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.ЗерноваяПримесь или
				Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.ЗерноваяПримесь2 Тогда
				ОткоректироватьКачествоЗерна(ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.ЗерноваяПримесь, -0.1);
				ОткоректироватьКачествоЗерна(ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.ЗерноваяПримесь2, -0.1);
			Иначе
				ОткоректироватьКачествоЗерна(Характеристика, 1);
			КонецЕсли;
			
		Иначе
			Выход = Истина;
		КонецЕсли;
		
		РассчитатьНаСервере();
		
		РасчетныйПроцентВыходаПродукции        = ПолучитьРасчетныйПроцентВыходаПродукции();		
		СводныйРасчетныйПроцентВыходаПродукции = ПолучитьСводныйРасчетныйПроцентВыходаПродукции();
		Отклонение                             = РасчетныйПроцентВыходаПродукции - СводныйРасчетныйПроцентВыходаПродукции;	
		
		ИндексСтрокиТабХарактеристики          = (ИндексСтрокиТабХарактеристики + 1);
		ИндексСтрокиТабХарактеристики          = ?(КвоСтрокТабХарактеристик = ИндексСтрокиТабХарактеристики, 0, ИндексСтрокиТабХарактеристики);
		
		Если Ключ > 50 Тогда
			Выход = Истина;
		КонецЕсли;
		
		Ключ = Ключ + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактическийВыходПродукции(Команда)
	
	ЗаполнитьФактическийВыходПродукцииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФактическийВыходПродукцииНаСервере()
	
	Запрос = Новый Запрос;
	
	Фильтр = "";
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Организация),              " Организация = &Организация ", "");
	Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.ПодразделениеОрганизации), " И ПодразделениеОрганизации = &ПодразделениеОрганизации ", "");
	Если Объект.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийФорма117.ПоВладельцу Тогда
		Фильтр = Фильтр + ?(ЗначениеЗаполнено(Объект.Владелец), " И Владелец = &Владелец ", "");
		Запрос.УстановитьПараметр("Владелец", Объект.Владелец);
	КонецЕсли; 
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_РасчетныйВыпускПродукцииОбороты.Организация КАК Организация,
		|	ИНАГРО_РасчетныйВыпускПродукцииОбороты.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
		|	ИНАГРО_РасчетныйВыпускПродукцииОбороты.Продукция КАК Продукция,
		|	СУММА(ИНАГРО_РасчетныйВыпускПродукцииОбороты.ВесРасход) КАК ВесРасход
		|ИЗ
		|	РегистрНакопления.ИНАГРО_РасчетныйВыпускПродукции.Обороты(&ДатаНач, &ДатаКон, ," + Фильтр + ") КАК ИНАГРО_РасчетныйВыпускПродукцииОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	ИНАГРО_РасчетныйВыпускПродукцииОбороты.Организация,
		|	ИНАГРО_РасчетныйВыпускПродукцииОбороты.ПодразделениеОрганизации,	
		|	ИНАГРО_РасчетныйВыпускПродукцииОбороты.Продукция
		|
		|УПОРЯДОЧИТЬ ПО
		|	Продукция
		|ИТОГИ
		|	СУММА(ВесРасход)
		|ПО
		|	Продукция";
	
	Запрос.УстановитьПараметр("ДатаНач",                  Новый Граница(НачалоДня(Объект.ДатаНачала), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКон",                  Новый Граница(КонецДня(Объект.ДатаОкончания), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",              Объект.Организация);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", Объект.ПодразделениеОрганизации);
	
	ВыборкаОбщ = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаОбщ.Количество() > 0 Тогда
		
		Пока ВыборкаОбщ.Следующий() Цикл
			
			НомерСтр = ПолучитьНомерКолонкиПродукции(ВыборкаОбщ.Продукция);
			
			Если НомерСтр = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТабличнойЧасти = Объект.Продукция.Получить(НомерСтр - 1);
			СтрокаТабличнойЧасти.ФактическийВесВыходаПродукции = ВыборкаОбщ.ВесРасход;
			
			ПродукцияФактическийВесВыходаПродукцииПриИзмененииНаСервере(СтрокаТабличнойЧасти);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьОтклоненияНаСервере();
	
	ОбновитьСообщенияНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГотовуюПродукциюИзВидаПомола(Команда)
	
	Если Объект.Продукция.Количество() > 0 Тогда		
		ТекстВопроса = НСтр("ru='Табличная часть ""Готовая продукция"" будет очищена. Продолжить?';uk='Таблична частина ""Готова продукція"" буде очищена. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьГотовуюПродукциюИзВидаПомолаЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьГотовуюПродукциюИзВидаПомолаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГотовуюПродукциюИзВидаПомолаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 	   
		Возврат;
	КонецЕсли;
	
	Объект.Продукция.Очистить();
	
	ЗаполнитьГотовуюПродукциюИзВидаПомолаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГотовуюПродукциюИзВидаПомолаНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ВидПомола) Тогда
		
		Для Каждого СтрПродукцииВидаПомола Из Объект.ВидПомола.Продукция Цикл
			НоваяСтрока = Объект.Продукция.Добавить();
			НоваяСтрока.Номенклатура                   = СтрПродукцииВидаПомола.Номенклатура;
			НоваяСтрока.ПлановыйПроцентВыходаПродукции = СтрПродукцииВидаПомола.ПлановыйПроцентВыходаПродукции;
		КонецЦикла;
		
	КонецЕсли;	
	
	УстановитьВидимостьКолонокРасчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтклонения(Команда)
	
	ЗаполнитьОтклоненияНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтклоненияНаСервере()
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
		СтрокаТабличнойЧасти.ВесОтклоненияОтНорм     =  СтрокаТабличнойЧасти.ФактическийВесВыходаПродукции - СтрокаТабличнойЧасти.РасчетныйВесВыходаПродукции;		
		СтрокаТабличнойЧасти.ПроцентОтклоненияОтНорм = СтрокаТабличнойЧасти.ФактическийПроцентВыходаПродукции - СтрокаТабличнойЧасти.РасчетныйПроцентВыходаПродукции;
	КонецЦикла;
	
	ОбновитьСообщенияНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРасчетныйВыход(Команда)
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
		СтрокаТабличнойЧасти.РасчетныйВесВыходаПродукции     = 0;
		СтрокаТабличнойЧасти.РасчетныйПроцентВыходаПродукции = 0;
	КонецЦикла;
	
	ОбновитьСообщенияНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФактическийВыход(Команда)
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
		СтрокаТабличнойЧасти.ФактическийВесВыходаПродукции     = 0;
		СтрокаТабличнойЧасти.ФактическийПроцентВыходаПродукции = 0;
	КонецЦикла;
	
	ОбновитьСообщенияНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтклонение(Команда)
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
		СтрокаТабличнойЧасти.ВесОтклоненияОтНорм     = 0;		
		СтрокаТабличнойЧасти.ПроцентОтклоненияОтНорм = 0;
	КонецЦикла;
	
	ОбновитьСообщенияНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьХарактеристикиИзВидаПомола(Команда)
	
	Если Объект.Расчеты.Количество() > 0 Тогда		
		ТекстВопроса = НСтр("ru='Cписок характеристик в табличной части Расчеты будет перезаполнен. Продолжить?';uk='Список характеристик в табличній частині Розрахунки буде перезаповнений. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьХарактеристикиИзВидаПомолаЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьХарактеристикиИзВидаПомолаНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьХарактеристикиИзВидаПомолаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 	   
		Возврат;
	КонецЕсли;
	
	Объект.Расчеты.Очистить();
	
	ЗаполнитьХарактеристикиИзВидаПомолаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьХарактеристикиИзВидаПомолаНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ВидПомола) Тогда
		
		Для Каждого СтрХарактеристик Из Объект.ВидПомола.Характеристики Цикл
			
			НоваяСтрока = Объект.Расчеты.Добавить();
			НоваяСтрока.Характеристика = СтрХарактеристик.Характеристика;
			
			РасчетыХарактеристикаПриИзмененииНаСервере(НоваяСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКачествоСреднимЗначением(Команда)
	
	Если Объект.Расчеты.Количество() > 0 Тогда		
		ТекстВопроса = НСтр("ru='Cписок качества зерна в табличной части Расчеты будет перезаполнен. Продолжить?';uk='Список якості зерна в табличній частині Розрахунки буде перезаповнений. Продовжити?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьКачествоСреднимЗначениемЗавершение", ЭтотОбъект, Параметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКачествоСреднимЗначениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда 	   
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКачествоСреднимЗначениемНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКачествоСреднимЗначениемНаСервере()
		
	ТабХарактеристик = Новый ТаблицаЗначений;
	ТабХарактеристик.Колонки.Добавить("Характеристика");
	ТабХарактеристик.Колонки.Добавить("Вес");
	ТабХарактеристик.Колонки.Добавить("ЦентнероПроценты");
	ТабХарактеристик.Колонки.Добавить("КвоЗначенийПоказателя");
	ТабХарактеристик.Колонки.Добавить("КачествоЗерна");
	
	КвоЛабАнализов = 0;
	
	Для Каждого СтрСырье Из Объект.Сырье Цикл
		
		Для Каждого СтрЛабАнализа Из СтрСырье.ЛабораторныйАнализ.Результаты Цикл
			
			Если ТипЗнч(СтрЛабАнализа.Значение) <> Тип("Число") Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТабХарактеристик.Добавить();
			НоваяСтрока.Характеристика        = СтрЛабАнализа.Характеристика;
			НоваяСтрока.Вес                   = СтрСырье.ФизическийВес;
			НоваяСтрока.ЦентнероПроценты      = СтрСырье.ФизическийВес * СтрЛабАнализа.Значение / 100;
			НоваяСтрока.КачествоЗерна	      = СтрЛабАнализа.Значение;
			НоваяСтрока.КвоЗначенийПоказателя = 1;
			
		КонецЦикла;
		
		КвоЛабАнализов = КвоЛабАнализов + 1;
		
	КонецЦикла;
	
	Если КвоЛабАнализов = 1 Тогда
		//
	Иначе
		ТабХарактеристик.Свернуть("Характеристика", "ЦентнероПроценты, КвоЗначенийПоказателя");
	КонецЕсли;
	
	Если КвоЛабАнализов <> 0  Тогда
		
		Для Каждого СтрРасчеты Из Объект.Расчеты Цикл
			
			КачествоЗерна = ПолучитьЗначениеХарактеристики(ТабХарактеристик, СтрРасчеты.Характеристика, КвоЛабАнализов);
			
			Если СтрРасчеты.Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.ЗерноваяПримесь2 
				ИЛИ СтрРасчеты.Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.ЗерноваяПримесь Тогда				
				МелкиеЗерна     = ПолучитьЗначениеХарактеристики(ТабХарактеристик, ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.МелкоеЗерно,    КвоЛабАнализов);
				КачествоЗерна   = КачествоЗерна + МелкиеЗерна;
			КонецЕсли;
			
			Если СтрРасчеты.Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.МелкоеЗерно Тогда
				ЗерноваяПримесь = ПолучитьЗначениеХарактеристики(ТабХарактеристик, ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.ЗерноваяПримесь, КвоЛабАнализов);
				КачествоЗерна   = КачествоЗерна + ЗерноваяПримесь;				
			КонецЕсли;
			
			// Расчет Ядра
			Если СтрРасчеты.Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.Ядро И КачествоЗерна = 0 Тогда
				СорнаяПримесь	= ПолучитьЗначениеХарактеристики(ТабХарактеристик, ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.СорнаяПримесь,   КвоЛабАнализов);
				ЗерноваяПримесь = ПолучитьЗначениеХарактеристики(ТабХарактеристик, ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.ЗерноваяПримесь, КвоЛабАнализов);
				МелкиеЗерна 	= ПолучитьЗначениеХарактеристики(ТабХарактеристик, ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.МелкоеЗерно,     КвоЛабАнализов);
				Пленчатость		= ПолучитьЗначениеХарактеристики(ТабХарактеристик, ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.Пленчатость,     КвоЛабАнализов);
				ОбрушеныхЗерен	= ПолучитьЗначениеХарактеристики(ТабХарактеристик, ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.ОбрушеныхЗерен,  КвоЛабАнализов);
				КачествоЗерна   = Окр(((100 - (СорнаяПримесь+ЗерноваяПримесь+МелкиеЗерна)) * (100 - Пленчатость)) / 100 + 0.7 * ОбрушеныхЗерен, 3);
			КонецЕсли;
			
			// Расчет Лузги
			Если СтрРасчеты.Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.Лузга И КачествоЗерна = 0 Тогда
				СорнаяПримесь	= ПолучитьЗначениеХарактеристики(ТабХарактеристик, ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.СорнаяПримесь,   КвоЛабАнализов);
				ЗерноваяПримесь = ПолучитьЗначениеХарактеристики(ТабХарактеристик, ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.ЗерноваяПримесь, КвоЛабАнализов);
				МелкиеЗерна 	= ПолучитьЗначениеХарактеристики(ТабХарактеристик, ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.МелкоеЗерно,     КвоЛабАнализов);
				Пленчатость		= ПолучитьЗначениеХарактеристики(ТабХарактеристик, ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.Пленчатость,     КвоЛабАнализов);
				КачествоЗерна   = Окр((100 - (СорнаяПримесь+ЗерноваяПримесь+МелкиеЗерна)) * Пленчатость / 100, 3);
			КонецЕсли;
			
			СтрРасчеты.КачествоЗерна = КачествоЗерна;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ТекущаяДатаДокумента = Объект.Дата;			
	
	МаксимальноеКоличествоСтрокПродукции = 6; // 10
	
	УстановитьФункциональныеОпцииФормы();
	
	УстановитьЗаголовокФормы();	
	
	УправлениеФормойНаСервере();	
	
	УстановитьСостояниеДокумента();
	
	ОбновитьСообщенияНаФорме();
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрыФункциональныхОпцийФормыДокумента(ЭтаФорма);	
	
	ВестиРасчетныйВыпускПродукции = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитПодразделенияОрганизации(Объект.ПодразделениеОрганизации, "ВестиРасчетныйВыпускПродукции");
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Сводная = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ИНАГРО_ВидыОперацийФорма117.Сводная");
	
	Элементы.Владелец.Видимость                             = НЕ Сводная;
	Элементы.ДоговорКонтрагента.Видимость                   = НЕ Сводная;
	
	Элементы.СырьеЗаполнитьПоФормам117ЗаПериод.Доступность  = Сводная;
	
	Элементы.ГруппаПродукцияПоВладельцам.Видимость          = Сводная;
	
	Элементы.НадписьСводныйВыходПродукции.Видимость         = Сводная;
	Элементы.НадписьСводныйПроцентВыходаПродукции.Видимость = Сводная;
	Элементы.НадписьОтклонение.Видимость                    = Сводная;
			
	УстановитьВидимостьКолонокРасчета(Форма);	
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере()	
	
	УправлениеФормой(ЭтаФорма);
	
	ОбновитьСообщенияНаФорме();
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьПараметрыВыбораВидОперации()
	
	МассивВидовОпераций = Документы.ИНАГРО_Форма117.ПолучитьФиксированныйМассивВидовОпераций();
	
	ПараметрМассивВидовОпераций = Новый ПараметрВыбора("Отбор.Ссылка", МассивВидовОпераций);
	
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(ПараметрМассивВидовОпераций);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	Элементы.ВидОперации.ПараметрыВыбора = НовыеПараметры;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	ОбъектФормы = ЭтаФорма.Объект;
	
	ТекстЗаголовка = НСтр("ru='Акт о зачистке производственного корпуса и результатах переработки зерна (форма №117)';uk='Акт про зачистку виробничого корпусу і результати переробки зерна (форма №117)'");
	
	Если ЗначениеЗаполнено(ОбъектФормы.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru=' %1 от %2';uk=' %1 від %2'"), ОбъектФормы.Номер, ОбъектФормы.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru=' (создание)';uk=' (створення)'");
	КонецЕсли;
	
	ЭтаФорма.Заголовок = ТекстЗаголовка + " (" + Строка(ОбъектФормы.ВидОперации) + ")";
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДокумента()
	
	СостояниеДокумента = ОбщегоНазначенияБП.СостояниеДокумента(Объект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКолонокРасчета(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Ном = 1;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
		Элементы["РасчетыПродукция" + Ном].Видимость = Истина;
		Элементы["РасчетыПродукция" + Ном].Заголовок = СтрокаТабличнойЧасти.Номенклатура;
		Элементы["ПродукцияПоВладельцамПродукция" + Ном].Видимость = Истина;
		Элементы["ПродукцияПоВладельцамПродукция" + Ном].Заголовок = СтрокаТабличнойЧасти.Номенклатура;		
		Ном = Ном + 1;
	КонецЦикла;	
	
	Пока Ном <= Форма.МаксимальноеКоличествоСтрокПродукции Цикл
		Элементы["РасчетыПродукция" + Ном].Видимость = Ложь;
		Элементы["РасчетыПродукция" + Ном].Заголовок = "";
		Элементы["ПродукцияПоВладельцамПродукция" + Ном].Видимость = Ложь;
		Элементы["ПродукцияПоВладельцамПродукция" + Ном].Заголовок = "";		
		Ном = Ном + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСообщенияНаФорме()
	
	Красный = Новый Цвет(255, 0, 0);
	
	// Продукция
	ПереработаноЗерна = Документы.ИНАГРО_Форма117.ПолучитьВесПущенногоВПереработкуЗерна(Объект);
	
	Элементы.НадписьПереработаноЗерна.Заголовок                      = "" + ПереработаноЗерна + " кг. ";
	
	ВсегоРасчетныйВыходПроцент 		       = Документы.ИНАГРО_Форма117.ПолучитьВсегоПроцентРасчетногоВыхода(Объект);
	ВсегоРасчетныйВыход 			       = Документы.ИНАГРО_Форма117.ПолучитьВсегоРасчетныйВыход(Объект);
	ВсегоФактическийВыходПроцент	       = Документы.ИНАГРО_Форма117.ПолучитьВсегоПроцентФактическогоВыхода(Объект);
	ВсегоФактическийВыход			       = Документы.ИНАГРО_Форма117.ПолучитьВсегоФактическийВыход(Объект);
	
	Элементы.НадписьРасчетныйВыходВсего.Заголовок                    = "" + ВсегоРасчетныйВыход + " кг. " + Формат(ВсегоРасчетныйВыходПроцент, "ЧЦ=6; ЧДЦ=2") + "%";
	
	Если ВсегоРасчетныйВыход <> ПереработаноЗерна ИЛИ ВсегоРасчетныйВыходПроцент <> 100 Тогда
		Элементы.НадписьРасчетныйВыходВсего.ЦветТекста = Красный;
	Иначе
		Элементы.НадписьРасчетныйВыходВсего.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	КонецЕсли;
	
	Элементы.НадписьФактическийВыходВсего.Заголовок                  = "" + ВсегоФактическийВыход + " кг. " + Формат(ВсегоФактическийВыходПроцент, "ЧЦ=6; ЧДЦ=2") + "%";
	
	Если ВсегоФактическийВыход <> ПереработаноЗерна ИЛИ ВсегоФактическийВыходПроцент <> 100 Тогда
		Элементы.НадписьФактическийВыходВсего.ЦветТекста = Красный;
	Иначе
		Элементы.НадписьФактическийВыходВсего.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	КонецЕсли;
	
	// Расчеты
	Элементы.НадписьИтогКоэффициентов.Заголовок                      = Документы.ИНАГРО_Форма117.ПолучитьИтогКоэффициентов(Объект);
	
	// Подвал
	РасчетныйПроцентВыходаПродукции 	   = ПолучитьРасчетныйПроцентВыходаПродукции();
	РасчетныйВесВыходаПродукции 		   = Окр (Документы.ИНАГРО_Форма117.ПолучитьВесПущенногоВПереработкуЗерна(Объект) * РасчетныйПроцентВыходаПродукции / 100);
	СводныйРасчетныйПроцентВыходаПродукции = ПолучитьСводныйРасчетныйПроцентВыходаПродукции();
	СводныйВесВыходаПродукции			   = Окр (Документы.ИНАГРО_Форма117.ПолучитьВесПущенногоВПереработкуЗерна(Объект) * СводныйРасчетныйПроцентВыходаПродукции / 100);
	ОтклонениеПроцентВыхода 			   = РасчетныйПроцентВыходаПродукции - СводныйРасчетныйПроцентВыходаПродукции;
	ОтклонениеВесВыхода 				   = РасчетныйВесВыходаПродукции - СводныйВесВыходаПродукции;	
	
	Элементы.НадписьРасчетныйПроцентВыходаПродукции.Заголовок        = "" + РасчетныйВесВыходаПродукции + " кг. " + Формат(РасчетныйПроцентВыходаПродукции, "ЧЦ=6; ЧДЦ=2") + "%";
	Элементы.НадписьСводныйПроцентВыходаПродукции.Заголовок = "" + СводныйВесВыходаПродукции + " кг. " + Формат(СводныйРасчетныйПроцентВыходаПродукции, "ЧЦ=6; ЧДЦ=2")  + "%";
	Элементы.НадписьОтклонение.Заголовок                             = "" + ОтклонениеВесВыхода + " кг. " + Формат(ОтклонениеПроцентВыхода, "ЧЦ=6; ЧДЦ=2") + "%";
	
	Если ОтклонениеВесВыхода ИЛИ ОтклонениеПроцентВыхода Тогда
		Элементы.НадписьОтклонение.ЦветТекста = Красный;
	Иначе
		Элементы.НадписьОтклонение.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;		
	КонецЕсли;
	
	Элементы.НадписьУсушка.Заголовок                                 = "" + Документы.ИНАГРО_Форма117.ПолучитьРасчетныйПроцентУсушки(Объект) + "% " + Документы.ИНАГРО_Форма117.ПолучитьВесУсушкиРасчетный(Объект) + "кг. ";
	Элементы.НадписьУсушкаФактическая.Заголовок                      = "" + Документы.ИНАГРО_Форма117.ПолучитьФактическийПроцентУсушки(Объект) + "% " + Документы.ИНАГРО_Форма117.ПолучитьВесУсушкиФактический(Объект) + "кг. ";
	Элементы.НадписьРасчетныеМехПотериВес.Заголовок                  = Документы.ИНАГРО_Форма117.ПолучитьРасчетныеМехПотери(Объект);
	Элементы.НадписьФактическиеМехПотериВес.Заголовок                = Документы.ИНАГРО_Форма117.ПолучитьФактическиеМехПотери(Объект);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРасчетныйПроцентВыходаПродукции()
	
	ПлановыйПроцентВыходаПродукции = 0;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
		Если ИНАГРО_Элеватор.Продукция(СтрокаТабличнойЧасти.Номенклатура) Тогда
			ПлановыйПроцентВыходаПродукции = ПлановыйПроцентВыходаПродукции + СтрокаТабличнойЧасти.РасчетныйПроцентВыходаПродукции;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПлановыйПроцентВыходаПродукции;
	
КонецФункции

&НаСервере
Функция ПолучитьСводныйРасчетныйПроцентВыходаПродукции()
	
	СводныйВесГотовойПродукции = 0;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
		Если ИНАГРО_Элеватор.Продукция(СтрокаТабличнойЧасти.Номенклатура) Тогда
			НомерКолонкиВТаблицеПродукция = СтрокаТабличнойЧасти.НомерСтроки;
			СводныйВесГотовойПродукции = СводныйВесГотовойПродукции + Объект.ПродукцияПоВладельцам.Итог("Продукция" + НомерКолонкиВТаблицеПродукция);
		КонецЕсли;
	КонецЦикла;
	
	ОбщийВесСырья = Объект.Сырье.Итог("ФизическийВес");
	
	Результат = Окр(?(ОбщийВесСырья = 0, 0, СводныйВесГотовойПродукции * 100 / ОбщийВесСырья),2);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыДляДоговоров()
	
	ПараметрыОтбора = Новый Структура("ВидХранения, Урожай");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Объект);
	
	Возврат ПараметрыОтбора;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыДляПроверкиЗаполнения(СтрокаТабличнойЧасти)
	
	ПараметрыДляПроверкиЗаполнения = Новый Структура("Склад, ВидХранения, Урожай");
	ЗаполнитьЗначенияСвойств(ПараметрыДляПроверкиЗаполнения, Объект);
	ПараметрыДляПроверкиЗаполнения.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);

	Возврат ПараметрыДляПроверкиЗаполнения; 

КонецФункции

&НаКлиенте
Функция ПолучитьДанныеСтрокиТаблицыПродукция(ТекущиеДанные)
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"ФактическийВесВыходаПродукции, ФактическийПроцентВыходаПродукции, РасчетныйВесВыходаПродукции,
		|РасчетныйПроцентВыходаПродукции, ВесОтклоненияОтНорм, ПроцентОтклоненияОтНорм
		|");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);	
	
	Возврат ДанныеСтрокиТаблицы;
	
КонецФункции

&НаКлиенте
Функция ПолучитьДанныеСтрокиТаблицыРасчеты(ТекущиеДанные)
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Характеристика, ЕдиницаИзмерения, КачествоЗерна,
		|КоэффициентВлиянияХарактеристики");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные); 
	
	Возврат ДанныеСтрокиТаблицы;
	
КонецФункции

&НаСервере
Функция ПолучитьНомерКолонкиПродукции(Продукция);
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
		Если СтрокаТабличнойЧасти.Номенклатура = Продукция Тогда
			Возврат СтрокаТабличнойЧасти.НомерСтроки;			
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

&НаСервере
Процедура ОткоректироватьКачествоЗерна(Характеристика, Отклонение)
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Расчеты Цикл
		
		Если СтрокаТабличнойЧасти.Характеристика = Характеристика Тогда
			СтрокаТабличнойЧасти.КачествоЗерна = СтрокаТабличнойЧасти.КачествоЗерна + Отклонение;			
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеХарактеристики(ТабХарактеристик, Характеристика, КвоЛабАнализов)
	
	Результат = 0;
	
	Если Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.ЗерноваяПримесь2 Тогда
		// ЗерноваяПримесь2 поищем эту характеристику, а если нет оищем по ЗерновойПримеси
		СтрТабХарактеристик = ТабХарактеристик.Найти(Характеристика);
		Если СтрТабХарактеристик = Неопределено Тогда
			СтрТабХарактеристик = ТабХарактеристик.Найти(ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.ЗерноваяПримесь);
		КонецЕсли;
	Иначе			
		СтрТабХарактеристик = ТабХарактеристик.Найти(Характеристика);
	КонецЕсли;
	
	Если СтрТабХарактеристик <> Неопределено Тогда
		
		Если СтрТабХарактеристик.КвоЗначенийПоказателя <> КвоЛабАнализов Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание: показатель ""%1"" присутствует не во всех анализах сырья! Среднее значение ""%1"" партии будет расчитано неверно!';uk='Увага: показник ""%1"" присутні не у всіх аналізах сировини! Середнє значення ""%1"" партії буде розраховано невірно!'"), СтрТабХарактеристик.Характеристика);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если КвоЛабАнализов = 1 Тогда
			Результат = СтрТабХарактеристик.КачествоЗерна;
		Иначе			
			Результат = ИНАГРО_Элеватор.Процент(Документы.ИНАГРО_Форма117.ПолучитьВесПущенногоВПереработкуЗерна(Объект), СтрТабХарактеристик.ЦентнероПроценты);
		КонецЕсли
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура РассчитатьКоэффициентВлиянияКачестваЗерна(СтрокаТабличнойЧасти)
	
	КоэффициентВлиянияХарактеристики = 0;
	
	Если СтрокаТабличнойЧасти.КачествоЗерна = Неопределено Тогда
		СтрокаТабличнойЧасти.КачествоЗерна = 0; 
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.КачествоЗерна <> 0 Тогда
		
		СтруктураХарактеристики = Документы.ИНАГРО_Форма117.ПолучитьСтруктуруКондицийХарактеристики(СтрокаТабличнойЧасти.Характеристика, Объект.ВидПомола);
		
		Если СтруктураХарактеристики.БазиснаяКондицияДляПереработки = Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для характеристики ""%1"" не указана базисная кондиция для переработки';uk='Для характеристики ""%1"" не вказана базисна кондиція для переробки'"), СтрокаТабличнойЧасти.Характеристика);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);			
			СтруктураХарактеристики.БазиснаяКондицияДляПереработки = 0;
		КонецЕсли;
		
		НадбавкаЗаОтклоненияОтБазиса = Документы.ИНАГРО_Форма117.ПолучитьНадбавкуЗаОтклонениеОтБазиса(СтрокаТабличнойЧасти.Характеристика, Объект.ВидПомола);
		
		Если НадбавкаЗаОтклоненияОтБазиса = Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для характеристики ""%1"" не указана надбавка за отклонение от базиса';uk='Для характеристики ""%1"" не вказана надбавка за відхилення від базису'"), СтрокаТабличнойЧасти.Характеристика);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);			
			НадбавкаЗаОтклоненияОтБазиса = 0;
		КонецЕсли;

		Если СтрокаТабличнойЧасти.Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.Влажность Тогда
			
			Если Объект.ВидПомола.ИспользоватьВлажностьПродукцииПриРасчетеУсушки Тогда
				СтруктураХарактеристики.БазиснаяКондицияДляПереработки = Объект.ВлажностьПродукции;
			КонецЕсли;
			
			Если Объект.ВидПомола.ВидПереработки = Перечисления.ИНАГРО_ВидыПереработки.Крупа Тогда
				
				Если СтруктураХарактеристики.НеРассчитыватьКоэффициентВлиянияЕслиБольшеБазиса Тогда
					Если СтрокаТабличнойЧасти.КачествоЗерна > СтруктураХарактеристики.БазиснаяКондицияДляПереработки Тогда
						КоэффициентВлиянияХарактеристики = 0;
					Иначе
						Усушка = Объект.ВидПомола.Усушка;
						КоэффициентВлиянияХарактеристики = Окр((СтрокаТабличнойЧасти.КачествоЗерна - СтруктураХарактеристики.БазиснаяКондицияДляПереработки) * 100 / (100 - СтруктураХарактеристики.БазиснаяКондицияДляПереработки), 2) - Усушка;
					КонецЕсли;
				ИначеЕсли СтруктураХарактеристики.НеРассчитыватьКоэффициентВлиянияЕслиМеньшеБазиса Тогда
					Если СтрокаТабличнойЧасти.КачествоЗерна < СтруктураХарактеристики.БазиснаяКондицияДляПереработки Тогда
						КоэффициентВлиянияХарактеристики = 0;
					Иначе
						Усушка = Объект.ВидПомола.Усушка;
						КоэффициентВлиянияХарактеристики = Окр((СтрокаТабличнойЧасти.КачествоЗерна - СтруктураХарактеристики.БазиснаяКондицияДляПереработки) * 100 / (100 - СтруктураХарактеристики.БазиснаяКондицияДляПереработки), 2) - Усушка;
					КонецЕсли;
				Иначе	
					Усушка = Объект.ВидПомола.Усушка;
					КоэффициентВлиянияХарактеристики = Окр((СтрокаТабличнойЧасти.КачествоЗерна - СтруктураХарактеристики.БазиснаяКондицияДляПереработки) * 100 / (100 - СтруктураХарактеристики.БазиснаяКондицияДляПереработки), 2) - Усушка;
				КонецЕсли;
				
			ИначеЕсли Объект.ВидПомола.ВидПереработки = Перечисления.ИНАГРО_ВидыПереработки.Мука Тогда
				
				Если СтруктураХарактеристики.НеРассчитыватьКоэффициентВлиянияЕслиБольшеБазиса Тогда
					Если СтрокаТабличнойЧасти.КачествоЗерна > СтруктураХарактеристики.БазиснаяКондицияДляПереработки Тогда
						КоэффициентВлиянияХарактеристики = 0;
					Иначе
						КоэффициентВлиянияХарактеристики = Окр((СтрокаТабличнойЧасти.КачествоЗерна - СтруктураХарактеристики.БазиснаяКондицияДляПереработки) * 100 / (100 - СтруктураХарактеристики.БазиснаяКондицияДляПереработки) * НадбавкаЗаОтклоненияОтБазиса, 2);
					КонецЕсли;
				ИначеЕсли СтруктураХарактеристики.НеРассчитыватьКоэффициентВлиянияЕслиМеньшеБазиса Тогда
					Если СтрокаТабличнойЧасти.КачествоЗерна < СтруктураХарактеристики.БазиснаяКондицияДляПереработки Тогда
						КоэффициентВлиянияХарактеристики = 0;
					Иначе
						КоэффициентВлиянияХарактеристики = Окр((СтрокаТабличнойЧасти.КачествоЗерна - СтруктураХарактеристики.БазиснаяКондицияДляПереработки) * 100 / (100 - СтруктураХарактеристики.БазиснаяКондицияДляПереработки) * НадбавкаЗаОтклоненияОтБазиса, 2);
					КонецЕсли;
				Иначе	
					КоэффициентВлиянияХарактеристики = Окр((СтрокаТабличнойЧасти.КачествоЗерна - СтруктураХарактеристики.БазиснаяКондицияДляПереработки) * 100 / (100 - СтруктураХарактеристики.БазиснаяКондицияДляПереработки) * НадбавкаЗаОтклоненияОтБазиса, 2);
				КонецЕсли;
				
			ИначеЕсли Объект.ВидПомола.ВидПереработки = Перечисления.ИНАГРО_ВидыПереработки.РжанаяМука Тогда
				
				Если СтруктураХарактеристики.НеРассчитыватьКоэффициентВлиянияЕслиБольшеБазиса Тогда
					Если СтрокаТабличнойЧасти.КачествоЗерна > СтруктураХарактеристики.БазиснаяКондицияДляПереработки Тогда
						УвлажнениеУсушка = 0;
					Иначе
						УвлажнениеУсушка = (СтрокаТабличнойЧасти.КачествоЗерна - СтруктураХарактеристики.БазиснаяКондицияДляПереработки) * 100 / (100 - СтруктураХарактеристики.БазиснаяКондицияДляПереработки);
					КонецЕсли;
				ИначеЕсли СтруктураХарактеристики.НеРассчитыватьКоэффициентВлиянияЕслиМеньшеБазиса Тогда
					Если СтрокаТабличнойЧасти.КачествоЗерна < СтруктураХарактеристики.БазиснаяКондицияДляПереработки Тогда
						УвлажнениеУсушка = 0;
					Иначе
						УвлажнениеУсушка = (СтрокаТабличнойЧасти.КачествоЗерна - СтруктураХарактеристики.БазиснаяКондицияДляПереработки) * 100 / (100 - СтруктураХарактеристики.БазиснаяКондицияДляПереработки);
					КонецЕсли;
				Иначе	
					УвлажнениеУсушка = (СтрокаТабличнойЧасти.КачествоЗерна - СтруктураХарактеристики.БазиснаяКондицияДляПереработки) * 100 / (100 - СтруктураХарактеристики.БазиснаяКондицияДляПереработки);
				КонецЕсли;
				
				Если УвлажнениеУсушка = 0 Тогда
					КоэффициентВлиянияХарактеристики = 0;
				ИначеЕсли СтрокаТабличнойЧасти.КачествоЗерна < СтруктураХарактеристики.БазиснаяКондицияДляПереработки ИЛИ УвлажнениеУсушка > 0.3 Тогда
					КоэффициентВлиянияХарактеристики = Окр(УвлажнениеУсушка - 0.3 * НадбавкаЗаОтклоненияОтБазиса, 2);
				Иначе
					КоэффициентВлиянияХарактеристики = Окр(УвлажнениеУсушка + 0.3 * НадбавкаЗаОтклоненияОтБазиса, 2);				
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СтрокаТабличнойЧасти.Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.ЗерноваяПримесь 
			ИЛИ СтрокаТабличнойЧасти.Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.ЗерноваяПримесь2 Тогда
			
			Если СтруктураХарактеристики.НеРассчитыватьКоэффициентВлиянияЕслиБольшеБазиса Тогда
				Если СтрокаТабличнойЧасти.КачествоЗерна > СтруктураХарактеристики.БазиснаяКондицияДляПереработки Тогда
					КоэффициентВлиянияХарактеристики = 0;
				Иначе
					КоэффициентВлиянияХарактеристики = Окр((СтрокаТабличнойЧасти.КачествоЗерна - СтруктураХарактеристики.БазиснаяКондицияДляПереработки) * НадбавкаЗаОтклоненияОтБазиса, 2);
				КонецЕсли;
			ИначеЕсли СтруктураХарактеристики.НеРассчитыватьКоэффициентВлиянияЕслиМеньшеБазиса Тогда
				Если СтрокаТабличнойЧасти.КачествоЗерна < СтруктураХарактеристики.БазиснаяКондицияДляПереработки Тогда
					КоэффициентВлиянияХарактеристики = 0;
				Иначе
					КоэффициентВлиянияХарактеристики = Окр((СтрокаТабличнойЧасти.КачествоЗерна - СтруктураХарактеристики.БазиснаяКондицияДляПереработки) * НадбавкаЗаОтклоненияОтБазиса, 2);
				КонецЕсли;
			Иначе	
				КоэффициентВлиянияХарактеристики = Окр((СтрокаТабличнойЧасти.КачествоЗерна - СтруктураХарактеристики.БазиснаяКондицияДляПереработки) * НадбавкаЗаОтклоненияОтБазиса, 2);
			КонецЕсли;
			
		ИначеЕсли СтрокаТабличнойЧасти.Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.СорнаяПримесь Тогда
			
			Если СтруктураХарактеристики.НеРассчитыватьКоэффициентВлиянияЕслиБольшеБазиса Тогда
				Если СтрокаТабличнойЧасти.КачествоЗерна > СтруктураХарактеристики.БазиснаяКондицияДляПереработки Тогда
					КоэффициентВлиянияХарактеристики = 0;
				Иначе
					КоэффициентВлиянияХарактеристики = СтрокаТабличнойЧасти.КачествоЗерна - СтруктураХарактеристики.БазиснаяКондицияДляПереработки;
				КонецЕсли;
			ИначеЕсли СтруктураХарактеристики.НеРассчитыватьКоэффициентВлиянияЕслиМеньшеБазиса Тогда
				Если СтрокаТабличнойЧасти.КачествоЗерна < СтруктураХарактеристики.БазиснаяКондицияДляПереработки Тогда
					КоэффициентВлиянияХарактеристики = 0;
				Иначе
					КоэффициентВлиянияХарактеристики = СтрокаТабличнойЧасти.КачествоЗерна - СтруктураХарактеристики.БазиснаяКондицияДляПереработки;
				КонецЕсли;
			Иначе	
				КоэффициентВлиянияХарактеристики = СтрокаТабличнойЧасти.КачествоЗерна - СтруктураХарактеристики.БазиснаяКондицияДляПереработки;
			КонецЕсли;
			
		ИначеЕсли СтрокаТабличнойЧасти.Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.ОбрушеныхЗерен Тогда
			
			Если СтруктураХарактеристики.НеРассчитыватьКоэффициентВлиянияЕслиБольшеБазиса Тогда
				Если СтрокаТабличнойЧасти.КачествоЗерна > СтруктураХарактеристики.БазиснаяКондицияДляПереработки Тогда
					КоэффициентВлиянияХарактеристики = 0;
				Иначе
					КоэффициентВлиянияХарактеристики = СтрокаТабличнойЧасти.КачествоЗерна * НадбавкаЗаОтклоненияОтБазиса;
				КонецЕсли;
			ИначеЕсли СтруктураХарактеристики.НеРассчитыватьКоэффициентВлиянияЕслиМеньшеБазиса Тогда
				Если СтрокаТабличнойЧасти.КачествоЗерна < СтруктураХарактеристики.БазиснаяКондицияДляПереработки Тогда
					КоэффициентВлиянияХарактеристики = 0;
				Иначе
					КоэффициентВлиянияХарактеристики = СтрокаТабличнойЧасти.КачествоЗерна * НадбавкаЗаОтклоненияОтБазиса;
				КонецЕсли;
			Иначе	
				КоэффициентВлиянияХарактеристики = СтрокаТабличнойЧасти.КачествоЗерна * НадбавкаЗаОтклоненияОтБазиса;
			КонецЕсли;
			
		Иначе
			
			Если СтруктураХарактеристики.НеРассчитыватьКоэффициентВлиянияЕслиБольшеБазиса  Тогда
				Если СтрокаТабличнойЧасти.КачествоЗерна > СтруктураХарактеристики.БазиснаяКондицияДляПереработки Тогда
					КоэффициентВлиянияХарактеристики = 0;
				Иначе
					КоэффициентВлиянияХарактеристики = Окр((СтруктураХарактеристики.БазиснаяКондицияДляПереработки - СтрокаТабличнойЧасти.КачествоЗерна) * НадбавкаЗаОтклоненияОтБазиса, 2);
				КонецЕсли;
			ИначеЕсли СтруктураХарактеристики.НеРассчитыватьКоэффициентВлиянияЕслиМеньшеБазиса Тогда
				Если СтрокаТабличнойЧасти.КачествоЗерна < СтруктураХарактеристики.БазиснаяКондицияДляПереработки Тогда
					КоэффициентВлиянияХарактеристики = 0;
				Иначе
					КоэффициентВлиянияХарактеристики = Окр((СтруктураХарактеристики.БазиснаяКондицияДляПереработки - СтрокаТабличнойЧасти.КачествоЗерна) * НадбавкаЗаОтклоненияОтБазиса, 2);
				КонецЕсли;
			Иначе	
				КоэффициентВлиянияХарактеристики = Окр((СтруктураХарактеристики.БазиснаяКондицияДляПереработки - СтрокаТабличнойЧасти.КачествоЗерна) * НадбавкаЗаОтклоненияОтБазиса, 2);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти.КоэффициентВлиянияХарактеристики = КоэффициентВлиянияХарактеристики;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьВыходПродукции()
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
		
		НомерКолонкиВТаблицеПродукция  = СтрокаТабличнойЧасти.НомерСтроки;
		Отклонение                     = Объект.Расчеты.Итог("Продукция" + НомерКолонкиВТаблицеПродукция);
		ПлановыйПроцентВыходаПродукции = СтрокаТабличнойЧасти.ПлановыйПроцентВыходаПродукции;
		СтрокаТабличнойЧасти.РасчетныйПроцентВыходаПродукции = ПлановыйПроцентВыходаПродукции + Отклонение;
		
		ПродукцияРасчетныйПроцентВыходаПродукцииПриИзмененииНаСервере(СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
	// Если вес выхода продукции не равен весу выхода
	ПереработаноЗерна 	= Документы.ИНАГРО_Форма117.ПолучитьВесПущенногоВПереработкуЗерна(Объект);
	ВсегоРасчетныйВыход	= Документы.ИНАГРО_Форма117.ПолучитьВсегоРасчетныйВыход(Объект);
	Разница             = ПереработаноЗерна - ВсегоРасчетныйВыход;
	
	Если Разница <> 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Разница между весом переработаного сырья и полученой продукции ""%1"" кг.';uk='Різниця між вагою переробленої сировини і отриманої продукції ""%1"" кг.'"), Разница);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОтклонение(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.ВесОтклоненияОтНорм     = ?(СтрокаТабличнойЧасти.ФактическийВесВыходаПродукции = 0,
	                                                 0,
													 СтрокаТабличнойЧасти.ФактическийВесВыходаПродукции - СтрокаТабличнойЧасти.РасчетныйВесВыходаПродукции);	
													 
	СтрокаТабличнойЧасти.ПроцентОтклоненияОтНорм = ?(СтрокаТабличнойЧасти.ФактическийПроцентВыходаПродукции = 0,
	                                                 0,
													 СтрокаТабличнойЧасти.ФактическийПроцентВыходаПродукции - СтрокаТабличнойЧасти.РасчетныйПроцентВыходаПродукции);
	
	ОбновитьСообщенияНаФорме();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИтогиПоПлановомуВыходуПродукции(ВсегоПлановыйПроцентВыходаПродукции, ВсегоПлановыйПроцентВыходаГодныхОтходов)
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Продукция Цикл
		
		Если ИНАГРО_Элеватор.Продукция(СтрокаТабличнойЧасти.Номенклатура) Тогда
			ВсегоПлановыйПроцентВыходаПродукции     = ВсегоПлановыйПроцентВыходаПродукции + СтрокаТабличнойЧасти.ПлановыйПроцентВыходаПродукции;
		КонецЕсли;
		
		Если ИНАГРО_Элеватор.ГодныеОтходы(СтрокаТабличнойЧасти.Номенклатура) Тогда
			ВсегоПлановыйПроцентВыходаГодныхОтходов = ВсегоПлановыйПроцентВыходаГодныхОтходов + СтрокаТабличнойЧасти.ПлановыйПроцентВыходаПродукции;
		КонецЕсли;
		
	КонецЦикла;		
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьВыход(СтрокаТабличнойЧасти)
	
	ВсегоПлановыйПроцентВыходаПродукции     = 0;
	ВсегоПлановыйПроцентВыходаГодныхОтходов = 0;
	
	ПолучитьИтогиПоПлановомуВыходуПродукции(ВсегоПлановыйПроцентВыходаПродукции, ВсегоПлановыйПроцентВыходаГодныхОтходов);
	
	КоэффициентВлиянияХарактеристики = СтрокаТабличнойЧасти.КоэффициентВлиянияХарактеристики;
	ИтогКоэффициентов = 0;
	
	// Расчет коэффициентов для продукции
	Для Каждого СтрПродукции Из Объект.Продукция Цикл
		
		Коэффициент                   = 0;
		НормаИзмененияВыходаПродукции = Документы.ИНАГРО_Форма117.ПолучитьНормуИзмененияВыходаПродукции(СтрокаТабличнойЧасти.Характеристика, Объект.ВидПомола, СтрПродукции.Номенклатура);
		Коэффициент                   = Окр(КоэффициентВлиянияХарактеристики * НормаИзмененияВыходаПродукции, 2);
		ИтогКоэффициентов             = ИтогКоэффициентов + Коэффициент;
		НомерКолонкиВТаблицеПродукция = СтрПродукции.НомерСтроки;
		
		СтрокаТабличнойЧасти["Продукция" + НомерКолонкиВТаблицеПродукция] = Коэффициент;
		
	КонецЦикла;				
	
	Если СтрокаТабличнойЧасти.Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.Влажность Тогда
		СтрокаТабличнойЧасти.Усушка = СтрокаТабличнойЧасти.КоэффициентВлиянияХарактеристики;
		ИтогКоэффициентов           = ИтогКоэффициентов + СтрокаТабличнойЧасти.Усушка;
	КонецЕсли;
	
	Если ИтогКоэффициентов <> 0 Тогда
		// Всего итог по колонке должен равнятся "0" разницу положим на первую колонку
		СтрокаТабличнойЧасти["Продукция1"] = СтрокаТабличнойЧасти["Продукция1"] - ИтогКоэффициентов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция КоличествоПродуктовБольшеДопустимого()
	
	Результат = Ложь;
	
	Если Объект.Продукция.Количество() > МаксимальноеКоличествоСтрокПродукции Тогда		
		ТекстСообщения = Нстр("ru='Количество строк с продукцией превышает максимально допустимое значение!';uk='Кількість рядків з продукцією перевищує максимально допустиме значення!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти  

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
