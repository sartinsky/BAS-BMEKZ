
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПроцедурыИФункцииПечати

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Форма117
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПФ_MXL_Форма117";
	КомандаПечати.Представление = НСтр("ru='Акт о зачистке производственного корпуса и результатах переработки зерна';uk='Акт про зачистку виробничого корпусу і результати переробки зерна'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокументаОбщая,ФормаСписка";
	
	// СоставПомольнойПартииМуки
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПФ_MXL_СоставПомольнойПартииМуки";
	КомандаПечати.Представление = НСтр("ru='Состав помольной партии муки';uk='Склад помольної партії муки'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокументаОбщая,ФормаСписка";
    
    // Форма117
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПФ_MXL_Форма117_2021";
	КомандаПечати.Представление = НСтр("ru='Акт о зачистке производственного корпуса и результатах переработки зерна (2021)';uk='Акт про зачистку виробничого корпусу і результати переробки зерна (2021)'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	КомандаПечати.СписокФорм    = "ФормаДокументаОбщая,ФормаСписка";

	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Акт о зачистке производственного корпуса и результатах переработки зерна (форма №117)""';uk='Реєстр документів ""Акт про зачистку виробничого корпусу і результати переробки зерна (форма №117)""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;

    
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	// Проверяем, нужно ли для макета Форма117 формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Форма117") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПФ_MXL_Форма117", НСтр("ru='Акт о зачистке производственного корпуса и результатах переработки зерна';uk='Акт про зачистку виробничого корпусу і результати переробки зерна'"), 
		ПечатьФорма117(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_Форма117.ПФ_MXL_Форма117", ,Истина);
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_СоставПомольнойПартииМуки") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПФ_MXL_СоставПомольнойПартииМуки", НСтр("ru='Состав помольной партии муки';uk='Склад помольної партії муки'"), 
		ПечатьСоставПомольнойПартииМуки(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_Форма117.ПФ_MXL_СоставПомольнойПартииМуки", ,Истина);

    ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Форма117_2021") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПФ_MXL_Форма117_2021", НСтр("ru='Акт о зачистке производственного корпуса и результатах переработки зерна (2021)';uk='Акт про зачистку виробничого корпусу і результати переробки зерна (2021)'"), 
		ПечатьФорма117_2021(МассивОбъектов, ОбъектыПечати, ПараметрыВывода), , "Документ.ИНАГРО_Форма117.ПФ_MXL_UK_Форма117_2021", ,Истина);
        
    КонецЕсли; 	

КонецПроцедуры

Процедура ВывестиСтрокуРасчетаФормы117(Макет, ТабДокумент, ИмяСтрокиТабДокумента, СтрРасчетов = Неопределено, Ссылка)
	
		ИмяШапки = "ШапкаТаблицыРасчетов";
		ИмяСтрокиВыходов = "СтрокаВыходов";
		НомКолонки = 4;
		// начало
		ОблШапкаНачалоТаблицыРасчетов=Макет.ПолучитьОбласть(""+ИмяСтрокиТабДокумента+" | НачалоТаблицыРасчетов");
		Если ИмяСтрокиТабДокумента = ИмяШапки Тогда
		ИначеЕсли ИмяСтрокиТабДокумента = ИмяСтрокиВыходов Тогда
			// усушка
			ЧислительУсушки = "";
			ЗнаменательУсушки = "";
			Усушка_ = "";		
			
			БазиснаяКондицияДляПереработки = ПолучитьБазиснуюКондициюДляПереработки(ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.Влажность, Ссылка.ВидПомола);
			СтруктураХарактеристики = ПолучитьПоказателиПоВидуПомола(ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.Влажность, Ссылка.ВидПомола);			
			
			Если Ссылка.ВидПомола.ИспользоватьВлажностьПродукцииПриРасчетеУсушки Тогда
				БазиснаяКондицияДляПереработки = Ссылка.ВлажностьПродукции;
			КонецЕсли;
			
			НадбавкаЗаОтклоненияОтБазиса = ПолучитьНадбавкуЗаОтклонениеОтБазиса(ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.Влажность,Ссылка.ВидПомола);		
			Влажность_ =  ПолучитьВлажность(Ссылка);
			////////////////////////////////////////////////////////////
			ПечататьФормулу = Истина;
			Если СтруктураХарактеристики = Неопределено Тогда
				ПечататьФормулу = Ложь;
			ИначеЕсли СтруктураХарактеристики.НеРассчитыватьКоэффициентВлиянияЕслиБольшеБазиса = Истина Тогда
				Если Влажность_ > БазиснаяКондицияДляПереработки Тогда
					ПечататьФормулу = Ложь;
				КонецЕсли;
			ИначеЕсли СтруктураХарактеристики.НеРассчитыватьКоэффициентВлиянияЕслиМеньшеБазиса = Истина Тогда
				Если Влажность_ < БазиснаяКондицияДляПереработки Тогда
					ПечататьФормулу = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			////////////////////////////////////////////////////////////
 
			Если ПечататьФормулу Тогда
				ЧислительУсушки = "(" + Влажность_ + " - " + БазиснаяКондицияДляПереработки + ") * 100";
				ЗнаменательУсушки = "(100 - " + БазиснаяКондицияДляПереработки + ")";
				Усушка_ = Окр((Влажность_ - БазиснаяКондицияДляПереработки) * 100 / (100 - БазиснаяКондицияДляПереработки), 2);
			КонецЕсли;
			//КонецЕсли;
			ОблШапкаНачалоТаблицыРасчетов.Параметры.ЧислительУсушки = ЧислительУсушки;		
			ОблШапкаНачалоТаблицыРасчетов.Параметры.ЗнаменательУсушки = ЗнаменательУсушки;
			ОблШапкаНачалоТаблицыРасчетов.Параметры.Усушка = Усушка_;		
		Иначе
			ОблШапкаНачалоТаблицыРасчетов.Параметры.Характеристика = СтрРасчетов.Характеристика;
			ОблШапкаНачалоТаблицыРасчетов.Параметры.КачествоЗерна = СтрРасчетов.КачествоЗерна;
			ОблШапкаНачалоТаблицыРасчетов.Параметры.КоефициентВлиянияХарактеристики = СтрРасчетов.КоэффициентВлиянияХарактеристики;
		КонецЕсли;	
		ТабДокумент.Вывести(ОблШапкаНачалоТаблицыРасчетов);
		
		// продукция
		ИтогПлановыйПроцентВыходаПродукции = 0;	
		ИтогКоефициентовПродукции = 0;	
		ВсегоИтогКоефициентовПродукции = 0;
		ИтогРасчетныйПроцентВыходаПродукции = 0;
		ИтогРасчетныйВесВыходаПродукции = 0;
		ИтогФактическийПроцентВыходаПродукции = 0;
		ИтогФактическийВесВыходаПродукции = 0;
		ИтогПроцентОтклоненияОтНорм = 0;
		ИтогВесОтклоненияОтНорм = 0;
		ОблШапкаПродукцияТаблицыРасчетов = Макет.ПолучитьОбласть(""+ИмяСтрокиТабДокумента+" | ПродукцияТаблицыРасчетов");
		
		МаксимальноеКоличествоСтрокПродукции = 6;
		КоличествоСтрокНоменклатуры = 0;   // количество строк в ТЧ с продукцией без строк с отходами
		Для Каждого СтрПродукции Из Ссылка.Продукция Цикл
			Если ИНАГРО_Элеватор.Продукция(СтрПродукции.Номенклатура) Тогда
				КоличествоСтрокНоменклатуры = КоличествоСтрокНоменклатуры + 1;
				ПлановыйПроцентВыходаПродукции = СтрПродукции.ПлановыйПроцентВыходаПродукции;
				Если ИмяСтрокиТабДокумента = ИмяШапки Тогда
					ОблШапкаПродукцияТаблицыРасчетов.Параметры.Продукция = ПолучитьНаименованиеНоменклатуры(СтрПродукции.Номенклатура);
					ОблШапкаПродукцияТаблицыРасчетов.Параметры.НомКолонки = НомКолонки;
					НомКолонки = НомКолонки + 1;				
					ИтогПлановыйПроцентВыходаПродукции = ИтогПлановыйПроцентВыходаПродукции + ПлановыйПроцентВыходаПродукции;
					ОблШапкаПродукцияТаблицыРасчетов.Параметры.БазисныйВыход = ПлановыйПроцентВыходаПродукции;
				ИначеЕсли ИмяСтрокиТабДокумента = ИмяСтрокиВыходов Тогда				
					НомерКолонкиВТаблицеПродукция = СтрПродукции.НомерСтроки;
					ВсегоКоефициентПродукции = Ссылка.Расчеты.Итог("Продукция" + НомерКолонкиВТаблицеПродукция);				
					ВсегоИтогКоефициентовПродукции = ВсегоИтогКоефициентовПродукции + ВсегоКоефициентПродукции;
					ОблШапкаПродукцияТаблицыРасчетов.Параметры.ВсегоКоефициентПродукции = ВсегоКоефициентПродукции;
					
					РасчетныйПроцентВыходаПродукции = СтрПродукции.РасчетныйПроцентВыходаПродукции;
					ИтогРасчетныйПроцентВыходаПродукции = ИтогРасчетныйПроцентВыходаПродукции + РасчетныйПроцентВыходаПродукции;
					ОблШапкаПродукцияТаблицыРасчетов.Параметры.РасчетныйПроцентВыходаПродукции = РасчетныйПроцентВыходаПродукции;
					
					РасчетныйВесВыходаПродукции = СтрПродукции.РасчетныйВесВыходаПродукции;
					ИтогРасчетныйВесВыходаПродукции = ИтогРасчетныйВесВыходаПродукции + РасчетныйВесВыходаПродукции;
					ОблШапкаПродукцияТаблицыРасчетов.Параметры.РасчетныйВесВыходаПродукции = РасчетныйВесВыходаПродукции;
					
					ФактическийПроцентВыходаПродукции = СтрПродукции.ФактическийПроцентВыходаПродукции;
					ИтогФактическийПроцентВыходаПродукции = ИтогФактическийПроцентВыходаПродукции + ФактическийПроцентВыходаПродукции;
					ОблШапкаПродукцияТаблицыРасчетов.Параметры.ФактическийПроцентВыходаПродукции = ФактическийПроцентВыходаПродукции;
					
					ФактическийВесВыходаПродукции = СтрПродукции.ФактическийВесВыходаПродукции;
					ИтогФактическийВесВыходаПродукции = ИтогФактическийВесВыходаПродукции + ФактическийВесВыходаПродукции;
					ОблШапкаПродукцияТаблицыРасчетов.Параметры.ФактическийВесВыходаПродукции = ФактическийВесВыходаПродукции;
					
					ПроцентОтклоненияОтНорм = СтрПродукции.ПроцентОтклоненияОтНорм;
					ИтогПроцентОтклоненияОтНорм = ИтогПроцентОтклоненияОтНорм + ПроцентОтклоненияОтНорм;
					ОблШапкаПродукцияТаблицыРасчетов.Параметры.ПроцентОтклоненияОтНорм = ПроцентОтклоненияОтНорм;
					
					ВесОтклоненияОтНорм = СтрПродукции.ВесОтклоненияОтНорм;
					ИтогВесОтклоненияОтНорм = ИтогВесОтклоненияОтНорм + ВесОтклоненияОтНорм;
					ОблШапкаПродукцияТаблицыРасчетов.Параметры.ВесОтклоненияОтНорм = ВесОтклоненияОтНорм;
				Иначе
					НомерКолонкиВТаблицеПродукция = СтрПродукции.НомерСтроки;
					Коефициент = СтрРасчетов["Продукция" + НомерКолонкиВТаблицеПродукция];
					ИтогКоефициентовПродукции = ИтогКоефициентовПродукции + Коефициент;
					ОблШапкаПродукцияТаблицыРасчетов.Параметры.КоефициентПродукции = Коефициент;
				КонецЕсли;	
				ТабДокумент.Присоединить(ОблШапкаПродукцияТаблицыРасчетов);
			КонецЕсли;	
		КонецЦикла;	
		
		КоличествоПустыхКолонок = МаксимальноеКоличествоСтрокПродукции - КоличествоСтрокНоменклатуры;
		Для к = 1  По КоличествоПустыхКолонок Цикл
			Если ИмяСтрокиТабДокумента = ИмяШапки Тогда
				ОблШапкаПродукцияТаблицыРасчетов.Параметры.НомКолонки = НомКолонки;
				НомКолонки = НомКолонки + 1;
				ОблШапкаПродукцияТаблицыРасчетов.Параметры.Продукция = "";
				ОблШапкаПродукцияТаблицыРасчетов.Параметры.БазисныйВыход = "";
			ИначеЕсли ИмяСтрокиТабДокумента = ИмяСтрокиВыходов Тогда
				ОблШапкаПродукцияТаблицыРасчетов.Параметры.РасчетныйПроцентВыходаПродукции = "";
				ОблШапкаПродукцияТаблицыРасчетов.Параметры.ВсегоКоефициентПродукции = "";
				ОблШапкаПродукцияТаблицыРасчетов.Параметры.РасчетныйВесВыходаПродукции = "";
				ОблШапкаПродукцияТаблицыРасчетов.Параметры.ФактическийПроцентВыходаПродукции = "";
				ОблШапкаПродукцияТаблицыРасчетов.Параметры.ФактическийВесВыходаПродукции = "";
				ОблШапкаПродукцияТаблицыРасчетов.Параметры.ПроцентОтклоненияОтНорм = "";
				ОблШапкаПродукцияТаблицыРасчетов.Параметры.ВесОтклоненияОтНорм = "";
			Иначе
				ОблШапкаПродукцияТаблицыРасчетов.Параметры.КоефициентПродукции = "";
			КонецЕсли;
			ТабДокумент.Присоединить(ОблШапкаПродукцияТаблицыРасчетов);
		КонецЦикла;
		
		ОблШапкаИтогПродукцияТаблицыРасчетов=Макет.ПолучитьОбласть(""+ИмяСтрокиТабДокумента+" | ИтогПродукцииТаблицыРасчетов");
		Если ИмяСтрокиТабДокумента = ИмяШапки Тогда
			ОблШапкаИтогПродукцияТаблицыРасчетов.Параметры.НомКолонки = НомКолонки;
			НомКолонки = НомКолонки + 1;
			ОблШапкаИтогПродукцияТаблицыРасчетов.Параметры.ИтогПлановыйПроцентВыходаПродукции = ИтогПлановыйПроцентВыходаПродукции;		
		ИначеЕсли ИмяСтрокиТабДокумента = ИмяСтрокиВыходов Тогда
			ОблШапкаИтогПродукцияТаблицыРасчетов.Параметры.ВсегоИтогКоефициентовПродукции = ВсегоИтогКоефициентовПродукции;
			ОблШапкаИтогПродукцияТаблицыРасчетов.Параметры.ИтогРасчетныйПроцентВыходаПродукции = ИтогРасчетныйПроцентВыходаПродукции;
			ОблШапкаИтогПродукцияТаблицыРасчетов.Параметры.ИтогРасчетныйВесВыходаПродукции = ИтогРасчетныйВесВыходаПродукции;
			ОблШапкаИтогПродукцияТаблицыРасчетов.Параметры.ИтогФактическийПроцентВыходаПродукции = ИтогФактическийПроцентВыходаПродукции;
			ОблШапкаИтогПродукцияТаблицыРасчетов.Параметры.ИтогФактическийВесВыходаПродукции = ИтогФактическийВесВыходаПродукции;
			ОблШапкаИтогПродукцияТаблицыРасчетов.Параметры.ИтогПроцентОтклоненияОтНорм = ИтогПроцентОтклоненияОтНорм;
			ОблШапкаИтогПродукцияТаблицыРасчетов.Параметры.ИтогВесОтклоненияОтНорм = ИтогВесОтклоненияОтНорм;		
		Иначе
			ОблШапкаИтогПродукцияТаблицыРасчетов.Параметры.ИтогКоефициентовПродукции = ИтогКоефициентовПродукции;
		КонецЕсли;	
		ТабДокумент.Присоединить(ОблШапкаИтогПродукцияТаблицыРасчетов);
		
		// годные отходы
		ИтогКоефициентовГодныхОтходов = 0;
		ОблШапкаГодныеОтходыТаблицыРасчетов=Макет.ПолучитьОбласть(""+ИмяСтрокиТабДокумента+" | ГодныеОтходыТаблицыРасчетов");
		Для Каждого СтрПродукции Из Ссылка.Продукция Цикл
			Если ИНАГРО_Элеватор.ГодныеОтходы(СтрПродукции.Номенклатура) Тогда				
				Если ИмяСтрокиТабДокумента = ИмяШапки Тогда
					ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.ГодныеОтходы = ПолучитьНаименованиеНоменклатуры(СтрПродукции.Номенклатура);
					ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.НомКолонки = НомКолонки;
					НомКолонки = НомКолонки + 1;
					ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.БазисныйВыход = СтрПродукции.ПлановыйПроцентВыходаПродукции;
				ИначеЕсли ИмяСтрокиТабДокумента = ИмяСтрокиВыходов Тогда
					НомерКолонкиВТаблицеПродукция = СтрПродукции.НомерСтроки;
					ВсегоКоефициентГодныхОтходов = Ссылка.Расчеты.Итог("Продукция" + НомерКолонкиВТаблицеПродукция);				
					ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.ВсегоКоефициентГодныхОтходов = ВсегоКоефициентГодныхОтходов;
					
					РасчетныйПроцентВыходаПродукции = СтрПродукции.РасчетныйПроцентВыходаПродукции;
					ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.РасчетныйПроцентВыходаПродукции = РасчетныйПроцентВыходаПродукции;
					
					РасчетныйВесВыходаПродукции = СтрПродукции.РасчетныйВесВыходаПродукции;
					ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.РасчетныйВесВыходаПродукции = РасчетныйВесВыходаПродукции;
					
					ФактическийПроцентВыходаПродукции = СтрПродукции.ФактическийПроцентВыходаПродукции;
					ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.ФактическийПроцентВыходаПродукции = ФактическийПроцентВыходаПродукции;
					
					ФактическийВесВыходаПродукции = СтрПродукции.ФактическийВесВыходаПродукции;
					ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.ФактическийВесВыходаПродукции = ФактическийВесВыходаПродукции;
					
					ПроцентОтклоненияОтНорм = СтрПродукции.ПроцентОтклоненияОтНорм;
					ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.ПроцентОтклоненияОтНорм = ПроцентОтклоненияОтНорм;
					
					ВесОтклоненияОтНорм = СтрПродукции.ВесОтклоненияОтНорм;
					ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.ВесОтклоненияОтНорм = ВесОтклоненияОтНорм;				
				Иначе
					НомерКолонкиВТаблицеПродукция = СтрПродукции.НомерСтроки;
					Коефициент = СтрРасчетов["Продукция" + НомерКолонкиВТаблицеПродукция];
					ИтогКоефициентовГодныхОтходов = ИтогКоефициентовГодныхОтходов + Коефициент;
					ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.КоефициентГодныхОтходов = Коефициент;
				КонецЕсли;
				ТабДокумент.Присоединить(ОблШапкаГодныеОтходыТаблицыРасчетов);
			КонецЕсли;
		КонецЦикла;
		
		// негодные отходы
		ОблШапкаНачалоНеГодныеОтходыТаблицыРасчетов = Неопределено;
		
		ИтогКоефициентовНеГодныхОтходов = 0;
		ОблШапкаНеГодныеОтходыТаблицыРасчетовПервая=Макет.ПолучитьОбласть(""+ИмяСтрокиТабДокумента+" | НеГодныеОтходыТаблицыРасчетов"); // Для первой колонки отходов
		ОблШапкаНеГодныеОтходыТаблицыРасчетов=Макет.ПолучитьОбласть(""+ИмяСтрокиТабДокумента+" | НеГодныеОтходыТаблицыРасчетов1"); // Остальные колонки отходов
		КоличествоНоменклатуры_НеГодныеОтходы = 0;
		Для Каждого СтрПродукции Из Ссылка.Продукция Цикл
			 Если ИНАГРО_Элеватор.НеГодныеОтходы(СтрПродукции.Номенклатура) Тогда
				КоличествоНоменклатуры_НеГодныеОтходы = КоличествоНоменклатуры_НеГодныеОтходы + 1;
				Если ИмяСтрокиТабДокумента = ИмяШапки Тогда
					//Если ОблШапкаНачалоНеГодныеОтходыТаблицыРасчетов = Неопределено Тогда  // << >> ИН-АГРО 2019-01-22 
					//	ОблШапкаНачалоНеГодныеОтходыТаблицыРасчетов=Макет.ПолучитьОбласть(""+ИмяСтрокиТабДокумента+" | НачалоТаблицыНегодныеОтходы");
					//	ОблШапкаНачалоНеГодныеОтходыТаблицыРасчетов.ТекущаяОбласть.ШиринаКолонки = 0.1;
					//	ТабДокумент.Присоединить(ОблШапкаНачалоНеГодныеОтходыТаблицыРасчетов);	
					//КонецЕсли; 
					Если КоличествоНоменклатуры_НеГодныеОтходы = 1 Тогда  
						ТекущаяОбласть = ОблШапкаНеГодныеОтходыТаблицыРасчетовПервая;
					Иначе	
						ТекущаяОбласть = ОблШапкаНеГодныеОтходыТаблицыРасчетов;
					КонецЕсли; 
					ТекущаяОбласть.Параметры.НегодныеОтходы = ПолучитьНаименованиеНоменклатуры(СтрПродукции.Номенклатура);
					ТекущаяОбласть.Параметры.НомКолонки = НомКолонки;
					НомКолонки = НомКолонки + 1;				
					ТекущаяОбласть.Параметры.БазисныйВыход = СтрПродукции.ПлановыйПроцентВыходаПродукции;
					ТабДокумент.Присоединить(ТекущаяОбласть);
				ИначеЕсли ИмяСтрокиТабДокумента = ИмяСтрокиВыходов Тогда
					//Если ОблШапкаНачалоНеГодныеОтходыТаблицыРасчетов = Неопределено Тогда  // << >> ИН-АГРО 2019-01-22 
					//	ОблШапкаНачалоНеГодныеОтходыТаблицыРасчетов=Макет.ПолучитьОбласть(""+ИмяСтрокиТабДокумента+" | НачалоТаблицыНегодныеОтходы");
					//	ОблШапкаНачалоНеГодныеОтходыТаблицыРасчетов.ТекущаяОбласть.ШиринаКолонки = 0.1;
					//	ТабДокумент.Присоединить(ОблШапкаНачалоНеГодныеОтходыТаблицыРасчетов);	
					//КонецЕсли; 
					Если КоличествоНоменклатуры_НеГодныеОтходы = 1 Тогда  
						ТекущаяОбласть = ОблШапкаНеГодныеОтходыТаблицыРасчетовПервая;
					Иначе	
						ТекущаяОбласть = ОблШапкаНеГодныеОтходыТаблицыРасчетов;
					КонецЕсли; 
					НомерКолонкиВТаблицеПродукция = СтрПродукции.НомерСтроки;
					ВсегоКоефициентНеГодныхОтходов = Ссылка.Расчеты.Итог("Продукция" + НомерКолонкиВТаблицеПродукция);				
					ТекущаяОбласть.Параметры.ВсегоКоефициентНеГодныхОтходов = ВсегоКоефициентНеГодныхОтходов;
					
					РасчетныйПроцентВыходаПродукции = СтрПродукции.РасчетныйПроцентВыходаПродукции;
					ТекущаяОбласть.Параметры.РасчетныйПроцентВыходаПродукции = РасчетныйПроцентВыходаПродукции;
					
					РасчетныйВесВыходаПродукции = СтрПродукции.РасчетныйВесВыходаПродукции;
					ТекущаяОбласть.Параметры.РасчетныйВесВыходаПродукции = РасчетныйВесВыходаПродукции;
					
					ФактическийПроцентВыходаПродукции = СтрПродукции.ФактическийПроцентВыходаПродукции;
					ТекущаяОбласть.Параметры.ФактическийПроцентВыходаПродукции = ФактическийПроцентВыходаПродукции;
					
					ФактическийВесВыходаПродукции = СтрПродукции.ФактическийВесВыходаПродукции;
					ТекущаяОбласть.Параметры.ФактическийВесВыходаПродукции = ФактическийВесВыходаПродукции;
					
					ПроцентОтклоненияОтНорм = СтрПродукции.ПроцентОтклоненияОтНорм;
					ТекущаяОбласть.Параметры.ПроцентОтклоненияОтНорм = ПроцентОтклоненияОтНорм;
					
					ВесОтклоненияОтНорм = СтрПродукции.ВесОтклоненияОтНорм;
					ТекущаяОбласть.Параметры.ВесОтклоненияОтНорм = ВесОтклоненияОтНорм;
					ТабДокумент.Присоединить(ТекущаяОбласть);
				Иначе
					//Если ОблШапкаНачалоНеГодныеОтходыТаблицыРасчетов = Неопределено Тогда  // << >> ИН-АГРО 2019-01-22 
					//	ОблШапкаНачалоНеГодныеОтходыТаблицыРасчетов=Макет.ПолучитьОбласть(""+ИмяСтрокиТабДокумента+" | НачалоТаблицыНегодныеОтходы");
					//	ОблШапкаНачалоНеГодныеОтходыТаблицыРасчетов.ТекущаяОбласть.ШиринаКолонки = 0.1;
					//	ТабДокумент.Присоединить(ОблШапкаНачалоНеГодныеОтходыТаблицыРасчетов);	
					//КонецЕсли; 
					Если КоличествоНоменклатуры_НеГодныеОтходы = 1 Тогда  
						ПоказатьОбласть = ОблШапкаНеГодныеОтходыТаблицыРасчетовПервая;
					Иначе	
						ПоказатьОбласть = ОблШапкаНеГодныеОтходыТаблицыРасчетов;
					КонецЕсли; 
					НомерКолонкиВТаблицеПродукция = СтрПродукции.НомерСтроки;
					Коефициент = СтрРасчетов["Продукция" + НомерКолонкиВТаблицеПродукция];
					ИтогКоефициентовНеГодныхОтходов = ИтогКоефициентовНеГодныхОтходов + Коефициент;
					//ПоказатьОбласть.Параметры.КоефициентНеГодныхОтходов = Коефициент;
					ТабДокумент.Присоединить(ПоказатьОбласть);
				КонецЕсли;			
				//ТабДокумент.Присоединить(ПоказатьОбласть);	
			КонецЕсли;
		КонецЦикла;
		
		// << >> ИН-АГРО 2019-01-29 
		// Если не было негодных отходов - напечатаем одну пустую колонку
		Если КоличествоНоменклатуры_НеГодныеОтходы = 0 Тогда
			//ОблШапкаНачалоНеГодныеОтходыТаблицыРасчетов=Макет.ПолучитьОбласть(""+ИмяСтрокиТабДокумента+" | НачалоТаблицыНегодныеОтходы");
			ОблШапкаНачалоНеГодныеОтходыТаблицыРасчетов=Макет.ПолучитьОбласть(""+ИмяСтрокиТабДокумента+" | НеГодныеОтходыТаблицыРасчетов"); // Для первой колонки отходов
			Если ИмяСтрокиТабДокумента = "ШапкаТаблицыРасчетов" Тогда
				ОблШапкаНачалоНеГодныеОтходыТаблицыРасчетов.Параметры.НомКолонки = НомКолонки;
			КонецЕсли; 
			ТабДокумент.Присоединить(ОблШапкаНачалоНеГодныеОтходыТаблицыРасчетов);	
			НомКолонки = НомКолонки + 1;				
		КонецЕсли; 
		
		// конец
		ОблШапкаКонецТаблицыРасчетов=Макет.ПолучитьОбласть(""+ИмяСтрокиТабДокумента+" | КонецТаблицыРасчетов");
		Если ИмяСтрокиТабДокумента = ИмяШапки Тогда
			ОблШапкаКонецТаблицыРасчетов.Параметры.НомКолонки1 = НомКолонки;
			НомКолонки = НомКолонки + 1;
			ОблШапкаКонецТаблицыРасчетов.Параметры.НомКолонки2 = НомКолонки;
			НомКолонки = НомКолонки + 1;
			ОблШапкаКонецТаблицыРасчетов.Параметры.НомКолонки3 = НомКолонки;
			НомКолонки = НомКолонки + 1;
			ОблШапкаКонецТаблицыРасчетов.Параметры.МехПотери = Ссылка.ВидПомола.МехПотери;
			Усушка = Ссылка.ВидПомола.Усушка;
			ОблШапкаКонецТаблицыРасчетов.Параметры.Усушка = Усушка;
		ИначеЕсли ИмяСтрокиТабДокумента = ИмяСтрокиВыходов Тогда
			
			ВсегоУсушка = ПолучитьРасчетныйПроцентУсушки(Ссылка);
			ОблШапкаКонецТаблицыРасчетов.Параметры.ВсегоУсушка = ПолучитьРасчетныйПроцентУсушки(Ссылка);
			
			РасчетныйПроцентМехПотерь_ = ПолучитьРасчетныйПроцентМехПотерь(Ссылка);
			ОблШапкаКонецТаблицыРасчетов.Параметры.РасчетныйПроцентМехПотерь = РасчетныйПроцентМехПотерь_;
			РасчетныеМехПотери = ПолучитьРасчетныеМехПотери(Ссылка);
			ОблШапкаКонецТаблицыРасчетов.Параметры.РасчетныеМехПотери = РасчетныеМехПотери;
			
			ФактическийПроцентМехПотерь_ = ПолучитьФактическийПроцентМехПотерь(Ссылка);
			ОблШапкаКонецТаблицыРасчетов.Параметры.ФактическийПроцентМехПотерь = ФактическийПроцентМехПотерь_;
			ФактическиеМехПотери = ПолучитьФактическиеМехПотери(Ссылка);
			ОблШапкаКонецТаблицыРасчетов.Параметры.ФактическиеМехПотери = ФактическиеМехПотери;
			
			ВесУсушкиРасчетный = ПолучитьВесУсушкиРасчетный(Ссылка);
			ОблШапкаКонецТаблицыРасчетов.Параметры.ВесУсушкиРасчетный = ВесУсушкиРасчетный;
			Если Ссылка.Продукция.Итог("ФактическийВесВыходаПродукции") > 0 Тогда
				ВсегоФактическаяУсушка = ПолучитьФактическийПроцентУсушки(Ссылка);
				ВесУсушкиФактический = ПолучитьВесУсушкиФактический(Ссылка);		
				ОблШапкаКонецТаблицыРасчетов.Параметры.ВсегоУсушка = ВсегоУсушка;
				ОблШапкаКонецТаблицыРасчетов.Параметры.ВсегоФактическаяУсушка = ВсегоФактическаяУсушка;
				ОблШапкаКонецТаблицыРасчетов.Параметры.ВесУсушкиФактический = ВесУсушкиФактический;
			КонецЕсли;
			
			Если Ссылка.Продукция.Итог("ФактическийВесВыходаПродукции") > 0 И Ссылка.Продукция.Итог("РасчетныйВесВыходаПродукции") > 0 Тогда
				
				ПроцентОтклоненияУсушки = ПолучитьФактическийПроцентУсушки(Ссылка) - ПолучитьРасчетныйПроцентУсушки(Ссылка);
				ВесОтклоненияУсушки = ПолучитьВесУсушкиФактический(Ссылка) - ПолучитьВесУсушкиРасчетный(Ссылка);
				ПроцентОтклоненияМехПотерь = ПолучитьФактическийПроцентМехПотерь(Ссылка) - ПолучитьРасчетныйПроцентМехПотерь(Ссылка);
				ВесОтклоненияМехПотерь = ПолучитьФактическиеМехПотери(Ссылка) - ПолучитьРасчетныеМехПотери(Ссылка);
				
				ОблШапкаКонецТаблицыРасчетов.Параметры.ПроцентОтклоненияУсушки = ПроцентОтклоненияУсушки;
				ОблШапкаКонецТаблицыРасчетов.Параметры.ВесОтклоненияУсушки = ВесОтклоненияУсушки;
				ОблШапкаКонецТаблицыРасчетов.Параметры.ПроцентОтклоненияМехПотерь = ПроцентОтклоненияМехПотерь;
				ОблШапкаКонецТаблицыРасчетов.Параметры.ВесОтклоненияМехПотерь = ВесОтклоненияМехПотерь;
			КонецЕсли;
			
			ОблШапкаКонецТаблицыРасчетов.Параметры.ИтогКоефициентов = ПолучитьИтогКоэффициентов(Ссылка);
			ОблШапкаКонецТаблицыРасчетов.Параметры.ВсегоРасчетныйПроцентВыхода = ПолучитьВсегоПроцентРасчетногоВыхода(Ссылка);
			ОблШапкаКонецТаблицыРасчетов.Параметры.ВсегоРасчетныйВесВыхода = ПолучитьВсегоРасчетныйВыход(Ссылка);
			ОблШапкаКонецТаблицыРасчетов.Параметры.ВсегоФактическийПроцентВыхода = ПолучитьВсегоПроцентФактическогоВыхода(Ссылка);
			ОблШапкаКонецТаблицыРасчетов.Параметры.ВсегоФактическийВесВыхода = ПолучитьВсегоФактическийВыход(Ссылка);
			
		Иначе
			Усушка = СтрРасчетов.Усушка;
			ОблШапкаКонецТаблицыРасчетов.Параметры.Усушка = Усушка;
			ОблШапкаКонецТаблицыРасчетов.Параметры.Итог = ИтогКоефициентовПродукции + ИтогКоефициентовГодныхОтходов + ИтогКоефициентовНеГодныхОтходов + Усушка;
		КонецЕсли;
		ТабДокумент.Присоединить(ОблШапкаКонецТаблицыРасчетов);		
		// КОНЕЦ ШАПКА
		
	КонецПроцедуры

Процедура ВывестиСтрокуКачестваФорм117(Макет, ТабДокумент, ИмяСтрокиТабДокумента, СтрХарактеристика = Неопределено, Ссылка)
		
		НомКолонки = 7;
		ИмяШапки = "ШапкаТаблицыКачества";
		ИмяСтроки = "СтрокаТаблицыКачества";
		// Качество сырья
		ОблШапкаНачалоТаблицыКачества = Макет.ПолучитьОбласть("" + ИмяСтрокиТабДокумента + " | НачалоТаблицыКачества");	
		Если ИмяСтрокиТабДокумента = ИмяШапки Тогда
		ИначеЕсли ИмяСтрокиТабДокумента = ИмяСтроки Тогда
			ОблШапкаНачалоТаблицыКачества.Параметры.ХарактеристикаСырья = СтрХарактеристика.ХарактеристикаСырья;
			ОблШапкаНачалоТаблицыКачества.Параметры.СреднееЗначениеХарактеристкиСырья = СтрХарактеристика.СреднееЗначениеХарактеристкиСырья;		
		//	ОблШапкаНачалоТаблицыКачества.Параметры.ХарактеристикаПродукции = СтрХарактеристика.ХарактеристикаПродукции;				
		КонецЕсли;
		ТабДокумент.Вывести(ОблШапкаНачалоТаблицыКачества);
		
		// Качество продукции
		КвоКолонок = 0;
		ОблШапкаКачествоПродукции=Макет.ПолучитьОбласть(""+ИмяСтрокиТабДокумента+" | ИтогПродукцииТаблицыРасчетов");
				
		Для Каждого СтрПродукции Из Ссылка.Продукция Цикл
			Если ИНАГРО_Элеватор.Продукция(СтрПродукции.Номенклатура) ИЛИ ИНАГРО_Элеватор.ГодныеОтходы(СтрПродукции.Номенклатура) Тогда
				Если ИмяСтрокиТабДокумента = ИмяШапки Тогда
					ОблШапкаКачествоПродукции.Параметры.Продукция = ПолучитьНаименованиеНоменклатуры(СтрПродукции.Номенклатура);
					ОблШапкаКачествоПродукции.Параметры.НомКолонки = НомКолонки;
					НомКолонки = НомКолонки + 1;
					ТабДокумент.Присоединить(ОблШапкаКачествоПродукции);
				ИначеЕсли ИмяСтрокиТабДокумента = ИмяСтроки Тогда
					НомерКолонкиВТаблицеПродукция = СтрПродукции.НомерСтроки;
					ОблШапкаКачествоПродукции.Параметры.ЗначениеХарактеристикиПродукции = СтрХарактеристика["ЗначениеХарактеристикиПродукции"+НомерКолонкиВТаблицеПродукция];
					ТабДокумент.Присоединить(ОблШапкаКачествоПродукции);
				Иначе
					
				КонецЕсли;
				//ТабДокумент.Присоединить(ОблШапкаКачествоПродукции);
				КвоКолонок = КвоКолонок + 1;
			КонецЕсли;
		КонецЦикла;
		
		// Конец
		ОблШапкаКонецТаблицыКачества=Макет.ПолучитьОбласть(""+ИмяСтрокиТабДокумента+" | КонецТаблицыРасчетов");
		Если ИмяСтрокиТабДокумента = ИмяШапки Тогда
			ОблШапкаКонецТаблицыКачества.Параметры.НомКолонки1 = НомКолонки;
			НомКолонки = НомКолонки + 1;
			ОблШапкаКонецТаблицыКачества.Параметры.НомКолонки2 = НомКолонки;
			НомКолонки = НомКолонки + 1;
			ОблШапкаКонецТаблицыКачества.Параметры.НомКолонки3 = НомКолонки;
			НомКолонки = НомКолонки + 1;
		ИначеЕсли ИмяСтрокиТабДокумента = ИмяСтроки Тогда
			
		Иначе
			
		КонецЕсли;	
		ТабДокумент.Присоединить(ОблШапкаКонецТаблицыКачества);
		
	КонецПроцедуры	
		
Функция ПечатьФорма117(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ПФ_MXL_Форма117");
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	ПервыйДокумент = Истина;
	
	Для каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;	
		
		ПечатьФорма117Вывод(Макет,ТабДокумент,Ссылка);	
	
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьФорма117Вывод(Макет,ТабДокумент,Ссылка)
	
	КодЯзыкаПечать = Макет.КодЯзыкаМакета;
	
	Руководители = ИНАГРО_Элеватор.ОтветственныеЛицаОрганизации(Ссылка.Организация,Ссылка.Дата);
	СтруктураШапкиДокумента   = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(Ссылка);
	НомерДок = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Ссылка.Номер);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_Форма117.Владелец,
		|	ИНАГРО_Форма117.ВидПомола,
		|	ИНАГРО_Форма117.Ответственный,
		|	ИНАГРО_Форма117.Организация.НаименованиеПолное КАК Организация,
		|	ИНАГРО_Форма117.Организация.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
		|	ИНАГРО_Форма117.ПереработанноеСырье,
		|	ИНАГРО_Форма117.Дата
		|ИЗ
		|	Документ.ИНАГРО_Форма117 КАК ИНАГРО_Форма117
		|ГДЕ
		|	ИНАГРО_Форма117.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ВыборкаЗаголовок = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗаголовок.Следующий() Цикл
		
		Заголовок = Макет.ПолучитьОбласть("Заголовок");
		Заголовок.Параметры.Организация = ВыборкаЗаголовок.Организация;
		Заголовок.Параметры.ВидПомола = ВыборкаЗаголовок.ВидПомола;
		Заголовок.Параметры.Культура = ВыборкаЗаголовок.ПереработанноеСырье;
		Заголовок.Параметры.Номер = НомерДок;
		Заголовок.Параметры.Директор = Руководители.Руководитель;
		Заголовок.Параметры.Дата = Формат(ВыборкаЗаголовок.Дата,"ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		Заголовок.Параметры.ВесПущеногоВПереработкуЗерна = ПолучитьВесПущенногоВПереработкуЗерна(Ссылка);
		
		Если Ссылка.ВидОперации = Перечисления.ИНАГРО_ВидыОперацийФорма117.ПоВладельцу Тогда
			Заголовок.Параметры.Владелец = ВыборкаЗаголовок.Владелец;
			ИНАГРО_Элеватор.ПолучитьНаименованияКонтрагента(Заголовок.Параметры.Владелец);
		Иначе
			Заголовок.Параметры.Владелец = "";
		КонецЕсли;
		
		ТабДокумент.Вывести(Заголовок);
		
	КонецЦикла;
	
	ВывестиСтрокуРасчетаФормы117(Макет, ТабДокумент, "ШапкаТаблицыРасчетов", ,Ссылка);
	
	Для Каждого СтрРасчетов Из Ссылка.Расчеты Цикл
		ВывестиСтрокуРасчетаФормы117(Макет, ТабДокумент, "СтрокаТаблицыРасчетов", СтрРасчетов, Ссылка);
	КонецЦикла;
	
	ВывестиСтрокуРасчетаФормы117(Макет, ТабДокумент, "СтрокаВыходов", ,Ссылка);	
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	ВывестиСтрокуКачестваФорм117(Макет, ТабДокумент, "ШапкаТаблицыКачества", ,Ссылка);
	
	// Характеристики
	ТабХарактеристик = Новый ТаблицаЗначений;
	ТабХарактеристик = ПолучитьСреднееКачествоСырья(ТабХарактеристик, Ссылка);
	// Прибавим к существующей таблице качество и их значения для готовой продукции в виде шахматки.
	ТабХарактеристик.Колонки.Добавить("ХарактеристикаПродукции");		
	КоличХарактеристикПродукции = 0;
	Для Каждого СтрПродукции Из Ссылка.Продукция Цикл		
		Если ИНАГРО_Элеватор.Продукция(СтрПродукции.Номенклатура) ИЛИ ИНАГРО_Элеватор.ГодныеОтходы(СтрПродукции.Номенклатура) Тогда				
			ТабХарактеристик.Колонки.Добавить("ЗначениеХарактеристикиПродукции" + СтрПродукции.НомерСтроки);		
			Для Каждого СтрЛабАнализа Из СтрПродукции.ЛабораторныйАнализ.Результаты Цикл
				ТекСтр = ТабХарактеристик.Найти(СтрЛабАнализа.Характеристика,"ХарактеристикаПродукции");
				Если ТекСтр = Неопределено Тогда					
					Если КоличХарактеристикПродукции >= ТабХарактеристик.Количество() ИЛИ ТабХарактеристик.Количество() = 0 Тогда
						ТекСтр = ТабХарактеристик.Добавить();
					Иначе
						ТекСтр = ТабХарактеристик.Получить(КоличХарактеристикПродукции);
					КонецЕсли;					
					ТекСтр["ХарактеристикаПродукции"] = СтрЛабАнализа.Характеристика;
				КонецЕсли;				
				ТекСтр["ЗначениеХарактеристикиПродукции"+СтрПродукции.НомерСтроки] = СтрЛабАнализа.Значение;
				КоличХарактеристикПродукции = КоличХарактеристикПродукции + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрХарактеристика Из ТабХарактеристик Цикл
		ВывестиСтрокуКачестваФорм117(Макет, ТабДокумент, "СтрокаТаблицыКачества", СтрХарактеристика, Ссылка);
	КонецЦикла;	
	//
	
	Дно = Макет.ПолучитьОбласть("Дно");
	Дно.Параметры.ГлавныйИнженер = Руководители.ГлавныйИнженер;
	Дно.Параметры.ГлавныйБухгалтер = Руководители.ГлавныйБухгалтер;
	Дно.Параметры.НачальникВТЛ = Руководители.НачальникВТЛ;
	ФИОЗавСкладом = "";
	Результат = ИНАГРО_Элеватор.ОтветственныеЛица(Ссылка.Организация, Ссылка.Дата, Ссылка.Склад, ФИОЗавСкладом);	
	Дно.Параметры.ЗавСкладом = ФИОЗавСкладом.ФИО;	
	ТабДокумент.Вывести(Дно);
	
	ТабДокумент.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	ТабДокумент.АвтоМасштаб=Истина;
	ТабДокумент.ИмяПараметровПечати = "ИНАГРО_Форма117_Форма117";
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьФорма117_2021(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ПФ_MXL_UK_Форма117_2021");
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	ПервыйДокумент = Истина;
	Для каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;	
		
		ПечатьФорма117Вывод_2021(Макет,ТабДокумент,Ссылка);	
	
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьФорма117Вывод_2021(Макет,ТабДокумент,Ссылка)
	
	КодЯзыкаПечать = Макет.КодЯзыкаМакета;
    
    ТЗРасчетСредневзвешенних = Новый ТаблицаЗначений;
    ТЗРасчетСредневзвешенних.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
    ТЗРасчетСредневзвешенних.Колонки.Добавить("ФактическийВесВыходаПродукции",Новый ОписаниеТипов("Число"));
    ВсегоФактическийВесПродукции = 0;  
	Руководители = ИНАГРО_Элеватор.ОтветственныеЛицаОрганизацииИмяФамилия(Ссылка.Организация,Ссылка.Дата);
	СтруктураШапкиДокумента   = ОбщегоНазначенияРед12.СформироватьСтруктуруШапкиДокумента(Ссылка);
	НомерДок = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Ссылка.Номер);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_Форма117.Владелец,
		|	ИНАГРО_Форма117.ВидПомола,
		|	ИНАГРО_Форма117.Ответственный,
		|	ИНАГРО_Форма117.Организация.НаименованиеПолное КАК Организация,
		|	ИНАГРО_Форма117.Организация.КодПоЕДРПОУ КАК ЕДРПОУОрганизации,
		|	ИНАГРО_Форма117.ПереработанноеСырье,
		|	ИНАГРО_Форма117.Дата
		|ИЗ
		|	Документ.ИНАГРО_Форма117 КАК ИНАГРО_Форма117
		|ГДЕ
		|	ИНАГРО_Форма117.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ВыборкаЗаголовок = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗаголовок.Следующий() Цикл
		
		Заголовок = Макет.ПолучитьОбласть("Заголовок");
		Заголовок.Параметры.Организация = ВыборкаЗаголовок.Организация;
        Заголовок.Параметры.ЕДРПОУОрганизации = ВыборкаЗаголовок.ЕДРПОУОрганизации;
		Заголовок.Параметры.ВидПомола = ВыборкаЗаголовок.ВидПомола;
		Заголовок.Параметры.Культура = ВыборкаЗаголовок.ПереработанноеСырье;
		Заголовок.Параметры.Номер = НомерДок;
		Заголовок.Параметры.Директор = Руководители.Руководитель;
		Заголовок.Параметры.Дата = Формат(ВыборкаЗаголовок.Дата,"ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));
		Заголовок.Параметры.ВесПущеногоВПереработкуЗерна = ПолучитьВесПущенногоВПереработкуЗерна(Ссылка);
				
		ТабДокумент.Вывести(Заголовок);
		
	КонецЦикла;
	
	ВывестиСтрокуРасчетаФормы117_2021(Макет, ТабДокумент, "ШапкаТаблицыРасчетов", ,Ссылка, ТЗРасчетСредневзвешенних);
	
	Для Каждого СтрРасчетов Из Ссылка.Расчеты Цикл
		ВывестиСтрокуРасчетаФормы117_2021(Макет, ТабДокумент, "СтрокаТаблицыРасчетов", СтрРасчетов, Ссылка, ТЗРасчетСредневзвешенних);
	КонецЦикла;
	
	ВывестиСтрокуРасчетаФормы117_2021(Макет, ТабДокумент, "СтрокаВыходов", ,Ссылка,ТЗРасчетСредневзвешенних);	
	
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	НомерППХарПродукции = 0;
    НомерПП = 0;
	ВывестиСтрокуКачестваФорм117_2021(Макет, ТабДокумент, "ШапкаТаблицыКачества", ,Ссылка, ТЗРасчетСредневзвешенних, НомерППХарПродукции, НомерПП);
	
	// Характеристики
	ТабХарактеристик = Новый ТаблицаЗначений;
	ТабХарактеристик = ПолучитьСреднееКачествоСырья(ТабХарактеристик, Ссылка);
	// Прибавим к существующей таблице качество и их значения для готовой продукции в виде шахматки.
	ТабХарактеристик.Колонки.Добавить("ХарактеристикаПродукции");		
	КоличХарактеристикПродукции = 0;
	Для Каждого СтрПродукции Из Ссылка.Продукция Цикл		
		Если ИНАГРО_Элеватор.Продукция(СтрПродукции.Номенклатура) ИЛИ ИНАГРО_Элеватор.ГодныеОтходы(СтрПродукции.Номенклатура) Тогда				
			ТабХарактеристик.Колонки.Добавить("ЗначениеХарактеристикиПродукции" + СтрПродукции.НомерСтроки);		
			Для Каждого СтрЛабАнализа Из СтрПродукции.ЛабораторныйАнализ.Результаты Цикл
				ТекСтр = ТабХарактеристик.Найти(СтрЛабАнализа.Характеристика,"ХарактеристикаПродукции");
				Если ТекСтр = Неопределено Тогда					
					Если КоличХарактеристикПродукции >= ТабХарактеристик.Количество() ИЛИ ТабХарактеристик.Количество() = 0 Тогда
						ТекСтр = ТабХарактеристик.Добавить();
					Иначе
						ТекСтр = ТабХарактеристик.Получить(КоличХарактеристикПродукции);
					КонецЕсли;					
					ТекСтр["ХарактеристикаПродукции"] = СтрЛабАнализа.Характеристика;
				КонецЕсли;				
				ТекСтр["ЗначениеХарактеристикиПродукции"+СтрПродукции.НомерСтроки] = СтрЛабАнализа.Значение;
				КоличХарактеристикПродукции = КоличХарактеристикПродукции + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	//НомерПП = 0;
	Для Каждого СтрХарактеристика Из ТабХарактеристик Цикл
		ВывестиСтрокуКачестваФорм117_2021(Макет, ТабДокумент, "СтрокаТаблицыКачества", СтрХарактеристика, Ссылка,ТЗРасчетСредневзвешенних, НомерППХарПродукции, НомерПП);
	КонецЦикла;	
	//
	
	Дно = Макет.ПолучитьОбласть("Дно");
	Дно.Параметры.ГлавныйИнженер = Руководители.ГлавныйИнженер;
	Дно.Параметры.ГлавныйБухгалтер = Руководители.ГлавныйБухгалтер;
	Дно.Параметры.НачальникВТЛ = Руководители.НачальникВТЛ;
	ФИОЗавСкладом = "";
	Результат = ИНАГРО_Элеватор.ОтветственныеЛицаИмяФамилия(Ссылка.Организация, Ссылка.Дата, Ссылка.Склад, ФИОЗавСкладом);	
	Дно.Параметры.ЗавСкладом = Результат;	
	ТабДокумент.Вывести(Дно);
	
	ТабДокумент.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	ТабДокумент.АвтоМасштаб=Истина;
	ТабДокумент.ИмяПараметровПечати = "ИНАГРО_Форма117_Форма117";
	
	Возврат ТабДокумент;
	
КонецФункции

Процедура ВывестиСтрокуКачестваФорм117_2021(Макет, ТабДокумент, ИмяСтрокиТабДокумента, СтрХарактеристика = Неопределено, Ссылка,ТЗРасчетСредневзвешенних, НомерППХарПродукции,НомерПП)
		
		НомКолонки = 8;
		ИмяШапки = "ШапкаТаблицыКачества";
		ИмяСтроки = "СтрокаТаблицыКачества";
		// Качество сырья
		ОблШапкаНачалоТаблицыКачества = Макет.ПолучитьОбласть("" + ИмяСтрокиТабДокумента + " | НачалоТаблицыКачества");	
		Если ИмяСтрокиТабДокумента = ИмяШапки Тогда
        ИначеЕсли ИмяСтрокиТабДокумента = ИмяСтроки Тогда
            ОблШапкаНачалоТаблицыКачества.Параметры.ХарактеристикаСырья = СтрХарактеристика.ХарактеристикаСырья;
            Если ЗначениеЗаполнено(СтрХарактеристика.ХарактеристикаСырья) Тогда 
                НомерПП =  НомерПП + 1;
                ОблШапкаНачалоТаблицыКачества.Параметры.НомерПП = НомерПП;
            КонецЕсли;
			ОблШапкаНачалоТаблицыКачества.Параметры.СреднееЗначениеХарактеристкиСырья = СтрХарактеристика.СреднееЗначениеХарактеристкиСырья;		
            ОблШапкаНачалоТаблицыКачества.Параметры.ХарактеристикаПродукции = СтрХарактеристика.ХарактеристикаПродукции;
            Если ЗначениеЗаполнено(СтрХарактеристика.ХарактеристикаПродукции) Тогда 
                НомерППХарПродукции =  НомерППХарПродукции + 1;
                ОблШапкаНачалоТаблицыКачества.Параметры.НомерППХарПродукции = НомерППХарПродукции;
            КонецЕсли;

		КонецЕсли;
		ТабДокумент.Вывести(ОблШапкаНачалоТаблицыКачества);
		
		// Качество продукции
        МаксимальноеКоличествоСтрокПродукции = 5;
        КвоКолонок = 0;
        ОблШапкаКачествоПродукции = Макет.ПолучитьОбласть(""+ИмяСтрокиТабДокумента+" | ИтогПродукцииТаблицыРасчетов");
        ОблШапкаКачествоПродукции1 = Макет.ПолучитьОбласть(""+ИмяСтрокиТабДокумента+" | ГодныеОтходыТаблицыРасчетов");		
        КоличествоКачествоПродукции = 0;
        КоличествоСтрокНоменклатуры = 0;
        ИтогиПоНОменклатуре = 0;
        
        Для Каждого СтрПродукции Из Ссылка.Продукция Цикл
            //Если ИНАГРО_Элеватор.Продукция(СтрПродукции.Номенклатура) ИЛИ ИНАГРО_Элеватор.ГодныеОтходы(СтрПродукции.Номенклатура) Тогда
            Если ИНАГРО_Элеватор.Продукция(СтрПродукции.Номенклатура) Тогда
                КоличествоСтрокНоменклатуры = КоличествоСтрокНоменклатуры +1;
                Если ИмяСтрокиТабДокумента = ИмяШапки Тогда
                    КоличествоКачествоПродукции = КоличествоКачествоПродукции + 1;
                    Если КоличествоКачествоПродукции > 1 Тогда 
                        ОблШапкаКачествоПродукции = ОблШапкаКачествоПродукции1;
                    КонецЕсли;
                    ОблШапкаКачествоПродукции.Параметры.Продукция = ПолучитьНаименованиеНоменклатуры(СтрПродукции.Номенклатура);
                    ОблШапкаКачествоПродукции.Параметры.НомКолонки = НомКолонки;
                    НомКолонки = НомКолонки + 1;
                   
                ИначеЕсли ИмяСтрокиТабДокумента = ИмяСтроки Тогда
                    НомерКолонкиВТаблицеПродукция = СтрПродукции.НомерСтроки;
                    ЗначениеХарактеристикиПродукции = СтрХарактеристика["ЗначениеХарактеристикиПродукции"+НомерКолонкиВТаблицеПродукция];
                    ОблШапкаКачествоПродукции.Параметры.ЗначениеХарактеристикиПродукции = ЗначениеХарактеристикиПродукции;
                    Для каждого Строки Из ТЗРасчетСредневзвешенних Цикл  
                        Если СтрПродукции.Номенклатура = Строки.Номенклатура Тогда
                            Если ЗначениеХарактеристикиПродукции = Неопределено Тогда 
                                ЗначениеХарактеристикиПродукции = 0;
                            КонецЕсли;
                            Если ТипЗнч(ЗначениеХарактеристикиПродукции) = Тип("Число") Тогда
                                ИтогиПоНОменклатуре =  ИтогиПоНОменклатуре + (Строки.ФактическийВесВыходаПродукции * ЗначениеХарактеристикиПродукции/100); 
                            КонецЕсли;
                        КонецЕсли;
                    КонецЦикла; 
                    
                КонецЕсли;
                ТабДокумент.Присоединить(ОблШапкаКачествоПродукции);
                
                КвоКолонок = КвоКолонок + 1;
            КонецЕсли;
        КонецЦикла;
        КоличествоПустыхКолонок = МаксимальноеКоличествоСтрокПродукции - КоличествоСтрокНоменклатуры;
        Для к = 1  По КоличествоПустыхКолонок Цикл
            Если ИмяСтрокиТабДокумента = ИмяШапки Тогда
                КоличествоКачествоПродукции = КоличествоКачествоПродукции + 1;
                 Если КоличествоКачествоПродукции > 1 Тогда 
                        ОблШапкаКачествоПродукции = ОблШапкаКачествоПродукции1;
                    КонецЕсли;
                ОблШапкаКачествоПродукции.Параметры.НомКолонки = НомКолонки;
                НомКолонки = НомКолонки + 1;
                ОблШапкаКачествоПродукции.Параметры.Продукция = "   ";
                
            ИначеЕсли ИмяСтрокиТабДокумента = ИмяСтроки Тогда
                ОблШапкаКачествоПродукции.Параметры.ЗначениеХарактеристикиПродукции = "";
            КонецЕсли;
            ТабДокумент.Присоединить(ОблШапкаКачествоПродукции);
        КонецЦикла;
 
     // годные отходы
    МаксимальноеКоличествоСтрокГодныеОтходы = 2;
    КоличествоСтрокГодныеОтходы = 0; 
    ИтогКоефициентовГодныхОтходов = 0;
    ОблШапкаГодныеОтходыТаблицыРасчетов=Макет.ПолучитьОбласть(""+ИмяСтрокиТабДокумента+" | НеГодныеОтходыТаблицыРасПерВторКат");
    Для Каждого СтрПродукции Из Ссылка.Продукция Цикл
        Если ИНАГРО_Элеватор.ГодныеОтходы(СтрПродукции.Номенклатура) Тогда				
            Если ИмяСтрокиТабДокумента = ИмяШапки Тогда
                КоличествоСтрокГодныеОтходы = КоличествоСтрокГодныеОтходы + 1;
                ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.ГодныеОтходы = ПолучитьНаименованиеНоменклатуры(СтрПродукции.Номенклатура);
                ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.НомКолонкиОтруби = НомКолонки;
                НомКолонки = НомКолонки + 1;
            ИначеЕсли ИмяСтрокиТабДокумента = ИмяСтроки Тогда
                НомерКолонкиВТаблицеПродукция = СтрПродукции.НомерСтроки;
                ЗначениеХарактеристикиПродукции = СтрХарактеристика["ЗначениеХарактеристикиПродукции"+НомерКолонкиВТаблицеПродукция];
                ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.ЗначениеХарактеристикиОтруби = ЗначениеХарактеристикиПродукции;
                Для каждого Строки Из ТЗРасчетСредневзвешенних Цикл  
                    Если СтрПродукции.Номенклатура = Строки.Номенклатура Тогда
                        Если ЗначениеХарактеристикиПродукции = Неопределено Тогда 
                            ЗначениеХарактеристикиПродукции = 0;
                        КонецЕсли;
                        Если ТипЗнч(ЗначениеХарактеристикиПродукции) = Тип("Число") Тогда
                            ИтогиПоНОменклатуре =  ИтогиПоНОменклатуре + (Строки.ФактическийВесВыходаПродукции * ЗначениеХарактеристикиПродукции/100); 
                        КонецЕсли;
                    КонецЕсли;
                КонецЦикла; 
                
            КонецЕсли;
            ТабДокумент.Присоединить(ОблШапкаГодныеОтходыТаблицыРасчетов);
        КонецЕсли;
    КонецЦикла;

        // Среднее значение
        ОблШапкСреднееЗначение = Макет.ПолучитьОбласть(""+ИмяСтрокиТабДокумента+" | НеГодныеОтходыТаблТретМех");
        Если ИмяСтрокиТабДокумента = ИмяШапки Тогда
            ОблШапкСреднееЗначение.Параметры.НомКолонкиСреднее = НомКолонки;
            НомКолонки = НомКолонки + 1;
        ИначеЕсли  ИмяСтрокиТабДокумента = ИмяСтроки Тогда
            ИтогТЗРасчетСредневзвешенних =  ТЗРасчетСредневзвешенних.Итог("ФактическийВесВыходаПродукции");
            Если  ИтогТЗРасчетСредневзвешенних <> 0 Тогда
                ОблШапкСреднееЗначение.Параметры.Средневзвешенная = Формат(ИтогиПоНОменклатуре / ИтогТЗРасчетСредневзвешенних *100, "ЧДЦ=2"); 
            КонецЕсли;
        КонецЕсли;
        ТабДокумент.Присоединить(ОблШапкСреднееЗначение);
		// Конец
		ОблШапкаКонецТаблицыКачества=Макет.ПолучитьОбласть(""+ИмяСтрокиТабДокумента+" | КонецТаблицыРасчетов");
		Если ИмяСтрокиТабДокумента = ИмяШапки Тогда
            
            ОблШапкаКонецТаблицыКачества.Параметры.НомКолонки1 = НомКолонки;
            НомКолонки = НомКолонки + 1;
            ОблШапкаКонецТаблицыКачества.Параметры.НомКолонки2 = НомКолонки;
			НомКолонки = НомКолонки + 1;
			ОблШапкаКонецТаблицыКачества.Параметры.НомКолонки3 = НомКолонки;
			НомКолонки = НомКолонки + 1;
		ИначеЕсли ИмяСтрокиТабДокумента = ИмяСтроки Тогда
			
		Иначе
			
		КонецЕсли;	
		ТабДокумент.Присоединить(ОблШапкаКонецТаблицыКачества);
		
	КонецПроцедуры	
    
Процедура ВывестиСтрокуРасчетаФормы117_2021(Макет, ТабДокумент, ИмяСтрокиТабДокумента, СтрРасчетов = Неопределено, Ссылка, ТЗРасчетСредневзвешенних)
    
    ИмяШапки = "ШапкаТаблицыРасчетов";
    ИмяСтрокиВыходов = "СтрокаВыходов";
    НомКолонки = 5;
    // начало
    ОблШапкаНачалоТаблицыРасчетов=Макет.ПолучитьОбласть(""+ИмяСтрокиТабДокумента+" | НачалоТаблицыРасчетов");
    Если ИмяСтрокиТабДокумента = ИмяШапки Тогда
    ИначеЕсли ИмяСтрокиТабДокумента = ИмяСтрокиВыходов Тогда
        // усушка
        ЧислительУсушки = "";
        ЗнаменательУсушки = "";
        Усушка_ = "";		
        
        БазиснаяКондицияДляПереработки = ПолучитьБазиснуюКондициюДляПереработки(ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.Влажность, Ссылка.ВидПомола);
        СтруктураХарактеристики = ПолучитьПоказателиПоВидуПомола(ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.Влажность, Ссылка.ВидПомола);			
        
        Если Ссылка.ВидПомола.ИспользоватьВлажностьПродукцииПриРасчетеУсушки Тогда
            БазиснаяКондицияДляПереработки = Ссылка.ВлажностьПродукции;
        КонецЕсли;
        
        НадбавкаЗаОтклоненияОтБазиса = ПолучитьНадбавкуЗаОтклонениеОтБазиса(ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.Влажность,Ссылка.ВидПомола);		
        Влажность_ =  ПолучитьВлажность(Ссылка);
        ////////////////////////////////////////////////////////////
        ПечататьФормулу = Истина;
        Если СтруктураХарактеристики = Неопределено Тогда
            ПечататьФормулу = Ложь;
        ИначеЕсли СтруктураХарактеристики.НеРассчитыватьКоэффициентВлиянияЕслиБольшеБазиса = Истина Тогда
            Если Влажность_ > БазиснаяКондицияДляПереработки Тогда
                ПечататьФормулу = Ложь;
            КонецЕсли;
        ИначеЕсли СтруктураХарактеристики.НеРассчитыватьКоэффициентВлиянияЕслиМеньшеБазиса = Истина Тогда
            Если Влажность_ < БазиснаяКондицияДляПереработки Тогда
                ПечататьФормулу = Ложь;
            КонецЕсли;
        КонецЕсли;
        
        ////////////////////////////////////////////////////////////
        
        Если ПечататьФормулу Тогда
            ЧислительУсушки = "(" + Влажность_ + " - " + БазиснаяКондицияДляПереработки + ") * 100";
            ЗнаменательУсушки = "(100 - " + БазиснаяКондицияДляПереработки + ")";
            Усушка_ = Окр((Влажность_ - БазиснаяКондицияДляПереработки) * 100 / (100 - БазиснаяКондицияДляПереработки), 2);
        КонецЕсли;
        //КонецЕсли;
        ОблШапкаНачалоТаблицыРасчетов.Параметры.ЧислительУсушки = ЧислительУсушки;		
        ОблШапкаНачалоТаблицыРасчетов.Параметры.ЗнаменательУсушки = ЗнаменательУсушки;
        ОблШапкаНачалоТаблицыРасчетов.Параметры.Усушка = Усушка_;		
    Иначе
        ОблШапкаНачалоТаблицыРасчетов.Параметры.Характеристика = СтрРасчетов.Характеристика;
        ОблШапкаНачалоТаблицыРасчетов.Параметры.КачествоЗерна = СтрРасчетов.КачествоЗерна;
        ОблШапкаНачалоТаблицыРасчетов.Параметры.КоефициентВлиянияХарактеристики = СтрРасчетов.КоэффициентВлиянияХарактеристики;
    КонецЕсли;	
    ТабДокумент.Вывести(ОблШапкаНачалоТаблицыРасчетов);
    
    // продукция
    ИтогПлановыйПроцентВыходаПродукции = 0;	
    ИтогКоефициентовПродукции = 0;	
    ВсегоИтогКоефициентовПродукции = 0;
    ИтогРасчетныйПроцентВыходаПродукции = 0;
    ИтогРасчетныйВесВыходаПродукции = 0;
    ИтогФактическийПроцентВыходаПродукции = 0;
    ИтогФактическийВесВыходаПродукции = 0;
    ИтогПроцентОтклоненияОтНорм = 0;
    ИтогВесОтклоненияОтНорм = 0;
    ОблШапкаПродукцияТаблицыРасчетов = Макет.ПолучитьОбласть(""+ИмяСтрокиТабДокумента+" | ПродукцияТаблицыРасчетов");
    
    МаксимальноеКоличествоСтрокПродукции = 5;
    КоличествоСтрокНоменклатуры = 0;  
    
  
    Для Каждого СтрПродукции Из Ссылка.Продукция Цикл
        Если ИНАГРО_Элеватор.Продукция(СтрПродукции.Номенклатура) Тогда
            КоличествоСтрокНоменклатуры = КоличествоСтрокНоменклатуры + 1;
            ПлановыйПроцентВыходаПродукции = СтрПродукции.ПлановыйПроцентВыходаПродукции;
            Если ИмяСтрокиТабДокумента = ИмяШапки Тогда
                ОблШапкаПродукцияТаблицыРасчетов.Параметры.Продукция = ПолучитьНаименованиеНоменклатуры(СтрПродукции.Номенклатура);
                ОблШапкаПродукцияТаблицыРасчетов.Параметры.НомКолонки = НомКолонки;
                НомКолонки = НомКолонки + 1;				
                ИтогПлановыйПроцентВыходаПродукции = ИтогПлановыйПроцентВыходаПродукции + ПлановыйПроцентВыходаПродукции;
                ОблШапкаПродукцияТаблицыРасчетов.Параметры.БазисныйВыход = ПлановыйПроцентВыходаПродукции;
            ИначеЕсли ИмяСтрокиТабДокумента = ИмяСтрокиВыходов Тогда				
                НомерКолонкиВТаблицеПродукция = СтрПродукции.НомерСтроки;
                РасчетныйПроцентВыходаПродукции = СтрПродукции.РасчетныйПроцентВыходаПродукции;
                ИтогРасчетныйПроцентВыходаПродукции = ИтогРасчетныйПроцентВыходаПродукции + РасчетныйПроцентВыходаПродукции;
                ОблШапкаПродукцияТаблицыРасчетов.Параметры.РасчетныйПроцентВыходаПродукции = РасчетныйПроцентВыходаПродукции;
                
                РасчетныйВесВыходаПродукции = СтрПродукции.РасчетныйВесВыходаПродукции;
                ИтогРасчетныйВесВыходаПродукции = ИтогРасчетныйВесВыходаПродукции + РасчетныйВесВыходаПродукции;
                ОблШапкаПродукцияТаблицыРасчетов.Параметры.РасчетныйВесВыходаПродукции = РасчетныйВесВыходаПродукции;
                
                ФактическийПроцентВыходаПродукции = СтрПродукции.ФактическийПроцентВыходаПродукции;
                ИтогФактическийПроцентВыходаПродукции = ИтогФактическийПроцентВыходаПродукции + ФактическийПроцентВыходаПродукции;
                ОблШапкаПродукцияТаблицыРасчетов.Параметры.ФактическийПроцентВыходаПродукции = ФактическийПроцентВыходаПродукции;
                
                ФактическийВесВыходаПродукции = СтрПродукции.ФактическийВесВыходаПродукции;
                ИтогФактическийВесВыходаПродукции = ИтогФактическийВесВыходаПродукции + ФактическийВесВыходаПродукции;
                ОблШапкаПродукцияТаблицыРасчетов.Параметры.ФактическийВесВыходаПродукции = ФактическийВесВыходаПродукции;
                НоваяСтрокаТЗРасчетСредневзвешенних = ТЗРасчетСредневзвешенних.Добавить();
                НоваяСтрокаТЗРасчетСредневзвешенних.Номенклатура = СтрПродукции.Номенклатура;
                 НоваяСтрокаТЗРасчетСредневзвешенних.ФактическийВесВыходаПродукции = ФактическийВесВыходаПродукции;
                
                ПроцентОтклоненияОтНорм = СтрПродукции.ПроцентОтклоненияОтНорм;
                ИтогПроцентОтклоненияОтНорм = ИтогПроцентОтклоненияОтНорм + ПроцентОтклоненияОтНорм;
                ОблШапкаПродукцияТаблицыРасчетов.Параметры.ПроцентОтклоненияОтНорм = ПроцентОтклоненияОтНорм;
                
                ВесОтклоненияОтНорм = СтрПродукции.ВесОтклоненияОтНорм;
                ИтогВесОтклоненияОтНорм = ИтогВесОтклоненияОтНорм + ВесОтклоненияОтНорм;
                ОблШапкаПродукцияТаблицыРасчетов.Параметры.ВесОтклоненияОтНорм = ВесОтклоненияОтНорм;
            Иначе        
                НомерКолонкиВТаблицеПродукция = СтрПродукции.НомерСтроки;
                Коефициент = СтрРасчетов["Продукция" + НомерКолонкиВТаблицеПродукция];
                ИтогКоефициентовПродукции = ИтогКоефициентовПродукции + Коефициент;
                ОблШапкаПродукцияТаблицыРасчетов.Параметры.КоефициентПродукции = Коефициент;
            КонецЕсли;	
            ТабДокумент.Присоединить(ОблШапкаПродукцияТаблицыРасчетов);
        КонецЕсли;	
    КонецЦикла;	
    
    КоличествоПустыхКолонок = МаксимальноеКоличествоСтрокПродукции - КоличествоСтрокНоменклатуры;
    Для к = 1  По КоличествоПустыхКолонок Цикл
        Если ИмяСтрокиТабДокумента = ИмяШапки Тогда
            ОблШапкаПродукцияТаблицыРасчетов.Параметры.НомКолонки = НомКолонки;
            НомКолонки = НомКолонки + 1;
            ОблШапкаПродукцияТаблицыРасчетов.Параметры.Продукция = "";
            ОблШапкаПродукцияТаблицыРасчетов.Параметры.БазисныйВыход = "";
        ИначеЕсли ИмяСтрокиТабДокумента = ИмяСтрокиВыходов Тогда
            ОблШапкаПродукцияТаблицыРасчетов.Параметры.РасчетныйПроцентВыходаПродукции = "";
            ОблШапкаПродукцияТаблицыРасчетов.Параметры.РасчетныйВесВыходаПродукции = "";
            ОблШапкаПродукцияТаблицыРасчетов.Параметры.ФактическийПроцентВыходаПродукции = "";
            ОблШапкаПродукцияТаблицыРасчетов.Параметры.ФактическийВесВыходаПродукции = "";
            ОблШапкаПродукцияТаблицыРасчетов.Параметры.ПроцентОтклоненияОтНорм = "";
            ОблШапкаПродукцияТаблицыРасчетов.Параметры.ВесОтклоненияОтНорм = "";
        Иначе
            ОблШапкаПродукцияТаблицыРасчетов.Параметры.КоефициентПродукции = "";
        КонецЕсли;
        ТабДокумент.Присоединить(ОблШапкаПродукцияТаблицыРасчетов);
    КонецЦикла;
    
    ОблШапкаИтогПродукцияТаблицыРасчетов=Макет.ПолучитьОбласть(""+ИмяСтрокиТабДокумента+" | ИтогПродукцииТаблицыРасчетов");
    Если ИмяСтрокиТабДокумента = ИмяШапки Тогда
        ОблШапкаИтогПродукцияТаблицыРасчетов.Параметры.НомКолонки = НомКолонки;
        НомКолонки = НомКолонки + 1;
        ОблШапкаИтогПродукцияТаблицыРасчетов.Параметры.ИтогПлановыйПроцентВыходаПродукции = ИтогПлановыйПроцентВыходаПродукции;		
    ИначеЕсли ИмяСтрокиТабДокумента = ИмяСтрокиВыходов Тогда
        
        ОблШапкаИтогПродукцияТаблицыРасчетов.Параметры.ИтогРасчетныйПроцентВыходаПродукции = ИтогРасчетныйПроцентВыходаПродукции;
        ОблШапкаИтогПродукцияТаблицыРасчетов.Параметры.ИтогРасчетныйВесВыходаПродукции = ИтогРасчетныйВесВыходаПродукции;
        ОблШапкаИтогПродукцияТаблицыРасчетов.Параметры.ИтогФактическийПроцентВыходаПродукции = ИтогФактическийПроцентВыходаПродукции;
        ОблШапкаИтогПродукцияТаблицыРасчетов.Параметры.ИтогФактическийВесВыходаПродукции = ИтогФактическийВесВыходаПродукции;
        ОблШапкаИтогПродукцияТаблицыРасчетов.Параметры.ИтогПроцентОтклоненияОтНорм = ИтогПроцентОтклоненияОтНорм;
        ОблШапкаИтогПродукцияТаблицыРасчетов.Параметры.ИтогВесОтклоненияОтНорм = ИтогВесОтклоненияОтНорм;		
    Иначе
        ОблШапкаИтогПродукцияТаблицыРасчетов.Параметры.ИтогКоефициентовПродукции = ИтогКоефициентовПродукции;
    КонецЕсли;	
    ТабДокумент.Присоединить(ОблШапкаИтогПродукцияТаблицыРасчетов);
    
    // годные отходы
    МаксимальноеКоличествоСтрокГодныеОтходы = 2;
    КоличествоСтрокГодныеОтходы = 0; 
    ИтогКоефициентовГодныхОтходов = 0;
    ОблШапкаГодныеОтходыТаблицыРасчетов=Макет.ПолучитьОбласть(""+ИмяСтрокиТабДокумента+" | ГодныеОтходыТаблицыРасчетов");
    Для Каждого СтрПродукции Из Ссылка.Продукция Цикл
        Если ИНАГРО_Элеватор.ГодныеОтходы(СтрПродукции.Номенклатура) Тогда				
            Если ИмяСтрокиТабДокумента = ИмяШапки Тогда
                КоличествоСтрокГодныеОтходы = КоличествоСтрокГодныеОтходы + 1;
                ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.ГодныеОтходы = ПолучитьНаименованиеНоменклатуры(СтрПродукции.Номенклатура);
                ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.НомКолонки = НомКолонки;
                НомКолонки = НомКолонки + 1;
                ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.БазисныйВыход = СтрПродукции.ПлановыйПроцентВыходаПродукции;
            ИначеЕсли ИмяСтрокиТабДокумента = ИмяСтрокиВыходов Тогда
                КоличествоСтрокГодныеОтходы = КоличествоСтрокГодныеОтходы + 1;
                НомерКолонкиВТаблицеПродукция = СтрПродукции.НомерСтроки;
                
                РасчетныйПроцентВыходаПродукции = СтрПродукции.РасчетныйПроцентВыходаПродукции;
                ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.РасчетныйПроцентВыходаПродукции = РасчетныйПроцентВыходаПродукции;
                
                РасчетныйВесВыходаПродукции = СтрПродукции.РасчетныйВесВыходаПродукции;
                ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.РасчетныйВесВыходаПродукции = РасчетныйВесВыходаПродукции;
                
                ФактическийПроцентВыходаПродукции = СтрПродукции.ФактическийПроцентВыходаПродукции;
                ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.ФактическийПроцентВыходаПродукции = ФактическийПроцентВыходаПродукции;
                
                ФактическийВесВыходаПродукции = СтрПродукции.ФактическийВесВыходаПродукции;
                ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.ФактическийВесВыходаПродукции = ФактическийВесВыходаПродукции;
                НоваяСтрокаТЗРасчетСредневзвешенних = ТЗРасчетСредневзвешенних.Добавить();
                НоваяСтрокаТЗРасчетСредневзвешенних.Номенклатура = СтрПродукции.Номенклатура;
                НоваяСтрокаТЗРасчетСредневзвешенних.ФактическийВесВыходаПродукции = ФактическийВесВыходаПродукции;

                ПроцентОтклоненияОтНорм = СтрПродукции.ПроцентОтклоненияОтНорм;
                ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.ПроцентОтклоненияОтНорм = ПроцентОтклоненияОтНорм;
                
                ВесОтклоненияОтНорм = СтрПродукции.ВесОтклоненияОтНорм;
                ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.ВесОтклоненияОтНорм = ВесОтклоненияОтНорм;				
            Иначе
                КоличествоСтрокГодныеОтходы = КоличествоСтрокГодныеОтходы + 1;
                НомерКолонкиВТаблицеПродукция = СтрПродукции.НомерСтроки;
                Коефициент = СтрРасчетов["Продукция" + НомерКолонкиВТаблицеПродукция];
                ИтогКоефициентовГодныхОтходов = ИтогКоефициентовГодныхОтходов + Коефициент;
                ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.КоефициентГодныхОтходов = Коефициент;
            КонецЕсли;
            ТабДокумент.Присоединить(ОблШапкаГодныеОтходыТаблицыРасчетов);
        КонецЕсли;
    КонецЦикла;
    
    //КоличествоПустыхКолонокГодныеОтходы = МаксимальноеКоличествоСтрокГодныеОтходы - КоличествоСтрокГодныеОтходы;
    //Для к = 1  По КоличествоПустыхКолонокГодныеОтходы Цикл
    //    Если ИмяСтрокиТабДокумента = ИмяШапки Тогда
    //        ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.НомКолонки = НомКолонки;
    //        НомКолонки = НомКолонки + 1;
    //        ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.ГодныеОтходы = НСтр("ru = 'Мучка кормовая, %'; uk = 'Мучка кормова, %'");
    //        ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.БазисныйВыход = "";
    //    ИначеЕсли ИмяСтрокиТабДокумента = ИмяСтрокиВыходов Тогда
    //        ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.РасчетныйПроцентВыходаПродукции = "";
    //        ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.РасчетныйВесВыходаПродукции = "";
    //        ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.ФактическийПроцентВыходаПродукции = "";
    //        ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.ФактическийВесВыходаПродукции = "";
    //        ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.ПроцентОтклоненияОтНорм = "";
    //        ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.ВесОтклоненияОтНорм = "";
    //    Иначе
    //        ОблШапкаГодныеОтходыТаблицыРасчетов.Параметры.КоефициентГодныхОтходов = "";
    //    КонецЕсли;
    //    ТабДокумент.Присоединить(ОблШапкаГодныеОтходыТаблицыРасчетов);
    //КонецЦикла;
    
    // негодные отходы
    ОблШапкаНачалоНеГодныеОтходыТаблицыРасчетов = Неопределено;
    
    ИтогКоефициентовНеГодныхОтходов = 0;
    ОблШапкаНеГодныеОтходыТаблицыРасПерВторКат = Макет.ПолучитьОбласть(""+ИмяСтрокиТабДокумента+" | НеГодныеОтходыТаблицыРасПерВторКат");  
    ОблШапкаНеГодныеОтходыТаблТретМех = Макет.ПолучитьОбласть(""+ИмяСтрокиТабДокумента+" | НеГодныеОтходыТаблТретМех");
    Если ИмяСтрокиТабДокумента = ИмяШапки Тогда
       
        ОблШапкаНеГодныеОтходыТаблицыРасПерВторКат.Параметры.НомКолонки = НомКолонки;
        НомКолонки = НомКолонки + 1;	
        ОблШапкаНеГодныеОтходыТаблТретМех.Параметры.НомКолонки1 = НомКолонки;
        НомКолонки = НомКолонки + 1;
    КонецЕсли;
    НеГодныеОтходыПервВторКатегор = 0; 
    НеГодныеОтходыПервТретКатегор = 0;
    РасчетныйПроцентВыходаПродукции = 0;
    РасчетныйВесВыходаПродукции = 0;
    ФактическийПроцентВыходаПродукции = 0;
    ФактическийВесВыходаПродукции = 0;
    ПроцентОтклоненияОтНорм = 0;
    ВесОтклоненияОтНорм = 0;
    РасчетныйПроцентВыходаПродукции1 = 0;
    РасчетныйВесВыходаПродукции1 = 0;
    ФактическийПроцентВыходаПродукции1 = 0;
    ФактическийВесВыходаПродукции1 = 0;
    ПроцентОтклоненияОтНорм1 = 0;
    ВесОтклоненияОтНорм1 = 0;
    
    РасчетныйПроцентМехПотерь_ = ПолучитьРасчетныйПроцентМехПотерь(Ссылка);
    РасчетныеМехПотери = ПолучитьРасчетныеМехПотери(Ссылка);  
    ФактическийПроцентМехПотерь_ = ПолучитьФактическийПроцентМехПотерь(Ссылка);
    ФактическиеМехПотери = ПолучитьФактическиеМехПотери(Ссылка);             
    Если Ссылка.Продукция.Итог("ФактическийВесВыходаПродукции") > 0 И Ссылка.Продукция.Итог("РасчетныйВесВыходаПродукции") > 0 Тогда
        ПроцентОтклоненияМехПотерь = ПолучитьФактическийПроцентМехПотерь(Ссылка) - ПолучитьРасчетныйПроцентМехПотерь(Ссылка);
        ВесОтклоненияМехПотерь = ПолучитьФактическиеМехПотери(Ссылка) - ПолучитьРасчетныеМехПотери(Ссылка);
    Иначе 
        ПроцентОтклоненияМехПотерь = 0;
        ВесОтклоненияМехПотерь = 0;
    КонецЕсли;
    КоличествоНоменклатуры_НеГодныеОтходы = 0;
    
    Для Каждого СтрПродукции Из Ссылка.Продукция Цикл
        Если ИНАГРО_Элеватор.НеГодныеОтходы(СтрПродукции.Номенклатура) Тогда
            КоличествоНоменклатуры_НеГодныеОтходы = КоличествоНоменклатуры_НеГодныеОтходы + 1;
            ВидТМЦ = ИНАГРО_ЭлеваторСервер.ПолучитьДополнительныйРеквизитНоменклатуры(СтрПродукции.Номенклатура, "ВидТМЦ");
            Если ИмяСтрокиТабДокумента = ИмяШапки Тогда
                Если ВидТМЦ = Перечисления.ИНАГРО_ВидыТМЦ.Кат1 ИЛИ ВидТМЦ = Перечисления.ИНАГРО_ВидыТМЦ.Кат2 Тогда
                    
                    НеГодныеОтходыПервВторКатегор = НеГодныеОтходыПервВторКатегор + СтрПродукции.ПлановыйПроцентВыходаПродукции;
                ИначеЕсли   ВидТМЦ = Перечисления.ИНАГРО_ВидыТМЦ.Кат3 Тогда
                    НеГодныеОтходыПервТретКатегор = НеГодныеОтходыПервТретКатегор + СтрПродукции.ПлановыйПроцентВыходаПродукции
                КонецЕсли; 
            ИначеЕсли ИмяСтрокиТабДокумента = ИмяСтрокиВыходов Тогда
                
                НомерКолонкиВТаблицеПродукция = СтрПродукции.НомерСтроки;
                Если ВидТМЦ = Перечисления.ИНАГРО_ВидыТМЦ.Кат1 ИЛИ ВидТМЦ = Перечисления.ИНАГРО_ВидыТМЦ.Кат2 Тогда
                    
                    РасчетныйПроцентВыходаПродукции = РасчетныйПроцентВыходаПродукции + СтрПродукции.РасчетныйПроцентВыходаПродукции;
                    РасчетныйВесВыходаПродукции = РасчетныйВесВыходаПродукции + СтрПродукции.РасчетныйВесВыходаПродукции;
                    ФактическийПроцентВыходаПродукции = ФактическийПроцентВыходаПродукции + СтрПродукции.ФактическийПроцентВыходаПродукции;
                    ФактическийВесВыходаПродукции = ФактическийВесВыходаПродукции + СтрПродукции.ФактическийВесВыходаПродукции;
                    ПроцентОтклоненияОтНорм = ПроцентОтклоненияОтНорм + СтрПродукции.ПроцентОтклоненияОтНорм;
                    ВесОтклоненияОтНорм = ВесОтклоненияОтНорм + СтрПродукции.ВесОтклоненияОтНорм;
                    
                ИначеЕсли   ВидТМЦ = Перечисления.ИНАГРО_ВидыТМЦ.Кат3  ИЛИ ЗначениеЗаполнено(Ссылка.ВидПомола.МехПотери) Тогда
                    
                    
                    РасчетныйПроцентВыходаПродукции1 = РасчетныйПроцентВыходаПродукции1 + СтрПродукции.РасчетныйПроцентВыходаПродукции;
                    РасчетныйВесВыходаПродукции1 = РасчетныйВесВыходаПродукции1 + СтрПродукции.РасчетныйВесВыходаПродукции;
                    ФактическийПроцентВыходаПродукции1 = ФактическийПроцентВыходаПродукции1 + СтрПродукции.ФактическийПроцентВыходаПродукции;
                    ФактическийВесВыходаПродукции1 = ФактическийВесВыходаПродукции1 + СтрПродукции.ФактическийВесВыходаПродукции;
                    ПроцентОтклоненияОтНорм1 = ПроцентОтклоненияОтНорм1 + СтрПродукции.ПроцентОтклоненияОтНорм;
                    ВесОтклоненияОтНорм1 = ВесОтклоненияОтНорм1 + СтрПродукции.ВесОтклоненияОтНорм;
                    
                КонецЕсли;
            Иначе     
                
                НомерКолонкиВТаблицеПродукция = СтрПродукции.НомерСтроки;
                Коефициент = СтрРасчетов["Продукция" + НомерКолонкиВТаблицеПродукция];
                ИтогКоефициентовНеГодныхОтходов = ИтогКоефициентовНеГодныхОтходов + Коефициент;
            КонецЕсли;			
            
        КонецЕсли;
    КонецЦикла;
    Если ИмяСтрокиТабДокумента = ИмяШапки Тогда
        ОблШапкаНеГодныеОтходыТаблицыРасПерВторКат.Параметры.БазисныйВыход  = НеГодныеОтходыПервВторКатегор;
        ОблШапкаНеГодныеОтходыТаблТретМех.Параметры.БазисныйВыход1 = НеГодныеОтходыПервТретКатегор + Ссылка.ВидПомола.МехПотери;
        ТабДокумент.Присоединить(ОблШапкаНеГодныеОтходыТаблицыРасПерВторКат);
        ТабДокумент.Присоединить(ОблШапкаНеГодныеОтходыТаблТретМех);
    ИначеЕсли ИмяСтрокиТабДокумента = ИмяСтрокиВыходов Тогда
        ОблШапкаНеГодныеОтходыТаблицыРасПерВторКат.Параметры.РасчетныйПроцентВыходаПродукции = РасчетныйПроцентВыходаПродукции;
        ОблШапкаНеГодныеОтходыТаблицыРасПерВторКат.Параметры.РасчетныйВесВыходаПродукции = РасчетныйВесВыходаПродукции;
        ОблШапкаНеГодныеОтходыТаблицыРасПерВторКат.Параметры.ФактическийПроцентВыходаПродукции = ФактическийПроцентВыходаПродукции;
        ОблШапкаНеГодныеОтходыТаблицыРасПерВторКат.Параметры.ФактическийВесВыходаПродукции = ФактическийВесВыходаПродукции;
        ОблШапкаНеГодныеОтходыТаблицыРасПерВторКат.Параметры.ПроцентОтклоненияОтНорм = ПроцентОтклоненияОтНорм;
        ОблШапкаНеГодныеОтходыТаблицыРасПерВторКат.Параметры.ВесОтклоненияОтНорм = ВесОтклоненияОтНорм;
        ОблШапкаНеГодныеОтходыТаблТретМех.Параметры.РасчетныйПроцентВыходаПродукции1 = РасчетныйПроцентВыходаПродукции1 + РасчетныйПроцентМехПотерь_;
        ОблШапкаНеГодныеОтходыТаблТретМех.Параметры.РасчетныйВесВыходаПродукции1 = РасчетныйВесВыходаПродукции1 + РасчетныеМехПотери;
        ОблШапкаНеГодныеОтходыТаблТретМех.Параметры.ФактическийПроцентВыходаПродукции1 = ФактическийПроцентВыходаПродукции1 + ФактическийПроцентМехПотерь_;
        ОблШапкаНеГодныеОтходыТаблТретМех.Параметры.ФактическийВесВыходаПродукции1 = ФактическийВесВыходаПродукции1 + ФактическиеМехПотери;
        ОблШапкаНеГодныеОтходыТаблТретМех.Параметры.ПроцентОтклоненияОтНорм1 = ПроцентОтклоненияОтНорм1 + ПроцентОтклоненияМехПотерь;
        ОблШапкаНеГодныеОтходыТаблТретМех.Параметры.ВесОтклоненияОтНорм1 = ВесОтклоненияОтНорм1 + ВесОтклоненияМехПотерь;
        
        ТабДокумент.Присоединить(ОблШапкаНеГодныеОтходыТаблицыРасПерВторКат);
        ТабДокумент.Присоединить(ОблШапкаНеГодныеОтходыТаблТретМех);
    Иначе 
        ПоказатьОбласть = ОблШапкаНеГодныеОтходыТаблицыРасПерВторКат;
        ПоказатьОбласть2 = ОблШапкаНеГодныеОтходыТаблТретМех;
        ТабДокумент.Присоединить(ПоказатьОбласть);
        ТабДокумент.Присоединить(ПоказатьОбласть2);

    КонецЕсли;
    
    ОблШапкаКонецТаблицыРасчетов=Макет.ПолучитьОбласть(""+ИмяСтрокиТабДокумента+" | КонецТаблицыРасчетов");
    Если ИмяСтрокиТабДокумента = ИмяШапки Тогда
        ОблШапкаКонецТаблицыРасчетов.Параметры.НомКолонки2 = НомКолонки;
        НомКолонки = НомКолонки + 1;
        ОблШапкаКонецТаблицыРасчетов.Параметры.НомКолонки3 = НомКолонки;
        НомКолонки = НомКолонки + 1;
    ИначеЕсли ИмяСтрокиТабДокумента = ИмяСтрокиВыходов Тогда
        
        ВсегоУсушка = ПолучитьРасчетныйПроцентУсушки(Ссылка);
        ОблШапкаКонецТаблицыРасчетов.Параметры.ВсегоУсушка = ПолучитьРасчетныйПроцентУсушки(Ссылка);
        ВесУсушкиРасчетный = ПолучитьВесУсушкиРасчетный(Ссылка);
        ОблШапкаКонецТаблицыРасчетов.Параметры.ВесУсушкиРасчетный = ВесУсушкиРасчетный;
        Если Ссылка.Продукция.Итог("ФактическийВесВыходаПродукции") > 0 Тогда
            ВсегоФактическаяУсушка = ПолучитьФактическийПроцентУсушки(Ссылка);
            ВесУсушкиФактический = ПолучитьВесУсушкиФактический(Ссылка);		
            ОблШапкаКонецТаблицыРасчетов.Параметры.ВсегоУсушка = ВсегоУсушка;
            ОблШапкаКонецТаблицыРасчетов.Параметры.ВсегоФактическаяУсушка = ВсегоФактическаяУсушка;
            ОблШапкаКонецТаблицыРасчетов.Параметры.ВесУсушкиФактический = ВесУсушкиФактический;
        КонецЕсли;
        
        Если Ссылка.Продукция.Итог("ФактическийВесВыходаПродукции") > 0 И Ссылка.Продукция.Итог("РасчетныйВесВыходаПродукции") > 0 Тогда
            
            ПроцентОтклоненияУсушки = ПолучитьФактическийПроцентУсушки(Ссылка) - ПолучитьРасчетныйПроцентУсушки(Ссылка);
            ВесОтклоненияУсушки = ПолучитьВесУсушкиФактический(Ссылка) - ПолучитьВесУсушкиРасчетный(Ссылка);
            ОблШапкаКонецТаблицыРасчетов.Параметры.ПроцентОтклоненияУсушки = ПроцентОтклоненияУсушки;
            ОблШапкаКонецТаблицыРасчетов.Параметры.ВесОтклоненияУсушки = ВесОтклоненияУсушки;
            
        КонецЕсли;
        
        ОблШапкаКонецТаблицыРасчетов.Параметры.ВсегоРасчетныйПроцентВыхода = ПолучитьВсегоПроцентРасчетногоВыхода(Ссылка);
        ОблШапкаКонецТаблицыРасчетов.Параметры.ВсегоРасчетныйВесВыхода = ПолучитьВсегоРасчетныйВыход(Ссылка);
        ОблШапкаКонецТаблицыРасчетов.Параметры.ВсегоФактическийПроцентВыхода = ПолучитьВсегоПроцентФактическогоВыхода(Ссылка);
        ОблШапкаКонецТаблицыРасчетов.Параметры.ВсегоФактическийВесВыхода = ПолучитьВсегоФактическийВыход(Ссылка);
        
    Иначе
        Усушка = СтрРасчетов.Усушка;
        ОблШапкаКонецТаблицыРасчетов.Параметры.Усушка = Усушка;
        ОблШапкаКонецТаблицыРасчетов.Параметры.Итог = ИтогКоефициентовПродукции + ИтогКоефициентовГодныхОтходов + ИтогКоефициентовНеГодныхОтходов + Усушка;
    КонецЕсли;
    ТабДокумент.Присоединить(ОблШапкаКонецТаблицыРасчетов);		
    
КонецПроцедуры

Функция ПечатьСоставПомольнойПартииМуки(МассивОбъектов, ОбъектыПечати, ПараметрыВывода)
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("ПФ_MXL_СоставПомольнойПартииМуки");
	
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	ПервыйДокумент = Истина;
	
	Для каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;	
		
		ПечатьСоставПомольнойПартииМукиВывод(Макет,ТабДокумент,Ссылка)
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции

Функция ПечатьСоставПомольнойПартииМукиВывод(Макет,ТабДокумент,Ссылка)
	
	КодЯзыкаПечать = Макет.КодЯзыкаМакета;
	Руководители = ИНАГРО_Элеватор.ОтветственныеЛицаОрганизации(Ссылка.Организация,Ссылка.Дата);
	
		Заголовок = Макет.ПолучитьОбласть("Заголовок");
		Заголовок.Параметры.Директор = Руководители.Руководитель;
		Заголовок.Параметры.Организация = Ссылка.Организация.Наименование;
		Заголовок.Параметры.Дата = Формат(Ссылка.Дата, "ДФ='дд ММММ гггг';Л="+ Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать));	
		ТабДокумент.Вывести(Заголовок);
		
		Строка = Макет.ПолучитьОбласть("Строка");
		ФизическийВесВсего = 0;
		ЦентнероПроцентыВсего = 0;
		Для Каждого СтрСырья Из Ссылка.Сырье Цикл	
			Строка.Параметры.Культура = ПолучитьНаименованиеНоменклатуры(СтрСырья.Номенклатура);
			ФизическийВес = СтрСырья.ФизическийВес;
			Строка.Параметры.Вес = ФизическийВес; 
			ФизическийВесВсего = ФизическийВесВсего + ФизическийВес;
			
			ЗначениеХарактеристики = 0;
			Для Каждого СтрЛабАнализа Из СтрСырья.ЛабораторныйАнализ.Результаты Цикл
				Если СтрЛабАнализа.Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.КлейковинаКоличество Тогда
					ЗначениеХарактеристики = СтрЛабАнализа.Значение;
					Прервать;
				КонецЕсли
			КонецЦикла;
			
			ЦентнероПроценты = Окр(ФизическийВес * ЗначениеХарактеристики / 100);
			ЦентнероПроцентыВсего = ЦентнероПроцентыВсего + ЦентнероПроценты;
			Строка.Параметры.ЗначениеХарактеристики = ЗначениеХарактеристики;
			Строка.Параметры.ЦентнероПроценты = ЦентнероПроценты;
			
			ТабДокумент.Вывести(Строка);
		КонецЦикла;
		
		Итог = Макет.ПолучитьОбласть("Итог");
		СреднееЗначениеХарактеристики = ИНАГРО_Элеватор.Процент(ФизическийВесВсего, ЦентнероПроцентыВсего, 1);
		Итог.Параметры.ВесВсего = ФизическийВесВсего;
		Итог.Параметры.СреднееЗначениеХарактеристики = СреднееЗначениеХарактеристики;
		Итог.Параметры.ЦентнероПроцентыВсего = ЦентнероПроцентыВсего;		
		
		ТабДокумент.Вывести(Итог);
		
		Дно = Макет.ПолучитьОбласть("Дно");
		Дно.Параметры.НачальникВтл = Руководители.НачальникВТЛ;
		ТабДокумент.Вывести(Дно);
		
		Возврат ТабДокумент;
	
КонецФункции
      
Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура;	
	
	Возврат Результат;
	
КонецФункции
		

#КонецОбласти 

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаДокумента"
		И ВидФормы <> "ФормаОбъекта" Тогда
		Возврат;
	КонецЕсли;

	ВидОперации = Неопределено; 

	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "ВидОперации");
	КонецЕсли;

	// Если документ копируется, то вид формы получаем из копируемого документа.
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			ВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.ЗначениеКопирования, "ВидОперации");
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") Тогда
			Если Параметры.ЗначенияЗаполнения.Свойство("ВидОперации") Тогда
				ВидОперации = Параметры.ЗначенияЗаполнения.ВидОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
		Если Параметры.Свойство("Основание")
			И ЗначениеЗаполнено(Параметры.Основание) Тогда
			ВидОперации = ОпределитьВидОперацииПоДокументуОснованию(Параметры.Основание);
		КонецЕсли;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ФормыИНАГРО_ИНАГРО_Форма117 = ПолучитьСоответствиеВидовОперацийФормам();
	ВыбраннаяФорма = ФормыИНАГРО_ИНАГРО_Форма117[ВидОперации];
	Если ВыбраннаяФорма = Неопределено Тогда
		ВыбраннаяФорма = "ФормаДокумента";
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти 

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСоответствиеВидовОперацийФормам() Экспорт

	ФормыИНАГРО_ИНАГРО_Форма117 = Новый Соответствие;
	
	ФормыИНАГРО_ИНАГРО_Форма117.Вставить(Перечисления.ИНАГРО_ВидыОперацийФорма117.ПоВладельцу, "ФормаДокументаОбщая");
	ФормыИНАГРО_ИНАГРО_Форма117.Вставить(Перечисления.ИНАГРО_ВидыОперацийФорма117.Сводная,     "ФормаДокументаОбщая");
		
	Возврат ФормыИНАГРО_ИНАГРО_Форма117;

КонецФункции 

Функция ОпределитьВидОперацииПоДокументуОснованию(Основание) Экспорт

	Результат = Перечисления.ИНАГРО_ВидыОперацийФорма117.ПоВладельцу;

	Возврат Результат;

КонецФункции

Функция ПолучитьФиксированныйМассивВидовОпераций() Экспорт

	МассивВидовОпераций = Новый Массив;
	СписокВидовОпераций = Новый СписокЗначений;
	
	ЗначенияПеречисления = Метаданные.Перечисления.ИНАГРО_ВидыОперацийФорма117.ЗначенияПеречисления;
	Для Каждого ЗначениеПеречисления Из ЗначенияПеречисления Цикл
		ТекущийВидОперации = Перечисления.ИНАГРО_ВидыОперацийФорма117[ЗначениеПеречисления.Имя];
		МассивВидовОпераций.Добавить(ТекущийВидОперации);
	КонецЦикла;
		
	Возврат Новый ФиксированныйМассив(МассивВидовОпераций);

КонецФункции

#Область Расчеты

Функция ПолучитьСтруктуруКондицийХарактеристики(Характеристика, ВидПомола) Экспорт
	
	Структура = Новый Структура(
		"Характеристика, БазиснаяКондицияДляПереработки, НеРассчитыватьКоэффициентВлиянияЕслиБольшеБазиса,
		|НеРассчитыватьКоэффициентВлиянияЕслиМеньшеБазиса");
	
	ЗапросПоВидуПомола = Новый Запрос();
	
	ЗапросПоВидуПомола.Текст = 
		"ВЫБРАТЬ
		|	Характеристики.Ссылка КАК ВидПомола,
		|	Характеристики.Характеристика,
		|	Характеристики.БазиснаяКондицияДляПереработки,
		|	Характеристики.НеРассчитыватьКоэффициентВлиянияЕслиБольшеБазиса,
		|	Характеристики.НеРассчитыватьКоэффициентВлиянияЕслиМеньшеБазиса
		|ИЗ
		|	Справочник.ИНАГРО_ВидыПомола.Характеристики КАК Характеристики
		|ГДЕ
		|	Характеристики.Характеристика = &Характеристика
		|	И Характеристики.Ссылка = &ВидПомола";
	
	ЗапросПоВидуПомола.УстановитьПараметр("Характеристика", Характеристика);
	ЗапросПоВидуПомола.УстановитьПараметр("ВидПомола",      ВидПомола);
	
	ТабХарактеристик = ЗапросПоВидуПомола.Выполнить().Выбрать();
	
	Если ТабХарактеристик.Следующий() Тогда
		Структура.Характеристика = ТабХарактеристик.Характеристика;
		Структура.БазиснаяКондицияДляПереработки = ТабХарактеристик.БазиснаяКондицияДляПереработки;
		Структура.НеРассчитыватьКоэффициентВлиянияЕслиБольшеБазиса = ТабХарактеристик.НеРассчитыватьКоэффициентВлиянияЕслиБольшеБазиса;
		Структура.НеРассчитыватьКоэффициентВлиянияЕслиМеньшеБазиса = ТабХарактеристик.НеРассчитыватьКоэффициентВлиянияЕслиМеньшеБазиса;
	КонецЕсли;
	
	Если Структура.БазиснаяКондицияДляПереработки = Неопределено Тогда
		Если ТипЗнч(Характеристика.БазиснаяКондицияДляПереработки) = Тип("Число") Тогда
			Структура.БазиснаяКондицияДляПереработки = Характеристика.БазиснаяКондицияДляПереработки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

Функция ПолучитьНадбавкуЗаОтклонениеОтБазиса(Характеристика, ВидПомола) Экспорт
	
	Результат = 0;
	
	ЗапросПоВидуПомола = Новый Запрос();
	
	ЗапросПоВидуПомола.Текст = 
		"ВЫБРАТЬ
		|	Характеристики.Ссылка КАК ВидПомола,
		|	Характеристики.Характеристика,
		|	Характеристики.НадбавкаЗаОтклоненияОтБазиса
		|ИЗ
		|	Справочник.ИНАГРО_ВидыПомола.Характеристики КАК Характеристики
		|ГДЕ
		|	Характеристики.Характеристика = &Характеристика
		|	И Характеристики.Ссылка = &ВидПомола";
	
	ЗапросПоВидуПомола.УстановитьПараметр("Характеристика", Характеристика);
	ЗапросПоВидуПомола.УстановитьПараметр("ВидПомола",      ВидПомола);
	
	ТабХарактеристик = ЗапросПоВидуПомола.Выполнить().Выбрать();
	
	Пока ТабХарактеристик.Следующий() Цикл
		Результат = ТабХарактеристик.НадбавкаЗаОтклоненияОтБазиса;
	КонецЦикла;
	
	Если Результат = 0 ИЛИ Результат = Неопределено Тогда
		Если ТипЗнч(Характеристика.НадбавкаЗаОтклоненияОтБазиса) = Тип("Число") Тогда
			Результат = Характеристика.НадбавкаЗаОтклоненияОтБазиса;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьБазиснуюКондициюДляПереработки(Характеристика, ВидПомола)
	
	Результат = 0;
	
	ЗапросПоВидуПомола = Новый Запрос();
	
	ЗапросПоВидуПомола.Текст = 
		"ВЫБРАТЬ
		|	Характеристики.Ссылка КАК ВидПомола,
		|	Характеристики.Характеристика,
		|	Характеристики.БазиснаяКондицияДляПереработки
		|ИЗ
		|	Справочник.ИНАГРО_ВидыПомола.Характеристики КАК Характеристики
		|ГДЕ
		|	Характеристики.Характеристика = &Характеристика
		|	И Характеристики.Ссылка = &ВидПомола";
	
	ЗапросПоВидуПомола.УстановитьПараметр("Характеристика", Характеристика);	
	ЗапросПоВидуПомола.УстановитьПараметр("ВидПомола",      ВидПомола);
	
	ТабХарактеристик = ЗапросПоВидуПомола.Выполнить().Выбрать();
	
	Пока ТабХарактеристик.Следующий() Цикл
		Результат = ТабХарактеристик.БазиснаяКондицияДляПереработки;
	КонецЦикла;
	
	Если Результат = 0 ИЛИ Результат = Неопределено Тогда
		Если ТипЗнч(Характеристика.БазиснаяКондицияДляПереработки) = Тип("Число") Тогда
			Результат = Характеристика.БазиснаяКондицияДляПереработки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНормуИзмененияВыходаПродукции(Характеристика, ВидПомола, Продукция) Экспорт
	
	Результат = 0;
	
	ЗапросПоВидуПомола = Новый Запрос();
	
	ЗапросПоВидуПомола.Текст =
		"ВЫБРАТЬ
		|	НормыИзмененияВыходаПродукции.Ссылка КАК ВидПомола,
		|	НормыИзмененияВыходаПродукции.Характеристика,
		|	НормыИзмененияВыходаПродукции.НормаИзмененияВыходаПродукции
		|ИЗ
		|	Справочник.ИНАГРО_ВидыПомола.НормыИзмененияВыходаПродукции КАК НормыИзмененияВыходаПродукции
		|ГДЕ
		|	НормыИзмененияВыходаПродукции.Характеристика = &Характеристика
		|	И НормыИзмененияВыходаПродукции.Номенклатура В(&СписокПродукции)
		|	И НормыИзмененияВыходаПродукции.Ссылка = &ВидПомола";
	
	ЗапросПоВидуПомола.УстановитьПараметр("Характеристика",  Характеристика);
	ЗапросПоВидуПомола.УстановитьПараметр("ВидПомола",       ВидПомола);
	СписокПродукции  = Новый СписокЗначений;
	СписокПродукции.Добавить(Продукция);
	СписокПродукции.Добавить(Справочники.Номенклатура.ПустаяСсылка());	
	ЗапросПоВидуПомола.УстановитьПараметр("СписокПродукции", СписокПродукции);
	
	ТабХарактеристик = ЗапросПоВидуПомола.Выполнить().Выбрать();
	
	Пока ТабХарактеристик.Следующий() Цикл
		Результат = ТабХарактеристик.НормаИзмененияВыходаПродукции;
	КонецЦикла;
	
	Возврат Результат;	
	
КонецФункции

// Расчетный выход

Функция ПолучитьВсегоРасчетныйВыход(Ссылка) Экспорт
	
	Результат = 0;
	
	Если Ссылка.Продукция.Итог("РасчетныйВесВыходаПродукции") > 0 Тогда
		Результат = Ссылка.Продукция.Итог("РасчетныйВесВыходаПродукции") + ПолучитьРасчетныеМехПотери(Ссылка) + ПолучитьВесУсушкиРасчетный(Ссылка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьРасчетныеМехПотери(Ссылка) Экспорт
	
	Возврат Окр(ПолучитьРасчетныйПроцентМехПотерь(Ссылка) * ПолучитьВесПущенногоВПереработкуЗерна(Ссылка) / 100);
	
КонецФункции 

Функция ПолучитьРасчетныйПроцентМехПотерь(Ссылка)
	
	Возврат Ссылка.РасчетныйПроцентМехПотерь;
	
КонецФункции

Функция ПолучитьВесПущенногоВПереработкуЗерна(Ссылка) Экспорт
	
	ВесПущенныйВПереработку = Ссылка.Сырье.Итог("ФизическийВес");
	
	Возврат ВесПущенныйВПереработку;
	
КонецФункции

Функция ПолучитьВесУсушкиРасчетный(Ссылка) Экспорт
	
	Возврат Окр(ПолучитьРасчетныйПроцентУсушки(Ссылка) * ПолучитьВесПущенногоВПереработкуЗерна(Ссылка) / 100);
	
КонецФункции

Функция ПолучитьРасчетныйПроцентУсушки(Ссылка) Экспорт;
	
	Возврат Ссылка.Расчеты.Итог("Усушка") + Ссылка.ВидПомола.Усушка;
	
КонецФункции

//  Фактический выход

Функция ПолучитьВсегоФактическийВыход(Ссылка) Экспорт
	
	Результат = 0;
	
	Если Ссылка.Продукция.Итог("ФактическийВесВыходаПродукции") > 0 Тогда
		Результат = Ссылка.Продукция.Итог("ФактическийВесВыходаПродукции") + ПолучитьФактическиеМехПотери(Ссылка) + ПолучитьВесУсушкиФактический(Ссылка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьФактическиеМехПотери(Ссылка) Экспорт;
		
	Возврат ПолучитьВесПущенногоВПереработкуЗерна(Ссылка) - (Ссылка.Продукция.Итог("ФактическийВесВыходаПродукции") + ПолучитьВесУсушкиФактический(Ссылка));
	
КонецФункции

Функция ПолучитьВесУсушкиФактический(Ссылка) Экспорт
	
	Возврат Окр(ПолучитьФактическийПроцентУсушки(Ссылка) * ПолучитьВесПущенногоВПереработкуЗерна(Ссылка) / 100);
	
КонецФункции

Функция ПолучитьФактическийПроцентУсушки(Ссылка) Экспорт
	
	Результат = 0;
	Влажность = ПолучитьВлажность(Ссылка);
	
	Если Ссылка.Продукция.Итог("ФактическийПроцентВыходаПродукции") > 0 Тогда
		Если Ссылка.ВидПомола.ВидПереработки = Перечисления.ИНАГРО_ВидыПереработки.Крупа Тогда
			Результат = Окр((Влажность - Ссылка.ВлажностьПродукции) * 100 / (100 - Ссылка.ВлажностьПродукции), 2);
		Иначе
			Результат = Окр((Влажность - Ссылка.ВлажностьПродукции) * 100 / (100 - Ссылка.ВлажностьПродукции), 2);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВлажность(Ссылка)
	
	Результат = 0;
	
	Для Каждого СтрокаТабличнойЧасти Из Ссылка.Расчеты Цикл
		Если СтрокаТабличнойЧасти.Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.Влажность Тогда
			Возврат СтрокаТабличнойЧасти.КачествоЗерна;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Процент расчетного и фактичечкого выхода

Функция ПолучитьВсегоПроцентРасчетногоВыхода(Ссылка) Экспорт
	
	Результат = 0;
	
	Если Ссылка.Продукция.Итог("РасчетныйПроцентВыходаПродукции") > 0 Тогда		
		Результат = Ссылка.Продукция.Итог("РасчетныйПроцентВыходаПродукции") + ПолучитьРасчетныйПроцентМехПотерь(Ссылка) + ПолучитьРасчетныйПроцентУсушки(Ссылка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВсегоПроцентФактическогоВыхода(Ссылка) Экспорт
	
	Результат = 0;
	
	Если Ссылка.Продукция.Итог("ФактическийПроцентВыходаПродукции") > 0 Тогда
		Результат = Ссылка.Продукция.Итог("ФактическийПроцентВыходаПродукции") + ПолучитьФактическийПроцентМехПотерь(Ссылка) + ПолучитьФактическийПроцентУсушки(Ссылка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьФактическийПроцентМехПотерь(Ссылка)
	
	Возврат Ссылка.ФактическийПроцентМехПотерь;
	
КонецФункции

// Печать

Функция ПолучитьПоказателиПоВидуПомола(Характеристика,ВидПомола)
	
	Результат = Неопределено;
	
	ЗапросПоВидуПомола = Новый Запрос();
	ЗапросПоВидуПомола.Текст = 
		"ВЫБРАТЬ
		|	Характеристики.Ссылка КАК ВидПомола,
		|	Характеристики.Характеристика КАК Характеристика,
		|	Характеристики.НадбавкаЗаОтклоненияОтБазиса КАК НадбавкаЗаОтклоненияОтБазиса,
		|	Характеристики.НеРассчитыватьКоэффициентВлиянияЕслиБольшеБазиса КАК НеРассчитыватьКоэффициентВлиянияЕслиБольшеБазиса,
		|	Характеристики.НеРассчитыватьКоэффициентВлиянияЕслиМеньшеБазиса КАК НеРассчитыватьКоэффициентВлиянияЕслиМеньшеБазиса
		|ИЗ
		|	Справочник.ИНАГРО_ВидыПомола.Характеристики КАК Характеристики
		|ГДЕ
		|	Характеристики.Характеристика = &Характеристика
		|	И Характеристики.Ссылка = &ВидПомола";
	
	ЗапросПоВидуПомола.УстановитьПараметр("ВидПомола",      ВидПомола);
	ЗапросПоВидуПомола.УстановитьПараметр("Характеристика", Характеристика);
	
	табХарактеристик = ЗапросПоВидуПомола.Выполнить().Выбрать();
	
	Пока табХарактеристик.Следующий() Цикл
		Результат = табХарактеристик;
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИтогКоэффициентов(Ссылка) Экспорт
	
	ИтогКоэффициентов = 0;
	
	Для К = 1 По Ссылка.Продукция.Количество() Цикл
		ИтогКоэффициентов = ИтогКоэффициентов + Ссылка.Расчеты.Итог("Продукция" + К);
	КонецЦикла;
	
	ИтогКоэффициентов = ИтогКоэффициентов + Ссылка.Расчеты.Итог("Усушка");
	
	Возврат ИтогКоэффициентов;
	
КонецФункции

Функция ПолучитьНаименованиеНоменклатуры(ТМЦ)
	
	Результат = ТМЦ;
	
	Если СокрЛП(ТМЦ.НаименованиеПолное) = "" Тогда
		Результат = ТМЦ.НаименованиеПолное
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСреднееКачествоСырья(ТабХарактеристик, Ссылка)
		
	ТабХарактеристик.Колонки.Добавить("ХарактеристикаСырья");
	ТабХарактеристик.Колонки.Добавить("ВесСырья");
	ТабХарактеристик.Колонки.Добавить("ЦентнероПроцентыСырья");	
	ТабХарактеристик.Колонки.Добавить("КвоЗначенийПоказателяСырья");
	ТабХарактеристик.Колонки.Добавить("КачествоЗерна");
		
	КвоЛабАнализов        = 0;
	КвоЗначенийПоказателя = 0;
	
	Для Каждого СтрСырье Из Ссылка.Сырье Цикл
		
		Для Каждого СтрЛабАнализа Из СтрСырье.ЛабораторныйАнализ.Результаты Цикл
			
			Если ТипЗнч(СтрЛабАнализа.Значение) <> Тип("Число") Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТабХарактеристик.Добавить();
			НоваяСтрока.ХарактеристикаСырья        = СтрЛабАнализа.Характеристика;
			НоваяСтрока.ВесСырья                   = СтрСырье.ФизическийВес;
			НоваяСтрока.ЦентнероПроцентыСырья      = Окр(СтрСырье.ФизическийВес * СтрЛабАнализа.Значение/100);
			НоваяСтрока.КачествоЗерна              = СтрЛабАнализа.Значение;
			НоваяСтрока.КвоЗначенийПоказателяСырья = 1;
			
		КонецЦикла;
		
		КвоЗначенийПоказателя = КвоЗначенийПоказателя + 1;
		КвоЛабАнализов        = КвоЛабАнализов + 1;
		
	КонецЦикла;
	
	Если КвоЛабАнализов = 1 Тогда
		//
	Иначе	
		ТабХарактеристик.Свернуть("ХарактеристикаСырья", "ЦентнероПроцентыСырья, КвоЗначенийПоказателяСырья");
	КонецЕсли;
	
	ТабХарактеристик.Колонки.Добавить("СреднееЗначениеХарактеристкиСырья");
	
	Для Каждого СтрТабХарактеристик Из ТабХарактеристик Цикл
		
		Если СтрТабХарактеристик.КвоЗначенийПоказателяСырья <> КвоЗначенийПоказателя Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Внимание: показатель ""%1"" присутствует не во всех анализах сырья! Среднее значение ""%1"" партии будет расчитано неверно!';uk='Увага: показник ""%1"" присутні не у всіх аналізах сировини! Середнє значення ""%1"" партії буде розраховано невірно!'"), СтрТабХарактеристик.ХарактеристикаСырья);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);	
		КонецЕсли;
		
		Если КвоЛабАнализов = 1 Тогда
			СтрТабХарактеристик.СреднееЗначениеХарактеристкиСырья = СтрТабХарактеристик.КачествоЗерна;
		Иначе
			СтрТабХарактеристик.СреднееЗначениеХарактеристкиСырья = ИНАГРО_Элеватор.Процент(ПолучитьВесПущенногоВПереработкуЗерна(Ссылка), СтрТабХарактеристик.ЦентнероПроцентыСырья);
		КонецЕсли;
		
	КонецЦикла;
	
	// Получим среднее значение характеристик из таблицы расчета
	Для Каждого стрРасчета Из Ссылка.Расчеты Цикл
		
		Если стрРасчета.Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.ЗерноваяПримесь2 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрТабХарактеристик = ТабХарактеристик.Найти(стрРасчета.Характеристика, "ХарактеристикаСырья");
		
		Если СтрТабХарактеристик = Неопределено Тогда
			СтрТабХарактеристик = ТабХарактеристик.Добавить();			
		КонецЕсли;
		
		СтрТабХарактеристик.ХарактеристикаСырья				  = стрРасчета.Характеристика;
		СтрТабХарактеристик.СреднееЗначениеХарактеристкиСырья = стрРасчета.КачествоЗерна;
		
	КонецЦикла;
	
	Возврат ТабХарактеристик;
		
КонецФункции


#КонецОбласти

#КонецОбласти 

#КонецЕсли

