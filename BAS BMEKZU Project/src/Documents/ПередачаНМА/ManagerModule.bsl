#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьСчетаУчетаРасчетов(Объект, СчетаУчета = Неопределено) Экспорт
	
	Если СчетаУчета = Неопределено Тогда
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
			Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	КонецЕсли;
	
	
	Если Объект.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Бартерный Тогда
		
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателяПриБартере;
		Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателяПриБартере;
		
	Иначе
		
		Объект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
		Объект.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
		
	КонецЕсли;
	
	Объект.СчетУчетаНДС 				 	= СчетаУчета.СчетУчетаНДСПродаж;
	Объект.СчетУчетаНДСПодтвержденный  	 	= СчетаУчета.СчетУчетаНДСПродажПодтвержденный;
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти
	
#Область ПроцедурыИФункцииПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Форма НА-3
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "НА3";
	КомандаПечати.Представление = НСтр("ru='Форма НА-3';uk='Форма НА-3'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Расходная накладная
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("ru='Расходная накладная';uk='Видаткова накладна'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечати";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Реестр";
	КомандаПечати.Представление = НСтр("ru='Реестр документов';uk='Реєстр документів'");
	КомандаПечати.ЗаголовокФормы= НСтр("ru='Реестр документов ""Передача НМА""';uk='Реєстр документів ""Передача НМА""'");
	КомандаПечати.Обработчик    = "УправлениеПечатьюБПКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм    = "ФормаСписка";
	КомандаПечати.Порядок       = 100;
	
	
КонецПроцедуры

// Функция формирует табличный документ с типовой печатной формой НА-3
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьНА3(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, ИмяМакета)
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент   = Новый ТабличныйДокумент();
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПередачаНМА_НА3";
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_UK_НА3");
	
	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
	
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ДатаДок",     Ссылка.Дата);
		Запрос.УстановитьПараметр("Организация", Ссылка.Организация);
		Запрос.УстановитьПараметр("СписокНМА",   Ссылка.НМА.ВыгрузитьКолонку("НематериальныйАктив"));                    
		Запрос.УстановитьПараметр("Ссылка",      Ссылка);
		Запрос.УстановитьПараметр("Руководитель", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
		Запрос.УстановитьПараметр("Бухгалтер"   , Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПередачаНМА.Ссылка.Организация                          КАК Организация,
		|	ПередачаНМА.Ссылка.Организация.НаименованиеПолное       КАК НаименованиеПолноеОрганизации,
		|	ПередачаНМА.Ссылка.Организация.КодПоЕДРПОУ              КАК КодПоЕДРПОУ,
		|	Руководитель.ФизическоеЛицо                             КАК ФИОРук,
		|	Бухгалтер.ФизическоеЛицо                                КАК ФИОБух,
		|	ПередачаНМА.Ссылка.Дата                                 КАК ДатаДок,
		|	ПередачаНМА.Ссылка.Номер                                КАК НомерДок,
		|	ПередачаНМА.НематериальныйАктив.НаименованиеПолное      КАК НаименованиеПолное,
		|	ПередачаНМА.НематериальныйАктив.Код                     КАК ИнвентарныйНомер,     
		|	ПередачаНМА.НематериальныйАктив.ПрочиеСведения          КАК ПрочиеСведения,                 
		|	ПередачаНМА.СхемаРеализации.СчетСебестоимости           КАК СчетСписанияБУ,
		|	ПередачаНМА.СтоимостьБУ                                 КАК ПервоначальнаяСтоимость,
		|	ПередачаНМА.СтоимостьБУ - ПередачаНМА.АмортизацияБУ 
		|		- ПередачаНМА.АмортизацияЗаМесяцБУ                  КАК ОстаточнаяСтоимость,
		|	ПервоначальныеСведенияНМА_БУ.СрокПолезногоИспользования КАК СрокИспользования,
		|	ПервоначальныеСведенияНМА_БУ.ЛиквидационнаяСтоимость    КАК ЛиквидационнаяСтоимость,
		|	СчетаУчетаНМА_БУ.СчетУчета                              КАК СчетУчетаБУ,
		|	МестонахождениеНМАБухгалтерскийУчетСрезПоследних.МОЛ
		|ИЗ
		|	Документ.ПередачаНМА.НМА КАК ПередачаНМА
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(&ДатаДок,
		|			Организация = &Организация
		|		    И НематериальныйАктив В (&СписокНМА)) КАК ПервоначальныеСведенияНМА_БУ
		|		ПО ПередачаНМА.Ссылка.Организация = ПервоначальныеСведенияНМА_БУ.Организация
		|			И ПередачаНМА.НематериальныйАктив = ПервоначальныеСведенияНМА_БУ.НематериальныйАктив
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(&ДатаДок,
		|			Организация = &Организация
		|		    И НематериальныйАктив В (&СписокНМА)) КАК СчетаУчетаНМА_БУ
		|		ПО ПередачаНМА.Ссылка.Организация = СчетаУчетаНМА_БУ.Организация
		|			И ПередачаНМА.НематериальныйАктив = СчетаУчетаНМА_БУ.НематериальныйАктив
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
		|		                    &ДатаДок,
		|		                    СтруктурнаяЕдиница = &Организация
		|			                И ОтветственноеЛицо = &Бухгалтер) КАК Бухгалтер
		|		ПО ПередачаНМА.Ссылка.Организация = Бухгалтер.СтруктурнаяЕдиница
		|		ЛЕВОЕ СОЕДИНЕНИЕ 
		|			РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
		|		                    &ДатаДок,
		|		                    СтруктурнаяЕдиница = &Организация
		|			                И ОтветственноеЛицо = &Руководитель) КАК Руководитель
		|		ПО ПередачаНМА.Ссылка.Организация = Руководитель.СтруктурнаяЕдиница
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеНМАБухгалтерскийУчет.СрезПоследних(
		|				&ДатаДок,
		|				Организация = &Организация
		|					И НематериальныйАктив В (&СписокНМА)) КАК МестонахождениеНМАБухгалтерскийУчетСрезПоследних
		|		ПО ПередачаНМА.Ссылка.Организация = МестонахождениеНМАБухгалтерскийУчетСрезПоследних.Организация
		|			И ПередачаНМА.НематериальныйАктив = МестонахождениеНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
		|ГДЕ
		|	ПередачаНМА.Ссылка = &Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		
		НеПервый      = Ложь;
		
		ВыборкаПоКомиссии = ОбщегоНазначенияБПВызовСервера.ПолучитьСведенияОКомиссии(Ссылка);

		Пока Выборка.Следующий() Цикл
		
			ОбластьМакета = Макет.ПолучитьОбласть("НА3");
			Параметры     = ОбластьМакета.Параметры;
			Параметры.Заполнить(Выборка);
			Параметры.Заполнить(ВыборкаПоКомиссии);
			
			
			Параметры.КодПоЕДРПОУ = Выборка.КодПоЕДРПОУ;
			Параметры.ФИОРук      = ФизическиеЛицаБП.ФамилияИнициалыФизЛица(Выборка.ФИОРук);
			Параметры.ФИОБух      = ФизическиеЛицаБП.ФамилияИнициалыФизЛица(Выборка.ФИОБух);
			ДанныеФизЛица = ИНАГРО_ЗарплатаКадрыРасширенный.ДанныеФизЛица(Ссылка.Организация, Выборка.МОЛ, Ссылка.Дата);
			ДанныеМОЛ = ОбщегоНазначенияБПВызовСервера.ДанныеФизЛица(
										Ссылка.Организация, 
										Выборка.МОЛ, 
										Ссылка.Дата, 
										Истина // ФИОКратко 
									 );
			Параметры.МОЛДолжность	= ДанныеФизЛица.Должность;
			Параметры.МОЛФИО 		= ДанныеМОЛ.Представление;
			
			Если НеПервый Тогда
				
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
			Иначе
				
				НеПервый = Истина;
				
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакета);
		
		КонецЦикла;	
	

		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
	КонецЦикла;	
	
	Возврат ТабДокумент;

КонецФункции // ПечатьНА3()

// Функция формирует табличный документ с печатной формой накладной,
//
// Возвращаемое значение:
//  Табличный документ - печатная форма накладной
//
Функция ПечатьНакладной(МассивОбъектов, ОбъектыПечати, ПараметрыВывода, ИмяМакета)
	УстановитьПривилегированныйРежим(Истина);

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияТоваровУслуг_Накладная";

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПередачаНМА.ПФ_MXL_Накладная");
	
	// печать производится на языке, указанном в настройках пользователя
	КодЯзыкаПечать = ПараметрыВывода.КодЯзыкаДляМногоязычныхПечатныхФорм;
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	ПервыйДокумент = Истина;
	
	Для Каждого Ссылка Из МассивОбъектов Цикл	
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номер,
		|	Дата,
		|	ДоговорКонтрагента,
		|	ДоговорКонтрагента.Дата  		КАК ДоговорДата,
		|	ДоговорКонтрагента.Номер 		КАК ДоговорНомер,
		|	ДоговорКонтрагента.НаименованиеДляПечати КАК ДоговорНаименованиеДляПечати,
		|	ДоговорКонтрагента.ВидДоговора  КАК ВидДоговораКонтрагента,
		|	Ответственный.ФизическоеЛицо.Наименование КАК Отпустил,
		|	Организация,
		|	ДоверенностьСерия,
		|	ДоверенностьНомер,
		|	ДоверенностьДата,
		|	Получил,
		|	ПолучилПоДругомуДокументу,
		|	ДокументПодтверждающийПолномочия, 
		|//	АдресДоставки,
		|	Контрагент  КАК Покупатель,
		|	Организация КАК Поставщик,
		|	Сделка,
		|//	Склад,
		|	СуммаДокумента,
		|	ВалютаДокумента,
		|	СуммаВключаетНДС
		|ИЗ
		|	Документ.ПередачаНМА КАК ПередачаНМА
		|
		|ГДЕ
		|	ПередачаНМА.Ссылка = &ТекущийДокумент";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Номенклатура,
		|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
		|	Номенклатура.Код КАК Код,
		|	Сумма,
		|	СуммаНДС,
		|   НомерСтроки
		|ИЗ 
		|	(ВЫБРАТЬ
		|		НематериальныйАктив     КАК Номенклатура,
		|		СтавкаНДС            КАК СтавкаНДС,
		|		СУММА(Сумма)         КАК Сумма,
		|		СУММА(СуммаНДС)      КАК СуммаНДС,
		|		МИНИМУМ(НомерСтроки) КАК НомерСтроки
		|	ИЗ
		|		Документ.ПередачаНМА.НМА КАК ПередачаНМА
		|	ГДЕ
		|		ПередачаНМА.Ссылка = &ТекущийДокумент
		|	СГРУППИРОВАТЬ ПО
		|		НематериальныйАктив,
		|		Сумма,
		|		СтавкаНДС
		|	) КАК ВложенныйЗапросПоТоварам
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		ЗапросТовары = Запрос.Выполнить().Выгрузить();

		УчитыватьНДС = УчетнаяПолитика.ПлательщикНДС(Шапка.Организация, Шапка.Дата);

		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		Если Шапка.ВидДоговораКонтрагента = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером  Тогда
			ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Расходная накладная (на комиссию)';uk='Видаткова накладна (на комісію)'",КодЯзыкаПечать),КодЯзыкаПечать);
		Иначе	
			ОбластьМакета.Параметры.ТекстЗаголовка = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Шапка, НСтр("ru='Расходная накладная';uk='Видаткова накладна'",КодЯзыкаПечать),КодЯзыкаПечать);
		КонецЕсли; 

		ТабДокумент.Вывести(ОбластьМакета);

		СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата,,,КодЯзыкаПечать);
		СведенияОПоставщике = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата,,,КодЯзыкаПечать);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,",,КодЯзыкаПечать);	
		ОбластьМакета.Параметры.РеквизитыПоставщика =     ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПоставщике, "НомерСчета,Банк,МФО,/,ЮридическийАдрес,Телефоны,/,КодПоЕДРПОУ,КодПоДРФО,ИНН,НомерСвидетельства,/,ИнформацияОСтатусеПлательщикаНалогов,",,КодЯзыкаПечать);
	    ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(Шапка);
	 	ОбластьМакета.Параметры.ПредставлениеПокупателя = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе, "ПолноеНаименование,",,КодЯзыкаПечать);
		ОбластьМакета.Параметры.РеквизитыПокупателя		= ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе,"ФактическийАдрес,Телефоны,",,КодЯзыкаПечать);
		ТабДокумент.Вывести(ОбластьМакета);

		// Выводим дополнительно информацию о договоре и сделке
		СписокДополнительныхПараметров = "ДоговорНаименованиеДляПечати,Сделка,Склад,АдресДоставки,";
		МассивСтруктурСтрок = ОбщегоНазначенияБПВызовСервера.ДополнительнаяИнформация(Шапка,СписокДополнительныхПараметров,КодЯзыкаПечать);
		ОбластьМакета = Макет.ПолучитьОбласть("ДопИнформация");
	    Для каждого СтруктураСтроки Из МассивСтруктурСтрок Цикл
			ОбластьМакета.Параметры.Заполнить(СтруктураСтроки);
			ТабДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		ОбластьШапки  = "ШапкаТаблицы";
		ОбластьСтроки = "Строка";

		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Суффикс = "";
		Если УчитыватьНДС Тогда
			Если Шапка.СуммаВключаетНДС Тогда
				Суффикс  = Суффикс  + НСтр("ru=' с ';uk=' з '",КодЯзыкаПечать);
			Иначе	
				Суффикс  = Суффикс  + НСтр("ru=' без ';uk=' без '",КодЯзыкаПечать);
			КонецЕсли;
			Суффикс = Суффикс  + НСтр("ru='НДС';uk='ПДВ'",КодЯзыкаПечать);
		КонецЕсли;
		ОбластьМакета.Параметры.Цена  = НСтр("ru='Цена';uk='Ціна'",КодЯзыкаПечать) + Суффикс;
		ОбластьМакета.Параметры.Сумма = НСтр("ru='Сумма';uk='Сума'",КодЯзыкаПечать)+ Суффикс;
		ТабДокумент.Вывести(ОбластьМакета);

		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		
		Сумма    = 0;
		СуммаНДС = 0;
		
		Для каждого ВыборкаСтрокТовары Из ЗапросТовары Цикл 

			Если НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;

			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.Товар 		= СокрЛП(ВыборкаСтрокТовары.Товар);
			ОбластьМакета.Параметры.НомерСтроки = ЗапросТовары.Индекс(ВыборкаСтрокТовары) + 1;
			ОбластьМакета.Параметры.Цена	 = ВыборкаСтрокТовары.Сумма;		
			ОбластьМакета.Параметры.Количество	 = 1;		
			ОбластьМакета.Параметры.ЕдиницаИзмерения	 = НСтр("ru='шт';uk='шт'");		
			ТабДокумент.Вывести(ОбластьМакета);

			Сумма          = Сумма       + ВыборкаСтрокТовары.Сумма;
			СуммаНДС       = СуммаНДС    + ВыборкаСтрокТовары.СуммаНДС;

		КонецЦикла;

		// Вывести Итого
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма);
		ТабДокумент.Вывести(ОбластьМакета);

		// Вывести ИтогоНДС
		Если УчитыватьНДС Тогда
			// НДС
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаНДС,,"""");
			ОбластьМакета.Параметры.НДС      = ?(Шапка.СуммаВключаетНДС, НСтр("ru='В том числе НДС:';uk='У тому числі ПДВ:'",КодЯзыкаПечать), НСтр("ru='Сумма НДС:';uk='Сума ПДВ:'",КодЯзыкаПечать));
			ТабДокумент.Вывести(ОбластьМакета);
			
			// всего с НДС (если сумма не включает НДС)
			Если НЕ Шапка.СуммаВключаетНДС Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
				ОбластьМакета.Параметры.ВсегоНДС = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Сумма + СуммаНДС);
				ОбластьМакета.Параметры.НДС      = НСтр("ru='Всего с НДС:';uk='Всього із ПДВ:'",КодЯзыкаПечать);
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
		КонецЕсли;

		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета.Параметры.ИтоговаяСтрока = НСтр("ru='Всего наименований ';uk='Всього найменувань '",КодЯзыкаПечать) + ЗапросТовары.Количество() + "," +
												 НСтр("ru=' на сумму ';uk=' на суму '",КодЯзыкаПечать)  + ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
												 
		ОбластьМакета.Параметры.СуммаПрописью  = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента,КодЯзыкаПечать)
		 										 + ?(НЕ УчитыватьНДС, "", Символы.ПС + НСтр("ru='В т.ч. НДС: ';uk='У т.ч. ПДВ: '",КодЯзыкаПечать) + ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаНДС, Шапка.ВалютаДокумента, КодЯзыкаПечать));

		ТабДокумент.Вывести(ОбластьМакета);

		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);
		Если Шапка.ПолучилПоДругомуДокументу Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ПодписиПоДругомуДокументу");
		Иначе			
			ОбластьМакета = Макет.ПолучитьОбласть("ПодписиПоДоверенности");
		КонецЕсли; 
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабДокумент.Вывести(ОбластьМакета);

 

		// В табличном документе зададим имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
			НомерСтрокиНачало, ОбъектыПечати, Ссылка);
		
	КонецЦикла;	
		
	Возврат ТабДокумент;

КонецФункции // ПечатьДокумента()

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;

	// Проверяем, нужно ли для макета СчетЗаказа формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НА3") Тогда

		ИмяМакета = "";
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "НА3", НСтр("ru='Форма НА-3';uk='Форма НА-3'"),
			ПечатьНА3(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, ИмяМакета), , ИмяМакета);

	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная", НСтр("ru='Приходная накладная';uk='Прибуткова накладна'"), 
			ПечатьНакладной(МассивОбъектов, ОбъектыПечати, ПараметрыВывода, ИмяМакета),,"Документ.ПередачаНМА.ПФ_MXL_Накладная", , Истина);
	КонецЕсли;
	
	
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли