////////////////////////////////////////////////////////////////////////////////
// СотрудникиКлиент: методы, обслуживающие работу формы сотрудника
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ОформитьНаОсновании(Форма, СотрудникСсылка, ИмяКоманды) Экспорт
	
	Если Не ЗначениеЗаполнено(СотрудникСсылка) Тогда 
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("СотрудникСсылка", СотрудникСсылка);
	ДополнительныеПараметры.Вставить("ИмяКоманды", ИмяКоманды);
	ДополнительныеПараметры.Вставить("ЗаписатьДанные", Истина);
	
	// Если данные сотрудника еще не записаны, предложим записать
	Если Форма.Модифицированность Или Форма.Параметры.Свойство("Ключ") И Форма.Параметры.Ключ.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru='Сотрудник еще не записан.
|Записать и продолжить?';uk='Співробітник ще не записаний.
|Записати і продовжити?'");
							
		Оповещение = Новый ОписаниеОповещения("ОформитьНаОснованииПродолжение", ЭтотОбъект, ДополнительныеПараметры);					
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru='Конфигурация BAS';uk='Конфігурація BAS'"));
		
	Иначе 
		
		ДополнительныеПараметры.ЗаписатьДанные = Ложь;
		ОформитьНаОснованииЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОформитьНаОснованииПродолжение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если ДополнительныеПараметры.ЗаписатьДанные Тогда
		Оповещение = Новый ОписаниеОповещения("ОформитьНаОснованииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Форма.ЗаписатьНаКлиенте(Ложь, Оповещение);
	Иначе 
		ПараметрыЗаписи = Новый Структура;
		ОформитьНаОснованииЗавершение(ПараметрыЗаписи, ДополнительныеПараметры);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОформитьНаОснованииЗавершение(ПараметрыЗаписи, ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;
	СотрудникСсылка = ДополнительныеПараметры.СотрудникСсылка;
	ИмяКоманды = ДополнительныеПараметры.ИмяКоманды;
	
	Если ДополнительныеПараметры.ЗаписатьДанные И Не Форма.Записать(ПараметрыЗаписи) Тогда
		Возврат;
	КонецЕсли; 
	
	ПолноеИмяОбъекта = ПолноеИмяОбъектаМетаданныхПоИмениКомандыВводаНаОсновании(ИмяКоманды);
	
	ПутьКФормеДокумента = СтрЗаменить(ПолноеИмяОбъекта, "Документы.", "Документ.") + ".ФормаОбъекта";
	
	ПараметрыФормы = Новый Структура("Основание,РежимОткрытияОкна", СотрудникСсылка, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФорму(ПутьКФормеДокумента, ПараметрыФормы, Форма);
	
КонецПроцедуры

// Возвращает полное имя объекта метаданных по имени команды ввода на основании
//
Функция ПолноеИмяОбъектаМетаданныхПоИмениКомандыВводаНаОсновании(ИмяКоманды)
	
	ПолноеИмяОбъектаМетаданных = СтрЗаменить(ИмяКоманды, "КомандаВводаНаОсновании_", "");
	Возврат СтрЗаменить(ПолноеИмяОбъектаМетаданных, "_", ".");
	
КонецФункции


// Выводит модальное окно, содержащее пояснение к предупреждающим полям
Процедура ПояснениеНажатие(Элемент, СтандартнаяОбработка = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Подсказка = Элемент.Подсказка;
	
	Если Не ПустаяСтрока(Элемент.Заголовок) И Элемент.Заголовок <> "Ошибка" И Элемент.Заголовок <> "Почему?" И Элемент.Заголовок <> Подсказка Тогда
	
		Подсказка = СтрПолучитьСтроку(Элемент.Заголовок, 1) + Символы.ПС + Подсказка;
	
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Подсказка) Тогда
		ПоказатьПредупреждение(,Подсказка);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьКонфликтыВидаЗанятостиССуществующимиСотрудниками(Сотрудник, ФизическоеЛицо, Организация, ВидЗанятости, ДатаПриема) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Сотрудник)
		И ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		ТекстСообщенияОКонфликте = СотрудникиВызовСервера.СообщениеОКонфликтеВидаЗанятостиНовогоСотрудникаССуществующими(Сотрудник, ФизическоеЛицо, Организация, ВидЗанятости, ДатаПриема);
		Если Не ПустаяСтрока(ТекстСообщенияОКонфликте) Тогда
			ПоказатьПредупреждение(,ТекстСообщенияОКонфликте, , НСтр("ru='Внимание';uk='Увага'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы Сотрудника

Процедура СотрудникиПриЗакрытии(Форма) Экспорт
	
	Если Форма.СозданиеНового И НЕ Форма.Параметры.Ключ.Пустая() Тогда
		Оповестить("СозданСотрудник", Форма.СотрудникСсылка, Форма.ВладелецФормы);
	КонецЕсли; 
	
КонецПроцедуры

Процедура СотрудникиПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	ЛичныеДанныеФизическогоЛицаПослеЗаписи(Форма, Форма.ФизическоеЛицоСсылка);
	ОповеститьОбИзмененииДанныхФизическогоЛица(Форма, Форма.ФизическоеЛицо);
	
	// оповестить об изменении физического лица при записи из формы Сотрудника
	ОповеститьОбИзменении(Форма.ФизическоеЛицоСсылка);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ФизическоеЛицо", Форма.ФизическоеЛицо.Ссылка);
	ПараметрыОповещения.Вставить("Сотрудник", Форма.Сотрудник.Ссылка);
	
	Оповестить("ИзменениеДанныхМестаРаботы", ПараметрыОповещения, Форма);
	
	Форма.ВыполненаКомандаСменыФИО = Ложь;
	Форма.Элементы.ФИО.ТолькоПросмотр = Ложь;
	
КонецПроцедуры

Процедура СотрудникиОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	СотрудникиКлиентВнутренний.СотрудникиОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

Процедура СотрудникиПередЗаписью(Форма, Отказ, ПараметрыЗаписи, ОповещениеЗавершения = Неопределено, ЗакрытьПослеЗаписи = Истина) Экспорт
	
	СотрудникиКлиентВнутренний.СотрудникиПередЗаписью(Форма, Отказ, ПараметрыЗаписи, ОповещениеЗавершения, ЗакрытьПослеЗаписи);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы ФизическогоЛица

Процедура ФизическиеЛицаОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	СотрудникиКлиентВнутренний.ФизическиеЛицаОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

Процедура ФизическиеЛицаПередЗаписью(Форма, Отказ, ПараметрыЗаписи) Экспорт
	
	СохранитьДанныеФорм(Форма, Отказ);
	СотрудникиКлиентВнутренний.ФизическиеЛицаПередЗаписью(Форма, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

Процедура ФизическиеЛицаПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	ЛичныеДанныеФизическогоЛицаПослеЗаписи(Форма, Форма.ФизическоеЛицоСсылка);
	
	ФизическоеЛицо = Форма.ФизическоеЛицо;
	ОповеститьОбИзмененииДанныхФизическогоЛица(Форма, ФизическоеЛицо);
	
	Форма.ВыполненаКомандаСменыФИО = Ложь;
	Форма.Элементы.ФИО.ТолькоПросмотр = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры

Процедура ОповеститьОбИзмененииДанныхФизическогоЛица(Форма, ФизическоеЛицо)
	
	ДанныеФизическогоЛица = Новый Структура;
	ДанныеФизическогоЛица.Вставить("ФизическоеЛицо", ФизическоеЛицо.Ссылка);
	ДанныеФизическогоЛица.Вставить("Фамилия", "");
	ДанныеФизическогоЛица.Вставить("Имя", "");
	ДанныеФизическогоЛица.Вставить("Отчество", "");
	ДанныеФизическогоЛица.Вставить("Пол", ФизическоеЛицо.Пол);
	ДанныеФизическогоЛица.Вставить("ДатаРождения", ФизическоеЛицо.ДатаРождения);
	ДанныеФизическогоЛица.Вставить("МестоРождения", ФизическоеЛицо.МестоРождения);
	ДанныеФизическогоЛица.Вставить("МестоРожденияПредставление", "");
	ДанныеФизическогоЛица.Вставить("Гражданство", "");
	ДанныеФизическогоЛица.Вставить("КодПоДРФО", ФизическоеЛицо.КодПоДРФО);
	ДанныеФизическогоЛица.Вставить("ВидДокумента");
	ДанныеФизическогоЛица.Вставить("Серия", "");
	ДанныеФизическогоЛица.Вставить("Номер", "");
	ДанныеФизическогоЛица.Вставить("КемВыдан", "");
	ДанныеФизическогоЛица.Вставить("ДатаВыдачи", '00010101');
	ДанныеФизическогоЛица.Вставить("КодПодразделения", "");
	ДанныеФизическогоЛица.Вставить("ПредставлениеДокумента", "");
	ДанныеФизическогоЛица.Вставить("АдресРегистрации", "");
	ДанныеФизическогоЛица.Вставить("АдресРегистрацииПредставление", "");
	ДанныеФизическогоЛица.Вставить("АдресФактический", "");
	ДанныеФизическогоЛица.Вставить("АдресФактическийПредставление", "");
	ДанныеФизическогоЛица.Вставить("АдресДляИнформирования", "");
	ДанныеФизическогоЛица.Вставить("АдресДляИнформированияПредставление", "");
	ДанныеФизическогоЛица.Вставить("ИностранныйАдрес", "");
	ДанныеФизическогоЛица.Вставить("Телефоны", "");
	ДанныеФизическогоЛица.Вставить("ТелефонРабочий", "");
										
	Если Форма.ДоступенПросмотрДанныхФизическихЛиц Тогда
											
		ДанныеФизическогоЛица.Фамилия 		= Форма.ФИОФизическихЛиц.Фамилия;
		ДанныеФизическогоЛица.Имя 			= Форма.ФИОФизическихЛиц.Имя;
		ДанныеФизическогоЛица.Отчество 		= Форма.ФИОФизическихЛиц.Отчество;
		ДанныеФизическогоЛица.Гражданство 	= Форма.ГражданствоФизическихЛиц.Страна;

		ДанныеФизическогоЛица.ВидДокумента 	= Форма.ДокументыФизическихЛиц.ВидДокумента;
		ДанныеФизическогоЛица.Серия 		= Форма.ДокументыФизическихЛиц.Серия;
		ДанныеФизическогоЛица.Номер 		= Форма.ДокументыФизическихЛиц.Номер;
		ДанныеФизическогоЛица.КемВыдан 		= Форма.ДокументыФизическихЛиц.КемВыдан;
		ДанныеФизическогоЛица.ДатаВыдачи 	= Форма.ДокументыФизическихЛиц.ДатаВыдачи;
		ДанныеФизическогоЛица.КодПодразделения 	= Форма.ДокументыФизическихЛиц.КодПодразделения;
		ДанныеФизическогоЛица.ПредставлениеДокумента 	= Форма.ДокументыФизическихЛиц.Представление;
		
	КонецЕсли;
										
	СтруктураОтбора = Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица"));
	
	СтрокиАдреса = ФизическоеЛицо.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
	
	Если СтрокиАдреса.Количество() > 0 Тогда
		ДанныеФизическогоЛица.АдресРегистрации = СтрокиАдреса[0].ЗначенияПолей;
		ДанныеФизическогоЛица.АдресРегистрацииПредставление = СтрокиАдреса[0].Представление;	
	КонецЕсли;	
	
	СтруктураОтбора = Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица"));
	
	СтрокиАдреса = ФизическоеЛицо.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
	
	Если СтрокиАдреса.Количество() > 0 Тогда
		ДанныеФизическогоЛица.АдресФактический = СтрокиАдреса[0].ЗначенияПолей;
		ДанныеФизическогоЛица.АдресФактическийПредставление = СтрокиАдреса[0].Представление;	
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица"));
	
	СтрокиАдреса = ФизическоеЛицо.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
	
	Если СтрокиАдреса.Количество() > 0 Тогда
		ДанныеФизическогоЛица.АдресДляИнформирования = СтрокиАдреса[0].ЗначенияПолей;
		ДанныеФизическогоЛица.АдресДляИнформированияПредставление = СтрокиАдреса[0].Представление;	
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица"));

	СтрокиАдреса = ФизическоеЛицо.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
	
	Если СтрокиАдреса.Количество() > 0 Тогда
		ДанныеФизическогоЛица.Телефоны = СтрокиАдреса[0].Представление;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Вид", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица"));

	СтрокиАдреса = ФизическоеЛицо.КонтактнаяИнформация.НайтиСтроки(СтруктураОтбора);
	
	Если СтрокиАдреса.Количество() > 0 Тогда
		ДанныеФизическогоЛица.ТелефонРабочий = СтрокиАдреса[0].Представление;
	КонецЕсли;
	

	ДанныеФизическогоЛица.МестоРожденияПредставление = КадровыйУчетКлиентСервер.ПредставлениеМестаРождения(ФизическоеЛицо.МестоРождения);

	Оповестить("ИзменениеДанныхФизическогоЛица", ДанныеФизическогоЛица, ФизическоеЛицо.Ссылка);
	
КонецПроцедуры

Функция ЗаблокироватьФизическоеЛицоПриРедактировании(Форма, СообщатьОНевозможностиБлокировки = Истина) Экспорт
	Если НЕ Форма.ФизическоеЛицоЗаблокировано Тогда
		Если НЕ СотрудникиВызовСервера.ЗаблокироватьФизическоеЛицоПриРедактированииНаСервере(Форма.ФизическоеЛицоСсылка, Форма.ФизическоеЛицоВерсияДанных, Форма.УникальныйИдентификатор) Тогда
			Если СообщатьОНевозможностиБлокировки Тогда
				ПоказатьПредупреждение(,НСтр("ru='Не удается внести изменения в личные данные сотрудника. Возможно, личные данные сотрудника редактируются другим пользователем.';uk='Не вдається внести зміни в особисті дані співробітника. Можливо, особисті дані співробітника редагуються іншим користувачем.'"));
			КонецЕсли; 
			// заблокировать не удалось - обновить данные физлица
			Форма.ПрочитатьДанныеСвязанныеСФизлицом();
			Возврат Ложь;
		Иначе
			Форма.ФизическоеЛицоЗаблокировано = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Процедура СформироватьНаименованиеСотрудника(Форма) Экспорт
	Форма.Сотрудник.Наименование = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(Форма.ФИОФизическихЛиц.Фамилия, Форма.ФИОФизическихЛиц.Имя, Форма.ФИОФизическихЛиц.Отчество, Форма.ФизическоеЛицо.УточнениеНаименования, Форма.Сотрудник.УточнениеНаименования);
	Форма.СотрудникНаименование  = Форма.Сотрудник.Наименование;
	ИзменитьНаименованиеФизическогоЛица(Форма);
	Форма.Заголовок = СотрудникиКлиентСервер.ЗаголовокФормыСотрудника(Форма);
	Оповестить("ИзмененЗаголовокФормыСотрудника", Форма.Заголовок, Форма);
КонецПроцедуры

Процедура ИзменитьНаименованиеФизическогоЛица(Форма)
	Форма.ФизическоеЛицо.Наименование = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(Форма.ФИОФизическихЛиц.Фамилия, Форма.ФИОФизическихЛиц.Имя, Форма.ФИОФизическихЛиц.Отчество, Форма.ФизическоеЛицо.УточнениеНаименования);
КонецПроцедуры

Процедура СформироватьНаименованиеФизическогоЛица(Форма) Экспорт
	ИзменитьНаименованиеФизическогоЛица(Форма);
	Форма.Заголовок = СотрудникиКлиентСервер.ЗаголовокФормыФизическогоЛица(Форма);
	Оповестить("ИзмененЗаголовокФормыСотрудника", Форма.Заголовок, Форма);
КонецПроцедуры

Процедура ДополнитьПредставлениеСотрудникаПриИзменении(Форма) Экспорт
	СотрудникиКлиентСервер.УстановитьДоступностьУточненияНаименования(Форма);
	Если НЕ Форма.ДополнятьПредставление Тогда
		Форма.Сотрудник.УточнениеНаименования = "";
	КонецЕсли;
	СформироватьНаименованиеСотрудника(Форма);
КонецПроцедуры

Процедура ДополнитьПредставлениеФизическогоЛицаПриИзменении(Форма) Экспорт
	СотрудникиКлиентСервер.УстановитьДоступностьУточненияНаименования(Форма);
	Если НЕ Форма.ДополнятьПредставление Тогда
		Форма.ФизическоеЛицо.УточнениеНаименования = "";
	КонецЕсли;
	СформироватьНаименованиеФизическогоЛица(Форма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции обслуживания личных данных физического лица

Процедура ЛичныеДанныеФизическогоЛицаПослеЗаписи(Форма, ФизическоеЛицоСсылка)
	
	Если Форма.ИзмененыЛичныеДанные Тогда
		
		Оповестить("ИзменениеЛичныхДанных", ФизическоеЛицоСсылка, Форма);
		Форма.ИзмененыЛичныеДанные = Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ЛичныеДанныеФизическогоЛицаОбработкаОповещения(ИмяСобытия, Параметр, Источник, Форма) Экспорт
	
	Если ИмяСобытия = "ИзменениеЛичныхДанных"
		И Параметр = Форма.ФизическоеЛицоСсылка
		И Источник <> Форма Тогда
		
		Форма.Прочитать();
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура СотрудникиДРФОПриИзменении(Форма, Элемент) Экспорт
	ЗаблокироватьФизическоеЛицоПриРедактировании(Форма); 
	ФизическиеЛицаДРФОПриИзменении(Форма, Элемент);
КонецПроцедуры


Процедура ФизическиеЛицаДРФОПриИзменении(Форма, Элемент) Экспорт
	СотрудникиКлиентВнутренний.ФизическиеЛицаДРФОПриИзменении(Форма, Элемент);
КонецПроцедуры


Процедура ФизическиеЛицаМестоРожденияНачалоВыбора(Форма, Элемент, СтандартнаяОбработка, МестоРождения, ОповещениеЗавершения = Неопределено) Экспорт	
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Представление", МестоРождения);
	
	Оповещение = Новый ОписаниеОповещения("ФизическиеЛицаМестоРожденияНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВводМестаРождения", ПараметрыФормы, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

Процедура ФизическиеЛицаМестоРожденияНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт	
	
	Если Результат <> Неопределено Тогда
		
		Форма = ДополнительныеПараметры.Форма;
		Элемент = ДополнительныеПараметры.Элемент;
		ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
		
		Форма.ФизическоеЛицо.МестоРождения = Результат;
		Форма[Элемент.Имя] = КадровыйУчетКлиентСервер.ПредставлениеМестаРождения(Результат);
		Форма.Модифицированность = Истина;

		Если ОповещениеЗавершения <> Неопределено Тогда
			МестоРожденияИзменено = Результат <> Неопределено;
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, МестоРожденияИзменено);
		Иначе
			Форма.ОбновитьОтображениеДанных();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Процедуры обслуживания данных о ФИО

Процедура ПриИзмененииФИО(Форма, ФизическоеЛицо, МенеджерЗаписиФИО)
	
	СтруктураФИО = ФизическиеЛицаКлиентСервер.ФамилияИмяОтчество(ФизическоеЛицо.ФИО);
	Если СтруктураФИО.Фамилия <> Неопределено Тогда
		МенеджерЗаписиФИО.Фамилия  = СтруктураФИО.Фамилия;
		Если СтруктураФИО.Имя <> Неопределено Тогда
			МенеджерЗаписиФИО.Имя = СтруктураФИО.Имя;
		КонецЕсли;
		Если СтруктураФИО.Отчество <> Неопределено Тогда
			МенеджерЗаписиФИО.Отчество = СтруктураФИО.Отчество;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(МенеджерЗаписиФИО.Период) Тогда
			Если ЗначениеЗаполнено(ФизическоеЛицо.ДатаРождения) Тогда
				МенеджерЗаписиФИО.Период = ФизическоеЛицо.ДатаРождения;
			Иначе
				МенеджерЗаписиФИО.Период = '19800101';
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(МенеджерЗаписиФИО.Отчество) И Не ЗначениеЗаполнено(ФизическоеЛицо.Пол) Тогда
			ФизическоеЛицо.Пол = ФизическиеЛицаКлиент.ОпределитьПолПоОтчеству(МенеджерЗаписиФИО.Отчество);
		КонецЕсли;
	КонецЕсли;
	
	СформироватьНаименованиеФизическогоЛица(Форма);
	
	СотрудникиКлиентСервер.УстановитьВидимостьПолейФИО(Форма);
	
КонецПроцедуры

Процедура УстановитьТолькоПросмотрФИО(Элемент, ИзменениеЗаднимЧислом, ПериодНачалаДействия, ПериодОкончанияДействия) 
	Если ИзменениеЗаднимЧислом Тогда 
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Изменение ФИО выполнено ""задним числом"". Введенное данные действуют с %1 по %2.
|Редактирование ФИО непосредственно в форме сейчас недоступно и будет доступно только после записи.';uk='Зміна ПІБ виконана ""заднім числом"". Введені дані діють з %1 до %2.
|Редагування ПІБ безпосередньо у формі зараз недоступне і буде доступне тільки після запису.'"),
																					  Формат(ПериодНачалаДействия, "ДФ=дд.ММ.гггг"),
																					  Формат(ПериодОкончанияДействия, "ДФ=дд.ММ.гггг"));
		ПоказатьПредупреждение(,ТекстПредупреждения);
		
		Элемент.ТолькоПросмотр = Истина;
		
	КонецЕсли;	
КонецПроцедуры	

Процедура ИзменитьФИОФизическогоЛица(Форма, ОповещениеЗавершения = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура("Форма, ОповещениеЗавершения", Форма, ОповещениеЗавершения);
	
	СтруктураФИО = ФизическиеЛицаКлиентСервер.ФамилияИмяОтчество(Форма.ФизическоеЛицо.ФИО);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Фамилия", ?(СтруктураФИО.Фамилия = Неопределено, "", СтруктураФИО.Фамилия));
	ПараметрыФормы.Вставить("Имя", ?(СтруктураФИО.Имя = Неопределено, "", СтруктураФИО.Имя));
	ПараметрыФормы.Вставить("Отчество", ?(СтруктураФИО.Отчество = Неопределено, "", СтруктураФИО.Отчество));
	ПараметрыФормы.Вставить("ДатаИзменения", ЗарплатаКадрыКлиентСервер.ДатаСеанса());

	Оповещение = Новый ОписаниеОповещения("ИзменитьФИОФизическогоЛицаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.СменаФИО", ПараметрыФормы, Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ИзменитьФИОФизическогоЛицаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	МенеджерЗаписиФИО = Форма.ФИОФизическихЛиц;
	
	Если Результат <> Неопределено Тогда
		// нажали ОК
		Если Результат.ДатаИзменения >= МенеджерЗаписиФИО.Период Тогда
			// изменим имя только если это - хронологически последняя запись регистра ФИО
			НовоеНаименование = Результат.Фамилия + " " + Результат.Имя + " " + Результат.Отчество;
		Иначе
			// вернем прежнее имя если это - ввод хронологически не последней записи регистра ФИО
			НовоеНаименование = МенеджерЗаписиФИО.Фамилия + " " + МенеджерЗаписиФИО.Имя + " " + МенеджерЗаписиФИО.Отчество;
		КонецЕсли;
		
		Результат.Вставить("НовоеНаименование", НовоеНаименование);
		Результат.Вставить("ИзменениеЗаднимЧислом", Результат.ДатаИзменения < МенеджерЗаписиФИО.Период);
		Результат.Вставить("ДатаТекущейЗаписи", МенеджерЗаписиФИО.Период);
		
		МенеджерЗаписиФИО.Фамилия = Результат.Фамилия;
		МенеджерЗаписиФИО.Имя = Результат.Имя;
		МенеджерЗаписиФИО.Отчество = Результат.Отчество;
		МенеджерЗаписиФИО.Период = Результат.ДатаИзменения;
		
		Форма.ВыполненаКомандаСменыФИО = Истина;
		Форма.ФИОФизическихЛицНоваяЗапись = Истина;
		Форма.Модифицированность = Истина;
		
		Если ОповещениеЗавершения <> Неопределено Тогда 
		    ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Результат);
		КонецЕсли;
		
	Иначе
			
		Форма.ФИОФизическихЛицНоваяЗапись = Ложь;
		Если ОповещениеЗавершения <> Неопределено Тогда 
		    ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Результат);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьФИОСотрудника(Форма, ОповещениеЗавершения = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура("Форма, ОповещениеЗавершения", Форма, ОповещениеЗавершения);
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьФИОСотрудникаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ИзменитьФИОФизическогоЛица(Форма, Оповещение);
	
КонецПроцедуры

Процедура ИзменитьФИОСотрудникаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	Если Результат <> Неопределено Тогда
		Если Форма.ФизическоеЛицо.ФИО <> Результат.НовоеНаименование Тогда
			Если Не Результат.ИзменениеЗаднимЧислом И ЗаблокироватьФизическоеЛицоПриРедактировании(Форма) Тогда
				Форма.ФизическоеЛицо.ФИО = Результат.НовоеНаименование;
				СформироватьНаименованиеСотрудника(Форма);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Результат);
	КонецЕсли;
	
КонецПроцедуры


Процедура ПриИзмененииФИОФизическогоЛица(Форма) Экспорт
	
	ПриИзмененииФИО(Форма, Форма.ФизическоеЛицо, Форма.ФИОФизическихЛиц);
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		// при создании нового физического лица попробуем проверить по введенным ФИО
		// существующее физическое лицо
		ПроверитьОднофамильцев(Форма, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииФИОСотрудника(Форма) Экспорт
	
	Если НЕ ЗаблокироватьФизическоеЛицоПриРедактировании(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииФИО(Форма, Форма.ФизическоеЛицо, Форма.ФИОФизическихЛиц);
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		// при создании нового сотрудника попробуем подобрать по введенным ФИО
		// существующее физическое лицо
		ПроверитьОднофамильцев(Форма, Истина);
	КонецЕсли;
	
	СформироватьНаименованиеСотрудника(Форма);
	
КонецПроцедуры

Процедура УстановитьФизическоеЛицоВФормеСотрудника(Форма, ФизическоеЛицоСсылка) Экспорт
	Если ФизическоеЛицоСсылка <> Неопределено Тогда
		Если НЕ ФизическоеЛицоСсылка.Пустая() Тогда
			Форма.Сотрудник.ФизическоеЛицо = ФизическоеЛицоСсылка;
			Форма.ФизическоеЛицоСсылка     = ФизическоеЛицоСсылка;
			Форма.ОбновитьДанныеФизическогоЛицаНаСервере();
			СформироватьНаименованиеСотрудника(Форма);
			СотрудникиКлиентСервер.УстановитьВидЗанятостиНовогоСотрудника(Форма);
			СотрудникиКлиентСервер.ЗаполнитьИнфоГруппыДоступа(Форма);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьОднофамильцев(Форма, ИзФормыСотрудника, ОповещениеЗавершения = Неопределено)
	
	Если Форма.ДРФОУказанПравильно Тогда
		
		Если СотрудникиВызовСервера.ДРФОУникальны(Форма.ФизическоеЛицо.КодПоДРФО) Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;
	
	СтруктураПроверкиОднофамильцев = СотрудникиВызовСервера.ПодобратьСписокФизЛиц(
		Форма.ФизическоеЛицоСсылка,
		Форма.ФИОФизическихЛиц.Фамилия,
		Форма.ФИОФизическихЛиц.Имя,
		Форма.ФИОФизическихЛиц.Отчество);
		
	ДополнительныеПараметры = Новый Структура;	
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ИзФормыСотрудника", ИзФормыСотрудника);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
		
	Если НЕ СтруктураПроверкиОднофамильцев.ФизическоеЛицоУникально Тогда
		
		Если СтруктураПроверкиОднофамильцев.ДанныеФизическихЛицДоступны Тогда
			
			ПараметрыОткрытия = Новый Структура("ЗаголовокФормы,ТекстИнформационнойНадписи,ДанныеФизическихЛиц");
			
			Если СтруктураПроверкиОднофамильцев.ДанныеФизическихЛиц.Количество() = 1 Тогда
				ПараметрыОткрытия.ЗаголовокФормы = НСтр("ru='Найден человек с похожим именем.';uk=""Знайдена людина зі схожим ім'ям.""");
				ПараметрыОткрытия.ТекстИнформационнойНадписи = 
					НСтр("ru='Если вы принимаете на работу того же человека (например, при повторном приеме на работу) нажмите ""Да, это тот, кто мне нужен"".
|Если это однофамилец, нажмите ""Нет, это другой человек"".';uk='Якщо ви приймаєте на роботу ту ж людину (наприклад, 
|при повторному прийомі на роботу) натисніть ""Так, це той, хто мені потрібен"". Якщо це однофамілець, натисніть ""Ні, це інша людина"".'");
			Иначе
				ПараметрыОткрытия.ЗаголовокФормы = НСтр("ru='Найдены люди с похожими именами.';uk='Знайдені люди зі схожими іменами.'");
				ПараметрыОткрытия.ТекстИнформационнойНадписи = 
					НСтр("ru='Если вы принимаете на работу одного из приведенных в списке людей (например, при повторном приеме на работу), выберите его и нажмите ""Отмеченный человек тот, кто мне нужен"".
|Если это однофамилец, нажмите ""Нет, это другой человек"".';uk='Якщо ви приймаєте на роботу одного з наведених в списку людей (наприклад, при повторному прийомі на роботу), виділіть його та натисніть ""Зазначена людина та, яка мені потрібна"".
|Якщо це однофамілець, натисніть ""Ні, це інша людина"".'");
			КонецЕсли;
			
			ПараметрыОткрытия.ДанныеФизическихЛиц = СтруктураПроверкиОднофамильцев.ДанныеФизическихЛиц;
			
			Оповещение = Новый ОписаниеОповещения("ПроверитьОднофамильцевДанныеФизическихЛиц", ЭтотОбъект, ДополнительныеПараметры);
			ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФизическиеЛицаСПохожимиДанными", ПараметрыОткрытия, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			
			Если СтруктураПроверкиОднофамильцев.ВозможнаПроверкаПоДРФО Тогда
				
				ПараметрыОткрытия = Новый Структура("Фамилия,Имя,Отчество,ВозможнаПроверкаПоДРФО");
				
				ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, СтруктураПроверкиОднофамильцев);
				
				ПараметрыОткрытия.Фамилия = Форма.ФИОФизическихЛиц.Фамилия;
				ПараметрыОткрытия.Имя = Форма.ФИОФизическихЛиц.Имя;
				ПараметрыОткрытия.Отчество = Форма.ФИОФизическихЛиц.Отчество;
				
				Оповещение = Новый ОписаниеОповещения("ПроверитьОднофамильцевДРФО", ЭтотОбъект, ДополнительныеПараметры);
				ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ПроверкаУникальностиПоДРФО", ПараметрыОткрытия, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
			Иначе
				
				ТекстПредупреждения = НСтр("ru='Найден человек с похожим именем.
|Обратитесь к администратору информационной системы для устранения проблемы.';uk=""Знайдена людина зі схожим ім'ям.
|Зверніться до адміністратора інформаційної системи для усунення проблеми.""");
					
				ПоказатьПредупреждение(,ТекстПредупреждения);
				Форма.Модифицированность = Ложь;
				Форма.Закрыть();
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОднофамильцевДанныеФизическихЛиц(РезультатВыбора, ДополнительныеПараметры) Экспорт 
	
	Форма = ДополнительныеПараметры.Форма;
	ИзФормыСотрудника = ДополнительныеПараметры.ИзФормыСотрудника;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	Если РезультатВыбора <> Неопределено Тогда
		
		Если ИзФормыСотрудника Тогда
			УстановитьФизическоеЛицоВФормеСотрудника(Форма, РезультатВыбора);
		Иначе
			Форма.Модифицированность = Ложь;
			Форма.Закрыть();
			
			ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", Новый Структура("Ключ", РезультатВыбора));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьОднофамильцевДРФО(РезультатПроверки, ДополнительныеПараметры) Экспорт 
	
	Форма = ДополнительныеПараметры.Форма;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	Если РезультатПроверки = Неопределено Тогда
		
		ТекстПредупреждения = НСтр("ru='Проверка уникальности не пройдена.
|Обратитесь к администратору информационной системы для устранения проблемы.';uk='Перевірка унікальності не пройдена.
|Зверніться до адміністратора інформаційної системи для усунення проблеми.'");
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Форма.Модифицированность = Ложь;
		Форма.Закрыть();
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(Форма.ФизическоеЛицо, РезультатПроверки);
		
	КонецЕсли;
	
	Если ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры


Процедура СотрудникИзменилФИОНажатие(Форма) Экспорт
	
	ДополнительныеПараметры = Новый Структура("Форма", Форма);
	
	Оповещение = Новый ОписаниеОповещения("СотрудникИзменилФИОНажатиеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ИзменитьФИОСотрудника(Форма, Оповещение);
	
КонецПроцедуры

Процедура СотрудникИзменилФИОНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если Результат <> Неопределено Тогда 
		УстановитьТолькоПросмотрФИО(Форма.Элементы.ФИО, Результат.ИзменениеЗаднимЧислом, Форма.ФИОФизическихЛиц.Период, Результат.ДатаТекущейЗаписи);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ФизическоеЛицоИзменилФИОНажатие(Форма) Экспорт
	
	ДополнительныеПараметры = Новый Структура("Форма", Форма);
	
	Оповещение = Новый ОписаниеОповещения("ФизическоеЛицоИзменилФИОНажатиеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ИзменитьФИОФизическогоЛица(Форма, Оповещение);
	
КонецПроцедуры

Процедура ФизическоеЛицоИзменилФИОНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если Результат <> Неопределено Тогда
		Если Не Результат.ИзменениеЗаднимЧислом Тогда
			Форма.ФизическоеЛицо.ФИО = Результат.НовоеНаименование;
			СформироватьНаименованиеФизическогоЛица(Форма);
		КонецЕсли; 
		УстановитьТолькоПросмотрФИО(Форма.Элементы.ФИО, Результат.ИзменениеЗаднимЧислом, Форма.ФИОФизическихЛиц.Период, Результат.ДатаТекущейЗаписи);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Управление отображением и доступностью документа удостоверяющего личность

Процедура ДокументыФизическихЛицВидДокументаПриИзменении(Форма) Экспорт
	СотрудникиКлиентВнутренний.ДокументыФизическихЛицВидДокументаПриИзменении(Форма);
КонецПроцедуры

Процедура ДокументыФизическихЛицСерияПриИзменении(Форма, Элемент) Экспорт
	СотрудникиКлиентВнутренний.ДокументыФизическихЛицСерияПриИзменении(Форма, Элемент);
КонецПроцедуры

Процедура ДокументыФизическихЛицНомерПриИзменении(Форма, Элемент) Экспорт
	СотрудникиКлиентВнутренний.ДокументыФизическихЛицНомерПриИзменении(Форма, Элемент);
КонецПроцедуры

Процедура ДокументыФизическихЛицВидДокументаНачалоВыбора(Форма, Элемент, СтандартнаяОбработка) Экспорт
	Если НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.ВидДокумента) Тогда
		Форма.ДокументыФизическихЛиц.ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.Паспорт");
	КонецЕсли; 
КонецПроцедуры

Процедура ОткрытьСписокВсехДокументовФизическогоЛица(Форма, ФизическоеЛицоСсылка) Экспорт
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Физлицо", ФизическоеЛицоСсылка);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Отбор", СтруктураОтбора);
	ОткрытьФорму("РегистрСведений.ДокументыФизическихЛиц.Форма.ДокументыФизическогоЛица", ПараметрыОткрытияФормы, Форма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проверка модифицированности гражданства, инвалидности, удостоверения личности

Процедура ЗапроситьРежимИзмененияГражданства(ФормаИсточник, ДатаИзменения, Отказ) Экспорт
	Если ФормаИсточник.ДоступенПросмотрДанныхФизическихЛиц Тогда
		ТекстКнопкиДа = НСтр("ru='Изменилось гражданство';uk='Змінилося громадянство'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='При редактировании изменены сведения о гражданстве. 
|Если исправлена прежняя запись о гражданстве (она была ошибочной), нажмите ""Исправлена ошибка"".
|Если у сотрудника изменилось гражданство с %1, нажмите ""%2""';uk='При редагуванні змінені відомості про громадянство. 
|Якщо виправлений колишній запис про громадянство (він був помилковим), натисніть ""Виправлена помилка"".
|Якщо у співробітника змінилося громадянство з %1, натисніть ""%2""'"), 
				Формат(ДатаИзменения, "ДФ='д ММММ гггг ""г""'"),
				ТекстКнопкиДа);
		
		РедактированиеПериодическихСведенийКлиент.ЗапроситьРежимИзмененияРегистра(ФормаИсточник, "ГражданствоФизическихЛиц", ТекстВопроса, ТекстКнопкиДа, Отказ);
	КонецЕсли; 
КонецПроцедуры

Процедура ЗапроситьРежимИзмененияУдостоверенияЛичности(ФормаИсточник, ДатаИзменения, Отказ) Экспорт
	Если ФормаИсточник.ДоступенПросмотрДанныхФизическихЛиц Тогда
		ТекстКнопкиДа = НСтр("ru='Изменился документ, удостоверяющий личность';uk='Змінився документ, що посвідчує особу'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='При редактировании изменены сведения о документе, удостоверяющем личность.
|Если исправлена прежняя запись о документе (она была ошибочной), нажмите ""Исправлена ошибка"".
|Если у сотрудника изменился документ, удостоверяющий личность с %1, нажмите';uk='При редагуванні змінені відомості про документ, що засвідчує особу.
|Якщо виправлений колишній запис про документ (він був помилковим), натисніть ""Виправлена помилка"".
|Якщо у співробітника змінився документ, що засвідчує особу з %1, натисніть'") + " ""%2""",
				Формат(ДатаИзменения, "ДФ='д ММММ гггг ""г""'"),
				ТекстКнопкиДа);
		
		РедактированиеПериодическихСведенийКлиент.ЗапроситьРежимИзмененияРегистра(ФормаИсточник, "ДокументыФизическихЛиц", ТекстВопроса, ТекстКнопкиДа, Отказ);
	КонецЕсли; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Просмотр истории

Процедура СотрудникиОткрытьФормуРедактированияИстории(ИмяРегистра, Форма) Экспорт
	ФизлицоЗаблокировано = ЗаблокироватьФизическоеЛицоПриРедактировании(Форма, Ложь);
	Если ИмяРегистра = "ДокументыФизическихЛиц" Тогда
		СотрудникиКлиентСервер.ОбновитьНаборЗаписейИсторииДокументыФизическихЛиц(Форма, Форма.ФизическоеЛицоСсылка);
	КонецЕсли;
	РедактированиеПериодическихСведенийКлиент.ОткрытьИсторию(ИмяРегистра, Форма.ФизическоеЛицоСсылка, Форма, Форма.ТолькоПросмотр ИЛИ НЕ ФизлицоЗаблокировано);
КонецПроцедуры

Процедура ОткрытьФормуРедактированияИстории(ИмяРегистра, ВедущийОбъект, Форма) Экспорт
	ТолькоПросмотрИстории = Форма.ТолькоПросмотр;
	Если Не ТолькоПросмотрИстории Тогда
		Попытка
			Форма.ЗаблокироватьДанныеФормыДляРедактирования();
			ТолькоПросмотрИстории = Ложь;
		Исключение
			ТолькоПросмотрИстории = Истина;
		КонецПопытки
	КонецЕсли; 
	Если ИмяРегистра = "ДокументыФизическихЛиц" Тогда
		СотрудникиКлиентСервер.ОбновитьНаборЗаписейИсторииДокументыФизическихЛиц(Форма, ВедущийОбъект);
	КонецЕсли;
	РедактированиеПериодическихСведенийКлиент.ОткрытьИсторию(ИмяРегистра, ВедущийОбъект, Форма, ТолькоПросмотрИстории);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры обработки контактной информации

Процедура КонтактнаяИнформацияПриИзменении(Форма, Элемент) Экспорт
	
	УправлениеКонтактнойИнформациейКлиент.ПредставлениеПриИзменении(Форма, Элемент);

КонецПроцедуры

Процедура КонтактнаяИнформацияНачалоВыбора(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	Результат = УправлениеКонтактнойИнформациейКлиент.ПредставлениеНачалоВыбора(Форма, Элемент, Форма.Модифицированность, СтандартнаяОбработка);
	Форма.ОбновитьКонтактнуюИнформацию(Результат);
	
	КоллекцияПолейКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	МассивЭлементовКОбновлению = Новый Массив;
	МассивЭлементовКОбновлению.Добавить(Элемент);
	
	Если КоллекцияПолейКонтактнойИнформации <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("ИмяРеквизита", Элемент.Имя);
		СтрокаТекущегоАдреса = КоллекцияПолейКонтактнойИнформации.НайтиСтроки(СтруктураПоиска)[0];
		
		Если НЕ ПустаяСтрока(СтрокаТекущегоАдреса.ЗначенияПолей) 
			И СтрокаТекущегоАдреса.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица")
			ИЛИ СтрокаТекущегоАдреса.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица") Тогда
			
			Для каждого ЭлементКонтактнойИнформации Из КоллекцияПолейКонтактнойИнформации Цикл
				
				Если ЭлементКонтактнойИнформации.Тип <> ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") 
					ИЛИ НЕ ПустаяСтрока(ЭлементКонтактнойИнформации.ЗначенияПолей)
					Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если ЭлементКонтактнойИнформации.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица") Тогда
					
					Если СтрокаТекущегоАдреса.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица") Тогда
						ЭлементКонтактнойИнформации.ЗначенияПолей = СтрокаТекущегоАдреса.ЗначенияПолей;
						Форма[ЭлементКонтактнойИнформации.ИмяРеквизита] = Форма[СтрокаТекущегоАдреса.ИмяРеквизита];
						МассивЭлементовКОбновлению.Добавить(Форма.Элементы[ЭлементКонтактнойИнформации.ИмяРеквизита]);
					КонецЕсли; 
					
				ИначеЕсли ЭлементКонтактнойИнформации.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица") Тогда
					
					ЭлементКонтактнойИнформации.ЗначенияПолей = СтрокаТекущегоАдреса.ЗначенияПолей;
					Форма[ЭлементКонтактнойИнформации.ИмяРеквизита] = Форма[СтрокаТекущегоАдреса.ИмяРеквизита];
					МассивЭлементовКОбновлению.Добавить(Форма.Элементы[ЭлементКонтактнойИнформации.ИмяРеквизита]);
					
				КонецЕсли; 
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры обработки информации о местах работы

Процедура ОткрытьФормуСпискаМестРаботыФизическогоЛица(ФизическоеЛицо, Владелец) Экспорт
	
	Отбор = Новый Структура("ФизическоеЛицо", ФизическоеЛицо);
	
	ОткрытьФорму("Справочник.Сотрудники.ФормаСписка", Новый Структура("Отбор", Отбор), Владелец); 
	
КонецПроцедуры	

Процедура ОткрытьМестоРаботы(Форма) Экспорт
	
	ПараметрыСотрудника = Новый Структура("ФизическоеЛицо", Форма.ФизическоеЛицоСсылка);
	
	ОткрытьФорму("Справочник.Сотрудники.ФормаОбъекта", ПараметрыСотрудника);
	
КонецПроцедуры

Процедура ОткрытьФормуСотрудника(Форма, Команда) Экспорт 
	
	СоответствиеКомандСотрудникам = Форма.СоответствиеКомандСотрудникам;
	
	Сотрудник = СоответствиеКомандСотрудникам.Получить(Команда.Имя);
	Если Сотрудник <> Неопределено Тогда 
		
		Параметры = Новый Структура("Ключ", Сотрудник);
		ОткрытьФорму("Справочник.Сотрудники.ФормаОбъекта", Параметры);
		
	КонецЕсли;	
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Механизм встраивания форм

Процедура ЗарегистрироватьОткрытиеФормы(Форма, ИмяФормы) Экспорт
	
	Если ТипЗнч(Форма.ВладелецФормы.ОткрытыеФормы) <> Тип("Соответствие") Тогда
		Форма.ВладелецФормы.ОткрытыеФормы = Новый Соответствие;
	КонецЕсли; 
	
	Форма.Заголовок = Форма.ВладелецФормы.Заголовок;
	Форма.ВладелецФормы.ОткрытыеФормы.Вставить(ИмяФормы, Форма);
	
КонецПроцедуры

Процедура СохранитьДанныеФорм(Форма, Отказ)
	
	Если НЕ Форма.Параметры.Ключ.Пустая()
		И ТипЗнч(Форма.ОткрытыеФормы) = Тип("Соответствие") Тогда
		
		Для каждого ОткрытаяФорма Из Форма.ОткрытыеФормы Цикл
			Если ОткрытаяФорма.Значение.Модифицированность Тогда
				ОткрытаяФорма.Значение.СохранитьДанные(Отказ);
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНеобходимостьЗаписи(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если НЕ Форма.Модифицированность Тогда
		
		Форма.Активизировать();
		МодифицированностьДанных = Ложь;
		Если ТипЗнч(Форма.ОткрытыеФормы) = Тип("Соответствие") Тогда
			
			Для каждого ОткрытаяФорма Из Форма.ОткрытыеФормы Цикл
				
				МодифицированностьДанных = ОткрытаяФорма.Значение.Модифицированность;
				Если МодифицированностьДанных Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если МодифицированностьДанных Тогда
			
			ТекстВопроса = НСтр("ru='Данные были изменены. Сохранить изменения?';uk='Дані були змінені. Зберегти зміни?'");
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Форма", Форма);
			ДополнительныеПараметры.Вставить("Отказ", Отказ);
			
			Оповещение = Новый ОписаниеОповещения("ПроверитьНеобходимостьЗаписиПродолжение", ЭтотОбъект, ДополнительныеПараметры);					
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет, НСтр("ru='Конфигурация BAS';uk='Конфігурація BAS'"));
			
		КонецЕсли;
		
	КонецЕсли; 

КонецПроцедуры

Процедура ПроверитьНеобходимостьЗаписиПродолжение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
		ДополнительныеПараметры.Отказ = Истина;
		Возврат;	
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	Отказ = ДополнительныеПараметры.Отказ;
	
	СохранитьДанныеФорм(Форма, Отказ);
				
	Если Форма.Модифицированность Тогда
		Форма.Записать();
	КонецЕсли;
	
КонецПроцедуры


Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если Источник = Форма.ВладелецФормы Тогда
		
		Если ИмяСобытия = "ИзмененЗаголовокФормыСотрудника" Тогда
			
			Форма.Заголовок = Параметр;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
