////////////////////////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ОБЩЕГО НАЗНАЧЕНИЯ

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДополнитьЖурналНовойСтрокойЧерезРазделитель(Журнал, ДобавляемаяСтрока, Разделитель = Неопределено, ЕслиЗаписьЕстьНеДобавлять = Истина, ВыводитьТекущуюДату = Истина) Экспорт
	
	Если ЕслиЗаписьЕстьНеДобавлять Тогда
		Если СтрЧислоВхождений(Журнал , ДобавляемаяСтрока) > 0 Тогда 
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	
	Если Разделитель = Неопределено Тогда
		
		Разделитель = Символы.ПС;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Журнал) Тогда
		
		Журнал = Журнал + Разделитель;
		
	КонецЕсли;
	Журнал = Журнал + ?(ВыводитьТекущуюДату, Строка(ТекущаяДата()) + " - ", "") + ДобавляемаяСтрока;
	
КонецПроцедуры // ДополнитьЖурналЧерезНовойСтрокой()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ДополнитьСтруктуруPDFПредставлениемДокументаПолученнымИзОтветаОтEDIПровайдера(ДополняемаяСтруктураИлиСоответствие, ОтветОтEDIПровайдера)
	Перем лКонтейнерPDFПредставленияДокумента, ЭтоСтруктураИлиСоответствие;
	
	Если ТипЗнч(ОтветОтEDIПровайдера) = Тип("Структура") Тогда
		
		ЭтоСтруктураИлиСоответствие = Истина;
		
	ИначеЕсли ТипЗнч(ОтветОтEDIПровайдера) = Тип("Соответствие") Тогда
		
		ЭтоСтруктураИлиСоответствие = Ложь;
		
	КонецЕсли;
	
	Если ЭтоСтруктураИлиСоответствие = Истина Тогда
		
		Если ОтветОтEDIПровайдера.Свойство("ImageBody", лКонтейнерPDFПредставленияДокумента) Тогда
			
			Если ТипЗнч(лКонтейнерPDFПредставленияДокумента) = Тип("Структура") Тогда
				
				лИзображениеДокумента = Неопределено;
				Если лКонтейнерPDFПредставленияДокумента.Свойство("Body", лИзображениеДокумента) Тогда
					
					ДополняемаяСтруктураИлиСоответствие.Вставить("ИзображениеДокумента", лИзображениеДокумента);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЭтоСтруктураИлиСоответствие = Ложь Тогда
		
		лКонтейнерPDFПредставленияДокумента = ОтветОтEDIПровайдера.Получить("ImageBody");
		Если ТипЗнч(лКонтейнерPDFПредставленияДокумента) = Тип("Соответствие") Тогда
			
			лИзображениеДокумента = лКонтейнерPDFПредставленияДокумента.Получить("Body");
			Если лИзображениеДокумента <> Неопределено Тогда
				
				ДополняемаяСтруктураИлиСоответствие.Вставить("ИзображениеДокумента", лИзображениеДокумента);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДополнитьСтруктуруPDFПредставлениемДокументаПолученнымИзОтветаОтEDIПровайдера()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьЗначениеПараметраСеанса(ИмяПараметра) Экспорт
	Перем лРезультат;
	
	Попытка
		
		лРезультат = ПараметрыСеанса[ИмяПараметра];
		
	Исключение
		
		лМассивТипов = Новый Массив;
		лРезультат = Метаданные.ПараметрыСеанса[ИмяПараметра].Тип.ПривестиЗначение();
		
	КонецПопытки;
	
	Возврат лРезультат;
	
КонецФункции // ПолучитьЗначениеПараметраСеанса()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура УстановитьЗначениеПараметраСеанса(ИмяПараметра, Значение) Экспорт
	
	ПараметрыСеанса[ИмяПараметра] = Значение;
	
КонецПроцедуры // УстановитьЗначениеПараметраСеанса()

////////////////////////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ РАБОТЫ С ЭЛЕКТРОННО-ЦИФРОВЫМИ ПОДПИСЯМИ

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьСертификатИзБазыДанныхПоСерийномуНомеру(Организация, СерийныйНомер, СоздатьЕслиНет = Ложь, Информация = Неопределено)
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	скEDI_ПодписиСертификаты.Ссылка КАК Ссылка,
	|	скEDI_ПодписиСертификаты.ТелоСертификата КАК ТелоСертификата,
	|	скEDI_ПодписиСертификаты.СерийныйНомер КАК СерийныйНомер,
	|	скEDI_ПодписиСертификаты.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	скEDI_ПодписиСертификаты.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
	|	скEDI_ПодписиСертификаты.Использовать КАК Использовать
	|ИЗ
	|	Справочник.скEDI_Подписи.Сертификаты КАК скEDI_ПодписиСертификаты
	|ГДЕ
	|	скEDI_ПодписиСертификаты.СерийныйНомер = &СерийныйНомер
	|	И скEDI_ПодписиСертификаты.Ссылка.Владелец = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	скEDI_ПодписиСертификаты.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СерийныйНомер", СерийныйНомер);
	
	лВыборкаРезультатовЗапроса = Запрос.Выполнить().Выбрать();
	Если лВыборкаРезультатовЗапроса.Следующий() Тогда
		Результат = Новый Структура("Ссылка, ТелоСертификата, СерийныйНомер, ДатаНачалаДействия, ДатаОкончанияДействия");
		ЗаполнитьЗначенияСвойств(Результат, лВыборкаРезультатовЗапроса);
	ИначеЕсли СоздатьЕслиНет и ТипЗнч(Информация) = Тип("Структура") Тогда
		ПодписьОбъект = Справочники.скEDI_Подписи.СоздатьЭлемент();
		ПодписьОбъект.Владелец = Организация;
		ПодписьОбъект.ДРФО = Информация.ДРФОПодписанта;
		ПодписьОбъект.Роль = Информация.Роль;
		ПодписьОбъект.ИспользованиеКлюча = Информация.ИспользованиеКлюча;
		ПодписьОбъект.Фамилия = Информация.Фамилия;
		ПодписьОбъект.Имя = Информация.Имя;
		ПодписьОбъект.Должность = Информация.ДолжностьПодписанта;
		ПодписьОбъект.email = Информация.Email;
		
		НаименованиеПодписи = "";
		ПрисоединитьСтроку(НаименованиеПодписи, ПодписьОбъект.Должность);
		Если НаименованиеПодписи = "" Тогда
			ПрисоединитьСтроку(НаименованиеПодписи, ПодписьОбъект.Роль);
		КонецЕсли;
		ПрисоединитьСтроку(НаименованиеПодписи, ПодписьОбъект.Фамилия);
		ПрисоединитьСтроку(НаименованиеПодписи, ПодписьОбъект.Имя);
		ПрисоединитьСтроку(НаименованиеПодписи, ПодписьОбъект.ИспользованиеКлюча);
		ПодписьОбъект.Наименование = НаименованиеПодписи;
		НовыйСертификат = ПодписьОбъект.Сертификаты.Добавить();
		НовыйСертификат.СерийныйНомер = Информация.СерийныйНомер;
		НовыйСертификат.ТелоСертификата = Информация.ТелоСертификата;
		НовыйСертификат.ДатаНачалаДействия = Информация.ДатаНачалаДействия;
		НовыйСертификат.ДатаОкончанияДействия = Информация.ДатаОкончанияДействия;
		НовыйСертификат.ИздательСертификата   = Информация.ИздательСертификата;
		НовыйСертификат.КлючНаЗащищенномНосителе = Информация.КлючНаЗащищенномНосителе;
		Если НовыйСертификат.КлючНаЗащищенномНосителе = Истина Тогда
			НовыйСертификат.КлючНаСервисеCloudKey = Информация.КлючНаСервисеCloudKey;
		КонецЕсли;
		НовыйСертификат.ИдентификаторСекретногоКлюча = Информация.ИдентификаторСекретногоКлюча;
		ТекущаяДата = ТекущаяДата();
		Если (НовыйСертификат.ДатаНачалаДействия <= ТекущаяДата) и (НовыйСертификат.ДатаОкончанияДействия >= ТекущаяДата) Тогда
			НовыйСертификат.Использовать = Истина;
		КонецЕсли; 
		ПодписьОбъект.Записать();
		Результат = Новый Структура("Ссылка, ТелоСертификата, СерийныйНомер, ДатаНачалаДействия, ДатаОкончанияДействия, Использовать");
		Результат.Ссылка = ПодписьОбъект.Ссылка;
		Результат.ТелоСертификата = Информация.ТелоСертификата;
		Результат.СерийныйНомер = Информация.СерийныйНомер;
		Результат.ДатаНачалаДействия = Информация.ДатаНачалаДействия;
		Результат.ДатаОкончанияДействия = Информация.ДатаОкончанияДействия;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ОпределитьРольСертификатаПоУмолчанию(ИнформацияОСертификате) Экспорт
	
	Если ИнформацияОСертификате.UserSerialNumber = ИнформацияОСертификате.EDRPOU И ИнформацияОСертификате.DRFO = "" И ИнформацияОСертификате.KeyUsage = 8 Тогда
		
		лРезультат = Перечисления.скEDI_РолиПодписей.СертификатШифрования;
		
	ИначеЕсли ИнформацияОСертификате.UserSerialNumber = ИнформацияОСертификате.EDRPOU И ИнформацияОСертификате.DRFO = "" И ИнформацияОСертификате.KeyUsage = 192 Тогда
		
		лРезультат = Перечисления.скEDI_РолиПодписей.ПечатьОрганизации;
		
	ИначеЕсли ИнформацияОСертификате.DRFO <> "" И Прав(ИнформацияОСертификате.UserSerialNumber, 1) = "D" Тогда
		
		лРезультат = Перечисления.скEDI_РолиПодписей.ПодписьДиректора;
		
	ИначеЕсли ИнформацияОСертификате.DRFO <> "" И Прав(ИнформацияОСертификате.UserSerialNumber, 1) = "B" Тогда
		
		лРезультат = Перечисления.скEDI_РолиПодписей.ПодписьБухгалтера;
		
	Иначе
		
		лРезультат = Перечисления.скEDI_РолиПодписей.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат лРезультат
	
КонецФункции // ОпределитьРольСертификата()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьНаименованиеПодписиПоУмолчаниюПоРолиСертификата(Роль) Экспорт
	
	Если Роль = Перечисления.скEDI_РолиПодписей.СертификатШифрования Тогда
		
		лРезультат = "Подпись шифрования";
		
	ИначеЕсли Роль = Перечисления.скEDI_РолиПодписей.ПечатьОрганизации Тогда
		
		лРезультат = "Печать организации";
		
	ИначеЕсли Роль = Перечисления.скEDI_РолиПодписей.ПодписьДиректора Тогда
		
		лРезультат = "Подпись директора";
		
	ИначеЕсли Роль = Перечисления.скEDI_РолиПодписей.ПодписьБухгалтера Тогда
		
		лРезультат = "Подпись бухгалтера";
		
	ИначеЕсли Роль = Перечисления.скEDI_РолиПодписей.ПодписьОтветственногоЛица Тогда
		
		лРезультат = "Подпись ответственного лица";
		
	ИначеЕсли Роль = Перечисления.скEDI_РолиПодписей.ПодписьФизическогоЛица Тогда
		
		лРезультат = "Подпись физического лица";
		
	Иначе
		
		лРезультат = "";
		
	КонецЕсли;
	
	Возврат лРезультат;
	
КонецФункции // ПолучитьНаименованиеПодписиПоУмолчаниюПоРолиСертификата()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьРольПодписиПоКоду(Код) Экспорт
	Результат = Перечисления.скEDI_РолиПодписей.Неопределено;
	Если Код = -1 Тогда
		Результат = Перечисления.скEDI_РолиПодписей.Неопределено;
	ИначеЕсли Код = 0 Тогда
		Результат = Перечисления.скEDI_РолиПодписей.ПодписьДиректора;
	ИначеЕсли Код = 1 Тогда
		Результат = Перечисления.скEDI_РолиПодписей.ПодписьБухгалтера;
	ИначеЕсли Код = 2 Тогда
		Результат = Перечисления.скEDI_РолиПодписей.ПечатьОрганизации;
	ИначеЕсли Код = 3 Тогда
		Результат = Перечисления.скEDI_РолиПодписей.ПодписьОтветственногоЛица;
	ИначеЕсли Код = 5 Тогда
		Результат = Перечисления.скEDI_РолиПодписей.РегистраторУСЦ;
	ИначеЕсли Код = 6 Тогда
		Результат = Перечисления.скEDI_РолиПодписей.ПодписьФизическогоЛица;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции //ПолучитьРольПодписиПоКоду()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьИспользованиеКлючаПоКоду(Код) Экспорт
	Результат = Перечисления.скEDI_ИспользованиеКлючей.ПустаяСсылка();
	Если Код = 8 Тогда
		Результат = Перечисления.скEDI_ИспользованиеКлючей.Шифрование;
	ИначеЕсли Код = 192 Тогда
		Результат = Перечисления.скEDI_ИспользованиеКлючей.Подписание;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ПолучитьТипДокументаMEDocПоКоду(Знач Код) Экспорт
	Если ТипЗнч(Код) = Тип("Число") Тогда
		Код = Формат(Код, "ЧГ=0");
	КонецЕсли;
	Результат = Перечисления.скEDI_ТипыДокументовMEDoc.ПустаяСсылка();
	Если Код = "10100" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10100;
	ИначеЕсли Код = "10101" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10101;
	ИначеЕсли Код = "10103" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10103;
	ИначеЕсли Код = "10104" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10104;
	ИначеЕсли Код = "10105" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10105;
	ИначеЕсли Код = "10106" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10106;
	ИначеЕсли Код = "10107" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10107;
	ИначеЕсли Код = "10108" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10108;
	ИначеЕсли Код = "10109" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10109;
	ИначеЕсли Код = "10110" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10110;
	ИначеЕсли Код = "10111" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10111;
	ИначеЕсли Код = "10112" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10112;
	ИначеЕсли Код = "10113" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10113;
	ИначеЕсли Код = "10050" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10050;
	ИначеЕсли Код = "10051" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10051;
	ИначеЕсли Код = "10052" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10052;
	ИначеЕсли Код = "10053" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10053;
	ИначеЕсли Код = "10054" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10054;
	ИначеЕсли Код = "10055" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10055;
	ИначеЕсли Код = "10070" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10070;
	ИначеЕсли Код = "10071" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10071;
	ИначеЕсли Код = "10072" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10072;
	ИначеЕсли Код = "10120" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10120;
	ИначеЕсли Код = "10121" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10121;
	ИначеЕсли Код = "10122" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10122;
	ИначеЕсли Код = "10123" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10123;
	ИначеЕсли Код = "10130" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10130;
	ИначеЕсли Код = "10131" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10131;
	ИначеЕсли Код = "10132" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10132;
	ИначеЕсли Код = "10133" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10133;
	ИначеЕсли Код = "10134" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10134;
	ИначеЕсли Код = "10135" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10135;
	ИначеЕсли Код = "10136" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10136;
	ИначеЕсли Код = "10137" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10137;
	ИначеЕсли Код = "10138" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10138;
	ИначеЕсли Код = "10200" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10200;
	ИначеЕсли Код = "10201" Тогда
		Результат = Перечисления.скEDI_ТипыДокументовMEDoc.Т10201;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ПолучитьКодДокументаПоТипуДокументаMEDoc(ТипДокумента) Экспорт
	Результат = "";
	////Перечисления.скEDI_ТипыДокументовMEDoc.Получить(
	Если ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10100 Тогда
		Результат = "10100";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10101 Тогда
		Результат = "10101";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10103 Тогда
		Результат = "10103";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10104 Тогда
		Результат = "10104";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10105 Тогда
		Результат = "10105";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10106 Тогда
		Результат = "10106";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10107 Тогда
		Результат = "10107";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10108 Тогда
		Результат = "10108";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10109 Тогда
		Результат = "10109";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10110 Тогда
		Результат = "10110";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10111 Тогда
		Результат = "10111";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10112 Тогда
		Результат = "10112";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10113 Тогда
		Результат = "10113";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10050 Тогда
		Результат = "10050";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10051 Тогда
		Результат = "10051";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10052 Тогда
		Результат = "10052";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10053 Тогда
		Результат = "10053";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10054 Тогда
		Результат = "10054";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10055 Тогда
		Результат = "10055";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10070 Тогда
		Результат = "10070";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10071 Тогда
		Результат = "10071";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10072 Тогда
		Результат = "10072";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10120 Тогда
		Результат = "10120";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10121 Тогда
		Результат = "10121";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10122 Тогда
		Результат = "10122";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10123 Тогда
		Результат = "10123";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10130 Тогда
		Результат = "10130";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10131 Тогда
		Результат = "10131";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10132 Тогда
		Результат = "10132";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10133 Тогда
		Результат = "10133";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10134 Тогда
		Результат = "10134";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10135 Тогда
		Результат = "10135";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10136 Тогда
		Результат = "10136";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10137 Тогда
		Результат = "10137";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10138 Тогда
		Результат = "10138";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10200 Тогда
		Результат = "10200";
	ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыДокументовMEDoc.Т10201 Тогда
		Результат = "10201";
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьТипДоступаКШаблону(Код) Экспорт
	Результат = Перечисления.скEDI_ТипыДоступаКШаблону.ПустаяСсылка();
	Если Код = 1 Тогда
		Результат = Перечисления.скEDI_ТипыДоступаКШаблону.Т1;
	ИначеЕсли Код = 2 Тогда
		Результат = Перечисления.скEDI_ТипыДоступаКШаблону.Т2;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ПолучитьНаименованиеТипаДанных(Код) Экспорт
	Если Код = 1 Тогда
		Результат = "Long";
	ИначеЕсли Код = 2 Тогда
		Результат = "Float";
	ИначеЕсли Код = 3 Тогда
		Результат = "Text";
	ИначеЕсли Код = 4 Тогда
		Результат = "Bool";
	ИначеЕсли Код = 5 Тогда
		Результат = "Date";
	ИначеЕсли Код = 6 Тогда
		Результат = "Time";
	ИначеЕсли Код = 7 Тогда
		Результат = "DateTime";
	ИначеЕсли Код = 8 Тогда
		Результат = "Dictionary";
	Иначе
		Результат = Строка(Код);
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ПолучитьПВХТипаДанных(Код) Экспорт
	Если Код = 1 Тогда
		Результат = ПланыВидовХарактеристик.скEDI_ТипыДанныхРеквизитов.Long;
	ИначеЕсли Код = 2 Тогда
		Результат = ПланыВидовХарактеристик.скEDI_ТипыДанныхРеквизитов.Float;
	ИначеЕсли Код = 3 Тогда
		Результат = ПланыВидовХарактеристик.скEDI_ТипыДанныхРеквизитов.Text;
	ИначеЕсли Код = 4 Тогда
		Результат = ПланыВидовХарактеристик.скEDI_ТипыДанныхРеквизитов.Bool;
	ИначеЕсли Код = 5 Тогда
		Результат = ПланыВидовХарактеристик.скEDI_ТипыДанныхРеквизитов.Date;
	ИначеЕсли Код = 6 Тогда
		Результат = ПланыВидовХарактеристик.скEDI_ТипыДанныхРеквизитов.Time;
	ИначеЕсли Код = 7 Тогда
		Результат = ПланыВидовХарактеристик.скEDI_ТипыДанныхРеквизитов.DateTime;
	ИначеЕсли Код = 8 Тогда
		//Результат = "Dictionary";
		Результат = Неопределено;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	Возврат Результат;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьДействующиеСертификатыПодписей(МассивПодписей) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	скEDI_ПодписиСертификаты.Ссылка КАК Подпись,
	|	скEDI_ПодписиСертификаты.ТелоСертификата КАК ТелоСертификата
	|ИЗ
	|	Справочник.скEDI_Подписи.Сертификаты КАК скEDI_ПодписиСертификаты
	|ГДЕ
	|	скEDI_ПодписиСертификаты.Использовать
	|	И скEDI_ПодписиСертификаты.Ссылка В(&МассивПодписей)";
	Запрос.УстановитьПараметр("МассивПодписей", МассивПодписей);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьДействующиеСертификатыПодписей()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПроверитьСоответствиеСертификатовКлючейПаролейПодписей(ТаблицаПодписей, ЖурналОперации = "") Экспорт
	
	лЕстьНесоответствующиеСертификатамКлючиПароли = Ложь;
	
	Для Каждого лДаннныеПодписи Из ТаблицаПодписей Цикл
		
		Если ЗначениеЗаполнено(лДаннныеПодписи.ТелоСертификата) Тогда
			
			Если ЗначениеЗаполнено(лДаннныеПодписи.ПутьКСекретномуКлючу) И ЗначениеЗаполнено(лДаннныеПодписи.ПарольСекретногоКлюча) Тогда
				
				лЖурналОшибокПроверкиСоответствия = "";
				
				лПараметрыПроверкиСоответствия = Новый Структура;
				лПараметрыПроверкиСоответствия.Вставить("Cert",     лДаннныеПодписи.ТелоСертификата);
				лПараметрыПроверкиСоответствия.Вставить("Key",      лДаннныеПодписи.ТелоСекретногоКлюча);
				лПараметрыПроверкиСоответствия.Вставить("Password", лДаннныеПодписи.ПарольСекретногоКлюча);
				
				Если Не ПроверитьСоответствиеСертификатовКлючейПаролейПодписейСПомощьюEDIПровайдера(лПараметрыПроверкиСоответствия, лЖурналОшибокПроверкиСоответствия) Тогда
					
					лЕстьНесоответствующиеСертификатамКлючиПароли = Истина;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, лЖурналОшибокПроверкиСоответствия);
					
				КонецЕсли;
			
			Иначе
			
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Для подписи'; uk = 'Для підпису'") + " " + лДаннныеПодписи.Подпись + " " + НСтр("ru = 'не введен путь к секретному ключу и/или пароль'; uk = 'не введено шлях до секретного ключа та/або пароль'") + ".");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Не лЕстьНесоответствующиеСертификатамКлючиПароли;
	
КонецФункции // ПроверитьСоответствиеСертификатовКлючейПаролейПодписей()

Процедура ОбработатьМассивСертификатовНаСервере(МассивСертификатов, Организация, ОрганизацияНастроена, НастроитьОрганизациюЕДРПОУ, НастроитьОрганизациюНаименование, БылаПроведенаНастройкаОрганизации) Экспорт
	Если Не ОрганизацияНастроена Тогда
		Если ЗначениеЗаполнено(Организация) Тогда
			ОрганизацияОбъект = Организация.ПолучитьОбъект();
		Иначе
			Организация1С = скEDI_НастройкиПодКонфигурацию.ПолучитьОрганизациюПоЕДРПОУ(НастроитьОрганизациюЕДРПОУ);
			Если Организация1С = Неопределено Тогда
				Сообщить(НСтр("ru = 'Не забудьте заполнить значение поля Организация!'; uk = 'Не забудьте заповнити значення поля Организація!'"));
			КонецЕсли;
			
			Организация = Справочники.скEDI_Организации.НайтиПоКоду(НастроитьОрганизациюЕДРПОУ);
			Если ЗначениеЗаполнено(Организация) Тогда
				ОрганизацияОбъект = Организация.ПолучитьОбъект();
				Если Не ЗначениеЗаполнено(ОрганизацияОбъект.Организация1С) Тогда
					ОрганизацияОбъект.Организация1С = Организация1С;
				КонецЕсли;
			Иначе
				ОрганизацияОбъект = Справочники.скEDI_Организации.СоздатьЭлемент();
				ОрганизацияОбъект.Код = НастроитьОрганизациюЕДРПОУ;
				ОрганизацияОбъект.ВыводитьИнформациюОПодписантах = Истина;
				ОрганизацияОбъект.СпособОтправкиНалоговыхДокументовКонтрагенту = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезДФС");
				ОрганизацияОбъект.ЮрФизЛицо = Перечисления.скEDI_ЮрФизЛицо.ЮрЛицо;
				ОрганизацияОбъект.Организация1С = Организация1С;
			КонецЕсли;
			
			ОрганизацияОбъект.Наименование = НастроитьОрганизациюНаименование;
			
			ОрганизацияОбъект.Записать();
			Организация = ОрганизацияОбъект.Ссылка;
			БылаПроведенаНастройкаОрганизации = Истина;
		КонецЕсли;
	КонецЕсли; 
	
	Для Каждого СтрокаМассиваСертификатов Из МассивСертификатов Цикл
		//2018-02-26 Если Организация.Код = СтрокаМассиваСертификатов.Информация.EDRPOU Тогда
		Если (Организация.Код = СтрокаМассиваСертификатов.Информация.EDRPOU) или (СтрокаМассиваСертификатов.Информация.EDRPOU = "") Тогда
			ДРФО = СтрокаМассиваСертификатов.Информация.DRFO;
			ИспользованиеКлюча = ПолучитьИспользованиеКлючаПоКоду(СтрокаМассиваСертификатов.Информация.KeyUsage);
			РольПодписи = ПолучитьРольПодписиПоКоду(СтрокаМассиваСертификатов.Информация.Type);
			
			ДатаНачалаДействияСертификата = СтрокаВДату(СтрокаМассиваСертификатов.Информация.DateBeg);
			ДатаОкончанияДействияСертификата = СтрокаВДату(СтрокаМассиваСертификатов.Информация.DateEnd);
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	скEDI_Подписи.Ссылка
			               |ИЗ
			               |	Справочник.скEDI_Подписи КАК скEDI_Подписи
			               |ГДЕ
			               |	скEDI_Подписи.Владелец = &Владелец
			               |	И скEDI_Подписи.ДРФО = &ДРФО
			               |	И скEDI_Подписи.Роль = &Роль
			               |	И скEDI_Подписи.ИспользованиеКлюча = &ИспользованиеКлюча
			               |	И НЕ скEDI_Подписи.ПометкаУдаления";
			Запрос.УстановитьПараметр("Владелец", Организация);
			Запрос.УстановитьПараметр("ДРФО", ДРФО);
			Запрос.УстановитьПараметр("Роль", РольПодписи);
			Запрос.УстановитьПараметр("ИспользованиеКлюча", ИспользованиеКлюча);
			ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
			
			СертификатНайден = Ложь;
			НомерСтрокиСертификата = 0;
			ОбновитьДанныеСертификата = Истина;
			Если ВыборкаРезультатаЗапроса.Следующий() Тогда
				Подпись = ВыборкаРезультатаЗапроса.Ссылка;
				Для Каждого СтрокаТЧСертификаты из Подпись.Сертификаты Цикл
					Если СтрокаТЧСертификаты.СерийныйНомер = СтрокаМассиваСертификатов.Информация.serialNumber Тогда
						Если СтрокаТЧСертификаты.ТелоСертификата = СтрокаМассиваСертификатов.ТелоСертификата
							и СтрокаТЧСертификаты.ДатаНачалаДействия = ДатаНачалаДействияСертификата
							и СтрокаТЧСертификаты.ДатаОкончанияДействия = ДатаОкончанияДействияСертификата
							и СтрокаТЧСертификаты.ИздательСертификата = СтрокаМассиваСертификатов.Информация.iName
							и СтрокаТЧСертификаты.КлючНаЗащищенномНосителе = ?(СтрокаМассиваСертификатов.Информация.isKeyInDevice = 1, Истина, Ложь)
							и СтрокаТЧСертификаты.ИдентификаторСекретногоКлюча = СтрокаМассиваСертификатов.Информация.subjectKeyIdentifier Тогда
							
							НомерСтрокиСертификата = СтрокаТЧСертификаты.НомерСтроки;
							ОбновитьДанныеСертификата = Ложь;
						Иначе
							НомерСтрокиСертификата = СтрокаТЧСертификаты.НомерСтроки;
							ОбновитьДанныеСертификата = Истина;
						КонецЕсли;
						
						СертификатНайден = Истина;
						Сообщить(НСтр("ru = 'Сертификат №'; uk = 'Сертифікат №'") + СтрокаМассиваСертификатов.Информация.serialNumber + НСтр("ru = ' уже есть в системе.'; uk = ' вже є в системі.'"));
						Прервать;
					КонецЕсли; 
				КонецЦикла;
				Если ОбновитьДанныеСертификата или Не СертификатНайден Тогда
					ПодписьОбъект = Подпись.ПолучитьОбъект();
				КонецЕсли;
			Иначе
				ПодписьОбъект = Справочники.скEDI_Подписи.СоздатьЭлемент();
				ПодписьОбъект.Владелец = Организация;
				ПодписьОбъект.ДРФО = ДРФО;
				ПодписьОбъект.Роль = РольПодписи;
				ПодписьОбъект.ИспользованиеКлюча = ИспользованиеКлюча;
				ПодписьОбъект.Фамилия = СтрокаМассиваСертификатов.Информация.Surname;
				ПодписьОбъект.Имя = СтрокаМассиваСертификатов.Информация.GivenName;
				ПодписьОбъект.Должность = СтрокаМассиваСертификатов.Информация.Title;
				ПодписьОбъект.email = СтрокаМассиваСертификатов.Информация.Email;
				Если ПодписьОбъект.ИспользованиеКлюча = Перечисления.скEDI_ИспользованиеКлючей.Шифрование
					и ПодписьОбъект.Роль = Перечисления.скEDI_РолиПодписей.ПечатьОрганизации Тогда
					ПодписьОбъект.ОсновнаяПодписьШифрования = Истина;
				КонецЕсли;
				
				НаименованиеПодписи = "";
				ПрисоединитьСтроку(НаименованиеПодписи, СтрокаМассиваСертификатов.Информация.Title);
				Если НаименованиеПодписи = "" Тогда
					ПрисоединитьСтроку(НаименованиеПодписи, РольПодписи);
				КонецЕсли;
				ПрисоединитьСтроку(НаименованиеПодписи, СтрокаМассиваСертификатов.Информация.Surname);
				ПрисоединитьСтроку(НаименованиеПодписи, СтрокаМассиваСертификатов.Информация.GivenName);
				ПрисоединитьСтроку(НаименованиеПодписи, ИспользованиеКлюча);
				ПодписьОбъект.Наименование = НаименованиеПодписи;
			КонецЕсли;
			Если ОбновитьДанныеСертификата или Не СертификатНайден Тогда
				Если НомерСтрокиСертификата = 0 Тогда
					НовыйСертификат = ПодписьОбъект.Сертификаты.Добавить();
					НовыйСертификат.СерийныйНомер = СтрокаМассиваСертификатов.Информация.serialNumber;
				Иначе
					НовыйСертификат = ПодписьОбъект.Сертификаты.Получить(НомерСтрокиСертификата-1);
					//НовыйСертификат.СерийныйНомер = СтрокаМассиваСертификатов.Информация.serialNumber;
				КонецЕсли;
				НовыйСертификат.ТелоСертификата = СтрокаМассиваСертификатов.ТелоСертификата;
				НовыйСертификат.ДатаНачалаДействия = ДатаНачалаДействияСертификата;
				НовыйСертификат.ДатаОкончанияДействия = ДатаОкончанияДействияСертификата;
				НовыйСертификат.ИздательСертификата   = СтрокаМассиваСертификатов.Информация.iName;
				НовыйСертификат.КлючНаЗащищенномНосителе = ?(СтрокаМассиваСертификатов.Информация.isKeyInDevice = 1, Истина, Ложь);
				Если НовыйСертификат.КлючНаЗащищенномНосителе Тогда
					НовыйСертификат.КлючНаСервисеCloudKey = СтрокаМассиваСертификатов.Информация.isKeyOnSmartId = Истина;
				КонецЕсли;
				НовыйСертификат.ИдентификаторСекретногоКлюча = СтрокаМассиваСертификатов.Информация.subjectKeyIdentifier;
				ТекущаяДата = ТекущаяДата();
				Если (НовыйСертификат.ДатаНачалаДействия <= ТекущаяДата) и (НовыйСертификат.ДатаОкончанияДействия >= ТекущаяДата) Тогда
					НовыйСертификат.Использовать = Истина;
					Для Каждого СтрокаТЧСертификаты Из ПодписьОбъект.Сертификаты Цикл
						Если (НовыйСертификат <> СтрокаТЧСертификаты) и не ((СтрокаТЧСертификаты.ДатаНачалаДействия <= ТекущаяДата) и (СтрокаТЧСертификаты.ДатаОкончанияДействия >= ТекущаяДата)) Тогда
							СтрокаТЧСертификаты.Использовать = Ложь;
						КонецЕсли; 
					КонецЦикла;
				КонецЕсли; 
				ПодписьОбъект.Записать();
				Если СертификатНайден Тогда
					Сообщить(НСтр("ru = 'Сертификат №'; uk = 'Сертифікат №'") + СтрокаМассиваСертификатов.Информация.serialNumber + НСтр("ru = ' обновлен.'; uk = ' оновлено.'"));
				Иначе
					Сообщить(НСтр("ru = 'Сертификат №'; uk = 'Сертифікат №'") + СтрокаМассиваСертификатов.Информация.serialNumber + НСтр("ru = ' загружено.'; uk = ' завантажено.'"));
				КонецЕсли;
			КонецЕсли;
		Иначе
			ПутьКФайлу = "";
			Если СтрокаМассиваСертификатов.Свойство("ПутьКФайлу", ПутьКФайлу) Тогда
				Сообщить("""" + ПутьКФайлу + """ "
				+ НСтр("ru = 'не соответствует выбранной организации'; uk = 'не відповідає обраній організації'"));
			Иначе
				Сообщить(НСтр("ru = 'Сертификат'; uk = 'Сертифікат'") 
				+ " (" + СтрокаМассиваСертификатов.Информация.EDRPOU +") "
				+ НСтр("ru = 'не соответствует выбранной организации'; uk = 'не відповідає обраній організації'"));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ РАБОТЫ С ЭЛЕКТРОННЫМИ ДОКУМЕНТАМИ И КВИТАНЦИЯМИ

Функция ПолучитьРеквизитыВитягуИзРеквизитовШапкиЭлектронногоДокумента(РеквизитыШапкиДокумента, НомерЭлектронногоДокумента, НомерДокумента,
	ДатаЭлектронногоДокумента, ДатаДокумента)
	
	лНомерЭлектронногоДокумента = РеквизитыШапкиДокумента.Получить("HNUM");
	Если лНомерЭлектронногоДокумента = Неопределено Тогда
		НомерЭлектронногоДокумента = "<НЕТ НОМЕРА>";
		НомерДокумента = "";
	Иначе
		НомерЭлектронногоДокумента = Строка(лНомерЭлектронногоДокумента);
		НомерДокумента = Строка(лНомерЭлектронногоДокумента);
	КонецЕсли;
	
	ДатаТекст = РеквизитыШапкиДокумента.Получить("HFILL");
	ДатаДокумента = Неопределено;
	Если ДатаТекст = Неопределено Тогда
		ДатаЭлектронногоДокумента = ТекущаяДата();
		ДатаДокумента = Дата(1, 1, 1);
	ИначеЕсли ПолучитьДатуФорматаДДММГГГГ(ДатаТекст, ДатаДокумента) Тогда
		ДатаЭлектронногоДокумента = ДатаДокумента;
		//ДатаДокумента = ДатаДокумента;
	Иначе
		ДатаЭлектронногоДокумента = ТекущаяДата();
		ДатаДокумента = Дата(1, 1, 1);
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ПолучитьРеквизитыНалоговойНакладнойИзРеквизитовШапкиЭлектронногоДокумента(РеквизитыШапкиДокумента, НомерЭлектронногоДокумента, НомерДокумента,
	ДатаЭлектронногоДокумента, ДатаДокумента,
	ЕДРПОУПродавца, ИННПродавца, КодФилиалаПродавца, НаименованиеПродавца, ЕДРПОУПокупателя, ИННПокупателя, КодФилиалаПокупателя, НаименованиеПокупателя,
	СуммаЭлектронногоДокумента, СуммаБезНДСЭлектронногоДокумента, СуммаНДСЭлектронногоДокумента) Экспорт
	
	лНомерЭлектронногоДокумента = РеквизитыШапкиДокумента.Получить("HNUM");
	лНомерЭлектронногоДокумента1 = РеквизитыШапкиДокумента.Получить("HNUM1");
	лНомерЭлектронногоДокумента2 = РеквизитыШапкиДокумента.Получить("HNUM2");
	лНомерЭлектронногоДокумента1 = СокрЛП(лНомерЭлектронногоДокумента1);
	лНомерЭлектронногоДокумента2 = СокрЛП(лНомерЭлектронногоДокумента2);
	СуфиксНомера = "";
	Если лНомерЭлектронногоДокумента2 = "" Тогда
		Если лНомерЭлектронногоДокумента1 = "" Тогда
			СуфиксНомера = "";
		Иначе
			СуфиксНомера = "/" + лНомерЭлектронногоДокумента1;
		КонецЕсли;
	Иначе
		Если лНомерЭлектронногоДокумента1 = "" Тогда
			СуфиксНомера = "//" + лНомерЭлектронногоДокумента2;
		Иначе
			СуфиксНомера = "/" + лНомерЭлектронногоДокумента1 + "/" + лНомерЭлектронногоДокумента2;
		КонецЕсли;
	КонецЕсли;
	Если лНомерЭлектронногоДокумента = Неопределено Тогда
		НомерЭлектронногоДокумента = "<НЕТ НОМЕРА>";
		НомерДокумента = "";
	Иначе
		НомерЭлектронногоДокумента = Строка(лНомерЭлектронногоДокумента) + СуфиксНомера;
		НомерДокумента = Строка(лНомерЭлектронногоДокумента) + СуфиксНомера;
	КонецЕсли;
	
	ДатаТекст = РеквизитыШапкиДокумента.Получить("HFILL");
	ДатаДокумента = Неопределено;
	Если ДатаТекст = Неопределено Тогда
		ДатаЭлектронногоДокумента = ТекущаяДата();
		ДатаДокумента = Дата(1, 1, 1);
	ИначеЕсли ПолучитьДатуФорматаДДММГГГГ(ДатаТекст, ДатаДокумента) Тогда
		ДатаЭлектронногоДокумента = ДатаДокумента;
		//ДатаДокумента = ДатаДокумента;
	Иначе
		ДатаЭлектронногоДокумента = ТекущаяДата();
		ДатаДокумента = Дата(1, 1, 1);
	КонецЕсли;
	
	лРеквизитЭлектронногоДокумента = РеквизитыШапкиДокумента.Получить("HTINSEL");
	Если лРеквизитЭлектронногоДокумента = Неопределено Тогда
		ЕДРПОУПродавца = "";
	Иначе
		ЕДРПОУПродавца = СокрЛП(лРеквизитЭлектронногоДокумента);
	КонецЕсли;
	лРеквизитЭлектронногоДокумента = РеквизитыШапкиДокумента.Получить("HKSEL");
	Если лРеквизитЭлектронногоДокумента = Неопределено Тогда
		ИННПродавца = "";
	Иначе
		ИННПродавца = СокрЛП(лРеквизитЭлектронногоДокумента);
	КонецЕсли;
	лРеквизитЭлектронногоДокумента = РеквизитыШапкиДокумента.Получить("HNUM2");
	Если лРеквизитЭлектронногоДокумента = Неопределено Тогда
		КодФилиалаПродавца = "";
	Иначе
		КодФилиалаПродавца = СокрЛП(лРеквизитЭлектронногоДокумента);
	КонецЕсли;
	лРеквизитЭлектронногоДокумента = РеквизитыШапкиДокумента.Получить("HNAMESEL");
	Если лРеквизитЭлектронногоДокумента = Неопределено Тогда
		НаименованиеПродавца = "";
	Иначе
		НаименованиеПродавца = СокрЛП(лРеквизитЭлектронногоДокумента);
	КонецЕсли;
	
	лРеквизитЭлектронногоДокумента = РеквизитыШапкиДокумента.Получить("HTINBUY");
	Если лРеквизитЭлектронногоДокумента = Неопределено Тогда
		ЕДРПОУПокупателя = "";
	Иначе
		ЕДРПОУПокупателя = СокрЛП(лРеквизитЭлектронногоДокумента);
	КонецЕсли;
	лРеквизитЭлектронногоДокумента = РеквизитыШапкиДокумента.Получить("HKBUY");
	Если лРеквизитЭлектронногоДокумента = Неопределено Тогда
		ИННПокупателя = "";
	Иначе
		ИННПокупателя = СокрЛП(лРеквизитЭлектронногоДокумента);
	КонецЕсли;
	лРеквизитЭлектронногоДокумента = РеквизитыШапкиДокумента.Получить("HFBUY");
	Если лРеквизитЭлектронногоДокумента = Неопределено Тогда
		КодФилиалаПокупателя = "";
	Иначе
		КодФилиалаПокупателя = СокрЛП(лРеквизитЭлектронногоДокумента);
	КонецЕсли;
	лРеквизитЭлектронногоДокумента = РеквизитыШапкиДокумента.Получить("HNAMEBUY");
	Если лРеквизитЭлектронногоДокумента = Неопределено Тогда
		НаименованиеПокупателя = "";
	Иначе
		НаименованиеПокупателя = СокрЛП(лРеквизитЭлектронногоДокумента);
	КонецЕсли;
	
	
	
	СуммаБезНДСЭлектронногоДокумента = 0;
	Попытка
		СуммаБезНДСЭлектронногоДокумента = СуммаБезНДСЭлектронногоДокумента + Число(РеквизитыШапкиДокумента.Получить("R01G7"));
	Исключение
	КонецПопытки;
	Попытка
		СуммаБезНДСЭлектронногоДокумента = СуммаБезНДСЭлектронногоДокумента + Число(РеквизитыШапкиДокумента.Получить("R01G8"));
	Исключение
	КонецПопытки;
	Попытка
		СуммаБезНДСЭлектронногоДокумента = СуммаБезНДСЭлектронногоДокумента + Число(РеквизитыШапкиДокумента.Получить("R01G9"));
	Исключение
	КонецПопытки;
	Попытка
		СуммаБезНДСЭлектронногоДокумента = СуммаБезНДСЭлектронногоДокумента + Число(РеквизитыШапкиДокумента.Получить("R01G10"));
	Исключение
	КонецПопытки;
	Попытка
		СуммаБезНДСЭлектронногоДокумента = СуммаБезНДСЭлектронногоДокумента + Число(РеквизитыШапкиДокумента.Получить("R01G109"));
	Исключение
	КонецПопытки;
	Попытка
		СуммаБезНДСЭлектронногоДокумента = СуммаБезНДСЭлектронногоДокумента + Число(РеквизитыШапкиДокумента.Получить("R01G14"));
	Исключение
	КонецПопытки;
	
	СуммаНДСЭлектронногоДокумента = 0;
	Попытка
		СуммаНДСЭлектронногоДокумента = СуммаНДСЭлектронногоДокумента + Число(РеквизитыШапкиДокумента.Получить("R03G11"));
	Исключение
	КонецПопытки;
	
	СуммаЭлектронногоДокумента = 0;
	Попытка
		СуммаЭлектронногоДокумента = СуммаЭлектронногоДокумента + Число(РеквизитыШапкиДокумента.Получить("R04G11"));
	Исключение
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция ПолучитьРеквизитыПриложения2ИзРеквизитовШапкиЭлектронногоДокумента(РеквизитыШапкиДокумента, НомерЭлектронногоДокумента, НомерДокумента,
	ДатаЭлектронногоДокумента, ДатаДокумента,
	ЕДРПОУПродавца, ИННПродавца, КодФилиалаПродавца, НаименованиеПродавца, ЕДРПОУПокупателя, ИННПокупателя, КодФилиалаПокупателя, НаименованиеПокупателя, РегистрируетсяВЕРННПокупателем,
	СуммаЭлектронногоДокумента, СуммаБезНДСЭлектронногоДокумента, СуммаНДСЭлектронногоДокумента) Экспорт
	
	лНомерЭлектронногоДокумента = РеквизитыШапкиДокумента.Получить("HNUM");
	лНомерЭлектронногоДокумента1 = РеквизитыШапкиДокумента.Получить("HNUM1");
	лНомерЭлектронногоДокумента2 = РеквизитыШапкиДокумента.Получить("HNUM2");
	лНомерЭлектронногоДокумента1 = СокрЛП(лНомерЭлектронногоДокумента1);
	лНомерЭлектронногоДокумента2 = СокрЛП(лНомерЭлектронногоДокумента2);
	СуфиксНомера = "";
	Если лНомерЭлектронногоДокумента2 = "" Тогда
		Если лНомерЭлектронногоДокумента1 = "" Тогда
			СуфиксНомера = "";
		Иначе
			СуфиксНомера = "/" + лНомерЭлектронногоДокумента1;
		КонецЕсли;
	Иначе
		Если лНомерЭлектронногоДокумента1 = "" Тогда
			СуфиксНомера = "//" + лНомерЭлектронногоДокумента2;
		Иначе
			СуфиксНомера = "/" + лНомерЭлектронногоДокумента1 + "/" + лНомерЭлектронногоДокумента2;
		КонецЕсли;
	КонецЕсли;
	Если лНомерЭлектронногоДокумента = Неопределено Тогда
		НомерЭлектронногоДокумента = "<НЕТ НОМЕРА>";
		НомерДокумента = "";
	Иначе
		НомерЭлектронногоДокумента = Строка(лНомерЭлектронногоДокумента) + СуфиксНомера;
		НомерДокумента = Строка(лНомерЭлектронногоДокумента) + СуфиксНомера;
	КонецЕсли;
	
	ДатаТекст = РеквизитыШапкиДокумента.Получить("HFILL");
	ДатаДокумента = Неопределено;
	Если ДатаТекст = Неопределено Тогда
		ДатаЭлектронногоДокумента = ТекущаяДата();
		ДатаДокумента = Дата(1, 1, 1);
	ИначеЕсли ПолучитьДатуФорматаДДММГГГГ(ДатаТекст, ДатаДокумента) Тогда
		ДатаЭлектронногоДокумента = ДатаДокумента;
		//ДатаДокумента = ДатаДокумента;
	Иначе
		ДатаЭлектронногоДокумента = ТекущаяДата();
		ДатаДокумента = Дата(1, 1, 1);
	КонецЕсли;
	
	лРеквизитЭлектронногоДокумента = РеквизитыШапкиДокумента.Получить("HTINSEL");
	Если лРеквизитЭлектронногоДокумента = Неопределено Тогда
		ЕДРПОУПродавца = "";
	Иначе
		ЕДРПОУПродавца = СокрЛП(лРеквизитЭлектронногоДокумента);
	КонецЕсли;
	лРеквизитЭлектронногоДокумента = РеквизитыШапкиДокумента.Получить("HKSEL");
	Если лРеквизитЭлектронногоДокумента = Неопределено Тогда
		ИННПродавца = "";
	Иначе
		ИННПродавца = СокрЛП(лРеквизитЭлектронногоДокумента);
	КонецЕсли;
	лРеквизитЭлектронногоДокумента = РеквизитыШапкиДокумента.Получить("HNUM2");
	Если лРеквизитЭлектронногоДокумента = Неопределено Тогда
		КодФилиалаПродавца = "";
	Иначе
		КодФилиалаПродавца = СокрЛП(лРеквизитЭлектронногоДокумента);
	КонецЕсли;
	лРеквизитЭлектронногоДокумента = РеквизитыШапкиДокумента.Получить("HNAMESEL");
	Если лРеквизитЭлектронногоДокумента = Неопределено Тогда
		НаименованиеПродавца = "";
	Иначе
		НаименованиеПродавца = СокрЛП(лРеквизитЭлектронногоДокумента);
	КонецЕсли;
	
	лРеквизитЭлектронногоДокумента = РеквизитыШапкиДокумента.Получить("HTINBUY");
	Если лРеквизитЭлектронногоДокумента = Неопределено Тогда
		ЕДРПОУПокупателя = "";
	Иначе
		ЕДРПОУПокупателя = СокрЛП(лРеквизитЭлектронногоДокумента);
	КонецЕсли;
	лРеквизитЭлектронногоДокумента = РеквизитыШапкиДокумента.Получить("HKBUY");
	Если лРеквизитЭлектронногоДокумента = Неопределено Тогда
		ИННПокупателя = "";
	Иначе
		ИННПокупателя = СокрЛП(лРеквизитЭлектронногоДокумента);
	КонецЕсли;
	лРеквизитЭлектронногоДокумента = РеквизитыШапкиДокумента.Получить("HFBUY");
	Если лРеквизитЭлектронногоДокумента = Неопределено Тогда
		КодФилиалаПокупателя = "";
	Иначе
		КодФилиалаПокупателя = СокрЛП(лРеквизитЭлектронногоДокумента);
	КонецЕсли;
	лРеквизитЭлектронногоДокумента = РеквизитыШапкиДокумента.Получить("HNAMEBUY");
	Если лРеквизитЭлектронногоДокумента = Неопределено Тогда
		НаименованиеПокупателя = "";
	Иначе
		НаименованиеПокупателя = СокрЛП(лРеквизитЭлектронногоДокумента);
	КонецЕсли;
	
	лРеквизитЭлектронногоДокумента = РеквизитыШапкиДокумента.Получить("HERPN");
	Если лРеквизитЭлектронногоДокумента = Неопределено Тогда
		РегистрируетсяВЕРННПокупателем = Ложь;
	Иначе
		РегистрируетсяВЕРННПокупателем = (лРеквизитЭлектронногоДокумента = 1) или (лРеквизитЭлектронногоДокумента = "1");
	КонецЕсли;
	
	
	
	СуммаБезНДСЭлектронногоДокумента = 0;
	Попытка
		СуммаБезНДСЭлектронногоДокумента = СуммаБезНДСЭлектронногоДокумента + Число(РеквизитыШапкиДокумента.Получить("R01G9"));
	Исключение
	КонецПопытки;
	Попытка
		СуммаБезНДСЭлектронногоДокумента = СуммаБезНДСЭлектронногоДокумента + Число(РеквизитыШапкиДокумента.Получить("R01G11"));
	Исключение
	КонецПопытки;
	Попытка
		СуммаБезНДСЭлектронногоДокумента = СуммаБезНДСЭлектронногоДокумента + Число(РеквизитыШапкиДокумента.Получить("R01G111"));
	Исключение
	КонецПопытки;
	Попытка
		СуммаБезНДСЭлектронногоДокумента = СуммаБезНДСЭлектронногоДокумента + Число(РеквизитыШапкиДокумента.Получить("R006G03"));
	Исключение
	КонецПопытки;
	Попытка
		СуммаБезНДСЭлектронногоДокумента = СуммаБезНДСЭлектронногоДокумента + Число(РеквизитыШапкиДокумента.Получить("R007G03"));
	Исключение
	КонецПопытки;
	Попытка
		СуммаБезНДСЭлектронногоДокумента = СуммаБезНДСЭлектронногоДокумента + Число(РеквизитыШапкиДокумента.Получить("R01G14"));
	Исключение
	КонецПопытки;
	
	СуммаНДСЭлектронногоДокумента = 0;
	Попытка
		СуммаНДСЭлектронногоДокумента = СуммаНДСЭлектронногоДокумента + Число(РеквизитыШапкиДокумента.Получить("R001G03"));
	Исключение
	КонецПопытки;
	
	СуммаЭлектронногоДокумента = СуммаБезНДСЭлектронногоДокумента + СуммаНДСЭлектронногоДокумента;//0;
	//Попытка
	//	СуммаЭлектронногоДокумента = СуммаЭлектронногоДокумента + Число(РеквизитыШапкиДокумента.Получить("R04G11"));
	//Исключение
	//КонецПопытки;
	
	Возврат Истина;
КонецФункции

Процедура ДополнитьСтруктуруДаннымиСхемыВыгрузки(ВозвращаемыеПараметры, ВидЭлектронногоДокумента, ЕДРПОУВладельцаШаблона, ИмяШаблона, ВерсияШаблона, СоответствиеЗначений, Документ1С, DocId, OutId, NOTATION = Неопределено, ВхИсх = Неопределено, IsMultisided = Ложь, Route = Неопределено, SidesCount = 0, RoutePosition = 0) Экспорт
	ВозвращаемыеПараметры.Вставить("ВхИсх",       ВхИсх);
	
	ВозвращаемыеПараметры.Вставить("DocId",       DocId);
	ВозвращаемыеПараметры.Вставить("OutId",       OutId);
	ВозвращаемыеПараметры.Вставить("NOTATION",    NOTATION);
	
	Если ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент")
	или ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента")
	или ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями") Тогда
		ВозвращаемыеПараметры.Вставить("ЕДРПОУВладельцаШаблона",  ЕДРПОУВладельцаШаблона);
		ВозвращаемыеПараметры.Вставить("ИмяШаблона",  ИмяШаблона);
		ВозвращаемыеПараметры.Вставить("ВерсияШаблона",  ВерсияШаблона);
		
		лРеквизитыШапкиДокумента    = СоответствиеЗначений.Получить("0")[0];	
		лНомерЭлектронногоДокумента = лРеквизитыШапкиДокумента.Получить("NUM");
		
		Если лНомерЭлектронногоДокумента = Неопределено Тогда
			ВозвращаемыеПараметры.Вставить("НомерЭлектронногоДокумента", "<НЕТ НОМЕРА>");
			ВозвращаемыеПараметры.Вставить("НомерДокумента", "");
		Иначе
			ВозвращаемыеПараметры.Вставить("НомерЭлектронногоДокумента", Строка(лНомерЭлектронногоДокумента));
			ВозвращаемыеПараметры.Вставить("НомерДокумента", Строка(лНомерЭлектронногоДокумента));
		КонецЕсли;
		
		DOCDATE = лРеквизитыШапкиДокумента.Получить("DOCDATE");
		Если DOCDATE = Неопределено Тогда
			ВозвращаемыеПараметры.Вставить("ДатаЭлектронногоДокумента", '00010101');
			ВозвращаемыеПараметры.Вставить("ДатаДокумента",  ТекущаяДата());
		Иначе
			лДатаЭлектронногоДокумента = скEDI_СозданиеДокументовСервер.мПривестиКДате(DOCDATE, Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
			ВозвращаемыеПараметры.Вставить("ДатаЭлектронногоДокумента",  лДатаЭлектронногоДокумента);
			ВозвращаемыеПараметры.Вставить("ДатаДокумента",  лДатаЭлектронногоДокумента);
		КонецЕсли;
		
		ВозвращаемыеПараметры.Вставить("ИмяФайлаДФС",  "");
		ВозвращаемыеПараметры.Вставить("ЕДРПОУПродавца",  "");
		ВозвращаемыеПараметры.Вставить("ИННПродавца",  "");
		ВозвращаемыеПараметры.Вставить("КодФилиалаПродавца",  "");
		ВозвращаемыеПараметры.Вставить("ЕДРПОУПокупателя",  "");
		ВозвращаемыеПараметры.Вставить("ИННПокупателя",  "");
		ВозвращаемыеПараметры.Вставить("КодФилиалаПокупателя",  "");
		ВозвращаемыеПараметры.Вставить("РегистрируетсяВЕРННПокупателем",  Ложь);
		
		лСуммаБезНДСЭлектронногоДокумента = лРеквизитыШапкиДокумента.Получить("SUMWITHOUTPDV");
		Если лСуммаБезНДСЭлектронногоДокумента = Неопределено Тогда
			ВозвращаемыеПараметры.Вставить("СуммаБезНДСЭлектронногоДокумента",  0);
		Иначе
			Попытка
				ВозвращаемыеПараметры.Вставить("СуммаБезНДСЭлектронногоДокумента",  Число(лСуммаБезНДСЭлектронногоДокумента));
			Исключение
				ВозвращаемыеПараметры.Вставить("СуммаБезНДСЭлектронногоДокумента",  0);
			КонецПопытки;
		КонецЕсли;
		
		лСуммаНДСЭлектронногоДокумента = лРеквизитыШапкиДокумента.Получить("SUMPDV");
		Если лСуммаНДСЭлектронногоДокумента = Неопределено Тогда
			ВозвращаемыеПараметры.Вставить("СуммаНДСЭлектронногоДокумента",  0);
		Иначе
			Попытка
				ВозвращаемыеПараметры.Вставить("СуммаНДСЭлектронногоДокумента",  Число(лСуммаНДСЭлектронногоДокумента));
			Исключение
				ВозвращаемыеПараметры.Вставить("СуммаНДСЭлектронногоДокумента",  0);
			КонецПопытки;
		КонецЕсли;
		
		лСуммаЭлектронногоДокумента = лРеквизитыШапкиДокумента.Получить("DOCSUM");
		Если лСуммаЭлектронногоДокумента = Неопределено Тогда
			ВозвращаемыеПараметры.Вставить("СуммаЭлектронногоДокумента",  ВозвращаемыеПараметры.СуммаБезНДСЭлектронногоДокумента + ВозвращаемыеПараметры.СуммаНДСЭлектронногоДокумента);
		Иначе
			Попытка
				ВозвращаемыеПараметры.Вставить("СуммаЭлектронногоДокумента",  Число(лСуммаЭлектронногоДокумента));
			Исключение
				ВозвращаемыеПараметры.Вставить("СуммаЭлектронногоДокумента",  ВозвращаемыеПараметры.СуммаБезНДСЭлектронногоДокумента + ВозвращаемыеПараметры.СуммаНДСЭлектронногоДокумента);
			КонецПопытки;
		КонецЕсли;
		
		Если ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий Тогда
			лНаименованиеКонтрагента = лРеквизитыШапкиДокумента.Получить("FIRM_NAME");
			Если лНаименованиеКонтрагента = Неопределено Тогда
				ВозвращаемыеПараметры.Вставить("НаименованиеКонтрагента",  "");
			Иначе
				ВозвращаемыеПараметры.Вставить("НаименованиеКонтрагента",  лНаименованиеКонтрагента);
			КонецЕсли;
			лЕДРПОУКонтрагента = лРеквизитыШапкиДокумента.Получить("FIRM_EDRPOU");
			Если лЕДРПОУКонтрагента = Неопределено Тогда
				ВозвращаемыеПараметры.Вставить("ЕДРПОУКонтрагента",  "");
			Иначе
				ВозвращаемыеПараметры.Вставить("ЕДРПОУКонтрагента",  лЕДРПОУКонтрагента);
			КонецЕсли;
			лФилиалКонтрагента = лРеквизитыШапкиДокумента.Получить("FIRM_DEPT");
			Если лФилиалКонтрагента = Неопределено Тогда
				ВозвращаемыеПараметры.Вставить("ФилиалКонтрагента",  "");
			Иначе
				ВозвращаемыеПараметры.Вставить("ФилиалКонтрагента",  лФилиалКонтрагента);
			КонецЕсли;
		ИначеЕсли ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий Тогда
			лНаименованиеКонтрагента = лРеквизитыШапкиДокумента.Получить("SIDE_CD_K");
			Если лНаименованиеКонтрагента = Неопределено Тогда
				лНаименованиеКонтрагента = лРеквизитыШапкиДокумента.Получить("SIDE_SHORTNAME_K");
				Если лНаименованиеКонтрагента = Неопределено Тогда
					ВозвращаемыеПараметры.Вставить("НаименованиеКонтрагента",  "");
				Иначе
					ВозвращаемыеПараметры.Вставить("НаименованиеКонтрагента",  лНаименованиеКонтрагента);
				КонецЕсли;
			Иначе
				ВозвращаемыеПараметры.Вставить("НаименованиеКонтрагента",  лНаименованиеКонтрагента);
			КонецЕсли;
			лЕДРПОУКонтрагента = лРеквизитыШапкиДокумента.Получить("SIDE_EDRPOU_K");
			Если лЕДРПОУКонтрагента = Неопределено Тогда
				ВозвращаемыеПараметры.Вставить("ЕДРПОУКонтрагента",  "");
			Иначе
				ВозвращаемыеПараметры.Вставить("ЕДРПОУКонтрагента",  лЕДРПОУКонтрагента);
			КонецЕсли;
			лФилиалКонтрагента = лРеквизитыШапкиДокумента.Получить("SIDE_DEPT_K");
			Если лФилиалКонтрагента = Неопределено Тогда
				ВозвращаемыеПараметры.Вставить("ФилиалКонтрагента",  "");
			Иначе
				ВозвращаемыеПараметры.Вставить("ФилиалКонтрагента",  лФилиалКонтрагента);
			КонецЕсли;
		Иначе
			лНаименованиеКонтрагента = лРеквизитыШапкиДокумента.Получить("SIDE_CD_K");
			Если лНаименованиеКонтрагента = Неопределено Тогда
				лНаименованиеКонтрагента = лРеквизитыШапкиДокумента.Получить("SIDE_SHORTNAME_K");
				Если лНаименованиеКонтрагента = Неопределено Тогда
					ВозвращаемыеПараметры.Вставить("НаименованиеКонтрагента",  "");
				Иначе
					ВозвращаемыеПараметры.Вставить("НаименованиеКонтрагента",  лНаименованиеКонтрагента);
				КонецЕсли;
			Иначе
				ВозвращаемыеПараметры.Вставить("НаименованиеКонтрагента",  лНаименованиеКонтрагента);
			КонецЕсли;
			лЕДРПОУКонтрагента = лРеквизитыШапкиДокумента.Получить("SIDE_EDRPOU_K");
			Если лЕДРПОУКонтрагента = Неопределено Тогда
				ВозвращаемыеПараметры.Вставить("ЕДРПОУКонтрагента",  "");
			Иначе
				ВозвращаемыеПараметры.Вставить("ЕДРПОУКонтрагента",  лЕДРПОУКонтрагента);
			КонецЕсли;
			лФилиалКонтрагента = лРеквизитыШапкиДокумента.Получить("SIDE_DEPT_K");
			Если лФилиалКонтрагента = Неопределено Тогда
				ВозвращаемыеПараметры.Вставить("ФилиалКонтрагента",  "");
			Иначе
				ВозвращаемыеПараметры.Вставить("ФилиалКонтрагента",  лФилиалКонтрагента);
			КонецЕсли;
		КонецЕсли;
		
		лОтветственныйНаименование = лРеквизитыШапкиДокумента.Получить("VO_NAME");
		Если лОтветственныйНаименование = Неопределено Тогда
			ВозвращаемыеПараметры.Вставить("ОтветственныйНаименование",  "");
		Иначе
			ВозвращаемыеПараметры.Вставить("ОтветственныйНаименование",  лОтветственныйНаименование);
		КонецЕсли;
		
		Если IsMultisided Тогда
			ВозвращаемыеПараметры.Вставить("IsMultisided", Истина);
			Если ТипЗнч(Route) = Тип("Массив") Тогда
				Маршрут = Новый Массив;
				Для Каждого ЭлементRoute из Route Цикл
					ЭлементМаршрута = Новый Структура("ЕДРПОУКонтрагента, ФилиалКонтрагента", ЭлементRoute.Edrpou, ЭлементRoute.Dept);
					пНаименование = Неопределено;
					Если ЭлементRoute.Свойство("Name", пНаименование) Тогда
						ЭлементМаршрута.Вставить("НаименованиеКонтрагента", пНаименование);
					КонецЕсли;
					пИНН = Неопределено;
					Если ЭлементRoute.Свойство("Inn", пИНН) Тогда
						ЭлементМаршрута.Вставить("ИНН", пИНН);
					КонецЕсли;
					Маршрут.Добавить(ЭлементМаршрута);
				КонецЦикла;
				ВозвращаемыеПараметры.Вставить("Маршрут", Маршрут);
			КонецЕсли;
		Иначе
			ВозвращаемыеПараметры.Вставить("IsMultisided", Ложь);
		КонецЕсли;
	ИначеЕсли ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
		//Если Организация.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.скEDI_ЮрФизЛицо.ЮрЛицо") Тогда
		//	Если ВРег(Лев(ИмяШаблона, 1)) = "F" Тогда
		//		ИмяШаблона = "J" + Сред(ИмяШаблона, 2);
		//	КонецЕсли;
		//ИначеЕсли Организация.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.скEDI_ЮрФизЛицо.ФизЛицо") Тогда
		//	Если ВРег(Лев(ИмяШаблона, 1)) = "J" Тогда
		//		ИмяШаблона = "F" + Сред(ИмяШаблона, 2);
		//	КонецЕсли;
		//КонецЕсли;
		
		ВозвращаемыеПараметры.Вставить("ЕДРПОУВладельцаШаблона",  "");
		ВозвращаемыеПараметры.Вставить("ИмяШаблона",  ИмяШаблона);
		ВозвращаемыеПараметры.Вставить("ВерсияШаблона",  "");
		
		лНомерЭлектронногоДокумента = "";
		лНомерДокумента = "";
		лДатаЭлектронногоДокумента = "";
		лДатаДокумента = "";
		лЕДРПОУПродавца = "";
		лИННПродавца = "";
		лКодФилиалаПродавца = "";
		лНаименованиеПродавца = "";
		лЕДРПОУПокупателя = "";
		лИННПокупателя = "";
		лКодФилиалаПокупателя = "";
		лНаименованиеПокупателя = "";
		лСуммаЭлектронногоДокумента = 0;
		лСуммаБезНДСЭлектронногоДокумента = 0;
		лСуммаНДСЭлектронногоДокумента = 0;
			
		ПерваяСрокаТаблицы0 = СоответствиеЗначений.Получить("0")[0];
		ВозвращаемыеПараметры.Вставить("ИмяФайлаДФС", ПолучитьИмяФайлаНалоговогоДокументаПоРеквизитамШапки(ПерваяСрокаТаблицы0));
		ПолучитьРеквизитыНалоговойНакладнойИзРеквизитовШапкиЭлектронногоДокумента(ПерваяСрокаТаблицы0, лНомерЭлектронногоДокумента, лНомерДокумента,
			лДатаЭлектронногоДокумента, лДатаДокумента,
			лЕДРПОУПродавца, лИННПродавца, лКодФилиалаПродавца, лНаименованиеПродавца, лЕДРПОУПокупателя, лИННПокупателя, лКодФилиалаПокупателя, лНаименованиеПокупателя,
			лСуммаЭлектронногоДокумента, лСуммаБезНДСЭлектронногоДокумента, лСуммаНДСЭлектронногоДокумента);
		
		Если ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
			ВозвращаемыеПараметры.Вставить("ЕДРПОУКонтрагента",  лЕДРПОУПродавца);
			ВозвращаемыеПараметры.Вставить("ФилиалКонтрагента",  лКодФилиалаПродавца);
			ВозвращаемыеПараметры.Вставить("НаименованиеКонтрагента",  лНаименованиеПродавца);
			//ЭлектронныйДокумент_Контрагент = скEDI_НастройкиПодКонфигурацию.ПолучитьКонтрагентаПоЕДРПОУ(ЭлектронныйДокумент_ЕДРПОУКонтрагента, ЭлектронныйДокумент_ФилиалКонтрагента, Истина);
		ИначеЕсли ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
			Если ЗначениеЗаполнено(лЕДРПОУПокупателя) Тогда
				ВозвращаемыеПараметры.Вставить("ЕДРПОУКонтрагента",  лЕДРПОУПокупателя);
				ВозвращаемыеПараметры.Вставить("ФилиалКонтрагента",  лКодФилиалаПокупателя);
				ВозвращаемыеПараметры.Вставить("НаименованиеКонтрагента",  лНаименованиеПокупателя);
				//ЭлектронныйДокумент_Контрагент = скEDI_НастройкиПодКонфигурацию.ПолучитьКонтрагентаПоЕДРПОУ(ЭлектронныйДокумент_ЕДРПОУКонтрагента, ЭлектронныйДокумент_ФилиалКонтрагента, Истина);
			Иначе
				Если ЗначениеЗаполнено(Документ1С) Тогда
					лСтруктураДанныхКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеКонтрагентаПоДокументу1С(Документ1С);
					ВозвращаемыеПараметры.Вставить("ЕДРПОУКонтрагента",  лСтруктураДанныхКонтрагента.ЕДРПОУКонтрагента);
					ВозвращаемыеПараметры.Вставить("ФилиалКонтрагента",  лСтруктураДанныхКонтрагента.ФилиалКонтрагента);
					ВозвращаемыеПараметры.Вставить("НаименованиеКонтрагента",  лСтруктураДанныхКонтрагента.НаименованиеКонтрагента);
					//ЭлектронныйДокумент_Контрагент = лСтруктураДанныхКонтрагента.Контрагент;
				Иначе
					ВозвращаемыеПараметры.Вставить("ЕДРПОУКонтрагента",  "");
					ВозвращаемыеПараметры.Вставить("ФилиалКонтрагента",  "");
					ВозвращаемыеПараметры.Вставить("НаименованиеКонтрагента",  "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ВозвращаемыеПараметры.Вставить("НомерЭлектронногоДокумента", лНомерЭлектронногоДокумента);
		ВозвращаемыеПараметры.Вставить("НомерДокумента", лНомерДокумента);
		ВозвращаемыеПараметры.Вставить("ДатаЭлектронногоДокумента",  лДатаЭлектронногоДокумента);
		ВозвращаемыеПараметры.Вставить("ДатаДокумента",  лДатаДокумента);
		ВозвращаемыеПараметры.Вставить("ЕДРПОУПродавца",  лЕДРПОУПродавца);
		ВозвращаемыеПараметры.Вставить("ИННПродавца",  лИННПродавца);
		ВозвращаемыеПараметры.Вставить("КодФилиалаПродавца",  лКодФилиалаПродавца);
		ВозвращаемыеПараметры.Вставить("ЕДРПОУПокупателя",  лЕДРПОУПокупателя);
		ВозвращаемыеПараметры.Вставить("ИННПокупателя",  лИННПокупателя);
		ВозвращаемыеПараметры.Вставить("КодФилиалаПокупателя",  лКодФилиалаПокупателя);
		ВозвращаемыеПараметры.Вставить("РегистрируетсяВЕРННПокупателем",  Ложь);
		ВозвращаемыеПараметры.Вставить("СуммаЭлектронногоДокумента",  лСуммаЭлектронногоДокумента);
		ВозвращаемыеПараметры.Вставить("СуммаБезНДСЭлектронногоДокумента",  лСуммаБезНДСЭлектронногоДокумента);
		ВозвращаемыеПараметры.Вставить("СуммаНДСЭлектронногоДокумента",  лСуммаНДСЭлектронногоДокумента);
	ИначеЕсли ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
		//Если Организация.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.скEDI_ЮрФизЛицо.ЮрЛицо") Тогда
		//	Если ВРег(Лев(ИмяШаблона, 1)) = "F" Тогда
		//		ИмяШаблона = "J" + Сред(ИмяШаблона, 2);
		//	КонецЕсли;
		//ИначеЕсли Организация.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.скEDI_ЮрФизЛицо.ФизЛицо") Тогда
		//	Если ВРег(Лев(ИмяШаблона, 1)) = "J" Тогда
		//		ИмяШаблона = "F" + Сред(ИмяШаблона, 2);
		//	КонецЕсли;
		//КонецЕсли;
		
		ВозвращаемыеПараметры.Вставить("ЕДРПОУВладельцаШаблона",  "");
		ВозвращаемыеПараметры.Вставить("ИмяШаблона",  ИмяШаблона);
		ВозвращаемыеПараметры.Вставить("ВерсияШаблона",  "");
		
		лНомерЭлектронногоДокумента = "";
		лНомерДокумента = "";
		лДатаЭлектронногоДокумента = "";
		лДатаДокумента = "";
		лЕДРПОУПродавца = "";
		лИННПродавца = "";
		лКодФилиалаПродавца = "";
		лНаименованиеПродавца = "";
		лЕДРПОУПокупателя = "";
		лИННПокупателя = "";
		лКодФилиалаПокупателя = "";
		лНаименованиеПокупателя = "";
		лРегистрируетсяВЕРННПокупателем = Ложь;
		лСуммаЭлектронногоДокумента = 0;
		лСуммаБезНДСЭлектронногоДокумента = 0;
		лСуммаНДСЭлектронногоДокумента = 0;
			
		ПерваяСрокаТаблицы0 = СоответствиеЗначений.Получить("0")[0];
		ВозвращаемыеПараметры.Вставить("ИмяФайлаДФС", ПолучитьИмяФайлаНалоговогоДокументаПоРеквизитамШапки(ПерваяСрокаТаблицы0));
		ПолучитьРеквизитыПриложения2ИзРеквизитовШапкиЭлектронногоДокумента(ПерваяСрокаТаблицы0, лНомерЭлектронногоДокумента, лНомерДокумента,
			лДатаЭлектронногоДокумента, лДатаДокумента,
			лЕДРПОУПродавца, лИННПродавца, лКодФилиалаПродавца, лНаименованиеПродавца, лЕДРПОУПокупателя, лИННПокупателя, лКодФилиалаПокупателя, лНаименованиеПокупателя, лРегистрируетсяВЕРННПокупателем,
			лСуммаЭлектронногоДокумента, лСуммаБезНДСЭлектронногоДокумента, лСуммаНДСЭлектронногоДокумента);
		
		Если ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
			ВозвращаемыеПараметры.Вставить("ЕДРПОУКонтрагента",  лЕДРПОУПродавца);
			ВозвращаемыеПараметры.Вставить("ФилиалКонтрагента",  лКодФилиалаПродавца);
			ВозвращаемыеПараметры.Вставить("НаименованиеКонтрагента",  лНаименованиеПродавца);
			//ЭлектронныйДокумент_Контрагент = скEDI_НастройкиПодКонфигурацию.ПолучитьКонтрагентаПоЕДРПОУ(ЭлектронныйДокумент_ЕДРПОУКонтрагента, ЭлектронныйДокумент_ФилиалКонтрагента, Истина);
		ИначеЕсли ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
			Если ЗначениеЗаполнено(лЕДРПОУПокупателя) Тогда
				ВозвращаемыеПараметры.Вставить("ЕДРПОУКонтрагента",  лЕДРПОУПокупателя);
				ВозвращаемыеПараметры.Вставить("ФилиалКонтрагента",  лКодФилиалаПокупателя);
				ВозвращаемыеПараметры.Вставить("НаименованиеКонтрагента",  лНаименованиеПокупателя);
				//ЭлектронныйДокумент_Контрагент = скEDI_НастройкиПодКонфигурацию.ПолучитьКонтрагентаПоЕДРПОУ(ЭлектронныйДокумент_ЕДРПОУКонтрагента, ЭлектронныйДокумент_ФилиалКонтрагента, Истина);
			Иначе
				Если ЗначениеЗаполнено(Документ1С) Тогда
					лСтруктураДанныхКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеКонтрагентаПоДокументу1С(Документ1С);
					ВозвращаемыеПараметры.Вставить("ЕДРПОУКонтрагента",  лСтруктураДанныхКонтрагента.ЕДРПОУКонтрагента);
					ВозвращаемыеПараметры.Вставить("ФилиалКонтрагента",  лСтруктураДанныхКонтрагента.ФилиалКонтрагента);
					ВозвращаемыеПараметры.Вставить("НаименованиеКонтрагента",  лСтруктураДанныхКонтрагента.НаименованиеКонтрагента);
					//ЭлектронныйДокумент_Контрагент = лСтруктураДанныхКонтрагента.Контрагент;
				Иначе
					ВозвращаемыеПараметры.Вставить("ЕДРПОУКонтрагента",  "");
					ВозвращаемыеПараметры.Вставить("ФилиалКонтрагента",  "");
					ВозвращаемыеПараметры.Вставить("НаименованиеКонтрагента",  "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ВозвращаемыеПараметры.Вставить("НомерЭлектронногоДокумента", лНомерЭлектронногоДокумента);
		ВозвращаемыеПараметры.Вставить("НомерДокумента", лНомерДокумента);
		ВозвращаемыеПараметры.Вставить("ДатаЭлектронногоДокумента",  лДатаЭлектронногоДокумента);
		ВозвращаемыеПараметры.Вставить("ДатаДокумента",  лДатаДокумента);
		ВозвращаемыеПараметры.Вставить("ЕДРПОУПродавца",  лЕДРПОУПродавца);
		ВозвращаемыеПараметры.Вставить("ИННПродавца",  лИННПродавца);
		ВозвращаемыеПараметры.Вставить("КодФилиалаПродавца",  лКодФилиалаПродавца);
		ВозвращаемыеПараметры.Вставить("ЕДРПОУПокупателя",  лЕДРПОУПокупателя);
		ВозвращаемыеПараметры.Вставить("ИННПокупателя",  лИННПокупателя);
		ВозвращаемыеПараметры.Вставить("КодФилиалаПокупателя",  лКодФилиалаПокупателя);
		ВозвращаемыеПараметры.Вставить("РегистрируетсяВЕРННПокупателем",  лРегистрируетсяВЕРННПокупателем);
		ВозвращаемыеПараметры.Вставить("СуммаЭлектронногоДокумента",  лСуммаЭлектронногоДокумента);
		ВозвращаемыеПараметры.Вставить("СуммаБезНДСЭлектронногоДокумента",  лСуммаБезНДСЭлектронногоДокумента);
		ВозвращаемыеПараметры.Вставить("СуммаНДСЭлектронногоДокумента",  лСуммаНДСЭлектронногоДокумента);
	КонецЕсли;
КонецПроцедуры

Процедура ПрочитатьСтруктуруТаблицыДокументовДляМногостороннихДокументов(СтруктураТаблицыДокументов, Признак_IsMultisided, Признак_SidesCount, Признак_Route) Экспорт
	Признак_IsMultisided = Ложь;
	Признак_SidesCount = 0;
	Признак_Route = Новый Массив;
	
	ПризнакШаблонаСМногостороннимОбменом = Неопределено;
	Если СтруктураТаблицыДокументов.Свойство("IsMultisided", ПризнакШаблонаСМногостороннимОбменом) Тогда
		Если ПризнакШаблонаСМногостороннимОбменом = Истина Тогда
			Признак_IsMultisided = Истина;
			ПризнакRoute = Неопределено;
			Если СтруктураТаблицыДокументов.Свойство("Route", ПризнакRoute) Тогда
				Если ТипЗнч(ПризнакRoute) = Тип("Массив") Тогда
					Для Каждого ЭлементПризнакаRoute из ПризнакRoute Цикл
						ЭлементМассива_Route = Новый Структура;
						ЭлементМассива_Route.Вставить("Edrpou", ЭлементПризнакаRoute.Edrpou);
						ЭлементМассива_Route.Вставить("Dept", ЭлементПризнакаRoute.Dept);
						Признак_Route.Добавить(ЭлементМассива_Route);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			ПризнакSidesCount = Неопределено;
			Если СтруктураТаблицыДокументов.Свойство("SidesCount", ПризнакSidesCount) Тогда
				Признак_SidesCount = ПризнакSidesCount;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПрочитатьДанныеМногостороннегоДокументаПоУмолчанию(ДанныеСтрокиТаблицы0, Признак_IsMultisided, Признак_SidesCount, Признак_Route, ОрганизацияEDI, IsMultisided, Route, SidesCount) Экспорт
	IsMultisided = Ложь;
	Route = Неопределено;
	SidesCount = 0;
	Если Признак_IsMultisided = Истина Тогда
		IsMultisided = Истина;
		Route = Новый Массив;
		ФлагОгрКонтр = Истина;
		Для Каждого ЭлементТаблицыRoute из Признак_Route Цикл
			ЭлементRoute = Новый Структура;
			ЗначениеEdrpou = ДанныеСтрокиТаблицы0.Получить(ЭлементТаблицыRoute.Edrpou);
			ЗначениеDept = ДанныеСтрокиТаблицы0.Получить(ЭлементТаблицыRoute.Dept);
			
			Если ЗначениеEdrpou = Неопределено Тогда
				ЭлементRoute.Вставить("Edrpou", "");
				ЗначениеEdrpou = "";
			Иначе
				ЭлементRoute.Вставить("Edrpou", ЗначениеEdrpou);
			КонецЕсли;
			Если ЗначениеDept = Неопределено Тогда
				ЭлементRoute.Вставить("Dept", "");
				ЗначениеDept = "";
			Иначе
				ЭлементRoute.Вставить("Dept", ЗначениеDept);
			КонецЕсли;
			Если ФлагОгрКонтр Тогда
				Если ЗначениеEdrpou = ОрганизацияEDI.Код и ЗначениеDept = ОрганизацияEDI.Филиал Тогда
					ЭлементRoute.Вставить("Ссылка", ОрганизацияEDI);
					Если ЗначениеЗаполнено(ОрганизацияEDI.Организация1С) Тогда
						ДанныеПоОгранизации = скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеПоОгранизации(ОрганизацияEDI.Организация1С);
						Если ЗначениеЗаполнено(ДанныеПоОгранизации.ИНН) Тогда
							ЭлементRoute.Вставить("Inn", ДанныеПоОгранизации.ИНН);
						КонецЕсли;
						ЭлементRoute.Вставить("Name", ДанныеПоОгранизации.Наименование);
					Иначе
						//НовыйЭлементМаршрута.ИНН = "";
						ЭлементRoute.Вставить("Name", ОрганизацияEDI.Наименование);
					КонецЕсли;
				Иначе
					ЭлементRoute.Вставить("Ссылка", ПредопределенноеЗначение("Справочник.скEDI_Организации.ПустаяСсылка"));
				КонецЕсли;
				
				ФлагОгрКонтр = Ложь;
			Иначе
				лКонтрагент = скEDI_НастройкиПодКонфигурацию.ПолучитьКонтрагентаПоЕДРПОУ(ЗначениеEdrpou, ЗначениеDept, Истина);
				Если ЗначениеЗаполнено(лКонтрагент) Тогда
					ЭлементRoute.Вставить("Ссылка", лКонтрагент);
					лСтруктураДанныхКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьРеквизитыКонтрагента(лКонтрагент);
					Если ЗначениеЗаполнено(лСтруктураДанныхКонтрагента.ИНН) Тогда
						ЭлементRoute.Вставить("Inn", лСтруктураДанныхКонтрагента.ИНН);
					КонецЕсли;
					ЭлементRoute.Вставить("Name", лСтруктураДанныхКонтрагента.Наименование);
				Иначе
					ЭлементRoute.Вставить("Ссылка", ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
					//НовыйЭлементМаршрута.ИНН = "";
					//ЭлементRoute.Вставить("Name", "");
				КонецЕсли;
			КонецЕсли;
			
			Route.Добавить(ЭлементRoute);
		КонецЦикла;
		SidesCount = Признак_SidesCount;
	КонецЕсли;
КонецПроцедуры

Процедура ВыгрузитьДокументы1СВСоответствиеЗначений(ТаблицаДанныхДокументов, ДополнительныеПараметры = Неопределено) Экспорт
	Если ДополнительныеПараметры <> Неопределено Тогда 
		
		Если ДополнительныеПараметры.Свойство("ЖурналОперации") Тогда 
			ЖурналОперации = ДополнительныеПараметры.ЖурналОперации;	
		Иначе
			ЖурналОперации = "";
		КонецЕсли;	
			
	Иначе
		ЖурналОперации = "";
	КонецЕсли;	
	
	ЕстьКолонкаТело        = ТаблицаДанныхДокументов.Колонки.Найти("ТелоДокумента") <> Неопределено;
	ЕстьКолонкаИзображение = ТаблицаДанныхДокументов.Колонки.Найти("ИзображениеДокумента") <> Неопределено;
	ЕстьКолонкаДатаСозданияДокумента = ТаблицаДанныхДокументов.Колонки.Найти("ДатаСозданияДокумента") <> Неопределено;
	
	КешСхем = Неопределено;
	
	Для Каждого ДанныеДокумента Из ТаблицаДанныхДокументов Цикл 
		фОбработано = Ложь;
		
		Документ1С               = ДанныеДокумента.Документ1С;
		ЭлектронныйДокумент      = ДанныеДокумента.ЭлектронныйДокумент;
		ВозвращаемыеПараметры    = Новый Структура;//ДанныеДокумента.ПараметрыСозданияДокументов;
		СоответствиеЗначений     = Новый Соответствие;//ДанныеДокумента.СоответствиеЗначенийРеквизитов;
		ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;						
		ВидДокумента             = ДанныеДокумента.ВидДокумента1С;
		Организация              = ВидЭлектронногоДокумента.Владелец;
		NOTATION = ДанныеДокумента.Примечание;
		
		ДанныеДокумента.ЕстьОшибки = Истина;
		
		ТипДокументаMEDoc = Неопределено;
		Если ВидЭлектронногоДокумента.ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная Тогда
			ТипДокументаMEDoc = Перечисления.скEDI_ТипыДокументовMEDoc.Т10100;
		ИначеЕсли ВидЭлектронногоДокумента.ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной Тогда
			ТипДокументаMEDoc = Перечисления.скEDI_ТипыДокументовMEDoc.Т10101;
		КонецЕсли;
		Если ТипДокументаMEDoc <> Неопределено Тогда
			
			ПараметрыСозданияДокументов = ДанныеДокумента.ПараметрыСозданияДокументов;
			СоответствиеЗначенийРеквизитов = ДанныеДокумента.СоответствиеЗначенийРеквизитов;
			Если ТипЗнч(ПараметрыСозданияДокументов) = Тип("Структура") Тогда
				ПоДаннымХранилищаРеквизитов = Неопределено;
				Если ПараметрыСозданияДокументов.Свойство("ПоДаннымХранилищаРеквизитов", ПоДаннымХранилищаРеквизитов) Тогда
					Если ПоДаннымХранилищаРеквизитов = Истина Тогда
						ДанныеДокумента.ЕстьОшибки = Ложь;
						фОбработано = Истина;//Продолжить;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан") Тогда
					Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
						Если ЭлектронныйДокумент.ПоДаннымХранилищаРеквизитов Тогда
							СоответствиеЗначений = ЭлектронныйДокумент.ХранилищеРеквизитовЭлектронногоДокумента.Получить();
							Если СоответствиеЗначений <> Неопределено Тогда
								IsMultisided = Ложь;
								Route = Неопределено;
								SidesCount = 0;
								ВозвращаемыеПараметры = Новый Структура;
								DocId = "";
								OutId = "";
								Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
									Если ЭлектронныйДокумент.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ПустаяСсылка") Тогда
										Если ЗначениеЗаполнено(ЭлектронныйДокумент.ИдентификаторДокумента) Тогда
											DocId = ЭлектронныйДокумент.ИдентификаторДокумента;
										Иначе
											DocId = ВРег(Строка(Новый УникальныйИдентификатор));
										КонецЕсли;
										Если ЗначениеЗаполнено(ЭлектронныйДокумент.ИдентификаторДокументаВБазеДанныхКонтрагента) Тогда
											OutId = ЭлектронныйДокумент.ИдентификаторДокументаВБазеДанныхКонтрагента;
										КонецЕсли;
									ИначеЕсли ЭлектронныйДокумент.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
										Если ЗначениеЗаполнено(ЭлектронныйДокумент.ИдентификаторДокумента) Тогда
											DocId = ЭлектронныйДокумент.ИдентификаторДокумента;
										Иначе
											DocId = ВРег(Строка(Новый УникальныйИдентификатор));
										КонецЕсли;
										Если ЗначениеЗаполнено(ЭлектронныйДокумент.ИдентификаторДокументаВБазеДанныхКонтрагента) Тогда
											OutId = ЭлектронныйДокумент.ИдентификаторДокументаВБазеДанныхКонтрагента;
										КонецЕсли;
									Иначе
										
									КонецЕсли;
								Иначе
									DocId = ВРег(Строка(Новый УникальныйИдентификатор));
								КонецЕсли;
								
								ДополнитьСтруктуруДаннымиСхемыВыгрузки(ВозвращаемыеПараметры, ВидЭлектронногоДокумента, ЭлектронныйДокумент.ЕДРПОУВладельцаШаблона, ЭлектронныйДокумент.ИмяШаблона, ЭлектронныйДокумент.ВерсияШаблона, СоответствиеЗначений, Документ1С, DocId, OutId, ЭлектронныйДокумент.NOTATION, ЭлектронныйДокумент.ВхИсх, IsMultisided, Route, SidesCount);
								ВозвращаемыеПараметры.Вставить("ПоДаннымХранилищаРеквизитов", Истина);
								
								фОбработано = Истина;//Продолжить;
								ДанныеДокумента.ЕстьОшибки = Ложь;
								
								ДанныеДокумента.ПараметрыСозданияДокументов    = ВозвращаемыеПараметры;
								ДанныеДокумента.СоответствиеЗначенийРеквизитов = СоответствиеЗначений;
							КонецЕсли;
					   КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если не фОбработано Тогда
				ИмяШаблона = "";
				Если скEDI_НалоговыеДокументы.ВыгрузитьНалоговыйДокумент1СВСоответствиеЗначений(КешСхем, ИмяШаблона, СоответствиеЗначений, ТипДокументаMEDoc, ВидЭлектронногоДокумента, Организация, Документ1С, ДанныеДокумента, ДополнительныеПараметры) Тогда
					ДополнитьСтруктуруДаннымиСхемыВыгрузки(ВозвращаемыеПараметры, ВидЭлектронногоДокумента, "", ИмяШаблона, "", СоответствиеЗначений, Документ1С, "", "", "", Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий);
					// Заполнение данных таблицы
					лСтруктураДанныхКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеКонтрагентаПоДокументу1С(Документ1С);
					ВозвращаемыеПараметры.Вставить("ЕДРПОУКонтрагента", лСтруктураДанныхКонтрагента.ЕДРПОУКонтрагента);
					ВозвращаемыеПараметры.Вставить("ФилиалКонтрагента", лСтруктураДанныхКонтрагента.ФилиалКонтрагента);
					
					ДанныеДокумента.ЕстьОшибки = Ложь;
					
					ДанныеДокумента.ПараметрыСозданияДокументов    = ВозвращаемыеПараметры;
					ДанныеДокумента.СоответствиеЗначенийРеквизитов = СоответствиеЗначений;
					
					фОбработано = Истина;//Продолжить;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЕДРПОУВладельцаШаблона = "";
			ИмяШаблона = "";
			ВерсияШаблона = "";
			
			ЗаполнятьРеквизитыПоДаннымЭлектроннойФормы = Ложь;
			ЗаполнятьРеквизитыПоДаннымСхеммВыгрузки = Ложь;
			ЗаполнятьМаршрутПоДаннымЭлектроннойФормы = Ложь;
			ЗаполнятьМаршрутДаннымиПоУмолчанию = Ложь;
			МассивМаршрутПоДаннымЭлектроннойФормы = Неопределено;
			МаршрутПоДаннымЭлектроннойФормыРучнаяУстановка = Ложь;
			ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий;
			
			ПараметрыСозданияДокументов = ДанныеДокумента.ПараметрыСозданияДокументов;
			СоответствиеЗначенийРеквизитов = ДанныеДокумента.СоответствиеЗначенийРеквизитов;
			Если ТипЗнч(ПараметрыСозданияДокументов) = Тип("Структура") Тогда
				пВхИсх = Неопределено;
				Если ПараметрыСозданияДокументов.Свойство("ВхИсх", пВхИсх) Тогда
					ВхИсх = пВхИсх;
				КонецЕсли;
				
				ПоДаннымХранилищаРеквизитов = Неопределено;
				Если ПараметрыСозданияДокументов.Свойство("ПоДаннымХранилищаРеквизитов", ПоДаннымХранилищаРеквизитов) Тогда
					Если ПоДаннымХранилищаРеквизитов = Истина Тогда
						Если ТипЗнч(СоответствиеЗначенийРеквизитов) = Тип("Соответствие") Тогда
							ЗаполнятьРеквизитыПоДаннымЭлектроннойФормы = СоответствиеЗначенийРеквизитов.Получить("РеквизитиПоДаннымЭлектроннойФормы");
							Если ЗаполнятьРеквизитыПоДаннымЭлектроннойФормы = Ложь Тогда
								ЗаполнятьРеквизитыПоДаннымСхеммВыгрузки = Истина;
							Иначе
								ЗаполнятьРеквизитыПоДаннымЭлектроннойФормы = Истина;
								СоответствиеЗначений = СоответствиеЗначенийРеквизитов;
								пЗначениеСвойства = Неопределено;
								Если ПараметрыСозданияДокументов.Свойство("ЕДРПОУВладельцаШаблона", пЗначениеСвойства) Тогда
									ЕДРПОУВладельцаШаблона = пЗначениеСвойства;
								КонецЕсли;
								Если ПараметрыСозданияДокументов.Свойство("ИмяШаблона", пЗначениеСвойства) Тогда
									ИмяШаблона = пЗначениеСвойства;
								КонецЕсли;
								Если ПараметрыСозданияДокументов.Свойство("ВерсияШаблона", пЗначениеСвойства) Тогда
									ВерсияШаблона = пЗначениеСвойства;
								КонецЕсли;
							КонецЕсли;
								
							Если СоответствиеЗначенийРеквизитов.Получить("МаршрутПоДаннымЭлектроннойФормы") = Истина Тогда
								МассивМаршрутПоДаннымЭлектроннойФормы = СоответствиеЗначенийРеквизитов.Получить("Маршрут");
								Если ТипЗнч(МассивМаршрутПоДаннымЭлектроннойФормы) = Тип("Массив") Тогда
									МаршрутПоДаннымЭлектроннойФормыРучнаяУстановка = СоответствиеЗначенийРеквизитов.Получить("МаршрутПоДаннымЭлектроннойФормыРучнаяУстановка") = Истина;
									ЗаполнятьМаршрутПоДаннымЭлектроннойФормы = Истина;
								Иначе
									ЗаполнятьМаршрутДаннымиПоУмолчанию = Истина;
								КонецЕсли;
							Иначе
								ЗаполнятьМаршрутДаннымиПоУмолчанию = Истина;
							КонецЕсли;
						Иначе
							ЗаполнятьРеквизитыПоДаннымСхеммВыгрузки = Истина;
							ЗаполнятьМаршрутДаннымиПоУмолчанию = Истина;
						КонецЕсли;
					Иначе
						ЗаполнятьРеквизитыПоДаннымСхеммВыгрузки = Истина;
						ЗаполнятьМаршрутДаннымиПоУмолчанию = Истина;
					КонецЕсли;
				Иначе
					ЗаполнятьРеквизитыПоДаннымСхеммВыгрузки = Истина;
					ЗаполнятьМаршрутДаннымиПоУмолчанию = Истина;
				КонецЕсли;
			Иначе
				ПараметрыСозданияДокументов = Неопределено;
				СоответствиеЗначенийРеквизитов = Неопределено;
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан") Тогда
					Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
						ВхИсх = ЭлектронныйДокумент.ВхИсх;
						Если ЭлектронныйДокумент.ПоДаннымХранилищаРеквизитов Тогда
							СоответствиеЗначений = ЭлектронныйДокумент.ХранилищеРеквизитовЭлектронногоДокумента.Получить();
							Если ТипЗнч(СоответствиеЗначений) = Тип("Соответствие") Тогда
								ЗаполнятьРеквизитыПоДаннымЭлектроннойФормы = СоответствиеЗначений.Получить("РеквизитиПоДаннымЭлектроннойФормы");
								Если ЗаполнятьРеквизитыПоДаннымЭлектроннойФормы = Ложь Тогда
									ЗаполнятьРеквизитыПоДаннымСхеммВыгрузки = Истина;
								Иначе
									ЗаполнятьРеквизитыПоДаннымЭлектроннойФормы = Истина;
								КонецЕсли;
									
								Если СоответствиеЗначений.Получить("МаршрутПоДаннымЭлектроннойФормы") = Истина Тогда
									МассивМаршрутПоДаннымЭлектроннойФормы = СоответствиеЗначений.Получить("Маршрут");
									Если ТипЗнч(МассивМаршрутПоДаннымЭлектроннойФормы) = Тип("Массив") Тогда
										МаршрутПоДаннымЭлектроннойФормыРучнаяУстановка = СоответствиеЗначений.Получить("МаршрутПоДаннымЭлектроннойФормыРучнаяУстановка") = Истина;
										ЗаполнятьМаршрутПоДаннымЭлектроннойФормы = Истина;
									Иначе
										ЗаполнятьМаршрутДаннымиПоУмолчанию = Истина;
									КонецЕсли;
								Иначе
									ЗаполнятьМаршрутДаннымиПоУмолчанию = Истина;
								КонецЕсли;
							Иначе
								ЗаполнятьРеквизитыПоДаннымСхеммВыгрузки = Истина;
								ЗаполнятьМаршрутДаннымиПоУмолчанию = Истина;
							КонецЕсли;
						Иначе
							ЗаполнятьРеквизитыПоДаннымСхеммВыгрузки = Истина;
							ЗаполнятьМаршрутДаннымиПоУмолчанию = Истина;
						КонецЕсли;
						Если ЗаполнятьРеквизитыПоДаннымЭлектроннойФормы Тогда
							ЕДРПОУВладельцаШаблона = ЭлектронныйДокумент.ЕДРПОУВладельцаШаблона;
							ИмяШаблона = ЭлектронныйДокумент.ИмяШаблона;
							ВерсияШаблона = ЭлектронныйДокумент.ВерсияШаблона;
						КонецЕсли;
					Иначе
						ЗаполнятьРеквизитыПоДаннымСхеммВыгрузки = Истина;
						ЗаполнятьМаршрутДаннымиПоУмолчанию = Истина;
					КонецЕсли;
				Иначе
					ЗаполнятьРеквизитыПоДаннымСхеммВыгрузки = Истина;
					ЗаполнятьМаршрутДаннымиПоУмолчанию = Истина;
				КонецЕсли;
			КонецЕсли;
			
			IsMultisided = Ложь;
			Route = Неопределено;
			SidesCount = 0;
			Если ПараметрыСозданияДокументов = Неопределено Тогда
				ВозвращаемыеПараметры = Новый Структура;
			Иначе
				ВозвращаемыеПараметры = ПараметрыСозданияДокументов;
			КонецЕсли;
			DocId = "";
			OutId = "";
			Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
				Если ЭлектронныйДокумент.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ПустаяСсылка") Тогда
					Если ЗначениеЗаполнено(ЭлектронныйДокумент.ИдентификаторДокумента) Тогда
						DocId = ЭлектронныйДокумент.ИдентификаторДокумента;
					Иначе
						DocId = ВРег(Строка(Новый УникальныйИдентификатор));
					КонецЕсли;
					Если ЗначениеЗаполнено(ЭлектронныйДокумент.ИдентификаторДокументаВБазеДанныхКонтрагента) Тогда
						OutId = ЭлектронныйДокумент.ИдентификаторДокументаВБазеДанныхКонтрагента;
					КонецЕсли;
				ИначеЕсли ЭлектронныйДокумент.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
					Если ЗначениеЗаполнено(ЭлектронныйДокумент.ИдентификаторДокумента) Тогда
						DocId = ЭлектронныйДокумент.ИдентификаторДокумента;
					Иначе
						DocId = ВРег(Строка(Новый УникальныйИдентификатор));
					КонецЕсли;
					Если ЗначениеЗаполнено(ЭлектронныйДокумент.ИдентификаторДокументаВБазеДанныхКонтрагента) Тогда
						OutId = ЭлектронныйДокумент.ИдентификаторДокументаВБазеДанныхКонтрагента;
					КонецЕсли;
				Иначе
					
				КонецЕсли;
				Если ЗначениеЗаполнено(ЭлектронныйДокумент.NOTATION) Тогда
					NOTATION = ЭлектронныйДокумент.NOTATION;
				КонецЕсли;
			ИначеЕсли ТипЗнч(ПараметрыСозданияДокументов) = Тип("Структура") Тогда
				пDocId = Неопределено;
				Если ПараметрыСозданияДокументов.Свойство("DocId", пDocId) Тогда
					DocId = пDocId;
				КонецЕсли;
				пOutId = Неопределено;
				Если ПараметрыСозданияДокументов.Свойство("OutId", пOutId) Тогда
					OutId = пOutId;
				КонецЕсли;
				пNOTATION = Неопределено;
				Если ПараметрыСозданияДокументов.Свойство("NOTATION", пNOTATION) Тогда
					NOTATION = пNOTATION;
				КонецЕсли;
			КонецЕсли;
			
			Если не ЗначениеЗаполнено(DocId) Тогда
				DocId = ВРег(Строка(Новый УникальныйИдентификатор));
			КонецЕсли;
			
			
			Если ЗаполнятьРеквизитыПоДаннымСхеммВыгрузки Тогда
				СписокПравилВыгрузки = ПолучитьПравилаВыгрузки(ВидЭлектронногоДокумента, ВидДокумента);
				
				Для Каждого СтрокаДокументы1С Из СписокПравилВыгрузки Цикл
					ЕДРПОУВладельцаШаблона    = СтрокаДокументы1С.ЕДРПОУВладельцаШаблона;
					ИмяШаблона    = СтрокаДокументы1С.ИмяШаблона;
					ВерсияШаблона    = СтрокаДокументы1С.ВерсияШаблона;
					ТаблицаДанных = Неопределено;
					
					ДопЗначенияРеквизитовТаблицы0 = Новый Соответствие;
					IsMultisided = Ложь;
					Route = Неопределено;
					SidesCount = 0;
					Если ВыгрузитьДокументВСоответствиеЗначенийПоСхемамВыгрузки(СоответствиеЗначений, Документ1С, ВидЭлектронногоДокумента, ВидЭлектронногоДокумента.Владелец, СтрокаДокументы1С, ЕДРПОУВладельцаШаблона, ИмяШаблона, ВерсияШаблона, ДопЗначенияРеквизитовТаблицы0, ДополнительныеПараметры, ЗаполнятьМаршрутДаннымиПоУмолчанию, IsMultisided, Route, SidesCount) Тогда
						СоответствиеЗначений.Вставить("РеквизитиПоДаннымЭлектроннойФормы", Ложь);
						Если ЗаполнятьМаршрутПоДаннымЭлектроннойФормы Тогда
							ВозвращаемыеПараметры.Вставить("ПоДаннымХранилищаРеквизитов", Истина);
							Если IsMultisided = Истина Тогда
								Route = Новый Массив;
								SidesCount = 0;
								Для Каждого ЭлементМаршрута Из МассивМаршрутПоДаннымЭлектроннойФормы Цикл
									ЭлементRoute = Новый Структура;
									ЭлементRoute.Вставить("Edrpou", ЭлементМаршрута.Получить("Edrpou"));
									ЭлементRoute.Вставить("Dept", ЭлементМаршрута.Получить("Dept"));
									ЭлементRoute.Вставить("Inn", ЭлементМаршрута.Получить("Inn"));
									ЭлементRoute.Вставить("Name", ЭлементМаршрута.Получить("Name"));
									Route.Добавить(ЭлементRoute);
									SidesCount = SidesCount + 1;
								КонецЦикла;
								СоответствиеЗначений.Вставить("МаршрутПоДаннымЭлектроннойФормы", Истина);
								СоответствиеЗначений.Вставить("МаршрутПоДаннымЭлектроннойФормыРучнаяУстановка", МаршрутПоДаннымЭлектроннойФормыРучнаяУстановка = Истина);
								СоответствиеЗначений.Вставить("Маршрут", МассивМаршрутПоДаннымЭлектроннойФормы);
							КонецЕсли;
						ИначеЕсли ЗаполнятьМаршрутДаннымиПоУмолчанию Тогда
							Если IsMultisided = Истина Тогда
								СоответствиеЗначений.Вставить("МаршрутПоДаннымЭлектроннойФормы", Ложь);
								СоответствиеЗначений.Вставить("МаршрутПоДаннымЭлектроннойФормыРучнаяУстановка", Ложь);
								СоответствиеЗначений.Вставить("Маршрут", Route);
							КонецЕсли;
						КонецЕсли;
						ДополнитьСтруктуруДаннымиСхемыВыгрузки(ВозвращаемыеПараметры, ВидЭлектронногоДокумента, ЕДРПОУВладельцаШаблона, ИмяШаблона, ВерсияШаблона, СоответствиеЗначений, Документ1С, DocId, OutId, NOTATION, Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий, IsMultisided, Route, SidesCount, 0);
						// Заполнение данных таблицы
						ДанныеДокумента.ЕстьОшибки = Ложь;
						
						//ВозвращаемыеПараметры.Вставить("DocId", DocId);
						//ВозвращаемыеПараметры.Вставить("OutId", OutId);//?
						
						ДанныеДокумента.ПараметрыСозданияДокументов    = ВозвращаемыеПараметры;
						ДанныеДокумента.СоответствиеЗначенийРеквизитов = СоответствиеЗначений;
						
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ЗаполнятьРеквизитыПоДаннымЭлектроннойФормы Тогда
				лпПараметры = Новый Структура;
				//Если ИмяШаблона <> "" Тогда
					лпПараметры.Вставить("CharCode", ИмяШаблона);
				//КонецЕсли;
				Если ЕДРПОУВладельцаШаблона <> "" Тогда
					лпПараметры.Вставить("TmplOwnerCode", ЕДРПОУВладельцаШаблона);
				КонецЕсли;
				Если ВерсияШаблона <> "" Тогда
					лпПараметры.Вставить("TmplVersion", ВерсияШаблона);
				КонецЕсли;
				лпПараметры.Вставить("AllFields", Истина);
				СтруктураТаблицыДокументов = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/getdocrk", лпПараметры);
				Признак_IsMultisided = Ложь;
				Признак_SidesCount = 0;
				Признак_Route = Неопределено;
				ПрочитатьСтруктуруТаблицыДокументовДляМногостороннихДокументов(СтруктураТаблицыДокументов, Признак_IsMultisided, Признак_SidesCount, Признак_Route);
				
				IsMultisided = Ложь;
				Route = Неопределено;
				SidesCount = 0;
				Если ЗаполнятьМаршрутПоДаннымЭлектроннойФормы Тогда
					Если Признак_IsMultisided = Истина Тогда
						IsMultisided = Истина;
						Route = Новый Массив;
						Для Каждого ЭлементМаршрута Из МассивМаршрутПоДаннымЭлектроннойФормы Цикл
							ЭлементRoute = Новый Структура;
							ЭлементRoute.Вставить("Edrpou", ЭлементМаршрута.Получить("Edrpou"));
							ЭлементRoute.Вставить("Dept", ЭлементМаршрута.Получить("Dept"));
							ЭлементRoute.Вставить("Inn", ЭлементМаршрута.Получить("Inn"));
							ЭлементRoute.Вставить("Name", ЭлементМаршрута.Получить("Name"));
							Route.Добавить(ЭлементRoute);
							SidesCount = SidesCount + 1;
						КонецЦикла;
						СоответствиеЗначений.Вставить("МаршрутПоДаннымЭлектроннойФормы", Истина);
						СоответствиеЗначений.Вставить("МаршрутПоДаннымЭлектроннойФормыРучнаяУстановка", МаршрутПоДаннымЭлектроннойФормыРучнаяУстановка = Истина);
						СоответствиеЗначений.Вставить("Маршрут", МассивМаршрутПоДаннымЭлектроннойФормы);
					КонецЕсли;
				ИначеЕсли ЗаполнятьМаршрутДаннымиПоУмолчанию Тогда
					Если Признак_IsMultisided = Истина Тогда
						Таблица0 = СоответствиеЗначений.Получить("0");
						Если ТипЗнч(Таблица0) = Тип("Массив") Тогда
							Если Таблица0.Количество() >= 0 Тогда
								ПерваяСрокаТаблицы0 = Таблица0[0];
								ПрочитатьДанныеМногостороннегоДокументаПоУмолчанию(ПерваяСрокаТаблицы0, Признак_IsMultisided, Признак_SidesCount, Признак_Route, Организация, IsMultisided, Route, SidesCount);
								СоответствиеЗначений.Вставить("МаршрутПоДаннымЭлектроннойФормы", Ложь);
								СоответствиеЗначений.Вставить("МаршрутПоДаннымЭлектроннойФормыРучнаяУстановка", Ложь);
								СоответствиеЗначений.Вставить("Маршрут", Route);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ДополнитьСтруктуруДаннымиСхемыВыгрузки(ВозвращаемыеПараметры, ВидЭлектронногоДокумента, ЕДРПОУВладельцаШаблона, ИмяШаблона, ВерсияШаблона, СоответствиеЗначений, Документ1С, DocId, OutId, NOTATION, ВхИсх, IsMultisided, Route, SidesCount);
				ВозвращаемыеПараметры.Вставить("ПоДаннымХранилищаРеквизитов", Истина);
				
				фОбработано = Истина;//Продолжить;
				ДанныеДокумента.ЕстьОшибки = Ложь;
				
				//ВозвращаемыеПараметры.Вставить("DocId", DocId);
				//ВозвращаемыеПараметры.Вставить("OutId", OutId);//?
				
				ДанныеДокумента.ПараметрыСозданияДокументов    = ВозвращаемыеПараметры;
				ДанныеДокумента.СоответствиеЗначенийРеквизитов = СоответствиеЗначений;
				
				
				
				ДанныеДокумента.ЕстьОшибки = Ложь;
				//фОбработано = Истина;//Продолжить;
			Иначе
				
			КонецЕсли;
			
			
			
		КонецЕсли;
		
		Если НЕ ДанныеДокумента.ЕстьОшибки Тогда 
			лЗаголовокДокумента = Строка(ВидЭлектронногоДокумента)
			+ " №" + СокрЛП(ДанныеДокумента.ПараметрыСозданияДокументов.НомерЭлектронногоДокумента)
			+ " от " + Формат(ДанныеДокумента.ПараметрыСозданияДокументов.ДатаЭлектронногоДокумента, "ДФ=dd.MM.yyyy");
			
			лСоответствиеСДаннымиЭлектронногоДокумента = СформироватьСоответствиеСДаннымиЭлектронногоДокумента(ВидЭлектронногоДокумента
																													, лЗаголовокДокумента
																													, ДанныеДокумента.СоответствиеЗначенийРеквизитов
																													, ДанныеДокумента.ПараметрыСозданияДокументов.ЕДРПОУВладельцаШаблона
																													, ДанныеДокумента.ПараметрыСозданияДокументов.ИмяШаблона
																													, ДанныеДокумента.ПараметрыСозданияДокументов.ВерсияШаблона
																													, ДанныеДокумента.ПараметрыСозданияДокументов.DocId
																													, ДанныеДокумента.ПараметрыСозданияДокументов.OutId
																													, ДанныеДокумента.ПараметрыСозданияДокументов.NOTATION
																													);
			
			//лСоответствиеСДаннымиЭлектронногоДокумента.Вставить("DocId", ДанныеДокумента.DocId);
			//лСоответствиеСДаннымиЭлектронногоДокумента.Вставить("OutId", ДанныеДокумента.OutId);//?
			//лСоответствиеСДаннымиЭлектронногоДокумента.Вставить("GRPID", "B16AFDD7-637F-4315-874B-C95D27FFE53B");
			лПредставленияЭлектронногоДокумента = СобратьXMLиPDFПредставленияЭлектронногоДокументаИзСоответствияСДанными(лСоответствиеСДаннымиЭлектронногоДокумента, ЖурналОперации);
			
			Если ЕстьКолонкаТело Тогда 
				ДанныеДокумента.ТелоДокумента = лПредставленияЭлектронногоДокумента.ТелоДокумента;
			КонецЕсли;
			Если ЕстьКолонкаИзображение Тогда 
				ДанныеДокумента.ИзображениеДокумента = лПредставленияЭлектронногоДокумента.ИзображениеДокумента;
			КонецЕсли;
			Если ЕстьКолонкаДатаСозданияДокумента Тогда
				ДанныеДокумента.ДатаСозданияДокумента = ТекущаяДата();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Обновление журнала операций.
	Если ДополнительныеПараметры <> Неопределено Тогда 
		Если ДополнительныеПараметры.Свойство("ЖурналОперации") Тогда 
			Если ЖурналОперации <> ДополнительныеПараметры.ЖурналОперации Тогда
				Если ЖурналОперации <> "" Тогда
					Если ДополнительныеПараметры.ЖурналОперации = "" Тогда
						ДополнительныеПараметры.ЖурналОперации = ЖурналОперации;
					Иначе
						ДополнительныеПараметры.ЖурналОперации = ДополнительныеПараметры.ЖурналОперации + "; " + ЖурналОперации;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьПравилаВыгрузки(ВидЭлектронногоДокумента, ВидДокумента1С)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ПравилаВыгрузки.ВидЭлектронногоДокумента,
	               |	скEDI_ПравилаВыгрузки.ВидДокумента1С,
	               |	скEDI_ПравилаВыгрузки.Приоритет КАК Приоритет,
	               |	скEDI_ПравилаВыгрузки.ЕДРПОУВладельцаШаблона,
	               |	скEDI_ПравилаВыгрузки.ИмяШаблона,
	               |	скEDI_ПравилаВыгрузки.ВерсияШаблона,
	               |	скEDI_ПравилаВыгрузки.Схема0,
	               |	скEDI_ПравилаВыгрузки.Схема1,
	               |	скEDI_ПравилаВыгрузки.Схема2,
	               |	скEDI_ПравилаВыгрузки.Схема3,
	               |	скEDI_ПравилаВыгрузки.Схема4,
	               |	скEDI_ПравилаВыгрузки.Схема5,
	               |	скEDI_ПравилаВыгрузки.Использование,
	               |	скEDI_ПравилаВыгрузки.Комментарий
	               |ИЗ
	               |	РегистрСведений.скEDI_ПравилаВыгрузки КАК скEDI_ПравилаВыгрузки
	               |ГДЕ
	               |	скEDI_ПравилаВыгрузки.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента
	               |	И скEDI_ПравилаВыгрузки.ВидДокумента1С = &ВидДокумента1С
	               |	И скEDI_ПравилаВыгрузки.Использование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет УБЫВ";
	Запрос.УстановитьПараметр("ВидЭлектронногоДокумента", ВидЭлектронногоДокумента);
	Запрос.УстановитьПараметр("ВидДокумента1С", ВидДокумента1С);
	Возврат Запрос.Выполнить().Выгрузить();
	//
	//НаборЗаписаейПравилаВыгрузки = РегистрыСведений.скEDI_ПравилаВыгрузки.СоздатьНаборЗаписей();
	//НаборЗаписаейПравилаВыгрузки.Отбор.ВидЭлектронногоДокумента.Установить(ВидЭлектронногоДокумента);
	//НаборЗаписаейПравилаВыгрузки.Отбор.ВидДокумента1С.Установить(ВидДокумента);
	//НаборЗаписаейПравилаВыгрузки.Прочитать();
	//Возврат НаборЗаписаейПравилаВыгрузки.Выгрузить();
КонецФункции

// Функция - Выгрузить документ в соответствие значений вызов сервера
//
// Параметры:
//  МассивДанныхДокументов	 - 	 - 
//
Процедура ВыгрузитьДокументВСоответствиеЗначенийВызовСервера(МассивДанныхДокументов, ДополнительныеПараметры = Неопределено) Экспорт
	
	// Преобразование входящей коллекции в таблицу значений.
	СтруктураТаблиц = ПреобразоватьМассивСтруктурВТаблицыЗначений(МассивДанныхДокументов);
	
	Если СтруктураТаблиц.Количество() = 1 Тогда 
		
		// Дополнение необходимых для заполнения колонок.
		ТаблицаДанныхДокумента = СтруктураТаблиц.Таблица1;	
		
		Если ТаблицаДанныхДокумента.Колонки.Найти("СоответствиеЗначенийРеквизитов")  = Неопределено Тогда 
			ТаблицаДанныхДокумента.Колонки.Добавить("СоответствиеЗначенийРеквизитов", Новый ОписаниеТипов("Соответствие"));
		КонецЕсли;
		
		Если ТаблицаДанныхДокумента.Колонки.Найти("ПараметрыСозданияДокументов") = Неопределено Тогда 
			ТаблицаДанныхДокумента.Колонки.Добавить("ПараметрыСозданияДокументов" , Новый ОписаниеТипов("Структура"));
		КонецЕсли;
		
		Если ТаблицаДанныхДокумента.Колонки.Найти("ЕстьОшибки") = Неопределено Тогда 
			ТаблицаДанныхДокумента.Колонки.Добавить("ЕстьОшибки", Новый ОписаниеТипов("Булево"));
		КонецЕсли;
		
		ВыгрузитьДокументы1СВСоответствиеЗначений(ТаблицаДанныхДокумента, ДополнительныеПараметры);
		
		Для Каждого СтрокаМассива Из МассивДанныхДокументов Цикл 
			
			НайденныеСтрокиЗаполнения = ТаблицаДанныхДокумента.НайтиСтроки(Новый Структура("Документ1С, ВидЭлектронногоДокумента, ЕстьОшибки" 
																							, СтрокаМассива.Документ1С
																							, СтрокаМассива.ВидЭлектронногоДокумента
																							, Ложь));
																			
			Если НайденныеСтрокиЗаполнения.Количество() > 0 Тогда 
				ЗаполнитьЗначенияСвойств(СтрокаМассива ,НайденныеСтрокиЗаполнения[0]); 					
			КонецЕсли;																	
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры // ВыгрузитьДокументВСоответствиеЗначенийВызовСервера()

// Функция - Преобразовать массив структур в таблицы значений
//
// Параметры:
//  МассивСтруктур			 - 	 - 
//  ДополнительныеПараметры	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПреобразоватьМассивСтруктурВТаблицыЗначений(Знач МассивСтруктур , ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено Тогда 
		
		Если ДополнительныеПараметры.Свойство("КоличествоЭлементовВОднойТаблице") Тогда 
			ЕстьОграничениеРазмераТаблицы    = Истина;
			КоличествоЭлементовВОднойТаблице = ДополнительныеПараметры.КоличествоЭлементовВОднойТаблице;
		Иначе
			ЕстьОграничениеРазмераТаблицы = Ложь;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("НеобходимУИДСтроки") Тогда 
			НеобходимУИДСтроки = ДополнительныеПараметры.НеобходимУИДСтроки;
		Иначе
			НеобходимУИДСтроки = Ложь;
		КонецЕсли;
		
	Иначе
		ЕстьОграничениеРазмераТаблицы = Ложь;
		НеобходимУИДСтроки = Ложь;
	КонецЕсли;	
		
	МассивКолонок      = Новый Массив;
	СтруктураРезультат = Новый Структура;
	ТаблицаРезультат   = Новый ТаблицаЗначений;
	
	Если НеобходимУИДСтроки Тогда 
		МассивКолонок.Добавить("УИДСтроки");
		ТаблицаРезультат.Колонки.Добавить("УИДСтроки");
	КонецЕсли;
	
	ЗагружаемаяСтрока = 1;
	НомерТаблицы      = 1;
	
	// Обходим строки массива.
	Для Каждого СтруктураМассива Из МассивСтруктур Цикл 
		
		// Проверка превышения размера одной таблицы.
		Если ЕстьОграничениеРазмераТаблицы Тогда 
			
			//Если превышает - текущую таблицу добавляем в структуру, создаем новую с теми же колонками.
			Если ЗагружаемаяСтрока > КоличествоЭлементовВОднойТаблице Тогда 
				
				СтруктураРезультат.Вставить("Таблица" + Формат(НомерТаблицы, "ЧГ=0") , ТаблицаРезультат);
				
				ЗагружаемаяСтрока = 1;
				НомерТаблицы      = НомерТаблицы + 1;
				
				ТаблицаРезультат  = Новый ТаблицаЗначений;
				
				Для Каждого ИмяКолонки Из МассивКолонок Цикл 
					ТаблицаРезультат.Колонки.Добавить(ИмяКолонки);
				КонецЦикла;	
				
			КонецЕсли;	
		КонецЕсли;
		
		ЗагружаемаяСтрока = ЗагружаемаяСтрока + 1;
		
		// Обходим структуру массива, заполняем массив колонок и колонки таблицы значений.
		Для Каждого КлючЗначение Из СтруктураМассива Цикл 
			Если МассивКолонок.Найти(КлючЗначение.Ключ) = Неопределено Тогда 
				МассивКолонок.Добавить(КлючЗначение.Ключ);
				ТаблицаРезультат.Колонки.Добавить(КлючЗначение.Ключ);
			КонецЕсли;	
		КонецЦикла;	
		
		// Заполняем новую строку таблицы.
		НоваяСтрока = ТаблицаРезультат.Добавить();		
		ЗаполнитьЗначенияСвойств(НоваяСтрока , СтруктураМассива);
		
		Если НеобходимУИДСтроки Тогда 
			НоваяСтрока.УИДСтроки = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураРезультат.Вставить("Таблица" + Формат(НомерТаблицы, "ЧГ=0") , ТаблицаРезультат);
	
	Возврат СтруктураРезультат;
	
КонецФункции	

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Функция ВыгрузитьДокументВМассивЗначенийПоСхемеВыгрузки(МассивЗначений, Документ1С, ВидЭлектронногоДокумента, ОрганизацияEDI, СхемаВыгрузки, ТолькоПерваяСтрока, СписокПолейШаблонаТаблицы)
	
	НастройкиСхемыВыгрузки = СхемаВыгрузки.НастройкиПоУмолчанию;
	
	
	Параметр = НастройкиСхемыВыгрузки.ПараметрыДанных.Элементы.Найти("Ссылка");
	Параметр.Значение = Документ1С;
	
	Параметр = НастройкиСхемыВыгрузки.ПараметрыДанных.Элементы.Найти("Организация");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ОрганизацияEDI;
	КонецЕсли;

	Параметр = НастройкиСхемыВыгрузки.ПараметрыДанных.Элементы.Найти("ВидЭлектронногоДокумента");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ВидЭлектронногоДокумента;
	КонецЕсли;
	
	/////////////
	лМетаданныеДокумента = Неопределено;
	Для Каждого ЭлементПараметр Из НастройкиСхемыВыгрузки.ПараметрыДанных.Элементы Цикл
		лИмяПараметра = Строка(ЭлементПараметр.Параметр);
		Если Найти(лИмяПараметра, "Ссылка_") <> 0 Тогда
			Если лМетаданныеДокумента = Неопределено Тогда
				лМетаданныеДокумента = Документ1С.Метаданные();
			КонецЕсли;
			
			лИмяРеквизита = Прав(лИмяПараметра, СтрДлина(лИмяПараметра) - 7);
			
			Если лМетаданныеДокумента.Реквизиты.Найти(лИмяРеквизита) <> Неопределено Тогда
				ЭлементПараметр.Значение = Документ1С[лИмяРеквизита];
			КонецЕсли;
			Для Каждого СтандартныйРеквизит Из лМетаданныеДокумента.СтандартныеРеквизиты Цикл
				Если СтандартныйРеквизит.Имя = лИмяРеквизита Тогда
					ЭлементПараметр.Значение = Документ1С[лИмяРеквизита];
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
	КонецЦикла;
	
	//Если лСтруктураРеквизитов.Количество() > 0 Тогда
	//	лМетаданныеДокумента = Документ1С.Метаданные();
	//КонецЕсли;
	//
	//Для Каждого лКлючИЗначение Из лСтруктураРеквизитов Цикл
	//	Если лМетаданныеДокумента.Реквизиты.Найти(лКлючИЗначение.Значение) <> Неопределено Тогда
	//		Параметр = лПараметры.Найти(лКлючИЗначение.Ключ);
	//		Если Параметр <> Неопределено Тогда
	//			Параметр.Значение = Документ1С[лКлючИЗначение.Значение];
	//		КонецЕсли;				
	//	КонецЕсли;
	//	Для Каждого СтандартныйРеквизит Из лМетаданныеДокумента.СтандартныеРеквизиты Цикл
	//		Если СтандартныйРеквизит.Имя = лКлючИЗначение.Значение Тогда
	//			Параметр = лПараметры.Найти(лКлючИЗначение.Ключ);
	//			Если Параметр <> Неопределено Тогда
	//				Параметр.Значение = Документ1С[лКлючИЗначение.Значение];
	//			КонецЕсли;	
	//		КонецЕсли;	
	//	КонецЦикла;	
	//КонецЦикла;
	///////////////
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаВыгрузки, НастройкиСхемыВыгрузки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , , Истина);
	

	ТЗ = Новый ТаблицаЗначений;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(ТЗ);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	МассивЗначений = Новый Массив;
	ЕстьРезультат = Ложь;
	ИндексСтрокиВТаблицеЭлектронногоДокумента = 1;
	Для Каждого СтрТЗ Из ТЗ Цикл
		
		Соответствие = Новый Соответствие;
		Для Каждого КолонкаТЗ Из ТЗ.Колонки Цикл
			Если СписокПолейШаблонаТаблицы <> Неопределено Тогда
				Если СписокПолейШаблонаТаблицы.НайтиПоЗначению(КолонкаТЗ.Имя) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ЗначениеРеквизита = СтрТЗ[КолонкаТЗ.Имя];
			Если ЗначениеРеквизита = "" Тогда //2017-05-24
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(ЗначениеРеквизита) = Тип("Строка") Тогда
				ЗначениеРеквизита = СтрЗаменить(ЗначениеРеквизита, "@@НомерСтроки@@", Формат(ИндексСтрокиВТаблицеЭлектронногоДокумента, "ЧГ=0"));
				
				ЗначениеРеквизита = СокрП(ЗначениеРеквизита);
			КонецЕсли;
			Соответствие.Вставить(КолонкаТЗ.Имя, ЗначениеРеквизита);
			
		КонецЦикла;
		
		МассивЗначений.Добавить(Соответствие);
		ЕстьРезультат = Истина;
		ИндексСтрокиВТаблицеЭлектронногоДокумента = ИндексСтрокиВТаблицеЭлектронногоДокумента + 1;
		
		Если ТолькоПерваяСтрока Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьРезультат;
	
КонецФункции // ВыгрузитьДокументВМассивЗначенийПоСхемеВыгрузки()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ВыгрузитьДокументВСоответствиеЗначенийПоСхемамВыгрузки(СоответствиеЗначений, Документ1С, ВидЭлектронногоДокумента, ОрганизацияEDI, СхемыВыгрузки, ЕДРПОУВладельцаШаблона, ИмяШаблона, ВерсияШаблона, ДопЗначенияРеквизитовТаблицы0, ДополнительныеПараметры, ЗагружатьДанныеМногостороннегоДокумента, IsMultisided = Ложь, Route = Неопределено, SidesCount = 0)
	СоответствиеЗначений = Новый Соответствие;
	МассивЗначений = Неопределено;
	
	СписокПолейШаблонаТаблицы0 = Неопределено;
	СписокПолейШаблонаТаблицы1 = Неопределено;
	СписокПолейШаблонаТаблицы2 = Неопределено;
	СписокПолейШаблонаТаблицы3 = Неопределено;
	СписокПолейШаблонаТаблицы4 = Неопределено;
	СписокПолейШаблонаТаблицы5 = Неопределено;
	
	СхемаВыгрузки0 = СхемыВыгрузки.Схема0.Получить();
	Если СхемаВыгрузки0 <> Неопределено Тогда
		Если Не ВыгрузитьДокументВМассивЗначенийПоСхемеВыгрузки(МассивЗначений, Документ1С, ВидЭлектронногоДокумента, ОрганизацияEDI, СхемаВыгрузки0, Истина, Неопределено) Тогда
			Возврат Ложь
		КонецЕсли;
		лпПараметры = Новый Структура;
		//Если ИмяШаблона <> "" Тогда
			лпПараметры.Вставить("CharCode", ИмяШаблона);
		//КонецЕсли;
		Если ЕДРПОУВладельцаШаблона <> "" Тогда
			лпПараметры.Вставить("TmplOwnerCode", ЕДРПОУВладельцаШаблона);
		КонецЕсли;
		Если ИмяШаблона <> "" Тогда
			лпПараметры.Вставить("TmplVersion", ВерсияШаблона);
		КонецЕсли;
		лпПараметры.Вставить("AllFields", Истина);
		СтруктураТаблицыДокументов = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/getdocrk", лпПараметры);
		
		КодОшибки = Неопределено;
		Если СтруктураТаблицыДокументов.Свойство("Code", КодОшибки) Тогда
			Если КодОшибки <> 0 Тогда
				ТекстОшибки = НСтр("ru = 'Документ не сформирован. Ошибка получения данных по шаблону.'; uk = 'Документ не сформовано. Помилка отримання данних по шаблону.'");
				ТекстСообщения = Неопределено;
				Если СтруктураТаблицыДокументов.Свойство("Message", ТекстСообщения) Тогда
					Если ЗначениеЗаполнено(ТекстСообщения) Тогда
						ТекстОшибки = ТекстОшибки + Символы.ПС + Строка(ТекстСообщения);
					КонецЕсли;
				КонецЕсли;
				скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ТаблицыШаблона = Неопределено;
		Если СтруктураТаблицыДокументов.Свойство("Tables", ТаблицыШаблона) Тогда
			Если ТипЗнч(ТаблицыШаблона) = Тип("Массив") Тогда
				Для Каждого ТаблицаШаблона Из ТаблицыШаблона Цикл
					Если ТаблицаШаблона.Num = 0 Тогда
						СписокПолейШаблонаТаблицы0 = Новый СписокЗначений;
						Для Каждого Поле Из ТаблицаШаблона.Fields Цикл
							СписокПолейШаблонаТаблицы0.Добавить(Поле.Name);
						КонецЦикла;
					ИначеЕсли ТаблицаШаблона.Num = 1 Тогда
						СписокПолейШаблонаТаблицы1 = Новый СписокЗначений;
						Для Каждого Поле Из ТаблицаШаблона.Fields Цикл
							СписокПолейШаблонаТаблицы1.Добавить(Поле.Name);
						КонецЦикла;
					ИначеЕсли ТаблицаШаблона.Num = 2 Тогда
						СписокПолейШаблонаТаблицы2 = Новый СписокЗначений;
						Для Каждого Поле Из ТаблицаШаблона.Fields Цикл
							СписокПолейШаблонаТаблицы2.Добавить(Поле.Name);
						КонецЦикла;
					ИначеЕсли ТаблицаШаблона.Num = 3 Тогда
						СписокПолейШаблонаТаблицы3 = Новый СписокЗначений;
						Для Каждого Поле Из ТаблицаШаблона.Fields Цикл
							СписокПолейШаблонаТаблицы3.Добавить(Поле.Name);
						КонецЦикла;
					ИначеЕсли ТаблицаШаблона.Num = 4 Тогда
						СписокПолейШаблонаТаблицы4 = Новый СписокЗначений;
						Для Каждого Поле Из ТаблицаШаблона.Fields Цикл
							СписокПолейШаблонаТаблицы4.Добавить(Поле.Name);
						КонецЦикла;
					ИначеЕсли ТаблицаШаблона.Num = 5 Тогда
						СписокПолейШаблонаТаблицы5 = Новый СписокЗначений;
						Для Каждого Поле Из ТаблицаШаблона.Fields Цикл
							СписокПолейШаблонаТаблицы5.Добавить(Поле.Name);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если СписокПолейШаблонаТаблицы0 = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			ЗначенияТаблицы0 = Неопределено;
			Для Каждого СтрокаМассиваЗначений Из МассивЗначений Цикл
				МассивКлючейОтсутствующихВТаблицеШаблона = Новый Массив;
				Для Каждого КлючИЗначение из СтрокаМассиваЗначений Цикл
					Если СписокПолейШаблонаТаблицы0.НайтиПоЗначению(КлючИЗначение.Ключ) = Неопределено Тогда
						МассивКлючейОтсутствующихВТаблицеШаблона.Добавить(КлючИЗначение.Ключ);
					КонецЕсли;
				КонецЦикла;
				Для Каждого КлючОтсутствующийВТаблицеШаблона Из МассивКлючейОтсутствующихВТаблицеШаблона Цикл
					СтрокаМассиваЗначений.Удалить(КлючОтсутствующийВТаблицеШаблона);
				КонецЦикла;
				Для Каждого ДопЗначениеРеквизитовТаблицы0 Из ДопЗначенияРеквизитовТаблицы0 Цикл
					Если СписокПолейШаблонаТаблицы0.НайтиПоЗначению(ДопЗначениеРеквизитовТаблицы0.Ключ) <> Неопределено Тогда
						СтрокаМассиваЗначений.Вставить(ДопЗначениеРеквизитовТаблицы0.Ключ, ДопЗначениеРеквизитовТаблицы0.Значение);
					КонецЕсли;
				КонецЦикла;
				ЗначенияТаблицы0 = СтрокаМассиваЗначений;
			КонецЦикла;
			
			СоответствиеЗначений.Вставить("0", МассивЗначений);
			
			
			IsMultisided = Ложь;
			Route = Неопределено;
			SidesCount = 0;
			ПризнакШаблонаСМногостороннимОбменом = Неопределено;
			Если СтруктураТаблицыДокументов.Свойство("IsMultisided", ПризнакШаблонаСМногостороннимОбменом) Тогда
				Если ПризнакШаблонаСМногостороннимОбменом = Истина Тогда
					IsMultisided = Истина;
					ПризнакSidesCount = Неопределено;
					СтруктураТаблицыДокументов.Свойство("SidesCount", ПризнакSidesCount);
					ПризнакRoute = Неопределено;
					Если СтруктураТаблицыДокументов.Свойство("Route", ПризнакRoute) Тогда
						Если ТипЗнч(ПризнакRoute) = Тип("Массив") Тогда
							Если ЗагружатьДанныеМногостороннегоДокумента Тогда
								ПрочитатьДанныеМногостороннегоДокументаПоУмолчанию(СтрокаМассиваЗначений, ПризнакШаблонаСМногостороннимОбменом, ПризнакSidesCount, ПризнакRoute, ОрганизацияEDI, IsMultisided, Route, SidesCount);
							КонецЕсли;
							//
							//
							//Route = Новый Массив;
							//Для Каждого ЭлементПризнакаRoute из ПризнакRoute Цикл
							//	ЭлементRoute = Новый Структура;
							//	ЗначениеEdrpou = СтрокаМассиваЗначений.Получить(ЭлементПризнакаRoute.Edrpou);
							//	ЗначениеDept = СтрокаМассиваЗначений.Получить(ЭлементПризнакаRoute.Dept);
							//	
							//	Если ЗначениеEdrpou = Неопределено Тогда
							//		ЭлементRoute.Вставить("Edrpou", "");
							//	Иначе
							//		ЭлементRoute.Вставить("Edrpou", ЗначениеEdrpou);
							//	КонецЕсли;
							//	Если ЗначениеDept = Неопределено Тогда
							//		ЭлементRoute.Вставить("Dept", "");
							//	Иначе
							//		ЭлементRoute.Вставить("Dept", ЗначениеDept);
							//	КонецЕсли;
							//	Route.Добавить(ЭлементRoute);
							//КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					//ПризнакSidesCount = Неопределено;
					//Если СтруктураТаблицыДокументов.Свойство("SidesCount", ПризнакSidesCount) Тогда
					//	SidesCount = ПризнакSidesCount;
					//КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	СхемаВыгрузки1 = СхемыВыгрузки.Схема1.Получить();
	Если СхемаВыгрузки1 <> Неопределено И СписокПолейШаблонаТаблицы1 <> Неопределено Тогда
		МассивЗначений = Неопределено;
		Если ВыгрузитьДокументВМассивЗначенийПоСхемеВыгрузки(МассивЗначений, Документ1С, ВидЭлектронногоДокумента, ОрганизацияEDI, СхемаВыгрузки1, Ложь, СписокПолейШаблонаТаблицы1) Тогда
			СоответствиеЗначений.Вставить("1", МассивЗначений);
		КонецЕсли;
	КонецЕсли;
	СхемаВыгрузки2 = СхемыВыгрузки.Схема2.Получить();
	Если СхемаВыгрузки2 <> Неопределено И СписокПолейШаблонаТаблицы2 <> Неопределено Тогда
		МассивЗначений = Неопределено;
		Если ВыгрузитьДокументВМассивЗначенийПоСхемеВыгрузки(МассивЗначений, Документ1С, ВидЭлектронногоДокумента, ОрганизацияEDI, СхемаВыгрузки2, Ложь, СписокПолейШаблонаТаблицы2) Тогда
			СоответствиеЗначений.Вставить("2", МассивЗначений);
		КонецЕсли;
	КонецЕсли;
	СхемаВыгрузки3 = СхемыВыгрузки.Схема3.Получить();
	Если СхемаВыгрузки3 <> Неопределено И СписокПолейШаблонаТаблицы3 <> Неопределено Тогда
		МассивЗначений = Неопределено;
		Если ВыгрузитьДокументВМассивЗначенийПоСхемеВыгрузки(МассивЗначений, Документ1С, ВидЭлектронногоДокумента, ОрганизацияEDI, СхемаВыгрузки3, Ложь, СписокПолейШаблонаТаблицы3) Тогда
			СоответствиеЗначений.Вставить("3", МассивЗначений);
		КонецЕсли;
	КонецЕсли;
	СхемаВыгрузки4 = СхемыВыгрузки.Схема4.Получить();
	Если СхемаВыгрузки4 <> Неопределено И СписокПолейШаблонаТаблицы4 <> Неопределено Тогда
		МассивЗначений = Неопределено;
		Если ВыгрузитьДокументВМассивЗначенийПоСхемеВыгрузки(МассивЗначений, Документ1С, ВидЭлектронногоДокумента, ОрганизацияEDI, СхемаВыгрузки4, Ложь, СписокПолейШаблонаТаблицы4) Тогда
			СоответствиеЗначений.Вставить("4", МассивЗначений);
		КонецЕсли;
	КонецЕсли;
	СхемаВыгрузки5 = СхемыВыгрузки.Схема5.Получить();
	Если СхемаВыгрузки5 <> Неопределено И СписокПолейШаблонаТаблицы5 <> Неопределено Тогда
		МассивЗначений = Неопределено;
		Если ВыгрузитьДокументВМассивЗначенийПоСхемеВыгрузки(МассивЗначений, Документ1С, ВидЭлектронногоДокумента, ОрганизацияEDI, СхемаВыгрузки5, Ложь, СписокПолейШаблонаТаблицы5) Тогда
			СоответствиеЗначений.Вставить("5", МассивЗначений);
		КонецЕсли;
	КонецЕсли;
		
	Возврат Истина;
КонецФункции // ВыгрузитьДокументВСоответствиеЗначенийПоСхемамВыгрузки()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Функция СформироватьСоответствиеСДаннымиЭлектронногоДокумента(ВидЭлектронногоДокумента, ИмяДокумента1С, СоответствиеСРеквизитамиЭлектронногоДокумента, ЕДРПОУВладельцаШаблона, ИмяШаблона, ВерсияШаблона, DocId = "", OutId = "", NOTATION = "") Экспорт
	
	лРезультат = Новый Соответствие;
	
	лРезультат.Вставить("Edrpou",   ВидЭлектронногоДокумента.Владелец.Код);
	лРезультат.Вставить("Dept",     ВидЭлектронногоДокумента.Владелец.Филиал);
	лРезультат.Вставить("DocName",  ИмяДокумента1С);
	
	лРезультат.Вставить("NoXsdValidation", 1);
	лРезультат.Вставить("NoLogicalValidation", 1);
	
	//лРезультат.Вставить("SDocType",	10104);
	//лРезультат.Вставить("Name", );
	Если ЕДРПОУВладельцаШаблона <> "" Тогда
		лРезультат.Вставить("TmplOwnerCode", ЕДРПОУВладельцаШаблона);
	КонецЕсли;
	Если ИмяШаблона <> "" Тогда
		лРезультат.Вставить("CharCode", ИмяШаблона);
	КонецЕсли;
	Если ВерсияШаблона <> "" Тогда
		лРезультат.Вставить("TmplVersion", ВерсияШаблона);
	КонецЕсли;
	Если DocId <> "" Тогда
		лРезультат.Вставить("DocId", DocId);
	КонецЕсли;
	Если OutId <> "" Тогда
		лРезультат.Вставить("OutId", OutId);
	КонецЕсли;
	Если NOTATION <> "" Тогда
		лРезультат.Вставить("NOTATION", NOTATION);
	КонецЕсли;
//лРезультат.Вставить("NOTATION", "ТЕСТ NOTATION");
	СоответствиеTables = Новый Соответствие;
	Для Каждого ЭлементСоответствия Из СоответствиеСРеквизитамиЭлектронногоДокумента Цикл
		Если СтрСодержитТолькоЦифры(ЭлементСоответствия.Ключ) Тогда
			СоответствиеTables.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
		КонецЕсли;
	КонецЦикла;
	лРезультат.Вставить("Tables", СоответствиеTables);
	
	//Если СоответствиеСРеквизитамиЭлектронногоДокумента.Получить("МаршрутПоДаннымЭлектроннойФормы") = Истина Тогда
		Маршрут = СоответствиеСРеквизитамиЭлектронногоДокумента.Получить("Маршрут");
		Если ТипЗнч(Маршрут) = Тип("Массив") Тогда
			Route = Новый Массив;
			Для Каждого ЭлементМаршрута Из Маршрут Цикл
				ЭлементRoute = Новый Структура;
				Если ТипЗнч(ЭлементМаршрута) = Тип("Структура") Тогда
					ЗначениеЭлементаМаршрута = Неопределено;
					//Если ЭлементМаршрута.Свойство("Edrpou", ЗначениеЭлементаМаршрута) Тогда
					ЭлементМаршрута.Свойство("Edrpou", ЗначениеЭлементаМаршрута);
					ЭлементRoute.Вставить("Edrpou", ЗначениеЭлементаМаршрута);
					//КонецЕсли;
					
					ЗначениеЭлементаМаршрута = Неопределено;
					Если ЭлементМаршрута.Свойство("Dept", ЗначениеЭлементаМаршрута) Тогда
						ЭлементRoute.Вставить("Dept", ЗначениеЭлементаМаршрута);
					КонецЕсли;
					ЗначениеЭлементаМаршрута = Неопределено;
					Если ЭлементМаршрута.Свойство("Inn", ЗначениеЭлементаМаршрута) Тогда
						ЭлементRoute.Вставить("Inn", ЗначениеЭлементаМаршрута);
					КонецЕсли;
					ЗначениеЭлементаМаршрута = Неопределено;
					Если ЭлементМаршрута.Свойство("Name", ЗначениеЭлементаМаршрута) Тогда
						ЭлементRoute.Вставить("Name", ЗначениеЭлементаМаршрута);
					КонецЕсли;
				ИначеЕсли ТипЗнч(ЭлементМаршрута) = Тип("Соответствие") Тогда
					ЭлементRoute.Вставить("Edrpou", ЭлементМаршрута.Получить("Edrpou"));
					
					ЗначениеЭлементаМаршрута = ЭлементМаршрута.Получить("Dept");
					Если ЗначениеЗаполнено(ЗначениеЭлементаМаршрута) Тогда
						ЭлементRoute.Вставить("Dept", ЗначениеЭлементаМаршрута);
					КонецЕсли;
					ЗначениеЭлементаМаршрута = ЭлементМаршрута.Получить("Inn");
					Если ЗначениеЗаполнено(ЗначениеЭлементаМаршрута) Тогда
						ЭлементRoute.Вставить("Inn", ЗначениеЭлементаМаршрута);
					КонецЕсли;
					ЗначениеЭлементаМаршрута = ЭлементМаршрута.Получить("Name");
					Если ЗначениеЗаполнено(ЗначениеЭлементаМаршрута) Тогда
						ЭлементRoute.Вставить("Name", ЗначениеЭлементаМаршрута);
					КонецЕсли;
				КонецЕсли;
				Route.Добавить(ЭлементRoute);
			КонецЦикла;
			
			лРезультат.Вставить("AutoFillRoute", Ложь);
			лРезультат.Вставить("Route", Route);
		КонецЕсли;
	//КонецЕсли;
	
	Возврат лРезультат
	
КонецФункции // СформироватьСоответствиеСДаннымиЭлектронногоДокумента()

Функция ПолучитьПодписьИзГруппыПоКодуДРФО(ОрганизацияEDI, ГруппаПодписи, КодПоДРФО) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ГруппыПодписей.Подпись
	               |ИЗ
	               |	РегистрСведений.скEDI_ГруппыПодписей КАК скEDI_ГруппыПодписей
	               |ГДЕ
	               |	скEDI_ГруппыПодписей.ГруппаПодписи = &ГруппаПодписи
	               |	И скEDI_ГруппыПодписей.Подпись.Владелец = &Организация
	               |	И скEDI_ГруппыПодписей.Подпись.ДРФО = &ДРФО
	               |	И скEDI_ГруппыПодписей.Подпись.ИспользованиеКлюча = ЗНАЧЕНИЕ(Перечисление.скEDI_ИспользованиеКлючей.Подписание)";
	Запрос.УстановитьПараметр("ГруппаПодписи", ГруппаПодписи);
	Запрос.УстановитьПараметр("Организация", ОрганизацияEDI);
	Запрос.УстановитьПараметр("ДРФО", КодПоДРФО);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		Возврат ВыборкаРезультатаЗапроса.Подпись;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьПодписантов(ВыполняемыеОперации, Организация, МассивДанныхПоДокументам, ОшибкаПолученияПодписей) Экспорт
	Результат = Новый Структура("МассивПодписей,МассивПодписейШифрования");
	ОшибкаПолученияПодписей = "";
	
	СписокВидовЭлектронныхДокументовБезНастроекПоПодписям = Новый СписокЗначений;
	
	ПолучатьВсеПодписи = Ложь;
	ПолучатьНедостающиеПодписи = Ложь;
	ПолучатьПоследнююПодпись = Ложь;
	ПолучатьПодписиШифрования = Ложь;
	ЕстьОтправкаКонтрагенту = Ложь;
	
	Для Каждого ВыполняемаяОперация Из ВыполняемыеОперации Цикл
		Если ВыполняемаяОперация = "Подпись" Тогда
			ПолучатьНедостающиеПодписи = Истина;
		ИначеЕсли ВыполняемаяОперация = "СформироватьНовыйВариантЭлектронногоДокумента" Тогда
			ПолучатьВсеПодписи = Истина;
		ИначеЕсли ВыполняемаяОперация = "ПовторноеУтверждение" Тогда
			ПолучатьВсеПодписи = Истина;
		ИначеЕсли ВыполняемаяОперация = "Отправка" Тогда
			ПолучатьНедостающиеПодписи = Истина;
			ПолучатьПодписиШифрования = Истина;
			ЕстьОтправкаКонтрагенту = Истина;
		ИначеЕсли ВыполняемаяОперация = "ОтправитьНаДоподписание" Тогда
			ПолучатьНедостающиеПодписи = Истина;
			ПолучатьПодписиШифрования = Истина;
			//ЕстьОтправкаКонтрагенту = Истина;
		ИначеЕсли ВыполняемаяОперация = "ОтправкаВДФС" Тогда
			ПолучатьНедостающиеПодписи = Истина;
			ПолучатьПодписиШифрования = Истина;
		ИначеЕсли ВыполняемаяОперация = "ПолучениеВходящихСообщений" Тогда
			ПолучатьПодписиШифрования = Истина;
		ИначеЕсли ВыполняемаяОперация = "ОтправкаКвитанций" Тогда
			//ПолучатьПоследнююПодпись = Истина;
			ПолучатьНедостающиеПодписи = Истина;
			ПолучатьПодписиШифрования = Истина;	
		ИначеЕсли ВыполняемаяОперация = "ПовторнаяОтправка" Тогда
			ПолучатьПоследнююПодпись = Ложь;
			ПолучатьНедостающиеПодписи = Ложь;
			ПолучатьПодписиШифрования = Истина;	
		ИначеЕсли ВыполняемаяОперация = "Отклонение" Тогда
			//ПолучатьПоследнююПодпись = Истина;
			ПолучатьПодписиШифрования = Истина;
		ИначеЕсли ВыполняемаяОперация = "Отзыв" Тогда
			//ПолучатьПоследнююПодпись = Истина;
			ПолучатьПодписиШифрования = Истина;	
		КонецЕсли; 
	КонецЦикла;
	
	Результат.МассивПодписей = Новый Массив;
	Если ПолучатьВсеПодписи или ПолучатьНедостающиеПодписи или ПолучатьПоследнююПодпись или ЕстьОтправкаКонтрагенту Тогда
		Для Каждого ЭлементМассиваДанныхПоДокументам Из МассивДанныхПоДокументам Цикл
			ВариантОтправки = 0;
			Если ЕстьОтправкаКонтрагенту Тогда
				Если ЭлементМассиваДанныхПоДокументам.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
					Если ЭлементМассиваДанныхПоДокументам.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
					//Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан") Тогда
						Если ЭлементМассиваДанныхПоДокументам.РегистрируетсяВЕРННПокупателем Тогда
							ВариантОтправки = 3;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ПолучатьПоследнююПодписьДляОтправкиЧерезСерверДФС = Ложь;
			Если ВариантОтправки = 3 Тогда
				Если Организация.СпособОтправкиНалоговыхДокументовКонтрагенту = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезДФС") Тогда
					ПолучатьПоследнююПодписьДляОтправкиЧерезСерверДФС = Истина;
				КонецЕсли;
			КонецЕсли;
			
			ПодписиПолученыИзЭлектронногоДокумента = Ложь;
			Если ЗначениеЗаполнено(ЭлементМассиваДанныхПоДокументам.ЭлектронныйДокумент) Тогда
				ЭлектронныйДокумент = ЭлементМассиваДанныхПоДокументам.ЭлектронныйДокумент;
				Если ЭлектронныйДокумент.Подписи.Количество() > 0 Тогда
					ПодписиПолученыИзЭлектронногоДокумента = Истина;
					Если ПолучатьНедостающиеПодписи Тогда
						НедостающиеПодписи = ЭлектронныйДокумент.Подписи.НайтиСтроки(Новый Структура("Подписано", Ложь));
						Для Каждого НедостающаяПодпись Из НедостающиеПодписи Цикл
							Если Результат.МассивПодписей.Найти(НедостающаяПодпись.Подпись) = Неопределено Тогда
								Результат.МассивПодписей.Добавить(НедостающаяПодпись.Подпись);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если ПолучатьПоследнююПодпись или ПолучатьПоследнююПодписьДляОтправкиЧерезСерверДФС Тогда
						ПоследняяПодпись = ЭлектронныйДокумент.Подписи.Получить(ЭлектронныйДокумент.Подписи.Количество()-1);
						Если Результат.МассивПодписей.Найти(ПоследняяПодпись.Подпись) = Неопределено Тогда
							Результат.МассивПодписей.Добавить(ПоследняяПодпись.Подпись);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ПолучатьВсеПодписи или Не ПодписиПолученыИзЭлектронногоДокумента Тогда
				ВидЭлектронногоДокумента = ЭлементМассиваДанныхПоДокументам.ВидЭлектронногоДокумента;				
				Если ПолучатьНедостающиеПодписи Тогда
					ПодписиПолучены = Ложь;
					Для Каждого Подпись Из ВидЭлектронногоДокумента.Подписи Цикл
						ТекПодпись = Неопределено;
						Если ТипЗнч(Подпись.Подпись) = Тип("СправочникСсылка.скEDI_ГруппыПодписей") Тогда
							Если Подпись.ТолькоОтветственный и (ЭлементМассиваДанныхПоДокументам.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий")) Тогда
								//КодПоДРФО = скEDI_НастройкиПодКонфигурацию.ПолучитьКодПоДРФООтветственногоЗаДокумент(ЭлементМассиваДанныхПоДокументам.Документ1С);
								КодПоДРФО = "";
								НаименованиеОтветственного = "";
								ОписаниеОшибкиОтветственного = "";
								Если скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеОтветственногоЗаДокумент(ЭлементМассиваДанныхПоДокументам.Документ1С, КодПоДРФО, НаименованиеОтветственного, ОписаниеОшибкиОтветственного) Тогда
									Если КодПоДРФО = "" Тогда
										Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
											ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
										КонецЕсли;
										ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + НСтр("ru = 'Не указан Код по ДРФО Ответственного по документу:'; uk = 'Не вказано Код по ДРФО Відповідального по документу:'") + " " + Строка(ЭлементМассиваДанныхПоДокументам.Документ1С);
									Иначе
										ТекПодпись = ПолучитьПодписьИзГруппыПоКодуДРФО(Организация, Подпись.Подпись, КодПоДРФО);
										Если ТекПодпись = Неопределено Тогда
											Сообщение = НСтр("ru = 'В Группе подписей'; uk = 'В Групі підписів'") + " """ + Строка(Подпись.Подпись) + """ " + НСтр("ru = 'не найдена Подпись с Кодом по ДРФО'; uk = 'не знайдено Підпис з Кодом по ДРФО'") + ": " + КодПоДРФО;
											Сообщение = Сообщение + " " + НСтр("ru = ' по документу'; uk = ' по документу'") + ": """ + Строка(ЭлементМассиваДанныхПоДокументам.Документ1С) + """";
											Если Найти(ОшибкаПолученияПодписей, Сообщение) = 0 Тогда
												Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
													ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
												КонецЕсли;
												ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Сообщение;
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;
								Иначе
									Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
										ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
									КонецЕсли;
									ОшибкаПолученияПодписей = ОшибкаПолученияПодписей
										+ НСтр("ru = 'Ошибка определения ответственного по документу:'; uk = 'Помилка визначення відповідального по документу:'")
										+ " """ + Строка(ЭлементМассиваДанныхПоДокументам.Документ1С) + """ "
										+ ОписаниеОшибкиОтветственного;
								КонецЕсли;
							Иначе
								ТекПодпись = Подпись.Подпись;
							КонецЕсли;
						ИначеЕсли ТипЗнч(Подпись.Подпись) = Тип("СправочникСсылка.скEDI_Подписи") Тогда
							Если Подпись.ТолькоОтветственный и (ЭлементМассиваДанныхПоДокументам.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий")) Тогда
								//КодПоДРФО = скEDI_НастройкиПодКонфигурацию.ПолучитьКодПоДРФООтветственногоЗаДокумент(ЭлементМассиваДанныхПоДокументам.Документ1С);
								КодПоДРФО = "";
								НаименованиеОтветственного = "";
								ОписаниеОшибкиОтветственного = "";
								Если скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеОтветственногоЗаДокумент(ЭлементМассиваДанныхПоДокументам.Документ1С, КодПоДРФО, НаименованиеОтветственного, ОписаниеОшибкиОтветственного) Тогда
									Если КодПоДРФО = "" Тогда
										Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
											ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
										КонецЕсли;
										ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + НСтр("ru = 'Не указан Код по ДРФО Ответственного по документу:'; uk = 'Не вказано Код по ДРФО Відповідального по документу:'") + " " + Строка(ЭлементМассиваДанныхПоДокументам.Документ1С);
									Иначе
										Если КодПоДРФО = Подпись.Подпись.ДРФО Тогда
											ТекПодпись = Подпись.Подпись;
										Иначе
											Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
												ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
											КонецЕсли;
											ОшибкаПолученияПодписей = ОшибкаПолученияПодписей
												+ НСтр("ru = 'Код по ДРФО Подписи'; uk = 'Код по ДРФО Підпису'")
												+ " (""" + СокрЛП(Подпись.Подпись) + """, """ + Подпись.Подпись.ДРФО + """) "
												+ НСтр("ru = 'не соответствует Ответственному'; uk = 'не відповідає Відповідальному'")
												+ " (""" + СокрЛП(НаименованиеОтветственного) + """, """ + КодПоДРФО + """) "
												+ НСтр("ru = 'по документу'; uk = 'по документу'")
												+ ": " + Строка(ЭлементМассиваДанныхПоДокументам.Документ1С);
										КонецЕсли;
									КонецЕсли;
								Иначе
									Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
										ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
									КонецЕсли;
									ОшибкаПолученияПодписей = ОшибкаПолученияПодписей
										+ НСтр("ru = 'Ошибка определения ответственного по документу:'; uk = 'Помилка визначення відповідального по документу:'")
										+ " """ + Строка(ЭлементМассиваДанныхПоДокументам.Документ1С) + """ "
										+ ОписаниеОшибкиОтветственного;
								КонецЕсли;
							Иначе
								ТекПодпись = Подпись.Подпись;
							КонецЕсли;
						КонецЕсли;
						
						Если ТекПодпись <> Неопределено Тогда
							Если Результат.МассивПодписей.Найти(ТекПодпись) = Неопределено Тогда
								Результат.МассивПодписей.Добавить(ТекПодпись);
							КонецЕсли;
						КонецЕсли;
						ПодписиПолучены = Истина;
					КонецЦикла;
					Если Не ПодписиПолучены Тогда
						Если СписокВидовЭлектронныхДокументовБезНастроекПоПодписям.НайтиПоЗначению(ВидЭлектронногоДокумента) = Неопределено Тогда
							СписокВидовЭлектронныхДокументовБезНастроекПоПодписям.Добавить(ВидЭлектронногоДокумента);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если ПолучатьПоследнююПодпись или ПолучатьПоследнююПодписьДляОтправкиЧерезСерверДФС Тогда //Так как последняя Подпись Печать, должно сработать и так
					Если ВидЭлектронногоДокумента.Подписи.Количество() > 0 Тогда
						ПоследняяПодпись = ВидЭлектронногоДокумента.Подписи.Получить(ВидЭлектронногоДокумента.Подписи.Количество()-1);
						Если Результат.МассивПодписей.Найти(ПоследняяПодпись.Подпись) = Неопределено Тогда
							Результат.МассивПодписей.Добавить(ПоследняяПодпись.Подпись);
						КонецЕсли;
					Иначе
						Если СписокВидовЭлектронныхДокументовБезНастроекПоПодписям.НайтиПоЗначению(ВидЭлектронногоДокумента) = Неопределено Тогда
							СписокВидовЭлектронныхДокументовБезНастроекПоПодписям.Добавить(ВидЭлектронногоДокумента);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаСписка Из СписокВидовЭлектронныхДокументовБезНастроекПоПодписям Цикл
		Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
			ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
		КонецЕсли;
		ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + НСтр("ru = 'Не настроены подписи для Вида электронного документа:'; uk = 'Не налаштовано підписи для Виду електронного документу:'") + " " + Строка(СтрокаСписка.Значение);
	КонецЦикла;
	
	Результат.МассивПодписейШифрования = Новый Массив;
	Если ПолучатьПодписиШифрования Тогда
		лЭлементМассива = Новый Структура;
		лЭлементМассива.Вставить("ПодписьШифрования", Неопределено);
		лЭлементМассива.Вставить("Организация", Организация);
		Результат.МассивПодписейШифрования.Добавить(лЭлементМассива);
		//Запрос = Новый Запрос;
		//Запрос.Текст =
		//	"ВЫБРАТЬ ПЕРВЫЕ 1
		//	|	скEDI_Подписи.Владелец КАК Организация,
		//	|	скEDI_Подписи.Ссылка КАК ПодписьШифрования
		//	|ИЗ
		//	|	Справочник.скEDI_Подписи КАК скEDI_Подписи
		//	|ГДЕ
		//	|	НЕ скEDI_Подписи.ПометкаУдаления
		//	|	И скEDI_Подписи.Владелец = &Организация
		//	|	И скEDI_Подписи.ИспользованиеКлюча = ЗНАЧЕНИЕ(Перечисление.скEDI_ИспользованиеКлючей.Шифрование)
		//	|
		//	|УПОРЯДОЧИТЬ ПО
		//	|	скEDI_Подписи.ОсновнаяПодписьШифрования УБЫВ";
		//Запрос.УстановитьПараметр("Организация", Организация);
		//
		//лВыборкаРезультатовЗапроса = Запрос.Выполнить().Выбрать();
		//Если лВыборкаРезультатовЗапроса.Следующий() Тогда
		//	лЭлементМассива = Новый Структура;
		//	лЭлементМассива.Вставить("ПодписьШифрования",   лВыборкаРезультатовЗапроса.ПодписьШифрования);
		//	лЭлементМассива.Вставить("Организация",   лВыборкаРезультатовЗапроса.Организация);
		//	Результат.МассивПодписейШифрования.Добавить(лЭлементМассива);
		//Иначе
		//	Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
		//		ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
		//	КонецЕсли;
		//	ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + НСтр("ru = 'Не настроены подписи шифрования по Организации:'; uk = 'Не налаштовано підписи шифрування по Організації:'") + " " + Строка(Организация);
		//КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Функция СформироватьМассивНеобходимыхПодписейДляЭлектронныхДокументовСКвитанцией(МассивОсновныхДанныхДокументов) Экспорт
	
	лРезультат = Новый Массив;
	
	Для Каждого лДанныеПодписываемогоДокумента Из МассивОсновныхДанныхДокументов Цикл
		
		Если ЗначениеЗаполнено(лДанныеПодписываемогоДокумента.ЭлектронныйДокумент) Тогда
			
			Для Каждого лСтрокаПодпись Из лДанныеПодписываемогоДокумента.ЭлектронныйДокумент.Подписи Цикл
				
				Если Не лСтрокаПодпись.Подписано И лРезультат.Найти(лСтрокаПодпись.Подпись) = Неопределено Тогда
					
					лРезультат.Добавить(лСтрокаПодпись.Подпись);
					
				ИначеЕсли лСтрокаПодпись.НомерСтроки = лДанныеПодписываемогоДокумента.ЭлектронныйДокумент.Подписи.Количество() И лРезультат.Найти(лСтрокаПодпись.Подпись) = Неопределено Тогда
					
					лРезультат.Добавить(лСтрокаПодпись.Подпись);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат лРезультат;
	
КонецФункции // СформироватьМассивНеобходимыхПодписейДляЭлектронныхДокументовСКвитанцией()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Функция СформироватьМассивНеобходимыхПодписейДляКвитанций(МассивОсновныхДанныхДокументов) Экспорт
	
	лРезультат = Новый Массив;
	
	Для Каждого лДанныеПодписываемогоДокумента Из МассивОсновныхДанныхДокументов Цикл
		
		Если ЗначениеЗаполнено(лДанныеПодписываемогоДокумента.ЭлектронныйДокумент) Тогда
			
			Для Каждого лСтрокаПодпись Из лДанныеПодписываемогоДокумента.ЭлектронныйДокумент.Подписи Цикл
				
				Если лСтрокаПодпись.НомерСтроки = лДанныеПодписываемогоДокумента.ЭлектронныйДокумент.Подписи.Количество() И лРезультат.Найти(лСтрокаПодпись.Подпись) = Неопределено Тогда
					
					лРезультат.Добавить(лСтрокаПодпись.Подпись);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат лРезультат;
	
КонецФункции // СформироватьМассивНеобходимыхПодписейДляКвитанций()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьКэшированныеНастройкиЭлектронноЦифровыхПодписей(МассивПодписей) Экспорт
	
	// Метод на стадии решения, как организовать работу с кэшем паролей секретных ключей подписей.
	Возврат Неопределено;
	
КонецФункции // ПолучитьКэшированныеНастройкиЭлектронноЦифровыхПодписей()

// Функция - Обработка документов вызов сервера
//
// Параметры:
//  МассивДанныхДокументов	 - 	 - 
//  ДополнительныеПараметры	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ОбработкаДокументовВызовСервера(Знач МассивДанныхДокументов, Знач ДополнительныеПараметры, КлючОбработанойЗаписи = Неопределено, РезультатКоличество = Неопределено, МассивСообщенийПоДокументам = Неопределено) Экспорт
	КлючОбработанойЗаписи = Неопределено;
	Если НЕ ДополнительныеПараметры.Свойство("ВыполняемыеОперации") Тогда 
		скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен список выполняемых операций");
		Возврат "";
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("РезультатВыполнения" , "");
	
	ДополнительныеПараметры.Вставить("НеобходимУИДСтроки" , Истина);
	ДополнительныеПараметры.Вставить("ВызовСКлиента"      , Истина);
	
	КоличествоПроверено = 0;
	КоличествоПровереноЗамечанийНет = 0;
	КоличествоПровереноЕстьЗамечания = 0;
	КоличествоПровереноЕстьОшибки = 0;
	
	СтруктураТаблиц = ПреобразоватьМассивСтруктурВТаблицыЗначений(МассивДанныхДокументов, ДополнительныеПараметры);
	
	лМассивСообщенийПоДокументам = Новый Массив;
	ОбработкаВыполнена = Ложь;
	Для Каждого КлючЗначение Из СтруктураТаблиц Цикл
		лМассивДанныхДокументов = КлючЗначение.Значение;
		ОбработкаДокументов(лМассивДанныхДокументов, ДополнительныеПараметры);
		Если Не ОбработкаВыполнена Тогда
			Если лМассивДанныхДокументов.Количество() > 0 Тогда
				СтрокаОбработанойЗаписи = лМассивДанныхДокументов.Получить(0);
				ЗначениеКлюча = Новый Структура;
				ЗначениеКлюча.Вставить("Организация", СтрокаОбработанойЗаписи.Организация);
				ЗначениеКлюча.Вставить("ЭлектронныйДокумент", СтрокаОбработанойЗаписи.ЭлектронныйДокумент);
				ЗначениеКлюча.Вставить("Документ1С", СтрокаОбработанойЗаписи.Документ1С);
				ЗначениеКлюча.Вставить("ВидЭлектронногоДокумента", СтрокаОбработанойЗаписи.ВидЭлектронногоДокумента);
				КлючОбработанойЗаписи = РегистрыСведений.скEDI_ЭлектронныеДокументы.СоздатьКлючЗаписи(ЗначениеКлюча);
				ОбработкаВыполнена = Истина;
			КонецЕсли;
		КонецЕсли;
		Для Каждого СтрокаМассиваДанныхДокументов Из лМассивДанныхДокументов Цикл
			Если СтрокаМассиваДанныхДокументов.ПроверкаВыполнена Тогда
				КоличествоПроверено = КоличествоПроверено + 1;
				Если СтрокаМассиваДанныхДокументов.ЕстьОшибки Тогда
					КоличествоПровереноЕстьОшибки = КоличествоПровереноЕстьОшибки + 1;
				ИначеЕсли СтрокаМассиваДанныхДокументов.ЕстьЗамечания Тогда
					КоличествоПровереноЕстьЗамечания = КоличествоПровереноЕстьЗамечания + 1;
				Иначе
					КоличествоПровереноЗамечанийНет = КоличествоПровереноЗамечанийНет + 1;
				КонецЕсли;
			КонецЕсли;
				
			Если СтрокаМассиваДанныхДокументов.ЕстьЗамечания или СтрокаМассиваДанныхДокументов.ЕстьОшибки Тогда
				Если СтрокаМассиваДанныхДокументов.ОписаниеОшибок <> "" Тогда
					СтруктураСообщенияПоДокументу = Новый Структура;
					СтруктураСообщенияПоДокументу.Вставить("Ошибка", СтрокаМассиваДанныхДокументов.ЕстьОшибки);
					СтруктураСообщенияПоДокументу.Вставить("Описание", СтрокаМассиваДанныхДокументов.ОписаниеОшибок);
					
					ЗначениеКлюча = Новый Структура;
					ЗначениеКлюча.Вставить("Организация", СтрокаМассиваДанныхДокументов.Организация);
					ЗначениеКлюча.Вставить("ЭлектронныйДокумент", СтрокаМассиваДанныхДокументов.ЭлектронныйДокумент);
					ЗначениеКлюча.Вставить("Документ1С", СтрокаМассиваДанныхДокументов.Документ1С);
					ЗначениеКлюча.Вставить("ВидЭлектронногоДокумента", СтрокаМассиваДанныхДокументов.ВидЭлектронногоДокумента);
					КлючОбработанойЗаписи = РегистрыСведений.скEDI_ЭлектронныеДокументы.СоздатьКлючЗаписи(ЗначениеКлюча);
					СтруктураСообщенияПоДокументу.Вставить("КлючЗаписи", КлючОбработанойЗаписи);
					
					СтруктураСообщенияПоДокументу.Вставить("Организация", СтрокаМассиваДанныхДокументов.Организация);
					СтруктураСообщенияПоДокументу.Вставить("ЭлектронныйДокумент", СтрокаМассиваДанныхДокументов.ЭлектронныйДокумент);
					СтруктураСообщенияПоДокументу.Вставить("Документ1С", СтрокаМассиваДанныхДокументов.Документ1С);
					СтруктураСообщенияПоДокументу.Вставить("ВидЭлектронногоДокумента", СтрокаМассиваДанныхДокументов.ВидЭлектронногоДокумента);
					
					лМассивСообщенийПоДокументам.Добавить(СтруктураСообщенияПоДокументу);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	РезультатКоличество = Новый Структура;
	РезультатКоличество.Вставить("Проверено", КоличествоПроверено);
	РезультатКоличество.Вставить("ПровереноЗамечанийНет", КоличествоПровереноЗамечанийНет);
	РезультатКоличество.Вставить("ПровереноЕстьЗамечания", КоличествоПровереноЕстьЗамечания);
	РезультатКоличество.Вставить("ПровереноЕстьОшибки", КоличествоПровереноЕстьОшибки);
	
	// Информирование.
	МассивСообщенийПоДокументам = Новый ФиксированныйМассив(лМассивСообщенийПоДокументам);
	Если ДополнительныеПараметры.Свойство("РезультатВыполнения")
		И ЗначениеЗаполнено(ДополнительныеПараметры.РезультатВыполнения) Тогда 
		
		Возврат ДополнительныеПараметры.РезультатВыполнения;
	Иначе	
		Возврат "";
	КонецЕсли;	
КонецФункции

// Функция - Обработка документа вызов сервера
//
// Параметры:
//  МассивДанныхДокументов	 - 	 - 
//  ДополнительныеПараметры	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ОбработкаДокументаВызовСервера(МассивДанныхДокументов, ДополнительныеПараметры, КлючОбработанойЗаписи = Неопределено) Экспорт  
	КлючОбработанойЗаписи = Неопределено;
	Если НЕ ДополнительныеПараметры.Свойство("ВыполняемыеОперации") Тогда 
		скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен список выполняемых операций");
		Возврат "";
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("РезультатВыполнения" , "");
	
	ДополнительныеПараметры.Вставить("НеобходимУИДСтроки" , Истина);
	ДополнительныеПараметры.Вставить("ВызовСКлиента"      , Истина);
	
	СтруктураТаблиц = ПреобразоватьМассивСтруктурВТаблицыЗначений(МассивДанныхДокументов, ДополнительныеПараметры);
	
	ОбрабатываемаяТаблица = Неопределено;
	ОбработкаВыполнена = Ложь;
	Для Каждого КлючЗначение Из СтруктураТаблиц Цикл 	
		ОбрабатываемаяТаблица =  КлючЗначение.Значение;
		ОбработкаДокументов(ОбрабатываемаяТаблица, ДополнительныеПараметры);
		Если Не ОбработкаВыполнена Тогда
			Если ОбрабатываемаяТаблица.Количество() > 0 Тогда
				СтрокаОбработанойЗаписи = ОбрабатываемаяТаблица.Получить(0);
				ЗначениеКлюча = Новый Структура;
				ЗначениеКлюча.Вставить("Организация", СтрокаОбработанойЗаписи.Организация);
				ЗначениеКлюча.Вставить("ЭлектронныйДокумент", СтрокаОбработанойЗаписи.ЭлектронныйДокумент);
				ЗначениеКлюча.Вставить("Документ1С", СтрокаОбработанойЗаписи.Документ1С);
				ЗначениеКлюча.Вставить("ВидЭлектронногоДокумента", СтрокаОбработанойЗаписи.ВидЭлектронногоДокумента);
				КлючОбработанойЗаписи = РегистрыСведений.скEDI_ЭлектронныеДокументы.СоздатьКлючЗаписи(ЗначениеКлюча);
				ОбработкаВыполнена = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбрабатываемаяТаблица <> Неопределено Тогда 
		МассивДанныхДокументов = Новый ФиксированныйМассив(ПреобразоватьТаблицуЗначенийВМассивСтруктур(ОбрабатываемаяТаблица));
	КонецЕсли;
	
	// Информирование.
	Если ДополнительныеПараметры.Свойство("РезультатВыполнения")
		И ЗначениеЗаполнено(ДополнительныеПараметры.РезультатВыполнения) Тогда 
		
		Возврат ДополнительныеПараметры.РезультатВыполнения;
		
	Иначе	
		Возврат "";
	КонецЕсли;	
		
КонецФункции

// Функция - Преобразовать таблицу значений в массив структур
//
// Параметры:
//  ОбрабатываемаяТаблица	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПреобразоватьТаблицуЗначенийВМассивСтруктур(ОбрабатываемаяТаблица)
	
	Колонки = ОбрабатываемаяТаблица.Колонки;
	
	МассивРезультат = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ОбрабатываемаяТаблица Цикл 
		
		СтруктураСтроки = Новый Структура;
		
		Для Каждого Колонка Из Колонки Цикл 
			СтруктураСтроки.Вставить(Колонка.Имя);	
		КонецЦикла;	
		
		ЗаполнитьЗначенияСвойств(СтруктураСтроки , СтрокаТаблицы);
		
		МассивРезультат.Добавить(СтруктураСтроки);
		
	КонецЦикла;	
	
	Возврат МассивРезультат;
	
КонецФункции	

// Процедура - Обработка документов
//
// Параметры:
//  ТаблицаДанныхДокументов	 - 	 - 
//  ДополнительныеПараметры	 - 	 - 
//
Процедура ОбработкаДокументов(ТаблицаДанныхДокументов, ДополнительныеПараметры) Экспорт 
	
	Если НЕ ДополнительныеПараметры.Свойство("ВыполняемыеОперации") Тогда 
		скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен список выполняемых операций");
		Возврат;
	Иначе
		ВыполняемыеОперации = ДополнительныеПараметры.ВыполняемыеОперации;
	КонецЕсли;
	
	ДействиеСтр = "";
	КоличествоСформированоНовыйВариант = 0;
	КоличествоПодписано = 0;
	КоличествоОтправленоНаДоподписание = 0;
	КоличествоОтправленоВДФС = 0;
	КоличествоОтправлено = 0;
	КоличествоПодтверждено = 0;
	КоличествоОтклонено = 0;
	КоличествоОтозвано = 0;
	
	Если ВыполняемыеОперации.Найти("СформироватьНовыйВариантИСохранитьЭлектронногоДокумента") <> Неопределено Тогда 
		СформироватьНовыйВариантИСохранитьЭлектронногоДокументаСервер(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоСформированоНовыйВариант);
	КонецЕсли;	
	
	Если ВыполняемыеОперации.Найти("УстановитьОсновнойВариантЭлектронногоДокумента") <> Неопределено Тогда 
		УстановитьОсновнойВариантЭлектронногоДокументаСервер(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоСформированоНовыйВариант);
	КонецЕсли;	
	
	// Получение тела и изображения документов.
	Если ВыполняемыеОперации.Найти("СформироватьНовыйВариантЭлектронногоДокумента") <> Неопределено Тогда 
		Для Каждого СтрокаТаблицыДанныхДокументов Из ТаблицаДанныхДокументов Цикл
			Если СтрокаТаблицыДанныхДокументов.ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий Тогда
				СтрокаТаблицыДанныхДокументов.Состояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С;
				СтрокаТаблицыДанныхДокументов.ЭлектронныйДокумент = Документы.скEDI_ЭлектронныйДокумент.ПустаяСсылка();
				СтрокаТаблицыДанныхДокументов.ГдеСоздан = Перечисления.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	Если ВыполняемыеОперации.Найти("Подпись") <> Неопределено 
		ИЛИ ВыполняемыеОперации.Найти("ОтправитьНаДоподписание") <> Неопределено
		ИЛИ ВыполняемыеОперации.Найти("Отправка") <> Неопределено
		ИЛИ ВыполняемыеОперации.Найти("ОтправкаВДФС") <> Неопределено
		ИЛИ ВыполняемыеОперации.Найти("Проверка") <> Неопределено
		ИЛИ ВыполняемыеОперации.Найти("СохранениеДанных") <> Неопределено Тогда 
		ЗаполнитьПредставленияИзДанныхЭлектронныхДокументов(ТаблицаДанныхДокументов, ДополнительныеПараметры);	
	КонецЕсли;	
	
	// Проверка НалоговыхДокументов
	Если ВыполняемыеОперации.Найти("Подпись") <> Неопределено 
		ИЛИ ВыполняемыеОперации.Найти("Проверка") <> Неопределено Тогда 
		ПроверитьЭлектронныеДокументыСервер(ТаблицаДанныхДокументов, ДополнительныеПараметры);	
	КонецЕсли;	
	
	// Подпись.
	Если ВыполняемыеОперации.Найти("Подпись") <> Неопределено и ВыполняемыеОперации.Найти("Free") = Неопределено Тогда
		ПовторноеУтверждение = ВыполняемыеОперации.Найти("ПовторноеУтверждение") <> Неопределено;
		ПодписатьЭлектронныеДокументыСервер(ТаблицаДанныхДокументов, ДополнительныеПараметры, ПовторноеУтверждение, КоличествоПодписано);	
		ДействиеСтр = ДействиеСтр + ?(ДействиеСтр = "", "", "; ") + НСтр("ru = 'Подпись'; uk = 'Підпис'");
	КонецЕсли;
	
	// Отправка в ДФС.
	Если ВыполняемыеОперации.Найти("ОтправкаВДФС") <> Неопределено и ВыполняемыеОперации.Найти("Free") = Неопределено Тогда 
		ОтправитьЭлектронныеДокументыВДФС(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоОтправленоВДФС);	
		ДействиеСтр = ДействиеСтр + ?(ДействиеСтр = "", "", "; ") + НСтр("ru = 'Отправка в ГНС'; uk = 'Відправлення до ДПС'");
	КонецЕсли;
	
	// Отправка.
	Если ВыполняемыеОперации.Найти("Отправка") <> Неопределено и ВыполняемыеОперации.Найти("Free") = Неопределено Тогда 
		Если ВыполняемыеОперации.Найти("OnlyHref") <> Неопределено Тогда
			ДополнительныеПараметры.Вставить("МожноОтправитьТолькоСсылку", Истина);
		КонецЕсли;
		ОтправитьЭлектронныеДокументы(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоОтправлено);	
		ДействиеСтр = ДействиеСтр + ?(ДействиеСтр = "", "", "; ") + НСтр("ru = 'Отправка'; uk = 'Відправлення'");
	КонецЕсли;
	
	// Подпись и Отправка Free.
	Если ВыполняемыеОперации.Найти("ОтправитьНаДоподписание") <> Неопределено Тогда 
		ОтправитьНаДоподписаниеЭлектронныеДокументыСервер(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоОтправленоНаДоподписание);
		ДействиеСтр = ДействиеСтр + ?(ДействиеСтр = "", "", "; ") + НСтр("ru = 'Отправка на доподписание'; uk = 'Відправлення на допідписання'");
	КонецЕсли;
	
	// Подпись и Отправка Free.
	Если ВыполняемыеОперации.Найти("Подпись") <> Неопределено и ВыполняемыеОперации.Найти("Отправка") <> Неопределено и ВыполняемыеОперации.Найти("Free") <> Неопределено Тогда 
		Если ВыполняемыеОперации.Найти("OnlyHref") <> Неопределено Тогда
			ДополнительныеПараметры.Вставить("МожноОтправитьТолькоСсылку", Истина);
		КонецЕсли;
		ПодписатьОтправитьFreeЭлектронныеДокументыСервер(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоОтправлено);
		ДействиеСтр = ДействиеСтр + ?(ДействиеСтр = "", "", "; ") + НСтр("ru = 'Отправка'; uk = 'Відправлення'");
	КонецЕсли;
	
	// Отправка квитанций.
	Если ВыполняемыеОперации.Найти("ОтправкаКвитанций") <> Неопределено Тогда 
		ДополнительныеПараметры.Вставить("ТипКвитанции", ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение"));
		Если ВыполняемыеОперации.Найти("Free") = Неопределено Тогда
			ОтправитьКвитанцииПоЭлектроннымДокументам(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоПодтверждено, КоличествоПодписано);	
		ИначеЕсли ВыполняемыеОперации.Найти("Подпись") <> Неопределено Тогда
			ОтправитьКвитанцииFreeПоЭлектроннымДокументам(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоПодтверждено, КоличествоПодписано);
		КонецЕсли;
		ДействиеСтр = ДействиеСтр + ?(ДействиеСтр = "", "", "; ") + НСтр("ru = 'Отправка квитанций (подтверждение)'; uk = 'Відправлення квитанцій (підтвердження)'");
	КонецЕсли;
	
	// Отклонение.
	Если ВыполняемыеОперации.Найти("Отклонение") <> Неопределено Тогда 
		ДополнительныеПараметры.Вставить("ТипКвитанции", ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение"));
		Если ВыполняемыеОперации.Найти("Free") = Неопределено Тогда
			ОтправитьКвитанцииПоЭлектроннымДокументам(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоОтклонено, КоличествоПодписано);	
		Иначе
			ОтправитьКвитанцииFreeПоЭлектроннымДокументам(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоОтклонено, КоличествоПодписано);
		КонецЕсли;
		ДействиеСтр = ДействиеСтр + ?(ДействиеСтр = "", "", "; ") + НСтр("ru = 'Отправка квитанций (отклонение)'; uk = 'Відправлення квитанцій (відхилення)'");
	КонецЕсли;	
	
	// Отклонение.
	Если ВыполняемыеОперации.Найти("ОтклонениеАвтоматически") <> Неопределено Тогда 
		ДополнительныеПараметры.Вставить("ТипКвитанции", ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение"));
		ДополнительныеПараметры.Вставить("КвитанцияНеТребуетПодписания", Истина);
		ОтправитьКвитанцииПоЭлектроннымДокументам(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоОтклонено, КоличествоПодписано);	
		ДействиеСтр = ДействиеСтр + ?(ДействиеСтр = "", "", "; ") + НСтр("ru = 'Отправка квитанций (отклонение, авт.)'; uk = 'Відправлення квитанцій (відхилення, авт.)'");
	КонецЕсли;	
	
	// Отзыв.
	Если ВыполняемыеОперации.Найти("Отзыв") <> Неопределено Тогда 
		ДополнительныеПараметры.Вставить("ТипКвитанции", ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв"));
		Если ВыполняемыеОперации.Найти("Free") = Неопределено Тогда
			ОтправитьКвитанцииПоЭлектроннымДокументам(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоОтозвано, КоличествоПодписано);	
		Иначе
			ОтправитьКвитанцииFreeПоЭлектроннымДокументам(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоОтозвано, КоличествоПодписано);
		КонецЕсли;
		ДействиеСтр = ДействиеСтр + ?(ДействиеСтр = "", "", "; ") + НСтр("ru = 'Отправка квитанций (отзыв)'; uk = 'Відправлення квитанцій (відкликання)'");
	КонецЕсли;
		
	// ПовторнаяОтправка.
	Если ВыполняемыеОперации.Найти("ПовторнаяОтправка") <> Неопределено Тогда 
		ОтправитьЭлектронныеДокументыКвитанцииПовторно(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоОтправлено);	
		ДействиеСтр = ДействиеСтр + ?(ДействиеСтр = "", "", "; ") + НСтр("ru = 'Повторная отправка'; uk = 'Повторне відправлення'");
	КонецЕсли;
	
	// СнятьПодписи.
	Если ВыполняемыеОперации.Найти("СнятьПодписи") <> Неопределено Тогда 
		СнятьПодписиСЭлектронныхДокументов(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоОтправлено);	
		ДействиеСтр = ДействиеСтр + ?(ДействиеСтр = "", "", "; ") + НСтр("ru = 'Снятьие подписей'; uk = 'Зняття підписів'");
	КонецЕсли;
	
	// СнятьПодписи.
	Если ВыполняемыеОперации.Найти("СохранениеДанных") <> Неопределено Тогда 
		СохранитьДанныеЭлектронныхДокументов(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоОтправлено);	
		ДействиеСтр = ДействиеСтр + ?(ДействиеСтр = "", "", "; ") + НСтр("ru = 'Сохранение данных'; uk = 'Збереження даних'");
	КонецЕсли;
	
	// Информирование.
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ЖурналОперации) Тогда 
		ЗаписьЖурналаРегистрации("скEDI_ОбработкаДокументов",,,, ДополнительныеПараметры.ЖурналОперации);	
	КонецЕсли;

	// Сбор результатов выполнения операций.
	Если ДополнительныеПараметры.Свойство("РезультатВыполнения") Тогда 
		РезультатВыполнения = "";
		Если ТаблицаДанныхДокументов.Количество() > 1 Тогда
			Замечаний = ТаблицаДанныхДокументов.НайтиСтроки(Новый Структура("ЕстьЗамечания", Истина)).Количество();
			Ошибок = ТаблицаДанныхДокументов.НайтиСтроки(Новый Структура("ЕстьОшибки", Истина)).Количество();
			
			Если Замечаний > 0 Тогда 
				РезультатВыполнения = РезультатВыполнения 
										+ ?(ЗначениеЗаполнено(РезультатВыполнения),Символы.ПС,"")
										+ НСтр("ru = 'Замечаний'; uk = 'Зауважень'") + ": " + Строка(Замечаний);
			КонецЕсли;
			Если Ошибок > 0 Тогда 
				РезультатВыполнения = РезультатВыполнения 
										+ ?(ЗначениеЗаполнено(РезультатВыполнения),Символы.ПС,"")
										+ НСтр("ru = 'Ошибок'; uk = 'Помилок'") + ": " + Строка(Ошибок);
			КонецЕсли;

			Если КоличествоСформированоНовыйВариант > 0 Тогда 
				РезультатВыполнения = РезультатВыполнения 
										+ ?(ЗначениеЗаполнено(РезультатВыполнения),Символы.ПС,"")
										+ НСтр("ru = 'Сформировано новый вариант электронного документа'; uk = 'Сформовано новий варіант електронного документа'") + ": " + Строка(КоличествоСформированоНовыйВариант);
			КонецЕсли;
			Если КоличествоПодписано > 0 Тогда 
				РезультатВыполнения = РезультатВыполнения 
										+ ?(ЗначениеЗаполнено(РезультатВыполнения),Символы.ПС,"")
										+ НСтр("ru = 'Подписано'; uk = 'Підписано'") + ": " + Строка(КоличествоПодписано);
			КонецЕсли;
			Если КоличествоОтправленоНаДоподписание > 0 Тогда 
				РезультатВыполнения = РезультатВыполнения 
										+ ?(ЗначениеЗаполнено(РезультатВыполнения),Символы.ПС,"")
										+ НСтр("ru = 'Отправлено на доподписание'; uk = 'Відправлено на допідписання'") + ": " + Строка(КоличествоОтправленоНаДоподписание);
			КонецЕсли;
			Если КоличествоОтправленоВДФС > 0 Тогда 
				РезультатВыполнения = РезультатВыполнения 
										+ ?(ЗначениеЗаполнено(РезультатВыполнения),Символы.ПС,"")
										+ НСтр("ru = 'Отправлено в ГНС'; uk = 'Відправлено до ДПС'") + ": " + Строка(КоличествоОтправленоВДФС);
			КонецЕсли;
			Если КоличествоОтправлено > 0 Тогда 
				РезультатВыполнения = РезультатВыполнения 
										+ ?(ЗначениеЗаполнено(РезультатВыполнения),Символы.ПС,"")
										+ НСтр("ru = 'Отправлено'; uk = 'Відправлено'") + ": " + Строка(КоличествоОтправлено);
			КонецЕсли;
			Если КоличествоПодтверждено > 0 Тогда 
				РезультатВыполнения = РезультатВыполнения 
										+ ?(ЗначениеЗаполнено(РезультатВыполнения),Символы.ПС,"")
										+ НСтр("ru = 'Подтверждено'; uk = 'Підтверджено'") + ": " + Строка(КоличествоПодтверждено);
			КонецЕсли;
			Если КоличествоОтклонено > 0 Тогда 
				РезультатВыполнения = РезультатВыполнения 
										+ ?(ЗначениеЗаполнено(РезультатВыполнения),Символы.ПС,"")
										+ НСтр("ru = 'Отклонено'; uk = 'Відхилено'") + ": " + Строка(КоличествоОтклонено);
			КонецЕсли;
			Если КоличествоОтозвано > 0 Тогда 
				РезультатВыполнения = РезультатВыполнения 
										+ ?(ЗначениеЗаполнено(РезультатВыполнения),Символы.ПС,"")
										+ НСтр("ru = 'Заблокировано'; uk = 'Заблоковано'") + ": " + Строка(КоличествоОтозвано);
			КонецЕсли;
									
			//Обработано = ТаблицаДанныхДокументов.Количество() - Замечаний - 	Ошибок;	
			//
			//Если Обработано > 0 Тогда 
			//	РезультатВыполнения = РезультатВыполнения 
			//							+ ?(ЗначениеЗаполнено(РезультатВыполнения),Символы.ПС,"")
			//							+ ДействиеСтр + ?(ДействиеСтр = "", "", ". ") + НСтр("ru = 'Обработано документов'; uk = 'Оброблено документів'") + ": " + Строка(Обработано);
			//КонецЕсли;
		КонецЕсли;
	
		Если ЗначениеЗаполнено(ДополнительныеПараметры.ЖурналОперации) Тогда 
			РезультатВыполнения = ДополнительныеПараметры.ЖурналОперации
									+ ?(ЗначениеЗаполнено(РезультатВыполнения),Символы.ПС,"")
									+ РезультатВыполнения;
		КонецЕсли;
		
		ДополнительныеПараметры.РезультатВыполнения = РезультатВыполнения;
	КонецЕсли;	
КонецПроцедуры	

Процедура ЗаполнитьПредставленияИзДанныхЭлектронныхДокументовПоМассивуСтрок(ТаблицаДанныхДокументов, МассивСтрокКЗаполнению, ДополнительныеПараметры)
	Если МассивСтрокКЗаполнению.Количество() > 0 Тогда 
		Если ТаблицаДанныхДокументов.Колонки.Найти("ПараметрыСозданияДокументов") = Неопределено Тогда
			ТаблицаДанныхДокументов.Колонки.Добавить("ПараметрыСозданияДокументов");
		КонецЕсли;
		Если ТаблицаДанныхДокументов.Колонки.Найти("СоответствиеЗначенийРеквизитов") = Неопределено Тогда
			ТаблицаДанныхДокументов.Колонки.Добавить("СоответствиеЗначенийРеквизитов");
			КолонкиСозданы = Истина;
		КонецЕсли;
	//лСтруктураДанныхДокумента.Вставить("ПараметрыСозданияДокументов"    , Новый Структура);
	//лСтруктураДанныхДокумента.Вставить("СоответствиеЗначенийРеквизитов" , Новый Соответствие);
		
		ТаблицаДокументовКЗаполнению = ТаблицаДанныхДокументов.Скопировать(МассивСтрокКЗаполнению);	
		ВыгрузитьДокументы1СВСоответствиеЗначений(ТаблицаДокументовКЗаполнению, ДополнительныеПараметры);
		
		Если ТаблицаДанныхДокументов.Колонки.Найти("УИДСтроки") <> Неопределено Тогда 
			
			// Заполнение данных в основной таблице
			Для Каждого СтрокаЗаполненныхДанных Из ТаблицаДокументовКЗаполнению Цикл 
				
				СтрокаКЗаполнению = ТаблицаДанныхДокументов.Найти(СтрокаЗаполненныхДанных.УИДСтроки, "УИДСтроки");
				
				Если СтрокаКЗаполнению <> Неопределено Тогда 
					ЗаполнитьЗначенияСвойств(СтрокаКЗаполнению, СтрокаЗаполненныхДанных);  	
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЕсли;	
		
	КонецЕсли;
КонецПроцедуры

// Процедура - Заполнить представления из данных электронных документов нов
//
// Параметры:
//  ТаблицаДанныхДокументов	 - 	 - 
//  ДополнительныеПараметры	 - 	 - 
//
Процедура ЗаполнитьПредставленияИзДанныхЭлектронныхДокументов(ТаблицаДанныхДокументов, ДополнительныеПараметры)
	
	// Заполняться представления будут по схемам заполнения. Они разнятся для сочетания ВидДокумента1С+ВидЭлектронногоДокумента (в пределах одной организации EDI).
	ТаблицаВидовДокументов = ТаблицаДанныхДокументов.Скопировать(, "ВидДокумента1С,ВидЭлектронногоДокумента");
	ТаблицаВидовДокументов.Свернуть("ВидДокумента1С,ВидЭлектронногоДокумента");
	Для Каждого ВидДокумента Из ТаблицаВидовДокументов Цикл 
		
		МассивСтрокКЗаполнению = ТаблицаДанныхДокументов.НайтиСтроки(Новый Структура("ВидДокумента1С,ВидЭлектронногоДокумента,Состояние"
																					 , ВидДокумента.ВидДокумента1С
																					 , ВидДокумента.ВидЭлектронногоДокумента
																					 , ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С")
																					 ));
		ЗаполнитьПредставленияИзДанныхЭлектронныхДокументовПоМассивуСтрок(ТаблицаДанныхДокументов, МассивСтрокКЗаполнению, ДополнительныеПараметры);
		
		МассивСтрокКЗаполнению = ТаблицаДанныхДокументов.НайтиСтроки(Новый Структура("ВидДокумента1С,ВидЭлектронногоДокумента,Состояние"
																					 , ВидДокумента.ВидДокумента1С
																					 , ВидДокумента.ВидЭлектронногоДокумента
																					 , ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан")
																					 ));
		ЗаполнитьПредставленияИзДанныхЭлектронныхДокументовПоМассивуСтрок(ТаблицаДанныхДокументов, МассивСтрокКЗаполнению, ДополнительныеПараметры);
		
		МассивСтрокКЗаполнению = ТаблицаДанныхДокументов.НайтиСтроки(Новый Структура("ВидДокумента1С,ВидЭлектронногоДокумента,Состояние"
																					 , ВидДокумента.ВидДокумента1С
																					 , ВидДокумента.ВидЭлектронногоДокумента
																					 , ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПустаяСсылка")
																					 ));
		ЗаполнитьПредставленияИзДанныхЭлектронныхДокументовПоМассивуСтрок(ТаблицаДанныхДокументов, МассивСтрокКЗаполнению, ДополнительныеПараметры);
		
	КонецЦикла;

КонецПроцедуры	

Процедура ПолучитьВложенияЭлектронногоДокумента(ЭлектронныйДокумент, ВложениеДокумента1, ИмяФайлаВложениеДокумента1, ВложениеДокумента2, ИмяФайлаВложениеДокумента2, ВложениеДокумента3, ИмяФайлаВложениеДокумента3, МассивВложенийДокумента4, Замечание)
	Замечание = "";
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ВложенияЭлектронныхДокументов.ВложениеДокумента КАК ВложениеДокумента,
	               |	скEDI_ВложенияЭлектронныхДокументов.ВложениеДокументаХЗ КАК ВложениеДокументаХЗ,
	               |	скEDI_ВложенияЭлектронныхДокументов.ИмяФайлаВложениеДокумента КАК ИмяФайлаВложениеДокумента
	               |ИЗ
	               |	РегистрСведений.скEDI_ВложенияЭлектронныхДокументов КАК скEDI_ВложенияЭлектронныхДокументов
	               |ГДЕ
	               |	скEDI_ВложенияЭлектронныхДокументов.ЭлектронныйДокумент = &ЭлектронныйДокумент
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	скEDI_ВложенияЭлектронныхДокументов.НомерФайла";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		ВложениеДокумента1 = ВыборкаРезультатаЗапроса.ВложениеДокумента;
		ИмяФайлаВложениеДокумента1 = ВыборкаРезультатаЗапроса.ИмяФайлаВложениеДокумента;
		ВложениеДокументаХЗ = ВыборкаРезультатаЗапроса.ВложениеДокументаХЗ.Получить();
		Если ВложениеДокументаХЗ <> Неопределено Тогда
			ВложениеДокумента1 = Base64Строка(ВложениеДокументаХЗ);
		КонецЕсли;
		Если ВыборкаРезультатаЗапроса.Следующий() Тогда
			ВложениеДокумента2 = ВыборкаРезультатаЗапроса.ВложениеДокумента;
			ИмяФайлаВложениеДокумента2 = ВыборкаРезультатаЗапроса.ИмяФайлаВложениеДокумента;
			ВложениеДокументаХЗ = ВыборкаРезультатаЗапроса.ВложениеДокументаХЗ.Получить();
			Если ВложениеДокументаХЗ <> Неопределено Тогда
				ВложениеДокумента2 = Base64Строка(ВложениеДокументаХЗ);
			КонецЕсли;
			Если ВыборкаРезультатаЗапроса.Следующий() Тогда
				ВложениеДокумента3 = ВыборкаРезультатаЗапроса.ВложениеДокумента;
				ИмяФайлаВложениеДокумента3 = ВыборкаРезультатаЗапроса.ИмяФайлаВложениеДокумента;
				ВложениеДокументаХЗ = ВыборкаРезультатаЗапроса.ВложениеДокументаХЗ.Получить();
				Если ВложениеДокументаХЗ <> Неопределено Тогда
					ВложениеДокумента3 = Base64Строка(ВложениеДокументаХЗ);
				КонецЕсли;
				Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
					ТекНомерВложения = 3;
					Если Не ЗначениеЗаполнено(МассивВложенийДокумента4) Тогда
						МассивВложенийДокумента4 = Новый Массив;
					КонецЕсли;
					
					ВложениеДокумента = ВыборкаРезультатаЗапроса.ВложениеДокумента;
					ИмяФайлаВложениеДокумента = ВыборкаРезультатаЗапроса.ИмяФайлаВложениеДокумента;
					ВложениеДокументаХЗ = ВыборкаРезультатаЗапроса.ВложениеДокументаХЗ.Получить();
					Если ВложениеДокументаХЗ <> Неопределено Тогда
						ВложениеДокумента = Base64Строка(ВложениеДокументаХЗ);
					КонецЕсли;
					ТекСтруктураВложения = Новый Структура;
					ТекСтруктураВложения.Вставить("ИмяФайлаВложениеДокумента", ИмяФайлаВложениеДокумента);
					ТекСтруктураВложения.Вставить("ВложениеДокумента", ВложениеДокумента);
					МассивВложенийДокумента4.Добавить(ТекСтруктураВложения);
				КонецЦикла;
			Иначе
				ВложениеДокумента3 = "";
				ИмяФайлаВложениеДокумента3 = "";
				МассивВложенийДокумента4 = Неопределено;
			КонецЕсли;
		Иначе
			ВложениеДокумента2 = "";
			ИмяФайлаВложениеДокумента2 = "";
			ВложениеДокумента3 = "";
			ИмяФайлаВложениеДокумента3 = "";
			МассивВложенийДокумента4 = Неопределено;
		КонецЕсли;
	Иначе
		ВложениеДокумента1 = "";
		ИмяФайлаВложениеДокумента1 = "";
		ВложениеДокумента2 = "";
		ИмяФайлаВложениеДокумента2 = "";
		ВложениеДокумента3 = "";
		ИмяФайлаВложениеДокумента3 = "";
		МассивВложенийДокумента4 = Неопределено;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьМассивВложенийЭлектронногоДокумента(ЭлектронныйДокумент)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ВложенияЭлектронныхДокументов.ВложениеДокумента КАК ВложениеДокумента,
	               |	скEDI_ВложенияЭлектронныхДокументов.ВложениеДокументаХЗ КАК ВложениеДокументаХЗ,
	               |	скEDI_ВложенияЭлектронныхДокументов.ИмяФайлаВложениеДокумента КАК ИмяФайлаВложениеДокумента,
	               |	скEDI_ВложенияЭлектронныхДокументов.Файл КАК Файл
	               |ИЗ
	               |	РегистрСведений.скEDI_ВложенияЭлектронныхДокументов КАК скEDI_ВложенияЭлектронныхДокументов
	               |ГДЕ
	               |	скEDI_ВложенияЭлектронныхДокументов.ЭлектронныйДокумент = &ЭлектронныйДокумент
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	скEDI_ВложенияЭлектронныхДокументов.НомерФайла";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	МассивВложений = Новый Массив;
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		ВложениеДокумента = ВыборкаРезультатаЗапроса.ВложениеДокумента;
		ИмяФайлаВложениеДокумента = ВыборкаРезультатаЗапроса.ИмяФайлаВложениеДокумента;
		ВложениеДокументаХЗ = ВыборкаРезультатаЗапроса.ВложениеДокументаХЗ.Получить();
		Если ВложениеДокументаХЗ <> Неопределено Тогда
			ВложениеДокумента = Base64Строка(ВложениеДокументаХЗ);
		КонецЕсли;
		Файл = ВыборкаРезультатаЗапроса.Файл;
		
		Вложение = Новый Структура("ИмяФайла, СтрокаBase64, Файл", ИмяФайлаВложениеДокумента, ВложениеДокумента, Файл);
		МассивВложений.Добавить(Вложение);
	КонецЦикла;
	Возврат МассивВложений;
КонецФункции

Функция ПолучитьСодержаниеДополнительногоЭлектронногоДокументаДФС(ЭлектронныйДокумент, ТипСодержимого, Ошибка = "") Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_СодержимоеДополнительныхЭлектронныхДокументовДФС.Дата КАК Дата,
	               |	скEDI_СодержимоеДополнительныхЭлектронныхДокументовДФС.ТелоДокумента КАК ТелоДокумента,
	               |	скEDI_СодержимоеДополнительныхЭлектронныхДокументовДФС.ТелоДокументаХЗ КАК ТелоДокументаХЗ,
	               |	скEDI_СодержимоеДополнительныхЭлектронныхДокументовДФС.ИзображениеДокумента КАК ИзображениеДокумента,
	               |	скEDI_СодержимоеДополнительныхЭлектронныхДокументовДФС.ИзображениеДокументаХЗ КАК ИзображениеДокументаХЗ,
	               |	скEDI_СодержимоеДополнительныхЭлектронныхДокументовДФС.ТипСодержимого КАК ТипСодержимого,
	               |	скEDI_СодержимоеДополнительныхЭлектронныхДокументовДФС.ВнешнееХранилище КАК ВнешнееХранилище,
	               |	скEDI_СодержимоеДополнительныхЭлектронныхДокументовДФС.ИдентификаторПоВнешнемуХранилищу КАК ИдентификаторПоВнешнемуХранилищу
	               |ИЗ
	               |	РегистрСведений.скEDI_СодержимоеДополнительныхЭлектронныхДокументовДФС КАК скEDI_СодержимоеДополнительныхЭлектронныхДокументовДФС
	               |ГДЕ
	               |	скEDI_СодержимоеДополнительныхЭлектронныхДокументовДФС.ЭлектронныйДокумент = &ЭлектронныйДокумент
	               |	И скEDI_СодержимоеДополнительныхЭлектронныхДокументовДФС.ТипСодержимого = &ТипСодержимого";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	Запрос.УстановитьПараметр("ТипСодержимого", ТипСодержимого);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		Результат = Новый Структура("Дата,ТелоДокумента,ИзображениеДокумента");
		ЗаполнитьЗначенияСвойств(Результат, ВыборкаРезультатаЗапроса);
		
		ТелоДокументаХЗ = ВыборкаРезультатаЗапроса.ТелоДокументаХЗ.Получить();
		Если ТелоДокументаХЗ <> Неопределено Тогда
			Результат.ТелоДокумента = Base64Строка(ТелоДокументаХЗ);
		КонецЕсли;
		
		ИзображениеДокументаХЗ = ВыборкаРезультатаЗапроса.ИзображениеДокументаХЗ.Получить();
		Если ИзображениеДокументаХЗ <> Неопределено Тогда
			Результат.ИзображениеДокумента = Base64Строка(ИзображениеДокументаХЗ);
		КонецЕсли;
		
		ВнешнееХранилище = ВыборкаРезультатаЗапроса.ВнешнееХранилище;
		Если ЗначениеЗаполнено(ВнешнееХранилище) Тогда
			//ЭлектронныйДокумент,
			ТелоДокумента = "";
			ИзображениеДокумента = "";
			Ошибка = "";
			
			Если скEDI_ВнешниеХранилища.ПолучитьСодержимоеДополнительногоЭлектронногоДокументаДФС(ВыборкаРезультатаЗапроса.ВнешнееХранилище,
				ЭлектронныйДокумент, ВыборкаРезультатаЗапроса.ИдентификаторПоВнешнемуХранилищу, ВыборкаРезультатаЗапроса.ТипСодержимого,
				ТелоДокумента,
				ИзображениеДокумента,
				Ошибка) Тогда
				
				Результат.ТелоДокумента = ТелоДокумента;
				Результат.ИзображениеДокумента = ИзображениеДокумента;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		Иначе
		КонецЕсли;
		
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, ТолькоДокументДФС = Ложь, ТолькоПолученоОтКонтрагента = Ложь, ТолькоДокументДляДФС = Ложь, Ошибка = "") Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	скEDI_СодержимоеЭлектронныхДокументов.Дата КАК Дата,
	               |	скEDI_СодержимоеЭлектронныхДокументов.ИмяФайла КАК ИмяФайла,
	               |	скEDI_СодержимоеЭлектронныхДокументов.НомерВерсии КАК НомерВерсии,
	               |	скEDI_СодержимоеЭлектронныхДокументов.ТелоДокумента КАК ТелоДокумента,
	               |	скEDI_СодержимоеЭлектронныхДокументов.ТелоДокументаХЗ КАК ТелоДокументаХЗ,
	               |	скEDI_СодержимоеЭлектронныхДокументов.ИзображениеДокумента КАК ИзображениеДокумента,
	               |	скEDI_СодержимоеЭлектронныхДокументов.ИзображениеДокументаХЗ КАК ИзображениеДокументаХЗ,
	               |	скEDI_СодержимоеЭлектронныхДокументов.ВложениеДокумента1 КАК ВложениеДокумента1,
	               |	скEDI_СодержимоеЭлектронныхДокументов.ВложениеДокумента1ХЗ КАК ВложениеДокумента1ХЗ,
	               |	скEDI_СодержимоеЭлектронныхДокументов.ИмяФайлаВложениеДокумента1 КАК ИмяФайлаВложениеДокумента1,
	               |	скEDI_СодержимоеЭлектронныхДокументов.ВложениеДокумента2 КАК ВложениеДокумента2,
	               |	скEDI_СодержимоеЭлектронныхДокументов.ВложениеДокумента2ХЗ КАК ВложениеДокумента2ХЗ,
	               |	скEDI_СодержимоеЭлектронныхДокументов.ИмяФайлаВложениеДокумента2 КАК ИмяФайлаВложениеДокумента2,
	               |	скEDI_СодержимоеЭлектронныхДокументов.ВложениеДокумента3 КАК ВложениеДокумента3,
	               |	скEDI_СодержимоеЭлектронныхДокументов.ВложениеДокумента3ХЗ КАК ВложениеДокумента3ХЗ,
	               |	скEDI_СодержимоеЭлектронныхДокументов.ИмяФайлаВложениеДокумента3 КАК ИмяФайлаВложениеДокумента3,
	               |	скEDI_СодержимоеЭлектронныхДокументов.ДокументДФС КАК ДокументДФС,
	               |	скEDI_СодержимоеЭлектронныхДокументов.ПолученоОтКонтрагента КАК ПолученоОтКонтрагента,
	               |	скEDI_СодержимоеЭлектронныхДокументов.ПолученоОтКонтрагентаСПомощью КАК ПолученоОтКонтрагентаСПомощью,
	               |	скEDI_СодержимоеЭлектронныхДокументов.ДокументДляДФС КАК ДокументДляДФС,
	               |	скEDI_СодержимоеЭлектронныхДокументов.ВнешнееХранилище КАК ВнешнееХранилище,
	               |	скEDI_СодержимоеЭлектронныхДокументов.ИдентификаторПоВнешнемуХранилищу КАК ИдентификаторПоВнешнемуХранилищу
	               |ИЗ
	               |	РегистрСведений.скEDI_СодержимоеЭлектронныхДокументов КАК скEDI_СодержимоеЭлектронныхДокументов
	               |ГДЕ
	               |	скEDI_СодержимоеЭлектронныхДокументов.ЭлектронныйДокумент = &ЭлектронныйДокумент
	               |	И скEDI_СодержимоеЭлектронныхДокументов.НомерДополнения = 0
	               |	И скEDI_СодержимоеЭлектронныхДокументов.ДокументДФС
	               |	И скEDI_СодержимоеЭлектронныхДокументов.ПолученоОтКонтрагента
	               |	И скEDI_СодержимоеЭлектронныхДокументов.ДокументДляДФС
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерВерсии УБЫВ";
	Если не ТолькоДокументДФС Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И скEDI_СодержимоеЭлектронныхДокументов.ДокументДФС", "");
	КонецЕсли;
	Если не ТолькоПолученоОтКонтрагента Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И скEDI_СодержимоеЭлектронныхДокументов.ПолученоОтКонтрагента", "");
	КонецЕсли;
	Если не ТолькоДокументДляДФС Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И скEDI_СодержимоеЭлектронныхДокументов.ДокументДляДФС", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		Результат = Новый Структура("Дата,ИмяФайла,НомерВерсии,ТелоДокумента,ИзображениеДокумента,ВложениеДокумента1,ИмяФайлаВложениеДокумента1,ВложениеДокумента2,ИмяФайлаВложениеДокумента2,ВложениеДокумента3,ИмяФайлаВложениеДокумента3,МассивВложенийДокумента4,ДокументДФС,ПолученоОтКонтрагента,ПолученоОтКонтрагентаСПомощью");
		ЗаполнитьЗначенияСвойств(Результат, ВыборкаРезультатаЗапроса);
		
		ТелоДокументаХЗ = ВыборкаРезультатаЗапроса.ТелоДокументаХЗ.Получить();
		Если ТелоДокументаХЗ <> Неопределено Тогда
			Результат.ТелоДокумента = Base64Строка(ТелоДокументаХЗ);
		КонецЕсли;
		
		ИзображениеДокументаХЗ = ВыборкаРезультатаЗапроса.ИзображениеДокументаХЗ.Получить();
		Если ИзображениеДокументаХЗ <> Неопределено Тогда
			Результат.ИзображениеДокумента = Base64Строка(ИзображениеДокументаХЗ);
		КонецЕсли;
		
		ВложениеДокумента1ХЗ = ВыборкаРезультатаЗапроса.ВложениеДокумента1ХЗ.Получить();
		Если ВложениеДокумента1ХЗ <> Неопределено Тогда
			Результат.ВложениеДокумента1 = Base64Строка(ВложениеДокумента1ХЗ);
		КонецЕсли;
		
		ВложениеДокумента2ХЗ = ВыборкаРезультатаЗапроса.ВложениеДокумента2ХЗ.Получить();
		Если ВложениеДокумента2ХЗ <> Неопределено Тогда
			Результат.ВложениеДокумента2 = Base64Строка(ВложениеДокумента2ХЗ);
		КонецЕсли;
		
		ВложениеДокумента3ХЗ = ВыборкаРезультатаЗапроса.ВложениеДокумента3ХЗ.Получить();
		Если ВложениеДокумента3ХЗ <> Неопределено Тогда
			Результат.ВложениеДокумента3 = Base64Строка(ВложениеДокумента3ХЗ);
		КонецЕсли;
		
		ВнешнееХранилище = ВыборкаРезультатаЗапроса.ВнешнееХранилище;
		Если ЗначениеЗаполнено(ВнешнееХранилище) Тогда
			//ЭлектронныйДокумент,
			ТелоДокумента = "";
			ИзображениеДокумента = "";
			ВложениеДокумента1 = "";
			ВложениеДокумента2 = "";
			ВложениеДокумента3 = "";
			Ошибка = "";
			
			Если скEDI_ВнешниеХранилища.ПолучитьСодержимоеЭлектронногоДокумента(ВнешнееХранилище,
				ЭлектронныйДокумент, ВыборкаРезультатаЗапроса.ИдентификаторПоВнешнемуХранилищу, ВыборкаРезультатаЗапроса.НомерВерсии,
				ТелоДокумента,
				ИзображениеДокумента,
				ВложениеДокумента1,
				ВложениеДокумента2,
				ВложениеДокумента3,
				Ошибка) Тогда
				
				Результат.ТелоДокумента = ТелоДокумента;
				Результат.ИзображениеДокумента = ИзображениеДокумента;
				Результат.ВложениеДокумента1 = ВложениеДокумента1;
				Результат.ВложениеДокумента2 = ВложениеДокумента2;
				Результат.ВложениеДокумента3 = ВложениеДокумента3;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	скEDI_СодержимоеЭлектронныхДокументов.Дата КАК Дата,
		               |	скEDI_СодержимоеЭлектронныхДокументов.ИмяФайла КАК ИмяФайла,
		               |	скEDI_СодержимоеЭлектронныхДокументов.НомерВерсии КАК НомерВерсии,
		               |	скEDI_СодержимоеЭлектронныхДокументов.ТелоДокумента КАК ТелоДокумента,
		               |	скEDI_СодержимоеЭлектронныхДокументов.ТелоДокументаХЗ КАК ТелоДокументаХЗ,
		               |	скEDI_СодержимоеЭлектронныхДокументов.ИзображениеДокумента КАК ИзображениеДокумента,
		               |	скEDI_СодержимоеЭлектронныхДокументов.ИзображениеДокументаХЗ КАК ИзображениеДокументаХЗ,
		               |	скEDI_СодержимоеЭлектронныхДокументов.ВложениеДокумента1 КАК ВложениеДокумента1,
		               |	скEDI_СодержимоеЭлектронныхДокументов.ВложениеДокумента1ХЗ КАК ВложениеДокумента1ХЗ,
		               |	скEDI_СодержимоеЭлектронныхДокументов.ИмяФайлаВложениеДокумента1 КАК ИмяФайлаВложениеДокумента1,
		               |	скEDI_СодержимоеЭлектронныхДокументов.ВложениеДокумента2 КАК ВложениеДокумента2,
		               |	скEDI_СодержимоеЭлектронныхДокументов.ВложениеДокумента2ХЗ КАК ВложениеДокумента2ХЗ,
		               |	скEDI_СодержимоеЭлектронныхДокументов.ИмяФайлаВложениеДокумента2 КАК ИмяФайлаВложениеДокумента2,
		               |	скEDI_СодержимоеЭлектронныхДокументов.ВложениеДокумента3 КАК ВложениеДокумента3,
		               |	скEDI_СодержимоеЭлектронныхДокументов.ВложениеДокумента3ХЗ КАК ВложениеДокумента3ХЗ,
		               |	скEDI_СодержимоеЭлектронныхДокументов.ИмяФайлаВложениеДокумента3 КАК ИмяФайлаВложениеДокумента3,
		               |	скEDI_СодержимоеЭлектронныхДокументов.ДокументДФС КАК ДокументДФС,
		               |	скEDI_СодержимоеЭлектронныхДокументов.ПолученоОтКонтрагента КАК ПолученоОтКонтрагента,
		               |	скEDI_СодержимоеЭлектронныхДокументов.ПолученоОтКонтрагентаСПомощью КАК ПолученоОтКонтрагентаСПомощью,
		               |	скEDI_СодержимоеЭлектронныхДокументов.ДокументДляДФС КАК ДокументДляДФС,
		               |	скEDI_СодержимоеЭлектронныхДокументов.ВнешнееХранилище КАК ВнешнееХранилище,
		               |	скEDI_СодержимоеЭлектронныхДокументов.ИдентификаторПоВнешнемуХранилищу КАК ИдентификаторПоВнешнемуХранилищу
		               |ИЗ
		               |	РегистрСведений.скEDI_СодержимоеЭлектронныхДокументов КАК скEDI_СодержимоеЭлектронныхДокументов
		               |ГДЕ
		               |	скEDI_СодержимоеЭлектронныхДокументов.ЭлектронныйДокумент = &ЭлектронныйДокумент
		               |	И скEDI_СодержимоеЭлектронныхДокументов.НомерВерсии = &НомерВерсии
		               |	И скEDI_СодержимоеЭлектронныхДокументов.НомерДополнения > 0
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	скEDI_СодержимоеЭлектронныхДокументов.НомерДополнения";
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		Запрос.УстановитьПараметр("НомерВерсии", Результат.НомерВерсии);
		РезультатаЗапроса = Запрос.Выполнить();
		Если не РезультатаЗапроса.Пустой() Тогда
			МассивВложенийДокумента4 = Новый Массив;
			
			ВыборкаРезультатаЗапроса = РезультатаЗапроса.Выбрать();
			Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
				ВнешнееХранилище = ВыборкаРезультатаЗапроса.ВнешнееХранилище;
				
				ВложениеДокумента1 = ВыборкаРезультатаЗапроса.ВложениеДокумента1;
				ИмяФайлаВложениеДокумента1 = ВыборкаРезультатаЗапроса.ИмяФайлаВложениеДокумента1;
				ВложениеДокумента2 = ВыборкаРезультатаЗапроса.ВложениеДокумента2;
				ИмяФайлаВложениеДокумента2 = ВыборкаРезультатаЗапроса.ИмяФайлаВложениеДокумента2;
				ВложениеДокумента3 = ВыборкаРезультатаЗапроса.ВложениеДокумента3;
				ИмяФайлаВложениеДокумента3 = ВыборкаРезультатаЗапроса.ИмяФайлаВложениеДокумента3;
				
				//ТелоДокументаХЗ = ВыборкаРезультатаЗапроса.ТелоДокументаХЗ.Получить();
				//Если ТелоДокументаХЗ <> Неопределено Тогда
				//	ТелоДокумента = Base64Строка(ТелоДокументаХЗ);
				//КонецЕсли;
				//
				//ИзображениеДокументаХЗ = ВыборкаРезультатаЗапроса.ИзображениеДокументаХЗ.Получить();
				//Если ИзображениеДокументаХЗ <> Неопределено Тогда
				//	ИзображениеДокумента = Base64Строка(ИзображениеДокументаХЗ);
				//КонецЕсли;
				//
				ВложениеДокумента1ХЗ = ВыборкаРезультатаЗапроса.ВложениеДокумента1ХЗ.Получить();
				Если ВложениеДокумента1ХЗ <> Неопределено Тогда
					ВложениеДокумента1 = Base64Строка(ВложениеДокумента1ХЗ);
				КонецЕсли;
				
				ВложениеДокумента2ХЗ = ВыборкаРезультатаЗапроса.ВложениеДокумента2ХЗ.Получить();
				Если ВложениеДокумента2ХЗ <> Неопределено Тогда
					ВложениеДокумента2 = Base64Строка(ВложениеДокумента2ХЗ);
				КонецЕсли;
				
				ВложениеДокумента3ХЗ = ВыборкаРезультатаЗапроса.ВложениеДокумента3ХЗ.Получить();
				Если ВложениеДокумента3ХЗ <> Неопределено Тогда
					ВложениеДокумента3 = Base64Строка(ВложениеДокумента3ХЗ);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВнешнееХранилище) Тогда
					ТелоДокумента = "";
					ИзображениеДокумента = "";
					ВложениеДокумента1 = "";
					ВложениеДокумента2 = "";
					ВложениеДокумента3 = "";
					Ошибка = "";
					
					Если скEDI_ВнешниеХранилища.ПолучитьСодержимоеЭлектронногоДокумента(ВыборкаРезультатаЗапроса.ВнешнееХранилище,
						ЭлектронныйДокумент, ВыборкаРезультатаЗапроса.ИдентификаторПоВнешнемуХранилищу, ВыборкаРезультатаЗапроса.НомерВерсии,
						ТелоДокумента,
						ИзображениеДокумента,
						ВложениеДокумента1,
						ВложениеДокумента2,
						ВложениеДокумента3,
						Ошибка) Тогда
						
					Иначе
						Возврат Неопределено;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента1) И ЗначениеЗаполнено(ВложениеДокумента1) Тогда
					ТекСтруктураВложения = Новый Структура;
					ТекСтруктураВложения.Вставить("ИмяФайлаВложениеДокумента", ИмяФайлаВложениеДокумента1);
					ТекСтруктураВложения.Вставить("ВложениеДокумента", ВложениеДокумента1);
					МассивВложенийДокумента4.Добавить(ТекСтруктураВложения);
				КонецЕсли;
				Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента2) И ЗначениеЗаполнено(ВложениеДокумента2) Тогда
					ТекСтруктураВложения = Новый Структура;
					ТекСтруктураВложения.Вставить("ИмяФайлаВложениеДокумента", ИмяФайлаВложениеДокумента2);
					ТекСтруктураВложения.Вставить("ВложениеДокумента", ВложениеДокумента2);
					МассивВложенийДокумента4.Добавить(ТекСтруктураВложения);
				КонецЕсли;
				Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента3) И ЗначениеЗаполнено(ВложениеДокумента3) Тогда
					ТекСтруктураВложения = Новый Структура;
					ТекСтруктураВложения.Вставить("ИмяФайлаВложениеДокумента", ИмяФайлаВложениеДокумента3);
					ТекСтруктураВложения.Вставить("ВложениеДокумента", ВложениеДокумента3);
					МассивВложенийДокумента4.Добавить(ТекСтруктураВложения);
				КонецЕсли;
			КонецЦикла;
			Результат.МассивВложенийДокумента4 = МассивВложенийДокумента4;
		КонецЕсли;
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьСледующийНомерВерсииСодержанияЭлектронногоДокумента(ЭлектронныйДокумент)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(скEDI_СодержимоеЭлектронныхДокументов.НомерВерсии) КАК НомерВерсии
	               |ИЗ
	               |	РегистрСведений.скEDI_СодержимоеЭлектронныхДокументов КАК скEDI_СодержимоеЭлектронныхДокументов
	               |ГДЕ
	               |	скEDI_СодержимоеЭлектронныхДокументов.ЭлектронныйДокумент = &ЭлектронныйДокумент
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерВерсии УБЫВ";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		НомерВерсии = ВыборкаРезультатаЗапроса.НомерВерсии;
		Если НомерВерсии = Null Тогда
			Возврат 1;
		Иначе
			Возврат НомерВерсии + 1;
		КонецЕсли;
	Иначе
		Возврат 1;
	КонецЕсли;
КонецФункции

Функция ПолучитьСледующийОтрицательныйНомерВерсииСодержанияЭлектронногоДокумента(ЭлектронныйДокумент)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МИНИМУМ(скEDI_СодержимоеЭлектронныхДокументов.НомерВерсии) КАК НомерВерсии
	               |ИЗ
	               |	РегистрСведений.скEDI_СодержимоеЭлектронныхДокументов КАК скEDI_СодержимоеЭлектронныхДокументов
	               |ГДЕ
	               |	скEDI_СодержимоеЭлектронныхДокументов.ЭлектронныйДокумент = &ЭлектронныйДокумент
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерВерсии УБЫВ";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		НомерВерсии = ВыборкаРезультатаЗапроса.НомерВерсии;
		Если НомерВерсии = Null Тогда
			Возврат -1;
		ИначеЕсли НомерВерсии >= 0 Тогда
			Возврат -1;
		Иначе
			Возврат НомерВерсии - 1;
		КонецЕсли;
	Иначе
		Возврат -1;
	КонецЕсли;
КонецФункции

Процедура ПроверитьЭлектронныеДокументыСервер(ТаблицаДанныхДокументов, ДополнительныеПараметры) Экспорт
	ЖурналОперации           = "";//ДополнительныеПараметры.ЖурналОперации;
	
	Для Каждого ДанныеДокумента Из ТаблицаДанныхДокументов Цикл 
		ТелоДокумента = "";
		ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
		ЭлектронныйДокумент = Неопределено;
		УчетныйДокумент = Неопределено;
		Состояние = ДанныеДокумента.Состояние;
		Если ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
		ИначеЕсли ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
		Иначе
			Продолжить;
		КонецЕсли;
		
		УчетныйДокумент = ДанныеДокумента.Документ1С;
		Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С") Тогда
			ТелоДокумента = ДанныеДокумента.ТелоДокумента;
		ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан") Тогда
			ТелоДокумента = ДанныеДокумента.ТелоДокумента;
		//ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Получен") Тогда
		Иначе
			ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
			ОшибкаПолученияСодержимогоЭлДок = "";
			СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
			Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
				ДанныеДокумента.ЕстьОшибки = Истина;
				Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
					ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
				КонецЕсли;
				ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
				ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
				Если ЗначениеЗаполнено(ДанныеДокумента.Документ1С) Тогда
					Замечание = Строка(ДанныеДокумента.Документ1С) + ": " + ОшибкаПолученияСодержимогоЭлДок;
				Иначе
					Замечание = Строка(ВидЭлектронногоДокумента) + " " + Строка(ДанныеДокумента.ЭлектронныйДокумент) + ": " + ОшибкаПолученияСодержимогоЭлДок;
				КонецЕсли;
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
				ДанныеДокумента.ПроверкаВыполнена = Истина;
				Продолжить;
			КонецЕсли;
			ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
		//Иначе
		//	Продолжить;
		КонецЕсли;
		
		СоответствиеЗначенийРеквизитов = Неопределено;
		ПараметрыСозданияДокументов = Неопределено;
		Попытка
			ПараметрыСозданияДокументов = ДанныеДокумента.ПараметрыСозданияДокументов;
		Исключение
		КонецПопытки;
		
		Если ТипЗнч(ПараметрыСозданияДокументов) = Тип("Структура") Тогда
			СоответствиеЗначенийРеквизитов = ДанныеДокумента.СоответствиеЗначенийРеквизитов;
		Иначе
			Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
				СоответствиеЗначенийРеквизитов = ЭлектронныйДокумент.ХранилищеРеквизитовЭлектронногоДокумента.Получить();
			Иначе
				СоответствиеЗначенийРеквизитов = Новый Соответствие;
			КонецЕсли;
		КонецЕсли;
		
		Замечание = "";
		Предупреждение = "";
		ОбработатьСобытие_ПриПроверкеНалоговогоДокумента(ВидЭлектронногоДокумента.Владелец, ВидЭлектронногоДокумента, ДанныеДокумента.ВхИсх, ДанныеДокумента.ГдеСоздан, ЭлектронныйДокумент, Состояние, УчетныйДокумент, СоответствиеЗначенийРеквизитов, Замечание, Предупреждение);
		
		Если ВидЭлектронногоДокумента.НалоговыйДокументВыполнятьПроверкуПоXSDСхеме или ВидЭлектронногоДокумента.НалоговыйДокументВыполнятьЛогическуюПроверку Тогда
			ПараметрыЗапросаНаПроверку = Новый Структура;
			ПараметрыЗапросаНаПроверку.Вставить("Body", ТелоДокумента);
			Если ВидЭлектронногоДокумента.НалоговыйДокументВыполнятьПроверкуПоXSDСхеме Тогда
				ПараметрыЗапросаНаПроверку.Вставить("NoXsdValidation", 0);
			Иначе
				ПараметрыЗапросаНаПроверку.Вставить("NoXsdValidation", 1);
			КонецЕсли;
			Если ВидЭлектронногоДокумента.НалоговыйДокументВыполнятьЛогическуюПроверку Тогда
				ПараметрыЗапросаНаПроверку.Вставить("NoLogicalValidation", 0);
			Иначе
				ПараметрыЗапросаНаПроверку.Вставить("NoLogicalValidation", 1);
			КонецЕсли;
			ОтветEDIПровайдера = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("gov/checkxml", ПараметрыЗапросаНаПроверку);
			
			ОбработаноПоМассиву = Ложь;
			МассивErrors = Неопределено;
			Если ОтветEDIПровайдера.Свойство("Errors", МассивErrors) Тогда
				ОбработаноПоМассиву = Истина;
				Если ТипЗнч(МассивErrors) = Тип("Массив") Тогда
					Для Каждого ЭлементМассиваErrors Из МассивErrors Цикл
						Если Замечание = "" Тогда
							Замечание = ЭлементМассиваErrors.Message;
						Иначе
							Замечание = Замечание + Символы.ПС + ЭлементМассиваErrors.Message;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			МассивWarning = Неопределено;
			Если ОтветEDIПровайдера.Свойство("Warning", МассивWarning) Тогда
				ОбработаноПоМассиву = Истина;
				Если ТипЗнч(МассивWarning) = Тип("Массив") Тогда
					Для Каждого ЭлементМассиваWarning Из МассивWarning Цикл
						Если Предупреждение = "" Тогда
							Предупреждение = ЭлементМассиваWarning.Message;
						Иначе
							Предупреждение = Предупреждение + Символы.ПС + ЭлементМассиваWarning.Message;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			МассивInfo = Неопределено;
			Если ОтветEDIПровайдера.Свойство("Info", МассивInfo) Тогда
				ОбработаноПоМассиву = Истина;
				Если ТипЗнч(МассивInfo) = Тип("Массив") Тогда
					Для Каждого ЭлементМассиваInfo Из МассивInfo Цикл
						Если Предупреждение = "" Тогда
							Предупреждение = ЭлементМассиваInfo.Message;
						Иначе
							Предупреждение = Предупреждение + Символы.ПС + ЭлементМассиваInfo.Message;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			Если Не ОбработаноПоМассиву Тогда
				Если ОтветEDIПровайдера.Code <> 0 Тогда
					Если Замечание = "" Тогда
						Замечание = ОтветEDIПровайдера.Message;
					Иначе
						Замечание = Замечание + Символы.ПС + ОтветEDIПровайдера.Message;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если Замечание <> "" или Предупреждение <> "" Тогда
				ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
				ОбщееЗамечание = "";
				Если Замечание <> "" Тогда
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание, , , Ложь);
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОбщееЗамечание, Замечание, , , Ложь);
				КонецЕсли;
				Если Предупреждение <> "" Тогда
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Предупреждение, , , Ложь);
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОбщееЗамечание, Предупреждение, , , Ложь);
				КонецЕсли;
				ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
				
				Если Замечание <> "" Тогда
					Если ВидЭлектронногоДокумента.НалоговыйДокументДействияПриОбнаруженииОшибок = ПредопределенноеЗначение("Перечисление.скEDI_ДействияПриОбнаруженииОшибок.Ошибка") Тогда
						ДанныеДокумента.ЕстьОшибки = Истина;
					Иначе
						ДанныеДокумента.ЕстьЗамечания = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если Предупреждение <> "" Тогда
					ДанныеДокумента.ЕстьЗамечания = Истина;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеДокумента.Документ1С) Тогда
					Замечание = Строка(ДанныеДокумента.Документ1С) + ": " + ОбщееЗамечание;
				Иначе
					Замечание = Строка(ВидЭлектронногоДокумента) + " " + Строка(ДанныеДокумента.ЭлектронныйДокумент) + ": " + ОбщееЗамечание;
				КонецЕсли;
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
			КонецЕсли;
			
			ДанныеДокумента.ПроверкаВыполнена = Истина;
		КонецЕсли;
	КонецЦикла;

	// Обновление журнала операций.
	Если ЖурналОперации <> "" Тогда
		Если ДополнительныеПараметры.ЖурналОперации = "" Тогда
			ДополнительныеПараметры.ЖурналОперации = ЖурналОперации;
		Иначе
			ДополнительныеПараметры.ЖурналОперации = ДополнительныеПараметры.ЖурналОперации + Символы.ПС + ЖурналОперации;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПодписатьЭлектронныйДокументСервер()

Функция ПроверитьПараметрыСозданияЭлектронногоДокумента(ПараметрыСозданияДокументов, ТекстОшибки)
	IsMultisided = Неопределено;
	Если ТипЗнч(ПараметрыСозданияДокументов) = Тип("Структура") Тогда
		Если ПараметрыСозданияДокументов.Свойство("IsMultisided", IsMultisided) Тогда
			Если IsMultisided Тогда
				Маршрут = Неопределено;
				Если ПараметрыСозданияДокументов.Свойство("Маршрут", Маршрут) Тогда
					Если ТипЗнч(Маршрут) = Тип("Массив") Тогда
						НомерЭлементаМаршрута = 0;
						Для Каждого ЭлементМаршрута из Маршрут Цикл
							НомерЭлементаМаршрута = НомерЭлементаМаршрута + 1;
							Если Не ЗначениеЗаполнено(ЭлементМаршрута.ЕДРПОУКонтрагента) Тогда
								ТекстОшибки = НСтр("ru = 'Не заполнен маршрут документа. Сторона № '; uk = 'Не заповнено маршрут документу. Сторона № '") + Строка(НомерЭлементаМаршрута);
								Возврат Ложь;
							КонецЕсли;
						КонецЦикла;
						Возврат Истина;
					Иначе
						ТекстОшибки = НСтр("ru = 'Не заполнен маршрут документа.'; uk = 'Не заповнено маршрут документу.'");
						Возврат Ложь;
					КонецЕсли;
				Иначе
					ТекстОшибки = НСтр("ru = 'Отсутствует маршрут документа.'; uk = 'Відсутній маршрут документу.'");
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("ru = 'Отсутствуют данные для заполнения документа.'; uk = 'Відсутні дані для заповнення документа.'");
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Процедура ДозаполнитьПараметрыСозданияЭлектронногоДокумента(ПараметрыСозданияДокументов, ОрганизацияEDI)
	IsMultisided = Неопределено;
	Если ПараметрыСозданияДокументов.Свойство("IsMultisided", IsMultisided) Тогда
		Если IsMultisided Тогда
			Маршрут = Неопределено;
			Если ПараметрыСозданияДокументов.Свойство("Маршрут", Маршрут) Тогда
				Если ТипЗнч(Маршрут) = Тип("Массив") Тогда
					НомерЭлементаМаршрута = 0;
					Для Каждого ЭлементМаршрута из Маршрут Цикл
						ПолучитьДанныеПоЭлементуМаршрута = Истина;
						лНаименованиеКонтрагента = Неопределено;
						Если ЭлементМаршрута.Свойство("НаименованиеКонтрагента", лНаименованиеКонтрагента) Тогда
							Если ЗначениеЗаполнено(лНаименованиеКонтрагента) Тогда
								ПолучитьДанныеПоЭлементуМаршрута = Ложь;
							КонецЕсли;
						КонецЕсли;
						Если ПолучитьДанныеПоЭлементуМаршрута Тогда
							Если ЗначениеЗаполнено(ЭлементМаршрута.ЕДРПОУКонтрагента) Тогда
								Если ЭлементМаршрута.ЕДРПОУКонтрагента = ОрганизацияEDI.Код и СокрЛП(ЭлементМаршрута.ФилиалКонтрагента) = ОрганизацияEDI.Филиал Тогда
									Если ЗначениеЗаполнено(ОрганизацияEDI.Организация1С) Тогда
										ДанныеПоОрганизаци = скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеПоОгранизации(ОрганизацияEDI.Организация1С);
										ЭлементМаршрута.Вставить("НаименованиеКонтрагента", ДанныеПоОрганизаци.Наименование);
										ЭлементМаршрута.Вставить("ИНН", ДанныеПоОрганизаци.ИНН);
									Иначе
										ЭлементМаршрута.Вставить("НаименованиеКонтрагента", ОрганизацияEDI.Наименование);
										ЭлементМаршрута.Вставить("ИНН", "");
									КонецЕсли;
								Иначе
									РеквизитыКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьРеквизитыКонтрагентаПоЕДРПОУ(ЭлементМаршрута.ЕДРПОУКонтрагента, ЭлементМаршрута.ФилиалКонтрагента, Истина);
									ЭлементМаршрута.Вставить("НаименованиеКонтрагента", РеквизитыКонтрагента.Наименование);
									ЭлементМаршрута.Вставить("ИНН", РеквизитыКонтрагента.ИНН);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьПараметрыМаршрутаМногостороннегоДокумента(ЭлектронныйДокументОбъект, ПараметрыСозданияДокументов, ТекНомерВМаршруте, ТекСостояние, ПредыдущиеСостояния = Неопределено)
	ЭтоМногостороннийДокумент = Ложь;
	Если ПараметрыСозданияДокументов = Неопределено Тогда
		ЭтоМногостороннийДокумент = ЭлектронныйДокументОбъект.IsMultisided;
	Иначе
		IsMultisided = Неопределено;
		Если ПараметрыСозданияДокументов.Свойство("IsMultisided", IsMultisided) Тогда
			Если IsMultisided Тогда
				ЭтоМногостороннийДокумент = Истина;
				лМаршрут = Неопределено;
				Если ПараметрыСозданияДокументов.Свойство("Маршрут", лМаршрут) Тогда
					Если ТипЗнч(лМаршрут) = Тип("Массив") Тогда
						ЭлектронныйДокументОбъект.Маршрут.Очистить();
						Для Каждого ЭлементМаршрута Из лМаршрут Цикл
							НовыйЭлементМаршрута = ЭлектронныйДокументОбъект.Маршрут.Добавить();
							ЗаполнитьЗначенияСвойств(НовыйЭлементМаршрута, ЭлементМаршрута);
						КонецЦикла;
						ЭлектронныйДокументОбъект.IsMultisided = Истина;
						ЭлектронныйДокументОбъект.RoutePosition = ТекНомерВМаршруте;
					Иначе
						Возврат;
					КонецЕсли;
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЭтоМногостороннийДокумент Тогда
		Для Н = 0 по ЭлектронныйДокументОбъект.Маршрут.Количество()-1 Цикл
			Если ЗначениеЗаполнено(ПредыдущиеСостояния) Тогда
				Если Н <= ТекНомерВМаршруте-1 Тогда
					ТекЭлементМаршрута = ЭлектронныйДокументОбъект.Маршрут.Получить(Н);
					Если ЗначениеЗаполнено(ТекЭлементМаршрута) Тогда
						ТекЭлементМаршрута.Состояние = ПредыдущиеСостояния;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСостояние) Тогда
				Если Н = ТекНомерВМаршруте Тогда
					ТекЭлементМаршрута = ЭлектронныйДокументОбъект.Маршрут.Получить(Н);
					Если ЗначениеЗаполнено(ТекЭлементМаршрута) Тогда
						ТекЭлементМаршрута.Состояние = ТекСостояние;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		//Если ЗначениеЗаполнено(ПредыдущиеСостояния) Тогда
		//	Для Н = 0 по ТекНомерВМаршруте-1 Цикл
		//		ТекЭлементМаршрута = ЭлектронныйДокументОбъект.Маршрут.Получить(Н);
		//		Если ЗначениеЗаполнено(ТекЭлементМаршрута) Тогда
		//			ТекЭлементМаршрута.Состояние = ПредыдущиеСостояния;
		//		КонецЕсли;
		//	КонецЦикла;
		//КонецЕсли;
		//Если ЗначениеЗаполнено(ТекСостояние) Тогда
		//	ТекЭлементМаршрута = ЭлектронныйДокументОбъект.Маршрут.Получить(ТекНомерВМаршруте);
		//	Если ЗначениеЗаполнено(ТекЭлементМаршрута) Тогда
		//		ТекЭлементМаршрута.Состояние = ТекСостояние;
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СохранитьВложениеЭлектронногоДокумента(ЭлектронныйДокумент, НомерФайла, ВложениеДокумента, ИмяФайлаВложениеДокумента, Файл = Неопределено) Экспорт
	ВложенияЭлектронныхДокументовМенеджерЗаписи = РегистрыСведений.скEDI_ВложенияЭлектронныхДокументов.СоздатьМенеджерЗаписи();
	ВложенияЭлектронныхДокументовМенеджерЗаписи.ЭлектронныйДокумент = ЭлектронныйДокумент;
	ВложенияЭлектронныхДокументовМенеджерЗаписи.НомерФайла = НомерФайла;
	Если ВложениеДокумента <> "" Тогда
		ДвоичныеДанныеПоBase64 =  Base64Значение(ВложениеДокумента);
		ВложенияЭлектронныхДокументовМенеджерЗаписи.ВложениеДокументаХЗ = Новый ХранилищеЗначения(ДвоичныеДанныеПоBase64, Новый СжатиеДанных(9));
	КонецЕсли;
	//ВложенияЭлектронныхДокументовМенеджерЗаписи.ВложениеДокумента = ВложениеДокумента;
	ВложенияЭлектронныхДокументовМенеджерЗаписи.ИмяФайлаВложениеДокумента = ИмяФайлаВложениеДокумента;
	ВложенияЭлектронныхДокументовМенеджерЗаписи.Файл = Файл;
	ВложенияЭлектронныхДокументовМенеджерЗаписи.Записать(Истина);
КонецПроцедуры

Функция ОбработатьСобытие_ПередПодписанием(Знач Организация, Знач ВидЭлектронногоДокумента, Знач ВхИсх, Знач ГдеСоздан, Знач ЭлектронныйДокумент, Знач Состояние, Знач МассивПодписей, Знач УчетныйДокумент, Знач МассивВложений, ПричинаОтказа)
	Отказ = Ложь;
	ПричинаОтказа = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Код
	               |ИЗ
	               |	РегистрСведений.скEDI_ПодпискиНаСобытияЭлектронныхДокументов КАК скEDI_ПодпискиНаСобытияЭлектронныхДокументов
	               |ГДЕ
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Организация = &Организация
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Событие = ЗНАЧЕНИЕ(Перечисление.скEDI_События.ПередПодписанием)
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Использование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Приоритет УБЫВ";
	
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидЭлектронногоДокумента",  ВидЭлектронногоДокумента);
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		Попытка
			Выполнить(ВыборкаРезультатаЗапроса.Код);
			Если Отказ = Истина Тогда
				Прервать;
			КонецЕсли;
		Исключение
			ПричинаОтказа = ОписаниеОшибки();
			Отказ = Истина;
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Отказ = Ложь;
КонецФункции

Функция ОбработатьСобытие_ПередОтправкой(Знач Организация, Знач ВидЭлектронногоДокумента, Знач ВхИсх, Знач ГдеСоздан, Знач ЭлектронныйДокумент, Знач Состояние, Знач МассивПодписей, Знач УчетныйДокумент, Знач МассивВложений, ПричинаОтказа)
	Отказ = Ложь;
	ПричинаОтказа = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Код
	               |ИЗ
	               |	РегистрСведений.скEDI_ПодпискиНаСобытияЭлектронныхДокументов КАК скEDI_ПодпискиНаСобытияЭлектронныхДокументов
	               |ГДЕ
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Организация = &Организация
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Событие = ЗНАЧЕНИЕ(Перечисление.скEDI_События.ПередОтправкой)
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Использование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Приоритет УБЫВ";
	
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидЭлектронногоДокумента",  ВидЭлектронногоДокумента);
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		Попытка
			Выполнить(ВыборкаРезультатаЗапроса.Код);
			Если Отказ = Истина Тогда
				Прервать;
			КонецЕсли;
		Исключение
			ПричинаОтказа = ОписаниеОшибки();
			Отказ = Истина;
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Отказ = Ложь;
КонецФункции

Функция ОбработатьСобытие_ПередОтправкойКвитанции(Знач Событие, Знач Организация, Знач ВидЭлектронногоДокумента, Знач ВхИсх, Знач ГдеСоздан, Знач ЭлектронныйДокумент, Знач Состояние, Знач МассивПодписей, Знач УчетныйДокумент, Знач МассивВложений, ПричинаОтказа)
	Отказ = Ложь;
	ПричинаОтказа = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Код
	               |ИЗ
	               |	РегистрСведений.скEDI_ПодпискиНаСобытияЭлектронныхДокументов КАК скEDI_ПодпискиНаСобытияЭлектронныхДокументов
	               |ГДЕ
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Организация = &Организация
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Событие = &Событие
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Использование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Приоритет УБЫВ";
	
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидЭлектронногоДокумента",  ВидЭлектронногоДокумента);
	Запрос.УстановитьПараметр("Событие",  Событие);
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		Попытка
			Выполнить(ВыборкаРезультатаЗапроса.Код);
			Если Отказ = Истина Тогда
				Прервать;
			КонецЕсли;
		Исключение
			ПричинаОтказа = ОписаниеОшибки();
			Отказ = Истина;
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Отказ = Ложь;
КонецФункции

Процедура ОбработатьСобытие_ПриПодписании(Знач Организация, Знач ВидЭлектронногоДокумента, Знач ВхИсх, Знач ГдеСоздан, Знач ЭлектронныйДокумент, Знач Состояние, Знач МассивПодписей, Знач УчетныйДокумент, Знач МассивВложений)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Код
	               |ИЗ
	               |	РегистрСведений.скEDI_ПодпискиНаСобытияЭлектронныхДокументов КАК скEDI_ПодпискиНаСобытияЭлектронныхДокументов
	               |ГДЕ
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Организация = &Организация
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Событие = ЗНАЧЕНИЕ(Перечисление.скEDI_События.ПриПодписании)
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Использование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Приоритет УБЫВ";
	
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидЭлектронногоДокумента",  ВидЭлектронногоДокумента);
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		Попытка
			Выполнить(ВыборкаРезультатаЗапроса.Код);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьСобытие_ПриОтправке(Знач Организация, Знач ВидЭлектронногоДокумента, Знач ВхИсх, Знач ГдеСоздан, Знач ЭлектронныйДокумент, Знач Состояние, Знач МассивПодписей, Знач УчетныйДокумент, Знач МассивВложений)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Код
	               |ИЗ
	               |	РегистрСведений.скEDI_ПодпискиНаСобытияЭлектронныхДокументов КАК скEDI_ПодпискиНаСобытияЭлектронныхДокументов
	               |ГДЕ
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Организация = &Организация
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Событие = ЗНАЧЕНИЕ(Перечисление.скEDI_События.ПриОтправке)
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Использование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Приоритет УБЫВ";
	
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидЭлектронногоДокумента",  ВидЭлектронногоДокумента);
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		Попытка
			Выполнить(ВыборкаРезультатаЗапроса.Код);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьСобытие_ПриОтправкеКвитанции(Знач Событие, Знач Организация, Знач ВидЭлектронногоДокумента, Знач ВхИсх, Знач ГдеСоздан, Знач ЭлектронныйДокумент, Знач Состояние, Знач МассивПодписей, Знач УчетныйДокумент, Знач МассивВложений)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Код
	               |ИЗ
	               |	РегистрСведений.скEDI_ПодпискиНаСобытияЭлектронныхДокументов КАК скEDI_ПодпискиНаСобытияЭлектронныхДокументов
	               |ГДЕ
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Организация = &Организация
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Событие = &Событие
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Использование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Приоритет УБЫВ";
	
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидЭлектронногоДокумента",  ВидЭлектронногоДокумента);
	Запрос.УстановитьПараметр("Событие",  Событие);
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		Попытка
			Выполнить(ВыборкаРезультатаЗапроса.Код);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьСобытие_ПриПолученииЭлектронногоДокумента(Знач Организация, Знач ВидЭлектронногоДокумента, Знач ВхИсх, Знач ГдеСоздан, Знач ЭлектронныйДокумент, Знач Состояние, Знач МассивПодписейКонтрагента, Знач УчетныйДокумент, Знач МассивВложений)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Код
	               |ИЗ
	               |	РегистрСведений.скEDI_ПодпискиНаСобытияЭлектронныхДокументов КАК скEDI_ПодпискиНаСобытияЭлектронныхДокументов
	               |ГДЕ
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Организация = &Организация
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Событие = ЗНАЧЕНИЕ(Перечисление.скEDI_События.ПриПолученииЭлектронногоДокумента)
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Использование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Приоритет УБЫВ";
	
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидЭлектронногоДокумента",  ВидЭлектронногоДокумента);
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		Попытка
			Выполнить(ВыборкаРезультатаЗапроса.Код);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьСобытие_ПриПолученииКвитанции(Знач Организация, Знач ВидЭлектронногоДокумента, Знач ВхИсх, Знач ГдеСоздан, Знач ЭлектронныйДокумент, Знач Состояние, Знач МассивПодписейКонтрагента, Знач УчетныйДокумент, Знач МассивВложений, Знач Квитанция, Знач ТипКвитанции, Знач КвитанцияВхИсх)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Код
	               |ИЗ
	               |	РегистрСведений.скEDI_ПодпискиНаСобытияЭлектронныхДокументов КАК скEDI_ПодпискиНаСобытияЭлектронныхДокументов
	               |ГДЕ
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Организация = &Организация
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Событие = ЗНАЧЕНИЕ(Перечисление.скEDI_События.ПриПолученииКвитанции)
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Использование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Приоритет УБЫВ";
	
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидЭлектронногоДокумента",  ВидЭлектронногоДокумента);
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		Попытка
			Выполнить(ВыборкаРезультатаЗапроса.Код);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьСобытие_ПриПолученииКвитанцииДФС(Знач Организация, Знач ВидЭлектронногоДокумента, Знач ВхИсх, Знач ГдеСоздан, Знач ЭлектронныйДокумент, Знач Состояние, Знач УчетныйДокумент, Знач Квитанция, Знач ТипКвитанцииДФС, Знач НомерКвитанции, Знач ФинальнаяКвитанция, Знач ТекстКвитанции)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Код КАК Код
	               |ИЗ
	               |	РегистрСведений.скEDI_ПодпискиНаСобытияЭлектронныхДокументов КАК скEDI_ПодпискиНаСобытияЭлектронныхДокументов
	               |ГДЕ
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Организация = &Организация
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Событие = ЗНАЧЕНИЕ(Перечисление.скEDI_События.ПриПолученииКвитанцииДФС)
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Использование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Приоритет УБЫВ";
	
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидЭлектронногоДокумента",  ВидЭлектронногоДокумента);
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		Попытка
			Выполнить(ВыборкаРезультатаЗапроса.Код);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьСобытие_ПриПроверкеНалоговогоДокумента(Знач Организация, Знач ВидЭлектронногоДокумента, Знач ВхИсх, Знач ГдеСоздан, Знач ЭлектронныйДокумент, Знач Состояние, Знач УчетныйДокумент, СоответствиеЗначенийРеквизитов, Замечание, Предупреждение)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Код КАК Код
	               |ИЗ
	               |	РегистрСведений.скEDI_ПодпискиНаСобытияЭлектронныхДокументов КАК скEDI_ПодпискиНаСобытияЭлектронныхДокументов
	               |ГДЕ
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Организация = &Организация
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Событие = ЗНАЧЕНИЕ(Перечисление.скEDI_События.ПриПроверкеНалоговогоДокумента)
	               |	И скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Использование
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	скEDI_ПодпискиНаСобытияЭлектронныхДокументов.Приоритет УБЫВ";
	
	Запрос.УстановитьПараметр("Организация",  Организация);
	Запрос.УстановитьПараметр("ВидЭлектронногоДокумента",  ВидЭлектронногоДокумента);
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		Попытка
			Выполнить(ВыборкаРезультатаЗапроса.Код);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура СоглашениеОАнулированииДокументаОбработать(ЭлектронныйДокумент, ЭтоОтправка)
	УстЗаявленоКАннулированию = Ложь;
	УстАннулировано = Ложь;
	ОтменитьЗаявленоКАннулированию = Ложь;
	Если ЭтоОтправка Тогда
		УстЗаявленоКАннулированию = Истина;
	Иначе
		Состояние = ЭлектронныйДокумент.Состояние;
		Если Состояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.Отправлен Тогда
			УстЗаявленоКАннулированию = Истина;
		ИначеЕсли Состояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван Тогда
			ОтменитьЗаявленоКАннулированию = Истина;
		ИначеЕсли Состояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ОтправленоОтклонение Тогда
			ОтменитьЗаявленоКАннулированию = Истина;
		ИначеЕсли Состояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение Тогда
			УстАннулировано = Истина;
		ИначеЕсли Состояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ОтозванОтправителем Тогда
			ОтменитьЗаявленоКАннулированию = Истина;
		ИначеЕсли Состояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.Получен Тогда
			УстЗаявленоКАннулированию = Истина;
		ИначеЕсли Состояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонение Тогда
			ОтменитьЗаявленоКАннулированию = Истина;
		ИначеЕсли Состояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждение Тогда
			УстАннулировано = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_СвязиЭлектронныхДокументов.ЭлектронныйДокумент2 КАК ЭлектронныйДокумент,
	               |	скEDI_СвязиЭлектронныхДокументов.ЭлектронныйДокумент2.ВхИсх КАК ВхИсх,
	               |	скEDI_СвязиЭлектронныхДокументов.ЭлектронныйДокумент2.Состояние КАК Состояние
	               |ИЗ
	               |	РегистрСведений.скEDI_СвязиЭлектронныхДокументов КАК скEDI_СвязиЭлектронныхДокументов
	               |ГДЕ
	               |	скEDI_СвязиЭлектронныхДокументов.ЭлектронныйДокумент1 = &ЭлектронныйДокумент
	               |	И скEDI_СвязиЭлектронныхДокументов.ТипСвязи = ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыСвязейЭлектронныхДокументов.АннулированиеУтвержденногоДокумента)";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		Если УстЗаявленоКАннулированию Тогда
			ЭлектронныйДокументОбъект = ВыборкаРезультатаЗапроса.ЭлектронныйДокумент.ПолучитьОбъект();
			ЭлектронныйДокументОбъект.Состояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ЗаявленоКАннулированию;
			ЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
			ЭлектронныйДокументОбъект.Записать();
		ИначеЕсли ОтменитьЗаявленоКАннулированию Тогда
			НовоеСостояние = Неопределено;
			Если ВыборкаРезультатаЗапроса.ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий Тогда
				НовоеСостояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение;
			ИначеЕсли ВыборкаРезультатаЗапроса.ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий Тогда
				НовоеСостояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждение;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НовоеСостояние) Тогда
				ЭлектронныйДокументОбъект = ВыборкаРезультатаЗапроса.ЭлектронныйДокумент.ПолучитьОбъект();
				ЭлектронныйДокументОбъект.Состояние = НовоеСостояние;
				ЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
				ЭлектронныйДокументОбъект.Записать();
			КонецЕсли;
		ИначеЕсли УстАннулировано Тогда
			ЭлектронныйДокументОбъект = ВыборкаРезультатаЗапроса.ЭлектронныйДокумент.ПолучитьОбъект();
			ЭлектронныйДокументОбъект.Состояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.Аннулировано;
			ЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
			ЭлектронныйДокументОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПрименитьМассивДанныхПоСвязаннымДокументам(ЭлектронныйДокумент, МассивДанныхПоСвязаннымДокументам)
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		Если ТипЗнч(МассивДанныхПоСвязаннымДокументам) = Тип("Массив") Тогда
			Для Каждого ЭлементМассива Из МассивДанныхПоСвязаннымДокументам Цикл
				мзСвязиЭлектронныхДокументов = РегистрыСведений.скEDI_СвязиЭлектронныхДокументов.СоздатьМенеджерЗаписи();
				мзСвязиЭлектронныхДокументов.ЭлектронныйДокумент1 = ЭлектронныйДокумент;
				мзСвязиЭлектронныхДокументов.ЭлектронныйДокумент2 = ЭлементМассива.ЭлектронныйДокумент;
				мзСвязиЭлектронныхДокументов.ТипСвязи = ЭлементМассива.ТипСвязи;
				мзСвязиЭлектронныхДокументов.Записать(Истина);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПодписатьЭлектронныеДокументыСервер(ТаблицаДанныхДокументов, ДополнительныеПараметры, ПовторноеУтверждение, КоличествоУспешноОбработаных)
	
	//ДанныеДокумента, НастройкиНеобходимыхПодписей, ЖурналОперации = ""
	
	лРезультатНаложенияПредыдущейПоПорядкуПодписи = Неопределено;
	
	//лНетОшибокВПроцессеПодписания = Истина;
	
	ЖурналОперации           = "";//ДополнительныеПараметры.ЖурналОперации;
	ТаблицаНастроекПодписей = ДополнительныеПараметры.НастройкиНеобходимыхПодписей;
	ТаблицаНастроекПодписей = ?(ТипЗнч(ТаблицаНастроекПодписей) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписей, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписей);
	
	Для Каждого ДанныеДокумента Из ТаблицаДанныхДокументов Цикл 
		Если ДанныеДокумента.ЕстьОшибки Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаСозданияДокумента = Неопределено;
		ТелоДокумента = "";
		ИзображениеДокумента = "";
		ВложениеДокумента1 = "";
		ВложениеДокументаБезПодписи1 = "";
		ИмяФайлаВложениеДокумента1 = "";
		ВложениеДокументаФайл1 = Неопределено;
		ВложениеДокумента2 = "";
		ВложениеДокументаБезПодписи2 = "";
		ИмяФайлаВложениеДокумента2 = "";
		ВложениеДокументаФайл2 = Неопределено;
		ВложениеДокумента3 = "";
		ВложениеДокументаБезПодписи3 = "";
		ИмяФайлаВложениеДокумента3 = "";
		ВложениеДокументаФайл3 = Неопределено;
		МассивВложенийДокумента4 = Неопределено;
		МассивВложенийДокументаБезПодписи4 = Неопределено;
		
		ПараметрыСобытий = Неопределено;
		
		ПодписыватьКвитанциюВсемиПодписями = Ложь;
		Квитанция = ПредопределенноеЗначение("Документ.скEDI_Квитанция.ПустаяСсылка");
		КвитанцияТело = "";
		КвитанцияТекст = "";
		ТипКвитанции = Неопределено;
		ВидКвитанции = Неопределено;
		ЭтоИсходящийДокумент = Ложь;
		ПараметрыСозданияКвитанции = Неопределено;
		
		Если ПовторноеУтверждение Тогда
			Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ТребуетПовторногоУтверждения") Тогда
				Если ДанныеДокумента.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
					ПовторноУтверждаемыйЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					Если ЗначениеЗаполнено(ПовторноУтверждаемыйЭлектронныйДокумент) Тогда
						Если не ЗначениеЗаполнено(ПовторноУтверждаемыйЭлектронныйДокумент.ОсновнойЭлектронныйДокумент) Тогда

							ЭлектронныйДокумент = Неопределено;//ДанныеДокумента.ЭлектронныйДокумент;
							
							ОшибкаПолученияСодержимогоЭлДок = "";
							СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ПовторноУтверждаемыйЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
							Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
								Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
									ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
								КонецЕсли;
								ДанныеДокумента.ЕстьОшибки = Истина;
								
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ПовторноУтверждаемыйЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								Продолжить;
							КонецЕсли;
							ОшибкаПолученияВложенийЭлДок = "";
							ПолучитьВложенияЭлектронногоДокумента(ПовторноУтверждаемыйЭлектронныйДокумент, ВложениеДокументаБезПодписи1, ИмяФайлаВложениеДокумента1, ВложениеДокументаБезПодписи2, ИмяФайлаВложениеДокумента2, ВложениеДокументаБезПодписи3, ИмяФайлаВложениеДокумента3, МассивВложенийДокументаБезПодписи4, ОшибкаПолученияВложенийЭлДок);
							Если ОшибкаПолученияВложенийЭлДок <> "" Тогда
								ДанныеДокумента.ЕстьЗамечания = Истина;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ПовторноУтверждаемыйЭлектронныйДокумент + ": " + ОшибкаПолученияВложенийЭлДок);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияВложенийЭлДок);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								Продолжить;
							КонецЕсли;
							
							ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
							ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
							ПараметрыСобытий.ЭлектронныйДокумент = Неопределено;
							ПараметрыСобытий.Документ1С = ПовторноУтверждаемыйЭлектронныйДокумент.Документ1С;
							ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
							ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
							ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
							ПараметрыСобытий.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПустаяСсылка");
							//ПараметрыСобытий.МассивВложений = Новый Массив;
							
							ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
							ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
							ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
							ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
							ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
							ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
							ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
							ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
							МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
						Иначе
							Продолжить;
						КонецЕсли;
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
		ИначеЕсли ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий")
		или ДанныеДокумента.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
			ЭтоИсходящийДокумент = Истина;
			Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С")
			или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПустаяСсылка") Тогда
				ЭлектронныйДокумент = ПредопределенноеЗначение("Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка");
				ДатаСозданияДокумента = ДанныеДокумента.ДатаСозданияДокумента;
				ТелоДокумента = ДанныеДокумента.ТелоДокумента;
				ИзображениеДокумента = ДанныеДокумента.ИзображениеДокумента;
				
				ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
				ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
				ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
				ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
				ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
				ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
				ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
				ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
				ПараметрыСобытий.МассивВложений = Новый Массив;
				
				ВложениеДокумента1 = ДанныеДокумента.ВложениеДокумента1;
				ВложениеДокументаБезПодписи1 = ДанныеДокумента.ВложениеДокумента1;
				ИмяФайлаВложениеДокумента1 = ДанныеДокумента.ИмяФайлаВложениеДокумента1;
				Попытка
					ВложениеДокументаФайл1 = ДанныеДокумента.ВложениеДокументаФайл1;
				Исключение
					ВложениеДокументаФайл1 = Неопределено;
				КонецПопытки;
				Если ЗначениеЗаполнено(ВложениеДокумента1) Тогда
					Вложение = Новый Структура("ИмяФайла, СтрокаBase64, Файл", ИмяФайлаВложениеДокумента1, ВложениеДокументаБезПодписи1, ВложениеДокументаФайл1);
					ПараметрыСобытий.МассивВложений.Добавить(Вложение);
				КонецЕсли;
				ВложениеДокумента2 = ДанныеДокумента.ВложениеДокумента2;
				ВложениеДокументаБезПодписи2 = ДанныеДокумента.ВложениеДокумента2;
				ИмяФайлаВложениеДокумента2 = ДанныеДокумента.ИмяФайлаВложениеДокумента2;
				Попытка
					ВложениеДокументаФайл2 = ДанныеДокумента.ВложениеДокументаФайл2;
				Исключение
					ВложениеДокументаФайл2 = Неопределено;
				КонецПопытки;
				Если ЗначениеЗаполнено(ВложениеДокумента2) Тогда
					Вложение = Новый Структура("ИмяФайла, СтрокаBase64, Файл", ИмяФайлаВложениеДокумента2, ВложениеДокументаБезПодписи2, ВложениеДокументаФайл2);
					ПараметрыСобытий.МассивВложений.Добавить(Вложение);
				КонецЕсли;
				ВложениеДокумента3 = ДанныеДокумента.ВложениеДокумента3;
				ВложениеДокументаБезПодписи3 = ДанныеДокумента.ВложениеДокумента3;
				ИмяФайлаВложениеДокумента3 = ДанныеДокумента.ИмяФайлаВложениеДокумента3;
				Попытка
					ВложениеДокументаФайл3 = ДанныеДокумента.ВложениеДокументаФайл3;
				Исключение
					ВложениеДокументаФайл3 = Неопределено;
				КонецПопытки;
				Если ЗначениеЗаполнено(ВложениеДокумента3) Тогда
					Вложение = Новый Структура("ИмяФайла, СтрокаBase64, Файл", ИмяФайлаВложениеДокумента3, ВложениеДокументаБезПодписи3, ВложениеДокументаФайл3);
					ПараметрыСобытий.МассивВложений.Добавить(Вложение);
				КонецЕсли;
				МассивВложенийДокумента4 = ДанныеДокумента.МассивВложенийДокумента4;
				МассивВложенийДокументаБезПодписи4 = ДанныеДокумента.МассивВложенийДокумента4;
				Если ТипЗнч(МассивВложенийДокументаБезПодписи4) = Тип("Массив") Тогда
					Для Каждого ЭлементМассиваВложенийДокументаБезПодписи4 из МассивВложенийДокументаБезПодписи4 Цикл
						Вложение = Новый Структура("ИмяФайла, СтрокаBase64, Файл");
						Вложение.ИмяФайла = ЭлементМассиваВложенийДокументаБезПодписи4.ИмяФайлаВложениеДокумента;
						Вложение.СтрокаBase64 = ЭлементМассиваВложенийДокументаБезПодписи4.ВложениеДокумента;
						Вложение.Файл = ЭлементМассиваВложенийДокументаБезПодписи4.ВложениеДокументаФайл;
						ПараметрыСобытий.МассивВложений.Добавить(Вложение);
					КонецЦикла;
				КонецЕсли;
				
				ОшибкаПараметровСоздания = "";
				Если не ПроверитьПараметрыСозданияЭлектронногоДокумента(ДанныеДокумента.ПараметрыСозданияДокументов, ОшибкаПараметровСоздания) Тогда
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.Документ1С + ": " + ОшибкаПараметровСоздания);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПараметровСоздания);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
				КонецЕсли;
			ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан") Тогда
				ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
				
				ДатаСозданияДокумента = ДанныеДокумента.ДатаСозданияДокумента;
				ТелоДокумента = ДанныеДокумента.ТелоДокумента;
				ИзображениеДокумента = ДанныеДокумента.ИзображениеДокумента;
				
				ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
				ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
				ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
				ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
				ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
				ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
				ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
				ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
				//ПараметрыСобытий.МассивВложений = Новый Массив;
				
				Замечание = "";
				ПолучитьВложенияЭлектронногоДокумента(ЭлектронныйДокумент, ВложениеДокумента1, ИмяФайлаВложениеДокумента1, ВложениеДокумента2, ИмяФайлаВложениеДокумента2, ВложениеДокумента3, ИмяФайлаВложениеДокумента3, МассивВложенийДокумента4, Замечание);
				Если Замечание <> "" Тогда
					ДанныеДокумента.ЕстьЗамечания = Истина;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.Документ1С + ": " + Замечание);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					Продолжить;
				КонецЕсли;
				ОшибкаПараметровСоздания = "";
				Если не ПроверитьПараметрыСозданияЭлектронногоДокумента(ДанныеДокумента.ПараметрыСозданияДокументов, ОшибкаПараметровСоздания) Тогда
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПараметровСоздания);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПараметровСоздания);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
				КонецЕсли;
			ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично")
				или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьБухгалтеру")
				или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьДиректору")
				или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьПечатью") Тогда
				ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
				
				ОшибкаПолученияСодержимогоЭлДок = "";
				СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
				Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
					Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
						ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
					КонецЕсли;
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					Продолжить;
				КонецЕсли;
				
				ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
				ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
				ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
				ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
				ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
				ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
				ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
				ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
				//ПараметрыСобытий.МассивВложений = Новый Массив;
				
				ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
				ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
				ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
				ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
				ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
				ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
				ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
				ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
				МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
			ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Получен") Тогда
				ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
				
				ОшибкаПолученияСодержимогоЭлДок = "";
				СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
				Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
					Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
						ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
					КонецЕсли;
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					Продолжить;
				КонецЕсли;
				
				ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
				ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
				ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
				ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
				ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
				ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
				ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
				ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
				//ПараметрыСобытий.МассивВложений = Новый Массив;
				
				ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
				ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
				ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
				ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
				ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
				ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
				ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
				ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
				МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
			Иначе
				Продолжить;
			КонецЕсли;
		ИначеЕсли ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
			ЭтоИсходящийДокумент = Ложь;
			Если ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
				Если ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
					Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Получен")
						или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично")
						или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьБухгалтеру") 
						или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьДиректору") 
						или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьПечатью") Тогда
						ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
						
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
						Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
							Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
								ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
							КонецЕсли;
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						
						ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
						ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
						ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
						ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
						ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
						ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
						ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
						ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
						//ПараметрыСобытий.МассивВложений = Новый Массив;
						
						ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
						ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
						ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
						ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
						ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
						ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
						ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
						ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
						МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Получен")
						или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично")
						или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьБухгалтеру") 
						или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьДиректору") 
						или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьПечатью") Тогда
						
						ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
						
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
						Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
							Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
								ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
							КонецЕсли;
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						
						ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
						ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
						ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
						ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
						ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
						ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
						ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
						ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
						//ПараметрыСобытий.МассивВложений = Новый Массив;
						
						ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
						ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
						ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
						ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
						ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
						ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
						ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
						ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
						МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
						
						ПолученоОтКонтрагентаСПомощью = СодержаниеЭлектронногоДокумента.ПолученоОтКонтрагентаСПомощью;
						ПодписыватьКвитанциюВсемиПодписями = Истина;
						ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение");
						Если не НайтиСоздатьКвитанцию(ДанныеДокумента, ДополнительныеПараметры, ЭлектронныйДокумент, ПодписыватьКвитанциюВсемиПодписями, ТипКвитанции, "", ПолученоОтКонтрагентаСПомощью, ВидКвитанции, Квитанция, КвитанцияТело, КвитанцияТекст, ПараметрыСозданияКвитанции, ПараметрыСозданияКвитанции, ЖурналОперации) Тогда
							Продолжить;
						КонецЕсли;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Получен")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьБухгалтеру") 
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьДиректору") 
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьПечатью") Тогда
					
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					
					ПолученоОтКонтрагентаСПомощью = СодержаниеЭлектронногоДокумента.ПолученоОтКонтрагентаСПомощью;
					ПодписыватьКвитанциюВсемиПодписями = Истина;
					ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение");
					Если не НайтиСоздатьКвитанцию(ДанныеДокумента, ДополнительныеПараметры, ЭлектронныйДокумент, ПодписыватьКвитанциюВсемиПодписями, ТипКвитанции, "", ПолученоОтКонтрагентаСПомощью, ВидКвитанции, Квитанция, КвитанцияТело, КвитанцияТекст, ПараметрыСозданияКвитанции, ЖурналОперации) Тогда
						Продолжить;
					КонецЕсли;
				Иначе
					Продолжить;
				КонецЕсли;
				
			ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично")
				или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьБухгалтеру")
				или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьДиректору")
				или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьПечатью") Тогда
				ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
				
				ОшибкаПолученияСодержимогоЭлДок = "";
				СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
				Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
					Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
						ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
					КонецЕсли;
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					Продолжить;
				КонецЕсли;
				
				ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
				ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
				ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
				ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
				ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
				ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
				ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
				ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
				//ПараметрыСобытий.МассивВложений = Новый Массив;
				
				ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
				ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
				ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
				ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
				ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
				ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
				ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
				ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
				МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
			ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Получен") Тогда
				ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
				
				ОшибкаПолученияСодержимогоЭлДок = "";
				СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
				Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
					Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
						ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
					КонецЕсли;
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					Продолжить;
				КонецЕсли;
				
				ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
				ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
				ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
				ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
				ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
				ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
				ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
				ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
				//ПараметрыСобытий.МассивВложений = Новый Массив;
				
				ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
				ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
				ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
				ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
				ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
				ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
				ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
				ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
				МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
			
			
		лСписокНаложенныхНаДокументПодписей   = Неопределено;
		ПодписиПолученыИзЭлектронногоДокумента = Ложь;
		ДокументБылПодписан = Ложь;
		ДокументБылПодписанПолностью = Ложь;
		РольСледующейПодписи = Неопределено;
		ТаблицаПодписейПоДокументу = Неопределено;
		ТаблицаНакладываемыхНаДокументПодписей = Неопределено;
		ПараметрыСозданияДокументов = Неопределено;
		
		Если ПодписыватьКвитанциюВсемиПодписями Тогда
			Если ВидКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ВидыКвитанций.СДО") Тогда
				ТипПодписание = "ptn";
			ИначеЕсли ВидКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ВидыКвитанций.ДФСрк") Тогда
				ТипПодписание = "gov";
			Иначе
				Продолжить;
			КонецЕсли;
			
			ПодписатьСодержаниеЭлектронногоДокументаСервер(
				ДанныеДокумента.ЭлектронныйДокумент, ДанныеДокумента, ДополнительныеПараметры,
				лСписокНаложенныхНаДокументПодписей, ПодписиПолученыИзЭлектронногоДокумента, ДокументБылПодписан, ДокументБылПодписанПолностью, РольСледующейПодписи,
				ТипПодписание, , Ложь,
				ТаблицаНакладываемыхНаДокументПодписей, ТаблицаПодписейПоДокументу,
				КвитанцияТело, "",
				"", "", "", "", "", "",
				Неопределено
				);
			
			Если НЕ ДанныеДокумента.ЕстьОшибки И ДокументБылПодписан Тогда
				лЭлектронныйДокументОбъект = ДанныеДокумента.ЭлектронныйДокумент.ПолучитьОбъект();
				Если Не ПодписиПолученыИзЭлектронногоДокумента Тогда
					Для Каждого СтрокаПодписи из ТаблицаПодписейПоДокументу Цикл
						НоваяСтрокаПодписи = лЭлектронныйДокументОбъект.Подписи.Добавить();
						НоваяСтрокаПодписи.Подпись = СтрокаПодписи.Подпись;
					КонецЦикла;
				КонецЕсли;
				Для Каждого СтрокаПодписи Из ТаблицаНакладываемыхНаДокументПодписей Цикл
					ПодписиВДокументе = лЭлектронныйДокументОбъект.Подписи.НайтиСтроки(Новый Структура("Подпись", СтрокаПодписи.Подпись));
					Для Каждого ПодписьВДокументе Из ПодписиВДокументе Цикл
						ПодписьВДокументе.Подпись = СтрокаПодписи.ВыбранаяПодпись;
						ПодписьВДокументе.Подписано = Истина;
						ПодписьВДокументе.ДатаПодписания = ТекущаяДата();
					КонецЦикла;
				КонецЦикла;
				
				Если ДокументБылПодписанПолностью Тогда
					лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан");
				Иначе
					лЭлектронныйДокументОбъект.Состояние = ПолучитьСледующееСостояниеДляПодписанныхЧастично(РольСледующейПодписи);
				КонецЕсли;
				
				лЭлектронныйДокументОбъект.ПоследняяОперация = ТекущаяДата();
				ЗаписатьЭлектронныйДокументСПредварительнымПоискомСвязаных(лЭлектронныйДокументОбъект, ДанныеДокумента.ВидЭлектронногоДокумента, ДанныеДокумента.ВидЭлектронногоДокумента.Владелец);
				
				КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
				ДанныеДокумента.Состояние = лЭлектронныйДокументОбъект.Состояние;
				
				ОписаниеНаложеныхПодписей = ЗафиксироватьСобытияПоПодписаниюДокумента(ДанныеДокумента.ЭлектронныйДокумент, лСписокНаложенныхНаДокументПодписей);
				КвитанцияТекст = КвитанцияТекст + "
				|
				|Підписи:
				|" + ОписаниеНаложеныхПодписей;
				
				Если Квитанция = Документы.скEDI_Квитанция.ПустаяСсылка() Тогда
					лДанныеЗаполненияКвитанции = Новый Структура;
					лДанныеЗаполненияКвитанции.Вставить("ВидКвитанции",        ВидКвитанции);
					лДанныеЗаполненияКвитанции.Вставить("Организация",         ДанныеДокумента.Организация);
					лДанныеЗаполненияКвитанции.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
					//лДанныеЗаполненияКвитанции.Вставить("ИмяФайла",            лРезультатОтправкиОтвета.ИмяФайла);
					лДанныеЗаполненияКвитанции.Вставить("ЕДРПОУКонтрагента",   ЭлектронныйДокумент.ЕДРПОУКонтрагента);
					лДанныеЗаполненияКвитанции.Вставить("ФилиалКонтрагента",   ЭлектронныйДокумент.ФилиалКонтрагента);
					лДанныеЗаполненияКвитанции.Вставить("ТипКвитанции",        ТипКвитанции);
					лДанныеЗаполненияКвитанции.Вставить("ТекстКвитанции",      КвитанцияТекст);
					лДанныеЗаполненияКвитанции.Вставить("ТелоКвитанции",       КвитанцияТело);
					лДанныеЗаполненияКвитанции.Вставить("ВхИсх",               Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий);
					лДанныеЗаполненияКвитанции.Вставить("Готовится",           Истина);
					
					лКвитанцияОбъект = Документы.скEDI_Квитанция.СоздатьДокумент();
					лКвитанцияОбъект.Заполнить(лДанныеЗаполненияКвитанции);
				Иначе
					лКвитанцияОбъект = Квитанция.ПолучитьОбъект();
					лКвитанцияОбъект.Дата = ТекущаяДата();
					лКвитанцияОбъект.ТекстКвитанции = КвитанцияТекст;
					лКвитанцияОбъект.ТелоКвитанции = КвитанцияТело;
				КонецЕсли;
				лКвитанцияОбъект.ОбменДанными.Загрузка = Истина;
				лКвитанцияОбъект.Записать();
				
				СобытиеДляЖурнала = НСтр("ru = 'Квитанция подписана'; uk = 'Квитанцію підписано'") + " (" + Строка(ТипКвитанции) + "): """
				+ лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента.Наименование + """ №" + лЭлектронныйДокументОбъект.НомерДокумента + НСтр("ru = ' от '; uk = ' від '") + Формат(лЭлектронныйДокументОбъект.ДатаДокумента, "ДФ=dd.MM.yyyy")
				+ Символы.ПС + ОписаниеНаложеныхПодписей;
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, СобытиеДляЖурнала, , Ложь);
			КонецЕсли;
		Иначе
			ТипПодписание = "ptn";
			МетодПодписания = "sign";
			ЭлектронныйДокументПолучениеПодписантов = ДанныеДокумента.ЭлектронныйДокумент;
			Если ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
				ТипПодписание = "gov";
			ИначеЕсли ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
				ТипПодписание = "gov";
			ИначеЕсли ПовторноеУтверждение Тогда
				МетодПодписания = "resign";
				ЭлектронныйДокументПолучениеПодписантов = Неопределено;
			КонецЕсли;
			
			ПодписатьСодержаниеЭлектронногоДокументаСервер(
				ЭлектронныйДокументПолучениеПодписантов, ДанныеДокумента, ДополнительныеПараметры,
				лСписокНаложенныхНаДокументПодписей, ПодписиПолученыИзЭлектронногоДокумента, ДокументБылПодписан, ДокументБылПодписанПолностью, РольСледующейПодписи,
				ТипПодписание, МетодПодписания, ЭтоИсходящийДокумент,
				ТаблицаНакладываемыхНаДокументПодписей, ТаблицаПодписейПоДокументу,
				ТелоДокумента, ИзображениеДокумента,
				ВложениеДокумента1, ИмяФайлаВложениеДокумента1, ВложениеДокумента2, ИмяФайлаВложениеДокумента2, ВложениеДокумента3, ИмяФайлаВложениеДокумента3,
				МассивВложенийДокумента4,
				ПараметрыСобытий
				);
				
			ДокументБылСоздан = Ложь;
			Если НЕ ДанныеДокумента.ЕстьОшибки И ДокументБылПодписан Тогда
				// Если нет электронного документа, то создать его. Если документ есть, то надо проверить, есть ли в нём таблица реквизитов, если её нет -
				// поместить из поля "РеквизитыЭлектронногоДокумента" структуры "ДанныеДокумента".
				// Зафиксировать событие создания документа.
				ДокументСозданНаОсновании = Неопределено;
				МассивДанныхПоСвязаннымДокументам = Неопределено;
				Если Не ЗначениеЗаполнено(ДанныеДокумента.ЭлектронныйДокумент) Тогда
					
					лДанныеЗаполненияЭлектронногоДокумента = Новый Структура;
					
					лСтруктураОсновныхДанныхДокумента = Новый Структура;
					лСтруктураОсновныхДанныхДокумента.Вставить("Документ1С",               ДанныеДокумента.Документ1С);
					лСтруктураОсновныхДанныхДокумента.Вставить("ВидЭлектронногоДокумента", ДанныеДокумента.ВидЭлектронногоДокумента);
					лСтруктураОсновныхДанныхДокумента.Вставить("ЭлектронныйДокумент",      ДанныеДокумента.ЭлектронныйДокумент);
					
					//Если ДанныеДокумента.Свойство("ПараметрыДляСозданияЭлектронногоДокумента") Тогда
					Если ЗначениеЗаполнено(ДанныеДокумента.ПараметрыСозданияДокументов) Тогда
						ДозаполнитьПараметрыСозданияЭлектронногоДокумента(ДанныеДокумента.ПараметрыСозданияДокументов, ДанныеДокумента.Организация);
						ПараметрыСозданияДокументов = ДанныеДокумента.ПараметрыСозданияДокументов;
						
						лСтруктураОсновныхДанныхДокумента.Вставить("Дата",           ДанныеДокумента.ПараметрыСозданияДокументов.ДатаЭлектронногоДокумента);
						лСтруктураОсновныхДанныхДокумента.Вставить("Номер",          ДанныеДокумента.ПараметрыСозданияДокументов.НомерЭлектронногоДокумента);
						лСтруктураОсновныхДанныхДокумента.Вставить("ДатаДокумента",  ДанныеДокумента.ПараметрыСозданияДокументов.ДатаЭлектронногоДокумента);
						лСтруктураОсновныхДанныхДокумента.Вставить("НомерДокумента", ДанныеДокумента.ПараметрыСозданияДокументов.НомерЭлектронногоДокумента);
						лСтруктураОсновныхДанныхДокумента.Вставить("СуммаДокумента", ДанныеДокумента.ПараметрыСозданияДокументов.СуммаЭлектронногоДокумента);
						лСтруктураОсновныхДанныхДокумента.Вставить("СуммаНДС",       ДанныеДокумента.ПараметрыСозданияДокументов.СуммаНДСЭлектронногоДокумента);
						лСтруктураОсновныхДанныхДокумента.Вставить("СуммаБезНДС",    ДанныеДокумента.ПараметрыСозданияДокументов.СуммаБезНДСЭлектронногоДокумента);
						лСтруктураОсновныхДанныхДокумента.Вставить("ЕДРПОУВладельцаШаблона",     ДанныеДокумента.ПараметрыСозданияДокументов.ЕДРПОУВладельцаШаблона);
						лСтруктураОсновныхДанныхДокумента.Вставить("ИмяШаблона",     ДанныеДокумента.ПараметрыСозданияДокументов.ИмяШаблона);
						лСтруктураОсновныхДанныхДокумента.Вставить("ВерсияШаблона",     ДанныеДокумента.ПараметрыСозданияДокументов.ВерсияШаблона);
						лСтруктураОсновныхДанныхДокумента.Вставить("ВхИсх",          ДанныеДокумента.ПараметрыСозданияДокументов.ВхИсх);
						
						лСтруктураОсновныхДанныхДокумента.Вставить("ГдеСоздан", ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе"));
						лСтруктураОсновныхДанныхДокумента.Вставить("ИдентификаторДокумента", ДанныеДокумента.ПараметрыСозданияДокументов.DocId);
						лСтруктураОсновныхДанныхДокумента.Вставить("DocId", ДанныеДокумента.ПараметрыСозданияДокументов.DocId);
						лСтруктураОсновныхДанныхДокумента.Вставить("ИдентификаторДокументаВБазеДанныхКонтрагента", ДанныеДокумента.ПараметрыСозданияДокументов.OutId);
						лСтруктураОсновныхДанныхДокумента.Вставить("OutId", ДанныеДокумента.ПараметрыСозданияДокументов.OutId);
						лСтруктураОсновныхДанныхДокумента.Вставить("NOTATION", ДанныеДокумента.ПараметрыСозданияДокументов.NOTATION);
						лПоДаннымХранилищаРеквизитов = Неопределено;
						Если ДанныеДокумента.ПараметрыСозданияДокументов.Свойство("ПоДаннымХранилищаРеквизитов", лПоДаннымХранилищаРеквизитов) Тогда
							лСтруктураОсновныхДанныхДокумента.Вставить("ПоДаннымХранилищаРеквизитов", лПоДаннымХранилищаРеквизитов);
						КонецЕсли;
						
						лСтруктураОсновныхДанныхДокумента.Вставить("ИмяФайлаДФС", ДанныеДокумента.ПараметрыСозданияДокументов.ИмяФайлаДФС);
						лСтруктураОсновныхДанныхДокумента.Вставить("ИННПродавца", ДанныеДокумента.ПараметрыСозданияДокументов.ИННПродавца);
						лСтруктураОсновныхДанныхДокумента.Вставить("КодФилиалаПродавца", ДанныеДокумента.ПараметрыСозданияДокументов.КодФилиалаПродавца);
						лСтруктураОсновныхДанныхДокумента.Вставить("ИННПокупателя", ДанныеДокумента.ПараметрыСозданияДокументов.ИННПокупателя);
						лСтруктураОсновныхДанныхДокумента.Вставить("КодФилиалаПокупателя", ДанныеДокумента.ПараметрыСозданияДокументов.КодФилиалаПокупателя);
						лСтруктураОсновныхДанныхДокумента.Вставить("РегистрируетсяВЕРННПокупателем", ДанныеДокумента.ПараметрыСозданияДокументов.РегистрируетсяВЕРННПокупателем);
						
						лДокументСозданНаОсновании = Неопределено;
						Если ПараметрыСозданияДокументов.Свойство("ДокументСозданНаОсновании", лДокументСозданНаОсновании) Тогда
							ДокументСозданНаОсновании = лДокументСозданНаОсновании;
						КонецЕсли;
						лМассивДанныхПоСвязаннымДокументам = Неопределено;
						Если ПараметрыСозданияДокументов.Свойство("МассивДанныхПоСвязаннымДокументам", лМассивДанныхПоСвязаннымДокументам) Тогда
							МассивДанныхПоСвязаннымДокументам = лМассивДанныхПоСвязаннымДокументам;
						КонецЕсли;
						лСтруктураОсновныхДанныхДокумента.Вставить("ЕДРПОУКонтрагента",        ДанныеДокумента.ПараметрыСозданияДокументов.ЕДРПОУКонтрагента);
						лСтруктураОсновныхДанныхДокумента.Вставить("ФилиалКонтрагента",        ДанныеДокумента.ПараметрыСозданияДокументов.ФилиалКонтрагента);
					Иначе
						лСтруктураОсновныхДанныхДокумента.Вставить("ПоДаннымХранилищаРеквизитов", Ложь);
						
						лСтруктураДанныхКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеКонтрагентаПоДокументу1С(ДанныеДокумента.Документ1С);
						лСтруктураОсновныхДанныхДокумента.Вставить("ЕДРПОУКонтрагента",        лСтруктураДанныхКонтрагента.ЕДРПОУКонтрагента);
						лСтруктураОсновныхДанныхДокумента.Вставить("ФилиалКонтрагента",        лСтруктураДанныхКонтрагента.ФилиалКонтрагента);
					КонецЕсли;
					
					//Если ДанныеДокумента.Свойство("РеквизитыЭлектронногоДокумента") Тогда
					Если ЗначениеЗаполнено(ДанныеДокумента.СоответствиеЗначенийРеквизитов) Тогда
						лСтруктураОсновныхДанныхДокумента.Вставить("РеквизитыЭлектронногоДокумента", ДанныеДокумента.СоответствиеЗначенийРеквизитов);
					КонецЕсли;
					
					лДанныеЗаполненияЭлектронногоДокумента.Вставить("ОсновныеДанные", лСтруктураОсновныхДанныхДокумента);
					
					лЭлектронныйДокументОбъект = Документы.скEDI_ЭлектронныйДокумент.СоздатьДокумент();
					лЭлектронныйДокументОбъект.Заполнить(лДанныеЗаполненияЭлектронногоДокумента);
					
					ДокументБылСоздан = Истина;
					НомерВерсииСодержания = 1;
				ИначеЕсли ПовторноеУтверждение Тогда
					ДокументСозданНаОсновании = ДанныеДокумента.ЭлектронныйДокумент;
					ТекДата = ТекущаяДата();
					
					лЭлектронныйДокументОбъект = ДанныеДокумента.ЭлектронныйДокумент.Скопировать();
					лЭлектронныйДокументОбъект.Дата = ДанныеДокумента.ЭлектронныйДокумент.Дата;
					лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан");
					лЭлектронныйДокументОбъект.СостояниеРегистрацияВДФС = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПустаяСсылка");
					лЭлектронныйДокументОбъект.ИмяФайла = "";
					лЭлектронныйДокументОбъект.ИмяФайлаДФС = "";
					лЭлектронныйДокументОбъект.ДатаСоздания = ТекДата;
					лЭлектронныйДокументОбъект.ПоследняяОперация = ТекДата;
					лЭлектронныйДокументОбъект.ЗарегистрированВДФС = Ложь;
					лЭлектронныйДокументОбъект.ДатаРегистрацииВДФС = '00010101';
					лЭлектронныйДокументОбъект.РегистрационныйНомерДФС = "";
					лЭлектронныйДокументОбъект.ПричинаОтклоненияДФС = "";
					лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом = "";
					лЭлектронныйДокументОбъект.ЕстьФинальнаяКвитанцияДФС = Ложь;
					//лЭлектронныйДокументОбъект.ИдентификаторДокумента = "";
					//лЭлектронныйДокументОбъект.ИдентификаторДокументаВБазеДанныхКонтрагента = "";
					//лЭлектронныйДокументОбъект.DocId = "";
					//лЭлектронныйДокументОбъект.OutId = "";
					лЭлектронныйДокументОбъект.DocVer = 0;
					лЭлектронныйДокументОбъект.DocHref = "";
					лЭлектронныйДокументОбъект.ОшибкаШифрованияПриОтправке = Ложь;
					лЭлектронныйДокументОбъект.Подписи.Очистить();
					лЭлектронныйДокументОбъект.ПодписиКонтрагента.Очистить();
					лЭлектронныйДокументОбъект.Содержание.Очистить();
					лЭлектронныйДокументОбъект.Вложения.Очистить();
					лЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент.Очистить();
					
					ДокументБылСоздан = Истина;
					НомерВерсииСодержания = 1;
				Иначе	
					лЭлектронныйДокументОбъект = ДанныеДокумента.ЭлектронныйДокумент.ПолучитьОбъект();
					
					Если ТаблицаДанныхДокументов.Колонки.Найти("ПараметрыСозданияДокументов") <> Неопределено Тогда
						Если ЗначениеЗаполнено(ДанныеДокумента.ПараметрыСозданияДокументов) Тогда
							ДозаполнитьПараметрыСозданияЭлектронногоДокумента(ДанныеДокумента.ПараметрыСозданияДокументов, ДанныеДокумента.Организация);
							ПараметрыСозданияДокументов = ДанныеДокумента.ПараметрыСозданияДокументов;
							
							лЭлектронныйДокументОбъект.Дата = ДанныеДокумента.ПараметрыСозданияДокументов.ДатаЭлектронногоДокумента;
							лЭлектронныйДокументОбъект.Номер = ДанныеДокумента.ПараметрыСозданияДокументов.НомерЭлектронногоДокумента;
							лЭлектронныйДокументОбъект.ДатаДокумента = ДанныеДокумента.ПараметрыСозданияДокументов.ДатаЭлектронногоДокумента;
							лЭлектронныйДокументОбъект.НомерДокумента = ДанныеДокумента.ПараметрыСозданияДокументов.НомерЭлектронногоДокумента;
							лЭлектронныйДокументОбъект.СуммаДокумента = ДанныеДокумента.ПараметрыСозданияДокументов.СуммаЭлектронногоДокумента;
							лЭлектронныйДокументОбъект.СуммаНДС = ДанныеДокумента.ПараметрыСозданияДокументов.СуммаНДСЭлектронногоДокумента;
							лЭлектронныйДокументОбъект.СуммаБезНДС = ДанныеДокумента.ПараметрыСозданияДокументов.СуммаБезНДСЭлектронногоДокумента;
							лЭлектронныйДокументОбъект.ЕДРПОУВладельцаШаблона = ДанныеДокумента.ПараметрыСозданияДокументов.ЕДРПОУВладельцаШаблона;
							лЭлектронныйДокументОбъект.ИмяШаблона = ДанныеДокумента.ПараметрыСозданияДокументов.ИмяШаблона;
							лЭлектронныйДокументОбъект.ВерсияШаблона = ДанныеДокумента.ПараметрыСозданияДокументов.ВерсияШаблона;
							лЭлектронныйДокументОбъект.ВхИсх = ДанныеДокумента.ПараметрыСозданияДокументов.ВхИсх;
							
							Если лЭлектронныйДокументОбъект.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ПустаяСсылка") Тогда
								Если лЭлектронныйДокументОбъект.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
									лЭлектронныйДокументОбъект.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе");
								ИначеЕсли лЭлектронныйДокументОбъект.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
									лЭлектронныйДокументОбъект.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ПолученОтКонтрагента");
								КонецЕсли;
							КонецЕсли;
							Если лЭлектронныйДокументОбъект.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
								лЭлектронныйДокументОбъект.ИдентификаторДокумента = ДанныеДокумента.ПараметрыСозданияДокументов.DocId;
								лЭлектронныйДокументОбъект.DocId = ДанныеДокумента.ПараметрыСозданияДокументов.DocId;
								лЭлектронныйДокументОбъект.ИдентификаторДокументаВБазеДанныхКонтрагента = ДанныеДокумента.ПараметрыСозданияДокументов.OutId;
								лЭлектронныйДокументОбъект.OutId = ДанныеДокумента.ПараметрыСозданияДокументов.OutId;
								лЭлектронныйДокументОбъект.NOTATION = ДанныеДокумента.ПараметрыСозданияДокументов.NOTATION;
								
								
							ИначеЕсли лЭлектронныйДокументОбъект.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ПолученОтКонтрагента") Тогда
								
							КонецЕсли;
							
							лЭлектронныйДокументОбъект.ИмяФайлаДФС = ДанныеДокумента.ПараметрыСозданияДокументов.ИмяФайлаДФС;
							лЭлектронныйДокументОбъект.ИННПродавца = ДанныеДокумента.ПараметрыСозданияДокументов.ИННПродавца;
							лЭлектронныйДокументОбъект.КодФилиалаПродавца = ДанныеДокумента.ПараметрыСозданияДокументов.КодФилиалаПродавца;
							лЭлектронныйДокументОбъект.ИННПокупателя = ДанныеДокумента.ПараметрыСозданияДокументов.ИННПокупателя;
							лЭлектронныйДокументОбъект.КодФилиалаПокупателя = ДанныеДокумента.ПараметрыСозданияДокументов.КодФилиалаПокупателя;
							лЭлектронныйДокументОбъект.РегистрируетсяВЕРННПокупателем = ДанныеДокумента.ПараметрыСозданияДокументов.РегистрируетсяВЕРННПокупателем;
							
							лЭлектронныйДокументОбъект.ЕДРПОУКонтрагента = ДанныеДокумента.ПараметрыСозданияДокументов.ЕДРПОУКонтрагента;
							лЭлектронныйДокументОбъект.ФилиалКонтрагента = ДанныеДокумента.ПараметрыСозданияДокументов.ФилиалКонтрагента;
							
							лПоДаннымХранилищаРеквизитов = Неопределено;
							Если ДанныеДокумента.ПараметрыСозданияДокументов.Свойство("ПоДаннымХранилищаРеквизитов", лПоДаннымХранилищаРеквизитов) Тогда
								лЭлектронныйДокументОбъект.ПоДаннымХранилищаРеквизитов = лПоДаннымХранилищаРеквизитов;
							КонецЕсли;
							Если ЗначениеЗаполнено(ДанныеДокумента.СоответствиеЗначенийРеквизитов) Тогда
								лЭлектронныйДокументОбъект.ХранилищеРеквизитовЭлектронногоДокумента = Новый ХранилищеЗначения(ДанныеДокумента.СоответствиеЗначенийРеквизитов);
							КонецЕсли;
							
							лДокументСозданНаОсновании = Неопределено;
							Если ПараметрыСозданияДокументов.Свойство("ДокументСозданНаОсновании", лДокументСозданНаОсновании) Тогда
								ДокументСозданНаОсновании = лДокументСозданНаОсновании;
							КонецЕсли;
							лМассивДанныхПоСвязаннымДокументам = Неопределено;
							Если ПараметрыСозданияДокументов.Свойство("МассивДанныхПоСвязаннымДокументам", лМассивДанныхПоСвязаннымДокументам) Тогда
								МассивДанныхПоСвязаннымДокументам = лМассивДанныхПоСвязаннымДокументам;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					НомерВерсииСодержания = ПолучитьСледующийНомерВерсииСодержанияЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент);
					//Если ДанныеДокумента.ЭлектронныйДокумент.ХранилищеРеквизитовЭлектронногоДокумента.Получить() = Неопределено
					//	И ДанныеДокумента.ЭлектронныйДокумент.Состояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.Создан
					//	//И ДанныеДокумента.Свойство("РеквизитыЭлектронногоДокумента") Тогда
					//	И ЗначениеЗаполнено(ДанныеДокумента.СоответствиеЗначенийРеквизитов) Тогда 
					//	
					//	лЭлектронныйДокументОбъект.ХранилищеРеквизитовЭлектронногоДокумента = Новый ХранилищеЗначения(ДанныеДокумента.СоответствиеЗначенийРеквизитов);
					//	
					//КонецЕсли;
				КонецЕсли;
				
				Если Не ПодписиПолученыИзЭлектронногоДокумента Тогда
					Для Каждого СтрокаПодписи из ТаблицаПодписейПоДокументу Цикл
						НоваяСтрокаПодписи = лЭлектронныйДокументОбъект.Подписи.Добавить();
						НоваяСтрокаПодписи.Подпись = СтрокаПодписи.Подпись;
					КонецЦикла;
				КонецЕсли;
				Для Каждого СтрокаПодписи Из ТаблицаНакладываемыхНаДокументПодписей Цикл
					ПодписиВДокументе = лЭлектронныйДокументОбъект.Подписи.НайтиСтроки(Новый Структура("Подпись", СтрокаПодписи.Подпись));
					Для Каждого ПодписьВДокументе Из ПодписиВДокументе Цикл
						ПодписьВДокументе.Подпись = СтрокаПодписи.ВыбранаяПодпись;
						ПодписьВДокументе.Подписано = Истина;
						ПодписьВДокументе.ДатаПодписания = ТекущаяДата();
					КонецЦикла;
				КонецЦикла;
				
				Если ДокументБылПодписанПолностью Тогда
					лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан");
					//лСостояниеМногостороннегоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение");
				Иначе
					лЭлектронныйДокументОбъект.Состояние = ПолучитьСледующееСостояниеДляПодписанныхЧастично(РольСледующейПодписи);
					//лСостояниеМногостороннегоДокумента = лЭлектронныйДокументОбъект.Состояние;
				КонецЕсли;
				лСостояниеМногостороннегоДокумента = лЭлектронныйДокументОбъект.Состояние;
				УстановитьПараметрыМаршрутаМногостороннегоДокумента(лЭлектронныйДокументОбъект, ПараметрыСозданияДокументов, лЭлектронныйДокументОбъект.RoutePosition, лСостояниеМногостороннегоДокумента);
				
				МассивНастроекОтправкаСсылкиНаДокумент = ДанныеДокумента.МассивНастроекОтправкаСсылкиНаДокумент;
				Если ТипЗнч(МассивНастроекОтправкаСсылкиНаДокумент) = Тип("ФиксированныйМассив") или ТипЗнч(МассивНастроекОтправкаСсылкиНаДокумент) = Тип("Массив") Тогда
					лЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент.Очистить();
					Для Каждого СтрокаМассиваНастроекОтправкаСсылкиНаДокумент из МассивНастроекОтправкаСсылкиНаДокумент Цикл
						НоваяСтрокаОтправкаСсылкиНаДокумент = лЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент.Добавить();
						НоваяСтрокаОтправкаСсылкиНаДокумент.ЭлектроннаяПочта = СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта;
						НоваяСтрокаОтправкаСсылкиНаДокумент.Комментарий = СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий;
					КонецЦикла;
				КонецЕсли;
				
				лЭлектронныйДокументОбъект.ПоследняяОперация = ТекущаяДата();
				ЗаписатьЭлектронныйДокументСПредварительнымПоискомСвязаных(лЭлектронныйДокументОбъект, ДанныеДокумента.ВидЭлектронногоДокумента, ДанныеДокумента.ВидЭлектронногоДокумента.Владелец, ДокументСозданНаОсновании);
				ПрименитьМассивДанныхПоСвязаннымДокументам(лЭлектронныйДокументОбъект.Ссылка, МассивДанныхПоСвязаннымДокументам);
				
				Если ДокументБылСоздан Тогда
					НомерФайла = 1;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента1) Тогда
						СохранитьВложениеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка, НомерФайла, ВложениеДокументаБезПодписи1, ИмяФайлаВложениеДокумента1, ВложениеДокументаФайл1);
						НомерФайла = НомерФайла + 1;
					КонецЕсли;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента2) Тогда
						СохранитьВложениеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка, НомерФайла, ВложениеДокументаБезПодписи2, ИмяФайлаВложениеДокумента2, ВложениеДокументаФайл2);
						НомерФайла = НомерФайла + 1;
					КонецЕсли;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента3) Тогда
						СохранитьВложениеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка, НомерФайла, ВложениеДокументаБезПодписи3, ИмяФайлаВложениеДокумента3, ВложениеДокументаФайл3);
						НомерФайла = НомерФайла + 1;
					КонецЕсли;
					Если ТипЗнч(МассивВложенийДокументаБезПодписи4) = Тип("Массив") или ТипЗнч(МассивВложенийДокументаБезПодписи4) = Тип("ФиксированныйМассив") Тогда
						Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокументаБезПодписи4 Цикл
							Попытка
								ВложениеДокументаФайл = ЭлементМассиваВложенийДокумента4.ВложениеДокументаФайл;
							Исключение
								ВложениеДокументаФайл = Неопределено;
							КонецПопытки;
							СохранитьВложениеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка, НомерФайла, ЭлементМассиваВложенийДокумента4.ВложениеДокумента, ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента, ВложениеДокументаФайл);
							НомерФайла = НомерФайла + 1;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				скEDI_ВнешниеХранилища.СохранитьСодержимоеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка, НомерВерсииСодержания,
					ТелоДокумента,
					ИзображениеДокумента,
					ВложениеДокумента1,
					ИмяФайлаВложениеДокумента1,
					ВложениеДокумента2,
					ИмяФайлаВложениеДокумента2,
					ВложениеДокумента3,
					ИмяФайлаВложениеДокумента3,
					МассивВложенийДокумента4,
					ТекущаяДата(),
					"",
					0,
					"",
					Ложь,
					Ложь,
					Неопределено,
					?(ТипПодписание = "gov", Истина, Ложь)
				);
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
					"ВЫБРАТЬ
					|	скEDI_Факсимиле.Подпись,
					|	скEDI_Факсимиле.Подпись.ДРФО КАК ДРФО,
					|	скEDI_Факсимиле.Подпись.Владелец.Код КАК ЕДРПОУ,
					|	скEDI_Факсимиле.Подпись.Роль КАК Роль,
					|	скEDI_Факсимиле.Подпись.Фамилия КАК Фамилия,
					|	скEDI_Факсимиле.Подпись.Имя КАК Имя,
					|	скEDI_Факсимиле.Подпись.Должность КАК Должность,
					|	скEDI_Факсимиле.Факсимиле
					|ИЗ
					|	РегистрСведений.скEDI_Факсимиле КАК скEDI_Факсимиле
					|ГДЕ
					|	скEDI_Факсимиле.Подпись В(&СписокПодписей)";
				Запрос.УстановитьПараметр("СписокПодписей", ТаблицаНакладываемыхНаДокументПодписей.ВыгрузитьКолонку("ВыбранаяПодпись"));
				ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					МенеджерЗаписи = РегистрыСведений.скEDI_ФаксимилеЭлектронныхДокументов.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.ЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
					КодУровняПодписи = ПолучитьКодПодписиПоРоли(ВыборкаДетальныеЗаписи.Роль);
					Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДРФО) Тогда
						МенеджерЗаписи.ДРФО = ВыборкаДетальныеЗаписи.ДРФО;
						МенеджерЗаписи.ИмяПодписанта = ВыборкаДетальныеЗаписи.Фамилия;
						МенеджерЗаписи.ДолжностьПодписанта = ВыборкаДетальныеЗаписи.Должность;
					Иначе
						МенеджерЗаписи.ДРФО = ВыборкаДетальныеЗаписи.ЕДРПОУ;
						МенеджерЗаписи.ИмяПодписанта = "";
						МенеджерЗаписи.ДолжностьПодписанта = "";
						Если КодУровняПодписи = -1 Тогда
							КодУровняПодписи = 2;
						КонецЕсли;
					КонецЕсли;
					МенеджерЗаписи.Сторона = лЭлектронныйДокументОбъект.RoutePosition;
					МенеджерЗаписи.КодУровняПодписи = КодУровняПодписи;
					МенеджерЗаписи.Роль = ВыборкаДетальныеЗаписи.Роль;
					
					ТелоФаксимиле_ХранилищеЗначений = ВыборкаДетальныеЗаписи.Факсимиле.Получить();
					ТелоФаксимиле = Base64Строка(ТелоФаксимиле_ХранилищеЗначений);
					МенеджерЗаписи.ТелоФаксимиле = ТелоФаксимиле;
					
					МенеджерЗаписи.Записать(Истина);
				КонецЦикла;
				
				КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
				ДанныеДокумента.ЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
				ДанныеДокумента.Состояние = лЭлектронныйДокументОбъект.Состояние;
				Если ДокументБылСоздан Тогда
					//// 2017-09-27
					//ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "Документ сохранен """ + лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента.Наименование + """ №" + лЭлектронныйДокументОбъект.НомерДокумента + " " + НСтр("ru = 'от'; uk = 'від'") + " " + Формат(лЭлектронныйДокументОбъект.ДатаДокумента, "ДФ=dd.MM.yyyy"));
					//// ...2017-09-27
					ЗафиксироватьСобытиеЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент, ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.Создание"), , ДатаСозданияДокумента);
				КонецЕсли;
				ОписаниеНаложеныхПодписей = ЗафиксироватьСобытияПоПодписаниюДокумента(ДанныеДокумента.ЭлектронныйДокумент, лСписокНаложенныхНаДокументПодписей);
				
				СобытиеДляЖурнала = НСтр("ru = 'Документ подписан'; uk = 'Документ підписано'") + ": """
				+ лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента.Наименование + """ №" + лЭлектронныйДокументОбъект.НомерДокумента + НСтр("ru = ' от '; uk = ' від '") + Формат(лЭлектронныйДокументОбъект.ДатаДокумента, "ДФ=dd.MM.yyyy")
				+ Символы.ПС + ОписаниеНаложеныхПодписей;
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, СобытиеДляЖурнала, , Ложь);
				
				
				Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
					тОрганизация = ПараметрыСобытий.Организация;
					тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
					тВхИсх = ПараметрыСобытий.ВхИсх;
					тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
					тЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
					тСостояние = лЭлектронныйДокументОбъект.Состояние;
					тДокумент1С = лЭлектронныйДокументОбъект.Документ1С;
					тМассивВложений = Неопределено;
					ПараметрыСобытий.Свойство("МассивВложений", тМассивВложений);
					Если ТипЗнч(тМассивВложений) <> Тип("Массив") Тогда
						Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
							тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
						Иначе
							тМассивВложений = Новый Массив;
						КонецЕсли;
						ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
					КонецЕсли;
					тМассивПодписей = Неопределено;
					ПараметрыСобытий.Свойство("МассивПодписей", тМассивПодписей);
					Если ТипЗнч(тМассивПодписей) <> Тип("Массив") Тогда
						тМассивПодписей = Новый Массив;
						ПараметрыСобытий.Вставить("МассивПодписей", тМассивПодписей);
					КонецЕсли;
					ОбработатьСобытие_ПриПодписании(тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписей, тДокумент1С, тМассивВложений);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Обновление журнала операций.
	Если ЖурналОперации <> "" Тогда
		Если ДополнительныеПараметры.ЖурналОперации = "" Тогда
			ДополнительныеПараметры.ЖурналОперации = ЖурналОперации;
		Иначе
			ДополнительныеПараметры.ЖурналОперации = ДополнительныеПараметры.ЖурналОперации + Символы.ПС + ЖурналОперации;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПодписатьЭлектронныйДокументСервер()

Функция ЗафиксироватьСобытияПоПодписаниюДокумента(ЭлектронныйДокумент, СписокНаложенныхНаДокументПодписей);
	лОписаниеНаложеныхПодписей = "";
	Для Каждого ЭлементСпискаНаложенныхНаДокументПодписей Из СписокНаложенныхНаДокументПодписей Цикл
		//		лИнформацияПоПодписи = Новый Структура("Дата, ПолучатьOCSP, ПолучатьTSP, Подпись, Наименование, Сертификат", Дата(1,1,1,0,0,0), Ложь, Ложь, лДанныеПодписи.Подпись, лДанныеПодписи.Наименование, лДанныеПодписи.СерийныйНомер);
		ИнформацияПоПодписи = ЭлементСпискаНаложенныхНаДокументПодписей.Значение;
		лОписаниеНаложеныхПодписей = лОписаниеНаложеныхПодписей + ?(лОписаниеНаложеныхПодписей = "", "", Символы.ПС) + ИнформацияПоПодписи.Наименование;
		лОписаниеНаложенойПодписи =  НСтр("ru = 'Подписано: '; uk = 'Підписано: '") + ИнформацияПоПодписи.Наименование + "
		|" + НСтр("ru = 'Дата и время подписи:'; uk = 'Дата та час підпису: '") + Формат(ИнформацияПоПодписи.Дата, "ДФ='dd.MM.yyyy HH:mm:ss'");
		Если ЗначениеЗаполнено(ИнформацияПоПодписи.ДРФОПодписанта) Тогда
			лОписаниеНаложенойПодписи = лОписаниеНаложенойПодписи + "
			|" +  НСтр("ru = 'ГРФЛ: '; uk = 'ДРФО: '") + ИнформацияПоПодписи.ДРФОПодписанта;
			лОписаниеНаложеныхПодписей = лОписаниеНаложеныхПодписей + НСтр("ru = '(ГРФЛ: '; uk = '(ДРФО: '") + ИнформацияПоПодписи.ДРФОПодписанта + ")";
		КонецЕсли;
		лОписаниеНаложенойПодписи = лОписаниеНаложенойПодписи + "
		|Сер. №" + ИнформацияПоПодписи.СерийныйНомер;
		Если НРег(ИнформацияПоПодписи.ТипПодписания) = "ptn" Тогда
			Если ИнформацияПоПодписи.ПолучатьOCSP Тогда
				лОписаниеНаложенойПодписи = лОписаниеНаложенойПодписи + "
				|" + НСтр("ru = ' Статус сертификата по OCSP: На подписании проверка сертификата сервера OCSP проведена успешно.'; uk = 'Статус сертифікату за OCSP: На час підписання перевірка сертифіката сервером OCSP проведена вдало.'") ;
			КонецЕсли;
			Если ИнформацияПоПодписи.ПолучатьTSP Тогда
				лОписаниеНаложенойПодписи = лОписаниеНаложенойПодписи + "
				|" + НСтр("ru = 'Отметка времени: '; uk = 'Позначка часу: '") + Формат(ИнформацияПоПодписи.Дата, "ДФ='dd.MM.yyyy HH:mm:ss'");
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьСобытиеЭлектронногоДокумента(ЭлектронныйДокумент, ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.Подписание"), лОписаниеНаложенойПодписи, ИнформацияПоПодписи.Дата);
	КонецЦикла;
	Возврат лОписаниеНаложеныхПодписей;
КонецФункции
		
Функция ПолучитьСледующееСостояниеДляПодписанныхЧастично(РольСледующейПодписи)
	Если РольСледующейПодписи = ПредопределенноеЗначение("Перечисление.скEDI_РолиПодписей.ПодписьБухгалтера") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьБухгалтеру");
	ИначеЕсли РольСледующейПодписи = ПредопределенноеЗначение("Перечисление.скEDI_РолиПодписей.ПодписьДиректора") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьДиректору");
	ИначеЕсли РольСледующейПодписи = ПредопределенноеЗначение("Перечисление.скEDI_РолиПодписей.ПечатьОрганизации") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьПечатью");
	ИначеЕсли РольСледующейПодписи = ПредопределенноеЗначение("Перечисление.скEDI_РолиПодписей.ПодписьОтветственногоЛица") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично");
	КонецЕсли;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьТаблицуНеобходимыхПодписейДляДокумента(ТаблицаНакладываемыхНаДокументПодписей, ЭлектронныйДокумент, ДанныеПодписываемогоДокумента, ПодписиПолученыИзЭлектронногоДокумента, ОшибкаПолученияПодписей)
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	скEDI_ЭлектронныйДокументПодписи.Подпись КАК Подпись,
		|	скEDI_ЭлектронныйДокументПодписи.Подписано КАК Подписано,
		|	скEDI_ЭлектронныйДокументПодписи.НомерСтроки КАК ПорядокПодписи,
		|	скEDI_Подписи.Наименование КАК Наименование,
		|	скEDI_Подписи.ДРФО КАК ДРФОПодписанта,
		|	скEDI_Подписи.Роль КАК Роль,
		|	скEDI_Подписи.ИспользованиеКлюча КАК ИспользованиеКлюча,
		|	скEDI_Подписи.Фамилия КАК ФамилияПодписанта,
		|	скEDI_Подписи.Имя КАК ИмяПодписанта
		|ИЗ
		|	Документ.скEDI_ЭлектронныйДокумент.Подписи КАК скEDI_ЭлектронныйДокументПодписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.скEDI_Подписи КАК скEDI_Подписи
		|		ПО скEDI_ЭлектронныйДокументПодписи.Подпись = скEDI_Подписи.Ссылка
		|ГДЕ
		|	скEDI_ЭлектронныйДокументПодписи.Ссылка = &ЭлектронныйДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПорядокПодписи";
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		ТаблицаНакладываемыхНаДокументПодписей = Запрос.Выполнить().Выгрузить();
		Если ТаблицаНакладываемыхНаДокументПодписей.Количество() > 0 Тогда
			ПодписиПолученыИзЭлектронногоДокумента = Истина;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПодписиПолученыИзЭлектронногоДокумента = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	скEDI_ВидыЭлектронныхДокументовПодписи.Подпись КАК Подпись,
	|	скEDI_ВидыЭлектронныхДокументовПодписи.ТолькоОтветственный КАК ТолькоОтветственный,
	|	ЛОЖЬ КАК Подписано,
	|	скEDI_ВидыЭлектронныхДокументовПодписи.НомерСтроки КАК ПорядокПодписи,
	|	скEDI_Подписи.Наименование КАК Наименование,
	|	скEDI_Подписи.ДРФО КАК ДРФОПодписанта,
	|	скEDI_Подписи.Роль КАК Роль,
	|	скEDI_Подписи.ИспользованиеКлюча КАК ИспользованиеКлюча,
	|	скEDI_Подписи.Фамилия КАК ФамилияПодписанта,
	|	скEDI_Подписи.Имя КАК ИмяПодписанта
	|ИЗ
	|	Справочник.скEDI_ВидыЭлектронныхДокументов.Подписи КАК скEDI_ВидыЭлектронныхДокументовПодписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.скEDI_Подписи КАК скEDI_Подписи
	|		ПО скEDI_ВидыЭлектронныхДокументовПодписи.Подпись = скEDI_Подписи.Ссылка
	|ГДЕ
	|	скEDI_ВидыЭлектронныхДокументовПодписи.Ссылка = &ВидЭлектронногоДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокПодписи";
	Запрос.УстановитьПараметр("ВидЭлектронногоДокумента", ДанныеПодписываемогоДокумента.ВидЭлектронногоДокумента);
	ТаблицаНакладываемыхНаДокументПодписей = Запрос.Выполнить().Выгрузить();
	Если ДанныеПодписываемогоДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
		Для Каждого СтрокаТаблицыНакладываемыхНаДокументПодписей Из ТаблицаНакладываемыхНаДокументПодписей Цикл
			Если ТипЗнч(СтрокаТаблицыНакладываемыхНаДокументПодписей.Подпись) = Тип("СправочникСсылка.скEDI_ГруппыПодписей") Тогда
				Если СтрокаТаблицыНакладываемыхНаДокументПодписей.ТолькоОтветственный Тогда
					//КодПоДРФО = скEDI_НастройкиПодКонфигурацию.ПолучитьКодПоДРФООтветственногоЗаДокумент(ДанныеПодписываемогоДокумента.Документ1С);
					КодПоДРФО = "";
					НаименованиеОтветственного = "";
					ОписаниеОшибкиОтветственного = "";
					Если скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеОтветственногоЗаДокумент(ДанныеПодписываемогоДокумента.Документ1С, КодПоДРФО, НаименованиеОтветственного, ОписаниеОшибкиОтветственного) Тогда
						Если КодПоДРФО = "" Тогда
							Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
								ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
							КонецЕсли;
							ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + НСтр("ru = 'Не указан Код по ДРФО Ответственного по документу:'; uk = 'Не вказано Код по ДРФО Відповідального по документу:'") + " " + Строка(ДанныеПодписываемогоДокумента.Документ1С);
						Иначе
							ТекПодпись = ПолучитьПодписьИзГруппыПоКодуДРФО(ДанныеПодписываемогоДокумента.Организация, СтрокаТаблицыНакладываемыхНаДокументПодписей.Подпись, КодПоДРФО);
							Если ТекПодпись = Неопределено Тогда
								Сообщение = НСтр("ru = 'В Группе подписей'; uk = 'В Групі підписів'") + " """ + Строка(СтрокаТаблицыНакладываемыхНаДокументПодписей.Подпись) + """ " + НСтр("ru = 'не найдена Подпись с Кодом по ДРФО'; uk = 'не знайдено Підпис з Кодом по ДРФО'") + ": " + КодПоДРФО;
								Если Найти(ОшибкаПолученияПодписей, Сообщение) = 0 Тогда
									Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
										ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
									КонецЕсли;
									ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Сообщение;
								КонецЕсли;
								Возврат Ложь;
							КонецЕсли;
							СтрокаТаблицыНакладываемыхНаДокументПодписей.Подпись = ТекПодпись;
						КонецЕсли;
					Иначе
						Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
							ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
						КонецЕсли;
						ОшибкаПолученияПодписей = ОшибкаПолученияПодписей
							+ НСтр("ru = 'Ошибка определения ответственного по документу:'; uk = 'Помилка визначення відповідального по документу:'")
							+ " """ + Строка(ДанныеПодписываемогоДокумента.Документ1С) + """ "
							+ ОписаниеОшибкиОтветственного;
					КонецЕсли;
				//Иначе
				//	ТекПодпись = Подпись.Подпись;
				КонецЕсли;
			ИначеЕсли ТипЗнч(СтрокаТаблицыНакладываемыхНаДокументПодписей.Подпись) = Тип("СправочникСсылка.скEDI_Подписи") Тогда
				Если СтрокаТаблицыНакладываемыхНаДокументПодписей.ТолькоОтветственный Тогда
					//КодПоДРФО = скEDI_НастройкиПодКонфигурацию.ПолучитьКодПоДРФООтветственногоЗаДокумент(ДанныеПодписываемогоДокумента.Документ1С);
					КодПоДРФО = "";
					НаименованиеОтветственного = "";
					ОписаниеОшибкиОтветственного = "";
					Если скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеОтветственногоЗаДокумент(ДанныеПодписываемогоДокумента.Документ1С, КодПоДРФО, НаименованиеОтветственного, ОписаниеОшибкиОтветственного) Тогда
						Если КодПоДРФО = "" Тогда
							Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
								ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
							КонецЕсли;
							ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + НСтр("ru = 'Не указан Код по ДРФО Ответственного по документу:'; uk = 'Не вказано Код по ДРФО Відповідального по документу:'") + " " + Строка(ДанныеПодписываемогоДокумента.Документ1С);
							Возврат Ложь;
						Иначе
							Если КодПоДРФО <> СтрокаТаблицыНакладываемыхНаДокументПодписей.Подпись.ДРФО Тогда
								Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
									ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
								КонецЕсли;
								ОшибкаПолученияПодписей = ОшибкаПолученияПодписей
									+ НСтр("ru = 'Код по ДРФО Подписи'; uk = 'Код по ДРФО Підпису'")
									+ " (""" + СокрЛП(СтрокаТаблицыНакладываемыхНаДокументПодписей.Подпись) + """, """ + СтрокаТаблицыНакладываемыхНаДокументПодписей.Подпись.ДРФО + """) "
									+ НСтр("ru = 'не соответствует Ответственному'; uk = 'не відповідає Відповідальному'")
									+ " (""" + СокрЛП(НаименованиеОтветственного) + """, """ + КодПоДРФО + """) "
									+ НСтр("ru = 'по документу'; uk = 'по документу'")
									+ ": " + Строка(ДанныеПодписываемогоДокумента.Документ1С);
								Возврат Ложь;
							КонецЕсли;
						КонецЕсли;
					Иначе
						Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
							ОшибкаПолученияПодписей = ОшибкаПолученияПодписей + Символы.ПС;
						КонецЕсли;
						ОшибкаПолученияПодписей = ОшибкаПолученияПодписей
							+ НСтр("ru = 'Ошибка определения ответственного по документу:'; uk = 'Помилка визначення відповідального по документу:'")
							+ " """ + Строка(ДанныеПодписываемогоДокумента.Документ1С) + """ "
							+ ОписаниеОшибкиОтветственного;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Истина;
КонецФункции // ПолучитьТаблицуНеобходимыхПодписейДляДокумента()

Функция ПолучитьРольПодписи(Подпись, Организация)
	Если ТипЗнч(Подпись) = Тип("СправочникСсылка.скEDI_Подписи") Тогда
		Возврат Подпись.Роль;
	ИначеЕсли ТипЗнч(Подпись) = Тип("СправочникСсылка.скEDI_ГруппыПодписей") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	МАКСИМУМ(скEDI_ГруппыПодписей.Подпись.Роль) КАК Роль
		               |ИЗ
		               |	РегистрСведений.скEDI_ГруппыПодписей КАК скEDI_ГруппыПодписей
		               |ГДЕ
		               |	скEDI_ГруппыПодписей.ГруппаПодписи = &ГруппаПодписи
		               |	И скEDI_ГруппыПодписей.Подпись.Владелец = &Организация";
		Запрос.УстановитьПараметр("ГруппаПодписи", Подпись);
		Запрос.УстановитьПараметр("Организация", Организация);
		ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		Если ВыборкаРезультатаЗапроса.Следующий() Тогда
			Возврат ВыборкаРезультатаЗапроса.Роль;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьМассивПодписейДляОбработкиСобытий(ЭлектронныйДокумент)
	МассивПодписейДляОбработкиСобытий = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ЭлектронныйДокументПодписи.Подпись,
	               |	скEDI_ЭлектронныйДокументПодписи.Подписано
	               |ИЗ
	               |	Документ.скEDI_ЭлектронныйДокумент.Подписи КАК скEDI_ЭлектронныйДокументПодписи
	               |ГДЕ
	               |	скEDI_ЭлектронныйДокументПодписи.Ссылка = &Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	скEDI_ЭлектронныйДокументПодписи.НомерСтроки";
	Запрос.УстановитьПараметр("Ссылка", ЭлектронныйДокумент);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		ДанныеПодписиДокумента = Новый Структура("Подпись, ПодписаноРанее, ПодписываетсяСейчас");
		ДанныеПодписиДокумента.Подпись = ВыборкаРезультатаЗапроса.Подпись;
		ДанныеПодписиДокумента.ПодписаноРанее = ВыборкаРезультатаЗапроса.Подписано;
		ДанныеПодписиДокумента.ПодписываетсяСейчас = Ложь;
		МассивПодписейДляОбработкиСобытий.Добавить(ДанныеПодписиДокумента);
	КонецЦикла;
	
	Возврат МассивПодписейДляОбработкиСобытий;
КонецФункции

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Функция ПодготовитьТаблицуНакладываемыхПодписей(ТаблицаНакладываемыхПодписей, ТаблицаНастроекПодписей, Организация, РольСледующейПодписи, МассивПодписейДляОбработкиСобытий = Неопределено)
	ТаблицаНакладываемыхПодписей.Колонки.Добавить("ВыбранаяПодпись");
	ТаблицаНакладываемыхПодписей.Колонки.Добавить("ТелоСертификата");
	ТаблицаНакладываемыхПодписей.Колонки.Добавить("ТелоСекретногоКлюча");
	ТаблицаНакладываемыхПодписей.Колонки.Добавить("ПарольСекретногоКлюча");
	ТаблицаНакладываемыхПодписей.Колонки.Добавить("СерийныйНомер");
	
	ТаблицаНакладываемыхПодписей.Колонки.Добавить("ИдентификаторСекретногоКлюча");
	ТаблицаНакладываемыхПодписей.Колонки.Добавить("КлючНаЗащищенномНосителе");
	ТаблицаНакладываемыхПодписей.Колонки.Добавить("КлючНаСервисеCloudKey");
	ТаблицаНакладываемыхПодписей.Колонки.Добавить("ЗащищенныйНосительЕстьНастройкаДоступаКСерверу");
	ТаблицаНакладываемыхПодписей.Колонки.Добавить("ЗащищенныйНосительСервер");
	ТаблицаНакладываемыхПодписей.Колонки.Добавить("ЗащищенныйНосительПорт");
	ТаблицаНакладываемыхПодписей.Колонки.Добавить("ЗащищенныйНосительProviderName");
	ТаблицаНакладываемыхПодписей.Колонки.Добавить("ЗащищенныйНосительSlotId");
	ТаблицаНакладываемыхПодписей.Колонки.Добавить("ЗащищенныйНосительTokenSerialNumber");
	ТаблицаНакладываемыхПодписей.Колонки.Добавить("ЗащищенныйНосительДоступен");
	ТаблицаНакладываемыхПодписей.Колонки.Добавить("ЗащищенныйНосительIsRemoteSlot");
	ТаблицаНакладываемыхПодписей.Колонки.Добавить("ЗащищенныйНосительUseNamedKeys");
	ТаблицаНакладываемыхПодписей.Колонки.Добавить("ЗащищенныйНосительTokenPassword");
	ТаблицаНакладываемыхПодписей.Колонки.Добавить("ЗащищенныйНосительСтрокаПодключения");
	
	МассивПодписейДляОбработкиСобытий = Новый Массив;

	Индекс = 0;
	ВсеБудетПодписано = Истина;
	РольСледующейПодписи = ПредопределенноеЗначение("Перечисление.скEDI_РолиПодписей.ПустаяСсылка");
	
	Пока Индекс < ТаблицаНакладываемыхПодписей.Количество() Цикл
		ТекущаяСтрока = ТаблицаНакладываемыхПодписей.Получить(Индекс);
		ДанныеПодписиДокумента = Новый Структура("Подпись, ПодписаноРанее, ПодписываетсяСейчас");
		ДанныеПодписиДокумента.Подпись = ТекущаяСтрока.Подпись;
		ДанныеПодписиДокумента.ПодписаноРанее = Ложь;
		ДанныеПодписиДокумента.ПодписываетсяСейчас = Ложь;
		Если ТекущаяСтрока.Подписано Тогда
			ДанныеПодписиДокумента.ПодписаноРанее = Истина;
			МассивПодписейДляОбработкиСобытий.Добавить(ДанныеПодписиДокумента);
			
			ТаблицаНакладываемыхПодписей.Удалить(Индекс);
		ИначеЕсли ВсеБудетПодписано Тогда
			лНастройкиПодписи = ТаблицаНастроекПодписей.Найти(ТекущаяСтрока.Подпись, "Подпись");
			Если лНастройкиПодписи = Неопределено Тогда
				МассивПодписейДляОбработкиСобытий.Добавить(ДанныеПодписиДокумента);
				
				РольСледующейПодписи = ПолучитьРольПодписи(ТекущаяСтрока.Подпись, Организация);
				ТаблицаНакладываемыхПодписей.Удалить(Индекс);
				ВсеБудетПодписано = Ложь;
			ИначеЕсли лНастройкиПодписи.ПарольСекретногоКлюча = "" Тогда
				МассивПодписейДляОбработкиСобытий.Добавить(ДанныеПодписиДокумента);
				
				РольСледующейПодписи = ПолучитьРольПодписи(ТекущаяСтрока.Подпись, Организация);
				ТаблицаНакладываемыхПодписей.Удалить(Индекс);
				ВсеБудетПодписано = Ложь;
			Иначе
				ДанныеПодписиДокумента.ПодписываетсяСейчас = Истина;
				ДанныеПодписиДокумента.Подпись = лНастройкиПодписи.ВыбранаяПодпись;
				МассивПодписейДляОбработкиСобытий.Добавить(ДанныеПодписиДокумента);
				
				//ТекущаяСтрока.Подпись = лНастройкиПодписи.Подпись;
				ТекущаяСтрока.ВыбранаяПодпись = лНастройкиПодписи.ВыбранаяПодпись;
				ТекущаяСтрока.Наименование = лНастройкиПодписи.ВыбранаяПодпись.Наименование;
				ТекущаяСтрока.СерийныйНомер = лНастройкиПодписи.СерийныйНомер;
				ТекущаяСтрока.ТелоСертификата = лНастройкиПодписи.ТелоСертификата;
				ТекущаяСтрока.ТелоСекретногоКлюча = лНастройкиПодписи.ТелоСекретногоКлюча;
				ТекущаяСтрока.ПарольСекретногоКлюча = лНастройкиПодписи.ПарольСекретногоКлюча;
				ТекущаяСтрока.СерийныйНомер = лНастройкиПодписи.СерийныйНомер;
				
				ТекущаяСтрока.ИдентификаторСекретногоКлюча = лНастройкиПодписи.ИдентификаторСекретногоКлюча;
				ТекущаяСтрока.КлючНаЗащищенномНосителе = лНастройкиПодписи.КлючНаЗащищенномНосителе;
				Попытка
					ТекущаяСтрока.КлючНаСервисеCloudKey = лНастройкиПодписи.КлючНаСервисеCloudKey;
				Исключение
					ТекущаяСтрока.КлючНаСервисеCloudKey = Ложь;
				КонецПопытки;
				ТекущаяСтрока.ЗащищенныйНосительЕстьНастройкаДоступаКСерверу = лНастройкиПодписи.ЗащищенныйНосительЕстьНастройкаДоступаКСерверу;
				ТекущаяСтрока.ЗащищенныйНосительСервер = лНастройкиПодписи.ЗащищенныйНосительСервер;
				ТекущаяСтрока.ЗащищенныйНосительПорт = лНастройкиПодписи.ЗащищенныйНосительПорт;
				ТекущаяСтрока.ЗащищенныйНосительProviderName = лНастройкиПодписи.ЗащищенныйНосительProviderName;
				ТекущаяСтрока.ЗащищенныйНосительSlotId = лНастройкиПодписи.ЗащищенныйНосительSlotId;
				ТекущаяСтрока.ЗащищенныйНосительTokenSerialNumber = лНастройкиПодписи.ЗащищенныйНосительTokenSerialNumber;
				ТекущаяСтрока.ЗащищенныйНосительДоступен = лНастройкиПодписи.ЗащищенныйНосительДоступен;
				ТекущаяСтрока.ЗащищенныйНосительIsRemoteSlot = лНастройкиПодписи.ЗащищенныйНосительIsRemoteSlot;
				ТекущаяСтрока.ЗащищенныйНосительUseNamedKeys = лНастройкиПодписи.ЗащищенныйНосительUseNamedKeys;
				ТекущаяСтрока.ЗащищенныйНосительTokenPassword = лНастройкиПодписи.ЗащищенныйНосительTokenPassword;
				Попытка
					ТекущаяСтрока.ЗащищенныйНосительСтрокаПодключения = лНастройкиПодписи.ЗащищенныйНосительСтрокаПодключения;
				Исключение
					ТекущаяСтрока.ЗащищенныйНосительСтрокаПодключения = "";
				КонецПопытки;
				
				ТекущаяСтрока.ДРФОПодписанта = лНастройкиПодписи.ДРФО;
				Индекс = Индекс + 1;
			КонецЕсли;
		Иначе
			МассивПодписейДляОбработкиСобытий.Добавить(ДанныеПодписиДокумента);
			ТаблицаНакладываемыхПодписей.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	Возврат ВсеБудетПодписано;
КонецФункции 

Функция ПодготовитьТаблицуПодписейДляОтправкиНаДоподписание(ТаблицаНакладываемыхПодписей, ТаблицаНастроекПодписей, Организация, РольСледующейПодписи, МассивПодписейДляОбработкиСобытий = Неопределено)
	ТаблицаНакладываемыхПодписей.Колонки.Добавить("ВыбранаяПодпись");
	ТаблицаНакладываемыхПодписей.Колонки.Добавить("ОтправлятьНаДоподписание");
	ТаблицаНакладываемыхПодписей.Колонки.Добавить("Email1");
	ТаблицаНакладываемыхПодписей.Колонки.Добавить("Телефон1");
	
	МассивПодписейДляОбработкиСобытий = Новый Массив;

	Индекс = 0;
	ВсеБудетПодписано = Истина;
	РольСледующейПодписи = ПредопределенноеЗначение("Перечисление.скEDI_РолиПодписей.ПустаяСсылка");
	
	Пока Индекс < ТаблицаНакладываемыхПодписей.Количество() Цикл
		ТекущаяСтрока = ТаблицаНакладываемыхПодписей.Получить(Индекс);
		ДанныеПодписиДокумента = Новый Структура("Подпись, ПодписаноРанее, ПодписываетсяСейчас");
		ДанныеПодписиДокумента.Подпись = ТекущаяСтрока.Подпись;
		ДанныеПодписиДокумента.ПодписаноРанее = Ложь;
		ДанныеПодписиДокумента.ПодписываетсяСейчас = Ложь;
		Если ТекущаяСтрока.Подписано Тогда
			ДанныеПодписиДокумента.ПодписаноРанее = Истина;
			МассивПодписейДляОбработкиСобытий.Добавить(ДанныеПодписиДокумента);
			
			ТаблицаНакладываемыхПодписей.Удалить(Индекс);
		ИначеЕсли ВсеБудетПодписано Тогда
			лНастройкиПодписи = ТаблицаНастроекПодписей.Найти(ТекущаяСтрока.Подпись, "Подпись");
			Если лНастройкиПодписи = Неопределено Тогда
				МассивПодписейДляОбработкиСобытий.Добавить(ДанныеПодписиДокумента);
				
				//РольСледующейПодписи = ПолучитьРольПодписи(ТекущаяСтрока.Подпись, Организация);
				ТаблицаНакладываемыхПодписей.Удалить(Индекс);
				ВсеБудетПодписано = Ложь;
			ИначеЕсли не лНастройкиПодписи.ОтправлятьНаДоподписание Тогда
				МассивПодписейДляОбработкиСобытий.Добавить(ДанныеПодписиДокумента);
				
				//РольСледующейПодписи = ПолучитьРольПодписи(ТекущаяСтрока.Подпись, Организация);
				ТаблицаНакладываемыхПодписей.Удалить(Индекс);
				ВсеБудетПодписано = Ложь;
			Иначе
				ДанныеПодписиДокумента.ПодписываетсяСейчас = Истина;
				ДанныеПодписиДокумента.Подпись = лНастройкиПодписи.ВыбранаяПодпись;
				МассивПодписейДляОбработкиСобытий.Добавить(ДанныеПодписиДокумента);
				
				Если не ЗначениеЗаполнено(РольСледующейПодписи) Тогда
					//РольСледующейПодписи = ПолучитьРольПодписи(ТекущаяСтрока.Подпись, Организация);
					РольСледующейПодписи = ПолучитьРольПодписи(ДанныеПодписиДокумента.Подпись, Организация);
				КонецЕсли;
				
				//ТекущаяСтрока.Подпись = лНастройкиПодписи.Подпись;
				ТекущаяСтрока.ВыбранаяПодпись = лНастройкиПодписи.ВыбранаяПодпись;
				ТекущаяСтрока.Наименование = лНастройкиПодписи.ВыбранаяПодпись.Наименование;
				
				ТекущаяСтрока.ОтправлятьНаДоподписание = лНастройкиПодписи.ОтправлятьНаДоподписание;
				ТекущаяСтрока.Email1 = лНастройкиПодписи.Email1;
				ТекущаяСтрока.Телефон1 = лНастройкиПодписи.Телефон1;
				
				ТекущаяСтрока.ДРФОПодписанта = лНастройкиПодписи.ДРФО;
				
				Индекс = Индекс + 1;
			КонецЕсли;
		Иначе
			МассивПодписейДляОбработкиСобытий.Добавить(ДанныеПодписиДокумента);
			ТаблицаНакладываемыхПодписей.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	Возврат ВсеБудетПодписано;
КонецФункции 


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ЭлектронныйДокументПолностьюПодписан(ЭлектронныйДокумент) Экспорт
	
	лНеналоженнаяПодпись = ЭлектронныйДокумент.Подписи.Найти(Ложь, "Подписано");
	
	Возврат лНеналоженнаяПодпись = Неопределено;
	
КонецФункции // ЭлектронныйДокументПолностьюПодписан()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьОрганизациюEDIИзДанныхДокумента(ДанныеДокумента)
	Перем лРезультат;
	
	лЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
	
	Если ЗначениеЗаполнено(лЭлектронныйДокумент) Тогда
		
		Если ЗначениеЗаполнено(лЭлектронныйДокумент.Организация) Тогда
			
			лРезультат = лЭлектронныйДокумент.Организация;
			
		Иначе
			
			лВидЭлектронногоДокумента = лЭлектронныйДокумент.ВидЭлектронногоДокумента;
			
			Если ЗначениеЗаполнено(лВидЭлектронногоДокумента) Тогда
				
				Если ЗначениеЗаполнено(лВидЭлектронногоДокумента.Владелец) Тогда
					
					лРезультат = лВидЭлектронногоДокумента.Владелец
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		лВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
		
		Если ЗначениеЗаполнено(лВидЭлектронногоДокумента) Тогда
			
			Если ЗначениеЗаполнено(лВидЭлектронногоДокумента.Владелец) Тогда
				
				лРезультат = лВидЭлектронногоДокумента.Владелец
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат лРезультат
	
КонецФункции // ПолучитьОрганизациюEDIИзДанныхДокумента()

Процедура ДобавитьЗначениеРеквизитаКИмениФайла(ИмяФайла, Реквизит, Длина)
	ЗначениеРеквизита = "0000000000000000000000000000";
	Если ТипЗнч(Реквизит) = Тип("Число") Тогда
		ЗначениеРеквизита = ЗначениеРеквизита + Формат(Реквизит, "ЧГ=0");
	ИначеЕсли ТипЗнч(Реквизит) <> Неопределено Тогда
		ЗначениеРеквизита = ЗначениеРеквизита + СокрЛП(Реквизит);
	КонецЕсли;
	ИмяФайла = ИмяФайла + Прав(ЗначениеРеквизита, Длина);
КонецПроцедуры

Процедура ДобавитьЗначениеРеквизитаКИмениФайлаЭлементСтруктуры(ИмяФайла, Источник, Ключ, Длина)
	Значение = Источник.Получить(Ключ);
	ДобавитьЗначениеРеквизитаКИмениФайла(ИмяФайла, Значение, Длина);
КонецПроцедуры

Функция ПолучитьИмяФайлаНалоговогоДокумента(ВидЭлектронногоДокумента, СодержимоеЭлектронногоДокумента, ЖурналОперации)
	лРезультатРазборкиТелаДокументаВСоответствиеСДанными = РазобратьXMLПредставлениеЭлектронногоДокументаВСоответствиеСДанными(СодержимоеЭлектронногоДокумента, ЖурналОперации);
	Если лРезультатРазборкиТелаДокументаВСоответствиеСДанными = Неопределено Тогда
		Возврат "";
	Иначе
		РеквизитыШапкиДокумента = лРезультатРазборкиТелаДокументаВСоответствиеСДанными.Таблица0ПерваяСтрока;
					
		Если ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная")
			Или ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
			ИмяФайла = ПолучитьИмяФайлаНалоговогоДокументаПоРеквизитамШапки(РеквизитыШапкиДокумента);
			Возврат ИмяФайла;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПолучитьИмяФайлаНалоговогоДокументаПоРеквизитамШапки(РеквизитыШапкиДокумента) Экспорт
	ИмяФайла = "";
	ДобавитьЗначениеРеквизитаКИмениФайла(ИмяФайла, РеквизитыШапкиДокумента.Получить("C_REG"), 2);
	ДобавитьЗначениеРеквизитаКИмениФайла(ИмяФайла, РеквизитыШапкиДокумента.Получить("C_RAJ"), 2);
	TIN = РеквизитыШапкиДокумента.Получить("TIN");
	Если TIN = Неопределено Тогда
		TIN = РеквизитыШапкиДокумента.Получить("HTIN");
	КонецЕсли;
	ДобавитьЗначениеРеквизитаКИмениФайла(ИмяФайла, TIN, 10);
	ДобавитьЗначениеРеквизитаКИмениФайла(ИмяФайла, РеквизитыШапкиДокумента.Получить("C_DOC"), 3);
	ДобавитьЗначениеРеквизитаКИмениФайла(ИмяФайла, РеквизитыШапкиДокумента.Получить("C_DOC_SUB"), 3);
	ДобавитьЗначениеРеквизитаКИмениФайла(ИмяФайла, РеквизитыШапкиДокумента.Получить("C_DOC_VER"), 2);
	ДобавитьЗначениеРеквизитаКИмениФайла(ИмяФайла, РеквизитыШапкиДокумента.Получить("C_DOC_STAN"), 1);
	ДобавитьЗначениеРеквизитаКИмениФайла(ИмяФайла, РеквизитыШапкиДокумента.Получить("C_DOC_TYPE"), 2);
	ДобавитьЗначениеРеквизитаКИмениФайла(ИмяФайла, РеквизитыШапкиДокумента.Получить("C_DOC_CNT"), 7);
	ДобавитьЗначениеРеквизитаКИмениФайла(ИмяФайла, РеквизитыШапкиДокумента.Получить("PERIOD_TYPE"), 1);
	ДобавитьЗначениеРеквизитаКИмениФайла(ИмяФайла, РеквизитыШапкиДокумента.Получить("PERIOD_MONTH"), 2);
	ДобавитьЗначениеРеквизитаКИмениФайла(ИмяФайла, РеквизитыШапкиДокумента.Получить("PERIOD_YEAR"), 4);
	ДобавитьЗначениеРеквизитаКИмениФайла(ИмяФайла, РеквизитыШапкиДокумента.Получить("C_STI_ORIG"), 4);
	ИмяФайла = ИмяФайла + ".XML";
	Возврат ИмяФайла;
КонецФункции

Процедура СохранитьДанныеЭлектронныхДокументов(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоУспешноОбработаных) Экспорт
	ЖурналОперации                     = "";//ДополнительныеПараметры.ЖурналОперации;	
	
	Для Каждого ДанныеДокумента Из ТаблицаДанныхДокументов Цикл
		ОчищатьИмяФайлаДФС = Ложь;
		ОчищатьМаршрут = Ложь;
		ВложениеДокументаФайл1 = Неопределено;
		ВложениеДокументаФайл2 = Неопределено;
		ВложениеДокументаФайл3 = Неопределено;
		//Если ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
		//	Продолжить;
		//ИначеЕсли ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
		//	Продолжить;
		//ИначеЕсли ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент")
		//или ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента")
		//или ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями") Тогда
		Если Истина Тогда
		
			Если ДанныеДокумента.ГдеСоздан <> ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
				Продолжить;
			ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С")
				или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПустаяСсылка") Тогда
				
				ЭлектронныйДокумент = ПредопределенноеЗначение("Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка");
				ДатаСозданияДокумента = ДанныеДокумента.ДатаСозданияДокумента;
				ТелоДокумента = ДанныеДокумента.ТелоДокумента;
				ИзображениеДокумента = ДанныеДокумента.ИзображениеДокумента;
				ВложениеДокумента1 = ДанныеДокумента.ВложениеДокумента1;
				ВложениеДокументаБезПодписи1 = ДанныеДокумента.ВложениеДокумента1;
				ИмяФайлаВложениеДокумента1 = ДанныеДокумента.ИмяФайлаВложениеДокумента1;
				Попытка
					ВложениеДокументаФайл1 = ДанныеДокумента.ВложениеДокументаФайл1;
				Исключение
					ВложениеДокументаФайл1 = Неопределено;
				КонецПопытки;
				ВложениеДокумента2 = ДанныеДокумента.ВложениеДокумента2;
				ВложениеДокументаБезПодписи2 = ДанныеДокумента.ВложениеДокумента2;
				ИмяФайлаВложениеДокумента2 = ДанныеДокумента.ИмяФайлаВложениеДокумента2;
				Попытка
					ВложениеДокументаФайл2 = ДанныеДокумента.ВложениеДокументаФайл2;
				Исключение
					ВложениеДокументаФайл2 = Неопределено;
				КонецПопытки;
				ВложениеДокумента3 = ДанныеДокумента.ВложениеДокумента3;
				ВложениеДокументаБезПодписи3 = ДанныеДокумента.ВложениеДокумента3;
				ИмяФайлаВложениеДокумента3 = ДанныеДокумента.ИмяФайлаВложениеДокумента3;
				Попытка
					ВложениеДокументаФайл3 = ДанныеДокумента.ВложениеДокументаФайл3;
				Исключение
					ВложениеДокументаФайл3 = Неопределено;
				КонецПопытки;
				МассивВложенийДокумента4 = ДанныеДокумента.МассивВложенийДокумента4;
				МассивВложенийДокументаБезПодписи4 = ДанныеДокумента.МассивВложенийДокумента4;
				
				ОшибкаПараметровСоздания = "";
				Если не ПроверитьПараметрыСозданияЭлектронногоДокумента(ДанныеДокумента.ПараметрыСозданияДокументов, ОшибкаПараметровСоздания) Тогда
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.Документ1С + ": " + ОшибкаПараметровСоздания);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПараметровСоздания);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					Продолжить;
				КонецЕсли;
			ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан") Тогда
				ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
				
				ДатаСозданияДокумента = ДанныеДокумента.ДатаСозданияДокумента;
				ТелоДокумента = ДанныеДокумента.ТелоДокумента;
				ИзображениеДокумента = ДанныеДокумента.ИзображениеДокумента;
				
				Замечание = "";
				ПолучитьВложенияЭлектронногоДокумента(ЭлектронныйДокумент, ВложениеДокумента1, ИмяФайлаВложениеДокумента1, ВложениеДокумента2, ИмяФайлаВложениеДокумента2, ВложениеДокумента3, ИмяФайлаВложениеДокумента3, МассивВложенийДокумента4, Замечание);
				Если Замечание <> "" Тогда
					ДанныеДокумента.ЕстьЗамечания = Истина;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.Документ1С + ": " + Замечание);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					Продолжить;
				КонецЕсли;
				ОшибкаПараметровСоздания = "";
				Если не ПроверитьПараметрыСозданияЭлектронногоДокумента(ДанныеДокумента.ПараметрыСозданияДокументов, ОшибкаПараметровСоздания) Тогда
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПараметровСоздания);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПараметровСоздания);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		
/////////////////////////////////		
		ДокументБылСоздан = Ложь;
		// Если нет электронного документа, то создать его. Если документ есть, то надо проверить, есть ли в нём таблица реквизитов, если её нет -
		// поместить из поля "РеквизитыЭлектронногоДокумента" структуры "ДанныеДокумента".
		// Зафиксировать событие создания документа.
		ДокументСозданНаОсновании = Неопределено;
		МассивДанныхПоСвязаннымДокументам = Неопределено;
		Если Не ЗначениеЗаполнено(ДанныеДокумента.ЭлектронныйДокумент) Тогда
			лДанныеЗаполненияЭлектронногоДокумента = Новый Структура;
			
			лСтруктураОсновныхДанныхДокумента = Новый Структура;
			лСтруктураОсновныхДанныхДокумента.Вставить("Документ1С",               ДанныеДокумента.Документ1С);
			лСтруктураОсновныхДанныхДокумента.Вставить("ВидЭлектронногоДокумента", ДанныеДокумента.ВидЭлектронногоДокумента);
			лСтруктураОсновныхДанныхДокумента.Вставить("ЭлектронныйДокумент",      ДанныеДокумента.ЭлектронныйДокумент);
			
			//Если ДанныеДокумента.Свойство("ПараметрыДляСозданияЭлектронногоДокумента") Тогда
			Если ЗначениеЗаполнено(ДанныеДокумента.ПараметрыСозданияДокументов) Тогда
				ДозаполнитьПараметрыСозданияЭлектронногоДокумента(ДанныеДокумента.ПараметрыСозданияДокументов, ДанныеДокумента.Организация);
				ПараметрыСозданияДокументов = ДанныеДокумента.ПараметрыСозданияДокументов;
				
				лСтруктураОсновныхДанныхДокумента.Вставить("Дата",           ДанныеДокумента.ПараметрыСозданияДокументов.ДатаЭлектронногоДокумента);
				лСтруктураОсновныхДанныхДокумента.Вставить("Номер",          ДанныеДокумента.ПараметрыСозданияДокументов.НомерЭлектронногоДокумента);
				лСтруктураОсновныхДанныхДокумента.Вставить("ДатаДокумента",  ДанныеДокумента.ПараметрыСозданияДокументов.ДатаЭлектронногоДокумента);
				лСтруктураОсновныхДанныхДокумента.Вставить("НомерДокумента", ДанныеДокумента.ПараметрыСозданияДокументов.НомерЭлектронногоДокумента);
				лСтруктураОсновныхДанныхДокумента.Вставить("СуммаДокумента", ДанныеДокумента.ПараметрыСозданияДокументов.СуммаЭлектронногоДокумента);
				лСтруктураОсновныхДанныхДокумента.Вставить("СуммаНДС",       ДанныеДокумента.ПараметрыСозданияДокументов.СуммаНДСЭлектронногоДокумента);
				лСтруктураОсновныхДанныхДокумента.Вставить("СуммаБезНДС",    ДанныеДокумента.ПараметрыСозданияДокументов.СуммаБезНДСЭлектронногоДокумента);
				лСтруктураОсновныхДанныхДокумента.Вставить("ЕДРПОУВладельцаШаблона",     ДанныеДокумента.ПараметрыСозданияДокументов.ЕДРПОУВладельцаШаблона);
				лСтруктураОсновныхДанныхДокумента.Вставить("ИмяШаблона",     ДанныеДокумента.ПараметрыСозданияДокументов.ИмяШаблона);
				лСтруктураОсновныхДанныхДокумента.Вставить("ВерсияШаблона",     ДанныеДокумента.ПараметрыСозданияДокументов.ВерсияШаблона);
				лСтруктураОсновныхДанныхДокумента.Вставить("ВхИсх",          ДанныеДокумента.ПараметрыСозданияДокументов.ВхИсх);
				
				лСтруктураОсновныхДанныхДокумента.Вставить("ГдеСоздан", ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе"));
				лСтруктураОсновныхДанныхДокумента.Вставить("ИдентификаторДокумента", ДанныеДокумента.ПараметрыСозданияДокументов.DocId);
				лСтруктураОсновныхДанныхДокумента.Вставить("DocId", ДанныеДокумента.ПараметрыСозданияДокументов.DocId);
				лСтруктураОсновныхДанныхДокумента.Вставить("ИдентификаторДокументаВБазеДанныхКонтрагента", ДанныеДокумента.ПараметрыСозданияДокументов.OutId);
				лСтруктураОсновныхДанныхДокумента.Вставить("OutId", ДанныеДокумента.ПараметрыСозданияДокументов.OutId);
				лСтруктураОсновныхДанныхДокумента.Вставить("NOTATION", ДанныеДокумента.ПараметрыСозданияДокументов.NOTATION);
				лПоДаннымХранилищаРеквизитов = Неопределено;
				Если ДанныеДокумента.ПараметрыСозданияДокументов.Свойство("ПоДаннымХранилищаРеквизитов", лПоДаннымХранилищаРеквизитов) Тогда
					лСтруктураОсновныхДанныхДокумента.Вставить("ПоДаннымХранилищаРеквизитов", лПоДаннымХранилищаРеквизитов);
				КонецЕсли;
				
				лСтруктураОсновныхДанныхДокумента.Вставить("ИмяФайлаДФС", ДанныеДокумента.ПараметрыСозданияДокументов.ИмяФайлаДФС);
				лСтруктураОсновныхДанныхДокумента.Вставить("ИННПродавца", ДанныеДокумента.ПараметрыСозданияДокументов.ИННПродавца);
				лСтруктураОсновныхДанныхДокумента.Вставить("КодФилиалаПродавца", ДанныеДокумента.ПараметрыСозданияДокументов.КодФилиалаПродавца);
				лСтруктураОсновныхДанныхДокумента.Вставить("ИННПокупателя", ДанныеДокумента.ПараметрыСозданияДокументов.ИННПокупателя);
				лСтруктураОсновныхДанныхДокумента.Вставить("КодФилиалаПокупателя", ДанныеДокумента.ПараметрыСозданияДокументов.КодФилиалаПокупателя);
				лСтруктураОсновныхДанныхДокумента.Вставить("РегистрируетсяВЕРННПокупателем", ДанныеДокумента.ПараметрыСозданияДокументов.РегистрируетсяВЕРННПокупателем);
				
				лДокументСозданНаОсновании = Неопределено;
				Если ПараметрыСозданияДокументов.Свойство("ДокументСозданНаОсновании", лДокументСозданНаОсновании) Тогда
					ДокументСозданНаОсновании = лДокументСозданНаОсновании;
				КонецЕсли;
				лМассивДанныхПоСвязаннымДокументам = Неопределено;
				Если ПараметрыСозданияДокументов.Свойство("МассивДанныхПоСвязаннымДокументам", лМассивДанныхПоСвязаннымДокументам) Тогда
					МассивДанныхПоСвязаннымДокументам = лМассивДанныхПоСвязаннымДокументам;
				КонецЕсли;
				лСтруктураОсновныхДанныхДокумента.Вставить("ЕДРПОУКонтрагента",        ДанныеДокумента.ПараметрыСозданияДокументов.ЕДРПОУКонтрагента);
				лСтруктураОсновныхДанныхДокумента.Вставить("ФилиалКонтрагента",        ДанныеДокумента.ПараметрыСозданияДокументов.ФилиалКонтрагента);
			Иначе
				лСтруктураОсновныхДанныхДокумента.Вставить("ПоДаннымХранилищаРеквизитов", Ложь);
				
				лСтруктураДанныхКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеКонтрагентаПоДокументу1С(ДанныеДокумента.Документ1С);
				лСтруктураОсновныхДанныхДокумента.Вставить("ЕДРПОУКонтрагента",        лСтруктураДанныхКонтрагента.ЕДРПОУКонтрагента);
				лСтруктураОсновныхДанныхДокумента.Вставить("ФилиалКонтрагента",        лСтруктураДанныхКонтрагента.ФилиалКонтрагента);
			КонецЕсли;
			
			//Если ДанныеДокумента.Свойство("РеквизитыЭлектронногоДокумента") Тогда
			Если ЗначениеЗаполнено(ДанныеДокумента.СоответствиеЗначенийРеквизитов) Тогда
				лСтруктураОсновныхДанныхДокумента.Вставить("РеквизитыЭлектронногоДокумента", ДанныеДокумента.СоответствиеЗначенийРеквизитов);
			КонецЕсли;
			
			лДанныеЗаполненияЭлектронногоДокумента.Вставить("ОсновныеДанные", лСтруктураОсновныхДанныхДокумента);
			
			лЭлектронныйДокументОбъект = Документы.скEDI_ЭлектронныйДокумент.СоздатьДокумент();
			лЭлектронныйДокументОбъект.Заполнить(лДанныеЗаполненияЭлектронногоДокумента);
			
			ДокументБылСоздан = Истина;
			НомерВерсииСодержания = 1;
		Иначе	
			лЭлектронныйДокументОбъект = ДанныеДокумента.ЭлектронныйДокумент.ПолучитьОбъект();
			
			Если ТаблицаДанныхДокументов.Колонки.Найти("ПараметрыСозданияДокументов") <> Неопределено Тогда
				Если ЗначениеЗаполнено(ДанныеДокумента.ПараметрыСозданияДокументов) Тогда
					ДозаполнитьПараметрыСозданияЭлектронногоДокумента(ДанныеДокумента.ПараметрыСозданияДокументов, ДанныеДокумента.Организация);
					ПараметрыСозданияДокументов = ДанныеДокумента.ПараметрыСозданияДокументов;
					
					лЭлектронныйДокументОбъект.Дата = ДанныеДокумента.ПараметрыСозданияДокументов.ДатаЭлектронногоДокумента;
					лЭлектронныйДокументОбъект.Номер = ДанныеДокумента.ПараметрыСозданияДокументов.НомерЭлектронногоДокумента;
					лЭлектронныйДокументОбъект.ДатаДокумента = ДанныеДокумента.ПараметрыСозданияДокументов.ДатаЭлектронногоДокумента;
					лЭлектронныйДокументОбъект.НомерДокумента = ДанныеДокумента.ПараметрыСозданияДокументов.НомерЭлектронногоДокумента;
					лЭлектронныйДокументОбъект.СуммаДокумента = ДанныеДокумента.ПараметрыСозданияДокументов.СуммаЭлектронногоДокумента;
					лЭлектронныйДокументОбъект.СуммаНДС = ДанныеДокумента.ПараметрыСозданияДокументов.СуммаНДСЭлектронногоДокумента;
					лЭлектронныйДокументОбъект.СуммаБезНДС = ДанныеДокумента.ПараметрыСозданияДокументов.СуммаБезНДСЭлектронногоДокумента;
					лЭлектронныйДокументОбъект.ЕДРПОУВладельцаШаблона = ДанныеДокумента.ПараметрыСозданияДокументов.ЕДРПОУВладельцаШаблона;
					лЭлектронныйДокументОбъект.ИмяШаблона = ДанныеДокумента.ПараметрыСозданияДокументов.ИмяШаблона;
					лЭлектронныйДокументОбъект.ВерсияШаблона = ДанныеДокумента.ПараметрыСозданияДокументов.ВерсияШаблона;
					лЭлектронныйДокументОбъект.ВхИсх = ДанныеДокумента.ПараметрыСозданияДокументов.ВхИсх;
					
					Если лЭлектронныйДокументОбъект.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ПустаяСсылка") Тогда
						Если лЭлектронныйДокументОбъект.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
							лЭлектронныйДокументОбъект.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе");
						ИначеЕсли лЭлектронныйДокументОбъект.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
							лЭлектронныйДокументОбъект.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ПолученОтКонтрагента");
						КонецЕсли;
					КонецЕсли;
					Если лЭлектронныйДокументОбъект.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
						лЭлектронныйДокументОбъект.ИдентификаторДокумента = ДанныеДокумента.ПараметрыСозданияДокументов.DocId;
						лЭлектронныйДокументОбъект.DocId = ДанныеДокумента.ПараметрыСозданияДокументов.DocId;
						лЭлектронныйДокументОбъект.ИдентификаторДокументаВБазеДанныхКонтрагента = ДанныеДокумента.ПараметрыСозданияДокументов.OutId;
						лЭлектронныйДокументОбъект.OutId = ДанныеДокумента.ПараметрыСозданияДокументов.OutId;
						лЭлектронныйДокументОбъект.NOTATION = ДанныеДокумента.ПараметрыСозданияДокументов.NOTATION;
						
						
					ИначеЕсли лЭлектронныйДокументОбъект.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ПолученОтКонтрагента") Тогда
						
					КонецЕсли;
					
					лЭлектронныйДокументОбъект.ИмяФайлаДФС = ДанныеДокумента.ПараметрыСозданияДокументов.ИмяФайлаДФС;
					лЭлектронныйДокументОбъект.ИННПродавца = ДанныеДокумента.ПараметрыСозданияДокументов.ИННПродавца;
					лЭлектронныйДокументОбъект.КодФилиалаПродавца = ДанныеДокумента.ПараметрыСозданияДокументов.КодФилиалаПродавца;
					лЭлектронныйДокументОбъект.ИННПокупателя = ДанныеДокумента.ПараметрыСозданияДокументов.ИННПокупателя;
					лЭлектронныйДокументОбъект.КодФилиалаПокупателя = ДанныеДокумента.ПараметрыСозданияДокументов.КодФилиалаПокупателя;
					лЭлектронныйДокументОбъект.РегистрируетсяВЕРННПокупателем = ДанныеДокумента.ПараметрыСозданияДокументов.РегистрируетсяВЕРННПокупателем;
					
					лЭлектронныйДокументОбъект.ЕДРПОУКонтрагента = ДанныеДокумента.ПараметрыСозданияДокументов.ЕДРПОУКонтрагента;
					лЭлектронныйДокументОбъект.ФилиалКонтрагента = ДанныеДокумента.ПараметрыСозданияДокументов.ФилиалКонтрагента;
					
					лПоДаннымХранилищаРеквизитов = Неопределено;
					Если ДанныеДокумента.ПараметрыСозданияДокументов.Свойство("ПоДаннымХранилищаРеквизитов", лПоДаннымХранилищаРеквизитов) Тогда
						лЭлектронныйДокументОбъект.ПоДаннымХранилищаРеквизитов = лПоДаннымХранилищаРеквизитов;
					КонецЕсли;
					Если ЗначениеЗаполнено(ДанныеДокумента.СоответствиеЗначенийРеквизитов) Тогда
						лЭлектронныйДокументОбъект.ХранилищеРеквизитовЭлектронногоДокумента = Новый ХранилищеЗначения(ДанныеДокумента.СоответствиеЗначенийРеквизитов);
					КонецЕсли;
					
					лДокументСозданНаОсновании = Неопределено;
					Если ПараметрыСозданияДокументов.Свойство("ДокументСозданНаОсновании", лДокументСозданНаОсновании) Тогда
						ДокументСозданНаОсновании = лДокументСозданНаОсновании;
					КонецЕсли;
					лМассивДанныхПоСвязаннымДокументам = Неопределено;
					Если ПараметрыСозданияДокументов.Свойство("МассивДанныхПоСвязаннымДокументам", лМассивДанныхПоСвязаннымДокументам) Тогда
						МассивДанныхПоСвязаннымДокументам = лМассивДанныхПоСвязаннымДокументам;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		МассивНастроекОтправкаСсылкиНаДокумент = ДанныеДокумента.МассивНастроекОтправкаСсылкиНаДокумент;
		Если ТипЗнч(МассивНастроекОтправкаСсылкиНаДокумент) = Тип("ФиксированныйМассив") или ТипЗнч(МассивНастроекОтправкаСсылкиНаДокумент) = Тип("Массив") Тогда
			лЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент.Очистить();
			Для Каждого СтрокаМассиваНастроекОтправкаСсылкиНаДокумент из МассивНастроекОтправкаСсылкиНаДокумент Цикл
				НоваяСтрокаОтправкаСсылкиНаДокумент = лЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент.Добавить();
				НоваяСтрокаОтправкаСсылкиНаДокумент.ЭлектроннаяПочта = СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта;
				НоваяСтрокаОтправкаСсылкиНаДокумент.Комментарий = СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий;
			КонецЦикла;
		КонецЕсли;
		
		лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан");
		лЭлектронныйДокументОбъект.ПоследняяОперация = ТекущаяДата();
		ЗаписатьЭлектронныйДокументСПредварительнымПоискомСвязаных(лЭлектронныйДокументОбъект, ДанныеДокумента.ВидЭлектронногоДокумента, ДанныеДокумента.ВидЭлектронногоДокумента.Владелец, ДокументСозданНаОсновании);
		ПрименитьМассивДанныхПоСвязаннымДокументам(лЭлектронныйДокументОбъект.Ссылка, МассивДанныхПоСвязаннымДокументам);
		
		Если ДокументБылСоздан Тогда
			НомерФайла = 1;
			Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента1) Тогда
				СохранитьВложениеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка, НомерФайла, ВложениеДокументаБезПодписи1, ИмяФайлаВложениеДокумента1, ВложениеДокументаФайл1);
				НомерФайла = НомерФайла + 1;
			КонецЕсли;
			Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента2) Тогда
				СохранитьВложениеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка, НомерФайла, ВложениеДокументаБезПодписи2, ИмяФайлаВложениеДокумента2, ВложениеДокументаФайл2);
				НомерФайла = НомерФайла + 1;
			КонецЕсли;
			Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента3) Тогда
				СохранитьВложениеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка, НомерФайла, ВложениеДокументаБезПодписи3, ИмяФайлаВложениеДокумента3, ВложениеДокументаФайл3);
				НомерФайла = НомерФайла + 1;
			КонецЕсли;
			Если ТипЗнч(МассивВложенийДокументаБезПодписи4) = Тип("Массив") или ТипЗнч(МассивВложенийДокументаБезПодписи4) = Тип("ФиксированныйМассив") Тогда
				Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокументаБезПодписи4 Цикл
					Попытка
						ВложениеДокументаФайл = ЭлементМассиваВложенийДокумента4.ВложениеДокументаФайл;
					Исключение
						ВложениеДокументаФайл = Неопределено;
					КонецПопытки;
					СохранитьВложениеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка, НомерФайла, ЭлементМассиваВложенийДокумента4.ВложениеДокумента, ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента, ВложениеДокументаФайл);
					НомерФайла = НомерФайла + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
		ДанныеДокумента.ЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
		ДанныеДокумента.Состояние = лЭлектронныйДокументОбъект.Состояние;
		Если ДокументБылСоздан Тогда
			Событие = Перечисления.скEDI_СобытияЭлектронныхДокументов.Создание;
		Иначе
			Событие = Перечисления.скEDI_СобытияЭлектронныхДокументов.Сохранение;
		КонецЕсли;
		//ЗафиксироватьСобытиеЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент, Событие, , ДатаСозданияДокумента);
		ЗафиксироватьСобытиеЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент, Событие);
	КонецЦикла;

	// Обновление журнала операций.
	Если ЖурналОперации <> "" Тогда
		Если ДополнительныеПараметры.ЖурналОперации = "" Тогда
			ДополнительныеПараметры.ЖурналОперации = ЖурналОперации;
		Иначе
			ДополнительныеПараметры.ЖурналОперации = ДополнительныеПараметры.ЖурналОперации + Символы.ПС + ЖурналОперации;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СнятьПодписиСЭлектронныхДокументов(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоУспешноОбработаных) Экспорт
	ЖурналОперации                     = "";//ДополнительныеПараметры.ЖурналОперации;	
	
	Для Каждого ДанныеДокумента Из ТаблицаДанныхДокументов Цикл
		МаксимальныйНомерВерсии = Неопределено;
		НовоеСостояние = Неопределено;
		ОчищатьИмяФайлаДФС = Ложь;
		ОчищатьМаршрут = Ложь;
		УдалятьСодержимое = Ложь;
		УдалятьКвитанцииГотовится = Ложь;
		Если ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
			Если ДанныеДокумента.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично")
					Или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьБухгалтеру")
					Или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьДиректору")
					Или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьПечатью")
					Или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан")
					Тогда
					
					Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
						НовоеСостояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан");
					Иначе
						Продолжить;
					КонецЕсли;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					ОчищатьИмяФайлаДФС = Истина;
					УдалятьСодержимое = Истина;
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
					Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично")
						Или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьБухгалтеру")
						Или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьДиректору")
						Или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьПечатью")
						Или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан")
						Тогда
						
						ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
						УдалятьКвитанцииГотовится = Истина;
						НовоеСостояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Получен");
						////ОчищатьМаршрут = Истина;
						//Запрос = Новый Запрос;
						//Запрос.Текст = "ВЫБРАТЬ
						//               |	МАКСИМУМ(скEDI_СодержимоеЭлектронныхДокументов.НомерВерсии) КАК НомерВерсии
						//               |ИЗ
						//               |	РегистрСведений.скEDI_СодержимоеЭлектронныхДокументов КАК скEDI_СодержимоеЭлектронныхДокументов
						//               |ГДЕ
						//               |	скEDI_СодержимоеЭлектронныхДокументов.ЭлектронныйДокумент = &ЭлектронныйДокумент
						//               |	И (скEDI_СодержимоеЭлектронныхДокументов.ПолученоОтКонтрагента
						//               |			ИЛИ скEDI_СодержимоеЭлектронныхДокументов.ДокументДФС)";
						//Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
						//ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
						//Если ВыборкаРезультатаЗапроса.Следующий() Тогда
						//	МаксимальныйНомерВерсии = ВыборкаРезультатаЗапроса.НомерВерсии;
						//	Если ТипЗнч(МаксимальныйНомерВерсии) = Тип("Число") Тогда
						//		Если МаксимальныйНомерВерсии >= 1 Тогда
						//			НовоеСостояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Получен");
						//		Иначе
						//			Продолжить;
						//		КонецЕсли;
						//	Иначе
						//		Продолжить;
						//	КонецЕсли;
						//Иначе
						//	Продолжить;
						//КонецЕсли;
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					Продолжить;
				КонецЕсли;
				//Продолжить;
			КонецЕсли;
		ИначеЕсли ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
			Если ДанныеДокумента.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично")
					Или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьБухгалтеру")
					Или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьДиректору")
					Или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьПечатью")
					Или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан")
					Тогда
					
					Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
						НовоеСостояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан");
					Иначе
						Продолжить;
					КонецЕсли;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					ОчищатьИмяФайлаДФС = Истина;
					УдалятьСодержимое = Истина;
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
					Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично")
						Или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьБухгалтеру")
						Или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьДиректору")
						Или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьПечатью")
						Или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан")
						Тогда
						
						ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
						УдалятьКвитанцииГотовится = Истина;
						НовоеСостояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Получен");
						//ОчищатьМаршрут = Истина;
						//Запрос = Новый Запрос;
						//Запрос.Текст = "ВЫБРАТЬ
						//               |	МАКСИМУМ(скEDI_СодержимоеЭлектронныхДокументов.НомерВерсии) КАК НомерВерсии
						//               |ИЗ
						//               |	РегистрСведений.скEDI_СодержимоеЭлектронныхДокументов КАК скEDI_СодержимоеЭлектронныхДокументов
						//               |ГДЕ
						//               |	скEDI_СодержимоеЭлектронныхДокументов.ЭлектронныйДокумент = &ЭлектронныйДокумент
						//               |	И (скEDI_СодержимоеЭлектронныхДокументов.ПолученоОтКонтрагента
						//               |			ИЛИ скEDI_СодержимоеЭлектронныхДокументов.ДокументДФС)";
						//Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
						//ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
						//Если ВыборкаРезультатаЗапроса.Следующий() Тогда
						//	МаксимальныйНомерВерсии = ВыборкаРезультатаЗапроса.НомерВерсии;
						//	Если ТипЗнч(МаксимальныйНомерВерсии) = Тип("Число") Тогда
						//		Если МаксимальныйНомерВерсии >= 1 Тогда
						//			НовоеСостояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Получен");
						//		Иначе
						//			Продолжить;
						//		КонецЕсли;
						//	Иначе
						//		Продолжить;
						//	КонецЕсли;
						//Иначе
						//	Продолжить;
						//КонецЕсли;
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					Продолжить;
				КонецЕсли;
				//Продолжить;
			КонецЕсли;
		ИначеЕсли ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент")
		или ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента")
		или ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями") Тогда
			//Если ДанныеДокумента.ВхИсх <> ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
			Если ДанныеДокумента.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично")
					Или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьБухгалтеру")
					Или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьДиректору")
					Или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьПечатью")
					Или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан")
					Тогда
					
					//Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
					//	НовоеСостояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Получен");
					//ИначеЕсли ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
						НовоеСостояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан");
					//Иначе
					//	Продолжить;
					//КонецЕсли;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					ОчищатьМаршрут = Истина;
					УдалятьСодержимое = Истина;
				Иначе
					Продолжить;
				КонецЕсли;
			ИначеЕсли ДанныеДокумента.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ПолученОтКонтрагента") Тогда
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично")
					Или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьБухгалтеру")
					Или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьДиректору")
					Или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьПечатью")
					Или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан")
					Тогда
					
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					//ОчищатьМаршрут = Истина;
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					               |	МАКСИМУМ(скEDI_СодержимоеЭлектронныхДокументов.НомерВерсии) КАК НомерВерсии
					               |ИЗ
					               |	РегистрСведений.скEDI_СодержимоеЭлектронныхДокументов КАК скEDI_СодержимоеЭлектронныхДокументов
					               |ГДЕ
					               |	скEDI_СодержимоеЭлектронныхДокументов.ЭлектронныйДокумент = &ЭлектронныйДокумент
					               |	И (скEDI_СодержимоеЭлектронныхДокументов.ПолученоОтКонтрагента
					               |			ИЛИ скEDI_СодержимоеЭлектронныхДокументов.ДокументДФС)";
					Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
					ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
					Если ВыборкаРезультатаЗапроса.Следующий() Тогда
						МаксимальныйНомерВерсии = ВыборкаРезультатаЗапроса.НомерВерсии;
						Если ТипЗнч(МаксимальныйНомерВерсии) = Тип("Число") Тогда
							Если МаксимальныйНомерВерсии >= 1 Тогда
								НовоеСостояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Получен");
								УдалятьСодержимое = Истина;
							Иначе
								Продолжить;
							КонецЕсли;
						Иначе
							Продолжить;
						КонецЕсли;
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(НовоеСостояние) Тогда
			КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
			Событие = Перечисления.скEDI_СобытияЭлектронныхДокументов.СнятиеПодписей;
			
			лЭлектронныйДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
			лЭлектронныйДокументОбъект.Подписи.Очистить();
			лЭлектронныйДокументОбъект.Состояние = НовоеСостояние;
			Если ОчищатьИмяФайлаДФС Тогда
				лЭлектронныйДокументОбъект.ИмяФайлаДФС = "";
			КонецЕсли;
			Если ОчищатьМаршрут Тогда
				лЭлектронныйДокументОбъект.Маршрут.Очистить();
			КонецЕсли;
			
			лЭлектронныйДокументОбъект.ПоследняяОперация = ТекущаяДата();
			ЗаписатьЭлектронныйДокументСПредварительнымПоискомСвязаных(лЭлектронныйДокументОбъект, ДанныеДокумента.ВидЭлектронногоДокумента, ДанныеДокумента.ВидЭлектронногоДокумента.Владелец);
			
			Если УдалятьСодержимое Тогда
				Если ЗначениеЗаполнено(МаксимальныйНомерВерсии) Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					               |	скEDI_СодержимоеЭлектронныхДокументов.НомерВерсии КАК НомерВерсии
					               |ИЗ
					               |	РегистрСведений.скEDI_СодержимоеЭлектронныхДокументов КАК скEDI_СодержимоеЭлектронныхДокументов
					               |ГДЕ
					               |	скEDI_СодержимоеЭлектронныхДокументов.ЭлектронныйДокумент = &ЭлектронныйДокумент
					               |	И скEDI_СодержимоеЭлектронныхДокументов.НомерВерсии > &НомерВерсии";
					Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
					Запрос.УстановитьПараметр("НомерВерсии", МаксимальныйНомерВерсии);
					ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
					Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
						СодержимоеЭлектронныхДокументовНаборЗаписей = РегистрыСведений.скEDI_СодержимоеЭлектронныхДокументов.СоздатьНаборЗаписей();
						СодержимоеЭлектронныхДокументовНаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
						СодержимоеЭлектронныхДокументовНаборЗаписей.Отбор.НомерВерсии.Установить(ВыборкаРезультатаЗапроса.НомерВерсии);
						СодержимоеЭлектронныхДокументовНаборЗаписей.Записать(Истина);
					КонецЦикла;
				Иначе
					СодержимоеЭлектронныхДокументовНаборЗаписей = РегистрыСведений.скEDI_СодержимоеЭлектронныхДокументов.СоздатьНаборЗаписей();
					СодержимоеЭлектронныхДокументовНаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
					СодержимоеЭлектронныхДокументовНаборЗаписей.Записать(Истина);
				КонецЕсли;
			КонецЕсли;
			
			Если УдалятьКвитанцииГотовится Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	скEDI_Квитанция.Ссылка,
				               |	скEDI_Квитанция.ТелоКвитанции,
				               |	скEDI_Квитанция.ТекстКвитанции
				               |ИЗ
				               |	Документ.скEDI_Квитанция КАК скEDI_Квитанция
				               |ГДЕ
				               |	скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
				               |	И скEDI_Квитанция.ВхИсх = &ВхИсх
				               |	И НЕ скEDI_Квитанция.ПометкаУдаления
				               |	И скEDI_Квитанция.Готовится";
				Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
				Запрос.УстановитьПараметр("ВхИсх", ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий"));
				ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
				Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
					ДокументОбъект = ВыборкаРезультатаЗапроса.Ссылка.ПолучитьОбъект();
					ДокументОбъект.УстановитьПометкуУдаления(Истина);
				КонецЦикла;
			КонецЕсли;
			
			
			ДатаСнятияПодписей = ТекущаяДата();
			лОписаниеПоСнятиюПодписей = "";
			ЗафиксироватьСобытиеЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент, Событие, лОписаниеПоСнятиюПодписей, ДатаСнятияПодписей);
			
			УстановитьСнятьОтметкуОбработано(ДанныеДокумента.ЭлектронныйДокумент, Ложь);
			
			СобытиеДляЖурнала = НСтр("ru = 'Снято подписи с документа'; uk = 'Знято підписи з документа'") + ": """
			+ лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента.Наименование + """ №" + лЭлектронныйДокументОбъект.НомерДокумента + НСтр("ru = ' от '; uk = ' від '") + Формат(лЭлектронныйДокументОбъект.ДатаДокумента, "ДФ=dd.MM.yyyy");
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, СобытиеДляЖурнала, , Ложь);
		КонецЕсли;
	КонецЦикла;

	// Обновление журнала операций.
	Если ЖурналОперации <> "" Тогда
		Если ДополнительныеПараметры.ЖурналОперации = "" Тогда
			ДополнительныеПараметры.ЖурналОперации = ЖурналОперации;
		Иначе
			ДополнительныеПараметры.ЖурналОперации = ДополнительныеПараметры.ЖурналОперации + Символы.ПС + ЖурналОперации;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция НаименованиеОрганизацииДляОтправки(ОрганизацияEDI)
	Если ЗначениеЗаполнено(ОрганизацияEDI.Организация1С) Тогда
		ДанныеПоОгранизации = скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеПоОгранизации(ОрганизацияEDI.Организация1С);
		Возврат ДанныеПоОгранизации.Наименование;
	Иначе
		Возврат ОрганизацияEDI.Наименование;
	КонецЕсли;
КонецФункции

Функция НаименованиеКонтрагентаДляОтправки(ЕДРПОУ, КодФилиала)
	РеквизитыКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьРеквизитыКонтрагентаПоЕДРПОУ(ЕДРПОУ, КодФилиала, Истина);
	Возврат РеквизитыКонтрагента.Наименование;
КонецФункции

Процедура ОтправитьЭлектронныеДокументы(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоУспешноОбработаных) Экспорт
		
	ЖурналОперации                     = "";//ДополнительныеПараметры.ЖурналОперации;	
	ТаблицаНастроекПодписейШифрования = ДополнительныеПараметры.НастройкиПодписейШифрования;
	ТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ТаблицаНастроекПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписейШифрования, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписейШифрования);
	
	МожноОтправитьТолькоСсылку = Ложь;
	Если ДополнительныеПараметры.Свойство("МожноОтправитьТолькоСсылку") Тогда
		МожноОтправитьТолькоСсылку = ДополнительныеПараметры.МожноОтправитьТолькоСсылку;
	КонецЕсли;
	
	Для Каждого ДанныеДокумента Из ТаблицаДанныхДокументов Цикл
		лОрганизацияEDI = ДанныеДокумента.Организация;//ПолучитьОрганизациюEDIИзДанныхДокумента(ДанныеДокумента);	
		
		НовоеСостояниеЭлектронногоДокумента = Неопределено;
		
		ТелоДокумента = "";
		ИзображениеДокумента = "";
		ВложениеДокумента1 = "";
		ИмяФайлаВложениеДокумента1 = "";
		ВложениеДокумента2 = "";
		ИмяФайлаВложениеДокумента2 = "";
		ВложениеДокумента3 = "";
		ИмяФайлаВложениеДокумента3 = "";
		МассивВложенийДокумента4 = Неопределено;
		МассивОтправкаСсылкиНаДокумент = Неопределено;
		
		ПараметрыСобытий = Неопределено;
		
		НомерСтрокиСодержания = -1;
		ВариантОтправки = 0;
		СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ПустаяСсылка");
		СобытиеОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.ПустаяСсылка");
		СобытиеОтправкиОписание = "";
		// 1 - ПервичныйДокумент Контрагенту
		// 2 - НалоговыйДокумент Контрагенту на согласование
		// 3 - НалоговыйДокумент Контрагенту для регистрации
		// 4 - НалоговыйДокумент Контрагенту после регистрации в ГНС
		// 5 - НалоговыйДокумент Контрагенту после отклонения в ГНС
		// 6 - НалоговыйДокумент Контрагенту остановки регистрации в ГНС
		ОтражатьTSPСтатус = Истина;
		ОтражатьOCSPСтатус = Истина;
		OnlyHref = Ложь;
		
		Если ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
			ОтражатьTSPСтатус = Ложь;
			ОтражатьOCSPСтатус = Ложь;
			Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан") Тогда
					ВариантОтправки = 2;
					СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					
					НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
				ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС") Тогда
					ВариантОтправки = 4;
					СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, Истина, , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ЗначениеЗаполнено(ОшибкаПолученияСодержимогоЭлДок) Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , Истина, ОшибкаПолученияСодержимогоЭлДок);
					КонецЕсли;
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					Иначе
						НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
						ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
						ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
						ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
						ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
						ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
						ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
						ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
						ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
						МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
						
						НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
					КонецЕсли;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
		ИначеЕсли ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
			ОтражатьTSPСтатус = Ложь;
			ОтражатьOCSPСтатус = Ложь;
			Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан") Тогда
					Если ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
						СпособОтправки = лОрганизацияEDI.СпособОтправкиНалоговыхДокументовКонтрагенту;
						ВариантОтправки = 3;
						
						НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленКонтрагентуДляРегистрацииВЕРПН");
					Иначе
						СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
						ВариантОтправки = 2;
						
						НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
					КонецЕсли;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
				ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС") Тогда
					Если ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
						Продолжить;
					Иначе
						ВариантОтправки = 4;
					КонецЕсли;
					СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
					//СпособОтправки = лОрганизацияEDI.СпособОтправкиНалоговыхДокументовКонтрагенту;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, Истина, , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ЗначениеЗаполнено(ОшибкаПолученияСодержимогоЭлДок) Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , Истина, ОшибкаПолученияСодержимогоЭлДок);
					КонецЕсли;
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					Иначе
						НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
						ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
						ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
						ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
						ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
						ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
						ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
						ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
						ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
						МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
						
						НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
					КонецЕсли;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
				Иначе
					Продолжить;
				КонецЕсли;
			ИначеЕсли ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС") Тогда
					Если ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
						ВариантОтправки = 4;
					Иначе
						Продолжить;
					КонецЕсли;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа (полученое от Контрагента).'; uk = 'Нема вмісту Електронного документу (отримане від Контрагента).'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					СпособОтправки = СодержаниеЭлектронногоДокумента.ПолученоОтКонтрагентаСПомощью;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, Истина, , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ЗначениеЗаполнено(ОшибкаПолученияСодержимогоЭлДок) Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , Истина, ОшибкаПолученияСодержимогоЭлДок);
					КонецЕсли;
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа (полученое от Контрагента).'; uk = 'Нема вмісту Електронного документу (отримане від Контрагента).'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
					НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
				ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонениеОтДФС") Тогда
					Если ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
						ВариантОтправки = 5;
					Иначе
						Продолжить;
					КонецЕсли;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокументаКонтрагента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокументаКонтрагента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа (полученое от Контрагента).'; uk = 'Нема вмісту Електронного документу (отримане від Контрагента).'");
						КонецЕсли;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Продолжить;
					КонецЕсли;
					СпособОтправки = СодержаниеЭлектронногоДокументаКонтрагента.ПолученоОтКонтрагентаСПомощью;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, Истина, , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ЗначениеЗаполнено(ОшибкаПолученияСодержимогоЭлДок) Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						СодержаниеЭлектронногоДокумента = СодержаниеЭлектронногоДокументаКонтрагента;
					КонецЕсли;
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
					НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
				ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС_РегистрацияОстановлена") Тогда
					Если ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
						ВариантОтправки = 6;
					Иначе
						Продолжить;
					КонецЕсли;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокументаКонтрагента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокументаКонтрагента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа (полученое от Контрагента).'; uk = 'Нема вмісту Електронного документу (отримане від Контрагента).'");
						КонецЕсли;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Продолжить;
					КонецЕсли;
					СпособОтправки = СодержаниеЭлектронногоДокументаКонтрагента.ПолученоОтКонтрагентаСПомощью;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, Истина, , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ЗначениеЗаполнено(ОшибкаПолученияСодержимогоЭлДок) Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						СодержаниеЭлектронногоДокумента = СодержаниеЭлектронногоДокументаКонтрагента;
					КонецЕсли;
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
					НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
		ИначеЕсли ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент")
		или ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента")
		или ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями") Тогда
			ОтражатьTSPСтатус = Истина;
			ОтражатьOCSPСтатус = Истина;
			Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий")
			или ДанныеДокумента.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан") Тогда
					ВариантОтправки = 1;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Продолжить;
					КонецЕсли;
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
					НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
					
					СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		лНастройкиПодписиШифрованияДляТекущейОрганизации = ТаблицаНастроекПодписейШифрования.Найти(лОрганизацияEDI, "ОрганизацияEDI");
		
		Если лНастройкиПодписиШифрованияДляТекущейОрганизации = Неопределено Тогда		
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не найдены настройки подписи шифрования Организации: '; uk = 'Не знайдені підписи шифрування по Організації: '") + лОрганизацияEDI + ".");
			ДанныеДокумента.ЕстьОшибки = Истина;			
		КонецЕсли;
		
		Если СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ПустаяСсылка") Тогда
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не указан способ отправки'; uk = 'Не вказано спосіб відправки'") + ": " + лОрганизацияEDI + ".");
			ДанныеДокумента.ЕстьОшибки = Истина;			
		КонецЕсли;
		
		// 2 - НалоговыйДокумент Контрагенту на согласование
		// 3 - НалоговыйДокумент Контрагенту для регистрации
		
		
		Если НЕ ДанныеДокумента.ЕстьОшибки Тогда
			лИмяФайла = "";
			лИмяФайлаКвитанции = "";
			лИмяФайлаДФС = "";
			лСсылкаНаДокумент = "";
			лDocVer = 0;
			Ошибка28 = Ложь;
			ОбновитьМаршрут = Ложь;
			ОбновитьМаршрутНомерВМаршруте = -1;
			
			Отказ = Ложь;
			Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
				тОрганизация = ПараметрыСобытий.Организация;
				тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
				тВхИсх = ПараметрыСобытий.ВхИсх;
				тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
				тЭлектронныйДокумент = ПараметрыСобытий.ЭлектронныйДокумент;
				тСостояние = ПараметрыСобытий.Состояние;
				тДокумент1С = ПараметрыСобытий.Документ1С;
				Если ТипЗнч(ПараметрыСобытий.МассивВложений) = Тип("Массив") Тогда
					тМассивВложений = ПараметрыСобытий.МассивВложений;
				Иначе
					Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
						тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
					Иначе
						тМассивВложений = Новый Массив;
					КонецЕсли;
					ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
				КонецЕсли;
				тМассивПодписейДляОбработкиСобытий = ПолучитьМассивПодписейДляОбработкиСобытий(тЭлектронныйДокумент);
				ПараметрыСобытий.Вставить("МассивПодписей", тМассивПодписейДляОбработкиСобытий);
				ПричинаОтказа = "";
				Если не ОбработатьСобытие_ПередОтправкой(тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписейДляОбработкиСобытий, тДокумент1С, тМассивВложений, ПричинаОтказа) Тогда
					Отказ = Истина;
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ПричинаОтказа);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ПричинаОтказа);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
				КонецЕсли;
			КонецЕсли;
			
			Если Отказ Тогда
				Продолжить;
			ИначеЕсли ВариантОтправки = 1 Тогда // 1 - ПервичныйДокумент Контрагенту
				Если СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО") Тогда
					лПараметрыОтправкиДокумента = Новый Структура;
					лПараметрыОтправкиДокумента.Вставить("Edrpou",    лОрганизацияEDI.Код);
					лПараметрыОтправкиДокумента.Вставить("Dept",      лОрганизацияEDI.Филиал);
					лПараметрыОтправкиДокумента.Вставить("PrgId",     лОрганизацияEDI.ИдентификаторПрограммы);
					ЕДРПОУКонтрагента = ЭлектронныйДокумент.ЕДРПОУКонтрагента;
					ФилиалКонтрагента = ЭлектронныйДокумент.ФилиалКонтрагента;
					лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
					лПараметрыОтправкиДокумента.Вставить("RcvDept",   ФилиалКонтрагента);
					лПараметрыОтправкиДокумента.Вставить("Name",      НаименованиеОрганизацииДляОтправки(лОрганизацияEDI));
					
					СтрокаПодключенияEDI = Неопределено;
					СерверEDI = Неопределено;
					ПортEDI = Неопределено;
					ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиДокумента, лНастройкиПодписиШифрованияДляТекущейОрганизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					//лПараметрыОтправкиДокумента.Вставить("Cert",      лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСертификата);
					//лПараметрыОтправкиДокумента.Вставить("Key",       лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСекретногоКлюча);
					//лПараметрыОтправкиДокумента.Вставить("Password",  лНастройкиПодписиШифрованияДляТекущейОрганизации.ПарольСекретногоКлюча);
					лПараметрыОтправкиДокумента.Вставить("MedocBody", ТелоДокумента);
					
					Если ЗначениеЗаполнено(ИзображениеДокумента) Тогда				
						лПараметрыПередаваемогоPDFПредставленияДокумента = Новый Структура;
						лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("FileName", "Form.pdf");
						лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("Body", ИзображениеДокумента);
						лПараметрыОтправкиДокумента.Вставить("ImageBody", лПараметрыПередаваемогоPDFПредставленияДокумента);
					КонецЕсли;
					
					МассивВложений = Новый Массив;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента1) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента1, ВложениеДокумента1));
					КонецЕсли;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента2) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента2, ВложениеДокумента2));
					КонецЕсли;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента3) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента3, ВложениеДокумента3));
					КонецЕсли;
					Если ТипЗнч(МассивВложенийДокумента4) = Тип("Массив") или ТипЗнч(МассивВложенийДокумента4) = Тип("ФиксированныйМассив") Тогда
						Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокумента4 Цикл
							МассивВложений.Добавить(Новый Структура("FileName,Body", ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента, ЭлементМассиваВложенийДокумента4.ВложениеДокумента));
						КонецЦикла;
					КонецЕсли;
					
					Если МассивВложений.Количество() > 0 Тогда
						лПараметрыОтправкиДокумента.Вставить("AttachmentBody", МассивВложений);
					КонецЕсли;
					
					лПараметрыОтправкиДокумента.Вставить("SignImages", ПолучитьМассивДанныеПоПодписям(ДанныеДокумента.ЭлектронныйДокумент));
					
					Если ЭлектронныйДокумент.IsMultisided Тогда
						лПараметрыОтправкиДокумента.Вставить("IsMultisided", Истина);
						ОбновитьМаршрут = Истина;
						ОбновитьМаршрутНомерВМаршруте = ЭлектронныйДокумент.RoutePosition + 1;
						
						Если ЭлектронныйДокумент.Маршрут.Количество() >= 2 Тогда
							СледующийЭлементМаршрута = ЭлектронныйДокумент.Маршрут.Получить(1);
							ЕДРПОУКонтрагента = СледующийЭлементМаршрута.ЕДРПОУКонтрагента;
							ФилиалКонтрагента = СледующийЭлементМаршрута.ФилиалКонтрагента;
							лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
							лПараметрыОтправкиДокумента.Вставить("RcvDept",   ФилиалКонтрагента);
						КонецЕсли;
					КонецЕсли;
					лПараметрыОтправкиДокумента.Вставить("RcvName", НаименованиеКонтрагентаДляОтправки(ЕДРПОУКонтрагента, ФилиалКонтрагента));
					
					МассивNotifyContacts = Неопределено;
					МассивОтправкаСсылкиНаДокумент = Новый Массив;
					МассивНастроекОтправкаСсылкиНаДокумент = ДанныеДокумента.МассивНастроекОтправкаСсылкиНаДокумент;
					Если ТипЗнч(МассивНастроекОтправкаСсылкиНаДокумент) = Тип("ФиксированныйМассив") или ТипЗнч(МассивНастроекОтправкаСсылкиНаДокумент) = Тип("Массив") Тогда
						Для Каждого СтрокаМассиваНастроекОтправкаСсылкиНаДокумент из МассивНастроекОтправкаСсылкиНаДокумент Цикл
							ЭлементМассиваОтправкаСсылкиНаДокумент = Новый Структура;
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("ЭлектроннаяПочта", СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("Комментарий", СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий);
							МассивОтправкаСсылкиНаДокумент.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент);
						КонецЦикла;
					Иначе
						СписокНастроеныхАдресов = Новый СписокЗначений;
						Для Каждого СтрокаОтправкаСсылкиНаДокумент из ЭлектронныйДокумент.ОтправкаСсылкиНаДокумент Цикл
							ЭлементМассиваОтправкаСсылкиНаДокумент = Новый Структура;
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("ЭлектроннаяПочта", СтрокаОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("Комментарий", СтрокаОтправкаСсылкиНаДокумент.Комментарий);
							МассивОтправкаСсылкиНаДокумент.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент);
							
							СписокНастроеныхАдресов.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
						КонецЦикла;
						Если ЗначениеЗаполнено(ЕДРПОУКонтрагента) Тогда
							Запрос = Новый Запрос;
							Запрос.Текст = "ВЫБРАТЬ
							               |	скEDI_КонтактныеДанныеКонтрагентов.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
							               |	скEDI_КонтактныеДанныеКонтрагентов.Комментарий КАК Комментарий
							               |ИЗ
							               |	РегистрСведений.скEDI_КонтактныеДанныеКонтрагентов КАК скEDI_КонтактныеДанныеКонтрагентов
							               |ГДЕ
							               |	скEDI_КонтактныеДанныеКонтрагентов.ЕДРПОУКонтрагента = &ЕДРПОУКонтрагента
							               |	И НЕ скEDI_КонтактныеДанныеКонтрагентов.ЭлектроннаяПочта В (&ЭлектроннаяПочтаСписок)
							               |	И скEDI_КонтактныеДанныеКонтрагентов.ОтправлятьСсылкуНаДокументАвтоматически";
							Запрос.УстановитьПараметр("ЕДРПОУКонтрагента", ЕДРПОУКонтрагента);
							Запрос.УстановитьПараметр("ЭлектроннаяПочтаСписок", СписокНастроеныхАдресов);
							ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
							Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
								ЭлементМассиваОтправкаСсылкиНаДокумент = Новый Структура;
								ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("ЭлектроннаяПочта", ВыборкаРезультатаЗапроса.ЭлектроннаяПочта);
								ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("Комментарий", ВыборкаРезультатаЗапроса.Комментарий);
								МассивОтправкаСсылкиНаДокумент.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					Если МассивОтправкаСсылкиНаДокумент.Количество() > 0 Тогда
						МассивNotifyContacts = Новый Массив;
						Для Каждого ЭлементМассиваОтправкаСсылкиНаДокумент из МассивОтправкаСсылкиНаДокумент Цикл
							АдресЕстьВСписке = Ложь;
							Для Каждого ЭлементМассиваNotifyContacts Из МассивNotifyContacts Цикл
								Если ВРег(ЭлементМассиваОтправкаСсылкиНаДокумент.ЭлектроннаяПочта) = ВРег(ЭлементМассиваNotifyContacts.EMail) Тогда
									АдресЕстьВСписке = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если Не АдресЕстьВСписке Тогда
								ЭлементМассиваNotifyContacts = Новый Структура("EMail", ЭлементМассиваОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
								МассивNotifyContacts.Добавить(ЭлементМассиваNotifyContacts);
							КонецЕсли;
						КонецЦикла;
						лПараметрыОтправкиДокумента.Вставить("NotifyContacts", МассивNotifyContacts);
					КонецЕсли;
					
					Если МожноОтправитьТолькоСсылку Тогда
						Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
							Если ЭлектронныйДокумент.ОшибкаШифрованияПриОтправке Тогда
								OnlyHref = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Если OnlyHref Тогда
						Если МассивNotifyContacts = Неопределено Тогда
							ОшибкаОтсутствиеNotifyContacts = НСтр("ru = 'Нет адреса для отправки ссылки на Электронный документ.'; uk = 'Нема адреси для відправки посилання на Електронний документ.'");
							
							ДанныеДокумента.ЕстьОшибки = Истина;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаОтсутствиеNotifyContacts);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаОтсутствиеNotifyContacts);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						лПараметрыОтправкиДокумента.Вставить("OnlyHref", Истина);
					КонецЕсли;
					
					ОтправкаМетодомSend = Ложь;
					ОтправкаМетодомSendAns = Ложь;
					Если ЗначениеЗаполнено(ЭлектронныйДокумент.ИмяФайла) Тогда
						DocVer = -1;
						РежимСинхронизации = Ложь;
						ПолучитьРежимСинхронизации(РежимСинхронизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
						Если РежимСинхронизации Тогда
							DocVer = ПолучитьАктуальныйDocVer(ЭлектронныйДокумент);
							лПараметрыОтправкиДокумента.Вставить("DocVer", DocVer);
						КонецЕсли;
						
						лИмяФайла = ЭлектронныйДокумент.ИмяФайла;
						лПараметрыОтправкиДокумента.Вставить("FileName", лИмяФайла);
						ОтправкаМетодомSendAns = Истина;
						
						Если ЭлектронныйДокумент.IsMultisided Тогда
							лПараметрыОтправкиДокумента.Вставить("RoutePosition", ЭлектронныйДокумент.RoutePosition);
							лПараметрыОтправкиДокумента.Вставить("ToNextHop", Истина);
						КонецЕсли;
						лРезультатОтправкиДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/sendans", лПараметрыОтправкиДокумента, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					Иначе
						ОтправкаМетодомSend = Истина;
						лРезультатОтправкиДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/send", лПараметрыОтправкиДокумента, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					КонецЕсли;
					Если лРезультатОтправкиДокумента.Code <> 0 Тогда
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						Замечание = НСтр("ru = 'Ошибка отправки документа:'; uk = 'Помилка відправки документа:'") + " " + лРезультатОтправкиДокумента.Message;
						СобытиеОтправкиОписание = лРезультатОтправкиДокумента.Message;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Если лРезультатОтправкиДокумента.Code = 28 Тогда // помилка шифрування, відсутні сертифікати шифрування одержувача
							Ошибка28 = Истина;
							лЭлектронныйДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
							лЭлектронныйДокументОбъект.ОшибкаШифрованияПриОтправке = Истина;
							лЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
							лЭлектронныйДокументОбъект.Записать();
							Продолжить;
						Иначе
							тDocVer = Неопределено;
							Если лРезультатОтправкиДокумента.Свойство("DocVer", тDocVer) Тогда
								Если ЗначениеЗаполнено(тDocVer) Тогда
									лDocVer = тDocVer;
								КонецЕсли;
							КонецЕсли;
							
							тСылкаНаДокумент = Неопределено;
							Если лРезультатОтправкиДокумента.Свойство("DocHref", тСылкаНаДокумент) Тогда
								Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
									лСсылкаНаДокумент = тСылкаНаДокумент;
								КонецЕсли;
							КонецЕсли;
							
							Если ОтправкаМетодомSend Тогда
								Если ЗначениеЗаполнено(лРезультатОтправкиДокумента.FileName) Тогда
									лИмяФайла = лРезультатОтправкиДокумента.FileName;
									НовоеСостояниеЭлектронногоДокумента = Неопределено;
								Иначе
									Продолжить;
								КонецЕсли;
							КонецЕсли;
							Если ОтправкаМетодомSendAns Тогда
								Если ЗначениеЗаполнено(лРезультатОтправкиДокумента.AnsFileName) Тогда
									лИмяФайлаКвитанции = лРезультатОтправкиДокумента.AnsFileName;
									НовоеСостояниеЭлектронногоДокумента = Неопределено;
								Иначе
									Продолжить;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					Иначе
						тDocVer = Неопределено;
						Если лРезультатОтправкиДокумента.Свойство("DocVer", тDocVer) Тогда
							Если ЗначениеЗаполнено(тDocVer) Тогда
								лDocVer = тDocVer;
							КонецЕсли;
						КонецЕсли;
						
						тСылкаНаДокумент = Неопределено;
						Если лРезультатОтправкиДокумента.Свойство("DocHref", тСылкаНаДокумент) Тогда
							Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
								лСсылкаНаДокумент = тСылкаНаДокумент;
							КонецЕсли;
						КонецЕсли;
						
						Если ОтправкаМетодомSend Тогда
							Если ЗначениеЗаполнено(лРезультатОтправкиДокумента.FileName) Тогда
								лИмяФайла = лРезультатОтправкиДокумента.FileName;
							Иначе
								ДанныеДокумента.ЕстьОшибки = Истина;
								
								Замечание = НСтр("ru = 'В результате отправки не получено имя файла отправленного документа на сервере СДО.'; uk = 'В результаті відправки не отримано ім''я файла відправленого документа на сервері СДО.'");
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						Если ОтправкаМетодомSendAns Тогда
							Если ЗначениеЗаполнено(лРезультатОтправкиДокумента.AnsFileName) Тогда
								лИмяФайлаКвитанции = лРезультатОтправкиДокумента.AnsFileName;
							Иначе
								ДанныеДокумента.ЕстьОшибки = Истина;
								
								Замечание = НСтр("ru = 'В результате отправки не получено имя файла отправленного документа на сервере СДО.'; uk = 'В результаті відправки не отримано ім''я файла відправленого документа на сервері СДО.'");
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								
								Продолжить;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
					СобытиеОтправки = Перечисления.скEDI_СобытияЭлектронныхДокументов.Отправка;
				КонецЕсли;
			ИначеЕсли СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезДФС") Тогда
				
				Если ЭлектронныйДокумент.ИмяФайлаДФС = "" Тогда
					лИмяФайлаДФС = ПолучитьИмяФайлаНалоговогоДокумента(ДанныеДокумента.ВидЭлектронногоДокумента, ТелоДокумента, ЖурналОперации);
				Иначе
					лИмяФайлаДФС = ЭлектронныйДокумент.ИмяФайлаДФС;
				КонецЕсли;
				лИмяФайла = лИмяФайлаДФС;
				
				
				//Если ВариантОтправки = 2 или ВариантОтправки = 3 или ВариантОтправки = 4 Тогда  //????
				//	Помилка відправки SWINED_DOC_ALREADY_REGISTERED
				//9	Помилка відправки SWINED_ORIG_DOC_ABSENT
				Если ВариантОтправки = 2 или ВариантОтправки = 3 Тогда  //????
					
					лПараметрыОтправкиДокумента = Новый Структура;
					лПараметрыОтправкиДокумента.Вставить("Edrpou",    лОрганизацияEDI.Код);
					лПараметрыОтправкиДокумента.Вставить("Dept",      лОрганизацияEDI.Филиал);
					ЕДРПОУКонтрагента = ЭлектронныйДокумент.ЕДРПОУКонтрагента;
					ФилиалКонтрагента = ЭлектронныйДокумент.ФилиалКонтрагента;
					лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
					лПараметрыОтправкиДокумента.Вставить("RcvDept",   ФилиалКонтрагента);
					СтрокаПодключенияEDI = Неопределено;
					СерверEDI = Неопределено;
					ПортEDI = Неопределено;
					ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиДокумента, лНастройкиПодписиШифрованияДляТекущейОрганизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					//лПараметрыОтправкиДокумента.Вставить("Cert",      лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСертификата);
					//лПараметрыОтправкиДокумента.Вставить("Key",       лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСекретногоКлюча);
					//лПараметрыОтправкиДокумента.Вставить("Password",  лНастройкиПодписиШифрованияДляТекущейОрганизации.ПарольСекретногоКлюча);
					лПараметрыОтправкиДокумента.Вставить("Body",      ТелоДокумента);
					
					лРезультатОтправкиДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("govrk/send", лПараметрыОтправкиДокумента, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					Если лРезультатОтправкиДокумента.Code <> 0 Тогда
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						Замечание = НСтр("ru = 'Ошибка отправки документа:'; uk = 'Помилка відправки документа:'") + " " + лРезультатОтправкиДокумента.Message;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если ВариантОтправки = 4 или ВариантОтправки = 5 или ВариантОтправки = 6 Тогда
					Запрос = Новый Запрос;
					Если ВариантОтправки = 4 или ВариантОтправки = 5 Тогда
						Запрос.Текст = "ВЫБРАТЬ
						               |	скEDI_Квитанция.Ссылка,
						               |	скEDI_Квитанция.ТелоКвитанции,
						               |	скEDI_Квитанция.НомерКвитанции
						               |ИЗ
						               |	Документ.скEDI_Квитанция КАК скEDI_Квитанция
						               |ГДЕ
						               |	скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
						               |	И скEDI_Квитанция.ВидКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыКвитанций.ДФС)
						               |	И скEDI_Квитанция.ФинальнаяКвитанция";
					ИначеЕсли ВариантОтправки = 6 Тогда
						Запрос.Текст = "ВЫБРАТЬ
						               |	скEDI_Квитанция.Ссылка,
						               |	скEDI_Квитанция.ТелоКвитанции,
						               |	скEDI_Квитанция.НомерКвитанции
						               |ИЗ
						               |	Документ.скEDI_Квитанция КАК скEDI_Квитанция
						               |ГДЕ
						               |	скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
						               |	И скEDI_Квитанция.ВидКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыКвитанций.ДФС)
						               |	И скEDI_Квитанция.ТипКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыКвитанцийДФС.РегистрацияОстановлена)";
					КонецЕсли;
					Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
					ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
					Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
						//МассивКвитанций.Добавить(ВыборкаРезультатаЗапроса.ТелоКвитанции);
						лПараметрыОтправкиКвитанции = Новый Структура;
						лПараметрыОтправкиКвитанции.Вставить("FileName",  лИмяФайлаДФС);
						лПараметрыОтправкиКвитанции.Вставить("KvtNum",    ВыборкаРезультатаЗапроса.НомерКвитанции);
						лПараметрыОтправкиКвитанции.Вставить("Edrpou",    лОрганизацияEDI.Код);
						лПараметрыОтправкиКвитанции.Вставить("Dept",      лОрганизацияEDI.Филиал);
						ЕДРПОУКонтрагента = ЭлектронныйДокумент.ЕДРПОУКонтрагента;
						ФилиалКонтрагента = ЭлектронныйДокумент.ФилиалКонтрагента;
						лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
						лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ФилиалКонтрагента);
						лПараметрыОтправкиКвитанции.Вставить("Body",      ВыборкаРезультатаЗапроса.ТелоКвитанции);
						СтрокаПодключенияEDI = Неопределено;
						СерверEDI = Неопределено;
						ПортEDI = Неопределено;
						ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиКвитанции, лНастройкиПодписиШифрованияДляТекущейОрганизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
						//лПараметрыОтправкиКвитанции.Вставить("Cert",      лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСертификата);
						//лПараметрыОтправкиКвитанции.Вставить("Key",       лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСекретногоКлюча);
						//лПараметрыОтправкиКвитанции.Вставить("Password",  лНастройкиПодписиШифрованияДляТекущейОрганизации.ПарольСекретногоКлюча);
						
						лРезультатОтправкиКвитанции = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("govrk/sendkvt", лПараметрыОтправкиКвитанции, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
						Если лРезультатОтправкиКвитанции.Code <> 0 Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							Замечание = НСтр("ru = 'Ошибка отправки квитанции:'; uk = 'Помилка відправки квитанції:'") + " " + лРезультатОтправкиКвитанции.Message;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							
							//Продолжить;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если не ДанныеДокумента.ЕстьОшибки Тогда
					КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
				КонецЕсли;
				СобытиеОтправки = Перечисления.скEDI_СобытияЭлектронныхДокументов.ОтправкаКонтрагентуЧерезДФС;
			ИначеЕсли СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО") Тогда
				Если ЭлектронныйДокумент.ИмяФайлаДФС = "" Тогда
					лИмяФайлаДФС = ПолучитьИмяФайлаНалоговогоДокумента(ДанныеДокумента.ВидЭлектронногоДокумента, ТелоДокумента, ЖурналОперации);
				Иначе
					лИмяФайлаДФС = ЭлектронныйДокумент.ИмяФайлаДФС;
				КонецЕсли;
				
				лПараметрыОтправкиДокумента = Новый Структура;
				лПараметрыОтправкиДокумента.Вставить("Edrpou",    лОрганизацияEDI.Код);
				лПараметрыОтправкиДокумента.Вставить("Dept",      лОрганизацияEDI.Филиал);
				лПараметрыОтправкиДокумента.Вставить("Name",      НаименованиеОрганизацииДляОтправки(лОрганизацияEDI));
				лПараметрыОтправкиДокумента.Вставить("PrgId",     лОрганизацияEDI.ИдентификаторПрограммы);
				ЕДРПОУКонтрагента = ЭлектронныйДокумент.ЕДРПОУКонтрагента;
				ФилиалКонтрагента = ЭлектронныйДокумент.ФилиалКонтрагента;
				лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
				лПараметрыОтправкиДокумента.Вставить("RcvDept",   ФилиалКонтрагента);
				лПараметрыОтправкиДокумента.Вставить("RcvName",   НаименованиеКонтрагентаДляОтправки(ЕДРПОУКонтрагента, ФилиалКонтрагента));
				СтрокаПодключенияEDI = Неопределено;
				СерверEDI = Неопределено;
				ПортEDI = Неопределено;
				ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиДокумента, лНастройкиПодписиШифрованияДляТекущейОрганизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
				//лПараметрыОтправкиДокумента.Вставить("Cert",      лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСертификата);
				//лПараметрыОтправкиДокумента.Вставить("Key",       лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСекретногоКлюча);
				//лПараметрыОтправкиДокумента.Вставить("Password",  лНастройкиПодписиШифрованияДляТекущейОрганизации.ПарольСекретногоКлюча);
				лПараметрыОтправкиДокумента.Вставить("GovBody",   ТелоДокумента);
				лПараметрыОтправкиДокумента.Вставить("GovFileName", лИмяФайлаДФС);
				
				Если ВариантОтправки = 4 или ВариантОтправки = 5 Тогда
					МассивКвитанций = Новый Массив;
					
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					               |	скEDI_Квитанция.Ссылка,
					               |	скEDI_Квитанция.ТелоКвитанции
					               |ИЗ
					               |	Документ.скEDI_Квитанция КАК скEDI_Квитанция
					               |ГДЕ
					               |	скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
					               |	И скEDI_Квитанция.ВидКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыКвитанций.ДФС)
					               |	И скEDI_Квитанция.ФинальнаяКвитанция";
					Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
					ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
					Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
						МассивКвитанций.Добавить(ВыборкаРезультатаЗапроса.ТелоКвитанции);
					КонецЦикла;
					
					лПараметрыОтправкиДокумента.Вставить("GovKvt", МассивКвитанций);
				ИначеЕсли ВариантОтправки = 6 Тогда
					МассивКвитанций = Новый Массив;
					
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					               |	скEDI_Квитанция.Ссылка,
					               |	скEDI_Квитанция.ТелоКвитанции
					               |ИЗ
					               |	Документ.скEDI_Квитанция КАК скEDI_Квитанция
					               |ГДЕ
					               |	скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
					               |	И скEDI_Квитанция.ВидКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыКвитанций.ДФС)
					               |	И скEDI_Квитанция.ТипКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыКвитанцийДФС.РегистрацияОстановлена)";
					Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
					ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
					Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
						МассивКвитанций.Добавить(ВыборкаРезультатаЗапроса.ТелоКвитанции);
					КонецЦикла;
					
					лПараметрыОтправкиДокумента.Вставить("GovKvt", МассивКвитанций);
				КонецЕсли;
				
				лПараметрыОтправкиДокумента.Вставить("SignImages", ПолучитьМассивДанныеПоПодписям(ДанныеДокумента.ЭлектронныйДокумент));
				
				лРезультатОтправкиДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/send", лПараметрыОтправкиДокумента, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
				Если лРезультатОтправкиДокумента.Code <> 0 Тогда
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					Замечание = НСтр("ru = 'Ошибка отправки документа:'; uk = 'Помилка відправки документа:'") + " " + лРезультатОтправкиДокумента.Message;
					СобытиеОтправкиОписание = лРезультатОтправкиДокумента.Message;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					
					тDocVer = Неопределено;
					Если лРезультатОтправкиДокумента.Свойство("DocVer", тDocVer) Тогда
						Если ЗначениеЗаполнено(тDocVer) Тогда
							лDocVer = тDocVer;
						КонецЕсли;
					КонецЕсли;
					
					тСылкаНаДокумент = Неопределено;
					Если лРезультатОтправкиДокумента.Свойство("DocHref", тСылкаНаДокумент) Тогда
						Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
							лСсылкаНаДокумент = тСылкаНаДокумент;
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(лРезультатОтправкиДокумента.FileName) Тогда
						лИмяФайла = лРезультатОтправкиДокумента.FileName;
						НовоеСостояниеЭлектронногоДокумента = Неопределено;
					Иначе
						Продолжить;
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(лРезультатОтправкиДокумента.FileName) Тогда
					лИмяФайла = лРезультатОтправкиДокумента.FileName;
					
					тDocVer = Неопределено;
					Если лРезультатОтправкиДокумента.Свойство("DocVer", тDocVer) Тогда
						Если ЗначениеЗаполнено(тDocVer) Тогда
							лDocVer = тDocVer;
						КонецЕсли;
					КонецЕсли;
					
					тСылкаНаДокумент = Неопределено;
					Если лРезультатОтправкиДокумента.Свойство("DocHref", тСылкаНаДокумент) Тогда
						Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
							лСсылкаНаДокумент = тСылкаНаДокумент;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					Замечание = НСтр("ru = 'В результате отправки не получено имя файла отправленного документа на сервере СДО.'; uk = 'В результаті відправки не отримано ім''я файла відправленого документа на сервері СДО.'");
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					
					Продолжить;
				КонецЕсли;
				КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
				СобытиеОтправки = Перечисления.скEDI_СобытияЭлектронныхДокументов.Отправка;
			Иначе
				Продолжить;
			КонецЕсли;
			
			лЭлектронныйДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
			Если лЭлектронныйДокументОбъект.ИмяФайла = "" Тогда
				лЭлектронныйДокументОбъект.ИмяФайла  = лИмяФайла;
			КонецЕсли;
			Если лЭлектронныйДокументОбъект.ИмяФайлаДФС = "" Тогда
				Если лИмяФайлаДФС <> "" Тогда
					лЭлектронныйДокументОбъект.ИмяФайлаДФС = лИмяФайлаДФС;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(лDocVer) Тогда
				Если лЭлектронныйДокументОбъект.DocVer = 0 Тогда
					лЭлектронныйДокументОбъект.DocVer  = лDocVer;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(лСсылкаНаДокумент) Тогда
				Если лЭлектронныйДокументОбъект.DocHref = "" Тогда
					лЭлектронныйДокументОбъект.DocHref  = лСсылкаНаДокумент;
				КонецЕсли;
			КонецЕсли;
			СобытиеОтправкиСсылкиНаДокумент = Неопределено;
			ОписаниеПоОтправкеСсылкиНаДокумент = "";
			Если ТипЗнч(МассивОтправкаСсылкиНаДокумент) = Тип("Массив") Тогда
				Если МассивОтправкаСсылкиНаДокумент.Количество() > 0 Тогда
					ОписаниеПоОтправкеСсылкиНаДокумент = НСтр("ru = 'на электронную почту:'; uk = 'на електронну пошту:'");
					Если ЗначениеЗаполнено(лСсылкаНаДокумент) Тогда
						СобытиеОтправкиСсылкиНаДокумент = Перечисления.скEDI_СобытияЭлектронныхДокументов.ОтправкаСсылки;
					КонецЕсли;
					лЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент.Очистить();
					Для Каждого СтрокаМассиваНастроекОтправкаСсылкиНаДокумент из МассивОтправкаСсылкиНаДокумент Цикл
						НоваяСтрокаОтправкаСсылкиНаДокумент = лЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент.Добавить();
						НоваяСтрокаОтправкаСсылкиНаДокумент.ЭлектроннаяПочта = СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта;
						НоваяСтрокаОтправкаСсылкиНаДокумент.Комментарий = СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий;
						
						ОписаниеПоОтправкеСсылкиНаДокумент = ОписаниеПоОтправкеСсылкиНаДокумент + Символы.ПС + СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта;
						Если ЗначениеЗаполнено(СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий) Тогда
							ОписаниеПоОтправкеСсылкиНаДокумент = ОписаниеПоОтправкеСсылкиНаДокумент + " - " + СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			//Если лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленВДФС") Тогда
			//	// не меняем
			//ИначеЕсли лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоКвитанциюОтДФС") Тогда
			//	// не меняем
			//ИначеЕсли лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС") Тогда
			//	// не меняем
			//ИначеЕсли лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонениеОтДФС") Тогда
			//	// не меняем
			//Иначе
			//	Если ВариантОтправки = 3 Тогда
			//		лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленКонтрагентуДляРегистрацииВЕРПН");
			//	Иначе
			//		лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
			//	КонецЕсли;
			//КонецЕсли;
			Если НовоеСостояниеЭлектронногоДокумента <> Неопределено Тогда
				лЭлектронныйДокументОбъект.Состояние = НовоеСостояниеЭлектронногоДокумента;
				
				Если ОбновитьМаршрут Тогда
					ОбновитьМаршрутПредыдущиеСостояния = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение;
					УстановитьПараметрыМаршрутаМногостороннегоДокумента(лЭлектронныйДокументОбъект, Неопределено, ОбновитьМаршрутНомерВМаршруте, НовоеСостояниеЭлектронногоДокумента, ОбновитьМаршрутПредыдущиеСостояния);
				КонецЕсли;
			КонецЕсли;
			ДатаОтправки = ТекущаяДата();
			
			лЭлектронныйДокументОбъект.ПоследняяОперация = ДатаОтправки;
			ЗаписатьЭлектронныйДокументСПредварительнымПоискомСвязаных(лЭлектронныйДокументОбъект, ДанныеДокумента.ВидЭлектронногоДокумента, ДанныеДокумента.ВидЭлектронногоДокумента.Владелец);
			
			Если НомерСтрокиСодержания >= 0 Тогда
				Если ЗначениеЗаполнено(лИмяФайла) Тогда
					СодержимоеЭлектронныхДокументовМенеджерЗаписи = РегистрыСведений.скEDI_СодержимоеЭлектронныхДокументов.СоздатьМенеджерЗаписи();
					СодержимоеЭлектронныхДокументовМенеджерЗаписи.ЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
					СодержимоеЭлектронныхДокументовМенеджерЗаписи.НомерВерсии = НомерСтрокиСодержания;
					СодержимоеЭлектронныхДокументовМенеджерЗаписи.НомерДополнения = 0;
					СодержимоеЭлектронныхДокументовМенеджерЗаписи.Прочитать();
					
					Если СодержимоеЭлектронныхДокументовМенеджерЗаписи.Выбран() и СодержимоеЭлектронныхДокументовМенеджерЗаписи.ИмяФайла = "" Тогда
						СодержимоеЭлектронныхДокументовМенеджерЗаписи.ИмяФайла = лИмяФайла;
						СодержимоеЭлектронныхДокументовМенеджерЗаписи.DocVer = лDocVer;
						СодержимоеЭлектронныхДокументовМенеджерЗаписи.DocHref = лСсылкаНаДокумент;
						СодержимоеЭлектронныхДокументовМенеджерЗаписи.Записать(Истина);
					Иначе
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи = РегистрыСведений.скEDI_ПовторныеОтправкиЭлектронныхДокументов.СоздатьМенеджерЗаписи();
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.Организация = лОрганизацияEDI;
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.ЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.ИмяФайла = лИмяФайла;
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.НомерВерсии = НомерСтрокиСодержания;
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.Дата = ДатаОтправки;
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.DocVer = лDocVer;
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.DocHref = лСсылкаНаДокумент;
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.Записать(Истина);
					КонецЕсли;
				КонецЕсли;
			Иначе
				скEDI_ВнешниеХранилища.СохранитьСодержимоеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка,
					ПолучитьСледующийНомерВерсииСодержанияЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка),
					ТелоДокумента,
					ИзображениеДокумента,
					ВложениеДокумента1,
					ИмяФайлаВложениеДокумента1,
					ВложениеДокумента2,
					ИмяФайлаВложениеДокумента2,
					ВложениеДокумента3,
					ИмяФайлаВложениеДокумента3,
					МассивВложенийДокумента4,
					ТекущаяДата(),
					лИмяФайла,
					лDocVer,
					лСсылкаНаДокумент,
					Ложь,
					Ложь,
					Неопределено,
					Ложь
				);
			КонецЕсли;
			
			// Зафиксировать событие отправки электронного документа.
			лОписаниеПоОтправке = НСтр("ru = 'Документ отправлен'; uk = 'Документ відправлено'")
			+ ?(OnlyHref, " " + НСтр("ru = 'в виде ссылки'; uk = 'у вигляді посилання'"), "")
			+ "
			|"
			+  НСтр("ru = 'Дата и время отправки: '; uk = 'Дата та час відправки: '") + Формат(ДатаОтправки, "ДФ='dd.MM.yyyy HH:mm:ss'") + "
			|"
			+ НСтр("ru = 'Получатель: '; uk = 'Одержувач: '") + ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ФилиалКонтрагента), " (" + ФилиалКонтрагента + ")", "") + "
			|"
			+ НСтр("ru = 'Имя файла: '; uk = 'Ім''я файлу: '") + лИмяФайла;
			
			Если ЗначениеЗаполнено(лСсылкаНаДокумент) Тогда
				лОписаниеПоОтправке = лОписаниеПоОтправке + "
				|"
				+ НСтр("ru = 'Ссылка на документ: '; uk = 'Посилання на документ: '") + лСсылкаНаДокумент;
			КонецЕсли;
			
			лОписаниеПоОтправке = лОписаниеПоОтправке + "
			|
			|"
			+ НСтр("ru = 'Подписи: '; uk = 'Підписи: '");
			ДополнитьОписаниеДаннымиПоПодписямКонтрагента(ПолучитьМассивПодписейКонтрагентаИзПодписанногоЭлектронногоДокумента(ТелоДокумента), лОписаниеПоОтправке, Неопределено, ОтражатьTSPСтатус, ОтражатьOCSPСтатус);
			
			Если ЗначениеЗаполнено(СобытиеОтправкиОписание) Тогда
				лОписаниеПоОтправке = лОписаниеПоОтправке + "
				|
				|" + СобытиеОтправкиОписание;
			КонецЕсли;

			ЗафиксироватьСобытиеЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент, СобытиеОтправки, лОписаниеПоОтправке, ДатаОтправки, лDocVer, лИмяФайла, лИмяФайлаКвитанции);
			
			Если ЗначениеЗаполнено(СобытиеОтправкиСсылкиНаДокумент) Тогда
				лОписаниеПоОтправкеСсылкиНаДокумент = НСтр("ru = 'Отправлена ссылка на Электронный документ'; uk = 'Відправлено посилання на Електронний документ'")
				+ Символы.ПС
				+ лСсылкаНаДокумент
				+ Символы.ПС
				+ ОписаниеПоОтправкеСсылкиНаДокумент;
				
				ЗафиксироватьСобытиеЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент, СобытиеОтправкиСсылкиНаДокумент, лОписаниеПоОтправкеСсылкиНаДокумент, ДатаОтправки);
			КонецЕсли;
				
			УстановитьСнятьОтметкуОбработано(ДанныеДокумента.ЭлектронныйДокумент, Истина);
			
			СобытиеДляЖурнала = НСтр("ru = 'Документ отправлен'; uk = 'Документ відправлено'") + ": """
			+ лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента.Наименование + """ №" + лЭлектронныйДокументОбъект.НомерДокумента + НСтр("ru = ' от '; uk = ' від '") + Формат(лЭлектронныйДокументОбъект.ДатаДокумента, "ДФ=dd.MM.yyyy");
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, СобытиеДляЖурнала, , Ложь);
			
			Если лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента.ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента Тогда
				СоглашениеОАнулированииДокументаОбработать(ДанныеДокумента.ЭлектронныйДокумент, Истина);
			КонецЕсли;
			
			Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
				тОрганизация = ПараметрыСобытий.Организация;
				тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
				тВхИсх = ПараметрыСобытий.ВхИсх;
				тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
				тЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
				тСостояние = лЭлектронныйДокументОбъект.Состояние;
				тДокумент1С = лЭлектронныйДокументОбъект.Документ1С;
				тМассивВложений = Неопределено;
				ПараметрыСобытий.Свойство("МассивВложений", тМассивВложений);
				Если ТипЗнч(тМассивВложений) <> Тип("Массив") Тогда
					Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
						тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
					Иначе
						тМассивВложений = Новый Массив;
					КонецЕсли;
					ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
				КонецЕсли;
				тМассивПодписей = Неопределено;
				ПараметрыСобытий.Свойство("МассивПодписей", тМассивПодписей);
				Если ТипЗнч(тМассивПодписей) <> Тип("Массив") Тогда
					тМассивПодписей = Новый Массив;
					ПараметрыСобытий.Вставить("МассивПодписей", тМассивПодписей);
				КонецЕсли;
				ОбработатьСобытие_ПриОтправке(тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписей, тДокумент1С, тМассивВложений);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	// Обновление журнала операций.
	Если ЖурналОперации <> "" Тогда
		Если ДополнительныеПараметры.ЖурналОперации = "" Тогда
			ДополнительныеПараметры.ЖурналОперации = ЖурналОперации;
		Иначе
			ДополнительныеПараметры.ЖурналОперации = ДополнительныеПараметры.ЖурналОперации + Символы.ПС + ЖурналОперации;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОтправитьЭлектронныйДокумент()

Процедура ОтправитьЭлектронныеДокументыКвитанцииПовторно(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоУспешноОбработаных) Экспорт
		
	ЖурналОперации                     = "";//ДополнительныеПараметры.ЖурналОперации;	
	ТаблицаНастроекПодписейШифрования = ДополнительныеПараметры.НастройкиПодписейШифрования;
	ТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ТаблицаНастроекПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписейШифрования, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписейШифрования);
	
	МожноОтправитьТолькоСсылку = Ложь;
	Если ДополнительныеПараметры.Свойство("МожноОтправитьТолькоСсылку") Тогда
		МожноОтправитьТолькоСсылку = ДополнительныеПараметры.МожноОтправитьТолькоСсылку;
	КонецЕсли;
	
	Для Каждого ДанныеДокумента Из ТаблицаДанныхДокументов Цикл
		лОрганизацияEDI = ДанныеДокумента.Организация;//ПолучитьОрганизациюEDIИзДанныхДокумента(ДанныеДокумента);	
		
		НовоеСостояниеЭлектронногоДокумента = Неопределено;
		
		ТелоКвитанции = "";
		ТекстКвитанции = "";
		ВидКвитанции = Неопределено;
		ТипКвитанции = Неопределено;
		ПереотправляемаяКвитанция = Неопределено;
		
		ТелоДокумента = "";
		ИзображениеДокумента = "";
		ВложениеДокумента1 = "";
		ИмяФайлаВложениеДокумента1 = "";
		ВложениеДокумента2 = "";
		ИмяФайлаВложениеДокумента2 = "";
		ВложениеДокумента3 = "";
		ИмяФайлаВложениеДокумента3 = "";
		МассивВложенийДокумента4 = Неопределено;
		МассивОтправкаСсылкиНаДокумент = Неопределено;
		
		ПараметрыСобытий = Неопределено;
		ПараметрыСобытийКвитанции = Неопределено;
		
		НомерСтрокиСодержания = -1;
		ВариантОтправки = 0;
		СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ПустаяСсылка");
		СобытиеОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.ПустаяСсылка");
		СобытиеОтправкиОписание = "";
		// 1 - ПервичныйДокумент Контрагенту
		// 2 - НалоговыйДокумент Контрагенту на согласование
		// 3 - НалоговыйДокумент Контрагенту для регистрации
		// 4 - НалоговыйДокумент Контрагенту после регистрации в ГНС
		// 5 - НалоговыйДокумент Контрагенту после отклонения в ГНС
		// 6 - НалоговыйДокумент Контрагенту остановки регистрации в ГНС
		// 7 - ПервичныйДокумент Квитанции Контрагенту
		
		ОтражатьTSPСтатус = Истина;
		ОтражатьOCSPСтатус = Истина;
		OnlyHref = Ложь;
		
		Если ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
			ОтражатьTSPСтатус = Ложь;
			ОтражатьOCSPСтатус = Ложь;
			Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен") Тогда
					ВариантОтправки = 2;
					СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					
					НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
				ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС") Тогда
					ВариантОтправки = 4;
					СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, Истина, , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ЗначениеЗаполнено(ОшибкаПолученияСодержимогоЭлДок) Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , Истина, ОшибкаПолученияСодержимогоЭлДок);
					КонецЕсли;
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					Иначе
						НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
						ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
						ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
						ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
						ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
						ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
						ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
						ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
						ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
						МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
						
						НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
					КонецЕсли;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
		ИначеЕсли ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
			ОтражатьTSPСтатус = Ложь;
			ОтражатьOCSPСтатус = Ложь;
			Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан")
				или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленКонтрагентуДляРегистрацииВЕРПН") Тогда
					Если ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
						СпособОтправки = лОрганизацияEDI.СпособОтправкиНалоговыхДокументовКонтрагенту;
						ВариантОтправки = 3;
						
						НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленКонтрагентуДляРегистрацииВЕРПН");
					Иначе
						СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
						ВариантОтправки = 2;
						
						НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
					КонецЕсли;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
				ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС") Тогда
					Если ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
						Продолжить;
					Иначе
						ВариантОтправки = 4;
					КонецЕсли;
					СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
					//СпособОтправки = лОрганизацияEDI.СпособОтправкиНалоговыхДокументовКонтрагенту;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, Истина, , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ЗначениеЗаполнено(ОшибкаПолученияСодержимогоЭлДок) Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , Истина, ОшибкаПолученияСодержимогоЭлДок);
					КонецЕсли;
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					Иначе
						НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
						ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
						ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
						ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
						ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
						ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
						ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
						ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
						ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
						МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
						
						НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
					КонецЕсли;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
				Иначе
					Продолжить;
				КонецЕсли;
			ИначеЕсли ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС") Тогда
					Если ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
						ВариантОтправки = 4;
					Иначе
						Продолжить;
					КонецЕсли;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа (полученое от Контрагента).'; uk = 'Нема вмісту Електронного документу (отримане від Контрагента).'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					СпособОтправки = СодержаниеЭлектронногоДокумента.ПолученоОтКонтрагентаСПомощью;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, Истина, , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ЗначениеЗаполнено(ОшибкаПолученияСодержимогоЭлДок) Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , Истина, ОшибкаПолученияСодержимогоЭлДок);
					КонецЕсли;
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа (полученое от Контрагента).'; uk = 'Нема вмісту Електронного документу (отримане від Контрагента).'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
					НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
				ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонениеОтДФС") Тогда
					Если ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
						ВариантОтправки = 5;
					Иначе
						Продолжить;
					КонецЕсли;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокументаКонтрагента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокументаКонтрагента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа (полученое от Контрагента).'; uk = 'Нема вмісту Електронного документу (отримане від Контрагента).'");
						КонецЕсли;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Продолжить;
					КонецЕсли;
					СпособОтправки = СодержаниеЭлектронногоДокументаКонтрагента.ПолученоОтКонтрагентаСПомощью;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, Истина, , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ЗначениеЗаполнено(ОшибкаПолученияСодержимогоЭлДок) Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						СодержаниеЭлектронногоДокумента = СодержаниеЭлектронногоДокументаКонтрагента;
					КонецЕсли;
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
					НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
				ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС_РегистрацияОстановлена") Тогда
					Если ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
						ВариантОтправки = 6;
					Иначе
						Продолжить;
					КонецЕсли;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокументаКонтрагента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокументаКонтрагента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа (полученое от Контрагента).'; uk = 'Нема вмісту Електронного документу (отримане від Контрагента).'");
						КонецЕсли;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Продолжить;
					КонецЕсли;
					СпособОтправки = СодержаниеЭлектронногоДокументаКонтрагента.ПолученоОтКонтрагентаСПомощью;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, Истина, , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ЗначениеЗаполнено(ОшибкаПолученияСодержимогоЭлДок) Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						СодержаниеЭлектронногоДокумента = СодержаниеЭлектронногоДокументаКонтрагента;
					КонецЕсли;
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
					НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
		ИначеЕсли ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент")
		или ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента")
		или ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями") Тогда
			ОтражатьTSPСтатус = Истина;
			ОтражатьOCSPСтатус = Истина;
			Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий")
			или ДанныеДокумента.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен") Тогда
					ВариантОтправки = 1;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Продолжить;
					КонецЕсли;
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
					НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
					
					СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
				Иначе
					Продолжить;
				КонецЕсли;
			ИначеЕсли ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоОтклонение") Тогда
					ВариантОтправки = 7;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
					               |	скEDI_Квитанция.Ссылка КАК Ссылка,
					               |	скEDI_Квитанция.Дата КАК Дата,
					               |	скEDI_Квитанция.ВидКвитанции КАК ВидКвитанции,
					               |	скEDI_Квитанция.ТипКвитанции КАК ТипКвитанции,
					               |	скEDI_Квитанция.ТекстКвитанции КАК ТекстКвитанции,
					               |	скEDI_Квитанция.ТелоКвитанции КАК ТелоКвитанции
					               |ИЗ
					               |	Документ.скEDI_Квитанция КАК скEDI_Квитанция
					               |ГДЕ
					               |	скEDI_Квитанция.Организация = &Организация
					               |	И скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
					               |	И скEDI_Квитанция.ВхИсх = &ВхИсх
					               |	И скEDI_Квитанция.ВидКвитанции = &ВидКвитанции
					               |	И скEDI_Квитанция.ТипКвитанции = &ТипКвитанции
					               |	И НЕ скEDI_Квитанция.ПометкаУдаления
					               |
					               |УПОРЯДОЧИТЬ ПО
					               |	Дата УБЫВ";
					Запрос.УстановитьПараметр("Организация", лОрганизацияEDI);
					Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
					Запрос.УстановитьПараметр("ВхИсх", ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий"));
					Запрос.УстановитьПараметр("ВидКвитанции", ПредопределенноеЗначение("Перечисление.скEDI_ВидыКвитанций.СДО"));
					Запрос.УстановитьПараметр("ТипКвитанции", ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение"));
					ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
					Если ВыборкаРезультатаЗапроса.Следующий() Тогда
						ТелоКвитанции = ВыборкаРезультатаЗапроса.ТелоКвитанции;
						ТекстКвитанции = ВыборкаРезультатаЗапроса.ТекстКвитанции;
						ВидКвитанции = ВыборкаРезультатаЗапроса.ВидКвитанции;
						ТипКвитанции = ВыборкаРезультатаЗапроса.ТипКвитанции;
						ПереотправляемаяКвитанция = ВыборкаРезультатаЗапроса.Ссылка;
					Иначе
						ОшибкаПоискаКвитанции = НСтр("ru = 'Нет найдена квитанция для переотправки.'; uk = 'Не знайдено квитанцію для перевідправлення.'");
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ОшибкаПоискаКвитанции);
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПоискаКвитанции);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					
					//НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
					ПараметрыСобытийКвитанции = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытийКвитанции.СобытиеПеред = Перечисления.скEDI_События.ПередОтклонением;
					ПараметрыСобытийКвитанции.СобытиеПри = Перечисления.скEDI_События.ПриОтклонении;
					ПараметрыСобытийКвитанции.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытийКвитанции.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытийКвитанции.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытийКвитанции.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытийКвитанции.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытийКвитанции.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытийКвитанции.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытийКвитанции.МассивВложений = Новый Массив;
					
					СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
				ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение") Тогда
					ВариантОтправки = 7;
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
					               |	скEDI_Квитанция.Ссылка КАК Ссылка,
					               |	скEDI_Квитанция.Дата КАК Дата,
					               |	скEDI_Квитанция.ВидКвитанции КАК ВидКвитанции,
					               |	скEDI_Квитанция.ТипКвитанции КАК ТипКвитанции,
					               |	скEDI_Квитанция.ТекстКвитанции КАК ТекстКвитанции,
					               |	скEDI_Квитанция.ТелоКвитанции КАК ТелоКвитанции
					               |ИЗ
					               |	Документ.скEDI_Квитанция КАК скEDI_Квитанция
					               |ГДЕ
					               |	скEDI_Квитанция.Организация = &Организация
					               |	И скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
					               |	И скEDI_Квитанция.ВхИсх = &ВхИсх
					               |	И скEDI_Квитанция.ВидКвитанции = &ВидКвитанции
					               |	И скEDI_Квитанция.ТипКвитанции = &ТипКвитанции
					               |	И НЕ скEDI_Квитанция.ПометкаУдаления
					               |
					               |УПОРЯДОЧИТЬ ПО
					               |	Дата УБЫВ";
					Запрос.УстановитьПараметр("Организация", лОрганизацияEDI);
					Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
					Запрос.УстановитьПараметр("ВхИсх", ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий"));
					Запрос.УстановитьПараметр("ВидКвитанции", ПредопределенноеЗначение("Перечисление.скEDI_ВидыКвитанций.СДО"));
					Запрос.УстановитьПараметр("ТипКвитанции", ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение"));
					ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
					Если ВыборкаРезультатаЗапроса.Следующий() Тогда
						ТелоКвитанции = ВыборкаРезультатаЗапроса.ТелоКвитанции;
						ТекстКвитанции = ВыборкаРезультатаЗапроса.ТекстКвитанции;
						ВидКвитанции = ВыборкаРезультатаЗапроса.ВидКвитанции;
						ТипКвитанции = ВыборкаРезультатаЗапроса.ТипКвитанции;
						ПереотправляемаяКвитанция = ВыборкаРезультатаЗапроса.Ссылка;
					Иначе
						ОшибкаПоискаКвитанции = НСтр("ru = 'Нет найдена квитанция для переотправки.'; uk = 'Не знайдено квитанцію для перевідправлення.'");
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ОшибкаПоискаКвитанции);
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПоискаКвитанции);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Продолжить;
					КонецЕсли;
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					
					//НовоеСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
					ПараметрыСобытийКвитанции = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытийКвитанции.СобытиеПеред = Перечисления.скEDI_События.ПередПодтверждением;
					ПараметрыСобытийКвитанции.СобытиеПри = Перечисления.скEDI_События.ПриПодтверждении;
					ПараметрыСобытийКвитанции.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытийКвитанции.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытийКвитанции.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытийКвитанции.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытийКвитанции.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытийКвитанции.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытийКвитанции.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытийКвитанции.МассивВложений = Новый Массив;
					
					СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		лНастройкиПодписиШифрованияДляТекущейОрганизации = ТаблицаНастроекПодписейШифрования.Найти(лОрганизацияEDI, "ОрганизацияEDI");
		
		Если лНастройкиПодписиШифрованияДляТекущейОрганизации = Неопределено Тогда		
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не найдены настройки подписи шифрования Организации: '; uk = 'Не знайдені підписи шифрування по Організації: '") + лОрганизацияEDI + ".");
			ДанныеДокумента.ЕстьОшибки = Истина;			
		КонецЕсли;
		
		Если СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ПустаяСсылка") Тогда
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не указан способ отправки'; uk = 'Не вказано спосіб відправки'") + ": " + лОрганизацияEDI + ".");
			ДанныеДокумента.ЕстьОшибки = Истина;			
		КонецЕсли;
		
		// 2 - НалоговыйДокумент Контрагенту на согласование
		// 3 - НалоговыйДокумент Контрагенту для регистрации
		
		
		Если НЕ ДанныеДокумента.ЕстьОшибки Тогда
			лИмяФайла = "";
			лИмяФайлаКвитанции = "";
			лИмяФайлаДФС = "";
			лСсылкаНаДокумент = "";
			лDocVer = 0;
			Ошибка28 = Ложь;
			ОбновитьМаршрут = Ложь;
			ОбновитьМаршрутНомерВМаршруте = -1;
			
			ДатаОтправки = ТекущаяДата();
			
			Отказ = Ложь;
			Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
				тОрганизация = ПараметрыСобытий.Организация;
				тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
				тВхИсх = ПараметрыСобытий.ВхИсх;
				тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
				тЭлектронныйДокумент = ПараметрыСобытий.ЭлектронныйДокумент;
				тСостояние = ПараметрыСобытий.Состояние;
				тДокумент1С = ПараметрыСобытий.Документ1С;
				Если ТипЗнч(ПараметрыСобытий.МассивВложений) = Тип("Массив") Тогда
					тМассивВложений = ПараметрыСобытий.МассивВложений;
				Иначе
					Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
						тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
					Иначе
						тМассивВложений = Новый Массив;
					КонецЕсли;
					ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
				КонецЕсли;
				тМассивПодписейДляОбработкиСобытий = ПолучитьМассивПодписейДляОбработкиСобытий(тЭлектронныйДокумент);
				ПараметрыСобытий.Вставить("МассивПодписей", тМассивПодписейДляОбработкиСобытий);
				ПричинаОтказа = "";
				Если не ОбработатьСобытие_ПередОтправкой(тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписейДляОбработкиСобытий, тДокумент1С, тМассивВложений, ПричинаОтказа) Тогда
					Отказ = Истина;
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ПричинаОтказа);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ПричинаОтказа);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
				КонецЕсли;
			КонецЕсли;
			
			Если Отказ Тогда
				Продолжить;
			ИначеЕсли ВариантОтправки = 1 Тогда // 1 - ПервичныйДокумент Контрагенту
				Если СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО") Тогда
					лПараметрыОтправкиДокумента = Новый Структура;
					лПараметрыОтправкиДокумента.Вставить("Edrpou",    лОрганизацияEDI.Код);
					лПараметрыОтправкиДокумента.Вставить("Dept",      лОрганизацияEDI.Филиал);
					лПараметрыОтправкиДокумента.Вставить("PrgId",     лОрганизацияEDI.ИдентификаторПрограммы);
					ЕДРПОУКонтрагента = ЭлектронныйДокумент.ЕДРПОУКонтрагента;
					ФилиалКонтрагента = ЭлектронныйДокумент.ФилиалКонтрагента;
					лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
					лПараметрыОтправкиДокумента.Вставить("RcvDept",   ФилиалКонтрагента);
					лПараметрыОтправкиДокумента.Вставить("Name",      НаименованиеОрганизацииДляОтправки(лОрганизацияEDI));
					
					СтрокаПодключенияEDI = Неопределено;
					СерверEDI = Неопределено;
					ПортEDI = Неопределено;
					ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиДокумента, лНастройкиПодписиШифрованияДляТекущейОрганизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					//лПараметрыОтправкиДокумента.Вставить("Cert",      лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСертификата);
					//лПараметрыОтправкиДокумента.Вставить("Key",       лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСекретногоКлюча);
					//лПараметрыОтправкиДокумента.Вставить("Password",  лНастройкиПодписиШифрованияДляТекущейОрганизации.ПарольСекретногоКлюча);
					лПараметрыОтправкиДокумента.Вставить("MedocBody", ТелоДокумента);
					
					Если ЗначениеЗаполнено(ИзображениеДокумента) Тогда				
						лПараметрыПередаваемогоPDFПредставленияДокумента = Новый Структура;
						лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("FileName", "Form.pdf");
						лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("Body", ИзображениеДокумента);
						лПараметрыОтправкиДокумента.Вставить("ImageBody", лПараметрыПередаваемогоPDFПредставленияДокумента);
					КонецЕсли;
					
					МассивВложений = Новый Массив;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента1) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента1, ВложениеДокумента1));
					КонецЕсли;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента2) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента2, ВложениеДокумента2));
					КонецЕсли;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента3) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента3, ВложениеДокумента3));
					КонецЕсли;
					Если ТипЗнч(МассивВложенийДокумента4) = Тип("Массив") или ТипЗнч(МассивВложенийДокумента4) = Тип("ФиксированныйМассив") Тогда
						Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокумента4 Цикл
							МассивВложений.Добавить(Новый Структура("FileName,Body", ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента, ЭлементМассиваВложенийДокумента4.ВложениеДокумента));
						КонецЦикла;
					КонецЕсли;
					
					Если МассивВложений.Количество() > 0 Тогда
						лПараметрыОтправкиДокумента.Вставить("AttachmentBody", МассивВложений);
					КонецЕсли;
					
					лПараметрыОтправкиДокумента.Вставить("SignImages", ПолучитьМассивДанныеПоПодписям(ДанныеДокумента.ЭлектронныйДокумент));
					
					Если ЭлектронныйДокумент.IsMultisided Тогда
						лПараметрыОтправкиДокумента.Вставить("IsMultisided", Истина);
						ОбновитьМаршрут = Истина;
						ОбновитьМаршрутНомерВМаршруте = ЭлектронныйДокумент.RoutePosition + 1;
						
						Если ЭлектронныйДокумент.Маршрут.Количество() >= 2 Тогда
							СледующийЭлементМаршрута = ЭлектронныйДокумент.Маршрут.Получить(1);
							ЕДРПОУКонтрагента = СледующийЭлементМаршрута.ЕДРПОУКонтрагента;
							ФилиалКонтрагента = СледующийЭлементМаршрута.ФилиалКонтрагента;
							лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
							лПараметрыОтправкиДокумента.Вставить("RcvDept",   ФилиалКонтрагента);
						КонецЕсли;
					КонецЕсли;
					лПараметрыОтправкиДокумента.Вставить("RcvName", НаименованиеКонтрагентаДляОтправки(ЕДРПОУКонтрагента, ФилиалКонтрагента));
					
					МассивNotifyContacts = Неопределено;
					МассивОтправкаСсылкиНаДокумент = Новый Массив;
					МассивНастроекОтправкаСсылкиНаДокумент = ДанныеДокумента.МассивНастроекОтправкаСсылкиНаДокумент;
					Если ТипЗнч(МассивНастроекОтправкаСсылкиНаДокумент) = Тип("ФиксированныйМассив") или ТипЗнч(МассивНастроекОтправкаСсылкиНаДокумент) = Тип("Массив") Тогда
						Для Каждого СтрокаМассиваНастроекОтправкаСсылкиНаДокумент из МассивНастроекОтправкаСсылкиНаДокумент Цикл
							ЭлементМассиваОтправкаСсылкиНаДокумент = Новый Структура;
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("ЭлектроннаяПочта", СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("Комментарий", СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий);
							МассивОтправкаСсылкиНаДокумент.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент);
						КонецЦикла;
					Иначе
						СписокНастроеныхАдресов = Новый СписокЗначений;
						Для Каждого СтрокаОтправкаСсылкиНаДокумент из ЭлектронныйДокумент.ОтправкаСсылкиНаДокумент Цикл
							ЭлементМассиваОтправкаСсылкиНаДокумент = Новый Структура;
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("ЭлектроннаяПочта", СтрокаОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("Комментарий", СтрокаОтправкаСсылкиНаДокумент.Комментарий);
							МассивОтправкаСсылкиНаДокумент.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент);
							
							СписокНастроеныхАдресов.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
						КонецЦикла;
						Если ЗначениеЗаполнено(ЕДРПОУКонтрагента) Тогда
							Запрос = Новый Запрос;
							Запрос.Текст = "ВЫБРАТЬ
							               |	скEDI_КонтактныеДанныеКонтрагентов.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
							               |	скEDI_КонтактныеДанныеКонтрагентов.Комментарий КАК Комментарий
							               |ИЗ
							               |	РегистрСведений.скEDI_КонтактныеДанныеКонтрагентов КАК скEDI_КонтактныеДанныеКонтрагентов
							               |ГДЕ
							               |	скEDI_КонтактныеДанныеКонтрагентов.ЕДРПОУКонтрагента = &ЕДРПОУКонтрагента
							               |	И НЕ скEDI_КонтактныеДанныеКонтрагентов.ЭлектроннаяПочта В (&ЭлектроннаяПочтаСписок)
							               |	И скEDI_КонтактныеДанныеКонтрагентов.ОтправлятьСсылкуНаДокументАвтоматически";
							Запрос.УстановитьПараметр("ЕДРПОУКонтрагента", ЕДРПОУКонтрагента);
							Запрос.УстановитьПараметр("ЭлектроннаяПочтаСписок", СписокНастроеныхАдресов);
							ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
							Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
								ЭлементМассиваОтправкаСсылкиНаДокумент = Новый Структура;
								ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("ЭлектроннаяПочта", ВыборкаРезультатаЗапроса.ЭлектроннаяПочта);
								ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("Комментарий", ВыборкаРезультатаЗапроса.Комментарий);
								МассивОтправкаСсылкиНаДокумент.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					Если МассивОтправкаСсылкиНаДокумент.Количество() > 0 Тогда
						МассивNotifyContacts = Новый Массив;
						Для Каждого ЭлементМассиваОтправкаСсылкиНаДокумент из МассивОтправкаСсылкиНаДокумент Цикл
							АдресЕстьВСписке = Ложь;
							Для Каждого ЭлементМассиваNotifyContacts Из МассивNotifyContacts Цикл
								Если ВРег(ЭлементМассиваОтправкаСсылкиНаДокумент.ЭлектроннаяПочта) = ВРег(ЭлементМассиваNotifyContacts.EMail) Тогда
									АдресЕстьВСписке = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если Не АдресЕстьВСписке Тогда
								ЭлементМассиваNotifyContacts = Новый Структура("EMail", ЭлементМассиваОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
								МассивNotifyContacts.Добавить(ЭлементМассиваNotifyContacts);
							КонецЕсли;
						КонецЦикла;
						лПараметрыОтправкиДокумента.Вставить("NotifyContacts", МассивNotifyContacts);
					КонецЕсли;
					
					Если МожноОтправитьТолькоСсылку Тогда
						Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
							Если ЭлектронныйДокумент.ОшибкаШифрованияПриОтправке Тогда
								OnlyHref = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Если OnlyHref Тогда
						Если МассивNotifyContacts = Неопределено Тогда
							ОшибкаОтсутствиеNotifyContacts = НСтр("ru = 'Нет адреса для отправки ссылки на Электронный документ.'; uk = 'Нема адреси для відправки посилання на Електронний документ.'");
							
							ДанныеДокумента.ЕстьОшибки = Истина;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаОтсутствиеNotifyContacts);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаОтсутствиеNotifyContacts);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						лПараметрыОтправкиДокумента.Вставить("OnlyHref", Истина);
					КонецЕсли;
					
					ОтправкаМетодомSend = Ложь;
					ОтправкаМетодомSendAns = Ложь;
					Если ЗначениеЗаполнено(ЭлектронныйДокумент.ИмяФайла) Тогда
						DocVer = -1;
						РежимСинхронизации = Ложь;
						ПолучитьРежимСинхронизации(РежимСинхронизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
						Если РежимСинхронизации Тогда
							DocVer = ПолучитьАктуальныйDocVer(ЭлектронныйДокумент);
							лПараметрыОтправкиДокумента.Вставить("DocVer", DocVer);
						КонецЕсли;
						
						лИмяФайла = ЭлектронныйДокумент.ИмяФайла;
						лПараметрыОтправкиДокумента.Вставить("FileName", лИмяФайла);
						ОтправкаМетодомSendAns = Истина;
						
						Если ЭлектронныйДокумент.IsMultisided Тогда
							лПараметрыОтправкиДокумента.Вставить("RoutePosition", ЭлектронныйДокумент.RoutePosition);
							лПараметрыОтправкиДокумента.Вставить("ToNextHop", Истина);
						КонецЕсли;
						лРезультатОтправкиДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/sendans", лПараметрыОтправкиДокумента, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					Иначе
						ОтправкаМетодомSend = Истина;
						лРезультатОтправкиДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/send", лПараметрыОтправкиДокумента, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					КонецЕсли;
					Если лРезультатОтправкиДокумента.Code <> 0 Тогда
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						Замечание = НСтр("ru = 'Ошибка отправки документа:'; uk = 'Помилка відправки документа:'") + " " + лРезультатОтправкиДокумента.Message;
						СобытиеОтправкиОписание = лРезультатОтправкиДокумента.Message;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Если лРезультатОтправкиДокумента.Code = 28 Тогда // помилка шифрування, відсутні сертифікати шифрування одержувача
							Ошибка28 = Истина;
							лЭлектронныйДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
							лЭлектронныйДокументОбъект.ОшибкаШифрованияПриОтправке = Истина;
							лЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
							лЭлектронныйДокументОбъект.Записать();
							Продолжить;
						Иначе
							тDocVer = Неопределено;
							Если лРезультатОтправкиДокумента.Свойство("DocVer", тDocVer) Тогда
								Если ЗначениеЗаполнено(тDocVer) Тогда
									лDocVer = тDocVer;
								КонецЕсли;
							КонецЕсли;
							
							тСылкаНаДокумент = Неопределено;
							Если лРезультатОтправкиДокумента.Свойство("DocHref", тСылкаНаДокумент) Тогда
								Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
									лСсылкаНаДокумент = тСылкаНаДокумент;
								КонецЕсли;
							КонецЕсли;
							
							Если ОтправкаМетодомSend Тогда
								Если ЗначениеЗаполнено(лРезультатОтправкиДокумента.FileName) Тогда
									лИмяФайла = лРезультатОтправкиДокумента.FileName;
									НовоеСостояниеЭлектронногоДокумента = Неопределено;
								Иначе
									Продолжить;
								КонецЕсли;
							КонецЕсли;
							Если ОтправкаМетодомSendAns Тогда
								Если ЗначениеЗаполнено(лРезультатОтправкиДокумента.AnsFileName) Тогда
									лИмяФайлаКвитанции = лРезультатОтправкиДокумента.AnsFileName;
									НовоеСостояниеЭлектронногоДокумента = Неопределено;
								Иначе
									Продолжить;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					Иначе
						тDocVer = Неопределено;
						Если лРезультатОтправкиДокумента.Свойство("DocVer", тDocVer) Тогда
							Если ЗначениеЗаполнено(тDocVer) Тогда
								лDocVer = тDocVer;
							КонецЕсли;
						КонецЕсли;
						
						тСылкаНаДокумент = Неопределено;
						Если лРезультатОтправкиДокумента.Свойство("DocHref", тСылкаНаДокумент) Тогда
							Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
								лСсылкаНаДокумент = тСылкаНаДокумент;
							КонецЕсли;
						КонецЕсли;
						
						Если ОтправкаМетодомSend Тогда
							Если ЗначениеЗаполнено(лРезультатОтправкиДокумента.FileName) Тогда
								лИмяФайла = лРезультатОтправкиДокумента.FileName;
							Иначе
								ДанныеДокумента.ЕстьОшибки = Истина;
								
								Замечание = НСтр("ru = 'В результате отправки не получено имя файла отправленного документа на сервере СДО.'; uk = 'В результаті відправки не отримано ім''я файла відправленого документа на сервері СДО.'");
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						Если ОтправкаМетодомSendAns Тогда
							Если ЗначениеЗаполнено(лРезультатОтправкиДокумента.AnsFileName) Тогда
								лИмяФайлаКвитанции = лРезультатОтправкиДокумента.AnsFileName;
							Иначе
								ДанныеДокумента.ЕстьОшибки = Истина;
								
								Замечание = НСтр("ru = 'В результате отправки не получено имя файла отправленного документа на сервере СДО.'; uk = 'В результаті відправки не отримано ім''я файла відправленого документа на сервері СДО.'");
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								
								Продолжить;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
					СобытиеОтправки = Перечисления.скEDI_СобытияЭлектронныхДокументов.Отправка;
				КонецЕсли;
			ИначеЕсли ВариантОтправки = 7 Тогда // 7 - ПервичныйДокумент Квитанции Контрагенту
				Если СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО") Тогда
					Если ТипЗнч(ПараметрыСобытийКвитанции) = Тип("Структура") Тогда
						тСобытиеПеред = ПараметрыСобытийКвитанции.СобытиеПеред;
						тОрганизация = ПараметрыСобытийКвитанции.Организация;
						тВидЭлектронногоДокумента = ПараметрыСобытийКвитанции.ВидЭлектронногоДокумента;
						тВхИсх = ПараметрыСобытийКвитанции.ВхИсх;
						тГдеСоздан = ПараметрыСобытийКвитанции.ГдеСоздан;
						тЭлектронныйДокумент = ПараметрыСобытийКвитанции.ЭлектронныйДокумент;
						тСостояние = ПараметрыСобытийКвитанции.Состояние;
						тДокумент1С = ПараметрыСобытийКвитанции.Документ1С;
						Если ТипЗнч(ПараметрыСобытийКвитанции.МассивВложений) = Тип("Массив") Тогда
							тМассивВложений = ПараметрыСобытийКвитанции.МассивВложений;
						Иначе
							Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
								тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
							Иначе
								тМассивВложений = Новый Массив;
							КонецЕсли;
							ПараметрыСобытийКвитанции.Вставить("МассивВложений", тМассивВложений);
						КонецЕсли;
						тМассивПодписейДляОбработкиСобытий = ПолучитьМассивПодписейДляОбработкиСобытий(тЭлектронныйДокумент);
						ПараметрыСобытийКвитанции.Вставить("МассивПодписей", тМассивПодписейДляОбработкиСобытий);
						ПричинаОтказа = "";
						Если не ОбработатьСобытие_ПередОтправкойКвитанции(тСобытиеПеред, тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписейДляОбработкиСобытий, тДокумент1С, тМассивВложений, ПричинаОтказа) Тогда
							Отказ = Истина;
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ПричинаОтказа);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ПричинаОтказа);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					
					
					//Если НЕ ДанныеДокумента.ЕстьОшибки Тогда
					Если Истина Тогда
						// Отправить запрос EDI провайдеру, обработать результат запроса.
						лПараметрыОтправкиКвитанции = Новый Структура;
						лПараметрыОтправкиКвитанции.Вставить("Edrpou",    лОрганизацияEDI.Код);
						лПараметрыОтправкиКвитанции.Вставить("Dept",      лОрганизацияEDI.Филиал);
						лПараметрыОтправкиКвитанции.Вставить("Name",      НаименованиеОрганизацииДляОтправки(лОрганизацияEDI));
						лПараметрыОтправкиКвитанции.Вставить("PrgId",     лОрганизацияEDI.ИдентификаторПрограммы);
						лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ЭлектронныйДокумент.ЕДРПОУКонтрагента);
						лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ЭлектронныйДокумент.ФилиалКонтрагента);
						СтрокаПодключенияEDI = Неопределено;
						СерверEDI = Неопределено;
						ПортEDI = Неопределено;
						ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиКвитанции, лНастройкиПодписиШифрованияДляТекущейОрганизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
						//лПараметрыОтправкиКвитанции.Вставить("Cert",      лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСертификата);
						//лПараметрыОтправкиКвитанции.Вставить("Key",       лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСекретногоКлюча);
						//лПараметрыОтправкиКвитанции.Вставить("Password",  лНастройкиПодписиШифрованияДляТекущейОрганизации.ПарольСекретногоКлюча);
						лПараметрыОтправкиКвитанции.Вставить("MedocKvt",  ТелоКвитанции);
						
						Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
						ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
							//лПараметрыОтправкиКвитанции.Вставить("MedocBody", ТелоДокумента);
						ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
							лПараметрыОтправкиКвитанции.Вставить("MedocBody", ТелоДокумента);
							Если ЗначениеЗаполнено(ИзображениеДокумента) Тогда				
								лПараметрыПередаваемогоPDFПредставленияДокумента = Новый Структура;
								лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("FileName", "Form.pdf");
								лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("Body", ИзображениеДокумента);
								лПараметрыОтправкиКвитанции.Вставить("ImageBody", лПараметрыПередаваемогоPDFПредставленияДокумента);
							КонецЕсли;
							
							МассивВложений = Новый Массив;
							Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента1) Тогда
								МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента1, ВложениеДокумента1));
							КонецЕсли;
							Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента2) Тогда
								МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента2, ВложениеДокумента2));
							КонецЕсли;
							Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента3) Тогда
								МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента3, ВложениеДокумента3));
							КонецЕсли;
							Если ТипЗнч(МассивВложенийДокумента4) = Тип("Массив") или ТипЗнч(МассивВложенийДокумента4) = Тип("ФиксированныйМассив") Тогда
								Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокумента4 Цикл
									МассивВложений.Добавить(Новый Структура("FileName,Body", ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента, ЭлементМассиваВложенийДокумента4.ВложениеДокумента));
								КонецЦикла;
							КонецЕсли;
							
							Если МассивВложений.Количество() > 0 Тогда
								лПараметрыОтправкиКвитанции.Вставить("AttachmentBody", МассивВложений);
							КонецЕсли;
							
							лПараметрыОтправкиКвитанции.Вставить("SignImages", ПолучитьМассивДанныеПоПодписям(ЭлектронныйДокумент));
						КонецЕсли;
						лПараметрыОтправкиКвитанции.Вставить("FileName",  ЭлектронныйДокумент.ИмяФайла);
						
						DocVer = -1;
						РежимСинхронизации = Ложь;
						ПолучитьРежимСинхронизации(РежимСинхронизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
						Если РежимСинхронизации Тогда
							DocVer = ПолучитьАктуальныйDocVer(ЭлектронныйДокумент);
						КонецЕсли;
						ИмяФайлаКвитанции = "";
						DocVerКвитанции = 0;
						
						ОтправкаПоМаршруту = Ложь;
						МассивОтправокПоМаршруту = Неопределено;
						МассивИзмененийВМаршруте = Неопределено;
						Если ЭлектронныйДокумент.IsMultisided Тогда
							Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
								ОтправкаПоМаршруту = Истина;
								МассивОтправокПоМаршруту = Новый Массив;
								МассивИзмененийВМаршруте = Новый Массив;
								
								ПозицияВМаршруте = ЭлектронныйДокумент.RoutePosition;
								Если ПозицияВМаршруте < ЭлектронныйДокумент.Маршрут.Количество() Тогда
									ЭлементМассиваИзмененийВМаршруте = Новый Структура;
									ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
									ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван"));
									МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
								КонецЕсли;
								
								ПозицияВМаршруте = ЭлектронныйДокумент.RoutePosition + 1;
								Если ПозицияВМаршруте < ЭлектронныйДокумент.Маршрут.Количество() Тогда
									ТекМаршрут = ЭлектронныйДокумент.Маршрут.Получить(ПозицияВМаршруте);
									
									//Если ТипЗнч(ПараметрыСозданияКвитанции) = Тип("Структура") Тогда
									//	ПараметрыСозданияКвитанции.Вставить("RcvEdrpou", ТекМаршрут.ЕДРПОУКонтрагента);
									//	ПараметрыСозданияКвитанции.Вставить("RcvDept",   ТекМаршрут.ФилиалКонтрагента);
									//	
									//	РезультатСозданияКвитанции = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/makekvt", ПараметрыСозданияКвитанции);
									//	Если РезультатСозданияКвитанции.Code <> 0 Тогда
									//		лПараметрыОтправкиКвитанции.Вставить("MedocKvt", ТелоКвитанции);
									//		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка создания квитанции'; uk = 'Помилка створення квитанції'") + ": " + РезультатСозданияКвитанции.Message);
									//	ИначеЕсли ЗначениеЗаполнено(РезультатСозданияКвитанции.Body) Тогда
									//		лПараметрыОтправкиКвитанции.Вставить("MedocKvt", РезультатСозданияКвитанции.Body);
									//	Иначе
									//		лПараметрыОтправкиКвитанции.Вставить("MedocKvt", ТелоКвитанции);
									//	КонецЕсли;
									//КонецЕсли;
									
									//лПараметрыОтправкиКвитанции.Удалить("MedocKvt");
									//лПараметрыОтправкиКвитанции.Вставить("ToNextHop", Истина);
									лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ТекМаршрут.ЕДРПОУКонтрагента);
									лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ТекМаршрут.ФилиалКонтрагента);
									лПараметрыОтправкиКвитанции.Вставить("RcvName",   НаименованиеКонтрагентаДляОтправки(ТекМаршрут.ЕДРПОУКонтрагента, ТекМаршрут.ФилиалКонтрагента));
									
									ЭлементМассиваИзмененийВМаршруте = Новый Структура;
									ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
									ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван"));
									МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
									лСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван");
									
									Если РежимСинхронизации Тогда
										лПараметрыОтправкиКвитанции.Вставить("DocVer", DocVer);
									КонецЕсли;
									лРезультатОтправкиОтвета = ОтправитьОтветПоДокументуСПомощьюEDIПровайдера(лПараметрыОтправкиКвитанции, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
									Если лРезультатОтправкиОтвета = Неопределено Тогда	
										ДанныеДокумента.ЕстьОшибки = Истина;				
										
										Замечание = НСтр("ru = 'Не удалось отправить квитанцию по документу.'; uk = 'Не вдалось відправити квитанцію по документу.'");
										ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
										
										ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
										ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
										ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
										
										Продолжить;
									Иначе
										ИмяФайлаКвитанции = лРезультатОтправкиОтвета.ИмяФайла;
										DocVerКвитанции = лРезультатОтправкиОтвета.DocVer;
										ЕстьОтправленыеКвитанции = Истина;
										
										ИнформацияООтправленойКвитанции = НСтр("ru = 'Повторная отправка квитанции'; uk = 'Повторна відправка квитанції'");
										Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
											ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + " " + НСтр("ru = 'о блокировании'; uk = 'про блокування'");
										ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
											ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + " " + НСтр("ru = 'об отклонении'; uk = 'про відхилення'");
										ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
											ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + " " + НСтр("ru = 'об утверждении'; uk = 'про затвердженння'");
										КонецЕсли;
										ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции
										+ Символы.ПС
										+ НСтр("ru = 'Получатель: '; uk = 'Одержувач: '") + ЭлектронныйДокумент.ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ЭлектронныйДокумент.ФилиалКонтрагента), "(" + ЭлектронныйДокумент.ФилиалКонтрагента + ")", "");
										ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + "
										|
										|"
										+ НСтр("ru = 'Имя файла: '; uk = 'Ім''я файлу: '") + ЭлектронныйДокумент.ИмяФайла + "
										|"
										+ НСтр("ru = 'Имя файла квитанции: '; uk = 'Ім''я файлу квитанції: '") + лРезультатОтправкиОтвета.ИмяФайла;
										
										ЗафиксироватьСобытиеЭлектронногоДокумента(ЭлектронныйДокумент, Перечисления.скEDI_СобытияЭлектронныхДокументов.Отправка, ИнформацияООтправленойКвитанции, ДатаОтправки, DocVerКвитанции, ЭлектронныйДокумент.ИмяФайла, ИмяФайлаКвитанции);
									КонецЕсли;
								КонецЕсли;
							Иначе
								ОтправкаПоМаршруту = Истина;
								МассивОтправокПоМаршруту = Новый Массив;
								МассивИзмененийВМаршруте = Новый Массив;
								ЕстьОтправленыеКвитанции = Ложь;
								
								ИнформацияООтправленойКвитанции = "";
								ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + НСтр("ru = 'Имя файла электронного документа: '; uk = 'Ім''я файлу електронного документу: '") + ЭлектронныйДокумент.ИмяФайла;
								
								лПараметрыОтправкиКвитанции.Вставить("RoutePosition", ЭлектронныйДокумент.RoutePosition);
								Для ПозицияВМаршруте = 0 по ЭлектронныйДокумент.RoutePosition - 1 Цикл
									ТекМаршрут = ЭлектронныйДокумент.Маршрут.Получить(ПозицияВМаршруте);
									
									//Если ТипЗнч(ПараметрыСозданияКвитанции) = Тип("Структура") Тогда
									//	ПараметрыСозданияКвитанции.Вставить("RcvEdrpou", ТекМаршрут.ЕДРПОУКонтрагента);
									//	ПараметрыСозданияКвитанции.Вставить("RcvDept",   ТекМаршрут.ФилиалКонтрагента);
									//	
									//	РезультатСозданияКвитанции = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/makekvt", ПараметрыСозданияКвитанции);
									//	Если РезультатСозданияКвитанции.Code <> 0 Тогда
									//		лПараметрыОтправкиКвитанции.Вставить("MedocKvt", ТелоКвитанции);
									//		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка создания квитанции'; uk = 'Помилка створення квитанції'") + ": " + РезультатСозданияКвитанции.Message);
									//	ИначеЕсли ЗначениеЗаполнено(РезультатСозданияКвитанции.Body) Тогда
									//		лПараметрыОтправкиКвитанции.Вставить("MedocKvt", РезультатСозданияКвитанции.Body);
									//	Иначе
									//		лПараметрыОтправкиКвитанции.Вставить("MedocKvt", ТелоКвитанции);
									//	КонецЕсли;
									//КонецЕсли;
									
									лПараметрыОтправкиКвитанции.Вставить("ToNextHop", Ложь);
									//////лПараметрыОтправкиКвитанции.Вставить("IsMultiChange", Истина);//?
									лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ТекМаршрут.ЕДРПОУКонтрагента);
									лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ТекМаршрут.ФилиалКонтрагента);
									лПараметрыОтправкиКвитанции.Вставить("RcvName",   НаименованиеКонтрагентаДляОтправки(ТекМаршрут.ЕДРПОУКонтрагента, ТекМаршрут.ФилиалКонтрагента));
									Если РежимСинхронизации Тогда
										лПараметрыОтправкиКвитанции.Вставить("DocVer", DocVer);
									КонецЕсли;
									
									лРезультатОтправкиОтвета = ОтправитьОтветПоДокументуСПомощьюEDIПровайдера(лПараметрыОтправкиКвитанции, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
									Если лРезультатОтправкиОтвета = Неопределено Тогда	
										ДанныеДокумента.ЕстьОшибки = Истина;				
										
										Замечание = НСтр("ru = 'Не удалось отправить квитанцию по документу.'; uk = 'Не вдалось відправити квитанцію по документу.'");
										ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
										
										ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
										ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
										ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
										
										//Продолжить;
									Иначе
										//Если Не ЕстьОтправленыеКвитанции Тогда
											ИмяФайлаКвитанции = лРезультатОтправкиОтвета.ИмяФайла;
											DocVerКвитанции = лРезультатОтправкиОтвета.DocVer;
											ЕстьОтправленыеКвитанции = Истина;
										//КонецЕсли;
										DocVer = лРезультатОтправкиОтвета.DocVer;
										
										ЭлементМассиваОтправокПоМаршруту = Новый Структура;
										ЭлементМассиваОтправокПоМаршруту.Вставить("ЕДРПОУКонтрагента", ТекМаршрут.ЕДРПОУКонтрагента);
										ЭлементМассиваОтправокПоМаршруту.Вставить("ФилиалКонтрагента", ТекМаршрут.ФилиалКонтрагента);
										ЭлементМассиваОтправокПоМаршруту.Вставить("ИмяФайла", лРезультатОтправкиОтвета.ИмяФайла);
										ЭлементМассиваОтправокПоМаршруту.Вставить("DocVer", лРезультатОтправкиОтвета.DocVer);
										ЭлементМассиваОтправокПоМаршруту.Вставить("RoutePosition", ПозицияВМаршруте);
										ЭлементМассиваОтправокПоМаршруту.Вставить("ToNextHop", Ложь);
										МассивОтправокПоМаршруту.Добавить(ЭлементМассиваОтправокПоМаршруту);
										
										Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
											ЭлементМассиваИзмененийВМаршруте = Новый Структура;
											ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
											ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоОтклонение"));
											МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
										КонецЕсли;
										
										ИнформацияООтправленойКвитанции = НСтр("ru = 'Повторная отправка квитанции'; uk = 'Повторна відправка квитанції'");
										Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
											ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + " " + НСтр("ru = 'о блокировании'; uk = 'про блокування'");
										ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
											ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + " " + НСтр("ru = 'об отклонении'; uk = 'про відхилення'");
										ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
											ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + " " + НСтр("ru = 'об утверждении'; uk = 'про затвердженння'");
										КонецЕсли;
										ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции
										+ Символы.ПС
										+ НСтр("ru = 'Получатель'; uk = 'Одержувач'") + "(" + Строка(ПозицияВМаршруте) + ")" + ": " + ТекМаршрут.ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ТекМаршрут.ФилиалКонтрагента), "(" + ТекМаршрут.ФилиалКонтрагента + ")", "")
										+ Символы.ПС
										+ НСтр("ru = 'Имя файла квитанции: '; uk = 'Ім''я файлу квитанції: '") + лРезультатОтправкиОтвета.ИмяФайла;
										
										ЗафиксироватьСобытиеЭлектронногоДокумента(ЭлектронныйДокумент, Перечисления.скEDI_СобытияЭлектронныхДокументов.Отправка, ИнформацияООтправленойКвитанции, ДатаОтправки, DocVerКвитанции, ЭлектронныйДокумент.ИмяФайла, ИмяФайлаКвитанции);
									КонецЕсли;
								КонецЦикла;
								
								Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
									ПозицияВМаршруте = ЭлектронныйДокумент.RoutePosition;
									Если ПозицияВМаршруте < ЭлектронныйДокумент.Маршрут.Количество() Тогда
										ЭлементМассиваИзмененийВМаршруте = Новый Структура;
										ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
										ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоОтклонение"));
										МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
									КонецЕсли;
								ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
									ПозицияВМаршруте = ЭлектронныйДокумент.RoutePosition;
									Если ПозицияВМаршруте < ЭлектронныйДокумент.Маршрут.Количество() Тогда
										ЭлементМассиваИзмененийВМаршруте = Новый Структура;
										ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
										ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение"));
										МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
									КонецЕсли;
									
									ПозицияВМаршруте = ЭлектронныйДокумент.RoutePosition + 1;
									Если ПозицияВМаршруте < ЭлектронныйДокумент.Маршрут.Количество() Тогда
										ТекМаршрут = ЭлектронныйДокумент.Маршрут.Получить(ПозицияВМаршруте);
										
										//Если ТипЗнч(ПараметрыСозданияКвитанции) = Тип("Структура") Тогда
										//	ПараметрыСозданияКвитанции.Вставить("RcvEdrpou", ТекМаршрут.ЕДРПОУКонтрагента);
										//	ПараметрыСозданияКвитанции.Вставить("RcvDept",   ТекМаршрут.ФилиалКонтрагента);
										//	
										//	РезультатСозданияКвитанции = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/makekvt", ПараметрыСозданияКвитанции);
										//	Если РезультатСозданияКвитанции.Code <> 0 Тогда
										//		лПараметрыОтправкиКвитанции.Вставить("MedocKvt", ТелоКвитанции);
										//		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка создания квитанции'; uk = 'Помилка створення квитанції'") + ": " + РезультатСозданияКвитанции.Message);
										//	ИначеЕсли ЗначениеЗаполнено(РезультатСозданияКвитанции.Body) Тогда
										//		лПараметрыОтправкиКвитанции.Вставить("MedocKvt", РезультатСозданияКвитанции.Body);
										//	Иначе
										//		лПараметрыОтправкиКвитанции.Вставить("MedocKvt", ТелоКвитанции);
										//	КонецЕсли;
										//КонецЕсли;
										
										лПараметрыОтправкиКвитанции.Удалить("MedocKvt");
										лПараметрыОтправкиКвитанции.Вставить("ToNextHop", Истина);
										лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ТекМаршрут.ЕДРПОУКонтрагента);
										лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ТекМаршрут.ФилиалКонтрагента);
										лПараметрыОтправкиКвитанции.Вставить("RcvName",   НаименованиеКонтрагентаДляОтправки(ТекМаршрут.ЕДРПОУКонтрагента, ТекМаршрут.ФилиалКонтрагента));
										Если РежимСинхронизации Тогда
											лПараметрыОтправкиКвитанции.Вставить("DocVer", DocVer);
										КонецЕсли;
										лРезультатОтправкиОтвета = ОтправитьОтветПоДокументуСПомощьюEDIПровайдера(лПараметрыОтправкиКвитанции, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
										Если лРезультатОтправкиОтвета = Неопределено Тогда	
											ДанныеДокумента.ЕстьОшибки = Истина;				
											
											Замечание = НСтр("ru = 'Не удалось отправить квитанцию по документу.'; uk = 'Не вдалось відправити квитанцію по документу.'");
											ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
											
											ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
											ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
											ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
											
											//Продолжить;
										Иначе
											//Если Не ЕстьОтправленыеКвитанции Тогда
												ИмяФайлаКвитанции = лРезультатОтправкиОтвета.ИмяФайла;
												DocVerКвитанции = лРезультатОтправкиОтвета.DocVer;
												ЕстьОтправленыеКвитанции = Истина;
											//КонецЕсли;
											
											ЭлементМассиваОтправокПоМаршруту = Новый Структура;
											ЭлементМассиваОтправокПоМаршруту.Вставить("ЕДРПОУКонтрагента", ТекМаршрут.ЕДРПОУКонтрагента);
											ЭлементМассиваОтправокПоМаршруту.Вставить("ФилиалКонтрагента", ТекМаршрут.ФилиалКонтрагента);
											ЭлементМассиваОтправокПоМаршруту.Вставить("ИмяФайла", лРезультатОтправкиОтвета.ИмяФайла);
											ЭлементМассиваОтправокПоМаршруту.Вставить("DocVer", лРезультатОтправкиОтвета.DocVer);
											ЭлементМассиваОтправокПоМаршруту.Вставить("RoutePosition", ПозицияВМаршруте);
											ЭлементМассиваОтправокПоМаршруту.Вставить("ToNextHop", Истина);
											МассивОтправокПоМаршруту.Добавить(ЭлементМассиваОтправокПоМаршруту);
											
											ЭлементМассиваИзмененийВМаршруте = Новый Структура;
											ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
											ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен"));
											МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
											лСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
											
											ИнформацияООтправленойКвитанции = НСтр("ru = 'Повторная отправка квитанции'; uk = 'Повторна відправка квитанції'");
											Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
												ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + " " + НСтр("ru = 'о блокировании'; uk = 'про блокування'");
											ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
												ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + " " + НСтр("ru = 'об отклонении'; uk = 'про відхилення'");
											ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
												ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + " " + НСтр("ru = 'об утверждении'; uk = 'про затвердженння'");
											КонецЕсли;
											ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции
											+ Символы.ПС
											+ НСтр("ru = 'Получатель'; uk = 'Одержувач'") + "(" + Строка(ПозицияВМаршруте) + ")" + ": " + ТекМаршрут.ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ТекМаршрут.ФилиалКонтрагента), "(" + ТекМаршрут.ФилиалКонтрагента + ")", "")
											+ Символы.ПС
											+ НСтр("ru = 'Имя файла квитанции: '; uk = 'Ім''я файлу квитанції: '") + лРезультатОтправкиОтвета.ИмяФайла;
											
											ЗафиксироватьСобытиеЭлектронногоДокумента(ЭлектронныйДокумент, Перечисления.скEDI_СобытияЭлектронныхДокументов.Отправка, ИнформацияООтправленойКвитанции, ДатаОтправки, DocVerКвитанции, ЭлектронныйДокумент.ИмяФайла, ИмяФайлаКвитанции);
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
							
							Если не ЕстьОтправленыеКвитанции Тогда
								Продолжить;
							КонецЕсли;
						Иначе
							лПараметрыОтправкиКвитанции.Вставить("RcvName", НаименованиеКонтрагентаДляОтправки(ЭлектронныйДокумент.ЕДРПОУКонтрагента, ЭлектронныйДокумент.ФилиалКонтрагента));
							Если РежимСинхронизации Тогда
								лПараметрыОтправкиКвитанции.Вставить("DocVer", DocVer);
							КонецЕсли;
							лРезультатОтправкиОтвета = ОтправитьОтветПоДокументуСПомощьюEDIПровайдера(лПараметрыОтправкиКвитанции, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
							Если лРезультатОтправкиОтвета = Неопределено Тогда	
								ДанныеДокумента.ЕстьОшибки = Истина;				
								
								Замечание = НСтр("ru = 'Не удалось отправить квитанцию по документу.'; uk = 'Не вдалось відправити квитанцію по документу.'");
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								
								Продолжить;
							Иначе
								ИмяФайлаКвитанции = лРезультатОтправкиОтвета.ИмяФайла;
								DocVerКвитанции = лРезультатОтправкиОтвета.DocVer;
								
								ИнформацияООтправленойКвитанции = НСтр("ru = 'Повторная отправка квитанции'; uk = 'Повторна відправка квитанції'");
								Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
									ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + " " + НСтр("ru = 'о блокировании'; uk = 'про блокування'");
								ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
									ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + " " + НСтр("ru = 'об отклонении'; uk = 'про відхилення'");
								ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
									ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + " " + НСтр("ru = 'об утверждении'; uk = 'про затвердженння'");
								КонецЕсли;
								ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции
								+ Символы.ПС
								+ НСтр("ru = 'Получатель: '; uk = 'Одержувач: '") + ЭлектронныйДокумент.ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ЭлектронныйДокумент.ФилиалКонтрагента), "(" + ЭлектронныйДокумент.ФилиалКонтрагента + ")", "");
								ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + "
								|
								|"
								+ НСтр("ru = 'Имя файла: '; uk = 'Ім''я файлу: '") + ЭлектронныйДокумент.ИмяФайла + "
								|"
								+ НСтр("ru = 'Имя файла квитанции: '; uk = 'Ім''я файлу квитанції: '") + лРезультатОтправкиОтвета.ИмяФайла;
								
								ЗафиксироватьСобытиеЭлектронногоДокумента(ЭлектронныйДокумент, Перечисления.скEDI_СобытияЭлектронныхДокументов.Отправка, ИнформацияООтправленойКвитанции, ДатаОтправки, DocVerКвитанции, ЭлектронныйДокумент.ИмяФайла, ИмяФайлаКвитанции);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если ТипЗнч(ПараметрыСобытийКвитанции) = Тип("Структура") Тогда
						тСобытиеПри = ПараметрыСобытийКвитанции.СобытиеПри;
						тОрганизация = ПараметрыСобытийКвитанции.Организация;
						тВидЭлектронногоДокумента = ПараметрыСобытийКвитанции.ВидЭлектронногоДокумента;
						тВхИсх = ПараметрыСобытийКвитанции.ВхИсх;
						тГдеСоздан = ПараметрыСобытийКвитанции.ГдеСоздан;
						тЭлектронныйДокумент = ЭлектронныйДокумент;
						тСостояние = ЭлектронныйДокумент.Состояние;
						тДокумент1С = ЭлектронныйДокумент.Документ1С;
						тМассивВложений = Неопределено;
						ПараметрыСобытийКвитанции.Свойство("МассивВложений", тМассивВложений);
						Если ТипЗнч(тМассивВложений) <> Тип("Массив") Тогда
							Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
								тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
							Иначе
								тМассивВложений = Новый Массив;
							КонецЕсли;
							ПараметрыСобытийКвитанции.Вставить("МассивВложений", тМассивВложений);
						КонецЕсли;
						тМассивПодписей = Неопределено;
						ПараметрыСобытийКвитанции.Свойство("МассивПодписей", тМассивПодписей);
						Если ТипЗнч(тМассивПодписей) <> Тип("Массив") Тогда
							тМассивПодписей = Новый Массив;
							ПараметрыСобытийКвитанции.Вставить("МассивПодписей", тМассивПодписей);
						КонецЕсли;
						ОбработатьСобытие_ПриОтправкеКвитанции(тСобытиеПри, тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписей, тДокумент1С, тМассивВложений);
					КонецЕсли;
					
					
					Продолжить;
				Иначе
					Продолжить;
				КонецЕсли;
			ИначеЕсли СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезДФС") Тогда
				
				Если ЭлектронныйДокумент.ИмяФайлаДФС = "" Тогда
					лИмяФайлаДФС = ПолучитьИмяФайлаНалоговогоДокумента(ДанныеДокумента.ВидЭлектронногоДокумента, ТелоДокумента, ЖурналОперации);
				Иначе
					лИмяФайлаДФС = ЭлектронныйДокумент.ИмяФайлаДФС;
				КонецЕсли;
				лИмяФайла = лИмяФайлаДФС;
				
				
				//Если ВариантОтправки = 2 или ВариантОтправки = 3 или ВариантОтправки = 4 Тогда  //????
				//	Помилка відправки SWINED_DOC_ALREADY_REGISTERED
				//9	Помилка відправки SWINED_ORIG_DOC_ABSENT
				Если ВариантОтправки = 2 или ВариантОтправки = 3 Тогда  //????
					
					лПараметрыОтправкиДокумента = Новый Структура;
					лПараметрыОтправкиДокумента.Вставить("Edrpou",    лОрганизацияEDI.Код);
					лПараметрыОтправкиДокумента.Вставить("Dept",      лОрганизацияEDI.Филиал);
					ЕДРПОУКонтрагента = ЭлектронныйДокумент.ЕДРПОУКонтрагента;
					ФилиалКонтрагента = ЭлектронныйДокумент.ФилиалКонтрагента;
					лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
					лПараметрыОтправкиДокумента.Вставить("RcvDept",   ФилиалКонтрагента);
					СтрокаПодключенияEDI = Неопределено;
					СерверEDI = Неопределено;
					ПортEDI = Неопределено;
					ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиДокумента, лНастройкиПодписиШифрованияДляТекущейОрганизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					//лПараметрыОтправкиДокумента.Вставить("Cert",      лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСертификата);
					//лПараметрыОтправкиДокумента.Вставить("Key",       лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСекретногоКлюча);
					//лПараметрыОтправкиДокумента.Вставить("Password",  лНастройкиПодписиШифрованияДляТекущейОрганизации.ПарольСекретногоКлюча);
					лПараметрыОтправкиДокумента.Вставить("Body",      ТелоДокумента);
					
					лРезультатОтправкиДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("govrk/send", лПараметрыОтправкиДокумента, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					Если лРезультатОтправкиДокумента.Code <> 0 Тогда
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						Замечание = НСтр("ru = 'Ошибка отправки документа:'; uk = 'Помилка відправки документа:'") + " " + лРезультатОтправкиДокумента.Message;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если ВариантОтправки = 4 или ВариантОтправки = 5 или ВариантОтправки = 6 Тогда
					Запрос = Новый Запрос;
					Если ВариантОтправки = 4 или ВариантОтправки = 5 Тогда
						Запрос.Текст = "ВЫБРАТЬ
						               |	скEDI_Квитанция.Ссылка,
						               |	скEDI_Квитанция.ТелоКвитанции,
						               |	скEDI_Квитанция.НомерКвитанции
						               |ИЗ
						               |	Документ.скEDI_Квитанция КАК скEDI_Квитанция
						               |ГДЕ
						               |	скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
						               |	И скEDI_Квитанция.ВидКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыКвитанций.ДФС)
						               |	И скEDI_Квитанция.ФинальнаяКвитанция";
					ИначеЕсли ВариантОтправки = 6 Тогда
						Запрос.Текст = "ВЫБРАТЬ
						               |	скEDI_Квитанция.Ссылка,
						               |	скEDI_Квитанция.ТелоКвитанции,
						               |	скEDI_Квитанция.НомерКвитанции
						               |ИЗ
						               |	Документ.скEDI_Квитанция КАК скEDI_Квитанция
						               |ГДЕ
						               |	скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
						               |	И скEDI_Квитанция.ВидКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыКвитанций.ДФС)
						               |	И скEDI_Квитанция.ТипКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыКвитанцийДФС.РегистрацияОстановлена)";
					КонецЕсли;
					Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
					ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
					Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
						//МассивКвитанций.Добавить(ВыборкаРезультатаЗапроса.ТелоКвитанции);
						лПараметрыОтправкиКвитанции = Новый Структура;
						лПараметрыОтправкиКвитанции.Вставить("FileName",  лИмяФайлаДФС);
						лПараметрыОтправкиКвитанции.Вставить("KvtNum",    ВыборкаРезультатаЗапроса.НомерКвитанции);
						лПараметрыОтправкиКвитанции.Вставить("Edrpou",    лОрганизацияEDI.Код);
						лПараметрыОтправкиКвитанции.Вставить("Dept",      лОрганизацияEDI.Филиал);
						ЕДРПОУКонтрагента = ЭлектронныйДокумент.ЕДРПОУКонтрагента;
						ФилиалКонтрагента = ЭлектронныйДокумент.ФилиалКонтрагента;
						лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
						лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ФилиалКонтрагента);
						лПараметрыОтправкиКвитанции.Вставить("Body",      ВыборкаРезультатаЗапроса.ТелоКвитанции);
						СтрокаПодключенияEDI = Неопределено;
						СерверEDI = Неопределено;
						ПортEDI = Неопределено;
						ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиКвитанции, лНастройкиПодписиШифрованияДляТекущейОрганизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
						//лПараметрыОтправкиКвитанции.Вставить("Cert",      лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСертификата);
						//лПараметрыОтправкиКвитанции.Вставить("Key",       лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСекретногоКлюча);
						//лПараметрыОтправкиКвитанции.Вставить("Password",  лНастройкиПодписиШифрованияДляТекущейОрганизации.ПарольСекретногоКлюча);
						
						лРезультатОтправкиКвитанции = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("govrk/sendkvt", лПараметрыОтправкиКвитанции, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
						Если лРезультатОтправкиКвитанции.Code <> 0 Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							Замечание = НСтр("ru = 'Ошибка отправки квитанции:'; uk = 'Помилка відправки квитанції:'") + " " + лРезультатОтправкиКвитанции.Message;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							
							//Продолжить;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если не ДанныеДокумента.ЕстьОшибки Тогда
					КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
				КонецЕсли;
				СобытиеОтправки = Перечисления.скEDI_СобытияЭлектронныхДокументов.ОтправкаКонтрагентуЧерезДФС;
			ИначеЕсли СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО") Тогда
				Если ЭлектронныйДокумент.ИмяФайлаДФС = "" Тогда
					лИмяФайлаДФС = ПолучитьИмяФайлаНалоговогоДокумента(ДанныеДокумента.ВидЭлектронногоДокумента, ТелоДокумента, ЖурналОперации);
				Иначе
					лИмяФайлаДФС = ЭлектронныйДокумент.ИмяФайлаДФС;
				КонецЕсли;
				
				лПараметрыОтправкиДокумента = Новый Структура;
				лПараметрыОтправкиДокумента.Вставить("Edrpou",    лОрганизацияEDI.Код);
				лПараметрыОтправкиДокумента.Вставить("Dept",      лОрганизацияEDI.Филиал);
				лПараметрыОтправкиДокумента.Вставить("Name",      НаименованиеОрганизацииДляОтправки(лОрганизацияEDI));
				лПараметрыОтправкиДокумента.Вставить("PrgId",     лОрганизацияEDI.ИдентификаторПрограммы);
				ЕДРПОУКонтрагента = ЭлектронныйДокумент.ЕДРПОУКонтрагента;
				ФилиалКонтрагента = ЭлектронныйДокумент.ФилиалКонтрагента;
				лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
				лПараметрыОтправкиДокумента.Вставить("RcvDept",   ФилиалКонтрагента);
				лПараметрыОтправкиДокумента.Вставить("RcvName",   НаименованиеКонтрагентаДляОтправки(ЕДРПОУКонтрагента, ФилиалКонтрагента));
				СтрокаПодключенияEDI = Неопределено;
				СерверEDI = Неопределено;
				ПортEDI = Неопределено;
				ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиДокумента, лНастройкиПодписиШифрованияДляТекущейОрганизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
				//лПараметрыОтправкиДокумента.Вставить("Cert",      лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСертификата);
				//лПараметрыОтправкиДокумента.Вставить("Key",       лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСекретногоКлюча);
				//лПараметрыОтправкиДокумента.Вставить("Password",  лНастройкиПодписиШифрованияДляТекущейОрганизации.ПарольСекретногоКлюча);
				лПараметрыОтправкиДокумента.Вставить("GovBody",   ТелоДокумента);
				лПараметрыОтправкиДокумента.Вставить("GovFileName", лИмяФайлаДФС);
				
				Если ВариантОтправки = 4 или ВариантОтправки = 5 Тогда
					МассивКвитанций = Новый Массив;
					
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					               |	скEDI_Квитанция.Ссылка,
					               |	скEDI_Квитанция.ТелоКвитанции
					               |ИЗ
					               |	Документ.скEDI_Квитанция КАК скEDI_Квитанция
					               |ГДЕ
					               |	скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
					               |	И скEDI_Квитанция.ВидКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыКвитанций.ДФС)
					               |	И скEDI_Квитанция.ФинальнаяКвитанция";
					Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
					ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
					Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
						МассивКвитанций.Добавить(ВыборкаРезультатаЗапроса.ТелоКвитанции);
					КонецЦикла;
					
					лПараметрыОтправкиДокумента.Вставить("GovKvt", МассивКвитанций);
				ИначеЕсли ВариантОтправки = 6 Тогда
					МассивКвитанций = Новый Массив;
					
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					               |	скEDI_Квитанция.Ссылка,
					               |	скEDI_Квитанция.ТелоКвитанции
					               |ИЗ
					               |	Документ.скEDI_Квитанция КАК скEDI_Квитанция
					               |ГДЕ
					               |	скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
					               |	И скEDI_Квитанция.ВидКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыКвитанций.ДФС)
					               |	И скEDI_Квитанция.ТипКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыКвитанцийДФС.РегистрацияОстановлена)";
					Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
					ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
					Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
						МассивКвитанций.Добавить(ВыборкаРезультатаЗапроса.ТелоКвитанции);
					КонецЦикла;
					
					лПараметрыОтправкиДокумента.Вставить("GovKvt", МассивКвитанций);
				КонецЕсли;
				
				лПараметрыОтправкиДокумента.Вставить("SignImages", ПолучитьМассивДанныеПоПодписям(ДанныеДокумента.ЭлектронныйДокумент));
				
				лРезультатОтправкиДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/send", лПараметрыОтправкиДокумента, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
				Если лРезультатОтправкиДокумента.Code <> 0 Тогда
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					Замечание = НСтр("ru = 'Ошибка отправки документа:'; uk = 'Помилка відправки документа:'") + " " + лРезультатОтправкиДокумента.Message;
					СобытиеОтправкиОписание = лРезультатОтправкиДокумента.Message;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					
					тDocVer = Неопределено;
					Если лРезультатОтправкиДокумента.Свойство("DocVer", тDocVer) Тогда
						Если ЗначениеЗаполнено(тDocVer) Тогда
							лDocVer = тDocVer;
						КонецЕсли;
					КонецЕсли;
					
					тСылкаНаДокумент = Неопределено;
					Если лРезультатОтправкиДокумента.Свойство("DocHref", тСылкаНаДокумент) Тогда
						Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
							лСсылкаНаДокумент = тСылкаНаДокумент;
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(лРезультатОтправкиДокумента.FileName) Тогда
						лИмяФайла = лРезультатОтправкиДокумента.FileName;
						НовоеСостояниеЭлектронногоДокумента = Неопределено;
					Иначе
						Продолжить;
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(лРезультатОтправкиДокумента.FileName) Тогда
					лИмяФайла = лРезультатОтправкиДокумента.FileName;
					
					тDocVer = Неопределено;
					Если лРезультатОтправкиДокумента.Свойство("DocVer", тDocVer) Тогда
						Если ЗначениеЗаполнено(тDocVer) Тогда
							лDocVer = тDocVer;
						КонецЕсли;
					КонецЕсли;
					
					тСылкаНаДокумент = Неопределено;
					Если лРезультатОтправкиДокумента.Свойство("DocHref", тСылкаНаДокумент) Тогда
						Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
							лСсылкаНаДокумент = тСылкаНаДокумент;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					Замечание = НСтр("ru = 'В результате отправки не получено имя файла отправленного документа на сервере СДО.'; uk = 'В результаті відправки не отримано ім''я файла відправленого документа на сервері СДО.'");
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					
					Продолжить;
				КонецЕсли;
				КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
				СобытиеОтправки = Перечисления.скEDI_СобытияЭлектронныхДокументов.Отправка;
			Иначе
				Продолжить;
			КонецЕсли;
			
			лЭлектронныйДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
			Если лЭлектронныйДокументОбъект.ИмяФайла = "" Тогда
				лЭлектронныйДокументОбъект.ИмяФайла  = лИмяФайла;
			КонецЕсли;
			Если лЭлектронныйДокументОбъект.ИмяФайлаДФС = "" Тогда
				Если лИмяФайлаДФС <> "" Тогда
					лЭлектронныйДокументОбъект.ИмяФайлаДФС = лИмяФайлаДФС;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(лDocVer) Тогда
				Если лЭлектронныйДокументОбъект.DocVer = 0 Тогда
					лЭлектронныйДокументОбъект.DocVer  = лDocVer;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(лСсылкаНаДокумент) Тогда
				Если лЭлектронныйДокументОбъект.DocHref = "" Тогда
					лЭлектронныйДокументОбъект.DocHref  = лСсылкаНаДокумент;
				КонецЕсли;
			КонецЕсли;
			СобытиеОтправкиСсылкиНаДокумент = Неопределено;
			ОписаниеПоОтправкеСсылкиНаДокумент = "";
			Если ТипЗнч(МассивОтправкаСсылкиНаДокумент) = Тип("Массив") Тогда
				Если МассивОтправкаСсылкиНаДокумент.Количество() > 0 Тогда
					ОписаниеПоОтправкеСсылкиНаДокумент = НСтр("ru = 'на электронную почту:'; uk = 'на електронну пошту:'");
					Если ЗначениеЗаполнено(лСсылкаНаДокумент) Тогда
						СобытиеОтправкиСсылкиНаДокумент = Перечисления.скEDI_СобытияЭлектронныхДокументов.ОтправкаСсылки;
					КонецЕсли;
					лЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент.Очистить();
					Для Каждого СтрокаМассиваНастроекОтправкаСсылкиНаДокумент из МассивОтправкаСсылкиНаДокумент Цикл
						НоваяСтрокаОтправкаСсылкиНаДокумент = лЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент.Добавить();
						НоваяСтрокаОтправкаСсылкиНаДокумент.ЭлектроннаяПочта = СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта;
						НоваяСтрокаОтправкаСсылкиНаДокумент.Комментарий = СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий;
						
						ОписаниеПоОтправкеСсылкиНаДокумент = ОписаниеПоОтправкеСсылкиНаДокумент + Символы.ПС + СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта;
						Если ЗначениеЗаполнено(СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий) Тогда
							ОписаниеПоОтправкеСсылкиНаДокумент = ОписаниеПоОтправкеСсылкиНаДокумент + " - " + СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			//Если лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленВДФС") Тогда
			//	// не меняем
			//ИначеЕсли лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоКвитанциюОтДФС") Тогда
			//	// не меняем
			//ИначеЕсли лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС") Тогда
			//	// не меняем
			//ИначеЕсли лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонениеОтДФС") Тогда
			//	// не меняем
			//Иначе
			//	Если ВариантОтправки = 3 Тогда
			//		лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленКонтрагентуДляРегистрацииВЕРПН");
			//	Иначе
			//		лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
			//	КонецЕсли;
			//КонецЕсли;
			Если НовоеСостояниеЭлектронногоДокумента <> Неопределено Тогда
				лЭлектронныйДокументОбъект.Состояние = НовоеСостояниеЭлектронногоДокумента;
				
				Если ОбновитьМаршрут Тогда
					ОбновитьМаршрутПредыдущиеСостояния = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение;
					УстановитьПараметрыМаршрутаМногостороннегоДокумента(лЭлектронныйДокументОбъект, Неопределено, ОбновитьМаршрутНомерВМаршруте, НовоеСостояниеЭлектронногоДокумента, ОбновитьМаршрутПредыдущиеСостояния);
				КонецЕсли;
			КонецЕсли;
			
			лЭлектронныйДокументОбъект.ПоследняяОперация = ДатаОтправки;
			ЗаписатьЭлектронныйДокументСПредварительнымПоискомСвязаных(лЭлектронныйДокументОбъект, ДанныеДокумента.ВидЭлектронногоДокумента, ДанныеДокумента.ВидЭлектронногоДокумента.Владелец);
			
			Если НомерСтрокиСодержания >= 0 Тогда
				Если ЗначениеЗаполнено(лИмяФайла) Тогда
					СодержимоеЭлектронныхДокументовМенеджерЗаписи = РегистрыСведений.скEDI_СодержимоеЭлектронныхДокументов.СоздатьМенеджерЗаписи();
					СодержимоеЭлектронныхДокументовМенеджерЗаписи.ЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
					СодержимоеЭлектронныхДокументовМенеджерЗаписи.НомерВерсии = НомерСтрокиСодержания;
					СодержимоеЭлектронныхДокументовМенеджерЗаписи.НомерДополнения = 0;
					СодержимоеЭлектронныхДокументовМенеджерЗаписи.Прочитать();
					
					Если СодержимоеЭлектронныхДокументовМенеджерЗаписи.Выбран() и СодержимоеЭлектронныхДокументовМенеджерЗаписи.ИмяФайла = "" Тогда
						СодержимоеЭлектронныхДокументовМенеджерЗаписи.ИмяФайла = лИмяФайла;
						СодержимоеЭлектронныхДокументовМенеджерЗаписи.DocVer = лDocVer;
						СодержимоеЭлектронныхДокументовМенеджерЗаписи.DocHref = лСсылкаНаДокумент;
						СодержимоеЭлектронныхДокументовМенеджерЗаписи.Записать(Истина);
					Иначе
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи = РегистрыСведений.скEDI_ПовторныеОтправкиЭлектронныхДокументов.СоздатьМенеджерЗаписи();
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.Организация = лОрганизацияEDI;
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.ЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.ИмяФайла = лИмяФайла;
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.НомерВерсии = НомерСтрокиСодержания;
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.Дата = ДатаОтправки;
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.DocVer = лDocVer;
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.DocHref = лСсылкаНаДокумент;
						ПовторныеОтправкиЭлектронныхДокументовМенеджерЗаписи.Записать(Истина);
					КонецЕсли;
				КонецЕсли;
			Иначе
				скEDI_ВнешниеХранилища.СохранитьСодержимоеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка,
					ПолучитьСледующийНомерВерсииСодержанияЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка),
					ТелоДокумента,
					ИзображениеДокумента,
					ВложениеДокумента1,
					ИмяФайлаВложениеДокумента1,
					ВложениеДокумента2,
					ИмяФайлаВложениеДокумента2,
					ВложениеДокумента3,
					ИмяФайлаВложениеДокумента3,
					МассивВложенийДокумента4,
					ТекущаяДата(),
					лИмяФайла,
					лDocVer,
					лСсылкаНаДокумент,
					Ложь,
					Ложь,
					Неопределено,
					Ложь
				);
			КонецЕсли;
			
			// Зафиксировать событие отправки электронного документа.
			лОписаниеПоОтправке = НСтр("ru = 'Документ отправлен'; uk = 'Документ відправлено'")
			+ ?(OnlyHref, " " + НСтр("ru = 'в виде ссылки'; uk = 'у вигляді посилання'"), "")
			+ "
			|"
			+  НСтр("ru = 'Дата и время отправки: '; uk = 'Дата та час відправки: '") + Формат(ДатаОтправки, "ДФ='dd.MM.yyyy HH:mm:ss'") + "
			|"
			+ НСтр("ru = 'Получатель: '; uk = 'Одержувач: '") + ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ФилиалКонтрагента), " (" + ФилиалКонтрагента + ")", "") + "
			|"
			+ НСтр("ru = 'Имя файла: '; uk = 'Ім''я файлу: '") + лИмяФайла;
			
			Если ЗначениеЗаполнено(лСсылкаНаДокумент) Тогда
				лОписаниеПоОтправке = лОписаниеПоОтправке + "
				|"
				+ НСтр("ru = 'Ссылка на документ: '; uk = 'Посилання на документ: '") + лСсылкаНаДокумент;
			КонецЕсли;
			
			лОписаниеПоОтправке = лОписаниеПоОтправке + "
			|
			|"
			+ НСтр("ru = 'Подписи: '; uk = 'Підписи: '");
			ДополнитьОписаниеДаннымиПоПодписямКонтрагента(ПолучитьМассивПодписейКонтрагентаИзПодписанногоЭлектронногоДокумента(ТелоДокумента), лОписаниеПоОтправке, Неопределено, ОтражатьTSPСтатус, ОтражатьOCSPСтатус);
			
			Если ЗначениеЗаполнено(СобытиеОтправкиОписание) Тогда
				лОписаниеПоОтправке = лОписаниеПоОтправке + "
				|
				|" + СобытиеОтправкиОписание;
			КонецЕсли;

			ЗафиксироватьСобытиеЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент, СобытиеОтправки, лОписаниеПоОтправке, ДатаОтправки, лDocVer, лИмяФайла, лИмяФайлаКвитанции);
			
			Если ЗначениеЗаполнено(СобытиеОтправкиСсылкиНаДокумент) Тогда
				лОписаниеПоОтправкеСсылкиНаДокумент = НСтр("ru = 'Отправлена ссылка на Электронный документ'; uk = 'Відправлено посилання на Електронний документ'")
				+ Символы.ПС
				+ лСсылкаНаДокумент
				+ Символы.ПС
				+ ОписаниеПоОтправкеСсылкиНаДокумент;
				
				ЗафиксироватьСобытиеЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент, СобытиеОтправкиСсылкиНаДокумент, лОписаниеПоОтправкеСсылкиНаДокумент, ДатаОтправки);
			КонецЕсли;
				
			УстановитьСнятьОтметкуОбработано(ДанныеДокумента.ЭлектронныйДокумент, Истина);
			
			СобытиеДляЖурнала = НСтр("ru = 'Документ отправлен'; uk = 'Документ відправлено'") + ": """
			+ лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента.Наименование + """ №" + лЭлектронныйДокументОбъект.НомерДокумента + НСтр("ru = ' от '; uk = ' від '") + Формат(лЭлектронныйДокументОбъект.ДатаДокумента, "ДФ=dd.MM.yyyy");
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, СобытиеДляЖурнала, , Ложь);
			
			Если лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента.ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента Тогда
				СоглашениеОАнулированииДокументаОбработать(ДанныеДокумента.ЭлектронныйДокумент, Истина);
			КонецЕсли;
			
			Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
				тОрганизация = ПараметрыСобытий.Организация;
				тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
				тВхИсх = ПараметрыСобытий.ВхИсх;
				тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
				тЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
				тСостояние = лЭлектронныйДокументОбъект.Состояние;
				тДокумент1С = лЭлектронныйДокументОбъект.Документ1С;
				тМассивВложений = Неопределено;
				ПараметрыСобытий.Свойство("МассивВложений", тМассивВложений);
				Если ТипЗнч(тМассивВложений) <> Тип("Массив") Тогда
					Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
						тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
					Иначе
						тМассивВложений = Новый Массив;
					КонецЕсли;
					ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
				КонецЕсли;
				тМассивПодписей = Неопределено;
				ПараметрыСобытий.Свойство("МассивПодписей", тМассивПодписей);
				Если ТипЗнч(тМассивПодписей) <> Тип("Массив") Тогда
					тМассивПодписей = Новый Массив;
					ПараметрыСобытий.Вставить("МассивПодписей", тМассивПодписей);
				КонецЕсли;
				ОбработатьСобытие_ПриОтправке(тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписей, тДокумент1С, тМассивВложений);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	// Обновление журнала операций.
	Если ЖурналОперации <> "" Тогда
		Если ДополнительныеПараметры.ЖурналОперации = "" Тогда
			ДополнительныеПараметры.ЖурналОперации = ЖурналОперации;
		Иначе
			ДополнительныеПараметры.ЖурналОперации = ДополнительныеПараметры.ЖурналОперации + Символы.ПС + ЖурналОперации;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОтправитьЭлектронныйДокумент()

Процедура ОтправитьЭлектронныеДокументыВДФС(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоУспешноОбработаных) Экспорт
		
	ЖурналОперации                     = "";//ДополнительныеПараметры.ЖурналОперации;	
	ТаблицаНастроекПодписейШифрования = ДополнительныеПараметры.НастройкиПодписейШифрования;
	ТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ТаблицаНастроекПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписейШифрования, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписейШифрования);
	
	Для Каждого ДанныеДокумента Из ТаблицаДанныхДокументов Цикл
		
		ТелоДокумента = "";
		ИзображениеДокумента = "";
		ВложениеДокумента1 = "";
		ИмяФайлаВложениеДокумента1 = "";
		ВложениеДокумента2 = "";
		ИмяФайлаВложениеДокумента2 = "";
		ВложениеДокумента3 = "";
		ИмяФайлаВложениеДокумента3 = "";
		МассивВложенийДокумента4 = Неопределено;
		НомерСтрокиСодержания = -1;
		
		
		Если ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
			Если ДанныеДокумента.ВхИсх <> ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан")
			или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленВДФС")
			или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен")
			или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоСообщениеОДоставке")
			или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонение")
			или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждение")
			Тогда
				ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
				
				ОшибкаПолученияСодержимогоЭлДок = "";
				СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , Истина, ОшибкаПолученияСодержимогоЭлДок);
				Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
					Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
						ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
					КонецЕсли;
					ДанныеДокумента.ЕстьОшибки = Истина;			
					
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ОшибкаПолученияСодержимогоЭлДок);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					
					Продолжить;
				Иначе
					НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
		ИначеЕсли ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
			Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
				Если не ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
					Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленВДФС")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоСообщениеОДоставке")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонение")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждение")
					Тогда
						ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
						
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , Истина, ОшибкаПолученияСодержимогоЭлДок);
						Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
							Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
								ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
							КонецЕсли;
							ДанныеДокумента.ЕстьОшибки = Истина;			
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							
							Продолжить;
						Иначе
							НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
							ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
							ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
							ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
							ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
							ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
							ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
							ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
							ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
							МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
						КонецЕсли;
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					Продолжить;
				КонецЕсли;
			ИначеЕсли ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
				Если ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
					Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленВДФС")
					//или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен")
					//или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоСообщениеОДоставке")
					//или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонение")
					//или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждение")
					Тогда
						ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
						
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , Истина, ОшибкаПолученияСодержимогоЭлДок);
						Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
							Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
								ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
							КонецЕсли;
							ДанныеДокумента.ЕстьОшибки = Истина;			
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							
							Продолжить;
						Иначе
							НомерСтрокиСодержания = СодержаниеЭлектронногоДокумента.НомерВерсии;
							ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
							ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
							ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
							ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
							ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
							ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
							ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
							ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
							МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
						КонецЕсли;
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		
		лОрганизацияEDI = ДанныеДокумента.Организация;//ПолучитьОрганизациюEDIИзДанныхДокумента(ДанныеДокумента);	
		лНастройкиПодписиШифрованияДляТекущейОрганизации = ТаблицаНастроекПодписейШифрования.Найти(лОрганизацияEDI, "ОрганизацияEDI");
		
		Если лНастройкиПодписиШифрованияДляТекущейОрганизации = Неопределено Тогда		
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не найдены настройки подписи шифрования Организации: '; uk = 'Не знайдені підписи шифрування по Організації: '") + лОрганизацияEDI + ".");
			ДанныеДокумента.ЕстьОшибки = Истина;			
		КонецЕсли;
		
		Если НЕ ДанныеДокумента.ЕстьОшибки Тогда
			// Отправить запрос EDI провайдеру, обработать результат запроса.
			лПараметрыОтправкиДокумента = Новый Структура;
			лПараметрыОтправкиДокумента.Вставить("Body", ТелоДокумента);
			лПараметрыОтправкиДокумента.Вставить("Edrpou",    лОрганизацияEDI.Код);
			СтрокаПодключенияEDI = Неопределено;
			СерверEDI = Неопределено;
			ПортEDI = Неопределено;
			ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиДокумента, лНастройкиПодписиШифрованияДляТекущейОрганизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
			//лПараметрыОтправкиДокумента.Вставить("Cert",      лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСертификата);
			//лПараметрыОтправкиДокумента.Вставить("Key",       лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСекретногоКлюча);
			//лПараметрыОтправкиДокумента.Вставить("Password",  лНастройкиПодписиШифрованияДляТекущейОрганизации.ПарольСекретногоКлюча);
			лПараметрыОтправкиДокумента.Вставить("Email", лОрганизацияEDI.АдресЭлектроннойПочты);
			
			ДатаОтправки = ТекущаяДата();
			лРезультатОтправкиДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("gov/send", лПараметрыОтправкиДокумента, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
			Если лРезультатОтправкиДокумента.Code <> 0 Тогда
				ДанныеДокумента.ЕстьОшибки = Истина;
				
				Замечание = НСтр("ru = 'Ошибка отправки документа:'; uk = 'Помилка відправки документа:'") + лРезультатОтправкиДокумента.Message;
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
				
				ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
				ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
				
				Продолжить;
			ИначеЕсли ЗначениеЗаполнено(лРезультатОтправкиДокумента.FileName) Тогда
				лИмяФайла = лРезультатОтправкиДокумента.FileName;
			Иначе
				ДанныеДокумента.ЕстьОшибки = Истина;
				
				Замечание = НСтр("ru = 'В результате отправки не получено имя файла отправленного документа на сервере ГНС.'; uk = 'В результаті відправки не отримано ім''я файла відправленного документа на сервері ДПС.'");
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
				
				ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
				ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
				
				Продолжить;
			КонецЕсли;
			
			КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
			лЭлектронныйДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
			лЭлектронныйДокументОбъект.ИмяФайлаДФС = лИмяФайла;
			лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленВДФС");
			лЭлектронныйДокументОбъект.СостояниеРегистрацияВДФС = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ОтправленВДФС");
			лЭлектронныйДокументОбъект.ПоследняяОперация = ДатаОтправки;
			ЗаписатьЭлектронныйДокументСПредварительнымПоискомСвязаных(лЭлектронныйДокументОбъект, ДанныеДокумента.ВидЭлектронногоДокумента, ДанныеДокумента.ВидЭлектронногоДокумента.Владелец);
			//лЭлектронныйДокументОбъект.Записать();
			
			Если НомерСтрокиСодержания >= 0 Тогда
				СодержимоеЭлектронныхДокументовМенеджерЗаписи = РегистрыСведений.скEDI_СодержимоеЭлектронныхДокументов.СоздатьМенеджерЗаписи();
				СодержимоеЭлектронныхДокументовМенеджерЗаписи.ЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
				СодержимоеЭлектронныхДокументовМенеджерЗаписи.НомерВерсии = НомерСтрокиСодержания;
				СодержимоеЭлектронныхДокументовМенеджерЗаписи.Прочитать();
				
				Если СодержимоеЭлектронныхДокументовМенеджерЗаписи.Выбран() и СодержимоеЭлектронныхДокументовМенеджерЗаписи.ИмяФайла = "" Тогда
					СодержимоеЭлектронныхДокументовМенеджерЗаписи.ИмяФайла = лИмяФайла;
					//СодержимоеЭлектронныхДокументовМенеджерЗаписи.ДокументДФС = Истина;
					СодержимоеЭлектронныхДокументовМенеджерЗаписи.Записать(Истина);
				КонецЕсли;
			КонецЕсли;
			
			// Зафиксировать событие отправки электронного документа.
			ДатаОтправки = ТекущаяДата();
			лОписаниеПоОтправке = НСтр("ru = 'Отправлено'; uk = 'Відправлено'") + "
			|"
			+ НСтр("ru = 'Дата и время отправки: '; uk = 'Дата та час відправки: '") + Формат(ДатаОтправки, "ДФ='dd.MM.yyyy HH:mm:ss'") + "
			|"
			+ НСтр("ru = 'Получатель: ГНС'; uk = 'Одержувач: ДПС'") + "
			|"
			+ НСтр("ru = 'Имя файла: '; uk = 'Ім''я файлу: '") + лИмяФайла;
			
			лОписаниеПоОтправке = лОписаниеПоОтправке + "
			|
			|"
			+ НСтр("ru = 'Подписи: '; uk = 'Підписи: '");
			ДополнитьОписаниеДаннымиПоПодписямКонтрагента(ПолучитьМассивПодписейКонтрагентаИзПодписанногоЭлектронногоДокумента(ТелоДокумента), лОписаниеПоОтправке, Неопределено, Ложь, Ложь);
			
			ЗафиксироватьСобытиеЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент, Перечисления.скEDI_СобытияЭлектронныхДокументов.ОтправкаВДФС, лОписаниеПоОтправке, ДатаОтправки);
				
			УстановитьСнятьОтметкуОбработано(ДанныеДокумента.ЭлектронныйДокумент, Истина);
			
			СобытиеДляЖурнала = НСтр("ru = 'Документ отправлен в ГНС'; uk = 'Документ відправлено до ДПС'") + ": """
			+ лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента.Наименование + """ №" + лЭлектронныйДокументОбъект.НомерДокумента + НСтр("ru = ' от '; uk = ' від '") + Формат(лЭлектронныйДокументОбъект.ДатаДокумента, "ДФ=dd.MM.yyyy");
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, СобытиеДляЖурнала, , Ложь);
		КонецЕсли;
		
	КонецЦикла;

	// Обновление журнала операций.
	Если ЖурналОперации <> "" Тогда
		Если ДополнительныеПараметры.ЖурналОперации = "" Тогда
			ДополнительныеПараметры.ЖурналОперации = ЖурналОперации;
		Иначе
			//ДополнительныеПараметры.ЖурналОперации = ДополнительныеПараметры.ЖурналОперации + "; " + ЖурналОперации;
			ДополнительныеПараметры.ЖурналОперации = ДополнительныеПараметры.ЖурналОперации + Символы.ПС + ЖурналОперации;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОтправитьЭлектронныйДокумент()

Функция Base64ЗначениеСтрока(СтрокаBase64) Экспорт
	Информация = Новый СистемнаяИнформация;
	Если СравнитьВерсии(Информация.ВерсияПриложения, "8.3.10") >= 0 Тогда
	    ДвоичныеДанныеПоBase64 =  Base64Значение(СтрокаBase64);
		Если ДвоичныеДанныеПоBase64 = Неопределено Или ДвоичныеДанныеПоBase64.Размер() = 0 Тогда
			//Сообщить("Входная строка не является строкой в формате Base64");
			Возврат "";
		КонецЕсли;
	    Поток = ДвоичныеДанныеПоBase64.ОткрытьПотокДляЧтения();
	    Чтение = Новый ЧтениеТекста(Поток);
	    ЗначениеСтрока = Чтение.Прочитать();
		Возврат ЗначениеСтрока;
	Иначе
		ВремФайл = ПолучитьИмяВременногоФайла();
		ДвоичныеДанныеПоBase64 =  Base64Значение(СтрокаBase64);
		Если ДвоичныеДанныеПоBase64 = Неопределено Или ДвоичныеДанныеПоBase64.Размер() = 0 Тогда
			//Сообщить("Входная строка не является строкой в формате Base64");
			Возврат "";
		КонецЕсли;
		ДвоичныеДанныеПоBase64.Записать(ВремФайл);
		
		Тхт = Новый ТекстовыйДокумент();
		Тхт.Прочитать(ВремФайл);//, "CESU-8");
		ЗначениеСтрока = Тхт.ПолучитьТекст();
		Возврат ЗначениеСтрока;
	КонецЕсли;
КонецФункции

Функция НайтиСоздатьКвитанцию(ДанныеДокумента, ДополнительныеПараметры, ЭлектронныйДокумент, ПодписыватьКвитанциюВсемиПодписями, ТипКвитанции, ТекстКвитанции, СпособОтправки, ВидКвитанции, КвитанцияСсылка, КвитанцияТело, КвитанцияТекст, ПараметрыСозданияКвитанции, ЖурналОперации, КвитанцияБудетПодписанаПриОтправке = Ложь)
	ПараметрыСозданияКвитанции = Неопределено;
	Если СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО") Тогда
		ВидКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ВидыКвитанций.СДО");
	ИначеЕсли СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезДФС") Тогда
		ВидКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ВидыКвитанций.ДФСрк");
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Если ПодписыватьКвитанциюВсемиПодписями Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	скEDI_Квитанция.Ссылка,
		               |	скEDI_Квитанция.ТелоКвитанции,
		               |	скEDI_Квитанция.ТекстКвитанции
		               |ИЗ
		               |	Документ.скEDI_Квитанция КАК скEDI_Квитанция
		               |ГДЕ
		               |	скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
		               |	И скEDI_Квитанция.ТипКвитанции = &ТипКвитанции
		               |	И скEDI_Квитанция.ВидКвитанции = &ВидКвитанции
		               |	И скEDI_Квитанция.ВхИсх = &ВхИсх
		               |	И НЕ скEDI_Квитанция.ПометкаУдаления
		               |	И скEDI_Квитанция.Готовится";
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		Запрос.УстановитьПараметр("ВхИсх", ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий"));
		Запрос.УстановитьПараметр("ТипКвитанции", ТипКвитанции);
		Запрос.УстановитьПараметр("ВидКвитанции", ВидКвитанции);
		ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		Если ВыборкаРезультатаЗапроса.Следующий() Тогда
			КвитанцияСсылка = ВыборкаРезультатаЗапроса.Ссылка;
			КвитанцияТело = ВыборкаРезультатаЗапроса.ТелоКвитанции;
			КвитанцияТекст = ВыборкаРезультатаЗапроса.ТекстКвитанции;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПодписыватьКвитанциюВсемиПодписями Тогда
		НастройкиПодписиКвитанции = Неопределено;
	ИначеЕсли КвитанцияБудетПодписанаПриОтправке Тогда
		НастройкиПодписиКвитанции = Неопределено;
	Иначе
		НастройкиПодписиКвитанции = Неопределено;
		//ТаблицаНастроекПодписей = ДополнительныеПараметры.НастройкиНеобходимыхПодписей;
		//ТаблицаНастроекПодписей = ?(ТипЗнч(ТаблицаНастроекПодписей) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписей, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписей);
		//ПодписьДляКвитанции = ПолучитьПодписьДляКвитанцииПоДокументу(ЭлектронныйДокумент, ДанныеДокумента.ВидЭлектронногоДокумента);
		//Если ПодписьДляКвитанции <> Неопределено Тогда
		//	Если ТаблицаНастроекПодписей <> Неопределено Тогда
		//		НастройкиПодписиКвитанции = ТаблицаНастроекПодписей.Найти(ПодписьДляКвитанции, "Подпись");
		//	КонецЕсли;
		//	Если НастройкиПодписиКвитанции = Неопределено Тогда
		//		Флаг = Истина;
		//		КвитанцияНеТребуетПодписания = Неопределено;
		//		Если ДополнительныеПараметры.Свойство("КвитанцияНеТребуетПодписания", КвитанцияНеТребуетПодписания) Тогда
		//			Если КвитанцияНеТребуетПодписания = Истина Тогда
		//				Флаг = Ложь;
		//			КонецЕсли;
		//		КонецЕсли;
		//		
		//		Если Флаг Тогда
		//			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не найдены настройки подписи квитанции по документу: '; uk = 'Не знайдені налаштування підпису по документу: '") + ДанныеДокумента.ЭлектронныйДокумент.ИмяФайла + ".");
		//			Возврат Ложь;
		//		КонецЕсли;
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	
	Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
		ТекстКвитанции_ = "У ПРИЙОМІ ДОКУМЕНТА ВІДМОВЛЕНО" + Символы.ПС + "ПРИЧИНА ВІДМОВИ:" + " " + ?(ТекстКвитанции = "", "не зазначено", ТекстКвитанции);
 	ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
		ТекстКвитанции_ = "ДОКУМЕНТ ВІДКЛИКАНО" + Символы.ПС + "ПРИЧИНА ВІДКЛИКАННЯ:" + " " + ?(ТекстКвитанции = "", "не зазначено", ТекстКвитанции);
	Иначе
		ТекстКвитанции_ = ТекстКвитанции;
	КонецЕсли;
	
	Если ВидКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ВидыКвитанций.СДО") Тогда
		ОрганизацияEDI = ПолучитьОрганизациюEDIИзДанныхДокумента(ДанныеДокумента);
		
		ПараметрыСозданияКвитанции = Новый Структура;
		ПараметрыСозданияКвитанции.Вставить("Edrpou",    ОрганизацияEDI.Код);
		ПараметрыСозданияКвитанции.Вставить("Dept",      ОрганизацияEDI.Филиал);
		ПараметрыСозданияКвитанции.Вставить("RcvEdrpou", ЭлектронныйДокумент.ЕДРПОУКонтрагента);
		ПараметрыСозданияКвитанции.Вставить("RcvDept",   ЭлектронныйДокумент.ФилиалКонтрагента);
		ПараметрыСозданияКвитанции.Вставить("SignKvt",   Ложь);
		ПараметрыСозданияКвитанции.Вставить("KvtType",   ПолучитьКодТипаКвитанции(ТипКвитанции));
		ПараметрыСозданияКвитанции.Вставить("KvtText",   ТекстКвитанции_);
		ПараметрыСозданияКвитанции.Вставить("FileName",  ЭлектронныйДокумент.ИмяФайла);
		ПараметрыСозданияКвитанции.Вставить("DocNum",  ЭлектронныйДокумент.НомерДокумента);
		ПараметрыСозданияКвитанции.Вставить("DocCharcode",  ЭлектронныйДокумент.ИмяШаблона);
		
		НаименованиеДокумента = "[" + ЭлектронныйДокумент.ИмяШаблона + "]"
		+ " " + 
		ЭлектронныйДокумент.ВидЭлектронногоДокумента.Наименование
		+ " №" + СокрЛП(ЭлектронныйДокумент.НомерДокумента)
		+ " від " + Формат(ЭлектронныйДокумент.ДатаДокумента, "ДФ=dd.MM.yyyy");
		Если СокрЛП(ЭлектронныйДокумент.НомерДокумента) <> "" Тогда
			НаименованиеДокумента = НаименованиеДокумента + Символы.ПС + "Номер документа: " + СокрЛП(ЭлектронныйДокумент.НомерДокумента);
		КонецЕсли;
		Если ЭлектронныйДокумент.ДатаДокумента <> Дата(1, 1, 1, 0, 0, 0) Тогда
			НаименованиеДокумента = НаименованиеДокумента + Символы.ПС + "Дата документа: " + Формат(ЭлектронныйДокумент.ДатаДокумента, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		ПараметрыСозданияКвитанции.Вставить("DocName",  НаименованиеДокумента);
		
		РезультатСозданияКвитанции = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/makekvt", ПараметрыСозданияКвитанции);
		Если РезультатСозданияКвитанции.Code <> 0 Тогда
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка создания квитанции'; uk = 'Помилка створення квитанції'") + ": " + РезультатСозданияКвитанции.Message);
			Возврат Ложь;
		ИначеЕсли ЗначениеЗаполнено(РезультатСозданияКвитанции.Body) Тогда
			КвитанцияСсылка = Документы.скEDI_Квитанция.ПустаяСсылка();
			КвитанцияТело = РезультатСозданияКвитанции.Body;
			
            КвитанцияПолныйТекст = Base64ЗначениеСтрока(КвитанцияТело);
			КвитанцияТекст = "";
			
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(КвитанцияПолныйТекст);
			ЧтениеXML.Прочитать();
			мДОМ = Новый ПостроительDOM;
			мДокументДОМ 	  = мДОМ.Прочитать(ЧтениеXML);
			Для Каждого ДочернийУзел1 Из мДокументДОМ.ДочерниеУзлы Цикл
				Если ВРег(ДочернийУзел1.ИмяУзла) = ВРег("UniRpl") Тогда
					Для Каждого ДочернийУзел2 Из ДочернийУзел1.ДочерниеУзлы Цикл
						Если ВРег(ДочернийУзел2.ИмяУзла) = ВРег("Msg") Тогда
							КвитанцияТекст = ДочернийУзел2.ТекстовоеСодержимое;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Если КвитанцияТекст = "" Тогда
				КвитанцияТекст = КвитанцияПолныйТекст;
			КонецЕсли;
			
			Если НастройкиПодписиКвитанции <> Неопределено Тогда
				лПараметрыПодписиДокумента = Новый Структура;
				лПараметрыПодписиДокумента.Вставить("Body",     КвитанцияТело);
				СтрокаПодключенияEDI = Неопределено;
				СерверEDI = Неопределено;
				ПортEDI = Неопределено;
				ДобавитьПараметрыСекретногоКлюча(лПараметрыПодписиДокумента, НастройкиПодписиКвитанции, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
				//лПараметрыПодписиДокумента.Вставить("Cert",     НастройкиПодписиКвитанции.ТелоСертификата);
				//лПараметрыПодписиДокумента.Вставить("Key",      НастройкиПодписиКвитанции.ТелоСекретногоКлюча);
				//лПараметрыПодписиДокумента.Вставить("Password", НастройкиПодписиКвитанции.ПарольСекретногоКлюча);
				
				КоличествоПовторов = Неопределено;
				Если ДополнительныеПараметры.Свойство("КоличествоПовторовПриОтказе", КоличествоПовторов) Тогда 
					Если КоличествоПовторов < 1 Тогда
						КоличествоПовторов = 1;
					КонецЕсли;
				Иначе
					КоличествоПовторов = 1;
				КонецЕсли;
				
				Пока КоличествоПовторов > 0 Цикл
					лРезультатПодписиДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/sign", лПараметрыПодписиДокумента, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					Если лРезультатПодписиДокумента.Code = 0 Тогда
						Прервать;
					КонецЕсли;
					КоличествоПовторов = КоличествоПовторов - 1;
				КонецЦикла;

				Если лРезультатПодписиДокумента.Code <> 0 Тогда
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					Замечание = НСтр("ru = 'Ошибка подписи квитанции:'; uk = 'Помилка підпису квитанції:'") + " " + лРезультатПодписиДокумента.Message;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					
					Возврат Ложь;
				ИначеЕсли ЗначениеЗаполнено(лРезультатПодписиДокумента.Body) Тогда
					КвитанцияТело = лРезультатПодписиДокумента.Body;
				КонецЕсли;
			КонецЕсли;
			
			Возврат Истина;
		Иначе
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не обнаружено тело квитанции.'; uk = 'Не знайдено тіло квитанції.'"));
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ВидКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ВидыКвитанций.ДФСрк") Тогда
		лОрганизацияEDI = ПолучитьОрганизациюEDIИзДанныхДокумента(ДанныеДокумента);
		
		ПараметрыСозданияКвитанции = Новый Структура;
		ПараметрыСозданияКвитанции.Вставить("Edrpou",    лОрганизацияEDI.Код);
		ПараметрыСозданияКвитанции.Вставить("Dept",      лОрганизацияEDI.Филиал);
		ПараметрыСозданияКвитанции.Вставить("RcvEdrpou", ЭлектронныйДокумент.ЕДРПОУКонтрагента);
		ПараметрыСозданияКвитанции.Вставить("RcvDept",   ЭлектронныйДокумент.ФилиалКонтрагента);
		ПараметрыСозданияКвитанции.Вставить("AcceptDoc",   ПолучитьКодТипаКвитанцииГовРК(ТипКвитанции));
		ПараметрыСозданияКвитанции.Вставить("Message",     ТекстКвитанции);
		ПараметрыСозданияКвитанции.Вставить("FileName",  ЭлектронныйДокумент.ИмяФайла);
		ПараметрыСозданияКвитанции.Вставить("Charcode",  ЭлектронныйДокумент.ИмяШаблона);
		
		НаименованиеДокумента = //"[" + ЭлектронныйДокумент.ИмяШаблона + "]"
		//+ " " +
		ЭлектронныйДокумент.ВидЭлектронногоДокумента.Наименование
		+ " №" + СокрЛП(ЭлектронныйДокумент.НомерДокумента)
		+ " від " + Формат(ЭлектронныйДокумент.ДатаДокумента, "ДФ=dd.MM.yyyy");
		Если СокрЛП(ЭлектронныйДокумент.НомерДокумента) <> "" Тогда
			НаименованиеДокумента = НаименованиеДокумента + Символы.ПС + "Номер документа: " + СокрЛП(ЭлектронныйДокумент.НомерДокумента);
		КонецЕсли;
		Если ДанныеДокумента.ЭлектронныйДокумент.ДатаДокумента <> Дата(1, 1, 1, 0, 0, 0) Тогда
			НаименованиеДокумента = НаименованиеДокумента + Символы.ПС + "Дата документа: " + Формат(ЭлектронныйДокумент.ДатаДокумента, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		ПараметрыСозданияКвитанции.Вставить("DocName",  НаименованиеДокумента);
		
		РезультатСозданияКвитанции = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("govrk/makeans", ПараметрыСозданияКвитанции);
		Если РезультатСозданияКвитанции.Code <> 0 Тогда
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка создания квитанции'; uk = 'Помилка створення квитанції'") + ": " + РезультатСозданияКвитанции.Message);
			Возврат Ложь;
		ИначеЕсли ЗначениеЗаполнено(РезультатСозданияКвитанции.Body) Тогда
			КвитанцияСсылка = Документы.скEDI_Квитанция.ПустаяСсылка();
			КвитанцияТело = РезультатСозданияКвитанции.Body;
			
            КвитанцияПолныйТекст = Base64ЗначениеСтрока(КвитанцияТело);
			КвитанцияТекст = "";
			ДатаВремяКвитанции = Неопределено;
			
			Если не РазобратьТекстКвитанции(КвитанцияПолныйТекст, КвитанцияТекст, ДатаВремяКвитанции, Неопределено, Неопределено) Тогда
				КвитанцияТекст = КвитанцияПолныйТекст;
			КонецЕсли;
			
			Если НастройкиПодписиКвитанции <> Неопределено Тогда
				лПараметрыПодписиДокумента = Новый Структура;
				лПараметрыПодписиДокумента.Вставить("Body",     КвитанцияТело);
				СтрокаПодключенияEDI = Неопределено;
				СерверEDI = Неопределено;
				ПортEDI = Неопределено;
				ДобавитьПараметрыСекретногоКлюча(лПараметрыПодписиДокумента, НастройкиПодписиКвитанции, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
				//лПараметрыПодписиДокумента.Вставить("Cert",     НастройкиПодписиКвитанции.ТелоСертификата);
				//лПараметрыПодписиДокумента.Вставить("Key",      НастройкиПодписиКвитанции.ТелоСекретногоКлюча);
				//лПараметрыПодписиДокумента.Вставить("Password", НастройкиПодписиКвитанции.ПарольСекретногоКлюча);
				
				КоличествоПовторов = Неопределено;
				Если ДополнительныеПараметры.Свойство("КоличествоПовторовПриОтказе", КоличествоПовторов) Тогда 
					Если КоличествоПовторов < 1 Тогда
						КоличествоПовторов = 1;
					КонецЕсли;
				Иначе
					КоличествоПовторов = 1;
				КонецЕсли;
				
				Пока КоличествоПовторов > 0 Цикл
					лРезультатПодписиДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("gov/sign", лПараметрыПодписиДокумента, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					Если лРезультатПодписиДокумента.Code = 0 Тогда
						Прервать;
					КонецЕсли;
					КоличествоПовторов = КоличествоПовторов - 1;
				КонецЦикла;

				Если лРезультатПодписиДокумента.Code <> 0 Тогда
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					Замечание = НСтр("ru = 'Ошибка подписи квитанции:'; uk = 'Помилка підпису квитанції:'") + " " + лРезультатПодписиДокумента.Message;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					
					Возврат Ложь;
				ИначеЕсли ЗначениеЗаполнено(лРезультатПодписиДокумента.Body) Тогда
					КвитанцияТело = лРезультатПодписиДокумента.Body;
				КонецЕсли;
			КонецЕсли;
			
			Возврат Истина;
		Иначе
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не обнаружено тело квитанции.'; uk = 'Не знайдено тіло квитанції.'"));
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ПолучитьАктуальныйDocVer(ЭлектронныйДокумент)
	DocVerЭлектронныйДокумент = ЭлектронныйДокумент.DocVer;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(ВТ.DocVer) КАК DocVer
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		скEDI_Квитанция.DocVer КАК DocVer
	               |	ИЗ
	               |		Документ.скEDI_Квитанция КАК скEDI_Квитанция
	               |	ГДЕ
	               |		скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
	               |		И скEDI_Квитанция.ВидКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыКвитанций.СДО)
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		скEDI_СобытияЭлектронныхДокументов.DocVer
	               |	ИЗ
	               |		РегистрСведений.скEDI_СобытияЭлектронныхДокументов КАК скEDI_СобытияЭлектронныхДокументов
	               |	ГДЕ
	               |		скEDI_СобытияЭлектронныхДокументов.ЭлектронныйДокумент = &ЭлектронныйДокумент
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		скEDI_СобытияЭлектронныхДокументов.DocVer
	               |	ИЗ
	               |		РегистрСведений.скEDI_СобытияЭлектронныхДокументов КАК скEDI_СобытияЭлектронныхДокументов
	               |	ГДЕ
	               |		скEDI_СобытияЭлектронныхДокументов.ЭлектронныйДокумент = &ЭлектронныйДокумент) КАК ВТ";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		DocVerПоКвитанциям = ?(ВыборкаРезультатаЗапроса.DocVer = Null, 0, ВыборкаРезультатаЗапроса.DocVer);
	Иначе
		DocVerПоКвитанциям = -1;
	КонецЕсли;
	
	Если DocVerПоКвитанциям > 0 Тогда
		DocVer = DocVerПоКвитанциям;
	ИначеЕсли DocVerЭлектронныйДокумент > 0 Тогда
		DocVer = DocVerЭлектронныйДокумент;
	Иначе
		DocVer = -1;
	КонецЕсли;
	Возврат DocVer;
КонецФункции
				
Процедура ОтправитьКвитанцииПоЭлектроннымДокументам(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоУспешноОбработаных, КоличествоПодписано) Экспорт
	ЖурналОперации                     = "";//ДополнительныеПараметры.ЖурналОперации;	
	ТаблицаНастроекПодписей = ДополнительныеПараметры.НастройкиНеобходимыхПодписей;
	ТаблицаНастроекПодписей = ?(ТипЗнч(ТаблицаНастроекПодписей) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписей, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписей);
	ТаблицаНастроекПодписейШифрования = ДополнительныеПараметры.НастройкиПодписейШифрования;
	ТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ТаблицаНастроекПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписейШифрования, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписейШифрования);

	Если ДополнительныеПараметры.Свойство("ТекстКвитанции") Тогда 
		ТекстКвитанции = ДополнительныеПараметры.ТекстКвитанции;
	Иначе	
		ТекстКвитанции = "";
	КонецЕсли;
	
	Для Каждого ДанныеДокумента Из ТаблицаДанныхДокументов Цикл
		СодержаниеЭлектронногоДокумента = Неопределено;
		ТелоДокумента              = "";
		ИзображениеДокумента       = "";
		ВложениеДокумента1         = "";
		ИмяФайлаВложениеДокумента1 = "";
		ВложениеДокумента2         = "";
		ИмяФайлаВложениеДокумента2 = "";
		ВложениеДокумента3         = "";
		ИмяФайлаВложениеДокумента3 = "";
		МассивВложенийДокумента4 = Неопределено;
		
		ПараметрыСобытий = Неопределено;
		
		ТипКвитанции               = ДополнительныеПараметры.ТипКвитанции; 
		
		ПодписыватьКвитанциюВсемиПодписями = Ложь;
		Квитанция = ПредопределенноеЗначение("Документ.скEDI_Квитанция.ПустаяСсылка");
		КвитанцияТело = "";
		КвитанцияТекст = "";
		ВидКвитанции = Неопределено;
		СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ПустаяСсылка");
		ОтражатьTSPСтатус = Истина;
		ОтражатьOCSPСтатус = Истина;
		ПараметрыСозданияКвитанции = Неопределено;
		
		ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
		лОрганизацияEDI = ДанныеДокумента.Организация;
		Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			Продолжить;
		КонецЕсли;
		// Отклонить и подтвердить мы можем полученные дкоументы. Отозвать - исходящие.
		
		Если ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент")
		или ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента")
		или ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями") Тогда
			ОтражатьTSPСтатус = Истина;
			ОтражатьOCSPСтатус = Истина;
			Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
				Если ДанныеДокумента.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ПолученОтКонтрагента") Тогда
					Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
						Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
							Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
								ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
							КонецЕсли;
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						
						ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
						ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередОтклонением;
						ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриОтклонении;
						ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
						ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
						ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
						ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
						ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
						ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
						ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
						//ПараметрыСобытий.МассивВложений = Новый Массив;
						
						СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
					ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
						Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан") Тогда
							ОшибкаПолученияСодержимогоЭлДок = "";
							СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
							Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
								Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
									ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
								КонецЕсли;
								ДанныеДокумента.ЕстьОшибки = Истина;
								
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								Продолжить;
							КонецЕсли;
							
							ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
							ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередПодтверждением;
							ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриПодтверждении;
							ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
							ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
							ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
							ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
							ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
							ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
							ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
							//ПараметрыСобытий.МассивВложений = Новый Массив;
							
							СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
						Иначе
							Продолжить;
						КонецЕсли;
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
						Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
							Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
								ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
							КонецЕсли;
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						
						ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
						ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередОтзывом;
						ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриОтзыве;
						ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
						ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
						ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
						ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
						ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
						ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
						ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
						//ПараметрыСобытий.МассивВложений = Новый Массив;
						
						СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
				Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					
					ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередОтклонением;
					ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриОтклонении;
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
					СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
				ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
					Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан") Тогда
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
						Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
							Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
								ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
							КонецЕсли;
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						
						ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
						ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередПодтверждением;
						ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриПодтверждении;
						ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
						ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
						ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
						ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
						ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
						ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
						ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
						//ПараметрыСобытий.МассивВложений = Новый Массив;
						
						СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
			ОтражатьTSPСтатус = Ложь;
			ОтражатьOCSPСтатус = Ложь;
			Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
				//Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
				//	ОшибкаПолученияСодержимогоЭлДок = "";
				//	СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
				//Иначе
					Продолжить;
				//КонецЕсли;
			ИначеЕсли ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
				Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					
					ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередОтклонением;
					ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриОтклонении;
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
					СпособОтправки = СодержаниеЭлектронногоДокумента.ПолученоОтКонтрагентаСПомощью;
				ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
					Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан") Тогда
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
						Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
							Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
								ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
							КонецЕсли;
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						
						ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
						ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередПодтверждением;
						ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриПодтверждении;
						ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
						ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
						ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
						ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
						ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
						ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
						ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
						//ПараметрыСобытий.МассивВложений = Новый Массив;
						
						СпособОтправки = СодержаниеЭлектронногоДокумента.ПолученоОтКонтрагентаСПомощью;
						ПодписыватьКвитанциюВсемиПодписями = Истина;
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			//СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО")
		ИначеЕсли ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
			ОтражатьTSPСтатус = Ложь;
			ОтражатьOCSPСтатус = Ложь;
			Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
				//Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
				//	ОшибкаПолученияСодержимогоЭлДок = "";
				//	СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
				//Иначе
					Продолжить;
				//КонецЕсли;
			ИначеЕсли ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
				Если ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
					Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
						Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
							Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
								ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
							КонецЕсли;
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						
						ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
						ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередОтклонением;
						ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриОтклонении;
						ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
						ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
						ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
						ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
						ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
						ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
						ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
						//ПараметрыСобытий.МассивВложений = Новый Массив;
						
						СпособОтправки = СодержаниеЭлектронногоДокумента.ПолученоОтКонтрагентаСПомощью;
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
						Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
							Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
								ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
							КонецЕсли;
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						
						ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
						ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередОтклонением;
						ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриОтклонении;
						ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
						ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
						ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
						ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
						ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
						ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
						ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
						//ПараметрыСобытий.МассивВложений = Новый Массив;
						
						СпособОтправки = СодержаниеЭлектронногоДокумента.ПолученоОтКонтрагентаСПомощью;
					ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
						Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан") Тогда
							ОшибкаПолученияСодержимогоЭлДок = "";
							СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
							Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
								Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
									ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
								КонецЕсли;
								ДанныеДокумента.ЕстьОшибки = Истина;
								
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								Продолжить;
							КонецЕсли;
							
							ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
							ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередПодтверждением;
							ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриПодтверждении;
							ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
							ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
							ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
							ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
							ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
							ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
							ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
							//ПараметрыСобытий.МассивВложений = Новый Массив;
							
							СпособОтправки = СодержаниеЭлектронногоДокумента.ПолученоОтКонтрагентаСПомощью;
							ПодписыватьКвитанциюВсемиПодписями = Истина;
						Иначе
							Продолжить;
						КонецЕсли;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
			ДанныеДокумента.ЕстьОшибки = Истина;		
			
			Замечание = НСтр("ru = 'Не найдено Содержание Электронного документа.'; uk = 'Не знайдено Вміст Електронного документа.'");
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
			
			ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
			ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
			
			Продолжить;
		Иначе
			ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
			ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
			ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
			ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
			ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
			ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
			ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
			ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
			МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
		КонецЕсли;
		
		Если СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ПустаяСсылка") Тогда
			ДанныеДокумента.ЕстьОшибки = Истина;		
			
			Замечание = НСтр("ru = 'Не определен Способ отправки.'; uk = 'Не визначено Спосіб відправки.'");
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
			
			ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
			ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
			
			Продолжить;
		КонецЕсли;
		
		Если не НайтиСоздатьКвитанцию(ДанныеДокумента, ДополнительныеПараметры, ЭлектронныйДокумент, ПодписыватьКвитанциюВсемиПодписями, ТипКвитанции, ТекстКвитанции, СпособОтправки, ВидКвитанции, Квитанция, КвитанцияТело, КвитанцияТекст, ПараметрыСозданияКвитанции, ЖурналОперации) Тогда
			Продолжить;
		КонецЕсли;
		Если ПодписыватьКвитанциюВсемиПодписями Тогда
			Если Квитанция = Документы.скEDI_Квитанция.ПустаяСсылка() Тогда
				Замечание = НСтр("ru = 'Не найдена подготовленая квитанция.'; uk = 'Не знайдено підготовлену квитанцію.'");
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
			КонецЕсли;
		КонецЕсли;

		лНастройкиПодписиШифрованияДляТекущейОрганизации = ТаблицаНастроекПодписейШифрования.Найти(лОрганизацияEDI, "ОрганизацияEDI");
		Если лНастройкиПодписиШифрованияДляТекущейОрганизации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТелоДокумента) Тогда			
			ДанныеДокумента.ЕстьОшибки = Истина;		
			
			Замечание = НСтр("ru = 'Не заполнено Содержание Электронного документа.'; uk = 'Не заповнено Вміст Електронного документа.'");
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
			
			ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
			ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
			
			Продолжить;
		КонецЕсли;
		
		//лСобытиеЭлектронногоДокумента    = ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.ПустаяСсылка");
		лСостояниеЭлектронногоДокумента  = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПустаяСсылка");
		лСобытиеЭлектронногоДокументаТекст = "";
		Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
			//лСобытиеЭлектронногоДокумента    = ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.ДокументОтозван");
			лСостояниеЭлектронногоДокумента  = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван");
			лСобытиеЭлектронногоДокументаТекст = НСтр("ru = 'Документ отозван'; uk = 'Документ відкликано'");
		ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
			//лСобытиеЭлектронногоДокумента    = ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.ОтправкаОтклонения");
			лСостояниеЭлектронногоДокумента  = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоОтклонение");
			лСобытиеЭлектронногоДокументаТекст = НСтр("ru = 'Документ отклонен'; uk = 'Документ відхилено'");
		ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
			//лСобытиеЭлектронногоДокумента    = ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.ОтправкаПодтверждения");
			лСостояниеЭлектронногоДокумента  = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение");
			лСобытиеЭлектронногоДокументаТекст = НСтр("ru = 'Документ подтвержден'; uk = 'Документ підтверджено'");
		КонецЕсли;
		
		лРезультатОтправкиОтвета = Неопределено;
		Если СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО") Тогда
			Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
				тСобытиеПеред = ПараметрыСобытий.СобытиеПеред;
				тОрганизация = ПараметрыСобытий.Организация;
				тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
				тВхИсх = ПараметрыСобытий.ВхИсх;
				тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
				тЭлектронныйДокумент = ПараметрыСобытий.ЭлектронныйДокумент;
				тСостояние = ПараметрыСобытий.Состояние;
				тДокумент1С = ПараметрыСобытий.Документ1С;
				Если ТипЗнч(ПараметрыСобытий.МассивВложений) = Тип("Массив") Тогда
					тМассивВложений = ПараметрыСобытий.МассивВложений;
				Иначе
					Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
						тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
					Иначе
						тМассивВложений = Новый Массив;
					КонецЕсли;
					ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
				КонецЕсли;
				тМассивПодписейДляОбработкиСобытий = ПолучитьМассивПодписейДляОбработкиСобытий(тЭлектронныйДокумент);
				ПараметрыСобытий.Вставить("МассивПодписей", тМассивПодписейДляОбработкиСобытий);
				ПричинаОтказа = "";
				Если не ОбработатьСобытие_ПередОтправкойКвитанции(тСобытиеПеред, тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписейДляОбработкиСобытий, тДокумент1С, тМассивВложений, ПричинаОтказа) Тогда
					Отказ = Истина;
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ПричинаОтказа);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ПричинаОтказа);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ДанныеДокумента.ЕстьОшибки Тогда
				// Отправить запрос EDI провайдеру, обработать результат запроса.
				лПараметрыОтправкиКвитанции = Новый Структура;
				лПараметрыОтправкиКвитанции.Вставить("Edrpou",    лОрганизацияEDI.Код);
				лПараметрыОтправкиКвитанции.Вставить("Dept",      лОрганизацияEDI.Филиал);
				лПараметрыОтправкиКвитанции.Вставить("Name",      НаименованиеОрганизацииДляОтправки(лОрганизацияEDI));
				лПараметрыОтправкиКвитанции.Вставить("PrgId",     лОрганизацияEDI.ИдентификаторПрограммы);
				лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ЭлектронныйДокумент.ЕДРПОУКонтрагента);
				лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ЭлектронныйДокумент.ФилиалКонтрагента);
				СтрокаПодключенияEDI = Неопределено;
				СерверEDI = Неопределено;
				ПортEDI = Неопределено;
				ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиКвитанции, лНастройкиПодписиШифрованияДляТекущейОрганизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
				//лПараметрыОтправкиКвитанции.Вставить("Cert",      лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСертификата);
				//лПараметрыОтправкиКвитанции.Вставить("Key",       лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСекретногоКлюча);
				//лПараметрыОтправкиКвитанции.Вставить("Password",  лНастройкиПодписиШифрованияДляТекущейОрганизации.ПарольСекретногоКлюча);
				лПараметрыОтправкиКвитанции.Вставить("MedocKvt",  КвитанцияТело);
				
				Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
				ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
					//лПараметрыОтправкиКвитанции.Вставить("MedocBody", ТелоДокумента);
				ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
					лПараметрыОтправкиКвитанции.Вставить("MedocBody", ТелоДокумента);
					Если ЗначениеЗаполнено(ИзображениеДокумента) Тогда				
						лПараметрыПередаваемогоPDFПредставленияДокумента = Новый Структура;
						лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("FileName", "Form.pdf");
						лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("Body", ИзображениеДокумента);
						лПараметрыОтправкиКвитанции.Вставить("ImageBody", лПараметрыПередаваемогоPDFПредставленияДокумента);
					КонецЕсли;
					
					МассивВложений = Новый Массив;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента1) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента1, ВложениеДокумента1));
					КонецЕсли;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента2) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента2, ВложениеДокумента2));
					КонецЕсли;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента3) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента3, ВложениеДокумента3));
					КонецЕсли;
					Если ТипЗнч(МассивВложенийДокумента4) = Тип("Массив") или ТипЗнч(МассивВложенийДокумента4) = Тип("ФиксированныйМассив") Тогда
						Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокумента4 Цикл
							МассивВложений.Добавить(Новый Структура("FileName,Body", ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента, ЭлементМассиваВложенийДокумента4.ВложениеДокумента));
						КонецЦикла;
					КонецЕсли;
					
					Если МассивВложений.Количество() > 0 Тогда
						лПараметрыОтправкиКвитанции.Вставить("AttachmentBody", МассивВложений);
					КонецЕсли;
					
					лПараметрыОтправкиКвитанции.Вставить("SignImages", ПолучитьМассивДанныеПоПодписям(ЭлектронныйДокумент));
				КонецЕсли;
				лПараметрыОтправкиКвитанции.Вставить("FileName",  ЭлектронныйДокумент.ИмяФайла);
				
				DocVer = -1;
				РежимСинхронизации = Ложь;
				ПолучитьРежимСинхронизации(РежимСинхронизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
				Если РежимСинхронизации Тогда
					DocVer = ПолучитьАктуальныйDocVer(ЭлектронныйДокумент);
				КонецЕсли;
				ИмяФайлаКвитанции = "";
				DocVerКвитанции = 0;
				
				ОтправкаПоМаршруту = Ложь;
				МассивОтправокПоМаршруту = Неопределено;
				МассивИзмененийВМаршруте = Неопределено;
				Если ЭлектронныйДокумент.IsMultisided Тогда
					Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
						ОтправкаПоМаршруту = Истина;
						МассивОтправокПоМаршруту = Новый Массив;
						МассивИзмененийВМаршруте = Новый Массив;
						
						ПозицияВМаршруте = ЭлектронныйДокумент.RoutePosition;
						Если ПозицияВМаршруте < ЭлектронныйДокумент.Маршрут.Количество() Тогда
							ЭлементМассиваИзмененийВМаршруте = Новый Структура;
							ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
							ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван"));
							МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
						КонецЕсли;
						
						ПозицияВМаршруте = ЭлектронныйДокумент.RoutePosition + 1;
						Если ПозицияВМаршруте < ЭлектронныйДокумент.Маршрут.Количество() Тогда
							ТекМаршрут = ЭлектронныйДокумент.Маршрут.Получить(ПозицияВМаршруте);
							
							Если ТипЗнч(ПараметрыСозданияКвитанции) = Тип("Структура") Тогда
								ПараметрыСозданияКвитанции.Вставить("RcvEdrpou", ТекМаршрут.ЕДРПОУКонтрагента);
								ПараметрыСозданияКвитанции.Вставить("RcvDept",   ТекМаршрут.ФилиалКонтрагента);
								
								РезультатСозданияКвитанции = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/makekvt", ПараметрыСозданияКвитанции);
								Если РезультатСозданияКвитанции.Code <> 0 Тогда
									лПараметрыОтправкиКвитанции.Вставить("MedocKvt", КвитанцияТело);
									ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка создания квитанции'; uk = 'Помилка створення квитанції'") + ": " + РезультатСозданияКвитанции.Message);
								ИначеЕсли ЗначениеЗаполнено(РезультатСозданияКвитанции.Body) Тогда
									лПараметрыОтправкиКвитанции.Вставить("MedocKvt", РезультатСозданияКвитанции.Body);
								Иначе
									лПараметрыОтправкиКвитанции.Вставить("MedocKvt", КвитанцияТело);
								КонецЕсли;
							КонецЕсли;
							
							//лПараметрыОтправкиКвитанции.Удалить("MedocKvt");
							//лПараметрыОтправкиКвитанции.Вставить("ToNextHop", Истина);
							лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ТекМаршрут.ЕДРПОУКонтрагента);
							лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ТекМаршрут.ФилиалКонтрагента);
							лПараметрыОтправкиКвитанции.Вставить("RcvName",   НаименованиеКонтрагентаДляОтправки(ТекМаршрут.ЕДРПОУКонтрагента, ТекМаршрут.ФилиалКонтрагента));
							
							ЭлементМассиваИзмененийВМаршруте = Новый Структура;
							ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
							ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван"));
							МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
							лСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван");
							
							Если РежимСинхронизации Тогда
								лПараметрыОтправкиКвитанции.Вставить("DocVer", DocVer);
							КонецЕсли;
							лРезультатОтправкиОтвета = ОтправитьОтветПоДокументуСПомощьюEDIПровайдера(лПараметрыОтправкиКвитанции, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
							Если лРезультатОтправкиОтвета = Неопределено Тогда	
								ДанныеДокумента.ЕстьОшибки = Истина;				
								
								Замечание = НСтр("ru = 'Не удалось отправить квитанцию по документу.'; uk = 'Не вдалось відправити квитанцію по документу.'");
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								
								Продолжить;
							Иначе
								ИмяФайлаКвитанции = лРезультатОтправкиОтвета.ИмяФайла;
								DocVerКвитанции = лРезультатОтправкиОтвета.DocVer;
								ЕстьОтправленыеКвитанции = Истина;
								
								ИнформацияООтправленойКвитанции = НСтр("ru = 'Получатель: '; uk = 'Одержувач: '") + ЭлектронныйДокумент.ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ЭлектронныйДокумент.ФилиалКонтрагента), "(" + ЭлектронныйДокумент.ФилиалКонтрагента + ")", "");
								ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + "
								|
								|"
								+ НСтр("ru = 'Имя файла: '; uk = 'Ім''я файлу: '") + ЭлектронныйДокумент.ИмяФайла + "
								|"
								+ НСтр("ru = 'Имя файла квитанции: '; uk = 'Ім''я файлу квитанції: '") + лРезультатОтправкиОтвета.ИмяФайла;
							КонецЕсли;
						КонецЕсли;
					Иначе
						ОтправкаПоМаршруту = Истина;
						МассивОтправокПоМаршруту = Новый Массив;
						МассивИзмененийВМаршруте = Новый Массив;
						ЕстьОтправленыеКвитанции = Ложь;
						
						ИнформацияООтправленойКвитанции = "";
						ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + НСтр("ru = 'Имя файла электронного документа: '; uk = 'Ім''я файлу електронного документу: '") + ЭлектронныйДокумент.ИмяФайла;
						
						лПараметрыОтправкиКвитанции.Вставить("RoutePosition", ЭлектронныйДокумент.RoutePosition);
						Для ПозицияВМаршруте = 0 по ЭлектронныйДокумент.RoutePosition - 1 Цикл
							ТекМаршрут = ЭлектронныйДокумент.Маршрут.Получить(ПозицияВМаршруте);
							
							Если ТипЗнч(ПараметрыСозданияКвитанции) = Тип("Структура") Тогда
								ПараметрыСозданияКвитанции.Вставить("RcvEdrpou", ТекМаршрут.ЕДРПОУКонтрагента);
								ПараметрыСозданияКвитанции.Вставить("RcvDept",   ТекМаршрут.ФилиалКонтрагента);
								
								РезультатСозданияКвитанции = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/makekvt", ПараметрыСозданияКвитанции);
								Если РезультатСозданияКвитанции.Code <> 0 Тогда
									лПараметрыОтправкиКвитанции.Вставить("MedocKvt", КвитанцияТело);
									ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка создания квитанции'; uk = 'Помилка створення квитанції'") + ": " + РезультатСозданияКвитанции.Message);
								ИначеЕсли ЗначениеЗаполнено(РезультатСозданияКвитанции.Body) Тогда
									лПараметрыОтправкиКвитанции.Вставить("MedocKvt", РезультатСозданияКвитанции.Body);
								Иначе
									лПараметрыОтправкиКвитанции.Вставить("MedocKvt", КвитанцияТело);
								КонецЕсли;
							КонецЕсли;
							
							лПараметрыОтправкиКвитанции.Вставить("ToNextHop", Ложь);
							//////лПараметрыОтправкиКвитанции.Вставить("IsMultiChange", Истина);//?
							лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ТекМаршрут.ЕДРПОУКонтрагента);
							лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ТекМаршрут.ФилиалКонтрагента);
							лПараметрыОтправкиКвитанции.Вставить("RcvName",   НаименованиеКонтрагентаДляОтправки(ТекМаршрут.ЕДРПОУКонтрагента, ТекМаршрут.ФилиалКонтрагента));
							Если РежимСинхронизации Тогда
								лПараметрыОтправкиКвитанции.Вставить("DocVer", DocVer);
							КонецЕсли;
							
							лРезультатОтправкиОтвета = ОтправитьОтветПоДокументуСПомощьюEDIПровайдера(лПараметрыОтправкиКвитанции, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
							Если лРезультатОтправкиОтвета = Неопределено Тогда	
								ДанныеДокумента.ЕстьОшибки = Истина;				
								
								Замечание = НСтр("ru = 'Не удалось отправить квитанцию по документу.'; uk = 'Не вдалось відправити квитанцію по документу.'");
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								
								//Продолжить;
							Иначе
								//Если Не ЕстьОтправленыеКвитанции Тогда
									ИмяФайлаКвитанции = лРезультатОтправкиОтвета.ИмяФайла;
									DocVerКвитанции = лРезультатОтправкиОтвета.DocVer;
									ЕстьОтправленыеКвитанции = Истина;
								//КонецЕсли;
								DocVer = лРезультатОтправкиОтвета.DocVer;
								
								ЭлементМассиваОтправокПоМаршруту = Новый Структура;
								ЭлементМассиваОтправокПоМаршруту.Вставить("ЕДРПОУКонтрагента", ТекМаршрут.ЕДРПОУКонтрагента);
								ЭлементМассиваОтправокПоМаршруту.Вставить("ФилиалКонтрагента", ТекМаршрут.ФилиалКонтрагента);
								ЭлементМассиваОтправокПоМаршруту.Вставить("ИмяФайла", лРезультатОтправкиОтвета.ИмяФайла);
								ЭлементМассиваОтправокПоМаршруту.Вставить("DocVer", лРезультатОтправкиОтвета.DocVer);
								ЭлементМассиваОтправокПоМаршруту.Вставить("RoutePosition", ПозицияВМаршруте);
								ЭлементМассиваОтправокПоМаршруту.Вставить("ToNextHop", Ложь);
								МассивОтправокПоМаршруту.Добавить(ЭлементМассиваОтправокПоМаршруту);
								
								Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
									ЭлементМассиваИзмененийВМаршруте = Новый Структура;
									ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
									ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоОтклонение"));
									МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
								КонецЕсли;
								
								ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции
								+ Символы.ПС
								+ НСтр("ru = 'Получатель'; uk = 'Одержувач'") + "(" + Строка(ПозицияВМаршруте) + ")" + ": " + ТекМаршрут.ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ТекМаршрут.ФилиалКонтрагента), "(" + ТекМаршрут.ФилиалКонтрагента + ")", "")
								+ Символы.ПС
								+ НСтр("ru = 'Имя файла квитанции: '; uk = 'Ім''я файлу квитанції: '") + лРезультатОтправкиОтвета.ИмяФайла;
							КонецЕсли;
						КонецЦикла;
						
						Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
							ПозицияВМаршруте = ЭлектронныйДокумент.RoutePosition;
							Если ПозицияВМаршруте < ЭлектронныйДокумент.Маршрут.Количество() Тогда
								ЭлементМассиваИзмененийВМаршруте = Новый Структура;
								ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
								ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоОтклонение"));
								МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
							КонецЕсли;
						ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
							ПозицияВМаршруте = ЭлектронныйДокумент.RoutePosition;
							Если ПозицияВМаршруте < ЭлектронныйДокумент.Маршрут.Количество() Тогда
								ЭлементМассиваИзмененийВМаршруте = Новый Структура;
								ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
								ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение"));
								МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
							КонецЕсли;
							
							ПозицияВМаршруте = ЭлектронныйДокумент.RoutePosition + 1;
							Если ПозицияВМаршруте < ЭлектронныйДокумент.Маршрут.Количество() Тогда
								ТекМаршрут = ЭлектронныйДокумент.Маршрут.Получить(ПозицияВМаршруте);
								
								Если ТипЗнч(ПараметрыСозданияКвитанции) = Тип("Структура") Тогда
									ПараметрыСозданияКвитанции.Вставить("RcvEdrpou", ТекМаршрут.ЕДРПОУКонтрагента);
									ПараметрыСозданияКвитанции.Вставить("RcvDept",   ТекМаршрут.ФилиалКонтрагента);
									
									РезультатСозданияКвитанции = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/makekvt", ПараметрыСозданияКвитанции);
									Если РезультатСозданияКвитанции.Code <> 0 Тогда
										лПараметрыОтправкиКвитанции.Вставить("MedocKvt", КвитанцияТело);
										ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка создания квитанции'; uk = 'Помилка створення квитанції'") + ": " + РезультатСозданияКвитанции.Message);
									ИначеЕсли ЗначениеЗаполнено(РезультатСозданияКвитанции.Body) Тогда
										лПараметрыОтправкиКвитанции.Вставить("MedocKvt", РезультатСозданияКвитанции.Body);
									Иначе
										лПараметрыОтправкиКвитанции.Вставить("MedocKvt", КвитанцияТело);
									КонецЕсли;
								КонецЕсли;
								
								лПараметрыОтправкиКвитанции.Удалить("MedocKvt");
								лПараметрыОтправкиКвитанции.Вставить("ToNextHop", Истина);
								лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ТекМаршрут.ЕДРПОУКонтрагента);
								лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ТекМаршрут.ФилиалКонтрагента);
								лПараметрыОтправкиКвитанции.Вставить("RcvName",   НаименованиеКонтрагентаДляОтправки(ТекМаршрут.ЕДРПОУКонтрагента, ТекМаршрут.ФилиалКонтрагента));
								Если РежимСинхронизации Тогда
									лПараметрыОтправкиКвитанции.Вставить("DocVer", DocVer);
								КонецЕсли;
								лРезультатОтправкиОтвета = ОтправитьОтветПоДокументуСПомощьюEDIПровайдера(лПараметрыОтправкиКвитанции, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
								Если лРезультатОтправкиОтвета = Неопределено Тогда	
									ДанныеДокумента.ЕстьОшибки = Истина;				
									
									Замечание = НСтр("ru = 'Не удалось отправить квитанцию по документу.'; uk = 'Не вдалось відправити квитанцію по документу.'");
									ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
									
									ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
									ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
									ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
									
									//Продолжить;
								Иначе
									//Если Не ЕстьОтправленыеКвитанции Тогда
										ИмяФайлаКвитанции = лРезультатОтправкиОтвета.ИмяФайла;
										DocVerКвитанции = лРезультатОтправкиОтвета.DocVer;
										ЕстьОтправленыеКвитанции = Истина;
									//КонецЕсли;
									
									ЭлементМассиваОтправокПоМаршруту = Новый Структура;
									ЭлементМассиваОтправокПоМаршруту.Вставить("ЕДРПОУКонтрагента", ТекМаршрут.ЕДРПОУКонтрагента);
									ЭлементМассиваОтправокПоМаршруту.Вставить("ФилиалКонтрагента", ТекМаршрут.ФилиалКонтрагента);
									ЭлементМассиваОтправокПоМаршруту.Вставить("ИмяФайла", лРезультатОтправкиОтвета.ИмяФайла);
									ЭлементМассиваОтправокПоМаршруту.Вставить("DocVer", лРезультатОтправкиОтвета.DocVer);
									ЭлементМассиваОтправокПоМаршруту.Вставить("RoutePosition", ПозицияВМаршруте);
									ЭлементМассиваОтправокПоМаршруту.Вставить("ToNextHop", Истина);
									МассивОтправокПоМаршруту.Добавить(ЭлементМассиваОтправокПоМаршруту);
									
									ЭлементМассиваИзмененийВМаршруте = Новый Структура;
									ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
									ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен"));
									МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
									лСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
									
									ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции
									+ Символы.ПС
									+ НСтр("ru = 'Получатель'; uk = 'Одержувач'") + "(" + Строка(ПозицияВМаршруте) + ")" + ": " + ТекМаршрут.ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ТекМаршрут.ФилиалКонтрагента), "(" + ТекМаршрут.ФилиалКонтрагента + ")", "")
									+ Символы.ПС
									+ НСтр("ru = 'Имя файла квитанции: '; uk = 'Ім''я файлу квитанції: '") + лРезультатОтправкиОтвета.ИмяФайла;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если не ЕстьОтправленыеКвитанции Тогда
						Продолжить;
					КонецЕсли;
				Иначе
					лПараметрыОтправкиКвитанции.Вставить("RcvName", НаименованиеКонтрагентаДляОтправки(ЭлектронныйДокумент.ЕДРПОУКонтрагента, ЭлектронныйДокумент.ФилиалКонтрагента));
					Если РежимСинхронизации Тогда
						лПараметрыОтправкиКвитанции.Вставить("DocVer", DocVer);
					КонецЕсли;
					лРезультатОтправкиОтвета = ОтправитьОтветПоДокументуСПомощьюEDIПровайдера(лПараметрыОтправкиКвитанции, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					Если лРезультатОтправкиОтвета = Неопределено Тогда	
						ДанныеДокумента.ЕстьОшибки = Истина;				
						
						Замечание = НСтр("ru = 'Не удалось отправить квитанцию по документу.'; uk = 'Не вдалось відправити квитанцію по документу.'");
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Продолжить;
					Иначе
						ИмяФайлаКвитанции = лРезультатОтправкиОтвета.ИмяФайла;
						DocVerКвитанции = лРезультатОтправкиОтвета.DocVer;
						
						ИнформацияООтправленойКвитанции = НСтр("ru = 'Получатель: '; uk = 'Одержувач: '") + ЭлектронныйДокумент.ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ЭлектронныйДокумент.ФилиалКонтрагента), "(" + ЭлектронныйДокумент.ФилиалКонтрагента + ")", "");
						ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + "
						|
						|"
						+ НСтр("ru = 'Имя файла: '; uk = 'Ім''я файлу: '") + ЭлектронныйДокумент.ИмяФайла + "
						|"
						+ НСтр("ru = 'Имя файла квитанции: '; uk = 'Ім''я файлу квитанції: '") + лРезультатОтправкиОтвета.ИмяФайла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
			лЭлектронныйДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
			лЭлектронныйДокументОбъект.Состояние = лСостояниеЭлектронногоДокумента;
			Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение")
				или ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
				
				Если ТекстКвитанции <> "" Тогда
					Если ЗначениеЗаполнено(лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом) Тогда
						лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом = лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом + Символы.ПС;
					КонецЕсли;
					лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом = лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом + ТекстКвитанции;
				КонецЕсли;
			КонецЕсли;
			Если ОтправкаПоМаршруту Тогда
				Для Каждого ЭлементМассиваИзмененийВМаршруте Из МассивИзмененийВМаршруте Цикл
					ЭлементМаршрута = лЭлектронныйДокументОбъект.Маршрут.Получить(ЭлементМассиваИзмененийВМаршруте.ПозицияВМаршруте);
					ЭлементМаршрута.Состояние = ЭлементМассиваИзмененийВМаршруте.Состояние;
				КонецЦикла;
			КонецЕсли;
			лЭлектронныйДокументОбъект.ПоследняяОперация = ТекущаяДата();
			лЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
			лЭлектронныйДокументОбъект.Записать();
			
			ДанныеДокумента.Состояние = лЭлектронныйДокументОбъект.Состояние;
			//ЗафиксироватьСобытиеЭлектронногоДокумента(ЭлектронныйДокумент, лСобытиеЭлектронногоДокумента);
			
			Если лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента.ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента Тогда
				СоглашениеОАнулированииДокументаОбработать(лЭлектронныйДокументОбъект.Ссылка, Ложь);
			КонецЕсли;
			
			// Создать документ по квитанции-ответу
			ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + "
			|" + КвитанцияТекст;
			
			Если не ПодписыватьКвитанциюВсемиПодписями Тогда
				Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
					ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + "
					|
					|"
					+ НСтр("ru = 'Подписи: '; uk = 'Підписи: '");
					ДополнитьОписаниеДаннымиПоПодписямКонтрагента(ПолучитьМассивПодписейКонтрагентаИзПодписанногоЭлектронногоДокумента(ТелоДокумента), ИнформацияООтправленойКвитанции, Неопределено, ОтражатьTSPСтатус, ОтражатьOCSPСтатус);
				КонецЕсли;
			КонецЕсли;
			
			
			Если Квитанция = Документы.скEDI_Квитанция.ПустаяСсылка() Тогда
				лДанныеЗаполненияКвитанции = Новый Структура;
				лДанныеЗаполненияКвитанции.Вставить("ВидКвитанции",        ВидКвитанции);
				лДанныеЗаполненияКвитанции.Вставить("Организация",         лОрганизацияEDI);
				лДанныеЗаполненияКвитанции.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
				лДанныеЗаполненияКвитанции.Вставить("ИмяФайла",            ИмяФайлаКвитанции);
				лДанныеЗаполненияКвитанции.Вставить("DocVer",              DocVerКвитанции);
				лДанныеЗаполненияКвитанции.Вставить("ЕДРПОУКонтрагента",   лЭлектронныйДокументОбъект.ЕДРПОУКонтрагента);
				лДанныеЗаполненияКвитанции.Вставить("ФилиалКонтрагента",   лЭлектронныйДокументОбъект.ФилиалКонтрагента);
				лДанныеЗаполненияКвитанции.Вставить("ТипКвитанции",        ТипКвитанции);
				лДанныеЗаполненияКвитанции.Вставить("ТекстКвитанции",      ИнформацияООтправленойКвитанции);
				лДанныеЗаполненияКвитанции.Вставить("ТелоКвитанции",       КвитанцияТело);
				лДанныеЗаполненияКвитанции.Вставить("ВхИсх",               Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий);
				
				лКвитанцияОбъект = Документы.скEDI_Квитанция.СоздатьДокумент();
				лКвитанцияОбъект.Заполнить(лДанныеЗаполненияКвитанции);
				Если ОтправкаПоМаршруту Тогда
					Для Каждого ЭлементМассиваОтправокПоМаршруту Из МассивОтправокПоМаршруту Цикл
						НоваяСтрокаОтправкиПоМаршруту = лКвитанцияОбъект.ОтправкиПоМаршруту.Добавить();
						НоваяСтрокаОтправкиПоМаршруту.ЕДРПОУКонтрагента = ЭлементМассиваОтправокПоМаршруту.ЕДРПОУКонтрагента;
						НоваяСтрокаОтправкиПоМаршруту.ФилиалКонтрагента = ЭлементМассиваОтправокПоМаршруту.ФилиалКонтрагента;
						НоваяСтрокаОтправкиПоМаршруту.ИмяФайла = ЭлементМассиваОтправокПоМаршруту.ИмяФайла;
						НоваяСтрокаОтправкиПоМаршруту.DocVer = ЭлементМассиваОтправокПоМаршруту.DocVer;
						НоваяСтрокаОтправкиПоМаршруту.RoutePosition = ЭлементМассиваОтправокПоМаршруту.RoutePosition;
						НоваяСтрокаОтправкиПоМаршруту.ToNextHop = ЭлементМассиваОтправокПоМаршруту.ToNextHop;
					КонецЦикла;
				КонецЕсли;
			Иначе
				лКвитанцияОбъект = Квитанция.ПолучитьОбъект();
				лКвитанцияОбъект.Дата = ТекущаяДата();
				лКвитанцияОбъект.ТекстКвитанции = ИнформацияООтправленойКвитанции;
				лКвитанцияОбъект.Готовится = Ложь;
				лКвитанцияОбъект.ИмяФайла = ИмяФайлаКвитанции;
				лКвитанцияОбъект.DocVer = DocVerКвитанции;
				//лКвитанцияОбъект.ТелоКвитанции = КвитанцияТело;
				Если ОтправкаПоМаршруту Тогда
					Для Каждого ЭлементМассиваОтправокПоМаршруту Из МассивОтправокПоМаршруту Цикл
						НоваяСтрокаОтправкиПоМаршруту = лКвитанцияОбъект.ОтправкиПоМаршруту.Добавить();
						НоваяСтрокаОтправкиПоМаршруту.ЕДРПОУКонтрагента = ЭлементМассиваОтправокПоМаршруту.ЕДРПОУКонтрагента;
						НоваяСтрокаОтправкиПоМаршруту.ФилиалКонтрагента = ЭлементМассиваОтправокПоМаршруту.ФилиалКонтрагента;
						НоваяСтрокаОтправкиПоМаршруту.ИмяФайла = ЭлементМассиваОтправокПоМаршруту.ИмяФайла;
						НоваяСтрокаОтправкиПоМаршруту.DocVer = ЭлементМассиваОтправокПоМаршруту.DocVer;
						НоваяСтрокаОтправкиПоМаршруту.RoutePosition = ЭлементМассиваОтправокПоМаршруту.RoutePosition;
						НоваяСтрокаОтправкиПоМаршруту.ToNextHop = ЭлементМассиваОтправокПоМаршруту.ToNextHop;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			лКвитанцияОбъект.ОбменДанными.Загрузка = Истина;
			лКвитанцияОбъект.Записать();
			
			СобытиеДляЖурнала = лСобытиеЭлектронногоДокументаТекст + ": """
			+ ЭлектронныйДокумент.ВидЭлектронногоДокумента.Наименование + """ №" + ЭлектронныйДокумент.НомерДокумента + НСтр("ru = ' от '; uk = ' від '") + Формат(ЭлектронныйДокумент.ДатаДокумента, "ДФ=dd.MM.yyyy");
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, СобытиеДляЖурнала, , Ложь);
			
			УстановитьСнятьОтметкуОбработано(ЭлектронныйДокумент, Истина);
			
			
			Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
				тСобытиеПри = ПараметрыСобытий.СобытиеПри;
				тОрганизация = ПараметрыСобытий.Организация;
				тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
				тВхИсх = ПараметрыСобытий.ВхИсх;
				тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
				тЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
				тСостояние = лЭлектронныйДокументОбъект.Состояние;
				тДокумент1С = лЭлектронныйДокументОбъект.Документ1С;
				тМассивВложений = Неопределено;
				ПараметрыСобытий.Свойство("МассивВложений", тМассивВложений);
				Если ТипЗнч(тМассивВложений) <> Тип("Массив") Тогда
					Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
						тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
					Иначе
						тМассивВложений = Новый Массив;
					КонецЕсли;
					ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
				КонецЕсли;
				тМассивПодписей = Неопределено;
				ПараметрыСобытий.Свойство("МассивПодписей", тМассивПодписей);
				Если ТипЗнч(тМассивПодписей) <> Тип("Массив") Тогда
					тМассивПодписей = Новый Массив;
					ПараметрыСобытий.Вставить("МассивПодписей", тМассивПодписей);
				КонецЕсли;
				ОбработатьСобытие_ПриОтправкеКвитанции(тСобытиеПри, тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписей, тДокумент1С, тМассивВложений);
			КонецЕсли;
			
		ИначеЕсли СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезДФС") Тогда
			Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
				тСобытиеПеред = ПараметрыСобытий.СобытиеПеред;
				тОрганизация = ПараметрыСобытий.Организация;
				тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
				тВхИсх = ПараметрыСобытий.ВхИсх;
				тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
				тЭлектронныйДокумент = ПараметрыСобытий.ЭлектронныйДокумент;
				тСостояние = ПараметрыСобытий.Состояние;
				тДокумент1С = ПараметрыСобытий.Документ1С;
				Если ТипЗнч(ПараметрыСобытий.МассивВложений) = Тип("Массив") Тогда
					тМассивВложений = ПараметрыСобытий.МассивВложений;
				Иначе
					Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
						тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
					Иначе
						тМассивВложений = Новый Массив;
					КонецЕсли;
					ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
				КонецЕсли;
				тМассивПодписейДляОбработкиСобытий = ПолучитьМассивПодписейДляОбработкиСобытий(тЭлектронныйДокумент);
				ПараметрыСобытий.Вставить("МассивПодписей", тМассивПодписейДляОбработкиСобытий);
				ПричинаОтказа = "";
				Если не ОбработатьСобытие_ПередОтправкойКвитанции(тСобытиеПеред, тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписейДляОбработкиСобытий, тДокумент1С, тМассивВложений, ПричинаОтказа) Тогда
					Отказ = Истина;
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ПричинаОтказа);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ПричинаОтказа);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ДанныеДокумента.ЕстьОшибки Тогда
				// Отправить запрос EDI провайдеру, обработать результат запроса.
				лПараметрыОтправкиКвитанции = Новый Структура;
				лПараметрыОтправкиКвитанции.Вставить("Edrpou",    лОрганизацияEDI.Код);
				лПараметрыОтправкиКвитанции.Вставить("Dept",      лОрганизацияEDI.Филиал);
				лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ЭлектронныйДокумент.ЕДРПОУКонтрагента);
				лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ЭлектронныйДокумент.ФилиалКонтрагента);
				СтрокаПодключенияEDI = Неопределено;
				СерверEDI = Неопределено;
				ПортEDI = Неопределено;
				ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиКвитанции, лНастройкиПодписиШифрованияДляТекущейОрганизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
				//лПараметрыОтправкиКвитанции.Вставить("Cert",      лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСертификата);
				//лПараметрыОтправкиКвитанции.Вставить("Key",       лНастройкиПодписиШифрованияДляТекущейОрганизации.ТелоСекретногоКлюча);
				//лПараметрыОтправкиКвитанции.Вставить("Password",  лНастройкиПодписиШифрованияДляТекущейОрганизации.ПарольСекретногоКлюча);
				лПараметрыОтправкиКвитанции.Вставить("Body",  КвитанцияТело);
				
				лПараметрыОтправкиКвитанции.Вставить("FileName",  ЭлектронныйДокумент.ИмяФайла);
				
				лРезультатОтправкиОтвета = ОтправитьОтветПоДокументуСПомощьюEDIПровайдераГовРК(лПараметрыОтправкиКвитанции, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
			КонецЕсли;
			
			Если лРезультатОтправкиОтвета = Неопределено Тогда	
				ДанныеДокумента.ЕстьОшибки = Истина;				
				
				Замечание = НСтр("ru = 'Не удалось отправить квитанцию по документу.'; uk = 'Не вдалось відправити квитанцію по документу.'");
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
				
				ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
				ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
			Иначе
				КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
				лЭлектронныйДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
				лЭлектронныйДокументОбъект.Состояние = лСостояниеЭлектронногоДокумента;
				лЭлектронныйДокументОбъект.ПоследняяОперация = ТекущаяДата();
				Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение")
					или ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
					
					Если ТекстКвитанции <> "" Тогда
						Если ЗначениеЗаполнено(лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом) Тогда
							лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом = лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом + Символы.ПС;
						КонецЕсли;
						лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом = лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом + ТекстКвитанции;
					КонецЕсли;
				КонецЕсли;
				лЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
				лЭлектронныйДокументОбъект.Записать();
				
				ДанныеДокумента.Состояние = лЭлектронныйДокументОбъект.Состояние;
				//ЗафиксироватьСобытиеЭлектронногоДокумента(ЭлектронныйДокумент, лСобытиеЭлектронногоДокумента);
				
				// Создать документ по квитанции-ответу
				ИнформацияООтправленойКвитанции = НСтр("ru = 'Получатель: '; uk = 'Одержувач: '") + лЭлектронныйДокументОбъект.ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(лЭлектронныйДокументОбъект.ФилиалКонтрагента), "(" + лЭлектронныйДокументОбъект.ФилиалКонтрагента + ")", "");
				ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + "
				|
				|" + КвитанцияТекст;// ПолныйТекстКвитанции;
				
				Если не ПодписыватьКвитанциюВсемиПодписями Тогда
					Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
						ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + "
						|
						|"
						+ НСтр("ru = 'Подписи: '; uk = 'Підписи: '");
						ДополнитьОписаниеДаннымиПоПодписямКонтрагента(ПолучитьМассивПодписейКонтрагентаИзПодписанногоЭлектронногоДокумента(ТелоДокумента), ИнформацияООтправленойКвитанции, Неопределено, ОтражатьTSPСтатус, ОтражатьOCSPСтатус);
					КонецЕсли;
				КонецЕсли;
				
				
				Если Квитанция = Документы.скEDI_Квитанция.ПустаяСсылка() Тогда
					лДанныеЗаполненияКвитанции = Новый Структура;
					лДанныеЗаполненияКвитанции.Вставить("ВидКвитанции",        ВидКвитанции);
					лДанныеЗаполненияКвитанции.Вставить("Организация",         лОрганизацияEDI);
					лДанныеЗаполненияКвитанции.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
					//лДанныеЗаполненияКвитанции.Вставить("ИмяФайла",            лРезультатОтправкиОтвета.ИмяФайла);
					лДанныеЗаполненияКвитанции.Вставить("ЕДРПОУКонтрагента",   лЭлектронныйДокументОбъект.ЕДРПОУКонтрагента);
					лДанныеЗаполненияКвитанции.Вставить("ФилиалКонтрагента",   лЭлектронныйДокументОбъект.ФилиалКонтрагента);
					лДанныеЗаполненияКвитанции.Вставить("ТипКвитанции",        ТипКвитанции);
					лДанныеЗаполненияКвитанции.Вставить("ТекстКвитанции",      ИнформацияООтправленойКвитанции);
					лДанныеЗаполненияКвитанции.Вставить("ТелоКвитанции",       КвитанцияТело);
					лДанныеЗаполненияКвитанции.Вставить("ВхИсх",               Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий);
					
					лКвитанцияОбъект = Документы.скEDI_Квитанция.СоздатьДокумент();
					лКвитанцияОбъект.Заполнить(лДанныеЗаполненияКвитанции);
				Иначе
					лКвитанцияОбъект = Квитанция.ПолучитьОбъект();
					лКвитанцияОбъект.Дата = ТекущаяДата();
					лКвитанцияОбъект.ТекстКвитанции = ИнформацияООтправленойКвитанции;
					лКвитанцияОбъект.Готовится = Ложь;
					//лКвитанцияОбъект.ИмяФайла = лРезультатОтправкиОтвета.ИмяФайла;
					//лКвитанцияОбъект.ТелоКвитанции = КвитанцияТело;
				КонецЕсли;
				лКвитанцияОбъект.ОбменДанными.Загрузка = Истина;
				лКвитанцияОбъект.Записать();
				
				//// 2017-09-27
				//ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "Квитанция сохранена """ + Строка(ТипКвитанции) + """ по документу """ + ЭлектронныйДокумент.ВидЭлектронногоДокумента.Наименование + """ №" + ЭлектронныйДокумент.НомерДокумента + " " + НСтр("ru = 'от'; uk = 'від'") + " " + Формат(ЭлектронныйДокумент.ДатаДокумента, "ДФ=dd.MM.yyyy"));
				//// ...2017-09-27
				
				СобытиеДляЖурнала = лСобытиеЭлектронногоДокументаТекст + ": """
				+ ЭлектронныйДокумент.ВидЭлектронногоДокумента.Наименование + """ №" + ЭлектронныйДокумент.НомерДокумента + НСтр("ru = ' от '; uk = ' від '") + Формат(ЭлектронныйДокумент.ДатаДокумента, "ДФ=dd.MM.yyyy");
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, СобытиеДляЖурнала, , Ложь);
				
				УстановитьСнятьОтметкуОбработано(ЭлектронныйДокумент, Истина);
				
				Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
					тСобытиеПри = ПараметрыСобытий.СобытиеПри;
					тОрганизация = ПараметрыСобытий.Организация;
					тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
					тВхИсх = ПараметрыСобытий.ВхИсх;
					тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
					тЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
					тСостояние = лЭлектронныйДокументОбъект.Состояние;
					тДокумент1С = лЭлектронныйДокументОбъект.Документ1С;
					тМассивВложений = Неопределено;
					ПараметрыСобытий.Свойство("МассивВложений", тМассивВложений);
					Если ТипЗнч(тМассивВложений) <> Тип("Массив") Тогда
						Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
							тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
						Иначе
							тМассивВложений = Новый Массив;
						КонецЕсли;
						ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
					КонецЕсли;
					тМассивПодписей = Неопределено;
					ПараметрыСобытий.Свойство("МассивПодписей", тМассивПодписей);
					Если ТипЗнч(тМассивПодписей) <> Тип("Массив") Тогда
						тМассивПодписей = Новый Массив;
						ПараметрыСобытий.Вставить("МассивПодписей", тМассивПодписей);
					КонецЕсли;
					ОбработатьСобытие_ПриОтправкеКвитанции(тСобытиеПри, тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписей, тДокумент1С, тМассивВложений);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Обновление журнала операций.
	Если ЖурналОперации <> "" Тогда
		Если ДополнительныеПараметры.ЖурналОперации = "" Тогда
			ДополнительныеПараметры.ЖурналОперации = ЖурналОперации;
		Иначе
			ДополнительныеПараметры.ЖурналОперации = ДополнительныеПараметры.ЖурналОперации + Символы.ПС + ЖурналОперации;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОтправитьКвитанцииПоЭлектроннымДокументам()

Процедура ЗафиксироватьФактОбработкиВходящихСообщений(Организация) Экспорт
	МенеджерЗаписи = РегистрыСведений.скEDI_ВыполненныеОперацииОбработкиДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.ДатаВыполнения = ТекущаяДата();
	МенеджерЗаписи.Записать(Истина);
КонецПроцедуры


Процедура ВыполнитьАвтоматическиеОперацииПослеПриемаДокумента(Организация, НастройкиПодписейШифрования, аоОперация, аоЭлектронныйДокумент, аоДополнительно)
	Если ЗначениеЗаполнено(аоОперация) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", аоЭлектронныйДокумент);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	скEDI_ЭлектронныйДокумент.Организация КАК Организация,
		               |	скEDI_ЭлектронныйДокумент.Документ1С КАК Документ1С,
		               |	скEDI_ЭлектронныйДокумент.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
		               |	скEDI_ЭлектронныйДокумент.Ссылка КАК ЭлектронныйДокумент,
		               |	ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыДокументов1С.ПустаяСсылка) КАК ВидДокумента1С,
		               |	скEDI_ЭлектронныйДокумент.Состояние КАК Состояние,
		               |	скEDI_ЭлектронныйДокумент.ВхИсх КАК ВхИсх,
		               |	"""" КАК ТелоДокумента,
		               |	"""" КАК ИзображениеДокумента,
		               |	"""" КАК ВложениеДокумента1,
		               |	"""" КАК ИмяФайлаВложениеДокумента1,
		               |	"""" КАК ВложениеДокумента2,
		               |	"""" КАК ИмяФайлаВложениеДокумента2,
		               |	"""" КАК ВложениеДокумента3,
		               |	"""" КАК ИмяФайлаВложениеДокумента3,
		               |	НЕОПРЕДЕЛЕНО КАК МассивВложенийДокумента4,
		               |	ЛОЖЬ КАК ЕстьОшибки,
		               |	ЛОЖЬ КАК ЕстьЗамечания,
		               |	"""" КАК ОписаниеОшибок,
		               |	ЛОЖЬ КАК ПроверкаВыполнена,
		               |	"""" КАК УИДСтроки,
		               |	скEDI_ЭлектронныйДокумент.СостояниеРегистрацияВДФС КАК СостояниеРегистрацияВДФС,
		               |	скEDI_ЭлектронныйДокумент.ЕстьФинальнаяКвитанцияДФС КАК ЕстьФинальнаяКвитанцияДФС,
		               |	скEDI_ЭлектронныйДокумент.РегистрируетсяВЕРННПокупателем КАК РегистрируетсяВЕРННПокупателем
		               |ИЗ
		               |	Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
		               |ГДЕ
		               |	скEDI_ЭлектронныйДокумент.Организация = &Организация
		               |	И скEDI_ЭлектронныйДокумент.Ссылка = &ЭлектронныйДокумент";	
		Выборка = Запрос.Выполнить().Выбрать();
		
		КоличествоДокументовВОдномПотоке   = 1;//СтруктураПараметров.КоличествоДокументовВОдномПотоке;
		//КоличествоДокументовВТекущемПотоке = 0;
		//КоличествоОбработанныхДокументов   = 0;
		//КоличествоДокументовВВыборке       = Выборка.Количество();
		
		ТаблицаДляОбработки = СформироватьТаблицуДляОбработкиДокументов();
			
		ВыполняемыеОперации = Новый Массив;
		ВыполняемыеОперации.Добавить(аоОперация);
		
		Пока Выборка.Следующий() Цикл 
			
			НоваяСтрокаТЗ = ТаблицаДляОбработки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, Выборка);
			НоваяСтрокаТЗ.УИДСтроки = Строка(Новый УникальныйИдентификатор);
		КонецЦикла;	
		
		СтруктураДополнительныхПараметров = Новый Структура;
		СтруктураДополнительныхПараметров.Вставить("ВыполняемыеОперации"              , ВыполняемыеОперации);
		СтруктураДополнительныхПараметров.Вставить("НастройкиНеобходимыхПодписей"     , Неопределено);
		СтруктураДополнительныхПараметров.Вставить("НастройкиПодписейШифрования"      , НастройкиПодписейШифрования);
		СтруктураДополнительныхПараметров.Вставить("КоличествоЭлементовВОднойТаблице" , КоличествоДокументовВОдномПотоке);
		СтруктураДополнительныхПараметров.Вставить("ЖурналОперации"                   , "");
		СтруктураДополнительныхПараметров.Вставить("РезультатВыполнения"              , "");
		СтруктураДополнительныхПараметров.Вставить("ВызовСКлиента"                    , Ложь);
		СтруктураДополнительныхПараметров.Вставить("ТекстКвитанции"                   , аоДополнительно);
		
		
		
		СтруктураПараметровОтправки = Новый Структура;
		СтруктураПараметровОтправки.Вставить("ТаблицаДокументов", ТаблицаДляОбработки);
		СтруктураПараметровОтправки.Вставить("СтруктураДополнительныхПараметров", СтруктураДополнительныхПараметров);
					
		ОбработатьДокументы_Фон(СтруктураПараметровОтправки);			
		
		//МассивПараметров = Новый Массив;
		//МассивПараметров.Добавить(СтруктураПараметровОтправки);
		//ФоновыеЗадания.Выполнить("ОбработатьДокументы_Фон"
		//									, МассивПараметров
		//									, Новый УникальныйИдентификатор
		//									, СтруктураПараметров.НаименованиеФоновогоПроцесса);
	КонецЕсли;
КонецПроцедуры

Функция ДобавитьПараметрыСекретногоКлючаПолучениеВхСообщений(лПараметрыПодписиДокумента, ОрганизацияПолучатель, лТаблицаНастроекПодписейШифрования, СтрокаПодключенияEDI, СерверEDI, ПортEDI, ЖурналОперации)
	СтрокаПодключенияEDI = Неопределено;
	СерверEDI = Неопределено;
	ПортEDI = Неопределено;
	
	ПараметрыОтбора = Новый Структура("ОрганизацияEDI", ОрганизацияПолучатель);
	НастройкиПодписейШифрования = лТаблицаНастроекПодписейШифрования.НайтиСтроки(ПараметрыОтбора);
	Если НастройкиПодписейШифрования.Количество() = 0 Тогда
		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не заполнена подпись шифрования организации'; uk = 'Не заповнено підпис шифрування по організації'") + ": " + ОрганизацияПолучатель + ".");
		Возврат Ложь;
	ИначеЕсли НастройкиПодписейШифрования.Количество() = 1 Тогда
		НастройкиПодписиШифрования = НастройкиПодписейШифрования[0];
		ДобавитьПараметрыСекретногоКлюча(лПараметрыПодписиДокумента, НастройкиПодписиШифрования, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
		Возврат Истина;
	Иначе
		МассивКлючей = Новый Массив;
		Для Каждого НастройкиПодписиШифрования Из НастройкиПодписейШифрования Цикл
			ЭлементМассиваКлючей = Новый Структура;
			
			ТекСтрокаПодключенияEDI = Неопределено;
			ТекСерверEDI = Неопределено;
			ТекПортEDI = Неопределено;
			ДобавитьПараметрыСекретногоКлюча(ЭлементМассиваКлючей, НастройкиПодписиШифрования, ТекСтрокаПодключенияEDI, ТекСерверEDI, ТекПортEDI);
			
			Если ЗначениеЗаполнено(ТекСтрокаПодключенияEDI) или ЗначениеЗаполнено(ТекСерверEDI) или ЗначениеЗаполнено(ТекПортEDI) Тогда
				Если ЗначениеЗаполнено(СтрокаПодключенияEDI) или ЗначениеЗаполнено(СерверEDI) или ЗначениеЗаполнено(ПортEDI) Тогда
					Если (СтрокаПодключенияEDI<>ТекСтрокаПодключенияEDI) или (СерверEDI<>ТекСерверEDI) или (ПортEDI<>ТекПортEDI) Тогда
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Неоднозначно указано адрес АПИ.'; uk = 'Неоднозначно вказано адресу АПІ.'"));
						Возврат Ложь;
						//Продолжить;
					КонецЕсли;
				Иначе
					СтрокаПодключенияEDI = ТекСтрокаПодключенияEDI;
					СерверEDI = ТекСерверEDI;
					ПортEDI = ТекПортEDI;
				КонецЕсли;
			КонецЕсли;
			
			МассивКлючей.Добавить(ЭлементМассиваКлючей);
		КонецЦикла;
		лПараметрыПодписиДокумента.Вставить("CertKeyGroup", МассивКлючей);
		Возврат Истина;
	КонецЕсли;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьПорциюСообщенийПоЭлектроннымДокументам(ОрганизацияПолучатель, ВсеНастройкиПодписейШифрования, ЕстьСледующаяПорцияСообщений, РежимСинхронизации, LastDocVer, ЖурналОперации = "")
	Перем лМассивПолученныхСообщений;
	
	лТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ВсеНастройкиПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ВсеНастройкиПодписейШифрования, Тип("ТаблицаЗначений")), ВсеНастройкиПодписейШифрования);
	лПараметрыПодписиДокумента = Новый Структура;
	//лПараметрыПодписиДокумента.Вставить("Организация", ОрганизацияПолучатель);
	лПараметрыПодписиДокумента.Вставить("Edrpou",   ОрганизацияПолучатель.Код);
	лПараметрыПодписиДокумента.Вставить("Dept",     ОрганизацияПолучатель.Филиал);
	лПараметрыПодписиДокумента.Вставить("PrgId",    ОрганизацияПолучатель.ИдентификаторПрограммы);
	СтрокаПодключенияEDI = Неопределено;
	СерверEDI = Неопределено;
	ПортEDI = Неопределено;
	Если ДобавитьПараметрыСекретногоКлючаПолучениеВхСообщений(лПараметрыПодписиДокумента, ОрганизацияПолучатель, лТаблицаНастроекПодписейШифрования, СтрокаПодключенияEDI, СерверEDI, ПортEDI, ЖурналОперации) Тогда
		лПараметрыПодписиДокумента.Вставить("ParseDocs", Истина);
		лПараметрыПодписиДокумента.Вставить("ParseKvt", Истина);
		
		РежимСинхронизации = Ложь;
		ПроверитьЗаполнитьДанныеПоСинхронизации(ОрганизацияПолучатель, лПараметрыПодписиДокумента, РежимСинхронизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
		
		лРезультатПолученияПорцииСообщений = ПолучитьПорциюСообщенийСПомощьюEDIПровайдера(лПараметрыПодписиДокумента, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
		Если лРезультатПолученияПорцииСообщений <> Неопределено Тогда
			Если Не лРезультатПолученияПорцииСообщений.Свойство("ЕстьСледующаяПорцияСообщений", ЕстьСледующаяПорцияСообщений) Тогда
				ЕстьСледующаяПорцияСообщений = Ложь;
			КонецЕсли;
			лРезультатПолученияПорцииСообщений.Свойство("МассивПолученныхСообщений", лМассивПолученныхСообщений);
			лРезультатПолученияПорцииСообщений.Свойство("LastDocVer", LastDocVer);
		КонецЕсли;
	Иначе
		ЕстьСледующаяПорцияСообщений = Ложь;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат лМассивПолученныхСообщений;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ОбработатьПорциюСообщенийПоЭлектроннымДокументам(МассивОбрабатываемыхСообщений, РежимСинхронизации, LastDocVer, ОрганизацияПолучатель, ВсеНастройкиПодписейШифрования, ТребуетсяОбновлениеФормыВызвавшейОбработкуСообщений, ЖурналОперации) Экспорт
	лНетОшибокВПроцессеОбработкиСообщений = Истина;
	
	лТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ВсеНастройкиПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ВсеНастройкиПодписейШифрования, Тип("ТаблицаЗначений")), ВсеНастройкиПодписейШифрования);
	лНастройкиПодписиШифрования = лТаблицаНастроекПодписейШифрования.Найти(ОрганизацияПолучатель, "ОрганизацияEDI");
	Если лНастройкиПодписиШифрования = Неопределено Тогда
		лНетОшибокВПроцессеОбработкиСообщений = Ложь;
		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не найдены настройки подписи шифрования Организации: '; uk = 'Не знайдені підписи шифрування по Організації: '") + ОрганизацияПолучатель + ".");
	Иначе
		Для Каждого лОбрабатываемоеСообщение Из МассивОбрабатываемыхСообщений Цикл
			SignCheckCode = лОбрабатываемоеСообщение.Получить("SignCheckCode");
			Если ТипЗнч(SignCheckCode) = Тип("Число") Тогда
				Если SignCheckCode <> 0 Тогда
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка по полученому сообщению с именем файла'; uk = 'Помилка по отриманому повідомленню з іменем файла'") + ": " + Строка(лОбрабатываемоеСообщение.Получить("FileName")) + Символы.ПС + Строка(лОбрабатываемоеСообщение.Получить("SignCheckMessage")));
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			Если лОбрабатываемоеСообщение.Получить("ParseCode") = 0 Тогда
				Если лОбрабатываемоеСообщение.Получить("DocType") = 1 Тогда
					аоОперация = "";
					аоЭлектронныйДокумент = Неопределено;
					аоДополнительно = "";
					ЭлектронныйДокументСсылка = Неопределено;
					Если ОбработатьВходящийЭлектронныйДокумент(лОбрабатываемоеСообщение, ОрганизацияПолучатель, ЭлектронныйДокументСсылка, Неопределено, ЖурналОперации, аоОперация, аоЭлектронныйДокумент, аоДополнительно) Тогда
						Если ЗначениеЗаполнено(аоОперация) Тогда
							ВыполнитьАвтоматическиеОперацииПослеПриемаДокумента(ОрганизацияПолучатель, лТаблицаНастроекПодписейШифрования, аоОперация, аоЭлектронныйДокумент, аоДополнительно);
						КонецЕсли;
						ОтправитьКвитанциюОбРезультатеПриемаДокументаЭлектронногоДокумента(Истина, лОбрабатываемоеСообщение, ОрганизацияПолучатель, ЭлектронныйДокументСсылка, лНастройкиПодписиШифрования, ЖурналОперации);
						ТребуетсяОбновлениеФормыВызвавшейОбработкуСообщений = Истина;
					Иначе
						ОтправитьКвитанциюОбРезультатеПриемаДокументаЭлектронногоДокумента(Ложь, лОбрабатываемоеСообщение, ОрганизацияПолучатель, ЭлектронныйДокументСсылка, лНастройкиПодписиШифрования, ЖурналОперации);
					КонецЕсли;
				ИначеЕсли лОбрабатываемоеСообщение.Получить("DocType") = 2 Тогда
					ЭлектронныйДокументСсылка = Неопределено;
					ЭлектронныйДокументПолучен = Ложь;
					Если ОбработатьКвитанциюПоЭлектронномуДокументу(лОбрабатываемоеСообщение, ОрганизацияПолучатель, ЭлектронныйДокументСсылка, ЭлектронныйДокументПолучен, ЖурналОперации) Тогда
						ОтправитьКвитанциюОбУспешнойДоставкеКвитанции(лОбрабатываемоеСообщение, ОрганизацияПолучатель, лНастройкиПодписиШифрования, ЖурналОперации);
						Если ЭлектронныйДокументПолучен тогда
							ОтправитьКвитанциюОбРезультатеПриемаДокументаЭлектронногоДокумента(Истина, лОбрабатываемоеСообщение, ОрганизацияПолучатель, ЭлектронныйДокументСсылка, лНастройкиПодписиШифрования, ЖурналОперации);
						КонецЕсли;
						ТребуетсяОбновлениеФормыВызвавшейОбработкуСообщений = Истина;
					Иначе
						ОтправитьКвитанциюОбОшибкеПриемаКвитанции(лОбрабатываемоеСообщение, ОрганизацияПолучатель, лНастройкиПодписиШифрования, ЖурналОперации);
					КонецЕсли;
				Иначе
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Получено сообщение непредусмотренного типа (код типа:'; uk = 'Отримано повідомлення непередбаченого типа (код типу:'") + " " + Строка(лОбрабатываемоеСообщение.Получить("DocType")) + НСтр("ru = ', имя файла сообщения: '; uk = ', ім''я файла повідомлення: '") + Строка(лОбрабатываемоеСообщение.Получить("FileName")) + ")");
				КонецЕсли;
			Иначе
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка по полученому сообщению с именем файла'; uk = 'Помилка по отриманому повідомленню з іменем файла'") + ": " + Строка(лОбрабатываемоеСообщение.Получить("FileName")) + Символы.ПС + Строка(лОбрабатываемоеСообщение.Получить("ParseMessage")));
			КонецЕсли;
		КонецЦикла;
		Если РежимСинхронизации и ЗначениеЗаполнено(LastDocVer) Тогда
			ДанныеПоРежимуСинхронизацииМенеджерЗаписи = РегистрыСведений.скEDI_ДанныеПоРежимуСинхронизации.СоздатьМенеджерЗаписи();
			ДанныеПоРежимуСинхронизацииМенеджерЗаписи.Организация = ОрганизацияПолучатель;
			ДанныеПоРежимуСинхронизацииМенеджерЗаписи.Прочитать();
			Если ДанныеПоРежимуСинхронизацииМенеджерЗаписи.Выбран() Тогда
				Если ДанныеПоРежимуСинхронизацииМенеджерЗаписи.LastDocVer < LastDocVer Тогда
					ДанныеПоРежимуСинхронизацииМенеджерЗаписи.LastDocVer = LastDocVer;
					ДанныеПоРежимуСинхронизацииМенеджерЗаписи.Записать(Истина);
				КонецЕсли;
			Иначе
				ДанныеПоРежимуСинхронизацииМенеджерЗаписи.Организация = ОрганизацияПолучатель;
				ДанныеПоРежимуСинхронизацииМенеджерЗаписи.LastDocVer = LastDocVer;
				ДанныеПоРежимуСинхронизацииМенеджерЗаписи.Записать(Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат лНетОшибокВПроцессеОбработкиСообщений;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьПорциюСообщенийПоЭлектроннымДокументамGov(ОрганизацияПолучатель, ВсеНастройкиПодписейШифрования, ЕстьСледующаяПорцияСообщений, ЖурналОперации = "") Экспорт
	Перем лМассивПолученныхКвитанцийGov;
	Перем лМассивПолученныхДокументовGov;
	
	лТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ВсеНастройкиПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ВсеНастройкиПодписейШифрования, Тип("ТаблицаЗначений")), ВсеНастройкиПодписейШифрования);
	лПараметрыПодписиДокумента = Новый Структура;
	//лПараметрыПодписиДокумента.Вставить("Организация", ОрганизацияПолучатель);
	лПараметрыПодписиДокумента.Вставить("Edrpou",   ОрганизацияПолучатель.Код);
	//лПараметрыПодписиДокумента.Вставить("Dept",     ОрганизацияПолучатель.Филиал);
	СтрокаПодключенияEDI = Неопределено;
	СерверEDI = Неопределено;
	ПортEDI = Неопределено;
	Если ДобавитьПараметрыСекретногоКлючаПолучениеВхСообщений(лПараметрыПодписиДокумента, ОрганизацияПолучатель, лТаблицаНастроекПодписейШифрования, СтрокаПодключенияEDI, СерверEDI, ПортEDI, ЖурналОперации) Тогда
		лПараметрыПодписиДокумента.Вставить("Email", ОрганизацияПолучатель.АдресЭлектроннойПочты);
		лПараметрыПодписиДокумента.Вставить("ParseKvt",    Истина);
		
		лРезультатПолученияПорцииСообщений = ПолучитьПорциюСообщенийСПомощьюEDIПровайдераGov(лПараметрыПодписиДокумента, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
		Если лРезультатПолученияПорцииСообщений <> Неопределено Тогда
			Если Не лРезультатПолученияПорцииСообщений.Свойство("ЕстьСледующаяПорцияСообщений", ЕстьСледующаяПорцияСообщений) Тогда
				ЕстьСледующаяПорцияСообщений = Ложь;
			КонецЕсли;
			лРезультатПолученияПорцииСообщений.Свойство("МассивПолученныхКвитанций", лМассивПолученныхКвитанцийGov);
			лРезультатПолученияПорцииСообщений.Свойство("МассивПолученныхДокументов", лМассивПолученныхДокументовGov);
		КонецЕсли;
		
		Если (лМассивПолученныхКвитанцийGov = Неопределено) и (лМассивПолученныхДокументовGov = Неопределено) Тогда
			ЕстьСледующаяПорцияСообщений = Ложь;
		КонецЕсли;
	Иначе
		ЕстьСледующаяПорцияСообщений = Ложь;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("МассивПолученныхКвитанций,МассивПолученныхДокументов", лМассивПолученныхКвитанцийGov, лМассивПолученныхДокументовGov);
КонецФункции

Функция ЭтоВитягЄРПН(ИнформацияДФС, ИмяФайлаЗапитуЄРПН)
	Если ИнформацияДФС = Неопределено Тогда
		Возврат Ложь;
	Иначе
		КодДокумента = ИнформацияДФС.Получить("C_DOC");
		Если ВРег(КодДокумента) = "J14" Тогда
			КодДокумента = "J13";
		ИначеЕсли ВРег(КодДокумента) = "F14" Тогда
			КодДокумента = "F13";
		Иначе
			Возврат Ложь;
		КонецЕсли;
		ИмяФайлаЗапитуЄРПН = "";
		//ДобавитьЗначениеРеквизитаКИмениФайлаЭлементСтруктуры(ИмяФайлаЗапитуЄРПН, ИнформацияДФС, "C_REG", 2);
		//ДобавитьЗначениеРеквизитаКИмениФайлаЭлементСтруктуры(ИмяФайлаЗапитуЄРПН, ИнформацияДФС, "C_RAJ", 2);
		ДобавитьЗначениеРеквизитаКИмениФайлаЭлементСтруктуры(ИмяФайлаЗапитуЄРПН, ИнформацияДФС, "DPACD", 4);
		//ДобавитьЗначениеРеквизитаКИмениФайлаЭлементСтруктуры(ИмяФайлаЗапитуЄРПН, ИнформацияДФС, "TIN", 10);
		ДобавитьЗначениеРеквизитаКИмениФайлаЭлементСтруктуры(ИмяФайлаЗапитуЄРПН, ИнформацияДФС, "EDRPOU", 10);
		ДобавитьЗначениеРеквизитаКИмениФайла(ИмяФайлаЗапитуЄРПН, КодДокумента, 3);
		ДобавитьЗначениеРеквизитаКИмениФайлаЭлементСтруктуры(ИмяФайлаЗапитуЄРПН, ИнформацияДФС, "C_DOC_SUB", 3);
		ДобавитьЗначениеРеквизитаКИмениФайлаЭлементСтруктуры(ИмяФайлаЗапитуЄРПН, ИнформацияДФС, "C_DOC_VER", 2);
		ДобавитьЗначениеРеквизитаКИмениФайлаЭлементСтруктуры(ИмяФайлаЗапитуЄРПН, ИнформацияДФС, "C_DOC_STAN", 1);
		ДобавитьЗначениеРеквизитаКИмениФайлаЭлементСтруктуры(ИмяФайлаЗапитуЄРПН, ИнформацияДФС, "C_DOC_TYPE", 2);
		ДобавитьЗначениеРеквизитаКИмениФайлаЭлементСтруктуры(ИмяФайлаЗапитуЄРПН, ИнформацияДФС, "C_DOC_CNT", 7);
		//ДобавитьЗначениеРеквизитаКИмениФайлаЭлементСтруктуры(ИмяФайлаЗапитуЄРПН, ИнформацияДФС, "PERIOD_TYPE", 1);
		ДобавитьЗначениеРеквизитаКИмениФайлаЭлементСтруктуры(ИмяФайлаЗапитуЄРПН, ИнформацияДФС, "C_DOC_PER_TYPE", 1);
		ДобавитьЗначениеРеквизитаКИмениФайлаЭлементСтруктуры(ИмяФайлаЗапитуЄРПН, ИнформацияДФС, "PERIOD_MONTH", 2);
		ДобавитьЗначениеРеквизитаКИмениФайлаЭлементСтруктуры(ИмяФайлаЗапитуЄРПН, ИнформацияДФС, "PERIOD_YEAR", 4);
		//ДобавитьЗначениеРеквизитаКИмениФайлаЭлементСтруктуры(ИмяФайлаЗапитуЄРПН, ИнформацияДФС, "C_STI_ORIG", 4);
		ДобавитьЗначениеРеквизитаКИмениФайлаЭлементСтруктуры(ИмяФайлаЗапитуЄРПН, ИнформацияДФС, "ORIGDPACD", 4);
		ИмяФайлаЗапитуЄРПН = ИмяФайлаЗапитуЄРПН + ".XML";
		Возврат Истина;
	КонецЕсли;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ОбработатьПорциюСообщенийПоЭлектроннымДокументамGov(ИмяМассива, МассивОбрабатываемыхСообщений, ОрганизацияПолучатель, ВсеНастройкиПодписейШифрования, ТребуетсяОбновлениеФормыВызвавшейОбработкуСообщений, ЖурналОперации = "") Экспорт
	лНетОшибокВПроцессеОбработкиСообщений = Истина;
	
	лТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ВсеНастройкиПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ВсеНастройкиПодписейШифрования, Тип("ТаблицаЗначений")), ВсеНастройкиПодписейШифрования);
	лНастройкиПодписиШифрования = лТаблицаНастроекПодписейШифрования.Найти(ОрганизацияПолучатель, "ОрганизацияEDI");
	Если лНастройкиПодписиШифрования = Неопределено Тогда
		лНетОшибокВПроцессеОбработкиСообщений = Ложь;
		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не найдены настройки подписи шифрования Организации: '; uk = 'Не знайдені підписи шифрування по Організації: '") + ОрганизацияПолучатель + ".");
	Иначе
		Для Каждого лОбрабатываемоеСообщение Из МассивОбрабатываемыхСообщений Цикл
			ИнформацияДФС = Неопределено;
			ИмяФайлаЗапитуЄРПН = Неопределено;
			
			ИнформацияДФС = лОбрабатываемоеСообщение.Получить("FormInfo");
			Если ЭтоВитягЄРПН(ИнформацияДФС, ИмяФайлаЗапитуЄРПН) Тогда
				Если ОбработатьВходящийВитягЄРПН(ИмяМассива, ИмяФайлаЗапитуЄРПН, лОбрабатываемоеСообщение, ОрганизацияПолучатель, ЖурналОперации) Тогда
					УдалитьВходящееСообщениеССервераДФС(лОбрабатываемоеСообщение, лНастройкиПодписиШифрования, ЖурналОперации);
					ТребуетсяОбновлениеФормыВызвавшейОбработкуСообщений = Истина;
				Иначе
		//			УдалитьВходящееСообщениеССервераДФС(лОбрабатываемоеСообщение, лНастройкиПодписиШифрования, ЖурналОперации);
				КонецЕсли;
			ИначеЕсли ИмяМассива = "kvt" Тогда
				Если ОбработатьКвитанциюДФСПоЭлектронномуДокументу(лОбрабатываемоеСообщение, ОрганизацияПолучатель, ЖурналОперации) Тогда
					УдалитьВходящееСообщениеССервераДФС(лОбрабатываемоеСообщение, лНастройкиПодписиШифрования, ЖурналОперации);
					ТребуетсяОбновлениеФормыВызвавшейОбработкуСообщений = Истина;
				КонецЕсли;
			ИначеЕсли ИмяМассива = "doc" Тогда
				Если ОбработатьВходящийЭлектронныйДокументGov(лОбрабатываемоеСообщение, ОрганизацияПолучатель, ЖурналОперации) Тогда
					УдалитьВходящееСообщениеССервераДФС(лОбрабатываемоеСообщение, лНастройкиПодписиШифрования, ЖурналОперации);
					ТребуетсяОбновлениеФормыВызвавшейОбработкуСообщений = Истина;
				КонецЕсли;
			Иначе
	//			УдалитьВходящееСообщениеССервераДФС(лОбрабатываемоеСообщение, лНастройкиПодписиШифрования, ЖурналОперации);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат лНетОшибокВПроцессеОбработкиСообщений;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьПорциюСообщенийПоЭлектроннымДокументамGovRk(ОрганизацияПолучатель, ВсеНастройкиПодписейШифрования, ЕстьСледующаяПорцияСообщений, ЖурналОперации = "") Экспорт
	Перем лМассивПолученныхСообщений;
	
	лТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ВсеНастройкиПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ВсеНастройкиПодписейШифрования, Тип("ТаблицаЗначений")), ВсеНастройкиПодписейШифрования);
	лПараметрыПодписиДокумента = Новый Структура;
	//лПараметрыПодписиДокумента.Вставить("Организация", ОрганизацияПолучатель);
	лПараметрыПодписиДокумента.Вставить("Edrpou",   ОрганизацияПолучатель.Код);
	лПараметрыПодписиДокумента.Вставить("Dept",     ОрганизацияПолучатель.Филиал);
	СтрокаПодключенияEDI = Неопределено;
	СерверEDI = Неопределено;
	ПортEDI = Неопределено;
	Если ДобавитьПараметрыСекретногоКлючаПолучениеВхСообщений(лПараметрыПодписиДокумента, ОрганизацияПолучатель, лТаблицаНастроекПодписейШифрования, СтрокаПодключенияEDI, СерверEDI, ПортEDI, ЖурналОперации) Тогда
		лПараметрыПодписиДокумента.Вставить("ParseKvt",    Истина);
		
		лРезультатПолученияПорцииСообщений = ПолучитьПорциюСообщенийСПомощьюEDIПровайдераGovRk(лПараметрыПодписиДокумента, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
		Если лРезультатПолученияПорцииСообщений <> Неопределено Тогда
			Если Не лРезультатПолученияПорцииСообщений.Свойство("ЕстьСледующаяПорцияСообщений", ЕстьСледующаяПорцияСообщений) Тогда
				ЕстьСледующаяПорцияСообщений = Ложь;
			КонецЕсли;
			лРезультатПолученияПорцииСообщений.Свойство("МассивПолученныхСообщений", лМассивПолученныхСообщений);
		КонецЕсли;
	Иначе
		ЕстьСледующаяПорцияСообщений = Ложь;
		Возврат Неопределено
	КонецЕсли;
	
	Возврат лМассивПолученныхСообщений;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ОбработатьПорциюСообщенийПоЭлектроннымДокументамGovRk(МассивОбрабатываемыхСообщений, ОрганизацияПолучатель, ВсеНастройкиПодписейШифрования, ТребуетсяОбновлениеФормыВызвавшейОбработкуСообщений, ЖурналОперации = "") Экспорт
	лНетОшибокВПроцессеОбработкиСообщений = Истина;
	
	лТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ВсеНастройкиПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ВсеНастройкиПодписейШифрования, Тип("ТаблицаЗначений")), ВсеНастройкиПодписейШифрования);
	лНастройкиПодписиШифрования = лТаблицаНастроекПодписейШифрования.Найти(ОрганизацияПолучатель, "ОрганизацияEDI");
	Если лНастройкиПодписиШифрования = Неопределено Тогда
		лНетОшибокВПроцессеОбработкиСообщений = Ложь;
		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не найдены настройки подписи шифрования Организации: '; uk = 'Не знайдені підписи шифрування по Організації: '") + ОрганизацияПолучатель + ".");
	Иначе
		Для Каждого лОбрабатываемоеСообщение Из МассивОбрабатываемыхСообщений Цикл
			Если лОбрабатываемоеСообщение.Получить("DocType") = 0 Тогда
				аоОперация = "";
				аоЭлектронныйДокумент = Неопределено;
				аоДополнительно = "";
				Если ОбработатьВходящийЭлектронныйДокументGovRk(лОбрабатываемоеСообщение, ОрганизацияПолучатель, ЖурналОперации, аоОперация, аоЭлектронныйДокумент, аоДополнительно) Тогда
					Если ЗначениеЗаполнено(аоОперация) Тогда
						ВыполнитьАвтоматическиеОперацииПослеПриемаДокумента(ОрганизацияПолучатель, лТаблицаНастроекПодписейШифрования, аоОперация, аоЭлектронныйДокумент, аоДополнительно);
					КонецЕсли;
					УдалитьВходящийЭлектронныйДокументССервераДФС_GovRk(лОбрабатываемоеСообщение, лНастройкиПодписиШифрования, ЖурналОперации);
					ТребуетсяОбновлениеФормыВызвавшейОбработкуСообщений = Истина;
				Иначе
					//УдалитьВходящийЭлектронныйДокументССервераДФС_GovRk(лОбрабатываемоеСообщение, лНастройкиПодписиШифрования, ЖурналОперации);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для Каждого лОбрабатываемоеСообщение Из МассивОбрабатываемыхСообщений Цикл
			Если лОбрабатываемоеСообщение.Получить("DocType") = 1 Тогда
				Если ОбработатьКвитанциюДФСРКПоЭлектронномуДокументу(лОбрабатываемоеСообщение, ОрганизацияПолучатель, ЖурналОперации) Тогда
					УдалитьВходящийЭлектронныйДокументССервераДФС_GovRk(лОбрабатываемоеСообщение, лНастройкиПодписиШифрования, ЖурналОперации);
					ТребуетсяОбновлениеФормыВызвавшейОбработкуСообщений = Истина;
				Иначе
					//УдалитьВходящийЭлектронныйДокументССервераДФС_GovRk(лОбрабатываемоеСообщение, лНастройкиПодписиШифрования, ЖурналОперации);
				КонецЕсли;
			//Иначе
			//	лНетОшибокВПроцессеОбработкиСообщений = Ложь;
			//	ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "Получено сообщение непредусмотренного типа (код типа: " + лОбрабатываемоеСообщение.DocType + ", имя файла сообщения: " + лОбрабатываемоеСообщение.FileName + ")");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат лНетОшибокВПроцессеОбработкиСообщений;
КонецФункции

Функция СтрСодержитТолькоЦифры(Строка)
	Для н = 1 по СтрДлина(Строка) Цикл
		Если Найти("0123456789", Сред(Строка, н, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

Функция ПолучитьДатуФорматаДДММГГГГ(ДатаТекст, Дата) Экспорт
	Перем Год, Месяц, День;
	Если ПолучитьГодМесяцДеньИзДатыФорматаДДММГГГГ(ДатаТекст, Год, Месяц, День) Тогда
		Дата = Дата(Год, Месяц, День);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ПолучитьВремяФорматаЧЧММСС(ВремяТекст, дЧас, дМинута, дСекунда) Экспорт
	дЧас = 0;
	дМинута = 0;
	дСекунда = 0;
	Если СтрДлина(ВремяТекст) = 8 Тогда
		дЧасТекст = Сред(ВремяТекст, 1, 2);
		дМинутаТекст = Сред(ВремяТекст, 4, 2);
		дСекундаТекст = Сред(ВремяТекст, 7, 2);
		Если СтрСодержитТолькоЦифры(дЧасТекст)
			и СтрСодержитТолькоЦифры(дМинутаТекст)
			и СтрСодержитТолькоЦифры(дСекундаТекст)
			и Сред(ВремяТекст, 3, 1) = ":"
			и Сред(ВремяТекст, 6, 1) = ":"
		Тогда
			дЧас = Число(дЧасТекст);
			дМинута = Число(дМинутаТекст);
			дСекунда = Число(дСекундаТекст);
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ПолучитьГодМесяцДеньИзДатыФорматаДДММГГГГ(ДатаТекст, Год, Месяц, День) Экспорт
	Если СтрСодержитТолькоЦифры(ДатаТекст) и СтрДлина(ДатаТекст) = 8 Тогда
		Год = Число(Сред(ДатаТекст, 5, 4));
		Месяц = Число(Сред(ДатаТекст, 3, 2));
		День = Число(Сред(ДатаТекст, 1, 2));
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ПолучитьДатуФорматаДДММГГГГсРазделителем(ДатаТекст, Дата) Экспорт
	Перем Год, Месяц, День;
	Если ПолучитьГодМесяцДеньИзДатыФорматаДДММГГГГсРазделителем(ДатаТекст, Год, Месяц, День) Тогда
		Дата = Дата(Год, Месяц, День);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ПолучитьГодМесяцДеньИзДатыФорматаДДММГГГГсРазделителем(ДатаТекст, Год, Месяц, День)
	СтрДень = Сред(ДатаТекст, 1, 2);
	р1 = Сред(ДатаТекст, 3, 1);
	СтрМесяц = Сред(ДатаТекст, 4, 2);
	р2 = Сред(ДатаТекст, 6, 1);
	СтрГод = Сред(ДатаТекст, 7, 4);
	
	Если СтрСодержитТолькоЦифры(СтрДень)
		и не СтрСодержитТолькоЦифры(р1)
		и СтрСодержитТолькоЦифры(СтрМесяц)
		и не СтрСодержитТолькоЦифры(р2)
		и СтрСодержитТолькоЦифры(СтрГод) Тогда
		
		Месяц = Число(СтрМесяц);
		День = Число(СтрДень);
		Если СтрДлина(СтрГод) = 2 Тогда
			Год = Число("20"+СтрГод);
			Возврат Истина;
		ИначеЕсли СтрДлина(СтрГод) = 4 Тогда
			Год = Число(СтрГод);
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ПолучитьПодстрокуДоРазделителя(Строка, Подстрока, Разделитель)
	п = Найти(Строка, Разделитель);
	Если п > 0 Тогда
		Подстрока = Лев(Строка, п-1);
		Строка = Сред(Строка, п + СтрДлина(Разделитель));
		Возврат Истина;
	Иначе
		Если Строка = "" Тогда
			Возврат Ложь;
		Иначе
			Подстрока = Строка;
			Строка = "";
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПолучитьДатуИзСтрокиКвитанцияГовРК(Знач ДатаТекст, ДатаЗначение) //Дата в формате 13.06.2018 в 9:57
	ДатаТекст = НРег(СокрЛП(ДатаТекст));
	ДеньСтр = "";
	Если ПолучитьПодстрокуДоРазделителя(ДатаТекст, ДеньСтр, ".") Тогда
		Если СтрСодержитТолькоЦифры(ДеньСтр) Тогда
			День = Число(ДеньСтр);
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
		МесяцСтр = "";
		Если ПолучитьПодстрокуДоРазделителя(ДатаТекст, МесяцСтр, ".") Тогда
			Если СтрСодержитТолькоЦифры(МесяцСтр) Тогда
				Месяц = Число(МесяцСтр);
			Иначе
				Возврат Ложь;
			КонецЕсли;
			
			ГодСтр = "";
			Если ПолучитьПодстрокуДоРазделителя(ДатаТекст, ГодСтр, " в ") Тогда
				Если СтрСодержитТолькоЦифры(ГодСтр) Тогда
					Если СтрДлина(ГодСтр) = 2 Тогда
						Год = Число("20"+ГодСтр);
					ИначеЕсли СтрДлина(ГодСтр) = 4 Тогда
						Год = Число(ГодСтр);
					Иначе
						Возврат Ложь;
					КонецЕсли;
				Иначе
					Возврат Ложь;
				КонецЕсли;
				
				ЧасСтр = "";
				Если ПолучитьПодстрокуДоРазделителя(ДатаТекст, ЧасСтр, ":") Тогда
					Если СтрСодержитТолькоЦифры(ЧасСтр) Тогда
						Час = Число(ЧасСтр);
					Иначе
						Возврат Ложь;
					КонецЕсли;
					
					МинутаСтр = "";
					Если ПолучитьПодстрокуДоРазделителя(ДатаТекст, МинутаСтр, ":") Тогда
						Если СтрСодержитТолькоЦифры(МинутаСтр) Тогда
							Минута = Число(МинутаСтр);
						Иначе
							Возврат Ложь;
						КонецЕсли;
						
						СекундаСтр = "";
						Если ПолучитьПодстрокуДоРазделителя(ДатаТекст, СекундаСтр, ";") Тогда
							Если СтрСодержитТолькоЦифры(СекундаСтр) Тогда
								Секунда = Число(СекундаСтр);
							Иначе
								Секунда = 0;
							КонецЕсли;
						Иначе
							Секунда = 0;
						КонецЕсли;
						
						Попытка
							ДатаЗначение = Дата(Год, Месяц, День, Час, Минута, Секунда);
							Возврат Истина;
						Исключение
							Возврат Ложь;
						КонецПопытки;
					Иначе
						Возврат Ложь;
					КонецЕсли;
				Иначе
					Возврат Ложь;
				КонецЕсли;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ИмяНалоговогоДокумента(КодДокумента, Дата, Номер, Номер1, Номер2, ТипДокументаРП)
	ИмяДокумента = "";
	Если ВРег(Лев(КодДокумента, 6)) = "J12010" Тогда
		//ИмяДокумента = КодДокумента + " Податкова накладна";
		ИмяДокумента = "Податкова накладна";
		ТипДокументаРП = "податкової накладної";
	ИначеЕсли ВРег(Лев(КодДокумента, 6)) = "F12010" Тогда
		//ИмяДокумента = КодДокумента + " Податкова накладна";
		ИмяДокумента = "Податкова накладна";
		ТипДокументаРП = "податкової накладної";
	ИначеЕсли ВРег(Лев(КодДокумента, 6)) = "J12012" Тогда
		//ИмяДокумента = КодДокумента + " Додаток №2 до податкової накладної";
		ИмяДокумента = "Додаток №2 до податкової накладної";
		ТипДокументаРП = "додатку №2 до податкової накладної";
	ИначеЕсли ВРег(Лев(КодДокумента, 6)) = "F12012" Тогда
		//ИмяДокумента = КодДокумента + " Додаток №2 до податкової накладної";
		ИмяДокумента = "Додаток №2 до податкової накладної";
		ТипДокументаРП = "додатку №2 до податкової накладної";
	Иначе
		ИмяДокумента = "[" + КодДокумента + "]";
		ТипДокументаРП = "документа";
	КонецЕсли;
	
	ИмяДокумента = ИмяДокумента + " №" + Номер + ?(Номер1="", "", "/" + Номер1) + ?(Номер2="", "", "/" + Номер2);
	ИмяДокумента = ИмяДокумента + " від " +  Формат(Дата, "ДФ=dd.MM.yyyy");
	Возврат ИмяДокумента;
КонецФункции

Функция РазобратьТекстКвитанции(ТелоКвитанции, ТекстКвитанции, ДатаВремяКвитанции, ВидКвитанции, ТипКвитанции, РегНомер = "", ОшибкиДокумента = "")
	ТекстКвитанции = "";
	//ТипКвитанции = Перечисления.скEDI_ТипыКвитанций.ПустаяСсылка();
	ДатаВремяКвитанции = '00010101000000';
	РегНомер = "";
	ОшибкиДокумента = "";
	Результат = Ложь;
	
	Если СтрДлина(ТелоКвитанции) > 500 Тогда
		Если СтрЧислоСтрок(ТелоКвитанции) = 1 Тогда
			ТелоКвитанции = СтрЗаменить(ТелоКвитанции, "\n", Символы.ПС);
			ТелоКвитанции = СтрЗаменить(ТелоКвитанции, "\t", Символы.Таб);
			ТелоКвитанции = СтрЗаменить(ТелоКвитанции, "\""", """");
			ТелоКвитанции = СтрЗаменить(ТелоКвитанции, "\\", "\");
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТелоКвитанции);
		ЧтениеXML.Прочитать();
		мДОМ = Новый ПостроительDOM;
		мДокументДОМ 	  = мДОМ.Прочитать(ЧтениеXML);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Для Каждого ДочернийУзел1 Из мДокументДОМ.ДочерниеУзлы Цикл
		Если ВРег(ДочернийУзел1.ИмяУзла) = ВРег("Ticket") Тогда
			Для Каждого ДочернийУзел2 Из ДочернийУзел1.ДочерниеУзлы Цикл
				Если ВРег(ДочернийУзел2.ИмяУзла) = ВРег("Text") Тогда
					//ТипКвитанции = Перечисления.скEDI_ТипыКвитанций.СообщениеОДоставке;
					ТекстКвитанции = ДочернийУзел2.ТекстовоеСодержимое;
					
					П = Найти(ТекстКвитанции, "успішно одержаний ");
					Если П > 0 Тогда
						ДатаВремяКвитанцииТекст = Сред(ТекстКвитанции, П+18);
						Если СтрДлина(ДатаВремяКвитанцииТекст) = 16 Тогда
							ДатаВремяКвитанцииТекст = ДатаВремяКвитанцииТекст + ":00";
						КонецЕсли;
						ДатаВремяКвитанции = скEDI_СозданиеДокументовСервер.мПривестиКДате(ДатаВремяКвитанцииТекст, Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
					КонецЕсли;
					ВидКвитанции = Перечисления.скEDI_ВидыКвитанций.ДФСрк;
					ТипКвитанции = Перечисления.скEDI_ТипыКвитанций.СообщениеОДоставке;
					Результат = Истина;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ВРег(ДочернийУзел1.ИмяУзла) = ВРег("Answer") Тогда
			ТипКвитанции = Перечисления.скEDI_ТипыКвитанций.Отклонение;
			Для Каждого АтрибутУзла Из ДочернийУзел1.Атрибуты Цикл
				Если ВРег(АтрибутУзла.Имя) = ВРег("Imported") Тогда
					Если ВРег(АтрибутУзла.Значение) = ВРег("true") Тогда
						ТипКвитанции = Перечисления.скEDI_ТипыКвитанций.Подтверждение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Для Каждого ДочернийУзел2 Из ДочернийУзел1.ДочерниеУзлы Цикл
				Если ВРег(ДочернийУзел2.ИмяУзла) = ВРег("Text") Тогда
					ТекстКвитанции = ДочернийУзел2.ТекстовоеСодержимое;
					
					П = Найти(ТекстКвитанции, "Дата та час обробки документа: ");
					Если П > 0 Тогда
						ДатаВремяКвитанцииТекст = Сред(ТекстКвитанции, П+31);
						П = Найти(ДатаВремяКвитанцииТекст, Символы.ПС);
						Если П > 0 Тогда
							ДатаВремяКвитанцииТекст = Лев(ДатаВремяКвитанцииТекст, П-1);
						КонецЕсли;
						Если не ПолучитьДатуИзСтрокиКвитанцияГовРК(ДатаВремяКвитанцииТекст, ДатаВремяКвитанции) Тогда
							ДатаВремяКвитанции = ТекущаяДата();
						КонецЕсли;
					Иначе
						ДатаВремяКвитанции = ТекущаяДата();
					КонецЕсли;
					ВидКвитанции = Перечисления.скEDI_ВидыКвитанций.ДФСрк;
					Результат = Истина;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ВРег(ДочернийУзел1.ИмяУзла) = ВРег("DECLAR") Тогда
			Для Каждого ДочернийУзел2 Из ДочернийУзел1.ДочерниеУзлы Цикл
				Если ВРег(ДочернийУзел2.ИмяУзла) = ВРег("DECLARBODY") Тогда
					тДата = "";
					тВремя = "";
					тРегНомер = "";
					тКодДокумента = "";
					тИмяДокумента = "";
					тДатаДокумента = "";
					тНомерДокумента = "";
					тНомерДокумента1 = "";
					тНомерДокумента2 = "";
					тННДатаДокумента = "";
					тНННомерДокумента = "";
					тНННомерДокумента1 = "";
					тНННомерДокумента2 = "";
					тКодПродавца = "";
					тИмяПродавца = "";
					тКодПокупателя = "";
					тИмяПокупателя = "";
					тОтправитель = "";
					тРезультат = "";
					тОшибки = "";
					тТекст = "";
					Для Каждого ДочернийУзел3 Из ДочернийУзел2.ДочерниеУзлы Цикл
						Если ВРег(ДочернийУзел3.ИмяУзла) = ВРег("HDATE") Тогда
							тДата = ДочернийУзел3.ТекстовоеСодержимое;
						ИначеЕсли ВРег(ДочернийУзел3.ИмяУзла) = ВРег("HTIME") Тогда
							тВремя = ДочернийУзел3.ТекстовоеСодержимое;
						ИначеЕсли ВРег(ДочернийУзел3.ИмяУзла) = ВРег("HNUMREG") Тогда
							тРегНомер = ДочернийУзел3.ТекстовоеСодержимое;
						ИначеЕсли ВРег(ДочернийУзел3.ИмяУзла) = ВРег("HDOCKOD") Тогда
							тКодДокумента = ДочернийУзел3.ТекстовоеСодержимое;
						ИначеЕсли ВРег(ДочернийУзел3.ИмяУзла) = ВРег("HDOCNAME") Тогда
							тИмяДокумента = ДочернийУзел3.ТекстовоеСодержимое;
						ИначеЕсли ВРег(ДочернийУзел3.ИмяУзла) = ВРег("HFILL") Тогда
							тДатаДокумента = ДочернийУзел3.ТекстовоеСодержимое;
						ИначеЕсли ВРег(ДочернийУзел3.ИмяУзла) = ВРег("HNUM") Тогда
							тНомерДокумента = ДочернийУзел3.ТекстовоеСодержимое;
						ИначеЕсли ВРег(ДочернийУзел3.ИмяУзла) = ВРег("HNUM1") Тогда
							тНомерДокумента1 = ДочернийУзел3.ТекстовоеСодержимое;
						ИначеЕсли ВРег(ДочернийУзел3.ИмяУзла) = ВРег("HNUM2") Тогда
							тНомерДокумента2 = ДочернийУзел3.ТекстовоеСодержимое;
						ИначеЕсли ВРег(ДочернийУзел3.ИмяУзла) = ВРег("HPODFILL") Тогда
							тННДатаДокумента = ДочернийУзел3.ТекстовоеСодержимое;
						ИначеЕсли ВРег(ДочернийУзел3.ИмяУзла) = ВРег("HPODNUM") Тогда
							тНННомерДокумента = ДочернийУзел3.ТекстовоеСодержимое;
						ИначеЕсли ВРег(ДочернийУзел3.ИмяУзла) = ВРег("HPODNUM1") Тогда
							тНННомерДокумента1 = ДочернийУзел3.ТекстовоеСодержимое;
						ИначеЕсли ВРег(ДочернийУзел3.ИмяУзла) = ВРег("HPODNUM2") Тогда
							тНННомерДокумента2 = ДочернийУзел3.ТекстовоеСодержимое;
						ИначеЕсли ВРег(ДочернийУзел3.ИмяУзла) = ВРег("HTINSEL") Тогда
							тКодПродавца = ДочернийУзел3.ТекстовоеСодержимое;
						ИначеЕсли ВРег(ДочернийУзел3.ИмяУзла) = ВРег("HNAMESEL") Тогда
							тИмяПродавца = ДочернийУзел3.ТекстовоеСодержимое;
						ИначеЕсли ВРег(ДочернийУзел3.ИмяУзла) = ВРег("HTINBUY") Тогда
							тКодПокупателя = ДочернийУзел3.ТекстовоеСодержимое;
						ИначеЕсли ВРег(ДочернийУзел3.ИмяУзла) = ВРег("HNAMEBUY") Тогда
							тИмяПокупателя = ДочернийУзел3.ТекстовоеСодержимое;
						ИначеЕсли ВРег(ДочернийУзел3.ИмяУзла) = ВРег("HSENDER") Тогда
							тОтправитель = ДочернийУзел3.ТекстовоеСодержимое;
						ИначеЕсли ВРег(ДочернийУзел3.ИмяУзла) = ВРег("HRESULT") Тогда
							тРезультат = ДочернийУзел3.ТекстовоеСодержимое;
						ИначеЕсли ВРег(ДочернийУзел3.ИмяУзла) = ВРег("T1RXXXXG1S") Тогда
							тОшибки = тОшибки + ?(тОшибки="", "", Символы.ПС) + ДочернийУзел3.ТекстовоеСодержимое;
						ИначеЕсли ВРег(ДочернийУзел3.ИмяУзла) = ВРег("TEXT") Тогда
							тТекст = ДочернийУзел3.ТекстовоеСодержимое;
						КонецЕсли;
					КонецЦикла;
					/////////////////////////////////////
					дГод = 0;
					дМесяц = 0;
					дДень = 0;
					Если ПолучитьГодМесяцДеньИзДатыФорматаДДММГГГГ(тДата, дГод, дМесяц, дДень) Тогда
						дЧас = 0;
						дМинута = 0;
						дСекунда = 0;
						Если СтрДлина(тВремя) = 8 Тогда
							дЧасТекст = Сред(тВремя, 1, 2);
							дМинутаТекст = Сред(тВремя, 4, 2);
							дСекундаТекст = Сред(тВремя, 7, 2);
							Если СтрСодержитТолькоЦифры(дЧасТекст)
								и СтрСодержитТолькоЦифры(дМинутаТекст)
								и СтрСодержитТолькоЦифры(дСекундаТекст)
								и Сред(тВремя, 3, 1) = ":"
								и Сред(тВремя, 6, 1) = ":"
							Тогда
								дЧас = Число(дЧасТекст);
								дМинута = Число(дМинутаТекст);
								дСекунда = Число(дСекундаТекст);
							КонецЕсли;
						Иначе
							Прервать;
						КонецЕсли;
						ДатаВремяКвитанции = Дата(дГод, дМесяц, дДень, дЧас, дМинута, дСекунда);
					Иначе
						Прервать;
					КонецЕсли;
					
					дГод = 0;
					дМесяц = 0;
					дДень = 0;
					Если ПолучитьГодМесяцДеньИзДатыФорматаДДММГГГГ(тДатаДокумента, дГод, дМесяц, дДень) Тогда
						ДатаДокумента = Дата(дГод, дМесяц, дДень);
					Иначе
						//Прервать;
						ДатаДокумента = Неопределено;
					КонецЕсли;
					
					ТипДокументаРП = "";
					РегНомер = тРегНомер;
					ОшибкиДокумента = тОшибки;
					
					ТекстКвитанции = "Повідомлення про результат обробки документа.";
					ТекстКвитанции = ТекстКвитанции + Символы.ПС;
					ТекстКвитанции = ТекстКвитанции + Символы.ПС + "Підприємство - Продавець: " + "[" + тКодПродавца + "] " + тИмяПродавца;
					ТекстКвитанции = ТекстКвитанции + Символы.ПС + "Підприємство - Покупець: " + "[" + тКодПокупателя + "] " + тИмяПокупателя;
					ТекстКвитанции = ТекстКвитанции + Символы.ПС + "Документ: " + ИмяНалоговогоДокумента(тКодДокумента, ДатаДокумента, тНомерДокумента, тНомерДокумента1, тНомерДокумента2, ТипДокументаРП);
					ТекстКвитанции = ТекстКвитанции + Символы.ПС + "Дата виписування " + ТипДокументаРП + ": " + Формат(ДатаДокумента, "ДФ=dd.MM.yyyy");
					ТекстКвитанции = ТекстКвитанции + Символы.ПС + "Номер " + ТипДокументаРП + ": " + тНомерДокумента;
					Если тННДатаДокумента <> "" Тогда
						дГод = 0;
						дМесяц = 0;
						дДень = 0;
						Если ПолучитьГодМесяцДеньИзДатыФорматаДДММГГГГ(тННДатаДокумента, дГод, дМесяц, дДень) Тогда
							ТекстКвитанции = ТекстКвитанции + Символы.ПС + "Дата виписування коригованої податкової накладної: " + Формат(Дата(дГод, дМесяц, дДень), "ДФ=dd.MM.yyyy");
						КонецЕсли;
					КонецЕсли;
					Если тНННомерДокумента <> "" Тогда
						ТекстКвитанции = ТекстКвитанции + Символы.ПС + "Номер коригованої податкової накладної: " + тНННомерДокумента;
					КонецЕсли;
					Если тРегНомер <> "" Тогда
						ТекстКвитанции = ТекстКвитанции + Символы.ПС + "Реєстраційний номер документу: " + тРегНомер;
					КонецЕсли;
					ТекстКвитанции = ТекстКвитанции + Символы.ПС;
					ТекстКвитанции = ТекстКвитанции + Символы.ПС + "Документ доставлено до центрального рівня Державної податкової служби України " + Формат(ДатаВремяКвитанции, "ДФ=dd.MM.yyyy") + " в " + Формат(ДатаВремяКвитанции, "ДФ=HH:mm:ss");
					ТекстКвитанции = ТекстКвитанции + Символы.ПС;
					ТекстКвитанции = ТекстКвитанции + Символы.ПС + тРезультат;
					ТекстКвитанции = ТекстКвитанции + Символы.ПС + тОшибки;
					ТекстКвитанции = ТекстКвитанции + Символы.ПС;
					ТекстКвитанции = ТекстКвитанции + Символы.ПС + тОтправитель;
					Если тТекст <> "" Тогда
						ТекстКвитанции = ТекстКвитанции + Символы.ПС;
						ТекстКвитанции = ТекстКвитанции + Символы.ПС + тТекст;
					КонецЕсли;
					
					ВидКвитанции = Перечисления.скEDI_ВидыКвитанций.ДФС;
					Если Найти(ВРег(тРезультат), "ДОКУМЕНТ ПРИЙНЯТО. РЕЄСТРАЦІЯ ЗУПИНЕНА.") > 0 Тогда
						ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.РегистрацияОстановлена;
					ИначеЕсли Найти(ВРег(тРезультат), "ДОКУМЕНТ ПРИЙНЯТО") > 0 Тогда
						ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.Успешно;
					Иначе
						ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.Ошибка;
					КонецЕсли;
					Результат = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Процедура ДополнитьТаблицуЭлектронныхДокументовСоответствующихДанномуДокументу(ТаблицаПриемник, ТаблицаИсточник)
	Если ТаблицаПриемник = Неопределено Тогда
		ТаблицаПриемник = ТаблицаИсточник;
	Иначе
		Для Каждого СтрокаТаблицыИсточник Из ТаблицаИсточник Цикл
			Отбор = Новый Структура("Ссылка", СтрокаТаблицыИсточник.Ссылка);
			МассивНайденыхСтрок = ТаблицаПриемник.НайтиСтроки(Отбор);
			Если МассивНайденыхСтрок.Количество() = 0 Тогда
				НоваяСтрокаТаблицыПриемник = ТаблицаПриемник.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыПриемник, СтрокаТаблицыИсточник);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьТаблицуЭлектронныхДокументовСоответствующихДанномуДокументу(Организация, ВидЭлектронногоДокумента, ДанныеДокумента, ДокументСсылка, ПодчиненныйЭлектронныйДокумент)
	Если ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная")
	или ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	скEDI_ЭлектронныйДокумент.Ссылка,
		               |	скEDI_ЭлектронныйДокумент.ВхИсх,
		               |	скEDI_ЭлектронныйДокумент.ВидЭлектронногоДокумента,
		               |	скEDI_ЭлектронныйДокумент.Организация,
		               |	скEDI_ЭлектронныйДокумент.Документ1С,
		               |	скEDI_ЭлектронныйДокумент.Состояние,
		               |	скEDI_ЭлектронныйДокумент.СостояниеРегистрацияВДФС,
		               |	скEDI_ЭлектронныйДокумент.ОсновнойЭлектронныйДокумент,
		               |	скEDI_ЭлектронныйДокумент.ПоследняяОперация
		               |ИЗ
		               |	Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
		               |ГДЕ
		               |	скEDI_ЭлектронныйДокумент.Организация = &Организация
		               |	И скEDI_ЭлектронныйДокумент.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента
		               |	И РАЗНОСТЬДАТ(скEDI_ЭлектронныйДокумент.ДатаДокумента, &ДатаДокумента, ДЕНЬ) = 0
		               |	И скEDI_ЭлектронныйДокумент.НомерДокумента = &НомерДокумента
		               |	И скEDI_ЭлектронныйДокумент.ИННПродавца = &ИННПродавца
		               |	И скEDI_ЭлектронныйДокумент.КодФилиалаПродавца = &КодФилиалаПродавца
		               //|	И скEDI_ЭлектронныйДокумент.ИННПокупателя = &ИННПокупателя
		               //|	И скEDI_ЭлектронныйДокумент.КодФилиалаПокупателя = &КодФилиалаПокупателя
		               |	И скEDI_ЭлектронныйДокумент.Ссылка <> &Ссылка";
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ВидЭлектронногоДокумента", ВидЭлектронногоДокумента);
		Запрос.УстановитьПараметр("ДатаДокумента", ДанныеДокумента.ДатаДокумента);
		Запрос.УстановитьПараметр("НомерДокумента", ДанныеДокумента.НомерДокумента);
		Запрос.УстановитьПараметр("ИННПродавца", ДанныеДокумента.ИННПродавца);
		Запрос.УстановитьПараметр("КодФилиалаПродавца", ДанныеДокумента.КодФилиалаПродавца);
		//Запрос.УстановитьПараметр("ИННПокупателя", ДанныеДокумента.ИННПокупателя);
		//Запрос.УстановитьПараметр("КодФилиалаПокупателя", ДанныеДокумента.КодФилиалаПокупателя);
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Возврат Запрос.Выполнить().Выгрузить();
	ИначеЕсли ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент")
	Или ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента")
	Или ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями") Тогда
		ТаблицаЭлектронныхДокументов = Неопределено;
		Если ЗначениеЗаполнено(ДанныеДокумента.Документ1С) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	скEDI_ЭлектронныйДокумент.Ссылка КАК Ссылка,
			               |	скEDI_ЭлектронныйДокумент.ВхИсх КАК ВхИсх,
			               |	скEDI_ЭлектронныйДокумент.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
			               |	скEDI_ЭлектронныйДокумент.Организация КАК Организация,
			               |	скEDI_ЭлектронныйДокумент.Документ1С КАК Документ1С,
			               |	скEDI_ЭлектронныйДокумент.Состояние КАК Состояние,
			               |	скEDI_ЭлектронныйДокумент.СостояниеРегистрацияВДФС КАК СостояниеРегистрацияВДФС,
			               |	скEDI_ЭлектронныйДокумент.ОсновнойЭлектронныйДокумент КАК ОсновнойЭлектронныйДокумент,
			               |	скEDI_ЭлектронныйДокумент.ПоследняяОперация КАК ПоследняяОперация,
			               |	скEDI_ЭлектронныйДокумент.ДатаСоздания КАК ДатаСоздания,
			               |	скEDI_ЭлектронныйДокумент.ДатаУстановкиОсновногоВарианта КАК ДатаУстановкиОсновногоВарианта
			               |ИЗ
			               |	Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
			               |ГДЕ
			               |	скEDI_ЭлектронныйДокумент.Организация = &Организация
			               |	И скEDI_ЭлектронныйДокумент.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента
			               |	И скEDI_ЭлектронныйДокумент.Документ1С = &Документ1С
			               |	И скEDI_ЭлектронныйДокумент.Ссылка <> &Ссылка";
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("ВидЭлектронногоДокумента", ВидЭлектронногоДокумента);
			Запрос.УстановитьПараметр("Документ1С", ДанныеДокумента.Документ1С);
			Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
			ДополнитьТаблицуЭлектронныхДокументовСоответствующихДанномуДокументу(ТаблицаЭлектронныхДокументов, Запрос.Выполнить().Выгрузить());
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументСсылка) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	скEDI_ЭлектронныйДокумент.Ссылка,
			               |	скEDI_ЭлектронныйДокумент.ВхИсх,
			               |	скEDI_ЭлектронныйДокумент.ВидЭлектронногоДокумента,
			               |	скEDI_ЭлектронныйДокумент.Организация,
			               |	скEDI_ЭлектронныйДокумент.Документ1С,
			               |	скEDI_ЭлектронныйДокумент.Состояние,
			               |	скEDI_ЭлектронныйДокумент.СостояниеРегистрацияВДФС,
			               |	скEDI_ЭлектронныйДокумент.ОсновнойЭлектронныйДокумент,
			               |	скEDI_ЭлектронныйДокумент.ПоследняяОперация,
			               |	скEDI_ЭлектронныйДокумент.ДатаСоздания,
			               |	скEDI_ЭлектронныйДокумент.ДатаУстановкиОсновногоВарианта
			               |ИЗ
			               |	Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
			               |ГДЕ
			               |	скEDI_ЭлектронныйДокумент.Организация = &Организация
			               |	И скEDI_ЭлектронныйДокумент.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента
			               |	И скEDI_ЭлектронныйДокумент.ОсновнойЭлектронныйДокумент = &Ссылка
			               |	И скEDI_ЭлектронныйДокумент.Ссылка <> &Ссылка";
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("ВидЭлектронногоДокумента", ВидЭлектронногоДокумента);
			Запрос.УстановитьПараметр("Документ1С", ДанныеДокумента.Документ1С);
			Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
			ДополнитьТаблицуЭлектронныхДокументовСоответствующихДанномуДокументу(ТаблицаЭлектронныхДокументов, Запрос.Выполнить().Выгрузить());
		КонецЕсли;
		Если ЗначениеЗаполнено(ДанныеДокумента.ОсновнойЭлектронныйДокумент) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	скEDI_ЭлектронныйДокумент.Ссылка КАК Ссылка,
			               |	скEDI_ЭлектронныйДокумент.ВхИсх КАК ВхИсх,
			               |	скEDI_ЭлектронныйДокумент.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
			               |	скEDI_ЭлектронныйДокумент.Организация КАК Организация,
			               |	скEDI_ЭлектронныйДокумент.Документ1С КАК Документ1С,
			               |	скEDI_ЭлектронныйДокумент.Состояние КАК Состояние,
			               |	скEDI_ЭлектронныйДокумент.СостояниеРегистрацияВДФС КАК СостояниеРегистрацияВДФС,
			               |	скEDI_ЭлектронныйДокумент.ОсновнойЭлектронныйДокумент КАК ОсновнойЭлектронныйДокумент,
			               |	скEDI_ЭлектронныйДокумент.ПоследняяОперация КАК ПоследняяОперация,
			               |	скEDI_ЭлектронныйДокумент.ДатаСоздания КАК ДатаСоздания,
			               |	скEDI_ЭлектронныйДокумент.ДатаУстановкиОсновногоВарианта КАК ДатаУстановкиОсновногоВарианта
			               |ИЗ
			               |	Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
			               |ГДЕ
			               |	скEDI_ЭлектронныйДокумент.Организация = &Организация
			               |	И скEDI_ЭлектронныйДокумент.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента
			               |	И скEDI_ЭлектронныйДокумент.ОсновнойЭлектронныйДокумент = &ОсновнойЭлектронныйДокумент
			               |	И скEDI_ЭлектронныйДокумент.Ссылка <> &Ссылка
			               |
			               |ОБЪЕДИНИТЬ
			               |
			               |ВЫБРАТЬ
			               |	скEDI_ЭлектронныйДокумент.Ссылка,
			               |	скEDI_ЭлектронныйДокумент.ВхИсх,
			               |	скEDI_ЭлектронныйДокумент.ВидЭлектронногоДокумента,
			               |	скEDI_ЭлектронныйДокумент.Организация,
			               |	скEDI_ЭлектронныйДокумент.Документ1С,
			               |	скEDI_ЭлектронныйДокумент.Состояние,
			               |	скEDI_ЭлектронныйДокумент.СостояниеРегистрацияВДФС,
			               |	скEDI_ЭлектронныйДокумент.ОсновнойЭлектронныйДокумент,
			               |	скEDI_ЭлектронныйДокумент.ПоследняяОперация,
			               |	скEDI_ЭлектронныйДокумент.ДатаСоздания,
			               |	скEDI_ЭлектронныйДокумент.ДатаУстановкиОсновногоВарианта
			               |ИЗ
			               |	Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
			               |ГДЕ
			               |	скEDI_ЭлектронныйДокумент.Организация = &Организация
			               |	И скEDI_ЭлектронныйДокумент.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента
			               |	И скEDI_ЭлектронныйДокумент.Ссылка = &ОсновнойЭлектронныйДокумент
			               |	И скEDI_ЭлектронныйДокумент.Ссылка <> &Ссылка";
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("ВидЭлектронногоДокумента", ВидЭлектронногоДокумента);
			Запрос.УстановитьПараметр("ОсновнойЭлектронныйДокумент", ДанныеДокумента.ОсновнойЭлектронныйДокумент);
			Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
			ДополнитьТаблицуЭлектронныхДокументовСоответствующихДанномуДокументу(ТаблицаЭлектронныхДокументов, Запрос.Выполнить().Выгрузить());
		КонецЕсли;
		Если ЗначениеЗаполнено(ПодчиненныйЭлектронныйДокумент) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	скEDI_ЭлектронныйДокумент.Ссылка КАК Ссылка,
			               |	скEDI_ЭлектронныйДокумент.ВхИсх КАК ВхИсх,
			               |	скEDI_ЭлектронныйДокумент.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
			               |	скEDI_ЭлектронныйДокумент.Организация КАК Организация,
			               |	скEDI_ЭлектронныйДокумент.Документ1С КАК Документ1С,
			               |	скEDI_ЭлектронныйДокумент.Состояние КАК Состояние,
			               |	скEDI_ЭлектронныйДокумент.СостояниеРегистрацияВДФС КАК СостояниеРегистрацияВДФС,
			               |	скEDI_ЭлектронныйДокумент.ОсновнойЭлектронныйДокумент КАК ОсновнойЭлектронныйДокумент,
			               |	скEDI_ЭлектронныйДокумент.ПоследняяОперация КАК ПоследняяОперация,
			               |	скEDI_ЭлектронныйДокумент.ДатаСоздания КАК ДатаСоздания,
			               |	скEDI_ЭлектронныйДокумент.ДатаУстановкиОсновногоВарианта КАК ДатаУстановкиОсновногоВарианта
			               |ИЗ
			               |	Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
			               |ГДЕ
			               |	скEDI_ЭлектронныйДокумент.Организация = &Организация
			               |	И скEDI_ЭлектронныйДокумент.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента
			               |	И скEDI_ЭлектронныйДокумент.ОсновнойЭлектронныйДокумент = &ОсновнойЭлектронныйДокумент
			               |	И скEDI_ЭлектронныйДокумент.Ссылка <> &Ссылка
			               |
			               |ОБЪЕДИНИТЬ
			               |
			               |ВЫБРАТЬ
			               |	скEDI_ЭлектронныйДокумент.Ссылка,
			               |	скEDI_ЭлектронныйДокумент.ВхИсх,
			               |	скEDI_ЭлектронныйДокумент.ВидЭлектронногоДокумента,
			               |	скEDI_ЭлектронныйДокумент.Организация,
			               |	скEDI_ЭлектронныйДокумент.Документ1С,
			               |	скEDI_ЭлектронныйДокумент.Состояние,
			               |	скEDI_ЭлектронныйДокумент.СостояниеРегистрацияВДФС,
			               |	скEDI_ЭлектронныйДокумент.ОсновнойЭлектронныйДокумент,
			               |	скEDI_ЭлектронныйДокумент.ПоследняяОперация,
			               |	скEDI_ЭлектронныйДокумент.ДатаСоздания,
			               |	скEDI_ЭлектронныйДокумент.ДатаУстановкиОсновногоВарианта
			               |ИЗ
			               |	Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
			               |ГДЕ
			               |	скEDI_ЭлектронныйДокумент.Организация = &Организация
			               |	И скEDI_ЭлектронныйДокумент.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента
			               |	И скEDI_ЭлектронныйДокумент.Ссылка = &ОсновнойЭлектронныйДокумент
			               |	И скEDI_ЭлектронныйДокумент.Ссылка <> &Ссылка";
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("ВидЭлектронногоДокумента", ВидЭлектронногоДокумента);
			Запрос.УстановитьПараметр("ОсновнойЭлектронныйДокумент", ПодчиненныйЭлектронныйДокумент);
			Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
			ДополнитьТаблицуЭлектронныхДокументовСоответствующихДанномуДокументу(ТаблицаЭлектронныхДокументов, Запрос.Выполнить().Выгрузить());
		КонецЕсли;
		
		Возврат ТаблицаЭлектронныхДокументов;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция СравнитьСтатусыЭлектронныхДокументов(ВидЭлектронногоДокумента, ДокументА, ДокументБ)
	Если ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная")
		или ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
		
		Если ДокументА.СостояниеРегистрацияВДФС = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоПодтверждениеОтДФС") Тогда
			Возврат 1;
		ИначеЕсли ДокументБ.СостояниеРегистрацияВДФС = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоПодтверждениеОтДФС") Тогда
			Возврат -1;
		ИначеЕсли ДокументА.СостояниеРегистрацияВДФС = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоПодтверждениеОтДФС_РегистрацияОстановлена") Тогда
			Возврат 1;
		ИначеЕсли ДокументБ.СостояниеРегистрацияВДФС = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоПодтверждениеОтДФС_РегистрацияОстановлена") Тогда
			Возврат -1;
		КонецЕсли;
		//Если ДокументА.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС") Тогда
		//	Возврат 1;
		//ИначеЕсли ДокументБ.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС") Тогда
		//	Возврат -1;
		//КонецЕсли;
		//
		//Если ДокументА.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученОтКонтрагентаЗарегистрированыйВЕРПН") Тогда
		//	Возврат 1;
		//ИначеЕсли ДокументБ.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученОтКонтрагентаЗарегистрированыйВЕРПН") Тогда
		//	Возврат -1;
		//КонецЕсли;
		//
		//Если ДокументА.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоКвитанциюОтДФС") Тогда
		//	Возврат 1;
		//ИначеЕсли ДокументБ.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоКвитанциюОтДФС") Тогда
		//	Возврат -1;
		//КонецЕсли;
		//
		//Если ДокументА.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленВДФС") Тогда
		//	Возврат 1;
		//ИначеЕсли ДокументБ.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленВДФС") Тогда
		//	Возврат -1;
		//КонецЕсли;
		//
		//Если ДокументА.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленКонтрагентуДляРегистрацииВЕРПН") Тогда
		//	Возврат 1;
		//ИначеЕсли ДокументБ.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленКонтрагентуДляРегистрацииВЕРПН") Тогда
		//	Возврат -1;
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументА.ПоследняяОперация) и ЗначениеЗаполнено(ДокументБ.ПоследняяОперация) Тогда
			Если ДокументА.ПоследняяОперация > ДокументБ.ПоследняяОперация Тогда
				Возврат 1;
			ИначеЕсли ДокументА.ПоследняяОперация < ДокументБ.ПоследняяОперация Тогда
				Возврат -1;
			Иначе
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
		
		Возврат 0;
	ИначеЕсли ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент")
		или ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента")
		или ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями")
		Тогда
		
		//Если ДокументА.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждение")
		//	и ДокументБ.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждение") Тогда
		//	
		//	Если ЗначениеЗаполнено(ДокументА.ПоследняяОперация) и ЗначениеЗаполнено(ДокументБ.ПоследняяОперация) Тогда
		//		Если ДокументА.ПоследняяОперация > ДокументБ.ПоследняяОперация Тогда
		//			Возврат 1;
		//		ИначеЕсли ДокументА.ПоследняяОперация < ДокументБ.ПоследняяОперация Тогда
		//			Возврат -1;
		//		Иначе
		//			Возврат 0;
		//		КонецЕсли;
		//	КонецЕсли;
		//	
		//ИначеЕсли ДокументА.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждение") Тогда
		//	Возврат 1;
		//ИначеЕсли ДокументБ.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждение") Тогда
		//	Возврат -1;
		//КонецЕсли;
		//
		//Если ЗначениеЗаполнено(ДокументА.ПоследняяОперация) и ЗначениеЗаполнено(ДокументБ.ПоследняяОперация) Тогда
		//	Если ДокументА.ПоследняяОперация > ДокументБ.ПоследняяОперация Тогда
		//		Возврат 1;
		//	ИначеЕсли ДокументА.ПоследняяОперация < ДокументБ.ПоследняяОперация Тогда
		//		Возврат -1;
		//	Иначе
		//		Возврат 0;
		//	КонецЕсли;
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументА.ДатаУстановкиОсновногоВарианта) Тогда
			ПоследняяОперацияА = ДокументА.ДатаУстановкиОсновногоВарианта;
		ИначеЕсли ЗначениеЗаполнено(ДокументА.ДатаСоздания) Тогда
			ПоследняяОперацияА = ДокументА.ДатаСоздания;
		//ИначеЕсли ЗначениеЗаполнено(ДокументА.ПоследняяОперация) Тогда
		//	ПоследняяОперацияА = ДокументА.ПоследняяОперация;
		Иначе
			ПоследняяОперацияА = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументБ.ДатаУстановкиОсновногоВарианта) Тогда
			ПоследняяОперацияБ = ДокументБ.ДатаУстановкиОсновногоВарианта;
		ИначеЕсли ЗначениеЗаполнено(ДокументБ.ДатаСоздания) Тогда
			ПоследняяОперацияБ = ДокументБ.ДатаСоздания;
		//ИначеЕсли ЗначениеЗаполнено(ДокументБ.ПоследняяОперация) Тогда
		//	ПоследняяОперацияБ = ДокументБ.ПоследняяОперация;
		Иначе
			ПоследняяОперацияБ = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПоследняяОперацияА) и ЗначениеЗаполнено(ПоследняяОперацияБ) Тогда
			Если ПоследняяОперацияА > ПоследняяОперацияБ Тогда
				Возврат 1;
			ИначеЕсли ПоследняяОперацияА < ПоследняяОперацияБ Тогда
				Возврат -1;
			Иначе
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
		Возврат 0;
	Иначе
		Возврат 1;
	КонецЕсли;
КонецФункции

Процедура ЗаписатьЭлектронныйДокументСПредварительнымПоискомСвязаных(ЭлектронныйДокументОбъект, ВидЭлектронногоДокумента, Организация, ПодчиненныйЭлектронныйДокумент = Неопределено) Экспорт
	ТаблицаСоответствующихЭлектронныхДокументов = ПолучитьТаблицуЭлектронныхДокументовСоответствующихДанномуДокументу(Организация, ВидЭлектронногоДокумента, ЭлектронныйДокументОбъект, ЭлектронныйДокументОбъект.Ссылка, ПодчиненныйЭлектронныйДокумент);
	Если ТаблицаСоответствующихЭлектронныхДокументов <> Неопределено Тогда
		СтрокаГлавныйДокумент = Неопределено;
		Для Каждого СтрокаТаблицыСоответствующихЭлектронныхДокументов из ТаблицаСоответствующихЭлектронныхДокументов Цикл
			Если СтрокаГлавныйДокумент = Неопределено Тогда
				ДокументА = ЭлектронныйДокументОбъект;
			Иначе
				ДокументА = СтрокаГлавныйДокумент;
			КонецЕсли;
			Если СравнитьСтатусыЭлектронныхДокументов(ВидЭлектронногоДокумента, ДокументА, СтрокаТаблицыСоответствующихЭлектронныхДокументов) < 0 Тогда
				СтрокаГлавныйДокумент = СтрокаТаблицыСоответствующихЭлектронныхДокументов;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаГлавныйДокумент = Неопределено Тогда
			ЭлектронныйДокументОбъект.ОсновнойЭлектронныйДокумент = Документы.скEDI_ЭлектронныйДокумент.ПустаяСсылка();
			ЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
			ЭлектронныйДокументОбъект.Записать();
			Для Каждого СтрокаТаблицыСоответствующихЭлектронныхДокументов из ТаблицаСоответствующихЭлектронныхДокументов Цикл
				лСоответствующийЭлектронныйДокументОбъект = СтрокаТаблицыСоответствующихЭлектронныхДокументов.Ссылка.ПолучитьОбъект();
				лСоответствующийЭлектронныйДокументОбъект.ОсновнойЭлектронныйДокумент = ЭлектронныйДокументОбъект.Ссылка;
				лСоответствующийЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
				лСоответствующийЭлектронныйДокументОбъект.Записать();
			КонецЦикла;
		Иначе
			Если СтрокаГлавныйДокумент.ОсновнойЭлектронныйДокумент <> Документы.скEDI_ЭлектронныйДокумент.ПустаяСсылка() Тогда
				лСтрокаГлавныйДокументОбъект = СтрокаГлавныйДокумент.Ссылка.ПолучитьОбъект();
				лСтрокаГлавныйДокументОбъект.ОсновнойЭлектронныйДокумент = Документы.скEDI_ЭлектронныйДокумент.ПустаяСсылка();
				лСтрокаГлавныйДокументОбъект.ОбменДанными.Загрузка = Истина;
				лСтрокаГлавныйДокументОбъект.Записать();
			КонецЕсли;
			ЭлектронныйДокументОбъект.ОсновнойЭлектронныйДокумент = СтрокаГлавныйДокумент.Ссылка;
			ЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
			ЭлектронныйДокументОбъект.Записать();
			Для Каждого СтрокаТаблицыСоответствующихЭлектронныхДокументов из ТаблицаСоответствующихЭлектронныхДокументов Цикл
				Если СтрокаТаблицыСоответствующихЭлектронныхДокументов <> СтрокаГлавныйДокумент Тогда
					лСоответствующийЭлектронныйДокументОбъект = СтрокаТаблицыСоответствующихЭлектронныхДокументов.Ссылка.ПолучитьОбъект();
					лСоответствующийЭлектронныйДокументОбъект.ОсновнойЭлектронныйДокумент = СтрокаГлавныйДокумент.Ссылка;
					лСоответствующийЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
					лСоответствующийЭлектронныйДокументОбъект.Записать();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		ЭлектронныйДокументОбъект.ОсновнойЭлектронныйДокумент = Документы.скEDI_ЭлектронныйДокумент.ПустаяСсылка();
		ЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
		ЭлектронныйДокументОбъект.Записать();
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьМассивДанныеПоПодписям(ЭлектронныйДокумент, УстанавливатьIsOwnerSign = Ложь) Экспорт
	МассивДанныеПоПодписям = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА Факсимиле.КодУровняПодписи >= 0
	               |			ТОГДА Факсимиле.КодУровняПодписи
	               |		ИНАЧЕ Подписи.КодУровняПодписи
	               |	КОНЕЦ КАК КодУровняПодписи,
	               |	Факсимиле.ТелоФаксимиле КАК ТелоФаксимиле,
	               |	ЕСТЬNULL(Факсимиле.ДРФО, Подписи.ДРФО) КАК ДРФО,
	               |	ЕСТЬNULL(Факсимиле.ИмяПодписанта, Подписи.ИмяПодписанта) КАК ИмяПодписанта,
	               |	ЕСТЬNULL(Факсимиле.ДолжностьПодписанта, Подписи.ДолжностьПодписанта) КАК ДолжностьПодписанта,
	               |	Подписи.ПолученаПоНашимДанным КАК ПолученаПоНашимДанным,
	               |	ЕСТЬNULL(Факсимиле.Сторона, Подписи.Сторона) КАК Сторона,
	               |	ВЫБОР
	               |		КОГДА Подписи.ПолученаПоНашимДанным
	               |			ТОГДА Подписи.НомерСтрокиПоНашимДанным
	               |		ИНАЧЕ Подписи.НомерСтрокиПоДаннымКонтрагента
	               |	КОНЕЦ КАК ПолеДляУпорядочивания
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВложенныйЗапрос.КодУровняПодписи КАК КодУровняПодписи,
	               |		ВложенныйЗапрос.ДРФО КАК ДРФО,
	               |		МАКСИМУМ(ВложенныйЗапрос.ИмяПодписанта) КАК ИмяПодписанта,
	               |		МАКСИМУМ(ВложенныйЗапрос.ДолжностьПодписанта) КАК ДолжностьПодписанта,
	               |		ВложенныйЗапрос.ПолученаПоНашимДанным КАК ПолученаПоНашимДанным,
	               |		ВложенныйЗапрос.НомерСтрокиПоДаннымКонтрагента КАК НомерСтрокиПоДаннымКонтрагента,
	               |		ВложенныйЗапрос.НомерСтрокиПоНашимДанным КАК НомерСтрокиПоНашимДанным,
	               |		ВложенныйЗапрос.Сторона КАК Сторона
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			ВЫБОР
	               |				КОГДА скEDI_ЭлектронныйДокументПодписиКонтрагента.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьДиректора)
	               |					ТОГДА 0
	               |				КОГДА скEDI_ЭлектронныйДокументПодписиКонтрагента.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьБухгалтера)
	               |					ТОГДА 1
	               |				КОГДА скEDI_ЭлектронныйДокументПодписиКонтрагента.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПечатьОрганизации)
	               |					ТОГДА 2
	               |				КОГДА скEDI_ЭлектронныйДокументПодписиКонтрагента.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьОтветственногоЛица)
	               |					ТОГДА 3
	               |				КОГДА скEDI_ЭлектронныйДокументПодписиКонтрагента.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.РегистраторУСЦ)
	               |					ТОГДА -1
	               |				КОГДА скEDI_ЭлектронныйДокументПодписиКонтрагента.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьФизическогоЛица)
	               |					ТОГДА 3
	               |				ИНАЧЕ -1
	               |			КОНЕЦ КАК КодУровняПодписи,
	               |			скEDI_ЭлектронныйДокументПодписиКонтрагента.ДРФОПодписанта КАК ДРФО,
	               |			скEDI_ЭлектронныйДокументПодписиКонтрагента.ИмяПодписанта КАК ИмяПодписанта,
	               |			скEDI_ЭлектронныйДокументПодписиКонтрагента.ДолжностьПодписанта КАК ДолжностьПодписанта,
	               |			ЛОЖЬ КАК ПолученаПоНашимДанным,
	               |			скEDI_ЭлектронныйДокументПодписиКонтрагента.НомерСтроки КАК НомерСтрокиПоДаннымКонтрагента,
	               |			NULL КАК НомерСтрокиПоНашимДанным,
	               |			скEDI_ЭлектронныйДокументПодписиКонтрагента.Ссылка.RoutePosition КАК Сторона
	               |		ИЗ
	               |			Документ.скEDI_ЭлектронныйДокумент.ПодписиКонтрагента КАК скEDI_ЭлектронныйДокументПодписиКонтрагента
	               |		ГДЕ
	               |			скEDI_ЭлектронныйДокументПодписиКонтрагента.Ссылка = &ЭлектронныйДокумент
	               |		
	               |		ОБЪЕДИНИТЬ ВСЕ
	               |		
	               |		ВЫБРАТЬ
	               |			ВЫБОР
	               |				КОГДА скEDI_ЭлектронныйДокументПодписи.Подпись.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьДиректора)
	               |					ТОГДА 0
	               |				КОГДА скEDI_ЭлектронныйДокументПодписи.Подпись.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьБухгалтера)
	               |					ТОГДА 1
	               |				КОГДА скEDI_ЭлектронныйДокументПодписи.Подпись.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПечатьОрганизации)
	               |					ТОГДА 2
	               |				КОГДА скEDI_ЭлектронныйДокументПодписи.Подпись.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьОтветственногоЛица)
	               |					ТОГДА 3
	               |				КОГДА скEDI_ЭлектронныйДокументПодписи.Подпись.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.РегистраторУСЦ)
	               |					ТОГДА -1
	               |				КОГДА скEDI_ЭлектронныйДокументПодписи.Подпись.Роль = ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьФизическогоЛица)
	               |					ТОГДА 3
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА скEDI_ЭлектронныйДокументПодписи.Подпись.ДРФО = """"
	               |							ТОГДА 2
	               |						ИНАЧЕ -1
	               |					КОНЕЦ
	               |			КОНЕЦ,
	               |			ВЫБОР
	               |				КОГДА скEDI_ЭлектронныйДокументПодписи.Подпись.ДРФО = """"
	               |					ТОГДА скEDI_ЭлектронныйДокументПодписи.Подпись.Владелец.Код
	               |				ИНАЧЕ скEDI_ЭлектронныйДокументПодписи.Подпись.ДРФО
	               |			КОНЕЦ,
	               |			скEDI_ЭлектронныйДокументПодписи.Подпись.Фамилия + "" "" + скEDI_ЭлектронныйДокументПодписи.Подпись.Имя,
	               |			скEDI_ЭлектронныйДокументПодписи.Подпись.Должность,
	               |			ИСТИНА,
	               |			NULL,
	               |			скEDI_ЭлектронныйДокументПодписи.НомерСтроки,
	               |			скEDI_ЭлектронныйДокументПодписи.Ссылка.RoutePosition
	               |		ИЗ
	               |			Документ.скEDI_ЭлектронныйДокумент.Подписи КАК скEDI_ЭлектронныйДокументПодписи
	               |		ГДЕ
	               |			скEDI_ЭлектронныйДокументПодписи.Ссылка = &ЭлектронныйДокумент
	               |			И скEDI_ЭлектронныйДокументПодписи.Подписано) КАК ВложенныйЗапрос
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВложенныйЗапрос.КодУровняПодписи,
	               |		ВложенныйЗапрос.ДРФО,
	               |		ВложенныйЗапрос.ПолученаПоНашимДанным,
	               |		ВложенныйЗапрос.НомерСтрокиПоДаннымКонтрагента,
	               |		ВложенныйЗапрос.НомерСтрокиПоНашимДанным,
	               |		ВложенныйЗапрос.Сторона) КАК Подписи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			скEDI_ФаксимилеЭлектронныхДокументов.Сторона КАК Сторона,
	               |			скEDI_ФаксимилеЭлектронныхДокументов.КодУровняПодписи КАК КодУровняПодписи,
	               |			скEDI_ФаксимилеЭлектронныхДокументов.ДРФО КАК ДРФО,
	               |			скEDI_ФаксимилеЭлектронныхДокументов.ТелоФаксимиле КАК ТелоФаксимиле,
	               |			скEDI_ФаксимилеЭлектронныхДокументов.ИмяПодписанта КАК ИмяПодписанта,
	               |			скEDI_ФаксимилеЭлектронныхДокументов.ДолжностьПодписанта КАК ДолжностьПодписанта
	               |		ИЗ
	               |			РегистрСведений.скEDI_ФаксимилеЭлектронныхДокументов КАК скEDI_ФаксимилеЭлектронныхДокументов
	               |		ГДЕ
	               |			скEDI_ФаксимилеЭлектронныхДокументов.ЭлектронныйДокумент = &ЭлектронныйДокумент) КАК Факсимиле
	               |		ПО Подписи.ДРФО = Факсимиле.ДРФО
	               |			И (Подписи.КодУровняПодписи = Факсимиле.КодУровняПодписи
	               |				ИЛИ Подписи.КодУровняПодписи < 0
	               |				ИЛИ Факсимиле.КодУровняПодписи < 0)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПолученаПоНашимДанным УБЫВ,
	               |	ПолеДляУпорядочивания";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		ДанныеПоПодписи = Новый Структура();
		ДанныеПоПодписи.Вставить("SignState", ВыборкаЗапроса.КодУровняПодписи);
		ДанныеПоПодписи.Вставить("Drfo", ВыборкаЗапроса.ДРФО);
		ДанныеПоПодписи.Вставить("SignerName", ВыборкаЗапроса.ИмяПодписанта);
		ДанныеПоПодписи.Вставить("SignerPosName", ВыборкаЗапроса.ДолжностьПодписанта);
		Если УстанавливатьIsOwnerSign Тогда
			Если ЭлектронныйДокумент.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
				Если ВыборкаЗапроса.ПолученаПоНашимДанным Тогда
					ДанныеПоПодписи.Вставить("IsOwnerSign", 0);
				Иначе
					ДанныеПоПодписи.Вставить("IsOwnerSign", 1);
				КонецЕсли;
			ИначеЕсли ЭлектронныйДокумент.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
				Если ВыборкаЗапроса.ПолученаПоНашимДанным Тогда
					ДанныеПоПодписи.Вставить("IsOwnerSign", 1);
				Иначе
					ДанныеПоПодписи.Вставить("IsOwnerSign", 0);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ВыборкаЗапроса.ТелоФаксимиле <> Null Тогда
			ДанныеПоПодписи.Вставить("Body", ВыборкаЗапроса.ТелоФаксимиле);
		КонецЕсли;
		ДанныеПоПодписи.Вставить("Side", ВыборкаЗапроса.Сторона);
		
		МассивДанныеПоПодписям.Добавить(ДанныеПоПодписи);
	КонецЦикла;
	
	Возврат МассивДанныеПоПодписям;
КонецФункции

Процедура ЗаписатьФаксимилеЭлектронныхДокументов(ЭлектронныйДокумент, МассивГрафическихИзображенийПодписей)
	Для Каждого ГрафическоеИзображениеПодписи из МассивГрафическихИзображенийПодписей Цикл
		МенеджерЗаписи = РегистрыСведений.скEDI_ФаксимилеЭлектронныхДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ЭлектронныйДокумент = ЭлектронныйДокумент;
		МенеджерЗаписи.КодУровняПодписи = ГрафическоеИзображениеПодписи.Получить("SignState");
		МенеджерЗаписи.ДРФО = ГрафическоеИзображениеПодписи.Получить("Drfo");
		Сторона = ГрафическоеИзображениеПодписи.Получить("Side");
		Если Сторона = Неопределено Тогда
			МенеджерЗаписи.Сторона = 0;
		Иначе
			МенеджерЗаписи.Сторона = Сторона;
		КонецЕсли;
		
		МенеджерЗаписи.ТелоФаксимиле = ГрафическоеИзображениеПодписи.Получить("Body");
		МенеджерЗаписи.ИмяПодписанта = ГрафическоеИзображениеПодписи.Получить("SignerName");
		МенеджерЗаписи.ДолжностьПодписанта = ГрафическоеИзображениеПодписи.Получить("SignerPosName");
		МенеджерЗаписи.Роль = ПолучитьРольПодписиПоКоду(МенеджерЗаписи.КодУровняПодписи);
		
		МенеджерЗаписи.Записать(Истина);
	КонецЦикла;
КонецПроцедуры

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ОбработатьВходящийЭлектронныйДокумент(ДанныеДокумента, ОрганизацияПолучатель, ЭлектронныйДокументСсылка, КвитанцияВхИсх, ЖурналОперации = "", аоОперация, аоЭлектронныйДокумент, аоДополнительно)
	
	лНетОшибокПриОбработкеВходящегоДокумента = Истина;
	
	аоОперация = "";
	аоЭлектронныйДокумент = Неопределено;
	аоДополнительно = "";
	ЭлектронныйДокументСсылка = Неопределено;

	лРезультатПоискаЭлектронногоДокументаВБазе = ПроверитьНаличиеЭлектронногоДокументаВБазе(ДанныеДокумента.Получить("FileName"), ОрганизацияПолучатель);
	Если лРезультатПоискаЭлектронногоДокументаВБазе = Неопределено Тогда
		СодержимоеЭлектронногоДокументаGovBody = ДанныеДокумента.Получить("GovBody");
		СодержимоеЭлектронногоДокументаMedocText = ДанныеДокумента.Получить("MedocText");
		ИмяФайла = ДанныеДокумента.Получить("FileName");
		ИмяФайлаКвитанции = ДанныеДокумента.Получить("AnsFileName");
		DocVer = ДанныеДокумента.Получить("DocVer");
		ЕДРПОУКонтрагента = ДанныеДокумента.Получить("Edrpou");
		ФилиалКонтрагента = ДанныеДокумента.Получить("Dept");
		ЕДРПОУПолучателя = ДанныеДокумента.Получить("RcvEdrpou");
		ФилиалПолучателя = ДанныеДокумента.Получить("RcvDept");
		ДатаСобытия = ТекущаяДата();
		ОтклонитьНалоговыйДокументПоНеСоответствиюИНН = Ложь;
		ОтклонитьНалоговыйДокументПоНеСоответствиюИНН_Текст = "";
		МассивДанныхПоСвязаннымДокументам = Неопределено;
		
		Если СодержимоеЭлектронногоДокументаGovBody <> Неопределено Тогда
			//СодержимоеЭлектронногоДокументаGovText = ДанныеДокумента.Получить("GovText");
			
			//лКонтейнерДанныхЭлектронногоДокумента = ДанныеДокумента.Получить("MedocDoc");
			//Если лКонтейнерДанныхЭлектронногоДокумента = Неопределено Тогда
				лРезультатРазборкиТелаДокументаВСтруктуруСДанными = РазобратьXMLПредставлениеЭлектронногоДокументаВСоответствиеСДанными(СодержимоеЭлектронногоДокументаGovBody, ЖурналОперации);
			//Иначе
			//	лРезультатРазборкиТелаДокументаВСтруктуруСДанными = ПолучитьСтруктуруДанныхПоЭлектронномуДокументуИзСоответствияDoc(лКонтейнерДанныхЭлектронногоДокумента.Получить("Doc"));
			//КонецЕсли;
			Если лРезультатРазборкиТелаДокументаВСтруктуруСДанными = Неопределено Тогда
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не удалось прочитать данные электронного документа'; uk = 'Не вдалося прочитати дані електронного документа'") + " " + ИмяФайла + ".");
				лНетОшибокПриОбработкеВходящегоДокумента = Ложь;
			КонецЕсли;
			
			лВидЭлектронногоДокумента = ОпределитьВидЭлектронногоДокументаПоИмениШаблона(лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ЕДРПОУВладельцаШаблона, лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ИмяШаблона, лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ВерсияШаблона, лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ТипДокументаMEDoc, ОрганизацияПолучатель);
			Если лВидЭлектронногоДокумента = Неопределено Тогда
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не удалось определить вид полученного электронного документа'; uk = 'Не вдалось визначити вид отриманого електронного документа'"));
				лНетОшибокПриОбработкеВходящегоДокумента = Ложь;
			КонецЕсли;
			
			Если лНетОшибокПриОбработкеВходящегоДокумента Тогда
				лСостояниеЭлектронногоДокумента = Перечисления.скEDI_СостоянияЭлектронныхДокументов.Получен;
				лСостояниеЭлектронногоДокументаРегистрацияВДФС = Неопределено;
				лЕстьФинальнаяКвитанцияДФС = Ложь;
				лПричинаОтклоненияДФС = "";
				лРегистрационныйНомерДФС = Неопределено;
				лЗарегистрированВДФС = Неопределено;
				лДатаРегистрацииВДФС = Неопределено;
				
				ТаблицаКвитанций = Новый ТаблицаЗначений;
				ТаблицаКвитанций.Колонки.Добавить("ДатаВремяКвитанции");
				ТаблицаКвитанций.Колонки.Добавить("ВидКвитанции");
				ТаблицаКвитанций.Колонки.Добавить("ТипКвитанцииДФС");
				ТаблицаКвитанций.Колонки.Добавить("ТекстКвитанции");
				ТаблицаКвитанций.Колонки.Добавить("ТелоКвитанции");
				ТаблицаКвитанций.Колонки.Добавить("ВхИсх");
				ТаблицаКвитанций.Колонки.Добавить("РегНомер");
				ТаблицаКвитанций.Колонки.Добавить("ОшибкиДокумента");
				лМассивКвитанций = ДанныеДокумента.Получить("GovKvt");
				Если ТипЗнч(лМассивКвитанций) = Тип("Массив") Тогда
					Для Каждого ТелоКвитанции Из лМассивКвитанций Цикл
						ТекстКвитанции = "";
						ДатаВремяКвитанции = ДатаСобытия;
						
						лПараметрыЗапроса = Новый Структура;
						лПараметрыЗапроса.Вставить("Body", ТелоКвитанции);
						лРезультатСнятияПодписей = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("parsemessage", лПараметрыЗапроса);
						Если лРезультатСнятияПодписей.Code = 0  Тогда
							КвитанцияПолныйТекст = Base64ЗначениеСтрока(лРезультатСнятияПодписей.Text);
							
							ВидКвитанции = Неопределено;
							ТипКвитанции = Неопределено;
							ТекстКвитанции = Неопределено;
							ДатаВремяКвитанции = Неопределено;
							РегНомер = "";
							ОшибкиДокумента = "";
							Если РазобратьТекстКвитанции(КвитанцияПолныйТекст, ТекстКвитанции, ДатаВремяКвитанции, ВидКвитанции, ТипКвитанции, РегНомер, ОшибкиДокумента) Тогда
								Если ВидКвитанции = Перечисления.скEDI_ВидыКвитанций.ДФС Тогда
									ИнформацияОКвитанции = ТекстКвитанции;
									лМассивПодписей = ПолучитьМассивПодписейИзМассиваСтруктур(лРезультатСнятияПодписей.Signers);
									Если лМассивПодписей.Количество() > 0 Тогда
										ИнформацияОКвитанции = ИнформацияОКвитанции + "
												|
												|Підписи:";
										ДополнитьОписаниеДаннымиПоПодписямКонтрагента(лМассивПодписей, ИнформацияОКвитанции, ОрганизацияПолучатель.Код, Ложь, Ложь);
									КонецЕсли;
									
									НоваяСтрокаТаблицыКвитанций = ТаблицаКвитанций.Добавить();
									НоваяСтрокаТаблицыКвитанций.ВидКвитанции = ВидКвитанции;
									НоваяСтрокаТаблицыКвитанций.ДатаВремяКвитанции = ДатаВремяКвитанции;
									НоваяСтрокаТаблицыКвитанций.ТипКвитанцииДФС = ТипКвитанции;
									НоваяСтрокаТаблицыКвитанций.ТекстКвитанции = ИнформацияОКвитанции;
									НоваяСтрокаТаблицыКвитанций.ТелоКвитанции = ТелоКвитанции;
									НоваяСтрокаТаблицыКвитанций.ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий;
									НоваяСтрокаТаблицыКвитанций.РегНомер = РегНомер;
									НоваяСтрокаТаблицыКвитанций.ОшибкиДокумента = ОшибкиДокумента;
									
									Если ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.Успешно Тогда
										лСостояниеЭлектронногоДокумента = Перечисления.скEDI_СостоянияЭлектронныхДокументов.Получен;//ОтКонтрагентаЗарегистрированыйВЕРПН;
										лСостояниеЭлектронногоДокументаРегистрацияВДФС = Перечисления.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоПодтверждениеОтДФС;
										лЕстьФинальнаяКвитанцияДФС = Истина;
										лРегистрационныйНомерДФС = РегНомер;
										лЗарегистрированВДФС = Истина;
										лДатаРегистрацииВДФС = ДатаВремяКвитанции;
									ИначеЕсли ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.Предупреджение Тогда
										лСостояниеЭлектронногоДокумента = Перечисления.скEDI_СостоянияЭлектронныхДокументов.Получен;//ОтКонтрагентаЗарегистрированыйВЕРПН;
										лСостояниеЭлектронногоДокументаРегистрацияВДФС = Перечисления.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоКвитанциюОтДФС_Предупреждение;
										лПричинаОтклоненияДФС = лПричинаОтклоненияДФС + ?(лПричинаОтклоненияДФС="", "", Символы.ПС) + ОшибкиДокумента;
										лРегистрационныйНомерДФС = РегНомер;
										лЗарегистрированВДФС = Истина;
										лДатаРегистрацииВДФС = ДатаВремяКвитанции;
									ИначеЕсли ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.Ошибка Тогда
										лСостояниеЭлектронногоДокумента = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонениеОтДФС;
										лСостояниеЭлектронногоДокументаРегистрацияВДФС = Перечисления.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоОтклонениеОтДФС;
										лПричинаОтклоненияДФС = лПричинаОтклоненияДФС + ?(лПричинаОтклоненияДФС="", "", Символы.ПС) + ОшибкиДокумента;
									ИначеЕсли ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.РегистрацияОстановлена Тогда
										лСостояниеЭлектронногоДокумента = Перечисления.скEDI_СостоянияЭлектронныхДокументов.Получен;//ОтКонтрагентаЗарегистрированыйВЕРПН;
										лСостояниеЭлектронногоДокументаРегистрацияВДФС = Перечисления.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоПодтверждениеОтДФС_РегистрацияОстановлена;
										лЕстьФинальнаяКвитанцияДФС = Ложь;//Истина;
										лРегистрационныйНомерДФС = РегНомер;
										лЗарегистрированВДФС = Ложь;//Истина;
										лДатаРегистрацииВДФС = ДатаВремяКвитанции;
									Иначе
										
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						Иначе
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка разбора подписанной Квитанции'; uk = 'Помилка розбору підписаної Квитанції'") + ": " + лРезультатСнятияПодписей.Message);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				лДанныеЗаполненияЭлектронногоДокумента = Новый Структура;
				
				лОсновныеДанныеДокумента = Новый Структура;
				лОсновныеДанныеДокумента.Вставить("ВидЭлектронногоДокумента", лВидЭлектронногоДокумента);
				лОсновныеДанныеДокумента.Вставить("Организация", ОрганизацияПолучатель);
				//лОсновныеДанныеДокумента.Вставить("Документ1С", );
				Если лСостояниеЭлектронногоДокумента = Неопределено Тогда
					лОсновныеДанныеДокумента.Вставить("Состояние", Перечисления.скEDI_СостоянияЭлектронныхДокументов.Получен);
				Иначе
					лОсновныеДанныеДокумента.Вставить("Состояние", лСостояниеЭлектронногоДокумента);
				КонецЕсли;
				Если лСостояниеЭлектронногоДокументаРегистрацияВДФС <> Неопределено Тогда
					лОсновныеДанныеДокумента.Вставить("СостояниеРегистрацияВДФС", лСостояниеЭлектронногоДокументаРегистрацияВДФС);
				КонецЕсли;
				Если лЕстьФинальнаяКвитанцияДФС Тогда
					лОсновныеДанныеДокумента.Вставить("ЕстьФинальнаяКвитанцияДФС", Истина);
				КонецЕсли;
				лОсновныеДанныеДокумента.Вставить("ИмяФайла", ИмяФайла);
				лОсновныеДанныеДокумента.Вставить("ЕДРПОУКонтрагента", ЕДРПОУКонтрагента);
				лОсновныеДанныеДокумента.Вставить("ФилиалКонтрагента", ФилиалКонтрагента);
				//лОсновныеДанныеДокумента.Вставить("СуммаДокумента",           );
				лОсновныеДанныеДокумента.Вставить("РеквизитыЭлектронногоДокумента", лРезультатРазборкиТелаДокументаВСтруктуруСДанными.СоответствиеСДанными);
				лОсновныеДанныеДокумента.Вставить("ЕДРПОУВладельцаШаблона",     лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ЕДРПОУВладельцаШаблона);
				лОсновныеДанныеДокумента.Вставить("ИмяШаблона",                 лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ИмяШаблона);
				лОсновныеДанныеДокумента.Вставить("ВерсияШаблона",              лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ВерсияШаблона);
				лОсновныеДанныеДокумента.Вставить("ВхИсх",    Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий);
				лОсновныеДанныеДокумента.Вставить("ПоследняяОперация", ДатаСобытия);
				
				Если лРегистрационныйНомерДФС <> Неопределено Тогда
					лОсновныеДанныеДокумента.Вставить("РегистрационныйНомерДФС", лРегистрационныйНомерДФС);
				КонецЕсли;
				Если лЗарегистрированВДФС <> Неопределено Тогда
					лОсновныеДанныеДокумента.Вставить("ЗарегистрированВДФС", лЗарегистрированВДФС);
				КонецЕсли;
				Если лДатаРегистрацииВДФС <> Неопределено Тогда
					лОсновныеДанныеДокумента.Вставить("ДатаРегистрацииВДФС", лДатаРегистрацииВДФС);
				КонецЕсли;
				Если лПричинаОтклоненияДФС <> "" Тогда
					лОсновныеДанныеДокумента.Вставить("ПричинаОтклоненияДФС", лПричинаОтклоненияДФС);
				КонецЕсли;
				
				лРеквизитыШапкиДокумента = лРезультатРазборкиТелаДокументаВСтруктуруСДанными.Таблица0ПерваяСтрока;
				
				Если лВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
					лНомерЭлектронногоДокумента = "";
					лНомерДокумента = "";
					лДатаЭлектронногоДокумента = "";
					лДатаДокумента = "";
					лЕДРПОУПродавца = "";
					лИННПродавца = "";
					лКодФилиалаПродавца = "";
					лНаименованиеПродавца = "";
					лЕДРПОУПокупателя = "";
					лИННПокупателя = "";
					лКодФилиалаПокупателя = "";
					лНаименованиеПокупателя = "";
					лСуммаЭлектронногоДокумента = 0;
					лСуммаБезНДСЭлектронногоДокумента = 0;
					лСуммаНДСЭлектронногоДокумента = 0;
					
					лИмяФайлаДФС = ПолучитьИмяФайлаНалоговогоДокументаПоРеквизитамШапки(лРеквизитыШапкиДокумента);
					ПолучитьРеквизитыНалоговойНакладнойИзРеквизитовШапкиЭлектронногоДокумента(лРеквизитыШапкиДокумента, лНомерЭлектронногоДокумента, лНомерДокумента,
						лДатаЭлектронногоДокумента, лДатаДокумента,
						лЕДРПОУПродавца, лИННПродавца, лКодФилиалаПродавца, лНаименованиеПродавца, лЕДРПОУПокупателя, лИННПокупателя, лКодФилиалаПокупателя, лНаименованиеПокупателя,
						лСуммаЭлектронногоДокумента, лСуммаБезНДСЭлектронногоДокумента, лСуммаНДСЭлектронногоДокумента);
					
					лОсновныеДанныеДокумента.Вставить("Номер", лНомерЭлектронногоДокумента);
					лОсновныеДанныеДокумента.Вставить("НомерДокумента", лНомерДокумента);
					лОсновныеДанныеДокумента.Вставить("Дата",  лДатаЭлектронногоДокумента);
					лОсновныеДанныеДокумента.Вставить("ДатаДокумента",  лДатаДокумента);
					лОсновныеДанныеДокумента.Вставить("ИмяФайлаДФС",  лИмяФайлаДФС);
					лОсновныеДанныеДокумента.Вставить("ИННПродавца",  лИННПродавца);
					лОсновныеДанныеДокумента.Вставить("КодФилиалаПродавца",  лКодФилиалаПродавца);
					лОсновныеДанныеДокумента.Вставить("ИННПокупателя",  лИННПокупателя);
					лОсновныеДанныеДокумента.Вставить("КодФилиалаПокупателя",  лКодФилиалаПокупателя);
					лОсновныеДанныеДокумента.Вставить("СуммаДокумента",  лСуммаЭлектронногоДокумента);
					лОсновныеДанныеДокумента.Вставить("СуммаБезНДС",  лСуммаБезНДСЭлектронногоДокумента);
					лОсновныеДанныеДокумента.Вставить("СуммаНДС",  лСуммаНДСЭлектронногоДокумента);
					//лОсновныеДанныеДокумента.Вставить("ПоследняяОперация", лДатаЭлектронногоДокумента);

					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Получено документ'; uk = 'Отримано документ'") + " """ + лВидЭлектронногоДокумента.Наименование + """ №" + Строка(лНомерЭлектронногоДокумента) + " " + НСтр("ru = 'от'; uk = 'від'") + " " + Формат(лДатаЭлектронногоДокумента, "ДФ=dd.MM.yyyy"), , Ложь);
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'ИНН Продавца'; uk = 'ІПН Продавця'") + ": """ + лИННПродавца + ?(ЗначениеЗаполнено(лКодФилиалаПродавца), " (" + лКодФилиалаПродавца + ")", "") + """", , Ложь);
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'ИНН Покупателя'; uk = 'ІПН Покупця'") + ": """ + лИННПокупателя + ?(ЗначениеЗаполнено(ФилиалПолучателя), " (" + ФилиалПолучателя + ")", "") + """", , Ложь);
					
					ДанныеПоОрганизаци = скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеПоОгранизации(ОрганизацияПолучатель.Организация1С);
					Если (лИННПродавца <> ДанныеПоОрганизаци.ИНН) и (лИННПокупателя <> ДанныеПоОрганизаци.ИНН) Тогда
						ОтклонитьНалоговыйДокументПоНеСоответствиюИНН = Истина;
						ОтклонитьНалоговыйДокументПоНеСоответствиюИНН_Текст = "Помилка! ІПН Підприємства (" + ДанныеПоОрганизаци.ИНН + ") не співпадає ні з ІПН Продавця (" + лИННПродавца + "), ні з ІПН Покупця (" + лИННПокупателя + ")";
					КонецЕсли;
				ИначеЕсли лВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
					лНомерЭлектронногоДокумента = "";
					лНомерДокумента = "";
					лДатаЭлектронногоДокумента = "";
					лДатаДокумента = "";
					лЕДРПОУПродавца = "";
					лИННПродавца = "";
					лКодФилиалаПродавца = "";
					лНаименованиеПродавца = "";
					лЕДРПОУПокупателя = "";
					лИННПокупателя = "";
					лКодФилиалаПокупателя = "";
					лНаименованиеПокупателя = "";
					лРегистрируетсяВЕРННПокупателем = Ложь;
					лСуммаЭлектронногоДокумента = 0;
					лСуммаБезНДСЭлектронногоДокумента = 0;
					лСуммаНДСЭлектронногоДокумента = 0;
						
					лИмяФайлаДФС = ПолучитьИмяФайлаНалоговогоДокументаПоРеквизитамШапки(лРеквизитыШапкиДокумента);
					ПолучитьРеквизитыПриложения2ИзРеквизитовШапкиЭлектронногоДокумента(лРеквизитыШапкиДокумента, лНомерЭлектронногоДокумента, лНомерДокумента,
						лДатаЭлектронногоДокумента, лДатаДокумента,
						лЕДРПОУПродавца, лИННПродавца, лКодФилиалаПродавца, лНаименованиеПродавца, лЕДРПОУПокупателя, лИННПокупателя, лКодФилиалаПокупателя, лНаименованиеПокупателя, лРегистрируетсяВЕРННПокупателем,
						лСуммаЭлектронногоДокумента, лСуммаБезНДСЭлектронногоДокумента, лСуммаНДСЭлектронногоДокумента);
					
					лОсновныеДанныеДокумента.Вставить("Номер", лНомерЭлектронногоДокумента);
					лОсновныеДанныеДокумента.Вставить("НомерДокумента", лНомерДокумента);
					лОсновныеДанныеДокумента.Вставить("Дата",  лДатаЭлектронногоДокумента);
					лОсновныеДанныеДокумента.Вставить("ДатаДокумента",  лДатаДокумента);
					лОсновныеДанныеДокумента.Вставить("ИмяФайлаДФС",  лИмяФайлаДФС);
					лОсновныеДанныеДокумента.Вставить("ИННПродавца",  лИННПродавца);
					лОсновныеДанныеДокумента.Вставить("КодФилиалаПродавца",  лКодФилиалаПродавца);
					лОсновныеДанныеДокумента.Вставить("ИННПокупателя",  лИННПокупателя);
					лОсновныеДанныеДокумента.Вставить("КодФилиалаПокупателя",  лКодФилиалаПокупателя);
					лОсновныеДанныеДокумента.Вставить("РегистрируетсяВЕРННПокупателем",  лРегистрируетсяВЕРННПокупателем);
					лОсновныеДанныеДокумента.Вставить("СуммаДокумента",  лСуммаЭлектронногоДокумента);
					лОсновныеДанныеДокумента.Вставить("СуммаБезНДС",  лСуммаБезНДСЭлектронногоДокумента);
					лОсновныеДанныеДокумента.Вставить("СуммаНДС",  лСуммаНДСЭлектронногоДокумента);
					//лОсновныеДанныеДокумента.Вставить("ПоследняяОперация", лДатаЭлектронногоДокумента);
					
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Получено документ'; uk = 'Отримано документ'") + " """ + лВидЭлектронногоДокумента.Наименование + """ №" + Строка(лНомерЭлектронногоДокумента) + " " + НСтр("ru = 'от'; uk = 'від'") + " " + Формат(лДатаЭлектронногоДокумента, "ДФ=dd.MM.yyyy"), , Ложь);
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'ИНН Продавца'; uk = 'ІПН Продавця'") + ": """ + лИННПродавца + ?(ЗначениеЗаполнено(лКодФилиалаПродавца), " (" + лКодФилиалаПродавца + ")", "") + """", , Ложь);
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'ИНН Покупателя'; uk = 'ІПН Покупця'") + ": """ + лИННПокупателя + ?(ЗначениеЗаполнено(лКодФилиалаПокупателя), " (" + лКодФилиалаПокупателя + ")", "") + """", , Ложь);
					
					ДанныеПоОрганизаци = скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеПоОгранизации(ОрганизацияПолучатель.Организация1С);
					Если (лИННПродавца <> ДанныеПоОрганизаци.ИНН) и (лИННПокупателя <> ДанныеПоОрганизаци.ИНН) Тогда
						ОтклонитьНалоговыйДокументПоНеСоответствиюИНН = Истина;
						ОтклонитьНалоговыйДокументПоНеСоответствиюИНН_Текст = "Помилка! ІПН Підприємства (" + ДанныеПоОрганизаци.ИНН + ") не співпадає ні з ІПН Продавця (" + лИННПродавца + "), ні з ІПН Покупця (" + лИННПокупателя + ")";
					КонецЕсли;
				Иначе
					Возврат Ложь;
				КонецЕсли;
				
				лДанныеЗаполненияЭлектронногоДокумента.Вставить("ОсновныеДанные", лОсновныеДанныеДокумента);
				
				лРезультатПоискаЭлектронногоДокументаВБазе = Неопределено;
				Если лИмяФайлаДФС <> "" Тогда
					лРезультатПоискаЭлектронногоДокументаВБазе = ПроверитьНаличиеЭлектронногоДокументаВБазеПоИмениФайлаДФС(лИмяФайлаДФС, ОрганизацияПолучатель);
				КонецЕсли;
				
				Если лРезультатПоискаЭлектронногоДокументаВБазе = Неопределено Тогда
					лМассивПодписейКонтрагента = ПолучитьМассивПодписейКонтрагентаИзПодписанногоЭлектронногоДокумента(СодержимоеЭлектронногоДокументаGovBody, ЖурналОперации);
					лМассивГрафическихИзображенийПодписей = ДанныеДокумента.Получить("SignImages");
					Если лМассивГрафическихИзображенийПодписей = Неопределено Тогда
						лМассивГрафическихИзображенийПодписей = Новый Массив;
					КонецЕсли;
					
					ИнформацияОПолученомДокументе = НСтр("ru = 'Отправитель: '; uk = 'Відправник: '") + ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ФилиалКонтрагента), "(" + ФилиалКонтрагента + ")", "");
					ИнформацияОПолученомДокументе = ИнформацияОПолученомДокументе + "
					|"
					+ НСтр("ru = 'Получатель: '; uk = 'Одержувач: '") + ЕДРПОУПолучателя + ?(ЗначениеЗаполнено(ФилиалПолучателя), "(" + ФилиалПолучателя + ")", "");
					ИнформацияОПолученомДокументе = ИнформацияОПолученомДокументе + "
					|
					|"
					+ НСтр("ru = 'Имя файла: '; uk = 'Ім''я файлу: '") + ИмяФайла + "
					|
					|Текст:
					|"
					+ НСтр("ru = 'ЕГРПОУ: '; uk = ' ЄДРПОУ: '") + ЕДРПОУКонтрагента;
					Если лРезультатРазборкиТелаДокументаВСтруктуруСДанными.НаименованиеКонтрагента <> "" Тогда
						ИнформацияОПолученомДокументе = ИнформацияОПолученомДокументе + "
						|"
						+ НСтр("ru = 'НАЗВАНИЕ: '; uk = 'НАЗВА:  '") + лРезультатРазборкиТелаДокументаВСтруктуруСДанными.НаименованиеКонтрагента;
					КонецЕсли;
					ИнформацияОПолученомДокументе = ИнформацияОПолученомДокументе + "
					|ДАТА: " + Формат(лОсновныеДанныеДокумента.ДатаДокумента, "ДФ=dd.MM.yyyy") + "
					|НОМЕР ДОКУМЕНТА: " + лОсновныеДанныеДокумента.НомерДокумента;
					
					лЭлектронныйДокументОбъект = Документы.скEDI_ЭлектронныйДокумент.СоздатьДокумент();
					лЭлектронныйДокументОбъект.Заполнить(лДанныеЗаполненияЭлектронногоДокумента);
					
					Документ1С = Неопределено;
					//Если скEDI_СозданиеДокументовСервер.ЗагрузитьДокумент1С(Документ1С, ОрганизацияПолучатель, лВидЭлектронногоДокумента, Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий, лЭлектронныйДокументОбъект,
					//	лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ЕДРПОУВладельцаШаблона, лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ИмяШаблона, лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ВерсияШаблона, 
					//	лРезультатРазборкиТелаДокументаВСтруктуруСДанными.СоответствиеСДанными, , Истина, Истина) Тогда
					//	
					//	лЭлектронныйДокументОбъект.Документ1С = Документ1С;								
					//КонецЕсли;
					Документ1СБылСоздан = Ложь;
					Если скEDI_НастройкиПодКонфигурациюНалоговыеДокументы.ЗагрузитьНалоговыйДокумент1С(Документ1С, ОрганизацияПолучатель, лВидЭлектронногоДокумента, лВидЭлектронногоДокумента.ТипДокумента, Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий, лЭлектронныйДокументОбъект,
						лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ИмяШаблона, 
						лРезультатРазборкиТелаДокументаВСтруктуруСДанными.СоответствиеСДанными, "", Документ1СБылСоздан, Истина, Истина) Тогда
						
						лЭлектронныйДокументОбъект.Документ1С = Документ1С;								
					КонецЕсли;
					
					ЗаписатьЭлектронныйДокументСПредварительнымПоискомСвязаных(лЭлектронныйДокументОбъект, лВидЭлектронногоДокумента, ОрганизацияПолучатель);
					ЭлектронныйДокументСсылка = лЭлектронныйДокументОбъект.Ссылка;
					
					скEDI_ВнешниеХранилища.СохранитьСодержимоеЭлектронногоДокумента(ЭлектронныйДокументСсылка, 1,
						СодержимоеЭлектронногоДокументаGovBody,
						"",
						"",
						"",
						"",
						"",
						"",
						"",
						Неопределено,
						ДатаСобытия,
						ИмяФайла,
						DocVer,
						"",
						Ложь,
						Истина,
						Перечисления.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО,
						Ложь
					);
					
					ОбработкаПослеПолученияМенеджерЗаписи = РегистрыСведений.скEDI_ОбработкаПослеПолучения.СоздатьМенеджерЗаписи();
					ОбработкаПослеПолученияМенеджерЗаписи.ЭлектронныйДокумент = ЭлектронныйДокументСсылка;
					ОбработкаПослеПолученияМенеджерЗаписи.ЕДРПОУ = ОрганизацияПолучатель.Код;
					ОбработкаПослеПолученияМенеджерЗаписи.Дата = ДатаСобытия;
					ОбработкаПослеПолученияМенеджерЗаписи.Действие = "ЗаполнитьПодписантовИСоздатьСобытиеНД";
					ОбработкаПослеПолученияМенеджерЗаписи.ДатаСобытия = ДатаСобытия;
					ОбработкаПослеПолученияМенеджерЗаписи.Событие = Перечисления.скEDI_СобытияЭлектронныхДокументов.Получение;
					ОбработкаПослеПолученияМенеджерЗаписи.ТелоДокумента = СодержимоеЭлектронногоДокументаGovBody;
					ОбработкаПослеПолученияМенеджерЗаписи.ИнформацияОДокументе = ИнформацияОПолученомДокументе;
					ОбработкаПослеПолученияМенеджерЗаписи.Записать(Истина);
					
					ЗаписатьФаксимилеЭлектронныхДокументов(ЭлектронныйДокументСсылка, лМассивГрафическихИзображенийПодписей);
				Иначе
					//лМассивПодписейКонтрагента = ПолучитьМассивПодписейКонтрагентаИзПодписанногоЭлектронногоДокумента(СодержимоеЭлектронногоДокументаGovBody, ЖурналОперации);
					//лМассивГрафическихИзображенийПодписей = ДанныеДокумента.Получить("SignImages");
					//Если лМассивГрафическихИзображенийПодписей = Неопределено Тогда
					//	лМассивГрафическихИзображенийПодписей = Новый Массив;
					//КонецЕсли;
					
					ИнформацияОПолученомДокументе = НСтр("ru = 'Получена копия документа '; uk = 'Отримано копію документа '")
					+ ?(лСостояниеЭлектронногоДокумента = Неопределено, "", НСтр("ru = ' c квитанцией от ГНС'; uk = ' з квитанцією від ДПС'"));
					ИнформацияОПолученомДокументе = ИнформацияОПолученомДокументе + "
					|"
					+ НСтр("ru = 'Отправитель: '; uk = 'Відправник: '") + ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ФилиалКонтрагента), "(" + ФилиалКонтрагента + ")", "");
					ИнформацияОПолученомДокументе = ИнформацияОПолученомДокументе + "
					|"
					+ НСтр("ru = 'Получатель: '; uk = 'Одержувач: '") + ЕДРПОУПолучателя + ?(ЗначениеЗаполнено(ФилиалПолучателя), "(" + ФилиалПолучателя + ")", "");
					ИнформацияОПолученомДокументе = ИнформацияОПолученомДокументе + "
					|
					|"
					+ НСтр("ru = 'Имя файла: '; uk = 'Ім''я файлу: '") + ИмяФайла + "
					|
					|Текст:
					|"
					+ НСтр("ru = 'ЕГРПОУ: '; uk = 'ЄДРПОУ: '") + ЕДРПОУКонтрагента;
					Если лРезультатРазборкиТелаДокументаВСтруктуруСДанными.НаименованиеКонтрагента <> "" Тогда
						ИнформацияОПолученомДокументе = ИнформацияОПолученомДокументе + "
						|"
						+ НСтр("ru = 'НАЗВАНИЕ: '; uk = 'НАЗВА: '") + лРезультатРазборкиТелаДокументаВСтруктуруСДанными.НаименованиеКонтрагента;
					КонецЕсли;
					ИнформацияОПолученомДокументе = ИнформацияОПолученомДокументе + "
					|ДАТА: " + Формат(лОсновныеДанныеДокумента.ДатаДокумента, "ДФ=dd.MM.yyyy") + "
					|НОМЕР ДОКУМЕНТА: " + лОсновныеДанныеДокумента.НомерДокумента;
					
					ЭлектронныйДокументСсылка = лРезультатПоискаЭлектронногоДокументаВБазе;
					лЭлектронныйДокументОбъект = ЭлектронныйДокументСсылка.ПолучитьОбъект();
					//лЭлектронныйДокументОбъект.Заполнить(лДанныеЗаполненияЭлектронногоДокумента);
					лЭлектронныйДокументОбъект.ИмяФайла = ИмяФайла;
					// Отменить готовящиеся квитанции и очистить подписантов
					// так как имеем дело с новым входящим документом
					ЗапросПоКвитанциям = Новый Запрос;
					ЗапросПоКвитанциям.Текст = "ВЫБРАТЬ
					                           |	скEDI_Квитанция.Ссылка
					                           |ИЗ
					                           |	Документ.скEDI_Квитанция КАК скEDI_Квитанция
					                           |ГДЕ
					                           |	скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
					                           |	И скEDI_Квитанция.ВхИсх = ЗНАЧЕНИЕ(Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий)
					                           |	И скEDI_Квитанция.Готовится";
					ЗапросПоКвитанциям.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокументСсылка);
					ВыборкаРезультатаЗапросаПоКвитанциям = ЗапросПоКвитанциям.Выполнить().Выбрать();
					Если ВыборкаРезультатаЗапросаПоКвитанциям.Следующий() Тогда
						КвитанцияОбъект = ВыборкаРезультатаЗапросаПоКвитанциям.Ссылка.ПолучитьОбъект();
						КвитанцияОбъект.ТекстКвитанции = НСтр("ru = '<Отменено>'; uk = '<Відмінено>'") + Символы.ПС + КвитанцияОбъект.ТекстКвитанции;
						КвитанцияОбъект.Готовится = Ложь;
						КвитанцияОбъект.ОбменДанными.Загрузка = Истина;
						КвитанцияОбъект.Записать();
					КонецЕсли;
					лЭлектронныйДокументОбъект.Подписи.Очистить();
					//...
					Если лСостояниеЭлектронногоДокумента <> Неопределено Тогда
						лЭлектронныйДокументОбъект.Состояние = лСостояниеЭлектронногоДокумента;
						лЭлектронныйДокументОбъект.ПоследняяОперация = ДатаСобытия;
					КонецЕсли;
					
					Если лСостояниеЭлектронногоДокументаРегистрацияВДФС <> Неопределено Тогда
						Если лСостояниеЭлектронногоДокументаРегистрацияВДФС = Перечисления.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоПодтверждениеОтДФС Тогда
							лЭлектронныйДокументОбъект.СостояниеРегистрацияВДФС = лСостояниеЭлектронногоДокументаРегистрацияВДФС;
						ИначеЕсли лЭлектронныйДокументОбъект.СостояниеРегистрацияВДФС <> Перечисления.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоПодтверждениеОтДФС
							и лЭлектронныйДокументОбъект.СостояниеРегистрацияВДФС <> Перечисления.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоОтклонениеОтДФС Тогда
							лЭлектронныйДокументОбъект.СостояниеРегистрацияВДФС = лСостояниеЭлектронногоДокументаРегистрацияВДФС;
						КонецЕсли;
					КонецЕсли;
					Если лРегистрационныйНомерДФС <> Неопределено Тогда
						лЭлектронныйДокументОбъект.РегистрационныйНомерДФС = лРегистрационныйНомерДФС;
					КонецЕсли;
					Если лЗарегистрированВДФС <> Неопределено Тогда
						лЭлектронныйДокументОбъект.ЗарегистрированВДФС = лЗарегистрированВДФС;
					КонецЕсли;
					Если лДатаРегистрацииВДФС <> Неопределено Тогда
						лЭлектронныйДокументОбъект.ДатаРегистрацииВДФС = лДатаРегистрацииВДФС;
					КонецЕсли;
					Если лПричинаОтклоненияДФС <> "" Тогда
						лЭлектронныйДокументОбъект.ПричинаОтклоненияДФС = лПричинаОтклоненияДФС;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(лЭлектронныйДокументОбъект.Документ1С) Тогда
						Если лВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная")
						или	лВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
							скEDI_НастройкиПодКонфигурациюНалоговыеДокументы.УстановитьОтметкуОРегистрацииНалоговогоДокумента(лЭлектронныйДокументОбъект, лЭлектронныйДокументОбъект.Документ1С, СодержимоеЭлектронногоДокументаGovBody);
						КонецЕсли;
					Иначе
						Документ1С = Неопределено;
						Документ1СБылСоздан = Ложь;
						Если скEDI_НастройкиПодКонфигурациюНалоговыеДокументы.ЗагрузитьНалоговыйДокумент1С(Документ1С, ОрганизацияПолучатель, лВидЭлектронногоДокумента, лВидЭлектронногоДокумента.ТипДокумента, Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий, лЭлектронныйДокументОбъект,
							лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ИмяШаблона, 
							лРезультатРазборкиТелаДокументаВСтруктуруСДанными.СоответствиеСДанными, "", Документ1СБылСоздан, Истина, Истина, СодержимоеЭлектронногоДокументаGovBody) Тогда
							
							лЭлектронныйДокументОбъект.Документ1С = Документ1С;								
							
							Если не Документ1СБылСоздан Тогда
								Если лВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная")
								или	лВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
									скEDI_НастройкиПодКонфигурациюНалоговыеДокументы.УстановитьОтметкуОРегистрацииНалоговогоДокумента(лЭлектронныйДокументОбъект, Документ1С, СодержимоеЭлектронногоДокументаGovBody);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					ЗаписатьЭлектронныйДокументСПредварительнымПоискомСвязаных(лЭлектронныйДокументОбъект, лВидЭлектронногоДокумента, ОрганизацияПолучатель);
					ЭлектронныйДокументСсылка = лЭлектронныйДокументОбъект.Ссылка;
					
					скEDI_ВнешниеХранилища.СохранитьСодержимоеЭлектронногоДокумента(ЭлектронныйДокументСсылка,
						ПолучитьСледующийНомерВерсииСодержанияЭлектронногоДокумента(ЭлектронныйДокументСсылка),
						СодержимоеЭлектронногоДокументаGovBody,
						"",
						"",
						"",
						"",
						"",
						"",
						"",
						Неопределено,
						ДатаСобытия,
						ИмяФайла,        
						DocVer,
						"",        
						Ложь,
						Истина,
						Перечисления.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО,
						Ложь
					);
					
					ЗафиксироватьСобытиеЭлектронногоДокумента(ЭлектронныйДокументСсылка, Перечисления.скEDI_СобытияЭлектронныхДокументов.Получение, ИнформацияОПолученомДокументе, ДатаСобытия, DocVer, ИмяФайла, ИмяФайлаКвитанции);
				КонецЕсли;
				
				Для Каждого СтрокаТаблицыКвитанций Из ТаблицаКвитанций Цикл
					лДанныеЗаполненияКвитанции = Новый Структура;
					
					лДанныеЗаполненияКвитанции.Вставить("ВидКвитанции",        СтрокаТаблицыКвитанций.ВидКвитанции);
					лДанныеЗаполненияКвитанции.Вставить("Организация",         ОрганизацияПолучатель);
					лДанныеЗаполненияКвитанции.Вставить("ЭлектронныйДокумент", ЭлектронныйДокументСсылка);
					//лДанныеЗаполненияКвитанции.Вставить("ЕДРПОУКонтрагента",   ДанныеКвитанции.Edrpou);
					//лДанныеЗаполненияКвитанции.Вставить("ФилиалКонтрагента",   ДанныеКвитанции.Dept);
					лДанныеЗаполненияКвитанции.Вставить("ТипКвитанцииДФС",     СтрокаТаблицыКвитанций.ТипКвитанцииДФС);
					лДанныеЗаполненияКвитанции.Вставить("ТекстКвитанции",      СтрокаТаблицыКвитанций.ТекстКвитанции);
					лДанныеЗаполненияКвитанции.Вставить("ТелоКвитанции",       СтрокаТаблицыКвитанций.ТелоКвитанции);
					лДанныеЗаполненияКвитанции.Вставить("ВхИсх",               СтрокаТаблицыКвитанций.ВхИсх);
					//лДанныеЗаполненияКвитанции.Вставить("НомерКвитанции",      ДанныеКвитанции.KvtNum);
					//лДанныеЗаполненияКвитанции.Вставить("ФинальнаяКвитанция",  ДанныеКвитанции.FinKvt = Истина);
					//лДанныеЗаполненияКвитанции.Вставить("GateId",              ДанныеКвитанции.GateId);
					
					лКвитанцияОбъект = Документы.скEDI_Квитанция.СоздатьДокумент();
					лКвитанцияОбъект.Заполнить(лДанныеЗаполненияКвитанции);
					лКвитанцияОбъект.Дата = СтрокаТаблицыКвитанций.ДатаВремяКвитанции;
					лКвитанцияОбъект.ОбменДанными.Загрузка = Истина;
					лКвитанцияОбъект.Записать();
				КонецЦикла;
				
				Если ОтклонитьНалоговыйДокументПоНеСоответствиюИНН Тогда
					аоОперация = "ОтклонениеАвтоматически";
					аоЭлектронныйДокумент = ЭлектронныйДокументСсылка;
					аоДополнительно = ОтклонитьНалоговыйДокументПоНеСоответствиюИНН_Текст;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СодержимоеЭлектронногоДокументаMedocText <> Неопределено Тогда
			ЭлектронныйДокументНайденыйПоDocOutId = Неопределено;
			СодержимоеЭлектронногоДокументаMedocBody = ДанныеДокумента.Получить("MedocBody");
			лКонтейнерДанныхЭлектронногоДокумента = ДанныеДокумента.Получить("MedocDoc");
			лРезультатРазборкиТелаДокументаВСтруктуруСДанными = Неопределено;
			Если лКонтейнерДанныхЭлектронногоДокумента = Неопределено Тогда
				лРезультатРазборкиТелаДокументаВСтруктуруСДанными = РазобратьXMLПредставлениеЭлектронногоДокументаВСоответствиеСДанными(СодержимоеЭлектронногоДокументаMedocText, ЖурналОперации);
			Иначе
				лКонтейнерДанныхЭлектронногоДокументаDoc = лКонтейнерДанныхЭлектронногоДокумента.Получить("Doc");
				Если лКонтейнерДанныхЭлектронногоДокументаDoc = Неопределено Тогда
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не удалось прочитать данные электронного документа.'; uk = 'Не вдалося прочитати дані електронного документа.'"));
				Иначе
					лРезультатРазборкиТелаДокументаВСтруктуруСДанными = ПолучитьСтруктуруДанныхПоЭлектронномуДокументуИзСоответствияDoc(лКонтейнерДанныхЭлектронногоДокументаDoc);
				КонецЕсли;
			КонецЕсли;
			
			Если лРезультатРазборкиТелаДокументаВСтруктуруСДанными = Неопределено Тогда
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не удалось прочитать данные электронного документа'; uk = 'Не вдалося прочитати дані електронного документа'") + " " + ИмяФайла + ".");
				лНетОшибокПриОбработкеВходящегоДокумента = Ложь;
				Возврат лНетОшибокПриОбработкеВходящегоДокумента;
			КонецЕсли;
			
			ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий;
			ЭтоМногостороннийДокумент = Ложь;
			НомерПозицииМногостороннегоДокумента = -1;
			Документ1С = Неопределено;
			
			ЗначениеПоляCOMMENT = "";
			
			Если ЗначениеЗаполнено(лРезультатРазборкиТелаДокументаВСтруктуруСДанными.DocId) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	скEDI_ЭлектронныйДокумент.Ссылка КАК Ссылка,
				               |	скEDI_ЭлектронныйДокумент.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
				               |	скEDI_ЭлектронныйДокумент.Документ1С КАК Документ1С,
				               |	скEDI_ЭлектронныйДокумент.Состояние КАК Состояние,
				               |	скEDI_ЭлектронныйДокумент.ВхИсх КАК ВхИсх,
				               |	ВЫБОР
				               |		КОГДА скEDI_ЭлектронныйДокумент.ОсновнойЭлектронныйДокумент = ЗНАЧЕНИЕ(Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка)
				               |			ТОГДА ИСТИНА
				               |		ИНАЧЕ ЛОЖЬ
				               |	КОНЕЦ КАК Основной
				               |ИЗ
				               |	Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
				               |ГДЕ
				               |	скEDI_ЭлектронныйДокумент.Организация = &Организация
				               |	И скEDI_ЭлектронныйДокумент.ИдентификаторДокументаВБазеДанныхКонтрагента = &ИдентификаторДокумента
				               |	И скEDI_ЭлектронныйДокумент.ГдеСоздан = ЗНАЧЕНИЕ(Перечисление.скEDI_ГдеСоздан.ПолученОтКонтрагента)
				               |	И скEDI_ЭлектронныйДокумент.ЕДРПОУКонтрагента = &ЕДРПОУКонтрагента
				               |	И скEDI_ЭлектронныйДокумент.ФилиалКонтрагента = &ФилиалКонтрагента
				               |	И скEDI_ЭлектронныйДокумент.ЕДРПОУВладельцаШаблона = &ЕДРПОУВладельцаШаблона
				               |	И скEDI_ЭлектронныйДокумент.ИмяШаблона = &ИмяШаблона
				               |
				               |УПОРЯДОЧИТЬ ПО
				               |	Основной УБЫВ";//	И скEDI_ЭлектронныйДокумент.ВерсияШаблона = &ВерсияШаблона";
				
				Запрос.УстановитьПараметр("ИдентификаторДокумента", Строка(лРезультатРазборкиТелаДокументаВСтруктуруСДанными.DocId));
				Запрос.УстановитьПараметр("Организация", ОрганизацияПолучатель);
				Запрос.УстановитьПараметр("ЕДРПОУКонтрагента", лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ЕДРПОУОтправителя);
				Запрос.УстановитьПараметр("ФилиалКонтрагента", Строка(лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ФилиалОтправителя));
				Запрос.УстановитьПараметр("ЕДРПОУВладельцаШаблона", лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ЕДРПОУВладельцаШаблона);
				Запрос.УстановитьПараметр("ИмяШаблона", лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ИмяШаблона);
				//Запрос.УстановитьПараметр("ВерсияШаблона", лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ВерсияШаблона);

				ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
				Если ВыборкаРезультатаЗапроса.Следующий() Тогда
					ЭлектронныйДокументНайденыйПоDocOutId = ВыборкаРезультатаЗапроса.Ссылка;
					лВидЭлектронногоДокумента = ВыборкаРезультатаЗапроса.ВидЭлектронногоДокумента;
					Документ1С = ВыборкаРезультатаЗапроса.Документ1С;
					//ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий;
					ВхИсх = ВыборкаРезультатаЗапроса.ВхИсх;
					ГдеСоздан = Перечисления.скEDI_ГдеСоздан.ПолученОтКонтрагента;
					Состояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.Получен;
					
					ИнформацияОПолученомДокументе = "";//ЗначениеПоляCOMMENT;
					
					Если ВыборкаРезультатаЗапроса.Состояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ТребуетПовторногоУтверждения Тогда
						ЗафиксироватьСобытиеЭлектронногоДокумента(ВыборкаРезультатаЗапроса.Ссылка, Перечисления.скEDI_СобытияЭлектронныхДокументов.ПолученоНовуюРедакциюДокумента, ИнформацияОПолученомДокументе);
					Иначе
						лЭлектронныйДокументОбъект = ВыборкаРезультатаЗапроса.Ссылка.ПолучитьОбъект();
						лЭлектронныйДокументОбъект.Состояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ОтозванОтправителем;
						
						ПричинаОтклоненияКонтрагентом = лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом;
						Если ЗначениеЗаполнено(ПричинаОтклоненияКонтрагентом) Тогда
							ПричинаОтклоненияКонтрагентом = ПричинаОтклоненияКонтрагентом + "; ";
						КонецЕсли;
						ПричинаОтклоненияКонтрагентом = ПричинаОтклоненияКонтрагентом + НСтр("ru = 'Получено копию Электронного документа'; uk = 'Отримано копію Електронного документа'");
						Если ЗначениеЗаполнено(ИнформацияОПолученомДокументе) Тогда
							ПричинаОтклоненияКонтрагентом = ПричинаОтклоненияКонтрагентом + " " + ИнформацияОПолученомДокументе;
						КонецЕсли;
						лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом = ПричинаОтклоненияКонтрагентом;
						лЭлектронныйДокументОбъект.ПоследняяОперация = ДатаСобытия;
						лЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
						лЭлектронныйДокументОбъект.Записать();
						
						ЗафиксироватьСобытиеЭлектронногоДокумента(ВыборкаРезультатаЗапроса.Ссылка, Перечисления.скEDI_СобытияЭлектронныхДокументов.ОтклоненПолученоВРедакцииКонтрагента, ИнформацияОПолученомДокументе);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ЭлектронныйДокументНайденыйПоDocOutId = Неопределено Тогда
				Если ЗначениеЗаполнено(лРезультатРазборкиТелаДокументаВСтруктуруСДанными.OutId) Тогда
					ЗначениеПоляCOMMENT = лРезультатРазборкиТелаДокументаВСтруктуруСДанными.COMMENT;
					
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					               |	скEDI_ЭлектронныйДокумент.Ссылка КАК Ссылка,
					               |	скEDI_ЭлектронныйДокумент.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
					               |	скEDI_ЭлектронныйДокумент.Документ1С КАК Документ1С,
					               |	скEDI_ЭлектронныйДокумент.Состояние КАК Состояние,
					               |	скEDI_ЭлектронныйДокумент.ВхИсх КАК ВхИсх
					               |ИЗ
					               |	Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
					               |ГДЕ
					               |	скEDI_ЭлектронныйДокумент.Организация = &Организация
					               |	И скEDI_ЭлектронныйДокумент.ИдентификаторДокумента = &ИдентификаторДокумента
					               |	И скEDI_ЭлектронныйДокумент.ГдеСоздан = ЗНАЧЕНИЕ(Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе)";
					
					Запрос.УстановитьПараметр("ИдентификаторДокумента", Строка(лРезультатРазборкиТелаДокументаВСтруктуруСДанными.OutId));
					Запрос.УстановитьПараметр("Организация", ОрганизацияПолучатель);
					
					ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
					Если ВыборкаРезультатаЗапроса.Следующий() Тогда
						ЭлектронныйДокументНайденыйПоDocOutId = ВыборкаРезультатаЗапроса.Ссылка;
						лВидЭлектронногоДокумента = ВыборкаРезультатаЗапроса.ВидЭлектронногоДокумента;
						Документ1С = ВыборкаРезультатаЗапроса.Документ1С;
						//ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий;
						ВхИсх = ВыборкаРезультатаЗапроса.ВхИсх;
						ГдеСоздан = Перечисления.скEDI_ГдеСоздан.ПолученОтКонтрагента;
						Состояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.Получен;
						
						ИнформацияОПолученомДокументе = ЗначениеПоляCOMMENT;
						
						лЭлектронныйДокументОбъект = ВыборкаРезультатаЗапроса.Ссылка.ПолучитьОбъект();
						лЭлектронныйДокументОбъект.Состояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонение;
						
						ПричинаОтклоненияКонтрагентом = лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом;
						Если ЗначениеЗаполнено(ПричинаОтклоненияКонтрагентом) Тогда
							ПричинаОтклоненияКонтрагентом = ПричинаОтклоненияКонтрагентом + "; ";
						КонецЕсли;
						ПричинаОтклоненияКонтрагентом = ПричинаОтклоненияКонтрагентом + НСтр("ru = 'Получено документ в редакции Контрагента.'; uk = 'Отримано документ в редакції Контрагента.'");
						Если ЗначениеЗаполнено(ИнформацияОПолученомДокументе) Тогда
							ПричинаОтклоненияКонтрагентом = ПричинаОтклоненияКонтрагентом + " " + ИнформацияОПолученомДокументе;
						КонецЕсли;
						лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом = ПричинаОтклоненияКонтрагентом;
						лЭлектронныйДокументОбъект.ПоследняяОперация = ДатаСобытия;
						лЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
						лЭлектронныйДокументОбъект.Записать();
						
						ЗафиксироватьСобытиеЭлектронногоДокумента(ВыборкаРезультатаЗапроса.Ссылка, Перечисления.скEDI_СобытияЭлектронныхДокументов.ОтклоненПолученоВРедакцииКонтрагента, ИнформацияОПолученомДокументе);
					//Иначе
					//	лВидЭлектронногоДокумента = ОпределитьВидЭлектронногоДокументаПоИмениШаблона(лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ЕДРПОУВладельцаШаблона, лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ИмяШаблона, лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ВерсияШаблона, лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ТипДокументаMEDoc, ОрганизацияПолучатель);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			IsMultisided = ДанныеДокумента.Получить("IsMultisided") = Истина;
			Если IsMultisided Тогда
				ЭтоМногостороннийДокумент = Истина;
			Иначе
				ЭтоМногостороннийДокумент = Ложь;
			КонецЕсли;
			
			Если IsMultisided Тогда
				лВидЭлектронногоДокумента = ОпределитьВидЭлектронногоДокументаПоИмениШаблона(лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ЕДРПОУВладельцаШаблона, лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ИмяШаблона, лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ВерсияШаблона, лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ТипДокументаMEDoc, ОрганизацияПолучатель);
				RoutePosition = ДанныеДокумента.Получить("RoutePosition");
				
				Если ТипЗнч(RoutePosition) = Тип("Число") Тогда
					Маршрут = лРезультатРазборкиТелаДокументаВСтруктуруСДанными.Маршрут;
					Если ТипЗнч(Маршрут) = Тип("Массив") Тогда
						ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий;
						ЕДРПОУОтправителя = ДанныеДокумента.Получить("Edrpou");
						ФилиалОтправителя = ДанныеДокумента.Получить("Dept");
						ЕДРПОУПолучателя = ДанныеДокумента.Получить("RcvEdrpou");
						ФилиалПолучателя = ДанныеДокумента.Получить("RcvDept");
						
						ГдеСоздан = Перечисления.скEDI_ГдеСоздан.ПолученОтКонтрагента;
						ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий;
						//КвитанцияВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий;
						Состояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.Получен;
						Если RoutePosition = 0 Тогда
							Если Маршрут.Количество() > 0 Тогда
								ТекЭлементМаршрута = Маршрут[0];
								Если ТипЗнч(ТекЭлементМаршрута) = Тип("Структура") Тогда
									Если ТекЭлементМаршрута.ЕДРПОУКонтрагента = ОрганизацияПолучатель.Код Тогда
										ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий;
										Состояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.Отправлен;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						//Если ЕДРПОУОтправителя = ОрганизацияПолучатель.Код и ФилиалОтправителя = ОрганизацияПолучатель.Филиал Тогда
						//	КвитанцияВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий;
						//КонецЕсли;
						
						//ТекRoutePosition = RoutePosition;
						//Если ТекRoutePosition < Маршрут.Количество() Тогда
						//	ТекЭлементМаршрута = Маршрут[ТекRoutePosition];
						//	Если ТипЗнч(ТекЭлементМаршрута) = Тип("Структура") Тогда
						//		Если ТекЭлементМаршрута.ЕДРПОУКонтрагента = ЕДРПОУОтправителя Тогда
						//			//
						//		ИначеЕсли ТекЭлементМаршрута.ЕДРПОУКонтрагента = ЕДРПОУПолучателя Тогда
						//			
						//		КонецЕсли;
						//	КонецЕсли;
						//КонецЕсли;
						//
						//Тек1RoutePosition = RoutePosition + 1;
						//Если Тек1RoutePosition < Маршрут.Количество() Тогда
						//	Тек1ЭлементМаршрута = Маршрут[Тек1RoutePosition];
						//	Если ТипЗнч(Тек1ЭлементМаршрута) = Тип("Структура") Тогда
						//		Если Тек1ЭлементМаршрута.ЕДРПОУКонтрагента = ЕДРПОУОтправителя Тогда
						//			
						//		ИначеЕсли Тек1ЭлементМаршрута.ЕДРПОУКонтрагента = ЕДРПОУПолучателя Тогда
						//			//
						//		КонецЕсли;
						//	КонецЕсли;
						//КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ЭлектронныйДокументНайденыйПоDocOutId = Неопределено Тогда
					лВидЭлектронногоДокумента = ОпределитьВидЭлектронногоДокументаПоИмениШаблона(лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ЕДРПОУВладельцаШаблона, лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ИмяШаблона, лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ВерсияШаблона, лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ТипДокументаMEDoc, ОрганизацияПолучатель);
					
					Если лРезультатРазборкиТелаДокументаВСтруктуруСДанными.Таблица0ПерваяСтрока = Неопределено Тогда
						// нет возможности проверить
						ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий;
						ГдеСоздан = Перечисления.скEDI_ГдеСоздан.ПолученОтКонтрагента;
						Состояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.Получен;
						//ЕДРПОУКонтрагента //не меняем
						//ФилиалКонтрагента //не меняем
					Иначе
						Если лРезультатРазборкиТелаДокументаВСтруктуруСДанными.КонтрагентЕДРПОУ = ОрганизацияПолучатель.Код
							и (не лРезультатРазборкиТелаДокументаВСтруктуруСДанными.КонтрагентКодФилиалаУказан или лРезультатРазборкиТелаДокументаВСтруктуруСДанными.КонтрагентКодФилиала = ОрганизацияПолучатель.Филиал)
							Тогда
							//Входящий
							ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий;
							ГдеСоздан = Перечисления.скEDI_ГдеСоздан.ПолученОтКонтрагента;
							Состояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.Получен;
							//ЕДРПОУКонтрагента //не меняем
							//ФилиалКонтрагента //не меняем
						ИначеЕсли лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ОрганизацияЕДРПОУ = ОрганизацияПолучатель.Код
							и (не лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ОрганизацияКодФилиалаУказан или лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ОрганизацияКодФилиала = ОрганизацияПолучатель.Филиал)
							Тогда
							//Исходящий
							ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий;
							ГдеСоздан = Перечисления.скEDI_ГдеСоздан.ПолученОтКонтрагента; //ВДаннойИнформационнойБазе;
							Состояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.Отправлен;
							
							ЕДРПОУКонтрагента = лРезультатРазборкиТелаДокументаВСтруктуруСДанными.КонтрагентЕДРПОУ;
							ФилиалКонтрагента = лРезультатРазборкиТелаДокументаВСтруктуруСДанными.КонтрагентКодФилиала;
						ИначеЕсли ЭтоМногостороннийДокумент Тогда
							ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий;
							ГдеСоздан = Перечисления.скEDI_ГдеСоздан.ПолученОтКонтрагента;
							Состояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.Получен;
							//Будем считать как Входящий
							//ЕДРПОУКонтрагента //не меняем
							//ФилиалКонтрагента //не меняем
							//лРезультатРазборкиТелаДокументаВСтруктуруСДанными.Маршрут
						Иначе
							ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий;
							ГдеСоздан = Перечисления.скEDI_ГдеСоздан.ПолученОтКонтрагента;
							Состояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.Получен;
							//Будем считать как Входящий
							//ЕДРПОУКонтрагента //не меняем
							//ФилиалКонтрагента //не меняем
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если лВидЭлектронногоДокумента = Неопределено Тогда
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не удалось определить вид полученного электронного документа'; uk = 'Не вдалось визначити вид отриманого електронного документа'"));
				лНетОшибокПриОбработкеВходящегоДокумента = Ложь;
			КонецЕсли;
			
			Если лВидЭлектронногоДокумента.ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента Тогда
				CDOCID = Неопределено;
				Если ТипЗнч(лРезультатРазборкиТелаДокументаВСтруктуруСДанными.Таблица0ПерваяСтрока) = Тип("Соответствие") Тогда
					CDOCID = лРезультатРазборкиТелаДокументаВСтруктуруСДанными.Таблица0ПерваяСтрока.Получить("CDOCID");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(CDOCID) Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					               |	скEDI_ЭлектронныйДокумент.Ссылка КАК Ссылка
					               |ИЗ
					               |	Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
					               |ГДЕ
					               |	скEDI_ЭлектронныйДокумент.Организация = &Организация
					               |	И скEDI_ЭлектронныйДокумент.ИдентификаторДокумента = &ИдентификаторДокумента
					               |	И скEDI_ЭлектронныйДокумент.ГдеСоздан = ЗНАЧЕНИЕ(Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе)
					               |
					               |ОБЪЕДИНИТЬ
					               |
					               |ВЫБРАТЬ
					               |	скEDI_ЭлектронныйДокумент.Ссылка
					               |ИЗ
					               |	Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
					               |ГДЕ
					               |	скEDI_ЭлектронныйДокумент.Организация = &Организация
					               |	И скEDI_ЭлектронныйДокумент.ИдентификаторДокументаВБазеДанныхКонтрагента = &ИдентификаторДокумента
					               |	И скEDI_ЭлектронныйДокумент.ГдеСоздан = ЗНАЧЕНИЕ(Перечисление.скEDI_ГдеСоздан.ПолученОтКонтрагента)";
					
					Запрос.УстановитьПараметр("ИдентификаторДокумента", Строка(CDOCID));
					Запрос.УстановитьПараметр("Организация", ОрганизацияПолучатель);
					
					МассивДанныхПоСвязаннымДокументам = Новый Массив;
					ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
					Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
						ЭлементМассиваПоСвязаннымДокументам = Новый Структура;
						ЭлементМассиваПоСвязаннымДокументам.Вставить("ЭлектронныйДокумент", ВыборкаРезультатаЗапроса.Ссылка);
						ЭлементМассиваПоСвязаннымДокументам.Вставить("ТипСвязи", Перечисления.скEDI_ТипыСвязейЭлектронныхДокументов.АннулированиеУтвержденногоДокумента);
						МассивДанныхПоСвязаннымДокументам.Добавить(ЭлементМассиваПоСвязаннымДокументам);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если лНетОшибокПриОбработкеВходящегоДокумента Тогда
				ОбновитьМаршрут = Ложь;
				ОбновитьМаршрутНомерВМаршруте = -1;
				ОбновитьМаршрутПредыдущиеСостояния = Неопределено;
				ОбновитьМаршрутСостояния = Неопределено;
				
				лДанныеЗаполненияЭлектронногоДокумента = Новый Структура;
				
				лОсновныеДанныеДокумента = Новый Структура;
				лОсновныеДанныеДокумента.Вставить("ВидЭлектронногоДокумента",   лВидЭлектронногоДокумента);
				лОсновныеДанныеДокумента.Вставить("Организация",                ОрганизацияПолучатель);
				лОсновныеДанныеДокумента.Вставить("Состояние",                  Состояние);
				лОсновныеДанныеДокумента.Вставить("ИмяФайла",                   ИмяФайла);
				лОсновныеДанныеДокумента.Вставить("DocVer",                     DocVer);
				лОсновныеДанныеДокумента.Вставить("ЕДРПОУКонтрагента",          ЕДРПОУКонтрагента);
				лОсновныеДанныеДокумента.Вставить("ФилиалКонтрагента",          ФилиалКонтрагента);
				лОсновныеДанныеДокумента.Вставить("РеквизитыЭлектронногоДокумента", лРезультатРазборкиТелаДокументаВСтруктуруСДанными.СоответствиеСДанными);
				лОсновныеДанныеДокумента.Вставить("ЕДРПОУВладельцаШаблона",     лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ЕДРПОУВладельцаШаблона);
				лОсновныеДанныеДокумента.Вставить("ИмяШаблона",                 лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ИмяШаблона);
				лОсновныеДанныеДокумента.Вставить("ВерсияШаблона",              лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ВерсияШаблона);
				
				лОсновныеДанныеДокумента.Вставить("Номер", лРезультатРазборкиТелаДокументаВСтруктуруСДанными.Номер);
				лОсновныеДанныеДокумента.Вставить("НомерДокумента", лРезультатРазборкиТелаДокументаВСтруктуруСДанными.НомерДокумента);
				лОсновныеДанныеДокумента.Вставить("СуммаДокумента", лРезультатРазборкиТелаДокументаВСтруктуруСДанными.СуммаДокумента);
				лОсновныеДанныеДокумента.Вставить("СуммаНДС", лРезультатРазборкиТелаДокументаВСтруктуруСДанными.СуммаНДС);
				лОсновныеДанныеДокумента.Вставить("СуммаБезНДС", лРезультатРазборкиТелаДокументаВСтруктуруСДанными.СуммаБезНДС);
				
				лОсновныеДанныеДокумента.Вставить("Дата",     лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ДатаДокумента);
				лОсновныеДанныеДокумента.Вставить("ДатаДокумента",     лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ДатаДокумента);
				лОсновныеДанныеДокумента.Вставить("ВхИсх", ВхИсх);
				
				лОсновныеДанныеДокумента.Вставить("ДатаСоздания", ДатаСобытия);
				лОсновныеДанныеДокумента.Вставить("ГдеСоздан", ГдеСоздан);
				//лОсновныеДанныеДокумента.Вставить("DOCNAME", лРезультатРазборкиТелаДокументаВСтруктуруСДанными.НаименованиеДокумента);
				лОсновныеДанныеДокумента.Вставить("DocId", лРезультатРазборкиТелаДокументаВСтруктуруСДанными.DocId);
				лОсновныеДанныеДокумента.Вставить("ИдентификаторДокументаВБазеДанныхКонтрагента", лРезультатРазборкиТелаДокументаВСтруктуруСДанными.DocId);
				лОсновныеДанныеДокумента.Вставить("OutId", лРезультатРазборкиТелаДокументаВСтруктуруСДанными.OutId);
				лОсновныеДанныеДокумента.Вставить("NOTATION", лРезультатРазборкиТелаДокументаВСтруктуруСДанными.NOTATION);
				лОсновныеДанныеДокумента.Вставить("AutoEdition", лРезультатРазборкиТелаДокументаВСтруктуруСДанными.AutoEdition);
				лОсновныеДанныеДокумента.Вставить("ForbidEdition", лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ForbidEdition);
				
				IsMultisided = ДанныеДокумента.Получить("IsMultisided");
				//Для полноценного разбора ситуации достаточной информации нет, пока так :(
				Если IsMultisided = Неопределено Тогда
					лОсновныеДанныеДокумента.Вставить("IsMultisided", Ложь);
				Иначе
					лОсновныеДанныеДокумента.Вставить("IsMultisided", IsMultisided);
					Если IsMultisided Тогда
						RoutePosition = ДанныеДокумента.Получить("RoutePosition");
						Если RoutePosition = Неопределено Тогда
							RoutePosition = 0;
						КонецЕсли;	
						лМаршрут = Неопределено;
						Если лРезультатРазборкиТелаДокументаВСтруктуруСДанными.Свойство("Маршрут", лМаршрут) Тогда
							лОсновныеДанныеДокумента.Вставить("Маршрут", лМаршрут);
							ОбновитьМаршрут = Истина;
						КонецЕсли;
						Если КвитанцияВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий Тогда
							Если ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий Тогда
								лОсновныеДанныеДокумента.Вставить("RoutePosition", 0);
								Если RoutePosition >= 1 Тогда
									ОбновитьМаршрутНомерВМаршруте = 0;
									//ОбновитьМаршрутПредыдущиеСостояния = Неопределено;
									ОбновитьМаршрутСостояния = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение;
								КонецЕсли;
							Иначе
								лОсновныеДанныеДокумента.Вставить("RoutePosition", RoutePosition + 1);
								ОбновитьМаршрутПредыдущиеСостояния = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждение;
								ОбновитьМаршрутСостояния = Перечисления.скEDI_СостоянияЭлектронныхДокументов.Получен;
								ОбновитьМаршрутНомерВМаршруте = RoutePosition + 1;
							КонецЕсли;
						ИначеЕсли КвитанцияВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий Тогда
							Если ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий Тогда
								лОсновныеДанныеДокумента.Вставить("RoutePosition", 0);
								Если RoutePosition >= 1 Тогда
									ОбновитьМаршрутНомерВМаршруте = 0;
									//ОбновитьМаршрутПредыдущиеСостояния = Неопределено;
									ОбновитьМаршрутСостояния = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение;
								КонецЕсли;
							Иначе
								лОсновныеДанныеДокумента.Вставить("RoutePosition", RoutePosition);
								ОбновитьМаршрутПредыдущиеСостояния = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждение;
								ОбновитьМаршрутСостояния = Перечисления.скEDI_СостоянияЭлектронныхДокументов.Получен;
								ОбновитьМаршрутНомерВМаршруте = RoutePosition;
							КонецЕсли;
						Иначе
							Если ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий Тогда
								лОсновныеДанныеДокумента.Вставить("RoutePosition", 0);
								//Если RoutePosition >= 1 Тогда
									ОбновитьМаршрутНомерВМаршруте = 0;
									//ОбновитьМаршрутПредыдущиеСостояния = Неопределено;
									ОбновитьМаршрутСостояния = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение;
								//КонецЕсли;
							Иначе
								лОсновныеДанныеДокумента.Вставить("RoutePosition", RoutePosition + 1);
								ОбновитьМаршрутПредыдущиеСостояния = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждение;
								ОбновитьМаршрутСостояния = Перечисления.скEDI_СостоянияЭлектронныхДокументов.Получен;
								ОбновитьМаршрутНомерВМаршруте = RoutePosition + 1;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				лОсновныеДанныеДокумента.Вставить("ПоследняяОперация", ДатаСобытия);
				
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Получено документ'; uk = 'Отримано документ'") + " """ + лВидЭлектронногоДокумента.Наименование + """ №" + Строка(лРезультатРазборкиТелаДокументаВСтруктуруСДанными.НомерДокумента) + " " + НСтр("ru = 'от'; uk = 'від'") + " " + Формат(лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ДатаДокумента, "ДФ=dd.MM.yyyy"), , Ложь);
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Код отправителя'; uk = 'Код відправника'") + ": """ + ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ФилиалКонтрагента), " (" + ФилиалКонтрагента + ")", "") + """", , Ложь);
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Код получателя'; uk = 'Код отримувача'") + ": """ + ЕДРПОУПолучателя + ?(ЗначениеЗаполнено(ФилиалПолучателя), " (" + ФилиалПолучателя + ")", "") + """", , Ложь);
				
				лДанныеЗаполненияЭлектронногоДокумента.Вставить("ОсновныеДанные", лОсновныеДанныеДокумента);
				
				лМассивГрафическихИзображенийПодписей = ДанныеДокумента.Получить("SignImages");
				Если лМассивГрафическихИзображенийПодписей = Неопределено Тогда
					лМассивГрафическихИзображенийПодписей = Новый Массив;
				КонецЕсли;
				Если ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий Тогда 
					ИнформацияОПолученомДокументе = НСтр("ru = 'Получатель: '; uk = 'Отримувач: '") + ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ФилиалКонтрагента), "(" + ФилиалКонтрагента + ")", "");
				Иначе
					ИнформацияОПолученомДокументе = НСтр("ru = 'Отправитель: '; uk = 'Відправник: '") + ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ФилиалКонтрагента), "(" + ФилиалКонтрагента + ")", "");
				КонецЕсли;
				ИнформацияОПолученомДокументе = ИнформацияОПолученомДокументе + "
				|";
				Если ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий Тогда 
					ИнформацияОПолученомДокументе = ИнформацияОПолученомДокументе + НСтр("ru = 'Отправитель: '; uk = 'Відправник: '") + ЕДРПОУПолучателя + ?(ЗначениеЗаполнено(ФилиалПолучателя), "(" + ФилиалПолучателя + ")", "");
				Иначе
					ИнформацияОПолученомДокументе = ИнформацияОПолученомДокументе + НСтр("ru = 'Получатель: '; uk = 'Одержувач: '") + ЕДРПОУПолучателя + ?(ЗначениеЗаполнено(ФилиалПолучателя), "(" + ФилиалПолучателя + ")", "");
				КонецЕсли;
				ИнформацияОПолученомДокументе = ИнформацияОПолученомДокументе + "
				|
				|"
				+ ?(ЗначениеЗаполнено(ИмяФайлаКвитанции), НСтр("ru = 'Имя файла квитанции: '; uk = 'Ім''я файлу квитанції: '") + ИмяФайлаКвитанции + Символы.ПС, "")
				+ НСтр("ru = 'Имя файла: '; uk = 'Ім''я файлу: '") + ИмяФайла + "
				|
				|Текст:
				|"
				+ НСтр("ru = 'ЕГРПОУ: '; uk = 'ЄДРПОУ: '") + ЕДРПОУКонтрагента;
				Если лРезультатРазборкиТелаДокументаВСтруктуруСДанными.НаименованиеКонтрагента <> "" Тогда
					ИнформацияОПолученомДокументе = ИнформацияОПолученомДокументе + "
					|"
					+  НСтр("ru = 'НАЗВАНИЕ: '; uk = 'НАЗВА: '") + лРезультатРазборкиТелаДокументаВСтруктуруСДанными.НаименованиеКонтрагента;
				КонецЕсли;
				ИнформацияОПолученомДокументе = ИнформацияОПолученомДокументе + "
				|ДАТА: " + Формат(лОсновныеДанныеДокумента.ДатаДокумента, "ДФ=dd.MM.yyyy") + "
				|НОМЕР ДОКУМЕНТА: " + лОсновныеДанныеДокумента.НомерДокумента;
				
				Если ЗначениеЗаполнено(ЗначениеПоляCOMMENT) Тогда
					ИнформацияОПолученомДокументе = ИнформацияОПолученомДокументе + "
					|
					|" + ЗначениеПоляCOMMENT;
				КонецЕсли;
				
				лЭлектронныйДокументОбъект = Документы.скEDI_ЭлектронныйДокумент.СоздатьДокумент();
				лЭлектронныйДокументОбъект.Заполнить(лДанныеЗаполненияЭлектронногоДокумента);
				
				Если ОбновитьМаршрут Тогда
					УстановитьПараметрыМаршрутаМногостороннегоДокумента(лЭлектронныйДокументОбъект, Неопределено, ОбновитьМаршрутНомерВМаршруте, ОбновитьМаршрутСостояния, ОбновитьМаршрутПредыдущиеСостояния);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Документ1С) Тогда
					лЭлектронныйДокументОбъект.Документ1С = Документ1С;
				ИначеЕсли скEDI_СозданиеДокументовСервер.ЗагрузитьДокумент1С(Документ1С, ОрганизацияПолучатель, лВидЭлектронногоДокумента, ВхИсх, лЭлектронныйДокументОбъект,
					лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ЕДРПОУВладельцаШаблона, лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ИмяШаблона, лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ВерсияШаблона, 
					лРезультатРазборкиТелаДокументаВСтруктуруСДанными.СоответствиеСДанными, , Истина, Истина) Тогда
					
					лЭлектронныйДокументОбъект.Документ1С = Документ1С;
				КонецЕсли;
				ЗаписатьЭлектронныйДокументСПредварительнымПоискомСвязаных(лЭлектронныйДокументОбъект, лВидЭлектронногоДокумента, ОрганизацияПолучатель, ЭлектронныйДокументНайденыйПоDocOutId);
				ЭлектронныйДокументСсылка = лЭлектронныйДокументОбъект.Ссылка;
				
				ИзображениеДокумента = Неопределено;
				лКонтейнерPDFПредставленияДокумента = ДанныеДокумента.Получить("ImageBody");
				Если лКонтейнерPDFПредставленияДокумента <> Неопределено Тогда
					ИзображениеДокумента = лКонтейнерPDFПредставленияДокумента.Получить("Body");
				КонецЕсли;
				лКонтейнерВложений = ДанныеДокумента.Получить("AttachmentBody");
				     	
				ВложениеДокумента1 = Неопределено;
				ИмяФайлаВложениеДокумента1 = Неопределено;
				ВложениеДокумента2 = Неопределено;
				ИмяФайлаВложениеДокумента2 = Неопределено;
				ВложениеДокумента3 = Неопределено;
				ИмяФайлаВложениеДокумента3 = Неопределено;
				МассивВложений4 = Неопределено;
				Если ТипЗнч(лКонтейнерВложений) = Тип("Массив") Тогда
					НомерВложения = 0;
					Для Каждого Вложение Из лКонтейнерВложений Цикл
						НомерВложения = НомерВложения + 1;
						СодержимоеВложенияДокумента = Вложение.Получить("Body");
						ИмяФайлаВложениеДокумента = Вложение.Получить("FileName");
						Если НомерВложения = 1 Тогда
							ВложениеДокумента1 = СодержимоеВложенияДокумента;
							ИмяФайлаВложениеДокумента1 = ИмяФайлаВложениеДокумента;
						ИначеЕсли НомерВложения = 2 Тогда
							ВложениеДокумента2 = СодержимоеВложенияДокумента;
							ИмяФайлаВложениеДокумента2 = ИмяФайлаВложениеДокумента;
						ИначеЕсли НомерВложения = 3 Тогда
							ВложениеДокумента3 = СодержимоеВложенияДокумента;
							ИмяФайлаВложениеДокумента3 = ИмяФайлаВложениеДокумента;
						Иначе
							Если МассивВложений4 = Неопределено Тогда
								МассивВложений4 = Новый Массив;
							КонецЕсли;
							ТекСтруктураВложения = Новый Структура;
							ТекСтруктураВложения.Вставить("ИмяФайлаВложениеДокумента", ИмяФайлаВложениеДокумента);
							ТекСтруктураВложения.Вставить("ВложениеДокумента", СодержимоеВложенияДокумента);
							МассивВложений4.Добавить(ТекСтруктураВложения);
						КонецЕсли;
						
						//Снимаем ЭЦП
						ВложениеДокумента = СодержимоеВложенияДокумента;
						ЗапросНаРазборСообщения = Новый Структура("Body", СодержимоеВложенияДокумента);
						РезультатРазбораСообщения = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("parsemessage", ЗапросНаРазборСообщения);
						Если РезультатРазбораСообщения.Code = 0 Тогда
							//ВложенияЭлектронныхДокументовМенеджерЗаписи.ВложениеДокумента = РезультатРазбораСообщения.Text;
							ВложениеДокумента = РезультатРазбораСообщения.Text;
						КонецЕсли;
						//ВложенияЭлектронныхДокументовМенеджерЗаписи.Записать(Истина);
						СохранитьВложениеЭлектронногоДокумента(ЭлектронныйДокументСсылка, НомерВложения, ВложениеДокумента, ИмяФайлаВложениеДокумента);
					КонецЦикла;
				КонецЕсли;
				
				скEDI_ВнешниеХранилища.СохранитьСодержимоеЭлектронногоДокумента(ЭлектронныйДокументСсылка,
					ПолучитьСледующийНомерВерсииСодержанияЭлектронногоДокумента(ЭлектронныйДокументСсылка),
					СодержимоеЭлектронногоДокументаMedocBody,
					ИзображениеДокумента,
					ВложениеДокумента1,
					ИмяФайлаВложениеДокумента1,
					ВложениеДокумента2,
					ИмяФайлаВложениеДокумента2,
					ВложениеДокумента3,
					ИмяФайлаВложениеДокумента3,
					МассивВложений4,
					ДатаСобытия,
					ИмяФайла,
					DocVer,
					"",
					Ложь,
					Истина,
					Перечисления.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО,
					Ложь
				);
				ПрименитьМассивДанныхПоСвязаннымДокументам(ЭлектронныйДокументСсылка, МассивДанныхПоСвязаннымДокументам);
				СоглашениеОАнулированииДокументаОбработать(ЭлектронныйДокументСсылка, Истина);
				
				ОбработкаПослеПолученияМенеджерЗаписи = РегистрыСведений.скEDI_ОбработкаПослеПолучения.СоздатьМенеджерЗаписи();
				ОбработкаПослеПолученияМенеджерЗаписи.ЭлектронныйДокумент = ЭлектронныйДокументСсылка;
				ОбработкаПослеПолученияМенеджерЗаписи.ЕДРПОУ = ОрганизацияПолучатель.Код;
				ОбработкаПослеПолученияМенеджерЗаписи.Дата = ДатаСобытия;
				ОбработкаПослеПолученияМенеджерЗаписи.Действие = "ЗаполнитьПодписантовИСоздатьСобытие";
				ОбработкаПослеПолученияМенеджерЗаписи.ДатаСобытия = ДатаСобытия;
				ОбработкаПослеПолученияМенеджерЗаписи.Событие = Перечисления.скEDI_СобытияЭлектронныхДокументов.Получение;
				ОбработкаПослеПолученияМенеджерЗаписи.ТелоДокумента = СодержимоеЭлектронногоДокументаMedocBody;
				ОбработкаПослеПолученияМенеджерЗаписи.ИнформацияОДокументе = ИнформацияОПолученомДокументе;
				ОбработкаПослеПолученияМенеджерЗаписи.Записать(Истина);
				
				ЗаписатьФаксимилеЭлектронныхДокументов(ЭлектронныйДокументСсылка, лМассивГрафическихИзображенийПодписей);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЭлектронныйДокументСсылка = лРезультатПоискаЭлектронногоДокументаВБазе;
		
		DocVer = ДанныеДокумента.Получить("DocVer");
		Если ЭлектронныйДокументСсылка.DocVer <> DocVer Тогда
			ДатаСобытия = ТекущаяДата();
			ИмяФайла = ДанныеДокумента.Получить("FileName");
			ИмяФайлаКвитанции = ДанныеДокумента.Получить("AnsFileName");
			СодержимоеЭлектронногоДокументаMedocBody = ДанныеДокумента.Получить("MedocBody");
			Если СодержимоеЭлектронногоДокументаMedocBody <> Неопределено Тогда
				ИзображениеДокумента = Неопределено;
				лКонтейнерPDFПредставленияДокумента = ДанныеДокумента.Получить("ImageBody");
				Если лКонтейнерPDFПредставленияДокумента <> Неопределено Тогда
					ИзображениеДокумента = лКонтейнерPDFПредставленияДокумента.Получить("Body");
				КонецЕсли;
				лКонтейнерВложений = ДанныеДокумента.Получить("AttachmentBody");
				     	
				ВложениеДокумента1 = Неопределено;
				ИмяФайлаВложениеДокумента1 = Неопределено;
				ВложениеДокумента2 = Неопределено;
				ИмяФайлаВложениеДокумента2 = Неопределено;
				ВложениеДокумента3 = Неопределено;
				ИмяФайлаВложениеДокумента3 = Неопределено;
				МассивВложений4 = Неопределено;
				Если ТипЗнч(лКонтейнерВложений) = Тип("Массив") Тогда
					НомерВложения = 0;
					Для Каждого Вложение Из лКонтейнерВложений Цикл
						НомерВложения = НомерВложения + 1;
						СодержимоеВложенияДокумента = Вложение.Получить("Body");
						ИмяФайлаВложениеДокумента = Вложение.Получить("FileName");
						Если НомерВложения = 1 Тогда
							ВложениеДокумента1 = СодержимоеВложенияДокумента;
							ИмяФайлаВложениеДокумента1 = ИмяФайлаВложениеДокумента;
						ИначеЕсли НомерВложения = 2 Тогда
							ВложениеДокумента2 = СодержимоеВложенияДокумента;
							ИмяФайлаВложениеДокумента2 = ИмяФайлаВложениеДокумента;
						ИначеЕсли НомерВложения = 3 Тогда
							ВложениеДокумента3 = СодержимоеВложенияДокумента;
							ИмяФайлаВложениеДокумента3 = ИмяФайлаВложениеДокумента;
						Иначе
							Если МассивВложений4 = Неопределено Тогда
								МассивВложений4 = Новый Массив;
							КонецЕсли;
							ТекСтруктураВложения = Новый Структура;
							ТекСтруктураВложения.Вставить("ИмяФайлаВложениеДокумента", ИмяФайлаВложениеДокумента);
							ТекСтруктураВложения.Вставить("ВложениеДокумента", СодержимоеВложенияДокумента);
							МассивВложений4.Добавить(ТекСтруктураВложения);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				скEDI_ВнешниеХранилища.СохранитьСодержимоеЭлектронногоДокумента(ЭлектронныйДокументСсылка,
					ПолучитьСледующийОтрицательныйНомерВерсииСодержанияЭлектронногоДокумента(ЭлектронныйДокументСсылка),
					СодержимоеЭлектронногоДокументаMedocBody,
					ИзображениеДокумента,
					ВложениеДокумента1,
					ИмяФайлаВложениеДокумента1,
					ВложениеДокумента2,
					ИмяФайлаВложениеДокумента2,
					ВложениеДокумента3,
					ИмяФайлаВложениеДокумента3,
					МассивВложений4,
					ДатаСобытия,
					ИмяФайла,
					DocVer,
					"",
					Ложь,
					Истина,
					Перечисления.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО,
					Ложь
				);
			КонецЕсли;
			
			ИнформацияОПолученомДокументе = НСтр("ru = 'Получено копию электронного документа'; uk = 'Отримано копію електронного документа'");
			ЗафиксироватьСобытиеЭлектронногоДокумента(ЭлектронныйДокументСсылка, Перечисления.скEDI_СобытияЭлектронныхДокументов.Получение, ИнформацияОПолученомДокументе, ДатаСобытия, DocVer, ИмяФайла, ИмяФайлаКвитанции);
		КонецЕсли;
	КонецЕсли;
	
	Возврат лНетОшибокПриОбработкеВходящегоДокумента;
КонецФункции // ОбработатьВходящийЭлектронныйДокумент()

Функция ОбработатьВходящийЭлектронныйДокументGovRk(ДанныеДокумента, ОрганизацияПолучатель, ЖурналОперации = "", аоОперация, аоЭлектронныйДокумент, аоДополнительно)
	лНетОшибокПриОбработкеВходящегоДокумента = Истина;
	
	аоОперация = "";
	аоЭлектронныйДокумент = Неопределено;
	аоДополнительно = "";
	
	ИмяФайла = ДанныеДокумента.Получить("FileName");
	
	лРезультатПоискаЭлектронногоДокументаВБазе = ПроверитьНаличиеЭлектронногоДокументаВБазе(ИмяФайла, ОрганизацияПолучатель);
	Если лРезультатПоискаЭлектронногоДокументаВБазе = Неопределено Тогда
		СодержимоеЭлектронногоДокумента = ДанныеДокумента.Получить("Text");
		СодержимоеЭлектронногоДокументаBody = ДанныеДокумента.Получить("Body");
		ДатаСобытия = ТекущаяДата();
		ОтклонитьНалоговыйДокументПоНеСоответствиюИНН = Ложь;
		ОтклонитьНалоговыйДокументПоНеСоответствиюИНН_Текст = "";
		Если СодержимоеЭлектронногоДокумента <> Неопределено Тогда
			лРезультатРазборкиТелаДокументаВСтруктуруСДанными = РазобратьXMLПредставлениеЭлектронногоДокументаВСоответствиеСДанными(СодержимоеЭлектронногоДокументаBody, ЖурналОперации);
			Если лРезультатРазборкиТелаДокументаВСтруктуруСДанными = Неопределено Тогда
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не удалось прочитать данные электронного документа'; uk = 'Не вдалося прочитати дані електронного документа'") + " " + ИмяФайла + ".");
				лНетОшибокПриОбработкеВходящегоДокумента = Ложь;
			Иначе
				лВидЭлектронногоДокумента = ОпределитьВидЭлектронногоДокументаПоИмениШаблона(лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ЕДРПОУВладельцаШаблона, лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ИмяШаблона, лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ВерсияШаблона, лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ТипДокументаMEDoc, ОрганизацияПолучатель);
				Если лВидЭлектронногоДокумента = Неопределено Тогда
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не удалось определить вид полученного электронного документа'; uk = 'Не вдалось визначити вид отриманого електронного документа'"));
					лНетОшибокПриОбработкеВходящегоДокумента = Ложь;
				КонецЕсли;
				
				Если лНетОшибокПриОбработкеВходящегоДокумента Тогда
					ЕДРПОУКонтрагента = ДанныеДокумента.Получить("Edrpou");
					ФилиалКонтрагента = ДанныеДокумента.Получить("Dept");
					ЕДРПОУПолучателя = ДанныеДокумента.Получить("RcvEdrpou");
					ФилиалПолучателя = ДанныеДокумента.Получить("RcvDept");
					
					лДанныеЗаполненияЭлектронногоДокумента = Новый Структура;
					
					лОсновныеДанныеДокумента = Новый Структура;
					лОсновныеДанныеДокумента.Вставить("ВидЭлектронногоДокумента",   лВидЭлектронногоДокумента);
					лОсновныеДанныеДокумента.Вставить("Организация",                ОрганизацияПолучатель);
					лОсновныеДанныеДокумента.Вставить("Состояние",                  Перечисления.скEDI_СостоянияЭлектронныхДокументов.Получен);
					лОсновныеДанныеДокумента.Вставить("ИмяФайла",                   ИмяФайла);
					лОсновныеДанныеДокумента.Вставить("ЕДРПОУКонтрагента",          ЕДРПОУКонтрагента);
					лОсновныеДанныеДокумента.Вставить("ФилиалКонтрагента",          ФилиалКонтрагента);
					лОсновныеДанныеДокумента.Вставить("РеквизитыЭлектронногоДокумента", лРезультатРазборкиТелаДокументаВСтруктуруСДанными.СоответствиеСДанными);
					лОсновныеДанныеДокумента.Вставить("ЕДРПОУВладельцаШаблона",     лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ЕДРПОУВладельцаШаблона);
					лОсновныеДанныеДокумента.Вставить("ИмяШаблона",                 лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ИмяШаблона);
					лОсновныеДанныеДокумента.Вставить("ВерсияШаблона",              лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ВерсияШаблона);
					
					лРеквизитыШапкиДокумента = лРезультатРазборкиТелаДокументаВСтруктуруСДанными.Таблица0ПерваяСтрока;
					Если лВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
						лНомерЭлектронногоДокумента = "";
						лНомерДокумента = "";
						лДатаЭлектронногоДокумента = "";
						лДатаДокумента = "";
						лЕДРПОУПродавца = "";
						лИННПродавца = "";
						лКодФилиалаПродавца = "";
						лНаименованиеПродавца = "";
						лЕДРПОУПокупателя = "";
						лИННПокупателя = "";
						лКодФилиалаПокупателя = "";
						лНаименованиеПокупателя = "";
						лСуммаЭлектронногоДокумента = 0;
						лСуммаБезНДСЭлектронногоДокумента = 0;
						лСуммаНДСЭлектронногоДокумента = 0;
							
						ПолучитьРеквизитыНалоговойНакладнойИзРеквизитовШапкиЭлектронногоДокумента(лРеквизитыШапкиДокумента, лНомерЭлектронногоДокумента, лНомерДокумента,
							лДатаЭлектронногоДокумента, лДатаДокумента,
							лЕДРПОУПродавца, лИННПродавца, лКодФилиалаПродавца, лНаименованиеПродавца, лЕДРПОУПокупателя, лИННПокупателя, лКодФилиалаПокупателя, лНаименованиеПокупателя,
							лСуммаЭлектронногоДокумента, лСуммаБезНДСЭлектронногоДокумента, лСуммаНДСЭлектронногоДокумента);
						
						лОсновныеДанныеДокумента.Вставить("Номер", лНомерЭлектронногоДокумента);
						лОсновныеДанныеДокумента.Вставить("НомерДокумента", лНомерДокумента);
						лОсновныеДанныеДокумента.Вставить("Дата",  лДатаЭлектронногоДокумента);
						лОсновныеДанныеДокумента.Вставить("ДатаДокумента",  лДатаДокумента);
						лОсновныеДанныеДокумента.Вставить("ИННПродавца",  лИННПродавца);
						лОсновныеДанныеДокумента.Вставить("КодФилиалаПродавца",  лКодФилиалаПродавца);
						лОсновныеДанныеДокумента.Вставить("ИННПокупателя",  лИННПокупателя);
						лОсновныеДанныеДокумента.Вставить("КодФилиалаПокупателя",  лКодФилиалаПокупателя);
						лОсновныеДанныеДокумента.Вставить("СуммаДокумента",  лСуммаЭлектронногоДокумента);
						лОсновныеДанныеДокумента.Вставить("СуммаБезНДС",  лСуммаБезНДСЭлектронногоДокумента);
						лОсновныеДанныеДокумента.Вставить("СуммаНДС",  лСуммаНДСЭлектронногоДокумента);
						
						лОсновныеДанныеДокумента.Вставить("ДатаСоздания",     ДатаСобытия);
						лОсновныеДанныеДокумента.Вставить("ПоследняяОперация", ДатаСобытия);
						// 2017-09-27
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Получено документ'; uk = 'Отримано документ'") + " """ + лВидЭлектронногоДокумента.Наименование + """ №" + Строка(лНомерЭлектронногоДокумента) + " " + НСтр("ru = 'от'; uk = 'від'") + " " + Формат(лДатаЭлектронногоДокумента, "ДФ=dd.MM.yyyy"), , Ложь);
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'ИНН Продавца'; uk = 'ІПН Продавця'") + ": """ + лИННПродавца + ?(ЗначениеЗаполнено(лКодФилиалаПродавца), " (" + лКодФилиалаПродавца + ")", "") + """", , Ложь);
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'ИНН Покупателя'; uk = 'ІПН Покупця'") + ": """ + лИННПокупателя + ?(ЗначениеЗаполнено(лКодФилиалаПокупателя), " (" + лКодФилиалаПокупателя + ")", "") + """", , Ложь);
						// ...2017-09-27
						ДанныеПоОрганизаци = скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеПоОгранизации(ОрганизацияПолучатель.Организация1С);
						Если (лИННПродавца <> ДанныеПоОрганизаци.ИНН) и (лИННПокупателя <> ДанныеПоОрганизаци.ИНН) Тогда
							ОтклонитьНалоговыйДокументПоНеСоответствиюИНН = Истина;
							ОтклонитьНалоговыйДокументПоНеСоответствиюИНН_Текст = "Помилка! ІПН Підприємства (" + ДанныеПоОрганизаци.ИНН + ") не співпадає ні з ІПН Продавця (" + лИННПродавца + "), ні з ІПН Покупця (" + лИННПокупателя + ")";
						КонецЕсли;
					ИначеЕсли лВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
						лНомерЭлектронногоДокумента = "";
						лНомерДокумента = "";
						лДатаЭлектронногоДокумента = "";
						лДатаДокумента = "";
						лЕДРПОУПродавца = "";
						лИННПродавца = "";
						лКодФилиалаПродавца = "";
						лНаименованиеПродавца = "";
						лЕДРПОУПокупателя = "";
						лИННПокупателя = "";
						лКодФилиалаПокупателя = "";
						лНаименованиеПокупателя = "";
						лРегистрируетсяВЕРННПокупателем = Ложь;
						лСуммаЭлектронногоДокумента = 0;
						лСуммаБезНДСЭлектронногоДокумента = 0;
						лСуммаНДСЭлектронногоДокумента = 0;
							
						ПолучитьРеквизитыПриложения2ИзРеквизитовШапкиЭлектронногоДокумента(лРеквизитыШапкиДокумента, лНомерЭлектронногоДокумента, лНомерДокумента,
							лДатаЭлектронногоДокумента, лДатаДокумента,
							лЕДРПОУПродавца, лИННПродавца, лКодФилиалаПродавца, лНаименованиеПродавца, лЕДРПОУПокупателя, лИННПокупателя, лКодФилиалаПокупателя, лНаименованиеПокупателя, лРегистрируетсяВЕРННПокупателем,
							лСуммаЭлектронногоДокумента, лСуммаБезНДСЭлектронногоДокумента, лСуммаНДСЭлектронногоДокумента);
						
						лОсновныеДанныеДокумента.Вставить("Номер", лНомерЭлектронногоДокумента);
						лОсновныеДанныеДокумента.Вставить("НомерДокумента", лНомерДокумента);
						лОсновныеДанныеДокумента.Вставить("Дата",  лДатаЭлектронногоДокумента);
						лОсновныеДанныеДокумента.Вставить("ДатаДокумента",  лДатаДокумента);
						лОсновныеДанныеДокумента.Вставить("ИННПродавца",  лИННПродавца);
						лОсновныеДанныеДокумента.Вставить("КодФилиалаПродавца",  лКодФилиалаПродавца);
						лОсновныеДанныеДокумента.Вставить("ИННПокупателя",  лИННПокупателя);
						лОсновныеДанныеДокумента.Вставить("КодФилиалаПокупателя",  лКодФилиалаПокупателя);
						лОсновныеДанныеДокумента.Вставить("РегистрируетсяВЕРННПокупателем",  лРегистрируетсяВЕРННПокупателем);
						лОсновныеДанныеДокумента.Вставить("СуммаДокумента",  лСуммаЭлектронногоДокумента);
						лОсновныеДанныеДокумента.Вставить("СуммаБезНДС",  лСуммаБезНДСЭлектронногоДокумента);
						лОсновныеДанныеДокумента.Вставить("СуммаНДС",  лСуммаНДСЭлектронногоДокумента);
						
						лОсновныеДанныеДокумента.Вставить("ДатаСоздания",     ДатаСобытия);
						лОсновныеДанныеДокумента.Вставить("ПоследняяОперация", ДатаСобытия);
						// 2017-09-27
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Получено документ'; uk = 'Отримано документ'") + " """ + лВидЭлектронногоДокумента.Наименование + """ №" + Строка(лНомерЭлектронногоДокумента) + " " + НСтр("ru = 'от'; uk = 'від'") + " " + Формат(лДатаЭлектронногоДокумента, "ДФ=dd.MM.yyyy"), , Ложь);
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'ИНН Продавца'; uk = 'ІПН Продавця'") + ": """ + лИННПродавца + ?(ЗначениеЗаполнено(лКодФилиалаПродавца), " (" + лКодФилиалаПродавца + ")", "") + """", , Ложь);
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'ИНН Покупателя'; uk = 'ІПН Покупця'") + ": """ + лИННПокупателя + ?(ЗначениеЗаполнено(лКодФилиалаПокупателя), " (" + лКодФилиалаПокупателя + ")", "") + """", , Ложь);
						// ...2017-09-27
						ДанныеПоОрганизаци = скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеПоОгранизации(ОрганизацияПолучатель.Организация1С);
						Если (лИННПродавца <> ДанныеПоОрганизаци.ИНН) и (лИННПокупателя <> ДанныеПоОрганизаци.ИНН) Тогда
							ОтклонитьНалоговыйДокументПоНеСоответствиюИНН = Истина;
							ОтклонитьНалоговыйДокументПоНеСоответствиюИНН_Текст = "Помилка! ІПН Підприємства (" + ДанныеПоОрганизаци.ИНН + ") не співпадає ні з ІПН Продавця (" + лИННПродавца + "), ні з ІПН Покупця (" + лИННПокупателя + ")";
						КонецЕсли;
					Иначе
						Возврат Ложь;
					КонецЕсли;
					лОсновныеДанныеДокумента.Вставить("ВхИсх",    Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий);
					
					лДанныеЗаполненияЭлектронногоДокумента.Вставить("ОсновныеДанные", лОсновныеДанныеДокумента);
					
					лДатаПодписания = Дата(1, 1, 1);
					лЭлектронныйДокументОбъект = Документы.скEDI_ЭлектронныйДокумент.СоздатьДокумент();
					лЭлектронныйДокументОбъект.Заполнить(лДанныеЗаполненияЭлектронногоДокумента);
					
					//
					ИнформацияОПолученомДокументе = НСтр("ru = 'Отправитель: '; uk = 'Відправник: '") + ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ФилиалКонтрагента), "(" + ФилиалКонтрагента + ")", "");
					ИнформацияОПолученомДокументе = ИнформацияОПолученомДокументе + "
					|"
					+ НСтр("ru = 'Получатель: '; uk = 'Одержувач: '") + ЕДРПОУПолучателя + ?(ЗначениеЗаполнено(ФилиалПолучателя), "(" + ФилиалПолучателя + ")", "");
					ИнформацияОПолученомДокументе = ИнформацияОПолученомДокументе + "
					|
					|"
					+ НСтр("ru = 'Способ приема: Сервер ГНС'; uk = 'Спосіб прийому: Сервер ДПС'") + "
					|"
					+ НСтр("ru = 'Имя файла: '; uk = 'Ім''я файлу: '") + ИмяФайла + "
					|
					|Текст:
					|"
					+ НСтр("ru = 'ЕГРПОУ: '; uk = 'ЄДРПОУ: '") + ЕДРПОУКонтрагента;
					Если лРезультатРазборкиТелаДокументаВСтруктуруСДанными.НаименованиеКонтрагента <> "" Тогда
						ИнформацияОПолученомДокументе = ИнформацияОПолученомДокументе + "
						|"
						+ НСтр("ru = 'НАЗВАНИЕ: '; uk = 'НАЗВА: '") + лРезультатРазборкиТелаДокументаВСтруктуруСДанными.НаименованиеКонтрагента;
					КонецЕсли;
					ИнформацияОПолученомДокументе = ИнформацияОПолученомДокументе + "
					|ДАТА: " + Формат(лОсновныеДанныеДокумента.ДатаДокумента, "ДФ=dd.MM.yyyy") + "
					|НОМЕР ДОКУМЕНТА: " + лОсновныеДанныеДокумента.НомерДокумента;
					//
					
					лМассивПодписей = ПолучитьМассивПодписейИзМассиваСоответствий(ДанныеДокумента.Получить("Signers"));
					
					ИнформацияОПолученомДокументе = ИнформацияОПолученомДокументе + "
							|
							|"
							+ НСтр("ru = 'Подписи:'; uk = 'Підписи:'");
					ДополнитьОписаниеДаннымиПоПодписямКонтрагента(лМассивПодписей, ИнформацияОПолученомДокументе, Неопределено, Ложь, Ложь);
					лМассивДанныхПоПодписямКонтрагента = СформироватьМассивДанныхПоПодписямКонтрагента(лМассивПодписей);
					Для Каждого лИнформацияОПодписи Из лМассивДанныхПоПодписямКонтрагента Цикл
						лНоваяСтрокаПодписиКонтрагента = лЭлектронныйДокументОбъект.ПодписиКонтрагента.Добавить();
						ЗаполнитьЗначенияСвойств(лНоваяСтрокаПодписиКонтрагента, лИнформацияОПодписи);
					КонецЦикла;
					
					
					Если ЗначениеЗаполнено(лЭлектронныйДокументОбъект.Документ1С) Тогда
						Если лВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная")
						или	лВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
							скEDI_НастройкиПодКонфигурациюНалоговыеДокументы.УстановитьОтметкуОРегистрацииНалоговогоДокумента(лЭлектронныйДокументОбъект, лЭлектронныйДокументОбъект.Документ1С, СодержимоеЭлектронногоДокументаBody);
						КонецЕсли;
					Иначе
						Документ1С = Неопределено;
						Документ1СБылСоздан = Ложь;
						Если скEDI_НастройкиПодКонфигурациюНалоговыеДокументы.ЗагрузитьНалоговыйДокумент1С(Документ1С, ОрганизацияПолучатель, лВидЭлектронногоДокумента, лВидЭлектронногоДокумента.ТипДокумента, Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий, лЭлектронныйДокументОбъект,
							лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ИмяШаблона, 
							лРезультатРазборкиТелаДокументаВСтруктуруСДанными.СоответствиеСДанными, "", Документ1СБылСоздан, Истина, Истина, СодержимоеЭлектронногоДокументаBody) Тогда
							
							лЭлектронныйДокументОбъект.Документ1С = Документ1С;								
							
							Если не Документ1СБылСоздан Тогда
								Если лВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная")
								или	лВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
									скEDI_НастройкиПодКонфигурациюНалоговыеДокументы.УстановитьОтметкуОРегистрацииНалоговогоДокумента(лЭлектронныйДокументОбъект, Документ1С, СодержимоеЭлектронногоДокументаBody);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					ЗаписатьЭлектронныйДокументСПредварительнымПоискомСвязаных(лЭлектронныйДокументОбъект, лВидЭлектронногоДокумента, ОрганизацияПолучатель);
					
					скEDI_ВнешниеХранилища.СохранитьСодержимоеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка,
						ПолучитьСледующийНомерВерсииСодержанияЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка),
						СодержимоеЭлектронногоДокументаBody,
						Неопределено,
						Неопределено,
						"",
						Неопределено,
						"",
						Неопределено,
						"",
						Неопределено,
						ДатаСобытия,
						"",
						0,
						"",
						Ложь,
						Истина,
						Перечисления.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезДФС,
						Ложь
					);
					
					ЗафиксироватьСобытиеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка, Перечисления.скEDI_СобытияЭлектронныхДокументов.Получение, ИнформацияОПолученомДокументе);
					
					Если ОтклонитьНалоговыйДокументПоНеСоответствиюИНН Тогда
						аоОперация = "ОтклонениеАвтоматически";
						аоЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
						аоДополнительно = ОтклонитьНалоговыйДокументПоНеСоответствиюИНН_Текст;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
	КонецЕсли;
	
	Возврат лНетОшибокПриОбработкеВходящегоДокумента;
КонецФункции

Функция ОбработатьВходящийВитягЄРПН(ИмяМассива, ИмяФайлаЗапиту, ДанныеДокумента, ОрганизацияПолучатель, ЖурналОперации = "")
	лНетОшибокПриОбработкеКвитанции = Истина;
	
	лЭлектронныйДокумент = ПроверитьНаличиеДополнительногоЭлектронногоДокументаВБазеПоИмениФайлаДФС(ИмяФайлаЗапиту, ОрганизацияПолучатель);
	Если лЭлектронныйДокумент = Неопределено Тогда
		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'В базе не найден Запрос в ЕРНН по имени файла'; uk = 'В базі не знайдено Запит до ЄРПН по імені файла'") + ": " + ИмяФайлаЗапиту + НСтр("ru = ', к которому относится данная квитанция.'; uk = ', до якого відноситься дана квитанція.'"));
		лНетОшибокПриОбработкеКвитанции = Ложь;
	КонецЕсли;
	
	Если лНетОшибокПриОбработкеКвитанции Тогда
		ИдентификаторКвитанцииGateId = ДанныеДокумента.Получить("GateId");
		ЕДРПОУ = ДанныеДокумента.Получить("RcvEdrpou");
		Филиал = ДанныеДокумента.Получить("RcvDept");
		ДатаСобытия = ТекущаяДата();
		
		лРезультатПоискаКвитанцииВБазе = ПроверитьНаличиеКвитанцииДФСРКВБазе(ИдентификаторКвитанцииGateId, лЭлектронныйДокумент);
		Если лРезультатПоискаКвитанцииВБазе = Неопределено Тогда
			ТипКвитанции = ПолучитьТипКвитанцииРКПоКоду(ДанныеДокумента.Получить("Result"));
			//Если ЗначениеЗаполнено(ТипКвитанции) Тогда
			Если ТипКвитанции = Перечисления.скEDI_ТипыКвитанций.Подтверждение Тогда
				ТекстВитяга = ДанныеДокумента.Получить("Text");
				ТекстВитяга = СтрЗаменить(ТекстВитяга, Символ(0), Символы.ПС);
				
				УзелDECLARHEAD = Неопределено;
				УзелDECLARBODY = Неопределено;
				Попытка
					ЧтениеXML = Новый ЧтениеXML;
					ЧтениеXML.УстановитьСтроку(ТекстВитяга);
					ЧтениеXML.Прочитать();
					мДОМ = Новый ПостроительDOM;
					мДокументДОМ 	  = мДОМ.Прочитать(ЧтениеXML);
					
					Для Каждого ДочернийУзел1 Из мДокументДОМ.ДочерниеУзлы Цикл
						Если ВРег(ДочернийУзел1.ИмяУзла) = ВРег("DECLAR") Тогда
							Для Каждого ДочернийУзел2 Из ДочернийУзел1.ДочерниеУзлы Цикл
								Если ВРег(ДочернийУзел2.ИмяУзла) = ВРег("DECLARHEAD") Тогда
									УзелDECLARHEAD = ДочернийУзел2;
								ИначеЕсли ВРег(ДочернийУзел2.ИмяУзла) = ВРег("DECLARBODY") Тогда
									УзелDECLARBODY = ДочернийУзел2;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				Исключение
					Возврат Ложь;
				КонецПопытки;
				
				Если УзелDECLARHEAD = Неопределено Тогда
					Возврат Ложь;
				КонецЕсли;
				Если УзелDECLARBODY = Неопределено Тогда
					Возврат Ложь;
				КонецЕсли;
				лЭлектронныйДокументОбъект = лЭлектронныйДокумент.ПолучитьОбъект();
				ВытягЗагружен = лЭлектронныйДокументОбъект.ЗагрузитьВытяг(ОрганизацияПолучатель, ДанныеДокумента, УзелDECLARHEAD, УзелDECLARBODY, ДатаСобытия);
				Если ВытягЗагружен Тогда
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Получен ответ по документу'; uk = 'Отримано витяг по документу'") + ": " + Строка(лЭлектронныйДокумент));
				КонецЕсли;
				Возврат ВытягЗагружен;
			Иначе
				лНетОшибокПриОбработкеКвитанции = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат лНетОшибокПриОбработкеКвитанции;
КонецФункции

Функция ОбработатьКвитанциюДФСПоЭлектронномуДокументу(ДанныеКвитанции, ОрганизацияПолучатель, ЖурналОперации = "")
	лНетОшибокПриОбработкеКвитанции = Истина;
	
	ИмяФайла = ДанныеКвитанции.Получить("FileName");
	
	ЭтоКвитанцияПоЭлектронномуДокументу = Ложь;
	ЭтоКвитанцияПоДополнительномуЭлектронномуДокументу = Ложь;
	лЭлектронныйДокумент = ПроверитьНаличиеЭлектронногоДокументаВБазеПоИмениФайлаДФС(ИмяФайла, ОрганизацияПолучатель);
	Если лЭлектронныйДокумент = Неопределено Тогда
		лЭлектронныйДокумент = ПроверитьНаличиеДополнительногоЭлектронногоДокументаВБазеПоИмениФайлаДФС(ИмяФайла, ОрганизацияПолучатель);
		Если лЭлектронныйДокумент = Неопределено Тогда
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'В базе не найден электронный документ по имени файла'; uk = 'В базі не знайдено електронний документ за іменем файла'") + ": " + ИмяФайла + НСтр("ru = ', к которому относится данная квитанция.'; uk = ', до якого відноситься дана квитанція.'"));
			лНетОшибокПриОбработкеКвитанции = Ложь;
		Иначе
			ЭтоКвитанцияПоДополнительномуЭлектронномуДокументу = Истина;
		КонецЕсли;
	Иначе
		ЭтоКвитанцияПоЭлектронномуДокументу = Истина;
	КонецЕсли;
	
	Если лНетОшибокПриОбработкеКвитанции Тогда
		ИдентификаторКвитанцииGateId = ДанныеКвитанции.Получить("GateId");
		лРезультатПоискаКвитанцииВБазе = ПроверитьНаличиеКвитанцииДФСВБазе(ИдентификаторКвитанцииGateId, лЭлектронныйДокумент);
		Если лРезультатПоискаКвитанцииВБазе = Неопределено Тогда
			ТелоКвитанции = ДанныеКвитанции.Получить("Body");
			ЕДРПОУКонтрагента = ДанныеКвитанции.Получить("Edrpou");
			ФилиалКонтрагента = ДанныеКвитанции.Получить("Dept");
			ФинальнаяКвитанция = ДанныеКвитанции.Получить("FinKvt") = Истина;
			
			ВидКвитанции = Неопределено;
			ТипКвитанции = Неопределено;
			ДатаКвитанции = Неопределено;
			
			лДатаОперации = ТекущаяДата(); 
			лСостояниеЭлектронногоДокумента = Неопределено;
			лСостояниеЭлектронногоДокументаРегистрацияВДФС = Неопределено;
			лЕстьФинальнаяКвитанцияДФС = Ложь;
			лРегистрационныйНомерДФС = Неопределено;
			лЗарегистрированВДФС = Неопределено;
			лДатаРегистрацииВДФС = Неопределено;
			лПричинаОтклоненияДФС = "";
			
			ТекстКвитанции = Неопределено;
			
			Если ФинальнаяКвитанция Тогда
				РегНомер = "";
				ОшибкиДокумента = "";
				Если не РазобратьТекстКвитанции(Строка(ДанныеКвитанции.Получить("Text")), ТекстКвитанции, ДатаКвитанции, ВидКвитанции, ТипКвитанции, РегНомер, ОшибкиДокумента) Тогда
					ДатаКвитанцииТекст = ДанныеКвитанции.Получить("MsgDate");
					Если ЗначениеЗаполнено(ДатаКвитанцииТекст) Тогда
						ДатаКвитанции = СтрокаВДату(ДатаКвитанцииТекст);
					Иначе
						ДатаКвитанции = лДатаОперации;
					КонецЕсли;
					ТекстКвитанции = ДанныеКвитанции.Получить("Message");
					ВидКвитанции = Перечисления.скEDI_ВидыКвитанций.ДФС;
					ТипКвитанции = ПолучитьТипКвитанцииДФСПоКоду(ДанныеКвитанции.Получить("Result"));
					Если Найти(ВРег(ТекстКвитанции), "ДОКУМЕНТ ПРИЙНЯТО. РЕЄСТРАЦІЯ ЗУПИНЕНА.") > 0 Тогда
						ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанцийДФС.РегистрацияОстановлена");
					КонецЕсли;
					РегНомер = ДанныеКвитанции.Получить("DocRegNum");
					//ДатаРегистрацииТекст = ДанныеКвитанции.Получить("DocRegDateTime");
					//Если ЗначениеЗаполнено(ДатаКвитанцииТекст) Тогда
					//	ДатаКвитанции = СтрокаВДату(ДатаРегистрацииТекст);
					//КонецЕсли;
				КонецЕсли;
				
				Если ЭтоКвитанцияПоЭлектронномуДокументу Тогда
					Если ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.Успешно Тогда
						лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС;
						лСостояниеЭлектронногоДокументаРегистрацияВДФС = Перечисления.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоПодтверждениеОтДФС;
						лЕстьФинальнаяКвитанцияДФС = Истина;
						лРегистрационныйНомерДФС = РегНомер;
						лЗарегистрированВДФС = Истина;
						лДатаРегистрацииВДФС = ДатаКвитанции;
						лПричинаОтклоненияДФС = ОшибкиДокумента;
					ИначеЕсли ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.Ошибка Тогда
						лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонениеОтДФС;
						лСостояниеЭлектронногоДокументаРегистрацияВДФС = Перечисления.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоОтклонениеОтДФС;
						лЕстьФинальнаяКвитанцияДФС = Истина;
						лПричинаОтклоненияДФС = ОшибкиДокумента;
					ИначеЕсли ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.Предупреджение Тогда
						лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоКвитанциюОтДФС;
						лСостояниеЭлектронногоДокументаРегистрацияВДФС = Перечисления.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоКвитанциюОтДФС_Предупреждение;
						лЕстьФинальнаяКвитанцияДФС = Истина;
						лРегистрационныйНомерДФС = РегНомер;
						лЗарегистрированВДФС = Истина;
						лДатаРегистрацииВДФС = ДатаКвитанции;
						лПричинаОтклоненияДФС = ОшибкиДокумента;
					ИначеЕсли ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.РегистрацияОстановлена Тогда
						лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС_РегистрацияОстановлена;
						лСостояниеЭлектронногоДокументаРегистрацияВДФС = Перечисления.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоПодтверждениеОтДФС_РегистрацияОстановлена;
						лЕстьФинальнаяКвитанцияДФС = Ложь;
						лРегистрационныйНомерДФС = РегНомер;//?
						лЗарегистрированВДФС = Ложь;//?
						лДатаРегистрацииВДФС = ДатаКвитанции;//?
						лПричинаОтклоненияДФС = ОшибкиДокумента;//?
					КонецЕсли;
				ИначеЕсли ЭтоКвитанцияПоДополнительномуЭлектронномуДокументу Тогда
					Если ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.Успешно Тогда
						лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.ПолученоПодтверждениеОтДФС;
					ИначеЕсли ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.Ошибка Тогда
						лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.ПолученоОтклонениеОтДФС;
						лПричинаОтклоненияДФС = ТекстКвитанции;
					ИначеЕсли ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.Предупреджение Тогда //?
						лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.ПолученоПодтверждениеОтДФС;
						лПричинаОтклоненияДФС = ТекстКвитанции;
					ИначеЕсли ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.РегистрацияОстановлена Тогда //??
						лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.ПолученоПодтверждениеОтДФС;
						лПричинаОтклоненияДФС = ТекстКвитанции;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ДатаКвитанцииТекст = ДанныеКвитанции.Получить("MsgDate");
				Если ЗначениеЗаполнено(ДатаКвитанцииТекст) Тогда
					ДатаКвитанции = СтрокаВДату(ДатаКвитанцииТекст);
				Иначе
					ДатаКвитанции = лДатаОперации;
				КонецЕсли;
				ТекстКвитанции = ДанныеКвитанции.Получить("Message");
				ВидКвитанции = Перечисления.скEDI_ВидыКвитанций.ДФС;
				ТипКвитанции = ПолучитьТипКвитанцииДФСПоКоду(ДанныеКвитанции.Получить("Result"));
				Если Найти(ВРег(ТекстКвитанции), "ДОКУМЕНТ ПРИЙНЯТО. РЕЄСТРАЦІЯ ЗУПИНЕНА.") > 0 Тогда
					ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанцийДФС.РегистрацияОстановлена");
				КонецЕсли;
				
				Если ЭтоКвитанцияПоЭлектронномуДокументу Тогда
					Если ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.Успешно Тогда
						лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоКвитанциюОтДФС;
						лСостояниеЭлектронногоДокументаРегистрацияВДФС = Перечисления.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоКвитанциюОтДФС_Доставка;
					ИначеЕсли ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.Ошибка Тогда
						лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоКвитанциюОтДФС;
						лСостояниеЭлектронногоДокументаРегистрацияВДФС = Перечисления.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоОтклонениеОтДФС;
					ИначеЕсли ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.Предупреджение Тогда
						лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоКвитанциюОтДФС;
						лСостояниеЭлектронногоДокументаРегистрацияВДФС = Перечисления.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоКвитанциюОтДФС_Предупреждение;
					ИначеЕсли ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.РегистрацияОстановлена Тогда
						лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС_РегистрацияОстановлена;
						лСостояниеЭлектронногоДокументаРегистрацияВДФС = Перечисления.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоПодтверждениеОтДФС_РегистрацияОстановлена;
					КонецЕсли;
				ИначеЕсли ЭтоКвитанцияПоДополнительномуЭлектронномуДокументу Тогда
					Если ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.Успешно Тогда
						лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.ПолученоКвитанциюОтДФС;
					ИначеЕсли ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.Ошибка Тогда
						лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.ПолученоКвитанциюОтДФС;
					ИначеЕсли ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.Предупреджение Тогда //?
						лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.ПолученоКвитанциюОтДФС;
					ИначеЕсли ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.РегистрацияОстановлена Тогда //??
						лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.ПолученоКвитанциюОтДФС;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ИнформацияОКвитанции = Строка(ТекстКвитанции);
			ИнформацияОКвитанции = ИнформацияОКвитанции + "
					|
					|Ім'я файлу:" + ИмяФайла;
			
			лМассивПодписей = ПолучитьМассивПодписейИзМассиваСоответствий(ДанныеКвитанции.Получить("Signers"));
			Если лМассивПодписей.Количество() > 0 Тогда
				ИнформацияОКвитанции = ИнформацияОКвитанции + "
						|
						|Підписи:";
				ДополнитьОписаниеДаннымиПоПодписямКонтрагента(лМассивПодписей, ИнформацияОКвитанции, ОрганизацияПолучатель.Код, Ложь, Ложь);
			КонецЕсли;
			
			
			лДанныеЗаполненияКвитанции = Новый Структура;
			лДанныеЗаполненияКвитанции.Вставить("ВидКвитанции",        ВидКвитанции);
			лДанныеЗаполненияКвитанции.Вставить("Организация",         ОрганизацияПолучатель);
			лДанныеЗаполненияКвитанции.Вставить("ЭлектронныйДокумент", лЭлектронныйДокумент);
			лДанныеЗаполненияКвитанции.Вставить("ЕДРПОУКонтрагента",   ЕДРПОУКонтрагента);
			лДанныеЗаполненияКвитанции.Вставить("ФилиалКонтрагента",   ФилиалКонтрагента);
			Если ВидКвитанции = Перечисления.скEDI_ВидыКвитанций.ДФС Тогда
				лДанныеЗаполненияКвитанции.Вставить("ТипКвитанцииДФС",     ТипКвитанции);
			Иначе
				лДанныеЗаполненияКвитанции.Вставить("ТипКвитанции",        ТипКвитанции);
			КонецЕсли;
			лДанныеЗаполненияКвитанции.Вставить("ТекстКвитанции",      ИнформацияОКвитанции);
			лДанныеЗаполненияКвитанции.Вставить("ТелоКвитанции",       ТелоКвитанции);
			лДанныеЗаполненияКвитанции.Вставить("ВхИсх",               Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий);
			НомерКвитанции = ДанныеКвитанции.Получить("KvtNum");
			лДанныеЗаполненияКвитанции.Вставить("НомерКвитанции",      НомерКвитанции);
			лДанныеЗаполненияКвитанции.Вставить("ФинальнаяКвитанция",  ФинальнаяКвитанция);
			лДанныеЗаполненияКвитанции.Вставить("GateId",              ИдентификаторКвитанцииGateId);
			лДанныеЗаполненияКвитанции.Вставить("РегистрационныйНомерДФС", РегНомер);
			
			лКвитанцияОбъект = Документы.скEDI_Квитанция.СоздатьДокумент();
			лКвитанцияОбъект.Заполнить(лДанныеЗаполненияКвитанции);
			
			//ДатаКвитанции = ТекущаяДата();
			
			лКвитанцияОбъект.Дата = ДатаКвитанции;
			лКвитанцияОбъект.ОбменДанными.Загрузка = Истина;
			лКвитанцияОбъект.Записать();
			//лДатаОперации = ДатаКвитанции; 

			Если ЭтоКвитанцияПоЭлектронномуДокументу Тогда
				лЭлектронныйДокументОбъект = лЭлектронныйДокумент.ПолучитьОбъект();
				Если лСостояниеЭлектронногоДокумента <> Неопределено Тогда
					Если лСостояниеЭлектронногоДокумента = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоКвитанциюОтДФС тогда
						Если лЭлектронныйДокументОбъект.Состояние <> Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС
							и лЭлектронныйДокументОбъект.Состояние <> Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонениеОтДФС
							и лЭлектронныйДокументОбъект.Состояние <> Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС_РегистрацияОстановлена Тогда
							лЭлектронныйДокументОбъект.Состояние = лСостояниеЭлектронногоДокумента;
						КонецЕсли;
					Иначе
						лЭлектронныйДокументОбъект.Состояние = лСостояниеЭлектронногоДокумента;
					КонецЕсли;
				КонецЕсли;
				Если лСостояниеЭлектронногоДокументаРегистрацияВДФС <> Неопределено Тогда
					Если лСостояниеЭлектронногоДокументаРегистрацияВДФС = Перечисления.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоКвитанциюОтДФС_Доставка Тогда
						Если лЭлектронныйДокументОбъект.СостояниеРегистрацияВДФС <> Перечисления.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоПодтверждениеОтДФС
							и лЭлектронныйДокументОбъект.СостояниеРегистрацияВДФС <> Перечисления.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоОтклонениеОтДФС
							и лЭлектронныйДокументОбъект.СостояниеРегистрацияВДФС <> Перечисления.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоПодтверждениеОтДФС_РегистрацияОстановлена Тогда
							лЭлектронныйДокументОбъект.СостояниеРегистрацияВДФС = лСостояниеЭлектронногоДокументаРегистрацияВДФС;
						КонецЕсли;
					Иначе
						лЭлектронныйДокументОбъект.СостояниеРегистрацияВДФС = лСостояниеЭлектронногоДокументаРегистрацияВДФС;
					КонецЕсли;
				КонецЕсли;
				Если лЕстьФинальнаяКвитанцияДФС Тогда
					лЭлектронныйДокументОбъект.ЕстьФинальнаяКвитанцияДФС = Истина;
				КонецЕсли;
				лЭлектронныйДокументОбъект.ПоследняяОперация = лДатаОперации;
				
				Если лЗарегистрированВДФС <> Неопределено Тогда
					Если не лЭлектронныйДокументОбъект.ЗарегистрированВДФС Тогда
						лЭлектронныйДокументОбъект.ЗарегистрированВДФС = лЗарегистрированВДФС;
					КонецЕсли;
				КонецЕсли;
				Если лРегистрационныйНомерДФС <> Неопределено Тогда
					Если лЭлектронныйДокументОбъект.РегистрационныйНомерДФС = "" Тогда
						лЭлектронныйДокументОбъект.РегистрационныйНомерДФС = лРегистрационныйНомерДФС;
					КонецЕсли;
				КонецЕсли;
				Если лДатаРегистрацииВДФС <> Неопределено Тогда
					Если не ЗначениеЗаполнено(лЭлектронныйДокументОбъект.ДатаРегистрацииВДФС) Тогда
						лЭлектронныйДокументОбъект.ДатаРегистрацииВДФС = лДатаРегистрацииВДФС;
					КонецЕсли;
				КонецЕсли;
				Если лПричинаОтклоненияДФС <> "" Тогда
					лЭлектронныйДокументОбъект.ПричинаОтклоненияДФС = лПричинаОтклоненияДФС;
				КонецЕсли;
				
				лВидЭлектронногоДокумента = лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента;
				Если ЗначениеЗаполнено(лЭлектронныйДокументОбъект.Документ1С) Тогда
					//Если лВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная")
					//или	лВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
						скEDI_НастройкиПодКонфигурациюНалоговыеДокументы.УстановитьОтметкуОРегистрацииНалоговогоДокумента(лЭлектронныйДокументОбъект, лЭлектронныйДокументОбъект.Документ1С);
					//КонецЕсли;
				Иначе
					ИмяШаблона = лЭлектронныйДокументОбъект.ИмяШаблона;
					лСоответствиеСРеквизитамиЭлектронногоДокумента = ПолучитьСоответствиеСРеквизитамиИзЭлектронногоДокумента(лЭлектронныйДокументОбъект);
					Если лСоответствиеСРеквизитамиЭлектронногоДокумента <> Неопределено Тогда
						Документ1С = Неопределено;
						Документ1СБылСоздан = Ложь;
						Если скEDI_НастройкиПодКонфигурациюНалоговыеДокументы.ЗагрузитьНалоговыйДокумент1С(Документ1С, ОрганизацияПолучатель, лВидЭлектронногоДокумента, лВидЭлектронногоДокумента.ТипДокумента, Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий, лЭлектронныйДокументОбъект,
							ИмяШаблона, 
							лСоответствиеСРеквизитамиЭлектронногоДокумента, "", Документ1СБылСоздан, Истина, Истина) Тогда
							
							лЭлектронныйДокументОбъект.Документ1С = Документ1С;								
							
							Если не Документ1СБылСоздан Тогда
								//Если лВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная")
								//или	лВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
									скEDI_НастройкиПодКонфигурациюНалоговыеДокументы.УстановитьОтметкуОРегистрацииНалоговогоДокумента(лЭлектронныйДокументОбъект, Документ1С);
								//КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ЗаписатьЭлектронныйДокументСПредварительнымПоискомСвязаных(лЭлектронныйДокументОбъект, лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента, ОрганизацияПолучатель);
				
				Если ВидКвитанции = Перечисления.скEDI_ВидыКвитанций.ДФС Тогда
					тОрганизация = ОрганизацияПолучатель;
					тВидЭлектронногоДокумента = лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента;
					тВхИсх = лЭлектронныйДокументОбъект.ВхИсх;
					тГдеСоздан = лЭлектронныйДокументОбъект.ГдеСоздан;
					тЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
					тСостояние = лЭлектронныйДокументОбъект.Состояние;
					тДокумент1С = лЭлектронныйДокументОбъект.Документ1С;
					тКвитанция = лКвитанцияОбъект.Ссылка;
					тТипКвитанцииДФС = ТипКвитанции;
					тНомерКвитанции = НомерКвитанции;
					тФинальнаяКвитанция = ФинальнаяКвитанция;
					тТекстКвитанции = ИнформацияОКвитанции;
					
					ОбработатьСобытие_ПриПолученииКвитанцииДФС(тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тДокумент1С, тКвитанция, тТипКвитанцииДФС, тНомерКвитанции, тФинальнаяКвитанция, тТекстКвитанции);
				КонецЕсли;
			ИначеЕсли ЭтоКвитанцияПоДополнительномуЭлектронномуДокументу Тогда
				ИзменитьСостояниеЄлектронногоДокумента = Ложь;
				Если лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.ПолученоПодтверждениеОтДФС Тогда
					ИзменитьСостояниеЄлектронногоДокумента = Истина;
				ИначеЕсли лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.ПолученоОтклонениеОтДФС Тогда
					ИзменитьСостояниеЄлектронногоДокумента = Истина;
				ИначеЕсли лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.ПолученоКвитанциюОтДФС Тогда
					Если лЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.ПолученоПодтверждениеОтДФС") Тогда
						// не меняем
					ИначеЕсли лЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.ПолученоОтклонениеОтДФС") Тогда
						// не меняем
					Иначе
						ИзменитьСостояниеЄлектронногоДокумента = Истина;
					КонецЕсли;
				КонецЕсли;
				Если ИзменитьСостояниеЄлектронногоДокумента Тогда
					лЭлектронныйДокументОбъект = лЭлектронныйДокумент.ПолучитьОбъект();
					лЭлектронныйДокументОбъект.Состояние = лСостояниеЭлектронногоДокумента;
					лЭлектронныйДокументОбъект.ДатаПолученияОтвета = лДатаОперации;
					Если лПричинаОтклоненияДФС <> "" Тогда
						лЭлектронныйДокументОбъект.ПричинаОтклоненияДФС = лПричинаОтклоненияДФС;
					КонецЕсли;
					лЭлектронныйДокументОбъект.ПоследняяОперация = лДатаОперации;
					лЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
					лЭлектронныйДокументОбъект.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат лНетОшибокПриОбработкеКвитанции;
КонецФункции

Функция ПолучитьКонтрольныйСимволЕДРПОУдляЮрЛиц(ЕДРПОУ, КонтрольныйСимвол) Экспорт
	Если СтрДлина(ЕДРПОУ) >= 7 Тогда
		М1 = Новый Массив;
		Для н = 1 по 7 Цикл
			ТекСимвол = Сред(ЕДРПОУ, н, 1);
			Если Найти("0123456789", ТекСимвол) > 0 Тогда
				М1.Добавить(Число(ТекСимвол));
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если М1[0] < 3 или М1[0] >= 6 Тогда
			М2 = Новый Массив;
			М2.Добавить(1);
			М2.Добавить(2);
			М2.Добавить(3);
			М2.Добавить(4);
			М2.Добавить(5);
			М2.Добавить(6);
			М2.Добавить(7);
		Иначе
			М2 = Новый Массив;
			М2.Добавить(7);
			М2.Добавить(1);
			М2.Добавить(2);
			М2.Добавить(3);
			М2.Добавить(4);
			М2.Добавить(5);
			М2.Добавить(6);
		КонецЕсли;
		
		Сумма = 0;
		Для н = 0 по 6 Цикл
			Сумма = Сумма + М1[н] * М2[н];
		КонецЦикла;
		Остаток = Сумма % 11;
		Если Остаток < 10 Тогда
			КонтрольныйСимвол = Строка(Остаток);
			Возврат Истина;
		Иначе
			Сумма = 0;
			Для н = 0 по 6 Цикл
				Сумма = Сумма + М1[н] * (М2[н]+2);
			КонецЦикла;
			Остаток = Сумма % 11;
			Если Остаток < 10 Тогда
				КонтрольныйСимвол = Строка(Остаток);
				Возврат Истина;
			ИначеЕсли Остаток = 10 Тогда
				КонтрольныйСимвол = "0";
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ПолучитьЕДРПОУ(ИНН, ЕДРПОУ) Экспорт
	Если СтрДлина(ИНН) = 9 Тогда
		ЕДРПОУ = ИНН;
		Возврат Истина;
	ИначеЕсли СтрДлина(ИНН) = 10 Тогда
		ЕДРПОУ = ИНН;
		Возврат Истина;
	ИначеЕсли СтрДлина(ИНН) = 12 Тогда
		КонтрольныйСимвол = "";
		Если ПолучитьКонтрольныйСимволЕДРПОУдляЮрЛиц(ИНН, КонтрольныйСимвол) Тогда
			ЕДРПОУ = Лев(ИНН, 7) + КонтрольныйСимвол;
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция УдалитьЛидирующиеНулиИНН(Знач ИНН)
	ИНН = СокрЛП(ИНН);
	Пока Лев(ИНН, 1) = "0" Цикл
		ИНН = Сред(ИНН, 2);
	КонецЦикла;
	Возврат ИНН;
КонецФункции

Функция ОбработатьВходящийЭлектронныйДокументGov(ДанныеДокумента, ОрганизацияПолучатель, ЖурналОперации = "")
	лНетОшибокПриОбработкеВходящегоДокумента = Истина;
	
	ИмяФайла = ДанныеДокумента.Получить("FileName");
	
	//лРезультатПоискаЭлектронногоДокументаВБазе = ПроверитьНаличиеЭлектронногоДокументаВБазеПоИмениФайлаДФС(ИмяФайла, ОрганизацияПолучатель);
	//Если лРезультатПоискаЭлектронногоДокументаВБазе = Неопределено Тогда
	Если истина Тогда
		СодержимоеЭлектронногоДокумента = ДанныеДокумента.Получить("Text");
		СодержимоеЭлектронногоДокументаBody = ДанныеДокумента.Получить("Body");
		ДатаСобытия = ТекущаяДата();
		Если СодержимоеЭлектронногоДокумента <> Неопределено Тогда
			лРезультатРазборкиТелаДокументаВСтруктуруСДанными = РазобратьXMLПредставлениеЭлектронногоДокументаВСоответствиеСДанными(СодержимоеЭлектронногоДокументаBody, ЖурналОперации);
			Если лРезультатРазборкиТелаДокументаВСтруктуруСДанными = Неопределено Тогда
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не удалось прочитать данные электронного документа'; uk = 'Не вдалося прочитати дані електронного документа'") + " " + ИмяФайла + ".");
				лНетОшибокПриОбработкеВходящегоДокумента = Ложь;
			Иначе
				лВидЭлектронногоДокумента = ОпределитьВидЭлектронногоДокументаПоИмениШаблона(лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ЕДРПОУВладельцаШаблона, лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ИмяШаблона, лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ВерсияШаблона, лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ТипДокументаMEDoc, ОрганизацияПолучатель);
				Если лВидЭлектронногоДокумента = Неопределено Тогда
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не удалось определить вид полученного электронного документа'; uk = 'Не вдалось визначити вид отриманого електронного документа'"));
					лНетОшибокПриОбработкеВходящегоДокумента = Ложь;
				КонецЕсли;
				
				Если лНетОшибокПриОбработкеВходящегоДокумента Тогда
					ЕДРПОУКонтрагента = ДанныеДокумента.Получить("Edrpou");
					ФилиалКонтрагента = ДанныеДокумента.Получить("Dept");
					ЕДРПОУПолучателя = ДанныеДокумента.Получить("RcvEdrpou");
					ФилиалПолучателя = ДанныеДокумента.Получить("RcvDept");
					
					лДанныеЗаполненияЭлектронногоДокумента = Новый Структура;
					
					лОсновныеДанныеДокумента = Новый Структура;
					лОсновныеДанныеДокумента.Вставить("ВидЭлектронногоДокумента",   лВидЭлектронногоДокумента);
					лОсновныеДанныеДокумента.Вставить("Организация",                ОрганизацияПолучатель);
					лОсновныеДанныеДокумента.Вставить("Состояние",                  Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС);
					лОсновныеДанныеДокумента.Вставить("ИмяФайлаДФС",                ИмяФайла);
					//лОсновныеДанныеДокумента.Вставить("ЕДРПОУКонтрагента",          ЕДРПОУКонтрагента);
					//лОсновныеДанныеДокумента.Вставить("ФилиалКонтрагента",          ФилиалКонтрагента);
					лОсновныеДанныеДокумента.Вставить("РеквизитыЭлектронногоДокумента", лРезультатРазборкиТелаДокументаВСтруктуруСДанными.СоответствиеСДанными);
					лОсновныеДанныеДокумента.Вставить("ЕДРПОУВладельцаШаблона",     лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ЕДРПОУВладельцаШаблона);
					лОсновныеДанныеДокумента.Вставить("ИмяШаблона",                 лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ИмяШаблона);
					лОсновныеДанныеДокумента.Вставить("ВерсияШаблона",              лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ВерсияШаблона);
					
					лРеквизитыШапкиДокумента = лРезультатРазборкиТелаДокументаВСтруктуруСДанными.Таблица0ПерваяСтрока;
					Если лВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
						лНомерЭлектронногоДокумента = "";
						лНомерДокумента = "";
						лДатаЭлектронногоДокумента = "";
						лДатаДокумента = "";
						лЕДРПОУПродавца = "";
						лИННПродавца = "";
						лКодФилиалаПродавца = "";
						лНаименованиеПродавца = "";
						лЕДРПОУПокупателя = "";
						лИННПокупателя = "";
						лКодФилиалаПокупателя = "";
						лНаименованиеПокупателя = "";
						лСуммаЭлектронногоДокумента = 0;
						лСуммаБезНДСЭлектронногоДокумента = 0;
						лСуммаНДСЭлектронногоДокумента = 0;
							
						ПолучитьРеквизитыНалоговойНакладнойИзРеквизитовШапкиЭлектронногоДокумента(лРеквизитыШапкиДокумента, лНомерЭлектронногоДокумента, лНомерДокумента,
							лДатаЭлектронногоДокумента, лДатаДокумента,
							лЕДРПОУПродавца, лИННПродавца, лКодФилиалаПродавца, лНаименованиеПродавца, лЕДРПОУПокупателя, лИННПокупателя, лКодФилиалаПокупателя, лНаименованиеПокупателя,
							лСуммаЭлектронногоДокумента, лСуммаБезНДСЭлектронногоДокумента, лСуммаНДСЭлектронногоДокумента);
						
						лОсновныеДанныеДокумента.Вставить("Номер", лНомерЭлектронногоДокумента);
						лОсновныеДанныеДокумента.Вставить("НомерДокумента", лНомерДокумента);
						лОсновныеДанныеДокумента.Вставить("Дата",  лДатаЭлектронногоДокумента);
						лОсновныеДанныеДокумента.Вставить("ДатаДокумента",  лДатаДокумента);
						лОсновныеДанныеДокумента.Вставить("ИННПродавца",  лИННПродавца);
						лОсновныеДанныеДокумента.Вставить("КодФилиалаПродавца",  лКодФилиалаПродавца);
						лОсновныеДанныеДокумента.Вставить("ИННПокупателя",  лИННПокупателя);
						лОсновныеДанныеДокумента.Вставить("КодФилиалаПокупателя",  лКодФилиалаПокупателя);
						лОсновныеДанныеДокумента.Вставить("СуммаДокумента",  лСуммаЭлектронногоДокумента);
						лОсновныеДанныеДокумента.Вставить("СуммаБезНДС",  лСуммаБезНДСЭлектронногоДокумента);
						лОсновныеДанныеДокумента.Вставить("СуммаНДС",  лСуммаНДСЭлектронногоДокумента);
						
						лОсновныеДанныеДокумента.Вставить("ДатаСоздания",     ДатаСобытия);
						лОсновныеДанныеДокумента.Вставить("ПоследняяОперация", ДатаСобытия);
						// 2017-09-27
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Получено документ'; uk = 'Отримано документ'") + " """ + лВидЭлектронногоДокумента.Наименование + """ №" + Строка(лНомерЭлектронногоДокумента) + " " + НСтр("ru = 'от'; uk = 'від'") + " " + Формат(лДатаЭлектронногоДокумента, "ДФ=dd.MM.yyyy"), , Ложь);
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'ИНН Продавца'; uk = 'ІПН Продавця'") + ": """ + лИННПродавца + ?(ЗначениеЗаполнено(лКодФилиалаПродавца), " (" + лКодФилиалаПродавца + ")", "") + """", , Ложь);
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'ИНН Покупателя'; uk = 'ІПН Покупця'") + ": """ + лИННПокупателя + ?(ЗначениеЗаполнено(лКодФилиалаПокупателя), " (" + лКодФилиалаПокупателя + ")", "") + """", , Ложь);
						// ...2017-09-27
					ИначеЕсли лВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
						лНомерЭлектронногоДокумента = "";
						лНомерДокумента = "";
						лДатаЭлектронногоДокумента = "";
						лДатаДокумента = "";
						лЕДРПОУПродавца = "";
						лИННПродавца = "";
						лКодФилиалаПродавца = "";
						лНаименованиеПродавца = "";
						лЕДРПОУПокупателя = "";
						лИННПокупателя = "";
						лКодФилиалаПокупателя = "";
						лНаименованиеПокупателя = "";
						лРегистрируетсяВЕРННПокупателем = Ложь;
						лСуммаЭлектронногоДокумента = 0;
						лСуммаБезНДСЭлектронногоДокумента = 0;
						лСуммаНДСЭлектронногоДокумента = 0;
							
						ПолучитьРеквизитыПриложения2ИзРеквизитовШапкиЭлектронногоДокумента(лРеквизитыШапкиДокумента, лНомерЭлектронногоДокумента, лНомерДокумента,
							лДатаЭлектронногоДокумента, лДатаДокумента,
							лЕДРПОУПродавца, лИННПродавца, лКодФилиалаПродавца, лНаименованиеПродавца, лЕДРПОУПокупателя, лИННПокупателя, лКодФилиалаПокупателя, лНаименованиеПокупателя, лРегистрируетсяВЕРННПокупателем,
							лСуммаЭлектронногоДокумента, лСуммаБезНДСЭлектронногоДокумента, лСуммаНДСЭлектронногоДокумента);
						
						лОсновныеДанныеДокумента.Вставить("Номер", лНомерЭлектронногоДокумента);
						лОсновныеДанныеДокумента.Вставить("НомерДокумента", лНомерДокумента);
						лОсновныеДанныеДокумента.Вставить("Дата",  лДатаЭлектронногоДокумента);
						лОсновныеДанныеДокумента.Вставить("ДатаДокумента",  лДатаДокумента);
						лОсновныеДанныеДокумента.Вставить("ИННПродавца",  лИННПродавца);
						лОсновныеДанныеДокумента.Вставить("КодФилиалаПродавца",  лКодФилиалаПродавца);
						лОсновныеДанныеДокумента.Вставить("ИННПокупателя",  лИННПокупателя);
						лОсновныеДанныеДокумента.Вставить("КодФилиалаПокупателя",  лКодФилиалаПокупателя);
						лОсновныеДанныеДокумента.Вставить("РегистрируетсяВЕРННПокупателем",  лРегистрируетсяВЕРННПокупателем);
						лОсновныеДанныеДокумента.Вставить("СуммаДокумента",  лСуммаЭлектронногоДокумента);
						лОсновныеДанныеДокумента.Вставить("СуммаБезНДС",  лСуммаБезНДСЭлектронногоДокумента);
						лОсновныеДанныеДокумента.Вставить("СуммаНДС",  лСуммаНДСЭлектронногоДокумента);
						
						лОсновныеДанныеДокумента.Вставить("ДатаСоздания",     ДатаСобытия);
						лОсновныеДанныеДокумента.Вставить("ПоследняяОперация", ДатаСобытия);
						// 2017-09-27
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Получено документ'; uk = 'Отримано документ'") + " """ + лВидЭлектронногоДокумента.Наименование + """ №" + Строка(лНомерЭлектронногоДокумента) + " " + НСтр("ru = 'от'; uk = 'від'") + " " + Формат(лДатаЭлектронногоДокумента, "ДФ=dd.MM.yyyy"), , Ложь);
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'ИНН Продавца'; uk = 'ІПН Продавця'") + ": """ + лИННПродавца + ?(ЗначениеЗаполнено(лКодФилиалаПродавца), " (" + лКодФилиалаПродавца + ")", "") + """", , Ложь);
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'ИНН Покупателя'; uk = 'ІПН Покупця'") + ": """ + лИННПокупателя + ?(ЗначениеЗаполнено(лКодФилиалаПокупателя), " (" + лКодФилиалаПокупателя + ")", "") + """", , Ложь);
						// ...2017-09-27
					Иначе
						Возврат Ложь; //2020-12-10
					КонецЕсли;
					
					ДанныеПоОрганизаци = скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеПоОгранизации(ОрганизацияПолучатель.Организация1С);
					Если ЗначениеЗаполнено(ДанныеПоОрганизаци.ИНН) и лИННПродавца = ДанныеПоОрганизаци.ИНН Тогда
						Если ЗначениеЗаполнено(лЕДРПОУПокупателя) Тогда
							лОсновныеДанныеДокумента.Вставить("ЕДРПОУКонтрагента", лЕДРПОУПокупателя);
							лОсновныеДанныеДокумента.Вставить("ФилиалКонтрагента", лКодФилиалаПокупателя);
						Иначе
							ЕДРПОУПокупателя = "";
							Если ПолучитьЕДРПОУ(лИННПокупателя, ЕДРПОУПокупателя) Тогда
								лОсновныеДанныеДокумента.Вставить("ЕДРПОУКонтрагента", ЕДРПОУПокупателя);
								лОсновныеДанныеДокумента.Вставить("ФилиалКонтрагента", лКодФилиалаПокупателя);
							Иначе
								лОсновныеДанныеДокумента.Вставить("ЕДРПОУКонтрагента", "");
								лОсновныеДанныеДокумента.Вставить("ФилиалКонтрагента", лКодФилиалаПокупателя);
							КонецЕсли;
						КонецЕсли;
						ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий;
					ИначеЕсли ЗначениеЗаполнено(ДанныеПоОрганизаци.ИНН) и лИННПокупателя = ДанныеПоОрганизаци.ИНН Тогда
						Если ЗначениеЗаполнено(лЕДРПОУПродавца) Тогда
							лОсновныеДанныеДокумента.Вставить("ЕДРПОУКонтрагента", лЕДРПОУПродавца);
							лОсновныеДанныеДокумента.Вставить("ФилиалКонтрагента", лКодФилиалаПродавца);
						Иначе
							ЕДРПОУПродавца = "";
							Если ПолучитьЕДРПОУ(лИННПродавца, ЕДРПОУПродавца) Тогда
								лОсновныеДанныеДокумента.Вставить("ЕДРПОУКонтрагента", ЕДРПОУПродавца);
								лОсновныеДанныеДокумента.Вставить("ФилиалКонтрагента", лКодФилиалаПродавца);
							Иначе
								лОсновныеДанныеДокумента.Вставить("ЕДРПОУКонтрагента", "");
								лОсновныеДанныеДокумента.Вставить("ФилиалКонтрагента", лКодФилиалаПродавца);
							КонецЕсли;
						КонецЕсли;
						ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий;
					ИначеЕсли ЗначениеЗаполнено(ДанныеПоОрганизаци.ИНН) Тогда
						Возврат Ложь;
					Иначе
						ЕДРПОУПродавца = "";
						Если не ПолучитьЕДРПОУ(лИННПродавца, ЕДРПОУПродавца) Тогда
							//ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не удалось прочитать данные электронного документа'; uk = 'Не вдалося прочитати дані електронного документа'") + " " + ИмяФайла + ".");
							Возврат Ложь;
						КонецЕсли;
						ЕДРПОУПокупателя = "";
						Если не ПолучитьЕДРПОУ(лИННПокупателя, ЕДРПОУПокупателя) Тогда
							//ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не удалось прочитать данные электронного документа'; uk = 'Не вдалося прочитати дані електронного документа'") + " " + ИмяФайла + ".");
							Возврат Ложь;
						КонецЕсли;
						Если ОрганизацияПолучатель.Код = ЕДРПОУПродавца Тогда
							лОсновныеДанныеДокумента.Вставить("ЕДРПОУКонтрагента",          ЕДРПОУПокупателя);
							лОсновныеДанныеДокумента.Вставить("ФилиалКонтрагента",          лКодФилиалаПокупателя);
							ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий;
						ИначеЕсли ОрганизацияПолучатель.Код = ЕДРПОУПокупателя Тогда
							лОсновныеДанныеДокумента.Вставить("ЕДРПОУКонтрагента",          ЕДРПОУПродавца);
							лОсновныеДанныеДокумента.Вставить("ФилиалКонтрагента",          лКодФилиалаПродавца);
							ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий;
						Иначе
							//ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не удалось прочитать данные электронного документа'; uk = 'Не вдалося прочитати дані електронного документа'") + " " + ИмяФайла + ".");
							Возврат Ложь;
						КонецЕсли;
					КонецЕсли;
					
					
					лОсновныеДанныеДокумента.Вставить("ВхИсх", ВхИсх);
					лОсновныеДанныеДокумента.Вставить("ЗарегистрированВДФС", Истина);
					лОсновныеДанныеДокумента.Вставить("СостояниеРегистрацияВДФС", Перечисления.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоПодтверждениеОтДФС);

					лДанныеЗаполненияЭлектронногоДокумента.Вставить("ОсновныеДанные", лОсновныеДанныеДокумента);
					
					лРезультатПоискаЭлектронногоДокументаВБазе = ПроверитьНаличиеЭлектронногоДокументаВБазеПоИмениФайлаДФС(ИмяФайла, ОрганизацияПолучатель);
					Если лРезультатПоискаЭлектронногоДокументаВБазе = Неопределено Тогда
						ЭтоНовыйДокумент = Истина;
						лЭлектронныйДокументОбъект = Документы.скEDI_ЭлектронныйДокумент.СоздатьДокумент();
						лЭлектронныйДокументОбъект.Заполнить(лДанныеЗаполненияЭлектронногоДокумента);
					Иначе
						ЭтоНовыйДокумент = Ложь;
						лЭлектронныйДокументОбъект = лРезультатПоискаЭлектронногоДокументаВБазе.ПолучитьОбъект();
						лЭлектронныйДокументОбъект.Заполнить(лДанныеЗаполненияЭлектронногоДокумента);
					КонецЕсли;
					
					//
					ИнформацияОПолученомДокументе = НСтр("ru = 'Отправитель: '; uk = 'Відправник: '") + ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ФилиалКонтрагента), "(" + ФилиалКонтрагента + ")", "");
					ИнформацияОПолученомДокументе = ИнформацияОПолученомДокументе + "
					|"
					+ НСтр("ru = 'Получатель: '; uk = 'Одержувач: '") + ЕДРПОУПолучателя + ?(ЗначениеЗаполнено(ФилиалПолучателя), "(" + ФилиалПолучателя + ")", "");
					ИнформацияОПолученомДокументе = ИнформацияОПолученомДокументе + "
					|
					|"
					+ НСтр("ru = 'Способ приема: Сервер ГНС'; uk = 'Спосіб прийому: Сервер ДПС'") + "
					|"
					+ НСтр("ru = 'Имя файла: '; uk = 'Ім''я файлу: '") + ИмяФайла + "
					|
					|Текст:
					|"
					+ НСтр("ru = 'ЕГРПОУ: '; uk = 'ЄДРПОУ: '") + ЕДРПОУКонтрагента;
					Если лРезультатРазборкиТелаДокументаВСтруктуруСДанными.НаименованиеКонтрагента <> "" Тогда
						ИнформацияОПолученомДокументе = ИнформацияОПолученомДокументе + "
						|"
						+ НСтр("ru = 'НАЗВАНИЕ: '; uk = 'НАЗВА: '") + лРезультатРазборкиТелаДокументаВСтруктуруСДанными.НаименованиеКонтрагента;
					КонецЕсли;
					ИнформацияОПолученомДокументе = ИнформацияОПолученомДокументе + "
					|ДАТА: " + Формат(лОсновныеДанныеДокумента.ДатаДокумента, "ДФ=dd.MM.yyyy") + "
					|НОМЕР ДОКУМЕНТА: " + лОсновныеДанныеДокумента.НомерДокумента;
					//
					
					лМассивПодписей = ПолучитьМассивПодписейИзМассиваСоответствий(ДанныеДокумента.Получить("Signers"));
					
					ИнформацияОПолученомДокументе = ИнформацияОПолученомДокументе + "
							|
							|"
							+ НСтр("ru = 'Подписи:'; uk = 'Підписи:'");
					ДополнитьОписаниеДаннымиПоПодписямКонтрагента(лМассивПодписей, ИнформацияОПолученомДокументе, Неопределено, Ложь, Ложь);
					лМассивДанныхПоПодписямКонтрагента = СформироватьМассивДанныхПоПодписямКонтрагента(лМассивПодписей);
					лЭлектронныйДокументОбъект.ПодписиКонтрагента.Очистить();
					Для Каждого лИнформацияОПодписи Из лМассивДанныхПоПодписямКонтрагента Цикл
						лНоваяСтрокаПодписиКонтрагента = лЭлектронныйДокументОбъект.ПодписиКонтрагента.Добавить();
						ЗаполнитьЗначенияСвойств(лНоваяСтрокаПодписиКонтрагента, лИнформацияОПодписи);
					КонецЦикла;
					
					Если ЗначениеЗаполнено(лЭлектронныйДокументОбъект.Документ1С) Тогда
						Если лВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная")
						или	лВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
							скEDI_НастройкиПодКонфигурациюНалоговыеДокументы.УстановитьОтметкуОРегистрацииНалоговогоДокумента(лЭлектронныйДокументОбъект, лЭлектронныйДокументОбъект.Документ1С, СодержимоеЭлектронногоДокументаBody);
						КонецЕсли;
					Иначе
						Документ1С = Неопределено;
						Документ1СБылСоздан = Ложь;
						Если скEDI_НастройкиПодКонфигурациюНалоговыеДокументы.ЗагрузитьНалоговыйДокумент1С(Документ1С, ОрганизацияПолучатель, лВидЭлектронногоДокумента, лВидЭлектронногоДокумента.ТипДокумента, Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий, лЭлектронныйДокументОбъект,
							лРезультатРазборкиТелаДокументаВСтруктуруСДанными.ИмяШаблона, 
							лРезультатРазборкиТелаДокументаВСтруктуруСДанными.СоответствиеСДанными, "", Документ1СБылСоздан, Истина, Истина, СодержимоеЭлектронногоДокументаBody) Тогда
							
							лЭлектронныйДокументОбъект.Документ1С = Документ1С;								
							
							Если не Документ1СБылСоздан Тогда
								Если лВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная")
								или	лВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
									скEDI_НастройкиПодКонфигурациюНалоговыеДокументы.УстановитьОтметкуОРегистрацииНалоговогоДокумента(лЭлектронныйДокументОбъект, Документ1С, СодержимоеЭлектронногоДокументаBody);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					ЗаписатьЭлектронныйДокументСПредварительнымПоискомСвязаных(лЭлектронныйДокументОбъект, лВидЭлектронногоДокумента, ОрганизацияПолучатель);
					
					//СодержимоеЭлектронныхДокументовМенеджерЗаписи = РегистрыСведений.скEDI_СодержимоеЭлектронныхДокументов.СоздатьМенеджерЗаписи();
					//СодержимоеЭлектронныхДокументовМенеджерЗаписи.ЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
					//Если ЭтоНовыйДокумент Тогда
					//	СодержимоеЭлектронныхДокументовМенеджерЗаписи.НомерВерсии = 1;
					//Иначе
					//	СодержимоеЭлектронныхДокументовМенеджерЗаписи.НомерВерсии = ПолучитьСледующийНомерВерсииСодержанияЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка);						
					//КонецЕсли;
					//СодержимоеЭлектронныхДокументовМенеджерЗаписи.ТелоДокумента = СодержимоеЭлектронногоДокументаBody;
					//СодержимоеЭлектронныхДокументовМенеджерЗаписи.Дата = ДатаСобытия;
					//СодержимоеЭлектронныхДокументовМенеджерЗаписи.ДокументДФС = Истина;
					////СодержимоеЭлектронныхДокументовМенеджерЗаписи.ПолученоОтКонтрагентаСПомощью = Перечисления.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезДФС;
					//СодержимоеЭлектронныхДокументовМенеджерЗаписи.Записать(Истина);
					скEDI_ВнешниеХранилища.СохранитьСодержимоеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка,
						?(ЭтоНовыйДокумент, 1, ПолучитьСледующийНомерВерсииСодержанияЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка)),
						СодержимоеЭлектронногоДокументаBody,
						Неопределено,
						Неопределено,
						"",
						Неопределено,
						"",
						Неопределено,
						"",
						Неопределено,
						ДатаСобытия,
						"",
						0,
						"",
						Истина,
						Ложь,
						Перечисления.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ПустаяСсылка(),
						Ложь
					);
					
					ЗафиксироватьСобытиеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка, Перечисления.скEDI_СобытияЭлектронныхДокументов.Получение, ИнформацияОПолученомДокументе);
					
					
					ДатыРегистрацииВЕРННМенеджерЗаписи = РегистрыСведений.скEDI_УстановкаДатыРегистрацииВЕРНН_ЭлектронныйДокумент.СоздатьМенеджерЗаписи();
					ДатыРегистрацииВЕРННМенеджерЗаписи.Организация = ОрганизацияПолучатель;
					ДатыРегистрацииВЕРННМенеджерЗаписи.ЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
					ДатыРегистрацииВЕРННМенеджерЗаписи.ВхИсх = лЭлектронныйДокументОбъект.ВхИсх;
					ДатыРегистрацииВЕРННМенеджерЗаписи.ТипДокумента = лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента.ТипДокумента;
					ДатыРегистрацииВЕРННМенеджерЗаписи.ИННПродавца = УдалитьЛидирующиеНулиИНН(лЭлектронныйДокументОбъект.ИННПродавца);
					ДатыРегистрацииВЕРННМенеджерЗаписи.КодФилиалаПродавца = лЭлектронныйДокументОбъект.КодФилиалаПродавца;
					ДатыРегистрацииВЕРННМенеджерЗаписи.ДатаДокумента = лЭлектронныйДокументОбъект.ДатаДокумента;
					ДатыРегистрацииВЕРННМенеджерЗаписи.НомерДокумента = лЭлектронныйДокументОбъект.НомерДокумента;
					//ДатыРегистрацииВЕРННМенеджерЗаписи.СпецРежимНалогообложения = "";
					ДатыРегистрацииВЕРННМенеджерЗаписи.ДатаПолучения = ДатаСобытия;
					ДатыРегистрацииВЕРННМенеджерЗаписи.Записать(Истина);
					
					
					УстановитьСнятьОтметкуОбработано(лЭлектронныйДокументОбъект.Ссылка, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
	КонецЕсли;
	
	Возврат лНетОшибокПриОбработкеВходящегоДокумента;
КонецФункции


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПроверитьНаличиеЭлектронногоДокументаВБазе(ИмяФайла, ОрганизацияEDI)
	Перем лРезультат;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	скEDI_ЭлектронныйДокумент.Ссылка
	|ИЗ
	|	Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
	|ГДЕ
	|	НЕ скEDI_ЭлектронныйДокумент.ПометкаУдаления
	|	И скEDI_ЭлектронныйДокумент.ИмяФайла = &ИмяФайла
	|	И скEDI_ЭлектронныйДокумент.Организация = &ОрганизацияEDI";
	Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
	Запрос.УстановитьПараметр("ОрганизацияEDI", ОрганизацияEDI);
	
	лВыборкаРезультатовЗапроса = Запрос.Выполнить().Выбрать();
	Если лВыборкаРезультатовЗапроса.Следующий() Тогда
		
		лРезультат = лВыборкаРезультатовЗапроса.Ссылка;
		
	КонецЕсли;
	
	Возврат лРезультат;
	
КонецФункции // ПроверитьНаличиеЭлектронногоДокументаВБазе()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПроверитьНаличиеЭлектронногоДокументаВБазеПоСодержанию(ИмяФайла, ОрганизацияEDI)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	скEDI_СодержимоеЭлектронныхДокументов.ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.скEDI_СодержимоеЭлектронныхДокументов КАК скEDI_СодержимоеЭлектронныхДокументов
	|ГДЕ
	|	скEDI_СодержимоеЭлектронныхДокументов.ИмяФайла = &ИмяФайла
	|	И скEDI_СодержимоеЭлектронныхДокументов.ЭлектронныйДокумент.Организация = &ОрганизацияEDI";
	Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
	Запрос.УстановитьПараметр("ОрганизацияEDI", ОрганизацияEDI);
	
	ВыборкаРезультатовЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультатовЗапроса.Следующий() Тогда
		Возврат ВыборкаРезультатовЗапроса.ЭлектронныйДокумент;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	скEDI_ПовторныеОтправкиЭлектронныхДокументов.ЭлектронныйДокумент
		|ИЗ
		|	РегистрСведений.скEDI_ПовторныеОтправкиЭлектронныхДокументов КАК скEDI_ПовторныеОтправкиЭлектронныхДокументов
		|ГДЕ
		|	скEDI_ПовторныеОтправкиЭлектронныхДокументов.ИмяФайла = &ИмяФайла
		|	И скEDI_ПовторныеОтправкиЭлектронныхДокументов.Организация = &Организация";
		Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
		Запрос.УстановитьПараметр("Организация", ОрганизацияEDI);
		
		ВыборкаРезультатовЗапроса = Запрос.Выполнить().Выбрать();
		Если ВыборкаРезультатовЗапроса.Следующий() Тогда
			Возврат ВыборкаРезультатовЗапроса.ЭлектронныйДокумент;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецФункции // ПроверитьНаличиеЭлектронногоДокументаВБазе()

Функция ПроверитьНаличиеЭлектронногоДокументаВБазеПоИмениФайлаДФС(ИмяФайла, ОрганизацияEDI)
	Перем лРезультат;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	скEDI_ЭлектронныйДокумент.Ссылка
	|ИЗ
	|	Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
	|ГДЕ
	|	НЕ скEDI_ЭлектронныйДокумент.ПометкаУдаления
	|	И скEDI_ЭлектронныйДокумент.ИмяФайлаДФС = &ИмяФайла
	|	И скEDI_ЭлектронныйДокумент.Организация = &ОрганизацияEDI";
	Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
	Запрос.УстановитьПараметр("ОрганизацияEDI", ОрганизацияEDI);
	
	лВыборкаРезультатовЗапроса = Запрос.Выполнить().Выбрать();
	Если лВыборкаРезультатовЗапроса.Следующий() Тогда
		
		лРезультат = лВыборкаРезультатовЗапроса.Ссылка;
		
	КонецЕсли;
	
	Возврат лРезультат;
	
КонецФункции // ПроверитьНаличиеЭлектронногоДокументаВБазе()

Функция ПроверитьНаличиеДополнительногоЭлектронногоДокументаВБазеПоИмениФайлаДФС(ИмяФайла, ОрганизацияEDI)
	Перем лРезультат;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	скEDI_ЗапросНаПолучениеВедомостейЕРНН.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.скEDI_ЗапросНаПолучениеВедомостейЕРНН КАК скEDI_ЗапросНаПолучениеВедомостейЕРНН
	|ГДЕ
	|	НЕ скEDI_ЗапросНаПолучениеВедомостейЕРНН.ПометкаУдаления
	|	И скEDI_ЗапросНаПолучениеВедомостейЕРНН.ИмяФайлаДФС = &ИмяФайла
	|	И скEDI_ЗапросНаПолучениеВедомостейЕРНН.ОрганизацияEDI = &ОрганизацияEDI
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	скEDI_ЗапросНаПолучениеЛимитаРегистрацииВЕРНН.Ссылка
	|ИЗ
	|	Документ.скEDI_ЗапросНаПолучениеЛимитаРегистрацииВЕРНН КАК скEDI_ЗапросНаПолучениеЛимитаРегистрацииВЕРНН
	|ГДЕ
	|	НЕ скEDI_ЗапросНаПолучениеЛимитаРегистрацииВЕРНН.ПометкаУдаления
	|	И скEDI_ЗапросНаПолучениеЛимитаРегистрацииВЕРНН.ИмяФайлаДФС = &ИмяФайла
	|	И скEDI_ЗапросНаПолучениеЛимитаРегистрацииВЕРНН.ОрганизацияEDI = &ОрганизацияEDI
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	скEDI_ЗапросНаПолучениеРеквизитовЭлектронногоСчета.Ссылка
	|ИЗ
	|	Документ.скEDI_ЗапросНаПолучениеРеквизитовЭлектронногоСчета КАК скEDI_ЗапросНаПолучениеРеквизитовЭлектронногоСчета
	|ГДЕ
	|	НЕ скEDI_ЗапросНаПолучениеРеквизитовЭлектронногоСчета.ПометкаУдаления
	|	И скEDI_ЗапросНаПолучениеРеквизитовЭлектронногоСчета.ИмяФайлаДФС = &ИмяФайла
	|	И скEDI_ЗапросНаПолучениеРеквизитовЭлектронногоСчета.ОрганизацияEDI = &ОрганизацияEDI
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	скEDI_ЗапросНаПолучениеВедомостейЕРАН.Ссылка
	|ИЗ
	|	Документ.скEDI_ЗапросНаПолучениеВедомостейЕРАН КАК скEDI_ЗапросНаПолучениеВедомостейЕРАН
	|ГДЕ
	|	НЕ скEDI_ЗапросНаПолучениеВедомостейЕРАН.ПометкаУдаления
	|	И скEDI_ЗапросНаПолучениеВедомостейЕРАН.ИмяФайлаДФС = &ИмяФайла
	|	И скEDI_ЗапросНаПолучениеВедомостейЕРАН.ОрганизацияEDI = &ОрганизацияEDI";
	Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
	Запрос.УстановитьПараметр("ОрганизацияEDI", ОрганизацияEDI);
	
	лВыборкаРезультатовЗапроса = Запрос.Выполнить().Выбрать();
	Если лВыборкаРезультатовЗапроса.Следующий() Тогда
		
		лРезультат = лВыборкаРезультатовЗапроса.Ссылка;
		
	КонецЕсли;
	
	Возврат лРезультат;
	
КонецФункции // ПроверитьНаличиеЭлектронногоДокументаВБазе()

Процедура ОтправитьКвитанциюОбРезультатеПриемаДокументаЭлектронногоДокумента(ДокументПолученУспешно, ДанныеДокумента, Организация, ЭлектронныйДокументСсылка, НастройкиПодписиШифрования, ЖурналОперации = "")
	
	Если ЭлектронныйДокументСсылка = Неопределено Тогда
		
	Иначе
		Если ЭлектронныйДокументСсылка.ГдеСоздан = Перечисления.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	лПараметрыОтправкиКвитанции = Новый Структура;
	лПараметрыОтправкиКвитанции.Вставить("Edrpou",    ДанныеДокумента.Получить("RcvEdrpou"));
	лПараметрыОтправкиКвитанции.Вставить("Dept",      ДанныеДокумента.Получить("RcvDept"));
	лПараметрыОтправкиКвитанции.Вставить("PrgId",     Организация.ИдентификаторПрограммы);
	лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ДанныеДокумента.Получить("Edrpou"));
	лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ДанныеДокумента.Получить("Dept"));
	лПараметрыОтправкиКвитанции.Вставить("FileName",  ДанныеДокумента.Получить("FileName"));
	
	СтрокаПодключенияEDI = Неопределено;
	СерверEDI = Неопределено;
	ПортEDI = Неопределено;
	ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиКвитанции, НастройкиПодписиШифрования, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
	
	РежимСинхронизации = Ложь;
	ПолучитьРежимСинхронизации(РежимСинхронизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
	Если РежимСинхронизации Тогда
		лПараметрыОтправкиКвитанции.Вставить("DocVer", ДанныеДокумента.Получить("DocVer"));
	КонецЕсли;
	
	лРезультатОтправкиКвитанции = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/" + ?(ДокументПолученУспешно, "rcvdocok", "rcvdocerr"), лПараметрыОтправкиКвитанции, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
	
	тAnsFileName = Неопределено;
	лРезультатОтправкиКвитанции.Свойство("AnsFileName", тAnsFileName);
	тDocVer = Неопределено;
	лРезультатОтправкиКвитанции.Свойство("DocVer", тDocVer);
	
	Если ЗначениеЗаполнено(ЭлектронныйДокументСсылка) Тогда
		Если ЗначениеЗаполнено(тAnsFileName) или ЗначениеЗаполнено(тDocVer) Тогда
			ИнформацияООтправленойКвитанции = НСтр("ru = 'Отправитель: '; uk = 'Відправник: '") + Строка(лПараметрыОтправкиКвитанции.Edrpou) + ?(ЗначениеЗаполнено(лПараметрыОтправкиКвитанции.Dept), "(" + Строка(лПараметрыОтправкиКвитанции.Dept) + ")", "");
			ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + "
			|"
			+ НСтр("ru = 'Получатель: '; uk = 'Одержувач: '") + Строка(лПараметрыОтправкиКвитанции.RcvEdrpou) + ?(ЗначениеЗаполнено(лПараметрыОтправкиКвитанции.RcvDept), "(" + Строка(лПараметрыОтправкиКвитанции.RcvDept) + ")", "");
			ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + "
			|
			|"
			+ НСтр("ru = 'Имя файла: '; uk = 'Ім''я файлу: '") + Строка(лПараметрыОтправкиКвитанции.FileName) + "
			|"
			+ НСтр("ru = 'Имя файла квитанции: '; uk = 'Ім''я файлу квитанції: '") + тAnsFileName + "
			|
			|"
			+ НСтр("ru = 'Сообщение о доставке документа'; uk = 'Повідомлення про доставку документа.'");
			
			лДанныеЗаполненияКвитанции = Новый Структура;
			лДанныеЗаполненияКвитанции.Вставить("ВидКвитанции",        ПредопределенноеЗначение("Перечисление.скEDI_ВидыКвитанций.СДО"));
			лДанныеЗаполненияКвитанции.Вставить("Организация",         Организация);
			лДанныеЗаполненияКвитанции.Вставить("ЭлектронныйДокумент", ЭлектронныйДокументСсылка);
			лДанныеЗаполненияКвитанции.Вставить("ИмяФайла",            тAnsFileName);
			лДанныеЗаполненияКвитанции.Вставить("DocVer",              тDocVer);
			лДанныеЗаполненияКвитанции.Вставить("ЕДРПОУКонтрагента",   лПараметрыОтправкиКвитанции.RcvEdrpou);
			лДанныеЗаполненияКвитанции.Вставить("ФилиалКонтрагента",   лПараметрыОтправкиКвитанции.RcvDept);
			лДанныеЗаполненияКвитанции.Вставить("ТипКвитанции",        ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.СообщениеОДоставке"));
			лДанныеЗаполненияКвитанции.Вставить("ТекстКвитанции",      ИнформацияООтправленойКвитанции);
			тBody = Неопределено;
			Если лРезультатОтправкиКвитанции.Свойство("Body", тBody) Тогда
				лДанныеЗаполненияКвитанции.Вставить("ТелоКвитанции",       тBody);
			КонецЕсли;
			лДанныеЗаполненияКвитанции.Вставить("ВхИсх",               Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий);
			
			лКвитанцияОбъект = Документы.скEDI_Квитанция.СоздатьДокумент();
			лКвитанцияОбъект.Заполнить(лДанныеЗаполненияКвитанции);
			лКвитанцияОбъект.ОбменДанными.Загрузка = Истина;
			лКвитанцияОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если лРезультатОтправкиКвитанции.Code = 0 Тогда
	ИначеЕсли лРезультатОтправкиКвитанции.Code = 56 Тогда
		// 56 - Помилка відправки, для документа є не отримані відповіді. Виконайте прийом та обробку вхідних повідомлень
		// Квитанция о доставке была отправлена из другого ПО (скорей всего)
	Иначе
		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка отправки квитанции'; uk = 'Помилка відправки квитанції'") + ": " + лРезультатОтправкиКвитанции.Message);
	КонецЕсли;
КонецПроцедуры


// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура УдалитьВходящийЭлектронныйДокументССервераДФС_GovRk(ДанныеДокумента, НастройкиПодписиШифрования, ЖурналОперации = "")
	лПараметрыОтправкиКвитанцииПодтвержденияДоставки = Новый Структура;
	лПараметрыОтправкиКвитанцииПодтвержденияДоставки.Вставить("GateId",    ДанныеДокумента.Получить("GateId"));
	//лПараметрыОтправкиКвитанцииПодтвержденияДоставки.Вставить("Edrpou",    ДанныеДокумента.Получить("RcvEdrpou"));
	//лПараметрыОтправкиКвитанцииПодтвержденияДоставки.Вставить("Dept",      ДанныеДокумента.Получить("RcvDept"));
	//лПараметрыОтправкиКвитанцииПодтвержденияДоставки.Вставить("RcvEdrpou", ДанныеДокумента.Получить("Edrpou"));
	//лПараметрыОтправкиКвитанцииПодтвержденияДоставки.Вставить("RcvDept",   ДанныеДокумента.Получить("Dept"));
	лПараметрыОтправкиКвитанцииПодтвержденияДоставки.Вставить("FileName",  ДанныеДокумента.Получить("FileName"));
	лПараметрыОтправкиКвитанцииПодтвержденияДоставки.Вставить("Ticket",  ДанныеДокумента.Получить("Ticket"));
	лПараметрыОтправкиКвитанцииПодтвержденияДоставки.Вставить("DocType",  ДанныеДокумента.Получить("DocType"));
	//лПараметрыОтправкиКвитанцииПодтвержденияДоставки.Вставить("DocName",   );
	СтрокаПодключенияEDI = Неопределено;
	СерверEDI = Неопределено;
	ПортEDI = Неопределено;
	ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиКвитанцииПодтвержденияДоставки, НастройкиПодписиШифрования, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
	//лПараметрыОтправкиКвитанцииПодтвержденияДоставки.Вставить("Cert",      НастройкиПодписиШифрования.ТелоСертификата);
	//лПараметрыОтправкиКвитанцииПодтвержденияДоставки.Вставить("Key",       НастройкиПодписиШифрования.ТелоСекретногоКлюча);
	//лПараметрыОтправкиКвитанцииПодтвержденияДоставки.Вставить("Password",  НастройкиПодписиШифрования.ПарольСекретногоКлюча);
	
	Если Не УдалитьВходящееСообщениеССервераДФСРкСПомощьюEDIПровайдера(лПараметрыОтправкиКвитанцииПодтвержденияДоставки, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI) Тогда
		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не удалось отправить сообщение по удалению документа с Сервера ГНС'; uk = 'Не вдалось відправити повідомлення по видаленню документа с Сервера ДПС'") + ": " + ДанныеДокумента.Получить("FileName"));
	КонецЕсли;
КонецПроцедуры

Функция ВыделитьПричинуИзТекстаКвитанцииПоМаркеру(ТекстКвитанции, Маркер, Причина)
	НачалоТекстаМаркера = Найти(ВРег(ТекстКвитанции), ВРег(Маркер));
	Если НачалоТекстаМаркера = 0 Тогда
		Возврат Ложь;
	Иначе
		НачалоТекстаМаркера = НачалоТекстаМаркера + СтрДлина(Маркер);
		Причина = СокрЛП(Сред(ТекстКвитанции, НачалоТекстаМаркера));
		Возврат Истина;
	КонецЕсли;
КонецФункции

Функция ВыделитьПричинуИзТекстаКвитанции(ТекстКвитанции)
	Причина = "";
	Если ВыделитьПричинуИзТекстаКвитанцииПоМаркеру(ТекстКвитанции, "ПРИЧИНА ВІДМОВИ:", Причина) Тогда
		Возврат Причина;
	ИначеЕсли ВыделитьПричинуИзТекстаКвитанцииПоМаркеру(ТекстКвитанции, "ПРИЧИНА ВІДКЛИКАННЯ:", Причина) Тогда
		Возврат Причина;
	ИначеЕсли ВыделитьПричинуИзТекстаКвитанцииПоМаркеру(ТекстКвитанции, "Документ заблоковано відправником, причина:", Причина) Тогда
		Возврат Причина;
	ИначеЕсли ВыделитьПричинуИзТекстаКвитанцииПоМаркеру(ТекстКвитанции, "У ПРИЙОМІ ДОКУМЕНТА ВІДМОВЛЕНО", Причина) Тогда
		Возврат Причина;
	ИначеЕсли ВыделитьПричинуИзТекстаКвитанцииПоМаркеру(ТекстКвитанции, "Документ:", Причина) Тогда
		Возврат Причина;
	Иначе
		Возврат ТекстКвитанции;
	КонецЕсли;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ОбработатьКвитанциюПоЭлектронномуДокументу(ДанныеКвитанции, ОрганизацияПолучатель, лЭлектронныйДокумент, лЭлектронныйДокументПолучен = Ложь, ЖурналОперации = "")
	лНетОшибокПриОбработкеКвитанции = Истина;
	лЭлектронныйДокументПолучен = Ложь;
	
	ИмяФайла = ДанныеКвитанции.Получить("FileName");
	ИмяФайлаКвитанции = ДанныеКвитанции.Получить("AnsFileName");
	DocVer = ДанныеКвитанции.Получить("DocVer");
	
	РегистрироватьОбработкуПослеПолучения = Истина;
	ЗаполнитьПодписантовИУстановитьСостояниеЭлектронногоДокумента = Ложь;
	ИзменятьСостояниеВМаршрутеДокумента = Истина;
	СодержимоеПолученоОтКонтрагента = Истина;
	
	лЭлектронныйДокумент = ПроверитьНаличиеЭлектронногоДокументаВБазе(ИмяФайла, ОрганизацияПолучатель);
	Если лЭлектронныйДокумент = Неопределено Тогда
		лЭлектронныйДокумент = ПроверитьНаличиеЭлектронногоДокументаВБазеПоСодержанию(ИмяФайла, ОрганизацияПолучатель);
		//ТолькоЗагрузитьКвитанцию = Истина;
	Иначе
		//ТолькоЗагрузитьКвитанцию = Ложь;
	КонецЕсли;
	
	ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий;
	ЕДРПОУОтправителя = ДанныеКвитанции.Получить("Edrpou");
	ФилиалОтправителя = ДанныеКвитанции.Получить("Dept");
	ЕДРПОУПолучателя = ДанныеКвитанции.Получить("RcvEdrpou");
	ФилиалПолучателя = ДанныеКвитанции.Получить("RcvDept");
	Если ЕДРПОУОтправителя = ОрганизацияПолучатель.Код и ФилиалОтправителя = ОрганизацияПолучатель.Филиал Тогда
		ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий;
	КонецЕсли;
	
	
	Если лЭлектронныйДокумент = Неопределено Тогда
		лСодержимоеЭлектронногоДокументаMedocBody = ДанныеКвитанции.Получить("MedocBody");
		лКонтейнерДанныхЭлектронногоДокумента = ДанныеКвитанции.Получить("MedocDoc");
		Если лСодержимоеЭлектронногоДокументаMedocBody = Неопределено и лКонтейнерДанныхЭлектронногоДокумента = Неопределено Тогда
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'В базе не найден электронный документ по имени файла'; uk = 'В базі не знайдено електронний документ за ім''ям файла'") + ": " + ИмяФайла + НСтр("ru = ', к которому относится данная квитанция.'; uk = ', до якого відноситься дана квитанція.'"));
			лНетОшибокПриОбработкеКвитанции	 = Ложь;
		Иначе
			аоОперация = "";
			аоЭлектронныйДокумент = Неопределено;
			аоДополнительно = "";
			ЭлектронныйДокументСсылка = Неопределено;
			Если ОбработатьВходящийЭлектронныйДокумент(ДанныеКвитанции, ОрганизацияПолучатель, ЭлектронныйДокументСсылка, ВхИсх, ЖурналОперации, аоОперация, аоЭлектронныйДокумент, аоДополнительно) Тогда
				лЭлектронныйДокумент = ЭлектронныйДокументСсылка;
				лЭлектронныйДокументПолучен = Истина;
			Иначе
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'В базе не найден электронный документ по имени файла'; uk = 'В базі не знайдено електронний документ за ім''ям файла'") + ": " + ИмяФайла + НСтр("ru = ', к которому относится данная квитанция.'; uk = ', до якого відноситься дана квитанція.'"));
				лНетОшибокПриОбработкеКвитанции = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если лНетОшибокПриОбработкеКвитанции Тогда
		лРезультатПоискаКвитанцииВБазе = ПроверитьНаличиеКвитанцииВБазе(ИмяФайлаКвитанции, ОрганизацияПолучатель);
		Если лРезультатПоискаКвитанцииВБазе = Неопределено Тогда
			СодержимоеКвитанцииMedocKvt = ДанныеКвитанции.Получить("MedocKvt");
			лКонтейнерДанныхКвитанции = ДанныеКвитанции.Получить("MedocKvtDoc");
			ЕДРПОУКонтрагента = ДанныеКвитанции.Получить("Edrpou");
			ФилиалКонтрагента = ДанныеКвитанции.Получить("Dept");
			ЕДРПОУПолучателя = ДанныеКвитанции.Получить("RcvEdrpou");
			ФилиалПолучателя = ДанныеКвитанции.Получить("RcvDept");
			
			Если лКонтейнерДанныхКвитанции = Неопределено Тогда
				Если СодержимоеКвитанцииMedocKvt = Неопределено Тогда
					//лДанныеЗаполненияКвитанции = Новый Структура;
					//
					//лДанныеЗаполненияКвитанции.Вставить("Организация",         ОрганизацияПолучатель);
					//лДанныеЗаполненияКвитанции.Вставить("ВидКвитанции",        Перечисления.скEDI_ВидыКвитанций.СДО);
					//лДанныеЗаполненияКвитанции.Вставить("ЭлектронныйДокумент", лЭлектронныйДокумент);
					//лДанныеЗаполненияКвитанции.Вставить("ИмяФайла",            ИмяФайлаКвитанции);
					//лДанныеЗаполненияКвитанции.Вставить("DocVer",              DocVer);
					//лДанныеЗаполненияКвитанции.Вставить("ЕДРПОУКонтрагента",   ЕДРПОУКонтрагента);
					//лДанныеЗаполненияКвитанции.Вставить("ФилиалКонтрагента",   ФилиалКонтрагента);
					//
					//ИнформацияОПолученойКвитанции = "Відправник: " + ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ФилиалКонтрагента), "(" + ФилиалКонтрагента + ")", "");
					//ИнформацияОПолученойКвитанции = ИнформацияОПолученойКвитанции + "
					//|
					//|Ім'я файлу: " + ИмяФайла + "
					//|Ім'я файлу квитанції: " + ИмяФайлаКвитанции;
					//
					//лДанныеЗаполненияКвитанции.Вставить("ТекстКвитанции",      ИнформацияОПолученойКвитанции);
					//лДанныеЗаполненияКвитанции.Вставить("ВхИсх",               Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий);
					//
					//лКвитанцияОбъект = Документы.скEDI_Квитанция.СоздатьДокумент();
					//лКвитанцияОбъект.Заполнить(лДанныеЗаполненияКвитанции);
					//
					//ДатаКвитанции = ТекущаяДата();
					//
					//лКвитанцияОбъект.Дата = ДатаКвитанции;
					//лКвитанцияОбъект.ОбменДанными.Загрузка = Истина;
					//лКвитанцияОбъект.Записать();
					Возврат Истина;
				Иначе
					лРезультатРазборкиТелаКвитанцииВСтруктуруСДанными = РазобратьПодписанноеXMLПредставлениеКвитанцииВСтруктуруСДанными(СодержимоеКвитанцииMedocKvt, ЖурналОперации);
				КонецЕсли;
			Иначе
				лРезультатРазборкиТелаКвитанцииВСтруктуруСДанными = ПолучитьСтруктуруДанныхПоКвитанцииИзСоответствияDoc(лКонтейнерДанныхКвитанции.Получить("Doc"));
			КонецЕсли;
			Если лРезультатРазборкиТелаКвитанцииВСтруктуруСДанными = Неопределено Тогда
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не удалось прочитать данные квитанции'; uk = 'Не вдалось прочитати дані квитанції'") + " " + ИмяФайлаКвитанции + ".");
				лНетОшибокПриОбработкеКвитанции = Ложь;
			КонецЕсли;
			
			Если лНетОшибокПриОбработкеКвитанции Тогда
				лДанныеЗаполненияКвитанции = Новый Структура;
				ПараметрыСобытияПриПодписании = Неопределено;
				
				лДанныеЗаполненияКвитанции.Вставить("Организация",         ОрганизацияПолучатель);
				лДанныеЗаполненияКвитанции.Вставить("ВидКвитанции",        Перечисления.скEDI_ВидыКвитанций.СДО);
				лДанныеЗаполненияКвитанции.Вставить("ЭлектронныйДокумент", лЭлектронныйДокумент);
				лДанныеЗаполненияКвитанции.Вставить("ИмяФайла",            ИмяФайлаКвитанции);
				лДанныеЗаполненияКвитанции.Вставить("DocVer",              DocVer);
				лДанныеЗаполненияКвитанции.Вставить("ЕДРПОУКонтрагента",   ЕДРПОУКонтрагента);
				лДанныеЗаполненияКвитанции.Вставить("ФилиалКонтрагента",   ФилиалКонтрагента);
				
				ИнформацияОПолученойКвитанции = "Відправник: " + ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ФилиалКонтрагента), "(" + ФилиалКонтрагента + ")", "");
				ИнформацияОПолученойКвитанции = ИнформацияОПолученойКвитанции + "
				|
				|Ім'я файлу: " + ИмяФайла + "
				|Ім'я файлу квитанції: " + ИмяФайлаКвитанции + "
				|
				|" + лРезультатРазборкиТелаКвитанцииВСтруктуруСДанными.ТекстКвитанции;
				
				лТипКвитанции = ПолучитьТипКвитанцииПоКоду(лРезультатРазборкиТелаКвитанцииВСтруктуруСДанными.ТипКвитанции);
				лДанныеЗаполненияКвитанции.Вставить("ТипКвитанции",        лТипКвитанции);
				лДанныеЗаполненияКвитанции.Вставить("ТекстКвитанции",      ИнформацияОПолученойКвитанции);
				лДанныеЗаполненияКвитанции.Вставить("ТелоКвитанции",       СодержимоеКвитанцииMedocKvt);
				лДанныеЗаполненияКвитанции.Вставить("ВхИсх",               ВхИсх);
				
				КвитанцияМногостороннегоДокумента = Ложь;
				ПозицияКвитанцииВМаршруте = -1;
				IsMultisided = ДанныеКвитанции.Получить("IsMultisided");
				Если IsMultisided = Неопределено Тогда
					//лОсновныеДанныеДокумента.Вставить("IsMultisided", Ложь);
				Иначе
					лДанныеЗаполненияКвитанции.Вставить("IsMultisided", IsMultisided);
					Если IsMultisided Тогда
						КвитанцияМногостороннегоДокумента = Истина;
						RoutePosition = ДанныеКвитанции.Получить("RoutePosition");
						Если RoutePosition = Неопределено Тогда
							ПозицияКвитанцииВМаршруте = 0;
						Иначе
							ПозицияКвитанцииВМаршруте = RoutePosition;
							лДанныеЗаполненияКвитанции.Вставить("RoutePosition", RoutePosition);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				лКвитанцияОбъект = Документы.скEDI_Квитанция.СоздатьДокумент();
				лКвитанцияОбъект.Заполнить(лДанныеЗаполненияКвитанции);
				
				лТестДляПоиска = лРезультатРазборкиТелаКвитанцииВСтруктуруСДанными.ТекстКвитанции;
				
				ДатаКвитанции = ТекущаяДата();
				
				Если лТипКвитанции = Перечисления.скEDI_ТипыКвитанций.Доподписание Тогда
					ДатаActions = '00010101';
					Actions = ДанныеКвитанции.Получить("Actions");
					Если ТипЗнч(Actions) = Тип("Массив") Тогда
						Для Каждого ЭлементМассиваActions Из Actions Цикл
							Если ЭлементМассиваActions.Получить("Done") = Истина Тогда
								DoneDate = СтрокаВДату(ЭлементМассиваActions.Получить("DoneDate"));
								Если ТипЗнч(DoneDate) = Тип("Дата") Тогда
									Если ЗначениеЗаполнено(ДатаActions) Тогда
										Если DoneDate > ДатаActions Тогда
											ДатаActions = DoneDate;
										КонецЕсли;
									Иначе
										ДатаActions = DoneDate;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если ЗначениеЗаполнено(ДатаActions) Тогда
						ДатаКвитанции = ДатаActions;
					КонецЕсли;
				Иначе
					Для НП = 1 По СтрЧислоСтрок(лТестДляПоиска) Цикл 
						ПодстрокаПоиска = СтрПолучитьСтроку(лТестДляПоиска, НП);
						
						НайденныйРазделитель = Найти(ПодстрокаПоиска , ": ");
						
						Если НайденныйРазделитель > 0 Тогда 
							ПодстрокаПоиска_1 = СокрЛП(Прав(ПодстрокаПоиска , СтрДлина(ПодстрокаПоиска) - НайденныйРазделитель));
							
							// Поиск даты с шаблоном "дд.мм.гггг чч:мм:сс"
							ПодстрокаПоиска_Дата  = Лев(ПодстрокаПоиска_1,10);
							ПодстрокаПоиска_Время = Прав(ПодстрокаПоиска_1,8);
							
							Если СтрЧислоВхождений(ПодстрокаПоиска_Дата,".") = 2 
								И СтрЧислоВхождений(ПодстрокаПоиска_Время,":") = 2 Тогда 
								
								СтрокаДатыВремя = Прав(ПодстрокаПоиска_Дата, 4); // Год
								СтрокаДатыВремя = СтрокаДатыВремя + Сред(ПодстрокаПоиска_Дата, 4, 2); // Месяц 
								СтрокаДатыВремя = СтрокаДатыВремя + Лев(ПодстрокаПоиска_Дата, 2); //День
								
								СтрокаДатыВремя = СтрокаДатыВремя + Лев(ПодстрокаПоиска_Время, 2); // Час 
								СтрокаДатыВремя = СтрокаДатыВремя + Сред(ПодстрокаПоиска_Время, 4, 2); // Минута 
								СтрокаДатыВремя = СтрокаДатыВремя + Прав(ПодстрокаПоиска_Время, 2); //Секунда
								
								Попытка
									ДатаКвитанции = Дата(СтрокаДатыВремя);
									Прервать; // Все получилось. Хватит.
								Исключение
									Продолжить; // Ищем дальше.
								КонецПопытки;	
							Иначе
								Продолжить;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				// 2017-09-27
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Получено квитанцию'; uk = 'Отримано квитанцію'") + " """ + Строка(лТипКвитанции) + """ " + НСтр("ru = 'по документу'; uk = 'по документу'") + " """ + лЭлектронныйДокумент.ВидЭлектронногоДокумента.Наименование + """ №" + лЭлектронныйДокумент.НомерДокумента + " " + НСтр("ru = 'от'; uk = 'від'") + " " + Формат(лЭлектронныйДокумент.ДатаДокумента, "ДФ=dd.MM.yyyy"));
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Код отправителя'; uk = 'Код відправника'") + ": """ + ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ФилиалКонтрагента), " (" + ФилиалКонтрагента + ")", "") + """");
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Код получателя'; uk = 'Код отримувача'") + ": """ + ЕДРПОУПолучателя + ?(ЗначениеЗаполнено(ФилиалПолучателя), " (" + ФилиалПолучателя + ")", "") + """");
				// ...2017-09-27
				
				лКвитанцияОбъект.Дата = ДатаКвитанции;
				лКвитанцияОбъект.ОбменДанными.Загрузка = Истина;
				лКвитанцияОбъект.Записать();
				//Если Не ТолькоЗагрузитьКвитанцию Тогда
					лДатаОперации = ДатаКвитанции; 

					//лСобытиеЭлектронногоДокумента = Неопределено;
					лСостояниеЭлектронногоДокумента = Неопределено;
					
					лПричинаОтклоненияКонтрагентом = "";
					Если лТипКвитанции = Перечисления.скEDI_ТипыКвитанций.СообщениеОДоставке Тогда
						//лСобытиеЭлектронногоДокумента    = Перечисления.скEDI_СобытияЭлектронныхДокументов.ПолучениеСообщенияОДоставке;
						лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоСообщениеОДоставке;
						Если ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий Тогда
							//лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияЭлектронныхДокументов.Получен;
							лСостояниеЭлектронногоДокумента  = Неопределено;
						КонецЕсли;
					ИначеЕсли лТипКвитанции = Перечисления.скEDI_ТипыКвитанций.Подтверждение Тогда
						//лСобытиеЭлектронногоДокумента    = Перечисления.скEDI_СобытияЭлектронныхДокументов.ПолучениеПодтверждения;
						лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждение;
						Если ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий Тогда
							лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение;
						КонецЕсли;
					ИначеЕсли лТипКвитанции = Перечисления.скEDI_ТипыКвитанций.Отклонение Тогда
						//лСобытиеЭлектронногоДокумента    = Перечисления.скEDI_СобытияЭлектронныхДокументов.ПолучениеОтклонения;
						лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонение;
						Если ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий Тогда
							лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ОтправленоОтклонение;
						КонецЕсли;
						
						//НачалоТекстаПричина = Найти(лРезультатРазборкиТелаКвитанцииВСтруктуруСДанными.ТекстКвитанции, "Документ:");
						//Если НачалоТекстаПричина = 0 Тогда
						//	лПричинаОтклоненияКонтрагентом = лРезультатРазборкиТелаКвитанцииВСтруктуруСДанными.ТекстКвитанции;
						//Иначе
						//	НачалоТекстаПричина = НачалоТекстаПричина + СтрДлина("Документ:");
						//	лПричинаОтклоненияКонтрагентом = СокрЛП(Сред(лРезультатРазборкиТелаКвитанцииВСтруктуруСДанными.ТекстКвитанции, НачалоТекстаПричина));
						//КонецЕсли;
						лПричинаОтклоненияКонтрагентом = ВыделитьПричинуИзТекстаКвитанции(лРезультатРазборкиТелаКвитанцииВСтруктуруСДанными.ТекстКвитанции);
					ИначеЕсли лТипКвитанции = Перечисления.скEDI_ТипыКвитанций.Отзыв Тогда
						//лСобытиеЭлектронногоДокумента    = Перечисления.скEDI_СобытияЭлектронныхДокументов.ОтозванОтправителем;
						лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ОтозванОтправителем;
						
						Если ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий Тогда
							лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван;
						КонецЕсли;
						//НачалоТекстаПричина = Найти(лРезультатРазборкиТелаКвитанцииВСтруктуруСДанными.ТекстКвитанции, "Документ:");
						//Если НачалоТекстаПричина = 0 Тогда
						//	лПричинаОтклоненияКонтрагентом = лРезультатРазборкиТелаКвитанцииВСтруктуруСДанными.ТекстКвитанции;
						//Иначе
						//	НачалоТекстаПричина = НачалоТекстаПричина + СтрДлина("Документ:");
						//	лПричинаОтклоненияКонтрагентом = СокрЛП(Сред(лРезультатРазборкиТелаКвитанцииВСтруктуруСДанными.ТекстКвитанции, НачалоТекстаПричина));
						//КонецЕсли;
						лПричинаОтклоненияКонтрагентом = ВыделитьПричинуИзТекстаКвитанции(лРезультатРазборкиТелаКвитанцииВСтруктуруСДанными.ТекстКвитанции);
					ИначеЕсли лТипКвитанции = Перечисления.скEDI_ТипыКвитанций.Доподписание Тогда
						ЗаполнитьПодписантовИУстановитьСостояниеЭлектронногоДокумента = Истина;
						РегистрироватьОбработкуПослеПолучения = Ложь;
						ИзменятьСостояниеВМаршрутеДокумента = Ложь;
						СодержимоеПолученоОтКонтрагента = Ложь;
					Иначе
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Нстр("ru = 'Не определен тип квитанции.'; uk = 'Не визначено тип квитанції.'"));
						лНетОшибокПриОбработкеКвитанции = Ложь;
					КонецЕсли;
					
					Если лНетОшибокПриОбработкеКвитанции Тогда
						//лЭлектронныйДокументОбъект = лЭлектронныйДокумент.ПолучитьОбъект();
						
						СодержимоеЭлектронногоДокументаMedocBody = ДанныеКвитанции.Получить("MedocBody");
						//лКонтейнерДанныхЭлектронногоДокумента = ДанныеКвитанции.Получить("MedocDoc");
						//Если лКонтейнерДанныхЭлектронногоДокумента = Неопределено Тогда
						//	лРезультатРазборкиТелаДокументаВСоответствиеСДанными = РазобратьXMLПредставлениеЭлектронногоДокументаВСоответствиеСДанными(СодержимоеЭлектронногоДокументаMedocText, ЖурналОперации);
						//Иначе
						//	лРезультатРазборкиТелаДокументаВСоответствиеСДанными = ПолучитьСтруктуруДанныхПоЭлектронномуДокументуИзСоответствияDoc(лКонтейнерДанныхЭлектронногоДокумента.Получить("Doc"));
						//КонецЕсли;
						//Если Не ТолькоЗагрузитьКвитанцию Тогда
						Если СодержимоеЭлектронногоДокументаMedocBody <> Неопределено Тогда
							//СодержимоеЭлектронныхДокументовМенеджерЗаписи = РегистрыСведений.скEDI_СодержимоеЭлектронныхДокументов.СоздатьМенеджерЗаписи();
							//СодержимоеЭлектронныхДокументовМенеджерЗаписи.ЭлектронныйДокумент = лЭлектронныйДокумент;
							//СодержимоеЭлектронныхДокументовМенеджерЗаписи.НомерВерсии = ПолучитьСледующийНомерВерсииСодержанияЭлектронногоДокумента(лЭлектронныйДокумент);
							//СодержимоеЭлектронныхДокументовМенеджерЗаписи.ТелоДокумента = СодержимоеЭлектронногоДокументаMedocBody;
							//СодержимоеЭлектронныхДокументовМенеджерЗаписи.Дата = ДатаКвитанции;
							//СодержимоеЭлектронныхДокументовМенеджерЗаписи.ПолученоОтКонтрагента = Истина;
				
							ИзображениеДокумента = Неопределено;
							ВложениеДокумента1 = Неопределено;
							ИмяФайлаВложениеДокумента1 = "";
							ВложениеДокумента2 = Неопределено;
							ИмяФайлаВложениеДокумента2 = "";
							ВложениеДокумента3 = Неопределено;
							ИмяФайлаВложениеДокумента3 = "";
							МассивВложений4 = Неопределено;
							лКонтейнерPDFПредставленияДокумента = ДанныеКвитанции.Получить("ImageBody");
							Если лКонтейнерPDFПредставленияДокумента <> Неопределено Тогда
								ИзображениеДокумента = лКонтейнерPDFПредставленияДокумента.Получить("Body");
							КонецЕсли;
							лКонтейнерВложений = ДанныеКвитанции.Получить("AttachmentBody");
							
							Если ТипЗнч(лКонтейнерВложений) = Тип("Массив") Тогда
								НомерВложения = 0;
								Для Каждого Вложение Из лКонтейнерВложений Цикл
									НомерВложения = НомерВложения + 1;
									СодержимоеВложенияДокумента = Вложение.Получить("Body");
									ИмяФайлаВложениеДокумента = Вложение.Получить("FileName");
									Если НомерВложения = 1 Тогда
										ВложениеДокумента1 = СодержимоеВложенияДокумента;
										ИмяФайлаВложениеДокумента1 = ИмяФайлаВложениеДокумента;
									ИначеЕсли НомерВложения = 2 Тогда
										ВложениеДокумента2 = СодержимоеВложенияДокумента;
										ИмяФайлаВложениеДокумента2 = ИмяФайлаВложениеДокумента;
									ИначеЕсли НомерВложения = 3 Тогда
										ВложениеДокумента3 = СодержимоеВложенияДокумента;
										ИмяФайлаВложениеДокумента3 = ИмяФайлаВложениеДокумента;
									Иначе
										Если МассивВложений4 = Неопределено Тогда
											МассивВложений4 = Новый Массив;
										КонецЕсли;
										ТекСтруктураВложения = Новый Структура;
										ТекСтруктураВложения.Вставить("ИмяФайлаВложениеДокумента", ИмяФайлаВложениеДокумента);
										ТекСтруктураВложения.Вставить("ВложениеДокумента", СодержимоеВложенияДокумента);
										МассивВложений4.Добавить(ТекСтруктураВложения);
									КонецЕсли;
								КонецЦикла;
							КонецЕсли;
							
							скEDI_ВнешниеХранилища.СохранитьСодержимоеЭлектронногоДокумента(лЭлектронныйДокумент,
								ПолучитьСледующийНомерВерсииСодержанияЭлектронногоДокумента(лЭлектронныйДокумент),
								СодержимоеЭлектронногоДокументаMedocBody,
								ИзображениеДокумента,
								ВложениеДокумента1,
								ИмяФайлаВложениеДокумента1,
								ВложениеДокумента2,
								ИмяФайлаВложениеДокумента2,
								ВложениеДокумента3,
								ИмяФайлаВложениеДокумента3,
								МассивВложений4,
								ДатаКвитанции,
								"",
								0,
								"",
								Ложь,
								СодержимоеПолученоОтКонтрагента,
								Неопределено,
								Ложь
							);
							
							лМассивГрафическихИзображенийПодписей = ДанныеКвитанции.Получить("SignImages");
							Если лМассивГрафическихИзображенийПодписей = Неопределено Тогда
								лМассивГрафическихИзображенийПодписей = Новый Массив;
							КонецЕсли;
							
					        ЗаписатьФаксимилеЭлектронныхДокументов(лЭлектронныйДокумент, лМассивГрафическихИзображенийПодписей);
						КонецЕсли;
						Если РегистрироватьОбработкуПослеПолучения Тогда
							ОбработкаПослеПолученияМенеджерЗаписи = РегистрыСведений.скEDI_ОбработкаПослеПолучения.СоздатьМенеджерЗаписи();
							ОбработкаПослеПолученияМенеджерЗаписи.ЭлектронныйДокумент = лЭлектронныйДокумент;
							ОбработкаПослеПолученияМенеджерЗаписи.ЕДРПОУ = ОрганизацияПолучатель.Код;
							ОбработкаПослеПолученияМенеджерЗаписи.Дата = ТекущаяДата();
							ОбработкаПослеПолученияМенеджерЗаписи.ДатаСобытия = ТекущаяДата();
							ОбработкаПослеПолученияМенеджерЗаписи.Квитанция = лКвитанцияОбъект.Ссылка;
							Если лЭлектронныйДокумент.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
								ОбработкаПослеПолученияМенеджерЗаписи.Действие = "ЗаполнитьПодписантовВДокументеИКвитанцииНД";
								ОбработкаПослеПолученияМенеджерЗаписи.ТелоДокумента = СодержимоеКвитанцииMedocKvt;
							ИначеЕсли лЭлектронныйДокумент.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
								ОбработкаПослеПолученияМенеджерЗаписи.Действие = "ЗаполнитьПодписантовВДокументеИКвитанцииНД";
								ОбработкаПослеПолученияМенеджерЗаписи.ТелоДокумента = СодержимоеКвитанцииMedocKvt;
							Иначе
								ОбработкаПослеПолученияМенеджерЗаписи.Действие = "ЗаполнитьПодписантовВДокументеИКвитанции";
								ОбработкаПослеПолученияМенеджерЗаписи.ТелоДокумента = СодержимоеЭлектронногоДокументаMedocBody;
							КонецЕсли;
							ОбработкаПослеПолученияМенеджерЗаписи.Записать(Истина);
						КонецЕсли;
						
						лЭлектронныйДокументОбъект = Неопределено;
						
						Если ЗаполнитьПодписантовИУстановитьСостояниеЭлектронногоДокумента Тогда
							Если лЭлектронныйДокументОбъект = Неопределено Тогда
								лЭлектронныйДокументОбъект = лЭлектронныйДокумент.ПолучитьОбъект();
							КонецЕсли;
							лСостояниеЭлектронногоДокумента = лЭлектронныйДокументОбъект.Состояние;
							
							Если СодержимоеЭлектронногоДокументаMedocBody <> Неопределено Тогда
								ДокументБылПодписан = Ложь;
								тМассивПодписейДляОбработкиСобытий = Новый Массив;
								Для Каждого ТекущаяСтрока из лЭлектронныйДокумент.Подписи Цикл
									Если ТекущаяСтрока.Подписано Тогда
										ДанныеПодписиДокумента = Новый Структура("Подпись, ПодписаноРанее, ПодписываетсяСейчас");
										ДанныеПодписиДокумента.Подпись = ТекущаяСтрока.Подпись;
										ДанныеПодписиДокумента.ПодписаноРанее = Истина;
										ДанныеПодписиДокумента.ПодписываетсяСейчас = Ложь;
										тМассивПодписейДляОбработкиСобытий.Добавить(ДанныеПодписиДокумента);
									КонецЕсли;
								КонецЦикла;
								
								лМассивПодписейКонтрагента = ПолучитьМассивПодписейКонтрагентаИзПодписанногоЭлектронногоДокумента(СодержимоеЭлектронногоДокументаMedocBody, ЖурналОперации);
								
								ОтражатьTSPСтатус = Истина;
								ОтражатьOCSPСтатус = ОтражатьTSPСтатус;
								
								лМассивДанныхПоПодписямКонтрагента = СформироватьМассивДанныхПоПодписямКонтрагента(лМассивПодписейКонтрагента);
								Если лМассивДанныхПоПодписямКонтрагента.Количество() > 0 Тогда
									ТекстКвитанции = лКвитанцияОбъект.ТекстКвитанции;
									ТекстКвитанции = ТекстКвитанции + "
											|
											|Підписи:";
									Для Каждого лДанныеПоПодписиКонтрагента Из лМассивДанныхПоПодписямКонтрагента Цикл
										Если лДанныеПоПодписиКонтрагента.ЕДРПОУ = ОрганизацияПолучатель.Код Тогда
											НайденаяПодписьЭлектронногоДокумента = Неопределено;
											ИндексНовойПодписи = 0;
											Для Каждого ПодписьЭлектронногоДокумента Из лЭлектронныйДокументОбъект.Подписи Цикл
												Если ПодписьЭлектронногоДокумента.Подписано Тогда
													ИндексНовойПодписи = ПодписьЭлектронногоДокумента.НомерСтроки;
												КонецЕсли;
												Подпись = ПодписьЭлектронногоДокумента.Подпись;
												Если ТипЗнч(Подпись) = Тип("СправочникСсылка.скEDI_Подписи") Тогда
													Если Подпись.ДРФО = лДанныеПоПодписиКонтрагента.ДРФОПодписанта и Подпись.Роль = лДанныеПоПодписиКонтрагента.Роль Тогда
														НайденаяПодписьЭлектронногоДокумента = ПодписьЭлектронногоДокумента;
														Прервать;
													КонецЕсли;
												ИначеЕсли ТипЗнч(Подпись) = Тип("СправочникСсылка.скEDI_ГруппыПодписей") Тогда
													ЗапросПодписьГруппы = Новый Запрос;
													ЗапросПодписьГруппы.Текст = "ВЫБРАТЬ
													                            |	скEDI_ГруппыПодписей.Подпись КАК Подпись
													                            |ИЗ
													                            |	РегистрСведений.скEDI_ГруппыПодписей КАК скEDI_ГруппыПодписей
													                            |ГДЕ
													                            |	скEDI_ГруппыПодписей.ГруппаПодписи = &ГруппаПодписи
													                            |	И скEDI_ГруппыПодписей.Подпись.Владелец = &Организация
													                            |	И скEDI_ГруппыПодписей.Подпись.ДРФО = &ДРФО
													                            |	И скEDI_ГруппыПодписей.Подпись.Роль = &Роль";
													ЗапросПодписьГруппы.УстановитьПараметр("ГруппаПодписи", Подпись);
													ЗапросПодписьГруппы.УстановитьПараметр("Организация", ОрганизацияПолучатель);
													ЗапросПодписьГруппы.УстановитьПараметр("ДРФО", лДанныеПоПодписиКонтрагента.ДРФОПодписанта);
													ЗапросПодписьГруппы.УстановитьПараметр("Роль", лДанныеПоПодписиКонтрагента.Роль);
													ВыборкаЗапросПодписьГруппы = ЗапросПодписьГруппы.Выполнить().Выбрать();
													Если ВыборкаЗапросПодписьГруппы.Следующий() Тогда
														НайденаяПодписьЭлектронногоДокумента = ПодписьЭлектронногоДокумента;
														НайденаяПодписьЭлектронногоДокумента.Подпись = ВыборкаЗапросПодписьГруппы.Подпись;
														Прервать;
													КонецЕсли;
												КонецЕсли;
											КонецЦикла;
											Если НайденаяПодписьЭлектронногоДокумента = Неопределено Тогда
												РезультатПоискаСертификата = ПолучитьСертификатИзБазыДанныхПоСерийномуНомеру(лЭлектронныйДокументОбъект.Организация, лДанныеПоПодписиКонтрагента.СерийныйНомер, Истина, лДанныеПоПодписиКонтрагента);
												Если РезультатПоискаСертификата = Неопределено Тогда
													Продолжить;
												Иначе
													//НайденаяПодписьЭлектронногоДокумента = лЭлектронныйДокументОбъект.Подписи.Добавить();
													НайденаяПодписьЭлектронногоДокумента = лЭлектронныйДокументОбъект.Подписи.Вставить(ИндексНовойПодписи);
													НайденаяПодписьЭлектронногоДокумента.Подпись = РезультатПоискаСертификата.Ссылка;
												КонецЕсли;
											КонецЕсли;
											Если Не НайденаяПодписьЭлектронногоДокумента.Подписано Тогда
												НайденаяПодписьЭлектронногоДокумента.Подписано = Истина;
												НайденаяПодписьЭлектронногоДокумента.ДатаПодписания = лДанныеПоПодписиКонтрагента.ДатаПодписания;
												
												ДанныеПодписиДокумента = Новый Структура("Подпись, ПодписаноРанее, ПодписываетсяСейчас");
												ДанныеПодписиДокумента.Подпись = НайденаяПодписьЭлектронногоДокумента.Подпись;
												ДанныеПодписиДокумента.ПодписаноРанее = Ложь;
												ДанныеПодписиДокумента.ПодписываетсяСейчас = Истина;
												тМассивПодписейДляОбработкиСобытий.Добавить(ДанныеПодписиДокумента);
												
												ТекстКвитанции = ТекстКвитанции + "
												|" + ОписаниеПодписи(лДанныеПоПодписиКонтрагента.SignersItem, ОтражатьTSPСтатус, ОтражатьOCSPСтатус);
												
												ДокументБылПодписан = Истина;
											КонецЕсли;
										КонецЕсли;
									КонецЦикла;
								КонецЕсли;
								
								Если ДокументБылПодписан Тогда
									лКвитанцияОбъект.ТекстКвитанции = ТекстКвитанции;
									лКвитанцияОбъект.ОбменДанными.Загрузка = Истина;
									лКвитанцияОбъект.Записать();
									
									РольСледующейПодписи = ПредопределенноеЗначение("Перечисление.скEDI_РолиПодписей.ПустаяСсылка");
									ДокументБылПодписанПолностью = Истина;
									Для Каждого ТекущаяСтрока из лЭлектронныйДокументОбъект.Подписи Цикл
										Если не ТекущаяСтрока.Подписано Тогда
											ДанныеПодписиДокумента = Новый Структура("Подпись, ПодписаноРанее, ПодписываетсяСейчас");
											ДанныеПодписиДокумента.Подпись = ТекущаяСтрока.Подпись;
											ДанныеПодписиДокумента.ПодписаноРанее = Ложь;
											ДанныеПодписиДокумента.ПодписываетсяСейчас = Ложь;
											тМассивПодписейДляОбработкиСобытий.Добавить(ДанныеПодписиДокумента);
											
											Если ДокументБылПодписанПолностью Тогда
												РольСледующейПодписи = ПолучитьРольПодписи(ТекущаяСтрока.Подпись, ОрганизацияПолучатель);
												ДокументБылПодписанПолностью = Ложь;
											КонецЕсли;
										КонецЕсли;
									КонецЦикла;
									Если ДокументБылПодписанПолностью Тогда
										лСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан");
										//ИзменятьСостояниеВМаршрутеДокумента = Истина;
									Иначе
										лСостояниеЭлектронногоДокумента = ПолучитьСледующееСостояниеДляПодписанныхЧастично(РольСледующейПодписи);
									КонецЕсли;
									Если лЭлектронныйДокументОбъект.IsMultisided Тогда
										Если лЭлектронныйДокументОбъект.Маршрут.Количество() > лЭлектронныйДокументОбъект.RoutePosition Тогда
											ТекЭлементМаршрута = лЭлектронныйДокументОбъект.Маршрут.Получить(лЭлектронныйДокументОбъект.RoutePosition);
											ТекЭлементМаршрута.Состояние = лСостояниеЭлектронногоДокумента;
										КонецЕсли;
									КонецЕсли;
									
									ПараметрыСобытияПриПодписании = Новый Структура;
									ПараметрыСобытияПриПодписании.Вставить("Организация", лЭлектронныйДокументОбъект.Организация);
									ПараметрыСобытияПриПодписании.Вставить("ВидЭлектронногоДокумента", лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента);
									ПараметрыСобытияПриПодписании.Вставить("ВхИсх", лЭлектронныйДокументОбъект.ВхИсх);
									ПараметрыСобытияПриПодписании.Вставить("ГдеСоздан", лЭлектронныйДокументОбъект.ГдеСоздан);
									ПараметрыСобытияПриПодписании.Вставить("ЭлектронныйДокумент", лЭлектронныйДокументОбъект.Ссылка);
									ПараметрыСобытияПриПодписании.Вставить("Состояние", лСостояниеЭлектронногоДокумента);
									ПараметрыСобытияПриПодписании.Вставить("Документ1С", лЭлектронныйДокументОбъект.Документ1С);
									//ПараметрыСобытияПриПодписании.Вставить("МассивВложений", );
									ПараметрыСобытияПриПодписании.Вставить("МассивПодписей", тМассивПодписейДляОбработкиСобытий);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(лСостояниеЭлектронногоДокумента) Тогда
							Если лЭлектронныйДокументОбъект = Неопределено Тогда
								лЭлектронныйДокументОбъект = лЭлектронныйДокумент.ПолучитьОбъект();
							КонецЕсли;
							Если ИзменятьСостояниеВМаршрутеДокумента и КвитанцияМногостороннегоДокумента Тогда
								Если лЭлектронныйДокументОбъект.IsMultisided Тогда
									ЕстьЭлементыМаршрута = Ложь;
									ЕстьНеутвержденные = Ложь;
									ЕстьОтозваные = Ложь;
									ЕстьОтклоненные = Ложь;
									ОтозванНами = Ложь;
									ОтклоненНами = Ложь;
									ЕстьСостояниеПосле = Ложь;
									ЕстьМаршрутПосле = Ложь;
									
									Для Каждого ТекЭлементМаршрута Из лЭлектронныйДокументОбъект.Маршрут Цикл
										ЕстьЭлементыМаршрута = Истина;
										
										Если ТекЭлементМаршрута.НомерСтроки - 1 = ПозицияКвитанцииВМаршруте Тогда
											Если ТекЭлементМаршрута.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван") Тогда
												// не меняем
											ИначеЕсли ТекЭлементМаршрута.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонение") Тогда
												// не меняем
											ИначеЕсли ТекЭлементМаршрута.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждение") Тогда
												// не меняем
											Иначе
												ТекЭлементМаршрута.Состояние = лСостояниеЭлектронногоДокумента;
											КонецЕсли;
											Если лПричинаОтклоненияКонтрагентом <> "" Тогда
												Если лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом = "" Тогда
													лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом = лПричинаОтклоненияКонтрагентом;
												ИначеЕсли Найти(лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом, лПричинаОтклоненияКонтрагентом) = 0 Тогда
													лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом = лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом + "; " + лПричинаОтклоненияКонтрагентом;
												КонецЕсли;
											КонецЕсли;
										КонецЕсли;
										
										Если ТекЭлементМаршрута.НомерСтроки - 1 < лЭлектронныйДокументОбъект.RoutePosition Тогда
											Если ТекЭлементМаршрута.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван") Тогда
												ЕстьОтозваные = Истина;
												ЕстьНеутвержденные = Истина;
											ИначеЕсли ТекЭлементМаршрута.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтозванОтправителем") Тогда
												ЕстьОтозваные = Истина;
												ЕстьНеутвержденные = Истина;
											ИначеЕсли ТекЭлементМаршрута.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонение") Тогда
												ЕстьОтклоненные = Истина;
												ЕстьНеутвержденные = Истина;
											ИначеЕсли ТекЭлементМаршрута.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоОтклонение") Тогда
												ЕстьОтклоненные = Истина;
												ЕстьНеутвержденные = Истина;
											ИначеЕсли ТекЭлементМаршрута.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждение") Тогда
												
											ИначеЕсли ТекЭлементМаршрута.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение") Тогда
												
											Иначе
												ЕстьНеутвержденные = Истина;
											КонецЕсли;
										ИначеЕсли ТекЭлементМаршрута.НомерСтроки - 1 = лЭлектронныйДокументОбъект.RoutePosition Тогда
											Если ТекЭлементМаршрута.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван") Тогда
												ОтозванНами = Истина;
												ЕстьНеутвержденные = Истина;
											ИначеЕсли ТекЭлементМаршрута.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтозванОтправителем") Тогда
												ОтозванНами = Истина;
												ЕстьНеутвержденные = Истина;
											ИначеЕсли ТекЭлементМаршрута.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонение") Тогда
												ОтклоненНами = Истина;
												ЕстьНеутвержденные = Истина;
											ИначеЕсли ТекЭлементМаршрута.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоОтклонение") Тогда
												ОтклоненНами = Истина;
												ЕстьНеутвержденные = Истина;
											ИначеЕсли ТекЭлементМаршрута.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждение") Тогда
											ИначеЕсли ТекЭлементМаршрута.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение") Тогда
											Иначе
												ЕстьНеутвержденные = Истина;
											КонецЕсли;
										ИначеЕсли ТекЭлементМаршрута.НомерСтроки - 1 > лЭлектронныйДокументОбъект.RoutePosition Тогда
											ЕстьМаршрутПосле = Истина;
											Если ТекЭлементМаршрута.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван") Тогда
												ЕстьОтозваные = Истина;
												ЕстьНеутвержденные = Истина;
												ЕстьСостояниеПосле = Истина;
											ИначеЕсли ТекЭлементМаршрута.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтозванОтправителем") Тогда
												ЕстьОтозваные = Истина;
												ЕстьНеутвержденные = Истина;
												ЕстьСостояниеПосле = Истина;
											ИначеЕсли ТекЭлементМаршрута.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонение") Тогда
												ЕстьОтклоненные = Истина;
												ЕстьНеутвержденные = Истина;
												ЕстьСостояниеПосле = Истина;
											ИначеЕсли ТекЭлементМаршрута.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоОтклонение") Тогда
												ЕстьОтклоненные = Истина;
												ЕстьНеутвержденные = Истина;
												ЕстьСостояниеПосле = Истина;
											ИначеЕсли ТекЭлементМаршрута.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждение") Тогда
												ЕстьСостояниеПосле = Истина;
											ИначеЕсли ТекЭлементМаршрута.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение") Тогда
												ЕстьСостояниеПосле = Истина;
											ИначеЕсли ТекЭлементМаршрута.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоСообщениеОДоставке") Тогда
												ЕстьСостояниеПосле = Истина;
												ЕстьНеутвержденные = Истина;
											Иначе
												ЕстьНеутвержденные = Истина;
											КонецЕсли;
										КонецЕсли;
									КонецЦикла;
									
									Если ЕстьЭлементыМаршрута Тогда
										Если ЕстьНеутвержденные Тогда
											Если ОтклоненНами Тогда
												лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоОтклонение");
											ИначеЕсли ЕстьОтклоненные Тогда
												лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонение");
											ИначеЕсли ОтозванНами Тогда
												лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван");
											ИначеЕсли ЕстьОтозваные Тогда
												лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтозванОтправителем");
											ИначеЕсли ЕстьСостояниеПосле Тогда
												лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоСообщениеОДоставке");
											КонецЕсли;
										Иначе
											Если ЕстьМаршрутПосле Тогда
												лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждение");
											Иначе
												лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение");
											КонецЕсли;
										КонецЕсли;
										лЭлектронныйДокументОбъект.ПоследняяОперация = лДатаОперации;
									КонецЕсли;
								КонецЕсли;
							Иначе
								//Если не лЭлектронныйДокументОбъект.IsMultisided или не ИзменятьСостояниеВМаршрутеДокумента Тогда
									Если лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван") Тогда
										// не меняем
									ИначеЕсли лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленВДФС") Тогда
										// не меняем
									ИначеЕсли лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоКвитанциюОтДФС") Тогда
										// не меняем
									ИначеЕсли лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС") Тогда
										// не меняем
									ИначеЕсли лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонениеОтДФС") Тогда
										// не меняем
									ИначеЕсли лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонение") Тогда
										// не меняем
									ИначеЕсли лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждение") Тогда
										// не меняем
									Иначе
										лЭлектронныйДокументОбъект.Состояние = лСостояниеЭлектронногоДокумента;
										лЭлектронныйДокументОбъект.ПоследняяОперация = лДатаОперации;
									КонецЕсли;
									Если лПричинаОтклоненияКонтрагентом <> "" Тогда
										лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом = лПричинаОтклоненияКонтрагентом;
									КонецЕсли;
								//КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						Если лЭлектронныйДокументОбъект <> Неопределено Тогда
							ЗаписатьЭлектронныйДокументСПредварительнымПоискомСвязаных(лЭлектронныйДокументОбъект, лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента, ОрганизацияПолучатель);
							Если лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента.ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента Тогда
								СоглашениеОАнулированииДокументаОбработать(лЭлектронныйДокументОбъект.Ссылка, Ложь);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий Тогда
						Если лТипКвитанции = Перечисления.скEDI_ТипыКвитанций.СообщениеОДоставке Тогда
							//УстановитьСнятьОтметкуОбработано(лЭлектронныйДокумент, Истина);
						ИначеЕсли лТипКвитанции = Перечисления.скEDI_ТипыКвитанций.Подтверждение Тогда
							Если лЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван") Тогда
								//УстановитьСнятьОтметкуОбработано(лЭлектронныйДокумент, Ложь);
							Иначе
								УстановитьСнятьОтметкуОбработано(лЭлектронныйДокумент, Истина);
							КонецЕсли;
						ИначеЕсли лТипКвитанции = Перечисления.скEDI_ТипыКвитанций.Отклонение Тогда
							Если лЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван") Тогда
								//УстановитьСнятьОтметкуОбработано(лЭлектронныйДокумент, Истина);
							Иначе
								УстановитьСнятьОтметкуОбработано(лЭлектронныйДокумент, Ложь);
							КонецЕсли;
						ИначеЕсли лТипКвитанции = Перечисления.скEDI_ТипыКвитанций.Отзыв Тогда
							УстановитьСнятьОтметкуОбработано(лЭлектронныйДокумент, Ложь);
						Иначе
							УстановитьСнятьОтметкуОбработано(лЭлектронныйДокумент, Ложь);
						КонецЕсли;
					КонецЕсли;
					
					Если ТипЗнч(ПараметрыСобытияПриПодписании) = Тип("Структура") Тогда
						тОрганизация = ПараметрыСобытияПриПодписании.Организация;
						тВидЭлектронногоДокумента = ПараметрыСобытияПриПодписании.ВидЭлектронногоДокумента;
						тВхИсх = ПараметрыСобытияПриПодписании.ВхИсх;
						тГдеСоздан = ПараметрыСобытияПриПодписании.ГдеСоздан;
						тЭлектронныйДокумент = ПараметрыСобытияПриПодписании.ЭлектронныйДокумент;
						тСостояние = ПараметрыСобытияПриПодписании.Состояние;
						тДокумент1С = ПараметрыСобытияПриПодписании.Документ1С;
						тМассивВложений = Неопределено;
						ПараметрыСобытияПриПодписании.Свойство("МассивВложений", тМассивВложений);
						Если ТипЗнч(тМассивВложений) <> Тип("Массив") Тогда
							Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
								тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
							Иначе
								тМассивВложений = Новый Массив;
							КонецЕсли;
							ПараметрыСобытияПриПодписании.Вставить("МассивВложений", тМассивВложений);
						КонецЕсли;
						тМассивПодписей = Неопределено;
						ПараметрыСобытияПриПодписании.Свойство("МассивПодписей", тМассивПодписей);
						Если ТипЗнч(тМассивПодписей) <> Тип("Массив") Тогда
							тМассивПодписей = Новый Массив;
							ПараметрыСобытияПриПодписании.Вставить("МассивПодписей", тМассивПодписей);
						КонецЕсли;
						ОбработатьСобытие_ПриПодписании(тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписей, тДокумент1С, тМассивВложений);
					КонецЕсли;
				//КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат лНетОшибокПриОбработкеКвитанции;
КонецФункции // ОбработатьКвитанциюПоЭлектронномуДокументу()

Функция ОбработатьКвитанциюДФСРКПоЭлектронномуДокументу(ДанныеКвитанции, ОрганизацияПолучатель, ЖурналОперации = "")
	лНетОшибокПриОбработкеКвитанции = Истина;
	
	ИмяФайла = ДанныеКвитанции.Получить("FileName");
	
	лЭлектронныйДокумент = ПроверитьНаличиеЭлектронногоДокументаВБазе(ИмяФайла, ОрганизацияПолучатель);
	Если лЭлектронныйДокумент = Неопределено Тогда
		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'В базе не найден электронный документ по имени файла'; uk = 'В базі не знайдено електронний документ за ім''ям файла'") + ": " + ИмяФайла + НСтр("ru = ', к которому относится данная квитанция.'; uk = ', до якого відноситься дана квитанція.'"));
		лНетОшибокПриОбработкеКвитанции = Ложь;
	КонецЕсли;
	
	Если лНетОшибокПриОбработкеКвитанции Тогда
		ИдентификаторКвитанцииGateId = ДанныеКвитанции.Получить("GateId");
		ЕДРПОУКонтрагента = ДанныеКвитанции.Получить("Edrpou");
		ФилиалКонтрагента = ДанныеКвитанции.Получить("Dept");
		ЕДРПОУПолучателя = ДанныеКвитанции.Получить("RcvEdrpou");
		ФилиалПолучателя = ДанныеКвитанции.Получить("RcvDept");
		
		лРезультатПоискаКвитанцииВБазе = ПроверитьНаличиеКвитанцииДФСРКВБазе(ИдентификаторКвитанцииGateId, лЭлектронныйДокумент);
		Если лРезультатПоискаКвитанцииВБазе = Неопределено Тогда
			ТипКвитанции = ПолучитьТипКвитанцииРКПоКоду(ДанныеКвитанции.Получить("Result"));
			Если ЗначениеЗаполнено(ТипКвитанции) Тогда
				ВидКвитанции = Перечисления.скEDI_ВидыКвитанций.ДФСрк;
				ТекстКвитанции = Неопределено;
				ДатаВремяКвитанции = Неопределено;
				
				Если не РазобратьТекстКвитанции(Строка(ДанныеКвитанции.Получить("Text")), ТекстКвитанции, ДатаВремяКвитанции, Неопределено, Неопределено) Тогда
					ТекстКвитанции = Строка(ДанныеКвитанции.Получить("Text"));
					ДатаВремяКвитанции = ТекущаяДата();
				КонецЕсли;
			Иначе
				ВидКвитанции = Неопределено;
				ТипКвитанции = Неопределено;
				ТекстКвитанции = Неопределено;
				ДатаВремяКвитанции = Неопределено;
				РегНомер = "";
				ОшибкиДокумента = "";
				Если не РазобратьТекстКвитанции(Строка(ДанныеКвитанции.Получить("Text")), ТекстКвитанции, ДатаВремяКвитанции, ВидКвитанции, ТипКвитанции, РегНомер, ОшибкиДокумента) Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ИнформацияОКвитанции = ТекстКвитанции;
			лМассивПодписейКонтрагента = ПолучитьМассивПодписейИзМассиваСоответствий(ДанныеКвитанции.Получить("Signers"));
			Если лМассивПодписейКонтрагента.Количество() > 0 Тогда
				ИнформацияОКвитанции = ИнформацияОКвитанции + "
						|
						|Підписи:";
				ДополнитьОписаниеДаннымиПоПодписямКонтрагента(лМассивПодписейКонтрагента, ИнформацияОКвитанции, ОрганизацияПолучатель.Код, Ложь, Ложь);
			КонецЕсли;
			
			лДанныеЗаполненияКвитанции = Новый Структура;
			лДанныеЗаполненияКвитанции.Вставить("ВидКвитанции",        ВидКвитанции);
			лДанныеЗаполненияКвитанции.Вставить("Организация",         ОрганизацияПолучатель);
			лДанныеЗаполненияКвитанции.Вставить("ЭлектронныйДокумент", лЭлектронныйДокумент);
			лДанныеЗаполненияКвитанции.Вставить("ЕДРПОУКонтрагента",   ЕДРПОУКонтрагента);
			лДанныеЗаполненияКвитанции.Вставить("ФилиалКонтрагента",   ФилиалКонтрагента);
			Если ВидКвитанции = Перечисления.скEDI_ВидыКвитанций.ДФС Тогда
				лДанныеЗаполненияКвитанции.Вставить("ТипКвитанцииДФС",     ТипКвитанции);
			Иначе
				лДанныеЗаполненияКвитанции.Вставить("ТипКвитанции",        ТипКвитанции);
			КонецЕсли;
			лДанныеЗаполненияКвитанции.Вставить("ТекстКвитанции",      ИнформацияОКвитанции);
			лДанныеЗаполненияКвитанции.Вставить("ТелоКвитанции",       ДанныеКвитанции.Получить("Body"));
			лДанныеЗаполненияКвитанции.Вставить("ВхИсх",               Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий);
			лДанныеЗаполненияКвитанции.Вставить("GateId",              ИдентификаторКвитанцииGateId);
			лДанныеЗаполненияКвитанции.Вставить("РегистрационныйНомерДФС", РегНомер);
			
			
			лКвитанцияОбъект = Документы.скEDI_Квитанция.СоздатьДокумент();
			лКвитанцияОбъект.Заполнить(лДанныеЗаполненияКвитанции);
			
			//ДатаКвитанции = ТекущаяДата();
			// 2017-09-27
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Получено квитанцию'; uk = 'Отримано квитанцію'") + " """ + Строка(ТипКвитанции) + """ " + НСтр("ru = 'по документу'; uk = 'по документу'") + " """ + лЭлектронныйДокумент.ВидЭлектронногоДокумента.Наименование + """ №" + лЭлектронныйДокумент.НомерДокумента + " " + НСтр("ru = 'от'; uk = 'від'") + " " + Формат(лЭлектронныйДокумент.ДатаДокумента, "ДФ=dd.MM.yyyy"));
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Код отправителя'; uk = 'Код відправника'") + ": """ + ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ФилиалКонтрагента), " (" + ФилиалКонтрагента + ")", "") + """");
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Код получателя'; uk = 'Код отримувача'") + ": """ + ЕДРПОУПолучателя + ?(ЗначениеЗаполнено(ФилиалПолучателя), " (" + ФилиалПолучателя + ")", "") + """");
			// ...2017-09-27
			
			лКвитанцияОбъект.Дата = ДатаВремяКвитанции;
			лКвитанцияОбъект.ОбменДанными.Загрузка = Истина;
			лКвитанцияОбъект.Записать();
			
			лДатаОперации = ДатаВремяКвитанции; 
			лСостояниеЭлектронногоДокумента  = Неопределено;
			лСостояниеЭлектронногоДокументаРегистрацияВДФС  = Неопределено;
			лЕстьФинальнаяКвитанцияДФС = Ложь;
			лПричинаОтклоненияКонтрагентом = "";
			лРегистрационныйНомерДФС = Неопределено;
			лЗарегистрированВДФС = Неопределено;
			лДатаРегистрацииВДФС = Неопределено;
			лПричинаОтклоненияДФС = "";
			ФлагРедактироватьДокумент = Ложь;
			Если ВидКвитанции = Перечисления.скEDI_ВидыКвитанций.ДФСрк Тогда
				Если ТипКвитанции = Перечисления.скEDI_ТипыКвитанций.СообщениеОДоставке Тогда
					Если лЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленКонтрагентуДляРегистрацииВЕРПН")
						или лЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен") Тогда
						лСостояниеЭлектронногоДокумента = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоСообщениеОДоставке;
						ФлагРедактироватьДокумент = Истина;
					КонецЕсли;
				ИначеЕсли ТипКвитанции = Перечисления.скEDI_ТипыКвитанций.Подтверждение Тогда
					//Если лЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленКонтрагентуДляРегистрацииВЕРПН")
						//или лЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен")
						//или лЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоСообщениеОДоставке") Тогда
						лСостояниеЭлектронногоДокумента = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждение;
						ФлагРедактироватьДокумент = Истина;
					//КонецЕсли;
				ИначеЕсли ТипКвитанции = Перечисления.скEDI_ТипыКвитанций.Отклонение Тогда
					//Если лЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленКонтрагентуДляРегистрацииВЕРПН")
						//или лЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен")
						//или лЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоСообщениеОДоставке") Тогда
						лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонение;
						ФлагРедактироватьДокумент = Истина;
						
						п = Найти(ТекстКвитанции, "ПРИЧИНА ВІДМОВИ:");
						Если п > 0 Тогда
							лПричинаОтклоненияКонтрагентом = СокрЛП(Сред(ТекстКвитанции, п + 16));
						Иначе
							лПричинаОтклоненияКонтрагентом = ТекстКвитанции;
						КонецЕсли;
					//КонецЕсли;
				КонецЕсли;
			ИначеЕсли ВидКвитанции = Перечисления.скEDI_ВидыКвитанций.ДФС Тогда
				Если ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.Успешно Тогда
					Если лЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС")
						или лЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонениеОтДФС") Тогда
					Иначе
						лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияЭлектронныхДокументов.Получен;//ОтКонтрагентаЗарегистрированыйВЕРПН;
						лСостояниеЭлектронногоДокументаРегистрацияВДФС = Перечисления.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоПодтверждениеОтДФС;
						лЕстьФинальнаяКвитанцияДФС = Истина;
						лРегистрационныйНомерДФС = РегНомер;
						лЗарегистрированВДФС = Истина;
						лДатаРегистрацииВДФС = ДатаВремяКвитанции;
						ФлагРедактироватьДокумент = Истина;
					КонецЕсли;
				ИначеЕсли ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.Предупреджение Тогда
					//Если лЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС")
					//	или лЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонениеОтДФС") Тогда
					//Иначе
						лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияЭлектронныхДокументов.Получен;//ОтКонтрагентаЗарегистрированыйВЕРПН;
						лСостояниеЭлектронногоДокументаРегистрацияВДФС = Перечисления.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоКвитанциюОтДФС_Предупреждение;
						лРегистрационныйНомерДФС = РегНомер;
						лЗарегистрированВДФС = Истина;
						лДатаРегистрацииВДФС = ДатаВремяКвитанции;
						лПричинаОтклоненияДФС = ОшибкиДокумента;
						ФлагРедактироватьДокумент = Истина;
					//КонецЕсли;
				ИначеЕсли ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.Ошибка Тогда
					//Если лЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС")
					//	или лЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонениеОтДФС") Тогда
					//Иначе
						лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонениеОтДФС;
						лСостояниеЭлектронногоДокументаРегистрацияВДФС = Перечисления.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоОтклонениеОтДФС;
						лПричинаОтклоненияДФС = ОшибкиДокумента;
						ФлагРедактироватьДокумент = Истина;
					//КонецЕсли;
				ИначеЕсли ТипКвитанции = Перечисления.скEDI_ТипыКвитанцийДФС.РегистрацияОстановлена Тогда
					Если лЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС")
						или лЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонениеОтДФС") Тогда
					Иначе
						лСостояниеЭлектронногоДокумента  = Перечисления.скEDI_СостоянияЭлектронныхДокументов.Получен;//ОтКонтрагентаЗарегистрированыйВЕРПН;
						лСостояниеЭлектронногоДокументаРегистрацияВДФС = Перечисления.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоПодтверждениеОтДФС_РегистрацияОстановлена;
						лЕстьФинальнаяКвитанцияДФС = Ложь;//Истина;
						лРегистрационныйНомерДФС = РегНомер;
						лЗарегистрированВДФС = Ложь;//Истина;
						лДатаРегистрацииВДФС = ДатаВремяКвитанции;
						ФлагРедактироватьДокумент = Истина;
					КонецЕсли;
				Иначе
					Если лЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленКонтрагентуДляРегистрацииВЕРПН")
						или лЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен") Тогда
						лСостояниеЭлектронногоДокумента = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ПолученоСообщениеОДоставке;
						ФлагРедактироватьДокумент = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ФлагРедактироватьДокумент Тогда
				лЭлектронныйДокументОбъект = лЭлектронныйДокумент.ПолучитьОбъект();
				Если ЗначениеЗаполнено(лСостояниеЭлектронногоДокумента) Тогда
					лЭлектронныйДокументОбъект.Состояние = лСостояниеЭлектронногоДокумента;
				КонецЕсли;
				Если ЗначениеЗаполнено(лСостояниеЭлектронногоДокументаРегистрацияВДФС) Тогда
					лЭлектронныйДокументОбъект.СостояниеРегистрацияВДФС = лСостояниеЭлектронногоДокументаРегистрацияВДФС;
				КонецЕсли;
				Если лЕстьФинальнаяКвитанцияДФС Тогда
					лЭлектронныйДокументОбъект.ЕстьФинальнаяКвитанцияДФС = Истина;
				КонецЕсли;
				Если ЗначениеЗаполнено(лДатаОперации) Тогда
					Если ЗначениеЗаполнено(лЭлектронныйДокументОбъект.ПоследняяОперация) Тогда
						Если лЭлектронныйДокументОбъект.ПоследняяОперация < лДатаОперации Тогда
							лЭлектронныйДокументОбъект.ПоследняяОперация = лДатаОперации;
						КонецЕсли;
					Иначе
						лЭлектронныйДокументОбъект.ПоследняяОперация = лДатаОперации;
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(лПричинаОтклоненияКонтрагентом) Тогда
					лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом = лПричинаОтклоненияКонтрагентом;
				КонецЕсли;
				Если лЗарегистрированВДФС <> Неопределено Тогда
					Если не лЭлектронныйДокументОбъект.ЗарегистрированВДФС Тогда
						лЭлектронныйДокументОбъект.ЗарегистрированВДФС = лЗарегистрированВДФС;
					КонецЕсли;
				КонецЕсли;
				Если лРегистрационныйНомерДФС <> Неопределено Тогда
					Если лЭлектронныйДокументОбъект.РегистрационныйНомерДФС = "" Тогда
						лЭлектронныйДокументОбъект.РегистрационныйНомерДФС = лРегистрационныйНомерДФС;
					КонецЕсли;
				КонецЕсли;
				Если лДатаРегистрацииВДФС <> Неопределено Тогда
					Если не ЗначениеЗаполнено(лЭлектронныйДокументОбъект.ДатаРегистрацииВДФС) Тогда
						лЭлектронныйДокументОбъект.ДатаРегистрацииВДФС = лДатаРегистрацииВДФС;
					КонецЕсли;
				КонецЕсли;
				Если лПричинаОтклоненияДФС <> "" Тогда
					лЭлектронныйДокументОбъект.ПричинаОтклоненияДФС = лПричинаОтклоненияДФС;
				КонецЕсли;
				
				лВидЭлектронногоДокумента = лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента;
				Если ЗначениеЗаполнено(лЭлектронныйДокументОбъект.Документ1С) Тогда
					//Если лВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная")
					//или	лВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
						скEDI_НастройкиПодКонфигурациюНалоговыеДокументы.УстановитьОтметкуОРегистрацииНалоговогоДокумента(лЭлектронныйДокументОбъект, лЭлектронныйДокументОбъект.Документ1С);
					//КонецЕсли;
				Иначе
					ИмяШаблона = лЭлектронныйДокументОбъект.ИмяШаблона;
					лСоответствиеСРеквизитамиЭлектронногоДокумента = ПолучитьСоответствиеСРеквизитамиИзЭлектронногоДокумента(лЭлектронныйДокументОбъект);
					Если лСоответствиеСРеквизитамиЭлектронногоДокумента <> Неопределено Тогда
						Документ1С = Неопределено;
						Документ1СБылСоздан = Ложь;
						Если скEDI_НастройкиПодКонфигурациюНалоговыеДокументы.ЗагрузитьНалоговыйДокумент1С(Документ1С, ОрганизацияПолучатель, лВидЭлектронногоДокумента, лВидЭлектронногоДокумента.ТипДокумента, Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий, лЭлектронныйДокументОбъект,
							ИмяШаблона, 
							лСоответствиеСРеквизитамиЭлектронногоДокумента, "", Документ1СБылСоздан, Истина, Истина) Тогда
							
							лЭлектронныйДокументОбъект.Документ1С = Документ1С;								
							
							Если не Документ1СБылСоздан Тогда
								//Если лВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная")
								//или	лВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
									скEDI_НастройкиПодКонфигурациюНалоговыеДокументы.УстановитьОтметкуОРегистрацииНалоговогоДокумента(лЭлектронныйДокументОбъект, Документ1С);
								//КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ЗаписатьЭлектронныйДокументСПредварительнымПоискомСвязаных(лЭлектронныйДокументОбъект, лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента, ОрганизацияПолучатель);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат лНетОшибокПриОбработкеКвитанции;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПроверитьНаличиеКвитанцииВБазе(ИмяФайла, ОрганизацияEDI)
	Перем лРезультат;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	скEDI_Квитанция.Ссылка
	|ИЗ
	|	Документ.скEDI_Квитанция КАК скEDI_Квитанция
	|ГДЕ
	|	НЕ скEDI_Квитанция.ПометкаУдаления
	|	И скEDI_Квитанция.ИмяФайла = &ИмяФайла
	|	И скEDI_Квитанция.Организация = &ОрганизацияEDI";
	Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
	Запрос.УстановитьПараметр("ОрганизацияEDI", ОрганизацияEDI);
	
	лВыборкаРезультатовЗапроса = Запрос.Выполнить().Выбрать();
	Если лВыборкаРезультатовЗапроса.Следующий() Тогда
		
		лРезультат = лВыборкаРезультатовЗапроса.Ссылка;
		
	КонецЕсли;
	
	Возврат лРезультат;
	
КонецФункции // ПроверитьНаличиеКвитанцииВБазе()

Функция ПроверитьНаличиеКвитанцииДФСВБазе(GateId, ЭлектронныйДокумент)
	Перем лРезультат;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	скEDI_Квитанция.Ссылка
	|ИЗ
	|	Документ.скEDI_Квитанция КАК скEDI_Квитанция
	|ГДЕ
	|	НЕ скEDI_Квитанция.ПометкаУдаления
	|	И скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|	И скEDI_Квитанция.GateId = &GateId
	|	И скEDI_Квитанция.ВидКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыКвитанций.ДФС)";
	Запрос.УстановитьПараметр("GateId", GateId);
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	лВыборкаРезультатовЗапроса = Запрос.Выполнить().Выбрать();
	Если лВыборкаРезультатовЗапроса.Следующий() Тогда
		
		лРезультат = лВыборкаРезультатовЗапроса.Ссылка;
		
	КонецЕсли;
	
	Возврат лРезультат;
	
КонецФункции // ПроверитьНаличиеКвитанцииВБазе()

Функция ПроверитьНаличиеКвитанцииДФСРКВБазе(GateId, ЭлектронныйДокумент)
	Перем лРезультат;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	скEDI_Квитанция.Ссылка
	|ИЗ
	|	Документ.скEDI_Квитанция КАК скEDI_Квитанция
	|ГДЕ
	|	НЕ скEDI_Квитанция.ПометкаУдаления
	|	И скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|	И скEDI_Квитанция.GateId = &GateId
	|	И скEDI_Квитанция.ВидКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыКвитанций.ДФСрк)";
	Запрос.УстановитьПараметр("GateId", GateId);
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	лВыборкаРезультатовЗапроса = Запрос.Выполнить().Выбрать();
	Если лВыборкаРезультатовЗапроса.Следующий() Тогда
		
		лРезультат = лВыборкаРезультатовЗапроса.Ссылка;
		
	КонецЕсли;
	
	Возврат лРезультат;
	
КонецФункции // ПроверитьНаличиеКвитанцииВБазе()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ОтправитьКвитанциюОбУспешнойДоставкеКвитанции(ДанныеКвитанции, Организация, НастройкиПодписиШифрования, ЖурналОперации = "")
	
	лПараметрыОтправкиКвитанцииПодтвержденияДоставки = Новый Структура;
	//лПараметрыОтправкиКвитанцииПодтвержденияДоставки.Вставить("Edrpou",       ДанныеКвитанции.Получить("RcvEdrpou"));
	//лПараметрыОтправкиКвитанцииПодтвержденияДоставки.Вставить("Dept",         ДанныеКвитанции.Получить("RcvDept"));
	лПараметрыОтправкиКвитанцииПодтвержденияДоставки.Вставить("Edrpou",       Организация.Код);
	лПараметрыОтправкиКвитанцииПодтвержденияДоставки.Вставить("Dept",         Организация.Филиал);
	лПараметрыОтправкиКвитанцииПодтвержденияДоставки.Вставить("PrgId",        Организация.ИдентификаторПрограммы);
	лПараметрыОтправкиКвитанцииПодтвержденияДоставки.Вставить("FileName",     ДанныеКвитанции.Получить("FileName"));
	лПараметрыОтправкиКвитанцииПодтвержденияДоставки.Вставить("AnsFileName",  ДанныеКвитанции.Получить("AnsFileName"));
	СтрокаПодключенияEDI = Неопределено;
	СерверEDI = Неопределено;
	ПортEDI = Неопределено;
	ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиКвитанцииПодтвержденияДоставки, НастройкиПодписиШифрования, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
	//лПараметрыОтправкиКвитанцииПодтвержденияДоставки.Вставить("Cert",         НастройкиПодписиШифрования.ТелоСертификата);
	//лПараметрыОтправкиКвитанцииПодтвержденияДоставки.Вставить("Key",          НастройкиПодписиШифрования.ТелоСекретногоКлюча);
	//лПараметрыОтправкиКвитанцииПодтвержденияДоставки.Вставить("Password",     НастройкиПодписиШифрования.ПарольСекретногоКлюча);
	
	Если Не ОтправитьКвитанциюОРезультатеПолученияКвитанцииСПомощьюEDIПровайдера(Истина, лПараметрыОтправкиКвитанцииПодтвержденияДоставки, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI) Тогда
		
		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не удалось отправить квитанцию об успешной доставке квитанции по имени файла'; uk = 'Не вдалось відправити квитанцію про успішну доставку квитанції за ім''ям файла'") + ": " + ДанныеКвитанции.Получить("AnsFileName"));
		
	КонецЕсли;
	
КонецПроцедуры // ОтправитьКвитанциюОбУспешнойДоставкеКвитанции()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура УдалитьВходящееСообщениеССервераДФС(ДанныеКвитанции, НастройкиПодписиШифрования, ЖурналОперации = "")
	лПараметрыОтправкиКвитанцииПодтвержденияДоставки = Новый Структура;
	лПараметрыОтправкиКвитанцииПодтвержденияДоставки.Вставить("GateId",       ДанныеКвитанции.Получить("GateId"));
	СтрокаПодключенияEDI = Неопределено;
	СерверEDI = Неопределено;
	ПортEDI = Неопределено;
	ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиКвитанцииПодтвержденияДоставки, НастройкиПодписиШифрования, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
	//лПараметрыОтправкиКвитанцииПодтвержденияДоставки.Вставить("Cert",         НастройкиПодписиШифрования.ТелоСертификата);
	//лПараметрыОтправкиКвитанцииПодтвержденияДоставки.Вставить("Key",          НастройкиПодписиШифрования.ТелоСекретногоКлюча);
	//лПараметрыОтправкиКвитанцииПодтвержденияДоставки.Вставить("Password",     НастройкиПодписиШифрования.ПарольСекретногоКлюча);
	
	Если Не УдалитьВходящееСообщениеССервераДФССПомощьюEDIПровайдера(лПараметрыОтправкиКвитанцииПодтвержденияДоставки, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI) Тогда
		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не удалось отправить квитанцию об успешной доставке квитанции по имени файла'; uk = 'Не вдалось відправити квитанцію про успішну доставку квитанції за ім''ям файла'") + ": " + ДанныеКвитанции.Получить("AnsFileName"));
	КонецЕсли;
КонецПроцедуры // ОтправитьКвитанциюОбУспешнойДоставкеКвитанции()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ОтправитьКвитанциюОбОшибкеПриемаКвитанции(ДанныеКвитанции, Организация, НастройкиПодписиШифрования, ЖурналОперации = "")
	лПараметрыОтправкиКвитанцииОбОшибкеДоставки = Новый Структура;
	//лПараметрыОтправкиКвитанцииОбОшибкеДоставки.Вставить("Edrpou",       ДанныеКвитанции.Получить("RcvEdrpou"));
	//лПараметрыОтправкиКвитанцииОбОшибкеДоставки.Вставить("Dept",         ДанныеКвитанции.Получить("RcvDept"));
	лПараметрыОтправкиКвитанцииОбОшибкеДоставки.Вставить("Edrpou",       Организация.Код);
	лПараметрыОтправкиКвитанцииОбОшибкеДоставки.Вставить("Dept",         Организация.Филиал);
	лПараметрыОтправкиКвитанцииОбОшибкеДоставки.Вставить("PrgId",        Организация.ИдентификаторПрограммы);
	лПараметрыОтправкиКвитанцииОбОшибкеДоставки.Вставить("FileName",     ДанныеКвитанции.Получить("FileName"));
	лПараметрыОтправкиКвитанцииОбОшибкеДоставки.Вставить("AnsFileName",  ДанныеКвитанции.Получить("AnsFileName"));
	лПараметрыОтправкиКвитанцииОбОшибкеДоставки.Вставить("Text",         "Текст сообщения об ошибке приема квитанции в разработке.");
	СтрокаПодключенияEDI = Неопределено;
	СерверEDI = Неопределено;
	ПортEDI = Неопределено;
	ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиКвитанцииОбОшибкеДоставки, НастройкиПодписиШифрования, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
	//лПараметрыОтправкиКвитанцииОбОшибкеДоставки.Вставить("Cert",         НастройкиПодписиШифрования.ТелоСертификата);
	//лПараметрыОтправкиКвитанцииОбОшибкеДоставки.Вставить("Key",          НастройкиПодписиШифрования.ТелоСекретногоКлюча);
	//лПараметрыОтправкиКвитанцииОбОшибкеДоставки.Вставить("Password",     НастройкиПодписиШифрования.ПарольСекретногоКлюча);
	
	Если Не ОтправитьКвитанциюОРезультатеПолученияКвитанцииСПомощьюEDIПровайдера(Ложь, лПараметрыОтправкиКвитанцииОбОшибкеДоставки, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI) Тогда
		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не удалось отправить квитанцию об успешной доставке квитанции по имени файла'; uk = 'Не вдалось відправити квитанцію про успішну доставку квитанції за ім''ям файла'") + ": " + ДанныеКвитанции.Получить("AnsFileName"));
	КонецЕсли;
КонецПроцедуры // ОтправитьКвитанциюОбОшибкеПриемаКвитанции()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьПодписьДляКвитанцииПоДокументу(ЭлектронныйДокументСсылка, ВидЭлектронногоДокументаСсылка)
	Перем лРезультат;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	скEDI_ЭлектронныйДокументПодписи.Подпись,
	|	скEDI_ЭлектронныйДокументПодписи.НомерСтроки КАК НомерСтроки,
	|	1 КАК Источник
	|ИЗ
	|	Документ.скEDI_ЭлектронныйДокумент.Подписи КАК скEDI_ЭлектронныйДокументПодписи
	|ГДЕ
	|	скEDI_ЭлектронныйДокументПодписи.Ссылка = &ЭлектронныйДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	скEDI_ВидыЭлектронныхДокументовПодписи.Подпись,
	|	скEDI_ВидыЭлектронныхДокументовПодписи.НомерСтроки,
	|	2
	|ИЗ
	|	Справочник.скEDI_ВидыЭлектронныхДокументов.Подписи КАК скEDI_ВидыЭлектронныхДокументовПодписи
	|ГДЕ
	|	скEDI_ВидыЭлектронныхДокументовПодписи.Ссылка = &ВидЭлектронногоДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Источник,
	|	НомерСтроки УБЫВ";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокументСсылка);
	Запрос.УстановитьПараметр("ВидЭлектронногоДокумента", ВидЭлектронногоДокументаСсылка);
	
	лВыборкаРезультатовЗапроса = Запрос.Выполнить().Выбрать();
	Если лВыборкаРезультатовЗапроса.Следующий() Тогда
		
		лРезультат = лВыборкаРезультатовЗапроса.Подпись;
		
	КонецЕсли;
	
	Возврат лРезультат;
	
КонецФункции // ПолучитьПодписьДляКвитанцииПоДокументу()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ЗафиксироватьСобытиеЭлектронногоДокумента(ЭлектронныйДокументСсылка, Событие, ОписаниеСобытия = "", ДатаСобытия = Неопределено, DocVer = 0, ИмяФайла = "", ИмяФайлаКвитанции = "") Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(скEDI_СобытияЭлектронныхДокументов.НомерСобытия) КАК НомерСобытия
	               |ИЗ
	               |	РегистрСведений.скEDI_СобытияЭлектронныхДокументов КАК скEDI_СобытияЭлектронныхДокументов
	               |ГДЕ
	               |	скEDI_СобытияЭлектронныхДокументов.ЭлектронныйДокумент = &ЭлектронныйДокумент";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокументСсылка);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		Если ВыборкаРезультатаЗапроса.НомерСобытия = Null Тогда
			НомерСобытия = 1;
		Иначе
			НомерСобытия = ВыборкаРезультатаЗапроса.НомерСобытия + 1;
		КонецЕсли;
	Иначе
		НомерСобытия = 1;
	КонецЕсли;
	
	лНоваяЗаписьНабора = РегистрыСведений.скEDI_СобытияЭлектронныхДокументов.СоздатьМенеджерЗаписи();
	
	Если ДатаСобытия = Неопределено Тогда
		ДатаСобытия = ТекущаяДата();
	КонецЕсли;
	лНоваяЗаписьНабора.ДатаСобытия          = ДатаСобытия;
	лНоваяЗаписьНабора.ЭлектронныйДокумент  = ЭлектронныйДокументСсылка;
	лНоваяЗаписьНабора.Событие              = Событие;
	лНоваяЗаписьНабора.НомерСобытия = НомерСобытия;
	лНоваяЗаписьНабора.Описание             = ОписаниеСобытия;
	лНоваяЗаписьНабора.Ответственный        = скEDI_НастройкиПодКонфигурацию.ПолучитьТекущегоПользователя();
	лНоваяЗаписьНабора.DocVer = DocVer;
	лНоваяЗаписьНабора.ИмяФайла = ИмяФайла;
	лНоваяЗаписьНабора.ИмяФайлаКвитанции = ИмяФайлаКвитанции;
	
	лНоваяЗаписьНабора.Записать();
	
КонецПроцедуры // ЗафиксироватьСобытиеЭлектронногоДокумента()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Функция ПолучитьМассивЭлектронныхДокументовПоСсылкеНаДокумент1С(Документ1С) Экспорт
	
	лРезультат = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	скEDI_ЭлектронныйДокумент.Ссылка
	|ИЗ
	|	Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
	|ГДЕ
	|	скEDI_ЭлектронныйДокумент.Документ1С = &Документ1С
	|	И НЕ скEDI_ЭлектронныйДокумент.ПометкаУдаления";
	Запрос.УстановитьПараметр("Документ1С", Документ1С);
	
	лВыборкаРезультатовЗапроса = Запрос.Выполнить().Выбрать();
	Пока лВыборкаРезультатовЗапроса.Следующий() Цикл
		
		лРезультат.Добавить(лВыборкаРезультатовЗапроса.Ссылка);
		
	КонецЦикла;
	
	Возврат лРезультат;
	
КонецФункции // ПолучитьЭлектронныйДокументПоСсылкеНаДокумент1С()

Функция ПолучитьВидЭлектронногоДокументаПоТипу(ОрганизацияЕДО, ТипЭлектронногоДокумента)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	скEDI_ВидыЭлектронныхДокументов.Ссылка
	               |ИЗ
	               |	Справочник.скEDI_ВидыЭлектронныхДокументов КАК скEDI_ВидыЭлектронныхДокументов
	               |ГДЕ
	               |	скEDI_ВидыЭлектронныхДокументов.Владелец = &Владелец
	               |	И скEDI_ВидыЭлектронныхДокументов.ТипДокумента = &ТипДокумента
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	скEDI_ВидыЭлектронныхДокументов.ПометкаУдаления";
	Запрос.УстановитьПараметр("Владелец", ОрганизацияЕДО);
	Запрос.УстановитьПараметр("ТипДокумента", ТипЭлектронногоДокумента);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		Возврат ВыборкаРезультатаЗапроса.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции


// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьМассивВидовИсходящихЭлектронныхДокументовДоступныхДляДокумента1С(Документ1С, ОрганизацияЕДО) Экспорт
	
	лРезультат = Новый Массив;
	
	ВидДокумента = скEDI_НастройкиПодКонфигурацию.ПолучитьВидДокумента1С(Документ1С);
	Если ВидДокумента = Перечисления.скEDI_ВидыДокументов1С.НалоговаяНакладная Тогда
		ВидЭлектронногоДокумента = ПолучитьВидЭлектронногоДокументаПоТипу(ОрганизацияЕДО, Перечисления.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная);
		Если ВидЭлектронногоДокумента <> Неопределено Тогда
			лРезультат.Добавить(ВидЭлектронногоДокумента);
		КонецЕсли;
	ИначеЕсли ВидДокумента = Перечисления.скEDI_ВидыДокументов1С.Приложение2КНалоговойНакладной Тогда
		ВидЭлектронногоДокумента = ПолучитьВидЭлектронногоДокументаПоТипу(ОрганизацияЕДО, Перечисления.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной);
		Если ВидЭлектронногоДокумента <> Неопределено Тогда
			лРезультат.Добавить(ВидЭлектронногоДокумента);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	скEDI_ПравилаВыгрузки.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента
	|ИЗ
	|	РегистрСведений.скEDI_ПравилаВыгрузки КАК скEDI_ПравилаВыгрузки
	|ГДЕ
	|	скEDI_ПравилаВыгрузки.ВидДокумента1С = &ВидДокумента
	|	И скEDI_ПравилаВыгрузки.ВидЭлектронногоДокумента.Владелец = &ОрганизацияЕДО
	|	И скEDI_ПравилаВыгрузки.Использование
	|	И НЕ скEDI_ПравилаВыгрузки.ВидЭлектронногоДокумента В (&ИсключитьВидыЭлектронныхДокументов)";
	Запрос.УстановитьПараметр("ВидДокумента",  ВидДокумента);
	Запрос.УстановитьПараметр("ОрганизацияЕДО" , ОрганизацияЕДО);
	Запрос.УстановитьПараметр("ИсключитьВидыЭлектронныхДокументов" , лРезультат);
	
	лВыборкаРезультатовЗапроса = Запрос.Выполнить().Выбрать();
	Пока лВыборкаРезультатовЗапроса.Следующий() Цикл
		
		лРезультат.Добавить(лВыборкаРезультатовЗапроса.ВидЭлектронногоДокумента);
		
	КонецЦикла;
	
	Возврат лРезультат;
	
КонецФункции // ПолучитьМассивВидовИсходящихЭлектронныхДокументовДоступныхДляДокумента1С()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьТипКвитанцииПоКоду(КодТипаКвитанции)
	Перем лРезультат;
	
	Если КодТипаКвитанции = "1" Тогда
		лРезультат = Перечисления.скEDI_ТипыКвитанций.СообщениеОДоставке;
	ИначеЕсли КодТипаКвитанции = "2" Тогда
		лРезультат = Перечисления.скEDI_ТипыКвитанций.Подтверждение;
	ИначеЕсли КодТипаКвитанции = "3" Тогда
		лРезультат = Перечисления.скEDI_ТипыКвитанций.Отклонение;
	ИначеЕсли КодТипаКвитанции = "4" Тогда
		лРезультат = Перечисления.скEDI_ТипыКвитанций.Отзыв;
	ИначеЕсли КодТипаКвитанции = "5" Тогда
		лРезультат = Перечисления.скEDI_ТипыКвитанций.Доподписание;
	КонецЕсли;
	
	Возврат лРезультат;
КонецФункции // ПолучитьТипКвитанцииПоКоду()

Функция ПолучитьТипКвитанцииРКПоКоду(КодТипаКвитанции)
	Перем лРезультат;
	
	Если КодТипаКвитанции = 0 Тогда
		лРезультат = Перечисления.скEDI_ТипыКвитанций.Подтверждение;
	ИначеЕсли КодТипаКвитанции = 1 Тогда
		лРезультат = Перечисления.скEDI_ТипыКвитанций.Отклонение;
	ИначеЕсли КодТипаКвитанции = 2 Тогда
		лРезультат = Перечисления.скEDI_ТипыКвитанций.СообщениеОДоставке;
	Иначе
		лРезультат = Перечисления.скEDI_ТипыКвитанций.ПустаяСсылка();
	КонецЕсли;
	
	Возврат лРезультат;
КонецФункции // ПолучитьТипКвитанцииПоКоду()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьТипКвитанцииДФСПоКоду(КодТипаКвитанции)
	Перем лРезультат;
	
	Если КодТипаКвитанции = 0 Тогда
		лРезультат = Перечисления.скEDI_ТипыКвитанцийДФС.Успешно;
	ИначеЕсли КодТипаКвитанции = 1 Тогда
		лРезультат = Перечисления.скEDI_ТипыКвитанцийДФС.Ошибка;
	ИначеЕсли КодТипаКвитанции = 2 Тогда
		лРезультат = Перечисления.скEDI_ТипыКвитанцийДФС.Предупреджение;
	КонецЕсли;
	
	Возврат лРезультат;
КонецФункции // ПолучитьТипКвитанцииПоКоду()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ОпределитьВидЭлектронногоДокументаПоИмениШаблона(ЕДРПОУВладельцаШаблона, ИмяШаблона, ВерсияШаблона, ТипДокументаMEDoc, ОрганизацияEDI) Экспорт
	Перем лРезультат;
	
	Если не ЗначениеЗаполнено(ТипДокументаMEDoc) Тогда // АПИ не возвращает SDocType для НалоговыхДокументов 2019-01-21
		Если ВРег(Лев(ИмяШаблона, 6)) = "J12010" Тогда
			ТипДокументаMEDoc = Перечисления.скEDI_ТипыДокументовMEDoc.Т10100;//НалоговаяНакладная
		ИначеЕсли ВРег(Лев(ИмяШаблона, 6)) = "F12010" Тогда
			ТипДокументаMEDoc = Перечисления.скEDI_ТипыДокументовMEDoc.Т10100;//НалоговаяНакладная
		ИначеЕсли ВРег(Лев(ИмяШаблона, 6)) = "J12012" Тогда
			ТипДокументаMEDoc = Перечисления.скEDI_ТипыДокументовMEDoc.Т10101;//Приложение2КНалоговойНакладной
		ИначеЕсли ВРег(Лев(ИмяШаблона, 6)) = "F12012" Тогда
			ТипДокументаMEDoc = Перечисления.скEDI_ТипыДокументовMEDoc.Т10101;//Приложение2КНалоговойНакладной
		Иначе
			ТипДокументаMEDoc = Перечисления.скEDI_ТипыДокументовMEDoc.Т10106;//Другие документы
		КонецЕсли;
	КонецЕсли;
	
	Если ТипДокументаMEDoc = Перечисления.скEDI_ТипыДокументовMEDoc.Т10100 Тогда//НалоговаяНакладная
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	скEDI_ВидыЭлектронныхДокументов.Ссылка,
		               |	скEDI_ВидыЭлектронныхДокументов.Наименование
		               |ИЗ
		               |	Справочник.скEDI_ВидыЭлектронныхДокументов КАК скEDI_ВидыЭлектронныхДокументов
		               |ГДЕ
		               |	скEDI_ВидыЭлектронныхДокументов.Владелец = &Владелец
		               |	И скEDI_ВидыЭлектронныхДокументов.ТипДокумента = &ТипДокумента
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	скEDI_ВидыЭлектронныхДокументов.ПометкаУдаления";
		Запрос.УстановитьПараметр("Владелец", ОрганизацияEDI);
		Запрос.УстановитьПараметр("ТипДокумента", Перечисления.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная);
		ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		Если ВыборкаРезультатаЗапроса.Следующий() Тогда
			лРезультат = ВыборкаРезультатаЗапроса.Ссылка;
		Иначе
			НовыйВидЭлектронныхДокументов = Справочники.скEDI_ВидыЭлектронныхДокументов.СоздатьЭлемент();
			НовыйВидЭлектронныхДокументов.Владелец = ОрганизацияEDI;
			НовыйВидЭлектронныхДокументов.Наименование = Строка(ТипДокументаMEDoc);
			НовыйВидЭлектронныхДокументов.ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная;
			НовыйВидЭлектронныхДокументов.Записать();
			лРезультат = НовыйВидЭлектронныхДокументов.Ссылка;
		КонецЕсли;
	ИначеЕсли ТипДокументаMEDoc = Перечисления.скEDI_ТипыДокументовMEDoc.Т10101 Тогда//Приложение2КНалоговойНакладной
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	скEDI_ВидыЭлектронныхДокументов.Ссылка,
		               |	скEDI_ВидыЭлектронныхДокументов.Наименование
		               |ИЗ
		               |	Справочник.скEDI_ВидыЭлектронныхДокументов КАК скEDI_ВидыЭлектронныхДокументов
		               |ГДЕ
		               |	скEDI_ВидыЭлектронныхДокументов.Владелец = &Владелец
		               |	И скEDI_ВидыЭлектронныхДокументов.ТипДокумента = &ТипДокумента
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	скEDI_ВидыЭлектронныхДокументов.ПометкаУдаления";
		Запрос.УстановитьПараметр("Владелец", ОрганизацияEDI);
		Запрос.УстановитьПараметр("ТипДокумента", Перечисления.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной);
		ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		Если ВыборкаРезультатаЗапроса.Следующий() Тогда
			лРезультат = ВыборкаРезультатаЗапроса.Ссылка;
		Иначе
			НовыйВидЭлектронныхДокументов = Справочники.скEDI_ВидыЭлектронныхДокументов.СоздатьЭлемент();
			НовыйВидЭлектронныхДокументов.Владелец = ОрганизацияEDI;
			НовыйВидЭлектронныхДокументов.Наименование = Строка(ТипДокументаMEDoc);
			НовыйВидЭлектронныхДокументов.ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной;
			НовыйВидЭлектронныхДокументов.Записать();
			лРезультат = НовыйВидЭлектронныхДокументов.Ссылка;
		КонецЕсли;
	Иначе
		Если ИмяШаблона <> Неопределено Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	скEDI_ПравилаЗагрузки.ВидЭлектронногоДокумента
			|ИЗ
			|	РегистрСведений.скEDI_ПравилаЗагрузки КАК скEDI_ПравилаЗагрузки
			|ГДЕ
			|	скEDI_ПравилаЗагрузки.Организация = &ОрганизацияEDI
			|	И скEDI_ПравилаЗагрузки.Использование
			|	И (скEDI_ПравилаЗагрузки.ЕДРПОУВладельцаШаблона = &ЕДРПОУВладельцаШаблона
			|				И скEDI_ПравилаЗагрузки.ИмяШаблона = &ИмяШаблона
			|				И скEDI_ПравилаЗагрузки.ВерсияШаблона = &ВерсияШаблона
			|			ИЛИ скEDI_ПравилаЗагрузки.ЕДРПОУВладельцаШаблона = &ЕДРПОУВладельцаШаблона
			|				И скEDI_ПравилаЗагрузки.ИмяШаблона = &ИмяШаблона
			|				И скEDI_ПравилаЗагрузки.ВерсияШаблона = """"
			|			ИЛИ скEDI_ПравилаЗагрузки.ЕДРПОУВладельцаШаблона = """"
			|				И скEDI_ПравилаЗагрузки.ИмяШаблона = &ИмяШаблона
			|				И скEDI_ПравилаЗагрузки.ВерсияШаблона = """")
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВЫБОР
			|		КОГДА скEDI_ПравилаЗагрузки.ЕДРПОУВладельцаШаблона = &ЕДРПОУВладельцаШаблона
			|				И скEDI_ПравилаЗагрузки.ИмяШаблона = &ИмяШаблона
			|				И скEDI_ПравилаЗагрузки.ВерсияШаблона = &ВерсияШаблона
			|			ТОГДА 100
			|		КОГДА скEDI_ПравилаЗагрузки.ЕДРПОУВладельцаШаблона = &ЕДРПОУВладельцаШаблона
			|				И скEDI_ПравилаЗагрузки.ИмяШаблона = &ИмяШаблона
			|				И скEDI_ПравилаЗагрузки.ВерсияШаблона = """"
			|			ТОГДА 10
			|		КОГДА скEDI_ПравилаЗагрузки.ЕДРПОУВладельцаШаблона = """"
			|				И скEDI_ПравилаЗагрузки.ИмяШаблона = &ИмяШаблона
			|				И скEDI_ПравилаЗагрузки.ВерсияШаблона = """"
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ УБЫВ,
			|	скEDI_ПравилаЗагрузки.Приоритет УБЫВ";
			Запрос.УстановитьПараметр("ЕДРПОУВладельцаШаблона", ?(ЕДРПОУВладельцаШаблона = Null, "", ЕДРПОУВладельцаШаблона));
			Запрос.УстановитьПараметр("ИмяШаблона",             ?(ИмяШаблона = Null, "", ИмяШаблона));
			Запрос.УстановитьПараметр("ВерсияШаблона",          ?(ВерсияШаблона = Null, "", Строка(ВерсияШаблона)));
			Запрос.УстановитьПараметр("ОрганизацияEDI", ОрганизацияEDI);
			
			лВыборкаРезультатовЗапроса = Запрос.Выполнить().Выбрать();
			Если лВыборкаРезультатовЗапроса.Следующий() Тогда
				лРезультат = лВыборкаРезультатовЗапроса.ВидЭлектронногоДокумента;
			Иначе
				ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент;
				Если ТипДокументаMEDoc = Перечисления.скEDI_ТипыДокументовMEDoc.Т10106 Тогда////Другие документы
					НаименованиеВидаЭлектронногоДокумента = ИмяШаблона;
				ИначеЕсли ТипДокументаMEDoc = Перечисления.скEDI_ТипыДокументовMEDoc.Т10111 Тогда////Документ с вложением
					НаименованиеВидаЭлектронногоДокумента = "Універсальний документ";// Строка(ТипДокументаMEDoc);
					ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями;
				ИначеЕсли ТипДокументаMEDoc = Перечисления.скEDI_ТипыДокументовMEDoc.Т10138 Тогда////Соглашение о анулировании документа
					НаименованиеВидаЭлектронногоДокумента = "Угода про анулювання документа";// Строка(ТипДокументаMEDoc);
					ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента;
				Иначе
					НаименованиеВидаЭлектронногоДокумента = Строка(ТипДокументаMEDoc);
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	скEDI_ВидыЭлектронныхДокументов.Ссылка,
				               |	скEDI_ВидыЭлектронныхДокументов.Наименование
				               |ИЗ
				               |	Справочник.скEDI_ВидыЭлектронныхДокументов КАК скEDI_ВидыЭлектронныхДокументов
				               |ГДЕ
				               |	скEDI_ВидыЭлектронныхДокументов.Владелец = &Владелец
				               |	И скEDI_ВидыЭлектронныхДокументов.Наименование = &Наименование
				               |	И скEDI_ВидыЭлектронныхДокументов.ТипДокумента = &ТипДокумента
				               |
				               |УПОРЯДОЧИТЬ ПО
				               |	скEDI_ВидыЭлектронныхДокументов.ПометкаУдаления";
				Запрос.УстановитьПараметр("Владелец", ОрганизацияEDI);
				Запрос.УстановитьПараметр("Наименование", НаименованиеВидаЭлектронногоДокумента);
				Запрос.УстановитьПараметр("ТипДокумента", ТипДокумента);

				ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
				Если ВыборкаРезультатаЗапроса.Следующий() Тогда
					лРезультат = ВыборкаРезультатаЗапроса.Ссылка;
				Иначе
					НовыйВидЭлектронныхДокументов = Справочники.скEDI_ВидыЭлектронныхДокументов.СоздатьЭлемент();
					НовыйВидЭлектронныхДокументов.Владелец = ОрганизацияEDI;
					НовыйВидЭлектронныхДокументов.Наименование = НаименованиеВидаЭлектронногоДокумента;
					НовыйВидЭлектронныхДокументов.ТипДокумента = ТипДокумента;
					НовыйВидЭлектронныхДокументов.ВариантОпределенияСуммыПоДокументу = Перечисления.скEDI_ВариантыОпределенияСуммыПоДокументу.СуммаДокумента;
					НовыйВидЭлектронныхДокументов.Записать();
					лРезультат = НовыйВидЭлектронныхДокументов.Ссылка;
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	МАКСИМУМ(скEDI_ПравилаЗагрузки.Приоритет) КАК Приоритет
				|ИЗ
				|	РегистрСведений.скEDI_ПравилаЗагрузки КАК скEDI_ПравилаЗагрузки
				|ГДЕ
				|	скEDI_ПравилаЗагрузки.ЕДРПОУВладельцаШаблона = &ЕДРПОУВладельцаШаблона
				|	И скEDI_ПравилаЗагрузки.ИмяШаблона = &ИмяШаблона
				|	И скEDI_ПравилаЗагрузки.Организация = &ОрганизацияEDI";
				Запрос.УстановитьПараметр("ЕДРПОУВладельцаШаблона", ?(ЕДРПОУВладельцаШаблона = Null, "", ЕДРПОУВладельцаШаблона));
				Запрос.УстановитьПараметр("ИмяШаблона",      ИмяШаблона);
				Запрос.УстановитьПараметр("ОрганизацияEDI", ОрганизацияEDI);
				Приоритет = 1;
				ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
				Если ВыборкаРезультатаЗапроса.Следующий() Тогда
					Если ВыборкаРезультатаЗапроса.Приоритет <> Null Тогда
						Приоритет = ВыборкаРезультатаЗапроса.Приоритет + 1;
					КонецЕсли;
				КонецЕсли;
				
				МенеджерЗаписи = РегистрыСведений.скEDI_ПравилаЗагрузки.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Организация = ОрганизацияEDI;
				МенеджерЗаписи.ЕДРПОУВладельцаШаблона = ?(ЕДРПОУВладельцаШаблона = Null, "", ЕДРПОУВладельцаШаблона);
				МенеджерЗаписи.ИмяШаблона = ИмяШаблона;
				МенеджерЗаписи.Приоритет = Приоритет;
				МенеджерЗаписи.Наименование = Строка(ТипДокументаMEDoc);
				МенеджерЗаписи.ВидЭлектронногоДокумента = лРезультат;
				МенеджерЗаписи.Использование = Истина;
				МенеджерЗаписи.Комментарий = "ДОБАВЛЕНО АВТОМАТИЧЕСКИ. НЕОБХОДИМО НАСТРОИТЬ!!!";
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат лРезультат;
КонецФункции // ОпределитьВидЭлектронногоДокументаПоИмениШаблона()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьСоответствиеСРеквизитамиИзЭлектронногоДокумента(ЭлектронныйДокументСсылка) Экспорт
	
	Возврат ЭлектронныйДокументСсылка.ХранилищеРеквизитовЭлектронногоДокумента.Получить();
	
КонецФункции // ПолучитьСоответствиеСРеквизитамиИзЭлектронногоДокумента()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьКодТипаКвитанции(ТипКвитанции)
	Перем лРезультат;
	
	Если ТипКвитанции = Перечисления.скEDI_ТипыКвитанций.СообщениеОДоставке Тогда
		
		лРезультат = "1";
		
	ИначеЕсли ТипКвитанции = Перечисления.скEDI_ТипыКвитанций.Подтверждение Тогда
		
		лРезультат = "2";
		
	ИначеЕсли ТипКвитанции = Перечисления.скEDI_ТипыКвитанций.Отклонение Тогда
		
		лРезультат = "3";
		
	ИначеЕсли ТипКвитанции = Перечисления.скEDI_ТипыКвитанций.Отзыв Тогда
		
		лРезультат = "4";
		
	ИначеЕсли ТипКвитанции = Перечисления.скEDI_ТипыКвитанций.Доподписание Тогда
		
		лРезультат = "5";
		
	КонецЕсли;
	
	Возврат лРезультат;
	
КонецФункции // ПолучитьКодТипаКвитанции()

Функция ПолучитьКодТипаКвитанцииГовРК(ТипКвитанции)
	Перем лРезультат;
	
	Если ТипКвитанции = Перечисления.скEDI_ТипыКвитанций.Подтверждение Тогда
		
		лРезультат = "1";
		
	ИначеЕсли ТипКвитанции = Перечисления.скEDI_ТипыКвитанций.Отклонение Тогда
		
		лРезультат = "0";
		
	Иначе
		
		лРезультат = Неопределено;
		
	КонецЕсли;
	
	Возврат лРезультат;
	
КонецФункции // ПолучитьКодТипаКвитанции()

////////////////////////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ИНИЦИАЛИЗАЦИИ КОМАНД EDI ПРОВАЙДЕРУ

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СобратьXMLиPDFПредставленияЭлектронногоДокументаИзСоответствияСДанными(СоответствиеСДаннымиЭлектронногоДокумента, ЖурналОперации = "") Экспорт
	Перем лСтрокаBase64_XMLПредставлениеДокумента, лСтрокаBase64_PDFПредставлениеДокумента;
	
	лРезультат = Новый Структура("ТелоДокумента, ИзображениеДокумента");
	лРезультатСборкиXMLиPDFПредставленийЭлектронногоДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/makexmldoc", СоответствиеСДаннымиЭлектронногоДокумента);
	
	Если лРезультатСборкиXMLиPDFПредставленийЭлектронногоДокумента.Code <> 0 Тогда
		//ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "Ошибка сборки XML и PDF представления электронного документа: " + лРезультСвойствоатСборкиXMLиPDFПредставленийЭлектронногоДокумента.Message + " (код ошибки: " + лРезультатСборкиXMLиPDFПредставленийЭлектронногоДокумента.Code + ")");
		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка сборки XML и PDF представления электронного документа'; uk = 'Помилка формування XML и PDF відображення електронного документа'") + ": " + лРезультатСборкиXMLиPDFПредставленийЭлектронногоДокумента.Message);
		
		Если не лРезультатСборкиXMLиPDFПредставленийЭлектронногоДокумента.Свойство("Body", лСтрокаBase64_XMLПредставлениеДокумента) Тогда
			лСтрокаBase64_XMLПредставлениеДокумента = "";
		КонецЕсли;
		Если не лРезультатСборкиXMLиPDFПредставленийЭлектронногоДокумента.Свойство("Pdf", лСтрокаBase64_PDFПредставлениеДокумента) Тогда
			лСтрокаBase64_PDFПредставлениеДокумента = "";
		КонецЕсли;
	Иначе
		лСтрокаBase64_XMLПредставлениеДокумента = лРезультатСборкиXMLиPDFПредставленийЭлектронногоДокумента.Body;
		лСтрокаBase64_PDFПредставлениеДокумента = лРезультатСборкиXMLиPDFПредставленийЭлектронногоДокумента.Pdf;
	КонецЕсли;
	
	лРезультат.Вставить("ТелоДокумента", лСтрокаBase64_XMLПредставлениеДокумента);
	лРезультат.Вставить("ИзображениеДокумента", лСтрокаBase64_PDFПредставлениеДокумента);
	
	Возврат лРезультат;
КонецФункции // СобратьXMLиPDFПредставленияЭлектронногоДокументаИзСоответствияСДанными()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьСтруктуруДанныхПоКвитанцииИзСоответствияDoc(СоответствиеDoc)
	лРезультат = Новый Структура;
	
	лСоответствиеСДанными = СоответствиеDoc.Получить("Tables");
	Если лСоответствиеСДанными = Неопределено Тогда
		лРезультат.Вставить("СоответствиеСДанными", Новый Соответствие);
		Таблица0 = Неопределено;
		Таблица1 = Неопределено;
	Иначе
		лРезультат.Вставить("СоответствиеСДанными", лСоответствиеСДанными);
		Таблица0 = лСоответствиеСДанными.Получить("0");
		Таблица1 = лСоответствиеСДанными.Получить("1");
	КонецЕсли;
	Таблица0ПерваяСтрока = Неопределено;
	Если ТипЗнч(Таблица0) = Тип("Массив") Тогда
		Если Таблица0.Количество() >= 1 Тогда
			Таблица0ПерваяСтрока = Таблица0[0];
		КонецЕсли;
	КонецЕсли;
	лРезультат.Вставить("Таблица0ПерваяСтрока", Таблица0ПерваяСтрока);
	Если Таблица0ПерваяСтрока = Неопределено Тогда
		лРезультат.Вставить("ТипКвитанции",   "");
		лРезультат.Вставить("ТекстКвитанции", "");
		лРезультат.Вставить("ИмяФайла", "");
	Иначе
		лРезультат.Вставить("ТипКвитанции",   Таблица0ПерваяСтрока.Получить("Status"));
		лРезультат.Вставить("ТекстКвитанции", Таблица0ПерваяСтрока.Получить("Msg"));
		лРезультат.Вставить("ИмяФайла", Таблица0ПерваяСтрока.Получить("FileName"));
	КонецЕсли;
	
	Возврат лРезультат;
КонецФункции

Функция ПолучитьСтруктуруДанныхПоЭлектронномуДокументуИзСоответствияDoc(СоответствиеDoc)
	лРезультат = Новый Структура;
	
	лЕДРПОУОтправителя = СоответствиеDoc.Получить("Edrpou");
	Если лЕДРПОУОтправителя = Неопределено Тогда
		лРезультат.Вставить("ЕДРПОУОтправителя", "");
	Иначе
		лРезультат.Вставить("ЕДРПОУОтправителя", лЕДРПОУОтправителя);
	КонецЕсли;
	
	лФилиалОтправителя = СоответствиеDoc.Получить("Dept");
	Если лФилиалОтправителя = Неопределено Тогда
		лРезультат.Вставить("ФилиалОтправителя", "");
	Иначе
		лРезультат.Вставить("ФилиалОтправителя", лФилиалОтправителя);
	КонецЕсли;
	
	лНаименованиеОтправителя = СоответствиеDoc.Получить("Name");
	Если лНаименованиеОтправителя = Неопределено Тогда
		лРезультат.Вставить("НаименованиеОтправителя", "");
	Иначе
		лРезультат.Вставить("НаименованиеОтправителя", лНаименованиеОтправителя);
	КонецЕсли;
	
	лНаименованиеДокумента = СоответствиеDoc.Получить("DocName");
	Если лНаименованиеДокумента = Неопределено Тогда
		лРезультат.Вставить("НаименованиеДокумента", "");
	Иначе
		лРезультат.Вставить("НаименованиеДокумента", лНаименованиеДокумента);
	КонецЕсли;
	
	лЕДРПОУВладельцаШаблона = СоответствиеDoc.Получить("TmplOwnerCode");
	Если лЕДРПОУВладельцаШаблона = Неопределено Тогда
		лРезультат.Вставить("ЕДРПОУВладельцаШаблона", "");
	Иначе
		лРезультат.Вставить("ЕДРПОУВладельцаШаблона", лЕДРПОУВладельцаШаблона);
	КонецЕсли;
	
	лИмяШаблонаЭлектронногоДокумента = СоответствиеDoc.Получить("CharCode");
	Если лИмяШаблонаЭлектронногоДокумента = Неопределено Тогда
		лРезультат.Вставить("ИмяШаблона", "");
	Иначе
		лРезультат.Вставить("ИмяШаблона", лИмяШаблонаЭлектронногоДокумента);
	КонецЕсли;
	
	лВерсияШаблона = СоответствиеDoc.Получить("TmplVersion");
	Если лВерсияШаблона = Неопределено Тогда
		лРезультат.Вставить("ВерсияШаблона", "");
	Иначе
		лРезультат.Вставить("ВерсияШаблона", Строка(лВерсияШаблона));
	КонецЕсли;
	
	лТипЭлектронногоДокумента = СоответствиеDoc.Получить("SDocType");
	Если лТипЭлектронногоДокумента = Неопределено Тогда
		лРезультат.Вставить("SDocType", "");
	Иначе
		лРезультат.Вставить("SDocType", лТипЭлектронногоДокумента);
	КонецЕсли;
	лРезультат.Вставить("ТипДокументаMEDoc", ПолучитьТипДокументаMEDocПоКоду(лРезультат.SDocType));
	
	лDocId = СоответствиеDoc.Получить("DocId");
	Если лDocId = Неопределено Тогда
		лРезультат.Вставить("DocId", "");
	Иначе
		лРезультат.Вставить("DocId", лDocId);
	КонецЕсли;
	лOutId = СоответствиеDoc.Получить("OutId");
	Если лOutId = Неопределено Тогда
		лРезультат.Вставить("OutId", "");
	Иначе
		лРезультат.Вставить("OutId", лOutId);
	КонецЕсли;
	
	лNOTATION = СоответствиеDoc.Получить("Notation");
	Если лNOTATION = Неопределено Тогда
		лРезультат.Вставить("NOTATION", "");
	Иначе
		лРезультат.Вставить("NOTATION", лNOTATION);
	КонецЕсли;
	
	лAutoEdition = СоответствиеDoc.Получить("AutoEdition");
	Если лAutoEdition = Неопределено Тогда
		лРезультат.Вставить("AutoEdition", Ложь);
	Иначе
		лРезультат.Вставить("AutoEdition", лAutoEdition);
	КонецЕсли;
	
	лForbidEdition = СоответствиеDoc.Получить("ForbidEdition");
	Если лForbidEdition = Неопределено Тогда
		лРезультат.Вставить("ForbidEdition", Ложь);
	Иначе
		лРезультат.Вставить("ForbidEdition", лForbidEdition);
	КонецЕсли;
	
	лСоответствиеСДанными = СоответствиеDoc.Получить("Tables");
	Если лСоответствиеСДанными = Неопределено Тогда
		лРезультат.Вставить("СоответствиеСДанными", Новый Соответствие);
		Таблица0 = Неопределено;
	Иначе
		лРезультат.Вставить("СоответствиеСДанными", лСоответствиеСДанными);
		Таблица0 = лСоответствиеСДанными.Получить("0");
	КонецЕсли;
	Таблица0ПерваяСтрока = Неопределено;
	Если ТипЗнч(Таблица0) = Тип("Массив") Тогда
		Если Таблица0.Количество() >= 1 Тогда
			Таблица0ПерваяСтрока = Таблица0[0];
		КонецЕсли;
	КонецЕсли;
	лРезультат.Вставить("Таблица0ПерваяСтрока", Таблица0ПерваяСтрока);
	Если Таблица0ПерваяСтрока = Неопределено Тогда
		лРезультат.Вставить("ДатаДокумента", Дата(1, 1, 1, 0, 0, 0));
		лРезультат.Вставить("НаименованиеКонтрагента", "");
		лРезультат.Вставить("ОрганизацияЕДРПОУ", "");
		лРезультат.Вставить("ОрганизацияКодФилиалаУказан", Ложь);
		лРезультат.Вставить("ОрганизацияКодФилиала", "");
		лРезультат.Вставить("ОрганизацияНаименование", "");
		лРезультат.Вставить("КонтрагентЕДРПОУ", "");
		лРезультат.Вставить("КонтрагентКодФилиалаУказан", Ложь);
		лРезультат.Вставить("КонтрагентКодФилиала", "");
		лРезультат.Вставить("КонтрагентНаименование", "");
		лРезультат.Вставить("Номер", "<НЕТ НОМЕРА>");
		лРезультат.Вставить("НомерДокумента", "");
		лРезультат.Вставить("СуммаДокумента", 0);
		лРезультат.Вставить("СуммаНДС", 0);
		лРезультат.Вставить("СуммаБезНДС", 0);
		лРезультат.Вставить("COMMENT", "");
		лРезультат.Вставить("ОтветственныйНаименование", "");
	Иначе
		DOCDATE = Таблица0ПерваяСтрока.Получить("DOCDATE");
		Если DOCDATE = Неопределено Тогда
			лРезультат.Вставить("ДатаДокумента", ТекущаяДата());
		Иначе
			лРезультат.Вставить("ДатаДокумента", скEDI_СозданиеДокументовСервер.мПривестиКДате(DOCDATE, Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя))));
		КонецЕсли;
		лРезультат.Вставить("НаименованиеКонтрагента", Строка(Таблица0ПерваяСтрока.Получить("FIRM_NAME")));
		
		лРезультат.Вставить("ОрганизацияЕДРПОУ", Строка(Таблица0ПерваяСтрока.Получить("FIRM_EDRPOU")));
		ОрганизацияКодФилиала = Таблица0ПерваяСтрока.Получить("FIRM_DEPT");
		Если ОрганизацияКодФилиала = Неопределено Тогда
			лРезультат.Вставить("ОрганизацияКодФилиалаУказан", Ложь);
		Иначе
			лРезультат.Вставить("ОрганизацияКодФилиалаУказан", Истина);
		КонецЕсли;
		лРезультат.Вставить("ОрганизацияКодФилиала", Строка(ОрганизацияКодФилиала));
		лРезультат.Вставить("ОрганизацияНаименование", Строка(Таблица0ПерваяСтрока.Получить("FIRM_NAME")));
		
		лРезультат.Вставить("КонтрагентЕДРПОУ", Строка(Таблица0ПерваяСтрока.Получить("SIDE_EDRPOU_K")));
		КонтрагентКодФилиала = Таблица0ПерваяСтрока.Получить("SIDE_DEPT_K");
		Если КонтрагентКодФилиала = Неопределено Тогда
			лРезультат.Вставить("КонтрагентКодФилиалаУказан", Ложь);
		Иначе
			лРезультат.Вставить("КонтрагентКодФилиалаУказан", Истина);
		КонецЕсли;
		лРезультат.Вставить("КонтрагентКодФилиала", КонтрагентКодФилиала);
		лРезультат.Вставить("КонтрагентНаименование", Строка(Таблица0ПерваяСтрока.Получить("SIDE_CD_K")));
		
		лНомерЭлектронногоДокумента = Таблица0ПерваяСтрока.Получить("NUM");
		Если лНомерЭлектронногоДокумента = Неопределено Тогда
			лРезультат.Вставить("Номер", "<НЕТ НОМЕРА>");
			лРезультат.Вставить("НомерДокумента", "");
		Иначе
			лРезультат.Вставить("Номер", Строка(лНомерЭлектронногоДокумента));
			лРезультат.Вставить("НомерДокумента", Строка(лНомерЭлектронногоДокумента));
		КонецЕсли;
		
		лСуммаБезНДС = Таблица0ПерваяСтрока.Получить("SUMWITHOUTPDV");
		Если лСуммаБезНДС = Неопределено Тогда
			лРезультат.Вставить("СуммаБезНДС", 0);
		Иначе
			Попытка
				лРезультат.Вставить("СуммаБезНДС", Число(лСуммаБезНДС));
			Исключение
				лРезультат.Вставить("СуммаБезНДС", 0);
			КонецПопытки;
		КонецЕсли;
		
		лСуммаНДС = Таблица0ПерваяСтрока.Получить("SUMPDV");
		Если лСуммаНДС = Неопределено Тогда
			лРезультат.Вставить("СуммаНДС", 0);
		Иначе
			Попытка
				лРезультат.Вставить("СуммаНДС", Число(лСуммаНДС));
			Исключение
				лРезультат.Вставить("СуммаНДС", 0);
			КонецПопытки;
		КонецЕсли;
		
		лСуммаДокумента = Таблица0ПерваяСтрока.Получить("DOCSUM");
		Если лСуммаДокумента = Неопределено Тогда
			лРезультат.Вставить("СуммаДокумента", лРезультат.СуммаБезНДС + лРезультат.СуммаНДС);
		Иначе
			Попытка
				лРезультат.Вставить("СуммаДокумента", Число(лСуммаДокумента));
			Исключение
				лРезультат.Вставить("СуммаДокумента", лРезультат.СуммаБезНДС + лРезультат.СуммаНДС);
			КонецПопытки;
		КонецЕсли;
		
		лCOMMENT = Таблица0ПерваяСтрока.Получить("COMMENT");
		Если лCOMMENT = Неопределено Тогда
			лРезультат.Вставить("COMMENT", "");
		Иначе
			лРезультат.Вставить("COMMENT", лCOMMENT);
		КонецЕсли;
		лVO_NAME = Таблица0ПерваяСтрока.Получить("VO_NAME");
		Если лVO_NAME = Неопределено Тогда
			лРезультат.Вставить("ОтветственныйНаименование", "");
		Иначе
			лРезультат.Вставить("ОтветственныйНаименование", лVO_NAME);
		КонецЕсли;
	КонецЕсли;
	
	лRoute = СоответствиеDoc.Получить("Route");
	Если ТипЗнч(лRoute) = Тип("Массив") Тогда
		Маршрут = Новый Массив;
		Для Каждого ЭлементRoute Из лRoute Цикл
			ЭлементМаршрута = Новый Структура;
			
			лEdrpou = ЭлементRoute.Получить("Edrpou");
			Если лEdrpou <> Неопределено Тогда
				ЭлементМаршрута.Вставить("ЕДРПОУКонтрагента", лEdrpou);
			КонецЕсли;
			лDept = ЭлементRoute.Получить("Dept");
			Если лDept <> Неопределено Тогда
				ЭлементМаршрута.Вставить("ФилиалКонтрагента", лDept);
			КонецЕсли;
			лInn = ЭлементRoute.Получить("Inn");
			Если лInn <> Неопределено Тогда
				ЭлементМаршрута.Вставить("ИНН", лInn);
			КонецЕсли;
			лName = ЭлементRoute.Получить("Name");
			Если лName <> Неопределено Тогда
				ЭлементМаршрута.Вставить("НаименованиеКонтрагента", лName);
			КонецЕсли;
			Маршрут.Добавить(ЭлементМаршрута);
		КонецЦикла;
		лРезультат.Вставить("Маршрут", Маршрут);
	КонецЕсли;
	
	Возврат лРезультат;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция РазобратьXMLПредставлениеЭлектронногоДокументаВСоответствиеСДанными(ПредставлениеXMLДокумента, ЖурналОперации = "") Экспорт
	Перем лРезультат;
	лПараметрыЗапроса = Новый Структура;
	лПараметрыЗапроса.Вставить("Body", ПредставлениеXMLДокумента);
	
	лРезультатРазбораXMLПредставленияЭлектронногоДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/parsexmldoc", лПараметрыЗапроса, Истина);
	Если лРезультатРазбораXMLПредставленияЭлектронногоДокумента.Получить("Code") <> 0 Тогда
		//ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "Ошибка разбора XML представления электронного документа в соответствие с данными: " + лРезультатРазбораXMLПредставленияЭлектронногоДокумента.Получить("Message") + " (код ошибки: " + лРезультатРазбораXMLПредставленияЭлектронногоДокумента.Получить("Code") + ")");
		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка сборки XML и PDF представления электронного документа'; uk = 'Помилка формування XML и PDF відображення електронного документа'") + ": " + лРезультатРазбораXMLПредставленияЭлектронногоДокумента.Получить("Message"));
	Иначе
		Если ТипЗнч(лРезультатРазбораXMLПредставленияЭлектронногоДокумента) = Тип("Соответствие") Тогда
			лКонтейнерДанныхЭлектронногоДокумента = лРезультатРазбораXMLПредставленияЭлектронногоДокумента.Получить("Doc");
			Если лКонтейнерДанныхЭлектронногоДокумента <> Неопределено Тогда
				лРезультат = ПолучитьСтруктуруДанныхПоЭлектронномуДокументуИзСоответствияDoc(лКонтейнерДанныхЭлектронногоДокумента);
			Иначе
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "В ответа от сервера СДО нет поля, содержащего данные электронного документа.");
			КонецЕсли;
		Иначе
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "Ответа от сервера СДО имеет непредусмотренный тип данных.");
		КонецЕсли;
	КонецЕсли;
	
	Возврат лРезультат;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПроверитьСоответствиеСертификатовКлючейПаролейПодписейСПомощьюEDIПровайдера(ПараметрыПроверкиСоответствия, ЖурналОпреации = "") Экспорт
	
	лРезультатПроверкиСоответствия = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("checkcertkey", ПараметрыПроверкиСоответствия);
	Если лРезультатПроверкиСоответствия.Code <> 0 Тогда
		
		//ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОпреации, "Ошибка проверки соответсвия сертификата, секретного ключа и пароля: " + лРезультатПроверкиСоответствия.Message + " (код ошибки: " + лРезультатПроверкиСоответствия.Code + ")");
		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОпреации, НСтр("ru = 'Ошибка проверки соответсвия сертификата, секретного ключа и пароля'; uk = 'Помилка перевірки відповідності сертификата, секретного ключа та пароля'") + ": " + лРезультатПроверкиСоответствия.Message);
		
	КонецЕсли;
	
	Возврат лРезультатПроверкиСоответствия.Code = 0;
	
КонецФункции // ПроверитьСоответствиеСертификатовКлючейПаролейПодписейСПомощьюEDIПровайдера()

Процедура ПолучитьРежимСинхронизации(РежимСинхронизации, СтрокаПодключенияEDI = Неопределено, СерверEDI = Неопределено, ПортEDI = Неопределено)
	РежимСинхронизации = Ложь;
	лКонфигурацияРезультат = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("svc/getconfig", Null, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
	лКонфигурация = лКонфигурацияРезультат.Config;
	Если ТипЗнч(лКонфигурация) = Тип("Структура") Тогда
		тРежимСинхронизации = Неопределено;
		Если лКонфигурация.Свойство("useDocsSync", тРежимСинхронизации) Тогда
			Если тРежимСинхронизации = Истина Тогда
				РежимСинхронизации = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗаполнитьДанныеПоСинхронизации(Организация, ПараметрыПолученияПорцииСообщений, РежимСинхронизации, СтрокаПодключенияEDI = Неопределено, СерверEDI = Неопределено, ПортEDI = Неопределено)
	РежимСинхронизации = Ложь;
	ПолучитьРежимСинхронизации(РежимСинхронизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
	
	Если РежимСинхронизации Тогда
		LastDocVer = -1;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	скEDI_ДанныеПоРежимуСинхронизации.LastDocVer КАК LastDocVer
		               |ИЗ
		               |	РегистрСведений.скEDI_ДанныеПоРежимуСинхронизации КАК скEDI_ДанныеПоРежимуСинхронизации
		               |ГДЕ
		               |	скEDI_ДанныеПоРежимуСинхронизации.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", Организация);
		ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		Если ВыборкаРезультатаЗапроса.Следующий() Тогда
			LastDocVer = ВыборкаРезультатаЗапроса.LastDocVer;
		КонецЕсли;
		ПараметрыПолученияПорцииСообщений.Вставить("LastDocVer", LastDocVer);		
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьПорциюСообщенийСПомощьюEDIПровайдера(ПараметрыПолученияПорцииСообщений, ЖурналОперации = "", СтрокаПодключенияEDI = Неопределено, СерверEDI = Неопределено, ПортEDI = Неопределено)
	Перем лРезультат;
	
	лРезультатПолученияПорцииСообщений = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/rcv", ПараметрыПолученияПорцииСообщений, Истина, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
	Если лРезультатПолученияПорцииСообщений.Получить("Code") <> 0 Тогда
		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка получения входящих сообщений'; uk = 'Помилка отримання вхідних повідомлень'") + ": " + лРезультатПолученияПорцииСообщений.Получить("Message"));
	КонецЕсли;		
	//Иначе
		лМассивПолученныхСообщений = лРезультатПолученияПорцииСообщений.Получить("Docs");
		Если ТипЗнч(лМассивПолученныхСообщений) = Тип("Массив") Тогда
			лРезультат = Новый Структура;
			лРезультат.Вставить("ЕстьСледующаяПорцияСообщений", лРезультатПолученияПорцииСообщений.Получить("HasMore"));
			лРезультат.Вставить("LastDocVer", лРезультатПолученияПорцииСообщений.Получить("LastDocVer"));
			лРезультат.Вставить("МассивПолученныхСообщений",    лМассивПолученныхСообщений);
		Иначе
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'На СДО нет новых входящих сообщений для получателя с кодом по ЕГРПОУ'; uk = 'На СДО нема нових вхідних повідомлень для отримувача з кодом по ЄДРПОУ'") + " " + ПараметрыПолученияПорцииСообщений.Edrpou + ".");
		КонецЕсли;
	//КонецЕсли;
	
	Возврат лРезультат;
КонецФункции // ПолучитьПорциюСообщенийСПомощьюEDIПровайдера()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьПорциюСообщенийСПомощьюEDIПровайдераGov(ПараметрыПолученияПорцииСообщений, ЖурналОперации = "", СтрокаПодключенияEDI = Неопределено, СерверEDI = Неопределено, ПортEDI = Неопределено)
	Перем лРезультат;
	
	лРезультатПолученияПорцииСообщений = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("gov/rcv", ПараметрыПолученияПорцииСообщений, Истина, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
	Если лРезультатПолученияПорцииСообщений.Получить("Code") <> 0 Тогда
		//ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка получения входящих сообщений'; uk = 'Помилка отримання вхідних повідомлень'") + ": " + лРезультатПолученияПорцииСообщений.Message + " (код ошибки: " + лРезультатПолученияПорцииСообщений.Code + ")");
		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка получения входящих сообщений'; uk = 'Помилка отримання вхідних повідомлень'") + ": " + лРезультатПолученияПорцииСообщений.Получить("Message"));
	Иначе
		лРезультат = Новый Структура;
		
		ЕстьКвитанции = Ложь;
		ЕстьДокументы = Ложь;
		
		ЕстьСледующаяПорцияСообщений = лРезультатПолученияПорцииСообщений.Получить("HasMore");
		Если ТипЗнч(ЕстьСледующаяПорцияСообщений) = Тип("Булево") Тогда
			лРезультат.Вставить("ЕстьСледующаяПорцияСообщений", ЕстьСледующаяПорцияСообщений);
		Иначе
			лРезультат.Вставить("ЕстьСледующаяПорцияСообщений", Ложь);
		КонецЕсли;
		
		лМассивПолученныхКвитанций = лРезультатПолученияПорцииСообщений.Получить("Kvt");
		Если ТипЗнч(лМассивПолученныхКвитанций) = Тип("Массив") Тогда
			ЕстьКвитанции = Истина;
		КонецЕсли;
		лРезультат.Вставить("МассивПолученныхКвитанций", лМассивПолученныхКвитанций);
		
		лМассивПолученныхДокументов = лРезультатПолученияПорцииСообщений.Получить("Doc");
		Если ТипЗнч(лМассивПолученныхДокументов) = Тип("Массив") Тогда
			ЕстьДокументы = Истина;
		КонецЕсли;
		лРезультат.Вставить("МассивПолученныхДокументов", лМассивПолученныхДокументов);
		
		Если не (ЕстьДокументы или ЕстьКвитанции) Тогда
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'На сервере ГНС нет новых входящих сообщений для получателя с кодом по ЕГРПОУ'; uk = 'На сервері ДПС нема нових вхідних повідомлень для отримувача з кодом за ЄДРПОУ'") + " " + ПараметрыПолученияПорцииСообщений.Edrpou + ".");
		КонецЕсли;
	КонецЕсли;
	
	Возврат лРезультат;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьПорциюСообщенийСПомощьюEDIПровайдераGovRk(ПараметрыПолученияПорцииСообщений, ЖурналОперации = "", СтрокаПодключенияEDI = Неопределено, СерверEDI = Неопределено, ПортEDI = Неопределено)
	Перем лРезультат;
	
	лРезультатПолученияПорцииСообщений = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("govrk/rcv", ПараметрыПолученияПорцииСообщений, Истина, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
	Если лРезультатПолученияПорцииСообщений.Получить("Code") <> 0 Тогда
		//ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка получения входящих сообщений'; uk = 'Помилка отримання вхідних повідомлень'") + ": " + лРезультатПолученияПорцииСообщений.Message + " (код ошибки: " + лРезультатПолученияПорцииСообщений.Code + ")");
		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка получения входящих сообщений'; uk = 'Помилка отримання вхідних повідомлень'") + ": " + лРезультатПолученияПорцииСообщений.Получить("Message"));
	Иначе
		лМассивПолученныхСообщений = лРезультатПолученияПорцииСообщений.Получить("Docs");
		Если ТипЗнч(лМассивПолученныхСообщений) = Тип("Массив") Тогда
			лРезультат = Новый Структура;
			лРезультат.Вставить("ЕстьСледующаяПорцияСообщений", лРезультатПолученияПорцииСообщений.Получить("HasMore"));
			лРезультат.Вставить("МассивПолученныхСообщений",    лМассивПолученныхСообщений);
		Иначе
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'На сервере ГНС (для обмена РК) нет новых входящих сообщений для получателя с кодом по ЕГРПОУ'; uk = 'На сервері ДПС (для обміну РК) нема нових вхідних повідомлень для отримувача з кодом за ЄДРПОУ'") + " " + ПараметрыПолученияПорцииСообщений.Edrpou + ".");
		КонецЕсли;
	КонецЕсли;
	
	Возврат лРезультат;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция РазобратьПодписанноеXMLПредставление(ПодписанноеXMLПредставление, ЖурналОперации = "")
	Перем лРезультат;
	
	лПараметрыОтправкиЗапроса = Новый Структура;
	лПараметрыОтправкиЗапроса.Вставить("Body", ПодписанноеXMLПредставление);
	
	лРезультатРазбораПодписанногоXMLПредставления = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("parsemessage", лПараметрыОтправкиЗапроса);
	Если лРезультатРазбораПодписанногоXMLПредставления.Code <> 0  Тогда
		//ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "Ошибка разбора подписанного XML представления: " + лРезультатРазбораПодписанногоXMLПредставления.Message + " (код ошибки: " + лРезультатРазбораПодписанногоXMLПредставления.Code + ")");
		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка разбора подписанного XML представления'; uk = 'Помилка розбору підписаного XML відображення'") + ": " + лРезультатРазбораПодписанногоXMLПредставления.Message);
	Иначе
		лПредставлениеXMLБезПодписей = Неопределено;
		Если лРезультатРазбораПодписанногоXMLПредставления.Свойство("Text", лПредставлениеXMLБезПодписей) Тогда
			лРезультат = Новый Структура;
			лРезультат.Вставить("ПредставлениеXML", лПредставлениеXMLБезПодписей);
			
			лМассивИнформацииОПодписях = Неопределено;
			Если лРезультатРазбораПодписанногоXMLПредставления.Свойство("Signers", лМассивИнформацииОПодписях) Тогда
				лРезультат.Вставить("МассивИнформацииОПодписях", лМассивИнформацииОПодписях);
			КонецЕсли;
		Иначе
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'В ответе сервера СДО на запрос о снятии подписей не обнаружено поле, содержащее представление XML.'; uk = 'В відповіді сервера СДО на запит про зняття підписів не знайдено поле, що містить відображення XML.'"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат лРезультат;
КонецФункции // РазобратьПодписанноеXMLПредставление()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция РазобратьПодписанноеXMLПредставлениеКвитанцииВСтруктуруСДанными(ПодписанноеТелоКвитанции, ЖурналОперации = "")
	Перем лРезультат;
	лРезультатРазбораПодписанногоXMLПредставления = РазобратьПодписанноеXMLПредставление(ПодписанноеТелоКвитанции, ЖурналОперации);
	Если лРезультатРазбораПодписанногоXMLПредставления <> Неопределено Тогда
		
		лПараметрыЗапроса = Новый Структура;
		лПараметрыЗапроса.Вставить("Body", лРезультатРазбораПодписанногоXMLПредставления.ПредставлениеXML);
		
		лРезультатРазбораXMLПредставленияКвитанции = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/parsexmldoc", лПараметрыЗапроса, Истина);
		Если лРезультатРазбораXMLПредставленияКвитанции.Получить("Code") <> 0 Тогда
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка разбора XML представления квитанции в соответствие с данными'; uk = 'Помилка разбору XML відображення квитанції в відповідність з даними'") + ": " + лРезультатРазбораXMLПредставленияКвитанции.Получить("Message"));
		Иначе
			Если ТипЗнч(лРезультатРазбораXMLПредставленияКвитанции) = Тип("Соответствие") Тогда
				лКонтейнерДанныхКвитанции = лРезультатРазбораXMLПредставленияКвитанции.Получить("Doc");
				Если лКонтейнерДанныхКвитанции <> Неопределено Тогда
					лРезультат = ПолучитьСтруктуруДанныхПоКвитанцииИзСоответствияDoc(лКонтейнерДанныхКвитанции);
				Иначе
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'В ответа от сервера СДО нет поля, содержащего данные квитанции.'; uk = 'В відповіді від сервера СДО нема поля, що містить дані квитанції.'"));
				КонецЕсли;
			Иначе
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ответ от сервера СДО имеет непредусмотренный тип данных.'; uk = 'Відповідь від сервера СДО має непередбачений тип даних.'"));
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не удалось получить XML представление квитанции.'; uk = 'Не вдалось отримати XML відображення квитанції.'"));
	КонецЕсли;
	
	Возврат лРезультат;
КонецФункции // РазобратьПодписанноеXMLПредставлениеКвитанцииВСтруктуруСДанными()

Функция УдалитьВходящееСообщениеССервераДФСРкСПомощьюEDIПровайдера(ПараметрыОтправкиКвитанции, ЖурналОперации = "", СтрокаПодключенияEDI = Неопределено, СерверEDI = Неопределено, ПортEDI = Неопределено)
	
	лНетОшибокВПроцессеОтправкиКвитанции = Истина;
	
	лРезультатОтправкиКвитанции = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("govrk/del", ПараметрыОтправкиКвитанции, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
	Если лРезультатОтправкиКвитанции.Code <> 0 Тогда
		лНетОшибокВПроцессеОтправкиКвитанции = Ложь;
		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка отправки квитанции'; uk = 'Помилка відправки квитанції'") + ": " + лРезультатОтправкиКвитанции.Message);
	КонецЕсли;
	
	Возврат лНетОшибокВПроцессеОтправкиКвитанции;
	
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция УдалитьВходящееСообщениеССервераДФССПомощьюEDIПровайдера(ПараметрыОтправкиСообщения, ЖурналОперации = "", СтрокаПодключенияEDI = Неопределено, СерверEDI = Неопределено, ПортEDI = Неопределено)
	
	лНетОшибокВПроцессеОтправкиСообщения = Истина;
	
	лРезультатОтправкиСообщения = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("gov/del", ПараметрыОтправкиСообщения, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
	Если лРезультатОтправкиСообщения.Code <> 0 Тогда
		лНетОшибокВПроцессеОтправкиСообщения = Ложь;
		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка удаления входящего сообщения с Сервера ГНС'; uk = 'Помилка видалення вхідного повідомлення з Сервера ДПС'") + ": " + лРезультатОтправкиСообщения.Message);
	КонецЕсли;
	
	Возврат лНетОшибокВПроцессеОтправкиСообщения;
	
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ОтправитьКвитанциюОРезультатеПолученияКвитанцииСПомощьюEDIПровайдера(КвитанцияПолученаУспешно, ПараметрыОтправкиКвитанции, ЖурналОперации = "", СтрокаПодключенияEDI = Неопределено, СерверEDI = Неопределено, ПортEDI = Неопределено)
	
	лНетОшибокВПроцессеОтправкиКвитанции = Истина;
	
	лРезультатОтправкиКвитанции = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/" + ?(КвитанцияПолученаУспешно, "rcvkvtok", "rcvkvterr"), ПараметрыОтправкиКвитанции, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
	Если лРезультатОтправкиКвитанции.Code <> 0 Тогда
		лНетОшибокВПроцессеОтправкиКвитанции = Ложь;
		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка отправки квитанции'; uk = 'Помилка відправки квитанції'") + ": " + лРезультатОтправкиКвитанции.Message);
	КонецЕсли;
	
	Возврат лНетОшибокВПроцессеОтправкиКвитанции;
	
КонецФункции // ОтправитьКвитанциюОРезультатеПолученияКвитанцииСПомощьюEDIПровайдера()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ОтправитьОтветПоДокументуСПомощьюEDIПровайдера(ПараметрыОтправкиОтвета, ЖурналОперации = "", СтрокаПодключенияEDI = Неопределено, СерверEDI = Неопределено, ПортEDI = Неопределено)
	Перем лРезультат;
	
	лРезультатОтправкиОтвета = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/sendans", ПараметрыОтправкиОтвета, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
	Если лРезультатОтправкиОтвета.Code <> 0 Тогда
		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка отправки ответа по документу'; uk = 'Помилка відправки відповіді по документу'") + ": " + лРезультатОтправкиОтвета.Message);
	ИначеЕсли ЗначениеЗаполнено(лРезультатОтправкиОтвета.AnsFileName) Тогда
		
		лРезультат = Новый Структура;
		лРезультат.Вставить("ИмяФайла", лРезультатОтправкиОтвета.AnsFileName);
		тDocVer = Неопределено;
		Если лРезультатОтправкиОтвета.Свойство("DocVer", тDocVer) Тогда
			лРезультат.Вставить("DocVer", тDocVer);
		Иначе
			лРезультат.Вставить("DocVer", 0);
		КонецЕсли;
		
	Иначе
		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'В результате отправки не получено имя файла отправленного документа на сервере СДО.'; uk = 'В результаті відправки не отримано ім''я файла відправленого документа на сервері СДО.'"));
	КонецЕсли;
	
	Возврат лРезультат;
	
КонецФункции // ОтправитьОтветПоДокументуСПомощьюEDIПровайдера()

Функция ОтправитьОтветПоДокументуСПомощьюEDIПровайдераГовРК(ПараметрыОтправкиОтвета, ЖурналОперации = "", СтрокаПодключенияEDI = Неопределено, СерверEDI = Неопределено, ПортEDI = Неопределено)
	Перем лРезультат;
	
	лРезультатОтправкиОтвета = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("govrk/sendans", ПараметрыОтправкиОтвета, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
	Если лРезультатОтправкиОтвета.Code <> 0 Тогда
		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка отправки ответа по документу'; uk = 'Помилка відправки відповіді по документу'") + ": " + лРезультатОтправкиОтвета.Message);
	Иначе
		лРезультат = Истина;		
	КонецЕсли;
	
	Возврат лРезультат;
КонецФункции //

////////////////////////////////////////////////////////////////////////////////////////////////////
// НЕСОРТИРОВАННЫЕ МЕТОДЫ

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьОрганизациюEDIПоДокументу1С(Документ1С) Экспорт
	Перем лРезультат, лОрганизация1С;
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", Документ1С.Метаданные()) Тогда
		
		лОрганизация1С = Документ1С.Организация;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(лОрганизация1С) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	скEDI_Организации.Ссылка КАК ОрганизацияEDI
		|ИЗ
		|	Справочник.скEDI_Организации КАК скEDI_Организации
		|ГДЕ
		|	скEDI_Организации.Организация1С = &Организация1С
		|	И НЕ скEDI_Организации.ПометкаУдаления";
		Запрос.УстановитьПараметр("Организация1С", лОрганизация1С);
		
		лВыборкаРезультатовЗапроса = Запрос.Выполнить().Выбрать();
		Если лВыборкаРезультатовЗапроса.Следующий() Тогда
			
			лРезультат = лВыборкаРезультатовЗапроса.ОрганизацияEDI;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат лРезультат;
	
КонецФункции // ПолучитьОрганизациюEDIПоДокументу1С()


Процедура УстановитьСнятьОтметкуОбработано(ЭлектронныйДокумент, Обработано, УстанавливатьОбработаноПоВсемДокументам1С = Истина) экспорт
	Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	Массив = Новый Массив;
	Документ1С = ЭлектронныйДокумент.Документ1С;
	Массив.Добавить(ЭлектронныйДокумент);
	Если Обработано и УстанавливатьОбработаноПоВсемДокументам1С и ЗначениеЗаполнено(Документ1С) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	скEDI_ЭлектронныйДокумент.Ссылка КАК ЭлектронныйДокумент,
		               |	скEDI_ЭлектронныйДокумент.Документ1С КАК Документ1С
		               |ИЗ
		               |	Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
		               |ГДЕ
		               |	скEDI_ЭлектронныйДокумент.Документ1С = &Документ1С
		               |	И скEDI_ЭлектронныйДокумент.Ссылка <> &ЭлектронныйДокумент";
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		Запрос.УстановитьПараметр("Документ1С", Документ1С);
		ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
			Массив.Добавить(ВыборкаРезультатаЗапроса.ЭлектронныйДокумент);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаМассива Из Массив Цикл
		МенеджерЗаписи = РегистрыСведений.скEDI_ОбработаныеДокументы.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ЭлектронныйДокумент = СтрокаМассива;
		Если Обработано Тогда
			МенеджерЗаписи.ДатаОбработки = ТекущаяДата();
			МенеджерЗаписи.Записать(Истина);
		Иначе
			МенеджерЗаписи.Удалить();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Функция ИнформационнаяБазаФайловая определяет режим эксплуатации
// информационной базы файловый (Истина) или Серверный (Ложь).
//  При проверке используется СтрокаСоединенияИнформационнойБазы, которую
// можно указать явно.
//
// Параметры:
//  СтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
//                 нужно проверить строку соединения не текущей информационной базы.
//
// Возвращаемое значение:
//  Булево.
//
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
			
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	Возврат Найти(Врег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	
КонецФункции 

Функция ЭтоПлатформа83БезРежимаСовместимости() Экспорт
	Возврат скEDI_ОбщегоНазначенияПовтИсп.ЭтоПлатформа83БезРежимаСовместимости();	
КонецФункции	

Функция ЭтоПлатформа82() Экспорт
	Возврат скEDI_ОбщегоНазначенияПовтИсп.ЭтоПлатформа82();	
КонецФункции	

Функция ЭтоРежимБезМодальности() Экспорт
	Возврат скEDI_ОбщегоНазначенияПовтИсп.ЭтоРежимБезМодальности();	
КонецФункции

Функция ПолучитьМинимальнуюВерсиюEDIПровайдера() Экспорт
	Возврат "1.0.54.0";	
КонецФункции

Процедура СоздатьДокументы1С(лМассивДанныхДокументов, КлючОбработанойЗаписи = Неопределено) Экспорт
	КлючОбработанойЗаписи = Неопределено;
	ОбработкаВыполнена = Ложь;
	//Структура("Документ1С, ЭлектронныйДокумент");
	Для Каждого ДанныеДокумента Из лМассивДанныхДокументов Цикл
		ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
		Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			Документ1С = ЭлектронныйДокумент.Документ1С;
			Если Не ЗначениеЗаполнено(Документ1С) Тогда
				ЕДРПОУВладельцаШаблона = ЭлектронныйДокумент.ЕДРПОУВладельцаШаблона;
				ИмяШаблона = ЭлектронныйДокумент.ИмяШаблона;
				ВерсияШаблона = ЭлектронныйДокумент.ВерсияШаблона;
				Если ПустаяСтрока(ИмяШаблона) Тогда
					Сообщить(НСтр("ru = 'В электронном документе не указано ""ИмяШаблона""'; uk = 'В електронному документі не вказано ""Ім''яШаблона""'"));
				Иначе
					лСоответствиеСРеквизитамиЭлектронногоДокумента = ПолучитьСоответствиеСРеквизитамиИзЭлектронногоДокумента(ЭлектронныйДокумент);
					Если лСоответствиеСРеквизитамиЭлектронногоДокумента = Неопределено Тогда
						Сообщить(НСтр("ru = 'В электронном документе отсутствуют данные для формирования учетного документа.'; uk = 'В електронному документі відсутні дані для формування облікового документа.'"));
					Иначе
						лЖурналЗагрузкиЭлектронногоДокументаВДокумент1С = "";
						Если Не скEDI_СозданиеДокументовСервер.ЗагрузитьДокумент1С(Документ1С, ЭлектронныйДокумент.Организация, ЭлектронныйДокумент.ВидЭлектронногоДокумента, ЭлектронныйДокумент.ВхИсх, ЭлектронныйДокумент,
							ЕДРПОУВладельцаШаблона, ИмяШаблона, ВерсияШаблона, 
							лСоответствиеСРеквизитамиЭлектронногоДокумента, лЖурналЗагрузкиЭлектронногоДокументаВДокумент1С) Тогда
							
							Сообщить(лЖурналЗагрузкиЭлектронногоДокументаВДокумент1С);
						Иначе
							ЭлектронныйДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
							ЭлектронныйДокументОбъект.Документ1С = Документ1С;
							ЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
							ЗаписатьЭлектронныйДокументСПредварительнымПоискомСвязаных(ЭлектронныйДокументОбъект, ЭлектронныйДокументОбъект.ВидЭлектронногоДокумента, ЭлектронныйДокументОбъект.ВидЭлектронногоДокумента.Владелец);
							//ЭлектронныйДокументОбъект.Записать();
							Если Не ОбработкаВыполнена Тогда
								Если лМассивДанныхДокументов.Количество() > 0 Тогда
									ЗначениеКлюча = Новый Структура;
									ЗначениеКлюча.Вставить("Организация", ЭлектронныйДокумент.Организация);
									ЗначениеКлюча.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
									ЗначениеКлюча.Вставить("Документ1С", Документ1С);
									ЗначениеКлюча.Вставить("ВидЭлектронногоДокумента", ЭлектронныйДокумент.ВидЭлектронногоДокумента);
									КлючОбработанойЗаписи = РегистрыСведений.скEDI_ЭлектронныеДокументы.СоздатьКлючЗаписи(ЗначениеКлюча);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

Процедура ПровестиДокументы1С(лМассивДанныхДокументов) Экспорт
	//Структура("Документ1С, ЭлектронныйДокумент");
	Для Каждого ДанныеДокумента Из лМассивДанныхДокументов Цикл
		Документ1С = ДанныеДокумента.Документ1С;
		Если ЗначениеЗаполнено(Документ1С) Тогда
			Сообщить(НСтр("ru = 'Проводится документ'; uk = 'Проводиться документ'") + ": " + Строка(Документ1С));
			Документ1СОбъект = Документ1С.ПолучитьОбъект();
			Документ1СОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

Процедура УстановитьСнятьОтметкуОбработаноПоМассивуДокументов(Массив, Обработано) экспорт
	Для Каждого ЭлементМассива Из Массив Цикл
		УстановитьСнятьОтметкуОбработано(ЭлементМассива.ЭлектронныйДокумент, Обработано, Ложь);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьTSPСтатусПоКоду(Код)
	Если Код = 0 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.скEDI_TSPСтатус.Есть");
	ИначеЕсли Код = 1 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.скEDI_TSPСтатус.Отсутствует");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.скEDI_TSPСтатус.ПустаяСсылка");
	КонецЕсли;
КонецФункции

Функция ПолучитьOCSPСтатусПоКоду(Код)
	Если Код = 0 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.скEDI_OCSPСтатус.Действующий");
	ИначеЕсли Код = 1 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.скEDI_OCSPСтатус.Отозван");
	ИначеЕсли Код = 2 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.скEDI_OCSPСтатус.НетИнформации");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.скEDI_OCSPСтатус.ПустаяСсылка");
	КонецЕсли;
КонецФункции

Функция ПолучитьМассивПодписейИзМассиваСтруктур(МассивСтруктур)
	лРезультат = Новый Массив;
	Если ТипЗнч(МассивСтруктур) = Тип("Массив") Тогда
		Для Каждого лИнформацияОПодписи Из МассивСтруктур Цикл
			лСтруктураДанныхПодписи = Новый Структура;
			лСтруктураДанныхПодписи.Вставить("ТелоСертификата",     лИнформацияОПодписи.Cert);
			лСтруктураДанныхПодписи.Вставить("ОписаниеСертификата", лИнформацияОПодписи.CertInfo);
			лСтруктураДанныхПодписи.Вставить("TSPСтатус", ПолучитьTSPСтатусПоКоду(лИнформацияОПодписи.TSPStatus));
			Если лИнформацияОПодписи.TSPStatus = 0 Тогда
				лСтруктураДанныхПодписи.Вставить("ДатаПодписания", лИнформацияОПодписи.TSPTime);
			//Иначе
			//	лСтруктураДанныхПодписи.Вставить("ДатаПодписания", Дата(1, 1, 1, 0, 0, 0));
			КонецЕсли;
			лСтруктураДанныхПодписи.Вставить("OCSPСтатус", ПолучитьOCSPСтатусПоКоду(лИнформацияОПодписи.OCSPStatus));
			Если лИнформацияОПодписи.OCSPStatus = 1 Тогда
				лСтруктураДанныхПодписи.Вставить("ДатаОтзываСертификата", лИнформацияОПодписи.OCSPRevokeTime);
			//Иначе
			//	лСтруктураДанныхПодписи.Вставить("ДатаОтзываСертификата", Дата(1, 1, 1, 0, 0, 0));
			КонецЕсли;
			
			лРезультат.Добавить(лСтруктураДанныхПодписи);
		КонецЦикла;
	КонецЕсли;
	Возврат лРезультат;
КонецФункции

Функция ПолучитьМассивПодписейИзМассиваСоответствий(МассивСоответствий) Экспорт
	лРезультат = Новый Массив;
	Если ТипЗнч(МассивСоответствий) = Тип("Массив") Тогда
		Для Каждого лИнформацияОПодписи Из МассивСоответствий Цикл
			лСтруктураДанныхПодписи = Новый Структура;
			лСтруктураДанныхПодписи.Вставить("ТелоСертификата",     лИнформацияОПодписи.Получить("Cert"));
			ОписаниеСертификата = Новый Структура;
			ОписаниеСертификатаСоответствие = лИнформацияОПодписи.Получить("CertInfo");
			Если ТипЗнч(ОписаниеСертификатаСоответствие) = Тип("Соответствие") Тогда
				Для Каждого СтрокаОписаниаСертификата из ОписаниеСертификатаСоответствие Цикл
					ОписаниеСертификата.Вставить(СтрокаОписаниаСертификата.Ключ, СтрокаОписаниаСертификата.Значение);
				КонецЦикла;
			КонецЕсли;
			лСтруктураДанныхПодписи.Вставить("ОписаниеСертификата", ОписаниеСертификата);
			лСтруктураДанныхПодписи.Вставить("TSPСтатус", ПолучитьTSPСтатусПоКоду(лИнформацияОПодписи.Получить("TSPStatus")));
			Если лИнформацияОПодписи.Получить("TSPStatus") = 0 Тогда
				лСтруктураДанныхПодписи.Вставить("ДатаПодписания", лИнформацияОПодписи.Получить("TSPTime"));
			//Иначе
			//	лСтруктураДанныхПодписи.Вставить("ДатаПодписания", Дата(1, 1, 1, 0, 0, 0));
			КонецЕсли;
			лСтруктураДанныхПодписи.Вставить("OCSPСтатус", ПолучитьOCSPСтатусПоКоду(лИнформацияОПодписи.Получить("OCSPStatus")));
			Если лИнформацияОПодписи.Получить("OCSPStatus") = 1 Тогда
				лСтруктураДанныхПодписи.Вставить("ДатаОтзываСертификата", лИнформацияОПодписи.Получить("OCSPRevokeTime"));
			//Иначе
			//	лСтруктураДанныхПодписи.Вставить("ДатаОтзываСертификата", Дата(1, 1, 1, 0, 0, 0));
			КонецЕсли;
			
			лРезультат.Добавить(лСтруктураДанныхПодписи);
		КонецЦикла;
	КонецЕсли;
	Возврат лРезультат;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьМассивПодписейКонтрагентаИзПодписанногоЭлектронногоДокумента(ТелоПодписанногоЭлектронногоДокумента, ЖурналОперации = "")
	Перем лМассивИнформацииОПодписях;
	лРезультатРазбораПодписанногоXMLПредставленияДокумента = РазобратьПодписанноеXMLПредставление(ТелоПодписанногоЭлектронногоДокумента, ЖурналОперации);
	Если лРезультатРазбораПодписанногоXMLПредставленияДокумента <> Неопределено Тогда
		Если лРезультатРазбораПодписанногоXMLПредставленияДокумента.Свойство("МассивИнформацииОПодписях", лМассивИнформацииОПодписях) Тогда
			лРезультат = ПолучитьМассивПодписейИзМассиваСтруктур(лМассивИнформацииОПодписях);
		Иначе
			лРезультат = Новый Массив;
		КонецЕсли;
	Иначе
		лРезультат = Новый Массив;
	КонецЕсли;
	
	Возврат лРезультат;
КонецФункции // ПолучитьМассивПодписейКонтрагентаИзПодписанногоЭлектронногоДокумента()

Функция ОписаниеПодписи(лПодписьКонтрагента, ОтражатьTSPСтатус, ОтражатьOCSPСтатус)
	РольПодписанта = ПолучитьРольПодписиПоКоду(лПодписьКонтрагента.ОписаниеСертификата.Type);
	Если ЗначениеЗаполнено(лПодписьКонтрагента.ОписаниеСертификата.DRFO) Тогда
		ДРФОПодписанта = лПодписьКонтрагента.ОписаниеСертификата.DRFO;
	Иначе
		Если РольПодписанта = Перечисления.скEDI_РолиПодписей.Неопределено Тогда
			РольПодписанта = Перечисления.скEDI_РолиПодписей.ПечатьОрганизации;
		КонецЕсли;
		ДРФОПодписанта = лПодписьКонтрагента.ОписаниеСертификата.EDRPOU;
	КонецЕсли;
	Если РольПодписанта = Перечисления.скEDI_РолиПодписей.ПечатьОрганизации Тогда
		ИмяПодписанта = лПодписьКонтрагента.ОписаниеСертификата.Name;
	Иначе
		Если лПодписьКонтрагента.ОписаниеСертификата.Surname = "" Тогда
			ИмяПодписанта = лПодписьКонтрагента.ОписаниеСертификата.GivenName;
		ИначеЕсли лПодписьКонтрагента.ОписаниеСертификата.GivenName = "" Тогда
			ИмяПодписанта = лПодписьКонтрагента.ОписаниеСертификата.Surname;
		Иначе
			ИмяПодписанта = лПодписьКонтрагента.ОписаниеСертификата.Surname + " " + лПодписьКонтрагента.ОписаниеСертификата.GivenName;
		КонецЕсли;
	КонецЕсли;
	
	Описание = Строка(РольПодписанта) + " " + ДРФОПодписанта + " " + ИмяПодписанта;
	Если ОтражатьTSPСтатус Тогда
		Если лПодписьКонтрагента.TSPСтатус = ПредопределенноеЗначение("Перечисление.скEDI_TSPСтатус.Есть") Тогда
			Описание = Описание + "
			|"
			+ НСтр("ru = 'Отметка времени: '; uk = 'Позначка часу: '") + лПодписьКонтрагента.ДатаПодписания;
		//Иначе
		//	Описание = Описание + "
		//	|На час підписання перевірка сертифікату за TSP не виконувалась";
		КонецЕсли;
	КонецЕсли;
	Если ОтражатьOCSPСтатус Тогда
		Если лПодписьКонтрагента.OCSPСтатус = ПредопределенноеЗначение("Перечисление.скEDI_OCSPСтатус.Действующий") Тогда
			Описание = Описание + "
			|"
			+ НСтр("ru = 'На подписании проверка сертификата сервера OCSP проведена удачно'; uk = 'На час підписання перевірка сертифіката сервером OCSP проведена вдало'");
		ИначеЕсли лПодписьКонтрагента.OCSPСтатус = ПредопределенноеЗначение("Перечисление.скEDI_OCSPСтатус.Отозван") Тогда
			Описание = Описание + "
			|"
			+ НСтр("ru = 'На подписании сертификат отозван. Дата отзыва сертификата: '; uk = 'На час підписання сертифікат відкликано. Дата відкликання сертифікату: '") + лПодписьКонтрагента.ДатаОтзываСертификата;
		ИначеЕсли лПодписьКонтрагента.OCSPСтатус = ПредопределенноеЗначение("Перечисление.скEDI_OCSPСтатус.НетИнформации") Тогда
			Описание = Описание + "
			|"
			+ НСтр("ru = 'На подписании проверка сертификата по OCSP не выполнялась'; uk = ' На час підписання перевірка сертифікату за OCSP не виконувалась'");
		КонецЕсли;
	КонецЕсли;
	
	Если ?(лПодписьКонтрагента.ОписаниеСертификата.isKeyInDevice = 1, Истина, Ложь) Тогда
		Описание = Описание + "
		|"
		+ НСтр("ru = 'Тип носителя личного ключа:'; uk = 'Тип носія особистого ключа:'")
		+ " "
		+ НСтр("ru = 'Защищен'; uk = 'Захищений'");
	Иначе
		Описание = Описание + "
		|"
		+ НСтр("ru = 'Тип носителя личного ключа:'; uk = 'Тип носія особистого ключа:'")
		+ " "
		+ НСтр("ru = 'Незащищен'; uk = 'Незахищений'");
	КонецЕсли;
	
	Возврат Описание;
КонецФункции

Процедура ДополнитьОписаниеДаннымиПоПодписямКонтрагента(МассивПодписейКонтрагента, Описание, ИсключитьИзОписанияПодписиСЕДРПОУ, ОтражатьTSPСтатус, ОтражатьOCSPСтатус)
	Для Каждого лПодписьКонтрагента Из МассивПодписейКонтрагента Цикл
		Если ИсключитьИзОписанияПодписиСЕДРПОУ <> лПодписьКонтрагента.ОписаниеСертификата.EDRPOU Тогда
			//РольПодписанта = ПолучитьРольПодписиПоКоду(лПодписьКонтрагента.ОписаниеСертификата.Type);
			//Если ЗначениеЗаполнено(лПодписьКонтрагента.ОписаниеСертификата.DRFO) Тогда
			//	ДРФОПодписанта = лПодписьКонтрагента.ОписаниеСертификата.DRFO;
			//Иначе
			//	Если РольПодписанта = Перечисления.скEDI_РолиПодписей.Неопределено Тогда
			//		РольПодписанта = Перечисления.скEDI_РолиПодписей.ПечатьОрганизации;
			//	КонецЕсли;
			//	ДРФОПодписанта = лПодписьКонтрагента.ОписаниеСертификата.EDRPOU;
			//КонецЕсли;
			//Если РольПодписанта = Перечисления.скEDI_РолиПодписей.ПечатьОрганизации Тогда
			//	ИмяПодписанта = лПодписьКонтрагента.ОписаниеСертификата.Name;
			//Иначе
			//	Если лПодписьКонтрагента.ОписаниеСертификата.Surname = "" Тогда
			//		ИмяПодписанта = лПодписьКонтрагента.ОписаниеСертификата.GivenName;
			//	ИначеЕсли лПодписьКонтрагента.ОписаниеСертификата.GivenName = "" Тогда
			//		ИмяПодписанта = лПодписьКонтрагента.ОписаниеСертификата.Surname;
			//	Иначе
			//		ИмяПодписанта = лПодписьКонтрагента.ОписаниеСертификата.Surname + " " + лПодписьКонтрагента.ОписаниеСертификата.GivenName;
			//	КонецЕсли;
			//КонецЕсли;
			//
			//Описание = Описание + "
			//|" + РольПодписанта + " " + ДРФОПодписанта + " " + ИмяПодписанта;
			//Если ОтражатьTSPСтатус Тогда
			//	Если лПодписьКонтрагента.TSPСтатус = ПредопределенноеЗначение("Перечисление.скEDI_TSPСтатус.Есть") Тогда
			//		Описание = Описание + "
			//		|"
			//		+ НСтр("ru = 'Отметка времени: '; uk = 'Позначка часу: '") + лПодписьКонтрагента.ДатаПодписания;
			//	//Иначе
			//	//	Описание = Описание + "
			//	//	|На час підписання перевірка сертифікату за TSP не виконувалась";
			//	КонецЕсли;
			//КонецЕсли;
			//Если ОтражатьOCSPСтатус Тогда
			//	Если лПодписьКонтрагента.OCSPСтатус = ПредопределенноеЗначение("Перечисление.скEDI_OCSPСтатус.Действующий") Тогда
			//		Описание = Описание + "
			//		|"
			//		+ НСтр("ru = 'На подписании проверка сертификата сервера OCSP проведена удачно'; uk = 'На час підписання перевірка сертифіката сервером OCSP проведена вдало'");
			//	ИначеЕсли лПодписьКонтрагента.OCSPСтатус = ПредопределенноеЗначение("Перечисление.скEDI_OCSPСтатус.Отозван") Тогда
			//		Описание = Описание + "
			//		|"
			//		+ НСтр("ru = 'На подписании сертификат отозван. Дата отзыва сертификата: '; uk = 'На час підписання сертифікат відкликано. Дата відкликання сертифікату: '") + лПодписьКонтрагента.ДатаОтзываСертификата;
			//	ИначеЕсли лПодписьКонтрагента.OCSPСтатус = ПредопределенноеЗначение("Перечисление.скEDI_OCSPСтатус.НетИнформации") Тогда
			//		Описание = Описание + "
			//		|"
			//		+ НСтр("ru = 'На подписании проверка сертификата по OCSP не выполнялась'; uk = ' На час підписання перевірка сертифікату за OCSP не виконувалась'");
			//	КонецЕсли;
			//КонецЕсли;
			//
			//Если ?(лПодписьКонтрагента.ОписаниеСертификата.isKeyInDevice = 1, Истина, Ложь) Тогда
			//	Описание = Описание + "
			//	|"
			//	+ НСтр("ru = 'Тип носителя личного ключа:'; uk = 'Тип носія особистого ключа:'")
			//	+ " "
			//	+ НСтр("ru = 'Защищен'; uk = 'Захищений'");
			//Иначе
			//	Описание = Описание + "
			//	|"
			//	+ НСтр("ru = 'Тип носителя личного ключа:'; uk = 'Тип носія особистого ключа:'")
			//	+ " "
			//	+ НСтр("ru = 'Незащищен'; uk = 'Незахищений'");
			//КонецЕсли;
			Описание = Описание + "
			|" + ОписаниеПодписи(лПодписьКонтрагента, ОтражатьTSPСтатус, ОтражатьOCSPСтатус);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция СформироватьМассивДанныхПоПодписямКонтрагента(МассивПодписейКонтрагента) Экспорт
	лРезультат = Новый Массив;
	Для Каждого лПодписьКонтрагента Из МассивПодписейКонтрагента Цикл
		
		Если лПодписьКонтрагента.Свойство("ДатаПодписания") Тогда
			лДатаПодписания = СтрокаВДату(лПодписьКонтрагента.ДатаПодписания);
		Иначе
			лДатаПодписания = Дата("00010101");
		КонецЕсли;
		
		лСтруктураДанныхПодписиКонтрагента = Новый Структура;
		лСтруктураДанныхПодписиКонтрагента.Вставить("SignersItem", лПодписьКонтрагента);
		лСтруктураДанныхПодписиКонтрагента.Вставить("ТелоСертификата",     лПодписьКонтрагента.ТелоСертификата);
		лСтруктураДанныхПодписиКонтрагента.Вставить("Подписано",           Истина);
		лСтруктураДанныхПодписиКонтрагента.Вставить("ДатаПодписания",      лДатаПодписания);
		лСтруктураДанныхПодписиКонтрагента.Вставить("TSPСтатус",     лПодписьКонтрагента.TSPСтатус);
		лСтруктураДанныхПодписиКонтрагента.Вставить("OCSPСтатус",     лПодписьКонтрагента.OCSPСтатус);
		ПодписьВерна = лПодписьКонтрагента.TSPСтатус = ПредопределенноеЗначение("Перечисление.скEDI_TSPСтатус.Есть") и лПодписьКонтрагента.OCSPСтатус = ПредопределенноеЗначение("Перечисление.скEDI_OCSPСтатус.Действующий");
		лСтруктураДанныхПодписиКонтрагента.Вставить("ПодписьВерна",        ПодписьВерна);
		лСтруктураДанныхПодписиКонтрагента.Вставить("ЕДРПОУ",        лПодписьКонтрагента.ОписаниеСертификата.EDRPOU);
		лСтруктураДанныхПодписиКонтрагента.Вставить("СерийныйНомер", лПодписьКонтрагента.ОписаниеСертификата.serialNumber);
		лСтруктураДанныхПодписиКонтрагента.Вставить("ИспользованиеКлюча", ПолучитьИспользованиеКлючаПоКоду(лПодписьКонтрагента.ОписаниеСертификата.KeyUsage));
		лСтруктураДанныхПодписиКонтрагента.Вставить("email", лПодписьКонтрагента.ОписаниеСертификата.Email);
		лСтруктураДанныхПодписиКонтрагента.Вставить("ДатаНачалаДействия", СтрокаВДату(лПодписьКонтрагента.ОписаниеСертификата.DateBeg));
		лСтруктураДанныхПодписиКонтрагента.Вставить("ДатаОкончанияДействия", СтрокаВДату(лПодписьКонтрагента.ОписаниеСертификата.DateEnd));
		лСтруктураДанныхПодписиКонтрагента.Вставить("ИздательСертификата", лПодписьКонтрагента.ОписаниеСертификата.iName);
		лСтруктураДанныхПодписиКонтрагента.Вставить("КлючНаЗащищенномНосителе", ?(лПодписьКонтрагента.ОписаниеСертификата.isKeyInDevice = 1, Истина, Ложь));
		Если лСтруктураДанныхПодписиКонтрагента.КлючНаЗащищенномНосителе Тогда
			лСтруктураДанныхПодписиКонтрагента.Вставить("КлючНаСервисеCloudKey", лПодписьКонтрагента.ОписаниеСертификата.isKeyOnSmartId = Истина);
		Иначе
			лСтруктураДанныхПодписиКонтрагента.Вставить("КлючНаСервисеCloudKey", Ложь);
		КонецЕсли;
		лСтруктураДанныхПодписиКонтрагента.Вставить("ИдентификаторСекретногоКлюча", лПодписьКонтрагента.ОписаниеСертификата.subjectKeyIdentifier);
		лСтруктураДанныхПодписиКонтрагента.Вставить("Фамилия", лПодписьКонтрагента.ОписаниеСертификата.Surname);
		лСтруктураДанныхПодписиКонтрагента.Вставить("Имя", лПодписьКонтрагента.ОписаниеСертификата.GivenName);
		
		//лГрафическоеИзображениеПодписи = НайтиГрафическоеПредставлениеСоответствующееПодписи(МассивГрафическихИзображенийПодписей, лПодписьКонтрагента.ОписаниеСертификата);
		//Если лГрафическоеИзображениеПодписи = Неопределено Тогда
			Если лПодписьКонтрагента.ОписаниеСертификата.Surname = "" Тогда
				лИмяПодписанта = лПодписьКонтрагента.ОписаниеСертификата.GivenName;
			ИначеЕсли лПодписьКонтрагента.ОписаниеСертификата.GivenName = "" Тогда
				лИмяПодписанта = лПодписьКонтрагента.ОписаниеСертификата.Surname;
			Иначе
				лИмяПодписанта = лПодписьКонтрагента.ОписаниеСертификата.Surname + " " + лПодписьКонтрагента.ОписаниеСертификата.GivenName;
			КонецЕсли;
			
			лСтруктураДанныхПодписиКонтрагента.Вставить("ИмяПодписанта",       лИмяПодписанта);
			лСтруктураДанныхПодписиКонтрагента.Вставить("ДолжностьПодписанта", лПодписьКонтрагента.ОписаниеСертификата.Title);
			
			РольПодписанта = ПолучитьРольПодписиПоКоду(лПодписьКонтрагента.ОписаниеСертификата.Type);
			Если ЗначениеЗаполнено(лПодписьКонтрагента.ОписаниеСертификата.DRFO) Тогда
				ДРФОПодписанта = лПодписьКонтрагента.ОписаниеСертификата.DRFO;
			Иначе
				Если РольПодписанта = Перечисления.скEDI_РолиПодписей.Неопределено Тогда
					РольПодписанта = Перечисления.скEDI_РолиПодписей.ПечатьОрганизации;
				КонецЕсли;
				ДРФОПодписанта = лПодписьКонтрагента.ОписаниеСертификата.EDRPOU;
			КонецЕсли;
			лСтруктураДанныхПодписиКонтрагента.Вставить("Роль", РольПодписанта);
			лСтруктураДанныхПодписиКонтрагента.Вставить("ДРФОПодписанта", ДРФОПодписанта);
		//Иначе
		//	лСтруктураДанныхПодписиКонтрагента.Вставить("ИмяПодписанта",       лГрафическоеИзображениеПодписи.SignerName);
		//	лСтруктураДанныхПодписиКонтрагента.Вставить("ДолжностьПодписанта", лГрафическоеИзображениеПодписи.SignerPosName);
		//	лСтруктураДанныхПодписиКонтрагента.Вставить("Роль",                ПолучитьРольПодписиПоКоду(лГрафическоеИзображениеПодписи.SignState));
		//	лСтруктураДанныхПодписиКонтрагента.Вставить("ДРФОПодписанта",      лГрафическоеИзображениеПодписи.Drfo);
		//	лСтруктураДанныхПодписиКонтрагента.Вставить("ТелоФаксимиле",       лГрафическоеИзображениеПодписи.Body);
		//КонецЕсли;
		лРезультат.Добавить(лСтруктураДанныхПодписиКонтрагента);
		
	КонецЦикла;
	
	Возврат лРезультат;
КонецФункции // СформироватьМассивДанныхПоПодписямКонтрагента()

// Процедура - Доплнить таблицу
//
// Параметры:
//  Приемник - ТаблицаЗначений	 - 
//  Источник - ТаблицаЗначений 	 - 
//
Процедура ДополнитьТаблицу(Приемник, Источник) Экспорт 
	
	//КолонкиИсточник   = Источник.Колонки;
	//КолонкиПриемник   = Приемник.Колонки;
	//ЕстьКолонкаОшибки = КолонкиИсточник.Найти("ЕстьОшибки") <> Неопределено;
	//
	//СтрокаСвойствЗаполнения = "";
	//
	//Для Каждого КолонкаИсточник Из КолонкиИсточник Цикл 
	//	Если КолонкиПриемник.Найти(КолонкаИсточник.Имя)	<> Неопределено Тогда 
	//		СтрокаСвойствЗаполнения = СтрокаСвойствЗаполнения 
	//								+ ?(ЗначениеЗаполнено(СтрокаСвойствЗаполнения) , ",", "")
	//								+ КолонкаИсточник.Имя;	
	//	КонецЕсли;	
	//КонецЦикла;	
	//
	//Если ЗначениеЗаполнено(СтрокаСвойствЗаполнения) Тогда 
	//	
	//	Для Каждого СтрокаИсточник Из Источник Цикл 
	//		Если НЕ ЕстьКолонкаОшибки ИЛИ НЕ СтрокаИсточник.ЕстьОшибки Тогда 
	//			ЗаполнитьЗначенияСвойств(Приемник.Добавить() , СтрокаИсточник, СтрокаСвойствЗаполнения);
	//		КонецЕсли;	
	//	КонецЦикла;	
	//	
	//КонецЕсли;
	
КонецПроцедуры	

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СтрокаВДату(Знач ДатаСтрока) Экспорт
	//2016-07-19T09:07:36+03:00
	ДатаСтрока = Строка(ДатаСтрока);
	Если Сред(ДатаСтрока, 11, 1) = "T" Тогда
		Если СтрДлина(ДатаСтрока) = 19 Тогда
			ДатаСтрока = ДатаСтрока + "+00:00";
		КонецЕсли;
		Возврат XMLЗначение(Тип("Дата"), ДатаСтрока);
		//Год = Число(Сред(ДатаСтрока, 1, 4));
		//Месяц = Число(Сред(ДатаСтрока, 6, 2));
		//День = Число(Сред(ДатаСтрока, 9, 2));
		//Часы = Число(Сред(ДатаСтрока, 12, 2));
		//Минуты = Число(Сред(ДатаСтрока, 15, 2));
		//Секунды = Число(Сред(ДатаСтрока, 18, 2));
		//
		//Возврат Дата(Год, Месяц, День, Часы, Минуты, Секунды);
	Иначе
		Возврат '00010101';
	КонецЕсли;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Процедура ПрисоединитьСтроку(Строка1, Строка2) Экспорт 
	Если Строка1 = "" Тогда
		Строка1 = СокрЛП(Строка2);
	ИначеЕсли Строка2 <> "" Тогда
		Строка1 = Строка1 + " " + СокрЛП(Строка2);
	КонецЕсли; 
КонецПроцедуры

Функция ПолучитьРеквизитСсылки(Ссылка, ИмяРеквизита) Экспорт
	Возврат Ссылка[ИмяРеквизита];	
КонецФункции

// Сравнить две строки версий.
//
// Параметры
//  СтрокаВерсии1  - Строка - номер версии в формате РР.{П|ПП}.ЗЗ.СС
//  СтрокаВерсии2  - Строка - второй сравниваемый номер версии
//
// Возвращаемое значение:
//   Число   - больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	
	Строка1 = ?(ПустаяСтрока(СтрокаВерсии1), "0.0.0.0", СтрокаВерсии1);
	Строка2 = ?(ПустаяСтрока(СтрокаВерсии2), "0.0.0.0", СтрокаВерсии2);
	Версия1 = скEDI_СозданиеДокументов.мРазложитьСтрокуВМассивПодстрок(Строка1, ".");
	р1 = Версия1.Количество();
	Если р1 < 3 Тогда
		ВызватьИсключение СтрЗаменить(НСтр("ru='Неправильный формат параметра СтрокаВерсии1: %1';uk='Неправильний формат параметра СтрокаВерсии1: %1'"), "%1", СтрокаВерсии1);
	КонецЕсли;
	Версия2 = скEDI_СозданиеДокументов.мРазложитьСтрокуВМассивПодстрок(Строка2, ".");
	р2 = Версия2.Количество();
	Если р2 < 3 Тогда
		ВызватьИсключение СтрЗаменить(НСтр("ru='Неправильный формат параметра СтрокаВерсии2: %1';uk='Неправильний формат параметра СтрокаВерсии2: %1'"), "%1", СтрокаВерсии2);
	КонецЕсли;
	
	Если р1 < р2 Тогда
		р = р1;
	Иначе
		р = р2;
	КонецЕсли;
	Результат = 0;
	Для Разряд = 0 По р-1 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////
// РаботаСРегламентнымиЗаданиями

// Процедура - Получение входящих сообщений.
//
// Параметры:
//  СтруктураПараметров	 - Структура - Структура с параметрами для выполнения регламентной операции.
//
Процедура скEDI_ПолучениеВходящихСообщений(СтруктураПараметров) Экспорт
	Если не Константы.скEDI_ИспользованиеПодсистемы.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;

	///  Параллельное выполнение операции "ПолучениеВходящихСообщений" -0- Проверка структуры параметров.
	Если ТипЗнч(СтруктураПараметров) <> Тип("Структура") Тогда 
		ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,"Некорректный тип входящих параметров");
		Отказ = Истина;
		скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Некорректный тип входящих параметров");		
		
	Иначе	
		
		Если НЕ СтруктураПараметров.Свойство("Организация")
			ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда 
			
			ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,"Не заполнено свойство <Организация>");
			Отказ = Истина;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <Организация>");
			
		КонецЕсли;
		
		//Если НЕ СтруктураПараметров.Свойство("Сертификат")
		//	ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.Сертификат) Тогда 
		//	
		//	ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,"Не заполнено свойство <Сертификат>");
		//	Отказ = Истина;
		//	скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <Сертификат>");
		//	
		//КонецЕсли;

		//Если НЕ СтруктураПараметров.Свойство("Ключ")
		//	ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.Ключ) Тогда 
		//	
		//	ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,"Не заполнено свойство <Ключ>");
		//	Отказ = Истина;
		//	скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <Ключ>");
		//	
		//КонецЕсли;
		//
		//Если НЕ СтруктураПараметров.Свойство("Пароль")
		//	ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.Пароль) Тогда 
		//	
		//	ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,"Не заполнено свойство <Пароль>");
		//	Отказ = Истина;
		//	скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <Пароль>");
		//	
		//КонецЕсли;

		Если НЕ СтруктураПараметров.Свойство("НаименованиеФоновогоПроцесса")
			ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.НаименованиеФоновогоПроцесса) Тогда 
			
			ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,"Не заполнено свойство <НаименованиеФоновогоПроцесса>");
			Отказ = Истина;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <НаименованиеФоновогоПроцесса>");
			
		КонецЕсли;
		
		Если НЕ СтруктураПараметров.Свойство("КоличествоФоновыхПроцессов")
			ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.КоличествоФоновыхПроцессов) Тогда 
			
			ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,"Не заполнено свойство <КоличествоФоновыхПроцессов>");
			Отказ = Истина;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <КоличествоФоновыхПроцессов>");
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
		
		
	/// Параллельное выполнение операции "ПолучениеВходящихСообщений" -1- Проверка превышения текущих активных потоков лемита. 
	/// Запуск подчиненного фонового процесса.
	Попытка
						
		Отбор = Новый Структура("Наименование,Состояние" 
									, СтруктураПараметров.НаименованиеФоновогоПроцесса
									, СостояниеФоновогоЗадания.Активно);
									
		// Количество фоновых заданий созданных в процессе выполнения основного фонового задания + собственно само основное фоновое задание.							
		Отказ = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор).Количество() >= 1;
		
	Исключение
		ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,ОписаниеОшибки());	
		скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: " + ОписаниеОшибки());
	КонецПопытки;	
	
	// Если сейчас выполняется максимальное кол-во потоков данной операции - новый создавать не нужно.
	Если НЕ Отказ Тогда
		Сообщить(НСтр("ru = 'Начато выполнение регламентного задания по Прийому входящих документов'; uk = 'Розпочато виконання регламентного завдання по Прийому вхідних документів'"));
		//ПолучениеВходящихСообщений_Фон(СтруктураПараметров);
		СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
		ЭтаИнформационнаяБазаФайловая = Найти(Врег(СтрокаСоединенияСБД), "FILE=") = 1;
		Если ЭтаИнформационнаяБазаФайловая Тогда
			ПолучениеИОбработкаВходящихСообщенийGovRK_Фон(СтруктураПараметров);
			ПолучениеИОбработкаВходящихСообщенийGov_Фон(СтруктураПараметров);
			ПолучениеИОбработкаВходящихСообщенийPtn_Фон(СтруктураПараметров);
			ЗафиксироватьФактОбработкиВходящихСообщений(СтруктураПараметров.Организация);
		Иначе
			ПолучениеВходящихСообщенийПаралельно_Фон(СтруктураПараметров);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗапуститьВыполнениеФоновогоЗаданияПоПриемуВходящихСообщенийPtn(СтруктураПараметров)
	КлючЗадания = Новый УникальныйИдентификатор;
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(СтруктураПараметров);
	
	Возврат ФоновыеЗадания.Выполнить("скEDI_ОбщегоНазначения.ПолучениеИОбработкаВходящихСообщенийPtn_Фон"
							, МассивПараметров
							, КлючЗадания
							, "Получение о обработка входящих сообщений Ptn");
КонецФункции

Функция ЗапуститьВыполнениеФоновогоЗаданияПоПриемуВходящихСообщенийGov(СтруктураПараметров)
	КлючЗадания = Новый УникальныйИдентификатор;
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(СтруктураПараметров);
	
	Возврат ФоновыеЗадания.Выполнить("скEDI_ОбщегоНазначения.ПолучениеИОбработкаВходящихСообщенийGov_Фон"
							, МассивПараметров
							, КлючЗадания
							, "Получение о обработка входящих сообщений Gov");
КонецФункции

Функция ЗапуститьВыполнениеФоновогоЗаданияПоПриемуВходящихСообщенийGovRK(СтруктураПараметров)
	КлючЗадания = Новый УникальныйИдентификатор;
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(СтруктураПараметров);
	
	Возврат ФоновыеЗадания.Выполнить("скEDI_ОбщегоНазначения.ПолучениеИОбработкаВходящихСообщенийGovRK_Фон"
							, МассивПараметров
							, КлючЗадания
							, "Получение о обработка входящих сообщений GovRK");
КонецФункции

Процедура ПолучениеВходящихСообщенийПаралельно_Фон(СтруктураПараметров) Экспорт 
	МассивФоновыхЗаданий = Новый Массив;
	МассивФоновыхЗаданий.Добавить(ЗапуститьВыполнениеФоновогоЗаданияПоПриемуВходящихСообщенийPtn(СтруктураПараметров));
	Если СтруктураПараметров.Организация.ОбменНалоговымиДокументамиСГФС Тогда
		МассивФоновыхЗаданий.Добавить(ЗапуститьВыполнениеФоновогоЗаданияПоПриемуВходящихСообщенийGov(СтруктураПараметров));
		МассивФоновыхЗаданий.Добавить(ЗапуститьВыполнениеФоновогоЗаданияПоПриемуВходящихСообщенийGovRK(СтруктураПараметров));
	КонецЕсли;
	ФоновыеЗадания.ОжидатьЗавершения(МассивФоновыхЗаданий);
	ЗафиксироватьФактОбработкиВходящихСообщений(СтруктураПараметров.Организация);
КонецПроцедуры	

Процедура ПолучениеИОбработкаВходящихСообщенийPtn_Фон(СтруктураПараметров) Экспорт 
	Попытка
		лПолучатьСледующуюПорциюСообщенийPtn = Истина;
		лМассивПолученныхСообщенийPtn = Неопределено;	
		
		ЖурналОперации = "";
		
		Пока лПолучатьСледующуюПорциюСообщенийPtn Цикл
			//ptn
			лПараметрыПодписиДокумента = Новый Структура;
			//лПараметрыПодписиДокумента.Вставить("Организация", СтруктураПараметров.Организация);
			лПараметрыПодписиДокумента.Вставить("Edrpou",      СтруктураПараметров.Организация.Код);
			лПараметрыПодписиДокумента.Вставить("Dept",        СтруктураПараметров.Организация.Филиал);
			лПараметрыПодписиДокумента.Вставить("PrgId",       СтруктураПараметров.Организация.ИдентификаторПрограммы);
			СтрокаПодключенияEDI = Неопределено;
			СерверEDI = Неопределено;
			ПортEDI = Неопределено;
			Если ДобавитьПараметрыСекретногоКлючаПолучениеВхСообщений(лПараметрыПодписиДокумента, СтруктураПараметров.Организация, СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования, СтрокаПодключенияEDI, СерверEDI, ПортEDI, ЖурналОперации) Тогда
				лПараметрыПодписиДокумента.Вставить("ParseDocs",   Истина);
				лПараметрыПодписиДокумента.Вставить("ParseKvt",    Истина);
				
				РежимСинхронизации = Ложь;
				ПроверитьЗаполнитьДанныеПоСинхронизации(СтруктураПараметров.Организация, лПараметрыПодписиДокумента, РежимСинхронизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
				
				лРезультатПолученияПорцииСообщений = ПолучитьПорциюСообщенийСПомощьюEDIПровайдера(лПараметрыПодписиДокумента, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
				
				Если лРезультатПолученияПорцииСообщений <> Неопределено Тогда
					Если Не лРезультатПолученияПорцииСообщений.Свойство("ЕстьСледующаяПорцияСообщений", лПолучатьСледующуюПорциюСообщенийPtn) Тогда
						лПолучатьСледующуюПорциюСообщенийPtn = Ложь;
					КонецЕсли;
					лРезультатПолученияПорцииСообщений.Свойство("МассивПолученныхСообщений", лМассивПолученныхСообщенийPtn);
				КонецЕсли;
				
				// Ничего не получили - заканчиваем.	
				Если лМассивПолученныхСообщенийPtn = Неопределено Тогда
					ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,ЖурналОперации);
					скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЖурналОперации);
					лПолучатьСледующуюПорциюСообщенийPtn = Ложь;
					//Возврат;
				КонецЕсли;
				
				// ptn
				Если лМассивПолученныхСообщенийPtn <> Неопределено Тогда
					лЖурналОбработкиПорцииСообщений = "";
					Если Не ОбработатьПорциюСообщенийПоЭлектроннымДокументам(лМассивПолученныхСообщенийPtn, РежимСинхронизации, лРезультатПолученияПорцииСообщений.LastDocVer
																				, СтруктураПараметров.Организация
																				, СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования
																				, Ложь
																				, лЖурналОбработкиПорцииСообщений) Тогда
						
						ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,лЖурналОбработкиПорцииСообщений);
						скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(лЖурналОбработкиПорцииСообщений);
					КонецЕсли;
					КоличествоЗагруженныхСообщенийPtn = лМассивПолученныхСообщенийPtn.Количество();
					Если ЗначениеЗаполнено(лЖурналОбработкиПорцииСообщений) Тогда 
						ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,лЖурналОбработкиПорцииСообщений);
						скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(лЖурналОбработкиПорцииСообщений);	
					ИначеЕсли КоличествоЗагруженныхСообщенийPtn > 0 Тогда  	
						ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,"Загружено (ptn) " + КоличествоЗагруженныхСообщенийPtn);
						скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Загружено (ptn) " + КоличествоЗагруженныхСообщенийPtn);
					КонецЕсли;	
					
					МассивПараметров = Новый Массив;
					МассивПараметров.Добавить(СтруктураПараметров.Организация.Код);
					ФоновыеЗадания.Выполнить("скEDI_ОбщегоНазначения.ОбработатьЭлектронныеДокументыПослеПолучения_Фон"
											, МассивПараметров
											, Новый УникальныйИдентификатор
											, "ОбработкаМассиваДокументовПослеПолучения");
				КонецЕсли;
			Иначе
				ЕстьСледующаяПорцияСообщений = Ложь;
				ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщенийGov" ,,,, НСтр("ru = 'Не заполнена подпись шифрования организации'; uk = 'Не заповнено підпис шифрування по організації'") + ": " + СтруктураПараметров.Организация + ".");
				лПолучатьСледующуюПорциюСообщенийPtn = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,ОписаниеОшибки());	
		скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: " + ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры	

Процедура ПолучениеИОбработкаВходящихСообщенийGov_Фон(СтруктураПараметров) Экспорт 
	Попытка
		лПолучатьСледующуюПорциюСообщенийGov = Истина;
		лМассивПолученныхКвитанцийGov = Неопределено;	
		лМассивПолученныхДокументовGov = Неопределено;	
		
		ЖурналОперации = "";
		
		Если СтруктураПараметров.Организация.ОбменНалоговымиДокументамиСГФС Тогда
			Пока лПолучатьСледующуюПорциюСообщенийGov Цикл
				//gov
				лПараметрыПодписиДокумента = Новый Структура;
				//лПараметрыПодписиДокумента.Вставить("Организация", СтруктураПараметров.Организация);
				лПараметрыПодписиДокумента.Вставить("Edrpou",      СтруктураПараметров.Организация.Код);
				//лПараметрыПодписиДокумента.Вставить("Dept",        СтруктураПараметров.Организация.Филиал);
				СтрокаПодключенияEDI = Неопределено;
				СерверEDI = Неопределено;
				ПортEDI = Неопределено;
				Если ДобавитьПараметрыСекретногоКлючаПолучениеВхСообщений(лПараметрыПодписиДокумента, СтруктураПараметров.Организация, СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования, СтрокаПодключенияEDI, СерверEDI, ПортEDI, ЖурналОперации) Тогда
					лПараметрыПодписиДокумента.Вставить("Email",       СтруктураПараметров.Организация.АдресЭлектроннойПочты);
					лПараметрыПодписиДокумента.Вставить("ParseKvt",    Истина);
					
					лРезультатПолученияПорцииСообщений = ПолучитьПорциюСообщенийСПомощьюEDIПровайдераGov(лПараметрыПодписиДокумента, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					
					Если лРезультатПолученияПорцииСообщений = Неопределено Тогда
						ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,ЖурналОперации);
						скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЖурналОперации);
						лПолучатьСледующуюПорциюСообщенийGov = Ложь;
						Прервать;
					Иначе
						Если Не лРезультатПолученияПорцииСообщений.Свойство("ЕстьСледующаяПорцияСообщений", лПолучатьСледующуюПорциюСообщенийGov) Тогда
							лПолучатьСледующуюПорциюСообщенийGov = Ложь;
						КонецЕсли;
						лРезультатПолученияПорцииСообщений.Свойство("МассивПолученныхКвитанций", лМассивПолученныхКвитанцийGov);
						лРезультатПолученияПорцииСообщений.Свойство("МассивПолученныхДокументов", лМассивПолученныхДокументовGov);
					КонецЕсли;
					
					// Ничего не получили - заканчиваем.	
					Если (лМассивПолученныхКвитанцийGov = Неопределено) и (лМассивПолученныхДокументовGov = Неопределено) Тогда
						ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,ЖурналОперации);
						скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЖурналОперации);
						лПолучатьСледующуюПорциюСообщенийGov = Ложь;
						//Возврат;
					КонецЕсли;
					
					// gov kvt
					Если ТипЗнч(лМассивПолученныхКвитанцийGov) = Тип("Массив") Тогда
						лЖурналОбработкиПорцииСообщений = "";
						Если Не ОбработатьПорциюСообщенийПоЭлектроннымДокументамGov("kvt", лМассивПолученныхКвитанцийGov
																					, СтруктураПараметров.Организация
																					, СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования
																					, Ложь
																					, лЖурналОбработкиПорцииСообщений) Тогда
							
							ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,лЖурналОбработкиПорцииСообщений);
							скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(лЖурналОбработкиПорцииСообщений);
						КонецЕсли;
						КоличествоЗагруженныхСообщенийGov = лМассивПолученныхКвитанцийGov.Количество();
						Если ЗначениеЗаполнено(лЖурналОбработкиПорцииСообщений) Тогда 
							ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,лЖурналОбработкиПорцииСообщений);
							скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(лЖурналОбработкиПорцииСообщений);	
						ИначеЕсли КоличествоЗагруженныхСообщенийGov > 0 Тогда  	
							ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,"Загружено (gov) " + КоличествоЗагруженныхСообщенийGov);
							//скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Загружено (gov) " + КоличествоЗагруженныхСообщенийGov);
						КонецЕсли;	
					КонецЕсли;	
					// gov doc
					Если ТипЗнч(лМассивПолученныхДокументовGov) = Тип("Массив") Тогда
						лЖурналОбработкиПорцииСообщений = "";
						Если Не ОбработатьПорциюСообщенийПоЭлектроннымДокументамGov("doc", лМассивПолученныхДокументовGov
																					, СтруктураПараметров.Организация
																					, СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования
																					, Ложь
																					, лЖурналОбработкиПорцииСообщений) Тогда
							
							ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,лЖурналОбработкиПорцииСообщений);
							скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(лЖурналОбработкиПорцииСообщений);
						КонецЕсли;
						КоличествоЗагруженныхСообщенийGov = лМассивПолученныхДокументовGov.Количество();
						Если ЗначениеЗаполнено(лЖурналОбработкиПорцииСообщений) Тогда 
							ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,лЖурналОбработкиПорцииСообщений);
							скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(лЖурналОбработкиПорцииСообщений);	
						ИначеЕсли КоличествоЗагруженныхСообщенийGov > 0 Тогда  	
							ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,"Загружено (gov) " + КоличествоЗагруженныхСообщенийGov);
							//скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Загружено (gov) " + КоличествоЗагруженныхСообщенийGov);
						КонецЕсли;	
					КонецЕсли;
					ОбработатьУстановкуДатыРегистрацииВЕРНН(СтруктураПараметров.Организация, лЖурналОбработкиПорцииСообщений);
				Иначе
					ЕстьСледующаяПорцияСообщений = Ложь;
					ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщенийGov" ,,,, НСтр("ru = 'Не заполнена подпись шифрования организации'; uk = 'Не заповнено підпис шифрування по організації'") + ": " + СтруктураПараметров.Организация + ".");
					лПолучатьСледующуюПорциюСообщенийGov = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			лПолучатьСледующуюПорциюСообщенийGov = Ложь;
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,ОписаниеОшибки());	
		скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: " + ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры	

Процедура ПолучениеИОбработкаВходящихСообщенийGovRK_Фон(СтруктураПараметров) Экспорт 
	Попытка
		лПолучатьСледующуюПорциюСообщенийGovRk = Истина;
		лМассивПолученныхСообщенийGovRk = Неопределено;	
		
		ЖурналОперации = "";
		
		Если СтруктураПараметров.Организация.ОбменНалоговымиДокументамиСГФС Тогда
			Пока лПолучатьСледующуюПорциюСообщенийGovRk Цикл
				//govrk
				лПараметрыПодписиДокумента = Новый Структура;
				//лПараметрыПодписиДокумента.Вставить("Организация", СтруктураПараметров.Организация);
				лПараметрыПодписиДокумента.Вставить("Edrpou",      СтруктураПараметров.Организация.Код);
				лПараметрыПодписиДокумента.Вставить("Dept",        СтруктураПараметров.Организация.Филиал);
				СтрокаПодключенияEDI = Неопределено;
				СерверEDI = Неопределено;
				ПортEDI = Неопределено;
				Если ДобавитьПараметрыСекретногоКлючаПолучениеВхСообщений(лПараметрыПодписиДокумента, СтруктураПараметров.Организация, СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования, СтрокаПодключенияEDI, СерверEDI, ПортEDI, ЖурналОперации) Тогда
					лПараметрыПодписиДокумента.Вставить("ParseKvt",    Истина);
					
					лРезультатПолученияПорцииСообщений = ПолучитьПорциюСообщенийСПомощьюEDIПровайдераGovRk(лПараметрыПодписиДокумента, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					
					Если лРезультатПолученияПорцииСообщений <> Неопределено Тогда
						Если Не лРезультатПолученияПорцииСообщений.Свойство("ЕстьСледующаяПорцияСообщений", лПолучатьСледующуюПорциюСообщенийGovRk) Тогда
							лПолучатьСледующуюПорциюСообщенийGovRk = Ложь;
						КонецЕсли;
						лРезультатПолученияПорцииСообщений.Свойство("МассивПолученныхСообщений", лМассивПолученныхСообщенийGovRk);
					КонецЕсли;
					
					// Ничего не получили - заканчиваем.	
					Если лМассивПолученныхСообщенийGovRk = Неопределено Тогда
						ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,ЖурналОперации);
						скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЖурналОперации);
						лПолучатьСледующуюПорциюСообщенийGovRk = Ложь;
						//Возврат;
					КонецЕсли;

					// govrk
					Если ТипЗнч(лМассивПолученныхСообщенийGovRk) = Тип("Массив") Тогда
						лЖурналОбработкиПорцииСообщений = "";
						Если Не ОбработатьПорциюСообщенийПоЭлектроннымДокументамGovRk(лМассивПолученныхСообщенийGovRk
																					, СтруктураПараметров.Организация
																					, СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования
																					, Ложь
																					, лЖурналОбработкиПорцииСообщений) Тогда
							
							ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,лЖурналОбработкиПорцииСообщений);
							скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(лЖурналОбработкиПорцииСообщений);
						КонецЕсли;
						КоличествоЗагруженныхСообщенийGovRk = лМассивПолученныхСообщенийGovRk.Количество();
						Если ЗначениеЗаполнено(лЖурналОбработкиПорцииСообщений) Тогда 
							ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,лЖурналОбработкиПорцииСообщений);
							скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(лЖурналОбработкиПорцииСообщений);	
						ИначеЕсли КоличествоЗагруженныхСообщенийGovRk > 0 Тогда  	
							ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,"Загружено (govrk) " + КоличествоЗагруженныхСообщенийGovRk);
							//скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Загружено (govrk) " + КоличествоЗагруженныхСообщенийGovRk);
						КонецЕсли;	
					КонецЕсли;
				Иначе
					ЕстьСледующаяПорцияСообщений = Ложь;
					ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,, НСтр("ru = 'Не заполнена подпись шифрования организации'; uk = 'Не заповнено підпис шифрування по організації'") + ": " + СтруктураПараметров.Организация + ".");
					лПолучатьСледующуюПорциюСообщенийGovRk = Ложь;
					Прервать;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,ОписаниеОшибки());	
		скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: " + ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры	


Процедура ПолучениеВходящихСообщений_Фон(СтруктураПараметров) Экспорт 
	/// Параллельное выполнение операции "ПолучениеВходящихСообщений" -2- Получение информации от сервиса.	
	Попытка
		лПолучатьСледующуюПорциюСообщенийGov = Истина;
		лПолучатьСледующуюПорциюСообщенийGovRk = Истина;
		лПолучатьСледующуюПорциюСообщенийPtn = Истина;
		лМассивПолученныхКвитанцийGov = Неопределено;	
		лМассивПолученныхДокументовGov = Неопределено;	
		лМассивПолученныхСообщенийGovRk = Неопределено;	
		лМассивПолученныхСообщенийPtn = Неопределено;	
		
		ЖурналОперации = "";
		
		//лТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ВсеНастройкиПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ВсеНастройкиПодписейШифрования, Тип("ТаблицаЗначений")), ВсеНастройкиПодписейШифрования);
		лНастройкиПодписиШифрования = СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования.Найти(СтруктураПараметров.Организация, "ОрганизацияEDI");
		Если лНастройкиПодписиШифрования = Неопределено Тогда
			ЕстьСледующаяПорцияСообщений = Ложь;
			ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,, НСтр("ru = 'Не заполнена подпись шифрования организации'; uk = 'Не заповнено підпис шифрування по організації'") + ": " + СтруктураПараметров.Организация + ".");
			//ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не заполнена подпись шифрования организации'; uk = 'Не заповнено підпис шифрування по організації'") + ": " + ОрганизацияПолучатель + ".");
		Иначе
			//gov
			лПараметрыПодписиДокумента = Новый Структура;
			//лПараметрыПодписиДокумента.Вставить("Организация", СтруктураПараметров.Организация);
			//лПараметрыПодписиДокумента.Вставить("Edrpou",      СтруктураПараметров.Организация.Код);
			//лПараметрыПодписиДокумента.Вставить("Dept",        СтруктураПараметров.Организация.Филиал);
			СтрокаПодключенияEDI = Неопределено;
			СерверEDI = Неопределено;
			ПортEDI = Неопределено;
			ДобавитьПараметрыСекретногоКлюча(лПараметрыПодписиДокумента, лНастройкиПодписиШифрования, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
			//лПараметрыПодписиДокумента.Вставить("Cert",        СтруктураПараметров.Сертификат);
			//лПараметрыПодписиДокумента.Вставить("Key",         СтруктураПараметров.Ключ);
			//лПараметрыПодписиДокумента.Вставить("Password",    СтруктураПараметров.Пароль);
			лПараметрыПодписиДокумента.Вставить("Email",       СтруктураПараметров.Организация.АдресЭлектроннойПочты);
			лПараметрыПодписиДокумента.Вставить("ParseKvt",    Истина);
			
			Если СтруктураПараметров.Организация.ОбменНалоговымиДокументамиСГФС Тогда
				лРезультатПолученияПорцииСообщений = ПолучитьПорциюСообщенийСПомощьюEDIПровайдераGov(лПараметрыПодписиДокумента, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
				
				Если лРезультатПолученияПорцииСообщений = Неопределено Тогда
					ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,ЖурналОперации);
					скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЖурналОперации);
					лПолучатьСледующуюПорциюСообщенийGov = Ложь;
				Иначе
					Если Не лРезультатПолученияПорцииСообщений.Свойство("ЕстьСледующаяПорцияСообщений", лПолучатьСледующуюПорциюСообщенийGov) Тогда
						лПолучатьСледующуюПорциюСообщенийGov = Ложь;
					КонецЕсли;
					лРезультатПолученияПорцииСообщений.Свойство("МассивПолученныхКвитанций", лМассивПолученныхКвитанцийGov);
					лРезультатПолученияПорцииСообщений.Свойство("МассивПолученныхДокументов", лМассивПолученныхДокументовGov);
					// Ничего не получили - заканчиваем.	
					Если (лМассивПолученныхКвитанцийGov = Неопределено) и (лМассивПолученныхДокументовGov = Неопределено) Тогда
						ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,ЖурналОперации);
						скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЖурналОперации);
						лПолучатьСледующуюПорциюСообщенийGov = Ложь;
						//Возврат;
					КонецЕсли;
				КонецЕсли;
				
				
				//govrk
				лПараметрыПодписиДокумента = Новый Структура;
				//лПараметрыПодписиДокумента.Вставить("Организация", СтруктураПараметров.Организация);
				лПараметрыПодписиДокумента.Вставить("Edrpou",      СтруктураПараметров.Организация.Код);
				лПараметрыПодписиДокумента.Вставить("Dept",        СтруктураПараметров.Организация.Филиал);
				СтрокаПодключенияEDI = Неопределено;
				СерверEDI = Неопределено;
				ПортEDI = Неопределено;
				ДобавитьПараметрыСекретногоКлюча(лПараметрыПодписиДокумента, лНастройкиПодписиШифрования, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
				//лПараметрыПодписиДокумента.Вставить("Cert",        СтруктураПараметров.Сертификат);
				//лПараметрыПодписиДокумента.Вставить("Key",         СтруктураПараметров.Ключ);
				//лПараметрыПодписиДокумента.Вставить("Password",    СтруктураПараметров.Пароль);
				лПараметрыПодписиДокумента.Вставить("ParseKvt",    Истина);
				
				лРезультатПолученияПорцииСообщений = ПолучитьПорциюСообщенийСПомощьюEDIПровайдераGovRk(лПараметрыПодписиДокумента, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
				
				Если лРезультатПолученияПорцииСообщений <> Неопределено Тогда
					Если Не лРезультатПолученияПорцииСообщений.Свойство("ЕстьСледующаяПорцияСообщений", лПолучатьСледующуюПорциюСообщенийGovRk) Тогда
						лПолучатьСледующуюПорциюСообщенийGovRk = Ложь;
					КонецЕсли;
					лРезультатПолученияПорцииСообщений.Свойство("МассивПолученныхСообщений", лМассивПолученныхСообщенийGovRk);
				КонецЕсли;
				
				// Ничего не получили - заканчиваем.	
				Если лМассивПолученныхСообщенийGovRk = Неопределено Тогда
					ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,ЖурналОперации);
					скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЖурналОперации);
					лПолучатьСледующуюПорциюСообщенийGovRk = Ложь;
					//Возврат;
				КонецЕсли;
			Иначе
				лПолучатьСледующуюПорциюСообщенийGov = Ложь;
				лПолучатьСледующуюПорциюСообщенийGovRk = Ложь;
			КонецЕсли;
			
			//ptn
			лПараметрыПодписиДокумента = Новый Структура;
			//лПараметрыПодписиДокумента.Вставить("Организация", СтруктураПараметров.Организация);
			лПараметрыПодписиДокумента.Вставить("Edrpou",      СтруктураПараметров.Организация.Код);
			лПараметрыПодписиДокумента.Вставить("Dept",        СтруктураПараметров.Организация.Филиал);
			лПараметрыПодписиДокумента.Вставить("PrgId",       СтруктураПараметров.Организация.ИдентификаторПрограммы);
			СтрокаПодключенияEDI = Неопределено;
			СерверEDI = Неопределено;
			ПортEDI = Неопределено;
			ДобавитьПараметрыСекретногоКлюча(лПараметрыПодписиДокумента, лНастройкиПодписиШифрования, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
			//лПараметрыПодписиДокумента.Вставить("Cert",        СтруктураПараметров.Сертификат);
			//лПараметрыПодписиДокумента.Вставить("Key",         СтруктураПараметров.Ключ);
			//лПараметрыПодписиДокумента.Вставить("Password",    СтруктураПараметров.Пароль);
			лПараметрыПодписиДокумента.Вставить("ParseDocs",   Истина);
			лПараметрыПодписиДокумента.Вставить("ParseKvt",    Истина);
			
			РежимСинхронизации = Ложь;
			ПроверитьЗаполнитьДанныеПоСинхронизации(СтруктураПараметров.Организация, лПараметрыПодписиДокумента, РежимСинхронизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
			
			лРезультатПолученияПорцииСообщений = ПолучитьПорциюСообщенийСПомощьюEDIПровайдера(лПараметрыПодписиДокумента, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
			LastDocVer = Неопределено;
			
			Если лРезультатПолученияПорцииСообщений <> Неопределено Тогда
				Если Не лРезультатПолученияПорцииСообщений.Свойство("ЕстьСледующаяПорцияСообщений", лПолучатьСледующуюПорциюСообщенийPtn) Тогда
					лПолучатьСледующуюПорциюСообщенийPtn = Ложь;
				КонецЕсли;
				лРезультатПолученияПорцииСообщений.Свойство("МассивПолученныхСообщений", лМассивПолученныхСообщенийPtn);
				лРезультатПолученияПорцииСообщений.Свойство("LastDocVer", LastDocVer);
			КонецЕсли;
			
			// Ничего не получили - заканчиваем.	
			Если лМассивПолученныхСообщенийPtn = Неопределено Тогда
				ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,ЖурналОперации);
				скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЖурналОперации);
				лПолучатьСледующуюПорциюСообщенийPtn = Ложь;
				//Возврат;
			КонецЕсли;
			
			/// Параллельное выполнение операции "ПолучениеВходящихСообщений" -3- Если:
			///	-3_1- Есть еще порция для получения и есть свободные фоновые процессы: запускаем новый фоновые процесс и продолжаем выполнение текущего.
			///	-3_2- Есть еще порция для получения НЕТ свободных фоновых процессов: Продолжаем выполнение.
			///	-3_3- НЕТ порции для получения: Продолжаем выполнение.
			
			Если лПолучатьСледующуюПорциюСообщенийGov Или лПолучатьСледующуюПорциюСообщенийGovRk Или лПолучатьСледующуюПорциюСообщенийPtn Тогда 
				Отбор = Новый Структура("Наименование,Состояние" 
										, СтруктураПараметров.НаименованиеФоновогоПроцесса
										, СостояниеФоновогоЗадания.Активно);
				
				Отказ = Истина;//НЕТ ВОЗМОЖНОСТИ РАСПАРАЛЕЛИВАТЬ НА УРОВНЕ ptn/rcv ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор).Количество() >= СтруктураПараметров.КоличествоФоновыхПроцессов + 1;
							
				Если НЕ Отказ Тогда 
					МассивПараметров = Новый Массив;
					МассивПараметров.Добавить(СтруктураПараметров);
					
					ФоновыеЗадания.Выполнить("скEDI_ОбщегоНазначения.ПолучениеВходящихСообщений_Фон"
											, МассивПараметров
											, Новый УникальныйИдентификатор
											, СтруктураПараметров.НаименованиеФоновогоПроцесса);	
				КонецЕсли;	
			КонецЕсли;	
			
			
			/// Параллельное выполнение операции "ПолучениеВходящихСообщений" -4- Запись в РС "Детали выполнения рег. заданий"
			/// информации о наличии порций для получении.
			Набор = РегистрыСведений.скEDI_ДеталиВыполненияРегЗаданий.СоздатьНаборЗаписей();
			Набор.Отбор.ИдентификаторРегЗадания.Установить(СтруктураПараметров.НаименованиеФоновогоПроцесса);
			Набор.Прочитать();
			
			Запись = ?(Набор.Количество() = 0,Набор.Добавить(), Набор[0]);
			
			Запись.ИдентификаторРегЗадания   = СтруктураПараметров.НаименованиеФоновогоПроцесса;
			Запись.ЕстьНовыеПорцииКПолучению = лПолучатьСледующуюПорциюСообщенийGov Или лПолучатьСледующуюПорциюСообщенийGovRk Или лПолучатьСледующуюПорциюСообщенийPtn;
			Набор.Записать(Истина);
			
			// gov kvt
			Если ТипЗнч(лМассивПолученныхКвитанцийGov) = Тип("Массив") Тогда
				лЖурналОбработкиПорцииСообщений = "";
				Если Не ОбработатьПорциюСообщенийПоЭлектроннымДокументамGov("kvt", лМассивПолученныхКвитанцийGov
																			, СтруктураПараметров.Организация
																			, СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования
																			, Ложь
																			, лЖурналОбработкиПорцииСообщений) Тогда
					
					ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,лЖурналОбработкиПорцииСообщений);
					скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(лЖурналОбработкиПорцииСообщений);
				КонецЕсли;
				КоличествоЗагруженныхСообщенийGov = лМассивПолученныхКвитанцийGov.Количество();
				Если ЗначениеЗаполнено(лЖурналОбработкиПорцииСообщений) Тогда 
					ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,лЖурналОбработкиПорцииСообщений);
					скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(лЖурналОбработкиПорцииСообщений);	
				ИначеЕсли КоличествоЗагруженныхСообщенийGov > 0 Тогда  	
					ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,"Загружено (gov) " + КоличествоЗагруженныхСообщенийGov);
					//скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Загружено (gov) " + КоличествоЗагруженныхСообщенийGov);
				КонецЕсли;	
			КонецЕсли;	
			// gov doc
			Если ТипЗнч(лМассивПолученныхДокументовGov) = Тип("Массив") Тогда
				лЖурналОбработкиПорцииСообщений = "";
				Если Не ОбработатьПорциюСообщенийПоЭлектроннымДокументамGov("doc", лМассивПолученныхДокументовGov
																			, СтруктураПараметров.Организация
																			, СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования
																			, Ложь
																			, лЖурналОбработкиПорцииСообщений) Тогда
					
					ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,лЖурналОбработкиПорцииСообщений);
					скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(лЖурналОбработкиПорцииСообщений);
				КонецЕсли;
				КоличествоЗагруженныхСообщенийGov = лМассивПолученныхДокументовGov.Количество();
				Если ЗначениеЗаполнено(лЖурналОбработкиПорцииСообщений) Тогда 
					ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,лЖурналОбработкиПорцииСообщений);
					скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(лЖурналОбработкиПорцииСообщений);	
				ИначеЕсли КоличествоЗагруженныхСообщенийGov > 0 Тогда  	
					ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,"Загружено (gov) " + КоличествоЗагруженныхСообщенийGov);
					//скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Загружено (gov) " + КоличествоЗагруженныхСообщенийGov);
				КонецЕсли;	
			КонецЕсли;
			Если СтруктураПараметров.Организация.ОбменНалоговымиДокументамиСГФС Тогда
				ОбработатьУстановкуДатыРегистрацииВЕРНН(СтруктураПараметров.Организация, лЖурналОбработкиПорцииСообщений);
			КонецЕсли;
			
			// govrk
			Если лМассивПолученныхСообщенийGovRk <> Неопределено Тогда
				лЖурналОбработкиПорцииСообщений = "";
				Если Не ОбработатьПорциюСообщенийПоЭлектроннымДокументамGovRk(лМассивПолученныхСообщенийGovRk
																			, СтруктураПараметров.Организация
																			, СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования
																			, Ложь
																			, лЖурналОбработкиПорцииСообщений) Тогда
					
					ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,лЖурналОбработкиПорцииСообщений);
					скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(лЖурналОбработкиПорцииСообщений);
				КонецЕсли;
				КоличествоЗагруженныхСообщенийGovRk = лМассивПолученныхСообщенийGovRk.Количество();
				Если ЗначениеЗаполнено(лЖурналОбработкиПорцииСообщений) Тогда 
					ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,лЖурналОбработкиПорцииСообщений);
					скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(лЖурналОбработкиПорцииСообщений);	
				ИначеЕсли КоличествоЗагруженныхСообщенийGovRk > 0 Тогда  	
					ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,"Загружено (govrk) " + КоличествоЗагруженныхСообщенийGovRk);
					//скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Загружено (govrk) " + КоличествоЗагруженныхСообщенийGovRk);
				КонецЕсли;	
			КонецЕсли;	
			
			// ptn
			Если лМассивПолученныхСообщенийPtn <> Неопределено Тогда
				лЖурналОбработкиПорцииСообщений = "";
				Если Не ОбработатьПорциюСообщенийПоЭлектроннымДокументам(лМассивПолученныхСообщенийPtn, РежимСинхронизации, LastDocVer
																			, СтруктураПараметров.Организация
																			, СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования
																			, Ложь
																			, лЖурналОбработкиПорцииСообщений) Тогда
					
					ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,лЖурналОбработкиПорцииСообщений);
					скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(лЖурналОбработкиПорцииСообщений);
				КонецЕсли;
				КоличествоЗагруженныхСообщенийPtn = лМассивПолученныхСообщенийPtn.Количество();
				Если ЗначениеЗаполнено(лЖурналОбработкиПорцииСообщений) Тогда 
					ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,лЖурналОбработкиПорцииСообщений);
					скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(лЖурналОбработкиПорцииСообщений);	
				ИначеЕсли КоличествоЗагруженныхСообщенийPtn > 0 Тогда  	
					ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,"Загружено (ptn) " + КоличествоЗагруженныхСообщенийPtn);
					скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Загружено (ptn) " + КоличествоЗагруженныхСообщенийPtn);
				КонецЕсли;	
				
				МассивПараметров = Новый Массив;
				МассивПараметров.Добавить(СтруктураПараметров.Организация.Код);
				ФоновыеЗадания.Выполнить("скEDI_ОбщегоНазначения.ОбработатьЭлектронныеДокументыПослеПолучения_Фон"
										, МассивПараметров
										, Новый УникальныйИдентификатор
										, "ОбработкаМассиваДокументовПослеПолучения");
			КонецЕсли;
		
			ЗафиксироватьФактОбработкиВходящихСообщений(СтруктураПараметров.Организация);
			
			/// Параллельное выполнение операции "ПолучениеВходящихСообщений" -5- Проверка в РС "Детали выполнения рег. заданий"
			/// наличия сообщений к получению данным рег. заданием. Если есть - запускаем в этом же фоновом процессе процедуру заново.
			Если ЕстьНовыеПорцииСообщенийКПолучению(СтруктураПараметров.НаименованиеФоновогоПроцесса) Тогда 
				ПолучениеВходящихСообщений_Фон(СтруктураПараметров);	
			КонецЕсли;	
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации("скEDI_ПолучениеВходящихСообщений" ,,,,ОписаниеОшибки());	
		скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: " + ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры	


Функция ЕстьНовыеПорцииСообщенийКПолучению(НаименованиеФоновогоПроцесса)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторРегЗадания", НаименованиеФоновогоПроцесса);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	скEDI_ДеталиВыполненияРегЗаданий.ЕстьНовыеПорцииКПолучению
	|ИЗ
	|	РегистрСведений.скEDI_ДеталиВыполненияРегЗаданий КАК скEDI_ДеталиВыполненияРегЗаданий
	|ГДЕ
	|	скEDI_ДеталиВыполненияРегЗаданий.ИдентификаторРегЗадания = &ИдентификаторРегЗадания
	|	И скEDI_ДеталиВыполненияРегЗаданий.ЕстьНовыеПорцииКПолучению";	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции


// Процедура - Отправка документов.
//
// Параметры:
//  СтруктураПараметров	 - Структура - Структура с параметрами для выполнения регламентной операции.
//
Процедура скEDI_ОтправкаДокументов(СтруктураПараметров) Экспорт
	Если не Константы.скEDI_ИспользованиеПодсистемы.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	Если ТипЗнч(СтруктураПараметров) <> Тип("Структура") Тогда 
		
		ЗаписьЖурналаРегистрации("скEDI_ОтправкаДокументов" ,,,,"Некорректный тип входящих параметров");
		Отказ = Истина;
		скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Некорректный тип входящих параметров");		
		
	Иначе	
		
		Если НЕ СтруктураПараметров.Свойство("Организация")
			ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда 
			
			ЗаписьЖурналаРегистрации("скEDI_ОтправкаДокументов" ,,,,"Не заполнено свойство <Организация>");
			Отказ = Истина;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <Организация>");
			
		КонецЕсли;
		
		Если НЕ СтруктураПараметров.Свойство("НаименованиеФоновогоПроцесса")
			ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.НаименованиеФоновогоПроцесса) Тогда 
			
			ЗаписьЖурналаРегистрации("скEDI_ОтправкаДокументов" ,,,,"Не заполнено свойство <НаименованиеФоновогоПроцесса>");
			Отказ = Истина;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <НаименованиеФоновогоПроцесса>");
			
		КонецЕсли;
		
		Если НЕ СтруктураПараметров.Свойство("КоличествоФоновыхПроцессов")
			ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.КоличествоФоновыхПроцессов) Тогда 
			
			ЗаписьЖурналаРегистрации("скEDI_ОтправкаДокументов" ,,,,"Не заполнено свойство <КоличествоФоновыхПроцессов>");
			Отказ = Истина;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <КоличествоФоновыхПроцессов>");
			
		КонецЕсли;
		
		Если НЕ СтруктураПараметров.Свойство("КоличествоДокументовВОдномПотоке")
			ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.КоличествоДокументовВОдномПотоке) Тогда 
			
			ЗаписьЖурналаРегистрации("скEDI_ОтправкаДокументов" ,,,,"Не заполнено свойство <КоличествоДокументовВОдномПотоке>");
			Отказ = Истина;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <КоличествоДокументовВОдномПотоке>");
			
		КонецЕсли;

		
		Если НЕ СтруктураПараметров.Свойство("ВидыЭлектронногоДокумента")
			ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.ВидыЭлектронногоДокумента) Тогда 
			
			ЗаписьЖурналаРегистрации("скEDI_ОтправкаДокументов" ,,,,"Не заполнено свойство <ВидыЭлектронногоДокумента>");
			Отказ = Истина;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <ВидыЭлектронногоДокумента>");
			
		КонецЕсли;
		
		Если НЕ СтруктураПараметров.Свойство("ТаблицаНеобходимыхПодписейШифрования")
			ИЛИ СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования.Количество() = 0 Тогда 
			
			ЗаписьЖурналаРегистрации("скEDI_ОтправкаДокументов" ,,,,"Не заполнено свойство <ТаблицаНеобходимыхПодписейШифрования>");
			Отказ = Истина;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <ТаблицаНеобходимыхПодписейШифрования>");
			
		КонецЕсли;
		
			Если НЕ СтруктураПараметров.Свойство("ПериодВыборки") Тогда 
			
			ЗаписьЖурналаРегистрации("скEDI_ОтправкаДокументов" ,,,,"Не заполнено свойство <ПериодВыборки>");
			Отказ = Истина;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <ПериодВыборки>");
			
		КонецЕсли;
		
		Если НЕ СтруктураПараметров.Свойство("ТаблицаНеобходимыхПодписей")
			ИЛИ СтруктураПараметров.ТаблицаНеобходимыхПодписей.Количество() = 0 Тогда 
			
			ЗаписьЖурналаРегистрации("скEDI_ОтправкаДокументов" ,,,,"Не заполнено свойство <ТаблицаНеобходимыхПодписей>");
			Отказ = Истина;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <ТаблицаНеобходимыхПодписей>");
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;	
	
	Сообщить(НСтр("ru = 'Начато выполнение регламентного задания по Обработке исходящих документов'; uk = 'Розпочато виконання регламентного завдання по Обробці вихідних документів'"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"               , СтруктураПараметров.Организация);	
	Запрос.УстановитьПараметр("ВидыЭлектронногоДокумента" , СтруктураПараметров.ВидыЭлектронногоДокумента);	
	Запрос.УстановитьПараметр("ДатаНачала"                , СтруктураПараметров.ПериодВыборки.ДатаНачала);	
	Запрос.УстановитьПараметр("ДатаОкончания"             , СтруктураПараметров.ПериодВыборки.ДатаОкончания);
	
	ОтборДокументовПоЗапросу = Неопределено;
	ТекстЗапроса = Неопределено;
	СтруктураПараметров.Свойство("ОтборДокументовПоЗапросу", ОтборДокументовПоЗапросу);
	Если ОтборДокументовПоЗапросу = Истина Тогда
		СтруктураПараметров.Свойство("ТекстЗапроса", ТекстЗапроса);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Запрос.Текст = ТекстЗапроса;
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	скEDI_ЭлектронныеДокументы.Организация КАК Организация,
		               |	скEDI_ЭлектронныеДокументы.Документ1С КАК Документ1С,
		               |	скEDI_ЭлектронныеДокументы.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
		               |	скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		               |	скEDI_ЭлектронныеДокументы.ВидДокумента1С КАК ВидДокумента1С,
		               |	ВЫБОР
		               |		КОГДА скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент = ЗНАЧЕНИЕ(Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка)
		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С)
		               |		ИНАЧЕ скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Состояние
		               |	КОНЕЦ КАК Состояние,
		               |	скEDI_ЭлектронныеДокументы.ВхИсх КАК ВхИсх,
		               |	скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.ГдеСоздан КАК ГдеСоздан,
		               |	"""" КАК ТелоДокумента,
		               |	"""" КАК ИзображениеДокумента,
		               |	"""" КАК ВложениеДокумента1,
		               |	"""" КАК ИмяФайлаВложениеДокумента1,
		               |	"""" КАК ВложениеДокумента2,
		               |	"""" КАК ИмяФайлаВложениеДокумента2,
		               |	"""" КАК ВложениеДокумента3,
		               |	"""" КАК ИмяФайлаВложениеДокумента3,
		               |	НЕОПРЕДЕЛЕНО КАК МассивВложенийДокумента4,
		               |	ЛОЖЬ КАК ЕстьОшибки,
		               |	ЛОЖЬ КАК ЕстьЗамечания,
		               |	"""" КАК ОписаниеОшибок,
		               |	ЛОЖЬ КАК ПроверкаВыполнена,
		               |	"""" КАК УИДСтроки,
		               |	скEDI_ЭлектронныеДокументы.РегистрируетсяВЕРННПокупателем КАК РегистрируетсяВЕРННПокупателем,
		               |	ВЫБОР
		               |		КОГДА скEDI_ЭлектронныеДокументы.ВидЭлектронногоДокумента.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент)
		               |			ТОГДА ВЫБОР
		               |					КОГДА скEDI_ЭлектронныеДокументы.ВхИсх = ЗНАЧЕНИЕ(Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий)
		               |							И ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.ГдеСоздан, ЗНАЧЕНИЕ(Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе)) = ЗНАЧЕНИЕ(Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе)
		               |						ТОГДА ВЫБОР
		               |								КОГДА ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Состояние, ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С)) В (ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПустаяСсылка))
		               |									ТОГДА ВЫБОР
		               |											КОГДА скEDI_ЭлектронныеДокументы.ВидЭлектронногоДокумента.ОтправлятьКомментарий = ИСТИНА
		               |													И скEDI_ЭлектронныеДокументы.Документ1СКомментарий <> """"
		               |												ТОГДА скEDI_ЭлектронныеДокументы.Документ1СКомментарий
		               |											ИНАЧЕ ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.NOTATION, """")
		               |										КОНЕЦ
		               |								ИНАЧЕ ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.NOTATION, """")
		               |							КОНЕЦ
		               |					ИНАЧЕ ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.NOTATION, """")
		               |				КОНЕЦ
		               |		ИНАЧЕ ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.NOTATION, """")
		               |	КОНЕЦ КАК Примечание
		               |ИЗ
		               |	РегистрСведений.скEDI_ЭлектронныеДокументы КАК скEDI_ЭлектронныеДокументы
		               |ГДЕ
		               |	скEDI_ЭлектронныеДокументы.Организация = &Организация
		               |	И (&ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
		               |			ИЛИ ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Дата, скEDI_ЭлектронныеДокументы.Документ1СДата) = ДАТАВРЕМЯ(1, 1, 1)
		               |			ИЛИ РАЗНОСТЬДАТ(ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Дата, скEDI_ЭлектронныеДокументы.Документ1СДата), &ДатаНачала, ДЕНЬ) <= 0)
		               |	И (&ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		               |			ИЛИ ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Дата, скEDI_ЭлектронныеДокументы.Документ1СДата) = ДАТАВРЕМЯ(1, 1, 1)
		               |			ИЛИ РАЗНОСТЬДАТ(ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Дата, скEDI_ЭлектронныеДокументы.Документ1СДата), &ДатаОкончания, ДЕНЬ) >= 0)
		               |	И ВЫБОР
		               |			КОГДА скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент = ЗНАЧЕНИЕ(Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка)
		               |				ТОГДА ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С)
		               |			ИНАЧЕ скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Состояние
		               |		КОНЕЦ В (ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьБухгалтеру), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьДиректору), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьПечатью), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан))
		               |	И скEDI_ЭлектронныеДокументы.ВидЭлектронногоДокумента В(&ВидыЭлектронногоДокумента)";	
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоДокументовВОдномПотоке   = СтруктураПараметров.КоличествоДокументовВОдномПотоке;
	КоличествоДокументовВТекущемПотоке = 0;
	КоличествоОбработанныхДокументов   = 0;
	КоличествоДокументовВВыборке       = Выборка.Количество();
	
	ТаблицаДляОбработки = СформироватьТаблицуДляОбработкиДокументов();
		
	ВыполняемыеОперации = Новый Массив;
	ВыполняемыеОперации.Добавить("Подпись");
	ВыполняемыеОперации.Добавить("Отправка");
	
	Пока Выборка.Следующий() Цикл 
		
		НоваяСтрокаТЗ = ТаблицаДляОбработки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, Выборка);
		
		//Дозаполнить значение свойств
		Если НоваяСтрокаТЗ.ВидДокумента1С = Неопределено Тогда
			Если НоваяСтрокаТЗ.Документ1С <> Неопределено Тогда
				НоваяСтрокаТЗ.ВидДокумента1С = скEDI_НастройкиПодКонфигурацию.ПолучитьВидДокумента1С(НоваяСтрокаТЗ.Документ1С);
			КонецЕсли;
		КонецЕсли;
		Если НоваяСтрокаТЗ.ЭлектронныйДокумент = Неопределено Тогда
			НоваяСтрокаТЗ.ЭлектронныйДокумент = Документы.скEDI_ЭлектронныйДокумент.ПустаяСсылка();
		КонецЕсли;
		Если НоваяСтрокаТЗ.Состояние = Неопределено Тогда
			Если НоваяСтрокаТЗ.ЭлектронныйДокумент = Документы.скEDI_ЭлектронныйДокумент.ПустаяСсылка() Тогда
				НоваяСтрокаТЗ.Состояние = Перечисления.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С;
			Иначе
				НоваяСтрокаТЗ.Состояние = НоваяСтрокаТЗ.ЭлектронныйДокумент.Состояние;
			КонецЕсли;
		КонецЕсли;
		Если НоваяСтрокаТЗ.ВхИсх = Неопределено Тогда
			Если НоваяСтрокаТЗ.ЭлектронныйДокумент = Документы.скEDI_ЭлектронныйДокумент.ПустаяСсылка() Тогда
				НоваяСтрокаТЗ.ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий;
			Иначе
				НоваяСтрокаТЗ.ВхИсх = НоваяСтрокаТЗ.ЭлектронныйДокумент.ВхИсх;
			КонецЕсли;
		КонецЕсли;
		Если НоваяСтрокаТЗ.ГдеСоздан = Неопределено Тогда
			Если НоваяСтрокаТЗ.ЭлектронныйДокумент = Документы.скEDI_ЭлектронныйДокумент.ПустаяСсылка() Тогда
				НоваяСтрокаТЗ.ГдеСоздан = Перечисления.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе;
			Иначе
				НоваяСтрокаТЗ.ГдеСоздан = НоваяСтрокаТЗ.ЭлектронныйДокумент.ГдеСоздан;
			КонецЕсли;
		КонецЕсли;
		Если НоваяСтрокаТЗ.ЕстьОшибки = Неопределено Тогда
			НоваяСтрокаТЗ.ЕстьОшибки = Ложь;
		КонецЕсли;
		Если НоваяСтрокаТЗ.ЕстьЗамечания = Неопределено Тогда
			НоваяСтрокаТЗ.ЕстьЗамечания = Ложь;
		КонецЕсли;
		Если НоваяСтрокаТЗ.ОписаниеОшибок = Неопределено Тогда
			НоваяСтрокаТЗ.ОписаниеОшибок = "";
		КонецЕсли;
		Если НоваяСтрокаТЗ.ПроверкаВыполнена = Неопределено Тогда
			НоваяСтрокаТЗ.ПроверкаВыполнена = Ложь;
		КонецЕсли;
		Если НоваяСтрокаТЗ.РегистрируетсяВЕРННПокупателем = Неопределено Тогда
			Если НоваяСтрокаТЗ.ЭлектронныйДокумент = Документы.скEDI_ЭлектронныйДокумент.ПустаяСсылка() Тогда
				НоваяСтрокаТЗ.РегистрируетсяВЕРННПокупателем = Ложь;
			Иначе
				НоваяСтрокаТЗ.РегистрируетсяВЕРННПокупателем = НоваяСтрокаТЗ.ЭлектронныйДокумент.РегистрируетсяВЕРННПокупателем;
			КонецЕсли;
		КонецЕсли;
					   //|	ВЫБОР
					   //|		КОГДА скEDI_ЭлектронныеДокументы.ВидЭлектронногоДокумента.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент)
					   //|			ТОГДА ВЫБОР
					   //|					КОГДА скEDI_ЭлектронныеДокументы.ВхИсх = ЗНАЧЕНИЕ(Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий)
					   //|							И ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.ГдеСоздан, ЗНАЧЕНИЕ(Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе)) = ЗНАЧЕНИЕ(Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе)
					   //|						ТОГДА ВЫБОР
					   //|								КОГДА ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Состояние, ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С)) В (ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПустаяСсылка))
					   //|									ТОГДА ВЫБОР
					   //|											КОГДА скEDI_ЭлектронныеДокументы.ВидЭлектронногоДокумента.ОтправлятьКомментарий = ИСТИНА
					   //|													И скEDI_ЭлектронныеДокументы.Документ1СКомментарий <> """"
					   //|												ТОГДА скEDI_ЭлектронныеДокументы.Документ1СКомментарий
					   //|											ИНАЧЕ ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.NOTATION, """")
					   //|										КОНЕЦ
					   //|								ИНАЧЕ ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.NOTATION, """")
					   //|							КОНЕЦ
					   //|					ИНАЧЕ ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.NOTATION, """")
					   //|				КОНЕЦ
					   //|		ИНАЧЕ ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.NOTATION, """")
					   //|	КОНЕЦ КАК Примечание
		//...Дозаполнить значение свойств
		
		НоваяСтрокаТЗ.УИДСтроки = Строка(Новый УникальныйИдентификатор);
		
		КоличествоДокументовВТекущемПотоке = КоличествоДокументовВТекущемПотоке + 1;
		КоличествоОбработанныхДокументов   = КоличествоОбработанныхДокументов + 1;

		Если КоличествоДокументовВТекущемПотоке >= КоличествоДокументовВОдномПотоке
			ИЛИ КоличествоОбработанныхДокументов >= КоличествоДокументовВВыборке Тогда 
			
			СтруктураДополнительныхПараметров = Новый Структура;
			СтруктураДополнительныхПараметров.Вставить("ВыполняемыеОперации"              , ВыполняемыеОперации);
			СтруктураДополнительныхПараметров.Вставить("НастройкиНеобходимыхПодписей"     , СтруктураПараметров.ТаблицаНеобходимыхПодписей);
			СтруктураДополнительныхПараметров.Вставить("НастройкиПодписейШифрования"      , СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования);
			СтруктураДополнительныхПараметров.Вставить("КоличествоЭлементовВОднойТаблице" , КоличествоДокументовВОдномПотоке);
			СтруктураДополнительныхПараметров.Вставить("ЖурналОперации"                   , "");
			СтруктураДополнительныхПараметров.Вставить("РезультатВыполнения"              , "");
			СтруктураДополнительныхПараметров.Вставить("ВызовСКлиента"                    , Ложь);
			
			
			СтруктураПараметровОтправки = Новый Структура;
			СтруктураПараметровОтправки.Вставить("ТаблицаДокументов", ТаблицаДляОбработки);
			СтруктураПараметровОтправки.Вставить("СтруктураДополнительныхПараметров", СтруктураДополнительныхПараметров);
						
			Если КоличествоОбработанныхДокументов >= КоличествоДокументовВВыборке Тогда 
				ОбработатьДокументы_Фон(СтруктураПараметровОтправки);	
			Иначе	
				
				Отбор = Новый Структура("Наименование,Состояние" 
				, СтруктураПараметров.НаименованиеФоновогоПроцесса
				, СостояниеФоновогоЗадания.Активно);
				
				// Количество фоновых заданий созданных в процессе выполнения основного фонового задания + собственно само основное фоновое задание.							
				ВыполнятьИнтерактивно = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор).Количество() + 1 >= СтруктураПараметров.КоличествоФоновыхПроцессов;
				
				Если ВыполнятьИнтерактивно Тогда 
					ОбработатьДокументы_Фон(СтруктураПараметровОтправки);			
				Иначе	
					
					МассивПараметров = Новый Массив;
					МассивПараметров.Добавить(СтруктураПараметровОтправки);

					ФоновыеЗадания.Выполнить("скEDI_ОбщегоНазначения.ОбработатьДокументы_Фон"
												, МассивПараметров
												, Новый УникальныйИдентификатор
												, СтруктураПараметров.НаименованиеФоновогоПроцесса);
											
				КонецЕсли;
										
			КонецЕсли;								
										
			ТаблицаДляОбработки = СформироватьТаблицуДляОбработкиДокументов();
			КоличествоДокументовВТекущемПотоке = 0;	
			
		КонецЕсли;
			
	КонецЦикла;	
	
КонецПроцедуры

Процедура скEDI_РегистрацияНалоговыхДокументов(СтруктураПараметров) Экспорт
	Если не Константы.скEDI_ИспользованиеПодсистемы.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	Если ТипЗнч(СтруктураПараметров) <> Тип("Структура") Тогда 
		
		ЗаписьЖурналаРегистрации("скEDI_РегистрацияНалоговыхДокументов" ,,,,"Некорректный тип входящих параметров");
		Отказ = Истина;
		скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Некорректный тип входящих параметров");		
		
	Иначе	
		
		Если НЕ СтруктураПараметров.Свойство("Организация")
			ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда 
			
			ЗаписьЖурналаРегистрации("скEDI_РегистрацияНалоговыхДокументов" ,,,,"Не заполнено свойство <Организация>");
			Отказ = Истина;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <Организация>");
			
		КонецЕсли;
		
		Если НЕ СтруктураПараметров.Свойство("НаименованиеФоновогоПроцесса")
			ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.НаименованиеФоновогоПроцесса) Тогда 
			
			ЗаписьЖурналаРегистрации("скEDI_РегистрацияНалоговыхДокументов" ,,,,"Не заполнено свойство <НаименованиеФоновогоПроцесса>");
			Отказ = Истина;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <НаименованиеФоновогоПроцесса>");
			
		КонецЕсли;
		
		Если НЕ СтруктураПараметров.Свойство("КоличествоФоновыхПроцессов")
			ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.КоличествоФоновыхПроцессов) Тогда 
			
			ЗаписьЖурналаРегистрации("скEDI_РегистрацияНалоговыхДокументов" ,,,,"Не заполнено свойство <КоличествоФоновыхПроцессов>");
			Отказ = Истина;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <КоличествоФоновыхПроцессов>");
			
		КонецЕсли;
		
		Если НЕ СтруктураПараметров.Свойство("КоличествоДокументовВОдномПотоке")
			ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.КоличествоДокументовВОдномПотоке) Тогда 
			
			ЗаписьЖурналаРегистрации("скEDI_РегистрацияНалоговыхДокументов" ,,,,"Не заполнено свойство <КоличествоДокументовВОдномПотоке>");
			Отказ = Истина;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <КоличествоДокументовВОдномПотоке>");
			
		КонецЕсли;

		
		Если НЕ СтруктураПараметров.Свойство("ВидыЭлектронногоДокумента")
			ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.ВидыЭлектронногоДокумента) Тогда 
			
			ЗаписьЖурналаРегистрации("скEDI_РегистрацияНалоговыхДокументов" ,,,,"Не заполнено свойство <ВидыЭлектронногоДокумента>");
			Отказ = Истина;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <ВидыЭлектронногоДокумента>");
			
		КонецЕсли;
		
		Если НЕ СтруктураПараметров.Свойство("ТаблицаНеобходимыхПодписейШифрования")
			ИЛИ СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования.Количество() = 0 Тогда 
			
			ЗаписьЖурналаРегистрации("скEDI_РегистрацияНалоговыхДокументов" ,,,,"Не заполнено свойство <ТаблицаНеобходимыхПодписейШифрования>");
			Отказ = Истина;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <ТаблицаНеобходимыхПодписейШифрования>");
			
		КонецЕсли;
		
			Если НЕ СтруктураПараметров.Свойство("ПериодВыборки") Тогда 
			
			ЗаписьЖурналаРегистрации("скEDI_РегистрацияНалоговыхДокументов" ,,,,"Не заполнено свойство <ПериодВыборки>");
			Отказ = Истина;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <ПериодВыборки>");
			
		КонецЕсли;
		
		Если НЕ СтруктураПараметров.Свойство("ТаблицаНеобходимыхПодписей")
			ИЛИ СтруктураПараметров.ТаблицаНеобходимыхПодписей.Количество() = 0 Тогда 
			
			ЗаписьЖурналаРегистрации("скEDI_РегистрацияНалоговыхДокументов" ,,,,"Не заполнено свойство <ТаблицаНеобходимыхПодписей>");
			Отказ = Истина;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <ТаблицаНеобходимыхПодписей>");
			
		КонецЕсли;
		
		ОтправлятьНалоговыеДокументыНаРегистрациюПовторно = Неопределено;
		ИнтервалПовторнойОтправки = Неопределено;
		Если Не СтруктураПараметров.Свойство("ОтправлятьНалоговыеДокументыНаРегистрациюПовторно", ОтправлятьНалоговыеДокументыНаРегистрациюПовторно) Тогда
			ОтправлятьНалоговыеДокументыНаРегистрациюПовторно = Ложь;
		КонецЕсли;
		Если ОтправлятьНалоговыеДокументыНаРегистрациюПовторно Тогда
			Если Не СтруктураПараметров.Свойство("ИнтервалПовторнойОтправки", ИнтервалПовторнойОтправки) Тогда
				ИнтервалПовторнойОтправки = 0;
			КонецЕсли;
			Если ИнтервалПовторнойОтправки <= 0 Тогда
				ЗаписьЖурналаРегистрации("скEDI_РегистрацияНалоговыхДокументов" ,,,,"Не заплнено свойство <ИнтервалПовторнойОтправки>");
				Отказ = Истина;
				скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заплнено свойство <ИнтервалПовторнойОтправки>");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;	
	
	Сообщить(НСтр("ru = 'Начато выполнение регламентного задания по Регистрации налоговых документов'; uk = 'Розпочато виконання регламентного завдання по Реєстрації документів'"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"               , СтруктураПараметров.Организация);	
	Запрос.УстановитьПараметр("ВидыЭлектронногоДокумента" , СтруктураПараметров.ВидыЭлектронногоДокумента);	
	Запрос.УстановитьПараметр("ДатаНачала"                , СтруктураПараметров.ПериодВыборки.ДатаНачала);	
	Запрос.УстановитьПараметр("ДатаОкончания"             , СтруктураПараметров.ПериодВыборки.ДатаОкончания);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ЭлектронныеДокументы.Организация КАК Организация,
	               |	скEDI_ЭлектронныеДокументы.Документ1С КАК Документ1С,
	               |	скEDI_ЭлектронныеДокументы.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
	               |	скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	               |	скEDI_ЭлектронныеДокументы.ВидДокумента1С КАК ВидДокумента1С,
	               |	ВЫБОР
	               |		КОГДА скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент = ЗНАЧЕНИЕ(Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С)
	               |		ИНАЧЕ скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Состояние
	               |	КОНЕЦ КАК Состояние,
	               |	скEDI_ЭлектронныеДокументы.ВхИсх КАК ВхИсх,
	               |	скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.ГдеСоздан КАК ГдеСоздан,
	               |	"""" КАК ТелоДокумента,
	               |	"""" КАК ИзображениеДокумента,
	               |	"""" КАК ВложениеДокумента1,
	               |	"""" КАК ИмяФайлаВложениеДокумента1,
	               |	"""" КАК ВложениеДокумента2,
	               |	"""" КАК ИмяФайлаВложениеДокумента2,
	               |	"""" КАК ВложениеДокумента3,
	               |	"""" КАК ИмяФайлаВложениеДокумента3,
	               |	НЕОПРЕДЕЛЕНО КАК МассивВложенийДокумента4,
	               |	ЛОЖЬ КАК ЕстьОшибки,
	               |	ЛОЖЬ КАК ЕстьЗамечания,
	               |	"""" КАК ОписаниеОшибок,
	               |	ЛОЖЬ КАК ПроверкаВыполнена,
	               |	"""" КАК УИДСтроки,
	               |	скEDI_ЭлектронныеДокументы.РегистрируетсяВЕРННПокупателем КАК РегистрируетсяВЕРННПокупателем,
	               |	"""" КАК Примечание
	               |ИЗ
	               |	РегистрСведений.скEDI_ЭлектронныеДокументы КАК скEDI_ЭлектронныеДокументы
	               |ГДЕ
	               |	скEDI_ЭлектронныеДокументы.Организация = &Организация
	               |	И (&ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Дата, скEDI_ЭлектронныеДокументы.Документ1СДата) = ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ РАЗНОСТЬДАТ(ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Дата, скEDI_ЭлектронныеДокументы.Документ1СДата), &ДатаНачала, ДЕНЬ) <= 0)
	               |	И (&ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Дата, скEDI_ЭлектронныеДокументы.Документ1СДата) = ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ РАЗНОСТЬДАТ(ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Дата, скEDI_ЭлектронныеДокументы.Документ1СДата), &ДатаОкончания, ДЕНЬ) >= 0)
	               |	И ВЫБОР
	               |			КОГДА скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент = ЗНАЧЕНИЕ(Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка)
	               |				ТОГДА ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С)
	               |			ИНАЧЕ скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Состояние
	               |		КОНЕЦ В (ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан))
	               |	И скEDI_ЭлектронныеДокументы.ВидЭлектронногоДокумента В(&ВидыЭлектронногоДокумента)
	               |	И скEDI_ЭлектронныеДокументы.ВидЭлектронногоДокумента.ТипДокумента В (ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная), ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной))
	               |	И НЕ скEDI_ЭлектронныеДокументы.РегистрируетсяВЕРННПокупателем
	               |	И скEDI_ЭлектронныеДокументы.ВхИсх = ЗНАЧЕНИЕ(Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий)";
	ВыборкаВГФС = Запрос.Выполнить().Выбрать();
	
	Если ОтправлятьНалоговыеДокументыНаРегистрациюПовторно Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация"               , СтруктураПараметров.Организация);	
		Запрос.УстановитьПараметр("ВидыЭлектронногоДокумента" , СтруктураПараметров.ВидыЭлектронногоДокумента);	
		Запрос.УстановитьПараметр("ДатаНачала"                , СтруктураПараметров.ПериодВыборки.ДатаНачала);	
		Запрос.УстановитьПараметр("ДатаОкончания"             , СтруктураПараметров.ПериодВыборки.ДатаОкончания);
		ДатаСобытияОтправкаВГФС = ТекущаяДата() - ИнтервалПовторнойОтправки*60*60;
		Запрос.УстановитьПараметр("ДатаСобытияОтправкаВГФС" , ДатаСобытияОтправкаВГФС);
		
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	скEDI_ЭлектронныеДокументы.Организация КАК Организация,
		               |	скEDI_ЭлектронныеДокументы.Документ1С КАК Документ1С,
		               |	скEDI_ЭлектронныеДокументы.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
		               |	скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		               |	скEDI_ЭлектронныеДокументы.ВидДокумента1С КАК ВидДокумента1С,
		               |	ВЫБОР
		               |		КОГДА скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент = ЗНАЧЕНИЕ(Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка)
		               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С)
		               |		ИНАЧЕ скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Состояние
		               |	КОНЕЦ КАК Состояние,
		               |	скEDI_ЭлектронныеДокументы.ВхИсх КАК ВхИсх,
		               |	скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.ГдеСоздан КАК ГдеСоздан,
		               |	"""" КАК ТелоДокумента,
		               |	"""" КАК ИзображениеДокумента,
		               |	"""" КАК ВложениеДокумента1,
		               |	"""" КАК ИмяФайлаВложениеДокумента1,
		               |	"""" КАК ВложениеДокумента2,
		               |	"""" КАК ИмяФайлаВложениеДокумента2,
		               |	"""" КАК ВложениеДокумента3,
		               |	"""" КАК ИмяФайлаВложениеДокумента3,
		               |	НЕОПРЕДЕЛЕНО КАК МассивВложенийДокумента4,
		               |	ЛОЖЬ КАК ЕстьОшибки,
		               |	ЛОЖЬ КАК ЕстьЗамечания,
		               |	"""" КАК ОписаниеОшибок,
		               |	ЛОЖЬ КАК ПроверкаВыполнена,
		               |	"""" КАК УИДСтроки,
		               |	скEDI_ЭлектронныеДокументы.РегистрируетсяВЕРННПокупателем КАК РегистрируетсяВЕРННПокупателем,
		               |	"""" КАК Примечание
		               |ИЗ
		               |	РегистрСведений.скEDI_ЭлектронныеДокументы КАК скEDI_ЭлектронныеДокументы
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		               |			скEDI_СобытияЭлектронныхДокументов.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		               |			МАКСИМУМ(скEDI_СобытияЭлектронныхДокументов.ДатаСобытия) КАК ДатаСобытия
		               |		ИЗ
		               |			РегистрСведений.скEDI_СобытияЭлектронныхДокументов КАК скEDI_СобытияЭлектронныхДокументов
		               |		ГДЕ
		               |			скEDI_СобытияЭлектронныхДокументов.Событие = ЗНАЧЕНИЕ(Перечисление.скEDI_СобытияЭлектронныхДокументов.ОтправкаВДФС)
		               |		
		               |		СГРУППИРОВАТЬ ПО
		               |			скEDI_СобытияЭлектронныхДокументов.ЭлектронныйДокумент) КАК ОтправкаВДФС
		               |		ПО скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент = ОтправкаВДФС.ЭлектронныйДокумент
		               |ГДЕ
		               |	скEDI_ЭлектронныеДокументы.Организация = &Организация
		               |	И (&ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
		               |			ИЛИ ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Дата, скEDI_ЭлектронныеДокументы.Документ1СДата) = ДАТАВРЕМЯ(1, 1, 1)
		               |			ИЛИ РАЗНОСТЬДАТ(ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Дата, скEDI_ЭлектронныеДокументы.Документ1СДата), &ДатаНачала, ДЕНЬ) <= 0)
		               |	И (&ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		               |			ИЛИ ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Дата, скEDI_ЭлектронныеДокументы.Документ1СДата) = ДАТАВРЕМЯ(1, 1, 1)
		               |			ИЛИ РАЗНОСТЬДАТ(ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Дата, скEDI_ЭлектронныеДокументы.Документ1СДата), &ДатаОкончания, ДЕНЬ) >= 0)
		               |	И скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.СостояниеРегистрацияВДФС В (ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ОтправленВДФС))
		               |	И скEDI_ЭлектронныеДокументы.ВидЭлектронногоДокумента В(&ВидыЭлектронногоДокумента)
		               |	И скEDI_ЭлектронныеДокументы.ВидЭлектронногоДокумента.ТипДокумента В (ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная), ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной))
		               |	И НЕ скEDI_ЭлектронныеДокументы.РегистрируетсяВЕРННПокупателем
		               |	И скEDI_ЭлектронныеДокументы.ВхИсх = ЗНАЧЕНИЕ(Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий)
		               |	И ОтправкаВДФС.ДатаСобытия < &ДатаСобытияОтправкаВГФС";
		ВыборкаВГФСПовторно = Запрос.Выполнить().Выбрать();
	Иначе
		ВыборкаВГФСПовторно = Неопределено;
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ЭлектронныеДокументы.Организация КАК Организация,
	               |	скEDI_ЭлектронныеДокументы.Документ1С КАК Документ1С,
	               |	скEDI_ЭлектронныеДокументы.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
	               |	скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	               |	скEDI_ЭлектронныеДокументы.ВидДокумента1С КАК ВидДокумента1С,
	               |	ВЫБОР
	               |		КОГДА скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент = ЗНАЧЕНИЕ(Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С)
	               |		ИНАЧЕ скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Состояние
	               |	КОНЕЦ КАК Состояние,
	               |	скEDI_ЭлектронныеДокументы.ВхИсх КАК ВхИсх,
	               |	скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.ГдеСоздан КАК ГдеСоздан,
	               |	"""" КАК ТелоДокумента,
	               |	"""" КАК ИзображениеДокумента,
	               |	"""" КАК ВложениеДокумента1,
	               |	"""" КАК ИмяФайлаВложениеДокумента1,
	               |	"""" КАК ВложениеДокумента2,
	               |	"""" КАК ИмяФайлаВложениеДокумента2,
	               |	"""" КАК ВложениеДокумента3,
	               |	"""" КАК ИмяФайлаВложениеДокумента3,
	               |	НЕОПРЕДЕЛЕНО КАК МассивВложенийДокумента4,
	               |	ЛОЖЬ КАК ЕстьОшибки,
	               |	ЛОЖЬ КАК ЕстьЗамечания,
	               |	"""" КАК ОписаниеОшибок,
	               |	ЛОЖЬ КАК ПроверкаВыполнена,
	               |	"""" КАК УИДСтроки,
	               |	скEDI_ЭлектронныеДокументы.РегистрируетсяВЕРННПокупателем КАК РегистрируетсяВЕРННПокупателем,
	               |	"""" КАК Примечание
	               |ИЗ
	               |	РегистрСведений.скEDI_ЭлектронныеДокументы КАК скEDI_ЭлектронныеДокументы
	               |ГДЕ
	               |	скEDI_ЭлектронныеДокументы.Организация = &Организация
	               |	И (&ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Дата, скEDI_ЭлектронныеДокументы.Документ1СДата) = ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ РАЗНОСТЬДАТ(ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Дата, скEDI_ЭлектронныеДокументы.Документ1СДата), &ДатаНачала, ДЕНЬ) <= 0)
	               |	И (&ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Дата, скEDI_ЭлектронныеДокументы.Документ1СДата) = ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ РАЗНОСТЬДАТ(ЕСТЬNULL(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Дата, скEDI_ЭлектронныеДокументы.Документ1СДата), &ДатаОкончания, ДЕНЬ) >= 0)
	               |	И ВЫБОР
	               |			КОГДА скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент = ЗНАЧЕНИЕ(Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка)
	               |				ТОГДА ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С)
	               |			ИНАЧЕ скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Состояние
	               |		КОНЕЦ В (ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан))
	               |	И скEDI_ЭлектронныеДокументы.ВидЭлектронногоДокумента В(&ВидыЭлектронногоДокумента)
	               |	И скEDI_ЭлектронныеДокументы.ВидЭлектронногоДокумента.ТипДокумента В (ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная), ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной))
	               |	И скEDI_ЭлектронныеДокументы.РегистрируетсяВЕРННПокупателем
	               |	И скEDI_ЭлектронныеДокументы.ВхИсх = ЗНАЧЕНИЕ(Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий)";
	ВыборкаКонтрагенту = Запрос.Выполнить().Выбрать();
	
	КоличествоДокументовВОдномПотоке   = СтруктураПараметров.КоличествоДокументовВОдномПотоке;
	КоличествоДокументовВВыборкеКонтрагенту       = ВыборкаКонтрагенту.Количество();
	КоличествоДокументовВВыборкеВГФС       = ВыборкаВГФС.Количество();
	
		
	ВыполняемыеОперацииКонтрагенту = Новый Массив;
	ВыполняемыеОперацииКонтрагенту.Добавить("Подпись");
	ВыполняемыеОперацииКонтрагенту.Добавить("Отправка");
	
	ВыполняемыеОперацииВГФС = Новый Массив;
	ВыполняемыеОперацииВГФС.Добавить("Подпись");
	ВыполняемыеОперацииВГФС.Добавить("ОтправкаВДФС");
	
	ТаблицаДляОбработки = СформироватьТаблицуДляОбработкиДокументов();
	КоличествоДокументовВТекущемПотоке = 0;
	КоличествоОбработанныхДокументов   = 0;
	Пока ВыборкаКонтрагенту.Следующий() Цикл 
		
		НоваяСтрокаТЗ = ТаблицаДляОбработки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ВыборкаКонтрагенту);
		НоваяСтрокаТЗ.УИДСтроки = Строка(Новый УникальныйИдентификатор);
		
		КоличествоДокументовВТекущемПотоке = КоличествоДокументовВТекущемПотоке + 1;
		КоличествоОбработанныхДокументов   = КоличествоОбработанныхДокументов + 1;

		Если КоличествоДокументовВТекущемПотоке >= КоличествоДокументовВОдномПотоке
			ИЛИ КоличествоОбработанныхДокументов >= КоличествоДокументовВВыборкеКонтрагенту Тогда 
			
			СтруктураДополнительныхПараметров = Новый Структура;
			СтруктураДополнительныхПараметров.Вставить("ВыполняемыеОперации"              , ВыполняемыеОперацииКонтрагенту);
			СтруктураДополнительныхПараметров.Вставить("НастройкиНеобходимыхПодписей"     , СтруктураПараметров.ТаблицаНеобходимыхПодписей);
			СтруктураДополнительныхПараметров.Вставить("НастройкиПодписейШифрования"      , СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования);
			СтруктураДополнительныхПараметров.Вставить("КоличествоЭлементовВОднойТаблице" , КоличествоДокументовВОдномПотоке);
			СтруктураДополнительныхПараметров.Вставить("ЖурналОперации"                   , "");
			СтруктураДополнительныхПараметров.Вставить("РезультатВыполнения"              , "");
			СтруктураДополнительныхПараметров.Вставить("ВызовСКлиента"                    , Ложь);
			
			
			СтруктураПараметровОтправки = Новый Структура;
			СтруктураПараметровОтправки.Вставить("ТаблицаДокументов", ТаблицаДляОбработки);
			СтруктураПараметровОтправки.Вставить("СтруктураДополнительныхПараметров", СтруктураДополнительныхПараметров);
						
			Если КоличествоОбработанныхДокументов >= КоличествоДокументовВВыборкеКонтрагенту Тогда 
				ОбработатьДокументы_Фон(СтруктураПараметровОтправки);	
			Иначе	
				
				Отбор = Новый Структура("Наименование,Состояние" 
				, СтруктураПараметров.НаименованиеФоновогоПроцесса
				, СостояниеФоновогоЗадания.Активно);
				
				// Количество фоновых заданий созданных в процессе выполнения основного фонового задания + собственно само основное фоновое задание.							
				ВыполнятьИнтерактивно = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор).Количество() + 1 >= СтруктураПараметров.КоличествоФоновыхПроцессов;
				
				Если ВыполнятьИнтерактивно Тогда 
					ОбработатьДокументы_Фон(СтруктураПараметровОтправки);			
				Иначе	
					
					МассивПараметров = Новый Массив;
					МассивПараметров.Добавить(СтруктураПараметровОтправки);

					ФоновыеЗадания.Выполнить("скEDI_ОбщегоНазначения.ОбработатьДокументы_Фон"
												, МассивПараметров
												, Новый УникальныйИдентификатор
												, СтруктураПараметров.НаименованиеФоновогоПроцесса);
											
				КонецЕсли;
										
			КонецЕсли;								
										
			ТаблицаДляОбработки = СформироватьТаблицуДляОбработкиДокументов();
			КоличествоДокументовВТекущемПотоке = 0;	
			
		КонецЕсли;
			
	КонецЦикла;	
	
	
	ТаблицаДляОбработки = СформироватьТаблицуДляОбработкиДокументов();
	КоличествоДокументовВТекущемПотоке = 0;
	КоличествоОбработанныхДокументов   = 0;
	Пока ВыборкаВГФС.Следующий() Цикл 
		
		НоваяСтрокаТЗ = ТаблицаДляОбработки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ВыборкаВГФС);
		НоваяСтрокаТЗ.УИДСтроки = Строка(Новый УникальныйИдентификатор);
		
		КоличествоДокументовВТекущемПотоке = КоличествоДокументовВТекущемПотоке + 1;
		КоличествоОбработанныхДокументов   = КоличествоОбработанныхДокументов + 1;

		Если КоличествоДокументовВТекущемПотоке >= КоличествоДокументовВОдномПотоке
			ИЛИ КоличествоОбработанныхДокументов >= КоличествоДокументовВВыборкеВГФС Тогда 
			
			СтруктураДополнительныхПараметров = Новый Структура;
			СтруктураДополнительныхПараметров.Вставить("ВыполняемыеОперации"              , ВыполняемыеОперацииВГФС);
			СтруктураДополнительныхПараметров.Вставить("НастройкиНеобходимыхПодписей"     , СтруктураПараметров.ТаблицаНеобходимыхПодписей);
			СтруктураДополнительныхПараметров.Вставить("НастройкиПодписейШифрования"      , СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования);
			СтруктураДополнительныхПараметров.Вставить("КоличествоЭлементовВОднойТаблице" , КоличествоДокументовВОдномПотоке);
			СтруктураДополнительныхПараметров.Вставить("ЖурналОперации"                   , "");
			СтруктураДополнительныхПараметров.Вставить("РезультатВыполнения"              , "");
			СтруктураДополнительныхПараметров.Вставить("ВызовСКлиента"                    , Ложь);
			
			
			СтруктураПараметровОтправки = Новый Структура;
			СтруктураПараметровОтправки.Вставить("ТаблицаДокументов", ТаблицаДляОбработки);
			СтруктураПараметровОтправки.Вставить("СтруктураДополнительныхПараметров", СтруктураДополнительныхПараметров);
						
			Если КоличествоОбработанныхДокументов >= КоличествоДокументовВВыборкеВГФС Тогда 
				ОбработатьДокументы_Фон(СтруктураПараметровОтправки);	
			Иначе	
				
				Отбор = Новый Структура("Наименование,Состояние" 
				, СтруктураПараметров.НаименованиеФоновогоПроцесса
				, СостояниеФоновогоЗадания.Активно);
				
				// Количество фоновых заданий созданных в процессе выполнения основного фонового задания + собственно само основное фоновое задание.							
				ВыполнятьИнтерактивно = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор).Количество() + 1 >= СтруктураПараметров.КоличествоФоновыхПроцессов;
				
				Если ВыполнятьИнтерактивно Тогда 
					ОбработатьДокументы_Фон(СтруктураПараметровОтправки);			
				Иначе	
					
					МассивПараметров = Новый Массив;
					МассивПараметров.Добавить(СтруктураПараметровОтправки);

					ФоновыеЗадания.Выполнить("скEDI_ОбщегоНазначения.ОбработатьДокументы_Фон"
												, МассивПараметров
												, Новый УникальныйИдентификатор
												, СтруктураПараметров.НаименованиеФоновогоПроцесса);
											
				КонецЕсли;
										
			КонецЕсли;								
										
			ТаблицаДляОбработки = СформироватьТаблицуДляОбработкиДокументов();
			КоличествоДокументовВТекущемПотоке = 0;	
			
		КонецЕсли;
			
	КонецЦикла;	
	
	Если ВыборкаВГФСПовторно <> Неопределено Тогда
		ТаблицаДляОбработки = СформироватьТаблицуДляОбработкиДокументов();
		КоличествоДокументовВТекущемПотоке = 0;
		КоличествоОбработанныхДокументов   = 0;
		Пока ВыборкаВГФСПовторно.Следующий() Цикл 
			
			НоваяСтрокаТЗ = ТаблицаДляОбработки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ВыборкаВГФСПовторно);
			НоваяСтрокаТЗ.УИДСтроки = Строка(Новый УникальныйИдентификатор);
			
			КоличествоДокументовВТекущемПотоке = КоличествоДокументовВТекущемПотоке + 1;
			КоличествоОбработанныхДокументов   = КоличествоОбработанныхДокументов + 1;

			Если КоличествоДокументовВТекущемПотоке >= КоличествоДокументовВОдномПотоке
				ИЛИ КоличествоОбработанныхДокументов >= КоличествоДокументовВВыборкеВГФС Тогда 
				
				СтруктураДополнительныхПараметров = Новый Структура;
				СтруктураДополнительныхПараметров.Вставить("ВыполняемыеОперации"              , ВыполняемыеОперацииВГФС);
				СтруктураДополнительныхПараметров.Вставить("НастройкиНеобходимыхПодписей"     , СтруктураПараметров.ТаблицаНеобходимыхПодписей);
				СтруктураДополнительныхПараметров.Вставить("НастройкиПодписейШифрования"      , СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования);
				СтруктураДополнительныхПараметров.Вставить("КоличествоЭлементовВОднойТаблице" , КоличествоДокументовВОдномПотоке);
				СтруктураДополнительныхПараметров.Вставить("ЖурналОперации"                   , "");
				СтруктураДополнительныхПараметров.Вставить("РезультатВыполнения"              , "");
				СтруктураДополнительныхПараметров.Вставить("ВызовСКлиента"                    , Ложь);
				
				
				СтруктураПараметровОтправки = Новый Структура;
				СтруктураПараметровОтправки.Вставить("ТаблицаДокументов", ТаблицаДляОбработки);
				СтруктураПараметровОтправки.Вставить("СтруктураДополнительныхПараметров", СтруктураДополнительныхПараметров);
							
				Если КоличествоОбработанныхДокументов >= КоличествоДокументовВВыборкеВГФС Тогда 
					ОбработатьДокументы_Фон(СтруктураПараметровОтправки);	
				Иначе	
					
					Отбор = Новый Структура("Наименование,Состояние" 
					, СтруктураПараметров.НаименованиеФоновогоПроцесса
					, СостояниеФоновогоЗадания.Активно);
					
					// Количество фоновых заданий созданных в процессе выполнения основного фонового задания + собственно само основное фоновое задание.							
					ВыполнятьИнтерактивно = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор).Количество() + 1 >= СтруктураПараметров.КоличествоФоновыхПроцессов;
					
					Если ВыполнятьИнтерактивно Тогда 
						ОбработатьДокументы_Фон(СтруктураПараметровОтправки);			
					Иначе	
						
						МассивПараметров = Новый Массив;
						МассивПараметров.Добавить(СтруктураПараметровОтправки);

						ФоновыеЗадания.Выполнить("скEDI_ОбщегоНазначения.ОбработатьДокументы_Фон"
													, МассивПараметров
													, Новый УникальныйИдентификатор
													, СтруктураПараметров.НаименованиеФоновогоПроцесса);
												
					КонецЕсли;
											
				КонецЕсли;								
											
				ТаблицаДляОбработки = СформироватьТаблицуДляОбработкиДокументов();
				КоличествоДокументовВТекущемПотоке = 0;	
				
			КонецЕсли;
				
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

Процедура скEDI_ОтправкаЗарегистрированныхНалоговыхДокументовКонтрагенту(СтруктураПараметров) Экспорт
	Если не Константы.скEDI_ИспользованиеПодсистемы.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	Если ТипЗнч(СтруктураПараметров) <> Тип("Структура") Тогда 
		
		ЗаписьЖурналаРегистрации("скEDI_ОтправкаДокументов" ,,,,"Некорректный тип входящих параметров");
		Отказ = Истина;
		скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Некорректный тип входящих параметров");		
		
	Иначе	
		
		Если НЕ СтруктураПараметров.Свойство("Организация")
			ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.Организация) Тогда 
			
			ЗаписьЖурналаРегистрации("скEDI_ОтправкаДокументов" ,,,,"Не заполнено свойство <Организация>");
			Отказ = Истина;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <Организация>");
			
		КонецЕсли;
		
		Если НЕ СтруктураПараметров.Свойство("НаименованиеФоновогоПроцесса")
			ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.НаименованиеФоновогоПроцесса) Тогда 
			
			ЗаписьЖурналаРегистрации("скEDI_ОтправкаДокументов" ,,,,"Не заполнено свойство <НаименованиеФоновогоПроцесса>");
			Отказ = Истина;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <НаименованиеФоновогоПроцесса>");
			
		КонецЕсли;
		
		Если НЕ СтруктураПараметров.Свойство("КоличествоФоновыхПроцессов")
			ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.КоличествоФоновыхПроцессов) Тогда 
			
			ЗаписьЖурналаРегистрации("скEDI_ОтправкаДокументов" ,,,,"Не заполнено свойство <КоличествоФоновыхПроцессов>");
			Отказ = Истина;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <КоличествоФоновыхПроцессов>");
			
		КонецЕсли;
		
		Если НЕ СтруктураПараметров.Свойство("КоличествоДокументовВОдномПотоке")
			ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.КоличествоДокументовВОдномПотоке) Тогда 
			
			ЗаписьЖурналаРегистрации("скEDI_ОтправкаДокументов" ,,,,"Не заполнено свойство <КоличествоДокументовВОдномПотоке>");
			Отказ = Истина;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <КоличествоДокументовВОдномПотоке>");
			
		КонецЕсли;

		
		Если НЕ СтруктураПараметров.Свойство("ВидыЭлектронногоДокумента")
			ИЛИ НЕ ЗначениеЗаполнено(СтруктураПараметров.ВидыЭлектронногоДокумента) Тогда 
			
			ЗаписьЖурналаРегистрации("скEDI_ОтправкаДокументов" ,,,,"Не заполнено свойство <ВидыЭлектронногоДокумента>");
			Отказ = Истина;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <ВидыЭлектронногоДокумента>");
			
		КонецЕсли;
		
		Если НЕ СтруктураПараметров.Свойство("ТаблицаНеобходимыхПодписейШифрования")
			ИЛИ СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования.Количество() = 0 Тогда 
			
			ЗаписьЖурналаРегистрации("скEDI_ОтправкаДокументов" ,,,,"Не заполнено свойство <ТаблицаНеобходимыхПодписейШифрования>");
			Отказ = Истина;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <ТаблицаНеобходимыхПодписейШифрования>");
			
		КонецЕсли;
		
		Если НЕ СтруктураПараметров.Свойство("ПериодВыборки") Тогда 
			
			ЗаписьЖурналаРегистрации("скEDI_ОтправкаДокументов" ,,,,"Не заполнено свойство <ПериодВыборки>");
			Отказ = Истина;
			скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заполнено свойство <ПериодВыборки>");
			
		КонецЕсли;
		
		//Если НЕ СтруктураПараметров.Свойство("ТаблицаНеобходимыхПодписей")
		//	ИЛИ СтруктураПараметров.ТаблицаНеобходимыхПодписей.Количество() = 0 Тогда 
		//	
		//	ЗаписьЖурналаРегистрации("скEDI_ОтправкаДокументов" ,,,,"Не заплнено свойство <ТаблицаНеобходимыхПодписей>");
		//	Отказ = Истина;
		//	скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("ОШИБКА: Не заплнено свойство <ТаблицаНеобходимыхПодписей>");
		//	
		//КонецЕсли;
		
	КонецЕсли;	
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;	
	
	Сообщить(НСтр("ru = 'Начато выполнение регламентного задания по Обработке исходящих документов'; uk = 'Розпочато виконання регламентного завдання по Обробці вихідних документів'"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"               , СтруктураПараметров.Организация);	
	Запрос.УстановитьПараметр("ВидыЭлектронногоДокумента" , СтруктураПараметров.ВидыЭлектронногоДокумента);	
	Запрос.УстановитьПараметр("ДатаНачала"                , СтруктураПараметров.ПериодВыборки.ДатаНачала);	
	Запрос.УстановитьПараметр("ДатаОкончания"             , СтруктураПараметров.ПериодВыборки.ДатаОкончания);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ЭлектронныеДокументы.Организация КАК Организация,
	               |	скEDI_ЭлектронныеДокументы.Документ1С КАК Документ1С,
	               |	скEDI_ЭлектронныеДокументы.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
	               |	скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	               |	скEDI_ЭлектронныеДокументы.ВидДокумента1С КАК ВидДокумента1С,
	               |	ВЫБОР
	               |		КОГДА скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент = ЗНАЧЕНИЕ(Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С)
	               |		ИНАЧЕ скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Состояние
	               |	КОНЕЦ КАК Состояние,
	               |	скEDI_ЭлектронныеДокументы.ВхИсх КАК ВхИсх,
	               |	скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.ГдеСоздан КАК ГдеСоздан,
	               |	"""" КАК ТелоДокумента,
	               |	"""" КАК ИзображениеДокумента,
	               |	"""" КАК ВложениеДокумента1,
	               |	"""" КАК ИмяФайлаВложениеДокумента1,
	               |	"""" КАК ВложениеДокумента2,
	               |	"""" КАК ИмяФайлаВложениеДокумента2,
	               |	"""" КАК ВложениеДокумента3,
	               |	"""" КАК ИмяФайлаВложениеДокумента3,
	               |	НЕОПРЕДЕЛЕНО КАК МассивВложенийДокумента4,
	               |	ЛОЖЬ КАК ЕстьОшибки,
	               |	ЛОЖЬ КАК ЕстьЗамечания,
	               |	"""" КАК ОписаниеОшибок,
	               |	ЛОЖЬ КАК ПроверкаВыполнена,
	               |	"""" КАК УИДСтроки,
	               |	скEDI_ЭлектронныеДокументы.РегистрируетсяВЕРННПокупателем КАК РегистрируетсяВЕРННПокупателем,
	               |	"""" КАК Примечание
	               |ИЗ
	               |	РегистрСведений.скEDI_ЭлектронныеДокументы КАК скEDI_ЭлектронныеДокументы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			скEDI_Квитанция.ЭлектронныйДокумент КАК ЭлектронныйДокумент
	               |		ИЗ
	               |			Документ.скEDI_Квитанция КАК скEDI_Квитанция
	               |		ГДЕ
	               |			скEDI_Квитанция.ВидКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыКвитанций.ДФС)
	               |			И скEDI_Квитанция.ФинальнаяКвитанция) КАК ФинальныеКвитанцииГФС
	               |		ПО скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент = ФинальныеКвитанцииГФС.ЭлектронныйДокумент
	               |ГДЕ
	               |	скEDI_ЭлектронныеДокументы.Организация = &Организация
	               |	И (&ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ РАЗНОСТЬДАТ(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.ДатаРегистрацииВДФС, &ДатаНачала, ДЕНЬ) <= 0)
	               |	И (&ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ РАЗНОСТЬДАТ(скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.ДатаРегистрацииВДФС, &ДатаОкончания, ДЕНЬ) >= 0)
	               |	И скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.Состояние В (ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС))
	               |	И скEDI_ЭлектронныеДокументы.ВидЭлектронногоДокумента В(&ВидыЭлектронногоДокумента)
	               |	И скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент.СостояниеРегистрацияВДФС = ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоПодтверждениеОтДФС)";	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоДокументовВОдномПотоке   = СтруктураПараметров.КоличествоДокументовВОдномПотоке;
	КоличествоДокументовВТекущемПотоке = 0;
	КоличествоОбработанныхДокументов   = 0;
	КоличествоДокументовВВыборке       = Выборка.Количество();
	
	ТаблицаДляОбработки = СформироватьТаблицуДляОбработкиДокументов();
		
	ВыполняемыеОперации = Новый Массив;
	//ВыполняемыеОперации.Добавить("Подпись");
	ВыполняемыеОперации.Добавить("Отправка");
	
	Пока Выборка.Следующий() Цикл 
		
		НоваяСтрокаТЗ = ТаблицаДляОбработки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, Выборка);
		НоваяСтрокаТЗ.УИДСтроки = Строка(Новый УникальныйИдентификатор);
		
		КоличествоДокументовВТекущемПотоке = КоличествоДокументовВТекущемПотоке + 1;
		КоличествоОбработанныхДокументов   = КоличествоОбработанныхДокументов + 1;

		Если КоличествоДокументовВТекущемПотоке >= КоличествоДокументовВОдномПотоке
			ИЛИ КоличествоОбработанныхДокументов >= КоличествоДокументовВВыборке Тогда 
			
			СтруктураДополнительныхПараметров = Новый Структура;
			СтруктураДополнительныхПараметров.Вставить("ВыполняемыеОперации"              , ВыполняемыеОперации);
			СтруктураДополнительныхПараметров.Вставить("НастройкиНеобходимыхПодписей"     , СтруктураПараметров.ТаблицаНеобходимыхПодписей);
			СтруктураДополнительныхПараметров.Вставить("НастройкиПодписейШифрования"      , СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования);
			СтруктураДополнительныхПараметров.Вставить("КоличествоЭлементовВОднойТаблице" , КоличествоДокументовВОдномПотоке);
			СтруктураДополнительныхПараметров.Вставить("ЖурналОперации"                   , "");
			СтруктураДополнительныхПараметров.Вставить("РезультатВыполнения"              , "");
			СтруктураДополнительныхПараметров.Вставить("ВызовСКлиента"                    , Ложь);
			
			
			СтруктураПараметровОтправки = Новый Структура;
			СтруктураПараметровОтправки.Вставить("ТаблицаДокументов", ТаблицаДляОбработки);
			СтруктураПараметровОтправки.Вставить("СтруктураДополнительныхПараметров", СтруктураДополнительныхПараметров);
						
			Если КоличествоОбработанныхДокументов >= КоличествоДокументовВВыборке Тогда 
				ОбработатьДокументы_Фон(СтруктураПараметровОтправки);	
			Иначе	
				
				Отбор = Новый Структура("Наименование,Состояние" 
				, СтруктураПараметров.НаименованиеФоновогоПроцесса
				, СостояниеФоновогоЗадания.Активно);
				
				// Количество фоновых заданий созданных в процессе выполнения основного фонового задания + собственно само основное фоновое задание.							
				ВыполнятьИнтерактивно = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор).Количество() + 1 >= СтруктураПараметров.КоличествоФоновыхПроцессов;
				
				Если ВыполнятьИнтерактивно Тогда 
					ОбработатьДокументы_Фон(СтруктураПараметровОтправки);			
				Иначе	
					
					МассивПараметров = Новый Массив;
					МассивПараметров.Добавить(СтруктураПараметровОтправки);

					ФоновыеЗадания.Выполнить("скEDI_ОбщегоНазначения.ОбработатьДокументы_Фон"
												, МассивПараметров
												, Новый УникальныйИдентификатор
												, СтруктураПараметров.НаименованиеФоновогоПроцесса);
											
				КонецЕсли;
										
			КонецЕсли;								
										
			ТаблицаДляОбработки = СформироватьТаблицуДляОбработкиДокументов();
			КоличествоДокументовВТекущемПотоке = 0;	
			
		КонецЕсли;
			
	КонецЦикла;	
КонецПроцедуры

Процедура ОбработатьДокументы_Фон(СтруктураПараметров) Экспорт 	
	
	ОбработкаДокументов(СтруктураПараметров.ТаблицаДокументов, СтруктураПараметров.СтруктураДополнительныхПараметров);
	
	Если ЗначениеЗаполнено(СтруктураПараметров.СтруктураДополнительныхПараметров.РезультатВыполнения) Тогда 
		ЗаписьЖурналаРегистрации("скEDI_ОтправкаДокументов" ,,,,СтруктураПараметров.СтруктураДополнительныхПараметров.РезультатВыполнения);
		скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураПараметров.СтруктураДополнительныхПараметров.РезультатВыполнения);
	ИначеЕсли ЗначениеЗаполнено(СтруктураПараметров.СтруктураДополнительныхПараметров.ЖурналОперации) Тогда 
		ЗаписьЖурналаРегистрации("скEDI_ОтправкаДокументов" ,,,,СтруктураПараметров.СтруктураДополнительныхПараметров.ЖурналОперации);
		скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураПараметров.СтруктураДополнительныхПараметров.ЖурналОперации);
	КонецЕсли;
	
КонецПроцедуры	

Функция СформироватьТаблицуДляОбработкиДокументов()
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат.Колонки.Добавить("Организация");
	ТаблицаРезультат.Колонки.Добавить("Документ1С");
	ТаблицаРезультат.Колонки.Добавить("ВидЭлектронногоДокумента");
	ТаблицаРезультат.Колонки.Добавить("ЭлектронныйДокумент");
	ТаблицаРезультат.Колонки.Добавить("ВидДокумента1С");
	ТаблицаРезультат.Колонки.Добавить("Состояние");
	ТаблицаРезультат.Колонки.Добавить("РегистрируетсяВЕРННПокупателем");
	ТаблицаРезультат.Колонки.Добавить("ВхИсх");
	ТаблицаРезультат.Колонки.Добавить("ГдеСоздан");
	ТаблицаРезультат.Колонки.Добавить("ДатаСозданияДокумента");
	ТаблицаРезультат.Колонки.Добавить("ТелоДокумента");
	ТаблицаРезультат.Колонки.Добавить("ИзображениеДокумента");
	ТаблицаРезультат.Колонки.Добавить("ВложениеДокумента1");
	ТаблицаРезультат.Колонки.Добавить("ИмяФайлаВложениеДокумента1");
	ТаблицаРезультат.Колонки.Добавить("ВложениеДокументаФайл1");
	ТаблицаРезультат.Колонки.Добавить("ВложениеДокумента2");
	ТаблицаРезультат.Колонки.Добавить("ИмяФайлаВложениеДокумента2");
	ТаблицаРезультат.Колонки.Добавить("ВложениеДокументаФайл2");
	ТаблицаРезультат.Колонки.Добавить("ВложениеДокумента3");
	ТаблицаРезультат.Колонки.Добавить("ИмяФайлаВложениеДокумента3");
	ТаблицаРезультат.Колонки.Добавить("ВложениеДокументаФайл3");
	ТаблицаРезультат.Колонки.Добавить("МассивВложенийДокумента4");
	ТаблицаРезультат.Колонки.Добавить("МассивНастроекОтправкаСсылкиНаДокумент");
	ТаблицаРезультат.Колонки.Добавить("Примечание");
	ТаблицаРезультат.Колонки.Добавить("ЕстьОшибки");
	ТаблицаРезультат.Колонки.Добавить("ЕстьЗамечания");
	ТаблицаРезультат.Колонки.Добавить("ОписаниеОшибок");
	ТаблицаРезультат.Колонки.Добавить("ПроверкаВыполнена");
	ТаблицаРезультат.Колонки.Добавить("УИДСтроки");
		
	Возврат ТаблицаРезультат;
КонецФункции




// Функция - Создать таблицу документов к заполнеию
//
// Параметры:
//  ДеревоДокументовКЗаполнению	 - 	 - 
//  СтрокаВидДокумента1С		 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция СоздатьТаблицуДокументовКЗаполнеию(КолонкиТаблицы, СтрокиТаблицы)
	 
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	Для Каждого Колонка Из КолонкиТаблицы Цикл 	
		ТаблицаРезультат.Колонки.Добавить(Колонка.Имя); 
	КонецЦикла;	
	
	Для Каждого Строка Из СтрокиТаблицы Цикл 	
		ЗаполнитьЗначенияСвойств(ТаблицаРезультат.Добавить() , Строка); 
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции 
 

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьКодПодписиПоРоли(Роль) Экспорт
	Результат = -1;
	Если Роль = Перечисления.скEDI_РолиПодписей.Неопределено Тогда
		Результат = -1;
	ИначеЕсли Роль = Перечисления.скEDI_РолиПодписей.ПодписьДиректора Тогда
		Результат = 0;
	ИначеЕсли Роль = Перечисления.скEDI_РолиПодписей.ПодписьБухгалтера Тогда
		Результат = 1;
	ИначеЕсли Роль = Перечисления.скEDI_РолиПодписей.ПечатьОрганизации Тогда
		Результат = 2;
	ИначеЕсли Роль = Перечисления.скEDI_РолиПодписей.ПодписьОтветственногоЛица Тогда
		Результат = 3;
	ИначеЕсли Роль = Перечисления.скEDI_РолиПодписей.РегистраторУСЦ Тогда
		Результат = 5;
	ИначеЕсли Роль = Перечисления.скEDI_РолиПодписей.ПодписьФизическогоЛица Тогда
		Результат = 6;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции //ПолучитьКодПодписиПоРоли()

Процедура ДобавитьПараметрыСекретногоКлюча(ПараметрыПодписиДокумента, ДанныеПодписи, СтрокаПодключенияEDI, СерверEDI, ПортEDI, ПрефиксКлючей = "") Экспорт
	СерверEDI = Неопределено;
	ПортEDI = Неопределено;
	
	ПараметрыПодписиДокумента.Вставить(ПрефиксКлючей + "Cert", ДанныеПодписи.ТелоСертификата);
	
	Если ДанныеПодписи.КлючНаЗащищенномНосителе Тогда
		Попытка
			КлючНаСервисеCloudKey = ДанныеПодписи.КлючНаСервисеCloudKey;
		Исключение
			КлючНаСервисеCloudKey = Ложь;
		КонецПопытки;
		
		Если КлючНаСервисеCloudKey = Истина Тогда
			ПараметрыПодписиДокумента.Вставить(ПрефиксКлючей + "Password", ДанныеПодписи.ПарольСекретногоКлюча);
		Иначе
			лТокен = Новый Структура;
			лТокен.Вставить("ProviderName", ДанныеПодписи.ЗащищенныйНосительProviderName);
			лТокен.Вставить("SlotId", ДанныеПодписи.ЗащищенныйНосительSlotId);
			лТокен.Вставить("TokenSerialNumber", ДанныеПодписи.ЗащищенныйНосительTokenSerialNumber);
			лТокен.Вставить("IsRemoteSlot", ДанныеПодписи.ЗащищенныйНосительIsRemoteSlot);
			Если ДанныеПодписи.ЗащищенныйНосительUseNamedKeys Тогда
				лТокен.Вставить("UseNamedKeys", ДанныеПодписи.ЗащищенныйНосительUseNamedKeys);
				лТокен.Вставить("TokenPassword", ДанныеПодписи.ЗащищенныйНосительTokenPassword);
			КонецЕсли;
			ПараметрыПодписиДокумента.Вставить(ПрефиксКлючей + "Token",    лТокен);
			ПараметрыПодписиДокумента.Вставить(ПрефиксКлючей + "Password", ДанныеПодписи.ПарольСекретногоКлюча);
			Если ДанныеПодписи.ЗащищенныйНосительЕстьНастройкаДоступаКСерверу Тогда
				Попытка
					СтрокаПодключенияEDI = ДанныеПодписи.ЗащищенныйНосительСтрокаПодключения;
				Исключение
					СтрокаПодключенияEDI = Неопределено;
				КонецПопытки;
				Если не ЗначениеЗаполнено(СтрокаПодключенияEDI) Тогда
					СтрокаПодключенияEDI = Неопределено;
					СерверEDI = ДанныеПодписи.ЗащищенныйНосительСервер;
					ПортEDI = ДанныеПодписи.ЗащищенныйНосительПорт;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПараметрыПодписиДокумента.Вставить(ПрефиксКлючей + "Key",      ДанныеПодписи.ТелоСекретногоКлюча);
		ПараметрыПодписиДокумента.Вставить(ПрефиксКлючей + "Password", ДанныеПодписи.ПарольСекретногоКлюча);
	КонецЕсли;
КонецПроцедуры

Процедура ПодписатьСодержаниеЭлектронногоДокументаСервер(
	ЭлектронныйДокумент, ДанныеДокумента, ДополнительныеПараметры,
	СписокНаложенныхНаДокументПодписей, ПодписиПолученыИзЭлектронногоДокумента, ДокументБылПодписан, ДокументБылПодписанПолностью, РольСледующейПодписи,
	ТипПодписания, МетодПодписания = "sign", ЭтоИсходящийДокумент,
	ТаблицаНакладываемыхНаДокументПодписей, ТаблицаПодписейПоДокументу,
	ТелоДокумента, ИзображениеДокумента,
	ВложениеДокумента1, ИмяФайлаВложениеДокумента1, ВложениеДокумента2, ИмяФайлаВложениеДокумента2, ВложениеДокумента3, ИмяФайлаВложениеДокумента3,
	МассивВложенийДокумента4,
	ПараметрыСобытий = Неопределено
	)
	
	ТаблицаНастроекПодписей = ДополнительныеПараметры.НастройкиНеобходимыхПодписей;
	ТаблицаНастроекПодписей = ?(ТипЗнч(ТаблицаНастроекПодписей) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписей, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписей);
	ЖурналОперации           = ДополнительныеПараметры.ЖурналОперации;
	
		
	СписокНаложенныхНаДокументПодписей   = Новый СписокЗначений;
	ПодписиПолученыИзЭлектронногоДокумента = Ложь;
	ТаблицаНакладываемыхНаДокументПодписей = Неопределено;
	Если ПолучитьТаблицуНеобходимыхПодписейДляДокумента(ТаблицаНакладываемыхНаДокументПодписей, ЭлектронныйДокумент, ДанныеДокумента, ПодписиПолученыИзЭлектронногоДокумента, ЖурналОперации) Тогда
		ТаблицаПодписейПоДокументу = Неопределено;
		Если не ПодписиПолученыИзЭлектронногоДокумента Тогда
			ТаблицаПодписейПоДокументу = ТаблицаНакладываемыхНаДокументПодписей.Скопировать();
		КонецЕсли;
		РольСледующейПодписи = Неопределено;
		МассивПодписейДляОбработкиСобытий = Неопределено;
		ДокументБылПодписанПолностью = ПодготовитьТаблицуНакладываемыхПодписей(ТаблицаНакладываемыхНаДокументПодписей, ТаблицаНастроекПодписей, ДанныеДокумента.Организация, РольСледующейПодписи, МассивПодписейДляОбработкиСобытий);
		ДокументБылПодписан = Ложь;
		
		Отказ = Ложь;
		Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
			тОрганизация = ПараметрыСобытий.Организация;
			тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
			тВхИсх = ПараметрыСобытий.ВхИсх;
			тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
			тЭлектронныйДокумент = ПараметрыСобытий.ЭлектронныйДокумент;
			тСостояние = ПараметрыСобытий.Состояние;
			тДокумент1С = ПараметрыСобытий.Документ1С;
			Если ТипЗнч(ПараметрыСобытий.МассивВложений) = Тип("Массив") Тогда
				тМассивВложений = ПараметрыСобытий.МассивВложений;
			Иначе
				Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
					тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
				Иначе
					тМассивВложений = Новый Массив;
				КонецЕсли;
				ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
			КонецЕсли;
			ПараметрыСобытий.Вставить("МассивПодписей", МассивПодписейДляОбработкиСобытий);
			ПричинаОтказа = "";
			Если не ОбработатьСобытие_ПередПодписанием(тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, МассивПодписейДляОбработкиСобытий, тДокумент1С, тМассивВложений, ПричинаОтказа) Тогда
				Отказ = Истина;
				ДанныеДокумента.ЕстьОшибки = Истина;
				
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ПричинаОтказа);
				
				ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ПричинаОтказа);
				ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
			КонецЕсли;
		КонецЕсли;
		
		Если Не Отказ Тогда
			Для Каждого лДанныеПодписи Из ТаблицаНакладываемыхНаДокументПодписей Цикл
				Если НЕ ЗначениеЗаполнено(ТелоДокумента) Тогда 
					// Информирование
					ДанныеДокумента.ЕстьОшибки = Истина;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.Документ1С + ": " + НСтр("ru = 'Тело подписываемого документа пустое.'; uk = 'Тіло підписуваного документу не заповнено.'"));
					Прервать;
				КонецЕсли;
				
				МассивВложений = Новый Массив;
				ИндексВложения1 = Неопределено;
				ИндексВложения2 = Неопределено;
				ИндексВложения3 = Неопределено;
				ИндексВложения4 = Неопределено;
				
				// Отправить запрос EDI провайдеру, обработать результат запроса.
				лПараметрыПодписиДокумента = Новый Структура;
				лПараметрыПодписиДокумента.Вставить("Body",     ТелоДокумента);
				//лПараметрыПодписиДокумента.Вставить("Cert",     лДанныеПодписи.ТелоСертификата);
				
				СтрокаПодключенияEDI = Неопределено;
				СерверEDI = Неопределено;
				ПортEDI = Неопределено;
				ДобавитьПараметрыСекретногоКлюча(лПараметрыПодписиДокумента, лДанныеПодписи, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
				
				лИнформацияПоПодписи = Новый Структура("Дата, ПолучатьOCSP, ПолучатьTSP, Подпись, ВыбранаяПодпись, Наименование, ДРФОПодписанта, СерийныйНомер, ТипПодписания", Дата(1,1,1,0,0,0), Ложь, Ложь, лДанныеПодписи.Подпись, лДанныеПодписи.ВыбранаяПодпись, лДанныеПодписи.Наименование, лДанныеПодписи.ДРФОПодписанта, лДанныеПодписи.СерийныйНомер, ТипПодписания);
				
				Если ТипПодписания = "ptn" Тогда
					лИнформацияПоПодписи.ПолучатьOCSP = Истина;
					лИнформацияПоПодписи.ПолучатьTSP = Истина;
					лПараметрыПодписиДокумента.Вставить("OCSP",     лИнформацияПоПодписи.ПолучатьOCSP);//Ложь);
					лПараметрыПодписиДокумента.Вставить("TSP",      лИнформацияПоПодписи.ПолучатьTSP);//Ложь);
					
					Если ЗначениеЗаполнено(ИзображениеДокумента) Тогда				
						лПараметрыПередаваемогоPDFПредставленияДокумента = Новый Структура;
						лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("FileName", "Form.pdf");
						лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("Body", ИзображениеДокумента);
						лПараметрыПодписиДокумента.Вставить("ImageBody", лПараметрыПередаваемогоPDFПредставленияДокумента);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента1) Тогда
						МассивВложений.Добавить(ВложениеДокумента1);
						ИндексВложения1 = МассивВложений.ВГраница();
					КонецЕсли;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента2) Тогда
						МассивВложений.Добавить(ВложениеДокумента2);
						ИндексВложения2 = МассивВложений.ВГраница();
					КонецЕсли;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента3) Тогда
						МассивВложений.Добавить(ВложениеДокумента3);
						ИндексВложения3 = МассивВложений.ВГраница();
					КонецЕсли;
					Если ТипЗнч(МассивВложенийДокумента4) = Тип("Массив") или ТипЗнч(МассивВложенийДокумента4) = Тип("ФиксированныйМассив") Тогда
						Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокумента4 Цикл
							МассивВложений.Добавить(ЭлементМассиваВложенийДокумента4.ВложениеДокумента);
							Если не ЗначениеЗаполнено(ИндексВложения4) Тогда
								ИндексВложения4 = МассивВложений.ВГраница();
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если МассивВложений.Количество() > 0 Тогда
						лПараметрыПодписиДокумента.Вставить("Attachments", МассивВложений);
					КонецЕсли;
				ИначеЕсли ТипПодписания = "gov" Тогда
					Если ЭтоИсходящийДокумент Тогда
						ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
						Если ВидЭлектронногоДокумента.НалоговыйДокументПроверятьСоответствиеПодписантаИСертификата Тогда
							лПараметрыПодписиДокумента.Вставить("CheckVOName", Истина);
						Иначе
							лПараметрыПодписиДокумента.Вставить("CheckVOName", Ложь);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				КоличествоПовторов = Неопределено;
				Если ДополнительныеПараметры.Свойство("КоличествоПовторовПриОтказе", КоличествоПовторов) Тогда 
					Если КоличествоПовторов < 1 Тогда
						КоличествоПовторов = 1;
					КонецЕсли;
				Иначе
					КоличествоПовторов = 1;
				КонецЕсли;
				
				Пока КоличествоПовторов > 0 Цикл
					лРезультатПодписиДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру(ТипПодписания + "/" + МетодПодписания, лПараметрыПодписиДокумента, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					Если лРезультатПодписиДокумента.Code = 0 Тогда
						Прервать;
					Иначе
						Если КоличествоПовторов > 1 Тогда
		                	ДанныеДокумента.ЕстьЗамечания = Истина;
						КонецЕсли;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка подписи документа'; uk = 'Помилка підпису документа'") + ": " + лРезультатПодписиДокумента.Message);
					КонецЕсли;
					КоличествоПовторов = КоличествоПовторов - 1;
				КонецЦикла;

				Если лРезультатПодписиДокумента.Code <> 0 Тогда
					ДанныеДокумента.ЕстьОшибки = Истина;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка подписи документа'; uk = 'Помилка підпису документа'") + ": " + лРезультатПодписиДокумента.Message);
					Прервать;
				ИначеЕсли ЗначениеЗаполнено(лРезультатПодписиДокумента.Body) Тогда
					ТелоДокумента = лРезультатПодписиДокумента.Body;
					ИзображениеДокумента = "";
					ВложениеДокумента1 = "";
					//ИмяФайлаВложениеДокумента1 = "";
					ВложениеДокумента2 = "";
					//ИмяФайлаВложениеДокумента2 = "";
					ВложениеДокумента3 = "";
					//ИмяФайлаВложениеДокумента3 = "";
					Если ТипПодписания = "ptn" Тогда
						Если ТипЗнч(лРезультатПодписиДокумента) = Тип("Структура") Тогда
							лКонтейнерPDFПредставленияДокумента = Неопределено;
							Если лРезультатПодписиДокумента.Свойство("ImageBody", лКонтейнерPDFПредставленияДокумента) Тогда
								Если ТипЗнч(лКонтейнерPDFПредставленияДокумента) = Тип("Структура") Тогда
									лКонтейнерPDFПредставленияДокумента.Свойство("Body", ИзображениеДокумента);
								ИначеЕсли ТипЗнч(лКонтейнерPDFПредставленияДокумента) = Тип("Соответствие") Тогда
									ИзображениеДокумента = лКонтейнерPDFПредставленияДокумента.Получить("Body");
								КонецЕсли;
							КонецЕсли;
							лКонтейнерВложений = Неопределено;
							Если лРезультатПодписиДокумента.Свойство("Attachments", лКонтейнерВложений) Тогда
								Если ТипЗнч(лКонтейнерВложений) = Тип("Массив") Тогда
									Если ИндексВложения1 <> Неопределено Тогда
										ВложениеДокумента1 = лКонтейнерВложений[ИндексВложения1];
									КонецЕсли;
									Если ИндексВложения2 <> Неопределено Тогда
										ВложениеДокумента2 = лКонтейнерВложений[ИндексВложения2];
									КонецЕсли;
									Если ИндексВложения3 <> Неопределено Тогда
										ВложениеДокумента3 = лКонтейнерВложений[ИндексВложения3];
									КонецЕсли;
									Если ИндексВложения4 <> Неопределено Тогда
										ТекИндексВложения = ИндексВложения4;
										МассивВложенийДокумента4Результат = Новый Массив;
										Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокумента4 Цикл
											ТекСтруктураВложения = Новый Структура;
											ТекСтруктураВложения.Вставить("ИмяФайлаВложениеДокумента", ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента);
											ТекСтруктураВложения.Вставить("ВложениеДокумента", лКонтейнерВложений[ТекИндексВложения]);
											МассивВложенийДокумента4Результат.Добавить(ТекСтруктураВложения);
											ТекИндексВложения = ТекИндексВложения + 1;
										КонецЦикла;
										МассивВложенийДокумента4 = МассивВложенийДокумента4Результат;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						ИначеЕсли ТипЗнч(лРезультатПодписиДокумента) = Тип("Соответствие") Тогда
							лКонтейнерPDFПредставленияДокумента = лРезультатПодписиДокумента.Получить("ImageBody");
							Если ТипЗнч(лКонтейнерPDFПредставленияДокумента) = Тип("Структура") Тогда
								лКонтейнерPDFПредставленияДокумента.Свойство("Body", ИзображениеДокумента);
							ИначеЕсли ТипЗнч(лКонтейнерPDFПредставленияДокумента) = Тип("Соответствие") Тогда
								ИзображениеДокумента = лКонтейнерPDFПредставленияДокумента.Получить("Body");
							КонецЕсли;
							
							лКонтейнерВложений = лРезультатПодписиДокумента.Получить("Attachments");
							Если ТипЗнч(лКонтейнерВложений) = Тип("Массив") Тогда
								Если ИндексВложения1 <> Неопределено Тогда
									ВложениеДокумента1 = лКонтейнерВложений[ИндексВложения1];
								КонецЕсли;
								Если ИндексВложения2 <> Неопределено Тогда
									ВложениеДокумента2 = лКонтейнерВложений[ИндексВложения2];
								КонецЕсли;
								Если ИндексВложения3 <> Неопределено Тогда
									ВложениеДокумента3 = лКонтейнерВложений[ИндексВложения3];
								КонецЕсли;
								Если ИндексВложения4 <> Неопределено Тогда
									ТекИндексВложения = ИндексВложения4;
									МассивВложенийДокумента4Результат = Новый Массив;
									Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокумента4 Цикл
										ТекСтруктураВложения = Новый Структура;
										ТекСтруктураВложения.Вставить("ИмяФайлаВложениеДокумента", ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента);
										ТекСтруктураВложения.Вставить("ВложениеДокумента", лКонтейнерВложений[ТекИндексВложения]);
										МассивВложенийДокумента4Результат.Добавить(ТекСтруктураВложения);
										ТекИндексВложения = ТекИндексВложения + 1;
									КонецЦикла;
									МассивВложенийДокумента4 = МассивВложенийДокумента4Результат;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					лИнформацияПоПодписи.Дата = ТекущаяДата();
					СписокНаложенныхНаДокументПодписей.Добавить(лИнформацияПоПодписи);
				Иначе
					ДанныеДокумента.ЕстьОшибки = Истина;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'В результате подписи осутствует тело документа.'; uk = 'В результаті підпису відсутнє тіло документа.'"));
					Прервать;
				КонецЕсли;
				ДокументБылПодписан = Истина;
			КонецЦикла;
		КонецЕсли;
	Иначе
		ДокументБылПодписан = Ложь;
	КонецЕсли;
	
	// Обновление журнала операций.
	Если ЖурналОперации <> ДополнительныеПараметры.ЖурналОперации Тогда
		Если ЖурналОперации <> "" Тогда
			Если ДополнительныеПараметры.ЖурналОперации = "" Тогда
				ДополнительныеПараметры.ЖурналОперации = ЖурналОперации;
			Иначе
				ДополнительныеПараметры.ЖурналОперации = ДополнительныеПараметры.ЖурналОперации + "; " + ЖурналОперации;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодписатьЭлектронныйДокументСервер()

Функция ПолучитьТаблицуСобытийПоЭлектронномуДокументу(ЭлектронныйДокумент) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	скEDI_Квитанция.Дата КАК Дата,
	|	скEDI_Квитанция.Ссылка КАК Квитанция,
	|	скEDI_Квитанция.ВидКвитанции КАК ВидКвитанции,
	|	ВЫБОР
	|		КОГДА скEDI_Квитанция.ВидКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыКвитанций.СДО)
	|			ТОГДА скEDI_Квитанция.ТипКвитанции
	|		КОГДА скEDI_Квитанция.ВидКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыКвитанций.ДФС)
	|			ТОГДА скEDI_Квитанция.ТипКвитанцииДФС
	|		КОГДА скEDI_Квитанция.ВидКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыКвитанций.ДФСрк)
	|			ТОГДА скEDI_Квитанция.ТипКвитанции
	|	КОНЕЦ КАК СобытиеСсылка,
	|	скEDI_Квитанция.НомерКвитанции КАК НомерКвитанции,
	|	скEDI_Квитанция.Готовится КАК Готовится,
	|	скEDI_Квитанция.ТекстКвитанции КАК Описание,
	|	NULL КАК Ответственный,
	|	скEDI_Квитанция.ВхИсх КАК ВхИсх,
	|	скEDI_Квитанция.ИмяФайла КАК ИмяФайлаКвитанции,
	|	скEDI_Квитанция.Дата КАК ПорядокДата,
	|	ВЫБОР
	|		КОГДА скEDI_Квитанция.ВидКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыКвитанций.СДО)
	|			ТОГДА ВЫБОР
	|					КОГДА скEDI_Квитанция.ТипКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыКвитанций.СообщениеОДоставке)
	|						ТОГДА 10
	|					КОГДА скEDI_Квитанция.ТипКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыКвитанций.Подтверждение)
	|						ТОГДА 20
	|					КОГДА скEDI_Квитанция.ТипКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыКвитанций.Отклонение)
	|						ТОГДА 20
	|					КОГДА скEDI_Квитанция.ТипКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыКвитанций.Отзыв)
	|						ТОГДА 30
	|					ИНАЧЕ 10
	|				КОНЕЦ
	|		КОГДА скEDI_Квитанция.ВидКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыКвитанций.ДФС)
	|			ТОГДА 40 + скEDI_Квитанция.НомерКвитанции
	|		КОГДА скEDI_Квитанция.ВидКвитанции = ЗНАЧЕНИЕ(Перечисление.скEDI_ВидыКвитанций.ДФСрк)
	|			ТОГДА 10
	|		ИНАЧЕ 10
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	Документ.скEDI_Квитанция КАК скEDI_Квитанция
	|ГДЕ
	|	скEDI_Квитанция.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|	И НЕ скEDI_Квитанция.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	скEDI_СобытияЭлектронныхДокументов.ДатаСобытия,
	|	NULL,
	|	NULL,
	|	скEDI_СобытияЭлектронныхДокументов.Событие,
	|	NULL,
	|	ЛОЖЬ,
	|	скEDI_СобытияЭлектронныхДокументов.Описание,
	|	скEDI_СобытияЭлектронныхДокументов.Ответственный,
	|	NULL,
	|	NULL,
	|	скEDI_СобытияЭлектронныхДокументов.ДатаСобытия,
	|	ВЫБОР
	|		КОГДА скEDI_СобытияЭлектронныхДокументов.Событие = ЗНАЧЕНИЕ(Перечисление.скEDI_СобытияЭлектронныхДокументов.Создание)
	|			ТОГДА 0
	|		КОГДА скEDI_СобытияЭлектронныхДокументов.Событие = ЗНАЧЕНИЕ(Перечисление.скEDI_СобытияЭлектронныхДокументов.Получение)
	|			ТОГДА 0
	|		ИНАЧЕ 10
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.скEDI_СобытияЭлектронныхДокументов КАК скEDI_СобытияЭлектронныхДокументов
	|ГДЕ
	|	скEDI_СобытияЭлектронныхДокументов.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокДата,
	|	Порядок";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	КС = Новый КвалификаторыСтроки(255);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	Результат.Колонки.Добавить("Событие", ОписаниеТиповС);
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		Если СтрокаРезультата.ВидКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ВидыКвитанций.ДФС") Тогда
			Если СтрокаРезультата.СобытиеСсылка = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанцийДФС.Успешно") Тогда
				Если СтрокаРезультата.НомерКвитанции = 1 Тогда
					СтрокаРезультата.Событие = НСтр("ru = 'Доставлен в ГНС'; uk = 'Доставлено до ДПС'");
				ИначеЕсли СтрокаРезультата.НомерКвитанции = 2 Тогда
					СтрокаРезультата.Событие = НСтр("ru = 'Зарегистрирован в ГНС'; uk = 'Зареестровано в ДПС'");
				Иначе
					СтрокаРезультата.Событие = НСтр("ru = 'Зарегистрирован в ГНС'; uk = 'Зареестровано в ДПС'");//?
				КонецЕсли;
			ИначеЕсли СтрокаРезультата.СобытиеСсылка = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанцийДФС.Ошибка") Тогда
				СтрокаРезультата.Событие = НСтр("ru = 'Отклонен в ГНС'; uk = 'Відхилено в ДПС'");
			ИначеЕсли СтрокаРезультата.СобытиеСсылка = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанцийДФС.Предупреджение") Тогда
				Если СтрокаРезультата.НомерКвитанции = 1 Тогда
					СтрокаРезультата.Событие = НСтр("ru = 'Доставлен в ГНС (с предупреждением)'; uk = 'Доставлено до ДПС (із застереженням)'");
				ИначеЕсли СтрокаРезультата.НомерКвитанции = 2 Тогда
					СтрокаРезультата.Событие = НСтр("ru = 'Зарегистрирован в ГНС (с предупреждением)'; uk = 'Зареестровано в ДПС (із застереженням)'");
				Иначе
					СтрокаРезультата.Событие = НСтр("ru = 'Зарегистрирован в ГНС (с предупреждением)'; uk = 'Зареестровано в ДПС (із застереженням)'");//?
				КонецЕсли;
			ИначеЕсли СтрокаРезультата.СобытиеСсылка = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанцийДФС.РегистрацияОстановлена") Тогда
				СтрокаРезультата.Событие = НСтр("ru = 'Регистрация остановлена'; uk = 'Реєстрація зупинена'");
			Иначе
				СтрокаРезультата.Событие = Строка(СтрокаРезультата.СобытиеСсылка);
			КонецЕсли;
		ИначеЕсли СтрокаРезультата.Готовится Тогда
			СтрокаРезультата.Событие = "(" + НСтр("ru = 'готовится'; uk = 'готується'") + ") " + Строка(СтрокаРезультата.СобытиеСсылка);
		Иначе
			СтрокаРезультата.Событие = Строка(СтрокаРезультата.СобытиеСсылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьСписокИдентификаторовПрограммы(ЕДРПОУ)Экспорт
	Результат = Новый СписокЗначений;
	
	лПараметры = Новый Структура;
	лПараметры.Вставить("Edrpou", ЕДРПОУ);
	лРезультатЗапросаПоИдентификаторам = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("svc/getprgid", лПараметры);
	МассивИдентификаторов = Неопределено;
	Если лРезультатЗапросаПоИдентификаторам.Свойство("IdList", МассивИдентификаторов) Тогда
		Если ТипЗнч(МассивИдентификаторов) = Тип("Массив") Тогда
			Для Каждого Идентификатор Из МассивИдентификаторов Цикл
				Результат.Добавить(Идентификатор);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Процедура ОбработатьЭлектронныеДокументыПослеПолучения_Фон(ЕДРПОУ) Экспорт
	ЖурналОперации = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ОбработкаПослеПолучения.ЭлектронныйДокумент,
	               |	скEDI_ОбработкаПослеПолучения.ЕДРПОУ,
	               |	скEDI_ОбработкаПослеПолучения.Дата КАК Дата,
	               |	скEDI_ОбработкаПослеПолучения.Действие,
	               |	скEDI_ОбработкаПослеПолучения.ТелоДокумента,
	               |	скEDI_ОбработкаПослеПолучения.ДатаСобытия,
	               |	скEDI_ОбработкаПослеПолучения.Квитанция,
	               |	скEDI_ОбработкаПослеПолучения.Событие,
	               |	скEDI_ОбработкаПослеПолучения.ИнформацияОДокументе,
	               |	скEDI_ОбработкаПослеПолучения.ЭлектронныйДокумент.Организация КАК Организация,
	               |	скEDI_ОбработкаПослеПолучения.ЭлектронныйДокумент.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
	               |	скEDI_ОбработкаПослеПолучения.ЭлектронныйДокумент.Состояние КАК Состояние,
	               |	скEDI_ОбработкаПослеПолучения.ЭлектронныйДокумент.Документ1С КАК Документ1С,
	               |	скEDI_ОбработкаПослеПолучения.ЭлектронныйДокумент.ВхИсх КАК ВхИсх,
	               |	скEDI_ОбработкаПослеПолучения.ЭлектронныйДокумент.ГдеСоздан КАК ГдеСоздан,
	               |	скEDI_ОбработкаПослеПолучения.Квитанция.ТипКвитанции КАК ТипКвитанции,
	               |	скEDI_ОбработкаПослеПолучения.Квитанция.ВхИсх КАК КвитанцияВхИсх
	               |ИЗ
	               |	РегистрСведений.скEDI_ОбработкаПослеПолучения КАК скEDI_ОбработкаПослеПолучения
	               |ГДЕ
	               |	скEDI_ОбработкаПослеПолучения.ЕДРПОУ = &ЕДРПОУ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата";
	Запрос.УстановитьПараметр("ЕДРПОУ", ЕДРПОУ);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		Попытка
			Если ВыборкаРезультатаЗапроса.Действие = "ЗаполнитьПодписантовИСоздатьСобытие"
				или ВыборкаРезультатаЗапроса.Действие = "ЗаполнитьПодписантовИСоздатьСобытиеНД" Тогда
				
				ОтражатьTSPСтатус = ВыборкаРезультатаЗапроса.Действие = "ЗаполнитьПодписантовИСоздатьСобытие";
				ОтражатьOCSPСтатус = ОтражатьTSPСтатус;
				
				лМассивПодписейКонтрагента = ПолучитьМассивПодписейКонтрагентаИзПодписанногоЭлектронногоДокумента(ВыборкаРезультатаЗапроса.ТелоДокумента, ЖурналОперации);
				ИнформацияОДокументе = ВыборкаРезультатаЗапроса.ИнформацияОДокументе;
				ИнформацияОДокументе = ИнформацияОДокументе + "
						|
						|Підписи:";
				ДополнитьОписаниеДаннымиПоПодписямКонтрагента(лМассивПодписейКонтрагента, ИнформацияОДокументе, ВыборкаРезультатаЗапроса.ЕДРПОУ, ОтражатьTSPСтатус, ОтражатьOCSPСтатус);
				лМассивДанныхПоПодписямКонтрагента = СформироватьМассивДанныхПоПодписямКонтрагента(лМассивПодписейКонтрагента);
				тМассивПодписейКонтрагента = Новый Массив;
				
				Если лМассивДанныхПоПодписямКонтрагента.Количество() > 0 Тогда
					лЭлектронныйДокументОбъект = ВыборкаРезультатаЗапроса.ЭлектронныйДокумент.ПолучитьОбъект();
					ПроверитьСкорректироватьПорядокПодписей = Ложь;
					Для Каждого лДанныеПоПодписиКонтрагента Из лМассивДанныхПоПодписямКонтрагента Цикл
						Если лДанныеПоПодписиКонтрагента.ЕДРПОУ = ВыборкаРезультатаЗапроса.ЕДРПОУ Тогда
							Если лЭлектронныйДокументОбъект.Подписи.Количество() = 0 Тогда
								ВидЭлектронногоДокумента = ВыборкаРезультатаЗапроса.ВидЭлектронногоДокумента;				
								Для Каждого СтрокаПодпись Из ВидЭлектронногоДокумента.Подписи Цикл
									НоваяСтрокаПодпись = лЭлектронныйДокументОбъект.Подписи.Добавить();
									НоваяСтрокаПодпись.Подпись = СтрокаПодпись.Подпись;
								КонецЦикла;
							КонецЕсли;
							
							НайденаяПодписьЭлектронногоДокумента = Неопределено;
							ИндексНовойПодписи = 0;
							Для Каждого ПодписьЭлектронногоДокумента Из лЭлектронныйДокументОбъект.Подписи Цикл
								Если ПодписьЭлектронногоДокумента.Подписано Тогда
									ИндексНовойПодписи = ПодписьЭлектронногоДокумента.НомерСтроки;
								КонецЕсли;
								Подпись = ПодписьЭлектронногоДокумента.Подпись;
								Если ТипЗнч(Подпись) = Тип("СправочникСсылка.скEDI_Подписи") Тогда
									Если Подпись.ДРФО = лДанныеПоПодписиКонтрагента.ДРФОПодписанта и Подпись.Роль = лДанныеПоПодписиКонтрагента.Роль Тогда
										НайденаяПодписьЭлектронногоДокумента = ПодписьЭлектронногоДокумента;
										Прервать;
									КонецЕсли;
								ИначеЕсли ТипЗнч(Подпись) = Тип("СправочникСсылка.скEDI_ГруппыПодписей") Тогда
									ЗапросПодписьГруппы = Новый Запрос;
									ЗапросПодписьГруппы.Текст = "ВЫБРАТЬ
									                            |	скEDI_ГруппыПодписей.Подпись КАК Подпись
									                            |ИЗ
									                            |	РегистрСведений.скEDI_ГруппыПодписей КАК скEDI_ГруппыПодписей
									                            |ГДЕ
									                            |	скEDI_ГруппыПодписей.ГруппаПодписи = &ГруппаПодписи
									                            |	И скEDI_ГруппыПодписей.Подпись.Владелец = &Организация
									                            |	И скEDI_ГруппыПодписей.Подпись.ДРФО = &ДРФО
									                            |	И скEDI_ГруппыПодписей.Подпись.Роль = &Роль";
									ЗапросПодписьГруппы.УстановитьПараметр("ГруппаПодписи", Подпись);
									ЗапросПодписьГруппы.УстановитьПараметр("Организация", ВыборкаРезультатаЗапроса.Организация);
									ЗапросПодписьГруппы.УстановитьПараметр("ДРФО", лДанныеПоПодписиКонтрагента.ДРФОПодписанта);
									ЗапросПодписьГруппы.УстановитьПараметр("Роль", лДанныеПоПодписиКонтрагента.Роль);
									ВыборкаЗапросПодписьГруппы = ЗапросПодписьГруппы.Выполнить().Выбрать();
									Если ВыборкаЗапросПодписьГруппы.Следующий() Тогда
										НайденаяПодписьЭлектронногоДокумента = ПодписьЭлектронногоДокумента;
										НайденаяПодписьЭлектронногоДокумента.Подпись = ВыборкаЗапросПодписьГруппы.Подпись;
										Прервать;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							Если НайденаяПодписьЭлектронногоДокумента = Неопределено Тогда
								РезультатПоискаСертификата = ПолучитьСертификатИзБазыДанныхПоСерийномуНомеру(лЭлектронныйДокументОбъект.Организация, лДанныеПоПодписиКонтрагента.СерийныйНомер, Истина, лДанныеПоПодписиКонтрагента);
								Если РезультатПоискаСертификата = Неопределено Тогда
									Продолжить;
								Иначе
									//НайденаяПодписьЭлектронногоДокумента = лЭлектронныйДокументОбъект.Подписи.Добавить();
									НайденаяПодписьЭлектронногоДокумента = лЭлектронныйДокументОбъект.Подписи.Вставить(ИндексНовойПодписи);
									НайденаяПодписьЭлектронногоДокумента.Подпись = РезультатПоискаСертификата.Ссылка;
								КонецЕсли;
							КонецЕсли;
							Если Не НайденаяПодписьЭлектронногоДокумента.Подписано Тогда
								НайденаяПодписьЭлектронногоДокумента.Подписано = Истина;
								НайденаяПодписьЭлектронногоДокумента.ДатаПодписания = лДанныеПоПодписиКонтрагента.ДатаПодписания;
								ПроверитьСкорректироватьПорядокПодписей = Истина;
							КонецЕсли;
						Иначе
							лНоваяСтрокаПодписиКонтрагента = лЭлектронныйДокументОбъект.ПодписиКонтрагента.Добавить();
							ЗаполнитьЗначенияСвойств(лНоваяСтрокаПодписиКонтрагента, лДанныеПоПодписиКонтрагента);
							тМассивПодписейКонтрагента.Добавить(лДанныеПоПодписиКонтрагента);
						КонецЕсли;
					КонецЦикла;
					Если ПроверитьСкорректироватьПорядокПодписей Тогда
						МаксПодписано = 0;
						Для Каждого ПодписьЭлектронногоДокумента Из лЭлектронныйДокументОбъект.Подписи Цикл
							Если ПодписьЭлектронногоДокумента.Подписано Тогда
								МаксПодписано = ПодписьЭлектронногоДокумента.НомерСтроки;
							КонецЕсли;
						КонецЦикла;
						МассивНеподписаныхСтрокДляПереноса = Новый Массив;
						Для Каждого ПодписьЭлектронногоДокумента Из лЭлектронныйДокументОбъект.Подписи Цикл
							Если не ПодписьЭлектронногоДокумента.Подписано Тогда
								Если ПодписьЭлектронногоДокумента.НомерСтроки < МаксПодписано Тогда
									МассивНеподписаныхСтрокДляПереноса.Добавить(ПодписьЭлектронногоДокумента);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						Для Каждого НеподписанаяСтрокаДляПереноса из МассивНеподписаныхСтрокДляПереноса Цикл
							ИндексСтроки = НеподписанаяСтрокаДляПереноса.НомерСтроки - 1;
							Смещение = МаксПодписано - НеподписанаяСтрокаДляПереноса.НомерСтроки;
							лЭлектронныйДокументОбъект.Подписи.Сдвинуть(ИндексСтроки, Смещение);
						КонецЦикла;
					КонецЕсли;
					лЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
					лЭлектронныйДокументОбъект.Записать();
				КонецЕсли;
				ЗафиксироватьСобытиеЭлектронногоДокумента(ВыборкаРезультатаЗапроса.ЭлектронныйДокумент, ВыборкаРезультатаЗапроса.Событие, ИнформацияОДокументе, ВыборкаРезультатаЗапроса.ДатаСобытия);
				
				тОрганизация = ВыборкаРезультатаЗапроса.Организация;
				тВидЭлектронногоДокумента = ВыборкаРезультатаЗапроса.ВидЭлектронногоДокумента;
				тВхИсх = ВыборкаРезультатаЗапроса.ВхИсх;
				тГдеСоздан = ВыборкаРезультатаЗапроса.ГдеСоздан;
				тЭлектронныйДокумент = ВыборкаРезультатаЗапроса.ЭлектронныйДокумент;
				тСостояние = ВыборкаРезультатаЗапроса.Состояние;
				тДокумент1С = ВыборкаРезультатаЗапроса.Документ1С;
				Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
					тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
				Иначе
					тМассивВложений = Новый Массив;
				КонецЕсли;
				ОбработатьСобытие_ПриПолученииЭлектронногоДокумента(тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписейКонтрагента, тДокумент1С, тМассивВложений);
				
				ОбработкаПослеПолученияМенеджерЗаписи = РегистрыСведений.скEDI_ОбработкаПослеПолучения.СоздатьМенеджерЗаписи();
				ОбработкаПослеПолученияМенеджерЗаписи.ЭлектронныйДокумент = ВыборкаРезультатаЗапроса.ЭлектронныйДокумент;
				ОбработкаПослеПолученияМенеджерЗаписи.ЕДРПОУ = ВыборкаРезультатаЗапроса.ЕДРПОУ;
				ОбработкаПослеПолученияМенеджерЗаписи.Дата = ВыборкаРезультатаЗапроса.Дата;
				ОбработкаПослеПолученияМенеджерЗаписи.Удалить();
			ИначеЕсли ВыборкаРезультатаЗапроса.Действие = "ЗаполнитьПодписантовВДокументеИКвитанции"
				или ВыборкаРезультатаЗапроса.Действие = "ЗаполнитьПодписантовВДокументеИКвитанцииНД" Тогда
				
				лМассивПодписейКонтрагента = ПолучитьМассивПодписейКонтрагентаИзПодписанногоЭлектронногоДокумента(ВыборкаРезультатаЗапроса.ТелоДокумента, ЖурналОперации);
				
				ОтражатьTSPСтатус = ВыборкаРезультатаЗапроса.Действие = "ЗаполнитьПодписантовВДокументеИКвитанции";
				ОтражатьOCSPСтатус = ОтражатьTSPСтатус;
				
				лКвитанцияОбъект = ВыборкаРезультатаЗапроса.Квитанция.ПолучитьОбъект();
				ТекстКвитанции = лКвитанцияОбъект.ТекстКвитанции;
				ТекстКвитанции = ТекстКвитанции + "
						|
						|Підписи:";
				ДополнитьОписаниеДаннымиПоПодписямКонтрагента(лМассивПодписейКонтрагента, ТекстКвитанции, ВыборкаРезультатаЗапроса.ЕДРПОУ, ОтражатьTSPСтатус, ОтражатьOCSPСтатус);
				лКвитанцияОбъект.ТекстКвитанции = ТекстКвитанции;
				лКвитанцияОбъект.ОбменДанными.Загрузка = Истина;
				лКвитанцияОбъект.Записать();
				
				лМассивДанныхПоПодписямКонтрагента = СформироватьМассивДанныхПоПодписямКонтрагента(лМассивПодписейКонтрагента);
				тМассивПодписейКонтрагента = Новый Массив;
				
				Если лМассивДанныхПоПодписямКонтрагента.Количество() > 0 Тогда
					лЭлектронныйДокументОбъект = ВыборкаРезультатаЗапроса.ЭлектронныйДокумент.ПолучитьОбъект();
					ПроверитьСкорректироватьПорядокПодписей = Ложь;
					Для Каждого лДанныеПоПодписиКонтрагента Из лМассивДанныхПоПодписямКонтрагента Цикл
						Если лДанныеПоПодписиКонтрагента.ЕДРПОУ = ВыборкаРезультатаЗапроса.ЕДРПОУ Тогда
							Если лЭлектронныйДокументОбъект.Подписи.Количество() = 0 Тогда
								ВидЭлектронногоДокумента = ВыборкаРезультатаЗапроса.ВидЭлектронногоДокумента;				
								Для Каждого СтрокаПодпись Из ВидЭлектронногоДокумента.Подписи Цикл
									НоваяСтрокаПодпись = лЭлектронныйДокументОбъект.Подписи.Добавить();
									НоваяСтрокаПодпись.Подпись = СтрокаПодпись.Подпись;
								КонецЦикла;
							КонецЕсли;
							
							НайденаяПодписьЭлектронногоДокумента = Неопределено;
							ИндексНовойПодписи = 0;
							Для Каждого ПодписьЭлектронногоДокумента Из лЭлектронныйДокументОбъект.Подписи Цикл
								Если ПодписьЭлектронногоДокумента.Подписано Тогда
									ИндексНовойПодписи = ПодписьЭлектронногоДокумента.НомерСтроки;
								КонецЕсли;
								Подпись = ПодписьЭлектронногоДокумента.Подпись;
								Если ТипЗнч(Подпись) = Тип("СправочникСсылка.скEDI_Подписи") Тогда
									Если Подпись.ДРФО = лДанныеПоПодписиКонтрагента.ДРФОПодписанта и Подпись.Роль = лДанныеПоПодписиКонтрагента.Роль Тогда
										НайденаяПодписьЭлектронногоДокумента = ПодписьЭлектронногоДокумента;
										Прервать;
									КонецЕсли;
								ИначеЕсли ТипЗнч(Подпись) = Тип("СправочникСсылка.скEDI_ГруппыПодписей") Тогда
									ЗапросПодписьГруппы = Новый Запрос;
									ЗапросПодписьГруппы.Текст = "ВЫБРАТЬ
									                            |	скEDI_ГруппыПодписей.Подпись КАК Подпись
									                            |ИЗ
									                            |	РегистрСведений.скEDI_ГруппыПодписей КАК скEDI_ГруппыПодписей
									                            |ГДЕ
									                            |	скEDI_ГруппыПодписей.ГруппаПодписи = &ГруппаПодписи
									                            |	И скEDI_ГруппыПодписей.Подпись.Владелец = &Организация
									                            |	И скEDI_ГруппыПодписей.Подпись.ДРФО = &ДРФО
									                            |	И скEDI_ГруппыПодписей.Подпись.Роль = &Роль";
									ЗапросПодписьГруппы.УстановитьПараметр("ГруппаПодписи", Подпись);
									ЗапросПодписьГруппы.УстановитьПараметр("Организация", ВыборкаРезультатаЗапроса.Организация);
									ЗапросПодписьГруппы.УстановитьПараметр("ДРФО", лДанныеПоПодписиКонтрагента.ДРФОПодписанта);
									ЗапросПодписьГруппы.УстановитьПараметр("Роль", лДанныеПоПодписиКонтрагента.Роль);
									ВыборкаЗапросПодписьГруппы = ЗапросПодписьГруппы.Выполнить().Выбрать();
									Если ВыборкаЗапросПодписьГруппы.Следующий() Тогда
										НайденаяПодписьЭлектронногоДокумента = ПодписьЭлектронногоДокумента;
										НайденаяПодписьЭлектронногоДокумента.Подпись = ВыборкаЗапросПодписьГруппы.Подпись;
										Прервать;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							Если НайденаяПодписьЭлектронногоДокумента = Неопределено Тогда
								РезультатПоискаСертификата = ПолучитьСертификатИзБазыДанныхПоСерийномуНомеру(лЭлектронныйДокументОбъект.Организация, лДанныеПоПодписиКонтрагента.СерийныйНомер, Истина, лДанныеПоПодписиКонтрагента);
								Если РезультатПоискаСертификата = Неопределено Тогда
									Продолжить;
								Иначе
									//НайденаяПодписьЭлектронногоДокумента = лЭлектронныйДокументОбъект.Подписи.Добавить();
									НайденаяПодписьЭлектронногоДокумента = лЭлектронныйДокументОбъект.Подписи.Вставить(ИндексНовойПодписи);
									НайденаяПодписьЭлектронногоДокумента.Подпись = РезультатПоискаСертификата.Ссылка;
								КонецЕсли;
							КонецЕсли;
							Если Не НайденаяПодписьЭлектронногоДокумента.Подписано Тогда
								НайденаяПодписьЭлектронногоДокумента.Подписано = Истина;
								НайденаяПодписьЭлектронногоДокумента.ДатаПодписания = лДанныеПоПодписиКонтрагента.ДатаПодписания;
								ПроверитьСкорректироватьПорядокПодписей = Истина;
							КонецЕсли;
						Иначе
							лНоваяСтрокаПодписиКонтрагента = лЭлектронныйДокументОбъект.ПодписиКонтрагента.Добавить();
							ЗаполнитьЗначенияСвойств(лНоваяСтрокаПодписиКонтрагента, лДанныеПоПодписиКонтрагента);
							тМассивПодписейКонтрагента.Добавить(лДанныеПоПодписиКонтрагента);
						КонецЕсли;
					КонецЦикла;
					Если ПроверитьСкорректироватьПорядокПодписей Тогда
						МаксПодписано = 0;
						Для Каждого ПодписьЭлектронногоДокумента Из лЭлектронныйДокументОбъект.Подписи Цикл
							Если ПодписьЭлектронногоДокумента.Подписано Тогда
								МаксПодписано = ПодписьЭлектронногоДокумента.НомерСтроки;
							КонецЕсли;
						КонецЦикла;
						МассивНеподписаныхСтрокДляПереноса = Новый Массив;
						Для Каждого ПодписьЭлектронногоДокумента Из лЭлектронныйДокументОбъект.Подписи Цикл
							Если не ПодписьЭлектронногоДокумента.Подписано Тогда
								Если ПодписьЭлектронногоДокумента.НомерСтроки < МаксПодписано Тогда
									МассивНеподписаныхСтрокДляПереноса.Добавить(ПодписьЭлектронногоДокумента);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						Для Каждого НеподписанаяСтрокаДляПереноса из МассивНеподписаныхСтрокДляПереноса Цикл
							ИндексСтроки = НеподписанаяСтрокаДляПереноса.НомерСтроки - 1;
							Смещение = МаксПодписано - НеподписанаяСтрокаДляПереноса.НомерСтроки;
							лЭлектронныйДокументОбъект.Подписи.Сдвинуть(ИндексСтроки, Смещение);
						КонецЦикла;
					КонецЕсли;
					лЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
					лЭлектронныйДокументОбъект.Записать();
				КонецЕсли;
				
				тОрганизация = ВыборкаРезультатаЗапроса.Организация;
				тВидЭлектронногоДокумента = ВыборкаРезультатаЗапроса.ВидЭлектронногоДокумента;
				тВхИсх = ВыборкаРезультатаЗапроса.ВхИсх;
				тГдеСоздан = ВыборкаРезультатаЗапроса.ГдеСоздан;
				тЭлектронныйДокумент = ВыборкаРезультатаЗапроса.ЭлектронныйДокумент;
				тСостояние = ВыборкаРезультатаЗапроса.Состояние;
				тДокумент1С = ВыборкаРезультатаЗапроса.Документ1С;
				тТипКвитанции = ВыборкаРезультатаЗапроса.ТипКвитанции;
				тКвитанция = ВыборкаРезультатаЗапроса.Квитанция;
				тКвитанцияВхИсх = ВыборкаРезультатаЗапроса.КвитанцияВхИсх;
				Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
					тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
				Иначе
					тМассивВложений = Новый Массив;
				КонецЕсли;
				ОбработатьСобытие_ПриПолученииКвитанции(тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписейКонтрагента, тДокумент1С, тМассивВложений, тКвитанция, тТипКвитанции, тКвитанцияВхИсх);
				
				ОбработкаПослеПолученияМенеджерЗаписи = РегистрыСведений.скEDI_ОбработкаПослеПолучения.СоздатьМенеджерЗаписи();
				ОбработкаПослеПолученияМенеджерЗаписи.ЭлектронныйДокумент = ВыборкаРезультатаЗапроса.ЭлектронныйДокумент;
				ОбработкаПослеПолученияМенеджерЗаписи.ЕДРПОУ = ВыборкаРезультатаЗапроса.ЕДРПОУ;
				ОбработкаПослеПолученияМенеджерЗаписи.Дата = ВыборкаРезультатаЗапроса.Дата;
				ОбработкаПослеПолученияМенеджерЗаписи.Удалить();
			КонецЕсли;
		Исключение
			ОписаниеОшибкиТекст = НСтр("ru = 'ЕГРПОУ'; uk = 'ЕДРПОУ'") + ": " + Строка(ВыборкаРезультатаЗапроса.ЕДРПОУ) + "; " + НСтр("ru = 'Документ'; uk = 'Документ'") + ": " + Строка(ВыборкаРезультатаЗапроса.ЭлектронныйДокумент) + "; "
			+ НСтр("ru = 'Ошибка при обработке документа после получения.'; uk = 'Помилка при обробці документа після отримання.'")
			+ ": " + ОписаниеОшибки();
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ОписаниеОшибкиТекст, , Ложь);
		КонецПопытки;
	КонецЦикла;
	Если Не ПустаяСтрока(ЖурналОперации) Тогда
		ЗаписьЖурналаРегистрации("скEDI_ОбработкаМассиваДокументовПослеПолучения" ,,,,ЖурналОперации);
		скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЖурналОперации);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьУстановкуДатыРегистрацииВЕРНН(Организация, ЖурналОперации) Экспорт
	//ЖурналОперации = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_УстановкаДатыРегистрацииВЕРНН_Выписка.Организация,
	               |	скEDI_УстановкаДатыРегистрацииВЕРНН_Выписка.ЭлектронныйДокументВыписка,
	               |	скEDI_УстановкаДатыРегистрацииВЕРНН_Выписка.ВхИсх,
	               |	скEDI_УстановкаДатыРегистрацииВЕРНН_Выписка.ТипДокумента,
	               |	скEDI_УстановкаДатыРегистрацииВЕРНН_Выписка.НомерДокумента,
	               |	скEDI_УстановкаДатыРегистрацииВЕРНН_Выписка.СпецРежимНалогообложения,
	               |	скEDI_УстановкаДатыРегистрацииВЕРНН_Выписка.Филиал,
	               |	скEDI_УстановкаДатыРегистрацииВЕРНН_Выписка.ДатаДокумента,
	               |	скEDI_УстановкаДатыРегистрацииВЕРНН_Выписка.ИННПродавца,
	               |	скEDI_УстановкаДатыРегистрацииВЕРНН_Выписка.ДатаРегистрацииДокумента,
	               |	скEDI_УстановкаДатыРегистрацииВЕРНН_Выписка.РегистрационныйНомерДокумента,
	               |	скEDI_УстановкаДатыРегистрацииВЕРНН_ЭлектронныйДокумент.ЭлектронныйДокумент
	               |ИЗ
	               |	РегистрСведений.скEDI_УстановкаДатыРегистрацииВЕРНН_Выписка КАК скEDI_УстановкаДатыРегистрацииВЕРНН_Выписка
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.скEDI_УстановкаДатыРегистрацииВЕРНН_ЭлектронныйДокумент КАК скEDI_УстановкаДатыРегистрацииВЕРНН_ЭлектронныйДокумент
	               |		ПО скEDI_УстановкаДатыРегистрацииВЕРНН_Выписка.Организация = скEDI_УстановкаДатыРегистрацииВЕРНН_ЭлектронныйДокумент.Организация
	               |			И скEDI_УстановкаДатыРегистрацииВЕРНН_Выписка.ВхИсх = скEDI_УстановкаДатыРегистрацииВЕРНН_ЭлектронныйДокумент.ВхИсх
	               |			И скEDI_УстановкаДатыРегистрацииВЕРНН_Выписка.ТипДокумента = скEDI_УстановкаДатыРегистрацииВЕРНН_ЭлектронныйДокумент.ТипДокумента
	               |			И скEDI_УстановкаДатыРегистрацииВЕРНН_Выписка.НомерДокумента = скEDI_УстановкаДатыРегистрацииВЕРНН_ЭлектронныйДокумент.НомерДокумента
	               |			И скEDI_УстановкаДатыРегистрацииВЕРНН_Выписка.Филиал = скEDI_УстановкаДатыРегистрацииВЕРНН_ЭлектронныйДокумент.КодФилиалаПродавца
	               |			И скEDI_УстановкаДатыРегистрацииВЕРНН_Выписка.ДатаДокумента = скEDI_УстановкаДатыРегистрацииВЕРНН_ЭлектронныйДокумент.ДатаДокумента
	               |			И скEDI_УстановкаДатыРегистрацииВЕРНН_Выписка.ИННПродавца = скEDI_УстановкаДатыРегистрацииВЕРНН_ЭлектронныйДокумент.ИННПродавца
	               |			И (скEDI_УстановкаДатыРегистрацииВЕРНН_Выписка.Организация = &Организация)
	               |			И (скEDI_УстановкаДатыРегистрацииВЕРНН_ЭлектронныйДокумент.Организация = &Организация)";
	Запрос.УстановитьПараметр("Организация", Организация);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		Попытка
			ЭлектронныйДокументОбъект = ВыборкаРезультатаЗапроса.ЭлектронныйДокумент.ПолучитьОбъект();
			ЭлектронныйДокументОбъект.ДатаРегистрацииВДФС = ВыборкаРезультатаЗапроса.ДатаРегистрацииДокумента;
			ЭлектронныйДокументОбъект.РегистрационныйНомерДФС = ВыборкаРезультатаЗапроса.РегистрационныйНомерДокумента;
			ЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
			ЭлектронныйДокументОбъект.Записать();
			
			Если ЗначениеЗаполнено(ЭлектронныйДокументОбъект.Документ1С) Тогда
				скEDI_НастройкиПодКонфигурациюНалоговыеДокументы.УстановитьОтметкуОРегистрацииНалоговогоДокумента(ЭлектронныйДокументОбъект, ЭлектронныйДокументОбъект.Документ1С);
			КонецЕсли;
			
			ДатыРегистрацииВЕРННМенеджерЗаписи = РегистрыСведений.скEDI_УстановкаДатыРегистрацииВЕРНН_ЭлектронныйДокумент.СоздатьМенеджерЗаписи();
			ДатыРегистрацииВЕРННМенеджерЗаписи.Организация = ВыборкаРезультатаЗапроса.Организация;
			ДатыРегистрацииВЕРННМенеджерЗаписи.ЭлектронныйДокумент = ВыборкаРезультатаЗапроса.ЭлектронныйДокумент;
			ДатыРегистрацииВЕРННМенеджерЗаписи.Удалить();
			
			ДатыРегистрацииВЕРННМенеджерЗаписи = РегистрыСведений.скEDI_УстановкаДатыРегистрацииВЕРНН_Выписка.СоздатьМенеджерЗаписи();
			ДатыРегистрацииВЕРННМенеджерЗаписи.Организация = ВыборкаРезультатаЗапроса.Организация;
			ДатыРегистрацииВЕРННМенеджерЗаписи.ЭлектронныйДокументВыписка = ВыборкаРезультатаЗапроса.ЭлектронныйДокументВыписка;
			ДатыРегистрацииВЕРННМенеджерЗаписи.ВхИсх = ВыборкаРезультатаЗапроса.ВхИсх;
			ДатыРегистрацииВЕРННМенеджерЗаписи.ТипДокумента = ВыборкаРезультатаЗапроса.ТипДокумента;
			ДатыРегистрацииВЕРННМенеджерЗаписи.НомерДокумента = ВыборкаРезультатаЗапроса.НомерДокумента;
			ДатыРегистрацииВЕРННМенеджерЗаписи.СпецРежимНалогообложения = ВыборкаРезультатаЗапроса.СпецРежимНалогообложения;
			ДатыРегистрацииВЕРННМенеджерЗаписи.Филиал = ВыборкаРезультатаЗапроса.Филиал;
			ДатыРегистрацииВЕРННМенеджерЗаписи.ДатаДокумента = ВыборкаРезультатаЗапроса.ДатаДокумента;
			ДатыРегистрацииВЕРННМенеджерЗаписи.ИННПродавца = ВыборкаРезультатаЗапроса.ИННПродавца;
			ДатыРегистрацииВЕРННМенеджерЗаписи.Удалить();
		Исключение
			//ОписаниеОшибкиТекст = "ЕДРПОУ: " + Строка(ВыборкаРезультатаЗапроса.ЕДРПОУ) + "; Документ: " + Строка(ВыборкаРезультатаЗапроса.ЭлектронныйДокумент) + "; "
			//+ НСтр("ru = 'Ошибка при обработке документа после получения.'; uk = 'Помилка при обробці документа після отримання.'")
			//+ ": " + ОписаниеОшибки();
			ОписаниеОшибкиТекст = ОписаниеОшибки();
			//ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ОписаниеОшибкиТекст, , Ложь);
		КонецПопытки;
	КонецЦикла;
	//Если Не ПустаяСтрока(ЖурналОперации) Тогда
	//	ЗаписьЖурналаРегистрации("скEDI_ОбработкаМассиваДокументовПослеПолучения" ,,,,ЖурналОперации);
	//	скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЖурналОперации);
	//КонецЕсли;
КонецПроцедуры

Функция ПолучитьИОбработатьВходящиеСообщенияПоЭлектроннымДокументам(Организация, ФормыВызвавшаяДанныйМетод, лНастройкиНеобходимыхПодписей) Экспорт
	
	лТребоватьОбновленияФормыВызвавшейДанныйМетод = Ложь;
	
	Если лНастройкиНеобходимыхПодписей <> Неопределено Тогда
		ВсеНастройкиПодписейШифрования = лНастройкиНеобходимыхПодписей.ТаблицаНеобходимыхПодписейШифрования;
		лТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ВсеНастройкиПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ВсеНастройкиПодписейШифрования, Тип("ТаблицаЗначений")), ВсеНастройкиПодписейШифрования);
		лНастройкиПодписиШифрования = лТаблицаНастроекПодписейШифрования.Найти(Организация, "ОрганизацияEDI");
		Если лНастройкиПодписиШифрования = Неопределено Тогда
			Сообщить(НСтр("ru = 'Не заполнена подпись шифрования организации'; uk = 'Не заповнено підпис шифрування по організації'") + ": " + Организация + ".");
			Возврат Ложь;
		КонецЕсли;
		
		
		// gov/rcv
		лПолучатьСледующуюПорциюСообщений = Организация.ОбменНалоговымиДокументамиСГФС;//Истина;
		Пока лПолучатьСледующуюПорциюСообщений Цикл
			лЖурналПолученияПорцииСообщений = "";
			лЖурналОбработкиПорцииСообщений = "";
			
			лРезультатПолученияПорцииСообщений = ПолучитьПорциюСообщенийПоЭлектроннымДокументамGov(Организация, лНастройкиНеобходимыхПодписей.ТаблицаНеобходимыхПодписейШифрования, лПолучатьСледующуюПорциюСообщений, лЖурналПолученияПорцииСообщений);
			Если лРезультатПолученияПорцииСообщений = Неопределено Тогда
				Сообщить(лЖурналПолученияПорцииСообщений);
				Прервать;
			Иначе
				Если лЖурналПолученияПорцииСообщений <> "" Тогда
					Сообщить(лЖурналПолученияПорцииСообщений);
				КонецЕсли;
				лМассивПолученныхКвитанцийGov = Неопределено;
				Если лРезультатПолученияПорцииСообщений.Свойство("МассивПолученныхКвитанций", лМассивПолученныхКвитанцийGov) Тогда
					Если ТипЗнч(лМассивПолученныхКвитанцийGov) = Тип("Массив") Тогда
						Если Не ОбработатьПорциюСообщенийПоЭлектроннымДокументамGov("kvt", лМассивПолученныхКвитанцийGov, Организация, лНастройкиНеобходимыхПодписей.ТаблицаНеобходимыхПодписейШифрования, лТребоватьОбновленияФормыВызвавшейДанныйМетод, лЖурналОбработкиПорцииСообщений) Тогда
							Сообщить(лЖурналОбработкиПорцииСообщений);
							Прервать;
						ИначеЕсли ЗначениеЗаполнено(лЖурналОбработкиПорцииСообщений) Тогда
							Сообщить(лЖурналОбработкиПорцииСообщений);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				лМассивПолученныхДокументовGov = Неопределено;
				Если лРезультатПолученияПорцииСообщений.Свойство("МассивПолученныхДокументов", лМассивПолученныхДокументовGov) Тогда
					Если ТипЗнч(лМассивПолученныхДокументовGov) = Тип("Массив") Тогда
						Если Не ОбработатьПорциюСообщенийПоЭлектроннымДокументамGov("doc", лМассивПолученныхДокументовGov, Организация, лНастройкиНеобходимыхПодписей.ТаблицаНеобходимыхПодписейШифрования, лТребоватьОбновленияФормыВызвавшейДанныйМетод, лЖурналОбработкиПорцииСообщений) Тогда
							Сообщить(лЖурналОбработкиПорцииСообщений);
							Прервать;
						ИначеЕсли ЗначениеЗаполнено(лЖурналОбработкиПорцииСообщений) Тогда
							Сообщить(лЖурналОбработкиПорцииСообщений);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если Организация.ОбменНалоговымиДокументамиСГФС Тогда
			ОбработатьУстановкуДатыРегистрацииВЕРНН(Организация, лЖурналОбработкиПорцииСообщений);
		КонецЕсли;
		
		// govrk/rcv
		лПолучатьСледующуюПорциюСообщений = Организация.ОбменНалоговымиДокументамиСГФС;//Истина;
		Пока лПолучатьСледующуюПорциюСообщений Цикл
			лЖурналПолученияПорцииСообщений = "";
			лЖурналОбработкиПорцииСообщений = "";
			
			лМассивПолученныхСообщений = ПолучитьПорциюСообщенийПоЭлектроннымДокументамGovRk(Организация, лНастройкиНеобходимыхПодписей.ТаблицаНеобходимыхПодписейШифрования, лПолучатьСледующуюПорциюСообщений, лЖурналПолученияПорцииСообщений);
			Если лМассивПолученныхСообщений = Неопределено Тогда
				Сообщить(лЖурналПолученияПорцииСообщений);
				Прервать;
			Иначе
				Если Не ОбработатьПорциюСообщенийПоЭлектроннымДокументамGovRk(лМассивПолученныхСообщений, Организация, лНастройкиНеобходимыхПодписей.ТаблицаНеобходимыхПодписейШифрования, лТребоватьОбновленияФормыВызвавшейДанныйМетод, лЖурналОбработкиПорцииСообщений) Тогда
					Сообщить(лЖурналОбработкиПорцииСообщений);
					Прервать;
				ИначеЕсли ЗначениеЗаполнено(лЖурналОбработкиПорцииСообщений) Тогда
					Сообщить(лЖурналОбработкиПорцииСообщений);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// ptn/rcv
		лПолучатьСледующуюПорциюСообщений = Истина;
		Пока лПолучатьСледующуюПорциюСообщений Цикл
			лЖурналПолученияПорцииСообщений = "";
			лЖурналОбработкиПорцииСообщений = "";
			
			РежимСинхронизации = Ложь;
			LastDocVer = Неопределено;
			лМассивПолученныхСообщений = ПолучитьПорциюСообщенийПоЭлектроннымДокументам(Организация, лНастройкиНеобходимыхПодписей.ТаблицаНеобходимыхПодписейШифрования, лПолучатьСледующуюПорциюСообщений, РежимСинхронизации, LastDocVer, лЖурналПолученияПорцииСообщений);
			Если лМассивПолученныхСообщений = Неопределено Тогда
				Сообщить(лЖурналПолученияПорцииСообщений);
				Прервать;
			Иначе
				Если Не ОбработатьПорциюСообщенийПоЭлектроннымДокументам(лМассивПолученныхСообщений, РежимСинхронизации, LastDocVer, Организация, лНастройкиНеобходимыхПодписей.ТаблицаНеобходимыхПодписейШифрования, лТребоватьОбновленияФормыВызвавшейДанныйМетод, лЖурналОбработкиПорцииСообщений) Тогда
					Сообщить(лЖурналОбработкиПорцииСообщений);
					Прервать;
				КонецЕсли;
				Если ЗначениеЗаполнено(лЖурналОбработкиПорцииСообщений) Тогда
					Сообщить(лЖурналОбработкиПорцииСообщений);
				КонецЕсли;
				ОбработатьЭлектронныеДокументыПослеПолучения_Фон(Организация.Код);
			КонецЕсли;
		КонецЦикла;
		
		//Если ПараметрыПолученияПорцииСообщений.Свойство("Организация") Тогда  
			ЗафиксироватьФактОбработкиВходящихСообщений(Организация);
		//КонецЕсли;
		
		Сообщить(НСтр("ru = 'Получение и обработка входящих сообщений завершены.'; uk = 'Отримання та обробка вхідних повідомлень завершена.'"));
	Иначе
		Сообщить(НСтр("ru = 'Настройки подписей шифрования отсутствуют. Операция получения сообщений по электронным документам отменена.'; uk = 'Налаштування підписів шифрування відсутні. Операцію отримання повідомлень по електронним документам відмінено.'"));
	КонецЕсли;
	
	Возврат лТребоватьОбновленияФормыВызвавшейДанныйМетод;
КонецФункции // ПолучитьИОбработатьВходящиеСообщенияПоЭлектроннымДокументам()

Функция ПолучитьНомерДокументаВПериоде(ВидЭлектронногоДокумента, Знач Период = '00010101000000') Экспорт
	Если Период = '00010101000000' Тогда
		Период = ТекущаяДата();
	КонецЕсли;
	Если ЗначениеЗаполнено(ВидЭлектронногоДокумента.ТипПериодаСчетчика) Тогда
		Период = НачалоМесяца(Период);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.скEDI_Счетчики");
		ЭлементБлокировки.УстановитьЗначение("Период", Период);
		ЭлементБлокировки.УстановитьЗначение("ВидЭлектронногоДокумента", ВидЭлектронногоДокумента);
		ЭлементБлокировки.УстановитьЗначение("ТипПериода", ВидЭлектронногоДокумента.ТипПериодаСчетчика);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Попытка
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
			Блокировка.Заблокировать();
			
			МенеджерЗаписи = РегистрыСведений.скEDI_Счетчики.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Период					= НачалоМесяца(Период);
			МенеджерЗаписи.ВидЭлектронногоДокумента = ВидЭлектронногоДокумента;
			МенеджерЗаписи.ТипПериода				= ВидЭлектронногоДокумента.ТипПериодаСчетчика;
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.Период					= НачалоМесяца(Период);
			МенеджерЗаписи.ВидЭлектронногоДокумента = ВидЭлектронногоДокумента;
			МенеджерЗаписи.ТипПериода				= ВидЭлектронногоДокумента.ТипПериодаСчетчика;
			ЗначениеСчетчика = МенеджерЗаписи.ЗначениеСчетчика + 1;
			МенеджерЗаписи.ЗначениеСчетчика			= ЗначениеСчетчика;
			МенеджерЗаписи.Записать(Истина);
			
			ЗафиксироватьТранзакцию();
			Возврат ЗначениеСчетчика;
		Исключение
			ОтменитьТранзакцию();
			Возврат "";
		КонецПопытки;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Функция ПолучитьНомерДокументаВПериодеДопДФС(Организация, ТипДокумента, Знач Период = '00010101000000') Экспорт
	Если Период = '00010101000000' Тогда
		Период = ТекущаяДата();
	КонецЕсли;
	Период = НачалоМесяца(Период);
	
	ТипПериодаСчетчика = Перечисления.скEDI_ТипПериодаСчетчика.Месяц;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.скEDI_СчетчикиДополнительныхЭлектронныхДокументовДФС");
	ЭлементБлокировки.УстановитьЗначение("Период", Период);
	ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
	ЭлементБлокировки.УстановитьЗначение("ТипПериода", ТипПериодаСчетчика);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Попытка
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.скEDI_СчетчикиДополнительныхЭлектронныхДокументовДФС.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период = НачалоМесяца(Период);
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.ТипДокумента = ТипДокумента;
		МенеджерЗаписи.ТипПериода = ТипПериодаСчетчика;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Период = НачалоМесяца(Период);
		МенеджерЗаписи.Организация = Организация;
		МенеджерЗаписи.ТипДокумента = ТипДокумента;
		МенеджерЗаписи.ТипПериода = ТипПериодаСчетчика;
		ЗначениеСчетчика = МенеджерЗаписи.ЗначениеСчетчика + 1;
		МенеджерЗаписи.ЗначениеСчетчика			= ЗначениеСчетчика;
		МенеджерЗаписи.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
		Возврат ЗначениеСчетчика;
	Исключение
		ОтменитьТранзакцию();
		Возврат "";
	КонецПопытки;
КонецФункции

Процедура скEDI_РегистрацияЭлектронногоДокументаПриЗаписи(Источник, Отказ) Экспорт
	скEDI_ОбщегоНазначенияПолныеПрава.скEDI_РегистрацияЭлектронногоДокументаПриЗаписи(Источник.Ссылка, Отказ);
КонецПроцедуры

Функция ПолучитьСодержимоеПоЭлектронномуДокументу(Организация, ЭлектронныйДокумент, СодержаниеЭлектронногоДокумента, ПолучатьОтображениеПДФ, ПолучатьОтображениеКартинка, ПолучатьОтображениеВложений, ОтображениеПДФ, ОтображениеМассивКартинок, ОтображениеМассивРазмеровКартинок, ДанныеДляОтображенияЭлектронногоДокументаСоответствие, ТекстОшибки = "") Экспорт
	ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
	
	лпПараметрыВыводаФаксимиле = Новый Структура;
	лпПараметрыВыводаФаксимиле.Вставить("MedocBody", ТелоДокумента);
	
	МассивДанныеПоПодписям = ПолучитьМассивДанныеПоПодписям(ЭлектронныйДокумент, Истина);
	лпПараметрыВыводаФаксимиле.Вставить("SignImages", МассивДанныеПоПодписям);
	лпВыводитьИнформациюОПодписантах = Организация.ВыводитьИнформациюОПодписантах;
	лпПараметрыВыводаФаксимиле.Вставить("PrintSignersInfo", лпВыводитьИнформациюОПодписантах);
	
	Если ЭлектронныйДокумент.СостояниеРегистрацияВДФС = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоПодтверждениеОтДФС") Тогда
		лпПараметрыВыводаФаксимиле.Вставить("StatusImage", 1);
	ИначеЕсли ЭлектронныйДокумент.СостояниеРегистрацияВДФС = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоОтклонениеОтДФС") Тогда
		лпПараметрыВыводаФаксимиле.Вставить("StatusImage", 2);
	ИначеЕсли ЭлектронныйДокумент.СостояниеРегистрацияВДФС = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоКвитанциюОтДФС_Предупреждение") Тогда
		лпПараметрыВыводаФаксимиле.Вставить("StatusImage", 3);
	ИначеЕсли ЭлектронныйДокумент.СостояниеРегистрацияВДФС = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПолученоКвитанциюОтДФС_Доставка") Тогда
		лпПараметрыВыводаФаксимиле.Вставить("StatusImage", 3);
	//ИначеЕсли СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученОтКонтрагентаЗарегистрированыйВЕРПН") Тогда
	//	лпПараметрыВыводаФаксимиле.Вставить("StatusImage", 1);
	//ИначеЕсли СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждениеОтДФС") Тогда
	//	лпПараметрыВыводаФаксимиле.Вставить("StatusImage", 1);
	//ИначеЕсли СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонениеОтДФС") Тогда
	//	лпПараметрыВыводаФаксимиле.Вставить("StatusImage", 2);
	//ИначеЕсли СостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоКвитанциюОтДФС") Тогда
	//	лпПараметрыВыводаФаксимиле.Вставить("StatusImage", 3);
	ИначеЕсли ЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоСообщениеОДоставке") Тогда
		лпПараметрыВыводаФаксимиле.Вставить("StatusImage", 4);
	ИначеЕсли ЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждение") Тогда
		лпПараметрыВыводаФаксимиле.Вставить("StatusImage", 5);
	ИначеЕсли ЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение") Тогда
		лпПараметрыВыводаФаксимиле.Вставить("StatusImage", 5);
	ИначеЕсли ЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонение") Тогда
		лпПараметрыВыводаФаксимиле.Вставить("StatusImage", 6);
	ИначеЕсли ЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоОтклонение") Тогда
		лпПараметрыВыводаФаксимиле.Вставить("StatusImage", 6);
	ИначеЕсли ЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтозванОтправителем") Тогда
		лпПараметрыВыводаФаксимиле.Вставить("StatusImage", 7);
	ИначеЕсли ЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван") Тогда
		лпПараметрыВыводаФаксимиле.Вставить("StatusImage", 7);
	ИначеЕсли ЭлектронныйДокумент.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Аннулировано") Тогда
		лпПараметрыВыводаФаксимиле.Вставить("StatusImage", 8);
	Иначе
		лпПараметрыВыводаФаксимиле.Вставить("StatusImage", 0);
	КонецЕсли;
	
	ДанныеДляОтображенияЭлектронногоДокументаСоответствие = Новый Соответствие;
	ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента = Новый Структура("НомерФайла, ИмяФайла, ЕстьПДФ, ЕстьКартинка, ОтображениеПДФ, ОтображениеМассивКартинок, ОтображениеМассивРазмеровКартинок", 0, "", Ложь, Ложь);
	ДанныеДляОтображенияЭлектронногоДокументаСоответствие.Вставить(0, ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента);
	
	ИспользоватьМетодОбработкиВложений = Ложь;
	Если ПолучатьОтображениеВложений Тогда
		НомерВложения = 0;
		МассивВложений = Новый Массив;
		Если ЗначениеЗаполнено(СодержаниеЭлектронногоДокумента.ВложениеДокумента1) Тогда
			НомерВложения = НомерВложения + 1;
			ЭлементМассиваВложений = Новый Структура;
			ЭлементМассиваВложений.Вставить("FileName", СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1);
			ЭлементМассиваВложений.Вставить("Body", СодержаниеЭлектронногоДокумента.ВложениеДокумента1);
			МассивВложений.Добавить(ЭлементМассиваВложений);
			ИспользоватьМетодОбработкиВложений = Истина;
			
			ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента = Новый Структура("НомерФайла, ИмяФайла, ЕстьПДФ, ЕстьКартинка, ОтображениеПДФ, ОтображениеМассивКартинок, ОтображениеМассивРазмеровКартинок", НомерВложения, СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1, Ложь, Ложь);
			ДанныеДляОтображенияЭлектронногоДокументаСоответствие.Вставить(НомерВложения, ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента);
		КонецЕсли;
		Если ЗначениеЗаполнено(СодержаниеЭлектронногоДокумента.ВложениеДокумента2) Тогда
			НомерВложения = НомерВложения + 1;
			ЭлементМассиваВложений = Новый Структура;
			ЭлементМассиваВложений.Вставить("FileName", СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2);
			ЭлементМассиваВложений.Вставить("Body", СодержаниеЭлектронногоДокумента.ВложениеДокумента2);
			МассивВложений.Добавить(ЭлементМассиваВложений);
			ИспользоватьМетодОбработкиВложений = Истина;
			
			ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента = Новый Структура("НомерФайла, ИмяФайла, ЕстьПДФ, ЕстьКартинка, ОтображениеПДФ, ОтображениеМассивКартинок, ОтображениеМассивРазмеровКартинок", НомерВложения, СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2, Ложь, Ложь);
			ДанныеДляОтображенияЭлектронногоДокументаСоответствие.Вставить(НомерВложения, ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента);
		КонецЕсли;
		Если ЗначениеЗаполнено(СодержаниеЭлектронногоДокумента.ВложениеДокумента3) Тогда
			НомерВложения = НомерВложения + 1;
			ЭлементМассиваВложений = Новый Структура;
			ЭлементМассиваВложений.Вставить("FileName", СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3);
			ЭлементМассиваВложений.Вставить("Body", СодержаниеЭлектронногоДокумента.ВложениеДокумента3);
			МассивВложений.Добавить(ЭлементМассиваВложений);
			ИспользоватьМетодОбработкиВложений = Истина;
			
			ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента = Новый Структура("НомерФайла, ИмяФайла, ЕстьПДФ, ЕстьКартинка, ОтображениеПДФ, ОтображениеМассивКартинок, ОтображениеМассивРазмеровКартинок", НомерВложения, СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3, Ложь, Ложь);
			ДанныеДляОтображенияЭлектронногоДокументаСоответствие.Вставить(НомерВложения, ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента);
		КонецЕсли;

		МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
		Если ТипЗнч(МассивВложенийДокумента4) = Тип("Массив") или ТипЗнч(МассивВложенийДокумента4) = Тип("ФиксированныйМассив") Тогда
			Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокумента4 Цикл
				Если ЗначениеЗаполнено(ЭлементМассиваВложенийДокумента4.ВложениеДокумента) Тогда
					НомерВложения = НомерВложения + 1;
					ЭлементМассиваВложений = Новый Структура;
					ЭлементМассиваВложений.Вставить("FileName", ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента);
					ЭлементМассиваВложений.Вставить("Body", ЭлементМассиваВложенийДокумента4.ВложениеДокумента);
					МассивВложений.Добавить(ЭлементМассиваВложений);
					ИспользоватьМетодОбработкиВложений = Истина;
					
					ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента = Новый Структура("НомерФайла, ИмяФайла, ЕстьПДФ, ЕстьКартинка, ОтображениеПДФ, ОтображениеМассивКартинок, ОтображениеМассивРазмеровКартинок", НомерВложения, ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента, Ложь, Ложь);
					ДанныеДляОтображенияЭлектронногоДокументаСоответствие.Вставить(НомерВложения, ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если ИспользоватьМетодОбработкиВложений Тогда
			лпПараметрыВыводаФаксимиле.Вставить("AttachmentBody", МассивВложений);
		КонецЕсли;
	КонецЕсли;
	
	
	ТекстОшибки = "";
	ОтображениеПДФ = "";
	Если ПолучатьОтображениеПДФ Тогда
		Если ИспользоватьМетодОбработкиВложений Тогда
			ОтветEDIПровайдера = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/printatt", лпПараметрыВыводаФаксимиле, Ложь);
		Иначе
			ОтветEDIПровайдера = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/print", лпПараметрыВыводаФаксимиле, Ложь);
		КонецЕсли;
		СтрокаBase64_ДополненаФаксимиле = "";
		Если ОтветEDIПровайдера.Свойство("Pdf", СтрокаBase64_ДополненаФаксимиле) Тогда
			Если ЗначениеЗаполнено(СтрокаBase64_ДополненаФаксимиле) Тогда
				ОтображениеПДФ = СтрокаBase64_ДополненаФаксимиле;
				ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента = ДанныеДляОтображенияЭлектронногоДокументаСоответствие.Получить(0);
				Если ТипЗнч(ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента) = Тип("Структура") Тогда
					ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента.ЕстьПДФ = Истина;
					ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента.ОтображениеПДФ = СтрокаBase64_ДополненаФаксимиле;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		AttachmentBody = Неопределено;
		Если ОтветEDIПровайдера.Свойство("AttachmentBody", AttachmentBody) Тогда
			Если ТипЗнч(AttachmentBody) = Тип("Массив") Тогда
				НомерВложения = 0;
				Для Каждого ЭлементМассиваAttachmentBody Из AttachmentBody Цикл
					НомерВложения = НомерВложения + 1;
					
					ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента = Неопределено;
					ИмяФайла = Неопределено;
					Если ЭлементМассиваAttachmentBody.Свойство("FileName", ИмяФайла) Тогда
						Для Каждого ЭлементСоответствия Из ДанныеДляОтображенияЭлектронногоДокументаСоответствие Цикл
							ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента = ЭлементСоответствия.Значение;
							Если ВРег(ЭлементСоответствия.Значение.ИмяФайла) = ВРег(ИмяФайла) Тогда
								ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента = ЭлементСоответствия.Значение;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					Иначе
						ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента = ДанныеДляОтображенияЭлектронногоДокументаСоответствие.Получить(НомерВложения);
					КонецЕсли;
					Если ТипЗнч(ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента) = Тип("Структура") Тогда
						ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента.ОтображениеПДФ = ЭлементМассиваAttachmentBody.Body;
						ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента.ЕстьПДФ = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОтображениеМассивКартинок = Новый Массив;
	Если ПолучатьОтображениеКартинка Тогда
		Если ИспользоватьМетодОбработкиВложений Тогда
			ОтветEDIПровайдера = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/drawatt", лпПараметрыВыводаФаксимиле, Ложь);
		Иначе
			ОтветEDIПровайдера = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/draw", лпПараметрыВыводаФаксимиле, Ложь);
		КонецЕсли;
		Если ЗначениеЗаполнено(ОтветEDIПровайдера.Message) Тогда
			ТекстОшибки = ОтветEDIПровайдера.Message;
		КонецЕсли;
		МассивСтрокBase64_ДополненаФаксимиле = Неопределено;
		СтрокаBase64_ДополненаФаксимиле = "";	
		Если ОтветEDIПровайдера.Свойство("Images", МассивСтрокBase64_ДополненаФаксимиле) Тогда
			Если ТипЗнч(МассивСтрокBase64_ДополненаФаксимиле) = Тип("Массив") Тогда
				Для Каждого СтрокаBase64_ДополненаФаксимиле Из МассивСтрокBase64_ДополненаФаксимиле Цикл
					ОтображениеМассивКартинок.Добавить(СтрокаBase64_ДополненаФаксимиле);
				КонецЦикла;
				МассивDimensions = Неопределено;
				Если ОтветEDIПровайдера.Свойство("Dimensions", МассивDimensions) Тогда
					Если ТипЗнч(МассивDimensions) = Тип("Массив") Тогда
						ОтображениеМассивРазмеровКартинок = Новый Массив;
						Для Каждого ЭлементМассиваDimensions Из МассивDimensions Цикл
							ЭлементМассиваРазмеровКартинок = Новый Структура;
							ЭлементМассиваРазмеровКартинок.Вставить("Высота", ЭлементМассиваDimensions.Height);
							ЭлементМассиваРазмеровКартинок.Вставить("Ширина", ЭлементМассиваDimensions.Width);
							ОтображениеМассивРазмеровКартинок.Добавить(ЭлементМассиваРазмеровКартинок);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента = ДанныеДляОтображенияЭлектронногоДокументаСоответствие.Получить(0);
				Если ТипЗнч(ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента) = Тип("Структура") Тогда
					ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента.ЕстьКартинка = Истина;
					ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента.ОтображениеМассивКартинок = ОтображениеМассивКартинок;
					ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента.ОтображениеМассивРазмеровКартинок = ОтображениеМассивРазмеровКартинок;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ОтветEDIПровайдера.Свойство("Image", СтрокаBase64_ДополненаФаксимиле) Тогда
			Если ЗначениеЗаполнено(СтрокаBase64_ДополненаФаксимиле) Тогда
				ОтображениеМассивКартинок.Добавить(СтрокаBase64_ДополненаФаксимиле);
				
				ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента = ДанныеДляОтображенияЭлектронногоДокументаСоответствие.Получить(0);
				Если ТипЗнч(ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента) = Тип("Структура") Тогда
					ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента.ЕстьКартинка = Истина;
					ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента.ОтображениеМассивКартинок = ОтображениеМассивКартинок;
					ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента.ОтображениеМассивРазмеровКартинок = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		AttachmentBody = Неопределено;
		Если ОтветEDIПровайдера.Свойство("AttachmentBody", AttachmentBody) Тогда
			Если ТипЗнч(AttachmentBody) = Тип("Массив") Тогда
				НомерВложения = 0;
				Для Каждого ЭлементМассиваAttachmentBody Из AttachmentBody Цикл
					НомерВложения = НомерВложения + 1;
					
					ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента = Неопределено;
					ИмяФайла = Неопределено;
					Если ЭлементМассиваAttachmentBody.Свойство("FileName", ИмяФайла) Тогда
						Для Каждого ЭлементСоответствия Из ДанныеДляОтображенияЭлектронногоДокументаСоответствие Цикл
							ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента = ЭлементСоответствия.Значение;
							Если ВРег(ЭлементСоответствия.Значение.ИмяФайла) = ВРег(ИмяФайла) Тогда
								ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента = ЭлементСоответствия.Значение;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					Иначе
						ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента = ДанныеДляОтображенияЭлектронногоДокументаСоответствие.Получить(НомерВложения);
					КонецЕсли;
					Если ТипЗнч(ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента) = Тип("Структура") Тогда
						ОтображениеВложенияМассивКартинок = Новый Массив;
						ОтображениеВложенияМассивРазмеровКартинок = Неопределено;
						МассивСтрокBase64_ДополненаФаксимиле = Неопределено;
						Если ЭлементМассиваAttachmentBody.Свойство("Images", МассивСтрокBase64_ДополненаФаксимиле) Тогда
							Если ТипЗнч(МассивСтрокBase64_ДополненаФаксимиле) = Тип("Массив") Тогда
								Для Каждого СтрокаBase64_ДополненаФаксимиле Из МассивСтрокBase64_ДополненаФаксимиле Цикл
									ОтображениеВложенияМассивКартинок.Добавить(СтрокаBase64_ДополненаФаксимиле);
								КонецЦикла;
								МассивDimensions = Неопределено;
								Если ЭлементМассиваAttachmentBody.Свойство("Dimensions", МассивDimensions) Тогда
									Если ТипЗнч(МассивDimensions) = Тип("Массив") Тогда
										ОтображениеВложенияМассивРазмеровКартинок = Новый Массив;
										Для Каждого ЭлементМассиваDimensions Из МассивDimensions Цикл
											ЭлементМассиваРазмеровКартинок = Новый Структура;
											ЭлементМассиваРазмеровКартинок.Вставить("Высота", ЭлементМассиваDimensions.Height);
											ЭлементМассиваРазмеровКартинок.Вставить("Ширина", ЭлементМассиваDimensions.Width);
											ОтображениеВложенияМассивРазмеровКартинок.Добавить(ЭлементМассиваРазмеровКартинок);
										КонецЦикла;
									КонецЕсли;
								КонецЕсли;
								
								ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента.ЕстьКартинка = Истина;
								ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента.ОтображениеМассивКартинок = ОтображениеВложенияМассивКартинок;
								ЭлементСоответствияДанныхДляОтображенияЭлектронногоДокумента.ОтображениеМассивРазмеровКартинок = ОтображениеВложенияМассивРазмеровКартинок;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Процедура ОтправитьНаДоподписаниеЭлектронныеДокументыСервер(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоУспешноОбработаных) Экспорт
	
	//ДанныеДокумента, НастройкиНеобходимыхПодписей, ЖурналОперации = ""
	
	лРезультатНаложенияПредыдущейПоПорядкуПодписи = Неопределено;
	
	//лНетОшибокВПроцессеПодписания = Истина;
	
	ЖурналОперации           = "";//ДополнительныеПараметры.ЖурналОперации;
	ТаблицаНастроекПодписей = ДополнительныеПараметры.НастройкиНеобходимыхПодписей;
	ТаблицаНастроекПодписей = ?(ТипЗнч(ТаблицаНастроекПодписей) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписей, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписей);
	
	ТаблицаНастроекПодписейШифрования = ДополнительныеПараметры.НастройкиПодписейШифрования;
	ТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ТаблицаНастроекПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписейШифрования, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписейШифрования);
	
	МожноОтправитьТолькоСсылку = Ложь;
	Если ДополнительныеПараметры.Свойство("МожноОтправитьТолькоСсылку") Тогда
		МожноОтправитьТолькоСсылку = ДополнительныеПараметры.МожноОтправитьТолькоСсылку;
	КонецЕсли;
	
	Для Каждого ДанныеДокумента Из ТаблицаДанныхДокументов Цикл 
		Если ДанныеДокумента.ЕстьОшибки Тогда
			Продолжить;
		КонецЕсли;
		лОрганизацияEDI = ДанныеДокумента.Организация;//ПолучитьОрганизациюEDIИзДанныхДокумента(ДанныеДокумента);	
		
		ДатаСозданияДокумента = Неопределено;
		ТелоДокумента = "";
		ИзображениеДокумента = "";
		ВложениеДокумента1 = "";
		ВложениеДокументаБезПодписи1 = "";
		ИмяФайлаВложениеДокумента1 = "";
		ВложениеДокументаФайл1 = Неопределено;
		ВложениеДокумента2 = "";
		ВложениеДокументаБезПодписи2 = "";
		ИмяФайлаВложениеДокумента2 = "";
		ВложениеДокументаФайл2 = Неопределено;
		ВложениеДокумента3 = "";
		ВложениеДокументаБезПодписи3 = "";
		ИмяФайлаВложениеДокумента3 = "";
		ВложениеДокументаФайл3 = Неопределено;
		МассивВложенийДокумента4 = Неопределено;
		МассивВложенийДокументаБезПодписи4 = Неопределено;
		СодержаниеЭлектронногоДокументаНомерВерсии = Неопределено;
		
		ПараметрыСобытий = Неопределено;
		
		СтруктураДанныхКонтрагента = Неопределено;
		СпособОтправки = Неопределено;
		//ВариантОтправки = 0;
		//ПодписыватьКвитанциюВсемиПодписями = Ложь;
		//Квитанция = ПредопределенноеЗначение("Документ.скEDI_Квитанция.ПустаяСсылка");
		//КвитанцияТело = "";
		//КвитанцияТекст = "";
		//ТипКвитанции = Неопределено;
		//ВидКвитанции = Неопределено;
		//ЭтоИсходящийДокумент = Ложь;
		ОтражатьTSPСтатус = Истина;
		ОтражатьOCSPСтатус = Истина;
		OnlyHref = Ложь;
		
		//Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") 
		//или ДанныеДокумента.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
			Если ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент")
			или ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента")
			или ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями") Тогда
				СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
				//ВариантОтправки = 1;// 1 - ПервичныйДокумент Контрагенту
				//ЭтоИсходящийДокумент = Истина;
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С")
				или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПустаяСсылка") Тогда
					ЭлектронныйДокумент = ПредопределенноеЗначение("Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка");
					ДатаСозданияДокумента = ДанныеДокумента.ДатаСозданияДокумента;
					ТелоДокумента = ДанныеДокумента.ТелоДокумента;
					ИзображениеДокумента = ДанныеДокумента.ИзображениеДокумента;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					ПараметрыСобытий.МассивВложений = Новый Массив;
					
					ВложениеДокумента1 = ДанныеДокумента.ВложениеДокумента1;
					ВложениеДокументаБезПодписи1 = ДанныеДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = ДанныеДокумента.ИмяФайлаВложениеДокумента1;
					Попытка
						ВложениеДокументаФайл1 = ДанныеДокумента.ВложениеДокументаФайл1;
					Исключение
						ВложениеДокументаФайл1 = Неопределено;
					КонецПопытки;
					Если ЗначениеЗаполнено(ВложениеДокумента1) Тогда
						Вложение = Новый Структура("ИмяФайла, СтрокаBase64, Файл", ИмяФайлаВложениеДокумента1, ВложениеДокументаБезПодписи1, ВложениеДокументаФайл1);
						ПараметрыСобытий.МассивВложений.Добавить(Вложение);
					КонецЕсли;
					ВложениеДокумента2 = ДанныеДокумента.ВложениеДокумента2;
					ВложениеДокументаБезПодписи2 = ДанныеДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = ДанныеДокумента.ИмяФайлаВложениеДокумента2;
					Попытка
						ВложениеДокументаФайл2 = ДанныеДокумента.ВложениеДокументаФайл2;
					Исключение
						ВложениеДокументаФайл2 = Неопределено;
					КонецПопытки;
					Если ЗначениеЗаполнено(ВложениеДокумента2) Тогда
						Вложение = Новый Структура("ИмяФайла, СтрокаBase64, Файл", ИмяФайлаВложениеДокумента2, ВложениеДокументаБезПодписи2, ВложениеДокументаФайл2);
						ПараметрыСобытий.МассивВложений.Добавить(Вложение);
					КонецЕсли;
					ВложениеДокумента3 = ДанныеДокумента.ВложениеДокумента3;
					ВложениеДокументаБезПодписи3 = ДанныеДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = ДанныеДокумента.ИмяФайлаВложениеДокумента3;
					Попытка
						ВложениеДокументаФайл3 = ДанныеДокумента.ВложениеДокументаФайл3;
					Исключение
						ВложениеДокументаФайл3 = Неопределено;
					КонецПопытки;
					Если ЗначениеЗаполнено(ВложениеДокумента3) Тогда
						Вложение = Новый Структура("ИмяФайла, СтрокаBase64, Файл", ИмяФайлаВложениеДокумента3, ВложениеДокументаБезПодписи3, ВложениеДокументаФайл3);
						ПараметрыСобытий.МассивВложений.Добавить(Вложение);
					КонецЕсли;
					МассивВложенийДокумента4 = ДанныеДокумента.МассивВложенийДокумента4;
					МассивВложенийДокументаБезПодписи4 = ДанныеДокумента.МассивВложенийДокумента4;
					Если ТипЗнч(МассивВложенийДокументаБезПодписи4) = Тип("Массив") Тогда
						Для Каждого ЭлементМассиваВложенийДокументаБезПодписи4 из МассивВложенийДокументаБезПодписи4 Цикл
							Вложение = Новый Структура("ИмяФайла, СтрокаBase64, Файл");
							Вложение.ИмяФайла = ЭлементМассиваВложенийДокументаБезПодписи4.ИмяФайлаВложениеДокумента;
							Вложение.СтрокаBase64 = ЭлементМассиваВложенийДокументаБезПодписи4.ВложениеДокумента;
							Вложение.Файл = ЭлементМассиваВложенийДокументаБезПодписи4.ВложениеДокументаФайл;
							ПараметрыСобытий.МассивВложений.Добавить(Вложение);
						КонецЦикла;
					КонецЕсли;
				
					ОшибкаПараметровСоздания = "";
					Если не ПроверитьПараметрыСозданияЭлектронногоДокумента(ДанныеДокумента.ПараметрыСозданияДокументов, ОшибкаПараметровСоздания) Тогда
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.Документ1С + ": " + ОшибкаПараметровСоздания);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПараметровСоздания);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					КонецЕсли;
				ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан") Тогда
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ДатаСозданияДокумента = ДанныеДокумента.ДатаСозданияДокумента;
					ТелоДокумента = ДанныеДокумента.ТелоДокумента;
					ИзображениеДокумента = ДанныеДокумента.ИзображениеДокумента;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
					Замечание = "";
					ПолучитьВложенияЭлектронногоДокумента(ЭлектронныйДокумент, ВложениеДокумента1, ИмяФайлаВложениеДокумента1, ВложениеДокумента2, ИмяФайлаВложениеДокумента2, ВложениеДокумента3, ИмяФайлаВложениеДокумента3, МассивВложенийДокумента4, Замечание);
					Если Замечание <> "" Тогда
						ДанныеДокумента.ЕстьЗамечания = Истина;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.Документ1С + ": " + Замечание);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
				ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Получен")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьБухгалтеру")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьДиректору")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьПечатью") Тогда
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					СодержаниеЭлектронногоДокументаНомерВерсии = СодержаниеЭлектронногоДокумента.НомерВерсии;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		//Иначе
		//	Продолжить;
		//КонецЕсли;
			
		
		
		лНастройкиПодписиШифрованияДляТекущейОрганизации = ТаблицаНастроекПодписейШифрования.Найти(лОрганизацияEDI, "ОрганизацияEDI");
		
		Если лНастройкиПодписиШифрованияДляТекущейОрганизации = Неопределено Тогда		
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не найдены настройки подписи шифрования Организации: '; uk = 'Не знайдені підписи шифрування по Організації: '") + лОрганизацияEDI + ".");
			ДанныеДокумента.ЕстьОшибки = Истина;			
		КонецЕсли;
		
		Если СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ПустаяСсылка") Тогда
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не указан способ отправки'; uk = 'Не вказано спосіб відправки'") + ": " + лОрганизацияEDI + ".");
			ДанныеДокумента.ЕстьОшибки = Истина;			
		КонецЕсли;
		
		
		лИмяФайла = "";
		лИмяФайлаКвитанции = "";
		лИмяФайлаДФС = "";
		лСсылкаНаДокумент = "";
		лDocVer = 0;
		ПараметрыСозданияДокументов = Неопределено;
		ОбновитьМаршрут = Ложь;
		ОбновитьМаршрутНомерВМаршруте = -1;
		
		//Если ВариантОтправки = 1 Тогда // 1 - ПервичныйДокумент Контрагенту
			Если СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО") Тогда
				СтрокаПодключенияEDI = Неопределено;
				СерверEDI = Неопределено;
				ПортEDI = Неопределено;
				
				лПараметрыОтправкиДокумента = Новый Структура;
				лПараметрыОтправкиДокумента.Вставить("Edrpou",    лОрганизацияEDI.Код);
				лПараметрыОтправкиДокумента.Вставить("Dept",      лОрганизацияEDI.Филиал);
				//лПараметрыОтправкиДокумента.Вставить("Name",      лОрганизацияEDI.Наименование);
				
				Если ЗначениеЗаполнено(лОрганизацияEDI.ИдентификаторПрограммы) Тогда
					лПараметрыОтправкиДокумента.Вставить("PrgId", лОрганизацияEDI.ИдентификаторПрограммы);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
					Если ЗначениеЗаполнено(ЭлектронныйДокумент.ИмяФайла) Тогда
						лПараметрыОтправкиДокумента.Вставить("Filename", ЭлектронныйДокумент.ИмяФайла);
					КонецЕсли;
				КонецЕсли;
				ТекСтрокаПодключенияEDI = Неопределено;
				ТекСерверEDI = Неопределено;
				ТекПортEDI = Неопределено;
				ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиДокумента, лНастройкиПодписиШифрованияДляТекущейОрганизации, ТекСтрокаПодключенияEDI, ТекСерверEDI, ТекПортEDI);
				
				Если ЗначениеЗаполнено(ТекСтрокаПодключенияEDI) или ЗначениеЗаполнено(ТекСерверEDI) или ЗначениеЗаполнено(ТекПортEDI) Тогда
					Если ЗначениеЗаполнено(СтрокаПодключенияEDI) или ЗначениеЗаполнено(СерверEDI) или ЗначениеЗаполнено(ПортEDI) Тогда
						Если (СтрокаПодключенияEDI<>ТекСтрокаПодключенияEDI) или (СерверEDI<>ТекСерверEDI) или (ПортEDI<>ТекПортEDI) Тогда
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Неоднозначно указано адрес АПИ.'; uk = 'Неоднозначно вказано адресу АПІ.'"));
							ДанныеДокумента.ЕстьОшибки = Истина;			
							Продолжить;
						КонецЕсли;
					Иначе
						СтрокаПодключенияEDI = ТекСтрокаПодключенияEDI;
						СерверEDI = ТекСерверEDI;
						ПортEDI = ТекПортEDI;
					КонецЕсли;
				КонецЕсли;
				
				лПараметрыОтправкиДокумента.Вставить("MedocBody", ТелоДокумента);
				
				Если ЗначениеЗаполнено(ИзображениеДокумента) Тогда				
					лПараметрыПередаваемогоPDFПредставленияДокумента = Новый Структура;
					лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("FileName", "Form.pdf");
					лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("Body", ИзображениеДокумента);
					лПараметрыОтправкиДокумента.Вставить("ImageBody", лПараметрыПередаваемогоPDFПредставленияДокумента);
				КонецЕсли;
				
				МассивВложений = Новый Массив;
				ИндексВложения1 = Неопределено;
				ИндексВложения2 = Неопределено;
				ИндексВложения3 = Неопределено;
				ИндексВложения4 = Неопределено;
				
				Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента1) Тогда
					МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента1, ВложениеДокумента1));
					ИндексВложения1 = МассивВложений.ВГраница();
				КонецЕсли;
				Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента2) Тогда
					МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента2, ВложениеДокумента2));
					ИндексВложения2 = МассивВложений.ВГраница();
				КонецЕсли;
				Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента3) Тогда
					МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента3, ВложениеДокумента3));
					ИндексВложения3 = МассивВложений.ВГраница();
				КонецЕсли;
				Если ТипЗнч(МассивВложенийДокумента4) = Тип("Массив") или ТипЗнч(МассивВложенийДокумента4) = Тип("ФиксированныйМассив") Тогда
					Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокумента4 Цикл
						МассивВложений.Добавить(Новый Структура("FileName,Body", ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента, ЭлементМассиваВложенийДокумента4.ВложениеДокумента));
						Если не ЗначениеЗаполнено(ИндексВложения4) Тогда
							ИндексВложения4 = МассивВложений.ВГраница();
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если МассивВложений.Количество() > 0 Тогда
					лПараметрыОтправкиДокумента.Вставить("AttachmentBody", МассивВложений);
				КонецЕсли;
				
				
				МассивДанныеПоПодписям = ПолучитьМассивДанныеПоПодписям(ДанныеДокумента.ЭлектронныйДокумент);
				МассивСертификатовКлючейПаролей = Новый Массив;
				ТипПодписания = "ptn";	
					
				СписокНаложенныхНаДокументПодписей = Новый СписокЗначений;
				МассивНаложенныхНаДокументПодписейСсылки = Новый Массив;
				ПодписиПолученыИзЭлектронногоДокумента = Ложь;
				ТаблицаНакладываемыхНаДокументПодписей = Неопределено;
				
				ДокументБудетПодписанПолностью = Ложь;
				МассивПодписантов = Новый Массив;
				МассивNotifyContacts = Новый Массив;
				МассивОтправкаСсылкиНаДокумент = Новый Массив;
				
				Если ПолучитьТаблицуНеобходимыхПодписейДляДокумента(ТаблицаНакладываемыхНаДокументПодписей, ДанныеДокумента.ЭлектронныйДокумент, ДанныеДокумента, ПодписиПолученыИзЭлектронногоДокумента, ЖурналОперации) Тогда
					ТаблицаПодписейПоДокументу = Неопределено;
					Если не ПодписиПолученыИзЭлектронногоДокумента Тогда
						ТаблицаПодписейПоДокументу = ТаблицаНакладываемыхНаДокументПодписей.Скопировать();
					КонецЕсли;
					РольСледующейПодписи = Неопределено;
					МассивПодписейДляОбработкиСобытий = Неопределено;

					ДокументБудетПодписанПолностью = ПодготовитьТаблицуПодписейДляОтправкиНаДоподписание(ТаблицаНакладываемыхНаДокументПодписей, ТаблицаНастроекПодписей, ДанныеДокумента.Организация, РольСледующейПодписи, МассивПодписейДляОбработкиСобытий);
					
					Для Каждого СтрокаТаблицыНакладываемыхНаДокументПодписей из ТаблицаНакладываемыхНаДокументПодписей Цикл
						ЭлементМассиваПодписантов = Новый Структура;
						МассивДРФО = Новый Массив;
						
						ТекПодпись = СтрокаТаблицыНакладываемыхНаДокументПодписей.ВыбранаяПодпись;
						ПодписьРоль = ТекПодпись.Роль;
						КодРоли = ПолучитьКодПодписиПоРоли(ПодписьРоль);
						ЭлементМассиваПодписантов.Вставить("SignState", КодРоли);
						Если ПодписьРоль = Перечисления.скEDI_РолиПодписей.ПодписьДиректора
							или ПодписьРоль = Перечисления.скEDI_РолиПодписей.ПодписьБухгалтера
							или ПодписьРоль = Перечисления.скEDI_РолиПодписей.ПодписьОтветственногоЛица
							или ПодписьРоль = Перечисления.скEDI_РолиПодписей.ПодписьФизическогоЛица Тогда
							
							МассивДРФО.Добавить(ТекПодпись.ДРФО);
						КонецЕсли;
						ЭлементМассиваПодписантов.Вставить("Drfo", МассивДРФО);
						МассивПодписантов.Добавить(ЭлементМассиваПодписантов);
						
						Запрос = Новый Запрос;
						Запрос.Текст = 
							"ВЫБРАТЬ
							|	скEDI_Факсимиле.Подпись КАК Подпись,
							|	скEDI_Факсимиле.Факсимиле КАК Факсимиле
							|ИЗ
							|	РегистрСведений.скEDI_Факсимиле КАК скEDI_Факсимиле
							|ГДЕ
							|	скEDI_Факсимиле.Подпись = &Подпись";
						Запрос.УстановитьПараметр("Подпись", ТекПодпись);
						ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
						Если ВыборкаРезультатаЗапроса.Следующий() Тогда
							ТелоФаксимиле_ХранилищеЗначений = ВыборкаРезультатаЗапроса.Факсимиле.Получить();
							Если ЗначениеЗаполнено(ТелоФаксимиле_ХранилищеЗначений) Тогда
								ЭлементМассиваДанныеПоПодписям = Новый Структура;
								ТелоФаксимиле = Base64Строка(ТелоФаксимиле_ХранилищеЗначений);
								ТекКодУровняПодписи = ПолучитьКодПодписиПоРоли(ТекПодпись.Роль);
								ЭлементМассиваДанныеПоПодписям.Вставить("SignState", ТекКодУровняПодписи);
								Если ЗначениеЗаполнено(ТекПодпись.ДРФО) Тогда
									ТекДРФО = ТекПодпись.ДРФО;
									ТекИмяПодписанта = ТекПодпись.Фамилия + " " + ТекПодпись.Имя;
									ТекДолжностьПодписанта = ТекПодпись.Должность;
								Иначе
									ТекДРФО = ТекПодпись.Владелец.Код;
									ТекИмяПодписанта = "";
									ТекДолжностьПодписанта = "";
									Если ТекКодУровняПодписи = -1 Тогда
										ТекКодУровняПодписи = 2;
									КонецЕсли;
								КонецЕсли;
								ЭлементМассиваДанныеПоПодписям.Вставить("Drfo", ТекДРФО);
								ЭлементМассиваДанныеПоПодписям.Вставить("SignerName", ТекИмяПодписанта);
								ЭлементМассиваДанныеПоПодписям.Вставить("SignerPosName", ТекДолжностьПодписанта);
								ЭлементМассиваДанныеПоПодписям.Вставить("Body", ТелоФаксимиле);
								МассивДанныеПоПодписям.Добавить(ЭлементМассиваДанныеПоПодписям);
							КонецЕсли;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(СтрокаТаблицыНакладываемыхНаДокументПодписей.Email1) Тогда
							ЭлементМассиваОтправкаСсылкиНаДокумент = Новый Структура;
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("ЭлектроннаяПочта", СтрокаТаблицыНакладываемыхНаДокументПодписей.Email1);
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("Комментарий", "");
							МассивОтправкаСсылкиНаДокумент.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент);
							
							АдресЕстьВСписке = Ложь;
							Для Каждого ЭлементМассиваNotifyContacts Из МассивNotifyContacts Цикл
								Если ВРег(СтрокаТаблицыНакладываемыхНаДокументПодписей.Email1) = ВРег(ЭлементМассиваNotifyContacts.EMail) Тогда
									АдресЕстьВСписке = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если Не АдресЕстьВСписке Тогда
								ЭлементМассиваNotifyContacts = Новый Структура;
								ЭлементМассиваNotifyContacts.Вставить("EMail", СтрокаТаблицыНакладываемыхНаДокументПодписей.Email1);
								МассивNotifyContacts.Добавить(ЭлементМассиваNotifyContacts);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					Отказ = Ложь;
					Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
						тОрганизация = ПараметрыСобытий.Организация;
						тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
						тВхИсх = ПараметрыСобытий.ВхИсх;
						тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
						тЭлектронныйДокумент = ПараметрыСобытий.ЭлектронныйДокумент;
						тСостояние = ПараметрыСобытий.Состояние;
						тДокумент1С = ПараметрыСобытий.Документ1С;
						Если ТипЗнч(ПараметрыСобытий.МассивВложений) = Тип("Массив") Тогда
							тМассивВложений = ПараметрыСобытий.МассивВложений;
						Иначе
							Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
								тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
							Иначе
								тМассивВложений = Новый Массив;
							КонецЕсли;
							ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
						КонецЕсли;
						ПараметрыСобытий.Вставить("МассивПодписей", МассивПодписейДляОбработкиСобытий);
						ПричинаОтказа = "";
						Если ОбработатьСобытие_ПередПодписанием(тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, МассивПодписейДляОбработкиСобытий, тДокумент1С, тМассивВложений, ПричинаОтказа) Тогда
							
						Иначе
							Отказ = Истина;
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ПричинаОтказа);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ПричинаОтказа);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						КонецЕсли;
					КонецЕсли;
					
					Если Отказ Тогда
						ДанныеДокумента.ЕстьОшибки = Истина;			
						Продолжить;
					Иначе
						
					КонецЕсли;
				Иначе
					ДанныеДокумента.ЕстьОшибки = Истина;			
					Продолжить;
				КонецЕсли;
				
				Если ДанныеДокумента.ЕстьОшибки Тогда
					Продолжить;
				КонецЕсли;
				
				//Если ДокументБудетПодписанПолностью Тогда
				//	//Если ЗначениеЗаполнено(ДанныеДокумента.ПараметрыСозданияДокументов) Тогда					
				//	//	ЕДРПОУКонтрагента = ДанныеДокумента.ПараметрыСозданияДокументов.ЕДРПОУКонтрагента;
				//	//	ФилиалКонтрагента = ДанныеДокумента.ПараметрыСозданияДокументов.ФилиалКонтрагента;
				//	//	лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
				//	//	лПараметрыОтправкиДокумента.Вставить("RcvDept", ФилиалКонтрагента);
				//	//	Если ДанныеДокумента.ПараметрыСозданияДокументов.IsMultisided Тогда
				//	//		//лПараметрыОтправкиДокумента.Вставить("IsMultisided", Истина);
				//	//		//ОбновитьМаршрут = Истина;
				//	//		//ОбновитьМаршрутНомерВМаршруте = 0 + 1;
				//	//		//
				//	//		Если ДанныеДокумента.ПараметрыСозданияДокументов.Маршрут.Количество() >= 2 Тогда
				//	//			СледующийЭлементМаршрута = ДанныеДокумента.ПараметрыСозданияДокументов.Маршрут.Получить(1);
				//	//			ЕДРПОУКонтрагента = СледующийЭлементМаршрута.ЕДРПОУКонтрагента;
				//	//			ФилиалКонтрагента = СледующийЭлементМаршрута.ФилиалКонтрагента;
				//	//			лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
				//	//			лПараметрыОтправкиДокумента.Вставить("RcvDept",   ФилиалКонтрагента);
				//	//		КонецЕсли;
				//	//	КонецЕсли;
				//	//	лПараметрыОтправкиДокумента.Вставить("RcvName", НаименованиеКонтрагентаДляОтправки(ЕДРПОУКонтрагента, ФилиалКонтрагента));
				//	//ИначеЕсли ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
				//		ЕДРПОУКонтрагента = ЭлектронныйДокумент.ЕДРПОУКонтрагента;
				//		ФилиалКонтрагента = ЭлектронныйДокумент.ФилиалКонтрагента;
				//		лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
				//		лПараметрыОтправкиДокумента.Вставить("RcvDept",   ФилиалКонтрагента);
				//		
				//		//Если ЭлектронныйДокумент.IsMultisided Тогда
				//		//	//лПараметрыОтправкиДокумента.Вставить("IsMultisided", Истина);
				//		//	//ОбновитьМаршрут = Истина;
				//		//	//ОбновитьМаршрутНомерВМаршруте = ЭлектронныйДокумент.RoutePosition + 1;
				//		//	//
				//		//	Если ЭлектронныйДокумент.Маршрут.Количество() >= 2 Тогда
				//		//		СледующийЭлементМаршрута = ЭлектронныйДокумент.Маршрут.Получить(1);
				//		//		ЕДРПОУКонтрагента = СледующийЭлементМаршрута.ЕДРПОУКонтрагента;
				//		//		ФилиалКонтрагента = СледующийЭлементМаршрута.ФилиалКонтрагента;
				//		//		лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
				//		//		лПараметрыОтправкиДокумента.Вставить("RcvDept",   ФилиалКонтрагента);
				//		//		лПараметрыОтправкиДокумента.Вставить("RcvName",   СледующийЭлементМаршрута.НаименованиеКонтрагента);
				//		//	Иначе
				//		//		лПараметрыОтправкиДокумента.Вставить("RcvName", НаименованиеКонтрагентаДляОтправки(ЕДРПОУКонтрагента, ФилиалКонтрагента));
				//		//	КонецЕсли;
				//		//Иначе
				//			лПараметрыОтправкиДокумента.Вставить("RcvName", НаименованиеКонтрагентаДляОтправки(ЕДРПОУКонтрагента, ФилиалКонтрагента));
				//	//	КонецЕсли;
				//	//Иначе
				//	//	СтруктураДанныхКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеКонтрагентаПоДокументу1С(ДанныеДокумента.Документ1С);
				//	//	лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", СтруктураДанныхКонтрагента.ЕДРПОУКонтрагента);
				//	//	лПараметрыОтправкиДокумента.Вставить("RcvDept", СтруктураДанныхКонтрагента.ФилиалКонтрагента);
				//	//	лПараметрыОтправкиДокумента.Вставить("RcvName", СтруктураДанныхКонтрагента.НаименованиеКонтрагента);
				//	//КонецЕсли;
				//	
				//	лПараметрыОтправкиДокумента.Вставить("SendDoc", Истина);
				////	лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЭлектронныйДокумент.ЕДРПОУКонтрагента);
				////	лПараметрыОтправкиДокумента.Вставить("RcvDept",   ЭлектронныйДокумент.ФилиалКонтрагента);
				////	Если ЭлектронныйДокумент.IsMultisided Тогда
				////		лПараметрыОтправкиДокумента.Вставить("IsMultisided", Истина);
				////		ОбновитьМаршрут = Истина;
				////		ОбновитьМаршрутНомерВМаршруте = ЭлектронныйДокумент.RoutePosition + 1;
				////	КонецЕсли;
				////ИначеЕсли ЗначениеЗаполнено(ДанныеДокумента.ПараметрыСозданияДокументов) Тогда					
				////	лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ДанныеДокумента.ПараметрыСозданияДокументов.ЕДРПОУКонтрагента);
				////	лПараметрыОтправкиДокумента.Вставить("RcvDept", ДанныеДокумента.ПараметрыСозданияДокументов.ФилиалКонтрагента);
				////	Если ДанныеДокумента.ПараметрыСозданияДокументов.IsMultisided Тогда
				////		лПараметрыОтправкиДокумента.Вставить("IsMultisided", Истина);
				////		ОбновитьМаршрут = Истина;
				////		ОбновитьМаршрутНомерВМаршруте = 0 + 1;
				////	КонецЕсли;
				////Иначе
				////	СтруктураДанныхКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеКонтрагентаПоДокументу1С(ДанныеДокумента.Документ1С);
				////	лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", СтруктураДанныхКонтрагента.ЕДРПОУКонтрагента);
				////	лПараметрыОтправкиДокумента.Вставить("RcvDept", СтруктураДанныхКонтрагента.ФилиалКонтрагента);
				//	
				//Иначе
					лПараметрыОтправкиДокумента.Вставить("SendDoc", Ложь);
				//КонецЕсли;
				
				МассивДанныеПоПодписямВРегистрФаксимилеЭлектронныхДокументов = Новый Массив;
				
				лПараметрыОтправкиДокумента.Вставить("NotifyContacts", МассивNotifyContacts);
				лПараметрыОтправкиДокумента.Вставить("Signers", МассивПодписантов);
				лПараметрыОтправкиДокумента.Вставить("SignImages", МассивДанныеПоПодписям);
				
				
				ДатаОперации = ТекущаяДата();
				
				лРезультатОтправкиДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/signhref", лПараметрыОтправкиДокумента, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
				Если лРезультатОтправкиДокумента.Code <> 0 Тогда
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					Замечание = НСтр("ru = 'Ошибка отправки документа:'; uk = 'Помилка відправки документа:'") + " " + лРезультатОтправкиДокумента.Message;
					СобытиеОтправкиОписание = лРезультатОтправкиДокумента.Message;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					
					тDocVer = Неопределено;
					Если лРезультатОтправкиДокумента.Свойство("DocVer", тDocVer) Тогда
						Если ЗначениеЗаполнено(тDocVer) Тогда
							лDocVer = тDocVer;
						КонецЕсли;
					КонецЕсли;
					
					тСылкаНаДокумент = Неопределено;
					Если лРезультатОтправкиДокумента.Свойство("DocHref", тСылкаНаДокумент) Тогда
						Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
							лСсылкаНаДокумент = тСылкаНаДокумент;
						КонецЕсли;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(лРезультатОтправкиДокумента.FileName) Тогда
						лИмяФайла = лРезультатОтправкиДокумента.FileName;
						НовоеСостояниеЭлектронногоДокумента = Неопределено;
					Иначе
						Продолжить;
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(лРезультатОтправкиДокумента.FileName) Тогда
					лИмяФайла = лРезультатОтправкиДокумента.FileName;
					
					тDocVer = Неопределено;
					Если лРезультатОтправкиДокумента.Свойство("DocVer", тDocVer) Тогда
						Если ЗначениеЗаполнено(тDocVer) Тогда
							лDocVer = тDocVer;
						КонецЕсли;
					КонецЕсли;
					
					тСылкаНаДокумент = Неопределено;
					Если лРезультатОтправкиДокумента.Свойство("Url", тСылкаНаДокумент) Тогда
						Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
							лСсылкаНаДокумент = тСылкаНаДокумент;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ДанныеДокумента.ЕстьОшибки = Истина;
					
					Замечание = НСтр("ru = 'В результате отправки не получено имя файла отправленного документа на сервере СДО.'; uk = 'В результаті відправки не отримано ім''я файла відправленого документа на сервері СДО.'");
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
					
					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ДокументБылСоздан = Ложь;
			Если Истина Тогда
				// Если нет электронного документа, то создать его. Если документ есть, то надо проверить, есть ли в нём таблица реквизитов, если её нет -
				// поместить из поля "РеквизитыЭлектронногоДокумента" структуры "ДанныеДокумента".
				// Зафиксировать событие создания документа.
				ДокументСозданНаОсновании = Неопределено;
				МассивДанныхПоСвязаннымДокументам = Неопределено;
				Если Не ЗначениеЗаполнено(ДанныеДокумента.ЭлектронныйДокумент) Тогда
					
					лДанныеЗаполненияЭлектронногоДокумента = Новый Структура;
					
					лСтруктураОсновныхДанныхДокумента = Новый Структура;
					лСтруктураОсновныхДанныхДокумента.Вставить("Документ1С",               ДанныеДокумента.Документ1С);
					лСтруктураОсновныхДанныхДокумента.Вставить("ВидЭлектронногоДокумента", ДанныеДокумента.ВидЭлектронногоДокумента);
					лСтруктураОсновныхДанныхДокумента.Вставить("ЭлектронныйДокумент",      ДанныеДокумента.ЭлектронныйДокумент);
					
					//Если ДанныеДокумента.Свойство("ПараметрыДляСозданияЭлектронногоДокумента") Тогда
					Если ЗначениеЗаполнено(ДанныеДокумента.ПараметрыСозданияДокументов) Тогда
						ДозаполнитьПараметрыСозданияЭлектронногоДокумента(ДанныеДокумента.ПараметрыСозданияДокументов, ДанныеДокумента.Организация);
						ПараметрыСозданияДокументов = ДанныеДокумента.ПараметрыСозданияДокументов;
						
						лСтруктураОсновныхДанныхДокумента.Вставить("Дата",           ДанныеДокумента.ПараметрыСозданияДокументов.ДатаЭлектронногоДокумента);
						лСтруктураОсновныхДанныхДокумента.Вставить("Номер",          ДанныеДокумента.ПараметрыСозданияДокументов.НомерЭлектронногоДокумента);
						лСтруктураОсновныхДанныхДокумента.Вставить("ДатаДокумента",  ДанныеДокумента.ПараметрыСозданияДокументов.ДатаЭлектронногоДокумента);
						лСтруктураОсновныхДанныхДокумента.Вставить("НомерДокумента", ДанныеДокумента.ПараметрыСозданияДокументов.НомерЭлектронногоДокумента);
						лСтруктураОсновныхДанныхДокумента.Вставить("СуммаДокумента", ДанныеДокумента.ПараметрыСозданияДокументов.СуммаЭлектронногоДокумента);
						лСтруктураОсновныхДанныхДокумента.Вставить("СуммаНДС",       ДанныеДокумента.ПараметрыСозданияДокументов.СуммаНДСЭлектронногоДокумента);
						лСтруктураОсновныхДанныхДокумента.Вставить("СуммаБезНДС",    ДанныеДокумента.ПараметрыСозданияДокументов.СуммаБезНДСЭлектронногоДокумента);
						лСтруктураОсновныхДанныхДокумента.Вставить("ЕДРПОУВладельцаШаблона",     ДанныеДокумента.ПараметрыСозданияДокументов.ЕДРПОУВладельцаШаблона);
						лСтруктураОсновныхДанныхДокумента.Вставить("ИмяШаблона",     ДанныеДокумента.ПараметрыСозданияДокументов.ИмяШаблона);
						лСтруктураОсновныхДанныхДокумента.Вставить("ВерсияШаблона",     ДанныеДокумента.ПараметрыСозданияДокументов.ВерсияШаблона);
						лСтруктураОсновныхДанныхДокумента.Вставить("ВхИсх",          ДанныеДокумента.ПараметрыСозданияДокументов.ВхИсх);
						
						лСтруктураОсновныхДанныхДокумента.Вставить("ГдеСоздан", ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе"));
						лСтруктураОсновныхДанныхДокумента.Вставить("ИдентификаторДокумента", ДанныеДокумента.ПараметрыСозданияДокументов.DocId);
						лСтруктураОсновныхДанныхДокумента.Вставить("DocId", ДанныеДокумента.ПараметрыСозданияДокументов.DocId);
						лСтруктураОсновныхДанныхДокумента.Вставить("ИдентификаторДокументаВБазеДанныхКонтрагента", ДанныеДокумента.ПараметрыСозданияДокументов.OutId);
						лСтруктураОсновныхДанныхДокумента.Вставить("OutId", ДанныеДокумента.ПараметрыСозданияДокументов.OutId);
						лСтруктураОсновныхДанныхДокумента.Вставить("NOTATION", ДанныеДокумента.ПараметрыСозданияДокументов.NOTATION);
						
						лСтруктураОсновныхДанныхДокумента.Вставить("ИмяФайлаДФС", ДанныеДокумента.ПараметрыСозданияДокументов.ИмяФайлаДФС);
						лСтруктураОсновныхДанныхДокумента.Вставить("ИННПродавца", ДанныеДокумента.ПараметрыСозданияДокументов.ИННПродавца);
						лСтруктураОсновныхДанныхДокумента.Вставить("КодФилиалаПродавца", ДанныеДокумента.ПараметрыСозданияДокументов.КодФилиалаПродавца);
						лСтруктураОсновныхДанныхДокумента.Вставить("ИННПокупателя", ДанныеДокумента.ПараметрыСозданияДокументов.ИННПокупателя);
						лСтруктураОсновныхДанныхДокумента.Вставить("КодФилиалаПокупателя", ДанныеДокумента.ПараметрыСозданияДокументов.КодФилиалаПокупателя);
						лСтруктураОсновныхДанныхДокумента.Вставить("РегистрируетсяВЕРННПокупателем", ДанныеДокумента.ПараметрыСозданияДокументов.РегистрируетсяВЕРННПокупателем);
						
						лДокументСозданНаОсновании = Неопределено;
						Если ПараметрыСозданияДокументов.Свойство("ДокументСозданНаОсновании", лДокументСозданНаОсновании) Тогда
							ДокументСозданНаОсновании = лДокументСозданНаОсновании;
						КонецЕсли;
						лМассивДанныхПоСвязаннымДокументам = Неопределено;
						Если ПараметрыСозданияДокументов.Свойство("МассивДанныхПоСвязаннымДокументам", лМассивДанныхПоСвязаннымДокументам) Тогда
							МассивДанныхПоСвязаннымДокументам = лМассивДанныхПоСвязаннымДокументам;
						КонецЕсли;
						лПоДаннымХранилищаРеквизитов = Неопределено;
						Если ДанныеДокумента.ПараметрыСозданияДокументов.Свойство("ПоДаннымХранилищаРеквизитов", лПоДаннымХранилищаРеквизитов) Тогда
							лСтруктураОсновныхДанныхДокумента.Вставить("ПоДаннымХранилищаРеквизитов", лПоДаннымХранилищаРеквизитов);
						КонецЕсли;
						лСтруктураОсновныхДанныхДокумента.Вставить("ЕДРПОУКонтрагента",        ДанныеДокумента.ПараметрыСозданияДокументов.ЕДРПОУКонтрагента);
						лСтруктураОсновныхДанныхДокумента.Вставить("ФилиалКонтрагента",        ДанныеДокумента.ПараметрыСозданияДокументов.ФилиалКонтрагента);
					Иначе
						лСтруктураОсновныхДанныхДокумента.Вставить("ПоДаннымХранилищаРеквизитов", Ложь);
						
						лСтруктураДанныхКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеКонтрагентаПоДокументу1С(ДанныеДокумента.Документ1С);
						лСтруктураОсновныхДанныхДокумента.Вставить("ЕДРПОУКонтрагента",        лСтруктураДанныхКонтрагента.ЕДРПОУКонтрагента);
						лСтруктураОсновныхДанныхДокумента.Вставить("ФилиалКонтрагента",        лСтруктураДанныхКонтрагента.ФилиалКонтрагента);
					КонецЕсли;
					
					//Если ДанныеДокумента.Свойство("РеквизитыЭлектронногоДокумента") Тогда
					Если ЗначениеЗаполнено(ДанныеДокумента.СоответствиеЗначенийРеквизитов) Тогда		
						лСтруктураОсновныхДанныхДокумента.Вставить("РеквизитыЭлектронногоДокумента", ДанныеДокумента.СоответствиеЗначенийРеквизитов);					
					КонецЕсли;
					
					лДанныеЗаполненияЭлектронногоДокумента.Вставить("ОсновныеДанные", лСтруктураОсновныхДанныхДокумента);
					
					лЭлектронныйДокументОбъект = Документы.скEDI_ЭлектронныйДокумент.СоздатьДокумент();
					лЭлектронныйДокументОбъект.Заполнить(лДанныеЗаполненияЭлектронногоДокумента);
					
					ДокументБылСоздан = Истина;
					НомерВерсииСодержания = 1;
				Иначе	
					лЭлектронныйДокументОбъект = ДанныеДокумента.ЭлектронныйДокумент.ПолучитьОбъект();
					
					Если ТаблицаДанныхДокументов.Колонки.Найти("ПараметрыСозданияДокументов") <> Неопределено Тогда
						Если ЗначениеЗаполнено(ДанныеДокумента.ПараметрыСозданияДокументов) Тогда
							ДозаполнитьПараметрыСозданияЭлектронногоДокумента(ДанныеДокумента.ПараметрыСозданияДокументов, ДанныеДокумента.Организация);
							ПараметрыСозданияДокументов = ДанныеДокумента.ПараметрыСозданияДокументов;
							
							лЭлектронныйДокументОбъект.Дата = ДанныеДокумента.ПараметрыСозданияДокументов.ДатаЭлектронногоДокумента;
							лЭлектронныйДокументОбъект.Номер = ДанныеДокумента.ПараметрыСозданияДокументов.НомерЭлектронногоДокумента;
							лЭлектронныйДокументОбъект.ДатаДокумента = ДанныеДокумента.ПараметрыСозданияДокументов.ДатаЭлектронногоДокумента;
							лЭлектронныйДокументОбъект.НомерДокумента = ДанныеДокумента.ПараметрыСозданияДокументов.НомерЭлектронногоДокумента;
							лЭлектронныйДокументОбъект.СуммаДокумента = ДанныеДокумента.ПараметрыСозданияДокументов.СуммаЭлектронногоДокумента;
							лЭлектронныйДокументОбъект.СуммаНДС = ДанныеДокумента.ПараметрыСозданияДокументов.СуммаНДСЭлектронногоДокумента;
							лЭлектронныйДокументОбъект.СуммаБезНДС = ДанныеДокумента.ПараметрыСозданияДокументов.СуммаБезНДСЭлектронногоДокумента;
							лЭлектронныйДокументОбъект.ЕДРПОУВладельцаШаблона = ДанныеДокумента.ПараметрыСозданияДокументов.ЕДРПОУВладельцаШаблона;
							лЭлектронныйДокументОбъект.ИмяШаблона = ДанныеДокумента.ПараметрыСозданияДокументов.ИмяШаблона;
							лЭлектронныйДокументОбъект.ВерсияШаблона = ДанныеДокумента.ПараметрыСозданияДокументов.ВерсияШаблона;
							лЭлектронныйДокументОбъект.ВхИсх = ДанныеДокумента.ПараметрыСозданияДокументов.ВхИсх;
							
							Если лЭлектронныйДокументОбъект.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ПустаяСсылка") Тогда
								Если лЭлектронныйДокументОбъект.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
									лЭлектронныйДокументОбъект.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе");
								ИначеЕсли лЭлектронныйДокументОбъект.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
									лЭлектронныйДокументОбъект.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ПолученОтКонтрагента");
								КонецЕсли;
							КонецЕсли;
							Если лЭлектронныйДокументОбъект.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
								лЭлектронныйДокументОбъект.ИдентификаторДокумента = ДанныеДокумента.ПараметрыСозданияДокументов.DocId;
								лЭлектронныйДокументОбъект.DocId = ДанныеДокумента.ПараметрыСозданияДокументов.DocId;
								лЭлектронныйДокументОбъект.ИдентификаторДокументаВБазеДанныхКонтрагента = ДанныеДокумента.ПараметрыСозданияДокументов.OutId;
								лЭлектронныйДокументОбъект.OutId = ДанныеДокумента.ПараметрыСозданияДокументов.OutId;
								лЭлектронныйДокументОбъект.NOTATION = ДанныеДокумента.ПараметрыСозданияДокументов.NOTATION;
							ИначеЕсли лЭлектронныйДокументОбъект.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ПолученОтКонтрагента") Тогда
								
							КонецЕсли;
							
							лЭлектронныйДокументОбъект.ИмяФайлаДФС = ДанныеДокумента.ПараметрыСозданияДокументов.ИмяФайлаДФС;
							лЭлектронныйДокументОбъект.ИННПродавца = ДанныеДокумента.ПараметрыСозданияДокументов.ИННПродавца;
							лЭлектронныйДокументОбъект.КодФилиалаПродавца = ДанныеДокумента.ПараметрыСозданияДокументов.КодФилиалаПродавца;
							лЭлектронныйДокументОбъект.ИННПокупателя = ДанныеДокумента.ПараметрыСозданияДокументов.ИННПокупателя;
							лЭлектронныйДокументОбъект.КодФилиалаПокупателя = ДанныеДокумента.ПараметрыСозданияДокументов.КодФилиалаПокупателя;
							лЭлектронныйДокументОбъект.РегистрируетсяВЕРННПокупателем = ДанныеДокумента.ПараметрыСозданияДокументов.РегистрируетсяВЕРННПокупателем;
							
							лЭлектронныйДокументОбъект.ЕДРПОУКонтрагента = ДанныеДокумента.ПараметрыСозданияДокументов.ЕДРПОУКонтрагента;
							лЭлектронныйДокументОбъект.ФилиалКонтрагента = ДанныеДокумента.ПараметрыСозданияДокументов.ФилиалКонтрагента;
							
							лПоДаннымХранилищаРеквизитов = Неопределено;
							Если ДанныеДокумента.ПараметрыСозданияДокументов.Свойство("ПоДаннымХранилищаРеквизитов", лПоДаннымХранилищаРеквизитов) Тогда
								лЭлектронныйДокументОбъект.ПоДаннымХранилищаРеквизитов = лПоДаннымХранилищаРеквизитов;
							КонецЕсли;
							Если ЗначениеЗаполнено(ДанныеДокумента.СоответствиеЗначенийРеквизитов) Тогда
								лЭлектронныйДокументОбъект.ХранилищеРеквизитовЭлектронногоДокумента = Новый ХранилищеЗначения(ДанныеДокумента.СоответствиеЗначенийРеквизитов);
							КонецЕсли;
							
							лДокументСозданНаОсновании = Неопределено;
							Если ПараметрыСозданияДокументов.Свойство("ДокументСозданНаОсновании", лДокументСозданНаОсновании) Тогда
								ДокументСозданНаОсновании = лДокументСозданНаОсновании;
							КонецЕсли;
							лМассивДанныхПоСвязаннымДокументам = Неопределено;
							Если ПараметрыСозданияДокументов.Свойство("МассивДанныхПоСвязаннымДокументам", лМассивДанныхПоСвязаннымДокументам) Тогда
								МассивДанныхПоСвязаннымДокументам = лМассивДанныхПоСвязаннымДокументам;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					НомерВерсииСодержания = ПолучитьСледующийНомерВерсииСодержанияЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент);
				КонецЕсли;
				
				//Если ДокументПолученРезультатПодписи Тогда
					Если Не ПодписиПолученыИзЭлектронногоДокумента Тогда
						Для Каждого СтрокаПодписи из ТаблицаПодписейПоДокументу Цикл
							НоваяСтрокаПодписи = лЭлектронныйДокументОбъект.Подписи.Добавить();
							НоваяСтрокаПодписи.Подпись = СтрокаПодписи.Подпись;
						КонецЦикла;
					КонецЕсли;
					//Для Каждого СтрокаПодписи Из ТаблицаНакладываемыхНаДокументПодписей Цикл
					//	ПодписиВДокументе = лЭлектронныйДокументОбъект.Подписи.НайтиСтроки(Новый Структура("Подпись", СтрокаПодписи.Подпись));
					//	Для Каждого ПодписьВДокументе Из ПодписиВДокументе Цикл
					//		ПодписьВДокументе.Подпись = СтрокаПодписи.ВыбранаяПодпись;
					//		ПодписьВДокументе.Подписано = Истина;
					//		ПодписьВДокументе.ДатаПодписания = ДатаОперации;
					//	КонецЦикла;
					//КонецЦикла;
				//КонецЕсли;
				
				//Если Ошибка28 Тогда
				//	лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан");
				//	лЭлектронныйДокументОбъект.ОшибкаШифрованияПриОтправке = Истина;
				//Иначе
				//	лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
				//КонецЕсли;
				лЭлектронныйДокументОбъект.Состояние = ПолучитьСледующееСостояниеДляПодписанныхЧастично(РольСледующейПодписи);
				
				лСостояниеМногостороннегоДокумента = лЭлектронныйДокументОбъект.Состояние;
				УстановитьПараметрыМаршрутаМногостороннегоДокумента(лЭлектронныйДокументОбъект, ПараметрыСозданияДокументов, лЭлектронныйДокументОбъект.RoutePosition, лСостояниеМногостороннегоДокумента);
				
				Если лЭлектронныйДокументОбъект.ИмяФайла = "" Тогда
					лЭлектронныйДокументОбъект.ИмяФайла  = лИмяФайла;
				КонецЕсли;
				Если лЭлектронныйДокументОбъект.ИмяФайлаДФС = "" Тогда
					Если лИмяФайлаДФС <> "" Тогда
						лЭлектронныйДокументОбъект.ИмяФайлаДФС = лИмяФайлаДФС;
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(лDocVer) Тогда
					Если лЭлектронныйДокументОбъект.DocVer = 0 Тогда
						лЭлектронныйДокументОбъект.DocVer  = лDocVer;
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(лСсылкаНаДокумент) Тогда
					Если лЭлектронныйДокументОбъект.DocHref = "" Тогда
						лЭлектронныйДокументОбъект.DocHref  = лСсылкаНаДокумент;
					КонецЕсли;
				КонецЕсли;
				СобытиеОтправкиСсылкиНаДокумент = Неопределено;
				ОписаниеПоОтправкеСсылкиНаДокумент = "";
				Если ТипЗнч(МассивОтправкаСсылкиНаДокумент) = Тип("Массив") Тогда
					Если МассивОтправкаСсылкиНаДокумент.Количество() > 0 Тогда
						ОписаниеПоОтправкеСсылкиНаДокумент = НСтр("ru = 'отправлено на электронную почту:'; uk = 'відправлено на електронну пошту:'");
						Если ЗначениеЗаполнено(лСсылкаНаДокумент) Тогда
							СобытиеОтправкиСсылкиНаДокумент = Перечисления.скEDI_СобытияЭлектронныхДокументов.ОтправкаСсылки;
						КонецЕсли;
						//лЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент.Очистить();
						Для Каждого СтрокаМассиваНастроекОтправкаСсылкиНаДокумент из МассивОтправкаСсылкиНаДокумент Цикл
							//НоваяСтрокаОтправкаСсылкиНаДокумент = лЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент.Добавить();
							//НоваяСтрокаОтправкаСсылкиНаДокумент.ЭлектроннаяПочта = СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта;
							//НоваяСтрокаОтправкаСсылкиНаДокумент.Комментарий = СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий;
							
							ОписаниеПоОтправкеСсылкиНаДокумент = ОписаниеПоОтправкеСсылкиНаДокумент + Символы.ПС + СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта;
							Если ЗначениеЗаполнено(СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий) Тогда
								ОписаниеПоОтправкеСсылкиНаДокумент = ОписаниеПоОтправкеСсылкиНаДокумент + " - " + СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				лЭлектронныйДокументОбъект.ПоследняяОперация = ТекущаяДата();
				ЗаписатьЭлектронныйДокументСПредварительнымПоискомСвязаных(лЭлектронныйДокументОбъект, ДанныеДокумента.ВидЭлектронногоДокумента, ДанныеДокумента.ВидЭлектронногоДокумента.Владелец, ДокументСозданНаОсновании);
				ПрименитьМассивДанныхПоСвязаннымДокументам(лЭлектронныйДокументОбъект.Ссылка, МассивДанныхПоСвязаннымДокументам);
				
				Если ДокументБылСоздан Тогда
					НомерФайла = 1;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента1) Тогда
						СохранитьВложениеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка, НомерФайла, ВложениеДокументаБезПодписи1, ИмяФайлаВложениеДокумента1, ВложениеДокументаФайл1);
						НомерФайла = НомерФайла + 1;
					КонецЕсли;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента2) Тогда
						СохранитьВложениеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка, НомерФайла, ВложениеДокументаБезПодписи2, ИмяФайлаВложениеДокумента2, ВложениеДокументаФайл2);
						НомерФайла = НомерФайла + 1;
					КонецЕсли;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента3) Тогда
						СохранитьВложениеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка, НомерФайла, ВложениеДокументаБезПодписи3, ИмяФайлаВложениеДокумента3, ВложениеДокументаФайл3);
						НомерФайла = НомерФайла + 1;
					КонецЕсли;
					Если ТипЗнч(МассивВложенийДокументаБезПодписи4) = Тип("Массив") или ТипЗнч(МассивВложенийДокументаБезПодписи4) = Тип("ФиксированныйМассив") Тогда
						Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокументаБезПодписи4 Цикл
							Попытка
								ВложениеДокументаФайл = ЭлементМассиваВложенийДокумента4.ВложениеДокументаФайл;
							Исключение
								ВложениеДокументаФайл = Неопределено;
							КонецПопытки;
							СохранитьВложениеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка, НомерФайла, ЭлементМассиваВложенийДокумента4.ВложениеДокумента, ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента, ВложениеДокументаФайл);
							НомерФайла = НомерФайла + 1;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				//Если ДокументПолученРезультатПодписи Тогда
					скEDI_ВнешниеХранилища.СохранитьСодержимоеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка,
						ПолучитьСледующийНомерВерсииСодержанияЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка),
						ТелоДокумента,
						ИзображениеДокумента,
						ВложениеДокумента1,
						ИмяФайлаВложениеДокумента1,
						ВложениеДокумента2,
						ИмяФайлаВложениеДокумента2,
						ВложениеДокумента3,
						ИмяФайлаВложениеДокумента3,
						МассивВложенийДокумента4,
						ТекущаяДата(),
						лИмяФайла,
						лDocVer,
						лСсылкаНаДокумент,
						Ложь,
						Ложь,
						Неопределено,
						Ложь
					);
					
					//Для Каждого ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов из МассивДанныеПоПодписямВРегистрФаксимилеЭлектронныхДокументов Цикл
					//	МенеджерЗаписи = РегистрыСведений.скEDI_ФаксимилеЭлектронныхДокументов.СоздатьМенеджерЗаписи();
					//	МенеджерЗаписи.ЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
					//	МенеджерЗаписи.КодУровняПодписи = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.КодУровняПодписи;
					//	МенеджерЗаписи.ДРФО = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.ДРФО;
					//	МенеджерЗаписи.Сторона = лЭлектронныйДокументОбъект.RoutePosition;
					//	МенеджерЗаписи.ТелоФаксимиле = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.ТелоФаксимиле;
					//	МенеджерЗаписи.ИмяПодписанта = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.ИмяПодписанта;
					//	МенеджерЗаписи.ДолжностьПодписанта = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.ДолжностьПодписанта;
					//	МенеджерЗаписи.Роль = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.Роль;
					//	МенеджерЗаписи.Записать(Истина);
					//КонецЦикла;
					
					КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
				//КонецЕсли;
				
				ДанныеДокумента.ЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
				ДанныеДокумента.Состояние = лЭлектронныйДокументОбъект.Состояние;
				Если ДокументБылСоздан Тогда
					ЗафиксироватьСобытиеЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент, ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.Создание"), , ДатаСозданияДокумента);
				КонецЕсли;
				
				// Зафиксировать событие отправки электронного документа.
				лОписаниеПоОтправке = НСтр("ru = 'Документ отправлен для доподписания'; uk = 'Документ відправлено для допідписання'")
				+ ?(OnlyHref, " " + НСтр("ru = 'в виде ссылки'; uk = 'у вигляді посилання'"), "")
				+ "
				|"
				+  НСтр("ru = 'Дата и время отправки: '; uk = 'Дата та час відправки: '") + Формат(ДатаОперации, "ДФ='dd.MM.yyyy HH:mm:ss'") + "
				//|"
				//+ НСтр("ru = 'Получатель: '; uk = 'Одержувач: '") + ЭлектронныйДокумент.ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ЭлектронныйДокумент.ФилиалКонтрагента), " (" + ЭлектронныйДокумент.ФилиалКонтрагента + ")", "") + "
				|"
				+ НСтр("ru = 'Имя файла: '; uk = 'Ім''я файлу: '") + лИмяФайла;
				
				Если ЗначениеЗаполнено(лСсылкаНаДокумент) Тогда
					лОписаниеПоОтправке = лОписаниеПоОтправке + "
					|"
					+ НСтр("ru = 'Ссылка на документ: '; uk = 'Посилання на документ: '") + лСсылкаНаДокумент;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СобытиеОтправкиСсылкиНаДокумент) Тогда
					лОписаниеПоОтправке = лОписаниеПоОтправке + "
					|"
					+ ОписаниеПоОтправкеСсылкиНаДокумент;
				КонецЕсли;
				
				лОписаниеПоОтправке = лОписаниеПоОтправке + "
				|
				|"
				+ НСтр("ru = 'Подписи: '; uk = 'Підписи: '");
				ДополнитьОписаниеДаннымиПоПодписямКонтрагента(ПолучитьМассивПодписейКонтрагентаИзПодписанногоЭлектронногоДокумента(ТелоДокумента), лОписаниеПоОтправке, Неопределено, ОтражатьTSPСтатус, ОтражатьOCSPСтатус);
				
				СобытиеОтправки = Перечисления.скEDI_СобытияЭлектронныхДокументов.ОтправкаСсылки;
				Если ЗначениеЗаполнено(СобытиеОтправкиОписание) Тогда
					лОписаниеПоОтправке = лОписаниеПоОтправке + "
					|
					|" + СобытиеОтправкиОписание;
				КонецЕсли;
				ЗафиксироватьСобытиеЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент, СобытиеОтправки, лОписаниеПоОтправке, ДатаОперации, лDocVer, лИмяФайла, лИмяФайлаКвитанции);
				
				//УстановитьСнятьОтметкуОбработано(ДанныеДокумента.ЭлектронныйДокумент, Истина);
				
				СобытиеДляЖурнала = НСтр("ru = 'Документ отправлен для доподписание'; uk = 'Документ відправлено для допідписання'") + ": """
				+ лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента.Наименование + """ №" + лЭлектронныйДокументОбъект.НомерДокумента + НСтр("ru = ' от '; uk = ' від '") + Формат(лЭлектронныйДокументОбъект.ДатаДокумента, "ДФ=dd.MM.yyyy");
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, СобытиеДляЖурнала, , Ложь);
			КонецЕсли;
		//КонецЕсли;
	КонецЦикла;

	// Обновление журнала операций.
	Если ЖурналОперации <> "" Тогда
		Если ДополнительныеПараметры.ЖурналОперации = "" Тогда
			ДополнительныеПараметры.ЖурналОперации = ЖурналОперации;
		Иначе
			ДополнительныеПараметры.ЖурналОперации = ДополнительныеПараметры.ЖурналОперации + Символы.ПС + ЖурналОперации;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПодписатьОтправитьFreeЭлектронныеДокументыСервер(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоУспешноОбработаных) Экспорт
	
	//ДанныеДокумента, НастройкиНеобходимыхПодписей, ЖурналОперации = ""
	
	лРезультатНаложенияПредыдущейПоПорядкуПодписи = Неопределено;
	
	//лНетОшибокВПроцессеПодписания = Истина;
	
	ЖурналОперации           = "";//ДополнительныеПараметры.ЖурналОперации;
	ТаблицаНастроекПодписей = ДополнительныеПараметры.НастройкиНеобходимыхПодписей;
	ТаблицаНастроекПодписей = ?(ТипЗнч(ТаблицаНастроекПодписей) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписей, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписей);
	
	ТаблицаНастроекПодписейШифрования = ДополнительныеПараметры.НастройкиПодписейШифрования;
	ТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ТаблицаНастроекПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписейШифрования, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписейШифрования);
	
	МожноОтправитьТолькоСсылку = Ложь;
	Если ДополнительныеПараметры.Свойство("МожноОтправитьТолькоСсылку") Тогда
		МожноОтправитьТолькоСсылку = ДополнительныеПараметры.МожноОтправитьТолькоСсылку;
	КонецЕсли;
	
	Для Каждого ДанныеДокумента Из ТаблицаДанныхДокументов Цикл 
		Если ДанныеДокумента.ЕстьОшибки Тогда
			Продолжить;
		КонецЕсли;
		лОрганизацияEDI = ДанныеДокумента.Организация;//ПолучитьОрганизациюEDIИзДанныхДокумента(ДанныеДокумента);	
		
		ДатаСозданияДокумента = Неопределено;
		ТелоДокумента = "";
		ИзображениеДокумента = "";
		ВложениеДокумента1 = "";
		ВложениеДокументаБезПодписи1 = "";
		ИмяФайлаВложениеДокумента1 = "";
		ВложениеДокументаФайл1 = Неопределено;
		ВложениеДокумента2 = "";
		ВложениеДокументаБезПодписи2 = "";
		ИмяФайлаВложениеДокумента2 = "";
		ВложениеДокументаФайл2 = Неопределено;
		ВложениеДокумента3 = "";
		ВложениеДокументаБезПодписи3 = "";
		ИмяФайлаВложениеДокумента3 = "";
		ВложениеДокументаФайл3 = Неопределено;
		МассивВложенийДокумента4 = Неопределено;
		МассивВложенийДокументаБезПодписи4 = Неопределено;
		
		ПараметрыСобытий = Неопределено;
		
		СтруктураДанныхКонтрагента = Неопределено;
		СпособОтправки = Неопределено;
		ВариантОтправки = 0;
		//ПодписыватьКвитанциюВсемиПодписями = Ложь;
		//Квитанция = ПредопределенноеЗначение("Документ.скEDI_Квитанция.ПустаяСсылка");
		//КвитанцияТело = "";
		//КвитанцияТекст = "";
		//ТипКвитанции = Неопределено;
		//ВидКвитанции = Неопределено;
		//ЭтоИсходящийДокумент = Ложь;
		ОтражатьTSPСтатус = Истина;
		ОтражатьOCSPСтатус = Истина;
		OnlyHref = Ложь;
		
		Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") 
		или ДанныеДокумента.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
			Если ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент")
			или ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента")
			или ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями") Тогда
				СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
				ВариантОтправки = 1;// 1 - ПервичныйДокумент Контрагенту
				//ЭтоИсходящийДокумент = Истина;
				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ЕстьТолькоДокумент1С")
				или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПустаяСсылка") Тогда
					ЭлектронныйДокумент = ПредопределенноеЗначение("Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка");
					ДатаСозданияДокумента = ДанныеДокумента.ДатаСозданияДокумента;
					ТелоДокумента = ДанныеДокумента.ТелоДокумента;
					ИзображениеДокумента = ДанныеДокумента.ИзображениеДокумента;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					ПараметрыСобытий.МассивВложений = Новый Массив;
					
					ВложениеДокумента1 = ДанныеДокумента.ВложениеДокумента1;
					ВложениеДокументаБезПодписи1 = ДанныеДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = ДанныеДокумента.ИмяФайлаВложениеДокумента1;
					Попытка
						ВложениеДокументаФайл1 = ДанныеДокумента.ВложениеДокументаФайл1;
					Исключение
						ВложениеДокументаФайл1 = Неопределено;
					КонецПопытки;
					Если ЗначениеЗаполнено(ВложениеДокумента1) Тогда
						Вложение = Новый Структура("ИмяФайла, СтрокаBase64, Файл", ИмяФайлаВложениеДокумента1, ВложениеДокументаБезПодписи1, ВложениеДокументаФайл1);
						ПараметрыСобытий.МассивВложений.Добавить(Вложение);
					КонецЕсли;
					ВложениеДокумента2 = ДанныеДокумента.ВложениеДокумента2;
					ВложениеДокументаБезПодписи2 = ДанныеДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = ДанныеДокумента.ИмяФайлаВложениеДокумента2;
					Попытка
						ВложениеДокументаФайл2 = ДанныеДокумента.ВложениеДокументаФайл2;
					Исключение
						ВложениеДокументаФайл2 = Неопределено;
					КонецПопытки;
					Если ЗначениеЗаполнено(ВложениеДокумента2) Тогда
						Вложение = Новый Структура("ИмяФайла, СтрокаBase64, Файл", ИмяФайлаВложениеДокумента2, ВложениеДокументаБезПодписи2, ВложениеДокументаФайл2);
						ПараметрыСобытий.МассивВложений.Добавить(Вложение);
					КонецЕсли;
					ВложениеДокумента3 = ДанныеДокумента.ВложениеДокумента3;
					ВложениеДокументаБезПодписи3 = ДанныеДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = ДанныеДокумента.ИмяФайлаВложениеДокумента3;
					Попытка
						ВложениеДокументаФайл3 = ДанныеДокумента.ВложениеДокументаФайл3;
					Исключение
						ВложениеДокументаФайл3 = Неопределено;
					КонецПопытки;
					Если ЗначениеЗаполнено(ВложениеДокумента3) Тогда
						Вложение = Новый Структура("ИмяФайла, СтрокаBase64, Файл", ИмяФайлаВложениеДокумента3, ВложениеДокументаБезПодписи3, ВложениеДокументаФайл3);
						ПараметрыСобытий.МассивВложений.Добавить(Вложение);
					КонецЕсли;
					МассивВложенийДокумента4 = ДанныеДокумента.МассивВложенийДокумента4;
					МассивВложенийДокументаБезПодписи4 = ДанныеДокумента.МассивВложенийДокумента4;
					Если ТипЗнч(МассивВложенийДокументаБезПодписи4) = Тип("Массив") Тогда
						Для Каждого ЭлементМассиваВложенийДокументаБезПодписи4 из МассивВложенийДокументаБезПодписи4 Цикл
							Вложение = Новый Структура("ИмяФайла, СтрокаBase64, Файл");
							Вложение.ИмяФайла = ЭлементМассиваВложенийДокументаБезПодписи4.ИмяФайлаВложениеДокумента;
							Вложение.СтрокаBase64 = ЭлементМассиваВложенийДокументаБезПодписи4.ВложениеДокумента;
							Вложение.Файл = ЭлементМассиваВложенийДокументаБезПодписи4.ВложениеДокументаФайл;
							ПараметрыСобытий.МассивВложений.Добавить(Вложение);
						КонецЦикла;
					КонецЕсли;
				
					ОшибкаПараметровСоздания = "";
					Если не ПроверитьПараметрыСозданияЭлектронногоДокумента(ДанныеДокумента.ПараметрыСозданияДокументов, ОшибкаПараметровСоздания) Тогда
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.Документ1С + ": " + ОшибкаПараметровСоздания);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПараметровСоздания);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					КонецЕсли;
				ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан") Тогда
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ДатаСозданияДокумента = ДанныеДокумента.ДатаСозданияДокумента;
					ТелоДокумента = ДанныеДокумента.ТелоДокумента;
					ИзображениеДокумента = ДанныеДокумента.ИзображениеДокумента;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
					Замечание = "";
					ПолучитьВложенияЭлектронногоДокумента(ЭлектронныйДокумент, ВложениеДокумента1, ИмяФайлаВложениеДокумента1, ВложениеДокумента2, ИмяФайлаВложениеДокумента2, ВложениеДокумента3, ИмяФайлаВложениеДокумента3, МассивВложенийДокумента4, Замечание);
					Если Замечание <> "" Тогда
						ДанныеДокумента.ЕстьЗамечания = Истина;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.Документ1С + ": " + Замечание);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
				ИначеЕсли ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьБухгалтеру")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьДиректору")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьПечатью") Тогда
					ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
					
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					КонецЕсли;
					
					ПараметрыСобытий = Новый Структура("Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					//ПараметрыСобытий.МассивВложений = Новый Массив;
					
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
					ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
					ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
					ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
					ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
					ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
			
		
		
		лНастройкиПодписиШифрованияДляТекущейОрганизации = ТаблицаНастроекПодписейШифрования.Найти(лОрганизацияEDI, "ОрганизацияEDI");
		
		Если лНастройкиПодписиШифрованияДляТекущейОрганизации = Неопределено Тогда		
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не найдены настройки подписи шифрования Организации: '; uk = 'Не знайдені підписи шифрування по Організації: '") + лОрганизацияEDI + ".");
			ДанныеДокумента.ЕстьОшибки = Истина;			
		КонецЕсли;
		
		Если СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ПустаяСсылка") Тогда
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Не указан способ отправки'; uk = 'Не вказано спосіб відправки'") + ": " + лОрганизацияEDI + ".");
			ДанныеДокумента.ЕстьОшибки = Истина;			
		КонецЕсли;
		
		Если не ДанныеДокумента.ЕстьОшибки Тогда
			лИмяФайла = "";
			лИмяФайлаКвитанции = "";
			лИмяФайлаДФС = "";
			лСсылкаНаДокумент = "";
			лDocVer = 0;
			ПараметрыСозданияДокументов = Неопределено;
			ОбновитьМаршрут = Ложь;
			ОбновитьМаршрутНомерВМаршруте = -1;
			
			Если ВариантОтправки = 1 Тогда // 1 - ПервичныйДокумент Контрагенту
				Если СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО") Тогда
					СтрокаПодключенияEDI = Неопределено;
					СерверEDI = Неопределено;
					ПортEDI = Неопределено;
					
					лПараметрыОтправкиДокумента = Новый Структура;
					лПараметрыОтправкиДокумента.Вставить("Edrpou",    лОрганизацияEDI.Код);
					лПараметрыОтправкиДокумента.Вставить("Dept",      лОрганизацияEDI.Филиал);
					лПараметрыОтправкиДокумента.Вставить("PrgId",     лОрганизацияEDI.ИдентификаторПрограммы);
					
					Если ЗначениеЗаполнено(ДанныеДокумента.ПараметрыСозданияДокументов) Тогда					
						ЕДРПОУКонтрагента = ДанныеДокумента.ПараметрыСозданияДокументов.ЕДРПОУКонтрагента;
						ФилиалКонтрагента = ДанныеДокумента.ПараметрыСозданияДокументов.ФилиалКонтрагента;
						лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
						лПараметрыОтправкиДокумента.Вставить("RcvDept", ФилиалКонтрагента);
						Если ДанныеДокумента.ПараметрыСозданияДокументов.IsMultisided Тогда
							лПараметрыОтправкиДокумента.Вставить("IsMultisided", Истина);
							ОбновитьМаршрут = Истина;
							ОбновитьМаршрутНомерВМаршруте = 0 + 1;
							
							Если ДанныеДокумента.ПараметрыСозданияДокументов.Маршрут.Количество() >= 2 Тогда
								СледующийЭлементМаршрута = ДанныеДокумента.ПараметрыСозданияДокументов.Маршрут.Получить(1);
								ЕДРПОУКонтрагента = СледующийЭлементМаршрута.ЕДРПОУКонтрагента;
								ФилиалКонтрагента = СледующийЭлементМаршрута.ФилиалКонтрагента;
								лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
								лПараметрыОтправкиДокумента.Вставить("RcvDept",   ФилиалКонтрагента);
							КонецЕсли;
						КонецЕсли;
						лПараметрыОтправкиДокумента.Вставить("RcvName", НаименованиеКонтрагентаДляОтправки(ЕДРПОУКонтрагента, ФилиалКонтрагента));
					ИначеЕсли ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
						ЕДРПОУКонтрагента = ЭлектронныйДокумент.ЕДРПОУКонтрагента;
						ФилиалКонтрагента = ЭлектронныйДокумент.ФилиалКонтрагента;
						лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
						лПараметрыОтправкиДокумента.Вставить("RcvDept",   ФилиалКонтрагента);
						
						Если ЭлектронныйДокумент.IsMultisided Тогда
							лПараметрыОтправкиДокумента.Вставить("IsMultisided", Истина);
							ОбновитьМаршрут = Истина;
							ОбновитьМаршрутНомерВМаршруте = ЭлектронныйДокумент.RoutePosition + 1;
							
							Если ЭлектронныйДокумент.Маршрут.Количество() >= 2 Тогда
								СледующийЭлементМаршрута = ЭлектронныйДокумент.Маршрут.Получить(1);
								ЕДРПОУКонтрагента = СледующийЭлементМаршрута.ЕДРПОУКонтрагента;
								ФилиалКонтрагента = СледующийЭлементМаршрута.ФилиалКонтрагента;
								лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", ЕДРПОУКонтрагента);
								лПараметрыОтправкиДокумента.Вставить("RcvDept",   ФилиалКонтрагента);
								лПараметрыОтправкиДокумента.Вставить("RcvName",   СледующийЭлементМаршрута.НаименованиеКонтрагента);
							Иначе
								лПараметрыОтправкиДокумента.Вставить("RcvName", НаименованиеКонтрагентаДляОтправки(ЕДРПОУКонтрагента, ФилиалКонтрагента));
							КонецЕсли;
						Иначе
							лПараметрыОтправкиДокумента.Вставить("RcvName", НаименованиеКонтрагентаДляОтправки(ЕДРПОУКонтрагента, ФилиалКонтрагента));
						КонецЕсли;
					Иначе
						СтруктураДанныхКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеКонтрагентаПоДокументу1С(ДанныеДокумента.Документ1С);
						лПараметрыОтправкиДокумента.Вставить("RcvEdrpou", СтруктураДанныхКонтрагента.ЕДРПОУКонтрагента);
						лПараметрыОтправкиДокумента.Вставить("RcvDept", СтруктураДанныхКонтрагента.ФилиалКонтрагента);
						лПараметрыОтправкиДокумента.Вставить("RcvName", СтруктураДанныхКонтрагента.НаименованиеКонтрагента);
					КонецЕсли;
					ТекСтрокаПодключенияEDI = Неопределено;
					ТекСерверEDI = Неопределено;
					ТекПортEDI = Неопределено;
					ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиДокумента, лНастройкиПодписиШифрованияДляТекущейОрганизации, ТекСтрокаПодключенияEDI, ТекСерверEDI, ТекПортEDI, "Encrypt");
					
					Если ЗначениеЗаполнено(ТекСтрокаПодключенияEDI) или ЗначениеЗаполнено(ТекСерверEDI) или ЗначениеЗаполнено(ТекПортEDI) Тогда
						Если ЗначениеЗаполнено(СтрокаПодключенияEDI) или ЗначениеЗаполнено(СерверEDI) или ЗначениеЗаполнено(ПортEDI) Тогда
							Если (СтрокаПодключенияEDI<>ТекСтрокаПодключенияEDI) или (СерверEDI<>ТекСерверEDI) или (ПортEDI<>ТекПортEDI) Тогда
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Неоднозначно указано адрес АПИ.'; uk = 'Неоднозначно вказано адресу АПІ.'"));
								ДанныеДокумента.ЕстьОшибки = Истина;			
								Продолжить;
							КонецЕсли;
						Иначе
							СтрокаПодключенияEDI = ТекСтрокаПодключенияEDI;
							СерверEDI = ТекСерверEDI;
							ПортEDI = ТекПортEDI;
						КонецЕсли;
					КонецЕсли;
					
					лПараметрыОтправкиДокумента.Вставить("MedocBody", ТелоДокумента);
					
					Если ЗначениеЗаполнено(ИзображениеДокумента) Тогда				
						лПараметрыПередаваемогоPDFПредставленияДокумента = Новый Структура;
						лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("FileName", "Form.pdf");
						лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("Body", ИзображениеДокумента);
						лПараметрыОтправкиДокумента.Вставить("ImageBody", лПараметрыПередаваемогоPDFПредставленияДокумента);
					КонецЕсли;
					
					МассивВложений = Новый Массив;
					ИндексВложения1 = Неопределено;
					ИндексВложения2 = Неопределено;
					ИндексВложения3 = Неопределено;
					ИндексВложения4 = Неопределено;
					
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента1) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента1, ВложениеДокумента1));
						ИндексВложения1 = МассивВложений.ВГраница();
					КонецЕсли;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента2) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента2, ВложениеДокумента2));
						ИндексВложения2 = МассивВложений.ВГраница();
					КонецЕсли;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента3) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента3, ВложениеДокумента3));
						ИндексВложения3 = МассивВложений.ВГраница();
					КонецЕсли;
					Если ТипЗнч(МассивВложенийДокумента4) = Тип("Массив") или ТипЗнч(МассивВложенийДокумента4) = Тип("ФиксированныйМассив") Тогда
						Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокумента4 Цикл
							МассивВложений.Добавить(Новый Структура("FileName,Body", ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента, ЭлементМассиваВложенийДокумента4.ВложениеДокумента));
							Если не ЗначениеЗаполнено(ИндексВложения4) Тогда
								ИндексВложения4 = МассивВложений.ВГраница();
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если МассивВложений.Количество() > 0 Тогда
						лПараметрыОтправкиДокумента.Вставить("AttachmentBody", МассивВложений);
					КонецЕсли;
					
					
					МассивДанныеПоПодписям = ПолучитьМассивДанныеПоПодписям(ДанныеДокумента.ЭлектронныйДокумент);
					МассивСертификатовКлючейПаролей = Новый Массив;
					ТипПодписания = "ptn";	
						
					СписокНаложенныхНаДокументПодписей = Новый СписокЗначений;
					МассивНаложенныхНаДокументПодписейСсылки = Новый Массив;
					ПодписиПолученыИзЭлектронногоДокумента = Ложь;
					ТаблицаНакладываемыхНаДокументПодписей = Неопределено;
					ДокументПодписанПолностью = Истина;
					ДокументБылПодписан = Ложь;
					ДокументПолученРезультатПодписи = Ложь;
					Если ПолучитьТаблицуНеобходимыхПодписейДляДокумента(ТаблицаНакладываемыхНаДокументПодписей, ДанныеДокумента.ЭлектронныйДокумент, ДанныеДокумента, ПодписиПолученыИзЭлектронногоДокумента, ЖурналОперации) Тогда
						ТаблицаПодписейПоДокументу = Неопределено;
						Если не ПодписиПолученыИзЭлектронногоДокумента Тогда
							ТаблицаПодписейПоДокументу = ТаблицаНакладываемыхНаДокументПодписей.Скопировать();
						КонецЕсли;
						РольСледующейПодписи = Неопределено;
						МассивПодписейДляОбработкиСобытий = Неопределено;
						ДокументПодписанПолностью = ПодготовитьТаблицуНакладываемыхПодписей(ТаблицаНакладываемыхНаДокументПодписей, ТаблицаНастроекПодписей, ДанныеДокумента.Организация, РольСледующейПодписи, МассивПодписейДляОбработкиСобытий);
						
						Если не ДокументПодписанПолностью Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							Замечание = НСтр("ru = 'Не все подписи заполнены'; uk = 'Не всі підписи заповнені'");
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							
							Продолжить;
						КонецЕсли;
						
						ДокументБылПодписан = Ложь;
						
						Отказ = Ложь;
						Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
							тОрганизация = ПараметрыСобытий.Организация;
							тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
							тВхИсх = ПараметрыСобытий.ВхИсх;
							тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
							тЭлектронныйДокумент = ПараметрыСобытий.ЭлектронныйДокумент;
							тСостояние = ПараметрыСобытий.Состояние;
							тДокумент1С = ПараметрыСобытий.Документ1С;
							тМассивВложений = Неопределено;
							ПараметрыСобытий.Свойство("МассивВложений", тМассивВложений);
							Если ТипЗнч(тМассивВложений) <> Тип("Массив") Тогда
								Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
									тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
								Иначе
									тМассивВложений = Новый Массив;
								КонецЕсли;
								ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
							КонецЕсли;
							ПараметрыСобытий.Вставить("МассивПодписей", МассивПодписейДляОбработкиСобытий);
							ПричинаОтказа = "";
							Если ОбработатьСобытие_ПередПодписанием(тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, МассивПодписейДляОбработкиСобытий, тДокумент1С, тМассивВложений, ПричинаОтказа) Тогда
								ПричинаОтказа = "";
								Если не ОбработатьСобытие_ПередОтправкой(тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, МассивПодписейДляОбработкиСобытий, тДокумент1С, тМассивВложений, ПричинаОтказа) Тогда
									Отказ = Истина;
									ДанныеДокумента.ЕстьОшибки = Истина;
									
									ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ПричинаОтказа);
									
									ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
									ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ПричинаОтказа);
									ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								КонецЕсли;
							Иначе
								Отказ = Истина;
								ДанныеДокумента.ЕстьОшибки = Истина;
								
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ПричинаОтказа);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ПричинаОтказа);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							КонецЕсли;
						КонецЕсли;
						
						Если Отказ Тогда
							ДокументБылПодписан = Ложь;
							ДанныеДокумента.ЕстьОшибки = Истина;			
							Продолжить;
						Иначе
							Для Каждого лДанныеПодписи Из ТаблицаНакладываемыхНаДокументПодписей Цикл
								ЭлементМассиваСертификатовКлючейПаролей = Новый Структура;
								
								ТекСтрокаПодключенияEDI = Неопределено;
								ТекСерверEDI = Неопределено;
								ТекПортEDI = Неопределено;
								ДобавитьПараметрыСекретногоКлюча(ЭлементМассиваСертификатовКлючейПаролей, лДанныеПодписи, ТекСтрокаПодключенияEDI, ТекСерверEDI, ТекПортEDI);
								Если ЗначениеЗаполнено(ТекСтрокаПодключенияEDI) или ЗначениеЗаполнено(ТекСерверEDI) или ЗначениеЗаполнено(ТекПортEDI) Тогда
									Если ЗначениеЗаполнено(СтрокаПодключенияEDI) или ЗначениеЗаполнено(СерверEDI) или ЗначениеЗаполнено(ПортEDI) Тогда
										Если (СтрокаПодключенияEDI<>ТекСтрокаПодключенияEDI) или (СерверEDI<>ТекСерверEDI) или (ПортEDI<>ТекПортEDI) Тогда
											ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Неоднозначно указано адрес АПИ.'; uk = 'Неоднозначно вказано адресу АПІ.'"));
											ДанныеДокумента.ЕстьОшибки = Истина;			
											Продолжить;
										КонецЕсли;
									Иначе
										СтрокаПодключенияEDI = ТекСтрокаПодключенияEDI;
										СерверEDI = ТекСерверEDI;
										ПортEDI = ТекПортEDI;
									КонецЕсли;
								КонецЕсли;
								
								лИнформацияПоПодписи = Новый Структура("Дата, ПолучатьOCSP, ПолучатьTSP, Подпись, ВыбранаяПодпись, Наименование, ДРФОПодписанта, СерийныйНомер, ТипПодписания", Дата(1,1,1,0,0,0), Ложь, Ложь, лДанныеПодписи.Подпись, лДанныеПодписи.ВыбранаяПодпись, лДанныеПодписи.Наименование, лДанныеПодписи.ДРФОПодписанта, лДанныеПодписи.СерийныйНомер, ТипПодписания);
								
								лИнформацияПоПодписи.ПолучатьOCSP = Истина;
								лИнформацияПоПодписи.ПолучатьTSP = Истина;
								лИнформацияПоПодписи.Дата = ТекущаяДата();
								СписокНаложенныхНаДокументПодписей.Добавить(лИнформацияПоПодписи);
								МассивСертификатовКлючейПаролей.Добавить(ЭлементМассиваСертификатовКлючейПаролей);
								МассивНаложенныхНаДокументПодписейСсылки.Добавить(лДанныеПодписи.ВыбранаяПодпись);
								ДокументБылПодписан = Истина;
							КонецЦикла;
						КонецЕсли;
					Иначе
						ДокументБылПодписан = Ложь;
						ДанныеДокумента.ЕстьОшибки = Истина;			
						Продолжить;
					КонецЕсли;
					
					Если ДанныеДокумента.ЕстьОшибки Тогда
						Продолжить;
					КонецЕсли;
					
					МассивДанныеПоПодписямВРегистрФаксимилеЭлектронныхДокументов = Новый Массив;
					Если ДокументБылПодписан Тогда
						Запрос = Новый Запрос;
						Запрос.Текст = 
							"ВЫБРАТЬ
							|	скEDI_Факсимиле.Подпись КАК Подпись,
							|	скEDI_Факсимиле.Факсимиле КАК Факсимиле
							|ИЗ
							|	РегистрСведений.скEDI_Факсимиле КАК скEDI_Факсимиле
							|ГДЕ
							|	скEDI_Факсимиле.Подпись В(&СписокПодписей)";
						Запрос.УстановитьПараметр("СписокПодписей", МассивНаложенныхНаДокументПодписейСсылки);
						ТаблицаДетальныеЗаписи = Запрос.Выполнить().Выгрузить();
						
						Для Каждого ЭлементСпискаНаложенныхНаДокументПодписей из СписокНаложенныхНаДокументПодписей Цикл
							ФаксимилеЭлектронныхДокументов = Новый Структура;
							ТекПодпись = ЭлементСпискаНаложенныхНаДокументПодписей.Значение.ВыбранаяПодпись;
							ЭлементМассиваДанныеПоПодписям = Новый Структура;
							ФаксимилеЭлектронныхДокументов.Вставить("Роль", ТекПодпись.Роль);
							ТекКодУровняПодписи = ПолучитьКодПодписиПоРоли(ТекПодпись.Роль);
							ЭлементМассиваДанныеПоПодписям.Вставить("SignState", ТекКодУровняПодписи);
							ФаксимилеЭлектронныхДокументов.Вставить("КодУровняПодписи", ТекКодУровняПодписи);
							Если ЗначениеЗаполнено(ТекПодпись.ДРФО) Тогда
								ТекДРФО = ТекПодпись.ДРФО;
								ТекИмяПодписанта = ТекПодпись.Фамилия + " " + ТекПодпись.Имя;
								ТекДолжностьПодписанта = ТекПодпись.Должность;
							Иначе
								ТекДРФО = ТекПодпись.Владелец.Код;
								ТекИмяПодписанта = "";
								ТекДолжностьПодписанта = "";
								Если ТекКодУровняПодписи = -1 Тогда
									ТекКодУровняПодписи = 2;
								КонецЕсли;
							КонецЕсли;
							ЭлементМассиваДанныеПоПодписям.Вставить("Drfo", ТекДРФО);
							ФаксимилеЭлектронныхДокументов.Вставить("ДРФО", ТекДРФО);
							ЭлементМассиваДанныеПоПодписям.Вставить("SignerName", ТекИмяПодписанта);
							ФаксимилеЭлектронныхДокументов.Вставить("ИмяПодписанта", ТекИмяПодписанта);
							ЭлементМассиваДанныеПоПодписям.Вставить("SignerPosName", ТекДолжностьПодписанта);
							ФаксимилеЭлектронныхДокументов.Вставить("ДолжностьПодписанта", ТекДолжностьПодписанта);
							
							ФаксимилеЭлектронныхДокументов.Вставить("ТелоФаксимиле", "");
							НайденыеСтрокиТаблицыДетальныеЗаписи = ТаблицаДетальныеЗаписи.НайтиСтроки(Новый Структура("Подпись", ТекПодпись));
							Для Каждого НайденаяСтрокаТаблицыДетальныеЗаписи Из НайденыеСтрокиТаблицыДетальныеЗаписи Цикл
								ТелоФаксимиле_ХранилищеЗначений = НайденаяСтрокаТаблицыДетальныеЗаписи.Факсимиле.Получить();
								ТелоФаксимиле = Base64Строка(ТелоФаксимиле_ХранилищеЗначений);
								ЭлементМассиваДанныеПоПодписям.Вставить("Body", ТелоФаксимиле);
								ФаксимилеЭлектронныхДокументов.Вставить("ТелоФаксимиле", ТелоФаксимиле);
								Прервать;
							КонецЦикла;
							МассивДанныеПоПодписям.Добавить(ЭлементМассиваДанныеПоПодписям);
							МассивДанныеПоПодписямВРегистрФаксимилеЭлектронныхДокументов.Добавить(ФаксимилеЭлектронныхДокументов);
						КонецЦикла;
					КонецЕсли;
					
					лПараметрыОтправкиДокумента.Вставить("Signers", МассивСертификатовКлючейПаролей);
					лПараметрыОтправкиДокумента.Вставить("SignImages", МассивДанныеПоПодписям);
					
					МассивNotifyContacts = Неопределено;
					МассивОтправкаСсылкиНаДокумент = Новый Массив;
					МассивНастроекОтправкаСсылкиНаДокумент = ДанныеДокумента.МассивНастроекОтправкаСсылкиНаДокумент;
					Если ТипЗнч(МассивНастроекОтправкаСсылкиНаДокумент) = Тип("ФиксированныйМассив") или ТипЗнч(МассивНастроекОтправкаСсылкиНаДокумент) = Тип("Массив") Тогда
						Для Каждого СтрокаМассиваНастроекОтправкаСсылкиНаДокумент из МассивНастроекОтправкаСсылкиНаДокумент Цикл
							ЭлементМассиваОтправкаСсылкиНаДокумент = Новый Структура;
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("ЭлектроннаяПочта", СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("Комментарий", СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий);
							МассивОтправкаСсылкиНаДокумент.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент);
						КонецЦикла;
					Иначе
						СписокНастроеныхАдресов = Новый СписокЗначений;
						Для Каждого СтрокаОтправкаСсылкиНаДокумент из ЭлектронныйДокумент.ОтправкаСсылкиНаДокумент Цикл
							ЭлементМассиваОтправкаСсылкиНаДокумент = Новый Структура;
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("ЭлектроннаяПочта", СтрокаОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("Комментарий", СтрокаОтправкаСсылкиНаДокумент.Комментарий);
							МассивОтправкаСсылкиНаДокумент.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент);
							
							СписокНастроеныхАдресов.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
						КонецЦикла;
						Если ЗначениеЗаполнено(ЭлектронныйДокумент.ЕДРПОУКонтрагента) Тогда
							Запрос = Новый Запрос;
							Запрос.Текст = "ВЫБРАТЬ
							               |	скEDI_КонтактныеДанныеКонтрагентов.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
							               |	скEDI_КонтактныеДанныеКонтрагентов.Комментарий КАК Комментарий
							               |ИЗ
							               |	РегистрСведений.скEDI_КонтактныеДанныеКонтрагентов КАК скEDI_КонтактныеДанныеКонтрагентов
							               |ГДЕ
							               |	скEDI_КонтактныеДанныеКонтрагентов.ЕДРПОУКонтрагента = &ЕДРПОУКонтрагента
							               |	И НЕ скEDI_КонтактныеДанныеКонтрагентов.ЭлектроннаяПочта В (&ЭлектроннаяПочтаСписок)
							               |	И скEDI_КонтактныеДанныеКонтрагентов.ОтправлятьСсылкуНаДокументАвтоматически";
							Запрос.УстановитьПараметр("ЕДРПОУКонтрагента", ЭлектронныйДокумент.ЕДРПОУКонтрагента);
							Запрос.УстановитьПараметр("ЭлектроннаяПочтаСписок", СписокНастроеныхАдресов);
							ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
							Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
								ЭлементМассиваОтправкаСсылкиНаДокумент = Новый Структура;
								ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("ЭлектроннаяПочта", ВыборкаРезультатаЗапроса.ЭлектроннаяПочта);
								ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("Комментарий", ВыборкаРезультатаЗапроса.Комментарий);
								МассивОтправкаСсылкиНаДокумент.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					Если МассивОтправкаСсылкиНаДокумент.Количество() > 0 Тогда
						МассивNotifyContacts = Новый Массив;
						Для Каждого ЭлементМассиваОтправкаСсылкиНаДокумент из МассивОтправкаСсылкиНаДокумент Цикл
							АдресЕстьВСписке = Ложь;
							Для Каждого ЭлементМассиваNotifyContacts Из МассивNotifyContacts Цикл
								Если ВРег(ЭлементМассиваОтправкаСсылкиНаДокумент.ЭлектроннаяПочта) = ВРег(ЭлементМассиваNotifyContacts.EMail) Тогда
									АдресЕстьВСписке = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если Не АдресЕстьВСписке Тогда
								ЭлементМассиваNotifyContacts = Новый Структура("EMail", ЭлементМассиваОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
								МассивNotifyContacts.Добавить(ЭлементМассиваNotifyContacts);
							КонецЕсли;
						КонецЦикла;
						лПараметрыОтправкиДокумента.Вставить("NotifyContacts", МассивNotifyContacts);
					КонецЕсли;
					
					Если МожноОтправитьТолькоСсылку Тогда
						Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
							Если ЭлектронныйДокумент.ОшибкаШифрованияПриОтправке Тогда
								OnlyHref = Истина;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Если OnlyHref Тогда
						Если МассивNotifyContacts = Неопределено Тогда
							ОшибкаОтсутствиеNotifyContacts = НСтр("ru = 'Нет адреса для отправки ссылки на Электронный документ.'; uk = 'Нема адреси для відправки посилання на Електронний документ.'");
							
							ДанныеДокумента.ЕстьОшибки = Истина;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаОтсутствиеNotifyContacts);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаОтсутствиеNotifyContacts);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						КонецЕсли;
						лПараметрыОтправкиДокумента.Вставить("OnlyHref", Истина);
					КонецЕсли;
					
					ДатаОперации = ТекущаяДата();
					
					СтатусЛицензииБезОплаты = Неопределено;
					Ошибка28 = Ложь;
					лРезультатОтправкиДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/sendfree", лПараметрыОтправкиДокумента, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					Если лРезультатОтправкиДокумента.Code <> 0 Тогда
						НеПоказыватьОшибку = Ложь;
						Если лРезультатОтправкиДокумента.Code = 50 Тогда
							СтатусЛицензииБезОплаты = Перечисления.скEDI_СтатусыЛицензииБезОплаты.Активировано;
							НеПоказыватьОшибку = Истина;
						ИначеЕсли лРезультатОтправкиДокумента.Code = 51 Тогда
							СтатусЛицензииБезОплаты = Перечисления.скEDI_СтатусыЛицензииБезОплаты.АктивированоЛимит;
							НеПоказыватьОшибку = Истина;
						ИначеЕсли лРезультатОтправкиДокумента.Code = 52 Тогда
							СтатусЛицензииБезОплаты = Перечисления.скEDI_СтатусыЛицензииБезОплаты.ЛимитИсчерпан;
							НеПоказыватьОшибку = Истина;
						ИначеЕсли лРезультатОтправкиДокумента.Code = 53 Тогда
							СтатусЛицензииБезОплаты = Перечисления.скEDI_СтатусыЛицензииБезОплаты.ЛимитИсчерпан;
						ИначеЕсли лРезультатОтправкиДокумента.Code = 28 Тогда // помилка шифрування, відсутні сертифікати шифрування одержувача
							Ошибка28 = Истина;
						КонецЕсли;
						Если НеПоказыватьОшибку Тогда
							Замечание = лРезультатОтправкиДокумента.Message;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
						Иначе
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							Замечание = НСтр("ru = 'Ошибка отправки документа:'; uk = 'Помилка відправки документа:'") + " " + лРезультатОтправкиДокумента.Message;
							СобытиеОтправкиОписание = лРезультатОтправкиДокумента.Message;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						КонецЕсли;
						
						тDocVer = Неопределено;
						Если лРезультатОтправкиДокумента.Свойство("DocVer", тDocVer) Тогда
							Если ЗначениеЗаполнено(тDocVer) Тогда
								лDocVer = тDocVer;
							КонецЕсли;
						КонецЕсли;
						
						тСылкаНаДокумент = Неопределено;
						Если лРезультатОтправкиДокумента.Свойство("DocHref", тСылкаНаДокумент) Тогда
							Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
								лСсылкаНаДокумент = тСылкаНаДокумент;
							КонецЕсли;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(лРезультатОтправкиДокумента.FileName) Тогда
							лИмяФайла = лРезультатОтправкиДокумента.FileName;
							НовоеСостояниеЭлектронногоДокумента = Неопределено;
						ИначеЕсли Не Ошибка28 Тогда
							Продолжить;
						КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(лРезультатОтправкиДокумента.FileName) Тогда
						лИмяФайла = лРезультатОтправкиДокумента.FileName;
						
						тDocVer = Неопределено;
						Если лРезультатОтправкиДокумента.Свойство("DocVer", тDocVer) Тогда
							Если ЗначениеЗаполнено(тDocVer) Тогда
								лDocVer = тDocVer;
							КонецЕсли;
						КонецЕсли;
						
						тСылкаНаДокумент = Неопределено;
						Если лРезультатОтправкиДокумента.Свойство("DocHref", тСылкаНаДокумент) Тогда
							Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
								лСсылкаНаДокумент = тСылкаНаДокумент;
							КонецЕсли;
						КонецЕсли;
					Иначе
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						Замечание = НСтр("ru = 'В результате отправки не получено имя файла отправленного документа на сервере СДО.'; uk = 'В результаті відправки не отримано ім''я файла відправленого документа на сервері СДО.'");
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				тТелоДокумента = Неопределено;
				Если лРезультатОтправкиДокумента.Свойство("MedocBody", тТелоДокумента) Тогда
					Если ЗначениеЗаполнено(тТелоДокумента) Тогда
						ДокументПолученРезультатПодписи = Истина;
						ТелоДокумента = тТелоДокумента;
						ИзображениеДокумента = "";
						ВложениеДокумента1 = "";
						//ИмяФайлаВложениеДокумента1 = "";
						ВложениеДокумента2 = "";
						//ИмяФайлаВложениеДокумента2 = "";
						ВложениеДокумента3 = "";
						//ИмяФайлаВложениеДокумента3 = "";
						Если ТипПодписания = "ptn" Тогда
							Если ТипЗнч(лРезультатОтправкиДокумента) = Тип("Структура") Тогда
								лКонтейнерPDFПредставленияДокумента = Неопределено;
								Если лРезультатОтправкиДокумента.Свойство("ImageBody", лКонтейнерPDFПредставленияДокумента) Тогда
									Если ТипЗнч(лКонтейнерPDFПредставленияДокумента) = Тип("Структура") Тогда
										лКонтейнерPDFПредставленияДокумента.Свойство("Body", ИзображениеДокумента);
									ИначеЕсли ТипЗнч(лКонтейнерPDFПредставленияДокумента) = Тип("Соответствие") Тогда
										ИзображениеДокумента = лКонтейнерPDFПредставленияДокумента.Получить("Body");
									КонецЕсли;
								КонецЕсли;
								лКонтейнерВложений = Неопределено;
								Если лРезультатОтправкиДокумента.Свойство("AttachmentBody", лКонтейнерВложений) Тогда
									Если ТипЗнч(лКонтейнерВложений) = Тип("Массив") Тогда
										Если ИндексВложения1 <> Неопределено Тогда
											лТелоВложения = Неопределено;
											лКонтейнерВложения = лКонтейнерВложений[ИндексВложения1];
											Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
												лКонтейнерВложения.Свойство("Body", лТелоВложения);
											ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
												лТелоВложения = лКонтейнерВложения.Получить("Body");
											КонецЕсли;
											ВложениеДокумента1 = лТелоВложения;
										КонецЕсли;
										Если ИндексВложения2 <> Неопределено Тогда
											лТелоВложения = Неопределено;
											лКонтейнерВложения = лКонтейнерВложений[ИндексВложения2];
											Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
												лКонтейнерВложения.Свойство("Body", лТелоВложения);
											ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
												лТелоВложения = лКонтейнерВложения.Получить("Body");
											КонецЕсли;
											ВложениеДокумента2 = лТелоВложения;
										КонецЕсли;
										Если ИндексВложения3 <> Неопределено Тогда
											лТелоВложения = Неопределено;
											лКонтейнерВложения = лКонтейнерВложений[ИндексВложения3];
											Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
												лКонтейнерВложения.Свойство("Body", лТелоВложения);
											ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
												лТелоВложения = лКонтейнерВложения.Получить("Body");
											КонецЕсли;
											ВложениеДокумента3 = лТелоВложения;
										КонецЕсли;
										Если ИндексВложения4 <> Неопределено Тогда
											ТекИндексВложения = ИндексВложения4;
											МассивВложенийДокумента4Результат = Новый Массив;
											Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокумента4 Цикл
												лТелоВложения = Неопределено;
												лКонтейнерВложения = лКонтейнерВложений[ТекИндексВложения];
												Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
													лКонтейнерВложения.Свойство("Body", лТелоВложения);
												ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
													лТелоВложения = лКонтейнерВложения.Получить("Body");
												КонецЕсли;
												
												ТекСтруктураВложения = Новый Структура;
												ТекСтруктураВложения.Вставить("ИмяФайлаВложениеДокумента", ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента);
												ТекСтруктураВложения.Вставить("ВложениеДокумента", лТелоВложения);
												МассивВложенийДокумента4Результат.Добавить(ТекСтруктураВложения);
												ТекИндексВложения = ТекИндексВложения + 1;
											КонецЦикла;
											МассивВложенийДокумента4 = МассивВложенийДокумента4Результат;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							ИначеЕсли ТипЗнч(лРезультатОтправкиДокумента) = Тип("Соответствие") Тогда
								лКонтейнерPDFПредставленияДокумента = лРезультатОтправкиДокумента.Получить("ImageBody");
								Если ТипЗнч(лКонтейнерPDFПредставленияДокумента) = Тип("Структура") Тогда
									лКонтейнерPDFПредставленияДокумента.Свойство("Body", ИзображениеДокумента);
								ИначеЕсли ТипЗнч(лКонтейнерPDFПредставленияДокумента) = Тип("Соответствие") Тогда
									ИзображениеДокумента = лКонтейнерPDFПредставленияДокумента.Получить("Body");
								КонецЕсли;
								
								лКонтейнерВложений = лРезультатОтправкиДокумента.Получить("AttachmentBody");
								Если ТипЗнч(лКонтейнерВложений) = Тип("Массив") Тогда
									Если ИндексВложения1 <> Неопределено Тогда
										лТелоВложения = Неопределено;
										лКонтейнерВложения = лКонтейнерВложений[ИндексВложения1];
										Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
											лКонтейнерВложения.Свойство("Body", лТелоВложения);
										ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
											лТелоВложения = лКонтейнерВложения.Получить("Body");
										КонецЕсли;
										ВложениеДокумента1 = лТелоВложения;
									КонецЕсли;
									Если ИндексВложения2 <> Неопределено Тогда
										лТелоВложения = Неопределено;
										лКонтейнерВложения = лКонтейнерВложений[ИндексВложения2];
										Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
											лКонтейнерВложения.Свойство("Body", лТелоВложения);
										ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
											лТелоВложения = лКонтейнерВложения.Получить("Body");
										КонецЕсли;
										ВложениеДокумента2 = лТелоВложения;
									КонецЕсли;
									Если ИндексВложения3 <> Неопределено Тогда
										лТелоВложения = Неопределено;
										лКонтейнерВложения = лКонтейнерВложений[ИндексВложения3];
										Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
											лКонтейнерВложения.Свойство("Body", лТелоВложения);
										ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
											лТелоВложения = лКонтейнерВложения.Получить("Body");
										КонецЕсли;
										ВложениеДокумента3 = лТелоВложения;
									КонецЕсли;
									Если ИндексВложения4 <> Неопределено Тогда
										ТекИндексВложения = ИндексВложения4;
										МассивВложенийДокумента4Результат = Новый Массив;
										Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокумента4 Цикл
											лТелоВложения = Неопределено;
											лКонтейнерВложения = лКонтейнерВложений[ТекИндексВложения];
											Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
												лКонтейнерВложения.Свойство("Body", лТелоВложения);
											ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
												лТелоВложения = лКонтейнерВложения.Получить("Body");
											КонецЕсли;
											
											ТекСтруктураВложения = Новый Структура;
											ТекСтруктураВложения.Вставить("ИмяФайлаВложениеДокумента", ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента);
											ТекСтруктураВложения.Вставить("ВложениеДокумента", лТелоВложения);
											МассивВложенийДокумента4Результат.Добавить(ТекСтруктураВложения);
											ТекИндексВложения = ТекИндексВложения + 1;
										КонецЦикла;
										МассивВложенийДокумента4 = МассивВложенийДокумента4Результат;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						
						
						Если Не ЗначениеЗаполнено(СтатусЛицензииБезОплаты) Тогда
							Запрос = Новый Запрос;
							Запрос.Текст = "ВЫБРАТЬ
							               |	скEDI_СтатусыЛицензииСрезПоследних.СтатусЛицензииБезОплаты КАК СтатусЛицензииБезОплаты
							               |ИЗ
							               |	РегистрСведений.скEDI_СтатусыЛицензии.СрезПоследних(
							               |			&Месяц,
							               |			ЕДРПОУ = &ЕДРПОУ
							               |				И Филиал = &Филиал) КАК скEDI_СтатусыЛицензииСрезПоследних";
							Запрос.УстановитьПараметр("Месяц", ТекущаяДата());
							Запрос.УстановитьПараметр("ЕДРПОУ", лОрганизацияEDI.Код);
							Запрос.УстановитьПараметр("Филиал", лОрганизацияEDI.Филиал);
							
							РезультатЗапроса = Запрос.Выполнить();
							Если РезультатЗапроса.Пустой() Тогда
								СтатусЛицензииБезОплаты = Перечисления.скEDI_СтатусыЛицензииБезОплаты.Активировано;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтатусЛицензииБезОплаты) Тогда
					СтатусыЛицензииМенеджерЗаписи = РегистрыСведений.скEDI_СтатусыЛицензии.СоздатьМенеджерЗаписи();
					СтатусыЛицензииМенеджерЗаписи.ЕДРПОУ = лОрганизацияEDI.Код;
					СтатусыЛицензииМенеджерЗаписи.Филиал = лОрганизацияEDI.Филиал;
					СтатусыЛицензииМенеджерЗаписи.Период = НачалоМесяца(ТекущаяДата());
					СтатусыЛицензииМенеджерЗаписи.СтатусЛицензииБезОплаты = СтатусЛицензииБезОплаты;
					СтатусыЛицензииМенеджерЗаписи.Записать(Истина);
				КонецЕсли;
				
				ДокументБылСоздан = Ложь;
				//Если НЕ ДанныеДокумента.ЕстьОшибки Тогда//??? И ДокументБылПодписан Тогда
				Если ДокументПолученРезультатПодписи или Ошибка28 Тогда
					
					// Если нет электронного документа, то создать его. Если документ есть, то надо проверить, есть ли в нём таблица реквизитов, если её нет -
					// поместить из поля "РеквизитыЭлектронногоДокумента" структуры "ДанныеДокумента".
					// Зафиксировать событие создания документа.
					ДокументСозданНаОсновании = Неопределено;
					МассивДанныхПоСвязаннымДокументам = Неопределено;
					Если Не ЗначениеЗаполнено(ДанныеДокумента.ЭлектронныйДокумент) Тогда
						
						лДанныеЗаполненияЭлектронногоДокумента = Новый Структура;
						
						лСтруктураОсновныхДанныхДокумента = Новый Структура;
						лСтруктураОсновныхДанныхДокумента.Вставить("Документ1С",               ДанныеДокумента.Документ1С);
						лСтруктураОсновныхДанныхДокумента.Вставить("ВидЭлектронногоДокумента", ДанныеДокумента.ВидЭлектронногоДокумента);
						лСтруктураОсновныхДанныхДокумента.Вставить("ЭлектронныйДокумент",      ДанныеДокумента.ЭлектронныйДокумент);
						
						//Если ДанныеДокумента.Свойство("ПараметрыДляСозданияЭлектронногоДокумента") Тогда
						Если ЗначениеЗаполнено(ДанныеДокумента.ПараметрыСозданияДокументов) Тогда
							ДозаполнитьПараметрыСозданияЭлектронногоДокумента(ДанныеДокумента.ПараметрыСозданияДокументов, ДанныеДокумента.Организация);
							ПараметрыСозданияДокументов = ДанныеДокумента.ПараметрыСозданияДокументов;
							
							лСтруктураОсновныхДанныхДокумента.Вставить("Дата",           ДанныеДокумента.ПараметрыСозданияДокументов.ДатаЭлектронногоДокумента);
							лСтруктураОсновныхДанныхДокумента.Вставить("Номер",          ДанныеДокумента.ПараметрыСозданияДокументов.НомерЭлектронногоДокумента);
							лСтруктураОсновныхДанныхДокумента.Вставить("ДатаДокумента",  ДанныеДокумента.ПараметрыСозданияДокументов.ДатаЭлектронногоДокумента);
							лСтруктураОсновныхДанныхДокумента.Вставить("НомерДокумента", ДанныеДокумента.ПараметрыСозданияДокументов.НомерЭлектронногоДокумента);
							лСтруктураОсновныхДанныхДокумента.Вставить("СуммаДокумента", ДанныеДокумента.ПараметрыСозданияДокументов.СуммаЭлектронногоДокумента);
							лСтруктураОсновныхДанныхДокумента.Вставить("СуммаНДС",       ДанныеДокумента.ПараметрыСозданияДокументов.СуммаНДСЭлектронногоДокумента);
							лСтруктураОсновныхДанныхДокумента.Вставить("СуммаБезНДС",    ДанныеДокумента.ПараметрыСозданияДокументов.СуммаБезНДСЭлектронногоДокумента);
							лСтруктураОсновныхДанныхДокумента.Вставить("ЕДРПОУВладельцаШаблона",     ДанныеДокумента.ПараметрыСозданияДокументов.ЕДРПОУВладельцаШаблона);
							лСтруктураОсновныхДанныхДокумента.Вставить("ИмяШаблона",     ДанныеДокумента.ПараметрыСозданияДокументов.ИмяШаблона);
							лСтруктураОсновныхДанныхДокумента.Вставить("ВерсияШаблона",     ДанныеДокумента.ПараметрыСозданияДокументов.ВерсияШаблона);
							лСтруктураОсновныхДанныхДокумента.Вставить("ВхИсх",          ДанныеДокумента.ПараметрыСозданияДокументов.ВхИсх);
							
							лСтруктураОсновныхДанныхДокумента.Вставить("ГдеСоздан", ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе"));
							лСтруктураОсновныхДанныхДокумента.Вставить("ИдентификаторДокумента", ДанныеДокумента.ПараметрыСозданияДокументов.DocId);
							лСтруктураОсновныхДанныхДокумента.Вставить("DocId", ДанныеДокумента.ПараметрыСозданияДокументов.DocId);
							лСтруктураОсновныхДанныхДокумента.Вставить("ИдентификаторДокументаВБазеДанныхКонтрагента", ДанныеДокумента.ПараметрыСозданияДокументов.OutId);
							лСтруктураОсновныхДанныхДокумента.Вставить("OutId", ДанныеДокумента.ПараметрыСозданияДокументов.OutId);
							лСтруктураОсновныхДанныхДокумента.Вставить("NOTATION", ДанныеДокумента.ПараметрыСозданияДокументов.NOTATION);
							
							лСтруктураОсновныхДанныхДокумента.Вставить("ИмяФайлаДФС", ДанныеДокумента.ПараметрыСозданияДокументов.ИмяФайлаДФС);
							лСтруктураОсновныхДанныхДокумента.Вставить("ИННПродавца", ДанныеДокумента.ПараметрыСозданияДокументов.ИННПродавца);
							лСтруктураОсновныхДанныхДокумента.Вставить("КодФилиалаПродавца", ДанныеДокумента.ПараметрыСозданияДокументов.КодФилиалаПродавца);
							лСтруктураОсновныхДанныхДокумента.Вставить("ИННПокупателя", ДанныеДокумента.ПараметрыСозданияДокументов.ИННПокупателя);
							лСтруктураОсновныхДанныхДокумента.Вставить("КодФилиалаПокупателя", ДанныеДокумента.ПараметрыСозданияДокументов.КодФилиалаПокупателя);
							лСтруктураОсновныхДанныхДокумента.Вставить("РегистрируетсяВЕРННПокупателем", ДанныеДокумента.ПараметрыСозданияДокументов.РегистрируетсяВЕРННПокупателем);
							
							лДокументСозданНаОсновании = Неопределено;
							Если ПараметрыСозданияДокументов.Свойство("ДокументСозданНаОсновании", лДокументСозданНаОсновании) Тогда
								ДокументСозданНаОсновании = лДокументСозданНаОсновании;
							КонецЕсли;
							лМассивДанныхПоСвязаннымДокументам = Неопределено;
							Если ПараметрыСозданияДокументов.Свойство("МассивДанныхПоСвязаннымДокументам", лМассивДанныхПоСвязаннымДокументам) Тогда
								МассивДанныхПоСвязаннымДокументам = лМассивДанныхПоСвязаннымДокументам;
							КонецЕсли;
							лПоДаннымХранилищаРеквизитов = Неопределено;
							Если ДанныеДокумента.ПараметрыСозданияДокументов.Свойство("ПоДаннымХранилищаРеквизитов", лПоДаннымХранилищаРеквизитов) Тогда
								лСтруктураОсновныхДанныхДокумента.Вставить("ПоДаннымХранилищаРеквизитов", лПоДаннымХранилищаРеквизитов);
							КонецЕсли;
							лСтруктураОсновныхДанныхДокумента.Вставить("ЕДРПОУКонтрагента",        ДанныеДокумента.ПараметрыСозданияДокументов.ЕДРПОУКонтрагента);
							лСтруктураОсновныхДанныхДокумента.Вставить("ФилиалКонтрагента",        ДанныеДокумента.ПараметрыСозданияДокументов.ФилиалКонтрагента);
						Иначе
							лСтруктураОсновныхДанныхДокумента.Вставить("ПоДаннымХранилищаРеквизитов", Ложь);
							
							лСтруктураДанныхКонтрагента = скEDI_НастройкиПодКонфигурацию.ПолучитьДанныеКонтрагентаПоДокументу1С(ДанныеДокумента.Документ1С);
							лСтруктураОсновныхДанныхДокумента.Вставить("ЕДРПОУКонтрагента",        лСтруктураДанныхКонтрагента.ЕДРПОУКонтрагента);
							лСтруктураОсновныхДанныхДокумента.Вставить("ФилиалКонтрагента",        лСтруктураДанныхКонтрагента.ФилиалКонтрагента);
						КонецЕсли;
						
						//Если ДанныеДокумента.Свойство("РеквизитыЭлектронногоДокумента") Тогда
						Если ЗначениеЗаполнено(ДанныеДокумента.СоответствиеЗначенийРеквизитов) Тогда		
							лСтруктураОсновныхДанныхДокумента.Вставить("РеквизитыЭлектронногоДокумента", ДанныеДокумента.СоответствиеЗначенийРеквизитов);					
						КонецЕсли;
						
						лДанныеЗаполненияЭлектронногоДокумента.Вставить("ОсновныеДанные", лСтруктураОсновныхДанныхДокумента);
						
						лЭлектронныйДокументОбъект = Документы.скEDI_ЭлектронныйДокумент.СоздатьДокумент();
						лЭлектронныйДокументОбъект.Заполнить(лДанныеЗаполненияЭлектронногоДокумента);
						
						ДокументБылСоздан = Истина;
						НомерВерсииСодержания = 1;
					Иначе	
						лЭлектронныйДокументОбъект = ДанныеДокумента.ЭлектронныйДокумент.ПолучитьОбъект();
						
						Если ТаблицаДанныхДокументов.Колонки.Найти("ПараметрыСозданияДокументов") <> Неопределено Тогда
							Если ЗначениеЗаполнено(ДанныеДокумента.ПараметрыСозданияДокументов) Тогда
								ДозаполнитьПараметрыСозданияЭлектронногоДокумента(ДанныеДокумента.ПараметрыСозданияДокументов, ДанныеДокумента.Организация);
								ПараметрыСозданияДокументов = ДанныеДокумента.ПараметрыСозданияДокументов;
								
								лЭлектронныйДокументОбъект.Дата = ДанныеДокумента.ПараметрыСозданияДокументов.ДатаЭлектронногоДокумента;
								лЭлектронныйДокументОбъект.Номер = ДанныеДокумента.ПараметрыСозданияДокументов.НомерЭлектронногоДокумента;
								лЭлектронныйДокументОбъект.ДатаДокумента = ДанныеДокумента.ПараметрыСозданияДокументов.ДатаЭлектронногоДокумента;
								лЭлектронныйДокументОбъект.НомерДокумента = ДанныеДокумента.ПараметрыСозданияДокументов.НомерЭлектронногоДокумента;
								лЭлектронныйДокументОбъект.СуммаДокумента = ДанныеДокумента.ПараметрыСозданияДокументов.СуммаЭлектронногоДокумента;
								лЭлектронныйДокументОбъект.СуммаНДС = ДанныеДокумента.ПараметрыСозданияДокументов.СуммаНДСЭлектронногоДокумента;
								лЭлектронныйДокументОбъект.СуммаБезНДС = ДанныеДокумента.ПараметрыСозданияДокументов.СуммаБезНДСЭлектронногоДокумента;
								лЭлектронныйДокументОбъект.ЕДРПОУВладельцаШаблона = ДанныеДокумента.ПараметрыСозданияДокументов.ЕДРПОУВладельцаШаблона;
								лЭлектронныйДокументОбъект.ИмяШаблона = ДанныеДокумента.ПараметрыСозданияДокументов.ИмяШаблона;
								лЭлектронныйДокументОбъект.ВерсияШаблона = ДанныеДокумента.ПараметрыСозданияДокументов.ВерсияШаблона;
								лЭлектронныйДокументОбъект.ВхИсх = ДанныеДокумента.ПараметрыСозданияДокументов.ВхИсх;
								
								Если лЭлектронныйДокументОбъект.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ПустаяСсылка") Тогда
									Если лЭлектронныйДокументОбъект.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
										лЭлектронныйДокументОбъект.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе");
									ИначеЕсли лЭлектронныйДокументОбъект.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
										лЭлектронныйДокументОбъект.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ПолученОтКонтрагента");
									КонецЕсли;
								КонецЕсли;
								Если лЭлектронныйДокументОбъект.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
									лЭлектронныйДокументОбъект.ИдентификаторДокумента = ДанныеДокумента.ПараметрыСозданияДокументов.DocId;
									лЭлектронныйДокументОбъект.DocId = ДанныеДокумента.ПараметрыСозданияДокументов.DocId;
									лЭлектронныйДокументОбъект.ИдентификаторДокументаВБазеДанныхКонтрагента = ДанныеДокумента.ПараметрыСозданияДокументов.OutId;
									лЭлектронныйДокументОбъект.OutId = ДанныеДокумента.ПараметрыСозданияДокументов.OutId;
									лЭлектронныйДокументОбъект.NOTATION = ДанныеДокумента.ПараметрыСозданияДокументов.NOTATION;
								ИначеЕсли лЭлектронныйДокументОбъект.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ПолученОтКонтрагента") Тогда
									
								КонецЕсли;
								
								лЭлектронныйДокументОбъект.ИмяФайлаДФС = ДанныеДокумента.ПараметрыСозданияДокументов.ИмяФайлаДФС;
								лЭлектронныйДокументОбъект.ИННПродавца = ДанныеДокумента.ПараметрыСозданияДокументов.ИННПродавца;
								лЭлектронныйДокументОбъект.КодФилиалаПродавца = ДанныеДокумента.ПараметрыСозданияДокументов.КодФилиалаПродавца;
								лЭлектронныйДокументОбъект.ИННПокупателя = ДанныеДокумента.ПараметрыСозданияДокументов.ИННПокупателя;
								лЭлектронныйДокументОбъект.КодФилиалаПокупателя = ДанныеДокумента.ПараметрыСозданияДокументов.КодФилиалаПокупателя;
								лЭлектронныйДокументОбъект.РегистрируетсяВЕРННПокупателем = ДанныеДокумента.ПараметрыСозданияДокументов.РегистрируетсяВЕРННПокупателем;
								
								лЭлектронныйДокументОбъект.ЕДРПОУКонтрагента = ДанныеДокумента.ПараметрыСозданияДокументов.ЕДРПОУКонтрагента;
								лЭлектронныйДокументОбъект.ФилиалКонтрагента = ДанныеДокумента.ПараметрыСозданияДокументов.ФилиалКонтрагента;
								
								лПоДаннымХранилищаРеквизитов = Неопределено;
								Если ДанныеДокумента.ПараметрыСозданияДокументов.Свойство("ПоДаннымХранилищаРеквизитов", лПоДаннымХранилищаРеквизитов) Тогда
									лЭлектронныйДокументОбъект.ПоДаннымХранилищаРеквизитов = лПоДаннымХранилищаРеквизитов;
								КонецЕсли;
								Если ЗначениеЗаполнено(ДанныеДокумента.СоответствиеЗначенийРеквизитов) Тогда
									лЭлектронныйДокументОбъект.ХранилищеРеквизитовЭлектронногоДокумента = Новый ХранилищеЗначения(ДанныеДокумента.СоответствиеЗначенийРеквизитов);
								КонецЕсли;
								
								лДокументСозданНаОсновании = Неопределено;
								Если ПараметрыСозданияДокументов.Свойство("ДокументСозданНаОсновании", лДокументСозданНаОсновании) Тогда
									ДокументСозданНаОсновании = лДокументСозданНаОсновании;
								КонецЕсли;
								лМассивДанныхПоСвязаннымДокументам = Неопределено;
								Если ПараметрыСозданияДокументов.Свойство("МассивДанныхПоСвязаннымДокументам", лМассивДанныхПоСвязаннымДокументам) Тогда
									МассивДанныхПоСвязаннымДокументам = лМассивДанныхПоСвязаннымДокументам;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						НомерВерсииСодержания = ПолучитьСледующийНомерВерсииСодержанияЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент);
					КонецЕсли;
					
					Если ДокументПолученРезультатПодписи Тогда
						Если Не ПодписиПолученыИзЭлектронногоДокумента Тогда
							Для Каждого СтрокаПодписи из ТаблицаПодписейПоДокументу Цикл
								НоваяСтрокаПодписи = лЭлектронныйДокументОбъект.Подписи.Добавить();
								НоваяСтрокаПодписи.Подпись = СтрокаПодписи.Подпись;
							КонецЦикла;
						КонецЕсли;
						Для Каждого СтрокаПодписи Из ТаблицаНакладываемыхНаДокументПодписей Цикл
							ПодписиВДокументе = лЭлектронныйДокументОбъект.Подписи.НайтиСтроки(Новый Структура("Подпись", СтрокаПодписи.Подпись));
							Для Каждого ПодписьВДокументе Из ПодписиВДокументе Цикл
								ПодписьВДокументе.Подпись = СтрокаПодписи.ВыбранаяПодпись;
								ПодписьВДокументе.Подписано = Истина;
								ПодписьВДокументе.ДатаПодписания = ДатаОперации;
							КонецЦикла;
						КонецЦикла;
					КонецЕсли;
					
					Если Ошибка28 Тогда
						лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан");
						лЭлектронныйДокументОбъект.ОшибкаШифрованияПриОтправке = Истина;
					Иначе
						лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
					КонецЕсли;
					лСостояниеМногостороннегоДокумента = лЭлектронныйДокументОбъект.Состояние;
					УстановитьПараметрыМаршрутаМногостороннегоДокумента(лЭлектронныйДокументОбъект, ПараметрыСозданияДокументов, лЭлектронныйДокументОбъект.RoutePosition, ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение"));
					Если ОбновитьМаршрут Тогда
						УстановитьПараметрыМаршрутаМногостороннегоДокумента(лЭлектронныйДокументОбъект, Неопределено, ОбновитьМаршрутНомерВМаршруте, лСостояниеМногостороннегоДокумента);
					КонецЕсли;
					
					Если лЭлектронныйДокументОбъект.ИмяФайла = "" Тогда
						лЭлектронныйДокументОбъект.ИмяФайла  = лИмяФайла;
					КонецЕсли;
					Если лЭлектронныйДокументОбъект.ИмяФайлаДФС = "" Тогда
						Если лИмяФайлаДФС <> "" Тогда
							лЭлектронныйДокументОбъект.ИмяФайлаДФС = лИмяФайлаДФС;
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(лDocVer) Тогда
						Если лЭлектронныйДокументОбъект.DocVer = 0 Тогда
							лЭлектронныйДокументОбъект.DocVer  = лDocVer;
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(лСсылкаНаДокумент) Тогда
						Если лЭлектронныйДокументОбъект.DocHref = "" Тогда
							лЭлектронныйДокументОбъект.DocHref  = лСсылкаНаДокумент;
						КонецЕсли;
					КонецЕсли;
					СобытиеОтправкиСсылкиНаДокумент = Неопределено;
					ОписаниеПоОтправкеСсылкиНаДокумент = "";
					Если ТипЗнч(МассивОтправкаСсылкиНаДокумент) = Тип("Массив") Тогда
						Если МассивОтправкаСсылкиНаДокумент.Количество() > 0 Тогда
							ОписаниеПоОтправкеСсылкиНаДокумент = НСтр("ru = 'на электронную почту:'; uk = 'на електронну пошту:'");
							Если ЗначениеЗаполнено(лСсылкаНаДокумент) Тогда
								СобытиеОтправкиСсылкиНаДокумент = Перечисления.скEDI_СобытияЭлектронныхДокументов.ОтправкаСсылки;
							КонецЕсли;
							лЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент.Очистить();
							Для Каждого СтрокаМассиваНастроекОтправкаСсылкиНаДокумент из МассивОтправкаСсылкиНаДокумент Цикл
								НоваяСтрокаОтправкаСсылкиНаДокумент = лЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент.Добавить();
								НоваяСтрокаОтправкаСсылкиНаДокумент.ЭлектроннаяПочта = СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта;
								НоваяСтрокаОтправкаСсылкиНаДокумент.Комментарий = СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий;
								
								ОписаниеПоОтправкеСсылкиНаДокумент = ОписаниеПоОтправкеСсылкиНаДокумент + Символы.ПС + СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта;
								Если ЗначениеЗаполнено(СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий) Тогда
									ОписаниеПоОтправкеСсылкиНаДокумент = ОписаниеПоОтправкеСсылкиНаДокумент + " - " + СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
					лЭлектронныйДокументОбъект.ПоследняяОперация = ТекущаяДата();
					ЗаписатьЭлектронныйДокументСПредварительнымПоискомСвязаных(лЭлектронныйДокументОбъект, ДанныеДокумента.ВидЭлектронногоДокумента, ДанныеДокумента.ВидЭлектронногоДокумента.Владелец, ДокументСозданНаОсновании);
					ПрименитьМассивДанныхПоСвязаннымДокументам(лЭлектронныйДокументОбъект.Ссылка, МассивДанныхПоСвязаннымДокументам);
					
					Если ДокументБылСоздан Тогда
						НомерФайла = 1;
						Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента1) Тогда
							СохранитьВложениеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка, НомерФайла, ВложениеДокументаБезПодписи1, ИмяФайлаВложениеДокумента1, ВложениеДокументаФайл1);
							НомерФайла = НомерФайла + 1;
						КонецЕсли;
						Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента2) Тогда
							СохранитьВложениеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка, НомерФайла, ВложениеДокументаБезПодписи2, ИмяФайлаВложениеДокумента2, ВложениеДокументаФайл2);
							НомерФайла = НомерФайла + 1;
						КонецЕсли;
						Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента3) Тогда
							СохранитьВложениеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка, НомерФайла, ВложениеДокументаБезПодписи3, ИмяФайлаВложениеДокумента3, ВложениеДокументаФайл3);
							НомерФайла = НомерФайла + 1;
						КонецЕсли;
						Если ТипЗнч(МассивВложенийДокументаБезПодписи4) = Тип("Массив") или ТипЗнч(МассивВложенийДокументаБезПодписи4) = Тип("ФиксированныйМассив") Тогда
							Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокументаБезПодписи4 Цикл
								Попытка
									ВложениеДокументаФайл = ЭлементМассиваВложенийДокумента4.ВложениеДокументаФайл;
								Исключение
									ВложениеДокументаФайл = Неопределено;
								КонецПопытки;
								СохранитьВложениеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка, НомерФайла, ЭлементМассиваВложенийДокумента4.ВложениеДокумента, ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента, ВложениеДокументаФайл);
								НомерФайла = НомерФайла + 1;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
					Если ДокументПолученРезультатПодписи Тогда
						скEDI_ВнешниеХранилища.СохранитьСодержимоеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка,
							ПолучитьСледующийНомерВерсииСодержанияЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка),
							ТелоДокумента,
							ИзображениеДокумента,
							ВложениеДокумента1,
							ИмяФайлаВложениеДокумента1,
							ВложениеДокумента2,
							ИмяФайлаВложениеДокумента2,
							ВложениеДокумента3,
							ИмяФайлаВложениеДокумента3,
							МассивВложенийДокумента4,
							ТекущаяДата(),
							лИмяФайла,
							лDocVer,
							лСсылкаНаДокумент,
							Ложь,
							Ложь,
							Неопределено,
							Ложь
						);
						
						Для Каждого ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов из МассивДанныеПоПодписямВРегистрФаксимилеЭлектронныхДокументов Цикл
							МенеджерЗаписи = РегистрыСведений.скEDI_ФаксимилеЭлектронныхДокументов.СоздатьМенеджерЗаписи();
							МенеджерЗаписи.ЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
							МенеджерЗаписи.КодУровняПодписи = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.КодУровняПодписи;
							МенеджерЗаписи.ДРФО = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.ДРФО;
							МенеджерЗаписи.Сторона = лЭлектронныйДокументОбъект.RoutePosition;
							МенеджерЗаписи.ТелоФаксимиле = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.ТелоФаксимиле;
							МенеджерЗаписи.ИмяПодписанта = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.ИмяПодписанта;
							МенеджерЗаписи.ДолжностьПодписанта = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.ДолжностьПодписанта;
							МенеджерЗаписи.Роль = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.Роль;
							МенеджерЗаписи.Записать(Истина);
						КонецЦикла;
						
						КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
					КонецЕсли;
					
					ДанныеДокумента.ЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
					ДанныеДокумента.Состояние = лЭлектронныйДокументОбъект.Состояние;
					Если ДокументБылСоздан Тогда
						ЗафиксироватьСобытиеЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент, ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.Создание"), , ДатаСозданияДокумента);
					КонецЕсли;
					
					Если ДокументПолученРезультатПодписи Тогда
						ОписаниеНаложеныхПодписей = ЗафиксироватьСобытияПоПодписаниюДокумента(ДанныеДокумента.ЭлектронныйДокумент, СписокНаложенныхНаДокументПодписей);
						
						СобытиеДляЖурнала = НСтр("ru = 'Документ подписан'; uk = 'Документ підписано'") + ": """
						+ лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента.Наименование + """ №" + лЭлектронныйДокументОбъект.НомерДокумента + НСтр("ru = ' от '; uk = ' від '") + Формат(лЭлектронныйДокументОбъект.ДатаДокумента, "ДФ=dd.MM.yyyy")
						+ Символы.ПС + ОписаниеНаложеныхПодписей;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, СобытиеДляЖурнала, , Ложь);
						
						
						// Зафиксировать событие отправки электронного документа.
						лОписаниеПоОтправке = НСтр("ru = 'Документ отправлен'; uk = 'Документ відправлено'")
						+ ?(OnlyHref, " " + НСтр("ru = 'в виде ссылки'; uk = 'у вигляді посилання'"), "")
						+ "
						|"
						+  НСтр("ru = 'Дата и время отправки: '; uk = 'Дата та час відправки: '") + Формат(ДатаОперации, "ДФ='dd.MM.yyyy HH:mm:ss'") + "
						|"
						+ НСтр("ru = 'Получатель: '; uk = 'Одержувач: '") + ЭлектронныйДокумент.ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ЭлектронныйДокумент.ФилиалКонтрагента), " (" + ЭлектронныйДокумент.ФилиалКонтрагента + ")", "") + "
						|"
						+ НСтр("ru = 'Имя файла: '; uk = 'Ім''я файлу: '") + лИмяФайла;
						
						Если ЗначениеЗаполнено(лСсылкаНаДокумент) Тогда
							лОписаниеПоОтправке = лОписаниеПоОтправке + "
							|"
							+ НСтр("ru = 'Ссылка на документ: '; uk = 'Посилання на документ: '") + лСсылкаНаДокумент;
						КонецЕсли;
						
						лОписаниеПоОтправке = лОписаниеПоОтправке + "
						|
						|"
						+ НСтр("ru = 'Подписи: '; uk = 'Підписи: '");
						ДополнитьОписаниеДаннымиПоПодписямКонтрагента(ПолучитьМассивПодписейКонтрагентаИзПодписанногоЭлектронногоДокумента(ТелоДокумента), лОписаниеПоОтправке, Неопределено, ОтражатьTSPСтатус, ОтражатьOCSPСтатус);
						
						СобытиеОтправки = Перечисления.скEDI_СобытияЭлектронныхДокументов.Отправка;
						Если ЗначениеЗаполнено(СобытиеОтправкиОписание) Тогда
							лОписаниеПоОтправке = лОписаниеПоОтправке + "
							|
							|" + СобытиеОтправкиОписание;
						КонецЕсли;
						ЗафиксироватьСобытиеЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент, СобытиеОтправки, лОписаниеПоОтправке, ДатаОперации, лDocVer, лИмяФайла, лИмяФайлаКвитанции);
						
						Если ЗначениеЗаполнено(СобытиеОтправкиСсылкиНаДокумент) Тогда
							лОписаниеПоОтправкеСсылкиНаДокумент = НСтр("ru = 'Отправлена ссылка на Электронный документ'; uk = 'Відправлено посилання на Електронний документ'")
							+ Символы.ПС
							+ лСсылкаНаДокумент
							+ Символы.ПС
							+ ОписаниеПоОтправкеСсылкиНаДокумент;
							
							ЗафиксироватьСобытиеЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент, СобытиеОтправкиСсылкиНаДокумент, лОписаниеПоОтправкеСсылкиНаДокумент, ДатаОперации, лDocVer, лИмяФайла, лИмяФайлаКвитанции);
						КонецЕсли;
							
						УстановитьСнятьОтметкуОбработано(ДанныеДокумента.ЭлектронныйДокумент, Истина);
						
						СобытиеДляЖурнала = НСтр("ru = 'Документ отправлен'; uk = 'Документ відправлено'") + ": """
						+ лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента.Наименование + """ №" + лЭлектронныйДокументОбъект.НомерДокумента + НСтр("ru = ' от '; uk = ' від '") + Формат(лЭлектронныйДокументОбъект.ДатаДокумента, "ДФ=dd.MM.yyyy");
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, СобытиеДляЖурнала, , Ложь);
						
						Если лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента.ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента Тогда
							СоглашениеОАнулированииДокументаОбработать(ДанныеДокумента.ЭлектронныйДокумент, Истина);
						КонецЕсли;
						
						
						Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
							тОрганизация = ПараметрыСобытий.Организация;
							тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
							тВхИсх = ПараметрыСобытий.ВхИсх;
							тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
							тЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
							тСостояние = лЭлектронныйДокументОбъект.Состояние;
							тДокумент1С = лЭлектронныйДокументОбъект.Документ1С;
							тМассивВложений = Неопределено;
							ПараметрыСобытий.Свойство("МассивВложений", тМассивВложений);
							Если ТипЗнч(тМассивВложений) <> Тип("Массив") Тогда
								Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
									тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
								Иначе
									тМассивВложений = Новый Массив;
								КонецЕсли;
								ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
							КонецЕсли;
							Если ТипЗнч(ПараметрыСобытий.МассивПодписей) = Тип("Массив") Тогда
								тМассивПодписей = ПараметрыСобытий.МассивПодписей;
							Иначе
								тМассивПодписей = Новый Массив;
							КонецЕсли;
							ОбработатьСобытие_ПриПодписании(тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписей, тДокумент1С, тМассивВложений);
							ОбработатьСобытие_ПриОтправке(тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписей, тДокумент1С, тМассивВложений);
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Обновление журнала операций.
	Если ЖурналОперации <> "" Тогда
		Если ДополнительныеПараметры.ЖурналОперации = "" Тогда
			ДополнительныеПараметры.ЖурналОперации = ЖурналОперации;
		Иначе
			ДополнительныеПараметры.ЖурналОперации = ДополнительныеПараметры.ЖурналОперации + Символы.ПС + ЖурналОперации;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПодписатьЭлектронныйДокументСервер()

Процедура ОтправитьКвитанцииFreeПоЭлектроннымДокументам(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоУспешноОбработаных, КоличествоПодписано) Экспорт
	ЖурналОперации                     = "";//ДополнительныеПараметры.ЖурналОперации;	
	ТаблицаНастроекПодписей = ДополнительныеПараметры.НастройкиНеобходимыхПодписей;
	ТаблицаНастроекПодписей = ?(ТипЗнч(ТаблицаНастроекПодписей) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписей, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписей);
	ТаблицаНастроекПодписейШифрования = ДополнительныеПараметры.НастройкиПодписейШифрования;
	ТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ТаблицаНастроекПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписейШифрования, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписейШифрования);

	Если ДополнительныеПараметры.Свойство("ТекстКвитанции") Тогда 
		ТекстКвитанции = ДополнительныеПараметры.ТекстКвитанции;
	Иначе	
		ТекстКвитанции = "";
	КонецЕсли;
	
	Для Каждого ДанныеДокумента Из ТаблицаДанныхДокументов Цикл
		СодержаниеЭлектронногоДокумента = Неопределено;
		ТелоДокумента              = "";
		ИзображениеДокумента       = "";
		ВложениеДокумента1         = "";
		ИмяФайлаВложениеДокумента1 = "";
		ВложениеДокумента2         = "";
		ИмяФайлаВложениеДокумента2 = "";
		ВложениеДокумента3         = "";
		ИмяФайлаВложениеДокумента3 = "";
		МассивВложенийДокумента4 = Неопределено;
		
		ПараметрыСобытий = Неопределено;
		
		ТипКвитанции               = ДополнительныеПараметры.ТипКвитанции; 
		
		ПодписыватьКвитанциюВсемиПодписями = Ложь;
		Квитанция = ПредопределенноеЗначение("Документ.скEDI_Квитанция.ПустаяСсылка");
		КвитанцияТело = "";
		КвитанцияТекст = "";
		ВидКвитанции = Неопределено;
		СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ПустаяСсылка");
		ОтражатьTSPСтатус = Истина;
		ОтражатьOCSPСтатус = Истина;
		ПараметрыСозданияКвитанции = Неопределено;
		
		ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
		лОрганизацияEDI = ДанныеДокумента.Организация;
		Если Не ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			Продолжить;
		КонецЕсли;
		// Отклонить и подтвердить мы можем полученные дкоументы. Отозвать - исходящие.
		
		Если ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент")
		или ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента")
		или ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями") Тогда
			ОтражатьTSPСтатус = Истина;
			ОтражатьOCSPСтатус = Истина;
			Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
				Если ДанныеДокумента.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ПолученОтКонтрагента") Тогда
					Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
						Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
							Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
								ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
							КонецЕсли;
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						//ИначеЕсли ЭлектронныйДокумент.IsMultisided Тогда
						//	ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Не доступно для многостороннего документа по бесплатной лицензии.'; uk = 'Не доступно для багатостороннього документу по безкоштовній ліцензії.'");
						//	ДанныеДокумента.ЕстьОшибки = Истина;
						//	ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						//	ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						//	ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						//	ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						//	Продолжить;
						КонецЕсли;
						
						ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
						ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередОтклонением;
						ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриОтклонении;
						ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
						ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
						ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
						ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
						ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
						ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
						ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
						//ПараметрыСобытий.МассивВложений = Новый Массив;
						
						СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
					ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
						Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Получен")
						или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично")
						или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьБухгалтеру")
						или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьДиректору")
						или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьПечатью")
						или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан") Тогда
							ОшибкаПолученияСодержимогоЭлДок = "";
							СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
							Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
								Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
									ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
								КонецЕсли;
								ДанныеДокумента.ЕстьОшибки = Истина;
								
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								Продолжить;
							//ИначеЕсли ЭлектронныйДокумент.IsMultisided Тогда
							//	ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Не доступно для многостороннего документа по бесплатной лицензии.'; uk = 'Не доступно для багатостороннього документу по безкоштовній ліцензії.'");
							//	ДанныеДокумента.ЕстьОшибки = Истина;
							//	ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							//	ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							//	ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							//	ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							//	Продолжить;
							КонецЕсли;
							
							ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
							ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередПодтверждением;
							ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриПодтверждении;
							ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
							ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
							ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
							ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
							ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
							ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
							ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
							//ПараметрыСобытий.МассивВложений = Новый Массив;
							
							СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
						Иначе
							Продолжить;
						КонецЕсли;
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
						Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
							Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
								ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
							КонецЕсли;
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						//ИначеЕсли ЭлектронныйДокумент.IsMultisided Тогда
						//	ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Не доступно для многостороннего документа по бесплатной лицензии.'; uk = 'Не доступно для багатостороннього документу по безкоштовній ліцензії.'");
						//	ДанныеДокумента.ЕстьОшибки = Истина;
						//	ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						//	ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						//	ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						//	ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						//	Продолжить;
						КонецЕсли;
						
						ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
						ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередОтзывом;
						ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриОтзыве;
						ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
						ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
						ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
						ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
						ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
						ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
						ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
						
						СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
				Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
					ОшибкаПолученияСодержимогоЭлДок = "";
					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
						КонецЕсли;
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						Продолжить;
					//ИначеЕсли ЭлектронныйДокумент.IsMultisided Тогда
					//	ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Не доступно для многостороннего документа по бесплатной лицензии.'; uk = 'Не доступно для багатостороннього документу по безкоштовній ліцензії.'");
					//	ДанныеДокумента.ЕстьОшибки = Истина;
					//	ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
					//	ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					//	ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
					//	ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					//	Продолжить;
					КонецЕсли;
					
					ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
					ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередОтклонением;
					ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриОтклонении;
					ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
					ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
					ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
					ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
					ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
					ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
					ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
					
					СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
				ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
					Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Получен")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьБухгалтеру")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьДиректору")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьПечатью")
					или ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан") Тогда
						ОшибкаПолученияСодержимогоЭлДок = "";
						СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
						Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
							Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
								ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
							КонецЕсли;
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							Продолжить;
						//ИначеЕсли ЭлектронныйДокумент.IsMultisided Тогда
						//	ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Не доступно для многостороннего документа по бесплатной лицензии.'; uk = 'Не доступно для багатостороннього документу по безкоштовній ліцензії.'");
						//	ДанныеДокумента.ЕстьОшибки = Истина;
						//	ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
						//	ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						//	ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
						//	ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						//	Продолжить;
						КонецЕсли;
						
						ПараметрыСобытий = Новый Структура("СобытиеПеред, СобытиеПри, Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента, ВхИсх, ГдеСоздан, Состояние, МассивВложений");
						ПараметрыСобытий.СобытиеПеред = Перечисления.скEDI_События.ПередПодтверждением;
						ПараметрыСобытий.СобытиеПри = Перечисления.скEDI_События.ПриПодтверждении;
						ПараметрыСобытий.Организация = ДанныеДокумента.Организация;
						ПараметрыСобытий.ЭлектронныйДокумент = ЭлектронныйДокумент;
						ПараметрыСобытий.Документ1С = ДанныеДокумента.Документ1С;
						ПараметрыСобытий.ВидЭлектронногоДокумента = ДанныеДокумента.ВидЭлектронногоДокумента;
						ПараметрыСобытий.ВхИсх = ДанныеДокумента.ВхИсх;
						ПараметрыСобытий.ГдеСоздан = ДанныеДокумента.ГдеСоздан;
						ПараметрыСобытий.Состояние = ДанныеДокумента.Состояние;
						
						СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО");
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		//ИначеЕсли ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
		//	ОтражатьTSPСтатус = Ложь;
		//	ОтражатьOCSPСтатус = Ложь;
		//	Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
		//		//Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
		//		//	ОшибкаПолученияСодержимогоЭлДок = "";
		//		//	СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
		//		//Иначе
		//			Продолжить;
		//		//КонецЕсли;
		//	ИначеЕсли ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
		//		Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
		//			ОшибкаПолученияСодержимогоЭлДок = "";
		//			СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
		//			Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
		//				Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
		//					ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
		//				КонецЕсли;
		//				ДанныеДокумента.ЕстьОшибки = Истина;
		//				
		//				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
		//				
		//				ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
		//				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
		//				ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
		//				Продолжить;
		//			КонецЕсли;
		//			СпособОтправки = СодержаниеЭлектронногоДокумента.ПолученоОтКонтрагентаСПомощью;
		//		ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
		//			Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан") Тогда
		//				ОшибкаПолученияСодержимогоЭлДок = "";
		//				СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
		//				Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
		//					Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
		//						ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
		//					КонецЕсли;
		//					ДанныеДокумента.ЕстьОшибки = Истина;
		//					
		//					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
		//					
		//					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
		//					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
		//					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
		//					Продолжить;
		//				КонецЕсли;
		//				СпособОтправки = СодержаниеЭлектронногоДокумента.ПолученоОтКонтрагентаСПомощью;
		//				ПодписыватьКвитанциюВсемиПодписями = Истина;
		//			Иначе
		//				Продолжить;
		//			КонецЕсли;
		//		Иначе
		//			Продолжить;
		//		КонецЕсли;
		//	КонецЕсли;
		//	//СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО")
		//ИначеЕсли ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
		//	ОтражатьTSPСтатус = Ложь;
		//	ОтражатьOCSPСтатус = Ложь;
		//	Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий") Тогда
		//		//Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
		//		//	ОшибкаПолученияСодержимогоЭлДок = "";
		//		//	СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , , , ОшибкаПолученияСодержимогоЭлДок);
		//		//Иначе
		//			Продолжить;
		//		//КонецЕсли;
		//	ИначеЕсли ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Входящий") Тогда
		//		Если ДанныеДокумента.РегистрируетсяВЕРННПокупателем Тогда
		//			Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
		//				ОшибкаПолученияСодержимогоЭлДок = "";
		//				СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
		//				Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
		//					Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
		//						ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
		//					КонецЕсли;
		//					ДанныеДокумента.ЕстьОшибки = Истина;
		//					
		//					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
		//					
		//					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
		//					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
		//					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
		//					Продолжить;
		//				КонецЕсли;
		//				СпособОтправки = СодержаниеЭлектронногоДокумента.ПолученоОтКонтрагентаСПомощью;
		//			Иначе
		//				Продолжить;
		//			КонецЕсли;
		//		Иначе
		//			Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
		//				ОшибкаПолученияСодержимогоЭлДок = "";
		//				СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
		//				Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
		//					Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
		//						ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
		//					КонецЕсли;
		//					ДанныеДокумента.ЕстьОшибки = Истина;
		//					
		//					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
		//					
		//					ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
		//					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
		//					ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
		//					Продолжить;
		//				КонецЕсли;
		//				СпособОтправки = СодержаниеЭлектронногоДокумента.ПолученоОтКонтрагентаСПомощью;
		//			ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
		//				Если ДанныеДокумента.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан") Тогда
		//					ОшибкаПолученияСодержимогоЭлДок = "";
		//					СодержаниеЭлектронногоДокумента = ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент, , Истина, , ОшибкаПолученияСодержимогоЭлДок);
		//					Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
		//						Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
		//							ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
		//						КонецЕсли;
		//						ДанныеДокумента.ЕстьОшибки = Истина;
		//						
		//						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + ОшибкаПолученияСодержимогоЭлДок);
		//						
		//						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
		//						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ОшибкаПолученияСодержимогоЭлДок);
		//						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
		//						Продолжить;
		//					КонецЕсли;
		//					СпособОтправки = СодержаниеЭлектронногоДокумента.ПолученоОтКонтрагентаСПомощью;
		//					ПодписыватьКвитанциюВсемиПодписями = Истина;
		//				Иначе
		//					Продолжить;
		//				КонецЕсли;
		//			Иначе
		//				Продолжить;
		//			КонецЕсли;
		//		КонецЕсли;
		//	КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
			ДанныеДокумента.ЕстьОшибки = Истина;		
			
			Замечание = НСтр("ru = 'Не найдено Содержание Электронного документа.'; uk = 'Не знайдено Вміст Електронного документа.'");
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
			
			ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
			ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
			
			Продолжить;
		Иначе
			ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
			ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
			ВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
			ИмяФайлаВложениеДокумента1 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
			ВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
			ИмяФайлаВложениеДокумента2 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
			ВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
			ИмяФайлаВложениеДокумента3 = СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
			МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
		КонецЕсли;
		
		Если СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ПустаяСсылка") Тогда
			ДанныеДокумента.ЕстьОшибки = Истина;		
			
			Замечание = НСтр("ru = 'Не определен Способ отправки.'; uk = 'Не визначено Спосіб відправки.'");
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
			
			ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
			ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
			
			Продолжить;
		КонецЕсли;
		
		Если не НайтиСоздатьКвитанцию(ДанныеДокумента, ДополнительныеПараметры, ЭлектронныйДокумент, ПодписыватьКвитанциюВсемиПодписями, ТипКвитанции, ТекстКвитанции, СпособОтправки, ВидКвитанции, Квитанция, КвитанцияТело, КвитанцияТекст, ПараметрыСозданияКвитанции, ЖурналОперации, Истина) Тогда
			Продолжить;
		КонецЕсли;
		Если ПодписыватьКвитанциюВсемиПодписями Тогда
			Если Квитанция = Документы.скEDI_Квитанция.ПустаяСсылка() Тогда
				Замечание = НСтр("ru = 'Не найдена подготовленая квитанция.'; uk = 'Не знайдено підготовлену квитанцію.'");
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
			КонецЕсли;
		КонецЕсли;

		лНастройкиПодписиШифрованияДляТекущейОрганизации = ТаблицаНастроекПодписейШифрования.Найти(лОрганизацияEDI, "ОрганизацияEDI");
		Если лНастройкиПодписиШифрованияДляТекущейОрганизации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТелоДокумента) Тогда			
			ДанныеДокумента.ЕстьОшибки = Истина;		
			
			Замечание = НСтр("ru = 'Не заполнено Содержание Электронного документа.'; uk = 'Не заповнено Вміст Електронного документа.'");
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
			
			ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
			ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
			ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
			
			Продолжить;
		КонецЕсли;
		
		//лСобытиеЭлектронногоДокумента    = ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.ПустаяСсылка");
		лСостояниеЭлектронногоДокумента  = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПустаяСсылка");
		лСобытиеЭлектронногоДокументаТекст = "";
		Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
			//лСобытиеЭлектронногоДокумента    = ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.ДокументОтозван");
			лСостояниеЭлектронногоДокумента  = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван");
			лСобытиеЭлектронногоДокументаТекст = НСтр("ru = 'Документ отозван'; uk = 'Документ відкликано'");
		ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
			//лСобытиеЭлектронногоДокумента    = ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.ОтправкаОтклонения");
			лСостояниеЭлектронногоДокумента  = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоОтклонение");
			лСобытиеЭлектронногоДокументаТекст = НСтр("ru = 'Документ отклонен'; uk = 'Документ відхилено'");
		ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
			//лСобытиеЭлектронногоДокумента    = ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.ОтправкаПодтверждения");
			лСостояниеЭлектронногоДокумента  = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение");
			лСобытиеЭлектронногоДокументаТекст = НСтр("ru = 'Документ подтвержден'; uk = 'Документ підтверджено'");
		КонецЕсли;
		
		лРезультатОтправкиОтвета = Неопределено;
		Если СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО") Тогда
			Если НЕ ДанныеДокумента.ЕстьОшибки Тогда
				СтрокаПодключенияEDI = Неопределено;
				СерверEDI = Неопределено;
				ПортEDI = Неопределено;
				МассивВложений = Новый Массив;
				ИндексВложения1 = Неопределено;
				ИндексВложения2 = Неопределено;
				ИндексВложения3 = Неопределено;
				ИндексВложения4 = Неопределено;
				
				// Отправить запрос EDI провайдеру, обработать результат запроса.				
				лПараметрыОтправкиКвитанции = Новый Структура;
				лПараметрыОтправкиКвитанции.Вставить("Edrpou",    лОрганизацияEDI.Код);
				лПараметрыОтправкиКвитанции.Вставить("Dept",      лОрганизацияEDI.Филиал);
				лПараметрыОтправкиКвитанции.Вставить("Name",      НаименованиеОрганизацииДляОтправки(лОрганизацияEDI));
				лПараметрыОтправкиКвитанции.Вставить("PrgId",     лОрганизацияEDI.ИдентификаторПрограммы);
				лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ЭлектронныйДокумент.ЕДРПОУКонтрагента);
				лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ЭлектронныйДокумент.ФилиалКонтрагента);
				//лПараметрыОтправкиКвитанции.Вставить("RcvName",   НаименованиеКонтрагентаДляОтправки(ЭлектронныйДокумент.ЕДРПОУКонтрагента, ЭлектронныйДокумент.ФилиалКонтрагента));
				ТекСтрокаПодключенияEDI = Неопределено;
				ТекСерверEDI = Неопределено;
				ТекПортEDI = Неопределено;
				ДобавитьПараметрыСекретногоКлюча(лПараметрыОтправкиКвитанции, лНастройкиПодписиШифрованияДляТекущейОрганизации, ТекСтрокаПодключенияEDI, ТекСерверEDI, ТекПортEDI, "Encrypt");
				
				Если ЗначениеЗаполнено(ТекСтрокаПодключенияEDI) или ЗначениеЗаполнено(ТекСерверEDI) или ЗначениеЗаполнено(ТекПортEDI) Тогда
					Если ЗначениеЗаполнено(СтрокаПодключенияEDI) или ЗначениеЗаполнено(СерверEDI) или ЗначениеЗаполнено(ПортEDI) Тогда
						Если (СтрокаПодключенияEDI<>ТекСтрокаПодключенияEDI) или (СерверEDI<>ТекСерверEDI) или (ПортEDI<>ТекПортEDI) Тогда
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Неоднозначно указано адрес АПИ.'; uk = 'Неоднозначно вказано адресу АПІ.'"));
							ДанныеДокумента.ЕстьОшибки = Истина;			
							Продолжить;
						КонецЕсли;
					Иначе
						СтрокаПодключенияEDI = ТекСтрокаПодключенияEDI;
						СерверEDI = ТекСерверEDI;
						ПортEDI = ТекПортEDI;
					КонецЕсли;
				КонецЕсли;
				
				лПараметрыОтправкиКвитанции.Вставить("MedocKvt",  КвитанцияТело);
				ЕстьПодписаниеПриОтправке = Ложь;
				ДокументПолученРезультатПодписи = Ложь;
				
				Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв")
				или ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
					//Если ЭлектронныйДокумент.IsMultisided Тогда
					//	Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
					//		ДанныеДокумента.ЕстьОшибки = Истина;		
					//		
					//		Замечание = НСтр("ru = 'Отзыв многостороннего Электронного документа не предусмотрен.'; uk = 'Відкликання багатостороннього Електронного документа не передбачено.'");
					//		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
					//		
					//		ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
					//		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
					//		ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
					//		
					//		Продолжить;
					//	КонецЕсли;
					//КонецЕсли;
					
					Отказ = Ложь;
					Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
						тСобытиеПеред = ПараметрыСобытий.СобытиеПеред;
						тОрганизация = ПараметрыСобытий.Организация;
						тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
						тВхИсх = ПараметрыСобытий.ВхИсх;
						тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
						тЭлектронныйДокумент = ПараметрыСобытий.ЭлектронныйДокумент;
						тСостояние = ПараметрыСобытий.Состояние;
						тДокумент1С = ПараметрыСобытий.Документ1С;
						тМассивВложений = Неопределено;
						ПараметрыСобытий.Свойство("МассивВложений", тМассивВложений);
						Если ТипЗнч(тМассивВложений) <> Тип("Массив") Тогда
							Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
								тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
							Иначе
								тМассивВложений = Новый Массив;
							КонецЕсли;
							ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
						КонецЕсли;
						тМассивПодписейДляОбработкиСобытий = ПолучитьМассивПодписейДляОбработкиСобытий(тЭлектронныйДокумент);
						ПараметрыСобытий.Вставить("МассивПодписей", тМассивПодписейДляОбработкиСобытий);
						ПричинаОтказа = "";
						Если не ОбработатьСобытие_ПередОтправкойКвитанции(тСобытиеПеред, тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписейДляОбработкиСобытий, тДокумент1С, тМассивВложений, ПричинаОтказа) Тогда
							Отказ = Истина;
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ПричинаОтказа);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ПричинаОтказа);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						КонецЕсли;
					КонецЕсли;
					
					Если Отказ Тогда
						ДокументБылПодписан = Ложь;
						ДанныеДокумента.ЕстьОшибки = Истина;			
						Продолжить;
					Иначе
						//МассивСертификатовКлючейПаролей = Новый Массив;
						//
						//ПодписьДляКвитанции = ПолучитьПодписьДляКвитанцииПоДокументу(ЭлектронныйДокумент, ДанныеДокумента.ВидЭлектронногоДокумента);
						//Если ПодписьДляКвитанции <> Неопределено Тогда
						//	Если ТаблицаНастроекПодписей <> Неопределено Тогда
						//		НастройкиПодписиКвитанции = ТаблицаНастроекПодписей.Найти(ПодписьДляКвитанции, "Подпись");
						//	КонецЕсли;
						//	Если НастройкиПодписиКвитанции <> Неопределено Тогда
						//		ЭлементМассиваСертификатовКлючейПаролей = Новый Структура;
						//		
						//		ТекСтрокаПодключенияEDI = Неопределено;
						//		ТекСерверEDI = Неопределено;
						//		ТекПортEDI = Неопределено;
						//		ДобавитьПараметрыСекретногоКлюча(ЭлементМассиваСертификатовКлючейПаролей, НастройкиПодписиКвитанции, ТекСтрокаПодключенияEDI, ТекСерверEDI, ТекПортEDI);
						//		Если ЗначениеЗаполнено(ТекСтрокаПодключенияEDI) или ЗначениеЗаполнено(ТекСерверEDI) или ЗначениеЗаполнено(ТекПортEDI) Тогда
						//			Если ЗначениеЗаполнено(СтрокаПодключенияEDI) или ЗначениеЗаполнено(СерверEDI) или ЗначениеЗаполнено(ПортEDI) Тогда
						//				Если (СтрокаПодключенияEDI<>ТекСтрокаПодключенияEDI) или (СерверEDI<>ТекСерверEDI) или (ПортEDI<>ТекПортEDI) Тогда
						//					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Неоднозначно указано адрес АПИ.'; uk = 'Неоднозначно вказано адресу АПІ.'"));
						//					ДанныеДокумента.ЕстьОшибки = Истина;			
						//					Продолжить;
						//				КонецЕсли;
						//			Иначе
						//				СтрокаПодключенияEDI = ТекСтрокаПодключенияEDI;
						//				СерверEDI = ТекСерверEDI;
						//				ПортEDI = ТекПортEDI;
						//			КонецЕсли;
						//		КонецЕсли;
						//		МассивСертификатовКлючейПаролей.Добавить(ЭлементМассиваСертификатовКлючейПаролей);
						//	КонецЕсли;
						//КонецЕсли;
						//лПараметрыОтправкиКвитанции.Вставить("Signers", МассивСертификатовКлючейПаролей);
					КонецЕсли;
				ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
					лПараметрыОтправкиКвитанции.Вставить("MedocBody", ТелоДокумента);
					Если ЗначениеЗаполнено(ИзображениеДокумента) Тогда				
						лПараметрыПередаваемогоPDFПредставленияДокумента = Новый Структура;
						лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("FileName", "Form.pdf");
						лПараметрыПередаваемогоPDFПредставленияДокумента.Вставить("Body", ИзображениеДокумента);
						лПараметрыОтправкиКвитанции.Вставить("ImageBody", лПараметрыПередаваемогоPDFПредставленияДокумента);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента1) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента1, ВложениеДокумента1));
						ИндексВложения1 = МассивВложений.ВГраница();
					КонецЕсли;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента2) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента2, ВложениеДокумента2));
						ИндексВложения2 = МассивВложений.ВГраница();
					КонецЕсли;
					Если ЗначениеЗаполнено(ИмяФайлаВложениеДокумента3) Тогда
						МассивВложений.Добавить(Новый Структура("FileName,Body", ИмяФайлаВложениеДокумента3, ВложениеДокумента3));
						ИндексВложения3 = МассивВложений.ВГраница();
					КонецЕсли;
					Если ТипЗнч(МассивВложенийДокумента4) = Тип("Массив") или ТипЗнч(МассивВложенийДокумента4) = Тип("ФиксированныйМассив") Тогда
						Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокумента4 Цикл
							МассивВложений.Добавить(Новый Структура("FileName,Body", ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента, ЭлементМассиваВложенийДокумента4.ВложениеДокумента));
							Если не ЗначениеЗаполнено(ИндексВложения4) Тогда
								ИндексВложения4 = МассивВложений.ВГраница();
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
					Если МассивВложений.Количество() > 0 Тогда
						лПараметрыОтправкиКвитанции.Вставить("AttachmentBody", МассивВложений);
					КонецЕсли;
					
					ЕстьПодписаниеПриОтправке = Истина;
					МассивДанныеПоПодписям = ПолучитьМассивДанныеПоПодписям(ДанныеДокумента.ЭлектронныйДокумент);
					МассивСертификатовКлючейПаролей = Новый Массив;
					ТипПодписания = "ptn";	
						
					СписокНаложенныхНаДокументПодписей = Новый СписокЗначений;
					МассивНаложенныхНаДокументПодписейСсылки = Новый Массив;
					ПодписиПолученыИзЭлектронногоДокумента = Ложь;
					ТаблицаНакладываемыхНаДокументПодписей = Неопределено;
					ДокументПодписанПолностью = Истина;
					ДокументБылПодписан = Ложь;
					ДокументПолученРезультатПодписи = Ложь;
					Если ПолучитьТаблицуНеобходимыхПодписейДляДокумента(ТаблицаНакладываемыхНаДокументПодписей, ДанныеДокумента.ЭлектронныйДокумент, ДанныеДокумента, ПодписиПолученыИзЭлектронногоДокумента, ЖурналОперации) Тогда
						ТаблицаПодписейПоДокументу = Неопределено;
						Если не ПодписиПолученыИзЭлектронногоДокумента Тогда
							ТаблицаПодписейПоДокументу = ТаблицаНакладываемыхНаДокументПодписей.Скопировать();
						КонецЕсли;
						РольСледующейПодписи = Неопределено;
						МассивПодписейДляОбработкиСобытий = Неопределено;
						ДокументПодписанПолностью = ПодготовитьТаблицуНакладываемыхПодписей(ТаблицаНакладываемыхНаДокументПодписей, ТаблицаНастроекПодписей, ДанныеДокумента.Организация, РольСледующейПодписи);
						
						Если не ДокументПодписанПолностью Тогда
							ДанныеДокумента.ЕстьОшибки = Истина;
							
							Замечание = НСтр("ru = 'Не все подписи заполнены'; uk = 'Не всі підписи заповнені'");
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
							
							ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
							ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							
							Продолжить;
						КонецЕсли;
						
						ДокументБылПодписан = Ложь;
						
						Отказ = Ложь;
						Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
							тСобытиеПеред = ПараметрыСобытий.СобытиеПеред;
							тОрганизация = ПараметрыСобытий.Организация;
							тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
							тВхИсх = ПараметрыСобытий.ВхИсх;
							тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
							тЭлектронныйДокумент = ПараметрыСобытий.ЭлектронныйДокумент;
							тСостояние = ПараметрыСобытий.Состояние;
							тДокумент1С = ПараметрыСобытий.Документ1С;
							тМассивВложений = Неопределено;
							ПараметрыСобытий.Свойство("МассивВложений", тМассивВложений);
							Если ТипЗнч(тМассивВложений) <> Тип("Массив") Тогда
								Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
									тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
								Иначе
									тМассивВложений = Новый Массив;
								КонецЕсли;
								ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
							КонецЕсли;
							ПараметрыСобытий.Вставить("МассивПодписей", МассивПодписейДляОбработкиСобытий);
							ПричинаОтказа = "";
							Если ОбработатьСобытие_ПередПодписанием(тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, МассивПодписейДляОбработкиСобытий, тДокумент1С, тМассивВложений, ПричинаОтказа) Тогда
								ПричинаОтказа = "";
								Если не ОбработатьСобытие_ПередОтправкойКвитанции(тСобытиеПеред, тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, МассивПодписейДляОбработкиСобытий, тДокумент1С, тМассивВложений, ПричинаОтказа) Тогда
									Отказ = Истина;
									ДанныеДокумента.ЕстьОшибки = Истина;
									
									ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ПричинаОтказа);
									
									ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
									ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ПричинаОтказа);
									ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								КонецЕсли;
							Иначе
								Отказ = Истина;
								ДанныеДокумента.ЕстьОшибки = Истина;
								
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, ПричинаОтказа);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, ПричинаОтказа);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							КонецЕсли;
						КонецЕсли;
						
						Если Отказ Тогда
							ДокументБылПодписан = Ложь;
							ДанныеДокумента.ЕстьОшибки = Истина;			
							Продолжить;
						Иначе
							Для Каждого лДанныеПодписи Из ТаблицаНакладываемыхНаДокументПодписей Цикл
								ЭлементМассиваСертификатовКлючейПаролей = Новый Структура;
								
								ТекСтрокаПодключенияEDI = Неопределено;
								ТекСерверEDI = Неопределено;
								ТекПортEDI = Неопределено;
								ДобавитьПараметрыСекретногоКлюча(ЭлементМассиваСертификатовКлючейПаролей, лДанныеПодписи, ТекСтрокаПодключенияEDI, ТекСерверEDI, ТекПортEDI);
								Если ЗначениеЗаполнено(ТекСтрокаПодключенияEDI) или ЗначениеЗаполнено(ТекСерверEDI) или ЗначениеЗаполнено(ТекПортEDI) Тогда
									Если ЗначениеЗаполнено(СтрокаПодключенияEDI) или ЗначениеЗаполнено(СерверEDI) или ЗначениеЗаполнено(ПортEDI) Тогда
										Если (СтрокаПодключенияEDI<>ТекСтрокаПодключенияEDI) или (СерверEDI<>ТекСерверEDI) или (ПортEDI<>ТекПортEDI) Тогда
											ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Неоднозначно указано адрес АПИ.'; uk = 'Неоднозначно вказано адресу АПІ.'"));
											ДанныеДокумента.ЕстьОшибки = Истина;			
											Продолжить;
										КонецЕсли;
									Иначе
										СтрокаПодключенияEDI = ТекСтрокаПодключенияEDI;
										СерверEDI = ТекСерверEDI;
										ПортEDI = ТекПортEDI;
									КонецЕсли;
								КонецЕсли;
								
								лИнформацияПоПодписи = Новый Структура("Дата, ПолучатьOCSP, ПолучатьTSP, Подпись, ВыбранаяПодпись, Наименование, ДРФОПодписанта, СерийныйНомер, ТипПодписания", Дата(1,1,1,0,0,0), Ложь, Ложь, лДанныеПодписи.Подпись, лДанныеПодписи.ВыбранаяПодпись, лДанныеПодписи.Наименование, лДанныеПодписи.ДРФОПодписанта, лДанныеПодписи.СерийныйНомер, ТипПодписания);
								
								лИнформацияПоПодписи.ПолучатьOCSP = Истина;
								лИнформацияПоПодписи.ПолучатьTSP = Истина;
								лИнформацияПоПодписи.Дата = ТекущаяДата();
								СписокНаложенныхНаДокументПодписей.Добавить(лИнформацияПоПодписи);
								МассивСертификатовКлючейПаролей.Добавить(ЭлементМассиваСертификатовКлючейПаролей);
								МассивНаложенныхНаДокументПодписейСсылки.Добавить(лДанныеПодписи.ВыбранаяПодпись);
								ДокументБылПодписан = Истина;
							КонецЦикла;
						КонецЕсли;
					Иначе
						ДокументБылПодписан = Ложь;
						ДанныеДокумента.ЕстьОшибки = Истина;			
						Продолжить;
					КонецЕсли;
					
					Если ДанныеДокумента.ЕстьОшибки Тогда
						Продолжить;
					КонецЕсли;
					
					МассивДанныеПоПодписямВРегистрФаксимилеЭлектронныхДокументов = Новый Массив;
					Если ДокументБылПодписан Тогда
						Запрос = Новый Запрос;
						Запрос.Текст = 
							"ВЫБРАТЬ
							|	скEDI_Факсимиле.Подпись КАК Подпись,
							|	скEDI_Факсимиле.Факсимиле КАК Факсимиле
							|ИЗ
							|	РегистрСведений.скEDI_Факсимиле КАК скEDI_Факсимиле
							|ГДЕ
							|	скEDI_Факсимиле.Подпись В(&СписокПодписей)";
						Запрос.УстановитьПараметр("СписокПодписей", МассивНаложенныхНаДокументПодписейСсылки);
						ТаблицаДетальныеЗаписи = Запрос.Выполнить().Выгрузить();
						
						Для Каждого ЭлементСпискаНаложенныхНаДокументПодписей из СписокНаложенныхНаДокументПодписей Цикл
							ФаксимилеЭлектронныхДокументов = Новый Структура;
							ТекПодпись = ЭлементСпискаНаложенныхНаДокументПодписей.Значение.ВыбранаяПодпись;
							ЭлементМассиваДанныеПоПодписям = Новый Структура;
							ФаксимилеЭлектронныхДокументов.Вставить("Роль", ТекПодпись.Роль);
							ТекКодУровняПодписи = ПолучитьКодПодписиПоРоли(ТекПодпись.Роль);
							ЭлементМассиваДанныеПоПодписям.Вставить("SignState", ТекКодУровняПодписи);
							ФаксимилеЭлектронныхДокументов.Вставить("КодУровняПодписи", ТекКодУровняПодписи);
							Если ЗначениеЗаполнено(ТекПодпись.ДРФО) Тогда
								ТекДРФО = ТекПодпись.ДРФО;
								ТекИмяПодписанта = ТекПодпись.Фамилия + " " + ТекПодпись.Имя;
								ТекДолжностьПодписанта = ТекПодпись.Должность;
							Иначе
								ТекДРФО = ТекПодпись.Владелец.Код;
								ТекИмяПодписанта = "";
								ТекДолжностьПодписанта = "";
								Если ТекКодУровняПодписи = -1 Тогда
									ТекКодУровняПодписи = 2;
								КонецЕсли;
							КонецЕсли;
							ЭлементМассиваДанныеПоПодписям.Вставить("Drfo", ТекДРФО);
							ФаксимилеЭлектронныхДокументов.Вставить("ДРФО", ТекДРФО);
							ЭлементМассиваДанныеПоПодписям.Вставить("SignerName", ТекИмяПодписанта);
							ФаксимилеЭлектронныхДокументов.Вставить("ИмяПодписанта", ТекИмяПодписанта);
							ЭлементМассиваДанныеПоПодписям.Вставить("SignerPosName", ТекДолжностьПодписанта);
							ФаксимилеЭлектронныхДокументов.Вставить("ДолжностьПодписанта", ТекДолжностьПодписанта);
							
							ФаксимилеЭлектронныхДокументов.Вставить("ТелоФаксимиле", "");
							НайденыеСтрокиТаблицыДетальныеЗаписи = ТаблицаДетальныеЗаписи.НайтиСтроки(Новый Структура("Подпись", ТекПодпись));
							Для Каждого НайденаяСтрокаТаблицыДетальныеЗаписи Из НайденыеСтрокиТаблицыДетальныеЗаписи Цикл
								ТелоФаксимиле_ХранилищеЗначений = НайденаяСтрокаТаблицыДетальныеЗаписи.Факсимиле.Получить();
								ТелоФаксимиле = Base64Строка(ТелоФаксимиле_ХранилищеЗначений);
								ЭлементМассиваДанныеПоПодписям.Вставить("Body", ТелоФаксимиле);
								ФаксимилеЭлектронныхДокументов.Вставить("ТелоФаксимиле", ТелоФаксимиле);
								Прервать;
							КонецЦикла;
							МассивДанныеПоПодписям.Добавить(ЭлементМассиваДанныеПоПодписям);
							МассивДанныеПоПодписямВРегистрФаксимилеЭлектронныхДокументов.Добавить(ФаксимилеЭлектронныхДокументов);
						КонецЦикла;
					КонецЕсли;
					
					лПараметрыОтправкиКвитанции.Вставить("Signers", МассивСертификатовКлючейПаролей);
					лПараметрыОтправкиКвитанции.Вставить("SignImages", МассивДанныеПоПодписям);
					
				КонецЕсли;
				лПараметрыОтправкиКвитанции.Вставить("FileName",  ЭлектронныйДокумент.ИмяФайла);
				
				////////////////////////////////////////////////////////////
				МассивNotifyContacts = Неопределено;
				МассивОтправкаСсылкиНаДокумент = Новый Массив;
				МассивНастроекОтправкаСсылкиНаДокумент = ДанныеДокумента.МассивНастроекОтправкаСсылкиНаДокумент;
				Если ТипЗнч(МассивНастроекОтправкаСсылкиНаДокумент) = Тип("ФиксированныйМассив") или ТипЗнч(МассивНастроекОтправкаСсылкиНаДокумент) = Тип("Массив") Тогда
					Для Каждого СтрокаМассиваНастроекОтправкаСсылкиНаДокумент из МассивНастроекОтправкаСсылкиНаДокумент Цикл
						ЭлементМассиваОтправкаСсылкиНаДокумент = Новый Структура;
						ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("ЭлектроннаяПочта", СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
						ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("Комментарий", СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий);
						МассивОтправкаСсылкиНаДокумент.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент);
					КонецЦикла;
				Иначе
					СписокНастроеныхАдресов = Новый СписокЗначений;
					Для Каждого СтрокаОтправкаСсылкиНаДокумент из ЭлектронныйДокумент.ОтправкаСсылкиНаДокумент Цикл
						ЭлементМассиваОтправкаСсылкиНаДокумент = Новый Структура;
						ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("ЭлектроннаяПочта", СтрокаОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
						ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("Комментарий", СтрокаОтправкаСсылкиНаДокумент.Комментарий);
						МассивОтправкаСсылкиНаДокумент.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент);
						
						СписокНастроеныхАдресов.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
					КонецЦикла;
					Если ЗначениеЗаполнено(ЭлектронныйДокумент.ЕДРПОУКонтрагента) Тогда
						Запрос = Новый Запрос;
						Запрос.Текст = "ВЫБРАТЬ
						               |	скEDI_КонтактныеДанныеКонтрагентов.ЭлектроннаяПочта КАК ЭлектроннаяПочта,
						               |	скEDI_КонтактныеДанныеКонтрагентов.Комментарий КАК Комментарий
						               |ИЗ
						               |	РегистрСведений.скEDI_КонтактныеДанныеКонтрагентов КАК скEDI_КонтактныеДанныеКонтрагентов
						               |ГДЕ
						               |	скEDI_КонтактныеДанныеКонтрагентов.ЕДРПОУКонтрагента = &ЕДРПОУКонтрагента
						               |	И НЕ скEDI_КонтактныеДанныеКонтрагентов.ЭлектроннаяПочта В (&ЭлектроннаяПочтаСписок)
						               |	И скEDI_КонтактныеДанныеКонтрагентов.ОтправлятьСсылкуНаДокументАвтоматически";
						Запрос.УстановитьПараметр("ЕДРПОУКонтрагента", ЭлектронныйДокумент.ЕДРПОУКонтрагента);
						Запрос.УстановитьПараметр("ЭлектроннаяПочтаСписок", СписокНастроеныхАдресов);
						ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
						Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
							ЭлементМассиваОтправкаСсылкиНаДокумент = Новый Структура;
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("ЭлектроннаяПочта", ВыборкаРезультатаЗапроса.ЭлектроннаяПочта);
							ЭлементМассиваОтправкаСсылкиНаДокумент.Вставить("Комментарий", ВыборкаРезультатаЗапроса.Комментарий);
							МассивОтправкаСсылкиНаДокумент.Добавить(ЭлементМассиваОтправкаСсылкиНаДокумент);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				Если МассивОтправкаСсылкиНаДокумент.Количество() > 0 Тогда
					МассивNotifyContacts = Новый Массив;
					Для Каждого ЭлементМассиваОтправкаСсылкиНаДокумент из МассивОтправкаСсылкиНаДокумент Цикл
						АдресЕстьВСписке = Ложь;
						Для Каждого ЭлементМассиваNotifyContacts Из МассивNotifyContacts Цикл
							Если ВРег(ЭлементМассиваОтправкаСсылкиНаДокумент.ЭлектроннаяПочта) = ВРег(ЭлементМассиваNotifyContacts.EMail) Тогда
								АдресЕстьВСписке = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если Не АдресЕстьВСписке Тогда
							ЭлементМассиваNotifyContacts = Новый Структура("EMail", ЭлементМассиваОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
							МассивNotifyContacts.Добавить(ЭлементМассиваNotifyContacts);
						КонецЕсли;
					КонецЦикла;
					лПараметрыОтправкиКвитанции.Вставить("NotifyContacts", МассивNotifyContacts);
				КонецЕсли;
				
				РежимСинхронизации = Ложь;
				ПолучитьРежимСинхронизации(РежимСинхронизации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
				Если РежимСинхронизации Тогда
					DocVer = ПолучитьАктуальныйDocVer(ЭлектронныйДокумент);
					лПараметрыОтправкиКвитанции.Вставить("DocVer", DocVer);
				КонецЕсли;
				
				ДатаОперации = ТекущаяДата();
				лИмяФайлаКвитанции = "";
				лСсылкаНаДокумент = "";
				лDocVer = 0;
				//ДокументПолученРезультатПодписи = Ложь;
				
				///////////////////////////////////////////////////////////////////////////////////////////////
				ОтправкаПоМаршруту = Ложь;
				МассивОтправокПоМаршруту = Неопределено;
				МассивИзмененийВМаршруте = Неопределено;
				Если ЭлектронныйДокумент.IsMultisided Тогда
					
					Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда
						ОтправкаПоМаршруту = Истина;
						МассивОтправокПоМаршруту = Новый Массив;
						МассивИзмененийВМаршруте = Новый Массив;
						ЕстьОтправленыеКвитанции = Ложь;
						
						ПозицияВМаршруте = ЭлектронныйДокумент.RoutePosition;
						Если ПозицияВМаршруте < ЭлектронныйДокумент.Маршрут.Количество() Тогда
							ЭлементМассиваИзмененийВМаршруте = Новый Структура;
							ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
							ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван"));
							МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
						КонецЕсли;
						
						ПозицияВМаршруте = ЭлектронныйДокумент.RoutePosition + 1;
						Если ПозицияВМаршруте < ЭлектронныйДокумент.Маршрут.Количество() Тогда
							ТекМаршрут = ЭлектронныйДокумент.Маршрут.Получить(ПозицияВМаршруте);
							
							Если ТипЗнч(ПараметрыСозданияКвитанции) = Тип("Структура") Тогда
								ПараметрыСозданияКвитанции.Вставить("RcvEdrpou", ТекМаршрут.ЕДРПОУКонтрагента);
								ПараметрыСозданияКвитанции.Вставить("RcvDept",   ТекМаршрут.ФилиалКонтрагента);
								
								РезультатСозданияКвитанции = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/makekvt", ПараметрыСозданияКвитанции);
								Если РезультатСозданияКвитанции.Code <> 0 Тогда
									лПараметрыОтправкиКвитанции.Вставить("MedocKvt", КвитанцияТело);
									ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка создания квитанции'; uk = 'Помилка створення квитанції'") + ": " + РезультатСозданияКвитанции.Message);
								ИначеЕсли ЗначениеЗаполнено(РезультатСозданияКвитанции.Body) Тогда
									лПараметрыОтправкиКвитанции.Вставить("MedocKvt", РезультатСозданияКвитанции.Body);
								Иначе
									лПараметрыОтправкиКвитанции.Вставить("MedocKvt", КвитанцияТело);
								КонецЕсли;
							КонецЕсли;
							
							//лПараметрыОтправкиКвитанции.Удалить("MedocKvt");
							//лПараметрыОтправкиКвитанции.Вставить("ToNextHop", Истина);
							лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ТекМаршрут.ЕДРПОУКонтрагента);
							лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ТекМаршрут.ФилиалКонтрагента);
							лПараметрыОтправкиКвитанции.Вставить("RcvName",   НаименованиеКонтрагентаДляОтправки(ТекМаршрут.ЕДРПОУКонтрагента, ТекМаршрут.ФилиалКонтрагента));
							
							ЭлементМассиваИзмененийВМаршруте = Новый Структура;
							ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
							ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван"));
							МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
							лСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван");
							
							Если РежимСинхронизации Тогда
								лПараметрыОтправкиКвитанции.Вставить("DocVer", DocVer);
							КонецЕсли;
							лРезультатОтправкиОтвета = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/sendansfree", лПараметрыОтправкиКвитанции, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
							Если лРезультатОтправкиОтвета.Code <> 0 Тогда
								ДанныеДокумента.ЕстьОшибки = Истина;
								
								Замечание = НСтр("ru = 'Ошибка отправки документа:'; uk = 'Помилка відправки документа:'") + " " + лРезультатОтправкиОтвета.Message;
								СобытиеОтправкиОписание = лРезультатОтправкиОтвета.Message;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								
								тDocVer = Неопределено;
								Если лРезультатОтправкиОтвета.Свойство("DocVer", тDocVer) Тогда
									Если ЗначениеЗаполнено(тDocVer) Тогда
										лDocVer = тDocVer;
									КонецЕсли;
								КонецЕсли;
								
								тСылкаНаДокумент = Неопределено;
								Если лРезультатОтправкиОтвета.Свойство("DocHref", тСылкаНаДокумент) Тогда
									Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
										лСсылкаНаДокумент = тСылкаНаДокумент;
									КонецЕсли;
								КонецЕсли;
								
								Если ЗначениеЗаполнено(лРезультатОтправкиОтвета.AnsFileName) Тогда
									лИмяФайлаКвитанции = лРезультатОтправкиОтвета.AnsFileName;
									//НовоеСостояниеЭлектронногоДокумента = Неопределено;
								Иначе
									Продолжить;
								КонецЕсли;
							ИначеЕсли ЗначениеЗаполнено(лРезультатОтправкиОтвета.AnsFileName) Тогда
								лИмяФайлаКвитанции = лРезультатОтправкиОтвета.AnsFileName;
								
								тDocVer = Неопределено;
								Если лРезультатОтправкиОтвета.Свойство("DocVer", тDocVer) Тогда
									Если ЗначениеЗаполнено(тDocVer) Тогда
										лDocVer = тDocVer;
									КонецЕсли;
								КонецЕсли;
								
								тСылкаНаДокумент = Неопределено;
								Если лРезультатОтправкиОтвета.Свойство("DocHref", тСылкаНаДокумент) Тогда
									Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
										лСсылкаНаДокумент = тСылкаНаДокумент;
									КонецЕсли;
								КонецЕсли;
							Иначе
								ДанныеДокумента.ЕстьОшибки = Истина;
								
								Замечание = НСтр("ru = 'В результате отправки не получено имя файла отправленой квитанции на сервере СДО.'; uk = 'В результаті відправки не отримано ім''я файла відправленої квитанції на сервері СДО.'");
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								
								Продолжить;
							КонецЕсли;
							
							ЕстьОтправленыеКвитанции = Истина;
						КонецЕсли;
					Иначе
						Если ЕстьПодписаниеПриОтправке Тогда
							Если ЭлектронныйДокумент.RoutePosition + 1 < ЭлектронныйДокумент.Маршрут.Количество() Тогда
								Замечание = НСтр("ru = 'Не доступно для многостороннего документа по бесплатной лицензии.'; uk = 'Не доступно для багатостороннього документу по безкоштовній ліцензії.'");
								ДанныеДокумента.ЕстьОшибки = Истина;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + Замечание);
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								Продолжить;
							ИначеЕсли ЭлектронныйДокумент.RoutePosition >= 2 Тогда
								Замечание = НСтр("ru = 'Не доступно для многостороннего документа по бесплатной лицензии.'; uk = 'Не доступно для багатостороннього документу по безкоштовній ліцензії.'");
								ДанныеДокумента.ЕстьОшибки = Истина;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, "" + ДанныеДокумента.ЭлектронныйДокумент + ": " + Замечание);
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								Продолжить;
							КонецЕсли;
						КонецЕсли;
						
						ОтправкаПоМаршруту = Истина;
						МассивОтправокПоМаршруту = Новый Массив;
						МассивИзмененийВМаршруте = Новый Массив;
						ЕстьОтправленыеКвитанции = Ложь;
						
						ИнформацияООтправленойКвитанции = "";
						ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + НСтр("ru = 'Имя файла электронного документа: '; uk = 'Ім''я файлу електронного документу: '") + ЭлектронныйДокумент.ИмяФайла;
						
						лПараметрыОтправкиКвитанции.Вставить("RoutePosition", ЭлектронныйДокумент.RoutePosition);
						Для ПозицияВМаршруте = 0 по ЭлектронныйДокумент.RoutePosition - 1 Цикл
							ТекМаршрут = ЭлектронныйДокумент.Маршрут.Получить(ПозицияВМаршруте);
							
							Если ТипЗнч(ПараметрыСозданияКвитанции) = Тип("Структура") Тогда
								ПараметрыСозданияКвитанции.Вставить("RcvEdrpou", ТекМаршрут.ЕДРПОУКонтрагента);
								ПараметрыСозданияКвитанции.Вставить("RcvDept",   ТекМаршрут.ФилиалКонтрагента);
								
								РезультатСозданияКвитанции = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/makekvt", ПараметрыСозданияКвитанции);
								Если РезультатСозданияКвитанции.Code <> 0 Тогда
									лПараметрыОтправкиКвитанции.Вставить("MedocKvt", КвитанцияТело);
									ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, НСтр("ru = 'Ошибка создания квитанции'; uk = 'Помилка створення квитанції'") + ": " + РезультатСозданияКвитанции.Message);
								ИначеЕсли ЗначениеЗаполнено(РезультатСозданияКвитанции.Body) Тогда
									лПараметрыОтправкиКвитанции.Вставить("MedocKvt", РезультатСозданияКвитанции.Body);
								Иначе
									лПараметрыОтправкиКвитанции.Вставить("MedocKvt", КвитанцияТело);
								КонецЕсли;
							КонецЕсли;
							
							лПараметрыОтправкиКвитанции.Вставить("ToNextHop", Ложь);
							//////лПараметрыОтправкиКвитанции.Вставить("IsMultiChange", Истина);//?
							лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ТекМаршрут.ЕДРПОУКонтрагента);
							лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ТекМаршрут.ФилиалКонтрагента);
							лПараметрыОтправкиКвитанции.Вставить("RcvName",   НаименованиеКонтрагентаДляОтправки(ТекМаршрут.ЕДРПОУКонтрагента, ТекМаршрут.ФилиалКонтрагента));
							Если РежимСинхронизации Тогда
								лПараметрыОтправкиКвитанции.Вставить("DocVer", DocVer);
							КонецЕсли;
							
							//лРезультатОтправкиОтвета = ОтправитьОтветПоДокументуСПомощьюEDIПровайдера(лПараметрыОтправкиКвитанции, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
							лРезультатОтправкиОтвета = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/sendansfree", лПараметрыОтправкиКвитанции, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
							Если лРезультатОтправкиОтвета.Code <> 0 Тогда
								ДанныеДокумента.ЕстьОшибки = Истина;
								
								Замечание = НСтр("ru = 'Ошибка отправки документа:'; uk = 'Помилка відправки документа:'") + " " + лРезультатОтправкиОтвета.Message;
								СобытиеОтправкиОписание = лРезультатОтправкиОтвета.Message;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								
								тDocVer = Неопределено;
								Если лРезультатОтправкиОтвета.Свойство("DocVer", тDocVer) Тогда
									Если ЗначениеЗаполнено(тDocVer) Тогда
										лDocVer = тDocVer;
									КонецЕсли;
								КонецЕсли;
								
								тСылкаНаДокумент = Неопределено;
								Если лРезультатОтправкиОтвета.Свойство("DocHref", тСылкаНаДокумент) Тогда
									Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
										лСсылкаНаДокумент = тСылкаНаДокумент;
									КонецЕсли;
								КонецЕсли;
								
								Если ЗначениеЗаполнено(лРезультатОтправкиОтвета.AnsFileName) Тогда
									лИмяФайлаКвитанции = лРезультатОтправкиОтвета.AnsFileName;
									//НовоеСостояниеЭлектронногоДокумента = Неопределено;
								Иначе
									Продолжить;
								КонецЕсли;
							ИначеЕсли ЗначениеЗаполнено(лРезультатОтправкиОтвета.AnsFileName) Тогда
								лИмяФайлаКвитанции = лРезультатОтправкиОтвета.AnsFileName;
								
								тDocVer = Неопределено;
								Если лРезультатОтправкиОтвета.Свойство("DocVer", тDocVer) Тогда
									Если ЗначениеЗаполнено(тDocVer) Тогда
										лDocVer = тDocVer;
									КонецЕсли;
								КонецЕсли;
								
								тСылкаНаДокумент = Неопределено;
								Если лРезультатОтправкиОтвета.Свойство("DocHref", тСылкаНаДокумент) Тогда
									Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
										лСсылкаНаДокумент = тСылкаНаДокумент;
									КонецЕсли;
								КонецЕсли;
							Иначе
								ДанныеДокумента.ЕстьОшибки = Истина;
								
								Замечание = НСтр("ru = 'В результате отправки не получено имя файла отправленой квитанции на сервере СДО.'; uk = 'В результаті відправки не отримано ім''я файла відправленої квитанції на сервері СДО.'");
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
								
								ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
								ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
								ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
								
								Продолжить;
							КонецЕсли;
							
							//Если лРезультатОтправкиОтвета = Неопределено Тогда	
							//	ДанныеДокумента.ЕстьОшибки = Истина;				
							//	
							//	Замечание = НСтр("ru = 'Не удалось отправить квитанцию по документу.'; uk = 'Не вдалось відправити квитанцію по документу.'");
							//	ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
							//	
							//	ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							//	ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
							//	ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							//	
							//	//Продолжить;
							//Иначе
								//Если Не ЕстьОтправленыеКвитанции Тогда
									ИмяФайлаКвитанции = лИмяФайлаКвитанции;//лРезультатОтправкиОтвета.ИмяФайла;
									DocVerКвитанции = лDocVer;//лРезультатОтправкиОтвета.DocVer;
									ЕстьОтправленыеКвитанции = Истина;
								//КонецЕсли;
								DocVer = лDocVer;//лРезультатОтправкиОтвета.DocVer;
								
								ЭлементМассиваОтправокПоМаршруту = Новый Структура;
								ЭлементМассиваОтправокПоМаршруту.Вставить("ЕДРПОУКонтрагента", ТекМаршрут.ЕДРПОУКонтрагента);
								ЭлементМассиваОтправокПоМаршруту.Вставить("ФилиалКонтрагента", ТекМаршрут.ФилиалКонтрагента);
								ЭлементМассиваОтправокПоМаршруту.Вставить("ИмяФайла", лИмяФайлаКвитанции);//лРезультатОтправкиОтвета.ИмяФайла);
								ЭлементМассиваОтправокПоМаршруту.Вставить("DocVer", лDocVer);//лРезультатОтправкиОтвета.DocVer);
								ЭлементМассиваОтправокПоМаршруту.Вставить("RoutePosition", ПозицияВМаршруте);
								ЭлементМассиваОтправокПоМаршруту.Вставить("ToNextHop", Ложь);
								МассивОтправокПоМаршруту.Добавить(ЭлементМассиваОтправокПоМаршруту);
								
								Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
									ЭлементМассиваИзмененийВМаршруте = Новый Структура;
									ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
									ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоОтклонение"));
									МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
								КонецЕсли;
								
								ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции
								+ Символы.ПС
								+ НСтр("ru = 'Получатель'; uk = 'Одержувач'") + "(" + Строка(ПозицияВМаршруте) + ")" + ": " + ТекМаршрут.ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ТекМаршрут.ФилиалКонтрагента), "(" + ТекМаршрут.ФилиалКонтрагента + ")", "")
								+ Символы.ПС
								+ НСтр("ru = 'Имя файла квитанции: '; uk = 'Ім''я файлу квитанції: '") + лИмяФайлаКвитанции;//лРезультатОтправкиОтвета.ИмяФайла;
							//КонецЕсли;
						КонецЦикла;
						
						Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение") Тогда
							ПозицияВМаршруте = ЭлектронныйДокумент.RoutePosition;
							Если ПозицияВМаршруте < ЭлектронныйДокумент.Маршрут.Количество() Тогда
								ЭлементМассиваИзмененийВМаршруте = Новый Структура;
								ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
								ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоОтклонение"));
								МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
							КонецЕсли;
						ИначеЕсли ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
							ПозицияВМаршруте = ЭлектронныйДокумент.RoutePosition;
							Если ПозицияВМаршруте < ЭлектронныйДокумент.Маршрут.Количество() Тогда
								ЭлементМассиваИзмененийВМаршруте = Новый Структура;
								ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
								ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение"));
								МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
							КонецЕсли;
							
							//ПозицияВМаршруте = ЭлектронныйДокумент.RoutePosition + 1;
							//Если ПозицияВМаршруте < ЭлектронныйДокумент.Маршрут.Количество() Тогда
							//	ТекМаршрут = ЭлектронныйДокумент.Маршрут.Получить(ПозицияВМаршруте);
							//	
							//	лПараметрыОтправкиКвитанции.Удалить("MedocKvt");
							//	лПараметрыОтправкиКвитанции.Вставить("ToNextHop", Истина);
							//	лПараметрыОтправкиКвитанции.Вставить("RcvEdrpou", ТекМаршрут.ЕДРПОУКонтрагента);
							//	лПараметрыОтправкиКвитанции.Вставить("RcvDept",   ТекМаршрут.ФилиалКонтрагента);
							//	лПараметрыОтправкиКвитанции.Вставить("RcvName",   НаименованиеКонтрагентаДляОтправки(ТекМаршрут.ЕДРПОУКонтрагента, ТекМаршрут.ФилиалКонтрагента));
							//	Если РежимСинхронизации Тогда
							//		лПараметрыОтправкиКвитанции.Вставить("DocVer", DocVer);
							//	КонецЕсли;
							//	лРезультатОтправкиОтвета = ОтправитьОтветПоДокументуСПомощьюEDIПровайдера(лПараметрыОтправкиКвитанции, ЖурналОперации, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
							//	Если лРезультатОтправкиОтвета = Неопределено Тогда	
							//		ДанныеДокумента.ЕстьОшибки = Истина;				
							//		
							//		Замечание = НСтр("ru = 'Не удалось отправить квитанцию по документу.'; uk = 'Не вдалось відправити квитанцію по документу.'");
							//		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
							//		
							//		ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
							//		ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
							//		ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
							//		
							//		//Продолжить;
							//	Иначе
							//		//Если Не ЕстьОтправленыеКвитанции Тогда
							//			ИмяФайлаКвитанции = лРезультатОтправкиОтвета.ИмяФайла;
							//			DocVerКвитанции = лРезультатОтправкиОтвета.DocVer;
							//			ЕстьОтправленыеКвитанции = Истина;
							//		//КонецЕсли;
							//		
							//		ЭлементМассиваОтправокПоМаршруту = Новый Структура;
							//		ЭлементМассиваОтправокПоМаршруту.Вставить("ЕДРПОУКонтрагента", ТекМаршрут.ЕДРПОУКонтрагента);
							//		ЭлементМассиваОтправокПоМаршруту.Вставить("ФилиалКонтрагента", ТекМаршрут.ФилиалКонтрагента);
							//		ЭлементМассиваОтправокПоМаршруту.Вставить("ИмяФайла", лРезультатОтправкиОтвета.ИмяФайла);
							//		ЭлементМассиваОтправокПоМаршруту.Вставить("DocVer", лРезультатОтправкиОтвета.DocVer);
							//		ЭлементМассиваОтправокПоМаршруту.Вставить("RoutePosition", ПозицияВМаршруте);
							//		ЭлементМассиваОтправокПоМаршруту.Вставить("ToNextHop", Истина);
							//		МассивОтправокПоМаршруту.Добавить(ЭлементМассиваОтправокПоМаршруту);
							//		
							//		ЭлементМассиваИзмененийВМаршруте = Новый Структура;
							//		ЭлементМассиваИзмененийВМаршруте.Вставить("ПозицияВМаршруте", ПозицияВМаршруте);
							//		ЭлементМассиваИзмененийВМаршруте.Вставить("Состояние", ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен"));
							//		МассивИзмененийВМаршруте.Добавить(ЭлементМассиваИзмененийВМаршруте);
							//		лСостояниеЭлектронногоДокумента = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен");
							//		
							//		ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции
							//		+ Символы.ПС
							//		+ НСтр("ru = 'Получатель'; uk = 'Одержувач'") + "(" + Строка(ПозицияВМаршруте) + ")" + ": " + ТекМаршрут.ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(ТекМаршрут.ФилиалКонтрагента), "(" + ТекМаршрут.ФилиалКонтрагента + ")", "")
							//		+ Символы.ПС
							//		+ НСтр("ru = 'Имя файла квитанции: '; uk = 'Ім''я файлу квитанції: '") + лРезультатОтправкиОтвета.ИмяФайла;
							//	КонецЕсли;
							//КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					Если не ЕстьОтправленыеКвитанции Тогда
						Продолжить;
					КонецЕсли;
				Иначе
					лПараметрыОтправкиКвитанции.Вставить("RcvName", НаименованиеКонтрагентаДляОтправки(ЭлектронныйДокумент.ЕДРПОУКонтрагента, ЭлектронныйДокумент.ФилиалКонтрагента));
				
				
				
				
					лРезультатОтправкиОтвета = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/sendansfree", лПараметрыОтправкиКвитанции, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					Если лРезультатОтправкиОтвета.Code <> 0 Тогда
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						Замечание = НСтр("ru = 'Ошибка отправки документа:'; uk = 'Помилка відправки документа:'") + " " + лРезультатОтправкиОтвета.Message;
						СобытиеОтправкиОписание = лРезультатОтправкиОтвета.Message;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						тDocVer = Неопределено;
						Если лРезультатОтправкиОтвета.Свойство("DocVer", тDocVer) Тогда
							Если ЗначениеЗаполнено(тDocVer) Тогда
								лDocVer = тDocVer;
							КонецЕсли;
						КонецЕсли;
						
						тСылкаНаДокумент = Неопределено;
						Если лРезультатОтправкиОтвета.Свойство("DocHref", тСылкаНаДокумент) Тогда
							Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
								лСсылкаНаДокумент = тСылкаНаДокумент;
							КонецЕсли;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(лРезультатОтправкиОтвета.AnsFileName) Тогда
							лИмяФайлаКвитанции = лРезультатОтправкиОтвета.AnsFileName;
							//НовоеСостояниеЭлектронногоДокумента = Неопределено;
						Иначе
							Продолжить;
						КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(лРезультатОтправкиОтвета.AnsFileName) Тогда
						лИмяФайлаКвитанции = лРезультатОтправкиОтвета.AnsFileName;
						
						тDocVer = Неопределено;
						Если лРезультатОтправкиОтвета.Свойство("DocVer", тDocVer) Тогда
							Если ЗначениеЗаполнено(тDocVer) Тогда
								лDocVer = тDocVer;
							КонецЕсли;
						КонецЕсли;
						
						тСылкаНаДокумент = Неопределено;
						Если лРезультатОтправкиОтвета.Свойство("DocHref", тСылкаНаДокумент) Тогда
							Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
								лСсылкаНаДокумент = тСылкаНаДокумент;
							КонецЕсли;
						КонецЕсли;
					Иначе
						ДанныеДокумента.ЕстьОшибки = Истина;
						
						Замечание = НСтр("ru = 'В результате отправки не получено имя файла отправленой квитанции на сервере СДО.'; uk = 'В результаті відправки не отримано ім''я файла відправленої квитанції на сервері СДО.'");
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, Замечание);
						
						ОписаниеОшибок = ДанныеДокумента.ОписаниеОшибок;
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ОписаниеОшибок, Замечание);
						ДанныеДокумента.ОписаниеОшибок = ОписаниеОшибок;
						
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если ЕстьПодписаниеПриОтправке Тогда
					тТелоДокумента = Неопределено;
					Если лРезультатОтправкиОтвета.Свойство("MedocBody", тТелоДокумента) Тогда
						Если ЗначениеЗаполнено(тТелоДокумента) Тогда
							ДокументПолученРезультатПодписи = Истина;
							ТелоДокумента = тТелоДокумента;
							ИзображениеДокумента = "";
							ВложениеДокумента1 = "";
							//ИмяФайлаВложениеДокумента1 = "";
							ВложениеДокумента2 = "";
							//ИмяФайлаВложениеДокумента2 = "";
							ВложениеДокумента3 = "";
							//ИмяФайлаВложениеДокумента3 = "";
							Если ТипПодписания = "ptn" Тогда
								Если ТипЗнч(лРезультатОтправкиОтвета) = Тип("Структура") Тогда
									лКонтейнерPDFПредставленияДокумента = Неопределено;
									Если лРезультатОтправкиОтвета.Свойство("ImageBody", лКонтейнерPDFПредставленияДокумента) Тогда
										Если ТипЗнч(лКонтейнерPDFПредставленияДокумента) = Тип("Структура") Тогда
											лКонтейнерPDFПредставленияДокумента.Свойство("Body", ИзображениеДокумента);
										ИначеЕсли ТипЗнч(лКонтейнерPDFПредставленияДокумента) = Тип("Соответствие") Тогда
											ИзображениеДокумента = лКонтейнерPDFПредставленияДокумента.Получить("Body");
										КонецЕсли;
									КонецЕсли;
									лКонтейнерВложений = Неопределено;
									Если лРезультатОтправкиОтвета.Свойство("AttachmentBody", лКонтейнерВложений) Тогда
										Если ТипЗнч(лКонтейнерВложений) = Тип("Массив") Тогда
											Если ИндексВложения1 <> Неопределено Тогда
												лТелоВложения = Неопределено;
												лКонтейнерВложения = лКонтейнерВложений[ИндексВложения1];
												Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
													лКонтейнерВложения.Свойство("Body", лТелоВложения);
												ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
													лТелоВложения = лКонтейнерВложения.Получить("Body");
												КонецЕсли;
												ВложениеДокумента1 = лТелоВложения;
											КонецЕсли;
											Если ИндексВложения2 <> Неопределено Тогда
												лТелоВложения = Неопределено;
												лКонтейнерВложения = лКонтейнерВложений[ИндексВложения2];
												Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
													лКонтейнерВложения.Свойство("Body", лТелоВложения);
												ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
													лТелоВложения = лКонтейнерВложения.Получить("Body");
												КонецЕсли;
												ВложениеДокумента2 = лТелоВложения;
											КонецЕсли;
											Если ИндексВложения3 <> Неопределено Тогда
												лТелоВложения = Неопределено;
												лКонтейнерВложения = лКонтейнерВложений[ИндексВложения3];
												Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
													лКонтейнерВложения.Свойство("Body", лТелоВложения);
												ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
													лТелоВложения = лКонтейнерВложения.Получить("Body");
												КонецЕсли;
												ВложениеДокумента3 = лТелоВложения;
											КонецЕсли;
											Если ИндексВложения4 <> Неопределено Тогда
												ТекИндексВложения = ИндексВложения4;
												МассивВложенийДокумента4Результат = Новый Массив;
												Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокумента4 Цикл
													лТелоВложения = Неопределено;
													лКонтейнерВложения = лКонтейнерВложений[ТекИндексВложения];
													Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
														лКонтейнерВложения.Свойство("Body", лТелоВложения);
													ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
														лТелоВложения = лКонтейнерВложения.Получить("Body");
													КонецЕсли;
													
													ТекСтруктураВложения = Новый Структура;
													ТекСтруктураВложения.Вставить("ИмяФайлаВложениеДокумента", ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента);
													ТекСтруктураВложения.Вставить("ВложениеДокумента", лТелоВложения);
													МассивВложенийДокумента4Результат.Добавить(ТекСтруктураВложения);
													ТекИндексВложения = ТекИндексВложения + 1;
												КонецЦикла;
												МассивВложенийДокумента4 = МассивВложенийДокумента4Результат;
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;
								ИначеЕсли ТипЗнч(лРезультатОтправкиОтвета) = Тип("Соответствие") Тогда
									лКонтейнерPDFПредставленияДокумента = лРезультатОтправкиОтвета.Получить("ImageBody");
									Если ТипЗнч(лКонтейнерPDFПредставленияДокумента) = Тип("Структура") Тогда
										лКонтейнерPDFПредставленияДокумента.Свойство("Body", ИзображениеДокумента);
									ИначеЕсли ТипЗнч(лКонтейнерPDFПредставленияДокумента) = Тип("Соответствие") Тогда
										ИзображениеДокумента = лКонтейнерPDFПредставленияДокумента.Получить("Body");
									КонецЕсли;
									
									лКонтейнерВложений = лРезультатОтправкиОтвета.Получить("AttachmentBody");
									Если ТипЗнч(лКонтейнерВложений) = Тип("Массив") Тогда
										Если ИндексВложения1 <> Неопределено Тогда
											лТелоВложения = Неопределено;
											лКонтейнерВложения = лКонтейнерВложений[ИндексВложения1];
											Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
												лКонтейнерВложения.Свойство("Body", лТелоВложения);
											ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
												лТелоВложения = лКонтейнерВложения.Получить("Body");
											КонецЕсли;
											ВложениеДокумента1 = лТелоВложения;
										КонецЕсли;
										Если ИндексВложения2 <> Неопределено Тогда
											лТелоВложения = Неопределено;
											лКонтейнерВложения = лКонтейнерВложений[ИндексВложения2];
											Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
												лКонтейнерВложения.Свойство("Body", лТелоВложения);
											ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
												лТелоВложения = лКонтейнерВложения.Получить("Body");
											КонецЕсли;
											ВложениеДокумента2 = лТелоВложения;
										КонецЕсли;
										Если ИндексВложения3 <> Неопределено Тогда
											лТелоВложения = Неопределено;
											лКонтейнерВложения = лКонтейнерВложений[ИндексВложения3];
											Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
												лКонтейнерВложения.Свойство("Body", лТелоВложения);
											ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
												лТелоВложения = лКонтейнерВложения.Получить("Body");
											КонецЕсли;
											ВложениеДокумента3 = лТелоВложения;
										КонецЕсли;
										Если ИндексВложения4 <> Неопределено Тогда
											ТекИндексВложения = ИндексВложения4;
											МассивВложенийДокумента4Результат = Новый Массив;
											Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокумента4 Цикл
												лТелоВложения = Неопределено;
												лКонтейнерВложения = лКонтейнерВложений[ТекИндексВложения];
												Если ТипЗнч(лКонтейнерВложения) = Тип("Структура") Тогда
													лКонтейнерВложения.Свойство("Body", лТелоВложения);
												ИначеЕсли ТипЗнч(лКонтейнерВложения) = Тип("Соответствие") Тогда
													лТелоВложения = лКонтейнерВложения.Получить("Body");
												КонецЕсли;
												
												ТекСтруктураВложения = Новый Структура;
												ТекСтруктураВложения.Вставить("ИмяФайлаВложениеДокумента", ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента);
												ТекСтруктураВложения.Вставить("ВложениеДокумента", лТелоВложения);
												МассивВложенийДокумента4Результат.Добавить(ТекСтруктураВложения);
												ТекИндексВложения = ТекИндексВложения + 1;
											КонецЦикла;
											МассивВложенийДокумента4 = МассивВложенийДокумента4Результат;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
							
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				лЭлектронныйДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
				лЭлектронныйДокументОбъект.Состояние = лСостояниеЭлектронногоДокумента;
				ДанныеДокумента.Состояние = лЭлектронныйДокументОбъект.Состояние;
				Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отклонение")
					или ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Отзыв") Тогда

					Если ТекстКвитанции <> "" Тогда
						Если ЗначениеЗаполнено(лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом) Тогда
							лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом = лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом + Символы.ПС;
						КонецЕсли;
						лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом = лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом + ТекстКвитанции;
					КонецЕсли;
				КонецЕсли;
				Если ОтправкаПоМаршруту Тогда
					Для Каждого ЭлементМассиваИзмененийВМаршруте Из МассивИзмененийВМаршруте Цикл
						ЭлементМаршрута = лЭлектронныйДокументОбъект.Маршрут.Получить(ЭлементМассиваИзмененийВМаршруте.ПозицияВМаршруте);
						ЭлементМаршрута.Состояние = ЭлементМассиваИзмененийВМаршруте.Состояние;
					КонецЦикла;
				КонецЕсли;
				Если ЗначениеЗаполнено(лСсылкаНаДокумент) Тогда
					Если лЭлектронныйДокументОбъект.DocHref = "" Тогда
						лЭлектронныйДокументОбъект.DocHref  = лСсылкаНаДокумент;
					КонецЕсли;
				КонецЕсли;
				СобытиеОтправкиСсылкиНаДокумент = Неопределено;
				ОписаниеПоОтправкеСсылкиНаДокумент = "";
				Если ТипЗнч(МассивОтправкаСсылкиНаДокумент) = Тип("Массив") Тогда
					Если МассивОтправкаСсылкиНаДокумент.Количество() > 0 Тогда
						ОписаниеПоОтправкеСсылкиНаДокумент = НСтр("ru = 'на электронную почту:'; uk = 'на електронну пошту:'");
						Если ЗначениеЗаполнено(лСсылкаНаДокумент) Тогда
							СобытиеОтправкиСсылкиНаДокумент = Перечисления.скEDI_СобытияЭлектронныхДокументов.ОтправкаСсылки;
						КонецЕсли;
						лЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент.Очистить();
						Для Каждого СтрокаМассиваНастроекОтправкаСсылкиНаДокумент из МассивОтправкаСсылкиНаДокумент Цикл
							НоваяСтрокаОтправкаСсылкиНаДокумент = лЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент.Добавить();
							НоваяСтрокаОтправкаСсылкиНаДокумент.ЭлектроннаяПочта = СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта;
							НоваяСтрокаОтправкаСсылкиНаДокумент.Комментарий = СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий;
							
							ОписаниеПоОтправкеСсылкиНаДокумент = ОписаниеПоОтправкеСсылкиНаДокумент + Символы.ПС + СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.ЭлектроннаяПочта;
							Если ЗначениеЗаполнено(СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий) Тогда
								ОписаниеПоОтправкеСсылкиНаДокумент = ОписаниеПоОтправкеСсылкиНаДокумент + " - " + СтрокаМассиваНастроекОтправкаСсылкиНаДокумент.Комментарий;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				//ДокументБылСоздан = Ложь;
				//Если НЕ ДанныеДокумента.ЕстьОшибки Тогда//??? И ДокументБылПодписан Тогда
				Если ДокументПолученРезультатПодписи Тогда
					Если Не ПодписиПолученыИзЭлектронногоДокумента Тогда
						Для Каждого СтрокаПодписи из ТаблицаПодписейПоДокументу Цикл
							НоваяСтрокаПодписи = лЭлектронныйДокументОбъект.Подписи.Добавить();
							НоваяСтрокаПодписи.Подпись = СтрокаПодписи.Подпись;
						КонецЦикла;
					КонецЕсли;
					Для Каждого СтрокаПодписи Из ТаблицаНакладываемыхНаДокументПодписей Цикл
						ПодписиВДокументе = лЭлектронныйДокументОбъект.Подписи.НайтиСтроки(Новый Структура("Подпись", СтрокаПодписи.Подпись));
						Для Каждого ПодписьВДокументе Из ПодписиВДокументе Цикл
							ПодписьВДокументе.Подпись = СтрокаПодписи.ВыбранаяПодпись;
							ПодписьВДокументе.Подписано = Истина;
							ПодписьВДокументе.ДатаПодписания = ДатаОперации;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;
				лЭлектронныйДокументОбъект.ПоследняяОперация = ДатаОперации;
				ЗаписатьЭлектронныйДокументСПредварительнымПоискомСвязаных(лЭлектронныйДокументОбъект, ДанныеДокумента.ВидЭлектронногоДокумента, ДанныеДокумента.ВидЭлектронногоДокумента.Владелец);
				Если лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента.ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента Тогда
					СоглашениеОАнулированииДокументаОбработать(лЭлектронныйДокументОбъект.Ссылка, Ложь);
				КонецЕсли;
				
				Если ДокументПолученРезультатПодписи Тогда
					скEDI_ВнешниеХранилища.СохранитьСодержимоеЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка,
						ПолучитьСледующийНомерВерсииСодержанияЭлектронногоДокумента(лЭлектронныйДокументОбъект.Ссылка),
						ТелоДокумента,
						ИзображениеДокумента,
						ВложениеДокумента1,
						ИмяФайлаВложениеДокумента1,
						ВложениеДокумента2,
						ИмяФайлаВложениеДокумента2,
						ВложениеДокумента3,
						ИмяФайлаВложениеДокумента3,
						МассивВложенийДокумента4,
						ТекущаяДата(),
						"",//лИмяФайла,
						0,//лDocVer,
						лСсылкаНаДокумент,
						Ложь,
						Ложь,
						Неопределено,
						Ложь
					);
					
					Для Каждого ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов из МассивДанныеПоПодписямВРегистрФаксимилеЭлектронныхДокументов Цикл
						МенеджерЗаписи = РегистрыСведений.скEDI_ФаксимилеЭлектронныхДокументов.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.ЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
						МенеджерЗаписи.КодУровняПодписи = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.КодУровняПодписи;
						МенеджерЗаписи.ДРФО = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.ДРФО;
						МенеджерЗаписи.Сторона = лЭлектронныйДокументОбъект.RoutePosition;
						МенеджерЗаписи.ТелоФаксимиле = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.ТелоФаксимиле;
						МенеджерЗаписи.ИмяПодписанта = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.ИмяПодписанта;
						МенеджерЗаписи.ДолжностьПодписанта = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.ДолжностьПодписанта;
						МенеджерЗаписи.Роль = ЭлементМассиваДанныхПоПодписямВРегистрФаксимилеЭлектронныхДокументов.Роль;
						МенеджерЗаписи.Записать(Истина);
					КонецЦикла;
					
					ОписаниеНаложеныхПодписей = ЗафиксироватьСобытияПоПодписаниюДокумента(ДанныеДокумента.ЭлектронныйДокумент, СписокНаложенныхНаДокументПодписей);
					
					СобытиеДляЖурнала = НСтр("ru = 'Документ подписан'; uk = 'Документ підписано'") + ": """
					+ лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента.Наименование + """ №" + лЭлектронныйДокументОбъект.НомерДокумента + НСтр("ru = ' от '; uk = ' від '") + Формат(лЭлектронныйДокументОбъект.ДатаДокумента, "ДФ=dd.MM.yyyy")
					+ Символы.ПС + ОписаниеНаложеныхПодписей;
					ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, СобытиеДляЖурнала, , Ложь);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СобытиеОтправкиСсылкиНаДокумент) Тогда
					лОписаниеПоОтправкеСсылкиНаДокумент = НСтр("ru = 'Отправлена ссылка на Электронный документ'; uk = 'Відправлено посилання на Електронний документ'")
					+ Символы.ПС
					+ лСсылкаНаДокумент
					+ Символы.ПС
					+ ОписаниеПоОтправкеСсылкиНаДокумент;
					
					ЗафиксироватьСобытиеЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент, СобытиеОтправкиСсылкиНаДокумент, лОписаниеПоОтправкеСсылкиНаДокумент, ДатаОперации);
				КонецЕсли;
					
				КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
				
				// Создать документ по квитанции-ответу
				ИнформацияООтправленойКвитанции = НСтр("ru = 'Получатель: '; uk = 'Одержувач: '") + лЭлектронныйДокументОбъект.ЕДРПОУКонтрагента + ?(ЗначениеЗаполнено(лЭлектронныйДокументОбъект.ФилиалКонтрагента), "(" + лЭлектронныйДокументОбъект.ФилиалКонтрагента + ")", "");
				ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + "
				|
				|"
				+ НСтр("ru = 'Имя файла: '; uk = 'Ім''я файлу: '") + ЭлектронныйДокумент.ИмяФайла + "
				|"
				+ НСтр("ru = 'Имя файла квитанции: '; uk = 'Ім''я файлу квитанції: '") + лИмяФайлаКвитанции + "
				|
				|" + КвитанцияТекст;// ПолныйТекстКвитанции;
				
				Если не ПодписыватьКвитанциюВсемиПодписями и ДокументПолученРезультатПодписи Тогда
					Если ТипКвитанции = ПредопределенноеЗначение("Перечисление.скEDI_ТипыКвитанций.Подтверждение") Тогда
						ИнформацияООтправленойКвитанции = ИнформацияООтправленойКвитанции + "
						|
						|"
						+ НСтр("ru = 'Подписи: '; uk = 'Підписи: '");
						ДополнитьОписаниеДаннымиПоПодписямКонтрагента(ПолучитьМассивПодписейКонтрагентаИзПодписанногоЭлектронногоДокумента(ТелоДокумента), ИнформацияООтправленойКвитанции, Неопределено, ОтражатьTSPСтатус, ОтражатьOCSPСтатус);
					КонецЕсли;
				КонецЕсли;
				
				
				Если Квитанция = Документы.скEDI_Квитанция.ПустаяСсылка() Тогда
					лДанныеЗаполненияКвитанции = Новый Структура;
					лДанныеЗаполненияКвитанции.Вставить("Дата",                ДатаОперации);
					лДанныеЗаполненияКвитанции.Вставить("ВидКвитанции",        ВидКвитанции);
					лДанныеЗаполненияКвитанции.Вставить("Организация",         лОрганизацияEDI);
					лДанныеЗаполненияКвитанции.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
					лДанныеЗаполненияКвитанции.Вставить("ИмяФайла",            лИмяФайлаКвитанции);
					лДанныеЗаполненияКвитанции.Вставить("DocVer",              лDocVer);
					лДанныеЗаполненияКвитанции.Вставить("ЕДРПОУКонтрагента",   лЭлектронныйДокументОбъект.ЕДРПОУКонтрагента);
					лДанныеЗаполненияКвитанции.Вставить("ФилиалКонтрагента",   лЭлектронныйДокументОбъект.ФилиалКонтрагента);
					лДанныеЗаполненияКвитанции.Вставить("ТипКвитанции",        ТипКвитанции);
					лДанныеЗаполненияКвитанции.Вставить("ТекстКвитанции",      ИнформацияООтправленойКвитанции);
					лДанныеЗаполненияКвитанции.Вставить("ТелоКвитанции",       КвитанцияТело);
					лДанныеЗаполненияКвитанции.Вставить("ВхИсх",               Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий);
					
					лКвитанцияОбъект = Документы.скEDI_Квитанция.СоздатьДокумент();
					лКвитанцияОбъект.Заполнить(лДанныеЗаполненияКвитанции);
					Если ОтправкаПоМаршруту Тогда
						Для Каждого ЭлементМассиваОтправокПоМаршруту Из МассивОтправокПоМаршруту Цикл
							НоваяСтрокаОтправкиПоМаршруту = лКвитанцияОбъект.ОтправкиПоМаршруту.Добавить();
							НоваяСтрокаОтправкиПоМаршруту.ЕДРПОУКонтрагента = ЭлементМассиваОтправокПоМаршруту.ЕДРПОУКонтрагента;
							НоваяСтрокаОтправкиПоМаршруту.ФилиалКонтрагента = ЭлементМассиваОтправокПоМаршруту.ФилиалКонтрагента;
							НоваяСтрокаОтправкиПоМаршруту.ИмяФайла = ЭлементМассиваОтправокПоМаршруту.ИмяФайла;
							НоваяСтрокаОтправкиПоМаршруту.DocVer = ЭлементМассиваОтправокПоМаршруту.DocVer;
							НоваяСтрокаОтправкиПоМаршруту.RoutePosition = ЭлементМассиваОтправокПоМаршруту.RoutePosition;
							НоваяСтрокаОтправкиПоМаршруту.ToNextHop = ЭлементМассиваОтправокПоМаршруту.ToNextHop;
						КонецЦикла;
					КонецЕсли;
				Иначе
					лКвитанцияОбъект = Квитанция.ПолучитьОбъект();
					лКвитанцияОбъект.Дата = ДатаОперации;
					лКвитанцияОбъект.ТекстКвитанции = ИнформацияООтправленойКвитанции;
					лКвитанцияОбъект.Готовится = Ложь;
					лКвитанцияОбъект.ИмяФайла = лИмяФайлаКвитанции;
					лКвитанцияОбъект.DocVer = лDocVer;
					//лКвитанцияОбъект.ТелоКвитанции = КвитанцияТело;
					Если ОтправкаПоМаршруту Тогда
						Для Каждого ЭлементМассиваОтправокПоМаршруту Из МассивОтправокПоМаршруту Цикл
							НоваяСтрокаОтправкиПоМаршруту = лКвитанцияОбъект.ОтправкиПоМаршруту.Добавить();
							НоваяСтрокаОтправкиПоМаршруту.ЕДРПОУКонтрагента = ЭлементМассиваОтправокПоМаршруту.ЕДРПОУКонтрагента;
							НоваяСтрокаОтправкиПоМаршруту.ФилиалКонтрагента = ЭлементМассиваОтправокПоМаршруту.ФилиалКонтрагента;
							НоваяСтрокаОтправкиПоМаршруту.ИмяФайла = ЭлементМассиваОтправокПоМаршруту.ИмяФайла;
							НоваяСтрокаОтправкиПоМаршруту.DocVer = ЭлементМассиваОтправокПоМаршруту.DocVer;
							НоваяСтрокаОтправкиПоМаршруту.RoutePosition = ЭлементМассиваОтправокПоМаршруту.RoutePosition;
							НоваяСтрокаОтправкиПоМаршруту.ToNextHop = ЭлементМассиваОтправокПоМаршруту.ToNextHop;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				лКвитанцияОбъект.ОбменДанными.Загрузка = Истина;
				лКвитанцияОбъект.Записать();
				
				СобытиеДляЖурнала = лСобытиеЭлектронногоДокументаТекст + ": """
				+ ЭлектронныйДокумент.ВидЭлектронногоДокумента.Наименование + """ №" + ЭлектронныйДокумент.НомерДокумента + НСтр("ru = ' от '; uk = ' від '") + Формат(ЭлектронныйДокумент.ДатаДокумента, "ДФ=dd.MM.yyyy");
				ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, СобытиеДляЖурнала, , Ложь);
				
				УстановитьСнятьОтметкуОбработано(ЭлектронныйДокумент, Истина);
				
				Если ТипЗнч(ПараметрыСобытий) = Тип("Структура") Тогда
					тСобытиеПри = ПараметрыСобытий.СобытиеПри;
					тОрганизация = ПараметрыСобытий.Организация;
					тВидЭлектронногоДокумента = ПараметрыСобытий.ВидЭлектронногоДокумента;
					тВхИсх = ПараметрыСобытий.ВхИсх;
					тГдеСоздан = ПараметрыСобытий.ГдеСоздан;
					тЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
					тСостояние = лЭлектронныйДокументОбъект.Состояние;
					тДокумент1С = лЭлектронныйДокументОбъект.Документ1С;
					тМассивВложений = Неопределено;
					ПараметрыСобытий.Свойство("МассивВложений", тМассивВложений);
					Если ТипЗнч(тМассивВложений) <> Тип("Массив") Тогда
						Если ЗначениеЗаполнено(тЭлектронныйДокумент) Тогда
							тМассивВложений = ПолучитьМассивВложенийЭлектронногоДокумента(тЭлектронныйДокумент);
						Иначе
							тМассивВложений = Новый Массив;
						КонецЕсли;
						ПараметрыСобытий.Вставить("МассивВложений", тМассивВложений);
					КонецЕсли;
					тМассивПодписей = Неопределено;
					ПараметрыСобытий.Свойство("МассивПодписей", тМассивПодписей);
					Если ТипЗнч(тМассивПодписей) <> Тип("Массив") Тогда
						тМассивПодписей = Новый Массив;
						ПараметрыСобытий.Вставить("МассивПодписей", тМассивПодписей);
					КонецЕсли;
					ОбработатьСобытие_ПриОтправкеКвитанции(тСобытиеПри, тОрганизация, тВидЭлектронногоДокумента, тВхИсх, тГдеСоздан, тЭлектронныйДокумент, тСостояние, тМассивПодписей, тДокумент1С, тМассивВложений);
				КонецЕсли;
			КонецЕсли;
		//ИначеЕсли СпособОтправки = ПредопределенноеЗначение("Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезДФС") Тогда
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	// Обновление журнала операций.
	Если ЖурналОперации <> "" Тогда
		Если ДополнительныеПараметры.ЖурналОперации = "" Тогда
			ДополнительныеПараметры.ЖурналОперации = ЖурналОперации;
		Иначе
			ДополнительныеПараметры.ЖурналОперации = ДополнительныеПараметры.ЖурналОперации + Символы.ПС + ЖурналОперации;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОтправитьКвитанцииПоЭлектроннымДокументам()

Процедура ПолучитьДанныеПоЛицензии(Знач ЕДРПОУ, Знач Филиал, СрокДействияЛицензии, НаименованиеЛицензии, ОбновлятьКеш = Ложь) Экспорт
	СрокДействияЛицензии = '00010101';
	НаименованиеЛицензии = "";
	
	ЕДРПОУ = СокрЛП(ЕДРПОУ);
	Филиал = СокрЛП(Филиал);
	Если ЗначениеЗаполнено(ЕДРПОУ) Тогда
		Ключ = ЕДРПОУ;
		Если ЗначениеЗаполнено(Филиал) Тогда
			Ключ = Ключ + "/" + Филиал;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	СоответствиеСрокиЛицензии = Новый Соответствие;
	ТекСоответствиеСрокиЛицензии = ПолучитьЗначениеПараметраСеанса("скEDI_СоответствиеСрокиЛицензии");
	Если ТекСоответствиеСрокиЛицензии <> Неопределено Тогда
		Для Каждого ЭлементСоответствия Из ТекСоответствиеСрокиЛицензии Цикл
			СоответствиеСрокиЛицензии.Вставить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеИзКэша = СоответствиеСрокиЛицензии.Получить(Ключ);
	Если ЗначениеИзКэша = Неопределено или ОбновлятьКеш Тогда
		лПараметры = Новый Структура;
		лПараметры.Вставить("EDRPOU", ЕДРПОУ);
		РезультатПоЛицензиям = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("svc/downloadlicense", лПараметры);
		
		МассивЛицензий = Неопределено;
		Если РезультатПоЛицензиям.Свойство("License", МассивЛицензий) Тогда
			Если ТипЗнч(МассивЛицензий) = Тип("Массив") Тогда
				Для Каждого СтрокаМассиваЛицензий из МассивЛицензий Цикл
					Если ЕДРПОУ = СтрокаМассиваЛицензий.Edrpou и Филиал = Строка(СтрокаМассиваЛицензий.Dept) Тогда
						ТекДата = Неопределено;
						Если ПолучитьДатуФорматаДДММГГГГсРазделителем(СтрокаМассиваЛицензий.DateEnd, ТекДата) Тогда
							Если ЗначениеЗаполнено(СрокДействияЛицензии) Тогда
								Если СрокДействияЛицензии < ТекДата Тогда
									СрокДействияЛицензии = ТекДата;
									НаименованиеЛицензии = СтрокаМассиваЛицензий.Name;
								КонецЕсли;
							Иначе
								СрокДействияЛицензии = ТекДата;
								НаименованиеЛицензии = СтрокаМассиваЛицензий.Name;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ДанныеПоЛицензии = Новый Структура;
		ДанныеПоЛицензии.Вставить("СрокДействияЛицензии", СрокДействияЛицензии);
		ДанныеПоЛицензии.Вставить("НаименованиеЛицензии", НаименованиеЛицензии);
		СоответствиеСрокиЛицензии.Вставить(Ключ, Новый ФиксированнаяСтруктура(ДанныеПоЛицензии));
		УстановитьЗначениеПараметраСеанса("скEDI_СоответствиеСрокиЛицензии",  Новый ФиксированноеСоответствие(СоответствиеСрокиЛицензии));
	Иначе
		СрокДействияЛицензии = ЗначениеИзКэша.СрокДействияЛицензии;
		НаименованиеЛицензии = ЗначениеИзКэша.НаименованиеЛицензии;
	КонецЕсли;
КонецПроцедуры

Процедура ОтправитьСсылкиНаДокументПоИмениФайла(ЭлектронныйДокумент, ИмяФайла, МассивСсылок, Результат) Экспорт
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("FileName", ИмяФайла);
	МассивNotifyContacts = Новый Массив;
	Для Каждого ЭлементМассиваОтправкаСсылкиНаДокумент из МассивСсылок Цикл
		АдресЕстьВСписке = Ложь;
		Для Каждого ЭлементМассиваNotifyContacts Из МассивNotifyContacts Цикл
			Если ВРег(ЭлементМассиваОтправкаСсылкиНаДокумент.ЭлектроннаяПочта) = ВРег(ЭлементМассиваNotifyContacts.EMail) Тогда
				АдресЕстьВСписке = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не АдресЕстьВСписке Тогда
			ЭлементМассиваNotifyContacts = Новый Структура("EMail", ЭлементМассиваОтправкаСсылкиНаДокумент.ЭлектроннаяПочта);
			МассивNotifyContacts.Добавить(ЭлементМассиваNotifyContacts);
		КонецЕсли;
	КонецЦикла;
	ПараметрыОтправки.Вставить("NotifyContacts", МассивNotifyContacts);
	
	ДатаОперации = ТекущаяДата();
	РезультатОтправкиСсылки = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/dochref", ПараметрыОтправки);
	Если РезультатОтправкиСсылки.Code = 0 Тогда
		лСсылкаНаДокумент = "";
		тСылкаНаДокумент = Неопределено;
		Если РезультатОтправкиСсылки.Свойство("DocHref", тСылкаНаДокумент) Тогда
			Если ЗначениеЗаполнено(тСылкаНаДокумент) Тогда
				лСсылкаНаДокумент = тСылкаНаДокумент;
			КонецЕсли;
		КонецЕсли;
		
		Если лСсылкаНаДокумент = "" Тогда
			Результат = НСтр("ru = 'Ссылка на документ не получена.'; uk = 'Посилання на документ не отримано.'");
		Иначе
			СобытиеОтправкиСсылкиНаДокумент = Перечисления.скEDI_СобытияЭлектронныхДокументов.ОтправкаСсылки;
			ОписаниеПоОтправкеСсылкиНаДокумент = "";
			
			ЭлектронныйДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
			ЭлектронныйДокументОбъект.DocHref = лСсылкаНаДокумент;
			Если МассивСсылок.Количество() > 0 Тогда
				ОписаниеПоОтправкеСсылкиНаДокумент = НСтр("ru = 'на электронную почту:'; uk = 'на електронну пошту:'");
				
				//ЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент.Очистить();
				Для Каждого СтрокаМассиваСсылок из МассивСсылок Цикл
					СтрокаОтправкаСсылкиНаДокумент = Неопределено;
					Для Каждого ТекСтрокаОтправкаСсылкиНаДокумент из ЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент Цикл
						Если ВРег(СтрокаМассиваСсылок.ЭлектроннаяПочта) = ВРег(ТекСтрокаОтправкаСсылкиНаДокумент.ЭлектроннаяПочта) Тогда
							СтрокаОтправкаСсылкиНаДокумент = ТекСтрокаОтправкаСсылкиНаДокумент;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если СтрокаОтправкаСсылкиНаДокумент = Неопределено Тогда
						СтрокаОтправкаСсылкиНаДокумент = ЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент.Добавить();
						СтрокаОтправкаСсылкиНаДокумент.ЭлектроннаяПочта = СтрокаМассиваСсылок.ЭлектроннаяПочта;
						СтрокаОтправкаСсылкиНаДокумент.Комментарий = СтрокаМассиваСсылок.Комментарий;
					КонецЕсли;
					
					ОписаниеПоОтправкеСсылкиНаДокумент = ОписаниеПоОтправкеСсылкиНаДокумент + Символы.ПС + СтрокаМассиваСсылок.ЭлектроннаяПочта;
					Если ЗначениеЗаполнено(СтрокаМассиваСсылок.Комментарий) Тогда
						ОписаниеПоОтправкеСсылкиНаДокумент = ОписаниеПоОтправкеСсылкиНаДокумент + " - " + СтрокаМассиваСсылок.Комментарий;
					КонецЕсли;
				КонецЦикла;
				ОписаниеПоОтправкеСсылкиНаДокумент = НСтр("ru = 'Отправлена ссылка на Электронный документ'; uk = 'Відправлено посилання на Електронний документ'")
				+ Символы.ПС
				+ лСсылкаНаДокумент
				+ Символы.ПС
				+ ОписаниеПоОтправкеСсылкиНаДокумент;
			Иначе
				ОписаниеПоОтправкеСсылкиНаДокумент = НСтр("ru = 'Получена ссылка на Электронный документ'; uk = 'Отримано посилання на Електронний документ'")
				+ Символы.ПС
				+ лСсылкаНаДокумент;
			КонецЕсли;
			ЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
			ЭлектронныйДокументОбъект.Записать();
			ЗафиксироватьСобытиеЭлектронногоДокумента(ЭлектронныйДокумент, СобытиеОтправкиСсылкиНаДокумент, ОписаниеПоОтправкеСсылкиНаДокумент, ДатаОперации);
			Результат = ОписаниеПоОтправкеСсылкиНаДокумент;
		КонецЕсли;
	Иначе
		Результат = РезультатОтправкиСсылки.Message;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьПараметрыФормыОтображенияДляСоглашенияОбАннулировании(ЭлектронныйДокумент, Организация) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	скEDI_ЭлектронныйДокумент.Ссылка КАК ЭлектронныйДокумент
	               |ИЗ
	               |	Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.скEDI_СвязиЭлектронныхДокументов КАК скEDI_СвязиЭлектронныхДокументов
	               |		ПО скEDI_ЭлектронныйДокумент.Ссылка = скEDI_СвязиЭлектронныхДокументов.ЭлектронныйДокумент1
	               |			И (скEDI_СвязиЭлектронныхДокументов.ТипСвязи = ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыСвязейЭлектронныхДокументов.АннулированиеУтвержденногоДокумента))
	               |ГДЕ
	               |	скEDI_ЭлектронныйДокумент.Организация = &Организация
	               |	И скEDI_ЭлектронныйДокумент.ВидЭлектронногоДокумента.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента)
	               |	И НЕ скEDI_ЭлектронныйДокумент.Состояние В (ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоОтклонение), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоОтклонение), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтозванОтправителем), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ДокументОтозван), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.Аннулировано))
	               |	И скEDI_СвязиЭлектронныхДокументов.ЭлектронныйДокумент2 = &ЭлектронныйДокумент
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	скEDI_ЭлектронныйДокумент.Дата УБЫВ";
	

	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		лПараметрыФормыОтображенияЭлектронногоДокумента = Новый Структура("ЭлектронныйДокумент", ВыборкаРезультатаЗапроса.ЭлектронныйДокумент);
	Иначе
		лПараметрыФормыОтображенияЭлектронногоДокумента = Новый Структура;
		лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("СвязанныйЭлектронныйДокумент", ЭлектронныйДокумент);
		лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("СвязанныйЭлектронныйДокументТипСвязи", ПредопределенноеЗначение("Перечисление.скEDI_ТипыСвязейЭлектронныхДокументов.АннулированиеУтвержденногоДокумента"));
		лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("Организация", Организация);
		лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("ТипДокумента", ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента"));
	КонецЕсли;
	Возврат лПараметрыФормыОтображенияЭлектронногоДокумента;
КонецФункции

Функция ПолучитьКлючУникальностиФормыОтображениеЭлектронныхДокументов(ПараметрыФормыОтображенияЭлектронногоДокумента) Экспорт
	Перем пЭлектронныйДокумент, пДокумент1С, пОрганизация, пВидЭлектронногоДокумента, пТипДокумента, пСвязанныйЭлектронныйДокумент, пСвязанныйЭлектронныйДокументТипСвязи, пКонтрагент;
	
	ПараметрыФормыОтображенияЭлектронногоДокумента.Свойство("ЭлектронныйДокумент", пЭлектронныйДокумент);
	ПараметрыФормыОтображенияЭлектронногоДокумента.Свойство("Документ1С", пДокумент1С);
	ПараметрыФормыОтображенияЭлектронногоДокумента.Свойство("Организация", пОрганизация);
	ПараметрыФормыОтображенияЭлектронногоДокумента.Свойство("ВидЭлектронногоДокумента", пВидЭлектронногоДокумента);
	ПараметрыФормыОтображенияЭлектронногоДокумента.Свойство("ТипДокумента", пТипДокумента);
	ПараметрыФормыОтображенияЭлектронногоДокумента.Свойство("СвязанныйЭлектронныйДокумент", пСвязанныйЭлектронныйДокумент);
	ПараметрыФормыОтображенияЭлектронногоДокумента.Свойство("СвязанныйЭлектронныйДокументТипСвязи", пСвязанныйЭлектронныйДокументТипСвязи);
	ПараметрыФормыОтображенияЭлектронногоДокумента.Свойство("Контрагент", пКонтрагент);
	
	СоответствиеФормОтображенияЭлектронныхДокументов = ПолучитьЗначениеПараметраСеанса("скEDI_СоответствиеФормОтображенияЭлектронныхДокументов");
	КлючИЗначениеСоответствияФормы = Неопределено;
	Для Каждого КлючИЗначениеСоответствия из СоответствиеФормОтображенияЭлектронныхДокументов Цикл
		Если ЗначениеЗаполнено(пЭлектронныйДокумент) и (пЭлектронныйДокумент = КлючИЗначениеСоответствия.Значение.ЭлектронныйДокумент) Тогда
			КлючИЗначениеСоответствияФормы = КлючИЗначениеСоответствия;
			Прервать;
		ИначеЕсли ЗначениеЗаполнено(пОрганизация) и (пОрганизация = КлючИЗначениеСоответствия.Значение.Организация) Тогда
			Если ЗначениеЗаполнено(пДокумент1С) и (пДокумент1С = КлючИЗначениеСоответствия.Значение.Документ1С) Тогда
				КлючИЗначениеСоответствияФормы = КлючИЗначениеСоответствия;
				Прервать;
			ИначеЕсли ЗначениеЗаполнено(пТипДокумента) и (пТипДокумента = КлючИЗначениеСоответствия.Значение.ТипДокумента) Тогда
				Если ЗначениеЗаполнено(пСвязанныйЭлектронныйДокументТипСвязи) Тогда
					Если (пСвязанныйЭлектронныйДокументТипСвязи = КлючИЗначениеСоответствия.Значение.СвязанныйЭлектронныйДокументТипСвязи)
						и (пСвязанныйЭлектронныйДокумент = КлючИЗначениеСоответствия.Значение.СвязанныйЭлектронныйДокумент) Тогда
						КлючИЗначениеСоответствияФормы = КлючИЗначениеСоответствия;
						Прервать;
					КонецЕсли;
				ИначеЕсли ЗначениеЗаполнено(пКонтрагент) Тогда
					Если пКонтрагент = КлючИЗначениеСоответствия.Значение.Контрагент Тогда
						КлючИЗначениеСоответствияФормы = КлючИЗначениеСоответствия;
						Прервать;
					КонецЕсли;
				Иначе
					Если не ЗначениеЗаполнено(КлючИЗначениеСоответствия.Значение.Контрагент) Тогда
						КлючИЗначениеСоответствияФормы = КлючИЗначениеСоответствия;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если КлючИЗначениеСоответствияФормы = Неопределено Тогда
		СоответствиеФормы = Новый Соответствие;
		Для Каждого КлючИЗначениеСоответствия из СоответствиеФормОтображенияЭлектронныхДокументов Цикл
			СоответствиеФормы.Вставить(КлючИЗначениеСоответствия.Ключ, КлючИЗначениеСоответствия.Значение);
		КонецЦикла;
		
		Ключ = Строка(Новый УникальныйИдентификатор);
		
		ТекПараметры = Новый Структура;
		ТекПараметры.Вставить("ЭлектронныйДокумент", пЭлектронныйДокумент);
		ТекПараметры.Вставить("Документ1С", пДокумент1С);
		ТекПараметры.Вставить("Организация", пОрганизация);
		ТекПараметры.Вставить("ВидЭлектронногоДокумента", пВидЭлектронногоДокумента);
		ТекПараметры.Вставить("ТипДокумента", пТипДокумента);
		ТекПараметры.Вставить("СвязанныйЭлектронныйДокумент", пСвязанныйЭлектронныйДокумент);
		ТекПараметры.Вставить("СвязанныйЭлектронныйДокументТипСвязи", пСвязанныйЭлектронныйДокументТипСвязи);
		ТекПараметры.Вставить("Контрагент", пКонтрагент);
		
		СоответствиеФормы.Вставить(Ключ, Новый ФиксированнаяСтруктура(ТекПараметры));
		УстановитьЗначениеПараметраСеанса("скEDI_СоответствиеФормОтображенияЭлектронныхДокументов",  Новый ФиксированноеСоответствие(СоответствиеФормы));
		Возврат Ключ;
	Иначе
		Ключ = КлючИЗначениеСоответствия.Ключ;
		Возврат Ключ;
	КонецЕсли;
КонецФункции

Процедура ОбновитьДанныеПоПолучитьКлючуУникальностиФормыОтображениеЭлектронныхДокументов(КлючУникальности, ПараметрыФормыОтображенияЭлектронногоДокумента) Экспорт
	СоответствиеФормОтображенияЭлектронныхДокументов = ПолучитьЗначениеПараметраСеанса("скEDI_СоответствиеФормОтображенияЭлектронныхДокументов");
	СоответствиеФормы = Новый Соответствие;
	ПараметрыИзменены = Ложь;
	Для Каждого КлючИЗначениеСоответствия из СоответствиеФормОтображенияЭлектронныхДокументов Цикл
		Если КлючУникальности = КлючИЗначениеСоответствия.Ключ Тогда
			Если ПараметрыФормыОтображенияЭлектронногоДокумента = Неопределено Тогда
				ПараметрыИзменены = Истина;
			Иначе
				ТекПараметры = Новый Структура(КлючИЗначениеСоответствия.Значение);
				ЗаполнитьЗначенияСвойств(ТекПараметры, ПараметрыФормыОтображенияЭлектронногоДокумента);
				СоответствиеФормы.Вставить(КлючУникальности, Новый ФиксированнаяСтруктура(ТекПараметры));
				ПараметрыИзменены = Истина;
			КонецЕсли;
		Иначе
			СоответствиеФормы.Вставить(КлючИЗначениеСоответствия.Ключ, КлючИЗначениеСоответствия.Значение);
		КонецЕсли;
	КонецЦикла;
	Если ПараметрыИзменены Тогда
		УстановитьЗначениеПараметраСеанса("скEDI_СоответствиеФормОтображенияЭлектронныхДокументов",  Новый ФиксированноеСоответствие(СоответствиеФормы));
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьЖурналРабочегоСтолаПоТипуЭлектронныхДокументов(ТипЭлектронныхДокументов) Экспорт
	Если ТипЭлектронныхДокументов = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы");
	ИначеЕсли ТипЭлектронныхДокументов = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы");
	ИначеЕсли ТипЭлектронныхДокументов = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы");
	ИначеЕсли ТипЭлектронныхДокументов = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС");
	ИначеЕсли ТипЭлектронныхДокументов = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПустаяСсылка");
	КонецЕсли;
КонецФункции

Процедура СформироватьНовыйВариантИСохранитьЭлектронногоДокументаСервер(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоУспешноОбработаных) Экспорт
	ЖурналОперации           = "";//ДополнительныеПараметры.ЖурналОперации;
	Для Каждого ДанныеДокумента Из ТаблицаДанныхДокументов Цикл 
		Если ДанныеДокумента.ЕстьОшибки Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеДокумента.ВхИсх = ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий")
		и ДанныеДокумента.ГдеСоздан = ПредопределенноеЗначение("Перечисление.скEDI_ГдеСоздан.ВДаннойИнформационнойБазе") Тогда
			Если ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная")
				или ДанныеДокумента.ВидЭлектронногоДокумента.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
				
				ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
				Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
					Если Не ЗначениеЗаполнено(ЭлектронныйДокумент.ОсновнойЭлектронныйДокумент) Тогда
						ТекДата = ТекущаяДата();
						
						лЭлектронныйДокументОбъект = ЭлектронныйДокумент.Скопировать();
						лЭлектронныйДокументОбъект.Дата = ЭлектронныйДокумент.Дата;
						лЭлектронныйДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.Создан");
						лЭлектронныйДокументОбъект.СостояниеРегистрацияВДФС = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументовРегистрацияВДФС.ПустаяСсылка");
						лЭлектронныйДокументОбъект.ИмяФайла = "";
						лЭлектронныйДокументОбъект.ИмяФайлаДФС = "";
						лЭлектронныйДокументОбъект.ДатаСоздания = ТекДата;
						лЭлектронныйДокументОбъект.ПоследняяОперация = ТекДата;
						лЭлектронныйДокументОбъект.ЗарегистрированВДФС = Ложь;
						лЭлектронныйДокументОбъект.ДатаРегистрацииВДФС = '00010101';
						лЭлектронныйДокументОбъект.РегистрационныйНомерДФС = "";
						лЭлектронныйДокументОбъект.ПричинаОтклоненияДФС = "";
						лЭлектронныйДокументОбъект.ПричинаОтклоненияКонтрагентом = "";
						лЭлектронныйДокументОбъект.ЕстьФинальнаяКвитанцияДФС = Ложь;
						лЭлектронныйДокументОбъект.ИдентификаторДокумента = "";
						лЭлектронныйДокументОбъект.ИдентификаторДокументаВБазеДанныхКонтрагента = "";
						лЭлектронныйДокументОбъект.DocId = "";
						лЭлектронныйДокументОбъект.OutId = "";
						лЭлектронныйДокументОбъект.DocVer = 0;
						лЭлектронныйДокументОбъект.DocHref = "";
						лЭлектронныйДокументОбъект.ОшибкаШифрованияПриОтправке = Ложь;
						лЭлектронныйДокументОбъект.Подписи.Очистить();
						лЭлектронныйДокументОбъект.ПодписиКонтрагента.Очистить();
						лЭлектронныйДокументОбъект.Содержание.Очистить();
						лЭлектронныйДокументОбъект.Вложения.Очистить();
						лЭлектронныйДокументОбъект.ОтправкаСсылкиНаДокумент.Очистить();
						
						Если лЭлектронныйДокументОбъект.ПоДаннымХранилищаРеквизитов Тогда
							СоответствиеЗначенийРеквизитов = лЭлектронныйДокументОбъект.ХранилищеРеквизитовЭлектронногоДокумента.Получить();
							Если ТипЗнч(СоответствиеЗначенийРеквизитов) = Тип("Соответствие") Тогда
								Таблица0 = СоответствиеЗначенийРеквизитов.Получить("0");
								Если ТипЗнч(Таблица0) = Тип("Массив") Тогда
									Если Таблица0.Количество() > 0 Тогда
										ПерваяСрокаТаблицы0 = Таблица0[0];
										Если ТипЗнч(ПерваяСрокаТаблицы0) = Тип("Соответствие") Тогда
											C_DOC_CNT = скEDI_ОбщегоНазначения.ПолучитьНомерДокументаВПериоде(лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента, лЭлектронныйДокументОбъект.Дата);
											ПерваяСрокаТаблицы0.Вставить("C_DOC_CNT", C_DOC_CNT);
											лЭлектронныйДокументОбъект.ХранилищеРеквизитовЭлектронногоДокумента = Новый ХранилищеЗначения(СоответствиеЗначенийРеквизитов);
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						ЗаписатьЭлектронныйДокументСПредварительнымПоискомСвязаных(лЭлектронныйДокументОбъект, ДанныеДокумента.ВидЭлектронногоДокумента, ДанныеДокумента.Организация, ЭлектронныйДокумент);
						
						ДанныеДокумента.ЭлектронныйДокумент = лЭлектронныйДокументОбъект.Ссылка;
						ДанныеДокумента.Состояние = лЭлектронныйДокументОбъект.Состояние;
						
						Событие = ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.Создание");
						ОписаниеСобытия = НСтр("ru = 'Создан новый вариант электронного документа'; uk = 'Створено новий варіант електронного документа'");
						ЗафиксироватьСобытиеЭлектронногоДокумента(ДанныеДокумента.ЭлектронныйДокумент, Событие, ОписаниеСобытия, ТекДата);
						
						СобытиеДляЖурнала = НСтр("ru = 'Создан новый вариант электронного документа'; uk = 'Створено новий варіант електронного документа'") + ": """
						+ лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента.Наименование + """ №" + лЭлектронныйДокументОбъект.НомерДокумента + НСтр("ru = ' от '; uk = ' від '") + Формат(лЭлектронныйДокументОбъект.ДатаДокумента, "ДФ=dd.MM.yyyy");
						ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, СобытиеДляЖурнала, , Ложь);
						
						КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;

	// Обновление журнала операций.
	Если ЖурналОперации <> "" Тогда
		Если ДополнительныеПараметры.ЖурналОперации = "" Тогда
			ДополнительныеПараметры.ЖурналОперации = ЖурналОперации;
		Иначе
			ДополнительныеПараметры.ЖурналОперации = ДополнительныеПараметры.ЖурналОперации + Символы.ПС + ЖурналОперации;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьОсновнойВариантЭлектронногоДокументаСервер(ТаблицаДанныхДокументов, ДополнительныеПараметры, КоличествоУспешноОбработаных) Экспорт
	ЖурналОперации           = "";//ДополнительныеПараметры.ЖурналОперации;
	Для Каждого ДанныеДокумента Из ТаблицаДанныхДокументов Цикл 
		Если ДанныеДокумента.ЕстьОшибки Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлектронныйДокумент = ДанныеДокумента.ЭлектронныйДокумент;
		Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
			Если ЗначениеЗаполнено(ЭлектронныйДокумент.ОсновнойЭлектронныйДокумент) Тогда
				//ЗаписатьЭлектронныйДокументСПредварительнымПоискомСвязаных(лЭлектронныйДокументОбъект, ДанныеДокумента.ВидЭлектронногоДокумента, ДанныеДокумента.Организация, ЭлектронныйДокумент);
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	ВложенныйЗапрос.Ссылка КАК Ссылка
				               |ИЗ
				               |	(ВЫБРАТЬ
				               |		скEDI_ЭлектронныйДокумент.Ссылка КАК Ссылка
				               |	ИЗ
				               |		Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
				               |	ГДЕ
				               |		скEDI_ЭлектронныйДокумент.ОсновнойЭлектронныйДокумент = &ОсновнойЭлектронныйДокумент
				               |	
				               |	ОБЪЕДИНИТЬ ВСЕ
				               |	
				               |	ВЫБРАТЬ
				               |		скEDI_ЭлектронныйДокумент.Ссылка
				               |	ИЗ
				               |		Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
				               |	ГДЕ
				               |		скEDI_ЭлектронныйДокумент.Ссылка = &ОсновнойЭлектронныйДокумент) КАК ВложенныйЗапрос
				               |ГДЕ
				               |	ВложенныйЗапрос.Ссылка <> &Ссылка";
				Запрос.УстановитьПараметр("Ссылка", ЭлектронныйДокумент);
				Запрос.УстановитьПараметр("ОсновнойЭлектронныйДокумент", ЭлектронныйДокумент.ОсновнойЭлектронныйДокумент);
				
				ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
				
				ЭлектронныйДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
				ЭлектронныйДокументОбъект.ОсновнойЭлектронныйДокумент = Документы.скEDI_ЭлектронныйДокумент.ПустаяСсылка();
				ЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
				ЭлектронныйДокументОбъект.Записать();
				Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
					лСоответствующийЭлектронныйДокументОбъект = ВыборкаРезультатаЗапроса.Ссылка.ПолучитьОбъект();
					лСоответствующийЭлектронныйДокументОбъект.ОсновнойЭлектронныйДокумент = ЭлектронныйДокументОбъект.Ссылка;
					лСоответствующийЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
					лСоответствующийЭлектронныйДокументОбъект.Записать();
				КонецЦикла;
				//СобытиеДляЖурнала = НСтр("ru = 'Создан новый вариант электронного документа'; uk = 'Створено новий варіант електронного документа'") + ": """
				//+ лЭлектронныйДокументОбъект.ВидЭлектронногоДокумента.Наименование + """ №" + лЭлектронныйДокументОбъект.НомерДокумента + НСтр("ru = ' от '; uk = ' від '") + Формат(лЭлектронныйДокументОбъект.ДатаДокумента, "ДФ=dd.MM.yyyy");
				//ДополнитьЖурналНовойСтрокойЧерезРазделитель(ЖурналОперации, СобытиеДляЖурнала, , Ложь);
				
				КоличествоУспешноОбработаных = КоличествоУспешноОбработаных + 1;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;

	// Обновление журнала операций.
	Если ЖурналОперации <> "" Тогда
		Если ДополнительныеПараметры.ЖурналОперации = "" Тогда
			ДополнительныеПараметры.ЖурналОперации = ЖурналОперации;
		Иначе
			ДополнительныеПараметры.ЖурналОперации = ДополнительныеПараметры.ЖурналОперации + Символы.ПС + ЖурналОперации;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьНаличиеВидаЭлектронногоДокументаДокументСВложениями(Организация) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ВидыЭлектронныхДокументов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.скEDI_ВидыЭлектронныхДокументов КАК скEDI_ВидыЭлектронныхДокументов
	               |ГДЕ
	               |	скEDI_ВидыЭлектронныхДокументов.Владелец = &Владелец
	               |	И скEDI_ВидыЭлектронныхДокументов.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями)
	               |	И НЕ скEDI_ВидыЭлектронныхДокументов.ПометкаУдаления";
	Запрос.УстановитьПараметр("Владелец", Организация);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ПолучитьНаличиеВидаЭлектронногоСоглашениеОАнулированииДокумента(Организация) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ВидыЭлектронныхДокументов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.скEDI_ВидыЭлектронныхДокументов КАК скEDI_ВидыЭлектронныхДокументов
	               |ГДЕ
	               |	скEDI_ВидыЭлектронныхДокументов.Владелец = &Владелец
	               |	И скEDI_ВидыЭлектронныхДокументов.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента)
	               |	И НЕ скEDI_ВидыЭлектронныхДокументов.ПометкаУдаления";
	Запрос.УстановитьПараметр("Владелец", Организация);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции
