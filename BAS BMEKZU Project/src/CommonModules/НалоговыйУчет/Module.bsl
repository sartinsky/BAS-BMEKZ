//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Единый налог

Функция НомерДокументаДляЕдиногоНалога(СтруктураШапкиДокумента) Экспорт
	
	Если СтруктураШапкиДокумента.ВидДокумента = "ПлатежноеПоручениеИсходящее" Тогда
		Префикс = "ПДВ";
	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "ПлатежноеПоручениеВходящее" Тогда
		Префикс = "ПДО";
	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
		Префикс = "ПОС";	
	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
		Префикс = "ПОН";	
	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "РасходныйКассовыйОрдер" Тогда
		Префикс = "ВКО";	
	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "ПриходныйКассовыйОрдер" Тогда
		Префикс = "ПКО";		
	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "АвансовыйОтчет" Тогда
		Префикс = "АЗ";
	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "ОтчетОРозничныхПродажах" Тогда
		Префикс = "РП";
	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "СписаниеСРасчетногоСчета" Тогда
		Префикс = "ПД";
	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеНаРасчетныйСчет" Тогда
		Префикс = "ПД";
	Иначе
		Префикс = "";	
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.ВидДокумента = "ПлатежноеПоручениеИсходящее" Тогда
		Номер = СтруктураШапкиДокумента.НомерПоручения;
	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "ПлатежноеПоручениеВходящее" Тогда
		Номер = СтруктураШапкиДокумента.НомерВходящегоДокумента;
	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств" Тогда
		Номер = СтруктураШапкиДокумента.НомерВходящегоДокумента;		
	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "РасходныйКассовыйОрдер" Тогда
		Номер = СтруктураШапкиДокумента.НомерОрдера;
	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "ПриходныйКассовыйОрдер" Тогда
		Номер = СтруктураШапкиДокумента.НомерОрдера;		
	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "СписаниеСРасчетногоСчета" Тогда
		Номер = СтруктураШапкиДокумента.НомерВходящегоДокумента;		
	ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеНаРасчетныйСчет" Тогда
		Номер = СтруктураШапкиДокумента.НомерВходящегоДокумента;		
	Иначе
		Номер = СтруктураШапкиДокумента.Номер;
	КонецЕсли;
	
	Возврат Префикс+" "+Номер;
	
КонецФункции

Процедура ДвиженияПоЕдиномуНалогуРасчеты(ДокументОбъект,СтруктураШапкиДокумента,РеестрПлатежей,Отказ=Ложь) Экспорт
	
	Организация             = СтруктураШапкиДокумента.Организация;
	Дата		            = СтруктураШапкиДокумента.Дата;
	Если РеестрПлатежей.Количество() = 0 тогда
		//Расчеты отсутствуют
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ВидДокумента = МетаданныеДокумента.Имя;
	ВидОперации  = ?(ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента), СтруктураШапкиДокумента.ВидОперации, Неопределено); 
	ЭтоВозврат   = (БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента,ВидОперации).РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат);
	
	ЗнакСуммы = ?(ЭтоВозврат, -1, 1);
	
	РеестрПлатежей.Свернуть("СтатьяДекларацииПоЕдиномуНалогу", "ГривневаяСумма, СуммаНДС, СтоимостьОС");
	НаборДвижений = ДокументОбъект.Движения.КнигаДоходовРасходовПоЕдиномуНалогу; 	
	НомерДокумента = НомерДокументаДляЕдиногоНалога(СтруктураШапкиДокумента);
	
	Для Каждого СтрокаПлатеж Из РеестрПлатежей Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.СтатьяДекларацииПоЕдиномуНалогу) ИЛИ СтрокаПлатеж.СтатьяДекларацииПоЕдиномуНалогу = Справочники.СтатьиНалоговыхДеклараций.ЕННК_ДоходыДоходомНеПризнается Тогда
			Продолжить;
		КонецЕсли;	
		
		Строка = НаборДвижений.Добавить();
        Строка.Период     	  = Дата;
		
		Строка.Организация    = Организация;
		Строка.Статья    	  = СтрокаПлатеж.СтатьяДекларацииПоЕдиномуНалогу;
		
		Если СтруктураШапкиДокумента.ЕстьНДС И СтруктураШапкиДокумента.Дата >= '20120101' Тогда
			Строка.Сумма    	  = (СтрокаПлатеж.ГривневаяСумма-СтрокаПлатеж.СуммаНДС) * ЗнакСуммы;
		Иначе
			Строка.Сумма    	  = СтрокаПлатеж.ГривневаяСумма * ЗнакСуммы;
		КонецЕсли;
		
		Если СтрокаПлатеж.СтоимостьОС > 0  
			И Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			Строка.Сумма = Макс(0, Строка.Сумма - СтрокаПлатеж.СтоимостьОС);
		КонецЕсли;	

		Строка.НомерПлатежногоДокумента = НомерДокумента;
			
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ДвиженияПоЕдиномуНалогуПрочее(ДокументОбъект,СтруктураШапкиДокумента,Отказ=Ложь) Экспорт
	
	РозничнаяВыручка = (ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер"))
		И (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка)
		И (СтруктураШапкиДокумента.Дата >= '20120101');
	Если РозничнаяВыручка И СтруктураШапкиДокумента.ЕстьНДС Тогда
		СуммаНДСПродажа = 0;
		СуммаНДСВозврат = 0;
		Для каждого СтрокаТЧ из ДокументОбъект.ПриемРозничнойВыручки Цикл
			Если СтрокаТЧ.Возврат Тогда
				СуммаНДСВозврат = СуммаНДСВозврат + СтрокаТЧ.СуммаНДС;
			Иначе
				СуммаНДСПродажа = СуммаНДСПродажа + СтрокаТЧ.СуммаНДС;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Организация             = СтруктураШапкиДокумента.Организация;
	Дата		            = СтруктураШапкиДокумента.Дата;
	Сумма		            = СтруктураШапкиДокумента.СуммаДокумента;
	Если РозничнаяВыручка Тогда
		Сумма = СтруктураШапкиДокумента.СуммаПродаж;
		Если СтруктураШапкиДокумента.ЕстьНДС Тогда
			Сумма = Сумма - СуммаНДСПродажа;	
		КонецЕсли;
	КонецЕсли;
	НаборДвижений = ДокументОбъект.Движения.КнигаДоходовРасходовПоЕдиномуНалогу; 	
	НомерДокумента = НомерДокументаДляЕдиногоНалога(СтруктураШапкиДокумента);
	
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.СтатьяДекларацииПоЕдиномуНалогу) Тогда
		Возврат;
	КонецЕсли;	
	
	ВалютаДокумента  = СтруктураШапкиДокумента.ВалютаДокумента;
	ВалютаРегУчета   = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	ДанныеОВалютеРег = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРегУчета, Дата);
		
	Строка = НаборДвижений.Добавить();
    Строка.Период     	  = Дата;
		
	Строка.Организация    = Организация;
	Строка.Статья    	  = СтруктураШапкиДокумента.СтатьяДекларацииПоЕдиномуНалогу;
		
	Строка.Сумма    	  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма, ВалютаДокумента, ВалютаРегУчета,
											СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалютеРег.Курс, 
											СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалютеРег.Кратность);	
		
	Строка.НомерПлатежногоДокумента = НомерДокумента;
	
	Если РозничнаяВыручка И СтруктураШапкиДокумента.СуммаВозврата <> 0 Тогда
		
		Организация             = СтруктураШапкиДокумента.Организация;
		Дата		            = СтруктураШапкиДокумента.Дата;
		Сумма		            = СтруктураШапкиДокумента.СуммаВозврата;
		Если СтруктураШапкиДокумента.ЕстьНДС Тогда
			Сумма = Сумма - СуммаНДСВозврат;	
		КонецЕсли;
			
		Строка = НаборДвижений.Добавить();
	    Строка.Период     	  = Дата;
			
		Строка.Организация    = Организация;
		Строка.Статья    	  = Справочники.СтатьиНалоговыхДеклараций.ЕННК_ДоходыВозвраты;
			
		Строка.Сумма    	  = (-1)*Сумма;
		
		Строка.НомерПлатежногоДокумента = НомерДокумента;
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура ДвиженияПоЕдиномуНалогуТаблица(ДокументОбъект,СтруктураШапкиДокумента,Таблица,Отказ=Ложь) Экспорт
	
	Организация             = СтруктураШапкиДокумента.Организация;
	Дата		            = СтруктураШапкиДокумента.Дата;
	Если Таблица.Количество() = 0 тогда
		//Расчеты отсутствуют
		Возврат;
	КонецЕсли;              
	Таблица.Свернуть("СтатьяДекларацииПоЕдиномуНалогу", "Сумма");
	НаборДвижений = ДокументОбъект.Движения.КнигаДоходовРасходовПоЕдиномуНалогу; 	
	НомерДокумента = НомерДокументаДляЕдиногоНалога(СтруктураШапкиДокумента);
	
	ВалютаДокумента  = СтруктураШапкиДокумента.ВалютаДокумента;
	ВалютаРегУчета   = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	ДанныеОВалютеРег = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРегУчета, Дата);
		
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатьяДекларацииПоЕдиномуНалогу) Тогда
			Продолжить;
		КонецЕсли;	
		
		Строка = НаборДвижений.Добавить();
        Строка.Период     	  = Дата;
		
		Строка.Организация    = Организация;
		Строка.Статья    	  = СтрокаТаблицы.СтатьяДекларацииПоЕдиномуНалогу;
		
		Строка.Сумма    	  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.Сумма, ВалютаДокумента, ВалютаРегУчета,
												СтруктураШапкиДокумента.КурсДокумента, ДанныеОВалютеРег.Курс, 
												СтруктураШапкиДокумента.КратностьДокумента, ДанныеОВалютеРег.Кратность);	
		
		Строка.НомерПлатежногоДокумента = НомерДокумента;
			
	КонецЦикла;	
	
КонецПроцедуры	

/////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ РАБОТЫ С НАЛОГОВЫМ НАЗНАЧЕНИЕМ

// Функция получает налоговое назначение,
// по его составляющим
//
// Параметры
//  Амортизируется           – Тип: Булево                                     – признак амортизируемости,
//                                                                               искомого назначения.
//
//  ВидНалоговойДеятельности – Тип: СправочникСсылка.ВидыНалоговойДеятельности – вид налоговой деятельности,
//                                                                               искомого назначения.
//                 
//  ВидДеятельностиНДС       – Тип: ПеречислениеСсылка.ВидыДеятельностиНДС     - вид деятельности НДС, 
//                                                                               искомого назначения.
//                 
//
// Возвращаемое значение:
//   Тип:   СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат  
//
Функция ПолучитьНалоговоеНазначениеПоСоставляющим(Амортизируется, ВидНалоговойДеятельности, ВидДеятельностиНДС) Экспорт

	Запрос       = Новый Запрос;
	Запрос.УстановитьПараметр("Амортизируется"          , Амортизируется);
	Запрос.УстановитьПараметр("ВидНалоговойДеятельности", ВидНалоговойДеятельности);
	Запрос.УстановитьПараметр("ВидДеятельностиНДС"      , ВидДеятельностиНДС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НалоговыеНазначенияАктивовИЗатрат.Ссылка КАК НалоговоеНазначение
	|ИЗ
	|	Справочник.НалоговыеНазначенияАктивовИЗатрат КАК НалоговыеНазначенияАктивовИЗатрат
	|ГДЕ
	|	НалоговыеНазначенияАктивовИЗатрат.Амортизируется = &Амортизируется
	|	И НалоговыеНазначенияАктивовИЗатрат.ВидНалоговойДеятельности = &ВидНалоговойДеятельности
	|	И НалоговыеНазначенияАктивовИЗатрат.ВидДеятельностиНДС = &ВидДеятельностиНДС";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.НалоговоеНазначение
		
	Иначе
		
		Возврат Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка()
		
	КонецЕсли;		

КонецФункции // ПолучитьНалоговоеНазначениеПоСоставляющим()

Функция ПолучитьКоэффициентПропорциональногоНДС(Организация, Период) Экспорт
	
	СтруктураОтбора = Новый Структура("Организация, СпецРежимНалогообложения", Организация, 0);
	
	ТаблицаКоэффициентов = РегистрыСведений.КоэффициентыПропорциональногоОтнесенияНДСНаКредит.СрезПоследних(Период, СтруктураОтбора);
	
	Если ТаблицаКоэффициентов.Количество() = 0 Тогда
		
		Возврат 0;		
		
	Иначе
		
		Возврат ТаблицаКоэффициентов[0].Коэффициент;		
		
	КонецЕсли;
	
КонецФункции	

///////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ РАБОТЫ СО СЛОЖНОЙ И УПРОЩЕННОЙ СХЕМОЙ НАЛОГОВОГО УЧЕТА

// Формирует пустую таблицу, используемую для формирования проводок при 
// учете НДС И НП по упроцщеной схеме
//
// Параметры
//    НЕТ
// Возвращаемое значение:
//   ТаблицаЗначений  – пустая таблица с нужной струкутрой колонок
//
Функция СоздатьСтруктуруТаблицыНалоговыхСумм() Экспорт

	Таблица = Новый ТаблицаЗначений();
	
	Таблица.Колонки.Добавить("ИмяРегистра", 			Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	Таблица.Колонки.Добавить("ДоговорКонтрагента", 		Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Таблица.Колонки.Добавить("Сделка", 					Документы.ТипВсеСсылки());
	Таблица.Колонки.Добавить("ВозвратнаяТара", 			Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("СобытиеНДС", 				Новый ОписаниеТипов("ПеречислениеСсылка.СобытияОжидаемыйИПодтвержденныйНДСПриобретений, ПеречислениеСсылка.СобытияОжидаемыйИПодтвержденныйНДСПродаж"));
	Таблица.Колонки.Добавить("СтавкаНДС", 				Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	Таблица.Колонки.Добавить("ДляХозяйственнойДеятельности", Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("ВидДеятельностиНДС", 		Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДеятельностиНДС"));
	Таблица.Колонки.Добавить("Амортизируется", 			Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("СуммаВзаиморасчетов", 	ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	Таблица.Колонки.Добавить("БазаНДС", 				ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	Таблица.Колонки.Добавить("СуммаНДС", 				ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	Таблица.Колонки.Добавить("СуммаНДСПропорционально", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	Возврат Таблица;

КонецФункции // ()

// Процедура заполняет колонки таблицы товаров, которые будут в дальнейшем использоваться
// для формирования движений по бухгалтерскому и налоговому учетам
Процедура ДобавитьКолонкиТоваровРегл(ТаблицаТоваров, СтруктураШапкиДокумента, ПогрешностиОкругления, Приобретение = Истина) Экспорт
	
	Если НЕ ТипЗнч(Приобретение) = Тип("Булево") Тогда
		Приобретение = Ложь;		
	КонецЕсли;
	
	ЕстьПропорциональныйНДС = Приобретение И СтруктураШапкиДокумента.Свойство("СуммаНДСПропорциональноКредит");
	Если ЕстьПропорциональныйНДС Тогда
		ТаблицаТоваров.Колонки.Добавить("СуммаНДСВалИсходный",  ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	КонецЕсли;
	
	// Суммы в документе в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСРегл"        , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСРегл"           , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСРегл"          , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Суммы в документе в валюте документа
	ТаблицаТоваров.Колонки.Добавить("СуммаБезНДСВал"         , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаНДСВал"            , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("СуммаСНДСВал"           , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Суммы в проводках в валюте регл. учета
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДСРегл", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСРегл"   , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаСНДСРегл"  , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Суммы в проводках в валюте документа
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДСВал" , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСВал"    , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаСНДСВал"   , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаНДСКурсНБУ"	 , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));	
	
	// сумма по налоговому учету налога на прибыль
	ТаблицаТоваров.Колонки.Добавить("ПроводкиСуммаБезНДСНУ" , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	ВидДеятельностиНДСНеоблагаемый 		= Перечисления.ВидыДеятельностиНДС.Необлагаемая;
	ВидДеятельностиНДСПропорциональный 	= Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая;
	
	// Заполним значения в добавленых колонках 
	Для каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		
		// Рассчитаем суммы в документе в валюте документа
		СтрокаТаблицы.СуммаСНДСВал    = СтрокаТаблицы.Сумма + ?(СтруктураШапкиДокумента.СуммаВключаетНДС, 0, СтрокаТаблицы.НДС);
		СтрокаТаблицы.СуммаНДСВал     = СтрокаТаблицы.НДС;
		
		Если  ЕстьПропорциональныйНДС = Истина
			И СтрокаТаблицы.ВидДеятельностиНДС = ВидДеятельностиНДСПропорциональный Тогда
			// в этой колонке сохраним исходную сумму НДС в валюте.
			СтрокаТаблицы.СуммаНДСВалИсходный = СтрокаТаблицы.СуммаНДСВал;
			Если СтруктураШапкиДокумента.СуммаНДСПропорциональноВсего = 0 Тогда
				СтрокаТаблицы.СуммаНДСВал = 0;
			Иначе	
				СтрокаТаблицы.СуммаНДСВал = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(СтрокаТаблицы.СуммаНДСВал * (СтруктураШапкиДокумента.СуммаНДСПропорциональноКредит / СтруктураШапкиДокумента.СуммаНДСПропорциональноВсего), 2, , ПогрешностиОкругления, "СуммаНДСПропорциональноВал");
			КонецЕсли;	
		КонецЕсли;			
		
		СтрокаТаблицы.СуммаБезНДСВал  = СтрокаТаблицы.СуммаСНДСВал - СтрокаТаблицы.СуммаНДСВал;

		// Рассчитаем суммы в документе в валюте регл. учета
		Если СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			СтрокаТаблицы.СуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСВал;
			СтрокаТаблицы.СуммаНДСРегл  = СтрокаТаблицы.СуммаНДСВал;
		Иначе
			СтрокаТаблицы.СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаСНДСВал, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
												СтруктураШапкиДокумента.КурсДокумента, 1,
												СтруктураШапкиДокумента.КратностьДокумента, 1,
												, ПогрешностиОкругления, "СуммаСНДСРегл");
			СтрокаТаблицы.СуммаНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТаблицы.СуммаНДСВал, 
												СтруктураШапкиДокумента.ВалютаДокумента,
												СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, 
												СтруктураШапкиДокумента.КурсДокумента, 1,
												СтруктураШапкиДокумента.КратностьДокумента, 1,
												, ПогрешностиОкругления, СтрокаТаблицы.СтавкаНДС);
			
		КонецЕсли;
		СтрокаТаблицы.СуммаБезНДСРегл = СтрокаТаблицы.СуммаСНДСРегл - СтрокаТаблицы.СуммаНДСРегл;
		
		// Рассчитаем суммы в проводках в валюте регл. учета и валюте документа
		СтрокаТаблицы.ПроводкиСуммаСНДСРегл = СтрокаТаблицы.СуммаСНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаСНДСВал  = СтрокаТаблицы.СуммаСНДСВал;
		
		Если Приобретение Тогда
	
			// Определим значение НДС в проводках
			Если СтруктураШапкиДокумента.ЕстьНДС = Ложь Тогда
				// в документе НДС не указывается
				СтрокаТаблицы.ПроводкиСуммаНДСРегл = 0;
				СтрокаТаблицы.ПроводкиСуммаНДСВал  = 0;
			ИначеЕсли СтрокаТаблицы.ВидДеятельностиНДС = ВидДеятельностиНДСНеоблагаемый Тогда
				// НДС включается в стоимость
				СтрокаТаблицы.ПроводкиСуммаНДСРегл = 0;
				СтрокаТаблицы.ПроводкиСуммаНДСВал  = 0;
			Иначе
				СтрокаТаблицы.ПроводкиСуммаНДСРегл = СтрокаТаблицы.СуммаНДСРегл;
				СтрокаТаблицы.ПроводкиСуммаНДСВал  = СтрокаТаблицы.СуммаНДСВал;
			КонецЕсли;
			
		Иначе
			
			// Определим значение НДС в проводках
			Если СтруктураШапкиДокумента.ЕстьНДС = Ложь Тогда
				// в документе НДС не указывается
				СтрокаТаблицы.ПроводкиСуммаНДСРегл = 0;
				СтрокаТаблицы.ПроводкиСуммаНДСВал  = 0;
			Иначе
				СтрокаТаблицы.ПроводкиСуммаНДСРегл = СтрокаТаблицы.СуммаНДСРегл;
				СтрокаТаблицы.ПроводкиСуммаНДСВал  = СтрокаТаблицы.СуммаНДСВал;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТаблицы.ПроводкиСуммаБезНДСРегл = СтрокаТаблицы.ПроводкиСуммаСНДСРегл - СтрокаТаблицы.ПроводкиСуммаНДСРегл;
		СтрокаТаблицы.ПроводкиСуммаБезНДСВал  = СтрокаТаблицы.ПроводкиСуммаСНДСВал  - СтрокаТаблицы.ПроводкиСуммаНДСВал;
		
		СтрокаТаблицы.ПроводкиСуммаНДСКурсНБУ = СтрокаТаблицы.ПроводкиСуммаНДСРегл;
			
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирует движения по регистам ОжидаемыйИПодтвержденныйНДСПроиобретения(продаж) на сумму
// налоговых обязательств (кредита) рассчитаннных на момент документа по методу, указанному в договоре
// контрагента по договорам, для которых не установлен флаг "Сложный налоговый учет". Дополнительно проводит
// корректировку движений по регистрам Продажи(Приобретения)НалогвыйУчет для договоров "по расчетным документам".
//
// Параметры
// 		ДокументОбъект - Документ, по движениям которого определяются налоговые обязательства, возникшие из-за указанных движений
//		ТаблицаПоВторомуСобытиюНал - формируемая таблица сумм "второго события" в разрезе налоговых параметров.
//      ДатаДвижений - дата, на которую будут сформированы движения (имеет смылс, если она отличается от даты документа)
//      НеУчитываемыеДвиженияДокумента  - СписокЗначений - содержит События, движения с которыми документа не будут учиты ваться при расчете первого события
//      ДвиженияДокументаКакОстатки 	- Булево. Признак того, что движения документа будут учтены при расчете как остатки на момент документа, кроме движений, указанных в параметре УчитываемыеДвиженияДокумента.
//		УчитываемыеДвиженияДокумента    - СписокЗначений - содержит События регистров, движения с которыми будут при расчете учитываться как движения документа.
//		ТаблицаПоПервомуСобытиюНДС      - формируемая таблица сумм "первого события" в разрезе налоговых параметров.
Процедура ДвиженияПоРегистрамНалоговогоУчетаУпрощенныйНалоговыйУчет(ДокументОбъект, ТаблицаПоВторомуСобытиюНал = Неопределено, ДатаДвижений = Неопределено, НеУчитываемыеДвиженияДокумента = Неопределено, ДвиженияДокументаКакОстатки = Ложь, УчитываемыеДвиженияДокумента = Неопределено
	,ТаблицаПоПервомуСобытиюНДС = Неопределено
	) Экспорт
	
	ДатаДвижений = ?(ДатаДвижений = Неопределено, ДокументОбъект.Дата, ДатаДвижений);
	
	Если ТипЗнч(НеУчитываемыеДвиженияДокумента) <> Тип("СписокЗначений") Тогда
	
		НеУчитываемыеДвиженияДокумента	= Неопределено
	
	КонецЕсли;
	
	Если       ТипЗнч(УчитываемыеДвиженияДокумента) <> Тип("СписокЗначений")
		ИЛИ НЕ ДвиженияДокументаКакОстатки Тогда
	
		УчитываемыеДвиженияДокумента	= Неопределено
	
	КонецЕсли;
	
	// данные по движению документа по налоговым регистрам
	ЗапросДвиженияДокумента = Новый Запрос();
	
	ЗапросДвиженияДокумента.Текст = 
 		  "ВЫБРАТЬ
 		  |	""ПриобретенияНалоговыйУчет"" 						КАК ИмяРегистра,
 		  |	ПриобретенияНалоговыйУчет.Событие 					КАК Событие,
 		  |	ПриобретенияНалоговыйУчет.ВозвратнаяТара 			КАК ВозвратнаяТара,
 		  |	ПриобретенияНалоговыйУчет.ДоговорКонтрагента 		КАК ДоговорКонтрагента,
 		  |	ПриобретенияНалоговыйУчет.Сделка 					КАК Сделка,
 		  |	ПриобретенияНалоговыйУчет.РасчетныйДокумент 		КАК РасчетныйДокумент,
 		  |	ПриобретенияНалоговыйУчет.СтавкаНДС 				КАК СтавкаНДС,
		  |	ПриобретенияНалоговыйУчет.СчетУчетаНДСПодтвержденный КАК СчетУчетаНДС,
		  |	ПриобретенияНалоговыйУчет.ДляХозяйственнойДеятельности 		КАК ДляХозяйственнойДеятельности,
		  |	ПриобретенияНалоговыйУчет.ВидДеятельностиНДС 				КАК ВидДеятельностиНДС,
		  |	ПриобретенияНалоговыйУчет.Амортизируется 					КАК Амортизируется,
 		  |	СУММА(ПриобретенияНалоговыйУчет.СуммаВзаиморасчетов) 		КАК СуммаВзаиморасчетов,
 		  |	СУММА(ПриобретенияНалоговыйУчет.СуммаНДС) 					КАК СуммаНДС,
		  |	СУММА(ПриобретенияНалоговыйУчет.СуммаНДСПропорционально) 	КАК СуммаНДСПропорционально,
 		  |	ПриобретенияНалоговыйУчет.ДоговорКонтрагента.ВедениеВзаиморасчетовНУ 										КАК ВедениеВзаиморасчетовНУ,
 		  |	ПриобретенияНалоговыйУчет.ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПокупкам 		КАК СхемаНДС,
 		  |	ПриобретенияНалоговыйУчет.ДоговорКонтрагента.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПокупкам 	КАК СхемаНДСТара
 		  |ИЗ
 		  |	РегистрНакопления.ПриобретенияНалоговыйУчет КАК ПриобретенияНалоговыйУчет
 		  |ГДЕ
 		  |	ПриобретенияНалоговыйУчет.Регистратор = &Ссылка
 		  |	И ПриобретенияНалоговыйУчет.ДоговорКонтрагента.СложныйНалоговыйУчет = Ложь
 		  |	И ПриобретенияНалоговыйУчет.ВидДвижения = &ВидДвиженияПриход
		  |" +?(НеУчитываемыеДвиженияДокумента	= Неопределено,""," И НЕ ПриобретенияНалоговыйУчет.Событие В (&НеУчитываемыеДвиженияДокумента)") + "
		  |
 		  |СГРУППИРОВАТЬ ПО
 		  |	ПриобретенияНалоговыйУчет.ДоговорКонтрагента,
 		  |	ПриобретенияНалоговыйУчет.Сделка,
 		  |	ПриобретенияНалоговыйУчет.СтавкаНДС,
 		  |	ПриобретенияНалоговыйУчет.ВозвратнаяТара,
 		  |	ПриобретенияНалоговыйУчет.Событие,
 		  |	ПриобретенияНалоговыйУчет.ДляХозяйственнойДеятельности,
 		  |	ПриобретенияНалоговыйУчет.ВидДеятельностиНДС,
 		  |	ПриобретенияНалоговыйУчет.Амортизируется,
 		  |	ПриобретенияНалоговыйУчет.РасчетныйДокумент,
		  |	ПриобретенияНалоговыйУчет.СчетУчетаНДСПодтвержденный
 		  |
 		  |ОБЪЕДИНИТЬ ВСЕ
 		  |
 		  |ВЫБРАТЬ
 		  |	""ПродажиНалоговыйУчет"",
 		  |	ПродажиНалоговыйУчет.Событие,
 		  |	ПродажиНалоговыйУчет.ВозвратнаяТара,
 		  |	ПродажиНалоговыйУчет.ДоговорКонтрагента,
 		  |	ПродажиНалоговыйУчет.Сделка,
 		  |	ПродажиНалоговыйУчет.РасчетныйДокумент,
 		  |	ПродажиНалоговыйУчет.СтавкаНДС,
		  | ПродажиНалоговыйУчет.СчетУчетаНДСПодтвержденный,
 		  |	ИСТИНА,
 		  |	ИСТИНА,
 		  |	ЛОЖЬ,
 		  |	СУММА(ПродажиНалоговыйУчет.СуммаВзаиморасчетов),
 		  |	СУММА(ПродажиНалоговыйУчет.СуммаНДС),
		  | 0,
 		  |	ПродажиНалоговыйУчет.ДоговорКонтрагента.ВедениеВзаиморасчетовНУ,
 		  |	ПродажиНалоговыйУчет.ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПродажам,
 		  |	ПродажиНалоговыйУчет.ДоговорКонтрагента.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПродажам
 		  |ИЗ
 		  |	РегистрНакопления.ПродажиНалоговыйУчет КАК ПродажиНалоговыйУчет
 		  |ГДЕ
 		  |	ПродажиНалоговыйУчет.Регистратор = &Ссылка
 		  |	И ПродажиНалоговыйУчет.ДоговорКонтрагента.СложныйНалоговыйУчет = Ложь
 		  |	И ПродажиНалоговыйУчет.ВидДвижения = &ВидДвиженияПриход
		  |" +?(НеУчитываемыеДвиженияДокумента	= Неопределено,""," И НЕ ПродажиНалоговыйУчет.Событие В (&НеУчитываемыеДвиженияДокумента)") + "
 		  |
 		  |СГРУППИРОВАТЬ ПО
 		  |	ПродажиНалоговыйУчет.ДоговорКонтрагента,
 		  |	ПродажиНалоговыйУчет.Сделка,
 		  |	ПродажиНалоговыйУчет.СтавкаНДС,
 		  |	ПродажиНалоговыйУчет.ВозвратнаяТара,
 		  |	ПродажиНалоговыйУчет.Событие,
 		  |	ПродажиНалоговыйУчет.РасчетныйДокумент,
		  | ПродажиНалоговыйУчет.СчетУчетаНДСПодтвержденный
		  |";
				   
	ЗапросДвиженияДокумента.УстановитьПараметр("Ссылка",			ДокументОбъект.Ссылка);
	ЗапросДвиженияДокумента.УстановитьПараметр("ВидДвиженияПриход",	ВидДвиженияНакопления.Приход);
	ЗапросДвиженияДокумента.УстановитьПараметр("НеУчитываемыеДвиженияДокумента",	НеУчитываемыеДвиженияДокумента);

	ДвиженияДокумента = ЗапросДвиженияДокумента.Выполнить().Выгрузить();
	
	// данные для ограничения в запросе по остаткам
	МассивДоговоров = Новый Массив();
	МассивСделок    = Новый Массив();

	Для каждого Договор Из ДвиженияДокумента.ВыгрузитьКолонку("ДоговорКонтрагента") Цикл
		МассивДоговоров.Добавить(Договор);
	КонецЦикла;  
	Для каждого Сделка Из ДвиженияДокумента.ВыгрузитьКолонку("Сделка") Цикл
		МассивСделок.Добавить(Сделка);
	КонецЦикла;  
	Для каждого Сделка Из ДвиженияДокумента.ВыгрузитьКолонку("РасчетныйДокумент") Цикл
		МассивСделок.Добавить(Сделка);
	КонецЦикла;  
	
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивДоговоров);
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСделок);
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
		
		ТаблицаИсточник = Новый ТаблицаЗначений;
		ТаблицаИсточник.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаИсточник.Колонки.Добавить("Сделка");
		
		КвоЭлементов = Макс(МассивДоговоров.Количество(), МассивСделок.Количество());
		Для Н = 1 По КвоЭлементов Цикл
			ТаблицаИсточник.Добавить();	
		КонецЦикла;	
		
		ТаблицаИсточник.ЗагрузитьКолонку(МассивДоговоров, "ДоговорКонтрагента");
		ТаблицаИсточник.ЗагрузитьКолонку(МассивСделок, "Сделка");
		
		Для Каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл
			Если СтрокаТаблицыИсточника.ДоговорКонтрагента = Неопределено Тогда
				СтрокаТаблицыИсточника.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;	
		
		// Блокировка регистра накопления ПриобретенияНалоговыйУчет.
		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы, ИсточникДанных", 
														"РегистрНакопления", "ПриобретенияНалоговыйУчет", ТаблицаИсточник);
														
		СтруктураЗначенийБлокировки = Новый Структура("Период",Новый Диапазон(, ДокументОбъект.Дата));
													  
		СтруктураИсточникаДанных = Новый Структура("ДоговорКонтрагента, Сделка", "ДоговорКонтрагента", "Сделка");
		
		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, СтруктураИсточникаДанных);
		
		// Блокировка регистра накопления ПродажиНалоговыйУчет.
		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы, ИсточникДанных", 
														"РегистрНакопления", "ПродажиНалоговыйУчет", ТаблицаИсточник);
														
		СтруктураЗначенийБлокировки = Новый Структура("Период",Новый Диапазон(, ДокументОбъект.Дата));
													  
		СтруктураИсточникаДанных = Новый Структура("ДоговорКонтрагента, Сделка", "ДоговорКонтрагента", "Сделка");
		
		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, СтруктураИсточникаДанных);
		
	КонецЕсли;	
	
	// получим остатки налоговых взаиморасчетов
	ОстаткиРегистраПриобретение = Новый Запрос();
	ОстаткиРегистраПродажи      = Новый Запрос();
	
	ОстаткиРегистраПриобретение.Текст = "ВЫБРАТЬ
				|	ПриобретенияНалоговыйУчет.Событие 				КАК Событие,
				|	ПриобретенияНалоговыйУчет.ВозвратнаяТара 		КАК ВозвратнаяТара,
				|	ПриобретенияНалоговыйУчет.ДоговорКонтрагента 	КАК ДоговорКонтрагента,
				|	ПриобретенияНалоговыйУчет.Сделка 				КАК Сделка,
				|	ПриобретенияНалоговыйУчет.СтавкаНДС 			КАК СтавкаНДС,
				|	ПриобретенияНалоговыйУчет.ДляХозяйственнойДеятельности 		КАК ДляХозяйственнойДеятельности,
				|	ПриобретенияНалоговыйУчет.ВидДеятельностиНДС 		КАК ВидДеятельностиНДС,
				|	ПриобретенияНалоговыйУчет.Амортизируется 		КАК Амортизируется,
				|	ПриобретенияНалоговыйУчет.СуммаВзаиморасчетовОстаток 		КАК СуммаВзаиморасчетов,
				|	ПриобретенияНалоговыйУчет.СуммаНДСОстаток 					КАК СуммаНДС,
				|	ПриобретенияНалоговыйУчет.СуммаНДСПропорциональноОстаток    КАК СуммаНДСПропорционально
				|	ИЗ
				|		РегистрНакопления.ПриобретенияНалоговыйУчет.Остатки(&МоментВремени, ДоговорКонтрагента В (&Договоры) И Сделка В (&Сделки)) КАК ПриобретенияНалоговыйУчет
				|";
			   
	ОстаткиРегистраПриобретение.УстановитьПараметр("Договоры",		МассивДоговоров);
	ОстаткиРегистраПриобретение.УстановитьПараметр("Сделки",  		МассивСделок);
	ОстаткиРегистраПриобретение.УстановитьПараметр("МоментВремени", ДокументОбъект.МоментВремени());			   
	
	ОстаткиПриобретение = ОстаткиРегистраПриобретение.Выполнить().Выгрузить(); 
		
	ОстаткиРегистраПродажи.Текст = "ВЫБРАТЬ
				   |	ПродажиНалоговыйУчет.Событие 				КАК Событие,
				   |	ПродажиНалоговыйУчет.ВозвратнаяТара 		КАК ВозвратнаяТара,
				   |	ПродажиНалоговыйУчет.ДоговорКонтрагента 	КАК ДоговорКонтрагента,
				   |	ПродажиНалоговыйУчет.Сделка 				КАК Сделка,
				   |	ПродажиНалоговыйУчет.СтавкаНДС 				КАК СтавкаНДС,
		 		   |	ИСТИНА 													КАК ДляХозяйственнойДеятельности,
		 		   |	ИСТИНА 													КАК ВидДеятельностиНДС,
		 		   |	ЛОЖЬ 													КАК Амортизируется,
				   |	ПродажиНалоговыйУчет.СуммаВзаиморасчетовОстаток 		КАК СуммаВзаиморасчетов,
				   |	ПродажиНалоговыйУчет.СуммаНДСОстаток 					КАК СуммаНДС,
				   |	0 														КАК СуммаНДСПропорционально
				   |	ИЗ
				   |		РегистрНакопления.ПродажиНалоговыйУчет.Остатки(&МоментВремени, ДоговорКонтрагента В (&Договоры) И Сделка В (&Сделки)) КАК ПродажиНалоговыйУчет
				   |";
				   
	ОстаткиРегистраПродажи.УстановитьПараметр("Договоры",		МассивДоговоров);
	ОстаткиРегистраПродажи.УстановитьПараметр("Сделки",  		МассивСделок);
	ОстаткиРегистраПродажи.УстановитьПараметр("МоментВремени",  ДокументОбъект.МоментВремени());			   
	
	ОстаткиПродажи = ОстаткиРегистраПродажи.Выполнить().Выгрузить(); 
	
	// перенесем в остатки движения документа, если установлен флаг учитывать движения документа как остатки
	Если ДвиженияДокументаКакОстатки Тогда
		Инд = 0;
		Пока ДвиженияДокумента.Количество() > Инд Цикл
			
			ДвижениеДокумента = ДвиженияДокумента[Инд];
			
			Если УчитываемыеДвиженияДокумента.НайтиПоЗначению(ДвижениеДокумента.Событие) = Неопределено Тогда
				
				// перенесем движения в остатки	
				Если ДвижениеДокумента.ИмяРегистра = "ПриобретенияНалоговыйУчет" Тогда
					СтрокаОстатков =  ОстаткиПриобретение.Добавить();
				Иначе	
					СтрокаОстатков =  ОстаткиПродажи.Добавить();
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрокаОстатков, ДвижениеДокумента);
				
				ДвиженияДокумента.Удалить(ДвижениеДокумента);
				
			Иначе	
				
				Инд = Инд + 1;
				
			КонецЕсли;
			
		КонецЦикла;			
		
	КонецЕсли;		
	
	// определим суммы первых/вторых событий
	ТаблицаПоПервомуСобытиюНДС = СоздатьСтруктуруТаблицыНалоговыхСумм();
	ТаблицаПоВторомуСобытиюНал = СоздатьСтруктуруТаблицыНалоговыхСумм();
	
	// Создадим таблицы для движений, формируемых данной процедурой по регистрам налогового учета
	ТаблицаДополнительныхДвиженийПродажи = РегистрыНакопления.ПродажиНалоговыйУчет.СоздатьНаборЗаписей().Выгрузить();
	ТаблицаДополнительныхДвиженийПриобретения = РегистрыНакопления.ПриобретенияНалоговыйУчет.СоздатьНаборЗаписей().Выгрузить();
	ТаблицаДополнительныхДвиженийПродажи.Колонки.Добавить("СуммаНДСПропорционально", Новый ОписаниеТипов("Число"));
	
	Для каждого ДвижениеДокумента Из ДвиженияДокумента Цикл
		// суммы документа по событиям
		РасчОтгрВсеДок = 0;
		РасчОтгрНДСДок = 0;
		РасчОтгрНДСПрДок = 0;
		
		ВозвОтгрВсеДок = 0;
		ВозвОтгрНДСДок = 0;
		ВозвОтгрНДСПрДок = 0;		
		
		РасчОплВсеДок = 0;
		РасчОплНДСДок = 0;
		РасчОплНДСПрДок = 0;
		
		ВозвОплВсеДок = 0;
		ВозвОплНДСДок = 0;
		ВозвОплНДСПрДок = 0;
		
		// получим данные документа в разрезе событий налогового учета
		Если  ДвижениеДокумента.Событие = Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю 
		  ИЛИ ДвижениеДокумента.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика Тогда
			РасчОтгрВсеДок = ДвижениеДокумента.СуммаВзаиморасчетов;
			РасчОтгрНДСДок = ДвижениеДокумента.СуммаНДС;
			РасчОтгрНДСПрДок = ДвижениеДокумента.СуммаНДСПропорционально;
		ИначеЕсли ДвижениеДокумента.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя 
			  ИЛИ ДвижениеДокумента.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику Тогда
			ВозвОтгрВсеДок = ДвижениеДокумента.СуммаВзаиморасчетов;
			ВозвОтгрНДСДок = ДвижениеДокумента.СуммаНДС;
			ВозвОтгрНДСПрДок = ДвижениеДокумента.СуммаНДСПропорционально;
		ИначеЕсли ДвижениеДокумента.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем 
			  ИЛИ ДвижениеДокумента.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику Тогда
			РасчОплВсеДок = ДвижениеДокумента.СуммаВзаиморасчетов;
			РасчОплНДСДок = ДвижениеДокумента.СуммаНДС;
			РасчОплНДСПрДок = ДвижениеДокумента.СуммаНДСПропорционально;
		ИначеЕсли ДвижениеДокумента.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю 
			  ИЛИ ДвижениеДокумента.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком Тогда
			ВозвОплВсеДок = ДвижениеДокумента.СуммаВзаиморасчетов;
			ВозвОплНДСДок = ДвижениеДокумента.СуммаНДС;
			ВозвОплНДСПрДок = ДвижениеДокумента.СуммаНДСПропорционально;
		КонецЕсли;
		
		// получим данные "на начало документа" в разрезе всех событий
		Если ДвижениеДокумента.ИмяРегистра = "ПриобретенияНалоговыйУчет" Тогда
			ТаблицаОстатков = ОстаткиПриобретение;
		Иначе
			ТаблицаОстатков = ОстаткиПродажи;
		КонецЕсли;
			
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ДоговорКонтрагента",ДвижениеДокумента.ДоговорКонтрагента);
		// для договоров по "расчетным документам" информацию по второму событию нужно искать по данным расчетного документа.
		СтруктураОтбора.Вставить("Сделка",			?(ДвижениеДокумента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам, 
													  ДвижениеДокумента.РасчетныйДокумент, 
													  ДвижениеДокумента.Сделка));
		СтруктураОтбора.Вставить("ВозвратнаяТара",				ДвижениеДокумента.ВозвратнаяТара);
		СтруктураОтбора.Вставить("СтавкаНДС",					ДвижениеДокумента.СтавкаНДС);
		СтруктураОтбора.Вставить("ДляХозяйственнойДеятельности",ДвижениеДокумента.ДляХозяйственнойДеятельности);
		СтруктураОтбора.Вставить("ВидДеятельностиНДС",			ДвижениеДокумента.ВидДеятельностиНДС);
		СтруктураОтбора.Вставить("Амортизируется",				ДвижениеДокумента.Амортизируется);
				
		СтрокиОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
		
		СхемаНДС = ?(ДвижениеДокумента.ВозвратнаяТара, 
						ДвижениеДокумента.СхемаНДСТара,
						ДвижениеДокумента.СхемаНДС);
						
		// суммы остатков на момент документа по событиям					
		РасчОтгрВсеНач = 0;
		РасчОтгрНДСНач = 0;
		РасчОтгрНДСПрНач = 0;
		
		ВозвОтгрВсеНач = 0;
		ВозвОтгрНДСНач = 0;
		ВозвОтгрНДСПрНач = 0;
		
		РасчОплВсеНач  = 0;
		РасчОплНДСНач  = 0;
		РасчОплНДСПрНач  = 0;
		
		ВозвОплВсеНач  = 0;
		ВозвОплНДСНач  = 0;
		ВозвОплНДСПрНач  = 0;
			
		Для каждого СтрокаОстатков Из СтрокиОстатков Цикл
		
			Если СтрокаОстатков.Событие = Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю 
			 ИЛИ СтрокаОстатков.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика Тогда
				РасчОтгрВсеНач = РасчОтгрВсеНач + СтрокаОстатков.СуммаВзаиморасчетов;
				РасчОтгрНДСНач = РасчОтгрНДСНач + СтрокаОстатков.СуммаНДС;
				РасчОтгрНДСПрНач = РасчОтгрНДСПрНач + СтрокаОстатков.СуммаНДСПропорционально;
			ИначеЕсли СтрокаОстатков.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя 
				  ИЛИ СтрокаОстатков.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику Тогда
				ВозвОтгрВсеНач = ВозвОтгрВсеНач + СтрокаОстатков.СуммаВзаиморасчетов;
				ВозвОтгрНДСНач = ВозвОтгрНДСНач + СтрокаОстатков.СуммаНДС;
				ВозвОтгрНДСПрНач = ВозвОтгрНДСПрНач + СтрокаОстатков.СуммаНДСПропорционально;
			ИначеЕсли СтрокаОстатков.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем 
				  ИЛИ СтрокаОстатков.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику Тогда
				РасчОплВсеНач = РасчОплВсеНач + СтрокаОстатков.СуммаВзаиморасчетов;
				РасчОплНДСНач = РасчОплНДСНач + СтрокаОстатков.СуммаНДС;
				РасчОплНДСПрНач = РасчОплНДСПрНач + СтрокаОстатков.СуммаНДСПропорционально;
			ИначеЕсли СтрокаОстатков.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю 
				  ИЛИ СтрокаОстатков.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком Тогда
				ВозвОплВсеНач = ВозвОплВсеНач + СтрокаОстатков.СуммаВзаиморасчетов;
				ВозвОплНДСНач = ВозвОплНДСНач + СтрокаОстатков.СуммаНДС;
				ВозвОплНДСПрНач = ВозвОплНДСПрНач + СтрокаОстатков.СуммаНДСПропорционально;
			КонецЕсли;
				
		КонецЦикла;
		
		// определеим суммы "первого" события
		//  По НДС
		ПСРасчВсе = 0;
		ПСВозвВсе = 0;
		ПСРасчНДС = 0;
		ПСРасчНДСПр = 0;
		ПСВозвНДС = 0;
		ПСВозвНДСПр = 0;
		
		Если СхемаНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию 
			// для 	договоров по расчетным докумнтам нужно определить суммы "по первому событию" для разбиеняи проводки на две
			// собственно суммы первого события потом будут расчитаны заново (для таких договоров)
		ИЛИ ДвижениеДокумента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам
		     И НЕ РасчетныйДокументЯвляетсяСчетомНаОплату(Сделка) Тогда
			// расчеты
			Если РасчОтгрВсеНач + РасчОтгрВсеДок > РасчОплВсеНач + РасчОплВсеДок Тогда
				ПСРасчВсе = РасчОтгрВсеНач + РасчОтгрВсеДок;
				ПСРасчНДС = РасчОтгрНДСНач + РасчОтгрНДСДок;
				ПСРасчНДСПр = РасчОтгрНДСПрНач + РасчОтгрНДСПрДок;
			Иначе	
				ПСРасчВсе = РасчОплВсеНач  + РасчОплВсеДок;
				ПСРасчНДС = РасчОплНДСНач  + РасчОплНДСДок;
				ПСРасчНДСПр = РасчОплНДСПрНач  + РасчОплНДСПрДок;
			КонецЕсли;
			ПСРасчВсе = ПСРасчВсе - ?(РасчОтгрВсеНач > РасчОплВсеНач, РасчОтгрВсеНач, РасчОплВсеНач);
			ПСРасчНДС = ПСРасчНДС - ?(РасчОтгрВсеНач > РасчОплВсеНач, РасчОтгрНДСНач, РасчОплНДСНач);
			ПСРасчНДСПр = ПСРасчНДСПр - ?(РасчОтгрВсеНач > РасчОплВсеНач, РасчОтгрНДСПрНач, РасчОплНДСПрНач);
			
			// возврат
			Если ВозвОтгрВсеНач + ВозвОтгрВсеДок > ВозвОплВсеНач + ВозвОплВсеДок Тогда
				ПСВозвВсе = ВозвОтгрВсеНач + ВозвОтгрВсеДок;
				ПСВозвНДС = ВозвОтгрНДСНач + ВозвОтгрНДСДок;
				ПСВозвНДСПр = ВозвОтгрНДСПрНач + ВозвОтгрНДСПрДок;
			Иначе	
				ПСВозвВсе = ВозвОплВсеНач  + ВозвОплВсеДок;
				ПСВозвНДС = ВозвОплНДСНач  + ВозвОплНДСДок;
				ПСВозвНДСПр = ВозвОплНДСПрНач  + ВозвОплНДСПрДок;
			КонецЕсли;
			ПСВозвВсе = ПСВозвВсе - ?(ВозвОтгрВсеНач > ВозвОплВсеНач, ВозвОтгрВсеНач, ВозвОплВсеНач);
			ПСВозвНДС = ПСВозвНДС - ?(ВозвОтгрВсеНач > ВозвОплВсеНач, ВозвОтгрНДСНач, ВозвОплНДСНач);
			ПСВозвНДСПр = ПСВозвНДСПр - ?(ВозвОтгрВсеНач > ВозвОплВсеНач, ВозвОтгрНДСПрНач, ВозвОплНДСПрНач);
			
		ИначеЕсли СхемаНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате Тогда
			//расчеты
			ПСРасчВсе = РасчОплВсеДок;
			ПСРасчНДС = РасчОплНДСДок;
			ПСРасчНДСПр = РасчОплНДСПрДок;
			
			//Возврат
			ПСВозвВсе = ВозвОплВсеДок;
			ПСВозвНДС = ВозвОплНДСДок;
			ПСВозвНДСПр = ВозвОплНДСПрДок;
			
		ИначеЕсли СхемаНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке Тогда
			//расчеты
			ПСРасчВсе = РасчОтгрВсеДок;
			ПСРасчНДС = РасчОтгрНДСДок;
			ПСРасчНДСПр = РасчОтгрНДСПрДок;

			//Возврат
			ПСВозвВсе = ВозвОтгрВсеДок;
			ПСВозвНДС = ВозвОтгрНДСДок;
			ПСВозвНДСПр = ВозвОтгрНДСПрДок;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СхемаНДС) Тогда
			// не заполнена схема налогового учета:
			Если ДвижениеДокумента.ВозвратнаяТара Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Договор: %1. Не указана схема налогового учета по таре, либо в схеме не указан Момент определения базы НДС';uk='Договір: %1. Не зазначена схема податкового обліку по тарі, або в схемі не зазначений Момент визначення бази ПДВ'"), ДвижениеДокумента.ДоговорКонтрагента);
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Договор: %1. Не указана схема налогового учета, либо в схеме не указан Момент определения базы НДС';uk='Договір: %1. Не зазначена схема податкового обліку, або в схемі не зазначений Момент визначення бази ПДВ'"), ДвижениеДокумента.ДоговорКонтрагента);
			КонецЕсли;	
			Сообщить(ТекстСообщения, СтатусСообщения.Важное);			
		КонецЕсли;
				
		// ОТГРУЗКИ
		// для договоров по расчетным документам необходимо в любом случае разбивать движения на два - по расчетному документу и по сделке 
		Если  ДвижениеДокумента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам 
			И НЕ РасчетныйДокументЯвляетсяСчетомНаОплату(Сделка)
			И (РасчОтгрВсеДок > 0 или РасчОплВсеДок  > 0) Тогда
			
			// суммы по Сделке (ссылке)
			СуммаВсеСД = ДвижениеДокумента.СуммаВзаиморасчетов;
			СуммаНДССД = ДвижениеДокумента.СуммаНДС;
			СуммаНДСПрСД = ДвижениеДокумента.СуммаНДСПропорционально;
			// суммы по Расчетному документу
			СуммаВсеРД = 0;
			СуммаНДСРД = 0;
			СуммаНДСПрРД = 0;
			
			// разобъем движение на две строки с целью правильного закрытия налоговых регистров по расчетному документу
			Если ПСРасчВсе <> ДвижениеДокумента.СуммаВзаиморасчетов Тогда
				
				// "первое событие"
				СуммаВсеСД = ПСРасчВсе;
				СуммаНДССД = ПСРасчНДС;
				СуммаНДСПрСД = ПСРасчНДСПр;
				
				// "второе событие"
				СуммаВсеРД = ДвижениеДокумента.СуммаВзаиморасчетов 	     - ПСРасчВсе;
				СуммаНДСРД = ДвижениеДокумента.СуммаНДС					 - ПСРасчНДС;
				СуммаНДСПрРД = ДвижениеДокумента.СуммаНДСПропорционально - ПСРасчНДСПр;
				
				// нужно сформировать движение на сумму по второму событию в регистре по расчетному документу.
				// Движения будем формировать как сторно по сделке (сформированы документом) и на ту же сумму
				// приход по расчетному документу
				
				// в начале приход по расчетному документу на сумму "второго события"
				Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
					ДопСтрокаПоРасчетномуДокументу = ТаблицаДополнительныхДвиженийПродажи.Добавить();				
				Иначе
					ДопСтрокаПоРасчетномуДокументу = ТаблицаДополнительныхДвиженийПриобретения.Добавить();
				КонецЕсли;	
				
				ЗаполнитьЗначенияСвойств(ДопСтрокаПоРасчетномуДокументу, ДвижениеДокумента); 
				
				ДопСтрокаПоРасчетномуДокументу.Активность				= Истина;
				ДопСтрокаПоРасчетномуДокументу.ВидДвижения				= ВидДвиженияНакопления.Приход;
				ДопСтрокаПоРасчетномуДокументу.Период 					= ДатаДвижений;
				ДопСтрокаПоРасчетномуДокументу.Организация 				= ДокументОбъект.Организация;
				
				ДопСтрокаПоРасчетномуДокументу.Сделка 					= ДвижениеДокумента.РасчетныйДокумент;
				
				ДопСтрокаПоРасчетномуДокументу.СуммаВзаиморасчетов 	= СуммаВсеРД;
				ДопСтрокаПоРасчетномуДокументу.СуммаНДС 				= СуммаНДСРД;
				ДопСтрокаПоРасчетномуДокументу.СуммаНДСПропорционально 	= СуммаНДСПрРД;
				
				// Нужно можно перенести данные по движению документа в таблицы остатков: 
				// для того, чтобы они учлись для очередной строки движения документа:
				Если ДвижениеДокумента.ИмяРегистра = "ПриобретенияНалоговыйУчет" Тогда
					СтрокаОстатков =  ОстаткиПриобретение.Добавить();
				Иначе	
					СтрокаОстатков =  ОстаткиПродажи.Добавить();
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрокаОстатков, ДопСтрокаПоРасчетномуДокументу);
				
				// и сторно-движение по ссылке
				Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
					ДопСтрокаСторноПоСсылке = ТаблицаДополнительныхДвиженийПродажи.Добавить();				
				Иначе
					ДопСтрокаСторноПоСсылке = ТаблицаДополнительныхДвиженийПриобретения.Добавить();
				КонецЕсли;	
				
				ЗаполнитьЗначенияСвойств(ДопСтрокаСторноПоСсылке, ДопСтрокаПоРасчетномуДокументу); 
				
	            ДопСтрокаСторноПоСсылке.Сделка = ДвижениеДокумента.Сделка;
				
				ДопСтрокаСторноПоСсылке.СуммаВзаиморасчетов 		= - ДопСтрокаСторноПоСсылке.СуммаВзаиморасчетов;
				ДопСтрокаСторноПоСсылке.СуммаНДС 					= - ДопСтрокаСторноПоСсылке.СуммаНДС;
				ДопСтрокаСторноПоСсылке.СуммаНДСПропорционально	= - ДопСтрокаСторноПоСсылке.СуммаНДСПропорционально;
				
				// Нужно можно перенести данные по движению документа в таблицы остатков: 
				// для того, чтобы они учлись для очередной строки движения документа:
				Если ДвижениеДокумента.ИмяРегистра = "ПриобретенияНалоговыйУчет" Тогда
					СтрокаОстатков =  ОстаткиПриобретение.Добавить();
				Иначе	
					СтрокаОстатков =  ОстаткиПродажи.Добавить();
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрокаОстатков, ДопСтрокаСторноПоСсылке);
				
				// для отчетов комитенту/комиссионера могут быть перезачеты с одного и того же расчетного документа.
				// нужно удалить такие зачеты
				Если ДвижениеДокумента.РасчетныйДокумент = ДвижениеДокумента.Сделка Тогда
					Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
						ТаблицаДополнительныхДвиженийПродажи.Удалить(ДопСтрокаПоРасчетномуДокументу);				
						ТаблицаДополнительныхДвиженийПродажи.Удалить(ДопСтрокаСторноПоСсылке);				
					Иначе
						ТаблицаДополнительныхДвиженийПриобретения.Удалить(ДопСтрокаПоРасчетномуДокументу);
						ТаблицаДополнительныхДвиженийПриобретения.Удалить(ДопСтрокаСторноПоСсылке);
					КонецЕсли;	
				КонецЕсли;
				
			КонецЕсли;
			
			// определим реальные суммы ПС по НДС:
			Если  (СхемаНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате И РасчОплВсеДок > 0) 
			  ИЛИ (СхемаНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке И РасчОтгрВсеДок > 0)Тогда
			  
			  		// есть "первое" событие
					// но двумя строками
					
					//===========================================================
					СтрокаПервогоСобытия = ТаблицаПоПервомуСобытиюНДС.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПервогоСобытия, ДвижениеДокумента);
					
					// сделкой должен быть расчетный документ
					СтрокаПервогоСобытия.Сделка = ДвижениеДокумента.РасчетныйДокумент;
					
					Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
						СтрокаПервогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
					Иначе
						СтрокаПервогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление;
					КонецЕсли;			
					СтрокаПервогоСобытия.СуммаВзаиморасчетов  = СуммаВсеРД;
					СтрокаПервогоСобытия.СуммаНДС 		  	 	  = СуммаНДСРД;
					СтрокаПервогоСобытия.СуммаНДСПропорционально  = СуммаНДСПрРД;
					СтрокаПервогоСобытия.БазаНДС 				  = СтрокаПервогоСобытия.СуммаВзаиморасчетов - СтрокаПервогоСобытия.СуммаНДС;
					
					//===========================================================
					СтрокаПервогоСобытия = ТаблицаПоПервомуСобытиюНДС.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПервогоСобытия, ДвижениеДокумента);
					// сделка указана правильно в движении документа
					Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
						СтрокаПервогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
					Иначе
						СтрокаПервогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление;
					КонецЕсли;			
					СтрокаПервогоСобытия.СуммаВзаиморасчетов  = СуммаВсеСД;
					СтрокаПервогоСобытия.СуммаНДС 		  	 	  = СуммаНДССД;
					СтрокаПервогоСобытия.СуммаНДСПропорционально  = СуммаНДСПрСД;
					СтрокаПервогоСобытия.БазаНДС 				  = СтрокаПервогоСобытия.СуммаВзаиморасчетов - СтрокаПервогоСобытия.СуммаНДС;
					
			ИначеЕсли (СхемаНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате   И РасчОплВсеДок  = 0) 
			      ИЛИ (СхемаНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке И РасчОтгрВсеДок = 0) Тогда

					// только второе событие
					// но двумя строками
					
					//===========================================================
					СтрокаВторогоСобытия = ТаблицаПоВторомуСобытиюНал.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаВторогоСобытия, ДвижениеДокумента);
					// сделкой должен быть расчетный документ
					СтрокаВторогоСобытия.Сделка = ДвижениеДокумента.РасчетныйДокумент;
					Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
						СтрокаВторогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
					Иначе
						СтрокаВторогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление;
					КонецЕсли;			
					СтрокаВторогоСобытия.СуммаНДС 		  	 	  = СуммаНДСРД;
					СтрокаВторогоСобытия.СуммаВзаиморасчетов      = 0;
					СтрокаВторогоСобытия.СуммаНДСПропорционально  = 0;
					СтрокаВторогоСобытия.БазаНДС 				  = 0;
					
					//===========================================================
					СтрокаВторогоСобытия = ТаблицаПоВторомуСобытиюНал.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаВторогоСобытия, ДвижениеДокумента);
					// сделка указана правильно в движении документа
					Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
						СтрокаВторогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
					Иначе
						СтрокаВторогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление;
					КонецЕсли;			
					СтрокаВторогоСобытия.СуммаНДС 		  	 	  = СуммаНДССД;
					СтрокаВторогоСобытия.СуммаВзаиморасчетов  	  = 0;
					СтрокаВторогоСобытия.СуммаНДСПропорционально  = 0;
					СтрокаВторогоСобытия.БазаНДС 				  = 0;
					
			Иначе// по первому событию
				
				СтрокаПервогоСобытия = ТаблицаПоПервомуСобытиюНДС.Добавить();
				// сделка указана правильно в движении документа
				ЗаполнитьЗначенияСвойств(СтрокаПервогоСобытия, ДвижениеДокумента);
					
				Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
					СтрокаПервогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
				Иначе
					СтрокаПервогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление;
				КонецЕсли;			
					
				СтрокаПервогоСобытия.СуммаВзаиморасчетов  	  = СуммаВсеСД;
				СтрокаПервогоСобытия.СуммаНДС 		  	 	  = СуммаНДССД;
				СтрокаПервогоСобытия.СуммаНДСПропорционально  = СуммаНДСПрСД;
				СтрокаПервогоСобытия.БазаНДС 				  = СтрокаПервогоСобытия.СуммаВзаиморасчетов - СтрокаПервогоСобытия.СуммаНДС;
					
				СтрокаВторогоСобытия = ТаблицаПоВторомуСобытиюНал.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаВторогоСобытия, ДвижениеДокумента);
				
				// сделкой должен быть расчетный документ
				СтрокаВторогоСобытия.Сделка = ДвижениеДокумента.РасчетныйДокумент;
					
				Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
					СтрокаВторогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
				Иначе
					СтрокаВторогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление;
				КонецЕсли;			

				СтрокаВторогоСобытия.СуммаНДС 		  	 	  = СуммаНДСРД;
				СтрокаВторогоСобытия.СуммаНДСПропорционально  = СуммаНДСПрРД;
				СтрокаВторогоСобытия.СуммаВзаиморасчетов  = 0;
				СтрокаВторогоСобытия.БазаНДС 				  = 0;
					
			КонецЕсли;	
			
		КонецЕсли;
		
		// Если договор не по расчетным документам можно сразу заполнить таблицы по первому/второму событию
		Если (НЕ (ДвижениеДокумента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам) 
			 ИЛИ РасчетныйДокументЯвляетсяСчетомНаОплату(Сделка))
			 И (РасчОтгрВсеДок > 0 или РасчОплВсеДок  > 0) Тогда
			
			// Создадим строки таблицы с "первыми /вторыми событиями"
			СтрокаПервогоСобытия = ТаблицаПоПервомуСобытиюНДС.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПервогоСобытия, ДвижениеДокумента);
					
			Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
				СтрокаПервогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
			Иначе
				СтрокаПервогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление;
			КонецЕсли;			
			
			СтрокаПервогоСобытия.СуммаВзаиморасчетов	  = ПСРасчВсе;
			СтрокаПервогоСобытия.СуммаНДС 		  	 	  = ПСРасчНДС;
			СтрокаПервогоСобытия.СуммаНДСПропорционально  = ПСРасчНДСПр;
			СтрокаПервогоСобытия.БазаНДС 				  = СтрокаПервогоСобытия.СуммаВзаиморасчетов - СтрокаПервогоСобытия.СуммаНДС;
			
			СтрокаВторогоСобытия = ТаблицаПоВторомуСобытиюНал.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВторогоСобытия, ДвижениеДокумента);
					
			Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
				СтрокаВторогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
			Иначе
				СтрокаВторогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление;
			КонецЕсли;			

			СтрокаВторогоСобытия.СуммаНДС 		  	 	  = СтрокаВторогоСобытия.СуммаНДС 				 - ПСРасчНДС;
			СтрокаВторогоСобытия.СуммаНДСПропорционально  = СтрокаВторогоСобытия.СуммаНДСПропорционально - ПСРасчНДСПр;
			СтрокаВторогоСобытия.СуммаВзаиморасчетов	  = 0;
			СтрокаВторогоСобытия.БазаНДС 				  = 0;
			
		КонецЕсли;			
		
		// ВОЗВРАТЫ
		// для договоров по расчетным документам необходимо в любом случае разбивать движения на два - по расчетному документу и по сделке 
		Если  ДвижениеДокумента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам 
			И НЕ РасчетныйДокументЯвляетсяСчетомНаОплату(Сделка)
			И (ВозвОтгрВсеДок > 0 или ВозвОплВсеДок  > 0) Тогда
			
			// суммы по Сделке (ссылке)
			СуммаВсеСД = ДвижениеДокумента.СуммаВзаиморасчетов;
			СуммаНДССД = ДвижениеДокумента.СуммаНДС;
			СуммаНДСПрСД = ДвижениеДокумента.СуммаНДСПропорционально;
			// суммы по Расчетному документу
			СуммаВсеРД = 0;
			СуммаНДСРД = 0;
			СуммаНДСПрРД = 0;
			
			// разобъем движение на две строки с целью правильного закрытия налоговых регистров по расчетному документу
			Если ПСВозвВсе <> ДвижениеДокумента.СуммаВзаиморасчетов Тогда
				
				// "первое событие"
				СуммаВсеСД = ПСВозвВсе;
				СуммаНДССД = ПСВозвНДС;
				СуммаНДСПрСД = ПСВозвНДСПр;
				
				// "второе событие"
				СуммаВсеРД = ДвижениеДокумента.СуммаВзаиморасчетов 	     - ПСВозвВсе;
				СуммаНДСРД = ДвижениеДокумента.СуммаНДС					 - ПСВозвНДС;
				СуммаНДСПрРД = ДвижениеДокумента.СуммаНДСПропорционально - ПСВозвНДСПр;
				
				// нужно сформировать движение на сумму по второму событию в регистре по расчетному документу.
				// Движения будем формировать как сторно по сделке (сформированы документом) и на ту же сумму
				// приход по расчетному документу
				
				// в начале приход по расчетному документу на сумму "второго события"
				Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
					ДопСтрокаПоРасчетномуДокументу = ТаблицаДополнительныхДвиженийПродажи.Добавить();				
				Иначе
					ДопСтрокаПоРасчетномуДокументу = ТаблицаДополнительныхДвиженийПриобретения.Добавить();
				КонецЕсли;	
				
				ЗаполнитьЗначенияСвойств(ДопСтрокаПоРасчетномуДокументу, ДвижениеДокумента); 
				
				ДопСтрокаПоРасчетномуДокументу.Активность				= Истина;
				ДопСтрокаПоРасчетномуДокументу.ВидДвижения				= ВидДвиженияНакопления.Приход;
				ДопСтрокаПоРасчетномуДокументу.Период 					= ДатаДвижений;
				ДопСтрокаПоРасчетномуДокументу.Организация 				= ДокументОбъект.Организация;
				
				ДопСтрокаПоРасчетномуДокументу.Сделка 					= ДвижениеДокумента.РасчетныйДокумент;
				
				ДопСтрокаПоРасчетномуДокументу.СуммаВзаиморасчетов 	= СуммаВсеРД;
				ДопСтрокаПоРасчетномуДокументу.СуммаНДС 				= СуммаНДСРД;
				ДопСтрокаПоРасчетномуДокументу.СуммаНДСПропорционально  = СуммаНДСПрРД;
				
				// Нужно можно перенести данные по движению документа в таблицы остатков: 
				// для того, чтобы они учлись для очередной строки движения документа:
				Если ДвижениеДокумента.ИмяРегистра = "ПриобретенияНалоговыйУчет" Тогда
					СтрокаОстатков =  ОстаткиПриобретение.Добавить();
				Иначе	
					СтрокаОстатков =  ОстаткиПродажи.Добавить();
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрокаОстатков, ДопСтрокаПоРасчетномуДокументу);
				
				// и сторно-движение по ссылке
				Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
					ДопСтрокаСторноПоСсылке = ТаблицаДополнительныхДвиженийПродажи.Добавить();				
				Иначе
					ДопСтрокаСторноПоСсылке = ТаблицаДополнительныхДвиженийПриобретения.Добавить();
				КонецЕсли;	
				
				ЗаполнитьЗначенияСвойств(ДопСтрокаСторноПоСсылке, ДопСтрокаПоРасчетномуДокументу); 
				
	            ДопСтрокаСторноПоСсылке.Сделка = ДвижениеДокумента.Сделка;
				
				ДопСтрокаСторноПоСсылке.СуммаВзаиморасчетов 	= - ДопСтрокаСторноПоСсылке.СуммаВзаиморасчетов;
				ДопСтрокаСторноПоСсылке.СуммаНДС 					= - ДопСтрокаСторноПоСсылке.СуммаНДС;
				ДопСтрокаСторноПоСсылке.СуммаНДСПропорционально		= - ДопСтрокаСторноПоСсылке.СуммаНДСПропорционально;
				
				// Нужно можно перенести данные по движению документа в таблицы остатков: 
				// для того, чтобы они учлись для очередной строки движения документа:
				Если ДвижениеДокумента.ИмяРегистра = "ПриобретенияНалоговыйУчет" Тогда
					СтрокаОстатков =  ОстаткиПриобретение.Добавить();
				Иначе	
					СтрокаОстатков =  ОстаткиПродажи.Добавить();
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрокаОстатков, ДопСтрокаСторноПоСсылке);
				
				Если ДвижениеДокумента.РасчетныйДокумент = ДвижениеДокумента.Сделка Тогда
					Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
						ТаблицаДополнительныхДвиженийПродажи.Удалить(ДопСтрокаПоРасчетномуДокументу);				
						ТаблицаДополнительныхДвиженийПродажи.Удалить(ДопСтрокаСторноПоСсылке);				
					Иначе
						ТаблицаДополнительныхДвиженийПриобретения.Удалить(ДопСтрокаПоРасчетномуДокументу);
						ТаблицаДополнительныхДвиженийПриобретения.Удалить(ДопСтрокаСторноПоСсылке);
					КонецЕсли;	
				КонецЕсли;
				
			КонецЕсли;
			
			// определим реальные суммы ПС по НДС:
			Если  (СхемаНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате И ВозвОплВсеДок > 0) 
			  ИЛИ (СхемаНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке И ВозвОтгрВсеДок > 0)Тогда
			  
			  		// есть "первое" событие
					// но двумя строками
					
					//===========================================================
					СтрокаПервогоСобытия = ТаблицаПоПервомуСобытиюНДС.Добавить();
					
					ЗаполнитьЗначенияСвойств(СтрокаПервогоСобытия, ДвижениеДокумента);
					
					// сделкой должен быть расчетный документ
					СтрокаПервогоСобытия.Сделка = ДвижениеДокумента.РасчетныйДокумент;
					
					Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
						СтрокаПервогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
					Иначе
						СтрокаПервогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат;
					КонецЕсли;			
					СтрокаПервогоСобытия.СуммаВзаиморасчетов  = СуммаВсеРД;
					СтрокаПервогоСобытия.СуммаНДС 		  	 	  = СуммаНДСРД;
					СтрокаПервогоСобытия.СуммаНДСПропорционально  = СуммаНДСПрРД;
					СтрокаПервогоСобытия.БазаНДС 				  = СтрокаПервогоСобытия.СуммаВзаиморасчетов - СтрокаПервогоСобытия.СуммаНДС;
					
					//===========================================================
					СтрокаПервогоСобытия = ТаблицаПоПервомуСобытиюНДС.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПервогоСобытия, ДвижениеДокумента);
					// сделка указана правильно в движении документа
					Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
						СтрокаПервогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
					Иначе
						СтрокаПервогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат;
					КонецЕсли;			
					СтрокаПервогоСобытия.СуммаВзаиморасчетов  = СуммаВсеСД;
					СтрокаПервогоСобытия.СуммаНДС 		  	 	  = СуммаНДССД;
					СтрокаПервогоСобытия.СуммаНДСПропорционально  = СуммаНДСПрСД;
					СтрокаПервогоСобытия.БазаНДС 				  = СтрокаПервогоСобытия.СуммаВзаиморасчетов - СтрокаПервогоСобытия.СуммаНДС;
					
			ИначеЕсли (СхемаНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате   И ВозвОплВсеДок  = 0) 
			      ИЛИ (СхемаНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке И ВозвОтгрВсеДок = 0) Тогда

					// только второе событие
					// но двумя строками
					
					//===========================================================
					СтрокаВторогоСобытия = ТаблицаПоВторомуСобытиюНал.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаВторогоСобытия, ДвижениеДокумента);
					// сделкой должен быть расчетный документ
					СтрокаВторогоСобытия.Сделка = ДвижениеДокумента.РасчетныйДокумент;
					Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
						СтрокаВторогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
					Иначе
						СтрокаВторогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат;
					КонецЕсли;			
					СтрокаВторогоСобытия.СуммаНДС 		  	 	  = СуммаНДСРД;
					СтрокаВторогоСобытия.СуммаНДСПропорционально  = СуммаНДСПрРД;
					СтрокаВторогоСобытия.СуммаВзаиморасчетов	  = 0;
					СтрокаВторогоСобытия.БазаНДС 				  = 0;
					
					//===========================================================
					СтрокаВторогоСобытия = ТаблицаПоВторомуСобытиюНал.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаВторогоСобытия, ДвижениеДокумента);
					// сделка указана правильно в движении документа
					Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
						СтрокаВторогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
					Иначе
						СтрокаВторогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат;
					КонецЕсли;			
					СтрокаВторогоСобытия.СуммаНДС 		  	 	  = СуммаНДССД;
					СтрокаВторогоСобытия.СуммаНДСПропорционально  = СуммаНДСПрСД;
					СтрокаВторогоСобытия.СуммаВзаиморасчетов	  = 0;
					СтрокаВторогоСобытия.БазаНДС 				  = 0;
					
			Иначе// по первому событию
				
				СтрокаПервогоСобытия = ТаблицаПоПервомуСобытиюНДС.Добавить();
				// сделка указана правильно в движении документа
				ЗаполнитьЗначенияСвойств(СтрокаПервогоСобытия, ДвижениеДокумента);
					
				Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
					СтрокаПервогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
				Иначе
					СтрокаПервогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат;
				КонецЕсли;			
					
				СтрокаПервогоСобытия.СуммаВзаиморасчетов	  = СуммаВсеСД;
				СтрокаПервогоСобытия.СуммаНДС 		  	 	  = СуммаНДССД;
				СтрокаПервогоСобытия.СуммаНДСПропорционально  = СуммаНДСПрСД;
				СтрокаПервогоСобытия.БазаНДС 				  = СтрокаПервогоСобытия.СуммаВзаиморасчетов - СтрокаПервогоСобытия.СуммаНДС;
					
				СтрокаВторогоСобытия = ТаблицаПоВторомуСобытиюНал.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаВторогоСобытия, ДвижениеДокумента);
				
				// сделкой должен быть расчетный документ
				СтрокаВторогоСобытия.Сделка = ДвижениеДокумента.РасчетныйДокумент;
					
				Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
					СтрокаВторогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
				Иначе
					СтрокаВторогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат;
				КонецЕсли;			

				СтрокаВторогоСобытия.СуммаНДС 		  	 	  = СуммаНДСРД;
				СтрокаВторогоСобытия.СуммаНДСПропорционально  = СуммаНДСПрРД;
				СтрокаВторогоСобытия.СуммаВзаиморасчетов	  = 0;
				СтрокаВторогоСобытия.БазаНДС 				  = 0;
					
			КонецЕсли;
			
		КонецЕсли;			
		
		// Если договор не по расчетным документам можно сразу заполнить таблицы по первому/второму событию
		Если ( НЕ ДвижениеДокумента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам 
			 ИЛИ РасчетныйДокументЯвляетсяСчетомНаОплату(Сделка))
			И (ВозвОтгрВсеДок > 0 или ВозвОплВсеДок  > 0) Тогда
			// Создадим строки таблицы с "первыми /вторыми событиями"
			СтрокаПервогоСобытия = ТаблицаПоПервомуСобытиюНДС.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПервогоСобытия, ДвижениеДокумента);
					
			Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
				СтрокаПервогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
			Иначе
				СтрокаПервогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат;
			КонецЕсли;			
			
			СтрокаПервогоСобытия.СуммаВзаиморасчетов	  = ПСВозвВсе;
			СтрокаПервогоСобытия.СуммаНДС 		  	 	  = ПСВозвНДС;
			СтрокаПервогоСобытия.СуммаНДСПропорционально  = ПСВозвНДСПр;
			СтрокаПервогоСобытия.БазаНДС 				  = СтрокаПервогоСобытия.СуммаВзаиморасчетов - СтрокаПервогоСобытия.СуммаНДС;
			
			СтрокаВторогоСобытия = ТаблицаПоВторомуСобытиюНал.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВторогоСобытия, ДвижениеДокумента);
					
			Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
				СтрокаВторогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
			Иначе
				СтрокаВторогоСобытия.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат;
			КонецЕсли;			

			СтрокаВторогоСобытия.СуммаНДСПропорционально  = СтрокаВторогоСобытия.СуммаНДСПропорционально - ПСВозвНДСПр;
			СтрокаВторогоСобытия.СуммаНДС 		  	 	  = СтрокаВторогоСобытия.СуммаНДС 				 - ПСВозвНДС;
			СтрокаВторогоСобытия.СуммаВзаиморасчетов	  = 0;
			СтрокаВторогоСобытия.БазаНДС 				  = 0;
				
		КонецЕсли;			
		
		// ЗАКРЫТИЕ РЕГИСТРОВ ПО НЕПОЛНЫМ ВОЗВРАТАМ
		// Автоматически закроем неполные возвраты в регистре Продажи/Приобретения налоговый учет.
		Если   РасчОтгрВсеНач > РасчОплВсеНач И ВозвОтгрВсеДок > ВозвОплВсеДок 
			И ((ВозвОплВсеНач<=ВозвОтгрВсеНач) ИЛИ (ВозвОплВсеНач - ВозвОтгрВсеНач)<(ВозвОтгрВсеДок - ВозвОплВсеДок)) Тогда
			СуммаНеполногоВозвратаВсе = МИН(РасчОтгрВсеНач - РасчОплВсеНач, ВозвОтгрВсеДок - ВозвОплВсеДок 			 - ?(ВозвОплВсеНач<=ВозвОтгрВсеНач,0,(ВозвОплВсеНач - ВозвОтгрВсеНач)));
			СуммаНеполногоВозвратаНДС = МИН(РасчОтгрНДСНач - РасчОплНДСНач, ВозвОтгрНДСДок - ВозвОплНДСДок 			 - ?(ВозвОплВсеНач<=ВозвОтгрВсеНач,0,(ВозвОплНДСНач - ВозвОтгрНДСНач)));
			СуммаНеполногоВозвратаНДСПр = МИН(РасчОтгрНДСПрНач - РасчОплНДСПрНач, ВозвОтгрНДСПрДок - ВозвОплНДСПрДок - ?(ВозвОплВсеНач<=ВозвОтгрВсеНач,0,(ВозвОплНДСПрНач - ВозвОтгрНДСПрНач)));
				
			Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет"  Тогда
			    СтрокаЗакрытияВозвратовРасчеты = ТаблицаДополнительныхДвиженийПродажи.Добавить();
			Иначе	
			    СтрокаЗакрытияВозвратовРасчеты = ТаблицаДополнительныхДвиженийПриобретения.Добавить();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаЗакрытияВозвратовРасчеты, ДвижениеДокумента);
			
			Если    СхемаНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию 
				ИЛИ СхемаНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке Тогда
				// делаем парное движение
				Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
					СтрокаЗакрытияВозвратовРасчеты.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем;
				Иначе	
					СтрокаЗакрытияВозвратовРасчеты.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику;					
				КонецЕсли;
				СтрокаЗакрытияВозвратовРасчеты.ВидДвижения				= ВидДвиженияНакопления.Приход;
			Иначе
				// делаем сторно-движение по событию, не вызывающему налоговое обязательство
				// (реализация при методу "по оплате")
				Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
					СтрокаЗакрытияВозвратовРасчеты.Событие = Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю;
				Иначе
					СтрокаЗакрытияВозвратовРасчеты.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика;
				КонецЕсли;
				СтрокаЗакрытияВозвратовРасчеты.ВидДвижения				= ВидДвиженияНакопления.Расход;
			КонецЕсли;  
			СтрокаЗакрытияВозвратовРасчеты.Активность				= Истина;
			СтрокаЗакрытияВозвратовРасчеты.Период 					= ДатаДвижений;
			СтрокаЗакрытияВозвратовРасчеты.Организация 				= ДокументОбъект.Организация;
			
			Если ДвижениеДокумента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам 
				И НЕ РасчетныйДокументЯвляетсяСчетомНаОплату(Сделка) Тогда
				СтрокаЗакрытияВозвратовРасчеты.Сделка = ДвижениеДокумента.РасчетныйДокумент;
			КонецЕсли;
			
			СтрокаЗакрытияВозвратовРасчеты.СуммаВзаиморасчетов	 	= СуммаНеполногоВозвратаВсе;
			СтрокаЗакрытияВозвратовРасчеты.СуммаНДС 				= СуммаНеполногоВозвратаНДС;
			СтрокаЗакрытияВозвратовРасчеты.СуммаНДСПропорционально  = СуммаНеполногоВозвратаНДСПр;
			
			//==========================
			
			Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет"  Тогда
			    СтрокаЗакрытияВозвратовВозврат = ТаблицаДополнительныхДвиженийПродажи.Добавить();
			Иначе	
			    СтрокаЗакрытияВозвратовВозврат = ТаблицаДополнительныхДвиженийПриобретения.Добавить();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаЗакрытияВозвратовВозврат, СтрокаЗакрытияВозвратовРасчеты);
			
			Если    СхемаНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию 
				ИЛИ СхемаНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке Тогда
				// делаем парное движение
				Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
					СтрокаЗакрытияВозвратовВозврат.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю;
				Иначе
					СтрокаЗакрытияВозвратовВозврат.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком;
				КонецЕсли;
				СтрокаЗакрытияВозвратовВозврат.ВидДвижения				= ВидДвиженияНакопления.Приход;
			Иначе	
				// делаем сторно-движение по событию, не вызывающему налоговое обязательство
				// (реализация при методу "по оплате")
				Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
					СтрокаЗакрытияВозвратовВозврат.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя;
				Иначе
					СтрокаЗакрытияВозвратовВозврат.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику;
				КонецЕсли;
				СтрокаЗакрытияВозвратовВозврат.ВидДвижения				= ВидДвиженияНакопления.Расход;
			КонецЕсли;  
			
			Если ДвижениеДокумента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам 
				И НЕ РасчетныйДокументЯвляетсяСчетомНаОплату(Сделка) Тогда
				СтрокаЗакрытияВозвратовВозврат.Сделка   = ДвижениеДокумента.Сделка;
			КонецЕсли;
			
			// Нужно можно перенести данные по движению документа в таблицы остатков: 
			// для того, чтобы они учлись для очередной строки движения документа:
			Если ДвижениеДокумента.ИмяРегистра = "ПриобретенияНалоговыйУчет" Тогда
				СтрокаОстатков =  ОстаткиПриобретение.Добавить();
			Иначе	
				СтрокаОстатков =  ОстаткиПродажи.Добавить();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаОстатков, СтрокаЗакрытияВозвратовРасчеты);
			Если ДвижениеДокумента.ИмяРегистра = "ПриобретенияНалоговыйУчет" Тогда
				СтрокаОстатков =  ОстаткиПриобретение.Добавить();
			Иначе	
				СтрокаОстатков =  ОстаткиПродажи.Добавить();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаОстатков, СтрокаЗакрытияВозвратовВозврат);
			
			// сформируем кросс-проводку по НДС в специфическом случае
			Если ДвижениеДокумента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам
				И НЕ РасчетныйДокументЯвляетсяСчетомНаОплату(Сделка)
				И (СхемаНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате) Тогда
				
				Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
					СделкаКт = ДвижениеДокумента.Сделка;
					СделкаДт = ДвижениеДокумента.РасчетныйДокумент;
				Иначе
					СделкаДт = ДвижениеДокумента.Сделка;
					СделкаКт = ДвижениеДокумента.РасчетныйДокумент;
				КонецЕсли;
				
				Проводка = ДокументОбъект.Движения.Хозрасчетный.Добавить();
				
				Проводка.Период          = ДатаДвижений;
				Проводка.Активность      = Истина;
				Проводка.Организация     = ДокументОбъект.Организация;
				Если ДвижениеДокумента.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая Тогда
					Проводка.Сумма           = СуммаНеполногоВозвратаНДСПр;
				Иначе	
					Проводка.Сумма           = СуммаНеполногоВозвратаНДС;	
				КонецЕсли;
				Проводка.Содержание      = НСтр("ru='Закрытие неполного возврата по НДС';uk='Закриття неповного повернення по ПДВ'", Локализация.КодЯзыкаИнформационнойБазы());
				Проводка.НомерЖурнала    = "";

				Проводка.СчетДт = ДвижениеДокумента.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", ДвижениеДокумента.ДоговорКонтрагента.Владелец);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , ДвижениеДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СделкаДт);
				
				Проводка.СчетКт  = ДвижениеДокумента.СчетУчетаНДС;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", ДвижениеДокумента.ДоговорКонтрагента.Владелец);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , ДвижениеДокумента.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СделкаКт);
				
			КонецЕсли;	
				
		ИначеЕсли  РасчОтгрВсеНач < РасчОплВсеНач И ВозвОтгрВсеДок < ВозвОплВсеДок 				
			   И( (ВозвОтгрВсеНач<=ВозвОплВсеНач) ИЛИ (ВозвОтгрВсеНач-ВозвОплВсеНач)<(ВозвОплВсеДок - ВозвОтгрВсеДок)) Тогда
			СуммаНеполногоВозвратаВсе = МИН(-РасчОтгрВсеНач + РасчОплВсеНач, -ВозвОтгрВсеДок + ВозвОплВсеДок			- ?(ВозвОтгрВсеНач<=ВозвОплВсеНач,0,(ВозвОтгрВсеНач - ВозвОплВсеНач)));
			СуммаНеполногоВозвратаНДС = МИН(-РасчОтгрНДСНач + РасчОплНДСНач, -ВозвОтгрНДСДок + ВозвОплНДСДок			- ?(ВозвОтгрВсеНач<=ВозвОплВсеНач,0,(ВозвОтгрНДСНач - ВозвОплНДСНач)));
			СуммаНеполногоВозвратаНДСПр = МИН(-РасчОтгрНДСПрНач + РасчОплНДСПрНач, -ВозвОтгрНДСПрДок + ВозвОплНДСПрДок	- ?(ВозвОтгрВсеНач<=ВозвОплВсеНач,0,(ВозвОтгрНДСПрНач - ВозвОплНДСПрНач)));
			
			Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет"  Тогда
			    СтрокаЗакрытияВозвратовРасчеты = ТаблицаДополнительныхДвиженийПродажи.Добавить();
			Иначе	
			    СтрокаЗакрытияВозвратовРасчеты = ТаблицаДополнительныхДвиженийПриобретения.Добавить();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаЗакрытияВозвратовРасчеты, ДвижениеДокумента);
			
			Если    СхемаНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию 
				ИЛИ СхемаНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке Тогда
				// делаем парное движение
				Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
					СтрокаЗакрытияВозвратовРасчеты.Событие = Перечисления.СобытияПродажиНалоговыйУчет.РеализацияПокупателю;
				Иначе	
					СтрокаЗакрытияВозвратовРасчеты.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ПоступлениеОтПоставщика;					
				КонецЕсли;
				СтрокаЗакрытияВозвратовРасчеты.ВидДвижения				= ВидДвиженияНакопления.Приход;
			Иначе
				// делаем сторно-движение по событию, не вызывающему налоговое обязательство
				// (реализация при методу "по оплате")
				Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
					СтрокаЗакрытияВозвратовРасчеты.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем;
				Иначе
					СтрокаЗакрытияВозвратовРасчеты.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику;
				КонецЕсли;
				СтрокаЗакрытияВозвратовРасчеты.ВидДвижения				= ВидДвиженияНакопления.Расход;
			КонецЕсли;  
			СтрокаЗакрытияВозвратовРасчеты.Активность				= Истина;
			СтрокаЗакрытияВозвратовРасчеты.Период 					= ДатаДвижений;
			СтрокаЗакрытияВозвратовРасчеты.Организация 				= ДокументОбъект.Организация;
			
			Если ДвижениеДокумента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам 
				И НЕ РасчетныйДокументЯвляетсяСчетомНаОплату(Сделка) Тогда
				СтрокаЗакрытияВозвратовРасчеты.Сделка   = ДвижениеДокумента.РасчетныйДокумент;
			КонецЕсли;
			
			СтрокаЗакрытияВозвратовРасчеты.СуммаВзаиморасчетов	 	= СуммаНеполногоВозвратаВсе;
			СтрокаЗакрытияВозвратовРасчеты.СуммаНДС 				= СуммаНеполногоВозвратаНДС;
			СтрокаЗакрытияВозвратовРасчеты.СуммаНДСПропорционально  = СуммаНеполногоВозвратаНДСПр;
			
			//==========================
			
			Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет"  Тогда
			    СтрокаЗакрытияВозвратовВозврат = ТаблицаДополнительныхДвиженийПродажи.Добавить();
			Иначе	
			    СтрокаЗакрытияВозвратовВозврат = ТаблицаДополнительныхДвиженийПриобретения.Добавить();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаЗакрытияВозвратовВозврат, СтрокаЗакрытияВозвратовРасчеты);
			
			Если    СхемаНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию 
				ИЛИ СхемаНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОтгрузке Тогда
				// делаем парное движение
				Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
					СтрокаЗакрытияВозвратовВозврат.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОтПокупателя;
				Иначе
					СтрокаЗакрытияВозвратовВозврат.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратПоставщику;
				КонецЕсли;
				СтрокаЗакрытияВозвратовВозврат.ВидДвижения				= ВидДвиженияНакопления.Приход;
			Иначе	
				// делаем сторно-движение по событию, не вызывающему налоговое обязательство
				// (реализация при методу "по оплате")
				Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
					СтрокаЗакрытияВозвратовВозврат.Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю;
				Иначе
					СтрокаЗакрытияВозвратовВозврат.Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком;
				КонецЕсли;
				СтрокаЗакрытияВозвратовВозврат.ВидДвижения				= ВидДвиженияНакопления.Расход;
			КонецЕсли;  
			
			Если ДвижениеДокумента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам 
				И НЕ РасчетныйДокументЯвляетсяСчетомНаОплату(Сделка) Тогда
				СтрокаЗакрытияВозвратовВозврат.Сделка   = ДвижениеДокумента.Сделка;
			КонецЕсли;
			
			// Нужно перенести данные по движению документа в таблицы остатков: 
			// для того, чтобы они учлись для очередной строки движения документа:
			Если ДвижениеДокумента.ИмяРегистра = "ПриобретенияНалоговыйУчет" Тогда
				СтрокаОстатков =  ОстаткиПриобретение.Добавить();
			Иначе	
				СтрокаОстатков =  ОстаткиПродажи.Добавить();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаОстатков, СтрокаЗакрытияВозвратовРасчеты);
			Если ДвижениеДокумента.ИмяРегистра = "ПриобретенияНалоговыйУчет" Тогда
				СтрокаОстатков =  ОстаткиПриобретение.Добавить();
			Иначе	
				СтрокаОстатков =  ОстаткиПродажи.Добавить();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаОстатков, СтрокаЗакрытияВозвратовВозврат);
				
			// сформируем кросс-проводку по НДС в специфическом случае
			Если ДвижениеДокумента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам
				И НЕ РасчетныйДокументЯвляетсяСчетомНаОплату(Сделка)
				И (    СхемаНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате
				   ИЛИ СхемаНДС = Перечисления.МоментыОпределенияНалоговойБазы.ПоПервомуСобытию) Тогда
					
					Если ДвижениеДокумента.ИмяРегистра = "ПродажиНалоговыйУчет" Тогда
						СделкаДт = ДвижениеДокумента.Сделка;
						СделкаКт = ДвижениеДокумента.РасчетныйДокумент;
					Иначе
						СделкаКт = ДвижениеДокумента.Сделка;
						СделкаДт = ДвижениеДокумента.РасчетныйДокумент;
					КонецЕсли;
					
					Проводка = ДокументОбъект.Движения.Хозрасчетный.Добавить();
					                                                       
					Проводка.Период          = ДатаДвижений;
					Проводка.Активность      = Истина;
					Проводка.Организация     = ДокументОбъект.Организация;
					Если ДвижениеДокумента.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая Тогда
						Проводка.Сумма           = СуммаНеполногоВозвратаНДСПр;
					Иначе	
						Проводка.Сумма           = СуммаНеполногоВозвратаНДС;
					КонецЕсли;
					
					Проводка.Содержание      = НСтр("ru='Закрытие неполного возврата по НДС';uk='Закриття неповного повернення по ПДВ'", Локализация.КодЯзыкаИнформационнойБазы());
					Проводка.НомерЖурнала    = "";

					Проводка.СчетДт = ДвижениеДокумента.СчетУчетаНДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Контрагенты", ДвижениеДокумента.ДоговорКонтрагента.Владелец);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Договоры"   , ДвижениеДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", СделкаДт);
					
					Проводка.СчетКт  = ДвижениеДокумента.СчетУчетаНДС;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Контрагенты", ДвижениеДокумента.ДоговорКонтрагента.Владелец);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Договоры"   , ДвижениеДокумента.ДоговорКонтрагента);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", СделкаКт);
				
			КонецЕсли;	

		КонецЕсли;
			
		// Перенесем данные по движению документа в таблицы остатков: 
		// для того, чтобы они учлись для очередной строки движения документа:
		Если ДвижениеДокумента.ИмяРегистра = "ПриобретенияНалоговыйУчет" Тогда
			СтрокаОстатков =  ОстаткиПриобретение.Добавить();
		Иначе	
			СтрокаОстатков =  ОстаткиПродажи.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаОстатков, ДвижениеДокумента);
		
	КонецЦикла;
	
	// Допишем движения по налоговым регистрам к движениям документа
	// РЕГИСТРЫ НАЛОГОВОГО УЧЕТА
	
	// удалим пустые строки и переименуем колонку с суммой по НП
	ПустыеСтроки = ТаблицаДополнительныхДвиженийПродажи.НайтиСтроки(Новый Структура("СуммаВзаиморасчетов, СуммаНДС", 0,0));
	Для каждого ПустаяСтрока Из ПустыеСтроки Цикл
		ТаблицаДополнительныхДвиженийПродажи.Удалить(ПустаяСтрока);
	КонецЦикла; 	
	ТаблицаДополнительныхДвиженийПродажи.Колонки.Удалить("СуммаНДСПропорционально");
	
	ТаблицаДополнительныхДвиженийПродажиПриход = ТаблицаДополнительныхДвиженийПродажи.СкопироватьКолонки();
	ТаблицаДополнительныхДвиженийПродажиРасход = ТаблицаДополнительныхДвиженийПродажи.СкопироватьКолонки();
	Для каждого Строка Из ТаблицаДополнительныхДвиженийПродажи Цикл
		Если Строка.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
			СтрокаДоп = ТаблицаДополнительныхДвиженийПродажиПриход.Добавить();
		Иначе	
			СтрокаДоп = ТаблицаДополнительныхДвиженийПродажиРасход.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаДоп, Строка);
	КонецЦикла;
	
	Если ТаблицаДополнительныхДвиженийПродажиПриход.Количество() > 0 Тогда
		
		ДокументОбъект.Движения.ПродажиНалоговыйУчет.мТаблицаДвижений = ТаблицаДополнительныхДвиженийПродажиПриход;
		ДокументОбъект.Движения.ПродажиНалоговыйУчет.мПериод = ДатаДвижений;
		ДокументОбъект.Движения.ПродажиНалоговыйУчет.ВыполнитьПриход();
		ДокументОбъект.Движения.ПродажиНалоговыйУчет.Записать();
		
	КонецЕсли;		
	
	Если ТаблицаДополнительныхДвиженийПродажиРасход.Количество() > 0 Тогда
		
		ДокументОбъект.Движения.ПродажиНалоговыйУчет.мТаблицаДвижений = ТаблицаДополнительныхДвиженийПродажиРасход;
		ДокументОбъект.Движения.ПродажиНалоговыйУчет.мПериод = ДатаДвижений;
		ДокументОбъект.Движения.ПродажиНалоговыйУчет.ВыполнитьРасход();
		ДокументОбъект.Движения.ПродажиНалоговыйУчет.Записать();
		
	КонецЕсли;
	
	// удалим пустые строки и переименуем колонку с суммой по НП
	ПустыеСтроки = ТаблицаДополнительныхДвиженийПриобретения.НайтиСтроки(Новый Структура("СуммаВзаиморасчетов, СуммаНДС", 0,0));
	Для каждого ПустаяСтрока Из ПустыеСтроки Цикл
		ТаблицаДополнительныхДвиженийПриобретения.Удалить(ПустаяСтрока);
	КонецЦикла; 	
	
	ТаблицаДополнительныхДвиженийПриобретенияПриход = ТаблицаДополнительныхДвиженийПриобретения.СкопироватьКолонки();
	ТаблицаДополнительныхДвиженийПриобретенияРасход = ТаблицаДополнительныхДвиженийПриобретения.СкопироватьКолонки();
	Для каждого Строка Из ТаблицаДополнительныхДвиженийПриобретения Цикл
		Если Строка.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
			СтрокаДоп = ТаблицаДополнительныхДвиженийПриобретенияПриход.Добавить();
		Иначе	
			СтрокаДоп = ТаблицаДополнительныхДвиженийПриобретенияРасход.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаДоп, Строка);
	КонецЦикла;
	
	Если ТаблицаДополнительныхДвиженийПриобретенияПриход.Количество() > 0 Тогда
		
		ДокументОбъект.Движения.ПриобретенияНалоговыйУчет.мТаблицаДвижений = ТаблицаДополнительныхДвиженийПриобретенияПриход;
		ДокументОбъект.Движения.ПриобретенияНалоговыйУчет.мПериод = ДатаДвижений;
		ДокументОбъект.Движения.ПриобретенияНалоговыйУчет.ВыполнитьПриход();
		ДокументОбъект.Движения.ПриобретенияНалоговыйУчет.Записать();
		
	КонецЕсли;		
	
	Если ТаблицаДополнительныхДвиженийПриобретенияРасход.Количество() > 0 Тогда
		
		ДокументОбъект.Движения.ПриобретенияНалоговыйУчет.мТаблицаДвижений = ТаблицаДополнительныхДвиженийПриобретенияРасход;
		ДокументОбъект.Движения.ПриобретенияНалоговыйУчет.мПериод = ДатаДвижений;
		ДокументОбъект.Движения.ПриобретенияНалоговыйУчет.ВыполнитьРасход();
		ДокументОбъект.Движения.ПриобретенияНалоговыйУчет.Записать();
		
	КонецЕсли;
	
	
	// Допишем движения по налоговым регистрам к движениям документа
	// по данным таблицы первого события сформируем движения по регистрам Ожидаемого и подтвержденного НДС
	ТаблицаДвиженийОиПНДСПриобретений = РегистрыНакопления.ОжидаемыйИПодтвержденныйНДСПриобретений.СоздатьНаборЗаписей().Выгрузить();
	ТаблицаДвиженийОиПНДСПродаж = РегистрыНакопления.ОжидаемыйИПодтвержденныйНДСПродаж.СоздатьНаборЗаписей().Выгрузить();
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
 	
	Для каждого  СтрокаПС Из ТаблицаПоПервомуСобытиюНДС Цикл
		
		Если СтрокаПС.СтавкаНДС.Пустая() Тогда
			//по фирме не ведется учет НДС
			Продолжить;	
		КонецЕсли;
		
		
		Если СтрокаПС.БазаНДС = 0 Тогда
			//пустые строки не добавляем
			Продолжить;	
		КонецЕсли;
		
		Если  СтрокаПС.ВозвратнаяТара 
			И (    СтрокаПС.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат 
			   ИЛИ СтрокаПС.СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат) Тогда
			// возвраты по таре в регистрах не отражаются
			Продолжить;	
		КонецЕсли;
		
		Если СтрокаПС.ИмяРегистра = "ПриобретенияНалоговыйУчет" Тогда
			Если НЕ СтрокаПС.ДоговорКонтрагента.ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета Тогда
				// поступление от нерезидента при поступлении не отражается в этом регистре
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаПС.ИмяРегистра = "ПриобретенияНалоговыйУчет" Тогда
			СтрокаОиПНДС = ТаблицаДвиженийОиПНДСПриобретений.Добавить();
		Иначе	
			СтрокаОиПНДС = ТаблицаДвиженийОиПНДСПродаж.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаОиПНДС, СтрокаПС);
		
	КонецЦикла;
	
	ТаблицаДвиженийОиПНДСПриобретений.ЗаполнитьЗначения(ДокументОбъект.Организация, "Организация");
	ТаблицаДвиженийОиПНДСПриобретений.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПриобретений.ОжидаемыйНДС, "КодОперации");
	
	ТаблицаДвиженийОиПНДСПродаж.ЗаполнитьЗначения(ДокументОбъект.Организация, "Организация");
	ТаблицаДвиженийОиПНДСПродаж.ЗаполнитьЗначения(Перечисления.КодыОперацийОжидаемыйИПодтвержденныйНДСПродаж.ОжидаемыйНДС, "КодОперации");
	
	Если ТаблицаДвиженийОиПНДСПродаж.Количество() > 0 Тогда
		
		ДокументОбъект.Движения.ОжидаемыйИПодтвержденныйНДСПродаж.мТаблицаДвижений = ТаблицаДвиженийОиПНДСПродаж;
		ДокументОбъект.Движения.ОжидаемыйИПодтвержденныйНДСПродаж.мПериод = ДатаДвижений;
		ДокументОбъект.Движения.ОжидаемыйИПодтвержденныйНДСПродаж.ВыполнитьПриход();
		ДокументОбъект.Движения.ОжидаемыйИПодтвержденныйНДСПродаж.Записать();
		
	КонецЕсли;		
	
	Если ТаблицаДвиженийОиПНДСПриобретений.Количество() > 0 Тогда
		
		ДокументОбъект.Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.мТаблицаДвижений = ТаблицаДвиженийОиПНДСПриобретений;
		ДокументОбъект.Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.мПериод = ДатаДвижений;
		ДокументОбъект.Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.ВыполнитьПриход();
		ДокументОбъект.Движения.ОжидаемыйИПодтвержденныйНДСПриобретений.Записать();
		
	КонецЕсли;	
	
КонецПроцедуры

// Функция возвращает ссылку для движений по регистрам налогового учета
// 
// Параметры:
//  ВыборкаПоШапкеДокумента - Структра, должна содеражть значение ВедениеВзаиморасчетов договора контрагета. 
//  Ссылка - ДокументСсылка. Ссылка на документ взаиморасчетов.
//  Сделка - ДокументСсылка. Сделка, указанная в документе взаиморасчетов.
//
// Возвращаемое значение:
//  ДокументСсылка - Сделка.
// 
Функция ОпределитьСделкуНалоговыйУчет(ВыборкаПоШапкеДокумента, Ссылка, Сделка = Неопределено) Экспорт

	Если ВыборкаПоШапкеДокумента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
		
		Возврат Неопределено;
		
	ИначеЕсли РасчетныйДокументЯвляетсяСчетомНаОплату(Сделка) Тогда

		Возврат Сделка;

	Иначе			
		
		Возврат Ссылка;
		
	КонецЕсли;
   
КонецФункции // УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом()

// Возращает "Истина", если параметр является счетом поставщика или покупателю
//
Функция РасчетныйДокументЯвляетсяСчетомНаОплату(Сделка) Экспорт
	
	// ИНАГРО++
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		 Возврат ЗначениеЗаполнено(Сделка)
		  И (ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") 
		 ИЛИ ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")
		 ИЛИ Сделка.Метаданные().Имя = "ИНАГРО_СчетНаОплатуПокупателюБиологическихАктивов"
		 ИЛИ Сделка.Метаданные().Имя = "ИНАГРО_СчетНаОплатуПоставщикаБиологическихАктивов")
	 Иначе
		 Возврат ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") 
		     ИЛИ ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")
	 КонецЕсли;	  
     // ИНАГРО--

КонецФункции //

// служебная функция - заполняет ПроводкаНовая теми же данными, что содержатся в проводке ПроводкаНовая
//
//
Процедура СкопироватьПроводкуРегистраБухгалтерии(ПроводкаНовая, ПроводкаИсходная)

	// Заполним все свойства (кроме субконто):
	ЗаполнитьЗначенияСвойств(ПроводкаНовая, ПроводкаИсходная);
	
	// Субконто ДТ
	Для каждого Субконто Из ПроводкаИсходная.СчетДт.ВидыСубконто  Цикл
		
		БухгалтерскийУчетРед12.УстановитьСубконтоПоВидуСубконто(ПроводкаНовая.СчетДт,
	   					  ПроводкаНовая.СубконтоДт,
						  Субконто.ВидСубконто, 
						  ПроводкаИсходная.СубконтоДт[Субконто.ВидСубконто]);
		
	
	КонецЦикла;

	// Субконто КТ
	Для каждого Субконто Из ПроводкаИсходная.СчетКт.ВидыСубконто  Цикл
		
		БухгалтерскийУчетРед12.УстановитьСубконтоПоВидуСубконто(ПроводкаНовая.СчетКт,
	   					  ПроводкаНовая.СубконтоКт,
						  Субконто.ВидСубконто, 
						  ПроводкаИсходная.СубконтоКт[Субконто.ВидСубконто]);
		
	
	КонецЦикла;
	
КонецПроцедуры

// разбивает проводку по НДС на проводки по 1-му/2-му событию: уменьшая суммы
// из таблицы ТаблицаПоВторомуСобытиюНал
//
Процедура РазбитьПроводкуПоНДСНаПервоеВтороеСобытие(ТаблицаПоВторомуСобытиюНал, ДвиженияДокумента, Проводка,
											   		СуффиксСчета, СчетВторогоСобытия,
											   		ДоговорКонтрагента, 
													Сделка, РасчетныйДокумент = Неопределено,
											   		СобытиеНДС, 
											   		СтавкаНДС, ДляХозяйственнойДеятельности = Неопределено, ВидДеятельностиНДС = Неопределено, Амортизируется = Неопределено,
													СуммаПроводкиВал = Неопределено, СуммаПроводкиКурсНБУ = 0, КурсЗачетаАванса = Неопределено) Экспорт
													


	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураПоиска.Вставить("Сделка", 			   Сделка);
	СтруктураПоиска.Вставить("СтавкаНДС", 		   СтавкаНДС);
	СтруктураПоиска.Вставить("СобытиеНДС",	   	   СобытиеНДС);
	СтруктураПоиска.Вставить("ВозвратнаяТара",	   Ложь);
	
	Если НЕ ДляХозяйственнойДеятельности = Неопределено Тогда
		СтруктураПоиска.Вставить("ДляХозяйственнойДеятельности", ДляХозяйственнойДеятельности);	
	КонецЕсли;
	Если НЕ ВидДеятельностиНДС = Неопределено Тогда
		СтруктураПоиска.Вставить("ВидДеятельностиНДС", ВидДеятельностиНДС);	
	КонецЕсли;
	Если НЕ Амортизируется = Неопределено Тогда
		СтруктураПоиска.Вставить("Амортизируется", Амортизируется);	
	КонецЕсли;
	
	ИмяКолонкиСуммаНДС = "СуммаНДС";
	Если ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая Тогда
		ИмяКолонкиСуммаНДС = "СуммаНДСПропорционально";
	КонецЕсли;
	
	СтрокиВС = ТаблицаПоВторомуСобытиюНал.НайтиСтроки(СтруктураПоиска);
	
	СуммаПроводкиРегл	= ?(Проводка.Сумма < 0, - Проводка.Сумма, Проводка.Сумма);
	ИмяВалютнойСуммы    = "ВалютнаяСумма" + ?(СуффиксСчета = "Дт", "Кт", "Дт");
	
	РасчетыВВалюте = НЕ (ДоговорКонтрагента.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить());
	Если     РасчетыВВалюте Тогда
		Если СуммаПроводкиВал = Неопределено Тогда
			Возврат;
		КонецЕсли;
		СуммаПроводки = ?(СуммаПроводкиВал < 0, - СуммаПроводкиВал, СуммаПроводкиВал);	
		Если КурсЗачетаАванса = Неопределено Тогда 
			Если СуммаПроводки <> 0 Тогда
				КурсЗачетаАванса = СуммаПроводкиКурсНБУ / СуммаПроводки;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СуммаПроводки = СуммаПроводкиРегл; 
	КонецЕсли;
	
	СуммаВторогоСобытия = 0;
	СуммаКСписанию = СуммаПроводки;
	
	Для каждого СтрокаВС Из СтрокиВС Цикл
		
		Если СуммаКСписанию <= 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если СтрокаВС[ИмяКолонкиСуммаНДС] <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаСписания = Мин(СтрокаВС[ИмяКолонкиСуммаНДС], СуммаКСписанию);
		
		СуммаВторогоСобытия = СуммаВторогоСобытия + СуммаСписания;
		СтрокаВС[ИмяКолонкиСуммаНДС]= СтрокаВС[ИмяКолонкиСуммаНДС]   - СуммаСписания;
		СуммаКСписанию 	  	= СуммаКСписанию 	  - СуммаСписания;
		
	КонецЦикла; 
	
	Если СуммаВторогоСобытия > 0 Тогда
		Если СуммаПроводки > СуммаВторогоСобытия Тогда
			
			// нужно разбить проводку на первое/второе событие
			ПроводкаВтороеСобытие = ДвиженияДокумента.Добавить(); 
			СкопироватьПроводкуРегистраБухгалтерии(ПроводкаВтороеСобытие, Проводка);
			
			ПроводкаВтороеСобытие["Счет" + СуффиксСчета] = СчетВторогоСобытия;
			
			// суммы
			Если РасчетыВВалюте Тогда
				ПроводкаВтороеСобытие["Сумма"] = (СуммаВторогоСобытия * КурсЗачетаАванса) * ?(Проводка.Сумма<0, -1, 1);
				Проводка			 ["Сумма"] = Проводка["Сумма"] - ПроводкаВтороеСобытие["Сумма"];
				//валютные суммы
				ПроводкаВтороеСобытие[ИмяВалютнойСуммы] = СуммаВторогоСобытия;
				Проводка			 [ИмяВалютнойСуммы] = Проводка[ИмяВалютнойСуммы] - ПроводкаВтороеСобытие[ИмяВалютнойСуммы];
				
				// налоговые суммы
				Если (ПроводкаВтороеСобытие["Сумма"] + Проводка["Сумма"]) <> 0 Тогда
					ПроводкаВтороеСобытие["СуммаНУДт"] = Проводка["СуммаНУДт"] * (ПроводкаВтороеСобытие["Сумма"] / (ПроводкаВтороеСобытие["Сумма"] + Проводка["Сумма"]));
					ПроводкаВтороеСобытие["СуммаНУКт"] = Проводка["СуммаНУКт"] * (ПроводкаВтороеСобытие["Сумма"] / (ПроводкаВтороеСобытие["Сумма"] + Проводка["Сумма"]));
				КонецЕсли;
				
			Иначе	
				
				ПроводкаВтороеСобытие["Сумма"] =  СуммаВторогоСобытия 				   * ?(Проводка.Сумма<0, -1, 1);
				Проводка			 ["Сумма"] = (СуммаПроводки - СуммаВторогоСобытия) * ?(Проводка.Сумма<0, -1, 1);
				
				// налоговые суммы
				ПроводкаВтороеСобытие["СуммаНУДт"] = Проводка["СуммаНУДт"] * СуммаВторогоСобытия / СуммаПроводки;
				ПроводкаВтороеСобытие["СуммаНУКт"] = Проводка["СуммаНУКт"] * СуммаВторогоСобытия / СуммаПроводки;

			КонецЕсли;
			
			// налоговые суммы
			Проводка			 ["СуммаНУДт"] = Проводка["СуммаНУДт"] - ПроводкаВтороеСобытие["СуммаНУДт"];
			Проводка			 ["СуммаНУКт"] = Проводка["СуммаНУКт"] - ПроводкаВтороеСобытие["СуммаНУКт"];
			
			ПроводкаВтороеСобытие.Содержание = ПроводкаВтороеСобытие.Содержание + НСтр("ru=', второе событие';uk=', друга подія'");
			
		Иначе
			
			СчетПервогоСобытия = Проводка["Счет" + СуффиксСчета];
			
			// просто заменим счет в проводке
			Проводка["Счет" + СуффиксСчета] = СчетВторогоСобытия;
			Проводка.Содержание = Проводка.Содержание + НСтр("ru=', второе событие';uk=', друга подія'", Локализация.КодЯзыкаИнформационнойБазы());
			
			Если РасчетыВВалюте Тогда
				СуммаПроводкиВтороеСобытие 			= СуммаПроводки * КурсЗачетаАванса * ?(Проводка.Сумма<0, -1, 1);
				СуммаПервогоСобытияИзЗаРазницыКурсов= Проводка.Сумма - СуммаПроводкиВтороеСобытие;
				
				Проводка.Сумма = СуммаПроводкиВтороеСобытие;
				
				Если НЕ СуммаПервогоСобытияИзЗаРазницыКурсов = 0 Тогда
					ПроводкаПервоеСобытие = ДвиженияДокумента.Добавить(); 
					СкопироватьПроводкуРегистраБухгалтерии(ПроводкаПервоеСобытие, Проводка);
					
					ПроводкаПервоеСобытие["Счет" + СуффиксСчета] 	= СчетПервогоСобытия;
					ПроводкаПервоеСобытие["Сумма"] 					= СуммаПервогоСобытияИзЗаРазницыКурсов;
					ПроводкаПервоеСобытие["СуммаНУДт"]		 		= 0;
					ПроводкаПервоеСобытие["СуммаНУКт"] 				= 0;
					ПроводкаПервоеСобытие[ИмяВалютнойСуммы] 		= 0;
					
					ПроводкаПервоеСобытие.Содержание = ПроводкаПервоеСобытие.Содержание + НСтр("ru=', первое событие, корректировка НДС';uk=', перша подія, коригування ПДВ'");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если  ДоговорКонтрагента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам
		И НЕ РасчетныйДокументЯвляетсяСчетомНаОплату(Сделка)
		И СуммаКСписанию > 0
		И НЕ РасчетныйДокумент = Неопределено
		И НЕ РасчетныйДокумент.Пустая() Тогда
		
		СуммаПроводки = СуммаКСписанию;
		
		// возможно имеется второе событие по расчетному документу
		СтруктураПоиска.Вставить("Сделка", РасчетныйДокумент);
		
		СуммаВторогоСобытия = 0;
		СтрокиВС = ТаблицаПоВторомуСобытиюНал.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаВС Из СтрокиВС Цикл
			
			Если СуммаКСписанию <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаВС[ИмяКолонкиСуммаНДС] <= 0 Тогда	
				Продолжить;
			КонецЕсли;
			
			СуммаСписания = Мин(СтрокаВС[ИмяКолонкиСуммаНДС], СуммаКСписанию);
			
			СуммаВторогоСобытия = СуммаВторогоСобытия + СуммаСписания;
			СтрокаВС[ИмяКолонкиСуммаНДС] = СтрокаВС[ИмяКолонкиСуммаНДС] - СуммаСписания;
			СуммаКСписанию 	  	= СуммаКСписанию 	  - СуммаСписания;
			
		КонецЦикла; 
		
		Если СуммаВторогоСобытия > 0 Тогда
			
			Если СуммаПроводки > СуммаВторогоСобытия Тогда
				
				// нужно разбить проводку на первое/второе событие
				ПроводкаВтороеСобытие = ДвиженияДокумента.Добавить(); 
				СкопироватьПроводкуРегистраБухгалтерии(ПроводкаВтороеСобытие, Проводка);
				
				ПроводкаВтороеСобытие["Счет" + СуффиксСчета] = СчетВторогоСобытия;
				БухгалтерскийУчет.УстановитьСубконто(ПроводкаВтороеСобытие["Счет" + СуффиксСчета],ПроводкаВтороеСобытие["Субконто" + СуффиксСчета],"ДокументыРасчетовСКонтрагентами", РасчетныйДокумент);
				
				// суммы
				Если РасчетыВВалюте Тогда
					
					// курс определеим по данным документа расчетов
					МетаданныеРасчДокумента = РасчетныйДокумент.Метаданные();
					Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ДатаОплаты", МетаданныеРасчДокумента) Тогда
						ДатаДвижений = РасчетныйДокумент.ДатаОплаты;
					Иначе
						ДатаДвижений = РасчетныйДокумент.Дата;
					КонецЕсли;
					СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, ДатаДвижений);
					
					СуммаВторогоСобытияРегл = СуммаВторогоСобытия * СтруктураКурсаДокумента.Курс / СтруктураКурсаДокумента.Кратность;
					
					ПроводкаВтороеСобытие["Сумма"] = (СуммаВторогоСобытияРегл) * ?(Проводка.Сумма<0, -1, 1);
					Проводка			 ["Сумма"] = Проводка["Сумма"] - ПроводкаВтороеСобытие["Сумма"];
					
					//валютные суммы
					ПроводкаВтороеСобытие[ИмяВалютнойСуммы] = СуммаВторогоСобытия;
					Проводка			 [ИмяВалютнойСуммы] = Проводка[ИмяВалютнойСуммы] - ПроводкаВтороеСобытие[ИмяВалютнойСуммы];
					
					// налоговые суммы
					Если (ПроводкаВтороеСобытие["Сумма"] + Проводка["Сумма"]) <> 0 Тогда
						ПроводкаВтороеСобытие["СуммаНУДт"] = Проводка["СуммаНУДт"] * (ПроводкаВтороеСобытие["Сумма"] / (ПроводкаВтороеСобытие["Сумма"] + Проводка["Сумма"]));
						ПроводкаВтороеСобытие["СуммаНУКт"] = Проводка["СуммаНУКт"] * (ПроводкаВтороеСобытие["Сумма"] / (ПроводкаВтороеСобытие["Сумма"] + Проводка["Сумма"]));
					КонецЕсли;
					
				Иначе	
					ПроводкаВтороеСобытие["Сумма"] =  СуммаВторогоСобытия 				   * ?(Проводка.Сумма<0, -1, 1);
					Проводка			 ["Сумма"] = (СуммаПроводки - СуммаВторогоСобытия) * ?(Проводка.Сумма<0, -1, 1);
					
					// налоговые суммы
					ПроводкаВтороеСобытие["СуммаНУДт"] = Проводка["СуммаНУДт"] * СуммаВторогоСобытия / СуммаПроводки;
					ПроводкаВтороеСобытие["СуммаНУКт"] = Проводка["СуммаНУКт"] * СуммаВторогоСобытия / СуммаПроводки;
				
				КонецЕсли;
				
				// налоговые суммы										
				Проводка			 ["СуммаНУКт"] = Проводка["СуммаНУКт"] - ПроводкаВтороеСобытие["СуммаНУКт"];
				Проводка			 ["СуммаНУДт"] = Проводка["СуммаНУДт"] - ПроводкаВтороеСобытие["СуммаНУДт"];
			
				ПроводкаВтороеСобытие.Содержание = ПроводкаВтороеСобытие.Содержание + НСтр("ru=', второе событие';uk=', друга подія'");
				
			Иначе
				
				СчетПервогоСобытия = Проводка["Счет" + СуффиксСчета];
				
				// заменим счет и расчетный документ по НДС в проводке
				Проводка["Счет" + СуффиксСчета] = СчетВторогоСобытия;
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуффиксСчета],Проводка["Субконто" + СуффиксСчета],"ДокументыРасчетовСКонтрагентами", РасчетныйДокумент);
				
				Проводка.Содержание = Проводка.Содержание + НСтр("ru=', второе событие';uk=', друга подія'", Локализация.КодЯзыкаИнформационнойБазы());
				
				Если РасчетыВВалюте Тогда
					СуммаПроводкиВтороеСобытие 			= СуммаПроводки * КурсЗачетаАванса * ?(Проводка.Сумма<0, -1, 1);
					СуммаПервогоСобытияИзЗаРазницыКурсов= Проводка.Сумма - СуммаПроводкиВтороеСобытие;
					
					Проводка.Сумма = СуммаПроводкиВтороеСобытие;
					
					Если НЕ СуммаПервогоСобытияИзЗаРазницыКурсов = 0 Тогда
						ПроводкаПервоеСобытие = ДвиженияДокумента.Добавить(); 
						СкопироватьПроводкуРегистраБухгалтерии(ПроводкаПервоеСобытие, Проводка);
						
						ПроводкаПервоеСобытие["Счет" + СуффиксСчета] 	= СчетПервогоСобытия;
						ПроводкаПервоеСобытие["Сумма"] 					= СуммаПервогоСобытияИзЗаРазницыКурсов;
						ПроводкаПервоеСобытие["СуммаНУДт"]		 		= 0;
						ПроводкаПервоеСобытие["СуммаНУКт"] 				= 0;
						ПроводкаПервоеСобытие[ИмяВалютнойСуммы] 		= 0;
						
						ПроводкаПервоеСобытие.Содержание = ПроводкаПервоеСобытие.Содержание + НСтр("ru=', первое событие, корректировка НДС';uk=', перша подія, коригування ПДВ'");
					КонецЕсли;
					
					
					 
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЕсли;
	
	Если    СуммаВторогоСобытия <=0
		ИЛИ СуммаКСписанию > СуммаВторогоСобытия Тогда
		
		Проводка.Содержание = Проводка.Содержание + НСтр("ru=', первое событие';uk=', перша подія'", Локализация.КодЯзыкаИнформационнойБазы());

	КонецЕсли;

КонецПроцедуры

// разбивает проводку по НДС на две, заменяя расчетный документ.
// из таблицы ТаблицаПоПервомуСобытиюНДС
// процедура работает только если выполняются все следующие условия:
//		это платежный документ 
//		договоров с ведением взаиморасчетов по расчетным документам (НУ)
//		расчетный документ указан в платежном документе
//      договор с моментом определения обязательств по НДС "ПО ОПЛАТЕ" 
//		ведутся гривневые взаиморасчеты
//
Процедура РазбитьПроводкуПоНДСПоРасчетнымДокументам(ТаблицаПоПервомуСобытиюНДС, ДвиженияДокумента, Проводка,
											   		ДоговорКонтрагента, РасчетныйДокумент,
											   		СобытиеНДС, 
											   		СтавкаНДС, ДляХозяйственнойДеятельности = Неопределено, ВидДеятельностиНДС = Неопределено, Амортизируется = Неопределено) Экспорт
													
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураПоиска.Вставить("Сделка", 			   РасчетныйДокумент);
	СтруктураПоиска.Вставить("СтавкаНДС", 		   СтавкаНДС);
	СтруктураПоиска.Вставить("СобытиеНДС",	   	   СобытиеНДС);
	СтруктураПоиска.Вставить("ВозвратнаяТара",	   Ложь);
	
	Если НЕ ДляХозяйственнойДеятельности = Неопределено Тогда
		СтруктураПоиска.Вставить("ДляХозяйственнойДеятельности", ДляХозяйственнойДеятельности);	
	КонецЕсли;
	Если НЕ ВидДеятельностиНДС = Неопределено Тогда
		СтруктураПоиска.Вставить("ВидДеятельностиНДС", ВидДеятельностиНДС);	
	КонецЕсли;
	Если НЕ Амортизируется = Неопределено Тогда
		СтруктураПоиска.Вставить("Амортизируется", Амортизируется);	
	КонецЕсли;

	ИмяКолонкиСуммаНДС = "СуммаНДС";
	Если ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая Тогда
		ИмяКолонкиСуммаНДС = "СуммаНДСПропорционально";
	КонецЕсли;
	
	СтрокиВС = ТаблицаПоПервомуСобытиюНДС.НайтиСтроки(СтруктураПоиска);
	
	СуммаПроводки	= ?(Проводка.Сумма < 0, - Проводка.Сумма, Проводка.Сумма);
	
	СуммаВторогоСобытия = 0;
	СуммаКСписанию = СуммаПроводки;
	
	// "второе событие", это когда оплата по времени второй документ, то есть, по расчетному документу была ранее отгрузка
	СтрокиВС = ТаблицаПоПервомуСобытиюНДС.НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаВС Из СтрокиВС Цикл
		
		Если СуммаКСписанию <= 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если СтрокаВС[ИмяКолонкиСуммаНДС] <= 0 Тогда	
			Продолжить;
		КонецЕсли;
		СуммаСписания = Мин(СтрокаВС[ИмяКолонкиСуммаНДС], СуммаКСписанию);
		
		СуммаВторогоСобытия 			= СуммаВторогоСобытия + СуммаСписания;
		СтрокаВС[ИмяКолонкиСуммаНДС] 	= СтрокаВС[ИмяКолонкиСуммаНДС] - СуммаСписания;
		СуммаКСписанию 	  				= СуммаКСписанию - СуммаСписания;
		
	КонецЦикла; 
	
	Если СуммаВторогоСобытия > 0 Тогда
		
		Если СуммаПроводки > СуммаВторогоСобытия Тогда	
		
			// нужно разбить проводку на первое/второе событие ("второе", это когда оплата по времени второй документ, то есть, по расчетному документу была ранее отгрузка)
			ПроводкаВтороеСобытие = ДвиженияДокумента.Добавить(); 
			СкопироватьПроводкуРегистраБухгалтерии(ПроводкаВтороеСобытие, Проводка);
			
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаВтороеСобытие.СчетДт, ПроводкаВтороеСобытие.СубконтоДт, "ДокументыРасчетовСКонтрагентами", РасчетныйДокумент);
			БухгалтерскийУчет.УстановитьСубконто(ПроводкаВтороеСобытие.СчетКт, ПроводкаВтороеСобытие.СубконтоКт, "ДокументыРасчетовСКонтрагентами", РасчетныйДокумент);
			
			ПроводкаВтороеСобытие.Сумма =  СуммаВторогоСобытия 				    * ?(Проводка.Сумма<0, -1, 1);
			Проводка			 .Сумма = (СуммаПроводки - СуммаВторогоСобытия) * ?(Проводка.Сумма<0, -1, 1);
			
		Иначе
			
			// заменим расчетный документ по НДС в проводке
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ДокументыРасчетовСКонтрагентами", РасчетныйДокумент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыРасчетовСКонтрагентами", РасчетныйДокумент);
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

// возвращает сумму первого события по НДС: уменьшая сумму СуммаНДС на суммы второго события
// из таблицы ТаблицаПоВторомуСобытиюНал
//
// СуммаНДС всегда > 0 (и при возвратах)
//
Функция ПолучитьСуммуПроводкиПоНДС(ТаблицаПоВторомуСобытиюНал, СуммаНДС, 
									  СобытиеНДС,
									  ДоговорКонтрагента, 
									  Сделка,  РасчетныйДокумент = Неопределено,
									  ВозвратнаяТара, ДляХозяйственнойДеятельности = Неопределено, ВидДеятельностиНДС = Неопределено, Амортизируется = Неопределено) Экспорт
	
	СуммаВторогоСобытия = 0;
									  
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураПоиска.Вставить("Сделка", 			   Сделка);
	СтруктураПоиска.Вставить("СобытиеНДС",	   	   СобытиеНДС);
	СтруктураПоиска.Вставить("ВозвратнаяТара",	   ВозвратнаяТара);
	
	Если НЕ ДляХозяйственнойДеятельности = Неопределено Тогда
		СтруктураПоиска.Вставить("ДляХозяйственнойДеятельности", ДляХозяйственнойДеятельности);	
	КонецЕсли;
	Если НЕ ВидДеятельностиНДС = Неопределено Тогда
		СтруктураПоиска.Вставить("ВидДеятельностиНДС", ВидДеятельностиНДС);	
	КонецЕсли;
	Если НЕ Амортизируется = Неопределено Тогда
		СтруктураПоиска.Вставить("Амортизируется", Амортизируется);	
	КонецЕсли;
	СуммаКСписанию = СуммаНДС;
	
	ИмяКолонкиСуммаНДС = "СуммаНДС";
	Если ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая Тогда
		ИмяКолонкиСуммаНДС = "СуммаНДСПропорционально";
	КонецЕсли;
	
	СтрокиВС = ТаблицаПоВторомуСобытиюНал.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаВС Из СтрокиВС Цикл
		
		Если СуммаКСписанию <= 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если СтрокаВС[ИмяКолонкиСуммаНДС] <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаСписания = Мин(СтрокаВС[ИмяКолонкиСуммаНДС], СуммаКСписанию);		
		
		СуммаВторогоСобытия = СуммаВторогоСобытия + СуммаСписания;
		СтрокаВС[ИмяКолонкиСуммаНДС] = СтрокаВС[ИмяКолонкиСуммаНДС]   - СуммаСписания;
		
		СуммаКСписанию 	  	= СуммаКСписанию 	  - СуммаСписания;
		
	КонецЦикла; 
	
	Если  ДоговорКонтрагента.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам
		И НЕ РасчетныйДокументЯвляетсяСчетомНаОплату(Сделка)
		И СуммаКСписанию > 0
		И НЕ РасчетныйДокумент = Неопределено
		И НЕ РасчетныйДокумент.Пустая() Тогда
		
		// возможно имеется второе событие по расчетному документу
		СтруктураПоиска.Вставить("Сделка", РасчетныйДокумент);
		
		СтрокиВС = ТаблицаПоВторомуСобытиюНал.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаВС Из СтрокиВС Цикл
			
			Если СуммаКСписанию <= 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаВС[ИмяКолонкиСуммаНДС] <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаСписания = Мин(СтрокаВС[ИмяКолонкиСуммаНДС], СуммаКСписанию);		
			
			СуммаВторогоСобытия = СуммаВторогоСобытия + СуммаСписания;
			СтрокаВС[ИмяКолонкиСуммаНДС] = СтрокаВС[ИмяКолонкиСуммаНДС]   - СуммаСписания;
		    СуммаКСписанию 	  	= СуммаКСписанию 	  - СуммаСписания;
			
		КонецЦикла; 
		
	КонецЕсли;

	Возврат СуммаНДС - СуммаВторогоСобытия
		
КонецФункции

// Процедура формирует таблицу для платежных документов для формирования движений по налоговым регистрам
// и формирования проводок для упрощенного налогового учета
//
Функция ПодготовитьТаблицуОплатДляНалоговогоУчета(СтруктураШапкиДокумента) Экспорт

	Перем ВидОперации;

	СтруктураШапкиДокумента.Свойство("ВидОперации",ВидОперации);
                                      
	Ссылка       = СтруктураШапкиДокумента.Ссылка;
	ВидДокумента = СтруктураШапкиДокумента.ВидДокумента;
	
	ИмяТабличнойЧасти =?(ВидДокумента="АвансовыйОтчет","ОплатаПоставщикам","РасшифровкаПлатежа");
    	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	// В регистрах налогового учета суммы в валюте договора (для внешнеэкономических договоров) и гривни в противном случае.
	РассчитатьСуммуВВалютеРеглУчета = Ложь;
	Запрос.УстановитьПараметр("РассчитатьСуммуВВалютеРеглУчета",РассчитатьСуммуВВалютеРеглУчета);
	
	ВалютнаяСуммаВКолонкеВзаиморасчетов = Истина;
	Запрос.УстановитьПараметр("ВалютнаяСуммаВКолонкеВзаиморасчетов",ВалютнаяСуммаВКолонкеВзаиморасчетов);
	
	Запрос.УстановитьПараметр("НеоблагаемыйВНД",  Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность);
	
	ДатаДвижений = СтруктураШапкиДокумента.Дата;
	Если  СтруктураШапкиДокумента.Свойство("Оплачено") 
		И СтруктураШапкиДокумента.Свойство("ДатаОплаты") 
		И НЕ КонецДня(СтруктураШапкиДокумента.ДатаОплаты) = КонецДня(СтруктураШапкиДокумента.Дата) Тогда
				
		ДатаДвижений = КонецДня(СтруктураШапкиДокумента.ДатаОплаты);
				
	КонецЕсли; 
	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ВалютаДокумента,ДатаДвижений);
	Запрос.УстановитьПараметр("КурсДокумента",  СтруктураКурсаДокумента.Курс/СтруктураКурсаДокумента.Кратность);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПлатежей.ДоговорКонтрагента.Владелец КАК Контрагент,
	|	ТаблицаПлатежей.ДоговорКонтрагента,
	|	ТаблицаПлатежей.ДоговорКонтрагента.ВедениеВзаиморасчетовНУ КАК ВедениеВзаиморасчетовНУ,
	|	ТаблицаПлатежей.ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПокупкам КАК МоментОпределенияБазыНДСПоПокупкам,
	|	ТаблицаПлатежей.ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПродажам КАК МоментОпределенияБазыНДСПоПродажам,
	|	ТаблицаПлатежей.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ТаблицаПлатежей.ДоговорКонтрагента.СложныйНалоговыйУчет КАК СложныйНалоговыйУчет,
	|	ТаблицаПлатежей.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаПлатежей.КурсВзаиморасчетов,
	|	ТаблицаПлатежей.КратностьВзаиморасчетов,
	|	ТаблицаПлатежей.Сделка КАК Сделка,
	|	ТаблицаПлатежей.Сделка КАК РасчетныйДокумент,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &РассчитатьСуммуВВалютеРеглУчета = ИСТИНА
	|				ТОГДА ТаблицаПлатежей.СуммаВзаиморасчетов * &КурсДокумента
	|			ИНАЧЕ ТаблицаПлатежей.СуммаПлатежа
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаВзаиморасчетов,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &РассчитатьСуммуВВалютеРеглУчета = ИСТИНА
	|				ТОГДА ТаблицаПлатежей.СуммаНДС *  &КурсДокумента
	|			ИНАЧЕ ТаблицаПлатежей.СуммаНДС
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДС,
	|	ВЫРАЗИТЬ(ВЫБОР
	|	 		КОГДА &РассчитатьСуммуВВалютеРеглУчета = ИСТИНА
	|	 			ТОГДА ТаблицаПлатежей.СуммаНДСПропорциональноКредит *  &КурсДокумента
	|	 		ИНАЧЕ ТаблицаПлатежей.СуммаНДСПропорциональноКредит
	|	КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаНДСПропорционально,
	|	ТаблицаПлатежей.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаПлатежей.СчетУчетаНДС КАК СчетУчетаНДС,
	|	ТаблицаПлатежей.СчетУчетаНДСПодтвержденный КАК СчетУчетаНДСПодтвержденный,
	|	ТаблицаПлатежей.ЗаТару КАК ВозвратнаяТара,
	|	ТаблицаПлатежей.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ТаблицаПлатежей.Амортизируется КАК Амортизируется,
	|	ТаблицаПлатежей.НалоговоеНазначение.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаПлатежей.НалоговоеНазначение = &НеоблагаемыйВНД
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ДляХозяйственнойДеятельности
	|ИЗ
	|	Документ.ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа КАК ТаблицаПлатежей
	|ГДЕ
	|	ТаблицаПлатежей.Ссылка = &Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ПлатежноеПоручениеИсходящее.РасшифровкаПлатежа",Строка(ВидДокумента+"."+ИмяТабличнойЧасти));
	Если ВидДокумента="АвансовыйОтчет" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"СуммаПлатежа","Сумма");
	КонецЕсли; 
	
	РеестрПлатежей = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаПлатежа из РеестрПлатежей Цикл

		// "обнулим" реквизиты для расчетов по таре
		Если СтрокаПлатежа.ВозвратнаяТара Тогда
			СтрокаПлатежа.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС;
			СтрокаПлатежа.СуммаНДС  = 0;
			СтрокаПлатежа.СуммаНДСПропорционально  = 0;
			СтрокаПлатежа.Амортизируется  = Ложь;
		КонецЕсли;
		
		// установим тип значения для пустой сделки
		Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.Сделка) тогда
			СтрокаПлатежа.Сделка 			= Неопределено;
			СтрокаПлатежа.РасчетныйДокумент = Неопределено;
		КонецЕсли;
		
		// сделка по налоговому учету
		СтрокаПлатежа.Сделка = ОпределитьСделкуНалоговыйУчет(СтрокаПлатежа, Ссылка, СтрокаПлатежа.Сделка);
		
		// заполним реквизиты так, как это необходимо для налогового учета
		Если СтрокаПлатежа.СложныйНалоговыйУчет Тогда
			
			// очистим налоговые реквизиты
			СтрокаПлатежа.СтавкаНДС 					= Перечисления.СтавкиНДС.ПустаяСсылка();
			СтрокаПлатежа.ДляХозяйственнойДеятельности 	= Ложь;
			СтрокаПлатежа.ВидДеятельностиНДС 			= Перечисления.ВидыДеятельностиНДС.ПустаяСсылка();
			СтрокаПлатежа.Амортизируется	 			= Ложь;
			СтрокаПлатежа.СуммаНДС 						= 0;
			СтрокаПлатежа.СуммаНДСПропорционально  		= 0;
			СтрокаПлатежа.РасчетныйДокумент 			= Неопределено;
			СтрокаПлатежа.СчетУчетаНДСПодтвержденный	= ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			
		Иначе		
			
			Если НЕ СтруктураШапкиДокумента.ЕстьНДС Тогда
				// НДС не учитывается
				СтрокаПлатежа.СтавкаНДС 					= Перечисления.СтавкиНДС.ПустаяСсылка();
				СтрокаПлатежа.ДляХозяйственнойДеятельности 	= Ложь;
				СтрокаПлатежа.ВидДеятельностиНДС 			= Перечисления.ВидыДеятельностиНДС.ПустаяСсылка();
				СтрокаПлатежа.Амортизируется	 			= Ложь;
				СтрокаПлатежа.СуммаНДСПропорционально  		= 0;
				СтрокаПлатежа.СуммаНДС 						= 0;
			КонецЕсли;
			
			Если НЕ СтрокаПлатежа.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам Тогда
				// этот реквизит не нужен
				СтрокаПлатежа.РасчетныйДокумент 			= Неопределено;
			КонецЕсли;			
			
		КонецЕсли;		
		
	КонецЦикла;

	Возврат РеестрПлатежей;

КонецФункции

// Для документов оплаты формирует движеняи по налоговым регистрам, и проводки по планам счетов для 
// договоров с упрощенным налоговым учетом
//
Функция ДвиженияПоРегистрамНалоговогоУчетаПлатежныхДокументов(ДокументОбъект, СтруктураШапкиДокумента, РеестрПлатежей, Отказ=Ложь) Экспорт
	
	Перем ТаблицаПоВторомуСобытиюНал, ДатаДвижений;
	Перем ТаблицаПоПервомуСобытиюНДС; 
	
	МоментПоОплате = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате;
	
	НаборДвиженийПриобретений = ДокументОбъект.Движения.ПриобретенияНалоговыйУчет; 	
	НаборДвиженийПродаж       = ДокументОбъект.Движения.ПродажиНалоговыйУчет; 	

	Организация             = СтруктураШапкиДокумента.Организация;
		
	Если РеестрПлатежей.Количество() = 0 тогда
		//Расчеты отсутствуют
		Возврат Истина;
	КонецЕсли;
	
	НаправлениеДвижения = БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(СтруктураШапкиДокумента.ВидДокумента).Направление;
	ВидОперации = Неопределено;
	СтруктураШапкиДокумента.Свойство("ВидОперации", ВидОперации);
	РасчетыВозврат = БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(СтруктураШапкиДокумента.ВидДокумента,ВидОперации).РасчетыВозврат;
	
	ЭтоВозврат =    (РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат);
	ЭтоПродажа =    (НаправлениеДвижения = "Поступление" И НЕ ЭтоВозврат)
				ИЛИ (НаправлениеДвижения = "Выбытие"     И    ЭтоВозврат);
	
	ДатаДвижений = СтруктураШапкиДокумента.Дата;

	РеестрПлатежей.Колонки.Добавить("Событие");
	РеестрПлатежей.Колонки.Добавить("СобытиеНДС");
	Если ЭтоПродажа Тогда
	                                   
		Если РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
			Событие 	= Перечисления.СобытияПродажиНалоговыйУчет.ОплатаПокупателем;
			СобытиеНДС  = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация;
		Иначе
			Событие = Перечисления.СобытияПродажиНалоговыйУчет.ВозвратОплатыПокупателю;
			СобытиеНДС  = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
		КонецЕсли;
	
	Иначе
	
		Если РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
			Событие 	= Перечисления.СобытияПриобретенияНалоговыйУчет.ОплатаПоставщику;
			СобытиеНДС  = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление;
		Иначе
			Событие = Перечисления.СобытияПриобретенияНалоговыйУчет.ВозвратОплатыПоставщиком;
			СобытиеНДС  = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат;
		КонецЕсли;
	
	КонецЕсли; 
	РеестрПлатежей.ЗаполнитьЗначения(Событие, 	 "Событие");
	РеестрПлатежей.ЗаполнитьЗначения(СобытиеНДС, "СобытиеНДС");
	
	РеестрПлатежейКопия = РеестрПлатежей.Скопировать();                                                                                                                                                                                                            
	РеестрПлатежейКопия.Свернуть("СчетУчетаНДСПодтвержденный, СложныйНалоговыйУчет, ВедениеВзаиморасчетовНУ, ДоговорКонтрагента, Сделка, РасчетныйДокумент, СтавкаНДС, ВозвратнаяТара, ДляХозяйственнойДеятельности, ВидДеятельностиНДС, Амортизируется, Событие, МоментОпределенияБазыНДСПоПокупкам, МоментОпределенияБазыНДСПоПродажам", "СуммаВзаиморасчетов, СуммаНДС, СуммаНДСПропорционально");
	
	Для каждого СтрокаПлатежа Из РеестрПлатежейКопия Цикл
	
		Если СтрокаПлатежа.СложныйНалоговыйУчет = Ложь
		   И (РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты
			  ИЛИ НЕ  СтрокаПлатежа.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам) Тогда
			// этот реквизит не нужен
			СтрокаПлатежа.СчетУчетаНДСПодтвержденный	= ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;			
		
	КонецЦикла;  
	
	// выполним движения по регистрам налогового учета
	Если ЭтоПродажа Тогда
		  
		ТаблицаПродаж = РеестрПлатежейКопия.Скопировать();
		
		ТаблицаДвижений = НаборДвиженийПродаж.Выгрузить();
				
		ТаблицаДвижений.Очистить();
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПродаж, ТаблицаДвижений);
				
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
				
		Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
			НаборДвиженийПродаж.мПериод		 	 = ДатаДвижений;
			НаборДвиженийПродаж.мТаблицаДвижений = ТаблицаДвижений;

			НаборДвиженийПродаж.ВыполнитьПриход();
			НаборДвиженийПродаж.Записать();
		КонецЕсли;
				
	Иначе
		  
		ТаблицаПриобретений = РеестрПлатежейКопия.Скопировать();
		
		ТаблицаДвижений = НаборДвиженийПриобретений.Выгрузить();
		ТаблицаДвижений.Очистить();
		
		ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТаблицаПриобретений, ТаблицаДвижений);
				
		ТаблицаДвижений.ЗаполнитьЗначения(Организация, "Организация");
						
		Если НЕ Отказ И ТаблицаДвижений.Количество() > 0 Тогда
			
			НаборДвиженийПриобретений.мПериод 		   = ДатаДвижений;
			НаборДвиженийПриобретений.мТаблицаДвижений = ТаблицаДвижений;

			НаборДвиженийПриобретений.ВыполнитьПриход();
			НаборДвиженийПриобретений.Записать();
		КонецЕсли;
					
	КонецЕсли;
	
	// сформируем движения по "первому событию" для упрощенного налогового учета по налоговым регистрам                                                                                             
	ДвиженияПоРегистрамНалоговогоУчетаУпрощенныйНалоговыйУчет(ДокументОбъект, ТаблицаПоВторомуСобытиюНал, ДатаДвижений,,,,ТаблицаПоПервомуСобытиюНДС);
	
	
	// сформируем движения по "первому событию" для упрощенного налогового учета
	// по планам счетов 
	Для каждого СтрокаПлатежа из РеестрПлатежей Цикл
		
		СтруктураКурсаДокумента = Новый Структура("Курс, Кратность", СтрокаПлатежа.КурсВзаиморасчетов, СтрокаПлатежа.КратностьВзаиморасчетов);
		
		Если СтрокаПлатежа.СложныйНалоговыйУчет Тогда
		    // проводок не формируем
			Продолжить;	
		КонецЕсли;
		
		Если НЕ ЭтоПродажа И СтрокаПлатежа.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая Тогда
			СтрокаПлатежа.СуммаНДС = СтрокаПлатежа.СуммаНДСПропорционально;	
		КонецЕсли;
		
		// По НДС
		Если СтруктураШапкиДокумента.ЕстьНДС Тогда
			СуммаПроводки = ПолучитьСуммуПроводкиПоНДС(ТаблицаПоВторомуСобытиюНал, СтрокаПлатежа.СуммаНДС, 
													    СтрокаПлатежа.СобытиеНДС,
														СтрокаПлатежа.ДоговорКонтрагента,
														СтрокаПлатежа.Сделка,
														СтрокаПлатежа.РасчетныйДокумент,
														СтрокаПлатежа.ВозвратнаяТара, 
														?(НЕ ЭтоПродажа, СтрокаПлатежа.ДляХозяйственнойДеятельности, Неопределено), 
														?(НЕ ЭтоПродажа, СтрокаПлатежа.ВидДеятельностиНДС		   , Неопределено),
														?(НЕ ЭтоПродажа, СтрокаПлатежа.Амортизируется			   , Неопределено));
														
			// СуммаНДС в валюте договора, в случае продажи нерезидентам с НДС сумму нужно пересчитать
            Если СтруктураШапкиДокумента.ВалютаДокумента <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
				СуммаПроводки = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаПроводки, 
																			СтруктураШапкиДокумента.ВалютаДокумента, СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
																			СтруктураКурсаДокумента.Курс, 1, 
																			СтруктураКурсаДокумента.Кратность, 1);
			КонецЕсли;
			// для возвратов суммы отрицательные													
			Если ЭтоВозврат Тогда
				СуммаПроводки = - СуммаПроводки;
			КонецЕсли;													
			
			Если  СуммаПроводки <> 0 
				И (    СтрокаПлатежа.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.Облагаемая
				   ИЛИ СтрокаПлатежа.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.ПропорциональноОблагаемая
				   ИЛИ ЭтоПродажа) Тогда
				
				Проводка = ДокументОбъект.Движения.Хозрасчетный.Добавить();

				Проводка.Период                                 = ДатаДвижений;
				Проводка.Активность                             = Истина;
				Проводка.Организация                            = Организация;
				Проводка.Сумма                                  = СуммаПроводки;
				Проводка.Содержание                             = ?(ЭтоПродажа,НСтр("ru='НДС: налоговые обязательства';uk=""ПДВ: податкові зобов'язання""", Локализация.КодЯзыкаИнформационнойБазы()), НСтр("ru='НДС: налоговый кредит';uk='ПДВ: податковий кредит'", Локализация.КодЯзыкаИнформационнойБазы())) + ?(ЭтоВозврат, НСтр("ru=', (сторно) оплата';uk=', (сторно) оплата'", Локализация.КодЯзыкаИнформационнойБазы()), НСтр("ru=', оплата';uk=', оплата'", Локализация.КодЯзыкаИнформационнойБазы()));
				Проводка.НомерЖурнала                           = "";
					
				Проводка.СчетДт                           		= ?(ЭтоПродажа, СтрокаПлатежа.СчетУчетаНДСПодтвержденный, СтрокаПлатежа.СчетУчетаНДС);
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Контрагенты",					 СтрокаПлатежа.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Договоры",						 СтрокаПлатежа.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"ДокументыРасчетовСКонтрагентами",СтрокаПлатежа.Сделка);
				
				Проводка.СчетКт                           		= ?(ЭтоПродажа, СтрокаПлатежа.СчетУчетаНДС, СтрокаПлатежа.СчетУчетаНДСПодтвержденный);
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Контрагенты",					 СтрокаПлатежа.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"Договоры",						 СтрокаПлатежа.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт,Проводка.СубконтоКт,"ДокументыРасчетовСКонтрагентами",СтрокаПлатежа.Сделка);
				
				
				// для договоров с моментом начисления обязательств "по оплате" (продажа за бюджетные средства)
				// имеется проблема - расчетным документом является не документ, по которому возникло первое событие, а расчетный документ
				// который формировал отгрузку ранее
				// допущением является тот факт, что данный механизм не будет работать для валютных договоров (бюджета это автоматически не касается)
				Если  СтрокаПлатежа.ВедениеВзаиморасчетовНУ = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам
					И ЗначениеЗаполнено(СтрокаПлатежа.РасчетныйДокумент)
					И ((ЭтоПродажа И СтрокаПлатежа.МоментОпределенияБазыНДСПоПродажам = МоментПоОплате) ИЛИ (НЕ ЭтоПродажа И СтрокаПлатежа.МоментОпределенияБазыНДСПоПокупкам = МоментПоОплате))
					И СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
					   
					Если ЭтоПродажа Тогда
						Если ЭтоВозврат Тогда
							СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Возврат;
						Иначе	
							СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПродаж.Реализация; 	
						КонецЕсли;
					Иначе	
						Если ЭтоВозврат Тогда
							СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат;
						Иначе	
							СобытиеНДС = Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление; 	
						КонецЕсли;
					КонецЕсли;   
					   
					РазбитьПроводкуПоНДСПоРасчетнымДокументам(ТаблицаПоПервомуСобытиюНДС, ДокументОбъект.Движения.Хозрасчетный, Проводка, 
															  СтруктураШапкиДокумента.ДоговорКонтрагента, СтрокаПлатежа.РасчетныйДокумент, 
															  СобытиеНДС,
															  СтрокаПлатежа.СтавкаНДС,
															  ?(НЕ ЭтоПродажа, СтрокаПлатежа.ДляХозяйственнойДеятельности, Неопределено), 
 															  ?(НЕ ЭтоПродажа, СтрокаПлатежа.ВидДеятельностиНДС		     , Неопределено),
															  ?(НЕ ЭтоПродажа, СтрокаПлатежа.Амортизируется			     , Неопределено));
				КонецЕсли;
				
				
			КонецЕсли;		
		КонецЕсли;		
		
	КонецЦикла; 
	
КонецФункции

Функция УчестьСуммуАвансаДо01042011(СтруктураШапки, СуммаПроводки) Экспорт

	Если СуммаПроводки = 0 Тогда
		Возврат 0;	
	КонецЕсли;
	
	Если НЕ СтруктураШапки.Свойство("СуммаВДВРПоАвансуДо01042011") Тогда
		Возврат СуммаПроводки;
	КонецЕсли;
	
	Если СтруктураШапки.Свойство("ЕстьАвансДо01042011") Тогда
		Если НЕ СтруктураШапки.ЕстьАвансДо01042011 = Истина Тогда
			Возврат СуммаПроводки;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураШапки.СуммаВДВРПоАвансуДо01042011 <= 0 Тогда
		Возврат СуммаПроводки;
	КонецЕсли;	
	
	Аванс = МИН(СтруктураШапки.СуммаВДВРПоАвансуДо01042011, МАКС(СуммаПроводки, - СуммаПроводки));
	
	СтруктураШапки.СуммаВДВРПоАвансуДо01042011 = СтруктураШапки.СуммаВДВРПоАвансуДо01042011 - Аванс;
	
	Возврат  СуммаПроводки  - ?(СуммаПроводки < 0, -1, + 1) * Аванс;

КонецФункции // 

// процедура определяет аналитику налогового учета, которая будет в проводке (измерение НалоговоеНазначение по данной строке документа.
// аналитика может быть как "НДС-ная", так и относящаяся к налогу на прибыль. Определяется исходя из указанного в счета затрат. 
// В процедуру передается 
//    Строка - строка, содержит аналитику, Имя субконто (аналитика) задается в параметре ИмяСубконто
//	  СчетЗатрат - счет затрат
//	  ХарактерЗатрат - определяется по СчетуЗатрат (если не был передан в процедуру)
//	  НалоговаяАналитикаВПроводке - аналитика, которая будет фигурировать в проводке в качестве измерения НалоговоеНазначение
//    ПризнакАмортизируется - устанавливается в Истина, если характер затрат = "Строительство"
//	  НалоговоеНазначениеНДС - налоговое назаначение (НДС), которое относится к данной строке затрат
//	  НалоговоеНазначениеПрибыль - налоговое назаначение доходов и затрат, которое относится к данной строке затрат
//    ИмяСубконто - по умлочанию = "Субконто".
Процедура ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(
	Строка, 
	СчетЗатрат, 
	ХарактерЗатрат = Неопределено,
	НалоговаяАналитикаВПроводке = Неопределено, 
	ПризнакАмортизируется = Ложь, 
	НалоговоеНазначениеНДС = Неопределено, 
	НалоговоеНазначениеПрибыль = Неопределено, 
	ИмяСубконто = "Субконто", 
	Дата = Неопределено,
	ХарактерЗатратРБП = Неопределено,
	ЕстьУчетНДС = Истина
	) Экспорт
	
	//Если ХарактерЗатрат = Неопределено Тогда                                                                   
	Если НЕ ЗначениеЗаполнено(ХарактерЗатрат) Тогда                                                                
		ХарактерЗатрат = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатрат, Неопределено, Дата);
	КонецЕсли;
	
	ТипОбъектСтроительста = Тип("СправочникСсылка.ОбъектыСтроительства");
	ТипНМА                = Тип("СправочникСсылка.НематериальныеАктивы");
	ТипНГ                 = Тип("СправочникСсылка.НоменклатурныеГруппы");
	ТипРБП                = Тип("СправочникСсылка.РасходыБудущихПериодов");

	ПризнакАмортизируется = (ХарактерЗатрат = "Строительство");
	
	// в реквизите НалоговаяАналитика для незатратных счетов будем указывать налоговое назначение по НДС из строки документа
	// из соответствующих реквизитов аналитики                                                        
	// для производтсва - из номенклатурной группы, 
	// для 15-го счета  - из объекта строительства, 
	// для ТЗР это будет НалНазначение по НДС
	// для РБП - в зависимости от счета затрат, указанного в нем (см. выше)
	
	
	Если ХарактерЗатрат <> "Затраты" И НЕ ЕстьУчетНДС Тогда
		
		НалоговаяАналитикаВПроводке = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
		
	ИначеЕсли ХарактерЗатрат = "Производство" Тогда
		
		МожноОпределитьНалоговоеНазначение = Ложь;
		
		Для Н = 1 По 3 Цикл
			ЗначениеСубконто = Строка[ИмяСубконто + Н];
			Если ТипЗнч(ЗначениеСубконто) = ТипНГ Тогда
				МожноОпределитьНалоговоеНазначение = Истина;
				Прервать
			КонецЕсли;
		КонецЦикла;
		
		Если МожноОпределитьНалоговоеНазначение Тогда
			НалоговаяАналитикаВПроводке = Строка[ИмяСубконто +Н].НалоговоеНазначениеВПроизводстве;
		Иначе	
		    НалоговаяАналитикаВПроводке = Неопределено;
		КонецЕсли;
	ИначеЕсли ХарактерЗатрат = "ОПЗ" Тогда
		// распределяемый в НУ ОПЗ учитывают по налоговому назначению НДС (в отличие от затрат периода)
		НалоговаяАналитикаВПроводке = НалоговоеНазначениеНДС;	
		
	ИначеЕсли ХарактерЗатрат = "Строительство" Тогда
		
		МожноОпределитьНалоговоеНазначение = Ложь;
		
		Для Н = 1 По 3 Цикл
		
			ЗначениеСубконто = Строка[ИмяСубконто + Н];
			
			Если    ТипЗнч(ЗначениеСубконто) = ТипОбъектСтроительста
				ИЛИ ТипЗнч(ЗначениеСубконто) = ТипНМА Тогда
				МожноОпределитьНалоговоеНазначение = Истина;
				Прервать
			КонецЕсли;
		
		КонецЦикла;
		
		Если МожноОпределитьНалоговоеНазначение Тогда
			НалоговаяАналитикаВПроводке = Строка[ИмяСубконто +Н].НалоговоеНазначение;
		Иначе	
		    НалоговаяАналитикаВПроводке = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ХарактерЗатрат = "ТЗР" Тогда
		
		// для ТЗР приходование идет в разрезе указанного налогового назначения (по НДС)
		НалоговаяАналитикаВПроводке = НалоговоеНазначениеНДС;
		
	ИначеЕсли ХарактерЗатрат = "РБП" Тогда
		
		МожноОпределитьНалоговоеНазначение = Ложь;
		
		Для Н = 1 По 3 Цикл
		
			ЗначениеСубконто = Строка[ИмяСубконто + Н];
			
			Если    ТипЗнч(ЗначениеСубконто) = ТипРБП Тогда
				МожноОпределитьНалоговоеНазначение = Истина;
				Прервать
			КонецЕсли;
		
		КонецЦикла;
		
		Если МожноОпределитьНалоговоеНазначение Тогда
			ХарактерЗатратРБП = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(Строка[ИмяСубконто +Н].СчетБУ, Неопределено, Дата);
			
			Если    ХарактерЗатратРБП = "Производство"
				ИЛИ ХарактерЗатратРБП = "Строительство"
				ИЛИ ХарактерЗатратРБП = "ОПЗ"
				Тогда
				// налоговое назначение по НДС - из аналитики затрат
				НалоговаяАналитикаВПроводке = Строка[ИмяСубконто +Н].НалоговоеНазначение;
			Иначе
				// налоговое назначение по НДС из документа
				НалоговаяАналитикаВПроводке = НалоговоеНазначениеНДС;	
			КонецЕсли;

		Иначе	
		    НалоговаяАналитикаВПроводке = Неопределено;
		КонецЕсли;
		
	ИначеЕсли ХарактерЗатрат = "Затраты" Тогда
		
		НалоговаяАналитикаВПроводке = НалоговоеНазначениеПрибыль;
		
	Иначе
		
		НалоговаяАналитикаВПроводке = Неопределено;
		
	КонецЕсли;

КонецПроцедуры

// функция возвращает фиксированную структуру. В ее элементах СуммаВсехОпераций и СуммаОблагаемыхОпераций 
// находятся суммы всех операций поставки по облагаемым НДС операциям и всем операциям.
// данные будут получены из регистра Декларации по НДС (регистра НДСНалоговыеОбязательства) с учетом всех корректировок
// за указанный период.
Функция ПолучитьСуммыОблагаемыхПоставокПоНДС(Организация, НачПериода, КонПериода, СпецРежимНалогообложения = 0) Экспорт

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачПериода",  НачПериода);
	Запрос.УстановитьПараметр("КонПериода",  КонПериода);
	
	МассивВсеОперации = Новый Массив();
	МассивОблагаемыеОперации = Новый Массив();
	
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке20);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке20ПоставкаОФ);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке0Экспорт);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОПоСтавке0Другие);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОИзменениеСтоимости);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОКорректировкаНецелевоеИсп);
	// из неиспользуемых в 2011 году
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОКорректировкаСамостОшибки);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОКорректировкаПрочее);
	МассивОблагаемыеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОИмпортВексель);
	
	Для каждого ОблОперация Из МассивОблагаемыеОперации Цикл
		МассивВсеОперации.Добавить(ОблОперация);
	КонецЦикла;
	МассивВсеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОНеОбъектНалог);
	МассивВсеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НОУслугиВнеУкраины);
	МассивВсеОперации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НДС_НООсвобожден);
	
	Запрос.УстановитьПараметр("МассивВсеОперации", МассивВсеОперации);
	Запрос.УстановитьПараметр("МассивОблагаемыеОперации", МассивОблагаемыеОперации);
	
    Ставка0ИЛИ20 = Новый Массив();
	Ставка0ИЛИ20.Добавить(Перечисления.СтавкиНДС.НДС20);        
	Ставка0ИЛИ20.Добавить(Перечисления.СтавкиНДС.СпецСт8);  // ИНАГРО
	Ставка0ИЛИ20.Добавить(Перечисления.СтавкиНДС.НДС0);
	Ставка0ИЛИ20.Добавить(Перечисления.СтавкиНДС.НДС7);
	Ставка0ИЛИ20.Добавить(Перечисления.СтавкиНДС.НДС14);
	Запрос.УстановитьПараметр("Ставка0ИЛИ20", Ставка0ИЛИ20);
	
	Запрос.УстановитьПараметр("СпецРежимНалогообложения", СпецРежимНалогообложения);
	
	УсловнаяПродажа = Новый Массив;
	УсловнаяПродажа.Добавить(Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа);
	УсловнаяПродажа.Добавить(Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС);
	УсловнаяПродажа.Добавить(Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат);
	Запрос.УстановитьПараметр("УсловнаяПродажа", УсловнаяПродажа);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(СУММА(НДСНалоговыеОбязательстваОбороты.БазаНДСОборот), 0) КАК СуммаВсехОпераций,
	               |	ЕСТЬNULL(СУММА(ВЫБОР
	               |				КОГДА НДСНалоговыеОбязательстваОбороты.СтатьяДекларацииНДСНалоговыеОбязательства В (&МассивОблагаемыеОперации)
	               |						И НДСНалоговыеОбязательстваОбороты.СтавкаНДС В (&Ставка0ИЛИ20)
	               |					ТОГДА НДСНалоговыеОбязательстваОбороты.БазаНДСОборот
	               |				ИНАЧЕ 0
	               |			КОНЕЦ), 0) КАК СуммаОблагаемыхОпераций
	               |ИЗ
	               |	РегистрНакопления.НДСНалоговыеОбязательства.Обороты(
	               |			&НачПериода,
	               |			&КонПериода,
	               |			Регистратор,
	               |			Организация = &Организация
	               |				И СтатьяДекларацииНДСНалоговыеОбязательства В (&МассивВсеОперации)) КАК НДСНалоговыеОбязательстваОбороты
				   | ГДЕ 
				   //|	ВЫБОР КОГДА ЕстьNULL(Регистратор.ВключаетсяВУточняющийРасчет, Ложь) Тогда
				   //|		Регистратор.УточняемыйПериод МЕЖДУ &НачПериода И &КонПериода
				   //|	ИНАЧЕ
				   //|		ИСТИНА
				   //|	КОНЕЦ
				   |	НЕ Регистратор.ВидОперации В (&УсловнаяПродажа) ИЛИ Период < ДатаВремя(2015,07,01)
				   |	И ЕстьNULL(Регистратор.СпецРежимНалогообложения, 0) = &СпецРежимНалогообложения
				   |";          
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПродажНДС = Новый Структура();
	СтруктураПродажНДС.Вставить("СуммаОблагаемыхОпераций", 0);
	СтруктураПродажНДС.Вставить("СуммаВсехОпераций", 0);
	
	Если Выборка.Следующий() Тогда
		
		СтруктураПродажНДС.СуммаОблагаемыхОпераций = Выборка.СуммаОблагаемыхОпераций;
		СтруктураПродажНДС.СуммаВсехОпераций 	   = Выборка.СуммаВсехОпераций;
	
	КонецЕсли;
	
    Возврат  СтруктураПродажНДС;
	
КонецФункции


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ВАРИАНТАМИ ОТЧЕТОВ

// Определяет разделы, в которых доступна панель отчетов.
//
// Параметры:
//   Разделы (Массив) из (ОбъектМетаданных)
//
// Описание:
//   В Разделы необходимо добавить метаданные подсистем тех разделов,
//   в которых размещены команды вызова панелей отчетов.
//
// Например:
//	Разделы.Добавить(Метаданные.Подсистемы.ИмяПодсистемы);
//
Процедура ОпределитьРазделыСВариантамиОтчетов(Разделы) Экспорт
	
	Разделы.Добавить(Метаданные.Подсистемы.Руководителю, НСтр("ru='Отчеты для руководителя';uk='Звіти для керівника'"));
	Разделы.Добавить(Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты, НСтр("ru='Справки-расчеты';uk='Довідки-розрахунки'"));
	

КонецПроцедуры

// Процедура заполняет список значений с ключами отчетов, которые поддерживаются подсистемой
//
Процедура СписокОтчетовПоддерживаемыхПодсистемой(СписокОтчетов) Экспорт
	
	СписокОтчетов.Добавить("Отчет.СправкаРасчетСписаниеРБП");
	СписокОтчетов.Добавить("Отчет.СправкаРасчетКалькуляцияСебестоимости");
	СписокОтчетов.Добавить("Отчет.СправкаРасчетСебестоимостиПродукцииИУслуг");
	СписокОтчетов.Добавить("Отчет.СправкаРасчетРаспределенияКосвенныхРасходов");
	СписокОтчетов.Добавить("Отчет.СправкаРасчетПереоценкаВалютныхСредств");
	
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ВАРИАНТАМИ ОТЧЕТОВ

// Устанавливает префикс источника подписки в соответствии с префиксом информационной базы и префиксом организации.
// Источник подписки должен содержать
// обязательный реквизит шапки "Организация", тип: "СправочникСсылка.Организации"
//
// Параметры:
//  Источник - Источник события подписки.
//             Любой объект из множества [Справочник, Документ, План видов характеристик, Бизнес процесс, Задача]
// СтандартнаяОбработка - Булево - флаг стандартной обработки подписки
// Префикс - Строка - префикс объекта, который нужно изменить
//
Процедура УстановитьПрефиксИнформационнойБазыИОрганизации(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	НастройкаНумерации	= НалоговыйУчетПовтИсп.НастройкаНумерацииНалоговыхДокументов(Источник.Организация, НачалоМесяца(Источник.Дата));

	ПрефиксНалоговых = "";
	
	Если НастройкаНумерации.ВестиРаздельнуюНумерациюНалоговыхДокументовПоНеНДСОперациям = Истина
		И (    Источник.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.НеНДСОперации 
	       ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииВозврат 
	       ИЛИ Источник.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииКорректировка) Тогда
	   ПрефиксНалоговых = ПрефиксНалоговых + "Т";//технологические (нераспечатываемые) документы
	   
   КонецЕсли;		
	
	Если НастройкаНумерации.ВестиРаздельнуюНумерациюНалоговыхДокументов = Истина Тогда
		
		// разделяем префиксом Налоговые от Приложений
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.НалоговаяНакладная") Тогда
			ПрефиксНалоговых = ПрефиксНалоговых + "Н";
		Иначе
			ПрефиксНалоговых = ПрефиксНалоговых + "П";
		КонецЕсли;
		
	КонецЕсли;
	
	Если НастройкаНумерации.ВестиМесячнуюНумерациюНалоговыхДокументов = Истина
		Или (НастройкаНумерации.ВестиДневнуюНумерациюНалоговыхДокументов = Истина И Источник.Дата >= '2015-01-01') Тогда
		// даже в случае дневной нумерации префикс будет содержать как номер месяца так и номер дня в первых двух позициях РЕАЛЬНОГО номера
		// таким образом, при дневной нумерации номер будет в виде ..Ян..Д05000123 
		//    - Ян префикс месяца, Д05 - номер дня в месяце, 123 - номер налоговой внутри дня
	    // разделяем префиксом по месяцам
		ПрефиксНалоговых = ПрефиксНалоговых + ПолучитьМесячныйПрефиксНалоговыхДокументов(Источник.Дата);
	КонецЕсли;
	
	Если НастройкаНумерации.ВестиРаздельнуюНумерациюНалоговыхДокументовПоСпецРежимам = Истина Тогда
		
		// разделяем префиксом Налоговые от Приложений
		СпецРежим = Источник.СпецРежимНалогообложения;
		
		Если СпецРежим = 0 Тогда
			ПрефиксНалоговых = ПрефиксНалоговых + "";
		ИначеЕсли СпецРежим = 2 Тогда
			ПрефиксНалоговых = ПрефиксНалоговых + "U";
		ИначеЕсли СпецРежим = 3 Тогда
			ПрефиксНалоговых = ПрефиксНалоговых + "V";
		ИначеЕсли СпецРежим = 4 Тогда
			ПрефиксНалоговых = ПрефиксНалоговых + "W";
		КонецЕсли;
		
	КонецЕсли;

	Если НастройкаНумерации.ВестиНумерациюНалоговыхДокументовБезУчетаОбособленныхПодразделений = Ложь 
		И Источник.Дата < '2016-04-01' Тогда
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.НалоговаяНакладная") Тогда
			ОбособленноеПодразделение = Источник.ОбособленноеПодразделение;
		Иначе
			ОбособленноеПодразделение = Источник.НалоговаяНакладная.ОбособленноеПодразделение;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОбособленноеПодразделение.Префикс) Тогда
			ПрефиксОП = СокрЛП(ОбособленноеПодразделение.Префикс);
			ПреобразоватьЦифрыВБуквы(ПрефиксОП);
			
			ПрефиксНалоговых = ПрефиксНалоговых + ПрефиксОП;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкаНумерации.ВестиДневнуюНумерациюНалоговыхДокументов = Истина
		И Источник.Дата >= '2015-01-01'Тогда
		
		// добавляем префикс дня - "Д" + порядковый номер дня.
		ПрефиксНалоговых = ПрефиксНалоговых + ПолучитьДневнойПрефиксНалоговыхДокументов(Источник.Дата);
		
	КонецЕсли;
	Если СтрДлина(ПрефиксНалоговых) < 5 Тогда
		ПрефиксНалоговых = Лев(ПрефиксНалоговых + "00000000", 5);
	КонецЕсли;
	
	Префикс = СОКРП(Префикс) + ПрефиксНалоговых;	
	
	ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации(Источник, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры

Функция ПолучитьМесячныйПрефиксНалоговыхДокументов(Дата) Экспорт

	НомерМесяца = Месяц(Дата);
	Индекс = НомерМесяца*3 - 2;
	
	Возврат Сред("Ян|Фв|Мр|Ап|Ма|Ин|Ил|Ав|Сн|Ок|Но|Дк", Индекс, 2);	

КонецФункции

Процедура ПроверитьНомерНалоговогоДокумента(Документ, ТипДокумента = "НалоговаяНакладная") Экспорт
	
	// поддерживаем особый порядок нумерации налоговых накладных
	// при изменении даты документа возможно потребуется изменение=очистка номера
	
	Если НЕ ЗначениеЗаполнено(Документ.Ссылка) Тогда
		// это новый документ, номер еще не присвоен или задан вручную
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Документ.Номер) Тогда
	    Возврат;
	КонецЕсли;
	
	ЗапросСтарыеДанные = Новый Запрос();
	ЗапросСтарыеДанные.Текст = "ВЫБРАТЬ
	               |	НалоговыйДокумент.Дата,
				   |	НалоговыйДокумент.ВидОперации,
				   |	НалоговыйДокумент.СпецРежимНалогообложения,
				   |	НалоговыйДокумент.ОбособленноеПодразделение КАК Филиал,
				   |	НалоговыйДокумент.Организация
	               |ИЗ
	               |	Документ.НалоговаяНакладная КАК НалоговыйДокумент
	               |ГДЕ
	               |	НалоговыйДокумент.Ссылка = &Ссылка";
	ЗапросСтарыеДанные.УстановитьПараметр("Ссылка",    Документ.Ссылка);
	
	Если НЕ ТипДокумента = "НалоговаяНакладная" Тогда
		ЗапросСтарыеДанные.Текст = СтрЗаменить(ЗапросСтарыеДанные.Текст,"Документ.НалоговаяНакладная", "Документ.Приложение2КНалоговойНакладной");
		ЗапросСтарыеДанные.Текст = СтрЗаменить(ЗапросСтарыеДанные.Текст,"НалоговыйДокумент.ОбособленноеПодразделение", "ЕстьNULL(НалоговыйДокумент.НалоговаяНакладная.ОбособленноеПодразделение, ЗНАЧЕНИЕ(Справочник.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка))");
	КонецЕсли;
	
	СтарыеДанные = ЗапросСтарыеДанные.Выполнить().Выбрать();
	СтарыеДанные.Следующий();
	
	СтараяУчетнаяПолитика = НалоговыйУчетПовтИсп.НастройкаНумерацииНалоговыхДокументов(СтарыеДанные.Организация, НачалоМесяца(СтарыеДанные.Дата));
	НоваяУчетнаяПолитика  = НалоговыйУчетПовтИсп.НастройкаНумерацииНалоговыхДокументов(Документ.Организация, НачалоМесяца(Документ.Дата));
				   
	Если    СтараяУчетнаяПолитика.ВестиРаздельнуюНумерациюНалоговыхДокументов	<> НоваяУчетнаяПолитика.ВестиРаздельнуюНумерациюНалоговыхДокументов 
		ИЛИ СтараяУчетнаяПолитика.ВестиДневнуюНумерациюНалоговыхДокументов    	<> НоваяУчетнаяПолитика.ВестиДневнуюНумерациюНалоговыхДокументов
		ИЛИ СтараяУчетнаяПолитика.ВестиМесячнуюНумерациюНалоговыхДокументов    	<> НоваяУчетнаяПолитика.ВестиМесячнуюНумерациюНалоговыхДокументов  Тогда
	
	    Документ.Номер = "";
		
	ИначеЕсли НоваяУчетнаяПолитика.ВестиМесячнуюНумерациюНалоговыхДокументов 
		И НачалоМесяца(СтарыеДанные.Дата) <> НачалоМесяца(Документ.Дата) Тогда
		
		Документ.Номер = "";
		
	ИначеЕсли НоваяУчетнаяПолитика.ВестиДневнуюНумерациюНалоговыхДокументов 
		И НачалоДня(СтарыеДанные.Дата) <> НачалоДня(Документ.Дата) Тогда
		
		Документ.Номер = "";
		
	КонецЕсли;
	
	Если НЕ СтарыеДанные.ВидОперации = Документ.ВидОперации
		  И (   (СтарыеДанные.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.НеНДСОперации ИЛИ СтарыеДанные.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииВозврат ИЛИ СтарыеДанные.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииКорректировка)
			 ИЛИ(Документ.ВидОперации = Перечисления.ВидыОперацийНалоговаяНакладная.НеНДСОперации ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииВозврат ИЛИ Документ.ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.НеНДСОперацииКорректировка))
		  И (     НоваяУчетнаяПолитика.ВестиРаздельнуюНумерациюНалоговыхДокументовПоНеНДСОперациям = Истина
		      ИЛИ СтараяУчетнаяПолитика.ВестиРаздельнуюНумерациюНалоговыхДокументовПоНеНДСОперациям = Истина) Тогда
		   
		Документ.Номер = "";		   
			
	КонецЕсли;
	
	Если НЕ СтарыеДанные.СпецРежимНалогообложения = Документ.СпецРежимНалогообложения
	   И (НоваяУчетнаяПолитика.ВестиРаздельнуюНумерациюНалоговыхДокументовПоСпецРежимам = Истина
	 ИЛИ СтараяУчетнаяПолитика.ВестиРаздельнуюНумерациюНалоговыхДокументовПоСпецРежимам = Истина) Тогда
	
		Документ.Номер = "";
	
	КонецЕсли;
	
	Если ТипДокумента = "НалоговаяНакладная" Тогда
		ТекФилиал = Документ.ОбособленноеПодразделение;
	Иначе
		ТекФилиал = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.НалоговаяНакладная, "ОбособленноеПодразделение");
	КонецЕсли;
	
	Если НЕ СтарыеДанные.Филиал = ТекФилиал
		И Документ.Дата < '2016-04-01'
	   И (НоваяУчетнаяПолитика.ВестиНумерациюНалоговыхДокументовБезУчетаОбособленныхПодразделений = Ложь
	 ИЛИ СтараяУчетнаяПолитика.ВестиНумерациюНалоговыхДокументовБезУчетаОбособленныхПодразделений = Ложь) Тогда
	
		Документ.Номер = "";
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПреобразоватьЦифрыВБуквы(Текст)

	Текст = СтрЗаменить(Текст,"0","а");
	Текст = СтрЗаменить(Текст,"1","б");
	Текст = СтрЗаменить(Текст,"2","в");
	Текст = СтрЗаменить(Текст,"3","г");
	Текст = СтрЗаменить(Текст,"4","д");
	Текст = СтрЗаменить(Текст,"5","е");
	Текст = СтрЗаменить(Текст,"6","ё");
	Текст = СтрЗаменить(Текст,"7","ж");
	Текст = СтрЗаменить(Текст,"8","з");
	Текст = СтрЗаменить(Текст,"9","и");

КонецПроцедуры

Функция ПолучитьДневнойПрефиксНалоговыхДокументов(Дата)
	
	// номер дня с лидирующим нулем
	НомерДня = Формат(День(Дата), "ЧЦ=2; ЧВН=");
	ПреобразоватьЦифрыВБуквы(НомерДня);
	
	Возврат "Д" + НомерДня;	
	
КонецФункции
