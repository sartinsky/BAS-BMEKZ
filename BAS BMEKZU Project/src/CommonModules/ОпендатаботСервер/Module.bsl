
#Область ОпендатаБот

Функция ПолучитьКлючАПИ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОпендатаботНастройки.КлючАПИ КАК КлючАПИ
	               |ИЗ
	               |	РегистрСведений.ОпендатаботНастройки КАК ОпендатаботНастройки";
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Результат = "";
	Если Выборка.Следующий() Тогда
		Результат = Выборка.КлючАПИ;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Процедура УстановитьКлючАПИ(КлючАПИ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписиОпендатаботНастройки = РегистрыСведений.ОпендатаботНастройки.СоздатьМенеджерЗаписи();
	МенеджерЗаписиОпендатаботНастройки.КлючАПИ = КлючАПИ;
	МенеджерЗаписиОпендатаботНастройки.Записать(Истина);
	
КонецПроцедуры


Функция СоздатьСтруктуруОтвета()
	
	СтруктураОтвета = Новый Структура();
	СтруктураОтвета.Вставить("Ошибка", Истина);
	СтруктураОтвета.Вставить("ТекстОшибки", НСтр("ru='Неизвесная ошибка.';uk='Невідома помилка'"));
	СтруктураОтвета.Вставить("Дата");
	СтруктураОтвета.Вставить("ТекстJSON", "");
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПолучитьРезультатПоСтрокеПоиска(СтрокаПоиска, ОбновлятьКэш = Ложь, Регион = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	СтруктураОтвета = СоздатьСтруктуруОтвета();
	
	СуществуетОпендатаботКэш = Ложь;
	Если НЕ Метаданные.РегистрыСведений.Найти("ОпендатаботКэш") = Неопределено Тогда
		СуществуетОпендатаботКэш = Истина;
	КонецЕсли;
	
	ОтветПолученИзКэша = Ложь;
	Если СуществуетОпендатаботКэш И НЕ ОбновлятьКэш Тогда 
		
		ЗапросККэшу = Новый Запрос;
		ЗапросККэшу.Текст = "ВЫБРАТЬ
		|	ОпендатаботКэш.СтрокаПоиска КАК СтрокаПоиска,
		|	ОпендатаботКэш.Дата КАК Дата,
		|	ОпендатаботКэш.Ответ КАК Ответ
		|ИЗ
		|	РегистрСведений.ОпендатаботКэш КАК ОпендатаботКэш
		|ГДЕ
		|	ОпендатаботКэш.СтрокаПоиска = &СтрокаПоиска";
		
		ЗапросККэшу.Параметры.Вставить("СтрокаПоиска", СтрокаПоиска); 
		Выборка = ЗапросККэшу.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОтветПолученИзКэша = Истина;
			
			СтруктураОтвета.Ошибка = Ложь;
			СтруктураОтвета.Дата =  Выборка.Дата;
			СтруктураОтвета.ТекстJSON =  Выборка.Ответ;
		КонецЕсли;
	КонецЕсли;
	
	
	Если Не ОтветПолученИзКэша Тогда 
		
		СтрокаПоиска = СокрЛП(СтрокаПоиска);
		Ключ = "&apiKey="+ПолучитьКлючАПИ();
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СокрЛП(СтрокаПоиска)) Тогда
			Если СтрДлина(СтрокаПоиска) = 8 Тогда
				Ресурс = "/api/v3/full-company/"+СтрокаПоиска;
			ИначеЕсли СтрДлина(СтрокаПоиска) = 10 Тогда
				Ресурс = "/api/v3/fop/"+СтрокаПоиска;
			КонецЕсли
		Иначе
			Если Не ПустаяСтрока(СтрокаПоиска) Тогда
				//Если Не Регион = Неопределено Тогда
				//Отбор по региону использовать не будем 19.03.21
				//СтрокаПоиска = Ключ + "&pib=" + СтрокаПоиска +  "&region_id=" + Регион;
				//КонецЕсли;
				ПодстрокаРесурса = Ключ + "&pib=" + СтрокаПоиска;
				Ресурс = "/api/v3/person?" + ПодстрокаРесурса;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли; 
		
		Ресурс = Ресурс + "&apiKey="+ПолучитьКлючАПИ();
		СтруктураОтвета = ПолучитьJSONНаСервере(СтруктураОтвета,Ресурс);
		
		Если СуществуетОпендатаботКэш И Не СтруктураОтвета.Ошибка Тогда
			
			// записать в Кэш
			НаборЗаписей = РегистрыСведений.ОпендатаботКэш.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СтрокаПоиска.Установить(СтрокаПоиска);
			
			ЗаписьКэш = НаборЗаписей.Добавить();
			ЗаписьКэш.СтрокаПоиска =  СтрокаПоиска;
			ЗаписьКэш.Дата = СтруктураОтвета.Дата;
			ЗаписьКэш.Ответ = СтруктураОтвета.ТекстJSON;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
	КонецЕсли;
	
	
	СтруктураВозврата = ПрочитатьJSONНаСервере(СтруктураОтвета);
	
	Возврат СтруктураВозврата; 
	
КонецФункции

Функция ПолучитьРезультатПроверкиКлюча(Ключ) Экспорт
	
	СтруктураОтвета = СоздатьСтруктуруОтвета();
	
	Ресурс = "/api/v2/statistics?apiKey="+СокрЛП(Ключ);
	СтруктураОтвета = ПолучитьJSONНаСервере(СтруктураОтвета,Ресурс);
	СтруктураВозврата = ПрочитатьJSONНаСервере(СтруктураОтвета);
	
	СтруктураИнформацииОКлюче = Новый Структура;
	СтруктураИнформацииОКлюче.Вставить("ДатаАктуальностиКлюча",);
	СтруктураИнформацииОКлюче.Вставить("Использовано",0);
	СтруктураИнформацииОКлюче.Вставить("Лимит",0);
	СтруктураИнформацииОКлюче.Вставить("ИнформацияОКлюче",НСтр("ru='Не корректный пинкод сервиса ';uk='Не коректний пінкод сервісу '"));
	СтруктураИнформацииОКлюче.Вставить("Ошибка",Ложь);
	
	Если НЕ СтруктураВозврата.Ошибка Тогда
		РезультатЧтениеJSON = СтруктураВозврата.РезультатЧтениеJSON;
		
		Если РезультатЧтениеJSON.Свойство("expiry_date") И РезультатЧтениеJSON.Свойство("expiry_date") Тогда
			
			День = Сред(РезультатЧтениеJSON.expiry_date,9,2);
			Месяц = Сред(РезультатЧтениеJSON.expiry_date,6,2);
			Год  = Лев(РезультатЧтениеJSON.expiry_date,4);
			ДатаАктуальностиКлюча = Дата(Год,Месяц,День);
			ПериодКлючаГод = Ложь;
			Если РезультатЧтениеJSON.Свойство("yearlyBilling") Тогда
				ПериодКлючаГод  =  РезультатЧтениеJSON.yearlyBilling;
			КонецЕсли;
			СтруктураИнформацииОКлюче.ДатаАктуальностиКлюча = ДатаАктуальностиКлюча;
			СтруктураИнформацииОКлюче.Использовано = РезультатЧтениеJSON.CHECKS.used;
			СтруктураИнформацииОКлюче.Лимит = РезультатЧтениеJSON.CHECKS.limit;
			СтруктураИнформацииОКлюче.ИнформацияОКлюче = НСтр("ru='Срок действия пинкода: ';uk='Термін дії пінкоду: '") 
			+ Формат(СтруктураИнформацииОКлюче.ДатаАктуальностиКлюча,"ДФ=dd.MM.yyyy") + НСтр("ru=', использовано проверок в текущем ';uk=', використано перевірок у поточному '") 
			+ ?(ПериодКлючаГод, НСтр("ru='году: ';uk='році: '"), НСтр("ru='месяце: ';uk='місяці: '")) + 
			+ СтруктураИнформацииОКлюче.Использовано + НСтр("ru=' из ';uk=' з '") + СтруктураИнформацииОКлюче.Лимит;
		Иначе

			СтруктураИнформацииОКлюче.Ошибка = Истина;
			
		КонецЕсли; 
		
	Иначе
		СтруктураИнформацииОКлюче.Ошибка = Истина;
	КонецЕсли;
	
	Возврат СтруктураИнформацииОКлюче; 

КонецФункции

Функция ПолучитьJSONНаСервере(СтруктураОтвета,Ресурс)
	
	Сервер = "opendatabot.com";
	
	ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	
	HTTPСоединение =  Новый HTTPСоединение(Сервер, 443,,,,,ЗащищенноеСоединение);
	
	HTTPЗапрос = Новый HTTPЗапрос(Ресурс);
	
	РезультатHTTP = HTTPСоединение.Получить(HTTPЗапрос);
	
	Если РезультатHTTP.КодСостояния = 200 Тогда
		
		РезультатОтветJSON = РезультатHTTP.ПолучитьТелоКакСтроку("UTF-8");
		
		СтруктураОтвета.Ошибка = Ложь;
		СтруктураОтвета.ТекстОшибки = "";
		СтруктураОтвета.Дата =  ТекущаяДата();
		СтруктураОтвета.ТекстJSON =  РезультатОтветJSON;
		
	ИначеЕсли РезультатHTTP.КодСостояния = 402 Тогда 
		
		СтруктураОтвета.Ошибка = Истина;
		СтруктураОтвета.ТекстОшибки = НСтр("ru='Ошибка 402 (Не корректный пинкод сервиса или необходима оплата).';uk='Помилка 402 (Не коректний пінкод сервісу або потрібна оплата).'");
		
	ИначеЕсли РезультатHTTP.КодСостояния = 403 Тогда 
		// ApiKey is not specified
		СтруктураОтвета.Ошибка = Истина;
		СтруктураОтвета.ТекстОшибки = НСтр("ru='Ошибка 403 (Ключ сервиса не указан).';uk='Помилка 403 (Ключ сервісу не зазначений).'");
		
	ИначеЕсли РезультатHTTP.КодСостояния = 404 Тогда 
		// Company not found
		СтруктураОтвета.Ошибка = Истина;
		СтруктураОтвета.ТекстОшибки = НСтр("ru='Ошибка 404 (Даный не найдены).';uk='Помилка 404 (Дані не знайдено).'");
		
	Иначе
		// ??? Еще какая то ошибка
		СтруктураОтвета.Ошибка = Истина;
		СтруктураОтвета.ТекстОшибки = НСтр("ru='Ошибка';uk='Помилка'") + РезультатHTTP.КодСостояния + НСтр("ru='(Сервис не доступен, попробуйте позже).';uk=' (Сервіс не доступний, спробуйте пізніше).'");
		
	КонецЕсли;
	Возврат СтруктураОтвета;
КонецФункции

Функция ПрочитатьJSONНаСервере(РезультатПолучения)
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("Ошибка", Истина);
	СтруктураВозврата.Вставить("ТекстОшибки", "");
	СтруктураВозврата.Вставить("Дата");
	СтруктураВозврата.Вставить("РезультатЧтениеJSON");
	
	//РезультатПолучения = ПолучитьJSONНаСервере(СтрокаПоиска, ОбновлятьКэш, Регион, ПроверкаКлюча);
	Если РезультатПолучения.Ошибка Тогда
		СтруктураВозврата.Ошибка = РезультатПолучения.Ошибка;
		СтруктураВозврата.ТекстОшибки = РезультатПолучения.ТекстОшибки;
		Возврат СтруктураВозврата;
	КонецЕсли; 
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(РезультатПолучения.ТекстJSON);
	РезультатЧтениеJSON = ПрочитатьJSON(ЧтениеJSON, Ложь);
	ЧтениеJSON.Закрыть();
	
	Если РезультатЧтениеJSON.Свойство("errorCode") Тогда
		СтруктураВозврата.Ошибка = Истина;
		СтруктураВозврата.ТекстОшибки = НСтр("ru='Ошибка';uk='Помилка'") + РезультатЧтениеJSON.errorCode + " ( " +РезультатЧтениеJSON.reason + " )";
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если РезультатЧтениеJSON.Свойство("status") Тогда
		Если РезультатЧтениеJSON.status = "error" Тогда
			СтруктураВозврата.Ошибка = Истина;
			СтруктураВозврата.ТекстОшибки =  НСтр("ru='Ошибка';uk='Помилка'") + РезультатЧтениеJSON.code + " ( " +РезультатЧтениеJSON.reason + " )";
			Возврат СтруктураВозврата;
		КонецЕсли;
	КонецЕсли;

	СтруктураВозврата.Ошибка = Ложь;
	СтруктураВозврата.Дата = РезультатПолучения.Дата;	
	СтруктураВозврата.РезультатЧтениеJSON = РезультатЧтениеJSON;
	Возврат СтруктураВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//Поставляемые профили пользователей

Процедура ЗаполнитьПоставляемыеПрофилиПользователей(ОписанияПрофилей) Экспорт	
	
	// Описание для заполнения профиля "Использование сервиса Опендатабот.Риски".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = "e0c51787-fac2-46a0-8caf-445bc4b0971b";
	ОписаниеПрофиля.Наименование  = НСтр("ru='Использование сервиса Опендатабот.Риски';uk= 'Використання сервісу Опендатабот.Ризики'", Локализация.КодЯзыкаИнформационнойБазы());
	ОписаниеПрофиля.Роли.Добавить("ОпендатаботИспользование");
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);

КонецПроцедуры

#КонецОбласти

