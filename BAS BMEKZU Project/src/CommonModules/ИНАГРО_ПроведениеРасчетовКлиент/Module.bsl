#Область ПрограммныйИнтерфейс

// Разбивает строку таблицы начислений на помесячные записи (длиной не более месяца)
// Параметры:
//		СтрокаНачислений - строка таблицы начислений, которую следует разбить
//		ТаблицаНачислений - таблица начислений, имеющая 2 обязательные колонки: ДатаНачала и  ДатаОкончания.
Процедура РазбитьСтрокуНачисленийНаПомесячныеЗаписи(СтрокаНачислений, ТаблицаНачислений) Экспорт
	
	НачалоПериода = СтрокаНачислений["ДатаНачала"];
	КонецПериода = СтрокаНачислений["ДатаОкончания"];
	
	Если НачалоМесяца(НачалоПериода) = НачалоМесяца(КонецПериода) ИЛИ КонецПериода < НачалоПериода Тогда
		Возврат;// разбивать не надо
	КонецЕсли; 
	
	РазницаВМесяцах = (Год(КонецПериода)*12 + Месяц(КонецПериода)) - (Год(НачалоПериода)*12 + Месяц(НачалоПериода));
	
	// У первоначальной строки дату конца установим в конец первого месяца
	СтрокаНачислений["ДатаОкончания"] = КонецМесяца(НачалоПериода);	
	
	ОчередноеНачалоМесяца = НачалоМесяца(НачалоПериода);
	Для Счетчик = 1 По РазницаВМесяцах Цикл
		
		НоваяСтрока = ТаблицаНачислений.Добавить();
		НоваяСтрока["Авторасчет"] =  СтрокаНачислений["Авторасчет"];
		НоваяСтрока["ПроизошедшееСобытие"] = СтрокаНачислений["ПроизошедшееСобытие"];
		
		// Скопируем строку
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислений,,"НомерСтроки");
		
		// Установим период
		ОчередноеНачалоМесяца = ДобавитьМесяц(ОчередноеНачалоМесяца, 1);
		НоваяСтрока["ДатаНачала"] = ОчередноеНачалоМесяца;	
		НоваяСтрока["ДатаОкончания"] = КонецМесяца(ОчередноеНачалоМесяца);	
		НоваяСтрока.БазовыйПериодНачало = НоваяСтрока["ДатаНачала"];	
		НоваяСтрока.БазовыйПериодКонец = НоваяСтрока["ДатаОкончания"];	
		
	КонецЦикла;
	
	// Для  последней строки установим конец периода в конец разбиваемого периода
	НоваяСтрока["ДатаОкончания"]	 = КонецПериода;
	
КонецПроцедуры

// Процедура проверяет корректность даты начала и даты окончания. В случае некорректности,
// сообщаем об ошибке и выставляем флаг отказа.
// Параметры:
//		1. ДатаНачалаСобытия - проверяемая дата начала события;
//		2. ДатаОкончанияСобытия - проверяемая дата окончания события;
//		3. ПериодРегистрацииСобытия - проверяемый период регистрации;
//		4. Отказ - флаг отказа.
Процедура ПроверитьКорректностьПериода(СтруктураПериода, Отказ = Ложь) Экспорт;
	
	Если НЕ СтруктураПериода.ДатаНачала = '00010101' И (СтруктураПериода.ДатаНачала < СтруктураПериода.ПериодРегистрации ИЛИ СтруктураПериода.ДатаНачала > КонецМесяца(СтруктураПериода.ПериодРегистрации)) Тогда 
		ТекстСообщения = НСтр("ru='Дата начала события не принадлежит периоду регистрации!';uk='Дата початку події не належить до періоду реєстрації!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		СтруктураПериода.ДатаНачала = '00010101';		
	КонецЕсли;
	
	Если НЕ СтруктураПериода.ДатаОкончания = '00010101' И (СтруктураПериода.ДатаОкончания < СтруктураПериода.ПериодРегистрации ИЛИ СтруктураПериода.ДатаОкончания > КонецМесяца(СтруктураПериода.ПериодРегистрации)) Тогда 
		ТекстСообщения = НСтр("ru='Дата окончания события не принадлежит периоду регистрации!';uk='Дата закінчення події не належить до періоду реєстрації!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		СтруктураПериода.ДатаОкончания = '00010101';		
	КонецЕсли;
	
	Если СтруктураПериода.ДатаОкончания <>'00010101' И СтруктураПериода.ДатаНачала <>'00010101' И СтруктураПериода.ДатаОкончания < СтруктураПериода.ДатаНачала Тогда 
		ТекстСообщения = НСтр("ru='Противоречивые дата начала и дата окончания события!';uk='Суперечливі дата початку та дата закінчення події!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		СтруктураПериода.ДатаОкончания = '00010101';
		СтруктураПериода.ДатаНачала = '00010101';		
	КонецЕсли;
	
КонецПроцедуры

// Данная процедура написана компанией ИН-АГРО.
	// 
Процедура УдалитьСтрокиПоУсловию(ТаблицаДокумента, Сотрудники) Экспорт
	
	Если ТаблицаДокумента.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Сотрудник Из Сотрудники Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Сотрудник", Сотрудник.Значение);
		НайденныеСтроки = ТаблицаДокумента.НайтиСтроки(ПараметрыОтбора);
		Для каждого СтрокаТЧ Из НайденныеСтроки Цикл
			ТаблицаДокумента.Удалить(СтрокаТЧ);
		КонецЦикла;
		
	КонецЦикла; 
	
КонецПроцедуры

// Данная процедура написана компанией ИН-АГРО.
	// 
Процедура УдалитьСтрокиСторноПоУсловию(НаборДанных, Сотрудники, ПроверятьСторнируемыйДокумент = Ложь) Экспорт
	
	Если НаборДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// обходим в обратном порядке
	ПоследнееДвижение = НаборДанных.Количество()-1;
	Для Сч = 0 По ПоследнееДвижение Цикл
		
		Движение = НаборДанных[ПоследнееДвижение - Сч];
		Если ПроверятьСторнируемыйДокумент Тогда
			Если НЕ Движение.Авторасчет ИЛИ НЕ Движение.Сторно ИЛИ ЗначениеЗаполнено(Движение.СторнируемыйДокумент) Тогда
				Продолжить;	
			КонецЕсли;
		Иначе
			Если НЕ Движение.Авторасчет ИЛИ НЕ Движение.Сторно Тогда
				Продолжить;	
			КонецЕсли;
		КонецЕсли;
		
		// удалим сторно-записи по всем сотрудникам полученного списка
		Если Сотрудники.НайтиПоЗначению(Движение.Сотрудник) <> Неопределено Тогда
			НаборДанных.Удалить(ПоследнееДвижение - Сч);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
