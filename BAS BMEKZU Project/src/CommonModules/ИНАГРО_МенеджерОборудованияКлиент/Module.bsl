#Область ПроцедурыИФункцииПодключениеОборудования

// Производит подключение доступного оборудования по списку типов ПО
//
Функция ПодключитьОборудованиеПоТипу(ИдентификаторКлиента, ТипыПО, ОписаниеОшибки = "") Экспорт

	СтруктураТиповПО = Новый Структура();
	Если ТипЗнч(ТипыПО) = Тип("Массив") Тогда
		Для каждого ТипПО Из ТипыПО Цикл
			СтруктураТиповПО.Вставить(ТипПО);
		КонецЦикла;
	Иначе
		СтруктураТиповПО.Вставить(ТипыПО);
	КонецЕсли;

	 Возврат ПодключитьОборудование(ИдентификаторКлиента, СтруктураТиповПО, , ОписаниеОшибки);

КонецФункции

// Подключает одиночный экземпляр устройства определяемый идентификатором
//
Функция ПодключитьОборудованиеПоИдентификатору(ИдентификаторКлиента, ИдентификаторУстройства, ОписаниеОшибки = "") Экспорт

	Возврат ПодключитьОборудование(ИдентификаторКлиента, , ИдентификаторУстройства, ОписаниеОшибки);

КонецФункции

// Функция подключает устройства по типу оборудования
// Возвращает результат выполнения функции.
Функция ПодключитьОборудование(ИдентификаторКлиента, ТипыПО = Неопределено,
							   ИдентификаторУстройства = Неопределено, ОписаниеОшибки = "") Экспорт
	   
	КонечныйРезультат = Истина;
	Результат         = Истина;
	
	ОбъектДрайвера    = Неопределено;
	ОписаниеОшибки    = "";
	ОписаниеОшибкиУстройства = "";

	Результат = ИНАГРО_МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	Если Не Результат Тогда
		ОписаниеОшибки = НСтр("ru='Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.';uk='Попередньо необхідно вибрати робоче місце обладнання для підключення поточного сеансу.'");
		Возврат Ложь;
	КонецЕсли;
	
	СписокОборудования = ИНАГРО_МенеджерОборудованияКлиентПовтИсп.ПолучитьСписокОборудования(ТипыПО, ИдентификаторУстройства);
	
	Если СписокОборудования.Количество() > 0 Тогда
		Для каждого Устройство Из СписокОборудования Цикл
			
			// Проверим, не подключено ли устройство ранее
			ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Устройство.Ссылка);
			
			Если ПодключенноеУстройство = Неопределено Тогда // Если устройство не было подключено ранее
				ОбъектДрайвера = ПолучитьОбъектДрайвера(Устройство);
				Если ОбъектДрайвера = Неопределено Тогда
					// Сообщить об ошибке, что не удалось загрузить драйвер.
					ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
								   + НСтр("ru='%Наименование%: Не удалось загрузить драйвер устройства.
                                     |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'
                                     |;uk='%Наименование%: Не вдалося завантажити драйвер пристрою.
                                     |Перевірте, що драйвер коректно встановлений і зареєстрований у системі.'");
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", Устройство.Наименование);
					КонечныйРезультат = Ложь;
					Продолжить;
					
				КонецЕсли;
				
				НовоеПодключение = Новый Структура();
				НовоеПодключение.Вставить("Клиенты"               , Новый Массив());
				НовоеПодключение.Клиенты.Добавить(ИдентификаторКлиента);
				
				НовоеПодключение.Вставить("СоответствиеОборудования" , Новый Соответствие());
				НовоеПодключение.СоответствиеОборудования.Вставить(Устройство.Параметры.Идентификатор, ИдентификаторКлиента);
				
				НовоеПодключение.Вставить("Ссылка"                 , Устройство.Ссылка);
				НовоеПодключение.Вставить("ИдентификаторУстройства", Устройство.ИдентификаторУстройства);
				НовоеПодключение.Вставить("ОбработчикДрайвера"     , Устройство.ОбработчикДрайвера);
				НовоеПодключение.Вставить("Наименование"           , Устройство.Наименование);
				НовоеПодключение.Вставить("ТипОборудования"        , Устройство.ТипОборудования);
				НовоеПодключение.Вставить("ДрайверОборудования"    , Устройство.ДрайверОборудования);
				НовоеПодключение.Вставить("ВСоставеКонфигурации"   , Устройство.ВСоставеКонфигурации);
				НовоеПодключение.Вставить("ИдентификаторОбъекта"   , Устройство.ИдентификаторОбъекта);
				НовоеПодключение.Вставить("ИмяМакетаДрайвера"      , Устройство.ИмяМакетаДрайвера);
				НовоеПодключение.Вставить("ИмяФайлаДрайвера"       , Устройство.ИмяФайлаДрайвера);
				НовоеПодключение.Вставить("РабочееМесто"           , Устройство.РабочееМесто);
				НовоеПодключение.Вставить("ИмяКомпьютера"          , Устройство.ИмяКомпьютера);
				НовоеПодключение.Вставить("Параметры"              , Устройство.Параметры);
				НовоеПодключение.Вставить("ВнешнийДрайвер"         , Устройство.ВнешнийДрайвер); 
				НовоеПодключение.Вставить("КоличествоПодключенных" , 1);
				НовоеПодключение.Вставить("ПараметрыПодключения"   , Новый Структура());
				НовоеПодключение.ПараметрыПодключения.Вставить("ТипОборудования", Устройство.ТипОборудованияИмя);

				
				Если ОбъектДрайвераЭтоCOM(ОбъектДрайвера) Тогда
					ОбъектДрайвера = СоздатьОбъектДрайвераДляCOM(ОбъектДрайвера);
					НовоеПодключение.Вставить(ПолучитьИмяCOMДрайвераВСтруктуре(), ОбъектДрайвера);
				КонецЕсли;
				
				ВыходныеПараметры = Неопределено;
				
				Если НовоеПодключение.ВСоставеКонфигурации Тогда
					ОбработчикДрайвера = ИНАГРО_МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикаДрайвера(НовоеПодключение.ОбработчикДрайвера);
				Иначе
					ОбработчикДрайвера = ИНАГРО_ПодключаемоеОборудованиеВнешнийДрайверВесов;
				КонецЕсли;
				
				Если ОбработчикДрайвера = Неопределено Тогда
					// Сообщить об ошибке, что не удалось загрузить драйвер.
					ОписаниеОшибки = ОписаниеОшибки +  НСтр("ru='Не удалось подключить обработчик драйвера.';uk='Не вдалося підключити обробник драйвера.'");
					КонечныйРезультат = Ложь;
					Продолжить;
				Иначе
					Результат = ОбработчикДрайвера.ПодключитьУстройство(
						ОбъектДрайвера,
						НовоеПодключение.Параметры,
						НовоеПодключение.ПараметрыПодключения,
						ВыходныеПараметры);
				КонецЕсли;
				
				Если Результат Тогда
					Если ВыходныеПараметры.Количество() >= 2 Тогда
						НовоеПодключение.Вставить("ИсточникСобытия", ВыходныеПараметры[0]);
						НовоеПодключение.Вставить("ИменаСобытий",    ВыходныеПараметры[1]);
					Иначе
						НовоеПодключение.Вставить("ИсточникСобытия", "");
						НовоеПодключение.Вставить("ИменаСобытий",    Неопределено);
					КонецЕсли;
					глПодключаемоеОборудование.ПараметрыПодключенияПО.Добавить(НовоеПодключение);
				Иначе
					// Сообщим пользователю о том, что не удалось подключить устройство
					ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
								   + НСтр("ru='Не удалось подключить устройство ""%Наименование%"": %ОписаниеОшибки% (%КодОшибки%)';uk='Не вдалося підключити пристрій ""%Наименование%"": %ОписаниеОшибки% (%КодОшибки%)'");
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%"  , Устройство.Наименование);
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%"     , ВыходныеПараметры[0]);
				КонецЕсли;
			Иначе // Устройство было подключено ранее
				// Увеличим количество пользователей данного соединения
				ПодключенноеУстройство.Клиенты.Добавить(ИдентификаторКлиента);
				ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных + 1;
			КонецЕсли;
			
			КонечныйРезультат = КонечныйРезультат И Результат;
		КонецЦикла;
	ИначеЕсли ИдентификаторУстройства <> Неопределено Тогда
		ОписаниеОшибки = НСтр("ru='Выбранное устройство не может использоваться для подключения.
        |Укажите другое устройство.'
        |;uk='Вибраний пристрій не може використовуватися для підключення.
        |Вкажіть інший пристрій.'");
		КонечныйРезультат = Ложь;
	КонецЕсли;

	Возврат КонечныйРезультат;

КонецФункции

// Поиск по идентификатору подключенного ранее устройства
//
Функция ПолучитьПодключенноеУстройство(СписокПодключений, Идентификатор) Экспорт
	
	ПодключенноеУстройство = Неопределено;
	
	Для каждого Подключение Из СписокПодключений Цикл
		Если Подключение.Ссылка = Идентификатор Тогда
			ПодключенноеУстройство = Подключение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодключенноеУстройство;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОтключениеОборудования

Функция ОтключитьОборудованиеПоТипу(ИдентификаторКлиента, ТипыПО, ОписаниеОшибки = "") Экспорт

	Возврат ОтключитьОборудование(ИдентификаторКлиента, ТипыПО, ,ОписаниеОшибки);

КонецФункции

// Отключает устройство, определенное идентификатором
//
Функция ОтключитьОборудованиеПоИдентификатору(ИдентификаторКлиента, ИдентификаторУстройства, ОписаниеОшибки = "") Экспорт

	Возврат ОтключитьОборудование(ИдентификаторКлиента, , ИдентификаторУстройства, ОписаниеОшибки);

КонецФункции

// Производит принудительное отключение всего подключенного оборудования,
// независимо от числа ссылок на подключение
Функция ОтключитьВсеОборудование(ОписаниеОшибки = "") Экспорт
	
	КонечныйРезультат = Истина;
	Результат         = Истина;
	
	Для каждого ПодключенноеУстройство Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
		ПодключенноеУстройство.КоличествоПодключенных = 0;
		
		ОбъектДрайвера = ПолучитьОбъектДрайвера(ПодключенноеУстройство);
		Если ОбъектДрайвера = Неопределено Тогда
			// Сообщить об ошибке, что не удалось загрузить драйвер.
			ОписаниеОшибки = НСтр("ru='""%Наименование%"": Не удалось загрузить драйвер устройства.
                                        |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'
                                        |;uk='""%Наименование%"": Не вдалося завантажити драйвер пристрою.
                                        |Перевірте, що драйвер коректно встановлений і зареєстрований в системі.'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
			КонечныйРезультат = Ложь;
			Продолжить;
		ИначеЕсли ОбъектДрайвераЭтоCOM(ОбъектДрайвера) Тогда
			ОбъектДрайвера = ПолучитьОбъектДрайвераДляCOM(ПодключенноеУстройство);
		КонецЕсли;
		
		ВыходныеПараметры = Неопределено;
		
		Если ПодключенноеУстройство.ВСоставеКонфигурации Тогда
			ОбработчикДрайвера = ИНАГРО_МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикаДрайвера(ПодключенноеУстройство.ОбработчикДрайвера);
		Иначе	
			ОбработчикДрайвера = ИНАГРО_ПодключаемоеОборудованиеВнешнийДрайверВесов;
		КонецЕсли;
		
		Результат = ОбработчикДрайвера.ОтключитьУстройство(
				ОбъектДрайвера,
				ПодключенноеУстройство.Параметры,
				ПодключенноеУстройство.ПараметрыПодключения,
				ВыходныеПараметры);
				
		Если НЕ Результат Тогда
			ОписаниеОшибки = НСтр("ru='При отключении устройства ""%Наименование%"" произошла ошибка: %ОписаниеОшибки% (%КодОшибки%)';uk='При відключенні пристрою ""%Наименование%"" сталася помилка: %ОписаниеОшибки% (%КодОшибки%)'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%", ВыходныеПараметры[0]);
		КонецЕсли;
		КонечныйРезультат = КонечныйРезультат И Результат;
	КонецЦикла;
	
	глПодключаемоеОборудование.ПараметрыПодключенияПО.Очистить();
	
	Возврат КонечныйРезультат;
	
КонецФункции

// Функция подключает устройства по типу оборудования
// Возвращает результат выполнения функции.
Функция ОтключитьОборудование(ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено, ОписаниеОшибки = "")
	
	КонечныйРезультат = Истина;
	Результат         = Истина;
	
	ВыходноеОписаниеОшибки = "";
	
	Если глПодключаемоеОборудование = Неопределено Тогда
	    Возврат Неопределено;
	КонецЕсли; 
	
	Если глПодключаемоеОборудование.ПараметрыПодключенияПО <> Неопределено Тогда
		КоличествоУстройств = глПодключаемоеОборудование.ПараметрыПодключенияПО.Количество();
		Для Индекс = 1 По КоличествоУстройств Цикл
			
			ПодключенноеУстройство = глПодключаемоеОборудование.ПараметрыПодключенияПО[КоличествоУстройств - Индекс];
			ИмяТипаПО = ИНАГРО_МенеджерОборудованияКлиентПовтИсп.ПолучитьИмяТипаОборудования(ПодключенноеУстройство.ТипОборудования);
			КлиентПодключения = ПодключенноеУстройство.Клиенты.Найти(ИдентификаторКлиента);
			Если КлиентПодключения <> Неопределено  И (ТипыПО = Неопределено Или ТипыПО.Найти(ИмяТипаПО) <> Неопределено)
			   И (ИдентификаторУстройства = Неопределено  Или ПодключенноеУстройство.Ссылка = ИдентификаторУстройства)Тогда
				 
				 Если ПодключенноеУстройство.КоличествоПодключенных = 1 Тогда
					 
					ПодключенноеУстройство.КоличествоПодключенных = 0;
					ОбъектДрайвера = ПолучитьОбъектДрайвера(ПодключенноеУстройство);
					Если ОбъектДрайвера = Неопределено Тогда
						// Сообщить об ошибке, что не удалось загрузить драйвер.
						ОписаниеОшибки = НСтр("ru='""%Наименование%"": Не удалось загрузить драйвер устройства.
                                                    |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'
                                                    |;uk='""%Наименование%"": Не вдалося завантажити драйвер пристрою.
                                                    |Перевірте, що драйвер коректно встановлений і зареєстрований в системі.'");
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
						КонечныйРезультат = Ложь;
						Продолжить;
					ИначеЕсли ОбъектДрайвераЭтоCOM(ОбъектДрайвера) Тогда
						ОбъектДрайвера = ПолучитьОбъектДрайвераДляCOM(ПодключенноеУстройство);
					КонецЕсли;
					
					ВыходныеПараметры = Неопределено;
					
					Если ПодключенноеУстройство.ВСоставеКонфигурации Тогда
						ОбработчикДрайвера = ИНАГРО_МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикаДрайвера(ПодключенноеУстройство.ОбработчикДрайвера);
					Иначе
						ОбработчикДрайвера = ИНАГРО_ПодключаемоеОборудованиеВнешнийДрайверВесов;
					КонецЕсли;
					
					Результат = ОбработчикДрайвера.ОтключитьУстройство(
							ОбъектДрайвера,
							ПодключенноеУстройство.Параметры,
							ПодключенноеУстройство.ПараметрыПодключения,
							ВыходныеПараметры);
							
					Если НЕ Результат Тогда
						ОписаниеОшибки = ОписаниеОшибки + ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС)
									   + НСтр("ru='При отключении устройства ""%Наименование%"" произошла ошибка: %ОписаниеОшибки% (%КодОшибки%)';uk='При відключенні пристрою ""%Наименование%"" сталася помилка: %ОписаниеОшибки% (%КодОшибки%)'");
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
						ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КодОшибки%", ВыходныеПараметры[0]);
					КонецЕсли;
					
					НомерСтрокиМассива = глПодключаемоеОборудование.ПараметрыПодключенияПО.Найти(ПодключенноеУстройство);
					Если НомерСтрокиМассива <> Неопределено Тогда
						глПодключаемоеОборудование.ПараметрыПодключенияПО.Удалить(НомерСтрокиМассива);
					КонецЕсли;
				Иначе
					ПодключенноеУстройство.КоличествоПодключенных = ПодключенноеУстройство.КоличествоПодключенных - 1;
					ПодключенноеУстройство.Клиенты.Удалить(КлиентПодключения);
				КонецЕсли;
			КонецЕсли;
			
			КонечныйРезультат = КонечныйРезультат И Результат;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КонечныйРезультат;
	
КонецФункции  

#КонецОбласти

#Область ПроцедурыИФункцииПодключенияОтключенияОборудованияВФорме

// Подключает необходимые типы оборудования при открытии формы.
//
// Параметры:
//	Форма - УправляемаяФорма
//	ПоддерживаемыеТипыПодключаемогоОборудования - Строка
//		Содержит перечень типов подключаемого оборудования, разделенных запятыми.
//
Функция ПодключитьОборудованиеПриОткрытииФормы(Форма, ПоддерживаемыеТипыПодключаемогоОборудования) Экспорт
	
	ОборудованиеПодключено = Истина;
	
	Форма.ПоддерживаемыеТипыПодключаемогоОборудования = ПоддерживаемыеТипыПодключаемогоОборудования;
	
	Если Форма.ИспользоватьПодключаемоеОборудование И ОбновитьРабочееМестоКлиента() Тогда

		ОписаниеОшибки = "";
		
		ОборудованиеПодключено = ПодключитьОборудованиеПоТипу(
			Форма.УникальныйИдентификатор,
			ПреобразоватьСписокСтрокойВМассив(Форма.ПоддерживаемыеТипыПодключаемогоОборудования),
			ОписаниеОшибки);
		
		Если НЕ ОборудованиеПодключено Тогда
			
			ТекстСообщения = НСтр("ru='При подключении оборудования произошла ошибка:
                                    |""%ОписаниеОшибки%"".'
                                    |;uk='При підключенні обладнання сталася помилка:
                                    |""%ОписаниеОшибки%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОборудованиеПодключено; // признак ошибки при подключении оборудования
	
КонецФункции

// Отключает подключенные типы оборудования при закрытии формы
//
Функция ОтключитьОборудованиеПриЗакрытииФормы(Форма) Экспорт
	
	Возврат ИНАГРО_МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(
				Форма.УникальныйИдентификатор,
				ПреобразоватьСписокСтрокойВМассив(Форма.ПоддерживаемыеТипыПодключаемогоОборудования));
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Функция, вызываемая при начале работы системы.
// Выполняет подготовку данных механизма
Функция ПриНачалеРаботыСистемы() Экспорт

	Если глПодключаемоеОборудование = Неопределено Тогда
		глПодключаемоеОборудование = Новый Структура("ДрайвераПодключаемогоОборудования,
												|ПараметрыПодключенияПО,
												|ПоследнийСлипЧек,
												|ТаблицаУстройствДМ,
												|ПараметрыДрайверМенеджера",
												 Новый Соответствие(),
												 Новый Массив(),
												 "",
												 Новый Структура(),
												 Новый Структура());
	КонецЕсли;
	
#Если Не ВебКлиент Тогда
	ПереустановитьПомеченныеДрайверы();
#КонецЕсли
	
КонецФункции

// Функция, вызываемая при начале работы системы.
// Выполняет подготовку данных механизма
Функция ПередЗавершениемРаботыСистемы() Экспорт
	
	ОтключитьВсеОборудование();
	
КонецФункции

/// Направляет команду ответственному обработчику драйвера
// (в соответствии с указанным значением обработчика во входном параметре "Идентификатор")
Функция ВыполнитьКоманду(Идентификатор, Команда, ВходныеПараметры, ВыходныеПараметры, Таймаут = -1) Экспорт
	
	Результат = Ложь;
	
	// Поиск подключенного устройства
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Идентификатор);
	
	Если ПодключенноеУстройство <> Неопределено Тогда
		// Получение объекта драйвера
		ОбъектДрайвера = ПолучитьОбъектДрайвера(ПодключенноеУстройство);
		Если ОбъектДрайвера = Неопределено Тогда
			
			// Сообщить об ошибке, что не удалось загрузить драйвер.
			ВыходныеПараметры = Новый Массив();
			ОписаниеОшибки = НСтр("ru='""%Наименование%"": Не удалось загрузить драйвер устройства.
                                        |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'
                                        |;uk='""%Наименование%"": Не вдалося завантажити драйвер пристрою.
                                        |Перевірте, що драйвер коректно встановлений і зареєстрований в системі.'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ОписаниеОшибки);
			
		Иначе
			Если ОбъектДрайвераЭтоCOM(ОбъектДрайвера) Тогда
				ОбъектДрайвера = ПолучитьОбъектДрайвераДляCOM(ПодключенноеУстройство);
			КонецЕсли;
			
			Параметры            = ПодключенноеУстройство.Параметры;
			ПараметрыПодключения = ПодключенноеУстройство.ПараметрыПодключения;
			
			Если ПодключенноеУстройство.ВСоставеКонфигурации Тогда
				ОбработчикДрайвера = ИНАГРО_МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикаДрайвера(ПодключенноеУстройство.ОбработчикДрайвера);
			Иначе
				ОбработчикДрайвера = ИНАГРО_ПодключаемоеОборудованиеВнешнийДрайверВесов;
			КонецЕсли;
			
			Если ОбработчикДрайвера = Неопределено Тогда
				// Сообщить об ошибке, что не удалось загрузить драйвер.
				ВыходныеПараметры = Новый Массив();
				ТекстСообщения = НСтр("ru='Не удалось подключить обработчик драйвера.';uk='Не вдалося підключити обробник драйвера.'");
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(ТекстСообщения);
				ВыходныеПараметры.Добавить(НСтр("ru='Не установлен';uk='Не встановлений'"));
			Иначе
				// Вызов метода выполнения команды у обработчика
				Результат = ОбработчикДрайвера.ВыполнитьКоманду(Команда,
					ВходныеПараметры,
					ВыходныеПараметры,
					ОбъектДрайвера,
					Параметры,
					ПараметрыПодключения); 
			КонецЕсли
			
		КонецЕсли;
	Иначе
		// Сообщить об ошибке, что устройство не подключено.
		ВыходныеПараметры = Новый Массив();
		ТекстСообщения = НСтр("ru='Устройство не подключено. Перед выполнением операции устройство должно быть подключено.';uk='Пристрій не підключений. Перед виконанням операції пристрій має бути підключений.'");
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстСообщения);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Выполняет дополнительную команду к драйверу, не требующую предварительного подключения устройства в системе
//
Функция ВыполнитьДополнительнуюКоманду(Команда, ВходныеПараметры, ВыходныеПараметры, Идентификатор, Параметры) Экспорт
	
	Результат = Ложь;
	
	// Поиск подключенного устройства
	ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО, Идентификатор);

	Если ПодключенноеУстройство = Неопределено Тогда
		
		ДанныеОборудования = ИНАГРО_МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Идентификатор);
		
		времПараметрыПодключения = Новый Структура();
		времПараметрыПодключения.Вставить("ТипОборудования", ДанныеОборудования.ТипОборудованияИмя);
		
		ОбъектДрайвера = ПолучитьОбъектДрайвера(ДанныеОборудования);
		Если ОбъектДрайвера = Неопределено Тогда
			
			// Сообщить об ошибке, что не удалось загрузить драйвер.
			ВыходныеПараметры = Новый Массив();
			ТекстСообщения = НСтр("ru='Не удалось загрузить драйвер устройства.
                                        |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'
                                        |;uk='Не вдалося завантажити драйвер пристрою.
                                        |Перевірте, що драйвер коректно встановлений і зареєстрований в системі.'");
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(ТекстСообщения);
			ВыходныеПараметры.Добавить(НСтр("ru='Не установлен';uk='Не встановлений'"));
			
		Иначе
			Если ДанныеОборудования.ВСоставеКонфигурации Тогда
				ОбработчикДрайвера = ИНАГРО_МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикаДрайвера(ДанныеОборудования.ОбработчикДрайвера);
			Иначе
				ОбработчикДрайвера = ИНАГРО_ПодключаемоеОборудованиеВнешнийДрайверВесов;
			КонецЕсли;
			
			Если ОбработчикДрайвера = Неопределено Тогда
				// Сообщить об ошибке, что не удалось загрузить драйвер.
				ВыходныеПараметры = Новый Массив();
				ТекстСообщения = НСтр("ru='Не удалось подключить обработчик драйвера.';uk='Не вдалося підключити обробник драйвера.'");
				ВыходныеПараметры.Добавить(999);
				ВыходныеПараметры.Добавить(ТекстСообщения);
				ВыходныеПараметры.Добавить(НСтр("ru='Не установлен';uk='Не встановлений'"));
			Иначе
				Если ОбъектДрайвераЭтоCOM(ОбъектДрайвера) Тогда
					ОбъектДрайвера = СоздатьОбъектДрайвераДляCOM(ОбъектДрайвера);
				КонецЕсли;
				Результат = ОбработчикДрайвера.ВыполнитьКоманду(Команда,
					ВходныеПараметры,
					ВыходныеПараметры,
					ОбъектДрайвера,
					Параметры,
					времПараметрыПодключения);
					Если Не Результат Тогда
						ВыходныеПараметры.Добавить(НСтр("ru='Установлен';uk='Встановлений'"));
					КонецЕсли;
			КонецЕсли
				
		КонецЕсли;
	Иначе
		// Сообщить об ошибке, что устройство подключено.
		ВыходныеПараметры = Новый Массив();
		ТекстСообщения = НСтр("ru='Устройство подключено. Перед выполнением операции устройство должно быть отключено.';uk='Пристрій підключено. Перед виконанням операції пристрій повинно бути вимкнено.'");
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(ТекстСообщения);
		ВыходныеПараметры.Добавить(НСтр("ru='Установлен';uk='Встановлений'"));
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Выполнить настройку оборудования
// 
Процедура ВыполнитьНастройкуОборудования(Идентификатор) Экспорт

	Результат = Истина;
	
	ДанныеУстройства = ИНАГРО_МенеджерОборудованияКлиентПовтИсп.ПолучитьДанныеУстройства(Идентификатор);
	ПараметрыФормы = Новый Структура("ПараметрыОборудования", ДанныеУстройства.Параметры);
	ПараметрыФормы.Вставить("Идентификатор", Идентификатор);       
	ПараметрыФормы.Вставить("ДрайверОборудования", ДанныеУстройства.ДрайверОборудования);  
	
	ФормаНастройки = "ИНАГРО_ФормаНастройкиВнешнегоОборудования"; 
	
	Если ДанныеУстройства.ВСоставеКонфигурации Тогда
		ОбработчикДрайвера = ИНАГРО_МенеджерОборудованияКлиентПовтИсп.ПолучитьОбработчикаДрайвера(ДанныеУстройства.ОбработчикДрайвера);
		Если Не ОбработчикДрайвера = Неопределено Тогда
			ФормаНастройки = ИНАГРО_МенеджерОборудованияКлиентПовтИсп.ПолучитьИмяФормыНастройкиПараметров(Строка(ДанныеУстройства.ОбработчикДрайвера));
		КонецЕсли;
	КонецЕсли;
		
	Если НЕ ПустаяСтрока(ФормаНастройки) Тогда
		Обработчик = Новый ОписаниеОповещения("ВыполнитьНастройкуОборудованияЗавершение", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма." + ФормаНастройки, ПараметрыФормы,,,  ,, Обработчик, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Произошла ошибка инициализации формы настройки драйвера.';uk='Сталася помилка ініціалізації форми установки драйвера.'")); 
	КонецЕсли;
	
КонецПроцедуры

// Завершение настройки оборудования
//
Процедура ВыполнитьНастройкуОборудованияЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		РезультатЗавершения = Ложь;
		Если Результат.Свойство("Идентификатор") И Результат.Свойство("ПараметрыОборудования") Тогда
			РезультатЗавершения = ИНАГРО_МенеджерОборудованияВызовСервера.СохранитьПараметрыУстройства(Результат.Идентификатор, Результат.ПараметрыОборудования);
		КонецЕсли;
		
		Если РезультатЗавершения Тогда 
			ОбновитьПовторноИспользуемыеЗначения();
		Иначе
			СообщениеОбОшибке = НСтр("ru='Не удалось сохранить параметры устройства.';uk='Не вдалося зберегти параметри пристрою.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет пользовательские настройки подключаемого оборудования
//
Процедура СохранитьПользовательскиеНастройкиПодключаемогоОборудования(СписокНастроек) Экспорт

	ИНАГРО_МенеджерОборудованияВызовСервера.СохранитьПользовательскиеНастройкиПодключаемогоОборудования(СписокНастроек);

КонецПроцедуры

// Процедура формирует задержку указанной длительности
//
// Параметры:
//  Время - <Число>
//        - Длительность задержки в секундах.
//
Процедура Пауза(Время) Экспорт

	ВремяЗавершения = ТекущаяДата() + Время;
	Пока ТекущаяДата() < ВремяЗавершения Цикл
	КонецЦикла;

КонецПроцедуры

// Обрезает передаваемую строку по длине поля, если поле слишком короткое - дополняет пробелами
//
Функция ПостроитьПоле(Текст, ДлинаПоля) Экспорт
	
	ТекстПолный = Лев(Текст, ДлинаПоля);
	Пока СтрДлина(ТекстПолный) < ДлинаПоля Цикл
		ТекстПолный = ТекстПолный + " ";
	КонецЦикла;
	
	Возврат ТекстПолный;
	
КонецФункции

// Преобразовать список строкой в массив
//
Функция ПреобразоватьСписокСтрокойВМассив(Источник) Экспорт
	
	ПромежуточнаяСтруктура = Новый Структура(Источник);
	Приемник = Новый Массив;
	
	Для Каждого КлючИЗначение Из ПромежуточнаяСтруктура Цикл
		Приемник.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Возврат Приемник;
	
КонецФункции

// Возвращает макет слип чека по наименованию макета
//
Функция ПолучитьСлипЧек(ИмяМакета, ШиринаСлипЧека, Параметры, АвторизацияПИН = Ложь) Экспорт

	Возврат ИНАГРО_МенеджерОборудованияКлиентПовтИсп.ПолучитьСлипЧек(ИмяМакета, ШиринаСлипЧека, Параметры, АвторизацияПИН);

КонецФункции

// Функция проверяет доступность каталога по полному ими файла 
// 
Функция ПроверитьДоступностьКаталога(Знач ПолноеИмяФайла, ТекстОшибки) Экспорт
	
	ВремФайл = Новый Файл(ПолноеИмяФайла);
	ВремКаталог = Новый Файл(ВремФайл.Путь);
	Результат = ВремКаталог.Существует();
	
	Если Результат Тогда 
		ТекстОшибки = "";
	Иначе
		ТекстОшибки = НСтр("ru='Каталог ""%Каталог%"" не существует.';uk='Каталог ""%Каталог%"" не існує.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Каталог%", ВремКаталог.ПолноеИмя);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция производит выбор файла драйвера для последующей загрузки
//
Функция ВыборФайлаДрайвера(ПолноеИмяФайла) Экспорт 
	
	Результат = Ложь;
	ПолноеИмяФайла = "";
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru='Выберите файл драйвера';uk='Виберіть файл драйвера'");
	ДиалогОткрытияФайла.Фильтр = НСтр("ru='Файл драйвера';uk='Файл драйверу'") + ?(ИНАГРО_МенеджерОборудованияКлиентПовтИсп.ЭтоLinuxКлиент(), "(*.zip)|*.zip", "(*.zip, *.exe)| *.zip; *.exe");  
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		
		Результат = Истина;
		ПолноеИмяФайла = ДиалогОткрытияФайла.ПолноеИмяФайла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

/// Процедура выбора устройства из доступных, привязанных к текущему рабочему месту
//
Процедура ПредложитьВыбратьУстройство(ОповещениеВыбора, ТипОборудования, ТекстЗаголовкаВыбора, 
	СообщениеНеПодключен = "", СообщениеНеВыбран = "", БезСообщений = Ложь, ТекстСообщения = "") Экспорт
	
	Если Не ИНАГРО_МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		ТекстСообщения = НСтр("ru='Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.';uk='Попередньо необхідно вибрати робоче місце обладнання для підключення поточного сеансу.'");
		Если Не БезСообщений Тогда
		      ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СписокДоступныхУстройств = ИНАГРО_МенеджерОборудованияВызовСервера.ПолучитьСписокОборудования(ТипОборудования);
	
	Если СписокДоступныхУстройств.Количество() = 0 Тогда
		Если Не ПустаяСтрока(СообщениеНеПодключен) ТОгда
			Если БезСообщений Тогда
				ТекстСообщения = СообщениеНеПодключен;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеНеПодключен);
			КонецЕсли;
		КонецЕсли;
	Иначе
		СписокУстройств = Новый СписокЗначений();
		Для каждого Устройства Из СписокДоступныхУстройств Цикл
			СписокУстройств.Добавить(Устройства.Ссылка, Устройства.Наименование);
		КонецЦикла;		
		Если СписокУстройств.Количество() = 1 Тогда
			Идентификатор = СписокУстройств[0].Значение;
			ВыполнитьОбработкуОповещения(ОповещениеВыбора, Идентификатор); 
		Иначе
			Контекст = Новый Структура;
			Контекст.Вставить("СледующееОповещение", ОповещениеВыбора);
			Контекст.Вставить("СообщениеНеВыбран"  , ?(ПустаяСтрока(СообщениеНеВыбран), СообщениеНеПодключен, СообщениеНеВыбран));
			Контекст.Вставить("БезСообщений"       , БезСообщений);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПредложитьВыбратьУстройствоЗавершение", ЭтотОбъект, Контекст);
			СписокУстройств.ПоказатьВыборЭлемента(ОписаниеОповещения, ТекстЗаголовкаВыбора);
		КонецЕсли;
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

Процедура ПредложитьВыбратьУстройствоЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Если Параметры <> Неопределено Тогда
			Если Параметры.БезСообщений Тогда
				ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, Неопределено);
			ИначеЕсли Не ПустаяСтрока(Параметры.СообщениеНеВыбран) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Параметры.СообщениеНеВыбран);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Параметры <> Неопределено И Параметры.СледующееОповещение <> Неопределено Тогда
			Идентификатор = Результат.Значение;
			ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, Идентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция предоставляет диалог выбора рабочего места
// 
Процедура ПредложитьВыборРабочегоМеста(ОбработкаОповещения, ИдентификаторКлиента = "") Экспорт

	Результат = Ложь;
	РабочееМесто = "";
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИдентификаторКлиента", ИдентификаторКлиента);
	
	ОткрытьФорму("Справочник.ИНАГРО_ПодключаемоеОборудование.Форма.ФормаВыбораРабочегоМеста", ПараметрыФормы,,,  ,, ОбработкаОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

// Завершение выбора рабочего места
//
Процедура ПредложитьВыборРабочегоМестаЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("РабочееМесто") Тогда 
		ИНАГРО_МенеджерОборудованияКлиент.УстановитьРабочееМесто(Результат.РабочееМесто);
	КонецЕсли;
		
КонецПроцедуры

// Функция устанавливает рабочее место
// 
Процедура УстановитьРабочееМесто(РабочееМесто) Экспорт
	
	ИНАГРО_МенеджерОборудованияВызовСервера.УстановитьРабочееМестоКлиента(РабочееМесто);
	Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);
	
КонецПроцедуры

// Выполняет обновление имени компьютера в параметре сеанса "РабочееМестоКлиента"
//
Функция ОбновитьРабочееМестоКлиента() Экспорт
	
	Результат = Истина;
	
	РабочееМесто = ИНАГРО_МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();
	
	Если Не ЗначениеЗаполнено(РабочееМесто) Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация();
		
		МассивРабочихМест = ИНАГРО_МенеджерОборудованияКлиентПовтИсп.НайтиРабочиеМестаПоИД(ВРег(СистемнаяИнформация.ИдентификаторКлиента));
		Если МассивРабочихМест.Количество() = 0 Тогда
			Параметры = Новый Структура;
			Параметры.Вставить("ИмяКомпьютера");
			Параметры.Вставить("ИдентификаторКлиента");
			
			#Если Не ВебКлиент Тогда
				Параметры.ИмяКомпьютера = ИмяКомпьютера();
			#КонецЕсли
			
			Параметры.ИдентификаторКлиента = ВРег(СистемнаяИнформация.ИдентификаторКлиента);
			РабочееМесто = ИНАГРО_МенеджерОборудованияВызовСервера.СоздатьРабочееМестоКлиента(Параметры);
		Иначе
			РабочееМесто = МассивРабочихМест[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат
		И РабочееМесто <> ИНАГРО_МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента() Тогда
		ИНАГРО_МенеджерОборудованияВызовСервера.УстановитьРабочееМестоКлиента(РабочееМесто);
		Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСЭлектроннымиВесами

// Получает вес с электронных весов
// УникальныйИдентификатор - идентификатор формы
// ОповещениеПриПолученииВеса - оповещение при завершении взвешивании и передачи веса
//
Процедура НачатьПолученияВесаСЭлектронныхВесов(ОповещениеПриПолученииВеса, УникальныйИдентификатор) Экспорт
	
	Контекст = Новый Структура;
	Контекст.Вставить("СледующееОповещение"     , ОповещениеПриПолученииВеса);
	Контекст.Вставить("УникальныйИдентификатор" , УникальныйИдентификатор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПолученияВесаСЭлектронныхВесовЗавершение", ЭтотОбъект, Контекст);
	ИНАГРО_МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, "ЭлектронныеВесы",
		НСтр("ru='Выберите электронные весы';uk='Виберіть електронні ваги'"), НСтр("ru='Электронные весы не подключены.';uk='Електронні ваги не підключені.'"), НСтр("ru='Электронные весы не выбраны.';uk='Електронні ваги не вибрані.'"));
	
КонецПроцедуры

// Процедура завершения получения веса с электронных весов
// 
Процедура НачатьПолученияВесаСЭлектронныхВесовЗавершение(ИдентификаторУстройства, Параметры) Экспорт
	
	ОписаниеОшибки = "";
	// Подключаем Весы
	Результат = ИНАГРО_МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, ИдентификаторУстройства, ОписаниеОшибки);
	
	Если Результат Тогда  
		                 
		АсинхронныйМетодРаботыДрайвера = ИНАГРО_МенеджерОборудованияВызовСервера.ПолучитьМетодРаботыДрайвера(ИдентификаторУстройства);
					
		ВходныеПараметры  = Неопределено;
		ВыходныеПараметры = Неопределено;
			
		// Пытаемся получить вес
		Результат = ИНАГРО_МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства, "ПолучитьВес", ВходныеПараметры, ВыходныеПараметры);    
		Если Результат Тогда
			
			Если НЕ АсинхронныйМетодРаботыДрайвера Тогда 
				Вес = ВыходныеПараметры[0]; // Вес получен
				Если Параметры.СледующееОповещение <> Неопределено Тогда
					ВыполнитьОбработкуОповещения(Параметры.СледующееОповещение, Вес);
				КонецЕсли;
			КонецЕсли; 
			
		Иначе
			ТекстСообщения = НСтр("ru='При использовании электронных весов произошла ошибка.
			|Дополнительное описание:|%ДополнительноеОписание%'
			|;uk='При використанні електронних ваг сталася помилка.
			|Додатковий опис:|%ДополнительноеОписание%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ВыходныеПараметры[1]);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		// Отключаем Весы
		Если НЕ АсинхронныйМетодРаботыДрайвера Тогда 
			ИНАГРО_МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(Параметры.УникальныйИдентификатор, ИдентификаторУстройства);
		КонецЕсли; 
		
	Иначе
		// Ошибка подключения весов
		ТекстСообщения = НСтр("ru='При подключении электронных весов произошла ошибка.
                |Дополнительное описание: %ДополнительноеОписание%'
                |;uk='При підключенні електронних ваг сталася помилка.
                |Додатковий опис: %ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСУстройствамиВвода

// Производит обработку данных события, полученных от клиента
//
Функция ОбработатьСобытиеОтУстройства(ОписаниеСобытия, ОписаниеОшибки = "") Экспорт

	Результат = Истина;
	
	// Поиск обработчика события
	Для каждого Подключение Из глПодключаемоеОборудование.ПараметрыПодключенияПО Цикл
						  
		Если Подключение.ИсточникСобытия = ОписаниеСобытия.Источник
		 Или (ПустаяСтрока(Подключение.ИсточникСобытия)
		   И Подключение.ИменаСобытий <> Неопределено) Тогда
		   
		   // Ищем среди подключенного оборудования устройство с полученным событием
			Событие = Подключение.ИменаСобытий.Найти(ОписаниеСобытия.Событие);
			Если Событие <> Неопределено Тогда
				ОбъектДрайвера = ПолучитьОбъектДрайвера(Подключение);
				Если ОбъектДрайвера = Неопределено Тогда
					// Сообщить об ошибке, что не удалось загрузить драйвер.
					ОписаниеОшибки = НСтр("ru='""%Наименование%"": Не удалось загрузить драйвер устройства.
                                                |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'
                                                |;uk='""%Наименование%"": Не вдалося завантажити драйвер пристрою.
                                                |Перевірте, що драйвер коректно встановлений і зареєстрований в системі.'");
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", Подключение.Наименование);
					Продолжить;
				ИначеЕсли ОбъектДрайвераЭтоCOM(ОбъектДрайвера) Тогда
					ОбъектДрайвера = ПолучитьОбъектДрайвераДляCOM(Подключение);
				КонецЕсли;
				
				ВходныеПараметры  = Новый Массив();
				ВходныеПараметры.Добавить(ОписаниеСобытия.Событие);
				ВходныеПараметры.Добавить(ОписаниеСобытия.Данные);
				ВыходныеПараметры = Неопределено;
				
				// Обрабатываем сообщение
				Результат = ВыполнитьКоманду(Подключение.Ссылка,
									  "ОбработатьСобытие",
									  ВходныеПараметры,
									  ВыходныеПараметры);
				Если Результат Тогда
					// Оповещаем 
					Оповестить(ВыходныеПараметры[0], ВыходныеПараметры[1], "ПодключаемоеОборудование");
				КонецЕсли;
				
				ИдентификаторУстройства = Подключение.Параметры.Идентификатор;
				АсинхронныйМетодРаботыДрайвера = ИНАГРО_МенеджерОборудованияВызовСервера.ПолучитьМетодРаботыДрайвера(ИдентификаторУстройства);
				УникальныйИдентификатор = Подключение.СоответствиеОборудования.Получить(ИдентификаторУстройства);
				
				Если НЕ АсинхронныйМетодРаботыДрайвера Тогда
				
					// Оповещаем драйвер о завершении обработки события
					ВходныеПараметры.Очистить();
					ВходныеПараметры.Добавить(Результат);
					ВыполнитьКоманду(Подключение.Ссылка,
								 	"ЗавершитьОбработкуСобытия",
									 ВходныеПараметры,
									 ВыходныеПараметры);
				Иначе
					ИНАГРО_МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройства);
				КонецЕсли;
			КонецЕсли;
				 
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыОбщихКоманд

// Открытие формы списка рабочих мест
//
Процедура ОткрытьРабочиеМеста(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ИНАГРО_МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.ИНАГРО_РабочиеМеста.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// Процедура для выбора рабочего места текущего сеанса
//
Процедура ВыбратьРМТекущегоСеанса(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПредложитьВыборРабочегоМестаЗавершение", ЭтотОбъект);
	ИНАГРО_МенеджерОборудованияКлиент.ПредложитьВыборРабочегоМеста(Оповещение);
	
КонецПроцедуры

// Открытие формы подключаемого Оборудования
//
Процедура ОткрытьПодключаемоеОборудование(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ИНАГРО_МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.ИНАГРО_ПодключаемоеОборудование.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// Открытие формы драйверов оборудования
//
Процедура ОткрытьДрайверыОборудования(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	ИНАГРО_МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("Справочник.ИНАГРО_ДрайверыОборудования.ФормаСписка", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСДрайвером

// Проверяет установлен ли драйвер.
//
Функция ДрайверУстановлен(Идентификатор) Экспорт
	
	ДанныеОборудования = ИНАГРО_МенеджерОборудованияВызовСервера.ПолучитьДанныеУстройства(Идентификатор);
	ОбъектДрайвера = ПолучитьОбъектДрайвера(ДанныеОборудования);
	
	Возврат ОбъектДрайвера <> Неопределено;
	
КонецФункции

#Если Не ВебКлиент Тогда

// Установить или переустановить драйверы помеченные флагами
//
Процедура ПереустановитьПомеченныеДрайверы() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	МассивРабочихМест = ИНАГРО_МенеджерОборудованияКлиентПовтИсп.НайтиРабочиеМестаПоИД(ВРег(СистемнаяИнформация.ИдентификаторКлиента));
	Если МассивРабочихМест.Количество() = 0 Тогда
		РабочееМесто = Неопределено
	Иначе
		РабочееМесто = МассивРабочихМест[0];
	КонецЕсли;
	
	// Переустановить драйверы помеченные флагом для переустановки
	Если ЗначениеЗаполнено(РабочееМесто) Тогда
		СписокОборудования = ИНАГРО_МенеджерОборудованияВызовСервера.ПолучитьСписокДрайверовДляПереустановки(РабочееМесто);
		Для Каждого Оборудование Из СписокОборудования Цикл
			Если Оборудование.ДанныеДрайвера.ВСоставеКонфигурации И НЕ Оборудование.ДанныеДрайвера.ПоставляетсяДистрибутивом Тогда
				НачатьУстановкуВнешнейКомпоненты(, "ОбщийМакет." + Оборудование.ДанныеДрайвера.ИмяМакетаДрайвера);
			КонецЕсли;
			ИНАГРО_МенеджерОборудованияВызовСервера.УстановитьПризнакПереустановкиДрайвера(РабочееМесто, Оборудование.ДрайверОборудования, Ложь); 
		КонецЦикла;
	КонецЕсли;
	
	// Установить драйверы помеченные флагом для переустановки
	Если ЗначениеЗаполнено(РабочееМесто) Тогда
		СписокОборудования = ИНАГРО_МенеджерОборудованияВызовСервера.ПолучитьСписокДрайверовДляУстановки(РабочееМесто);
		Для Каждого Оборудование Из СписокОборудования Цикл
			Если Оборудование.ДанныеДрайвера.ВСоставеКонфигурации И НЕ Оборудование.ДанныеДрайвера.ПоставляетсяДистрибутивом Тогда
				ОбъектДрайвера = ПолучитьОбъектДрайвера(Оборудование.ДанныеДрайвера);
				Если ОбъектДрайвера = Неопределено Тогда
					НачатьУстановкуВнешнейКомпоненты(, "ОбщийМакет." + Оборудование.ДанныеДрайвера.ИмяМакетаДрайвера);
				Иначе
					ОтключитьОбъектДрайвера(Оборудование.ДанныеДрайвера);
				КонецЕсли;
			КонецЕсли;
			ИНАГРО_МенеджерОборудованияВызовСервера.УстановитьПризнакУстановкиДрайвера(РабочееМесто, Оборудование.ДрайверОборудования, Ложь); 
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает драйвер из дистрибутива поставщика из макета
//
Функция УстановитьДрайверИзДистрибутиваВМакете(ИмяМакета, ИмяФайла) Экспорт
	
	Результат = Ложь;
	// Получение макета с сервера
	СсылкаНаФайл = ИНАГРО_МенеджерОборудованияВызовСервера.ПолучитьМакетССервера(ИмяМакета);
	
	ИмяФайлаВрем = ?(ПустаяСтрока(ИмяФайла), "setup.exe", ИмяФайла);
	ВременныйКаталог = КаталогВременныхФайлов();
	
	// Распаковка архива дистрибутива во временный каталог
	Результат = ПолучитьФайл(СсылкаНаФайл, ВременныйКаталог + "Model.zip", Ложь);
	
	#Если МобильныйКлиент ИЛИ ВебКлиент Тогда	
		ТекстСообщения = НСтр("ru = 'Мобильное приложение и Веб-клиент не поддерживает работу ZipФайла.'; uk = 'Мобільний додаток та веб-клієнт не підтримує роботу ZipФайла.'");
		ВызватьИсключение(ТекстСообщения);
	#Иначе
		ФайлАрхива = Новый ЧтениеZipФайла();
		ФайлАрхива.Открыть(ВременныйКаталог + "Model.zip");	
		
		Если ФайлАрхива.Элементы.Найти(ИмяФайлаВрем) <> Неопределено Тогда
			ВременныйКаталогИнсталляции = ВременныйКаталог + "Model\";
			// Распаковка дистрибутива
			ФайлАрхива.ИзвлечьВсе(ВременныйКаталогИнсталляции);
			// Запуск инсталлятора
			КодВозврата = Неопределено; 
			ЗапуститьПриложение(ВременныйКаталогИнсталляции + ИмяФайлаВрем, ВременныйКаталогИнсталляции, Истина, КодВозврата);
			Результат = КодВозврата <> Неопределено;
			// Удаление всех временных файлов после работы	
			Попытка
				УдалитьФайлы(ВременныйКаталогИнсталляции);
			Исключение
			КонецПопытки;
		Иначе
			ТекстОшибки = НСтр("ru='Ошибка установки драйвера из дистрибутива в макете.
			|Файл ""%Файл%"" в макете не найден.'
			|;uk='Помилка установки драйвера з дистрибутива в макеті.
			|Файл ""%Файл%"" у макеті не знайдений.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Файл%", ИмяФайлаВрем);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки); 
		КонецЕсли;
		
		// Удаление временных файлов после работы
		Попытка
			УдалитьФайлы(ВременныйКаталог + "Model.zip"); 
		Исключение
		КонецПопытки;
		
		Возврат Результат; 
		
	#КонецЕсли
	
КонецФункции

// Устанавливает драйвер из дистрибутива поставщика
//
Функция УстановитьДрайверИзДистрибутиваИзБазы(ДанныеДрайвера) Экспорт
	
	Результат = Ложь;
	
	ВременныйКаталог = КаталогВременныхФайлов();
	ИмяФайлаВрем = ВременныйКаталог + ДанныеДрайвера.ИмяФайлаДрайвера;
	
	ПолучитьФайл(ПолучитьНавигационнуюСсылку(ДанныеДрайвера.ДрайверОборудования, "ЗагруженныйДрайвер"), ИмяФайлаВрем, Ложь);
	
	ВременныйФайл = Новый Файл(ИмяФайлаВрем);
	
	Если ВРег(ВременныйФайл.Расширение) = ".ZIP" Тогда
		
		#Если МобильныйКлиент ИЛИ ВебКлиент Тогда	
			ТекстСообщения = НСтр("ru = 'Мобильное приложение и Веб-клиент не поддерживает работу ZipФайла.'; uk = 'Мобільний додаток та веб-клієнт не підтримує роботу ZipФайла.'");
			ВызватьИсключение(ТекстСообщения);
		#Иначе
			ФайлАрхива = Новый ЧтениеZipФайла();
			ФайлАрхива.Открыть(ВременныйФайл.ПолноеИмя);
			
			ИмяФайлаУстанавливаемый = "";
			Если ФайлАрхива.Элементы.Найти(ВременныйФайл.ИмяБезРасширения  + ".EXE") <> Неопределено Тогда
				ИмяФайлаУстанавливаемый = ВременныйФайл.ИмяБезРасширения  + ".EXE";
			ИначеЕсли ФайлАрхива.Элементы.Найти("setup.exe") <> Неопределено Тогда
				ИмяФайлаУстанавливаемый = "setup.exe";
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ИмяФайлаУстанавливаемый) Тогда
				ВременныйКаталогИнсталляции = ВременныйКаталог + "Model\";
				// Распаковка дистрибутива
				ФайлАрхива.ИзвлечьВсе(ВременныйКаталогИнсталляции);
				// Запуск инсталлятора
				КодВозврата = Неопределено; 
				ЗапуститьПриложение(ИмяФайлаУстанавливаемый, ВременныйКаталогИнсталляции, Истина, КодВозврата);
				Результат = КодВозврата <> Неопределено;
				// Удаление всех временных файлов после работы	
				Попытка
					УдалитьФайлы(ВременныйКаталогИнсталляции);
				Исключение
				КонецПопытки;
			КонецЕсли;
		#КонецЕсли	
	Иначе
		КодВозврата = Неопределено; 
		ЗапуститьПриложение(ИмяФайлаВрем, ВременныйКаталог, Истина, КодВозврата);
		Результат = КодВозврата <> Неопределено;
	КонецЕсли;
		
	// Удаление временных файлов после работы
	Попытка
		УдалитьФайлы(ИмяФайлаВрем); 
	Исключение
	КонецПопытки;
	
	Возврат Результат; 
	
КонецФункции

#КонецЕсли

// Отключение объекта драйвера
//
Процедура ОтключитьОбъектДрайвера(ДанныеДрайвера) Экспорт

	НомерСтрокиМассива = глПодключаемоеОборудование.ПараметрыПодключенияПО.Найти(ДанныеДрайвера.ДрайверОборудования);
	Если НомерСтрокиМассива <> Неопределено Тогда
		глПодключаемоеОборудование.ПараметрыПодключенияПО.Удалить(НомерСтрокиМассива);
	КонецЕсли;
	
КонецПроцедуры

// Получение объекта драйвера
//
Функция ПолучитьОбъектДрайвера(ДанныеДрайвера, ТекстОшибки = Неопределено) Экспорт
	
	ОбъектДрайвера = Неопределено;
	
	Для каждого ДрайверПО Из глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования Цикл
		Если ДрайверПО.Ключ = ДанныеДрайвера.ДрайверОборудования  Тогда
			ОбъектДрайвера = ДрайверПО.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;   
	
	Если ОбъектДрайвера = Неопределено Тогда
		Попытка
			
			ProgID = ДанныеДрайвера.ИдентификаторОбъекта;
			Если ПустаяСтрока(ProgID) Тогда
				ОбъектДрайвера = ""; // Драйвер не требуется
				
			ИначеЕсли ProgID = "MSCOMMLib.MSComm.1" Тогда
				
				#Если МобильныйКлиент Тогда
					ТекстСообщения = НСтр("ru = 'Мобильное приложение не поддерживает работу COMОбъекта.'; uk = 'Мобільний додаток не підтримує роботу COMОб'екта.'");
					ВызватьИсключение(ТекстСообщения);
				#Иначе
					ТестДрайвера = Новый COMОбъект("MSCOMMLib.MSComm");
					ОбъектДрайвера = "COM_MSCOMMLib.MSComm"; // COM-соединение	
				#КонецЕсли	
				
			Иначе
				ProgID1 = ?(Найти(ProgID, "|") > 0, Сред(ProgID, 1, Найти(ProgID, "|")-1), ProgID); 
				ProgID2 = ?(Найти(ProgID, "|") > 0, Сред(ProgID, Найти(ProgID, "|")+1), ProgID); 
				Если ДанныеДрайвера.ПоставляетсяДистрибутивом Тогда
					ПодключитьВнешнююКомпоненту(ProgID1);
				Иначе
					ИмяОбъекта = Сред(ProgID1, Найти(ProgID1, ".") + 1); 
					Префикс = Сред(ProgID1, 1, Найти(ProgID1, ".")); 
					ProgID2 = Префикс + СтрЗаменить(ИмяОбъекта, ".", "_") + "." + ИмяОбъекта;
					Если ДанныеДрайвера.ВСоставеКонфигурации Тогда
						Результат = ПодключитьВнешнююКомпоненту("ОбщийМакет." + ДанныеДрайвера.ИмяМакетаДрайвера, СтрЗаменить(ИмяОбъекта, ".", "_"));
					Иначе
						СсылкаНаДрайвер = ПолучитьНавигационнуюСсылку(ДанныеДрайвера.ДрайверОборудования, "ЗагруженныйДрайвер");
						Результат = ПодключитьВнешнююКомпоненту(СсылкаНаДрайвер, СтрЗаменить(ИмяОбъекта, ".", "_"));
					КонецЕсли;
				КонецЕсли;
				ОбъектДрайвера = Новый (ProgID2);
				
			КонецЕсли;
				
		Исключение
			Инфо = ИнформацияОбОшибке();
			ТекстОшибки = Инфо.Описание;
		КонецПопытки;
		
		Если ОбъектДрайвера <> Неопределено Тогда
			глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования.Вставить(ДанныеДрайвера.ДрайверОборудования, ОбъектДрайвера);
			ОбъектДрайвера = глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования[ДанныеДрайвера.ДрайверОборудования];
		КонецЕсли;
		
	КонецЕсли;   
		
	Возврат ОбъектДрайвера;
	
КонецФункции

Функция ПолучитьИмяCOMДрайвераВСтруктуре()
	
	Возврат "ОбъектДрайвераДляCOM";
	
КонецФункции

Функция ПолучитьОбъектДрайвераДляCOM(ПодключенноеУстройство)
	
	Возврат ПодключенноеУстройство[ПолучитьИмяCOMДрайвераВСтруктуре()];
	
КонецФункции

Функция ОбъектДрайвераЭтоCOM(ОбъектДрайвера)
	
	Если ТипЗнч(ОбъектДрайвера) = Тип("Строка") И Лев(ОбъектДрайвера, 3) = "COM" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция СоздатьОбъектДрайвераДляCOM(ОбъектДрайвера)
	
	#Если МобильныйКлиент Тогда
		ТекстСообщения = НСтр("ru = 'Мобильное приложение не поддерживает работу COMОбъекта.'; uk = 'Мобільний додаток не підтримує роботу COMОб'екта.'");
		ВызватьИсключение(ТекстСообщения);
	#Иначе
		НовыйОбъект = Неопределено;
		Если ОбъектДрайвера = "COM_ArtSoft_FiscalPrinter" Тогда
			НовыйОбъект = Новый COMОбъект("ArtSoft.FiscalPrinter");
		ИначеЕсли ОбъектДрайвера = "COM_MSCOMMLib.MSComm" Тогда
			НовыйОбъект = Новый COMОбъект("MSCOMMLib.MSComm");
		КонецЕсли;
		Возврат НовыйОбъект;
	#КонецЕсли
	
КонецФункции

// Установить драйвер оборудования
//
Процедура УстановитьДрайвер(Идентификатор, ОповещенияИзДистрибутиваПриЗавершении = Неопределено, ОповещенияИзАрхиваПриЗавершении = Неопределено) Экспорт
	
	ДанныеДрайвера = ИНАГРО_МенеджерОборудованияВызовСервера.ПолучитьДанныеДрайвера(Идентификатор);
	
	Попытка  
		Если ДанныеДрайвера.ВСоставеКонфигурации Тогда
			
			Если ДанныеДрайвера.ПоставляетсяДистрибутивом Тогда
			#Если ВебКлиент Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данный драйвер не поддерживает работу в веб-клиенте.';uk='Цей драйвер не підтримує роботу у веб-клієнті.'")); 
			#Иначе
				Если ИНАГРО_МенеджерОборудованияКлиентПовтИсп.ЭтоLinuxКлиент() Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данный драйвер не может быть установлен и использован в среде Linux.';uk='Цей драйвер не може бути встановлений і використаний в середовищі Linux.'")); 
					Возврат;
				КонецЕсли;
				Результат = УстановитьДрайверИзДистрибутиваВМакете(ДанныеДрайвера.ИмяМакетаДрайвера, ДанныеДрайвера.ИмяФайлаДрайвера);
				Если ОповещенияИзДистрибутиваПриЗавершении <> Неопределено Тогда
					ВыполнитьОбработкуОповещения(ОповещенияИзДистрибутиваПриЗавершении, Результат);
				КонецЕсли;
			#КонецЕсли
			Иначе
				НачатьУстановкуВнешнейКомпоненты(ОповещенияИзАрхиваПриЗавершении, "ОбщийМакет." + ДанныеДрайвера.ИмяМакетаДрайвера);
			КонецЕсли;
			
		Иначе
			
			Если ДанныеДрайвера.ПоставляетсяДистрибутивом Тогда
			#Если ВебКлиент Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данный драйвер не поддерживает работу в веб-клиенте.';uk='Цей драйвер не підтримує роботу у веб-клієнті.'")); 
			#Иначе
				Если ИНАГРО_МенеджерОборудованияКлиентПовтИсп.ЭтоLinuxКлиент() Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данный драйвер не может быть установлен и использован в среде Linux.';uk='Цей драйвер не може бути встановлений і використаний в середовищі Linux.'")); 
					Возврат;
				КонецЕсли;
				Результат = УстановитьДрайверИзДистрибутиваИзБазы(ДанныеДрайвера);
				Если ОповещенияИзДистрибутиваПриЗавершении <> Неопределено Тогда
					ВыполнитьОбработкуОповещения(ОповещенияИзДистрибутиваПриЗавершении, Результат);
				КонецЕсли;
			#КонецЕсли
			Иначе
				СсылкаНаДрайвер = ПолучитьНавигационнуюСсылку(ДанныеДрайвера.ДрайверОборудования, "ЗагруженныйДрайвер");
				НачатьУстановкуВнешнейКомпоненты(ОповещенияИзАрхиваПриЗавершении, СсылкаНаДрайвер);
			КонецЕсли;
			
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Произошла ошибка при установке драйвера.';uk='Сталася помилка при інсталяції драйвера.'")); 
	КонецПопытки;  
		
КонецПроцедуры

#КонецОбласти