Функция ПолучитьНастройкиПодключения() Экспорт
	Настройки=ХранилищеОбщихНастроек.Загрузить("Обработка.Пактум_Контрагент");
	Если ТипЗнч(Настройки)=Тип("Структура") Тогда
		
	Иначе
		Настройки=Новый Структура;
		Настройки.Вставить("фИспользоватьПрокси", Ложь);
		Настройки.Вставить("АдресПрокси");
		Настройки.Вставить("ПортПрокси");
		Настройки.Вставить("фИспользоватьЛогинПарольПрокси", Ложь);
		Настройки.Вставить("ЛогинПрокси");
		Настройки.Вставить("ПарольПрокси");
	КонецЕсли;	
	
	Настройки.Вставить("Логин", "");
	Настройки.Вставить("Пароль", "");
	Настройки2=ХранилищеОбщихНастроек.Загрузить("Обработка.Пактум_Контрагент_Подключение");
	Если ТипЗнч(Настройки2)=Тип("Структура") Тогда
		Настройки.Вставить("Логин", Настройки2.Логин);
		Настройки.Вставить("Пароль", Настройки2.Пароль);
	Иначе
		Настройки.Вставить("Логин");
		Настройки.Вставить("Пароль");
	КонецЕсли;
	Возврат Настройки;
КонецФункции

Функция Авторизация_Пактум() Экспорт
	НастройкиПодключения=ПолучитьНастройкиПодключения();
	СтруАвторизация=Новый Структура;
	СтруАвторизация.Вставить("Результат", Ложь);
	СтруАвторизация.Вставить("Токен");
	
	Если СокрЛП(НастройкиПодключения.Логин)="" Тогда
		Индикатор1 = 0;
		Возврат СтруАвторизация;
	КонецЕсли;
	
	WinHttp = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
	WinHttp.Option(2,"utf-8");
	WinHttp.Open("POST","https://pactumsys.com/api/v1/cba2911c-01f9-4ca7-833a-46fb0cc079f2/accounts/authentication",0);
	WinHttp.SetRequestHeader("Accept-Language", "ru");
	WinHttp.SetRequestHeader("Accept-Charset","utf-8");
	WinHttp.setRequestHeader("Content-Language", "ru");
	WinHttp.setRequestHeader("Content-Charset", "utf-8");
	WinHttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=utf-8");
	ПараметрыПОСТ = "UserName=" + СокрЛП(НастройкиПодключения.Логин) + "&Password=" + СокрЛП(НастройкиПодключения.Логин);
	Если НастройкиПодключения.фИспользоватьПрокси Тогда
		WinHttp.SetProxy(2, СокрЛП(НастройкиПодключения.АдресПрокси)+":"+СокрЛП(НастройкиПодключения.ПортПрокси));
		Если НастройкиПодключения.фИспользоватьЛогинПарольПрокси Тогда
   			WinHttp.SetCredentials(СокрЛП(НастройкиПодключения.ЛогинПрокси), СокрЛП(НастройкиПодключения.ПарольПрокси), 1);
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		WinHttp.Send(ПараметрыПОСТ);
		СтруАвторизация.Вставить("Результат", Истина);
	Исключение
		Индикатор1 = 0;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Сервер недоступен. Проверьте подключение к Интернету.'
						|;uk='Сервер недоступний. Перевірте підключення до мережі Інтернет.'"));
		СтруАвторизация.Вставить("Результат", Ложь);
	КонецПопытки;

	Если СтруАвторизация.Результат Тогда
		СтруАвторизация.Вставить("Токен");
		Попытка
			ТекстОтвета = WinHttp.ResponseText();
		Исключение
			Индикатор1 = 0;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Сервер недоступен. Проверьте подключение к Интернету.'
							|;uk='Сервер недоступний. Перевірте підключення до мережі Інтернет.'"));
			СтруАвторизация.Вставить("Результат", Ложь);
		КонецПопытки;
		
		Если Найти(ТекстОтвета,"Пинкод указан не верно" )=0 тогда
			ЧтениеJSON = Новый ЧтениеJSON;	
			ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
			СтрТокен = ПрочитатьJSON (ЧтениеJSON);	
			Если Не СтрТокен = Неопределено Тогда
				Если СтрТокен.Свойство("access_token") Тогда
					стрПактум_Токен = СтрТокен.access_token;
					СтруДанныеДепозит=Депозит_Пактум(стрПактум_Токен);
					СтруАвторизация.Вставить("Токен", стрПактум_Токен);
					СтруАвторизация.Вставить("Депозит", СтруДанныеДепозит.Депозит);
					СтруАвторизация.Вставить("ДатаСтарт", СтруДанныеДепозит.ДатаСтарт);
					СтруАвторизация.Вставить("ДатаКонец", СтруДанныеДепозит.ДатаКонец);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Пинкод указан не верно';uk= 'Пінкод вказаний не вірно'"));
			СтруАвторизация.Вставить("Результат", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруАвторизация;
КонецФункции

Функция ПроверкаКорректностиЕДРПОУ_Пактум(КодЕДРПОУ) Экспорт
	НастройкиПодключения=ПолучитьНастройкиПодключения();
	
	Стру = Авторизация_Пактум();
	Стру.Вставить("КорректностьЕДРПОУ_Значение", Ложь);
	Стру.Вставить("КорректностьЕДРПОУ_ТекстОшибки", "");
	
	WinHttp = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
	WinHttp.Option(2,"utf-8");
	WinHttp.Open("Get","https://pactumsys.com/api/v1/cba2911c-01f9-4ca7-833a-46fb0cc079f2/contractors/"+КодЕДРПОУ+"?source=1c;skipRegisters=2,3",0); 
	WinHttp.SetRequestHeader("Accept-Language", "ru");
	WinHttp.SetRequestHeader("Accept-Charset","utf-8");
	WinHttp.setRequestHeader("Content-Language", "ru");
	WinHttp.setRequestHeader("Content-Charset", "utf-8");
	WinHttp.setRequestHeader("Authorization", "Bearer "+Стру.Токен);
	WinHttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=utf-8");
	ПараметрыПОСТ = "";
	Если НастройкиПодключения.фИспользоватьПрокси Тогда
		WinHttp.SetProxy(2, СокрЛП(НастройкиПодключения.АдресПрокси)+":"+СокрЛП(НастройкиПодключения.ПортПрокси));
		Если НастройкиПодключения.фИспользоватьЛогинПарольПрокси Тогда
   			WinHttp.SetCredentials(СокрЛП(НастройкиПодключения.ЛогинПрокси), СокрЛП(НастройкиПодключения.ПарольПрокси), 1);
		КонецЕсли;
	КонецЕсли;
	
	фВсеОК=Истина;
	Попытка
		WinHttp.Send(ПараметрыПОСТ);
	Исключение
		фВсеОК=Ложь;
	КонецПопытки;
	
	ТекстОтвета="";
	Если фВсеОК Тогда
		Попытка
			ТекстОтвета = WinHttp.ResponseText();
		Исключение
			фВсеОК=Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если Не фВсеОК Тогда
		Стру.Вставить("КорректностьЕДРПОУ_Значение", Ложь);
		Стру.Вставить("КорректностьЕДРПОУ_ТекстОшибки", НСтр("ru='Сервер недоступен. Проверьте подключение к Интернету.'
						|;uk='Сервер недоступний. Перевірте підключення до мережі Інтернет.'"));
		Возврат Стру;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON; 
	ЧтениеJSON.УстановитьСтроку( ТекстОтвета);
	Контрагент = ПрочитатьJSON (ЧтениеJSON);	
	
	Если Контрагент.Свойство("Status") Тогда
		Стру.Вставить("КорректностьЕДРПОУ_Значение", Истина);
	Иначе
		Стру.Вставить("КорректностьЕДРПОУ_Значение", Ложь);
		Если Контрагент.Message = "Request not authenticated" Тогда
			ТекстОшибки = НСтр("ru='Для автоматизированного заполнения карточки контрагента в соответствии с введенным кодом ЕГРПОУ (ГРФЛ) подключите сервис Пактум.Контрагент: https://portal.bas-soft.eu/applications/76';uk= 'Для автоматизованого заповнення картки контрагента відповідно до введеного коду ЄДРПОУ (ДРФО) підключіть сервіс Пактум.Контрагент: https://portal.bas-soft.eu/applications/76'");
		Иначе
			ТекстОшибки = Контрагент.Message;
		КонецЕсли;
		Стру.Вставить("КорректностьЕДРПОУ_ТекстОшибки", ТекстОшибки);
	КонецЕсли;
	
	Возврат Стру;
КонецФункции

Функция Депозит_Пактум(Токен) Экспорт
	WinHttp = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
	WinHttp.Option(2,"utf-8");
	
	WinHttp.Open("POST","https://pactumsys.com/api/v1/cba2911c-01f9-4ca7-833a-46fb0cc079f2/accounts/profile",0);
	WinHttp.SetRequestHeader("Accept-Language", "ru");
	WinHttp.SetRequestHeader("Accept-Charset","utf-8");
	WinHttp.setRequestHeader("Content-Language", "ru");
	WinHttp.setRequestHeader("Authorization", "Bearer "+Токен);
	WinHttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=utf-8");
	ПараметрыПОСТ = "";
	WinHttp.Send(ПараметрыПОСТ);
	ТекстОтвета = WinHttp.ResponseText();
	СуммаДепозита=0;
	Попытка
		ЧтениеJSON=Новый ЧтениеJSON;	
		ЧтениеJSON.УстановитьСтроку(ТекстОтвета);
		СтрТокен = ПрочитатьJSON(ЧтениеJSON);	
		
		пСумма=0; ДатаСтарт=0; ДатаКонец=0;
		Мас=СтрТокен.Subscriptions;
		Для Каждого Эл Из Мас Цикл
			Если Не Эл.AllowToUse Тогда
				Продолжить;
			КонецЕсли;
			Попытка
				пСумма1=Эл.RequestsLimit;
				Если пСумма1=Неопределено Тогда
					пСумма1=0;
				КонецЕсли;
			Исключение
				пСумма1=0;
			КонецПопытки;
			Попытка
				пСумма2=Эл.TotalUsage;
				Если пСумма2=Неопределено Тогда
					пСумма2=0;
				КонецЕсли;
			Исключение
				пСумма2=0;
			КонецПопытки;
			пСумма=пСумма+пСумма1-пСумма2;
			
			Попытка
				Если Не Эл.StartDate=Неопределено Тогда
					ДатаСтарт=Эл.StartDate;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			Попытка
				Если Не Эл.EndDate=Неопределено Тогда
					ДатаКонец=Эл.EndDate;
				КонецЕсли;
			Исключение
			КонецПопытки;

		КонецЦикла;
		СуммаДепозита=пСумма;
	Исключение
	КонецПопытки;
	
	Стру=Новый Структура;
	Стру.Вставить("Депозит", СуммаДепозита);
	Стру.Вставить("ДатаСтарт", ДатаСтарт);
	Стру.Вставить("ДатаКонец", ДатаКонец);
	Возврат Стру;
КонецФункции

Функция Пактум_Права() Экспорт
	Если РольДоступна("ПолныеПрава") Тогда
		Возврат Истина;
	КонецЕсли;
	Если Не РольДоступна("ПактумИспользование") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Недостаточно прав.';uk='Недостатньо прав.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Процедура ЗапускФоновогоЗадания(Стру) Экспорт
	Мас=Новый Массив;
	Мас.Добавить(Стру);
	ФоновыеЗадания.Выполнить("Пактум_ФоновыеЗадания.ПолучитьКарточкуКонтрагента", Мас, Стру.УИД, "ФоновоеЗадание_Пактум_ПолучитьКарточкуКонтрагента");
КонецПроцедуры

Функция ПолучитьПодтверждение_ЗавершенияФоновогоЗадания(пУИД) Экспорт
	Стру=Новый Структура("Выполнено, Ошибки, ТекстОшибки", Ложь, Ложь, "");
	Зап=Новый Запрос;
	Зап.Текст=
	"ВЫБРАТЬ
	|	Пактум_ФоновыеЗадания.УИД,
	|	Пактум_ФоновыеЗадания.фОшибки,
	|	Пактум_ФоновыеЗадания.ТекстОшибки
	|ИЗ
	|	РегистрСведений.Пактум_ФоновыеЗадания КАК Пактум_ФоновыеЗадания
	|ГДЕ
	|	Пактум_ФоновыеЗадания.УИД = &ВыбУИД";
	Зап.УстановитьПараметр("ВыбУИД", пУИД);
	Рез=Зап.Выполнить();
	Если Не Рез.Пустой() Тогда
		Выб=Рез.Выбрать();
		Выб.Следующий();
		Стру.Выполнено=Истина;
		Стру.Ошибки=Выб.фОшибки;
		Стру.ТекстОшибки=Выб.ТекстОшибки;
	КонецЕсли;
	Возврат Стру;
КонецФункции

Процедура УдалитьИзРегистра_ФоновыеЗадания(пУИД) Экспорт
	пРег=РегистрыСведений.Пактум_ФоновыеЗадания;
	НаборЗаписей=пРег.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УИД.Установить(пУИД);	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Удалить(НаборЗаписей[0]);
		НаборЗаписей.Записать();
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьКонтрагента(КодЕДРПОУ, Код = "") Экспорт
	Стру=Новый Структура("Контрагент, спКонтрагенты, Кво", Неопределено, Новый СписокЗначений, 0);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|	,Контрагенты.Код
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.КодПоЕДРПОУ = &КодПоЕДРПОУ
	|";
	Запрос.УстановитьПараметр("КодПоЕДРПОУ", КодЕДРПОУ);
	Запрос.УстановитьПараметр("Код", Код);
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Стру;
	КонецЕсли;
	
	Выб = Рез.Выбрать();
	Пока Выб.Следующий() Цикл
		Если ЗначениеЗаполнено(Код) Тогда
			Стру.Вставить("Контрагент", Выб.Ссылка);
		КонецЕсли;
		Стру.спКонтрагенты.Добавить(Выб.Ссылка);
	КонецЦикла;
	Стру.Вставить("Кво", Выб.Количество());
	
	Возврат Стру;
КОнецФункции

Функция ВероятноЕДРПОУ(пСтрока) Экспорт
	Если СтрДлина(пСтрока)=8 Или СтрДлина(пСтрока)=10 Тогда
		Если ВсеЦифры(пСтрока) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ВсеЦифры(пСтрока)
	Для А=1 По СтрДлина(пСтрока) Цикл
		пСимв=Сред(пСтрока, А, 1);
		Если Найти("1234567890", пСимв)=0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

Функция ИспользованиеСервисаВозможно() Экспорт
	
	ИспользованиеВозможно = Истина;
	Если ОбщегоНазначения.РазделениеВключено() Тогда 
		// еще не адаптирован для работы в режиме сервиса
		ИспользованиеВозможно = Ложь;
	КонецЕсли;
	Если ОбщегоНазначения.ЭтоLinuxСервер() Тогда 
		// еще не адаптирован для работы в Linux
		ИспользованиеВозможно = Ложь;
	КонецЕсли;
	
	Возврат ИспользованиеВозможно;
КонецФункции
