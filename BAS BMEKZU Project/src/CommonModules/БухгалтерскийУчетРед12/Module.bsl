
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПЕРЕОЦЕНКИ ВАЛЮТНЫХ СЧЕТОВ

// Проверяет, является ли курсовая разница по данным счету и субконто операционной
// (есть ли соответствующая запись в регистре НеоперационнаяКурсоваяРазница) 
//
Функция ВидСтатьиДляПереоценки(СтрокаТаблицы, КвоСубконто, ПереоценкаПоПравиламДоПриказа627 = Ложь)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет", СтрокаТаблицы.Счет);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидМонетарнойСтатьи КАК ВидМонетарнойСтатьи,
	|	ВЫБОР 
	|		КОГДА ВидМонетарнойСтатьи = ЗНАЧЕНИЕ(Перечисление.ВидыМонетарныхСтатейВВалюте.ОбязательстваУчредителей) ТОГДА 1
	|		ИНАЧЕ 0 КОНЕЦ
	|	КАК Порядок,
	|	СписокСчетов.Счет
	|ИЗ
	|	РегистрСведений.МонетарныеСтатьиВВалютеКромеОперационных КАК СписокСчетов
	|ГДЕ
	|	СписокСчетов.Счет = &Счет
	|";
	
	ТекстУпорядочить = "
	|	
	|УПОРЯДОЧИТЬ ПО
   	| 	Порядок УБЫВ
	|";
	
	ТекстФильтры = "";
	
	Если КвоСубконто >= 0 Тогда
		Запрос.УстановитьПараметр("Субконто1", СтрокаТаблицы.Субконто1);
		Запрос.УстановитьПараметр("Субконто1Пустое", Новый(СтрокаТаблицы.Счет.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]));
		ТекстФильтры = ТекстФильтры+" И (СписокСчетов.Субконто1 = &Субконто1 ИЛИ СписокСчетов.Субконто1 = &Субконто1Пустое)
		|";
	КонецЕсли;
	Если КвоСубконто >= 1 Тогда
		Запрос.УстановитьПараметр("Субконто2", СтрокаТаблицы.Субконто2);
		Запрос.УстановитьПараметр("Субконто2Пустое", Новый(СтрокаТаблицы.Счет.ВидыСубконто[1].ВидСубконто.ТипЗначения.Типы()[0]));
		ТекстФильтры = ТекстФильтры+" И (СписокСчетов.Субконто2 = &Субконто2 ИЛИ СписокСчетов.Субконто2 = &Субконто2Пустое)
		|";
	КонецЕсли;
	Если КвоСубконто >= 2 Тогда
		Запрос.УстановитьПараметр("Субконто3", СтрокаТаблицы.Субконто3);
		Запрос.УстановитьПараметр("Субконто3Пустое", Новый(СтрокаТаблицы.Счет.ВидыСубконто[2].ВидСубконто.ТипЗначения.Типы()[0]));
		ТекстФильтры = ТекстФильтры+" И (СписокСчетов.Субконто3 = &Субконто3 ИЛИ СписокСчетов.Субконто3 = &Субконто3Пустое)
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ТекстФильтры + ТекстУпорядочить;

	СписокСчетов = Запрос.Выполнить().Выбрать();
	
	ВидСтатьиДляПереоценки = Неопределено;
	Если СписокСчетов.Следующий() Тогда
		Если ПереоценкаПоПравиламДоПриказа627 ИЛИ (НЕ ЗначениеЗаполнено(СписокСчетов.ВидМонетарнойСтатьи)) Тогда
			// если вдруг переоценка по старым правилам, то любую запись в регистре считаем Неоперационной деятельностью
			ВидСтатьиДляПереоценки = Перечисления.ВидыМонетарныхСтатейВВалюте.НеоперационнаяДеятельность;
		Иначе
			ВидСтатьиДляПереоценки = СписокСчетов.ВидМонетарнойСтатьи
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВидСтатьиДляПереоценки;
	
КонецФункции

// Возвращает структуру счетов для проведния курсовых разниц
//
Функция ПараметрыУчетаКурсовыхРазниц(Знач КлассСчетовРасходов) Экспорт
	
	Запрос = Новый Запрос;
	Если КлассСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8и9 Тогда
		//Если используются оба класса - берем для 9-го
		КлассСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс9;
	КонецЕсли;	
		
	Запрос.УстановитьПараметр("КлассСчетовРасходов", КлассСчетовРасходов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Параметры.СчетДоходов.НалоговыйУчет КАК СчетДоходов_НалоговыйУчет,
	|	Параметры.СчетЗатрат.НалоговыйУчет КАК СчетЗатрат_НалоговыйУчет,
	|	Параметры.СчетКапитала.НалоговыйУчет КАК СчетКапитала_НалоговыйУчет,
	|	Параметры.*
	|ИЗ
	|	РегистрСведений.ПараметрыУчетаКурсовыхРазниц КАК Параметры
	|ГДЕ
	|	Параметры.КлассСчетовРасходов = &КлассСчетовРасходов";

	Параметры = Запрос.Выполнить().Выбрать();
	
	СтруктураПараметров = Новый Структура();
	
	Пока Параметры.Следующий() Цикл
		СтруктураПараметров.Вставить("СчетКапитала", Параметры.СчетКапитала);
		СтруктураПараметров.Вставить("СчетКапитала_НалоговыйУчет", Параметры.СчетКапитала_НалоговыйУчет);
		СтруктураПараметров.Вставить("Субконто1Капитала", Параметры.Субконто1Капитала);
		СтруктураПараметров.Вставить("Субконто2Капитала", Параметры.Субконто2Капитала);
		СтруктураПараметров.Вставить("Субконто3Капитала", Параметры.Субконто3Капитала);
		Если Параметры.Операционная Тогда
			СтруктураПараметров.Вставить("СчетДоходовОпер", Параметры.СчетДоходов);
			СтруктураПараметров.Вставить("СчетДоходовОпер_НалоговыйУчет", Параметры.СчетДоходов_НалоговыйУчет);
			СтруктураПараметров.Вставить("Субконто1ДоходовОпер", Параметры.Субконто1Доходов);
			СтруктураПараметров.Вставить("Субконто2ДоходовОпер", Параметры.Субконто2Доходов);
			СтруктураПараметров.Вставить("Субконто3ДоходовОпер", Параметры.Субконто3Доходов);
			СтруктураПараметров.Вставить("СчетЗатратОпер", Параметры.СчетЗатрат);
			СтруктураПараметров.Вставить("СчетЗатратОпер_НалоговыйУчет", Параметры.СчетЗатрат_НалоговыйУчет);
			СтруктураПараметров.Вставить("Субконто1ЗатратОпер", Параметры.Субконто1Затрат);
			СтруктураПараметров.Вставить("Субконто2ЗатратОпер", Параметры.Субконто2Затрат);
			СтруктураПараметров.Вставить("Субконто3ЗатратОпер", Параметры.Субконто3Затрат);
		Иначе
			СтруктураПараметров.Вставить("СчетДоходовНеОпер", Параметры.СчетДоходов);
			СтруктураПараметров.Вставить("СчетДоходовНеОпер_НалоговыйУчет", Параметры.СчетДоходов_НалоговыйУчет);
			СтруктураПараметров.Вставить("Субконто1ДоходовНеОпер", Параметры.Субконто1Доходов);
			СтруктураПараметров.Вставить("Субконто2ДоходовНеОпер", Параметры.Субконто2Доходов);
			СтруктураПараметров.Вставить("Субконто3ДоходовНеОпер", Параметры.Субконто3Доходов);
			СтруктураПараметров.Вставить("СчетЗатратНеОпер", Параметры.СчетЗатрат);
			СтруктураПараметров.Вставить("СчетЗатратНеОпер_НалоговыйУчет", Параметры.СчетЗатрат_НалоговыйУчет);
			СтруктураПараметров.Вставить("Субконто1ЗатратНеОпер", Параметры.Субконто1Затрат);
			СтруктураПараметров.Вставить("Субконто2ЗатратНеОпер", Параметры.Субконто2Затрат);
			СтруктураПараметров.Вставить("Субконто3ЗатратНеОпер", Параметры.Субконто3Затрат);
		КонецЕсли;	
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции	

// Процедура расчитывает курсовые разницы и формирует проводки в БУ
//
Процедура ПереоценкаСчетаРегл(СтруктураШапкиДокумента, ПроводкиБУ, СчетПереоценки, ВалютаРегламентированногоУчета="", ВставитьПервой=Истина, РассчитыватьОстатки=Истина, Заголовок = Неопределено, ЧастичнаяПереоценка=Ложь, ЗаписьРасчетаПереоценкиВалюты = Неопределено, ПереоценкаПоПравиламДоПриказа627 = Ложь) экспорт
	
	ЕстьНалогНаПрибыльДо2015 = Ложь;
	Если НЕ СтруктураШапкиДокумента.Свойство("ЕстьНалогНаПрибыльДо2015", ЕстьНалогНаПрибыльДо2015) Тогда
		ЕстьНалогНаПрибыльДо2015 = Ложь;
	КонецЕсли;
	
	//Получение списка и аналитики счетов для переоценки
	ТекСчет="";
	СчетПереоценки.Свойство("Счет",ТекСчет);
	Если НЕ ЗначениеЗаполнено(ТекСчет) Тогда
		Возврат;
	КонецЕсли;
	Если Не(ТекСчет.Валютный) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСчета = РегистрыСведений.НемонетарныеСчета.Выбрать(новый структура("Счет",ТекСчет));
	Если ПараметрыСчета.Следующий() И НЕ ЧастичнаяПереоценка Тогда
		Если НЕ (ПараметрыСчета.ТолькоДебет или ПараметрыСчета.ТолькоКредит) Тогда
			Возврат;
		КонецЕсли;
		НемонетарныйДебет  = ПараметрыСчета.ТолькоДебет;
		НемонетарныйКредит = ПараметрыСчета.ТолькоКредит;
	Иначе
		НемонетарныйДебет  = ложь;
		НемонетарныйКредит = ложь;
	КонецЕсли;	
	
	ВалютаРегламентированногоУчета = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;

	Организация     = СтруктураШапкиДокумента.Организация;
	ДатаДока        = СтруктураШапкиДокумента.Дата;
	ДатаКурса = ДатаДока;
	Если НЕ СтруктураШапкиДокумента.Свойство("ДатаКурса", ДатаКурса) Тогда
		ДатаКурса = ДатаДока;
	КонецЕсли;
	Ссылка 			= СтруктураШапкиДокумента.Ссылка;
	Если Заголовок = Неопределено Тогда
		Заголовок = ОбщегоНазначенияБПВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	КонецЕсли; 
	МоментДокумента = Новый МоментВремени( ДатаДока,Ссылка);
	ВалютаДокумента = Неопределено;
	ЗаписьПромежуточныхРасчетов = Не (ЗаписьРасчетаПереоценкиВалюты = Неопределено);

	СтруктураШапкиДокумента.Свойство("ВалютаДокумента",ВалютаДокумента);
	Если ВалютаДокумента = ВалютаРегламентированногоУчета тогда
		ВалютаДокумента = Неопределено;
	КонецЕсли;

	ДанныеОВалютеРег	 = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, ДатаКурса);
	ДанныеОВалютеОстатка = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ДатаКурса);
	
	СчетаУчетаКР = СтруктураШапкиДокумента.СчетаУчетаКР;
	
	//получение остатков, переоценка валютных счетов
	ОстатокВалРегУчета=0;
	ОстатокИнаяВал=0;
	Если РассчитыватьОстатки тогда
		РеестрОстатков=РегистрыБухгалтерии.Хозрасчетный;
		СтруктураОтбора=Новый Структура("Счет",ТекСчет);
		СтруктураОтбора.Вставить("Организация", Организация);
		Если Не (НЕ ЗначениеЗаполнено(ВалютаДокумента)) тогда
			СтруктураОтбора.Вставить("Валюта", ВалютаДокумента);
		КонецЕсли;
	
		Реквизиты="Счет,Валюта";
		ВидыСубконто=Новый массив();
		Для Каждого ТекВидСубконто из ТекСчет.ВидыСубконто цикл
			Если Не(ТекВидСубконто.ТолькоОбороты) тогда
				ВидыСубконто.Добавить(ТекВидСубконто.ВидСубконто);
				Реквизиты=Реквизиты+",Субконто"+(ВидыСубконто.ВГраница()+1);
				ТекЗначениеФильтра="";
				Если СчетПереоценки.Свойство("Субконто"+ТекВидСубконто.НомерСтроки,ТекЗначениеФильтра) тогда
					СтруктураОтбора.Вставить("Субконто"+(ВидыСубконто.ВГраница()+1),ТекЗначениеФильтра);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
			СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
			
			ЗначенияБлокировки = Новый Соответствие;
			ЗначенияБлокировки.Вставить("Организация", 	Организация);
			ЗначенияБлокировки.Вставить("Период",      	Новый Диапазон(, ДатаДока)); 
			ЗначенияБлокировки.Вставить("Счет", 		ТекСчет);			
			Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
				ЗначенияБлокировки.Вставить("Валюта", 	ВалютаДокумента);			
			КонецЕсли;	
				
			ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
		КонецЕсли;
				
		МоментДокумента = Новый МоментВремени(ДатаДока,ПроводкиБУ.Отбор.Регистратор.Значение);
		РеестрОстатков=РеестрОстатков.Остатки(МоментДокумента,ВидыСубконто,СтруктураОтбора,Реквизиты,"Сумма,ВалютнаяСумма");
		Для каждого Стр из РеестрОстатков цикл
			
			ДанныеОВалютеОстатка = МодульВалютногоУчета.ПолучитьКурсВалюты(Стр.Валюта, ДатаКурса);
							 
			ОстатокВалРегУчета=Стр.СуммаОстатокДт-Стр.СуммаОстатокКт;
			ОстатокИнаяВал=Стр.ВалютнаяСуммаОстатокДт-Стр.ВалютнаяСуммаОстатокКт;
			РасчетныйОстатокВалРегУчета=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ОстатокИнаяВал, Стр.Валюта, ВалютаРегламентированногоУчета,
			ДанныеОВалютеОстатка.Курс, ДанныеОВалютеРег.Курс,ДанныеОВалютеОстатка.Кратность,ДанныеОВалютеРег.Кратность);
				
			Если ОстатокВалРегУчета=РасчетныйОстатокВалРегУчета тогда
				Продолжить;
			КонецЕсли;
			
			Если НемонетарныйДебет И (ОстатокИнаяВал > 0) Тогда
				//Дебет немонетарный, остаток дебетовый - не переоцениваем
				Продолжить;
			ИначеЕсли НемонетарныйКредит И (ОстатокИнаяВал < 0) Тогда
				//Кредит немонетарный, остаток кредитовый - не переоцениваем
				Продолжить;	
			КонецЕсли;	
			
			КурсоваяРазница = РасчетныйОстатокВалРегУчета - ОстатокВалРегУчета;
			
			Если ЧастичнаяПереоценка Тогда
				Если ОстатокИнаяВал <>0 Тогда
					КурсоваяРазница = СчетПереоценки.ВалютныйОстаток/ОстатокИнаяВал*КурсоваяРазница;
				Иначе	
					КурсоваяРазница = 0
				КонецЕсли;	
			КонецЕсли;	
		
			Если КурсоваяРазница = 0 тогда
				Продолжить;
			КонецЕсли;
		
			ВидСтатьиДляПереоценки = ВидСтатьиДляПереоценки(Стр, ВидыСубконто.ВГраница(), ПереоценкаПоПравиламДоПриказа627);
			Если (ВставитьПервой) тогда
				Проводка   = ПроводкиБУ.Вставить(0);
			Иначе
				Проводка   = ПроводкиБУ.Добавить();
			КонецЕсли;
			
			Если ЗаписьПромежуточныхРасчетов Тогда
				СтрокаЗаписьРасчетаПереоценкиВалюты = ЗаписьРасчетаПереоценкиВалюты.Добавить();
			КонецЕсли;
			
			Проводка.Период      = ДатаДока;
			Проводка.Активность  = Истина;
			Проводка.Организация = Организация;
			Проводка.Содержание  = НСтр("ru='Переоценка счета';uk='Переоцінка рахунку'",Локализация.КодЯзыкаИнформационнойБазы());
			Если КурсоваяРазница<0 тогда
				Если ВидСтатьиДляПереоценки = Перечисления.ВидыМонетарныхСтатейВВалюте.ОбязательстваУчредителей Тогда
					Проводка.СчетДт = СчетаУчетаКР.СчетКапитала;
					СчетДт_НалоговыйУчет = СчетаУчетаКР.СчетКапитала_НалоговыйУчет;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СчетаУчетаКР.Субконто1Капитала);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СчетаУчетаКР.Субконто2Капитала);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СчетаУчетаКР.Субконто3Капитала);
				ИначеЕсли ВидСтатьиДляПереоценки = Перечисления.ВидыМонетарныхСтатейВВалюте.НеоперационнаяДеятельность Тогда
					Проводка.СчетДт = СчетаУчетаКР.СчетЗатратНеОпер;
					СчетДт_НалоговыйУчет = СчетаУчетаКР.СчетЗатратНеОпер_НалоговыйУчет;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СчетаУчетаКР.Субконто1ЗатратНеОпер);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СчетаУчетаКР.Субконто2ЗатратНеОпер);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СчетаУчетаКР.Субконто3ЗатратНеОпер);
				Иначе // ОперационнаяДеятельность
					Проводка.СчетДт = СчетаУчетаКР.СчетЗатратОпер;
					СчетДт_НалоговыйУчет = СчетаУчетаКР.СчетЗатратОпер_НалоговыйУчет;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СчетаУчетаКР.Субконто1ЗатратОпер);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СчетаУчетаКР.Субконто2ЗатратОпер);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СчетаУчетаКР.Субконто3ЗатратОпер);
				КонецЕсли;
				Проводка.СчетКт = ТекСчет;
				Для А=0 по ВидыСубконто.ВГраница() Цикл
					Проводка.СубконтоКт.Вставить(ВидыСубконто[А],Стр.получить(РеестрОстатков.Колонки.Индекс(РеестрОстатков.Колонки.Найти("Субконто"+(А+1)))));
				КонецЦикла;
				Проводка.ВалютаКт = Стр.Валюта;
				Проводка.Сумма = -КурсоваяРазница;
				
				Если ЕстьНалогНаПрибыльДо2015 И СчетДт_НалоговыйУчет Тогда
					Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
					Проводка.СуммаНУДт = Проводка.Сумма;
				КонецЕсли;
			
			Иначе
				Если ВидСтатьиДляПереоценки = Перечисления.ВидыМонетарныхСтатейВВалюте.ОбязательстваУчредителей Тогда
					Проводка.СчетКт = СчетаУчетаКР.СчетКапитала;
					СчетКт_НалоговыйУчет = СчетаУчетаКР.СчетКапитала_НалоговыйУчет;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СчетаУчетаКР.Субконто1Капитала);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СчетаУчетаКР.Субконто2Капитала);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СчетаУчетаКР.Субконто3Капитала);
				ИначеЕсли ВидСтатьиДляПереоценки = Перечисления.ВидыМонетарныхСтатейВВалюте.НеоперационнаяДеятельность Тогда
					Проводка.СчетКт = СчетаУчетаКР.СчетДоходовНеОпер;
					СчетКт_НалоговыйУчет = СчетаУчетаКР.СчетДоходовНеОпер_НалоговыйУчет;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СчетаУчетаКР.Субконто1ДоходовНеОпер);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СчетаУчетаКР.Субконто2ДоходовНеОпер);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СчетаУчетаКР.Субконто3ДоходовНеОпер);
				Иначе // ОперационнаяДеятельность
					Проводка.СчетКт = СчетаУчетаКР.СчетДоходовОпер;
					СчетКт_НалоговыйУчет = СчетаУчетаКР.СчетДоходовОпер_НалоговыйУчет;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СчетаУчетаКР.Субконто1ДоходовОпер);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СчетаУчетаКР.Субконто2ДоходовОпер);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СчетаУчетаКР.Субконто3ДоходовОпер);
				КонецЕсли;
				Проводка.СчетДт = ТекСчет;
				Для А=0 по ВидыСубконто.ВГраница() Цикл
					Проводка.СубконтоДт.Вставить(ВидыСубконто[А],Стр.получить(РеестрОстатков.Колонки.Индекс(РеестрОстатков.Колонки.Найти("Субконто"+(А+1)))));
				КонецЦикла;
				Проводка.ВалютаДт        = Стр.Валюта;
				Проводка.Сумма = КурсоваяРазница;
				
				Если ЕстьНалогНаПрибыльДо2015 И СчетКт_НалоговыйУчет Тогда
					Проводка.НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
					Проводка.СуммаНУКт = Проводка.Сумма;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗаписьПромежуточныхРасчетов Тогда
				СтрокаЗаписьРасчетаПереоценкиВалюты.Счет           = ТекСчет;
				Для А=0 по ВидыСубконто.ВГраница() Цикл
					СтрокаЗаписьРасчетаПереоценкиВалюты["Субконто"+(А+1)] = Стр.получить(РеестрОстатков.Колонки.Индекс(РеестрОстатков.Колонки.Найти("Субконто"+(А+1))));
				КонецЦикла;
				СтрокаЗаписьРасчетаПереоценкиВалюты.Валюта         = Стр.Валюта;
				СтрокаЗаписьРасчетаПереоценкиВалюты.СуммаВВалюте   = ОстатокИнаяВал;
				СтрокаЗаписьРасчетаПереоценкиВалюты.СуммаВГривнах  = ОстатокВалРегУчета;
				СтрокаЗаписьРасчетаПереоценкиВалюты.КурсПереоценки = ДанныеОВалютеОстатка.Курс;
				СтрокаЗаписьРасчетаПереоценкиВалюты.Сумма          = КурсоваяРазница;
			КонецЕсли;
			
		КонецЦикла;
		Возврат;
	Иначе
		СчетПереоценки.Свойство("ГривневыйОстаток",ОстатокВалРегУчета);
		СчетПереоценки.Свойство("ВалютныйОстаток",ОстатокИнаяВал);
	КонецЕсли;	
	
	РасчетныйОстатокВалРегУчета=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ОстатокИнаяВал, ВалютаДокумента, ВалютаРегламентированногоУчета,
															ДанныеОВалютеОстатка.Курс, ДанныеОВалютеРег.Курс,ДанныеОВалютеОстатка.Кратность, ДанныеОВалютеРег.Кратность);
	Если ОстатокВалРегУчета=РасчетныйОстатокВалРегУчета тогда
		Возврат;
	КонецЕсли;
	
	КурсоваяРазница = РасчетныйОстатокВалРегУчета - ОстатокВалРегУчета;
	ФильтрСубконто = Неопределено;
	
	ВидСтатьиДляПереоценки = ВидСтатьиДляПереоценки(Стр, ВидыСубконто.ВГраница(), ПереоценкаПоПравиламДоПриказа627);
	
	Если (ВставитьПервой) тогда
		Проводка   = ПроводкиБУ.Вставить(0);
	Иначе
		Проводка   = ПроводкиБУ.Добавить();
	КонецЕсли;
	Проводка.Период      = ДатаДока;
	Проводка.Активность  = Истина;
	Проводка.Организация = Организация;
	Проводка.Содержание  = НСтр("ru='Переоценка счета';uk='Переоцінка рахунку'",Локализация.КодЯзыкаИнформационнойБазы());
		
	Если КурсоваяРазница<0 тогда
		Если ВидСтатьиДляПереоценки = Перечисления.ВидыМонетарныхСтатейВВалюте.ОбязательстваУчредителей Тогда
			Проводка.СчетДт = СчетаУчетаКР.СчетКапитала;
			СчетДт_НалоговыйУчет = СчетаУчетаКР.СчетКапитала_НалоговыйУчет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СчетаУчетаКР.Субконто1Капитала);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СчетаУчетаКР.Субконто2Капитала);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СчетаУчетаКР.Субконто3Капитала);
		ИначеЕсли ВидСтатьиДляПереоценки = Перечисления.ВидыМонетарныхСтатейВВалюте.НеоперационнаяДеятельность Тогда
			Проводка.СчетДт = СчетаУчетаКР.СчетЗатратНеОпер;
			СчетДт_НалоговыйУчет = СчетаУчетаКР.СчетЗатратНеОпер_НалоговыйУчет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СчетаУчетаКР.Субконто1ЗатратНеОпер);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СчетаУчетаКР.Субконто2ЗатратНеОпер);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СчетаУчетаКР.Субконто3ЗатратНеОпер);
		Иначе // ОперационнаяДеятельность
			Проводка.СчетДт = СчетаУчетаКР.СчетЗатратОпер;
			СчетДт_НалоговыйУчет = СчетаУчетаКР.СчетЗатратОпер_НалоговыйУчет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СчетаУчетаКР.Субконто1ЗатратОпер);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СчетаУчетаКР.Субконто2ЗатратОпер);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СчетаУчетаКР.Субконто3ЗатратОпер);
		КонецЕсли;
		Проводка.СчетКт = ТекСчет;
		ТекВидСубконто = ТекСчет.ВидыСубконто;
		Для Каждого ТекВидСубконто из ТекСчет.ВидыСубконто цикл
			НомерСубконто=ТекВидСубконто.НомерСтроки;
			Если СчетПереоценки.Свойство("Субконто"+НомерСубконто,ФильтрСубконто) тогда
				Проводка.СубконтоКт.Вставить(ТекВидСубконто.ВидСубконто,ФильтрСубконто);
			КонецЕсли;
		КонецЦикла;
		
		Проводка.ВалютаКт        = ВалютаДокумента;
		Проводка.ВалютнаяСуммаКт = 0;
		Проводка.Сумма = -КурсоваяРазница;
		
		Если ЕстьНалогНаПрибыльДо2015 И СчетДт_НалоговыйУчет Тогда
			Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
			Проводка.СуммаНУДт = Проводка.Сумма;
		КонецЕсли;
		
	ИначеЕсли КурсоваяРазница>0 тогда
		Если ВидСтатьиДляПереоценки = Перечисления.ВидыМонетарныхСтатейВВалюте.ОбязательстваУчредителей Тогда
			Проводка.СчетКт = СчетаУчетаКР.СчетКапитала;
			СчетКт_НалоговыйУчет = СчетаУчетаКР.СчетКапитала_НалоговыйУчет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СчетаУчетаКР.Субконто1Капитала);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СчетаУчетаКР.Субконто2Капитала);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СчетаУчетаКР.Субконто3Капитала);
		ИначеЕсли ВидСтатьиДляПереоценки = Перечисления.ВидыМонетарныхСтатейВВалюте.НеоперационнаяДеятельность Тогда
			Проводка.СчетКт = СчетаУчетаКР.СчетДоходовНеОпер;
			СчетКт_НалоговыйУчет = СчетаУчетаКР.СчетДоходовНеОпер_НалоговыйУчет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СчетаУчетаКР.Субконто1ДоходовНеОпер);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СчетаУчетаКР.Субконто2ДоходовНеОпер);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СчетаУчетаКР.Субконто3ДоходовНеОпер);
		Иначе // ОперационнаяДеятельность
			Проводка.СчетКт = СчетаУчетаКР.СчетДоходовОпер;
			СчетКт_НалоговыйУчет = СчетаУчетаКР.СчетДоходовОпер_НалоговыйУчет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СчетаУчетаКР.Субконто1ДоходовОпер);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СчетаУчетаКР.Субконто2ДоходовОпер);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СчетаУчетаКР.Субконто3ДоходовОпер);
		КонецЕсли;
		Проводка.СчетДт = ТекСчет;
		ТекВидСубконто = ТекСчет.ВидыСубконто;
		Для Каждого ТекВидСубконто из ТекСчет.ВидыСубконто цикл
			НомерСубконто=ТекВидСубконто.НомерСтроки;
			Если СчетПереоценки.Свойство("Субконто"+НомерСубконто,ФильтрСубконто) тогда
				Проводка.СубконтоДт.Вставить(ТекВидСубконто.ВидСубконто,ФильтрСубконто);
			КонецЕсли;
		КонецЦикла;
		
		Проводка.ВалютаДт        = ВалютаДокумента;
		Проводка.ВалютнаяСуммаДт = 0;
		Проводка.Сумма = КурсоваяРазница;
		
		Если ЕстьНалогНаПрибыльДо2015 И СчетКт_НалоговыйУчет Тогда
			Проводка.НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
			Проводка.СуммаНУКт = Проводка.Сумма;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПереоценкаСчетаРегл

// Процедура расчитывает курсовые разницы и формирует проводки в БУ
//
Процедура ПереоценкаСчетаВПределахСуммыОперацииРегл(СтруктураШапкиДокумента, ПроводкиБУ, СчетПереоценки, ВалютаРегламентированногоУчета="", ВставитьПервой=Истина) экспорт
	
	ЕстьНалогНаПрибыльДо2015 = Ложь;
	Если НЕ СтруктураШапкиДокумента.Свойство("ЕстьНалогНаПрибыльДо2015", ЕстьНалогНаПрибыльДо2015) Тогда
		ЕстьНалогНаПрибыльДо2015 = Ложь;
	КонецЕсли;
	
	//Получение списка и аналитики счетов для переоценки
	ТекСчет="";
	СчетПереоценки.Свойство("Счет",ТекСчет);
	Если НЕ ЗначениеЗаполнено(ТекСчет) Тогда
		Возврат;
	КонецЕсли;
	Если Не(ТекСчет.Валютный) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСчета = РегистрыСведений.НемонетарныеСчета.Выбрать(новый структура("Счет",ТекСчет));
	Если ПараметрыСчета.Следующий() Тогда
		Если НЕ (ПараметрыСчета.ТолькоДебет или ПараметрыСчета.ТолькоКредит) Тогда
			Возврат;
		КонецЕсли;
		НемонетарныйДебет  = ПараметрыСчета.ТолькоДебет;
		НемонетарныйКредит = ПараметрыСчета.ТолькоКредит;
	Иначе
		НемонетарныйДебет  = ложь;
		НемонетарныйКредит = ложь;
	КонецЕсли;	
	
	ВалютаРегламентированногоУчета = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;

	Организация     = СтруктураШапкиДокумента.Организация;
	ДатаДока        = СтруктураШапкиДокумента.Дата;
	Ссылка 			= СтруктураШапкиДокумента.Ссылка;
	МоментДокумента = Новый МоментВремени( ДатаДока,Ссылка);
	ВалютаДокумента = Неопределено;

	СтруктураШапкиДокумента.Свойство("ВалютаДокумента",ВалютаДокумента);
	Если ВалютаДокумента = ВалютаРегламентированногоУчета тогда
		ВалютаДокумента = Неопределено;
	КонецЕсли;

	ДанныеОВалютеРег	= МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, ДатаДока);
	ДанныеОВалютеОстатка = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,ДатаДока);
	
	СчетаУчетаКР = СтруктураШапкиДокумента.СчетаУчетаКР;
	
	//получение остатков, переоценка валютных счетов
	
	РеестрОстатков=РегистрыБухгалтерии.Хозрасчетный;
	СтруктураОтбора=Новый Структура("Счет",ТекСчет);
	СтруктураОтбора.Вставить("Организация", Организация);
	Если Не (НЕ ЗначениеЗаполнено(ВалютаДокумента)) тогда
		СтруктураОтбора.Вставить("Валюта", ВалютаДокумента);
	КонецЕсли;

	Реквизиты="Счет,Валюта";
	ВидыСубконто=Новый массив();
	Для Каждого ТекВидСубконто из ТекСчет.ВидыСубконто цикл
		Если Не(ТекВидСубконто.ТолькоОбороты) тогда
			ВидыСубконто.Добавить(ТекВидСубконто.ВидСубконто);
			Реквизиты=Реквизиты+",Субконто"+(ВидыСубконто.ВГраница()+1);
			ТекЗначениеФильтра="";
			Если СчетПереоценки.Свойство("Субконто"+ТекВидСубконто.НомерСтроки,ТекЗначениеФильтра) тогда
				СтруктураОтбора.Вставить("Субконто"+(ВидыСубконто.ВГраница()+1),ТекЗначениеФильтра);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Организация", 	Организация);
		ЗначенияБлокировки.Вставить("Период",      	Новый Диапазон(, ДатаДока)); 
		ЗначенияБлокировки.Вставить("Счет", 		ТекСчет);			
		Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
			ЗначенияБлокировки.Вставить("Валюта", 	ВалютаДокумента);			
		КонецЕсли;	
			
		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
	КонецЕсли;
			
	МоментДокумента = Новый МоментВремени(ДатаДока,ПроводкиБУ.Отбор.Регистратор.Значение);
	РеестрОстатков=РеестрОстатков.Остатки(МоментДокумента,ВидыСубконто,СтруктураОтбора,Реквизиты,"Сумма,ВалютнаяСумма");
	Для каждого Стр из РеестрОстатков цикл
		
		ДанныеОВалютеОстатка = МодульВалютногоУчета.ПолучитьКурсВалюты(Стр.Валюта,ДатаДока);
						 
		ОстатокВалРегУчета=Стр.СуммаОстатокДт-Стр.СуммаОстатокКт;
		ОстатокИнаяВал=Стр.ВалютнаяСуммаОстатокДт-Стр.ВалютнаяСуммаОстатокКт;
		РасчетныйОстатокВалРегУчета=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ОстатокИнаяВал, Стр.Валюта, ВалютаРегламентированногоУчета,
		ДанныеОВалютеОстатка.Курс, ДанныеОВалютеРег.Курс,ДанныеОВалютеОстатка.Кратность,ДанныеОВалютеРег.Кратность);
			
		Если ОстатокВалРегУчета=РасчетныйОстатокВалРегУчета тогда
			Продолжить;
		КонецЕсли;
		
		Если НемонетарныйДебет И (ОстатокИнаяВал > 0) Тогда
			//Дебет немонетарный, остаток дебетовый - не переоцениваем
			Продолжить;
		ИначеЕсли НемонетарныйКредит И (ОстатокИнаяВал < 0) Тогда
			//Кредит немонетарный, остаток кредитовый - не переоцениваем
			Продолжить;	
		КонецЕсли;	
		
		СуммаДляПереоценки = 0;
		Если (СчетПереоценки.СуммаОперации > 0) И (ОстатокИнаяВал < 0) Тогда
			//Операция по дебету, остаток кредитовый
			СуммаДляПереоценки = -Мин(СчетПереоценки.СуммаОперации, -ОстатокИнаяВал);
		ИначеЕсли (СчетПереоценки.СуммаОперации < 0) И (ОстатокИнаяВал > 0) Тогда
			//Операция по кредиту, остаток дебетовый
			СуммаДляПереоценки = Мин(-СчетПереоценки.СуммаОперации, ОстатокИнаяВал);
		КонецЕсли;
		Если СуммаДляПереоценки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КурсоваяРазница = РасчетныйОстатокВалРегУчета - ОстатокВалРегУчета;
		
		Если ОстатокИнаяВал <>0 Тогда
			КурсоваяРазница = СуммаДляПереоценки/ОстатокИнаяВал*КурсоваяРазница;
		Иначе	
			КурсоваяРазница = 0
		КонецЕсли;	
		
		
		Если КурсоваяРазница = 0 тогда
			Продолжить;
		КонецЕсли;
		
		ВидСтатьиДляПереоценки = ВидСтатьиДляПереоценки(Стр, ВидыСубконто.ВГраница());
		
		Если (ВставитьПервой) тогда
			Проводка   = ПроводкиБУ.Вставить(0);
		Иначе
			Проводка   = ПроводкиБУ.Добавить();
		КонецЕсли;
		
		Проводка.Период      = ДатаДока;
		Проводка.Активность  = Истина;
		Проводка.Организация = Организация;
		Проводка.Содержание  = НСтр("ru='Переоценка счета';uk='Переоцінка рахунку'",Локализация.КодЯзыкаИнформационнойБазы());
		Если КурсоваяРазница<0 тогда
			Если ВидСтатьиДляПереоценки = Перечисления.ВидыМонетарныхСтатейВВалюте.ОбязательстваУчредителей Тогда
				Проводка.СчетДт = СчетаУчетаКР.СчетКапитала;
				СчетДт_НалоговыйУчет = СчетаУчетаКР.СчетКапитала_НалоговыйУчет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СчетаУчетаКР.Субконто1Капитала);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СчетаУчетаКР.Субконто2Капитала);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СчетаУчетаКР.Субконто3Капитала);
			ИначеЕсли ВидСтатьиДляПереоценки = Перечисления.ВидыМонетарныхСтатейВВалюте.НеоперационнаяДеятельность Тогда
				Проводка.СчетДт = СчетаУчетаКР.СчетЗатратНеОпер;
				СчетДт_НалоговыйУчет = СчетаУчетаКР.СчетЗатратНеОпер_НалоговыйУчет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СчетаУчетаКР.Субконто1ЗатратНеОпер);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СчетаУчетаКР.Субконто2ЗатратНеОпер);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СчетаУчетаКР.Субконто3ЗатратНеОпер);
			Иначе // ОперационнаяДеятельность
				Проводка.СчетДт = СчетаУчетаКР.СчетЗатратОпер;
				СчетДт_НалоговыйУчет = СчетаУчетаКР.СчетЗатратОпер_НалоговыйУчет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СчетаУчетаКР.Субконто1ЗатратОпер);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СчетаУчетаКР.Субконто2ЗатратОпер);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СчетаУчетаКР.Субконто3ЗатратОпер);
			КонецЕсли;
			Проводка.СчетКт = ТекСчет;
			Для А=0 по ВидыСубконто.ВГраница() Цикл
				Проводка.СубконтоКт.Вставить(ВидыСубконто[А],Стр.получить(РеестрОстатков.Колонки.Индекс(РеестрОстатков.Колонки.Найти("Субконто"+(А+1)))));
			КонецЦикла;
			Проводка.ВалютаКт = Стр.Валюта;
			Проводка.Сумма = -КурсоваяРазница;
			
			Если ЕстьНалогНаПрибыльДо2015 И СчетДт_НалоговыйУчет Тогда
				Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
				Проводка.СуммаНУДт = Проводка.Сумма;
			КонецЕсли;
		
		Иначе
			Если ВидСтатьиДляПереоценки = Перечисления.ВидыМонетарныхСтатейВВалюте.ОбязательстваУчредителей Тогда
				Проводка.СчетКт = СчетаУчетаКР.СчетКапитала;
				СчетКт_НалоговыйУчет = СчетаУчетаКР.СчетКапитала_НалоговыйУчет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СчетаУчетаКР.Субконто1Капитала);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СчетаУчетаКР.Субконто2Капитала);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СчетаУчетаКР.Субконто3Капитала);
			ИначеЕсли ВидСтатьиДляПереоценки = Перечисления.ВидыМонетарныхСтатейВВалюте.НеоперационнаяДеятельность Тогда
				Проводка.СчетКт = СчетаУчетаКР.СчетДоходовНеОпер;
				СчетКт_НалоговыйУчет = СчетаУчетаКР.СчетДоходовНеОпер_НалоговыйУчет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СчетаУчетаКР.Субконто1ДоходовНеОпер);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СчетаУчетаКР.Субконто2ДоходовНеОпер);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СчетаУчетаКР.Субконто3ДоходовНеОпер);
			Иначе // Операционная
				Проводка.СчетКт = СчетаУчетаКР.СчетДоходовОпер;
				СчетКт_НалоговыйУчет = СчетаУчетаКР.СчетДоходовОпер_НалоговыйУчет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СчетаУчетаКР.Субконто1ДоходовОпер);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СчетаУчетаКР.Субконто2ДоходовОпер);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СчетаУчетаКР.Субконто3ДоходовОпер);
			КонецЕсли;
			Проводка.СчетДт = ТекСчет;
			Для А=0 по ВидыСубконто.ВГраница() Цикл
				Проводка.СубконтоДт.Вставить(ВидыСубконто[А],Стр.получить(РеестрОстатков.Колонки.Индекс(РеестрОстатков.Колонки.Найти("Субконто"+(А+1)))));
			КонецЦикла;
			Проводка.ВалютаДт        = Стр.Валюта;
			Проводка.Сумма = КурсоваяРазница;
			
			Если ЕстьНалогНаПрибыльДо2015 И СчетКт_НалоговыйУчет Тогда
				Проводка.НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность;
				Проводка.СуммаНУКт = Проводка.Сумма;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПереоценкаСчетаВПределахСуммыОперацииРегл

// Формирует по проводкам документа список валютных счетов для переоценки, запускает переоценку.
//
// Параметры
// 	Объект          		- ДокументОбъект        	- Документ для которого выполняется процедура.
// 	ВалютаИКурсДокумента	- Структура					- Содержит информацию о валюте, курсе и кратности документа.
//													  	 	Получается с помощью сервисной функции СтруктурироватьВалютаКурсКратность
//		Валюта				- СправочникСсылка.Валюты	- ссылка на валюту документа
//		Курс				- Число
//		Кратность			- Число
//
//  ИспользоватьКурсИзСправочника - Булево				- Для передачи в процедуру переоценки,
//													 	 определяет режим выбора курса при переоценке.
//															Ложь - курс берется из документа.
//															Истина - курс берется из справочника "Валюты".
//															Значение по умолчанию: Ложь.
//
//  ОтражатьНУ 			- Булево						- Отражать движения в налоговом учете
//														 	Значение по умолчанию: Истина.
//
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура ПереоценкаСчетовДокументаРегл(ДокументОбъект, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета="",Отказ, Заголовок = "") Экспорт

	ВалютаРегламентированногоУчета = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	ПроводкиБУ      = ДокументОбъект.Движения.Хозрасчетный;
	ВалютаДокумента = СтруктураШапкиДокумента.ВалютаДокумента;

	Если ПроводкиБУ.Количество() = 0 тогда // (ВалютаДокумента = ВалютаРегламентированногоУчета) ИЛИ
		Возврат;
	КонецЕсли;

	СтруктураШапкиДокумента.Вставить("СчетаУчетаКР", ПараметрыУчетаКурсовыхРазниц(УчетнаяПолитика.ИспользуемыеКлассыСчетовРасходов(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата)));
	Если СтруктураШапкиДокумента.СчетаУчетаКР.Количество() = 0 Тогда
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для организации %1 на дату %2 не указаны параметры учета курсовых разниц!';uk='Для організації %1 на дату %2 не зазначені параметри обліку курсових різниць!'"),СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
		Возврат;
	КонецЕсли;

	ПереоценкаПоПравиламПриказа627 = Ложь;
	Если СтруктураШапкиДокумента.Дата >= БухгалтерскийУчетВызовСервераПовтИсп.ДатаНачалаПереоценкиВалютыПоПравиламПриказа627() Тогда
		ПереоценкаПоПравиламПриказа627 = Истина;		
	КонецЕсли; 
	
	//Подготовка таблицы значений для формирования списка счетов для переоценки
	ТаблицаСчетов = Новый ТаблицаЗначений;
	ТаблицаСчетов.Колонки.Добавить("Счет");
	ТаблицаСчетов.Колонки.Добавить("Субконто1");
	ТаблицаСчетов.Колонки.Добавить("Субконто2");
	ТаблицаСчетов.Колонки.Добавить("Субконто3");
	ТаблицаСчетов.Колонки.Добавить("ИспользованиеС1", Новый ОписаниеТипов("Булево"));
	ТаблицаСчетов.Колонки.Добавить("ИспользованиеС2", Новый ОписаниеТипов("Булево"));
	ТаблицаСчетов.Колонки.Добавить("ИспользованиеС3", Новый ОписаниеТипов("Булево"));
	ТаблицаСчетов.Колонки.Добавить("СуммаОперации", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));

	//Формирование списка счетов для переоценки
	Для каждого ТекПроводка из ПроводкиБУ Цикл

		Если ТекПроводка.СчетКт.Валютный тогда

			ТекСчет = ТекПроводка.СчетКт;
			ТекЗаписьТаблицы      = ТаблицаСчетов.Добавить();
			ТекЗаписьТаблицы.Счет = ТекСчет;

			Для Каждого ТекСубконто из ТекСчет.ВидыСубконто цикл

				ТекЗаписьТаблицы.Установить(ТекСубконто.НомерСтроки, ТекПроводка.СубконтоКт.Получить(ТекСубконто.ВидСубконто));
				ТекЗаписьТаблицы.Установить(ТекСубконто.НомерСтроки + 3,Истина);

			КонецЦикла;
			
			ТекЗаписьТаблицы.СуммаОперации = - ТекПроводка.ВалютнаяСуммаКт;

		КонецЕсли;

		Если ТекПроводка.СчетДт.Валютный тогда

			ТекСчет = ТекПроводка.СчетДт;
			ТекЗаписьТаблицы      = ТаблицаСчетов.Добавить();
			ТекЗаписьТаблицы.Счет = ТекСчет;

			Для Каждого ТекСубконто из ТекСчет.ВидыСубконто цикл

				ТекЗаписьТаблицы.Установить(ТекСубконто.НомерСтроки, ТекПроводка.СубконтоДт.Получить(ТекСубконто.ВидСубконто));
				ТекЗаписьТаблицы.Установить(ТекСубконто.НомерСтроки + 3,Истина);

			КонецЦикла;

			ТекЗаписьТаблицы.СуммаОперации = ТекПроводка.ВалютнаяСуммаДт;
			
		КонецЕсли;

	КонецЦикла;

	ТаблицаСчетов.Свернуть("Счет,Субконто1,Субконто2,Субконто3,ИспользованиеС1,ИспользованиеС2,ИспользованиеС3", "СуммаОперации");
	
	//Запуск процедуры переоценки для каждого счета
	Для каждого ТекСчет из ТаблицаСчетов цикл
		
		Если ПереоценкаПоПравиламПриказа627 И ТекСчет.СуммаОперации = 0 Тогда
			Продолжить;
		КонецЕсли;

		СчетДляПереоценки = новый структура("Счет",ТекСчет.Счет);

		Для Индекс = 1 по 3 Цикл

			Если ТекСчет.Получить(Индекс + 3) тогда
				СчетДляПереоценки.Вставить("Субконто" + Индекс, ТекСчет.Получить(Индекс));
			КонецЕсли;

		КонецЦикла;
		
		СчетДляПереоценки.Вставить("СуммаОперации", ТекСчет.СуммаОперации);
		
		Если ПереоценкаПоПравиламПриказа627 Тогда
			ПереоценкаСчетаВПределахСуммыОперацииРегл(СтруктураШапкиДокумента, ПроводкиБУ, СчетДляПереоценки, ВалютаРегламентированногоУчета, Истина);
		Иначе
			ПереоценкаСчетаРегл(СтруктураШапкиДокумента, ПроводкиБУ, СчетДляПереоценки, ВалютаРегламентированногоУчета, Истина, , , , , Истина); //Явно указваем, что ПереоценкаПоПравиламДоПриказа627
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПереоценкаСчетовДокументаРегл()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СЧЕТАМИ И СУБКОНТО

// Процедура устанавливает субконто на счете по виду субконто. Если такое субконто на счете
// отсутствует, то ничего не делается.
//
// Параметры:
//		Счет - Счет, к которому относится субконто
//      Субконто - набор субконто
//		Номер или имя установливаемого субконто
//      Значение субконто - значение устанавливаемого субконто
//
Процедура УстановитьСубконтоПоВидуСубконто(Счет, Субконто, ВидСубконто, ЗначениеСубконто, Сообщать = Ложь, Заголовок = "") Экспорт

	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
		Возврат;
	КонецЕсли;

	Если Счет.ВидыСубконто.Найти(ВидСубконто) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		Субконто.Вставить(ВидСубконто, ЗначениеСубконто);

	ИначеЕсли Сообщать тогда
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Неверное значение ""%1"" для вида субконто <%2>';uk='Невірне значення ""%1"" для виду субконто <%2>'"), ЗначениеСубконто, ВидСубконто);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);

	КонецЕсли;

КонецПроцедуры // УстановитьСубконто()

// Функция возвращает остаток по счету бухгалтерского учета
// Возвращаемое значение - таблица значений в развороте по аналитике с учетом фильтра
Функция ПолучитьОстатокПоСчету(Организация, Период, Счет, Валюта = Неопределено, Субконто1 = Неопределено, Субконто2 = Неопределено, Субконто3 = Неопределено, ЗнакФильтрПоОстаткам = 0) Экспорт

	ВидПланаСчетов = Счет.Метаданные().Имя;

	Субконто    = Новый Массив(3);
	Субконто[0] = Субконто1;
	Субконто[1] = Субконто2;
	Субконто[2] = Субконто3;

	ФильтрПоСубконто = "";

	Для Каждого ТекВидСубконто Из Счет.ВидыСубконто Цикл
		Если НЕ ТекВидСубконто.ТолькоОбороты И НЕ Субконто[ТекВидСубконто.НомерСтроки-1] = Неопределено Тогда
			ФильтрПоСубконто = ФильтрПоСубконто + " И Субконто" + ТекВидСубконто.НомерСтроки + " = &Субконто" + ТекВидСубконто.НомерСтроки;
		КонецЕсли;
	КонецЦикла;
	
	ВыбиратьВалюту			= (не Счет.Метаданные().ПризнакиУчета.Найти("Валютный")= Неопределено);
	ВыбиратьВалютнуюСумму	= (не Метаданные.РегистрыБухгалтерии[ВидПланаСчетов].Ресурсы.Найти("ВалютнаяСумма")= Неопределено);
	ОтборПоОрганизации		= (не Метаданные.РегистрыБухгалтерии[ВидПланаСчетов].Измерения.Найти("Организация")= Неопределено);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период"      , Период);
	Запрос.УстановитьПараметр("Счет"        , Счет);
	Запрос.УстановитьПараметр("Организация" , Организация);
	Запрос.УстановитьПараметр("Субконто1"   , Субконто[0]);
	Запрос.УстановитьПараметр("Субконто2"   , Субконто[1]);
	Запрос.УстановитьПараметр("Субконто3"   , Субконто[2]);
	Запрос.УстановитьПараметр("Валюта"      , Валюта);
	ВидыСубконто = Счет.ВидыСубконто.ВыгрузитьКолонку("ВидСубконто");
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	ЗнакОстатков = ?(ТипЗнч(ЗнакФильтрПоОстаткам) = Тип("Число"), ЗнакФильтрПоОстаткам, 0);
	Запрос.УстановитьПараметр("Множитель", ?(ЗнакОстатков < 0, -1, 1));
	
	КоличествоСубконто = ВидыСубконто.Количество();
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Счет,"
	+ ?(КоличествоСубконто > 0, " 
	|	Субконто1,", "НЕОПРЕДЕЛЕНО КАК Субконто1,")
	+ ?(КоличествоСубконто > 1, " 
	|	Субконто2,", "НЕОПРЕДЕЛЕНО КАК Субконто2,")
	+ ?(КоличествоСубконто > 2, " 
	|	Субконто3,", "НЕОПРЕДЕЛЕНО КАК Субконто3,")
	+ "
	|	ЕСТЬNULL(СуммаОстаток, 0) * &Множитель КАК СуммаОстаток"
	+ ?(ВыбиратьВалюту, ", 
	|	ЕСТЬNULL(Валюта, НЕОПРЕДЕЛЕНО) КАК Валюта", "")
	+ ?(ВыбиратьВалютнуюСумму, ", 
	|	ЕСТЬNULL(ВалютнаяСуммаОстаток, 0)  * &Множитель КАК ВалютнаяСуммаОстаток", ",
	|	ЕСТЬNULL(СуммаОстаток, 0)  * &Множитель КАК ВалютнаяСуммаОстаток")
	+ "
	|ИЗ
	|	РегистрБухгалтерии." + ВидПланаСчетов + ".Остатки(&Период, Счет = &Счет, &ВидыСубконто, #Фильтр#) КАК Остатки"
	+ ?(ЗнакОстатков <> 0, "
	|
	|ГДЕ
	|	"
	+ ?( НЕ ЗначениеЗаполнено(Валюта), 
	"ЕСТЬNULL(Остатки.СуммаОстаток, 0) * &Множитель > 0", "ЕСТЬNULL(Остатки.ВалютнаяСуммаОстаток, 0) * &Множитель > 0"), "")
	+ "
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Счет,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3"
	+ ?(ВыбиратьВалюту,",
	|	Валюта","");
		
	Фильтр = "";
	Если ОтборПоОрганизации Тогда
		Фильтр = Фильтр + " И Организация = &Организация";
	КонецЕсли;
	ОтборПоВалюте = Счет.Валютный И ЗначениеЗаполнено(Валюта);
	Если ОтборПоВалюте Тогда
		Фильтр = Фильтр + " И Валюта = &Валюта";
	КонецЕсли;
	Фильтр = Фильтр + ФильтрПоСубконто;
	Если Не ПустаяСтрока(Фильтр) Тогда // Убираем первое "И"
		Фильтр = Сред(Фильтр, 3);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Фильтр#", Фильтр);	
	
	Если Истина Тогда
		
		Если ТипЗнч(Период) = Тип("Граница") Тогда
			ПериодДляБлокировки = Период.Значение.Дата;
		ИначеЕсли ТипЗнч(Период) = Тип("МоментВремени") Тогда
		 	ПериодДляБлокировки = Период.Дата;
		Иначе	
		 	ПериодДляБлокировки = Период;
		КонецЕсли; 
		
		СтруктураПараметров = Новый Структура(
			"ТипТаблицы, ИмяТаблицы", 
			"РегистрБухгалтерии", ВидПланаСчетов);
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, ПериодДляБлокировки));
		ЗначенияБлокировки.Вставить("Счет", Счет); 
		ЗначенияБлокировки.Вставить("Организация", Организация); 
		Если ОтборПоВалюте Тогда
			ЗначенияБлокировки.Вставить("Валюта", Валюта); 
		КонецЕсли;
		Для Каждого ТекВидСубконто Из Счет.ВидыСубконто Цикл
			Если НЕ ТекВидСубконто.ТолькоОбороты И НЕ Субконто[ТекВидСубконто.НомерСтроки-1] = Неопределено Тогда
				ЗначенияБлокировки.Вставить(ТекВидСубконто.ВидСубконто, Субконто[ТекВидСубконто.НомерСтроки-1]); 
			КонецЕсли;
		КонецЦикла;
		
		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки);
				
	КонецЕсли;
	
	Остатки = Запрос.Выполнить().Выгрузить();

	Возврат Остатки;

КонецФункции // ПолучитьОстатокПоСчету()

Процедура ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Субконто, ЗначениеСубконто1, ЗначениеСубконто2, ЗначениеСубконто3)

	Если ЗначениеЗаполнено(ЗначениеСубконто1) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто1)) Тогда
		Субконто.Вставить(ВидСубконто.ВидСубконто, ЗначениеСубконто1);

	ИначеЕсли ЗначениеЗаполнено(ЗначениеСубконто2) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто2)) Тогда
		Субконто.Вставить(ВидСубконто.ВидСубконто, ЗначениеСубконто2);

	ИначеЕсли ЗначениеЗаполнено(ЗначениеСубконто3) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто3)) Тогда
		Субконто.Вставить(ВидСубконто.ВидСубконто, ЗначениеСубконто3);

	КонецЕсли;

КонецПроцедуры

// Процедура устанавливает субконто на счете. Если такое субконто не счете
// отсутствует, то ничего не делается.
//
// Параметры:
//		Счет - Счет, к которому относится субконто
//      Субконто - вид субконто
//		Номер или имя установливаемого субконто
//      Значение субконто - значение устанавливаемого субконто
//
Процедура ЗаполнитьСубконто(Проводка, СтрокаДокумента, СубконтоДт1 = Неопределено, СубконтоДт2 = Неопределено, СубконтоДт3 = Неопределено, СубконтоКт1 = Неопределено, СубконтоКт2 = Неопределено, СубконтоКт3 = Неопределено) Экспорт

	// Заполняем дебет:
	Если ЗначениеЗаполнено(Проводка.СчетДт) Тогда

		Для каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл

			Если ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Номенклатура);
			// ИНАГРО ++	
			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.БиологическиеАктивы")) Тогда
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Номенклатура);
			// ИНАГРО --
			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Организация);

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Склады")) Тогда
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Склад);

				Если ЗначениеЗаполнено(СтрокаДокумента.Склад) Тогда
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Склад);

				КонецЕсли;

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
				Если ТипЗнч(СтрокаДокумента.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКонтрагента.Владелец);
				КонецЕсли;

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКонтрагента);
				
			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ВидыНалоговойДеятельности")) Тогда
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ВидНалоговойДеятельности);
				
			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.НоменклатурныеГруппы")) Тогда
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.НоменклатурнаяГруппа);
			КонецЕсли;
			

			ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоДт, СубконтоДт1, СубконтоДт2, СубконтоДт3);

		КонецЦикла;

	КонецЕсли;

	// Заполняем кредит
	Если ЗначениеЗаполнено(Проводка.СчетКт) Тогда

		Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл

			Если ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Номенклатура);
			// ИНАГРО ++	
			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.БиологическиеАктивы")) Тогда
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Номенклатура);
			// ИНАГРО --
			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Организация);

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Склады")) Тогда
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Склад);

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
				Если ТипЗнч(СтрокаДокумента.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКонтрагента.Владелец);
				ИначеЕсли ТипЗнч(СубконтоДт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(СубконтоДт1) Тогда
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СубконтоДт1);
				ИначеЕсли ТипЗнч(СубконтоДт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(СубконтоДт2) Тогда
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СубконтоДт2);
				ИначеЕсли ТипЗнч(СубконтоДт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(СубконтоДт3) Тогда
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СубконтоДт3);
				КонецЕсли;

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКонтрагента);

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ВидыНалоговойДеятельности")) Тогда
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ВидНалоговойДеятельности);
	
			КонецЕсли;

			ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоКт, СубконтоКт1, СубконтоКт2, СубконтоКт3);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСубконто()

