#Область ПрограммныйИнтерфейс

// Заполнение реквизита формы, содержащего список зависимых видов расчета.
//
// Параметры: 
//		Ссылка
//		СписокВидовРасчета - таблица значений с колонкой ВидРасчета.
//
Процедура ЗаполнитьСписокЗависимыхВидовРасчета(Ссылка, СписокВидовРасчета, ИмяТабличнойЧасти, ЗапросПоУдержаниям = "ПланВидовРасчета.ИНАГРО_Начисления") Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Зависимые.Ссылка КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.ИНАГРО_Начисления.ВедущиеВидыРасчета КАК Зависимые
	|ГДЕ
	|	Зависимые.ВидРасчета = &ВидРасчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Зависимые.Ссылка.Наименование";
	
	// замена для удержаний
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПланВидовРасчета.ИНАГРО_Начисления", ЗапросПоУдержаниям);
	// замена для вытесняющих
	Если ИмяТабличнойЧасти = "ВытесняющиеВидыРасчета" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВедущиеВидыРасчета", "ВытесняющиеВидыРасчета");
	КонецЕсли;
	// замена для базовых
	Если ИмяТабличнойЧасти = "БазовыеВидыРасчета" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВедущиеВидыРасчета", "БазовыеВидыРасчета");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВидРасчета", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	СписокВидовРасчета.Очистить();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = СписокВидовРасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

// Дозаполняет ведущие и вытесняющие начисления и расставляет очередность расчета 
// для переданных начислений.
// Вносит изменения в виды начислений, которые зависят от переданных.
// Параметры:
//	ПакетВидовРасчета - соответствие объектов типа ПланВидовРасчетаОбъект.Начисления, 
//		которые необходимо записать, ключом является ссылка
// ВНИМАНИЕ!
//  Все объекты ПакетВидовРасчета должны иметь ссылки, т.е. должны быть 
//  либо уже записаны, либо им должна быть установлена ссылка нового объекта.
//
Процедура ДозаполнитьВидыРасчета(ПакетВидовРасчета) Экспорт
	
	// Корректируем список ведущих по базовым и вытесняющим начислениям.
	Для Каждого КлючИЗначение Из ПакетВидовРасчета Цикл
		ВидРасчета = КлючИЗначение.Значение;
		ВедущиеНачисления = Новый Соответствие;
		// Собираем уже имеющиеся ведущие начисления.
		Для Каждого Строка Из ВидРасчета.ВедущиеВидыРасчета Цикл
			ВедущиеНачисления.Вставить(Строка.ВидРасчета);
		КонецЦикла;
		// Если расчетная база определяется за текущий период, 
		// то базовые виды расчета являются также ведущими.
		Если ИНАГРО_РасчетЗарплатыРасширенный.ЕстьПоказательВКоллекции(ВидРасчета.Показатели, "РасчетнаяБаза") Тогда 
			Для Каждого Строка Из ВидРасчета.БазовыеВидыРасчета Цикл
				ВедущиеНачисления.Вставить(Строка.ВидРасчета);
			КонецЦикла;
		КонецЕсли;
		Если ВидРасчета.СпособРасчета = ПредопределенноеЗначение("Перечисление.СпособыРасчетаНачислений.ИндексацияЗарплаты") Тогда 
			Для Каждого Строка Из ВидРасчета.БазовыеВидыРасчета Цикл
				ВедущиеНачисления.Вставить(Строка.ВидРасчета);
			КонецЦикла;
		КонецЕсли;
		// Удаляем из ведущих ссылку на самого себя, если таковая имеется.
		ВедущиеНачисления.Удалить(КлючИЗначение.Ключ);
		// Полученным соответствием перезаписываем список ведущих.
		ВидРасчета.ВедущиеВидыРасчета.Очистить();
		Для Каждого КлючИЗначение Из ВедущиеНачисления Цикл
			ВидРасчета.ВедущиеВидыРасчета.Добавить().ВидРасчета = КлючИЗначение.Ключ;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыРасчетов.Наименование КАК Наименование,
	|	ВидыРасчетов.Ссылка КАК ВидРасчета,
	|	СписокВедущих.ВидРасчета КАК ВедущийВидРасчета
	|ИЗ
	|	ПланВидовРасчета.ИНАГРО_Начисления КАК ВидыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.ВедущиеВидыРасчета КАК СписокВедущих
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления КАК ВидыРасчетовДляПроверки
	|			ПО СписокВедущих.ВидРасчета = ВидыРасчетовДляПроверки.Ссылка
	|		ПО (СписокВедущих.Ссылка = ВидыРасчетов.Ссылка)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВидыРасчетов = Новый Соответствие;
	// Информация обо всех начислениях.
	Пока Выборка.Следующий() Цикл
		ОписаниеВидаРасчета = ВидыРасчетов[Выборка.ВидРасчета];
		Если ОписаниеВидаРасчета = НеОпределено Тогда
			ОписаниеВидаРасчета = ОписаниеВидаРасчета();
			ОписаниеВидаРасчета.Наименование = Выборка.Наименование;
			ВидыРасчетов[Выборка.ВидРасчета] = ОписаниеВидаРасчета;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ВедущийВидРасчета) Тогда
			ОписаниеВидаРасчета.ВедущиеПрежние.Добавить(Выборка.ВедущийВидРасчета);
			ОписаниеВидаРасчета.Ведущие.Добавить(Выборка.ВедущийВидРасчета);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыРасчетов.Ссылка КАК ВидРасчета,
	|	СписокВытесняющих.ВидРасчета КАК ВытесняющийВидРасчета
	|ИЗ
	|	ПланВидовРасчета.ИНАГРО_Начисления КАК ВидыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.ВытесняющиеВидыРасчета КАК СписокВытесняющих
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления КАК ВидыРасчетовДляПроверки
	|			ПО СписокВытесняющих.ВидРасчета = ВидыРасчетовДляПроверки.Ссылка
	|		ПО (СписокВытесняющих.Ссылка = ВидыРасчетов.Ссылка)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Добавим информацию о вытесняющих видах расчетов.
	Пока Выборка.Следующий() Цикл
		ОписаниеВидаРасчета = ВидыРасчетов[Выборка.ВидРасчета];
		Если ЗначениеЗаполнено(Выборка.ВытесняющийВидРасчета) Тогда
			ОписаниеВидаРасчета.ВытесняющиеПрежние.Добавить(Выборка.ВытесняющийВидРасчета);
			ОписаниеВидаРасчета.Вытесняющие.Добавить(Выборка.ВытесняющийВидРасчета);
		КонецЕсли;
	КонецЦикла;
	
	ЗаказанныеВидыРасчетаСсылки = Новый Массив;
	// Добавим информацию о "заказанных" видах расчета.
	Для Каждого КлючИЗначение Из ПакетВидовРасчета Цикл
		ВидРасчета = КлючИЗначение.Значение;
		Если ВидРасчета.Ссылка.Пустая() Тогда
			Ссылка = ВидРасчета.ПолучитьСсылкуНового();
			ОписаниеВидаРасчета = ОписаниеВидаРасчета();
			ОписаниеВидаРасчета.Заказанный = Истина;
			ОписаниеВидаРасчета.Наименование = ВидРасчета.Наименование;
			ОписаниеВидаРасчета.Объект = ВидРасчета;
			ВидыРасчетов[Ссылка] = ОписаниеВидаРасчета;
			Для Каждого Строка Из ВидРасчета.ВедущиеВидыРасчета Цикл
				ОписаниеВидаРасчета.Ведущие.Добавить(Строка.ВидРасчета);
			КонецЦикла;
			Для Каждого Строка Из ВидРасчета.ВытесняющиеВидыРасчета Цикл
				ОписаниеВидаРасчета.Вытесняющие.Добавить(Строка.ВидРасчета);
			КонецЦикла;
		Иначе
			Ссылка = ВидРасчета.Ссылка;
			ОписаниеВидаРасчета = ВидыРасчетов[Ссылка];
			ОписаниеВидаРасчета.Ведущие.Очистить();
			ОписаниеВидаРасчета.Вытесняющие.Очистить();
			ОписаниеВидаРасчета.Заказанный = Истина;
			ОписаниеВидаРасчета.Наименование = ВидРасчета.Наименование;
			ОписаниеВидаРасчета.Объект = ВидРасчета;
			Для Каждого Строка Из ВидРасчета.ВедущиеВидыРасчета Цикл
				ОписаниеВидаРасчета.Ведущие.Добавить(Строка.ВидРасчета);
			КонецЦикла;
			Для Каждого Строка Из ВидРасчета.ВытесняющиеВидыРасчета Цикл
				Если ВидРасчета.Ссылка <> Строка.ВидРасчета Тогда 
					ОписаниеВидаРасчета.Вытесняющие.Добавить(Строка.ВидРасчета);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ЗаказанныеВидыРасчетаСсылки.Добавить(Ссылка);
	КонецЦикла;
	
	Для Каждого ВидРасчетаСсылка Из ЗаказанныеВидыРасчетаСсылки Цикл
		ОбработанныеВидыРасчета = Новый Соответствие;
		ОбработатьВидРасчетаРекурсивно(ВидРасчетаСсылка, ВидыРасчетов, ОбработанныеВидыРасчета, "Ведущие");
		ОбработанныеВидыРасчета = Новый Соответствие;
		ОбработатьВидРасчетаРекурсивно(ВидРасчетаСсылка, ВидыРасчетов, ОбработанныеВидыРасчета, "Вытесняющие");
	КонецЦикла;
	
	// Зафиксируем все объекты для которых изменилась очередность, состав вытесняющих или состав ведущих.
	Для Каждого Элемент Из ВидыРасчетов Цикл
		ОписаниеВидаРасчета = Элемент.Значение;
		Если ОписаниеВидаРасчета.Очередность <> ОписаниеВидаРасчета.ОчередностьПрежняя Или 
			ОписаниеВидаРасчета.Ведущие.Количество() <> ОписаниеВидаРасчета.ВедущиеПрежние.Количество() Или
			ОписаниеВидаРасчета.Вытесняющие.Количество() <> ОписаниеВидаРасчета.ВытесняющиеПрежние.Количество() Или 
			ОписаниеВидаРасчета.Заказанный Тогда
			Если ОписаниеВидаРасчета.Заказанный Тогда
				ИзменяемыйВидРасчета = ОписаниеВидаРасчета.Объект;
			Иначе
				ИзменяемыйВидРасчета = ПакетВидовРасчета[Элемент.Ключ];
				Если ИзменяемыйВидРасчета = НеОпределено Тогда
					ИзменяемыйВидРасчета = Элемент.Ключ.ПолучитьОбъект();
					ПакетВидовРасчета[Элемент.Ключ] = ИзменяемыйВидРасчета;
				КонецЕсли;
			КонецЕсли;
			ИзменяемыйВидРасчета.ВедущиеВидыРасчета.Очистить();
			Для Каждого ВидРасчета Из ОписаниеВидаРасчета.Ведущие Цикл
				НоваяСтрока = ИзменяемыйВидРасчета.ВедущиеВидыРасчета.Добавить();
				НоваяСтрока.ВидРасчета = ВидРасчета;
			КонецЦикла;
			ИзменяемыйВидРасчета.ВытесняющиеВидыРасчета.Очистить();
			Для Каждого ВидРасчета Из ОписаниеВидаРасчета.Вытесняющие Цикл
				НоваяСтрока = ИзменяемыйВидРасчета.ВытесняющиеВидыРасчета.Добавить();
				НоваяСтрока.ВидРасчета = ВидРасчета;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Записывает объекты-виды расчета.
// Предназначена для записи видов расчета, модифицированных в связи с изменениями 
// в том или ином начислении и зависящих от этих изменений.
// Параметры: 
//		ВидыРасчета - массив или соответствие, значения которого - объекты видов расчета.
//
Процедура ЗаписатьПакетВидовРасчета(ВидыРасчета, ОбновлятьНастройки = Истина) Экспорт
	
	Если ВидыРасчета.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВидыРасчета) = Тип("Соответствие") Тогда
		ВидыРасчетовМассив = Новый Массив;
		Для Каждого Элемент Из ВидыРасчета Цикл
			ВидыРасчетовМассив.Добавить(Элемент.Значение);
		КонецЦикла;
	Иначе
		ВидыРасчетовМассив = ВидыРасчета;
	КонецЕсли;
	
	Для Каждого ВидРасчета Из ВидыРасчетовМассив Цикл
		Попытка
			ВидРасчета.Заблокировать();
		Исключение
			ПредставлениеВидаРасчета = ?(ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаОбъект.ИНАГРО_Начисления"), НСтр("ru = 'начисления'; uk = 'нарахування'"), НСтр("ru = 'удержания'; uk = 'утримання'"));
			ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Нужно внести изменения в %2 «%1». 
				|В данный момент изменение невозможно, потому что %2 редактируется другим пользователем или в другой форме программы'; uk = 'Потрібно внести зміни в %2 «%1».
                |В даний момент зміна неможлива, тому що %2 редагується іншим користувачем або в іншій формі програми'"),
				ВидРасчета.Наименование, ПредставлениеВидаРасчета);
			ВызватьИсключение ТекстИсключенияЗаписи;
		КонецПопытки;
		ВидРасчета.ОбменДанными.Загрузка = Истина;
		Попытка
			ВидРасчета.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Сообщает о показателях используемых при расчете предопределенным способом.
//
// Параметры:
//	- СпособРасчета - ПеречислениеСсылка.СпособыРасчетаНачислений, ПеречислениеСсылка.СпособыРасчетаУдержаний
//
// Возвращаемое значение - массив показателей.
//
Функция ПоказателиПредопределенногоСпособаРасчета(СпособРасчета) Экспорт
	
	ТаблицаПоказателей = ТаблицаПоказателейПредопределенныхСпособовРасчета();
	
	Возврат ОбщегоНазначения.ВыгрузитьКолонку(
		ТаблицаПоказателей.НайтиСтроки(Новый Структура("СпособРасчета", СпособРасчета)), "Показатель");
	
КонецФункции

// Функция возвращает структуру в которой содержатся формула для выполнения и показатели использованные в формуле.
// При подготовке результата проверяется существование использованных показателей и возможность вычисления формулы.
// Если проверка не пройдена - возвращается Неопределено.
//
Функция ПараметрыВыполненияФормулы(Знач Формула, ПроверятьФормулу = Истина, НедопустимыеПоказатели = Неопределено) Экспорт
	
	Отказ = Ложь;	
	
	ПараметрыВыполнения = Неопределено;
	
	Если Не ЗначениеЗаполнено(Формула) Тогда
		Если Не ПроверятьФормулу Тогда
			Возврат ПараметрыВыполнения;
		КонецЕсли;
		ТекстСообщения = НСтр("ru = 'Формула не заполнена';uk = 'Формула не заповнена'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыВыполнения;
	КонецЕсли;
	
	// Получим  из формулы идентификаторы используемых показателей.
	ИдентификаторыПоказателейФормулы = ИдентификаторыПоказателейФормулы(Формула);
	// Проверим существование показателей.
	ПоказателиФормулы = ПоказателиПоИдентификаторам(ИдентификаторыПоказателейФормулы);
	Если ПоказателиФормулы = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыВыполнения;
	КонецЕсли;
	
	// Внесем изменения, связанные с базовыми показателями.
	
	ФормулаДляВыполнения = ФормулаДляВыполнения(Формула, ИдентификаторыПоказателейФормулы);
	
	// Проверим правильность составления формулы.
	Если ПроверятьФормулу Тогда
		ПроверкаДопустимостиИспользованияПоказателей(ПоказателиФормулы, НедопустимыеПоказатели, Отказ);	
		ПроверитьВыполнимостьФормулы(ФормулаДляВыполнения, ИдентификаторыПоказателейФормулы, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат ПараметрыВыполнения;
	КонецЕсли;
	
	Возврат Новый Структура("ФормулаДляВыполнения, ПоказателиФормулы", ФормулаДляВыполнения, ПоказателиФормулы) 
	
КонецФункции

// Для показателя, оцениваемого по шкале, возвращает текст для замены идентификатора в формуле расчета.
//
Функция ТекстЗаменыИдентификатораПоказателяОцениваемогоПоШкале(Показатель, БазовыйПоказательИдентификатор) Экспорт 
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Показатель", Показатель);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа КАК ВерхняяГраницаИнтервалаСтажа,
	               |	ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.ЗначениеПоказателя КАК ЗначениеПоказателя,
	               |	ВЫБОР
	               |		КОГДА ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.ВерхняяГраницаИнтервалаСтажа = 0
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Порядок
	               |ИЗ
	               |	Справочник.ИНАГРО_ПоказателиСхемМотивации.ШкалаОценкиСтажа КАК ПоказателиРасчетаЗарплатыШкалаОценкиСтажа
	               |ГДЕ
	               |	ПоказателиРасчетаЗарплатыШкалаОценкиСтажа.Ссылка = &Показатель
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок,
	               |	ВерхняяГраницаИнтервалаСтажа";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТекстЗамены = "";
	ПредыдущееЗначение = Неопределено;
	Пока Выборка.Следующий() Цикл
		ЗначениеПоказателя = СтрЗаменить(Выборка.ЗначениеПоказателя, ",", ".");
		Если Выборка.ВерхняяГраницаИнтервалаСтажа = 0 Тогда 
			ТекстЗамены = ТекстЗамены + СтрЗаменить(ЗначениеПоказателя, Символы.НПП, "");
			// Если шкала состоит из одной строки с верхней границей 0, то указанное в строке значение применяется 
			// вне зависимости от значения базового показателя.
			Если ПредыдущееЗначение = Неопределено Тогда 
				Прервать;
			КонецЕсли;
		Иначе 
			ТекстЗамены = ТекстЗамены + "?(" + БазовыйПоказательИдентификатор + " < " 
			+ СтрЗаменить(Выборка.ВерхняяГраницаИнтервалаСтажа, Символы.НПП, "") + ", " 
			+ СтрЗаменить(ЗначениеПоказателя, Символы.НПП, "") + ", ";
		КонецЕсли;
		ПредыдущееЗначение = Выборка.ЗначениеПоказателя;	
	КонецЦикла;
	Если Прав(ТекстЗамены, 2) = ", " Тогда 
		ТекстЗамены = ТекстЗамены + 0 + ")";
	КонецЕсли;
	Если Лев(ТекстЗамены, 1) = "?" Тогда 
		Для Сч = 1 По Выборка.Количество() - 1 Цикл 
			ТекстЗамены = ТекстЗамены + ")";
		КонецЦикла;
	КонецЕсли;
	Если ТекстЗамены = "" Тогда 
		ТекстЗамены = ТекстЗамены + 0;
	КонецЕсли;	
	
	Возврат ТекстЗамены;
	
КонецФункции	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция определяет наличие предопределенных показателей 
// в табличной части вида расчета.
//
// Параметры:
//	- Показатели - данные формы коллекция, связанная с табличной частью показателей.
//	- ИмяПредопределенныхДанных - строковое имя предопределенного показателя.
//
Функция ЕстьПоказательВКоллекции(Коллекция, ИмяПредопределенныхДанных) Экспорт
	
	Возврат ЕстьПоказателиВКоллекции(Коллекция, 
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ИНАГРО_ПоказателиСхемМотивации." + ИмяПредопределенныхДанных)));
	
КонецФункции

// Функция проверяет наличие показателей в коллекции.
//
// Параметры:
//	- Коллекция - коллекция строк с колонкой Показатель.
//	- Показатели - массив искомых показателей.
//
// Возвращаемое значение 
//	Истина - в коллекции есть хотя бы один из показателей, 
//	Ложь - в противном случае
//
Функция ЕстьПоказателиВКоллекции(Коллекция, Показатели) Экспорт
	
	Для Каждого СтрокаКоллекции Из Коллекция Цикл
		Если Показатели.Найти(СтрокаКоллекции["Показатель"]) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ОбработатьВидРасчетаРекурсивно(ВидРасчетаСсылка, ВидыРасчетов, ОбработанныеВидыРасчета, ИмяДополняемогоСписка)
	Если ОбработанныеВидыРасчета[ВидРасчетаСсылка] <> НеОпределено Тогда
		Возврат;
	КонецЕсли;
	// Значение соответствия ОбработанныеВидыРасчета - список видов расчета уже использованных для дополнения списка.
	ОбработанныеВидыРасчета[ВидРасчетаСсылка] = Новый Соответствие; 
	
	ОписаниеВидаРасчета = ВидыРасчетов[ВидРасчетаСсылка];
	Если Не ЗначениеЗаполнено(ОписаниеВидаРасчета) Тогда
		Возврат;
	КонецЕсли;
	ДополняемыйСписок = Новый Соответствие;
	СтекВидовРасчета = Новый Соответствие;
	ДополнитьСписокРекурсивно(ВидРасчетаСсылка, ВидыРасчетов, ДополняемыйСписок, СтекВидовРасчета, ОбработанныеВидыРасчета, ИмяДополняемогоСписка, ОбработанныеВидыРасчета[ВидРасчетаСсылка]);
	Если ОписаниеВидаРасчета[ИмяДополняемогоСписка].Количество() < ДополняемыйСписок.Количество() Тогда
		// Если количество ведущих увеличилось - обновим их список...
		ОписаниеВидаРасчета[ИмяДополняемогоСписка].Очистить();
		Для Каждого Элемент Из ДополняемыйСписок Цикл
			ОписаниеВидаРасчета[ИмяДополняемогоСписка].Добавить(Элемент.Ключ);
		КонецЦикла;
		// ...И обработаем виды расчетов, которые зависят от ВидРасчетаСсылка.
		Для Каждого ЭлементСтруктуры Из ВидыРасчетов Цикл
			Если ЭлементСтруктуры.Значение[ИмяДополняемогоСписка].Найти(ВидРасчетаСсылка) <> НеОпределено Тогда
				ОбработатьВидРасчетаРекурсивно(ЭлементСтруктуры.Ключ, ВидыРасчетов, ОбработанныеВидыРасчета, ИмяДополняемогоСписка);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ОписаниеВидаРасчета.Заказанный Тогда
		// В любом случае обработаем виды расчетов, которые зависят от заказанного вида расчета.
		Для Каждого ЭлементСтруктуры Из ВидыРасчетов Цикл
			Если ЭлементСтруктуры.Значение[ИмяДополняемогоСписка].Найти(ВидРасчетаСсылка) <> НеОпределено Тогда
				ОбработатьВидРасчетаРекурсивно(ЭлементСтруктуры.Ключ, ВидыРасчетов, ОбработанныеВидыРасчета, ИмяДополняемогоСписка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСписокРекурсивно(ЗаказанныйВидРасчета, ВидыРасчетов, ДополняемыйСписок, СтекВидовРасчета, ОбработанныеВидыРасчета, ИмяДополняемогоСписка, ИспользованныеДляДополнения)
	Если ИспользованныеДляДополнения[ЗаказанныйВидРасчета] <> НеОпределено Тогда
		Возврат;
	КонецЕсли;
	ИспользованныеДляДополнения[ЗаказанныйВидРасчета] = 0;
	
	ОписаниеВидаРасчета = ВидыРасчетов[ЗаказанныйВидРасчета];
	Если Не ЗначениеЗаполнено(ОписаниеВидаРасчета) Тогда
		Возврат;
	КонецЕсли;
	Если СтекВидовРасчета[ЗаказанныйВидРасчета] <> НеОпределено Тогда
		// рекурсия
		Если ИмяДополняемогоСписка = "Ведущие" Тогда
			ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Задана противоречивая последовательность расчета для начисления %1. Запись начисления в таком положении невозможна'; uk = 'Задана суперечлива послідовність розрахунку для нарахування %1. Запис нарахування в такому становищі неможливий'"),
				ОписаниеВидаРасчета.Наименование);
		ИначеЕсли ИмяДополняемогоСписка = "Вытесняющие" Тогда
			ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Задана противоречивая последовательность расчета для начисления %1. Запись начисления в таком положении невозможна'; uk = 'Задана суперечлива послідовність розрахунку для нарахування %1. Запис нарахування в такому становищі неможливий'"),
				ОписаниеВидаРасчета.Наименование);
		КонецЕсли;
		ВызватьИсключение ТекстИсключенияЗаписи;
	КонецЕсли;
	СтекВидовРасчета[ЗаказанныйВидРасчета] = 0;
		
	Для Каждого ВедущийВР Из ОписаниеВидаРасчета[ИмяДополняемогоСписка] Цикл
		ДополняемыйСписок[ВедущийВР] = 0;
		Если ЗначениеЗаполнено(ВедущийВР) Тогда
			ДополнитьСписокРекурсивно(ВедущийВР, ВидыРасчетов, ДополняемыйСписок, СтекВидовРасчета, ОбработанныеВидыРасчета, ИмяДополняемогоСписка, ИспользованныеДляДополнения);
		КонецЕсли;
	КонецЦикла;
	СтекВидовРасчета.Удалить(ЗаказанныйВидРасчета);
		
КонецПроцедуры

Функция ОписаниеВидаРасчета()
	
	ОписаниеВидаРасчета = Новый Структура("ВедущиеПрежние,Ведущие,ОчередностьПрежняя,Очередность,ВытесняющиеПрежние,Вытесняющие,Заказанный,Наименование,Объект");
	ОписаниеВидаРасчета.ВедущиеПрежние = Новый Массив;
	ОписаниеВидаРасчета.Ведущие = Новый Массив;
	ОписаниеВидаРасчета.Очередность = 0;
	ОписаниеВидаРасчета.ВытесняющиеПрежние = Новый Массив;
	ОписаниеВидаРасчета.Вытесняющие = Новый Массив;
	ОписаниеВидаРасчета.Заказанный = Ложь;
	ОписаниеВидаРасчета.Наименование = "";
	ОписаниеВидаРасчета.Объект = НеОпределено;
	
	Возврат ОписаниеВидаРасчета;
	
КонецФункции

// Сообщает о показателях используемых при расчете предопределенным способом.
//
// Возвращаемое значение - таблица значений с колонками: 
//	- СпособРасчета, 
//	- Показатель
//
Функция ТаблицаПоказателейПредопределенныхСпособовРасчета() Экспорт
		
	ТаблицаПоказателей = Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("СпособРасчета", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыРасчетаНачислений"));
	ТаблицаПоказателей.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.ИНАГРО_ПоказателиСхемМотивации"));
	
	// Показатели предопределенных способов расчета.
	ЗаполнитьПоказателиРасчетаПредопределеннымСпособом(ТаблицаПоказателей);

	Возврат ТаблицаПоказателей;
	
КонецФункции

// Заполнение сведений о показателях, используемых при расчете результата предопределенным способом.
//
// Параметры:
//	- ТаблицаПоказателей - таблица значений с колонками
//		СпособРасчета.
//		Показатель
//
Процедура ЗаполнитьПоказателиРасчетаПредопределеннымСпособом(ТаблицаПоказателей) Экспорт
	
	// Показатели предопределенных способов расчета подсистемы «Расчет зарплаты».
	
	//// Исполнительные листы
	// Не все предопределенные показатели существуют безусловно, 
	// не найденные показатели нужно удалить.
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаПоказателей Из ТаблицаПоказателей Цикл
		Если Не ЗначениеЗаполнено(СтрокаПоказателей.Показатель) Тогда
			УдаляемыеСтроки.Добавить(СтрокаПоказателей);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ТаблицаПоказателей.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Функция выбирает из формулы все слова не являющиеся разделителями и функциями.
// Предполагается, что это показатели.
Функция ИдентификаторыПоказателейФормулы(Формула)
    ИдентификаторыПоказателей = Новый Массив;
	
	РазделителиФормулы = " +-/*?=<>()," + Символы.ВК + Символы.ВТаб + Символы.НПП + Символы.ПС + Символы.ПФ + Символы.Таб;
	ЗарезервированныеСлова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
	"ЦЕЛ,INT,ОКР,ROUND,МАКС,MAX,МИН,MIN,И,ИЛИ,НЕ,OR,AND,NOT");
	
	Слова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Формула, РазделителиФормулы);
	Для Каждого Слово Из Слова Цикл
		// Это число
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрЗаменить(Слово, ".", "")) Тогда
			Продолжить;
		КонецЕсли;
		// Это зарезервированное слово.
		Если ЗарезервированныеСлова.Найти(ВРег(Слово)) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		// Это должен быть показатель
		ИдентификаторыПоказателей.Добавить(Слово);
	КонецЦикла;
	
    Возврат ИдентификаторыПоказателей
КонецФункции 

// Функция проверяет существование показателя по идентификатору и возвращает массив Показателей.
// Если какой-то из показателей не существует, то возвращается Неопределено.
Функция ПоказателиПоИдентификаторам(ИдентификаторыПоказателей)
	
	Отказ = Ложь;
	
	Показатели = Новый Массив;
	Для Каждого Идентификатор Из ИдентификаторыПоказателей Цикл
		// Это должен быть показатель
		Показатель = ПоказательПоИдентификатору(Идентификатор);
		Если Не ЗначениеЗаполнено(Показатель) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось найти показатель по идентификатору %1';uk = 'Не вдалося знайти показник за ідентифікатором %1'"), Идентификатор);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			Продолжить;
		КонецЕсли;
		Показатели.Добавить(Показатель);
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Неопределено
	Иначе	
		Возврат Показатели
	КонецЕсли;
	
КонецФункции 

Функция ПоказательПоИдентификатору(Идентификатор, УчитыватьРегистр = Ложь) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПоказателиРасчетаЗарплаты.Ссылка
	|ИЗ
	|	Справочник.ИНАГРО_ПоказателиСхемМотивации КАК ПоказателиРасчетаЗарплаты
	|ГДЕ
	|	(ПоказателиРасчетаЗарплаты.Идентификатор = &Идентификатор)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция преобразует формулу введенную пользователем в формулу для выполнения при расчете зарплаты.
// К показателям прибавляется префикс.
Функция ФормулаДляВыполнения(Формула, ИдентификаторыПоказателей)
	
	ФормулаДляВыполнения = "";
	
	НачалоСлова = 1;
	Для Позиция = 1 По СтрДлина(Формула) Цикл
		КодСимвола = КодСимвола(Формула, Позиция);
		Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола) Тогда
			ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыПоказателей);
			ФормулаДляВыполнения = ФормулаДляВыполнения + Сред(Формула, Позиция, 1);
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
	ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыПоказателей);
	
	Возврат ФормулаДляВыполнения;
	
КонецФункции

Процедура ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыПоказателей)
	
	Если Позиция <> НачалоСлова Тогда
		Слово = Сред(Формула, НачалоСлова, Позиция - НачалоСлова);
		Если ИдентификаторыПоказателей.Найти(Слово) <> Неопределено Тогда
			ФормулаДляВыполнения = ФормулаДляВыполнения + "ИсходныеДанные." + Слово;
		Иначе
			ФормулаДляВыполнения = ФормулаДляВыполнения + Слово;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверкаДопустимостиИспользованияПоказателей(ПоказателиФормулы, НедопустимыеПоказатели, Отказ)
	
	Если НедопустимыеПоказатели = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПоказательФормулы Из ПоказателиФормулы Цикл
		Если НедопустимыеПоказатели.Найти(ПоказательФормулы) <> Неопределено Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Использование показателя %1 в этой формуле расчета недопустимо.';uk = 'Використання показника %1 у цій формулі розрахунку недопустимо.'"), 
				ИНАГРО_РасчетЗарплатыРасширенный.ПоказательПоИдентификатору(ПоказательФормулы));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура проверяет выполнимость формулы вида расчета.
// Формула должна быть заполнена.
// Существование показателей проверяется функцией ПоказателиПоИдентификаторам.
// Если при выполнении формулы произошла ошибка, то Отказ = Истина.
Процедура ПроверитьВыполнимостьФормулы(ФормулаДляВыполнения, ИдентификаторыПоказателей, Отказ = Ложь)
	
	// Подготовим структуру для выполнения формулы.
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	ИсходныеДанные = Новый Структура;
	Для каждого Показатель Из ИдентификаторыПоказателей Цикл
		ИсходныеДанные.Вставить(Показатель, ГСЧ.СлучайноеЧисло(1,9));
	КонецЦикла;
	
	Попытка 
		Результат = Вычислить(ФормулаДляВыполнения);
	Исключение
		ЕстьОшибка = Истина;
		ТекстСообщения = НСтр("ru = 'При проверке вычисления по формуле возникла ошибка.';uk = 'Під час перевірки вирахування за формулою виникла помилка.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецПопытки
	
КонецПроцедуры

#КонецОбласти