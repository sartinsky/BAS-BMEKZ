////////////////////////////////////////////////////////////////////////////////
// ОБЯЗАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ОБРАБОТЧИКИ СОБЫТИЙ

////////////////////////////////////////////////////////////////////////////////
// Объявление библиотеки

// Заполняет стандартные свойства библиотеки или конфигурации, требуемые для её использования.
// Поставляемая конфигурация должна рассматриваться как потенциальная библиотека, поэтому
// её свойства описываются не только в метаданных, но и в коде, как и для любой библиотеки.
//
// Под библиотекой понимается одна или несколько подсистем, а под конфигурацией все, что
// не принадлежит ни одной библиотеке. Библиотека у которой имя совпадает с именем
// конфигурации в метаданных, считается конечной конфигурацией.
// БСП - всегда первая, конечная конфигурация всегда последняя (например, для порядка обновления ИБ).
// 
// Параметры:
//  Описание - Структура со свойствами:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   ТребуемыеПодсистемы - Массив значений типа Строка, содержащий имена других библиотек.
//                         После получения описаний всех библиотек будет проверено, что
//                         все библиотеки требуемые другими библиотеками зарегистрированы и
//                         будет построена линейная последовательность библиотек по мере
//                         их требуемости. При наличии взаимозависимости или их отсутствии
//                         порядок определяется порядком добавления основных модулей библиотек
//                         в процедуре ПриДобавленииПодсистемы общего модуля
//                         ПодсистемыКонфигурацииПереопределяемый.
//                         Порядок используется при выполнении обработчиков обновления
//                         информационной базы.
//
// Для стандартных процедур в основных модулях библиотек рекомендуется использовать
// не копию комментария, а ссылку на комментарий в модуле этом модуле.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "ЗарплатаКадрыБазовая";
	Описание.Версия = "2.1.15.2";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//
// Параметры:
//  Обработчики - это таблица значений, возвращаемая функцией
//                НоваяТаблицаОбработчиковОбновления модуля ОбновлениеИнформационнойБазы.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия    = "1.0.0.0";
//  Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
// 
//  Все свойства обработчика см. в комментарии к функции
//  НоваяТаблицаОбработчиковОбновления в модуле ОбновлениеИнформационнойБазы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	

	КадровыйУчет.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	РасчетЗарплаты.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ВзаиморасчетыССотрудниками.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетНДФЛ.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетСтраховыхВзносов.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	ОтражениеЗарплатыВБухучете.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	УчетДепонированнойЗарплаты.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПодсистемы.ОбъектыБазовойРеализации") Тогда
		МодульОбъектыБазовойРеализации = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыОбъектыБазовойРеализации");
		МодульОбъектыБазовойРеализации.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения монопольного обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия подсистемы до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия подсистемы после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления
//                                             подсистемы, сгруппированных по номеру версии.
//                            Процедура обхода выполненных обработчиков:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
//   ВыводитьОписаниеОбновлений - Булево (возвращаемое значение)- если установить Истина,
//                                тогда выводить форму с описанием обновлений.
//   МонопольныйРежим           - Булево - признак выполнения обновления в монопольном режиме.
//                                Истина - обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
	// Не используется в БСП.
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы

// Процедура заполняет в документах табличную часть «Физические лица», 
// добавленную для целей ограничения доступа
//
Процедура ЗаполнитьТабличнуюЧастьФизическиеЛица() Экспорт
	
	// Выявляем состав документов, имеющих табличную часть Физические лица
	// В соответствие накапливаем сведения о табличных частях документов, 
	// имеющих реквизиты типа Физическое лицо
	ОбрабатываемыеДокументы = Новый Соответствие;
	Для Каждого МетаданныеДокумента Из Метаданные.Документы Цикл
		Если МетаданныеДокумента.ТабличныеЧасти.Найти("ФизическиеЛица") <> Неопределено Тогда
			ТабличныеЧастиСФизлицами = Новый Соответствие;
			Для Каждого ТабличнаяЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл
				Если ТабличнаяЧасть.Имя = "ФизическиеЛица" Тогда
					Продолжить;
				КонецЕсли;
				Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
					Типы = Реквизит.Тип.Типы();
					Если Типы[0] = Тип("СправочникСсылка.ФизическиеЛица") И Типы.Количество() = 1 Тогда
						ТабличныеЧастиСФизлицами.Вставить(ТабличнаяЧасть.Имя, Реквизит.Имя);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			ОбрабатываемыеДокументы.Вставить(МетаданныеДокумента.Имя, ТабличныеЧастиСФизлицами);
		КонецЕсли;
	КонецЦикла;
	
	// Составляем запрос к документам
	// - из табличных частей документов, имеющих реквизиты типа Физическое лицо, 
	//	выбираем физических лиц,
	// - сравниваем с табличной частью Физические лица,
	// - заполняем табличную часть, если есть различия
	
	ШаблонТекстаНачало = 
	"ВЫБРАТЬ %5
	|	%1.Ссылка КАК Ссылка,
	|	%1.%3 КАК ФизическоеЛицо
	|ПОМЕСТИТЬ %4
	|ИЗ
	|	Документ.%2.%1 КАК %1";
	
	ШаблонТекстаПродолжение = "
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	%1.Ссылка,
	|	%1.%3
	|ИЗ
	|	Документ.%2.%1 КАК %1";
	
	ТекстЗапросаКТабличнымЧастям = "";
	ТекстЗапросаКТабличнойЧастиФизическиеЛица = "";
	Для Каждого ДанныеДокумента Из ОбрабатываемыеДокументы Цикл
		ИмяДокумента = ДанныеДокумента.Ключ;
		Для Каждого КлючИЗначение Из ДанныеДокумента.Значение Цикл
			ИмяТабличнойЧасти = КлючИЗначение.Ключ;
			ИмяРеквизита = КлючИЗначение.Значение;
			Шаблон = ?(ПустаяСтрока(ТекстЗапросаКТабличнымЧастям), ШаблонТекстаНачало, ШаблонТекстаПродолжение);
			ТекстЗапросаКТабличнымЧастям = ТекстЗапросаКТабличнымЧастям + 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Шаблон, ИмяТабличнойЧасти, ИмяДокумента, ИмяРеквизита, "ФизлицаДокументов", "РАЗЛИЧНЫЕ");
		КонецЦикла;
		Шаблон = ?(ПустаяСтрока(ТекстЗапросаКТабличнойЧастиФизическиеЛица), ШаблонТекстаНачало, ШаблонТекстаПродолжение);
		ТекстЗапросаКТабличнойЧастиФизическиеЛица = ТекстЗапросаКТабличнойЧастиФизическиеЛица + 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Шаблон, "ФизическиеЛица", ИмяДокумента, "ФизическоеЛицо", "ФизлицаТабличнойЧасти");
	КонецЦикла;
	
	ТекстЗапроса = 
	ТекстЗапросаКТабличнымЧастям + ";" + 
	ТекстЗапросаКТабличнойЧастиФизическиеЛица + ";" + 
	"ВЫБРАТЬ
	|	ФизлицаДокументов.Ссылка
	|ПОМЕСТИТЬ НедоЗаполненныеДокументы
	|ИЗ
	|	ФизлицаДокументов КАК ФизлицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФизлицаТабличнойЧасти КАК ФизлицаТабличнойЧасти
	|		ПО (ФизлицаТабличнойЧасти.Ссылка = ФизлицаДокументов.Ссылка)
	|			И (ФизлицаТабличнойЧасти.ФизическоеЛицо = ФизлицаДокументов.ФизическоеЛицо)
	|ГДЕ
	|	ФизлицаТабличнойЧасти.ФизическоеЛицо ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизлицаДокументов.Ссылка,
	|	ФизлицаДокументов.ФизическоеЛицо
	|ИЗ
	|	ФизлицаДокументов КАК ФизлицаДокументов
	|ГДЕ
	|	ФизлицаДокументов.Ссылка В
	|			(ВЫБРАТЬ
	|				НедоЗаполненныеДокументы.Ссылка
	|			ИЗ
	|				НедоЗаполненныеДокументы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизлицаДокументов.Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ДокументОбъект.ФизическиеЛица.Добавить(), Выборка);
		КонецЦикла;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

