////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПроверкаРайонногоКоэффициентаПередЗаписью(Источник, Отказ) Экспорт
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарплатаКадрыОрганизацииПередЗаписью(Источник, Отказ) Экспорт
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарплатаКадрыОрганизацииПриЗаписи(Источник, Отказ) Экспорт
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	ЗаписиФО = РегистрыСведений.НастройкиУчетаЗарплаты.СоздатьНаборЗаписей();
	ЗаписиФО.Отбор.Организация.Установить(Источник.Ссылка);
	ЗаписиФО.Прочитать();
	Если ЗаписиФО.Количество() = 0 Тогда
		Строка = ЗаписиФО.Добавить();
	    Строка.Организация = Источник.Ссылка;
		Строка.ОсновнаяКатегорияЗастрахованныхЛиц = Справочники.КатегорииЗастрахованныхЛицЕСВ.НаемныйРаботникНаОбщихОснованиях;
		Строка.СпособОкругления = Справочники.СпособыОкругленияПриВыплатеЗарплаты.БезОкругления;
		ЗаписиФО.Записать();
	КонецЕсли;
КонецПроцедуры

// Обработчик подписки на событие ЗаполнениеФизическихЛиц.
// Предназначена для заполнения физических лиц, 
// используемых при ограничении доступа к документам.
// Выполняется заполнение реквизита типа "Физические лица" по данным реквизита 
// типа "Сотрудники" в шапке или специальной табличной части ФизическиеЛица.
// Кроме того, заполняет реквизит КраткийСоставДокумента
//	
Процедура ЗаполнениеФизическихЛицПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	// Выявление реквизитов, в которых содержатся сотрудники и физические лица:
	МетаданныеИсточника = Источник.Метаданные();
	
	// - в шапке 
	ИмяРеквизитаСотрудник = Неопределено;
	ИмяРеквизитаФизическоеЛицо = Неопределено;
	Для Каждого Реквизит Из МетаданныеИсточника.Реквизиты Цикл
		Типы = Реквизит.Тип.Типы();
		Если Типы[0] = Тип("СправочникСсылка.Сотрудники") И Типы.Количество() = 1 Тогда
			ИмяРеквизитаСотрудник = Реквизит.Имя;
		ИначеЕсли Типы[0] = Тип("СправочникСсылка.ФизическиеЛица") И Типы.Количество() = 1 Тогда
			ИмяРеквизитаФизическоеЛицо = Реквизит.Имя;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнятьШапку = ИмяРеквизитаСотрудник <> Неопределено И ИмяРеквизитаФизическоеЛицо <> Неопределено;
	
	// - в табличных частях
	ЗаполнятьТабличнуюЧасть = МетаданныеИсточника.ТабличныеЧасти.Найти("ФизическиеЛица") <> Неопределено;
	ЗаполнятьКраткийСостав = МетаданныеИсточника.Реквизиты.Найти("КраткийСоставДокумента") <> Неопределено;
	Если ЗаполнятьТабличнуюЧасть Или ЗаполнятьКраткийСостав Тогда
		СписокТабличныхЧастейСотрудники = Новый Соответствие;
		СписокТабличныхЧастейФизическиеЛица = Новый Соответствие;
		Для Каждого ТабличнаяЧасть Из МетаданныеИсточника.ТабличныеЧасти Цикл
			Если ТабличнаяЧасть.Имя <> "ФизическиеЛица" Тогда
				Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
					Типы = Реквизит.Тип.Типы();
					Если Типы[0] = Тип("СправочникСсылка.Сотрудники") И Типы.Количество() = 1 Тогда
						СписокТабличныхЧастейСотрудники.Вставить(ТабличнаяЧасть.Имя, Реквизит.Имя);
					ИначеЕсли Типы[0] = Тип("СправочникСсылка.ФизическиеЛица") И Типы.Количество() = 1 Тогда
						СписокТабличныхЧастейФизическиеЛица.Вставить(ТабличнаяЧасть.Имя, Реквизит.Имя);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Инициализируем поля для последующего заполнения
	Если ЗаполнятьШапку Тогда
		Источник[ИмяРеквизитаФизическоеЛицо] = Неопределено;
	КонецЕсли;
	Если ЗаполнятьТабличнуюЧасть Тогда
		Источник.ФизическиеЛица.Очистить();
	КонецЕсли;
	Если ЗаполнятьКраткийСостав Тогда
		Источник.КраткийСоставДокумента = Неопределено;
	КонецЕсли;
	
	// Сбор данных сотрудников
	Сотрудники = Новый Массив;
	
	Если ЗаполнятьШапку Тогда
		Сотрудники.Добавить(Источник[ИмяРеквизитаСотрудник]);
	КонецЕсли;
	
	Если ЗаполнятьТабличнуюЧасть Или ЗаполнятьКраткийСостав Тогда
		Для Каждого ЭлементСоответствия Из СписокТабличныхЧастейСотрудники Цикл 
			СотрудникиТабличнойЧасти = ОбщегоНазначения.ВыгрузитьКолонку(Источник[ЭлементСоответствия.Ключ], ЭлементСоответствия.Значение, Истина);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Сотрудники, СотрудникиТабличнойЧасти, Истина);
		КонецЦикла;
	КонецЕсли;
	
	// Массив физических лиц
	Физлица = Новый Массив;
	
	// Заполняем данными табличных частей, где непосредственно Физические лица
	Если ЗаполнятьТабличнуюЧасть Или ЗаполнятьКраткийСостав Тогда
		Для Каждого ЭлементСоответствия Из СписокТабличныхЧастейФизическиеЛица Цикл 
			ФизлицаТабличнойЧасти = ОбщегоНазначения.ВыгрузитьКолонку(Источник[ЭлементСоответствия.Ключ], ЭлементСоответствия.Значение, Истина);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Физлица, ФизлицаТабличнойЧасти, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Если Сотрудники.Количество() > 0 Тогда
		// Получение физических лиц для собранных сотрудников
		ФизлицаСотрудников = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
		// Массив физических лиц сотрудников
		МассивФизлицСотрудников = ОбщегоНазначения.ВыгрузитьКолонку(ФизлицаСотрудников, "Значение", Истина);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Физлица, МассивФизлицСотрудников, Истина);
	КонецЕсли;
	
	Если Физлица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение физических лиц
	Если ЗаполнятьШапку Тогда
		Источник[ИмяРеквизитаФизическоеЛицо] = ФизлицаСотрудников[Источник[ИмяРеквизитаСотрудник]];
	КонецЕсли;
	
	Если ЗаполнятьТабличнуюЧасть Тогда
		Источник.ФизическиеЛица.Очистить();
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(Источник.ФизическиеЛица, Физлица, "ФизическоеЛицо");
	КонецЕсли;
	
	// Заполнение краткого состава документа
	Если ЗаполнятьКраткийСостав Тогда
		Источник.КраткийСоставДокумента = ЗарплатаКадры.КраткийСоставСотрудников(Сотрудники, Источник.Дата, Физлица, ФизлицаСотрудников);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодразделенияОрганизацийПередЗаписью(Источник, Отказ) Экспорт
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ОбработкаЗаписиРодителя") И Источник.ДополнительныеСвойства.ОбработкаЗаписиРодителя Тогда
		Возврат;
	КонецЕсли;
	

КонецПроцедуры

Процедура ОбъектыСИдентификаторомПередЗаписью(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗаписьУдалениеОбъектаСИдентификатором") Тогда
		ПолноеИмя = Метаданные.НайтиПоТипу(ТипЗнч(Источник)).ПолноеИмя();
		Если ЗначениеЗаполнено(ЗарплатаКадры.СсылкаНаОбъектПоИдентификатору(ПолноеИмя, Источник.ИдентификаторОбъекта)) Тогда
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Задан неуникальный идентификатор объекта (%1). Запись не выполнена';uk=""Заданий неунікальний ідентифікатора об'єкта (%1). Запис не виконаний"""), Источник.ИдентификаторОбъекта);
		КонецЕсли;
		// В течение сеанса были обращения к этому объекту - 
		// в повторно используемых значениях остались неверные результаты из-за отсутствия объекта
		ОбновитьПовторноИспользуемыеЗначения();
		Возврат;
	КонецЕсли;
	Если Источник.ЭтоНовый() Тогда
		Если НЕ ПустаяСтрока(Источник.ИдентификаторОбъекта) Тогда
			ТекстИсключения = НСтр("ru='Заполнен служебный реквизит ИдентификаторОбъекта. Запись не выполнена';uk='Заповнений службовий реквізит ИдентификаторОбъекта. Запис не виконаний'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Источник.ИдентификаторОбъекта) И Источник.ПометкаУдаления Тогда
			ПредставлениеОбъекта = ЗарплатаКадры.ПредставлениеМетаданных(Источник.Метаданные(), "РасширенноеПредставлениеОбъекта");
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Установка пометки удаления запрещена. Данные используются программой и их удаление невозможно (%1 ""%2"")';uk='Установка позначки видалення заборонена. Дані використовуються програмою і їх видалення неможливо (%1 ""%2"")'"), ПредставлениеОбъекта, Источник.Наименование);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
			
		ПрежнийИдентификатор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ИдентификаторОбъекта");
		Если ПрежнийИдентификатор <> Источник.ИдентификаторОбъекта Тогда
			ТекстИсключения = НСтр("ru='Изменен служебный реквизит ИдентификаторОбъекта. Запись не выполнена';uk='Змінено службовий реквізит ИдентификаторОбъекта. Запис не виконаний'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбъектыСИдентификаторомПередУдалением(Источник, Отказ) Экспорт

	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗаписьУдалениеОбъектаСИдентификатором") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Источник.ИдентификаторОбъекта) Тогда
		ТекстИсключения = НСтр("ru='Попытка удаления объекта с идентификатором';uk=""Спроба вилучення об'єкта з ідентифікатором""");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбъектыСИдентификаторомПриКопировании(Источник, ОбъектКопирования) Экспорт
	Источник.ИдентификаторОбъекта = "";
КонецПроцедуры

Процедура РегистрыУчетаНалоговВзносовСФОТПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаНабора Из Источник Цикл
		СтрокаНабора.Период = НачалоДня(СтрокаНабора.Период)
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьПодчиненностьОрганизации(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Возврат;
	
	Если Не Источник.ЭтоНовый() Тогда
		
		ПредыдущаяГоловнаяОрганизация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ГоловнаяОрганизация");
		Если Источник.ГоловнаяОрганизация <> ПредыдущаяГоловнаяОрганизация Тогда
			
			ЗарплатаКадры.ПроверитьВозможностьСменыГоловнойОрганизации(Источник.Ссылка, Отказ);
			
			Если НЕ Отказ Тогда
				Источник.ДополнительныеСвойства.Вставить("ИзмененаГоловнаяОрганизация", ПредыдущаяГоловнаяОрганизация);
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура УстановитьПодчиненностьОрганизации(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяГоловнаяОрганизация = Неопределено;
	Если НЕ Источник.ДополнительныеСвойства.Свойство("ИзмененаГоловнаяОрганизация", ПредыдущаяГоловнаяОрганизация) Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Источник.Ссылка);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ПредыдущаяГоловнаяОрганизация);
	
	Если ПредыдущаяГоловнаяОрганизация = Источник.Ссылка Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Сотрудники.Ссылка
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|ГДЕ
			|	Сотрудники.ГоловнаяОрганизация = &ГоловнаяОрганизация";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СотрудникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				
				Попытка 
					СотрудникОбъект.Заблокировать();
				Исключение
					ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Не удалось изменить головную организацию ""%1"".
|Возможно, сотрудник редактируется другим пользователем';uk='Не вдалося змінити головну організацію ""%1"".
|Можливо, співробітник редагується іншим користувачем'"),
						СотрудникОбъект.Наименование);			
					ВызватьИсключение ТекстИсключенияЗаписи;
				КонецПопытки;
		
				СотрудникОбъект.ГоловнаяОрганизация = Источник.ГоловнаяОрганизация;
				СотрудникОбъект.Записать();
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Подразделения.Ссылка
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК Подразделения
		|ГДЕ
		|	Подразделения.Владелец = &Организация
		|	И Подразделения.ГоловнаяОрганизация <> &ГоловнаяОрганизация";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ПодразделениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Попытка 
				ПодразделениеОбъект.Заблокировать();
			Исключение
				ТекстИсключенияЗаписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не удалось изменить головную организацию ""%1"".
|Возможно, подразделение редактируется другим пользователем';uk='Не вдалося змінити головну організацію ""%1"".
|Можливо, підрозділ редагується іншим користувачем'"),
					ПодразделениеОбъект.Наименование);			
				ВызватьИсключение ТекстИсключенияЗаписи;
			КонецПопытки;
		
			ПодразделениеОбъект.ГоловнаяОрганизация = Источник.ГоловнаяОрганизация;
			ПодразделениеОбъект.Записать();
			
		КонецЦикла;
		
	КонецЕсли; 
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Процедура ЗапретитьРедактированиеОбщихДанныхНаборЗаписейПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗаписьОбщихДанных") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ПодборИзКлассификатора") Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru='Редактирование общих данных запрещено.';uk='Редагування загальних даних заборонено.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	
КонецПроцедуры

Процедура ЗапретитьРедактированиеОбщихДанныхОбъектПередЗаписью(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗаписьОбщихДанных") Тогда 
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ПодборИзКлассификатора") Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru='Редактирование общих данных запрещено.';uk='Редагування загальних даних заборонено.'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	
КонецПроцедуры

Процедура ПроверитьЗаписьПоУмолчаниюРегистраСведений(Источник, Отказ, Замещение) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаОтсчетаПериодическихСведений = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
	
	Для каждого Запись Из Источник Цикл
		
		Если Запись.Период < ДатаОтсчетаПериодическихСведений Тогда
			
			МетаданныеРегистра = Источник.Метаданные();
			Если МетаданныеРегистра.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Месяц Тогда
				МинимальныйДопустимыйПериод = КонецМесяца(ДатаОтсчетаПериодическихСведений) + 1;
			Иначе
				МинимальныйДопустимыйПериод = КонецДня(ДатаОтсчетаПериодическихСведений) + 1;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Новые значения ""%1"" можно установить не ранее чем с %2';uk='Нові значення ""%1"" можна встановити не раніше ніж з %2'"),
					МетаданныеРегистра.Имя,
					Формат(МинимальныйДопустимыйПериод, "ДЛФ=DD")),
				,
				"Объект.Период",
				,
				Отказ);
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры
