////////////////////////////////////////////////////////////////////////////////
// КадровыйУчетБазовый: методы БЗКБ кадрового учета, работающие на стороне сервера
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СформироватьКадровыеДвижения(РегистраторОбъект, Движения, КадровыеДвижения, ЗаполнятьНаборЗаписей = Истина) Экспорт
	
	Если КадровыеДвижения.Количество() > 0 Тогда
		Движения.КадроваяИсторияСотрудников.Записывать = Истина;
	КонецЕсли; 
	
	Если ЗаполнятьНаборЗаписей Тогда
		КадровыеДвижения.Колонки.ДатаСобытия.Имя = "Период";
		Движения.КадроваяИсторияСотрудников.Загрузить(КадровыеДвижения);
	КонецЕсли; 
	
	Если РегистраторОбъект.ДополнительныеСвойства.Свойство("ОтключитьПроверкуДатыЗапретаИзменения")
		И РегистраторОбъект.ДополнительныеСвойства.ОтключитьПроверкуДатыЗапретаИзменения Тогда
		
		Движения.КадроваяИсторияСотрудников.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// Функции для регламентированной отчётности

Функция СтруктураПераметровСредняяЧисленность() Экспорт
	
	СтруктураПераметров = Новый Структура();
	СтруктураПераметров.Вставить("НачалоПериода",Дата(1,1,1));
	СтруктураПераметров.Вставить("КонецПериода",Дата(1,1,1));
	СтруктураПераметров.Вставить("ВидПериода","МЕСЯЦ");
	СтруктураПераметров.Вставить("ВидСредней","ССЧ");
	СтруктураПераметров.Вставить("ОтборПол",Перечисления.ПолФизическогоЛица.ПустаяСсылка());
	СтруктураПераметров.Вставить("ОтборШтат",Ложь);
	СтруктураПераметров.Вставить("ОтборВнеШтат",Ложь);
	СтруктураПераметров.Вставить("ОтборГПХ",Ложь);
	СтруктураПераметров.Вставить("ОтборИнвалиды",Ложь);
	СтруктураПераметров.Вставить("ОтборНеИнвалиды",Ложь);
	СтруктураПераметров.Вставить("ОтборПенсионеры",Ложь);
	СтруктураПераметров.Вставить("ОтборНеПенсионеры",Ложь);
	СтруктураПераметров.Вставить("ОтборИностранцы",Ложь);
	СтруктураПераметров.Вставить("ОтборДопГарантии",Ложь);
	СтруктураПераметров.Вставить("ОтборДопГарантииНеИнвалиды",Ложь);
	СтруктураПераметров.Вставить("ОтборДопГарантии10Лет",Ложь);
	
	Возврат СтруктураПераметров;
	
КонецФункции

// Осуществляет округление числа по правилу четной цифры
//
// Параметры
//  Значение  – Число – округляемое значение
//
Функция ОкруглитьПоПравилуЧетнойЦифры(Значение)
	
	Если (Значение = Неопределено) или (Значение = NULL) Тогда
		Возврат 0;
	КонецЕсли;	
	
	ЦелаяЧасть = Цел(Значение);
	ДробнаяЧасть = Значение - ЦелаяЧасть;
	Если (ДробнаяЧасть >= 0.6) или (ДробнаяЧасть < 0.5) Тогда
		//Стандартно
		Возврат Окр(Значение);
	КонецЕсли;
	ПоловинаЦелой = Цел(ЦелаяЧасть/2);
	Если (ЦелаяЧасть = (ПоловинаЦелой*2)) Тогда
		//четное - округляем в меньшую
	    Возврат ЦелаяЧасть;
	Иначе
		//нечетное - округляем в большую
		Возврат ЦелаяЧасть+1;
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьСреднююЧисленность(Организация, Параметры) Экспорт
	
	// таблица с результатми
	тбСредняя = Новый ТаблицаЗначений;
	тбСредняя.Колонки.Добавить("Период");
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(МассивТипов, , ,Новый КвалификаторыЧисла(16,3));
	тбСредняя.Колонки.Добавить("Средняя", ОписаниеТиповЧ);

	НС = тбСредняя.Добавить();
	
	//  ВидПериода  – Строка – "МЕСЯЦ", "КВАРТАЛ", "ГОД", "КВАРТАЛСНАЧАЛАГОДА", "МЕСЯЦСНАЧАЛАГОДА" 
	Если ВРЕГ(Параметры.ВидПериода) = "МЕСЯЦ" Тогда
		НС.Период = НачалоМесяца(Параметры.НачалоПериода);
		НС.Средняя = ПолучитьСреднююЧисленностьЗаМесяц(НС.Период, Организация, Параметры);
	ИначеЕсли ВРЕГ(Параметры.ВидПериода) = "КВАРТАЛ" ИЛИ ВРЕГ(Параметры.ВидПериода) = "КВАРТАЛСНАЧАЛАГОДА" ИЛИ ВРЕГ(Параметры.ВидПериода) = "МЕСЯЦСНАЧАЛАГОДА" Тогда
		
		Если ВРЕГ(Параметры.ВидПериода) = "КВАРТАЛ"  Тогда
			ТекДата	= НачалоКвартала(Параметры.НачалоПериода);
		Иначе
			ТекДата	= НачалоГода(Параметры.НачалоПериода);
		КонецЕсли;
		ТекДата = КонецМесяца(ТекДата);
		
		КвоМесяцев = 0;
		ДатаКонца	= Параметры.КонецПериода;
		Пока ТекДата <= ДатаКонца Цикл
			
			СредняяЗаМесяц = ПолучитьСреднююЧисленностьЗаМесяц(ТекДата, Организация, Параметры);
			НС.Средняя = НС.Средняя + СредняяЗаМесяц;
			КвоМесяцев = КвоМесяцев + 1;
			ТекДата = КонецМесяца(ДобавитьМесяц(ТекДата, 1));
			
		КонецЦикла;
		
		НС.Средняя = ?( КвоМесяцев = 0, 0, ОкруглитьПоПравилуЧетнойЦифры(НС.Средняя/КвоМесяцев) );
		
	КонецЕсли;
	
	Возврат тбСредняя;
	
КонецФункции

Функция ПолучитьСреднююЧисленностьЗаМесяц(Период, Организация, Параметры) Экспорт
	
	Если ВРег(Параметры.ВидСредней) = "ССЧ" Тогда
		Возврат ПолучитьСреднююЧисленностьЗаМесяцССЧ(Период, Организация, Параметры);
	ИначеЕсли ВРег(Параметры.ВидСредней) = "ЭПЗ" Тогда
		Возврат ПолучитьСреднююЧисленностьЗаМесяцЭПЗ(Период, Организация, Параметры);
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСреднююЧисленностьЗаМесяцССЧ(Период, Организация, Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Период));
	Запрос.УстановитьПараметр("Пол", Параметры.ОтборПол);
	Если Не Параметры.Свойство("ОтборСотрудники") Тогда
		Запрос.УстановитьПараметр("ОтборСотрудники", Неопределено)
	Иначе	
		Запрос.УстановитьПараметр("ОтборСотрудники", Параметры.ОтборСотрудники);
	КонецЕсли;
	ЗапросСредняяЧисленностьРабота(Параметры, Запрос);
	МассивИнтервальныеФильтры = Новый Массив();
	
	Если Параметры.ОтборИнвалиды Тогда
		
		ПоляСвязей = Новый Структура;
		ПоляСвязей.Вставить("ФизическоеЛицо","ФизическоеЛицо");
		РесурсыРС = Новый Структура;
		РесурсыРС.Вставить("Инвалидность"," = ИСТИНА");
		Запрос.Текст = ЗапросВТИнтервалыДействия("ВТИнвалиды","РегистрСведений.СведенияОбИнвалидностиФизическихЛиц","ВТСотрудники",ПоляСвязей,РесурсыРС,Истина);
		Запрос.Выполнить();
		
		МассивИнтервальныеФильтры.Добавить("ВТИнвалиды");
			
	КонецЕсли;
	
	Если Параметры.ОтборНеИнвалиды Тогда
		
		ПоляСвязей = Новый Структура;
		ПоляСвязей.Вставить("ФизическоеЛицо","ФизическоеЛицо");
		РесурсыРС = Новый Структура;
		РесурсыРС.Вставить("Инвалидность"," = ЛОЖЬ");
		Запрос.Текст = ЗапросВТИнтервалыДействия("ВТНеИнвалиды","РегистрСведений.СведенияОбИнвалидностиФизическихЛиц","ВТСотрудники",ПоляСвязей,РесурсыРС,Истина,Истина);
		Запрос.Выполнить();
		
		МассивИнтервальныеФильтры.Добавить("ВТНеИнвалиды");
			
	КонецЕсли;
	
	Если Параметры.ОтборПенсионеры Тогда
		
		ПоляСвязей = Новый Структура;
		ПоляСвязей.Вставить("ФизическоеЛицо","ФизЛицо");
		РесурсыРС = Новый Структура;
		РесурсыРС.Вставить("Пенсионер"," = ИСТИНА");
		Запрос.Текст = ЗапросВТИнтервалыДействия("ВТПенсионеры","РегистрСведений.СведенияОПенсионерах","ВТСотрудники",ПоляСвязей,РесурсыРС,Ложь);
		Запрос.Выполнить();
		
		
		МассивИнтервальныеФильтры.Добавить("ВТПенсионеры");
		
	КонецЕсли;
	
	Если Параметры.ОтборНеПенсионеры Тогда
		
		ПоляСвязей = Новый Структура;
		ПоляСвязей.Вставить("ФизическоеЛицо","ФизЛицо");
		РесурсыРС = Новый Структура;
		РесурсыРС.Вставить("Пенсионер"," = ЛОЖЬ");
		Запрос.Текст = ЗапросВТИнтервалыДействия("ВТНеПенсионеры","РегистрСведений.СведенияОПенсионерах","ВТСотрудники",ПоляСвязей,РесурсыРС,Ложь,Истина);
		Запрос.Выполнить();
		
		МассивИнтервальныеФильтры.Добавить("ВТНеПенсионеры");
		
	КонецЕсли;
	
	Если Параметры.ОтборИностранцы Тогда
		
		ПоляСвязей = Новый Структура;
		ПоляСвязей.Вставить("ФизическоеЛицо","ФизическоеЛицо");
		РесурсыРС = Новый Структура;
		РесурсыРС.Вставить("Страна"," <> ЗНАЧЕНИЕ(Справочник.СтраныМира.Украина)");
		Запрос.Текст = ЗапросВТИнтервалыДействия("ВТИностранцы","РегистрСведений.ГражданствоФизическихЛиц","ВТСотрудники",ПоляСвязей,РесурсыРС,Ложь);
		Запрос.Выполнить();
		
		МассивИнтервальныеФильтры.Добавить("ВТИностранцы");
		
	КонецЕсли;
	
	Если Параметры.ОтборДопГарантии Тогда
		
		ПоляСвязей = Новый Структура;
		ПоляСвязей.Вставить("ФизическоеЛицо","Физлицо");
		РесурсыРС = Новый Структура;
		РесурсыРС.Вставить("НаличиеГарантий"," = ИСТИНА");
		Запрос.Текст = ЗапросВТИнтервалыДействия("ВТДопГарантии","РегистрСведений.СведенияОЛицахСДополнительнымиГарантиями","ВТСотрудники",ПоляСвязей,РесурсыРС,Ложь);
		Запрос.Выполнить();

		
		МассивИнтервальныеФильтры.Добавить("ВТДопГарантии");
		
	КонецЕсли;
	
	Если Параметры.Свойство("ОтборДопГарантииНеИнвалиды") И Параметры.ОтборДопГарантииНеИнвалиды Тогда
		
		ПоляСвязей = Новый Структура;
		ПоляСвязей.Вставить("ФизическоеЛицо","Физлицо");
		РесурсыРС = Новый Структура;
		РесурсыРС.Вставить("НаличиеГарантий"," = ИСТИНА");
		РесурсыРС.Вставить("ВидГарантии"," <> ЗНАЧЕНИЕ(Справочник.ДополнительныеГарантииВСодействииТрудоустройству.ИнвалидыНеДостигшиеПенсионногоВозраста)");
		Запрос.Текст = ЗапросВТИнтервалыДействия("ВТДопГарантии","РегистрСведений.СведенияОЛицахСДополнительнымиГарантиями","ВТСотрудники",ПоляСвязей,РесурсыРС,Ложь);
		Запрос.Выполнить();

		
		МассивИнтервальныеФильтры.Добавить("ВТДопГарантии");
		
	КонецЕсли;
	
	Если Параметры.Свойство("ОтборДопГарантии10Лет") И  Параметры.ОтборДопГарантии10Лет Тогда
		
		ПоляСвязей = Новый Структура;
		ПоляСвязей.Вставить("ФизическоеЛицо","Физлицо");
		РесурсыРС = Новый Структура;
		РесурсыРС.Вставить("НаличиеГарантий"," = ИСТИНА");
		РесурсыРС.Вставить("ВидГарантии","= ЗНАЧЕНИЕ(Справочник.ДополнительныеГарантииВСодействииТрудоустройству.КомуДоПенсииПоПозрастуОсталось1ОиМеньшеЛет)");
		Запрос.Текст = ЗапросВТИнтервалыДействия("ВТДопГарантии","РегистрСведений.СведенияОЛицахСДополнительнымиГарантиями","ВТСотрудники",ПоляСвязей,РесурсыРС,Ложь);
		Запрос.Выполнить();

		
		МассивИнтервальныеФильтры.Добавить("ВТДопГарантии");
		
	КонецЕсли;
	
	Если МассивИнтервальныеФильтры.Количество() = 0 Тогда
		Запрос.Текст = "ВЫБРАТЬ
		|	ПериодыРаботы.ФизическоеЛицо,
		|	ПериодыРаботы.ДатаНачала,
		|	ПериодыРаботы.ДатаОкончания
		|ПОМЕСТИТЬ ВТПериодыИСотрудники
		|ИЗ
		|   ВТПериодыРаботы КАК ПериодыРаботы
		|";
		Запрос.Выполнить();
	Иначе
		
		//По каждому интервальному фильтру формируем отдельный запрос во временную таблиц
		СхемаЗапроса = Новый СхемаЗапроса;
		Индекс = 0;
		Для Каждого Фильтр Из МассивИнтервальныеФильтры Цикл
			ЗапросФильтр = СхемаЗапроса.ПакетЗапросов.Добавить();
			Если Индекс+1 = МассивИнтервальныеФильтры.Количество() Тогда
				ЗапросФильтр.ТаблицаДляПомещения = "ВТПериодыИСотрудники";
			Иначе	
				ЗапросФильтр.ТаблицаДляПомещения = "ВТИнтервальныеФильтры"+Строка(Индекс);
			КонецЕсли;	
			Оператор = ЗапросФильтр.Операторы[0];
			Оператор.ВыбиратьРазличные = Истина;
			Если Индекс = 0 Тогда
				//В первом запросе основной таблицей является ВТПериодыРаботы
				ИсточникТаблица1 = Оператор.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"),"ВТПериодыРаботы");
				ИмяТаблицы1 = "ВТПериодыРаботы";
				ИсточникТаблица1.Источник.ДоступныеПоля.Добавить("ФизическоеЛицо");
				ИсточникТаблица1.Источник.ДоступныеПоля.Добавить("ДатаНачала");
				ИсточникТаблица1.Источник.ДоступныеПоля.Добавить("ДатаОкончания");
			Иначе
				//В следующих запросах основной является таблица из предыдущего шага
				ИсточникТаблица1 = Оператор.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"),"ВТИнтервальныеФильтры"+Строка(Индекс-1));
				ИмяТаблицы1 = "ВТИнтервальныеФильтры"+Строка(Индекс-1);
				ИсточникТаблица1.Источник.ДоступныеПоля.Добавить("ФизическоеЛицо");
				ИсточникТаблица1.Источник.ДоступныеПоля.Добавить("ДатаНачала");
				ИсточникТаблица1.Источник.ДоступныеПоля.Добавить("ДатаОкончания");
			КонецЕсли;
			//Вторая таблица это интервальный фильтр
			ИсточникТаблица2 = Оператор.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"),Фильтр);
			ИсточникТаблица2.Источник.ДоступныеПоля.Добавить("ФизическоеЛицо");
			ИсточникТаблица2.Источник.ДоступныеПоля.Добавить("ДатаНачала");
			ИсточникТаблица2.Источник.ДоступныеПоля.Добавить("ДатаОкончания");
			//Соединение
			ИсточникТаблица1.Соединения.Добавить(Фильтр,ИмяТаблицы1+".ФизическоеЛицо = "+Фильтр+".ФизическоеЛицо");
			ИсточникТаблица1.Соединения.Добавить(Фильтр,ИмяТаблицы1+".ДатаНачала < "+Фильтр+".ДатаОкончания");
			ИсточникТаблица1.Соединения.Добавить(Фильтр,ИмяТаблицы1+".ДатаОкончания > "+Фильтр+".ДатаНачала");
			ИсточникТаблица1.Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
			ИсточникТаблица1.Соединения[1].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
			ИсточникТаблица1.Соединения[2].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
			Оператор.ВыбираемыеПоля.Добавить(ИмяТаблицы1+".ФизическоеЛицо");
			Оператор.ВыбираемыеПоля.Добавить("ВЫБОР КОГДА "+ИмяТаблицы1+".ДатаНачала > "+Фильтр+".ДатаНачала ТОГДА "+ИмяТаблицы1+".ДатаНачала ИНАЧЕ "+Фильтр+".ДатаНачала КОНЕЦ");
			Оператор.ВыбираемыеПоля.Добавить("ВЫБОР КОГДА "+ИмяТаблицы1+".ДатаОкончания < "+Фильтр+".ДатаОкончания ТОГДА "+ИмяТаблицы1+".ДатаОкончания ИНАЧЕ "+Фильтр+".ДатаОкончания КОНЕЦ");
			ЗапросФильтр.Колонки[0].Псевдоним = "ФизическоеЛицо";
			ЗапросФильтр.Колонки[1].Псевдоним = "ДатаНачала";
			ЗапросФильтр.Колонки[2].Псевдоним = "ДатаОкончания";
			
			ЗапросУничтоженияВТ = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
			ЗапросУничтоженияВТ.ИмяТаблицы = ИмяТаблицы1;
			
			Индекс = Индекс+1;
		КонецЦикла;	
		
		Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
		Запрос.Выполнить();
	КонецЕсли; 	
	
	
	ЗарплатаКадры.СоздатьВТПериоды(Запрос.МенеджерВременныхТаблиц, НачалоМесяца(Период), КонецМесяца(Период), "ДЕНЬ", "Дата", "ВТКалендарь");
	
	Запрос.Текст = "ВЫБРАТЬ
		|	ПериодыИСотрудники.ФизическоеЛицо,
		|	Календарь.Дата
		|ПОМЕСТИТЬ ВТДатыИСотрудники
		|ИЗ
		|   ВТКалендарь КАК Календарь
		|   ЛЕВОЕ СОЕДИНЕНИЕ
		|   ВТПериодыИСотрудники КАК ПериодыИСотрудники
		|   ПО Календарь.Дата >= ПериодыИСотрудники.ДатаНачала
		|    И Календарь.Дата <= ПериодыИСотрудники.ДатаОкончания
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	СУММА(ВЫБОР
        |			КОГДА СписокДат.ФизическоеЛицо ЕСТЬ НЕ NULL 
        |				ТОГДА 1
        |			ИНАЧЕ 0
        |		КОНЕЦ) КАК КоличествоСотрудников,
        |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СписокДат.Дата) КАК ДнейВМесяце
        |ИЗ
        |	ВТДатыИСотрудники КАК СписокДат
		|";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.ДнейВМесяце = 0 Тогда
			Возврат 0;
		Иначе	
			Возврат ОкруглитьПоПравилуЧетнойЦифры(Выборка.КоличествоСотрудников/Выборка.ДнейВМесяце);
		КонецЕсли;	
	Иначе	
		Возврат 0;
	КонецЕсли;	
	
КонецФункции

Процедура ЗапросСредняяЧисленностьРабота(Параметры, Запрос, ИмяВТ = "ВТПериодыРаботы", ИмяВТСотрудники = "ВТСотрудники")
	
	ОтборШтат = Ложь;
	ОтборВнеШтат = Ложь;
	ОтборПол = Неопределено;
	ОтборСотрудники = Неопределено;
	
	Если НЕ Параметры.Свойство("ОтборШтат", ОтборШтат) Тогда
		ОтборШтат = Ложь;
	КонецЕсли;
	Если НЕ Параметры.Свойство("ОтборВнеШтат", ОтборВнеШтат) Тогда
		ОтборВнеШтат = Ложь;
	КонецЕсли;
	Если НЕ Параметры.Свойство("ОтборПол", ОтборПол) Тогда
		ОтборПол = Неопределено;
	КонецЕсли;
	Если НЕ Параметры.Свойство("ОтборСотрудники", ОтборСотрудники) Тогда
		ОтборСотрудники = Неопределено;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	    |	КадроваяИсторияСотрудниковНачало.Сотрудник,
		|	КадроваяИсторияСотрудниковНачало.ФизическоеЛицо,
		|	КадроваяИсторияСотрудниковНачало.ВидЗанятости,
		|	КадроваяИсторияСотрудниковНачало.ВидСобытия,
		|	&НачалоМесяца КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиОрганизацииПериоды
		|ИЗ
		|  РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(&НачалоМесяца, ГоловнаяОрганизация = &Организация) КАК КадроваяИсторияСотрудниковНачало
		|ГДЕ
		|  КадроваяИсторияСотрудниковНачало.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение) 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
	    |	КадроваяИсторияСотрудников.Сотрудник,
		|	КадроваяИсторияСотрудников.ФизическоеЛицо,
		|	КадроваяИсторияСотрудников.ВидЗанятости,
		|	КадроваяИсторияСотрудников.ВидСобытия,
		|	ВЫБОР КОГДА КадроваяИсторияСотрудников.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|		ТОГДА КадроваяИсторияСотрудников.Период
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(КадроваяИсторияСотрудников.Период, ДЕНЬ, 1)
		|	КОНЕЦ КАК Период
		|ИЗ
		|  РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|ГДЕ
		|  КадроваяИсторияСотрудников.ГоловнаяОрганизация = &Организация
		|  И КадроваяИсторияСотрудников.Период > &НачалоМесяца
		|  И КадроваяИсторияСотрудников.Период <= &КонецМесяца
		|";
		
		Запрос.Выполнить();

		
		//Получаем временную таблицу, содержащую интервалы для сотрудников 
		Запрос.Текст ="ВЫБРАТЬ
		|	СотрудникиОрганизацииНачало.Период КАК ДатаНачала,
		|	СотрудникиОрганизацииНачало.Сотрудник КАК Сотрудник,
		|	МИНИМУМ(СотрудникиОрганизацииОкончание.Период) КАК Период
		|ПОМЕСТИТЬ ВТМинимальныеПериоды
		|ИЗ
		|	ВТСотрудникиОрганизацииПериоды КАК СотрудникиОрганизацииНачало
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизацииПериоды КАК СотрудникиОрганизацииОкончание
		|		ПО СотрудникиОрганизацииНачало.Период < СотрудникиОрганизацииОкончание.Период
		|			И (СотрудникиОрганизацииНачало.Сотрудник = СотрудникиОрганизацииОкончание.Сотрудник)
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиОрганизацииНачало.Период,
		|	СотрудникиОрганизацииНачало.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|   СотрудникиОрганизацииНачало.Период КАК ДатаНачала,
		|	СотрудникиОрганизацииНачало.Сотрудник,
		|	СотрудникиОрганизацииНачало.ФизическоеЛицо,
		|	СотрудникиОрганизацииНачало.ВидЗанятости,
		|	ЕСТЬNULL(МинимальныеПериоды.Период, &КонецМесяца) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиОрганизацииИнтервалами
		|ИЗ
		|	ВТСотрудникиОрганизацииПериоды КАК СотрудникиОрганизацииНачало
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМинимальныеПериоды КАК МинимальныеПериоды
		|		ПО (СотрудникиОрганизацииНачало.Период = МинимальныеПериоды.ДатаНачала)
		|			И (СотрудникиОрганизацииНачало.Сотрудник = МинимальныеПериоды.Сотрудник)
		|ГДЕ
		|	СотрудникиОрганизацииНачало.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|";
		Запрос.Выполнить();
		
		
	Иначе
		
		Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|   ВЫБОР 
		|     КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема < &НачалоМесяца
		|     ТОГДА &НачалоМесяца
		|     ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ДатаПриема
		|   КОНЕЦ КАК ДатаНачала,
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
		|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости КАК ВидЗанятости,
		|	ВЫБОР 
		|     КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения > &КонецМесяца
		|     ТОГДА &КонецМесяца
		|     ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
		|   КОНЕЦ КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиОрганизацииИнтервалами
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.ДатаПриема <= &КонецМесяца
		|	И (ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|	   ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения >= &НачалоМесяца)
		|";
		Запрос.Выполнить();
		
	КонецЕсли;	
	
	Запрос.Текст = "ВЫБРАТЬ
		|   СотрудникиОрганизации.ДатаНачала,
		|	СотрудникиОрганизации.Сотрудник,
		|	СотрудникиОрганизации.ФизическоеЛицо,
		|	СотрудникиОрганизации.ДатаОкончания
		|ПОМЕСТИТЬ "+ИмяВТ+"
		|ИЗ
		|   ВТСотрудникиОрганизацииИнтервалами КАК СотрудникиОрганизации
		|ГДЕ
		|   ИСТИНА
		|   И СотрудникиОрганизации.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
		|   "+?(ОтборШтат,"И СотрудникиОрганизации.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)","")+"
		|   "+?(ОтборВнеШтат,"И СотрудникиОрганизации.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)","")+"
		|   "+?(ОтборПол <> Перечисления.ПолФизическогоЛица.ПустаяСсылка() И ОтборПол <> Неопределено,"И СотрудникиОрганизации.ФизическоеЛицо.Пол = &Пол","")+"
		|   "+?(ОтборСотрудники <> Неопределено, "И СотрудникиОрганизации.Сотрудник В(&ОтборСотрудники)","")+"
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо
		|ПОМЕСТИТЬ "+ИмяВТСотрудники+"
		|ИЗ
		|	"+ИмяВТ+" КАК Сотрудники
		|";
		Запрос.Выполнить();
	
КонецПроцедуры

Функция ЗапросВТИнтервалыДействия(ИмяИтоговойВТ, ИмяТаблицыРС, ИмяТаблицыОтбор, ПоляСвязей, РесурсыРС, ЕстьДействуетДо = Ложь, ОбратныйОтбор = Ложь)

	//Создание схемы запроса
	СхемаЗапроса = Новый СхемаЗапроса;
	
	ТаблицаРС = "ТаблицаРегистра";
	ВТПериоды = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТПериоды");
	ВТМинимальныеПериоды = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТМинимальныеПериоды");
	
	Запрос0 = СхемаЗапроса.ПакетЗапросов.Добавить();
	Запрос0.ТаблицаДляПомещения = ВТПериоды;
	Запрос0.ВыбиратьРазрешенные = Истина;
	//Добавляем операторы выбора первого запроса пакета
	ОператорВыбора00 = Запрос0.Операторы[0];
	ОператорВыбора01 = Запрос0.Операторы.Добавить();
	//Источники запроса
	ИсточникТаблицаОтбор00 = ОператорВыбора00.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"),ИмяТаблицыОтбор);
	ИсточникТаблицаРегистра00 = ОператорВыбора00.Источники.Добавить(ИмяТаблицыРС+".СрезПоследних",ТаблицаРС);
	ИсточникТаблицаРегистра00.Источник.Параметры[0].Выражение = Новый ВыражениеСхемыЗапроса("&НачалоМесяца");
	ИсточникТаблицаОтбор01 = ОператорВыбора01.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"),ИмяТаблицыОтбор);
	ИсточникТаблицаРегистра01 = ОператорВыбора01.Источники.Добавить(ИмяТаблицыРС,ТаблицаРС);
	Если ЕстьДействуетДо Тогда
		ОператорВыбора02 = Запрос0.Операторы.Добавить();
		ИсточникТаблицаОтбор02 = ОператорВыбора02.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"),ИмяТаблицыОтбор);
		ИсточникТаблицаРегистра02 = ОператорВыбора02.Источники.Добавить(ИмяТаблицыРС,ТаблицаРС);
	КонецЕсли;	
	
	ОператорВыбора00.ВыбираемыеПоля.Добавить(ТаблицаРС+".Период");
	Запрос0.Колонки[0].Псевдоним = "Период";
	ОператорВыбора01.ВыбираемыеПоля.Добавить(ТаблицаРС+".Период");
	ОператорВыбора00.ВыбираемыеПоля[0] = Новый ВыражениеСхемыЗапроса("&НачалоМесяца");
	Запрос0.Колонки[0].Псевдоним = "Период";
	Если ЕстьДействуетДо Тогда
		ОператорВыбора02.ВыбираемыеПоля.Добавить(ТаблицаРС+".Период");
		ОператорВыбора02.ВыбираемыеПоля[0] = Новый ВыражениеСхемыЗапроса("ДОБАВИТЬКДАТЕ("+ТаблицаРС+".ДействуетДо, ДЕНЬ, 1)");
		Запрос0.Колонки[0].Псевдоним = "Период";
	КонецЕсли;	
	
	//Поля связи добавляем: в выбираемые поля, индексы, связи, доступные поля
	Индекс = 0;
	Для Каждого Поле ИЗ ПоляСвязей Цикл
		ИсточникТаблицаОтбор00.Источник.ДоступныеПоля.Добавить(Поле.Ключ);
		ИсточникТаблицаОтбор01.Источник.ДоступныеПоля.Добавить(Поле.Ключ);
		ОператорВыбора00.ВыбираемыеПоля.Добавить(ИмяТаблицыОтбор+"."+Поле.Ключ);
		ОператорВыбора01.ВыбираемыеПоля.Добавить(ИмяТаблицыОтбор+"."+Поле.Ключ);
		//Запрос0.Индекс.Добавить(ИмяТаблицыОтбор+"."+Поле.Ключ);
		Если НЕ ОбратныйОтбор Тогда
			ИсточникТаблицаРегистра00.Соединения.Добавить(ИмяТаблицыОтбор,ИмяТаблицыОтбор+"."+Поле.Ключ+" = "+ТаблицаРС+"."+Поле.Значение);
			ИсточникТаблицаРегистра00.Соединения[Индекс].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
		Иначе
			//Если идет обратный отбор используем не внутреннее соединение, а правое
			ИсточникТаблицаРегистра00.Соединения.Добавить(ИмяТаблицыОтбор,ИмяТаблицыОтбор+"."+Поле.Ключ+" = "+ТаблицаРС+"."+Поле.Значение);
			ИсточникТаблицаРегистра00.Соединения[Индекс].ТипСоединения = ТипСоединенияСхемыЗапроса.ПравоеВнешнее;
		КонецЕсли;	
		ИсточникТаблицаРегистра01.Соединения.Добавить(ИмяТаблицыОтбор,ИмяТаблицыОтбор+"."+Поле.Ключ+" = "+ТаблицаРС+"."+Поле.Значение);
		ИсточникТаблицаРегистра01.Соединения[Индекс].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
		Если ЕстьДействуетДо Тогда
			ИсточникТаблицаОтбор02.Источник.ДоступныеПоля.Добавить(Поле.Ключ);
			ОператорВыбора02.ВыбираемыеПоля.Добавить(ИмяТаблицыОтбор+"."+Поле.Ключ);
			ИсточникТаблицаРегистра02.Соединения.Добавить(ИмяТаблицыОтбор,ИмяТаблицыОтбор+"."+Поле.Ключ+" = "+ТаблицаРС+"."+Поле.Значение);
			ИсточникТаблицаРегистра02.Соединения[Индекс].ТипСоединения = ТипСоединенияСхемыЗапроса.Внутреннее;
		КонецЕсли;
		Запрос0.Колонки[Индекс+1].Псевдоним = Поле.Ключ;
		Индекс = Индекс+1;
	КонецЦикла;
	//Ресурсы добавляем: в выбираемые поля и возможные отборы
	ТекстОтборПоРесурсам = "";
	Для Каждого Поле ИЗ РесурсыРС Цикл
		ОператорВыбора00.ВыбираемыеПоля.Добавить(ТаблицаРС+"."+Поле.Ключ);
		ОператорВыбора01.ВыбираемыеПоля.Добавить(ТаблицаРС+"."+Поле.Ключ);
		Если Поле.Значение <> "" Тогда 
			Если НЕ ОбратныйОтбор Тогда
				ОператорВыбора00.Отбор.Добавить(ТаблицаРС+"."+Поле.Ключ+ " "+Поле.Значение);
			Иначе
				//Если идет обратный отбор, то нас устроит вариант когда ресурс NULL
				ОператорВыбора00.Отбор.Добавить(ТаблицаРС+"."+Поле.Ключ+" ЕСТЬ NULL ИЛИ "+ТаблицаРС+"."+Поле.Ключ+ " "+Поле.Значение);
			КонецЕсли;	
		КонецЕсли;
		Если ЕстьДействуетДо Тогда
			ОператорВыбора02.ВыбираемыеПоля.Добавить(ТаблицаРС+"."+Поле.Ключ);
			ОператорВыбора02.ВыбираемыеПоля[Индекс+1] = Новый ВыражениеСхемыЗапроса(ТаблицаРС+"."+Поле.Ключ+"ПоОкончании");
			ТекстОтборПоРесурсам = ТаблицаРС+"."+Поле.Ключ+"ПоОкончании"+ " "+Поле.Значение;
		КонецЕсли;
		Индекс = Индекс+1;
	КонецЦикла;
	Если ЕстьДействуетДо Тогда
		Если НЕ ОбратныйОтбор Тогда
			ОператорВыбора00.Отбор.Добавить(ТаблицаРС+".ДействуетДо = ДАТАВРЕМЯ(1, 1, 1) ИЛИ "+ТаблицаРС+".ДействуетДо >= &НачалоМесяца ИЛИ "+ТекстОтборПоРесурсам );
		Иначе
			//Если идет обратный отбор, то нас устроит вариант когда дата NULL
			ОператорВыбора00.Отбор.Добавить(ТаблицаРС+".ДействуетДо ЕСТЬ NULL ИЛИ "+ТаблицаРС+".ДействуетДо = ДАТАВРЕМЯ(1, 1, 1) ИЛИ "+ТаблицаРС+".ДействуетДо >= &НачалоМесяца ИЛИ "+ТекстОтборПоРесурсам );
		КонецЕсли;	
		ОператорВыбора02.Отбор.Добавить(ТаблицаРС+".ДействуетДо > &НачалоМесяца" );
		ОператорВыбора02.Отбор.Добавить("ДОБАВИТЬКДАТЕ("+ТаблицаРС+".ДействуетДо, ДЕНЬ, 1) <= &КонецМесяца" );
	КонецЕсли;
	ОператорВыбора01.Отбор.Добавить(ТаблицаРС+".Период > &НачалоМесяца" );
	ОператорВыбора01.Отбор.Добавить(ТаблицаРС+".Период <= &КонецМесяца" );
	//Для Каждого Поле ИЗ ПоляСвязей Цикл
	//	Запрос0.Индекс.Добавить(ИмяТаблицыОтбор+"."+Поле.Ключ);
	//КонецЦикла;

	
	
	Запрос1 = СхемаЗапроса.ПакетЗапросов.Добавить();
	Запрос1.ТаблицаДляПомещения = ВТМинимальныеПериоды;
	//Добавляем операторы выбора 
	ОператорВыбора1 = Запрос1.Операторы[0];
	//Источники запроса
	ИсточникТаблица11 = ОператорВыбора1.Источники.Добавить(ВТПериоды,"ТаблицаНачало");
	ИсточникТаблица12 = ОператорВыбора1.Источники.Добавить(ВТПериоды,"ТаблицаОкончание");
	ИсточникТаблица11.Соединения.Добавить("ТаблицаОкончание","ТаблицаНачало.Период < ТаблицаОкончание.Период");
	
	ОператорВыбора1.ВыбираемыеПоля.Добавить("ТаблицаНачало.Период");
	Запрос1.Колонки[0].Псевдоним = "ДатаНачала";
	Индекс = 0;
	Для Каждого Поле ИЗ ПоляСвязей Цикл
		ОператорВыбора1.ВыбираемыеПоля.Добавить("ТаблицаНачало."+Поле.Ключ);
		Запрос1.Индекс.Добавить("ТаблицаНачало."+Поле.Ключ);
		ИсточникТаблица11.Соединения.Добавить("ТаблицаОкончание","ТаблицаНачало."+Поле.Ключ+" = ТаблицаОкончание."+Поле.Ключ);
		Индекс = Индекс+1;
	КонецЦикла;
	ОператорВыбора1.ВыбираемыеПоля.Добавить("МИНИМУМ(ТаблицаОкончание.Период)");
	Запрос1.Колонки[Индекс+1].Псевдоним = "Период";
	
	Запрос2 = СхемаЗапроса.ПакетЗапросов.Добавить();
	Запрос2.ТаблицаДляПомещения = ИмяИтоговойВТ;
	//Добавляем операторы выбора 
	ОператорВыбора2 = Запрос2.Операторы[0];
	//Источники запроса
	ИсточникТаблица21 = ОператорВыбора2.Источники.Добавить(ВТПериоды,"ТаблицаНачало");
	ИсточникТаблица22 = ОператорВыбора2.Источники.Добавить(ВТМинимальныеПериоды,"МинимальныеПериоды");
	ИсточникТаблица21.Соединения.Добавить("МинимальныеПериоды","ТаблицаНачало.Период = МинимальныеПериоды.ДатаНачала");
	
	ОператорВыбора2.ВыбираемыеПоля.Добавить("ТаблицаНачало.Период");
	Запрос2.Колонки[0].Псевдоним = "ДатаНачала";
	Индекс = 0;
	Для Каждого Поле ИЗ ПоляСвязей Цикл
		ОператорВыбора2.ВыбираемыеПоля.Добавить("ТаблицаНачало."+Поле.Ключ);
		Запрос2.Индекс.Добавить("ТаблицаНачало."+Поле.Ключ);
		ИсточникТаблица21.Соединения.Добавить("МинимальныеПериоды","ТаблицаНачало."+Поле.Ключ+" = МинимальныеПериоды."+Поле.Ключ);
		Индекс = Индекс+1;
	КонецЦикла;
	ОператорВыбора2.ВыбираемыеПоля.Добавить("ЕСТЬNULL(ДОБАВИТЬКДАТЕ(МинимальныеПериоды.Период,ДЕНЬ,-1), &КонецМесяца)");
	Запрос2.Колонки[Индекс+1].Псевдоним = "ДатаОкончания";
	Для Каждого Поле ИЗ РесурсыРС Цикл
		Если Поле.Значение <> "" Тогда 
			Если НЕ ОбратныйОтбор Тогда
				ОператорВыбора2.Отбор.Добавить("ТаблицаНачало."+Поле.Ключ+ " "+Поле.Значение);
			Иначе
				//Если идет обратный отбор, то нас устроит вариант когда ресурс NULL
				ОператорВыбора2.Отбор.Добавить("ТаблицаНачало."+Поле.Ключ+" ЕСТЬ NULL ИЛИ "+"ТаблицаНачало."+Поле.Ключ+ " "+Поле.Значение);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
	ЗапросУничтоженияВТ1 = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
	ЗапросУничтоженияВТ1.ИмяТаблицы = ВТПериоды;
	ЗапросУничтоженияВТ2 = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
	ЗапросУничтоженияВТ2.ИмяТаблицы = ВТМинимальныеПериоды;
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();

	
КонецФункции

Функция ПолучитьСреднююЧисленностьЗаМесяцЭПЗ(Период, Организация, Параметры) Экспорт
	
	//Учет времени упрощенный, получение ЭПЗ возможно только в целом за месяц
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Период));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Период));
	Запрос.УстановитьПараметр("Пол", Параметры.ОтборПол);
	
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|   ВЫБОР 
		|     КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаПриема < &НачалоМесяца
		|     ТОГДА &НачалоМесяца
		|     ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ДатаПриема
		|   КОНЕЦ КАК ДатаНачала,
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
		|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости КАК ВидЗанятости,
		|	ВЫБОР 
		|     КОГДА ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения > &КонецМесяца
		|     ТОГДА &КонецМесяца
		|     ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
		|   КОНЕЦ КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиОрганизации
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.ДатаПриема <= &КонецМесяца
		|	И (ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|	   ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения >= &НачалоМесяца)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
	    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Начисления.Сотрудник                          					КАК Сотрудник,
		|	Начисления.Сотрудник.ФизическоеЛицо            					КАК ФизическоеЛицо,
		|	Начисления.НормаЧасовЗаМесяц									КАК НормаЧасовЗаМесяц,
		|	Начисления.ОтработаноЧасов										КАК НормаЧасов
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|   РегистрРасчета.Начисления КАК Начисления
		|ГДЕ
		|   Начисления.Организация = &Организация
		|   И Начисления.ПериодРегистрации = &НачалоМесяца 
		|	И НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ) = &НачалоМесяца
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|   СотрудникиОрганизации.Сотрудник,
		|   СотрудникиОрганизации.ФизическоеЛицо,
		|   СУММА(ВЫБОР КОГДА Начисления.НормаЧасовЗаМесяц ЕСТЬ NULL ИЛИ Начисления.НормаЧасовЗаМесяц = 0 ТОГДА 0 ИНАЧЕ Начисления.НормаЧасов / Начисления.НормаЧасовЗаМесяц КОНЕЦ ) КАК Средняя
		|ПОМЕСТИТЬ ВТСредняяПоСотрудникам
		|ИЗ
		|  ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|  ЛЕВОЕ СОЕДИНЕНИЕ
		|  ВТНачисления КАК Начисления
		|  ПО СотрудникиОрганизации.ФизическоеЛицо = Начисления.ФизическоеЛицо
		|   И СотрудникиОрганизации.Сотрудник = Начисления.Сотрудник
		|   "+?(Параметры.ОтборШтат,"И СотрудникиОрганизации.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)","")+"
		|   "+?(Параметры.ОтборПол <> Перечисления.ПолФизическогоЛица.ПустаяСсылка() И Параметры.ОтборПол <> Неопределено,"И СотрудникиОрганизации.ФизическоеЛицо.Пол = &Пол","")+"
		|
		|СГРУППИРОВАТЬ ПО
		|   СотрудникиОрганизации.Сотрудник,
		|   СотрудникиОрганизации.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(СредняяПоСотрудникам.Средняя) КАК Средняя
		|ИЗ
		|	ВТСредняяПоСотрудникам КАК СредняяПоСотрудникам
		|";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат ОкруглитьПоПравилуЧетнойЦифры(Выборка.Средняя);
	Иначе	
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСписокСельскихЖителей(Организация, мСельскиеЖители) Экспорт
	
	ТипКонтактнойИнформации = Перечисления.ТипыКонтактнойИнформации.Адрес;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	КонтактнаяИнформацияФизлиц.ЗначенияПолей КАК ЗначенияПолей
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ФизическиеЛицаКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
	|			ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК ФизическоеЛицо
	|		ИЗ
	|			Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|				ПО (ФизическиеЛицаКонтактнаяИнформация.Вид = ВидыКонтактнойИнформации.Ссылка)
	|					И (ФизическиеЛицаКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица))
	|					И (ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникФизическиеЛица))) КАК КонтактнаяИнформацияФизлиц
	|		ПО Сотрудники.Ссылка.ФизическоеЛицо = КонтактнаяИнформацияФизлиц.ФизическоеЛицо
	|ГДЕ
	|	Сотрудники.ГоловнаяОрганизация = &Организация
	|	И Сотрудники.ПометкаУдаления = ЛОЖЬ
	|";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Адрес = Выборка.ЗначенияПолей;
		СтруктураАдреса = РаботаСАдресами.СведенияОбАдресе(Адрес);
		Если НЕ СокрЛП(СтруктураАдреса.НаселенныйПункт) = "" Тогда
			мСельскиеЖители.Добавить(Выборка.Сотрудник);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат мСельскиеЖители;
	
КонецФункции


// Функция рассчитывает среднесписочную численность работников, 
// среднесписочную численность женщин, среднесписочную численность инвалидов за период 
//
// Параметры:
//		Организация
//		НачалоПериода
//		КонецПериода
//
Функция СреднесписочнаяЧисленностьРаботающих(Организация, НачалоПериода, КонецПериода) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗарплатаКадры.СоздатьВТПериоды(Запрос.МенеджерВременныхТаблиц, НачалоПериода, КонецПериода, "ДЕНЬ", "Дата", "Календарь");

	Запрос.Текст = "ВЫБРАТЬ
	               |	Календарь.Дата КАК Дата,
	               |	НАЧАЛОПЕРИОДА(Календарь.Дата, МЕСЯЦ) КАК Месяц
	               |ПОМЕСТИТЬ ВТСписокДат
	               |ИЗ
	               |	Календарь КАК Календарь
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	               |	СписокДат.Дата КАК Дата,
	               |	СписокДат.Месяц
	               |ПОМЕСТИТЬ ВТДатыИСотрудники
	               |ИЗ
	               |	ВТСписокДат КАК СписокДат
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	               |			ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка
	               |				И (ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы))
	               |		ПО СписокДат.Дата >= ТекущиеКадровыеДанныеСотрудников.ДатаПриема
	               |			И (СписокДат.Дата <= ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
	               |					И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	               |				ИЛИ ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))
	               |ГДЕ
	               |	(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
	               |			ИЛИ ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация ЕСТЬ NULL )
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(ВЫБОР
	               |			КОГДА СписокДат.Сотрудник ЕСТЬ НЕ NULL 
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК КоличествоСотрудников,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СписокДат.Дата) КАК ДнейВМесяце,
	               |	СписокДат.Месяц
	               |ПОМЕСТИТЬ ВТСредняяЧисленностьПоМесяцам
	               |ИЗ
	               |	ВТДатыИСотрудники КАК СписокДат
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СписокДат.Месяц
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(СУММА(ВЫРАЗИТЬ(СредняяЧисленностьПоМесяцам.КоличествоСотрудников / СредняяЧисленностьПоМесяцам.ДнейВМесяце КАК ЧИСЛО(15, 0))) / КОЛИЧЕСТВО(СредняяЧисленностьПоМесяцам.Месяц), 0) КАК СреднесписочнаяЧисленность
	               |ИЗ
	               |	ВТСредняяЧисленностьПоМесяцам КАК СредняяЧисленностьПоМесяцам";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	УстановитьПривилегированныйРежим(Истина) ;
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		Возврат Окр(Выборка.СреднесписочнаяЧисленность);
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////////////
// Формирование текстов запросов временных таблиц

Функция ЗапросВТОбъектПоИдентификатору(ПолноеИмяОбъекта, ИмяВТОбъектПоИдентификатору, ИдентификаторОбъекта) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Объекты.Ссылка КАК " + ИдентификаторОбъекта + "
		|ПОМЕСТИТЬ " + ИмяВТОбъектПоИдентификатору + "
		|ИЗ
		|	" + ПолноеИмяОбъекта + " КАК Объекты
		|ГДЕ
		|	Объекты.ИдентификаторОбъекта = """ + ИдентификаторОбъекта + """";
		
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТФункциональныеОпцииОрганизаций(ТолькоРазрешенные, ИмяВТФункциональныеОпцииОрганизаций, МассивФункциональныхОпций) Экспорт
	
	Запрос = Новый Запрос;
	
	СоответствиеХранилищ = Новый Соответствие;
	МассивФункциональныхОпцийСправочникаОрганизации = Новый Массив;
	СоответствиеПериодичностиХранилищ = Новый Соответствие;
	
	Для каждого ИмяФункциональнойОпции Из МассивФункциональныхОпций Цикл
		
		Если ВРег(ИмяФункциональнойОпции) = "ОРГАНИЗАЦИЯ" Тогда
			Продолжить;
		КонецЕсли; 
		
		МетаданныеФункциональнойОпции = Метаданные.ФункциональныеОпции[ИмяФункциональнойОпции];
		ИмяОбъектаХранилища = МетаданныеФункциональнойОпции.Хранение.Родитель().ПолноеИмя();
		
		Если ИмяОбъектаХранилища = "Справочник.Организации" Тогда
			
			МассивФункциональныхОпцийСправочникаОрганизации.Добавить( Новый Структура("ИмяФункциональнойОпции,ИмяХранилища", ИмяФункциональнойОпции, МетаданныеФункциональнойОпции.Хранение.Имя));
			
		Иначе
			
			СоответствиеХранилища = СоответствиеХранилищ.Получить(ИмяОбъектаХранилища);
			Если СоответствиеХранилища = Неопределено Тогда
				СоответствиеХранилища = Новый Массив;
			КонецЕсли;
			
			СоответствиеХранилища.Добавить(Новый Структура("ИмяФункциональнойОпции,ИмяХранилища", ИмяФункциональнойОпции, МетаданныеФункциональнойОпции.Хранение.Имя));
			СоответствиеХранилищ.Вставить(ИмяОбъектаХранилища, СоответствиеХранилища);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = "ВЫБРАТЬ " + ?(ТолькоРазрешенные, "РАЗРЕШЕННЫЕ", "") + "
		|	Организации.Ссылка КАК Организация";
		
	Для каждого СтруктураОписания Из МассивФункциональныхОпцийСправочникаОрганизации Цикл

		ТекстЗапроса = ТекстЗапроса +
			",
			|	Организации." + СтруктураОписания.ИмяХранилища + " КАК " +  СтруктураОписания.ИмяФункциональнойОпции;
						
	КонецЦикла;
	
	Для каждого СоответствиеХранилища Из СоответствиеХранилищ Цикл
		
		МетаданныеОбъектаХранилища = Метаданные.НайтиПоПолномуИмени(СоответствиеХранилища.Ключ);
		
		СоответствиеПериодичностиХранилищ.Вставить(СоответствиеХранилища.Ключ, МетаданныеОбъектаХранилища.ПериодичностьРегистраСведений);
		
		Если ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(МетаданныеОбъектаХранилища) = ОбщегоНазначения.ИмяТипаРегистрыСведений() Тогда
			
			Для каждого СтруктураОписания Из СоответствиеХранилища.Значение Цикл

				ТекстЗапроса = ТекстЗапроса +
					",
					|	" + СтрЗаменить(СоответствиеХранилища.Ключ, ".", "") + "." + СтруктураОписания.ИмяХранилища + " КАК " +  СтруктураОписания.ИмяФункциональнойОпции;
						
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса +
		"
		|ПОМЕСТИТЬ " + ИмяВТФункциональныеОпцииОрганизаций + "
		|ИЗ Справочник.Организации КАК Организации";
	
	Для каждого СоответствиеХранилища Из СоответствиеХранилищ Цикл
			
		ПериодичностьРегистраСведений = СоответствиеПериодичностиХранилищ.Получить(СоответствиеХранилища.Ключ);
		
		Если ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			ПутьКОбъектуХранилища = СоответствиеХранилища.Ключ;
		Иначе
			ПутьКОбъектуХранилища = СоответствиеХранилища.Ключ + ".СрезПоследних";
		КонецЕсли;
				
		ТекстЗапроса = ТекстЗапроса +
			"
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + ПутьКОбъектуХранилища + " КАК " + СтрЗаменить(СоответствиеХранилища.Ключ, ".", "") + "
			|		ПО Организации.Ссылка = " + СтрЗаменить(СоответствиеХранилища.Ключ, ".", "") + ".Организация";
			
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

// Подготавливает запрос, формирующий временную таблицу ВТКадровыеДанныеФизическихЛиц
//
//	Параметры - повторяют по своему смыслу одноименные параметры процедуры СоздатьНаДатуВТКадровыеДанныеФизическихЛиц
//			см. КадровыйУчет.КадровыеДанныеФизическихЛиц(), за исключением:
//
//		ИмяВременнойТаблицыОтборовФизическихЛиц - Строка, имя временной таблице в которой присутствует как минимум два поля
//													Период - Дата, ФизическоеЛицо - Справочник.ФизическиеЛица
//
// Возвращаемое значение:
//	Запрос
//
Функция ЗапросВТКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ИмяВТКадровыеДанныеФизическихЛиц, ИмяВременнойТаблицыОтборовФизическихЛиц, ПоляОтбораФизическихЛиц, КадровыеДанные, ПоляОтбораПериодическихДанных) Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "";
	
	ТекстЗапросаВременныхТаблиц = "";
	
	ИменаВТКУничтожению = Новый Массив;
	
	НеобходимаТаблицаДокументов  = Ложь;

	// Построим запрос для получения данных
	ТекстВыбрать = "ВЫБРАТЬ " + ?(ТолькоРазрешенные, "РАЗРЕШЕННЫЕ", "") + " РАЗЛИЧНЫЕ";
 	ТекстЗапросаПоФизЛицам = ТекстВыбрать;
	ТекстЗапросаКадровыеДанные = ТекстВыбрать;
	
	ТекстЗапросаПоФизЛицам = ТекстЗапросаПоФизЛицам + 
		"
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
		|	СписокФизЛиц.Период КАК Период";
		
	ТекстЗапросаКадровыеДанные = ТекстЗапросаКадровыеДанные +
		"
		|	ДанныеФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеФизическихЛиц.Период КАК Период";
		
	НеобходимыеТаблицы = Новый Структура;
	НеобходимыеТаблицыКонтактнойИнформации = Новый Структура;
	МассивИсключаемыхДанных = Новый Массив;
	
	РеквизитыСправочникаФизическиеЛица = Метаданные.Справочники["ФизическиеЛица"].Реквизиты;
	
	Для Каждого ЭлементМассиваПолей Из КадровыеДанные Цикл
		
		ЭлементМассиваПолей = СокрЛП(ЭлементМассиваПолей);
		
		Если ОпуститьОбработкуПоляФизическогоЛица(ЭлементМассиваПолей) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементМассиваПолей <> "ФизическоеЛицо" Тогда
			
			Если НеобходимыДанныеДокументов(ЭлементМассиваПолей) Тогда 
				
	            ТекстЗапросаКадровыеДанные = ТекстЗапросаКадровыеДанные + 
					",
					|	ДокументыФизическихЛиц." + ЭлементМассиваПолей + " КАК " + ЭлементМассиваПолей; 
										
				НеобходимаТаблицаДокументов = Истина;
				
			ИначеЕсли НеобходимыФИО(ЭлементМассиваПолей) Тогда 
				
				 ТекстЗапросаКадровыеДанные = ТекстЗапросаКадровыеДанные + 
				 	",
					|	" + ПутьКДаннымФИОПоИмениЗапрашиваемыхДанных(ЭлементМассиваПолей) + " КАК " + ЭлементМассиваПолей; 
										
				НеобходимыеТаблицы.Вставить("ФИОФизическихЛиц");
				
			ИначеЕсли НеобходимоГражданство(ЭлементМассиваПолей) Тогда
				
				ТекстЗапросаКадровыеДанные = ТекстЗапросаКадровыеДанные +
					",
					|	" + ПутьКДаннымПоИмениЗапрашиваемыхДанныхГражданства(ЭлементМассиваПолей) + " КАК " + ЭлементМассиваПолей; 
									
				НеобходимыеТаблицы.Вставить("ГражданствоФизическихЛиц");
				
			ИначеЕсли НеобходимСтатусЗастрахованного(ЭлементМассиваПолей) Тогда
				
				ТекстЗапросаКадровыеДанные = ТекстЗапросаКадровыеДанные +
					",
					|	" + ПутьКДаннымПоИмениЗапрашиваемыхДанныхЗастрахованногоЛица(ЭлементМассиваПолей) + " КАК " + ЭлементМассиваПолей; 
									
				НеобходимыеТаблицы.Вставить("СтатусыЗастрахованныхФизическихЛиц");
				
			ИначеЕсли НеобходимаКонтактнаяИнформация(ЭлементМассиваПолей) Тогда
				
				ПозицияПредставление = Найти(ВРег(ЭлементМассиваПолей), "ПРЕДСТАВЛЕНИЕ");
				Если ПозицияПредставление > 0 Тогда
					
					ИмяПоляЗапрашиваемыхДанных = Лев(ЭлементМассиваПолей, ПозицияПредставление - 1);
					ТекстЗапросаКадровыеДанные = ТекстЗапросаКадровыеДанные +
						",
						|	ЕСТЬNULL(" + ИмяПоляЗапрашиваемыхДанных + "ФизическиеЛица.Представление, """") КАК " + ЭлементМассиваПолей;
						
				Иначе
					
					ИмяПоляЗапрашиваемыхДанных = ЭлементМассиваПолей;
					ТекстЗапросаКадровыеДанные = ТекстЗапросаКадровыеДанные +
						",
						|	ВЫРАЗИТЬ(ЕСТЬNULL(" + ЭлементМассиваПолей + "ФизическиеЛица.ЗначенияПолей, """") КАК СТРОКА(1000)) КАК " + ЭлементМассиваПолей;
						
				КонецЕсли; 
				
				НеобходимыеТаблицыКонтактнойИнформации.Вставить(ИмяПоляЗапрашиваемыхДанных);
				
			ИначеЕсли ВРег(ЭлементМассиваПолей) = "ФИЗИЧЕСКОЕЛИЦОКОД" Тогда
				
				ТекстЗапросаПоФизЛицам = ТекстЗапросаПоФизЛицам +
					",
					|	ФизическиеЛица.Код КАК " + ЭлементМассиваПолей;
					
				ТекстЗапросаКадровыеДанные = ТекстЗапросаКадровыеДанные + 
					",
					|	ДанныеФизическихЛиц.Код КАК " + ЭлементМассиваПолей;
									
			ИначеЕсли ВРег(ЭлементМассиваПолей) = "ФИЗИЧЕСКОЕЛИЦОНАИМЕНОВАНИЕ" Тогда
				
				ТекстЗапросаПоФизЛицам = ТекстЗапросаПоФизЛицам +
					",
					|	ФизическиеЛица.Наименование КАК " + ЭлементМассиваПолей;
					
				ТекстЗапросаКадровыеДанные = ТекстЗапросаКадровыеДанные +
					",
					|	ДанныеФизическихЛиц.Наименование КАК " + ЭлементМассиваПолей;
									
			ИначеЕсли РеквизитыСправочникаФизическиеЛица.Найти(ЭлементМассиваПолей) = Неопределено И ВРег(ЭлементМассиваПолей) <> "НАИМЕНОВАНИЕ"  И ВРег(ЭлементМассиваПолей) <> "КОД" Тогда
				
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='Справочник ""Физические лица"" не содержит реквизита ""%1""';uk='Довідник ""Фізичні особи"" не містить реквізиту ""%1""'"),
									ЭлементМассиваПолей);
				
			Иначе
				
				ТекстЗапросаПоФизЛицам = ТекстЗапросаПоФизЛицам +
					",
					|	ФизическиеЛица." + ЭлементМассиваПолей + " КАК " + ЭлементМассиваПолей;
					
				ТекстЗапросаКадровыеДанные = ТекстЗапросаКадровыеДанные +
					",
					|	ДанныеФизическихЛиц." + ЭлементМассиваПолей + " КАК " + ЭлементМассиваПолей;								
					
			КонецЕсли;							
				
		КонецЕсли;
		
	КонецЦикла;	
	
	НеобходимыДопТаблицы = НеобходимаТаблицаДокументов ИЛИ НеобходимыеТаблицы.Количество() > 0 ИЛИ НеобходимыеТаблицыКонтактнойИнформации.Количество() > 0;
	
	Если НеобходимыДопТаблицы Тогда
		
		ИмяВТДанныеФизическихЛиц = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТДанныеФизическихЛиц");
		
		ТекстЗапросаПоФизЛицам = ТекстЗапросаПоФизЛицам +
			"
			|ПОМЕСТИТЬ " + ИмяВТДанныеФизическихЛиц;
			
		ИменаВТКУничтожению.Добавить(ИмяВТДанныеФизическихЛиц);
		
	Иначе
		
		ТекстЗапросаПоФизЛицам = ТекстЗапросаПоФизЛицам +
			"
			|ПОМЕСТИТЬ " + ИмяВТКадровыеДанныеФизическихЛиц;
														  
	КонецЕсли;                                     	
	
	ТекстЗапросаПоФизЛицам = ТекстЗапросаПоФизЛицам +
		" 
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ИмяВременнойТаблицыОтборовФизическихЛиц + " КАК СписокФизЛиц 
		|	ПО ФизическиеЛица.Ссылка = СписокФизЛиц." + ПоляОтбораФизическихЛиц.ФизическоеЛицо; 
		
	Если НеобходимаТаблицаДокументов Тогда
			
		ИмяВТДокументыФизическихЛиц = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТДокументыФизическихЛиц");
		ИмяВТМаксимальныеПериодыДокументов = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТМаксимальныеПериодыДокументов");
		
		ТекстЗапроса = ТекстВыбрать + "
			|	МАКСИМУМ(ДокументыФизическихЛиц.Период) КАК Период,
			|	ИсточникДанных." + ПоляОтбораФизическихЛиц.Период + " КАК ПериодСреза,
			|	ДокументыФизическихЛиц.Физлицо КАК Физлицо
			|ПОМЕСТИТЬ " + ИмяВТМаксимальныеПериодыДокументов + "
			|ИЗ
			|	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ВременнаяТаблицаОтборовФизическихЛиц КАК ИсточникДанных
			|		ПО ДокументыФизическихЛиц.Физлицо = ИсточникДанных." + ПоляОтбораФизическихЛиц.ФизическоеЛицо + "
			|			И ДокументыФизическихЛиц.Период <= ИсточникДанных." + ПоляОтбораФизическихЛиц.Период + "
			|ГДЕ
			|	ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность
			|	
			|СГРУППИРОВАТЬ ПО
			|	ДокументыФизическихЛиц.Физлицо,
			|	ИсточникДанных." + ПоляОтбораФизическихЛиц.Период +
			ЗарплатаКадры.РазделительЗапросов() + 
			ТекстВыбрать + "
			|	ДокументыФизическихЛиц.Физлицо,
			|	ЕСТЬNULL(ДокументыФизическихЛиц.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК Период,
			|	ЕСТЬNULL(ДокументыФизическихЛиц.ВидДокумента, ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка)) КАК ДокументВид,
			|	ЕСТЬNULL(ДокументыФизическихЛиц.Серия, """") КАК ДокументСерия,
			|	ЕСТЬNULL(ДокументыФизическихЛиц.Номер, """") КАК ДокументНомер,
			|	ЕСТЬNULL(ДокументыФизическихЛиц.ДатаВыдачи, ДАТАВРЕМЯ(1, 1, 1)) КАК ДокументДатаВыдачи,
			|	ЕСТЬNULL(ДокументыФизическихЛиц.СрокДействия, ДАТАВРЕМЯ(1, 1, 1)) КАК ДокументСрокДействия,
			|	ЕСТЬNULL(ДокументыФизическихЛиц.КемВыдан, """") КАК ДокументКемВыдан,
			|	ЕСТЬNULL(ДокументыФизическихЛиц.КодПодразделения, """") КАК ДокументКодПодразделения,
			|	ЕСТЬNULL(ДокументыФизическихЛиц.Представление, """") КАК ДокументПредставление,
			|	ДокументыСрез.ПериодСреза
			|ПОМЕСТИТЬ " + ИмяВТДокументыФизическихЛиц + "
			|ИЗ
			|	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ИмяВТМаксимальныеПериодыДокументов + " КАК ДокументыСрез
			|		ПО ДокументыФизическихЛиц.Период = ДокументыСрез.Период
			|			И ДокументыФизическихЛиц.Физлицо = ДокументыСрез.Физлицо
			|			И (ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность)";

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ВременнаяТаблицаОтборовФизическихЛиц", ИмяВременнойТаблицыОтборовФизическихЛиц);
		
		ИменаВТКУничтожению.Добавить(ИмяВТДокументыФизическихЛиц);
		ИменаВТКУничтожению.Добавить(ИмяВТМаксимальныеПериодыДокументов);
		
	КонецЕсли;
														
	Если НеобходимыДопТаблицы Тогда
		
		ЗарплатаКадры.ОбъединитьТекстыЗапросов(
			ТекстЗапроса,
    		ТекстЗапросаПоФизЛицам +
				" 
				|ИНДЕКСИРОВАТЬ ПО 
				|	ФизическоеЛицо;
				|
				|//////////////////////////////////////////////////////////////////////
				|" + ТекстЗапросаКадровыеДанные + "
				|ПОМЕСТИТЬ " + ИмяВТКадровыеДанныеФизическихЛиц + "
				|ИЗ " + ИмяВТДанныеФизическихЛиц + " КАК ДанныеФизическихЛиц");
		
		Если НеобходимаТаблицаДокументов Тогда
				
			ТекстЗапроса = ТекстЗапроса +
				"
				|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТДокументыФизическихЛиц + " КАК ДокументыФизическихЛиц
				|	ПО ДанныеФизическихЛиц.ФизическоеЛицо = ДокументыФизическихЛиц.ФизЛицо
				|		И ДанныеФизическихЛиц.Период = ДокументыФизическихЛиц.ПериодСреза";
				
		КонецЕсли;

		Если НеобходимыеТаблицыКонтактнойИнформации.Количество() >  0 Тогда
			
			ИмяВТОтборКонтактнойИнформации = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТОтборКонтактнойИнформации");
			ИмяВТКонтактнаяИнформация = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТКонтактнаяИнформация");
			
			ТекстЗапросаФильтрДляПолученияКонтактнойИнформации = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ОтборыФизическихЛиц.ФизическоеЛицо,
				|	ВидыКонтактнойИнформации.Ссылка КАК Вид
				|ПОМЕСТИТЬ ВТОтборКонтактнойИнформации
				|ИЗ
				|	ВТОтборовФизическихЛиц КАК ОтборыФизическихЛиц
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
				|		ПО (ВидыКонтактнойИнформации.Ссылка В (&СписокВидовКонтактнойИнформации))";
				
			ТекстЗапросаФильтрДляПолученияКонтактнойИнформации = СтрЗаменить(
				ТекстЗапросаФильтрДляПолученияКонтактнойИнформации,
				"ВТОтборовФизическихЛиц",
				ИмяВременнойТаблицыОтборовФизическихЛиц);
			
			ТекстЗапросаФильтрДляПолученияКонтактнойИнформации = СтрЗаменить(
				ТекстЗапросаФильтрДляПолученияКонтактнойИнформации,
				"ФизическоеЛицо",
				ПоляОтбораФизическихЛиц.ФизическоеЛицо);
			
			ТекстЗапросаФильтрДляПолученияКонтактнойИнформации = СтрЗаменить(
				ТекстЗапросаФильтрДляПолученияКонтактнойИнформации,
				"ВТОтборКонтактнойИнформации",
				ИмяВТОтборКонтактнойИнформации);
				
			СписокВидовКонтактнойИнформации = "";
				
			Для Каждого ЭлементНеобходимыеТаблицыКонтактнойИнформации Из НеобходимыеТаблицыКонтактнойИнформации Цикл
				
				ТаблицаКонтактнойИнформации = ЭлементНеобходимыеТаблицыКонтактнойИнформации.Ключ;
				
				СтрокаОтборКонтактнойИнформации = "ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации." + ТаблицаКонтактнойИнформации + "ФизическиеЛица)";
				
				СписокВидовКонтактнойИнформации = ?(ПустаяСтрока(СписокВидовКонтактнойИнформации), "", СписокВидовКонтактнойИнформации + ",")
					+ СтрокаОтборКонтактнойИнформации;
				
				ТекстЗапроса = ТекстЗапроса + "
					|		ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТКонтактнаяИнформация + " КАК " + ТаблицаКонтактнойИнформации + "ФизическиеЛица
					|			ПО " + ТаблицаКонтактнойИнформации + "ФизическиеЛица.Объект = ДанныеФизическихЛиц.ФизическоеЛицо
					|				И " + ТаблицаКонтактнойИнформации + "ФизическиеЛица.Вид = " + СтрокаОтборКонтактнойИнформации;
			
			КонецЦикла;
				
			ТекстЗапросаФильтрДляПолученияКонтактнойИнформации = СтрЗаменить(
				ТекстЗапросаФильтрДляПолученияКонтактнойИнформации,
				"&СписокВидовКонтактнойИнформации",
				СписокВидовКонтактнойИнформации);
				
			ОписаниеВременнойТаблицы = ОписаниеВременнойТаблицыОтборовКонтактнойИнформации(
				ИмяВТОтборКонтактнойИнформации,
				"ФизическоеЛицо",
				"Вид");
				
			ЗапросВТКонтактнаяИнформация = ЗапросВТКонтактнаяИнформация(
				ТолькоРазрешенные,
				ИмяВТКонтактнаяИнформация,
				"Справочник.ФизическиеЛица",
				ОписаниеВременнойТаблицы);
				
			ТекстЗапроса = ТекстЗапросаФильтрДляПолученияКонтактнойИнформации
				+ ЗарплатаКадры.РазделительЗапросов()
				+ ЗапросВТКонтактнаяИнформация.Текст
				+ ЗарплатаКадры.РазделительЗапросов()
				+ ТекстЗапроса;
				
			ИменаВТКУничтожению.Добавить(ИмяВТОтборКонтактнойИнформации);
			ИменаВТКУничтожению.Добавить(ИмяВТКонтактнаяИнформация);
			
		КонецЕсли;
		
		МассивИзмерений = Новый Массив;
		МассивИзмерений.Добавить("Период");
		МассивИзмерений.Добавить("ФизическоеЛицо");
		
		СоответствиеИзмеренийПолямТаблицы = Новый Соответствие;
		СоответствиеИзмеренийПолямТаблицы.Вставить("Период", ПоляОтбораФизическихЛиц.Период);
		СоответствиеИзмеренийПолямТаблицы.Вставить("ФизическоеЛицо", ПоляОтбораФизическихЛиц.ФизическоеЛицо);
			
		Для Каждого ЭлементНеобходимыеТаблицы Из НеобходимыеТаблицы Цикл
			
			ИмяТаблицыСрезаПоследних = ЭлементНеобходимыеТаблицы.Ключ;
			
			Если НЕ ПустаяСтрока(ТекстЗапросаВременныхТаблиц) Тогда
				ТекстЗапросаВременныхТаблиц = ТекстЗапросаВременныхТаблиц + ЗарплатаКадры.РазделительЗапросов();
			КонецЕсли; 
			
			ИмяВТСрезаПоследних = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТ" + ИмяТаблицыСрезаПоследних);
			
			
			ПоляОтбора = Неопределено;
			
			Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
			
				ПоляОтбораПериодическихДанных.Свойство(ИмяТаблицыСрезаПоследних, ПоляОтбора);
			
			КонецЕсли;
			 
			КоллекцииПолей = ЗарплатаКадры.КоллекцииПолейДляПодготовкиТекстаЗапроса(ИмяТаблицыСрезаПоследних, МассивИзмерений); 
			
			ЗапросВТИмяРегистраСрез = ЗарплатаКадры.ЗапросВТИмяРегистраСрез(
					ТолькоРазрешенные, 
					КоллекцииПолей, 
					ИмяТаблицыСрезаПоследних, 
					ИмяВременнойТаблицыОтборовФизическихЛиц, 
					ИмяВТСрезаПоследних, 
					ПоляОтбора, 
					, 
					, 
					Истина,
					СоответствиеИзмеренийПолямТаблицы);
				
			ЗарплатаКадры.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТИмяРегистраСрез);
			
			ТекстЗапросаВременныхТаблиц = ТекстЗапросаВременныхТаблиц + ЗапросВТИмяРегистраСрез.Текст;
			
			ИменаВТКУничтожению.Добавить(ИмяВТСрезаПоследних);
			
			ТекстЗапроса = ТекстЗапроса +
				"
				|	ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСрезаПоследних + " КАК " + ИмяТаблицыСрезаПоследних + "СрезПоследних  
				|	ПО ДанныеФизическихЛиц.ФизическоеЛицо = " + ИмяТаблицыСрезаПоследних + "СрезПоследних.ФизическоеЛицо
				|		И ДанныеФизическихЛиц.Период = " + ИмяТаблицыСрезаПоследних + "СрезПоследних.Период";
				
		КонецЦикла;	

	Иначе	
		ТекстЗапроса = ТекстЗапросаПоФизЛицам;	
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
		"
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизическоеЛицо";
	
	Если НЕ ПустаяСтрока(ТекстЗапросаВременныхТаблиц) Тогда
		ТекстЗапроса = ТекстЗапросаВременныхТаблиц + ЗарплатаКадры.РазделительЗапросов() + ТекстЗапроса;
	КонецЕсли;
	
	ЗарплатаКадры.ДобавитьТекстУдаленияВременныхТаблиц(ТекстЗапроса, ИменаВТКУничтожению);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

// Подготавливает запрос, Формирующий временную таблицу ВТКадровыеДанныеСотрудников
//
//	Параметры - повторяют по своему смыслу одноименные параметры процедуры СоздатьНаДатуВТКадровыеДанныеСотрудников
//			см. КадровыйУчет.КадровыеДанныеСотрудников(), за исключением:
//
//		ИмяВременнойТаблицыОтборовСотрудников - Строка, имя временной таблице в которой присутствует как минимум два поля
//													Период - Дата, Сотрудник - Справочник.Сотрудники
//
// Возвращаемое значение:
//	Запрос
//
Функция ЗапросВТКадровыеДанныеСотрудников(ТолькоРазрешенные, ИмяВТКадровыеДанныеСотрудников, ИмяВременнойТаблицыОтборовСотрудников, ПоляОтбораСотрудников, КадровыеДанные, ПоляОтбораПериодическихДанных) Экспорт
	
	ФОИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	Запрос = Новый Запрос;
	
	РеквизитыСправочникаСотрудники = Метаданные.Справочники["Сотрудники"].Реквизиты;
	ИменаВТКУничтожению = Новый Массив;

	МассивКадровыхДанныхФизическогоЛица = Новый Массив;
	
	МассивФункциональныхОпций = Новый Массив;
	
	НеобходимыДанныеПодразделения = Ложь;
	НеобходимыДанныеДолжности = Ложь;
	
	НеобходимыТекущиеДанныеСотрудника  = Ложь;
	НеобходимаТекущаяТарифнаяСтавкаСотрудника  = Ложь;
	
	НеобходимаТарифнаяСтавкаСотрудника  = Ложь;
	
	НеобходимыСведенияПриказаОПриеме = Ложь;
	НеобходимыСведенияПриказаОбУвольнении = Ложь;
	
	НеобходимПризнакОформленПриемНаРаботу = Ложь;
	
	СредиПолейЗапрашиваемыхДанныхЕстьПолеОрганизация = Ложь;
	СредиПолейЗапрашиваемыхДанныхЕстьПолеПодразделение = Ложь;
	СредиПолейЗапрашиваемыхДанныхЕстьПолеДолжность = Ложь;
	СредиПолейЗапрашиваемыхДанныхЕстьПолеВидЗанятости = Ложь;
	СредиПолейЗапрашиваемыхДанныхЕстьПолеВидСобытия = Ложь;
	СредиПолейЗапрашиваемыхДанныхЕстьПолеПринятНаНовоеРабочееМесто = Ложь; 
	СредиПолейЗапрашиваемыхДанныхЕстьПолеДатаСозданияРабочегоМеста = Ложь; 
	
	ТекстЗапроса = "";
	
	ТекстЗапросаВременныхТаблиц = "";
	
	ТекстВыбрать = "ВЫБРАТЬ " + ?(ТолькоРазрешенные, "РАЗРЕШЕННЫЕ", "") + " РАЗЛИЧНЫЕ";
	
	Для Каждого ЭлементМассиваПолей Из КадровыеДанные Цикл
		
		Если ОпуститьОбработкуПоляСотрудника(ЭлементМассиваПолей) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(ЭлементМассиваПолей) = "ОРГАНИЗАЦИЯ"  Тогда
			СредиПолейЗапрашиваемыхДанныхЕстьПолеОрганизация = Истина;
		КонецЕсли; 
		
		Если ВРег(ЭлементМассиваПолей) = "ПОДРАЗДЕЛЕНИЕ"  Тогда
			СредиПолейЗапрашиваемыхДанныхЕстьПолеПодразделение = Истина;
		КонецЕсли; 
		
		Если ВРег(ЭлементМассиваПолей) = "ДОЛЖНОСТЬ"  Тогда
			СредиПолейЗапрашиваемыхДанныхЕстьПолеДолжность = Истина;
		КонецЕсли;
		
		Если ВРег(ЭлементМассиваПолей) = "ВИДЗАНЯТОСТИ"  Тогда
			СредиПолейЗапрашиваемыхДанныхЕстьПолеВидЗанятости = Истина;
		КонецЕсли;
		Если ВРег(ЭлементМассиваПолей) = "ВИДСОБЫТИЯ"  Тогда
			СредиПолейЗапрашиваемыхДанныхЕстьПолеВидСобытия = Истина;
		КонецЕсли;
		Если ВРег(ЭлементМассиваПолей) = "ПРИНЯТНАНОВОЕРАБОЧЕЕМЕСТО"  Тогда
			СредиПолейЗапрашиваемыхДанныхЕстьПолеПринятНаНовоеРабочееМесто = Истина;
		КонецЕсли;
		Если ВРег(ЭлементМассиваПолей) = "ДАТАСОЗДАНИЯРАБОЧЕГОМЕСТА"  Тогда
			СредиПолейЗапрашиваемыхДанныхЕстьПолеДатаСозданияРабочегоМеста = Истина;
		КонецЕсли;

		Если КадровыйУчет.НеобходимыСведенияПриказаОПриеме(ЭлементМассиваПолей) Тогда
			
			ТекстЗапроса = ТекстЗапроса +
				",
				|	" + КадровыйУчет.ПутьКДаннымПоИмениДанныхПриказаОПриеме(ЭлементМассиваПолей) + " КАК " + ЭлементМассиваПолей;
				
			НеобходимыСведенияПриказаОПриеме = Истина;
			
		ИначеЕсли НеобходимыСведенияПриказаОбУвольнении(ЭлементМассиваПолей) Тогда
			
			ТекстЗапроса = ТекстЗапроса +
				",
				|	" + ПутьКДаннымПоИмениДанныхПриказаОбУвольнении(ЭлементМассиваПолей) + " КАК " + ЭлементМассиваПолей;
				
			НеобходимыСведенияПриказаОбУвольнении = Истина;
			
		ИначеЕсли НеобходимыДанныеСотрудника(ЭлементМассиваПолей) Тогда
			
			ТекстЗапроса = ТекстЗапроса +
				",
				|	" + ПутьКДаннымПоИмениЗапрашиваемыхДанныхСотрудника(ЭлементМассиваПолей) + " КАК " + ЭлементМассиваПолей;
				
		ИначеЕсли КадровыйУчет.НеобходимыТекущиеДанныеСотрудника(ЭлементМассиваПолей) Тогда
				
			ТекстЗапроса = ТекстЗапроса +
				",
				|	" + КадровыйУчет.ПутьКДаннымПоИмениЗапрашиваемыхТекущихДанныхСотрудника(ЭлементМассиваПолей) + " КАК " + ЭлементМассиваПолей;
			
			НеобходимыТекущиеДанныеСотрудника = Истина;
			
		ИначеЕсли НеобходимаТекущаяТарифнаяСтавкаСотрудника(ЭлементМассиваПолей) Тогда
			
			ТекстЗапроса = ТекстЗапроса +
				",
				|	" + КадровыйУчет.ПутьКДаннымПоИмениЗапрашиваемойТекущейТарифнойСтавкиСотрудника(ЭлементМассиваПолей) + " КАК " + ЭлементМассиваПолей;
			
			НеобходимаТекущаяТарифнаяСтавкаСотрудника = Истина;
			
		ИначеЕсли НеобходимаТарифнаяСтавкаСотрудника(ЭлементМассиваПолей) Тогда
			
			ТекстЗапроса = ТекстЗапроса +
				",
				|	" + ПутьКДаннымПоИмениЗапрашиваемойТарифнойСтавкиСотрудника(ЭлементМассиваПолей) + " КАК " + ЭлементМассиваПолей;
			
			НеобходимаТарифнаяСтавкаСотрудника = Истина;
			
		ИначеЕсли КадровыйУчет.НеобходимыКадровыеДанныеФизическогоЛица(ЭлементМассиваПолей) Тогда
			
			МассивКадровыхДанныхФизическогоЛица.Добавить(ЭлементМассиваПолей);
				
		ИначеЕсли НеобходимПризнакОформленПриемНаРаботу(ЭлементМассиваПолей) Тогда
			
			ТекстЗапроса = ТекстЗапроса +
				",
				|	" + ПутьКДаннымПризнакаОформленПриемНаРаботу() + " КАК ОформленПриемНаРаботу";
				
			НеобходимПризнакОформленПриемНаРаботу = Истина;
			
		ИначеЕсли НеобходимыДанныеДолжности(ЭлементМассиваПолей) Тогда
				
			ТекстЗапроса = ТекстЗапроса +
				",
				|	" + ПутьКДаннымПоИмениЗапрашиваемыхДанныхДолжности(ЭлементМассиваПолей) + " КАК " + ЭлементМассиваПолей;
				
			НеобходимыДанныеДолжности = Истина;
			НеобходимыФункциональныеОпцииОрганизации(МассивФункциональныхОпций, ЭлементМассиваПолей);
				
		ИначеЕсли НеобходимыДанныеПодразделения(ЭлементМассиваПолей) Тогда
			
			ТекстЗапроса = ТекстЗапроса +
				",
				|	" + ПутьКДаннымПоИмениЗапрашиваемыхДанныхПодразделения(ЭлементМассиваПолей) + " КАК " + ЭлементМассиваПолей;
				
			НеобходимыДанныеПодразделения = Истина;
			НеобходимыФункциональныеОпцииОрганизации(МассивФункциональныхОпций, ЭлементМассиваПолей);
				
		ИначеЕсли РеквизитыСправочникаСотрудники.Найти(ЭлементМассиваПолей) = Неопределено 
			И ВРег(ЭлементМассиваПолей) <> "НАИМЕНОВАНИЕ" 
			И ВРег(ЭлементМассиваПолей) <> "КОД" Тогда
			
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Справочник ""Сотрудники"" не содержит реквизита ""%1""';uk='Довідник ""Співробітники"" не містить реквізиту ""%1""'"),
					ЭлементМассиваПолей);
		Иначе
		
			ТекстЗапроса = ТекстЗапроса +
				",
				|	ДанныеСотрудников." + ЭлементМассиваПолей + " КАК " + ЭлементМассиваПолей;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивФункциональныхОпций.Количество() > 0 И НЕ СредиПолейЗапрашиваемыхДанныхЕстьПолеОрганизация Тогда
		
		ТекстЗапроса = ТекстЗапроса +
			",
			|	" + КадровыйУчет.ПутьКДаннымПоИмениЗапрашиваемыхТекущихДанныхСотрудника("Организация") + " КАК Организация";
			
	КонецЕсли; 
		
	Если НеобходимыДанныеПодразделения И НЕ СредиПолейЗапрашиваемыхДанныхЕстьПолеПодразделение Тогда
		
		ТекстЗапроса = ТекстЗапроса +
			",
			|	" + КадровыйУчет.ПутьКДаннымПоИмениЗапрашиваемыхТекущихДанныхСотрудника("Подразделение") + " КАК Подразделение";
			
	КонецЕсли; 
		
	Если НеобходимыДанныеДолжности И НЕ СредиПолейЗапрашиваемыхДанныхЕстьПолеДолжность Тогда
		
		ТекстЗапроса = ТекстЗапроса +
			",
			|	" + КадровыйУчет.ПутьКДаннымПоИмениЗапрашиваемыхТекущихДанныхСотрудника("Должность") + " КАК Должность";
			
	КонецЕсли; 
	
	ИмяВТКадровыеДанныеФизическихЛиц = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТКадровыеДанныеФизическихЛиц");
		
	Если МассивКадровыхДанныхФизическогоЛица.Количество() > 0 Тогда
		
		ИмяВТСписокФизическихЛиц = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТСписокФизическихЛиц");
		
		ЗапросВТКадровыеДанныеФизическихЛиц = КадровыйУчет.ЗапросВТКадровыеДанныеФизическихЛиц(
				ТолькоРазрешенные, 
				ИмяВТКадровыеДанныеФизическихЛиц, 
				ИмяВТСписокФизическихЛиц,
				КадровыйУчет.ПоляОтбораФизическихЛиц("ФизическоеЛицо,Период"),
				МассивКадровыхДанныхФизическогоЛица, 
				ПоляОтбораПериодическихДанных);
		
		ЗарплатаКадры.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТКадровыеДанныеФизическихЛиц);
		
		ТекстЗапроса =  
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|   ДанныеСотрудников." + ПоляОтбораСотрудников.Период + " КАК Период,
			|	ДанныеСотрудников." + ПоляОтбораСотрудников.Сотрудник + ".ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ " + ИмяВТСписокФизическихЛиц + "
			|ИЗ
			|	" + ИмяВременнойТаблицыОтборовСотрудников + " КАК ДанныеСотрудников" +
			ЗарплатаКадры.РазделительЗапросов() +
			ЗапросВТКадровыеДанныеФизическихЛиц.Текст +
			ЗарплатаКадры.РазделительЗапросов() +
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	" + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + " КАК Сотрудник" + ТекстЗапроса + ",
			|	КадровыеДанныеФизическихЛиц.*";
			
		ИменаВТКУничтожению.Добавить(ИмяВТСписокФизическихЛиц);
		ИменаВТКУничтожению.Добавить(ИмяВТКадровыеДанныеФизическихЛиц);
		
	Иначе
		
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	" + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Период + " КАК Период,
			|	" + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + " КАК Сотрудник" + ТекстЗапроса;
		
		Если КадровыеДанные.Найти("ФизическоеЛицо") <> Неопределено Тогда
				
			ТекстЗапроса = ТекстЗапроса +
				",
				|	ДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо";
				
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ТолькоРазрешенные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;	
	
	ТекстЗапроса = ТекстЗапроса +
		"
		|ПОМЕСТИТЬ " + ИмяВТКадровыеДанныеСотрудников + "
		|ИЗ
		|	" + ИмяВременнойТаблицыОтборовСотрудников + " КАК " + ИмяВременнойТаблицыОтборовСотрудников + "
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК ДанныеСотрудников
		|		ПО " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + " = ДанныеСотрудников.Ссылка";
		
	Если НеобходимыТекущиеДанныеСотрудника
		ИЛИ (НЕ ФОИспользоватьКадровыйУчет И (НеобходимыДанныеДолжности ИЛИ НеобходимыДанныеПодразделения)) Тогда
		
		ТекстЗапроса = ТекстЗапроса + 
			"
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			| 	ПО " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + " = ТекущиеКадровыеДанныеСотрудников.Сотрудник";
		
	КонецЕсли;
	
	Если НеобходимаТекущаяТарифнаяСтавкаСотрудника ИЛИ НЕ ФОИспользоватьКадровыйУчет Тогда
		
		ТекстЗапроса = ТекстЗапроса +
			"
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущаяТарифнаяСтавкаСотрудников КАК ТекущаяТарифнаяСтавкаСотрудников
			| 	ПО " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + " = ТекущаяТарифнаяСтавкаСотрудников.Сотрудник";
		
	КонецЕсли;
	
	Если МассивКадровыхДанныхФизическогоЛица.Количество() > 0 Тогда
			
		ТекстЗапроса = ТекстЗапроса +
			"
			|ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТКадровыеДанныеФизическихЛиц + " КАК КадровыеДанныеФизическихЛиц
			|		ПО " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + ".ФизическоеЛицо = КадровыеДанныеФизическихЛиц.ФизическоеЛицо
			|			И " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Период + " = КадровыеДанныеФизическихЛиц.Период";
		
	КонецЕсли;
	
	Если ФОИспользоватьКадровыйУчет Тогда
		
		МассивИзмерений = Новый Массив;
		МассивИзмерений.Добавить("Период");
		МассивИзмерений.Добавить("Сотрудник");
			
		СоответствиеИзмеренийПолямТаблицы = Новый Соответствие;
		СоответствиеИзмеренийПолямТаблицы.Вставить("Период", ПоляОтбораСотрудников.Период);
		СоответствиеИзмеренийПолямТаблицы.Вставить("Сотрудник", ПоляОтбораСотрудников.Сотрудник);
		
		Если НеобходимПризнакОформленПриемНаРаботу Тогда
			
			ИмяВТИзмеренияДатыДляТаблицыПриказов = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТИзмеренияДатыДляТаблицыПриказов");
			ИмяВТКадроваяИсторияСотрудниковВсеСобытия = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТКадроваяИсторияСотрудниковСобытиеПрием");
			ИмяВТКадроваяИсторияСотрудниковКоличествоСобытий = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТКадроваяИсторияСотрудниковКоличествоСобытий");
			
			ПоляОтбора = Неопределено;
				 
			КоллекцииПолей = ЗарплатаКадры.КоллекцииПолейДляПодготовкиТекстаЗапроса("КадроваяИсторияСотрудников", МассивИзмерений); 
				
			ЗапросВТИмяРегистра = ЗарплатаКадры.ЗапросВТИмяРегистра(
				ТолькоРазрешенные, 
				КоллекцииПолей, 
				"КадроваяИсторияСотрудников", 
				ИмяВТИзмеренияДатыДляТаблицыПриказов, 
				ИмяВТКадроваяИсторияСотрудниковВсеСобытия, 
				ПоляОтбора, 
				СоответствиеИзмеренийПолямТаблицы);
					
			ЗарплатаКадры.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТИмяРегистра);
					
			ТекстЗапроса = 
				"ВЫБРАТЬ
				|	ИзмеренияДаты." + ПоляОтбораСотрудников.Сотрудник + " КАК Сотрудник,
				|	ДАТАВРЕМЯ(1,1,1) КАК ДатаНачала,
				|	ИзмеренияДаты." + ПоляОтбораСотрудников.Период + " КАК ДатаОкончания
				|ПОМЕСТИТЬ " + ИмяВТИзмеренияДатыДляТаблицыПриказов + "
				|ИЗ
				|	" + ИмяВременнойТаблицыОтборовСотрудников + " КАК ИзмеренияДаты"
				+ ЗарплатаКадры.РазделительЗапросов()
				+ ЗапросВТИмяРегистра.Текст
				+ ЗарплатаКадры.РазделительЗапросов()
				+ "ВЫБРАТЬ
				|	КадроваяИсторияСотрудников.Сотрудник,
				|	КОЛИЧЕСТВО(КадроваяИсторияСотрудников.Период) КАК Количество
				|ПОМЕСТИТЬ "+  ИмяВТКадроваяИсторияСотрудниковКоличествоСобытий + "
				|ИЗ
				|	" + ИмяВТКадроваяИсторияСотрудниковВсеСобытия + " КАК КадроваяИсторияСотрудников
				|СГРУППИРОВАТЬ ПО
				|	КадроваяИсторияСотрудников.Сотрудник
				|"
				+ ЗарплатаКадры.РазделительЗапросов()
				+ ТекстЗапроса;
				
			ТекстЗапроса = ТекстЗапроса +
				"
				|ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТКадроваяИсторияСотрудниковКоличествоСобытий + " КАК КоличествоКадровыхСобытий
				| 	ПО " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + " = КоличествоКадровыхСобытий.Сотрудник";
				
			ИменаВТКУничтожению.Добавить(ИмяВТКадроваяИсторияСотрудниковКоличествоСобытий);
			ИменаВТКУничтожению.Добавить(ИмяВТКадроваяИсторияСотрудниковВсеСобытия);
			ИменаВТКУничтожению.Добавить(ИмяВТИзмеренияДатыДляТаблицыПриказов);
			
		КонецЕсли; 
		
		Если МассивФункциональныхОпций.Количество() > 0
			ИЛИ СредиПолейЗапрашиваемыхДанныхЕстьПолеОрганизация
			ИЛИ СредиПолейЗапрашиваемыхДанныхЕстьПолеПодразделение
			ИЛИ СредиПолейЗапрашиваемыхДанныхЕстьПолеДолжность
			ИЛИ СредиПолейЗапрашиваемыхДанныхЕстьПолеВидЗанятости
			ИЛИ СредиПолейЗапрашиваемыхДанныхЕстьПолеВидСобытия
			ИЛИ НеобходимыДанныеДолжности
			ИЛИ НеобходимыДанныеПодразделения Тогда
			
			ИмяВТКадроваяИсторияСотрудниковСрезПоследних = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТКадроваяИсторияСотрудниковСрезПоследних");
			
			ПоляОтбора = Неопределено;
			Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
				ПоляОтбораПериодическихДанных.Свойство("КадроваяИсторияСотрудников", ПоляОтбора);
			КонецЕсли;
				 
			КоллекцииПолей = ЗарплатаКадры.КоллекцииПолейДляПодготовкиТекстаЗапроса("КадроваяИсторияСотрудников", МассивИзмерений); 
				
			ЗапросВТИмяРегистраСрез = ЗарплатаКадры.ЗапросВТИмяРегистраСрез(
				ТолькоРазрешенные, 
				КоллекцииПолей, 
				"КадроваяИсторияСотрудников", 
				ИмяВременнойТаблицыОтборовСотрудников, 
				ИмяВТКадроваяИсторияСотрудниковСрезПоследних, 
				ПоляОтбора, 
				, 
				, 
				Истина,
				СоответствиеИзмеренийПолямТаблицы);
					
			ЗарплатаКадры.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТИмяРегистраСрез);
				
			ТекстЗапроса = ЗапросВТИмяРегистраСрез.Текст + ЗарплатаКадры.РазделительЗапросов() + ТекстЗапроса;
				
			ТекстЗапроса = ТекстЗапроса +
				"
				|ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТКадроваяИсторияСотрудниковСрезПоследних + " КАК КадроваяИсторияСотрудников
				| 	ПО " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + " = КадроваяИсторияСотрудников.Сотрудник
				|		И " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Период + " = КадроваяИсторияСотрудников.Период";
				
			ИменаВТКУничтожению.Добавить(ИмяВТКадроваяИсторияСотрудниковСрезПоследних);
			
		КонецЕсли;
		
		Если НеобходимыСведенияПриказаОПриеме
			ИЛИ НеобходимыСведенияПриказаОбУвольнении Тогда
			
			ИмяВТИзмеренияДатыДляТаблицыПриказов = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТИзмеренияДатыДляТаблицыПриказов");
			ИмяВТКадроваяИсторияСотрудников = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТКадроваяИсторияСотрудников");
			
			КоллекцииПолей = ЗарплатаКадры.КоллекцииПолейДляПодготовкиТекстаЗапроса("КадроваяИсторияСотрудников", МассивИзмерений); 
				
			ПоляОтбора = Новый Массив;
			СтруктураОтбора = Новый Структура(
				"ЛевоеЗначение,ВидСравнения,ПравоеЗначение",
				"ВидСобытия",
				"В",
				"ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)");
			ПоляОтбора.Добавить(СтруктураОтбора);
			
			ЗапросВТИмяРегистраСрез = ЗарплатаКадры.ЗапросВТИмяРегистра(
				ТолькоРазрешенные, 
				КоллекцииПолей, 
				"КадроваяИсторияСотрудников", 
				ИмяВТИзмеренияДатыДляТаблицыПриказов, 
				ИмяВТКадроваяИсторияСотрудников, 
				ПоляОтбора, 
				СоответствиеИзмеренийПолямТаблицы);
					
			ЗарплатаКадры.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТИмяРегистраСрез);
				
			ТекстЗапроса = 
				"ВЫБРАТЬ
				|	ИзмеренияДаты." + ПоляОтбораСотрудников.Сотрудник + " КАК Сотрудник,
				|	ДАТАВРЕМЯ(1,1,1) КАК ДатаНачала,
				|	ИзмеренияДаты." + ПоляОтбораСотрудников.Период + " КАК ДатаОкончания
				|ПОМЕСТИТЬ " + ИмяВТИзмеренияДатыДляТаблицыПриказов + "
				|ИЗ
				|	" + ИмяВременнойТаблицыОтборовСотрудников + " КАК ИзмеренияДаты"
				+ ЗарплатаКадры.РазделительЗапросов()
				+ ЗапросВТИмяРегистраСрез.Текст
				+ ЗарплатаКадры.РазделительЗапросов()
				+ ТекстЗапроса;
			
			Если НеобходимыСведенияПриказаОПриеме Тогда
				
				ТекстЗапроса = ТекстЗапроса +
					"
					|ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТКадроваяИсторияСотрудников + " КАК ПриказыОПриеме
					| 	ПО " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + " = ПриказыОПриеме.Сотрудник
					|		И ПриказыОПриеме.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)";
				
			КонецЕсли; 
				
			Если НеобходимыСведенияПриказаОбУвольнении Тогда
				
				ТекстЗапроса = ТекстЗапроса +
					"
					|ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТКадроваяИсторияСотрудников + " КАК ПриказыОбУвольнении
					| 	ПО " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + " = ПриказыОбУвольнении.Сотрудник
					|		И ПриказыОбУвольнении.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)";
				
			КонецЕсли; 
				
			ИменаВТКУничтожению.Добавить(ИмяВТИзмеренияДатыДляТаблицыПриказов);
			ИменаВТКУничтожению.Добавить(ИмяВТКадроваяИсторияСотрудников);
			
		КонецЕсли;
	
		Если НеобходимаТарифнаяСтавкаСотрудника Тогда
			
			ИмяВТТарифныеСтавкиСотрудников = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТТарифныеСтавкиСотрудников");
				
			ЗапросВТТарифныеСтавкиСотрудников = КадровыйУчет.ЗапросВТТарифныеСтавкиСотрудников(
				ТолькоРазрешенные,
				ИмяВТТарифныеСтавкиСотрудников,
				ИмяВременнойТаблицыОтборовСотрудников,
				ПоляОтбораСотрудников,
				ПоляОтбораПериодическихДанных);
			
			ЗарплатаКадры.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТТарифныеСтавкиСотрудников);
			
			ТекстЗапроса = 
				ЗапросВТТарифныеСтавкиСотрудников.Текст +
				ЗарплатаКадры.РазделительЗапросов() +
				ТекстЗапроса;
			
			ТекстЗапроса = ТекстЗапроса +
				"
				|ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТТарифныеСтавкиСотрудников + " КАК ТарифныеСтавкиСотрудников
				| 	ПО " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + " = ТарифныеСтавкиСотрудников.Сотрудник
				| 		И " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Период + " = ТарифныеСтавкиСотрудников.Период";
			
			ИменаВТКУничтожению.Добавить(ИмяВТТарифныеСтавкиСотрудников);
			
		КонецЕсли; 
		
	КонецЕсли; 
		
	Если НеобходимыДанныеДолжности Тогда
		
		ТекстЗапроса = ТекстЗапроса +
			"
			|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК ДанныеДолжности
			| 	ПО " + КадровыйУчет.ПутьКДаннымПоИмениЗапрашиваемыхТекущихДанныхСотрудника("Должность") + " = ДанныеДолжности.Ссылка";
			
	КонецЕсли; 
	
	Если НеобходимыДанныеПодразделения Тогда
		
		ТекстЗапроса = ТекстЗапроса +
			"
			|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ДанныеПодразделения
			| 	ПО " + КадровыйУчет.ПутьКДаннымПоИмениЗапрашиваемыхТекущихДанныхСотрудника("Подразделение") + " = ДанныеПодразделения.Ссылка";
			
	КонецЕсли; 
	
	Если МассивФункциональныхОпций.Количество() > 0 Тогда
		
		ИмяВТФункциональныеОпцииОрганизаций = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТФункциональныеОпцииОрганизаций");
		
		ЗапросВТФункциональныеОпцииОрганизаций = ЗапросВТФункциональныеОпцииОрганизаций(
				ТолькоРазрешенные, 
				ИмяВТФункциональныеОпцииОрганизаций,
				МассивФункциональныхОпций);
		
		ЗарплатаКадры.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТФункциональныеОпцииОрганизаций);
		
		ТекстЗапроса = 
			ЗапросВТФункциональныеОпцииОрганизаций.Текст +
			ЗарплатаКадры.РазделительЗапросов() +
			ТекстЗапроса +
			"
			|ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТФункциональныеОпцииОрганизаций + " КАК ФункциональныеОпции
			| 	ПО " + КадровыйУчет.ПутьКДаннымПоИмениЗапрашиваемыхТекущихДанныхСотрудника("Организация") + " = ФункциональныеОпции.Организация";
			
		ИменаВТКУничтожению.Добавить(ИмяВТФункциональныеОпцииОрганизаций);
		
	КонецЕсли; 
	
	ЗарплатаКадры.ДобавитьТекстУдаленияВременныхТаблиц(ТекстЗапроса, ИменаВТКУничтожению);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросВТСотрудникиОрганизации(ТолькоРазрешенные, ИмяВТСотрудникиОрганизации, Параметры) Экспорт
	
	Перем СписокФизическихЛиц;
	Перем ИмяВТФизическиеЛица;
	Перем ГоловнаяОрганизация;
	
	Если Параметры.ОтбиратьПоГоловнойОрганизации И ЗначениеЗаполнено(Параметры.Организация) Тогда
		ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Параметры.Организация);
	КонецЕсли; 
	
	Параметры.Свойство("СписокФизическихЛиц", СписокФизическихЛиц);
	Параметры.Свойство("ИмяВТФизическиеЛица", ИмяВТФизическиеЛица);
	
	Запрос = Новый Запрос;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		ИменаВТКУничтожению = Новый Массив;
		
		ИмяВТСотрудникиПериоды = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТСотрудникиПериоды");
		
		ТекстДатаНачала = "ДАТАВРЕМЯ(" + Формат(Параметры.НачалоПериода, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
		ТекстДатаОкончания = "ДАТАВРЕМЯ(" + Формат(?(ЗначениеЗаполнено(Параметры.ОкончаниеПериода), Параметры.ОкончаниеПериода, ТекущаяДатаСеанса()), "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
		
		Запрос.Текст = "ВЫБРАТЬ " + ?(ТолькоРазрешенные, "РАЗРЕШЕННЫЕ", "") + "
			|	Сотрудники.Ссылка КАК Сотрудник,
			|	" + ТекстДатаНачала + " КАК ДатаНачала,
			|	" + ТекстДатаОкончания + " КАК ДатаОкончания
			|ПОМЕСТИТЬ " + ИмяВТСотрудникиПериоды + "
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники";
			
		Если Параметры.ОтбиратьПоПодразделениюОсновногоМестаРаботы И ЗначениеЗаполнено(Параметры.Подразделение) Тогда
			СписокФизическихЛицОМР = СписокФизическихЛицПоПодразделениюОсновногоМестаРаботы(ТолькоРазрешенные,Параметры);
		Иначе
			СписокФизическихЛицОМР = Неопределено;
		КонецЕсли;	
		
		Запрос.Текст = Запрос.Текст + "
				|ГДЕ
				|	 ИСТИНА";
				
		Если СписокФизическихЛиц <> Неопределено Тогда
				
			Запрос.Текст = Запрос.Текст + "
				|	 И Сотрудники.Ссылка.ФизическоеЛицо В (&МассивФизическихЛиц)";
					
			Запрос.УстановитьПараметр("МассивФизическихЛиц", СписокФизическихЛиц); 
		КонецЕсли;
		Если СписокФизическихЛицОМР <> Неопределено Тогда
				
			Запрос.Текст = Запрос.Текст + "
				|	 И Сотрудники.Ссылка.ФизическоеЛицо В (&МассивФизическихЛицОМР)";
					
			Запрос.УстановитьПараметр("МассивФизическихЛицОМР", СписокФизическихЛицОМР); 
		КонецЕсли;
		
		Если ИмяВТФизическиеЛица <> Неопределено Тогда
			
			Запрос.Текст = Запрос.Текст + "
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ИмяВТФизическиеЛица + " КАК ФизическиеЛица
				|		ПО Сотрудники.Ссылка.ФизическоеЛицо = ФизическиеЛица." + Параметры.ИмяПоляФизическоеЛицо;
			
		КонецЕсли;
			
		ИменаВТКУничтожению.Добавить(ИмяВТСотрудникиПериоды);	
			
		ПоляОтбора = Новый Массив;	
		
		Если ЗначениеЗаполнено(Параметры.Организация) Тогда
			
			Если Параметры.ОтбиратьПоГоловнойОрганизации Тогда
				ПоляОтбора.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение", "ГоловнаяОрганизация", "=", ГоловнаяОрганизация));
			Иначе
				ПоляОтбора.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение", "Организация", "=", Параметры.Организация));
			КонецЕсли;
			
		КонецЕсли; 
		
		Если НЕ Параметры.ОтбиратьПоПодразделениюОсновногоМестаРаботы И ЗначениеЗаполнено(Параметры.Подразделение) Тогда
			ПоляОтбора.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение", "Подразделение", " В ИЕРАРХИИ ", Параметры.Подразделение));
		КонецЕсли; 
		
		ИмяВТКадроваяИсторияСотрудников = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТКадроваяИсторияСотрудников");
		
		МассивИзмерений = Новый Массив;
		МассивИзмерений.Добавить("Период");
		МассивИзмерений.Добавить("Сотрудник");
			
		КоллекцииПолей = ЗарплатаКадры.КоллекцииПолейДляПодготовкиТекстаЗапроса("КадроваяИсторияСотрудников", МассивИзмерений); 
					
		ЗапросВТИмяРегистра = ЗарплатаКадры.ЗапросВТИмяРегистра(
			ТолькоРазрешенные, 
			КоллекцииПолей, 
			"КадроваяИсторияСотрудников", 
			ИмяВТСотрудникиПериоды, 
			ИмяВТКадроваяИсторияСотрудников, 
			ПоляОтбора);
			
		ЗарплатаКадры.ОбъединитьЗапросы(Запрос, ЗапросВТИмяРегистра);
		
		ИменаВТКУничтожению.Добавить(ИмяВТКадроваяИсторияСотрудников);	
			
		ПоляОтбора = Новый Массив;
		
		Если ЗначениеЗаполнено(Параметры.Организация) Тогда
			Если Параметры.ОтбиратьПоГоловнойОрганизации Тогда
				ПоляОтбора.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение", "ГоловнаяОрганизация", "=", ГоловнаяОрганизация));
			КонецЕсли;
		КонецЕсли; 
		
		СоответствиеИзмеренийПолямТаблицы = Новый Соответствие;
		СоответствиеИзмеренийПолямТаблицы.Вставить("Период", "ДатаНачала");
			
		ИмяВТКадроваяИсторияСотрудниковСрезПоследних = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТКадроваяИсторияСотрудниковСрезПоследних");
		
		ЗапросВТИмяРегистраСрез = ЗарплатаКадры.ЗапросВТИмяРегистраСрез(
			ТолькоРазрешенные, 
			КоллекцииПолей, 
			"КадроваяИсторияСотрудников", 
			ИмяВТСотрудникиПериоды, 
			ИмяВТКадроваяИсторияСотрудниковСрезПоследних, 
			ПоляОтбора, 
			, 
			, 
			Истина,
			СоответствиеИзмеренийПолямТаблицы);
			
		ЗарплатаКадры.ОбъединитьЗапросы(Запрос, ЗапросВТИмяРегистраСрез);
		
		ИменаВТКУничтожению.Добавить(ИмяВТКадроваяИсторияСотрудниковСрезПоследних);	
			
		Если ПустаяСтрока(Параметры.КадровыеДанные) Тогда
			ИмяВТСотрудникиОрганизацииДляКадровойИстории = ИмяВТСотрудникиОрганизации;
		Иначе
			ИмяВТСотрудникиОрганизацииДляКадровойИстории = ЗарплатаКадры.УникальноеИмяВременнойТаблицы(ИмяВТСотрудникиОрганизации);
		КонецЕсли;
		
		ТекстУсловийДляСрезПоследних = "";
		
		Если ЗначениеЗаполнено(Параметры.Организация) 
			И НЕ Параметры.ОтбиратьПоГоловнойОрганизации Тогда
			
			ТекстУсловийДляСрезПоследних = "
				|	И КадроваяИсторияСотрудников.Организация = &КадроваяИсторияСотрудниковОрганизация"; 
			Запрос.УстановитьПараметр("КадроваяИсторияСотрудниковОрганизация", Параметры.Организация);
				
		КонецЕсли; 
		
		Если НЕ Параметры.ОтбиратьПоПодразделениюОсновногоМестаРаботы И ЗначениеЗаполнено(Параметры.Подразделение) Тогда
			
			ТекстУсловийДляСрезПоследних = ?(ПустаяСтрока(ТекстУсловийДляСрезПоследних), "", ТекстУсловийДляСрезПоследних) + "
			|	И КадроваяИсторияСотрудников.Подразделение В ИЕРАРХИИ (&КадроваяИсторияСотрудниковПодразделение)"; 
				
			Запрос.УстановитьПараметр("КадроваяИсторияСотрудниковПодразделение", Параметры.Подразделение);
				
		КонецЕсли; 
		
		Если НЕ Параметры.Интервалы Тогда
			Запрос.Текст = Запрос.Текст
				+ ЗарплатаКадры.РазделительЗапросов()
				+ "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	" + ТекстДатаОкончания + " КАК Период,
				|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
				|	КадроваяИсторияСотрудников.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
				|ПОМЕСТИТЬ " + ИмяВТСотрудникиОрганизацииДляКадровойИстории + "
				|ИЗ
				|	" + ИмяВТКадроваяИсторияСотрудниковСрезПоследних + " КАК КадроваяИсторияСотрудников
				|ГДЕ
				|	КадроваяИсторияСотрудников.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)"
				+ ТекстУсловийДляСрезПоследних
				+ "
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ
				|	" + ТекстДатаОкончания + ",
				|	КадроваяИсторияСотрудников.Сотрудник,
				|	КадроваяИсторияСотрудников.Сотрудник.ФизическоеЛицо
				|ИЗ
				|	" + ИмяВТКадроваяИсторияСотрудников + " КАК КадроваяИсторияСотрудников";
		Иначе
			Запрос.Текст = Запрос.Текст
				+ ЗарплатаКадры.РазделительЗапросов()
				+ "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	КадроваяИсторияСотрудников.Период КАК Период,
				|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
				|	КадроваяИсторияСотрудников.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
				|ПОМЕСТИТЬ " + ИмяВТСотрудникиОрганизацииДляКадровойИстории + "
				|ИЗ
				|	" + ИмяВТКадроваяИсторияСотрудниковСрезПоследних + " КАК КадроваяИсторияСотрудников
				|ГДЕ
				|	КадроваяИсторияСотрудников.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)"
				+ ТекстУсловийДляСрезПоследних
				+ "
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ
				|	КадроваяИсторияСотрудников.Период,
				|	КадроваяИсторияСотрудников.Сотрудник,
				|	КадроваяИсторияСотрудников.Сотрудник.ФизическоеЛицо
				|ИЗ
				|	" + ИмяВТКадроваяИсторияСотрудников + " КАК КадроваяИсторияСотрудников";
		КонецЕсли;	
			
		ДополнитьЗапросВТСотрудникиОрганизацииКадровымиДанными(
			Запрос,
			ТолькоРазрешенные,
			ИмяВТСотрудникиОрганизации,
			ИмяВТСотрудникиОрганизацииДляКадровойИстории,
			Параметры.КадровыеДанные);
			
		ЗарплатаКадры.ДобавитьТекстУдаленияВременныхТаблиц(Запрос.Текст, ИменаВТКУничтожению);
		
	Иначе
		
		ИмяВТСотрудникиПериод = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТСотрудникиПериод");
		
		ТекстПериод = "ДАТАВРЕМЯ(" + Формат(?(ЗначениеЗаполнено(Параметры.ОкончаниеПериода), Параметры.ОкончаниеПериода, ТекущаяДатаСеанса()), "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
		
		Запрос.Текст = "ВЫБРАТЬ " + ?(ТолькоРазрешенные, "РАЗРЕШЕННЫЕ", "") + "
			|	Сотрудники.Ссылка КАК Сотрудник,
			|	" + ТекстПериод + " КАК Период
			|ПОМЕСТИТЬ " + ИмяВТСотрудникиПериод + "
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники";
			
		Если Параметры.ОтбиратьПоПодразделениюОсновногоМестаРаботы И ЗначениеЗаполнено(Параметры.Подразделение) Тогда
			СписокФизическихЛицОМР = СписокФизическихЛицПоПодразделениюОсновногоМестаРаботы(ТолькоРазрешенные,Параметры);
		Иначе
			СписокФизическихЛицОМР = Неопределено;
		КонецЕсли;	
		
		Запрос.Текст = Запрос.Текст + "
				|ГДЕ
				|	 ИСТИНА";

		
		Если СписокФизическихЛиц <> Неопределено Тогда
				
			Запрос.Текст = Запрос.Текст + "
				|	 И Сотрудники.Ссылка.ФизическоеЛицо В (&МассивФизическихЛиц)";
					
			Запрос.УстановитьПараметр("МассивФизическихЛиц", СписокФизическихЛиц); 
		КонецЕсли;
		Если СписокФизическихЛицОМР <> Неопределено Тогда
				
			Запрос.Текст = Запрос.Текст + "
				|	 И Сотрудники.Ссылка.ФизическоеЛицо В (&МассивФизическихЛицОМР)";
					
			Запрос.УстановитьПараметр("МассивФизическихЛицОМР", СписокФизическихЛицОМР); 
		КонецЕсли;
		
		Если ИмяВТФизическиеЛица <> Неопределено Тогда
			
			Запрос.Текст = Запрос.Текст + "
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ИмяВТФизическиеЛица + " КАК ФизическиеЛица
				|		ПО Сотрудники.Ссылка.ФизическоеЛицо = ФизическиеЛица." + Параметры.ИмяПоляФизическоеЛицо;
			
		КонецЕсли; 
		
		ИмяВТКадровыеДанныеСотрудников = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТКадровыеДанныеСотрудников");
		
		МассивНеобходимыхКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("ФизическоеЛицо,ДатаПриема,ДатаУвольнения,ГоловнаяОрганизация,Организация,Подразделение");
		
		МассивЗаказанныхКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Параметры.КадровыеДанные);
		Для каждого ИмяПоля Из МассивЗаказанныхКадровыхДанных Цикл
			Если МассивНеобходимыхКадровыхДанных.Найти(ИмяПоля) = Неопределено Тогда
				МассивНеобходимыхКадровыхДанных.Добавить(ИмяПоля)
			КонецЕсли; 
		КонецЦикла;
		
		ЗапросВТКадровыеДанныеСотрудников = КадровыйУчет.ЗапросВТКадровыеДанныеСотрудников(
			ТолькоРазрешенные,
			ИмяВТКадровыеДанныеСотрудников,
			ИмяВТСотрудникиПериод, 
			КадровыйУчет.ПоляОтбораСотрудников(),
			МассивНеобходимыхКадровыхДанных,);
			
		ЗарплатаКадры.ОбъединитьЗапросы(Запрос, ЗапросВТКадровыеДанныеСотрудников);
		
		Запрос.Текст = Запрос.Текст +
			ЗарплатаКадры.РазделительЗапросов() +
			"ВЫБРАТЬ
			|	КадровыеДанныеСотрудников.Период КАК Период,
			|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
			|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо";
			
		Для каждого ИмяПоля Из МассивЗаказанныхКадровыхДанных Цикл
			
			Если ВРег(ИмяПоля) = "ПЕРИОД"
				ИЛИ ВРег(ИмяПоля) = "СОТРУДНИК"
				ИЛИ ВРег(ИмяПоля) = "ФИЗИЧЕСКОЕЛИЦО" Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + ",
				|	КадровыеДанныеСотрудников." + ИмяПоля + " КАК " + ИмяПоля;
				
		КонецЦикла;
			
		Запрос.Текст = Запрос.Текст + "
			|ПОМЕСТИТЬ " + ИмяВТСотрудникиОрганизации + "
			|ИЗ
			|	" + ИмяВТКадровыеДанныеСотрудников + " КАК КадровыеДанныеСотрудников";
			
		ТекстЗапросаУсловий = "";
		
		Если ЗначениеЗаполнено(Параметры.НачалоПериода) ИЛИ ЗначениеЗаполнено(Параметры.ОкончаниеПериода) Тогда
				
			ТекстНачалоПериода = "ДАТАВРЕМЯ(" + Формат(Параметры.НачалоПериода, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
			ТекстОкончаниеПериода = "ДАТАВРЕМЯ(" + Формат(Параметры.ОкончаниеПериода, "ДФ='гггг, М, д, Ч, м, с'; ДП=") + ")";
		
			ТекстЗапросаУсловий = "
				|			КадровыеДанныеСотрудников.ДатаПриема <= " + ТекстОкончаниеПериода + "
				|			И КадровыеДанныеСотрудников.ДатаПриема <> ДАТАВРЕМЯ(1, 1, 1)
				|			И (КадровыеДанныеСотрудников.ДатаУвольнения >= " + ТекстНачалоПериода + "
				|				ИЛИ КадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1))
				|";
			
		КонецЕсли;
		
		Если НЕ Параметры.ОтбиратьПоПодразделениюОсновногоМестаРаботы И ЗначениеЗаполнено(Параметры.Подразделение) Тогда
			
			Если НЕ ПустаяСтрока(ТекстЗапросаУсловий) Тогда
				ТекстЗапросаУсловий = ТекстЗапросаУсловий + "
					|	И ";
			КонецЕсли;
			
			ТекстЗапросаУсловий = ТекстЗапросаУсловий + "КадровыеДанныеСотрудников.Подразделение В ИЕРАРХИИ (&Подразделение)";
			
			Запрос.УстановитьПараметр("Подразделение", Параметры.Подразделение);
			
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Параметры.Организация) Тогда
			
			Если НЕ ПустаяСтрока(ТекстЗапросаУсловий) Тогда
				ТекстЗапросаУсловий = ТекстЗапросаУсловий + "
					|	И ";
			КонецЕсли;
			
			Если Параметры.ОтбиратьПоГоловнойОрганизации Тогда
				
				ТекстЗапросаУсловий = ТекстЗапросаУсловий + "КадровыеДанныеСотрудников.ГоловнаяОрганизация = &ГоловнаяОрганизация";
				
				Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
				
			Иначе
				
				ТекстЗапросаУсловий = ТекстЗапросаУсловий + "КадровыеДанныеСотрудников.Организация = &Организация";
				
				Запрос.УстановитьПараметр("Организация", Параметры.Организация);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ТекстЗапросаУсловий) Тогда
			
			Запрос.Текст = Запрос.Текст + "
				|ГДЕ
				|	" + ТекстЗапросаУсловий;
			
		КонецЕсли;
		
		ЗарплатаКадры.ДобавитьТекстУдаленияВременнойТаблицы(Запрос.Текст, ИмяВТСотрудникиПериод);
		ЗарплатаКадры.ДобавитьТекстУдаленияВременнойТаблицы(Запрос.Текст, ИмяВТКадровыеДанныеСотрудников);
	
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Процедура ДополнитьЗапросВТСотрудникиОрганизацииКадровымиДанными(Запрос, ТолькоРазрешенные, ИмяВТСотрудникиОрганизации, ИмяВТСотрудникиОрганизацииПромежуточная, КадровыеДанные) Экспорт
	
	Если ПустаяСтрока(КадровыеДанные) Тогда
		Возврат;
	КонецЕсли; 
	
	МассивНеобходимыхКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КадровыеДанные);
	
	Если Найти(ВРег(КадровыеДанные), "ФИЗИЧЕСКОЕЛИЦО") = 0 Тогда
		МассивНеобходимыхКадровыхДанных.Добавить("ФизическоеЛицо");
	КонецЕсли; 
	
	ЗапросВТКадровыеДанныеСотрудников = КадровыйУчет.ЗапросВТКадровыеДанныеСотрудников(
		ТолькоРазрешенные,
		ИмяВТСотрудникиОрганизации,
		ИмяВТСотрудникиОрганизацииПромежуточная, 
		КадровыйУчет.ПоляОтбораСотрудников(),
		МассивНеобходимыхКадровыхДанных,);
		
	ЗарплатаКадры.ОбъединитьЗапросы(Запрос, ЗапросВТКадровыеДанныеСотрудников);

КонецПроцедуры

// Возвращает структуру, содержащую описание временной таблицы, используемой в качестве фильтра
// для получения контактной информации
//
//	Параметры:
//		ИмяВТОтборОбъектов - Строка, имя временной таблицы, служащей отбором для получаемой контактной информации
//		ИмяРеквизитаОбъект - Строка, имя реквизита во временной таблице, содержащего объект отбора контактной информации
//		ИмяРеквизитаВид - Строка, имя реквизита во временной таблице, содержащего вид контактной информации, если не указано
//							в результирующую таблицу будет помещена контактная информация любого вида
//		ИмяРеквизитаТип - Строка, имя реквизита во временной таблице, содержащего тип контактной информации, если не указано
//							в результирующую таблицу будет помещена контактная информация любого типа
//
//	Возвращаемое значение:
//		Структура - содержащая ключи:
//			ИмяВТОтборОбъектов
//			ИмяРеквизитаОбъект
//			ИмяРеквизитаВид
//			ИмяРеквизитаТип
//
Функция ОписаниеВременнойТаблицыОтборовКонтактнойИнформации(ИмяВТОтборОбъектов, ИмяРеквизитаОбъект, ИмяРеквизитаВид = "", ИмяРеквизитаТип = "") Экспорт
	
	ОписаниеВременнойТаблицы = Новый Структура;
	
	ОписаниеВременнойТаблицы.Вставить("ИмяВТОтборОбъектов", ИмяВТОтборОбъектов);
	ОписаниеВременнойТаблицы.Вставить("ИмяРеквизитаОбъект", ИмяРеквизитаОбъект);
	ОписаниеВременнойТаблицы.Вставить("ИмяРеквизитаВид", ИмяРеквизитаВид);
	ОписаниеВременнойТаблицы.Вставить("ИмяРеквизитаТип", ИмяРеквизитаТип);
	
	Возврат ОписаниеВременнойТаблицы;
	
КонецФункции

// Возвращает запрос, с подготовленным текстом, для создания временной таблицы, содержащей контактную информацию
//
//	Параметры:
//		ТолькоРазрешенные - Булево, если истина - запрос строится с учетом прав доступа к объектам, содержащим
//							контактную информацию, если ложь - без учета прав доступа (возможно, для выполнения запроса
//							потребуется установить привилегированный режим)
//		ИмяВТКонтактнаяИнформация - Строка, имя временной таблицы, которая создастся в ходе выполнения запроса
//		ПолноеИмяОбъектаМетаданных - Строка, полное имя объекта метаданных, содержащего контактную информацию
//							(например, "Справочник.ФизическиеЛица")
//		ОписаниеВременнойТаблицыОтборов - Структура, подготовленная с помощью метода "ОписаниеВременнойТаблицыОтборовКонтактнойИнформации"
//
//	Возвращаемое значение:
//		Запрос
//
Функция ЗапросВТКонтактнаяИнформация(ТолькоРазрешенные, ИмяВТКонтактнаяИнформация, ПолноеИмяОбъектаМетаданных, ОписаниеВременнойТаблицыОтборов)
	
	Запрос = Новый Запрос;
	
	// Формирование текста запроса
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Ссылка КАК Объект,
		|	КонтактнаяИнформация.НомерСтроки,
		|	КонтактнаяИнформация.Тип,
		|	КонтактнаяИнформация.Вид,
		|	КонтактнаяИнформация.Представление,
		|	КонтактнаяИнформация.ЗначенияПолей
		|ПОМЕСТИТЬ ВТВсяКонтактнаяИнформация
		|ИЗ
		|	&КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОтборКонтактнойИнформации КАК ОтборКонтактнойИнформации
		|		ПО КонтактнаяИнформация.Ссылка = ОтборКонтактнойИнформации.РеквизитОбъекта
		|		И &ТекстОтбораКонтактнойИнформации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсяКонтактнаяИнформация.Объект,
		|	ВсяКонтактнаяИнформация.Вид,
		|	МИНИМУМ(ВсяКонтактнаяИнформация.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ ВТПервыеЗначенияПоВидуКонтактнойИнформации
		|ИЗ
		|	ВТВсяКонтактнаяИнформация КАК ВсяКонтактнаяИнформация
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсяКонтактнаяИнформация.Объект,
		|	ВсяКонтактнаяИнформация.Вид
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсяКонтактнаяИнформация.Объект,
		|	ВсяКонтактнаяИнформация.Тип,
		|	ВсяКонтактнаяИнформация.Вид,
		|	ВсяКонтактнаяИнформация.Представление,
		|	ВсяКонтактнаяИнформация.ЗначенияПолей
		|ПОМЕСТИТЬ ВТКонтактнаяИнформация
		|ИЗ
		|	ВТВсяКонтактнаяИнформация КАК ВсяКонтактнаяИнформация
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПервыеЗначенияПоВидуКонтактнойИнформации КАК ПервыеЗначенияПоВидуКонтактнойИнформации
		|		ПО ВсяКонтактнаяИнформация.Объект = ПервыеЗначенияПоВидуКонтактнойИнформации.Объект
		|			И ВсяКонтактнаяИнформация.Вид = ПервыеЗначенияПоВидуКонтактнойИнформации.Вид
		|			И ВсяКонтактнаяИнформация.НомерСтроки = ПервыеЗначенияПоВидуКонтактнойИнформации.НомерСтроки";
		
	ТекстОтбораКонтактнойИнформации = "";
	Если НЕ ПустаяСтрока(ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаВид) Тогда
		ТекстОтбораКонтактнойИнформации =  "
			|			И КонтактнаяИнформация.Вид = ОтборКонтактнойИнформации.РеквизитВид";
	КонецЕсли;
		
	Если НЕ ПустаяСтрока(ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаТип) Тогда
		ТекстОтбораКонтактнойИнформации = ТекстОтбораКонтактнойИнформации + "
			|			И КонтактнаяИнформация.Тип = ОтборКонтактнойИнформации.РеквизитТип";
	КонецЕсли;
		
	// Замена ключевых выражений
	Если НЕ ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РАЗРЕШЕННЫЕ", "");
	КонецЕсли; 
	
	ИмяВТВсяКонтактнаяИнформация = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТВсяКонтактнаяИнформация");
	ИмяВТПервыеЗначенияПоВидуКонтактнойИнформации = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТПервыеЗначенияПоВидуКонтактнойИнформации");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТКонтактнаяИнформация", ИмяВТКонтактнаяИнформация);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтборКонтактнойИнформации", ОписаниеВременнойТаблицыОтборов.ИмяВТОтборОбъектов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТВсяКонтактнаяИнформация", ИмяВТВсяКонтактнаяИнформация);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПервыеЗначенияПоВидуКонтактнойИнформации", ИмяВТПервыеЗначенияПоВидуКонтактнойИнформации);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КонтактнаяИнформация", ПолноеИмяОбъектаМетаданных + ".КонтактнаяИнформация");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "РеквизитОбъекта", ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаОбъект);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ТекстОтбораКонтактнойИнформации", ТекстОтбораКонтактнойИнформации);
	
	Если НЕ ПустаяСтрока(ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаВид) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РеквизитВид", ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаВид);
	КонецЕсли; 
	
	Если НЕ ПустаяСтрока(ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаТип) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РеквизитТип", ОписаниеВременнойТаблицыОтборов.ИмяРеквизитаТип);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция СписокФизическихЛицПоПодразделениюОсновногоМестаРаботы(ТолькоРазрешенные, Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОкончаниеПериода", Параметры.ОкончаниеПериода);
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.УстановитьПараметр("Подразделение", Параметры.Подразделение);
	
	Запрос.Текст = "ВЫБРАТЬ " + ?(ТолькоРазрешенные, "РАЗРЕШЕННЫЕ", "") + "
	|	РегистрСведений.Период,
	|	РегистрСведений.ФизическоеЛицо,
	|	РегистрСведений.Организация,
	|	РегистрСведений.Подразделение,
	|	РегистрСведений.ВидСобытия,
	|	РегистрСведений.ВидЗанятости
	|ПОМЕСТИТЬ ВТКадроваяИстория
	|ИЗ
	|	РегистрСведений.КадроваяИсторияСотрудников КАК РегистрСведений
	|ГДЕ
	|   РегистрСведений.Организация = &Организация
	|   И РегистрСведений.Период <= &ОкончаниеПериода
	|   И РегистрСведений.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
	|   И РегистрСведений.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрСведений.ФизическоеЛицо,
	|	МАКСИМУМ(РегистрСведений.Период) КАК Период
	|ПОМЕСТИТЬ ВТМаксимальныеПериоды
	|ИЗ
	|	ВТКадроваяИстория КАК РегистрСведений
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрСведений.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрСведений.ФизическоеЛицо
	|ИЗ
	|	ВТМаксимальныеПериоды КАК МаксимальныеПериоды
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИстория КАК РегистрСведений
	|	ПО РегистрСведений.Период = МаксимальныеПериоды.Период
	|	 И РегистрСведений.ФизическоеЛицо = МаксимальныеПериоды.ФизическоеЛицо
	|ГДЕ
	|	НЕ РегистрСведений.Период ЕСТЬ NULL
	|   И РегистрСведений.Подразделение В ИЕРАРХИИ	(&Подразделение)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
	
КонецФункции	

Функция ЗапросВТОсновныеСотрудникиОрганизации(ТолькоРазрешенные, ИмяВТСотрудникиОрганизации, ИмяВременнойТаблицыОтборовСотрудников) Экспорт
	
	ФОИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	Запрос = Новый Запрос;
	
	ИмяВТКадроваяИстория = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТКадроваяИстория");
	ИмяВТМаксимальныеПериоды = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТМаксимальныеПериоды");
	
	Если ФОИспользоватьКадровыйУчет Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ " + ?(ТолькоРазрешенные, "РАЗРЕШЕННЫЕ", "") + " 
		|	РегистрСведений.Период,
		|	РегистрСведений.Сотрудник,
		|	РегистрСведений.ФизическоеЛицо,
		|	РегистрСведений.Организация
		|ПОМЕСТИТЬ "+ИмяВТКадроваяИстория+"
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК РегистрСведений
		|ГДЕ
		|   РегистрСведений.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
		|	И РегистрСведений.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)";

		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ " + ?(ТолькоРазрешенные, "РАЗРЕШЕННЫЕ", "") + " 
		|	РегистрСведений.ДатаПриема КАК Период,
		|	РегистрСведений.Сотрудник,
		|	РегистрСведений.ФизическоеЛицо,
		|	РегистрСведений.ТекущаяОрганизация КАК Организация
		|ПОМЕСТИТЬ "+ИмяВТКадроваяИстория+"
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК РегистрСведений
		|ГДЕ
		|   РегистрСведений.ТекущийВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)";
		
	КонецЕсли;
	
	
	
	Запрос.Текст = Запрос.Текст+"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзмеренияДаты.Период КАК ЗаданныйПериод,
	|	ИзмеренияДаты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ИзмеренияДаты.Организация КАК Организация,
	|	МАКСИМУМ(РегистрСведений.Период) КАК Период
	|ПОМЕСТИТЬ "+ИмяВТМаксимальныеПериоды+"
	|ИЗ
	|	"+ИмяВременнойТаблицыОтборовСотрудников+" КАК ИзмеренияДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ "+ИмяВТКадроваяИстория+" КАК РегистрСведений
	|		ПО (РегистрСведений.Период <= ИзмеренияДаты.Период ИЛИ ИзмеренияДаты.Период = ДАТАВРЕМЯ(1,1,1,0,0,0))
	|			И (РегистрСведений.ФизическоеЛицо = ИзмеренияДаты.ФизическоеЛицо)
	|			И (РегистрСведений.Организация = ИзмеренияДаты.Организация)
    |
	|СГРУППИРОВАТЬ ПО
	|	ИзмеренияДаты.Период,
	|	ИзмеренияДаты.ФизическоеЛицо,
	|	ИзмеренияДаты.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Период КАК Период,
	|	КадроваяИстория.Сотрудник КАК Сотрудник,
	|	КадроваяИстория.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадроваяИстория.Организация КАК Организация
	|ПОМЕСТИТЬ "+ИмяВТСотрудникиОрганизации+"
	|ИЗ
	|	"+ИмяВременнойТаблицыОтборовСотрудников+" КАК Сотрудники
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ИмяВТМаксимальныеПериоды+" КАК МаксимальныеПериоды
	|		ПО (Сотрудники.Период = МаксимальныеПериоды.ЗаданныйПериод)
	|			И (Сотрудники.ФизическоеЛицо = МаксимальныеПериоды.ФизическоеЛицо)
	|			И (Сотрудники.Организация = МаксимальныеПериоды.Организация)
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ИмяВТКадроваяИстория+" КАК КадроваяИстория
	|		ПО (МаксимальныеПериоды.Период = КадроваяИстория.Период)
	|			И (МаксимальныеПериоды.ФизическоеЛицо = КадроваяИстория.ФизическоеЛицо)
	|			И (МаксимальныеПериоды.Организация = КадроваяИстория.Организация)
	|ГДЕ
	|	(НЕ МаксимальныеПериоды.Период ЕСТЬ NULL)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ "+ИмяВТКадроваяИстория+"
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ "+ИмяВТМаксимальныеПериоды+"
	|
	|";
	
	Возврат Запрос;
	
КонецФункции

Процедура СоздатьВТОсновныеМестаРаботыФизическихЛиц(МенеджерВременныхТаблиц, ТолькоРазрешенные, Организация, ИмяВТОсновныеМестаРаботыФизическихЛиц, ИмяВТФизическихЛиц, ИмяПоляПериод) Экспорт
	
	ФОИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ИмяВТКадроваяИстория = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТКадроваяИстория");
	ИмяВТМаксимальныеПериоды = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТМаксимальныеПериоды");
	
	Если ФОИспользоватьКадровыйУчет Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ " + ?(ТолькоРазрешенные, "РАЗРЕШЕННЫЕ", "") + " 
		|	РегистрСведений.Период,
		|	РегистрСведений.ФизическоеЛицо,
		|	РегистрСведений.ВидЗанятости,
		|	РегистрСведений.ВидСобытия
		|ПОМЕСТИТЬ "+ИмяВТКадроваяИстория+"
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК РегистрСведений
		|ГДЕ
		|   РегистрСведений.Организация = &Организация
		|   И РегистрСведений.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)";
		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ " + ?(ТолькоРазрешенные, "РАЗРЕШЕННЫЕ", "") + " 
		|	РегистрСведений.ДатаПриема КАК Период,
		|	РегистрСведений.ФизическоеЛицо,
		|	РегистрСведений.ТекущийВидЗанятости КАК ВидЗанятости,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием) КАК ВидСобытия
		|ПОМЕСТИТЬ "+ИмяВТКадроваяИстория+"
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК РегистрСведений
		|ГДЕ
		|   РегистрСведений.ТекущаяОрганизация = &Организация
		|   И РегистрСведений.ТекущийВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РегистрСведений.ДатаУвольнения КАК Период,
		|	РегистрСведений.ФизическоеЛицо,
		|	РегистрСведений.ТекущийВидЗанятости КАК ВидЗанятости,
		|	ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение) КАК ВидСобытия
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК РегистрСведений
		|ГДЕ
		|   РегистрСведений.ТекущаяОрганизация = &Организация
		|   И РегистрСведений.ТекущийВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)";
		
	КонецЕсли;
	
	
	
	Запрос.Текст = Запрос.Текст+"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИзмеренияДаты."+ИмяПоляПериод+" КАК ЗаданныйПериод,
	|	ИзмеренияДаты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	МАКСИМУМ(РегистрСведений.Период) КАК Период
	|ПОМЕСТИТЬ "+ИмяВТМаксимальныеПериоды+"
	|ИЗ
	|	"+ИмяВТФизическихЛиц+" КАК ИзмеренияДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ "+ИмяВТКадроваяИстория+" КАК РегистрСведений
	|		ПО (РегистрСведений.Период <= ИзмеренияДаты."+ИмяПоляПериод+")
	|			И (РегистрСведений.ФизическоеЛицо = ИзмеренияДаты.ФизическоеЛицо)
    |
	|СГРУППИРОВАТЬ ПО
	|	ИзмеренияДаты."+ИмяПоляПериод+",
	|	ИзмеренияДаты.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизическоеЛицо,
	|	Сотрудники."+ИмяПоляПериод+",
	|	МАКСИМУМ(ВЫБОР
	|	 КОГДА КадроваяИстория.ВидЗанятости ЕСТЬ NULL
	|	 	ТОГДА ЛОЖЬ
	|	 КОГДА КадроваяИстория.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.Совместительство)
	|	 	ТОГДА ЛОЖЬ
	|	 КОГДА КадроваяИстория.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение) И НАЧАЛОПЕРИОДА(КадроваяИстория.Период, МЕСЯЦ) < НАЧАЛОПЕРИОДА(Сотрудники."+ИмяПоляПериод+", МЕСЯЦ)
	|	 	ТОГДА ЛОЖЬ
	|	 ИНАЧЕ ИСТИНА
	|	КОНЕЦ) КАК ОсновноеМестоРаботы
	|ПОМЕСТИТЬ "+ИмяВТОсновныеМестаРаботыФизическихЛиц+"
	|ИЗ
	|	"+ИмяВТФизическихЛиц+" КАК Сотрудники
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ИмяВТМаксимальныеПериоды+" КАК МаксимальныеПериоды
	|		ПО (Сотрудники."+ИмяПоляПериод+" = МаксимальныеПериоды.ЗаданныйПериод)
	|			И (Сотрудники.ФизическоеЛицо = МаксимальныеПериоды.ФизическоеЛицо)
	|	ЛЕВОЕ СОЕДИНЕНИЕ "+ИмяВТКадроваяИстория+" КАК КадроваяИстория
	|		ПО (МаксимальныеПериоды.Период = КадроваяИстория.Период)
	|			И (МаксимальныеПериоды.ФизическоеЛицо = КадроваяИстория.ФизическоеЛицо)
	|СГРУППИРОВАТЬ ПО
	|	Сотрудники.ФизическоеЛицо,
	|	Сотрудники."+ИмяПоляПериод+"
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ "+ИмяВТКадроваяИстория+"
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ "+ИмяВТМаксимальныеПериоды+"
	|
	|";
	
	Запрос.Выполнить();

	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции формирования отчетов

Функция ДополнительныеСведенияТиповойФормыП2(СтрокиДанных, ДатаОтчета) Экспорт
	
	ДополнительныеСведения = Новый Соответствие;
	ДанныеЗаполненияКадровойИстории = Новый Соответствие;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
			
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ТаблицаСотрудников = Новый ТаблицаЗначений;
		ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ТаблицаСотрудников.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
		ТаблицаСотрудников.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
		
		Для каждого СтрокаСотрудника Из СтрокиДанных Цикл
			НоваяСтрокаТаблицыСотрудников = ТаблицаСотрудников.Добавить();
			НоваяСтрокаТаблицыСотрудников.Сотрудник = СтрокаСотрудника.РабочееМестоСотрудник;
			НоваяСтрокаТаблицыСотрудников.ДатаОкончания = СтрокаСотрудника.ПараметрыДанныхПериод;
		КонецЦикла;
		
		СтруктураОтбора = Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение");
		СтруктураОтбора.ЛевоеЗначение = "ВидСобытия";
		СтруктураОтбора.ВидСравнения = "<>";
		СтруктураОтбора.ПравоеЗначение = "ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)";
		
		Отборы = Новый Массив;
		Отборы.Добавить(СтруктураОтбора);
		
		ЗарплатаКадры.СоздатьПоТаблицеЗначенийВТИмяРегистра(Запрос.МенеджерВременныхТаблиц, Истина, "КадроваяИсторияСотрудников", ТаблицаСотрудников, Отборы);
		
		ОписанияНачислений = КадровыйУчет.ОписанияСоставаНачисленийПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, "ВТКадроваяИсторияСотрудников");
	
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Период КАК Период,
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
			|	КадроваяИсторияСотрудников.Подразделение КАК Подразделение,
			|	КадроваяИсторияСотрудников.Должность КАК Должность,
			|	КадроваяИсторияСотрудников.Регистратор.Номер КАК РегистраторНомер,
			|	КадроваяИсторияСотрудников.Регистратор.Дата КАК РегистраторДата
			|ИЗ
			|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|
			|УПОРЯДОЧИТЬ ПО
			|	Сотрудник,
			|	Период";
		
		ВыборкаКадроваяИстория = Запрос.Выполнить().Выбрать();
		Пока ВыборкаКадроваяИстория.СледующийПоЗначениюПоля("Сотрудник") Цикл
			
			ДанныеЗаполненияКадровойИсторииПоСотруднику = Новый Массив;
			ОписанияСотрудника = ОписанияНачислений.Получить(ВыборкаКадроваяИстория.Сотрудник);
			
			Пока ВыборкаКадроваяИстория.Следующий() Цикл
				
				СтруктураСтроки = Новый Структура();
				СтруктураСтроки.Вставить("ДатаПеревода", ВыборкаКадроваяИстория.Период);
				СтруктураСтроки.Вставить("ПодразделениеПеревода", ВыборкаКадроваяИстория.Подразделение);
				СтруктураСтроки.Вставить("ДолжностьПеревода", ВыборкаКадроваяИстория.Должность);
				
				Если ОписанияСотрудника <> Неопределено Тогда
					ОписанияПериода = ОписанияСотрудника.Получить(ВыборкаКадроваяИстория.Период);
				КонецЕсли; 
				
				Если ОписанияПериода = Неопределено Тогда
					ОписанияПериода = ОписаниеСоставаНачислений();
				КонецЕсли; 
				
				СтруктураСтроки.Вставить("ТарифнаяСтавка", ПредставлениеОкладаИНадбавок(ОписанияПериода));
					
				СтруктураСтроки.Вставить("ОснованиеПеревода", "нак. № "
						+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаКадроваяИстория.РегистраторНомер, Истина, Истина)
						+ " від " + Формат(ВыборкаКадроваяИстория.РегистраторДата, "ДФ=dd.MM.yyyy"));
				
				ДанныеЗаполненияКадровойИсторииПоСотруднику.Добавить(СтруктураСтроки);
				
			КонецЦикла;
			
			ДанныеЗаполненияКадровойИстории.Вставить(ВыборкаКадроваяИстория.Сотрудник, ДанныеЗаполненияКадровойИсторииПоСотруднику);
			
		КонецЦикла;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛица_СоставСемьи.СтепеньРодства КАК СтепеньРодства,
		|	ЕСТЬNULL(ФизическиеЛица_СоставСемьи.ФизЛицо, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ЧленСемьи,
		|	ФизическиеЛица_СоставСемьи.ФизЛицо.ДатаРождения КАК ДатаРожденияРодственника,
		|	ФизическиеЛица_СоставСемьи.ГодРождения КАК ГодРожденияРодственника,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ФИОЧленовСемьи.Фамилия, """") + ЕСТЬNULL(ФИОЧленовСемьи.Имя, """") + ЕСТЬNULL(ФИОЧленовСемьи.Отчество, """") <> """"
		|			ТОГДА ЕСТЬNULL(ФИОЧленовСемьи.Фамилия, """") + "" "" + ЕСТЬNULL(ФИОЧленовСемьи.Имя, """") + "" "" + ЕСТЬNULL(ФИОЧленовСемьи.Отчество, """")
		|		ИНАЧЕ ЕСТЬNULL(ФизическиеЛица_СоставСемьи.ФизЛицо, """")
		|	КОНЕЦ КАК ФИОРодственника,
		|	ФизическиеЛица_СоставСемьи.Ссылка КАК ФизическоеЛицо
		|ИЗ
		|	Справочник.ФизическиеЛица.СоставСемьи КАК ФизическиеЛица_СоставСемьи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаОтчета, ) КАК ФИОЧленовСемьи
		|		ПО ФизическиеЛица_СоставСемьи.ФизЛицо = ФИОЧленовСемьи.ФизическоеЛицо
		|ГДЕ
		|	ФизическиеЛица_СоставСемьи.Ссылка В(&ФизическиеЛица)";
	
		Запрос.УстановитьПараметр("ФизическиеЛица", СтрокиДанных.ВыгрузитьКолонку("ЛичныеДанныеФизическоеЛицо"));
		Запрос.УстановитьПараметр("ДатаОтчета", ДатаОтчета);
		РезультатЗапроса = Запрос.Выполнить();
	
		ДанныеЗаполнения = Новый Соответствие;
		ВыборкаПоСоставуСемьи = РезультатЗапроса.Выбрать();
		Пока ВыборкаПоСоставуСемьи.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
		
			ДанныеЗаполненияПоСотруднику = Новый Массив;
			Пока ВыборкаПоСоставуСемьи.Следующий() Цикл
				СтруктураСтроки = Новый Структура();
				СтруктураСтроки.Вставить("СтепеньРодства", ВыборкаПоСоставуСемьи.СтепеньРодства);
				СтруктураСтроки.Вставить("ФИОРодственника", ВыборкаПоСоставуСемьи.ФИОРодственника);
				СтруктураСтроки.Вставить("ГодРожденияРодственника", Формат(ВыборкаПоСоставуСемьи.ДатаРожденияРодственника, "ДФ=гггг"));
				ДанныеЗаполненияПоСотруднику.Добавить(СтруктураСтроки);
			КонецЦикла;
		
			ДанныеЗаполнения.Вставить(ВыборкаПоСоставуСемьи.ФизическоеЛицо, ДанныеЗаполненияПоСотруднику);
		
		КонецЦикла;
	КонецЕсли;
	
	ДополнительныеСведения.Вставить("ДанныеЗаполненияКадровойИстории", ДанныеЗаполненияКадровойИстории);
	ДополнительныеСведения.Вставить("ДанныеЗаполненияСоставСемьи", ДанныеЗаполнения);
	
	Возврат ДополнительныеСведения;
	
КонецФункции

Функция СформироватьЗапросДляП1(МассивОбъектов) Экспорт
	
	ПечатьПоЭлементуСправочника = Ложь;
	Если МассивОбъектов.Количество() > 0 Тогда
		ПечатьПоЭлементуСправочника = ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники");
	КонецЕсли; 
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		Возврат СформироватьПоЭлементамСправочникаЗапросДляП1П4(МассивОбъектов, "ДатаПриема");
	КонецЕсли; 

	
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КадровыйУчет.СоздатьВТДанныеДокументовПриемНаРаботу(МенеджерВременныхТаблиц, МассивОбъектов);
	
	Возврат СформироватьПоДокументамЗапросДляП1П4(МенеджерВременныхТаблиц);
	
КонецФункции
Функция РазложитьЧислоВСтроку(Значение,Длина,ЛидирующиеНули=Ложь) Экспорт
	
	ФорматнаяСтрока = "ЧЦ="+Строка(Длина)+"; ЧДЦ=0; ЧГ=0";
	Если ЛидирующиеНули Тогда
		Строка0 = "0";
		Для Сч = 2 по Длина Цикл
			Строка0 = Строка0+"0";
		Конеццикла;
		ФорматнаяСтрока = ФорматнаяСтрока + "; ЧН="+Строка0+"; ЧВН=";
	Иначе
		ФорматнаяСтрока = ФорматнаяСтрока + "; ЧН=0";
	КонецЕсли;
	
	Результат = Формат(Значение,ФорматнаяСтрока);
	
	Если НЕ ЛидирующиеНули Тогда
		
		Пока СтрДлина(Результат) < Длина Цикл
			Результат = " "+Результат;
		КонецЦикла;	
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


Функция СформироватьЗапросДляТ5(МассивОбъектов) Экспорт
	
	ПечатьПоЭлементуСправочника = Ложь;
	Если МассивОбъектов.Количество() > 0 Тогда
		ПечатьПоЭлементуСправочника = ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники");
	КонецЕсли; 
	
	Если ПечатьПоЭлементуСправочника ИЛИ
		НЕ ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		Возврат СформироватьПоЭлементамСправочникаЗапросДляТ5(МассивОбъектов);
	КонецЕсли; 
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КадровыйУчет.СоздатьВТДанныеДокументовКадровыхПеремещений(МенеджерВременныхТаблиц, МассивОбъектов);
	
	Возврат СформироватьПоДокументамЗапросДляТ5(МенеджерВременныхТаблиц);
	
КонецФункции

Функция СформироватьЗапросДляП4(МассивОбъектов) Экспорт
	
	ПечатьПоЭлементуСправочника = Ложь;
	Если МассивОбъектов.Количество() > 0 Тогда
		ПечатьПоЭлементуСправочника = ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники");
	КонецЕсли; 
	
	Если ПечатьПоЭлементуСправочника ИЛИ
		НЕ ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		Возврат СформироватьПоЭлементамСправочникаЗапросДляП1П4(МассивОбъектов, "ДатаУвольнения");
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КадровыйУчет.СоздатьВТДанныеДокументовУвольнение(МенеджерВременныхТаблиц, МассивОбъектов);
	
	Возврат СформироватьПоДокументамЗапросДляП1П4(МенеджерВременныхТаблиц);
	
КонецФункции	

Процедура СоздатьВТДанныеДокументовПриемНаРаботу(МенеджерВременныхТаблиц, МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	Если ТипЗнч(МассивОбъектов[0]) = Тип("СправочникСсылка.Сотрудники") Тогда
		Запрос.Текст = 
		
		// ИНАГРО ++
		//"ВЫБРАТЬ
		//|	КадроваяИсторияСотрудниковСрезПоследних.Регистратор КАК Документ
		//|ИЗ
		//|	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
		//|ГДЕ
		//|	КадроваяИсторияСотрудниковСрезПоследних.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)
		//|	И КадроваяИсторияСотрудниковСрезПоследних.Сотрудник  В(&МассивОбъектов)";
		
		"ВЫБРАТЬ
		|	ИНАГРО_РаботникиОрганизацийСрезПоследних.Регистратор КАК Документ
		|ИЗ
		|	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(
		|			,
		|			Сотрудник В (&МассивОбъектов)
		|				И ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)) КАК ИНАГРО_РаботникиОрганизацийСрезПоследних
		|ГДЕ
		|	ИНАГРО_РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|	И ИНАГРО_РаботникиОрганизацийСрезПоследних.Сотрудник В (&МассивОбъектов)";
		
		// ИНАГРО --
		Выборка = Запрос.Выполнить().Выбрать();
		Документ = Документы.ИНАГРО_ПриемНаРаботуВОрганизацию.ПустаяСсылка();
		Если Выборка.Следующий() Тогда
			Документ = Выборка.Документ;
		КонецЕсли;
		Запрос.Параметры.Вставить("Документ", Документ);
        ТекстУсловия = "ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка = &Документ И ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник В(&МассивОбъектов)"
	ИначеЕсли ТипЗнч(МассивОбъектов[0]) = Тип("ДокументСсылка.ПриемНаРаботу") Тогда	
        ТекстУсловия = "ПриемНаРаботу.Ссылка В(&МассивОбъектов)"
	Иначе
        ТекстУсловия = "ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка В(&МассивОбъектов)"
	КонецЕсли;
	
	// ИНАГРО ++
	Если ТипЗнч(МассивОбъектов[0]) = Тип("ДокументСсылка.ПриемНаРаботу") Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриемНаРаботу.Ссылка,
		|	ПриемНаРаботу.ДатаПриема КАК Дата,
		|	ПриемНаРаботу.Сотрудник,
		|	ПриемНаРаботу.ДатаПриема КАК Период,
		|	ПриемНаРаботу.Номер КАК НомерДок,
		|	ПриемНаРаботу.Дата КАК ДатаДок,
		|	ПриемНаРаботу.Руководитель,
		|	ПриемНаРаботу.ДолжностьРуководителя,
		|	ПриемНаРаботу.УсловияПриема,
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаЗавершенияТрудовогоДоговора,
		|	0 КАК ДлительностьИспытательногоСрока,
		|	ПриемНаРаботу.ВидЗанятости
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|ГДЕ " + ТекстУсловия;
		
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка,
		|	ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема КАК Дата,
		|	ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник,
		|	ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема КАК Период,
		|	ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Номер КАК НомерДок,
		|	ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата КАК ДатаДок,
		|	"""" КАК Руководитель,
		|	"""" КАК ДолжностьРуководителя,
		|	"""" КАК УсловияПриема,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаЗавершенияТрудовогоДоговора,
		|	0 КАК ДлительностьИспытательногоСрока,
		|	ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник.ИНАГРО_ВидЗанятости КАК ВидЗанятости
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации
		|ГДЕ " + ТекстУсловия;
	
	КонецЕсли;
	// ИНАГРО --
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТДанныеДокументовКадровыхПеремещений(МенеджерВременныхТаблиц, МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КадровыйПеревод.Ссылка,
		|	КадровыйПеревод.ДатаНачала КАК Дата,
		|	КадровыйПеревод.Сотрудник КАК Сотрудник,
		|	КадровыйПеревод.ДатаНачала КАК ДатаНачала,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
		|	КадровыйПеревод.Номер КАК НомерДок,
		|	КадровыйПеревод.Дата КАК ДатаДок,
		|	КадровыйПеревод.Руководитель,
		|	КадровыйПеревод.ДолжностьРуководителя,
		|	КадровыйПеревод.ФизическоеЛицо,
		|	КадровыйПеревод.ОснованиеПеревода,
		|	КадровыйПеревод.ПричинаПеревода
		|ПОМЕСТИТЬ ВТДанныеДокументовКадровыхПеремещений
		|ИЗ
		|	Документ.КадровыйПеревод КАК КадровыйПеревод
		|ГДЕ
		|	КадровыйПеревод.Ссылка В(&МассивОбъектов)";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТДанныеДокументовУвольнение(МенеджерВременныхТаблиц, МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Увольнение.Ссылка,
		|	Увольнение.ДатаУвольнения КАК Дата,
		|	Увольнение.Сотрудник,
		|	Увольнение.ДатаУвольнения КАК Период,
		|	Увольнение.Номер КАК НомерДок,
		|	Увольнение.Дата КАК ДатаДок,
		|	Увольнение.СтатьяКЗОТ КАК СтатьяКЗОТ,
		|	Увольнение.СтатьяКЗОТ.СтатьяЗакона КАК СтатьяЗакона,
		|	Увольнение.Руководитель,
		|	Увольнение.ДолжностьРуководителя,
		|	Увольнение.ОснованиеУвольнения КАК ОснованиеУвольнения,
		|	Увольнение.СтатьяКЗОТ.ТекстОснования КАК ПричинаУвольнения
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|ГДЕ
		|	Увольнение.Ссылка В(&МассивОбъектов)";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция СформироватьПоЭлементамСправочникаЗапросДляП1П4(МассивОбъектов, ИмяРеквизитаДатаСобытия)

	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, МассивОбъектов, ИмяРеквизитаДатаСобытия, ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Параметры.Вставить("КадровыеДанные", КадровыеДанные);
	Запрос.Параметры.Вставить("ДатаСобытия", ТекущаяДатаСеанса());

	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Сотрудники.Сотрудник КАК Сотрудник,
		|	ВЫБОР КОГДА Сотрудники." + ИмяРеквизитаДатаСобытия + " = ДАТАВРЕМЯ(1,1,1) ТОГДА &ДатаСобытия ИНАЧЕ Сотрудники." + ИмяРеквизитаДатаСобытия + " КОНЕЦ КАК Период
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	&КадровыеДанные КАК Сотрудники";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТФизическиеЛица");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "Организация,Подразделение,Должность,ДатаПриема,ДатаУвольнения,ТабельныйНомер,ФИОПолные,Пол");
	
	Запрос.УстановитьПараметр("НачисленияСотрудников",
		ТаблицаНачисленийСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТФизическиеЛица"));
		
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыеДанныеСотрудников.Организация,
		|	КадровыеДанныеСотрудников.Период
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	
	ТаблицаОтветственныхЛиц = Новый ТаблицаЗначений;
	ТаблицаОтветственныхЛиц.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОтветственныхЛиц.Колонки.Добавить("ФИОРуководителя", Новый ОписаниеТипов("Строка"));
	
	Сведения = Новый СписокЗначений;
	// Получаем данные из глобальной общей функции
	Сведения.Добавить("", "ФИОРук");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрокаОтветственныхЛиц = ТаблицаОтветственныхЛиц.Добавить();
		НоваяСтрокаОтветственныхЛиц.Организация = Выборка.Организация;
		
		ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Выборка.Организация, Выборка.Период, Сведения);
		ОргСведения.Свойство("ФИОРук", 		НоваяСтрокаОтветственныхЛиц.ФИОРуководителя);
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаОтветственныхЛиц", ТаблицаОтветственныхЛиц);
	
	ИмяВТНачисления = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТНачисления");
	ИмяВТОтветственныеЛица = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТОтветственныеЛица");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачисленияСотрудников.Период,
		|	НачисленияСотрудников.Сотрудник,
		|	НачисленияСотрудников.ТарифнаяСтавка,
		|	НачисленияСотрудников.Надбавка
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	&НачисленияСотрудников КАК НачисленияСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОтветственныхЛиц.Организация,
		|	ТаблицаОтветственныхЛиц.ФИОРуководителя
		|ПОМЕСТИТЬ ВТОтветственныеЛица
		|ИЗ
		|	&ТаблицаОтветственныхЛиц КАК ТаблицаОтветственныхЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник КАК Ссылка,
		|	КадровыеДанныеСотрудников.Организация.НаименованиеПолное КАК НазваниеОрганизации,
		|	КадровыеДанныеСотрудников.Организация.КодПоЕДРПОУ КАК ОрганизацияКодПоЕДРПОУ,
		|	КадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема,
		|	КадровыеДанныеСотрудников.ДатаУвольнения КАК ДатаУвольнения,
		|	КадровыеДанныеСотрудников.ФИОПолные КАК Работник,
		|	КадровыеДанныеСотрудников.ТабельныйНомер КАК ТабельныйНомер,
		|	КадровыеДанныеСотрудников.Подразделение.Наименование КАК Подразделение,
		|	КадровыеДанныеСотрудников.Должность.Наименование КАК Должность,
		|	ЕСТЬNULL(Начисления.ТарифнаяСтавка, 0) КАК ТарифнаяСтавка,
		|	КадровыеДанныеСотрудников.Пол КАК Пол,
		|	ЕСТЬNULL(Начисления.Надбавка, """") КАК Надбавка,
		|	"""" КАК ПричинаУвольнения,
		|	ОтветственныеЛица.ФИОРуководителя
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтветственныеЛица КАК ОтветственныеЛица
		|		ПО КадровыеДанныеСотрудников.Организация = ОтветственныеЛица.Организация
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
		|		ПО КадровыеДанныеСотрудников.Сотрудник = Начисления.Сотрудник
		|			И КадровыеДанныеСотрудников.Период = Начисления.Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	Работник";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ИмяВТНачисления);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтветственныеЛица", ИмяВТОтветственныеЛица);
	
	Возврат Запрос.Выполнить();	
	
КонецФункции	

Функция СформироватьПоЭлементамСправочникаЗапросДляТ5(МассивОбъектов)

	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; 
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Параметры.Вставить("МассивСотрудников", МассивОбъектов);
	Запрос.Параметры.Вставить("ДатаСреза", ТекущаяДатаСеанса());

	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	&ДатаСреза КАК Период,
		|	Сотрудники.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивСотрудников)";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		МенеджерВременныхТаблиц,
		"ВТФизическиеЛица");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "Организация,Подразделение,Должность,ФиоПолные");
	
	Запрос.УстановитьПараметр("НачисленияСотрудников",
		ТаблицаНачисленийСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТФизическиеЛица"));
		
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадровыеДанныеСотрудников.Организация,
		|	КадровыеДанныеСотрудников.Период
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	
	ТаблицаОтветственныхЛиц = Новый ТаблицаЗначений;
	ТаблицаОтветственныхЛиц.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОтветственныхЛиц.Колонки.Добавить("ФИОРуководителя", Новый ОписаниеТипов("Строка"));
	
	Сведения = Новый СписокЗначений;
	// Получаем данные из глобальной общей функции
	Сведения.Добавить("", "ФИОРук");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрокаОтветственныхЛиц = ТаблицаОтветственныхЛиц.Добавить();
		НоваяСтрокаОтветственныхЛиц.Организация = Выборка.Организация;
		
		ОргСведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Выборка.Организация, Выборка.Период, Сведения);
		ОргСведения.Свойство("ФИОРук", 		НоваяСтрокаОтветственныхЛиц.ФИОРуководителя);
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаОтветственныхЛиц", ТаблицаОтветственныхЛиц);
	
	ИмяВТНачисления = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТНачисления");
	ИмяВТОтветственныеЛица = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТОтветственныеЛица");
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачисленияСотрудников.Период,
		|	НачисленияСотрудников.Сотрудник,
		|	НачисленияСотрудников.ТарифнаяСтавка,
		|	НачисленияСотрудников.Надбавка
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	&НачисленияСотрудников КАК НачисленияСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОтветственныхЛиц.Организация,
		|	ТаблицаОтветственныхЛиц.ФИОРуководителя
		|ПОМЕСТИТЬ ВТОтветственныеЛица
		|ИЗ
		|	&ТаблицаОтветственныхЛиц КАК ТаблицаОтветственныхЛиц
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.Ссылка,
		|	Организации.НаименованиеПолное КАК НазваниеОрганизации,
		|	Организации.КодПоЕДРПОУ,
		|	&ДатаСреза КАК ДатаНачала,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончания,
		|	""постоянно"" КАК ВидПеревода,
		|	КадровыеДанныеСотрудников.ФИОПолные КАК Работник,
		|	Сотрудники.Код КАК ТабельныйНомер,
		|	ЕСТЬNULL(КадровыеДанныеСотрудников.Подразделение.Наименование, """") КАК НовоеПодразделение,
		|	ЕСТЬNULL(КадровыеДанныеСотрудников.Должность.Наименование, """") КАК НоваяДолжность,
		|	ЕСТЬNULL(Начисления.ТарифнаяСтавка, 0) КАК ТарифнаяСтавка,
		|	ОтветственныеЛица.ФИОРуководителя,
		|	ЕСТЬNULL(Начисления.Надбавка, """") КАК Надбавка
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТОтветственныеЛица КАК ОтветственныеЛица
		|			ПО КадровыеДанныеСотрудников.Организация = ОтветственныеЛица.Организация
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
		|			ПО КадровыеДанныеСотрудников.Сотрудник = Начисления.Сотрудник
		|				И КадровыеДанныеСотрудников.Период = Начисления.Период
		|		ПО Сотрудники.Ссылка = КадровыеДанныеСотрудников.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
		|		ПО (КадровыеДанныеСотрудников.Организация = Организации.Ссылка)
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивСотрудников)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Работник";
	
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ИмяВТНачисления);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтветственныеЛица", ИмяВТОтветственныеЛица);
	
	Запрос.Параметры.Вставить("МассивСотрудников", МассивОбъектов);
	Запрос.Параметры.Вставить("ДатаСреза", ТекущаяДатаСеанса());
	
	Возврат Запрос.Выполнить();	
	
КонецФункции

Функция СформироватьПоДокументамЗапросДляП1П4(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТаблицаНачислений = ТаблицаНачисленийСотрудниковПоВидам(Запрос.МенеджерВременныхТаблиц);
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТДанныеДокументов");
		
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
		ОписательВременныхТаблиц,
		Истина,
		КадровыйУчет.КадровыеДанныеДляПечатиКадровыхПриказов());
	
	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументов");
	
	ИмяВТНачисления = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТНачисления");
	
	Запрос.Текст = " 
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Организация.КодПоЕДРПОУ КАК ОрганизацияКодПоЕДРПОУ,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(КадровыеДанныеСотрудников.Организация.НаименованиеПолное КАК СТРОКА(1))) = """"
		|			ТОГДА
		|				КадровыеДанныеСотрудников.Организация.Наименование
		|		ИНАЧЕ КадровыеДанныеСотрудников.Организация.НаименованиеПолное
		|	КОНЕЦ КАК НазваниеОрганизации,
		|	КадровыеДанныеСотрудников.ФИОПолные КАК Работник,
		|	ЕСТЬNULL(ФИООтветственныхЛиц.Фамилия, """") + "" "" + ЕСТЬNULL(ФИООтветственныхЛиц.Имя, """") + "" "" + ЕСТЬNULL(ФИООтветственныхЛиц.Отчество, """") КАК ФИОРуководителя,
		|	&КадровыеДанныеСотрудников,
		|	&ДанныеДокументов
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|		ПО ДанныеДокументов.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|			И ДанныеДокументов.Период = КадровыеДанныеСотрудников.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИООтветственныхЛиц
		|		ПО ДанныеДокументов.Руководитель = ФИООтветственныхЛиц.ФизическоеЛицо
		|			И ДанныеДокументов.Ссылка = ФИООтветственныхЛиц.Ссылка
		|";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КадровыеДанныеСотрудников", "КадровыеДанныеСотрудников.*");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДанныеДокументов", "ДанныеДокументов.*");
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РезультатСтруктура = Новый Структура;
	РезультатСтруктура.Вставить("РезультатЗапроса",РезультатЗапроса);
	РезультатСтруктура.Вставить("ТаблицаНачислений",ТаблицаНачислений);
	
	//Возврат РезультатЗапроса;	
	Возврат РезультатСтруктура;
	
КонецФункции

Функция СформироватьПоДокументамЗапросДляТ5(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачисленияСотрудников",
		ТаблицаНачисленийСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТДанныеДокументовКадровыхПеремещений", "ДатаНачала"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокументов.Сотрудник,
		|	ДОБАВИТЬКДАТЕ(ДанныеДокументов.ДатаНачала, ДЕНЬ, -1) КАК Период
		|ПОМЕСТИТЬ ВТСотрудникиПериоды
		|ИЗ
		|	ВТДанныеДокументовКадровыхПеремещений КАК ДанныеДокументов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТДанныеДокументов.Сотрудник,
		|	ВТДанныеДокументов.ДатаНачала
		|ИЗ
		|	ВТДанныеДокументовКадровыхПеремещений КАК ВТДанныеДокументов";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТСотрудникиПериоды");
		
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
		ОписательВременныхТаблиц,
		Истина,
		КадровыйУчет.КадровыеДанныеДляПечатиКадровыхПриказов());

	ИменаПолейОтветственныхЛиц = Новый Массив;
	ИменаПолейОтветственныхЛиц.Добавить("Руководитель");
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Ложь, ИменаПолейОтветственныхЛиц, "ВТДанныеДокументовКадровыхПеремещений");
	
	ИмяВТНачисления = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТНачисления");
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияСотрудников.Период,
		|	НачисленияСотрудников.Сотрудник,
		|	НачисленияСотрудников.ТарифнаяСтавка,
		|	НачисленияСотрудников.Надбавка
		|ПОМЕСТИТЬ ВТНачисления
		|ИЗ
		|	&НачисленияСотрудников КАК НачисленияСотрудников
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ДанныеДокументов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ""постоянно""
		|		ИНАЧЕ ""временно""
		|	КОНЕЦ КАК ВидПеревода,
		|	КадровыеДанныеСотрудниковНовые.Организация.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(КадровыеДанныеСотрудниковНовые.Организация.НаименованиеПолное КАК СТРОКА(1))) = """"
		|			ТОГДА 
		|				КадровыеДанныеСотрудниковНовые.Организация.Наименование
		|		ИНАЧЕ КадровыеДанныеСотрудниковНовые.Организация.НаименованиеПолное
		|	КОНЕЦ КАК НазваниеОрганизации,
		|	ЕСТЬNULL(ФИООтветственныхЛиц.Фамилия, """") + "" "" + ЕСТЬNULL(ФИООтветственныхЛиц.Имя, """") + "" "" + ЕСТЬNULL(ФИООтветственныхЛиц.Отчество, """") КАК ФИОРуководителя,
		|	КадровыеДанныеСотрудниковПредыдущие.Подразделение КАК Подразделение,
		|	КадровыеДанныеСотрудниковПредыдущие.Должность КАК Должность,
		|	ЕСТЬNULL(КадровыеДанныеСотрудниковНовые.ФИОПолные, """") КАК Работник,
		|	КадровыеДанныеСотрудниковНовые.Подразделение КАК НовоеПодразделение,
		|	КадровыеДанныеСотрудниковНовые.Должность КАК НоваяДолжность,
		|	ЕСТЬNULL(Начисления.ТарифнаяСтавка, 0) КАК ТарифнаяСтавка,
		|	ЕСТЬNULL(Начисления.Надбавка, """") КАК Надбавка,
		|	&КадровыеДанныеСотрудниковНовые,
		|	&ДанныеДокументов
		|ИЗ
		|	ВТДанныеДокументовКадровыхПеремещений КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудниковПредыдущие
		|		ПО ДанныеДокументов.Сотрудник = КадровыеДанныеСотрудниковПредыдущие.Сотрудник
		|			И ДанныеДокументов.ДатаНачала > КадровыеДанныеСотрудниковПредыдущие.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудниковНовые
		|		ПО ДанныеДокументов.Сотрудник = КадровыеДанныеСотрудниковНовые.Сотрудник
		|			И ДанныеДокументов.ДатаНачала = КадровыеДанныеСотрудниковНовые.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИООтветственныхЛиц
		|		ПО ДанныеДокументов.Руководитель = ФИООтветственныхЛиц.ФизическоеЛицо
		|			И ДанныеДокументов.Ссылка = ФИООтветственныхЛиц.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления
		|		ПО ДанныеДокументов.ДатаНачала = Начисления.Период
		|			И ДанныеДокументов.Сотрудник = Начисления.Сотрудник";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&КадровыеДанныеСотрудниковНовые", "КадровыеДанныеСотрудниковНовые.*");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДанныеДокументов", "ДанныеДокументов.*");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТНачисления", ИмяВТНачисления);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;	
	
КонецФункции

Функция КадровыеДанныеДляПечатиКадровыхПриказов() Экспорт
	
	Возврат "ФИОПолные,ТабельныйНомер,Организация,Подразделение,Должность,ДатаПриема,ДатаУвольнения";
	
КонецФункции

Функция ТаблицаНачисленийСотрудников(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды, ИмяПоляПериод = "Период", ИмяПоляСотрудник = "Сотрудник")
	
	ОписанияНачислений = КадровыйУчет.ОписанияСоставаНачисленийПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды, ИмяПоляПериод, ИмяПоляСотрудник);
	
	НачисленияСотрудников = Новый ТаблицаЗначений;
	НачисленияСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	НачисленияСотрудников.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	НачисленияСотрудников.Колонки.Добавить("ТарифнаяСтавка", Новый ОписаниеТипов("Число"));
	НачисленияСотрудников.Колонки.Добавить("Надбавка", Новый ОписаниеТипов("Строка"));
	
	Для каждого ОписаниеСотрудника Из ОписанияНачислений Цикл
		Для каждого ОписаниеПериода Из ОписаниеСотрудника.Значение Цикл
			
			НоваяСтрока = НачисленияСотрудников.Добавить();
			
			НоваяСтрока.Сотрудник = ОписаниеСотрудника.Ключ;
			НоваяСтрока.Период = ОписаниеПериода.Ключ;
			НоваяСтрока.ТарифнаяСтавка = ОписаниеПериода.Значение.ОкладТариф;
			НоваяСтрока.Надбавка = ОписаниеПериода.Значение.ОписаниеНадбавок;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат НачисленияСотрудников;
	
КонецФункции
Функция ТаблицаНачисленийСотрудниковПоВидам(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ПриемНаРаботу.Ссылка КАК Ссылка,
	|	ПриемНаРаботу.Сотрудник  
	|ИЗ
	|	ВТДанныеДокументов КАК ПриемНаРаботу";
	Результат = Запрос.Выполнить().Выгрузить();
	
	Запрос.УстановитьПараметр("ДокументСсылка", Результат.ВыгрузитьКолонку("Ссылка"));
	//ИНАГРО ++
	Запрос.УстановитьПараметр("Сотрудник", Результат.ВыгрузитьКолонку("Сотрудник"));
	Запрос.Текст = "ВЫБРАТЬ
	|	ПриемНаРаботуНачисления.Показатель1 КАК ТарифнаяСтавка,
	|	ПриемНаРаботуНачисления.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТОклады
	|ИЗ
	|	Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.Начисления КАК ПриемНаРаботуНачисления
	|ГДЕ
	|	ПриемНаРаботуНачисления.Ссылка В(&ДокументСсылка)
	|	И ПриемНаРаботуНачисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное)
	|	И ПриемНаРаботуНачисления.Сотрудник В(&Сотрудник)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ПриемНаРаботуНачисления.Показатель1) КАК Доплата,
	|	ПриемНаРаботуНачисления.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТДоплаты
	|ИЗ
	|	Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.Начисления КАК ПриемНаРаботуНачисления
	|ГДЕ
	|	ПриемНаРаботуНачисления.Ссылка В(&ДокументСсылка)
	|	И ПриемНаРаботуНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ФиксированнойСуммой)
	|	И ПриемНаРаботуНачисления.Сотрудник В(&Сотрудник)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриемНаРаботуНачисления.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриемНаРаботуНачисления.Показатель2 КАК ПроцентНадбавки,
	|	ПриемНаРаботуНачисления.ВидРасчета КАК Надбавка,
	|	ПриемНаРаботуНачисления.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТНадбавки
	|ИЗ
	|	Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.Начисления КАК ПриемНаРаботуНачисления
	|ГДЕ
	|	ПриемНаРаботуНачисления.Ссылка В(&ДокументСсылка)
	|	И ПриемНаРаботуНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.Процентом)
	|	И ПриемНаРаботуНачисления.Сотрудник В(&Сотрудник)
	|;
	//ИНАГРО --
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОклады.ТарифнаяСтавка КАК ТарифнаяСтавка,
	|	0 КАК Доплата,
	|	0 КАК ПроцентНадбавки,
	|	"""" КАК Надбавка,
	|	ВТОклады.Ссылка КАК Ссылка
	|ИЗ
	|	ВТОклады КАК ВТОклады
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ВТДоплаты.Доплата,
	|	0,
	|	"""",
	|	ВТДоплаты.Ссылка
	|ИЗ
	|	ВТДоплаты КАК ВТДоплаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	ВТНадбавки.ПроцентНадбавки,
	|	ВТНадбавки.Надбавка,
	|	ВТНадбавки.Ссылка
	|ИЗ
	|	ВТНадбавки КАК ВТНадбавки";
	
	ТаблицаНачислений = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаНачислений

КонецФункции	

Функция ОписанияСоставаНачисленийПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды, ИмяПоляПериод, ИмяПоляСотрудник) Экспорт
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		МенеджерВременныхТаблиц,
		ИмяВТСотрудникиПериоды,
		ИмяПоляСотрудник + "," + ИмяПоляПериод);
		
	ОписательВременныхТаблиц.ИмяВТКадровыеДанныеСотрудников = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТКадровыеДанныеСотрудников");;
		
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "РазмерТарифнойСтавки");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Период КАК Период,
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.РазмерТарифнойСтавки КАК ТарифнаяСтавка
		|ИЗ
		|	ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
		|ИТОГИ ПО
		|	Сотрудник";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТКадровыеДанныеСотрудников", ОписательВременныхТаблиц.ИмяВТКадровыеДанныеСотрудников);
		
	ОписанияНачисленийПоПериодам = Новый Соответствие;
		
	ВыборкаПоСотрудникам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСотрудникам.Следующий() Цикл
		
		ОписаниеНачисленийПоПериодам = Новый Соответствие;
		ВыборкаПоПериодам = ВыборкаПоСотрудникам.Выбрать();
		Пока ВыборкаПоПериодам.Следующий() Цикл
			
			ОписаниеСостава = ОписаниеСоставаНачислений();
			ОписаниеСостава.ПоказательОкладТариф = НСтр("ru='Оклад';uk='Оклад'");
			ОписаниеСостава.ОкладТариф = ВыборкаПоПериодам.ТарифнаяСтавка;
			ОписаниеСостава.ОписаниеОклада = ОписаниеСостава.ПоказательОкладТариф
				+ ?(ОписаниеСостава.ОкладТариф = 0, "", ": " + Формат(ОписаниеСостава.ОкладТариф, "ЧДЦ=0"));
				
			ОписаниеНачисленийПоПериодам.Вставить(ВыборкаПоПериодам.Период, ОписаниеСостава);
			
		КонецЦикла;
		
		ОписанияНачисленийПоПериодам.Вставить(ВыборкаПоСотрудникам.Сотрудник, ОписаниеНачисленийПоПериодам);
		
	КонецЦикла; 
	
	Возврат ОписанияНачисленийПоПериодам;
		
КонецФункции

Функция ОписаниеСоставаНачислений() Экспорт
	
	ОписаниеСостава = Новый Структура("ПоказательТариф,Тариф,ОписаниеОклада,ОписаниеНадбавок");
	ОписаниеСостава.Вставить("ПоказательОкладТариф", "");
	ОписаниеСостава.Вставить("ОкладТариф", 0);
	ОписаниеСостава.Вставить("ОписаниеОклада", "");
	ОписаниеСостава.Вставить("ОписаниеНадбавок", "");

	Возврат ОписаниеСостава;
	
КонецФункции

Функция ПредставлениеОкладаИНадбавок(ОписанияСотрудника)
	
	Если ПустаяСтрока(ОписанияСотрудника.ОписаниеОклада) Тогда
		Возврат ОписанияСотрудника.ОписаниеНадбавок;
	ИначеЕсли ПустаяСтрока(ОписанияСотрудника.ОписаниеНадбавок) Тогда
		Возврат Формат(ОписанияСотрудника.ОкладТариф, "ЧДЦ=2");
	Иначе
		Возврат ОписанияСотрудника.ОписаниеОклада + ", " + ОписанияСотрудника.ОписаниеНадбавок;
	КонецЕсли;
	
КонецФункции
 

Функция ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц() Экспорт
		
	ПараметрыПолученияСотрудниковОрганизаций = ПараметрыПолученияСотрудниковОрганизаций();
	
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("СписокФизическихЛиц");
	
	Возврат ПараметрыПолученияСотрудниковОрганизаций;
	
КонецФункции

Функция ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице() Экспорт
		
	ПараметрыПолученияСотрудниковОрганизаций = ПараметрыПолученияСотрудниковОрганизаций();
	
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("ИмяВТФизическиеЛица", "ВТФизическиеЛица");
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("ИмяПоляФизическоеЛицо", "ФизическоеЛицо");

	Возврат ПараметрыПолученияСотрудниковОрганизаций;
	
КонецФункции

Функция ПараметрыПолученияСотрудниковОрганизаций()
		
	ПараметрыПолученияСотрудниковОрганизаций = Новый Структура("Организация,Подразделение");
	
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("КадровыеДанные", "");
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("ОтбиратьПоГоловнойОрганизации", Ложь);
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("ОтбиратьПоПодразделениюОсновногоМестаРаботы", Ложь);
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("НачалоПериода", '00010101');
	ПараметрыПолученияСотрудниковОрганизаций.Вставить("ОкончаниеПериода", '00010101');

	ПараметрыПолученияСотрудниковОрганизаций.Вставить("Интервалы", Ложь);
	
	Возврат ПараметрыПолученияСотрудниковОрганизаций;
	
КонецФункции

Процедура СформироватьКадровыеПриказы(ПараметрыЗадания = Неопределено, АдресВоВременномХранилище = Неопределено) Экспорт
	
	ФОИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	Если Не ФОИспользоватьКадровыйУчет Тогда
		Возврат;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
	
	// Получение необходимых текущих данных
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&ТекущаяДата КАК Период,
	|	Сотрудники.Ссылка КАК Сотрудник
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники";
		
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		Запрос.МенеджерВременныхТаблиц,
		"ВТСотрудники");
			
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
		ОписательВременныхТаблиц,
		Ложь,
		"ГоловнаяОрганизация,ТекущаяОрганизация,ТекущееПодразделение,ТекущаяДолжность,ТекущийВидЗанятости,ДатаПриема,ДатаУвольнения,РазмерТекущейТарифнойСтавки,НачисляетсяИндексация,ТекущаяКатегорияЕСВ");
		
	// Отсев сотрудников, у которых даты приема и увольнения установлены некорректно
	// и сотрудников для которых ранее создавались кадровые приказы
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
	|	СотрудникиОрганизации.ТекущаяОрганизация КАК ТекущаяОрганизация,
	|	СотрудникиОрганизации.ТекущееПодразделение КАК ТекущееПодразделение,
	|	СотрудникиОрганизации.ТекущаяДолжность КАК ТекущаяДолжность,
	|	СотрудникиОрганизации.ТекущийВидЗанятости КАК ТекущийВидЗанятости,
	|	СотрудникиОрганизации.ДатаПриема КАК ДатаПриема,
	|	СотрудникиОрганизации.ДатаУвольнения КАК ДатаУвольнения,
	|	СотрудникиОрганизации.РазмерТекущейТарифнойСтавки КАК РазмерТекущейТарифнойСтавки,
	|	СотрудникиОрганизации.НачисляетсяИндексация КАК НачисляетсяИндексация,
	|	СотрудникиОрганизации.ТекущаяКатегорияЕСВ КАК ТекущаяКатегорияЕСВ,
	|	ЕСТЬNULL(ПриемНаРаботу.Ссылка, ЗНАЧЕНИЕ(Документ.ПриемНаРаботу.ПустаяСсылка)) КАК ПриказОПриеме,
	|	ЕСТЬNULL(Увольнение.Ссылка, ЗНАЧЕНИЕ(Документ.Увольнение.ПустаяСсылка)) КАК ПриказОбУвольнении
	|ИЗ
	|	ВТКадровыеДанныеСотрудников КАК СотрудникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|		ПО СотрудникиОрганизации.Сотрудник = ПриемНаРаботу.Сотрудник
	|			И (ПриемНаРаботу.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Увольнение КАК Увольнение
	|		ПО СотрудникиОрганизации.Сотрудник = Увольнение.Сотрудник
	|			И (Увольнение.Проведен)
	|ГДЕ
	|	(ЕСТЬNULL(ПриемНаРаботу.Ссылка, ЗНАЧЕНИЕ(Документ.ПриемНаРаботу.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.ПриемНаРаботу.ПустаяСсылка)
	|			ИЛИ СотрудникиОрганизации.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	|				И СотрудникиОрганизации.ДатаУвольнения <> СотрудникиОрганизации.ДатаПриема
	|				И ЕСТЬNULL(Увольнение.Ссылка, ЗНАЧЕНИЕ(Документ.Увольнение.ПустаяСсылка)) = ЗНАЧЕНИЕ(Документ.Увольнение.ПустаяСсылка))
	|	И СотрудникиОрганизации.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И СотрудникиОрганизации.ТекущаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник
	|АВТОУПОРЯДОЧИВАНИЕ";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
		
	ПовременныеНачисления = РасчетЗарплаты.НачисленияПоКатегории(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда, Новый Структура("СпособРасчета", Перечисления.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоДням));
	НачисленияИндексации = РасчетЗарплаты.НачисленияПоКатегории(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Индексация, Новый Структура("СпособРасчета, Предопределенный", Перечисления.СпособыРасчетаНачислений.ИндексацияЗарплаты, Истина));
	
	ДанныеСотрудников = РезультатЗапроса.Выбрать();
	Пока ДанныеСотрудников.Следующий() Цикл
		
		// Создание приказов о приеме
		Если ЗначениеЗаполнено(ДанныеСотрудников.ДатаПриема)
			И НЕ ЗначениеЗаполнено(ДанныеСотрудников.ПриказОПриеме) Тогда
			
			ДокументПриемНаРаботу = Документы.ПриемНаРаботу.СоздатьДокумент();
			
			ДокументПриемНаРаботу.Дата = ДанныеСотрудников.ДатаПриема;
			ДокументПриемНаРаботу.ДатаПриема = ДанныеСотрудников.ДатаПриема;
			ДокументПриемНаРаботу.Организация = ДанныеСотрудников.ТекущаяОрганизация;
			ДокументПриемНаРаботу.Сотрудник = ДанныеСотрудников.Сотрудник;
			ДокументПриемНаРаботу.Подразделение = ДанныеСотрудников.ТекущееПодразделение;
			ДокументПриемНаРаботу.Должность = ДанныеСотрудников.ТекущаяДолжность;
			ДокументПриемНаРаботу.ВидЗанятости = ДанныеСотрудников.ТекущийВидЗанятости;
			ДокументПриемНаРаботу.КатегорияЕСВ = ДанныеСотрудников.ТекущаяКатегорияЕСВ;
			
			// Добавление начисления "Оклад" и установка размера тарифной ставки
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ДокументПриемНаРаботу.Начисления, ПовременныеНачисления, "Начисление");
			Если ДокументПриемНаРаботу.Начисления.Количество() > 0 Тогда
				ДокументПриемНаРаботу.Начисления[0].Размер = ДанныеСотрудников.РазмерТекущейТарифнойСтавки;
			КонецЕсли;	
			
			// Добавление начисления "ИндексацияЗарплаты"
			Если ДанныеСотрудников.НачисляетсяИндексация Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ДокументПриемНаРаботу.Начисления, НачисленияИндексации, "Начисление");
			КонецЕсли;
			
			ДокументПриемНаРаботу.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			
			Попытка
				ДокументПриемНаРаботу.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				
				ДокументПриемНаРаботу.Записать(РежимЗаписиДокумента.Запись);
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='При создании кадровых приказов не удалось провести приказ об увольнении сотрудника %1, необходимо выполнить проведение в ручном режиме.';uk='При створенні кадрових наказів не вдалося провести наказ про звільнення співробітника %1, необхідно виконати проведення в ручному режимі.'"),
					ДанныеСотрудников.Сотрудник);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ДокументПриемНаРаботу.Ссылка);
					
			КонецПопытки;
			
		КонецЕсли; 
		
		// Создание приказов об увольнении
		Если ЗначениеЗаполнено(ДанныеСотрудников.ДатаУвольнения)
			И НЕ ЗначениеЗаполнено(ДанныеСотрудников.ПриказОбУвольнении) Тогда
			
			ДокументУвольнение = Документы.Увольнение.СоздатьДокумент();
			
			ДокументУвольнение.Дата = ДанныеСотрудников.ДатаУвольнения;
			ДокументУвольнение.ДатаУвольнения = ДанныеСотрудников.ДатаУвольнения;
			ДокументУвольнение.Организация = ДанныеСотрудников.ТекущаяОрганизация;
			ДокументУвольнение.Сотрудник = ДанныеСотрудников.Сотрудник;
			
			ДокументУвольнение.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
			
			Попытка
				ДокументУвольнение.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				
				ДокументУвольнение.Записать(РежимЗаписиДокумента.Запись);
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='При создании кадровых приказов не удалось провести приказ о приеме сотрудника %1, необходимо выполнить проведение в ручном режиме.';uk='При створенні кадрових наказів не вдалося провести наказ про прийом співробітника %1, необхідно виконати проведення в ручному режимі.'"),
					ДанныеСотрудников.Сотрудник);
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ДокументУвольнение.Ссылка);
					
			КонецПопытки;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьТекущиеКадровыеДанныеСотрудников(Запрос) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ТекущаяОрганизация,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ТекущееПодразделение,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК ТекущаяДолжность,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковПрием.Период, ВЫБОР
	|			КОГДА ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
	|				ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|			ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ДатаПриема
	|		КОНЕЦ) КАК ДатаПриема,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковУвольнение.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаУвольнения,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)) КАК ТекущийВидЗанятости,
	|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ТекущаяОрганизацияПредыдущая,
	|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ТекущееПодразделениеПредыдущее,
	|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК ТекущаяДолжностьПредыдущая,
	|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаПриема, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПриемаПредыдущая,
	|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаУвольненияПредыдущая,
	|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости, ДАТАВРЕМЯ(1, 1, 1)) КАК ВидЗанятостиПредыдущий
	|ПОМЕСТИТЬ ВТНовыеКадровыеДанные
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|		ПО Сотрудники.Ссылка = ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковСрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
	|		ПО Сотрудники.Ссылка = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковПрием
	|		ПО Сотрудники.Ссылка = КадроваяИсторияСотрудниковПрием.Сотрудник
	|			И (КадроваяИсторияСотрудниковПрием.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковУвольнение
	|		ПО Сотрудники.Ссылка = КадроваяИсторияСотрудниковУвольнение.Сотрудник
	|			И (КадроваяИсторияСотрудниковУвольнение.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))
	|ГДЕ
	|	Сотрудники.Ссылка В(&МассивСотрудниковДляОбновления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеКадровыеДанные.Сотрудник,
	|	НовыеКадровыеДанные.ТекущаяОрганизация,
	|	НовыеКадровыеДанные.ТекущееПодразделение,
	|	НовыеКадровыеДанные.ТекущаяДолжность,
	|	НовыеКадровыеДанные.ДатаПриема,
	|	НовыеКадровыеДанные.ДатаУвольнения,
	|	НовыеКадровыеДанные.ТекущийВидЗанятости,
	|	НовыеКадровыеДанные.ФизическоеЛицо,
	|	НовыеКадровыеДанные.ГоловнаяОрганизация
	|ИЗ
	|	ВТНовыеКадровыеДанные КАК НовыеКадровыеДанные
	|ГДЕ
	|	(НовыеКадровыеДанные.ТекущаяОрганизация <> НовыеКадровыеДанные.ТекущаяОрганизацияПредыдущая
	|			ИЛИ НовыеКадровыеДанные.ТекущееПодразделение <> НовыеКадровыеДанные.ТекущееПодразделениеПредыдущее
	|			ИЛИ НовыеКадровыеДанные.ТекущаяДолжность <> НовыеКадровыеДанные.ТекущаяДолжностьПредыдущая
	|			ИЛИ НовыеКадровыеДанные.ДатаПриема <> НовыеКадровыеДанные.ДатаПриемаПредыдущая
	|			ИЛИ НовыеКадровыеДанные.ДатаУвольнения <> НовыеКадровыеДанные.ДатаУвольненияПредыдущая
	|			ИЛИ НовыеКадровыеДанные.ТекущийВидЗанятости <> НовыеКадровыеДанные.ВидЗанятостиПредыдущий)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник, Истина); 
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			
			НаборЗаписей.Записать();
			
		КонецЦикла;
	
	КонецЕсли;
			
КонецПроцедуры

Процедура ПроверитьТекущуюТарифнуюСтавку(Источник, Отказ, Замещение) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		// Обновлять записи необходимо, только при записи набора, содержащего первичные данные
		Если Источник.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор") 
			И Источник.ДополнительныеСвойства.ЭтоВторичныйНабор Тогда
			Возврат;
		КонецЕсли;
		
		// Соберем информацию о сотрудниках, у которых меняются данные кадровой истории
	    Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ИзмеренияДаты = Новый ТаблицаЗначений;
		ИзмеренияДаты.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
		ИзмеренияДаты.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
		СтрокаИзмеренияДаты = ИзмеренияДаты.Добавить();
		
		МассивСтруктурОтбора = Новый Массив;
		МассивСтруктурОтбора.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение","Регистратор", "=", Источник.Отбор.Регистратор.Значение.Ссылка));
		
		ЗарплатаКадры.СоздатьПоТаблицеЗначенийВТИмяРегистра(Запрос.МенеджерВременныхТаблиц, Истина, "ПлановыеНачисления", ИзмеренияДаты, МассивСтруктурОтбора);
		
		Запрос.УстановитьПараметр("Регистратор", Источник.Отбор.Регистратор.Значение.Ссылка);
		Запрос.УстановитьПараметр("Источник", Источник.Выгрузить());
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НаборИсточник.Сотрудник
		|ПОМЕСТИТЬ ВТСохраняемыеЗначения
		|ИЗ
		|	&Источник КАК НаборИсточник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА СохраняемыеЗначения.Сотрудник ЕСТЬ NULL 
		|			ТОГДА ПредыдущиеЗначения.Сотрудник
		|		ИНАЧЕ СохраняемыеЗначения.Сотрудник
		|	КОНЕЦ КАК Сотрудник
		|ИЗ
		|	ВТПлановыеНачисления КАК ПредыдущиеЗначения
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТСохраняемыеЗначения КАК СохраняемыеЗначения
		|		ПО ПредыдущиеЗначения.Сотрудник = СохраняемыеЗначения.Сотрудник";
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Источник.ДополнительныеСвойства.Вставить("МассивСотрудниковДляОбновления", РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Сотрудник"));
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТекущуюТарифнуюСтавку(Источник, Отказ, Замещение) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		// Обновлять записи необходимо, только при записи набора, содержащего первичные данные
		Если Источник.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор") 
			И Источник.ДополнительныеСвойства.ЭтоВторичныйНабор Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ Источник.ДополнительныеСвойства.Свойство("МассивСотрудниковДляОбновления") 
			ИЛИ Источник.ДополнительныеСвойства.МассивСотрудниковДляОбновления.Количество() = 0 Тогда
			Возврат;
		КонецЕсли; 
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("МассивСотрудниковДляОбновления", Источник.ДополнительныеСвойства.МассивСотрудниковДляОбновления);
		
		// Подготовим таблицу ИзмеренияДаты для получения среза последних
		ИзмеренияДаты = Новый ТаблицаЗначений;
		ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
		ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
		
		Для Каждого Сотрудник Из Источник.ДополнительныеСвойства.МассивСотрудниковДляОбновления Цикл
			СтрокаИзмеренияДаты = ИзмеренияДаты.Добавить();
			СтрокаИзмеренияДаты.Сотрудник = Сотрудник;
		КонецЦикла;
		
		// Получим последние значения
		ЗарплатаКадры.СоздатьПоТаблицеЗначенийВТИмяРегистраСрезПоследних(Запрос.МенеджерВременныхТаблиц, Истина, "ПлановыеНачисления", ИзмеренияДаты);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПлановыеНачисленияСрезПоследних.Сотрудник КАК Сотрудник,
		|	СУММА(ПлановыеНачисленияСрезПоследних.Размер) КАК Размер
		|ПОМЕСТИТЬ ВТРазмерНачисленийСотрудников
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисленияСрезПоследних
		|ГДЕ
		|	ПлановыеНачисленияСрезПоследних.Размер <> 0
        |	И ПлановыеНачисленияСрезПоследних.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеНачисленияСрезПоследних.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
		|	Сотрудники.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ЕСТЬNULL(РазмерНачисленийСотрудников.Размер, 0) КАК ТекущаяТарифнаяСтавка,
		|	ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяТарифнаяСтавка, 0) КАК ТекущаяТарифнаяСтавкаПрежняя,
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ТекущаяОрганизация
		|ПОМЕСТИТЬ ВТНовыеКадровыеДанные
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущаяТарифнаяСтавкаСотрудников КАК ТекущаяТарифнаяСтавкаСотрудников
		|		ПО Сотрудники.Ссылка = ТекущаяТарифнаяСтавкаСотрудников.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО Сотрудники.Ссылка = ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерНачисленийСотрудников КАК РазмерНачисленийСотрудников
		|		ПО Сотрудники.Ссылка = РазмерНачисленийСотрудников.Сотрудник
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивСотрудниковДляОбновления)
		|	И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НовыеКадровыеДанные.Сотрудник,
		|	НовыеКадровыеДанные.ФизическоеЛицо,
		|	НовыеКадровыеДанные.ГоловнаяОрганизация,
		|	НовыеКадровыеДанные.ТекущаяОрганизация,
		|	НовыеКадровыеДанные.ТекущаяТарифнаяСтавка
		|ИЗ
		|	ВТНовыеКадровыеДанные КАК НовыеКадровыеДанные
		|ГДЕ
		|	НовыеКадровыеДанные.ТекущаяТарифнаяСтавка <> НовыеКадровыеДанные.ТекущаяТарифнаяСтавкаПрежняя";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				НаборЗаписей = РегистрыСведений.ТекущаяТарифнаяСтавкаСотрудников.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник, Истина); 
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
				
				НаборЗаписей.Записать();
				
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗапросВТТарифныеСтавкиСотрудников(ТолькоРазрешенные, ИмяВТТарифныеСтавкиСотрудников, ИмяВременнойТаблицыОтборовСотрудников, ПоляОтбораСотрудников, ПоляОтбораПериодическихДанных) Экспорт

	Запрос = Новый Запрос;
	ИменаВТКУничтожению = Новый Массив;
		
	ИмяВТПлановыеНачисленияСрезПоследних = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТПлановыеНачисленияСрезПоследних");
	
	МассивИзмерений = Новый Массив;
	МассивИзмерений.Добавить("Период");
	МассивИзмерений.Добавить("Сотрудник");
			
	СоответствиеИзмеренийПолямТаблицы = Новый Соответствие;
	СоответствиеИзмеренийПолямТаблицы.Вставить("Период", ПоляОтбораСотрудников.Период);
	СоответствиеИзмеренийПолямТаблицы.Вставить("Сотрудник", ПоляОтбораСотрудников.Сотрудник);
	
	ПоляОтбора = Неопределено;
	Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
		ПоляОтбораПериодическихДанных.Свойство("ПлановыеНачисления", ПоляОтбора);
	КонецЕсли;
		 
	КоллекцииПолей = ЗарплатаКадры.КоллекцииПолейДляПодготовкиТекстаЗапроса("ПлановыеНачисления", МассивИзмерений); 
		
	ЗапросВТИмяРегистраСрез = ЗарплатаКадры.ЗапросВТИмяРегистраСрез(
		ТолькоРазрешенные, 
		КоллекцииПолей, 
		"ПлановыеНачисления", 
		ИмяВременнойТаблицыОтборовСотрудников, 
		ИмяВТПлановыеНачисленияСрезПоследних, 
		ПоляОтбора, 
		, 
		, 
		Истина,
		СоответствиеИзмеренийПолямТаблицы);
			
	ЗарплатаКадры.СкопироватьПараметрыЗапроса(Запрос, ЗапросВТИмяРегистраСрез);
	
	ТекстЗапросаВТТарифнаяСтавкаСотрудников =
		"ВЫБРАТЬ
		|	ПлановыеНачисленияСрезПоследних.Период,
		|	ПлановыеНачисленияСрезПоследних.Сотрудник,
		|	СУММА(ПлановыеНачисленияСрезПоследних.Размер) КАК ТарифнаяСтавка,
		|	СУММА(ПлановыеНачисленияСрезПоследних.Размер) КАК РазмерТарифнойСтавки,
		|	0 КАК Надбавка,
		|	СУММА(ПлановыеНачисленияСрезПоследних.Размер) КАК ФОТ
		|ПОМЕСТИТЬ ВТТарифныеСтавкиСотрудников
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисленияСрезПоследних
		|ГДЕ ПлановыеНачисленияСрезПоследних.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеНачисленияСрезПоследних.Период,
		|	ПлановыеНачисленияСрезПоследних.Сотрудник";
		
	ТекстЗапросаВТТарифнаяСтавкаСотрудников = СтрЗаменить(ТекстЗапросаВТТарифнаяСтавкаСотрудников, "ВТПлановыеНачисленияСрезПоследних", ИмяВТПлановыеНачисленияСрезПоследних);
	ТекстЗапросаВТТарифнаяСтавкаСотрудников = СтрЗаменить(ТекстЗапросаВТТарифнаяСтавкаСотрудников, "ВТТарифныеСтавкиСотрудников", ИмяВТТарифныеСтавкиСотрудников);
		
	ТекстЗапроса = 
		ЗапросВТИмяРегистраСрез.Текст +
		ЗарплатаКадры.РазделительЗапросов() +
		ТекстЗапросаВТТарифнаяСтавкаСотрудников;
	
	ИменаВТКУничтожению.Добавить(ИмяВТПлановыеНачисленияСрезПоследних);
	
	ЗарплатаКадры.ДобавитьТекстУдаленияВременныхТаблиц(ТекстЗапроса, ИменаВТКУничтожению);
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
	
КонецФункции

Функция НеобходимаКонтактнаяИнформация(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат 
		ИмяПоля = ВРег("АдресДляИнформирования")
		ИЛИ ИмяПоля = ВРег("АдресДляИнформированияПредставление")
		ИЛИ ИмяПоля = ВРег("АдресЗаПределамиРФ")
		ИЛИ ИмяПоля = ВРег("АдресЗаПределамиРФПредставление")
		ИЛИ ИмяПоля = ВРег("АдресМестаПроживания")
		ИЛИ ИмяПоля = ВРег("АдресМестаПроживанияПредставление")
		ИЛИ ИмяПоля = ВРег("АдресПоПрописке")
		ИЛИ ИмяПоля = ВРег("АдресПоПропискеПредставление")
		ИЛИ ИмяПоля = ВРег("ТелефонДомашний")
		ИЛИ ИмяПоля = ВРег("ТелефонДомашнийПредставление")
		ИЛИ ИмяПоля = ВРег("ТелефонРабочий")
		ИЛИ ИмяПоля = ВРег("ТелефонРабочийПредставление")
		ИЛИ ИмяПоля = ВРег("Email")
		ИЛИ ИмяПоля = ВРег("EmailПредставление")
		ИЛИ ИмяПоля = ВРег("ТелефонМобильный")
		ИЛИ ИмяПоля = ВРег("ТелефонМобильныйПредставление")		
		
КонецФункции

Функция НеобходимыДанныеДокументов(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = "ДОКУМЕНТВИД"
		ИЛИ ИмяПоля = "ДОКУМЕНТСЕРИЯ"
		ИЛИ ИмяПоля = "ДОКУМЕНТНОМЕР"
		ИЛИ ИмяПоля = "ДОКУМЕНТДАТАВЫДАЧИ"
		ИЛИ ИмяПоля = "ДОКУМЕНТСРОКДЕЙСТВИЯ"
		ИЛИ ИмяПоля = "ДОКУМЕНТКЕМВЫДАН"
		ИЛИ ИмяПоля = "ДОКУМЕНТКОДПОДРАЗДЕЛЕНИЯ"
		ИЛИ ИмяПоля = "ДОКУМЕНТПРЕДСТАВЛЕНИЕ";
	
КонецФункции	

Функция НеобходимоГражданство(Знач ИмяПоля)
	
	Возврат ВРег(ИмяПоля) = "СТРАНА";
	
КонецФункции	

Функция НеобходимСтатусЗастрахованного(Знач ИмяПоля)
	
	Возврат ВРег(ИмяПоля) = "ВИДЗАСТРАХОВАННОГОЛИЦА";
	
КонецФункции	
	
Функция НеобходимыФИО(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = "ФАМИЛИЯ" 
		ИЛИ ИмяПоля = "ИМЯ" 
		ИЛИ ИмяПоля = "ОТЧЕСТВО"
		ИЛИ ИмяПоля = ВРег("ФамилияИО")
		ИЛИ ИмяПоля = ВРег("ИОФамилия")
		ИЛИ ИмяПоля = ВРег("ФИОПолные");

КонецФункции

Функция ПутьКДаннымФИОПоИмениЗапрашиваемыхДанных(Знач ИмяПоля)
	
	ИмяПоляВРег = ВРег(ИмяПоля);
	
	Если ИмяПоляВРег = "ФАМИЛИЯ"
		ИЛИ ИмяПоляВРег = "ИМЯ"
		ИЛИ ИмяПоляВРег = "ОТЧЕСТВО" Тогда
		
		Возврат "ЕСТЬNULL(ФИОФизическихЛицСрезПоследних." + ИмяПоля + ", """")";
		
	ИначеЕсли ИмяПоляВРег = ВРег("ФИОПолные") Тогда
		
		Возврат "ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Фамилия + "" "" + ФИОФизическихЛицСрезПоследних.Имя + "" "" + ФИОФизическихЛицСрезПоследних.Отчество, ДанныеФизическихЛиц.ФизическоеЛицо.ФИО)";
		
	ИначеЕсли ИмяПоляВРег = ВРег("ФамилияИО") Тогда
		
		Возврат "
				|	ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Фамилия + "" "" + ВЫБОР
				|			КОГДА ФИОФизическихЛицСрезПоследних.Имя = """"
				|				ТОГДА """"
				|			ИНАЧЕ ПОДСТРОКА(ФИОФизическихЛицСрезПоследних.Имя, 1, 1) + ""."" + ВЫБОР
				|					КОГДА ФИОФизическихЛицСрезПоследних.Отчество = """"
				|						ТОГДА """"
				|					ИНАЧЕ ПОДСТРОКА(ФИОФизическихЛицСрезПоследних.Отчество, 1, 1) + "".""
				|				КОНЕЦ
				|		КОНЕЦ, """")";
		
	ИначеЕсли ИмяПоляВРег = ВРег("ИОФамилия") Тогда
				
		Возврат "
				|	ЕСТЬNULL(ВЫБОР
				|			КОГДА ФИОФизическихЛицСрезПоследних.Имя = """"
				|				ТОГДА """"
				|			ИНАЧЕ ПОДСТРОКА(ФИОФизическихЛицСрезПоследних.Имя, 1, 1) + ""."" + ВЫБОР
				|					КОГДА ФИОФизическихЛицСрезПоследних.Отчество = """"
				|						ТОГДА """"
				|					ИНАЧЕ ПОДСТРОКА(ФИОФизическихЛицСрезПоследних.Отчество, 1, 1) + "".""
				|				КОНЕЦ + "" ""
				|		КОНЕЦ + ФИОФизическихЛицСрезПоследних.Фамилия, """")";
				
	КонецЕсли;
	
КонецФункции

Процедура СоздатьВТФункциональныеОпцииОрганизаций(МенеджерВременныхТаблиц, ТолькоРазрешенные, МассивФункциональныхОпций) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	Если НЕ ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;	
	
	ТекстЗапросаДляПолученияФункциональныхОпций = 
	"ВЫБРАТЬ" + ?(ТолькоРазрешенные, "РАЗРЕШЕННЫЕ", "") +
	Символы.ПС + 
	Символы.Таб+ "ТаблицаФункциональныхОпций.Организация";
	
	ТаблицаОрганизаций = Запрос.Выполнить().Выгрузить();
	Для Каждого ЭлМассивФункциональныхОпций Из МассивФункциональныхОпций Цикл
		Если ТаблицаОрганизаций.Колонки.Найти(ЭлМассивФункциональныхОпций) = Неопределено Тогда
			ТаблицаОрганизаций.Колонки.Добавить(ЭлМассивФункциональныхОпций, Новый ОписаниеТипов("Булево"));
		КонецЕсли; 
		ТекстЗапросаДляПолученияФункциональныхОпций = ТекстЗапросаДляПолученияФункциональныхОпций + ",
		|	ТаблицаФункциональныхОпций." + ЭлМассивФункциональныхОпций + " КАК " + ЭлМассивФункциональныхОпций;
		Для Каждого СтрокаТаблицаОрганизаций Из ТаблицаОрганизаций Цикл
			СтрокаТаблицаОрганизаций[ЭлМассивФункциональныхОпций] = ПолучитьФункциональнуюОпцию(ЭлМассивФункциональныхОпций, Новый Структура("Организация", СтрокаТаблицаОрганизаций.Организация));
		КонецЦикла;
	КонецЦикла;
	
	ТекстЗапросаДляПолученияФункциональныхОпций = ТекстЗапросаДляПолученияФункциональныхОпций + "
	|ПОМЕСТИТЬ ВТФункциональныеОпцииОрганизаций
	|ИЗ &ТаблицаФункциональныхОпций КАК ТаблицаФункциональныхОпций";
	
	Запрос.Текст = ТекстЗапросаДляПолученияФункциональныхОпций;
	Запрос.УстановитьПараметр("ТаблицаФункциональныхОпций", ТаблицаОрганизаций);
	Запрос.Выполнить();
	
КонецПроцедуры

Функция НеобходимСтатусНалогоплательщика(ИмяПоля)
	
	Возврат ВРег(ИмяПоля) = "СТАТУСНАЛОГОПЛАТЕЛЬЩИКА";	
	
КонецФункции		  

Функция НеобходимыДанныеСотрудника(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("Сотрудник")
		ИЛИ ИмяПоля = ВРег("ТабельныйНомер")
		ИЛИ ИмяПоля = ВРег("ГоловнаяОрганизация");
		
КонецФункции

Функция ПутьКДаннымПоИмениЗапрашиваемыхДанныхСотрудника(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	СоответствиеЗапрашиваемыхДанных = Новый Соответствие;
	СоответствиеЗапрашиваемыхДанных.Вставить("СОТРУДНИК", 							"ЕСТЬNULL(ДанныеСотрудников.Ссылка, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))");
	СоответствиеЗапрашиваемыхДанных.Вставить("ТАБЕЛЬНЫЙНОМЕР", 						"ЕСТЬNULL(ДанныеСотрудников.Код, """")");
	СоответствиеЗапрашиваемыхДанных.Вставить("ГОЛОВНАЯОРГАНИЗАЦИЯ", 				"ЕСТЬNULL(ДанныеСотрудников.ГоловнаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))");
	
	Если СоответствиеЗапрашиваемыхДанных.Получить(ИмяПоля) = Неопределено Тогда
		Возврат "ДанныеСотрудников." + ИмяПоля;
	КонецЕсли;
	
	Возврат СоответствиеЗапрашиваемыхДанных.Получить(ИмяПоля);
	
КонецФункции

Функция НеобходимПризнакОформленПриемНаРаботу(ИмяПоля)
	
	Возврат ВРег(ИмяПоля) = ВРег("ОформленПриемНаРаботу");
	
КонецФункции

Функция ПутьКДаннымПризнакаОформленПриемНаРаботу()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		Возврат 
			"ВЫБОР
			|	КОГДА ЕСТЬNULL(КоличествоКадровыхСобытий.Количество, 0) = 0
			|		ТОГДА ЛОЖЬ
			|	ИНАЧЕ ИСТИНА
			|КОНЕЦ";
	Иначе
		
		Возврат
			"ВЫБОР
			|	КОГДА ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаПриема, ДАТАВРЕМЯ(1,1,1,0,0,0)) <> ДАТАВРЕМЯ(1,1,1,0,0,0)
			|		И ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|		ТОГДА ИСТИНА
			|	ИНАЧЕ ЛОЖЬ
			|КОНЕЦ
			|";
			
	КонецЕсли;
	
КонецФункции

Функция НеобходимыТекущиеДанныеСотрудника(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ДатаПриема")
		ИЛИ ИмяПоля = ВРег("ДатаУвольнения")
		ИЛИ ИмяПоля = ВРег("Организация")
		ИЛИ ИмяПоля = ВРег("Подразделение")
		ИЛИ ИмяПоля = ВРег("Должность")
		ИЛИ ИмяПоля = ВРег("ВидЗанятости")
		ИЛИ ИмяПоля = ВРег("ВидСобытия")
		ИЛИ ИмяПоля = ВРег("КоличествоСтавок")
		ИЛИ ИмяПоля = ВРег("ОсновноеРабочееМестоВОрганизации")
		ИЛИ ИмяПоля = ВРег("ТекущаяОрганизация")
		ИЛИ ИмяПоля = ВРег("ТекущееПодразделение")
		ИЛИ ИмяПоля = ВРег("ТекущаяДолжность")
		ИЛИ ИмяПоля = ВРег("ТекущийВидЗанятости")
		ИЛИ ИмяПоля = ВРег("ПринятНаНовоеРабочееМесто")
		ИЛИ ИмяПоля = ВРег("ДатаСозданияРабочегоМеста");

КонецФункции
 
Функция ПутьКДаннымПоИмениЗапрашиваемыхТекущихДанныхСотрудника(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	СоответствиеЗапрашиваемыхДанных = Новый Соответствие;
	СоответствиеЗапрашиваемыхДанных.Вставить("ДАТАПРИЕМА", 							"ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаПриема, ДАТАВРЕМЯ(1,1,1,0,0,0))");
	СоответствиеЗапрашиваемыхДанных.Вставить("ДАТАУВОЛЬНЕНИЯ", 						"ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения, ДАТАВРЕМЯ(1,1,1,0,0,0))");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		СоответствиеЗапрашиваемыхДанных.Вставить("ОРГАНИЗАЦИЯ", 	"ЕСТЬNULL(КадроваяИсторияСотрудников.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))");
		СоответствиеЗапрашиваемыхДанных.Вставить("ПОДРАЗДЕЛЕНИЕ", 	"ЕСТЬNULL(КадроваяИсторияСотрудников.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))");
		СоответствиеЗапрашиваемыхДанных.Вставить("ДОЛЖНОСТЬ", 		"ЕСТЬNULL(КадроваяИсторияСотрудников.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка))");
		СоответствиеЗапрашиваемыхДанных.Вставить("ВИДЗАНЯТОСТИ", 	"ЕСТЬNULL(КадроваяИсторияСотрудников.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка))");
		СоответствиеЗапрашиваемыхДанных.Вставить("ВИДСОБЫТИЯ",	 	"ЕСТЬNULL(КадроваяИсторияСотрудников.ВидСобытия, ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.ПустаяСсылка))");
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИНЯТНАНОВОЕРАБОЧЕЕМЕСТО", 	"ЕСТЬNULL(КадроваяИсторияСотрудников.ПринятНаНовоеРабочееМесто, ЛОЖЬ)");   
		СоответствиеЗапрашиваемыхДанных.Вставить("ДАТАСОЗДАНИЯРАБОЧЕГОМЕСТА", 	"ЕСТЬNULL(КадроваяИсторияСотрудников.ДатаСозданияРабочегоМеста, ДАТАВРЕМЯ(1,1,1,0,0,0))");   
	Иначе
		СоответствиеЗапрашиваемыхДанных.Вставить("ОРГАНИЗАЦИЯ", 	"ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))");
		СоответствиеЗапрашиваемыхДанных.Вставить("ПОДРАЗДЕЛЕНИЕ", 	"ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))");
		СоответствиеЗапрашиваемыхДанных.Вставить("ДОЛЖНОСТЬ", 		"ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка))");
		СоответствиеЗапрашиваемыхДанных.Вставить("ВИДЗАНЯТОСТИ", 	"ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка))");
		СоответствиеЗапрашиваемыхДанных.Вставить("ВИДСОБЫТИЯ",	 	"ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)");
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИНЯТНАНОВОЕРАБОЧЕЕМЕСТО", 	"ЛОЖЬ");   
		СоответствиеЗапрашиваемыхДанных.Вставить("ДАТАСОЗДАНИЯРАБОЧЕГОМЕСТА", 	"ДАТАВРЕМЯ(1,1,1,0,0,0)");
	КонецЕсли;
	
	СоответствиеЗапрашиваемыхДанных.Вставить("КОЛИЧЕСТВОСТАВОК", 					"1");
	СоответствиеЗапрашиваемыхДанных.Вставить("ОСНОВНОЕРАБОЧЕЕМЕСТОВОРГАНИЗАЦИИ",	"ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ОсновноеРабочееМестоВОрганизации, ЛОЖЬ)");
	СоответствиеЗапрашиваемыхДанных.Вставить("ТЕКУЩАЯОРГАНИЗАЦИЯ", 					"ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))");
	СоответствиеЗапрашиваемыхДанных.Вставить("ТЕКУЩЕЕПОДРАЗДЕЛЕНИЕ", 				"ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))");
	СоответствиеЗапрашиваемыхДанных.Вставить("ТЕКУЩАЯДОЛЖНОСТЬ", 					"ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка))");
	СоответствиеЗапрашиваемыхДанных.Вставить("ТЕКУЩИЙВИДЗАНЯТОСТИ", 				"ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка))");
	
	Возврат СоответствиеЗапрашиваемыхДанных.Получить(ИмяПоля);
	
КонецФункции

Функция НеобходимаТарифнаяСтавкаСотрудника(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ТарифнаяСтавка")
		ИЛИ ИмяПоля = ВРег("РазмерТарифнойСтавки")
		ИЛИ ИмяПоля = ВРег("Надбавка")
		ИЛИ ИмяПоля = "ФОТ";
		
КонецФункции
 
Функция НеобходимаТекущаяТарифнаяСтавкаСотрудника(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ТекущаяТарифнаяСтавка")
		ИЛИ ИмяПоля = ВРег("ТекущийФОТ")
		ИЛИ ИмяПоля = ВРег("РазмерТекущейТарифнойСтавки")
		ИЛИ ИмяПоля = ВРег("НачисляетсяИндексация")
		ИЛИ ИмяПоля = ВРег("БазовыйПериодИндексации")
		ИЛИ ИмяПоля = ВРег("ТекущаяКатегорияЕСВ");
		
КонецФункции
 
Функция ПутьКДаннымПоИмениЗапрашиваемойТарифнойСтавкиСотрудника(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	СоответствиеЗапрашиваемыхДанных = Новый Соответствие;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет")  Тогда
		СоответствиеЗапрашиваемыхДанных.Вставить("ТАРИФНАЯСТАВКА", 			"ЕСТЬNULL(ВЫБОР КОГДА ТарифныеСтавкиСотрудников.ТарифнаяСтавка = НЕОПРЕДЕЛЕНО ТОГДА 0 ИНАЧЕ ТарифныеСтавкиСотрудников.ТарифнаяСтавка КОНЕЦ, 0)");
		СоответствиеЗапрашиваемыхДанных.Вставить("РАЗМЕРТАРИФНОЙСТАВКИ",	"ЕСТЬNULL(ВЫБОР КОГДА ТарифныеСтавкиСотрудников.РазмерТарифнойСтавки = НЕОПРЕДЕЛЕНО ТОГДА 0 ИНАЧЕ ТарифныеСтавкиСотрудников.РазмерТарифнойСтавки КОНЕЦ, 0)");
		СоответствиеЗапрашиваемыхДанных.Вставить("ФОТ",						"ЕСТЬNULL(ВЫБОР КОГДА ТарифныеСтавкиСотрудников.ФОТ = НЕОПРЕДЕЛЕНО ТОГДА 0 ИНАЧЕ ТарифныеСтавкиСотрудников.ФОТ КОНЕЦ, 0)");
		СоответствиеЗапрашиваемыхДанных.Вставить("НАДБАВКА",				"ЕСТЬNULL(ТарифныеСтавкиСотрудников.Надбавка, 0)");
	Иначе
		СоответствиеЗапрашиваемыхДанных.Вставить("ТАРИФНАЯСТАВКА", 			"ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяТарифнаяСтавка, 0)");
		СоответствиеЗапрашиваемыхДанных.Вставить("РАЗМЕРТАРИФНОЙСТАВКИ", 	"ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяТарифнаяСтавка, 0)");
		СоответствиеЗапрашиваемыхДанных.Вставить("ФОТ", 					"ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяТарифнаяСтавка, 0)");
		СоответствиеЗапрашиваемыхДанных.Вставить("НАДБАВКА", 					"0");
	КонецЕсли;
	
	Возврат СоответствиеЗапрашиваемыхДанных.Получить(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымПоИмениЗапрашиваемойТекущейТарифнойСтавкиСотрудника(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	СоответствиеЗапрашиваемыхДанных = Новый Соответствие;
	
	СоответствиеЗапрашиваемыхДанных.Вставить("ТЕКУЩАЯТАРИФНАЯСТАВКА", 		"ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяТарифнаяСтавка, 0)");
	СоответствиеЗапрашиваемыхДанных.Вставить("ТЕКУЩИЙФОТ", 					"ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяТарифнаяСтавка, 0)");
	СоответствиеЗапрашиваемыхДанных.Вставить("РАЗМЕРТЕКУЩЕЙТАРИФНОЙСТАВКИ", "ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяТарифнаяСтавка, 0)");
	СоответствиеЗапрашиваемыхДанных.Вставить("НАЧИСЛЯЕТСЯИНДЕКСАЦИЯ",  		"ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.НачисляетсяИндексация, ЛОЖЬ)");
	СоответствиеЗапрашиваемыхДанных.Вставить("БАЗОВЫЙПЕРИОДИНДЕКСАЦИИ",		"ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.БазовыйПериодИндексации,ДАТАВРЕМЯ(1,1,1))");
	СоответствиеЗапрашиваемыхДанных.Вставить("ТЕКУЩАЯКАТЕГОРИЯЕСВ",			"ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущаяКатегорияЕСВ, ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка))");
	
	Возврат СоответствиеЗапрашиваемыхДанных.Получить(ИмяПоля);
	
КонецФункции

Функция НеобходимыДанныеДолжности(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ЯвляетсяЧленомЛетногоЭкипажа")
		ИЛИ ИмяПоля = ВРег("ЯвляетсяШахтером")
		ИЛИ ИмяПоля = ВРег("ЯвляетсяФармацевтом")
		ИЛИ ИмяПоля = ВРег("ЯвляетсяПрокурором")
		ИЛИ ИмяПоля = ВРег("ЯвляетсяВоеннослужащим")
		ИЛИ ИмяПоля = ВРег("РаботаетВСтуденческомОтряде")
		ИЛИ ИмяПоля = ВРег("ЯвляетсяРаботникомСДосрочнойПенсией");
		
КонецФункции

Функция ПутьКДаннымПоИмениЗапрашиваемыхДанныхДолжности(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	СоответствиеЗапрашиваемыхДанных = Новый Соответствие;
	
	СоответствиеЗапрашиваемыхДанных.Вставить(ВРег("ЯвляетсяЧленомЛетногоЭкипажа"),
		"ВЫБОР 
		|	КОГДА ФункциональныеОпции.ИспользуетсяТрудЧленовЛетныхЭкипажей 
		|		ТОГДА ЕСТЬNULL(ДанныеДолжности.ЯвляетсяДолжностьюЛетногоЭкипажа, ЛОЖЬ) 
		|	ИНАЧЕ ЛОЖЬ 
		|КОНЕЦ");
		
	СоответствиеЗапрашиваемыхДанных.Вставить(ВРег("ЯвляетсяШахтером"),
		"ВЫБОР 
		|	КОГДА ФункциональныеОпции.ИспользуетсяТрудШахтеров 
		|		ТОГДА ЕСТЬNULL(ДанныеДолжности.ЯвляетсяШахтерскойДолжностью, ЛОЖЬ) 
		|	ИНАЧЕ ЛОЖЬ 
		|КОНЕЦ");
		
	СоответствиеЗапрашиваемыхДанных.Вставить(ВРег("ЯвляетсяФармацевтом"),
		"ВЫБОР 
		|	КОГДА ФункциональныеОпции.ИспользуетсяТрудФармацевтов 
		|		ТОГДА ЕСТЬNULL(ДанныеДолжности.ЯвляетсяФармацевтическойДолжностью, ЛОЖЬ) 
		|	ИНАЧЕ ЛОЖЬ 
		|КОНЕЦ");
	
	Если Метаданные.Справочники.Должности.Реквизиты.Найти("ЯвляетсяПрокурором") = Неопределено Тогда
		СоответствиеЗапрашиваемыхДанных.Вставить(ВРег("ЯвляетсяПрокурором"), "ЛОЖЬ");
	Иначе
		СоответствиеЗапрашиваемыхДанных.Вставить(ВРег("ЯвляетсяПрокурором"),
			"ЕСТЬNULL(ДанныеДолжности.ЯвляетсяПрокурором, ЛОЖЬ)");
	КонецЕсли; 
	
	Если Метаданные.Справочники.Должности.Реквизиты.Найти("ЯвляетсяВоеннослужащим") = Неопределено Тогда
		СоответствиеЗапрашиваемыхДанных.Вставить(ВРег("ЯвляетсяВоеннослужащим"), "ЛОЖЬ");
	Иначе
		СоответствиеЗапрашиваемыхДанных.Вставить(ВРег("ЯвляетсяВоеннослужащим"),
			"ЕСТЬNULL(ДанныеДолжности.ЯвляетсяВоеннослужащим, ЛОЖЬ)");
	КонецЕсли; 
	
	Если Метаданные.Справочники.Должности.Реквизиты.Найти("РаботаетВСтуденческомОтряде") = Неопределено Тогда
		СоответствиеЗапрашиваемыхДанных.Вставить(ВРег("РаботаетВСтуденческомОтряде"), "ЛОЖЬ");
	Иначе
		СоответствиеЗапрашиваемыхДанных.Вставить(ВРег("РаботаетВСтуденческомОтряде"),
			"ЕСТЬNULL(ДанныеДолжности.РаботаетВСтуденческомОтряде, ЛОЖЬ)");
	КонецЕсли; 
	
	Если Метаданные.Справочники.Должности.Реквизиты.Найти("ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией") = Неопределено Тогда
		СоответствиеЗапрашиваемыхДанных.Вставить(ВРег("ЯвляетсяРаботникомСДосрочнойПенсией"),
			"ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка)");
	Иначе
		СоответствиеЗапрашиваемыхДанных.Вставить(ВРег("ЯвляетсяРаботникомСДосрочнойПенсией"),
			"ВЫБОР 
			|	КОГДА ФункциональныеОпции.ИспользуютсяРаботыСДосрочнойПенсией 
			|		ТОГДА ЕСТЬNULL(ДанныеДолжности.ВзимаютсяВзносыЗаЗанятыхНаРаботахСДосрочнойПенсией, ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка)) 
			|	ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРаботСДосрочнойПенсией.ПустаяСсылка) 
			|КОНЕЦ");
	КонецЕсли; 
	
	Если СоответствиеЗапрашиваемыхДанных.Получить(ИмяПоля) = Неопределено Тогда
		Возврат "ДанныеСотрудников." + ИмяПоля;
	КонецЕсли;
	
	Возврат СоответствиеЗапрашиваемыхДанных.Получить(ИмяПоля);
	
КонецФункции

Функция НеобходимыФункциональныеОпцииОрганизации(МассивФункциональныхОпций, Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Если ИмяПоля = ВРег("ЯвляетсяЧленомЛетногоЭкипажа") Тогда
		ДобавитьФункциональнуюОпцию(МассивФункциональныхОпций, "ИспользуетсяТрудЧленовЛетныхЭкипажей");
	ИначеЕсли ИмяПоля = ВРег("ЯвляетсяШахтером") Тогда
		ДобавитьФункциональнуюОпцию(МассивФункциональныхОпций, "ИспользуетсяТрудШахтеров");
	ИначеЕсли ИмяПоля = ВРег("ЯвляетсяФармацевтом") Тогда
		ДобавитьФункциональнуюОпцию(МассивФункциональныхОпций, "ИспользуетсяТрудФармацевтов");
	ИначеЕсли ИмяПоля = ВРег("ЯвляетсяЧленомЭкипажаСуднаПодФлагомРФ") Тогда
		ДобавитьФункциональнуюОпцию(МассивФункциональныхОпций, "ИспользуетсяТрудЧленовЭкипажейМорскихСудов");
	ИначеЕсли ИмяПоля = ВРег("ЯвляетсяРаботникомСДосрочнойПенсией") Тогда
		ДобавитьФункциональнуюОпцию(МассивФункциональныхОпций, "ИспользуютсяРаботыСДосрочнойПенсией");
	КонецЕсли; 
	
КонецФункции

Функция НеобходимыДанныеПодразделения(Знач ИмяПоля) Экспорт
	
	Возврат ВРег(ИмяПоля) = ВРег("ЯвляетсяЧленомЭкипажаСуднаПодФлагомРФ");
	
КонецФункции

Функция ПутьКДаннымПоИмениЗапрашиваемыхДанныхПодразделения(Знач ИмяПоля) Экспорт
	
	Возврат "
		|	ВЫБОР
		|		КОГДА ФункциональныеОпции.ИспользуетсяТрудЧленовЭкипажейМорскихСудов 
		|			ТОГДА ЕСТЬNULL(ДанныеПодразделения.СоответствуетСудамЗарегистрированнымВРоссийскомМеждународномРеестреСудов, ЛОЖЬ)
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ";
		
КонецФункции
	
Функция НеобходимыКадровыеДанныеФизическогоЛица(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	ВозвращаемоеЗначение = Ложь;
	
	Если ИмяПоля <> "ФИЗИЧЕСКОЕЛИЦО" Тогда
		ВозвращаемоеЗначение = Метаданные.Справочники.ФизическиеЛица.Реквизиты.Найти(ИмяПоля) <> Неопределено
			ИЛИ ИмяПоля = "ФИЗИЧЕСКОЕЛИЦОНАИМЕНОВАНИЕ" 
			ИЛИ ИмяПоля = "ФИЗИЧЕСКОЕЛИЦОКОД";
			
	КонецЕсли;
		
	Возврат ВозвращаемоеЗначение
		ИЛИ НеобходимСтатусНалогоплательщика(ИмяПоля)
		ИЛИ НеобходимоГражданство(ИмяПоля)
		ИЛИ НеобходимСтатусЗастрахованного(ИмяПоля)
		ИЛИ НеобходимыДанныеДокументов(ИмяПоля)
		ИЛИ НеобходимыФИО(ИмяПоля)
		ИЛИ НеобходимаКонтактнаяИнформация(ИмяПоля);
		
КонецФункции

Процедура ДобавитьФункциональнуюОпцию(МассивФункциональныхОпций, ИмяФункциональнойОпции)
	
	Если МассивФункциональныхОпций.Найти(ИмяФункциональнойОпции) = Неопределено Тогда
		МассивФункциональныхОпций.Добавить(ИмяФункциональнойОпции);
	КонецЕсли; 
	
КонецПроцедуры

Функция ПутьКДаннымПоИмениЗапрашиваемыхДанныхГражданства(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	СоответствиеЗапрашиваемыхДанных = Новый Соответствие;
	СоответствиеЗапрашиваемыхДанных.Вставить("СТРАНА",					"ЕСТЬNULL(ВЫБОР КОГДА ГражданствоФизическихЛицСрезПоследних.Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) ТОГДА ЗНАЧЕНИЕ(Справочник.СтраныМира.Украина) ИНАЧЕ ГражданствоФизическихЛицСрезПоследних.Страна КОНЕЦ, ЗНАЧЕНИЕ(Справочник.СтраныМира.Украина))");
	
	Возврат СоответствиеЗапрашиваемыхДанных.Получить(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымПоИмениЗапрашиваемыхДанныхЗастрахованногоЛица(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	СоответствиеЗапрашиваемыхДанных = Новый Соответствие;
	СоответствиеЗапрашиваемыхДанных.Вставить("ВИДЗАСТРАХОВАННОГОЛИЦА",	"ЕСТЬNULL(СтатусыЗастрахованныхФизическихЛицСрезПоследних.ВидЗастрахованногоЛица, ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ))");
	
	Возврат СоответствиеЗапрашиваемыхДанных.Получить(ИмяПоля);
	
КонецФункции

Функция НеобходимыСведенияПриказаОПриеме(Знач ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПриказОПриеме")
		ИЛИ ИмяПоля = ВРег("ПриказОПриемеДата")
		ИЛИ ИмяПоля = ВРег("ПриказОПриемеНомер")
		ИЛИ ИмяПоля = ВРег("ПриказОПриемеДатаЗавершенияТрудовогоДоговора");
		
КонецФункции

Функция ПутьКДаннымПоИмениДанныхПриказаОПриеме(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	СоответствиеЗапрашиваемыхДанных = Новый Соответствие;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОПРИЕМЕ",								"ЕСТЬNULL(ПриказыОПриеме.Регистратор, ЗНАЧЕНИЕ(Документ.ПриемНаРаботу.ПустаяСсылка))");
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОПРИЕМЕДАТА",							"ЕСТЬNULL(ПриказыОПриеме.Регистратор.Дата, ДАТАВРЕМЯ(1,1,1))");
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОПРИЕМЕНОМЕР",							"ЕСТЬNULL(ПриказыОПриеме.Регистратор.Номер, """")");
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОПРИЕМЕДАТАЗАВЕРШЕНИЯТРУДОВОГОДОГОВОРА","ДАТАВРЕМЯ(1,1,1)");
		
	Иначе
		
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОПРИЕМЕ",								"ЗНАЧЕНИЕ(Документ.ПриемНаРаботу.ПустаяСсылка)");
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОПРИЕМЕДАТА",							"ДАТАВРЕМЯ(1,1,1)");
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОПРИЕМЕНОМЕР",							"""""");
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОПРИЕМЕДАТАЗАВЕРШЕНИЯТРУДОВОГОДОГОВОРА","ДАТАВРЕМЯ(1,1,1)");
		
	КонецЕсли;
	
	Возврат СоответствиеЗапрашиваемыхДанных.Получить(ИмяПоля);
	
КонецФункции
	
Функция НеобходимыСведенияПриказаОбУвольнении(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("ПриказОбУвольнении")
		ИЛИ ИмяПоля = ВРег("ПриказОбУвольненииНомер")
		ИЛИ ИмяПоля = ВРег("ПриказОбУвольненииДата")
		ИЛИ ИмяПоля = ВРег("ПриказОбУвольненииСтатьяКЗоТ")	
		ИЛИ ИмяПоля = ВРег("ПриказОбУвольненииСтатьяЗакона")   
КонецФункции

Функция ПутьКДаннымПоИмениДанныхПриказаОбУвольнении(ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	СоответствиеЗапрашиваемыхДанных = Новый Соответствие;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОБУВОЛЬНЕНИИ",				"ЕСТЬNULL(ПриказыОбУвольнении.Регистратор, ЗНАЧЕНИЕ(Документ.Увольнение.ПустаяСсылка))");
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОБУВОЛЬНЕНИИДАТА",			"ЕСТЬNULL(ПриказыОбУвольнении.Регистратор.Дата, ДАТАВРЕМЯ(1,1,1))");
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОБУВОЛЬНЕНИИНОМЕР",			"ЕСТЬNULL(ПриказыОбУвольнении.Регистратор.Номер, """")");
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОБУВОЛЬНЕНИИСТАТЬЯКЗОТ",
			"ЕСТЬNULL(ВЫБОР
			|	КОГДА ПриказыОбУвольнении.Регистратор.СтатьяКЗоТ = ЗНАЧЕНИЕ(Справочник.ОснованияУвольнения.ПустаяСсылка) ТОГДА """"
			|	ИНАЧЕ ПриказыОбУвольнении.Регистратор.СтатьяКЗоТ.ТекстОснования + "", ""+ ПриказыОбУвольнении.Регистратор.СтатьяКЗоТ.Наименование
			|КОНЕЦ, """")");
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОБУВОЛЬНЕНИИСТАТЬЯЗАКОНА",
			"ЕСТЬNULL(ВЫБОР
			|	КОГДА ПриказыОбУвольнении.Регистратор.СтатьяКЗоТ = ЗНАЧЕНИЕ(Справочник.ОснованияУвольнения.ПустаяСсылка) ТОГДА """"
			|	ИНАЧЕ ПриказыОбУвольнении.Регистратор.СтатьяКЗоТ.СтатьяЗакона
			|КОНЕЦ, """")");
	Иначе
			
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОБУВОЛЬНЕНИИ",				"ЗНАЧЕНИЕ(Документ.Увольнение.ПустаяСсылка)");
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОБУВОЛЬНЕНИИДАТА",			"ДАТАВРЕМЯ(1,1,1)");
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОБУВОЛЬНЕНИИНОМЕР",			"""""");
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОБУВОЛЬНЕНИИСТАТЬЯКЗОТ",	"""""");
		СоответствиеЗапрашиваемыхДанных.Вставить("ПРИКАЗОБУВОЛЬНЕНИИСТАТЬЯЗАКОНА",	"""""");

	КонецЕсли;
	
	Возврат СоответствиеЗапрашиваемыхДанных.Получить(ИмяПоля);
	
КонецФункции
	
Процедура ПеренестиТекущиеКадровыеДанныеСотрудниковИзСправочникаВРегистры() Экспорт
	
	Запрос = Новый Запрос;
	
	// Проверка наличия записей
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	// Заполнение регистра, если записей нет
	Если РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Сотрудники.ФизическоеЛицо,
			|	Сотрудники.ГоловнаяОрганизация,
			|	Сотрудники.Ссылка,
			|	Сотрудники.УдалитьТекущаяОрганизация КАК ТекущаяОрганизация,
			|	Сотрудники.УдалитьТекущееПодразделение КАК ТекущееПодразделение,
			|	Сотрудники.УдалитьТекущаяДолжность КАК ТекущаяДолжность,
			|	Сотрудники.УдалитьТекущаяТарифнаяСтавка КАК ТекущаяТарифнаяСтавка,
			|	Сотрудники.УдалитьДатаПриема КАК ДатаПриема,
			|	Сотрудники.УдалитьДатаУвольнения КАК ДатаУвольнения,
			|	Сотрудники.УдалитьОсновноеРабочееМестоВОрганизации КАК ОсновноеРабочееМестоВОрганизации
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники";
			
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			ТекущиеКадровыеДанныеНаборЗаписей = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
			ТекущаяТарифнаяСтавкаНаборЗаписей = РегистрыСведений.ТекущаяТарифнаяСтавкаСотрудников.СоздатьНаборЗаписей();
			
			Пока Выборка.Следующий() Цикл
				
				Строка = ТекущиеКадровыеДанныеНаборЗаписей.Добавить();
				Строка.Сотрудник = Выборка.Ссылка; 
				Строка.ГоловнаяОрганизация = Выборка.ГоловнаяОрганизация; 
				Строка.ФизическоеЛицо = Выборка.ФизическоеЛицо; 
				Строка.ТекущаяОрганизация = Выборка.ТекущаяОрганизация; 
				Строка.ТекущееПодразделение = Выборка.ТекущееПодразделение; 
				Строка.ТекущаяДолжность = Выборка.ТекущаяДолжность; 
				Строка.ДатаПриема = Выборка.ДатаПриема; 
				Строка.ДатаУвольнения = Выборка.ДатаУвольнения;
				Строка.ОсновноеРабочееМестоВОрганизации = Выборка.ОсновноеРабочееМестоВОрганизации;
				
				Строка = ТекущаяТарифнаяСтавкаНаборЗаписей.Добавить();
				Строка.Сотрудник = Выборка.Ссылка; 
				Строка.ФизическоеЛицо = Выборка.ФизическоеЛицо; 
				Строка.ГоловнаяОрганизация = Выборка.ГоловнаяОрганизация; 
				Строка.ТекущаяОрганизация = Выборка.ТекущаяОрганизация; 
				Строка.ТекущаяТарифнаяСтавка = Выборка.ТекущаяТарифнаяСтавка; 
				
			КонецЦикла;	
			
			ТекущиеКадровыеДанныеНаборЗаписей.ОбменДанными.Загрузка = Истина;
			ТекущиеКадровыеДанныеНаборЗаписей.Записать();
			
			ТекущаяТарифнаяСтавкаНаборЗаписей.ОбменДанными.Загрузка = Истина;
			ТекущаяТарифнаяСтавкаНаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПеренестиТекущиеВидыЗанятостиСправочниковВРегистр() Экспорт
	
	Запрос = Новый Запрос;
	
	// Проверка наличия записей с незаполненным видом занятости
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
		|	И Сотрудники.ИНАГРО_ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)";   // ИНАГРО
		
	РезультатЗапроса = Запрос.Выполнить();
	
	// Заполнение вида занятости, если есть записи с незаполненным видом занятости
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
			|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ТекущиеКадровыеДанныеСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
			|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация,
			|	ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение,
			|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность,
			|	ТекущиеКадровыеДанныеСотрудников.ДатаПриема,
			|	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения,
			|	ТекущиеКадровыеДанныеСотрудников.ОсновноеРабочееМестоВОрганизации,
			|	ВЫБОР
			|		КОГДА ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
			|			ТОГДА Сотрудники.ИНАГРО_ВидЗанятости     // ИНАГРО
			|		ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости
			|	КОНЕЦ КАК ТекущийВидЗанятости
			|ИЗ
			|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
			|		ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка";
					   
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Набор = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
			Набор.Загрузить(РезультатЗапроса.Выгрузить());
			
			Набор.ОбменДанными.Загрузка = Истина;
			Набор.Записать();
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Функция ОпуститьОбработкуПоляФизическогоЛица(ИмяПоля)
	
	Возврат
		ПустаяСтрока(ИмяПоля) 
		ИЛИ ВРег(ИмяПоля) = "ПЕРИОД";
		
КонецФункции

Функция ОпуститьОбработкуПоляСотрудника(ИмяПоля)
	
	Возврат 
		ПустаяСтрока(ИмяПоля) 
		ИЛИ ВРег(ИмяПоля) = "ПЕРИОД"
		ИЛИ ВРег(ИмяПоля) = "СОТРУДНИК"
		ИЛИ ВРег(ИмяПоля) = "ФИЗИЧЕСКОЕЛИЦО";
	
КонецФункции

Функция ЗапросВТВсеЗначенияДоступаСотрудников(Сотрудники) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ГоловнаяОрганизация КАК ЗначениеДоступа
		|ПОМЕСТИТЬ ВТВсеЗначенияДоступаСотрудников
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&Сотрудники)
		|	И Сотрудники.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КадроваяИсторияСотрудников.Сотрудник,
		|	КадроваяИсторияСотрудников.Организация
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|ГДЕ
		|	КадроваяИсторияСотрудников.Сотрудник В(&Сотрудники)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник В(&Сотрудники)
		|	И ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	
	Возврат Запрос;
	
КонецФункции

