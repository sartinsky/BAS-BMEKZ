////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//////////////////////////////////////////////////////////////////
/// Учёт начисленной и выплаченной зарплаты

Процедура ЗарегистрироватьНачисленнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, Начисления = Неопределено, Удержания = Неопределено, Взносы = Неопределено, НДФЛ = Неопределено) Экспорт
	
	Если Начисления = Неопределено Тогда
		НачисленияДляВзаиморасчетов = Движения.НачисленияУдержанияПоСотрудникам.Выгрузить(,"ФизическоеЛицо, НачислениеУдержание, Сотрудник,Подразделение,Сумма");
	КонецЕсли;
	
	Если Удержания = Неопределено Тогда
		УдержанияДляВзаиморасчетов = Движения.НачисленияУдержанияПоСотрудникам.Выгрузить(,"ФизическоеЛицо, НачислениеУдержание, Сотрудник,Подразделение,Сумма");
	КонецЕсли;
	
	Если Взносы = Неопределено Тогда
		ВзносыДляВзаиморасчетов = Движения.ЕСВПоСотрудникам.Выгрузить(,"ФизическоеЛицо, ВидЕСВ, Налог, СпособРасчета, Сумма");
	КонецЕсли;
	
	Если НДФЛ = Неопределено Тогда
		НДФЛДляВзаиморасчетов = Движения.НДФЛПоСотрудникам.Выгрузить(,"ФизическоеЛицо, ДоходНДФЛ, Налог");
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("НачисленияДляВзаиморасчетов",НачисленияДляВзаиморасчетов);
	Запрос.УстановитьПараметр("УдержанияДляВзаиморасчетов",УдержанияДляВзаиморасчетов);
	Запрос.УстановитьПараметр("ВзносыДляВзаиморасчетов",ВзносыДляВзаиморасчетов);
	Запрос.УстановитьПараметр("НДФЛДляВзаиморасчетов",НДФЛДляВзаиморасчетов);
	Запрос.УстановитьПараметр("ПериодРегистрации",ПериодРегистрации);
	
	Запрос.Текст  =
	"ВЫБРАТЬ
	|	НачисленияДляВзаиморасчетов.ФизическоеЛицо,
	|	НачисленияДляВзаиморасчетов.Сотрудник,
	|	НачисленияДляВзаиморасчетов.Подразделение,
	|	НачисленияДляВзаиморасчетов.НачислениеУдержание КАК Начисление,
	|	НачисленияДляВзаиморасчетов.Сумма
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	&НачисленияДляВзаиморасчетов КАК НачисленияДляВзаиморасчетов
	|ГДЕ 
	|   НачисленияДляВзаиморасчетов.НачислениеУдержание ССЫЛКА ПланВидовРасчета.Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдержанияДляВзаиморасчетов.ФизическоеЛицо,
	|	УдержанияДляВзаиморасчетов.Сотрудник,
	|	УдержанияДляВзаиморасчетов.Подразделение,
	|	УдержанияДляВзаиморасчетов.НачислениеУдержание КАК Удержание,
	|	УдержанияДляВзаиморасчетов.Сумма
	|ПОМЕСТИТЬ ВТУдержания
	|ИЗ
	|	&УдержанияДляВзаиморасчетов КАК УдержанияДляВзаиморасчетов
	|ГДЕ 
	|   УдержанияДляВзаиморасчетов.НачислениеУдержание ССЫЛКА ПланВидовРасчета.Удержания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзносыДляВзаиморасчетов.ФизическоеЛицо,
	|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
	|	ВзносыДляВзаиморасчетов.ВидЕСВ,
	|	ВзносыДляВзаиморасчетов.Налог,
	|	ВзносыДляВзаиморасчетов.Сумма
	|ПОМЕСТИТЬ ВТВзносы
	|ИЗ
	|	&ВзносыДляВзаиморасчетов КАК ВзносыДляВзаиморасчетов
	|ГДЕ 
	|   ВзносыДляВзаиморасчетов.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаВзносов.Взносы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛДляВзаиморасчетов.ФизическоеЛицо,
	|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
	|	НДФЛДляВзаиморасчетов.ДоходНДФЛ,
	|	НДФЛДляВзаиморасчетов.Налог КАК Сумма
	|ПОМЕСТИТЬ ВТНДФЛ
	|ИЗ
	|	&НДФЛДляВзаиморасчетов КАК НДФЛДляВзаиморасчетов
	|";
	
	Запрос.Выполнить();
	
	Запрос.Текст  =
	"ВЫБРАТЬ
	|	НачисленияДляВзаиморасчетов.ФизическоеЛицо,
	|	НачисленияДляВзаиморасчетов.Сотрудник,
	|	НачисленияДляВзаиморасчетов.Подразделение,
	|	НачисленияДляВзаиморасчетов.Начисление,
	|	Начисления.СчетУчета,
	|	НачисленияДляВзаиморасчетов.Сумма
	|ПОМЕСТИТЬ ВТНачисленияСчетУчета
	|ИЗ
	|	ВТНачисления КАК НачисленияДляВзаиморасчетов
	|   ЛЕВОЕ СОЕДИНЕНИЕ
	|   ПланВидовРасчета.Начисления КАК Начисления
	|   ПО НачисленияДляВзаиморасчетов.Начисление = Начисления.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдержанияДляВзаиморасчетов.ФизическоеЛицо,
	|	УдержанияДляВзаиморасчетов.Сотрудник,
	|	УдержанияДляВзаиморасчетов.Подразделение,
	|	УдержанияДляВзаиморасчетов.Удержание,
	|	ЕСТЬNULL(СпособыОтражения.СчетДт, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетУчета,
	|	УдержанияДляВзаиморасчетов.Сумма
	|ПОМЕСТИТЬ ВТУдержанияСчетУчета
	|ИЗ
	|	ВТУдержания КАК УдержанияДляВзаиморасчетов
	|   ЛЕВОЕ СОЕДИНЕНИЕ
	|   ПланВидовРасчета.Удержания КАК Удержания
	|   ПО УдержанияДляВзаиморасчетов.Удержание = Удержания.Ссылка
	|   ЛЕВОЕ СОЕДИНЕНИЕ 
	|   Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК СпособыОтражения
	|   ПО Удержания.СпособОтраженияВБухучете = СпособыОтражения.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛДляВзаиморасчетов.ФизическоеЛицо,
	|	НДФЛДляВзаиморасчетов.Сотрудник,
	|	НДФЛДляВзаиморасчетов.Подразделение,
	|	НДФЛДляВзаиморасчетов.ДоходНДФЛ,
	|	ЕСТЬNULL(СпособыОтражения.СчетДт, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетУчета,
	|	НДФЛДляВзаиморасчетов.Сумма
	|ПОМЕСТИТЬ ВТНДФЛСчетУчета
	|ИЗ
	|	ВТНДФЛ КАК НДФЛДляВзаиморасчетов
	|   ЛЕВОЕ СОЕДИНЕНИЕ
	|   Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ
	|   ПО НДФЛДляВзаиморасчетов.ДоходНДФЛ = ВидыДоходовНДФЛ.Ссылка
	|   ЛЕВОЕ СОЕДИНЕНИЕ 
	|   Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК СпособыОтражения
	|   ПО ВидыДоходовНДФЛ.СпособОтраженияВРеглУчете = СпособыОтражения.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзносыДляВзаиморасчетов.ФизическоеЛицо,
	|	ВзносыДляВзаиморасчетов.Сотрудник,
	|	ВзносыДляВзаиморасчетов.Подразделение,
	|	ВзносыДляВзаиморасчетов.ВидЕСВ,
	|	ЕСТЬNULL(СпособыОтражения.СчетДт, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетУчета,
	|	ВзносыДляВзаиморасчетов.Сумма
	|ПОМЕСТИТЬ ВТВзносыСчетУчета
	|ИЗ
	|	ВТВзносы КАК ВзносыДляВзаиморасчетов
	|   ЛЕВОЕ СОЕДИНЕНИЕ
	|   РегистрСведений.ОтражениеВзносовВРеглУчете.СрезПоследних(&ПериодРегистрации) КАК ОтражениеВзносов
	|   ПО ВзносыДляВзаиморасчетов.Налог = ОтражениеВзносов.Налог
	|   ЛЕВОЕ СОЕДИНЕНИЕ 
	|   Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК СпособыОтражения
	|   ПО ОтражениеВзносов.СпособОтраженияВРеглУчете = СпособыОтражения.Ссылка
	|";
	
	Запрос.Выполнить();
	
	Если Истина Тогда
		//Учет взаиморасчетов в разрезе только физических лиц
		Запрос.Текст  =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления) КАК КодОперации,
		|	Начисления.ФизическоеЛицо,
		|	Начисления.СчетУчета,
		|	СУММА(Начисления.Сумма) КАК СуммаВзаиморасчетов
		|ИЗ
		|	ВТНачисленияСчетУчета КАК Начисления
		|СГРУППИРОВАТЬ ПО
		|	ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Начисления),
		|	Начисления.ФизическоеЛицо,
		|	Начисления.СчетУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	1 КАК Порядок,
		|	ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Удержания) КАК КодОперации,
		|	Удержания.ФизическоеЛицо,
		|	Удержания.Удержание КАК ВидУдержания,
		|	Удержания.СчетУчета,
		|	СУММА(Удержания.Сумма)  КАК СуммаВзаиморасчетов
		|ИЗ
		|	ВТУдержанияСчетУчета КАК Удержания
		|СГРУППИРОВАТЬ ПО
		|	ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Удержания),
		|	Удержания.ФизическоеЛицо,
		|	Удержания.Удержание,
		|	Удержания.СчетУчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2 КАК Порядок,
		|	ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Взносы) КАК КодОперации,
		|	Взносы.ФизическоеЛицо,
		|	Взносы.ВидЕСВ,
		|	Взносы.СчетУчета,
		|	СУММА(Взносы.Сумма) КАК СуммаВзаиморасчетов
		|ИЗ
		|	ВТВзносыСчетУчета КАК Взносы
		|СГРУППИРОВАТЬ ПО
		|	ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Взносы),
		|	Взносы.ФизическоеЛицо,
		|	Взносы.ВидЕСВ,
		|	Взносы.СчетУчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3 КАК Порядок,
		|	ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.НДФЛ) КАК КодОперации,
		|	НДФЛ.ФизическоеЛицо,
		|	НДФЛ.ДоходНДФЛ,
		|	НДФЛ.СчетУчета,
		|	СУММА(НДФЛ.Сумма) КАК СуммаВзаиморасчетов
		|ИЗ
		|	ВТНДФЛСчетУчета КАК НДФЛ
		|СГРУППИРОВАТЬ ПО
		|	ЗНАЧЕНИЕ(Перечисление.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.НДФЛ),
		|	НДФЛ.ФизическоеЛицо,
		|	НДФЛ.ДоходНДФЛ,
		|	НДФЛ.СчетУчета
		|
		|УПОРЯДОЧИТЬ ПО
		|   Порядок, ВидУдержания
		|";
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		ТаблицаНачислений = РезультатЗапроса[0].Выгрузить();
		ТаблицаУдержаний = РезультатЗапроса[1].Выгрузить();
		
	Иначе
	КонецЕсли;	
	
	ТаблицаВзаиморасчетыССотрудниками = Движения.ВзаиморасчетыССотрудниками.Выгрузить();
	ТаблицаВзаиморасчетыССотрудниками.Колонки.Добавить("ВидУдержания");
	
	Для Каждого СтрокаТаблицы Из ТаблицаНачислений Цикл
		
		Если СтрокаТаблицы.СуммаВзаиморасчетов = 0 Тогда
			Продолжить;
		КонецЕсли;	
			
		НоваяСтрока = Движения.ВзаиморасчетыССотрудниками.ДобавитьПриход();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ПериодВзаиморасчетов = ПериодРегистрации;
		НоваяСтрока.Период = ПериодРегистрации;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТаблицаУдержаний Цикл
		
		
		СуммаУдержаний = СтрокаТаблицы.СуммаВзаиморасчетов;
		
		Отбор = Новый Структура();
		
		//Первый круг - поиск по совпадению счета
		Отбор.Вставить("ФизическоеЛицо", СтрокаТаблицы.ФизическоеЛицо);
		Отбор.Вставить("СчетУчета", СтрокаТаблицы.СчетУчета);
		
		РаспределитьУдержанияПоСчетамУчета(ТаблицаВзаиморасчетыССотрудниками, Организация, ПериодРегистрации, СтрокаТаблицы, ТаблицаНачислений, Отбор);
		
		Если СтрокаТаблицы.СуммаВзаиморасчетов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		//Второй круг - поиск по счету 661
		Отбор.Очистить();
		Отбор.Вставить("ФизическоеЛицо", СтрокаТаблицы.ФизическоеЛицо);
		Отбор.Вставить("СчетУчета", Планысчетов.Хозрасчетный.РасчетыПоЗаработнойПлате);
		
		РаспределитьУдержанияПоСчетамУчета(ТаблицаВзаиморасчетыССотрудниками, Организация, ПериодРегистрации, СтрокаТаблицы, ТаблицаНачислений, Отбор);
		
		Если СтрокаТаблицы.СуммаВзаиморасчетов = 0 Тогда
			Продолжить;
		КонецЕсли;

		//Третий круг - поиск по счету 663
		Отбор.Очистить();
		Отбор.Вставить("ФизическоеЛицо", СтрокаТаблицы.ФизическоеЛицо);
		Отбор.Вставить("СчетУчета", Планысчетов.Хозрасчетный.РасчетыПоДругимВыплатам);
		
		РаспределитьУдержанияПоСчетамУчета(ТаблицаВзаиморасчетыССотрудниками, Организация, ПериодРегистрации, СтрокаТаблицы, ТаблицаНачислений, Отбор);
		
		Если СтрокаТаблицы.СуммаВзаиморасчетов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		//Четвертый круг - любой доступный счет
		Отбор.Очистить();
		Отбор.Вставить("ФизическоеЛицо", СтрокаТаблицы.ФизическоеЛицо);
		
		РаспределитьУдержанияПоСчетамУчета(ТаблицаВзаиморасчетыССотрудниками, Организация, ПериодРегистрации, СтрокаТаблицы, ТаблицаНачислений, Отбор);
		
		Если СтрокаТаблицы.СуммаВзаиморасчетов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		//Пятый круг - ничего не ищем, все удерживаем по 661

		НоваяСтрока = ТаблицаВзаиморасчетыССотрудниками.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
		НоваяСтрока.СчетУчета = Планысчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ПериодВзаиморасчетов = ПериодРегистрации;
		НоваяСтрока.Период = ПериодРегистрации;
		НоваяСтрока.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаВзаиморасчетов;
		
		
	КонецЦикла;
	
	//Движения по ВзаиморасчетыПоУдержаниям
	Для Каждого СтрокаВзаиморасчеты Из ТаблицаВзаиморасчетыССотрудниками Цикл
		НоваяСтрока = Движения.ВзаиморасчетыПоУдержаниям.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаВзаиморасчеты);
		НоваяСтрока.Активность = Истина;
	КонецЦикла;	
	
	//Движения по ВзаиморасчетыССотрудниками сводно
	ТаблицаВзаиморасчетыССотрудниками.Свернуть("Период, Организация, ФизическоеЛицо, Сотрудник, СчетУчета, ПериодВзаиморасчетов, КодОперации","СуммаВзаиморасчетов");
	Для Каждого СтрокаВзаиморасчеты Из ТаблицаВзаиморасчетыССотрудниками Цикл
		НоваяСтрока = Движения.ВзаиморасчетыССотрудниками.ДобавитьРасход();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаВзаиморасчеты);
	КонецЦикла;	
	
	Движения.ВзаиморасчетыПоУдержаниям.Записывать	= Истина;
	Движения.ВзаиморасчетыССотрудниками.Записывать	= Истина;

КонецПроцедуры

Процедура ЗарегистрироватьВыплаченнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, Зарплата) Экспорт
	
	//////Для Каждого СтрокаЗарплаты Из Зарплата Цикл
	//////	
	//////	Если СтрокаЗарплаты.КВыплате <> 0 Тогда
	//////		
	//////		ДобавитьСтрокуВыплатыВЗарплатаКВыплате(
	//////			Движения, 
	//////			ВидДвиженияНакопления.Расход,
	//////			Организация, 
	//////			ПериодРегистрации, 
	//////			СтрокаЗарплаты, 
	//////			СтрокаЗарплаты.Подразделение,
	//////			Перечисления.ХарактерВыплатыЗарплаты.Зарплата, 
	//////			СтрокаЗарплаты.КВыплате);					
	//////		
	//////		ДобавитьСтрокуВыплатыВВзаиморасчетыССотрудниками(
	//////			Движения, 
	//////			ВидДвиженияНакопления.Расход, 
	//////			Организация, 
	//////			ПериодРегистрации, 
	//////			СтрокаЗарплаты, 
	//////			СтрокаЗарплаты.Подразделение,
	//////			Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаЗарплаты,
	//////			СтрокаЗарплаты.КВыплате);			
	//////		
	//////	КонецЕсли;	
	//////	
	//////КонецЦикла;
	
КонецПроцедуры

Процедура РаспределитьУдержанияПоСчетамУчета(ТаблицаВзаиморасчетыССотрудниками, Организация, ПериодРегистрации, СтрокаТаблицы, ТаблицаНачислений, Отбор)
	
	Строки = ТаблицаНачислений.НайтиСтроки(Отбор);
	Для Каждого СтрокаНачислений из Строки Цикл
		
		СуммаКСписанию = Макс(Мин(СтрокаТаблицы.СуммаВзаиморасчетов, СтрокаНачислений.СуммаВзаиморасчетов),0);
		
		Если СуммаКСписанию <> 0 Тогда
			НоваяСтрока = ТаблицаВзаиморасчетыССотрудниками.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицы);
			НоваяСтрока.СчетУчета = СтрокаНачислений.СчетУчета; 
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.ПериодВзаиморасчетов = ПериодРегистрации;
			НоваяСтрока.Период = ПериодРегистрации;
			НоваяСтрока.СуммаВзаиморасчетов = СуммаКСписанию; 
			
			СтрокаТаблицы.СуммаВзаиморасчетов = СтрокаТаблицы.СуммаВзаиморасчетов - СуммаКСписанию;
			СтрокаНачислений.СуммаВзаиморасчетов = СтрокаНачислений.СуммаВзаиморасчетов - СуммаКСписанию;
			
		КонецЕсли;
		
		Если СтрокаТаблицы.СуммаВзаиморасчетов = 0 Тогда
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	


//////////////////////////////////////////////////////////////////
/// Оплата ведомостей                        

Процедура ЗарегистрироватьНевыплатуПоВедомости(Движения, Отказ, Ведомость, ФизическиеЛица) Экспорт
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;		
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ведомость", Ведомость);
	Запрос.УстановитьПараметр("Физлица", ФизическиеЛица);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыССотрудниками.Период,
	|	ВзаиморасчетыССотрудниками.ВидДвижения,
	|	ВзаиморасчетыССотрудниками.Организация,
	|	ВзаиморасчетыССотрудниками.ФизическоеЛицо,
	|	ВзаиморасчетыССотрудниками.Сотрудник,
	|	ВзаиморасчетыССотрудниками.Подразделение,
	|	ВзаиморасчетыССотрудниками.СуммаВзаиморасчетов,
	|	ВзаиморасчетыССотрудниками.ВидВзаиморасчетов,
	|	ВзаиморасчетыССотрудниками.ГруппаНачисленияУдержанияВыплаты
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыССотрудниками
	|ГДЕ
	|	ВзаиморасчетыССотрудниками.Регистратор = &Ведомость
	|	И ВзаиморасчетыССотрудниками.ФизическоеЛицо В(&Физлица)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗарплатаКВыплате.Период,
	|	ЗарплатаКВыплате.ВидДвижения,
	|	ЗарплатаКВыплате.Организация,
	|	ЗарплатаКВыплате.ФизическоеЛицо,
	|	ЗарплатаКВыплате.Сотрудник,
	|	ЗарплатаКВыплате.Подразделение,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплате.ХарактерВыплаты,
	|	ЗарплатаКВыплате.СуммаКВыплате
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.Регистратор = &Ведомость
	|	И ЗарплатаКВыплате.ФизическоеЛицо В(&Физлица)";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаВзаиморасчетов	= РезультатыЗапроса[0].Выбрать();
	ВыборкаЗарплатаКВыплате	= РезультатыЗапроса[1].Выбрать();
	
	Движения.ВзаиморасчетыССотрудниками.Очистить();
	Пока ВыборкаВзаиморасчетов.Следующий() Цикл
		НоваяЗапись = Движения.ВзаиморасчетыССотрудниками.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаВзаиморасчетов);
		НоваяЗапись.СуммаВзаиморасчетов = - ВыборкаВзаиморасчетов.СуммаВзаиморасчетов;
	КонецЦикла;	
	
	Движения.ЗарплатаКВыплате.Очистить();
	Пока ВыборкаЗарплатаКВыплате.Следующий() Цикл
		НоваяЗапись = Движения.ЗарплатаКВыплате.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаЗарплатаКВыплате);
		НоваяЗапись.СуммаКВыплате = - ВыборкаЗарплатаКВыплате.СуммаКВыплате;
	КонецЦикла;	
	
	Движения.ВзаиморасчетыССотрудниками.Записывать	= Истина;
	Движения.ЗарплатаКВыплате.Записывать			= Истина;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////
/// Зарплата к выплате

Функция ЗарплатаКВыплате(СпособВыплаты, ПараметрыЗаполнения, Регистратор) Экспорт
	
	ТаблицаЗарплат = Новый Структура();
	ТаблицаЗарплат.Вставить("Зарплата", Неопределено);
	ТаблицаЗарплат.Вставить("НДФЛ", Неопределено);
	ТаблицаЗарплат.Вставить("Взносы", Неопределено);
	ТаблицаЗарплат.Вставить("ВзносыФОТ", Неопределено);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Отбор сотрудников подразделения организации
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 					= ПараметрыЗаполнения.Организация;
	ПараметрыПолученияСотрудниковОрганизаций.Подразделение 					= ПараметрыЗаполнения.Подразделение;
	ПараметрыПолученияСотрудниковОрганизаций.ОтбиратьПоГоловнойОрганизации 	= Ложь;
	ПараметрыПолученияСотрудниковОрганизаций.ОтбиратьПоПодразделениюОсновногоМестаРаботы 	= Истина;
	Если СпособВыплаты = Справочники.ВидыВыплат.Аванс  Тогда
		//Здесь заполняется плановыми суммами, потому надо ограничть выборку сотрудников теме, кто работает в месяце заполнения
		ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода 		= НачалоМесяца(ПараметрыЗаполнения.ПериодРегистрации);
	Иначе	
		ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода 		= '00010101';
	КонецЕсли;	
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода	= КонецМесяца(ПараметрыЗаполнения.ПериодРегистрации);
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	// Отбор по месту выплаты зарплаты
	ЗапросПоМестуВыплаты = Новый Запрос;
	ЗапросПоМестуВыплаты.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ПараметрыЗаполнения.МестоВыплаты.Вид = Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект И ЗначениеЗаполнено(ПараметрыЗаполнения.МестоВыплаты.Значение) Тогда
		
		ОписательВременныхТаблиц = 
			ЗарплатныеПроекты.ОписательВременныхТаблицДляСоздатьПоВременнойТаблицеВТЛицевыеСчетаСотрудников(МенеджерВременныхТаблиц, "ВТСотрудникиОрганизации");
			
		ЗарплатныеПроекты.СоздатьПоВременнойТаблицеВТЛицевыеСчетаСотрудников(ОписательВременныхТаблиц,
				Истина, ПараметрыЗаполнения.Организация, КонецМесяца(ПараметрыЗаполнения.ПериодРегистрации), ПараметрыЗаполнения.МестоВыплаты.Значение);
		
		ЗапросПоМестуВыплаты.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудникиПоМестуВыплаты
		|ИЗ
		|	ВТСотрудникиОрганизации КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЛицевыеСчетаСотрудников КАК ЛицевыеСчетаСотрудников
		|		ПО Сотрудники.Сотрудник = ЛицевыеСчетаСотрудников.Сотрудник
		|			И (ЛицевыеСчетаСотрудников.НомерЛицевогоСчета ЕСТЬ НЕ NULL )";
		
	ИначеЕсли ПараметрыЗаполнения.МестоВыплаты.Вид = Перечисления.ВидыМестВыплатыЗарплаты.Касса Тогда
		
		ОписательВременныхТаблиц = 
			ЗарплатныеПроекты.ОписательВременныхТаблицДляСоздатьПоВременнойТаблицеВТЛицевыеСчетаСотрудников(МенеджерВременныхТаблиц, "ВТСотрудникиОрганизации");
			
		ЗарплатныеПроекты.СоздатьПоВременнойТаблицеВТЛицевыеСчетаСотрудников(ОписательВременныхТаблиц,
				Истина, ПараметрыЗаполнения.Организация, КонецМесяца(ПараметрыЗаполнения.ПериодРегистрации), ПараметрыЗаполнения.МестоВыплаты.Значение);
		
		ЗапросПоМестуВыплаты.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудникиПоМестуВыплаты
		|ИЗ
		|	ВТСотрудникиОрганизации КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЛицевыеСчетаСотрудников КАК ЛицевыеСчетаСотрудников
		|		ПО Сотрудники.Сотрудник = ЛицевыеСчетаСотрудников.Сотрудник
		|			И (ЛицевыеСчетаСотрудников.НомерЛицевогоСчета ЕСТЬ НЕ NULL )
		|ГДЕ
		|	ЛицевыеСчетаСотрудников.ФизическоеЛицо ЕСТЬ NULL
		|	ИЛИ ЛицевыеСчетаСотрудников.ЗарплатныйПроект = ЗНАЧЕНИЕ(Справочник.ЗарплатныеПроекты.ПустаяСсылка)";	
		
	Иначе
		
		ЗапросПоМестуВыплаты.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Сотрудник,
		|	Сотрудники.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТСотрудникиПоМестуВыплаты
		|ИЗ
		|	ВТСотрудникиОрганизации КАК Сотрудники";
		
	КонецЕсли;
	
	ЗапросПоМестуВыплаты.Выполнить();
	
	// Сбор невыплаченных сумм
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("Организация", ПараметрыЗаполнения.Организация);
	Запрос.УстановитьПараметр("ПериодВзаиморасчетов", ПараметрыЗаполнения.ПериодРегистрации);
	Запрос.УстановитьПараметр("Дата", ПараметрыЗаполнения.ДатаДокумента);
	Запрос.УстановитьПараметр("ПоВсемПодразделениям", НЕ ЗначениеЗаполнено(ПараметрыЗаполнения.Подразделение));
	Запрос.УстановитьПараметр("Подразделение", ПараметрыЗаполнения.Подразделение);
	Запрос.УстановитьПараметр("Счет661", ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате);
	Запрос.УстановитьПараметр("Счет662", ПланыСчетов.Хозрасчетный.РасчетыПоДепонентам);
	Запрос.УстановитьПараметр("СпособВыплаты", СпособВыплаты);
	
	ЗапросЗарплата  = Ложь;
	ЗапросНДФЛ 		= Ложь;
	ЗапросВзносы	= Ложь;
	
	
	Если СпособВыплаты = Справочники.ВидыВыплат.Очередная 
	или СпособВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолгов  Тогда
		ЗапросЗарплатаКВыплатеОчередная(Запрос, СпособВыплаты, ПараметрыЗаполнения);
		ЗапросЗарплата  = Истина;
	ИначеЕсли СпособВыплаты = Справочники.ВидыВыплат.Аванс  Тогда
		ЗапросЗарплатаКВыплатеАванс(Запрос, СпособВыплаты, ПараметрыЗаполнения);
		ЗапросЗарплата  = Истина;
    ИначеЕсли СпособВыплаты = Справочники.ВидыВыплат.АвансПредварительныйРасчет  Тогда
		ЗапросЗарплатаКВыплатеАвансПредварительныйРасчет(Запрос, СпособВыплаты, ПараметрыЗаполнения);
        ЗапросЗарплата  = Истина;
	ИначеЕсли СпособВыплаты = Справочники.ВидыВыплат.Депоненты  Тогда
		ЗапросЗарплатаКВыплатеДепоненты (Запрос, СпособВыплаты, ПараметрыЗаполнения);
        ЗапросЗарплата  = Истина;	
	ИначеЕсли НЕ СпособВыплаты.Предопределенный Тогда
		ЗапросЗарплатаКВыплатеПрочие(Запрос, СпособВыплаты, ПараметрыЗаполнения);
        ЗапросЗарплата  = Истина;
	КонецЕсли;

		
	//ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.ПогашениеДолгов  Тогда
	//	АвтозаполнениеОсновнаяВыплата();
	//ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.Больничные  Тогда
	//	АвтозаполнениеБольничные();	
	//ИначеЕсли ВидВыплаты = Справочники.ВидыВыплат.Депоненты  Тогда
	//	АвтозаполнениеДепонированная()	
	
	//Запрос.Текст =
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	ЗарплатаКВыплатеОстатки.Сотрудник,
	//|	ЗарплатаКВыплатеОстатки.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	//|	ЗарплатаКВыплатеОстатки.Подразделение,
	//|	СУММА(ЗарплатаКВыплатеОстатки.Начислено) КАК КВыплате
	//|ИЗ
	//|	(ВЫБРАТЬ
	//|		ЗарплатаКВыплатеОстатки.Сотрудник КАК Сотрудник,
	//|		ЗарплатаКВыплатеОстатки.Подразделение КАК Подразделение,
	//|		ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток КАК Начислено
	//|	ИЗ
	//|		РегистрНакопления.ЗарплатаКВыплате.Остатки(
	//|				&ПериодВзаиморасчетов,
	//|				Организация = &Организация
	//|					И (&ПоВсемПодразделениям
	//|						ИЛИ Подразделение В ИЕРАРХИИ (&Подразделение))
	//|					И Сотрудник В
	//|						(ВЫБРАТЬ
	//|							Сотрудники.Сотрудник
	//|						ИЗ
	//|							ВТСотрудникиПоМестуВыплаты КАК Сотрудники)) КАК ЗарплатаКВыплатеОстатки
	//|	
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|	
	//|	ВЫБРАТЬ
	//|		ЗарплатаКВыплате.Сотрудник,
	//|		ЗарплатаКВыплате.Подразделение,
	//|		ВЫБОР
	//|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	//|				ТОГДА -ЗарплатаКВыплате.СуммаКВыплате
	//|			ИНАЧЕ ЗарплатаКВыплате.СуммаКВыплате
	//|		КОНЕЦ
	//|	ИЗ
	//|		РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	//|	ГДЕ
	//|		ЗарплатаКВыплате.Регистратор = &Регистратор
	//|		И ЗарплатаКВыплате.Организация = &Организация
	//|		И (&ПоВсемПодразделениям
	//|				ИЛИ ЗарплатаКВыплате.Подразделение В ИЕРАРХИИ (&Подразделение))
	//|		И ЗарплатаКВыплате.Сотрудник В
	//|				(ВЫБРАТЬ
	//|					Сотрудники.Сотрудник
	//|				ИЗ
	//|					ВТСотрудникиПоМестуВыплаты КАК Сотрудники)) КАК ЗарплатаКВыплатеОстатки
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ЗарплатаКВыплатеОстатки.Сотрудник,
	//|	ЗарплатаКВыплатеОстатки.Подразделение,
	//|	ЗарплатаКВыплатеОстатки.Сотрудник.ФизическоеЛицо
	//|
	//|ИМЕЮЩИЕ
	//|	СУММА(ЗарплатаКВыплатеОстатки.Начислено) <> 0";
	//
	
	Если ЗапросЗарплата Тогда
		ЗарплатаКВыплате = Запрос.Выполнить().Выгрузить();
		ТаблицаЗарплат.Зарплата = ЗарплатаКВыплате;
	КонецЕсли;	
	
	Если СпособВыплаты = Справочники.ВидыВыплат.Очередная 
	или СпособВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолгов
	или СпособВыплаты = Справочники.ВидыВыплат.НДФЛБезВыплатыЗарплаты Тогда
		УчетНДФЛ.ЗапросНДФЛОчередная(Запрос, СпособВыплаты, ПараметрыЗаполнения);
		ЗапросНДФЛ  = Истина;
	КонецЕсли;
	
	Если СпособВыплаты = Справочники.ВидыВыплат.НДФЛКонтрагентам Тогда
		УчетНДФЛ.ЗапросНДФЛКонтрагентам(Запрос, СпособВыплаты, ПараметрыЗаполнения);
		ЗапросНДФЛ  = Истина;
	КонецЕсли;

	Если ЗапросНДФЛ Тогда
		ТаблицаЗарплат.НДФЛ = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Если СпособВыплаты = Справочники.ВидыВыплат.ОчереднаяВзносы 
	или СпособВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолговВзносы  Тогда
		УчетСтраховыхВзносов.ЗапросВзносыОчереднаяВзносы(Запрос, СпособВыплаты, ПараметрыЗаполнения);
		ЗапросВзносы	= Истина;
	КонецЕсли;

	Если ЗапросВзносы Тогда
		РезультатВзносы = Запрос.ВыполнитьПакет();
		ТаблицаЗарплат.Взносы = РезультатВзносы[1].Выгрузить();
		ТаблицаЗарплат.ВзносыФОТ = РезультатВзносы[2].Выгрузить();
	КонецЕсли;


	Возврат ТаблицаЗарплат;

КонецФункции

Процедура РассчитатьЗарплату(Зарплата, ДанныеДляРасчета) Экспорт
	
	// Округление результатов
	Если ЗначениеЗаполнено(ДанныеДляРасчета.Округление) Тогда
		ТочностьДо = ДанныеДляРасчета.Округление.Точность;
	Иначе
		ТочностьДо = 0.01;
	КонецЕсли;
	
	Если ТочностьДо <= 0 Тогда
		ТочностьДо = 0.01
	КонецЕсли;	
	
	Для Каждого СтрокаЗарплаты Из Зарплата Цикл
		КВыплате = СтрокаЗарплаты.КВыплате;
		СтрокаЗарплаты.КВыплате = Цел(СтрокаЗарплаты.КВыплате / ТочностьДо) * ТочностьДо;
		СтрокаЗарплаты.СуммаОкругления = КВыплате - СтрокаЗарплаты.КВыплате;
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьНалоги(ТаблицаЗарплат, ДанныеДляЗаполнения, ДанныеДляРасчета) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	//Определим вид "начисления"
	Если ДанныеДляРасчета.СпособВыплаты.Начисления.Количество() > 0 Тогда
		//Вариант 1 - вид начисления указан у способа выплаты
		Начисление = ДанныеДляРасчета.СпособВыплаты.Начисления[0].Начисление;
	ИначеЕсли ДанныеДляРасчета.СпособВыплаты = Справочники.ВидыВыплат.Аванс
		 или ДанныеДляРасчета.СпособВыплаты = Справочники.ВидыВыплат.АвансПредварительныйРасчет Тогда
		//Вариант 2 - аванс всегда считаем как основной оклад
		Начисление = ПланыВидовРасчета.Начисления.ОкладПоДням;	
	Иначе
		//Вариант 3 - ничего не понятно, берем по умолчанию
		Начисление = ПланыВидовРасчета.Начисления.ОкладПоДням;
	КонецЕсли;
	
	//Сформируем таблицу начислений
	Запрос.УстановитьПараметр("Зарплата", ТаблицаЗарплат.Зарплата);
	Запрос.УстановитьПараметр("Начисление", Начисление);
	Запрос.УстановитьПараметр("Подразделение", ДанныеДляЗаполнения.Подразделение);
	Запрос.УстановитьПараметр("ПериодВзаиморасчетов", ДанныеДляЗаполнения.ПериодРегистрации);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Зарплата.ФизическоеЛицо,
		|	Зарплата.Сотрудник,
		|	Зарплата.КВыплате,
		|	Зарплата.СуммаГрязными,
		|	Зарплата.СчетУчета,
		|	Зарплата.ПериодВзаиморасчетов
		|ПОМЕСТИТЬ ВТЗарплата
		|ИЗ
		|	&Зарплата КАК Зарплата
		|;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Зарплата.ФизическоеЛицо,
		|	Зарплата.Сотрудник,
		|	Зарплата.СуммаГрязными КАК Результат,
		|	НАЧАЛОПЕРИОДА(Зарплата.ПериодВзаиморасчетов, МЕСЯЦ) КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(Зарплата.ПериодВзаиморасчетов, МЕСЯЦ)  КАК ДатаОкончания,
		|	&Начисление КАК ВидРасчета,
		|	ЛОЖЬ КАК Авторасчет,
		|	&Подразделение КАК Подразделение,
		|	0 КАК ОтработаноДней,
		|	0 КАК ОтработаноЧасов,
		|	0 КАК НормаДней,
		|	0 КАК НормаЧасов
		|ИЗ
		|	ВТЗарплата КАК Зарплата";
		
	ТаблицаЗарплат.Начисления = Запрос.Выполнить().Выгрузить();	
	
	//Выполним расчет налогов
	РасчетЗарплатыБазовый.РассчитатьДокументВедомостьНаВыплатуЗарплаты(ТаблицаЗарплат, ДанныеДляЗаполнения, ДанныеДляРасчета);
	
	//Свернем полученные таблицы под формат ведомости на выплату, рассчитаем сумму к выплате
	Запрос.УстановитьПараметр("ЗарплатаРасчетная", ТаблицаЗарплат.Зарплата);
	Запрос.УстановитьПараметр("Взносы", ТаблицаЗарплат.Взносы);
	Запрос.УстановитьПараметр("ВзносыФОТ", ТаблицаЗарплат.ВзносыФОТ);
	Запрос.УстановитьПараметр("НДФЛ", ТаблицаЗарплат.НДФЛ);
	Запрос.УстановитьПараметр("ОтОбратного", ДанныеДляРасчета.СпособВыплаты.РасчетОтОбратного);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗарплатаРасчетная.ФизическоеЛицо,
		|	ЗарплатаРасчетная.Сотрудник,
		|	ЗарплатаРасчетная.КВыплате,
		|	ЗарплатаРасчетная.СуммаГрязными,
		|	ЗарплатаРасчетная.СчетУчета,
		|	ЗарплатаРасчетная.ПериодВзаиморасчетов
		|ПОМЕСТИТЬ ВТЗарплатаРасчетная
		|ИЗ
		|	&ЗарплатаРасчетная КАК ЗарплатаРасчетная
		|;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Взносы.ФизическоеЛицо,
		|	Взносы.Налог,
		|	Взносы.СтатьяНалоговойДекларации,
		|	Взносы.Результат
		|ПОМЕСТИТЬ ВТВзносы
		|ИЗ
		|	&Взносы КАК Взносы
		|;
	    |
	    |////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВзносыФОТ.ФизическоеЛицо,
		|	ВзносыФОТ.Налог,
		|	ВзносыФОТ.СтатьяНалоговойДекларации,
		|	ВзносыФОТ.Результат
		|ПОМЕСТИТЬ ВТВзносыФОТ
		|ИЗ
		|	&ВзносыФОТ КАК ВзносыФОТ
		|;
	    |
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДФЛ.ФизическоеЛицо,
		|	НДФЛ.ДоходНДФЛ,
		|	НДФЛ.НалоговыйПериод,
		|	НДФЛ.Налог,
		|	НДФЛ.Доход
		|ПОМЕСТИТЬ ВТНДФЛ
		|ИЗ
		|	&НДФЛ КАК НДФЛ
		|";
		
	Запрос.Выполнить();	
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Зарплата.ФизическоеЛицо,
		|	Зарплата.Сотрудник,
		|	ВЫБОР
		|    КОГДА &ОтОбратного 
		|    ТОГДА Зарплата.КВыплате
		|	 ИНАЧЕ Зарплата.СуммаГрязными 
		|	КОНЕЦ КАК КВыплате,
		|	0 КАК СуммаОкругления,
		|	Зарплата.СуммаГрязными,
		|	Зарплата.СчетУчета,
		|	Зарплата.ПериодВзаиморасчетов
		|ИЗ
		|	ВТЗарплатаРасчетная КАК Зарплата
		|;
	    |
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Взносы.Налог,
		|	Взносы.СтатьяНалоговойДекларации,
		|	&ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
		|	СУММА(Взносы.Результат) КАК Сумма
		|ИЗ
		|	ВТВзносы КАК Взносы
		|СГРУППИРОВАТЬ ПО
		|	Взносы.Налог,
		|	Взносы.СтатьяНалоговойДекларации,
		|	&ПериодВзаиморасчетов
		|;
	    |
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВзносыФОТ.Налог,
		|	ВзносыФОТ.СтатьяНалоговойДекларации,
		|	&ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
		|	СУММА(ВзносыФОТ.Результат) КАК Сумма
		|ИЗ
		|	ВТВзносыФОТ КАК ВзносыФОТ
		|СГРУППИРОВАТЬ ПО
		|	ВзносыФОТ.Налог,
		|	ВзносыФОТ.СтатьяНалоговойДекларации,
		|	&ПериодВзаиморасчетов
		|;
	    |
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДФЛ.ФизическоеЛицо КАК Контрагент,
		|	НДФЛ.ДоходНДФЛ,
		|	&ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
		|	НДФЛ.НалоговыйПериод,
		|	НДФЛ.Налог,
		|	НДФЛ.Доход
		|ИЗ
		|	ВТНДФЛ КАК НДФЛ
		|;
	    |
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	Взносы.ФизическоеЛицо,
		|	СУММА(Взносы.Результат) КАК СуммаВзносов
		|ИЗ ВТВзносы КАК Взносы
		|СГРУППИРОВАТЬ ПО
		|  	Взносы.ФизическоеЛицо
		|;
	    |
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	НДФЛ.ФизическоеЛицо,
		|	СУММА(НДФЛ.Налог) КАК СуммаНДФЛ
		|ИЗ ВТНДФЛ КАК НДФЛ
		|СГРУППИРОВАТЬ ПО
		|  	НДФЛ.ФизическоеЛицо
		|";
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ТаблицаЗарплат.Взносы = РезультатыЗапроса[1].Выгрузить();
		ТаблицаЗарплат.ВзносыФОТ = РезультатыЗапроса[2].Выгрузить();
		ТаблицаЗарплат.НДФЛ = РезультатыЗапроса[3].Выгрузить();
		
		Зарплата = РезультатыЗапроса[0].Выгрузить();
		Взносы   = РезультатыЗапроса[4].Выгрузить();
		НДФЛ     = РезультатыЗапроса[5].Выгрузить();
		
		Если ДанныеДляРасчета.СпособВыплаты.РасчетОтОбратного Тогда
			ТаблицаЗарплат.Зарплата = Зарплата;
		Иначе
			ПоляРазрез = Новый Массив();
			ПоляРазрез.Добавить("Сотрудник");
			ПоляСвязи = Новый Структура();
			ПоляСвязи.Вставить("ФизическоеЛицо","ФизическоеЛицо");
			
			ТаблицаРаспределенияВзносы = РаспределитьТаблицуПропорциональноТаблицеКоэффициентов(Взносы, "СуммаВзносов", Зарплата, "КВыплате", ПоляРазрез, ПоляСвязи);
			ТаблицаРаспределенияНДФЛ   = РаспределитьТаблицуПропорциональноТаблицеКоэффициентов(НДФЛ, "СуммаНДФЛ", Зарплата, "КВыплате", ПоляРазрез, ПоляСвязи);
			
			Для Каждого СтрокаЗарплата из Зарплата Цикл
				Отбор = Новый Структура();
				Отбор.Вставить("Сотрудник", СтрокаЗарплата.Сотрудник);
				
				СтрокиВзносы = ТаблицаРаспределенияВзносы.НайтиСтроки(Отбор);
				Если СтрокиВзносы <> Неопределено Тогда
					Для Каждого СтрокаВзносы из СтрокиВзносы Цикл
						СтрокаЗарплата.КВыплате = СтрокаЗарплата.КВыплате - СтрокаВзносы.СуммаВзносов;
					КонецЦикла;	
				КонецЕсли;	
				
				СтрокиНДФЛ = ТаблицаРаспределенияНДФЛ.НайтиСтроки(Отбор);
				Если СтрокиНДФЛ <> Неопределено Тогда
					Для Каждого СтрокаНДФЛ из СтрокиНДФЛ Цикл
						СтрокаЗарплата.КВыплате = СтрокаЗарплата.КВыплате - СтрокаНДФЛ.СуммаНДФЛ;
					КонецЦикла;	
				КонецЕсли;	
				
			КонецЦикла;	
			РассчитатьЗарплатуВМежрасчетныйПериод(Зарплата, ДанныеДляРасчета);
			ТаблицаЗарплат.Зарплата = Зарплата;
			
		КонецЕсли;	
	
КонецПроцедуры
	
Функция РаспределитьТаблицуПропорциональноТаблицеКоэффициентов(ИсходнаяТаблица, ИмяПоляСумма, ТаблицаКоэффициентов, ИмяПоляКоэффициент, ПоляРазрез, ПоляСвязи, Точность = 2) Экспорт
	
	//Итоговая таблица повторяет структуру исходной таблицы плюс колонки из таблицы коэффициентов, которые указаны как разрезы
	Результат = ИсходнаяТаблица.СкопироватьКолонки();
	Для Каждого ИмяКолонки из ПоляРазрез Цикл
		Колонка = ТаблицаКоэффициентов.Колонки.Найти(ИмяКолонки);
		Результат.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения, Колонка.Заголовок);
	КонецЦикла;	
	
	//Индексация таблицы коэффициентов для быстрого поиска
	Для Каждого Поле из ПоляСвязи Цикл
		ТаблицаКоэффициентов.Индексы.Добавить(Поле.Значение);
	КонецЦикла;
	
	Для Каждого СтрокаИсходнаяТаблица Из ИсходнаяТаблица Цикл
		//Отбор по структуре полей связи
		Отбор = Новый Структура();
		Для Каждого Поле из ПоляСвязи Цикл
			Отбор.Вставить(Поле.Значение, СтрокаИсходнаяТаблица[Поле.Ключ]);
		КонецЦикла;
		
		//Поиск в таблице коэффициентов
		СтрокиКоэффициентов = ТаблицаКоэффициентов.НайтиСтроки(Отбор);
		Если СтрокиКоэффициентов = Неопределено Тогда
			//Ничего не найдено, просто дублируем строку
			СтрокаРезультат = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультат,СтрокаИсходнаяТаблица);
			Продолжить;
		КонецЕсли;
		
		//Распределение по коэффициентам
		Коэффициенты = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиКоэффициентов,ИмяПоляКоэффициент);
		РезультатыРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(СтрокаИсходнаяТаблица[ИмяПоляСумма], Коэффициенты, Точность);
		
		Если РезультатыРаспределения = Неопределено Тогда
			//Не получилось
			СтрокаРезультат = Результат.Добавить();
			//Основные поля из исходной таблицы
			ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаИсходнаяТаблица);
			Продолжить;
		КонецЕсли;
		
		//Если строк коэффициентов нет - оставляем исходную строку
		Если СтрокиКоэффициентов.Количество() = 0 Тогда
			СтрокаРезультат = Результат.Добавить();
			//Основные поля из исходной таблицы
			ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаИсходнаяТаблица);
		КонецЕсли;	
		
		Индекс = 0;
		Для Каждого СтрокаКоэффициентов Из СтрокиКоэффициентов Цикл
			СтрокаРезультат = Результат.Добавить();
			//Основные поля из исходной таблицы
			ЗаполнитьЗначенияСвойств(СтрокаРезультат, СтрокаИсходнаяТаблица);
			//Поля разрезов из таблицы коэффициентов
			Для Каждого ИмяКолонки из ПоляРазрез Цикл
				СтрокаРезультат[ИмяКолонки] = СтрокаКоэффициентов[ИмяКолонки];
			КонецЦикла;
			//Поле суммы из результатов распределения
			СтрокаРезультат[ИмяПоляСумма] = РезультатыРаспределения[Индекс];
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЦикла;	
	
	Возврат Результат
	
КонецФункции	


Процедура ЗапросЗарплатаКВыплатеОчередная(Запрос, СпособВыплаты, ПараметрыЗаполнения)
	
	Если СпособВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолгов Тогда
		ФильтрПериод = "ПериодВзаиморасчетов <= &ПериодВзаиморасчетов";
	Иначе
		ФильтрПериод = "ПериодВзаиморасчетов = &ПериодВзаиморасчетов";
	КонецЕсли;	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыССотрудникамиОстатки.Сотрудник,
	|	ВзаиморасчетыССотрудникамиОстатки.ФизическоеЛицо,
	|	ВзаиморасчетыССотрудникамиОстатки.СчетУчета,
	|	ВзаиморасчетыССотрудникамиОстатки.ПериодВзаиморасчетов,
	|	ВзаиморасчетыССотрудникамиОстатки.СуммаВзаиморасчетовОстаток КАК КВыплате,
	|	0 КАК СуммаГрязными,
	|	0 КАК СуммаОкругления
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыССотрудниками.Остатки(
	|		&Дата,
	|		Организация = &Организация
	|		И "+ФильтрПериод+"
	|		И ФизическоеЛицо В
	|			(ВЫБРАТЬ
	|				Сотрудники.ФизическоеЛицо
	|			ИЗ
	|				ВТСотрудникиПоМестуВыплаты КАК Сотрудники)) КАК ВзаиморасчетыССотрудникамиОстатки
	|
	|";
	
	
	
КонецПроцедуры	

Процедура ЗапросЗарплатаКВыплатеАванс(Запрос, СпособВыплаты, ПараметрыЗаполнения)
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АвансыСотрудникам.Сотрудник,
	|	АвансыСотрудникам.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	&Счет661 КАК СчетУчета,
	|	&ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	АвансыСотрудникам.СуммаАванса КАК КВыплате,
	|	АвансыСотрудникам.СуммаАванса КАК СуммаГрязными,
	|	0 КАК СуммаОкругления
	|ИЗ
	|	РегистрСведений.АвансыСотрудникам КАК АвансыСотрудникам
	|   ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПоМестуВыплаты КАК Сотрудники 
	|    ПО Сотрудники.Сотрудник = АвансыСотрудникам.Сотрудник
	|";
	
	
	
КонецПроцедуры

Процедура ЗапросЗарплатаКВыплатеАвансПредварительныйРасчет(Запрос, СпособВыплаты, ПараметрыЗаполнения)
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачислениеЗарплаты.Сотрудник,
	|	НачислениеЗарплаты.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	НачислениеЗарплаты.Начисление.СчетУчета КАК СчетУчета,
	|	&ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	СУММА(НачислениеЗарплаты.Результат) КАК КВыплате,
	|	СУММА(НачислениеЗарплаты.Результат) КАК СуммаГрязными,
	|	0 КАК СуммаОкругления
	|ИЗ
	|	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплаты
	|   ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПоМестуВыплаты КАК Сотрудники 
	|    ПО Сотрудники.Сотрудник = НачислениеЗарплаты.Сотрудник
	|ГДЕ
	|   НачислениеЗарплаты.Ссылка.ПредварительныйРасчет
	|   И НачислениеЗарплаты.Ссылка.Проведен
	|   И НачислениеЗарплаты.Ссылка.МесяцНачисления = &ПериодВзаиморасчетов
	|СГРУППИРОВАТЬ ПО
	|	НачислениеЗарплаты.Сотрудник,
	|	НачислениеЗарплаты.Сотрудник.ФизическоеЛицо,
	|	НачислениеЗарплаты.Начисление.СчетУчета,
	|	&ПериодВзаиморасчетов
	|";
	
	
	
КонецПроцедуры

Процедура ЗапросЗарплатаКВыплатеДепоненты(Запрос, СпособВыплаты, ПараметрыЗаполнения)
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
	|	ВзаиморасчетыСДепонентами.ФизическоеЛицо,
	|	ВзаиморасчетыСДепонентами.Ведомость,
	|	&Счет662 КАК СчетУчета,
	|	&ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ВзаиморасчетыСДепонентами.СуммаОстаток КАК КВыплате,
	|	0 КАК СуммаГрязными,
	|	0 КАК СуммаОкругления
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСДепонентами.Остатки(
	|		&Дата,
	|		Организация = &Организация
	|		И ФизическоеЛицо В
	|			(ВЫБРАТЬ
	|				Сотрудники.ФизическоеЛицо
	|			ИЗ
	|				ВТСотрудникиПоМестуВыплаты КАК Сотрудники)) КАК ВзаиморасчетыСДепонентами
	|
	|";
	
КонецПроцедуры	

Процедура ЗапросЗарплатаКВыплатеПрочие(Запрос, СпособВыплаты, ПараметрыЗаполнения)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|   Начисления.Начисление КАК Начисление
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|   Справочник.ВидыВыплат.Начисления КАК Начисления
	|ГДЕ
	|   Начисления.Ссылка = &СпособВыплаты
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачисленияУдержанияПоСотрудникам.Сотрудник,
	|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо,
	|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание.СчетУчета КАК СчетУчета,
	|	&ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	СУММА(НачисленияУдержанияПоСотрудникам.СуммаОборот) КАК КВыплате,
	|	СУММА(НачисленияУдержанияПоСотрудникам.СуммаОборот) КАК СуммаГрязными,
	|	0 КАК СуммаОкругления
	|ИЗ
	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам.Обороты(НАЧАЛОПЕРИОДА(&ПериодВзаиморасчетов, МЕСЯЦ), КОНЕЦПЕРИОДА(&ПериодВзаиморасчетов, МЕСЯЦ), ,НачислениеУдержание ССЫЛКА ПланВидовРасчета.Начисления) КАК НачисленияУдержанияПоСотрудникам
	|   ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиПоМестуВыплаты КАК Сотрудники 
	|    ПО Сотрудники.Сотрудник = НачисленияУдержанияПоСотрудникам.Сотрудник
	|   ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисления КАК Начисления 
	|    ПО Начисления.Начисление = НачисленияУдержанияПоСотрудникам.НачислениеУдержание
	|СГРУППИРОВАТЬ ПО
	|	НачисленияУдержанияПоСотрудникам.Сотрудник,
	|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо,
	|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание.СчетУчета,
	|	&ПериодВзаиморасчетов
	|";
	
	
	
КонецПроцедуры	

Процедура РассчитатьЗарплатуВМежрасчетныйПериод(Зарплата, ДанныеДляРасчета) Экспорт
	
	// Округление результатов
	Если ЗначениеЗаполнено(ДанныеДляРасчета.Округление) Тогда
		ТочностьДо = ДанныеДляРасчета.Округление.Точность;
	Иначе
		ТочностьДо = 0.01;
	КонецЕсли;
	
	Если ТочностьДо <= 0 Тогда
		ТочностьДо = 0.01
	КонецЕсли;	

	Для Каждого СтрокаЗарплаты Из Зарплата Цикл
		КВыплате = СтрокаЗарплаты.КВыплате;
		СтрокаЗарплаты.КВыплате = Цел(СтрокаЗарплаты.КВыплате / ТочностьДо) * ТочностьДо;
		СтрокаЗарплаты.СуммаОкругления = 0;
	КонецЦикла;
	
КонецПроцедуры
//////////////////////////////////////////////////////////////////
/// Выплата зарплаты

Процедура ЗарегистрироватьВыплатуАванса(Движения, Отказ, Организация, ПериодРегистрации, СпособВыплаты, Выплата) Экспорт
	
	//////////Для Каждого СтрокаЗарплаты Из Выплата.Зарплата Цикл
	//////////	
	//////////	Если СтрокаЗарплаты.КВыплате <> 0 Тогда
	//////////		
	//////////		ДобавитьСтрокуВыплатыВЗарплатаКВыплате(
	//////////			Движения, 
	//////////			ВидДвиженияНакопления.Расход,
	//////////			Организация,
	//////////			ПериодРегистрации, 
	//////////			СтрокаЗарплаты, 
	//////////			СтрокаЗарплаты.Подразделение,
	//////////			Перечисления.ХарактерВыплатыЗарплаты.Аванс, 
	//////////			СтрокаЗарплаты.КВыплате);
	//////////			
	//////////		ДобавитьСтрокуВыплатыВВзаиморасчетыССотрудниками(
	//////////			Движения, 
	//////////			ВидДвиженияНакопления.Расход,
	//////////			Организация,
	//////////			ПериодРегистрации, 
	//////////			СтрокаЗарплаты,
	//////////			СтрокаЗарплаты.Подразделение,
	//////////			Перечисления.ВидыВзаиморасчетовССотрудниками.ВыплатаАванса,
	//////////			СтрокаЗарплаты.КВыплате)			
	//////////			
	//////////	КонецЕсли;
	//////////		
	//////////КонецЦикла;
		
КонецПроцедуры

Процедура ЗарегистрироватьВыплатуВМежрасчет(Движения, Отказ, Организация, ПериодРегистрации, СпособВыплаты, Выплата) Экспорт
	
	Отказ = Истина;
	
	СообщениеОбОшибке = НСтр("ru='Межрасчетные выплаты не поддерживаются!';uk='Міжрозрахункові виплати не підтримуються!'"); 
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
	
КонецПроцедуры

Процедура ЗарегистрироватьВыплатуЗарплаты(Движения, Отказ, Организация, ПериодРегистрации, СпособВыплаты, Выплата) Экспорт
	
	Подразделение = Выплата.Подразделение;
	
	Для Каждого СтрокаЗарплаты Из Выплата.Зарплата Цикл
		
		Если СтрокаЗарплаты.КВыплате <> 0 Тогда
			
			ДобавитьСтрокуВыплатыВВзаиморасчетыССотрудниками(
				Движения, 
				ВидДвиженияНакопления.Расход,
				Организация,
				Выплата.Регистратор.Дата, 
				СтрокаЗарплаты,
				СтрокаЗарплаты.КВыплате, 
				Выплата.Регистратор,
				СпособВыплаты,
				Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Выплата);			
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////
/// Выплата зарплаты - вспомогательные процедуры и функции

Функция ОстаткиЗарплатаКВыплате(Регистратор, Организация, ПериодРегистрации, Подразделение, ХарактерыВыплаты)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодВзаиморасчетов", Новый Граница(ПериодРегистрации, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПоВсемПодразделениям", НЕ ЗначениеЗаполнено(Подразделение));	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ХарактерыВыплаты", ХарактерыВыплаты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо,
	|	ЗарплатаКВыплатеОстатки.Сотрудник,
	|	ЗарплатаКВыплатеОстатки.Подразделение,
	|	ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеОстатки.ХарактерВыплаты,
	|	СУММА(ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток) КАК СуммаКВыплатеОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗарплатаКВыплатеОстатки.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ЗарплатаКВыплатеОстатки.Сотрудник КАК Сотрудник,
	|		ЗарплатаКВыплатеОстатки.Подразделение КАК Подразделение,
	|		ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|		ЗарплатаКВыплатеОстатки.ХарактерВыплаты КАК ХарактерВыплаты,
	|		ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток КАК СуммаКВыплатеОстаток
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплате.Остатки(
	|				&ПериодВзаиморасчетов,
	|				Организация = &Организация
	|					И (&ПоВсемПодразделениям
	|						ИЛИ Подразделение В ИЕРАРХИИ (&Подразделение))
	|					И ХарактерВыплаты В (&ХарактерыВыплаты)) КАК ЗарплатаКВыплатеОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗарплатаКВыплате.ФизическоеЛицо,
	|		ЗарплатаКВыплате.Сотрудник,
	|		ЗарплатаКВыплате.Подразделение,
	|		ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|		ЗарплатаКВыплате.ХарактерВыплаты,
	|		ВЫБОР
	|			КОГДА ЗарплатаКВыплате.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЗарплатаКВыплате.СуммаКВыплате
	|			ИНАЧЕ ЗарплатаКВыплате.СуммаКВыплате
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|	ГДЕ
	|		ЗарплатаКВыплате.Регистратор = &Регистратор) КАК ЗарплатаКВыплатеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплатеОстатки.ФизическоеЛицо,
	|	ЗарплатаКВыплатеОстатки.Сотрудник,
	|	ЗарплатаКВыплатеОстатки.Подразделение,
	|	ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов,
	|	ЗарплатаКВыплатеОстатки.ХарактерВыплаты
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток) <> 0";
	
	ОстаткиЗарплатыКВыплате = Запрос.Выполнить().Выгрузить();
	ОстаткиЗарплатыКВыплате.Сортировать("ФизическоеЛицо, Сотрудник, ПериодВзаиморасчетов, Подразделение, СуммаКВыплатеОстаток");
	
	Возврат ОстаткиЗарплатыКВыплате;
	
КонецФункции	

Функция ДобавитьСтрокуВыплатыВЗарплатаКВыплате(Движения, ВидДвижения, Организация, ПериодВзаиморасчетов, Работник, Подразделение, ХарактерВыплаты, СуммаКВыплате)
	
	Если СуммаКВыплате = 0 Тогда
		Возврат НеОпределено
	КонецЕсли;
	
	НоваяСтрока = Движения.ЗарплатаКВыплате.Добавить();
	НоваяСтрока.ВидДвижения = ВидДвижения; 

	НоваяСтрока.Период					= ПериодВзаиморасчетов;
	НоваяСтрока.Организация				= Организация;
	НоваяСтрока.ФизическоеЛицо			= Работник.ФизическоеЛицо;
	НоваяСтрока.Сотрудник				= Работник.Сотрудник;
	НоваяСтрока.Подразделение			= Подразделение;
	НоваяСтрока.ПериодВзаиморасчетов	= ПериодВзаиморасчетов;
	
	НоваяСтрока.ХарактерВыплаты			= ХарактерВыплаты;
	НоваяСтрока.СуммаКВыплате			= СуммаКВыплате;
	
	Возврат НоваяСтрока
	
КонецФункции	

Функция ДобавитьСтрокуВыплатыВВзаиморасчетыССотрудниками(Движения, ВидДвижения, Организация, ПериодРегистрации, СтрокаЗарплата, СуммаКВыплате, Ведомость, СпособВыплаты, КодОперации)
	
	Если СуммаКВыплате <> 0 Тогда
	
		НоваяСтрока = Движения.ВзаиморасчетыССотрудниками.Добавить();
		НоваяСтрока.ВидДвижения = ВидДвижения; 

		НоваяСтрока.Период					= ПериодРегистрации;
		
		НоваяСтрока.Организация				= Организация;
		НоваяСтрока.ФизическоеЛицо			= СтрокаЗарплата.ФизическоеЛицо;
		НоваяСтрока.СчетУчета				= СтрокаЗарплата.СчетУчета;
		НоваяСтрока.ПериодВзаиморасчетов	= СтрокаЗарплата.ПериодВзаиморасчетов;
		
		НоваяСтрока.СуммаВзаиморасчетов		= СуммаКВыплате;
		
		НоваяСтрока.Ведомость				= Ведомость;
		НоваяСтрока.СпособВыплаты			= СпособВыплаты;
		НоваяСтрока.КодОперации				= КодОперации;
	Иначе	
		НоваяСтрока = НеОпределено;
	КонецЕсли;
	
	Если СтрокаЗарплата.СуммаОкругления <> 0 Тогда
	
		НоваяСтрокаОкругление = Движения.ВзаиморасчетыССотрудниками.Добавить();
		НоваяСтрокаОкругление.ВидДвижения = ВидДвиженияНакопления.Приход; 

		НоваяСтрокаОкругление.Период					= ПериодРегистрации;
		
		НоваяСтрокаОкругление.Организация				= Организация;
		НоваяСтрокаОкругление.ФизическоеЛицо			= СтрокаЗарплата.ФизическоеЛицо;
		НоваяСтрокаОкругление.СчетУчета					= СтрокаЗарплата.СчетУчета;
		НоваяСтрокаОкругление.ПериодВзаиморасчетов		= ДобавитьМесяц(Ведомость.ПериодРегистрации,1);
		
		НоваяСтрокаОкругление.СуммаВзаиморасчетов		= СтрокаЗарплата.СуммаОкругления;
		
		НоваяСтрокаОкругление.КодОперации				= Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.ПереносКопеекНаСледующийМесяц;
		НоваяСтрокаОкругление = Движения.ВзаиморасчетыССотрудниками.Добавить();
		НоваяСтрокаОкругление.ВидДвижения = ВидДвиженияНакопления.Приход; 

		НоваяСтрокаОкругление.Период					= ПериодРегистрации;
		
		НоваяСтрокаОкругление.Организация				= Организация;
		НоваяСтрокаОкругление.ФизическоеЛицо			= СтрокаЗарплата.ФизическоеЛицо;
		НоваяСтрокаОкругление.СчетУчета					= СтрокаЗарплата.СчетУчета;
		НоваяСтрокаОкругление.ПериодВзаиморасчетов		= СтрокаЗарплата.ПериодВзаиморасчетов;
		
		НоваяСтрокаОкругление.СуммаВзаиморасчетов		= -СтрокаЗарплата.СуммаОкругления;
		
		НоваяСтрокаОкругление.КодОперации				= Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.ПереносКопеекНаСледующийМесяц;

		
	КонецЕсли;	
	
	
	Возврат НоваяСтрока
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции ведомостей на выплату зарплаты

// Заполнение и расчет документа

Функция ВедомостьВКассуМестоВыплаты(Ведомость) Экспорт
	
	МестоВыплаты = ВзаиморасчетыССотрудниками.ВедомостьМестоВыплаты();
	МестоВыплаты.Вид = Перечисления.ВидыМестВыплатыЗарплаты.Касса;
	МестоВыплаты.Значение = Неопределено;
	
	Возврат МестоВыплаты
	
КонецФункции	

Функция ВедомостьМожноЗаполнитьАвтоматически(Ведомость) Экспорт
	
	ПравилаПроверки = Новый Структура;
	
	ПравилаПроверки.Вставить("Организация",			НСтр("ru='Не выбрана организация!';uk='Не обрана організація!'"));
	ПравилаПроверки.Вставить("ПериодРегистрации",	НСтр("ru='Не задан период регистрации!';uk='Не заданий період реєстрації!'"));
	ПравилаПроверки.Вставить("Дата",				НСтр("ru='Не задана дата документа!';uk='Не задана дата документа!'"));
	ПравилаПроверки.Вставить("СпособВыплаты",		НСтр("ru='Не указан способ выплаты!';uk='Не вказаний спосіб виплати!'"));
	
	ПравилаПроверки.Вставить("Округление",			НСтр("ru='Не указан способ округления!';uk='Не вказаний спосіб округлення!'"));
	
	Возврат	ЗарплатаКадрыКлиентСервер.СвойстваЗаполнены(Ведомость, ПравилаПроверки, Истина)

КонецФункции

Функция ВедомостьМожноРассчитатьНалоги(Ведомость) Экспорт
	
	ПравилаПроверки = Новый Структура;
	
	ПравилаПроверки.Вставить("Организация",			НСтр("ru='Не выбрана организация!';uk='Не обрана організація!'"));
	ПравилаПроверки.Вставить("ПериодРегистрации",	НСтр("ru='Не задан период регистрации!';uk='Не заданий період реєстрації!'"));
	ПравилаПроверки.Вставить("Дата",				НСтр("ru='Не задана дата документа!';uk='Не задана дата документа!'"));
	ПравилаПроверки.Вставить("СпособВыплаты",		НСтр("ru='Не указан способ выплаты!';uk='Не вказаний спосіб виплати!'"));
	
	Возврат	ЗарплатаКадрыКлиентСервер.СвойстваЗаполнены(Ведомость, ПравилаПроверки, Истина)

КонецФункции


/// Обработчики событий модуля объекта документов Ведомости

Процедура ВедомостьОбработкаПроведения(ДокументОбъект, Отказ) Экспорт
	
	Если ДокументОбъект.ВводНачальныхДанных Тогда
		Возврат
	КонецЕсли;
	
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ДокументОбъект);
	
	ДанныеДляПроведения = ВзаиморасчетыССотрудниками.ВедомостьДанныеДляПроведения(ДокументОбъект);
	
	ВзаиморасчетыССотрудниками.ЗарегистрироватьВыплату(ДокументОбъект.Движения, Отказ, ДокументОбъект.Организация, ДокументОбъект.ПериодРегистрации, ДокументОбъект.СпособВыплаты, ДанныеДляПроведения.Взаиморасчеты);
	УчетДепонированнойЗарплаты.СписатьДепонированнуюЗарплату(ДокументОбъект.Движения, Отказ, ДокументОбъект.Организация, ДокументОбъект.Дата, ДанныеДляПроведения.Депоненты.Зарплата); 
	УчетНДФЛ.ЗарегистрироватьВзаиморасчетыПоНДФЛ(ДокументОбъект.Движения, Отказ, ДокументОбъект.Организация, ДокументОбъект.ПериодРегистрации, ДокументОбъект.СпособВыплаты, ДанныеДляПроведения.ВзаиморасчетыПоНДФЛ);
	УчетСтраховыхВзносов.ЗарегистрироватьВзаиморасчетыПоВзносам(ДокументОбъект.Движения, Отказ, ДокументОбъект.Организация, ДокументОбъект.ПериодРегистрации, ДокументОбъект.СпособВыплаты, ДанныеДляПроведения.ВзаиморасчетыПоВзносамВФонды); 
	
	
КонецПроцедуры

/// Методы доступа к ведомостям

Функция ВедомостьПараметрыЗаполнения(Ведомость, МестоВыплаты) Экспорт
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ПериодРегистрации",	Ведомость.ПериодРегистрации);
	ПараметрыЗаполнения.Вставить("Организация",			Ведомость.Организация);
	ПараметрыЗаполнения.Вставить("Подразделение",		Ведомость.Подразделение);
	ПараметрыЗаполнения.Вставить("МестоВыплаты",		МестоВыплаты);
	ПараметрыЗаполнения.Вставить("ДатаДокумента",		Ведомость.Дата);
		
	Возврат ПараметрыЗаполнения
	
КонецФункции

Функция ВедомостьПараметрыРасчета(Ведомость) Экспорт
	
	ПараметрыРасчета = Новый Структура;
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Округление",	Ведомость.Округление);
		
	Возврат ПараметрыРасчета;
	
КонецФункции

Функция ВедомостьПараметрыРасчетаНалогов(Ведомость) Экспорт
	
	ПараметрыРасчета = Новый Структура;
	
	ПараметрыРасчета.Вставить("Регистратор",	Ведомость);
	ПараметрыРасчета.Вставить("СпособВыплаты",	Ведомость.СпособВыплаты);
	ПараметрыРасчета.Вставить("Округление",		Ведомость.Округление);	
	
	Возврат ПараметрыРасчета;
	
КонецФункции


Функция ВедомостьДанныеДляПроведения(Ведомость) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ведомость", Ведомость.Ссылка);
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВедомостьЗарплата.Сотрудник КАК Сотрудник,
	|	ВедомостьЗарплата.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВедомостьЗарплата.СчетУчета КАК СчетУчета,
	|	ВедомостьЗарплата.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ВедомостьЗарплата.СуммаОкругления КАК СуммаОкругления,
	|	ВедомостьЗарплата.КВыплате КАК КВыплате
	|ИЗ
	|	#Ведомость.ЗарплатаПодробно КАК ВедомостьЗарплата
	|ГДЕ
	|	ВедомостьЗарплата.Ссылка = &Ведомость
	|;
	|
	|ВЫБРАТЬ
	|	ВедомостьЗарплата.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВедомостьЗарплата.Ведомость КАК Ведомость,
	|	ВедомостьЗарплата.КВыплате КАК Сумма
	|ИЗ
	|	#Ведомость.ЗарплатаПодробно КАК ВедомостьЗарплата
	|ГДЕ
	|	ВедомостьЗарплата.Ссылка = &Ведомость
	|;
	|
	|ВЫБРАТЬ
	|	ВедомостьНДФЛ.Контрагент КАК Контрагент,
	|	ВедомостьНДФЛ.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ВедомостьНДФЛ.НалоговыйПериод КАК НалоговыйПериод,
	|	ВедомостьНДФЛ.ДоходНДФЛ КАК ДоходНДФЛ,
	|	ВедомостьНДФЛ.Доход КАК Доход,
	|	ВедомостьНДФЛ.Налог КАК Налог
	|ИЗ
	|	#Ведомость.НДФЛ КАК ВедомостьНДФЛ
	|ГДЕ
	|	ВедомостьНДФЛ.Ссылка = &Ведомость
	|;
	|
	|ВЫБРАТЬ
	|	ВедомостьВзносы.Налог КАК Налог,
	|	ВедомостьВзносы.СтатьяНалоговойДекларации КАК СтатьяНалоговойДекларации,
	|	ВедомостьВзносы.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ВедомостьВзносы.Сумма КАК Сумма
	|ИЗ
	|	#Ведомость.Взносы КАК ВедомостьВзносы
	|ГДЕ
	|	ВедомостьВзносы.Ссылка = &Ведомость
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьВзносыФОТ.Налог КАК Налог,
	|	ВедомостьВзносыФОТ.СтатьяНалоговойДекларации КАК СтатьяНалоговойДекларации,
	|	ВедомостьВзносыФОТ.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	|	ВедомостьВзносыФОТ.Сумма КАК Сумма
	|ИЗ
	|	#Ведомость.ВзносыФОТ КАК ВедомостьВзносыФОТ
	|ГДЕ
	|	ВедомостьВзносыФОТ.Ссылка = &Ведомость
	|";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "#Ведомость", Ведомость.Метаданные().ПолноеИмя());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Зарплата = РезультатЗапроса[0].Выгрузить();
	Депоненты = РезультатЗапроса[1].Выгрузить();
	НДФЛ = РезультатЗапроса[2].Выгрузить();
	Взносы = РезультатЗапроса[3].Выгрузить();
	
	Если Ведомость.СпособВыплаты = Справочники.ВидыВыплат.Депоненты Тогда
		Зарплата.Очистить();
	Иначе
		Депоненты.Очистить();	
	КонецЕсли;	
	
	ДанныеДляПроведения = Новый Структура;
	ДанныеДляПроведения.Вставить(
		"Взаиморасчеты", 
		Новый Структура(
			"Регистратор,
			|Организация,
			|Подразделение,
			|Зарплата",
			Ведомость.Ссылка,
			Ведомость.Организация,
			Ведомость.Подразделение,
			Зарплата));
	ДанныеДляПроведения.Вставить(
		"Депоненты", 
		Новый Структура(
			"Регистратор,
			|Организация,
			|Подразделение,
			|Зарплата",
			Ведомость.Ссылка,
			Ведомость.Организация,
			Ведомость.Подразделение,
			Депоненты));		
	ДанныеДляПроведения.Вставить(
		"ВзаиморасчетыПоНДФЛ", 
		Новый Структура(
			"Регистратор,
			|Организация,
			|Подразделение,
			|НДФЛ",
			Ведомость.Ссылка,
			Ведомость.Организация,
			Ведомость.Подразделение,
			НДФЛ));
			
	ДанныеДляПроведения.Вставить(
		"ВзаиморасчетыПоВзносамВФонды", 
		Новый Структура(
			"Регистратор,
			|Организация,
			|Подразделение,
			|Взносы",
			Ведомость.Ссылка,
			Ведомость.Организация,
			Ведомость.Подразделение,
			Взносы));			
			
	Возврат ДанныеДляПроведения;
	
КонецФункции
