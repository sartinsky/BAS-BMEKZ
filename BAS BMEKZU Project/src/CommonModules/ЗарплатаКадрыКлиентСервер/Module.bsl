////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция ДатаСеанса() Экспорт
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Возврат ТекущаяДатаСеанса();
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ДатаСеанса();
	#КонецЕсли
	
КонецФункции

// Возвращает Истина, если переданный объект содержит 
// значения по умолчанию для гражданства
//
// Параметры:
//	ИнформацияОГражданстве - объект, имеющий свойства 
//		Страна
//		
Функция ГражданствоПоУмолчанию(ИнформацияОГражданстве) Экспорт
	
	Возврат ИнформацияОГражданстве.Страна = ПредопределенноеЗначение("Справочник.СтраныМира.Украина");
	
КонецФункции

// Возвращает Истина, если переданный объект содержит 
// значения по умолчанию для сведений об инвалидности
// т.е. сотрудник не является инвалидом
//
// Параметры:
//	СведенияОбИнвалидности - объект, имеющий свойства 
//		Инвалидность
//		СрокДействияСправки
//		
Функция СведенияОбИнвалидностиПоУмолчанию(СведенияОбИнвалидности) Экспорт
	Возврат (НЕ СведенияОбИнвалидности.Инвалидность)
		И (НЕ ЗначениеЗаполнено(СведенияОбИнвалидности.ДатаВыдачи))
		И (НЕ ЗначениеЗаполнено(СведенияОбИнвалидности.СрокДействияСправки))
КонецФункции

// Возвращает Истина, если переданный объект содержит 
// значения по умолчанию для удостоверения личности
//
// Параметры:
//	ИнформацияОбУдостоверенииЛичности - объект, имеющий свойства 
//		ВидДокумента
//		Серия
//		Номер
//		ДатаВыдачи
//		КемВыдан
//		КодПодразделения
//		
Функция УдостоверениеЛичностиПоУмолчанию(ИнформацияОбУдостоверенииЛичности) Экспорт
	
	Возврат (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.ВидДокумента))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.Серия))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.Номер))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.ДатаВыдачи))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.СрокДействия))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.КемВыдан))
		И (НЕ ЗначениеЗаполнено(ИнформацияОбУдостоверенииЛичности.КодПодразделения));
		
КонецФункции

// Возвращает Истина, если переданный объект содержит 
// значения по умолчанию для бухучета сотрудника
//
// Параметры:
//	БухучетЗарплатыСотрудников - объект, имеющий свойства 
//		СпособОтраженияЗарплатыВБухучете
//		
Функция СведенияОБухучетеСотрудникаПоУмолчанию(БухучетЗарплатыСотрудников) Экспорт
	Возврат НЕ ЗначениеЗаполнено(БухучетЗарплатыСотрудников.СпособОтраженияЗарплатыВБухучете);
КонецФункции

// Возвращает Истина, если переданный объект содержит 
// значения по умолчанию для сведений о пенсионере
// т.е. сотрудник не является пенсионером
//
// Параметры:
//	СведенияОПенсионерах - объект, имеющий свойства 
//		Пенсионер
//		СвидетельствоСерия
//		СвидетельствоНомер
//		СвидетельствоДатаВыдачи
//		
Функция СведенияОПенсионерахПоУмолчанию(СведенияОПенсионерах) Экспорт
	Возврат (НЕ СведенияОПенсионерах.Пенсионер)
	    И (НЕ ЗначениеЗаполнено (СведенияОПенсионерах.СвидетельствоСерия))
	    И (НЕ ЗначениеЗаполнено (СведенияОПенсионерах.СвидетельствоНомер))
		И (НЕ ЗначениеЗаполнено(СведенияОПенсионерах.СвидетельствоДатаВыдачи))
КонецФункции
	
Функция СведенияОЛицахСДополнительнымиГарантиямиПоУмолчанию(СведенияОЛицахСДополнительнымиГарантиями) Экспорт
	Возврат (НЕ СведенияОЛицахСДополнительнымиГарантиями.НаличиеГарантий)
	    И (НЕ ЗначениеЗаполнено (СведенияОЛицахСДополнительнымиГарантиями.ВидГарантии))
КонецФункции
	
////////////////////////////////////////////////////////////////////////////////
// Расчет итогов в документах

Функция ИтогиТабличнойЧасти(Форма, Объект, ИмяТЧ, ИмяКолонкиРазрез, ИмяКолонкиИтог, ИмяЭлемента, ИсключаяРазрез = Неопределено) Экспорт
	
	ТЧ = Объект[ИмяТЧ].Выгрузить();
	ТЧ.Свернуть(ИмяКолонкиРазрез,ИмяКолонкиИтог);
	ТЧ.Сортировать(ИмяКолонкиИтог+" Убыв");
	
	ТекстПодсказки = "";
	СписокПодсказок = Новый СписокЗначений;
	МаксимальнаяДлиннаПояснения = 0;
	МаксимальнаяДлиннаПредставлениеИтога = 0;
	
	Для Каждого СтрокаТЧ ИЗ ТЧ Цикл
		
		Если СтрокаТЧ[ИмяКолонкиИтог] = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ИсключаяРазрез <> Неопределено И ИсключаяРазрез = СтрокаТЧ[ИмяКолонкиРазрез] Тогда
			Продолжить;
		КонецЕсли;	
		
		ПредставлениеИтога = Формат(СтрокаТЧ[ИмяКолонкиИтог], "ЧЦ=15; ЧДЦ=2");
		Пояснение = Строка(СтрокаТЧ[ИмяКолонкиРазрез]);
		
		ОписаниеПодсказки = Новый Структура;
		ОписаниеПодсказки.Вставить("ПредставлениеИтога", ПредставлениеИтога);
				
		ДлинаПояснения = СтрДлина(Пояснение);
		ДлинаПредставленияИтога = СтрДлина(ПредставлениеИтога);
				
		ОписаниеПодсказки.Вставить("ОбщаяДлина",  ДлинаПояснения + ДлинаПредставленияИтога);
				
		МаксимальнаяДлиннаПояснения = Макс(МаксимальнаяДлиннаПояснения, ДлинаПояснения);
		МаксимальнаяДлиннаПредставлениеИтога = Макс(МаксимальнаяДлиннаПредставлениеИтога, ДлинаПредставленияИтога);
				
		СписокПодсказок.Добавить(ОписаниеПодсказки, Пояснение);
		
		
	КонецЦикла;	
	
	МаксимальнаяОбщаяДлинаПредставления = МаксимальнаяДлиннаПояснения + МаксимальнаяДлиннаПредставлениеИтога;
	ШаблонПробелов = "                                                                                                                            ";
	Для каждого ОписаниеПодсказки Из СписокПодсказок Цикл
		
		ТекстПодсказки = ?(ПустаяСтрока(ТекстПодсказки), "", ТекстПодсказки + Символы.ПС)
			+ ОписаниеПодсказки.Представление + ": "
			+ Лев(ШаблонПробелов, (МаксимальнаяОбщаяДлинаПредставления - ОписаниеПодсказки.Значение.ОбщаяДлина))
			+ ОписаниеПодсказки.Значение.ПредставлениеИтога;
			
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстПодсказки) Тогда
		ТекстПодсказки = НСтр("ru='Нет данных';uk='Немає даних'");
	КонецЕсли;	
	
	УстановитьРасширеннуюПодсказкуЭлементуФормы(Форма,ИмяЭлемента,ТекстПодсказки);

	
	
КонецФункции	

Функция ИтогиДвижений(Форма, Объект, Регистр, ИмяКолонкиРазрез1, ИмяКолонкиРазрез2, ИмяКолонкиИтог, ИмяЭлемента) Экспорт
	
	Объект.Движения[Регистр].Прочитать();
	ТЧ = Объект.Движения[Регистр].Выгрузить();
	ТЧ.Свернуть(ИмяКолонкиРазрез1+","+ИмяКолонкиРазрез2,ИмяКолонкиИтог);
	ТЧ.Сортировать(ИмяКолонкиИтог+" Убыв");
	
	ТекстПодсказки = "";
	СписокПодсказок = Новый СписокЗначений;
	МаксимальнаяДлиннаПояснения = 0;
	МаксимальнаяДлиннаПредставлениеИтога = 0;
	
	Для Каждого СтрокаТЧ ИЗ ТЧ Цикл
		
		Если СтрокаТЧ[ИмяКолонкиИтог] = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		ПредставлениеИтога = Формат(СтрокаТЧ[ИмяКолонкиИтог], "ЧЦ=15; ЧДЦ=2");
		Пояснение = Строка(СтрокаТЧ[ИмяКолонкиРазрез1])+?(ИмяКолонкиРазрез2 = "",""," "+СтрокаТЧ[ИмяКолонкиРазрез2]);
		
		ОписаниеПодсказки = Новый Структура;
		ОписаниеПодсказки.Вставить("ПредставлениеИтога", ПредставлениеИтога);
				
		ДлинаПояснения = СтрДлина(Пояснение);
		ДлинаПредставленияИтога = СтрДлина(ПредставлениеИтога);
				
		ОписаниеПодсказки.Вставить("ОбщаяДлина",  ДлинаПояснения + ДлинаПредставленияИтога);
				
		МаксимальнаяДлиннаПояснения = Макс(МаксимальнаяДлиннаПояснения, ДлинаПояснения);
		МаксимальнаяДлиннаПредставлениеИтога = Макс(МаксимальнаяДлиннаПредставлениеИтога, ДлинаПредставленияИтога);
				
		СписокПодсказок.Добавить(ОписаниеПодсказки, Пояснение);
		
		
	КонецЦикла;	
	
	МаксимальнаяОбщаяДлинаПредставления = МаксимальнаяДлиннаПояснения + МаксимальнаяДлиннаПредставлениеИтога;
	ШаблонПробелов = "                                                                                                                            ";
	Для каждого ОписаниеПодсказки Из СписокПодсказок Цикл
		
		ТекстПодсказки = ?(ПустаяСтрока(ТекстПодсказки), "", ТекстПодсказки + Символы.ПС)
			+ ОписаниеПодсказки.Представление + ": "
			+ Лев(ШаблонПробелов, (МаксимальнаяОбщаяДлинаПредставления - ОписаниеПодсказки.Значение.ОбщаяДлина))
			+ ОписаниеПодсказки.Значение.ПредставлениеИтога;
			
	КонецЦикла;
	
	УстановитьРасширеннуюПодсказкуЭлементуФормы(Форма,ИмяЭлемента,ТекстПодсказки);

	
	
КонецФункции	

Процедура УстановитьРасширеннуюПодсказкуЭлементуФормы(Форма, ИмяЭлемента, ТекстПодсказки) Экспорт
	
	ЭлементФормы = Форма.Элементы.Найти(ИмяЭлемента);
	Если ЭлементФормы <> Неопределено Тогда
		ЭлементФормы.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
	КонецЕсли;
	
КонецПроцедуры
	
	
////////////////////////////////////////////////////////////////////////////////
// Универсальный механизм "Месяц строкой"

Процедура ЗаполнитьМесяцПоДате(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, УстанавливатьДоступностьюПредставления = Истина) Экспорт
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ПолучитьПредставлениеМесяца(Значение));
	
	Если УстанавливатьДоступностьюПредставления 
		И ТипЗнч(РедактируемыйОбъект) = Тип("УправляемаяФорма") Тогда
		
		Если РедактируемыйОбъект.ТолькоПросмотр Тогда
			
			ЭлементФормы = ЭлементФормыПоПути(РедактируемыйОбъект.Элементы, ПутьРеквизитаПредставления);
			Если ЭлементФормы <> Неопределено Тогда
				ЭлементФормы.ТолькоПросмотр = Истина;
			КонецЕсли; 
			
		КонецЕсли; 
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМесяцПоДатеВТабличнойЧасти(ДанныеТабличнойЧасти, ПутьРеквизита, ПутьРеквизитаПредставления) Экспорт  
	Для Каждого СтрокаТабличнойЧасти Из ДанныеТабличнойЧасти Цикл
		ЗаполнитьМесяцПоДате(СтрокаТабличнойЧасти, ПутьРеквизита, ПутьРеквизитаПредставления, Ложь);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьПредставлениеМесяца(ДатаНачалаМесяца) Экспорт
	
	Возврат Формат(ДатаНачалаМесяца, "ДФ='MMMM yyyy'");
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и функции

// Проверяет заполнение реквизитов переданного объекта по заданным правилам
// 
// Параметры
//	ПроверяемыйОбъект	- проверяемое, любой объект, допускающий доступ к полям по имени
//	ПравилаПроверки		- структура, в которой ключем является проверяемое свойство, 
//						а значением - сообщение об ошибке
//	СообщитьПользователю- признак, выдавать ли сообщение пользователю
//								
//	Возвращаемое значение:
//		Булево. Истина - ошибок не обнаружено, Ложь - в противном случае. 
//			
Функция СвойстваЗаполнены(ПроверяемыйОбъект, ПравилаПроверки, СообщитьПользователю = Ложь) Экспорт
	
	НарушенныеПравила = Новый Массив;
	
	Для Каждого ПравилоПроверки Из ПравилаПроверки Цикл
		Если НЕ ЗначениеЗаполнено(ПроверяемыйОбъект[ПравилоПроверки.Ключ]) Тогда
			НарушенныеПравила.Добавить(ПравилоПроверки);
		КонецЕсли;
	КонецЦикла;
	
	Если СообщитьПользователю Тогда
		Для Каждого НарушенноеПравило Из НарушенныеПравила Цикл 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НарушенноеПравило.Значение, ПроверяемыйОбъект, НарушенноеПравило.Ключ);
		КонецЦикла
	КонецЕсли;
	
	Возврат НарушенныеПравила.Количество() = 0;
	
КонецФункции

// Проверяет заполнение реквизитов переданного объекта по заданным правилам
// 
// Параметры
//	Форма			- управляемая форма
//	ПравилаПроверки	- список значение, в которой значением является путь к данными, 
//						а значением - сообщение об ошибке
//	СообщитьПользователю- признак, выдавать ли сообщение пользователю
//								
//	Возвращаемое значение:
//		Булево. Истина - все свойства заполнены, Ложь - в противном случае. 
//			
Функция СвойстваФормыЗаполнены(Форма, ПравилаПроверки, СообщитьПользователю = Ложь) Экспорт
	
	НарушенныеПравила = Новый Массив;
	
	Для Каждого ПравилоПроверки Из ПравилаПроверки Цикл
		
		Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПравилоПроверки.Значение);
		
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			НарушенныеПравила.Добавить(ПравилоПроверки);
		КонецЕсли;
	КонецЦикла;
	
	Если СообщитьПользователю Тогда
		Для Каждого НарушенноеПравило Из НарушенныеПравила Цикл 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НарушенноеПравило.Представление, , НарушенноеПравило.Значение);
		КонецЦикла
	КонецЕсли;
	
	Возврат НарушенныеПравила.Количество() = 0;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ДатаОтсчетаПериодическихСведений() Экспорт
	
	Возврат '18991231000000';
	
КонецФункции

Функция ДатаОтсчетаПериодическихСведенийСПериодомМесяц() Экспорт
	
	Возврат КонецМесяца(ДатаОтсчетаПериодическихСведений()) + 1;
	
КонецФункции

Функция ЭлементФормыПоПути(Элементы, Знач ПутьКРеквизиту)
	
	НайденныйЭлемент = Неопределено;
	ПутьКРеквизиту = ВРег(ПутьКРеквизиту);
	
	Для каждого Элемент Из Элементы Цикл
		
		Если ТипЗнч(Элемент) <> Тип("ПолеФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРег(Элемент.ПутьКДанным) = ПутьКРеквизиту Тогда
			НайденныйЭлемент = Элемент;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденныйЭлемент;
	
КонецФункции


// Возвращает массив видов расчета из коллекции
//
Функция ВидыРасчетаКоллекции(КоллекцияСтрок, ИмяКолонки = "ВидРасчета") Экспорт 
	
	МассивВидовРасчета = Новый Массив;
	Для каждого СтрокаКоллекции Из КоллекцияСтрок Цикл
		Значение = СтрокаКоллекции[ИмяКолонки];
		МассивВидовРасчета.Добавить(Значение);
	КонецЦикла; 
	
	Возврат МассивВидовРасчета;
	
КонецФункции


