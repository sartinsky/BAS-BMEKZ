#Область ПрограммныйИнтерфейс

#Область Движения

#Область ДвиженияПоРегистру_ИНАГРО_ЗатратыОрганизации

// Процедура делает движения прихода по регистру ИНАГРО_ЗатратыОрганизаций
// на основании проводок по регистру Хозрасчетный.
//
//  Параметры:
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//
Процедура ИНАГРО_ДвиженияЗатратыОрганизации_Приход(СтруктураШапкиДокумента, Движения) Экспорт
	
	ИНАГРО_ОбщийСервер.ИНАГРО_ДвиженияЗатратыОрганизации_Приход(СтруктураШапкиДокумента, Движения);
	
КонецПроцедуры

// Процедура делает движения расход по регистру ИНАГРО_ЗатратыОрганизаций
// на основании проводок по регистру Хозрасчетный.
//
//  Параметры:
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//
Процедура ИНАГРО_ДвиженияЗатратыОрганизации_Расход(СтруктураШапкиДокумента, Движения) Экспорт
	
	ИНАГРО_ОбщийСервер.ИНАГРО_ДвиженияЗатратыОрганизации_Расход(СтруктураШапкиДокумента, Движения);
	
КонецПроцедуры

#КонецОбласти

#Область ДвиженияПоРегистру_ИНАГРО_ВыпускПродукции

// Процедура делает движения прихода по регистру ИНАГРО_ВыпускПродукцииОрганизации
// и регистру ИНАГРО_ЗатратыОрганизаций
// на основании проводок по регистру Хозрасчетный.
//
//  Параметры:
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//
Процедура ИНАГРО_ДвиженияВыпускПродукции(СтруктураШапкиДокумента, Движения) Экспорт
	
	ИНАГРО_ОбщийСервер.ИНАГРО_ДвиженияВыпускПродукции(СтруктураШапкиДокумента, Движения);
		
КонецПроцедуры

// Процедура делает движения прихода по регистру ИНАГРО_ВыпускПродукцииОрганизации.
//
//  Параметры:
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		ТаблицаПоУслугам	    - ТаблицаЗначений - таблица по которой выполняются движения
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//
Процедура ИНАГРО_ДвиженияВыпускПродукции_Услуги(СтруктураШапкиДокумента, ТаблицаПоУслугам, Движения) Экспорт
	
	ИНАГРО_ОбщийСервер.ИНАГРО_ДвиженияВыпускПродукции_Услуги(СтруктураШапкиДокумента, ТаблицаПоУслугам, Движения);
	
КонецПроцедуры

#КонецОбласти

#Область ДвиженияПоРегистру_ИНАГРО_ВедомостьДвижений

// Выполняет движения по приходу по регистру ВедомостьДвижений
//
//  Параметры:
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		ТаблицаДокумента	    - ТаблицаЗначений - таблица по которой выполняются движения
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//
Процедура ИНАГРО_ВедомостьДвиженийПриход(Движения, ТаблицаДокумента, СтруктураШапкиДокумента) Экспорт
	
	ИНАГРО_ОбщийСервер.ИНАГРО_ВедомостьДвиженийПриход(Движения, ТаблицаДокумента, СтруктураШапкиДокумента);
		
КонецПроцедуры

// Выполняет движения по расходу по регистру ВедомостьДвижений
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		ТаблицаСписания	        - ТаблицаЗначений - таблица по которой выполняются движения
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//
Процедура ИНАГРО_ВедомостьДвиженийРасход(Движения, ТаблицаСписания, СтруктураШапкиДокумента) Экспорт
	
	ИНАГРО_ОбщийСервер.ИНАГРО_ВедомостьДвиженийРасход(Движения, ТаблицаСписания, СтруктураШапкиДокумента);
		
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляФормированияДвиженийДокумента

// Загружает таблицы документа в таблицы соответствующие структуре регистров.
//
//	Параметры:
//		Движение                 - движение документа (т.е. регистр)
//		СтруктураТаблицДокумента - структура содержащая таблицы документа. ключ - имя таблицы, значение - таблица значений с данными документа.
//
//	Возвращаемое значение:
//		Структура, в которой ключ - это имя таблицы документа, соответствующий параметру СтруктураТаблицДокумента,
//		  значение - таблица значений, со структурой соответствующей структуре параметра (т.е. регистра) Движение
//		  В таблицы значений данные загружаются по соответствию с имен полей.
//
Функция ЗагрузитьТаблицыДокументаВСтруктуру(Движение, СтруктураТаблицДокумента) Экспорт
	
	Возврат ИНАГРО_ОбщийСервер.ЗагрузитьТаблицыДокументаВСтруктуру(Движение, СтруктураТаблицДокумента);
	
КонецФункции

// Заполняет структуру таблиц документа, значением которое будет одинаковым для всех таблиц (например значением шапки документа).
//
//	Параметры:
//		СтруктураТаблицДокумента - Структура, структура таблиц документа, сформированная функцией ЗагрузитьТаблицыДокументаВСтруктуру()
//		ИмяПоля                  - имя колонки в таблицах документа, в которую будет установлено новое значение
//		УстанавливаемоеЗначение  - значение, которое надо установить в таблицы документа
//		СтрТабЧасти              - Строка, имена таб. частей документа в которые необходимо установить новое значение
//
Процедура УстановитьЗначениеВТаблицыДокумента(СтруктураТаблицДокумента, ИмяПоля, УстанавливаемоеЗначение, СтрТабЧасти = "") Экспорт
	
	ИНАГРО_ОбщийСервер.УстановитьЗначениеВТаблицыДокумента(СтруктураТаблицДокумента, ИмяПоля, УстанавливаемоеЗначение, СтрТабЧасти);
		
КонецПроцедуры

// Формирует движение в регистр на основании данных в таблицах документов.
//
//	Параметры:
//		Движение                 - движение документа, в которое необходимо произвести добавление записей (т.е. регистр)
//		ВидДвижения              - ВидДвиженияНакопления - (приход/расход)
//		СтруктураТаблицДокумента - Структура - структура таблиц документа, сформированная функцией ЗагрузитьТаблицыДокументаВСтруктуру()
//		ДатаДвижения             - Дата на которую будут формироваться записи.
//
Процедура ЗаписатьТаблицыДокументаВРегистр(Движение, ВидДвижения, СтруктураТаблицДокумента, ДатаДвижения) Экспорт
	
	ИНАГРО_ОбщийСервер.ЗаписатьТаблицыДокументаВРегистр(Движение, ВидДвижения, СтруктураТаблицДокумента, ДатаДвижения);
	
КонецПроцедуры

#КонецОбласти

// Процедура регистрирует факт закупки.
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтрокаТаблицы	        - СтрокаТаблицыЗначений - строка таблицы по которой выполняются движения
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//      Расход                  - Булево - если Истина, то вид движения расход
//
Процедура ИНАГРО_РегистрацияЗакупки(Движения, СтрокаТаблицы, СтруктураШапкиДокумента, Расход = Ложь) Экспорт
	
	ИНАГРО_ОбщийСервер.ИНАГРО_РегистрацияЗакупки(Движения, СтрокаТаблицы, СтруктураШапкиДокумента, Расход);
	
КонецПроцедуры

// Процедура регистрирует факт реализации
//
//  Параметры:
//		СтрокаДокумента	- СтрокаТаблицыЗначений - строка таблицы по которой выполняются движения
//		Количество	    - Число
//      Стоимость       - Число
//      ДокОбъект       - ДокументОбъект
//      Голов           - Число - количество голов
//
Процедура ИНАГРО_РегистрацияРеализации(СтрокаДокумента, Количество, Стоимость, ДокОбъект = Неопределено, Голов = 0) Экспорт
	
	ИНАГРО_ОбщийСервер.ИНАГРО_РегистрацияРеализации(СтрокаДокумента, Количество, Стоимость, ДокОбъект, Голов);
	
КонецПроцедуры

// Процедура формирует движения документа ИНАГРО_РаспределениеЗатрат.
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		БазаРаспределения	    - ПеречислениеСсылка.ИНАГРО_СпособыРаспределенияЗатрат
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		ТаблицаПоРаспределению	- ТаблицаЗначений
//		ТаблицаПоЗатратам	    - ТаблицаЗначений
//      Отказ                   - Булево - если Истина, отказ от проведения документа
//      Заголовок               - Строка - заголовок для сообщений об ошибках проведения
//
Процедура ИНАГРО_ДвиженияРаспределенияЗатрат(Движения, БазаРаспределения, СтруктураШапкиДокумента, ТаблицаПоРаспределению, ТаблицаПоЗатратам, Отказ, Заголовок = "") Экспорт
	
	ИНАГРО_ОбщийСервер.ИНАГРО_ДвиженияРаспределенияЗатрат(Движения, БазаРаспределения, СтруктураШапкиДокумента, ТаблицаПоРаспределению, ТаблицаПоЗатратам, Отказ, Заголовок);
	
КонецПроцедуры

#КонецОбласти

#Область РаспределениеЗатрат

// Заполняет таблицу затрат
//
//  Параметры:
//		ПараметрыОтбора   - Структура - параметры отбора
//		ТЧЗатраты         - ТаблицаЗначений
//		НеобходимыеДанные - Структура - структура допоплнительных параметров
//
Процедура ИНАГРО_ЗаполнитьТЧЗатраты(ПараметрыОтбора, ТЧЗатраты, НеобходимыеДанные) Экспорт
	
	ИНАГРО_ОбщийСервер.ИНАГРО_ЗаполнитьТЧЗатраты(ПараметрыОтбора, ТЧЗатраты, НеобходимыеДанные);
			
КонецПроцедуры

// Заполняет таблицу базы
//
//  Параметры:
//		БазаРаспределения - ПеречислениеСсылка.ИНАГРО_СпособыРаспределенияЗатрат
//		ТЗБазаПоЗатрате   - ТаблицаЗначений
//		НеобходимыеДанные - Структура - структура допоплнительных параметров
//
Процедура ИНАГРО_ЗаполнитьТЧБаза(БазаРаспределения, ТЗБазаПоЗатрате, НеобходимыеДанные) Экспорт
	
	ИНАГРО_ОбщийСервер.ИНАГРО_ЗаполнитьТЧБаза(БазаРаспределения, ТЗБазаПоЗатрате, НеобходимыеДанные);
		
КонецПроцедуры

// Процедура заполняет таблицу распределения затрат
//
//  Параметры:
//		БазаРаспределения - ПеречислениеСсылка.ИНАГРО_СпособыРаспределенияЗатрат
//		НеобходимыеДанные - Структура - структура допоплнительных параметров
//
Процедура ИНАГРО_ЗаполнитьТЧРаспределение(БазаРаспределения, НеобходимыеДанные) Экспорт
	
	ИНАГРО_ОбщийСервер.ИНАГРО_ЗаполнитьТЧРаспределение(БазаРаспределения, НеобходимыеДанные);
		
КонецПроцедуры

#КонецОбласти

#Область АрендаЗемли

// Процедура рассчитывает НДФЛ для таблицы
//
//  Параметры:
//		ТаблицаКонтрагентов - ТаблицаЗначений
//		Дата                - Дата
//      СтавкаПодоходный    - Число - основная ставка НДФЛ
//
Процедура РассчитатьНДФЛДляТаблицы(ТаблицаКонтрагентов, Дата, СтавкаПодоходный) Экспорт
	
	ИНАГРО_ОбщийСервер.РассчитатьНДФЛДляТаблицы(ТаблицаКонтрагентов, Дата, СтавкаПодоходный);
	
КонецПроцедуры

// Процедура рассчитывает НДФЛ для таблицы обратым методом
//
//  Параметры:
//		ТаблицаКонтрагентов - ТаблицаЗначений
//		Дата                - Дата
//      СтавкаНДФЛ          - Число - ставка НДФЛ основная 
//  	СтавкаВС            - Число - ставка НДФЛ военного сбора
//
Процедура РассчитатьНДФЛДляТаблицыОбратный(ТаблицаКонтрагентов, Дата, СтавкаНДФЛ, СтавкаВС) Экспорт
	
	ИНАГРО_ОбщийСервер.РассчитатьНДФЛДляТаблицыОбратный(ТаблицаКонтрагентов, Дата, СтавкаНДФЛ, СтавкаВС);
    
КонецПроцедуры

#КонецОбласти

#Область ПрочийФункционал

// Устанавливает префикс источника подписки в соответствии с префиксом информационной базы и префиксом организации.
// Источник подписки должен содержать обязательный реквизит шапки "Организация", тип: "СправочникСсылка.Организации".
//
//  Параметры:
// 		Источник             - Источник события подписки.
//  	СтандартнаяОбработка - Булево - флаг стандартной обработки подписки
//  	Префикс              - Строка - префикс объекта, который нужно изменить
//
Процедура УстановитьПрефиксИнформационнойБазыИОрганизации(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	ИНАГРО_ОбщийСервер.УстановитьПрефиксИнформационнойБазыИОрганизации(Источник, СтандартнаяОбработка, Префикс);
		
КонецПроцедуры

// Возвращает номер без префикса
//
//  Параметры:
// 		Код                      - Строка.
//  	ВернутьКвоПравыхСимволов - Число - количество правых символов в коде
//
//	Возвращаемое значение:
//  	Строка                   - код без префикса                 
//
Функция ВернутьКодБезПрефикса(Код, ВернутьКвоПравыхСимволов = 0) Экспорт
	
	ВремКод = Код;
	
	Если ВернутьКвоПравыхСимволов > 0 Тогда
		
		ВремКод = Прав(Код, ВернутьКвоПравыхСимволов);
		
	Иначе
		
		Пока ((КодСимвола(Лев(ВремКод, 1)) > КодСимвола("9")) ИЛИ (КодСимвола(Лев(ВремКод, 1)) < КодСимвола("1"))) И (ВремКод <> "") Цикл
			ВремКод = Сред(ВремКод,2);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВремКод;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет субконто ТЧ распределения
//
// Параметры:
//	Получатель
//	Источник
//
Процедура ЗаполнитьСубконтоТЧРаспределение(Получатель, Источник) Экспорт
	
	ИНАГРО_ОбщийСервер.ЗаполнитьСубконтоТЧРаспределение(Получатель, Источник);
	
КонецПроцедуры

// Функция возвращает состав затратных счетов
// 
// 
Функция ИНАГРО_СписокСчетовЗатрат() Экспорт
	
	Возврат ИНАГРО_ОбщийСервер.ИНАГРО_СписокСчетовЗатрат();
	
КонецФункции

// Проверяет находится ли счет в иерархии списка счетов
//
//	Параметры:
//	 Счет 		  - счет
//   СписокСчетов - список счетов для проверки.
//
//  ВозвращаемоеЗначение: Ложь или Истина
Функция ИНАГРО_СчетВСпискеПоИерархии(Счет, СписокСчетов) Экспорт
	
	Возврат ИНАГРО_ОбщийСервер.ИНАГРО_СчетВСпискеПоИерархии(Счет, СписокСчетов);
		
КонецФункции

#КонецОбласти