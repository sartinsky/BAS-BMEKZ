#Область ПрограммныйИнтерфейс

// Раскладывает полное имя физического лица на составные части - фамилию, имя и отчество.
// Если в конце полного имени встречаются "оглы", "улы", "уулу", "кызы" или "гызы",
// то они также считаются частью отчества.
//
// Параметры:
//  ФамилияИмяОтчество - Строка - полное имя в виде "Фамилия Имя Отчество".
//
// Возвращаемое значение:
//  Структура - части полного имени:
//   * Фамилия  - Строка - фамилия;
//   * Имя      - Строка - имя;
//   * Отчество - Строка - отчество.
//
// Пример:
//   1. ФизическиеЛицаКлиентСервер.ЧастиИмени("Иванов Иван Иванович") 
//   вернет структуру со значениями свойств: "Иванов", "Иван", "Иванович".
//   2. ФизическиеЛицаКлиентСервер.ЧастиИмени("Смит Джон") 
//   вернет структуру со значениями свойств: "Смит", "Джон", "".
//   3. ФизическиеЛицаКлиентСервер.ЧастиИмени("Алиев Ахмед Октай оглы Мамедов") 
//   вернет структуру со значениями свойств: "Алиев", "Алиев", "Октай оглы Мамедов".
//
Функция ЧастиИмени(ФамилияИмяОтчество) Экспорт
	
	Результат = Новый Структура("Фамилия,Имя,Отчество");
	
	ЧастиИмени = СтрРазделить(ФамилияИмяОтчество, " ", Ложь);
	
	Если ЧастиИмени.Количество() >= 1 Тогда
		Результат.Фамилия = ЧастиИмени[0];
	КонецЕсли;
	
	Если ЧастиИмени.Количество() >= 2 Тогда
		Результат.Имя = ЧастиИмени[1];
	КонецЕсли;
	
	Если ЧастиИмени.Количество() >= 3 Тогда
		Результат.Отчество = ЧастиИмени[2];
	КонецЕсли;
	
	Если ЧастиИмени.Количество() > 3 Тогда
		ДополнительныеЧастиОтчества = Новый Массив;
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru='оглы';uk='огли'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru='улы';uk='ули'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru='уулу';uk='уулу'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru='кызы';uk='кизи'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru='гызы';uk='гизи'"));
		
		Если ДополнительныеЧастиОтчества.Найти(НРег(ЧастиИмени[3])) <> Неопределено Тогда
			Результат.Отчество = Результат.Отчество + " " + ЧастиИмени[3];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует краткое представление из полного имени физического лица.
//
// Параметры:
//  ФамилияИмяОтчество - Строка - полное имя в виде "Фамилия Имя Отчество";
//                     - Структура - части полного имени:
//                        * Фамилия  - Строка - фамилия;
//                        * Имя      - Строка - имя;
//                        * Отчество - Строка - отчество.
//
// Возвращаемое значение:
//  Строка - фамилия и инициалы. Например, "Пупкин В. И.".
//
// Пример:
//  Результат = ФизическиеЛицаКлиентСервер.ФамилияИнициалыФизЛица("Пупкин Василий Иванович"); 
//  - возвращает "Пупкин В. И.".
//
Функция ФамилияИнициалы(Знач ФамилияИмяОтчество) Экспорт
	
	Если ТипЗнч(ФамилияИмяОтчество) = Тип("Строка") Тогда
		ФамилияИмяОтчество = ЧастиИмени(ФамилияИмяОтчество);
	КонецЕсли;
	
	Фамилия = ФамилияИмяОтчество.Фамилия;
	Имя = ФамилияИмяОтчество.Имя;
	Отчество = ФамилияИмяОтчество.Отчество;
	
	Если ПустаяСтрока(Имя) Тогда
		Возврат Фамилия;
	КонецЕсли;
	
	Если ПустаяСтрока(Отчество) Тогда
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2.", Фамилия, Лев(Имя, 1));
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2.%3.", Фамилия, Лев(Имя, 1), Лев(Отчество, 1));
	
КонецФункции

// Проверяет, верно ли написано ФИО физического лица. 
// ФИО считается верным, если содержит только кириллицу, либо только латиницу.
//
// Параметры:
//  ФИО - Строка - фамилия, имя и отчество. Например, "Пупкин Василий Иванович".
//  ТолькоКириллица - Булево - при проверке допустимой будет только кириллица в ФИО.
//
// Возвращаемое значение:
//  Булево - Истина, если ФИО написано верно.
//
Функция ФИОНаписаноВерно(Знач ФИО, ТолькоКириллица = Ложь) Экспорт
	
	ДопустимыеСимволы = "-";
	
	Возврат (Не ТолькоКириллица И СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(ФИО, Ложь, ДопустимыеСимволы))
		Или СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(ФИО, Ложь, ДопустимыеСимволы);
	
КонецФункции

#Область УстаревшиеПроцедурыИФункции

// Устарела. Следует использовать ЧастиИмени.
//
// Функция раскладывает строку ФИО в структуру.
//
// Параметры:
//  ФИО - Строка - наименование.
//
// Возвращаемое значение:
//  Структура - фамилия, имя и отчество:
//   * Фамилия  - Строка - фамилия;
//   * Имя      - Строка - имя;
//   * Отчество - Строка - отчество.
//
Функция ФамилияИмяОтчество(Знач ФИО) Экспорт
	
	СтруктураФИО = Новый Структура("Фамилия, Имя, Отчество");
	
	МассивПодстрок = СтрРазделить(ФИО, " ", Ложь);
	
	Если МассивПодстрок.Количество() > 0 Тогда
		СтруктураФИО.Вставить("Фамилия", МассивПодстрок[0]);
		Если МассивПодстрок.Количество() > 1 Тогда
			СтруктураФИО.Вставить("Имя", МассивПодстрок[1]);
		КонецЕсли;
		Если МассивПодстрок.Количество() > 2 Тогда
			Отчество = "";
			Для Шаг = 2 По МассивПодстрок.Количество()-1 Цикл
				Отчество = Отчество + МассивПодстрок[Шаг] + " ";
			КонецЦикла;
			СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(Отчество, 1);
			СтруктураФИО.Вставить("Отчество", Отчество);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураФИО;
	
КонецФункции

// Устарела. Следует использовать функции ФамилияИнициалы и ЧастиИмени.
// Формирует фамилию и инициалы либо по переданным строкам.
//
// Параметры:
//  ФИОСтрокой	- Строка - если указан это параметр, то остальные игнорируются.
//  Фамилия		- Строка - фамилия физического лица.
//  Имя			- Строка - имя физического лица.
//  Отчество	- Строка - отчество физического лица.
//
// Возвращаемое значение:
//  Строка - фамилия и инициалы одной строкой. 
//  В параметрах Фамилия, Имя и Отчество записываются вычисленные части.
//
// Пример:
//  Результат = ФамилияИнициалыФизЛица("Иванов Иван Иванович"); // Результат = "Иванов И. И."
//
Функция ФамилияИнициалыФизЛица(ФИОСтрокой = "", Фамилия = " ", Имя = " ", Отчество = " ") Экспорт

	ТипОбъекта = ТипЗнч(ФИОСтрокой);
	Если ТипОбъекта = Тип("Строка") Тогда
		ФИО = СтрРазделить(ФИОСтрокой, " ", Ложь);
	Иначе
		// Используем возможно переданные отдельные строки.
		Возврат ?(Не ПустаяСтрока(Фамилия), 
		          Фамилия + ?(Не ПустаяСтрока(Имя), " " + Лев(Имя,1) + "." + ?(Не ПустаяСтрока(Отчество), Лев(Отчество,1) + ".", ""), ""),
		          "");
	КонецЕсли;
	
	КоличествоПодстрок = ФИО.Количество();
	Фамилия            = ?(КоличествоПодстрок > 0, ФИО[0], "");
	Имя                = ?(КоличествоПодстрок > 1, ФИО[1], "");
	Отчество           = ?(КоличествоПодстрок > 2, ФИО[2], "");
	
	Если КоличествоПодстрок > 3 Тогда
		ДополнительныеЧастиОтчества = Новый Массив;
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru='оглы';uk='огли'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru='улы';uk='ули'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru='уулу';uk='уулу'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru='кызы';uk='кизи'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru='гызы';uk='гизи'"));
		
		Если ДополнительныеЧастиОтчества.Найти(НРег(ФИО[3])) <> Неопределено Тогда
			Отчество = Отчество + " " + ФИО[3];
		КонецЕсли;
	КонецЕсли;
	
	Возврат ?(Не ПустаяСтрока(Фамилия), 
	          Фамилия + ?(Не ПустаяСтрока(Имя), " " + Лев(Имя, 1) + "." + ?(Не ПустаяСтрока(Отчество), Лев(Отчество, 1) + ".", ""), ""),
	          "");
	
КонецФункции

#КонецОбласти

#КонецОбласти
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Физические лица"
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает тип серии документа удостоверяющего личность
//
// Параметры:
//	ВидДокумента - Справочник.ВидыДокументовФизическихЛиц
//
// Возвращаемое значение:
//	Число	- тип серии для документа, 0 - требований к серии нет
//
Функция ТипСерииДокументаУдостоверяющегоЛичность(ВидДокумента) Экспорт
	
	//*?
	//ТипДокумента = 0;
	//Если ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортСССР")
	//	Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.СвидетельствоОРождении") Тогда
	//	ТипДокумента = 1;
	//	
	//ИначеЕсли ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.УдостоверениеОфицера")
	//	Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортМинморфлота")
	//	Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ВоенныйБилет")
	//	Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортМоряка")
	//	Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ВоенныйБилетОфицераЗапаса") Тогда
	//	ТипДокумента = 2;
	//	
	//ИначеЕсли ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ЗагранпаспортСССР")
	//	Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ДипломатическийПаспорт")
	//	Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ") Тогда
	//	ТипДокумента = 3;
	//	
	//ИначеЕсли ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ") Тогда
	//	ТипДокумента = 4;
	//	
	//КонецЕсли;
	ТипДокумента = 4;
	
	Возврат ТипДокумента;
	
КонецФункции

// Возвращает тип номера документа удостоверяющего личность
//
// Параметры:
//	ВидДокумента - Справочник.ВидыДокументовФизическихЛиц
//
// Возвращаемое значение:
//	Число	- тип номера для документа, 0 - требований к номеру нет
//
Функция ТипНомераДокументаУдостоверяющегоЛичность(ВидДокумента) Экспорт
	
	ТипДокумента = 0;
	Если ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.СвидетельствоОРождении")
		Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.Паспорт") Тогда
		ТипДокумента = 1;
		
	ИначеЕсли ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ДипломатическийПаспорт")
		Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.Загранпаспорт") Тогда
		ТипДокумента = 2;
		
	ИначеЕсли ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ВоенныйБилет")
		Или ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортМоряка") Тогда
		ТипДокумента = 3;
		
	КонецЕсли;
	
	Возврат ТипДокумента;
	
КонецФункции

// Проверяет, что серия документа для переданного вида документа указана правильно.
//
// Параметры:
//	ВидДокумента - СправочникСсылка.ВидыДокументовФизическихЛиц	- вид документа, для которого необходимо
//																проверить правильность серии
//	Серия - Строка												- серия документа
//	ТекстОшибки - Строка										- текст ошибки, если серия указана неправильно
//
// Возвращаемое значение:
//	Булево - результат проверки, Истина - правильно, Ложь - нет.
//
Функция СерияДокументаУказанаПравильно(ВидДокумента, Знач Серия , ТекстОшибки) Экспорт
	
	//ТипДокумента = ТипСерииДокументаУдостоверяющегоЛичность(ВидДокумента);
	//
	//Серия = СокрЛП(Серия);
	//
	//Если ТипДокумента = 1 Тогда // паспорт СССР и свидетельство о рождении
	//	
	//	Поз = Найти(Серия, "-");
	//	Если Поз = 0 Тогда
	//		ТекстОшибки = НСтр("ru='Серия документа должна состоять из двух частей, разделенных символом ""-"".';uk='Серія документа повинна складатися із двох частин, розділених символом ""-"".'");
	//		Возврат Ложь;
	//	КонецЕсли;
	//	
	//	ЧастьСерии1 = Лев(Серия, Поз - 1);
	//	ЧастьСерии2 = СокрЛП(Сред(Серия, Поз + 1));
	//	
	//	Поз = Найти(ЧастьСерии2, "-");
	//	Если Поз <> 0 Тогда
	//		ТекстОшибки = НСтр("ru='В серии документа должно быть только две группы символов.';uk='У серії документа повинне бути тільки дві групи символів.'");
	//		Возврат Ложь;
	//	КонецЕсли;
	//	
	//	Если ПустаяСтрока(ЧастьСерии1) Тогда
	//		ТекстОшибки = НСтр("ru='В серии документа отсутствует числовая часть.';uk='У серії документа відсутня числова частина.'");
	//		Возврат Ложь;
	//		
	//	ИначеЕсли  ПустаяСтрока(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("IVXLC1УХЛС", ЧастьСерии1, "          ")) = 0 Тогда
	//		ТекстОшибки = НСтр("ru='Числовая часть серии документа должна указываться символами 1 У Х Л С  или  I V X L C.';uk='Числова частина серії документа повинна вказуватися символами 1 У Х Л С  або  I V X L C.'");
	//		Возврат Ложь;
	//		
	//	ИначеЕсли СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("IVXLC", ЧастьСерии1, "1УХЛС") <> СтроковыеФункцииКлиентСервер.ПреобразоватьЧислоВРимскуюНотацию(СтроковыеФункцииКлиентСервер.ПреобразоватьЧислоВАрабскуюНотацию(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("IVXLC", ЧастьСерии1, "1УХЛС"))) Тогда
	//		ТекстОшибки = НСтр("ru='Числовая часть серии документа указана некорректно.';uk='Числова частина серії документа зазначена некоректно.'");
	//		Возврат Ложь;
	//		
	//	ИначеЕсли СтрДлина(ЧастьСерии2) <> 2 Или Не ПустаяСтрока(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ", ЧастьСерии2, "                                 ")) Тогда
	//		ТекстОшибки = НСтр("ru='После разделителя ""-"" в серии документа должны быть ДВЕ pусcкие заглавные буквы.';uk='Після роздільника ""-"" у серії документа повинні бути ДВІ російські великі літери.'");
	//		Возврат Ложь;
	//		
	//	КонецЕсли;
	//	
	//ИначеЕсли ТипДокумента = 2 Тогда // серия - две буквы: военный билет, ...
	//	Если СтрДлина(Серия) <> 2 Или Не ПустаяСтрока(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ", Серия, "                                 ")) Тогда
	//		ТекстОшибки = НСтр("ru='В серии документа должны быть ДВЕ pусcкие заглавные буквы.';uk='У серії документа повинні бути ДВІ російські великі літери.'");
	//		Возврат Ложь;
	//	КонецЕсли;
	//	
	//ИначеЕсли ТипДокумента = 3 Тогда // серия - две цифры: загранпаспорта
	//	Если СтрДлина(Серия) <> 2 Или Не ПустаяСтрока(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("0123456789", Серия, "          ")) Тогда
	//		ТекстОшибки = НСтр("ru='В серии документа должно быть ДВЕ цифры.';uk='У серії документа повинне бути ДВІ цифри.'");
	//		Возврат Ложь;
	//	КонецЕсли;
	//	
	//ИначеЕсли ТипДокумента = 4 Тогда // серия - две группы цифр: новый паспорт
	//	Поз = Найти(Серия, " ");
	//	Если Поз = 0 Тогда
	//		ТекстОшибки = НСтр("ru='В серии документа должно быть две группы цифр.';uk='У серії документа повинне бути дві групи цифр.'");
	//		Возврат Ложь;
	//	КонецЕсли;
	//	
	//	ПерваяЧасть = Лев(Серия, Поз-1);
	//	ВтораяЧасть = СокрЛП(Сред(Серия, Поз+1));
	//	
	//	Поз = Найти(ВтораяЧасть, " ");
	//	Если Поз <> 0 Тогда
	//		ТекстОшибки = НСтр("ru='В серии документа должно быть только две группы цифр.';uk='У серії документа повинне бути тільки дві групи цифр.'");
	//		Возврат Ложь;
	//	КонецЕсли;
	//	
	//	Если СтрДлина(ПерваяЧасть) <> 2 Или Не ПустаяСтрока(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("0123456789", ПерваяЧасть, "          ")) Тогда
	//		ТекстОшибки = НСтр("ru='Первая группа символов серии документа должна содержать две цифры.';uk='Перша група символів серії документа винна містити дві цифри.'");
	//		Возврат Ложь;
	//	КонецЕсли;
	//	
	//	Если СтрДлина(ВтораяЧасть) <> 2 Или Не ПустаяСтрока(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("0123456789", ВтораяЧасть, "          ")) Тогда
	//		ТекстОшибки = НСтр("ru='Вторая группа символов серии документа должна содержать две цифры.';uk='Друга група символів серії документа повинна містити дві цифри.'");
	//		Возврат Ложь;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	Возврат Истина;
	
КонецФункции

// Проверяет, что номер документа для переданного вида документа указан правильно.
//
// Параметры:
//	ВидДокумента - СправочникСсылка.ВидыДокументовФизическихЛиц	- вид документа, для которого необходимо
//																проверить правильность номера
//	Номер - Строка												- номер документа
//	ТекстОшибки - Строка										- текст ошибки, если номер указан неправильно
//
// Возвращаемое значение:
//	Булево - результат проверки, Истина - правильно, Ложь - нет.
//
Функция НомерДокументаУказанПравильно(ВидДокумента, Знач Номер, ТекстОшибки) Экспорт
	
	Если Не ПустаяСтрока(СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("0123456789", Номер, "          ")) Тогда
		ТекстОшибки = НСтр("ru='В номере документа присутствуют недопустимые символы.';uk='У номері документа присутні неприпустимі символи.'");
		Возврат Ложь;
	КонецЕсли;
	
	ТипДокумента = ТипНомераДокументаУдостоверяющегоЛичность(ВидДокумента);
	
	ДлинаНомера = СтрДлина(СокрЛП(Номер));
	
	Если ТипДокумента = 1 Тогда
		Если ДлинаНомера <> 6 Тогда
			ТекстОшибки = НСтр("ru='Номер документа должен состоять из 6 символов.';uk='Номер документа повинен складатися з 6 символів.'");
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = 2 Тогда
		Если ДлинаНомера <> 7 Тогда
			ТекстОшибки = НСтр("ru='Номер документа должен состоять из 7 символов.';uk='Номер документа повинен складатися з 7 символів.'");
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипДокумента = 3 Тогда
		Если (ДлинаНомера < 6 ) Или ( ДлинаНомера > 7 ) Тогда
			ТекстОшибки = НСтр("ru='Номер документа должен состоять из 6 или 7 символов.';uk='Номер документа повинен складатися з 6 або 7 символів.'");
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет соответствие ДРФО требованиям.
//
// Параметры:
//  ДРФО          	- Строка - Проверяемый индивидуальный номер налогоплательщика.
//  ТекстСообщения 	- Строка - Текст сообщения о найденных ошибках.
//
// Возвращаемое значение:
//  Истина       - ДРФО соответствует требованиям;
//  Ложь         - ДРФО не соответствует требованиям.
//
Функция ДРФОСоответствуетТребованиям(Знач ДРФО, ТекстСообщения) Экспорт

	СоответствуетТребованиям = Истина;
	ТекстСообщения = "";

	ДРФО      = СокрЛП(ДРФО);
	ДлинаДРФО = СтрДлина(ДРФО);

	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ДРФО) Тогда
		СоответствуетТребованиям = Ложь;
		ТекстСообщения = ТекстСообщения + НСтр("ru='ДРФО должен состоять только из цифр.';uk='ДРФО повинен складатися тільки з цифр.'");
	КонецЕсли;

	Если  ДлинаДРФО <> 10 Тогда
		СоответствуетТребованиям = Ложь;
		ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(ТекстСообщения), Символы.ПС, "")
		               + НСтр("ru='ДРФО физического лица должен состоять из 10 цифр.';uk='ДРФО фізичної особи повинен складатися з 10 цифр.'");
	КонецЕсли;

	Возврат СоответствуетТребованиям;

КонецФункции 
