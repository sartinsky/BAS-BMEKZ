

/////////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ ПОГАШЕНИЯ СТОИМОСТИ

// Функция получает таблицу значений с указанием списка малоценных активов и сумм 
// погашения стоимости и возвращает таблицу значений с распределенными 
// значениями погашения стоимости.
//
Функция ПолучитьРаспределениеПогашенияСтоимости(ДокОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, НомерЖурнала, ТекстПроводки = Неопределено) Экспорт

	ДатаРасчета   = ДокОбъект.Дата;
    СуммаНа09Счет = 0;
	
	// определим структуру выходной таблицы
	ТабЗатрат = Новый ТаблицаЗначений;
	ТабЗатрат.Колонки.Добавить("Сумма", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла( 15, 2));
	ТабЗатрат.Колонки.Добавить("СуммаНУ", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла( 15, 2));
	ТабЗатрат.Колонки.Добавить("НалоговоеНазначение",      			Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТабЗатрат.Колонки.Добавить("НалоговоеНазначениеДоходовИЗатрат", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТабЗатрат.Колонки.Добавить("СчетЗатрат");
	ТабЗатрат.Колонки.Добавить("СчетАмортизации");
	ТабЗатрат.Колонки.Добавить("ОбъектУчета");
	ТабЗатрат.Колонки.Добавить("Субконто1");
	ТабЗатрат.Колонки.Добавить("Субконто2");
	ТабЗатрат.Колонки.Добавить("Субконто3");
	ТабЗатрат.Колонки.Добавить("Партия");
	ТабЗатрат.Колонки.Добавить("Склад");
	ТабЗатрат.Колонки.Добавить("Количество");

	МассивКоэф = Новый Массив;

	// цикл по Объектам из ТабАмортизации
	Для Каждого СтрокаТЗ Из ТабАмортизации Цикл

		Если СтрокаТЗ.Сумма=0 тогда
			//Распределять амортизацию не надо, так как распределять нечего.
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.НаправлениеАмортизации) Тогда
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для объекта %1 не указаны способы отражения расходов по амортизации';uk=""Для об'єкта %1 не вказані способи відображення витрат по амортизації"""), СтрокаТЗ.ОбъектУчета);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			Продолжить;
		КонецЕсли;

		Если СтрокаТЗ.НаправлениеАмортизации.Способы.Количество() = 0 Тогда
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для объекта %1 в способах отражения затрат по амортизации нет записей';uk=""Для об'єкта %1 у способах відображення витрат по амортизації немає записів"""), СтрокаТЗ.ОбъектУчета);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			Продолжить;
		КонецЕсли;

		МассивКоэф.Очистить();
		Для Каждого СтрокаНапр Из СтрокаТЗ.НаправлениеАмортизации.Способы Цикл
			МассивКоэф.Добавить(СтрокаНапр.Коэффициент);
		КонецЦикла;

		МассивСумм 		= ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СтрокаТЗ.Сумма, МассивКоэф, 2);
		
		МассивСуммНУ 	= ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СтрокаТЗ.СуммаНУ, МассивКоэф, 2);
		
		Если МассивСумм = Неопределено Тогда
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для объекта %1 в способах отражения расходов по амортизации не проставлены коэффициенты';uk=""Для об'єкта %1 у способах відображення витрат по амортизації не проставлені коефіцієнти"""), СтрокаТЗ.ОбъектУчета);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			Продолжить;
		КонецЕсли;

		Если МассивСумм.Количество() <> МассивКоэф.Количество() Тогда
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для объекта %1 в способах отражения затрат по амортизации есть нулевые коэффициенты';uk=""Для об'єкта %1 у способах відображення витрат по амортизації є нульові коефіцієнти"""), СтрокаТЗ.ОбъектУчета);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			Продолжить;
		КонецЕсли;

		НеМБП      = (СтрокаТЗ.ВидМалоценногоАктива <> Перечисления.ВидыМалоценныхАктивов.МалоценныйБыстроизнашивающийсяПредмет);
		Количество = СтрокаТЗ.Количество;
		
		Для Каждого СтрокаНапр Из СтрокаТЗ.НаправлениеАмортизации.Способы Цикл
			
			НоваяСтрока = ТабЗатрат.Добавить();
			НоваяСтрока.СчетЗатрат      = СтрокаНапр.СчетЗатрат;
			НоваяСтрока.ОбъектУчета     = СтрокаТЗ.ОбъектУчета;
			НоваяСтрока.СчетАмортизации = СтрокаТЗ.СчетАмортизации;
			НоваяСтрока.Субконто1       = СтрокаНапр.Субконто1;
			НоваяСтрока.Субконто2       = СтрокаНапр.Субконто2;
			НоваяСтрока.Субконто3       = СтрокаНапр.Субконто3;
			
			ТипПодразделение = Тип("СправочникСсылка.ПодразделенияОрганизаций");
			
			Если ТипЗнч(НоваяСтрока.Субконто1) = ТипПодразделение Тогда
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Субконто1) Тогда
					// получаем по местонахождению объекта
					НоваяСтрока.Субконто1 = СтрокаТЗ.Местонахождение;
				КонецЕсли;	
			ИначеЕсли ТипЗнч(НоваяСтрока.Субконто2) = ТипПодразделение Тогда	
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Субконто2) Тогда
					// получаем по местонахождению объекта
					НоваяСтрока.Субконто2 = СтрокаТЗ.Местонахождение;
				КонецЕсли;	
			ИначеЕсли ТипЗнч(НоваяСтрока.Субконто3) = ТипПодразделение Тогда	
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Субконто3) Тогда
					// получаем по местонахождению объекта
					НоваяСтрока.Субконто3 = СтрокаТЗ.Местонахождение;
				КонецЕсли;	
			КонецЕсли;	
			
			НоваяСтрока.Партия          = СтрокаТЗ.Партия;
			НоваяСтрока.Склад           = СтрокаТЗ.Склад;
			НоваяСтрока.Количество      = Количество;
			
			// Количество только в первой проводке.
			Количество = 0;
			
			СуммаЗатр         = МассивСумм[СтрокаНапр.НомерСтроки - 1];
			НоваяСтрока.Сумма = СуммаЗатр;
			
			Если МассивСуммНУ <> Неопределено Тогда
				НоваяСтрока.СуммаНУ = МассивСуммНУ[СтрокаНапр.НомерСтроки - 1];
			КонецЕсли;	
			НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат 	= СтрокаНапр.НалоговоеНазначениеДоходовИЗатрат;
			
			НоваяСтрока.НалоговоеНазначение 				= СтрокаТЗ.НалоговоеНазначение;
			
			
			НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(НоваяСтрока, НоваяСтрока.СчетЗатрат, ,
																   	НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат, , 
																	НоваяСтрока.НалоговоеНазначение, НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат,
																	,ДатаРасчета
																	, 
																	, СтруктураШапкиДокумента.ЕстьНДС
																	);
			
																	
			Если СтруктураШапкиДокумента.ЕстьНДС И СтрокаНапр.СчетЗатрат.УчетПоНалоговымНазначениямНДС Тогда
		 		Если НоваяСтрока.СуммаНУ <> 0 Тогда
		 			СтрокаСообщенияДоп = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' (Способ отражения: ""%1"", строка № %2)';uk=' (Спосіб відображення: ""%1"", рядок № %2)'"), СтрокаТЗ.НаправлениеАмортизации, СтрокаНапр.НомерСтроки);
		 			УправлениеНеоборотнымиАктивами.ПроверитьСоответствиеНалоговогоНазначенияАмортизации(НоваяСтрока.ОбъектУчета, НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат, НоваяСтрока.НалоговоеНазначение, Отказ, СтрокаСообщенияДоп);
				КонецЕсли;
			КонецЕсли;
																	
			Если НеМБП Тогда
				
				СуммаНа09Счет = СуммаНа09Счет + СуммаЗатр;	
				
			КонецЕсли;	
				
		КонецЦикла;

	КонецЦикла;

	ДопПараметры = Новый Структура;
	
	//формирование проводок
	Проводки = ДокОбъект.Движения.Хозрасчетный;
	
	Для каждого СтрокаЗатрат из ТабЗатрат Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаЗатрат.Сумма) И НЕ ЗначениеЗаполнено(СтрокаЗатрат.Количество) Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Проводки.Добавить();
		
		Проводка.Период       = ДатаРасчета;
		Проводка.Содержание   = ?(НЕ ЗначениеЗаполнено(ТекстПроводки), НСтр("ru='Начислена амортизация';uk='Нараховано амортизацію'",Локализация.КодЯзыкаИнформационнойБазы()), ТекстПроводки);
		Проводка.НомерЖурнала = НомерЖурнала;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма        = СтрокаЗатрат.Сумма;
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда               
			Проводка.СуммаНУДт    = СтрокаЗатрат.СуммаНУ;
		КонецЕсли;
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 ИЛИ СтрокаЗатрат.НалоговоеНазначениеДоходовИЗатрат.ГруппаНалоговогоНазначения = Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС Тогда
			Проводка.НалоговоеНазначениеДт      = СтрокаЗатрат.НалоговоеНазначениеДоходовИЗатрат;
		КонецЕсли;	
		
		Проводка.СчетДт = СтрокаЗатрат.СчетЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, 1, СтрокаЗатрат.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, 2, СтрокаЗатрат.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, 3, СтрокаЗатрат.Субконто3);
		
		Проводка.СчетКт = СтрокаЗатрат.СчетАмортизации;
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда               
			Проводка.СуммаНУКт      = СтрокаЗатрат.СуммаНУ;
			Проводка.НалоговоеНазначениеКт      = СтрокаЗатрат.НалоговоеНазначение;
		Иначе
			Если Проводка.СчетКт.УчетСуммНУ Тогда
				Проводка.СуммаНУКт      = СтрокаЗатрат.СуммаНУ;
			КонецЕсли; 
			Проводка.НалоговоеНазначениеКт      = СтрокаЗатрат.НалоговоеНазначение;
		КонецЕсли;
		
		Проводка.КоличествоКт = СтрокаЗатрат.Количество;
		БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетАмортизации, Проводка.СубконтоКт, "Номенклатура", СтрокаЗатрат.ОбъектУчета);
		БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетАмортизации, Проводка.СубконтоКт, "Партии"      , СтрокаЗатрат.Партия);
		БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетАмортизации, Проводка.СубконтоКт, "Склады"      , СтрокаЗатрат.Склад);
		
	КонецЦикла;

	// Отражение амортизации на 09 счете
	
	СуммаПроводки = СуммаНа09Счет;
	
	Если СуммаПроводки <> 0 Тогда
		
		Проводка = Проводки.Добавить();
		
		Проводка.Период       = ДатаРасчета;
		Проводка.Содержание   = НСтр("ru='Отражение амортизации на 09 счете';uk='Відображення амортизації на 09 рахунку'",Локализация.КодЯзыкаИнформационнойБазы());
		Проводка.НомерЖурнала = НомерЖурнала;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма        = СуммаПроводки;
		
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.АмортизационныеОтчисления;
		
	КонецЕсли;
	
	Возврат ТабЗатрат;

КонецФункции // ПолучитьРаспределениеПогашенияСтоимости()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СПИСАНИЯ ПАРТИЙ МАТЕРИАЛОВ

// Добавляет строку в ТаблицуСообщений
//
// Параметры
//    ТипУчета – Тип: Строка –  тип учета (1.Упр, 2.Бух, 3.Нал)
//                 
//    ОсталосьСписать – Тип: Число – Сколько не списано по партиям
//                 
//    СтрокаТЧ – Тип: Строка таблицы значений – строка табличной части
//                 
//    ТаблицаСообщений – Тип: ТаблицаЗначений – таблица сообщений
//                 
//
Процедура ДобавитьИнформациюДляСообщений(ОсталосьСписать, СтрокаТЧ, ТаблицаСообщений)

	НоваяСтрока = ТаблицаСообщений.Добавить();
	НоваяСтрока.НомерСтроки          = СтрокаТЧ.НомерСтроки;
	НоваяСтрока.ОсталосьСписать      = ОсталосьСписать;
	НоваяСтрока.СтрокаТаблицы        = СтрокаТЧ;

КонецПроцедуры // ДобавитьИнформациюДляСообщений()

// Процедура очищает значения структуры ключевых полей
// 
Процедура ОчиститьЗначенияСтруктурыКлючевыхПолей(СтруктураКлючевыхПолей)

	Для каждого КлючЗначение Из СтруктураКлючевыхПолей Цикл
	
		СтруктураКлючевыхПолей.Вставить(КлючЗначение.Ключ, Неопределено);	
	
	КонецЦикла;	

КонецПроцедуры // ОчиститьЗначенияСтруктурыКлючевыхПолей()

// Функция проверяет, изменились ли ключевые поля в строке табличной части
// по отношению к текущим значениям. Если изменились то изменяет текущие значения
//
// Параметры
// 	СтрокаТЧ  – Тип:Строка таблицы значений – строка для проверки 
//                 
//  СтруктураКлючевыхПолей  – Тип: Структура – структура текущих значений
//                 
//
// Возвращаемое значение:
//   Тип: Булево  –  Истина, если изменились поля
//
Функция ИзменилисьКлючевыеПоля(СтрокаТЧ, СтруктураКлючевыхПолей)

	Результат = Ложь;
	
	Для каждого КлючЗначение Из СтруктураКлючевыхПолей Цикл
		
		ИмяКолонки = КлючЗначение.Ключ;
		
		Если СтрокаТЧ[ИмяКолонки] <> КлючЗначение.Значение Тогда
			
			 СтруктураКлючевыхПолей.Вставить(ИмяКолонки, СтрокаТЧ[ИмяКолонки]);
			 Результат = Истина;
			
		КонецЕсли;			
	
	КонецЦикла;
	
	Возврат Результат;

КонецФункции // ИзменилисьКлючевыеПоля()

// Заполняет строку таблицы движения необходимыми значениями для списания партии
//
Процедура СписатьПартиюМалоценныхАктивов(КоэфСписания, СтруктураОстатков, СтрокаТЧ, 
	                              Выборка, СтруктураШапкиДокумента, Проводки)
								  
	ДатаДока     = СтруктураШапкиДокумента.Дата;
	Организация  = СтруктураШапкиДокумента.Организация;
	НомерЖурнала = НСтр("ru='МЦ';uk='МЦ'",Локализация.КодЯзыкаИнформационнойБазы());
	
	СуммаПроводки               = КоэфСписания * СтруктураОстатков.Стоимость;
	СтруктураОстатков.Стоимость = СтруктураОстатков.Стоимость - СуммаПроводки;
	
	СуммаПроводкиНУ               = КоэфСписания * СтруктураОстатков.СтоимостьНУ;
	СтруктураОстатков.СтоимостьНУ = СтруктураОстатков.СтоимостьНУ - СуммаПроводкиНУ;
	
	КоличествоПроводки           = КоэфСписания * СтруктураОстатков.Количество;
	СтруктураОстатков.Количество = СтруктураОстатков.Количество - КоличествоПроводки;
	
	Если СтруктураШапкиДокумента.КодОперации = "Перемещение" Тогда
		
		Содержание = НСтр("ru='Перемещение малоценных активов в эксплуатации';uk='Переміщення малоцінних активів в експлуатації'",Локализация.КодЯзыкаИнформационнойБазы());
		
	Иначе // Списание
		
		Содержание = НСтр("ru='Списание малоценных активов из эксплуатации';uk='Списання малоцінних активів з експлуатації'",Локализация.КодЯзыкаИнформационнойБазы());
		
	КонецЕсли;
	
	// Списание со счета МЦ
	Проводка = Проводки.Добавить();
	
	Проводка.Период       = ДатаДока;
	Проводка.Содержание   = Содержание;
	Проводка.НомерЖурнала = НомерЖурнала;
	Проводка.Организация  = Организация;
	Проводка.Сумма        = СуммаПроводки;
	
	Проводка.СуммаНУДт      = СуммаПроводкиНУ;
	Проводка.НалоговоеНазначениеДт      = Выборка.НалоговоеНазначение;
	
	Если СтруктураШапкиДокумента.КодОперации = "Перемещение" Тогда
		
		Проводка.СчетДт = ПланыСчетов.Хозрасчетный.МалоценныеАктивыВЭксплуатации;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций"        , СтруктураШапкиДокумента.ФизЛицоКуда);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "НазначенияИспользования"     , СтрокаТЧ.НазначениеИспользованияНовое);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "ПартииМалоценныхАктивовВЭксплуатации", Выборка.ПартияМалоценныхАктивовВЭксплуатации);
		Проводка.КоличествоДт = КоличествоПроводки;
		
	КонецЕсли;
	
	Проводка.СуммаНУКт      = СуммаПроводкиНУ;
	Проводка.НалоговоеНазначениеКт      = Выборка.НалоговоеНазначение;
	
	Проводка.СчетКт = ПланыСчетов.Хозрасчетный.МалоценныеАктивыВЭксплуатации;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций"        , Выборка.ФизЛицо);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НазначенияИспользования"     , Выборка.НазначениеИспользования);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ПартииМалоценныхАктивовВЭксплуатации", Выборка.ПартияМалоценныхАктивовВЭксплуатации);
	Проводка.КоличествоКт = КоличествоПроводки;

	Если (СтрокаТЧ.ВидМалоценногоАктива <> Перечисления.ВидыМалоценныхАктивов.МалоценныйБыстроизнашивающийсяПредмет) Тогда
		
		// Особенности поведения, зависимые от вида операции
		Если СтруктураШапкиДокумента.КодОперации = "Перемещение" Тогда
			
			Если  Выборка.НазначениеИспользования <> СтрокаТЧ.НазначениеИспользованияНовое Тогда
				// возможно нужны корректировочные проводки
				
				Если СтрокаТЧ.СчетПередачиБУ <> СтрокаТЧ.СчетПередачиБУНовый Тогда
					
					// проводка нужна даже если СуммаПроводки = 0,
					// потому что есть количество
					Проводка = Проводки.Добавить();
					
					Проводка.Период       = ДатаДока;
					Проводка.Содержание   = Содержание;
					Проводка.НомерЖурнала = НомерЖурнала;
					Проводка.Организация  = Организация;
					Проводка.Сумма        = СуммаПроводки;
					
					Проводка.СчетДт = СтрокаТЧ.СчетПередачиБУНовый;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТЧ.Номенклатура);
					Проводка.КоличествоДт = КоличествоПроводки;
					
					Проводка.СчетКт = СтрокаТЧ.СчетПередачиБУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТЧ.Номенклатура);
					Проводка.КоличествоКт = КоличествоПроводки;
					
				КонецЕсли;
				
				Если (СтрокаТЧ.СчетАмортизацииБУ <> СтрокаТЧ.СчетАмортизацииБУНовый) И (СуммаПроводки <> 0) Тогда
					
					// проводка нужна даже если СуммаПроводки = 0,
					// потому что есть количество
					Проводка = Проводки.Добавить();
					
					Проводка.Период       = ДатаДока;
					Проводка.Содержание   = Содержание;
					Проводка.НомерЖурнала = НомерЖурнала;
					Проводка.Организация  = Организация;
					Проводка.Сумма        = СуммаПроводки;
					
					Проводка.СчетДт = СтрокаТЧ.СчетАмортизацииБУ;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТЧ.Номенклатура);
					
					Проводка.СчетКт = СтрокаТЧ.СчетАмортизацииБУНовый;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТЧ.Номенклатура);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // Списание
			
			// Нужно погасить амортизацию для необоротных активов
			
			// проводка нужна даже если СуммаПроводки = 0,
			// потому что есть количество
			Проводка = Проводки.Добавить();
			
			Проводка.Период       = ДатаДока;
			Проводка.Содержание   = Содержание;
			Проводка.НомерЖурнала = НомерЖурнала;
			Проводка.Организация  = Организация;
			Проводка.Сумма        = СуммаПроводки;
			
			Проводка.СуммаНУДт      = СуммаПроводкиНУ;
			Проводка.НалоговоеНазначениеДт      = Выборка.НалоговоеНазначение;
			
			Проводка.СчетДт = СтрокаТЧ.СчетАмортизацииБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтрокаТЧ.Номенклатура);
			
			Проводка.СуммаНУКт      = СуммаПроводкиНУ;
			Проводка.НалоговоеНазначениеКт      = Выборка.НалоговоеНазначение;
			
			Проводка.СчетКт = СтрокаТЧ.СчетПередачиБУ;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", СтрокаТЧ.Номенклатура);
			Проводка.КоличествоКт = КоличествоПроводки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // СписатьПартиюМалоценныхАктивов()

// Заполняет структуру остатков по выборке
//
Процедура ЗаполнитьСтруктуруОстатков(СтруктураОстатков, Выборка)

	СтруктураОстатков.Вставить("Количество", Выборка.Количество);
	СтруктураОстатков.Вставить("Стоимость" , Выборка.Стоимость);
	СтруктураОстатков.Вставить("СтоимостьНУ" , Выборка.СтоимостьНУ);

КонецПроцедуры // ЗаполнитьСтруктуруОстатков()

// Производит заполнение таблицы движений для загрузки в набор движений
//
Процедура ПроизвестиСписаниеМалоценныхАктивов(СтруктураКлючевыхПолей, Выборка, 
	                                  ТаблицаДокумента, ТаблицаСообщений,
									  СтруктураШапкиДокумента, Проводки)

	СтруктураОстатков = Новый Структура;
	ОчиститьЗначенияСтруктурыКлючевыхПолей(СтруктураКлючевыхПолей);
	
	//Обход таблицы документа и списание партий
	Для каждого СтрокаТЧ Из ТаблицаДокумента Цикл
		
		ОсталосьСписать = СтрокаТЧ.Количество;
	
		Если ИзменилисьКлючевыеПоля(СтрокаТЧ, СтруктураКлючевыхПолей) Тогда
			
			// Сброс выборки. Это более надежно.
			Выборка.Сбросить();
			
			Если НЕ Выборка.НайтиСледующий(СтруктураКлючевыхПолей) Тогда
				
				// Нет необходимых остатков
				ДобавитьИнформациюДляСообщений(ОсталосьСписать, СтрокаТЧ, ТаблицаСообщений);
				СтруктураОстатков.Очистить();
				СтруктураОстатков.Вставить("Количество", 0);
				Продолжить;
				
			КонецЕсли;
			
			ЗаполнитьСтруктуруОстатков(СтруктураОстатков, Выборка);
			
		КонецЕсли;
		
		// Списание партий
		Пока ОсталосьСписать > 0 Цикл
			
			Остаток = СтруктураОстатков.Количество;
			
			Если Остаток <= 0 Тогда
				
				Если НЕ Выборка.НайтиСледующий(СтруктураКлючевыхПолей) Тогда
					
					// Нет необходимых остатков
					ДобавитьИнформациюДляСообщений(ОсталосьСписать, СтрокаТЧ, ТаблицаСообщений);
					Прервать;
					
				КонецЕсли;
				
				ЗаполнитьСтруктуруОстатков(СтруктураОстатков, Выборка);
				
			Иначе
				
				Если ОсталосьСписать < Остаток Тогда
					// Все количество спишется с текущей партии
					
					КоэфСписания    = ОсталосьСписать / Остаток;
					ОсталосьСписать = 0;
					
				Иначе
					// Остаток меньше или равен тому, что нужно списать
					// списываем все
					КоэфСписания = 1;
					ОсталосьСписать = ОсталосьСписать - Остаток;
					
				КонецЕсли;	
				
				СписатьПартиюМалоценныхАктивов(КоэфСписания,
				                       СтруктураОстатков,
									   СтрокаТЧ,
									   Выборка,
									   СтруктураШапкиДокумента,
									   Проводки);
			
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры // ПроизвестиСписаниеМалоценныхАктивов()

// Процедура проводит переданный документ по учету партий малоценных активов
//
// Параметры
//  ОбрабатываемыйДокумент - ДокументСсылка - проводимый документ
//  ТаблицаДокумента – ТаблицаЗначение – содержит таблицу проведения документа
//
Процедура ДвижениеПартийМалоценныхАктивов(СтруктураШапкиДокумента, ТаблицаДокумента, ПроводкиБУ, Отказ, Заголовок) Экспорт
	
	Если ТаблицаДокумента.Количество() = 0 Тогда
		
		//Нечего делать
		Возврат;
	 	                           
	КонецЕсли;
	
	// Заполнение необходимых переменных
	Организация              = СтруктураШапкиДокумента.Организация;
	ПодразделениеОрганизации = СтруктураШапкиДокумента.ПодразделениеОрганизации;
	УказыватьПартию          = СтруктураШапкиДокумента.УказыватьПартию;
	ОбрабатываемыйДокумент   = СтруктураШапкиДокумента.Ссылка;
	
	// Создание таблицы сообщений.
	// Эта таблица будет накопливать информацию для сообщений пользователю
	// Списание партий не всегда будет совпадать с порядком следования                            
	// строк в документе, а сообщения  пользователю удобно получать
	// в этом порядке
	ТаблицаСообщений = Новый ТаблицаЗначений;
	ТаблицаСообщений.Колонки.Добавить("НомерСтроки", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,0));
	ТаблицаСообщений.Колонки.Добавить("ОсталосьСписать"     , ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,3));
	ТаблицаСообщений.Колонки.Добавить("СтрокаТаблицы");
	
	// Создание структуры ключевых измерений
	СтруктураКлючевыхПолей = Новый Структура;
	СтруктураКлючевыхПолей.Вставить("ФизЛицо"                , "Субконто1");
	СтруктураКлючевыхПолей.Вставить("НазначениеИспользования", "Субконто2");
	
	СтруктураКлючевыхПолей.Вставить("НалоговоеНазначение", "НалоговоеНазначение");
	
	Если УказыватьПартию Тогда                                          
		
		СтруктураКлючевыхПолей.Вставить("ПартияМалоценныхАктивовВЭксплуатации", "Субконто3");
		
	КонецЕсли;
	
	// Создание строки ключевых колонок для таблицы
	СтрокаКолонок = "";
	Разделитель   = "";
	
	Для каждого КлючЗначение Из СтруктураКлючевыхПолей Цикл
	
		СтрокаКолонок = СтрокаКолонок + Разделитель + КлючЗначение.Ключ;
		Разделитель = ",";
	
	КонецЦикла;
	
	// Создание запроса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаДату"                  , ОбрабатываемыйДокумент.МоментВремени());
	Запрос.УстановитьПараметр("Организация"             , Организация);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделениеОрганизации);
	
	Запрос.УстановитьПараметр("СчетМЦ", ПланыСчетов.Хозрасчетный.МалоценныеАктивыВЭксплуатации);
	
	МассивСубконтоМЦ = Новый Массив(3);
	МассивСубконтоМЦ[0] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций;
	МассивСубконтоМЦ[1] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НазначенияИспользования;
	МассивСубконтоМЦ[2] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМалоценныхАктивовВЭксплуатации;
	Запрос.УстановитьПараметр("СубконтоМЦ", МассивСубконтоМЦ);
	
	// Создание фильтра для остатков регистра
	СтрокаФильтра = "";
	Разделитель   = Символы.ПС + " И ";
	
	Для каждого КлючЗначение Из СтруктураКлючевыхПолей Цикл
		
		ИмяПеременной = КлючЗначение.Ключ;
		МассивОтбора  = ТаблицаДокумента.ВыгрузитьКолонку(ИмяПеременной);
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивОтбора);
		
		Если МассивОтбора.Количество() = 1 Тогда
			
			СтрокаФильтра = СтрокаФильтра + Разделитель 
							+ КлючЗначение.Значение + " = &" + ИмяПеременной;
			Запрос.УстановитьПараметр(ИмяПеременной, МассивОтбора[0]);
			
		Иначе
			
			СтрокаФильтра = СтрокаФильтра + Разделитель 
							+ КлючЗначение.Значение + " В (&" + ИмяПеременной + ")";
			Запрос.УстановитьПараметр(ИмяПеременной, МассивОтбора);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1           КАК ФизЛицо,
	|	ХозрасчетныйОстатки.Субконто2           КАК НазначениеИспользования,
	|	ХозрасчетныйОстатки.Субконто3           КАК ПартияМалоценныхАктивовВЭксплуатации,
	|	ХозрасчетныйОстатки.НалоговоеНазначение           КАК НалоговоеНазначение,
	|	ХозрасчетныйОстатки.КоличествоОстатокДт КАК Количество,
	|	ХозрасчетныйОстатки.СуммаОстатокДт      КАК Стоимость,
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт    КАК СтоимостьНУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		               &НаДату,
	|		               Счет = &СчетМЦ,
	|		               &СубконтоМЦ,
	|		               Организация = &Организация
	|		               И Субконто3.ПодразделениеОрганизации = &ПодразделениеОрганизации" 
	                       + СтрокаФильтра + ") КАК ХозрасчетныйОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	НазначениеИспользования,
	|	ПартияМалоценныхАктивовВЭксплуатации
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Результат = Запрос.Выполнить();
	Выборка   = Результат.Выбрать();
	
	// Сортировка таблицы документа
	// Это необходимо на тот случай, если в документе
	// есть строки с повторяющимися ключевыми полями
	ТаблицаДокумента.Сортировать(СтрокаКолонок);
		
	Если НЕ Результат.Пустой() Тогда
		
		ПроизвестиСписаниеМалоценныхАктивов(СтруктураКлючевыхПолей, 
		                             Выборка, 
									 ТаблицаДокумента,
									 ТаблицаСообщений, 
									 СтруктураШапкиДокумента,
									 ПроводкиБУ);
		
	Иначе
		// списывать нечего
		СтрокаСообщения = НСтр("ru='Бух. учет: По партиям ничего не списано, из-за отсутствия соответствующих остатков';uk='Бух. облік: По партіях нічого не списано, через відсутність відповідних залишків'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
		
	КонецЕсли;
	
	// выод сообщений об ошибках
	Если ТаблицаСообщений.Количество() > 0 Тогда
		
		Если ЗначениеЗаполнено(Заголовок) Тогда
			
			// Ранее сообщения не выводились
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Заголовок);
			
		КонецЕсли;
		
		ТаблицаСообщений.Сортировать("НомерСтроки");
		ТекущийНомерСтроки = 0;
		
		Для каждого СтрокаСообщений Из ТаблицаСообщений Цикл
		                                                                                         
			Если ТекущийНомерСтроки <> СтрокаСообщений.НомерСтроки Тогда
				
				ТекущийНомерСтроки = СтрокаСообщений.НомерСтроки;
				СтрокаТЧ           = СтрокаСообщений.СтрокаТаблицы;
				ЕдиницаИзмерения   = СтрокаТЧ.БазоваяЕдиницаИзмерения;
				Заголовок = НСтр("ru='Строка номер ';uk='Рядок номер '") + ТекущийНомерСтроки 
							+ ": " + СтрокаТЧ.ФизЛицо  + ", " + СтрокаТЧ.Номенклатура
							+ ", " + СтрокаТЧ.НазначениеИспользования;
				
			КонецЕсли;	
			
			СтрокаСообщения = НСтр("ru='Бух. учет: Не списано по партиям ';uk='Бух. облік: Не списано по партіях '")
							 + СтрокаСообщений.ОсталосьСписать + " " + ЕдиницаИзмерения
							 + ":" + Символы.ПС + Заголовок;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ДвижениеПартийМалоценныхАктивов()
