// Формируется список счетов учета номенклатуры, стоимость которой
// необходимо корректировать.
Функция СписокСчетовУчетаНоменклатуры(Учет, Организация = Неопределено, Период = Неопределено) Экспорт
	
	ИмяПланаСчетов = "Хозрасчетный";
	
	СписокСчетов= Новый СписокЗначений;
	//СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ОборудованиеКУстановке);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОсновныхСредств);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеДругихНеоборотныхМатериальныхАктивов);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПроизводственныеЗапасы);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СырьеИМатериалы);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПокупныеПолуфабрикатыИКомплектующиеИзделия);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.Топливо);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТараИТарныеМатериалы);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СтроительныеМатериалы);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ЗапасныеЧасти);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.МатериалыСельскохозяйственногоНазначения);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДругиеМатериалы);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);
	
	// ИНАГРО ++
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПродукцияРастениеводства);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПродукцияЖивотноводства);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПродукцияПромышленойПереработки);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПродукцияВспомогательныхИОбслуживающихПроизводств);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПродукцияПринятаяОтНаселенияДляРеализации);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СеменаИПосевнойМатериал);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.Корма);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПродукцияСельхозназначенияОтгруженная);
	// ИНАГРО --
	
	Если (ЗначениеЗаполнено(Организация)) И (ЗначениеЗаполнено(Период)) Тогда
		
		
		УчетВПродажныхЦенах = Ложь;
		Если (УчетнаяПолитика.СпособОценкиТоваровВРознице(Организация, Период) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
			УчетВПродажныхЦенах = Истина;
		КонецЕсли;
		Если УчетВПродажныхЦенах Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Счет", ПланыСчетов.Хозрасчетный.Товары);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Хозрасчетный.Ссылка
			|ИЗ
			|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
			|ГДЕ
			|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет)";
			Счета = Запрос.Выполнить().Выгрузить();
			Для Каждого Счет Из Счета Цикл
				Если (НЕ Счет.Ссылка = ПланыСчетов.Хозрасчетный.Товары) И
					(НЕ Счет.Ссылка = ПланыСчетов.Хозрасчетный.ТоварыВТорговле) И
					(НЕ Счет.Ссылка = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ) Тогда
					
					СписокСчетов.Добавить(Счет.Ссылка);
				КонецЕсли;
			КонецЦикла;
		Иначе
			СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.Товары);
		КонецЕсли;
	Иначе
		СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.Товары);
	КонецЕсли;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
	//СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);
	
	Возврат СписокСчетов;
	
КонецФункции // СписокСчетовУчетаНоменклатуры()

// В СтруктураДопПараметров добавляются СписокСчетов - список счетов учета номенклатуры, 
// стоимость которой необходимо корректировать 
// и СписокИсключаемыхСчетов - список счетов, которые не корректируются 
Процедура УстановитьСписокСчетовУчетаНоменклатуры(СтруктураДопПараметров) Экспорт // ИНАГРО Экспорт
	
	ИмяПланаСчетов = "Хозрасчетный";
	
	СписокСчетов = Новый СписокЗначений;
	//СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ОборудованиеКУстановке);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОсновныхСредств);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеДругихНеоборотныхМатериальныхАктивов);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПроизводственныеЗапасы);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СырьеИМатериалы);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПокупныеПолуфабрикатыИКомплектующиеИзделия);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.Топливо);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТараИТарныеМатериалы);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СтроительныеМатериалы);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПереданныеВПереработку);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ЗапасныеЧасти);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.МатериалыСельскохозяйственногоНазначения);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ДругиеМатериалы);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);
	
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.Товары);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
	//СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПроизводствоИзДавальческогоСырья);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПродукцияСельскохозяйственногоПроизводства); // ИНАГРО ++
	
	СписокИсключаемыхСчетов = Новый СписокЗначений;
	СписокИсключаемыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	СписокИсключаемыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ);
	СписокИсключаемыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыМатериалы);
	СписокИсключаемыхСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходы);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)
	|	И НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокИсключаемыхСчетов)
	|";
	
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов); 
	Запрос.УстановитьПараметр("СписокИсключаемыхСчетов", СписокИсключаемыхСчетов);
	
	Счета = Запрос.Выполнить().Выгрузить();
	
	Результат = Новый Массив;
	
	Для Каждого Счет Из Счета Цикл
		Результат.Добавить(Счет.Ссылка);
	КонецЦикла;	
	
	СтруктураДопПараметров.Вставить("СписокСчетов", Результат);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокИсключаемыхСчетов)
	|";
	
	Запрос.УстановитьПараметр("СписокИсключаемыхСчетов", СписокИсключаемыхСчетов);
	
	Счета = Запрос.Выполнить().Выгрузить();
	
	Результат = Новый Массив;
	
	Для Каждого Счет Из Счета Цикл
		Результат.Добавить(Счет.Ссылка);
	КонецЦикла;	
	
	СтруктураДопПараметров.Вставить("СписокИсключаемыхСчетов", Результат);
	
КонецПроцедуры // УстановитьСписокСчетовУчетаНоменклатуры()

// В СтруктураДопПараметров добавляются СписокСчетовПоставщиков - список счетов поставщиков, а также 
// счета и субконто учета доходов и расходов при возврате поставщику
Процедура УстановитьСписокСчетовПоставщиков(СтруктураДопПараметров, ЕстьНалогНаПрибыльДо2015)
	
	ИмяПланаСчетов = "Хозрасчетный";
	
	СписокСчетов = Новый СписокЗначений;
	
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоВыданнымАвансам);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСДругимиКредиторами);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)
	|";
	
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов); 
	
	Счета = Запрос.Выполнить().Выгрузить();
	
	Результат = Новый Массив;
	
	Для Каждого Счет Из Счета Цикл
		Результат.Добавить(Счет.Ссылка);
	КонецЦикла;	
	
	СтруктураДопПараметров.Вставить("СписокСчетовПоставщиков", Результат);
	
	СчетаДоходовПриВозвратеПоставщику  = БухгалтерскийУчетПереопределяемый.ПолучитьСчетУчетаПрочий(СтруктураДопПараметров.Организация, Перечисления.ВидыПрочихСчетовУчета.СчетДоходовВозвратПоставщику);
    СчетаРасходовПриВозвратеПоставщику = БухгалтерскийУчетПереопределяемый.ПолучитьСчетУчетаПрочий(СтруктураДопПараметров.Организация, Перечисления.ВидыПрочихСчетовУчета.СчетЗатратВозвратПоставщику);
	Если ЕстьНалогНаПрибыльДо2015 Тогда
		СчетаДоходовПриВозвратеПоставщику.Вставить("НалоговоеНазначение", Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность);
		СчетаРасходовПриВозвратеПоставщику.Вставить("НалоговоеНазначение", Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_ХозДеятельность);
	Иначе
		СчетаДоходовПриВозвратеПоставщику.Вставить("НалоговоеНазначение", Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка());
		СчетаРасходовПриВозвратеПоставщику.Вставить("НалоговоеНазначение", Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка());
	КонецЕсли;
	
	СтруктураДопПараметров.Вставить("СчетаДоходовПриВозвратеПоставщику",  СчетаДоходовПриВозвратеПоставщику);
	СтруктураДопПараметров.Вставить("СчетаРасходовПриВозвратеПоставщику", СчетаРасходовПриВозвратеПоставщику);
	
КонецПроцедуры // УстановитьСписокСчетовПоставщиков()

// Формируется список счетов на которых ведутся расчеты с контрагентами.
Функция ПолучитьСчетаРасчетов()

	СписокСчетов= Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторами);
		
	Возврат СписокСчетов;

КонецФункции // ПолучитьСчетаРасчетов()

////////////////////////////////////////////////////////////////////////////////
// Процедуры списания по-средней, не зависящие от структуры данных конфигурации

Процедура ОцифроватьСостояния( Таб, СоотвПараметровСостояний1,ПрефиксПараметровНовогоСостояния)  

	Если Таб.Количество()= 0 Тогда
		Возврат;
	КонецЕсли;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Массив = Новый Массив;
	Массив.Добавить(Тип("NULL"));
	ОписаниеТиповС = Новый ОписаниеТипов(Таб.Колонки[2].ТипЗначения.Типы(), , ,);
	//Для того чтобы поместить таблицу значений во временную таблицу, необходимо чтобы у всех
	//колонок был тип, если его нет то необходимо установить путем создания новой ТЗ
	КолКолонок = Таб.Колонки.Количество();
	Для инд = 1 по КолКолонок Цикл
		ОбратныйИндекс = КолКолонок - инд; 
		Если Таб.Колонки[ОбратныйИндекс].ТипЗначения.типы().количество()=0 Тогда
			ИмяКолонки = Таб.Колонки[ОбратныйИндекс].Имя;
			Таб.Колонки.Добавить("_"+ИмяКолонки,ОписаниеТиповС,"_"+ИмяКолонки);
			Таб.Колонки.Удалить(ИмяКолонки);
			Таб.Колонки["_"+ИмяКолонки].имя=ИмяКолонки;
			Таб.Колонки[ИмяКолонки].заголовок=ИмяКолонки;
		КонецЕсли;
	КонецЦикла;
			
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнешнийИсточник.Счет, 
		|	ВнешнийИсточник.Счет" + ПрефиксПараметровНовогоСостояния + ",
		|	ВнешнийИсточник.НалоговоеНазначение,
		|	ВнешнийИсточник.НалоговоеНазначение" + ПрефиксПараметровНовогоСостояния + ",
		|	ВнешнийИсточник.Субконто1, 
		|	ВнешнийИсточник.Субконто2, 
		|	ВнешнийИсточник.Субконто3, 
		|	ВнешнийИсточник.Субконто1" + ПрефиксПараметровНовогоСостояния + ", 
		|	ВнешнийИсточник.Субконто2" + ПрефиксПараметровНовогоСостояния + ", 
		|	ВнешнийИсточник.Субконто3" + ПрефиксПараметровНовогоСостояния + ", 
		|	ВнешнийИсточник.Количество, 
		|	ВнешнийИсточник.Стоимость,
		|	ВнешнийИсточник.СтоимостьНУ,
		|	ВнешнийИсточник.СуммаКорректировки,
		|	ВнешнийИсточник.СуммаКорректировкиНУ
		|ПОМЕСТИТЬ ИсхТаб 
		|Из &ВнешнийИсточник КАК ВнешнийИсточник";
	Запрос.УстановитьПараметр("ВнешнийИсточник", Таб );
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсхТаб.Счет КАК Счет,
		|	ИсхТаб.НалоговоеНазначение КАК НалоговоеНазначение,
		|	ИсхТаб.Субконто1 КАК Субконто1,
		|	ИсхТаб.Субконто2 КАК Субконто2,
		|	ИсхТаб.Субконто3 КАК Субконто3
		|ИЗ
		|	ИсхТаб КАК ИсхТаб
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КорИсхТаб.Счет" + ПрефиксПараметровНовогоСостояния + ",
		|	КорИсхТаб.НалоговоеНазначение" + ПрефиксПараметровНовогоСостояния + ",
		|	КорИсхТаб.Субконто1" + ПрефиксПараметровНовогоСостояния + ",
		|	КорИсхТаб.Субконто2" + ПрефиксПараметровНовогоСостояния + ",
		|	КорИсхТаб.Субконто3" + ПрефиксПараметровНовогоСостояния + "
		|ИЗ
		|	ИсхТаб КАК КорИсхТаб" ;
		
	ТаблицаСоответствийСостояний = Запрос.Выполнить().Выгрузить();
		
	ТаблицаСоответствийСостояний.Колонки.Добавить("ИндексСтроки", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(10,0));
	ТекИндекс = 0;
	Для каждого СтрокаСоответствия Из ТаблицаСоответствийСостояний Цикл
	
		СтрокаСоответствия.ИндексСтроки = ТекИндекс;
		
	// Переносим в соответствие
		СтрСост = Новый Структура;
		СтрСост.Вставить("Счет", СтрокаСоответствия.Счет);
		СтрСост.Вставить("НалоговоеНазначение", СтрокаСоответствия.НалоговоеНазначение);
		СтрСост.Вставить("Субконто1", СтрокаСоответствия.Субконто1);
		СтрСост.Вставить("Субконто2", СтрокаСоответствия.Субконто2);
		СтрСост.Вставить("Субконто3", СтрокаСоответствия.Субконто3);
		СоотвПараметровСостояний1.Вставить(ТекИндекс, СтрСост);
		
		ТекИндекс = ТекИндекс + 1;

	КонецЦикла; 
	
	Запрос.Текст = 
		"ВЫБРАТЬ *  
		|ПОМЕСТИТЬ ТаблицаСоответствийИсточник 
		|Из &ВнешнийИсточник КАК ВнешнийИсточник";
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаСоответствийСостояний );
	Запрос.Выполнить();

	Запрос.Текст = 
		"ВЫБРАТЬ *  
		|ПОМЕСТИТЬ ТаблицаСоответствийПриемник 
		|Из ТаблицаСоответствийИсточник";
	Запрос.Выполнить();

	// "Свернем" встречные перемещения: вместо двух перемещений типа 1->2 и 2->1 оставим одно 
	// с количеством |Кол12 - Кол21| в направлении большего перемещения.
	
	// Проведем следующее преобразование: повернем пары так, чтобы количество перемещения стало положительным

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсхТаб.Счет, 
		|	ИсхТаб.Счет" + ПрефиксПараметровНовогоСостояния + ",
		|	ИсхТаб.НалоговоеНазначение,
		|	ИсхТаб.НалоговоеНазначение" + ПрефиксПараметровНовогоСостояния + ",
		|	ИсхТаб.Субконто1, 
		|	ИсхТаб.Субконто2, 
		|	ИсхТаб.Субконто3, 
		|	ИсхТаб.Субконто1" + ПрефиксПараметровНовогоСостояния + ", 
		|	ИсхТаб.Субконто2" + ПрефиксПараметровНовогоСостояния + ", 
		|	ИсхТаб.Субконто3" + ПрефиксПараметровНовогоСостояния + ", 
		|	ВЫБОР КОГДА ИсхТаб.Количество<0 Тогда -ИсхТаб.Количество Иначе ИсхТаб.Количество Конец КАК Количество,
		|	ВЫБОР КОГДА ИсхТаб.Количество<0 Тогда -ИсхТаб.Стоимость Иначе ИсхТаб.Стоимость Конец КАК Стоимость,
		|	ВЫБОР КОГДА ИсхТаб.Количество<0 Тогда -ИсхТаб.СтоимостьНУ Иначе ИсхТаб.СтоимостьНУ Конец КАК СтоимостьНУ,
		|	ВЫБОР КОГДА ИсхТаб.Количество<0 Тогда -ИсхТаб.СуммаКорректировки Иначе ИсхТаб.СуммаКорректировки Конец КАК СуммаКорректировки,
		|	ВЫБОР КОГДА ИсхТаб.Количество<0 Тогда -ИсхТаб.СуммаКорректировкиНУ Иначе ИсхТаб.СуммаКорректировкиНУ Конец КАК СуммаКорректировкиНУ,
		|	ВЫБОР КОГДА ИсхТаб.Количество<0 Тогда ТаблицаСоответствийПриемник.ИндексСтроки Иначе ТаблицаСоответствийИсточник.ИндексСтроки Конец КАК Источник,
		|	ВЫБОР КОГДА ИсхТаб.Количество<0 Тогда ТаблицаСоответствийИсточник.ИндексСтроки Иначе ТаблицаСоответствийПриемник.ИндексСтроки Конец КАК Приемник
		|ПОМЕСТИТЬ КопияИсхТаб
		|ИЗ ИсхТаб КАК ИсхТаб
		|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСоответствийИсточник
		|	ПО 
		|		ИсхТаб.Счет = ТаблицаСоответствийИсточник.Счет И
		|		ИсхТаб.НалоговоеНазначение = ТаблицаСоответствийИсточник.НалоговоеНазначение И
		|		ИсхТаб.Субконто1 = ТаблицаСоответствийИсточник.Субконто1 И
		|		ИсхТаб.Субконто2 = ТаблицаСоответствийИсточник.Субконто2 И
		|		ИсхТаб.Субконто3 = ТаблицаСоответствийИсточник.Субконто3
		|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСоответствийПриемник
		|	ПО 
		|		ИсхТаб.Счет" + ПрефиксПараметровНовогоСостояния + " = ТаблицаСоответствийПриемник.Счет И
		|		ИсхТаб.НалоговоеНазначение" + ПрефиксПараметровНовогоСостояния + " = ТаблицаСоответствийПриемник.НалоговоеНазначение И
		|		ИсхТаб.Субконто1" + ПрефиксПараметровНовогоСостояния + " = ТаблицаСоответствийПриемник.Субконто1 И
		|		ИсхТаб.Субконто2" + ПрефиксПараметровНовогоСостояния + " = ТаблицаСоответствийПриемник.Субконто2 И
		|		ИсхТаб.Субконто3" + ПрефиксПараметровНовогоСостояния + " = ТаблицаСоответствийПриемник.Субконто3
		|";
	Запрос.Выполнить();
		
	// "Свертка" встречных перемещений и удалим обнулившиеся строки
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсхТаб1.Счет, 
		|	ИсхТаб1.Счет" + ПрефиксПараметровНовогоСостояния + ",
		|	ИсхТаб1.НалоговоеНазначение" + ПрефиксПараметровНовогоСостояния + ",
		|	ИсхТаб1.НалоговоеНазначение,
		|	ИсхТаб1.Субконто1, 
		|	ИсхТаб1.Субконто2, 
		|	ИсхТаб1.Субконто3, 
		|	ИсхТаб1.Субконто1" + ПрефиксПараметровНовогоСостояния + ", 
		|	ИсхТаб1.Субконто2" + ПрефиксПараметровНовогоСостояния + ", 
		|	ИсхТаб1.Субконто3" + ПрефиксПараметровНовогоСостояния + ", 
		|	Выбор Когда ИсхТаб1.Количество>ЕСТЬNULL(ИсхТаб2.Количество, 0) Тогда ИсхТаб1.Количество-ЕСТЬNULL(ИсхТаб2.Количество, 0) Иначе 0 Конец КАК Количество,
		|	Выбор Когда (ИсхТаб1.Количество > ЕСТЬNULL(ИсхТаб2.Количество, 0)) ИЛИ (ИсхТаб1.Количество = ЕСТЬNULL(ИсхТаб2.Количество, 0) И (ИсхТаб1.Источник < ИсхТаб1.Приемник)) Тогда ИсхТаб1.Стоимость-ЕСТЬNULL(ИсхТаб2.Стоимость, 0) Иначе 0 Конец КАК Стоимость,
		|	Выбор Когда (ИсхТаб1.Количество > ЕСТЬNULL(ИсхТаб2.Количество, 0)) ИЛИ (ИсхТаб1.Количество = ЕСТЬNULL(ИсхТаб2.Количество, 0) И (ИсхТаб1.Источник < ИсхТаб1.Приемник)) Тогда ИсхТаб1.СтоимостьНУ-ЕСТЬNULL(ИсхТаб2.СтоимостьНУ, 0) Иначе 0 Конец КАК СтоимостьНУ,
		|	Выбор Когда (ИсхТаб1.Количество > ЕСТЬNULL(ИсхТаб2.Количество, 0)) ИЛИ (ИсхТаб1.Количество = ЕСТЬNULL(ИсхТаб2.Количество, 0) И (ИсхТаб1.Источник < ИсхТаб1.Приемник)) Тогда ИсхТаб1.СуммаКорректировки-ЕСТЬNULL(ИсхТаб2.СуммаКорректировки, 0) Иначе 0 Конец КАК СуммаКорректировки,
		|	Выбор Когда (ИсхТаб1.Количество > ЕСТЬNULL(ИсхТаб2.Количество, 0)) ИЛИ (ИсхТаб1.Количество = ЕСТЬNULL(ИсхТаб2.Количество, 0) И (ИсхТаб1.Источник < ИсхТаб1.Приемник)) Тогда ИсхТаб1.СуммаКорректировкиНУ-ЕСТЬNULL(ИсхТаб2.СуммаКорректировкиНУ, 0) Иначе 0 Конец КАК СуммаКорректировкиНУ,
		|	ИсхТаб1.Источник КАК Источник,
		|	ИсхТаб1.Приемник КАК Приемник
		|
		|ИЗ КопияИсхТаб КАК ИсхТаб1
		|ЛЕВОЕ СОЕДИНЕНИЕ КопияИсхТаб КАК ИсхТаб2
		|	ПО 
		|		ИсхТаб1.Источник = ИсхТаб2.Приемник И
		|		ИсхТаб1.Приемник = ИсхТаб2.Источник 
		|ГДЕ (Выбор Когда ИсхТаб1.Количество>ЕСТЬNULL(ИсхТаб2.Количество, 0) Тогда ИсхТаб1.Количество-ЕСТЬNULL(ИсхТаб2.Количество, 0) Иначе 0 Конец)<>0
		|	ИЛИ (ВЫБОР 
		|		КОГДА (ИсхТаб1.Количество > ЕСТЬNULL(ИсхТаб2.Количество, 0)) ИЛИ (ИсхТаб1.Количество = ЕСТЬNULL(ИсхТаб2.Количество, 0) И (ИсхТаб1.Источник < ИсхТаб1.Приемник))  
		| 		ТОГДА ИсхТаб1.Стоимость - ЕСТЬNULL(ИсхТаб2.Стоимость, 0) ИНАЧЕ 0 КОНЕЦ) <> 0
		|	ИЛИ (ВЫБОР 
		|		КОГДА (ИсхТаб1.Количество > ЕСТЬNULL(ИсхТаб2.Количество, 0)) ИЛИ (ИсхТаб1.Количество = ЕСТЬNULL(ИсхТаб2.Количество, 0) И (ИсхТаб1.Источник < ИсхТаб1.Приемник))  
		| 		ТОГДА ИсхТаб1.СтоимостьНУ - ЕСТЬNULL(ИсхТаб2.СтоимостьНУ, 0) ИНАЧЕ 0 КОНЕЦ) <> 0
		|";
	
	Таб = Запрос.Выполнить().Выгрузить();
	МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

Функция ПолучитьСписокВершин(Таб, Приемники)  
	
	Если Таб.Количество()=0 Тогда
		Возврат новый массив;
	КонецЕсли;
	
	массивПриемников = новый массив;
	Для каждого Строка Из Приемники Цикл
		массивПриемников.Добавить(Строка.ключ);
	КонецЦикла;
		
	Запрос = Новый Запрос;
			
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Различные ВнешнийИсточник.Источник как Источник 
		|Поместить ВРтаблица 
		|Из &ВнешнийИсточник КАК ВнешнийИсточник
		|ГДЕ ВнешнийИсточник.Количество<>0 и Не ВнешнийИсточник.Источник в (&МассивПриемников)
		|; 
		|ВЫБРАТЬ
		|	ВнешнийИсточник.Источник как Источник 
		|
		|Из ВРтаблица КАК ВнешнийИсточник";
		
	Запрос.УстановитьПараметр("ВнешнийИсточник", Таб );
	Запрос.УстановитьПараметр("МассивПриемников", массивПриемников);
	
	Таб = Запрос.Выполнить().Выгрузить();
	
	Возврат Таб.ВыгрузитьКолонку("Источник");
	
КонецФункции

// СписаниеПоСредней
//
// Параметры:
//	ТаблицаТоваров - содержит товары, списание которых необходимо усреднить. 
//	Каждая колонка соответствует одному из постоянных параметров товара, не изменяемых в ходе перемещений. 
//	По остальным параметрам выполняется усреднение
//
Процедура РассчитатьСписаниеПоСредней(ТаблицаТоваров, ДатаНач, ДатаКон, СтруктураДопПараметров) Экспорт
	
	// Основное допущение данного метода - игнорирование замкнутой цепочки перемещений между состояниями ("холостого хода"):
	// считаем, что если товар в ходе перемещений снова попал в исходное состояние, то он как бы не перемещался, 
	// это движение можно исключить из общего оборота, а стоимость движения принять равной 0. Цепочки перемещений 
	// таким образом размыкаются, что позволяет рассчитать стоимости движений, начиная от конца цепочки.
	
	// Получим все состояния для товара, которые он принимал за период в виде таблицы
	//	---------------------------------------------------------------------------------------------------------------------------------
	// |Состояние 1 (Источник) |Состояние 2 (Приемник)| Перемещаемое количество| Стоимость (нужна для упрощения последующей корректировки)
	
	// Последовательно обходя состояния, выделим контуры (пути, начала и концы которых совпадают)
	// В каждом контуре найдем количество, которое совершило перемещение по замкнутому кругу ("холостой ход"), 
	// и уменьшим каждое движение из контура на данное количество.
	// Будем выбирать другие состояния для получения всех контуров и применим к ним то же правило.
	
	// После нахождения контуров в графах перемещений и сокращения "холостого хода" получаем совокупность разомкнутых 
	// путей перехода товара между состояниями (остовные деревья). Внутри каждой такой цепочки выполняем расчет.
	// Важно:  в общем случае результат сокращения зависит от последовательности обхода контуров, поэтому
	// для повторяемости результата она должна подчиняться какому-либо правилу (например, чтобы сводные перемещения
	// упорядочивались по возрастанию даты первого перемещения)
	
	// Получим таблицу перемещений, содержащую суммарные перемещения между состояниями
	
	// Получаемая таблица должна содержать колонку "Количество", "Стоимость" и колонки, описывающие старое и новое состояние,
	// причем имена колонок нового состояния заканчиваются на ПрефиксПараметровНовогоСостояния
	ПрефиксПараметровНовогоСостояния="_НовоеСостояние";
	
	Таб = ПолучитьТаблицуПеремещений(ТаблицаТоваров, ДатаНач, ДатаКон, ПрефиксПараметровНовогоСостояния, СтруктураДопПараметров);
	
	
	СоотвПараметровСостояний = Новый Соответствие;  
	ОцифроватьСостояния(Таб, СоотвПараметровСостояний,ПрефиксПараметровНовогоСостояния);

		
	// Получили таблицу перемещений в требуемом формате
	ТаблицаПеремещений = Таб;	
	
	// Таблица перемещений содержит несколько несвязанных частей, относящихся к отдельным партиям - строкам таблицы ТаблицаТоваров
	
	// Обработка перемещений: разрыв контуров
	// Получим наборы смежных вершин для каждой вершины
	// Соотв СмежныеВершины Вершина, СмежныеВершины
	
	Источники = Новый Соответствие;
	Приемники = Новый Соответствие;
	МассивНачалДеревьев = Новый Массив;
	
	Для Каждого Строка Из ТаблицаПеремещений Цикл
		
		ПараметрыИсточника = Источники[Строка.Источник];
		Если ПараметрыИсточника = Неопределено Тогда
			СмежныеВершины= Новый Соответствие;
			ПараметрыИсточника = Новый Структура("Пройден, СмежныеВершины", Ложь, СмежныеВершины);
		КонецЕсли;
		
		ПараметрыИсточника.СмежныеВершины.Вставить(Строка.Приемник, ТаблицаПеремещений.Индекс(Строка)); // во вложенной структуре храним смежную вершину и номер строки перемещения
		
		Источники.Вставить(Строка.Источник, ПараметрыИсточника);
		
	КонецЦикла;
	
	// Чтобы рассчитать перемещения, заменим каждый связный граф перемещений его остовным дерево
	// Для этого обойдем их все, найдем и разорвем все контуры по предложенному выше правилу.
	Для Каждого Элемент Из Источники Цикл
		Если НЕ Элемент.Значение.Пройден Тогда // если от вершины еще не строился контур, обрабатываем
			//ПройденныеВершины = Новый Соответствие;
			//НомерВершины = Элемент.Ключ;
			//ПройденныеВершины.Вставить(НомерВершины, -1);
			ПройденныеВершины = Новый ТаблицаЗначений;
			ПройденныеВершины.Колонки.Добавить("Ключ");
			ПройденныеВершины.Колонки.Добавить("Значение");
			ПройденныеВершины.Индексы.Добавить("Ключ");
			
			НоваяСтрока = ПройденныеВершины.Добавить();
			НоваяСтрока.Ключ = Элемент.Ключ;
			НоваяСтрока.Значение = -1;
			
			НомерВершины = Элемент.Ключ;
			
			РазорватьКонтуры(НомерВершины, Источники, ПройденныеВершины, ТаблицаПеремещений);
		КонецЕсли;
	КонецЦикла;
	
	// После этого таблица содержит незамкнутую последовательность перемещений. 
	// Стоимость перемещений с количеством = 0 в таблице тоже должна быть приведена к 0.
	
	Для Каждого Строка Из ТаблицаПеремещений Цикл
		
		Если Строка.Количество=0 Тогда
			
			ДобавитьЗаписиПоПеремещению(СоотвПараметровСостояний[Строка.Источник], СоотвПараметровСостояний[Строка.Приемник], СтруктураДопПараметров, -Строка.Стоимость, -Строка.СтоимостьНУ);
			
		Иначе
			
			Приемники.Вставить(Строка.Приемник, Строка.Приемник);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Теперь нужно выделить отдельные деревья, определить среднюю стоимость для каждого дерева, 
	// и начиная с самого начала каждого дерева последовательно рассчитать стоимость для каждого состояния/перемещения
	
	// Найдем начало каждого дерева - его нет в приемниках
	МассивНачалДеревьев = ПолучитьСписокВершин( Таб, Приемники);
	// На данном этапе нужна информация о начальном состоянии и внешнем поступлении в каждую вершину
	
	// Будем использовать список вершин, для каждой из которых указаны смежные вершины - приемники и 
	Вершины = Новый Соответствие; // здесь нам понадобится общее количество источников, приемники
	Для Каждого Строка Из ТаблицаПеремещений Цикл
		
		Если Строка.Количество=0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Обработаем источник
		ПодчСтруктура = Вершины[Строка.Источник];
		Если ПодчСтруктура=Неопределено Тогда
			ПодчСтруктура = Новый Структура("КоличествоИсточников, Приемники, КоличествоРассчитанныхВходов", 0, Новый Соответствие, 0);
		КонецЕсли;
		
		ПодчСтруктура.Приемники.Вставить(Строка.Приемник, Новый Структура("Количество, Стоимость, СтоимостьНУ, СуммаКорректировки, СуммаКорректировкиНУ", Строка.Количество, Строка.Стоимость, Строка.СтоимостьНУ, Строка.СуммаКорректировки, Строка.СуммаКорректировкиНУ)); // Вместе с вершиной-приемником запоминаем количество перемещения
		
		Вершины.Вставить(Строка.Источник, ПодчСтруктура);
		
		// Обработаем приемник
		ПодчСтруктура = Вершины[Строка.Приемник];
		Если ПодчСтруктура=Неопределено Тогда
			ПодчСтруктура = Новый Структура("КоличествоИсточников, Приемники, КоличествоРассчитанныхВходов", 1, Новый Соответствие, 0);
		Иначе
			ПодчСтруктура.КоличествоИсточников = ПодчСтруктура.КоличествоИсточников+1;
		КонецЕсли;
		
		Вершины.Вставить(Строка.Приемник, ПодчСтруктура);
	КонецЦикла;
	
	// В структуру Вершины нужно добавить данные о начальном остатке и внешнем поступлении для каждого из состояний,
	// Можно также добавить состояний, не участвовавших в перемещениях, тогда для них тоже будет рассчитано внешнее списание
	МассивДобавленныеВершины = Новый Массив;
	ДобавитьНачальныйОстатокИВнешнееПоступление(Вершины, СоотвПараметровСостояний, ДатаНач, ДатаКон, СтруктураДопПараметров, МассивДобавленныеВершины);
	
	// Добавдленные состояния возвращаются специальным массивом, который добавляется к началам деревьев
	Для Каждого Элемент Из МассивДобавленныеВершины Цикл
		МассивНачалДеревьев.Добавить(Элемент)
	КонецЦикла;
	
	// Теперь будем обходить деревья с начала, и рассчитывать состояния и переходы между ними
	Для Каждого НачалоДерева Из МассивНачалДеревьев Цикл
		РассчитатьПуть(НачалоДерева, Вершины, СоотвПараметровСостояний, СтруктураДопПараметров);
	КонецЦикла;
	
КонецПроцедуры // СписаниеПоСредней()

// Находит контуры и разрывает их, сокращая на минимальное количество
//
// Параметры:
//	Нет.
//
Процедура РазорватьКонтуры(НомерИсхВершины, Источники, ПройденныеВершины, ТаблицаПеремещений)
	
	Приемники = Источники[НомерИсхВершины].СмежныеВершины;
	
	Для Каждого ЭлементВершина Из Приемники Цикл
		
		НомерВершины=ЭлементВершина.Ключ;
		ИндСтрокиПеремещения=ЭлементВершина.Значение;
		
		// Найдем каждую вершину-приемник в списке источников
		ПараметрыИсточника = Источники[НомерВершины];
		Если ПараметрыИсточника = Неопределено Тогда
			Продолжить; // это висячая вершина (степени 1)
		КонецЕсли;
		СмежныеВершины = ПараметрыИсточника.СмежныеВершины;
		
		// Неплохо бы запоминать уже пройденные контуры, чтобы не разбирать уже разобранные
		// Контур нужно идентифицировать последовательностью входящих в него вершин.
		
		// Проверим на замыкание
		Если ПройденныеВершины.Найти(НомерВершины,"Ключ")<> Неопределено тогда
		//Если ПройденныеВершины[НомерВершины]<>Неопределено Тогда
			
			// Контур найден: можно сокращать на мин. количество перемещения
			
			// Найдем дугу контура с мин. количеством
			
			// Начнем с текущей
			СтрокаЗамыкающая=ТаблицаПеремещений[ИндСтрокиПеремещения];
			МинКоличество=СтрокаЗамыкающая.Количество;
			ИндСтрокиСМинКоличеством = ИндСтрокиПеремещения;
			
			Инд=0;
			НачалсяКонтур = Ложь; // флаг начала контура
			Для Каждого Элемент Из ПройденныеВершины Цикл
				
				// Найдем начало контура
				НачалсяКонтур = НачалсяКонтур ИЛИ (Элемент.Ключ = НомерВершины);
				
				Если НачалсяКонтур Тогда
					Если Инд>0 Тогда // в первом элементе нет ссылки на строку
						Строка=ТаблицаПеремещений[Элемент.Значение];
						Если Строка.Количество < МинКоличество Тогда 
							МинКоличество = Строка.Количество;
							ИндСтрокиСМинКоличеством = Элемент.Значение;
						КонецЕсли;
					КонецЕсли;
					Инд=Инд+1;
				КонецЕсли;
			КонецЦикла;
			
			// Вычтем найденное минимальное количество из всех дуг контура
			
			// ... из замыкающей дуги
			СтрокаЗамыкающая.Количество = СтрокаЗамыкающая.Количество - МинКоличество;
			
			// ... из всех пройденных дуг
			Инд=0;
			НачалсяКонтур = Ложь; // флаг начала контура
			Для Каждого Элемент Из ПройденныеВершины Цикл
				
				// Найдем начало контура
				НачалсяКонтур = НачалсяКонтур ИЛИ (Элемент.Ключ = НомерВершины);
				
				Если НачалсяКонтур Тогда
					Если Инд>0 Тогда // в первом элементе нет ссылки на строку
						Строка=ТаблицаПеремещений[Элемент.Значение];
						Строка.Количество = Строка.Количество - МинКоличество;
					КонецЕсли;
					Инд=Инд+1;
				КонецЕсли;
				
			КонецЦикла;
			
			// Если контур разорван, для повторяющейся вершины процедуру не запускаем, пеерходим к следующему приемнику
			Продолжить;
			
		КонецЕсли;
		
		// Сделаем копию ПройденныеВершины и добавим пройденную вершину
//		КопияПройденныеВершины=Новый Соответствие;
		КопияПройденныеВершины =ПройденныеВершины.Скопировать();
		//Для Каждого Элемент Из ПройденныеВершины Цикл
		//	КопияПройденныеВершины.Вставить(Элемент.Ключ, Элемент.Значение);
		//КонецЦикла;
		
		НоваяСтрока = КопияПройденныеВершины.Добавить();
		НоваяСтрока.Ключ = НомерВершины;
		НоваяСтрока.Значение = ИндСтрокиПеремещения;
		
		//КопияПройденныеВершины.Вставить(НомерВершины, ИндСтрокиПеремещения);
		
		РазорватьКонтуры(НомерВершины, Источники, КопияПройденныеВершины, ТаблицаПеремещений);
		
		// Отметим, что от вершины уже строился контур, чтобы не вызывать аналогичную процедуру повторно
		Источники[НомерВершины].Пройден = Истина;
		
	КонецЦикла;
	
КонецПроцедуры // РазорватьКонтуры()

// Рассчитывает отрезки пути в состояния, в которые есть переход из данной вершины
//
// Параметры:
//	Источник - номер состояния-источника.
//	Состояния - соответствие, содержащее состояния, приемники и т.д.
//	СоотвПараметровСостояний - соответствие, содержащее параметры состояния, как они представлены в БД (измерения, счета, субконто и т.д.)
//
Процедура РассчитатьПуть(Источник, Состояния, СоотвПараметровСостояний, СтруктураДопПараметров, ПредИсточник = Неопределено)
	
	// Состояние в начале:
	// ............
	// ............
	
	// Расчет состояния.
	// Стоимость в состоянии складывается из:
	// Начального остатка + Внешнего прихода (определяется сразу)
	// Прихода из других состояний (входящих стрелок - оперделяется сложением стрелок)
	
	// Приход из других состояний определяем по таблице перемещений
	
	// Расчет перемещения в другие состояния
	// В каждом состоянии-приемнике КоличествоРассчитанныхВходов = КоличествоРассчитанныхВходов+1
	
	СостояниеИсточник=Состояния[Источник];
	
	СуммаКорректировки = 0;
	СуммаКорректировкиНУ = 0;	
	Если ПредИсточник <> Неопределено Тогда
		СостояниеПредИсточник = Состояния[ПредИсточник];
		СостояникПредПриемник = СостояниеПредИсточник.Приемники.Получить(Источник);
		Если СостояникПредПриемник <> Неопределено Тогда
			СуммаКорректировки = СостояникПредПриемник.СуммаКорректировки;
			СуммаКорректировкиНУ = СостояникПредПриемник.СуммаКорректировкиНУ;			
		КонецЕсли;
	КонецЕсли;
	
	// Состояние можно испоьзовать в расчете, если рассчитаны все входящие стрелки
	Если СостояниеИсточник.КоличествоИсточников=СостояниеИсточник.КоличествоРассчитанныхВходов Тогда
		
		// ИНАГРО ++ Учтем статью без дооценки
		СуммаНеДооценивать = 0;
		СуммаНеДооцениватьНУ = 0;
		КоличествоНеДооценивать = 0;
		МассивНеДооценивать = СтруктураДопПараметров.ТаблицаСтатьиБезДооценки.НайтиСтроки(СоотвПараметровСостояний[Источник]);
		Для Каждого СтрокаБезДооценки Из МассивНеДооценивать Цикл 
			СуммаНеДооценивать = СуммаНеДооценивать + СтрокаБезДооценки.Сумма;
			СуммаНеДооцениватьНУ = СуммаНеДооцениватьНУ + СтрокаБезДооценки.СуммаНУ;
			КоличествоНеДооценивать = КоличествоНеДооценивать + СтрокаБезДооценки.Количество;
		КонецЦикла;
		СостояниеИсточник.Количество = СостояниеИсточник.Количество - КоличествоНеДооценивать;
		// ИНАГРО -- Учтем статью без дооценки
		
		СоотвПриемники=СостояниеИсточник.Приемники; // соответствие  - примники
		
		// Рассчитаем перемещения между состояниями
		Для Каждого ЭлементПриемник Из СоотвПриемники Цикл
			
			Приемник = ЭлементПриемник.Ключ;
			Количество = ЭлементПриемник.Значение.Количество;
			СтоимостьПерв = ЭлементПриемник.Значение.Стоимость;
			СтоимостьПервНУ = ЭлементПриемник.Значение.СтоимостьНУ;
			
			Состояние = Состояния[Приемник];
			
			Если СостояниеИсточник.Количество > Количество Тогда
				// ИНАГРО ++
				//Стоимость = Окр((СостояниеИсточник.Стоимость-СуммаКорректировки)*Количество /СостояниеИсточник.Количество, 2);
				//СтоимостьНУ = Окр((СостояниеИсточник.СтоимостьНУ-СуммаКорректировкиНУ)*Количество /СостояниеИсточник.Количество, 2);
				Стоимость = Окр((СостояниеИсточник.Стоимость - СуммаНеДооценивать)*Количество /(СостояниеИсточник.Количество), 2);
				СтоимостьНУ = Окр((СостояниеИсточник.СтоимостьНУ - СуммаНеДооцениватьНУ)*Количество /(СостояниеИсточник.Количество), 2);
			Иначе
				//Стоимость = СостояниеИсточник.Стоимость-СуммаКорректировки;
				//СтоимостьНУ = СостояниеИсточник.СтоимостьНУ-СуммаКорректировкиНУ;
				Стоимость = СостояниеИсточник.Стоимость - СуммаНеДооценивать;
				СтоимостьНУ = СостояниеИсточник.СтоимостьНУ - СуммаНеДооцениватьНУ;
				// ИНАГРО --
			КонецЕсли;
			
			// Теперь можно сформировать записи по перемещению между состояниями
			// Передаем разницу между первоначальным движением и рассчитанным
			ДобавитьЗаписиПоПеремещению(СоотвПараметровСостояний[Источник], СоотвПараметровСостояний[Приемник], СтруктураДопПараметров, Стоимость-СтоимостьПерв, СтоимостьНУ-СтоимостьПервНУ);
			
			// Поступление в состояние
			Состояние.Количество = Состояние.Количество + Количество;
			Состояние.Стоимость  = Состояние.Стоимость + Стоимость;
			Состояние.СтоимостьНУ  = Состояние.СтоимостьНУ + СтоимостьНУ;
			
			СостояниеИсточник.Количество = СостояниеИсточник.Количество - Количество;
			СостояниеИсточник.Стоимость = СостояниеИсточник.Стоимость - Стоимость;
			СостояниеИсточник.СтоимостьНУ  = СостояниеИсточник.СтоимостьНУ - СтоимостьНУ;
			
			Состояние.КоличествоРассчитанныхВходов = Состояние.КоличествоРассчитанныхВходов+1;
			
			// Расчет пути из этой точки
			РассчитатьПуть(Приемник, Состояния, СоотвПараметровСостояний, СтруктураДопПараметров, Источник);
			
		КонецЦикла;
		
		// Теперь можем рассчитать внешние выходы:
		// сформируем записи по внешнему списанию из состояния Источник
		// ИНАГРО ++
		//ДобавитьЗаписиПоВнешнемуСписанию(СоотвПараметровСостояний[Источник], СостояниеИсточник.Количество, СостояниеИсточник.Стоимость-СуммаКорректировки, СостояниеИсточник.СтоимостьНУ-СуммаКорректировкиНУ, СостояниеИсточник.НалоговоеНазначение, СтруктураДопПараметров);
		ДобавитьЗаписиПоВнешнемуСписанию(СоотвПараметровСостояний[Источник], СостояниеИсточник.Количество, СостояниеИсточник.Стоимость-СуммаНеДооценивать, СостояниеИсточник.СтоимостьНУ-СуммаНеДооцениватьНУ, СостояниеИсточник.НалоговоеНазначение, СтруктураДопПараметров);
		// ИНАГРО --
		// Все выходы из данного состояния рассчитаны.
		
	КонецЕсли;
	
КонецПроцедуры // РассчитатьПуть()

////////////////////////////////////////////////////////////////////////////////
// Процедуры списания по-средней, зависящие от структуры данных конфигурации

// Возвращает таблицу перемещений товаров между состояниями
// Зависит от конкретной структуры данных конфигурации
//
// Параметры:
//	Нет.
//
Функция ПолучитьТаблицуПеремещений(ТаблицаТоваров, ДатаНач, ДатаКон,  Префикс, СтруктураДопПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ВложенныйЗапрос.Сумма КАК Стоимость,
		|	ВложенныйЗапрос.СуммаНУ КАК СтоимостьНУ,
		|	ВложенныйЗапрос.СуммаКорректировки КАК СуммаКорректировки,
		|	ВложенныйЗапрос.СуммаКорректировкиНУ КАК СуммаКорректировкиНУ,
		|	ВложенныйЗапрос.Количество,
		|	ВложенныйЗапрос.СчетКт КАК Счет,
		|	ВложенныйЗапрос.СчетДт КАК Счет" + Префикс + ",
		|	ВложенныйЗапрос.НалоговоеНазначениеКт КАК НалоговоеНазначение,
		|	ВложенныйЗапрос.НалоговоеНазначениеДт КАК НалоговоеНазначение" + Префикс + ",
		|	ВложенныйЗапрос.СубконтоКт1 КАК Субконто1,
		|	ВложенныйЗапрос.СубконтоКт2 КАК Субконто2,
		|	ВложенныйЗапрос.СубконтоКт3 КАК Субконто3,
		|	ВложенныйЗапрос.СубконтоДт1 КАК Субконто1" + Префикс + ",
		|	ВложенныйЗапрос.СубконтоДт2 КАК Субконто2" + Префикс + ",
		|	ВложенныйЗапрос.СубконтоДт3 КАК Субконто3" + Префикс + "
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХозрасчетныйОбороты.СчетКт КАК СчетКт,
		|		ВЫБОР КОГДА ХозрасчетныйОбороты.СубконтоКт1 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоКт1 КОГДА ХозрасчетныйОбороты.СубконтоКт2 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоКт2 КОГДА ХозрасчетныйОбороты.СубконтоКт3 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоКт3 ИНАЧЕ Неопределено КОНЕЦ КАК НоменклатураКт,
		|		ВЫБОР КОГДА ХозрасчетныйОбороты.СубконтоДт1 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоДт1 КОГДА ХозрасчетныйОбороты.СубконтоДт2 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоДт2 КОГДА ХозрасчетныйОбороты.СубконтоДт3 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоДт3 ИНАЧЕ NULL КОНЕЦ КАК НоменклатураДт,
		|		ВЫБОР КОГДА СуммовойУчетКт.Субконто1 ТОГДА ХозрасчетныйОбороты.СубконтоКт1 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоКт1,
		|		ВЫБОР КОГДА СуммовойУчетКт.Субконто2 ТОГДА ХозрасчетныйОбороты.СубконтоКт2 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоКт2,
		|		ВЫБОР КОГДА СуммовойУчетКт.Субконто3 ТОГДА ХозрасчетныйОбороты.СубконтоКт3 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоКт3,
		|		ХозрасчетныйОбороты.СчетДт КАК СчетДт,
		|		ВЫБОР КОГДА СуммовойУчетДт.Субконто1 ТОГДА ХозрасчетныйОбороты.СубконтоДт1 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоДт1,
		|		ВЫБОР КОГДА СуммовойУчетДт.Субконто2 ТОГДА ХозрасчетныйОбороты.СубконтоДт2 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоДт2,
		|		ВЫБОР КОГДА СуммовойУчетДт.Субконто3 ТОГДА ХозрасчетныйОбороты.СубконтоДт3 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоДт3,
		|		СУММА(ВЫБОР КОГДА ХозрасчетныйОбороты.СуммаОборот ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ХозрасчетныйОбороты.СуммаОборот КОНЕЦ) КАК Сумма,
		|		СУММА(ВЫБОР КОГДА ЕстьNULL(ХозрасчетныйОбороты.СуммаНУОборотДт,0)=0 ТОГДА ЕстьNULL(ХозрасчетныйОбороты.СуммаНУОборотКт,0) ИНАЧЕ ЕстьNULL(ХозрасчетныйОбороты.СуммаНУОборотДт,0) КОНЕЦ) КАК СуммаНУ,
		|		СУММА(ЕСТЬNULL(КорректировкаНК.СуммаКорректировки, 0)) КАК СуммаКорректировки,
		|		СУММА(ЕСТЬNULL(КорректировкаНК.СуммаКорректировкиНУ, 0)) КАК СуммаКорректировкиНУ,
		|		ХозрасчетныйОбороты.НалоговоеНазначениеДт КАК НалоговоеНазначениеДт,
		|		ХозрасчетныйОбороты.НалоговоеНазначениеКт КАК НалоговоеНазначениеКт,
		|		СУММА(ВЫБОР КОГДА (ХозрасчетныйОбороты.КоличествоОборотКт) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ХозрасчетныйОбороты.КоличествоОборотКт КОНЕЦ) КАК Количество
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, Регистратор, СчетДт В (&СписокСчетов), , СчетКт В (&СписокСчетов), , Организация = &Организация) КАК ХозрасчетныйОбороты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				Хозрасчетный.Ссылка КАК Счет,
		|				МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 1 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто1,
		|				МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 2 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто2,
		|				МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 3 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто3
		|			ИЗ
		|				ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|					ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|					ПО ХозрасчетныйВидыСубконто.Ссылка = Хозрасчетный.Ссылка
		|			
		|			ГДЕ
		|				Хозрасчетный.Ссылка В (&СписокСчетов)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Хозрасчетный.Ссылка) КАК СуммовойУчетКт
		|			ПО ХозрасчетныйОбороты.СчетКт = СуммовойУчетКт.Счет
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				Хозрасчетный.Ссылка КАК Счет,
		|				МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 1 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто1,
		|				МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 2 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто2,
		|				МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 3 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто3
		|			ИЗ
		|				ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|					ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|					ПО ХозрасчетныйВидыСубконто.Ссылка = Хозрасчетный.Ссылка
		|			
		|			ГДЕ
		|				Хозрасчетный.Ссылка В (&СписокСчетов)
		|			
		|			СГРУППИРОВАТЬ ПО
		|				Хозрасчетный.Ссылка) КАК СуммовойУчетДт
		|			ПО ХозрасчетныйОбороты.СчетДт = СуммовойУчетДт.Счет
		|
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|               ХозрасчетныйКорректировка.Регистратор КАК Регистратор,
		|               ХозрасчетныйКорректировка.СчетКт КАК Счет,
		|				ВЫБОР КОГДА СуммовойУчетКт.Субконто1 ТОГДА ХозрасчетныйКорректировка.СубконтоКт1 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто1,
		|				ВЫБОР КОГДА СуммовойУчетКт.Субконто2 ТОГДА ХозрасчетныйКорректировка.СубконтоКт2 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто2,
		|				ВЫБОР КОГДА СуммовойУчетКт.Субконто3 ТОГДА ХозрасчетныйКорректировка.СубконтоКт3 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто3,
		|               ХозрасчетныйКорректировка.НалоговоеНазначениеКт КАК НалоговоеНазначение,
		|				Сумма(ХозрасчетныйКорректировка.СуммаОборот) КАК СуммаКорректировки,
		|				Сумма(ХозрасчетныйКорректировка.СуммаНУОборотКт) КАК СуммаКорректировкиНУ
		|			ИЗ
		|				РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, Регистратор, НЕ СчетДт В (&СписокСчетов), , СчетКт В (&СписокСчетов), , Организация = &Организация) КАК ХозрасчетныйКорректировка
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					Хозрасчетный.Ссылка КАК Счет,
		|					МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 1 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто1,
		|					МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 2 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто2,
		|					МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 3 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто3
		|				ИЗ
		|					ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|					ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|						ПО ХозрасчетныйВидыСубконто.Ссылка = Хозрасчетный.Ссылка
		|			
		|				ГДЕ
		|					Хозрасчетный.Ссылка В (&СписокСчетов)
		|			
		|				СГРУППИРОВАТЬ ПО
		|					Хозрасчетный.Ссылка) КАК СуммовойУчетКт
		|				ПО ХозрасчетныйКорректировка.СчетКт = СуммовойУчетКт.Счет
		|			ГДЕ
		|				ХозрасчетныйКорректировка.Регистратор ССЫЛКА Документ.ИзменениеНалоговогоНазначенияЗапасов
		|				И ХозрасчетныйКорректировка.КоличествоОборотКт = 0
		|			СГРУППИРОВАТЬ ПО
		|               ХозрасчетныйКорректировка.Регистратор,
		|               ХозрасчетныйКорректировка.СчетКт,
		|				ВЫБОР КОГДА СуммовойУчетКт.Субконто1 ТОГДА ХозрасчетныйКорректировка.СубконтоКт1 ИНАЧЕ Неопределено КОНЕЦ,
		|				ВЫБОР КОГДА СуммовойУчетКт.Субконто2 ТОГДА ХозрасчетныйКорректировка.СубконтоКт2 ИНАЧЕ Неопределено КОНЕЦ,
		|				ВЫБОР КОГДА СуммовойУчетКт.Субконто3 ТОГДА ХозрасчетныйКорректировка.СубконтоКт3 ИНАЧЕ Неопределено КОНЕЦ,
		|               ХозрасчетныйКорректировка.НалоговоеНазначениеКт) КАК КорректировкаНК
		|			ПО
		|				ХозрасчетныйОбороты.Регистратор = КорректировкаНК.Регистратор
		|				И ХозрасчетныйОбороты.СчетДт = КорректировкаНК.Счет
		|				И ВЫБОР КОГДА СуммовойУчетДт.Субконто1 ТОГДА ХозрасчетныйОбороты.СубконтоДт1 ИНАЧЕ Неопределено КОНЕЦ = КорректировкаНК.Субконто1
		|				И ВЫБОР КОГДА СуммовойУчетДт.Субконто2 ТОГДА ХозрасчетныйОбороты.СубконтоДт2 ИНАЧЕ Неопределено КОНЕЦ = КорректировкаНК.Субконто2
		|				И ВЫБОР КОГДА СуммовойУчетДт.Субконто3 ТОГДА ХозрасчетныйОбороты.СубконтоДт3 ИНАЧЕ Неопределено КОНЕЦ = КорректировкаНК.Субконто3
		|				И ХозрасчетныйОбороты.НалоговоеНазначениеДт = КорректировкаНК.НалоговоеНазначение
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ХозрасчетныйОбороты.СчетКт,
		|		ХозрасчетныйОбороты.СчетДт,
		|		ХозрасчетныйОбороты.НалоговоеНазначениеДт,
		|		ХозрасчетныйОбороты.НалоговоеНазначениеКт,
		|		ВЫБОР КОГДА ХозрасчетныйОбороты.СубконтоКт1 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоКт1 КОГДА ХозрасчетныйОбороты.СубконтоКт2 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоКт2 КОГДА ХозрасчетныйОбороты.СубконтоКт3 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоКт3 ИНАЧЕ Неопределено КОНЕЦ,
		|		ВЫБОР КОГДА ХозрасчетныйОбороты.СубконтоДт1 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоДт1 КОГДА ХозрасчетныйОбороты.СубконтоДт2 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоДт2 КОГДА ХозрасчетныйОбороты.СубконтоДт3 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоДт3 ИНАЧЕ NULL КОНЕЦ,
		|		ВЫБОР КОГДА СуммовойУчетКт.Субконто1 ТОГДА ХозрасчетныйОбороты.СубконтоКт1 ИНАЧЕ Неопределено КОНЕЦ,
		|		ВЫБОР КОГДА СуммовойУчетКт.Субконто2 ТОГДА ХозрасчетныйОбороты.СубконтоКт2 ИНАЧЕ Неопределено КОНЕЦ,
		|		ВЫБОР КОГДА СуммовойУчетКт.Субконто3 ТОГДА ХозрасчетныйОбороты.СубконтоКт3 ИНАЧЕ Неопределено КОНЕЦ,
		|		ВЫБОР КОГДА СуммовойУчетДт.Субконто1 ТОГДА ХозрасчетныйОбороты.СубконтоДт1 ИНАЧЕ Неопределено КОНЕЦ,
		|		ВЫБОР КОГДА СуммовойУчетДт.Субконто2 ТОГДА ХозрасчетныйОбороты.СубконтоДт2 ИНАЧЕ Неопределено КОНЕЦ,
		|		ВЫБОР КОГДА СуммовойУчетДт.Субконто3 ТОГДА ХозрасчетныйОбороты.СубконтоДт3 ИНАЧЕ Неопределено КОНЕЦ) КАК ВложенныйЗапрос
		|
		|ГДЕ
		//|	ВЫБОР КОГДА ВложенныйЗапрос.СубконтоКт1 ССЫЛКА Документ.ОтчетПроизводстваЗаСмену ТОГДА ВложенныйЗапрос.СубконтоКт1.Дата КОГДА ВложенныйЗапрос.СубконтоКт2 ССЫЛКА Документ.ОтчетПроизводстваЗаСмену ТОГДА ВложенныйЗапрос.СубконтоКт2.Дата КОГДА ВложенныйЗапрос.СубконтоКт3 ССЫЛКА Документ.ОтчетПроизводстваЗаСмену ТОГДА ВложенныйЗапрос.СубконтоКт3.Дата ИНАЧЕ (&ДатаНач) КОНЕЦ >= &ДатаНач И
		|	(ВложенныйЗапрос.НоменклатураКт = ВложенныйЗапрос.НоменклатураДт) И ";
		//|	(НЕ (ВложенныйЗапрос.НоменклатураДт) ЕСТЬ NULL) И ";
		
		Если ТаблицаТоваров <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
			|		(ВложенныйЗапрос.НоменклатураКт В (&СписокТоваров)) И";
		КонецЕсли;
		
	Запрос.Текст = Запрос.Текст + "
	|	(ВложенныйЗапрос.СчетДт <> ВложенныйЗапрос.СчетКт ИЛИ ВложенныйЗапрос.СубконтоКт1 <> ВложенныйЗапрос.СубконтоДт1 ИЛИ ВложенныйЗапрос.СубконтоКт2 <> ВложенныйЗапрос.СубконтоДт2 ИЛИ ВложенныйЗапрос.СубконтоКт3 <> ВложенныйЗапрос.СубконтоДт3 ИЛИ ВложенныйЗапрос.НалоговоеНазначениеДт <> ВложенныйЗапрос.НалоговоеНазначениеКт)";
		
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("Организация", СтруктураДопПараметров.Организация);
	Запрос.УстановитьПараметр("СписокСчетов", СтруктураДопПараметров.СписокСчетов);
	Запрос.УстановитьПараметр("СписокТоваров", ТаблицаТоваров);
		
	Таб = Запрос.Выполнить().Выгрузить();
	
	Возврат Таб;
	
КонецФункции // ПолучитьТаблицуПеремещений()

// Добавляет данные о начальном остатке и внешнем поступлении в состояниях
//
// Параметры:
//	Нет.
//
Процедура ДобавитьНачальныйОстатокИВнешнееПоступление(Состояния, СоотвПараметровСостояний, ДатаНач, ДатаКон, СтруктураДопПараметров, МассивДобавляемыхВершин)
	
	// Из структуры доп параметров добудем дополнительные параметры
	Учет                         = СтруктураДопПараметров.Учет;
	СписокНеКорректируемыхСчетов = СтруктураДопПараметров.СписокНеКорректируемыхСчетов; // список счетов списание номенклатуры на которые не надо корректировать
	МассивНоменклатуры           = СтруктураДопПараметров.ТаблицаТоваров;
	
	Текст = "ВЫБРАТЬ
	|	ВложенныйЗапрос.Счет,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто1 ТОГДА ВложенныйЗапрос.Субконто1 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто1,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто2 ТОГДА ВложенныйЗапрос.Субконто2 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто2,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто3 ТОГДА ВложенныйЗапрос.Субконто3 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто3,
	|	ВложенныйЗапрос.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаОстаток)                  ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаОстаток) КОНЕЦ КАК СуммаОстаток,
	|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаОстатокНУ)                  ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаОстатокНУ) КОНЕЦ КАК СуммаОстатокНУ,
	|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоОстаток)             ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.КоличествоОстаток) КОНЕЦ КАК КоличествоОстаток,
	|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаПриход)                   ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаПриход) КОНЕЦ КАК СуммаПриход,
	|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаПриходНУ)                   ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаПриходНУ) КОНЕЦ КАК СуммаПриходНУ,
	|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоПриход)              ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.КоличествоПриход) КОНЕЦ КАК КоличествоПриход,
	|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаВозвратОтПокупателя)      ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаВозвратОтПокупателя) КОНЕЦ КАК СуммаВозвратОтПокупателя,
	|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоВозвратОтПокупателя) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.КоличествоВозвратОтПокупателя)  КОНЕЦ КАК КоличествоВозвратОтПокупателя,
	|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаВозвратПоставщику)        ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаВозвратПоставщику) КОНЕЦ КАК СуммаВозвратПоставщику,
	|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоВозвратПоставщику)   ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.КоличествоВозвратПоставщику)  КОНЕЦ КАК КоличествоВозвратПоставщику,
	|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаПриходОтходов)            ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаПриходОтходов) КОНЕЦ КАК СуммаПриходОтходов,
	|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоПриходОтходов)       ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.КоличествоПриходОтходов)  КОНЕЦ КАК КоличествоПриходОтходов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаОстатковИПриходов.Счет КАК Счет,
	|		ТаблицаОстатковИПриходов.Субконто1 КАК Субконто1,
	|		ТаблицаОстатковИПриходов.Субконто2 КАК Субконто2,
	|		ТаблицаОстатковИПриходов.Субконто3 КАК Субконто3,
	|		ТаблицаОстатковИПриходов.НалоговоеНазначение КАК НалоговоеНазначение,
	|		СУММА(ВЫБОР КОГДА ТаблицаОстатковИПриходов.СуммаНачальныйОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаОстатковИПриходов.СуммаНачальныйОстаток КОНЕЦ) КАК СуммаОстаток,
	|		СУММА(ВЫБОР КОГДА ТаблицаОстатковИПриходов.СуммаНУНачальныйОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаОстатковИПриходов.СуммаНУНачальныйОстаток КОНЕЦ) КАК СуммаОстатокНУ,
	|		СУММА(ВЫБОР КОГДА ТаблицаОстатковИПриходов.КоличествоНачальныйОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаОстатковИПриходов.КоличествоНачальныйОстаток КОНЕЦ) КАК КоличествоОстаток,
	|		ВЫБОР КОГДА СУММА(ТаблицаОстатковИПриходов.СуммаОборотДт) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ТаблицаОстатковИПриходов.СуммаОборотДт) КОНЕЦ КАК СуммаПриход,
	|		ВЫБОР КОГДА СУММА(ТаблицаОстатковИПриходов.СуммаНУОборотДт) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ТаблицаОстатковИПриходов.СуммаНУОборотДт) КОНЕЦ КАК СуммаПриходНУ,
	|		ВЫБОР КОГДА СУММА(ТаблицаОстатковИПриходов.КоличествоОборотДт) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ТаблицаОстатковИПриходов.КоличествоОборотДт) КОНЕЦ КАК КоличествоПриход,
	|		0 КАК СуммаВозвратОтПокупателя,
	|		0 КАК КоличествоВозвратОтПокупателя,
	|		0 КАК СуммаВозвратПоставщику,
	|		0 КАК КоличествоВозвратПоставщику,
	|		0 КАК СуммаПриходОтходов,
	|		0 КАК КоличествоПриходОтходов
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В (&СписокСчетов), , Организация = &Организация) КАК ТаблицаОстатковИПриходов";
	
	Если МассивНоменклатуры <> Неопределено Тогда
		Текст = Текст + "
		|	ГДЕ
		|		(ВЫБОР КОГДА ТаблицаОстатковИПриходов.Субконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаОстатковИПриходов.Субконто1 В (&МассивНоменклатуры) КОГДА ТаблицаОстатковИПриходов.Субконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаОстатковИПриходов.Субконто2 В (&МассивНоменклатуры) КОГДА ТаблицаОстатковИПриходов.Субконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаОстатковИПриходов.Субконто3 В (&МассивНоменклатуры) ИНАЧЕ ЛОЖЬ КОНЕЦ)";
	КонецЕсли;
	
	Текст = Текст + "
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаОстатковИПриходов.Счет,
	|		ТаблицаОстатковИПриходов.Субконто1,
	|		ТаблицаОстатковИПриходов.Субконто2,
	|		ТаблицаОстатковИПриходов.Субконто3,
	|		ТаблицаОстатковИПриходов.НалоговоеНазначение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВозвратов.Счет,
	|		ТаблицаВозвратов.Субконто1,
	|		ТаблицаВозвратов.Субконто2,
	|		ТаблицаВозвратов.Субконто3,
	|		ТаблицаВозвратов.НалоговоеНазначение КАК НалоговоеНазначение,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		СУММА(ВЫБОР КОГДА (ТаблицаВозвратов.СуммаОборотКт < 0  И НЕ ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.СуммаОборотКт) ИНАЧЕ 0 КОНЕЦ),
    |		СУММА(ВЫБОР КОГДА (ТаблицаВозвратов.КоличествоОборотКт < 0 И НЕ ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.КоличествоОборотКт) ИНАЧЕ 0 КОНЕЦ),
	|	    СУММА(ВЫБОР КОГДА ТаблицаВозвратов.СуммаОборотКт >= 0 ТОГДА ТаблицаВозвратов.СуммаОборотКт ИНАЧЕ 0 КОНЕЦ),
	|	    СУММА(ВЫБОР КОГДА ТаблицаВозвратов.КоличествоОборотКт >= 0 ТОГДА ТаблицаВозвратов.КоличествоОборотКт ИНАЧЕ 0 КОНЕЦ),
   	|		СУММА(ВЫБОР КОГДА (ТаблицаВозвратов.СуммаОборотКт < 0  И ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.СуммаОборотКт) ИНАЧЕ 0 КОНЕЦ),
	|		СУММА(ВЫБОР КОГДА (ТаблицаВозвратов.КоличествоОборотКт < 0 И ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.КоличествоОборотКт) ИНАЧЕ 0 КОНЕЦ)
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, Регистратор, Счет В (&СписокСчетов), , Организация = &Организация, , ) КАК ТаблицаВозвратов
	|	
	//Возвраты по реализациям предыдущих периодов или с неизвестной датой реализации учитываются как поступления
	|	ГДЕ (ВЫБОР КОГДА (ТаблицаВозвратов.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя) 
	|			ТОГДА (ВЫРАЗИТЬ(ТаблицаВозвратов.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).ДокументОтгрузки.Дата < &ДатаНач 
	|				ИЛИ ВЫРАЗИТЬ(ТаблицаВозвратов.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).ДокументОтгрузки.Склад <> ВЫРАЗИТЬ(ТаблицаВозвратов.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Склад 
	|				ИЛИ ВЫРАЗИТЬ(ТаблицаВозвратов.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).ДокументОтгрузки.Склад ЕСТЬ NULL
	|				ИЛИ ВЫРАЗИТЬ(ТаблицаВозвратов.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).ДокументОтгрузки.Дата ЕСТЬ NULL) 
	|		ИНАЧЕ ЛОЖЬ КОНЕЦ)
	|		ИЛИ (ТаблицаВозвратов.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену И (ТаблицаВозвратов.КоличествоОборотКт < 0 ИЛИ ТаблицаВозвратов.СуммаОборотКт < 0))
	|";
	
	Если МассивНоменклатуры <> Неопределено Тогда
		Текст = Текст + " И
		|		(ВЫБОР КОГДА ТаблицаВозвратов.Субконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаВозвратов.Субконто1 В (&МассивНоменклатуры) КОГДА ТаблицаВозвратов.Субконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаВозвратов.Субконто2 В (&МассивНоменклатуры) КОГДА ТаблицаВозвратов.Субконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаВозвратов.Субконто3 В (&МассивНоменклатуры) ИНАЧЕ ЛОЖЬ КОНЕЦ)";
	КонецЕсли;
	
	Текст = Текст + "
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаВозвратов.Счет,
	|		ТаблицаВозвратов.Субконто1,
	|		ТаблицаВозвратов.Субконто2,
	|		ТаблицаВозвратов.Субконто3,
	|		ТаблицаВозвратов.НалоговоеНазначение
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВнутренееПеремещение.Счет,
	|		ВнутренееПеремещение.Субконто1,
	|		ВнутренееПеремещение.Субконто2,
	|		ВнутренееПеремещение.Субконто3,
	|		ВнутренееПеремещение.НалоговоеНазначение,
	|		0,
	|		0,
	|		0,
	|		СУММА(-(ВЫБОР КОГДА ВнутренееПеремещение.СуммаОборотДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ВнутренееПеремещение.СуммаОборотДт КОНЕЦ)),
	|		СУММА(-(ВЫБОР КОГДА ВнутренееПеремещение.СуммаНУОборотДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ВнутренееПеремещение.СуммаНУОборотДт КОНЕЦ)),
	|		СУММА(-(ВЫБОР КОГДА ВнутренееПеремещение.КоличествоОборотДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ВнутренееПеремещение.КоличествоОборотДт КОНЕЦ)),
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, Период, Счет В (&СписокСчетов), , Организация = &Организация, КорСчет В (&СписокСчетов), ) КАК ВнутренееПеремещение
	|
	|	ГДЕ
	|		((ВЫБОР КОГДА ВнутренееПеремещение.Субконто1 ССЫЛКА Справочник.Номенклатура 
	|					ТОГДА ВнутренееПеремещение.Субконто1 
	|				КОГДА ВнутренееПеремещение.Субконто2 ССЫЛКА Справочник.Номенклатура 
	|					ТОГДА ВнутренееПеремещение.Субконто2 
	|				КОГДА ВнутренееПеремещение.Субконто3 ССЫЛКА Справочник.Номенклатура 
	|					ТОГДА ВнутренееПеремещение.Субконто3 
	|				ИНАЧЕ 
	|					NULL КОНЕЦ) = 
	|		(ВЫБОР КОГДА ВнутренееПеремещение.КорСубконто1 ССЫЛКА Справочник.Номенклатура 
	|					ТОГДА ВнутренееПеремещение.КорСубконто1 
	|				КОГДА ВнутренееПеремещение.КорСубконто2 ССЫЛКА Справочник.Номенклатура 
	|					ТОГДА ВнутренееПеремещение.КорСубконто2 
	|				КОГДА ВнутренееПеремещение.КорСубконто3 ССЫЛКА Справочник.Номенклатура 
	|					ТОГДА ВнутренееПеремещение.КорСубконто3 
	|				ИНАЧЕ 
	|					NULL КОНЕЦ))";
	
	Если МассивНоменклатуры <> Неопределено Тогда
		Текст = Текст + "
		|		И (ВЫБОР КОГДА ВнутренееПеремещение.Субконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ВнутренееПеремещение.Субконто1 В (&МассивНоменклатуры) КОГДА ВнутренееПеремещение.Субконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ВнутренееПеремещение.Субконто2 В (&МассивНоменклатуры) КОГДА ВнутренееПеремещение.Субконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ВнутренееПеремещение.Субконто3 В (&МассивНоменклатуры) ИНАЧЕ ЛОЖЬ КОНЕЦ)";
	КонецЕсли;
	
	Текст = Текст + "
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВнутренееПеремещение.Счет,
	|		ВнутренееПеремещение.Субконто1,
	|		ВнутренееПеремещение.Субконто2,
	|		ВнутренееПеремещение.Субконто3,
	|		ВнутренееПеремещение.НалоговоеНазначение
	|";
	
	// Если есть операции списания, которые не должны быть скорректированы, то эти
	// операции необходимо учесть при расчете среденвзвешенной стоимости номенклатуры.
	Если СписокНеКорректируемыхСчетов <> Неопределено Тогда
		
		Текст = Текст + "
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаНеУчитываемыхСписаний.Счет,
		|		ТаблицаНеУчитываемыхСписаний.Субконто1,
		|		ТаблицаНеУчитываемыхСписаний.Субконто2,
		|		ТаблицаНеУчитываемыхСписаний.Субконто3,
		|		ТаблицаНеУчитываемыхСписаний.НалоговоеНазначение,
		|		0,
		|		0,
		|		0,
		|		СУММА(-(ВЫБОР КОГДА ТаблицаНеУчитываемыхСписаний.СуммаОборотКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаНеУчитываемыхСписаний.СуммаОборотКт КОНЕЦ)),
		|		СУММА(-(ВЫБОР КОГДА ТаблицаНеУчитываемыхСписаний.СуммаНУОборотКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаНеУчитываемыхСписаний.СуммаНУОборотКт КОНЕЦ)),
		|		СУММА(-(ВЫБОР КОГДА ТаблицаНеУчитываемыхСписаний.КоличествоОборотКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаНеУчитываемыхСписаний.КоличествоОборотКт КОНЕЦ)),
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&СписокНеКорректируемыхСчетов), , Организация = &Организация, , ) КАК ТаблицаНеУчитываемыхСписаний";
		
		Если МассивНоменклатуры <> Неопределено Тогда
			Текст = Текст + "
			|	
			|	ГДЕ
			|		(ВЫБОР КОГДА ТаблицаНеУчитываемыхСписаний.Субконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаНеУчитываемыхСписаний.Субконто1 В (&МассивНоменклатуры) КОГДА ТаблицаНеУчитываемыхСписаний.Субконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаНеУчитываемыхСписаний.Субконто2 В (&МассивНоменклатуры) КОГДА ТаблицаНеУчитываемыхСписаний.Субконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаНеУчитываемыхСписаний.Субконто3 В (&МассивНоменклатуры) ИНАЧЕ ЛОЖЬ КОНЕЦ)";
		КонецЕсли;
		
		Текст = Текст + "
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаНеУчитываемыхСписаний.Счет,
		|		ТаблицаНеУчитываемыхСписаний.Субконто1,
		|		ТаблицаНеУчитываемыхСписаний.Субконто2,
		|		ТаблицаНеУчитываемыхСписаний.Субконто3,
		|		ТаблицаНеУчитываемыхСписаний.НалоговоеНазначение
		|";
		
	КонецЕсли; 
	
	Текст = Текст + ") КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Хозрасчетный.Ссылка КАК Счет,
	|			МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 1 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто1,
	|			МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 2 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто2,
	|			МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 3 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто3
	|		ИЗ
	|			ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|				ПО ХозрасчетныйВидыСубконто.Ссылка = Хозрасчетный.Ссылка
	|		
	|		ГДЕ
	|			Хозрасчетный.Ссылка В (&СписокСчетов)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Хозрасчетный.Ссылка) КАК СуммовойУчет
	|		ПО ВложенныйЗапрос.Счет = СуммовойУчет.Счет
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Счет,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто1 ТОГДА ВложенныйЗапрос.Субконто1 ИНАЧЕ Неопределено КОНЕЦ,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто2 ТОГДА ВложенныйЗапрос.Субконто2 ИНАЧЕ Неопределено КОНЕЦ,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто3 ТОГДА ВложенныйЗапрос.Субконто3 ИНАЧЕ Неопределено КОНЕЦ,
	|	ВложенныйЗапрос.НалоговоеНазначение
	|";
	
	
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("Организация", СтруктураДопПараметров.Организация);
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("СписокСчетов",  СтруктураДопПараметров.СписокСчетов);
	Запрос.УстановитьПараметр("СчетаРасчетов", ПолучитьСчетаРасчетов());
	Запрос.УстановитьПараметр("СписокНеКорректируемыхСчетов", СписокНеКорректируемыхСчетов);
	
	
	Запрос.Текст = Текст;
	
	ТабПартий = Запрос.Выполнить().Выгрузить();
	ТабПартий.Индексы.Добавить("Счет,Субконто1,Субконто2,Субконто3");
	ТабПартий.Колонки.Добавить("Найдена", Новый ОписаниеТипов("Булево"));
	
	Парам=Новый Структура;
	ИндСостояния=Состояния.Количество();
	Для Каждого Состояние Из Состояния Цикл
		
		ИндСостояния = Макс(ИндСостояния, Состояние.Ключ);
		
		// Это параметры (значения измерений, счетов, субконто и т.д.), которые имеет состояние
		ПараметрыСостояния = СоотвПараметровСостояний[Состояние.Ключ];
		
		Парам.Вставить("Счет", ПараметрыСостояния["Счет"]);
		Парам.Вставить("НалоговоеНазначение", ПараметрыСостояния["НалоговоеНазначение"]);
		Парам.Вставить("Субконто1", ПараметрыСостояния["Субконто1"]);
		Парам.Вставить("Субконто2", ПараметрыСостояния["Субконто2"]);
		Парам.Вставить("Субконто3", ПараметрыСостояния["Субконто3"]);
		
		Количество = 0;
		Сумма      = 0;
		СуммаНУ    = 0;
		НалоговоеНазначение = Неопределено;
		
		НайдСтроки=ТабПартий.НайтиСтроки(Парам);
		Для Каждого СтрокаТаблицы Из НайдСтроки Цикл
			Количество = СтрокаТаблицы.КоличествоОстаток + СтрокаТаблицы.КоличествоПриход + СтрокаТаблицы.КоличествоПриходОтходов + СтрокаТаблицы.КоличествоВозвратОтПокупателя;
			Сумма      = СтрокаТаблицы.СуммаОстаток + СтрокаТаблицы.СуммаПриход + СтрокаТаблицы.СуммаПриходОтходов + СтрокаТаблицы.СуммаВозвратОтПокупателя;
			СуммаНУ      = СтрокаТаблицы.СуммаОстатокНУ + СтрокаТаблицы.СуммаПриходНУ;
			НалоговоеНазначение = СтрокаТаблицы.НалоговоеНазначение;
			
			// Отметим найденные строки (участвующие в перемещениях), чтобы потом добавить все остальные остатки
			СтрокаТаблицы.Найдена = Истина;
		КонецЦикла;
		
		Состояние.Значение.Вставить("Количество", Количество);
		Состояние.Значение.Вставить("Стоимость",  Сумма);
		Состояние.Значение.Вставить("СтоимостьНУ",  СуммаНУ);
		Состояние.Значение.Вставить("НалоговоеНазначение",  НалоговоеНазначение);

	КонецЦикла;
	
	// Теперь добавим состояния не участвующие в перемещениях (обособленные вершины) - тем, по которым не было перемещений, чтобы по ним внешнее списание рассчиталось той же процедурой, что и для перемещений
	Для Каждого СтрокаТаблицы Из ТабПартий Цикл
		Если НЕ СтрокаТаблицы.Найдена Тогда
			Количество = СтрокаТаблицы.КоличествоОстаток + СтрокаТаблицы.КоличествоПриход + СтрокаТаблицы.КоличествоПриходОтходов + СтрокаТаблицы.КоличествоВозвратОтПокупателя;
			Сумма      = СтрокаТаблицы.СуммаОстаток + СтрокаТаблицы.СуммаПриход + СтрокаТаблицы.СуммаПриходОтходов + СтрокаТаблицы.СуммаВозвратОтПокупателя;
			СуммаНУ      = СтрокаТаблицы.СуммаОстатокНУ + СтрокаТаблицы.СуммаПриходНУ;
			
			ИндСостояния=ИндСостояния+1;
			
			// Добавим состояние со всеми необходимыми параметрами
			Состояния.Вставить(ИндСостояния, 
			Новый Структура("КоличествоИсточников, КоличествоРассчитанныхВходов, Приемники, Количество, Стоимость, СтоимостьНУ, НалоговоеНазначение", 0, 0, Новый Соответствие, Количество, Сумма, СуммаНУ, СтрокаТаблицы.НалоговоеНазначение));
			
			СоотвПараметровСостояний.Вставить(ИндСостояния, Новый Структура("Счет, Субконто1, Субконто2, Субконто3, НалоговоеНазначение", СтрокаТаблицы.Счет, СтрокаТаблицы.Субконто1, СтрокаТаблицы.Субконто2, СтрокаТаблицы.Субконто3, СтрокаТаблицы.НалоговоеНазначение));
			
			МассивДобавляемыхВершин.Добавить(ИндСостояния);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьНачальныйОстатокИВнешнееПоступление()

// Добавляет в базу данных записи по перемещению в другое состояние
//
// Параметры:
//	Нет.
//
Процедура ДобавитьЗаписиПоПеремещению(ПараметрыСостоянияИсточника, ПараметрыСостоянияПриемника, СтруктураДопПараметров, СуммаКорректировки = 0, СуммаКорректировкиНУ = 0)	
	Если СуммаКорректировки = 0 Тогда
		Возврат;
	КонецЕсли; 
	Учет = СтруктураДопПараметров.Учет;
	ДатаНКУ2015 = '2015 01 01';
	
	Движение = СтруктураДопПараметров.Регистратор.Движения[?(Учет = "Нал", "Налоговый", "Хозрасчетный")];
	Проводка = Движение.Добавить();
	
	Проводка.Период        = СтруктураДопПараметров.Период;
	Проводка.Регистратор   = СтруктураДопПараметров.Регистратор;
	Проводка.Активность    = Истина;
	Проводка.Организация   = СтруктураДопПараметров.Организация;
	
	НалоговоеНазначениеДт = ПараметрыСостоянияПриемника.НалоговоеНазначение;
	НалоговоеНазначениеКт = ПараметрыСостоянияИсточника.НалоговоеНазначение;
	
	Если НалоговоеНазначениеДт = НалоговоеНазначениеКт Тогда
		Проводка.Содержание    = НСтр("ru='Корректировка стоимости перемещения';uk='Коригування вартості переміщення'", Локализация.КодЯзыкаИнформационнойБазы());
	Иначе
		Проводка.Содержание    = НСтр("ru='Корректировка изменения налогового назначения запасов';uk='Коригування зміни податкового призначення запасів'", Локализация.КодЯзыкаИнформационнойБазы());
	КонецЕсли;
	
	ДопПроводкаДт = Ложь;
	ДопПроводкаКт = Ложь;
	
	СчетДт = ПараметрыСостоянияПриемника.Счет;
	СчетКт = ПараметрыСостоянияИсточника.Счет;
    Если СтруктураДопПараметров.УчетВПродажныхЦенах Тогда 
		Если СчетКт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ Тогда
			ДопПроводкаКт = Истина;
			СчетКт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
		ИначеЕсли СчетКт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ Тогда
			ДопПроводкаКт = Истина;
			СчетКт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
		КонецЕсли;
		
		Если СчетДт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ Тогда
			ДопПроводкаДт = Истина;
			СчетДт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
		ИначеЕсли СчетДт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ Тогда
			ДопПроводкаДт = Истина;
			СчетДт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
		КонецЕсли;	
	КонецЕсли;
	
	Проводка.СчетДт = ПараметрыСостоянияПриемника.Счет;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ПараметрыСостоянияПриемника.Субконто1);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ПараметрыСостоянияПриемника.Субконто2);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ПараметрыСостоянияПриемника.Субконто3);
	
	Проводка.СчетКт = ПараметрыСостоянияИсточника.Счет;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияИсточника.Субконто1);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияИсточника.Субконто2);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияИсточника.Субконто3);
	
	Проводка.Сумма = СуммаКорректировки;
	
	Если Проводка.Период < ДатаНКУ2015 Тогда
		
		Если Проводка.СчетДт.НалоговыйУчет Тогда
			Если НалоговоеНазначениеДт <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность
			   И НалоговоеНазначениеДт <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				Проводка.СуммаНУДт = СуммаКорректировкиНУ;
			КонецЕсли;
			Проводка.НалоговоеНазначениеДт = НалоговоеНазначениеДт;
		КонецЕсли;
		Если Проводка.СчетКт.НалоговыйУчет Тогда
			Если НалоговоеНазначениеКт <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность
			   И НалоговоеНазначениеКт <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				Проводка.СуммаНУКт = СуммаКорректировкиНУ;
			КонецЕсли;
			Проводка.НалоговоеНазначениеКт = НалоговоеНазначениеКт;
		КонецЕсли;
		
	Иначе
	
		Если Проводка.СчетДт.УчетПоНалоговымНазначениямНДС Тогда
			Проводка.НалоговоеНазначениеДт = НалоговоеНазначениеДт;
		КонецЕсли; 
		Если Проводка.СчетКт.УчетПоНалоговымНазначениямНДС Тогда
			Проводка.НалоговоеНазначениеКт = НалоговоеНазначениеКт;
		КонецЕсли;

	КонецЕсли;
	
	Если ДопПроводкаДт Тогда
		
		Проводка = Движение.Добавить();
		
		Проводка.Период        = СтруктураДопПараметров.Период;
		Проводка.Регистратор   = СтруктураДопПараметров.Регистратор;
		Проводка.Активность    = Истина;
		Проводка.Организация   = СтруктураДопПараметров.Организация;
		Проводка.Содержание    = НСтр("ru='Корректировка стоимости перемещения';uk='Коригування вартості переміщення'",Локализация.КодЯзыкаИнформационнойБазы());
		
		Проводка.СчетДт = ПараметрыСостоянияПриемника.Счет;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ПараметрыСостоянияПриемника.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ПараметрыСостоянияПриемника.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ПараметрыСостоянияПриемника.Субконто3);
		
		Проводка.СчетКт = СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияПриемника.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияПриемника.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияПриемника.Субконто3);
		
		Проводка.Сумма = - СуммаКорректировки;
		
		Если Проводка.Период < ДатаНКУ2015 Тогда
		
			Если Проводка.СчетДт.НалоговыйУчет Тогда
				Если НалоговоеНазначениеДт <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность
				   И НалоговоеНазначениеДт <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					Проводка.СуммаНУДт = - СуммаКорректировкиНУ;
				КонецЕсли;
				Проводка.НалоговоеНазначениеДт = НалоговоеНазначениеДт;
			КонецЕсли;
			Если Проводка.СчетКт.НалоговыйУчет Тогда
				Если НалоговоеНазначениеКт <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность
				   И НалоговоеНазначениеКт <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					Проводка.СуммаНУКт = - СуммаКорректировкиНУ;
				КонецЕсли;
				Проводка.НалоговоеНазначениеКт = НалоговоеНазначениеКт;
			КонецЕсли;
			
		Иначе
		
			Если Проводка.СчетДт.УчетПоНалоговымНазначениямНДС Тогда
				Проводка.НалоговоеНазначениеДт = НалоговоеНазначениеДт;
			КонецЕсли; 
			Если Проводка.СчетКт.УчетПоНалоговымНазначениямНДС Тогда
				Проводка.НалоговоеНазначениеКт = НалоговоеНазначениеКт;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДопПроводкаКт Тогда
		
		Проводка = Движение.Добавить();
		
		Проводка.Период        = СтруктураДопПараметров.Период;
		Проводка.Регистратор   = СтруктураДопПараметров.Регистратор;
		Проводка.Активность    = Истина;
		Проводка.Организация   = СтруктураДопПараметров.Организация;
		Проводка.Содержание    = НСтр("ru='Корректировка стоимости перемещения';uk='Коригування вартості переміщення'",Локализация.КодЯзыкаИнформационнойБазы());
		
		Проводка.СчетДт = СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ПараметрыСостоянияИсточника.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ПараметрыСостоянияИсточника.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ПараметрыСостоянияИсточника.Субконто3);
		
		Проводка.СчетКт = ПараметрыСостоянияИсточника.Счет;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияИсточника.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияИсточника.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияИсточника.Субконто3);
		
		Проводка.Сумма = - СуммаКорректировки;
		
		Если Проводка.Период < ДатаНКУ2015 Тогда
		
			Если Проводка.СчетДт.НалоговыйУчет Тогда
				Если НалоговоеНазначениеДт <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность
				   И НалоговоеНазначениеДт <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					Проводка.СуммаНУДт = - СуммаКорректировкиНУ;
				КонецЕсли;
				Проводка.НалоговоеНазначениеДт = НалоговоеНазначениеДт;
			КонецЕсли;
			Если Проводка.СчетКт.НалоговыйУчет Тогда
				Если НалоговоеНазначениеКт <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность
				   И НалоговоеНазначениеКт <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
					Проводка.СуммаНУКт = - СуммаКорректировкиНУ;
				КонецЕсли;
				Проводка.НалоговоеНазначениеКт = НалоговоеНазначениеКт;
			КонецЕсли;
			
		Иначе
		
			Если Проводка.СчетДт.УчетПоНалоговымНазначениямНДС Тогда
				Проводка.НалоговоеНазначениеДт = НалоговоеНазначениеДт;
			КонецЕсли; 
			Если Проводка.СчетКт.УчетПоНалоговымНазначениямНДС Тогда
				Проводка.НалоговоеНазначениеКт = НалоговоеНазначениеКт;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // ДобавитьЗаписиПоПеремещению()

// Здесь формируются все записи по внешнему списанию 
//
// Параметры:
//	Нет.
//
Процедура ДобавитьЗаписиПоВнешнемуСписанию(ПараметрыСостоянияИсточника, знач ОбщееКоличество, знач ОбщаяСтоимость, знач ОбщаяСтоимостьНУ, знач НалоговоеНазначение, СтруктураДопПараметров)
	
	Учет = СтруктураДопПараметров.Учет;
	ОбщееКоличествоРеализация = ОбщееКоличество;  // ИНАГРО ++
	ОбщаяСуммаКорректировки = 0;                  // ИНАГРО ++
	Движение = СтруктураДопПараметров.Регистратор.Движения.Хозрасчетный;
	
	// Отберем из общей таблицы списания нужные операции списания.
	ОперацийСписания = СтруктураДопПараметров.ТаблицаОперацийСписания.НайтиСтроки(ПараметрыСостоянияИсточника);
	ДатаНКУ2015 = '2015 01 01';
	
	
	Для каждого ОперацияСписания Из ОперацийСписания Цикл
		
		Если ОбщееКоличество = 0 Тогда
			Прервать;
		КонецЕсли;
		Если ОперацияСписания.КорСчет.ВидыСубконто.Количество() > 1 Тогда 
			Если ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПолучитьИмяПредопределенного(ОперацияСписания.КорСчет.ВидыСубконто[1].ВидСубконто) = "ПартииМатериаловВЭксплуатации" Тогда
				Продолжить;
				// Возвраты спецодежды не корректируются, т.к. имеют особый порядок учета
			КонецЕсли;                                                           
		КонецЕсли;
		
		
		ДолжноБытьСписано  = Окр(ОбщаяСтоимость/ОбщееКоличество * ОперацияСписания.Количество, 2); 
		ДолжноБытьСписаноНУ  = Окр(ОбщаяСтоимостьНУ/ОбщееКоличество * ОперацияСписания.Количество, 2);
		СуммаКорректировки = ДолжноБытьСписано - ОперацияСписания.Сумма;
		СуммаКорректировкиНУ = ДолжноБытьСписаноНУ - ОперацияСписания.СуммаНУ;
		
		// Уменьшим общую стоимость и количество.
		ОбщаяСтоимость  = ОбщаяСтоимость  - ДолжноБытьСписано;
		ОбщаяСтоимостьНУ  = ОбщаяСтоимостьНУ  - ДолжноБытьСписаноНУ;
		ОбщееКоличество = ОбщееКоличество - ОперацияСписания.Количество;
		
		Если СуммаКорректировки <> 0 Тогда
			// ИНАГРО ++
			Если ОперацияСписания.КорСчет.Родитель = ПланыСчетов.Хозрасчетный.СебестоимостьРеализации Тогда
				ОбщаяСуммаКорректировки = ОбщаяСуммаКорректировки + СуммаКорректировки;
			КонецЕсли;
			// ИНАГРО --
			Проводка = Движение.Добавить();
			
			Проводка.Период        = СтруктураДопПараметров.Период;
			Проводка.Регистратор   = СтруктураДопПараметров.Регистратор;
			Проводка.Активность    = Истина;
			Проводка.Организация   = СтруктураДопПараметров.Организация;
			Проводка.Содержание    = НСтр("ru='Корректировка стоимости списания';uk='Коригування вартості списання'",Локализация.КодЯзыкаИнформационнойБазы());
			
			ОбратнаяПроводка = Ложь;
		
			ДопПроводкаДт = Ложь;
			ДопПроводкаКт = Ложь;
			
			СчетДт = ОперацияСписания.КорСчет;
			СчетКт = ПараметрыСостоянияИсточника.Счет;
			
			Если СтруктураДопПараметров.УчетВПродажныхЦенах Тогда 			
			
				Если СчетКт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ Тогда
					ДопПроводкаКт = Истина;
					СчетКт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
				ИначеЕсли СчетКт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ Тогда
					ДопПроводкаКт = Истина;
					СчетКт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
				КонецЕсли;
				
				Если СчетДт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ Тогда
					ДопПроводкаДт = Истина;
					СчетДт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
				ИначеЕсли СчетДт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ Тогда
					ДопПроводкаДт = Истина;
					СчетДт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
				КонецЕсли;	
			КонецЕсли;
			
			// ИНАГРО ++ 
			УстановитьСписокСчетовПоставщиков(СтруктураДопПараметров, УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураДопПараметров.Организация, СтруктураДопПараметров.Период));
			// ИНАГРО --
			
			Если СтруктураДопПараметров.СписокСчетовПоставщиков.Найти(ОперацияСписания.КорСчет) <> Неопределено Тогда
				// корректировка возврата поставщику производится за счет счетов доходов/расходов, указанных в регистре сведений СчетаУчетаПрочие
				Если СуммаКорректировки > 0 ИЛИ (СуммаКорректировки = 0 И СуммаКорректировкиНУ > 0) Тогда
					Проводка.СчетДт = СтруктураДопПараметров.СчетаРасходовПриВозвратеПоставщику.СчетУчетаБУ;
					Если НЕ ЗначениеЗаполнено(Проводка.СчетДт) Тогда
						Проводка.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;	
						ТекстСообщения = НСтр("ru='Не заполнен счет расходов при возврате поставщику в регистре сведений ""Счета учета (прочие)""!"
"  Сформированы проводки в корреспонденции со счетом 00!';uk='Не заповнений рахунок витрат при поверненні постачальнику в регістрі відомостей ""Рахунки обліку (інші)""!"
"  Сформовано проводки в кореспонденції з рахунком 00!'");
						#Если ВнешнееСоединение Тогда
							ВызватьИсключение (ТекстСообщения);
						#Иначе
							Сообщить(ТекстСообщения, СтатусСообщения.Важное);
						#КонецЕсли
					КонецЕсли; 
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, СтруктураДопПараметров.СчетаРасходовПриВозвратеПоставщику.Субконто1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, СтруктураДопПараметров.СчетаРасходовПриВозвратеПоставщику.Субконто2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, СтруктураДопПараметров.СчетаРасходовПриВозвратеПоставщику.Субконто3);
					Проводка.СчетКт = ПараметрыСостоянияИсточника.Счет;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияИсточника.Субконто1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияИсточника.Субконто2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияИсточника.Субконто3);
		        	Проводка.Сумма = СуммаКорректировки;
					Если Проводка.Период < ДатаНКУ2015 Тогда

						Если Проводка.СчетДт.НалоговыйУчет Тогда
							Если СтруктураДопПараметров.СчетаРасходовПриВозвратеПоставщику.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность
							   И СтруктураДопПараметров.СчетаРасходовПриВозвратеПоставщику.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
								Проводка.СуммаНУДт = СуммаКорректировкиНУ;
							КонецЕсли;
							Проводка.НалоговоеНазначениеДт = СтруктураДопПараметров.СчетаРасходовПриВозвратеПоставщику.НалоговоеНазначение;
						КонецЕсли;
						Если Проводка.СчетКт.НалоговыйУчет Тогда
							Если НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность
							   И НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность  Тогда
								Проводка.СуммаНУКт = СуммаКорректировкиНУ;
							КонецЕсли;
							Проводка.НалоговоеНазначениеКт = НалоговоеНазначение;
						КонецЕсли;
						
					Иначе
					
						Если Проводка.СчетДт.УчетПоНалоговымНазначениямНДС Тогда
							Проводка.НалоговоеНазначениеДт = СтруктураДопПараметров.СчетаРасходовПриВозвратеПоставщику.НалоговоеНазначение;
						КонецЕсли; 
						Если Проводка.СчетКт.УчетПоНалоговымНазначениямНДС Тогда
							Проводка.НалоговоеНазначениеКт = НалоговоеНазначение;
						КонецЕсли;
					
					КонецЕсли;

				Иначе	
					Проводка.СчетКт = СтруктураДопПараметров.СчетаДоходовПриВозвратеПоставщику.СчетУчетаБУ;
					
					Если НЕ ЗначениеЗаполнено(Проводка.СчетКт) Тогда
						Проводка.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;	
						ТекстСообщения = НСтр("ru='Не заполнен счет доходов при возврате поставщику в регистре сведений ""Счета учета (прочие)""!"
"  Сформированы проводки в корреспонденции со счетом 00!';uk='Не заповнений рахунок доходів при поверненні постачальнику в регістрі відомостей ""Рахунку обліку (інші)""!"
"  Сформовано проводки в кореспонденції з рахунком 00!'");
						
						#Если ВнешнееСоединение Тогда
							ВызватьИсключение (ТекстСообщения);
						#Иначе
							Сообщить(ТекстСообщения, СтатусСообщения.Важное);
						#КонецЕсли
					КонецЕсли; 
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, СтруктураДопПараметров.СчетаДоходовПриВозвратеПоставщику.Субконто1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, СтруктураДопПараметров.СчетаДоходовПриВозвратеПоставщику.Субконто2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, СтруктураДопПараметров.СчетаДоходовПриВозвратеПоставщику.Субконто3);
					Проводка.СчетДт = ПараметрыСостоянияИсточника.Счет;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ПараметрыСостоянияИсточника.Субконто1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ПараметрыСостоянияИсточника.Субконто2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ПараметрыСостоянияИсточника.Субконто3);
			        Проводка.Сумма = - СуммаКорректировки;
					Если Проводка.Период < ДатаНКУ2015 Тогда

						Если Проводка.СчетДт.НалоговыйУчет Тогда
							Если НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность
							   И НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность  Тогда
								Проводка.СуммаНУДт = - СуммаКорректировкиНУ;
							КонецЕсли;
							Проводка.НалоговоеНазначениеДт = НалоговоеНазначение;
						КонецЕсли;
						Если Проводка.СчетКт.НалоговыйУчет Тогда
							Если СтруктураДопПараметров.СчетаДоходовПриВозвратеПоставщику.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность
							   И СтруктураДопПараметров.СчетаДоходовПриВозвратеПоставщику.НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
								Проводка.СуммаНУКт = - СуммаКорректировкиНУ;
							КонецЕсли;
							Проводка.НалоговоеНазначениеКт = СтруктураДопПараметров.СчетаДоходовПриВозвратеПоставщику.НалоговоеНазначение;
						КонецЕсли;
						
					Иначе
					
						Если Проводка.СчетДт.УчетПоНалоговымНазначениямНДС Тогда
							Проводка.НалоговоеНазначениеДт = НалоговоеНазначение;
						КонецЕсли; 
						Если Проводка.СчетКт.УчетПоНалоговымНазначениямНДС Тогда
							Проводка.НалоговоеНазначениеКт = СтруктураДопПараметров.СчетаДоходовПриВозвратеПоставщику.НалоговоеНазначение;
						КонецЕсли;
					
					КонецЕсли;

				КонецЕсли;	
			Иначе
				Проводка.СчетДт = ОперацияСписания.КорСчет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ОперацияСписания.КорСубконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ОперацияСписания.КорСубконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ОперацияСписания.КорСубконто3);
				
				Проводка.СчетКт = ПараметрыСостоянияИсточника.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияИсточника.Субконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияИсточника.Субконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияИсточника.Субконто3);
							
				Проводка.Сумма = СуммаКорректировки;
				Если Проводка.Период < ДатаНКУ2015 Тогда

					Если Проводка.СчетДт.НалоговыйУчет Тогда
						Если ОперацияСписания.НалоговоеНазначениеКор <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность
						   И ОперацияСписания.НалоговоеНазначениеКор <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
							Проводка.СуммаНУДт = СуммаКорректировкиНУ;
						КонецЕсли;
						Проводка.НалоговоеНазначениеДт = ОперацияСписания.НалоговоеНазначениеКор;
					КонецЕсли;
					Если Проводка.СчетКт.НалоговыйУчет Тогда
						Если НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность
						   И НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
							Проводка.СуммаНУКт = СуммаКорректировкиНУ;
						КонецЕсли;
						Проводка.НалоговоеНазначениеКт = НалоговоеНазначение;
					КонецЕсли;
					
				Иначе
				
					Если Проводка.СчетДт.УчетПоНалоговымНазначениямНДС Тогда
						Проводка.НалоговоеНазначениеДт = ОперацияСписания.НалоговоеНазначениеКор;
					КонецЕсли; 
					Если Проводка.СчетКт.УчетПоНалоговымНазначениямНДС Тогда
						Проводка.НалоговоеНазначениеКт = НалоговоеНазначение;
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли; 
			
			Если СтруктураДопПараметров.Свойство("ТаблицаРаспределенияДляНУ") И ЗначениеЗаполнено(Проводка.СубконтоДт.Номенклатура) И ЗначениеЗаполнено(Проводка.СубконтоКт.Номенклатура) Тогда
				
				НоменклатураКомплект = Проводка.СубконтоДт.Номенклатура;
				НоменклатураКомплектующее = Проводка.СубконтоКт.Номенклатура;
				СтруктураПоиска = Новый Структура("Номенклатура", НоменклатураКомплектующее);
									
				МассивСтрок = СтруктураДопПараметров.ТаблицаРаспределенияДляНУ.НайтиСтроки(СтруктураПоиска);
				Если МассивСтрок.Количество() > 0 Тогда
					СтрокаКомплектующее = МассивСтрок[0];
					СтрокаКомплектующее.Количество = СтрокаКомплектующее.Количество - ОперацияСписания.Количество;
					СтрокаКомплектующее.СуммаКорректировки = СтрокаКомплектующее.СуммаКорректировки - СуммаКорректировки;
					
					СтруктураПоиска = Новый Структура("Номенклатура", НоменклатураКомплект);
													
					МассивСтрок = СтруктураДопПараметров.ТаблицаРаспределенияДляНУ.НайтиСтроки(СтруктураПоиска);
					
					Если МассивСтрок.Количество() > 0 Тогда
						СтрокаКомплект = МассивСтрок[0];
					Иначе
						СтрокаКомплект = СтруктураДопПараметров.ТаблицаРаспределенияДляНУ.Добавить();
						СтрокаКомплект.Номенклатура = НоменклатураКомплект;
						СтрокаКомплект.Количество = 0;
						СтрокаКомплект.СуммаКорректировки = 0;
					КонецЕсли;	
					СтрокаКомплект.Количество = СтрокаКомплект.Количество + ОперацияСписания.Количество;
					СтрокаКомплект.СуммаКорректировки = СтрокаКомплект.СуммаКорректировки + СуммаКорректировки;
				КонецЕсли; 
			КонецЕсли; 
			
			Если ДопПроводкаДт Тогда
				
				Проводка = Движение.Добавить();
				
				Проводка.Период        = СтруктураДопПараметров.Период;
				Проводка.Регистратор   = СтруктураДопПараметров.Регистратор;
				Проводка.Активность    = Истина;
				Проводка.Организация   = СтруктураДопПараметров.Организация;
				Проводка.Содержание    = НСтр("ru='Корректировка стоимости списания';uk='Коригування вартості списання'",Локализация.КодЯзыкаИнформационнойБазы());
			
				Проводка.СчетДт = ОперацияСписания.КорСчет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ОперацияСписания.КорСубконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ОперацияСписания.КорСубконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ОперацияСписания.КорСубконто3);
				
				Проводка.СчетКт = СчетДт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ОперацияСписания.КорСубконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ОперацияСписания.КорСубконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ОперацияСписания.КорСубконто3);
				
				Если Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ 
					И Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ 
					И ТипЗнч(ОперацияСписания.КорСубконто1) = Тип("СправочникСсылка.Номенклатура") 
					
					Тогда   
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ОперацияСписания.КорСубконто2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ОперацияСписания.КорСубконто3);
					
				КонецЕсли; 
				
				Проводка.Сумма = - СуммаКорректировки;
				Если Проводка.Период < ДатаНКУ2015 Тогда
					
					Если Проводка.СчетДт.НалоговыйУчет Тогда
						Если ОперацияСписания.НалоговоеНазначениеКор <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
							Проводка.СуммаНУДт = - СуммаКорректировкиНУ;
						КонецЕсли;
						Проводка.НалоговоеНазначениеДт = НалоговоеНазначение;
					КонецЕсли;
					Если Проводка.СчетКт.НалоговыйУчет Тогда
						Если НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
							Проводка.СуммаНУКт = - СуммаКорректировкиНУ;
						КонецЕсли;
						Проводка.НалоговоеНазначениеКт = НалоговоеНазначение;
					КонецЕсли;
					
				Иначе
				
					Если Проводка.СчетДт.УчетПоНалоговымНазначениямНДС Тогда
						Проводка.НалоговоеНазначениеДт = НалоговоеНазначение;
					КонецЕсли; 
					Если Проводка.СчетКт.УчетПоНалоговымНазначениямНДС Тогда
						Проводка.НалоговоеНазначениеКт = НалоговоеНазначение;
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
			
			Если ДопПроводкаКт Тогда
				
				Проводка = Движение.Добавить();
				
				Проводка.Период        = СтруктураДопПараметров.Период;
				Проводка.Регистратор   = СтруктураДопПараметров.Регистратор;
				Проводка.Активность    = Истина;
				Проводка.Организация   = СтруктураДопПараметров.Организация;
				Проводка.Содержание    = НСтр("ru='Корректировка стоимости списания';uk='Коригування вартості списання'",Локализация.КодЯзыкаИнформационнойБазы());
				
				Проводка.СчетДт = СчетКт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ПараметрыСостоянияИсточника.Субконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ПараметрыСостоянияИсточника.Субконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ПараметрыСостоянияИсточника.Субконто3);
				
				Проводка.СчетКт = ПараметрыСостоянияИсточника.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияИсточника.Субконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияИсточника.Субконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияИсточника.Субконто3);
				
				Если Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ 
					И Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ 
					И ТипЗнч(ПараметрыСостоянияИсточника.Субконто1) = Тип("СправочникСсылка.Номенклатура") 
					
					Тогда   
					
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ПараметрыСостоянияИсточника.Субконто2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ПараметрыСостоянияИсточника.Субконто3);
					
				КонецЕсли; 
				
				
				Проводка.Сумма = - СуммаКорректировки;
				Если Проводка.Период < ДатаНКУ2015 Тогда
	
					Если Проводка.СчетДт.НалоговыйУчет Тогда
						Если ОперацияСписания.НалоговоеНазначениеКор <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
							Проводка.СуммаНУДт = - СуммаКорректировкиНУ;
						КонецЕсли;
						Проводка.НалоговоеНазначениеДт = НалоговоеНазначение;
					КонецЕсли;
					Если Проводка.СчетКт.НалоговыйУчет Тогда
						Если НалоговоеНазначение <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
							Проводка.СуммаНУКт = - СуммаКорректировкиНУ;
						КонецЕсли;
						Проводка.НалоговоеНазначениеКт = НалоговоеНазначение;
					КонецЕсли;
					
				Иначе
				
					Если Проводка.СчетДт.УчетПоНалоговымНазначениямНДС Тогда
						Проводка.НалоговоеНазначениеДт = НалоговоеНазначение;
					КонецЕсли; 
					Если Проводка.СчетКт.УчетПоНалоговымНазначениямНДС Тогда
						Проводка.НалоговоеНазначениеКт = НалоговоеНазначение;
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 
	КонецЦикла; 
	
	// ИНАГРО ++
	// ИНАГРО_РеализацияОрганизаций
	ТаблицаСписаний = СтруктураДопПараметров.ТаблицаОперацийСписания.Скопировать();
	ТаблицаСписаний.Свернуть("Счет, КорСчет, Субконто1, Субконто2, НалоговоеНазначение","Количество, Сумма, СуммаНУ");
	ПараметрыСостоянияИсточникаРеализация = ПараметрыСостоянияИсточника;
	ПараметрыСостоянияИсточникаРеализация.Удалить("Субконто3");
	ОперацийСписания = ТаблицаСписаний.НайтиСтроки(ПараметрыСостоянияИсточникаРеализация);
	
	Для каждого ОперацияСписания Из ОперацийСписания Цикл
		
		Если ОбщееКоличествоРеализация = 0 Тогда
			Прервать;
		КонецЕсли;
		Если ОперацияСписания.КорСчет.ВидыСубконто.Количество() > 1 Тогда 
			Если ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПолучитьИмяПредопределенного(ОперацияСписания.КорСчет.ВидыСубконто[1].ВидСубконто) = "ПартииМатериаловВЭксплуатации" Тогда
				Продолжить;
				// Возвраты спецодежды не корректируются, т.к. имеют особый порядок учета
			КонецЕсли;                                                           
		КонецЕсли;
		
		Если ОбщаяСуммаКорректировки <> 0 И ОперацияСписания.КорСчет.Родитель = ПланыСчетов.Хозрасчетный.СебестоимостьРеализации Тогда
			
						
			ПустоеЗнач = Справочники.Номенклатура.ПустаяСсылка();
			ПустоеЗначБА = Справочники.БиологическиеАктивы.ПустаяСсылка();
			Продукция_	= ?(ТипЗнч(ПараметрыСостоянияИсточника.Субконто1) = ТипЗнч(ПустоеЗнач) ИЛИ ТипЗнч(ПараметрыСостоянияИсточника.Субконто1) = ТипЗнч(ПустоеЗначБА), ПараметрыСостоянияИсточника.Субконто1, 
						  ?(ТипЗнч(ПараметрыСостоянияИсточника.Субконто2) = ТипЗнч(ПустоеЗнач) ИЛИ ТипЗнч(ПараметрыСостоянияИсточника.Субконто2) = ТипЗнч(ПустоеЗначБА), ПараметрыСостоянияИсточника.Субконто2, Неопределено));
			Запрос = Новый Запрос;
			//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ // << Ин-Агро - добавлено Разрешенные
			//			   |	ИНАГРО_РеализацияОрганизаций.Номенклатура,
			//			   |	ИНАГРО_РеализацияОрганизаций.Количество,
			//			   |	ИНАГРО_РеализацияОрганизаций.Контрагент,
			//			   |	ИНАГРО_РеализацияОрганизаций.Организация,
			//			   |	ИНАГРО_РеализацияОрганизаций.Склад,
			//			   |	ИНАГРО_РеализацияОрганизаций.СтавкаНДС
			//			   |ИЗ
			//			   |	РегистрНакопления.ИНАГРО_РеализацияОрганизаций КАК ИНАГРО_РеализацияОрганизаций
			//			   |ГДЕ
			//			   |	ИНАГРО_РеализацияОрганизаций.Период МЕЖДУ &ДатаН И &ДатаК
			//			   |	И ИНАГРО_РеализацияОрганизаций.Номенклатура = &Номенклатура
			//			   |	И ИНАГРО_РеализацияОрганизаций.Организация = &Организация
			//			   |	И (НЕ ИНАГРО_РеализацияОрганизаций.Регистратор ССЫЛКА Документ.ИНАГРО_РаспределениеЗатрат)
			//			   |			И (НЕ ИНАГРО_РеализацияОрганизаций.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца)" ;
			
			Запрос.УстановитьПараметр("Организация",СтруктураДопПараметров.Организация);
			Запрос.УстановитьПараметр("Номенклатура",Продукция_);
			Запрос.УстановитьПараметр("ДатаН",СтруктураДопПараметров.НачДата);
			Запрос.УстановитьПараметр("ДатаК",СтруктураДопПараметров.КонДата);
            ПарКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
			Если ТипЗнч(ПараметрыСостоянияИсточника.Субконто1) = Тип("СправочникСсылка.Склады") Тогда
			   ПарСклад = ПараметрыСостоянияИсточника.Субконто1;
			ИначеЕсли ТипЗнч(ПараметрыСостоянияИсточника.Субконто2) = Тип("СправочникСсылка.Склады") Тогда    
			   ПарСклад = ПараметрыСостоянияИсточника.Субконто2;
			КонецЕсли;			  
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ИНАГРО_РеализацияОрганизаций.Номенклатура КАК Номенклатура,
			               |	ИНАГРО_РеализацияОрганизаций.КоличествоОборот КАК Количество,
			               |	ИНАГРО_РеализацияОрганизаций.Контрагент КАК Контрагент,
			               |	ИНАГРО_РеализацияОрганизаций.Организация КАК Организация,
			               |	ИНАГРО_РеализацияОрганизаций.Склад КАК Склад,
			               |	ИНАГРО_РеализацияОрганизаций.СтавкаНДС КАК СтавкаНДС
			               |ИЗ
			               |	РегистрНакопления.ИНАГРО_РеализацияОрганизаций.Обороты(
			               |			&ДатаН,
			               |			&ДатаК,
			               |			Регистратор,
			               |			Организация = &Организация
			               |				И Номенклатура = &Номенклатура
			               |				И (Склад = &ПарСклад
			               |					ИЛИ &ПарСклад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))) КАК ИНАГРО_РеализацияОрганизаций
			               |ГДЕ
			               |	НЕ ИНАГРО_РеализацияОрганизаций.Регистратор ССЫЛКА Документ.ИНАГРО_РаспределениеЗатрат
			               |	И НЕ ИНАГРО_РеализацияОрганизаций.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца";
			
			Запрос.УстановитьПараметр("ПарСклад",ПарСклад);
			
			ТаблЗаписей = Запрос.Выполнить().Выгрузить();
			Если ТаблЗаписей.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			КоличествоДляРаспределения = ТаблЗаписей.Итог("Количество");
			
			ЦенаКорректировки = ?(ОперацияСписания.Количество=0,0,ОбщаяСуммаКорректировки / КоличествоДляРаспределения); 
			
			Для каждого Стр Из ТаблЗаписей Цикл
				СебестоимостьСумма = Окр(Стр.Количество * ЦенаКорректировки,2); 
				Если СебестоимостьСумма <> 0 Тогда
					ДвижениеРег = СтруктураДопПараметров.Регистратор.Движения.ИНАГРО_РеализацияОрганизаций.Добавить();
					
					ДвижениеРег.Период 			= СтруктураДопПараметров.Период;
					ДвижениеРег.Организация 	= СтруктураДопПараметров.Организация;
					ДвижениеРег.СтавкаНДС 		= Стр.СтавкаНДС;
					ДвижениеРег.Контрагент 		= Стр.Контрагент;
					ДвижениеРег.Склад 			= Стр.Склад;
					ДвижениеРег.Номенклатура 	= Стр.Номенклатура;
					ДвижениеРег.СебестоимостьЦена	= ЦенаКорректировки;
					ДвижениеРег.СебестоимостьСумма	= Стр.Количество * ЦенаКорректировки;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла; 
	// ИНАГРО ++
		
КонецПроцедуры // ДобавитьЗаписиПоВнешнемуСписанию()

Функция ПолучитьТаблицуОперацийСписания(ТаблицаТоваров, ДатаНач, ДатаКон, СтруктураДопПараметров) Экспорт // ИНАГРО Экспорт
	
	ИспользуемыеКлассыСчетовРасходов = УчетнаяПолитика.ИспользуемыеКлассыСчетовРасходов(СтруктураДопПараметров.Организация, СтруктураДопПараметров.Период);
	Если ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс9 Тогда
		Использовать8Класс = Ложь;
	Иначе
		Использовать8Класс = Истина;
	КонецЕсли; 	
	
	Учет   = СтруктураДопПараметров.Учет;  	
	Запрос = Новый Запрос;

	Если Использовать8Класс Тогда
	    МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ // ИНАГРО ++ добавлено Разрешенные
		|	ХозрасчетныйДвиженияССубконто.Регистратор,
		|	ХозрасчетныйДвиженияССубконто.НомерСтроки,
		|	ХозрасчетныйДвиженияССубконто.НомерИсходнойПроводки,
		|	ХозрасчетныйДвиженияССубконто.СчетДт,
		|	ХозрасчетныйДвиженияССубконто.НалоговоеНазначениеДт,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
		|	ХозрасчетныйДвиженияССубконто.СубконтоДт3,
		|	ХозрасчетныйДвиженияССубконто.СчетКт,
		|	ХозрасчетныйДвиженияССубконто.НалоговоеНазначениеКт,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
		|	ХозрасчетныйДвиженияССубконто.СчетДополнительный,
		|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.КоличествоКт, 0) КАК КоличествоКт,
		|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.КоличествоДт, 0) КАК КоличествоДт,  // ИНАГРО ++
		|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.Сумма, 0) КАК Сумма,
		|	ЕСТЬNULL(ХозрасчетныйДвиженияССубконто.СуммаНУКт, 0) КАК СуммаНУ
		|
		|ПОМЕСТИТЬ ТаблицаДвиженийССубконто
		|
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|			&ДатаНач,
		|			&ДатаКон,
		|			(СчетДополнительный В (&СписокСчетов)
		|				ИЛИ СчетКт В (&СписокСчетов)
		|					И СчетДополнительный = &ПустойСчет)
		|				И Организация = &Организация
		|				И (НЕ НеКорректироватьСтоимостьАвтоматически)
		//Выделяем возвраты от покупателей по реализациям текущего периода и отражаем их как сторно реализации		
		//Возвраты по реализациям предыдущих периодов или с неизвестной датой реализации будут учтены как поступления
		|				И (НЕ (ВЫБОР КОГДА (Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя) 
		|					ТОГДА (ВЫРАЗИТЬ(Регистратор КАК Документ.ВозвратТоваровОтПокупателя).ДокументОтгрузки.Дата < &ДатаНач 
		|						ИЛИ ВЫРАЗИТЬ(Регистратор КАК Документ.ВозвратТоваровОтПокупателя).ДокументОтгрузки.Склад <> ВЫРАЗИТЬ(Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Склад 
		|						ИЛИ ВЫРАЗИТЬ(Регистратор КАК Документ.ВозвратТоваровОтПокупателя).ДокументОтгрузки.Склад ЕСТЬ NULL
		|						ИЛИ ВЫРАЗИТЬ(Регистратор КАК Документ.ВозвратТоваровОтПокупателя).ДокументОтгрузки.Дата ЕСТЬ NULL) 
		|					ИНАЧЕ ЛОЖЬ КОНЕЦ)) 
		|	 		И
		|			(НЕ (Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену И (ЕСТЬNULL(КоличествоКт, 0) < 0 ИЛИ ЕСТЬNULL(Сумма, 0) < 0))) 
		|			И (НЕ(СчетДополнительный В (&СписокСчетов)
		|					И Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену
		|					И ЕСТЬNULL(Сумма, 0) < 0))
		|			И (Регистратор ССЫЛКА Документ.ЗакрытиеМесяца
		|				ИЛИ (ЕСТЬNULL(КоличествоКт, 0) <> 0
		|					ИЛИ ЕСТЬNULL(Сумма, 0) <> 0)
		|			И (НЕ Регистратор ССЫЛКА Документ.ПеремещениеТоваров ИЛИ (Регистратор ССЫЛКА Документ.ПеремещениеТоваров И СчетДт В (&СписокИсключаемыхСчетов)))
		|			И (НЕ Регистратор ССЫЛКА Документ.ИзменениеНалоговогоНазначенияЗапасов)
		|			И Активность = ИСТИНА
		|    		)
		|	) КАК ХозрасчетныйДвиженияССубконто";
		
		
		
		Запрос.УстановитьПараметр("ДатаНач", 					ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", 					ДатаКон);
		Запрос.УстановитьПараметр("Организация", 				СтруктураДопПараметров.Организация);
		Запрос.УстановитьПараметр("СписокСчетов", 				СтруктураДопПараметров.СписокСчетов);
		Запрос.УстановитьПараметр("СписокИсключаемыхСчетов",	СтруктураДопПараметров.СписокИсключаемыхСчетов);
		Запрос.УстановитьПараметр("ПустойСчет", 				ПланыСчетов.Хозрасчетный.ПустаяСсылка());
		Запрос.УстановитьПараметр("СписокТоваров",				ТаблицаТоваров);
		
		Запрос.Выполнить();	
		
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДвиженийССубконто.Регистратор,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДвиженийССубконто.Регистратор),
		|	ТаблицаДвиженийССубконто.СчетДт КАК КорСчет,
		|	ВЫБОР
		|		КОГДА ТаблицаДвиженийССубконто.СчетДополнительный В (&СписокСчетов)
		|			ТОГДА ТаблицаДвиженийССубконто1.НалоговоеНазначениеКт
		|		ИНАЧЕ ТаблицаДвиженийССубконто.НалоговоеНазначениеКт
		|	КОНЕЦ КАК НалоговоеНазначение,
		|	ВЫБОР
		|		КОГДА ТаблицаДвиженийССубконто.СчетДополнительный В (&СписокСчетов)
		|			ТОГДА ТаблицаДвиженийССубконто1.НалоговоеНазначениеДт
		|		ИНАЧЕ ТаблицаДвиженийССубконто.НалоговоеНазначениеДт
		|	КОНЕЦ КАК НалоговоеНазначениеКор,
		|	ТаблицаДвиженийССубконто.СубконтоДт1 КАК КорСубконто1,
		|	ТаблицаДвиженийССубконто.СубконтоДт2 КАК КорСубконто2,
		|	ТаблицаДвиженийССубконто.СубконтоДт3 КАК КорСубконто3,
		|	ВЫБОР
		|		КОГДА ТаблицаДвиженийССубконто.СчетДополнительный В (&СписокСчетов)
		|			ТОГДА ТаблицаДвиженийССубконто.СчетДополнительный
		|		ИНАЧЕ ТаблицаДвиженийССубконто.СчетКт
		|	КОНЕЦ КАК Счет,
		|	ВЫБОР
		|		КОГДА ТаблицаДвиженийССубконто.СчетДополнительный В (&СписокСчетов)
		|			ТОГДА ТаблицаДвиженийССубконто1.СубконтоКт1
		|		ИНАЧЕ ТаблицаДвиженийССубконто.СубконтоКт1
		|	КОНЕЦ КАК Субконто1,
		|	ВЫБОР
		|		КОГДА ТаблицаДвиженийССубконто.СчетДополнительный В (&СписокСчетов)
		|			ТОГДА ТаблицаДвиженийССубконто1.СубконтоКт2
		|		ИНАЧЕ ТаблицаДвиженийССубконто.СубконтоКт2
		|	КОНЕЦ КАК Субконто2,
		|	ВЫБОР
		|		КОГДА ТаблицаДвиженийССубконто.СчетДополнительный В (&СписокСчетов)
		|			ТОГДА ТаблицаДвиженийССубконто1.СубконтоКт3
		|		ИНАЧЕ ТаблицаДвиженийССубконто.СубконтоКт3
		|	КОНЕЦ КАК Субконто3,
		|	ТаблицаДвиженийССубконто.Сумма КАК СуммаОборотКт,
		|	ТаблицаДвиженийССубконто.СуммаНУ КАК СуммаНУОборотКт,
		|	ВЫБОР
		|		КОГДА ТаблицаДвиженийССубконто.СчетДополнительный В (&СписокСчетов)
		|			ТОГДА ТаблицаДвиженийССубконто1.КоличествоКт
		|		ИНАЧЕ ТаблицаДвиженийССубконто.КоличествоКт
		|	КОНЕЦ КАК КоличествоОборотКт,
		// ИНАГРО ++
		|	ВЫБОР      
		|		КОГДА ТаблицаДвиженийССубконто.СчетДополнительный В (&СписокСчетов)
		|			ТОГДА ВЫБОР
		|					КОГДА ТаблицаДвиженийССубконто1.КоличествоКт <> 0
		|							И ТаблицаДвиженийССубконто1.КоличествоКт = ТаблицаДвиженийССубконто1.КоличествоДт
		|						ТОГДА 0
		|					ИНАЧЕ ТаблицаДвиженийССубконто1.КоличествоДт
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ТаблицаДвиженийССубконто.КоличествоКт <> 0
		|						И ТаблицаДвиженийССубконто.КоличествоКт = ТаблицаДвиженийССубконто.КоличествоДт
		|					ТОГДА 0
		|				ИНАЧЕ ТаблицаДвиженийССубконто.КоличествоДт
		|			КОНЕЦ
		|	КОНЕЦ КАК КоличествоОборотДт
		// ИНАГРО --
		|ПОМЕСТИТЬ ТаблицаДвижений
		|ИЗ
		|	ТаблицаДвиженийССубконто КАК ТаблицаДвиженийССубконто
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДвиженийССубконто КАК ТаблицаДвиженийССубконто1
		|		ПО ТаблицаДвиженийССубконто.Регистратор = ТаблицаДвиженийССубконто1.Регистратор
		|			И (ВЫБОР
		|				КОГДА ТаблицаДвиженийССубконто.СчетДополнительный В (&СписокСчетов)
		|					ТОГДА ТаблицаДвиженийССубконто.НомерИсходнойПроводки + 1 = ТаблицаДвиженийССубконто1.НомерСтроки
		|				ИНАЧЕ ТаблицаДвиженийССубконто.НомерСтроки = ТаблицаДвиженийССубконто1.НомерИсходнойПроводки + 1
		|			КОНЕЦ)
		|			И (ВЫБОР
		|				КОГДА ТаблицаДвиженийССубконто.СчетДополнительный В (&СписокСчетов)
		|					ТОГДА ТаблицаДвиженийССубконто.СчетДополнительный = ТаблицаДвиженийССубконто1.СчетКт
		|				ИНАЧЕ ТаблицаДвиженийССубконто.СчетКт = ТаблицаДвиженийССубконто1.СчетДополнительный
		|			   КОНЕЦ)
		|ГДЕ
		|	ВЫБОР
		|		КОГДА ТаблицаДвиженийССубконто.СчетДополнительный В (&СписокСчетов)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ТаблицаДвиженийССубконто1.СчетДт ЕСТЬ NULL 
		|		КОНЕЦ
		|";
		
		
		Запрос.Выполнить();   					
		

	КонецЕсли; 
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВложенныйЗапрос.Счет,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто1 ТОГДА ВложенныйЗапрос.Субконто1 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто1,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто2 ТОГДА ВложенныйЗапрос.Субконто2 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто2,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто3 ТОГДА ВложенныйЗапрос.Субконто3 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто3,
	|	ВложенныйЗапрос.КорСчет,
	|	ВложенныйЗапрос.НалоговоеНазначение,
	|	ВложенныйЗапрос.НалоговоеНазначениеКор,
	|	ВложенныйЗапрос.КорСубконто1,
	|	ВложенныйЗапрос.КорСубконто2,
	|	ВложенныйЗапрос.КорСубконто3,
	//|	ВЫБОР КОГДА (НЕ (ВложенныйЗапрос.КорНоменклатура) ЕСТЬ NULL) И (ВложенныйЗапрос.КорСчетНоменклатуры) ТОГДА ВложенныйЗапрос.КорНоменклатура ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ КАК Комплектация,
	|	ВЫБОР КОГДА (ВложенныйЗапрос.Номенклатура <> ВложенныйЗапрос.КорНоменклатура) И (НЕ (ВложенныйЗапрос.КорНоменклатура) ЕСТЬ NULL) И (ВложенныйЗапрос.КорСчетНоменклатуры) ТОГДА ВложенныйЗапрос.КорНоменклатура ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ КАК Комплектация,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
	|	СУММА(ВложенныйЗапрос.СуммаНУ) КАК СуммаНУ,
	|	СУММА(ВложенныйЗапрос.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаСписания.Счет КАК Счет,
	|		ТаблицаСписания.Субконто1 КАК Субконто1,
	|		ТаблицаСписания.Субконто2 КАК Субконто2,
	|		ТаблицаСписания.Субконто3 КАК Субконто3,
	|		ТаблицаСписания.КорСчет КАК КорСчет,
	|		ТаблицаСписания.НалоговоеНазначение КАК НалоговоеНазначение,	
	|		ТаблицаСписания.НалоговоеНазначениеКор КАК НалоговоеНазначениеКор,
	|		ВЫБОР КОГДА (ТаблицаСписания.КорСчет В (&СписокСчетов)) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК КорСчетНоменклатуры,
	|		ТаблицаСписания.КорСубконто1 КАК КорСубконто1,
	|		ТаблицаСписания.КорСубконто2 КАК КорСубконто2,
	|		ТаблицаСписания.КорСубконто3 КАК КорСубконто3,
	|		ВЫБОР КОГДА ТаблицаСписания.Субконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаСписания.Субконто1 КОГДА ТаблицаСписания.Субконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаСписания.Субконто2 КОГДА ТаблицаСписания.Субконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаСписания.Субконто3 ИНАЧЕ NULL КОНЕЦ КАК Номенклатура,
	|		ВЫБОР КОГДА ТаблицаСписания.КорСубконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаСписания.КорСубконто1 КОГДА ТаблицаСписания.КорСубконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаСписания.КорСубконто2 КОГДА ТаблицаСписания.КорСубконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаСписания.КорСубконто3 ИНАЧЕ NULL КОНЕЦ КАК КорНоменклатура,
	|		ВЫБОР КОГДА (ТаблицаСписания.СуммаОборотКт) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ТаблицаСписания.СуммаОборотКт КОНЕЦ КАК Сумма,
	|		ВЫБОР КОГДА (ТаблицаСписания.СуммаНУОборотКт) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ТаблицаСписания.СуммаНУОборотКт КОНЕЦ КАК СуммаНУ,
	|		ВЫБОР КОГДА (ТаблицаСписания.КоличествоОборотКт) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ТаблицаСписания.КоличествоОборотКт КОНЕЦ КАК Количество,
	|		ВЫБОР КОГДА (ТаблицаСписания.КоличествоОборотДт) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаСписания.КоличествоОборотДт КОНЕЦ КАК КоличествоДт  // << >> ИН-АГРО 
	|	ИЗ " + ?(Использовать8Класс, " ТаблицаДвижений КАК ТаблицаСписания ", "	
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, Запись, Счет В (&СписокСчетов), , Организация = &Организация , , ) КАК ТаблицаСписания
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|	ПО ТаблицаСписания.Регистратор = Хозрасчетный.Регистратор И ТаблицаСписания.НомерСтроки = Хозрасчетный.НомерСтроки
	|
	|	ГДЕ
	|		(НЕ Хозрасчетный.НеКорректироватьСтоимостьАвтоматически И (
	//Выделяем возвраты от покупателей по реализациям текущего периода и отражаем их как сторно реализации
	//Возвраты по реализациям предыдущих периодов или с неизвестной датой реализации будут учтены как поступления
	|		НЕ (ВЫБОР КОГДА (ТаблицаСписания.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя) 
	|			ТОГДА (ВЫРАЗИТЬ(ТаблицаСписания.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).ДокументОтгрузки.Дата < &ДатаНач 
	|				ИЛИ ВЫРАЗИТЬ(ТаблицаСписания.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).ДокументОтгрузки.Склад <> ВЫРАЗИТЬ(ТаблицаСписания.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Склад 
	|				ИЛИ ВЫРАЗИТЬ(ТаблицаСписания.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).ДокументОтгрузки.Склад ЕСТЬ NULL
	|				ИЛИ ВЫРАЗИТЬ(ТаблицаСписания.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).ДокументОтгрузки.Дата ЕСТЬ NULL) 
	|		ИНАЧЕ ЛОЖЬ КОНЕЦ)) 
	//Конец условия по возвратам
	|	 		И (НЕ (ТаблицаСписания.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену И (ЕСТЬNULL(ТаблицаСписания.КоличествоОборотКт, 0) < 0 ИЛИ ЕСТЬNULL(ТаблицаСписания.СуммаОборотКт, 0) < 0))) 
	|		) И
	|		((ТаблицаСписания.Регистратор ССЫЛКА Документ.ЗакрытиеМесяца) ИЛИ
	|		(ТаблицаСписания.Регистратор ССЫЛКА Документ.ИзменениеНалоговогоНазначенияЗапасов) ИЛИ
	|		(ТаблицаСписания.КоличествоОборотКт <> 0 ИЛИ ТаблицаСписания.СуммаОборотКт <> 0) И (НЕ ТаблицаСписания.Регистратор ССЫЛКА Документ.ПеремещениеТоваров ИЛИ (ТаблицаСписания.Регистратор ССЫЛКА Документ.ПеремещениеТоваров И (ТаблицаСписания.КорСчет В (&СписокИсключаемыхСчетов)))))") + "
	|		) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Хозрасчетный.Ссылка КАК Счет,
	|			МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 1 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто1,
	|			МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 2 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто2,
	|			МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 3 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто3
	|		ИЗ
	|			ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|				ПО ХозрасчетныйВидыСубконто.Ссылка = Хозрасчетный.Ссылка
	|		
	|		ГДЕ
	|			Хозрасчетный.Ссылка В (&СписокСчетов)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			Хозрасчетный.Ссылка) КАК СуммовойУчет
	|		ПО ВложенныйЗапрос.Счет = СуммовойУчет.Счет
	|
	|ГДЕ
	|	((НЕ ВложенныйЗапрос.КорСчетНоменклатуры) ИЛИ
	|	(ВЫБОР КОГДА (ВложенныйЗапрос.КорНоменклатура) ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ВложенныйЗапрос.Номенклатура <> ВложенныйЗапрос.КорНоменклатура ИЛИ ВложенныйЗапрос.КоличествоДт <> 0 КОНЕЦ))"; // ИНАГРО ++
	
	Если ТаблицаТоваров <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И
		|		(ВложенныйЗапрос.Номенклатура В (&СписокТоваров))";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Счет,
	|	ВложенныйЗапрос.НалоговоеНазначение,
	|	ВложенныйЗапрос.НалоговоеНазначениеКор,

	|	ВложенныйЗапрос.КорСчет,
	|	ВложенныйЗапрос.КорСубконто1,
	|	ВложенныйЗапрос.КорСубконто2,
	|	ВложенныйЗапрос.КорСубконто3,
	//|	ВЫБОР КОГДА (НЕ (ВложенныйЗапрос.КорНоменклатура) ЕСТЬ NULL) И (ВложенныйЗапрос.КорСчетНоменклатуры) ТОГДА ВложенныйЗапрос.КорНоменклатура ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ,  // << >> ИН-АГРО 
	|	ВЫБОР КОГДА (ВложенныйЗапрос.Номенклатура <> ВложенныйЗапрос.КорНоменклатура) И (НЕ (ВложенныйЗапрос.КорНоменклатура) ЕСТЬ NULL) И (ВложенныйЗапрос.КорСчетНоменклатуры) ТОГДА ВложенныйЗапрос.КорНоменклатура ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто1 ТОГДА ВложенныйЗапрос.Субконто1 ИНАЧЕ Неопределено КОНЕЦ,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто2 ТОГДА ВложенныйЗапрос.Субконто2 ИНАЧЕ Неопределено КОНЕЦ,
	|	ВЫБОР КОГДА СуммовойУчет.Субконто3 ТОГДА ВложенныйЗапрос.Субконто3 ИНАЧЕ Неопределено КОНЕЦ";
	
	Если Не Использовать8Класс Тогда  	
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
		Запрос.УстановитьПараметр("Организация", СтруктураДопПараметров.Организация);
		Запрос.УстановитьПараметр("СписокСчетов", СтруктураДопПараметров.СписокСчетов);
		Запрос.УстановитьПараметр("СписокИсключаемыхСчетов", СтруктураДопПараметров.СписокИсключаемыхСчетов);
		Запрос.УстановитьПараметр("СчетаРасчетов", ПолучитьСчетаРасчетов());
		Запрос.УстановитьПараметр("СписокТоваров", ТаблицаТоваров);
	КонецЕсли;
	
	Таб = Запрос.Выполнить().Выгрузить();
	Таб.Индексы.Добавить("Счет,Субконто1,Субконто2,Субконто3");
	
	Если Использовать8Класс Тогда
	  	МенеджерВременныхТаблиц.Закрыть();  
	КонецЕсли;
	
	СтруктураДопПараметров.Вставить("ТаблицаОперацийСписания", Таб);
	
	МассивКомплектов = Таб.ВыгрузитьКолонку("Комплектация");
	
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивКомплектов);
	ОбщегоНазначенияБПКлиентСервер.УдалитьНеЗаполненныеЭлементыМассива(МассивКомплектов);
	
	СтруктураДопПараметров.Вставить("МассивКомплектов", МассивКомплектов);
	
	// ИНАГРО ++ Убираем из таблицы дооценок недооцениваемую статью
	НеДооценивать = Константы.ИНАГРО_СтатьяМертвыхОтходов.Получить();
	ТабКопия = Таб.СкопироватьКолонки();
	Если ЗначениеЗаполнено(НеДооценивать) Тогда
	Сч = 0;
		Пока Сч < Таб.Количество() Цикл
			СтрокаТаб = Таб.Получить(Сч);
			Если СтрокаТаб.КорСубконто1 = НеДооценивать Или СтрокаТаб.КорСубконто2 = НеДооценивать Или СтрокаТаб.КорСубконто3 = НеДооценивать Тогда
				СтрокаКопия = ТабКопия.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКопия, СтрокаТаб);
				Таб.Удалить(СтрокаТаб);
			Иначе
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	СтруктураДопПараметров.Вставить("ТаблицаСтатьиБезДооценки", ТабКопия);
	// ИНАГРО ++ Убираем из таблицы дооценок недооцениваемую статью
	
	Возврат Таб;
		
КонецФункции // ПолучитьТаблицуОперацийСписания()

Процедура КорректировкаСтоимости(МассивНоменклатуры, НачДата, КонДата, СтруктураДопПараметров) Экспорт
	
	УчетВПродажныхЦенах = Ложь;
	
	Если (УчетнаяПолитика.СпособОценкиТоваровВРознице(СтруктураДопПараметров.Организация, СтруктураДопПараметров.Период) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
		УчетВПродажныхЦенах = Истина;
	КонецЕсли;

	СтруктураДопПараметров.Вставить("УчетВПродажныхЦенах", УчетВПродажныхЦенах);
	// ИНАГРО ++
	СтруктураДопПараметров.Вставить("НачДата", НачДата);
	СтруктураДопПараметров.Вставить("КонДата", КонДата);
	// ИНАГРО --
	
	УстановитьСписокСчетовУчетаНоменклатуры(СтруктураДопПараметров);
	УстановитьСписокСчетовПоставщиков(СтруктураДопПараметров, УчетнаяПолитика.ПлательщикНалогаНаПрибыльДо2015(СтруктураДопПараметров.Организация, СтруктураДопПараметров.Период));
	

	// В структуру дополнительных параметров добавим таблицу операции списания
	ПолучитьТаблицуОперацийСписания(МассивНоменклатуры, НачДата, КонДата, СтруктураДопПараметров);
	
	РассчитатьСписаниеПоСредней(МассивНоменклатуры, НачДата, КонДата, СтруктураДопПараметров);
	НаборЗаписей = СтруктураДопПараметров.Регистратор.Движения[?(СтруктураДопПараметров.Учет = "Бух","Хозрасчетный","Налоговый")];
	Если НаборЗаписей.Количество() > 0 Тогда
		
		ПроведениеСервер.ЗаписатьНаборЗаписейБезЗамещенияТекущихДвижений(НаборЗаписей);
	КонецЕсли;
	
	МассивКомплектов = СтруктураДопПараметров.МассивКомплектов;
	МассивРасчитанныхКомплектов = Новый Массив();
	
	Пока МассивКомплектов.Количество() > 0 Цикл
		СтруктураДопПараметров.Вставить("ТаблицаТоваров", МассивКомплектов);		
		ПолучитьТаблицуОперацийСписания(МассивКомплектов, НачДата, КонДата, СтруктураДопПараметров);
	    РассчитатьСписаниеПоСредней(МассивКомплектов, НачДата, КонДата, СтруктураДопПараметров);
		НаборЗаписей = СтруктураДопПараметров.Регистратор.Движения[?(СтруктураДопПараметров.Учет = "Бух","Хозрасчетный","Налоговый")];
		Если НаборЗаписей.Количество() > 0 Тогда
			ПроведениеСервер.ЗаписатьНаборЗаписейБезЗамещенияТекущихДвижений(НаборЗаписей);
		КонецЕсли;
		
		//Запомним обработанную номенклату
		Для Каждого Элемент Из МассивКомплектов Цикл
			МассивРасчитанныхКомплектов.Добавить(Элемент);
		КонецЦикла;
		
		МассивКомплектов.Очистить();
		
		//Заполним новый массив комплектов с проверкой на наличие такой номенклатуры
		//в составе обработанных комплектов. Это нужно что бы исключить зацикливание
		//в случаях Ном1 -> Компл1 -> Ном1
		Для Каждого Элемент Из СтруктураДопПараметров.МассивКомплектов Цикл
			Если МассивРасчитанныхКомплектов.Найти(Элемент) = Неопределено Тогда
				МассивКомплектов.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

