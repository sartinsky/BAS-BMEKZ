Функция ПодготовитьПараметрыПоОтражениюЗарплатыВУчете(ДанныеДляПроводок, Организация, ПериодРегистрации, Дата) Экспорт
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	Реквизиты = Новый ТаблицаЗначений;
	
	Реквизиты.Колонки.Добавить("Организация");
	Реквизиты.Колонки.Добавить("Период");
	
	НоваяСтрока             = Реквизиты.Добавить();
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период      = Дата;
	
	Параметры.Вставить("Реквизиты", Реквизиты);
		
	// Подготовка таблицы по заработной плате:
	СписокОбязательныхКолонок = ""
	+ "ФизическоеЛицо,"
	+ "ВидОперации,"
	+ "Подразделение,"
	+ "СпособОтраженияЗарплатыВБухучете,"
	+ "Сумма,"
	////////////////+ "СчетДт,"
	+ "СчетКт,"
	+ "Налог,"
	+ "СтатьяНалоговойДекларации,"
	+ "СуммаВзносы,"
	+ "СпособОтраженияЗарплатыВБухучетеВзносы,"
	+ "СтатьяЗатратВзносы,"
	+ "СчетКтВзносы"
	;
	
	Параметры.Вставить("ТаблицаЗаработнойПлаты", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ДанныеДляПроводок, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПоОтражениюНДФЛВУчете(ДанныеДляПроводок, Организация, ПериодРегистрации, Дата) Экспорт
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	Реквизиты = Новый ТаблицаЗначений;
	
	Реквизиты.Колонки.Добавить("Организация");
	Реквизиты.Колонки.Добавить("Период");
	
	НоваяСтрока             = Реквизиты.Добавить();
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период      = Дата;
	
	Параметры.Вставить("Реквизиты", Реквизиты);
		
	// Подготовка таблицы по заработной плате:
	СписокОбязательныхКолонок = ""
	+ "ФизическоеЛицо,"
	+ "ВидОперации,"
	+ "СчетУчета,"
	+ "СпособОтраженияВБухучете,"
	+ "Сумма";
	
	Параметры.Вставить("ТаблицаНДФЛ", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ДанныеДляПроводок, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ПодготовитьПараметрыПоОтражениюУдержанийВУчете(ДанныеДляПроводок, Организация, ПериодРегистрации, Дата) Экспорт	
	
	Параметры = Новый Структура;
	
	// Подготовка таблицы шапки документа
	Реквизиты = Новый ТаблицаЗначений;
	
	Реквизиты.Колонки.Добавить("Организация");
	Реквизиты.Колонки.Добавить("Период");
	
	НоваяСтрока             = Реквизиты.Добавить();
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Период      = Дата; 
	
	Параметры.Вставить("Реквизиты", Реквизиты);
		
	// Подготовка таблицы по заработной плате:
	СписокОбязательныхКолонок = ""
	+ "ФизическоеЛицо,"
	+ "ВидОперации,"
	+ "Подразделение,"
	+ "Контрагент,"	
	+ "СпособОтраженияВБухучете,"
	+ "СчетУчета,"
	+ "Сумма"
	;	
	Параметры.Вставить("ТаблицаУдержаний", ОбщегоНазначенияБПВызовСервера.ПолучитьТаблицуПараметровПроведения(
		ДанныеДляПроводок, СписокОбязательныхКолонок));

	Возврат Параметры;

КонецФункции

Функция ДополнитьТаблицуЗарплатыАналитикойБухУчета(ТаблицаЗаработнойПлаты) Экспорт
	
	///////////////////////////////////////
	// Описание типов для дополнения таблиц
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.СпособыОтраженияЗарплатыВРеглУчете"));
	ОписаниеТиповСпособыОтраженияЗарплатыВБухУчете =  Новый ОписаниеТипов(Массив, , );
	
	ОписаниеТиповПодразделенияОрганизаций =  БухгалтерскийУчетКлиентСерверПереопределяемый.ОписаниеТиповПодразделения();
	
	Если ТаблицаЗаработнойПлаты.Колонки.Найти("СпособОтраженияЗарплатыВБухУчете") = Неопределено Тогда
		ТаблицаЗаработнойПлаты.Колонки.Добавить("СпособОтраженияЗарплатыВБухУчете", ОписаниеТиповСпособыОтраженияЗарплатыВБухУчете);
	КонецЕсли;
	
	Если ТаблицаЗаработнойПлаты.Колонки.Найти("Подразделение") = Неопределено Тогда
		ТаблицаЗаработнойПлаты.Колонки.Добавить("Подразделение", ОписаниеТиповПодразделенияОрганизаций);
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачисленнаяЗарплатаИВзносы", ТаблицаЗаработнойПлаты);
	Запрос.УстановитьПараметр("ВидОперацииРезерв", Перечисления.ВидыОперацийПоЗарплате.НачисленоОтпускныеРезерв);
	Запрос.УстановитьПараметр("СпособОтраженияРезерв", Справочники.СпособыОтраженияЗарплатыВРеглУчете.ИспользованиеРезерваОтпусков);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленнаяЗарплатаИВзносы.ФизическоеЛицо,
	|	НачисленнаяЗарплатаИВзносы.Сумма,
	|	НачисленнаяЗарплатаИВзносы.ВидОперации,
	|	НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете,
	|	НачисленнаяЗарплатаИВзносы.Подразделение,
	////////////|	НачисленнаяЗарплатаИВзносы.СчетДт,
	|	НачисленнаяЗарплатаИВзносы.СчетКт,
	|	НачисленнаяЗарплатаИВзносы.Налог,
	|	НачисленнаяЗарплатаИВзносы.СтатьяНалоговойДекларации,
	|	НачисленнаяЗарплатаИВзносы.СуммаВзносы,
	|	НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучетеВзносы,
	|	НачисленнаяЗарплатаИВзносы.СтатьяЗатратВзносы,
	|	НачисленнаяЗарплатаИВзносы.СчетКтВзносы
	|ПОМЕСТИТЬ ВТ_НачисленнаяЗарплатаИВзносы
	|ИЗ
	|	&НачисленнаяЗарплатаИВзносы КАК НачисленнаяЗарплатаИВзносы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НачисленнаяЗарплатаИВзносы.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_НачисленнаяЗарплатаИВзносы.Сумма КАК Сумма,
	|	ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации КАК ВидОперации,
	//|	ВЫБОР
	//|		КОГДА ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации <> &ВидОперацииРезерв 
	//|		ТОГДА ЛОЖЬ
	//|       ИНАЧЕ ПорядокОтраженияЗарплатыВБухУчете.СчетДт.НалоговыйУчет
	//|   КОНЕЦ КАК НеОтражатьВБУ,
	|   ЛОЖЬ КАК НеОтражатьВБУ,
	|	ВТ_НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете КАК СпособОтраженияЗарплатыВБухУчете,
	|	ВТ_НачисленнаяЗарплатаИВзносы.Подразделение КАК Подразделение,
	//////////|	ВТ_НачисленнаяЗарплатаИВзносы.СчетДт КАК СчетДт,
	|	ВТ_НачисленнаяЗарплатаИВзносы.Налог,
	|	ВТ_НачисленнаяЗарплатаИВзносы.СтатьяНалоговойДекларации,
	|	ВТ_НачисленнаяЗарплатаИВзносы.СуммаВзносы,
	|	ВТ_НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухучетеВзносы,
	|	ВТ_НачисленнаяЗарплатаИВзносы.СтатьяЗатратВзносы,
	|	ВТ_НачисленнаяЗарплатаИВзносы.СчетКтВзносы,
	|	ПорядокОтраженияЗарплатыВБухУчете.СчетДт КАК СчетДт,
	|	ПорядокОтраженияЗарплатыВБухУчете.СубконтоДт1 КАК СубконтоДт1,
	|	ПорядокОтраженияЗарплатыВБухУчете.СубконтоДт2 КАК СубконтоДт2,
	|	ПорядокОтраженияЗарплатыВБухУчете.СубконтоДт3 КАК СубконтоДт3,
	|	ВТ_НачисленнаяЗарплатаИВзносы.СчетКт КАК СчетКт,
	|	ПорядокОтраженияЗарплатыВБухУчете.СубконтоКт1 КАК СубконтоКт1,
	|	ПорядокОтраженияЗарплатыВБухУчете.СубконтоКт2 КАК СубконтоКт2,
	|	ПорядокОтраженияЗарплатыВБухУчете.СубконтоКт3 КАК СубконтоКт3,
	|	ПорядокОтраженияЗарплатыВБухУчете.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ПорядокОтраженияЗарплатыВБухУчете.НалоговоеНазначениеДоходовИЗатрат КАК НалоговоеНазначениеДоходовИЗатрат
	|ИЗ
	|	ВТ_НачисленнаяЗарплатаИВзносы КАК ВТ_НачисленнаяЗарплатаИВзносы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК ПорядокОтраженияЗарплатыВБухУчете
	|		ПО (ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации <> &ВидОперацииРезерв 
	|			И ВТ_НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете = ПорядокОтраженияЗарплатыВБухУчете.Ссылка)
	|		ИЛИ (ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации = &ВидОперацииРезерв 
	|			И ПорядокОтраженияЗарплатыВБухУчете.Ссылка = &СпособОтраженияРезерв)
	//|		ИЛИ (ВТ_НачисленнаяЗарплатаИВзносы.ВидОперации = &ВидОперацииРезерв 
	//|			И  ВТ_НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете = ПорядокОтраженияЗарплатыВБухУчете.Ссылка)
	|
	|
	|
	|ГДЕ ВТ_НачисленнаяЗарплатаИВзносы.СпособОтраженияЗарплатыВБухУчете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете) 
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

Функция ДополнитьТаблицуНДФЛАналитикойБухУчета(ТаблицаНДФЛ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаНДФЛ", ТаблицаНДФЛ);	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНДФЛ.ФизическоеЛицо,
	|	ТаблицаНДФЛ.Сумма,
	|	ТаблицаНДФЛ.ВидОперации,
	|	ТаблицаНДФЛ.СчетУчета,
	|	ТаблицаНДФЛ.СпособОтраженияВБухУчете
	|ПОМЕСТИТЬ ВТТаблицаНДФЛ
	|ИЗ
	|	&ТаблицаНДФЛ КАК ТаблицаНДФЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНДФЛ.ФизическоеЛицо,
	|	ТаблицаНДФЛ.Сумма,
	|	ТаблицаНДФЛ.ВидОперации,
	|	ТаблицаНДФЛ.СпособОтраженияВБухУчете,
	|	ВЫБОР
	|		КОГДА ТаблицаНДФЛ.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|		ТОГДА ПорядокОтражения.СчетДт 
	|		ИНАЧЕ ТаблицаНДФЛ.СчетУчета
	|	КОНЕЦ КАК СчетДт,
	|	ПорядокОтражения.СубконтоДт1 КАК СубконтоДт1,
	|	ПорядокОтражения.СубконтоДт2 КАК СубконтоДт2,
	|	ПорядокОтражения.СубконтоДт3 КАК СубконтоДт3,
	|	ПорядокОтражения.СчетКт КАК СчетКт,
	|	ПорядокОтражения.СубконтоКт1 КАК СубконтоКт1,
	|	ПорядокОтражения.СубконтоКт2 КАК СубконтоКт2,
	|	ПорядокОтражения.СубконтоКт3 КАК СубконтоКт3
	|ИЗ
	|	ВТТаблицаНДФЛ КАК ТаблицаНДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК ПорядокОтражения
	|		ПО ТаблицаНДФЛ.СпособОтраженияВБухУчете = ПорядокОтражения.Ссылка
	|ГДЕ ТаблицаНДФЛ.СпособОтраженияВБухУчете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете) 
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

Функция ДополнитьТаблицуУдержанийАналитикойБухУчета(ТаблицаУдержаний) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаУдержаний", ТаблицаУдержаний);	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаУдержаний.ФизическоеЛицо,
	|	ТаблицаУдержаний.Подразделение,
	|	ТаблицаУдержаний.Сумма,
	|	ТаблицаУдержаний.ВидОперации,
	|	ТаблицаУдержаний.СпособОтраженияВБухУчете,
	|	ТаблицаУдержаний.СчетУчета,
	|	ТаблицаУдержаний.Контрагент
	|ПОМЕСТИТЬ ВТТаблицаУдержаний
	|ИЗ
	|	&ТаблицаУдержаний КАК ТаблицаУдержаний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУдержаний.ФизическоеЛицо,
	|	ТаблицаУдержаний.Подразделение,
	|	ТаблицаУдержаний.Сумма,
	|	ТаблицаУдержаний.ВидОперации,
	|	ТаблицаУдержаний.СпособОтраженияВБухУчете,
	|	ТаблицаУдержаний.Контрагент,
	|	ВЫБОР
	|		КОГДА ТаблицаУдержаний.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|		ТОГДА ПорядокОтражения.СчетДт 
	|		ИНАЧЕ ТаблицаУдержаний.СчетУчета
	|	КОНЕЦ КАК СчетДт,
	|	ПорядокОтражения.СубконтоДт1 КАК СубконтоДт1,
	|	ПорядокОтражения.СубконтоДт2 КАК СубконтоДт2,
	|	ПорядокОтражения.СубконтоДт3 КАК СубконтоДт3,
	|	ПорядокОтражения.СчетКт КАК СчетКт,
	|	ПорядокОтражения.СубконтоКт1 КАК СубконтоКт1,
	|	ПорядокОтражения.СубконтоКт2 КАК СубконтоКт2,
	|	ПорядокОтражения.СубконтоКт3 КАК СубконтоКт3
	|ИЗ
	|	ВТТаблицаУдержаний КАК ТаблицаУдержаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК ПорядокОтражения
	|		ПО ТаблицаУдержаний.СпособОтраженияВБухУчете = ПорядокОтражения.Ссылка
	|ГДЕ ТаблицаУдержаний.СпособОтраженияВБухУчете <> ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете) 
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

Функция ПодготовитьТаблицуНачислений(ТаблицаЗаработнойПлаты) Экспорт
		
	ТаблицаНачисленийИУдержаний = ТаблицаЗаработнойПлаты.СкопироватьКолонки();
	
	СчетРасчетовСПерсоналомПоОплатеТруда        = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;             // 661
	ПустоеСубконто                              = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
	
	ВестиУчетПоРаботникам                 		= Константы.ВедетсяУчетРасчетовПоЗарплатеПоРаботникам.Получить();	
	УчетЗарплатыИКадровСредствамиБухгалтерии 	= Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Получить();
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаЗаработнойПлаты Цикл
		
		Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоДоход
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоБольничные
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоОтпускныеДоход
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоОтпускныеРезерв
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НатуральныйДоход
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоЗаСчетФССДоход 
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоСдельноДоход
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДивидендыСотрудников
			Тогда
			
			НоваяСтрока = ТаблицаНачисленийИУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетКт) Тогда
				НоваяСтрока.СчетКт      = СчетРасчетовСПерсоналомПоОплатеТруда;
			КонецЕсли;	
			
			УстановитьАвтозначениеСубконто(НоваяСтрока,"Дт",СтрокаТаблицы.Подразделение);
			УстановитьАвтозначениеСубконто(НоваяСтрока,"Кт",СтрокаТаблицы.ФизическоеЛицо);
			
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаСвертки = "ВидОперации, Подразделение, НеОтражатьВБУ, СчетДт, СубконтоДт1, СубконтоДт2, СубконтоДт3, СчетКт, СубконтоКт1, СубконтоКт2, СубконтоКт3, НалоговоеНазначение, НалоговоеНазначениеДоходовИЗатрат";
	
	ТаблицаНачисленийИУдержаний.Свернуть(СтрокаСвертки, "Сумма");
	
	Возврат ТаблицаНачисленийИУдержаний;
		
КонецФункции

Функция ПодготовитьТаблицуВзносовСФОТ(ТаблицаЗаработнойПлаты) Экспорт
	
	ТаблицаВзносовСФОТ = ТаблицаЗаработнойПлаты.СкопироватьКолонки();
	
	Запрос= Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаЗаработнойПлаты", ТаблицаЗаработнойПлаты);
	Запрос.УстановитьПараметр("ВидОперацииРезерв", Перечисления.ВидыОперацийПоЗарплате.НачисленоОтпускныеРезерв);
	Запрос.УстановитьПараметр("СпособОтраженияРезерв", Справочники.СпособыОтраженияЗарплатыВРеглУчете.ИспользованиеРезерваОтпусков);
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаЗаработнойПлаты.ВидОперации,
	|	ТаблицаЗаработнойПлаты.НеОтражатьВБУ,
	|   ТаблицаЗаработнойПлаты.Подразделение,
	|   ТаблицаЗаработнойПлаты.ФизическоеЛицо,
	|   ТаблицаЗаработнойПлаты.Налог,
	|   ТаблицаЗаработнойПлаты.СтатьяЗатратВзносы,
	|   ТаблицаЗаработнойПлаты.СтатьяНалоговойДекларации,
	|   ТаблицаЗаработнойПлаты.СуммаВзносы,
	|   ТаблицаЗаработнойПлаты.СчетКтВзносы,
	|   ТаблицаЗаработнойПлаты.СпособОтраженияЗарплатыВБухучетеВзносы
	|ПОМЕСТИТЬ ВТТаблицаВзносы
	|ИЗ &ТаблицаЗаработнойПлаты КАК ТаблицаЗаработнойПлаты
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаВзносы.ВидОперации,
	|	ТаблицаВзносы.НеОтражатьВБУ КАК НеОтражатьВБУ,
	|   ТаблицаВзносы.Подразделение,
	|   ТаблицаВзносы.ФизическоеЛицо,
	|   ТаблицаВзносы.Налог,
	|   ТаблицаВзносы.СтатьяЗатратВзносы,
	|   ТаблицаВзносы.СтатьяНалоговойДекларации,
	|   ТаблицаВзносы.СуммаВзносы КАК Сумма,
	|   ТаблицаВзносы.СчетКтВзносы КАК СчетКт,
	|   СпособыОтражения.СчетДт,
	|   СпособыОтражения.СубконтоДт1,
	|   СпособыОтражения.СубконтоДт2,
	|   СпособыОтражения.СубконтоДт3,
	|   СпособыОтражения.НалоговоеНазначение,
	|   СпособыОтражения.НалоговоеНазначениеДоходовИЗатрат
	|
	|ИЗ ВТТаблицаВзносы КАК ТаблицаВзносы
	|   ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК СпособыОтражения
	|		ПО (ТаблицаВзносы.ВидОперации <> &ВидОперацииРезерв 
	|			И ТаблицаВзносы.СпособОтраженияЗарплатыВБухучетеВзносы = СпособыОтражения.Ссылка)
	|		ИЛИ (ТаблицаВзносы.ВидОперации = &ВидОперацииРезерв И НЕ ТаблицаВзносы.НеОтражатьВБУ 
	|			И СпособыОтражения.Ссылка = &СпособОтраженияРезерв)
	|		ИЛИ (ТаблицаВзносы.ВидОперации = &ВидОперацииРезерв И ТаблицаВзносы.НеОтражатьВБУ 
	|			 И ТаблицаВзносы.СпособОтраженияЗарплатыВБухучетеВзносы = СпособыОтражения.Ссылка)
	|";
	
	ТаблицаЗаработнойПлатыВзносыФОТ = Запрос.Выполнить().Выгрузить();
	
	СчетРасчетовЕСВ        						= ПланыСчетов.Хозрасчетный.РасчетыПоПенсионномуОбеспечению;      // 651
	ПустоеСубконто                              = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаЗаработнойПлатыВзносыФОТ Цикл
		
		Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоДоход
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоБольничные
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоОтпускныеДоход
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоОтпускныеРезерв
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НатуральныйДоход
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоЗаСчетФССДоход 
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоСдельноДоход
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ДивидендыСотрудников
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПустаяСсылка()
			Тогда
			
			НоваяСтрока = ТаблицаВзносовСФОТ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетКт) Тогда
				НоваяСтрока.СчетКт      = СчетРасчетовЕСВ;
			КонецЕсли;
			
			Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачисленоОтпускныеРезерв Тогда
				НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачислениеЕСВРезерв;
			Иначе	
				НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НачислениеЕСВ;
			КонецЕсли;	
			
			УстановитьАвтозначениеСубконто(НоваяСтрока,"Дт",СтрокаТаблицы.Подразделение);
			УстановитьАвтозначениеСубконто(НоваяСтрока,"Дт",СтрокаТаблицы.СтатьяЗатратВзносы, Истина);
			УстановитьАвтозначениеСубконто(НоваяСтрока,"Кт",СтрокаТаблицы.Налог);
			УстановитьАвтозначениеСубконто(НоваяСтрока,"Кт",СтрокаТаблицы.СтатьяНалоговойДекларации);
		КонецЕсли;	
			
	КонецЦикла;		
	
	Возврат ТаблицаВзносовСФОТ;
		
КонецФункции

Функция ПодготовитьТаблицуНДФЛ(ТаблицаНДФЛ) Экспорт
	
	ТаблицаУдержанныйНДФЛ = ТаблицаНДФЛ.СкопироватьКолонки();
	
	СчетРасчетовСПерсоналомПоОплатеТруда        = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;             // 661
	СчетРасчетовНДФЛ        					= ПланыСчетов.Хозрасчетный.РасчетыПоНДФЛ;      // 6411
	ПустоеСубконто                              = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаНДФЛ Цикл
		
		Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.НДФЛ
			ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ВоенныйСбор 
			Тогда
			
			НоваяСтрока = ТаблицаУдержанныйНДФЛ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетКт) Тогда
				НоваяСтрока.СчетКт      = СчетРасчетовНДФЛ;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетДт) Тогда
				НоваяСтрока.СчетДт      = СчетРасчетовСПерсоналомПоОплатеТруда;
			КонецЕсли;
			
			УстановитьАвтозначениеСубконто(НоваяСтрока,"Дт",СтрокаТаблицы.ФизическоеЛицо);
		КонецЕсли;	
			
	КонецЦикла;		
	
	Возврат ТаблицаУдержанныйНДФЛ;
		
КонецФункции

Функция ПодготовитьТаблицуУдержаний(ТаблицаУдержанийРаботника) Экспорт
		
	ТаблицаУдержаний = ТаблицаУдержанийРаботника.СкопироватьКолонки();
	
	СчетРасчетовСПерсоналомПоОплатеТруда        = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;             // 661
	СчетРасчетовДоходы        					= ПланыСчетов.Хозрасчетный.ДругиеДоходыОтОбычнойДеятельности;    // 746
	ПустоеСубконто                              = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаУдержанийРаботника Цикл
		
		Если СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.Алименты
		 ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ИсполнительныеЛисты
		 ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПочтовыйСбор
		 ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПогашениеЗаймов
		 ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПроцентыПоЗайму
		 ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ВидыОперацийПоЗарплате.ПрочиеУдержания
		 Тогда
			
			НоваяСтрока = ТаблицаУдержаний.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетКт) Тогда
				НоваяСтрока.СчетКт      = СчетРасчетовДоходы;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СчетДт) Тогда
				НоваяСтрока.СчетДт      = СчетРасчетовСПерсоналомПоОплатеТруда;
			КонецЕсли;
			
			УстановитьАвтозначениеСубконто(НоваяСтрока,"Дт",СтрокаТаблицы.ФизическоеЛицо);
			УстановитьАвтозначениеСубконто(НоваяСтрока,"Кт",СтрокаТаблицы.Подразделение);
			УстановитьАвтозначениеСубконто(НоваяСтрока,"Кт",СтрокаТаблицы.Контрагент);
			УстановитьАвтозначениеСубконто(НоваяСтрока,"Кт",СтрокаТаблицы.ФизическоеЛицо);
		КонецЕсли;	
			
	КонецЦикла;	
		
	СтрокаСвертки = "ВидОперации, СчетДт, СубконтоДт1, СубконтоДт2, СубконтоДт3, СчетКт, СубконтоКт1, СубконтоКт2, СубконтоКт3";
		
	ТаблицаУдержаний.Свернуть(СтрокаСвертки, "Сумма");
	
	Возврат ТаблицаУдержаний;
		
КонецФункции

Процедура УстановитьАвтозначениеСубконто(Данные, ДтКт, Автозначение, Замена = Ложь)
	
	Если Автозначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДтКт = "Дт" Тогда
		Счет = Данные.СчетДт;
	Иначе
		Счет = Данные.СчетКт;
	КонецЕсли;
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Для ИндексСубконто = 1 по СвойстваСчета.КоличествоСубконто Цикл
		
		ТипСубконто = СвойстваСчета["ВидСубконто" + ИндексСубконто + "ТипЗначения"];
		
		Если ТипСубконто.СодержитТип(ТипЗнч(Автозначение)) Тогда
			
			Если Замена Тогда
				Данные["Субконто"+ДтКт+ИндексСубконто] = Автозначение;
			ИначеЕсли НЕ ЗначениеЗаполнено(Данные["Субконто"+ДтКт+ИндексСубконто]) Тогда
				Данные["Субконто"+ДтКт+ИндексСубконто] = Автозначение;
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
		
	
КонецПроцедуры	

Функция СоотвествиеСодержанияПроводок() Экспорт 
	
	СодержанияПроводок = Новый Соответствие;	
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НачисленоДоход,                          НСтр("ru='Начислено зарплата';uk='Нараховано зарплата'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НачисленоБольничные,          		     НСтр("ru='Начислено больничные за счет предприятия';uk='Нараховано лікарняні за рахунок підприємства'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НачисленоОтпускныеДоход,                 НСтр("ru='Начислено отпускные';uk='Нараховано відпускні'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НачисленоОтпускныеРезерв,                НСтр("ru='Начислено отпускные (за счет резерва отпусков)';uk='Нараховано відпускні (за рахунок резерву відпусток)'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НатуральныйДоход,                        НСтр("ru='Начислено доход в натуральной форме';uk='Нараховано дохід у натуральній формі'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НачисленоСдельноДоход,                   НСтр("ru='Начислено зарплата сдельно';uk='Нараховано зарплата відрядно'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НачисленоЗаСчетФССДоход,                 НСтр("ru='Начислено за счет ФСС';uk='Нараховано за рахунок ФСС'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ДивидендыСотрудников,                    НСтр("ru='Начислено дивиденды';uk='Нараховано дивіденди'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НДФЛ,                                    НСтр("ru='Удержано НДФЛ';uk='Утримано ПДФО'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ВоенныйСбор,                             НСтр("ru='Удержано военный сбор';uk='Утримано військовий збір'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.УдержаниеЕСВ,                            НСтр("ru='Удержано ЕСВ';uk='Утримано ЄСВ'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НачислениеЕСВ,                           НСтр("ru='Начислено ЕСВ на ФОТ';uk='Нараховано ЄСВ на ФОП'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.НачислениеЕСВРезерв,                     НСтр("ru='Начислено ЕСВ на ФОТ (за счет резерва отпусков)';uk='Нараховано ЄСВ на ФОП (за рахунок резерву відпусток)'"));	
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.Алименты,  								 НСтр("ru='Удержано алименты';uk='Утримано аліменти'"));	
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ИсполнительныеЛисты,                	 НСтр("ru='Удержано по исполнительным листам';uk='Утримано за виконавчими листами'"));		
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПочтовыйСбор,            			 	 НСтр("ru='Удержано почтовый сбор';uk='Утримано поштовий збір'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПогашениеЗаймов,            			 НСтр("ru='Погашение займов';uk='Погашення позик'"));	
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПроцентыПоЗайму,						 НСтр("ru='Проценты по займу';uk='Відсотки по позиці'"));	
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПрочиеУдержания,                  		 НСтр("ru='Удержано прочее';uk='Утримано інше'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.Депонирование,                           НСтр("ru='Депонирование зарплаты';uk='Депонування зарплати'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.СписаниеДепонента,                       НСтр("ru='Списание депонированной зарплаты';uk='Списання депонованої зарплати'"));
	СодержанияПроводок.Вставить(Перечисления.ВидыОперацийПоЗарплате.ПрочиеРасчетыСПерсоналом,                НСтр("ru='Прочие расчеты с персоналом';uk='Інші розрахунки з персоналом'"));

	Возврат СодержанияПроводок;
	
КонецФункции

