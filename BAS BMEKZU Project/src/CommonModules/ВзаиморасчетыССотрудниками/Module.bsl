////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

//////////////////////////////////////////////////////////////////
/// Учёт начисленной и выплаченной зарплаты

// Процедура регистрирует факт начисления зарплаты с целью учета взаиморасчетов
//
//	Параметры
//		Движения 			- КоллекцияДвижений, коллекция наборов записей движений расчетного документа
//  	Отказ				- булево, признак отказа выполнения операции
//		Организация			- СправочникСсылка.Организации
//		ПериодРегистрации 	- дата
//		ХарактерВыплаты		- ПеречисленияСсылка.ХарактерВыплатыЗарплаты
//		Начисления  - таблица значений с данными о начислениях вида:
//						Сотрудник (СправочникСсылка.Сотрудники)
//						ФизическоеЛицо (СправочникСсылка.ФизическиеЛица)
//						Подразделение (СправочникСсылка.ПодразделенияОрганизаций)
//						Сумма 	
//						СуммаКорректировкиВыплаты 	
//
//		Удержания  - таблица значений с данными о начислениях вида:
//						Сотрудник (СправочникСсылка.Сотрудники)
//						ФизическоеЛицо (СправочникСсылка.ФизическиеЛица)
//						Подразделение (СправочникСсылка.ПодразделенияОрганизаций)
//						Сумма 	
//						СуммаКорректировкиВыплаты 	
//
// Исключения
//	В случае каких-либо проблем при проведении признак «Отказ» выставляется в Истина
//
Процедура ЗарегистрироватьНачисленнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, Начисления = Неопределено, Удержания = Неопределено, Взносы = Неопределено, НДФЛ = Неопределено) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ЗарегистрироватьНачисленнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, Начисления, Удержания, Взносы, НДФЛ);
КонецПроцедуры

// Процедура регистрирует факт выплаты зарплаты с целью учета взаиморасчетов
//
//	Параметры
//		Движения 			- КоллекцияДвижений, коллекция наборов записей движений ведомости
//		Отказ    			- булево, признак отказа в проведении
//		ПериодРегистрации	- дата
//		Зарплата  - таблица значений с данными о выплачиваемой зарплате вида:
//								•	Сотрудник (СправочникСсылка.Сотрудники)
//								•	ФизическоеЛицо (СправочникСсылка.ФизическиеЛица)
//								•	Подразделение (СправочникСсылка.ПодразделенияОрганизаций)
//								•	КВыплате 	
//
Процедура ЗарегистрироватьВыплаченнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, Зарплата) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ЗарегистрироватьВыплаченнуюЗарплату(Движения, Отказ, Организация, ПериодРегистрации, Зарплата)
КонецПроцедуры

//////////////////////////////////////////////////////////////////
/// Оплата ведомостей

// Функция возвращает информацию для оплаты платежным документом указанных ведомостей
//	Удобна для использования в процедурах заполнения платёжных документов.
//	Возвращаются суммы в разрезе ведомостей и физических лиц с учётом состояния оплаты
//  (все, оплаченные, только неоплаченные)
//	Оплаты, проведённые самим документом, не учитываются
//
// Параметры
//	Документ	 	- ссылка на документ-заказчик (его оплаты не учитываются)
//  Ведомости		- массив ссылок на ведомости (типа ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу, ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк)
//  ФизическиеЛица	- массив ссылок на физические лица
//	Оплаченные		- булево; учёт статуса оплаты:
//						истина		- только оплаченные
//						ложь		- неоплаченные
//						неопределено- состояние оплаты не учитывается
//
// Возвращаемое значение:
//		ДанныеВедомостейДляОплаты -	Таблица значений со строками ведомости:
//			Ведомость (ДокументСсылка)
//			ФизическоеЛицо
//			СуммаКВыплате
//
Функция ДанныеВедомостейДляОплатыДокументом(Документ, Ведомости, ФизическиеЛица = Неопределено, Оплаченные = Ложь) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТДанныеВедомостейДляОплатыДокументом(МенеджерВременныхТаблиц, Ложь, Документ, Ведомости, ФизическиеЛица, Оплаченные);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ДанныеВедомостей.Ведомость КАК Ведомость,
		|	ДанныеВедомостей.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДанныеВедомостей.СчетУчета КАК СчетУчета,
		|	ДанныеВедомостей.СуммаКВыплате КАК СуммаКВыплате
		|ИЗ
		|	ВТДанныеВедомостейДляОплатыДокументом КАК ДанныеВедомостей";
	
	ДанныеВедомостейДляОплаты = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеВедомостейДляОплаты;
	
КонецФункции

// Функция-конструктор структуры, описывающей правила контроля данных об облате
//	Предназначения для создания параметра Проверки процедуры ПроверитьОплатуВедомостейДокументом
//							
// Возвращаемое значение:
//		Структура проверок с полями:
//			ВедомостьПроведена	- контролировать проведённость ведомостей
//			РаботникВВедомости	- контролировать наличие указанного работника в ведомости
//			ПовторнаяВыплата	- контроль повторной выплаты по строке ведомости
//
Функция ПроверкиОплатыВедомостейДокументом() Экспорт
	
	Проверки = Новый Структура;
	
	Проверки.Вставить("ВедомостьПроведена",	Истина);
	Проверки.Вставить("РаботникВВедомости",	Истина);
	Проверки.Вставить("ПовторнаяВыплата",	Истина);
	
	Возврат Проверки
	
КонецФункции

// Процедура проверяет данные по оплате зарплаты
//	Удобна для использования при проведении
//	Контролируется:
//		проведенность ведомости
//		соответствие ведомости и работника (наличие такого в ведомости)
//		попытка повторной выплаты
//	Объём проверок может настраиваться параметром Проверки 
//
// Параметры
//	Документ		 - объект или ссылка - платежный документ (его оплаты не учитываются)
//	Отказ			 - булево - признак наличия ошибок в проверяемых данных ведомостей	
//	ОплатаВедомостей - таблица значений с данными об оплате вида:
//							Ведомость (ДокументСсылка)
//							ФизическоеЛицо (СправочникСсылка.ФизическиеЛица)
//	Проверки		 - Структура правил проверки, см. ПроверкиОплатыВедомостейДокументом()
//
Процедура ПроверитьОплатуВедомостейДокументом(Документ, Отказ, ОплатаВедомостей, Проверки = Неопределено) Экспорт
	
	Если Проверки = Неопределено Тогда
		Проверки = ПроверкиОплатыВедомостейДокументом()
	КонецЕсли;
	
	РазделительВТ =
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|";
	

    Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Регистратор", Документ.Ссылка);
	Запрос.УстановитьПараметр("ОплатаВедомостей", ОплатаВедомостей);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОплатаВедомостей.Ведомость КАК Ведомость,
	|	ОплатаВедомостей.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТОплатаВедомостей
	|ИЗ
	|	&ОплатаВедомостей КАК ОплатаВедомостей
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ведомость,
	|	ФизическоеЛицо"
	+
	РазделительВТ;
	
	ШаблонЗапросаДанныеВедомости = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВедомостьЗарплата.Ссылка КАК Ведомость,
	|	ВедомостьЗарплата.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТДанныеВедомостей
	|ИЗ
	|	#ВедомостьЗарплата КАК ВедомостьЗарплата
	|ГДЕ
	|	ВедомостьЗарплата.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТОплатаВедомостей.Ведомость
	|			ИЗ
	|				ВТОплатаВедомостей)";
	
	Запрос.Текст = Запрос.Текст + 
		ТекстЗапросаВТДанныеВедомостей(ШаблонЗапросаДанныеВедомости, "#ВедомостьЗарплата", "Зарплата") 
		+ 
		РазделительВТ;
	
	Запрос.Текст = Запрос.Текст + 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОплатаВедомостей.Ведомость КАК Ведомость,
	|	ОплатаВедомостей.Ведомость.Проведен КАК Проведен
	|ИЗ
	|	ВТОплатаВедомостей КАК ОплатаВедомостей"
	+ 
	РазделительВТ
	+
	"ВЫБРАТЬ
	|	ОплатаВедомостей.Ведомость,
	|	ОплатаВедомостей.ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ДанныеВедомостей.ФизическоеЛицо ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФизлицаНетВВедомости,
	|	ВЫБОР
	|		КОГДА РегистрОплатыВедомостей.Регистратор ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ПовторнаяВыплата,
	|	РегистрОплатыВедомостей.Регистратор
	|ИЗ
	|	ВТОплатаВедомостей КАК ОплатаВедомостей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеВедомостей КАК ДанныеВедомостей
	|		ПО (ДанныеВедомостей.Ведомость = ОплатаВедомостей.Ведомость)
	|			И (ДанныеВедомостей.ФизическоеЛицо = ОплатаВедомостей.ФизическоеЛицо)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК РегистрОплатыВедомостей
	|		ПО (РегистрОплатыВедомостей.Ведомость = ОплатаВедомостей.Ведомость)
	|			И (РегистрОплатыВедомостей.ФизическоеЛицо = ОплатаВедомостей.ФизическоеЛицо)
	|			И (РегистрОплатыВедомостей.Регистратор <> &Регистратор)";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаВедомостей = РезультатыЗапроса[РезультатыЗапроса.Количество()-2].Выгрузить();
	ТаблицаРаботников = РезультатыЗапроса[РезультатыЗапроса.Количество()-1].Выгрузить();
	
	Если Проверки.ВедомостьПроведена Тогда
		ОшибкиВедомостьНеПроведена = ТаблицаВедомостей.НайтиСтроки(Новый Структура("Проведен", Ложь));
		Отказ = Отказ ИЛИ ОшибкиВедомостьНеПроведена.Количество()>0;
		
		Для Каждого Ошибка Из ОшибкиВедомостьНеПроведена Цикл
			СообщениеОбОшибке = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Документ %1 не проведен!';uk='Документ %1 не проведений!'"), 
					Ошибка.Ведомость);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		КонецЦикла;
	КонецЕсли;
	
	Если Проверки.РаботникВВедомости Тогда
		ОшибкиНетВВедомости	= ТаблицаРаботников.НайтиСтроки(Новый Структура("ФизлицаНетВВедомости", Истина));
		Отказ = Отказ ИЛИ ОшибкиНетВВедомости.Количество()>0;
		
		Для Каждого Ошибка Из ОшибкиНетВВедомости Цикл
				СообщениеОбОшибке = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Документ %1 не содержит сотрудника %2!';uk='Документ %1 не містить співробітника %2!'"), 
						Ошибка.Ведомость, 
						Ошибка.ФизическоеЛицо);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		КонецЦикла;	
	КонецЕсли;
	
	Если Проверки.ПовторнаяВыплата Тогда
		ПовторныеВыплаты = ТаблицаРаботников.НайтиСтроки(Новый Структура("ПовторнаяВыплата", Истина));
		Отказ = Отказ ИЛИ ПовторныеВыплаты.Количество() > 0;
	
		Для Каждого ПовторнаяВыплата Из ПовторныеВыплаты Цикл
				СообщениеОбОшибке = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Выплата сотруднику %2 по документу %1 уже произведена документом %3!';uk='Виплата співрбітнику %2 по документу %1 вже зроблена документом %3!'"), 
						ПовторнаяВыплата.Ведомость, 
						ПовторнаяВыплата.ФизическоеЛицо,
						ПовторнаяВыплата.Регистратор);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

// Процедура регистрирует факт оплаты ведомостей
//
// Параметры
//	Документ	- платежный документ (документ-объект)
//  Отказ		- признак отказа выполнения операции
//	ОплатаВедомостей
//				- таблица значений с данными об оплате вида:
//					Ведомость (ДокументСсылка)
//					ФизическоеЛицо (СправочникСсылка.ФизическиеЛица)
//
// Обработка ошибочных ситуаций
//	выдается сообщение, признак «Отказ» выставляется в Истина
//
Процедура ЗарегистрироватьОплатуВедомостейДокументом(Документ, Отказ, ОплатаВедомостей, Движения = Неопределено) Экспорт
	
	Если Отказ ИЛИ ОплатаВедомостей = Неопределено Тогда
		Возврат
	КонецЕсли;		
	
	ПроверитьОплатуВедомостейДокументом(Документ, Отказ, ОплатаВедомостей);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Ведомости = ОплатаВедомостей.ВыгрузитьКолонку("Ведомость");
	ОрганизацияВедомости = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Ведомости, "Организация");
	
	Для Каждого СтрокаОплаты Из ОплатаВедомостей Цикл
				
		Если Движения = Неопределено Тогда
			НоваяСтрока = Документ.Движения.ОплатаВедомостейНаВыплатуЗарплаты.Добавить();
		Иначе
			НоваяСтрока = Движения.ОплатаВедомостейНаВыплатуЗарплаты.Добавить();
		КонецЕсли;	
		
		НоваяСтрока.Организация		= ОрганизацияВедомости[СтрокаОплаты.Ведомость];
		НоваяСтрока.Ведомость 		= СтрокаОплаты.Ведомость; 
		НоваяСтрока.ФизическоеЛицо	= СтрокаОплаты.ФизическоеЛицо;
		НоваяСтрока.СчетУчета		= СтрокаОплаты.СчетУчета;
		
	КонецЦикла;
	
	Если Движения = Неопределено Тогда
		Документ.Движения.ОплатаВедомостейНаВыплатуЗарплаты.Записывать = Истина;		
	Иначе
		Движения.ОплатаВедомостейНаВыплатуЗарплаты.Записывать = Истина;
	КонецЕсли;	
	
КонецПроцедуры

// Функция проверяет, есть ли выплаты по ведомости
//
// Параметры:
//	Ведомость - документ-ссылка
//
// Возвращаемое значение:
//	Булево
//
Функция ЕстьОплатаПоВедомости(Ведомость) Экспорт
	
	Если Ведомость.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ведомость", Ведомость);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК ОплатаВедомостей
	|ГДЕ
	|	ОплатаВедомостей.Ведомость = &Ведомость";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьПеречислениеНалоговПоВедомости(Ведомость) Экспорт
	
	Если Ведомость.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ведомость", Ведомость);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.ПеречислениеНалогов КАК ОплатаВедомостей
	|ГДЕ
	|	ОплатаВедомостей.Ведомость = &Ведомость
	|   И ОплатаВедомостей.Ссылка.Проведен";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

//////////////////////////////////////////////////////////////////
/// Первоначальное заполнение и обновление информационной базы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	

КонецПроцедуры	

//////////////////////////////////////////////////////////////////
/// Оплата ведомостей                        

// Формирует временную таблицу ВТДанныеВедомостейДляОплатыДокументом с информацией для оплаты платежным документом указанных ведомостей.
// Временная таблица содержит невыплаченные суммы в разрезе ведомостей и физических лиц:
//	Ведомость
//	ФизическоеЛицо
//	СуммаКВыплате
//	
// Параметры:
//	МенеджерВременныхТаблиц
//	ТолькоРазрешенные - Булево
//  Ведомости		- массив ссылок на ведомости (типа ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу, ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк)
//  ФизическиеЛица	- массив ссылок на физические лица
//	Оплаченные		- булево; описывает учёт статуса оплаты:
//						истина		- только оплаченные
//						ложь		- неоплаченные
//						неопределено- состояние оплаты не учитывается
//
 Процедура СоздатьВТДанныеВедомостейДляОплатыДокументом(МенеджерВременныхТаблиц, ТолькоРазрешенные, Документ, Ведомости, ФизическиеЛица = Неопределено, Оплаченные = Ложь) Экспорт
	
	ШаблонЗапросаДанныеВедомости = 
	"ВЫБРАТЬ
	|	ВедомостьЗарплата.Ссылка КАК Ссылка,
	|	ВедомостьЗарплата.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВедомостьЗарплата.СчетУчета КАК СчетУчета,
	|	ВедомостьЗарплата.КВыплате КАК КВыплате
	|ПОМЕСТИТЬ ВТДанныеВедомостей
	|ИЗ
	|	#ВедомостьЗарплата КАК ВедомостьЗарплата
	|   //ЛЕВОЕ СОЕДИНЕНИЕ
	|ГДЕ
	|	ВедомостьЗарплата.Ссылка В(&Ведомости)
	|	И (&ПоВсемФизлицам
	|			ИЛИ ВедомостьЗарплата.ФизическоеЛицо В (&ФизическиеЛица))
	| //И ";
	
    Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Регистратор", Документ);
	Запрос.УстановитьПараметр("Ведомости", Ведомости);
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.УстановитьПараметр("ПоВсемФизлицам", ФизическиеЛица = Неопределено);
	Запрос.УстановитьПараметр("Оплаченные", Оплаченные);
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		Запрос.УстановитьПараметр("Банк", Документ.Контрагент);
	КонецЕсли;	
	Запрос.Текст = ТекстЗапросаВТДанныеВедомостей(ШаблонЗапросаДанныеВедомости, "#ВедомостьЗарплата", "ЗарплатаПодробно", Документ);
	
	Запрос.Текст = Запрос.Текст +
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|";
	
	Если Оплаченные = Неопределено Тогда
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ВедомостьЗарплата.Ссылка КАК Ведомость,
		|	ВедомостьЗарплата.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВедомостьЗарплата.СчетУчета КАК СчетУчета,
		|	СУММА(ВедомостьЗарплата.КВыплате) КАК СуммаКВыплате
		|ПОМЕСТИТЬ ВТДанныеВедомостейДляОплатыДокументом
		|ИЗ
		|	ВТДанныеВедомостей КАК ВедомостьЗарплата
		|
		|СГРУППИРОВАТЬ ПО
		|	ВедомостьЗарплата.Ссылка,
		|	ВедомостьЗарплата.ФизическоеЛицо,
		|	ВедомостьЗарплата.СчетУчета";
	Иначе	
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	ВедомостьЗарплата.Ссылка КАК Ведомость,
		|	ВедомостьЗарплата.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВедомостьЗарплата.СчетУчета КАК СчетУчета,
		|	СУММА(ВедомостьЗарплата.КВыплате) КАК СуммаКВыплате
		|ПОМЕСТИТЬ ВТДанныеВедомостейДляОплатыДокументом
		|ИЗ
		|	ВТДанныеВедомостей КАК ВедомостьЗарплата
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОплатаВедомостейНаВыплатуЗарплаты КАК Оплата
		|		ПО (Оплата.Регистратор <> &Регистратор)
		|			И (Оплата.Ведомость = ВедомостьЗарплата.Ссылка)
		|			И (Оплата.ФизическоеЛицо = ВедомостьЗарплата.ФизическоеЛицо)
		|			И (Оплата.СчетУчета = ВедомостьЗарплата.СчетУчета)
		|ГДЕ
		|	(&Оплаченные
		|				И НЕ Оплата.Регистратор ЕСТЬ NULL 
		|			ИЛИ НЕ &Оплаченные
		|				И Оплата.Регистратор ЕСТЬ NULL )
		|
		|СГРУППИРОВАТЬ ПО
		|	ВедомостьЗарплата.Ссылка,
		|	ВедомостьЗарплата.ФизическоеЛицо,
		|	ВедомостьЗарплата.СчетУчета";
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Процедура регистрирует факт неудачи при попытке выплаты по ведомостям
// При этом невыплаченыне суммы "возвращаются" во взаиморасчеты
//
// Параметры
//		Движения 			- КоллекцияДвижений, коллекция наборов записей движений ведомости
//		Отказ		- признак отказа выполнения операции
//		Ведомость	- ссылка на ведомость на выплату зарплаты
//		ФизическиеЛица	- массив ссылок на физические лица
//
// Обработка ошибочных ситуаций
//	выдается сообщение, признак «Отказ» выставляется в Истина
//
Процедура ЗарегистрироватьНевыплатуПоВедомости(Движения, Отказ, Ведомость, ФизическиеЛица) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ЗарегистрироватьНеВыплатуПоВедомости(Движения, Отказ, Ведомость, ФизическиеЛица)
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//////////////////////////////////////////////////////////////////
/// Оплата ведомостей

Функция ТекстЗапросаВТДанныеВедомостей(ШаблонЗапроса, ИсточникДанныхВШаблоне = "ИсточникДанных", ИмяТЧ = "", Регистратор = Неопределено)
	
	ИмяВТ = "ВТДанныеВедомостей";
	
	ТекстЗапросаВТДанныеВедомостей = "";
	
	Для Каждого ТипВедомости Из Метаданные.РегистрыСведений.ОплатаВедомостейНаВыплатуЗарплаты.Измерения.Ведомость.Тип.Типы()  Цикл
		
		ИсточникДанных = Метаданные.НайтиПоТипу(ТипВедомости).ПолноеИмя() + ?(ЗначениеЗаполнено(ИмяТЧ), "." + ИмяТЧ, "");
		ТекстЗапросаПоТипуВедомости = СтрЗаменить(ШаблонЗапроса, ИсточникДанныхВШаблоне, ИсточникДанных);
		
		Если Метаданные.НайтиПоТипу(ТипВедомости).ПолноеИмя() = "Документ.ВедомостьНаВыплатуЗарплаты" Тогда
			ТекстЗапросаПоТипуВедомости = СтрЗаменить(ТекстЗапросаПоТипуВедомости, "Документ.ВедомостьНаВыплатуЗарплаты.ЗарплатаПодробно", "Документ.ВедомостьНаВыплатуЗарплаты.ПараметрыОплаты");
			ТекстЗапросаПоТипуВедомости = СтрЗаменить(ТекстЗапросаПоТипуВедомости, "Документ.ВедомостьНаВыплатуЗарплаты.Зарплата", "Документ.ВедомостьНаВыплатуЗарплаты.РаботникиОрганизации");
			Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме") Тогда
				ТекстЗапросаПоТипуВедомости = СтрЗаменить(ТекстЗапросаПоТипуВедомости, "ВедомостьЗарплата.ФизическоеЛицо", "ВедомостьЗарплата.ФизЛицо");
			Иначе	
				ТекстЗапросаПоТипуВедомости = СтрЗаменить(ТекстЗапросаПоТипуВедомости, "ВедомостьЗарплата.ФизическоеЛицо", "ВедомостьЗарплата.Сотрудник.ФизическоеЛицо");
			КонецЕсли;	
			ТекстЗапросаПоТипуВедомости = СтрЗаменить(ТекстЗапросаПоТипуВедомости, "ВедомостьЗарплата.КВыплате", "ВедомостьЗарплата.Сумма");
			
			Если ИмяТЧ = "ЗарплатаПодробно" Тогда
				ТекстЗапросаПоТипуВедомости = СтрЗаменить(ТекстЗапросаПоТипуВедомости, "//ЛЕВОЕ СОЕДИНЕНИЕ", 
				"ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплаты.РаботникиОрганизации КАК Зарплата ПО ВедомостьЗарплата.Ссылка = Зарплата.Ссылка И ВедомостьЗарплата.Сотрудник = Зарплата.Сотрудник И ВедомостьЗарплата.ФизЛицо = Зарплата.ФизЛицо");
				Если Регистратор = Неопределено ИЛИ ТипЗнч(Регистратор) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
					ТекстЗапросаПоТипуВедомости = СтрЗаменить(ТекстЗапросаПоТипуВедомости, "//И", "И Зарплата.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу) И Зарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)");
				ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
					ТекстЗапросаПоТипуВедомости = СтрЗаменить(ТекстЗапросаПоТипуВедомости, "//И", "И Зарплата.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк) И Зарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено) И Зарплата.Банк = &Банк")
				Иначе	
					ТекстЗапросаПоТипуВедомости = СтрЗаменить(ТекстЗапросаПоТипуВедомости, "//И", "И Зарплата.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк) И Зарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)");
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(ТекстЗапросаВТДанныеВедомостей) Тогда
			ТекстЗапросаВТДанныеВедомостей = ТекстЗапросаВТДанныеВедомостей + 
				"
				|
			 	|ОБЪЕДИНИТЬ ВСЕ
				|
				|";
			ТекстЗапросаПоТипуВедомости = СтрЗаменить(ТекстЗапросаПоТипуВедомости, "ПОМЕСТИТЬ " + ИмяВТ + Символы.ПС, "");
		КонецЕсли;	
		
		ТекстЗапросаВТДанныеВедомостей = ТекстЗапросаВТДанныеВедомостей + ТекстЗапросаПоТипуВедомости
		
	КонецЦикла;	
	
		
	Возврат ТекстЗапросаВТДанныеВедомостей;
	
КонецФункции	

//////////////////////////////////////////////////////////////////
/// Зарплата к выплате

Функция ЗарплатаКВыплате(СпособВыплаты, ПараметрыЗаполнения, Регистратор = Неопределено)
	
	ТаблицаЗарплат = ВзаиморасчетыССотрудникамиВнутренний.ЗарплатаКВыплате(СпособВыплаты, ПараметрыЗаполнения, Регистратор);
	
	Если ТаблицаЗарплат.Зарплата = Неопределено Тогда
		ТаблицаЗарплата = Новый ТаблицаЗначений();
		Для Каждого Измерение Из Метаданные.РегистрыНакопления.ВзаиморасчетыССотрудниками.Измерения Цикл
			ТаблицаЗарплата.Колонки.Добавить(Измерение.Имя, Измерение.Тип)
		КонецЦикла;
		ТаблицаЗарплата.Колонки.Добавить("Ведомость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаЗарплата.Колонки.Добавить("КВыплате", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаЗарплата.Колонки.Добавить("СуммаОкругления", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаЗарплата.Колонки.Добавить("СуммаГрязными", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаЗарплат.Зарплата = ТаблицаЗарплата;
	Иначе
		Если СпособВыплаты <> Справочники.ВидыВыплат.Депоненты Тогда
			ТаблицаЗарплат.Зарплата.Колонки.Добавить("Ведомость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		КонецЕсли;	
	КонецЕсли;
	
	Если ТаблицаЗарплат.НДФЛ = Неопределено Тогда
		ТаблицаНДФЛ = Новый ТаблицаЗначений();
		Для Каждого Измерение Из Метаданные.РегистрыНакопления.ВзаиморасчетыПоНДФЛ.Измерения Цикл
			ТаблицаНДФЛ.Колонки.Добавить(Измерение.Имя, Измерение.Тип)
		КонецЦикла;
		ТаблицаНДФЛ.Колонки.Добавить("Налог", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаНДФЛ.Колонки.Добавить("Доход", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаЗарплат.НДФЛ = ТаблицаНДФЛ;
	КонецЕсли;
	
	Если ТаблицаЗарплат.Взносы = Неопределено Тогда
		ТаблицаВзносы = Новый ТаблицаЗначений();
		Для Каждого Измерение Из Метаданные.РегистрыНакопления.ВзаиморасчетыПоВзносамВФонды.Измерения Цикл
			ТаблицаВзносы.Колонки.Добавить(Измерение.Имя, Измерение.Тип)
		КонецЦикла;
		ТаблицаВзносы.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаЗарплат.Взносы = ТаблицаВзносы;
	КонецЕсли;
	
	Если ТаблицаЗарплат.ВзносыФОТ = Неопределено Тогда
		ТаблицаВзносы = Новый ТаблицаЗначений();
		Для Каждого Измерение Из Метаданные.РегистрыНакопления.ВзаиморасчетыПоВзносамВФонды.Измерения Цикл
			ТаблицаВзносы.Колонки.Добавить(Измерение.Имя, Измерение.Тип)
		КонецЦикла;
		ТаблицаВзносы.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
		ТаблицаЗарплат.ВзносыФОТ = ТаблицаВзносы;
	КонецЕсли;
	
	Возврат ТаблицаЗарплат;
	 
КонецФункции

//////////////////////////////////////////////////////////////////
/// Выплата зарплаты

// Процедура регистрирует факт включения выплат в ведомости и формирует движения по регистрам подсистемы
//
//	Параметры
//		Движения - коллекция наборов записей движений ведомости
//		Отказ    - признак отказа в проведении
//		ПериодРегистрации
//		СпособВыплаты - СправочникСсылка.СпособыВыплатыЗарплаты
//		Выплата - данные о выплачиваемых суммах в виде структуры с полями
//			Регистратор		- документ-ссылка
//			Организация		- СправочникСсылка.Организации
//			Подразделение	- СправочникСсылка.ПодразделенияОрганизаций
//			Зарплата  		- таблица значений с данными о выплачиваемой зарплате вида:
//								•	Сотрудник (СправочникСсылка.Сотрудники)
//								•	ФизическоеЛицо (СправочникСсылка.ФизическиеЛица)
//								•	Подразделение (СправочникСсылка.ПодразделенияОрганизаций)
//								•	Начислено 	
//
Процедура ЗарегистрироватьВыплату(Движения, Отказ, Организация, ПериодРегистрации, СпособВыплаты, Выплата) Экспорт
	
	ЗарегистрироватьВыплатуЗарплаты(Движения, Отказ, Организация, ПериодРегистрации, СпособВыплаты, Выплата);
			
	Движения.ВзаиморасчетыССотрудниками.Записывать = Истина;
		
КонецПроцедуры	

Процедура ЗарегистрироватьВыплатуАванса(Движения, Отказ, Организация, ПериодРегистрации, СпособВыплаты, Выплата)
	ВзаиморасчетыССотрудникамиВнутренний.ЗарегистрироватьВыплатуАванса(Движения, Отказ, Организация, ПериодРегистрации, СпособВыплаты, Выплата)
КонецПроцедуры

Процедура ЗарегистрироватьВыплатуВМежрасчет(Движения, Отказ, Организация, ПериодРегистрации, СпособВыплаты, Выплата)
	ВзаиморасчетыССотрудникамиВнутренний.ЗарегистрироватьВыплатуВМежрасчет(Движения, Отказ, Организация, ПериодРегистрации, СпособВыплаты, Выплата)
КонецПроцедуры

Процедура ЗарегистрироватьВыплатуЗарплаты(Движения, Отказ, Организация, ПериодРегистрации, СпособВыплаты, Выплата)
	ВзаиморасчетыССотрудникамиВнутренний.ЗарегистрироватьВыплатуЗарплаты(Движения, Отказ, Организация, ПериодРегистрации, СпособВыплаты, Выплата)
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции ведомостей на выплату зарплаты

// Заполнение и расчет документа

Функция ВедомостьРеквизитыОтветственныхЛиц() Экспорт 
	
	РеквизитыОтветственныхЛиц = Новый Массив;
	
	РеквизитыОтветственныхЛиц.Добавить("Руководитель");
	РеквизитыОтветственныхЛиц.Добавить("ДолжностьРуководителя");
	РеквизитыОтветственныхЛиц.Добавить("ГлавныйБухгалтер");
	
	Возврат РеквизитыОтветственныхЛиц
	
КонецФункции

Функция ВедомостьВКассуМестоВыплаты(Ведомость) Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.ВедомостьВКассуМестоВыплаты(Ведомость);
КонецФункции	

Функция ВедомостьМестоВыплаты() Экспорт
	
	ВедомостьМестоВыплаты = Новый Структура;
	ВедомостьМестоВыплаты.Вставить("Вид", Перечисления.ВидыМестВыплатыЗарплаты.ПустаяСсылка());
	ВедомостьМестоВыплаты.Вставить("Значение", Неопределено);
	
	Возврат ВедомостьМестоВыплаты
	
КонецФункции	

Функция ВедомостьВКассуМожноЗаполнитьАвтоматически(Ведомость) Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.ВедомостьВКассуМожноЗаполнитьАвтоматически(Ведомость);
КонецФункции

Функция ВедомостьВБанкМожноЗаполнитьАвтоматически(Ведомость) Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.ВедомостьВБанкМожноЗаполнитьАвтоматически(Ведомость);
КонецФункции

Функция ВедомостьМожноЗаполнитьАвтоматически(Ведомость) Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.ВедомостьМожноЗаполнитьАвтоматически(Ведомость);
КонецФункции

Процедура ВедомостьЗаполнитьАвтоматически(Ведомость, МестоВыплаты) Экспорт
	
	ПараметрыЗаполнения = ВедомостьПараметрыЗаполнения(Ведомость, МестоВыплаты);
	ПараметрыРасчета	= ВедомостьПараметрыРасчета(Ведомость);
	
	ТаблицаЗарплат = ЗарплатаКВыплате(Ведомость.СпособВыплаты, ПараметрыЗаполнения, Ведомость.Ссылка);
	РассчитатьЗарплату(ТаблицаЗарплат.Зарплата, ПараметрыРасчета);
	
	ЗаполнитьДокументПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат);
	
КонецПроцедуры

Процедура ВедомостьРассчитать(Ведомость, МестоВыплаты) Экспорт
	
	ПараметрыЗаполнения = ВедомостьПараметрыЗаполнения(Ведомость, МестоВыплаты);
	ПараметрыРасчета	= ВедомостьПараметрыРасчета(Ведомость);
	
	ТаблицаЗарплат = ЗарплатаКВыплате(Ведомость.СпособВыплаты, ПараметрыЗаполнения, Ведомость.Ссылка);
	РассчитатьЗарплату(ТаблицаЗарплат.Зарплата, ПараметрыРасчета);
	
	ЗаполнитьДокументПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат);
	
КонецПроцедуры

Функция ВедомостьМожноРассчитатьНалоги(Ведомость) Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.ВедомостьМожноРассчитатьНалоги(Ведомость);
КонецФункции

Процедура ВедомостьРассчитатьНалоги(Ведомость, МестоВыплаты) Экспорт
	
	ПараметрыЗаполнения = ВедомостьПараметрыЗаполнения(Ведомость, МестоВыплаты);
	ПараметрыРасчетаНалогов	= ВедомостьПараметрыРасчетаНалогов(Ведомость);
	
	ТаблицаЗарплат = Новый Структура();
	ТаблицаЗарплат.Вставить("Зарплата", Неопределено);
	ТаблицаЗарплат.Вставить("Начисления", Неопределено);
	ТаблицаЗарплат.Вставить("НДФЛ", Неопределено);
	ТаблицаЗарплат.Вставить("Взносы", Неопределено);
	ТаблицаЗарплат.Вставить("ВзносыФОТ", Неопределено);
	
	ТаблицаЗарплат.Зарплата = Ведомость.ЗарплатаПодробно.Выгрузить();
	
	Если Ведомость.СпособВыплаты.РасчетОтОбратного Тогда
		Для Каждого СтрокаТЧ Из ТаблицаЗарплат.Зарплата Цикл
			СтрокаТЧ.СуммаГрязными = СтрокаТЧ.КВыплате;
		КонецЦикла;
	КонецЕсли;	
	
	РассчитатьНалоги(ТаблицаЗарплат, ПараметрыЗаполнения, ПараметрыРасчетаНалогов);
	
	Если Ведомость.СпособВыплаты <> Справочники.ВидыВыплат.Депоненты Тогда
		ТаблицаЗарплат.Зарплата.Колонки.Добавить("Ведомость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	КонецЕсли;
	
	ЗаполнитьДокументПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат);
	
КонецПроцедуры


/// Обработчики событий модуля объекта документов Ведомости

Процедура ВедомостьОбработкаЗаполнения(ДокументОбъект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

Процедура ВедомостьОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если ДокументОбъект.ВводНачальныхДанных Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "СпособВыплаты");
	КонецЕсли;
	
	Если ДокументОбъект.СпособВыплаты = Справочники.ВидыВыплат.Депоненты Тогда
		ПроверяемыеРеквизиты.Добавить("ЗарплатаПодробно.Ведомость");
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВедомостьПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи) Экспорт
	
	Если ЕстьОплатаПоВедомости(ДокументОбъект.Ссылка) Тогда
		
		СообщениеОбОшибке = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='По ведомости %1 номер %2 от %3 произведены оплаты, изменения запрещены!';uk='За відомістю %1 номер %2 від %3 зроблені оплати, зміни заборонені!'"), 
				?(ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВедомостьНаВыплатуЗарплатыВКассу"), НСтр("ru='в кассу';uk='в касу'"), НСтр("ru='в банк';uk='в банк'")), 
				ДокументОбъект.Номер, 
				Формат(ДокументОбъект.Дата, "ДФ=dd.MM.yyyy"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, ДокументОбъект);
		
		Отказ = Истина;
		
		Возврат
		
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки
	ДокументОбъект.СуммаПоДокументу = ДокументОбъект.Зарплата.Итог("КВыплате");

КонецПроцедуры

Процедура ВедомостьОбработкаПроведения(ДокументОбъект, Отказ) Экспорт
	ВзаиморасчетыССотрудникамиВнутренний.ВедомостьОбработкаПроведения(ДокументОбъект, Отказ);
КонецПроцедуры

/// Функции получения и расчета выплачиваемой зарплаты

Процедура РассчитатьЗарплату(Зарплата, ДанныеДляРасчета) 
	
	ВзаиморасчетыССотрудникамиВнутренний.РассчитатьЗарплату(Зарплата, ДанныеДляРасчета);
		
КонецПроцедуры

Процедура РассчитатьНалоги(Зарплата, ДанныеДляЗаполнения, ДанныеДляРасчета) 
	
	ВзаиморасчетыССотрудникамиВнутренний.РассчитатьНалоги(Зарплата, ДанныеДляЗаполнения, ДанныеДляРасчета);
		
КонецПроцедуры

Процедура ЗаполнитьДокументПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Дата", Ведомость.Дата);
	Запрос.УстановитьПараметр("Зарплата", ТаблицаЗарплат.Зарплата);
	Запрос.УстановитьПараметр("НДФЛ", ТаблицаЗарплат.НДФЛ);
	Запрос.УстановитьПараметр("Взносы", ТаблицаЗарплат.Взносы);
	Запрос.УстановитьПараметр("ВзносыФОТ", ТаблицаЗарплат.ВзносыФОТ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Дата КАК Период,
	|	Зарплата.Сотрудник,
	|	Зарплата.ФизическоеЛицо,
	|	Зарплата.СчетУчета,
	|	Зарплата.Ведомость,
	|	Зарплата.ПериодВзаиморасчетов,
	|	Зарплата.КВыплате,
	|	Зарплата.СуммаОкругления,
	|	Зарплата.СуммаГрязными
	|ПОМЕСТИТЬ ВТЗарплата
	|ИЗ
	|	&Зарплата КАК Зарплата
	|;
	|
	|ВЫБРАТЬ
	|	НДФЛ.Контрагент,
	|	НДФЛ.ПериодВзаиморасчетов,
	|	НДФЛ.НалоговыйПериод,
	|	НДФЛ.ДоходНДФЛ,
	|	НДФЛ.Налог,
	|	НДФЛ.Доход
	|ПОМЕСТИТЬ ВТНДФЛ
	|ИЗ
	|	&НДФЛ КАК НДФЛ
	|;
	|
	|ВЫБРАТЬ
	|	&Дата КАК Период,
	|	НДФЛ.Контрагент КАК ФизическоеЛицо,
	|	НДФЛ.ПериодВзаиморасчетов,
	|	НДФЛ.ДоходНДФЛ,
	|	НДФЛ.Налог,
	|	НДФЛ.Доход
	|ПОМЕСТИТЬ ВТНДФЛФизДиц
	|ИЗ
	|	&НДФЛ КАК НДФЛ
	|;
	|
	|ВЫБРАТЬ
	|	Взносы.Налог,
	|	Взносы.ПериодВзаиморасчетов,
	|	Взносы.СтатьяНалоговойДекларации,
	|	Взносы.Сумма
	|ПОМЕСТИТЬ ВТВзносы
	|ИЗ
	|	&Взносы КАК Взносы
	|;
	|
	|ВЫБРАТЬ
	|	ВзносыФОТ.Налог,
	|	ВзносыФОТ.ПериодВзаиморасчетов,
	|	ВзносыФОТ.СтатьяНалоговойДекларации,
	|	ВзносыФОТ.Сумма
	|ПОМЕСТИТЬ ВТВзносыФОТ
	|ИЗ
	|	&ВзносыФОТ КАК ВзносыФОТ";
	Запрос.Выполнить();
	
	Если Ведомость.СпособВыплаты = Справочники.ВидыВыплат.НДФЛБезВыплатыЗарплаты Тогда
		ОписательВременныхТаблиц = 
		КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(
    		Запрос.МенеджерВременныхТаблиц,
    		"ВТНДФЛФизДиц");
		КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Истина, "Фамилия, Имя, Отчество");
	Иначе	
		ОписательВременныхТаблиц = 
			КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(
	    		Запрос.МенеджерВременныхТаблиц,
	    		"ВТЗарплата");
		КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Истина, "Фамилия, Имя, Отчество");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СПогашениемДолгов", Ведомость.СпособВыплаты = Справочники.ВидыВыплат.ОчереднаяПогашениеДолгов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Зарплата.Сотрудник,
	|	Зарплата.ФизическоеЛицо,
	|	Зарплата.Ведомость,
	|	Зарплата.СчетУчета,
	|	Зарплата.ПериодВзаиморасчетов,
	|	Зарплата.КВыплате,
	|	Зарплата.СуммаОкругления,
	|	Зарплата.СуммаГрязными
	|ИЗ
	|	ВТЗарплата КАК Зарплата
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц
	|		ПО Зарплата.ФизическоеЛицо = КадровыеДанныеФизическихЛиц.ФизическоеЛицо
	|ГДЕ
	|	Зарплата.КВыплате > 0 ИЛИ &СПогашениемДолгов 
	|
	|УПОРЯДОЧИТЬ ПО
	//|	ВЫРАЗИТЬ(КадровыеДанныеФизическихЛиц.ТекущееПодразделение КАК Справочник.ПодразделенияОрганизаций).РеквизитДопУпорядочиванияИерархического,
	//|	ВЫРАЗИТЬ(КадровыеДанныеФизическихЛиц.ТекущаяДолжность КАК Справочник.Должности).РеквизитДопУпорядочивания,
	|	КадровыеДанныеФизическихЛиц.Фамилия,
	|	КадровыеДанныеФизическихЛиц.Имя,
	|	КадровыеДанныеФизическихЛиц.Отчество,
	|   Зарплата.ПериодВзаиморасчетов
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛ.Контрагент,
	|	НДФЛ.ПериодВзаиморасчетов,
	|	НДФЛ.НалоговыйПериод,
	|	НДФЛ.ДоходНДФЛ,
	|	НДФЛ.Налог,
	|	НДФЛ.Доход
	|ИЗ
	|	ВТНДФЛ КАК НДФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц
	|		ПО НДФЛ.Контрагент = КадровыеДанныеФизическихЛиц.ФизическоеЛицо
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ
	|		ПО НДФЛ.ДоходНДФЛ = ВидыДоходовНДФЛ.Ссылка
	|ГДЕ
	|	НДФЛ.Налог <> 0 ИЛИ НДФЛ.Доход <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	//|	ВЫРАЗИТЬ(КадровыеДанныеФизическихЛиц.ТекущееПодразделение КАК Справочник.ПодразделенияОрганизаций).РеквизитДопУпорядочиванияИерархического,
	//|	ВЫРАЗИТЬ(КадровыеДанныеФизическихЛиц.ТекущаяДолжность КАК Справочник.Должности).РеквизитДопУпорядочивания,
	|	КадровыеДанныеФизическихЛиц.Фамилия,
	|	КадровыеДанныеФизическихЛиц.Имя,
	|	КадровыеДанныеФизическихЛиц.Отчество,
	|	ВидыДоходовНДФЛ.Код
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Взносы.Налог,
	|	Взносы.ПериодВзаиморасчетов,
	|	Взносы.СтатьяНалоговойДекларации,
	|	Взносы.Сумма
	|ИЗ
	|	ВТВзносы КАК Взносы
	|ГДЕ
	|	Взносы.Сумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Взносы.Сумма УБЫВ
    |;
	|
	|///////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзносыФОТ.Налог,
	|	ВзносыФОТ.ПериодВзаиморасчетов,
	|	ВзносыФОТ.СтатьяНалоговойДекларации,
	|	ВзносыФОТ.Сумма
	|ИЗ
	|	ВТВзносыФОТ КАК ВзносыФОТ
	|ГДЕ
	|	ВзносыФОТ.Сумма <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВзносыФОТ.Сумма УБЫВ
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛ.Контрагент,
	|	НДФЛ.ПериодВзаиморасчетов,
	|	НДФЛ.НалоговыйПериод,
	|	НДФЛ.ДоходНДФЛ,
	|	НДФЛ.Налог,
	|	НДФЛ.Доход
	|ИЗ
	|	ВТНДФЛ КАК НДФЛ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ
	|		ПО НДФЛ.ДоходНДФЛ = ВидыДоходовНДФЛ.Ссылка
	|ГДЕ
	|	НДФЛ.Налог <> 0 ИЛИ НДФЛ.Доход <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НДФЛ.Контрагент.Наименование,
	|	ВидыДоходовНДФЛ.Код
	|";

	Результат = Запрос.ВыполнитьПакет();
	РезультатЗарплата = Результат[0].Выгрузить();
	РезультатНДФЛ = Результат[1].Выгрузить();
	РезультатВзносы = Результат[2].Выгрузить();
	РезультатВзносыФОТ = Результат[3].Выгрузить();
	РезультатНДФЛКонтрагентам = Результат[4].Выгрузить();
	
	Ведомость.ЗарплатаПодробно.Загрузить(РезультатЗарплата);
	РезультатЗарплата.Свернуть("ФизическоеЛицо","КВыплате");
	Ведомость.Зарплата.Загрузить(РезультатЗарплата);
	
	Если Ведомость.СпособВыплаты = Справочники.ВидыВыплат.НДФЛКонтрагентам Тогда
		Ведомость.НДФЛ.Загрузить(РезультатНДФЛКонтрагентам);
	Иначе
		Ведомость.НДФЛ.Загрузить(РезультатНДФЛ);
	КонецЕсли;	
		
	Ведомость.Взносы.Загрузить(РезультатВзносы);
	Ведомость.ВзносыФОТ.Загрузить(РезультатВзносыФОТ);

	
КонецПроцедуры

Процедура ОбновитьДокументПоТаблицеЗарплат(Ведомость, ТаблицаЗарплат)
	
	ПараметрыОтбораТаблицыЗарплат = Новый Структура("Сотрудник, Подразделение");
	
	Для Каждого СтрокаТЧ Из Ведомость.Зарплата Цикл
		Если СтрокаТЧ.Авторасчет Тогда
			
			ЗаполнитьЗначенияСвойств(ПараметрыОтбораТаблицыЗарплат, СтрокаТЧ);
			СтрокиЗарплаты = ТаблицаЗарплат.НайтиСтроки(ПараметрыОтбораТаблицыЗарплат);
			
			Если СтрокиЗарплаты.Количество() = 0 Тогда
				СтрокаТЧ.КВыплате = 0;
			Иначе	
				СтрокаТЧ.КВыплате = СтрокиЗарплаты[0].КВыплате
			КонецЕсли	
			
		КонецЕсли	
	КонецЦикла	
	
	
КонецПроцедуры

/// Методы доступа к ведомостям

Функция ВедомостьПараметрыЗаполнения(Ведомость, МестоВыплаты) Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.ВедомостьПараметрыЗаполнения(Ведомость, МестоВыплаты);
КонецФункции

Функция ВедомостьПараметрыРасчета(Ведомость) Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.ВедомостьПараметрыРасчета(Ведомость);
КонецФункции

Функция ВедомостьПараметрыРасчетаНалогов(Ведомость) Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.ВедомостьПараметрыРасчетаНалогов(Ведомость);
КонецФункции

Функция ВедомостьДанныеДляПроведения(Ведомость) Экспорт
	Возврат ВзаиморасчетыССотрудникамиВнутренний.ВедомостьДанныеДляПроведения(Ведомость);
КонецФункции

Функция ВедомостьДанныеДляПечати(Ведомость) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ведомость.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиВедомостиНаВыплатуЗарплаты.Сотрудник КАК Сотрудник,
	|	СУММА(СотрудникиВедомостиНаВыплатуЗарплаты.КВыплате) КАК КВыплате
	|ИЗ
	|	#ВедомостьЗарплата КАК СотрудникиВедомостиНаВыплатуЗарплаты
	|ГДЕ
	|	СотрудникиВедомостиНаВыплатуЗарплаты.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиВедомостиНаВыплатуЗарплаты.Сотрудник";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ВедомостьЗарплата", Метаданные.НайтиПоТипу(ТипЗнч(Ведомость)).ПолноеИмя() +".Зарплата");
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

