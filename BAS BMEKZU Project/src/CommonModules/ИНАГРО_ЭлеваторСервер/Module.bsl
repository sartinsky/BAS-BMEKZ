// Возвращает структуру параметров учета элеватора на указаную дату.
//
//	Параметры:
//  	Дата      - Дата. 
//
//	Возвращаемое значение:
//  	Структура - содержит значения ресурсов регистра
//	
Функция ПолучитьПараметрыУчетаЭлеватора(Дата) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ПолучитьПараметрыУчетаЭлеватора(Дата);
	КонецЕсли;
КонецФункции

//	Возвращает параметр учета элеватора на указаную дату по указаному имени.
//
//	Параметры:
//  	Дата                  - Дата
//		ПараметрУчета         - Строка
//		ЗначениеПоУмолчанию   - значение по умолчанию ресурса регистра с именем ПараметрУчета
//
//	Возвращаемое значение:
//      - ЛюбаяСсылка         - тип ресурса регистра с именем ПараметрУчета
//      - Неопределено       
//
Функция ПолучитьПараметрУчетаЭлеватора(Дата, ПараметрУчета, ЗначениеПоУмолчанию) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ПолучитьПараметрУчетаЭлеватора(Дата, ПараметрУчета, ЗначениеПоУмолчанию);
	КонецЕсли;
КонецФункции

// Плучает наименование контрагента.
//
//	Параметры:
//  	Владелец - СправочникСсылка.Контрагенты
//
//	Возвращаемое значение:
//  	Строка
//
Функция ПолучитьНаименованияКонтрагента(Владелец) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ПолучитьНаименованияКонтрагента(Владелец);
	КонецЕсли;
КонецФункции

// Функция определяет принадлежность Контрагента к нашему предприятию.
//
//	Параметры:
//  	Контрагент - СправочникСсылка.Контрагенты
//	Возвращаемое значение:
//  	Булево     - Истина, если Контрагент принадлежит нашему предприятию
//
Функция ОпределитьПринадлежностьКонтрагента(Контрагент) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ОпределитьПринадлежностьКонтрагента(Контрагент);
	КонецЕсли;
КонецФункции

// Функция получает настройку списывать или нет отходы с владельцев.
//
//	Параметры:
//  	ДанныеОбъекта - Структура
//	Возвращаемое значение:
//  	Булево        - Истина, если не списывать отходы с владельцев
//
Функция ПолучитьНастройкуНеСписыватьОтходыСВладельцев(ДанныеОбъекта) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ПолучитьНастройкуНеСписыватьОтходыСВладельцев(ДанныеОбъекта);
	КонецЕсли;
КонецФункции

// Получает настройку видимости для элементов форм, связанных с масличностью.
//
//	Параметры:
//  	Дата   - Дата
//	Возвращаемое значение:
//  	Булево - Истина, если разрешена видимость для элементов форм, связанных с масличностью
// 
Функция ПолучитьВидимостьМасличность(Дата) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ПолучитьВидимостьМасличность(Дата);
	КонецЕсли;
КонецФункции

// Функция проверяет на заполнение качества культуры
//
//	Параметры:
//		Дата               - Дата
//		ЛабораторныйАнализ - ДокументСсылка.ИНАГРО_ЛабораторныйАнализ
//		Влажность          - Число
//		Номенклатура       - СправочникСсылка.Номенклатура
//
//	Возвращаемое значение:
// 		Булево 
//
Функция ПроверкаЗаполненияКачества(Дата, ЛабораторныйАнализ, Влажность, Номенклатура) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ПроверкаЗаполненияКачества(Дата, ЛабораторныйАнализ, Влажность, Номенклатура);
	КонецЕсли;
КонецФункции

// Получает значение указаного ресурса с регистра сведений ПредопределеннаяНоменклатуры.
//
//	Параметры:
//  	Номенклатура - СправочникСсылка.Номенклатура
//
//	Возвращаемое значение:
//  	СправочникСсылка.Номенклатура
//
Функция ПолучитьПредопределеннуюНоменклатуру(Номенклатура) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ПолучитьПредопределеннуюНоменклатуру(Номенклатура);
	КонецЕсли;
КонецФункции

// Возвращает предопределенную номенклатуру в виде структуры.
//
//	Параметры:
//  	Дата        - Дата
//		Организация - СправочникСсылка.Организации
//
//	Возвращаемое значение:
//  	Структура
//
Функция ПолучитьСтруктуруПредопределеннойНоменклатуры(Дата, Организация) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ПолучитьСтруктуруПредопределеннойНоменклатуры(Дата, Организация);
	КонецЕсли;
КонецФункции

// Получает значения базисных показателей.
//
//  Параметры:
//  	ВидКультуры        - СправочникСсылка.ИНАГРО_ВидыКультур
//  	Дата               - Дата
//  	Организация        - СправочникСсылка.Организации
//  	Контрагент         - СправочникСсылка.Контрагенты
//  	ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов
//  	Склад              - СправочникСсылка.Склады
//
//  Возвращаемое значение:	
//  	Структура
//
Функция ПолучитьБазисныеЗначения(ВидКультуры, Дата, Организация, Контрагент, ДоговорКонтрагента, Склад = Неопределено) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ПолучитьБазисныеЗначения(ВидКультуры, Дата, Организация, Контрагент, ДоговорКонтрагента, Склад);
	КонецЕсли;
КонецФункции

// Получает цену на услугу элеватора.
//
//  Параметры:
//		Организация        - СправочникСсылка.Организации
//		Дата       		   - Дата
//		Контрагент		   - СправочникСсылка.Контрагент
//		ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов
//  	ВидКультуры		   - СправочникСсылка.ИНАГРО_ВидыКультур
//		Урожай             - СправочникСсылка.ИНАГРО_ВидыУрожая
//		Услуга             - СправочникСсылка.Номенклатура - услуга, цену которой получаем
//
//  Возвращаемое значение:	
//  	Число - цена на услугу
//
Функция ПолучитьЦенуУслугиЭлеватора(Организация = Неопределено,Дата,Контрагент = Неопределено,ДоговорКонтрагента = Неопределено,ВидКультуры = Неопределено,Урожай = Неопределено,Услуга) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Контрагент, ДоговорКонтрагента, ВидКультуры, Урожай, Услуга);
	КонецЕсли;
КонецФункции

// Получает процент естественной убыли.
//
//	Параметры:
//		Дата           - Дата
//  	Номенклатура   - СправочникСсылка.Номенклатура
//		СрокХранения   - Число - период хранения культуры
//		СпособХранения - ПеречислениеСсылка.ИНАГРО_СпособХранения
//		Склад          - СправочникСсылка.Склады
//
//  Возвращаемое значение:	
//  	Число          - рассчитаный процент естественной убыли
//
Функция ПолучитьПроцентЕстественнойУбыли(Дата, Знач Номенклатура, Знач СрокХранения, СпособХранения = Неопределено, Склад = Неопределено) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ПолучитьПроцентЕстественнойУбыли(Дата,  Номенклатура,  СрокХранения, СпособХранения, Склад);
	КонецЕсли;
КонецФункции

// Функция возвращает операцию по документу "Переоформление".
//
//	Параметры:
//  	Документ - ДокументОбъект.ИНАГРО_Переоформление, ДокументСсылка.ИНАГРО_Переоформление
//	Возвращаемое значение:
//  	ПеречислениеСсылка.ИНАГРО_ВидыОперацийПереоформления
//
Функция ПолучитьОперациюПереоформления(Документ) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ПолучитьОперациюПереоформления(Документ);
	КонецЕсли;
КонецФункции

// Функция возвращает информацию об ответственных лицах организации на дату среза.
//
//	Параметры:
//  	Организация              - СправочникСсылка.Организации
//		ДатаСреза                - Дата
//		СтруктурнаяЕдиница       - СправочникСсылка.Склады
//		ДанныеОтветственногоЛица - Структура
//
//	Возвращаемое значение:
//  	СправочникСсылка.ФизическиеЛица
//
Функция ОтветственныеЛица(Организация, ДатаСреза, СтруктурнаяЕдиница, ДанныеОтветственногоЛица = Неопределено) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ОтветственныеЛица(Организация, ДатаСреза, СтруктурнаяЕдиница, ДанныеОтветственногоЛица);
	КонецЕсли;
КонецФункции

// Функция возвращает информацию об ответственных лицах организации на дату среза.
//
//	Параметры:
//  	Организация - СправочникСсылка.Организации
//		ДатаСреза   - Дата
//
//	Возвращаемое значение:
//  	Структура
//
Функция ОтветственныеЛицаОрганизации(Организация, ДатаСреза) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ОтветственныеЛицаОрганизации(Организация, ДатаСреза);
	КонецЕсли;
КонецФункции

// Функция возвращает информацию об ответственных лицах организации в формате Имя и Фамилия на дату среза.
//
//	Параметры:
//  	Организация - СправочникСсылка.Организации
//		ДатаСреза   - Дата
//
//	Возвращаемое значение:
//  	Структура
//
Функция ОтветственныеЛицаОрганизацииИмяФамилия(Организация, ДатаСреза) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ОтветственныеЛицаОрганизацииИмяФамилия(Организация, ДатаСреза);
	КонецЕсли;
КонецФункции

// Функция возвращает информацию об ответственных лицах организации на дату среза.
//
//	Параметры:
//  	Организация              - СправочникСсылка.Организации
//		ДатаСреза                - Дата
//		СтруктурнаяЕдиница       - СправочникСсылка.Склады
//		ДанныеОтветственногоЛица - Структура
//
//	Возвращаемое значение:
//  	СправочникСсылка.ФизическиеЛица
//
Функция ОтветственныеЛицаИмяФамилия(Организация, ДатаСреза, СтруктурнаяЕдиница, ДанныеОтветственногоЛица = Неопределено) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ОтветственныеЛицаИмяФамилия(Организация, ДатаСреза, СтруктурнаяЕдиница, ДанныеОтветственногоЛица);
	КонецЕсли;
КонецФункции

// Получает значение указаного ресурса из регистра сведений ДополнительныеРеквизитыОрганизации на указаную Дату.
//
//	Параметры:
//  	Организация  - СправочникСсылка.Организации
//		ИмяРеквизита - Строка
//		Дата         - Дата
//
//	Возвращаемое значение:
//  	- Булево	
//		- СправочникСсылка.Контрагент
//		- СправочникСсылка.ДоговорыКонтрагентов
//      - Неопределено
//
Функция ПолучитьДополнительныйРеквизитОрганизации(Организация, ИмяРеквизита, Дата = Неопределено) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ПолучитьДополнительныйРеквизитОрганизации(Организация, ИмяРеквизита, Дата);
	КонецЕсли;
КонецФункции

// Получает значение указаного ресурса из регистра сведений ИНАГРО_ДополнительныеРеквизитыПодразделенияОрганизации.
//
//	Параметры:
//  	ПодразделениеОрганизации - СправочникСсылка.ПодразделенияОрганизаций
//		ИмяРеквизита             - Строка
//
//	Возвращаемое значение:
//  	- Булево	
//      - Неопределено
//
Функция ПолучитьДополнительныйРеквизитПодразделенияОрганизации(ПодразделениеОрганизации, ИмяРеквизита) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ПолучитьДополнительныйРеквизитПодразделенияОрганизации(ПодразделениеОрганизации, ИмяРеквизита);
	КонецЕсли;
КонецФункции

// Получает значение указаного ресурса из регистра сведений ДополнительныеРеквизитыКонтрагента.
//
//	Параметры:
//		Контрагент            - СправочникСсылка.Контрагент
//		ИмяРеквизита          - Строка
//      ЗначениеПоУмолчанию   - значение по умолчанию ресурса регистра с именем ИмяРеквизита
//
//	Возвращаемое значение:
//  	- Булево	          - Истина, если Контрагент принадлежит нашему предприятию
//      - Неопределено        
//
Функция ПолучитьДополнительныйРеквизитКонтрагента(Контрагент, ИмяРеквизита, ЗначениеПоУмолчанию = Неопределено) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ПолучитьДополнительныйРеквизитКонтрагента(Контрагент, ИмяРеквизита, ЗначениеПоУмолчанию);
	КонецЕсли;
КонецФункции

// Получает значение указаного ресурса из регистра сведений ДополнительныеРеквизитыНоменклатуры.
//
//	Параметры:
//  	Номенклатура - СправочникСсылка.Номенклатура
//		ИмяРеквизита - Строка
//
//	Возвращаемое значение:
//  	- Булево
//  	- СправочникСсылка.ИНАГРО_ВидыКультур
//      - СправочникСсылка.ИНАГРО_КлассификаторЗерна
//      - ПеречислениеСсылка.ИНАГРО_ВидыТМЦ
//      - Неопределено
//
Функция ПолучитьДополнительныйРеквизитНоменклатуры(Номенклатура, ИмяРеквизита) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ПолучитьДополнительныйРеквизитНоменклатуры(Номенклатура, ИмяРеквизита);
	КонецЕсли;
КонецФункции

// Получает значение указаного ресурса из регистра сведений ИНАГРО_ДополнительныеРеквизитыСкладов.
//
//	Параметры:
//  	Склад - СправочникСсылка.Склады
//		ИмяРеквизита - Строка
//
//	Возвращаемое значение:
//  	- Булево
//  	- СправочникСсылка.ИНАГРО_ВидыКультур
//      - СправочникСсылка.ИНАГРО_КлассификаторЗерна
//      - ПеречислениеСсылка.ИНАГРО_ВидыТМЦ
//      - Неопределено
//
Функция ПолучитьДополнительныйРеквизитСклада(Склад, ИмяРеквизита) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ПолучитьДополнительныйРеквизитСклада(Склад, ИмяРеквизита);
	КонецЕсли;
КонецФункции

// Получает значение указаного ресурса из регистра сведений ДополнительныеРеквизитыМестХранения.
//
//	Параметры:
//  	Дата          - Дата	
// 		МестоХранения - СправочникСсылка.ИНАГРО_МестаХранения
//		ИмяРеквизита  - Строка
//
//	Возвращаемое значение:
//  	- СправочникСсылка.ИНАГРО_ВидыХранения
//      - Неопределено
//
Функция ПолучитьДополнительныйРеквизитМестаХранения(Дата, МестоХранения, ИмяРеквизита) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ПолучитьДополнительныйРеквизитМестаХранения(Дата, МестоХранения, ИмяРеквизита);
	КонецЕсли;
КонецФункции

// ЛабораторныйАнализПриИзмененииНаСервере.
//
//	Параметры:
//  	ДанныеОбъекта                    - Структура	
// 		ПараметрыДляРасчетаЗачетногоВеса - Структура
//
Процедура ЛабораторныйАнализПриИзмененииНаСервере(ДанныеОбъекта, ПараметрыДляРасчетаЗачетногоВеса = Неопределено) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.ЛабораторныйАнализПриИзмененииНаСервере(ДанныеОбъекта, ПараметрыДляРасчетаЗачетногоВеса);
	КонецЕсли;
КонецПроцедуры

// Проверяет заполнение лабораторного анализа.
//
//	Параметры:
//  	Результат                      - ДокументСсылка.ИНАГРО_ЛабораторныйАнализ	
// 		ПараметрыДляПроверкиЗаполнения - Структура
//
//	Возвращаемое значение:
//  	Булево
//
Функция ЛабораторныйАнализПроверкаЗаполнения(Результат, ПараметрыДляПроверкиЗаполнения) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ЛабораторныйАнализПроверкаЗаполнения(Результат, ПараметрыДляПроверкиЗаполнения);
	КонецЕсли;
КонецФункции

// Получает номер из лабораторного анализа
//
//	Параметры:
//  	ЛабораторныйАнализ - ДокументСсылка.ИНАГРО_ЛабораторныйАнализ	
//
//	Возвращаемое значение:
//  	- Строка
//  	- Число
//
Функция ПолучитьНомерЛабАнализаИзЛабАнализа(ЛабораторныйАнализ) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ПолучитьНомерЛабАнализаИзЛабАнализа(ЛабораторныйАнализ);
	КонецЕсли;
КонецФункции

// Получает масличность из лабораторного анализа.
//
//	Параметры:
//  	ЛабораторныйАнализ - ДокументСсылка.ИНАГРО_ЛабораторныйАнализ	
//
//	Возвращаемое значение:
//  	Число
// 
Функция ПолучитьМасличностьИзЛабАнализа(ЛабораторныйАнализ) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ПолучитьМасличностьИзЛабАнализа(ЛабораторныйАнализ);
	КонецЕсли;
КонецФункции

// Выполняет движение приход по регистру ИНАГРО_Остатки.
//
//  Параметры:
//		Движения       		      - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	  - Структура - структура реквизитов шапки документа
//		КорректироватьЗачетныйВес - Булево
//
Процедура ДвиженияПоРегиструОстаткиПриход(Движения, СтруктураШапкиДокумента, КорректироватьЗачетныйВес = Ложь) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.ДвиженияПоРегиструОстаткиПриход(Движения, СтруктураШапкиДокумента, КорректироватьЗачетныйВес);
	КонецЕсли;
КонецПроцедуры

// Выполняет движение расход по регистру ИНАГРО_Остатки.
//
//  Параметры:
//		Движения       		         - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	     - Структура - структура реквизитов шапки документа
//		СписатьОстатокСЗачетногоВеса - Булево
//
Процедура ДвиженияПоРегиструОстаткиРасход(Движения, СтруктураШапкиДокумента, СписатьОстатокСЗачетногоВеса = Ложь) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.ДвиженияПоРегиструОстаткиРасход(Движения, СтруктураШапкиДокумента, СписатьОстатокСЗачетногоВеса);
	КонецЕсли;
КонецПроцедуры

// Выполняет движение приход по регистру ИНАГРО_ОстаткиСводная.
//
//  Параметры:
//		Движения       		      - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента_  - Структура, СтрокаТаблицыЗначений - структура реквизитов шапки документа
//		КорректироватьЗачетныйВес - Булево
//
Процедура ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтруктураШапкиДокумента_, КорректироватьЗачетныйВес = Ложь) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтруктураШапкиДокумента_, КорректироватьЗачетныйВес);
	КонецЕсли;
КонецПроцедуры

// Выполняет движение расход по регистру ИНАГРО_ОстаткиСводная.
//
//
//  Параметры:
//		Движения       		         - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента_     - Структура, СтрокаТаблицыЗначений - структура реквизитов шапки документа
//		СписатьОстатокСЗачетногоВеса - Булево
//
Процедура ДвиженияПоРегиструОстаткиСводнаяРасход(Движения, СтруктураШапкиДокумента_, СписатьОстатокСЗачетногоВеса = Ложь) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.ДвиженияПоРегиструОстаткиСводнаяРасход(Движения, СтруктураШапкиДокумента_, СписатьОстатокСЗачетногоВеса);
	КонецЕсли;
КонецПроцедуры

// Выполняет движение по приходным ресурсам по регистру ИНАГРО_Форма36.
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		Операция                - Строка - вид движения по регистру
//		СписатьКачествоСОстатка - Булево
//		Период                  - Булево
//
Процедура ДвиженияПоРегиструФорма36Приход(Движения, СтруктураШапкиДокумента, Операция = "Приход", СписатьКачествоСОстатка = 0, Период = 0) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.ДвиженияПоРегиструФорма36Приход(Движения, СтруктураШапкиДокумента, Операция, СписатьКачествоСОстатка, Период);
	КонецЕсли;
КонецПроцедуры

// Выполняет движение по расходным ресурсам по регистру ИНАГРО_Форма36.
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		Операция                - Строка - вид движения по регистру
//		СписатьКачествоСОстатка - Булево
//		Период                  - Булево
//
Процедура ДвиженияПоРегиструФорма36Расход(Движения, СтруктураШапкиДокумента, Операция = "Приход", СписатьКачествоСОстатка = 0, Период = 0) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.ДвиженияПоРегиструФорма36Расход(Движения, СтруктураШапкиДокумента, Операция, СписатьКачествоСОстатка, Период);
	КонецЕсли;
КонецПроцедуры

// Выполняет движение по приходным ресурсам по регистру ИНАГРО_Форма36Сводная.
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		Операция                - Строка - вид движения по регистру
//		СписатьКачествоСОстатка - Булево
//		Период                  - Булево
//
Процедура ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтруктураШапкиДокумента, Операция = "Приход", СписатьКачествоСОстатка = 0, Период = 0) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтруктураШапкиДокумента, Операция, СписатьКачествоСОстатка, Период);
	КонецЕсли;
КонецПроцедуры

// Выполняет движение по расходным ресурсам по регистру ИНАГРО_Форма36Сводная.
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		Операция                - Строка - вид движения по регистру
//		СписатьКачествоСОстатка - Булево
//		Период                  - Булево
//
Процедура ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтруктураШапкиДокумента, Операция = "Приход", СписатьКачествоСОстатка = 0, Период = 0) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтруктураШапкиДокумента, Операция, СписатьКачествоСОстатка, Период);
	КонецЕсли;
КонецПроцедуры

// Выполняет движения Приход и Расход по регистру ИНАГРО_РасчетыПоУслугам. 
//
//  Параметры:
//		Движения     - КоллекцияДвижений - коллекция движений документа
//		ТаблицаУслуг - ТаблицаЗначений
//		ВидДвижения  - Строка - вид движения по регистру
//
Процедура ДвиженияПоРегиструРасчетыПоУслугам(Движения, ТаблицаУслуг, ВидДвижения = "") Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.ДвиженияПоРегиструРасчетыПоУслугам(Движения, ТаблицаУслуг, ВидДвижения);
	КонецЕсли;
КонецПроцедуры

// Выполняет движение по регистру ИНАГРО_Форма49 (журнал лабораторных анализов).
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//
Процедура ДвиженияПоРегиструФорма49(Движения, СтруктураШапкиДокумента) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.ДвиженияПоРегиструФорма49(Движения, СтруктураШапкиДокумента);
	КонецЕсли;
КонецПроцедуры

// Выполняет движение по регистру ИНАГРО_ЖурналЛабораторныхАнализов.
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//
Процедура ДвиженияПоРегиструЖурналЛабораторныхАнализов(Движения, СтруктураШапкиДокумента) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.ДвиженияПоРегиструЖурналЛабораторныхАнализов(Движения, СтруктураШапкиДокумента);
	КонецЕсли;
КонецПроцедуры

// Выполняет движение по регистру ИНАГРО_ВыпускПродукции.
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//
Процедура ДвиженияПоРегиструВыпускПродукции(СтруктураШапкиДокумента, Движения) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.ДвиженияПоРегиструВыпускПродукции(СтруктураШапкиДокумента, Движения);
	КонецЕсли;
КонецПроцедуры

// Выполняет движение по регистру ИНАГРО_ЗатратыНаПроизводство.
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		СтрокаПродукции         - строка табличной части
//
Процедура ДвиженияПоРегиструЗатратыНаПроизводство(СтруктураШапкиДокумента, Движения, СтрокаПродукции = Неопределено) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.ДвиженияПоРегиструЗатратыНаПроизводство(СтруктураШапкиДокумента, Движения, СтрокаПродукции);
	КонецЕсли;
КонецПроцедуры

// Выполняет движение по регистру ИНАГРО_РасчетныйВыпускПродукции.
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//  	ВидДвижения				- ВидДвиженияНакопления
//	
Процедура ДвиженияПоРегиструРасчетныйВыпускПродукции(Движения, СтруктураШапкиДокумента, ВидДвижения) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.ДвиженияПоРегиструРасчетныйВыпускПродукции(Движения, СтруктураШапкиДокумента, ВидДвижения);
	КонецЕсли;
КонецПроцедуры

// Выполняет движение по регистру ИНАГРО_КонтрольВвозаСобственногоЗерна.
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		СтрокаТЧ                - строка табличной части
//		ВидДвижения             - Строка - вид движения по регистру
//
Процедура ДвиженияПоРегиструКонтрольВвозаСобственногоЗерна(Движения, СтруктураШапкиДокумента, СтрокаТЧ, ВидДвижения = "") Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.ДвиженияПоРегиструКонтрольВвозаСобственногоЗерна(Движения, СтруктураШапкиДокумента, СтрокаТЧ, ВидДвижения);
	КонецЕсли;
КонецПроцедуры

// Выполняет движение по регистру ИНАГРО_КонтрольВывозаСобственногоЗерна.
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		СтрокаТЧ                - строка табличной части
//		ВидДвижения             - Строка - вид движения по регистру
//
Процедура ДвиженияПоРегиструКонтрольВывозаСобственногоЗерна(Движения, СтруктураШапкиДокумента, СтрокаТЧ, ВидДвижения = "") Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.ДвиженияПоРегиструКонтрольВывозаСобственногоЗерна(Движения, СтруктураШапкиДокумента, СтрокаТЧ, ВидДвижения);
	КонецЕсли;
КонецПроцедуры

// Выполняет движение по регистру ИНАГРО_КонтрольПриказовНаВывоз.
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		СтрокаТЧ                - строка табличной части
//		ВидДвижения             - Строка - вид движения по регистру
//
Процедура ДвиженияПоРегиструКонтрольПриказовНаВывоз(Движения, СтруктураШапкиДокумента, СтрокаТЧ, ВидДвижения = "") Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.ДвиженияПоРегиструКонтрольПриказовНаВывоз(Движения, СтруктураШапкиДокумента, СтрокаТЧ, ВидДвижения);
	КонецЕсли;
КонецПроцедуры

// Выполняет движение по регистру ИНАГРО_ДвиженияПоПереработке
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		ВидДвижения             - Строка - вид движения по регистру
//
Процедура ДвиженияПоРегиструДвиженияПоПереработке(Движения, СтруктураШапкиДокумента, ВидДвижения = "") Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.ДвиженияПоРегиструДвиженияПоПереработке(Движения, СтруктураШапкиДокумента, ВидДвижения);
	КонецЕсли;
КонецПроцедуры

// Формирует Реестры ТТНВвоз.
//
//  Параметры:
//  	Пар - Структура
//
Процедура СформироватьРеестрТТН_Ввоз(Пар) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.СформироватьРеестрТТН_Ввоз(Пар);
	КонецЕсли;
КонецПроцедуры

// Формирует Реестры ТТНВывоз.
//
//  Параметры:
//  	Пар - Структура
//
Процедура СформироватьРеестрТТН_Вывоз(Пар) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.СформироватьРеестрТТН_Вывоз(Пар);
	КонецЕсли;
КонецПроцедуры

// Формирует Реестры ТТНВнутр.
//
//  Параметры:
//  	Пар - Структура
//
Процедура СформироватьРеестрТТН_Внутр(Пар) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.СформироватьРеестрТТН_Внутр(Пар);
	КонецЕсли;
КонецПроцедуры

// Формирует Реестры ТТНВвозЖД
//
//	Параметры:
//  	Пар - Структура
//
Процедура СформироватьРеестрТТН_ВвозЖД(Пар) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.СформироватьРеестрТТН_ВвозЖД(Пар);
	КонецЕсли;
КонецПроцедуры

// Формирует Реестры ТТНВывозЖД
//
//	Параметры:
//  	Пар - Структура
//
Процедура СформироватьРеестрТТН_ВывозЖД(Пар) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.СформироватьРеестрТТН_ВывозЖД(Пар);
	КонецЕсли;
КонецПроцедуры

// Пересчет зачетного веса при проведении документа.
//
//  Параметры:
//  	ДанныеОбъекта - Структура - структура с параметрами для расчета зачетного веса
//
//  Возвращаемое значение:
//  	Число         - рассчитанное значение зачетного веса
//
Функция ЗачетныйВесПриПроведении(ДанныеОбъекта) Экспорт //, ФизическийВес = 0, Номенклатура, Влажность = 0, СорнаяПримесь = 0, ЗачетныйВес = 0, Организация, Контрагент, ДоговорКонтрагента) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ЗачетныйВесПриПроведении(ДанныеОбъекта);
	КонецЕсли;
КонецФункции

// Пересчет физического веса в зачетный.
//
//  Параметры:
//  	ДанныеОбъекта               - Структура - структура с параметрами для расчета зачетного веса
//      ПересчетПриЛюбыхОтклонениях - Булево - если Истина, необходим пересчет при любых отклонениях
//
//  Возвращаемое значение:
//  	Число                       - рассчитанное значение зачетного веса
//
Функция	РассчитатьЗачетныйВес(ДанныеОбъекта, ПересчетПриЛюбыхОтклонениях = Ложь) Экспорт //, ФизическийВес = 0, Номенклатура, Влажность, СорнаяПримесь, ПересчетПриЛюбыхОтклонениях = Ложь, Организация, Контрагент, ДоговорКонтрагента) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.РассчитатьЗачетныйВес(ДанныеОбъекта, ПересчетПриЛюбыхОтклонениях);
	КонецЕсли;
КонецФункции

// Пересчет физического веса в контрольный зачетный вес.
//
//  Параметры:
//  	Ссылка             - ДокументСсылка - документ для которого выполяентся операция
//      ФизическийВес      - Число - физический вес
//  	Номенклатура       - СправочникСсылка.Номенклатура
//  	Влажность          - Число
//  	СорнаяПримесь      - Число
//  	Организация        - СправочникСсылка.Организации
//  	Контрагент         - СправочникСсылка.Контрагенты
//  	ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов
//
//  Возвращаемое значение:
//  	Число              - рассчитанное значение контрольного зачетного веса
//
Функция	РассчитатьКонтрольныйЗачетныйВес(Ссылка, ФизическийВес, Номенклатура, Влажность, СорнаяПримесь, Организация, Контрагент, ДоговорКонтрагента) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.РассчитатьКонтрольныйЗачетныйВес(Ссылка, ФизическийВес, Номенклатура, Влажность, СорнаяПримесь, Организация, Контрагент, ДоговорКонтрагента);
	КонецЕсли;
КонецФункции

// Заполняет параметры связаные с физическим весом до сушки и очистки.
//
//  Параметры:
//		ДокументОбъект  - ДокументОбъект.ИНАГРО_Форма34Сводная
//		МетодЗаполнения - Строка
//
Процедура ЗаполнитьФизическийВесДо(ДокументОбъект, МетодЗаполнения = "ЗаполнитьФорму34ДаннымиАвтоВвоза") Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.ЗаполнитьФизическийВесДо(ДокументОбъект, МетодЗаполнения);
	КонецЕсли;
КонецПроцедуры

// Заполняет параметры связаные с физическим весом после сушки и очистки.
//
//  Параметры:
//		ДокументОбъект              - ДокументОбъект.ИНАГРО_Форма34Сводная
//		МетодЗаполнения             - Строка
//		ЗаполнитьРасчетПоВладельцам - Булево
//
Процедура ЗаполнитьФизическийВесПосле(ДокументОбъект, МетодЗаполнения = "ЗаполнитьФорму34ДаннымиАвтоВвоза", ЗаполнитьРасчетПоВладельцам = Истина) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.ЗаполнитьФизическийВесПосле(ДокументОбъект, МетодЗаполнения, ЗаполнитьРасчетПоВладельцам);
	КонецЕсли;
КонецПроцедуры

// Расчет натуралных скидок.
//
//	Параметры:
//  	Документ                 - ДокументОбъект, ДокументСсылка - документ для которого выполяентся операция
//		СтрокаТабличнойЧасти     - строка табличной части
//		СтрокаТаблицыПартийЗерна - СтрокаТаблицыЗначений
//
Процедура РасчетНатуральныхСкидок(Документ, СтрокаТабличнойЧасти = Неопределено, СтрокаТаблицыПартийЗерна = Неопределено) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.РасчетНатуральныхСкидок(Документ, СтрокаТабличнойЧасти, СтрокаТаблицыПартийЗерна);
	КонецЕсли;
КонецПроцедуры

// Расчитывает процент влажности или сорной примеси.
//
//	Параметры:
//		ФизВес     - Число - физический вес для расчета
//  	ВесУбыли   - Число - вес по влажноси или по сорной примеси или по зерновой примеси
//  	Округление - Число - количество знаков после запятой
//
//	Возвращаемое значение:
//  	Число      - процент влажности или сорной примеси
//
Функция Процент(ФизВес = 0, ВесУбыли = 0, Округление = 2) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.Процент(ФизВес, ВесУбыли, Округление);
	КонецЕсли;
КонецФункции

// Функция возвращает Истина если ТМЦ является продукцией.
//
//	Параметры:
//		ТМЦ - СправочникСсылка.Номенклатура
//  	
//	Возвращаемое значение:
//  	Булево
//
Функция Продукция(ТМЦ) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.Продукция(ТМЦ);
	КонецЕсли;
КонецФункции

// Функция возвращает Истина если ТМЦ является годными отходами.
//
//	Параметры:
//		ТМЦ - СправочникСсылка.Номенклатура
//  	
//	Возвращаемое значение:
//  	Булево
//
Функция ГодныеОтходы(ТМЦ) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ГодныеОтходы(ТМЦ);
	КонецЕсли;
КонецФункции

// Функция возвращает Истина если ТМЦ является негодными отходами.
//
//	Параметры:
//		ТМЦ - СправочникСсылка.Номенклатура
//  	
//	Возвращаемое значение:
//  	Булево
//
Функция НегодныеОтходы(ТМЦ) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.НегодныеОтходы(ТМЦ);
	КонецЕсли;
КонецФункции

// Возвращает вес прописью.
//
//	Параметры:
//		Язык     		- Строка - код языка прописи
//  	Вес   			- Число - числовое значения веса
//  	БезДробнойЧасти - Булево - означает будет ли выводится дробная часть.
//
//	Возвращаемое значение: 
//		Строка          - вес прописью
//
Функция ВернутьВесПрописью(Язык = "", Вес, БезДробнойЧасти = Истина) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ВернутьВесПрописью(Язык, Вес, БезДробнойЧасти);
	КонецЕсли;
КонецФункции

// Возвращает сумму прописью.
//
//	Параметры:
//  	Сумма  - Число - числовое значения суммы.
//
//	Возвращаемое значение:
//		Строка - сумма прописью
//
Функция ВернутьСуммуПрописью(Сумма) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ВернутьСуммуПрописью(Сумма);
	КонецЕсли;
КонецФункции

// Заполняет структуру шапки остатками из регистра ИНАГРО_Форма36.
//
//  Параметры:
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		Фильтр                  - Строка - фильтр для запроса
//
//  Возвращаемое значение:
//  	Структура               - СтруктураШапкиДокумента с добавлеными параметрами из Формы36.
//
Функция ЗаполнитьСтруктуруШапкиДокументаОстаткамиФормы36(СтруктураШапкиДокумента, Фильтр) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ЗаполнитьСтруктуруШапкиДокументаОстаткамиФормы36(СтруктураШапкиДокумента, Фильтр);
	КонецЕсли;
КонецФункции

// Заполняет структуру шапки остатками из регистра ИНАГРО_Форма36Сводная.
//
//  Параметры:
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		Фильтр                  - Строка - фильтр для запроса
//
//  Возвращаемое значение:
//  	Структура               - СтруктураШапкиДокумента с добавлеными параметрами из Формы36.
//
Функция ЗаполнитьСтруктуруШапкиДокументаОстаткамиФормы36Сводная(СтруктураШапкиДокумента,Фильтр) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ЗаполнитьСтруктуруШапкиДокументаОстаткамиФормы36Сводная(СтруктураШапкиДокумента, Фильтр);
	КонецЕсли;
КонецФункции

// Проверяет остатки по приказу.
//
//	Параметры:
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//
//	Возвращаемое значение:
//  	Булево                  - Отказ = Истина, если нет остатков по приказу
//
Функция ПроверитьОстатокПоПриказу(СтруктураШапкиДокумента) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ПроверитьОстатокПоПриказу(СтруктураШапкиДокумента);
	КонецЕсли;
КонецФункции

// Проверяет наличие зерна на остатке.
//
//  Параметры:
//  	СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//
//  Возвращаемое значение:	
//  	Структура               - структура содержащая вес зерна и текст сообщения с указанными параметрами.   
//
Функция ПроверкаНаличияЗерна(СтруктураШапкиДокумента) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ПроверкаНаличияЗерна(СтруктураШапкиДокумента);
	КонецЕсли;
КонецФункции

// Устанавливает префикс источника подписки в соответствии с префиксом информационной базы и префиксом организации.
// Источник подписки должен содержать обязательный реквизит шапки "Организация", тип: "СправочникСсылка.Организации".
//
//  Параметры:
// 		Источник             - Источник события подписки
//  	СтандартнаяОбработка - Булево - флаг стандартной обработки подписки
//  	Префикс              - Строка - префикс объекта, который нужно изменить
//
Процедура УстановитьПрефиксИнформационнойБазыИОрганизацииНомеруДокумента(Источник, СтандартнаяОбработка, Префикс) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.УстановитьПрефиксИнформационнойБазыИОрганизацииНомеруДокумента(Источник, СтандартнаяОбработка, Префикс);
	КонецЕсли;
КонецПроцедуры

// Увеличивает очередной номер (при записи документа) журнала элеватора.
//
//  Параметры:
//  	Отбор	     - Структура - структура отбора по измерениям регистра
//      НомерЖурнала - Число - очередной номер журнала элеватора
//
Процедура ЗаписатьОчереднойНомер(Отбор, НомерЖурнала) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.ЗаписатьОчереднойНомер(Отбор, НомерЖурнала);
	КонецЕсли;
КонецПроцедуры

// Получает список регистраторов регистра ИНАГРО_Форма34Сводная.
//
//  Параметры:
//		Ссылка		   - ссылка документа
//
//  Возвращаемое значение:
//		СписокЗначений - список регистраторов регистра Форма34Сводная
//
Функция РегистраторыФорма34(Ссылка) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.РегистраторыФорма34(Ссылка);
	КонецЕсли;
КонецФункции

// Получает список регистраторов по определенному отбору в которых стоит галочка перевес.
//
//  Параметры:
//		Ссылка		   - ссылка документа
//
//  Возвращаемое значение:
//		СписокЗначений - список регистраторов по определенному отбору в которых стоит галочка перевес.
//
Функция РегистраторыСПеревесом(Ссылка) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.РегистраторыСПеревесом(Ссылка);
	КонецЕсли;
КонецФункции

// Возвращает копию структуры
//
//	Параметры:
//  	Источник
//
//	Возвращаемое значение:
//
//
Функция ПолучитьКопиюСтруктуры(Источник) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ПолучитьКопиюСтруктуры(Источник);
	КонецЕсли;
КонецФункции

// О пределяет наличие ключа
//
//	Параметры:
//  	КоллекцияЗначений
//		Ключ
//
//	Возвращаемое значение:
//
//
Функция ЕстьКлюч(КоллекцияЗначений, Ключ) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Возврат Обр.ЕстьКлюч(КоллекцияЗначений, Ключ);
	КонецЕсли;
КонецФункции

// Выполняются необходимые действия
//
Процедура ПриУстановкеНовогоНомераДокумента(Источник, СтандартнаяОбработка, Префикс) Экспорт
	Обр = ИНАГРО_ДирективыПрепроцессору.ИНАГРО_ВызовЗащищеннойОбработки("ИНАГРО_ЭлеваторСервер");
	Если Обр <> Неопределено Тогда
		Обр.ПриУстановкеНовогоНомераДокумента(Источник, СтандартнаяОбработка, Префикс);
	КонецЕсли;
КонецПроцедуры

