// Процедура заполняет ставку НДС в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ИмяТабличнойЧасти, МетаданныеДокумента) Экспорт
	
	Если НЕ ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("Номенклатура", МетаданныеДокумента, ИмяТабличнойЧасти)
		ИЛИ (НЕ ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
		И НЕ ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.БиологическиеАктивы"))   // ИНАГРО ++
		ИЛИ НЕ ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		
		Возврат;
		
	КонецЕсли;

	Если ТипЗнч(ДокументОбъект) = Тип("Структура") Тогда
		ЕстьПлательщикНДС		= ДокументОбъект.Свойство("ПлательщикНДС");
		ЕстьОрганизация			= ДокументОбъект.Свойство("Организация");
	Иначе
		ЕстьПлательщикНДС 		= Ложь;
		ЕстьОрганизация			= ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента);
	КонецЕсли;
	
	СтавкаНеНДС	= Ложь;
	
	Если ЕстьПлательщикНДС Тогда
		
		Если ДокументОбъект.ПлательщикНДС = Ложь 
			ИЛИ ЕстьОрганизация И УчетнаяПолитика.ПлательщикНДСПриостановлен(ДокументОбъект.Организация, ДокументОбъект.Дата) = Истина Тогда
		
			СтавкаНеНДС	= Истина;
			
		КонецЕсли;
		
	ИначеЕсли ЕстьОрганизация 
		И (УчетнаяПолитика.ПлательщикНДС(ДокументОбъект.Организация, ДокументОбъект.Дата) = Ложь
			ИЛИ УчетнаяПолитика.ПлательщикНДСПриостановлен(ДокументОбъект.Организация, ДокументОбъект.Дата) = Истина) Тогда
		
		СтавкаНеНДС	= Истина;
		
    КонецЕсли;

	Если СтавкаНеНДС Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС;
	Иначе
		СтавкаНДСПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
		Если ЗначениеЗаполнено(СтавкаНДСПоУмолчанию) Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		Иначе
			СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура заполняет Коэффициент в строке табличной части документа по ЕдиницеИзмерения
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа, или Структура
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект = Неопределено, ИмяТабличнойЧасти = Неопределено, МетаданныеДокумента = Неопределено) Экспорт 
	
	СтароеЗначениеКоэффициента = СтрокаТабличнойЧасти.Коэффициент;
	
	Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
	ЗапросКоэффициент = Новый Запрос;
	ЗапросКоэффициент.Текст = "ВЫБРАТЬ
	                          |	НоменклатураЕдиницыИзмерения.Коэффициент
	                          |ИЗ
	                          |	Справочник.Номенклатура.ЕдиницыИзмерения КАК НоменклатураЕдиницыИзмерения
	                          |ГДЕ
	                          |	НоменклатураЕдиницыИзмерения.Ссылка = &Ссылка
	                          |	И НоменклатураЕдиницыИзмерения.ЕдиницаИзмерения = &ЕдиницаИзмерения";
							  
	ЗапросКоэффициент.УстановитьПараметр("Ссылка",СтрокаТабличнойЧасти.Номенклатура);
	ЗапросКоэффициент.УстановитьПараметр("ЕдиницаИзмерения",СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	
	Выборка = ЗапросКоэффициент.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаТабличнойЧасти.Коэффициент = Выборка.Коэффициент;
	КонецЕсли;
	Если СтрокаТабличнойЧасти.Коэффициент = 0 Тогда
		СтрокаТабличнойЧасти.Коэффициент = 1;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаТабличнойЧасти) = Тип("Структура") Тогда
		ЕстьЦена              = СтрокаТабличнойЧасти.Свойство("Цена");
		ЕстьЦенаВРознице      = СтрокаТабличнойЧасти.Свойство("ЦенаВРознице");
		ЕстьЦенаНоминальная   = СтрокаТабличнойЧасти.Свойство("ЦенаНоминальная");
		ЕстьЦенаПередачи      = СтрокаТабличнойЧасти.Свойство("ЦенаПередачи");
		ЕстьЦенаПоступления   = СтрокаТабличнойЧасти.Свойство("ЦенаПоступления");
		ЕстьПлановаяСтоимость = СтрокаТабличнойЧасти.Свойство("ПлановаяСтоимость");
	Иначе
		ЕстьЦена              = ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("Цена", МетаданныеДокумента, ИмяТабличнойЧасти);
		ЕстьЦенаВРознице      = ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("ЦенаВРознице", МетаданныеДокумента, ИмяТабличнойЧасти);
		ЕстьЦенаНоминальная   = ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("ЦенаНоминальная", МетаданныеДокумента, ИмяТабличнойЧасти);
		ЕстьЦенаПередачи      = ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("ЦенаПередачи", МетаданныеДокумента, ИмяТабличнойЧасти);
		ЕстьЦенаПоступления   = ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("ЦенаПоступления", МетаданныеДокумента, ИмяТабличнойЧасти);
		ЕстьПлановаяСтоимость = ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("ПлановаяСтоимость", МетаданныеДокумента, ИмяТабличнойЧасти);
	КонецЕсли;
	

	НовоеЗначениеКоэффициента = СтрокаТабличнойЧасти.Коэффициент;
	Если (НовоеЗначениеКоэффициента <> СтароеЗначениеКоэффициента) И (СтароеЗначениеКоэффициента > 0) Тогда
		// ПересчитатьЦену
		Если ЕстьЦена Тогда	
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * НовоеЗначениеКоэффициента / СтароеЗначениеКоэффициента;
		КонецЕсли;
		Если ЕстьЦенаВРознице Тогда	
			СтрокаТабличнойЧасти.ЦенаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * НовоеЗначениеКоэффициента / СтароеЗначениеКоэффициента;
		КонецЕсли;
		Если ЕстьЦенаНоминальная Тогда	
			СтрокаТабличнойЧасти.ЦенаНоминальная = СтрокаТабличнойЧасти.ЦенаНоминальная * НовоеЗначениеКоэффициента / СтароеЗначениеКоэффициента;
		КонецЕсли;
	    Если ЕстьЦенаПередачи Тогда	
			СтрокаТабличнойЧасти.ЦенаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * НовоеЗначениеКоэффициента / СтароеЗначениеКоэффициента;
		КонецЕсли;
		Если ЕстьЦенаПоступления Тогда	
			СтрокаТабличнойЧасти.ЦенаПоступления = СтрокаТабличнойЧасти.ЦенаПоступления * НовоеЗначениеКоэффициента / СтароеЗначениеКоэффициента;
		КонецЕсли;
		Если ЕстьПлановаяСтоимость Тогда	
			СтрокаТабличнойЧасти.ПлановаяСтоимость = СтрокаТабличнойЧасти.ПлановаяСтоимость * НовоеЗначениеКоэффициента / СтароеЗначениеКоэффициента;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКоэффициентТабЧасти

// Процедура заполняет единицу в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура ЗаполнитьЕдиницуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ИмяТабличнойЧасти, МетаданныеДокумента) Экспорт

	Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			СтрокаТабличнойЧасти.Коэффициент		= 1;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения	=
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.Номенклатура, "БазоваяЕдиницаИзмерения");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура заполняет единицу и цену по ценам продажи в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ИмяТабличнойЧасти, МетаданныеДокумента) Экспорт

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента)
		И ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		ВалютаДокумента	= ?(ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента),
			ДокументОбъект.ВалютаДокумента, ВалютаРегламентированногоУчета);
			
		Цена	= Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
			ДокументОбъект.ТипЦен, ДокументОбъект.Дата, ВалютаДокумента,
			ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
			ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));
		
		Если ЗначениеЗаполнено(Цена) Тогда
			
			ЦенаВключаетНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ТипЦен, "ЦенаВключаетНДС");
			
			СуммаВключаетНДС = ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
				И ДокументОбъект.СуммаВключаетНДС;
			
			Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				СтавкаНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			Иначе
				СтавкаНДС = 0;
			КонецЕсли;
			
			Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, ЦенаВключаетНДС, СуммаВключаетНДС, СтавкаНДС);
			
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Цена	= Цена;
	Иначе
		СтрокаТабличнойЧасти.Цена	= 0;
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			СтрокаТабличнойЧасти.Коэффициент		= 1;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения	=
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.Номенклатура, "БазоваяЕдиницаИзмерения");
		КонецЕсли;
		
		// если в документе существует реквизит ЕдиницаИзмерения, то цену нужно установить для этого коэффициента,
		// т.к. в регистре цены только для базовых единиц.
		Если СтрокаТабличнойЧасти.Коэффициент > 0 Тогда
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Коэффициент;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура заполняет единицу и цену по ценам продажи в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//  МетаданныеДокумента  - метаданные
//
Процедура ЗаполнитьЦенуВРозницеТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, МетаданныеДокумента = Неопределено) Экспорт

	Если ТипЗнч(ДокументОбъект) = Тип("Структура") Тогда
		ЕстьСклад	= ДокументОбъект.Свойство("Склад");
	Иначе
		ЕстьСклад	= ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Склад", МетаданныеДокумента);
	КонецЕсли;
	
	ТипЦенРозничнойТорговли = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка();
	Если ЕстьСклад И ЗначениеЗаполнено(ДокументОбъект.Склад) Тогда
		ТипЦенРозничнойТорговли = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Склад, "ТипЦенРозничнойТорговли");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипЦенРозничнойТорговли) Тогда
		
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		СтрокаТабличнойЧасти.ЦенаВРознице = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
			ТипЦенРозничнойТорговли, ДокументОбъект.Дата,
			ВалютаРегламентированногоУчета, 1, 1);
	
	Иначе
		
		СтрокаТабличнойЧасти.ЦенаВРознице = 0;
		
	КонецЕсли;

КонецПроцедуры

// Процедура заполняет единицу и цену по ценам покупки в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ПересчитыватьНалогиВЦене       - булево, определяет необходимость пересчета цен по флагам налогов в документе,
//                                   необязательный, по умолчанию Истина.
//
Процедура ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ИмяТабличнойЧасти, МетаданныеДокумента, ПересчитыватьНалогиВЦене = Истина) Экспорт

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента)
		И ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		ВалютаДокумента	= ?(ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента),
			ДокументОбъект.ВалютаДокумента, ВалютаРегламентированногоУчета);
			
		ЦенаВключаетНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ТипЦен, "ЦенаВключаетНДС");
		
		Цена	= Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
			ДокументОбъект.ТипЦен, ДокументОбъект.Дата, ВалютаДокумента,
			ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
			ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));
			
		Если ЗначениеЗаполнено(Цена) И ПересчитыватьНалогиВЦене Тогда
				
			ЦенаВключаетНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ТипЦен, "ЦенаВключаетНДС");
			
			СуммаВключаетНДС = ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
				И ДокументОбъект.СуммаВключаетНДС;
			
			Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				СтавкаНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			Иначе
				СтавкаНДС = 0;
			КонецЕсли;
			
			Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, ЦенаВключаетНДС, СуммаВключаетНДС, СтавкаНДС);
			
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Цена	= Цена;
		
		// если в документе существует реквизит КоличествоМест, то рассчитанная цена идет за него
		// вычислим цену за базовую единицу
		Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			Если СтрокаТабличнойЧасти.Коэффициент > 0 Тогда
				СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена / СтрокаТабличнойЧасти.Коэффициент;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		СтрокаТабличнойЧасти.Цена	= 0;
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			СтрокаТабличнойЧасти.Коэффициент		= 1;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения	=
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.Номенклатура, "ЕдиницаИзмерения");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура заполняет единицу и цену по ценам покупки в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ПересчитыватьНалогиВЦене       - булево, определяет необходимость пересчета цен по флагам налогов в документе,
//                                   необязательный, по умолчанию Истина.
//
Процедура ЗаполнитьПлановуюСебестоимостьТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ИмяТабличнойЧасти, МетаданныеДокумента, ТипЦенПлановойСебестоимости, ПересчитыватьНалогиВЦене = Истина) Экспорт

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	Если НЕ ЗначениеЗаполнено(ТипЦенПлановойСебестоимости) Тогда
		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента) Тогда
			ТипЦенПлановойСебестоимости = ДокументОбъект.ТипЦен;
		Иначе
			ТипЦенПлановойСебестоимости = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
		КонецЕсли;
	КонецЕсли;

	ДатаДокумента = ДокументОбъект.Дата;

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
		ВалютаДокумента = ДокументОбъект.ВалютаДокумента;
	Иначе
		ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) Тогда
		СуммаВключаетНДС = ДокументОбъект.СуммаВключаетНДС;
	Иначе
		СуммаВключаетНДС = Ложь;
	КонецЕсли;

	// Если не заданы значения измерений, то устанавливаем по справочнику
	Если НЕ ЗначениеЗаполнено(ТипЦенПлановойСебестоимости) Тогда

		// берем из самого реквизита Номенклатура
		Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.Номенклатура, "ЕдиницаИзмерения");
			СтрокаТабличнойЧасти.Коэффициент       = 1;
			СтрокаТабличнойЧасти.ПлановаяСтоимость = 0;
		КонецЕсли;

	Иначе
		// из регистра
		ПлановаяСтоимость = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
			ТипЦенПлановойСебестоимости, ДатаДокумента, ВалютаДокумента,
			ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета),
			ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));

		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
		Если НЕ ЗначениеЗаполнено(ПлановаяСтоимость) Тогда
			СтрокаТабличнойЧасти.ПлановаяСтоимость = 0;
		Иначе
			Если ПересчитыватьНалогиВЦене Тогда
				СтрокаТабличнойЧасти.ПлановаяСтоимость = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(ПлановаяСтоимость,
					ТипЦенПлановойСебестоимости.ЦенаВключаетНДС,
					СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			Иначе
				СтрокаТабличнойЧасти.ПлановаяСтоимость = ПлановаяСтоимость;
			КонецЕсли;
		КонецЕсли;

		// Если единица оказалась не заполненной, то заполняем ее основной единицей номенклатуры
		Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
				СтрокаТабличнойЧасти.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.Номенклатура, "ЕдиницаИзмерения");
				СтрокаТабличнойЧасти.Коэффициент      = 1
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// если в документе существует реквизит СуммаПлановая, то рассчитаем его
	Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СуммаПлановая", МетаданныеДокумента, ИмяТабличнойЧасти)
		И ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("Количество", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		СтрокаТабличнойЧасти.СуммаПлановая = СтрокаТабличнойЧасти.ПлановаяСтоимость * СтрокаТабличнойЧасти.Количество;
	КонецЕсли;

КонецПроцедуры

// Процедура заполняет цену и сумму в рознице
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  УчетВПродажныхЦенах      	   - булево
//  РазделятьПоСтавкамНДС      	   - булево
//
Процедура ЗаполнитьЦенуСуммуВРозницеТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, УчетВПродажныхЦенах, РазделятьПоСтавкамНДС) Экспорт

	РеквизитыСклада	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.Склад, "ТипСклада, ТипЦенРозничнойТорговли");
	
	Если    РеквизитыСклада.ТипСклада <> Перечисления.ТипыСкладов.ОптовыйСклад
			И УчетВПродажныхЦенах
			И ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ДоговорКонтрагента, "ВидДоговора")
				<> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		СтрокаТабличнойЧасти.ЦенаВРознице = Ценообразование.ПолучитьЦенуНоменклатуры(
			СтрокаТабличнойЧасти.Номенклатура, РеквизитыСклада.ТипЦенРозничнойТорговли, ДокументОбъект.Дата, Константы.ВалютаРегламентированногоУчета.Получить(), 1, 1);
		СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаВРознице;
		
		Если РеквизитыСклада.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка И РазделятьПоСтавкамНДС Тогда
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
				СтрокаТабличнойЧасти.СтавкаНДСВРознице = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьЕдиницуЦенуПокупкиТабЧасти()

#Область КопированиеВставкаСтрокЧерезБуферОбмена

// Определяет наличие свойств в таблице значений для переноса в табличную часть
//
// Параметры:
//  Данные  - ТаблицаЗначений - таблица из буфера обмена
//
//  СписокСвойств  - Массив - массив свойств вида строка для переноса в табличную часть
//
// Возвращаемое значение:
//   Строка   - список свойств через запятую, которые были обнаружены в таблице из буфера
//
Функция ПолучитьСписокСвойствИмеющихсяВТаблицеДанных(Данные, СписокСвойств) Экспорт
	
	Колонки = Данные.Колонки;
	СвойстваКЗаполнению = Новый Массив;
	Для Каждого Свойство Из СписокСвойств Цикл
		
		Если Колонки.Найти(СокрЛП(Свойство)) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		СвойстваКЗаполнению.Добавить(Свойство);
			
	КонецЦикла;
	
	Возврат СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(СвойстваКЗаполнению, ", ");
	
КонецФункции

// Подготавливает параметры для обработки вставки данных из буфера обмена
//
// Параметры:
//  Ссылка  - ДокументСсылка - ссылка на документ, в котором будет произведена вставка данных
//
//  ИмяТаблицы  - Строка - имя табличной части, куда будет произведена вставка данных из буфера обмена
//
// Возвращаемое значение:
//   Структура   - структура параметров для обработки вставки данных из буфера обмена
//
Функция ПолучитьПараметрыВставкиДанныхИзБуфераОбмена(Ссылка, ИмяТаблицы, ПоказыватьВДокументахСчетаУчета = Истина) Экспорт
	
	ПараметрыВставки = Новый Структура;
	ПараметрыВставки.Вставить("ЭтоВставкаИзБуфера",		 Истина);
	ДанныеИзБуфераОбмена = ОбщегоНазначения.СтрокиИзБуфераОбмена();
	ПараметрыВставки.Вставить("Источник",				 ДанныеИзБуфераОбмена.Источник);
	ПараметрыВставки.Вставить("Данные",					 ДанныеИзБуфераОбмена.Данные);
	ПараметрыВставки.Вставить("ИмяТаблицы",				 ИмяТаблицы);
	
	ПараметрыВставки.Вставить("ПоказыватьВДокументахСчетаУчета", ПоказыватьВДокументахСчетаУчета);
		
	ПараметрыВставки.Вставить("ИсточникИДокументОдногоВида",
		Ссылка.Метаданные().Имя = ДанныеИзБуфераОбмена.Источник);
		
	ПараметрыВставки.Вставить("КоличествоДобавленныхСтрок",		 0);
	ПараметрыВставки.Вставить("СписокСвойств",					 "");
		
	Возврат ПараметрыВставки;
	
КонецФункции

#КонецОбласти
