////////////////////////////////////////////////////////////////////////////////
// СотрудникиФормы: методы, обслуживающие работу формы сотрудника
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция СообщениеОКонфликтеВидаЗанятостиНовогоСотрудникаССуществующими(Сотрудник, ФизическоеЛицо, Организация, ВидЗанятости, ДатаПриема) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	КонецЕсли;
	
	ТекстСообщенияОКонфликте = "";
	Если ЗначениеЗаполнено(ДатаПриема) И ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(ВидЗанятости) Тогда
		
		ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
		ЕстьОсновноеМестоРаботы = Ложь;
		
		СписокНеобходимыхДанных = "ГоловнаяОрганизация,Организация,ТабельныйНомер,Должность,ВидЗанятости,ДатаПриема,ДатаУвольнения";
		ТаблицаПоРабочимМестам = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СотрудникиФормы.СотрудникиФизическогоЛица(ФизическоеЛицо, Сотрудник), СписокНеобходимыхДанных, ТекущаяДатаСеанса());
		
		МассивКонфликтныхРабочихМест = Новый Массив;
		Для Каждого СтрокаТаблицаПоРабочимМестам Из ТаблицаПоРабочимМестам Цикл
			
			Если НЕ (СтрокаТаблицаПоРабочимМестам.ДатаПриема <> '00010101000000' И СтрокаТаблицаПоРабочимМестам.ДатаПриема < ТекущаяДатаСеанса()
				И (СтрокаТаблицаПоРабочимМестам.ДатаУвольнения > ТекущаяДатаСеанса() ИЛИ СтрокаТаблицаПоРабочимМестам.ДатаУвольнения = '00010101000000')) Тогда
				Продолжить;
			КонецЕсли; 
			Если СтрокаТаблицаПоРабочимМестам.ДатаПриема <> '00010101000000' И СтрокаТаблицаПоРабочимМестам.ДатаПриема > ДатаПриема Тогда
				Продолжить;
			КонецЕсли;	
			Если ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
				Если СтрокаТаблицаПоРабочимМестам.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
					МассивКонфликтныхРабочихМест.Добавить(СтрокаТаблицаПоРабочимМестам);
				ИначеЕсли СтрокаТаблицаПоРабочимМестам.ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство 
							И СтрокаТаблицаПоРабочимМестам.ГоловнаяОрганизация = ГоловнаяОрганизация Тогда
					МассивКонфликтныхРабочихМест.Добавить(СтрокаТаблицаПоРабочимМестам);
				КонецЕсли; 
			ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство Тогда 
				Если (СтрокаТаблицаПоРабочимМестам.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы
						ИЛИ СтрокаТаблицаПоРабочимМестам.ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство)
						И СтрокаТаблицаПоРабочимМестам.ГоловнаяОрганизация = ГоловнаяОрганизация Тогда
					МассивКонфликтныхРабочихМест.Добавить(СтрокаТаблицаПоРабочимМестам);
				КонецЕсли;
			КонецЕсли;
			
			Если (СтрокаТаблицаПоРабочимМестам.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы
					ИЛИ СтрокаТаблицаПоРабочимМестам.ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство)
					И СтрокаТаблицаПоРабочимМестам.ГоловнаяОрганизация = ГоловнаяОрганизация Тогда
				ЕстьОсновноеМестоРаботы = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивКонфликтныхРабочихМест.Количество() > 0 Тогда
			
			ТекстСообщенияОКонфликте = "";
			Для каждого СтрокаКонфликтногоСотрудника Из МассивКонфликтныхРабочихМест Цикл
				ТекстСообщенияОКонфликте = ТекстСообщенияОКонфликте + Символы.ПС +
					ТекстСообщенияОКонфликтеВидаЗанятости(
						ВидЗанятости,
						Организация,
						СтрокаКонфликтногоСотрудника.Организация,
						СтрокаКонфликтногоСотрудника.ВидЗанятости,
						СтрокаКонфликтногоСотрудника.ТабельныйНомер,
						СтрокаКонфликтногоСотрудника.Должность);
			КонецЦикла;	
					
		ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятости.ВнутреннееСовместительство И НЕ ЕстьОсновноеМестоРаботы Тогда
			ТекстСообщенияОКонфликте = ТекстСообщенияОКонфликтеВидаЗанятости(ВидЗанятости, Организация);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстСообщенияОКонфликте;
	
КонецФункции

// Возвращает массив сотрудников физического лица
//
// Параметры
//  ФизическоеЛицо 		- СправочникСсылка.ФизическиеЛица, сотрудников которого необходимо получить
//	ИсключаяСотрудника 	- СправочникСсылка.СотрудникиОрганизации, если задать, указанный сотрудник, будет исключен
//						из массива возвращаемых ссылок
//	Организация			- СправочникСсылка.Организации, если задать, то будут отобранны сотрудники, имеющие отношение к
//						соответствующей ГоловнойОрганизации
//
// Возвращаемое значение:
//   Массив   - Массив ссылок на сотрудников физического лица 
//
Функция СотрудникиФизическогоЛица(ФизическоеЛицо, ИсключаяСотрудника = Неопределено, Организация = Неопределено) Экспорт
	
	ОтбиратьВсехСотрудников = (ИсключаяСотрудника = Неопределено ИЛИ ИсключаяСотрудника = Справочники.Сотрудники.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ОтбиратьПоВсемГоловнымОрганизациям = Ложь;
		ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	Иначе
		ОтбиратьПоВсемГоловнымОрганизациям = Истина;
		ГоловнаяОрганизация = Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сотрудники.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо
	|	И (&ОтбиратьВсехСотрудников
	|			ИЛИ Сотрудники.Ссылка <> &ИсключаяСотрудника)
	|	И (&ОтбиратьПоВсемГоловнымОрганизациям
	|			ИЛИ Сотрудники.ГоловнаяОрганизация = &ГоловнаяОрганизация)";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("ОтбиратьВсехСотрудников", ОтбиратьВсехСотрудников);
	Запрос.УстановитьПараметр("ИсключаяСотрудника", ИсключаяСотрудника);
	Запрос.УстановитьПараметр("ОтбиратьПоВсемГоловнымОрганизациям", ОтбиратьПоВсемГоловнымОрганизациям);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы Сотрудника

Процедура СотрудникиПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	СотрудникиФормыВнутренний.СотрудникиПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		
		СотрудникиОбновитьЭлементыФормы(Форма);
		
	КонецЕсли;

КонецПроцедуры

Процедура СотрудникиПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	СотрудникиФормыВнутренний.СотрудникиПриЧтенииНаСервере(Форма, ТекущийОбъект);	Форма.ФизическоеЛицоСсылка = ТекущийОбъект.ФизическоеЛицо;
	
КонецПроцедуры

Процедура СотрудникиПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(Форма, ТекущийОбъект);

	// Обработчик подсистемы "Контактная информация"
	Если Форма.КонтактнаяИнформацияФизическогоЛица <> Неопределено Тогда
		УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(Форма.КонтактнаяИнформацияФизическогоЛица, Форма.ФизическоеЛицо);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ФизическоеЛицо) Тогда
		ТекущийОбъект.ФизическоеЛицо = Форма.ФизическоеЛицоСсылка;
	КонецЕсли;
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		
		Если Форма.ФизическоеЛицо.Ссылка.Пустая() Тогда
			ЗаписатьФизическоеЛицоСотрудника(Форма);
		КонецЕсли; 
		
		ТекущийОбъект.УстановитьСсылкуНового(Форма.СотрудникСсылка);
		
	КонецЕсли;
	
	ЛичныеДанныеФизическогоЛицаПередЗаписью(Форма, Форма.ФизическоеЛицоСсылка, "ФизическоеЛицо");
	
	ЗаполнитьРеквизитГоловнаяОрганизация(Форма, ТекущийОбъект);
	
КонецПроцедуры

Процедура СотрудникиПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	СотрудникиФормыВнутренний.СотрудникиПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
КонецПроцедуры

Процедура СотрудникиПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если НЕ Форма.ИзмененыЛичныеДанные Тогда
		ПрочитатьДанныеСвязанныеССотрудником(Форма);
	КонецЕсли; 
	
КонецПроцедуры

Процедура СотрудникиОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	СотрудникиФормыВнутренний.СотрудникиОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы Физического лица

Процедура ФизическиеЛицаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	СотрудникиФормыВнутренний.ФизическиеЛицаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		
		ФизическиеЛицаОбновитьЭлементыФормы(Форма);
		ОбновитьОтображениеЛичныхДанных(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФизическиеЛицаПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
    // СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	СотрудникиФормыВнутренний.ФизическиеЛицаПриЧтенииНаСервере(Форма, ТекущийОбъект);
	ОбновитьОтображениеЛичныхДанных(Форма);
	
КонецПроцедуры

Процедура ФизическиеЛицаПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(Форма, ТекущийОбъект);
	
	// Обработчик подсистемы "Контактная информация"
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(Форма, ТекущийОбъект);
	
	// Для нового физического лица устанавливаем ссылку
	Если Форма.Параметры.Ключ.Пустая() Тогда
		ТекущийОбъект.УстановитьСсылкуНового(Форма.ФизическоеЛицоСсылка);
	КонецЕсли;
	
	ЛичныеДанныеФизическогоЛицаПередЗаписью(Форма, Форма.ФизическоеЛицоСсылка, "ФизическоеЛицо");
	
КонецПроцедуры

Процедура ФизическиеЛицаПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	СотрудникиФормыВнутренний.ФизическиеЛицаПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);	
	
КонецПроцедуры

Процедура ФизическиеЛицаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	СотрудникиФормыВнутренний.ФизическиеЛицаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

Процедура ФизическиеЛицаОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ФизическоеЛицоОбъект = Форма.РеквизитФормыВЗначение("ФизическоеЛицо");
	ФизическиеЛицаЗарплатаКадры.ПроверитьУникальностьНаименованияФизическогоЛица(ФизическоеЛицоОбъект, Отказ);
	ЛичныеДанныеФизическихЛицОбработкаПроверкиЗаполненияВФорме(Форма, Форма.ФизическоеЛицоСсылка, Отказ);			
	Если Форма.ДоступенПросмотрДанныхФизическихЛиц Тогда
		РедактированиеПериодическихСведений.ПроверитьЗаписьВФорме(Форма, "ГражданствоФизическихЛиц", Форма.ФизическоеЛицоСсылка, Отказ);
		РедактированиеПериодическихСведений.ПроверитьЗаписьВФорме(Форма, "ДокументыФизическихЛиц", Форма.ФизическоеЛицоСсылка, Отказ);
	КонецЕсли; 
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(Форма, Форма.ФизическоеЛицо, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики модулей объекта и менеджера

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	СотрудникиФормыВнутренний.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры

Процедура ОбновитьОтображениеПредупреждающихНадписей(Форма) Экспорт
	
	Если Форма.ДоступенПросмотрДанныхФизическихЛиц Тогда
		СотрудникиКлиентСервер.ОбработатьОтображениеСерияДокументаФизическогоЛица(Форма.ДокументыФизическихЛиц.ВидДокумента, Форма.ДокументыФизическихЛиц.Серия ,Форма.Элементы.ДокументыФизическихЛицСерия, Форма);
		СотрудникиКлиентСервер.ОбработатьОтображениеНомерДокументаФизическогоЛица(Форма.ДокументыФизическихЛиц.ВидДокумента, Форма.ДокументыФизическихЛиц.Номер ,Форма.Элементы.ДокументыФизическихЛицНомер, Форма);
	КонецЕсли;
	ОбновитьОтображениеПредупреждающихНадписейКонтактнойИнформации(Форма); 
	
КонецПроцедуры

// Обновляет предупреждающие надписи к элементу (содержащему адрес)
Процедура ОбновитьОтображениеПредупреждающихНадписейКонтактнойИнформации(Форма) Экспорт

	КоллекцияПолейКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	Если КоллекцияПолейКонтактнойИнформации <> Неопределено Тогда
		
		Для Каждого КонтактнаяИнформация Из КоллекцияПолейКонтактнойИнформации Цикл
			
			Если КонтактнаяИнформация.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
				
				Элемент = Форма.Элементы.Найти(КонтактнаяИнформация.ИмяРеквизита);
				
				Если Элемент <> Неопределено Тогда
				
					ОбработатьОтображениеПоляАдреса(Форма[Элемент.Имя], КонтактнаяИнформация.Значение ,Элемент, Форма);
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры 

// осуществляет проверку заполненного элемента содержащего адрес и выводит
// предупреждающие надписи
Процедура ОбработатьОтображениеПоляАдреса(Адрес, СписокПолей, Элемент, Форма)
	
	СообщенияПроверки = "";
	ЗаголовокОшибки = "";
	ЗаголовокОшибкиДополнительный = "";
	ИнфоКартинка = Новый Картинка;
	ИнфоКартинкаПодсказка = Новый Картинка;
	ЦветТекстаПоля = Форма.ЦветСтиляЦветГиперссылки;
		
	Если Не ПустаяСтрока(Адрес) И Не Адрес = НСтр("ru='Заполнить';uk='Заповнити'") Тогда	
		
		РезультатПроверки = Истина;
		
		СообщенияПроверки = ?(ПустаяСтрока(СообщенияПроверки), НСтр("ru='Адрес введен правильно - в соответствии с требованиями';uk='Адресу введено правильно - відповідно до вимог'"), СообщенияПроверки);
		ЗаголовокОшибкиДополнительный = СтрПолучитьСтроку(СообщенияПроверки, 1);
		СообщенияПроверки = СокрЛП(Сред(СообщенияПроверки, СтрДлина(ЗаголовокОшибкиДополнительный) + 1));
		
		Если РезультатПроверки Тогда
			ИнфоКартинка = БиблиотекаКартинок.ОперацияВыполненаУспешно;
			ЦветТекстаИнфоТекстДополнительный = Форма.ЦветСтиляПоясняющийТекст;
		Иначе
			ИнфоКартинка = БиблиотекаКартинок.Предупреждение;
			ИнфоКартинкаПодсказка = БиблиотекаКартинок.Подсказка;
			ЦветТекстаИнфоТекстДополнительный = Форма.ЦветСтиляПоясняющийОшибкуТекст;
			ЦветТекстаПоля = Форма.ЦветСтиляПоясняющийОшибкуТекст;
		КонецЕсли; 
	
	Иначе
		ЦветТекстаИнфоТекстДополнительный = Форма.ЦветСтиляЦветТекстаПоля;
	КонецЕсли;

	Форма.Элементы[Элемент.Имя].ЦветТекста 	= ЦветТекстаПоля;
	
	Форма[Элемент.Имя + "ИнфоКартинка"] 			= ИнфоКартинка;
	Форма[Элемент.Имя + "ИнфоКартинкаПодсказка"] 	= ИнфоКартинкаПодсказка;
	Форма[Элемент.Имя + "ИнфоТекстДополнительный"] 	= ЗаголовокОшибкиДополнительный;
	
	форма.Элементы[Элемент.Имя + "ИнфоКартинка"].Подсказка 				= СообщенияПроверки;
	форма.Элементы[Элемент.Имя + "ИнфоКартинкаПодсказка"].Подсказка 	= СообщенияПроверки;
	форма.Элементы[Элемент.Имя + "ИнфоТекстДополнительный"].Подсказка 	= СообщенияПроверки;
	форма.Элементы[Элемент.Имя + "ИнфоТекстДополнительный"].ЦветТекста 	= ЦветТекстаИнфоТекстДополнительный;
		
	форма.Элементы[Элемент.Имя + "ИнфоКартинкаПодсказка"].Видимость = НЕ ПустаяСтрока(СообщенияПроверки);
	
КонецПроцедуры

Процедура ОбновитьОтображениеЛичныхДанных(Форма) Экспорт
	Форма.ФизическоеЛицоМестоРождения = КадровыйУчетКлиентСервер.ПредставлениеМестаРождения(Форма.ФизическоеЛицо.МестоРождения);
	СотрудникиКлиентСервер.ОбновитьДоступностьПолейВводаГражданства(Форма);
	СотрудникиКлиентСервер.ОбновитьПолеУдостоверениеЛичностиПериод(Форма);
	СотрудникиКлиентСервер.ОбновитьПолеВоинскийУчет(Форма);
КонецПроцедуры

Процедура ЗаписатьФизическоеЛицоСотрудника(Форма) Экспорт
	
	//Запись физического лица
	Если Форма.ФизическоеЛицоЗаблокировано ИЛИ Форма.ФизическоеЛицо.Ссылка.Пустая() Тогда
		
		// проверим права на запись нового физлица
		ПравоНаДобавлениеИзменениеФизическихЛиц = Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры,ДобавлениеИзменениеПерсональныхДанныхФизическихЛиц,ДобавлениеИзменениеФизическихЛиц");
		Если Форма.ФизическоеЛицо.Ссылка.Пустая() И НЕ ПравоНаДобавлениеИзменениеФизическихЛиц Тогда
			ВызватьИсключение НСтр("ru='Нет прав на запись нового физического лица. Сотрудник не записан.';uk='Немає прав на запис нової фізичної особи. Співробітник не записаний.'");
		КонецЕсли;
	
		ФизическоеЛицоОбъект = Форма.РеквизитФормыВЗначение("ФизическоеЛицо");
		Если ФизическоеЛицоОбъект.Ссылка.Пустая() Тогда
			ФизическоеЛицоОбъект.УстановитьСсылкуНового(Форма.ФизическоеЛицоСсылка);
		КонецЕсли;
		
		ФизическоеЛицоОбъект.Записать();
		Если Форма.ФизическоеЛицо.Ссылка.Пустая() Тогда
			Форма.ЗначениеВРеквизитФормы(ФизическоеЛицоОбъект, "ФизическоеЛицо");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПервоначальныеЗначения(Форма) Экспорт
	
	СотрудникиФормыВнутренний.ЗаполнитьПервоначальныеЗначения(Форма);
	
КонецПроцедуры

Процедура СотрудникиОбновитьЭлементыФормы(Форма)
	
	СотрудникиФормыВнутренний.СотрудникиОбновитьЭлементыФормы(Форма);
	
КонецПроцедуры

Процедура ФизическиеЛицаОбновитьЭлементыФормы(Форма) Экспорт
	
	СотрудникиФормыВнутренний.ФизическиеЛицаОбновитьЭлементыФормы(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииОрганизации(Форма) Экспорт
	
	Форма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Форма.ТекущаяОрганизация)));
	СотрудникиКлиентСервер.УстановитьВидЗанятостиНовогоСотрудника(Форма);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитГоловнаяОрганизация(Форма, ТекущийОбъект)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Форма.ТекущаяОрганизация);
		Если ТекущийОбъект.ГоловнаяОрганизация <> ГоловнаяОрганизация Тогда
			ТекущийОбъект.ГоловнаяОрганизация = ГоловнаяОрганизация;
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает список физлиц с похожим наименованием
// Параметры
//		ФизическоеЛицоСсылка - СправочникСсылка.ФизическиеЛица, ссылка на физлицо
//								которое уже сопоставлено с сотрудником
//
Функция ПодобратьСписокФизЛиц(ФизическоеЛицоСсылка, Знач Фамилия, Знач Имя, Знач Отчество, Знач Уточнение = Неопределено) Экспорт
	
	СтруктураВозврат = Новый Структура("ФизическоеЛицоУникально", Истина);
	
	СписокФизлиц = Новый СписокЗначений;
	Фамилия  = СОКРЛП(Фамилия);
	Имя 	 = СОКРЛП(Имя);
	Отчество = СОКРЛП(Отчество);
	Наименование = Фамилия +" "+ Имя +" "+ Отчество;
	
	Если ПустаяСтрока(Наименование) Тогда
		Возврат СтруктураВозврат;
	КонецЕсли;
	
	ПохожиеФизическиеЛица = ПохожиеФизическиеЛица(ФизическоеЛицоСсылка, Фамилия, Имя, Отчество, Уточнение); 
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивФизлиц = ПохожиеФизическиеЛица.ВыгрузитьКолонку("Ссылка");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если МассивФизлиц.Количество() > 0 Тогда
		
		СтруктураВозврат.ФизическоеЛицоУникально = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&МассивФизлиц)";
		
		Запрос.УстановитьПараметр("МассивФизлиц", МассивФизлиц);
		
		МассивДоступныхФизическихЛиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
		
		Если МассивДоступныхФизическихЛиц.Количество() = МассивФизлиц.Количество() Тогда
			
			СтруктураВозврат.Вставить("ДанныеФизическихЛицДоступны", Истина);
			
			ДанныеФизическихЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(
				Истина, 
				МассивФизлиц, 
				"ФИОПолные,ДатаРождения,КодПоДРФО,ДокументПредставление", 
				ТекущаяДатаСеанса());
			
			СтруктураВозврат.Вставить("ДанныеФизическихЛиц", ОбщегоНазначения.ТаблицаЗначенийВМассив(ДанныеФизическихЛиц));
			
		Иначе
			
			СтруктураВозврат.Вставить("ДанныеФизическихЛицДоступны", Ложь);
			СтруктураВозврат.Вставить("ВозможнаПроверкаПоДРФО", Ложь);
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			
			УстановитьПривилегированныйРежим(Истина);
			
			КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеФизическихЛиц(
				Запрос.МенеджерВременныхТаблиц,
				Ложь,
				МассивФизлиц,
				"КодПоДРФО",
				ТекущаяДатаСеанса());
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	МИНИМУМ(КадровыеДанныеФизическихЛиц.КодПоДРФО) КАК КодПоДРФО
			|ПОМЕСТИТЬ ВТМинимальныеДРФО
			|ИЗ
			|	ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА МинимальныеДРФО.КодПоДРФО = """"
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ВозможнаПроверкаПоДРФО
			|ИЗ
			|	ВТМинимальныеДРФО КАК МинимальныеДРФО";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Выборка.Следующий() Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураВозврат, Выборка);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат СтруктураВозврат;
	
КонецФункции

// Возвращает список уточнений физлиц с такими же ФИО
// Параметры
//		ФизическоеЛицоСсылка - СправочникСсылка.ФизическиеЛица, ссылка на физлицо
//								которое проверяем                             
//		Фамилия, Имя, Отчество, Уточнение - проверяемые ФИО и уточнение
//
Функция ПодобратьСписокУточненийТекущегоФизическогоЛица(ФизическоеЛицоСсылка, Знач Фамилия, Знач Имя, Знач Отчество, Знач Уточнение = Неопределено) Экспорт
	СписокУточнений = Новый СписокЗначений;
	Фамилия  = СОКРЛП(Фамилия);
	Имя 	 = СОКРЛП(Имя);
	Отчество = СОКРЛП(Отчество);
	Наименование = Фамилия +" "+ Имя +" "+ Отчество;
	
	Если ПустаяСтрока(Наименование) Тогда
		Возврат СписокУточнений;
	КонецЕсли;
	
	ПохожиеФизическиеЛица = ПохожиеФизическиеЛица(ФизическоеЛицоСсылка, Фамилия, Имя, Отчество, Уточнение, Истина); 
	
	МассивУточнений = ПохожиеФизическиеЛица.ВыгрузитьКолонку("УточнениеНаименования");
	СписокУточнений.ЗагрузитьЗначения(МассивУточнений);
	
	Возврат СписокУточнений;
КонецФункции 

// Возвращает запрос для проверки физических лиц с похожими ФИО
// с установленными параметрами для текущей проверки
// Параметры
//		ФизическоеЛицоСсылка - СправочникСсылка.ФизическиеЛица, ссылка на физлицо
//								которое проверяем                             
//		Фамилия, Имя, Отчество, Уточнение - проверяемые ФИО и уточнение
//
//		РазличныеУточнения	- проверять полное совпадение ФИО (и возможно уточнения)					                             
//
Функция ПохожиеФизическиеЛица(ФизическоеЛицоСсылка, Фамилия, Имя, Отчество, Уточнение = Неопределено, ФИОПолностью = Ложь)
	
	Фамилия = ФизическиеЛицаЗарплатаКадры.ФамилияДляПоиска(Фамилия);
	Имя = ФизическиеЛицаЗарплатаКадры.ИмяДляПоиска(Имя); 
	Отчество = ФизическиеЛицаЗарплатаКадры.ОтчествоДляПоиска(Отчество);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицоСсылка);
	Запрос.УстановитьПараметр("Фамилия", Фамилия+?(ПустаяСтрока(Имя) И ПустаяСтрока(Отчество),"%",""));
	Запрос.УстановитьПараметр("ФамилияИмя", Фамилия + ?(ПустаяСтрока(Имя),""," %" + Имя));
	Запрос.УстановитьПараметр("ФамилияИмяОтчество", Фамилия + ?(ПустаяСтрока(Имя),""," %" + Имя) + ?(ПустаяСтрока(Отчество),"%"," %" + Отчество));
	
	Если ФИОПолностью Тогда
		Запрос.УстановитьПараметр("Фамилия", Фамилия + ?(ПустаяСтрока(Имя),""," %" + Имя) + ?(ПустаяСтрока(Отчество),""," %" + Отчество));
		Запрос.УстановитьПараметр("ФамилияИмя", Фамилия + ?(ПустаяСтрока(Имя),""," %" + Имя) + ?(ПустаяСтрока(Отчество),""," %" + Отчество));
	КонецЕсли;
	
	Если Уточнение = Неопределено Тогда
		Уточнение = "";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ФамилияИмяОтчествоУточнение", Фамилия + ?(ПустаяСтрока(Имя),""," %" + Имя) + ?(ПустаяСтрока(Отчество),""," %" + Отчество) + ?(ПустаяСтрока(Отчество),""," %" + Уточнение));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛица.Ссылка,
	|	ФизическиеЛица.Наименование,
	|	ФизическиеЛица.УточнениеНаименования
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка <> &ФизическоеЛицо
	|	И (ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &Фамилия СПЕЦСИМВОЛ ""~""
	|			ИЛИ ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &ФамилияИмя СПЕЦСИМВОЛ ""~""
	|			ИЛИ ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &ФамилияИмяОтчество СПЕЦСИМВОЛ ""~""
	|			ИЛИ ФизическиеЛица.НаименованиеСлужебное ПОДОБНО &ФамилияИмяОтчествоУточнение СПЕЦСИМВОЛ ""~"")";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

Функция ТекстСообщенияОКонфликтеВидаЗанятости(ВидЗанятости, Организация, КонфликтныйСотрудникОрганизация = Неопределено, КонфликтныйСотрудникВидЗанятости = Неопределено, КонфликтныйСотрудникТабельныйНомер = "", КонфликтныйСотрудникДолжность = Неопределено)
	ТекстСообщения = "";
	Если ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
		ТекстСообщения =  НСтр("ru='Нельзя оформить сотрудника по основному месту работы, так как он уже работает в %1 %2, Таб. номер: %3, %4.';uk='Не можна оформити співробітника за основним місцем роботи, так як він вже працює в %1 %2, Таб. номер: %3, %4.'");
	ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство Тогда
		ТекстСообщения =  НСтр("ru='Нельзя оформить сотрудника на внешнее совместительство, так как он уже работает в %1 %2, Таб. номер: %3, %4.';uk='Не можна оформити співробітника на зовнішнє сумісництво, так як він вже працює в %1 %2, Таб. номер: %3, %4.'");
	ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятости.ВнутреннееСовместительство Тогда
		ТекстСообщения = НСтр("ru='Нельзя оформить сотрудника на внутреннее совместительство, так как он не работает в %1.';uk='Не можна оформити співробітника на внутрішнє сумісництво, так як він не працює в %1.'");
	КонецЕсли;
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстСообщения,
		?(Организация <> КонфликтныйСотрудникОрганизация И КонфликтныйСотрудникОрганизация <> Неопределено, КонфликтныйСотрудникОрганизация, НСтр("ru='нашей организации';uk='нашій організації'")),
		?(КонфликтныйСотрудникВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы, НСтр("ru='по основному месту работы';uk='за основним місцем роботи'"), НСтр("ru='как внешний совместитель';uk='як зовнішній сумісник'")),
		КонфликтныйСотрудникТабельныйНомер,
		КонфликтныйСотрудникДолжность,);
КонецФункции

Функция ПолучитьВидЗанятостиДляНовогоСотрудника(Сотрудник, Организация, ФизическоеЛицо) Экспорт

	Если ФизическоеЛицо = Неопределено Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	КонецЕсли; 
	
	СписокНеобходимыхДанных = "ГоловнаяОрганизация,Организация,ВидЗанятости,ДатаПриема,ДатаУвольнения";
	ТаблицаПоРабочимМестамПредварительно = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СотрудникиФизическогоЛица(ФизическоеЛицо), СписокНеобходимыхДанных, ТекущаяДатаСеанса());
	
	// Рассчитаем актуальность сотрудника
	ТаблицаПоРабочимМестамПредварительно.Колонки.Добавить("СотрудникАктуален", Новый ОписаниеТипов("Булево"));
	Для Каждого СтрокаТаблицаПоРабочимМестам Из ТаблицаПоРабочимМестамПредварительно Цикл
		СтрокаТаблицаПоРабочимМестам.СотрудникАктуален = СтрокаТаблицаПоРабочимМестам.ДатаПриема <> '00010101000000' И СтрокаТаблицаПоРабочимМестам.ДатаПриема < ТекущаяДатаСеанса()
			И (СтрокаТаблицаПоРабочимМестам.ДатаУвольнения > ТекущаяДатаСеанса() ИЛИ СтрокаТаблицаПоРабочимМестам.ДатаУвольнения = '00010101000000');
		
	КонецЦикла;
	
	// Оставим записи только для актуальных сотрудников
	ТаблицаПоРабочимМестам =  ТаблицаПоРабочимМестамПредварительно.Скопировать(ТаблицаПоРабочимМестамПредварительно.НайтиСтроки(Новый Структура("СотрудникАктуален", Истина)));	
	Если ТаблицаПоРабочимМестам.Количество() > 0 Тогда
		ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
		// Есть актуальные рабочие места
		// Проверим есть ли рабочие места по основному месту работы
		СтруктураОтбора = Новый Структура("ВидЗанятости", ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ОсновноеМестоРаботы"));
		АктуальныеСотрудникиПоОсновномуМестуРаботы = ТаблицаПоРабочимМестам.НайтиСтроки(СтруктураОтбора);
		Если АктуальныеСотрудникиПоОсновномуМестуРаботы.Количество() > 0 Тогда
			// Проверим актуальные рабочие места с основным рабочим местом в выбранной организации
			СтруктураОтбора = Новый Структура("ГоловнаяОрганизация,ВидЗанятости", ГоловнаяОрганизация, ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ОсновноеМестоРаботы"));
			АктуальныеСотрудникиПоОсновномуМестуРаботыВыбраннойОрганизации = ТаблицаПоРабочимМестам.НайтиСтроки(СтруктураОтбора);
			Если АктуальныеСотрудникиПоОсновномуМестуРаботыВыбраннойОрганизации.Количество() > 0 Тогда
				// Уже работает в этой организации по основному месту работы
				Возврат ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ВнутреннееСовместительство");
			Иначе
				// Основное место работы в другой организации
				// Проверим рабочее места как внешнего совместителя в выбранной организации
				СтруктураОтбора = Новый Структура("ГоловнаяОрганизация,ВидЗанятости", ГоловнаяОрганизация, ПредопределенноеЗначение("Перечисление.ВидыЗанятости.Совместительство"));
				АктуальныеСотрудникиВыбраннойОрганизации = ТаблицаПоРабочимМестам.НайтиСтроки(СтруктураОтбора);
				Если АктуальныеСотрудникиВыбраннойОрганизации.Количество() > 0 Тогда
					// Уже работает как внешний совместитель
					Возврат ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ВнутреннееСовместительство");
				Иначе
					// Значит можно предложить внешнее совместительство
					Возврат ПредопределенноеЗначение("Перечисление.ВидыЗанятости.Совместительство");
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Проверим вид занятости (внешнее совместительство) в выбранной организации
			СтруктураОтбора = Новый Структура("ГоловнаяОрганизация,ВидЗанятости", ГоловнаяОрганизация, ПредопределенноеЗначение("Перечисление.ВидыЗанятости.Совместительство"));
			АктуальныеСотрудникиВыбраннойОрганизации = ТаблицаПоРабочимМестам.НайтиСтроки(СтруктураОтбора);
			Если АктуальныеСотрудникиВыбраннойОрганизации.Количество() > 0 Тогда
				// Уже работает по совместительству
				Возврат ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ВнутреннееСовместительство");
			Иначе
				// Значит можно предложить основное место работы
				Возврат ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ОсновноеМестоРаботы");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Актуальных рабочих мест нет, значит основное место работы
	Возврат ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ОсновноеМестоРаботы");
КонецФункции

Функция ЗаблокироватьФизическоеЛицоПриРедактированииНаСервере(ФизическоеЛицоСсылка, ФизическоеЛицоВерсияДанных, ФормаУникальныйИдентификатор) Экспорт
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ФизическоеЛицоСсылка, ФизическоеЛицоВерсияДанных, ФормаУникальныйИдентификатор);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ЛИЧНЫМИ ДАННЫМИ ФИЗ ЛИЦА

Функция ИзменяемыеПоляФизическогоЛица() Экспорт
	
	ИзменяемыеПоля = Новый Структура;
	ИзменяемыеПоля.Вставить("Пол", "ИзмененПол");
	ИзменяемыеПоля.Вставить("ДатаРождения", "ИзмененаДатаРождения");
	ИзменяемыеПоля.Вставить("ДатаРегистрации", "ИзмененаДатаРегистрации");
	ИзменяемыеПоля.Вставить("МестоРождения", "ИзмененоМестоРождения");
	ИзменяемыеПоля.Вставить("ГруппаДоступа", "ИзмененаГруппаДоступа");
	ИзменяемыеПоля.Вставить("КодПоДРФО", "ДРФОИзменен");
	ИзменяемыеПоля.Вставить("УточнениеНаименования", "ИзмененоУточнениеНаименования");
	
	Возврат ИзменяемыеПоля;
	
КонецФункции

Процедура ОбновитьДанныеФизическогоЛица(Форма) Экспорт
	ПрочитатьДанныеСвязанныеССотрудником(Форма);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты") Тогда
		ЗаполнитьФормуМестамиРаботы(Форма, "ДругиеРабочиеМеста");
	КонецЕсли;
КонецПроцедуры

Процедура ЛичныеДанныеФизическогоЛицаПередЗаписью(Форма, ФизическоеЛицоСсылка, ПутьКДаннымФизическогоЛицаВФорме = "ФизическоеЛицо")
	
	ИзменяемыеПоля = ИзменяемыеПоляФизическогоЛица();
	
	Если ФизическоеЛицоСсылка = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
		Для Каждого КлючИЗначение Из ИзменяемыеПоля Цикл
			Форма[КлючИЗначение.Значение] = Ложь;
		КонецЦикла;
	Иначе
		СтарыеЛичныеДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФизическоеЛицоСсылка, ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(ИзменяемыеПоля));
		ФизическоеЛицоДанныеФормы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымФизическогоЛицаВФорме);
		Для Каждого КлючИЗначение Из ИзменяемыеПоля Цикл
			Форма[КлючИЗначение.Значение] = (СтарыеЛичныеДанные[КлючИЗначение.Ключ] <> ФизическоеЛицоДанныеФормы[КлючИЗначение.Ключ]);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЛичныеДанныеФизическогоЛицаПриЗаписи(Форма, ФизическоеЛицоСсылка, Организация = Неопределено) Экспорт
	
	СотрудникиФормыВнутренний.ЛичныеДанныеФизическогоЛицаПриЗаписи(Форма, ФизическоеЛицоСсылка, Организация);
	
КонецПроцедуры	

Процедура ЛичныеДанныеФизическихЛицОбработкаПроверкиЗаполненияВФорме(Форма, ФизическоеЛицоСсылка, Отказ) Экспорт
	
	СотрудникиФормыВнутренний.ЛичныеДанныеФизическихЛицОбработкаПроверкиЗаполненияВФорме(Форма, ФизическоеЛицоСсылка, Отказ);
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Процедуры чтения / записи данных ФизическогоЛица

Процедура ИнициализироватьТекущиеДанныеСотрудника(Форма) Экспорт
	ТекущиеДанныеКакСтруктура = Новый Структура("ТекущаяОрганизация,ТекущееПодразделение,ТекущаяДолжность,ТекущийВидЗанятости,ТекущаяТарифнаяСтавка,ДатаПриема,ДатаУвольнения");
	Форма.ТекущиеДанныеПрежняя = Новый ФиксированнаяСтруктура(ТекущиеДанныеКакСтруктура);
КонецПроцедуры

Функция КлючиСтруктурыТекущихКадровыхДанныхСотрудника() Экспорт
	Возврат СотрудникиФормыВнутренний.КлючиСтруктурыТекущихКадровыхДанныхСотрудника();
КонецФункции

Процедура ПрочитатьДанныеСвязанныеСФизлицом(Форма, ДоступенПросмотрДанныхФизическихЛиц, Организация = Неопределено, ИзФормыСотрудника = Ложь) Экспорт
	
	СотрудникиФормыВнутренний.ПрочитатьДанныеСвязанныеСФизлицом(Форма, ДоступенПросмотрДанныхФизическихЛиц, Организация, ИзФормыСотрудника);
	ФизическиеЛицаОбновитьЭлементыФормы(Форма);
	
КонецПроцедуры

Процедура ПрочитатьДанныеСвязанныеССотрудником(Форма) Экспорт
	
	СотрудникиФормыВнутренний.ПрочитатьДанныеСвязанныеССотрудником(Форма);
	СотрудникиОбновитьЭлементыФормы(Форма);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// Обработка статуса налогоплательщика

Функция ПолучитьСведенияОВычетахНДФЛ(ФизическоеЛицо) Экспорт
	
	ВозвращаемыйМассив = Новый Массив;
		
	Если Пользователи.РолиДоступны("ЧтениеНалоговИВзносов,ДобавлениеИзменениеНалоговИВзносов") Тогда
		
		ТЗ =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВложенныйЗапрос.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	МАКСИМУМ(ИмущественныеВычетыНДФЛ.Ссылка) КАК Регистратор
		|ПОМЕСТИТЬ ИмущественныйВычетМаксимум
		|ИЗ
		|	(ВЫБРАТЬ
		|		МАКСИМУМ(ИмущественныеВычетыНДФЛ.ПрименятьВычетыС) КАК Период,
		|		ИмущественныеВычетыНДФЛ.Сотрудник КАК ФизическоеЛицо,
		|		ИмущественныеВычетыНДФЛ.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация
		|	ИЗ
		|		Документ.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ КАК ИмущественныеВычетыНДФЛ
		|	ГДЕ
		|		ИмущественныеВычетыНДФЛ.Сотрудник = &ФизическоеЛицо
		|		И ИмущественныеВычетыНДФЛ.Проведен
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ИмущественныеВычетыНДФЛ.Сотрудник,
		|		ИмущественныеВычетыНДФЛ.Организация.ГоловнаяОрганизация) КАК ВложенныйЗапрос
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ КАК ИмущественныеВычетыНДФЛ
		|		ПО ВложенныйЗапрос.ГоловнаяОрганизация = ИмущественныеВычетыНДФЛ.Организация.ГоловнаяОрганизация
		|			И ВложенныйЗапрос.ФизическоеЛицо = ИмущественныеВычетыНДФЛ.Сотрудник
		|			И ВложенныйЗапрос.Период = ИмущественныеВычетыНДФЛ.ПрименятьВычетыС
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ФизическоеЛицо,
		|	ВложенныйЗапрос.ГоловнаяОрганизация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(СтандартныеВычетыПоНДФЛ.МесяцРегистрации) КАК МесяцРегистрации
		|ИЗ
		|	(ВЫБРАТЬ
		|		СтандартныеВычетыНаДетейНДФЛ.МесяцРегистрации КАК МесяцРегистрации
		|	ИЗ
		|		РегистрСведений.СтандартныеВычетыНаДетейНДФЛ КАК СтандартныеВычетыНаДетейНДФЛ
		|	ГДЕ
		|		СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо = &ФизическоеЛицо
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СтандартныеВычетыФизическихЛицНДФЛ.Период
		|	ИЗ
		|		РегистрСведений.СтандартныеВычетыФизическихЛицНДФЛ КАК СтандартныеВычетыФизическихЛицНДФЛ
		|	ГДЕ
		|		СтандартныеВычетыФизическихЛицНДФЛ.ФизическоеЛицо = &ФизическоеЛицо) КАК СтандартныеВычетыПоНДФЛ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтандартныеВычетыФизическихЛицНДФЛСрезПоследних.Регистратор,
		|	СтандартныеВычетыФизическихЛицНДФЛСрезПоследних.Регистратор.Номер КАК Номер,
		|	СтандартныеВычетыФизическихЛицНДФЛСрезПоследних.Регистратор.Дата КАК Дата,
		|	СтандартныеВычетыФизическихЛицНДФЛСрезПоследних.КодВычетаЛичный,
		|	СтандартныеВычетыФизическихЛицНДФЛСрезПоследних.Регистратор.Сотрудник КАК Сотрудник,
		|	СтандартныеВычетыФизическихЛицНДФЛСрезПоследних.Регистратор.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.СтандартныеВычетыФизическихЛицНДФЛ.СрезПоследних(, ФизическоеЛицо = &ФизическоеЛицо) КАК СтандартныеВычетыФизическихЛицНДФЛСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтандартныеВычетыНаДетейНДФЛ.КодВычета,
		|	СтандартныеВычетыНаДетейНДФЛ.ДействуетДо КАК ДействуетДо,
		|	СтандартныеВычетыНаДетейНДФЛ.Регистратор,
		|	СтандартныеВычетыНаДетейНДФЛ.Регистратор.Номер КАК Номер,
		|	СтандартныеВычетыНаДетейНДФЛ.Регистратор.Дата КАК Дата,
		|	СтандартныеВычетыНаДетейНДФЛ.Регистратор.Организация КАК Организация,
		|	СтандартныеВычетыНаДетейНДФЛ.Регистратор.Сотрудник КАК Сотрудник,
		|	СтандартныеВычетыНаДетейНДФЛ.КоличествоДетей
		|ИЗ
		|	РегистрСведений.СтандартныеВычетыНаДетейНДФЛ КАК СтандартныеВычетыНаДетейНДФЛ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(СтандартныеВычетыНаДетейНДФЛ.МесяцРегистрации) КАК МесяцРегистрации
		|		ИЗ
		|			РегистрСведений.СтандартныеВычетыНаДетейНДФЛ КАК СтандартныеВычетыНаДетейНДФЛ
		|		ГДЕ
		|			СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо = &ФизическоеЛицо) КАК ВложенныйЗапрос
		|		ПО СтандартныеВычетыНаДетейНДФЛ.МесяцРегистрации = ВложенныйЗапрос.МесяцРегистрации
		|			И (СтандартныеВычетыНаДетейНДФЛ.ФизическоеЛицо = &ФизическоеЛицо)
		|ГДЕ
		|	СтандартныеВычетыНаДетейНДФЛ.КоличествоДетей > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтандартныеВычетыНаДетейНДФЛ.КодВычета.Код,
		|	ДействуетДо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИмущественныйВычетМаксимум.Регистратор,
		|	ИмущественныйВычетМаксимум.Регистратор.ПрименятьВычетыС КАК ПрименятьВычетыС,
		|	ИмущественныйВычетМаксимум.Регистратор.РасходыНаСтроительствоПриобретение КАК РасходыНаСтроительствоПриобретение,
		|	ИмущественныйВычетМаксимум.Регистратор.ПроцентыПоКредитам КАК ПроцентыПоКредитам,
		|	ИмущественныйВычетМаксимум.Регистратор.ПроцентыПриПерекредитовании КАК ПроцентыПриПерекредитовании,
		|	ИмущественныйВычетМаксимум.Регистратор.КодНалоговогоОргана КАК КодНалоговогоОргана,
		|	ИмущественныйВычетМаксимум.Регистратор.Номер КАК Номер,
		|	ИмущественныйВычетМаксимум.Регистратор.Дата КАК Дата,
		|	ИмущественныйВычетМаксимум.Регистратор.Сотрудник КАК Сотрудник,
		|	ИмущественныйВычетМаксимум.Регистратор.Организация КАК Организация,
		|	ИмущественныйВычетМаксимум.Регистратор.НалоговыйПериод КАК НалоговыйПериод
		|ИЗ
		|	ИмущественныйВычетМаксимум КАК ИмущественныйВычетМаксимум";
		
		Запрос = Новый Запрос(ТЗ);
		Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		Для ИндексРезультата = 1 По 4 Цикл
			
			КлючиСтруктуры = "";
			
			Для Каждого Колонка Из МассивРезультатов[ИндексРезультата].Колонки Цикл
				КлючиСтруктуры = КлючиСтруктуры + ?(ПустаяСтрока(КлючиСтруктуры), "", ",") + Колонка.Имя;
			КонецЦикла;
			
			МассивСтруктур = Новый Массив;
			
			ВыборкаРезультата = МассивРезультатов[ИндексРезультата].Выбрать();
			
			Пока ВыборкаРезультата.Следующий() Цикл
				
				СтруктураСтрокиВыборкаРезультата = Новый Структура(КлючиСтруктуры);
				ЗаполнитьЗначенияСвойств(СтруктураСтрокиВыборкаРезультата, ВыборкаРезультата);
				
				МассивСтруктур.Добавить(СтруктураСтрокиВыборкаРезультата);
				
			КонецЦикла;
			
			ВозвращаемыйМассив.Добавить(МассивСтруктур);
			
		КонецЦикла;
		
	КонецЕсли;
		
	Возврат ВозвращаемыйМассив;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ДОПОЛНЕНИЯ ФОРМЫ МЕСТАМИ РАБОТЫ	

Процедура УстановитьПараметрыИнфоНадписиФормыФизЛица(Форма) Экспорт
	
	Если Форма.ИмеютсяАктуальныеСотрудники  Тогда
		
		Форма.ИнфоНадписьМестаРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 является нашим сотрудником. Ниже приведены места работы. Для перехода к полной информации о месте работы используйте соответствующую ссылку. Для заполнения информации о новом месте работы сотрудника используйте ссылку ""Новое место работы""';uk='%1 є нашим співробітником. Нижче наведені місця роботи. Для переходу до повної інформації про місце роботи використовуйте відповідне посилання. Для заповнення інформації про нове місце роботи співробітника використовуйте посилання ""Нове місце роботи""'"),
			Форма.ФизическоеЛицоСсылка);
																							
		Форма.МестаРаботыИнфоКартинка = БиблиотекаКартинок.Информация;
			
	ИначеЕсли Форма.ИмеютсяАктуальныеСотрудникиНеОтображаемые Тогда
		
		Форма.ИнфоНадписьМестаРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 является нашим сотрудником. Для заполнения информации о месте работы, должности и окладе сотрудника используйте ссылку ""Новое место работы""';uk='%1 є нашим співробітником. Для заповнення інформації про місце роботи, посаду й оклад співробітника використовуйте посилання ""Нове місце роботи""'"),
			Форма.ФизическоеЛицоСсылка);
			
		Форма.МестаРаботыИнфоКартинка = БиблиотекаКартинок.Информация;
			
	Иначе
		
		Форма.ИнфоНадписьМестаРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 не является нашим сотрудником. Для заполнения информации о месте работы, должности и окладе сотрудника используйте ссылку ""Новое место работы""';uk='%1 не є нашим співробітником. Для заповнення інформації про місце роботи, посаду й оклад співробітника використовуйте посилання ""Нове місце роботи""'"),
			Форма.ФизическоеЛицоСсылка);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НовоеМестоРаботы", "Видимость", Истина);
		Форма.МестаРаботыИнфоКартинка = БиблиотекаКартинок.Предупреждение;
		
	КонецЕсли;		
	
КонецПроцедуры	

Функция ЗаголовокКнопкиОткрытияСотрудника(ДанныеСотрудника, РеквизитыОрганизации, ТекущаяДата, ВыводитьПодробнуюИнформацию = Ложь) 
	
    Возврат СотрудникиФормыВнутренний.ЗаголовокКнопкиОткрытияСотрудника(ДанныеСотрудника, РеквизитыОрганизации, ТекущаяДата, ВыводитьПодробнуюИнформацию = Ложь);
	
КонецФункции

Функция ПоясняющаяНадписьКМестуРаботыСотрудника(ДанныеСотрудника, РеквизитыОрганизации,ДатаСведений) 
	
	Возврат СотрудникиФормыВнутренний.ПоясняющаяНадписьКМестуРаботыСотрудника(ДанныеСотрудника, РеквизитыОрганизации, ДатаСведений);
	
КонецФункции	

Процедура УстановитьВидимостьЭлементовФормыМестаРаботы(Форма, НомерСотрудника, ДанныеСотрудника)
	
	СотрудникиФормыВнутренний.УстановитьВидимостьЭлементовФормыМестаРаботы(Форма, НомерСотрудника, ДанныеСотрудника);
	
КонецПроцедуры

Функция ДругиеРабочиеМеста(ФизическоеЛицоСсылка, СотрудникИсключение = Неопределено) Экспорт
	
	Возврат СотрудникиФормыВнутренний.ДругиеРабочиеМеста(ФизическоеЛицоСсылка, СотрудникИсключение);
	
КонецФункции

Процедура ЗаполнитьФормуМестамиРаботы(Форма, ИмяГруппы, ИмяПоследнегоЭлементаГруппы = "", СотрудникИсключение = Неопределено, ВыводитьПодробнуюИнформацию = Ложь) Экспорт
	
	ЧислоОтображаемыхМестРаботы = 4;
	
	СоответствиеКомандСотрудникам = Новый Соответствие;
	
	ТаблицаПоРабочимМестам = ДругиеРабочиеМеста(Форма.ФизическоеЛицоСсылка, СотрудникИсключение);
	
	// Удаляем записи с не заполненной организацией
	МассивСтрокСПустойОрганизацией = ТаблицаПоРабочимМестам.НайтиСтроки(Новый Структура("Организация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка")));
	Для Каждого ЭлементМассивСтрокСПустойОрганизацией Из МассивСтрокСПустойОрганизацией Цикл
		ТаблицаПоРабочимМестам.Удалить(ЭлементМассивСтрокСПустойОрганизацией);
	КонецЦикла;
	
	Форма.КоличествоСотрудников = 0;
	Если ВыводитьПодробнуюИнформацию Тогда
		Форма.ИмеютсяСотрудники = Ложь;
	КонецЕсли;	
	
	Для Каждого СтрокаТаблицаПоРабочимМестам Из ТаблицаПоРабочимМестам Цикл
		Если Форма.КоличествоСотрудников >= ЧислоОтображаемыхМестРаботы Тогда
			Прервать;	
		КонецЕсли;
		
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицаПоРабочимМестам.Организация, "Наименование");
		 
		Форма.КоличествоСотрудников = Форма.КоличествоСотрудников + 1;
		
		Если ВыводитьПодробнуюИнформацию Тогда
			ДобавитьЭлементыФормыДляМестаРаботыПодробно(Форма, СтрокаТаблицаПоРабочимМестам, РеквизитыОрганизации, Форма.КоличествоСотрудников, ИмяГруппы, ИмяПоследнегоЭлементаГруппы);
		Иначе
			Если Не ЗначениеЗаполнено(РеквизитыОрганизации.Наименование) Тогда
				Продолжить;
			КонецЕсли;	
			ДобавитьЭлементыФормыДляМестаРаботыКратко(Форма, СтрокаТаблицаПоРабочимМестам, РеквизитыОрганизации, "ОткрытьФормуСотрудника" + Форма.КоличествоСотрудников, ИмяГруппы);
		КонецЕсли;	
			
		СоответствиеКомандСотрудникам.Вставить("ОткрытьФормуСотрудника" + Форма.КоличествоСотрудников, СтрокаТаблицаПоРабочимМестам.Сотрудник);
		
		Если ВыводитьПодробнуюИнформацию Тогда
			Форма.ИмеютсяАктуальныеСотрудники = (Форма.ИмеютсяАктуальныеСотрудники Или СтрокаТаблицаПоРабочимМестам.СотрудникАктуален);
			Форма.ИмеютсяСотрудники = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Если ТаблицаПоРабочимМестам.Количество() > ЧислоОтображаемыхМестРаботы Тогда
		ДобавитьКомандуДругиеМестаРаботы(Форма, ИмяГруппы, ВыводитьПодробнуюИнформацию);
	КонецЕсли;	
	
	Форма.СоответствиеКомандСотрудникам = Новый ФиксированноеСоответствие(СоответствиеКомандСотрудникам);
	
КонецПроцедуры	

Процедура ОбработкаИзмененияДанныхОРабочемМесте(Форма, Сотрудник, ИмяГруппы, ИмяПоследнегоЭлементаГруппы = "", ВыводитьПодробнуюИнформацию = Ложь) Экспорт 
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты") Тогда
		Возврат;
	КонецЕсли;	
	
	ЧислоОтображаемыхМестРаботы = 4;
	СоответствиеКомандСотрудникам = Новый Соответствие;
	
	ТаблицаРабочиеМеста = ДругиеРабочиеМеста(Форма.ФизическоеЛицоСсылка);
	
	ТаблицаПоРабочимМестам = ТаблицаРабочиеМеста.Скопировать(Новый Структура("Сотрудник", Сотрудник));
	
	
	Если ТаблицаПоРабочимМестам.Количество() > 0 Тогда
		
		СтрокаТаблицаПоРабочимМестам = ТаблицаПоРабочимМестам[0];
		
		ИмяКоманды = ПолучитьИмяКомандыОткрытияФормыСотрудника(Сотрудник, Форма.СоответствиеКомандСотрудникам);
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицаПоРабочимМестам.Организация) Тогда
			
			Если ИмяКоманды <> Неопределено Тогда
				
				УдалитьМестоРаботыВФорме(Форма, ИмяКоманды, ЧислоОтображаемыхМестРаботы, ВыводитьПодробнуюИнформацию);
				
			КонецЕсли;
			
		Иначе
			
			РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицаПоРабочимМестам.Организация, "Наименование");
			
			Если ИмяКоманды = Неопределено Тогда
				
				СоответствиеКомандСотрудникам = Новый Соответствие;
				Если Форма.КоличествоСотрудников < ЧислоОтображаемыхМестРаботы Тогда 
					Форма.КоличествоСотрудников = Форма.КоличествоСотрудников + 1;
					
					Если ВыводитьПодробнуюИнформацию Тогда
						ДобавитьЭлементыФормыДляМестаРаботыПодробно(Форма, СтрокаТаблицаПоРабочимМестам, РеквизитыОрганизации, Форма.КоличествоСотрудников, ИмяГруппы, ИмяПоследнегоЭлементаГруппы);
					Иначе
						ДобавитьЭлементыФормыДляМестаРаботыКратко(Форма, СтрокаТаблицаПоРабочимМестам, РеквизитыОрганизации, "ОткрытьФормуСотрудника" + Форма.КоличествоСотрудников, ИмяГруппы);
					КонецЕсли;
					СоответствиеКомандСотрудникам.Вставить("ОткрытьФормуСотрудника" + Форма.КоличествоСотрудников, СтрокаТаблицаПоРабочимМестам.Сотрудник);
					
				ИначеЕсли ВыводитьПодробнуюИнформацию Тогда
					СместитьМестаРаботыВФорме(Форма, СтрокаТаблицаПоРабочимМестам, РеквизитыОрганизации, ЧислоОтображаемыхМестРаботы, Форма.СоответствиеКомандСотрудникам);
					Если Форма.Команды.Найти("ДругиеМестаРаботы") = Неопределено Тогда
						ДобавитьКомандуДругиеМестаРаботы(Форма, ИмяГруппы, ВыводитьПодробнуюИнформацию = Ложь);
					КонецЕсли;
				КонецЕсли;	
				
				Для Каждого КлючЗначение Из Форма.СоответствиеКомандСотрудникам Цикл
					СоответствиеКомандСотрудникам.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);		
				КонецЦикла;	
				
				Форма.СоответствиеКомандСотрудникам = Новый ФиксированноеСоответствие(СоответствиеКомандСотрудникам);
				
			Иначе
				Форма.Элементы[ИмяКоманды].Заголовок = ЗаголовокКнопкиОткрытияСотрудника(СтрокаТаблицаПоРабочимМестам, РеквизитыОрганизации, НачалоДня(ТекущаяДатаСеанса()), ВыводитьПодробнуюИнформацию);
				НомерСотрудника = СтрЗаменить(ИмяКоманды, "ОткрытьФормуСотрудника", "");
				Если ВыводитьПодробнуюИнформацию Тогда
					СтруктураИнфоНадписи = ПоясняющаяНадписьКМестуРаботыСотрудника(СтрокаТаблицаПоРабочимМестам, РеквизитыОрганизации, ТекущаяДатаСеанса());	
					Для Каждого КлючЗначение Из СтруктураИнфоНадписи Цикл
						Форма[КлючЗначение.Ключ + НомерСотрудника] = КлючЗначение.Значение;
					КонецЦикла;	
					Форма["СотрудникАктуален" + НомерСотрудника] = СтрокаТаблицаПоРабочимМестам.СотрудникАктуален;
				КонецЕсли;	
			КонецЕсли;	
			
			Если ВыводитьПодробнуюИнформацию Тогда
				Форма.ИмеютсяАктуальныеСотрудники = Ложь;
				Для Сч = 1 По Форма.КоличествоСотрудников Цикл
					Если Форма["СотрудникАктуален" + Сч] Тогда
						Форма.ИмеютсяАктуальныеСотрудники = Истина;
					КонецЕсли;	
				КонецЦикла;
				УстановитьПараметрыИнфоНадписиФормыФизЛица(Форма);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура УдалитьМестоРаботыВФорме(Форма, ИмяКоманды, ЧислоОтображаемыхМестРаботы, ВыводитьПодробнуюИнформацию)

	НомерСотрудника = Число(СтрЗаменить(ИмяКоманды, "ОткрытьФормуСотрудника", ""));
	
	СоответствиеКомандСотрудникам = Новый Соответствие;
	Для Каждого КлючЗначение Из Форма.СоответствиеКомандСотрудникам Цикл
		НомерСотрудникаСоответствия = Число(СтрЗаменить(КлючЗначение.Ключ, "ОткрытьФормуСотрудника", ""));
		Если НомерСотрудникаСоответствия < НомерСотрудника Тогда
			СоответствиеКомандСотрудникам.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);		
		КонецЕсли; 
	КонецЦикла;	
	
	КоличествоСотрудников = Форма.КоличествоСотрудников;
	
	Если НомерСотрудника < КоличествоСотрудников Тогда
		
		Для Сч = НомерСотрудника По КоличествоСотрудников - 1 Цикл
			Если ВыводитьПодробнуюИнформацию Тогда
				Форма["ИнфоНадписьПериодРаботы" + Строка(Сч)] = Форма["ИнфоНадписьПериодРаботы" + Строка(Сч + 1)]; 
				Форма["ИнфоНадписьОрганизация" + Строка(Сч)]  = Форма["ИнфоНадписьОрганизация"+ Строка(Сч + 1)]; 
				Форма["ИнфоНадписьДолжность" + Строка(Сч)]	  = Форма["ИнфоНадписьДолжность" + Строка(Сч + 1)]; 
				Форма["ИнфоНадписьОклад" + Строка(Сч)]  = Форма["ИнфоНадписьОклад" + Строка(Сч + 1)]; 
				Форма["СотрудникАктуален" + Строка(Сч)] = Форма["СотрудникАктуален" + Строка(Сч + 1)];
			КонецЕсли;
			Форма.Элементы["ОткрытьФормуСотрудника" + Строка(Сч)].Заголовок = Форма.Элементы["ОткрытьФормуСотрудника" + Строка(Сч + 1)].Заголовок;
			СоответствиеКомандСотрудникам.Вставить("ОткрытьФормуСотрудника" + Строка(Сч),  Форма.СоответствиеКомандСотрудникам["ОткрытьФормуСотрудника" + Строка(Сч + 1)]);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВыводитьПодробнуюИнформацию Тогда
		Форма.Элементы.Удалить(Форма.Элементы.Найти("ДанныеОРабочемМестеГруппа" + КоличествоСотрудников));
		Форма.Команды.Удалить(Форма.Команды.Найти("ОткрытьФормуСотрудника" + КоличествоСотрудников));
		
		МассивРеквизитов = Новый Массив;
		МассивРеквизитов.Добавить("СотрудникАктуален" + КоличествоСотрудников);
		МассивРеквизитов.Добавить("ИнфоНадписьПериодРаботы" + КоличествоСотрудников);
		МассивРеквизитов.Добавить("ИнфоНадписьОрганизация" + КоличествоСотрудников);
		МассивРеквизитов.Добавить("ИнфоНадписьДолжность" + КоличествоСотрудников);
		МассивРеквизитов.Добавить("ИнфоНадписьОклад" + КоличествоСотрудников);
		
		Форма.ИзменитьРеквизиты(,МассивРеквизитов);
		
	Иначе	
		Форма.Элементы.Удалить(Форма.Элементы.Найти("ОткрытьФормуСотрудника" + КоличествоСотрудников + "Группа"));
		Форма.Команды.Удалить(Форма.Команды.Найти("ОткрытьФормуСотрудника" + КоличествоСотрудников));
	КонецЕсли;
	
	Форма.КоличествоСотрудников = КоличествоСотрудников - 1;
	Форма.СоответствиеКомандСотрудникам = Новый ФиксированноеСоответствие(СоответствиеКомандСотрудникам);
	Если Форма.КоличествоСотрудников < 4 и Форма.Команды.Найти("ДругиеМестаРаботы") <> Неопределено Тогда
		Если Форма.Команды.Найти("ДругиеМестаРаботы") Тогда
			Форма.Команды.Удалить("ДругиеМестаРаботы");
		КонецЕсли; 
		Если Форма.Элементы.Найти("ДругиеМестаРаботыКнопка") Тогда
			Форма.Элементы.Удалить("ДругиеМестаРаботыКнопка");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура СместитьМестаРаботыВФорме(Форма, ДанныеСотрудника, РеквизитыОрганизации, ЧислоОтображаемыхМестРаботы, СоответствиеКомандСотрудникамДанныеФормы)
	СоответствиеКомандСотрудникам = Новый Соответствие;
	Форма.ИмеютсяАктуальныеСотрудникиНеОтображаемые = Форма.ИмеютсяАктуальныеСотрудникиНеОтображаемые Или Форма["СотрудникАктуален" + Строка(ЧислоОтображаемыхМестРаботы)]; 
	Для Сч = 0 По ЧислоОтображаемыхМестРаботы - 2 Цикл
		НомерМестаРаботы = ЧислоОтображаемыхМестРаботы - Сч;
		Форма["ИнфоНадписьПериодРаботы" + Строка(НомерМестаРаботы)] = Форма["ИнфоНадписьПериодРаботы" + Строка(НомерМестаРаботы - 1)]; 
		Форма["ИнфоНадписьОрганизация" + Строка(НомерМестаРаботы)] = Форма["ИнфоНадписьОрганизация"+ Строка(НомерМестаРаботы - 1)]; 
		Форма["ИнфоНадписьДолжность" + Строка(НомерМестаРаботы)] = Форма["ИнфоНадписьДолжность" + Строка(НомерМестаРаботы - 1)]; 
		Форма["ИнфоНадписьОклад" + Строка(НомерМестаРаботы)] = Форма["ИнфоНадписьОклад" + Строка(НомерМестаРаботы - 1)]; 
		Форма["СотрудникАктуален" + Строка(НомерМестаРаботы)] = Форма["СотрудникАктуален" + Строка(НомерМестаРаботы - 1)];
		Форма.Элементы["ОткрытьФормуСотрудника" + Строка(НомерМестаРаботы)].Заголовок = Форма.Элементы["ОткрытьФормуСотрудника" + Строка(НомерМестаРаботы - 1)].Заголовок;
		СоответствиеКомандСотрудникам.Вставить("ОткрытьФормуСотрудника" + Строка(НомерМестаРаботы),  СоответствиеКомандСотрудникамДанныеФормы["ОткрытьФормуСотрудника" + Строка(НомерМестаРаботы - 1)]);		
	КонецЦикла;	
	
	СтруктураИнфоНадписи = ПоясняющаяНадписьКМестуРаботыСотрудника(ДанныеСотрудника, РеквизитыОрганизации, ТекущаяДатаСеанса());
	Форма.Элементы["ОткрытьФормуСотрудника1"].Заголовок = ЗаголовокКнопкиОткрытияСотрудника(ДанныеСотрудника, РеквизитыОрганизации, НачалоДня(ТекущаяДатаСеанса()), Истина);

	Для Каждого КлючЗначение Из СтруктураИнфоНадписи Цикл
		Форма[КлючЗначение.Ключ + "1"] = КлючЗначение.Значение;
	КонецЦикла;
	Форма["СотрудникАктуален1"] = ДанныеСотрудника.СотрудникАктуален;
	СоответствиеКомандСотрудникам.Вставить("ОткрытьФормуСотрудника1", ДанныеСотрудника.Сотрудник);
	
	СоответствиеКомандСотрудникамДанныеФормы = Новый ФиксированноеСоответствие(СоответствиеКомандСотрудникам); 	
КонецПроцедуры	

Функция ПолучитьИмяКомандыОткрытияФормыСотрудника(Сотрудник, СоответствиеКомандСотрудникам)
	Для Каждого КлючЗначение Из СоответствиеКомандСотрудникам Цикл
		Если КлючЗначение.Значение = Сотрудник Тогда
			Возврат КлючЗначение.Ключ;
		КонецЕсли;	
	КонецЦикла;	
	Возврат Неопределено;
КонецФункции	

Процедура ДобавитьЭлементыФормыДляМестаРаботыПодробно(Форма, ДанныеСотрудника, РеквизитыОрганизации, НомерСотрудника, ИмяГруппы, ИмяПоследнегоЭлементаГруппы = "")
		
	МассивРеквизитов = Новый Массив;
	
	РеквизитСотрудникАктуален = Новый РеквизитФормы("СотрудникАктуален" + НомерСотрудника, Новый ОписаниеТипов("Булево"));
	МассивРеквизитов.Добавить(РеквизитСотрудникАктуален);
		
	РеквизитИнфоНадписьПериодРаботы = Новый РеквизитФормы("ИнфоНадписьПериодРаботы" + НомерСотрудника, Новый ОписаниеТипов("Строка"));
	МассивРеквизитов.Добавить(РеквизитИнфоНадписьПериодРаботы);
	
	РеквизитИнфоНадписьОрганизация = Новый РеквизитФормы("ИнфоНадписьОрганизация" + НомерСотрудника, Новый ОписаниеТипов("Строка"));
	РеквизитИнфоНадписьОрганизация.Заголовок = НСтр("ru='Организация';uk='Організація'");
	МассивРеквизитов.Добавить(РеквизитИнфоНадписьОрганизация);
	
	РеквизитИнфоНадписьДолжность = Новый РеквизитФормы("ИнфоНадписьДолжность" + НомерСотрудника, Новый ОписаниеТипов("Строка"));
	РеквизитИнфоНадписьДолжность.Заголовок = НСтр("ru='Должность';uk='Посада'");
	МассивРеквизитов.Добавить(РеквизитИнфоНадписьДолжность);
	
	РеквизитИнфоНадписьОклад = Новый РеквизитФормы("ИнфоНадписьОклад" + НомерСотрудника, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	РеквизитИнфоНадписьОклад.Заголовок =  НСтр("ru='Оклад';uk='Оклад'");
	МассивРеквизитов.Добавить(РеквизитИнфоНадписьОклад);

	Форма.ИзменитьРеквизиты(МассивРеквизитов);
	
	Форма[РеквизитСотрудникАктуален.Имя] = ДанныеСотрудника.СотрудникАктуален;
	
	Команда = Форма.Команды.Добавить("ОткрытьФормуСотрудника" + НомерСотрудника);
	Команда.Действие  = "Подключаемый_ОткрытьФормуСотрудника";
	Команда.Отображение  =  ОтображениеКнопки.Авто;
	
	ПоследнийЭлементГруппы = Форма.Элементы.Найти(ИмяПоследнегоЭлементаГруппы);
	
	ГруппаФормыДанныеОРабочемМесте = Форма.Элементы.Найти("ДанныеОРабочемМестеГруппаВертикальная" + НомерСотрудника);
	Если ГруппаФормыДанныеОРабочемМесте = Неопределено Тогда
		
		Если ПоследнийЭлементГруппы = Неопределено Тогда 
			ГруппаФормыДанныеОРабочемМесте = Форма.Элементы.Вставить("ДанныеОРабочемМестеГруппаВертикальная" + НомерСотрудника, Тип("ГруппаФормы"), Форма.Элементы[ИмяГруппы]);
		Иначе 	
			ГруппаФормыДанныеОРабочемМесте = Форма.Элементы.Вставить("ДанныеОРабочемМестеГруппаВертикальная" + НомерСотрудника, Тип("ГруппаФормы"), Форма.Элементы[ИмяГруппы], ПоследнийЭлементГруппы);
		КонецЕсли;
		
	КонецЕсли;
	
	ГруппаФормыДанныеОРабочемМесте.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаФормыДанныеОРабочемМесте.ОтображатьЗаголовок = Ложь;
	ГруппаФормыДанныеОРабочемМесте.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	ПолеНадписи =  Форма.Элементы.Добавить("ИнфоНадписьПериодРаботы" + НомерСотрудника, Тип("ПолеФормы"), ГруппаФормыДанныеОРабочемМесте);
	ПолеНадписи.ПутьКДанным = РеквизитИнфоНадписьПериодРаботы.Имя;	
	ПолеНадписи.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеНадписи.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	ПолеНадписи.Шрифт = Новый Шрифт(,, Истина);
	ПолеНадписи.РастягиватьПоГоризонтали = Истина;
	
	ГруппаФормыДанныеОРабочемМестеГоризонтальная = Форма.Элементы.Вставить("ДанныеОРабочемМестеГруппа" + НомерСотрудника, Тип("ГруппаФормы"), ГруппаФормыДанныеОРабочемМесте);
	ГруппаФормыДанныеОРабочемМестеГоризонтальная.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаФормыДанныеОРабочемМестеГоризонтальная.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаФормыДанныеОРабочемМестеГоризонтальная.ОтображатьЗаголовок = Ложь;
	ГруппаФормыДанныеОРабочемМестеГоризонтальная.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаФормыДанныеОРабочемМестеГоризонтальная.ШиринаПодчиненныхЭлементов  = ШиринаПодчиненныхЭлементовФормы.Одинаковая;
	ГруппаФормыДанныеОРабочемМестеГоризонтальная.РастягиватьПоВертикали = Ложь;
	ГруппаФормыДанныеОРабочемМестеГоризонтальная.РастягиватьПоГоризонтали = Ложь;
	
	Кнопка = Форма.Элементы.Вставить(Команда.Имя, Тип("КнопкаФормы"), ГруппаФормыДанныеОРабочемМестеГоризонтальная);
	Кнопка.ИмяКоманды = Команда.Имя;
	Кнопка.Вид = ВидКнопкиФормы.Гиперссылка;
	Кнопка.Высота = 2;
	Кнопка.Заголовок = ЗаголовокКнопкиОткрытияСотрудника(ДанныеСотрудника, РеквизитыОрганизации, НачалоДня(ТекущаяДатаСеанса()), Истина);
	
	ГруппаФормы = Форма.Элементы.Вставить("ГруппаИнфоНадписи" + НомерСотрудника, Тип("ГруппаФормы"), ГруппаФормыДанныеОРабочемМестеГоризонтальная, Кнопка);
	ГруппаФормы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаФормы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаФормы.ОтображатьЗаголовок = Ложь;
	ГруппаФормы.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаФормы.ШиринаПодчиненныхЭлементов  = ШиринаПодчиненныхЭлементовФормы.Авто;
	ГруппаФормы.РастягиватьПоВертикали = Ложь;
	ГруппаФормы.РастягиватьПоГоризонтали = Ложь;
	
	ПолеНадписи =  Форма.Элементы.Вставить("ИнфоНадписьОрганизация" + НомерСотрудника, Тип("ПолеФормы"), ГруппаФормы);
	ПолеНадписи.ПутьКДанным = РеквизитИнфоНадписьОрганизация.Имя;	
	ПолеНадписи.Вид = ВидПоляФормы.ПолеВвода;
	ПолеНадписи.ТолькоПросмотр = Истина;
	ПолеНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
	ПолеНадписи.РастягиватьПоГоризонтали = Истина;
	
	ПолеНадписи =  Форма.Элементы.Вставить("ИнфоНадписьДолжность" + НомерСотрудника, Тип("ПолеФормы"), ГруппаФормы);
	ПолеНадписи.ПутьКДанным = РеквизитИнфоНадписьДолжность.Имя;	
	ПолеНадписи.Вид = ВидПоляФормы.ПолеВвода;
	ПолеНадписи.ТолькоПросмотр = Истина;
	ПолеНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
	ПолеНадписи.РастягиватьПоГоризонтали = Истина;
	
	Если ДанныеСотрудника.Владелец().Колонки.Найти("ТекущаяТарифнаяСтавка") <> Неопределено Тогда
		ПолеНадписи =  Форма.Элементы.Вставить("ИнфоНадписьОклад" + НомерСотрудника, Тип("ПолеФормы"), ГруппаФормы);
		ПолеНадписи.ПутьКДанным = РеквизитИнфоНадписьОклад.Имя;	
		ПолеНадписи.Вид = ВидПоляФормы.ПолеВвода;
		ПолеНадписи.ТолькоПросмотр = Истина;
		ПолеНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		ПолеНадписи.Ширина = 12;
		ПолеНадписи.РастягиватьПоГоризонтали = Истина;
	КонецЕсли;
	
	СтруктураИнфоНадписи = ПоясняющаяНадписьКМестуРаботыСотрудника(ДанныеСотрудника, РеквизитыОрганизации, ТекущаяДатаСеанса());
	
	Для Каждого КлючЗначение Из СтруктураИнфоНадписи Цикл
		Форма[КлючЗначение.Ключ + НомерСотрудника] = КлючЗначение.Значение;
	КонецЦикла;
	
	УстановитьВидимостьЭлементовФормыМестаРаботы(Форма, НомерСотрудника, ДанныеСотрудника);
	
КонецПроцедуры	

Процедура ДобавитьЭлементыФормыДляМестаРаботыКратко(Форма, ДанныеСотрудника, РеквизитыОрганизации, ИмяКоманды, ИмяГруппы)
	
	Команда = Форма.Команды.Добавить(ИмяКоманды);
	Команда.Действие  = "Подключаемый_ОткрытьФормуСотрудника";
	Команда.Отображение  =  ОтображениеКнопки.Авто;
	 
	ГруппаФормы = Форма.Элементы.Вставить(Команда.Имя + "Группа", Тип("ГруппаФормы"), Форма.Элементы[ИмяГруппы]);
	ГруппаФормы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаФормы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаФормы.ОтображатьЗаголовок = Ложь;
	ГруппаФормы.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаФормы.ШиринаПодчиненныхЭлементов  = ШиринаПодчиненныхЭлементовФормы.Одинаковая;
	ГруппаФормы.РастягиватьПоВертикали = Ложь;
	ГруппаФормы.РастягиватьПоГоризонтали = Ложь;
	
	Кнопка = Форма.Элементы.Вставить(Команда.Имя, Тип("КнопкаФормы"), ГруппаФормы);
	Кнопка.ИмяКоманды = Команда.Имя;
	Кнопка.Вид = ВидКнопкиФормы.Гиперссылка;
	Кнопка.Высота = 2;
	Кнопка.ВысотаЗаголовка = 2;
	Кнопка.Заголовок = ЗаголовокКнопкиОткрытияСотрудника(ДанныеСотрудника, РеквизитыОрганизации, НачалоДня(ТекущаяДатаСеанса()), Ложь);
	
КонецПроцедуры	

Процедура ДобавитьКомандуДругиеМестаРаботы(Форма, ИмяГруппы, ВыводитьПодробнуюИнформацию = Ложь)
	Команда = Форма.Команды.Добавить("ДругиеМестаРаботы");
	Команда.Действие  = "Подключаемый_ДругиеМестаРаботы";
	Команда.Заголовок = НСтр("ru='Другие места работы';uk='Інші місця роботи'");
	Команда.Отображение  =  ОтображениеКнопки.Авто;	
	
	Если ВыводитьПодробнуюИнформацию Тогда 
		Кнопка = Форма.Элементы.Вставить("ДругиеМестаРаботыКнопка", Тип("КнопкаФормы"), Форма.Элементы[ИмяГруппы], Форма.Элементы.НовоеМестоРаботы);
	Иначе	
		Кнопка = Форма.Элементы.Вставить("ДругиеМестаРаботыКнопка", Тип("КнопкаФормы"), Форма.Элементы[ИмяГруппы]);
	КонецЕсли;	
	
	Кнопка.Вид = ВидКнопкиФормы.Гиперссылка;
	Кнопка.ИмяКоманды  = Команда.Имя;
КонецПроцедуры	

Процедура ПроверитьНеобходимостьНастройкиРежимовРаботыФормыСотрудника(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	СотрудникиФормыВнутренний.ПроверитьНеобходимостьНастройкиРежимовРаботыФормыСотрудника(Источник, Отказ);
	
КонецПроцедуры

Процедура УстановитьРежимыРаботыФормыСотрудника(Источник, Отказ) Экспорт
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЗначениеИзменено") Тогда

		СотрудникиФормы.ОбновитьРежимыРаботыФормы();
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьРежимыРаботыФормы() Экспорт
	
	СотрудникиФормыВнутренний.ОбновитьРежимыРаботыФормы();
	
КонецПроцедуры

Функция АдресДанныхДополнительнойФормы(ОписаниеДополнительнойФормы, Форма) Экспорт
	
	ПомещаемыеДанные = Новый Структура;
	ПомещаемыеДанные.Вставить("ДополнительныеДанные", Новый Структура);
	ПомещаемыеДанные.Вставить("РеквизитыОбъекта", Новый Структура);
	
	Для каждого РедактируемыйРеквизит Из ОписаниеДополнительнойФормы.ДополнительныеДанные Цикл
		
		Если ТипЗнч(Форма[РедактируемыйРеквизит.Ключ]) = Тип("ДанныеФормыСтруктура") Тогда
			
			ПомещаемоеЗначение = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
				Форма[РедактируемыйРеквизит.Ключ], Метаданные.РегистрыСведений[РедактируемыйРеквизит.Ключ]);
			
		ИначеЕсли ТипЗнч(Форма[РедактируемыйРеквизит.Ключ]) = Тип("ДанныеФормыСтруктураСКоллекцией") Тогда
			
			Таблица = Форма[РедактируемыйРеквизит.Ключ].Выгрузить();
			ПомещаемоеЗначение = ОбщегоНазначения.ТаблицаЗначенийВМассив(Таблица);
			
		Иначе
			ПомещаемоеЗначение = Форма[РедактируемыйРеквизит.Ключ];
		КонецЕсли;
		
		ПомещаемыеДанные.ДополнительныеДанные.Вставить(РедактируемыйРеквизит.Ключ, ПомещаемоеЗначение);
		
	КонецЦикла;
	
	Для каждого РедактируемыйРеквизит Из ОписаниеДополнительнойФормы.РеквизитыОбъекта Цикл
		
		Данные = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, РедактируемыйРеквизит.Значение);
		Если ТипЗнч(Данные) = Тип("ДанныеФормыКоллекция") Тогда
			РедактируемыеДанные = ОбщегоНазначения.ТаблицаЗначенийВМассив(Данные.Выгрузить());
		Иначе
			РедактируемыеДанные = Данные;
		КонецЕсли;
		
		ПомещаемыеДанные.РеквизитыОбъекта.Вставить(РедактируемыйРеквизит.Ключ, РедактируемыеДанные);
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ПомещаемыеДанные, Форма.УникальныйИдентификатор);
	
КонецФункции

