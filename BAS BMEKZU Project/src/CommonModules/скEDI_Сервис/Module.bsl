Процедура ЗарегистрироватьПечатнуюФорму_Сервер() Экспорт
	
	ИДКонфигурации = скEDI_НастройкиПодКонфигурацию.ИДКонфигурации();
	Попытка
		
		ЕстьСправочникДополнительныеОтчетыИОбработки = Метаданные.НайтиПоПолномуИмени("Справочник.ДополнительныеОтчетыИОбработки");
		ЕстьСправочникВнешниеОбработки = Метаданные.НайтиПоПолномуИмени("Справочник.ВнешниеОбработки");
		
		
		Если ЕстьСправочникДополнительныеОтчетыИОбработки <> Неопределено Тогда
			МакетПечатнаяФорма = ПолучитьОбщийМакет("скEDI_ВнешняяПечатнаяФормаЭлектронногоДокумента_УФ");		
			Попытка
				ПечатнаяФорма = Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();
			Исключение
				Сообщить(НСтр("ru = 'Не удалось зарегистрировать печатную форму ""Электронный документ"" по причине: '; uk = 'Не вдалося зареєструвати друковану форму ""Електронний документ"" з причини: '") + ОписаниеОшибки());
				Возврат;	
			КонецПопытки;
			ПечатнаяФорма.Вид		   = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма;
			ПечатнаяФорма.ИмяОбъекта   = "Электронный документ";
			ПечатнаяФорма.Наименование = "Электронный документ";
			ПечатнаяФорма.Комментарий  = "Печатная форма Электронного документа (FlyDoc)";
			ПечатнаяФорма.ИспользоватьДляФормыОбъекта = Истина;
			ПечатнаяФорма.ИспользоватьДляФормыСписка  = Истина;
			ПечатнаяФорма.ХранилищеОбработки = Новый ХранилищеЗначения(МакетПечатнаяФорма);
			
			Если ИДКонфигурации = "БП20" Тогда
				лпНазначение = Новый Массив;
				лпНазначение.Добавить("Документ.НалоговаяНакладная");
				лпНазначение.Добавить("Документ.Приложение2КНалоговойНакладной");
				лпНазначение.Добавить("Документ.СчетНаОплатуПокупателю");
				лпНазначение.Добавить("Документ.РеализацияТоваровУслуг");
				лпНазначение.Добавить("Документ.СчетНаОплатуПоставщика");
				лпНазначение.Добавить("Документ.ПоступлениеТоваровУслуг");
				лпНазначение.Добавить("Документ.АктСверкиВзаиморасчетов");
				лпНазначение.Добавить("Справочник.ДоговорыКонтрагентов");
			ИначеЕсли ИДКонфигурации = "БП20ИНАГРО" Тогда
				лпНазначение = Новый Массив;
				лпНазначение.Добавить("Документ.НалоговаяНакладная");
				лпНазначение.Добавить("Документ.Приложение2КНалоговойНакладной");
				лпНазначение.Добавить("Документ.СчетНаОплатуПокупателю");
				лпНазначение.Добавить("Документ.РеализацияТоваровУслуг");
				лпНазначение.Добавить("Документ.СчетНаОплатуПоставщика");
				лпНазначение.Добавить("Документ.ПоступлениеТоваровУслуг");
				лпНазначение.Добавить("Документ.АктСверкиВзаиморасчетов");
				лпНазначение.Добавить("Справочник.ДоговорыКонтрагентов");
			ИначеЕсли ИДКонфигурации = "BASУТ" ИЛИ ИДКонфигурации = "BASКУП" ИЛИ ИДКонфигурации = "BASERP" Тогда
				лпНазначение = Новый Массив;
				лпНазначение.Добавить("Документ.НалоговаяНакладная");
				лпНазначение.Добавить("Документ.Приложение2КНалоговойНакладной");
				лпНазначение.Добавить("Документ.СчетНаОплатуКлиенту");
				лпНазначение.Добавить("Документ.ЗаказКлиента");
				лпНазначение.Добавить("Документ.ЗаказПоставщику");
				лпНазначение.Добавить("Документ.РеализацияТоваровУслуг");				
				лпНазначение.Добавить("Документ.ПоступлениеТоваровУслуг");
				лпНазначение.Добавить("Документ.СверкаВзаиморасчетов");
				лпНазначение.Добавить("Справочник.ДоговорыКонтрагентов");
			ИначеЕсли ИДКонфигурации = "УНФ" Тогда
				лпНазначение = Новый Массив;
				лпНазначение.Добавить("Документ.НалоговаяНакладная");
				лпНазначение.Добавить("Документ.Приложение2КНалоговойНакладной");
				лпНазначение.Добавить("Документ.СчетНаОплату");
				лпНазначение.Добавить("Документ.ЗаказПокупателя");
				лпНазначение.Добавить("Документ.ЗаказПоставщику");
				лпНазначение.Добавить("Документ.РасходнаяНакладная");				
				лпНазначение.Добавить("Документ.ПриходнаяНакладная");
				лпНазначение.Добавить("Документ.СверкаВзаиморасчетов");
				лпНазначение.Добавить("Справочник.ДоговорыКонтрагентов");
			КонецЕсли;
			
			Для Каждого ОписаниеНазначения Из лпНазначение Цикл
				ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОписаниеНазначения);
				Если ОбъектМетаданных = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ОбъектНазначенияСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
				СтрокаНазначения = ПечатнаяФорма.Назначение.Найти(ОбъектНазначенияСсылка, "ОбъектНазначения");
				Если СтрокаНазначения = Неопределено Тогда
					СтрокаНазначения = ПечатнаяФорма.Назначение.Добавить();
					СтрокаНазначения.ОбъектНазначения = ОбъектНазначенияСсылка;
				КонецЕсли;
			КонецЦикла;
			
			НоваяКоманда = ПечатнаяФорма.Команды.Добавить();
			НоваяКоманда.Представление 			= "Электронный документ";  
			НоваяКоманда.Идентификатор 			= "Печать";
			НоваяКоманда.ПоказыватьОповещение 	= Истина;
			НоваяКоманда.Модификатор 			= "Печать"; 
			НоваяКоманда.ВариантЗапуска 		= ПредопределенноеЗначение("Перечисление.СпособыВызоваДополнительныхОбработок.ВызовКлиентскогоМетода");
			ПечатнаяФорма.Записать();
		ИначеЕсли ЕстьСправочникВнешниеОбработки <> Неопределено Тогда
			МакетПечатнаяФорма = ПолучитьОбщийМакет("скEDI_ВнешняяПечатнаяФормаЭлектронногоДокумента");
			ПечатнаяФорма = Справочники.ВнешниеОбработки.СоздатьЭлемент();
			ПечатнаяФорма.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма;
			ПечатнаяФорма.Наименование = "Электронный документ";
			ПечатнаяФорма.Комментарий  = "Печатная форма Электронного документа (FlyDoc)";
			ПечатнаяФорма.ХранилищеВнешнейОбработки = Новый ХранилищеЗначения(МакетПечатнаяФорма);
			// сделать укр/рус
			Если ИДКонфигурации = "УТП" 
				ИЛИ ИДКонфигурации = "УПП" Тогда
				НоваяСтрока = ПечатнаяФорма.Принадлежность.Добавить();
				НоваяСтрока.ПредставлениеОбъекта = "Налоговая накладная";
				НоваяСтрока.СсылкаОбъекта = Документы.НалоговаяНакладная.ПустаяСсылка();
				НоваяСтрока = ПечатнаяФорма.Принадлежность.Добавить();
				НоваяСтрока.ПредставлениеОбъекта = "Приложение 2 к НН";
				НоваяСтрока.СсылкаОбъекта = Документы.Приложение2КНалоговойНакладной.ПустаяСсылка();
				НоваяСтрока = ПечатнаяФорма.Принадлежность.Добавить();
				НоваяСтрока.ПредставлениеОбъекта = "Счет на оплату покупателю";
				НоваяСтрока.СсылкаОбъекта = Документы.СчетНаОплатуПокупателю.ПустаяСсылка();
				НоваяСтрока = ПечатнаяФорма.Принадлежность.Добавить();
				НоваяСтрока.ПредставлениеОбъекта = "Заказ покупателя";
				НоваяСтрока.СсылкаОбъекта = Документы.ЗаказПокупателя.ПустаяСсылка();
				НоваяСтрока = ПечатнаяФорма.Принадлежность.Добавить();
				НоваяСтрока.ПредставлениеОбъекта = "Реализация Товаров и услуг";
				НоваяСтрока.СсылкаОбъекта = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
				НоваяСтрока = ПечатнаяФорма.Принадлежность.Добавить();
				НоваяСтрока.ПредставлениеОбъекта = "Счет на оплату поставщика";
				НоваяСтрока.СсылкаОбъекта = Документы.СчетНаОплатуПоставщика.ПустаяСсылка();
				НоваяСтрока = ПечатнаяФорма.Принадлежность.Добавить();
				НоваяСтрока.ПредставлениеОбъекта = "Заказ поставщику";
				НоваяСтрока.СсылкаОбъекта = Документы.ЗаказПоставщику.ПустаяСсылка();
				НоваяСтрока = ПечатнаяФорма.Принадлежность.Добавить();
				НоваяСтрока.ПредставлениеОбъекта = "Поступление товаров и услуг";
				НоваяСтрока.СсылкаОбъекта = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
				НоваяСтрока = ПечатнаяФорма.Принадлежность.Добавить();
				НоваяСтрока.ПредставлениеОбъекта = "Акт сверки взаиморасчетов";
				НоваяСтрока.СсылкаОбъекта = Документы.АктСверкиВзаиморасчетов.ПустаяСсылка();
				НоваяСтрока = ПечатнаяФорма.Принадлежность.Добавить();
				НоваяСтрока.ПредставлениеОбъекта = "Договоры контрагентов";
				НоваяСтрока.СсылкаОбъекта = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			ИначеЕсли ИДКонфигурации = "БП" Тогда
				НоваяСтрока = ПечатнаяФорма.Принадлежность.Добавить();
				НоваяСтрока.ПредставлениеОбъекта = "Налоговая накладная";
				НоваяСтрока.СсылкаОбъекта = Документы.НалоговаяНакладная.ПустаяСсылка();
				НоваяСтрока = ПечатнаяФорма.Принадлежность.Добавить();
				НоваяСтрока.ПредставлениеОбъекта = "Приложение 2 к НН";
				НоваяСтрока.СсылкаОбъекта = Документы.Приложение2КНалоговойНакладной.ПустаяСсылка();
				НоваяСтрока = ПечатнаяФорма.Принадлежность.Добавить();
				НоваяСтрока.ПредставлениеОбъекта = "Счет на оплату покупателю";
				НоваяСтрока.СсылкаОбъекта = Документы.СчетНаОплатуПокупателю.ПустаяСсылка();
				НоваяСтрока = ПечатнаяФорма.Принадлежность.Добавить();
				НоваяСтрока.ПредставлениеОбъекта = "Реализация Товаров и услуг";
				НоваяСтрока.СсылкаОбъекта = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
				НоваяСтрока = ПечатнаяФорма.Принадлежность.Добавить();
				НоваяСтрока.ПредставлениеОбъекта = "Счет на оплату поставщика";
				НоваяСтрока.СсылкаОбъекта = Документы.СчетНаОплатуПоставщика.ПустаяСсылка();
				НоваяСтрока = ПечатнаяФорма.Принадлежность.Добавить();
				НоваяСтрока.ПредставлениеОбъекта = "Поступление товаров и услуг";
				НоваяСтрока.СсылкаОбъекта = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
				НоваяСтрока = ПечатнаяФорма.Принадлежность.Добавить();
				НоваяСтрока.ПредставлениеОбъекта = "Акт сверки взаиморасчетов";
				НоваяСтрока.СсылкаОбъекта = Документы.АктСверкиВзаиморасчетов.ПустаяСсылка();
				НоваяСтрока = ПечатнаяФорма.Принадлежность.Добавить();
				НоваяСтрока.ПредставлениеОбъекта = "Договоры контрагентов";
				НоваяСтрока.СсылкаОбъекта = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			ИначеЕсли ИДКонфигурации = "FlyDoc" Тогда
				НоваяСтрока = ПечатнаяФорма.Принадлежность.Добавить();
				НоваяСтрока.ПредставлениеОбъекта = "Счет на оплату покупателю";
				НоваяСтрока.СсылкаОбъекта = Документы.СчетНаОплатуПокупателю.ПустаяСсылка();
				НоваяСтрока = ПечатнаяФорма.Принадлежность.Добавить();
				НоваяСтрока.ПредставлениеОбъекта = "Счет на оплату поставщика";
				НоваяСтрока.СсылкаОбъекта = Документы.СчетНаОплатуПоставщика.ПустаяСсылка();
			КонецЕсли;
			ПечатнаяФорма.Записать();
		КонецЕсли;
		
	Исключение
		Сообщить(НСтр("ru = 'Не удалось зарегистрировать печатную форму ""Электронный документ"" по причине: '; uk = 'Не вдалося зареєструвати друковану форму ""Електронний документ"" з причини: '") + ОписаниеОшибки());
		Возврат;	
	КонецПопытки;
	
КонецПроцедуры

Процедура СконвертироватьНастройкиШаблоновТабличнаяЧастьВРегистрСведений() Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	скEDI_ВидыЭлектронныхДокументов.Ссылка КАК ВидЭлектронногоДокумента
		|ИЗ
		|	Справочник.скEDI_ВидыЭлектронныхДокументов КАК скEDI_ВидыЭлектронныхДокументов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписейПравилаВыгрузки = РегистрыСведений.скEDI_ПравилаВыгрузки.СоздатьНаборЗаписей();
	НаборЗаписейПравилаЗагрузки = РегистрыСведений.скEDI_ПравилаЗагрузки.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		Приоритет = Выборка.ВидЭлектронногоДокумента.ИсходящиеДокументы1С.Количество();
		Для Каждого СтрокаВыгрузка Из Выборка.ВидЭлектронногоДокумента.ИсходящиеДокументы1С Цикл
			ПравилоВыгрузки = НаборЗаписейПравилаВыгрузки.Добавить();
			ПравилоВыгрузки.ВидЭлектронногоДокумента = Выборка.ВидЭлектронногоДокумента;
			ПравилоВыгрузки.ВидДокумента1С           = СтрокаВыгрузка.ВидДокумента;
			ПравилоВыгрузки.Приоритет                = Приоритет;
			ПравилоВыгрузки.ИмяШаблона 				 = СтрокаВыгрузка.ИмяШаблона;
			ПравилоВыгрузки.Схема0                   = СтрокаВыгрузка.СхемаВыгрузки0;
			ПравилоВыгрузки.Схема1                   = СтрокаВыгрузка.СхемаВыгрузки1;
			ПравилоВыгрузки.Использование			 = НЕ СтрокаВыгрузка.НеИспользовать;
			ПравилоВыгрузки.Комментарий				 = СтрокаВыгрузка.Комментарий;
			Приоритет = Приоритет - 1;
		КонецЦикла;
		
		Приоритет = Выборка.ВидЭлектронногоДокумента.ВходящиеДокументы1С.Количество();
		Для Каждого СтрокаЗагрузка Из Выборка.ВидЭлектронногоДокумента.ВходящиеДокументы1С Цикл
			ПравилоЗагрузки = НаборЗаписейПравилаЗагрузки.Добавить();
			ПравилоЗагрузки.Организация 			 = Выборка.ВидЭлектронногоДокумента.Владелец;
			ПравилоЗагрузки.ИмяШаблона               = СтрокаЗагрузка.ИмяШаблона;
			ПравилоЗагрузки.Приоритет                = Приоритет;
			ПравилоЗагрузки.ВидЭлектронногоДокумента = Выборка.ВидЭлектронногоДокумента;
			ПравилоЗагрузки.Схема                    = СтрокаЗагрузка.СхемаЗагрузки;
			ПравилоЗагрузки.Использование            = НЕ СтрокаЗагрузка.НеИспользовать;
			ПравилоЗагрузки.ВидДокумента1С			 = СтрокаЗагрузка.ВидДокумента;
			ПравилоЗагрузки.Комментарий				 = СтрокаЗагрузка.Комментарий;
			Приоритет = Приоритет - 1;
		КонецЦикла;
		
	КонецЦикла;
	
	НаборЗаписейПравилаВыгрузки.Записать();
	НаборЗаписейПравилаЗагрузки.Записать();
	
КонецПроцедуры     

Процедура УстановитьПризнакПредопределенныйВидамЭлектронныхДокументов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	скEDI_ВидыЭлектронныхДокументов.Ссылка
		|ИЗ
		|	Справочник.скEDI_ВидыЭлектронныхДокументов КАК скEDI_ВидыЭлектронныхДокументов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВидЭлектронногоДокументаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВидЭлектронногоДокументаОбъект.ЭтоПредопределенный = Истина;
		ВидЭлектронногоДокументаОбъект.Записать();
	КонецЦикла; 
	
КонецПроцедуры

Процедура УстановитьТипЭлектронногоДокумента_Релиз_1_1_2_0() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	скEDI_ВидыЭлектронныхДокументов.Ссылка
		|ИЗ
		|	Справочник.скEDI_ВидыЭлектронныхДокументов КАК скEDI_ВидыЭлектронныхДокументов
		|ГДЕ
		|	скEDI_ВидыЭлектронныхДокументов.ТипДокумента = &ТипДокумента";
	Запрос.УстановитьПараметр("ТипДокумента", Перечисления.скEDI_ТипыЭлектронныхДокументов.ПустаяСсылка());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВидЭлектронногоДокументаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВидЭлектронногоДокументаОбъект.ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент;
		ВидЭлектронногоДокументаОбъект.Записать();
	КонецЦикла; 
	
КонецПроцедуры

Процедура УстановитьВариантОпределенияСуммыПоДокументу_Релиз_1_1_1_19() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	скEDI_ВидыЭлектронныхДокументов.Ссылка
		|ИЗ
		|	Справочник.скEDI_ВидыЭлектронныхДокументов КАК скEDI_ВидыЭлектронныхДокументов
		|ГДЕ
		|	скEDI_ВидыЭлектронныхДокументов.ВариантОпределенияСуммыПоДокументу = &ВариантОпределенияСуммыПоДокументу";
	Запрос.УстановитьПараметр("ВариантОпределенияСуммыПоДокументу", Перечисления.скEDI_ВариантыОпределенияСуммыПоДокументу.ПустаяСсылка());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВидЭлектронногоДокументаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ВидЭлектронногоДокументаОбъект.Наименование = "Акт" Тогда
			ВидЭлектронногоДокументаОбъект.ВариантОпределенияСуммыПоДокументу = Перечисления.скEDI_ВариантыОпределенияСуммыПоДокументу.СуммаТЧУслуги;
		ИначеЕсли ВидЭлектронногоДокументаОбъект.Наименование = "Видаткова накладна" Тогда
			ВидЭлектронногоДокументаОбъект.ВариантОпределенияСуммыПоДокументу = Перечисления.скEDI_ВариантыОпределенияСуммыПоДокументу.СуммаТЧТовары;
		Иначе
			ВидЭлектронногоДокументаОбъект.ВариантОпределенияСуммыПоДокументу = Перечисления.скEDI_ВариантыОпределенияСуммыПоДокументу.СуммаДокумента;
		КонецЕсли;
		
		ВидЭлектронногоДокументаОбъект.Записать();
	КонецЦикла; 
	
КонецПроцедуры

Процедура УстановитьСпособОтправкиКонтрагентуВОрганизацииEDI_Релиз_1_1_2_0() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	скEDI_Организации.Ссылка
		|ИЗ
		|	Справочник.скEDI_Организации КАК скEDI_Организации
		|ГДЕ
		|	скEDI_Организации.СпособОтправкиНалоговыхДокументовКонтрагенту = &СпособОтправкиНалоговыхДокументовКонтрагенту";
	
	Запрос.УстановитьПараметр("СпособОтправкиНалоговыхДокументовКонтрагенту", Перечисления.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОрганизацияEDI = Выборка.Ссылка.ПолучитьОбъект();
		ОрганизацияEDI.СпособОтправкиНалоговыхДокументовКонтрагенту = Перечисления.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО;
		ОрганизацияEDI.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработктьЭлектронныеДокументы_Релиз_1_1_2_0() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	скEDI_ЭлектронныйДокумент.Ссылка
		|ИЗ
		|	Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЭлектронныйДокумент = Выборка.Ссылка.ПолучитьОбъект();
		ЭлектронныйДокумент.ДатаДокумента = ЭлектронныйДокумент.Дата;
		ЭлектронныйДокумент.НомерДокумента= ЭлектронныйДокумент.Номер;
		Для Каждого СтрокаСодержание Из ЭлектронныйДокумент.Содержание Цикл
			СтрокаСодержание.ИмяФайла = ЭлектронныйДокумент.ИмяФайла
		КонецЦикла;
		ЭлектронныйДокумент.ОбменДанными.Загрузка = Истина;
		ЭлектронныйДокумент.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьКвитанции_Релиз_1_1_2_0() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	скEDI_Квитанция.Ссылка
		|ИЗ
		|	Документ.скEDI_Квитанция КАК скEDI_Квитанция
		|ГДЕ
		|	скEDI_Квитанция.ВидКвитанции = &ВидКвитанции";
		Запрос.УстановитьПараметр("ВидКвитанции", Перечисления.скEDI_ВидыКвитанций.ПустаяСсылка());
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Квитанция = Выборка.Ссылка.ПолучитьОбъект();
		Квитанция.ВидКвитанции = Перечисления.скEDI_ВидыКвитанций.СДО;
		Квитанция.ОбменДанными.Загрузка = Истина;
		Квитанция.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНаименованиеНастроекВыгрузкиЗагрузки_Релиз_1_1_2_2() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	скEDI_ПравилаЗагрузки.Организация,
		|	скEDI_ПравилаЗагрузки.ИмяШаблона,
		|	скEDI_ПравилаЗагрузки.Приоритет,
		|	ВЫБОР
		|		КОГДА скEDI_ПравилаЗагрузки.ИмяШаблона = ""1С82АВР""
		|			ТОГДА ""Акт (ціна з ПДВ)""
		|		КОГДА скEDI_ПравилаЗагрузки.ИмяШаблона = ""1С82АВРБ""
		|			ТОГДА ""Акт (без ПДВ)""
		|		КОГДА скEDI_ПравилаЗагрузки.ИмяШаблона = ""1С82АВР0""
		|			ТОГДА ""Акт (ціна без ПДВ)""
		|		КОГДА скEDI_ПравилаЗагрузки.ИмяШаблона = ""1С82ВНБ""
		|			ТОГДА ""Видаткова накладна (без ПДВ)""
		|		КОГДА скEDI_ПравилаЗагрузки.ИмяШаблона = ""1С82ВН""
		|			ТОГДА ""Видаткова накладна (ціна з ПДВ)""
		|		КОГДА скEDI_ПравилаЗагрузки.ИмяШаблона = ""1С82ВН0""
		|			ТОГДА ""Видаткова накладна (ціна без ПДВ)""
		|		КОГДА скEDI_ПравилаЗагрузки.ИмяШаблона = ""1С82РАХБ""
		|			ТОГДА ""Рахунок (без ПДВ)""
		|		КОГДА скEDI_ПравилаЗагрузки.ИмяШаблона = ""1С82РАХ""
		|			ТОГДА ""Рахунок (ціна з ПДВ)""
		|		КОГДА скEDI_ПравилаЗагрузки.ИмяШаблона = ""1С82РАХ0""
		|			ТОГДА ""Рахунок (ціна без ПДВ)""
		|	КОНЕЦ КАК Наименование
		|ИЗ
		|	РегистрСведений.скEDI_ПравилаЗагрузки КАК скEDI_ПравилаЗагрузки
		|ГДЕ
		|	скEDI_ПравилаЗагрузки.Наименование = """"
		|	И скEDI_ПравилаЗагрузки.ИмяШаблона В (""1С82АВР"", ""1С82АВРБ"", ""1С82АВР0"", ""1С82ВНБ"", ""1С82ВН"", ""1С82ВН0"", ""1С82РАХБ"", ""1С82РАХ"", ""1С82РАХ0"")";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.скEDI_ПравилаЗагрузки.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = Выборка.Организация;
		МенеджерЗаписи.ИмяШаблона = Выборка.ИмяШаблона;
		МенеджерЗаписи.Приоритет = Выборка.Приоритет;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Наименование = Выборка.Наименование;
		МенеджерЗаписи.Записать(Истина);
	КонецЦикла;
	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	скEDI_ПравилаВыгрузки.ВидЭлектронногоДокумента,
		|	скEDI_ПравилаВыгрузки.ВидДокумента1С,
		|	скEDI_ПравилаВыгрузки.Приоритет,
		|	скEDI_ПравилаВыгрузки.ИмяШаблона,
		|	ВЫБОР
		|		КОГДА скEDI_ПравилаВыгрузки.ИмяШаблона = ""1С82АВР""
		|			ТОГДА ""Акт (ціна з ПДВ)""
		|		КОГДА скEDI_ПравилаВыгрузки.ИмяШаблона = ""1С82АВРБ""
		|			ТОГДА ""Акт (без ПДВ)""
		|		КОГДА скEDI_ПравилаВыгрузки.ИмяШаблона = ""1С82АВР0""
		|			ТОГДА ""Акт (ціна без ПДВ)""
		|		КОГДА скEDI_ПравилаВыгрузки.ИмяШаблона = ""1С82ВНБ""
		|			ТОГДА ""Видаткова накладна (без ПДВ)""
		|		КОГДА скEDI_ПравилаВыгрузки.ИмяШаблона = ""1С82ВН""
		|			ТОГДА ""Видаткова накладна (ціна з ПДВ)""
		|		КОГДА скEDI_ПравилаВыгрузки.ИмяШаблона = ""1С82ВН0""
		|			ТОГДА ""Видаткова накладна (ціна без ПДВ)""
		|		КОГДА скEDI_ПравилаВыгрузки.ИмяШаблона = ""1С82РАХБ""
		|			ТОГДА ""Рахунок (без ПДВ)""
		|		КОГДА скEDI_ПравилаВыгрузки.ИмяШаблона = ""1С82РАХ""
		|			ТОГДА ""Рахунок (ціна з ПДВ)""
		|		КОГДА скEDI_ПравилаВыгрузки.ИмяШаблона = ""1С82РАХ0""
		|			ТОГДА ""Рахунок (ціна без ПДВ)""
		|	КОНЕЦ КАК Наименование
		|ИЗ
		|	РегистрСведений.скEDI_ПравилаВыгрузки КАК скEDI_ПравилаВыгрузки
		|ГДЕ
		|	скEDI_ПравилаВыгрузки.Наименование = """"
		|	И скEDI_ПравилаВыгрузки.ИмяШаблона В (""1С82АВР"", ""1С82АВРБ"", ""1С82АВР0"", ""1С82ВНБ"", ""1С82ВН"", ""1С82ВН0"", ""1С82РАХБ"", ""1С82РАХ"", ""1С82РАХ0"")";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.скEDI_ПравилаВыгрузки.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ВидЭлектронногоДокумента = Выборка.ВидЭлектронногоДокумента;
		МенеджерЗаписи.ВидДокумента1С = Выборка.ВидДокумента1С;
		МенеджерЗаписи.Приоритет = Выборка.Приоритет;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Наименование = Выборка.Наименование;
		МенеджерЗаписи.Записать(Истина);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьНастройкуОтображенияЭлектронныхДокументов_Релиз_1_1_2_3() Экспорт
	МенеджерЗаписи = РегистрыСведений.скEDI_ОтображениеЭлектронныхДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь = Неопределено;
	МенеджерЗаписи.ОтображениеЭлектронныхДокументов = Перечисления.скEDI_ВариантыОтображенияЭлектронныхДокументов.Картинка;
	МенеджерЗаписи.Записать(Истина);
КонецПроцедуры

Процедура СконвертироватьУсловияДокументов1С_Релиз_1_1_2_4() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_УсловияДокументов1С.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
	               |	скEDI_УсловияДокументов1С.ВидДокумента1С КАК ВидДокумента1С,
	               |	ВЫБОР
	               |		КОГДА скEDI_УсловияДокументов1С.Условие = ЗНАЧЕНИЕ(Перечисление.скEDI_Условия.Включить)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Использование,
	               |	скEDI_УсловияДокументов1С.ДолжныБытьТовары,
	               |	скEDI_УсловияДокументов1С.ДолжныБытьУслуги,
	               |	скEDI_УсловияДокументов1С.ДолженБытьОтраженВРегУчете,
	               |	скEDI_УсловияДокументов1С.ДолженБытьОтраженВУпрУчете,
	               |	скEDI_УсловияДокументов1С.ВхИсх,
	               |	скEDI_УсловияДокументов1С.ДатаС,
	               |	скEDI_УсловияДокументов1С.ДатаПо,
	               |	скEDI_УсловияДокументов1С.ТекстЗапроса
	               |ИЗ
	               |	РегистрСведений.скEDI_УсловияДокументов1С КАК скEDI_УсловияДокументов1С
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВидЭлектронногоДокумента,
	               |	ВидДокумента1С,
	               |	скEDI_УсловияДокументов1С.Порядок УБЫВ";
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	текВидЭлектронногоДокумента = Неопределено;
	текВидДокумента1С = Неопределено;
	ТекПриоритет = 0;
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		Если текВидЭлектронногоДокумента <> ВыборкаРезультатаЗапроса.ВидЭлектронногоДокумента
			или текВидДокумента1С <> ВыборкаРезультатаЗапроса.ВидДокумента1С Тогда
			
			ТекПриоритет = 0;
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ВидЭлектронногоДокумента = ВыборкаРезультатаЗапроса.ВидЭлектронногоДокумента;
		МенеджерЗаписи.ВидДокумента1С = ВыборкаРезультатаЗапроса.ВидДокумента1С;
		МенеджерЗаписи.Приоритет = ТекПриоритет;
		МенеджерЗаписи.Использование = ВыборкаРезультатаЗапроса.Использование;
		МенеджерЗаписи.ДолжныБытьТовары = ВыборкаРезультатаЗапроса.ДолжныБытьТовары;
		МенеджерЗаписи.ДолжныБытьУслуги = ВыборкаРезультатаЗапроса.ДолжныБытьУслуги;
		МенеджерЗаписи.ДолженБытьОтраженВРегУчете = ВыборкаРезультатаЗапроса.ДолженБытьОтраженВРегУчете;
		МенеджерЗаписи.ДолженБытьОтраженВУпрУчете = ВыборкаРезультатаЗапроса.ДолженБытьОтраженВУпрУчете;
		МенеджерЗаписи.ВхИсх = ВыборкаРезультатаЗапроса.ВхИсх;
		МенеджерЗаписи.ДатаС = ВыборкаРезультатаЗапроса.ДатаС;
		МенеджерЗаписи.ДатаПо = ВыборкаРезультатаЗапроса.ДатаПо;
		МенеджерЗаписи.ТекстЗапроса = ВыборкаРезультатаЗапроса.ТекстЗапроса;

		МенеджерЗаписи.Записать(Истина);
		
		ТекПриоритет = ТекПриоритет + 1;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьЕДРПОУВладельцаШаблонаВыгрузкиЗагрузки_Релиз_1_1_2_4() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	скEDI_ПравилаЗагрузки.Организация,
		|	скEDI_ПравилаЗагрузки.ЕДРПОУВладельцаШаблона,
		|	скEDI_ПравилаЗагрузки.ИмяШаблона,
		|	скEDI_ПравилаЗагрузки.ВерсияШаблона,
		|	скEDI_ПравилаЗагрузки.Приоритет,
		|	скEDI_ПравилаЗагрузки.Наименование,
		|	скEDI_ПравилаЗагрузки.ВидЭлектронногоДокумента,
		|	скEDI_ПравилаЗагрузки.Схема,
		|	скEDI_ПравилаЗагрузки.Использование,
		|	скEDI_ПравилаЗагрузки.ВидДокумента1С,
		|	скEDI_ПравилаЗагрузки.Комментарий,
		|	скEDI_ПравилаЗагрузки.НеИскатьАвтоматически,
		|	скEDI_ПравилаЗагрузки.ЭтоПредопределенный,
		|	""831111111"" КАК НовЕДРПОУВладельцаШаблона
		|ИЗ
		|	РегистрСведений.скEDI_ПравилаЗагрузки КАК скEDI_ПравилаЗагрузки
		|ГДЕ
		|	скEDI_ПравилаЗагрузки.ИмяШаблона В (""1С82АВР"", ""1С82АВРБ"", ""1С82АВР0"", ""1С82ВНБ"", ""1С82ВН"", ""1С82ВН0"", ""1С82РАХБ"", ""1С82РАХ"", ""1С82РАХ0"")
		|	И скEDI_ПравилаЗагрузки.ЕДРПОУВладельцаШаблона = """"
		|	И скEDI_ПравилаЗагрузки.ВерсияШаблона = """"";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.скEDI_ПравилаЗагрузки.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = Выборка.Организация;
		МенеджерЗаписи.ЕДРПОУВладельцаШаблона = Выборка.НовЕДРПОУВладельцаШаблона;
		МенеджерЗаписи.ИмяШаблона = Выборка.ИмяШаблона;
		МенеджерЗаписи.ВерсияШаблона = Выборка.ВерсияШаблона;
		МенеджерЗаписи.Приоритет = Выборка.Приоритет;
		МенеджерЗаписи.Наименование = Выборка.Наименование;
		МенеджерЗаписи.ВидЭлектронногоДокумента = Выборка.ВидЭлектронногоДокумента;
		МенеджерЗаписи.Схема = Выборка.Схема;
		МенеджерЗаписи.Использование = Выборка.Использование;
		МенеджерЗаписи.ВидДокумента1С = Выборка.ВидДокумента1С;
		МенеджерЗаписи.Комментарий = Выборка.Комментарий;
		МенеджерЗаписи.НеИскатьАвтоматически = Выборка.НеИскатьАвтоматически;
		МенеджерЗаписи.ЭтоПредопределенный = Выборка.ЭтоПредопределенный;
		МенеджерЗаписи.Записать(Истина);
		
		МенеджерЗаписи = РегистрыСведений.скEDI_ПравилаЗагрузки.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = Выборка.Организация;
		МенеджерЗаписи.ЕДРПОУВладельцаШаблона = Выборка.ЕДРПОУВладельцаШаблона;
		МенеджерЗаписи.ИмяШаблона = Выборка.ИмяШаблона;
		МенеджерЗаписи.ВерсияШаблона = Выборка.ВерсияШаблона;
		МенеджерЗаписи.Приоритет = Выборка.Приоритет;
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	скEDI_ПравилаВыгрузки.ВидЭлектронногоДокумента,
		|	скEDI_ПравилаВыгрузки.ВидДокумента1С,
		|	скEDI_ПравилаВыгрузки.Приоритет,
		|	скEDI_ПравилаВыгрузки.ИмяШаблона,
		|	""831111111"" КАК НовЕДРПОУВладельцаШаблона
		|ИЗ
		|	РегистрСведений.скEDI_ПравилаВыгрузки КАК скEDI_ПравилаВыгрузки
		|ГДЕ
		|	скEDI_ПравилаВыгрузки.ИмяШаблона В (""1С82АВР"", ""1С82АВРБ"", ""1С82АВР0"", ""1С82ВНБ"", ""1С82ВН"", ""1С82ВН0"", ""1С82РАХБ"", ""1С82РАХ"", ""1С82РАХ0"")
		|	И скEDI_ПравилаВыгрузки.ЕДРПОУВладельцаШаблона = """"
		|	И скEDI_ПравилаВыгрузки.ВерсияШаблона = """"";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.скEDI_ПравилаВыгрузки.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ВидЭлектронногоДокумента = Выборка.ВидЭлектронногоДокумента;
		МенеджерЗаписи.ВидДокумента1С = Выборка.ВидДокумента1С;
		МенеджерЗаписи.Приоритет = Выборка.Приоритет;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.ЕДРПОУВладельцаШаблона = Выборка.НовЕДРПОУВладельцаШаблона;
		МенеджерЗаписи.Записать(Истина);
	КонецЦикла;
КонецПроцедуры

Процедура ПеренестиСодержанияИВложенияВРегистрыСведений_Релиз_1_1_2_4() Экспорт
	//ВыборкаЭлектронныхДокументов = Документы.скEDI_ЭлектронныйДокумент.Выбрать();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ЭлектронныйДокументСодержание.Ссылка
	               |ИЗ
	               |	Документ.скEDI_ЭлектронныйДокумент.Содержание КАК скEDI_ЭлектронныйДокументСодержание
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	скEDI_ЭлектронныйДокументВложения.Ссылка
	               |ИЗ
	               |	Документ.скEDI_ЭлектронныйДокумент.Вложения КАК скEDI_ЭлектронныйДокументВложения";
	ВыборкаЭлектронныхДокументов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЭлектронныхДокументов.Следующий() Цикл
		ЭлектронныйДокументОбъект = ВыборкаЭлектронныхДокументов.Ссылка.ПолучитьОбъект();
		
		НомерФайла = 0;
		Для Каждого Вложение Из ЭлектронныйДокументОбъект.Вложения Цикл
			НомерФайла = НомерФайла + 1;
			МенеджерЗаписиВложенияЭлектронныхДокументов = РегистрыСведений.скEDI_ВложенияЭлектронныхДокументов.СоздатьМенеджерЗаписи();
			МенеджерЗаписиВложенияЭлектронныхДокументов.ЭлектронныйДокумент = ЭлектронныйДокументОбъект.Ссылка;
			МенеджерЗаписиВложенияЭлектронныхДокументов.НомерФайла = НомерФайла;
			МенеджерЗаписиВложенияЭлектронныхДокументов.ВложениеДокумента = Вложение.ВложениеДокумента;
			МенеджерЗаписиВложенияЭлектронныхДокументов.ИмяФайлаВложениеДокумента = Вложение.ИмяФайлаВложениеДокумента;
			МенеджерЗаписиВложенияЭлектронныхДокументов.Записать(истина);
		КонецЦикла;
		ЭлектронныйДокументОбъект.Вложения.Очистить();
		
		НомерВерсии = ЭлектронныйДокументОбъект.Содержание.Количество();
		Для Каждого Содержание Из ЭлектронныйДокументОбъект.Содержание Цикл
			МенеджерЗаписиСодержимоеЭлектронныхДокументов = РегистрыСведений.скEDI_СодержимоеЭлектронныхДокументов.СоздатьМенеджерЗаписи();
			МенеджерЗаписиСодержимоеЭлектронныхДокументов.ЭлектронныйДокумент = ЭлектронныйДокументОбъект.Ссылка;
			МенеджерЗаписиСодержимоеЭлектронныхДокументов.НомерВерсии = НомерВерсии;
			МенеджерЗаписиСодержимоеЭлектронныхДокументов.ТелоДокумента = Содержание.ТелоДокумента;
			МенеджерЗаписиСодержимоеЭлектронныхДокументов.ИзображениеДокумента = Содержание.ИзображениеДокумента;
			МенеджерЗаписиСодержимоеЭлектронныхДокументов.ВложениеДокумента1 = Содержание.ВложениеДокумента1;
			МенеджерЗаписиСодержимоеЭлектронныхДокументов.ИмяФайлаВложениеДокумента1 = Содержание.ИмяФайлаВложениеДокумента1;
			МенеджерЗаписиСодержимоеЭлектронныхДокументов.ВложениеДокумента2 = Содержание.ВложениеДокумента2;
			МенеджерЗаписиСодержимоеЭлектронныхДокументов.ИмяФайлаВложениеДокумента2 = Содержание.ИмяФайлаВложениеДокумента2;
			МенеджерЗаписиСодержимоеЭлектронныхДокументов.ВложениеДокумента3 = Содержание.ВложениеДокумента3;
			МенеджерЗаписиСодержимоеЭлектронныхДокументов.ИмяФайлаВложениеДокумента3 = Содержание.ИмяФайлаВложениеДокумента3;
			МенеджерЗаписиСодержимоеЭлектронныхДокументов.Дата = Содержание.Дата;
			МенеджерЗаписиСодержимоеЭлектронныхДокументов.ИмяФайла = Содержание.ИмяФайла;
			МенеджерЗаписиСодержимоеЭлектронныхДокументов.ДокументДФС = Содержание.ДокументДФС;
			МенеджерЗаписиСодержимоеЭлектронныхДокументов.ПолученоОтКонтрагента = Содержание.ПолученоОтКонтрагента;
			МенеджерЗаписиСодержимоеЭлектронныхДокументов.Записать(истина);
			НомерВерсии = НомерВерсии - 1;
		КонецЦикла;
		ЭлектронныйДокументОбъект.Содержание.Очистить();
		ЭлектронныйДокументОбъект.ОбменДанными.Загрузка = Истина;
		ЭлектронныйДокументОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ПеренестиФаксимилеВРегистрыСведений_Релиз_1_1_2_4() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ЭлектронныйДокументПодписи.Ссылка,
	               |	скEDI_ЭлектронныйДокументПодписи.Подпись.Ссылка КАК Подпись,
	               |	скEDI_ЭлектронныйДокументПодписи.Подпись.Владелец.Код КАК ЕДРПОУ,
	               |	скEDI_ЭлектронныйДокументПодписи.Подпись.ДРФО КАК ДРФО,
	               |	скEDI_ЭлектронныйДокументПодписи.Подпись.Роль КАК Роль,
	               |	скEDI_ЭлектронныйДокументПодписи.Подпись.Фамилия КАК Фамилия,
	               |	скEDI_ЭлектронныйДокументПодписи.Подпись.Должность КАК Должность,
	               |	скEDI_Факсимиле.Факсимиле
	               |ИЗ
	               |	Документ.скEDI_ЭлектронныйДокумент.Подписи КАК скEDI_ЭлектронныйДокументПодписи
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.скEDI_Факсимиле КАК скEDI_Факсимиле
	               |		ПО скEDI_ЭлектронныйДокументПодписи.Подпись = скEDI_Факсимиле.Подпись
	               |ГДЕ
	               |	скEDI_ЭлектронныйДокументПодписи.Подписано";
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.скEDI_ФаксимилеЭлектронныхДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ЭлектронныйДокумент = ВыборкаДетальныеЗаписи.Ссылка;
		МенеджерЗаписи.КодУровняПодписи = скEDI_ОбщегоНазначения.ПолучитьКодПодписиПоРоли(ВыборкаДетальныеЗаписи.Роль);
		Если ВыборкаДетальныеЗаписи.Роль = ПредопределенноеЗначение("Перечисление.скEDI_РолиПодписей.ПечатьОрганизации") Тогда
			МенеджерЗаписи.ДРФО = ВыборкаДетальныеЗаписи.ЕДРПОУ;
			МенеджерЗаписи.ИмяПодписанта = "";
			МенеджерЗаписи.ДолжностьПодписанта = "";
		Иначе
			МенеджерЗаписи.ДРФО = ВыборкаДетальныеЗаписи.ДРФО;
			МенеджерЗаписи.ИмяПодписанта = ВыборкаДетальныеЗаписи.Фамилия;
			МенеджерЗаписи.ДолжностьПодписанта = ВыборкаДетальныеЗаписи.Должность;
		КонецЕсли;
		МенеджерЗаписи.Роль = ВыборкаДетальныеЗаписи.Роль;
		
		ТелоФаксимиле_ХранилищеЗначений = ВыборкаДетальныеЗаписи.Факсимиле.Получить();
		ТелоФаксимиле = Base64Строка(ТелоФаксимиле_ХранилищеЗначений);
		МенеджерЗаписи.ТелоФаксимиле = ТелоФаксимиле;
		
		МенеджерЗаписи.Записать(Истина);
	КонецЦикла;
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ЭлектронныйДокументПодписиКонтрагента.Ссылка,
	               |	скEDI_ЭлектронныйДокументПодписиКонтрагента.ДРФОПодписанта,
	               |	скEDI_ЭлектронныйДокументПодписиКонтрагента.Роль,
	               |	скEDI_ЭлектронныйДокументПодписиКонтрагента.ИмяПодписанта,
	               |	скEDI_ЭлектронныйДокументПодписиКонтрагента.ДолжностьПодписанта,
	               |	скEDI_ЭлектронныйДокументПодписиКонтрагента.ТелоФаксимиле
	               |ИЗ
	               |	Документ.скEDI_ЭлектронныйДокумент.ПодписиКонтрагента КАК скEDI_ЭлектронныйДокументПодписиКонтрагента
	               |ГДЕ
	               |	(ВЫРАЗИТЬ(скEDI_ЭлектронныйДокументПодписиКонтрагента.ТелоФаксимиле КАК СТРОКА(1000))) <> """"";
	ВыборкаЭлектронныхДокументов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЭлектронныхДокументов.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.скEDI_ФаксимилеЭлектронныхДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ЭлектронныйДокумент = ВыборкаЭлектронныхДокументов.Ссылка;
		МенеджерЗаписи.КодУровняПодписи = скEDI_ОбщегоНазначения.ПолучитьКодПодписиПоРоли(ВыборкаЭлектронныхДокументов.Роль);
		МенеджерЗаписи.ДРФО = ВыборкаЭлектронныхДокументов.ДРФОПодписанта;
		
		МенеджерЗаписи.ТелоФаксимиле = ВыборкаЭлектронныхДокументов.ТелоФаксимиле;
		МенеджерЗаписи.ИмяПодписанта = ВыборкаЭлектронныхДокументов.ИмяПодписанта;
		МенеджерЗаписи.ДолжностьПодписанта = ВыборкаЭлектронныхДокументов.ДолжностьПодписанта;
		МенеджерЗаписи.Роль = ВыборкаЭлектронныхДокументов.Роль;
		
		МенеджерЗаписи.Записать(Истина);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьГруппуДопДокументыДФС_Релиз_1_1_3_0() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_Подписи.Ссылка КАК Подпись,
	               |	скEDI_Подписи.Владелец КАК Организация
	               |ИЗ
	               |	Справочник.скEDI_Подписи КАК скEDI_Подписи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			скEDI_ГруппыПодписей.Подпись КАК Подпись
	               |		ИЗ
	               |			РегистрСведений.скEDI_ГруппыПодписей КАК скEDI_ГруппыПодписей
	               |		ГДЕ
	               |			скEDI_ГруппыПодписей.ГруппаПодписи = ЗНАЧЕНИЕ(Справочник.скEDI_ГруппыПодписей.ДопДокументыДФС)) КАК Группы
	               |		ПО скEDI_Подписи.Ссылка = Группы.Подпись
	               |ГДЕ
	               |	скEDI_Подписи.Роль В (ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьДиректора), ЗНАЧЕНИЕ(Перечисление.скEDI_РолиПодписей.ПодписьБухгалтера))
	               |	И Группы.Подпись ЕСТЬ NULL";
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.скEDI_ГруппыПодписей.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Подпись = ВыборкаДетальныеЗаписи.Подпись;
		МенеджерЗаписи.ГруппаПодписи = ПредопределенноеЗначение("Справочник.скEDI_ГруппыПодписей.ДопДокументыДФС");
		МенеджерЗаписи.Записать(Истина);
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьПолученоОтКонтрагентаСПомощьюВСодержимоеЭлектронныхДокументов_Релиз_1_1_3_0() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	скEDI_Организации.Ссылка
		|ИЗ
		|	Справочник.скEDI_Организации КАК скEDI_Организации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОрганизацияEDI = Выборка.Ссылка.ПолучитьОбъект();
		ОрганизацияEDI.СпособОтправкиНалоговыхДокументовКонтрагенту = Перечисления.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезДФС;
		ОрганизацияEDI.Записать();
	КонецЦикла;
	
	
	//ВыборкаЭлектронныхДокументов = Документы.скEDI_ЭлектронныйДокумент.Выбрать();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_СодержимоеЭлектронныхДокументов.ЭлектронныйДокумент,
	               |	скEDI_СодержимоеЭлектронныхДокументов.НомерВерсии
	               |ИЗ
	               |	РегистрСведений.скEDI_СодержимоеЭлектронныхДокументов КАК скEDI_СодержимоеЭлектронныхДокументов
	               |ГДЕ
	               |	скEDI_СодержимоеЭлектронныхДокументов.ПолученоОтКонтрагента
	               |	И скEDI_СодержимоеЭлектронныхДокументов.ПолученоОтКонтрагентаСПомощью = ЗНАЧЕНИЕ(Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ПустаяСсылка)";
	ВыборкаСодержимоеЭлектронныхДокументов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаСодержимоеЭлектронныхДокументов.Следующий() Цикл
		МенеджерЗаписиСодержимоеЭлектронныхДокументов = РегистрыСведений.скEDI_СодержимоеЭлектронныхДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписиСодержимоеЭлектронныхДокументов.ЭлектронныйДокумент = ВыборкаСодержимоеЭлектронныхДокументов.ЭлектронныйДокумент;
		МенеджерЗаписиСодержимоеЭлектронныхДокументов.НомерВерсии = ВыборкаСодержимоеЭлектронныхДокументов.НомерВерсии;
		МенеджерЗаписиСодержимоеЭлектронныхДокументов.Прочитать();
		Если МенеджерЗаписиСодержимоеЭлектронныхДокументов.Выбран() Тогда
			МенеджерЗаписиСодержимоеЭлектронныхДокументов.ПолученоОтКонтрагентаСПомощью = Перечисления.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезСДО;
			МенеджерЗаписиСодержимоеЭлектронныхДокументов.Записать(истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьПометкуУдаления_Релиз_1_1_3_0() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ЭлектронныеДокументы.Организация,
	               |	скEDI_ЭлектронныеДокументы.ЭлектронныйДокумент,
	               |	скEDI_ЭлектронныеДокументы.Документ1С,
	               |	скEDI_ЭлектронныеДокументы.ВидЭлектронногоДокумента
	               |ИЗ
	               |	РегистрСведений.скEDI_ЭлектронныеДокументы КАК скEDI_ЭлектронныеДокументы
	               |ГДЕ
	               |	скEDI_ЭлектронныеДокументы.Документ1С.ПометкаУдаления = ИСТИНА
	               |	И НЕ скEDI_ЭлектронныеДокументы.Документ1СПометкаУдаления";
	ВыборкаЭлектронныхДокументов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЭлектронныхДокументов.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.скEDI_ЭлектронныеДокументы.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = ВыборкаЭлектронныхДокументов.Организация;
		МенеджерЗаписи.ЭлектронныйДокумент = ВыборкаЭлектронныхДокументов.ЭлектронныйДокумент;
		МенеджерЗаписи.Документ1С = ВыборкаЭлектронныхДокументов.Документ1С;
		МенеджерЗаписи.ВидЭлектронногоДокумента = ВыборкаЭлектронныхДокументов.ВидЭлектронногоДокумента;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Документ1СПометкаУдаления = Истина;
			МенеджерЗаписи.Записать(Истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьОсновнойЭлектронныйДокумент_Релиз_1_1_3_0() Экспорт
	//ВыборкаЭлектронныхДокументов = Документы.скEDI_ЭлектронныйДокумент.Выбрать();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ЭлектронныйДокумент.Ссылка КАК ЭлектронныйДокумент,
	               |	ВложенныйЗапрос.Документ1С КАК Документ1С,
	               |	ВЫБОР
	               |		КОГДА скEDI_ЭлектронныйДокумент.Ссылка = ЕСТЬNULL(ВложенныйЗапрос.ДокументПолученоПодтверждение, ВложенныйЗапрос.ДокументПоследняяОперация)
	               |			ТОГДА ЗНАЧЕНИЕ(Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка)
	               |		ИНАЧЕ ЕСТЬNULL(ВложенныйЗапрос.ДокументПолученоПодтверждение, ЕСТЬNULL(ВложенныйЗапрос.ДокументПоследняяОперация, ЗНАЧЕНИЕ(Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка)))
	               |	КОНЕЦ КАК ОсновнойЭлектронныйДокумент
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВложенныйЗапрос.Документ1С КАК Документ1С,
	               |		МАКСИМУМ(ВложенныйЗапрос.ДокументПолученоПодтверждение) КАК ДокументПолученоПодтверждение,
	               |		МАКСИМУМ(скEDI_ЭлектронныйДокумент.Ссылка) КАК ДокументПоследняяОперация
	               |	ИЗ
	               |		(ВЫБРАТЬ
	               |			скEDI_ЭлектронныйДокумент.Документ1С КАК Документ1С,
	               |			КОЛИЧЕСТВО(*) КАК КоличествоДокументов,
	               |			МАКСИМУМ(ВЫБОР
	               |					КОГДА скEDI_ЭлектронныйДокумент.Состояние = ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждение)
	               |						ТОГДА скEDI_ЭлектронныйДокумент.Ссылка
	               |				КОНЕЦ) КАК ДокументПолученоПодтверждение,
	               |			МАКСИМУМ(скEDI_ЭлектронныйДокумент.ПоследняяОперация) КАК ПоследняяОперация
	               |		ИЗ
	               |			Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
	               |		ГДЕ
	               |			скEDI_ЭлектронныйДокумент.Документ1С <> НЕОПРЕДЕЛЕНО
	               |			И скEDI_ЭлектронныйДокумент.ВидЭлектронногоДокумента.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент)
	               |			И скEDI_ЭлектронныйДокумент.ВхИсх = ЗНАЧЕНИЕ(Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий)
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			скEDI_ЭлектронныйДокумент.Документ1С) КАК ВложенныйЗапрос
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
	               |			ПО ВложенныйЗапрос.Документ1С = скEDI_ЭлектронныйДокумент.Документ1С
	               |				И ВложенныйЗапрос.ПоследняяОперация = скEDI_ЭлектронныйДокумент.ПоследняяОперация
	               |	ГДЕ
	               |		ВложенныйЗапрос.КоличествоДокументов > 1
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ВложенныйЗапрос.Документ1С) КАК ВложенныйЗапрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
	               |		ПО ВложенныйЗапрос.Документ1С = скEDI_ЭлектронныйДокумент.Документ1С
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Документ1С,
	               |	ОсновнойЭлектронныйДокумент,
	               |	ЭлектронныйДокумент";
	ВыборкаЭлектронныхДокументов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЭлектронныхДокументов.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаЭлектронныхДокументов.Документ1С) Тогда
			Если ВыборкаЭлектронныхДокументов.ЭлектронныйДокумент.ОсновнойЭлектронныйДокумент <> ВыборкаЭлектронныхДокументов.ОсновнойЭлектронныйДокумент Тогда
				ДокОбъект = ВыборкаЭлектронныхДокументов.ЭлектронныйДокумент.ПолучитьОбъект();
				ДокОбъект.ОсновнойЭлектронныйДокумент = ВыборкаЭлектронныхДокументов.ОсновнойЭлектронныйДокумент;
				ДокОбъект.ОбменДанными.Загрузка = Истина;
				ДокОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьИнформациюОСертификатах_Релиз_1_1_3_4() Экспорт
	ВыборкаСправочникПодписи = Справочники.скEDI_Подписи.Выбрать();
	Пока ВыборкаСправочникПодписи.Следующий() Цикл
		СправочникОбъект = ВыборкаСправочникПодписи.ПолучитьОбъект();
		ФлагИзменения = Ложь;
		Для Каждого Сертификат Из СправочникОбъект.Сертификаты Цикл
			Если ЗначениеЗаполнено(Сертификат.ТелоСертификата) Тогда
				лПараметрыКомандыEDIПровайдеру = Новый Структура;
				лПараметрыКомандыEDIПровайдеру.Вставить("Cert", Сертификат.ТелоСертификата);
				
				лСтруктураСОтветомEDIПровайдера = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("getcertinfo", лПараметрыКомандыEDIПровайдеру);
				
				Если лСтруктураСОтветомEDIПровайдера.Code <> 0 Тогда
					Сообщить("Ошибка получения информации о сертификате: " + лСтруктураСОтветомEDIПровайдера.Message);
				Иначе
					ИнформацияОСертификате = лСтруктураСОтветомEDIПровайдера.Info;
					Сертификат.ИздательСертификата = ИнформацияОСертификате.iName;
					Сертификат.КлючНаЗащищенномНосителе = ?(ИнформацияОСертификате.isKeyInDevice = 1, Истина, Ложь);
					Сертификат.ИдентификаторСекретногоКлюча = ИнформацияОСертификате.subjectKeyIdentifier;
					ФлагИзменения = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ФлагИзменения Тогда
			СправочникОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьДополнительныеРеквизитыВРегистреСведений_скEDI_ЭлектронныеДокументы_Релиз_1_1_3_7() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	скEDI_ЭлектронныеДокументы.Документ1С
	               |ИЗ
	               |	РегистрСведений.скEDI_ЭлектронныеДокументы КАК скEDI_ЭлектронныеДокументы
	               |ГДЕ
	               |	скEDI_ЭлектронныеДокументы.Документ1С <> НЕОПРЕДЕЛЕНО";
	ВыборкаЭлектронныхДокументов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЭлектронныхДокументов.Следующий() Цикл
		скEDI_ОбщегоНазначенияПолныеПрава.скEDI_РегистрацияЭлектронногоДокументаПриЗаписи(ВыборкаЭлектронныхДокументов.Документ1С, Ложь);
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьВидЄлектронногоДокументаУниверсальнійДокумент_Релиз_1_1_3_10() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ВидыЭлектронныхДокументов.Владелец КАК Организация,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА скEDI_ВидыЭлектронныхДокументов.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ) КАК ЕстьДокументСВложениями
	               |ИЗ
	               |	Справочник.скEDI_ВидыЭлектронныхДокументов КАК скEDI_ВидыЭлектронныхДокументов
	               |ГДЕ
	               |	НЕ скEDI_ВидыЭлектронныхДокументов.ПометкаУдаления
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	скEDI_ВидыЭлектронныхДокументов.Владелец";
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать();
	Пока ВыборкаОрганизации.Следующий() Цикл
		Если не ВыборкаОрганизации.ЕстьДокументСВложениями Тогда
			НовыйВидЭлектронныхДокументов = Справочники.скEDI_ВидыЭлектронныхДокументов.СоздатьЭлемент();
			НовыйВидЭлектронныхДокументов.Владелец = ВыборкаОрганизации.Организация;
			НовыйВидЭлектронныхДокументов.Наименование = "Універсальний документ";
			НовыйВидЭлектронныхДокументов.ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями;
			НовыйВидЭлектронныхДокументов.ВариантОпределенияСуммыПоДокументу = Перечисления.скEDI_ВариантыОпределенияСуммыПоДокументу.СуммаДокумента;
			НовыйВидЭлектронныхДокументов.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПерезаполнитьПредопределенныеШаблоны() Экспорт
		
	ИДКонфигурации = скEDI_НастройкиПодКонфигурацию.ИДКонфигурации();
	
	Если ИДКонфигурации = "БП" Тогда
		НачальныеНастройки = Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет("НачальноеЗаполнение_БУХ").ПолучитьТекст();
	ИначеЕсли ИДКонфигурации = "БП20" Тогда
		НачальныеНастройки = Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет("НачальноеЗаполнение_БУХ_2_0").ПолучитьТекст();
	ИначеЕсли ИДКонфигурации = "БП20ИНАГРО" Тогда
		НачальныеНастройки = Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет("НачальноеЗаполнение_БУХ_2_0_ИНАГРО").ПолучитьТекст();
	ИначеЕсли ИДКонфигурации = "УТП" Тогда
		НачальныеНастройки = Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет("НачальноеЗаполнение_УТП").ПолучитьТекст();
	ИначеЕсли ИДКонфигурации = "УПП" Тогда
		НачальныеНастройки = Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет("НачальноеЗаполнение_УПП").ПолучитьТекст();
	ИначеЕсли ИДКонфигурации = "УТ" Тогда
		НачальныеНастройки = Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет("НачальноеЗаполнение_УТ").ПолучитьТекст();
	ИначеЕсли ИДКонфигурации = "FlyDoc" Тогда
		НачальныеНастройки = Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет("НачальноеЗаполнение_FlyDoc").ПолучитьТекст();
	ИначеЕсли ИДКонфигурации = "BASУТ" Тогда
		НачальныеНастройки = Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет("НачальноеЗаполнение_BASУТ").ПолучитьТекст();
	ИначеЕсли ИДКонфигурации = "BASКУП" Тогда
		НачальныеНастройки = Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет("НачальноеЗаполнение_BASКУП").ПолучитьТекст();
	ИначеЕсли ИДКонфигурации = "BASERP" Тогда
		НачальныеНастройки = Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет("НачальноеЗаполнение_BASERP").ПолучитьТекст();
	ИначеЕсли ИДКонфигурации = "BASERP25" Тогда
		НачальныеНастройки = Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет("НачальноеЗаполнение_BASERP25").ПолучитьТекст();
	ИначеЕсли ИДКонфигурации = "УНФ" Тогда
		НачальныеНастройки = Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет("НачальноеЗаполнение_УНФ").ПолучитьТекст();
	Иначе 
		Возврат;
	КонецЕсли;
	
	ЧтениеXML = новый ЧтениеXML;
	
	ЧтениеXML.УстановитьСтроку(НачальныеНастройки);
	ЧтениеXML.Прочитать();
	
	мДОМ = Новый ПостроительDOM;
	мДокументДОМ 	  = мДОМ.Прочитать(ЧтениеXML);
	
	МассивНастроек = Новый Массив;
	
	Для Каждого ДочернийУзел1 Из мДокументДОМ.ДочерниеУзлы Цикл
		Если ВРег(ДочернийУзел1.ИмяУзла) = ВРег("ВидыЭлектронныхДокументов") Тогда
			Для Каждого ДочернийУзел2 Из ДочернийУзел1.ДочерниеУзлы Цикл
				Если ВРег(ДочернийУзел2.ИмяУзла) = ВРег("ВидЭлектронногоДокумента") Тогда
					АтрибутИмяДокумента = ДочернийУзел2.Атрибуты.ПолучитьИменованныйЭлемент("ИмяДокумента"); 
					Если АтрибутИмяДокумента = Неопределено Тогда
						Продолжить;
					КонецЕсли; 
					
					АтрибутТипДокумента = ДочернийУзел2.Атрибуты.ПолучитьИменованныйЭлемент("ТипЭлектронногоДокумента");
					Если АтрибутТипДокумента =  Неопределено Тогда
						Продолжить;
					КонецЕсли;

					АтрибутВариантОпределенияСуммыПоДокументу = ДочернийУзел2.Атрибуты.ПолучитьИменованныйЭлемент("ВариантОпределенияСуммыПоДокументу");
					Если АтрибутВариантОпределенияСуммыПоДокументу =  Неопределено Тогда
						Продолжить;
					КонецЕсли;

					СтруктураНастройки_XML = Новый Структура;
					СтруктураНастройки_XML.Вставить("ИмяЭлектронногоДокумента", АтрибутИмяДокумента.ТекстовоеСодержимое);  
					СтруктураНастройки_XML.Вставить("ТипЭлектронногоДокумента", АтрибутТипДокумента.ТекстовоеСодержимое);
					СтруктураНастройки_XML.Вставить("ВариантОпределенияСуммыПоДокументу", АтрибутВариантОпределенияСуммыПоДокументу.ТекстовоеСодержимое);
					
					АтрибутНалоговыйДокументПроверятьСоответствиеПодписантаИСертификата = ДочернийУзел2.Атрибуты.ПолучитьИменованныйЭлемент("НалоговыйДокументПроверятьСоответствиеПодписантаИСертификата");
					Если АтрибутНалоговыйДокументПроверятьСоответствиеПодписантаИСертификата = Неопределено Тогда
						СтруктураНастройки_XML.Вставить("НалоговыйДокументПроверятьСоответствиеПодписантаИСертификата", Ложь);
					Иначе
						СтруктураНастройки_XML.Вставить("НалоговыйДокументПроверятьСоответствиеПодписантаИСертификата", ВРег(АтрибутНалоговыйДокументПроверятьСоответствиеПодписантаИСертификата.ТекстовоеСодержимое) = ВРег("Истина"));
					КонецЕсли;
					
					АтрибутНалоговыйДокументВыполнятьПроверкуПоXSDСхеме = ДочернийУзел2.Атрибуты.ПолучитьИменованныйЭлемент("НалоговыйДокументВыполнятьПроверкуПоXSDСхеме");
					Если АтрибутНалоговыйДокументВыполнятьПроверкуПоXSDСхеме = Неопределено Тогда
						СтруктураНастройки_XML.Вставить("НалоговыйДокументВыполнятьПроверкуПоXSDСхеме", Ложь);
					Иначе
						СтруктураНастройки_XML.Вставить("НалоговыйДокументВыполнятьПроверкуПоXSDСхеме", ВРег(АтрибутНалоговыйДокументВыполнятьПроверкуПоXSDСхеме.ТекстовоеСодержимое) = ВРег("Истина"));
					КонецЕсли;
					
					АтрибутНалоговыйДокументВыполнятьЛогическуюПроверку = ДочернийУзел2.Атрибуты.ПолучитьИменованныйЭлемент("НалоговыйДокументВыполнятьЛогическуюПроверку");
					Если АтрибутНалоговыйДокументВыполнятьЛогическуюПроверку = Неопределено Тогда
						СтруктураНастройки_XML.Вставить("НалоговыйДокументВыполнятьЛогическуюПроверку", Ложь);
					Иначе
						СтруктураНастройки_XML.Вставить("НалоговыйДокументВыполнятьЛогическуюПроверку", ВРег(АтрибутНалоговыйДокументВыполнятьЛогическуюПроверку.ТекстовоеСодержимое) = ВРег("Истина"));
					КонецЕсли;
					
					АтрибутНалоговыйДокументДействияПриОбнаруженииОшибок = ДочернийУзел2.Атрибуты.ПолучитьИменованныйЭлемент("НалоговыйДокументДействияПриОбнаруженииОшибок");
					Если АтрибутНалоговыйДокументДействияПриОбнаруженииОшибок = Неопределено Тогда
						СтруктураНастройки_XML.Вставить("НалоговыйДокументДействияПриОбнаруженииОшибок", Перечисления.скEDI_ДействияПриОбнаруженииОшибок.ПустаяСсылка());
					Иначе
						СтруктураНастройки_XML.Вставить("НалоговыйДокументДействияПриОбнаруженииОшибок", Перечисления.скEDI_ДействияПриОбнаруженииОшибок[АтрибутНалоговыйДокументДействияПриОбнаруженииОшибок.ТекстовоеСодержимое]);
					КонецЕсли;
					
					МассивНастройкиВыгрузки = Новый Массив;
					МассивНастройкиЗагрузки = Новый Массив;
					МассивНастройкиСоответствияВидовЭлектронныхИУчетныхДокументов = Новый Массив;
					
					Для Каждого ДочернийУзел3 Из ДочернийУзел2.ДочерниеУзлы Цикл 
						Если ВРег(ДочернийУзел3.ИмяУзла) = ВРег("НастройкиВыгрузки") Тогда
							Для Каждого ДочернийУзел4 Из ДочернийУзел3.ДочерниеУзлы Цикл 
								Если ВРег(ДочернийУзел4.ИмяУзла) = ВРег("ИмяШаблона") Тогда
									АтрибутИмяШаблона = ДочернийУзел4.Атрибуты.ПолучитьИменованныйЭлемент("ИмяШаблона"); 
									Если АтрибутИмяШаблона = Неопределено Тогда
										Продолжить;
									КонецЕсли;
									
									СтруктураНастроекВыгрузки = Новый Структура("Наименование,ЕДРПОУВладельцаШаблона,ИмяШаблона,ВерсияШаблона,ВидДокумента1С,ИмяМакетаШапка,ИмяМакетаТЧ");
									СтруктураНастроекВыгрузки.ИмяШаблона = АтрибутИмяШаблона.ТекстовоеСодержимое;
									
									АтрибутЕДРПОУВладельцаШаблона = ДочернийУзел4.Атрибуты.ПолучитьИменованныйЭлемент("ЕДРПОУВладельцаШаблона"); 
									Если АтрибутЕДРПОУВладельцаШаблона <> Неопределено Тогда
										СтруктураНастроекВыгрузки.ЕДРПОУВладельцаШаблона = АтрибутЕДРПОУВладельцаШаблона.ТекстовоеСодержимое;
									КонецЕсли;
									АтрибутВерсияШаблона = ДочернийУзел4.Атрибуты.ПолучитьИменованныйЭлемент("ВерсияШаблона"); 
									Если АтрибутВерсияШаблона <> Неопределено Тогда
										СтруктураНастроекВыгрузки.ВерсияШаблона = АтрибутВерсияШаблона.ТекстовоеСодержимое;
									КонецЕсли;
									
									Для Каждого ДочернийУзел5 Из ДочернийУзел4.ДочерниеУзлы Цикл 
										Если ВРег(ДочернийУзел5.ИмяУзла) = ВРег("ВидДокумента1С") Тогда
											СтруктураНастроекВыгрузки.ВидДокумента1С = ДочернийУзел5.ТекстовоеСодержимое;
										ИначеЕсли ВРег(ДочернийУзел5.ИмяУзла) = ВРег("ИмяМакетаШапка") Тогда
											СтруктураНастроекВыгрузки.ИмяМакетаШапка = ДочернийУзел5.ТекстовоеСодержимое;
										ИначеЕсли ВРег(ДочернийУзел5.ИмяУзла) = ВРег("ИмяМакетаТЧ") Тогда
											СтруктураНастроекВыгрузки.ИмяМакетаТЧ = ДочернийУзел5.ТекстовоеСодержимое;
										ИначеЕсли ВРег(ДочернийУзел5.ИмяУзла) = ВРег("Наименование") Тогда
											СтруктураНастроекВыгрузки.Наименование = ДочернийУзел5.ТекстовоеСодержимое;
										КонецЕсли;
									КонецЦикла;
									МассивНастройкиВыгрузки.Добавить(СтруктураНастроекВыгрузки);
								КонецЕсли;
							КонецЦикла;
						ИначеЕсли ВРег(ДочернийУзел3.ИмяУзла) = ВРег("НастройкиЗагрузки") Тогда
							Для Каждого ДочернийУзел4 Из ДочернийУзел3.ДочерниеУзлы Цикл 
								Если ВРег(ДочернийУзел4.ИмяУзла) = ВРег("ИмяШаблона") Тогда
									АтрибутИмяШаблона = ДочернийУзел4.Атрибуты.ПолучитьИменованныйЭлемент("ИмяШаблона"); 
									Если АтрибутИмяШаблона = Неопределено Тогда
										Продолжить;
									КонецЕсли;
									
									СтруктураНастроекЗагрузки = Новый Структура("Наименование,ЕДРПОУВладельцаШаблона,ИмяШаблона,ВерсияШаблона,ВидДокумента1С,ИмяМакетаЗагрузки,ТиповаяСхемма");
									СтруктураНастроекЗагрузки.ИмяШаблона = АтрибутИмяШаблона.ТекстовоеСодержимое;
									СтруктураНастроекЗагрузки.ТиповаяСхемма = Ложь;
									
									АтрибутЕДРПОУВладельцаШаблона = ДочернийУзел4.Атрибуты.ПолучитьИменованныйЭлемент("ЕДРПОУВладельцаШаблона"); 
									Если АтрибутЕДРПОУВладельцаШаблона <> Неопределено Тогда
										СтруктураНастроекЗагрузки.ЕДРПОУВладельцаШаблона = АтрибутЕДРПОУВладельцаШаблона.ТекстовоеСодержимое;
									КонецЕсли;
									АтрибутВерсияШаблона = ДочернийУзел4.Атрибуты.ПолучитьИменованныйЭлемент("ВерсияШаблона"); 
									Если АтрибутВерсияШаблона <> Неопределено Тогда
										СтруктураНастроекЗагрузки.ВерсияШаблона = АтрибутВерсияШаблона.ТекстовоеСодержимое;
									КонецЕсли;
									
									Для Каждого ДочернийУзел5 Из ДочернийУзел4.ДочерниеУзлы Цикл 
										Если ВРег(ДочернийУзел5.ИмяУзла) = ВРег("ВидДокумента1С") Тогда
											СтруктураНастроекЗагрузки.ВидДокумента1С = ДочернийУзел5.ТекстовоеСодержимое;
										ИначеЕсли ВРег(ДочернийУзел5.ИмяУзла) = ВРег("ИмяМакетаЗагрузки") Тогда
											СтруктураНастроекЗагрузки.ИмяМакетаЗагрузки = ДочернийУзел5.ТекстовоеСодержимое;
										ИначеЕсли ВРег(ДочернийУзел5.ИмяУзла) = ВРег("Наименование") Тогда
											СтруктураНастроекЗагрузки.Наименование = ДочернийУзел5.ТекстовоеСодержимое;
										ИначеЕсли ВРег(ДочернийУзел5.ИмяУзла) = ВРег("ТиповаяСхемма") Тогда
											СтруктураНастроекЗагрузки.ТиповаяСхемма = ?(ВРег(СокрЛП(ДочернийУзел5.ТекстовоеСодержимое)) = "ИСТИНА", Истина, Ложь);
										КонецЕсли;
									КонецЦикла;
									МассивНастройкиЗагрузки.Добавить(СтруктураНастроекЗагрузки);
								КонецЕсли;
							КонецЦикла;
						ИначеЕсли ВРег(ДочернийУзел3.ИмяУзла) = ВРег("НастройкиСоответствияВидовЭлектронныхИУчетныхДокументов") Тогда
							Для Каждого ДочернийУзел4 Из ДочернийУзел3.ДочерниеУзлы Цикл 
								Если ВРег(ДочернийУзел4.ИмяУзла) = ВРег("Условие") Тогда
									
									СтруктураНастроекСоответствияВидовЭлектронныхИУчетныхДокументов = Новый Структура("ВидДокументаДляНастройки,ЗаполненыУслуги,ЗаполненыТовары,ВходящийИсходящий");
									
									Для Каждого ДочернийУзел5 Из ДочернийУзел4.ДочерниеУзлы Цикл 
										Если ВРег(ДочернийУзел5.ИмяУзла) = ВРег("ВидДокументаДляНастройки") Тогда
											СтруктураНастроекСоответствияВидовЭлектронныхИУчетныхДокументов.ВидДокументаДляНастройки = ДочернийУзел5.ТекстовоеСодержимое;
										ИначеЕсли ВРег(ДочернийУзел5.ИмяУзла) = ВРег("ЗаполненыУслуги") Тогда
											СтруктураНастроекСоответствияВидовЭлектронныхИУчетныхДокументов.ЗаполненыУслуги = ДочернийУзел5.ТекстовоеСодержимое;
										ИначеЕсли ВРег(ДочернийУзел5.ИмяУзла) = ВРег("ЗаполненыТовары") Тогда
											СтруктураНастроекСоответствияВидовЭлектронныхИУчетныхДокументов.ЗаполненыТовары = ДочернийУзел5.ТекстовоеСодержимое;
										ИначеЕсли ВРег(ДочернийУзел5.ИмяУзла) = ВРег("ВходящийИсходящий") Тогда
											СтруктураНастроекСоответствияВидовЭлектронныхИУчетныхДокументов.ВходящийИсходящий = ДочернийУзел5.ТекстовоеСодержимое;
										КонецЕсли;
									КонецЦикла;
									МассивНастройкиСоответствияВидовЭлектронныхИУчетныхДокументов.Добавить(СтруктураНастроекСоответствияВидовЭлектронныхИУчетныхДокументов);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						СтруктураНастройки_XML.Вставить("НастройкиВыгрузки", МассивНастройкиВыгрузки);
						СтруктураНастройки_XML.Вставить("НастройкиЗагрузки", МассивНастройкиЗагрузки);
						СтруктураНастройки_XML.Вставить("НастройкиСоответствияВидовЭлектронныхИУчетныхДокументов", МассивНастройкиСоответствияВидовЭлектронныхИУчетныхДокументов);
					КонецЦикла;
					МассивНастроек.Добавить(СтруктураНастройки_XML);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	НастройкиПоШаблону = Новый СписокЗначений;
	НастройкиПоШаблону.ЗагрузитьЗначения(МассивНастроек);
	
	ЧтениеXML.Закрыть();
	
	ЗагрузитьНастройку_Сервер(НастройкиПоШаблону);
	
КонецПроцедуры

Процедура ЗагрузитьНастройку_Сервер(НастройкиПоШаблону)
	
	МассивНастроек = НастройкиПоШаблону.ВыгрузитьЗначения();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	скEDI_ВидыЭлектронныхДокументов.Ссылка,
	|	скEDI_ВидыЭлектронныхДокументов.Владелец
	|ИЗ
	|	Справочник.скEDI_ВидыЭлектронныхДокументов КАК скEDI_ВидыЭлектронныхДокументов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОрганизацияEDI = Выборка.Владелец;
		ИмяЭлектронногоДокумента = Выборка.Ссылка.Наименование;

		Для Каждого ЭлементМассива Из МассивНастроек Цикл
			Если ЭлементМассива.ИмяЭлектронногоДокумента = ИмяЭлектронногоДокумента Тогда
				СписокВидовДокументов1С = Новый СписокЗначений;
				Для Каждого ЭлементНастройкиВыгрузки Из ЭлементМассива.НастройкиВыгрузки Цикл
					Если СписокВидовДокументов1С.НайтиПоЗначению(ЭлементНастройкиВыгрузки.ВидДокумента1С) = Неопределено Тогда
						СписокВидовДокументов1С.Добавить(ЭлементНастройкиВыгрузки.ВидДокумента1С);
					КонецЕсли;
				КонецЦикла;
				
				ВидЭлектронногоДокумента = Справочники.скEDI_ВидыЭлектронныхДокументов.НайтиПоНаименованию(ИмяЭлектронногоДокумента, Истина,,ОрганизацияEDI);
				ТипЭлектронногоДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов[ЭлементМассива.ТипЭлектронногоДокумента];
				ВариантОпределенияСуммыПоДокументу = Перечисления.скEDI_ВариантыОпределенияСуммыПоДокументу[ЭлементМассива.ВариантОпределенияСуммыПоДокументу];

				Если ВидЭлектронногоДокумента = Справочники.скEDI_ВидыЭлектронныхДокументов.ПустаяСсылка() Тогда
					ВидЭлектронногоДокументаОбъект 				= Справочники.скEDI_ВидыЭлектронныхДокументов.СоздатьЭлемент();
					ВидЭлектронногоДокументаОбъект.Владелец 	= ОрганизацияEDI;
					ВидЭлектронногоДокументаОбъект.Наименование = ИмяЭлектронногоДокумента;
					ВидЭлектронногоДокументаОбъект.ЭтоПредопределенный = Истина;
					ВидЭлектронногоДокументаОбъект.ТипДокумента = ТипЭлектронногоДокумента;
					ВидЭлектронногоДокументаОбъект.ВариантОпределенияСуммыПоДокументу = ВариантОпределенияСуммыПоДокументу;
					Если ТипЭлектронногоДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная
						ИЛИ ТипЭлектронногоДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной
						ИЛИ ТипЭлектронногоДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.ЗапросНаПолучениеВедомостейЕРНН Тогда
						ВидЭлектронногоДокументаОбъект.ТипПериодаСчетчика = Перечисления.скEDI_ТипПериодаСчетчика.Месяц;
					КонецЕсли;
					ВидЭлектронногоДокументаОбъект.НалоговыйДокументПроверятьСоответствиеПодписантаИСертификата = ЭлементМассива.НалоговыйДокументПроверятьСоответствиеПодписантаИСертификата;
					ВидЭлектронногоДокументаОбъект.НалоговыйДокументВыполнятьПроверкуПоXSDСхеме = ЭлементМассива.НалоговыйДокументВыполнятьПроверкуПоXSDСхеме;
					ВидЭлектронногоДокументаОбъект.НалоговыйДокументВыполнятьЛогическуюПроверку = ЭлементМассива.НалоговыйДокументВыполнятьЛогическуюПроверку;
					ВидЭлектронногоДокументаОбъект.НалоговыйДокументДействияПриОбнаруженииОшибок = ЭлементМассива.НалоговыйДокументДействияПриОбнаруженииОшибок;
					
					ВидЭлектронногоДокументаОбъект.ПометкаУдаления  = Ложь;
					ВидЭлектронногоДокументаОбъект.Записать();
					ВидЭлектронногоДокумента = ВидЭлектронногоДокументаОбъект.Ссылка;
				КонецЕсли;
				
				Для Каждого ЭлементСпискаВидДокумента1С Из СписокВидовДокументов1С Цикл
					
					ВидДокумента1С = Перечисления.скEDI_ВидыДокументов1С[ЭлементСпискаВидДокумента1С.Значение];
					
					// исходящие документы
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	скEDI_ПравилаВыгрузки.ВидЭлектронногоДокумента,
					|	скEDI_ПравилаВыгрузки.ВидДокумента1С,
					|	скEDI_ПравилаВыгрузки.Приоритет,
					|	скEDI_ПравилаВыгрузки.ИмяШаблона,
					|	скEDI_ПравилаВыгрузки.Использование,
					|	скEDI_ПравилаВыгрузки.ЭтоПредопределенный
					|ИЗ
					|	РегистрСведений.скEDI_ПравилаВыгрузки КАК скEDI_ПравилаВыгрузки";
					Запрос.УстановитьПараметр("ВидЭлектронногоДокумента", ВидЭлектронногоДокумента);
					Запрос.УстановитьПараметр("ВидДокумента1С"			, ВидДокумента1С);
					ТЗ_ПравилаВыгрузки = Запрос.Выполнить().Выгрузить();
					
					НаборЗаписейПравилВыгрузки = РегистрыСведений.скEDI_ПравилаВыгрузки.СоздатьНаборЗаписей();
					НаборЗаписейПравилВыгрузки.Отбор.ВидЭлектронногоДокумента.Установить(ВидЭлектронногоДокумента);
					НаборЗаписейПравилВыгрузки.Отбор.ВидДокумента1С.Установить(ВидДокумента1С);
					НаборЗаписейПравилВыгрузки.Прочитать();
					
					Приоритет = 0;
					СписокШаблоновКДобавлению = Новый СписокЗначений;
					Для Каждого СтрокаНабораЗаписейПравилВыгрузки Из НаборЗаписейПравилВыгрузки Цикл
						Для Каждого ЭлементМассиваНастройкиВыгрузки Из ЭлементМассива.НастройкиВыгрузки Цикл
							Приоритет = Макс(Приоритет, СтрокаНабораЗаписейПравилВыгрузки.Приоритет);
							Если СтрокаНабораЗаписейПравилВыгрузки.ИмяШаблона <> ЭлементМассиваНастройкиВыгрузки.ИмяШаблона Тогда
								Продолжить;	
							КонецЕсли;
							
							НайденныеСтроки = ТЗ_ПравилаВыгрузки.НайтиСтроки(Новый Структура("ИмяШаблона", СтрокаНабораЗаписейПравилВыгрузки.ИмяШаблона));
							Если НайденныеСтроки.Количество() = 0 Тогда
								СписокШаблоновКДобавлению.Добавить(ЭлементМассиваНастройкиВыгрузки.ИмяШаблона,, Истина);
								Продолжить;
							КонецЕсли;
							
							Если НЕ СтрокаНабораЗаписейПравилВыгрузки.ЭтоПредопределенный Тогда
								НайденныеСтроки = ТЗ_ПравилаВыгрузки.НайтиСтроки(Новый Структура("ИмяШаблона, ЭтоПредопределенный", СтрокаНабораЗаписейПравилВыгрузки.ИмяШаблона, Истина));
								Если НайденныеСтроки.Количество() = 0 Тогда
									СписокШаблоновКДобавлению.Добавить(ЭлементМассиваНастройкиВыгрузки.ИмяШаблона,, Ложь);
									Продолжить;
								Иначе
									Продолжить;
								КонецЕсли;
							КонецЕсли;
							
							Если ЭлементМассиваНастройкиВыгрузки.ВидДокумента1С = ЭлементСпискаВидДокумента1С.Значение Тогда
								МакетШапка= Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет(ЭлементМассиваНастройкиВыгрузки.ИмяМакетаШапка);
								ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
								МакетШапка.Записать(ИмяВременногоФайла);
								ЧтениеХМЛ = новый ЧтениеXML;
								ЧтениеХМЛ.ОткрытьФайл(ИмяВременногоФайла);
								СхемаВыгрузки0 = СериализаторXDTO.ПрочитатьXML(ЧтениеХМЛ,Тип("СхемаКомпоновкиДанных"));  
								
								ИмяМакетаТЧ = "";
								Если ЭлементМассиваНастройкиВыгрузки.Свойство("ИмяМакетаТЧ", ИмяМакетаТЧ) Тогда 
									Если ЗначениеЗаполнено(ИмяМакетаТЧ) Тогда
										МакетТЧ= Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет(ЭлементМассиваНастройкиВыгрузки.ИмяМакетаТЧ);
										ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
										МакетТЧ.Записать(ИмяВременногоФайла);
										ЧтениеХМЛ = новый ЧтениеXML;
										ЧтениеХМЛ.ОткрытьФайл(ИмяВременногоФайла);
										СхемаВыгрузки1 = СериализаторXDTO.ПрочитатьXML(ЧтениеХМЛ,Тип("СхемаКомпоновкиДанных")); 
									КонецЕсли;
								Иначе
									СхемаВыгрузки1 = Неопределено;
								КонецЕсли;
								
								СтрокаНабораЗаписейПравилВыгрузки.Схема0 	  = Новый ХранилищеЗначения(СхемаВыгрузки0);
								Если СхемаВыгрузки1 <> Неопределено Тогда
									СтрокаНабораЗаписейПравилВыгрузки.Схема1 = Новый ХранилищеЗначения(СхемаВыгрузки1);
								КонецЕсли;

								СтрокаНабораЗаписейПравилВыгрузки.Использование = Истина;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					
					НаборЗаписейПустой = НаборЗаписейПравилВыгрузки.Количество() = 0;
					
					Для Каждого ЭлементМассиваНастройкиВыгрузки Из ЭлементМассива.НастройкиВыгрузки Цикл
						Если ЭлементМассиваНастройкиВыгрузки.ВидДокумента1С = ЭлементСпискаВидДокумента1С.Значение Тогда
							Если НаборЗаписейПустой Тогда
								Использовать = Истина;
							Иначе
								НайденныйШаблон = СписокШаблоновКДобавлению.НайтиПоЗначению(ЭлементМассиваНастройкиВыгрузки.ИмяШаблона);
								Если НайденныйШаблон = Неопределено Тогда 
									Продолжить;
								Иначе 
									Использовать = Истина;
								КонецЕсли;
							КонецЕсли;
							Приоритет = Приоритет + 1;
							МакетШапка= Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет(ЭлементМассиваНастройкиВыгрузки.ИмяМакетаШапка);
							ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
							МакетШапка.Записать(ИмяВременногоФайла);
							ЧтениеХМЛ = новый ЧтениеXML;
							ЧтениеХМЛ.ОткрытьФайл(ИмяВременногоФайла);
							СхемаВыгрузки0 = СериализаторXDTO.ПрочитатьXML(ЧтениеХМЛ,Тип("СхемаКомпоновкиДанных"));  
							
							ИмяМакетаТЧ = "";
							Если ЭлементМассиваНастройкиВыгрузки.Свойство("ИмяМакетаТЧ", ИмяМакетаТЧ) Тогда 
								Если ЗначениеЗаполнено(ИмяМакетаТЧ) Тогда
									МакетТЧ= Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет(ЭлементМассиваНастройкиВыгрузки.ИмяМакетаТЧ);
									ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
									МакетТЧ.Записать(ИмяВременногоФайла);
									ЧтениеХМЛ = новый ЧтениеXML;
									ЧтениеХМЛ.ОткрытьФайл(ИмяВременногоФайла);
									СхемаВыгрузки1 = СериализаторXDTO.ПрочитатьXML(ЧтениеХМЛ,Тип("СхемаКомпоновкиДанных")); 
								КонецЕсли;
							Иначе
								СхемаВыгрузки1 = Неопределено;
							КонецЕсли;
							
							НоваяСтрокаНабораЗаписейПравилВыгрузки = НаборЗаписейПравилВыгрузки.Добавить();
							НоваяСтрокаНабораЗаписейПравилВыгрузки.ВидЭлектронногоДокумента = ВидЭлектронногоДокумента;
							НоваяСтрокаНабораЗаписейПравилВыгрузки.ВидДокумента1С 			= ВидДокумента1С;
							НоваяСтрокаНабораЗаписейПравилВыгрузки.ЕДРПОУВладельцаШаблона	 = ЭлементМассиваНастройкиВыгрузки.ЕДРПОУВладельцаШаблона;
							НоваяСтрокаНабораЗаписейПравилВыгрузки.ИмяШаблона				= ЭлементМассиваНастройкиВыгрузки.ИмяШаблона;
							НоваяСтрокаНабораЗаписейПравилВыгрузки.ВерсияШаблона			 = ЭлементМассиваНастройкиВыгрузки.ВерсияШаблона;
							НоваяСтрокаНабораЗаписейПравилВыгрузки.Наименование				= ЭлементМассиваНастройкиВыгрузки.Наименование;
							НоваяСтрокаНабораЗаписейПравилВыгрузки.Приоритет				= Приоритет;
							НоваяСтрокаНабораЗаписейПравилВыгрузки.Схема0 = Новый ХранилищеЗначения(СхемаВыгрузки0);
							Если СхемаВыгрузки1 <> Неопределено Тогда
								НоваяСтрокаНабораЗаписейПравилВыгрузки.Схема1 = Новый ХранилищеЗначения(СхемаВыгрузки1);
							КонецЕсли;
							НоваяСтрокаНабораЗаписейПравилВыгрузки.ЭтоПредопределенный = Истина;
							НоваяСтрокаНабораЗаписейПравилВыгрузки.Использование = Истина;
						КонецЕсли;
					КонецЦикла;
					НаборЗаписейПравилВыгрузки.Записать(Истина);
				КонецЦикла;
				
				Для Каждого УсловиеДокумента Из ЭлементМассива.НастройкиСоответствияВидовЭлектронныхИУчетныхДокументов Цикл
					УсловияДокументов = РегистрыСведений.скEDI_УсловияДокументов1С.СоздатьМенеджерЗаписи();
					УсловияДокументов.ВидЭлектронногоДокумента = ВидЭлектронногоДокумента;
					
					лпВидДокумент1С = Перечисления.скEDI_ВидыДокументов1С[УсловиеДокумента.ВидДокументаДляНастройки];
					УсловияДокументов.ВидДокумента1С = лпВидДокумент1С;
					
					УсловияДокументов.Прочитать();
					Если не УсловияДокументов.Выбран() Тогда
						УсловияДокументов = РегистрыСведений.скEDI_УсловияДокументов1С.СоздатьМенеджерЗаписи();
						УсловияДокументов.ВидЭлектронногоДокумента = ВидЭлектронногоДокумента;
						
						лпВидДокумент1С = Перечисления.скEDI_ВидыДокументов1С[УсловиеДокумента.ВидДокументаДляНастройки];
						УсловияДокументов.ВидДокумента1С = лпВидДокумент1С;
						
						УсловияДокументов.ДолжныБытьУслуги = УсловиеДокумента.ЗаполненыУслуги = "Истина";
						УсловияДокументов.ДолжныБытьТовары = УсловиеДокумента.ЗаполненыТовары = "Истина";
						
						лпВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент[УсловиеДокумента.ВходящийИсходящий];
						УсловияДокументов.ВхИсх	   = лпВхИсх;
						УсловияДокументов.Условие  = Перечисления.скEDI_Условия.Включить;
						УсловияДокументов.ДатаС	   = НачалоДня(ТекущаяДата());
						УсловияДокументов.Записать(Истина);
					КонецЕсли;
				КонецЦикла;	
				
				// входящие документы
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	скEDI_ПравилаЗагрузки.Организация,
				|	скEDI_ПравилаЗагрузки.ИмяШаблона,
				|	скEDI_ПравилаЗагрузки.Приоритет,
				|	скEDI_ПравилаЗагрузки.ВидЭлектронногоДокумента,
				|	скEDI_ПравилаЗагрузки.Использование,
				|	скEDI_ПравилаЗагрузки.ВидДокумента1С,
				|	скEDI_ПравилаЗагрузки.ЭтоПредопределенный
				|ИЗ
				|	РегистрСведений.скEDI_ПравилаЗагрузки КАК скEDI_ПравилаЗагрузки
				|ГДЕ
				|	скEDI_ПравилаЗагрузки.Организация = &Организация
				|	И скEDI_ПравилаЗагрузки.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента";
				
				Запрос.УстановитьПараметр("ВидЭлектронногоДокумента", ВидЭлектронногоДокумента);
				Запрос.УстановитьПараметр("Организация", ОрганизацияEDI);
				ТЗ_ПравилаЗагрузкиДокументов = Запрос.Выполнить().Выгрузить();
				
				Для Каждого ЭлементМассиваНастройкиЗагрузки Из ЭлементМассива.НастройкиЗагрузки Цикл
					ВидДокумента1С = Перечисления.скEDI_ВидыДокументов1С[ЭлементМассиваНастройкиЗагрузки.ВидДокумента1С];
					ЕДРПОУВладельцаШаблона = ЭлементМассиваНастройкиЗагрузки.ЕДРПОУВладельцаШаблона;
					ИмяШаблона = ЭлементМассиваНастройкиЗагрузки.ИмяШаблона;
					ВерсияШаблона = ЭлементМассиваНастройкиЗагрузки.ВерсияШаблона;
					НаименованиеШаблона = ЭлементМассиваНастройкиЗагрузки.Наименование;
							
					НаборЗаписейПравилЗагрузки = РегистрыСведений.скEDI_ПравилаЗагрузки.СоздатьНаборЗаписей();
					НаборЗаписейПравилЗагрузки.Отбор.Организация.Установить(ОрганизацияEDI);
					НаборЗаписейПравилЗагрузки.Отбор.ЕДРПОУВладельцаШаблона.Установить(ЕДРПОУВладельцаШаблона);
					НаборЗаписейПравилЗагрузки.Отбор.ИмяШаблона.Установить(ИмяШаблона);
					НаборЗаписейПравилЗагрузки.Отбор.ВерсияШаблона.Установить(ВерсияШаблона);
					НаборЗаписейПравилЗагрузки.Прочитать();
					
					Приоритет = 0;
					СписокШаблоновКДобавлению = Новый СписокЗначений;
					Для Каждого СтрокаНабораЗаписейПравилЗагрузки Из НаборЗаписейПравилЗагрузки Цикл   
						
						Приоритет = Макс(Приоритет, СтрокаНабораЗаписейПравилЗагрузки.Приоритет);
						
						НайденныеСтроки = ТЗ_ПравилаЗагрузкиДокументов.НайтиСтроки(Новый Структура("ИмяШаблона", ИмяШаблона));
						Если НайденныеСтроки.Количество() = 0 Тогда
							СписокШаблоновКДобавлению.Добавить(ИмяШаблона,, Истина);
							Продолжить;
						КонецЕсли;
						
						Если НЕ СтрокаНабораЗаписейПравилЗагрузки.ЭтоПредопределенный Тогда
							НайденныеСтроки = ТЗ_ПравилаЗагрузкиДокументов.НайтиСтроки(Новый Структура("ИмяШаблона, ЭтоПредопределенный", СтрокаНабораЗаписейПравилЗагрузки.ИмяШаблона, Истина));
							Если НайденныеСтроки.Количество() = 0 Тогда
								СписокШаблоновКДобавлению.Добавить(ИмяШаблона,, Ложь);
								Продолжить;
							Иначе
								Продолжить;
							КонецЕсли;
						КонецЕсли;

						МакетЗагрузки = Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет(ЭлементМассиваНастройкиЗагрузки.ИмяМакетаЗагрузки);
						
						СтрокаНабораЗаписейПравилЗагрузки.Схема 		 = Новый ХранилищеЗначения(МакетЗагрузки);;
						НайденныеСтроки = ТЗ_ПравилаЗагрузкиДокументов.НайтиСтроки(Новый Структура("ИмяШаблона, ЭтоПредопределенный", СтрокаНабораЗаписейПравилЗагрузки.ИмяШаблона, Ложь));
						СтрокаНабораЗаписейПравилЗагрузки.Использование = Истина;
					КонецЦикла;
					
					НаборЗаписейПустой = НаборЗаписейПравилЗагрузки.Количество() = 0;
					
					Если НаборЗаписейПустой Тогда
						Использовать = Истина;
					Иначе
						НайденныйШаблон = СписокШаблоновКДобавлению.НайтиПоЗначению(ИмяШаблона);
						Если НайденныйШаблон = Неопределено Тогда 
							Продолжить;
						Иначе 
							Использовать = НайденныйШаблон.Пометка;
						КонецЕсли;
					КонецЕсли;

					Приоритет = Приоритет + 1;
					МакетЗагрузки = Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет(ЭлементМассиваНастройкиЗагрузки.ИмяМакетаЗагрузки);
					
					ПравилаЗагрузки = НаборЗаписейПравилЗагрузки.Добавить();
					ПравилаЗагрузки.Организация = ОрганизацияEDI;
					ПравилаЗагрузки.ЕДРПОУВладельцаШаблона  = ЕДРПОУВладельцаШаблона;
					ПравилаЗагрузки.ИмяШаблона  = ИмяШаблона;
					ПравилаЗагрузки.ВерсияШаблона  = ВерсияШаблона;
					ПравилаЗагрузки.Приоритет   = Приоритет;
					ПравилаЗагрузки.ВидЭлектронногоДокумента = ВидЭлектронногоДокумента;
					ПравилаЗагрузки.Схема 		   = Новый ХранилищеЗначения(МакетЗагрузки);;
					ПравилаЗагрузки.Использование  = Истина;
					ПравилаЗагрузки.ВидДокумента1С = ВидДокумента1С;
					ПравилаЗагрузки.Наименование   = НаименованиеШаблона;
					ПравилаЗагрузки.ЭтоПредопределенный = Истина;
					ПравилаЗагрузки.ТиповаяСхемма = ЭлементМассиваНастройкиЗагрузки.ТиповаяСхемма;
					НаборЗаписейПравилЗагрузки.Записать();
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура Заполнить_ЖурналРабочегоСтола_НастройкиПользователейПоУмолчанию_Релиз_1_1_3_12() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_РабочийСтол_НастройкиПользователейПоУмолчанию.Пользователь КАК Пользователь,
	               |	скEDI_РабочийСтол_НастройкиПользователейПоУмолчанию.ЖурналРабочегоСтола КАК ЖурналРабочегоСтола
	               |ИЗ
	               |	РегистрСведений.скEDI_РабочийСтол_НастройкиПользователейПоУмолчанию КАК скEDI_РабочийСтол_НастройкиПользователейПоУмолчанию
	               |ГДЕ
	               |	скEDI_РабочийСтол_НастройкиПользователейПоУмолчанию.ЖурналРабочегоСтола = ЗНАЧЕНИЕ(Перечисление.скEDI_ЖурналыРабочегоСтола.ПустаяСсылка)";
	ВыборкаНастройкиПользователей = Запрос.Выполнить().Выбрать();
	Пока ВыборкаНастройкиПользователей.Следующий() Цикл
		МенеджерЗаписи_НастройкиПользователей = РегистрыСведений.скEDI_РабочийСтол_НастройкиПользователейПоУмолчанию.СоздатьМенеджерЗаписи();
		МенеджерЗаписи_НастройкиПользователей.Пользователь = ВыборкаНастройкиПользователей.Пользователь;
		МенеджерЗаписи_НастройкиПользователей.ЖурналРабочегоСтола = ВыборкаНастройкиПользователей.ЖурналРабочегоСтола;
		МенеджерЗаписи_НастройкиПользователей.Прочитать();
		Если МенеджерЗаписи_НастройкиПользователей.Выбран() Тогда
			МенеджерЗаписи_НастройкиПользователей.ЖурналРабочегоСтола = Перечисления.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы;
			МенеджерЗаписи_НастройкиПользователей.НастройкаРабочегоСтола = Неопределено;
			МенеджерЗаписи_НастройкиПользователей.Записать(Истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура Заполнить_НастройкиВидаЭлектронногоДокументаСоглашениеОАнулировании_Релиз_1_1_3_15() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ВидыЭлектронныхДокументов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.скEDI_ВидыЭлектронныхДокументов КАК скEDI_ВидыЭлектронныхДокументов
	               |ГДЕ
	               |	скEDI_ВидыЭлектронныхДокументов.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент)
	               |	И скEDI_ВидыЭлектронныхДокументов.Наименование В (""Угода про анулювання документа"", ""Соглашение о анулировании документа"")";
	 
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		ВидЭлентрДокОбъект = ВыборкаЗапроса.Ссылка.ПолучитьОбъект();
		ВидЭлентрДокОбъект.ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента;
		ВидЭлентрДокОбъект.Наименование = "Угода про анулювання документа";
		ВидЭлентрДокОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьВидЄлектронногоДокументаСоглашениеОАнулировании_Релиз_1_1_3_15() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ВидыЭлектронныхДокументов.Владелец КАК Организация,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА скEDI_ВидыЭлектронныхДокументов.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента)
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ) КАК ЕстьДокументСоглашениеОАнулированииДокумента
	               |ИЗ
	               |	Справочник.скEDI_ВидыЭлектронныхДокументов КАК скEDI_ВидыЭлектронныхДокументов
	               |ГДЕ
	               |	НЕ скEDI_ВидыЭлектронныхДокументов.ПометкаУдаления
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	скEDI_ВидыЭлектронныхДокументов.Владелец";
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать();
	Пока ВыборкаОрганизации.Следующий() Цикл
		Если не ВыборкаОрганизации.ЕстьДокументСоглашениеОАнулированииДокумента Тогда
			НовыйВидЭлектронныхДокументов = Справочники.скEDI_ВидыЭлектронныхДокументов.СоздатьЭлемент();
			НовыйВидЭлектронныхДокументов.Владелец = ВыборкаОрганизации.Организация;
			НовыйВидЭлектронныхДокументов.Наименование = "Угода про анулювання документа";
			НовыйВидЭлектронныхДокументов.ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента;
			НовыйВидЭлектронныхДокументов.ВариантОпределенияСуммыПоДокументу = Перечисления.скEDI_ВариантыОпределенияСуммыПоДокументу.СуммаДокумента;
			НовыйВидЭлектронныхДокументов.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьТребуетПовторногоУтверждения_Релиз_1_1_3_16(ВыполняетсяИзФормыПовторноеУтверждение = Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ЭлектронныйДокумент.Организация КАК Организация,
	               |	скEDI_ЭлектронныйДокумент.Организация.Код КАК ОрганизацияКод,
	               |	скEDI_ЭлектронныйДокумент.Организация.Наименование КАК ОрганизацияНаименование,
	               |	скEDI_ЭлектронныйДокумент.Ссылка КАК Ссылка,
	               |	скEDI_ЭлектронныйДокумент.ИмяФайла КАК ИмяФайла,
	               |	скEDI_ЭлектронныйДокумент.Состояние КАК Состояние,
	               |	скEDI_ЭлектронныйДокумент.ВидЭлектронногоДокумента.Наименование КАК ВидЭлектронногоДокументаНаименование,
	               |	скEDI_ЭлектронныйДокумент.Дата КАК Дата,
	               |	скEDI_ЭлектронныйДокумент.Номер КАК Номер
	               |ИЗ
	               |	Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
	               |ГДЕ
	               |	скEDI_ЭлектронныйДокумент.ВидЭлектронногоДокумента.ТипДокумента В (ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент), ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями), ЗНАЧЕНИЕ(Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента))
	               |	И скEDI_ЭлектронныйДокумент.ПоследняяОперация >= ДАТАВРЕМЯ(2022, 11, 1, 0, 0, 0)
	               |	И скEDI_ЭлектронныйДокумент.Состояние В (ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьБухгалтеру), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьДиректору), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично_НаПодписьПечатью), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПодписанЧастично), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.Подписан), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.Отправлен), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоСообщениеОДоставке), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ПолученоПодтверждение), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.Получен), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияЭлектронныхДокументов.ОтправленоПодтверждение))
	               |	И скEDI_ЭлектронныйДокумент.ОсновнойЭлектронныйДокумент = ЗНАЧЕНИЕ(Документ.скEDI_ЭлектронныйДокумент.ПустаясСылка)";
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	ПровереноДокументов = 0;
	ПровереноДокументовОк = 0;
	ПровереноДокументовТребуетПереподписания = 0;
	ПровереноДокументовОшибка = 0;
	Пока ВыборкаЗапроса.Следующий() Цикл
		ПровереноДокументов = ПровереноДокументов + 1;
		ОшибкаПолученияСодержимогоЭлДок = "";
		СодержаниеЭлектронногоДокумента = скEDI_ОбщегоНазначения.ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ВыборкаЗапроса.Ссылка, , , , ОшибкаПолученияСодержимогоЭлДок);
		Если СодержаниеЭлектронногоДокумента = Неопределено Тогда
			ПровереноДокументовОшибка = ПровереноДокументовОшибка + 1;
			Если ОшибкаПолученияСодержимогоЭлДок = "" Тогда
				ОшибкаПолученияСодержимогоЭлДок = НСтр("ru = 'Нет содержимого Электронного документа.'; uk = 'Нема вмісту Електронного документу.'");
			КонецЕсли;
			Сообщить(ОшибкаПолученияСодержимогоЭлДок);
			Продолжить;
		КонецЕсли;
		
		Парам = Новый Структура;
		Парам.Вставить("MedocBody", СодержаниеЭлектронногоДокумента.ТелоДокумента);
		Парам2 = Новый Структура;
		Парам2.Вставить("Body", СодержаниеЭлектронногоДокумента.ИзображениеДокумента);
		Парам2.Вставить("FileName", "Form.pdf");
		Парам.Вставить("ImageBody", Парам2);
		
		МассивВложений = Новый Массив;
		Если ЗначениеЗаполнено(СодержаниеЭлектронногоДокумента.ВложениеДокумента1) Тогда
			МассивВложений.Добавить(СодержаниеЭлектронногоДокумента.ВложениеДокумента1);
		КонецЕсли;
		Если ЗначениеЗаполнено(СодержаниеЭлектронногоДокумента.ВложениеДокумента2) Тогда
			МассивВложений.Добавить(СодержаниеЭлектронногоДокумента.ВложениеДокумента2);
		КонецЕсли;
		Если ЗначениеЗаполнено(СодержаниеЭлектронногоДокумента.ВложениеДокумента3) Тогда
			МассивВложений.Добавить(СодержаниеЭлектронногоДокумента.ВложениеДокумента3);
		КонецЕсли;
		Если ТипЗнч(СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4) = Тип("Массив") Тогда
			Для Каждого ЭлементМассиваВложенийДокумента4 Из СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4 Цикл
				МассивВложений.Добавить(ЭлементМассиваВложенийДокумента4.ВложениеДокумента);
			КонецЦикла;
		КонецЕсли;
		Парам.Вставить("Attachments", МассивВложений);
		Парам.Вставить("GetExtenInfo", Ложь);
		
		лРезультатПроверкиДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/checkcskdoc", Парам);
		
		НаименованиеДокумента = ВыборкаЗапроса.ВидЭлектронногоДокументаНаименование + " №" + ВыборкаЗапроса.Номер + " " + НСтр("ru = 'от'; uk = 'від'") + " " + Формат(ВыборкаЗапроса.Дата, "ДФ=dd.MM.yyyy");
		Если лРезультатПроверкиДокумента.Code = 0 Тогда
			скEDI_ОбщегоНазначения.ЗафиксироватьСобытиеЭлектронногоДокумента(ВыборкаЗапроса.Ссылка, ПредопределенноеЗначение("Перечисление.скEDI_СобытияЭлектронныхДокументов.ПроверкаДокумента"), лРезультатПроверкиДокумента.Message);
			ПодписиДокументаКорректны = Ложь;
			IsBodyValid = Неопределено;
			IsImageBodyValid = Неопределено;
			IsAttachmentsValid = Неопределено;
			Если лРезультатПроверкиДокумента.Свойство("IsBodyValid", IsBodyValid) Тогда
				Если IsBodyValid = Истина Тогда
					ПодписиДокументаКорректны = Истина;
				КонецЕсли;
			КонецЕсли;
			Если лРезультатПроверкиДокумента.Свойство("IsImageBodyValid", IsImageBodyValid) Тогда
				Если IsImageBodyValid = Ложь Тогда
					ПодписиДокументаКорректны = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если лРезультатПроверкиДокумента.Свойство("IsAttachmentsValid", IsAttachmentsValid) Тогда
				Если IsAttachmentsValid = Ложь Тогда
					ПодписиДокументаКорректны = Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ПодписиДокументаКорректны Тогда
				ПровереноДокументовОк = ПровереноДокументовОк + 1;
			Иначе
				ПровереноДокументовТребуетПереподписания = ПровереноДокументовТребуетПереподписания + 1;
				ДокументОбъект = ВыборкаЗапроса.Ссылка.ПолучитьОбъект();
				ДокументОбъект.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ТребуетПовторногоУтверждения");
				ДокументОбъект.ОбменДанными.Загрузка= Истина;
				ДокументОбъект.Записать();
				
				Сообщение = НСтр("ru = 'Результат проверки документа'; uk = 'Результат перевірки документа'")
					+ " " + НаименованиеДокумента + " "
					+ НСтр("ru = 'по организации'; uk = 'по організації'")
					+ " """ + ВыборкаЗапроса.ОрганизацияНаименование + """"
					+ ": " + лРезультатПроверкиДокумента.Message;
				Сообщить(Сообщение);
			КонецЕсли;
		Иначе
			ПровереноДокументовОшибка = ПровереноДокументовОшибка + 1;
			Сообщение = НСтр("ru = 'Проверка документа'; uk = 'Перевірка документа'")
				+ " " + НаименованиеДокумента + " "
				+ НСтр("ru = 'не выполнена'; uk = 'не виконана'")
				+ ": " + лРезультатПроверкиДокумента.Message;
			Сообщить(Сообщение);
		КонецЕсли;
		//Прервать;
	КонецЦикла;
	Сообщить(НСтр("ru = 'Проверено документов'; uk = 'Перевірено документів'") + ": " + Строка(ПровереноДокументов));
	Если ПровереноДокументовОшибка > 0 Тогда
		Сообщить(НСтр("ru = 'Кількість помилок'; uk = 'Количество ошибок'") + ": " + Строка(ПровереноДокументовОшибка));
	КонецЕсли;
	Сообщить(НСтр("ru = 'Документов, которые требуют повторного подписания'; uk = 'Документів, що потребують повторного підписання'") + ": " + Строка(ПровереноДокументовТребуетПереподписания));
	Если ПровереноДокументовТребуетПереподписания > 0 Тогда
		Если не ВыполняетсяИзФормыПовторноеУтверждение Тогда
			Сообщить(НСтр("ru = 'Перейдите в форму ""Повторное утверждение» главного меню FlyDoc.""'; uk = 'Перейдіть в форму ""Повторне затвердження» головного меню FlyDoc.""'"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьСпособОтправкиНалоговыхДокументовКонтрагенту_Релиз_1_1_3_16() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	скEDI_Организации.Ссылка КАК Ссылка,
		|	скEDI_Организации.Наименование КАК Наименование
		|ИЗ
		|	Справочник.скEDI_Организации КАК скEDI_Организации
		|ГДЕ
		|	скEDI_Организации.СпособОтправкиНалоговыхДокументовКонтрагенту <> ЗНАЧЕНИЕ(Перечисление.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезДФС)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОрганизацияEDI = Выборка.Ссылка.ПолучитьОбъект();
		ОрганизацияEDI.СпособОтправкиНалоговыхДокументовКонтрагенту = Перечисления.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезДФС;
		ОрганизацияEDI.Записать();
		
		Сообщить(
			НСтр("ru = 'Для организации'; uk = 'Для організації'")
			+ " """ + Выборка.Наименование + """ "
			+ НСтр("ru = 'значение реквизита ""Способ отправки Приложений №2 Контрагенту"" изменено на'; uk = 'значення реквізиту ""Спосіб відправки Додатків №2 Контрагенту"" змінено на'")
			+ " """ + Строка(Перечисления.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезДФС) + """"
		);
	КонецЦикла;
КонецПроцедуры
