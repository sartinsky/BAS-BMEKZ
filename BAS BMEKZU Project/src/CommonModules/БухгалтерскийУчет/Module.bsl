///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ СО СЧЕТАМИ И СУБКОНТО

// Снимает/устанавливает активность проводок документа (бух. учет).
//
Процедура ПереключитьАктивностьПроводокБУ(Документ) Экспорт
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ПометкаУдаления") Тогда
		Возврат;
	КонецЕсли;

	ПроводкиДокумента = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	ПроводкиДокумента.Отбор.Регистратор.Установить(Документ);
	ПроводкиДокумента.Прочитать();

	КоличествоПроводок = ПроводкиДокумента.Количество();
	Если НЕ (КоличествоПроводок = 0) Тогда
		
		// Определяем текущую активность проводок по первой проводке
		ТекущаяАктивностьПроводок = ПроводкиДокумента[0].Активность;

		// Инвертируем текущую активность проводок
		ПроводкиДокумента.УстановитьАктивность(НЕ ТекущаяАктивностьПроводок);
		ПроводкиДокумента.ОбменДанными.Загрузка = Истина;
		ПроводкиДокумента.Записать();

	КонецЕсли;
		
КонецПроцедуры // ПереключитьАктивностьПроводокБУ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СЧЕТАМИ И СУБКОНТО

// Процедура устанавливает субконто на счете. Если такое субконто на счете
// отсутствует, то ничего не делается.
//
// Параметры:
//		Счет - Счет, к которому относится субконто
//      Субконто - набор субконто
//		Номер или имя устанавливаемого субконто
//      Значение субконто - значение устанавливаемого субконто
//
Процедура УстановитьСубконто(Счет, Субконто, ИмяСубконто, ЗначениеСубконто) Экспорт

	Если НЕ ЗначениеЗаполнено(ИмяСубконто) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	
	Если ТипЗнч(ИмяСубконто) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные") Тогда
		
		ВидСубконто = ИмяСубконто;
		
		Если СвойстваСчета.ВидСубконто1 <> ВидСубконто
			И СвойстваСчета.ВидСубконто2 <> ВидСубконто
			И СвойстваСчета.ВидСубконто3 <> ВидСубконто Тогда
			
			Возврат;
			
		КонецЕсли;

	ИначеЕсли ТипЗнч(ИмяСубконто) = Тип("Число") Тогда

		Если ИмяСубконто > СвойстваСчета.КоличествоСубконто Тогда
			Возврат;
		КонецЕсли;

		ВидСубконто = СвойстваСчета["ВидСубконто" + ИмяСубконто];

	Иначе

		ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[ИмяСубконто];

		Если СвойстваСчета.ВидСубконто1 <> ВидСубконто
			И СвойстваСчета.ВидСубконто2 <> ВидСубконто
			И СвойстваСчета.ВидСубконто3 <> ВидСубконто Тогда
			
			Возврат;
			
		КонецЕсли;

	КонецЕсли;
		
	Если ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		
		Субконто.Вставить(ВидСубконто, ЗначениеСубконто);
		
	КонецЕсли;

КонецПроцедуры // УстановитьСубконто()

Функция ПолучитьМассивСчетовССубсчетами(МассивСчетов, ОтборПоПризнакуСчетГруппа = Ложь, ОтборПоПризнакуВалютный = Неопределено, ОтборПоПризнакуЗабалансовый = Неопределено, СчетаИсключения = Неопределено)	Экспорт

	Если ОтборПоПризнакуСчетГруппа = Неопределено Тогда
		УсловиеПоСчтеамГруппам = "";
	Иначе
		УсловиеПоСчтеамГруппам = ?(ОтборПоПризнакуСчетГруппа, "И Хозрасчетный.ЗапретитьИспользоватьВПроводках", "И (НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках)");
	КонецЕсли; 
	
	Если ОтборПоПризнакуЗабалансовый = Неопределено Тогда
		УсловиеПоЗабалансовым = "";
	Иначе
		УсловиеПоЗабалансовым = ?(ОтборПоПризнакуЗабалансовый, "И Хозрасчетный.Забалансовый", "И (НЕ Хозрасчетный.Забалансовый)");
	КонецЕсли; 
	
	Если ОтборПоПризнакуВалютный = Неопределено Тогда
		УсловиеПоВалютным = "";
	Иначе
		УсловиеПоВалютным = ?(ОтборПоПризнакуВалютный, "И Хозрасчетный.Валютный", "И (НЕ Хозрасчетный.Валютный)");
	КонецЕсли; 
	
	Если СчетаИсключения = Неопределено ИЛИ СчетаИсключения.Количество() = 0 Тогда
		УсловиеПоИсключениям = "";
	Иначе
		УсловиеПоИсключениям = "И (НЕ Хозрасчетный.Ссылка В (&СчетаИсключения))";
	КонецЕсли; 
	
	Если МассивСчетов.Количество() = 0 Тогда
		УсловиеПоОтбору = "1 = 1";
	Иначе
		УсловиеПоОтбору = "Хозрасчетный.Ссылка В ИЕРАРХИИ(&МассивСчетов)";
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетов",    МассивСчетов);
	Запрос.УстановитьПараметр("СчетаИсключения", СчетаИсключения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	" + УсловиеПоОтбору + "
	|	" + УсловиеПоСчтеамГруппам + "
	|	" + УсловиеПоВалютным + "
	|	" + УсловиеПоЗабалансовым + "
	|	" + УсловиеПоИсключениям + "
	|УПОРЯДОЧИТЬ ПО
	|	Хозрасчетный.Код
	|";
	
	МассивСчетовССубсчетами = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат МассивСчетовССубсчетами;

КонецФункции
 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ ДОКУМЕНТОВ ПО ДВИЖЕНИЮ ДЕНЕЖНЫХ СРЕДСТВ

Функция ПолучитьМассивСчетовДенежныхСредств(МассивСчетовОтбора, ОтборПоПризнакуВалютный = Ложь, СчетОтбораПоПризнакуВалютный = Неопределено, МассивСчетовИсключений = Неопределено) Экспорт
	
	МассивСчетов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетовОтбора"    , МассивСчетовОтбора);
	Запрос.УстановитьПараметр("МассивСчетовИсключений", МассивСчетовИсключений);
	
	Запрос.УстановитьПараметр("ОтбиратьПоПризнакуВалютный", ОтборПоПризнакуВалютный);
	   
	Если ТипЗнч(СчетОтбораПоПризнакуВалютный) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Запрос.УстановитьПараметр("Валютный", СчетОтбораПоПризнакуВалютный.Валютный);
	Иначе
		Запрос.УстановитьПараметр("Валютный", Ложь);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	Хозрасчетный.Код КАК Код,
	|	Хозрасчетный.Наименование КАК Наименование
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (&МассивСчетовОтбора)
	|	И (НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках)
	|	И (НЕ &ОтбиратьПоПризнакуВалютный
	|			ИЛИ Хозрасчетный.Валютный = &Валютный)
	|   И Хозрасчетный.Ссылка Не В (&МассивСчетовИсключений)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСчетов.Добавить(Выборка.Счет);
	КонецЦикла;
	
	Возврат МассивСчетов;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРОВЕРКИ ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ

// Проверяет элементы справочника "Схемы реализации" из реквизита табличной части
// документа на правильность заполнения
//
Процедура ПроверитьСхемыРеализацииТабличнойЧастиНаЗаполненость(ДокументОбъект, ИмяСписка, СинонимСписка, ИмяРеквизитаСхемаРеализации, СинонимРеквизитаСхемаРеализации , МассивРеквизитовДляПроверки, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МетаданныеРеквизиты = Метаданные.Справочники.СхемыРеализации.Реквизиты;
	
	ТаблицаРеквизитовДляПроверки = Новый ТаблицаЗначений;
	ТаблицаРеквизитовДляПроверки.Колонки.Добавить("ПредставлениеСчета");
	ТаблицаРеквизитовДляПроверки.Колонки.Добавить("Суффикс");
	Для Каждого СчетИмяРеквизита Из МассивРеквизитовДляПроверки Цикл
		НоваяСтрока = ТаблицаРеквизитовДляПроверки.Добавить();
		НоваяСтрока.ПредставлениеСчета = МетаданныеРеквизиты[СчетИмяРеквизита].Представление();
		НоваяСтрока.Суффикс = Сред(СчетИмяРеквизита, Найти(Нрег(СчетИмяРеквизита),"счет") + 4);		
	КонецЦикла;	
	
	ДанныеТабличнойЧасти = ДокументОбъект[ИмяСписка].Выгрузить(, "НомерСтроки, "+ ИмяРеквизитаСхемаРеализации);
	ДанныеТабличнойЧасти.Колонки[ИмяРеквизитаСхемаРеализации].Имя = "СхемаРеализации";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеТабличнойЧасти", ДанныеТабличнойЧасти);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеТабличнойЧасти.НомерСтроки,
	|	ДанныеТабличнойЧасти.СхемаРеализации
	|ПОМЕСТИТЬ ДанныеТабличнойЧасти
	|ИЗ
	|	&ДанныеТабличнойЧасти КАК ДанныеТабличнойЧасти
	|;
	|
	|ВЫБРАТЬ
	|	ДанныеТабличнойЧасти.НомерСтроки,
	|	//ТекстВыборкиПоСчетамИСубконто
	|	ДанныеТабличнойЧасти.СхемаРеализации
	|ИЗ
	|	ДанныеТабличнойЧасти
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СхемыРеализации КАК СхемыРеализации
	|   	ПО ДанныеТабличнойЧасти.СхемаРеализации = СхемыРеализации.Ссылка";
	
	ТекстВыборкиПоСчетамИСубконто = "";
	Для Каждого РеквизитДляПроверки Из ТаблицаРеквизитовДляПроверки Цикл
		
		ТекстВыборкиПоСчетамИСубконто = ТекстВыборкиПоСчетамИСубконто + "
		|	СхемыРеализации.Счет"+ РеквизитДляПроверки.Суффикс + ",";
		
		Для сч = 1 По 3 Цикл
			ТекстВыборкиПоСчетамИСубконто = ТекстВыборкиПоСчетамИСубконто + "
			|	СхемыРеализации.Субконто"+ РеквизитДляПроверки.Суффикс + Формат(сч, "ЧГ=") +",";
		КонецЦикла;	
		
	КонецЦикла;	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ТекстВыборкиПоСчетамИСубконто", ТекстВыборкиПоСчетамИСубконто);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Для Каждого РеквизитДляПроверки Из ТаблицаРеквизитовДляПроверки Цикл
			
			Счет = Выборка["Счет" + РеквизитДляПроверки.Суффикс];
			
			Если Не ЗначениеЗаполнено(Счет) Тогда
				
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
					СинонимРеквизитаСхемаРеализации,
					Выборка.НомерСтроки, СинонимСписка,
					НСтр("ru='Не заполнено значение ""';uk='Не заповнене значення ""'") + РеквизитДляПроверки.ПредставлениеСчета + """"
				);
				Поле = ИмяСписка + "[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "]." + ИмяРеквизитаСхемаРеализации;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект, Поле, "Объект", Отказ);
			Иначе
				
	 			ВидыСубконто = Счет.ВидыСубконто; 
				Для сч = 1 По ВидыСубконто.Количество() Цикл
					
					Если ВидыСубконто[сч-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы Тогда
						// этот вид субконто и не должен быть заполнен в схеме	
					    Продолжить;
					КонецЕсли; 
					
					Субконто = Выборка["Субконто" + РеквизитДляПроверки.Суффикс + Формат(сч, "ЧГ=")];
					
					Если Не ЗначениеЗаполнено(Субконто) Тогда
						
						ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", "Корректность", 
							СинонимРеквизитаСхемаРеализации,
							Выборка.НомерСтроки, СинонимСписка,
							НСтр("ru='Не заполнено значение субконто ""';uk='Не заповнене значення субконто ""'") + ВидыСубконто[сч-1].ВидСубконто.Наименование + НСтр("ru='"" счета ""';uk='"" рахунки ""'") + РеквизитДляПроверки.ПредставлениеСчета + """"
						);
						Поле = ИмяСписка + "[" + Формат(Выборка.НомерСтроки - 1, "ЧН=0; ЧГ=") + "]." + ИмяРеквизитаСхемаРеализации;
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект, Поле, "Объект", Отказ);
										   
					КонецЕсли;

				КонецЦикла;
					
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
					
КонецПроцедуры

// Проверяет заполнена ли аналитика счета затрат в документе
Процедура ПроверитьЗаполнениеАналитикиЗатрат(ДокументОбъект, Отказ, ИмяРеквизитаСчетЗатрат = "СчетЗатрат") Экспорт
	
	Если ДокументОбъект.Метаданные().Реквизиты.Найти(ИмяРеквизитаСчетЗатрат) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийСчет = ДокументОбъект[ИмяРеквизитаСчетЗатрат];
	Если НЕ ЗначениеЗаполнено(ТекущийСчет) Тогда
		Возврат;
	КонецЕсли;
	
	
	КоличествоСубконтоСчета = ТекущийСчет.ВидыСубконто.Количество();
		
	Для Индекс = 1 по КоличествоСубконтоСчета Цикл
		
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект["Субконто"+Строка(Индекс)]) Тогда
			
			ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения( , ,
				"Субконто "+Строка(Индекс)
			);
			Поле = "Субконто"+Строка(Индекс);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект, Поле, "Объект", Отказ);
			
		КонецЕсли;
	КонецЦикла;

	
КонецПроцедуры

// Проверяет заполнена ли аналитика счета затрат в табличной части документа
Процедура ПроверитьЗаполнениеАналитикиЗатратТабличнойЧасти(ДокументОбъект, ИмяСписка, СинонимСписка, Отказ) Экспорт
	
	ТабличнаяЧасть      = ДокументОбъект[ИмяСписка];
	МетаданныеРеквизиты = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяСписка].Реквизиты;
	Если МетаданныеРеквизиты.Найти("СчетЗатрат") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Цикл по строкам табличной части.
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		
		ТекущийСчет = СтрокаТаблицы["СчетЗатрат"];
		
		Если НЕ ЗначениеЗаполнено(ТекущийСчет) Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоСубконтоСчета = ТекущийСчет.ВидыСубконто.Количество();
		
		Для Индекс = 1 по КоличествоСубконтоСчета Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы["Субконто"+Строка(Индекс)]) Тогда
				
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Колонка", , 
					"Субконто "+Строка(Индекс),
					СтрокаТаблицы.НомерСтроки, СинонимСписка
				);
				Поле = ИмяСписка + "[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Субконто"+Строка(Индекс);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект, Поле, "Объект", Отказ);

			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьСоответствиеАналитикиЗатратНалоговомуНазначению(ДокументОбъект, ИмяСписка, СинонимСписка, НоменклатурныеГруппыВТабличнойЧасти = Ложь, Отказ) Экспорт
	
	ТабличнаяЧасть = ДокументОбъект[ИмяСписка];
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МетаданныеРеквизиты = ДокументОбъект.Метаданные().Реквизиты;
	МетаданныеРеквизитыТЧ = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяСписка].Реквизиты;
	
	ПолеДляСообщенияПользователю = "";

	СчетЗатратВТабличнойЧасти = Ложь;
	
	Если (МетаданныеРеквизиты.Найти("СчетЗатрат") = Неопределено)Тогда
		
		СчетЗатратВТабличнойЧасти = Истина;
		
		Если(МетаданныеРеквизитыТЧ.Найти("СчетЗатрат") = Неопределено) Тогда
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли МетаданныеРеквизиты.Найти("СчетаУчетаЗатратВТаблице") <> Неопределено И ДокументОбъект.СчетаУчетаЗатратВТаблице Тогда
		
		СчетЗатратВТабличнойЧасти = Истина;
		
	КонецЕсли;
	
	Если Не СчетЗатратВТабличнойЧасти Тогда
		
		РеквизитАналитики = Неопределено;
		
		Если (МетаданныеРеквизиты.Найти("НоменклатурнаяГруппа") = Неопределено)Тогда
			
			Для Сч = 1 По 3 Цикл
				
				Если (МетаданныеРеквизиты.Найти("Субконто" + Сч) <> Неопределено) Тогда
					
					ТипСубконто = ТипЗнч(ДокументОбъект["Субконто" + Сч]);
					
					Если ТипСубконто = Тип("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат") Тогда
						
						РеквизитАналитики = ДокументОбъект["Субконто" + Сч];
						ПолеДляСообщенияПользователю = "Субконто" + Сч;
						Прервать
						
					ИначеЕсли ТипСубконто = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						
						РеквизитАналитики = ДокументОбъект["Субконто" + Сч].НалоговоеНазначениеВПроизводстве;
						ПолеДляСообщенияПользователю = "Субконто" + Сч;
						Прервать
						
					ИначеЕсли ТипСубконто = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
						
						РеквизитАналитики = ДокументОбъект["Субконто" + Сч].НалоговоеНазначение;
						ПолеДляСообщенияПользователю = "Субконто" + Сч;
						Прервать
						
					ИначеЕсли ТипСубконто = Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
						
						ХарактерЗатратРБП = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(ДокументОбъект["Субконто" + Сч].СчетБУ, Неопределено);
						
						Если    ХарактерЗатратРБП = "Производство"
							ИЛИ ХарактерЗатратРБП = "Строительство" 
							ИЛИ ХарактерЗатратРБП = "ОПЗ" Тогда
							
							РеквизитАналитики = ДокументОбъект["Субконто" + Сч].НалоговоеНазначение;
							ПолеДляСообщенияПользователю = "Субконто" + Сч;
							Прервать;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			РеквизитАналитики = ДокументОбъект.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве;
			ПолеДляСообщенияПользователю = "НоменклатурнаяГруппа";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВТЧЕстьСуточные = НЕ (МетаданныеРеквизитыТЧ.Найти("ЭтоСуточные") = Неопределено);
	
	
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		
		Если НоменклатурныеГруппыВТабличнойЧасти Тогда
			
			РеквизитАналитики = СтрокаТаблицы.НоменклатурнаяГруппа.НалоговоеНазначениеВПроизводстве;
			ПолеДляСообщенияПользователю = ИмяСписка + "[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].НоменклатурнаяГруппа";
			
		ИначеЕсли СчетЗатратВТабличнойЧасти Тогда 
					
			РеквизитАналитики = Неопределено;
			
			Для Сч = 1 По 3 Цикл
				
				Если (МетаданныеРеквизитыТЧ.Найти("Субконто" + Сч) <> Неопределено) Тогда
					
					ТипСубконто = ТипЗнч(СтрокаТаблицы["Субконто" + Сч]);
					
					Если ТипСубконто = Тип("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат") Тогда
						
						РеквизитАналитики = СтрокаТаблицы["Субконто" + Сч];
						ПолеДляСообщенияПользователю = ИмяСписка + "[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Субконто" + Сч;
						Прервать
						
					ИначеЕсли ТипСубконто = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
						
						РеквизитАналитики = СтрокаТаблицы["Субконто" + Сч].НалоговоеНазначениеВПроизводстве;
						ПолеДляСообщенияПользователю = ИмяСписка + "[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Субконто" + Сч;
						Прервать
						
					ИначеЕсли ТипСубконто = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
						
						РеквизитАналитики = СтрокаТаблицы["Субконто" + Сч].НалоговоеНазначение;
						ПолеДляСообщенияПользователю = ИмяСписка + "[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Субконто" + Сч;
						Прервать
						
					ИначеЕсли ТипСубконто = Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда
						
						ХарактерЗатратРБП = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаТаблицы["Субконто" + Сч].СчетБУ, Неопределено);
						
						Если    ХарактерЗатратРБП = "Производство"
							ИЛИ ХарактерЗатратРБП = "Строительство"
							ИЛИ ХарактерЗатратРБП = "ОПЗ"
							Тогда
							
							РеквизитАналитики = СтрокаТаблицы["Субконто" + Сч].НалоговоеНазначение;
							ПолеДляСообщенияПользователю = ИмяСписка + "[" + Формат(СтрокаТаблицы.НомерСтроки - 1, "ЧН=0; ЧГ=") + "].Субконто" + Сч;
							Прервать;
							
						КонецЕсли;
						
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ВТЧЕстьСуточные Тогда 
			Если СтрокаТаблицы.ЭтоСуточные Тогда 
				РеквизитАналитики = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если РеквизитАналитики = Неопределено Тогда
			
			Продолжить;
			
		Иначе
			
			СчетЗатрат     = ?(СчетЗатратВТабличнойЧасти, СтрокаТаблицы["СчетЗатрат"], ДокументОбъект["СчетЗатрат"]);
			ХарактерЗатрат = УправлениеПроизводствомВызовСервера.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатрат, Неопределено, ДокументОбъект.Дата);
			
			НалоговоеНазначение = Неопределено;
			Если МетаданныеРеквизитыТЧ.Найти("НалоговоеНазначение") <> Неопределено Тогда
				НалоговоеНазначение = СтрокаТаблицы.НалоговоеНазначение;
			Иначе
				ХарактерЗатрат = Неопределено;
				НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(СтрокаТаблицы, СтрокаТаблицы.Счет, ХарактерЗатрат,
														       	НалоговоеНазначение);
				Если ХарактерЗатрат = "ОПЗ" Тогда
					НалоговоеНазначение = РеквизитАналитики;				
				КонецЕсли;
			КонецЕсли;
			
			Если ХарактерЗатрат = "ТЗР" Тогда
				// контроль не нужен, т.к. Налоговое назначение в НГ имеет значение только для производтва
			ИначеЕсли ХарактерЗатрат = "Затраты" ИЛИ ХарактерЗатрат = "Прочие" Тогда
			    // контроль не нужен, т.к. при отнесении на затраты контроль по НДС не осуществляется (деятельность НДС декларируется при отнесении)
			ИначеЕсли НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
				
				Если РеквизитАналитики = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
										
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Налоговое назначение (НДС) <%1> нельзя относить на налоговое назначению затрат по нехоз. деятельности (<%2>)';uk='Податкове призначення (ПДВ) <%1> не можна відносити на податковий призначення витрат по негосп. діяльності (<%2>)'"),
						НалоговоеНазначение,
						РеквизитАналитики
					);
					
					ПозицияРазделителя = Найти(ПолеДляСообщенияПользователю, ".");
					Если ПозицияРазделителя = 0 Тогда
						ВидПоля = "Поле";
						ПредставлениеРеквизита = МетаданныеРеквизиты[ПолеДляСообщенияПользователю];
					Иначе
						ВидПоля = "Колонка";
						ПредставлениеРеквизита = МетаданныеРеквизитыТЧ[Сред(ПолеДляСообщенияПользователю, ПозицияРазделителя+1)];
					КонецЕсли;
					ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(ВидПоля, "Корректность", 
						ПредставлениеРеквизита,
						СтрокаТаблицы.НомерСтроки, СинонимСписка,
						СтрокаСообщения
					);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект, ПолеДляСообщенияПользователю, "Объект", Отказ);
										
				КонецЕсли;
			
			ИначеЕсли РеквизитАналитики <> НалоговоеНазначение Тогда
								
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Налоговое назначение (НДС) <%1> не соответствует налоговому назначению затрат <%2>';uk='Податкове призначення (ПДВ) <%1> не відповідає податковому призначенню витрат <%2>'"),
					НалоговоеНазначение,
					РеквизитАналитики
				);
				
				ПозицияРазделителя = Найти(ПолеДляСообщенияПользователю, ".");
				Если ПозицияРазделителя = 0 Тогда
					ВидПоля = "Поле";
					ПредставлениеРеквизита = МетаданныеРеквизиты[ПолеДляСообщенияПользователю];
				Иначе
					ВидПоля = "Колонка";
					ПредставлениеРеквизита = МетаданныеРеквизитыТЧ[Сред(ПолеДляСообщенияПользователю, ПозицияРазделителя+1)];
				КонецЕсли;
				ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(ВидПоля, "Корректность", 
					ПредставлениеРеквизита,
					СтрокаТаблицы.НомерСтроки, СинонимСписка,
					СтрокаСообщения
				);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект, ПолеДляСообщенияПользователю, "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьСоответствиеАналитикиЗатратНалоговомуНазначению
