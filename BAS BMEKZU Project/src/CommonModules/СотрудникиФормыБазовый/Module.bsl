////////////////////////////////////////////////////////////////////////////////
// СотрудникиФормыБазовый: методы, обслуживающие работу формы сотрудника
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы Сотрудника

Процедура СотрудникиПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = Форма.Параметры;
	
	СозданиеНового = Параметры.Ключ.Пустая();
	Форма.СозданиеНового = СозданиеНового;
	
	Если СозданиеНового Тогда
		Форма.ДоступенПросмотрДанныхФизическихЛиц					= Пользователи.РолиДоступны("ЧтениеДанныхФизическихЛицЗарплатаКадры,ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
		СотрудникиКлиентСервер.УстановитьВидимостьПолейФИО(Форма);
	КонецЕсли;
	
	ЗаданоФизическоеЛицо = Ложь;
	
	// Открытие форму существующего сотрудника
	Если НЕ СозданиеНового Тогда
		
		Форма.ФизическоеЛицоСсылка  = Форма.Сотрудник.ФизическоеЛицо;

	// Создание сотрудника из формы физического лица
	ИначеЕсли Параметры.Свойство("ФизическоеЛицо") 
		И ЗначениеЗаполнено(Параметры.ФизическоеЛицо) Тогда
		
		//возможно получение ссылки на физлицо через параметр формы
		Форма.ФизическоеЛицоСсылка = Параметры.ФизическоеЛицо;
		ЗаданоФизическоеЛицо = Истина;
		
	// Создание сотрудника путем копирования существующего
	ИначеЕсли ЗначениеЗаполнено(Форма.Сотрудник.ФизическоеЛицо) Тогда
		
		ЗаданоФизическоеЛицо = Истина;
		Форма.ФизическоеЛицоСсылка  = Форма.Сотрудник.ФизическоеЛицо;
		
	// Просто создание сотрудника
	Иначе
		
		// ссылка для нового физлица
		Форма.ФизическоеЛицоСсылка = Справочники.ФизическиеЛица.ПолучитьСсылку();
		
	КонецЕсли;
	
	// если форма нового сотрудника
	Если СозданиеНового Тогда 
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
			
			Форма.ДатаПриема = '00010101000000';
			
			Если Форма.Параметры.Свойство("ГоловнаяОрганизация") Тогда
				Форма.Сотрудник.ГоловнаяОрганизация = Форма.Параметры.ГоловнаяОрганизация;
			КонецЕсли; 
			
		Иначе
			
			// Если создаем нового сотрудника, то заполняем дату приема текущей датой
			Если НЕ ЗначениеЗаполнено(Форма.ДатаПриема) Тогда
				Форма.ДатаПриема = ТекущаяДатаСеанса();
			КонецЕсли;
			
		КонецЕсли; 
		
		Форма.СотрудникСсылка = Справочники.Сотрудники.ПолучитьСсылку();
		
		Если ЗаданоФизическоеЛицо Тогда
			
			СотрудникиФормы.ПрочитатьДанныеСвязанныеССотрудником(Форма);
			
			УточнениеНаименованияФизическогоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ФизическоеЛицоСсылка, "УточнениеНаименования");
			Форма.Сотрудник.Наименование = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(
				Форма.ФИОФизическихЛиц.Фамилия, 
				Форма.ФИОФизическихЛиц.Имя, 
				Форма.ФИОФизическихЛиц.Отчество, 
				УточнениеНаименованияФизическогоЛица,
				Форма.Сотрудник.УточнениеНаименования);
			
			СотрудникиКлиентСервер.УстановитьВидЗанятостиНовогоСотрудника(Форма);
			
		Иначе
			
			Форма.ФизическоеЛицоСсылка = Справочники.ФизическиеЛица.ПолучитьСсылку();
			
			// если это форма нового объекта - инициализация реквизитов формы, 
			// предназначенных для редактирования дополнительных
			// данных (помимо основного редактируемого объекта)
			РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ФИОФизическихЛиц", Форма.ФизическоеЛицоСсылка);
			
			
			СтруктураИзмерений = Новый Структура("ФизическоеЛицо", Форма.ФизическоеЛицоСсылка);
			Форма.ГражданствоФизическихЛиц = 
				Новый ФиксированнаяСтруктура(РедактированиеПериодическихСведенийВызовСервера.СтруктураМенеджераЗаписиПоСтруктуре("ГражданствоФизическихЛиц", СтруктураИзмерений));
				
			СтруктураИзмерений = Новый Структура("Физлицо", Форма.ФизическоеЛицоСсылка);
			Форма.ДокументыФизическихЛиц = 
				Новый ФиксированнаяСтруктура(РедактированиеПериодическихСведенийВызовСервера.СтруктураМенеджераЗаписиПоСтруктуре("ДокументыФизическихЛиц", СтруктураИзмерений));
				
			СотрудникиФормы.ФизическиеЛицаОбновитьЭлементыФормы(Форма);
			
		КонецЕсли;
		
		СотрудникиФормы.ИнициализироватьТекущиеДанныеСотрудника(Форма);
		
	Иначе
		
		Форма.СотрудникСсылка = Форма.Сотрудник.Ссылка;
		Форма.ФизическоеЛицоСсылка  = Форма.Сотрудник.ФизическоеЛицо;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Форма.Сотрудник);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(Форма, ДополнительныеПараметры);
	
	ДополнитьФормуСотрудника(Форма, "ДругиеРабочиеМеста");
	
	Если СозданиеНового Тогда
		
		СотрудникиФормы.ЗаполнитьПервоначальныеЗначения(Форма);

		Форма.ЦветСтиляПоясняющийТекст		= ЦветаСтиля.ПоясняющийТекст;
		Форма.ЦветСтиляПоясняющийОшибкуТекст 	= ЦветаСтиля.ПоясняющийОшибкуТекст;
		Форма.ЦветСтиляЦветТекстаПоля 		= ЦветаСтиля.ЦветТекстаПоля;
	
	КонецЕсли;
	
	Форма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Форма.ТекущаяОрганизация)));
	
	СотрудникиКлиентСервер.ЗаполнитьИнфоГруппыДоступа(Форма);
	Форма.СотрудникНаименование  = Форма.Сотрудник.Наименование;
	
	Если Форма.Параметры.Свойство("РежимОткрытияОкна") 
		И ЗначениеЗаполнено(Форма.Параметры.РежимОткрытияОкна) Тогда
		Форма.РежимОткрытияОкна = Форма.Параметры.РежимОткрытияОкна;
	КонецЕсли; 
	
	Форма.Заголовок = СотрудникиКлиентСервер.ЗаголовокФормыСотрудника(Форма);
	
КонецПроцедуры

Процедура СотрудникиПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Форма.ЦветСтиляПоясняющийТекст			= ЦветаСтиля.ПоясняющийТекст;
	Форма.ЦветСтиляПоясняющийОшибкуТекст 	= ЦветаСтиля.ПоясняющийОшибкуТекст;
	Форма.ЦветСтиляЦветТекстаПоля 			= ЦветаСтиля.ЦветТекстаПоля;
	
	Форма.ДоступенПросмотрДанныхФизическихЛиц = Пользователи.РолиДоступны("ЧтениеДанныхФизическихЛицЗарплатаКадры,ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
		
	Форма.ФизическоеЛицоСсылка = ТекущийОбъект.ФизическоеЛицо;
	Форма.СотрудникСсылка = ТекущийОбъект.Ссылка;
	СотрудникиФормы.ПрочитатьДанныеСвязанныеССотрудником(Форма);
	
	// элемент ВАрхиве показываем для новых сотрудников
	Форма.Элементы.ВАрхиве.Видимость = Истина;
	
КонецПроцедуры

Процедура СотрудникиПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если НЕ Форма.Параметры.Ключ.Пустая() Тогда
		СотрудникиФормы.ЗаписатьФизическоеЛицоСотрудника(Форма);
	КонецЕсли; 
	
	ЗаписатьТекущиеДанные(Форма, ТекущийОбъект.Ссылка);
	СотрудникиФормы.ЛичныеДанныеФизическогоЛицаПриЗаписи(Форма, Форма.ФизическоеЛицоСсылка, Форма.ТекущаяОрганизация);
	
	Если Форма.ГражданствоФизическихЛиц = Неопределено Тогда
		
		ИмяИзмерения = Метаданные.РегистрыСведений.ГражданствоФизическихЛиц.Измерения[0].Имя;
		СтруктураВедущихОбъектов = Новый Структура();
		СтруктураВедущихОбъектов.Вставить(ИмяИзмерения, Форма.ФизическоеЛицоСсылка);
		
		МенеджерЗаписиГражданствоФизическихЛиц = РедактированиеПериодическихСведений.МенеджерПоследнейЗаписи("ГражданствоФизическихЛиц", СтруктураВедущихОбъектов);
		
		Форма.ГражданствоФизическихЛиц = Новый ФиксированнаяСтруктура(
			ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(МенеджерЗаписиГражданствоФизическихЛиц, Метаданные.РегистрыСведений.ГражданствоФизическихЛиц));
			
	КонецЕсли; 
	
	Если Форма.ДокументыФизическихЛиц = Неопределено Тогда
		
		МенеджерЗаписиДокументыФизическихЛиц = МенеджерПоследнейЗаписиДокументовФизическихЛиц(Форма.ФизическоеЛицоСсылка);
		
		Форма.ДокументыФизическихЛиц = Новый ФиксированнаяСтруктура(
			ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(МенеджерЗаписиДокументыФизическихЛиц, Метаданные.РегистрыСведений.ДокументыФизическихЛиц));
			
	КонецЕсли; 
			
КонецПроцедуры

Процедура СотрудникиОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ФОИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	Если НЕ ФОИспользоватьКадровыйУчет Тогда
		
		Если ЗначениеЗаполнено(Форма.ТекущаяОрганизация) Тогда
			
			Если ЗначениеЗаполнено(Форма.ДатаУвольнения) Тогда
				
				Если Форма.ДатаУвольнения <= Форма.ДатаПриема Тогда
					
					ТекстСообщения = НСтр("ru='Дата увольнения не может быть меньше или равна дате приема на работу';uk='Дата звільнення не може бути менше або дорівнювати даті прийому на роботу'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						,
						"ДатаУвольнения",
						,
						Отказ);
						
				ИначеЕсли НЕ ЗначениеЗаполнено(Форма.ДатаПриема) Тогда
					
					ТекстСообщения = НСтр("ru='Необходимо заполнить дату приема на работу';uk='Необхідно заповнити дату прийому на роботу'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						,
						"ДатаПриема",
						,
						Отказ);
						
				КонецЕсли;
				
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(Форма.ДатаПриема)
				И НЕ ЗначениеЗаполнено(Форма.ТекущийВидЗанятости) Тогда
			
				ТекстСообщения = НСтр("ru='Не заполнен Вид занятости';uk='Не заповнений Вид зайнятості'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					,
					"ТекущийВидЗанятости",
					,
					Отказ);
					
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	СотрудникиФормы.ЛичныеДанныеФизическихЛицОбработкаПроверкиЗаполненияВФорме(Форма, Форма.ФизическоеЛицоСсылка, Отказ);
	
	ПравоНаДобавлениеИзменениеФизическихЛиц = Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры,ДобавлениеИзменениеПерсональныхДанныхФизическихЛиц,ДобавлениеИзменениеФизическихЛиц");
	Если ПравоНаДобавлениеИзменениеФизическихЛиц Тогда

		ФизическоеЛицоОбъект = Форма.РеквизитФормыВЗначение("ФизическоеЛицо");
		Отказ = НЕ ФизическоеЛицоОбъект.ПроверитьЗаполнение() ИЛИ Отказ;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты") 
		И НЕ ФОИспользоватьКадровыйУчет Тогда
		СообщениеПроверкиВидЗанятости = СотрудникиФормы.СообщениеОКонфликтеВидаЗанятостиНовогоСотрудникаССуществующими(Форма.СотрудникСсылка, Форма.ФизическоеЛицоСсылка, Форма.ТекущаяОрганизация, Форма.ТекущийВидЗанятости, Форма.ДатаПриема);
		Если Не ПустаяСтрока(СообщениеПроверкиВидЗанятости) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПроверкиВидЗанятости,,"ТекущийВидЗанятости", , Отказ);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	Перем Организация;
	Перем Подразделение;
	Параметры.Отбор.Свойство("ТекущаяОрганизация", Организация);
	Параметры.Отбор.Свойство("ТекущееПодразделение", Подразделение);
	
	Если Организация <> НеОпределено Или Подразделение <> НеОпределено Тогда
		// Если есть отбор по текущей организации или подразделению - отрабатываем особенным образом
		
		Запрос = Новый Запрос;
	
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("СтрокаПоиска", Параметры.СтрокаПоиска + "%");
		
		ЗапросТекст = 
		"ВЫБРАТЬ *
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО (ТекущиеКадровыеДанныеСотрудников.Сотрудник = Сотрудники.Ссылка)
		|ГДЕ
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = &Организация
		|	И ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) = &Подразделение
		|	И &ДополнительноеУсловие";
		
		Если Параметры.Свойство("ДоступныНепринятые")
			И Параметры.ДоступныНеПринятые Тогда
			
			Если ЗначениеЗаполнено(Организация) Тогда
				
				ЗапросТекст = СтрЗаменить(ЗапросТекст, "&ДополнительноеУсловие",
					"Сотрудники.ГоловнаяОрганизация = &ГоловнаяОрганизация
					|	И &ДополнительноеУсловие");
				Запрос.УстановитьПараметр("ГоловнаяОрганизация", ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация));
				
			КонецЕсли;
			
			ЗапросТекст = СтрЗаменить(ЗапросТекст, "ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) = &Подразделение
				|	И ", "");
				
			Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПустаяСсылка());
			
		Иначе
			
			Если Организация = НеОпределено Тогда
				ЗапросТекст = СтрЗаменить(ЗапросТекст, "ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = &Организация
					|	И ", "");
			КонецЕсли;
				
		    Если ТипЗнч(Организация) = Тип("Массив") Тогда
				ЗапросТекст = СтрЗаменить(ЗапросТекст, "ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = &Организация
					|	И ", "ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) В (&Организация)
					|	И ");
			КонецЕсли;
				
			Если ЗначениеЗаполнено(Подразделение) Тогда
				
			    Если ТипЗнч(Подразделение) = Тип("Массив") Тогда
					ЗапросТекст = СтрЗаменить(ЗапросТекст, "ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) = &Подразделение
						|	И ", "ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) В (&Подразделение)
						|	И ");
				КонецЕсли;
					
			Иначе
				ЗапросТекст = СтрЗаменить(ЗапросТекст, "ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) = &Подразделение
					|	И ", "");
			КонецЕсли;
				
		КонецЕсли;
		
		Запрос.Текст = ЗапросТекст;
		
		ЗарплатаКадры.ЗаполнитьДанныеВыбораСправочника(ДанныеВыбора, Метаданные.Справочники.Сотрудники, Параметры.Отбор, Запрос, "Сотрудники");
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы Физического лица

Процедура ФизическиеЛицаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Перем ИмяТекущегоЭлемента;
	
	Форма.СозданиеНового = Форма.Параметры.Ключ.Пустая();
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(Форма);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Форма.ФизическоеЛицо);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(Форма, ДополнительныеПараметры);
	
	// Обработчик подсистемы "Контактная информация"
	ДополнительныеПараметры = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформацией();
	ДополнительныеПараметры.ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация";
	ДополнительныеПараметры.ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы.Верх;
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(Форма, Форма.ФизическоеЛицо, ДополнительныеПараметры);	
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

	ДоработатьКонтактнуюИнформацию(Форма);

	Если Форма.Параметры.Ключ.Пустая() Тогда
		
		Форма.ЦветСтиляПоясняющийТекст			= ЦветаСтиля.ПоясняющийТекст;
		Форма.ЦветСтиляПоясняющийОшибкуТекст 	= ЦветаСтиля.ПоясняющийОшибкуТекст;
		Форма.ЦветСтиляЦветТекстаПоля 			= ЦветаСтиля.ЦветТекстаПоля;
		Форма.ЦветСтиляЦветГиперссылки 			= ЦветаСтиля.ЦветГиперссылки;
	
		Форма.ФизическоеЛицоСсылка = Справочники.ФизическиеЛица.ПолучитьСсылку();
		
		// если это форма нового объекта - инициализация реквизитов формы, 
		// предназначенных для редактирования дополнительных
		// данных (помимо основного редактируемого объекта)
		Форма.ДоступенПросмотрДанныхФизическихЛиц 	= Пользователи.РолиДоступны("ЧтениеДанныхФизическихЛицЗарплатаКадры,ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ФИОФизическихЛиц", Форма.ФизическоеЛицоСсылка);
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ГражданствоФизическихЛиц", Форма.ФизическоеЛицоСсылка);
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ДокументыФизическихЛиц", Форма.ФизическоеЛицоСсылка);
		СотрудникиКлиентСервер.УстановитьВидимостьПолейФИО(Форма);
		
	КонецЕсли;
	
	Если Форма.Параметры.Свойство("ТекущийЭлемент", ИмяТекущегоЭлемента) Тогда
		ТекущийЭлемент = Форма.Элементы[ИмяТекущегоЭлемента];		
	КонецЕсли;	
	
	ДоступенПросмотрСотрудников = Пользователи.РолиДоступны("ЧтениеДанныхСотрудников,ДобавлениеИзменениеДанныхСотрудников");
	
	СотрудникиКлиентСервер.ЗаполнитьИнфоГруппыДоступа(Форма);
	СотрудникиФормы.ОбновитьОтображениеПредупреждающихНадписей(Форма);
	
	Форма.Заголовок = СотрудникиКлиентСервер.ЗаголовокФормыФизическогоЛица(Форма);
	
КонецПроцедуры

Процедура ФизическиеЛицаПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Форма.ЦветСтиляПоясняющийТекст			= ЦветаСтиля.ПоясняющийТекст;
	Форма.ЦветСтиляПоясняющийОшибкуТекст 	= ЦветаСтиля.ПоясняющийОшибкуТекст;
	Форма.ЦветСтиляЦветТекстаПоля 			= ЦветаСтиля.ЦветТекстаПоля;
	Форма.ЦветСтиляЦветГиперссылки 			= ЦветаСтиля.ЦветГиперссылки;
		
	Форма.ДоступенПросмотрДанныхФизическихЛиц	= Пользователи.РолиДоступны("ЧтениеДанныхФизическихЛицЗарплатаКадры,ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры");
	Форма.ФизическоеЛицоСсылка  = Форма.ФизическоеЛицо.Ссылка;
	СотрудникиФормы.ПрочитатьДанныеСвязанныеСФизлицом(Форма, Форма.ДоступенПросмотрДанныхФизическихЛиц);
	Если Форма.ДоступенПросмотрДанныхФизическихЛиц Тогда
		РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФормеНаТекущуюДату(Форма, "ГражданствоФизическихЛиц", Форма.ФизическоеЛицоСсылка);
		Если ЗначениеЗаполнено(Форма.ГражданствоФизическихЛиц.Страна) Тогда
			Форма.ГражданствоФизическихЛицЛицоБезГражданства = 0;
		Иначе
			Форма.ГражданствоФизическихЛицЛицоБезГражданства = 1;
		КонецЕсли;
		СотрудникиКлиентСервер.ОбновитьДоступностьПолейВводаГражданства(Форма);
		
		ПрочитатьЗаписьОДокументеУдостоверяющемЛичностьДляРедактированияВФорме(Форма, Форма.ФизическоеЛицоСсылка);
	КонецЕсли;
	
	Если ПустаяСтрока(Форма.ФизическоеЛицо.УточнениеНаименования) Тогда
		Форма.ДополнятьПредставление = Ложь;
	Иначе
		Форма.ДополнятьПредставление = Истина;
	КонецЕсли;
	
	СотрудникиКлиентСервер.УстановитьДоступностьУточненияНаименования(Форма);
		
КонецПроцедуры

Процедура ФизическиеЛицаПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	СотрудникиФормы.ЛичныеДанныеФизическогоЛицаПриЗаписи(Форма, Форма.ФизическоеЛицоСсылка);	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры") Тогда
		РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(
			Форма,
			"ГражданствоФизическихЛиц",
			Форма.ФизическоеЛицоСсылка);
		ЗаписатьЗаписьДокументыФизическихЛицПослеРедактированияВФорме(Форма, Форма.ФизическоеЛицоСсылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ФизическиеЛицаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	СотрудникиФормы.ПрочитатьДанныеСвязанныеСФизлицом(Форма, Форма.ДоступенПросмотрДанныхФизическихЛиц);
	Если Форма.ДоступенПросмотрДанныхФизическихЛиц Тогда
		РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(Форма, "ГражданствоФизическихЛиц", Форма.ФизическоеЛицоСсылка);
		Если ЗначениеЗаполнено(Форма.ГражданствоФизическихЛиц.Страна) Тогда
			Форма.ГражданствоФизическихЛицЛицоБезГражданства = 0;
		Иначе
			Форма.ГражданствоФизическихЛицЛицоБезГражданства = 1;
		КонецЕсли;
		СотрудникиКлиентСервер.ОбновитьДоступностьПолейВводаГражданства(Форма);
		
		ПрочитатьЗаписьОДокументеУдостоверяющемЛичностьДляРедактированияВФорме(Форма, Форма.ФизическоеЛицоСсылка);
	КонецЕсли;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики модулей объекта и менеджера

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т2") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
						КоллекцияПечатныхФорм,
						"ПФ_MXL_Т2", "Личная карточка (Т-2)",
						ПечатьТ2(МассивОбъектов, ОбъектыПечати), ,);
	КонецЕсли;

КонецПроцедуры

// Процедура печати Т-2.
// Возвращает табличный документ - сформированную унифицированную форму Т-2 
//
// Параметры:
//	МассивОбъектов - массив сотрудников
//  ОбъектыПечати  - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в которой был выведен объект)
//
// Возвращаемое значение:
//	Табличный документ
//
Функция ПечатьТ2(МассивОбъектов, ОбъектыПечати) 
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.АвтоМасштаб = Истина;
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	
	ОтчетТ2 = Отчеты.ОтчетыПоСотрудникам.Создать();
	ОтчетТ2.КомпоновщикНастроек.ЗагрузитьНастройки(
		ОтчетТ2.СхемаКомпоновкиДанных.ВариантыНастроек.Т2.Настройки);
	ОтчетТ2.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КлючВарианта", "Т2");
	Отбор = ОтчетТ2.КомпоновщикНастроек.Настройки.Отбор;
	Отбор.Элементы.Очистить();
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "Сотрудник", ВидСравненияКомпоновкиДанных.ВСписке, МассивОбъектов);
	ОтчетТ2.СкомпоноватьРезультат(ДокументРезультат);
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, МассивОбъектов);
	Возврат ДокументРезультат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

Процедура ОбновитьРежимыРаботыФормы() Экспорт
	
	МассивРежимовРаботы = Новый Массив;
	МассивРежимовРаботы.Добавить(Перечисления.РежимыРаботыФормыСотрудника.Сотрудник);
	МассивРежимовРаботы.Добавить(Перечисления.РежимыРаботыФормыСотрудника.СотрудникОформленныйПоТрудовомуДоговору);
		
		
КонецПроцедуры

Процедура ПроверитьНеобходимостьНастройкиРежимовРаботыФормыСотрудника(Источник, Отказ) Экспорт
	
	ЗначениеИзменено = Ложь;
	Если ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ИспользоватьКадровыйУчет") Тогда
		ЗначениеИзменено = (Константы.ИспользоватьКадровыйУчет.Получить() <> Источник.Значение);
	ИначеЕсли ТипЗнч(Источник) = Тип("КонстантаМенеджерЗначения.ИспользоватьНачислениеЗарплаты") Тогда
		ЗначениеИзменено = (Константы.ИспользоватьНачислениеЗарплаты.Получить() <> Источник.Значение);
	КонецЕсли;
	
	Если ЗначениеИзменено Тогда
		Источник.ДополнительныеСвойства.Вставить("ЗначениеИзменено");
	КонецЕсли; 
	
КонецПроцедуры

Функция ЗаголовокКнопкиОткрытияСотрудника(ДанныеСотрудника, РеквизитыОрганизации, ДатаСведений, ВыводитьПодробнуюИнформацию = Ложь) Экспорт
	
	Если Не ВыводитьПодробнуюИнформацию Тогда
		НаименованиеОрганизации = РеквизитыОрганизации.Наименование; 
		Если (ЗначениеЗаполнено(ДанныеСотрудника.ДатаПриема) И ДанныеСотрудника.ДатаПриема <= ДатаСведений) И ((Не ЗначениеЗаполнено(ДанныеСотрудника.ДатаУвольнения)) Или (ДанныеСотрудника.ДатаУвольнения > ДатаСведений)) Тогда
			ДолжностьНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСотрудника.Должность, "Наименование");
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1
|работает с %2 %3';uk='%1
|працює з %2 %3'"), 
																			НаименованиеОрганизации,
																			Формат(ДанныеСотрудника.ДатаПриема, "ДФ=дд.ММ.гггг"),
																			?(ЗначениеЗаполнено(ДолжностьНаименование), "("+ДолжностьНаименование+")", "") , Символы.ПС);
		ИначеЕсли ЗначениеЗаполнено(ДанныеСотрудника.ДатаУвольнения) И ДанныеСотрудника.ДатаУвольнения <= ДатаСведений  Тогда	
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 
|уволен с %2';uk='%1 
|звільнений з %2'"), 
																			НаименованиеОрганизации,
																			Формат(ДанныеСотрудника.ДатаУвольнения, "ДФ=дд.ММ.гггг"));
		Иначе
			Если ДанныеСотрудника.ДатаПриема > ДатаСведений Тогда
				Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1  
|будет работать с %2';uk='%1 
|буде працювати з %2'"), 
																			НаименованиеОрганизации,
																			Формат(ДанныеСотрудника.ДатаПриема, "ДФ=дд.ММ.гггг"));	
			Иначе
				Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1  
|не оформлен на работу';uk='%1 
|не оформлений на роботу'"), 
																			НаименованиеОрганизации);	
			КонецЕсли;
			
		КонецЕсли;
	Иначе 
		Если (Не ЗначениеЗаполнено(ДанныеСотрудника.ДатаПриема) И (Не ЗначениеЗаполнено(ДанныеСотрудника.ДатаУвольнения))) Тогда	
			Возврат НСтр("ru='Принять на работу';uk='Прийняти на роботу'")	
		Иначе	
			Возврат НСтр("ru='Подробнее...';uk='Докладніше...'")
		КонецЕсли;	
	КонецЕсли;	
																		
КонецФункции

Функция ПоясняющаяНадписьКМестуРаботыСотрудника(ДанныеСотрудника, РеквизитыОрганизации, ДатаСведений) Экспорт
	
	Если ДанныеСотрудника.СотрудникАктуален Тогда
		СтрокаПериодРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Работает с %1 года';uk='Працює з %1 року'"), Формат(ДанныеСотрудника.ДатаПриема, "ДФ=дд.ММ.гггг"));
	Иначе
		Если ЗначениеЗаполнено(ДанныеСотрудника.ДатаПриема) И ДанныеСотрудника.ДатаПриема > ДатаСведений Тогда
			СтрокаПериодРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Будет работать с %1 года';uk='Буде працювати з %1 року'"), Формат(ДанныеСотрудника.ДатаПриема, "ДФ=дд.ММ.гггг"));	
		ИначеЕсли ЗначениеЗаполнено(ДанныеСотрудника.ДатаПриема) И ЗначениеЗаполнено(ДанныеСотрудника.ДатаУвольнения) Тогда 
			СтрокаПериодРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Работал с %1 по %2';uk='Працював з %1 з %2'"), Формат(ДанныеСотрудника.ДатаПриема, "ДФ=дд.ММ.гггг"), Формат(ДанныеСотрудника.ДатаУвольнения, "ДФ=дд.ММ.гггг"));
		ИначеЕсли ЗначениеЗаполнено(ДанныеСотрудника.ДатаУвольнения) Тогда 
			СтрокаПериодРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Уволен с %1';uk='Звільнений з %1'"), Формат(ДанныеСотрудника.ДатаУвольнения, "ДФ=дд.ММ.гггг"));
		ИначеЕсли ЗначениеЗаполнено(ДанныеСотрудника.ДатаПриема) Тогда 
			СтрокаПериодРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Дата планируемого приема: %1';uk='Дата запланованого прийому: %1'"), Формат(ДанныеСотрудника.ДатаПриема, "ДФ=дд.ММ.гггг")); 		
		Иначе	
			СтрокаПериодРаботы = НСтр("ru='Не указана дата приема на работу';uk='Не вказана дата прийому на роботу'");
		КонецЕсли;				
	КонецЕсли;	
	
	ДолжностьНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеСотрудника.Должность, "Наименование");
	
	Результат = Новый Структура;
	Результат.Вставить("ИнфоНадписьПериодРаботы", СтрокаПериодРаботы);
	Результат.Вставить("ИнфоНадписьОрганизация", ?(ЗначениеЗаполнено(РеквизитыОрганизации.Наименование), РеквизитыОрганизации.Наименование,  НСтр("ru='не указана';uk='не указана'")));
	Результат.Вставить("ИнфоНадписьДолжность", ?(ЗначениеЗаполнено(ДолжностьНаименование), ДолжностьНаименование,  НСтр("ru='не указана';uk='не указана'")));
	
	Если ДанныеСотрудника.Владелец().Колонки.Найти("ТекущаяТарифнаяСтавка") <> Неопределено Тогда
		Результат.Вставить("ИнфоНадписьОклад", ?(ЗначениеЗаполнено(ДанныеСотрудника.ТекущаяТарифнаяСтавка), ДанныеСотрудника.ТекущаяТарифнаяСтавка, НСтр("ru='не указан';uk='не зазначений'")));
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции	

Процедура ЗаполнитьПервоначальныеЗначения(Форма) Экспорт
	
	ЗначенияДляЗаполнения = Новый Структура;
	ФОИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
		
	Если ФОИспользоватьКадровыйУчет Тогда
		
		ЗначенияДляЗаполнения.Вставить("Организация", "Сотрудник.ГоловнаяОрганизация");
		
	Иначе
		
		ЗначенияДляЗаполнения.Вставить("Организация", "ТекущаяОрганизация");
		ЗначенияДляЗаполнения.Вставить("Подразделение", "ТекущееПодразделение");
		
	КонецЕсли;
	
	ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(Форма, ЗначенияДляЗаполнения);	
	
	Если ФОИспользоватьКадровыйУчет 
		И ЗначениеЗаполнено(Форма.Сотрудник.ГоловнаяОрганизация) Тогда
		
		Форма.Сотрудник.ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Форма.Сотрудник.ГоловнаяОрганизация);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура СотрудникиОбновитьЭлементыФормы(Форма) Экспорт
	
	СотрудникиКлиентСервер.УстановитьИнфоНадпись(Форма);
	
	// получим значение ДополнятьПредставление
	Если ПустаяСтрока(Форма.Сотрудник.УточнениеНаименования) Тогда
		Форма.ДополнятьПредставление = Ложь;
	Иначе
		Форма.ДополнятьПредставление = Истина;
	КонецЕсли;
	
	СотрудникиКлиентСервер.УстановитьДоступностьУточненияНаименования(Форма);
	
	// Настройка команд панели навигации формы
	СтруктураПараметровФО = Новый Структура;
	Если Форма.ОформленПриемНаРаботу Тогда
		СтруктураПараметровФО.Вставить("РежимРаботыФормы", Перечисления.РежимыРаботыФормыСотрудника.СотрудникОформленныйПоТрудовомуДоговору);
	Иначе
		СтруктураПараметровФО.Вставить("РежимРаботыФормы", Перечисления.РежимыРаботыФормыСотрудника.Сотрудник);
	КонецЕсли;
	
	Форма.УстановитьПараметрыФункциональныхОпцийФормы(СтруктураПараметровФО);
	
	ИспользуетсяКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	ИспользуетсяНачислениеЗарплаты = ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТекущаяОрганизация",
		"ТолькоПросмотр",
		ИспользуетсяКадровыйУчет);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТекущееПодразделение",
		"ТолькоПросмотр",
		ИспользуетсяКадровыйУчет);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТекущаяДолжность",
		"ТолькоПросмотр",
		ИспользуетсяКадровыйУчет);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТекущийВидЗанятости",
		"ТолькоПросмотр",
		ИспользуетсяКадровыйУчет);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТекущаяТарифнаяСтавка",
		"ТолькоПросмотр",
		ИспользуетсяКадровыйУчет);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТекущаяКатегорияЕСВ",
		"Видимость",
		НЕ ИспользуетсяКадровыйУчет);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"НачисляетсяИндексация",
		"Видимость",
		НЕ ИспользуетсяКадровыйУчет);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"БазовыйПериодИндексации",
		"Видимость",
		НЕ ИспользуетсяКадровыйУчет);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТекущиеНачисления",
		"Видимость",
		ИспользуетсяНачислениеЗарплаты);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДатаПриема",
		"ТолькоПросмотр",
		ИспользуетсяКадровыйУчет 
			И (ЗначениеЗаполнено(Форма.ПриказОПриеме)
			ИЛИ НЕ Форма.ОформленПриемНаРаботу));
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ДатаУвольнения",
		"ТолькоПросмотр",
		ИспользуетсяКадровыйУчет);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ГоловнаяОрганизация",
		"Видимость",
		ИспользуетсяКадровыйУчет);
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТекущаяОрганизация",
		"Видимость",
		НЕ ИспользуетсяКадровыйУчет);
	
	Если ИспользуетсяКадровыйУчет Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ГоловнаяОрганизация",
			"ТолькоПросмотр",
			Форма.ОформленПриемНаРаботу);
		
		//ОбособленноеПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ТекущаяОрганизация, "ОбособленноеПодразделение");
		ОбособленноеПодразделение = Ложь;
		
		Если ОбособленноеПодразделение <> Неопределено И ОбособленноеПодразделение Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ТекущаяОрганизация",
				"Видимость",
				Истина);
			
			Форма.Элементы.ТекущаяОрганизация.Заголовок = НСтр("ru='Филиал';uk='Філія'");
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ТекущаяОрганизация",
				"Видимость",
				Ложь);
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ГруппаКомандыОформления",
			"Видимость",
			НЕ Форма.ОформленПриемНаРаботу);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ФормаОформитьПриемНаРаботу",
			"Видимость",
			НЕ Форма.ОформленПриемНаРаботу);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ФормаОформитьКадровыйПеревод",
			"Видимость",
			Форма.ОформленПриемНаРаботу И НЕ ЗначениеЗаполнено(Форма.ДатаУвольнения));
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ФормаОформитьУвольнение",
			"Видимость",
			Форма.ОформленПриемНаРаботу И НЕ ЗначениеЗаполнено(Форма.ДатаУвольнения));
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ГруппаКомандыОформления",
			"Видимость",
			Ложь);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ФизическиеЛицаОбновитьЭлементыФормы(Форма) Экспорт
	
	// Настройка команд панели навигации формы
	СтруктураПараметровФО = Новый Структура;
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Форма.ФизическоеЛицоСсылка);
	ПараметрыПолученияСотрудников.КадровыеДанные = "ОформленПриемНаРаботу";
	
	СотрудникиФизическогоЛица = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
	ОформленныеСотрудники = СотрудникиФизическогоЛица.НайтиСтроки(Новый Структура("ОформленПриемНаРаботу", Истина));
	
	Если ОформленныеСотрудники.Количество() = 0 Тогда
		СтруктураПараметровФО.Вставить("РежимРаботыФормы", Перечисления.РежимыРаботыФормыСотрудника.Сотрудник);
	Иначе
		СтруктураПараметровФО.Вставить("РежимРаботыФормы", Перечисления.РежимыРаботыФормыСотрудника.СотрудникОформленныйПоТрудовомуДоговору);
	КонецЕсли;
	
	Форма.УстановитьПараметрыФункциональныхОпцийФормы(СтруктураПараметровФО);
	
	СотрудникиКлиентСервер.ОбработатьОтображениеПоляДРФО(Форма.ФизическоеЛицо.КодПоДРФО, Форма.Элементы.ФизлицоДРФО, Форма);
	СотрудникиКлиентСервер.УстановитьВидимостьПолейФИО(Форма);
	СотрудникиКлиентСервер.УстановитьПодсказкуКДатеРождения(Форма);
	
КонецПроцедуры

Функция БанковскийСчетИнформацияОПричинахНедоступности() Экспорт
	Возврат НСтр("ru='Для ввода лицевого счета заполните организацию';uk='Для введення особового рахунку заповніть організацію'");
КонецФункции

Процедура ЛичныеДанныеФизическихЛицОбработкаПроверкиЗаполненияВФорме(Форма, ФизическоеЛицоСсылка, Отказ) Экспорт
	
	Если Форма.ДоступенПросмотрДанныхФизическихЛиц Тогда
		
		РедактированиеПериодическихСведений.ПроверитьЗаписьВФорме(Форма, "ФИОФизическихЛиц", ФизическоеЛицоСсылка, Отказ);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЛичныеДанныеФизическогоЛицаПриЗаписи(Форма, ФизическоеЛицоСсылка, Организация) Экспорт
	
	ИзменилосьФИО = Ложь;
	ИзменилосьУдостоверениеЛичности = Ложь;
	
	НачатьТранзакцию();
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры") Тогда
		ИзменилосьФИО = РедактированиеПериодическихСведений.ЗаписатьЗаписьПослеРедактированияВФорме(Форма, "ФИОФизическихЛиц", ФизическоеЛицоСсылка, ИзменилосьФИО);
	КонецЕсли;
	
	Если НЕ ИзменилосьФИО и Форма["ИзмененоУточнениеНаименования"] Тогда
		ТаблицаФизЛиц = Новый ТаблицаЗначений;
		ТаблицаФизЛиц.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		Строка = ТаблицаФизЛиц.Добавить();
		Строка.ФизическоеЛицо = ФизическоеЛицоСсылка;
		
		ЗарплатаКадры.ОбновитьНаименованияФизЛицаИСотрудника(ТаблицаФизЛиц);
	КонецЕсли;

	ЗафиксироватьТранзакцию();
	
	Если НЕ Форма.ИзмененыЛичныеДанные Тогда
		
		ИзменяемыеПоля = СотрудникиФормы.ИзменяемыеПоляФизическогоЛица();
		
		Для Каждого КлючИЗначение Из ИзменяемыеПоля Цикл
			
			Форма.ИзмененыЛичныеДанные = Форма[КлючИЗначение.Значение];
			
			Если Форма.ИзмененыЛичныеДанные Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЦикла;
		
		Если НЕ Форма.ИзмененыЛичныеДанные Тогда
			
			Форма.ИзмененыЛичныеДанные = ИзменилосьФИО 
				Или ИзменилосьУдостоверениеЛичности;
				
		Иначе
				
			Для Каждого КлючИЗначение Из ИзменяемыеПоля Цикл
				
				Форма[КлючИЗначение.Значение] = Ложь;
				
			КонецЦикла;
			
		КонецЕсли; 
							
	КонецЕсли; 
								
КонецПроцедуры	

Процедура ПрочитатьДанныеСвязанныеССотрудником(Форма) Экспорт
	
	ПрочитатьДанныеФизлица(Форма);
	
	ПрочитатьТекущиеДанныеСотрудника(Форма);
	
	СотрудникиФормы.ПрочитатьДанныеСвязанныеСФизлицом(Форма, Форма.ДоступенПросмотрДанныхФизическихЛиц, Форма.ТекущаяОрганизация, Истина);
	
КонецПроцедуры

Процедура ПрочитатьДанныеСвязанныеСФизлицом(Форма, ДоступенПросмотрДанныхФизическихЛиц, Организация, ИзФормыСотрудника) Экспорт
	
	Если ДоступенПросмотрДанныхФизическихЛиц Тогда
		РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(Форма, "ФИОФизическихЛиц", Форма.ФизическоеЛицоСсылка);
		Если Не ИзФормыСотрудника Тогда 
			РедактированиеПериодическихСведений.ПрочитатьЗаписьДляРедактированияВФорме(Форма, "ИНАГРО_ВоинскийУчет", Форма.ФизическоеЛицоСсылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьТекущиеДанные(Форма, Сотрудник)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		ЗаписатьТекущиеКадровыеДанные(Форма, Сотрудник);
		ЗаписатьТекущуюТарифнуюСтавку(Форма, Сотрудник)	
	КонецЕсли; 
	
КонецПроцедуры

Функция КлючиСтруктурыТекущихКадровыхДанныхСотрудника() Экспорт
	КлючиСтруктуры = "ТекущаяОрганизация,ТекущееПодразделение,ТекущаяДолжность,ТекущийВидЗанятости,ДатаПриема,ДатаУвольнения,ОформленПриемНаРаботу,ПриказОПриеме";
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплаты,ЧтениеДанныхДляНачисленияЗарплаты") Тогда
		// ИНАГРО ++ Нам это не нужно
		//Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		//	КлючиСтруктуры = КлючиСтруктуры + ",ТекущаяТарифнаяСтавка";
		//Иначе
		//	КлючиСтруктуры = КлючиСтруктуры + ",ТекущаяТарифнаяСтавка,НачисляетсяИндексация,БазовыйПериодИндексации,ТекущаяКатегорияЕСВ";
		//КонецЕсли;
		// ИНАГРО --
	КонецЕсли;
	Возврат КлючиСтруктуры;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ДОПОЛНЕНИЯ ФОРМЫ ЭЛЕМЕНТА СПРАВ. ФИЗИЧЕСКИЕ ЛИЦА

// Дополняет форму, содержащую контактную информацию предупреждающими
// надписями для полей содержащих адрес
Процедура ДоработатьКонтактнуюИнформацию(Форма) Экспорт

	КоллекцияПолейКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	Если КоллекцияПолейКонтактнойИнформации <> Неопределено Тогда
		 
		МассивДобавляемыхРеквизитов = Новый Массив;
		
		Для Каждого КонтактнаяИнформация Из КоллекцияПолейКонтактнойИнформации Цикл
			
			Если КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
				Элемент = Форма.Элементы.Найти(КонтактнаяИнформация.ИмяРеквизита);
				НовыйРеквизит = Новый РеквизитФормы(Элемент.Имя + "ИнфоКартинка", Новый ОписаниеТипов("Картинка"));
				МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
				НовыйРеквизит = Новый РеквизитФормы(Элемент.Имя + "ИнфоКартинкаПодсказка", Новый ОписаниеТипов("Картинка"));
				МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
				НовыйРеквизит = Новый РеквизитФормы(Элемент.Имя + "ИнфоТекстДополнительный", Новый ОписаниеТипов("Строка"));
				МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
			КонецЕсли;
				
		КонецЦикла;
		
		Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
			Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		КонецЕсли; 
		
		ПредыдущееПолеАдреса = Ложь;
		ПоложениеЗаголовкаВерх = ВРег(Форма.ПараметрыКонтактнойИнформации.ГруппаКонтактнаяИнформация.ПоложениеЗаголовка) = ВРег("ПоложениеЗаголовкаЭлементаФормы.Верх");
		
		Для Каждого КонтактнаяИнформация Из КоллекцияПолейКонтактнойИнформации Цикл
			
			Элемент = Форма.Элементы.Найти(КонтактнаяИнформация.ИмяРеквизита);
				
			Если Элемент <> Неопределено Тогда
				
				ГруппаСтраницыАдреса = Неопределено;
				
				Если ПредыдущееПолеАдреса Тогда
					ЭлементДекорации = Форма.Элементы.Найти("ДекорацияВерх" + Элемент.Имя);
					Если ЭлементДекорации <> Неопределено Тогда
						ЭлементДекорации.Высота = ?(ЭлементДекорации.Высота = 0, 1, ЭлементДекорации.Высота) + 1;
					КонецЕсли; 
					ПредыдущееПолеАдреса = Ложь;
				КонецЕсли; 
				
				Если ПоложениеЗаголовкаВерх Тогда
					Элемент.ВысотаЗаголовка = 1;
				КонецЕсли;
				
				Если КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
					ИЛИ КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Факс
					ИЛИ КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда	
					
					Элемент.Ширина = 20;
					
				ИначеЕсли КонтактнаяИнформация.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
					
					Если Элемент.Вид = ВидПоляФормы.ПолеНадписи Тогда
						Элемент.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);
					КонецЕсли;
					
					Если ПоложениеЗаголовкаВерх Тогда
						Элемент.Ширина = 55;
						Элемент.Высота = 2;
					КонецЕсли;
					
					Если КонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица Тогда
						Если ПоложениеЗаголовкаВерх Тогда
							Элемент.Ширина = 43;
						Иначе
							Элемент.Ширина = 47;
						КонецЕсли;
					КонецЕсли;	
					
					ПредыдущееПолеАдреса = Истина;
				
					ГруппаСтраницыАдреса = Форма.Элементы.Добавить("ГруппаСтраницыАдреса"+Элемент.Имя, Тип("ГруппаФормы"),Элемент.Родитель);
					ГруппаСтраницыАдреса.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					ГруппаСтраницыАдреса.Отображение = ОтображениеОбычнойГруппы.Нет;
					ГруппаСтраницыАдреса.ОтображатьЗаголовок = Ложь;
					ГруппаСтраницыАдреса. Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
					
					Картинка = Форма.Элементы.Добавить(Элемент.Имя + "ИнфоКартинка", Тип("ПолеФормы"), ГруппаСтраницыАдреса);
					Картинка.Вид = ВидПоляФормы.ПолеКартинки;
					Картинка.ПутьКДанным = Элемент.Имя + "ИнфоКартинка";
					Картинка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
					Картинка.РастягиватьПоВертикали = Ложь;
					Картинка.РастягиватьПоГоризонтали = Ложь;
					Картинка.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
					Картинка.Ширина = 3;
					Картинка.Высота = 1;
					
					Надпись = Форма.Элементы.Добавить(Элемент.Имя + "ИнфоТекстДополнительный", Тип("ПолеФормы"), ГруппаСтраницыАдреса);
					Надпись.Вид = ВидПоляФормы.ПолеНадписи;
					Надпись.ПутьКДанным = Элемент.Имя + "ИнфоТекстДополнительный";
					Надпись.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
					Надпись.Высота = 1;
					Надпись.Ширина = 50;
					Надпись.РастягиватьПоВертикали = Ложь;
					Надпись.РастягиватьПоГоризонтали = Ложь;
					Надпись.Заголовок = НСтр("ru='Ошибка';uk='Помилка'");
					Надпись.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
					
					КартинкаПодсказка = Форма.Элементы.Добавить(Элемент.Имя + "ИнфоКартинкаПодсказка", Тип("ПолеФормы"), ГруппаСтраницыАдреса);
					КартинкаПодсказка.Вид = ВидПоляФормы.ПолеКартинки;
					КартинкаПодсказка.ПутьКДанным = Элемент.Имя + "ИнфоКартинкаПодсказка";
					КартинкаПодсказка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
					КартинкаПодсказка.РастягиватьПоВертикали = Ложь;
					КартинкаПодсказка.РастягиватьПоГоризонтали = Ложь;
					КартинкаПодсказка.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
					КартинкаПодсказка.Ширина = 3;
					КартинкаПодсказка.Высота = 1;
					КартинкаПодсказка.ГиперСсылка = Истина;
					КартинкаПодсказка.УстановитьДействие("Нажатие", "Подключаемый_ПояснениеНажатие");
					
				КонецЕсли;
				
			КонецЕсли;
			
			Форма.Элементы.Переместить(Элемент, Элемент.Родитель, ГруппаСтраницыАдреса);
			
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьФормуМестамиРаботы(Форма, ИмяГруппы, ИмяПоследнегоЭлементаГруппы = "", СотрудникИсключение = Неопределено, ВыводитьПодробнуюИнформацию = Ложь)
	
	СотрудникиФормы.ЗаполнитьФормуМестамиРаботы(Форма, ИмяГруппы, ИмяПоследнегоЭлементаГруппы, СотрудникИсключение, ВыводитьПодробнуюИнформацию);
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры

Функция ДругиеРабочиеМеста(ФизическоеЛицоСсылка, СотрудникИсключение) Экспорт
	
	СписокНеобходимыхДанных = "Организация,Должность,ДатаПриема,ДатаУвольнения";
	
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплаты,ЧтениеДанныхДляНачисленияЗарплаты,ЧтениеДанныхСотрудников") Тогда
		СписокНеобходимыхДанных = СписокНеобходимыхДанных + ",ТекущаяТарифнаяСтавка";
	КонецЕсли; 
	//ИНАГРО ++
	//ТаблицаПоРабочимМестам = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СотрудникиФормы.СотрудникиФизическогоЛица(ФизическоеЛицоСсылка), СписокНеобходимыхДанных, ТекущаяДатаСеанса());
	ТаблицаПоРабочимМестам = ИНАГРО_ЗарплатаКадрыРасширенный.КадровыеДанныеСотрудников(Истина, СотрудникиФормы.СотрудникиФизическогоЛица(ФизическоеЛицоСсылка), СписокНеобходимыхДанных, ТекущаяДатаСеанса());
	// Удаляем записи по СотрудникИсключение
	//Если СотрудникИсключение <> Неопределено Тогда
	//	МассивСтрокССотрудникИсключение = ТаблицаПоРабочимМестам.НайтиСтроки(Новый Структура("Сотрудник", СотрудникИсключение));
	//	Для Каждого ЭлементМассивСтрокССотрудникИсключение Из МассивСтрокССотрудникИсключение Цикл
	//		ТаблицаПоРабочимМестам.Удалить(ЭлементМассивСтрокССотрудникИсключение);
	//	КонецЦикла;
	//КонецЕсли; 
	//ИНАГРО --
	// Рассчитаем актуальность сотрудника
	ТаблицаПоРабочимМестам.Колонки.Добавить("СотрудникАктуален", Новый ОписаниеТипов("Булево"));
	Для Каждого СтрокаТаблицаПоРабочимМестам Из ТаблицаПоРабочимМестам Цикл
		СтрокаТаблицаПоРабочимМестам.СотрудникАктуален = СтрокаТаблицаПоРабочимМестам.ДатаПриема <> '00010101000000' И СтрокаТаблицаПоРабочимМестам.ДатаПриема < ТекущаяДатаСеанса()
			И (СтрокаТаблицаПоРабочимМестам.ДатаУвольнения > ТекущаяДатаСеанса() ИЛИ СтрокаТаблицаПоРабочимМестам.ДатаУвольнения = '00010101000000');
		
	КонецЦикла;
		
	Если ТаблицаПоРабочимМестам.Количество() > 1 Тогда
		
		// выполним сортировку рабочих мест
		ТаблицаПоРабочимМестам.Сортировать("СотрудникАктуален Убыв, ДатаПриема Возр, Организация");
		
	КонецЕсли;
		
	Возврат ТаблицаПоРабочимМестам;
	
КонецФункции

Процедура ПрочитатьДанныеФизлица(Форма)
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		ФизическоеЛицоОбъект = Форма.ФизическоеЛицоСсылка.ПолучитьОбъект(); 	
	Иначе		
		ФизическоеЛицоОбъект = Форма.Сотрудник.ФизическоеЛицо.ПолучитьОбъект();
	КонецЕсли;	
	
	Форма.ФизическоеЛицоВерсияДанных = ФизическоеЛицоОбъект.ВерсияДанных;
	Форма.ЗначениеВРеквизитФормы(ФизическоеЛицоОбъект, "ФизическоеЛицо");
	
	Если Не Форма.Параметры.Ключ.Пустая() Тогда
		Форма.ФизическоеЛицоСсылка = Форма.Сотрудник.ФизическоеЛицо;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПрочитатьТекущиеДанныеСотрудника(Форма)
	
	КлючиСтруктурыТекущихКадровыхДанныхСотрудника = СотрудникиФормы.КлючиСтруктурыТекущихКадровыхДанныхСотрудника();
	КадровыеДанные = КлючиСтруктурыТекущихКадровыхДанныхСотрудника;
	
	СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Форма.Сотрудник.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	//ИНАГРО ++
	//ТаблицаКадровыхДанных = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СписокСотрудников, КадровыеДанные, ТекущаяДатаСеанса());
	ТаблицаКадровыхДанных = ИНАГРО_ЗарплатаКадрыРасширенный.КадровыеДанныеСотрудников(Истина, СписокСотрудников, КадровыеДанные, ТекущаяДатаСеанса());
	//ИНАГРО --
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТаблицаКадровыхДанных.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Форма, ТаблицаКадровыхДанных[0], КлючиСтруктурыТекущихКадровыхДанныхСотрудника);
	КонецЕсли;
	
	ТекущиеДанныеКакСтруктура = Новый Структура(КлючиСтруктурыТекущихКадровыхДанныхСотрудника);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанныеКакСтруктура, Форма);
	
	Форма.ТекущиеДанныеПрежняя = Новый ФиксированнаяСтруктура(ТекущиеДанныеКакСтруктура);

КонецПроцедуры

Процедура ДополнитьФормуСотрудника(Форма, ИмяГруппы)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплаты") Тогда
		ДополнитьФормуМестамиРаботы(Форма, ИмяГруппы, , Форма.Сотрудник.Ссылка);
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗаписатьТекущиеКадровыеДанные(Форма, Сотрудник)
	ЕстьИзменениеТекущихКадровыхДанных = Ложь;
	Для каждого ТекущиеКадровыеДанныеПрежние Из Форма.ТекущиеДанныеПрежняя Цикл
		ЕстьИзменениеТекущихКадровыхДанных = ТекущиеКадровыеДанныеПрежние.Значение <> Форма[ТекущиеКадровыеДанныеПрежние.Ключ];
		Если ЕстьИзменениеТекущихКадровыхДанных Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Если НЕ ЕстьИзменениеТекущихКадровыхДанных Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеКадровыеДанныеНаборЗаписей = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
	ТекущиеКадровыеДанныеНаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
	
	Строка = ТекущиеКадровыеДанныеНаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Строка, Форма);
	Строка.Сотрудник = Сотрудник; 
	Строка.ГоловнаяОрганизация = Сотрудник.ГоловнаяОрганизация; 
	Строка.ФизическоеЛицо = Сотрудник.ФизическоеЛицо; 
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущиеКадровыеДанныеНаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗаписатьТекущуюТарифнуюСтавку(Форма, Сотрудник)
	
	Если Форма.ТекущиеДанныеПрежняя.ТекущаяТарифнаяСтавка = Форма.ТекущаяТарифнаяСтавка И Форма.ТекущиеДанныеПрежняя.НачисляетсяИндексация = Форма.НачисляетсяИндексация 
		И Форма.ТекущиеДанныеПрежняя.БазовыйПериодИндексации = Форма.БазовыйПериодИндексации И Форма.ТекущиеДанныеПрежняя.ТекущаяКатегорияЕСВ = Форма.ТекущаяКатегорияЕСВ 
		И Форма.ТекущиеДанныеПрежняя.ТекущаяОрганизация = Форма.ТекущаяОрганизация Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяТарифнаяСтавкаНаборЗаписей = РегистрыСведений.ТекущаяТарифнаяСтавкаСотрудников.СоздатьНаборЗаписей();
	ТекущаяТарифнаяСтавкаНаборЗаписей.Отбор.Сотрудник.Установить(Сотрудник);
	
	Строка = ТекущаяТарифнаяСтавкаНаборЗаписей.Добавить();
	Строка.Сотрудник = Сотрудник; 
	Строка.ФизическоеЛицо = Сотрудник.ФизическоеЛицо; 
	Строка.ГоловнаяОрганизация = Сотрудник.ГоловнаяОрганизация; 
	Строка.ТекущаяОрганизация = Форма.ТекущаяОрганизация; 
	Строка.ТекущаяТарифнаяСтавка = Форма.ТекущаяТарифнаяСтавка; 
	Строка.ТекущаяКатегорияЕСВ = Форма.ТекущаяКатегорияЕСВ; 
	Строка.НачисляетсяИндексация = Форма.НачисляетсяИндексация;
	Строка.БазовыйПериодИндексации = Форма.БазовыйПериодИндексации;
	
	УстановитьПривилегированныйРежим(Истина);
	ТекущаяТарифнаяСтавкаНаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры чтения / записи данных документов удостоверяющих личность

Процедура ПрочитатьЗаписьОДокументеУдостоверяющемЛичностьДляРедактированияВФорме(Форма, ВедущийОбъект) Экспорт
	
	Если Форма.Параметры.Свойство("Ключ") И НЕ Форма.Параметры.Ключ.Пустая() Тогда
		РедактированиеПериодическихСведений.ИнициализироватьЗаписьДляРедактированияВФорме(Форма, "ДокументыФизическихЛиц", ВедущийОбъект);
	КонецЕсли;
	
	МенеджерЗаписи = МенеджерПоследнейЗаписиДокументовФизическихЛиц(ВедущийОбъект);
	
	МетаданныеРегистра = Метаданные.РегистрыСведений["ДокументыФизическихЛиц"];
	
	// имя реквизита формы совпадает с именем регистра
	Форма.ЗначениеВРеквизитФормы(МенеджерЗаписи, "ДокументыФизическихЛиц");
	
	ЗаписьКакСтруктура = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(МенеджерЗаписи, МетаданныеРегистра);
	Форма["ДокументыФизическихЛицПрежняя"] = Новый ФиксированнаяСтруктура(ЗаписьКакСтруктура);
	
	Форма["ДокументыФизическихЛицНоваяЗапись"] = Ложь;
	
КонецПроцедуры

Функция МенеджерПоследнейЗаписиДокументовФизическихЛиц(ВедущийОбъект) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений["ДокументыФизическихЛиц"];
	
	МенеджерЗаписи = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьМенеджерЗаписи();
	МенеджерЗаписи["Физлицо"] = ВедущийОбъект;
	
	// Ищем последнюю запись
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РегистрСведений.Период,
	|	РегистрСведений.Физлицо,
	|	РегистрСведений.ВидДокумента
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц КАК РегистрСведений
	|ГДЕ
	|	РегистрСведений.Физлицо = &ВедущийОбъект
	|	И РегистрСведений.ЯвляетсяДокументомУдостоверяющимЛичность
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегистрСведений.Период УБЫВ";
	Запрос.УстановитьПараметр("ВедущийОбъект", ВедущийОбъект);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
	КонецЕсли;
	
	Возврат МенеджерЗаписи;
	
КонецФункции

Функция ЗаписатьЗаписьДокументыФизическихЛицПослеРедактированияВФорме(Форма, ВедущийОбъект) Экспорт
	
	Если Форма["ДокументыФизическихЛицНаборЗаписейПрочитан"] Тогда
		Возврат ЗаписатьНаборЗаписейДокументыФизическихЛицПослеРедактированияВФорме(Форма, ВедущийОбъект);
	КонецЕсли;
	
	МетаданныеРегистра = Метаданные.РегистрыСведений["ДокументыФизическихЛиц"];
	ИмяИзмерения = МетаданныеРегистра.Измерения[0].Имя;

	Если МетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		ИзменилисьДанные = Форма["ДокументыФизическихЛиц"].Период <> Форма["ДокументыФизическихЛицПрежняя"].Период;
	Иначе
		ИзменилисьДанные = Ложь;
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		ИзменилисьДанные = ИзменилисьДанные ИЛИ 
		(ВедущийОбъект <> Форма["ДокументыФизическихЛицПрежняя"][ИмяИзмерения] И 
		ЗначениеЗаполнено(Форма["ДокументыФизическихЛицПрежняя"][ИмяИзмерения]));
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		Для Каждого Поле Из МетаданныеРегистра.Измерения Цикл
			Если Поле.Имя = ИмяИзмерения Тогда
				Продолжить;
			КонецЕсли; 
			ИзменилисьДанные = ИзменилисьДанные ИЛИ (Форма["ДокументыФизическихЛиц"][Поле.Имя] <> Форма["ДокументыФизическихЛицПрежняя"][Поле.Имя]);
		КонецЦикла;
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		Для Каждого Поле Из МетаданныеРегистра.Ресурсы Цикл
			ИзменилисьДанные = ИзменилисьДанные ИЛИ (Форма["ДокументыФизическихЛиц"][Поле.Имя] <> Форма["ДокументыФизическихЛицПрежняя"][Поле.Имя]);
		КонецЦикла;
	КонецЕсли;
	Если НЕ ИзменилисьДанные Тогда
		Для Каждого Поле Из МетаданныеРегистра.Реквизиты Цикл
			ИзменилисьДанные = ИзменилисьДанные ИЛИ (Форма["ДокументыФизическихЛиц"][Поле.Имя] <> Форма["ДокументыФизическихЛицПрежняя"][Поле.Имя]);
		КонецЦикла;
	КонецЕсли;
	
	Если ИзменилисьДанные Тогда
		// пишем новое состояние записи
		МенеджерЗаписи = Форма.РеквизитФормыВЗначение("ДокументыФизическихЛиц");
		МенеджерЗаписи[ИмяИзмерения] = ВедущийОбъект;
		// если нужно сохранить старую запись, то создадим новый менеджер записи
		Если Форма["ДокументыФизическихЛицНоваяЗапись"] Тогда
			НоваяЗапись = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись,  МенеджерЗаписи);
			НоваяЗапись.Записать();
		Иначе
			МенеджерЗаписи.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИзменилисьДанные;
	
КонецФункции

Функция ЗаписатьНаборЗаписейДокументыФизическихЛицПослеРедактированияВФорме(Форма, ВедущийОбъект)
	
	ИзменилисьДанные = Ложь;
	
	СотрудникиКлиентСервер.ОбновитьНаборЗаписейИсторииДокументыФизическихЛиц(Форма, ВедущийОбъект);

	ИмяИзмерения = Метаданные.РегистрыСведений["ДокументыФизическихЛиц"].Измерения[0].Имя;
	
	// Подготовим к сравнению набор исходных сведений
	Набор = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьНаборЗаписей();
	Набор.Отбор[ИмяИзмерения].Установить(ВедущийОбъект);
	Набор.Прочитать();
	ТаблицаИсходногоНабора = Набор.Выгрузить();
	
	// Подготовим к сравнению набор, хранящийся в реквизите формы
	ТаблицаНовогоНабора = Форма["ДокументыФизическихЛицНаборЗаписей"].Выгрузить();
	ТаблицаНовогоНабора.Колонки.Удалить("ИсходныйНомерСтроки");
	
	// Проверим необходимость записи нового набора
	Если НЕ ОбщегоНазначения.КоллекцииИдентичны(ТаблицаИсходногоНабора, ТаблицаНовогоНабора, , "Представление") Тогда
		
		ИзменилисьДанные = Истина;
		МассивСохраняемыхСтрок = Новый Массив;
		
		Для Каждого СтрокаТаблицаНовогоНабора Из ТаблицаНовогоНабора Цикл
			
			СохранитьСтроку = Истина;
			СтрокиТаблицыИсходногоНабора = ТаблицаИсходногоНабора.НайтиСтроки(Новый Структура("Период,ВидДокумента", СтрокаТаблицаНовогоНабора.Период, СтрокаТаблицаНовогоНабора.ВидДокумента));
			Если СтрокиТаблицыИсходногоНабора.Количество() > 0 Тогда
				СтрокаТаблицаИсходногоНабора = СтрокиТаблицыИсходногоНабора[0];
				Если ОбщегоНазначения.КоллекцииИдентичны(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицаНовогоНабора), ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицаИсходногоНабора), , "Представление") Тогда
					СохранитьСтроку = Ложь;
				КонецЕсли;
				// Удалим строку из таблицы исходного набора
				ТаблицаИсходногоНабора.Удалить(СтрокаТаблицаИсходногоНабора);
			КонецЕсли; 
			
			Если СохранитьСтроку Тогда
				МассивСохраняемыхСтрок.Добавить(СтрокаТаблицаНовогоНабора);
			КонецЕсли; 
			
		КонецЦикла;
		
		Для каждого СтрокаТаблицаИсходногоНабора Из ТаблицаИсходногоНабора Цикл
			УдаляемаяЗапись = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(УдаляемаяЗапись, СтрокаТаблицаИсходногоНабора);
			УдаляемаяЗапись.Удалить();
		КонецЦикла;
		
		Для каждого СтрокаТаблицаНовогоНабора Из МассивСохраняемыхСтрок Цикл
			НоваяЗапись = РегистрыСведений["ДокументыФизическихЛиц"].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицаНовогоНабора);
			НоваяЗапись.Записать();
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат ИзменилисьДанные;
	
КонецФункции

