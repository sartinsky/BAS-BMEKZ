
// Выполняется списание номенклатуры по бухгалтерскому учету.
//
// Параметры
//  ТаблицаДокумента - таблица с данными, которые необходимы для выполнения списания номенклатуры.
//  ОтражатьВБухгалтерскомУчете – определяет должно ли выполнятся списания для целей бухгалтерского учета.
Процедура ДвижениеПартийТоваров(ТаблицаДокумента = Неопределено, Отказ = Ложь, Партия = Неопределено, Содержание = "") Экспорт

	Если Содержание = "" Тогда
		Содержание = НСтр("ru='Списаны ТМЦ';uk='Списані ТМЦ'", Локализация.КодЯзыкаИнформационнойБазы());
	КонецЕсли;	
	
	ТаблицаСписания = ТаблицаДокумента;

	Если ТаблицаДокумента.Количество() > 0 Тогда

		ДокументМоментВремени = Новый МоментВремени(ТаблицаДокумента[0].Регистратор.Дата, ТаблицаДокумента[0].Регистратор.Ссылка);

		ВыполнитьСписание(ТаблицаСписания, ДокументМоментВремени, Отказ, Партия, Содержание);

	КонецЕсли;

КонецПроцедуры // ДвижениеПартийТоваров()

/////////////////////////////////////////////////////////////////////////////////
// СПИСАНИЕ ПАРТИЙ ТОВАРОВ ПО ЗАДАННОЙ ТАБЛИЦЕ СПИСАНИЯ

// Списание со склада по строке
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
Процедура СписаниеСоСклада(СтрокаДокумента, СтруктураПараметров, Отказ)
	
	// Партии для данного учета
	ДеревоОстатковПартий = СтруктураПараметров["ДеревоПартийТоваровНаСкладахБух"];
	
	// Переменная определяет списывать номенклатуру исходя из стоимости остатка
	// номенклатуры на счете или по указанной в параметрах стоимости.
	СписыватьПоУказаннойСтоимости = Ложь;
	УказаннаяСтоимость = 0;


	СчетУчета = СтрокаДокумента.СчетУчетаБУ;
	СтрокаДокумента.СписанныеПартииБУ = ПустаяТаблицаСписанныхПартий();
	ТаблицаСписанныхПартии = СтрокаДокумента.СписанныеПартииБУ;
	
	// Если стоимость списания указана, то списывать надо по указанной стоимости.
	СписыватьПоУказаннойСтоимости = СтрокаДокумента.СписыватьПоУказаннойСтоимости;

	Если СписыватьПоУказаннойСтоимости Тогда
		УказаннаяСтоимость = СтрокаДокумента.СуммаБезНДС;
	КонецЕсли; 
	
	// Подлежащее погашению при списании количество
	КоличествоОсталосьПогасить = Окр(СтрокаДокумента.Количество,3,1);
	
	//Определим количествоДт для комплектации
	Если СтруктураПараметров.ЕстьКоличествоДт Тогда
		КоличествоОсталосьПогаситьДт = Окр(СтрокаДокумента.КоличествоДт,3,1);
	Иначе
		КоличествоОсталосьПогаситьДт = КоличествоОсталосьПогасить;
	КонецЕсли;

	Если ДеревоОстатковПартий.Строки.Количество() <> 0 Тогда

		// Если указана конкретная партия и на счете учета ведется
		// партионный учет, то в структура отбора добавим партию.
		ОтборПоДокументуОприходования = Неопределено;
		Если ЗначениеЗаполнено(СтрокаДокумента.ДокументОприходования) Тогда
				
			Если (БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(СчетУчета) 
				И НЕ СтруктураПараметров.СпособОценкиБух = Перечисления.СпособыОценки.ПоСредней) Тогда
				
				ОтборПоДокументуОприходования = СтрокаДокумента.ДокументОприходования;
				
			КонецЕсли;
		КонецЕсли;

		// Если указан конкретный договор и на счете учета ведется
		// партионный учет, то в структуру отбора добавим договор поставщика.
		ОтборПоДоговоруПостащика = Неопределено;
		Если ЗначениеЗаполнено(СтрокаДокумента.ДоговорПоставщика) Тогда
			
			Если (БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(СчетУчета) 
				И НЕ СтруктураПараметров.СпособОценкиБух = Перечисления.СпособыОценки.ПоСредней) Тогда
				
				ОтборПоДоговоруПостащика = СтрокаДокумента.ДоговорПоставщика;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СчетУчета.НалоговыйУчет Тогда
			ОтборПоНалоговомуНазначению = СтрокаДокумента.НалоговоеНазначение;
		Иначе
			ОтборПоНалоговомуНазначению = NULL;
		КонецЕсли;
		
		// Полученную таблицу отсортируем в соответствии со стратегией
		Если БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СчетУчета) Тогда
			// Для товаров, принятых на комиссию, в качестве стратегиии
			// списания устанавливается стратегия - ФИФО.
			СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО;
			
		Иначе
		
			СпособОценкиМПЗ = СтруктураПараметров["СпособОценкиБух"];

		КонецЕсли;

		// Пустой склад покупателя - значение измерения "Склад" когда не ведется учет по складам (или не ведется суммовой учет по складам)
		ПустойСклад = Справочники.Склады.ПустаяСсылка();
		
		ПрямойОбход =  СпособОценкиМПЗ = СтруктураПараметров["СпособОценкиБух"];
		
		СтрокаНоменклатуры = ДеревоОстатковПартий.Строки.Найти(СтрокаДокумента.Номенклатура, "Номенклатура");		
		ПартийПоСтроке = ?(СтрокаНоменклатуры = Неопределено, -1, СтрокаНоменклатуры.Строки.Количество() - 1);

		Для индекс = 0 по ПартийПоСтроке Цикл
			
			Если ПрямойОбход Тогда
				СтрокаПартии = СтрокаНоменклатуры.Строки[индекс];
			Иначе
				СтрокаПартии = СтрокаНоменклатуры.Строки[ПартийПоСтроке - индекс];
			КонецЕсли;
			
			Если СтрокаПартии.СчетУчета <> СчетУчета Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОтборПоДокументуОприходования <> Неопределено Тогда
				
				Если СтрокаПартии.ДокументОприходования <> ОтборПоДокументуОприходования Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ОтборПоНалоговомуНазначению <> Неопределено Тогда
				Если СтрокаПартии.НалоговоеНазначение <> ОтборПоНалоговомуНазначению Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если (ОтборПоДоговоруПостащика <> Неопределено) И (ЗначениеЗаполнено(СтрокаПартии.ДокументОприходования)) Тогда
				МетаданныеДокумента = СтрокаПартии.ДокументОприходования.Метаданные();
				Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента) 
					И (НЕ ТипЗнч(СтрокаПартии.ДокументОприходования) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) Тогда
					
					Если СтрокаПартии.ДокументОприходования.ДоговорКонтрагента <> ОтборПоДоговоруПостащика Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;

			// Проверки условий:

			// Количество по строке больше 0
			Если НЕ СтрокаПартии.Количество > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Склад, если ведется суммовой учет по складам
			Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(СчетУчета) Тогда

				Если СтрокаПартии.Склад <> СтрокаДокумента.Склад 
				   И СтрокаПартии.Склад <> ПустойСклад Тогда // пустые склады могут остаться со времени, когда не было учета по складам
					Продолжить;

				КонецЕсли;
						
			КонецЕсли;

			Если СтрокаПартии.Количество >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить / СтрокаПартии.Количество;
				КоличествоДт = КоличествоОсталосьПогаситьДт;
			Иначе
				КоэффСписания = 1;
				КоличествоДт = Окр(КоличествоОсталосьПогаситьДт * СтрокаПартии.Количество / КоличествоОсталосьПогасить,3,1);
			КонецЕсли;

			Количество = Окр(СтрокаПартии.Количество * КоэффСписания,3,1);
			Если СтрокаДокумента.Себестоимость = 0 Тогда
				Стоимость  = Окр(СтрокаПартии.Стоимость  * КоэффСписания,2,1);
			Иначе
				Стоимость    = Окр(Окр(СтрокаДокумента.Себестоимость * Количество / СтрокаДокумента.Количество,3,1),2,1);
			КонецЕсли;
			
			Если СтрокаДокумента.СебестоимостьНУ = 0 Тогда
				СтоимостьНУ  = Окр(СтрокаПартии.СтоимостьНУ  * КоэффСписания,2,1);
			Иначе
				СтоимостьНУ  = Окр(Окр(СтрокаДокумента.СебестоимостьНУ * Количество / СтрокаДокумента.Количество,3,1),2,1);
			КонецЕсли;
			
			
			Если СписыватьПоУказаннойСтоимости Тогда // списывать по стоимост, указанной в параметрах
				Стоимость = Окр(УказаннаяСтоимость  * Количество / КоличествоОсталосьПогасить,2,1);
				СтоимостьНУ = Стоимость;
				УказаннаяСтоимость = УказаннаяСтоимость - Стоимость;
			Иначе  // списывать исходы из стоиммостного остатка номенклатуры на складе
				//	Стоимость = Окр(СтрокаПартии.Стоимость  * КоэффСписания,2,1);
			КонецЕсли;
			
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Количество;
			КоличествоОсталосьПогаситьДт = КоличествоОсталосьПогаситьДт - КоличествоДт;
			
			СтрокаПартии.Количество = СтрокаПартии.Количество - Количество;
			СтрокаПартии.Стоимость  = СтрокаПартии.Стоимость  - Стоимость;
			СтрокаПартии.СтоимостьНУ  = СтрокаПартии.СтоимостьНУ - СтоимостьНУ;
			
			ИНАГРО_Общий.ИНАГРО_РегистрацияРеализации(СтрокаДокумента, Количество, Стоимость); // ИНАГРО 
			
			Проводка = СтрокаДокумента.Регистратор.Движения.Хозрасчетный.Добавить();
			Проводка.Период      = СтрокаДокумента.Регистратор.Дата;
			Проводка.Организация = СтрокаДокумента.Организация;
			Проводка.Содержание = СтруктураПараметров.СодержаниеПроводки;
			Проводка.СчетКт = СчетУчета;
			
			// Балансовый счет учета не может корреспондировать с забалансовым
			Если СтрокаДокумента.КорСчетСписанияБУ.Забалансовый = СчетУчета.Забалансовый Тогда
				Проводка.СчетДт = СтрокаДокумента.КорСчетСписанияБУ;
				
				Если БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(Проводка.СчетДт) Тогда
					Проводка.СубконтоДт.Партии = СтрокаПартии.ДокументОприходования;
				КонецЕсли;
				Если БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоОтгрузкам(Проводка.СчетДт) Тогда
					Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами = СтрокаПартии.ДокументОтгрузки;
				КонецЕсли;
				
			КонецЕсли;
			
			БухгалтерскийУчетРед12.ЗаполнитьСубконто(Проводка, СтрокаДокумента, 
			СтрокаДокумента.КорСубконтоСписанияБУ1,
			СтрокаДокумента.КорСубконтоСписанияБУ2,
			СтрокаДокумента.КорСубконтоСписанияБУ3,
			СтрокаПартии.ДокументОприходования,,);
			
			Если БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоОтгрузкам(Проводка.СчетКт) Тогда
				Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами = СтрокаПартии.ДокументОтгрузки;
			КонецЕсли;
			Проводка.Сумма = Стоимость;
			ПроводкаДо2015 = Проводка.Период < '2015 01 01';
			Если ПроводкаДо2015 Тогда
				Если Проводка.СчетДт.НалоговыйУчет Тогда
					Проводка.НалоговоеНазначениеДт = СтрокаДокумента.НалоговоеНазначениеНовое;
					
					Если Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность
						ИЛИ Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность
						Тогда
						Проводка.СуммаНУДт = 0;
					Иначе
						Проводка.СуммаНУДт = СтоимостьНУ;
					КонецЕсли;
					
				КонецЕсли;
				Если Проводка.СчетКт.НалоговыйУчет Тогда
					Проводка.СуммаНУКт = СтоимостьНУ;
					Проводка.НалоговоеНазначениеКт = СтрокаДокумента.НалоговоеНазначение;
				КонецЕсли;
			Иначе
				Если Проводка.СчетДт.НалоговыйУчет Тогда
					Если Проводка.СчетДт.УчетПоНалоговымНазначениямНДС Тогда
						Проводка.НалоговоеНазначениеДт = СтрокаДокумента.НалоговоеНазначениеНовое;
					КонецЕсли;  
					
					Если Проводка.СчетДт.УчетСуммНУ Тогда
						Если Проводка.СчетКт.УчетСуммНУ Тогда
							Проводка.СуммаНУДт = СтоимостьНУ;
						Иначе
							Если Проводка.НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность
								Тогда
								Проводка.СуммаНУДт = 0;
							Иначе
								Проводка.СуммаНУДт = Стоимость;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				Если Проводка.СчетКт.НалоговыйУчет Тогда
					Если Проводка.СчетКт.УчетПоНалоговымНазначениямНДС Тогда
						Проводка.НалоговоеНазначениеКт = СтрокаДокумента.НалоговоеНазначение;
					КонецЕсли;  
					Если Проводка.СчетКт.УчетСуммНУ Тогда
						Проводка.СуммаНУКт = СтоимостьНУ;
					КонецЕсли;  
				КонецЕсли;
			КонецЕсли;  
			
			Если Проводка.СчетДт.Количественный Тогда
				Проводка.КоличествоДт = КоличествоДт;
			КонецЕсли;
			
			Если Проводка.СчетКт.Количественный Тогда
				Проводка.КоличествоКт = Количество;
			КонецЕсли;
			
			Если Проводка.СчетДт.Валютный Тогда
				Если СтрокаДокумента.ПроводкиСуммаСНДСРегл = СтрокаДокумента.ПроводкиСуммаСНДСВал Тогда
					Проводка.ВалютаДт = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
					Проводка.ВалютнаяСуммаДт = Стоимость;
				Иначе
					Если (ЗначениеЗаполнено(СтрокаДокумента.ДоговорКонтрагента)) И (ТипЗнч(СтрокаДокумента.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
						Проводка.ВалютаДт = СтрокаДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
						Проводка.ВалютнаяСуммаДт = ?(СтрокаДокумента.ПроводкиСуммаСНДСРегл = 0, Стоимость, Стоимость * СтрокаДокумента.ПроводкиСуммаСНДСВал / СтрокаДокумента.ПроводкиСуммаСНДСРегл);
					Конецесли;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ (СтрокаДокумента.Себестоимость = 0) Тогда
				Проводка.НеКорректироватьСтоимостьАвтоматически = Истина;
			КонецЕсли;
			//Очистим сумму в проводке перемещения между складами если суммовой учет по складам не ведется
			ПроверкаПеремещенияМеждуСкладами(Проводка);
			
			//Движения по регистру реализованных товаров комитента
			Если БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СчетУчета) 
				И (НЕ БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СтрокаДокумента.КорСчетСписанияБУ)) 
				И (ЗначениеЗаполнено(СтрокаПартии.ДокументОприходования))
				И (НЕ ТипЗнч(СтрокаДокумента.Регистратор.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику"))Тогда
				Если (ТипЗнч(СтрокаПартии.ДокументОприходования) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг"))
					ИЛИ (ТипЗнч(СтрокаПартии.ДокументОприходования) = Тип("ДокументСсылка.Партия")) Тогда
					
					ВалютаРасчетовСКомитентом = СтрокаПартии.ДокументОприходования.ДоговорКонтрагента.ВалютаВзаиморасчетов;
					мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
					Если НЕ СтруктураПараметров.ЕстьКолонкаПроводкиСуммаСНДСРегл Тогда
						// если списываем товар комитента - выручкой считаем Стоимость товара
						ДоляСуммы = Стоимость;
					Иначе
						ДоляСуммы = ?(СтрокаДокумента.Количество = 0, 0, СтрокаДокумента.ПроводкиСуммаСНДСРегл * Количество / СтрокаДокумента.Количество);
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ДоговорКонтрагента) Тогда
						ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета;
						Если ВалютаРасчетовСКомитентом = мВалютаРегламентированногоУчета Тогда
							Выручка = ДоляСуммы;
							СуммаПоступления = Стоимость;
						Иначе
							ДанныеОВалютеРасчетовСКомитентом = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРасчетовСКомитентом,СтрокаДокумента.Регистратор.Дата);
							Выручка = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ДоляСуммы, мВалютаРегламентированногоУчета,ВалютаРасчетовСКомитентом
							,1,ДанныеОВалютеРасчетовСКомитентом.Курс
							,1,ДанныеОВалютеРасчетовСКомитентом.Кратность);
							СуммаПоступления = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Стоимость, мВалютаРегламентированногоУчета,ВалютаРасчетовСКомитентом
							,1,СтрокаПартии.ДокументОприходования.КурсВзаиморасчетов
							,1,СтрокаПартии.ДокументОприходования.КратностьВзаиморасчетов);
						КонецЕсли;
					Иначе
						ВалютаВзаиморасчетов = СтрокаДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
						Если ВалютаРасчетовСКомитентом = мВалютаРегламентированногоУчета Тогда
							Выручка = ДоляСуммы;
							СуммаПоступления = Стоимость
						ИначеЕсли ВалютаРасчетовСКомитентом = ВалютаВзаиморасчетов Тогда
							Выручка = ?(СтрокаДокумента.Количество = 0, 0, СтрокаДокумента.ПроводкиСуммаСНДСВал * Количество / СтрокаДокумента.Количество);
							СуммаПоступления = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Стоимость, мВалютаРегламентированногоУчета,ВалютаРасчетовСКомитентом
							,1,СтрокаПартии.ДокументОприходования.КурсВзаиморасчетов
							,1,СтрокаПартии.ДокументОприходования.КратностьВзаиморасчетов);
						Иначе
							ДанныеОВалютеРасчетовСКомитентом = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРасчетовСКомитентом,СтрокаДокумента.Регистратор.Дата);
							Выручка = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ДоляСуммы, мВалютаРегламентированногоУчета,ВалютаРасчетовСКомитентом
							,1,ДанныеОВалютеРасчетовСКомитентом.Курс
							,1,ДанныеОВалютеРасчетовСКомитентом.Кратность);
							СуммаПоступления = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Стоимость, мВалютаРегламентированногоУчета,ВалютаРасчетовСКомитентом
							,1,СтрокаПартии.ДокументОприходования.КурсВзаиморасчетов
							,1,СтрокаПартии.ДокументОприходования.КратностьВзаиморасчетов);
						КонецЕсли;
					КонецЕсли;
					
					Движение = СтрокаДокумента.Регистратор.Движения.РеализованныеТоварыКомитентов.ДобавитьПриход();
					Движение.Активность		 	= Истина;
					Движение.Период			= СтрокаДокумента.Регистратор.Дата;
					Движение.Регистратор	= СтрокаДокумента.Регистратор;
					Движение.Организация 	= СтрокаДокумента.Организация;
					
					Движение.Контрагент		 	= СтрокаПартии.ДокументОприходования.Контрагент;
					Движение.ДоговорКонтрагента	= СтрокаПартии.ДокументОприходования.ДоговорКонтрагента;
					Движение.Номенклатура 		= СтрокаДокумента.Номенклатура;
					
					Движение.Количество 		= Количество;
					Движение.Выручка 			= Выручка;
					Движение.СуммаПоступления	= СуммаПоступления;
					
				КонецЕсли;
			КонецЕсли;
				
			// В таблицу списанных партий записывается строка с информацией.
			СтрокаСписаннаяПартия               = ТаблицаСписанныхПартии.Добавить();
			СтрокаСписаннаяПартия.Партия        = СтрокаПартии.ДокументОприходования;
			СтрокаСписаннаяПартия.Количество    = Количество;
			СтрокаСписаннаяПартия.СуммаСписания = Стоимость;
			СтрокаСписаннаяПартия.СуммаСписанияНУ = СтоимостьНУ;
			СтрокаСписаннаяПартия.Комиссионный  = БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СчетУчета);

			СтрокаСписаннаяПартия.СчетУчетаБУ = СчетУчета;
			
		КонецЦикла;
		
		Если ПартийПоСтроке = -1 Тогда  // ИНАГРО
			ИНАГРО_Общий.ИНАГРО_РегистрацияРеализации(СтрокаДокумента, 0, 0);
		КонецЕсли;

	КонецЕсли;
	
	// Не списанное количесвто добавим отдельной строкой 
	// в таблицу списанных партий.
	Если КоличествоОсталосьПогасить > 0  Тогда
		
		// В таблицу списанных партий записывается строка с информацией.
		СтрокаСписаннаяПартия               = ТаблицаСписанныхПартии.Добавить();
		СтрокаСписаннаяПартия.Количество    = КоличествоОсталосьПогасить;
		СтрокаСписаннаяПартия.Комиссионный  = БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СчетУчета);
		
		СтрокаСписаннаяПартия.СчетУчетаБУ = СчетУчета;

	КонецЕсли;

	ОтключитьКонтрольОстатков = СтруктураПараметров.ОтключитьКонтрольОстатков;
	
	Если ((КоличествоОсталосьПогасить > 0) И (ОтключитьКонтрольОстатков) И (НЕ СтрокаДокумента.СчетУчетаБУ.Забалансовый)) или 
		(НЕ СтруктураПараметров.ПроводитьДокументПоРазделуУчета) Тогда
		
		Количество = КоличествоОсталосьПогасить;
		КоличествоДт = КоличествоОсталосьПогаситьДт;
		
		Проводка = СтрокаДокумента.Регистратор.Движения.Хозрасчетный.Добавить();
		Проводка.Содержание = СтруктураПараметров.СодержаниеПроводки;
		Проводка.СчетКт = СчетУчета;
		
		Если СчетУчета.Забалансовый = СтрокаДокумента.КорСчетСписанияБУ.Забалансовый Тогда
			Проводка.СчетДт = СтрокаДокумента.КорСчетСписанияБУ;
			Если Проводка.СчетДт.Количественный Тогда
				Проводка.КоличествоДт = КоличествоДт;
			КонецЕсли;
		КонецЕсли;
		
		БухгалтерскийУчетРед12.ЗаполнитьСубконто(Проводка, СтрокаДокумента, 
		СтрокаДокумента.КорСубконтоСписанияБУ1,
		СтрокаДокумента.КорСубконтоСписанияБУ2,
		СтрокаДокумента.КорСубконтоСписанияБУ3,
		,,);
		
		// ИНАГРО++
		//Проводка.Сумма = Окр(СтрокаДокумента.Себестоимость * Количество / СтрокаДокумента.Количество,2,1);
		СтоимостьДляРеализации = Окр(СтрокаДокумента.Себестоимость * Количество / СтрокаДокумента.Количество,2,1); 
		Проводка.Сумма = СтоимостьДляРеализации;
		// ИНАГРО--

		ПроводкаДо2015 = СтрокаДокумента.Регистратор.Дата < '2015 01 01';
		Если ПроводкаДо2015 Тогда
			Если Проводка.СчетДт.НалоговыйУчет Тогда
				Проводка.СуммаНУДт = Проводка.Сумма;
				Проводка.НалоговоеНазначениеДт = СтрокаДокумента.НалоговоеНазначениеНовое;
			КонецЕсли;
			Если Проводка.СчетКт.НалоговыйУчет Тогда
				Проводка.СуммаНУКт = Проводка.Сумма;
				Проводка.НалоговоеНазначениеКт = СтрокаДокумента.НалоговоеНазначение;
			КонецЕсли;
		Иначе
			Если Проводка.СчетДт.НалоговыйУчет Тогда
				Если Проводка.СчетДт.УчетПоНалоговымНазначениямНДС Тогда
					Проводка.НалоговоеНазначениеДт = СтрокаДокумента.НалоговоеНазначениеНовое;
				КонецЕсли;
				Если Проводка.СчетДт.УчетСуммНУ Тогда
					Проводка.СуммаНУДт = Проводка.Сумма;
				КонецЕсли;
			КонецЕсли;
			Если Проводка.СчетКт.НалоговыйУчет Тогда
				Если Проводка.СчетКт.УчетПоНалоговымНазначениямНДС Тогда
					Проводка.НалоговоеНазначениеКт = СтрокаДокумента.НалоговоеНазначение;
				КонецЕсли;
				Если Проводка.СчетКт.УчетСуммНУ Тогда
					Проводка.СуммаНУКт = Проводка.Сумма;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ (СтрокаДокумента.Себестоимость = 0) Тогда
			Проводка.НеКорректироватьСтоимостьАвтоматически = Истина;
		КонецЕсли;
		
		Если Проводка.СчетКт.Количественный Тогда
			Проводка.КоличествоКт = Количество;
		КонецЕсли;
		
		ИНАГРО_Общий.ИНАГРО_РегистрацияРеализации(СтрокаДокумента, Количество, ?(ЗначениеЗаполнено(СтоимостьДляРеализации), СтоимостьДляРеализации, 0)); // ИНАГРО

		Если Проводка <> Неопределено Тогда
			Проводка.Период      = СтрокаДокумента.Регистратор.Дата;
			Проводка.Организация = СтрокаДокумента.Организация;
		КонецЕсли;
		
	КонецЕсли;
	
	Если КоличествоОсталосьПогасить > 0 Тогда

		ТекстУчет = НСтр("ru='Бухгалтерский';uk='Бухгалтерський'");
		ТекстДополнительный = "";
		
		Если СчетУчета.НалоговыйУчет Тогда
			ТекстДополнительный = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' , налог. назначение: %1';uk=' , подат. призначення: %1'"),СтрокаДокумента.НалоговоеНазначение);
		КонецЕсли;
		
		Если СтруктураПараметров.ПроводитьДокументПоРазделуУчета Тогда
			Если (НЕ ОтключитьКонтрольОстатков) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 учет. Строка :%2
|Не списано %3 %4 товара %5, счет учета %6%7';uk='%1 облік. Рядок :%2
|Не списано %3 %4 товара %5, рахунок %6%7'"), ТекстУчет, СтрокаДокумента.НомерСтроки, КоличествоОсталосьПогасить, СтрокаДокумента.Номенклатура.БазоваяЕдиницаИзмерения, СтрокаДокумента.Номенклатура, СчетУчета, ТекстДополнительный);
			Иначе
				// сообщим с другим текстом
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 учет. Строка :%2
|Не достаточно %3 %4 товара %5, счет учета %6%7';uk='%1 облік. Рядок :%2
|Не вистачає %3 %4 товара %5, рахунок %6%7'"), ТекстУчет, СтрокаДокумента.НомерСтроки, КоличествоОсталосьПогасить, СтрокаДокумента.Номенклатура.БазоваяЕдиницаИзмерения, СтрокаДокумента.Номенклатура, СчетУчета, ТекстДополнительный);
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли; 

		Если (НЕ ОтключитьКонтрольОстатков) И (СтруктураПараметров.ПроводитьДокументПоРазделуУчета) ТОгда
			Отказ = Истина;
		Конецесли;

	КонецЕсли;
		
КонецПроцедуры // СписаниеСоСклада()


//Процедура формирует проводки по партионному учету
//
Процедура ВыполнитьСписание(ТаблицаСписания, МоментКон, Отказ, Партия, Содержание) Экспорт

	// Структура общих параметров, используемых в большинстве процедур
	СтруктураПараметров = Новый Структура;

	Если ТаблицаСписания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СтруктураПараметров.Вставить("МоментКон", МоментКон);
	СтруктураПараметров.Вставить("Организация", ТаблицаСписания[0].Организация);
	СтруктураПараметров.Вставить("ПроводитьДокументПоРазделуУчета", Истина);
	СтруктураПараметров.Вставить("СпособОценкиБух", УчетнаяПолитика.СпособОценкиМПЗ(СтруктураПараметров.Организация, МоментКон.Дата));

	// Сформируем структура отбора данных при формировании запроса по номенклатуре
	МассивНоменклатуры = ТаблицаСписания.ВыгрузитьКолонку("Номенклатура");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);
	
	ФильтрПартии = Партия;
	
	Если ТаблицаСписания.Найти(Неопределено, "ДокументОприходования") = Неопределено Тогда
		
		Если СтруктураПараметров.СпособОценкиБух = Перечисления.СпособыОценки.ПоСредней Тогда
			ТаблицаСписания.ЗаполнитьЗначения(Неопределено,"ДокументОприходования");
		Иначе	
			МассивПартий = ТаблицаСписания.ВыгрузитьКолонку("ДокументОприходования");
			ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивПартий);
			ФильтрПартии = МассивПартий;
			Для Каждого Элемент Из МассивПартий Цикл
				Если Не ЗначениеЗаполнено(Элемент) Тогда
					ФильтрПартии = Неопределено;
					Прервать;
				КонецЕсли;
			КонецЦикла;		
		КонецЕсли;
	КонецЕсли;
	
	МассивСчетовУчетаБУ = ТаблицаСписания.ВыгрузитьКолонку("СчетУчетаБУ");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовУчетаБУ);
	
	МассивСкладов = ТаблицаСписания.ВыгрузитьКолонку("Склад");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСкладов);

	МассивОрганизаций = ТаблицаСписания.ВыгрузитьКолонку("Организация");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивОрганизаций);
	
	Если ТаблицаСписания.Колонки.Найти("НалоговоеНазначение") <> Неопределено Тогда
		МассивНалоговыхНазначений = ТаблицаСписания.ВыгрузитьКолонку("НалоговоеНазначение");
		ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНалоговыхНазначений);
	Иначе
		МассивНалоговыхНазначений = Новый Массив;
	КонецЕсли;
	
	ДоговорКонтрагент = ТаблицаСписания[0].ДоговорКонтрагента;
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагент) Тогда
		Контрагент = Неопределено;
		СтрокаТаблицыСписания = ТаблицаСписания[0];
		Для Индекс = 1 По 3 Цикл
			Если НЕ ТаблицаСписания.Колонки.Найти("КорСубконтоСписанияБУ" + Индекс) = Неопределено Тогда
				Если ТипЗнч(СтрокаТаблицыСписания[("КорСубконтоСписанияБУ" + Индекс)]) = Тип("СправочникСсылка.Контрагенты") 
					И ЗначениеЗаполнено(СтрокаТаблицыСписания[("КорСубконтоСписанияБУ" + Индекс)]) Тогда
					Контрагент = СтрокаТаблицыСписания[("КорСубконтоСписанияБУ" + Индекс)];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Контрагент = ДоговорКонтрагент.Владелец;
	КонецЕсли; 

	СписаниеПоУказаннойСтоимости = Ложь;
	Если НЕ ТаблицаСписания.Колонки.Найти("Себестоимость") = Неопределено Тогда
		Если ТаблицаСписания.Найти(0, "Себестоимость") = Неопределено Тогда
			СписаниеПоУказаннойСтоимости = Истина;
		КонецЕсли;
	Иначе
		ТаблицаСписания.Колонки.Добавить("Себестоимость");
		ТаблицаСписания.ЗаполнитьЗначения(0, "Себестоимость");
	КонецЕсли;
	
	Если НЕ ТаблицаСписания.Колонки.Найти("СебестоимостьНУ") = Неопределено Тогда
		Если ТаблицаСписания.Найти(0, "СебестоимостьНУ") = Неопределено Тогда
			СписаниеПоУказаннойСтоимости = Истина;
		КонецЕсли;
	Иначе
		ТаблицаСписания.Колонки.Добавить("СебестоимостьНУ");
		ТаблицаСписания.ЗаполнитьЗначения(0, "СебестоимостьНУ");
	КонецЕсли;
	
	
	ОтключитьКонтрольОстатков = Константы.ОтключитьКонтрольОтрицательныхОстатков.Получить();
	
	Если ОтключитьКонтрольОстатков И СписаниеПоУказаннойСтоимости Тогда
		СтруктураПараметров.Вставить("ДеревоПартийТоваровНаСкладахБух", ПолучитьТаблицуПартийНаСкладахПоДаннымДокумента(СтруктураПараметров, ТаблицаСписания, "БУ"));
	Иначе
		Если ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
			
			ТаблицаСписания.Индексы.Добавить("СчетУчетаБУ");
			ТаблицаСчетов = ТаблицаСписания.Скопировать(, "СчетУчетаБУ");
			ТаблицаСчетов.Свернуть("СчетУчетаБУ");

			Для Каждого СтрокаСчета Из ТаблицаСчетов Цикл
				
				ОтборПоСчету = Новый Структура("СчетУчетаБУ", СтрокаСчета.СчетУчетаБУ);
				ТаблицаСписанияПоСчету = ТаблицаСписания.Скопировать(ОтборПоСчету, "Номенклатура,Склад,Организация,ДокументОприходования");
					
				СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
				СтруктураПараметровБлокировки.Вставить("ИсточникДанных", ТаблицаСписанияПоСчету);
				
				ЗначенияБлокировки = Новый Соответствие;
				ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, СтруктураПараметров.МоментКон.Дата)); 
				ЗначенияБлокировки.Вставить("Счет", СтрокаСчета.СчетУчетаБУ);
								
				СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаСчета.СчетУчетаБУ);
					
				ВидСубконтоНоменклатура = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
				ВидСубконтоСклады = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
				ВидСубконтоКонтрагенты = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
				ВидСубконтоДоговоры = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры;
				ВидСубконтоПартии = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
				
				ЕстьНоменклатураНаСчете = (СвойстваСчета.ВидСубконто1 = ВидСубконтоНоменклатура)
					ИЛИ (СвойстваСчета.ВидСубконто2 = ВидСубконтоНоменклатура)
					ИЛИ (СвойстваСчета.ВидСубконто3 = ВидСубконтоНоменклатура);
					
				ЕстьСкладыНаСчете = (СвойстваСчета.ВидСубконто1 = ВидСубконтоСклады)
					ИЛИ (СвойстваСчета.ВидСубконто2 = ВидСубконтоСклады)
					ИЛИ (СвойстваСчета.ВидСубконто3 = ВидСубконтоСклады);
					
				ЕстьКонтрагентыНаСчете = (СвойстваСчета.ВидСубконто1 = ВидСубконтоКонтрагенты)
					ИЛИ (СвойстваСчета.ВидСубконто2 = ВидСубконтоКонтрагенты)
					ИЛИ (СвойстваСчета.ВидСубконто3 = ВидСубконтоКонтрагенты);
				
				ЕстьДоговорыНаСчете = (СвойстваСчета.ВидСубконто1 = ВидСубконтоДоговоры)
					ИЛИ (СвойстваСчета.ВидСубконто2 = ВидСубконтоДоговоры)
					ИЛИ (СвойстваСчета.ВидСубконто3 = ВидСубконтоДоговоры);
					
				ЕстьПартияНаСчете = (СвойстваСчета.ВидСубконто1 = ВидСубконтоПартии)
					ИЛИ (СвойстваСчета.ВидСубконто2 = ВидСубконтоПартии)
					ИЛИ (СвойстваСчета.ВидСубконто3 = ВидСубконтоПартии);					
					
				Если ЕстьКонтрагентыНаСчете Тогда					
					ЗначенияБлокировки.Вставить(ВидСубконтоКонтрагенты, Контрагент); 
				КонецЕсли;	
					
				Если ЕстьДоговорыНаСчете Тогда					
					ЗначенияБлокировки.Вставить(ВидСубконтоДоговоры, ДоговорКонтрагент);
				КонецЕсли;	
							
				ОписаниеИсточника = Новый Соответствие;
				ОписаниеИсточника.Вставить("Организация", "Организация");
				
				Если ЗначениеЗаполнено(ФильтрПартии) И ЕстьПартияНаСчете Тогда
					ОписаниеИсточника.Вставить(ВидСубконтоПартии, "ДокументОприходования");				
				КонецЕсли;
								
				Если ЕстьНоменклатураНаСчете Тогда
					ОписаниеИсточника.Вставить(ВидСубконтоНоменклатура, "Номенклатура");
				КонецЕсли;
				
				Если ЕстьСкладыНаСчете Тогда
					ОписаниеИсточника.Вставить(ВидСубконтоСклады, "Склад");
				КонецЕсли;
				
				ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
				
			КонецЦикла;	
				
		КонецЕсли;
		СтруктураПараметров.Вставить("ДеревоПартийТоваровНаСкладахБух", ПолучитьТаблицуПартийНаСкладах(СтруктураПараметров, "Бух", МассивОрганизаций, МассивНалоговыхНазначений, МассивСчетовУчетаБУ, МассивНоменклатуры, МассивСкладов, Контрагент, ФильтрПартии, ДоговорКонтрагент));
	КонецЕсли;
		
	// Добавим колонку в которой будут отражаться списанные по БУ партии
	Если ТаблицаСписания.Колонки.Найти("СписанныеПартииБУ") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("СписанныеПартииБУ");
	КонецЕсли;
	
	// Добавим колонку с договором поставщика
	Если ТаблицаСписания.Колонки.Найти("ДоговорПоставщика") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("ДоговорПоставщика");
	КонецЕсли;
	
		// Добавим колонку в которой будут отражаться списанные по БУ партии
	Если ТаблицаСписания.Колонки.Найти("НоменклатурнаяГруппа") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("НоменклатурнаяГруппа");
	КонецЕсли;
	
	Если ТаблицаСписания.Колонки.Найти("СкладНовый") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("СкладНовый");
	КонецЕсли;
	
	Если ТаблицаСписания.Колонки.Найти("НалоговоеНазначениеНовое") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("НалоговоеНазначениеНовое");
	КонецЕсли;
	
	Если ТаблицаСписания.Колонки.Найти("НоменклатураНовая") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("НоменклатураНовая");
	КонецЕсли;
		
	СтруктураПараметров.Вставить("Контрагент",         Контрагент);
	СтруктураПараметров.Вставить("СодержаниеПроводки", Содержание);
	СтруктураПараметров.Вставить("ДоговорКонтрагента", ТаблицаСписания[0].ДоговорКонтрагента);
	СтруктураПараметров.Вставить("ОтключитьКонтрольОстатков",   ОтключитьКонтрольОстатков);
	СтруктураПараметров.Вставить("ЕстьКоличествоДт",   (НЕ ТаблицаСписания.Колонки.Найти("КоличествоДт") = Неопределено));
	СтруктураПараметров.Вставить("ЕстьКолонкаПроводкиСуммаСНДСРегл",   (НЕ ТаблицаСписания.Колонки.Найти("ПроводкиСуммаСНДСРегл") = Неопределено));

	// Проверим - все ли нужные нам колонки есть на месте.
	Для Индекс = 1 По 3 Цикл

		Если ТаблицаСписания.Колонки.Найти("КорСубконтоСписанияБУ" + Индекс) = Неопределено Тогда
			ТаблицаСписания.Колонки.Добавить("КорСубконтоСписанияБУ" + Индекс);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаСписания.Колонки.Найти("СписыватьПоУказаннойСтоимости") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("СписыватьПоУказаннойСтоимости", Новый ОписаниеТипов("Булево"));
	КонецЕсли;

	ЕстьСодержаниеПроводки = Не (ТаблицаСписания.Колонки.Найти("СодержаниеПроводки") = Неопределено);

	Для Каждого СтрокаДокумента Из ТаблицаСписания Цикл
		
		Если ЕстьСодержаниеПроводки Тогда
			Если НЕ СтрокаДокумента.СодержаниеПроводки = "" Тогда
				СтруктураПараметров.Вставить("СодержаниеПроводки", СтрокаДокумента.СодержаниеПроводки);
			КонецЕсли;
		КонецЕсли;
		
		СписаниеСоСклада(СтрокаДокумента, СтруктураПараметров, Отказ);

	КонецЦикла;

КонецПроцедуры







//Очистим сумму в проводке перемещения между складами если суммовой учет по складам не ведется
//
Процедура ПроверкаПеремещенияМеждуСкладами(Проводка)
	
	Если Проводка.СчетДт = Проводка.СчетКт Тогда
		Если (БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяУчетПоСкладам(Проводка.СчетДт)) И (НЕ БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(Проводка.СчетДт)) Тогда
			
			ОчиститьСумму = Истина;						
			Для Каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
				Если (ВидСубконто.ВидСубконто <> ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады) И
					(Проводка.СубконтоДт[ВидСубконто.ВидСубконто] <> Проводка.СубконтоКт[ВидСубконто.ВидСубконто]) Тогда
					//Дебетовая и кредитовая часть проводки отличаются не только складом
					ОчиститьСумму = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			Если ОчиститьСумму Тогда
				Проводка.Сумма = 0;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Выполняется сортировка списка счетов на счета, по которм вдется разный
// суммовой учет (в части аналитики).
//
// Параметры
//  СчетаУчета  – Список значений - список счетов, который необходимо рассортировать.
//  СчетаУчетаН – Список значений - список счетов, состоящий из счетов
//				  на которых ведется суммовой учет только по номенклатуре.
//  СчетаУчетаНС – Список значений - список счетов, состоящий из счетов
//				  на которых ведется суммовой учет по номенклатуре и по складам.
//  СчетаУчетаНП – Список значений - список счетов, состоящий из счетов
//				  на которых ведется суммовой учет по номенклатуре и по партиям.
//  СчетаУчетаНСП – Список значений - список счетов, состоящий из счетов
//				  на которых ведется суммовой учет по номенклатуре, складам и партиям.
//  СчетаУчетаКН – Список значений - список счетов, состоящий из счетов
//				  на которых ведется суммовой учет по номенклатуре и контрагентам.
//  СчетаУчетаКНП – Список значений - список счетов, состоящий из счетов
//				  на которых ведется суммовой учет по номенклатуре, контрагентам и партиям.
//
Процедура СортировкаСчетовУчета(СчетаУчета, СчетаУчетаН, СчетаУчетаНС, СчетаУчетаНП, СчетаУчетаНСП, СчетаУчетаКН, СчетаУчетаКНС, СчетаУчетаКНП, СчетаУчетаНПО)

	Для каждого Счет Из СчетаУчета Цикл

		Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(Счет) И БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(Счет) И (Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Комиссионеры, "ВидСубконто") = Неопределено) Тогда
			СчетаУчетаНСП.Добавить(Счет);

		ИначеЕсли БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(Счет) И БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоКонтрагентам(Счет) Тогда
			СчетаУчетаКНП.Добавить(Счет);
			
		ИначеЕсли БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(Счет) И БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоКонтрагентам(Счет) Тогда
			СчетаУчетаКНС.Добавить(Счет);
			
		ИначеЕсли БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(Счет) Тогда
			СчетаУчетаНС.Добавить(Счет);
			
		ИначеЕсли БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(Счет) И БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоОтгрузкам(Счет) Тогда
			СчетаУчетаНПО.Добавить(Счет);
			
		ИначеЕсли БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(Счет) Тогда
			СчетаУчетаНП.Добавить(Счет);
			
		ИначеЕсли БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяУчетПоКонтрагентам(Счет) Тогда
			СчетаУчетаКН.Добавить(Счет);
			
		Иначе
			СчетаУчетаН.Добавить(Счет);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция ПолучитьТаблицуПартийНаСкладахПоДаннымДокумента(СтруктураПараметров, ТаблицаСписания, Учет)
	
	Результат = Новый ДеревоЗначений();
	
	Если НЕ СтруктураПараметров.ПроводитьДокументПоРазделуУчета Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Колонки.Добавить("Номенклатура");
	Результат.Колонки.Добавить("ДокументОприходованияДата");
	Результат.Колонки.Добавить("ДокументОприходования");
	Результат.Колонки.Добавить("ДокументОтгрузкиДата");
	Результат.Колонки.Добавить("ДокументОтгрузки");
	Результат.Колонки.Добавить("Склад");
	Результат.Колонки.Добавить("Организация");
	Результат.Колонки.Добавить("СчетУчета");
	Результат.Колонки.Добавить("НалоговоеНазначение");
	
	Результат.Колонки.Добавить("Количество");
	Результат.Колонки.Добавить("Стоимость");
	Результат.Колонки.Добавить("СтоимостьНУ");
	
	ТаблицаСписания.Сортировать("Номенклатура Возр");
	ТекНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	
	Для Каждого СтрокаДокумента Из ТаблицаСписания Цикл
		Если ТекНоменклатура <> СтрокаДокумента.Номенклатура Тогда
			ТекНоменклатура = СтрокаДокумента.Номенклатура;
			СтрокиНоменклатуры = Результат.Строки.Добавить();
			СтрокиНоменклатуры.Номенклатура = ТекНоменклатура;
		КонецЕсли;
		Запись 								= СтрокиНоменклатуры.Строки.Добавить();
		Запись.Номенклатура 				= СтрокаДокумента.Номенклатура;
		Запись.ДокументОприходованияДата 	= Дата("00010101");
		Запись.ДокументОприходования 		= СтрокаДокумента.ДокументОприходования;
		Запись.ДокументОтгрузкиДата 		= Дата("00010101");
		Запись.ДокументОтгрузки 			= Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка();
		Запись.Склад 						= СтрокаДокумента.Склад;
		Запись.Организация 					= СтрокаДокумента.Организация;
		Запись.СчетУчета 					= СтрокаДокумента["СчетУчета"+Учет];
		Запись.НалоговоеНазначение			= СтрокаДокумента.НалоговоеНазначение;
		
		Запись.Количество 					= СтрокаДокумента.Количество;
		Запись.Стоимость 					= СтрокаДокумента.Себестоимость;
		Запись.СтоимостьНУ 					= СтрокаДокумента.СебестоимостьНУ;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
	

// Формирует запрос по остаткам партий товаров на конец рабочего  периода
//
// Параметры:
//  МоментКон      - момент времени, на которой возвращаются остатки.
//
// Возвращаемое значение:
//	Результат запроса, выгруженный в таблицу значений.
//
Функция ПолучитьТаблицуПартийНаСкладах(СтруктураПараметров, Учет, Организации, НалоговыеНазначения, СчетаУчета, Номенклатура = Неопределено, Склады = Неопределено, Контрагент = Неопределено, ФильтрПартия = Неопределено, Договор = Неопределено) Экспорт
	
	Если НЕ СтруктураПараметров.ПроводитьДокументПоРазделуУчета Тогда
		Возврат Новый ДеревоЗначений();
	КонецЕсли;
	
	Если СтруктураПараметров["СпособОценкиБух"] = Перечисления.СпособыОценки.ПоСредней Тогда
	    Партия = Неопределено;
	Иначе
		Партия = ФильтрПартия;
	КонецЕсли;
	
	ТекстПустоеНалоговоеНазначение = "";
	Для каждого СчетУчета из СчетаУчета Цикл
		Если НЕ СчетУчета.НалоговыйУчет Тогда
			ТекстПустоеНалоговоеНазначение = " ИЛИ НалоговоеНазначение ЕСТЬ NULL";
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Сортировка счетов учета
	СчетаУчетаН   = Новый СписокЗначений; // счета, с суммовым учетом только по номенклатуре
	СчетаУчетаНС  = Новый СписокЗначений; // счета, с суммовым учетом по номенклатуре и складам
	СчетаУчетаНП  = Новый СписокЗначений; // счета, с суммовым учетом по номенклатуре и партиям
	СчетаУчетаНСП = Новый СписокЗначений; // счета, с суммовым учетом по номенклатуре, складам и партиям
	СчетаУчетаКН  = Новый СписокЗначений; // счета, с суммовым учетом по контрагентам, и номенклатуре
	СчетаУчетаКНС = Новый СписокЗначений; // счета, с суммовым учетом по контрагентам, номенклатуре и складам
	СчетаУчетаКНП = Новый СписокЗначений; // счета, с суммовым учетом по контрагентам, номенклатуре и партиям
	
	СчетаУчетаНПО = Новый СписокЗначений; // счета, с суммовым учетом по номенклатуре партиям и отгрузкам
	
	СортировкаСчетовУчета(СчетаУчета, СчетаУчетаН, СчетаУчетаНС, СчетаУчетаНП, СчетаУчетаНСП, СчетаУчетаКН, СчетаУчетаКНС, СчетаУчетаКНП, СчетаУчетаНПО);
	
	ВидСубконтоНоменклатура = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	ВидСубконтоПартии       = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
	ВидСубконтоСклады       = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	ВидСубконтоКонтрагенты  = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	ВидСубконтоОтгрузки     = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами;
	
	ВидыСубконтоН = Новый Массив;
	ВидысубконтоН.Добавить(ВидСубконтоНоменклатура);
	
	ВидыСубконтоНС = Новый Массив;
	ВидысубконтоНС.Добавить(ВидСубконтоНоменклатура);
	ВидысубконтоНС.Добавить(ВидСубконтоСклады);
	
	ВидыСубконтоНП = Новый Массив;
	ВидысубконтоНП.Добавить(ВидСубконтоНоменклатура);
	ВидысубконтоНП.Добавить(ВидСубконтоПартии);
	
	ВидыСубконтоНПО = Новый Массив;
	ВидыСубконтоНПО.Добавить(ВидСубконтоНоменклатура);
	ВидыСубконтоНПО.Добавить(ВидСубконтоПартии);
	ВидыСубконтоНПО.Добавить(ВидСубконтоОтгрузки);
	
	ВидыСубконтоНСП = Новый Массив;
	ВидысубконтоНСП.Добавить(ВидСубконтоНоменклатура);
	ВидысубконтоНСП.Добавить(ВидСубконтоПартии);
	ВидысубконтоНСП.Добавить(ВидСубконтоСклады);
	
	ВидыСубконтоКН = Новый Массив;
	ВидыСубконтоКН.Добавить(ВидСубконтоНоменклатура);
	ВидыСубконтоКН.Добавить(ВидСубконтоКонтрагенты);
	
	ВидыСубконтоКНС = Новый Массив;
	ВидыСубконтоКНС.Добавить(ВидСубконтоНоменклатура);
	ВидыСубконтоКНС.Добавить(ВидСубконтоКонтрагенты);
	ВидыСубконтоКНС.Добавить(ВидСубконтоСклады);
	
	ВидыСубконтоКНП = Новый Массив;
	ВидыСубконтоКНП.Добавить(ВидСубконтоНоменклатура);
	ВидыСубконтоКНП.Добавить(ВидСубконтоПартии);
	ВидыСубконтоКНП.Добавить(ВидСубконтоКонтрагенты);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментКон",       СтруктураПараметров.МоментКон);
	Запрос.УстановитьПараметр("Организации",     Организации);
	Запрос.УстановитьПараметр("НалоговыеНазначения", НалоговыеНазначения);
	Запрос.УстановитьПараметр("СчетаУчетаН",     СчетаУчетаН);
	Запрос.УстановитьПараметр("СчетаУчетаНС",    СчетаУчетаНС);
	Запрос.УстановитьПараметр("СчетаУчетаНП",    СчетаУчетаНП);
	Запрос.УстановитьПараметр("СчетаУчетаНПО",   СчетаУчетаНПО);
	Запрос.УстановитьПараметр("СчетаУчетаНСП",   СчетаУчетаНСП);
	Запрос.УстановитьПараметр("СчетаУчетаКН",    СчетаУчетаКН);
	Запрос.УстановитьПараметр("СчетаУчетаКНС",   СчетаУчетаКНС);
	Запрос.УстановитьПараметр("СчетаУчетаКНП",   СчетаУчетаКНП);
	Запрос.УстановитьПараметр("Номенклатура",    Номенклатура);
	Запрос.УстановитьПараметр("Склады",          Склады);
	Запрос.УстановитьПараметр("ВидысубконтоН",   ВидысубконтоН);
	Запрос.УстановитьПараметр("ВидысубконтоНС",  ВидысубконтоНС);
	Запрос.УстановитьПараметр("ВидысубконтоНП",  ВидысубконтоНП);
	Запрос.УстановитьПараметр("ВидысубконтоНПО", ВидысубконтоНПО);
	Запрос.УстановитьПараметр("ВидысубконтоНСП", ВидысубконтоНСП);
	Запрос.УстановитьПараметр("ВидысубконтоКН",  ВидысубконтоКН);
	Запрос.УстановитьПараметр("ВидыСубконтоКНС", ВидыСубконтоКНС);
	Запрос.УстановитьПараметр("ВидыСубконтоКНП", ВидыСубконтоКНП);
	Запрос.УстановитьПараметр("ПустойСклад",     Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяПартия",    Документы.Партия.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяОтгрузка",  Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	Запрос.УстановитьПараметр("Контрагент",      Контрагент);
	Запрос.УстановитьПараметр("Договор",	     Договор);
	Запрос.УстановитьПараметр("Партия",      	 Партия);
	Запрос.УстановитьПараметр("ПустаяДата",      Дата("00010101"));
	
	Текст = "";
	
	Если СчетаУчетаН.Количество() > 0 Тогда
		
		Текст = Текст + "
		|ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	&ПустаяДата КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	&ПустаяДата КАК ДокументОтгрузкиДата,
		|	&ПустаяОтгрузка КАК ДокументОтгрузки,
		|	&ПустойСклад КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	Остатки.НалоговоеНазначение КАК НалоговоеНазначение,";
		
		
		Текст = Текст + "
		|	СУММА(ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаОстатокДт КОНЕЦ) КАК Стоимость,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаНУОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаНУОстатокДт КОНЕЦ) КАК СтоимостьНУ";
		
		Текст = Текст + "
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментКон, Счет В (&СчетаУчетаН), &ВидыСубконтоН,";
		
		
		Текст = Текст + "Субконто1 В (&Номенклатура) И Организация В (&Организации) И (НалоговоеНазначение В(&НалоговыеНазначения)" + ТекстПустоеНалоговоеНазначение + ")) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,";
		
		
		Текст = Текст + "
		|	Остатки.Организация,
		|	Остатки.НалоговоеНазначение";
	КонецЕсли;
	
	Если СчетаУчетаНС.Количество() > 0 Тогда
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	&ПустаяДата КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	&ПустаяДата КАК ДокументОтгрузкиДата,
		|	&ПустаяОтгрузка КАК ДокументОтгрузки,
		|	Остатки.Субконто2 КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	Остатки.НалоговоеНазначение КАК НалоговоеНазначение,";
		
		Текст = Текст + "
		|	СУММА(ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаОстатокДт КОНЕЦ) КАК Стоимость,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаНУОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаНУОстатокДт КОНЕЦ) КАК СтоимостьНУ";
		
		Текст = Текст + "
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментКон, Счет В (&СчетаУчетаНС), &ВидыСубконтоНС,";
		
		Текст = Текст + "Субконто1 В (&Номенклатура) И Субконто2 В (&Склады) И Организация В (&Организации) И (НалоговоеНазначение В(&НалоговыеНазначения)" + ТекстПустоеНалоговоеНазначение + ")) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,";
		
		
		Текст = Текст + "
		|	Остатки.Организация,
		|	Остатки.НалоговоеНазначение";
		
	КонецЕсли;
	
	Если СчетаУчетаНП.Количество() > 0 Тогда
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
		|	Остатки.Субконто2 КАК ДокументОприходования,
		|	&ПустаяДата КАК ДокументОтгрузкиДата,
		|	&ПустаяОтгрузка КАК ДокументОтгрузки,
		|	&ПустойСклад КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	Остатки.НалоговоеНазначение КАК НалоговоеНазначение,";
		
		
		Текст = Текст + "
		|	СУММА(ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаОстатокДт КОНЕЦ) КАК Стоимость,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаНУОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаНУОстатокДт КОНЕЦ) КАК СтоимостьНУ";
		
		Текст = Текст + "
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментКон, Счет В (&СчетаУчетаНП), &ВидыСубконтоНП,";
		
		
		Текст = Текст + "Субконто1 В (&Номенклатура) " + ?(НЕ ЗначениеЗаполнено(Партия), "", "И Субконто2 В (&Партия) ")+ "И Организация В (&Организации) И (НалоговоеНазначение В(&НалоговыеНазначения)" + ТекстПустоеНалоговоеНазначение + ")) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,";
		
		
		Текст = Текст + "
		|	Остатки.Организация,
		|	Остатки.НалоговоеНазначение";
		
	КонецЕсли;
	
	////////////
	//НПО
	Если СчетаУчетаНПО.Количество() > 0 Тогда
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
		|	Остатки.Субконто2 КАК ДокументОприходования,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОтгрузкиДата,
		|	Остатки.Субконто3 КАК ДокументОтгрузки,
		|	&ПустойСклад КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	Остатки.НалоговоеНазначение КАК НалоговоеНазначение,";
		
		
		Текст = Текст + "
		|	СУММА(ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаОстатокДт КОНЕЦ) КАК Стоимость,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаНУОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаНУОстатокДт КОНЕЦ) КАК СтоимостьНУ";
		
		Текст = Текст + "
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментКон, Счет В (&СчетаУчетаНПО), &ВидыСубконтоНПО,";
		
		
		Текст = Текст + "Субконто1 В (&Номенклатура) " + ?(НЕ ЗначениеЗаполнено(Партия), "", "И Субконто2 В (&Партия) ")+ "И Организация В (&Организации) И (НалоговоеНазначение В(&НалоговыеНазначения)" + ТекстПустоеНалоговоеНазначение + ")) КАК Остатки
		|
		|ГДЕ
		|   Субконто3.ДоговорКонтрагента = &Договор
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Субконто3,";
		
		
		Текст = Текст + "
		|	Остатки.Организация,
		|	Остатки.НалоговоеНазначение";
		
	КонецЕсли;
	//НПО
	////////////
	
	Если СчетаУчетаНСП.Количество() > 0 Тогда
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
		|	Остатки.Субконто2 КАК ДокументОприходования,
		|	&ПустаяДата КАК ДокументОтгрузкиДата,
		|	&ПустаяОтгрузка КАК ДокументОтгрузки,
		|	Остатки.Субконто3 КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	Остатки.НалоговоеНазначение КАК НалоговоеНазначение,";
		
		
		Текст = Текст + "
		|	СУММА(ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаОстатокДт КОНЕЦ) КАК Стоимость,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаНУОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаНУОстатокДт КОНЕЦ) КАК СтоимостьНУ";
		
		Текст = Текст + "
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментКон, Счет В (&СчетаУчетаНСП), &ВидысубконтоНСП,";
		
		
		Текст = Текст + "Субконто1 В (&Номенклатура) " + ?(НЕ ЗначениеЗаполнено(Партия), "", "И Субконто2 В (&Партия) ")+ "И Субконто3 В (&Склады) И Организация В (&Организации) И (НалоговоеНазначение В(&НалоговыеНазначения)" + ТекстПустоеНалоговоеНазначение + ")) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Субконто3,";
		
		Текст = Текст + "
		|	Остатки.Организация,
		|	Остатки.НалоговоеНазначение";
		
	КонецЕсли;
	
	Если СчетаУчетаКН.Количество() > 0 Тогда // субкомиссия
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	&ПустаяДата КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	&ПустаяДата КАК ДокументОтгрузкиДата,
		|	&ПустаяОтгрузка КАК ДокументОтгрузки,
		|	Остатки.Субконто2 КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	Остатки.НалоговоеНазначение КАК НалоговоеНазначение,";
		
		
		Текст = Текст + "
		|	СУММА(ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаОстатокДт КОНЕЦ) КАК Стоимость,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаНУОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаНУОстатокДт КОНЕЦ) КАК СтоимостьНУ";
		
		Текст = Текст + "
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментКон, Счет В (&СчетаУчетаКН), &ВидыСубконтоКН,";
		
		Текст = Текст + "Субконто1 В (&Номенклатура) И Субконто2 В (&Контрагент) И Организация В (&Организации) И (НалоговоеНазначение В(&НалоговыеНазначения)" + ТекстПустоеНалоговоеНазначение + ")) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,";
		
		
		Текст = Текст + "
		|	Остатки.Организация,
		|	Остатки.НалоговоеНазначение";
		
	КонецЕсли;
	
	Если СчетаУчетаКНП.Количество() > 0 Тогда // субкомиссия
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
		|	Остатки.Субконто2 КАК ДокументОприходования,
		|	&ПустаяДата КАК ДокументОтгрузкиДата,
		|	&ПустаяОтгрузка КАК ДокументОтгрузки,
		|	Остатки.Субконто3 КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	Остатки.НалоговоеНазначение КАК НалоговоеНазначение,";
		
		
		Текст = Текст + "
		|	СУММА(ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаОстатокДт КОНЕЦ) КАК Стоимость,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаНУОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаНУОстатокДт КОНЕЦ) КАК СтоимостьНУ";
		
		Текст = Текст + "
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментКон, Счет В (&СчетаУчетаКНП), &ВидыСубконтоКНП,";
		
		Текст = Текст + "Субконто1 В (&Номенклатура) " + ?(НЕ ЗначениеЗаполнено(Партия), "", "И Субконто2 В (&Партия) ")+ "И Субконто3 В (&Контрагент) И Организация В (&Организации) И (НалоговоеНазначение В(&НалоговыеНазначения)" + ТекстПустоеНалоговоеНазначение + ")) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Субконто3,";
		
		
		Текст = Текст + "
		|	Остатки.Организация,
		|	Остатки.НалоговоеНазначение";
		
	КонецЕсли;
	
	Если СчетаУчетаКНС.Количество() > 0 Тогда // дав. сырье
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	&ПустаяДата КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	&ПустаяДата КАК ДокументОтгрузкиДата,
		|	&ПустаяОтгрузка КАК ДокументОтгрузки,
		|	Остатки.Субконто3 КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	Остатки.НалоговоеНазначение КАК НалоговоеНазначение,";
		
		Текст = Текст + "
		|	СУММА(ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаОстатокДт КОНЕЦ) КАК Стоимость,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаНУОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаНУОстатокДт КОНЕЦ) КАК СтоимостьНУ";
		
		Текст = Текст + "
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментКон, Счет В (&СчетаУчетаКНС), &ВидыСубконтоКНС,";
		
		Текст = Текст + "Субконто1 В (&Номенклатура) И Субконто2 В (&Контрагент) И Субконто3 В (&Склады) И Организация В (&Организации) И (НалоговоеНазначение В(&НалоговыеНазначения)" + ТекстПустоеНалоговоеНазначение + ")) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Субконто3,";
		
		
		Текст = Текст + "
		|	Остатки.Организация,
		|	Остатки.НалоговоеНазначение";
		
	КонецЕсли;
	
	Запрос.Текст = Текст;
	
	СпособОценки = СтруктураПараметров["СпособОценкиБух"];
	Если СпособОценки = Перечисления.СпособыОценки.ЛИФО Тогда
		НапрДата = "Убыв";
	ИначеЕсли СпособОценки = Перечисления.СпособыОценки.ФИФО Тогда
		НапрДата = "Возр";
	Иначе
		НапрДата = "Убыв";
	КонецЕсли; 
	
	Запрос.Текст = Текст + "		
	|ИТОГИ ПО Номенклатура";
	
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Не СчетаУчетаКНП.Количество()+СчетаУчетаНСП.Количество()+СчетаУчетаНПО.Количество()+СчетаУчетаНП.Количество() = 0 Тогда
		
		ДобавитьДатуДокументаКРезультатуЗапроса(Результат,"ДокументОприходования","ДокументОприходованияДата");
		
		Если СчетаУчетаНПО.Количество() > 0 Тогда
			ДобавитьДатуДокументаКРезультатуЗапроса(Результат,"ДокументОтгрузки","ДокументОтгрузкиДата");
		КонецЕсли;
		
		Результат.Строки.Сортировать("ДокументОприходованияДата " + НапрДата + ", ДокументОприходования "+ НапрДата, Истина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьТаблицуПартийНаСкладах()

Функция ДобавитьДатуДокументаКРезультатуЗапроса(Результат,КолонкаДокумента,КолонкаСДатой)

	КэшПоТипам = Новый Соответствие;

	Для каждого Строка из Результат.Строки Цикл
		Для каждого СтрокаТаблицы из Строка.строки Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[КолонкаДокумента]) тогда 
				Продолжить;
			КонецЕсли;
			
			ТипТекущегоДокумента = ТипЗнч(СтрокаТаблицы[КолонкаДокумента]);
			МассивТипа = КэшПоТипам[ТипТекущегоДокумента];
			Если МассивТипа = Неопределено Тогда
				МассивТипа = Новый Массив;
				КэшПоТипам.Вставить(ТипТекущегоДокумента, МассивТипа);
			КонецЕсли;
			МассивТипа.Добавить(СтрокаТаблицы[КолонкаДокумента]);
		КонецЦикла;
	КонецЦикла;
	
	Если КэшПоТипам.Количество()=0 тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = новый запрос;

	Для Каждого КлючИЗначение ИЗ КэшПоТипам Цикл
		ИмяМетаданных = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ).Имя;

		Запрос.Текст = Запрос.Текст+
		?(Запрос.Текст="","",
		" 
		|Объединить все")+
		"
		|	ВЫБРАТЬ
		|		Док.Ссылка Как Ссылка,
		|		Док.Дата
		|	ИЗ Документ."+ИмяМетаданных+" КАК Док
		|	Где Док.ссылка в  (&ДокументыТипа_"+ИмяМетаданных+")";
		Запрос.УстановитьПараметр("ДокументыТипа_"+ИмяМетаданных, КлючИЗначение.Значение);
		
	КонецЦикла;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить(КолонкаДокумента, Выборка.Ссылка);

		НайденныеСтроки = Результат.строки.НайтиСтроки(ПараметрыОтбора,истина);
		для каждого строка из НайденныеСтроки цикл
			строка[КолонкаСДатой] = Выборка.Дата;
		Конеццикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ДобавитьДатуДокументаКРезультатуЗапроса()

// Создается пустая таблица, в которую будут в дальнейшем записыватся списанные партии.
//
Функция ПустаяТаблицаСписанныхПартий() Экспорт

	ТаблицаСписанныхПартий = Новый ТаблицаЗначений;
	ТаблицаСписанныхПартий.Колонки.Добавить("Партия");
	ТаблицаСписанныхПартий.Колонки.Добавить("Количество", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 3));
	ТаблицаСписанныхПартий.Колонки.Добавить("СуммаСписания", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаСписанныхПартий.Колонки.Добавить("СуммаСписанияНУ", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ТаблицаСписанныхПартий.Колонки.Добавить("СчетУчетаБУ");
	
	ТаблицаСписанныхПартий.Колонки.Добавить("Комиссионный");
	
	Возврат ТаблицаСписанныхПартий;
	
КонецФункции // ПустаяТаблицаСписанныхПартий()


Функция ПолучитьОбъектПоТипу(ТипСтр, Субконто1, Субконто2, Субконто3) Экспорт

	ИскомыйТип = Тип(ТипСтр);
	ИскомыйОбъект = Неопределено;
	
	Если ТипЗнч(Субконто1) = ИскомыйТип Тогда
		ИскомыйОбъект = Субконто1;
		
	ИначеЕсли ТипЗнч(Субконто2) = ИскомыйТип Тогда
		ИскомыйОбъект = Субконто2;
		
	ИначеЕсли ТипЗнч(Субконто3) = ИскомыйТип Тогда
		ИскомыйОбъект = Субконто3;
	КонецЕсли; 	
	
	Возврат ИскомыйОбъект;

КонецФункции // ПолучитьОбъектПоТипу()

// Розница в продажных ценах

Процедура ВыполнитьПереоценку(ТаблицаСписания) Экспорт

	Если ТаблицаСписания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МоментКон = Новый МоментВремени(ТаблицаСписания[0].Регистратор.Дата, ТаблицаСписания[0].Регистратор.Ссылка);
	
	// Структура общих параметров, используемых в большинстве процедур
	СтруктураПараметров = Новый Структура;

	Бух = Истина;
	
	СтруктураПараметров.Вставить("МоментКон", МоментКон);
	СтруктураПараметров.Вставить("Организация", ТаблицаСписания[0].Организация);                           	
	СтруктураПараметров.Вставить("ПроводитьДокументПоРазделуУчета", Истина);
	СтруктураПараметров.Вставить("СпособОценкиБух", УчетнаяПолитика.СпособОценкиМПЗ(СтруктураПараметров.Организация, ТаблицаСписания[0].Регистратор.Дата));
	
	// Сформируем структура отбора данных при формировании запроса по номенклатуре
	МассивНоменклатуры = ТаблицаСписания.ВыгрузитьКолонку("Номенклатура");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);

	МассивСчетовУчетаБУ = ТаблицаСписания.ВыгрузитьКолонку("СчетУчетаБУ");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовУчетаБУ);

	МассивСкладов = ТаблицаСписания.ВыгрузитьКолонку("Склад");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивСкладов);

	МассивОрганизаций = ТаблицаСписания.ВыгрузитьКолонку("Организация");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивОрганизаций);
	
	МассивНалоговыхНазначений = ТаблицаСписания.ВыгрузитьКолонку("НалоговоеНазначение");
	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНалоговыхНазначений);

	СтруктураПараметров.Вставить("ДеревоПартийТоваровНаСкладахБух", ПолучитьТаблицуПартийНаСкладах(СтруктураПараметров, "Бух", МассивОрганизаций, МассивНалоговыхНазначений, МассивСчетовУчетаБУ, МассивНоменклатуры, МассивСкладов, , , ));
		
	// Добавим колонку в которой будут отражаться списанные по БУ партии
	Если ТаблицаСписания.Колонки.Найти("СписанныеПартииБУ") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("СписанныеПартииБУ");
	КонецЕсли;
	
		
	Для Каждого СтрокаДокумента Из ТаблицаСписания Цикл

		// Списание со склада
		ПереоценкаПоСкладу(СтрокаДокумента, СтруктураПараметров);

	КонецЦикла;
КонецПроцедуры

Процедура ПереоценкаПоСкладу(СтрокаДокумента, СтруктураПараметров)

	// Партии для данного учета
	ДеревоОстатковПартий = СтруктураПараметров["ДеревоПартийТоваровНаСкладахБух"];
	
	ОтборПоНалоговомуНазначению = СтрокаДокумента.НалоговоеНазначение;
	СчетУчета = СтрокаДокумента.СчетУчетаБУ;
	СтрокаДокумента.СписанныеПартииБУ = ПустаяТаблицаСписанныхПартий();
	ТаблицаСписанныхПартии = СтрокаДокумента.СписанныеПартииБУ;

	// Подлежащее погашению при списании количество
	КоличествоОсталосьПогасить = СтрокаДокумента.Количество;

	Если ДеревоОстатковПартий.Строки.Количество() <> 0 Тогда

		// Полученную таблицу отсортируем в соответствии со стратегией
		Если БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СчетУчета) Тогда
			// Для товаров, принятых на комиссию, в качестве стратегиии
			// списания устанавливается стратегия - ФИФО.
			СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО;
			
		Иначе
			СпособОценкиМПЗ = СтруктураПараметров["СпособОценкиБух"];

		КонецЕсли;

		// Пустой склад покупателя - значение измерения "Склад" когда не ведется учет по складам (или не ведется суммовой учет по складам)
		ПустойСклад = Справочники.Склады.ПустаяСсылка();
		
		ПрямойОбход =  СпособОценкиМПЗ = СтруктураПараметров["СпособОценкиБух"];
		
		СтрокаНоменклатуры = ДеревоОстатковПартий.Строки.Найти(СтрокаДокумента.Номенклатура, "Номенклатура");		
		ПартийПоСтроке = ?(СтрокаНоменклатуры = Неопределено, -1, СтрокаНоменклатуры.Строки.Количество() - 1);

		Для индекс = 0 по ПартийПоСтроке Цикл
			
			Если ПрямойОбход Тогда
				СтрокаПартии = СтрокаНоменклатуры.Строки[индекс];
			Иначе
				СтрокаПартии = СтрокаНоменклатуры.Строки[ПартийПоСтроке - индекс];
			КонецЕсли;
			
			Если СтрокаПартии.СчетУчета <> СчетУчета Тогда
				Продолжить;
			КонецЕсли;
			
			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;

			// Проверки условий:

			// Количество по строке больше 0
			Если НЕ СтрокаПартии.Количество > 0 Тогда
				Продолжить;
			КонецЕсли; 

			// Склад, если ведется суммовой учет по складам
			Если БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяСуммовойУчетПоСкладам(СчетУчета) Тогда

				Если СтрокаПартии.Склад <> СтрокаДокумента.Склад 
				   И СтрокаПартии.Склад <> ПустойСклад Тогда // пустые склады могут остаться со времени, когда не было учета по складам

					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ОтборПоНалоговомуНазначению <> Неопределено Тогда
				Если СтрокаПартии.НалоговоеНазначение <> ОтборПоНалоговомуНазначению Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Если СтрокаПартии.Количество >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить / СтрокаПартии.Количество;
			Иначе
				КоэффСписания = 1;
			КонецЕсли;

			Количество = Окр(СтрокаПартии.Количество * КоэффСписания,3,1);
			Стоимость  = Окр(СтрокаПартии.Стоимость  * КоэффСписания,2,1);
			СтоимостьНУ  = Окр(СтрокаПартии.СтоимостьНУ  * КоэффСписания,2,1);
			
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Количество;

			СтрокаПартии.Количество = СтрокаПартии.Количество - Количество;
            СтрокаПартии.Стоимость  = СтрокаПартии.Стоимость  - Стоимость;
			СтрокаПартии.СтоимостьНУ  = СтрокаПартии.СтоимостьНУ  - СтоимостьНУ;
		
			//Формирование проводок Бух
			
			СуммаПереоценки = (Количество * СтрокаДокумента.ЦенаВРознице) - Стоимость;
			СуммаПереоценкиНУ = (Количество * СтрокаДокумента.ЦенаВРознице) - СтоимостьНУ;
			
			Если СуммаПереоценки <> 0 ИЛИ СуммаПереоценкиНУ<>0 Тогда
				Проводка 			 = СтрокаДокумента.Регистратор.Движения.Хозрасчетный.Добавить();
				Проводка.Период      = СтрокаДокумента.Регистратор.Дата;
				Проводка.Организация = СтрокаДокумента.Организация;
				
				Проводка.Содержание  = НСтр("ru='Переоценка товаров в рознице';uk='Переоцінка товарів у роздробі'",Локализация.КодЯзыкаИнформационнойБазы());
				
				Проводка.СчетДт      = СчетУчета;
				Проводка.СчетКт      = СтрокаДокумента.КорСчетСписанияБУ;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтрокаДокумента.Склад);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтрокаДокумента.Склад);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  СтрокаДокумента.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  СтрокаДокумента.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  СтрокаПартии.ДокументОприходования);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  СтрокаПартии.ДокументОприходования);
				
				Проводка.Сумма       = СуммаПереоценки;
				
				ПроводкаДо2015 = Проводка.Период < '2015 01 01';
				Если ПроводкаДо2015 Тогда
					Если Проводка.СчетДт.НалоговыйУчет Тогда
						Проводка.СуммаНУДт = СуммаПереоценкиНУ;
						Проводка.НалоговоеНазначениеДт = СтрокаДокумента.НалоговоеНазначение;
					КонецЕсли;
					Если Проводка.СчетКт.НалоговыйУчет Тогда
						Проводка.СуммаНУКт = СуммаПереоценкиНУ;
						Проводка.НалоговоеНазначениеКт = СтрокаДокумента.НалоговоеНазначение;
					КонецЕсли;
				Иначе
					Если Проводка.СчетДт.НалоговыйУчет Тогда
						Если Проводка.СчетДт.УчетСуммНУ Тогда
							Проводка.СуммаНУДт = СуммаПереоценкиНУ;
						КонецЕсли;
						Если Проводка.СчетДт.УчетПоНалоговымНазначениямНДС Тогда
							Проводка.НалоговоеНазначениеДт = СтрокаДокумента.НалоговоеНазначение;
						КонецЕсли; 
					КонецЕсли;
					Если Проводка.СчетКт.НалоговыйУчет Тогда
						Если Проводка.СчетКт.УчетСуммНУ Тогда
							Проводка.СуммаНУКт = СуммаПереоценкиНУ;
						КонецЕсли;
						Если Проводка.СчетКт.УчетПоНалоговымНазначениямНДС Тогда
							Проводка.НалоговоеНазначениеКт = СтрокаДокумента.НалоговоеНазначение;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			// В таблицу списанных партий записывается строка с информацией.
			СтрокаСписаннаяПартия               = ТаблицаСписанныхПартии.Добавить();
			СтрокаСписаннаяПартия.Партия        = СтрокаПартии.ДокументОприходования;
			СтрокаСписаннаяПартия.Количество    = Количество;
			СтрокаСписаннаяПартия.СуммаСписания = Стоимость;
			СтрокаСписаннаяПартия.СуммаСписанияНУ = СтоимостьНУ;
			СтрокаСписаннаяПартия.Комиссионный  = БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СчетУчета);

			СтрокаСписаннаяПартия.СчетУчетаБУ = СчетУчета;
						
		КонецЦикла;

	КонецЕсли;
	
	// Не списанное количесвто добавим отдельной строкой 
	// в таблицу списанных партий.
	Если КоличествоОсталосьПогасить > 0  Тогда
		
		// В таблицу списанных партий записывается строка с информацией.
		СтрокаСписаннаяПартия               = ТаблицаСписанныхПартии.Добавить();
		СтрокаСписаннаяПартия.Количество    = КоличествоОсталосьПогасить;
		СтрокаСписаннаяПартия.Комиссионный  = БухгалтерскийУчетВызовСервераПовтИсп.КомиссионныйТовар(СчетУчета);
		
		СтрокаСписаннаяПартия.СчетУчетаБУ = СчетУчета;
		
	КонецЕсли;
    	
КонецПроцедуры // СписаниеСоСклада()


Функция ТорговаяНаценкаНТТ(ДокументСсылка, Склад, НалоговоеНазначение, РазделятьПоСтавкамНДС) Экспорт
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Если РазделятьПоСтавкамНДС Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС);
	КонецЕсли;
	Запрос = Новый Запрос;
	// В БУ период определения наценки месяц
	Запрос.УстановитьПараметр("ДатаНач", 			НачалоМесяца(ДокументСсылка.Дата));
	Запрос.УстановитьПараметр("ДатаКон", 			Новый Граница(ДокументСсылка.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", 		ДокументСсылка.Организация);
	Запрос.УстановитьПараметр("СчетТН", 			ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ);
	Запрос.УстановитьПараметр("СчетПС", 			ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	Запрос.УстановитьПараметр("Склад", 				Склад);
	Запрос.УстановитьПараметр("НалоговоеНазначение",НалоговоеНазначение);
	Запрос.УстановитьПараметр("ВидыСубконто", 		ВидыСубконто);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОборотыТН.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ХозрасчетныйОстаткиИОборотыТН.Субконто1 КАК Склады,"+?(РазделятьПоСтавкамНДС,"
	|	ХозрасчетныйОстаткиИОборотыТН.Субконто2 КАК СтавкиНДС,","")+"
	|	СУММА(
	|	ВЫБОР КОГДА ХозрасчетныйОстаткиИОборотыТН.СуммаНачальныйОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиИОборотыТН.СуммаНачальныйОстатокКт КОНЕЦ + 
	|	ВЫБОР КОГДА ХозрасчетныйОстаткиИОборотыТН.СуммаОборотКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиИОборотыТН.СуммаОборотКт КОНЕЦ
	|	) КАК ТН,
	|	СУММА(
	|	ВЫБОР КОГДА ХозрасчетныйОстаткиИОборотыПС.СуммаНачальныйОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиИОборотыПС.СуммаНачальныйОстатокДт КОНЕЦ + 
	|	ВЫБОР КОГДА ХозрасчетныйОстаткиИОборотыПС.СуммаОборотДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиИОборотыПС.СуммаОборотДт КОНЕЦ 
	|	) КАК ПС,
	|	СУММА(
	|	ВЫБОР КОГДА ХозрасчетныйОстаткиИОборотыТН.СуммаНУНачальныйОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиИОборотыТН.СуммаНУНачальныйОстатокКт КОНЕЦ + 
	|	ВЫБОР КОГДА ХозрасчетныйОстаткиИОборотыТН.СуммаНУОборотКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиИОборотыТН.СуммаНУОборотКт КОНЕЦ
	|	) КАК ТН_НУ,
	|	СУММА(
	|	ВЫБОР КОГДА ХозрасчетныйОстаткиИОборотыПС.СуммаНУНачальныйОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиИОборотыПС.СуммаНУНачальныйОстатокДт КОНЕЦ + 
	|	ВЫБОР КОГДА ХозрасчетныйОстаткиИОборотыПС.СуммаНУОборотДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиИОборотыПС.СуммаНУОборотДт КОНЕЦ 
	|	) КАК ПС_НУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач,&ДатаКон, , ,Счет = &СчетТН, &ВидыСубконто, НалоговоеНазначение В (&НалоговоеНазначение) И Организация = &Организация И Субконто1 = &Склад) КАК ХозрасчетныйОстаткиИОборотыТН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач,&ДатаКон, , ,Счет = &СчетПС, &ВидыСубконто, НалоговоеНазначение В (&НалоговоеНазначение) И Организация = &Организация И Субконто1 = &Склад) КАК ХозрасчетныйОстаткиИОборотыПС
	|		ПО ХозрасчетныйОстаткиИОборотыТН.НалоговоеНазначение = ХозрасчетныйОстаткиИОборотыПС.НалоговоеНазначение 
	|			И ХозрасчетныйОстаткиИОборотыТН.Субконто1 = ХозрасчетныйОстаткиИОборотыПС.Субконто1"+?(РазделятьПоСтавкамНДС,"
	|			И ХозрасчетныйОстаткиИОборотыТН.Субконто2 = ХозрасчетныйОстаткиИОборотыПС.Субконто2","")+"
	|			
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиИОборотыТН.НалоговоеНазначение,
	|	ХозрасчетныйОстаткиИОборотыТН.Субконто1"+?(РазделятьПоСтавкамНДС,",
	|	ХозрасчетныйОстаткиИОборотыТН.Субконто2","")+"
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ТорговаяНаценкаАТТ(ДокументСсылка, Склад, Номенклатура, НалоговоеНазначение) Экспорт
	
	РазделятьПоПартиям = БухгалтерскийУчетВызовСервераПовтИсп.НаСчетеВедетсяПартионныйУчет(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
		
	Если РазделятьПоПартиям Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	КонецЕсли;
		
	Запрос = Новый Запрос;
	// В БУ период определения наценки месяц
	Запрос.УстановитьПараметр("ДатаНач", 			НачалоМесяца(ДокументСсылка.Дата));
	Запрос.УстановитьПараметр("ДатаКон", 			Новый Граница(ДокументСсылка.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Организация", 		ДокументСсылка.Организация);
	Запрос.УстановитьПараметр("СчетТН", 			ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ);
	Запрос.УстановитьПараметр("СчетПС", 			ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	Запрос.УстановитьПараметр("Склад", 				Склад);
	Запрос.УстановитьПараметр("Номенклатура", 		Номенклатура);
	Запрос.УстановитьПараметр("НалоговоеНазначение",НалоговоеНазначение);	
	Запрос.УстановитьПараметр("ВидыСубконто", 		ВидыСубконто);
	Запрос.УстановитьПараметр("ПустаяПартия",    	Документы.Партия.ПустаяСсылка());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОборотыТН.НалоговоеНазначение КАК НалоговоеНазначение,
	|	ХозрасчетныйОстаткиИОборотыТН.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОстаткиИОборотыТН.Субконто2 КАК Склады,"+?(РазделятьПоПартиям, "
	|	ХозрасчетныйОстаткиИОборотыТН.Субконто3 КАК Партия,", "
	|	&ПустаяПартия КАК Партия,")+"
	|	СУММА(
	|	ВЫБОР КОГДА ХозрасчетныйОстаткиИОборотыТН.СуммаНачальныйОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиИОборотыТН.СуммаНачальныйОстатокКт КОНЕЦ + 
	|	ВЫБОР КОГДА ХозрасчетныйОстаткиИОборотыТН.СуммаОборотКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиИОборотыТН.СуммаОборотКт КОНЕЦ
	|	) КАК ТН,
	|	СУММА(
	|	ВЫБОР КОГДА ХозрасчетныйОстаткиИОборотыПС.СуммаНачальныйОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиИОборотыПС.СуммаНачальныйОстатокДт КОНЕЦ + 
	|	ВЫБОР КОГДА ХозрасчетныйОстаткиИОборотыПС.СуммаОборотДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиИОборотыПС.СуммаОборотДт КОНЕЦ 
	|	) КАК ПС,
	|	СУММА(
	|	ВЫБОР КОГДА ХозрасчетныйОстаткиИОборотыТН.СуммаНУНачальныйОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиИОборотыТН.СуммаНУНачальныйОстатокКт КОНЕЦ + 
	|	ВЫБОР КОГДА ХозрасчетныйОстаткиИОборотыТН.СуммаНУОборотКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиИОборотыТН.СуммаНУОборотКт КОНЕЦ
	|	) КАК ТН_НУ,
	|	СУММА(
	|	ВЫБОР КОГДА ХозрасчетныйОстаткиИОборотыПС.СуммаНУНачальныйОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиИОборотыПС.СуммаНУНачальныйОстатокДт КОНЕЦ + 
	|	ВЫБОР КОГДА ХозрасчетныйОстаткиИОборотыПС.СуммаНУОборотДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиИОборотыПС.СуммаНУОборотДт КОНЕЦ
	|	) КАК ПС_НУ
	|
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач,&ДатаКон, , ,Счет = &СчетТН, &ВидыСубконто, НалоговоеНазначение В (&НалоговоеНазначение) И Организация = &Организация И Субконто1 В (&Номенклатура) И Субконто2 = &Склад) КАК ХозрасчетныйОстаткиИОборотыТН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач,&ДатаКон, , ,Счет = &СчетПС, &ВидыСубконто, НалоговоеНазначение В (&НалоговоеНазначение) И Организация = &Организация И Субконто1 В (&Номенклатура) И Субконто2 = &Склад) КАК ХозрасчетныйОстаткиИОборотыПС
	|		ПО ХозрасчетныйОстаткиИОборотыТН.НалоговоеНазначение = ХозрасчетныйОстаткиИОборотыПС.НалоговоеНазначение
	|			И ХозрасчетныйОстаткиИОборотыТН.Субконто1 = ХозрасчетныйОстаткиИОборотыПС.Субконто1
	|			И ХозрасчетныйОстаткиИОборотыТН.Субконто2 = ХозрасчетныйОстаткиИОборотыПС.Субконто2"+?(РазделятьПоПартиям,"
	|			И ХозрасчетныйОстаткиИОборотыТН.Субконто3 = ХозрасчетныйОстаткиИОборотыПС.Субконто3","")+"
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиИОборотыТН.НалоговоеНазначение,
	|	ХозрасчетныйОстаткиИОборотыТН.Субконто1,
	|	ХозрасчетныйОстаткиИОборотыТН.Субконто1,
	|	ХозрасчетныйОстаткиИОборотыТН.Субконто2"+?(РазделятьПоПартиям, ",
	|	ХозрасчетныйОстаткиИОборотыТН.Субконто3", "")+"
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
