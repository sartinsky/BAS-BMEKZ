////////////////////////////////////////////////////////////////////////////////
// СотрудникиКлиентСервер: методы, обслуживающие работу формы сотрудника
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура УстановитьВидЗанятостиНовогоСотрудника(Форма) Экспорт
	Если НЕ ЗначениеЗаполнено(Форма.Сотрудник.Ссылка) 
		И НЕ Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьКадровыйУчет") Тогда
		Форма.ТекущийВидЗанятости = СотрудникиВызовСервера.ПолучитьВидЗанятостиДляНовогоСотрудника(Форма.Сотрудник, Форма.ТекущаяОрганизация, Форма.ФизическоеЛицоСсылка);
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьВидимостьПолейФИО(Форма) Экспорт
	ФИОВведено = НЕ ПустаяСтрока(Форма.ФИОФизическихЛиц.Фамилия)
		ИЛИ НЕ ПустаяСтрока(Форма.ФИОФизическихЛиц.Имя)
		ИЛИ НЕ ПустаяСтрока(Форма.ФИОФизическихЛиц.Отчество);
	Если ФИОВведено Тогда
		Форма.Элементы.ГруппаСтраницыПолноеИмя.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаПолноеИмя;
	Иначе
		Форма.Элементы.ГруппаСтраницыПолноеИмя.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаПолноеИмяСкрытое;
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьНаборЗаписейИсторииДокументыФизическихЛиц(Форма, ВедущийОбъект) Экспорт
	Перем ЗаписьНабора;
	
	Если Не Форма["ДокументыФизическихЛицНаборЗаписейПрочитан"] Тогда
		
		Форма.ПрочитатьНаборЗаписейПериодическихСведений("ДокументыФизическихЛиц", ВедущийОбъект);
		
	КонецЕсли;
	
	СтруктураЗаписиСтрокой = "";
	ПрежняяЗапись = Новый Структура;
	НужнаЗапятая = Ложь;
	Для Каждого КлючЗначение Из Форма["ДокументыФизическихЛицПрежняя"] Цикл
		Если НужнаЗапятая Тогда
			СтруктураЗаписиСтрокой = СтруктураЗаписиСтрокой + ",";
		КонецЕсли;
		СтруктураЗаписиСтрокой = СтруктураЗаписиСтрокой + КлючЗначение.Ключ;
		НужнаЗапятая = Истина;
		ПрежняяЗапись.Вставить(КлючЗначение.Ключ);
	КонецЦикла;
		
	Если ЗначениеЗаполнено(Форма["ДокументыФизическихЛиц"].Период) Тогда
		ПериодИзменен = Форма["ДокументыФизическихЛиц"].Период > Форма["ДокументыФизическихЛицПрежняя"].Период;
		РесурсыИзменены = Ложь;
		Для Каждого КлючЗначение Из Форма["ДокументыФизическихЛицПрежняя"] Цикл
			Если КлючЗначение.Ключ = "Период" Тогда
				Продолжить;
			КонецЕсли;
			Если КлючЗначение.Значение <> Форма["ДокументыФизическихЛиц"][КлючЗначение.Ключ] Тогда
				РесурсыИзменены = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей = Форма["ДокументыФизическихЛицНаборЗаписей"];
		Если (ПериодИзменен И РесурсыИзменены) ИЛИ НаборЗаписей.Количество() = 0 Тогда
			ЗаписьНаНовуюДату = НаборЗаписей.НайтиСтроки(Новый Структура("Период,ВидДокумента", Форма["ДокументыФизическихЛиц"].Период, Форма["ДокументыФизическихЛиц"].ВидДокумента));
			Если ЗаписьНаНовуюДату.Количество() = 0 Тогда
				ЗаписьНабора = НаборЗаписей.Добавить();
			КонецЕсли;
		Иначе
			ЗаписьНаНовуюДату = НаборЗаписей.НайтиСтроки(Новый Структура("Период,ВидДокумента", Форма["ДокументыФизическихЛиц"].Период, Форма["ДокументыФизическихЛиц"].ВидДокумента));
			Если ЗаписьНаНовуюДату.Количество() > 0 Тогда
				ЗаписьНабора = ЗаписьНаНовуюДату[0];
			Иначе
				ЗаписьНабора = НаборЗаписей.Добавить();
			КонецЕсли; 
		КонецЕсли;
		
		Если ЗаписьНабора <> НеОпределено Тогда
			
			// Если в этом периоде уже есть документы являющиеся удостоверением личности - 
			// сбросим признак
			ЯвляющиесяУдостоверениямиЛичности = НаборЗаписей.НайтиСтроки(Новый Структура("Период,ЯвляетсяДокументомУдостоверяющимЛичность", Форма["ДокументыФизическихЛиц"].Период, Истина));
			Для каждого УдостоверениеЛичности Из ЯвляющиесяУдостоверениямиЛичности Цикл
				Если УдостоверениеЛичности.ВидДокумента <> ЗаписьНабора.ВидДокумента Тогда
					УдостоверениеЛичности.ЯвляетсяДокументомУдостоверяющимЛичность = Ложь;
				КонецЕсли; 
			КонецЦикла;
			
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, Форма["ДокументыФизическихЛиц"]);
			НаборЗаписей.Сортировать("Период,ЯвляетсяДокументомУдостоверяющимЛичность");
			
			ЗаполнитьЗначенияСвойств(ПрежняяЗапись, Форма["ДокументыФизическихЛиц"]);
			Форма["ДокументыФизическихЛицПрежняя"] = Новый ФиксированнаяСтруктура(ПрежняяЗапись);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаголовокФормыСотрудника(Форма) Экспорт
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		Возврат НСтр("ru='Сотрудник (создание)';uk='Співробітник (створення)'")
	КонецЕсли;
	
	Возврат Форма.СотрудникНаименование + НСтр("ru=' (Сотрудник)';uk=' (Співробітник)'");
	
КонецФункции

Функция ЗаголовокФормыФизическогоЛица(Форма) Экспорт
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		Возврат НСтр("ru='Физическое лицо (создание)';uk='Фізична особа (створення)'")
	КонецЕсли;
	
	Возврат Форма.ФизическоеЛицо.Наименование + НСтр("ru=' (Физическое лицо)';uk=' (Фізична особа)'");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление предупреждающих надписей

Процедура УстановитьИнфоНадпись(Форма) Экспорт
	
	Если Форма.Сотрудник.ВАрхиве Тогда
		Форма.СотрудникИнфо = НСтр("ru='Все операции по сотруднику уже завершены. Сотрудник не отображается в списках';uk='Всі операції по співробітнику вже завершені. Співробітник не відображається у списках'");
	ИначеЕсли НЕ Форма.ОформленПриемНаРаботу Тогда
		
		ТекстИнфоНадписи = НСтр("ru='Сотрудник не принят на работу, зарплата по нему не начисляется.';uk='Співробітник не прийнятий на роботу, зарплата по ньому не нараховується.'");
		Если Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьКадровыйУчет") Тогда
			ТекстИнфоНадписи = ТекстИнфоНадписи + " " + НСтр("ru='Необходимо оформить прием на работу';uk='Необхідно оформити прийом на роботу'");
		Иначе
			ТекстИнфоНадписи = ТекстИнфоНадписи + " " + НСтр("ru='Для приема на работу необходимо заполнить организацию и дату приема';uk='Для прийому на роботу необхідно заповнити організацію і дату прийому'");
		КонецЕсли;
		
		Форма.СотрудникИнфо = ТекстИнфоНадписи;
		
	ИначеЕсли ЗначениеЗаполнено(Форма.ДатаУвольнения) Тогда
		
		ПрошлоДнейСМоментаУвольнения = (ЗарплатаКадрыКлиентСервер.ДатаСеанса() - Форма.ДатаУвольнения) / 86400;
		Если ПрошлоДнейСМоментаУвольнения > 370 Тогда
			Форма.СотрудникИнфо = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Сотрудник давно уволен. Для того, чтобы сотрудник не отображался в списках можно установить флажок ""%2""';uk='Співробітник давно звільнений. Для того, щоб співробітник не відображався у списках можна встановити прапорець ""%2""'"),
				Формат(Форма.ДатаУвольнения, "ДФ='ММММ гггг ""г.""'"), Форма.Элементы.ВАрхиве.Заголовок);
		Иначе
			Форма.СотрудникИнфо = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Сотрудник уволен. Месяц, после которого не начисляется зарплата: %1';uk='Співробітник звільнений. Місяць, після якого не нараховується зарплата: %1'"),
				Формат(Форма.ДатаУвольнения, "ДФ='ММММ гггг ""г.""'"));
		КонецЕсли;			
	// ИНАГРО ++ Тарифную ставку выводить не будем, а будем выводить информацию о ГПХ			
	// ИначеЕсли НЕ ЗначениеЗаполнено(Форма.ТекущаяТарифнаяСтавка) Тогда  
	//	Форма.СотрудникИнфо = НСтр("ru='Сотрудник принят на работу, оклад сотрудника не задан. При начислении зарплаты сумма к начислению заполняется вручную';uk='Співробітник прийнятий на роботу, оклад співробітника не заданий. При нарахуванні зарплати сума до нарахування заповнюється вручну'");
	ИначеЕсли Форма.Сотрудник.ИНАГРО_ДоговорПодряда Тогда  
		Форма.СотрудникИнфо = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Сотрудник работает по договору ГПХ с %1.';uk='Співробітник працює по договору ЦПХ з %1.'"),
				Формат(Форма.ДатаПриема, "ДФ='ММММ гггг ""г.""'"));
	Иначе
		Форма.СотрудникИнфо = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Сотрудник принят на работу. Месяц, с которого начисляется зарплата: %1';uk='Співробітник прийнятий на роботу. Місяць, з якого нараховується зарплата: %1'"),
				Формат(Форма.ДатаПриема, "ДФ='ММММ гггг ""г.""'"));		
	КонецЕсли;		
	
	Форма.СотрудникИнфоКартинка = БиблиотекаКартинок.Информация;
	
Конецпроцедуры

Процедура УстановитьДоступностьУточненияНаименования(Форма) Экспорт
	Форма.Элементы.УточнениеНаименования.Доступность = Форма.ДополнятьПредставление; 
КонецПроцедуры

Процедура ОбновитьПолеГражданствоПериод(Форма)
	
	// не обязательно заполнение поля Период если данные по умолчанию и при этом 
	// записи о гражданстве еще нет
	Если ЗарплатаКадрыКлиентСервер.ГражданствоПоУмолчанию(Форма.ГражданствоФизическихЛиц)
		И Форма.ГражданствоФизическихЛицПрежняя.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений() Тогда
		Форма.Элементы.ГражданствоФизическихЛицПериод.АвтоОтметкаНезаполненного = Ложь;
		Форма.Элементы.ГражданствоФизическихЛицПериод.ОтметкаНезаполненного = Ложь;
		Форма.ГражданствоФизическихЛиц.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений();
	Иначе
		Форма.Элементы.ГражданствоФизическихЛицПериод.АвтоОтметкаНезаполненного = Истина;
		Если ЗначениеЗаполнено(Форма.ГражданствоФизическихЛиц.Период) Тогда
			Форма.Элементы.ГражданствоФизическихЛицПериод.ОтметкаНезаполненного = Ложь;
		Иначе
			Форма.Элементы.ГражданствоФизическихЛицПериод.ОтметкаНезаполненного = Истина;
		КонецЕсли;
		Если НЕ ЗарплатаКадрыКлиентСервер.ГражданствоПоУмолчанию(Форма.ГражданствоФизическихЛиц) 
			И Форма.ГражданствоФизическихЛиц.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений() Тогда
			Форма.ГражданствоФизическихЛиц.Период = НачалоДня(ЗарплатаКадрыКлиентСервер.ДатаСеанса());
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.ГражданствоФизическихЛиц.Период = ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений() Тогда
		Форма.ГражданствоФизическихЛицПериод = '00010101';
	Иначе
		Форма.ГражданствоФизическихЛицПериод = Форма.ГражданствоФизическихЛиц.Период;
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьДоступностьПолейВводаГражданства(Форма) Экспорт
	
	Форма.Элементы.ГражданствоФизическихЛицСтрана.Доступность = (Форма.ГражданствоФизическихЛицЛицоБезГражданства = 0);
	
	ОбновитьПолеГражданствоПериод(Форма);
				
КонецПроцедуры

Процедура ОбновитьПолеУдостоверениеЛичностиПериод(Форма) Экспорт
	
	Если Форма.ДоступенПросмотрДанныхФизическихЛиц Тогда
		
		// не обязательно заполнение поля Период если данные по умолчанию и при этом 
		// записи о сведениях об инвалидности еще нет
		Если ЗарплатаКадрыКлиентСервер.УдостоверениеЛичностиПоУмолчанию(Форма.ДокументыФизическихЛиц)
			И НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛицПрежняя.Период) Тогда
			Форма.ДокументыФизическихЛиц.Период = '00010101';
			Форма.Элементы.ДокументыФизическихЛицВидДокумента.АвтоОтметкаНезаполненного = Ложь;
			Форма.Элементы.ДокументыФизическихЛицВидДокумента.ОтметкаНезаполненного = Ложь;
		Иначе
			Форма.Элементы.ДокументыФизическихЛицВидДокумента.АвтоОтметкаНезаполненного = Истина;
			Если ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.ВидДокумента) Тогда
				Форма.Элементы.ДокументыФизическихЛицВидДокумента.ОтметкаНезаполненного = Ложь;
			Иначе
				Форма.Элементы.ДокументыФизическихЛицВидДокумента.ОтметкаНезаполненного = Истина;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.Период) Тогда
				Если ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.ДатаВыдачи) Тогда
					Форма.ДокументыФизическихЛиц.Период = Форма.ДокументыФизическихЛиц.ДатаВыдачи;
				Иначе
					Форма.ДокументыФизическихЛиц.Период = НачалоДня(ЗарплатаКадрыКлиентСервер.ДатаСеанса());
				КонецЕсли;
			КонецЕсли;
			Форма.ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
		КонецЕсли;
		
		РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(Форма, "ДокументыФизическихЛиц", Форма.ФизическоеЛицоСсылка);
		
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для полей содержащих ДРФО

// Осуществляет проверку заполненного элемента содержащему ДРФО
Процедура ОбработатьОтображениеПоляДРФО(ДРФО, Элемент, Форма) Экспорт
	
	СообщенияПроверки = "";
	Форма.ДРФОУказанПравильно = Ложь;
	
	Если НЕ ПустаяСтрока(ДРФО) Тогда
		
		
		Форма.ДРФОУказанПравильно = Истина;
		
		СообщенияПроверки = ?(ПустаяСтрока(СообщенияПроверки), НСтр("ru='Код по ДРФО указан правильно';uk='Код за ДРФО вказаний правильно'"), СообщенияПроверки);
		
		Если Форма.ДРФОУказанПравильно Тогда
			Картинка = БиблиотекаКартинок.ОперацияВыполненаУспешно;
			ТекстНадписи  = "";
			ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
		Иначе
			Картинка = БиблиотекаКартинок.Предупреждение;
			ТекстНадписи  = НСтр("ru='Ошибка';uk='Помилка'");
			ЭлементЦветТекста = Форма.ЦветСтиляПоясняющийОшибкуТекст;
		КонецЕсли;
		
	Иначе
		
		СообщенияПроверки = НСтр("ru='Не указан код по ДРФО (используется, например, в отчетности по форме 1-ДФ)';uk='Не вказаний код за ДРФО (використовується, наприклад, у звітності за формою 1-ДФ)'");
		ТекстНадписи  = "";
		ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
		Картинка = Новый Картинка;
			
	КонецЕсли;
	
	Элемент.Подсказка  = СообщенияПроверки;
	Элемент.ЦветТекста = ЭлементЦветТекста;
	 
КонецПроцедуры

Процедура ОбработатьОтображениеСерияДокументаФизическогоЛица(ВидДокумента, Серия ,Элемент, Форма) Экспорт
	
	//*?
	//СообщенияПроверки = "";
	//ТипСерии = ФизическиеЛицаКлиентСервер.ТипСерииДокументаУдостоверяющегоЛичность(ВидДокумента);
	//Если ЗначениеЗаполнено(ВидДокумента) И ТипСерии > 0 Тогда
	//	Если НЕ ПустаяСтрока(Серия) Тогда
	//		СерияУказанаПравильно = ФизическиеЛицаКлиентСервер.СерияДокументаУказанаПравильно(ВидДокумента, Серия, СообщенияПроверки);
	//		СообщенияПроверки = ?(ПустаяСтрока(СообщенияПроверки), НСтр("ru='Серия указана правильно';uk='Серія вказана правильно'"), СообщенияПроверки);
	//		Если СерияУказанаПравильно Тогда
	//			Картинка = БиблиотекаКартинок.ОперацияВыполненаУспешно;
	//			ТекстНадписи  = "";
	//			ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
	//		Иначе
	//			Картинка = БиблиотекаКартинок.Предупреждение;
	//			ТекстНадписи  = НСтр("ru='Ошибка';uk='Помилка'");
	//			ЭлементЦветТекста = Форма.ЦветСтиляПоясняющийОшибкуТекст;
	//		КонецЕсли;
	//	Иначе
	//		СообщенияПроверки = "Не указана серия документа";
	//		ТекстНадписи  = "";
	//		ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
	//		Картинка = Новый Картинка;
	//	КонецЕсли;
	//Иначе
	//	СообщенияПроверки = "Серия документа";
	//	ТекстНадписи  = "";
	//	ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
	//	Картинка = Новый Картинка;
	//КонецЕсли;
	//Форма[Элемент.Имя + "ИнфоКартинка"] = Картинка;
	//Форма[Элемент.Имя + "ИнфоТекст"] = ТекстНадписи;
	//Форма.Элементы[Элемент.Имя + "ИнфоКартинка"].Подсказка = СообщенияПроверки;
	//Форма.Элементы[Элемент.Имя + "ИнфоТекст"].Подсказка = СообщенияПроверки;
	//Форма.Элементы[Элемент.Имя + "ИнфоТекст"].ЦветТекста = ЭлементЦветТекста;
	//Элемент.Подсказка  = СообщенияПроверки;
	//Элемент.ЦветТекста = ЭлементЦветТекста;
КонецПроцедуры

Процедура ОбработатьОтображениеНомерДокументаФизическогоЛица(ВидДокумента, Номер ,Элемент, Форма) Экспорт
	//*?
	//СообщенияПроверки = "";
	//ТипНомера = ФизическиеЛицаКлиентСервер.ТипНомераДокументаУдостоверяющегоЛичность(ВидДокумента);
	//Если ЗначениеЗаполнено(ВидДокумента) И ТипНомера > 0 Тогда
	//	Если НЕ ПустаяСтрока(Номер) Тогда
	//		СерияУказанаПравильно = ФизическиеЛицаКлиентСервер.НомерДокументаУказанПравильно(ВидДокумента, Номер, СообщенияПроверки);
	//		СообщенияПроверки = ?(ПустаяСтрока(СообщенияПроверки), НСтр("ru='Номер документа указан правильно';uk='Номер документа вказаний правильно'"), СообщенияПроверки);
	//		Если СерияУказанаПравильно Тогда
	//			Картинка = БиблиотекаКартинок.ОперацияВыполненаУспешно;
	//			ТекстНадписи  = "";
	//			ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
	//		Иначе
	//			Картинка = БиблиотекаКартинок.Предупреждение;
	//			ТекстНадписи  = НСтр("ru='Ошибка';uk='Помилка'");
	//			ЭлементЦветТекста = Форма.ЦветСтиляПоясняющийОшибкуТекст;
	//		КонецЕсли;
	//	Иначе
	//		СообщенияПроверки = "Не указан номер документа";
	//		ТекстНадписи  = "";
	//		ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
	//		Картинка = Новый Картинка;
	//	КонецЕсли;
	//Иначе
	//	СообщенияПроверки = "Номер документа";
	//	ТекстНадписи  = "";
	//	ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
	//	Картинка = Новый Картинка;
	//КонецЕсли;
	//Форма[Элемент.Имя + "ИнфоКартинка"] = Картинка;
	//Форма[Элемент.Имя + "ИнфоТекст"] = ТекстНадписи;
	//Форма.Элементы[Элемент.Имя + "ИнфоКартинка"].Подсказка = СообщенияПроверки;
	//Форма.Элементы[Элемент.Имя + "ИнфоТекст"].Подсказка = СообщенияПроверки;
	//Форма.Элементы[Элемент.Имя + "ИнфоТекст"].ЦветТекста = ЭлементЦветТекста;
	//Элемент.Подсказка  = СообщенияПроверки;
	//Элемент.ЦветТекста = ЭлементЦветТекста;
КонецПроцедуры

Процедура УстановитьПодсказкуКДатеРождения(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.ФизическоеЛицо.ДатаРождения) Тогда
		
		Форма.ФизическоеЛицоДатаРожденияКартинка = Новый Картинка;
		Форма.ФизическоеЛицоДатаРожденияНадпись = "";
		ТекстПодсказки = "";
		
	Иначе
		
		Форма.ФизическоеЛицоДатаРожденияКартинка = БиблиотекаКартинок.Предупреждение;
		//*?
		//Форма.ФизическоеЛицоДатаРожденияНадпись = НСтр("ru='Дата рождения используется
		//	|при расчете взносов'");
		//ТекстПодсказки = НСтр(//	"ru='Дата рождения используется при расчете страховых взносов в ПФР.
		//		|Если дата рождения не заполнена, взносы будут рассчитаны как для
		//		|лица 1966 года рождения и старше.'");
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ФизлицоДатаРождения",
		"Подсказка",
		ТекстПодсказки);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ФизическоеЛицоДатаРожденияКартинка",
		"Подсказка",
		ТекстПодсказки);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ФизическоеЛицоДатаРожденияНадпись",
		"Подсказка",
		ТекстПодсказки);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поля инфо-надписи группы доступа физического лица

Процедура ЗаполнитьИнфоГруппыДоступа(Форма) Экспорт
	
	Форма.ГруппаДоступаИнфо = НСтр("ru='В программе ограничивается доступ к данным сотрудников. Должна быть указана группа доступа.';uk='У програмі обмежується доступ до даних співробітників. Повинна бути вказана група доступу.'");
	Форма.ГруппаДоступаКартинка = БиблиотекаКартинок.Предупреждение;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с дополнительными формами

Функция ОбщееОписаниеДополнительнойФормы(ИмяОткрываемойФормы) Экспорт
	
	ОписаниеФормы = Новый Структура;
	
	ОписаниеФормы.Вставить("ИмяФормы", ИмяОткрываемойФормы);
	ОписаниеФормы.Вставить("КлючевыеРеквизиты", Новый Структура);
	ОписаниеФормы.Вставить("РеквизитыОбъекта", Новый Структура);
	ОписаниеФормы.Вставить("ДополнительныеДанные", Новый Структура);
	ОписаниеФормы.Вставить("АдресВХранилище", "");
	
	Возврат ОписаниеФормы;
	
КонецФункции

// Частный случай формы сотрудников
Функция ОписаниеДополнительнойФормы(ИмяОткрываемойФормы) Экспорт
	
	Возврат СотрудникиКлиентСерверБазовый.ОписаниеДополнительнойФормы(ИмяОткрываемойФормы);
	
КонецФункции

Процедура ОбновитьПолеВоинскийУчет(Форма) Экспорт // ИНАГРО ++
	
	Если Форма.ДоступенПросмотрДанныхФизическихЛиц Тогда
		
		//РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(Форма, "ИНАГРО_ВоинскийУчет", Форма.ФизическоеЛицоСсылка);
		Если Форма.ИНАГРО_ВоинскийУчет.Период = '00010101' И Не ЗначениеЗаполнено(Форма.ИНАГРО_ВоинскийУчет.ОтношениеКВоинскойОбязанности) Тогда
			НаименованиеПоМенеджеруЗаписи = НСтр("ru='Ввести данные о воинском учете';uk='Ввести дані про військовий облік'");
		Иначе
			НаименованиеПоМенеджеруЗаписи = "" + Форма.ИНАГРО_ВоинскийУчет.ОтношениеКВоинскойОбязанности + 
				НСтр("ru='; Звание: ';uk='; Звання: '") + Форма.ИНАГРО_ВоинскийУчет.Звание.Наименование + 
				НСтр("ru=', ВУС: ';uk=', ВУС: '") + Форма.ИНАГРО_ВоинскийУчет.ВУС + 
				НСтр("ru=', Годность: ';uk=', Придатність: '") + Форма.ИНАГРО_ВоинскийУчет.Годность + 
				НСтр("ru=', Военкомат: ';uk=', Військомат: '") + Форма.ИНАГРО_ВоинскийУчет.Военкомат.Наименование +
				НСтр("ru=', ';uk=', '") + Форма.ИНАГРО_ВоинскийУчет.ОтношениеКВоинскомуУчету +
				?(ЗначениеЗаполнено(Форма.ИНАГРО_ВоинскийУчет.ЗабронированОрганизацией), НСтр("ru=', Забронирован за организацией ';uk=', Заброньований організацією '") + Форма.ИНАГРО_ВоинскийУчет.ЗабронированОрганизацией ,"") + 
				?(Форма.ИНАГРО_ВоинскийУчет.НаличиеМобпредписания, НСтр("ru=', имеет мобпредписание';uk=', має мобприпис'"),"");
		КонецЕсли;
		Форма.ИНАГРО_ВоинскийУчетСтрока = НаименованиеПоМенеджеруЗаписи;
	КонецЕсли;
	
КонецПроцедуры   // ИНАГРО --

