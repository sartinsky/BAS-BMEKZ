#Область ПрограммныйИнтерфейс

#Область ОформитьНаОсновании

Процедура ОформитьНаОсновании(Форма, СотрудникСсылка, ИмяКоманды) Экспорт
	
	Если Не ЗначениеЗаполнено(СотрудникСсылка) Тогда 
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("СотрудникСсылка", СотрудникСсылка);
	ДополнительныеПараметры.Вставить("ИмяКоманды", ИмяКоманды);
	ДополнительныеПараметры.Вставить("ЗаписатьДанные", Истина);
	
	// Если данные сотрудника еще не записаны, предложим записать
	Если Форма.Модифицированность Или Форма.Параметры.Свойство("Ключ") И Форма.Параметры.Ключ.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru='Сотрудник еще не записан. Записать и продолжить?';uk='Співробітник ще не записаний. Записати і продовжити?'");
							
		Оповещение = Новый ОписаниеОповещения("ОформитьНаОснованииПродолжение", ЭтотОбъект, ДополнительныеПараметры);					
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru='1С:Предприятие';uk='1С:Підприємство'"));
		
	Иначе 
		
		ДополнительныеПараметры.ЗаписатьДанные = Ложь;
		ОформитьНаОснованииЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОформитьНаОснованииПродолжение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если ДополнительныеПараметры.ЗаписатьДанные Тогда
		Оповещение = Новый ОписаниеОповещения("ОформитьНаОснованииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Форма.ЗаписатьНаКлиенте(Ложь, Оповещение);
	Иначе 
		ПараметрыЗаписи = Новый Структура;
		ОформитьНаОснованииЗавершение(ПараметрыЗаписи, ДополнительныеПараметры);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПоляВвода

Процедура ВводМесяцаРегулирование(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Направление, Модифицированность = Ложь) Экспорт
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	Значение = ДобавитьМесяц(Значение, Направление);
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Значение));
	
	Модифицированность = Истина;
 	
КонецПроцедуры 

Процедура ВводМесяцаНачалоВыбора(Форма, РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, ИзменитьМодифицированность = Истина, ОповещениеЗавершения = Неопределено, ЗначениеМесяцаПоУмолчанию = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("РедактируемыйОбъект", РедактируемыйОбъект);
	ДополнительныеПараметры.Вставить("ПутьРеквизита", ПутьРеквизита);
	ДополнительныеПараметры.Вставить("ПутьРеквизитаПредставления", ПутьРеквизитаПредставления);
	ДополнительныеПараметры.Вставить("ИзменитьМодифицированность", ИзменитьМодифицированность);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Значение = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	Если Значение <= '19000101' Тогда
		
		Если ЗначениеМесяцаПоУмолчанию = Неопределено Тогда
			Значение = НачалоМесяца(ОбщегоНазначенияКлиент.ДатаСеанса());
		Иначе
			Значение = НачалоМесяца(ЗначениеМесяцаПоУмолчанию);
		КонецЕсли;
		
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("ВводМесяцаНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода", 
		Новый Структура("Значение,РежимВыбораПериода,ЗапрашиватьРежимВыбораПериодаУВладельца", Значение, "Месяц", Ложь),
		Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
Процедура ВводМесяцаПриИзменении(РедактируемыйОбъект, ПутьРеквизита, ПутьРеквизитаПредставления, Модифицированность = Ложь) Экспорт
	
	ЗначениеПредставления = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления);
	Значение              = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита);
	
	ДатаКакМесяцПодобратьДатуПоТексту(ЗначениеПредставления, Значение);
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Значение));
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
	
	Модифицированность = Истина;
	
КонецПроцедуры 
	
Процедура ВводМесяцаНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;
	РедактируемыйОбъект = ДополнительныеПараметры.РедактируемыйОбъект;
	ПутьРеквизита = ДополнительныеПараметры.ПутьРеквизита;
	ПутьРеквизитаПредставления = ДополнительныеПараметры.ПутьРеквизитаПредставления;
	ИзменитьМодифицированность = ДополнительныеПараметры.ИзменитьМодифицированность;
	ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		
		Если ОповещениеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Ложь);
		КонецЕсли;
		
	Иначе
		
		Значение = ВыбранноеЗначение;
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизита, Значение);
		Представление = ЗарплатаКадрыКлиентСервер.ПолучитьПредставлениеМесяца(Значение);
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(РедактируемыйОбъект, ПутьРеквизитаПредставления, Представление);
		
		Если ИзменитьМодифицированность Тогда 
			Форма.Модифицированность = Истина;
		КонецЕсли;
		
		Если ОповещениеЗавершения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОповещениеЗавершения = Неопределено Тогда
		Форма.ОбновитьОтображениеДанных();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если Текст <> "" Тогда
		ДанныеВыбора = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
		Если ДанныеВыбора.Количество() = 1 Тогда
			Значение = Текст;
		Иначе
			Значение = ДанныеВыбора;
		КонецЕсли;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Если Не ПустаяСтрока(Текст) Тогда
		ДанныеВыбора = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочийФункционал

Процедура ОповеститьОЗавершении(Форма, ИмяРегистра, ВедущийОбъект) Экспорт
	
	ПараметрОповещения = Новый Структура("ИмяРегистра,МассивЗаписей", ИмяРегистра, Форма.Запись);
	Оповестить("ОтредактированаИстория", ПараметрОповещения, ВедущийОбъект);
	
КонецПроцедуры

// Процедура устанавливает текущую строку в табличных полях формы 
// Объекта, связанных с табличными частями объекта
// Предположения:
// Все табличные части и соответствующие им табличные поля - одноименны
// Все "синхронизируемые" табличные части имеют колонку с одинаковым 
// Именем по которой ведется синхронизация
// 
// Параметры:
// 	Форма - форма объекта
//  Объект - объект данных
//  Элемент - элемент формы в котором возникла активизация строки
//  СинхронизируемыеТабличныеЧасти - соответствие с 
//  Элементами, соответствующими синхронизируемым табличным полям
//  ИмяКолонки - имя колонки синхронизации
Процедура СинхронизироватьСтроки(Элементы, Объект, ИмяТЧ, СинхронизируемыеТабличныеЧасти, ИмяКолонки) Экспорт

	Если Элементы[ИмяТЧ].ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не СинхронизируемыеТабличныеЧасти[ИмяТЧ] = Неопределено И СинхронизируемыеТабличныеЧасти[ИмяТЧ] Тогда
		СинхронизируемыеТабличныеЧасти[ИмяТЧ] = Ложь;
		Возврат;
	КонецЕсли;

	Для Каждого ЭлементСоответствия Из СинхронизируемыеТабличныеЧасти Цикл

		Если ЭлементСоответствия.Ключ = ИмяТЧ Тогда 
			Продолжить;
		КонецЕсли;
		Если ЭлементСоответствия.Ключ = "НачисленияПР" Тогда
			Ключ = "Начисления";
		Иначе
			Ключ = ЭлементСоответствия.Ключ;
		КонецЕсли;
			
		СтруктураПоиска = Новый Структура("Сотрудник", Элементы[ИмяТЧ].ТекущиеДанные.Сотрудник);
		СтрокиТЧ = Объект[Ключ].НайтиСтроки(Новый Структура("Сотрудник", Элементы[ИмяТЧ].ТекущиеДанные.Сотрудник));

		Если СтрокиТЧ.Количество() > 0 Тогда

			СинхронизируемыеТабличныеЧасти[ЭлементСоответствия.Ключ]    = Истина;
			Элементы[ЭлементСоответствия.Ключ].ТекущаяСтрока = СтрокиТЧ[0].ПолучитьИдентификатор();

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Открывает форму обработки для подготовки списка работников, отобранного по указанным пользователем критериям
//
// Владелец - форма, для которой требуется вызвать обработку
// ДатаАктуальности - дата, по состоянию на которую осматривается список работников
// Организация - ссылка на организацию (может быть в том числе обособленным подразделением), 
// если передана пустая ссылка, выбираются 
//					работники всех организаций
// Подразделение - ссылка на подразделение, если передана пустая ссылка, выбираются 
//					работники всех подразделений
// 
Процедура ОткрытьФормуОтбораСпискаРаботников(Форма, ЗаполнятьПодразделение = Ложь, ПоказатьСпособВыплаты = Ложь, ПоказатьХарактер = Ложь, ВключатьГПХ = Ложь, ПоказатьРазовыеРасчеты = Ложь, ВключатьУволенных = Истина) Экспорт
	
	Объект = Форма.Объект;
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru='Не указана организация, отобрать список работников невозможно!';uk='Не зазначена організація, відібрати список працівників неможливо!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыЗаполнения(Форма, ЗаполнятьПодразделение, ПоказатьСпособВыплаты, ПоказатьХарактер, ВключатьГПХ, ПоказатьРазовыеРасчеты, ВключатьУволенных);
	Если ПараметрыФормы <> Неопределено Тогда
		ОткрытьФорму("Обработка.ИНАГРО_ФормированиеСпискаРаботников.Форма.Форма", ПараметрыФормы,
			Форма, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОформитьНаОснованииЗавершение(ПараметрыЗаписи, ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;
	СотрудникСсылка = ДополнительныеПараметры.СотрудникСсылка;
	ИмяКоманды = ДополнительныеПараметры.ИмяКоманды;
	
	Если ДополнительныеПараметры.ЗаписатьДанные И Не Форма.Записать(ПараметрыЗаписи) Тогда
		Возврат;
	КонецЕсли; 
	
	ПолноеИмяОбъекта = ПолноеИмяОбъектаМетаданныхПоИмениКомандыВводаНаОсновании(ИмяКоманды);
	
	ПутьКФормеДокумента = СтрЗаменить(ПолноеИмяОбъекта, "Документы.", "Документ.") + ".ФормаОбъекта";
	
	ПараметрыФормы = Новый Структура("Сотрудник,РежимОткрытияОкна", СотрудникСсылка, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФорму(ПутьКФормеДокумента, ПараметрыФормы, Форма);
	
КонецПроцедуры

// Возвращает полное имя объекта метаданных по имени команды ввода на основании
//
Функция ПолноеИмяОбъектаМетаданныхПоИмениКомандыВводаНаОсновании(ИмяКоманды)
	
	ПолноеИмяОбъектаМетаданных = СтрЗаменить(ИмяКоманды, "КомандаВводаНаОсновании_", "");
	ПолноеИмяОбъектаМетаданных = СтрЗаменить(ПолноеИмяОбъектаМетаданных, "_", ".");
	Возврат СтрЗаменить(ПолноеИмяОбъектаМетаданных, "ИНАГРО.", "ИНАГРО_");  //ИНАГРО
	
КонецФункции

Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено)
	
	СписокВозврата = Новый СписокЗначений;
	ТекущийГод = Год(ЗарплатаКадрыКлиентСервер.ДатаСеанса());
	
	Если ПустаяСтрока(Текст) Тогда
		ДатаПоТексту = Дата(1, 1, 1);
		СписокВозврата.Добавить("");
		Возврат СписокВозврата;
	КонецЕсли;
	
	Если Найти(Текст, ".") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ".");
	ИначеЕсли Найти(Текст, ",") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ",");
	ИначеЕсли Найти(Текст, "-") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "-");
	ИначеЕсли Найти(Текст, "/") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "/");
	ИначеЕсли Найти(Текст, "\") <> 0 Тогда
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, "\");
	Иначе
		Подстроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, " ");
	КонецЕсли;
	
	Если Подстроки.Количество() = 1 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Текст) Тогда
			МесяцЧислом = Число(Текст);
			Если МесяцЧислом >= 1 И МесяцЧислом <=12 Тогда
				ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
				Если СтрДлина(Текст) = 1 Тогда
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ=MM/yy"));
				Иначе
					СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ=MM/yy"));
				КонецЕсли;
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
		Иначе
			СписокМесяцев = СписокМесяцевПоСтроке(Текст);
			Для Каждого Месяц Из СписокМесяцев Цикл
				ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='MMMM yyyy'"));
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Подстроки.Количество() = 2 Тогда
		
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
			
			Если ПустаяСтрока(Подстроки[1]) Тогда
				ГодЧислом = 0;
				Подстроки[1] = "0";
				ТекстВозврата = Текст + "0";
			Иначе
				ГодЧислом = Число(Подстроки[1]);
				ТекстВозврата = "";
			КонецЕсли;
			
			Если ГодЧислом > 3000 Тогда
				Возврат СписокВозврата;
			КонецЕсли;
			
			Если СтрДлина(Подстроки[1]) <= 1 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
				ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
			ИначеЕсли СтрДлина(Подстроки[1]) = 4 Тогда
				ГодЧислом = Число(Подстроки[1]);
			КонецЕсли;                    
			
		Иначе
			
			Возврат СписокВозврата;
			
		КонецЕсли;                
		Если ЗначениеЗаполнено(Подстроки[0]) И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
			
			МесяцЧислом = Число(Подстроки[0]);
			Если МесяцЧислом >= 1 И МесяцЧислом <= 12 Тогда
				ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='MMMM yyyy'"));
			Иначе
				Возврат СписокВозврата;
			КонецЕсли;                
			
		Иначе
			
			СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
			
			Если СписокМесяцев.Количество() = 1 Тогда
				ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
				СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='MMMM yyyy'"));
			Иначе
				Для Каждого Месяц Из СписокМесяцев Цикл
					ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
					СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='MMMM yyyy'"));
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокВозврата;
	
КонецФункции

// Подбирает массив номеров месяцев, соответствующих переданной строке
// Например, для строки "ма" это будут 3 и 5, для "а" - 4 и 8
// Используется в ПодобратьДатуПоТексту
//
Функция СписокМесяцевПоСтроке(Текст)
	
	СписокМесяцев  = Новый СписокЗначений;
	Месяцы         = Новый Соответствие;
	МесяцыВозврата = Новый Массив;
	
	Для Счетчик = 1 По 12 Цикл
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
		Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
		СписокМесяцев.Добавить(Счетчик, Представление);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокМесяцев Цикл
		Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
			Месяцы[ЭлементСписка.Значение] = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Месяцы Цикл
		МесяцыВозврата.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Возврат МесяцыВозврата;
	
КонецФункции

Функция ПолучитьПараметрыЗаполнения(Форма, ЗаполнятьПодразделение, ПоказатьСпособВыплаты, ПоказатьХарактер, ВключатьГПХ, ПоказатьРазовыеРасчеты, ВключатьУволенных)

	Объект = Форма.Объект;

	ПараметрыФормы = Новый Структура;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ИНАГРО_ЗарплатаКВыплатеОрганизаций") Тогда
		ПараметрыФормы.Вставить("ДатаАктуальности"  	, КонецМесяца(Объект.ПериодРегистрации));
	Иначе
		ПараметрыФормы.Вставить("ДатаАктуальности"  	, Объект.Дата);
	КонецЕсли;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ИНАГРО_РегистрацияРазовыхНачисленийРаботниковОрганизаций") Тогда
		ПараметрыФормы.Вставить("ДатаНачала"  		, НачалоМесяца(Объект.ПериодРегистрации));
		ПараметрыФормы.Вставить("ДатаОкончания"  	, КонецМесяца(Объект.ПериодРегистрации));
	Иначе
		ПараметрыФормы.Вставить("ДатаНачала"  		, '00010101');
		ПараметрыФормы.Вставить("ДатаОкончания"  	, '00010101');
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Организация" 	 		, Объект.Организация);
	ПараметрыФормы.Вставить("ДатаУволенных"     	, НачалоМесяца(Объект.Дата));
	ПараметрыФормы.Вставить("ПоказатьСпособВыплаты"	, ПоказатьСпособВыплаты);
	ПараметрыФормы.Вставить("ПоказатьХарактер"		, ПоказатьХарактер);
	ПараметрыФормы.Вставить("ВключатьГПХ"			, ВключатьГПХ);
	ПараметрыФормы.Вставить("ВключатьУволенных"		, ВключатьУволенных);
	ПараметрыФормы.Вставить("ПоказатьРазовыеРасчеты", ПоказатьРазовыеРасчеты);
	
	Если ЗаполнятьПодразделение Тогда
		ПараметрыФормы.Вставить("ПодразделениеОрганизации", Объект.ПодразделениеОрганизации);
	Иначе
		ПараметрыФормы.Вставить("ПодразделениеОрганизации", Неопределено);
	КонецЕсли;
	
	Возврат ПараметрыФормы;

КонецФункции

#КонецОбласти