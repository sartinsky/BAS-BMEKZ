////////////////////////////////////////////////////////////////////////////////
// Функции и процедуры обеспечения формирования бухгалтерских отчетов.
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура заполняет список значений с ключами отчетов, которые поддерживаются подсистемой
//
Процедура СписокОтчетовПоддерживаемыхПодсистемой(СписокОтчетов) Экспорт
	
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.Продажи.Имя);
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ПродажиПоМесяцам.Имя);
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ЗадолженностьПокупателей.Имя);
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ЗадолженностьПоставщикам.Имя);
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ЗадолженностьПокупателейПоСрокамДолга.Имя);
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ЗадолженностьПоставщикамПоСрокамДолга.Имя);
	
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ОборотныеСредства.Имя);
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ДинамикаЗадолженностиПокупателей.Имя);
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ДинамикаЗадолженностиПоставщикам.Имя);
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ОстаткиДенежныхСредств.Имя);
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.ПоступленияДенежныхСредств.Имя);
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.РасходыДенежныхСредств.Имя);
	СписокОтчетов.Добавить("Отчет." + Метаданные.Отчеты.АнализДвиженийДенежныхСредств.Имя);	
	
КонецПроцедуры

Процедура ОбработатьНаборДанныхСвязаннойИнформации(Схема, ИмяНабора, ПараметрыПоляВладельца, ИмяПоляПрефикс = "Субконто") Экспорт
	
	Если ПараметрыПоляВладельца.ИндексСубконто > 0 Тогда
		ПутьКДаннымОсновногоПоля = "";
		ЗаголовокОсновногоПоля   = "";
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если Найти(ПолеНабора.Поле, "СвязанноеПолеСсылка") = 1 Тогда
				ПутьКДаннымОсновногоПоля = ПолеНабора.ПутьКДанным;
				ЗаголовокОсновногоПоля   = СтрЗаменить(ПолеНабора.Заголовок, ".Ссылка", "");
			КонецЕсли;
		КонецЦикла;
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если Найти(ПолеНабора.Поле, "СвязанноеПоле") = 1 Тогда
				ПолеНабора.ПутьКДанным = СтрЗаменить(ПолеНабора.ПутьКДанным, ПутьКДаннымОсновногоПоля, ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто);
				ПолеНабора.Заголовок   = СтрЗаменить(ПолеНабора.Заголовок, ЗаголовокОсновногоПоля, ПараметрыПоляВладельца.ЗаголовокСубконто);
				ПолеНабора.ОграничениеИспользования.Группировка = Ложь;
				ПолеНабора.ОграничениеИспользования.Поле        = Ложь;
				ПолеНабора.ОграничениеИспользования.Условие     = Ложь;
				ПолеНабора.ОграничениеИспользования.Порядок     = Ложь;
				
				ПолеНабора.ОграничениеИспользованияРеквизитов.Группировка = Ложь;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Поле        = Ложь;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Условие     = Ложь;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Порядок     = Ложь;
			КонецЕсли;
		КонецЦикла;
		Для Каждого Связь Из Схема.СвязиНаборовДанных Цикл
			Если Связь.НаборДанныхПриемник = ИмяНабора Тогда
				Связь.ВыражениеИсточник = ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто;
				Связь.ВыражениеПриемник = ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если Найти(ПолеНабора.Поле, "СвязанноеПоле") = 1 Тогда
				ПолеНабора.ОграничениеИспользования.Группировка = Истина;
				ПолеНабора.ОграничениеИспользования.Поле        = Истина;
				ПолеНабора.ОграничениеИспользования.Условие     = Истина;
				ПолеНабора.ОграничениеИспользования.Порядок     = Истина;
				
				ПолеНабора.ОграничениеИспользованияРеквизитов.Группировка = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Поле        = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Условие     = Истина;
				ПолеНабора.ОграничениеИспользованияРеквизитов.Порядок     = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает искомые значения из данных расшифровки.
//
// Параметры:
//  ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - Данные расшифровки из СКД.
//  СоответствиеПолей - Соответствие - Ключи соответствуют именам искомых в данных расшифровки полей
//  Расшифровка - ИдентификаторРасшифровкиКомпоновкиДанных - Идентификатор элемента данных расшифровки
//                в иерархии которого нужно осуществлять поиск.
//
// Возвращаемое значение:
//  Соответствие - Ключи соответствуют именам запрошенных полей.
//
Функция ПолучитьДанныеРасшифровки(ДанныеРасшифровки, СоответствиеПолей, Расшифровка) Экспорт
	
	СоответствиеДанных = Новый Соответствие();
	
	Если ДанныеРасшифровки <> Неопределено Тогда
		// Ищем интересующие нас поля в заданной расшифровке
		Для каждого ЭлементДанных Из СоответствиеПолей Цикл
			// Получаем элемент расшифровки, в котором нужно искать поля
			Родитель = ДанныеРасшифровки.Элементы[Расшифровка];
			// Вызываем рекурсивный поиск поля
			ЗначениеРасшифровки = ПолучитьЗначениеРасшифровки(Родитель, ЭлементДанных.Ключ);
			Если ЗначениеРасшифровки <> Неопределено Тогда
				// Значение нашлось, помещаем в структуру
				СоответствиеДанных.Вставить(ЭлементДанных.Ключ, ЗначениеРасшифровки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СоответствиеДанных;

КонецФункции

// Возвращает значение искомого поля из элемента расшифровки.
//
Функция ПолучитьЗначениеРасшифровки(Элемент, ИмяПоля)
	
	Если ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		// Ищем поля в текущем элементе
		Поле = Элемент.ПолучитьПоля().Найти(ИмяПоля);
		Если Поле <> Неопределено Тогда
			// Возвращаем значение найденного поля
			Возврат Поле.Значение;
		КонецЕсли;
	КонецЕсли;
	
	// Если поле не нашлось, или текущий элемент не содержит полей
	// ищем поля среди родителей элемента (вышестоящие группировки).
	Родители  = Элемент.ПолучитьРодителей();
	Если Родители.Количество() > 0 Тогда
		
		Для Каждого Родитель Из Родители Цикл
			// Вызываем рекурсивный поиск поля
			ЗначениеРасшифровки = ПолучитьЗначениеРасшифровки(Родитель, ИмяПоля);
			
			Если ЗначениеРасшифровки <> Неопределено Тогда
				Возврат ЗначениеРасшифровки;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Если ничего не нашлось
	Возврат Неопределено;
	
КонецФункции

// Сохраняет структуру опций, используемых для указания настроек отчета.
//
// Параметры:
//  Форма        - УправляемаяФорма - имеет основной реквизит "Отчет".
//  Разделитель  - ПланСчетовСсылка.Хозрасчетный, ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные - разделитель
//                              сохраняемых настроек.
//
Процедура СохранитьОписаниеНастроек(Форма, Разделитель) Экспорт
	
	Если Не ЗначениеЗаполнено(Разделитель) Тогда
		Возврат;
	КонецЕсли;
	ИмяРазделителя = Разделитель.Метаданные().Имя;
	ИмяОтчета = БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(Форма);
	Отчет = Форма.Отчет;
	
	Если ИмяРазделителя = "ВидыСубконтоХозрасчетные" Тогда
		
		Если Отчет.СписокВидовСубконто.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		СписокВидовСубконто = Отчет.СписокВидовСубконто.Скопировать();
		СписокВидовСубконто[0].Значение = Разделитель;
		КоличествоСубконто = СписокВидовСубконто.Количество();
		КоличествоСубконтоМаксимум = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьМаксКоличествоСубконто();
		Для НомерСубконто = 1 По КоличествоСубконто Цикл
			ИндексСКонца = КоличествоСубконто - НомерСубконто;
			Если ИндексСКонца > КоличествоСубконтоМаксимум - 1
			 Или Не ЗначениеЗаполнено(СписокВидовСубконто[ИндексСКонца].Значение) Тогда
				СписокВидовСубконто.Удалить(ИндексСКонца);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Подготавливаем структуру настроек.
	ОписаниеНастройки = Новый Структура;
	
	// Управление показателями.
	ТипБулево = Тип("Булево");
	КоллекцияНастроек = Отчеты[ИмяОтчета].СохраняемыеОпции();
	КоллекцияВключенныхНастроек = Новый Структура;
	Для каждого Показатель Из КоллекцияНастроек Цикл
		Если ТипЗнч(Отчет[Показатель]) <> ТипБулево Или Отчет[Показатель] Тогда
			КоллекцияВключенныхНастроек.Вставить(Показатель, Отчет[Показатель]);
		КонецЕсли;
	КонецЦикла;
	Если ИмяРазделителя = "ВидыСубконтоХозрасчетные"
	   И КоллекцияВключенныхНастроек.Свойство("СписокВидовСубконто") Тогда
		КоллекцияВключенныхНастроек.СписокВидовСубконто = СписокВидовСубконто;
	КонецЕсли;
	ОписаниеНастройки.Вставить("Показатели", КоллекцияВключенныхНастроек);
	
	// Группировки.
	Если Отчет.Свойство("Группировка") Тогда
		КоллекцияВключенныхНастроек = Отчет.Группировка.Выгрузить(, "Использование, Поле, Представление, ТипГруппировки");
		ОписаниеНастройки.Вставить("Группировка", КоллекцияВключенныхНастроек);
	КонецЕсли;
	
	// Отбор.
	// Фиксируем сам факт, что отбор нужно перезаполнять. Однако используем не сохраненные ранее настройки,
	// а алгоритмическим преобразованием. См. ПреобразоватьОтборыПоСчету()
	ОписаниеНастройки.Вставить("Отбор", Неопределено);
	
	// Дополнительные поля.
	Если Отчет.Свойство("ДополнительныеПоля") Тогда
		КоллекцияВключенныхНастроек = Отчет.ДополнительныеПоля.Выгрузить(, "Использование, Поле, Представление");
		ОписаниеНастройки.Вставить("ДополнительныеПоля", КоллекцияВключенныхНастроек);
	КонецЕсли;
	
	// Сортировка.
	Если ИмяРазделителя = "Хозрасчетный" Тогда
		ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Форма.СчетИсходноеЗначение);
		КоллекцияВключенныхНастроек = ОписаниеСортировки(Отчет.КомпоновщикНастроек.Настройки.Порядок.Элементы, ДанныеСчета);
	Иначе
		КоллекцияВключенныхНастроек = ОписаниеСортировки(Отчет.КомпоновщикНастроек.Настройки.Порядок.Элементы);
	КонецЕсли;
	ОписаниеНастройки.Вставить("Порядок", КоллекцияВключенныхНастроек);
	
	// Подготавливаем и сохраняем контейнер.
	
	КлючиОписанияНастройки = КлючиОписанияНастройки(ИмяОтчета, ИмяРазделителя, Разделитель);	
	ХранилищеПользовательскихНастроекОтчетов.Сохранить(
		КлючиОписанияНастройки.КлючОбъекта,
		КлючиОписанияНастройки.КлючНастроек,
		ОписаниеНастройки,
		КлючиОписанияНастройки);
	
КонецПроцедуры

// Задает структуру опций, используемых для указания настроек отчета. Если нет ранее сохраненных настроек,
// то устанавливаются настройки по-умолчанию.
//
// Параметры:
//  Форма        - УправляемаяФорма - имеет основной реквизит "Отчет".
//  Разделитель  - ПланСчетовСсылка.Хозрасчетный, ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные - разделитель
//                              сохраняемых настроек.
//  ТолькоОбновление - Строка - если Ложь, то читается ранее сохраненная настройка; если Истина, то только проверяется
//                              корректность текущей настройки.
//
Процедура ПрочитатьОписаниеНастроек(Форма, Разделитель, ТолькоОбновление = Ложь) Экспорт
	
	Перем КоллекцияВключенныхНастроек;
	
	Если Не ЗначениеЗаполнено(Разделитель) Тогда
		Возврат;
	КонецЕсли;
	ИмяРазделителя = Разделитель.Метаданные().Имя;
	ИмяОтчета = БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(Форма);
	Отчет = Форма.Отчет;
	
	// Получаем источник применяемых настроек.
	Если ТолькоОбновление Тогда // лишь обновить настройки
		
		Если ИмяРазделителя = "ВидыСубконтоХозрасчетные" Тогда
			// Используем заданный сейчас в отчете список видов субконто. Для случая изменения одного из неосновных субконто.
			Форма.ИзменениеСхемыКомпоновкиДанныхНаСервере();
			ЗаполнитьПризнакиУчета(Форма);
			СписокВидовСубконто = Отчет.СписокВидовСубконто;
			
		Иначе
			
			ТекстИсключения = НСтр("ru='Разделитель настроек ""%1"" не используется для обновления настроек.';uk= 'Роздільник настройок ""%1"" не використовується для оновлення настройок.'");
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстИсключения, ИмяРазделителя);
			
		КонецЕсли;
		
		// Подготавливаем текущие настройки к преобразованию.
		ОписаниеНастройки = Новый Структура;
		Если Отчет.Свойство("Группировка") Тогда
			КоллекцияВключенныхНастроек = Отчет.Группировка.Выгрузить(, "Использование, Поле, Представление, ТипГруппировки");
			ОписаниеНастройки.Вставить("Группировка", КоллекцияВключенныхНастроек);
		КонецЕсли;
		ОписаниеНастройки.Вставить("Отбор", Неопределено);
		Если Отчет.Свойство("ДополнительныеПоля") Тогда
			КоллекцияВключенныхНастроек = Отчет.ДополнительныеПоля.Выгрузить(, "Использование, Поле, Представление");
			ОписаниеНастройки.Вставить("ДополнительныеПоля", КоллекцияВключенныхНастроек);
		КонецЕсли;
		КоллекцияВключенныхНастроек = ОписаниеСортировки(Отчет.КомпоновщикНастроек.Настройки.Порядок.Элементы);
		ОписаниеНастройки.Вставить("Порядок", КоллекцияВключенныхНастроек);
		
	Иначе // прочитать ранее сохраненные
		
		КлючиОписанияНастройки = КлючиОписанияНастройки(ИмяОтчета, ИмяРазделителя, Разделитель);
		ОписаниеНастройки = ХранилищеПользовательскихНастроекОтчетов.Загрузить(
			КлючиОписанияНастройки.КлючОбъекта,
			КлючиОписанияНастройки.КлючНастроек);
		
		Если ОписаниеНастройки = Неопределено Тогда // нет ранее сохраненного описания
		
			Если ИмяРазделителя = "ВидыСубконтоХозрасчетные" Тогда
				Форма.ИзменениеСхемыКомпоновкиДанныхНаСервере();
				ЗаполнитьПризнакиУчета(Форма);
			КонецЕсли;
			
			ЗаполняемыеНастройки = Новый Структура;
			ЗаполняемыеНастройки.Вставить("Показатели",         Истина);
			ЗаполняемыеНастройки.Вставить("Группировка",        Отчет.Свойство("Группировка"));
			ЗаполняемыеНастройки.Вставить("Отбор",              Истина);
			ЗаполняемыеНастройки.Вставить("ДополнительныеПоля", Отчет.Свойство("ДополнительныеПоля"));
			ЗаполняемыеНастройки.Вставить("Порядок",            Истина);
			ЗаполняемыеНастройки.Вставить("ВыводимыеДанные",    ИмяОтчета = "ОборотыСчета");

			Форма.ЗаполнитьНастройкамиПоУмолчанию(ЗаполняемыеНастройки);
			БухгалтерскиеОтчетыВызовСервера.ОбновитьОписаниеОтборовОтчета(Форма); 
			Возврат;
			
		Иначе // используем ранее сохраненное описание настроек
			
			Если ИмяРазделителя = "ВидыСубконтоХозрасчетные" Тогда
			
				СписокВидовСубконто = Неопределено;
				Если Не ОписаниеНастройки.Свойство("Показатели")
				 Или Не ОписаниеНастройки.Показатели.Свойство("СписокВидовСубконто", СписокВидовСубконто) Тогда
					// Используем заданный сейчас в отчете список видов субконто.
					СписокВидовСубконто = Отчет.СписокВидовСубконто;
				Иначе
					// Используем ранее сохраненный список видов субконто.
					Отчет.СписокВидовСубконто = СписокВидовСубконто;
				КонецЕсли;
				Форма.ИзменениеСхемыКомпоновкиДанныхНаСервере();
				ЗаполнитьПризнакиУчета(Форма);
				
			ИначеЕсли ИмяРазделителя <> "Хозрасчетный" Тогда
				
				ТекстИсключения = НСтр("ru='Разделитель настроек ""%1"" не используется для хранения настроек.';uk= 'Роздільник настройок ""%1"" не використовується для зберігання настройок.'");
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстИсключения, ИмяРазделителя);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Получаем параметры, влияющие на настройки отчета.
	Если ИмяРазделителя = "Хозрасчетный" Тогда
		
		ДанныеСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Отчет.Счет);
		КоличествоСубконто       = ДанныеСчета.КоличествоСубконто;
			
	ИначеЕсли ИмяРазделителя = "ВидыСубконтоХозрасчетные" Тогда
		
		ДанныеСчета = Новый Структура;
		ДанныеСчета.Вставить("Вид",            ?(Форма.ЕстьСчета, ВидСчета.АктивноПассивный, Неопределено));
		ДанныеСчета.Вставить("Валютный",       Форма.ЕстьВалюта);
		ДанныеСчета.Вставить("Количественный", Форма.ЕстьКоличество);
		
		НомерСубконто = 1;
		КоличествоСубконто = СписокВидовСубконто.Количество();
		Для каждого ВидСубконто Из СписокВидовСубконто Цикл
			Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
				ДанныеСчета.Вставить("ВидСубконто" + НомерСубконто, ВидСубконто.Значение);
				НомерСубконто = НомерСубконто + 1;
			Иначе
				КоличествоСубконто = КоличествоСубконто - 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОписаниеНастройки.Свойство("Показатели", КоллекцияВключенныхНастроек) Тогда
		
		ТипБулево = Тип("Булево");
		КоллекцияНастроек = Отчеты[ИмяОтчета].СохраняемыеОпции();
		// Сбрасываем все флаги.
		Для каждого Показатель Из КоллекцияНастроек Цикл
			Если ТипЗнч(Отчет[Показатель]) = ТипБулево И Отчет[Показатель] Тогда // только для типа Булево
				Отчет[Показатель] = Ложь;
			КонецЕсли;
		КонецЦикла;
		// Устанавливаем нужные флаги и свойства.
		ОдинИзПоказателейОтмечен = Ложь;
		Для каждого Показатель Из КоллекцияВключенныхНастроек Цикл
			
			Если Не Отчет.Свойство(Показатель.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Показатель.Ключ = "ПоказательВалютнаяСумма" Тогда
				Отчет[Показатель.Ключ] = ДанныеСчета.Валютный;
			ИначеЕсли Показатель.Ключ = "ПоказательКоличество" Тогда
				Отчет[Показатель.Ключ] = ДанныеСчета.Количественный;
			ИначеЕсли Показатель.Ключ = "РазвернутоеСальдо" Тогда
				Отчет[Показатель.Ключ] = (ДанныеСчета.Вид = ВидСчета.АктивноПассивный);
			Иначе
				Отчет[Показатель.Ключ] = Показатель.Значение;
			КонецЕсли;
			Если Не ОдинИзПоказателейОтмечен
			   И ТипЗнч(Показатель.Значение) = ТипБулево И Показатель.Значение
			   И Лев(Показатель.Ключ, 10) = "Показатель" Тогда
				ОдинИзПоказателейОтмечен = Истина;
			КонецЕсли;
			
		КонецЦикла;
		Если Не ОдинИзПоказателейОтмечен Тогда
			Отчет.ПоказательБУ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ДоступныеПоляГруппировок = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок;
	Если ОписаниеНастройки.Свойство("Группировка", КоллекцияВключенныхНастроек) Тогда
		
		// Удаляем сохраненные группировки, которые стали некорректными.
		ИсключаемыеНастройки = Новый Массив;
	
		Если Не ДанныеСчета.Валютный Тогда
			ИсключаемыеНастройки.Добавить("Валюта");
		КонецЕсли;
		Для НомерСубконто = 1 По КоличествоСубконто Цикл
			
			// проверяем, что состав субконто на счете не изменился
			ОписаниеПоля = ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных("Субконто" + НомерСубконто));
			Если ОписаниеПоля = Неопределено Тогда
				ИсключаемыеНастройки.Добавить("Субконто" + НомерСубконто);
			Иначе
				ИндексПоля = ИндексПоляВКоллекции(КоллекцияВключенныхНастроек, "Субконто" + НомерСубконто);
				Если ИндексПоля <> Неопределено Тогда // ранее была группировка для этого субконто
					ПредставлениеПоля = КоллекцияВключенныхНастроек[ИндексПоля].Представление;
					ДлинаПредставленияПоля = СтрДлина(ОписаниеПоля.Заголовок);
					Если ОписаниеПоля.Заголовок <> Лев(ПредставлениеПоля, ДлинаПредставленияПоля) Тогда
						// Субконто сдвинулись.
						ИсключаемыеНастройки.Добавить("Субконто" + НомерСубконто);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли; 
			
		КонецЦикла;
		Для НомерСубконто = КоличествоСубконто + 1 По БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьМаксКоличествоСубконто() Цикл
			ИсключаемыеНастройки.Добавить("Субконто" + НомерСубконто);
		КонецЦикла;
		Для каждого ИмяПоля Из ИсключаемыеНастройки Цикл
			ИндексПоля = ИндексПоляВКоллекции(КоллекцияВключенныхНастроек, ИмяПоля);
			Пока ИндексПоля <> Неопределено Цикл
				КоллекцияВключенныхНастроек.Удалить(ИндексПоля);
				ИндексПоля = ИндексПоляВКоллекции(КоллекцияВключенныхНастроек, ИмяПоля);
			КонецЦикла;
		КонецЦикла; 

		Отчет.Группировка.Загрузить(КоллекцияВключенныхНастроек);
		
		Для НомерСубконто = 1 По КоличествоСубконто Цикл
			
			Если ИндексПоляВКоллекции(КоллекцияВключенныхНастроек, "Субконто" + НомерСубконто) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПоследняяГруппировка = ДобавитьГруппировкуОтчета(Отчет.Группировка,
										ДоступныеПоляГруппировок,
										"Субконто" + НомерСубконто);
				
			Если ИмяРазделителя = "ВидыСубконтоХозрасчетные"
			   И ПоследняяГруппировка <> Неопределено Тогда
				ПоследняяГруппировка.Использование = Истина;
			КонецЕсли;	
			
		КонецЦикла;
		Если ДанныеСчета.Валютный
		   И ИндексПоляВКоллекции(КоллекцияВключенныхНастроек, "Валюта") = Неопределено Тогда
			ДобавитьГруппировкуОтчета(Отчет.Группировка, ДоступныеПоляГруппировок, "Валюта");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОписаниеНастройки.Свойство("Отбор") Тогда
		Форма.ЗаполнитьНастройкамиПоУмолчанию(Новый Структура("Отбор", Истина));
		БухгалтерскиеОтчетыВызовСервера.ОбновитьОписаниеОтборовОтчета(Форма); 
	КонецЕсли;
	
	ДоступныеПоляВыбора = Отчет.КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора;
	Если ОписаниеНастройки.Свойство("ДополнительныеПоля", КоллекцияВключенныхНастроек) Тогда
		
		Отчет.ДополнительныеПоля.Очистить();
		ШаблонСпискаПолей = Отчет.ДополнительныеПоля.Выгрузить();
		
		// Удаляем сохраненные поля, которые стали некорректными.
		ИсключаемыеНастройки = Новый Массив;
		Для каждого Показатель Из КоллекцияВключенныхНастроек Цикл
			
			ПозицияТочки = Найти(Показатель.Поле, ".");
			Если ПозицияТочки = 0 Тогда
				ИмяПоля = Показатель.Поле;
			Иначе
				ИмяПоля = Лев(Показатель.Поле, ПозицияТочки - 1);
			КонецЕсли;
			Если КоличествоСубконто < 3 И ИмяПоля = "Субконто3" Тогда
				ИсключаемыеНастройки.Добавить(Показатель);
			ИначеЕсли КоличествоСубконто < 2 И ИмяПоля = "Субконто2" Тогда
				ИсключаемыеНастройки.Добавить(Показатель);
			ИначеЕсли КоличествоСубконто < 1 И ИмяПоля = "Субконто1" Тогда
				ИсключаемыеНастройки.Добавить(Показатель);
			ИначеЕсли Найти(ИмяПоля, "Субконто") = 1 Тогда // проверяем, что состав субконто на счете не изменился
				ОписаниеПоля = ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля));
				Если ОписаниеПоля = Неопределено Тогда
					ИсключаемыеНастройки.Добавить(ИмяПоля);
				Иначе
					ДлинаПредставленияПоля = СтрДлина(ОписаниеПоля.Заголовок);
					Если ОписаниеПоля.Заголовок <> Лев(Показатель.Представление, ДлинаПредставленияПоля) Тогда
						// Субконто сдвинулись.
						ИсключаемыеНастройки.Добавить(Показатель);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля)) = Неопределено Тогда
				ИсключаемыеНастройки.Добавить(Показатель);
			КонецЕсли; 
			
		КонецЦикла;
		Для каждого Показатель Из ИсключаемыеНастройки Цикл
			КоллекцияВключенныхНастроек.Удалить(Показатель);
		КонецЦикла;
		
		// Заполняем ранее включавшиеся дополнительные поля.
		Для каждого Показатель Из КоллекцияВключенныхНастроек Цикл
			
			НоваяСтрока = Отчет.ДополнительныеПоля.Добавить();
			НоваяСтрока.Использование = Показатель.Использование;
			НоваяСтрока.Поле          = Показатель.Поле;
			НоваяСтрока.Представление = Показатель.Представление;
		
		КонецЦикла;
		
		// Заполняем невключенные дополнительные поля. 
		БухгалтерскиеОтчетыВызовСервера.ЗаполнитьДополнительныеПоляИзНастроек(Отчет.КомпоновщикНастроек, ШаблонСпискаПолей, Отчет.Группировка);
		Для каждого Показатель Из ШаблонСпискаПолей Цикл
			
			Если КоллекцияВключенныхНастроек.Найти(Показатель.Поле, "Поле") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Отчет.ДополнительныеПоля.Добавить();
			НоваяСтрока.Использование = Ложь;
			НоваяСтрока.Поле          = Показатель.Поле;
			НоваяСтрока.Представление = Показатель.Представление;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Сортировка.
	Если ОписаниеНастройки.Свойство("Порядок", КоллекцияВключенныхНастроек) Тогда
		
		Порядок = Отчет.КомпоновщикНастроек.Настройки.Порядок;
		Порядок.Элементы.Очистить();
		
		// Удаляем сохраненные поля, которые стали некорректными.
		Если ИмяРазделителя = "Хозрасчетный" Тогда 
			УдалитьНедоступныеПоля(КоллекцияВключенныхНастроек, Порядок.ДоступныеПоляПорядка, КоличествоСубконто, ДанныеСчета);
		Иначе
			УдалитьНедоступныеПоля(КоллекцияВключенныхНастроек, Порядок.ДоступныеПоляПорядка, КоличествоСубконто);
		КонецЕсли;
		
		// Заполняем ранее включавшуюся сортировку.
		Для каждого Показатель Из КоллекцияВключенныхНастроек Цикл
			
			НоваяСтрока = Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			НоваяСтрока.РежимОтображения  = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
			НоваяСтрока.Использование     = Показатель.Использование;
			НоваяСтрока.Поле              = Новый ПолеКомпоновкиДанных(Показатель.Поле);
			НоваяСтрока.ТипУпорядочивания = Показатель.ТипУпорядочивания;
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Преобразует отборы, ранее применявшиеся по счету РазделительИсходноеЗначение к отборам по счету Разделитель,
// удаляя неподходящие. Сопоставление производится по видам субконто.
//
// Параметры:
//  Отбор        - ОтборКомпоновкиДанных - набор преобразуемых отборов.
//  ИсходныйСчет - ПланСчетовСсылка - ранее использовавшийся счет.
//  НовыйСчет    - ПланСчетовСсылка - новый счет, который будет использоваться.
//
Процедура ПреобразоватьОтборыПоСчету(Отбор, ИсходныйСчет, НовыйСчет) Экспорт
	
	Если ИсходныйСчет = НовыйСчет Тогда
		Возврат;
 	КонецЕсли; 
	
	// Определяем правила преобразования аналитик одного счета в аналитики другого.
	
	ДанныеИсходногоСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ИсходныйСчет);
	ДанныеНовогоСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(НовыйСчет);
	
	// Правила преобразования будут описаны в виде соответствия.
	// Ключ = имя поля в исходном отборе.
	// Значение = имя поля в новом отборе. Если задано пустое значение, то отбор по полю нужно удалить.
	КартаПолей = Новый Соответствие;
	
	// Проекция измерений.
	Если ДанныеНовогоСчета.УчетПоНалоговымНазначениямНДС Тогда
		КартаПолей.Вставить("НалоговоеНазначение", "НалоговоеНазначение");
	Иначе
		КартаПолей.Вставить("НалоговоеНазначение", "");
	КонецЕсли;
	Если ДанныеНовогоСчета.Валютный Тогда
		КартаПолей.Вставить("Валюта", "Валюта");
	Иначе
		КартаПолей.Вставить("Валюта", "");
	КонецЕсли;
	
	// Проекция субконто.
	НовыеСубконто = Новый Массив;
	Для НомерСубконто = 1 По ДанныеНовогоСчета.КоличествоСубконто Цикл
		НовыеСубконто.Добавить("Субконто" + НомерСубконто);
	КонецЦикла;
	Для НомерСубконтоИсходного = 1 По ДанныеИсходногоСчета.КоличествоСубконто Цикл
		
		ЦелевоеСубконто = 0;
		Для НомерСубконто = 1 По ДанныеНовогоСчета.КоличествоСубконто Цикл
			Если ДанныеИсходногоСчета["ВидСубконто" + НомерСубконтоИсходного] = ДанныеНовогоСчета["ВидСубконто" + НомерСубконто] Тогда
				
				ЦелевоеСубконто = НомерСубконто;
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		КартаПолей.Вставить("Субконто" + НомерСубконтоИсходного,
			?(ЦелевоеСубконто = 0, "", "Субконто" + ЦелевоеСубконто));
	
	КонецЦикла;	
		
	// Проекция ресурсов. Задаем только те ресурсы, которые необходимо удалить.
	ДоступныеПоляОтбора = Отбор.ДоступныеПоляОтбора.Элементы;
	ГруппыРесурсов = Новый Структура;
	Если ДоступныеПоляОтбора.Найти("ОборотыЗаПериод") <> Неопределено Тогда
		ГруппыРесурсов.Вставить("ОборотыЗаПериод", "Оборот");
	КонецЕсли;
	Если ДоступныеПоляОтбора.Найти("СальдоНаКонецПериода") <> Неопределено Тогда
		ГруппыРесурсов.Вставить("СальдоНаКонецПериода",  "Конечный");
	КонецЕсли;
	Если ДоступныеПоляОтбора.Найти("СальдоНаНачалоПериода") <> Неопределено Тогда
		ГруппыРесурсов.Вставить("СальдоНаНачалоПериода", "Начальный");
	КонецЕсли;
	ГруппыПоказателей = Новый Массив;
	ГруппыПоказателей.Добавить("БУ");
	ГруппыПоказателей.Добавить("НУ");
	ГруппыПоказателей.Добавить("ВалютнаяСумма");
	СтороныПроводки = Новый Массив;
	СтороныПроводки.Добавить("Дт");
	СтороныПроводки.Добавить("Кт");
	
	Если Не ДанныеНовогоСчета.Валютный И ДанныеИсходногоСчета.Валютный Тогда
		
		Для каждого СторонаПроводки Из СтороныПроводки Цикл
		
			Для каждого ГруппаРесурсов Из ГруппыРесурсов Цикл
				
				Если ГруппаРесурсов.Значение = "Оборот" Тогда
					
					ИмяРесурса = ГруппаРесурсов.Ключ + "." + "ВалютнаяСумма" + ГруппаРесурсов.Значение + СторонаПроводки;
					КартаПолей.Вставить(ИмяРесурса, "");
					
				Иначе
					
					ИмяРесурса = ГруппаРесурсов.Ключ + "." + "ВалютнаяСумма" + ГруппаРесурсов.Значение + "Остаток" + СторонаПроводки;
					КартаПолей.Вставить(ИмяРесурса, "");
					ИмяРесурса = ГруппаРесурсов.Ключ + "." + "ВалютнаяСумма" + ГруппаРесурсов.Значение + "РазвернутыйОстаток" + СторонаПроводки;
					КартаПолей.Вставить(ИмяРесурса, "");
					
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЦикла; 
		
	КонецЕсли;
	
	Если Не ДанныеНовогоСчета.Количественный И ДанныеИсходногоСчета.Количественный Тогда
		
		Для каждого СторонаПроводки Из СтороныПроводки Цикл
		
			Для каждого ГруппаРесурсов Из ГруппыРесурсов Цикл
				
				Если ГруппаРесурсов.Значение = "Оборот" Тогда
					
					ИмяРесурса = ГруппаРесурсов.Ключ + "." + "Количество" + ГруппаРесурсов.Значение + СторонаПроводки;
					КартаПолей.Вставить(ИмяРесурса, "");
					
				Иначе
					
					ИмяРесурса = ГруппаРесурсов.Ключ + "." + "Количество" + ГруппаРесурсов.Значение + "Остаток" + СторонаПроводки;
					КартаПолей.Вставить(ИмяРесурса, "");
					ИмяРесурса = ГруппаРесурсов.Ключ + "." + "Количество" + ГруппаРесурсов.Значение + "РазвернутыйОстаток" + СторонаПроводки;
					КартаПолей.Вставить(ИмяРесурса, "");
					
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЦикла; 
		
	КонецЕсли;
	
	Если Не ДанныеНовогоСчета.НалоговыйУчет И ДанныеИсходногоСчета.НалоговыйУчет Тогда
		
		Для каждого ГруппаПоказателей Из ГруппыПоказателей Цикл
			Если ГруппаПоказателей <> "НУ" Тогда
				Продолжить;
			КонецЕсли;
			
			Для каждого СторонаПроводки Из СтороныПроводки Цикл
			
				Для каждого ГруппаРесурсов Из ГруппыРесурсов Цикл
					
					Если ГруппаРесурсов.Значение = "Оборот" Тогда
						
						ИмяРесурса = ГруппаРесурсов.Ключ + "." + ГруппаПоказателей + ГруппаРесурсов.Значение + СторонаПроводки;
						КартаПолей.Вставить(ИмяРесурса, "");
						
					Иначе
						
						ИмяРесурса = ГруппаРесурсов.Ключ + "." + ГруппаПоказателей + ГруппаРесурсов.Значение + "Остаток" + СторонаПроводки;
						КартаПолей.Вставить(ИмяРесурса, "");
						ИмяРесурса = ГруппаРесурсов.Ключ + "." + ГруппаПоказателей + ГруппаРесурсов.Значение + "РазвернутыйОстаток" + СторонаПроводки;
						КартаПолей.Вставить(ИмяРесурса, "");
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
		
		КонецЦикла; 
		
	КонецЕсли;
	
	Если ДанныеНовогоСчета.Вид <> ВидСчета.АктивноПассивный И ДанныеИсходногоСчета.Вид = ВидСчета.АктивноПассивный Тогда
		
		Для каждого ГруппаРесурсов Из ГруппыРесурсов Цикл
			Если ГруппаРесурсов.Значение = "Оборот" Тогда
				Продолжить;
			КонецЕсли;
		
			Для каждого СторонаПроводки Из СтороныПроводки Цикл
				
				Для каждого ГруппаПоказателей Из ГруппыПоказателей Цикл
				
					ИмяРесурса = ГруппаРесурсов.Ключ + "." + ГруппаПоказателей + ГруппаРесурсов.Значение + "РазвернутыйОстаток" + СторонаПроводки;
					КартаПолей.Вставить(ИмяРесурса, "");
				
				КонецЦикла;
				
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЕсли;
	
	// Применяем проекцию аналитик. Удаляем неподходящие отборы.
	
	КоллекцияОтборов = Отбор.Элементы;
	ИспользуемыеПоля = Новый Соответствие;
	ПрименитьКартуПолей(КартаПолей, КоллекцияОтборов, ИспользуемыеПоля);
	
	// Добавляем отсутствующие отборы по-умолчанию, упорядочиваем имеющиеся.
	
	// Сдвигаем группы отборов вверх.
	ТекущийИндексУпорядоченных = 0;
	Для ТекущийИндексАнализируемых = 0 По КоллекцияОтборов.Количество() - 1 Цикл
		
		Если ТипЗнч(КоллекцияОтборов[ТекущийИндексАнализируемых]) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			Если ТекущийИндексУпорядоченных < ТекущийИндексАнализируемых Тогда
				КоллекцияОтборов.Сдвинуть(КоллекцияОтборов[ТекущийИндексАнализируемых],
					ТекущийИндексУпорядоченных - ТекущийИндексАнализируемых);
			КонецЕсли;
			ТекущийИндексУпорядоченных = ТекущийИндексУпорядоченных + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(КартаПолей["НалоговоеНазначение"]) Тогда
		ДобавитьОтборОтчета(КоллекцияОтборов,
			ДоступныеПоляОтбора,
			ИспользуемыеПоля,
			"НалоговоеНазначение",
			ТекущийИндексУпорядоченных);
	КонецЕсли;
	Для НомерСубконто = 1 По ДанныеНовогоСчета.КоличествоСубконто Цикл
		
		Если НовыеСубконто.Найти("Субконто" + НомерСубконто) = Неопределено Тогда
			// Это субконто существует на счете, но не должно использоваться.
			Продолжить;
		КонецЕсли;
		
		ДобавитьОтборОтчета(КоллекцияОтборов,
			ДоступныеПоляОтбора,
			ИспользуемыеПоля,
			"Субконто" + НомерСубконто,
			ТекущийИндексУпорядоченных);		
			
	КонецЦикла;
	Если Не ПустаяСтрока(КартаПолей["Валюта"]) Тогда
		ДобавитьОтборОтчета(КоллекцияОтборов,
			ДоступныеПоляОтбора,
			ИспользуемыеПоля,
			"Валюта",
			ТекущийИндексУпорядоченных);
	КонецЕсли; 
	
КонецПроцедуры

// В отчетах по видам субконто анализирует наличие признаков учета на счетах, содержащих выбранные субконто.
//
// Параметры:
//  Форма        - УправляемаяФорма - имеет основной реквизит "Отчет".
//
Процедура ЗаполнитьПризнакиУчета(Форма) Экспорт
	
	Отчет = Форма.Отчет;
	
	МассивСубконто = Новый Массив;
	Для Каждого ЭлементСписка Из Отчет.СписокВидовСубконто Цикл 
		Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
			МассивСубконто.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСубконто.Количество() = 0 Тогда
		
		Форма.ЕстьВалюта               			= Истина;
		Форма.ЕстьКоличество           			= Истина;
		Форма.ЕстьНалоговыйУчет        			= Истина;
		Форма.ЕстьУчетПоНалоговымНазначениямНДС = Истина;
		Форма.ЕстьСчета                			= Истина;
		Возврат;
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Хозрасчетный.Ссылка) КАК КоличествоСчетов,
	|	МАКСИМУМ(Хозрасчетный.Количественный) КАК Количественный,
	|	МАКСИМУМ(Хозрасчетный.Валютный) КАК Валютный,
	|	МАКСИМУМ(Хозрасчетный.НалоговыйУчет) КАК НалоговыйУчет,
	|	МАКСИМУМ(Хозрасчетный.УчетПоНалоговымНазначениямНДС) КАК УчетПоНалоговымНазначениямНДС
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный&УсловиеСоединения
	|ГДЕ
	|	&УсловиеОтбора";
	
	Запрос = Новый Запрос;
	НомерСубконто = 1;
	УсловиеСоединения = "";
	УсловиеОтбора = "";
	Для каждого ВидСубконто Из МассивСубконто Цикл
		
		УсловиеСоединения = УсловиеСоединения + "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто" + НомерСубконто + "
		|		ПО Хозрасчетный.Ссылка = ХозрасчетныйВидыСубконто" + НомерСубконто + ".Ссылка";
		УсловиеОтбора = УсловиеОтбора 
			+ ?(НомерСубконто = 1, "", "
		|	И ") + "ХозрасчетныйВидыСубконто" + НомерСубконто + ".ВидСубконто = &ВидСубконто" + НомерСубконто;

		Запрос.УстановитьПараметр("ВидСубконто" + НомерСубконто, ВидСубконто);

		НомерСубконто = НомерСубконто + 1;
		
	КонецЦикла;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСоединения", УсловиеСоединения);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", УсловиеОтбора);
	Запрос.Текст = ТекстЗапроса;
	
	Форма.ЕстьВалюта               			= Ложь;
	Форма.ЕстьКоличество           			= Ложь;
	Форма.ЕстьНалоговыйУчет        			= Ложь;
	Форма.ЕстьУчетПоНалоговымНазначениямНДС = Ложь;
	Форма.ЕстьСчета                			= Ложь;
	
	ВыборкаСчета = Запрос.Выполнить().Выбрать();
	Пока ВыборкаСчета.Следующий() Цикл
		
		Форма.ЕстьВалюта               			= ?(ВыборкаСчета.Валютный             			= Истина, Истина, Ложь);
		Форма.ЕстьКоличество           			= ?(ВыборкаСчета.Количественный       			= Истина, Истина, Ложь);
		Форма.ЕстьНалоговыйУчет        			= ?(ВыборкаСчета.НалоговыйУчет        			= Истина, Истина, Ложь);
		Форма.ЕстьУчетПоНалоговымНазначениямНДС	= ?(ВыборкаСчета.УчетПоНалоговымНазначениямНДС	= Истина, Истина, Ложь);
		Форма.ЕстьСчета                			= ?(ВыборкаСчета.КоличествоСчетов     			= 0, Ложь, Истина);  
		
	КонецЦикла;
	
	Отчет.ПоказательВалютнаяСумма = Отчет.ПоказательВалютнаяСумма И Форма.ЕстьВалюта;
	Отчет.ПоказательКоличество = Отчет.ПоказательКоличество И Форма.ЕстьКоличество;
	Отчет.ПоказательНУ = Отчет.ПоказательНУ И Форма.ЕстьНалоговыйУчет;
	
КонецПроцедуры

// Удаляет некорректные поля сортировки.
//
// Параметры:
//  ПоляСортировки - ПорядокКомпоновкиДанных, ТаблицаЗначений - набор обрабатываемых полей сортировки.
//  ДоступныеПоляПорядка - ДоступныеПоляКомпоновкиДанных - проверка на доступность полей.
//  КоличествоСубконто - Число - количество субконто, которые можно использовать.
//  ДанныеСчета  - Структура - если заполнено, то сверяются виды субконто.
//
Процедура УдалитьНедоступныеПоля(ПоляСортировки, ДоступныеПоляПорядка, КоличествоСубконто, ДанныеСчета = Неопределено) Экспорт
	
	// Удаляем сохраненные поля, которые стали некорректными.
	ИсключаемыеНастройки = Новый Массив;
	Для каждого Показатель Из ПоляСортировки Цикл
		
		ПозицияТочки = Найти(Показатель.Поле, ".");
		Если ПозицияТочки = 0 Тогда
			ИмяПоля = Показатель.Поле;
		Иначе
			ИмяПоля = Лев(Показатель.Поле, ПозицияТочки - 1);
		КонецЕсли;
		Если КоличествоСубконто < 3 И ИмяПоля = "Субконто3" Тогда
			ИсключаемыеНастройки.Добавить(Показатель);
		ИначеЕсли КоличествоСубконто < 2 И ИмяПоля = "Субконто2" Тогда
			ИсключаемыеНастройки.Добавить(Показатель);
		ИначеЕсли КоличествоСубконто < 1 И ИмяПоля = "Субконто1" Тогда
			ИсключаемыеНастройки.Добавить(Показатель);
		ИначеЕсли ДанныеСчета <> Неопределено И Найти(ИмяПоля, "Субконто") = 1
		   И Показатель.ВидСубконто <> ДанныеСчета["Вид" + ИмяПоля] Тогда
			ИсключаемыеНастройки.Добавить(Показатель);
		ИначеЕсли ДоступныеПоляПорядка.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля)) = Неопределено Тогда
			ИсключаемыеНастройки.Добавить(Показатель);
		КонецЕсли; 
		
	КонецЦикла;
	Для каждого Показатель Из ИсключаемыеНастройки Цикл
		ПоляСортировки.Удалить(Показатель);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формируем ключи, идентифицирующие описание сохраняемых настроек.
//
// Параметры:
//  ИмяОтчета    - Строка - имя объекта метаданных.
//  ИмяРазделителя - Строка - вариант разделения настроек.
//  Разделитель  - ПланСчетовСсылка, ПланВидовХарактеристикСсылка - значение, разделяющее сохраняемые настройки.
//
// Возвращаемое значение:
//   ОписаниеНастроек - содержит ключи-идентификаторы.
//
Функция КлючиОписанияНастройки(ИмяОтчета, ИмяРазделителя, Разделитель)
	
	ИмяПредопределенныхДанных = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Разделитель, "ИмяПредопределенныхДанных");
	
	ОписаниеНастроек = Новый ОписаниеНастроек;
	ОписаниеНастроек.КлючОбъекта = "Отчет." + ИмяОтчета + "/" + ИмяРазделителя;
	ОписаниеНастроек.КлючНастроек = ?(ПустаяСтрока(ИмяПредопределенныхДанных),
		Строка(Разделитель.УникальныйИдентификатор()),
		ИмяПредопределенныхДанных);
	ОписаниеНастроек.Представление = ИмяОтчета + " " + Разделитель;
		
	Возврат ОписаниеНастроек;
	
КонецФункции
	
// Формирует список настроек сортировки.
//
// Параметры:
//  КоллекцияНастроек - ПорядокКомпоновкиДанных - список полей сортировки.
//  ДанныеСчета  - Структура - если заполнено, то запоминаются виды субконто.
//
// Возвращаемое значение:
//  ТаблицаЗначение - список настроек сортировки в отчете.
//
Функция ОписаниеСортировки(КоллекцияНастроек, ДанныеСчета = Неопределено)

	КоллекцияВключенныхНастроек = Новый ТаблицаЗначений;
	КоллекцияВключенныхНастроек.Колонки.Добавить("Использование", Новый ОписаниеТипов("Булево"));
	КоллекцияВключенныхНастроек.Колонки.Добавить("Поле", Новый ОписаниеТипов("Строка"));
	КоллекцияВключенныхНастроек.Колонки.Добавить("ВидСубконто",
		Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные"));
	КоллекцияВключенныхНастроек.Колонки.Добавить("ТипУпорядочивания", Новый ОписаниеТипов("НаправлениеСортировкиКомпоновкиДанных"));
	
	Для каждого Показатель Из КоллекцияНастроек Цикл
		Если ТипЗнч(Показатель) <> Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		ВидСубконто = Неопределено;
		Если ДанныеСчета <> Неопределено
		   И Найти(Показатель.Поле, "Субконто") = 1 Тогда
		   
			Если СтрДлина(Показатель.Поле) = 9 Тогда
				ВидСубконто = ДанныеСчета["Вид" + Показатель.Поле];
			ИначеЕсли Сред(Показатель.Поле, 10, 1) = "." Тогда
				ВидСубконто = ДанныеСчета["Вид" + Лев(Показатель.Поле, 9)];
			КонецЕсли;
			 
		КонецЕсли;
		ЭлементПорядка = КоллекцияВключенныхНастроек.Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементПорядка, Показатель);
		ЭлементПорядка.ВидСубконто = ВидСубконто;
		
	КонецЦикла;
	
	Возврат КоллекцияВключенныхНастроек;
	
КонецФункции

// Добавляет группировку в список настроек отчета.
//
// Параметры:
//  Группировки  - ТабличнаяЧасть - список группировок отчета.
//  ДоступныеГруппировки - ДоступныеПоляКомпоновкиДанных - источник информации о полях группировок.
//  ИмяПоля      - Строка - имя поля группировки.
//
// Возвращаемое значение:
//   СтрокаТабличнойЧасти - последняя добавленная строка.
//
Функция ДобавитьГруппировкуОтчета(Группировки, ДоступныеГруппировки, ИмяПоля)
	
	Поле = ДоступныеГруппировки.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля));
	Если Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяСтрока = Группировки.Добавить();
	НоваяСтрока.Использование  = Ложь;
	НоваяСтрока.Поле           = Поле.Поле;
	НоваяСтрока.Представление  = Поле.Заголовок;
	НоваяСтрока.ТипГруппировки = 0;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Добавляет отбор в список настроек отчета. Если ВключенныеОтборы не содержит признак использования отбора
// (или его реквизита), то создается неиспользуемый отбор по-умолчанию.
//
// Параметры:
//  Отборы       - КоллекцияЭлементовОтбораКомпоновкиДанных - список отборов отчета.
//  ДоступныеОтборы - ДоступныеПоляКомпоновкиДанных - источник информации о полях отборов.
//  ВключенныеОтборы - Соответствие - отборы, которые уже включены.
//  ИмяПоля      - Строка - имя поля отбора.
//  ИндексВставки - Число - индекс строки, на которую нужно переместить отбор.
//
Процедура ДобавитьОтборОтчета(Отборы, ДоступныеОтборы, ВключенныеОтборы, ИмяПоля, ИндексВставки)
	
	Если ВключенныеОтборы[ИмяПоля] <> Неопределено Тогда // было по крайней мере одно использование
		
		ДлинаИмениПоля = СтрДлина(ИмяПоля);
		КоличествоОтборов = Отборы.Количество() - 1;
		Для ИндексОтбора = ИндексВставки По КоличествоОтборов Цикл
			
			ИмяОтбора = Лев(Отборы[ИндексОтбора].ЛевоеЗначение, ДлинаИмениПоля);
			Если ИмяПоля <> ИмяОтбора Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИндексОтбора <> ИндексВставки Тогда
				Отборы.Сдвинуть(Отборы[ИндексОтбора], ИндексВставки - ИндексОтбора);
			КонецЕсли;
			ИндексВставки = ИндексВставки + 1;
		
		КонецЦикла; 
		
	Иначе // нужно добавить неиспользуемый отбор
		
		ПолеЦель = Новый ПолеКомпоновкиДанных(ИмяПоля);
		Поле = ДоступныеОтборы.Найти(ПолеЦель);
		НовыйЭлемент = Отборы.Вставить(ИндексВставки, Тип("ЭлементОтбораКомпоновкиДанных"));
		ИндексВставки = ИндексВставки + 1;
		НовыйЭлемент.ЛевоеЗначение  = ПолеЦель;
		НовыйЭлемент.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлемент.ПравоеЗначение = Поле.Тип.ПривестиЗначение(Неопределено);
		НовыйЭлемент.Использование  = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, входит ли в коллекцию поле или один из его реквизитов.
//
// Параметры:
//  КоллекцияПолей - ТаблицаЗначений - содержит колонку "Поле", по которой выполняется проверка.
//  Поле         - Строка - имя поля, вхождение которого проверяется.
//
// Возвращаемое значение:
//   Число       - индекс строки с полем или Неопределено, если вхождения не нашли.
//
Функция ИндексПоляВКоллекции(КоллекцияПолей, Поле)
	
	ИндексПоля = 0;
	
	ДлинаИмениПоля = СтрДлина(Поле);
	Для каждого СтрокаКоллекции Из КоллекцияПолей Цикл
		
		ИмяПоля = Лев(СтрокаКоллекции.Поле, ДлинаИмениПоля + 1);
		Если ИмяПоля = Поле
		 Или Прав(ИмяПоля, 1) = "." И Лев(ИмяПоля, ДлинаИмениПоля) = Поле Тогда
			Возврат ИндексПоля;
		КонецЕсли;
		ИндексПоля = ИндексПоля + 1;
		
	КонецЦикла; 
	
	Возврат Неопределено;
	
КонецФункции

// Удаляет лишние отборы или преобразует значение одного субконто в другое.
//
// Параметры:
//  КартаПолей   - Соответствие - правила преобразования отборов.
//  Отборы       - КоллекцияЭлементовОтбораКомпоновкиДанных - набор преобразуемых отборов.
//  ИспользуемыеПоля - Соответствие - список полей отборов обработанных (и неудаленных) при проецировании.
//
Процедура ПрименитьКартуПолей(КартаПолей, Отборы, ИспользуемыеПоля)
	
	УдаляемыеОтборы = Новый Массив;
	
	Для каждого ЭлементОтбора Из Отборы Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ПрименитьКартуПолей(КартаПолей, ЭлементОтбора.Элементы, ИспользуемыеПоля);
			Если ЭлементОтбора.Элементы.Количество() = 0 Тогда
				УдаляемыеОтборы.Добавить(ЭлементОтбора);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ИмяИсходногоПоля = Строка(ЭлементОтбора.ЛевоеЗначение);
		ИмяПоля = ИмяИсходногоПоля;
		ИмяНовогоПоля = КартаПолей[ИмяИсходногоПоля];
		Если ИмяНовогоПоля = Неопределено Тогда // возможно ИмяИсходногоПоля содержит реквизит через точку
			ПозицияТочки = Найти(ИмяИсходногоПоля, ".");
			Если ПозицияТочки <> 0 Тогда
				ИмяПоля = Лев(ИмяИсходногоПоля, ПозицияТочки - 1);
				ИмяНовогоПоля = КартаПолей[ИмяПоля];
			КонецЕсли;
			Если ИмяНовогоПоля = Неопределено Тогда
				
				// Если раньше был некий отбор, а сейчас в карте преобразований этого поля нет, то может быть две ситуации:
				// * Это субконто, которое могло быть, но отсутствует на этом счете (например, Партии). Удалить отбор по нему.
				// * Это поле, отбор по которому всегда допустим (например, Организация). Оставить неизменным.
				Если Найти(ИмяПоля, "Субконто") = 1 И СтрДлина(ИмяПоля) = 9 Тогда
					ИмяНовогоПоля = ""; // субконто больше нет на счёте
				Иначе // ничего делать не нужно
					ИспользуемыеПоля.Вставить(ИмяИсходногоПоля, Истина);
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(ИмяНовогоПоля) Тогда // удалить
			УдаляемыеОтборы.Добавить(ЭлементОтбора);
			Продолжить;
		КонецЕсли;
		
		// Заменяем одно субконто на другое.
		ИспользуемыеПоля.Вставить(ИмяНовогоПоля, Истина);
		Если ИмяНовогоПоля = ИмяПоля Тогда // отбор не меняется
			Продолжить;
		КонецЕсли;
		ИмяПоляЦели = ИмяНовогоПоля + ?(ИмяИсходногоПоля = ИмяПоля, "", Сред(ИмяИсходногоПоля, СтрДлина(ИмяПоля) + 1));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляЦели);
	
	КонецЦикла;
	
	Для каждого ЭлементОтбора Из УдаляемыеОтборы Цикл
		Отборы.Удалить(ЭлементОтбора);
	КонецЦикла; 
	
КонецПроцедуры

#Область МетодыПодсистемыВариантыОтчетов

// Возвращает список полей группировок всех группировок компоновщика настроек.
//
// Параметры: 
//		КомпоновщикНастроек - компоновщик настроек.
//		БезПользовательскихПолей - признак не включения пользовательских настроек СКД.
//
Функция ПолучитьПоляГруппировок(КомпоновщикНастроек, БезПользовательскихПолей = Ложь) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	
	Структура = КомпоновщикНастроек.Настройки.Структура;
	ДобавитьПоляГруппировки(Структура, СписокПолей, БезПользовательскихПолей);
	Возврат СписокПолей;
	
КонецФункции

// Добавляет вложенные поля группировки.
Процедура ДобавитьПоляГруппировки(Структура, СписокПолей, БезПользовательскихПолей)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Строки, СписокПолей, БезПользовательскихПолей);
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Колонки, СписокПолей, БезПользовательскихПолей);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Серии, СписокПолей, БезПользовательскихПолей);
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Точки, СписокПолей, БезПользовательскихПолей);
		Иначе
			Для каждого ТекущееПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				ДоступноеПоле = ЭлементСтруктуры.Выбор.ДоступныеПоляВыбора.НайтиПоле(ТекущееПолеГруппировки.Поле);
				Если ДоступноеПоле <> Неопределено 
				  И (ДоступноеПоле.Родитель = Неопределено ИЛИ Не БезПользовательскихПолей ИЛИ ДоступноеПоле.Родитель.Поле <> Новый ПолеКомпоновкиДанных("UserFields")) Тогда
					СписокПолей.Добавить(Строка(ДоступноеПоле.Поле), ДоступноеПоле.Заголовок);
				КонецЕсли;
			КонецЦикла;
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Структура, СписокПолей, БезПользовательскихПолей);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
