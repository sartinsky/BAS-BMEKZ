////////////////////////////////////////////////////////////////////////////////
// Отчетность по регистрам учета 
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Сохраняет табличный документ как регистр учета
// Вызывается из формы отчета
//
Процедура СохранитьРегистрУчета(Форма, Знач Подписать = Ложь) Экспорт
	
	ДанныеСохранения = Неопределено;
	
	ТаблицаРегистра = Форма.Результат;
	
	Если ПроверитьВозможностьСохраненияРезультата(Форма, ТаблицаРегистра, Подписать) Тогда
		
		Отчет = Форма.Отчет;
		
		СвойстваРегистраУчета = Новый Структура("Организация, ПодразделениеОрганизации, ВключатьОбособленныеПодразделения,
		|НачалоПериода, КонецПериода, ВидРегистра, Описание, ТаблицаРегистра");
		СвойстваРегистраУчета.Организация = Отчет.Организация;
		Отчет.Свойство("Подразделение",СвойстваРегистраУчета.ПодразделениеОрганизации);
		Отчет.Свойство("ВключатьОбособленныеПодразделения",СвойстваРегистраУчета.ВключатьОбособленныеПодразделения);
		СвойстваРегистраУчета.НачалоПериода = Отчет.НачалоПериода;
		СвойстваРегистраУчета.КонецПериода  = Отчет.КонецПериода;
		СвойстваРегистраУчета.ВидРегистра   = Форма.ВидРегистра;
		СвойстваРегистраУчета.Описание 		= Форма.Заголовок;
		// При очень длинных наименований могут быть ошибки при открытии файла, найшли для отчета СправкаРасчетСебестоимостиПродукцииИУслуг 
		ПодстрокаПоиска = НСтр("ru='Справка-расчет себестоимости выпущенной продукции и оказанных услуг производственного характера';uk='Довідка-розрахунок собівартості випущеної продукції і наданих послуг виробничого характеру'");
		Если Найти(СвойстваРегистраУчета.Описание, ПодстрокаПоиска) > 0 Тогда
			СвойстваРегистраУчета.Описание = СтрЗаменить(СвойстваРегистраУчета.Описание, ПодстрокаПоиска, НСтр("ru='Себестоимость выпущенной продукции и услуг';uk='Собівартість випущеної продукції і послуг'"));
		КонецЕсли; 
		СвойстваРегистраУчета.ТаблицаРегистра = ПоместитьВоВременноеХранилище(ТаблицаРегистра, Новый УникальныйИдентификатор);
		
		ДанныеСохранения = РегистрыУчетаВызовСервера.СохранитьРегистрУчета(СвойстваРегистраУчета);
		
		Если ДанныеСохранения <> Неопределено Тогда
			
			Если Подписать Тогда
				
				ПрисоединенныеФайлыКлиент.ПодписатьФайл(ДанныеСохранения.ПрисоединенныйФайл, Форма.УникальныйИдентификатор);	
				
			Конецесли;	
			
			Оповестить("Запись_ПрисоединенныйФайл", Новый Структура, ДанныеСохранения.ПрисоединенныйФайл);
			
			ПоказатьОповещениеПользователя(
			НСтр("ru='Сохранение';uk='Збереження'"),
			ПолучитьНавигационнуюСсылку(ДанныеСохранения.РегистрУчета),
			ДанныеСохранения.ОписаниеРегистра,
			БиблиотекаКартинок.Информация32);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает список сохраненных регистров учета с отбором
// Вызывается из формы отчета
//
Процедура ОткрытьАрхивРегистровУчета(Форма) Экспорт
	
	Отчет = Форма.Отчет;
	ВидРегистра = Форма.ВидРегистра;
	
	Если ЗначениеЗаполнено(ВидРегистра) Тогда
		ПараметрыОткрытияФормы = Новый Структура();
		ПараметрыОткрытияФормы.Вставить("Отбор", Новый Структура("ВидРегистра, Организация, НачалоПериода, КонецПериода"
		, ВидРегистра, Отчет.Организация, Отчет.НачалоПериода,Отчет.КонецПериода));
		
		ОткрытьФорму("Документ.РегистрУчета.ФормаСписка", ПараметрыОткрытияФормы);
	КонецЕсли;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Проверяет состояние табличного документа
//
Функция ПроверитьВозможностьСохраненияРезультата(Форма, ТаблицаРегистра, ПроверитьВозможностьПодписи = Ложь)
	
	
	// Проверка формы отчета
	// Должна быть указана Организация
	//
	// Должны стоять флаги:
	// - Выводить заголовок (Заголовок)
	// - Выводить подписи   (Подписи)
	// - Выводить единицу измерения (Единица измерения)
	
	Если Не ЗначениеЗаполнено(Форма.Отчет.Организация) Тогда 	
		
		ТекстСообщения = НСтр("ru='Для сохранения регистра учета, отчет должен быть сформирован по организации';uk='Для збереження регістру обліку, звіт повинен бути сформований за організацією'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПолеОрганизация");
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Не Форма.ВыводитьЗаголовок Тогда 	
		
		ТекстСообщения = НСтр("ru='Для сохранения регистра учета, флаг ""Заголовок"" должен быть установлен';uk='Для збереження регістру обліку, прапор ""Заголовок"" повинен бути встановлений'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВыводитьЗаголовок");
		ПоказатьСтраницуНастроек(Форма);
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Не Форма.ВыводитьПодвал Тогда 	
		
		ТекстСообщения = НСтр("ru='Для сохранения регистра учета, флаг ""Подписи"" должен быть установлен';uk='Для збереження регістру обліку, прапор ""Підписи"" повинен бути встановлений'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВыводитьПодвал");
		ПоказатьСтраницуНастроек(Форма);
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Не Форма.ВыводитьЕдиницуИзмерения Тогда 	
		
		ТекстСообщения = НСтр("ru='Для сохранения регистра учета, флаг ""Единица измерения"" должен быть установлен';uk='Для збереження регістру обліку, прапор ""Одиниця виміру"" повинен бути встановлений'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВыводитьЕдиницуИзмерения");
		ПоказатьСтраницуНастроек(Форма);
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.ВидРегистра) Тогда
		
		ТекстСообщения = НСтр("ru='Для отчета не задан вид регистра в справочнике ""Виды регистров учета"", отчет не сохранен';uk='Для звіту не заданий вид регістра в довіднику ""Види регістрів обліку"", звіт не збережений'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
		
	КонецЕсли;	
	
	СостояниеРегистра = Форма.Элементы.Результат.ОтображениеСостояния;
	
	Если СостояниеРегистра.Видимость Тогда
		ТекстСообщения = НСтр("ru='Отчет не может быть сохранен';uk='Звіт не може бути збережений'");
		СостояниеРегистраТекст = СостояниеРегистра.Текст;
		Если ЗначениеЗаполнено(СостояниеРегистраТекст) Тогда
			ТекстСообщения = СостояниеРегистраТекст;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Результат");
		Возврат Ложь;
	КонецЕсли;	
		
	Если ТаблицаРегистра.ШиринаТаблицы = 0 Тогда
		ТекстСообщения = НСтр("ru='Отчет не может быть сохранен';uk='Звіт не може бути збережений'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Результат");
		Возврат Ложь;
	КонецЕсли;

	Если ПроверитьВозможностьПодписи И НЕ Форма.ИспользуетсяЭП Тогда
		СообщениеОбОшибке = НСтр("ru='Для подписи регистра включите использование электронной подписи в настройках программы';uk='Для підпису регістра увімкніть використання електронного підпису в настройках програми'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		Возврат Ложь;
	КонецЕсли;

	
	Возврат Истина;
	
КонецФункции	

// Показывает страницу настроек отчета
//
Процедура ПоказатьСтраницуНастроек(Форма)
	Если Форма.Элементы.Найти("РазделыОтчета") <> Неопределено Тогда
		Форма.Элементы.РазделыОтчета.ТекущаяСтраница		 = Форма.Элементы.НастройкиОтчета;
		Форма.Элементы.ПрименитьНастройки.КнопкаПоУмолчанию	 = Истина;
	КонецЕсли;
КонецПроцедуры
