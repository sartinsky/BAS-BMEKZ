///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОБНОВЛЕНИЯ 1.2 - 2.0


///////////////////////////////////////////////////////////////////////////////
// Блок обработки неконсистентных данных

// Процедура обрабатывает "потерянные" объекты конфигурации, которые препятствуют переходу с 1.2
//
Процедура ОбработатьПотерянныеОбъекты() Экспорт
	
	// Обработчики должны выполняться только если произошел переход с 1.2
	// и ИБ запускается первый раз после обновления конфигурации
	// и только если в ИБ нет разделения
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить())
		И ОбновлениеИнформационнойБазы.ВерсияИБ(Метаданные.Имя)="0.0.0.0" Тогда
		
		// Обработка справочника ПодразделенияОрганизаций - 
		// обрабатываются элементы с пустым Владельцем
		ОбработатьПотерянныеПодразделения();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПотерянныеПодразделения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	(ПодразделенияОрганизаций.Владелец ЕСТЬ NULL 
	|			ИЛИ ПодразделенияОрганизаций.Владелец = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))";
	
	Выборка = запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекущийОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ТекущийОбъект.ПометкаУдаления = Истина;
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ТекущийОбъект);			
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена';uk='Операція не виконана'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
		
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Блок обработчиков перехода с 1.2

Функция ЭтоПереходСРедакции12() Экспорт
	
	Если НЕ ПервыйЗапускИнформационнойБазы() 
		ИЛИ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить())
		И ОбновлениеИнформационнойБазы.ВерсияИБ(Метаданные.Имя)="0.0.0.0" Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ОчиститьВерисиюПодсистемыБСППриПереходеС12() Экспорт
	
	Если ЭтоПереходСРедакции12() Тогда
		
		ВерсииПодсистем = РегистрыСведений.ВерсииПодсистем.СоздатьМенеджерЗаписи();
		ВерсииПодсистем.ИмяПодсистемы = "СтандартныеПодсистемы";
		ВерсииПодсистем.Активность = Истина;
		ВерсииПодсистем.Версия = "1.0.0.0";
		ВерсииПодсистем.Записать(Истина);
		ВерсииПодсистем = РегистрыСведений.УдалитьВерсииПодсистем.СоздатьМенеджерЗаписи();
		ВерсииПодсистем.ИмяПодсистемы = "СтандартныеПодсистемы";
		ВерсииПодсистем.Удалить();
		
		ВерсииПодсистем = РегистрыСведений.ВерсииПодсистем.СоздатьМенеджерЗаписи();
		ВерсииПодсистем.ИмяПодсистемы = Метаданные.Имя;
		ВерсииПодсистем.ЭтоОсновнаяКонфигурация = Истина;
		ВерсииПодсистем.Активность = Истина;
		ВерсииПодсистем.Версия = "0.0.0.0";
		ВерсииПодсистем.Записать(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПраваПервогоАдминистратора() Экспорт
	
	Если НЕ ПервыйЗапускИнформационнойБазы() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить())
		И ОбновлениеИнформационнойБазы.ВерсияИБ(Метаданные.Имя)="0.0.0.0" Тогда
		
		
		НужноСоздаватьАдминистратора = Истина;
		
		ТекущийПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
		ТекущийПользователь = Неопределено;
		Если ПользователиСлужебный.ПользовательПоИдентификаторуСуществует(ТекущийПользовательИБ.УникальныйИдентификатор, ,ТекущийПользователь) 
			И ЗначениеЗаполнено(ТекущийПользователь) Тогда
			
			Если УправлениеДоступом.ЕстьРоль(Справочники.ПрофилиГруппДоступа.Администратор, ,ТекущийПользователь) = Истина Тогда
				НужноСоздаватьАдминистратора = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НужноСоздаватьАдминистратора Тогда
			Пользователи.СоздатьАдминистратора(ТекущийПользовательИБ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция выполняет перенос(конвертацию) контактной информации, дополнительных сведений
// и паспортных данных физических лиц при обновлении конфигурации с редакции 2.0 на
// редакцию 3.0 со встроенной БСП
//
Процедура ПереносКИиДопСвойствПриОбновленииС12() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить()) Тогда 
		Возврат;
	КонецЕсли;
	
	ПереносКИПриОбновленииС12();
	ПереносДопСвойствПриОбновленииС12();

КонецПроцедуры

Процедура ПереносОсновнойОрганизацииПриОбновленииС12() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить()) Тогда 
		Возврат;
	КонецЕсли;
	
	НастройкаОсновнойОрганизации = ПланыВидовХарактеристик.УдалитьНастройкиПользователей["ОсновнаяОрганизация"];
	НастройкаОсновногоПодразделения = ПланыВидовХарактеристик.УдалитьНастройкиПользователей["ОсновноеПодразделениеОрганизации"];
	НастройкаОсновногоСклада = ПланыВидовХарактеристик.УдалитьНастройкиПользователей["ОсновнойСклад"];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НастройкаОсновнойОрганизации" ,НастройкаОсновнойОрганизации);
	Запрос.УстановитьПараметр("НастройкаОсновногоПодразделения" ,НастройкаОсновногоПодразделения);
	Запрос.УстановитьПараметр("НастройкаОсновногоСклада" ,НастройкаОсновногоСклада);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(НастройкиБ12.ОсновнаяОрганизация) КАК ОсновнаяОрганизация,
	|	МАКСИМУМ(НастройкиБ12.ОсновноеПодразделение) КАК ОсновноеПодразделение,
	|	МАКСИМУМ(НастройкиБ12.ОсновнойСклад) КАК ОсновнойСклад,
	|	НастройкиБ12.Пользователь
	|ИЗ
	|	(ВЫБРАТЬ
	|		РегистрЗначениеПрав.Значение КАК ОсновнаяОрганизация,
	|		NULL КАК ОсновноеПодразделение,
	|		NULL КАК ОсновнойСклад,
	|		РегистрЗначениеПрав.Пользователь КАК Пользователь
	|	ИЗ
	|		РегистрСведений.УдалитьНастройкиПользователей КАК РегистрЗначениеПрав
	|	ГДЕ
	|		РегистрЗначениеПрав.Настройка = &НастройкаОсновнойОрганизации
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		РегистрЗначениеПрав.Значение,
	|		NULL,
	|		РегистрЗначениеПрав.Пользователь
	|	ИЗ
	|		РегистрСведений.УдалитьНастройкиПользователей КАК РегистрЗначениеПрав
	|	ГДЕ
	|		РегистрЗначениеПрав.Настройка = &НастройкаОсновногоПодразделения
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		NULL,
	|		РегистрЗначениеПрав.Значение,
	|		РегистрЗначениеПрав.Пользователь
	|	ИЗ
	|		РегистрСведений.УдалитьНастройкиПользователей КАК РегистрЗначениеПрав
	|	ГДЕ
	|		РегистрЗначениеПрав.Настройка = &НастройкаОсновногоСклада) КАК НастройкиБ12
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиБ12.Пользователь";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Пользователь) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.Пользователь.ИдентификаторПользователяИБ);
			ИмяПользователяИБ = ПользовательИБ.Имя;
		Исключение
			Продолжить;
		КонецПопытки;
		
		ТекущаяНастройкаОрганизации = ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация", ИмяПользователяИБ);
		ТекущаяНастройкаОсновногоПодразделения = ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации", ИмяПользователяИБ);
		ТекущаяНастройкаОсновногоСклада = ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад", ИмяПользователяИБ);
		
		ТекущаяНастройкаОрганизации = ?(НЕ ЗначениеЗаполнено(ТекущаяНастройкаОрганизации), Выборка.ОсновнаяОрганизация, ТекущаяНастройкаОрганизации);
		ТекущаяНастройкаОсновногоПодразделения = ?(НЕ ЗначениеЗаполнено(ТекущаяНастройкаОсновногоПодразделения), Выборка.ОсновноеПодразделение, ТекущаяНастройкаОсновногоПодразделения);
		ТекущаяНастройкаОсновногоСклада = ?(НЕ ЗначениеЗаполнено(ТекущаяНастройкаОсновногоСклада), Выборка.ОсновнойСклад, ТекущаяНастройкаОсновногоСклада);
		
		Если ЗначениеЗаполнено(ТекущаяНастройкаОрганизации) Тогда
			ХранилищеОбщихНастроек.Сохранить(ВРег("ОсновнаяОрганизация"),, ТекущаяНастройкаОрганизации,, ИмяПользователяИБ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяНастройкаОсновногоПодразделения) Тогда
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяНастройкаОсновногоПодразделения, "Владелец") <> ТекущаяНастройкаОрганизации Тогда
				ХранилищеОбщихНастроек.Сохранить(ВРег("ОсновноеПодразделениеОрганизации"),,
					БухгалтерскийУчетПереопределяемый.ПустоеПодразделение(),, ИмяПользователяИБ);
			Иначе
				ХранилищеОбщихНастроек.Сохранить(ВРег("ОсновноеПодразделениеОрганизации"),,
					ТекущаяНастройкаОсновногоПодразделения,, ИмяПользователяИБ);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяНастройкаОсновногоСклада) Тогда
			ХранилищеОбщихНастроек.Сохранить(ВРег("ОсновнойСклад"),, ТекущаяНастройкаОсновногоСклада,, ИмяПользователяИБ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереносКИПриОбновленииС12()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдалитьКонтактнаяИнформация.Вид,
	|	УдалитьКонтактнаяИнформация.Вид.Наименование
	|ИЗ
	|	РегистрСведений.УдалитьКонтактнаяИнформация КАК УдалитьКонтактнаяИнформация
	|ГДЕ
	|	(НЕ УдалитьКонтактнаяИнформация.Вид.Предопределенный)
	|	И УдалитьКонтактнаяИнформация.Вид.ВидОбъектаКонтактнойИнформации = ЗНАЧЕНИЕ(Перечисление.УдалитьВидыОбъектовКонтактнойИнформации.Контрагенты)";
	ТаблицаУдалитьВидыКонтактнойИнформации = Запрос.Выполнить().Выгрузить();
	
	СоответствиеВидовКИ = Новый Соответствие;
	
	// Справочник "КонтактныеЛица"
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ИнформАдресКонтактногоЛица     , Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияКонтактныеЛица);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ТелефонКонтактногоЛица         , Справочники.ВидыКонтактнойИнформации.ТелефонРабочийКонтактныеЛица);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ТелефонМобильный               , Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйКонтактныеЛица);	
	
	// Справочник "Контрагенты"
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ЮрАдресКонтрагента         , Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ФактАдресКонтрагента       , Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ТелефонКонтрагента         , Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
	
	НайденнаяСтрока = ТаблицаУдалитьВидыКонтактнойИнформации.Найти("Почтовый адрес", "ВидНаименование"); 
	Если НайденнаяСтрока <> Неопределено Тогда 
		СоответствиеВидовКИ.Вставить(НайденнаяСтрока.Вид, Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента);
	КонецЕсли;
	
	НайденнаяСтрока = ТаблицаУдалитьВидыКонтактнойИнформации.Найти("Факс", "ВидНаименование"); 
	Если НайденнаяСтрока <> Неопределено Тогда 
		СоответствиеВидовКИ.Вставить(НайденнаяСтрока.Вид, Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты);
	КонецЕсли;
	
	// Справочник "Организации"
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ТелефонОрганизации          , Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ТелефонПоЮрАдресуОрганизации, Справочники.ВидыКонтактнойИнформации.ТелефонПоЮридическомуАдресуОрганизации);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ФаксОрганизации             , Справочники.ВидыКонтактнойИнформации.ФаксОрганизации);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ФактАдресОрганизации        , Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ЮрАдресОрганизации          , Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.АдресОрганизацииПочтовый    , Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
		
	
	// Справочник "ФизическиеЛица"
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ИнформАдресФизЛица     , Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ФактАдресФизЛица       , Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ЮрАдресФизЛица         , Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ТелефонФизЛица         , Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица);
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.ТелефонСлужебный		, Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
	
	// Справочник "Пользователи"
	СоответствиеВидовКИ.Вставить(Справочники.УдалитьВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя, Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	
	СоответствиеГруппВидовКИ = Новый Соответствие;
	СоответствиеГруппВидовКИ.Вставить(Тип("СправочникСсылка.КонтактныеЛица")          , Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛица);
	СоответствиеГруппВидовКИ.Вставить(Тип("СправочникСсылка.Контрагенты")             , Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты);
	СоответствиеГруппВидовКИ.Вставить(Тип("СправочникСсылка.Организации")             , Справочники.ВидыКонтактнойИнформации.СправочникОрганизации);
	СоответствиеГруппВидовКИ.Вставить(Тип("СправочникСсылка.Пользователи")            , Справочники.ВидыКонтактнойИнформации.СправочникПользователи);
	СоответствиеГруппВидовКИ.Вставить(Тип("СправочникСсылка.ФизическиеЛица")          , Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица);
	
	// Перенос контактной информации из РС в табличные части справочников
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОрганизацииКонтактнаяИнформация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОбъектыСКИ
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПользователиКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтактныеЛицаКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьКонтактнаяИнформация.Объект КАК Объект,
	|	УдалитьКонтактнаяИнформация.Тип,
	|	УдалитьКонтактнаяИнформация.Вид,
	|	УдалитьКонтактнаяИнформация.Вид.Наименование КАК ВидНаименование,
	|	УдалитьКонтактнаяИнформация.Вид.Тип КАК ВидТип,
	|	УдалитьКонтактнаяИнформация.Представление,
	|	УдалитьКонтактнаяИнформация.Поле1,
	|	УдалитьКонтактнаяИнформация.Поле2,
	|	УдалитьКонтактнаяИнформация.Поле3,
	|	УдалитьКонтактнаяИнформация.Поле4,
	|	УдалитьКонтактнаяИнформация.Поле5,
	|	УдалитьКонтактнаяИнформация.Поле6,
	|	УдалитьКонтактнаяИнформация.Поле7,
	|	УдалитьКонтактнаяИнформация.Поле8,
	|	УдалитьКонтактнаяИнформация.Поле9,
	|	УдалитьКонтактнаяИнформация.Поле10
	|ИЗ
	|	РегистрСведений.УдалитьКонтактнаяИнформация КАК УдалитьКонтактнаяИнформация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбъектыСКИ КАК ОбъектыСКИ
	|		ПО УдалитьКонтактнаяИнформация.Объект = ОбъектыСКИ.Ссылка
	|ГДЕ
	|	НЕ УдалитьКонтактнаяИнформация.Объект.Ссылка ЕСТЬ NULL 
	|	И ОбъектыСКИ.Ссылка ЕСТЬ NULL 
	|ИТОГИ ПО
	|	Объект";
	
	ВыборкаОбъект = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаОбъект.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаОбъект.Объект) Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = ВыборкаОбъект.Выбрать();
		
		ОбъектВладелец = ВыборкаОбъект.Объект.ПолучитьОбъект();
		Пока Выборка.Следующий() Цикл
			Если СоответствиеВидовКИ[Выборка.Вид] = Неопределено Тогда 
				НайденныйВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию(Выборка.ВидНаименование, Истина, СоответствиеГруппВидовКИ[ТипЗнч(Выборка.Объект)]);
				Если Не ЗначениеЗаполнено(НайденныйВидКИ) Тогда
					СправочникВидыКИ = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
					Если Не Выборка.ВидНаименование = NULL Тогда
						СправочникВидыКИ.Наименование                      = СокрЛП(Выборка.ВидНаименование);
						СправочникВидыКИ.Тип                               = Выборка.ВидТип;
					Иначе
						СправочникВидыКИ.Наименование                      = СокрЛП(Выборка.Вид);
						СправочникВидыКИ.Тип                               = Выборка.Тип;
					КонецЕсли;
					
					СправочникВидыКИ.Родитель                          = СоответствиеГруппВидовКИ[ТипЗнч(Выборка.Объект)];
					СправочникВидыКИ.ТолькоНациональныйАдрес           = Ложь;
					СправочникВидыКИ.Используется = Истина;
					СправочникВидыКИ.ОбменДанными.Загрузка = Истина;					
					
					СправочникВидыКИ.Записать();
					СоответствиеВидовКИ.Вставить(Выборка.Вид, СправочникВидыКИ.Ссылка);
				Иначе
					СоответствиеВидовКИ.Вставить(Выборка.Вид, НайденныйВидКИ);
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока = ОбъектВладелец.КонтактнаяИнформация.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Вид = СоответствиеВидовКИ[Выборка.Вид];
			НоваяСтрока.Тип = Выборка.Тип;

			Если Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
				НоваяСтрока.ЗначенияПолей = "Индекс=" + Выборка.Поле1 + Символы.ПС
				   + "Регион="           + Выборка.Поле2 + Символы.ПС
				   + "Район="            + Выборка.Поле3 + Символы.ПС
				   + "Город="            + Выборка.Поле4 + Символы.ПС
				   + "НаселенныйПункт="  + Выборка.Поле5 + Символы.ПС
				   + "Улица="            + Выборка.Поле6 + Символы.ПС
				   + "Дом="              + Выборка.Поле7 + Символы.ПС
				   + "Корпус="           + Выборка.Поле8 + Символы.ПС
				   + "Квартира="         + Выборка.Поле9 + Символы.ПС
				   + "ТипДома=дом"       + Символы.ПС
				   + "ТипКорпуса=корпус" + Символы.ПС
				   + "ТипКвартиры=кв.";
			ИначеЕсли Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
				НоваяСтрока.ЗначенияПолей = "КодСтраны=" + Выборка.Поле1 + Символы.ПС
				   + "КодГорода="     + Выборка.Поле2 + Символы.ПС
				   + "НомерТелефона=" + Выборка.Поле3 + Символы.ПС
				   + "Добавочный="    + Выборка.Поле4;

				НоваяСтрока.НомерТелефонаБезКодов = Выборка.Поле3;
				НоваяСтрока.НомерТелефона         = Выборка.Поле1 + Выборка.Поле2 + Выборка.Поле3;
			ИначеЕсли Выборка.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
				НоваяСтрока.АдресЭП = Выборка.Представление;
			КонецЕсли;

			// Удаление символов переноса строк.
			НоваяСтрока.Представление = СтрЗаменить(НоваяСтрока.Представление, Символы.ПС," ");

		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектВладелец);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПереносДопСвойствПриОбновленииС12()
	
	// Перенос дополнительных сведений
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СвойстваОбъектов.Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК СвойстваОбъектов";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		// дополнительные реквизиты и сведения уже существуют
		Возврат;
	КонецЕсли;
	
	СоответствиеТипов = Новый Соответствие;
	СоответствиеТипов.Вставить(Тип("Число") , "Число");
	СоответствиеТипов.Вставить(Тип("Строка"), "Строка");
	СоответствиеТипов.Вставить(Тип("Булево"), "Булево");
	СоответствиеТипов.Вставить(Тип("Дата")  , "Дата");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.УдалитьЗначенияСвойствОбъектов"), "СправочникСсылка.ЗначенияСвойствОбъектов");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.ФизическиеЛица")                , "СправочникСсылка.ФизическиеЛица");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.Склады")                        , "СправочникСсылка.Склады");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.Пользователи")                  , "СправочникСсылка.Пользователи");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.Организации")                   , "СправочникСсылка.Организации");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.НоменклатурныеГруппы")          , "СправочникСсылка.НоменклатурныеГруппы");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.Номенклатура")                  , "СправочникСсылка.Номенклатура");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.НомераГТД")                  	 , "СправочникСсылка.НомераГТД");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.Контрагенты")                   , "СправочникСсылка.Контрагенты");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.КонтактныеЛица")                , "СправочникСсылка.КонтактныеЛица");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.СтраныМира")                    , "СправочникСсылка.СтраныМира");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.КлассификаторЕдиницИзмерения")  , "СправочникСсылка.КлассификаторЕдиницИзмерения");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.КлассификаторУКТВЭД")           , "СправочникСсылка.КлассификаторУКТВЭД");
	СоответствиеТипов.Вставить(Тип("СправочникСсылка.Валюты")                        , "СправочникСсылка.Валюты");
	
	// Перенос дополнительных сведений
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СвойстваОбъектов.Ссылка,
	|	СвойстваОбъектов.ТипЗначения,
	|	СвойстваОбъектов.Наименование,
	|	СвойстваОбъектов.НазначениеСвойства
	|ИЗ
	|	ПланВидовХарактеристик.УдалитьСвойстваОбъектов КАК СвойстваОбъектов";
	
	СоответствиеОбъектов = Новый Соответствие();
	СоответствиеЗначенийСвойствОбъектов = Новый Соответствие();
	
	НачатьТранзакцию();
	
	Попытка
	
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			// Создание нового дополнительного свойства
			МассивНаименованийТипов = Новый Массив;
			Для Каждого КлючИЗначение ИЗ СоответствиеТипов Цикл
				Если Выборка.ТипЗначения.СодержитТип(КлючИЗначение.Ключ) Тогда
					МассивНаименованийТипов.Добавить(КлючИЗначение.Значение);
				КонецЕсли;
			КонецЦикла;
			
			ОбъектПВХ = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
			МассивТипов = Новый Массив;
			Для Каждого НаименованиеТипа Из МассивНаименованийТипов Цикл
				МассивТипов.Добавить(Тип(НаименованиеТипа));
			КонецЦикла;
			ОбъектПВХ.Заголовок    = Выборка.Наименование;
			ОбъектПВХ.Наименование = Выборка.Наименование;
			ОбъектПВХ.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
			ОбъектПВХ.ЭтоДополнительноеСведение = Истина;
			
			Если УправлениеСвойствамиСлужебный.ТипЗначенияСодержитЗначенияСвойств(ОбъектПВХ.ТипЗначения) Тогда
				ОбъектПВХ.ДополнительныеЗначенияИспользуются = Истина;
			Иначе
				ОбъектПВХ.ДополнительныеЗначенияИспользуются = Ложь;
			КонецЕсли;
			
			ОбъектПВХ.Записать();
			
			ОбменДаннымиОбновлениеСПредыдущейРедакции.ЗаменитьСсылкуВУдалитьСоответствияОбъектовИнформационныхБаз(Выборка.Ссылка, ОбъектПВХ.Ссылка);
			
			СоответствиеОбъектов.Вставить(Выборка.Ссылка, ОбъектПВХ.Ссылка);
			
			// Перенос элементов справочника ЗначенияСвойствОбъектов
			ВыборкаЗначенияСвойствОбъектов = Справочники.УдалитьЗначенияСвойствОбъектов.Выбрать(, Выборка.Ссылка);
			Пока ВыборкаЗначенияСвойствОбъектов.Следующий() Цикл
				НовыйЭлемент = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
				НовыйЭлемент.Наименование = ВыборкаЗначенияСвойствОбъектов.Наименование;
				НовыйЭлемент.Владелец     = ОбъектПВХ.Ссылка;
				НовыйЭлемент.Записать();
				ОбменДаннымиОбновлениеСПредыдущейРедакции.ЗаменитьСсылкуВУдалитьСоответствияОбъектовИнформационныхБаз(
					ВыборкаЗначенияСвойствОбъектов.Ссылка, НовыйЭлемент.Ссылка);
				СоответствиеЗначенийСвойствОбъектов.Вставить(ВыборкаЗначенияСвойствОбъектов.Ссылка, НовыйЭлемент.Ссылка);
			КонецЦикла;

			// Перенос значений свойства в другой регистр
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	&СвойствоПосле КАК Свойство,
			|	ВЫБОР
			|		КОГДА ТИПЗНАЧЕНИЯ(ЗначенияСвойствОбъектов.Значение) = ТИП(Справочник.УдалитьЗначенияСвойствОбъектов)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоЗначениеСвойствОбъектов,
			|	ЗначенияСвойствОбъектов.Значение КАК ЗначениеСтарое,
			|	ЗначенияСвойствОбъектов.Объект
			|ИЗ
			|	РегистрСведений.УдалитьЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Свойство = &СвойствоДо";

			Запрос.УстановитьПараметр("СвойствоДо"   , Выборка.Ссылка);
			Запрос.УстановитьПараметр("СвойствоПосле", ОбъектПВХ.Ссылка);
			ТаблицаЗначенийДопСведений = Запрос.Выполнить().Выгрузить();
			ТипРесурсаЗначение = Метаданные.РегистрыСведений.ДополнительныеСведения.Ресурсы.Значение.Тип;
			ТаблицаЗначенийДопСведений.Колонки.Добавить("Значение", Новый ОписаниеТипов(ТипРесурсаЗначение));
			
			МассивТиповЗначений = Новый Массив;
			
			Для Каждого СтрокаЗначения Из ТаблицаЗначенийДопСведений Цикл
				Если СтрокаЗначения.ЭтоЗначениеСвойствОбъектов Тогда
					СтрокаЗначения.Значение = СоответствиеЗначенийСвойствОбъектов.Получить(СтрокаЗначения.ЗначениеСтарое);
				Иначе
					СтрокаЗначения.Значение = СтрокаЗначения.ЗначениеСтарое;
				КонецЕсли;
				ТипЗначенияОбъекта = ТипЗнч(СтрокаЗначения.Объект);
				Если МассивТиповЗначений.Найти(ТипЗначенияОбъекта) = Неопределено Тогда
					МассивТиповЗначений.Добавить(ТипЗначенияОбъекта);
				КонецЕсли;
			КонецЦикла;
			НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
			НаборЗаписей.Загрузить(ТаблицаЗначенийДопСведений);
			НаборЗаписей.Записать(Ложь);

			// Обновление наборов свойства
			Для Каждого Тип Из МассивТиповЗначений Цикл
				МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
				Если Метаданные.Справочники.Содержит(МетаданныеТипа) Тогда
					ИмяНабора = "Справочник_" + МетаданныеТипа.Имя;
				ИначеЕсли Метаданные.Документы.Содержит(МетаданныеТипа) Тогда
					ИмяНабора = "Документ_" + Метаданные.НайтиПоТипу(Тип).Имя;
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если Найти(ИмяНабора, "Удалить") <> 0 Тогда 
					Продолжить;
				КонецЕсли;
				
				ОбщиеСвойства = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяНабора].ПолучитьОбъект();
				СвойствоНайдено = Ложь;
				Для Каждого ОбщееСвойство Из ОбщиеСвойства.ДополнительныеСведения Цикл
					Если ОбщееСвойство.Свойство = ОбъектПВХ.Ссылка Тогда
						СвойствоНайдено = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ СвойствоНайдено Тогда
					ОбщиеСвойства.КоличествоСведений = ОбщиеСвойства.КоличествоСведений + 1;
					НовоеСвойство = ОбщиеСвойства.ДополнительныеСведения.Добавить();
					НовоеСвойство.Свойство = ОбъектПВХ.Ссылка;
					ОбщиеСвойства.Записать();
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		ЗапросНаборы = Новый Запрос();
		ЗапросНаборы.Текст =
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство КАК Свойство,
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка КАК НаборСвойств,
		|	1 КАК Количество
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
		|ИТОГИ
		|	СУММА(Количество)
		|ПО
		|	Свойство";
		ВыборкаНаборы = ЗапросНаборы.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНаборы.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаНаборы.Свойство) Тогда
				Если ВыборкаНаборы.Количество = 1 Тогда
					ВыборкаСвойство = ВыборкаНаборы.Выбрать();
					Если ВыборкаСвойство.Следующий() Тогда
						Свойство = ВыборкаСвойство.Свойство.ПолучитьОбъект();
						Свойство.НаборСвойств = ВыборкаСвойство.НаборСвойств;
						Свойство.Записать();
					КонецЕсли;
				Иначе
					Свойство = ВыборкаНаборы.Свойство.ПолучитьОбъект();
					Свойство.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка();
					Свойство.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Процедура ЗаполнениеРеквизитовОрганизацииПриОбновленииС12() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить()) Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка,
	|	Организации.ГоловнаяОрганизация,
	|	Организации.ПрефиксБ12,
	|	ЕСТЬNULL(КодыОрганизацииСрезПоследних.УдалитьКодПоЕДРПОУ, """") КАК КодПоЕДРПОУ
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыОрганизации.СрезПоследних КАК КодыОрганизацииСрезПоследних
	|		ПО КодыОрганизацииСрезПоследних.Организация = Организации.Ссылка";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОрганизацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(Выборка.ГоловнаяОрганизация)
			И Выборка.ГоловнаяОрганизация <> Выборка.Ссылка Тогда
			ОрганизацияОбъект.ОбособленноеПодразделение = Истина;
		Иначе
			ОрганизацияОбъект.ГоловнаяОрганизация = Выборка.Ссылка;
		КонецЕсли;

		// Заполнение префикса организации
		ОрганизацияОбъект.Префикс = Выборка.ПрефиксБ12;
		
		//Код по ЕДРПОУ переезжает из регсв в справочник
		ОрганизацияОбъект.КодПоЕДРПОУ = Выборка.КодПоЕДРПОУ;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОрганизацияОбъект);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнениеЗначенийФункциональныхОпцийПриОбновленииС12() Экспорт

	Если НЕ ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить()) Тогда 
		Возврат;
	КонецЕсли;
	
	Константы.ВедетсяДеятельностьПоДоговорамКомиссииНаПродажу.Установить(Истина);
	Константы.ИспользоватьВалютныйУчет.Установить(Истина);
	Константы.ИспользоватьРучнуюКорректировкуДвижений.Установить(Истина);
	Константы.ВедетсяРозничнаяТорговля.Установить(Истина);
	Константы.ВедетсяПроизводственнаяДеятельность.Установить(Истина);
	Константы.ИспользоватьПодсистемуПроизводство.Установить(Истина);
	
	БУ = ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте;
	КассыОбособленныхПодразделений = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбособленныеПодразделенияБезОбразованияЮрЛица, "ВидСубконто") = Неопределено, Ложь, Истина);
	Константы.ИспользоватьУчетДенежныхСредствПоОбособленнымПодразделениям.Установить(КассыОбособленныхПодразделений);
	

	НовыйНаборЗаписей = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	НовыйНаборЗаписей.Прочитать();

	Для каждого Запись Из НовыйНаборЗаписей Цикл
		
		Запись.ПлательщикНалогаНаПрибыль = Запись.СхемаНалогообложения.НалогНаПрибыль;
		Запись.ПлательщикНДС = Запись.СхемаНалогообложения.НДС;
		Запись.ПлательщикЕдиногоНалога = Запись.СхемаНалогообложения.ЕдиныйНалог;
		
		
	КонецЦикла;

	НовыйНаборЗаписей.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УдалитьЗначенияСвойствОбъектов.Объект
	|ИЗ
	|	РегистрСведений.УдалитьЗначенияСвойствОбъектов КАК УдалитьЗначенияСвойствОбъектов";
	Если Не Запрос.Выполнить().Пустой() Тогда 
		Константы.ИспользоватьДополнительныеРеквизитыИСведения.Установить(Истина);
		Константы.ИспользоватьОбщиеДополнительныеЗначения.Установить(Истина);
		Константы.ИспользоватьОбщиеДополнительныеРеквизитыИСведения.Установить(Истина);
	КонецЕсли;
	

КонецПроцедуры

Процедура УстановитьКонстантыПриПереходеС12() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить()) Тогда 
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(Константы.ПрефиксУзлаРаспределеннойИнформационнойБазыБ12.Получить())<> "" Тогда
		Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Установить(Константы.ПрефиксУзлаРаспределеннойИнформационнойБазыБ12.Получить());
	КонецЕсли;
	
	Справочники.Организации.ПерезаполнитьКонстантуИспользоватьНесколькоОрганизаций();
	
	Константы.ИспользоватьСинхронизациюДанных.Установить(Константы.ИспользоватьСинхронизациюДанных.Получить());

	
	
КонецПроцедуры

// Процедура очищает в документе "ОперацияБух"
// типовую операцию
//
Процедура ОчиститьТиповыеОперацииОперацииБухПриПереходеС12() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить()) Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОперацияБух.Ссылка
	|ИЗ
	|	Документ.ОперацияБух КАК ОперацияБух
	|ГДЕ
	|	ОперацияБух.СпособЗаполнения = ""Типовые операции""";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОперацияБух = Выборка.Ссылка.ПолучитьОбъект();
		ОперацияБух.СпособЗаполнения = НСтр("ru='Вручную';uk='Вручну'");
		ОперацияБух.ОбменДанными.Загрузка = Истина;
		ОперацияБух.Записать();
	КонецЦикла;
	
КонецПроцедуры


Процедура ПроизвестиЗаменуСсылокНаНовыйПредопределенныйЭлементГруппыПользователей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГруппаВсеПользователи = Справочники.ГруппыПользователей.ПолучитьСсылку(Новый УникальныйИдентификатор("58d5710e-0987-471c-a598-ba7ef1cb9366"));
	Если ОбщегоНазначения.СсылкаСуществует(ГруппаВсеПользователи) Тогда
		
		Замены = Новый Соответствие();
		Замены.Вставить(ГруппаВсеПользователи, Справочники.ГруппыПользователей.ВсеПользователи);
		ОбщегоНазначенияБП.ЗаменитьСсылки(Замены);
	
		ОбъектГруппаВсеПользователи = ГруппаВсеПользователи.ПолучитьОбъект();
		ОбъектГруппаВсеПользователи.Удалить();
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьРегистрыНастроекНалоговыхДокументов() Экспорт

	УчетнаяПолитикаОрганизаций = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	УчетнаяПолитикаОрганизаций.Прочитать();
	ИменаКолонокУчетнойПолитики = Метаданные.РегистрыСведений.УчетнаяПолитикаОрганизаций.Ресурсы;
	
	НастройкаПечати = РегистрыСведений.НастройкаПечатиНалоговыхДокументов.СоздатьНаборЗаписей();
	ИменаКолонокНастройкиПечати = Метаданные.РегистрыСведений.НастройкаПечатиНалоговыхДокументов.Ресурсы;
	
	НастройкаНумерации = РегистрыСведений.НастройкаНумерацииНалоговыхДокументов.СоздатьНаборЗаписей();
	ИменаКолонокНастройкиНумерации = Метаданные.РегистрыСведений.НастройкаНумерацииНалоговыхДокументов.Ресурсы;
	
	Для каждого СтрокаПолитики Из УчетнаяПолитикаОрганизаций Цикл
		
		СтрокаНастройкиПечати = НастройкаПечати.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНастройкиПечати, СтрокаПолитики);
		
		СтрокаНастройкиНумерации = НастройкаНумерации.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНастройкиНумерации, СтрокаПолитики);
		
		Для каждого Реквизит Из ИменаКолонокУчетнойПолитики Цикл
			
			ИмяРеквизитаУчетнойПолитики = СтрЗаменить(Реквизит.Имя, "Удалить", "");
			
			Если ИмяРеквизитаУчетнойПолитики = Реквизит.Имя Тогда
				// нет признака "Удалить"
				Продолжить;
			КонецЕсли;
			
			Если НЕ ИменаКолонокНастройкиПечати.Найти(ИмяРеквизитаУчетнойПолитики) = Неопределено Тогда
				СтрокаНастройкиПечати[ИмяРеквизитаУчетнойПолитики] = СтрокаПолитики["Удалить" + ИмяРеквизитаУчетнойПолитики];
			КонецЕсли;
					
			Если НЕ ИменаКолонокНастройкиНумерации.Найти(ИмяРеквизитаУчетнойПолитики) = Неопределено Тогда
				СтрокаНастройкиНумерации[ИмяРеквизитаУчетнойПолитики] = СтрокаПолитики["Удалить" + ИмяРеквизитаУчетнойПолитики];
			КонецЕсли;
		
		КонецЦикла;
	КонецЦикла;
	
	НастройкаПечати.Записать();
	НастройкаНумерации.Записать();

КонецПроцедуры

//Процедура переносит значение из реквизита УдалитьНомерПоручения в реквизит НомерВходящегоДокумента документа "СписаниеСРасчетногоСчета" 
Процедура ЗаполнитьЗначениеРеквизитаНомерВходящегоДокументаВДокСписаниеСРасчетногоСчета() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписаниеСРасчетногоСчета.Ссылка
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	НЕ СписаниеСРасчетногоСчета.ПометкаУдаления
	|	И СписаниеСРасчетногоСчета.УдалитьНомерПоручения <> """"
	|	И СписаниеСРасчетногоСчета.НомерВходящегоДокумента = """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	НачатьТранзакцию();
	Попытка
	
		Пока Выборка.Следующий() Цикл
			
			ДокСписаниеСРасчетногоСчета = Выборка.Ссылка.ПолучитьОбъект();
			ДокСписаниеСРасчетногоСчета.НомерВходящегоДокумента = ДокСписаниеСРасчетногоСчета.УдалитьНомерПоручения;
			
			ДокСписаниеСРасчетногоСчета.ОбменДанными.Загрузка = Истина;
			ДокСписаниеСРасчетногоСчета.Записать();
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru='Операция не выполнена';uk='Операція не виконана'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// ФИЗИЧЕСКИЕ ЛИЦА: ОБНОВЛЕНИЕ С Б 1.2

Процедура КонвертироватьДокументыФизическихЛицС12() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить()) Тогда 
		Возврат;
	КонецЕсли;
	
	СоответствиеКонвертированныхОбъектов = Новый Соответствие;
	
	КонвертироватьСправочникДокументыУдостоверяющиеЛичность(СоответствиеКонвертированныхОбъектов);
	ДокументыФизическихЛицКонвертация(СоответствиеКонвертированныхОбъектов);
	
КонецПроцедуры

//Справочник УдалитьДокументыУдостоверяющиеЛичность
//
Процедура КонвертироватьСправочникДокументыУдостоверяющиеЛичность(СоответствиеКонвертированныхОбъектов)
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьДокументыУдостоверяющиеЛичность.Ссылка,
	|	УдалитьДокументыУдостоверяющиеЛичность.ВерсияДанных,
	|	УдалитьДокументыУдостоверяющиеЛичность.ПометкаУдаления,
	|	УдалитьДокументыУдостоверяющиеЛичность.Предопределенный,
	|	УдалитьДокументыУдостоверяющиеЛичность.Наименование
	|ПОМЕСТИТЬ ВТСоответствиеПоДопКодам
	|ИЗ
	|	Справочник.УдалитьДокументыУдостоверяющиеЛичность КАК УдалитьДокументыУдостоверяющиеЛичность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеПоДопКодам.Ссылка,
	|	СоответствиеПоДопКодам.ВерсияДанных,
	|	СоответствиеПоДопКодам.ПометкаУдаления,
	|	СоответствиеПоДопКодам.Предопределенный,
	|	СоответствиеПоДопКодам.Наименование,
	|	ВидыДокументовФизическихЛиц.Ссылка КАК ПриемникСсылка
	|ИЗ
	|	ВТСоответствиеПоДопКодам КАК СоответствиеПоДопКодам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
	|		ПО СоответствиеПоДопКодам.Наименование = ВидыДокументовФизическихЛиц.Наименование
	|ГДЕ
	|	НЕ ВидыДокументовФизическихЛиц.Ссылка ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если (Не ЗначениеЗаполнено(Выборка)) ИЛИ НеПроизводитьКонвертациюЗначения(ТипЗнч(Выборка)) Тогда
			Продолжить;
		КонецЕсли;
		
		КонвертироватьЭлементДокументыУдостоверяющиеЛичность(Выборка, СоответствиеКонвертированныхОбъектов, Выборка.ПриемникСсылка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДокументыФизическихЛицКонвертация(СоответствиеКонвертированныхОбъектов)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдалитьПаспортныеДанныеФизЛиц.Период,
	|	УдалитьПаспортныеДанныеФизЛиц.ФизЛицо,
	|	УдалитьПаспортныеДанныеФизЛиц.ДокументВид,
	|	УдалитьПаспортныеДанныеФизЛиц.ДокументСерия,
	|	УдалитьПаспортныеДанныеФизЛиц.ДокументНомер,
	|	УдалитьПаспортныеДанныеФизЛиц.ДокументДатаВыдачи,
	|	УдалитьПаспортныеДанныеФизЛиц.ДокументКемВыдан
	|ИЗ
	|	РегистрСведений.УдалитьПаспортныеДанныеФизЛиц КАК УдалитьПаспортныеДанныеФизЛиц";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.ДокументыФизическихЛиц.СоздатьНаборЗаписей();
	
	ТекстСерия				= НСтр("ru=', серия: %1';uk=', серія: %1'");
	ТекстНомер				= НСтр("ru=', № %1';uk=', № %1'");
	ТекстДатаВыдачи			= НСтр("ru=', выдан: %1 года';uk=', видано: %1 року'");
	ТекстСрокДействия		= НСтр("ru=', действует до: %1 года';uk=', діє до: %1 року'");
	ТекстКодПодразделения	= НСтр("ru=', № подр. %1';uk=', № підр.  %1'");

	Пока Выборка.Следующий() Цикл
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Период				= Выборка.Период;
		ЗаписьНабора.Физлицо			= Выборка.ФизЛицо;
		ЗаписьНабора.ВидДокумента		= КонвертироватьЭлементДокументыУдостоверяющиеЛичность(Выборка.ДокументВид, СоответствиеКонвертированныхОбъектов);
		ЗаписьНабора.Серия				= Выборка.ДокументСерия;
		ЗаписьНабора.Номер				= Выборка.ДокументНомер;
		ЗаписьНабора.ДатаВыдачи			= Выборка.ДокументДатаВыдачи;
		ЗаписьНабора.КемВыдан			= Выборка.ДокументКемВыдан;
		ЗаписьНабора.ЯвляетсяДокументомУдостоверяющимЛичность	= Истина;
		
		Если ПустаяСтрока(ЗаписьНабора.Представление) И Не ЗаписьНабора.ВидДокумента.Пустая() Тогда
				ЗаписьНабора.Представление = ""
					+ ЗаписьНабора.ВидДокумента
					+ ?(ЗначениеЗаполнено(ЗаписьНабора.Серия), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСерия, ЗаписьНабора.Серия), "")
					+ ?(ЗначениеЗаполнено(ЗаписьНабора.Номер), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНомер, ЗаписьНабора.Номер), "")
					+ ?(ЗначениеЗаполнено(ЗаписьНабора.ДатаВыдачи), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДатаВыдачи, Формат(ЗаписьНабора.ДатаВыдачи,"ДФ='дд ММММ гггг'")), "")
					+ ?(ЗначениеЗаполнено(ЗаписьНабора.СрокДействия), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСрокДействия, Формат(ЗаписьНабора.СрокДействия,"ДФ='дд ММММ гггг'")), "")
					+ ?(ЗначениеЗаполнено(ЗаписьНабора.КемВыдан), ", " + ЗаписьНабора.КемВыдан, "")
					;
			КонецЕсли;

	КонецЦикла;	
		
	НаборЗаписей.Записать();
	
КонецПроцедуры	

Функция КонвертироватьЭлементДокументыУдостоверяющиеЛичность(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено) Экспорт
	
	Если ПустаяСтрока(КонвертируемыеДанные.Наименование) И КонвертируемыеДанные.Ссылка.Пустая() Тогда
		Элемент = ПолучитьСсылкуНаКонвертированныйОбъект(Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка(), СоответствиеКонвертированныхОбъектов);
		
		Если Элемент = Неопределено Тогда
			Элемент = Справочники.ВидыДокументовФизическихЛиц.СоздатьЭлемент();
			Элемент.Наименование = "Иные документы";
			УстановитьКодСправочника(Элемент, КонвертируемыеДанные);

			Элемент.ОбменДанными.Загрузка = Истина;
			Элемент.Записать();
			
			ВставитьСсылкуНаКонвертированныйОбъект(Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка(), Элемент.Ссылка, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
		
	Иначе
		Элемент = ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	
		Если Элемент = Неопределено Тогда
			Элемент = Справочники.ВидыДокументовФизическихЛиц.СоздатьЭлемент();
			Элемент.Наименование = КонвертируемыеДанные.Наименование;
			УстановитьКодСправочника(Элемент, КонвертируемыеДанные);

			Элемент.ОбменДанными.Загрузка = Истина;
			Элемент.Записать();
		
			ВставитьСсылкуНаКонвертированныйОбъект(КонвертируемыеДанные.Ссылка, Элемент.Ссылка, СоответствиеКонвертированныхОбъектов);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Элемент.Ссылка;
КонецФункции	

Функция НеПроизводитьКонвертациюЗначения(Тип)
	
	Если Тип = Тип("Число") 
		Или Тип = Тип("Строка")
		Или Тип = Тип("Дата") 
		Или Тип = Тип("Булево")
		Или Тип = Тип("УникальныйИдентификатор") 
		Или Тип = Тип("ХранилищаНастроекМенеджер") 
		Или Тип = Тип("Null") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник)
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(КонвертируемыеДанные)) Тогда
		Ссылка = КонвертируемыеДанные;
	Иначе 
		Ссылка = КонвертируемыеДанные.Ссылка;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СсылкаНаКонвертированныйОбъект = ПолучитьСсылкуНаКонвертированныйОбъект(Ссылка, СоответствиеКонвертированныхОбъектов);
	Если СсылкаНаКонвертированныйОбъект <> Неопределено Тогда
		Возврат СсылкаНаКонвертированныйОбъект;		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СсылкаНаПриемник) Тогда
		ВставитьСсылкуНаКонвертированныйОбъект(Ссылка, СсылкаНаПриемник, СоответствиеКонвертированныхОбъектов);
		Возврат СсылкаНаПриемник;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

Процедура УстановитьКодСправочника(ОбъектПриемник, ДанныеИсточника)
	СтруктураДанныхИсточника = Новый Структура("Код", Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураДанныхИсточника, ДанныеИсточника);
	Если СтруктураДанныхИсточника.Код <> Неопределено И ОбъектПриемник.Метаданные().ДлинаКода <> 0 Тогда
		ОбъектПриемник.Код = СтруктураДанныхИсточника.Код;	
	КонецЕсли;	
КонецПроцедуры	

Процедура ВставитьСсылкуНаКонвертированныйОбъект(СсылкаИсходногоОбъетка, СсылкаКонвертированногоОбъекта, СоответствиеКонвертированныхОбъектов)
 	СоответствиеКонвертированныхОбъектовПоТипу = СоответствиеКонвертированныхОбъектов.Получить(ТипЗнч(СсылкаИсходногоОбъетка));
	Если СоответствиеКонвертированныхОбъектовПоТипу = Неопределено Тогда
		СоответствиеКонвертированныхОбъектовПоТипу = Новый Соответствие;
		СоответствиеКонвертированныхОбъектов.Вставить(ТипЗнч(СсылкаИсходногоОбъетка), СоответствиеКонвертированныхОбъектовПоТипу);
	КонецЕсли;	

	СоответствиеКонвертированныхОбъектовПоТипу.Вставить(СсылкаИсходногоОбъетка, СсылкаКонвертированногоОбъекта);
КонецПроцедуры	

Функция ПолучитьСсылкуНаКонвертированныйОбъект(Ссылка, СоответствиеКонвертированныхОбъектов)
	СоответствиеКонвертированныхОбъектовПоТипу = СоответствиеКонвертированныхОбъектов.Получить(ТипЗнч(Ссылка));
	Если СоответствиеКонвертированныхОбъектовПоТипу = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат СоответствиеКонвертированныхОбъектовПоТипу.Получить(Ссылка);
	КонецЕсли;	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАСПРЕДЕЛЕННАЯ ИНФОРМАЦИОННАЯ БАЗА: ОБНОВЛЕНИЕ С Б 1.2

Процедура ОбновитьРИБПриПереходе12На20() Экспорт 
	
	Если ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить()) 
		И ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда 
		// Переход с версии 1.2
		Константы.НастройкаПодчиненногоУзлаРИБЗавершена.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ПервыйЗапускИнформационнойБазы()
	
	Возврат НЕ Константы.ИспользоватьРазделениеПоОбластямДанных.Получить()
		И НЕ Константы.НеИспользоватьРазделениеПоОбластямДанных.Получить()
		И НЕ Константы.ЭтоАвтономноеРабочееМесто.Получить();
		
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОБНОВЛЕНИЯ 1.2 - 2.0

Функция ПараметрыПереходаСРедакции12() Экспорт
	
	Параметры = Константы.ПараметрыПереходаСРедакции12.Получить().Получить();
	
	Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
		Параметры = Новый Структура();
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ЗапуститьПомощникПереходаСРедакции12") Тогда
		Параметры.Вставить("ЗапуститьПомощникПереходаСРедакции12", Ложь);
	КонецЕсли;
	
	
	Возврат Параметры;
	
КонецФункции

Процедура УстановитьПараметрыПереходаСРедакции12(Параметры) Экспорт
	
	Константы.ПараметрыПереходаСРедакции12.Установить(Новый ХранилищеЗначения(Параметры));
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// ИНАГРО ++
// ПУТЕВЫЕ ЛИСТЫ СХ

Процедура КонвертироватьДокументПутевойЛистСХС12() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ИНАГРО_ПутевойЛистТрактористаМашиниста.Ссылка
	                |ИЗ
	                |	Документ.ИНАГРО_ПутевойЛистТрактористаМашиниста КАК ИНАГРО_ПутевойЛистТрактористаМашиниста";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументСсылка = Выборка.Ссылка;
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		
		Для Каждого СтрокаРаботы Из ДокументОбъект.ПутевыеЛисты Цикл
			Если СтрокаРаботы.ЕстьПомощник Тогда
				
				IDНовойСтроки = Новый УникальныйИдентификатор;
				СтрокаРаботы.IDСтроки = IDНовойСтроки;
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("УдалитьСтрокаТЧПутевыеЛисты", СтрокаРаботы.НомерСтроки);
				
				СоответствияПомощники = ДокументОбъект.Помощники.НайтиСтроки(ПараметрыОтбора);
				
				Для Каждого СтрокаПомощник Из СоответствияПомощники Цикл
					СтрокаПомощник.IDСтроки = IDНовойСтроки;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры

