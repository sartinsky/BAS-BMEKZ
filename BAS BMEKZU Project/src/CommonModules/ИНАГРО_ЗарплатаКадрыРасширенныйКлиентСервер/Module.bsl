#Область ПрограммныйИнтерфейс

// Процедура выполняет обновление табличной части Показатели вида расчета 
// после редактирования формулы (изменения состава показателей).
//
// Параметры:
//	- СведенияОПоказателяхФормулы - соответствие, ключ которого показатель, 
//			значение - структура сведений о показателях.
//	- Показатели - данные формы коллекция связанная с табличной частью показателей.
//
Процедура ОбновитьПоказателиПоФормуле(СведенияОПоказателяхФормулы, Показатели, ЗачетОтработанногоВремени = Неопределено) Экспорт
	
	// запомнить старые
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаПоказателя Из Показатели Цикл
		Если СтрокаПоказателя.ИспользоватьПриРасчете Тогда
			СтрокиКУдалению.Добавить(СтрокаПоказателя);
		КонецЕсли;
	КонецЦикла;
	
	// записать новые
	ОтборСтрок = Новый Структура("Показатель");
	Для Каждого КлючИЗначение Из СведенияОПоказателяхФормулы Цикл
		Показатель = КлючИЗначение.Ключ;
		Если ЗначениеЗаполнено(Показатель) Тогда
			ОтборСтрок.Показатель = Показатель;
			НайденныеСтроки = Показатели.НайтиСтроки(ОтборСтрок);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденныеСтроки[0].ИспользоватьПриРасчете = Истина;
				ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СтрокиКУдалению, НайденныеСтроки[0]);
			Иначе
				НоваяСтрока = Показатели.Добавить();
				НоваяСтрока.Показатель = Показатель;
				НоваяСтрока.ИспользоватьПриРасчете = Истина;
				
				
				Если	КлючИЗначение.Значение.ТипПоказателя <> ПредопределенноеЗначение("Перечисление.ИНАГРО_ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная") 
					И	КлючИЗначение.Значение.ТипПоказателя <> ПредопределенноеЗначение("Перечисление.ИНАГРО_ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая") 
					И	КлючИЗначение.Значение.ВозможностьИзменения <> ПредопределенноеЗначение("Перечисление.ИНАГРО_ИзменениеПоказателейСхемМотивации.ВводитсяПриРасчете") 
					И	КлючИЗначение.Значение.ВозможностьИзменения <> ПредопределенноеЗначение("Перечисление.ИНАГРО_ИзменениеПоказателейСхемМотивации.ВиденНоНеРедактируетсяПриРасчете") Тогда
					
					Если (Показатель = ПредопределенноеЗначение("Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТариф")) Тогда
						Если ЗачетОтработанногоВремени = Неопределено Тогда
							НоваяСтрока.ЗапрашиватьПриКадровыхПеремещениях = Ложь;
						ИначеЕсли ЗачетОтработанногоВремени Тогда
							НоваяСтрока.ЗапрашиватьПриКадровыхПеремещениях = Истина;
						Иначе
							НоваяСтрока.ЗапрашиватьПриКадровыхПеремещениях = Ложь;
						КонецЕсли;
					Иначе
						НоваяСтрока.ЗапрашиватьПриКадровыхПеремещениях = Истина;
					КонецЕсли;
				КонецЕсли;
					
					
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Удалить неиспользуемые старые показатели.
	Для Каждого Строка Из СтрокиКУдалению Цикл
		Показатели.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

// Функция определяет количество дней в месяце.
//
// Параметры:
//	Дата - любая дата месяца
//
// Возвращаемое значение
//	- число, количество дней в месяце
//
Функция КоличествоДнейМесяца(Дата) Экспорт
	Возврат День(КонецМесяца(Дата));
КонецФункции

// Возвращает Истина, если переданный объект содержит 
// значения по умолчанию для удостоверения личности
//
// Параметры:
//	ИнформацияОбУдостоверенииЛичности - объект, имеющий свойства 
//		ВидДокумента
//		Серия
//		Номер
//		ДатаВыдачи
//		КемВыдан
//		КодПодразделения
//		
Функция ВоинскийУчетПоУмолчанию(ИнформацияОВоинскомУчете) Экспорт
	
	Возврат (НЕ ЗначениеЗаполнено(ИнформацияОВоинскомУчете.ОтношениеКВоинскойОбязанности))
		И (НЕ ЗначениеЗаполнено(ИнформацияОВоинскомУчете.ОтношениеКВоинскомуУчету))
		И (НЕ ЗначениеЗаполнено(ИнформацияОВоинскомУчете.Звание))
		И (НЕ ЗначениеЗаполнено(ИнформацияОВоинскомУчете.ВУС))
		И (НЕ ЗначениеЗаполнено(ИнформацияОВоинскомУчете.Годность))
		И (НЕ ЗначениеЗаполнено(ИнформацияОВоинскомУчете.Военкомат))
		И (НЕ ЗначениеЗаполнено(ИнформацияОВоинскомУчете.НаличиеМобпредписания));
		
	КонецФункции
	
// Выполняются необходимые действия
//
Функция ИтогиТабличнойЧасти(Форма, Объект, ИмяТЧ, ИмяКолонкиРазрез, ИмяКолонкиИтог, ИмяЭлемента, ИсключаяРазрез = Неопределено) Экспорт
	
	ТЧ = Объект[ИмяТЧ].Выгрузить();
	ТЧ.Свернуть(ИмяКолонкиРазрез,ИмяКолонкиИтог);
	ТЧ.Сортировать(ИмяКолонкиИтог+" Убыв");
	
	ТекстПодсказки = "";
	СписокПодсказок = Новый СписокЗначений;
	МаксимальнаяДлиннаПояснения = 0;
	МаксимальнаяДлиннаПредставлениеИтога = 0;
	
	Для Каждого СтрокаТЧ ИЗ ТЧ Цикл
		
		Если СтрокаТЧ[ИмяКолонкиИтог] = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ИсключаяРазрез <> Неопределено И ИсключаяРазрез = СтрокаТЧ[ИмяКолонкиРазрез] Тогда
			Продолжить;
		КонецЕсли;	
		
		ПредставлениеИтога = Формат(СтрокаТЧ[ИмяКолонкиИтог], "ЧЦ=15; ЧДЦ=2");
		Пояснение = Строка(СтрокаТЧ[ИмяКолонкиРазрез]);
		
		ОписаниеПодсказки = Новый Структура;
		ОписаниеПодсказки.Вставить("ПредставлениеИтога", ПредставлениеИтога);
				
		ДлинаПояснения = СтрДлина(Пояснение);
		ДлинаПредставленияИтога = СтрДлина(ПредставлениеИтога);
				
		ОписаниеПодсказки.Вставить("ОбщаяДлина",  ДлинаПояснения + ДлинаПредставленияИтога);
				
		МаксимальнаяДлиннаПояснения = Макс(МаксимальнаяДлиннаПояснения, ДлинаПояснения);
		МаксимальнаяДлиннаПредставлениеИтога = Макс(МаксимальнаяДлиннаПредставлениеИтога, ДлинаПредставленияИтога);
				
		СписокПодсказок.Добавить(ОписаниеПодсказки, Пояснение);
		
		
	КонецЦикла;	
	
	МаксимальнаяОбщаяДлинаПредставления = МаксимальнаяДлиннаПояснения + МаксимальнаяДлиннаПредставлениеИтога;
	ШаблонПробелов = "                                                                                                                            ";
	Для каждого ОписаниеПодсказки Из СписокПодсказок Цикл
		
		ТекстПодсказки = ?(ПустаяСтрока(ТекстПодсказки), "", ТекстПодсказки + Символы.ПС)
			+ ОписаниеПодсказки.Представление + ": "
			+ Лев(ШаблонПробелов, (МаксимальнаяОбщаяДлинаПредставления - ОписаниеПодсказки.Значение.ОбщаяДлина))
			+ ОписаниеПодсказки.Значение.ПредставлениеИтога;
			
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстПодсказки) Тогда
		ТекстПодсказки = НСтр("ru='Нет данных';uk='Немає даних'");
	КонецЕсли;	
	
	УстановитьРасширеннуюПодсказкуЭлементуФормы(Форма,ИмяЭлемента,ТекстПодсказки);
	
КонецФункции	

// Выполняются необходимые действия
//
Функция ИтогиТабличнойЧастиСОтбором(Форма, Объект, ИмяТЧ, ИмяКолонкиРазрез, ИмяКолонкиОтбор, ЗначениеКолонкиОтбор, ИмяКолонкиИтог, ИмяЭлемента, ИсключаяРазрез = Неопределено) Экспорт
	
	ТЧПолная = Объект[ИмяТЧ].Выгрузить();
	
	Отбор = Новый Структура;
    Отбор.Вставить(ИмяКолонкиОтбор, ЗначениеКолонкиОтбор);
 
    ТЧ = ТЧПолная.Скопировать(Отбор);	
	ТЧ.Свернуть(ИмяКолонкиРазрез,ИмяКолонкиИтог);
	ТЧ.Сортировать(ИмяКолонкиИтог+" Убыв");
	
	ТекстПодсказки = "";
	СписокПодсказок = Новый СписокЗначений;
	МаксимальнаяДлиннаПояснения = 0;
	МаксимальнаяДлиннаПредставлениеИтога = 0;
	
	Для Каждого СтрокаТЧ ИЗ ТЧ Цикл
		
		Если СтрокаТЧ[ИмяКолонкиИтог] = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ИсключаяРазрез <> Неопределено И ИсключаяРазрез = СтрокаТЧ[ИмяКолонкиРазрез] Тогда
			Продолжить;
		КонецЕсли;	
		
		ПредставлениеИтога = Формат(СтрокаТЧ[ИмяКолонкиИтог], "ЧЦ=15; ЧДЦ=2");
		Пояснение = Строка(СтрокаТЧ[ИмяКолонкиРазрез]);
		
		ОписаниеПодсказки = Новый Структура;
		ОписаниеПодсказки.Вставить("ПредставлениеИтога", ПредставлениеИтога);
				
		ДлинаПояснения = СтрДлина(Пояснение);
		ДлинаПредставленияИтога = СтрДлина(ПредставлениеИтога);
				
		ОписаниеПодсказки.Вставить("ОбщаяДлина",  ДлинаПояснения + ДлинаПредставленияИтога);
				
		МаксимальнаяДлиннаПояснения = Макс(МаксимальнаяДлиннаПояснения, ДлинаПояснения);
		МаксимальнаяДлиннаПредставлениеИтога = Макс(МаксимальнаяДлиннаПредставлениеИтога, ДлинаПредставленияИтога);
				
		СписокПодсказок.Добавить(ОписаниеПодсказки, Пояснение);
		
		
	КонецЦикла;	
	
	МаксимальнаяОбщаяДлинаПредставления = МаксимальнаяДлиннаПояснения + МаксимальнаяДлиннаПредставлениеИтога;
	ШаблонПробелов = "                                                                                                                            ";
	Для каждого ОписаниеПодсказки Из СписокПодсказок Цикл
		
		ТекстПодсказки = ?(ПустаяСтрока(ТекстПодсказки), "", ТекстПодсказки + Символы.ПС)
			+ ОписаниеПодсказки.Представление + ": "
			+ Лев(ШаблонПробелов, (МаксимальнаяОбщаяДлинаПредставления - ОписаниеПодсказки.Значение.ОбщаяДлина))
			+ ОписаниеПодсказки.Значение.ПредставлениеИтога;
			
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстПодсказки) Тогда
		ТекстПодсказки = НСтр("ru='Нет данных';uk='Немає даних'");
	КонецЕсли;
	Форма[ИмяЭлемента] = Формат(ТЧ.Итог(ИмяКолонкиИтог), "ЧЦ=16; ЧДЦ=2");
	
	УстановитьРасширеннуюПодсказкуЭлементуФормы(Форма,ИмяЭлемента,ТекстПодсказки);
	
КонецФункции	

// Выполняются необходимые действия
//
Функция ИтогиПроводок(Форма, Объект, ИмяТЧ, ИмяКолонкиРазрез1, ИмяКолонкиРазрез2, ИмяКолонкиИтог, ИмяЭлемента, ИсключаяРазрез = Неопределено) Экспорт
	
	ТЧ = Объект[ИмяТЧ].Выгрузить();
	ТЧ.Свернуть(ИмяКолонкиРазрез1+","+ИмяКолонкиРазрез2, ИмяКолонкиИтог);
	ТЧ.Сортировать(ИмяКолонкиИтог+" Убыв");
	
	ТекстПодсказки = "";
	СписокПодсказок = Новый СписокЗначений;
	МаксимальнаяДлиннаПояснения = 0;
	МаксимальнаяДлиннаПредставлениеИтога = 0;
	
	
	Для Каждого СтрокаТЧ ИЗ ТЧ Цикл
		
		Если СтрокаТЧ[ИмяКолонкиИтог] = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ИсключаяРазрез <> Неопределено И ИсключаяРазрез = СтрокаТЧ[ИмяКолонкиРазрез1] ИЛИ ИсключаяРазрез = СтрокаТЧ[ИмяКолонкиРазрез2] Тогда
			Продолжить;
		КонецЕсли;	
		
		ПредставлениеИтога = Формат(СтрокаТЧ[ИмяКолонкиИтог], "ЧЦ=15; ЧДЦ=2");
		Пояснение = Строка(СтрокаТЧ[ИмяКолонкиРазрез1])+?(ИмяКолонкиРазрез2 = "",""," "+СтрокаТЧ[ИмяКолонкиРазрез2]);
		
		ОписаниеПодсказки = Новый Структура;
		ОписаниеПодсказки.Вставить("ПредставлениеИтога", ПредставлениеИтога);
				
		ДлинаПояснения = СтрДлина(Пояснение);
		ДлинаПредставленияИтога = СтрДлина(ПредставлениеИтога);
				
		ОписаниеПодсказки.Вставить("ОбщаяДлина",  ДлинаПояснения + ДлинаПредставленияИтога);
				
		МаксимальнаяДлиннаПояснения = Макс(МаксимальнаяДлиннаПояснения, ДлинаПояснения);
		МаксимальнаяДлиннаПредставлениеИтога = Макс(МаксимальнаяДлиннаПредставлениеИтога, ДлинаПредставленияИтога);
				
		СписокПодсказок.Добавить(ОписаниеПодсказки, Пояснение);
		
	КонецЦикла;	
	
	МаксимальнаяОбщаяДлинаПредставления = МаксимальнаяДлиннаПояснения + МаксимальнаяДлиннаПредставлениеИтога;
	ШаблонПробелов = "                                                                                                                            ";
	Для каждого ОписаниеПодсказки Из СписокПодсказок Цикл
		
		ТекстПодсказки = ?(ПустаяСтрока(ТекстПодсказки), "", ТекстПодсказки + Символы.ПС)
			+ ОписаниеПодсказки.Представление + ": "
			+ Лев(ШаблонПробелов, (МаксимальнаяОбщаяДлинаПредставления - ОписаниеПодсказки.Значение.ОбщаяДлина))
			+ ОписаниеПодсказки.Значение.ПредставлениеИтога;
			
	КонецЦикла;
		
	Если ПустаяСтрока(ТекстПодсказки) Тогда
		ТекстПодсказки = НСтр("ru='Нет данных';uk='Немає даних'");
	КонецЕсли;	
	
	УстановитьРасширеннуюПодсказкуЭлементуФормы(Форма,ИмяЭлемента,ТекстПодсказки);
	
КонецФункции	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьРасширеннуюПодсказкуЭлементуФормы(Форма, ИмяЭлемента, ТекстПодсказки) Экспорт
	
	ЭлементФормы = Форма.Элементы.Найти(ИмяЭлемента);
	Если ЭлементФормы <> Неопределено Тогда
		ЭлементФормы.РасширеннаяПодсказка.Заголовок = ТекстПодсказки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
