
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Получение обновлений программы".
// ОбщийМодуль.ПолучениеОбновленийПрограммы.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет возможность использования автоматического обновления программы в
// текущем режиме работы.
//
// Параметры:
//	ПроверитьВозможностьПримененияОбновлений - Булево - проверить для текущего
//		пользователя наличие права применения обновления.
//		Если Истина - проверяется возможность использования в режиме применения
//		обновления, иначе проверить возможность просмотра информации о
//		доступных обновлениях;
//	ПроверитьОС - Булево - проверить возможность применения обновления
//		на текущей операционной системе.
//
// Возвращаемое значение:
//	Булево - признак возможности использования: Истина, если использование
//		возможно, Ложь - в противном случае.
//
Функция ДоступноИспользованиеОбновленияПрограммы(
	ПроверитьВозможностьПримененияОбновлений = Ложь,
	ПроверитьОС = Истина) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент()
		Или ОбщегоНазначения.РазделениеВключено()
		Или (ПроверитьВозможностьПримененияОбновлений И Не Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь))
		Или Не Пользователи.РолиДоступны("ПросмотрИнформацииОДоступныхОбновленияхПрограммы", , Ложь)
		Или ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя()
		Или ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПроверитьОС И Не ОбщегоНазначенияКлиентСервер.ЭтоWindowsКлиент() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// В файловом режиме работы возвращает каталог, в который был сохранен последний
// полученный дистрибутив Платформы. В других режимах работы
// возвращает Неопределено.
//
// Возвращаемое значение:
//	Строка - каталог с дистрибутивом Платформы в
//		файловом режиме работы;
//	Неопределено - в других режимах работы.
//
Функция КаталогСохраненияПоследнегоПолученногоДистрибутива() Экспорт
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ИнтеррнетПоддержка",
			"КаталогДистрибутива");
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Добавляет необходимые параметры работы клиента при запуске.
// Добавленные параметры доступны в
// СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске().ИнтернетПоддержкаПользователей.<ИмяПараметра>;
// Используется в том случае, если подсистема реализует сценарий, выполняемый
// при начале работы системы.
// Вызывается из ИнтернетПоддержкаПользователей.ПараметрыРаботыКлиентаПриЗапуске().
//
// Параметры:
//	Параметры - Структура - заполняемые параметры;
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	Если Не ДоступноИспользованиеОбновленияПрограммы() Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОбновления = НастройкиАвтоматическогоОбновления();
	Параметры.Вставить("ПолучениеОбновленийПрограммы", НастройкиОбновления);
	
КонецПроцедуры

// Интеграция с подсистемой СтандартныеПодсистемы.ТекущиеДела.
// Заполняет список текущих дел пользователя.
//
// Параметры:
//  ТекущиеДела - ТаблицаЗначений - таблица значений с колонками:
//    * Идентификатор - Строка - внутренний идентификатор дела, используемый механизмом "Текущие дела".
//    * ЕстьДела      - Булево - если Истина, дело выводится в списке текущих дел пользователя.
//    * Важное        - Булево - если Истина, дело будет выделено красным цветом.
//    * Представление - Строка - представление дела, выводимое пользователю.
//    * Количество    - Число  - количественный показатель дела, выводится в строке заголовка дела.
//    * Форма         - Строка - полный путь к форме, которую необходимо открыть при нажатии на гиперссылку
//                               дела на панели "Текущие дела".
//    * ПараметрыФормы- Структура - параметры, с которыми нужно открывать форму показателя.
//    * Владелец      - Строка, объект метаданных - строковый идентификатор дела, которое будет владельцем для текущего
//                      или объект метаданных подсистема.
//    * Подсказка     - Строка - текст подсказки.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ТекущиеДела")
		Или Не ДоступноИспользованиеОбновленияПрограммы() Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторДела = "ОбновлениеПрограммы";
	
	// Вызов процедуры предполагает наличие подсистемы СтандартныеПодсистемы.ТекущиеДела.
	МодульТекущиеДелаСервер = ОбщегоНазначения.ОбщийМодуль("ТекущиеДелаСервер");
	Если МодульТекущиеДелаСервер.ДелоОтключено(ИдентификаторДела) Тогда
		Возврат;
	КонецЕсли;
	
	Разделы = МодульТекущиеДелаСервер.РазделыДляОбъекта(Метаданные.Обработки.ОбновлениеПрограммы.ПолноеИмя());
	Если Разделы.Количество() > 0 Тогда
		
		ИнформацияОДоступномОбновленииВНастройках = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ИнтеррнетПоддержка",
			"ПолучениеОбновленийПрограммы/ИнформацияОДоступномОбновлении"
			+ ?(ПолучениеОбновленийПрограммыКлиентСервер.Это64РазрядноеПриложение(),
				"64",
				""));
		
		Если ТипЗнч(ИнформацияОДоступномОбновленииВНастройках) <> Тип("Структура")
			Или Не ИнформацияОДоступномОбновленииВНастройках.Свойство("ИмяПрограммы")
			Или ИнформацияОДоступномОбновленииВНастройках.ИмяПрограммы <> ИнтернетПоддержкаПользователей.СлужебнаяИмяПрограммы()
			Или Не ИнформацияОДоступномОбновленииВНастройках.Свойство("МетаданныеИмя")
			Или ИнформацияОДоступномОбновленииВНастройках.МетаданныеИмя <> ИнтернетПоддержкаПользователей.ИмяКонфигурации()
			Или Не ИнформацияОДоступномОбновленииВНастройках.Свойство("МетаданныеВерсия")
			Или ИнформацияОДоступномОбновленииВНастройках.МетаданныеВерсия <> ИнтернетПоддержкаПользователей.ВерсияКонфигурации()
			Или Не ИнформацияОДоступномОбновленииВНастройках.Свойство("ВерсияПлатформы")
			Или ИнформацияОДоступномОбновленииВНастройках.ВерсияПлатформы <> ПолучениеОбновленийПрограммыКлиентСервер.ТекущаяВерсияПлатформы1СПредприятие()
			Или Не ИнформацияОДоступномОбновленииВНастройках.Свойство("ИнформацияОДоступномОбновлении")
			Или ТипЗнч(ИнформацияОДоступномОбновленииВНастройках.ИнформацияОДоступномОбновлении) <> Тип("Структура") Тогда
			ДобавитьОтключенноеДело(ТекущиеДела, ИдентификаторДела, Разделы);
			Возврат;
		КонецЕсли;
		
		ИнформацияОДоступномОбновлении = ИнформацияОДоступномОбновленииВНастройках.ИнформацияОДоступномОбновлении;
		
		Если Не ПустаяСтрока(ИнформацияОДоступномОбновлении.ИмяОшибки) Тогда
			
			Для Каждого Раздел Из Разделы Цикл
				Дело = ТекущиеДела.Добавить();
				Дело.Идентификатор  = ИдентификаторДела;
				Дело.ЕстьДела       = Истина;
				Дело.Важное         = Истина;
				Дело.Представление  = НСтр("ru='Не удалось проверить наличие обновлений программы.';uk='Не вдалося перевірити наявність оновлень програми.'");
				Дело.Форма          = "Обработка.ОбновлениеПрограммы.Форма.Форма";
				Дело.ПараметрыФормы = Новый Структура("ИнформацияОбОбновлении", ИнформацияОДоступномОбновлении);
				Дело.Владелец       = Раздел;
			КонецЦикла;
			
		ИначеЕсли ИнформацияОДоступномОбновлении.ДоступноОбновление Тогда
			
			ЭтоФайловаяИБ = ЭтоФайловаяИБ();
			ОбновлениеКомКонф = ИнформацияОДоступномОбновлении.Конфигурация;
			ОбновлениеКомПл   = ИнформацияОДоступномОбновлении.Платформа;
			РазмерОбновления = ?(ОбновлениеКомКонф.ДоступноОбновление, ОбновлениеКомКонф.РазмерОбновления, 0)
				+ ?(ОбновлениеКомПл.ДоступноОбновление И ЭтоФайловаяИБ
					И (Не ОбновлениеКомКонф.ДоступноОбновление Или ОбновлениеКомПл.ОбязательностьУстановки < 2),
					ОбновлениеКомПл.РазмерОбновления,
					0);
			РекомендуетсяУстановить = (Не ОбновлениеКомКонф.ДоступноОбновление
				И ОбновлениеКомПл.ДоступноОбновление
				И ОбновлениеКомПл.ОбязательностьУстановки < 2);
			
			Если РазмерОбновления <> 0 Тогда
				ПредставлениеДелаРазмер =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Размер дистрибутива: %1.';uk='Розмір дистрибутива: %1.'"),
						ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеРазмераФайла(РазмерОбновления));
			КонецЕсли;
			
			Для Каждого Раздел Из Разделы Цикл
				
				Дело = ТекущиеДела.Добавить();
				Дело.Идентификатор  = ИдентификаторДела;
				Дело.ЕстьДела       = Истина;
				Дело.Важное         = РекомендуетсяУстановить;
				Дело.Представление  = НСтр("ru='Доступно обновление программы';uk='Доступно оновлення програми'");
				Дело.Форма          = "Обработка.ОбновлениеПрограммы.Форма.Форма";
				Дело.ПараметрыФормы = Новый Структура("ИнформацияОбОбновлении", ИнформацияОДоступномОбновлении);
				Дело.Владелец       = Раздел;
				
				Если РазмерОбновления <> 0 Тогда
					
					ДелоРазмер = ТекущиеДела.Добавить();
					ДелоРазмер.Идентификатор  = "РазмерОбновленияПрограммы";
					ДелоРазмер.ЕстьДела       = Истина;
					ДелоРазмер.Представление  = ПредставлениеДелаРазмер;
					ДелоРазмер.Владелец       = ИдентификаторДела;
					
				КонецЕсли;
				
				Если РекомендуетсяУстановить Тогда
					
					ДелоРекомендуетсяУстановить = ТекущиеДела.Добавить();
					ДелоРекомендуетсяУстановить.Идентификатор  = "РекомендацияУстановитьОбновленияПрограммы";
					ДелоРекомендуетсяУстановить.ЕстьДела       = Истина;
					ДелоРекомендуетсяУстановить.Представление  = НСтр("ru='Рекомендуется установить это обновление.';uk='Рекомендується встановити це оновлення.'");
					ДелоРекомендуетсяУстановить.Владелец       = ИдентификаторДела;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ДобавитьОтключенноеДело(ТекущиеДела, ИдентификаторДела, Разделы);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Интеграция с подсистемой СтандартныеПодсистемы.БазоваяФункциональность.
//
Процедура ПриЗаполненииРазрешенийНаДоступКВнешнимРесурсам(ЗапросыРазрешений) Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		
		НовыеРазрешения = Новый Массив;
		
		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTP",
			"downloads.v8.bas-soft.eu",
			80,
			НСтр("ru='Получение файлов обновлений программы (зона eu)';uk='Отримання файлів оновлень програми (зона eu)'"));
		НовыеРазрешения.Добавить(Разрешение);
		
		Разрешение = РаботаВБезопасномРежиме.РазрешениеНаИспользованиеИнтернетРесурса(
			"HTTPS",
			"update-api.bas-soft.eu",
			443,
			НСтр("ru='Сервис получения обновлений программы (зона eu)';uk='Сервіс отримання оновлень програми (зона eu)'"));
		НовыеРазрешения.Добавить(Разрешение);
		
		ЗапросыРазрешений.Добавить(РаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(НовыеРазрешения));
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список обработчиков обновления информационной базы.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.1.8.2";
	Обработчик.Процедура =
		"ПолучениеОбновленийПрограммы.ОбновлениеИнформационнойБазы_ОбновитьНастройкиПолученияОбновлений_2_1_8_1";
	Обработчик.ОбщиеДанные         = Ложь;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения     = "Оперативно";
	
КонецПроцедуры

#Область БСПНастройкиПрограммы

// Вызывается из обработчика ПриСозданииНаСервере() панели администрирования
// БСП, выполняется настройку отображения элементов управления для подсистем
// библиотеки ИПП.
//
// Параметры:
//	Форма - УправляемаяФорма - форма панели управления.
//
Процедура ИнтернетПоддержкаИСервисы_ПриСозданииНаСервере(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Элементы.БИПГруппаОбновлениеПрограммы.Видимость = Истина;
	
	ДоступенПросмотрИнформацииОбОбновлениях   = ДоступноИспользованиеОбновленияПрограммы();
	ДоступноПрименениеОбновлений              = ДоступноИспользованиеОбновленияПрограммы(Истина);
	Элементы.БИПОбновлениеПрограммы.Видимость = ДоступенПросмотрИнформацииОбОбновлениях;
	Элементы.ГруппаОбновлениеПрограммы_Настройки.Видимость = ДоступенПросмотрИнформацииОбОбновлениях;
	
	Если Элементы.АвтоматическаяПроверкаОбновлений.Видимость Тогда
		НастройкиОбновления = НастройкиАвтоматическогоОбновления();
		Форма.БИПАвтоматическаяПроверкаОбновлений =
			НастройкиОбновления.РежимАвтоматическойПроверкиНаличияОбновленийПрограммы;
		Элементы.ДекорацияРасписаниеПроверкиОбновлений.Доступность =
			(Форма.БИПАвтоматическаяПроверкаОбновлений = 2);
		Элементы.ДекорацияРасписаниеПроверкиОбновлений.Заголовок =
			ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеРасписания(НастройкиОбновления.Расписание);
	КонецЕсли;
	
	Если Не ЭтоФайловаяИБ() Или Не ДоступноПрименениеОбновлений Тогда
		Элементы.КаталогДистрибутиваПлатформы.Видимость = Ложь;
	Иначе
		Форма.БИПКаталогДистрибутиваПлатформы = КаталогСохраненияПоследнегоПолученногоДистрибутива();
		Элементы.КаталогДистрибутиваПлатформы.Видимость =
			ПолучениеОбновленийПрограммыКлиентСервер.ФайлСуществует(Форма.БИПКаталогДистрибутиваПлатформы, Истина);
	КонецЕсли;
	
	Элементы.ГруппаДетализироватьОбновлениеИБВЖурналеРегистрации.Видимость =
		Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь)
		И (Не ОбщегоНазначения.РазделениеВключено()
		Или Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных());
	
КонецПроцедуры

#КонецОбласти

// Возвращает информацию о доступном обновлении в сценарии рабочего обновления.
//
Функция ИнформацияОДоступномОбновлении() Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыКлиента"   , ИнтернетПоддержкаПользователей.ПараметрыКлиента());
	ДополнительныеПараметры.Вставить("НастройкиСоединения", ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами());
	Возврат СлужебнаяИнформацияОДоступномОбновлении(
		ИнтернетПоддержкаПользователей.СлужебнаяИмяПрограммы(),
		ИнтернетПоддержкаПользователей.ВерсияКонфигурации(),
		"",
		"",
		"РабочееОбновление",
		ДополнительныеПараметры);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоФайловаяИБ() Экспорт
	
	Возврат ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
КонецФункции

Функция ЭтоАдминистраторСистемы() Экспорт
	
	Возврат Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь);
	
КонецФункции

Функция ЭтоБазоваяВерсияКонфигурации() Экспорт
	
	Возврат СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
КонецФункции

Функция СлужебнаяДоступноИспользованиеПолученияОбновленийПлатформы(
	ПроверитьВозможностьАвтоматическойУстановки = Ложь) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент()
		Или ОбщегоНазначения.РазделениеВключено()
		Или Не Пользователи.ЭтоПолноправныйПользователь(, Истина)
		Или ПроверитьВозможностьАвтоматическойУстановки И Не ЭтоФайловаяИБ()
		Или ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СистИнфо = Новый СистемнаяИнформация;
	Если СистИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86
		И СистИнфо.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Программный интерфейс сервиса автоматического обновления.

// Возвращает информацию о доступном обновлении конфигурации и платформы.
//
Функция СлужебнаяИнформацияОДоступномОбновлении(
	ИмяТекущейПрограммы,
	ВерсияТекущейПрограммы,
	ИмяНовойПрограммы,
	НомерРедакцииНовойПрограммы,
	СценарийОбновления,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	НастройкиСоединения    = Неопределено;
	ПараметрыКлиента       = Неопределено;
	НастройкиПроксиСервера = Неопределено;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("НастройкиСоединения") Тогда
			НастройкиСоединения = ДополнительныеПараметры.НастройкиСоединения;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ПараметрыКлиента") Тогда
			ПараметрыКлиента = ДополнительныеПараметры.ПараметрыКлиента;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("НастройкиПроксиСервера") Тогда
			НастройкиПроксиСервера = ДополнительныеПараметры.НастройкиПроксиСервера;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиПроксиСервера <> Неопределено Тогда
		НастройкиПрокси = НастройкиПроксиСервера.НастройкиПрокси;
	Иначе
		НастройкиПрокси = Неопределено;
	КонецЕсли;
	
	ДополнительныеПараметрыВызовОперации = Новый Структура;
	ДополнительныеПараметрыВызовОперации.Вставить("НастройкиСоединения"   , НастройкиСоединения);
	ДополнительныеПараметрыВызовОперации.Вставить("ПараметрыКлиента"      , ПараметрыКлиента);
	ДополнительныеПараметрыВызовОперации.Вставить("НастройкиПроксиСервера", НастройкиПрокси);
	Результат = ИнформацияОДоступномОбновленииВызовОперации(
		ИмяТекущейПрограммы,
		ВерсияТекущейПрограммы,
		ИмяНовойПрограммы,
		НомерРедакцииНовойПрограммы,
		СценарийОбновления,
		ДополнительныеПараметрыВызовОперации);
	
	Если СценарийОбновления = "РабочееОбновление" Тогда
		ПолучениеОбновленийПрограммыВызовСервера.СохранитьИнформациюОДоступномОбновленииВНастройках(
			Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает информацию о файлах обновления для получения файлов.
//
Функция ОписаниеФайловОбновлений(
	ОбновлениеКонфигурации,
	ОбновлениеПлатформы,
	Логин,
	Пароль,
	НастройкиСоединения = Неопределено,
	ПараметрыКлиента = Неопределено,
	НастройкиПроксиСервера = Неопределено) Экспорт
	
	Если НастройкиПроксиСервера <> Неопределено Тогда
		НастройкиПрокси = НастройкиПроксиСервера.НастройкиПрокси;
	Иначе
		НастройкиПрокси = Неопределено;
	КонецЕсли;
	
	Возврат ОписаниеФайловОбновленийВызовОперации(
		ОбновлениеКонфигурации,
		ОбновлениеПлатформы,
		Логин,
		Пароль,
		НастройкиСоединения,
		ПараметрыКлиента,
		НастройкиПрокси);
	
КонецФункции

Функция ИнформацияОДоступномОбновленииВызовОперации(
	ИмяТекущейПрограммы,
	ВерсияТекущейПрограммы,
	ИмяНовойПрограммы,
	НомерРедакцииНовойПрограммы,
	СценарийОбновления,
	ДополнительныеПараметры)
	
	НастройкиСоединения    = ДополнительныеПараметры.НастройкиСоединения;
	ПараметрыКлиента       = ДополнительныеПараметры.ПараметрыКлиента;
	НастройкиПроксиСервера = ДополнительныеПараметры.НастройкиПроксиСервера;
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяОшибки"         , "");
	Результат.Вставить("Сообщение"         , "");
	Результат.Вставить("ИнформацияОбОшибке", "");
	Результат.Вставить("ДоступноОбновление", Ложь);
	
	КомпонентОбновлениеКонфигурации = ПолучениеОбновленийПрограммыКлиентСервер.НовыйИнформацияОДоступномОбновленииКонфигурации();
	ОбновлениеПлатформы             = ПолучениеОбновленийПрограммыКлиентСервер.НовыйИнформацияОДоступномОбновленииПлатформы();
	Результат.Вставить("Конфигурация", КомпонентОбновлениеКонфигурации);
	Результат.Вставить("Платформа"   , ОбновлениеПлатформы);
	
	Если ИмяТекущейПрограммы = "Unknown" Тогда
		Результат.ИмяОшибки = "ConnectError";
		Результат.Сообщение = НСтр("ru='Неверные параметры подключения к сервису.';uk='Неправильні параметри підключення до сервісу.'");
		Результат.ИнформацияОбОшибке =
			НСтр("ru='Не удалось получить информацию о доступном обновлении.
                |Не определено имя программы в методе ПриОпределенииИмениПрограммы() общего модуля ИнтернетПоддержкаПользователейПереопределяемый.'
                |;uk='Не вдалося отримати інформацію про доступне оновлення.
                |Не визначено ім''я програми в методі ПриОпределенииИмениПрограммы() загального модуля ИнтернетПоддержкаПользователейПереопределяемый.'");
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		Возврат Результат;
	КонецЕсли;
	
	// Проверка доступности сервиса.
	URLОперацииPing = ПолучениеОбновленийПрограммыКлиентСервер.URLОперацииСервисаОбновлений("ping", НастройкиСоединения.ДоменРасположенияСерверовИПП);
	РезультатПроверки =
		ИнтернетПоддержкаПользователей.ПроверитьURLДоступен(
		URLОперацииPing,
		НастройкиПроксиСервера);
	
	Если Не ПустаяСтрока(РезультатПроверки.ИмяОшибки) Тогда
		Результат.ИмяОшибки = РезультатПроверки.ИмяОшибки;
		Результат.Сообщение = РезультатПроверки.СообщениеОбОшибке;
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось получить информацию о доступном обновлении.
                |Не удалось проверить доступность сервиса автоматического обновления программы: %1.
                |Причина:
                |%2'
                |;uk='Не вдалося отримати інформацію про доступне оновлення.
                |Не вдалося перевірити доступність сервісу автоматичного оновлення програми: %1.
                |Причина:
                |%2'"),
			URLОперацииPing,
			РезультатПроверки.ИнформацияОбОшибке);
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		Возврат Результат;
	КонецЕсли;
	
	
	// Вызов операции сервиса.
	URLОперации = ПолучениеОбновленийПрограммыКлиентСервер.URLОперацииСервисаОбновлений("info", НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	ПараметрыЗапросаJSON = ПолучениеОбновленийПрограммыКлиентСервер.InfoRequestJSON(
		ИмяТекущейПрограммы,
		ВерсияТекущейПрограммы,
		ИмяНовойПрограммы,
		НомерРедакцииНовойПрограммы,
		СценарийОбновления,
		ПолучениеОбновленийПрограммыВызовСервера.ДополнительныеПараметрыЗапросаКСервисуОбновлений(ПараметрыКлиента));
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	РезультатОтправки = ИнтернетПоддержкаПользователейКлиентСервер.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Ошибка при получении информации о доступном обновлении.
                |%1'
                |;uk='Помилка при отриманні інформації про доступне оновлення.
                |%1'"),
			РезультатОтправки.ИнформацияОбОшибке);
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		
		Результат.ИмяОшибки = РезультатОтправки.КодОшибки;
		Результат.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось получить информацию о доступном обновлении.
                |%1'
                |;uk='Не вдалося отримати інформацію про доступне оновлення.
                |%1'"),
			РезультатОтправки.СообщениеОбОшибке);
		
		Возврат Результат;
		
	КонецЕсли;
	
	// Обработка ответа.
	Попытка
		ПолучениеОбновленийПрограммыКлиентСервер.ЗаполнитьИнформациюОбОбновленииИзInfoResonseИзJSON(Результат, РезультатОтправки.Содержимое);
	Исключение
		
		ИнфОшибка = ИнформацияОбОшибке();
		
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось проверить наличие обновлений программы.
                |Ошибка при обработке ответа сервиса.
                |Некорректный ответ сервиса.
                |%1
                |Тело ответа: %2'
                |;uk='Не вдалося перевірити наявність оновлень програми.
                |Помилка при обробці відповіді сервісу.
                |Некоректна відповідь сервісу.
                |%1
                |Тіло відповіді: %2'"),
			ПодробноеПредставлениеОшибки(ИнфОшибка),
			Лев(РезультатОтправки.Содержимое, 1024));
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		
		Результат.ИмяОшибки = "НекорректныйОтветСервиса";
		Результат.Сообщение =
			НСтр("ru='Не удалось проверить наличие обновлений программы.
                |Некорректный ответ сервиса.'
                |;uk='Не вдалося перевірити наявність оновлень програми.
                |Некоректна відповідь сервісу.'");
		
		Возврат Результат;
		
	КонецПопытки;
	
	Если Не ПустаяСтрока(Результат.ИмяОшибки) Тогда
		
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось проверить наличие обновлений программы.
                |
                |Сервис сообщил об ошибке.
                |
                |Ответ сервиса: %1'
                |;uk='Не вдалося перевірити наявність оновлень програми.
                |
                |Сервіс повідомив про помилку.
                |
                |Відповідь сервісу: %1'"),
			Лев(РезультатОтправки.Содержимое, 1024)));
		
		Возврат Результат;
		
	КонецЕсли;
	
	ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Получена информация о доступном обновлении.
                |%1'
                |;uk='Отримана інформація про доступне оновлення.
                |%1'"),
			РезультатОтправки.Содержимое));
	
	КомпонентОбновлениеКонфигурации.ДоступноОбновление =
		Не ПустаяСтрока(КомпонентОбновлениеКонфигурации.Версия);
	
	// Обновление платформы не поддерживается
	ОбновлениеПлатформы = ПолучениеОбновленийПрограммыКлиентСервер.НовыйИнформацияОДоступномОбновленииПлатформы();
	Результат.Вставить("Платформа", ОбновлениеПлатформы);
	
	Результат.ДоступноОбновление = (КомпонентОбновлениеКонфигурации.ДоступноОбновление
		Или ОбновлениеПлатформы.ДоступноОбновление);
	Результат.Вставить("Сценарий", СценарийОбновления);
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеФайловОбновленийВызовОперации(
	ПараметрОбновлениеКонфигурации,
	ОбновлениеПлатформы,
	Логин,
	Пароль,
	НастройкиСоединения,
	ПараметрыКлиента,
	НастройкиПроксиСервера)
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяОшибки"             , "");
	Результат.Вставить("Сообщение"             , "");
	Результат.Вставить("ИнформацияОбОшибке"    , "");
	Результат.Вставить("ОбновленияКонфигурации", Новый Массив);
	Результат.Вставить("URLФайлаОбновленияПлатформы", "");
	Результат.Вставить("РазмерОбновленияПлатформы"  , 0);
	
	Если ОбновлениеПлатформы <> Неопределено Тогда
		Результат.Вставить("ВерсияПлатформы"          , ОбновлениеПлатформы.Версия);
		Результат.Вставить("РазмерОбновленияПлатформы", ОбновлениеПлатформы.РазмерОбновления);
	Иначе
		Результат.Вставить("ВерсияПлатформы"          , "");
		Результат.Вставить("РазмерОбновленияПлатформы", 0);
	КонецЕсли;
	
	// Проверка доступности сервиса.
	URLОперацииPing = ПолучениеОбновленийПрограммыКлиентСервер.URLОперацииСервисаОбновлений(
		"ping",
		НастройкиСоединения.ДоменРасположенияСерверовИПП);
	РезультатПроверки =
		ИнтернетПоддержкаПользователей.ПроверитьURLДоступен(
			URLОперацииPing,
			НастройкиПроксиСервера);
	
	Если Не ПустаяСтрока(РезультатПроверки.ИмяОшибки) Тогда
		Результат.ИмяОшибки = РезультатПроверки.ИмяОшибки;
		Результат.Сообщение = РезультатПроверки.СообщениеОбОшибке;
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось получить информацию о файлах обновления.
                |Не удалось проверить доступность сервиса автоматического обновления программы: %1.
                |Причина:
                |%2'
                |;uk='Не вдається отримати інформацію про файл оновлення.
                |Не вдалося перевірити доступність сервісу автоматичного оновлення програми: %1.
                |Причина:
                |%2'"),
			URLОперацииPing,
			РезультатПроверки.ИнформацияОбОшибке);
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(Результат.ИнформацияОбОшибке);
		Возврат Результат;
	КонецЕсли;
	
	// Вызов операции сервиса.
	URLОперации = ПолучениеОбновленийПрограммыКлиентСервер.URLОперацииСервисаОбновлений("", НастройкиСоединения.ДоменРасположенияСерверовИПП);
	
	ПараметрыЗапросаJSON = ПолучениеОбновленийПрограммыКлиентСервер.UpdateRequestJSON(
		ПараметрОбновлениеКонфигурации,
		ОбновлениеПлатформы,
		Логин,
		Пароль,
		ПолучениеОбновленийПрограммыВызовСервера.ДополнительныеПараметрыЗапросаКСервисуОбновлений(ПараметрыКлиента));
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Метод"                   , "POST");
	ПараметрыОтправки.Вставить("ФорматОтвета"            , 1);
	ПараметрыОтправки.Вставить("Заголовки"               , Заголовки);
	ПараметрыОтправки.Вставить("ДанныеДляОбработки"      , ПараметрыЗапросаJSON);
	ПараметрыОтправки.Вставить("ФорматДанныхДляОбработки", 1);
	ПараметрыОтправки.Вставить("НастройкиПрокси"         , НастройкиПроксиСервера);
	ПараметрыОтправки.Вставить("Таймаут"                 , 30);
	
	РезультатОтправки = ИнтернетПоддержкаПользователейКлиентСервер.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		,
		,
		ПараметрыОтправки);
	
	Если Не ПустаяСтрока(РезультатОтправки.КодОшибки) Тогда
		
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Ошибка при получении информации о файлах обновления.
                |%1'
                |;uk='Помилка при отриманні інформації про файли оновлення.
                |%1'"),
			РезультатОтправки.ИнформацияОбОшибке);
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		
		Результат.ИмяОшибки = РезультатОтправки.КодОшибки;
		Результат.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось получить информацию о файлах обновления.
                |%1'
                |;uk='Не вдалося отримати інформацію про файл оновлення.
                |%1'"),
			РезультатОтправки.СообщениеОбОшибке);
		
		Возврат Результат;
		
	КонецЕсли;
	
	// Обработка ответа.
	Попытка
		ПолучениеОбновленийПрограммыКлиентСервер.ЗаполнитьИнформациюОФайлахОбновленияИзUpdateResonseJSON(Результат, РезультатОтправки.Содержимое);
	Исключение
		
		ИнфОшибка = ИнформацияОбОшибке();
		
		Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось получить информацию об обновлении программы.
                |Ошибка при обработке ответа сервиса.
                |Некорректный ответ сервиса.
                |%1
                |Тело ответа: %2'
                |;uk='Не вдалося отримати інформацію про оновлення програми.
                |Помилка при обробці відповіді сервісу.
                |Некоректна відповідь сервісу.
                |%1
                |Тіло відповіді: %2'"),
			ПодробноеПредставлениеОшибки(ИнфОшибка),
			Лев(РезультатОтправки.Содержимое, 1024));
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			Результат.ИнформацияОбОшибке);
		
		Результат.ИмяОшибки = "НекорректныйОтветСервиса";
		Результат.Сообщение =
			НСтр("ru='Не удалось получить информацию об обновлении программы.
                |Некорректный ответ сервиса.'
                |;uk='Не вдалося отримати інформацію про оновлення програми.
                |Некоректна відповідь сервісу.'");
		
		Возврат Результат;
		
	КонецПопытки;
	
	Если Не ПустаяСтрока(Результат.ИмяОшибки) Тогда
		
		ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось получить информацию об обновлении программы.
                |
                |Сервис сообщил об ошибке.
                |
                |Ответ сервиса: %1'
                |;uk='Не вдалося отримати інформацію про оновлення програми.
                |
                |Сервіс повідомив про помилку.
                |
                |Відповідь сервісу: %1'"),
			Лев(РезультатОтправки.Содержимое, 1024)));
		
		Возврат Результат;
		
	КонецЕсли;
	
	ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Получена информация о файлах обновления.
                |%1'
                |;uk='Отримана інформація про файли оновлення.
                |%1'"),
			РезультатОтправки.Содержимое));
	
	// Проверка возвращенных данных.
	Если ПараметрОбновлениеКонфигурации <> Неопределено Тогда
		Если ПараметрОбновлениеКонфигурации.ФайлыДляЗагрузки.Количество() <> Результат.ОбновленияКонфигурации.Количество() Тогда
			Результат.ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Возвращена неполная информация об обновлении конфигурации.
                    |Не совпадает количество запрошенных и возвращенных файлов (%1 и %2).'
                    |;uk='Повернута неповна інформація про оновлення конфігурації.
                    |Не збігається кількість отриманих і повернутих файлів (%1 і %2).'"),
				ПараметрОбновлениеКонфигурации.ФайлыДляЗагрузки.Количество(),
				Результат.ОбновленияКонфигурации.Количество());
			ПолучениеОбновленийПрограммыВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				Результат.ИнформацияОбОшибке);
			
			Результат.ИмяОшибки = "НекорректныйОтветСервиса";
			Результат.Сообщение =
				НСтр("ru='Не удалось получить информацию об обновлении программы.
                    |Некорректный ответ сервиса.'
                    |;uk='Не вдалося отримати інформацію про оновлення програми.
                    |Некоректна відповідь сервісу.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проверка наличия обновлений в фоновом режиме.
// Получение и установка обновлений в фоновом режиме.

Процедура ПроверитьНаличиеОбновленияВФоновомРежиме(ПараметрыКлиента) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыКлиента"   , ПараметрыКлиента);
	ДополнительныеПараметры.Вставить("НастройкиСоединения", ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами());
	ИнформацияОДоступномОбновлении = СлужебнаяИнформацияОДоступномОбновлении(
		ИнтернетПоддержкаПользователей.СлужебнаяИмяПрограммы(),
		ИнтернетПоддержкаПользователей.ВерсияКонфигурации(),
		Неопределено,
		Неопределено,
		"РабочееОбновление",
		ДополнительныеПараметры);
	
	СообщитьСостояние("Выполнено", , ИнформацияОДоступномОбновлении);
	
КонецПроцедуры

Процедура ЗагрузитьИУстановитьОбновленияВФоновомРежиме(Параметры) Экспорт
	
	Если Не ДоступноИспользованиеОбновленияПрограммы(Истина, Ложь) Тогда
		ВызватьИсключение НСтр("ru='Использование обновления программы недоступно в текущем режиме работы.';uk='Використання оновлення програми недоступно в поточному режимі роботи.'");
	КонецЕсли;
	
	Контекст = Параметры.КонтекстОбновления;
	Если Контекст = Неопределено Тогда
		Контекст = ПолучениеОбновленийПрограммыКлиентСервер.НовыйКонтекстПолученияИУстановкиОбновлений(Параметры);
	Иначе
		// Сброс состояния ошибки.
		Контекст.Вставить("ИмяОшибки"         , "");
		Контекст.Вставить("Сообщение"         , "");
		Контекст.Вставить("ИнформацияОбОшибке", "");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеАутентификации = Неопределено Тогда
		Контекст.Вставить("ИмяОшибки", "НеЗаполненыДанныеАутентификации");
		Контекст.Вставить("Сообщение", НСтр("ru='Не заполнены данные аутентификации.';uk='Не заповнені дані аутентифікації.'"));
		СообщитьСостояние("Ошибка", , Контекст);
		Возврат;
	КонецЕсли;
	
	ПолученоФайлов        = 0;
	ОбъемПолученныхФайлов = 0;
	
	// 1) Получение файла обновления платформы.
	Если Контекст.ОбновитьПлатформу Тогда
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Получение обновления платформы: версия %1; URL: %2';uk='Отримання оновлення платформи: версія %1; URL: %2'"),
				Контекст.ВерсияПлатформы,
				Контекст.URLФайлаОбновленияПлатформы));
		
		Если Не ПустаяСтрока(Контекст.КаталогДистрибутиваПлатформы) Тогда
			
			ПолученоФайлов        = 1;
			ОбъемПолученныхФайлов = ОбъемПолученныхФайлов + Контекст.РазмерОбновленияПлатформы;
			
			ЗаписатьИнформациюВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Обновление платформы уже было загружено ранее в %1';uk='Оновлення платформи вже було завантажено раніше в %1'"),
					Контекст.КаталогДистрибутиваПлатформы));
			
		Иначе
			
			КаталогУстановкиПлатформы = ПолучениеОбновленийПрограммыКлиентСервер.КаталогУстановкиПлатформы1СПредприятие(
				Контекст.ВерсияПлатформы);
			Если КаталогУстановкиПлатформы <> Неопределено Тогда
				
				// Платформа уже установлена.
				ПолученоФайлов        = 1;
				ОбъемПолученныхФайлов = ОбъемПолученныхФайлов + Контекст.РазмерОбновленияПлатформы;
				Контекст.Вставить("ОбновлениеПлатформыУстановлено", Истина);
				
				ЗаписатьИнформациюВЖурналРегистрации(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Версия %1 платформы уже установлена на компьютере.';uk='Версія %1 платформи вже встановлена на комп''ютері.'"),
						Контекст.ВерсияПлатформы));
				
			Иначе
				
				// Загрузить файл платформы.
				Контекст.ТекущееДействие =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Получение файла %1 из %2';uk='Отримання файлу %1 з %2'"),
						Строка(ПолученоФайлов + 1),
						Контекст.КоличествоФайлов);
				СообщитьСостояние("ПолучениеФайлов", , Контекст);
				
				ЗагрузитьОбновлениеПлатформы(Контекст, Параметры, ДанныеАутентификации);
				Если Не ПустаяСтрока(Контекст.ИмяОшибки) Тогда
					// Ошибка загрузки платформы.
					СообщитьСостояние("Ошибка", , Контекст);
					Возврат;
				Иначе
					ПолученоФайлов        = 1;
					ОбъемПолученныхФайлов = ОбъемПолученныхФайлов + Контекст.РазмерОбновленияПлатформы;
					Контекст.Прогресс = 85 * (ОбъемПолученныхФайлов / Контекст.ОбъемФайлов);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// 2) Получение файлов обновления конфигурации.
	Для каждого ТекОбновление Из Контекст.ОбновленияКонфигурации Цикл
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Получение обновления конфигурации.
                    |URL: %1;
                    |Размер: %2;
                    |Формат файла обновления: %3;
                    |Контрольная сумма файла обновления: %4;
                    |Каталог дистрибутива: %5;
                    |Выполнить обработчики обновления: %6;
                    |Имя файла обновления (cfu): %7.'
                    |;uk='Отримання оновлення конфігурації.
                    |URL: %1;
                    |Розмір: %2;
                    |Формат файлу оновлення: %3;
                    |Контрольна сума файлу оновлення: %4;
                    |Каталог дистрибутива: %5;
                    |Виконати обробники оновлення: %6;
                    |Ім''я файлу оновлення (cfu): %7.'"),
				ТекОбновление.URLФайлаОбновления,
				ТекОбновление.РазмерФайла,
				ТекОбновление.ФорматФайлаОбновления,
				ТекОбновление.КонтрольнаяСумма,
				ТекОбновление.КаталогДистрибутива,
				ТекОбновление.ПрименитьОбработчикиОбновления,
				ТекОбновление.ОтносительныйПутьCFUФайла));
		
		Если Не ПолучениеОбновленийПрограммыКлиентСервер.ОбновлениеКонфигурацииПолучено(ТекОбновление, Контекст) Тогда
			
			Контекст.ТекущееДействие =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Получение файла %1 из %2';uk='Отримання файлу %1 з %2'"),
					Строка(ПолученоФайлов + 1),
					Контекст.КоличествоФайлов);
			Контекст.Прогресс = 85 * (ОбъемПолученныхФайлов / Контекст.ОбъемФайлов);
			СообщитьСостояние("ПолучениеФайлов", , Контекст);
			
			ЗагрузитьОбновлениеКонфигурации(ТекОбновление, Контекст, Параметры, ДанныеАутентификации);
			Если Не ПустаяСтрока(Контекст.ИмяОшибки) Тогда
				СообщитьСостояние("Ошибка", , Контекст);
				Возврат;
			КонецЕсли;
			
		Иначе
			
			ЗаписатьИнформациюВЖурналРегистрации(
				НСтр("ru='Обновление конфигурации уже было получено ранее.';uk='Оновлення конфігурації вже було отримано раніше.'"));
			
		КонецЕсли;
		
		ПолученоФайлов        = ПолученоФайлов + 1;
		ОбъемПолученныхФайлов = ОбъемПолученныхФайлов + ТекОбновление.РазмерФайла;
		
	КонецЦикла;
	
	
	Контекст.ФайлыОбновленияПолучены = Истина;
	
	// 3) Установка платформы.
	Если Контекст.ОбновитьПлатформу И Не Контекст.ОбновлениеПлатформыУстановлено Тогда
		
		Контекст.Прогресс        = 85;
		Контекст.ТекущееДействие = НСтр("ru='Установка платформы';uk='Встановлення платформи'");
		СообщитьСостояние("УстановкаПлатформы", , Контекст);
		
		УстановкаОтменена = Ложь;
		УстановитьОбновлениеПлатформы(Контекст, Параметры, УстановкаОтменена);
		Если УстановкаОтменена Тогда
			
			СообщитьСостояние("УстановкаПлатформыОтменена", , Контекст);
			Возврат;
			
		ИначеЕсли Не ПустаяСтрока(Контекст.ИмяОшибки) Тогда
			
			// Ошибка установки платформы.
			СообщитьСостояние("Ошибка", , Контекст);
			Возврат;
			
		Иначе
			
			Контекст.ОбновлениеПлатформыУстановлено = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Контекст.Прогресс  = 100;
	Контекст.Завершено = Истина;
	СообщитьСостояние("Завершено", , Контекст);
	
КонецПроцедуры

Процедура ЗагрузитьОбновлениеПлатформы(Контекст, Параметры, ДанныеАутентификации)
	
	КаталогДляЗагрузки = ПолучениеОбновленийПрограммыКлиентСервер.КаталогДляРаботыСОбновлениямиПлатформы();
	КаталогХраненияДистрибутивов = Параметры.КаталогХраненияДистрибутивовПлатформы;
	
	Если КаталогХраненияДистрибутивов = Неопределено Тогда
		КаталогДистрибутива = КаталогДляЗагрузки
			+ ?(ПолучениеОбновленийПрограммыКлиентСервер.Это64РазрядноеПриложение(),
				"setup_64\",
				"setup\");
	Иначе
		Если Прав(КаталогХраненияДистрибутивов, 1) <> "\" Тогда
			КаталогХраненияДистрибутивов = КаталогХраненияДистрибутивов + "\";
		КонецЕсли;
		КаталогДистрибутива = КаталогХраненияДистрибутивов + Контекст.ВерсияПлатформы
			+ ?(ПолучениеОбновленийПрограммыКлиентСервер.Это64РазрядноеПриложение(), "_64", "")
			+ "\";
	КонецЕсли;
	
	// Проверить наличие загруженного дистрибутива.
	ДистрибутивЗагружен = ПолучениеОбновленийПрограммыКлиентСервер.КаталогСодержитДистрибутивПлатформы1СПредприятие(
		КаталогДистрибутива,
		Контекст.ВерсияПлатформы);
	
	// Загрузка дистрибутива.
	Если ДистрибутивЗагружен Тогда
		Контекст.КаталогДистрибутиваПлатформы = КаталогДистрибутива;
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Обновление платформы уже было загружено ранее в %1';uk='Оновлення платформи вже було завантажено раніше в %1'"),
				Контекст.КаталогДистрибутиваПлатформы));
		Возврат;
	КонецЕсли;
	
	Попытка
		СоздатьКаталог(КаталогДистрибутива);
	Исключение
		
		ИнфОшибка = ИнформацияОбОшибке();
		СообщениеЖурнала =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при создании каталога для сохранения дистрибутива (%1).';uk='Помилка при створенні каталогу для збереження дистрибутива (%1).'"),
				КаталогДистрибутива)
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнфОшибка);
		ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		
		Контекст.ИмяОшибки = "ОшибкаВзаимодействияСФайловойСистемой";
		Контекст.ИнформацияОбОшибке = СообщениеЖурнала;
		Контекст.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось создать каталог %1 для сохранения дистрибутива. %2';uk='Не вдалося створити каталог %1 для збереження дистрибутива. %2'"),
			КаталогДистрибутива,
			КраткоеПредставлениеОшибки(ИнфОшибка));
		Возврат;
		
	КонецПопытки;
	
	Попытка
		СоздатьКаталог(КаталогДляЗагрузки);
	Исключение
		
		ИнфОшибка = ИнформацияОбОшибке();
		СообщениеЖурнала =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при создании каталога для загрузки дистрибутива (%1).';uk='Помилка при створенні каталогу для завантаження дистрибутива (%1).'"),
				КаталогДляЗагрузки)
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнфОшибка);
		ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		
		Контекст.ИмяОшибки = "ОшибкаВзаимодействияСФайловойСистемой";
		Контекст.ИнформацияОбОшибке = СообщениеЖурнала;
		Контекст.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось создать каталог %1 для сохранения дистрибутива. %2';uk='Не вдалося створити каталог %1 для збереження дистрибутива. %2'"),
			КаталогДляЗагрузки,
			КраткоеПредставлениеОшибки(ИнфОшибка));
		Возврат;
		
	КонецПопытки;
	
	// Загрузка файла.
	ПутьПолученногоФайла = КаталогДляЗагрузки + "setup.zip";
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Получение файла обновления платформы: %1';uk='Отримання файлу оновлення платформи: %1'"),
			ПутьПолученногоФайла));
	
	ИнтернетПоддержкаПользователейКлиентСервер.ПроверитьURL(Контекст.URLФайлаОбновленияПлатформы);
	ДопПараметры = Новый Структура("ИмяФайлаОтвета, Таймаут", ПутьПолученногоФайла, 43200);
	РезультатПолучения = ИнтернетПоддержкаПользователейКлиентСервер.ЗагрузитьСодержимоеИзИнтернет(
		Контекст.URLФайлаОбновленияПлатформы,
		ДанныеАутентификации.Логин,
		ДанныеАутентификации.Пароль,
		ДопПараметры);
	
	Если Не ПустаяСтрока(РезультатПолучения.КодОшибки) Тогда
		
		СообщениеЖурнала =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при получении файла дистрибутива платформы (%1). %2';uk='Помилка при отриманні файлу дистрибутива платформи (%1). %2'"),
				Контекст.URLФайлаОбновленияПлатформы,
				РезультатПолучения.ИнформацияОбОшибке);
		ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		
		Контекст.ИмяОшибки = РезультатПолучения.КодОшибки;
		Контекст.ИнформацияОбОшибке = СообщениеЖурнала;
		Контекст.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Ошибка при получении файла дистрибутива. %1';uk='Помилка при отриманні файлу дистрибутива. %1'"),
			РезультатПолучения.СообщениеОбОшибке);
		Если ПолучениеОбновленийПрограммыКлиентСервер.ФайлСуществует(ПутьПолученногоФайла, Ложь) Тогда
			Попытка
				УдалитьФайлы(ПутьПолученногоФайла);
			Исключение
				ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Файл обновления платформы успешно получен: %1';uk='Файл оновлення платформи успішно отриманий: %1'"),
			ПутьПолученногоФайла));
	
	// Извлечение файлов.
	Попытка
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Извлечение дистрибутива платформы в %1';uk='Витягування дистрибутива платформи з %1'"),
				КаталогДистрибутива));
		ЧтениеZIP = Новый ЧтениеZipФайла(ПутьПолученногоФайла);
		ЧтениеZIP.ИзвлечьВсе(КаталогДистрибутива, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	Исключение
		
		СообщениеЖурнала =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при извлечении файлов архива (%1) в каталог %2.';uk='Помилка при витяганні файлів архіву (%1) у каталог %2.'"),
				ПутьПолученногоФайла,
				КаталогДистрибутива)
			+ Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		
		Контекст.ИмяОшибки          = "ОшибкаИзвлеченияДанныхИзФайла";
		Контекст.ИнформацияОбОшибке = СообщениеЖурнала;
		Контекст.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось извлечь файлы дистрибутива. %1';uk='Не вдалося витягти файли дистрибутива. %1'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
		
	КонецПопытки;
	
	ЧтениеZIP.Закрыть();
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Дистрибутив платформы успешно сохранен в %1';uk='Дистрибутив платформи успішно збережений в %1'"),
			КаталогДистрибутива));
	
	СохранитьКаталогПоследнегоПолученногоДистрибутиваПлатформы(КаталогДистрибутива);
	Контекст.КаталогДистрибутиваПлатформы = КаталогДистрибутива;
	
	Если ПолучениеОбновленийПрограммыКлиентСервер.ФайлСуществует(ПутьПолученногоФайла, Ложь) Тогда
		Попытка
			УдалитьФайлы(ПутьПолученногоФайла);
		Исключение
			ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОбновлениеПлатформы(Контекст, Параметры, УстановкаОтменена)
	
	// Подготовка протокола установки.
	КаталогДляЗагрузки  = ПолучениеОбновленийПрограммыКлиентСервер.КаталогДляРаботыСОбновлениямиПлатформы();
	КаталогДистрибутива = Контекст.КаталогДистрибутиваПлатформы;
	
	ПутьФайлаПротокола = КаталогДляЗагрузки + "installlog.txt";
	Контекст.Вставить("ПутьФайлаПротокола", ПутьФайлаПротокола);
	
	Если ПолучениеОбновленийПрограммыКлиентСервер.ФайлСуществует(ПутьФайлаПротокола) Тогда
		Попытка
			УдалитьФайлы(ПутьФайлаПротокола);
		Исключение
			ЗаписатьОшибкуВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка при удалении файла протокола (%1). %2';uk='Помилка при видаленні файлу протоколу (%1). %2'"),
					ПутьФайлаПротокола,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		КонецПопытки;
	КонецЕсли;
	
	
	// Запуск установки.
	КодВозврата = 0;
	ПутьФайлаПрограммыУстановки = КаталогДистрибутива + "setup.exe";
	Если Не ПолучениеОбновленийПрограммыКлиентСервер.ФайлСуществует(ПутьФайлаПрограммыУстановки) Тогда
		
		СообщениеЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Загружен некорректный дистрибутив платформы. Отсутствует файл setup.exe (%1).';uk='Завантажений некоректний дистрибутив платформи. Відсутній файл setup.exe (%1).'"),
			ПутьФайлаПрограммыУстановки);
		ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		
		Контекст.ИмяОшибки = "НекорректныйДистрибутивПлатформы";
		Контекст.ИнформацияОбОшибке = СообщениеЖурнала;
		Контекст.Сообщение = НСтр("ru='Загружен некорректный дистрибутив платформы. Отсутствует файл setup.exe.';uk='Звантажено некоректний дистрибутив платформи. Відсутній файл setup.exe.'");
		Возврат;
		
	КонецЕсли;
	
	Попытка
		
		ПутьФайлаПрограммыУстановки = """" + КаталогДистрибутива + "setup.exe""";
		КомандаЗапуска = ПутьФайлаПрограммыУстановки + " "
			+ ?(Параметры.РежимУстановкиПлатформы = 0, " /S ", "") // "Тихий" или полный режим
			+ "/debuglog installlog.txt"; // Протокол установки
		
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Установка новой версии платформы (%1). %2';uk='Встановлення нової версії платформи (%1). %2'"),
				Контекст.ВерсияПлатформы,
				КомандаЗапуска));
		
		ПараметрыЗапуска = ОбщегоНазначенияКлиентСервер.ПараметрыЗапускаПрограммы();
		ПараметрыЗапуска.ТекущийКаталог      = КаталогДляЗагрузки;
		ПараметрыЗапуска.ДождатьсяЗавершения = Истина;
		
		РезультатЗапуска = ОбщегоНазначенияКлиентСервер.ЗапуститьПрограмму(КомандаЗапуска, ПараметрыЗапуска);
		КодВозврата      = РезультатЗапуска.КодВозврата;
		
	Исключение
		
		СообщениеЖурнала =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при запуске программы установки платформы (%1). %2';uk='Помилка при запуску програми установки платформи (%1). %2'"),
				КомандаЗапуска,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		
		Контекст.ИмяОшибки = "ОшибкаУстановкиПлатформы";
		Контекст.ИнформацияОбОшибке = СообщениеЖурнала;
		Контекст.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Ошибка при запуске программы установки платформы. %1';uk='Помилка при запуску програми установки платформи. %1'"),
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
		
	КонецПопытки;
	
	Контекст.КодВозвратаПрограммыУстановки = КодВозврата;
	
	Если КодВозврата = 0 Тогда
		
		ЗаписатьИнформациюВЖурналРегистрации(НСтр("ru='Новая версия платформы успешно установлена.';uk='Нова версія платформи успішно встановлена.'"));
		
	Иначе
		
		Если КодВозврата = 1602 Или КодВозврата = 1 Тогда
			
			// Отменено пользователем.
			УстановкаОтменена = Истина;
			
		Иначе
			
			// Обработка прочих кодов возврата.
			СообщениеЖурнала =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Установка платформы завершена с ошибкой.
                        |Версия %1;
                        |Код возврата: %2;
                        |Команда: %3'
                        |;uk='Встановлення платформи завершено з помилкою.
                        |Версія %1;
                        |Код повернення: %2;
                        |Команда: %3'"),
					Контекст.ВерсияПлатформы,
					Строка(КодВозврата),
					КомандаЗапуска);
			ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
			
			ШаблонСообщенияПользователю =
				НСтр("ru='<body>При установке новой версии платформы произошла ошибка.
                    |<br />Код возврата: %1.'
                    |;uk='<body>При встаноленні нової версії платформи сталася помилка.
                    |<br />Код повернення: %1.'");
			
			Если ПолучениеОбновленийПрограммыКлиентСервер.ФайлСуществует(ПутьФайлаПротокола) Тогда
				ШаблонСообщенияПользователю = ШаблонСообщенияПользователю + Символы.ПС
					+ НСтр("ru='<br />Техническая информация содержится в <a href=""open:debuglog"">протоколе установки</a>.';uk='<br />Технічна інформація міститься в <a href=""open:debuglog"">протоколі установки</a>.'");
			КонецЕсли;
			
			Если Параметры.РежимУстановкиПлатформы = 0
				И ПолучениеОбновленийПрограммыКлиентСервер.ЭтоКодВозвратаОграниченияСистемныхПолитик(КодВозврата) Тогда
				// При ошибке ограничений системных политик установки в тихом режиме
				// предложить пользователю выполнить установку в полном интерактивном режиме.
				ШаблонСообщенияПользователю = ШаблонСообщенияПользователю + Символы.ПС
					+ НСтр("ru='<br /><br /><p>Данная ошибка связана с ограничениями системных политик безопасности.
                        |<br />Рекомендуется <a href=""action:retruupdateplatfom"">установить платформу с ручными настройками</a>, либо запустить
                        |<br />программу от имени администратора.</p>'
                        |;uk='<br /><br /><p>Ця помилка пов''язана з обмеженнями системних політик безпеки.
                        |<br />Рекомендується <a href=""action:retruupdateplatfom"">встановити платформу з ручними налаштуваннями</a> або запустити
                        |<br />програму від імені адміністратора.</p>'");
			КонецЕсли;
			
			ШаблонСообщенияПользователю = ШаблонСообщенияПользователю + Символы.ПС
				+ НСтр("ru='<br /><br />При возникновении проблем напишите в <a href=""mailto:webits-info@bas-soft.eu"">техподдержку</a>.</body>';uk='<br /><br />При виникненні проблем напишіть у <a href=""mailto:webits-info@bas-soft.eu"">техпідтримку</a>.</body>'");
			
			Контекст.ИмяОшибки = "ОшибкаУстановкиПлатформы";
			Контекст.ИнформацияОбОшибке = СообщениеЖурнала;
			Контекст.Сообщение = ИнтернетПоддержкаПользователейКлиентСервер.ПодставитьДомен(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщенияПользователю,
					Строка(КодВозврата)),
				ИнтернетПоддержкаПользователей.НастройкиСоединенияССерверами().ДоменРасположенияСерверовИПП);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьОбновлениеКонфигурации(Обновление, Контекст, Параметры, ДанныеАутентификации)
	
	// Создание каталогов.
	ПолучениеОбновленийПрограммыКлиентСервер.СоздатьКаталогиДляПолученияОбновления(Обновление, Контекст);
	
	Если Не ПустаяСтрока(Контекст.ИмяОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	// Загрузка файла.
	ДопПараметры = Новый Структура("ИмяФайлаОтвета, Таймаут", Обновление.ИмяПолученногоФайла, 43200);
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Загрузка файла обновления конфигурации %1';uk='Завантаження файлу оновлення конфігурації %1'"),
			Обновление.ИмяПолученногоФайла));
	
	ИнтернетПоддержкаПользователейКлиентСервер.ПроверитьURL(Обновление.URLФайлаОбновления);
	РезультатПолучения = ИнтернетПоддержкаПользователейКлиентСервер.ЗагрузитьСодержимоеИзИнтернет(
		Обновление.URLФайлаОбновления,
		ДанныеАутентификации.Логин,
		ДанныеАутентификации.Пароль,
		ДопПараметры);
	
	Если Не ПустаяСтрока(РезультатПолучения.КодОшибки) Тогда
		
		СообщениеЖурнала =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка при получении файла дистрибутива конфигурации (%1). %2';uk='Помилка при отриманні файлу дистрибутива конфігурації (%1). %2'"),
				Обновление.URLФайлаОбновления,
				РезультатПолучения.ИнформацияОбОшибке);
		ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		
		Контекст.ИмяОшибки = РезультатПолучения.КодОшибки;
		Контекст.ИнформацияОбОшибке = СообщениеЖурнала;
		Контекст.Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Ошибка при получении файла дистрибутива конфигурации. %1';uk='Помилка при отриманні файлу дистрибутива конфігурації. %1'"),
			РезультатПолучения.СообщениеОбОшибке);
		Если ПолучениеОбновленийПрограммыКлиентСервер.ФайлСуществует(Обновление.ИмяПолученногоФайла, Ложь) Тогда
			Попытка
				УдалитьФайлы(Обновление.ИмяПолученногоФайла);
			Исключение
				ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(НСтр("ru='Файл обновления успешно загружен.';uk='Файл оновлення успішно завантажений.'"));
	ПолучениеОбновленийПрограммыКлиентСервер.ЗавершитьПолучениеОбновления(Обновление, Контекст);
	Обновление.Получено = Истина;
	
КонецПроцедуры

Процедура СообщитьСостояние(
	КодСостояния,
	Сообщение = "",
	ДопПараметры = Неопределено,
	СообщениеЖурналаРегистрации = Неопределено)
	
	ОписательСостояния = Новый Структура("КодСостояния, ДопПараметры", КодСостояния, ДопПараметры);
	Если СообщениеЖурналаРегистрации <> Неопределено Тогда
		ОписательСостояния.Вставить("СообщениеЖурналаРегистрации", СообщениеЖурналаРегистрации);
	КонецЕсли;
	
	ДлительныеОперации.СообщитьПрогресс(
		,
		Сообщение,
		ОписательСостояния);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Персональные настройки пользователя

Функция НастройкиАвтоматическогоОбновления() Экспорт
	
	Результат = ПолучениеОбновленийПрограммыКлиентСервер.НовыйНастройкиАвтоматическогоОбновления();
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ИнтеррнетПоддержка",
		"ПолучениеОбновленийПрограммы");
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Результат, Настройки);
		Если Настройки.Свойство("СпособАвтоматическойПроверки") Тогда
			Результат.РежимАвтоматическойПроверкиНаличияОбновленийПрограммы = Настройки.СпособАвтоматическойПроверки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьНастройкиАвтоматическогоОбновления(Настройки) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ИнтеррнетПоддержка",
		"ПолучениеОбновленийПрограммы",
		Настройки);
	
КонецПроцедуры

Процедура СохранитьКаталогПоследнегоПолученногоДистрибутиваПлатформы(Каталог)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ИнтеррнетПоддержка",
		"КаталогДистрибутива",
		Каталог);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

Процедура ЗаписатьОшибкуВЖурналРегистрации(СообщениеОбОшибке) Экспорт
	
	ЗаписьЖурналаРегистрации(
		ПолучениеОбновленийПрограммыКлиентСервер.ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		СообщениеОбОшибке);
	
КонецПроцедуры

Процедура ЗаписатьИнформациюВЖурналРегистрации(Сообщение) Экспорт
	
	ЗаписьЖурналаРегистрации(
		ПолучениеОбновленийПрограммыКлиентСервер.ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		Сообщение);
	
КонецПроцедуры

Функция ДополнительныеПараметрыЗапросаКСервисуОбновлений(ПараметрыКлиента = Неопределено) Экспорт
	
	Результат = ИнтернетПоддержкаПользователей.ДополнительныеПараметрыВызоваОперацииСервиса();
	Если ПолучениеОбновленийПрограммыКлиентСервер.Это64РазрядноеПриложение() Тогда
		// Сообщить о поддержке платформы 64 только в случае, если конфигурация может
		// определить, что текущее приложение - 64-разрядное.
		Результат.Вставить("platform64Supported", "true");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьОтключенноеДело(ТекущиеДела, ИдентификаторДела, Разделы)
	
	Для Каждого Раздел Из Разделы Цикл
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = ИдентификаторДела;
		Дело.ЕстьДела       = Ложь;
		Дело.Важное         = Ложь;
		Дело.Представление  = НСтр("ru='Доступно обновление программы';uk='Доступно оновлення програми'");
		Дело.Форма          = "Обработка.ОбновлениеПрограммы.Форма.Форма";
		Дело.Владелец       = Раздел;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление данных информационной базы.

// Преобразует пользовательские настройки подсистемы
// "Получение обновлений программы".
//
Процедура ОбновлениеИнформационнойБазы_ОбновитьНастройкиПолученияОбновлений_2_1_8_1() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		// Не используется при работе в модели сервиса.
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Перенос настроек проверки наличия обновлений
	// из СтандартныеПодсистемы.ОбновлениеКонфигурации,
	// преобразование существующих настроек БИП.
	
	ТипСтруктура = Тип("Структура");
	СписокПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого ТекПользователь Из СписокПользователей Цикл
		
		ИмяПользователя = ТекПользователь.Имя;
		
		НастройкиБИП = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ИнтеррнетПоддержка",
			"ПолучениеОбновленийПрограммы",
			,
			,
			ИмяПользователя);
		
		Если ТипЗнч(НастройкиБИП) = ТипСтруктура
			И НастройкиБИП.Свойство("СпособАвтоматическойПроверки") Тогда
			НастройкиБИП.Вставить("РежимАвтоматическойПроверкиНаличияОбновленийПрограммы",
				НастройкиБИП.СпособАвтоматическойПроверки);
			НастройкиБИП.Удалить("СпособАвтоматическойПроверки");
		КонецЕсли;
		
		НастройкиБСП = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ОбновлениеКонфигурации",
			"НастройкиОбновленияКонфигурации",
			,
			,
			ИмяПользователя);
		
		Если ТипЗнч(НастройкиБСП) = ТипСтруктура
			И НастройкиБСП.Свойство("ПроверятьНаличиеОбновленияПриЗапуске")
			И НастройкиБСП.ПроверятьНаличиеОбновленияПриЗапуске <> 0 Тогда
			
			Если ТипЗнч(НастройкиБИП) <> ТипСтруктура Тогда
				НастройкиБИП = ПолучениеОбновленийПрограммыКлиентСервер.НовыйНастройкиАвтоматическогоОбновления();
			КонецЕсли;
			
			НастройкиБИП.РежимАвтоматическойПроверкиНаличияОбновленийПрограммы =
				НастройкиБСП.ПроверятьНаличиеОбновленияПриЗапуске;
			НастройкиБИП.Расписание =
				НастройкиБСП.РасписаниеПроверкиНаличияОбновления;
			
		КонецЕсли;
		
		Если ТипЗнч(НастройкиБИП) = ТипСтруктура Тогда
			// Если настройки были изменены, сохранить настройки.
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
				"ИнтеррнетПоддержка",
				"ПолучениеОбновленийПрограммы",
				НастройкиБИП,
				,
				ИмяПользователя);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
