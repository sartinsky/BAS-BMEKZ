////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СформироватьДвиженияПлановыхНачислений(РегистраторОбъект, Движения, СтруктураДанных, ЗаполнятьНаборЗаписей = Истина) Экспорт
	
	Если СтруктураДанных.ДанныеОПлановыхНачислениях = Неопределено
		ИЛИ СтруктураДанных.ДанныеОПлановыхНачислениях.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Движения.ПлановыеНачисления.Записывать = Истина;

	Если ЗаполнятьНаборЗаписей Тогда
		СтруктураДанных.ДанныеОПлановыхНачислениях.Колонки.ДатаСобытия.Имя = "Период";
		Движения.ПлановыеНачисления.Загрузить(СтруктураДанных.ДанныеОПлановыхНачислениях);
	КонецЕсли; 
	
	Если РегистраторОбъект.ДополнительныеСвойства.Свойство("ОтключитьПроверкуДатыЗапретаИзменения")
		И РегистраторОбъект.ДополнительныеСвойства.ОтключитьПроверкуДатыЗапретаИзменения Тогда
		
		Движения.ПлановыеНачисления.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПлановыхУдержаний(РегистраторОбъект, Движения, СтруктураДанных, ЗаполнятьНаборЗаписей = Истина) Экспорт
	
	Если СтруктураДанных.ДанныеОПлановыхУдержаниях = Неопределено
		ИЛИ СтруктураДанных.ДанныеОПлановыхУдержаниях.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Движения.ПлановыеУдержания.Записывать = Истина;
	
	Если ЗаполнятьНаборЗаписей Тогда
		СтруктураДанных.ДанныеОПлановыхУдержаниях.Колонки.ДатаСобытия.Имя = "Период";
		Движения.ПлановыеУдержания.Загрузить(СтруктураДанных.ДанныеОПлановыхУдержаниях);
	КонецЕсли; 
	
	Если РегистраторОбъект.ДополнительныеСвойства.Свойство("ОтключитьПроверкуДатыЗапретаИзменения")
		И РегистраторОбъект.ДополнительныеСвойства.ОтключитьПроверкуДатыЗапретаИзменения Тогда
		
		Движения.ПлановыеУдержания.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияЕСВСотрудников(РегистраторОбъект, Движения, СтруктураДанных, ЗаполнятьНаборЗаписей = Истина) Экспорт
	
	Если СтруктураДанных.ДанныеОЕСВСотрудников = Неопределено
		ИЛИ СтруктураДанных.ДанныеОЕСВСотрудников.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Движения.ЕСВСотрудников.Записывать = Истина;
	
	Если ЗаполнятьНаборЗаписей Тогда
		СтруктураДанных.ДанныеОЕСВСотрудников.Колонки.ДатаСобытия.Имя = "Период";
		Движения.ЕСВСотрудников.Загрузить(СтруктураДанных.ДанныеОЕСВСотрудников);
	КонецЕсли; 
	
	Если РегистраторОбъект.ДополнительныеСвойства.Свойство("ОтключитьПроверкуДатыЗапретаИзменения")
		И РегистраторОбъект.ДополнительныеСвойства.ОтключитьПроверкуДатыЗапретаИзменения Тогда
		
		Движения.ЕСВСотрудников.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПараметровРасчетаИндексации(РегистраторОбъект, Движения, СтруктураДанных, ЗаполнятьНаборЗаписей = Истина) Экспорт
	
	Если СтруктураДанных.ДанныеОбИндексации = Неопределено
		ИЛИ СтруктураДанных.ДанныеОбИндексации.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Движения.ПараметрыРасчетаИндексации.Записывать = Истина;
	
	Если ЗаполнятьНаборЗаписей Тогда
		СтруктураДанных.ДанныеОбИндексации.Колонки.ДатаСобытия.Имя = "Период";
		Для Каждого СтрокаДанных Из СтруктураДанных.ДанныеОбИндексации Цикл
			Движения.ПараметрыРасчетаИндексации.Загрузить(СтруктураДанных.ДанныеОбИндексации);
		КонецЦикла;
		
	КонецЕсли; 
	
	Если РегистраторОбъект.ДополнительныеСвойства.Свойство("ОтключитьПроверкуДатыЗапретаИзменения")
		И РегистраторОбъект.ДополнительныеСвойства.ОтключитьПроверкуДатыЗапретаИзменения Тогда
		
		Движения.ДанныеОбИндексации.ДополнительныеСвойства.Вставить("ОтключитьПроверкуДатыЗапретаИзменения", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу значений, содержащую данные для начисления зарплаты
//
// Параметры:
//	см. РасчетЗарплаты.РезультатНачисленияРасчетаЗарплаты
//	МесяцНачисления - в базовой реализации начисления получаются 
//	только за месяц в целом, а не за произвольный период
//
Функция РезультатНачисленияРасчетаЗарплаты(Организация, ПредварительныйРасчет, МесяцНачисления, ОкончаниеПериода, Документ,  Подразделение = НеОпределено, Сотрудники = НеОпределено) Экспорт
	
	РезультатЗаполнения = Новый Структура();
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	
	//НАЧИСЛЕНИЯ
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		// Получаем сотрудников, работавших в организации из подсистемы КадровыйУчет
		ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудниковОрганизаций.Организация 					= Организация;
		ПараметрыПолученияСотрудниковОрганизаций.Подразделение 					= Подразделение;
		ПараметрыПолученияСотрудниковОрганизаций.ОтбиратьПоГоловнойОрганизации 	= Ложь;
		ПараметрыПолученияСотрудниковОрганизаций.ОтбиратьПоПодразделениюОсновногоМестаРаботы 	= Истина;
		ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода 					= МесяцНачисления;
		ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода 				= КонецМесяца(МесяцНачисления);
		ПараметрыПолученияСотрудниковОрганизаций.КадровыеДанные					= "ГоловнаяОрганизация,Организация,Подразделение,Должность,ВидСобытия,ДатаУвольнения";
		
		ПараметрыПолученияСотрудниковОрганизаций.Интервалы 	= Истина;
		
		ПараметрыПолученияСотрудниковОрганизаций.СписокФизическихЛиц			= Сотрудники;
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);

		
		
		Запрос.УстановитьПараметр("НачалоПериода",МесяцНачисления);
		Запрос.УстановитьПараметр("ОкончаниеПериода",КонецМесяца(МесяцНачисления));
		Запрос.УстановитьПараметр("Организация",Организация);
		Запрос.УстановитьПараметр("Документ",Документ);
		Запрос.УстановитьПараметр("ПредварительныйРасчет",ПредварительныйРасчет);
		Запрос.УстановитьПараметр("ОкончаниеПериодаПредварительныйРасчет",ОкончаниеПериода);
		Запрос.УстановитьПараметр("НачалоСледующегоПериода",ДобавитьМесяц(МесяцНачисления,1));
		Запрос.УстановитьПараметр("СпособыРасчетаЗависимыеОтВремени",РасчетЗарплаты.СпособыРасчетаЗависимыеОтВремени());
		
		//Получаем временную таблицу, содержащую изменения плановых начислений.
		//Нас интересуют только движения внутри месяца, и только для зависящих от времени.
		//Приемы и увольнения отбрасываем - по ним и так есть обязательно кадровые изменения.
		Запрос.Текст ="ВЫБРАТЬ РАЗЛИЧНЫЕ
			          |	СотрудникиОрганизации.Сотрудник
					  |ПОМЕСТИТЬ ВТСотрудникиОрганизацииФильтр
					  |ИЗ
			          |	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
					  |ГДЕ
					  | НЕ &ПредварительныйРасчет
					  | ИЛИ СотрудникиОрганизации.ДатаУвольнения = ДАТАВРЕМЯ(1,1,1)
					  | ИЛИ СотрудникиОрганизации.ДатаУвольнения >= &ОкончаниеПериодаПредварительныйРасчет
					  |;
					  |
					  |////////////////////////////////////////////////////////////////////////////////
					  |ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		              |	ПлановыеНачисления.Сотрудник,
		              |	ПлановыеНачисления.Период
					  |ПОМЕСТИТЬ ВТНачисленияДвиженияСотрудников
					  |ИЗ
		              |	РегистрСведений.ПлановыеНачисления КАК ПлановыеНачисления
					  | ВНУТРЕННЕЕ СОЕДИНЕНИЕ
					  | ВТСотрудникиОрганизацииФильтр КАК СотрудникиОрганизацииФильтр
					  | ПО ПлановыеНачисления.Сотрудник = СотрудникиОрганизацииФильтр.Сотрудник
					  |  И ПлановыеНачисления.Период < &ОкончаниеПериода
					  |	 И ПлановыеНачисления.Период > &НачалоПериода
					  |  И ПлановыеНачисления.Начисление.СпособРасчета В (&СпособыРасчетаЗависимыеОтВремени)
					  |  И НЕ (ПлановыеНачисления.Регистратор ССЫЛКА Документ.Увольнение)
					  |  И НЕ (ПлановыеНачисления.Регистратор ССЫЛКА Документ.ПриемНаРаботу)
					  | ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
					  | ПО ПлановыеНачисления.Сотрудник = СотрудникиОрганизации.Сотрудник
					  |  И ПлановыеНачисления.Период = СотрудникиОрганизации.Период
					  | ГДЕ (СотрудникиОрганизации.Сотрудник ЕСТЬ NULL)
					  |
					  |";
		Запрос.Выполнить();
		
		//Соединим кадровые изменения и изменения начислений в одну таблицу
		Запрос.Текст ="ВЫБРАТЬ
						|	НачисленияДвиженияСотрудников.Период КАК ДатаИзменения,
						|	НачисленияДвиженияСотрудников.Сотрудник КАК Сотрудник,
						|	МАКСИМУМ(СотрудникиОрганизации.Период) КАК Период
						|ПОМЕСТИТЬ ВТМаксимальныеПериоды
						|ИЗ
						|	ВТНачисленияДвиженияСотрудников КАК НачисленияДвиженияСотрудников
						|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
						|		ПО СотрудникиОрганизации.Период < НачисленияДвиженияСотрудников.Период
						|			И СотрудникиОрганизации.Сотрудник = НачисленияДвиженияСотрудников.Сотрудник
						|СГРУППИРОВАТЬ ПО
						|	НачисленияДвиженияСотрудников.Период,
						|	НачисленияДвиженияСотрудников.Сотрудник
						|;
                        |
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	МаксимальныеПериоды.ДатаИзменения КАК Период,
						|	СотрудникиОрганизации.Организация,
						|	СотрудникиОрганизации.Сотрудник,
						|	СотрудникиОрганизации.Подразделение,
						|	СотрудникиОрганизации.Должность,
						|	СотрудникиОрганизации.ВидСобытия,
						|	СотрудникиОрганизации.ФизическоеЛицо
						|ПОМЕСТИТЬ ВТСотрудникиОрганизацииПериоды
						|ИЗ
						|	ВТМаксимальныеПериоды КАК МаксимальныеПериоды
						|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
						|		ПО СотрудникиОрганизации.Период = МаксимальныеПериоды.Период
						|			И СотрудникиОрганизации.Сотрудник = МаксимальныеПериоды.Сотрудник
						|ГДЕ НЕ (СотрудникиОрганизации.Сотрудник ЕСТЬ NULL)
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ
						|	ВЫБОР КОГДА СотрудникиОрганизации.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
						|		ТОГДА СотрудникиОрганизации.Период
						|		ИНАЧЕ ДОБАВИТЬКДАТЕ(СотрудникиОрганизации.Период, ДЕНЬ, 1)
						|	КОНЕЦ КАК Период,
						|	СотрудникиОрганизации.Организация,
						|	СотрудникиОрганизации.Сотрудник,
						|	СотрудникиОрганизации.Подразделение,
						|	СотрудникиОрганизации.Должность,
						|	СотрудникиОрганизации.ВидСобытия,
						|	СотрудникиОрганизации.ФизическоеЛицо
						|ИЗ
						|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|ВЫБРАТЬ
						|	СотрудникиОрганизации.Период,
						|	СотрудникиОрганизации.Организация,
						|	СотрудникиОрганизации.Сотрудник,
						|	СотрудникиОрганизации.Подразделение,
						|	СотрудникиОрганизации.Должность,
						|	СотрудникиОрганизации.ВидСобытия,
						|	СотрудникиОрганизации.ФизическоеЛицо
						|ИЗ
						|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
						|ГДЕ
						|	СотрудникиОрганизации.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
						|   И СотрудникиОрганизации.Период = НАЧАЛОПЕРИОДА(СотрудникиОрганизации.Период, МЕСЯЦ)
						|;
                        |
						|////////////////////////////////////////////////////////////////////////////////
						|УНИЧТОЖИТЬ ВТМаксимальныеПериоды;
						|////////////////////////////////////////////////////////////////////////////////
						|";
		Запрос.Выполнить();

		
		//Получаем временную таблицу, содержащую интервалы для сотрудников 
		Запрос.Текст ="ВЫБРАТЬ
						|	СотрудникиОрганизацииНачало.Период КАК ДатаНачала,
						|	СотрудникиОрганизацииНачало.Сотрудник КАК Сотрудник,
						|	МИНИМУМ(СотрудникиОрганизацииОкончание.Период) КАК Период
						|ПОМЕСТИТЬ ВТМинимальныеПериоды
						|ИЗ
						|	ВТСотрудникиОрганизацииПериоды КАК СотрудникиОрганизацииНачало
						|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизацииПериоды КАК СотрудникиОрганизацииОкончание
						|		ПО СотрудникиОрганизацииНачало.Период < СотрудникиОрганизацииОкончание.Период
						|			И (СотрудникиОрганизацииНачало.Сотрудник = СотрудникиОрганизацииОкончание.Сотрудник)
						|СГРУППИРОВАТЬ ПО
						|	СотрудникиОрганизацииНачало.Период,
						|	СотрудникиОрганизацииНачало.Сотрудник
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|   СотрудникиОрганизацииНачало.Период КАК ДатаНачала,
						|	СотрудникиОрганизацииНачало.*,
						|	ЕСТЬNULL(МинимальныеПериоды.Период, &НачалоСледующегоПериода) КАК ДатаОкончания
						|ПОМЕСТИТЬ ВТСотрудникиОрганизацииИнтервалами
						|ИЗ
						|	ВТСотрудникиОрганизацииПериоды КАК СотрудникиОрганизацииНачало
						|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМинимальныеПериоды КАК МинимальныеПериоды
						|		ПО (СотрудникиОрганизацииНачало.Период = МинимальныеПериоды.ДатаНачала)
						|			И (СотрудникиОрганизацииНачало.Сотрудник = МинимальныеПериоды.Сотрудник)
						|ГДЕ
						|	СотрудникиОрганизацииНачало.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
						|   ИЛИ СотрудникиОрганизацииНачало.Период = НАЧАЛОПЕРИОДА(СотрудникиОрганизацииНачало.Период, МЕСЯЦ)
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ
						|	ВЫБОР КОГДА СотрудникиОрганизацииНачало.ВидСобытия <> ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
						|		ТОГДА СотрудникиОрганизацииНачало.Период
						|		ИНАЧЕ ДОБАВИТЬКДАТЕ(СотрудникиОрганизацииНачало.Период, ДЕНЬ, -1)
						|	КОНЕЦ КАК Период,						
						|	СотрудникиОрганизацииНачало.*
						|ПОМЕСТИТЬ ВТСотрудникиОрганизацииИнтерваламиДляСреза
						|ИЗ
						|	ВТСотрудникиОрганизацииИнтервалами КАК СотрудникиОрганизацииНачало
						|;						
                        |
						|////////////////////////////////////////////////////////////////////////////////
						|УНИЧТОЖИТЬ ВТМинимальныеПериоды;
						|////////////////////////////////////////////////////////////////////////////////
						|";
		Запрос.Выполнить();

		// На каждую дату начала добавляем срез последних зависящих от времени начислений
		ПоляОтбора = Новый Массив;	
		ПоляОтбора.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение", "Начисление.СпособРасчета", "В", РасчетЗарплаты.СпособыРасчетаЗависимыеОтВремени()));
		
		ОписательВременныхТаблиц = ЗарплатаКадры.ПараметрыДляСоздатьПоВременнойТаблицеВТИмяРегистра(
			Запрос.МенеджерВременныхТаблиц,
			"ВТСотрудникиОрганизацииИнтерваламиДляСреза",
			"Сотрудник,Период");
		
		ЗарплатаКадры.СоздатьПоВременнойТаблицеВТИмяРегистраСрезПоследних(ОписательВременныхТаблиц, Истина, "ПлановыеНачисления",ПоляОтбора);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Организация,
		|	КадровыеДанныеСотрудников.Сотрудник,
		|	КадровыеДанныеСотрудников.Подразделение,
		|	КадровыеДанныеСотрудников.Должность,
		|	КадровыеДанныеСотрудников.ФизическоеЛицо,
		|	КадровыеДанныеСотрудников.ДатаНачала,
		|	ДОБАВИТЬКДАТЕ(КадровыеДанныеСотрудников.ДатаОкончания, ДЕНЬ, -1) КАК ДатаОкончания,
		|	ПлановыеНачисления.Начисление КАК Начисление,
		|	ПлановыеНачисления.Размер КАК Размер
		|ПОМЕСТИТЬ ВТДанныеОсновныхНачисленийПоСотрудникам
		|ИЗ
		|	ВТПлановыеНачисленияСрезПоследних КАК ПлановыеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизацииИнтерваламиДляСреза КАК КадровыеДанныеСотрудников
		|		ПО ПлановыеНачисления.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
		|		 И ПлановыеНачисления.Период = КадровыеДанныеСотрудников.Период
		|ГДЕ
		|	ПлановыеНачисления.Размер <> 0
		|";
        Запрос.Выполнить();

		//Для прочих начислений нам нужны минимальный и максимальный периоды
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СотрудникиОрганизации.Сотрудник,
		|	МИНИМУМ(СотрудникиОрганизации.ДатаНачала) КАК ДатаНачала,
		|	МАКСИМУМ(СотрудникиОрганизации.ДатаОкончания) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТМинимумМаксимум
		|ИЗ
		|	ВТСотрудникиОрганизацииИнтервалами КАК СотрудникиОрганизации
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиОрганизации.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СотрудникиОрганизации.Организация,
		|	СотрудникиОрганизации.Сотрудник,
		|	СотрудникиОрганизации.Подразделение,
		|	СотрудникиОрганизации.Должность,
		|	СотрудникиОрганизации.ФизическоеЛицо,
		|	МинимумМаксимум.ДатаНачала,
		|	ДОБАВИТЬКДАТЕ(СотрудникиОрганизации.ДатаОкончания, ДЕНЬ, -1) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТСотрудникиОрганизацииИнтерваламиСводно
		|ИЗ
		|	ВТСотрудникиОрганизацииИнтервалами КАК СотрудникиОрганизации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМинимумМаксимум КАК МинимумМаксимум
		|		ПО СотрудникиОрганизации.Сотрудник = МинимумМаксимум.Сотрудник
		|		 И СотрудникиОрганизации.ДатаОкончания = МинимумМаксимум.ДатаОкончания
		|;
        |
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТМинимумМаксимум;
		|////////////////////////////////////////////////////////////////////////////////
		|";
        Запрос.Выполнить();
		
		//Получаем временную таблицу, содержащую изменения плановых начислений.
		//Нас интересуют движения до конец месяца, и только для не зависящих от времени.
		//Если движение совпадает с увольнением - не учитываем.
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
          |	ПлановыеНачисления.Сотрудник,
		  |	ПлановыеНачисления.Начисление,
		  |	ПлановыеНачисления.Размер,
          |	ПлановыеНачисления.Период
		  |ПОМЕСТИТЬ ВТПрочиеНачисленияДвижения
		  |ИЗ
          |	РегистрСведений.ПлановыеНачисления КАК ПлановыеНачисления
		  | ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		  | ВТСотрудникиОрганизацииФильтр КАК СотрудникиОрганизации
		  | ПО ПлановыеНачисления.Сотрудник = СотрудникиОрганизации.Сотрудник
		  |  И ПлановыеНачисления.Период < &ОкончаниеПериода
		  |  И ПлановыеНачисления.Начисление.СпособРасчета НЕ В (&СпособыРасчетаЗависимыеОтВремени)
		  |;
          |
		  |////////////////////////////////////////////////////////////////////////////////
		  |ВЫБРАТЬ
		  |	ПлановыеНачисления.Сотрудник,
		  |	ПлановыеНачисления.Начисление,
		  |	ПлановыеНачисления.Размер,
          |	ПлановыеНачисления.Период
		  |ПОМЕСТИТЬ ВТПрочиеНачисленияОтфильтровано
		  |ИЗ
          |	ВТПрочиеНачисленияДвижения КАК ПлановыеНачисления
		  | ЛЕВОЕ СОЕДИНЕНИЕ
		  | ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		  | ПО ПлановыеНачисления.Сотрудник = СотрудникиОрганизации.Сотрудник
		  |  И ПлановыеНачисления.Период = СотрудникиОрганизации.Период
		  |  И СотрудникиОрганизации.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		  |ГДЕ
		  |  СотрудникиОрганизации.Сотрудник ЕСТЬ NULL
		  |;
          |
          |////////////////////////////////////////////////////////////////////////////////
		  |УНИЧТОЖИТЬ ВТПрочиеНачисленияДвижения;
		  |////////////////////////////////////////////////////////////////////////////////
		  |";
		Запрос.Выполнить();
		
		//Соединим кадровые периоды и начисления в одну таблицу
		Запрос.Текст ="ВЫБРАТЬ
		|	СотрудникиОрганизации.Организация,
		|	СотрудникиОрганизации.Сотрудник,
		|	СотрудникиОрганизации.Подразделение,
		|	СотрудникиОрганизации.Должность,
		|	СотрудникиОрганизации.ФизическоеЛицо,
		|	СотрудникиОрганизации.ДатаНачала,
		|	СотрудникиОрганизации.ДатаОкончания,
		|	ПрочиеНачисленияОтфильтровано.Начисление,
		|	МАКСИМУМ(ПрочиеНачисленияОтфильтровано.Период) КАК Период
		|ПОМЕСТИТЬ ВТМаксимальныеПериодыНачисленийПрочие
		|ИЗ
		|	ВТСотрудникиОрганизацииИнтерваламиСводно КАК СотрудникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрочиеНачисленияОтфильтровано КАК ПрочиеНачисленияОтфильтровано
		|		ПО СотрудникиОрганизации.ДатаОкончания >= ПрочиеНачисленияОтфильтровано.Период
		|			И СотрудникиОрганизации.Сотрудник = ПрочиеНачисленияОтфильтровано.Сотрудник
		|СГРУППИРОВАТЬ ПО
		|	СотрудникиОрганизации.Организация,
		|	СотрудникиОрганизации.Сотрудник,
		|	СотрудникиОрганизации.Подразделение,
		|	СотрудникиОрганизации.Должность,
		|	СотрудникиОрганизации.ФизическоеЛицо,
		|	СотрудникиОрганизации.ДатаНачала,
		|	СотрудникиОрганизации.ДатаОкончания,
		|	ПрочиеНачисленияОтфильтровано.Начисление
		|;
        |
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МаксимальныеПериоды.Организация,
		|	МаксимальныеПериоды.Сотрудник,
		|	МаксимальныеПериоды.Подразделение,
		|	МаксимальныеПериоды.Должность,
		|	МаксимальныеПериоды.ФизическоеЛицо,
		|	МаксимальныеПериоды.ДатаНачала,
		|	МаксимальныеПериоды.ДатаОкончания,
		|	МаксимальныеПериоды.Начисление,
		|	ПрочиеНачисленияОтфильтровано.Размер
		|ПОМЕСТИТЬ ВТДанныеПрочихНачисленийПоСотрудникам
		|ИЗ
		|	ВТМаксимальныеПериодыНачисленийПрочие КАК МаксимальныеПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрочиеНачисленияОтфильтровано КАК ПрочиеНачисленияОтфильтровано
		|		ПО ПрочиеНачисленияОтфильтровано.Период = МаксимальныеПериоды.Период
		|			И ПрочиеНачисленияОтфильтровано.Сотрудник = МаксимальныеПериоды.Сотрудник
		|			И ПрочиеНачисленияОтфильтровано.Начисление = МаксимальныеПериоды.Начисление
		|ГДЕ НЕ (ПрочиеНачисленияОтфильтровано.Сотрудник ЕСТЬ NULL)
		|		И ЕСТЬNULL(ПрочиеНачисленияОтфильтровано.Размер, 0) <> 0
		|;
        |
        |////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТМаксимальныеПериодыНачисленийПрочие;
		|////////////////////////////////////////////////////////////////////////////////
		|";
		Запрос.Выполнить();

		
	Иначе
		
		// Получаем сотрудников, работавших в организации из подсистемы КадровыйУчет
		ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		ПараметрыПолученияСотрудниковОрганизаций.Организация 					= Организация;
		ПараметрыПолученияСотрудниковОрганизаций.Подразделение 					= Подразделение;
		ПараметрыПолученияСотрудниковОрганизаций.ОтбиратьПоГоловнойОрганизации 	= Ложь;
		ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода 					= МесяцНачисления;
		ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода 				= КонецМесяца(МесяцНачисления);
		ПараметрыПолученияСотрудниковОрганизаций.КадровыеДанные					= "ГоловнаяОрганизация,Организация,Подразделение,Должность,ТарифнаяСтавка,НачисляетсяИндексация,ДатаПриема,ДатаУвольнения";
		
		//54057
		ПараметрыПолученияСотрудниковОрганизаций.СписокФизическихЛиц			= Сотрудники;
		
		КадровыйУчет.СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);

		Запрос.УстановитьПараметр("НачалоПериода",МесяцНачисления);
		Запрос.УстановитьПараметр("ОкончаниеПериода",КонецМесяца(МесяцНачисления));
		Запрос.УстановитьПараметр("ПредварительныйРасчет",ПредварительныйРасчет);
		Запрос.УстановитьПараметр("ОкончаниеПериодаПредварительныйРасчет",ОкончаниеПериода);
		Запрос.УстановитьПараметр("Организация",Организация);
        Запрос.УстановитьПараметр("Документ",Документ);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиОрганизации.Сотрудник
		|ПОМЕСТИТЬ ВТСотрудникиОрганизацииФильтр
		|ИЗ
		|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|ГДЕ
		| НЕ &ПредварительныйРасчет
		| ИЛИ СотрудникиОрганизации.ДатаУвольнения = ДАТАВРЕМЯ(1,1,1)
		| ИЛИ СотрудникиОрганизации.ДатаУвольнения >= &ОкончаниеПериодаПредварительныйРасчет
		|;
		|
		|ВЫБРАТЬ
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
		|	КадровыеДанныеСотрудников.Должность КАК Должность,
		|	Начисления.Ссылка КАК Начисление,
		|	КадровыеДанныеСотрудников.ТарифнаяСтавка КАК Размер,
		|	ВЫБОР
		|	 КОГДА КадровыеДанныеСотрудников.ДатаПриема > &НачалоПериода 
		|	 ТОГДА КадровыеДанныеСотрудников.ДатаПриема
		|	 ИНАЧЕ &НачалоПериода
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|	 КОГДА КадровыеДанныеСотрудников.ДатаУвольнения > &ОкончаниеПериода ИЛИ КадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1,1,1)
		|	 ТОГДА &ОкончаниеПериода
		|	 ИНАЧЕ КадровыеДанныеСотрудников.ДатаУвольнения
		|	КОНЕЦ КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТДанныеОсновныхНачисленийПоСотрудникам
		|ИЗ
		|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда)
		|		 И Начисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоДням)
		|;
        |
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|
		|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
		|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
		|	КадровыеДанныеСотрудников.Должность КАК Должность,
		|	Начисления.Ссылка КАК Начисление,
		|	1 КАК Размер,
		|	&НачалоПериода КАК ДатаНачала,
		|	&ОкончаниеПериода КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТДанныеПрочихНачисленийПоСотрудникам
		|ИЗ
		|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
		|		ПО Начисления.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Индексация)
		|		 И Начисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ИндексацияЗарплаты)
		|		 И Начисления.Предопределенный
		|ГДЕ
		|	КадровыеДанныеСотрудников.НачисляетсяИндексация
		|";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаЗаполненияНачислений(ПредварительныйРасчет, ОкончаниеПериода);
	РезультатНачисления = Запрос.Выполнить().Выгрузить();
	РезультатНачисления.Колонки.Добавить("Авторасчет");
	РезультатНачисления.ЗаполнитьЗначения(Истина,"Авторасчет");
	
	РезультатЗаполнения.Вставить("РезультатНачисления", РезультатНачисления);
	
	Если НЕ ПредварительныйРасчет Тогда
	
		//УДЕРЖАНИЯ
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
			
			
			//Получаем временную таблицу, содержащую изменения плановых удержаний.
			//Если движение совпадает с увольнением - не учитываем.
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	          |	ПлановыеУдержания.Сотрудник,
			  |	ПлановыеУдержания.Удержание,
			  |	ПлановыеУдержания.Контрагент,
			  |	ПлановыеУдержания.Размер,
	          |	ПлановыеУдержания.Период
			  |ПОМЕСТИТЬ ВТПлановыеУдержанияДвижения
			  |ИЗ
	          |	РегистрСведений.ПлановыеУдержания КАК ПлановыеУдержания
			  |ГДЕ ПлановыеУдержания.Период < &ОкончаниеПериода
			  |;
	          |
			  |////////////////////////////////////////////////////////////////////////////////
			  |ВЫБРАТЬ РАЗЛИЧНЫЕ
			  |	ПлановыеУдержания.Сотрудник,
			  |	ПлановыеУдержания.Удержание,
			  |	ПлановыеУдержания.Контрагент,
			  |	ПлановыеУдержания.Размер,
	          |	ПлановыеУдержания.Период
			  |ПОМЕСТИТЬ ВТПлановыеУдержанияДвиженияСотрудников
			  |ИЗ
	          |	ВТПлановыеУдержанияДвижения КАК ПлановыеУдержания
			  | ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			  | ВТСотрудникиОрганизации КАК СотрудникиОрганизации
			  | ПО ПлановыеУдержания.Сотрудник = СотрудникиОрганизации.Сотрудник
			  |;
	          |
			  |////////////////////////////////////////////////////////////////////////////////
			  |ВЫБРАТЬ
			  |	ПлановыеУдержания.Сотрудник,
			  |	ПлановыеУдержания.Удержание,
			  |	ПлановыеУдержания.Контрагент,
			  |	ПлановыеУдержания.Размер,
	          |	ПлановыеУдержания.Период
			  |ПОМЕСТИТЬ ВТПлановыеУдержанияОтфильтровано
			  |ИЗ
	          |	ВТПлановыеУдержанияДвижения КАК ПлановыеУдержания
			  | ЛЕВОЕ СОЕДИНЕНИЕ
			  | ВТСотрудникиОрганизации КАК СотрудникиОрганизации
			  | ПО ПлановыеУдержания.Сотрудник = СотрудникиОрганизации.Сотрудник
			  |  И ПлановыеУдержания.Период = СотрудникиОрганизации.Период
			  |  И СотрудникиОрганизации.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
			  |ГДЕ
			  |  СотрудникиОрганизации.Сотрудник ЕСТЬ NULL
			  |";
			Запрос.Выполнить();
			
			//Соединим кадровые периоды и начисления в одну таблицу
			Запрос.Текст ="ВЫБРАТЬ
			|	СотрудникиОрганизации.Организация,
			|	СотрудникиОрганизации.Сотрудник,
			|	СотрудникиОрганизации.Подразделение,
			|	СотрудникиОрганизации.Должность,
			|	СотрудникиОрганизации.ФизическоеЛицо,
			|	СотрудникиОрганизации.ДатаНачала,
			|	СотрудникиОрганизации.ДатаОкончания,
			|	ПлановыеУдержанияОтфильтровано.Удержание,
			|	ПлановыеУдержанияОтфильтровано.Контрагент,
			|	МАКСИМУМ(ПлановыеУдержанияОтфильтровано.Период) КАК Период
			|ПОМЕСТИТЬ ВТМаксимальныеПериодыУдержаний
			|ИЗ
			|	ВТСотрудникиОрганизацииИнтерваламиСводно КАК СотрудникиОрганизации
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеУдержанияОтфильтровано КАК ПлановыеУдержанияОтфильтровано
			|		ПО СотрудникиОрганизации.ДатаОкончания >= ПлановыеУдержанияОтфильтровано.Период
			|			И СотрудникиОрганизации.Сотрудник = ПлановыеУдержанияОтфильтровано.Сотрудник
			|СГРУППИРОВАТЬ ПО
			|	СотрудникиОрганизации.Организация,
			|	СотрудникиОрганизации.Сотрудник,
			|	СотрудникиОрганизации.Подразделение,
			|	СотрудникиОрганизации.Должность,
			|	СотрудникиОрганизации.ФизическоеЛицо,
			|	СотрудникиОрганизации.ДатаНачала,
			|	СотрудникиОрганизации.ДатаОкончания,
			|	ПлановыеУдержанияОтфильтровано.Удержание,
			|	ПлановыеУдержанияОтфильтровано.Контрагент
			|;
	        |
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МаксимальныеПериоды.Организация,
			|	МаксимальныеПериоды.Сотрудник,
			|	МаксимальныеПериоды.Подразделение,
			|	МаксимальныеПериоды.Должность,
			|	МаксимальныеПериоды.ФизическоеЛицо,
			|	МаксимальныеПериоды.ДатаНачала,
			|	МаксимальныеПериоды.ДатаОкончания,
			|	МаксимальныеПериоды.Удержание,
			|	МаксимальныеПериоды.Контрагент,
			|	ПлановыеУдержанияОтфильтровано.Размер
			|ПОМЕСТИТЬ ВТДанныеУдержанийПоСотрудникам
			|ИЗ
			|	ВТМаксимальныеПериодыУдержаний КАК МаксимальныеПериоды
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеУдержанияОтфильтровано КАК ПлановыеУдержанияОтфильтровано
			|		ПО ПлановыеУдержанияОтфильтровано.Период = МаксимальныеПериоды.Период
			|			И ПлановыеУдержанияОтфильтровано.Сотрудник = МаксимальныеПериоды.Сотрудник
			|			И ПлановыеУдержанияОтфильтровано.Удержание = МаксимальныеПериоды.Удержание
			|			И ПлановыеУдержанияОтфильтровано.Контрагент = МаксимальныеПериоды.Контрагент
			|ГДЕ НЕ (ПлановыеУдержанияОтфильтровано.Сотрудник ЕСТЬ NULL)
			|		И ЕСТЬNULL(ПлановыеУдержанияОтфильтровано.Размер, 0) <> 0
			|";
			Запрос.Выполнить();


		Иначе
			
			//Пустая временная таблица, для совместимости последующего алгоритма
			Запрос.Текст ="ВЫБРАТЬ 
			|	ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка) КАК Сотрудник,
			|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
			|	ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка) КАК Должность,
			|	ЗНАЧЕНИЕ(ПланВидовРасчета.Удержания.ПустаяСсылка) КАК Удержание,
			|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
			|	NULL КАК Размер,
			|	NULL КАК ДатаНачала,
			|	NULL КАК ДатаОкончания
			|ПОМЕСТИТЬ ВТДанныеУдержанийПоСотрудникам
			|ГДЕ ЛОЖЬ
			|";
			Запрос.Выполнить();

			
		КонецЕсли;	
		
		
	
		Запрос.Текст = ТекстЗапросаЗаполненияУдержаний();
		
		РезультатУдержания = Запрос.Выполнить().Выгрузить(); 
		РезультатУдержания.Колонки.Добавить("Авторасчет");
		РезультатУдержания.ЗаполнитьЗначения(Истина,"Авторасчет");

		РезультатЗаполнения.Вставить("РезультатУдержания", РезультатУдержания);
		
	Иначе
		
		РезультатЗаполнения.Вставить("РезультатУдержания", Новый ТаблицаЗначений());
		
    КонецЕсли;
	
	Возврат РезультатЗаполнения;
	
КонецФункции

Функция ТекстЗапросаЗаполненияНачислений(ПредварительныйРасчет = Ложь, ОкончаниеПериода = Неопределено) Экспорт
	
	 Если НЕ ПредварительныйРасчет Тогда 
		 
		 Возврат
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		    |	НачисленияУдержанияПоСотрудникам.Сотрудник,
		    |	НачисленияУдержанияПоСотрудникам.НачислениеУдержание,
		    |	НачисленияУдержанияПоСотрудникам.ПериодДействия
			|ПОМЕСТИТЬ ВТУжеНачислено
			|ИЗ
		    |	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
			|ГДЕ 
			|   (НачисленияУдержанияПоСотрудникам.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
			|   И (НачисленияУдержанияПоСотрудникам.Организация = &Организация)
			|   И (НачисленияУдержанияПоСотрудникам.Регистратор <> &Документ)
			|СГРУППИРОВАТЬ ПО
			|	НачисленияУдержанияПоСотрудникам.Сотрудник,
		    |	НачисленияУдержанияПоСотрудникам.НачислениеУдержание,
		    |	НачисленияУдержанияПоСотрудникам.ПериодДействия
			|
			|;
	        |
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДанныеПоСотрудникам.Сотрудник КАК Сотрудник,
			|	ДанныеПоСотрудникам.Подразделение КАК Подразделение,
			|	ДанныеПоСотрудникам.Должность КАК Должность,
			|	ДанныеПоСотрудникам.Начисление КАК Начисление,
			|	ДанныеПоСотрудникам.Размер КАК Размер,
			|	НАЧАЛОПЕРИОДА(ДанныеПоСотрудникам.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
			|	ДанныеПоСотрудникам.ДатаНачала КАК ДатаНачала,
			|	ДанныеПоСотрудникам.ДатаОкончания КАК ДатаОкончания,
			|	ДанныеПоСотрудникам.Подразделение.РеквизитДопУпорядочиванияИерархического КАК ДопПорядокПодразделение,
			|	ДанныеПоСотрудникам.Начисление.РеквизитДопУпорядочивания КАК ДопПорядокНачисление,
			|	ДанныеПоСотрудникам.Сотрудник.Наименование КАК СотрудникНаименование
			|ПОМЕСТИТЬ ВТДанныеВсехНачисленийПоСотрудникам
			|ИЗ
			|	ВТДанныеОсновныхНачисленийПоСотрудникам КАК ДанныеПоСотрудникам
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ДанныеПоСотрудникам.Сотрудник КАК Сотрудник,
			|	ДанныеПоСотрудникам.Подразделение КАК Подразделение,
			|	ДанныеПоСотрудникам.Должность КАК Должность,
			|	ДанныеПоСотрудникам.Начисление КАК Начисление,
			|	ДанныеПоСотрудникам.Размер КАК Размер,
			|	НАЧАЛОПЕРИОДА(ДанныеПоСотрудникам.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
			|	ДанныеПоСотрудникам.ДатаНачала КАК ДатаНачала,
			|	ДанныеПоСотрудникам.ДатаОкончания КАК ДатаОкончания,
			|	ДанныеПоСотрудникам.Подразделение.РеквизитДопУпорядочиванияИерархического КАК ДопПорядокПодразделение,
			|	ДанныеПоСотрудникам.Начисление.РеквизитДопУпорядочивания КАК ДопПорядокНачисление,
			|	ДанныеПоСотрудникам.Сотрудник.Наименование КАК СотрудникНаименование
			|ИЗ
			|	ВТДанныеПрочихНачисленийПоСотрудникам КАК ДанныеПоСотрудникам
			|;
	        |
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДанныеПоСотрудникам.Сотрудник КАК Сотрудник,
			|	ДанныеПоСотрудникам.Подразделение КАК Подразделение,
			|	ДанныеПоСотрудникам.Должность КАК Должность,
			|	ДанныеПоСотрудникам.Начисление КАК Начисление,
			|	ДанныеПоСотрудникам.Размер КАК Размер,
			|	ДанныеПоСотрудникам.ДатаНачала КАК ДатаНачала,
			|	ДанныеПоСотрудникам.ДатаОкончания КАК ДатаОкончания,
			|	ДанныеПоСотрудникам.ДопПорядокПодразделение КАК ДопПорядокПодразделение,
			|	ДанныеПоСотрудникам.ДопПорядокНачисление КАК ДопПорядокНачисление,
			|	ДанныеПоСотрудникам.СотрудникНаименование КАК СотрудникНаименование
			|ИЗ
			|	ВТДанныеВсехНачисленийПоСотрудникам КАК ДанныеПоСотрудникам
			|   ЛЕВОЕ СОЕДИНЕНИЕ
			|   ВТУжеНачислено КАК УжеНачислено
			|   ПО (ДанныеПоСотрудникам.Сотрудник = УжеНачислено.Сотрудник
			|    И ДанныеПоСотрудникам.Начисление = УжеНачислено.НачислениеУдержание  
			|    И ДанныеПоСотрудникам.ПериодДействия = УжеНачислено.ПериодДействия)  
			|ГДЕ
			|   УжеНачислено.Сотрудник ЕСТЬ NULL
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДопПорядокПодразделение,
			|	СотрудникНаименование,
			|	ДопПорядокНачисление,
			|	ДатаНачала,
			|	ДатаОкончания";
	Иначе
		 Возврат
			"ВЫБРАТЬ
			|	ДанныеПоСотрудникам.Сотрудник КАК Сотрудник,
			|	ДанныеПоСотрудникам.Подразделение КАК Подразделение,
			|	ДанныеПоСотрудникам.Должность КАК Должность,
			|	ДанныеПоСотрудникам.Начисление КАК Начисление,
			|	ДанныеПоСотрудникам.Размер КАК Размер,
			|	ДанныеПоСотрудникам.ДатаНачала КАК ДатаНачала,
			|	ВЫБОР
			|	 КОГДА ДанныеПоСотрудникам.ДатаОкончания > &ОкончаниеПериодаПредварительныйРасчет  
			|	 ТОГДА &ОкончаниеПериодаПредварительныйРасчет
			|	 ИНАЧЕ ДанныеПоСотрудникам.ДатаОкончания
			|	КОНЕЦ КАК ДатаОкончания,
			|	ДанныеПоСотрудникам.Подразделение.РеквизитДопУпорядочиванияИерархического КАК ДопПорядокПодразделение,
			|	ДанныеПоСотрудникам.Начисление.РеквизитДопУпорядочивания КАК ДопПорядокНачисление,
			|	ДанныеПоСотрудникам.Сотрудник.Наименование КАК СотрудникНаименование
			|ИЗ
			|	ВТДанныеОсновныхНачисленийПоСотрудникам КАК ДанныеПоСотрудникам
			|   ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|   ВТСотрудникиОрганизацииФильтр КАК СотрудникиОрганизацииФильтр
			|   ПО ДанныеПоСотрудникам.Сотрудник = СотрудникиОрганизацииФильтр.Сотрудник
			|ГДЕ 
			|   ДанныеПоСотрудникам.ДатаНачала <= &ОкончаниеПериодаПредварительныйРасчет
			|УПОРЯДОЧИТЬ ПО
			|	ДопПорядокПодразделение,
			|	СотрудникНаименование,
			|	ДопПорядокНачисление,
			|	ДатаНачала,
			|	ДатаОкончания";			
	КонецЕсли;		

	
	
КонецФункции

Функция ТекстЗапросаЗаполненияУдержаний() Экспорт
	
	 Возврат
		"ВЫБРАТЬ
		|	ДанныеПоСотрудникам.Сотрудник КАК Сотрудник,
		|	ДанныеПоСотрудникам.Подразделение КАК Подразделение,
		|	ДанныеПоСотрудникам.Удержание КАК Удержание,
		|	ДанныеПоСотрудникам.Контрагент КАК Контрагент,
		|	ДанныеПоСотрудникам.Размер КАК Размер,
		|	ДанныеПоСотрудникам.ДатаНачала КАК ДатаНачала,
		|	ДанныеПоСотрудникам.ДатаОкончания КАК ДатаОкончания,
		|	ДанныеПоСотрудникам.Подразделение.РеквизитДопУпорядочиванияИерархического КАК ДопПорядокПодразделение,
		|	ДанныеПоСотрудникам.Удержание.РеквизитДопУпорядочивания КАК ДопПорядокУдержание,
		|	ДанныеПоСотрудникам.Сотрудник.Наименование КАК СотрудникНаименование
		|ИЗ
		|	ВТДанныеУдержанийПоСотрудникам КАК ДанныеПоСотрудникам
		|   ЛЕВОЕ СОЕДИНЕНИЕ
		|   ВТУжеНачислено КАК УжеНачислено
		|   ПО (ДанныеПоСотрудникам.Сотрудник = УжеНачислено.Сотрудник
		|    И ДанныеПоСотрудникам.Удержание = УжеНачислено.НачислениеУдержание)  
		|ГДЕ
		|   УжеНачислено.Сотрудник ЕСТЬ NULL
		|УПОРЯДОЧИТЬ ПО
		|	ДопПорядокПодразделение,
		|	СотрудникНаименование,
		|	ДопПорядокУдержание,
		|	ДатаНачала,
		|	ДатаОкончания";
	
КонецФункции

// Конструирует объект для хранения данных для проведения
// Структура может содержать
//		НачисленияПоСотрудникам - таблица значений
//			ФизическоеЛицо
//			Сотрудник
//			Подразделение
//			Начисление
//			Сумма
//			ОтработаноДней
//			ОтработаноЧасов
//
//		УдержанияПоСотрудникам - таблица значений
//			ФизическоеЛицо
//			Удержание
//			Сумма
//
//		ИсчисленныйНДФЛ - таблица значений
//
//		ИсчисленныеВзносы - таблица значений
//
//		МенеджерВременныхТаблиц - менеджер временных таблиц на котором могут 
//		удерживаться таблицы
//			ВТНачисления (данные о начисленных суммах)
//				Сотрудник
//				ПериодДействия
//				ДатаНачала
//				Начисление
//				СуммаДохода
//				СуммаВычетаНДФЛ
//				СуммаВычетаВзносы
//				КодВычетаНДФЛ
//				Подразделение
//			ВТФизическиеЛица (список людей по которым выполняется расчет)
//				ФизическоеЛицо
//
Функция СоздатьДанныеДляПроведенияНачисленияЗарплаты() Экспорт
	
	ПоляСтруктуры = 
	"МенеджерВременныхТаблиц, 
	|НачисленияПоСотрудникам, 
	|УдержанияПоСотрудникам, 
	|НДФЛ, 
	|Взносы,
	|ВзносыФОТ";
	
	ДанныеДляПроведения = Новый Структура(ПоляСтруктуры);
	ДанныеДляПроведения.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Процедура ЗаполнитьНачисления(ДанныеДляПроведенияНачисленияЗарплаты, Документ, ТаблицаНачислений, ПолеДатыДействия, ПолеДатыДействияКонец) Экспорт
	
	// Получаем массив имен табличных частей
	ИменаТаблицНачислений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТаблицаНачислений);
	
	// Метаданные документа используем для обращения к таблице
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Документ));
	
	// Составляем текст запроса создания временной таблицы
	ТекстЗапроса = "";
	ПерваяТаблица = Истина;
	Для Каждого ИмяТаблицыНачислений Из ИменаТаблицНачислений Цикл
		Если Не ПерваяТаблица Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаНачислений.Авторасчет КАК Авторасчет,
		|	ТаблицаНачислений.Ссылка.Организация КАК Организация,
		|	ТаблицаНачислений.Ссылка.МесяцНачисления КАК ПериодРегистрации,
		|	ТаблицаНачислений.Сотрудник КАК Сотрудник,
		|	ТаблицаНачислений.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ТаблицаНачислений.Подразделение,
		|	ТаблицаНачислений.Должность,
		|	ТаблицаНачислений.Начисление КАК НачислениеУдержание,
		|	ТаблицаНачислений.Начисление КАК ВидРасчета,
		|	ТаблицаНачислений.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияНачисления,
		|	ТаблицаНачислений.Начисление.ВидЕСВ КАК ВидЕСВ,
		|	ТаблицаНачислений.Начисление.ДоходНДФЛ КАК ДоходНДФЛ,
		|	НАЧАЛОПЕРИОДА(ТаблицаНачислений.ДатаДействия, МЕСЯЦ) КАК ПериодДействия,
		|	ТаблицаНачислений.ДатаДействия КАК ДатаНачала,
		|	ТаблицаНачислений.ДатаДействияКонец КАК ДатаОкончания,
		|	НАЧАЛОПЕРИОДА(ТаблицаНачислений.ДатаДействия, МЕСЯЦ) КАК БазовыйПериодНачало,
		|	КОНЕЦПЕРИОДА(ТаблицаНачислений.ДатаДействия, МЕСЯЦ) КАК БазовыйПериодКонец,
		|	ТаблицаНачислений.Размер КАК Размер,
		|	ТаблицаНачислений.Результат КАК Результат,
		|	ТаблицаНачислений.Результат КАК Сумма,
		|	ТаблицаНачислений.КалендарныеДни КАК КалендарныеДни,
		|	ТаблицаНачислений.ОтработаноДней КАК ОтработаноДней,
		|	ТаблицаНачислений.ОтработаноЧасов КАК ОтработаноЧасов,
		|	ТаблицаНачислений.НормаДней КАК НормаДней,
		|	ТаблицаНачислений.НормаЧасов КАК НормаЧасов,
		|	ТаблицаНачислений.НормаДнейЗаМесяц КАК НормаДнейЗаМесяц,
		|	ТаблицаНачислений.НормаЧасовЗаМесяц КАК НормаЧасовЗаМесяц
		|";
		Если ПерваяТаблица Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ПОМЕСТИТЬ ВТНачисления
			|";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|	#ТаблицаНачислений КАК ТаблицаНачислений
		|ГДЕ
		|	ТаблицаНачислений.Ссылка = &Ссылка
		|";
		ПерваяТаблица = Ложь;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ТаблицаНачислений", МетаданныеДокумента.ПолноеИмя() + "." + ИмяТаблицыНачислений);
	КонецЦикла;
	
	// Устанавливаем поле даты действия
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДатаДействия, МЕСЯЦ) КАК ПериодДействия", ПолеДатыДействия + ", МЕСЯЦ) КАК ПериодДействия");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДатаДействия, МЕСЯЦ) КАК БазовыйПериодНачало", ПолеДатыДействия + ", МЕСЯЦ) КАК БазовыйПериодНачало");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДатаДействия, МЕСЯЦ) КАК БазовыйПериодКонец", ПолеДатыДействия + ", МЕСЯЦ) КАК БазовыйПериодКонец");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДатаДействия КАК ДатаНачала", ПолеДатыДействия + " КАК ДатаНачала");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДатаДействияКонец КАК ДатаОкончания", ПолеДатыДействияКонец + " КАК ДатаОкончания");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Запрос.МенеджерВременныхТаблиц = ДанныеДляПроведенияНачисленияЗарплаты.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	// Составляем текст запроса таблицы значений
	ТекстЗапроса = "";
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|   *,
		|	ДАТАВРЕМЯ(1,1,1) КАК НалоговыйПериодЕСВ,
		|	ДАТАВРЕМЯ(1,1,1) КАК НалоговыйПериодНДФЛ
		|ИЗ
		|	ВТНачисления КАК Начисления
		|";
	
	Запрос.Текст = ТекстЗапроса;
	
	НачисленияПоСотрудникам = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаНачислений Из НачисленияПоСотрудникам Цикл
		
		Если СтрокаНачислений.НачислениеУдержание.ПериодРасчетаБазовыхНачислений <> Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц Тогда
			БазовыйПериод = БазовыйПериодНачисления(НачалоМесяца(СтрокаНачислений.ДатаНачала), СтрокаНачислений.НачислениеУдержание.ПериодРасчетаБазовыхНачислений, СтрокаНачислений.НачислениеУдержание.КоличествоМесяцевБазовогоПериода);
			СтрокаНачислений.БазовыйПериодНачало = БазовыйПериод.ДатаНачала;
			СтрокаНачислений.БазовыйПериодКонец = БазовыйПериод.ДатаОкончания;
		КонецЕсли;
		
		СтрокаНачислений.НалоговыйПериодЕСВ = УчетСтраховыхВзносов.ОпределитьНалоговыйПериод(СтрокаНачислений.ПериодРегистрации, СтрокаНачислений.ПериодДействия, СтрокаНачислений.ВидЕСВ, СтрокаНачислений.КатегорияНачисления);
		СтрокаНачислений.НалоговыйПериодНДФЛ = УчетНДФЛ.ОпределитьНалоговыйПериод(СтрокаНачислений.ПериодРегистрации, СтрокаНачислений.ПериодДействия, СтрокаНачислений.ДоходНДФЛ, СтрокаНачислений.КатегорияНачисления);
	КонецЦикла;
	НачисленияПоСотрудникам = НачисленияИБазовыеПериодыИндексации(НачисленияПоСотрудникам, Документ.МесяцНачисления, Документ.Организация);

	ДанныеДляПроведенияНачисленияЗарплаты.НачисленияПоСотрудникам = НачисленияПоСотрудникам;
	
КонецПроцедуры

Процедура ЗаполнитьУдержания(ДанныеДляПроведенияНачисленияЗарплаты, Документ, ТаблицаУдержаний = "Удержания") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Документ));
	ИмяТаблицыУдержаний = МетаданныеДокумента.ПолноеИмя() + "." + ТаблицаУдержаний;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Удержания.Авторасчет КАК Авторасчет,
	|	Удержания.Ссылка.Организация КАК Организация,
	|	Удержания.Ссылка.МесяцНачисления КАК ПериодРегистрации,
	|	Удержания.Сотрудник КАК Сотрудник,
	|	Удержания.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Удержания.Подразделение КАК Подразделение,
	|	Удержания.Удержание КАК НачислениеУдержание,
	|	Удержания.Удержание КАК ВидРасчета,
	|	Удержания.Удержание.КатегорияУдержания КАК КатегорияУдержания,
	|	Удержания.ДатаНачала КАК ДатаНачала,
	|	Удержания.ДатаОкончания КАК ДатаОкончания,
	|	Удержания.ДатаНачала КАК БазовыйПериодНачало,
	|	Удержания.ДатаОкончания КАК БазовыйПериодКонец,
	|	Удержания.Размер КАК Размер,
	|	Удержания.Контрагент КАК Контрагент,
	|	Удержания.Результат КАК Сумма,
	|	Удержания.Результат КАК Результат
	|ИЗ
	|	#ТаблицаУдержаний КАК Удержания
	|ГДЕ
	|	Удержания.Ссылка = &Ссылка";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ТаблицаУдержаний", ИмяТаблицыУдержаний);
	
	ДанныеДляПроведенияНачисленияЗарплаты.УдержанияПоСотрудникам = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Дополняет структуру данных для проведения таблицей НДФЛ
//
Процедура ЗаполнитьДанныеНДФЛ(ДанныеДляПроведения, ДокументСсылка) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаНДФЛ.Ссылка,
	|	ТаблицаНДФЛ.НомерСтроки,
	|	ТаблицаНДФЛ.ФизическоеЛицо,
	|	ТаблицаНДФЛ.ДоходНДФЛ,
	|	ТаблицаНДФЛ.НалоговыйПериод,
	|	ТаблицаНДФЛ.ВидСтавки,
	|	ТаблицаНДФЛ.УвеличеннаяСтавка,
	|	ТаблицаНДФЛ.Налог,
	|	ТаблицаНДФЛ.Доход,
	|	ТаблицаНДФЛ.Льгота,
	|	ТаблицаНДФЛ.СуммаЛьготы,
	|	ТаблицаНДФЛ.КоличествоЛьгот,
	|	ТаблицаНДФЛ.ДоходПолный
	|ИЗ
	|	Документ.НачислениеЗарплаты.НДФЛ КАК ТаблицаНДФЛ
	|ГДЕ
	|	ТаблицаНДФЛ.Ссылка = &Ссылка
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	ДанныеДляПроведения.Вставить("НДФЛ", Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

// Дополняет структуру данных для проведения таблицей страховых взносов
//
Процедура ЗаполнитьДанныеСтраховыхВзносов(ДанныеДляПроведения, ДокументСсылка) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Взносы.ФизическоеЛицо,
	|	Взносы.КатегорияЕСВ,
	|	Взносы.ВидЕСВ,
	|	Взносы.Налог,
	|	Взносы.СтатьяНалоговойДекларации,
	|	НАЧАЛОПЕРИОДА(Взносы.ДатаНачала, МЕСЯЦ) КАК НалоговыйПериод,
	|	Взносы.ДатаНачала,
	|	Взносы.ДатаОкончания,
	|	Взносы.Предел,
	|	Взносы.МинимальнаяБаза,
	|	Взносы.База,
	|	Взносы.БазаВзноса,
	|	Взносы.Результат,
	|	Взносы.БазаВычет,
	|	Взносы.БазаОтпускные,
	|	Взносы.Ставка,
	|	Взносы.КоэффициентСтавки,
	|	Взносы.ОтработаноДней,
	|	Взносы.ОтработаноДнейВсего,
	|	Взносы.ТипНачисления
	|ИЗ
	|	Документ.НачислениеЗарплаты.Взносы КАК Взносы
	|ГДЕ
	|	Взносы.Ссылка = &Ссылка
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Взносы.ФизическоеЛицо,
	|	Взносы.КатегорияЕСВ,
	|	Взносы.ВидЕСВ,
	|	Взносы.Налог,
	|	Взносы.СтатьяНалоговойДекларации,
	|	НАЧАЛОПЕРИОДА(Взносы.ДатаНачала, МЕСЯЦ) КАК НалоговыйПериод,
	|	Взносы.ДатаНачала,
	|	Взносы.ДатаОкончания,
	|	Взносы.Предел,
	|	Взносы.МинимальнаяБаза,
	|	Взносы.База,
	|	Взносы.БазаВзноса,
	|	Взносы.Результат,
	|	Взносы.БазаВычет,
	|	Взносы.БазаОтпускные,
	|	Взносы.БазаДоначисление,
	|	Взносы.РезультатДоначисление,
	|	Взносы.Ставка,
	|	Взносы.КоэффициентСтавки,
	|	Взносы.ОтработаноДней,
	|	Взносы.ОтработаноДнейВсего,
	|	Взносы.СтавкаПолная,
	|	Взносы.РезультатПолная,
	|	Взносы.ТипНачисления
	|ИЗ
	|	Документ.НачислениеЗарплаты.ВзносыФОТ КАК Взносы
	|ГДЕ
	|	Взносы.Ссылка = &Ссылка";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ДанныеДляПроведения.Вставить("Взносы", Результат[0].Выгрузить());
	ДанныеДляПроведения.Вставить("ВзносыФОТ", Результат[1].Выгрузить());

КонецПроцедуры

// Возвращает таблицу значений с колонками
//	ФизическоеЛицо
//	Сотрудник
//	Подразделение
//	Сумма
//
// Параметры:
//	ФизическиеЛица
//	МесяцНачисления
//
Функция ПолучитьБазуУдержанийПоУмолчанию(ФизическиеЛица, МесяцНачисления, Организация) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.Организация 			= Организация;
	ПараметрыПолученияСотрудниковОрганизаций.СписокФизическихЛиц 	= ФизическиеЛица;
	ПараметрыПолученияСотрудниковОрганизаций.КадровыеДанные			= "ТарифнаяСтавка,Подразделение,ДатаПриема,ДатаУвольнения,ВАрхиве";
	
	КадровыйУчет.СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст  = 
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.Подразделение КАК Подразделение,
	|	КадровыеДанныеСотрудников.ТарифнаяСтавка КАК Сумма
	|ИЗ
	|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
	|ГДЕ
	|	НЕ КадровыеДанныеСотрудников.ВАрхиве
	|	И (КадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ КадровыеДанныеСотрудников.ДатаУвольнения > &МесяцНачисления)
	|	И КадровыеДанныеСотрудников.ДатаПриема < КОНЕЦПЕРИОДА(&МесяцНачисления, МЕСЯЦ)";
	
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗаполнитьДокументНачисленияЗарплаты(Объект) Экспорт
	
	ДанныеЗаполнения = Новый Структура(
	"Начисления, 
	|Удержания, 
	|НДФЛ, 
	|Взносы,
	|ВзносыФОТ");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьНачисленияУдержания(Объект);
	
	ДанныеЗаполнения.Вставить("Начисления", Объект.Начисления.Выгрузить());
	ДанныеЗаполнения.Вставить("Удержания", Объект.Удержания.Выгрузить());
		
	РассчитатьДокументНачисленияЗарплаты(Объект, ДанныеЗаполнения);
	
    Объект.Начисления.Загрузить(ДанныеЗаполнения.Начисления);
	Объект.Удержания.Загрузить(ДанныеЗаполнения.Удержания);
	Если ДанныеЗаполнения.НДФЛ <> Неопределено Тогда
		Объект.НДФЛ.Загрузить(ДанныеЗаполнения.НДФЛ);
	КонецЕсли;	
	Если ДанныеЗаполнения.Взносы <> Неопределено Тогда
		Объект.Взносы.Загрузить(ДанныеЗаполнения.Взносы);
	КонецЕсли;	
	Если ДанныеЗаполнения.ВзносыФОТ <> Неопределено Тогда	
		Объект.ВзносыФОТ.Загрузить(ДанныеЗаполнения.ВзносыФОТ);
	КонецЕсли;
    УстановитьПривилегированныйРежим(Ложь);
	
    
	
КонецПроцедуры 

Функция ДоЗаполнитьДокументНачисленияЗарплаты(Объект, СписокФизическихЛиц) Экспорт
	
	ДанныеЗаполнения = Новый Структура(
	"Начисления, 
	|Удержания, 
	|НДФЛ, 
	|Взносы,
	|ВзносыФОТ");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДоЗаполнитьНачисленияУдержания(Объект, СписокФизическихЛиц, ДанныеЗаполнения);
	
	ДоРассчитатьДокументНачисленияЗарплаты(Объект, СписокФизическихЛиц, ДанныеЗаполнения);
	
    УстановитьПривилегированныйРежим(Ложь);
	
    Возврат ДанныеЗаполнения;
	
КонецФункции 

Функция БазовыйПериодНачисления(МесяцНачисления, ПериодРасчетаБазовыхНачислений, КоличествоМесяцевБазовогоПериода = Неопределено)
	
	БазовыйПериод = Новый СтандартныйПериод;
	
	Если ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц Тогда
		БазовыйПериод.ДатаНачала = НачалоМесяца(МесяцНачисления);
		БазовыйПериод.ДатаОкончания = КонецМесяца(МесяцНачисления);
	ИначеЕсли ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийМесяц Тогда
		БазовыйПериод.ДатаНачала = НачалоМесяца(ДобавитьМесяц(МесяцНачисления, -1));
		БазовыйПериод.ДатаОкончания = КонецМесяца(ДобавитьМесяц(МесяцНачисления, -1));
	ИначеЕсли ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийКвартал Тогда
		БазовыйПериод.ДатаНачала = НачалоКвартала(МесяцНачисления);
		БазовыйПериод.ДатаОкончания = КонецКвартала(МесяцНачисления);
	ИначеЕсли ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийКвартал Тогда
		БазовыйПериод.ДатаНачала = ДобавитьМесяц(НачалоКвартала(МесяцНачисления), -3);
		БазовыйПериод.ДатаОкончания = ДобавитьМесяц(КонецКвартала(МесяцНачисления), -3);
	ИначеЕсли ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийГод Тогда
		БазовыйПериод.ДатаНачала = НачалоГода(МесяцНачисления);
		БазовыйПериод.ДатаОкончания = КонецГода(МесяцНачисления);
	ИначеЕсли ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийГод Тогда
		БазовыйПериод.ДатаНачала = ДобавитьМесяц(НачалоГода(МесяцНачисления), -12);
		БазовыйПериод.ДатаОкончания = ДобавитьМесяц(КонецГода(МесяцНачисления), -12);
	ИначеЕсли ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.НесколькоПредыдущихМесяцев Тогда
		Если КоличествоМесяцевБазовогоПериода = Неопределено Тогда
			КоличествоМесяцевБазовогоПериода = 1;
		КонецЕсли;
		БазовыйПериод.ДатаНачала = ДобавитьМесяц(НачалоМесяца(МесяцНачисления), - КоличествоМесяцевБазовогоПериода);
		БазовыйПериод.ДатаОкончания = КонецМесяца(ДобавитьМесяц(МесяцНачисления, -1));
	КонецЕсли;
	
	Возврат БазовыйПериод;
	
КонецФункции

Функция ТаблицаРасчетаПредопределеннымСпособом()
	
	// Таблица для сбора записей, рассчитываемых предопределенным способом
	РасчетПредопределеннымСпособом = Новый ТаблицаЗначений;
	РасчетПредопределеннымСпособом.Колонки.Добавить("СпособРасчета");
	РасчетПредопределеннымСпособом.Колонки.Добавить("ЗаписьРасчета");
	РасчетПредопределеннымСпособом.Колонки.Добавить("ИсходныеДанные");
	
	Возврат РасчетПредопределеннымСпособом;
	
КонецФункции

Процедура РассчитатьДокументНачисленияЗарплаты(Объект, ДанныеЗаполнения, Перерасчет = Ложь)
	
	
	ДанныеЗаполнения.Начисления.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета");
	ДанныеЗаполнения.Удержания.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета");
	
    СтрокиНачисления = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиНачисления, ДанныеЗаполнения.Начисления);
	СтрокиУдержания = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиУдержания, ДанныеЗаполнения.Удержания);
	
	НачатьТранзакцию();
	
	Если Не Объект.Ссылка.Пустая() Тогда
		НаборыЗаписейОбъекта = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, Объект.Ссылка);
		НаборыЗаписейОбъекта.Начисления.Записать();
		НаборыЗаписейОбъекта.Удержания.Записать();
		НаборыЗаписейОбъекта.НачисленияУдержанияПоСотрудникам.Записать();
		НаборыЗаписейОбъекта.ЕСВПоСотрудникам.Записать();
		НаборыЗаписейОбъекта.НДФЛПоСотрудникам.Записать();
	КонецЕсли;	
	
	ВременнаяСсылка = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, ВременнаяСсылка);
	
	// выполнить расчет начислений
	РассчитатьНачисления(ВременнаяСсылка, НаборыЗаписей, СтрокиНачисления, Объект.Ссылка, Объект.Организация, Объект.МесяцНачисления, Перерасчет);
	// выполнить расчет удержаний
	РассчитатьУдержания(ВременнаяСсылка, НаборыЗаписей, СтрокиУдержания, Объект.Ссылка, Объект.Организация, Объект.МесяцНачисления);

	Если НЕ Объект.ПредварительныйРасчет Тогда
	
		ЗаполнитьНДФЛиВзносы(Объект, ВременнаяСсылка, НаборыЗаписей);
		
		ДанныеЗаполнения.Вставить("НДФЛ", Объект.НДФЛ.Выгрузить());
		ДанныеЗаполнения.Вставить("Взносы", Объект.Взносы.Выгрузить());
		ДанныеЗаполнения.Вставить("ВзносыФОТ", Объект.ВзносыФОТ.Выгрузить());		
		
		Если НЕ Объект.КорректироватьВзносы Тогда
			// выполнить расчет взносов
			УчетСтраховыхВзносов.РассчитатьВзносы(ВременнаяСсылка, НаборыЗаписей, ДанныеЗаполнения, Объект.Ссылка, Объект.Организация, Объект.МесяцНачисления);
		КонецЕсли;	
		Если НЕ Объект.КорректироватьНДФЛ Тогда
			// выполнить расчет НДФЛ
			УчетНДФЛ.РассчитатьНДФЛ(ВременнаяСсылка, НаборыЗаписей, ДанныеЗаполнения, Объект.Ссылка, Объект.Организация, Объект.МесяцНачисления);
		КонецЕсли;	
		
	КонецЕсли;	
		
	ОтменитьТранзакцию();
	
КонецПроцедуры	

Процедура ДоРассчитатьДокументНачисленияЗарплаты(Объект, СписокФизическихЛиц, ДанныеЗаполнения, Перерасчет = Ложь)
	
	
	ДанныеЗаполнения.Начисления.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета");
	ДанныеЗаполнения.Удержания.Колонки.Добавить("ИдентификаторСтрокиВидаРасчета");
	
	ДанныеЗаполнения.Начисления.Колонки.Добавить("Результат");
	ДанныеЗаполнения.Начисления.Колонки.Добавить("КалендарныеДни");
	ДанныеЗаполнения.Начисления.Колонки.Добавить("ОтработаноДней");
	ДанныеЗаполнения.Начисления.Колонки.Добавить("ОтработаноЧасов");
	ДанныеЗаполнения.Начисления.Колонки.Добавить("НормаДней");
	ДанныеЗаполнения.Начисления.Колонки.Добавить("НормаЧасов");
	ДанныеЗаполнения.Начисления.Колонки.Добавить("НормаДнейЗаМесяц");
	ДанныеЗаполнения.Начисления.Колонки.Добавить("НормаЧасовЗаМесяц");
	
	ДанныеЗаполнения.Удержания.Колонки.Добавить("Результат");
	
    СтрокиНачисления = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиНачисления, ДанныеЗаполнения.Начисления);
	СтрокиУдержания = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиУдержания, ДанныеЗаполнения.Удержания);
	
	НачатьТранзакцию();
	
	ВременнаяСсылка = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, ВременнаяСсылка);
	
	// выполнить расчет начислений
	РассчитатьНачисления(ВременнаяСсылка, НаборыЗаписей, СтрокиНачисления, Объект.Ссылка, Объект.Организация, Объект.МесяцНачисления, Перерасчет);
	// выполнить расчет удержаний
	РассчитатьУдержания(ВременнаяСсылка, НаборыЗаписей, СтрокиУдержания, Объект.Ссылка, Объект.Организация, Объект.МесяцНачисления);

	Если НЕ Объект.ПредварительныйРасчет Тогда
	
		ДоЗаполнитьНДФЛиВзносы(Объект, ВременнаяСсылка, НаборыЗаписей, СписокФизическихЛиц, ДанныеЗаполнения);
				
		Если НЕ Объект.КорректироватьВзносы Тогда
			// выполнить расчет взносов
			УчетСтраховыхВзносов.РассчитатьВзносы(ВременнаяСсылка, НаборыЗаписей, ДанныеЗаполнения, Объект.Ссылка, Объект.Организация, Объект.МесяцНачисления);
		КонецЕсли;	
		Если НЕ Объект.КорректироватьНДФЛ Тогда
			// выполнить расчет НДФЛ
			УчетНДФЛ.РассчитатьНДФЛ(ВременнаяСсылка, НаборыЗаписей, ДанныеЗаполнения, Объект.Ссылка, Объект.Организация, Объект.МесяцНачисления);
		КонецЕсли;	
		
	КонецЕсли;	
		
	ОтменитьТранзакцию();
	
КонецПроцедуры	

Процедура ПересчитатьДокументНачисленияЗарплаты(Объект) Экспорт
	
	ДанныеЗаполнения = Новый Структура(
	"Начисления, 
	|Удержания, 
	|НДФЛ, 
	|Взносы,
	|ВзносыФОТ");
	
	УстановитьПривилегированныйРежим(Истина);
	
   	ДанныеЗаполнения.Вставить("Начисления", Объект.Начисления.Выгрузить());
	ДанныеЗаполнения.Вставить("Удержания", Объект.Удержания.Выгрузить());
	
	РассчитатьДокументНачисленияЗарплаты(Объект, ДанныеЗаполнения, Истина);
	
    Объект.Начисления.Загрузить(ДанныеЗаполнения.Начисления);
	Объект.Удержания.Загрузить(ДанныеЗаполнения.Удержания);
	Если ДанныеЗаполнения.НДФЛ <> Неопределено Тогда
		Объект.НДФЛ.Загрузить(ДанныеЗаполнения.НДФЛ);
	КонецЕсли;	
	Если ДанныеЗаполнения.Взносы <> Неопределено Тогда
		Объект.Взносы.Загрузить(ДанныеЗаполнения.Взносы);
	КонецЕсли;	
	Если ДанныеЗаполнения.ВзносыФОТ <> Неопределено Тогда	
		Объект.ВзносыФОТ.Загрузить(ДанныеЗаполнения.ВзносыФОТ);
	КонецЕсли;

	
    УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры


Процедура РассчитатьДокументВедомостьНаВыплатуЗарплаты(ТаблицаРезультатов, ДанныеДляЗаполнения, ДанныеДляРасчета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Объект = Документы.НачислениеЗарплаты.СоздатьДокумент();
	Объект.Организация = ДанныеДляЗаполнения.Организация;
	Объект.МесяцНачисления = ДанныеДляЗаполнения.ПериодРегистрации;
	Объект.Начисления.Загрузить(ТаблицаРезультатов.Начисления);
	
	ВременнаяСсылка = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, ВременнаяСсылка);
	
	// выполнить запись таблицы начислений
	СформироватьНачисленияУдержания(НаборыЗаписей, Ложь, Объект.Организация, Объект.МесяцНачисления, ТаблицаРезультатов.Начисления, Истина);
	
	ДанныеЗаполнения = Новый Структура(
	"НДФЛ, 
	|Взносы,
	|ВзносыФОТ");
	
    // заполнить взносы и НДФЛ
	ЗаполнитьНДФЛиВзносы(Объект, ВременнаяСсылка, НаборыЗаписей, Ложь);
	
	ДанныеЗаполнения.Вставить("НДФЛ", Объект.НДФЛ.Выгрузить());
	ДанныеЗаполнения.Вставить("Взносы", Объект.Взносы.Выгрузить());
	ДанныеЗаполнения.Вставить("ВзносыФОТ", Объект.ВзносыФОТ.Выгрузить());
	
	// выполнить расчет взносов, только по документу
	УчетСтраховыхВзносов.РассчитатьВзносы(ВременнаяСсылка, НаборыЗаписей, ДанныеЗаполнения, Объект.Ссылка, Объект.Организация, Объект.МесяцНачисления, Ложь);
	// выполнить расчет НДФЛ, только по документу
	УчетНДФЛ.РассчитатьНДФЛ(ВременнаяСсылка, НаборыЗаписей, ДанныеЗаполнения, Объект.Ссылка, Объект.Организация, Объект.МесяцНачисления, Ложь);
	
	//Выгружаем расчетные данные из документа
	ТаблицаРезультатов.Взносы = ДанныеЗаполнения.Взносы;
	ТаблицаРезультатов.ВзносыФОТ = ДанныеЗаполнения.ВзносыФОТ;
	ТаблицаРезультатов.НДФЛ = ДанныеЗаполнения.НДФЛ;
	
	//Если необходим расчет от обратного, уточним результаты и проведем цикл расчета еще раз
	Если ДанныеДляРасчета.Способвыплаты.РасчетОтОбратного Тогда
		//Получим дополнительные параметры по данным ЕСВ и НДФЛ
		ТаблицаРасчетаОтОбратного = СформироватьТаблицуДляРасчетаОтОбратного(ТаблицаРезультатов, Объект.МесяцНачисления);
		ВыполнитьРасчетОтОбратногоПоТаблице(ТаблицаРезультатов.Начисления, ТаблицаРасчетаОтОбратного);
		
		//Очистим результаты первого расчета
		НаборыЗаписей.НачисленияУдержанияПоСотрудникам.Очистить();
		НаборыЗаписей.НачисленияУдержанияПоСотрудникам.Записать();
		НаборыЗаписей.ЕСВПоСотрудникам.Очистить();
		НаборыЗаписей.ЕСВПоСотрудникам.Записать();
		НаборыЗаписей.НДФЛПоСотрудникам.Очистить();
		НаборыЗаписей.НДФЛПоСотрудникам.Записать();
		
		// выполнить запись уточненной таблицы начислений
		СформироватьНачисленияУдержания(НаборыЗаписей, Ложь, Объект.Организация, Объект.МесяцНачисления, ТаблицаРезультатов.Начисления, Истина);
		
		ДанныеЗаполнения = Новый Структура(
		"НДФЛ, 
		|Взносы,
		|ВзносыФОТ");

		ДанныеЗаполнения.Вставить("НДФЛ", Объект.НДФЛ.Выгрузить());
		ДанныеЗаполнения.Вставить("Взносы", Объект.Взносы.Выгрузить());
		ДанныеЗаполнения.Вставить("ВзносыФОТ", Объект.ВзносыФОТ.Выгрузить());
		
		// повторно выполнить расчет взносов и НДФЛ документу
		УчетСтраховыхВзносов.РассчитатьВзносы(ВременнаяСсылка, НаборыЗаписей, ДанныеЗаполнения, Объект.Ссылка, Объект.Организация, Объект.МесяцНачисления, Ложь);
		УчетНДФЛ.РассчитатьНДФЛ(ВременнаяСсылка, НаборыЗаписей, ДанныеЗаполнения, Объект.Ссылка, Объект.Организация, Объект.МесяцНачисления, Ложь);

		//уточним информацию по сумме "грязными"
		Для Каждого Начисление из ТаблицаРезультатов.Начисления Цикл
		
			ФизическоеЛицо = Начисление.ФизическоеЛицо;
			Данные = ТаблицаРезультатов.Зарплата.Найти(ФизическоеЛицо,"ФизическоеЛицо");
			Если Данные = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Данные.СуммаГрязными = Начисление.Результат;
			
		КонецЦикла;
		
		//Выгружаем расчетные данные из документа
		ТаблицаРезультатов.Взносы = ДанныеЗаполнения.Взносы.Скопировать();
		ТаблицаРезультатов.ВзносыФОТ = ДанныеЗаполнения.ВзносыФОТ.Скопировать();
		ТаблицаРезультатов.НДФЛ = ДанныеЗаполнения.НДФЛ.Скопировать();
		
	КонецЕсли;
	
	ОтменитьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция СформироватьТаблицуДляРасчетаОтОбратного(ТаблицаРезультатов, МесяцНачисления)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	Запрос.УстановитьПараметр("Начисления",ТаблицаРезультатов.Начисления);
	Запрос.УстановитьПараметр("Взносы",ТаблицаРезультатов.Взносы);
	Запрос.УстановитьПараметр("НДФЛ",ТаблицаРезультатов.НДФЛ);
	Запрос.УстановитьПараметр("МесяцНачисления",МесяцНачисления);
	Запрос.УстановитьПараметр("ВидСтавкиВоенныйСбор",УчетНДФЛ.ЗначенияВоенныйСбор().ВидСтавки);
	
	Запрос.Текст = 
	   "ВЫБРАТЬ
	   |	Начисления.ФизическоеЛицо
	   |ПОМЕСТИТЬ ВТСтроки
	   |ИЗ
	   |	&Начисления КАК Начисления
	   |;

	   |////////////////////////////////////////////////////////////////////////////////
	   |ВЫБРАТЬ
	   |	Взносы.ФизическоеЛицо,
	   |	Взносы.Ставка,
	   |	Взносы.Предел
	   |ПОМЕСТИТЬ ВТСтрокиВзносы
	   |ИЗ
	   |	&Взносы КАК Взносы
	   |;
	   |
	   |////////////////////////////////////////////////////////////////////////////////
	   |ВЫБРАТЬ
	   |	НДФЛ.ФизическоеЛицо,
	   |	НДФЛ.ВидСтавки,
	   |	НДФЛ.УвеличеннаяСтавка,
	   |	&ВидСтавкиВоенныйСбор КАК СтавкаВоенныйСбор
	   |ПОМЕСТИТЬ ВТСтрокиНДФЛКратко
	   |ИЗ
	   |	&НДФЛ КАК НДФЛ
	   |;
	   |
	   |////////////////////////////////////////////////////////////////////////////////
	   |ВЫБРАТЬ
	   |	НДФЛ.ФизическоеЛицо,
	   |	СтавкиНДФЛ1.Ставка КАК Ставка1,
	   |	СтавкиНДФЛ2.Ставка КАК Ставка2,
	   |	СтавкиНДФЛ2.Порог КАК Порог,
	   |	СтавкиНДФЛ3.Ставка КАК Ставка3
	   |ПОМЕСТИТЬ ВТСтрокиНДФЛ
	   |ИЗ
	   |	ВТСтрокиНДФЛКратко КАК НДФЛ
	   |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДФЛ.СрезПоследних(&МесяцНачисления) КАК СтавкиНДФЛ1
	   |	ПО НДФЛ.ВидСтавки = СтавкиНДФЛ1.ВидСтавки
	   |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДФЛ.СрезПоследних(&МесяцНачисления) КАК СтавкиНДФЛ2
	   |	ПО НДФЛ.УвеличеннаяСтавка = СтавкиНДФЛ2.ВидСтавки
	   |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДФЛ.СрезПоследних(&МесяцНачисления) КАК СтавкиНДФЛ3
	   |	ПО НДФЛ.СтавкаВоенныйСбор = СтавкиНДФЛ3.ВидСтавки
	   |;
	   |
	   |////////////////////////////////////////////////////////////////////////////////
	   |ВЫБРАТЬ
	   |	Строки.ФизическоеЛицо,
	   |	ЕСТЬNULL(СтрокиВзносы.Ставка,0) КАК СтавкаЕСВ,
	   |	ЕСТЬNULL(СтрокиВзносы.Предел,0)	КАК ПорогЕСВ,
	   |	ЕСТЬNULL(СтрокиНДФЛ.Ставка1,0)  КАК СтавкаНДФЛ1,
	   |	ЕСТЬNULL(СтрокиНДФЛ.Ставка2,0)  КАК СтавкаНДФЛ2,
	   |	ЕСТЬNULL(СтрокиНДФЛ.Ставка3,0)  КАК СтавкаВС,
	   |	ЕСТЬNULL(СтрокиНДФЛ.Порог,0)  	КАК ПорогНДФЛ
	   |ПОМЕСТИТЬ ВТРезультаты
	   |ИЗ
	   |	ВТСтроки КАК Строки
	   |	ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиВзносы КАК СтрокиВзносы
	   |	ПО Строки.ФизическоеЛицо = СтрокиВзносы.ФизическоеЛицо
	   |	ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиНДФЛ КАК СтрокиНДФЛ
	   |	ПО Строки.ФизическоеЛицо = СтрокиНДФЛ.ФизическоеЛицо
	   |;
	   |
	   |////////////////////////////////////////////////////////////////////////////////
	   |ВЫБРАТЬ
	   |	Результаты.ФизическоеЛицо,
	   |	МАКСИМУМ(Результаты.СтавкаЕСВ) 		КАК СтавкаЕСВ,
	   |	МАКСИМУМ(Результаты.ПорогЕСВ)  		КАК ПорогЕСВ,
	   |	МАКСИМУМ(Результаты.СтавкаНДФЛ1)	КАК СтавкаНДФЛ1,
	   |	МАКСИМУМ(Результаты.СтавкаНДФЛ2)	КАК СтавкаНДФЛ2,
	   |	МАКСИМУМ(Результаты.СтавкаВС)		КАК СтавкаВС,
	   |	МАКСИМУМ(Результаты.ПорогНДФЛ)		КАК ПорогНДФЛ
	   |ИЗ
	   |	ВТРезультаты КАК Результаты
	   |СГРУППИРОВАТЬ ПО
	   |	Результаты.ФизическоеЛицо
	   |";
		
	Возврат Запрос.Выполнить().Выгрузить(); 
	
КонецФункции	

Процедура ВыполнитьРасчетОтОбратногоПоТаблице(Начисления, ТаблицаРасчетаОтОбратного) 
	
	Для Каждого Начисление из Начисления Цикл
		
		ФизическоеЛицо = Начисление.ФизическоеЛицо;
		Данные = ТаблицаРасчетаОтОбратного.Найти(ФизическоеЛицо,"ФизическоеЛицо");
		Если Данные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Начисление.Результат = РасчетОтОбратного(Начисление.Результат, Данные);
		
	КонецЦикла;	
	
	
КонецПроцедуры

// Возвращает результат расчета "от обратного"
//
// Параметры
//  Сумма - сумма "чистыми"
//  ИсходныеДанные - структура, содержит текущие параметры ЕСВ и НДФЛ
//
Функция РасчетОтОбратного(Сумма, ИсходныеДанные) Экспорт
	
	СтавкаЕСВ = ?(ИсходныеДанные.СтавкаЕСВ = NULL,0,ИсходныеДанные.СтавкаЕСВ);
	ПорогЕСВ = ?(ИсходныеДанные.ПорогЕСВ = NULL,0,ИсходныеДанные.ПорогЕСВ);
	СтавкаНДФЛ1 = ?(ИсходныеДанные.СтавкаНДФЛ1 = NULL,0,ИсходныеДанные.СтавкаНДФЛ1);
	СтавкаНДФЛ2 = ?(ИсходныеДанные.СтавкаНДФЛ2 = NULL,0,ИсходныеДанные.СтавкаНДФЛ2);
	ПорогНДФЛ = ?(ИсходныеДанные.ПорогНДФЛ = NULL,0,ИсходныеДанные.ПорогНДФЛ);
	СтавкаВС = ?(ИсходныеДанные.СтавкаВС = NULL,0,ИсходныеДанные.СтавкаВС);
	
	Если НЕ ЗначениеЗаполнено(Сумма) Тогда
		Возврат Сумма;
	КонецЕсли;	
	
	Если СтавкаЕСВ = 0 и (СтавкаНДФЛ1=СтавкаНДФЛ2) Тогда
		//Новая схема (с 2016 г.), без ЕСВ и одна ставка НДФЛ
		Результат = Сумма/(1-СтавкаНДФЛ1-СтавкаВС);
		НДФЛ = Окр(Результат*СтавкаНДФЛ1,2);
		ВоенныйСбор = Окр(Результат*СтавкаВС,2);
	    Контроль = Результат - НДФЛ - ВоенныйСбор;
		
		Дельта = Сумма-Контроль;
		Результат = Результат+Дельта;
		
	Иначе	
		//старая схема
		СтавкаНДФЛ2 = СтавкаНДФЛ2 - СтавкаНДФЛ1;
		
		Результат1 = Сумма/(1-СтавкаЕСВ-СтавкаНДФЛ1+СтавкаЕСВ*СтавкаНДФЛ1-СтавкаВС);
		Результат2 = (Сумма-ПорогНДФЛ*СтавкаНДФЛ2)/(1-СтавкаЕСВ-СтавкаНДФЛ1+СтавкаЕСВ*СтавкаНДФЛ1-СтавкаНДФЛ2+СтавкаЕСВ*СтавкаНДФЛ2-СтавкаВС);
	    Результат3 = (Сумма+ПорогЕСВ*СтавкаЕСВ-ПорогЕСВ*СтавкаЕСВ*СтавкаНДФЛ1-ПорогЕСВ*СтавкаЕСВ*СтавкаНДФЛ2-ПорогНДФЛ*СтавкаНДФЛ2)/(1-СтавкаНДФЛ1-СтавкаНДФЛ2-СтавкаВС);


		Результат12 = МАКС(Результат1,Результат2);
		Результат = МИН(Результат12,Результат3);
		
		//Проверка и поправка
		ЕСВ = Окр(МИН(Результат,ПорогЕСВ)*СтавкаЕСВ,2);
		Если Результат < ПорогНДФЛ Тогда
			НДФЛ = Окр((Результат-Окр(Результат*СтавкаЕСВ,2))*СтавкаНДФЛ1,2);
		Иначе
			НДФЛ1 = Окр((Результат-ЕСВ)*СтавкаНДФЛ1,2);
			НДФЛ2 = Окр((Макс(0,Результат-ЕСВ-ПорогНДФЛ))*СтавкаНДФЛ2,2);
			НДФЛ = НДФЛ1+НДФЛ2;
		КонецЕсли;	
		
	    ВоенныйСбор = Окр(Результат*СтавкаВС,2);
	    Контроль = Результат - ЕСВ - НДФЛ - ВоенныйСбор;

		Дельта = Сумма-Контроль;
		Результат = Результат+Дельта; 
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции	

Процедура РассчитатьДокументИзменениеПараметровРасчетаИндексации(ОбъектРасчета, ТаблицаНачислений) Экспорт
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Если Не ОбъектРасчета.Ссылка.Пустая() Тогда
		НаборыЗаписейОбъекта = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.ИзменениеПараметровРасчетаИндексации, ОбъектРасчета.Ссылка);
		НаборыЗаписейОбъекта.ПараметрыРасчетаИндексации.Записать();
	КонецЕсли;	
	
	Объект = Документы.НачислениеЗарплаты.СоздатьДокумент();
	Объект.Организация = ОбъектРасчета.Организация;
	Объект.МесяцНачисления = НачалоМесяца(ОбъектРасчета.Дата);
	Объект.Начисления.Загрузить(ТаблицаНачислений);
	Объект.ПредварительныйРасчет = Истина;
	
	ДанныеЗаполнения = Новый Структура(
	"Начисления, 
	|Удержания, 
	|НДФЛ, 
	|Взносы,
	|ВзносыФОТ");
	
   	ДанныеЗаполнения.Вставить("Начисления", Объект.Начисления.Выгрузить());
    ДанныеЗаполнения.Вставить("Удержания", Объект.Удержания.Выгрузить());
	
	РассчитатьДокументНачисленияЗарплаты(Объект, ДанныеЗаполнения, Ложь);
	
	ТаблицаНачислений = ДанныеЗаполнения.Начисления.Скопировать();
	
	ОтменитьТранзакцию();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПересчитатьНДФЛиВзносы(Объект) Экспорт
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	ВременнаяСсылка = Документы.НачислениеЗарплаты.ПолучитьСсылку();
	НаборыЗаписей = ЗарплатаКадры.НаборыЗаписейРегистратора(Метаданные.Документы.НачислениеЗарплаты, ВременнаяСсылка);
	
	СформироватьДвиженияНачислений(НаборыЗаписей, Ложь, Объект.Организация, Объект.МесяцНачисления, Объект.Начисления.Выгрузить(), Истина);
	СформироватьНачисленияУдержания(НаборыЗаписей, Ложь, Объект.Организация, Объект.МесяцНачисления, НаборыЗаписей.Начисления.Выгрузить(), Истина);
	
	ДанныеЗаполнения = Новый Структура(
	"НДФЛ, 
	|Взносы,
	|ВзносыФОТ");
	
	ЗаполнитьНДФЛиВзносы(Объект, ВременнаяСсылка, НаборыЗаписей);
	
	ДанныеЗаполнения.Вставить("НДФЛ", Объект.НДФЛ.Выгрузить());
	ДанныеЗаполнения.Вставить("Взносы", Объект.Взносы.Выгрузить());
	ДанныеЗаполнения.Вставить("ВзносыФОТ", Объект.ВзносыФОТ.Выгрузить());
	
	Если НЕ Объект.КорректироватьВзносы Тогда
		// выполнить расчет взносов
		УчетСтраховыхВзносов.РассчитатьВзносы(ВременнаяСсылка, НаборыЗаписей, ДанныеЗаполнения, Объект.Ссылка, Объект.Организация, Объект.МесяцНачисления);
	КонецЕсли;	
	Если НЕ Объект.КорректироватьНДФЛ Тогда
		// выполнить расчет НДФЛ
		УчетНДФЛ.РассчитатьНДФЛ(ВременнаяСсылка, НаборыЗаписей, ДанныеЗаполнения, Объект.Ссылка, Объект.Организация, Объект.МесяцНачисления);
	КонецЕсли;	
	
	ОтменитьТранзакцию();
	
    УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьНачисленияУдержания(Объект)
	
	РезультатЗаполнения = РасчетЗарплаты.РезультатНачисленияРасчетаЗарплаты(Объект.Организация, Объект.ПредварительныйРасчет, Объект.МесяцНачисления, ?(Объект.ПредварительныйРасчет, КонецДня(Объект.Дата),КонецМесяца(Объект.МесяцНачисления)), Объект.МесяцНачисления, Объект.Ссылка, Объект.Подразделение, );
	Объект.Начисления.Загрузить(РезультатЗаполнения.РезультатНачисления);
	Объект.Удержания.Загрузить(РезультатЗаполнения.РезультатУдержания);
	
КонецПроцедуры

Процедура ДоЗаполнитьНачисленияУдержания(Объект, СписокФизическихЛиц, ДанныеЗаполнения)
	
	РезультатЗаполнения = РасчетЗарплаты.РезультатНачисленияРасчетаЗарплаты(Объект.Организация, Объект.ПредварительныйРасчет, Объект.МесяцНачисления, ?(Объект.ПредварительныйРасчет, КонецДня(Объект.Дата),КонецМесяца(Объект.МесяцНачисления)), Объект.МесяцНачисления, Объект.Ссылка, Объект.Подразделение, СписокФизическихЛиц);
	ДанныеЗаполнения.Вставить("Начисления", РезультатЗаполнения.РезультатНачисления);
	ДанныеЗаполнения.Вставить("Удержания", РезультатЗаполнения.РезультатУдержания);
	
КонецПроцедуры

Процедура ЗаполнитьНДФЛиВзносы(Объект, ВременнаяСсылка, НаборыЗаписей, ПоВсемДокументам = Истина) Экспорт
	
	Если Объект.КорректироватьНДФЛ И Объект.КорректироватьВзносы Тогда
		Возврат;
	КонецЕсли;
	
	// Составляем временные таблицы для расчета НДФЛ и взносов
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Начисления.Сотрудник
	|ПОМЕСТИТЬ ВТСотрудникиДокумента
	|ИЗ
	|	&Начисления КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	ВТСотрудникиДокумента КАК СотрудникиДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
	|		ПО (Сотрудники.Ссылка = СотрудникиДокумента.Сотрудник)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Начисления", Объект.Начисления.Выгрузить());
	Запрос.Выполнить();
	
	ДатаОперации = Мин(Объект.Дата, КонецДня(Объект.МесяцНачисления));
	
	ЗаполнитьВзносы(Объект, МенеджерВременныхТаблиц, ВременнаяСсылка, НаборыЗаписей, ПоВсемДокументам);
	ЗаполнитьНДФЛ(Объект, МенеджерВременныхТаблиц, ВременнаяСсылка, НаборыЗаписей, ПоВсемДокументам);

	
КонецПроцедуры

Процедура ДоЗаполнитьНДФЛиВзносы(Объект, ВременнаяСсылка, НаборыЗаписей, СписокФизическихЛиц, ДанныеЗаполнения) Экспорт
	
	Если Объект.КорректироватьНДФЛ И Объект.КорректироватьВзносы Тогда
		Возврат;
	КонецЕсли;
	
	// Составляем временные таблицы для расчета НДФЛ и взносов
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка В (&СписокФизическихЛиц)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	Запрос.Выполнить();
	
	ДатаОперации = Мин(Объект.Дата, КонецДня(Объект.МесяцНачисления));
	
	ДоЗаполнитьВзносы(Объект, МенеджерВременныхТаблиц, ВременнаяСсылка, НаборыЗаписей, ДанныеЗаполнения);
	ДоЗаполнитьНДФЛ(Объект, МенеджерВременныхТаблиц, ВременнаяСсылка, НаборыЗаписей, ДанныеЗаполнения);

	
КонецПроцедуры


Процедура ЗаполнитьНДФЛ(Объект, МенеджерВременныхТаблиц, ВременнаяСсылка, НаборыЗаписей, ПоВсемДокументам = Истина)
	
	Если Объект.КорректироватьНДФЛ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение НДФЛ
	НДФЛ = УчетНДФЛ.ЗаполнитьНДФЛ(ВременнаяСсылка, МенеджерВременныхТаблиц, Объект.Организация, Объект.МесяцНачисления, Объект.ЭтоПересчетНДФЛ, ПоВсемДокументам);
	
	// Перенос результата расчета НДФЛ в форму
	Объект.НДФЛ.Загрузить(НДФЛ);
	
КонецПроцедуры

Процедура ДоЗаполнитьНДФЛ(Объект, МенеджерВременныхТаблиц, ВременнаяСсылка, НаборыЗаписей, ДанныеЗаполнения)
	
	Если Объект.КорректироватьНДФЛ Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение НДФЛ
	НДФЛ = УчетНДФЛ.ЗаполнитьНДФЛ(ВременнаяСсылка, МенеджерВременныхТаблиц, Объект.Организация, Объект.МесяцНачисления, Объект.ЭтоПересчетНДФЛ, Истина);
	НДФЛ.Колонки.Добавить("Налог");
	НДФЛ.Колонки.Добавить("Доход");
	НДФЛ.Колонки.Добавить("Льгота");
	НДФЛ.Колонки.Добавить("КоличествоЛьгот");
	НДФЛ.Колонки.Добавить("ДоходПолный");
	НДФЛ.Колонки.Добавить("СуммаЛьготы");
	
	ДанныеЗаполнения.Вставить("НДФЛ", НДФЛ);
	
КонецПроцедуры


Процедура ЗаполнитьВзносы(Объект, МенеджерВременныхТаблиц, ВременнаяСсылка, НаборыЗаписей, ПоВсемДокументам = Истина)
	
	Если Объект.КорректироватьВзносы Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение страховых взносов
	СтруктураВзносы = УчетСтраховыхВзносов.ЗаполнитьВзносы(ВременнаяСсылка, МенеджерВременныхТаблиц, Объект.Организация, Объект.МесяцНачисления, ПоВсемДокументам);
	
	// Перенос результата расчета страховых взносов в форму
	Объект.Взносы.Загрузить(СтруктураВзносы.Взносы);
	Объект.ВзносыФОТ.Загрузить(СтруктураВзносы.ВзносыФОТ);
	
КонецПроцедуры

Процедура ДоЗаполнитьВзносы(Объект, МенеджерВременныхТаблиц, ВременнаяСсылка, НаборыЗаписей, ДанныеЗаполнения)
	
	Если Объект.КорректироватьВзносы Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение страховых взносов
	СтруктураВзносы = УчетСтраховыхВзносов.ЗаполнитьВзносы(ВременнаяСсылка, МенеджерВременныхТаблиц, Объект.Организация, Объект.МесяцНачисления, Истина);
	
	СтруктураВзносы.Взносы.Колонки.Добавить("СтатьяНалоговойДекларации");
	СтруктураВзносы.Взносы.Колонки.Добавить("Предел");
	СтруктураВзносы.Взносы.Колонки.Добавить("База");
	СтруктураВзносы.Взносы.Колонки.Добавить("БазаВзноса");
	СтруктураВзносы.Взносы.Колонки.Добавить("Результат");
	СтруктураВзносы.Взносы.Колонки.Добавить("Ставка");
	СтруктураВзносы.Взносы.Колонки.Добавить("ОтработаноДней");
	СтруктураВзносы.Взносы.Колонки.Добавить("ОтработаноДнейВсего");
	СтруктураВзносы.Взносы.Колонки.Добавить("БазаВычет");
	СтруктураВзносы.Взносы.Колонки.Добавить("ТипНачисления");
	СтруктураВзносы.Взносы.Колонки.Добавить("БазаОтпускные");
	СтруктураВзносы.Взносы.Колонки.Добавить("КоэффициентСтавки");
	СтруктураВзносы.Взносы.Колонки.Добавить("МинимальнаяБаза");
	
	ДанныеЗаполнения.Вставить("Взносы", СтруктураВзносы.Взносы);
	ДанныеЗаполнения.Вставить("ВзносыФОТ", СтруктураВзносы.ВзносыФОТ);
	
КонецПроцедуры


Функция РазностьДатьПроизводственныхКалендарейПоВидамДней(ПроизводственныйКалендарь, НачалоПериода, ОкончаниеПериода) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидыДнейПроизводственногоКалендаря.Ссылка КАК ВидДня,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеПроизводственногоКалендаря.Дата) КАК КоличествоДней
		|ИЗ
		|	Перечисление.ВидыДнейПроизводственногоКалендаря КАК ВидыДнейПроизводственногоКалендаря
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|		ПО ВидыДнейПроизводственногоКалендаря.Ссылка = ДанныеПроизводственногоКалендаря.ВидДня
		|			И (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода)
		|			И (ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыДнейПроизводственногоКалендаря.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидДня";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоДнейПоВидам = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		КоличествоДнейПоВидам.Вставить(Выборка.ВидДня, Выборка.КоличествоДней);
	КонецЦикла;
		
	Возврат КоличествоДнейПоВидам;
	
КонецФункции

Функция РабочихДнейЧасовВПериоде(ПроизводственныйКалендарь, НачалоПериода, ОкончаниеПериода) Экспорт
	
	РабочихДнейЧасов = Новый Структура("Дней,Часов", 0, 0);
	
	ДанныеКалендаря = РазностьДатьПроизводственныхКалендарейПоВидамДней(ПроизводственныйКалендарь, НачалоПериода, ОкончаниеПериода);
	
	РабочиеДни = ДанныеКалендаря.Получить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	ПредпраздничныеДни = ДанныеКалендаря.Получить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	
	РабочихДнейЧасов.Дней = РабочиеДни + ПредпраздничныеДни;
	РабочихДнейЧасов.Часов = РабочиеДни * 8 + ПредпраздничныеДни * 7;
	
	Возврат РабочихДнейЧасов;
	
КонецФункции

Функция СократитьПредпраздничныеЧасы(УчитыватьПредпраздничные, ПроизводственныйКалендарь, НачалоПериода, ОкончаниеПериода) Экспорт
	
	Если НЕ УчитыватьПредпраздничные Тогда
		Возврат 0;
	КонецЕсли;	
	
	ДанныеКалендаря = РазностьДатьПроизводственныхКалендарейПоВидамДней(ПроизводственныйКалендарь, НачалоПериода, ОкончаниеПериода);
	
	ПредпраздничныеДни = ДанныеКалендаря.Получить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	
	Возврат ПредпраздничныеДни;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции-конструкторы используемых коллекций

Функция ПустаяТаблицаСотрудниковНачислений() Экспорт
	
	СотрудникиНачисления = Новый ТаблицаЗначений;
	СотрудникиНачисления.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	СотрудникиНачисления.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	СотрудникиНачисления.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	СотрудникиНачисления.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	Возврат СотрудникиНачисления;
	
КонецФункции

// Конструирует таблицу начислений, аналогичную по структуре таблице расчетного документа
//
Функция ПустаяТаблицаНачисления() Экспорт
	
	Начисления = Новый ТаблицаЗначений;
	Начисления.Колонки.Добавить("Авторасчет", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Начисления.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Начисления.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Начисления.Колонки.Добавить("Должность", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	Начисления.Колонки.Добавить("Начисление", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	Начисления.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("НачалоБазовогоПериода", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ОкончаниеБазовогоПериода", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("Размер", Новый ОписаниеТипов("Число"));
	Начисления.Колонки.Добавить("Результат", Новый ОписаниеТипов("Число"));
	Начисления.Колонки.Добавить("КалендарныеДни", Новый ОписаниеТипов("Число"));
	Начисления.Колонки.Добавить("ОтработаноДней", Новый ОписаниеТипов("Число"));
	Начисления.Колонки.Добавить("ОтработаноЧасов", Новый ОписаниеТипов("Число"));
	Начисления.Колонки.Добавить("НормаДней", Новый ОписаниеТипов("Число"));
	Начисления.Колонки.Добавить("НормаЧасов", Новый ОписаниеТипов("Число"));
	Начисления.Колонки.Добавить("НормаДнейЗаМесяц", Новый ОписаниеТипов("Число"));
	Начисления.Колонки.Добавить("НормаЧасовЗаМесяц", Новый ОписаниеТипов("Число"));
	Начисления.Колонки.Добавить("ОплаченоДней", Новый ОписаниеТипов("Число"));
	Начисления.Колонки.Добавить("ОплаченоЧасов", Новый ОписаниеТипов("Число"));
	
	Начисления.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	
	Возврат Начисления;
	
КонецФункции

// Конструирует таблицу Удержаний, аналогичную по структуре таблице расчетного документа
//
Функция ПустаяТаблицаУдержания() Экспорт
	
	Начисления = Новый ТаблицаЗначений;
	Начисления.Колонки.Добавить("Авторасчет", Новый ОписаниеТипов("Булево"));
	Начисления.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Начисления.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Начисления.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Начисления.Колонки.Добавить("Удержание", Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Удержания"));
	Начисления.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("НачалоБазовогоПериода", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("ОкончаниеБазовогоПериода", Новый ОписаниеТипов("Дата"));
	Начисления.Колонки.Добавить("Размер", Новый ОписаниеТипов("Число"));
	Начисления.Колонки.Добавить("Результат", Новый ОписаниеТипов("Число"));
	
	Начисления.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Число"));
	
	Возврат Начисления;
	
КонецФункции


Процедура РасчетСтрокиНачисленияЗарплаты(СтрокаНачисления) Экспорт
	
	РасчетПредопределеннымСпособом = ТаблицаРасчетаПредопределеннымСпособом();
	Начисление = СтрокаНачисления.Начисление;
	
	ИсходныеДанные = Новый Структура();

	ИсходныеДанные.Вставить("СпособРасчета", Начисление.СпособРасчета);
	ИсходныеДанные.Вставить("КатегорияНачисления", Начисление.КатегорияНачисленияИлиНеоплаченногоВремени);
	ИсходныеДанные.Вставить("Размер", СтрокаНачисления.Размер);
		
	ИсходныеДанные.Вставить("НормаДнейЗаМесяц", СтрокаНачисления.НормаДнейЗаМесяц);
	ИсходныеДанные.Вставить("НормаЧасовЗаМесяц", СтрокаНачисления.НормаЧасовЗаМесяц);
		
	Если Начисление.ЗачетОтработанногоВремени Тогда
		ИсходныеДанные.Вставить("ДнейПоКалендарю", СтрокаНачисления.ОтработаноДней);
		ИсходныеДанные.Вставить("ЧасовПоКалендарю", СтрокаНачисления.ОтработаноЧасов);
	Иначе
		ИсходныеДанные.Вставить("ДнейПоКалендарю", 0);
		ИсходныеДанные.Вставить("ЧасовПоКалендарю", 0);
	КонецЕсли;	
		
	ИсходныеДанные.Вставить("РасчетнаяБаза", 0);
	
	НоваяСтрока = РасчетПредопределеннымСпособом.Добавить();
	НоваяСтрока.СпособРасчета = Начисление.СпособРасчета;
	НоваяСтрока.ЗаписьРасчета = СтрокаНачисления;
	НоваяСтрока.ИсходныеДанные = ИсходныеДанные;
	
	// Выполняем расчет предопределенным способом
	РассчитатьПредопределеннымСпособом(РасчетПредопределеннымСпособом, Неопределено, Неопределено, Неопределено);
	
КонецПроцедуры	

// Расчет данных для начислений 
//
Процедура РассчитатьНачисления(ВременнаяСсылка, НаборыЗаписей, ДанныеДляНачисления, ДокументСсылка, Организация, МесяцНачисления, Перерасчет, ДанныеФормыОбъект = Неопределено)
	
	Если ДанныеДляНачисления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Нужно подготовить таблицу значений, 
	// сформировать на ее основе движения по регистру расчета
	// запросом выбирать записи в соответствии с очередностью, рассчитывать их и записывать с заполненным результатом
	// после окончания расчета перенести результаты в исходную коллекцию ДанныеДляНачисления
	
	Начисления = ПустаяТаблицаНачисления();
	
	ИсходныеДанныеПоИдентификаторуСтроки = Новый Соответствие;
	
	ИдентификаторСтроки = 1;
	Для Каждого СтрокаДанных Из ДанныеДляНачисления Цикл
		// Заполняем коллекцию для формирования движений
		НоваяСтрока = Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		
		СтрокаДанных.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтроки;
		
		ИсходныеДанные = Новый Структура("Результат", 0);
		ИсходныеДанныеПоИдентификаторуСтроки[ИдентификаторСтроки] = ИсходныеДанные;
		
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;

	
	СформироватьДвиженияНачислений(НаборыЗаписей, Ложь, Организация, МесяцНачисления, Начисления, Истина);
	
	Если Перерасчет И ПолучитьФункциональнуюОпцию("ИспользоватьУпрощенныйУчетНачислений") Тогда
		
	Иначе	
	
		// Выбираем записи и рассчитываем их в соответствии с очередностью расчета
		// Отдельно выделяем индексацию
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР 
		|	 КОГДА Начисления.ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Индексация)  
		|    ТОГДА ИСТИНА
		|    ИНАЧЕ ЛОЖЬ
		|   КОНЕЦ КАК Индексация,
		|	ВЫБОР 
		|	 КОГДА Начисления.ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоМЗП)  
		|    ТОГДА ИСТИНА
		|    ИНАЧЕ ЛОЖЬ
		|   КОНЕЦ КАК ДоплатаДоМЗП,
		|	Начисления.ВидРасчета.ОчередностьРасчета КАК ОчередностьРасчета
		|ИЗ
		|	РегистрРасчета.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Регистратор = &Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	Начисления.ВидРасчета.ОчередностьРасчета";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Регистратор", ВременнаяСсылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		// Составляем соответствие строк для более быстрого поиска
		СтрокиНабора = Новый Соответствие;
		Для Каждого СтрокаНабора Из НаборыЗаписей.Начисления Цикл
			СтрокиНабора.Вставить(СтрокаНабора.ИдентификаторСтроки, СтрокаНабора);
		КонецЦикла;
		
		Пока Выборка.Следующий() Цикл
			//Расчет индексации выделен отдельно для того, чтобы не загромождать алгоритмы
			Если НЕ Выборка.Индексация и НЕ Выборка.ДоплатаДоМЗП Тогда
				РассчитатьНачисленияОчередности(ДокументСсылка, Организация, МесяцНачисления, Выборка.ОчередностьРасчета, СтрокиНабора, НаборыЗаписей, ДанныеФормыОбъект, ИсходныеДанныеПоИдентификаторуСтроки);
			ИначеЕсли Выборка.Индексация Тогда
				РассчитатьНачисленияИндексации(ДокументСсылка, Организация, МесяцНачисления, СтрокиНабора, НаборыЗаписей, ДанныеФормыОбъект, ИсходныеДанныеПоИдентификаторуСтроки);
			ИначеЕсли Выборка.ДоплатаДоМЗП Тогда
				РассчитатьНачисленияДоплатаДоМЗП(ДокументСсылка, Организация, МесяцНачисления, СтрокиНабора, НаборыЗаписей, ДанныеФормыОбъект, ИсходныеДанныеПоИдентификаторуСтроки);
			КонецЕсли;	
			НаборыЗаписей.Начисления.Записать(Истина, Истина);
		КонецЦикла;
		
		// Перенос результата расчета в ДанныеДляНачисления
		Для Каждого СтрокаДанных Из ДанныеДляНачисления Цикл
			СтрокаНабора = СтрокиНабора[СтрокаДанных.ИдентификаторСтрокиВидаРасчета];
			СтрокаДанных.КалендарныеДни = СтрокаНабора.КалендарныеДни;
			СтрокаДанных.ОтработаноДней = СтрокаНабора.ОтработаноДней;
			СтрокаДанных.ОтработаноЧасов = СтрокаНабора.ОтработаноЧасов;
			СтрокаДанных.НормаДней = СтрокаНабора.НормаДней;
			СтрокаДанных.НормаЧасов = СтрокаНабора.НормаЧасов;
			СтрокаДанных.НормаДнейЗаМесяц = СтрокаНабора.НормаДнейЗаМесяц;
			СтрокаДанных.НормаЧасовЗаМесяц = СтрокаНабора.НормаЧасовЗаМесяц;
			СтрокаДанных.Результат = СтрокаНабора.Результат;
			
		КонецЦикла;
		
	КонецЕсли;	
		
	СформироватьНачисленияУдержания(НаборыЗаписей, Ложь, Организация, МесяцНачисления, НаборыЗаписей.Начисления.Выгрузить(), Истина);
	
КонецПроцедуры

Процедура РассчитатьНачисленияОчередности(ДокументСсылка, Организация, МесяцНачисления, ОчередностьРасчета, СтрокиНабора, НаборыЗаписей, ДанныеФормыОбъект, ИсходныеДанныеПоИдентификаторуСтроки)
	
	ГрафикРаботы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГрафикРаботы");
	ПроизводственныйКалендарь = КалендарныеГрафики.ПроизводственныйКалендарьУкраины();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.НомерСтроки,
	|	Начисления.ИдентификаторСтроки,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	Начисления.Размер,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания
	|ПОМЕСТИТЬ ВТНачисления
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Регистратор = &ВременныйРегистратор
	|	И Начисления.Авторасчет
	|	И Начисления.ВидРасчета.ОчередностьРасчета = &ОчередностьРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания
	|ПОМЕСТИТЬ ВТПериодыНачислений
	|ИЗ
	|	ВТНачисления КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачисленияБаза.НомерСтроки,
	|	СУММА(НачисленияБаза.РезультатБаза) КАК РезультатБаза
	|ПОМЕСТИТЬ ВТНачисленияБаза
	|ИЗ
	|	РегистрРасчета.Начисления.БазаНачисления(
	|			&Измерения,
	|			&Измерения,
	|			&Разрезы,
	|			Регистратор = &ВременныйРегистратор
	|				И ВидРасчета.ОчередностьРасчета = &ОчередностьРасчета
	|				И ВидРасчета.СпособРасчета В (&СпособыРасчетаЗависимыеОтБазы)
	|				) КАК НачисленияБаза
	|ГДЕ
	|	НачисленияБаза.РегистраторРазрез <> &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияБаза.НомерСтроки
	|;
	|";
	
	Если ЗначениеЗаполнено(ГрафикРаботы) Тогда
		
		ТекстЗапроса = ТекстЗапроса +"
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.ДатаНачала КАК ДатаГрафика
		|ПОМЕСТИТЬ ВТДатыГрафика
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисление
		|		ПО (Начисление.Ссылка = Начисления.ВидРасчета)
		|			И (Начисление.ОчередностьРасчета = &ОчередностьРасчета)
		|           И (Начисление.ЗачетОтработанногоВремени ИЛИ Начисление.ЗачетНормыВремени)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Начисления.ДатаОкончания
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисление
		|		ПО (Начисление.Ссылка = Начисления.ВидРасчета)
		|			И (Начисление.ОчередностьРасчета = &ОчередностьРасчета)
		|           И (Начисление.ЗачетОтработанногоВремени ИЛИ Начисление.ЗачетНормыВремени)
		|
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДатыГрафика.ДатаГрафика
		|ПОМЕСТИТЬ ВТРазличныеДатыГрафика
		|ИЗ
		|	ВТДатыГрафика КАК ДатыГрафика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГОД(ДатыГрафика.ДатаГрафика) КАК Год
		|ПОМЕСТИТЬ ВТРазличныеГодыГрафика
		|ИЗ
		|	ВТДатыГрафика КАК ДатыГрафика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КалендарныеГрафики.Год,
		|	КалендарныеГрафики.ДатаГрафика,
		|	КалендарныеГрафики.ДеньВключенВГрафик
		|ПОМЕСТИТЬ ВТКалендарныеГрафики
		|ИЗ
		|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРазличныеГодыГрафика КАК ГодыГрафика
		|		ПО (ГодыГрафика.Год = КалендарныеГрафики.Год)
		|ГДЕ
		|	КалендарныеГрафики.Календарь = &ГрафикРаботы
		|;
		|
		|ВЫБРАТЬ
		|	ДатыГрафика.ДатаГрафика,
		|	КОЛИЧЕСТВО(ДниВключенныеВГрафик.ДатаГрафика) КАК КоличествоДнейВГрафикеСНачалаГода
		|ПОМЕСТИТЬ ВТКоличествоДнейВключенныхВГрафик
		|ИЗ
		|	ВТРазличныеДатыГрафика КАК ДатыГрафика
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКалендарныеГрафики КАК ДниВключенныеВГрафик
		|		ПО (ДниВключенныеВГрафик.Год = ГОД(ДатыГрафика.ДатаГрафика))
		|			И (ДниВключенныеВГрафик.ДатаГрафика <= ДатыГрафика.ДатаГрафика)
		|			И (ДниВключенныеВГрафик.ДеньВключенВГрафик)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДатыГрафика.ДатаГрафика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыГрафика.ДатаГрафика,
		|	ЕСТЬNULL(ДанныеГрафика.ДеньВключенВГрафик, ЛОЖЬ) КАК ДеньВключенВГрафик,
		|	ДниВключенныеВГрафик.КоличествоДнейВГрафикеСНачалаГода
		|ПОМЕСТИТЬ ВТГрафикРезультаты
		|ИЗ
		|	ВТРазличныеДатыГрафика КАК ДатыГрафика
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКалендарныеГрафики КАК ДанныеГрафика
		|		ПО (ДанныеГрафика.Год = ГОД(ДатыГрафика.ДатаГрафика))
		|			И (ДанныеГрафика.ДатаГрафика = ДатыГрафика.ДатаГрафика)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоДнейВключенныхВГрафик КАК ДниВключенныеВГрафик
		|		ПО (ДниВключенныеВГрафик.ДатаГрафика = ДатыГрафика.ДатаГрафика)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	0 КАК КоличествоДней,
		|	0 КАК КоличествоПредраздничныхДней
		|ПОМЕСТИТЬ ВТПроизводственныйКалендарьРезультаты
		|ИЗ
		|	ВТПериодыНачислений КАК Начисления
		|ГДЕ
		|	ЛОЖЬ
		|;
		|";
	Иначе
	
		ТекстЗапроса = ТекстЗапроса +"
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания
		|ПОМЕСТИТЬ ВТДатыГрафика
		|ИЗ
		|	ВТНачисления КАК Начисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисление
		|		ПО (Начисление.Ссылка = Начисления.ВидРасчета)
		|			И (Начисление.ОчередностьРасчета = &ОчередностьРасчета)
		|           И (Начисление.ЗачетОтработанногоВремени ИЛИ Начисление.ЗачетНормыВремени)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МИНИМУМ(ДатыГрафика.ДатаНачала) КАК ДатаНачала,
		|	МАКСИМУМ(ДатыГрафика.ДатаОкончания) КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТПериодыГрафика
		|ИЗ
		|	ВТДатыГрафика КАК ДатыГрафика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеПроизводственногоКалендаря.Дата,
		|	ДанныеПроизводственногоКалендаря.ВидДня
		|ПОМЕСТИТЬ ВТПроизводственныйКалендарь
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	ВТПериодыГрафика КАК ПериодыГрафика
		|	ПО ПериодыГрафика.ДатаНачала <= ДанныеПроизводственногоКалендаря.Дата 
		|	 И ПериодыГрафика.ДатаОкончания >=  ДанныеПроизводственногоКалендаря.Дата 
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
		|   И (ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|     ИЛИ ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))
		|
		|;		
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания,
		|	КОЛИЧЕСТВО(ДанныеПроизводственногоКалендаря.Дата) КАК КоличествоДней,
		|	СУММА(
		|     ВЫБОР КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
		|      ТОГДА 1
		|      ИНАЧЕ 0
		|     КОНЕЦ) КАК КоличествоПредраздничныхДней
		|ПОМЕСТИТЬ ВТПроизводственныйКалендарьРезультаты
		|ИЗ
		|	ВТПериодыНачислений КАК Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПроизводственныйКалендарь КАК ДанныеПроизводственногоКалендаря
		|		ПО ДанныеПроизводственногоКалендаря.Дата МЕЖДУ Начисления.ДатаНачала И Начисления.ДатаОкончания
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.ДатаНачала,
		|	Начисления.ДатаОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДАТАВРЕМЯ(1,1,1) КАК ДатаГрафика,
		|	ЛОЖЬ КАК ДеньВключенВГрафик,
		|	0 КАК КоличествоДнейВГрафикеСНачалаГода
		|ПОМЕСТИТЬ ВТГрафикРезультаты
		|ИЗ
		|	ВТНачисления КАК Начисления
		|ГДЕ ЛОЖЬ
		|;
		|";
	КонецЕсли;
	
ТекстЗапроса = ТекстЗапроса +"	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(НачисленияБаза.РезультатБаза, 0) КАК РасчетнаяБаза,
	|	Начисление.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияНачисления,
	|	Начисление.СпособРасчета КАК СпособРасчета,
	|	Начисление.ЗачетОтработанногоВремени,
	|	Начисление.ЗачетНормыВремени,
	|	Начисления.ИдентификаторСтроки,
	|	Начисления.Размер,
	|	ЕСТЬNULL(ГрафикРезультатыОкончание.КоличествоДнейВГрафикеСНачалаГода, 0) КАК ДнейОкончание,
	|	ЕСТЬNULL(ГрафикРезультатыНачало.КоличествоДнейВГрафикеСНачалаГода, 0) КАК ДнейНачало,
	|	ЕСТЬNULL(ГрафикРезультатыНачало.ДеньВключенВГрафик, ЛОЖЬ) КАК ДеньВключенВГрафикНачало,
	|	ЕСТЬNULL(ПроизводственныйКалендарьРезультаты.КоличествоДней, 0) КАК КоличествоДней,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	ЕСТЬNULL(ПроизводственныйКалендарьРезультаты.КоличествоПредраздничныхДней, 0) КАК КоличествоПредраздничныхДней
	|ИЗ
	|	ВТНачисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисление
	|		ПО (Начисление.Ссылка = Начисления.ВидРасчета)
	|			И (Начисление.ОчередностьРасчета = &ОчередностьРасчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияБаза КАК НачисленияБаза
	|		ПО Начисления.НомерСтроки = НачисленияБаза.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикРезультаты КАК ГрафикРезультатыНачало
	|		ПО Начисления.ДатаНачала = ГрафикРезультатыНачало.ДатаГрафика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикРезультаты КАК ГрафикРезультатыОкончание
	|		ПО Начисления.ДатаОкончания = ГрафикРезультатыОкончание.ДатаГрафика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПроизводственныйКалендарьРезультаты КАК ПроизводственныйКалендарьРезультаты
	|		ПО Начисления.ДатаНачала = ПроизводственныйКалендарьРезультаты.ДатаНачала
	|		 И Начисления.ДатаОкончания = ПроизводственныйКалендарьРезультаты.ДатаОкончания
	|";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ВременныйРегистратор", НаборыЗаписей["Начисления"].Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	
	Запрос.УстановитьПараметр("СпособыРасчетаЗависимыеОтБазы",РасчетЗарплаты.СпособыРасчетаЗависимыеОтБазы());
	ГрафикРаботы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГрафикРаботы");
	УчитыватьПредпраздничные = ГрафикРаботы.УчитыватьПраздники;
	ПроизводственныйКалендарьПоГрафику = ГрафикРаботы.ПроизводственныйКалендарь;
	
	ПроизводственныйКалендарь = КалендарныеГрафики.ПроизводственныйКалендарьУкраины();
	
	Запрос.УстановитьПараметр("ГрафикРаботы", ГрафикРаботы);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
	
	Измерения = Новый Массив(1);
	Измерения[0] = "Сотрудник";
	Запрос.УстановитьПараметр("Измерения",Измерения);
	Разрезы = Новый Массив(1);
	Разрезы[0] = "Регистратор";
	Запрос.УстановитьПараметр("Разрезы", Разрезы);
	РезультатЗапроса = Запрос.Выполнить();
	
	
	// получить число дней по календарю
	НормаДнейЗаМесяц = 0;
	НормаЧасовЗаМесяц = 0;
	Если ЗначениеЗаполнено(ГрафикРаботы) Тогда
		Попытка
			НормаДнейЗаМесяц = КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(ГрафикРаботы, НачалоМесяца(МесяцНачисления), КонецМесяца(МесяцНачисления));
			НормаЧасовЗаМесяц = НормаДнейЗаМесяц*8;
			НормаЧасовЗаМесяц = НормаЧасовЗаМесяц - СократитьПредпраздничныеЧасы(УчитыватьПредпраздничные, ПроизводственныйКалендарьПоГрафику, НачалоМесяца(МесяцНачисления), КонецМесяца(МесяцНачисления));
		Исключение
			НормаДнейЗаМесяц = 0;
			НормаЧасовЗаМесяц = 0;
		КонецПопытки;
	Иначе
		
		РабочихДнейЧасов = РабочихДнейЧасовВПериоде(ПроизводственныйКалендарь,  НачалоМесяца(МесяцНачисления), КонецМесяца(МесяцНачисления));
				
		НормаДнейЗаМесяц = РабочихДнейЧасов.Дней;
		НормаЧасовЗаМесяц = РабочихДнейЧасов.Часов;
	КонецЕсли;
	
	Если НормаДнейЗаМесяц = 0 И НормаЧасовЗаМесяц = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Нет данных о времени в производственном календаре (графике работы)!';uk='Немає даних про час у виробничому календарі (графік роботи)!'");
		Сообщение.Сообщить();
	КонецЕсли;	
	
	// Таблица для сбора записей, рассчитываемых предопределенным способом
	РасчетПредопределеннымСпособом = ТаблицаРасчетаПредопределеннымСпособом();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаНабора = СтрокиНабора[Выборка.ИдентификаторСтроки];
		ИсходныеДанные = ИсходныеДанныеПоИдентификаторуСтроки[Выборка.ИдентификаторСтроки];

		ИсходныеДанные.Вставить("СпособРасчета", Выборка.СпособРасчета);
		ИсходныеДанные.Вставить("КатегорияНачисления", Выборка.КатегорияНачисления);
		ИсходныеДанные.Вставить("Размер", Выборка.Размер);
		
		ИсходныеДанные.Вставить("НормаДнейЗаМесяц", НормаДнейЗаМесяц);
		ИсходныеДанные.Вставить("НормаЧасовЗаМесяц", НормаЧасовЗаМесяц);
		
		Если ЗначениеЗаполнено(ГрафикРаботы) Тогда
			ДнейПоКалендарю = Выборка.ДнейОкончание - Выборка.ДнейНачало+?(Выборка.ДеньВключенВГрафикНачало,1,0);
			ИсходныеДанные.Вставить("ДнейПоКалендарю", ДнейПоКалендарю);
			ИсходныеДанные.Вставить("ЧасовПоКалендарю", ДнейПоКалендарю*8 - СократитьПредпраздничныеЧасы(УчитыватьПредпраздничные, ПроизводственныйКалендарьПоГрафику, Выборка.ДатаНачала, Выборка.ДатаОкончания));
		Иначе
			ДнейПоКалендарю = Выборка.КоличествоДней;
			ИсходныеДанные.Вставить("ДнейПоКалендарю", ДнейПоКалендарю);
			ИсходныеДанные.Вставить("ЧасовПоКалендарю", ДнейПоКалендарю*8-Выборка.КоличествоПредраздничныхДней);
		КонецЕсли;	
			
		Если Выборка.РасчетнаяБаза <> Null Тогда
			ИсходныеДанные.Вставить("РасчетнаяБаза", Окр(Выборка.РасчетнаяБаза, 2));
		Иначе
			ИсходныеДанные.Вставить("РасчетнаяБаза", 0);
		КонецЕсли;
		
		Если Выборка.ЗачетОтработанногоВремени Тогда
			СтрокаНабора.ОтработаноДней = ИсходныеДанные.ДнейПоКалендарю;
			СтрокаНабора.ОтработаноЧасов = ИсходныеДанные.ЧасовПоКалендарю;
			СтрокаНабора.НормаДнейЗаМесяц = ИсходныеДанные.НормаДнейЗаМесяц;
			СтрокаНабора.НормаЧасовЗаМесяц = ИсходныеДанные.НормаЧасовЗаМесяц;
		КонецЕсли;
		Если Выборка.ЗачетНормыВремени Тогда
			СтрокаНабора.НормаДней = ИсходныеДанные.ДнейПоКалендарю;
			СтрокаНабора.НормаЧасов = ИсходныеДанные.ЧасовПоКалендарю;
			СтрокаНабора.НормаДнейЗаМесяц = ИсходныеДанные.НормаДнейЗаМесяц;
			СтрокаНабора.НормаЧасовЗаМесяц = ИсходныеДанные.НормаЧасовЗаМесяц;
		КонецЕсли;
		Если Выборка.ЗачетОтработанногоВремени ИЛИ Выборка.ЗачетНормыВремени Тогда
			СтрокаНабора.КалендарныеДни = Окр((КонецДня(СтрокаНабора.ДатаОкончания) - НачалоДня(СтрокаНабора.ДатаНачала)) / 86400);
		КонецЕсли;	
		
		НоваяСтрока = РасчетПредопределеннымСпособом.Добавить();
		НоваяСтрока.СпособРасчета = Выборка.СпособРасчета;
		НоваяСтрока.ЗаписьРасчета = СтрокаНабора;
		НоваяСтрока.ИсходныеДанные = ИсходныеДанные;
		
	КонецЦикла;
	
	// Выполняем расчет предопределенным способом
	РассчитатьПредопределеннымСпособом(РасчетПредопределеннымСпособом, НаборыЗаписей, ДокументСсылка, ДанныеФормыОбъект);
	
КонецПроцедуры

Процедура РассчитатьНачисленияИндексации(ДокументСсылка, Организация, МесяцНачисления, СтрокиНабора, НаборыЗаписей, ДанныеФормыОбъект, ИсходныеДанныеПоИдентификаторуСтроки)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ВременныйРегистратор", НаборыЗаписей["Начисления"].Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Измерения = Новый Массив(1);
	Измерения[0] = "Организация";
	Разрезы = Новый Массив(2);
	Разрезы[0] = "Сотрудник";
	Разрезы[1] = "ДатаОкончания";
	Запрос.УстановитьПараметр("Измерения",Измерения);
	Запрос.УстановитьПараметр("Разрезы",Разрезы);
	Запрос.УстановитьПараметр("ДатаИзмененияПорядкаИндексации", Дата(2021,04,01));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.НомерСтроки,
	|	Начисления.ИдентификаторСтроки,
	|	Начисления.Сотрудник,
	|	Начисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.Должность КАК Должность,
	|	Начисления.ВидРасчета,
	|	Начисления.Размер,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисление.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияНачисления,
	|	Начисление.СпособРасчета КАК СпособРасчета,
	|	Начисление.ВидПропорцииВремени
	|ПОМЕСТИТЬ ВТСтрокиРасчета
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисление
	|		ПО (Начисление.Ссылка = Начисления.ВидРасчета)
	|			И (Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Индексация))
	|ГДЕ
	|	Начисления.Регистратор = &ВременныйРегистратор
	|	И Начисления.Авторасчет
	|";
	
	Запрос.Выполнить();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда	
		Запрос.Текст = 
		"
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	ПараметрыРасчетаИндексации.Сотрудник,
		|	ЕСТЬNULL(ПараметрыРасчетаИндексации.Сотрудник.ФизическоеЛицо, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))	КАК ФизическоеЛицо,
		|	ПараметрыРасчетаИндексации.Подразделение,
		|	ПараметрыРасчетаИндексации.Должность,
		|	ПараметрыРасчетаИндексации.Период,
		|	ПараметрыРасчетаИндексации.Коэффициент,
		|	ПараметрыРасчетаИндексации.ФиксированнаяИндексация
		|ПОМЕСТИТЬ ВТПараметрыРасчетаИндексации	
		|ИЗ 
		|	РегистрСведений.ПараметрыРасчетаИндексации Как ПараметрыРасчетаИндексации
		|ГДЕ 
		|	(ПараметрыРасчетаИндексации.Сотрудник.ФизическоеЛицо В (ВЫБРАТЬ ФизическоеЛицо ИЗ ВТСтрокиРасчета)
		|	ИЛИ ПараметрыРасчетаИндексации.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
		|	И ПараметрыРасчетаИндексации.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
		|	МАКСИМУМ(ТекущиеКадровыеДанныеСотрудников.ДатаПриема) КАК ДатаПриема
		|ПОМЕСТИТЬ ВТВыборкаДатыПриема	
		|ИЗ 
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников Как ТекущиеКадровыеДанныеСотрудников
		|ГДЕ 
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник В (ВЫБРАТЬ Сотрудник ИЗ ВТСтрокиРасчета)
		|	И ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
		|СГРУППИРОВАТЬ ПО 
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	СтрокиРасчета.НомерСтроки,
		|	СтрокиРасчета.Сотрудник,
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ДатыИндексации.Период , МЕСЯЦ))	КАК БазовыйПериодИндексации
		|ПОМЕСТИТЬ ВТВыборкаБазовыеПериодыИндексации	
		|	ИЗ 
		|	ВТСтрокиРасчета Как СтрокиРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыРасчетаИндексации Как ДатыИндексации
		|		ПО	(СтрокиРасчета.ФизическоеЛицо = ДатыИндексации.ФизическоеЛицо  
		|		  ИЛИ ДатыИндексации.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))  
		|		И	СтрокиРасчета.Подразделение = ДатыИндексации.Подразделение  
		|		И	СтрокиРасчета.Должность = ДатыИндексации.Должность  
		|       И ВЫБОР КОГДА &ДатаИзмененияПорядкаИндексации  > НАЧАЛОПЕРИОДА(СтрокиРасчета.ДатаНачала, МЕСЯЦ)
		|       	ТОГДА СтрокиРасчета.ДатаНачала >= НАЧАЛОПЕРИОДА(ДатыИндексации.Период, МЕСЯЦ)
		|   		ИНАЧЕ СтрокиРасчета.ДатаНачала > НАЧАЛОПЕРИОДА(ДатыИндексации.Период, МЕСЯЦ)
		|       КОНЕЦ
		|СГРУППИРОВАТЬ ПО 
		|	СтрокиРасчета.НомерСтроки,
		|	СтрокиРасчета.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	БазовыеПериодыИндексации.НомерСтроки,
		|	ЕСТЬNULL(БазовыеПериодыИндексации.БазовыйПериодИндексации, ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДатыПриема.ДатаПриема, МЕСЯЦ), МЕСЯЦ, -1))	КАК БазовыйПериодИндексации
		|ПОМЕСТИТЬ ВТБазовыеПериодыИндексации	
		|	ИЗ 
		|	ВТВыборкаБазовыеПериодыИндексации Как БазовыеПериодыИндексации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыборкаДатыПриема Как ДатыПриема
		|		ПО БазовыеПериодыИндексации.Сотрудник = ДатыПриема.Сотрудник  
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтрокиРасчета.НомерСтроки,
		|   СтрокиРасчета.ФизическоеЛицо,
		|   СтрокиРасчета.Подразделение,
		|   СтрокиРасчета.Должность,
		|   СтрокиРасчета.ДатаНачала,
		|   МАКСИМУМ(ПараметрыРасчетаИндексации.Период) КАК Период
		|ПОМЕСТИТЬ ВТПериодыПараметрыФиксированнойИндексации	
		|ИЗ 
		|	ВТСтрокиРасчета КАК СтрокиРасчета
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыРасчетаИндексации КАК ПараметрыРасчетаИндексации
		|		ПО СтрокиРасчета.ФизическоеЛицо = ПараметрыРасчетаИндексации.ФизическоеЛицо  
		|		И  СтрокиРасчета.Подразделение = ПараметрыРасчетаИндексации.Подразделение  
		|		И  СтрокиРасчета.Должность = ПараметрыРасчетаИндексации.Должность  
		|       И  КОНЕЦПЕРИОДА(СтрокиРасчета.ДатаНачала, МЕСЯЦ) >= ПараметрыРасчетаИндексации.Период
		|
		|СГРУППИРОВАТЬ ПО 
		|	СтрокиРасчета.НомерСтроки,
		|	СтрокиРасчета.ФизическоеЛицо,
		|   СтрокиРасчета.Подразделение,
		|   СтрокиРасчета.Должность,
		|	СтрокиРасчета.ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|   ПериодыПараметрыФиксированнойИндексации.НомерСтроки,
		|   ПериодыПараметрыФиксированнойИндексации.ФизическоеЛицо,
		|   ПериодыПараметрыФиксированнойИндексации.ДатаНачала,
		|   ПараметрыРасчетаИндексации.ФиксированнаяИндексация
		|ПОМЕСТИТЬ ВТПараметрыФиксированнойИндексации	
		|ИЗ 
		|	ВТПериодыПараметрыФиксированнойИндексации Как ПериодыПараметрыФиксированнойИндексации
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыРасчетаИндексации КАК ПараметрыРасчетаИндексации
		|	ПО ПериодыПараметрыФиксированнойИндексации.ФизическоеЛицо = ПараметрыРасчетаИндексации.ФизическоеЛицо 
		|		И ПериодыПараметрыФиксированнойИндексации.Подразделение = ПараметрыРасчетаИндексации.Подразделение  
		|		И ПериодыПараметрыФиксированнойИндексации.Должность = ПараметрыРасчетаИндексации.Должность
		|   	И ПериодыПараметрыФиксированнойИндексации.Период = ПараметрыРасчетаИндексации.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПериодыПараметрыФиксированнойИндексации
		|////////////////////////////////////////////////////////////////////////////////
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВыборкаБазовыеПериодыИндексации
		|////////////////////////////////////////////////////////////////////////////////
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВыборкаДатыПриема
		|////////////////////////////////////////////////////////////////////////////////
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПараметрыРасчетаИндексации
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	Иначе
		Запрос.Текст = 
		"
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	ПараметрыРасчетаИндексации.Сотрудник,
		|	ПараметрыРасчетаИндексации.Сотрудник.ФизическоеЛицо	КАК ФизическоеЛицо,
		|	ПараметрыРасчетаИндексации.Подразделение,
		|	ПараметрыРасчетаИндексации.Должность,
		|	ПараметрыРасчетаИндексации.Период,
		|	ПараметрыРасчетаИндексации.Коэффициент,
		|	ПараметрыРасчетаИндексации.ФиксированнаяИндексация
		|ПОМЕСТИТЬ ВТПараметрыРасчетаИндексации	
		|ИЗ 
		|	РегистрСведений.ПараметрыРасчетаИндексации Как ПараметрыРасчетаИндексации
		|ГДЕ 
		|	ПараметрыРасчетаИндексации.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|	И ПараметрыРасчетаИндексации.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
		|	МАКСИМУМ(ТекущиеКадровыеДанныеСотрудников.ДатаПриема) КАК ДатаПриема
		|ПОМЕСТИТЬ ВТВыборкаДатыПриема	
		|ИЗ 
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников Как ТекущиеКадровыеДанныеСотрудников
		|ГДЕ 
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник В (ВЫБРАТЬ Сотрудник ИЗ ВТСтрокиРасчета)
		|	И ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
		|СГРУППИРОВАТЬ ПО 
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	ТекущаяТарифнаяСтавкаСотрудников.Сотрудник,
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ТекущаяТарифнаяСтавкаСотрудников.БазовыйПериодИндексации , МЕСЯЦ))	КАК БазовыйПериодИндексации
		|ПОМЕСТИТЬ ВТВыборкаБазовыеПериодыСотрудника	
		|ИЗ 
		|	РегистрСведений.ТекущаяТарифнаяСтавкаСотрудников Как ТекущаяТарифнаяСтавкаСотрудников
		|ГДЕ 
		|	ТекущаяТарифнаяСтавкаСотрудников.Сотрудник В (ВЫБРАТЬ Сотрудник ИЗ ВТСтрокиРасчета)
		|	И ТекущаяТарифнаяСтавкаСотрудников.ТекущаяОрганизация = &Организация
		|СГРУППИРОВАТЬ ПО 
		|	ТекущаяТарифнаяСтавкаСотрудников.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	СтрокиРасчета.НомерСтроки,
		|	СтрокиРасчета.Сотрудник,
		|	МАКСИМУМ(НАЧАЛОПЕРИОДА(ДатыИндексации.Период , МЕСЯЦ))	КАК БазовыйПериодИндексации
		|ПОМЕСТИТЬ ВТВыборкаБазовыеПериодыИндексации	
		|	ИЗ 
		|	ВТСтрокиРасчета Как СтрокиРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыРасчетаИндексации Как ДатыИндексации
		|		ПО	(СтрокиРасчета.ФизическоеЛицо = ДатыИндексации.ФизическоеЛицо  
		|		  ИЛИ ДатыИндексации.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))  
		|		И	СтрокиРасчета.Подразделение = ДатыИндексации.Подразделение  
		|		И	СтрокиРасчета.Должность = ДатыИндексации.Должность  
		|   	И	СтрокиРасчета.ДатаНачала >= НАЧАЛОПЕРИОДА(ДатыИндексации.Период , МЕСЯЦ)
		|СГРУППИРОВАТЬ ПО 
		|	СтрокиРасчета.НомерСтроки,
		|	СтрокиРасчета.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	БазовыеПериодыИндексации.НомерСтроки,
		|	ВЫБОР 
		|		КОГДА НЕ (БазовыеПериодыИндексации.БазовыйПериодИндексации ЕСТЬ NULL)
		|		 ТОГДА БазовыеПериодыИндексации.БазовыйПериодИндексации
		|		КОГДА БазовыеПериодыСотрудника.БазовыйПериодИндексации <> ДАТАВРЕМЯ(1,1,1)
		|		 ТОГДА БазовыеПериодыСотрудника.БазовыйПериодИндексации
		|       ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДатыПриема.ДатаПриема, МЕСЯЦ), МЕСЯЦ, -1)
		|  КОНЕЦ КАК БазовыйПериодИндексации
		|ПОМЕСТИТЬ ВТБазовыеПериодыИндексации	
		|	ИЗ 
		|	ВТВыборкаБазовыеПериодыИндексации Как БазовыеПериодыИндексации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыборкаДатыПриема Как ДатыПриема
		|		ПО БазовыеПериодыИндексации.Сотрудник = ДатыПриема.Сотрудник  
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВыборкаБазовыеПериодыСотрудника Как БазовыеПериодыСотрудника
		|		ПО БазовыеПериодыИндексации.Сотрудник = БазовыеПериодыСотрудника.Сотрудник  
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтрокиРасчета.НомерСтроки,
		|   СтрокиРасчета.ФизическоеЛицо,
		|   СтрокиРасчета.Подразделение,
		|   СтрокиРасчета.Должность,
		|   СтрокиРасчета.ДатаНачала,
		|   МАКСИМУМ(ПараметрыРасчетаИндексации.Период) КАК Период
		|ПОМЕСТИТЬ ВТПериодыПараметрыФиксированнойИндексации	
		|ИЗ 
		|	ВТСтрокиРасчета КАК СтрокиРасчета
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыРасчетаИндексации КАК ПараметрыРасчетаИндексации
		|		ПО СтрокиРасчета.ФизическоеЛицо = ПараметрыРасчетаИндексации.ФизическоеЛицо  
		|		И  СтрокиРасчета.Подразделение = ПараметрыРасчетаИндексации.Подразделение  
		|		И  СтрокиРасчета.Должность = ПараметрыРасчетаИндексации.Должность  
		|       И  КОНЕЦПЕРИОДА(СтрокиРасчета.ДатаНачала, МЕСЯЦ) >= ПараметрыРасчетаИндексации.Период
		|
		|СГРУППИРОВАТЬ ПО 
		|	СтрокиРасчета.НомерСтроки,
		|	СтрокиРасчета.ФизическоеЛицо,
		|   СтрокиРасчета.Подразделение,
		|   СтрокиРасчета.Должность,
		|	СтрокиРасчета.ДатаНачала
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|   СтрокиРасчета.НомерСтроки,
		|   СтрокиРасчета.ФизическоеЛицо,
		|   СтрокиРасчета.ДатаНачала,
		|   0 КАК ФиксированнаяИндексация
		|ПОМЕСТИТЬ ВТПараметрыФиксированнойИндексации	
		|ИЗ 
		|	ВТСтрокиРасчета Как СтрокиРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВыборкаБазовыеПериодыИндексации
		|////////////////////////////////////////////////////////////////////////////////
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТВыборкаДатыПриема
		|////////////////////////////////////////////////////////////////////////////////
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТПараметрыРасчетаИндексации
		|////////////////////////////////////////////////////////////////////////////////
		|";

	
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачисленияБаза.НомерСтроки,
	|	НачисленияБаза.ДатаНачала,
	|	СУММА(НачисленияБаза.РезультатБаза) КАК РезультатБаза,
	|	СУММА(НачисленияБаза.ОтработаноДнейБаза) КАК ОтработаноДнейБаза,
	|	СУММА(НачисленияБаза.ОтработаноЧасовБаза) КАК ОтработаноЧасовБаза
	|ПОМЕСТИТЬ ВТНачисленияБаза
	|ИЗ
	|	РегистрРасчета.Начисления.БазаНачисления(
	|			&Измерения,
	|			&Измерения,
	|			&Разрезы,
	|			Регистратор = &ВременныйРегистратор
	|				И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Индексация)
	|				) КАК НачисленияБаза
	|ГДЕ
	|  НачисленияБаза.СотрудникРазрез.ФизическоеЛицо = НачисленияБаза.Сотрудник.ФизическоеЛицо
	|  И НачисленияБаза.ДатаОкончанияРазрез <= КОНЕЦПЕРИОДА(НачисленияБаза.БазовыйПериодКонец, ДЕНЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияБаза.НомерСтроки,
	|	НачисленияБаза.ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|   НачисленияБаза.НомерСтроки,
	|   МАКСИМУМ(ПрожиточныеМинимумы.Период) КАК Период
	|ПОМЕСТИТЬ ВТПериодыПрожиточныеМинимумы	
	|ИЗ 
	|	ВТНачисленияБаза КАК НачисленияБаза
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожиточныеМинимумы
	|	ПО КОНЕЦПЕРИОДА(НачисленияБаза.ДатаНачала, МЕСЯЦ) >= ПрожиточныеМинимумы.Период
	|	  И ПрожиточныеМинимумы.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.Трудоспособные)
	|
	|СГРУППИРОВАТЬ ПО 
	|	НачисленияБаза.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|   ПериодыПрожиточныеМинимумы.НомерСтроки,
	|   ПрожиточныеМинимумы.Размер КАК ПрожиточныйМинимум
	|ПОМЕСТИТЬ ВТПрожиточныеМинимумы	
	|ИЗ 
	|	ВТПериодыПрожиточныеМинимумы Как ПериодыПрожиточныеМинимумы
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожиточныеМинимумы
	|	ПО ПериодыПрожиточныеМинимумы.Период = ПрожиточныеМинимумы.Период
	|	  И ПрожиточныеМинимумы.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.Трудоспособные)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПериодыПрожиточныеМинимумы
	|////////////////////////////////////////////////////////////////////////////////
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ 
	|	Доход.ФизическоеЛицо КАК ФизическоеЛицо, 
	|	НАЧАЛОПЕРИОДА(Доход.ДатаДействия, МЕСЯЦ) КАК ДатаНачала, 
	|	СУММА(Доход.БазаИндексации)	КАК БазаИндексацииСовместителя 
	|ПОМЕСТИТЬ ВТИндексированныйДоходСовместителей	
	|   ИЗ РегистрСведений.ИндексированныйДоходСовместителей.СрезПоследних(&МесяцНачисления, 
	|   		Организация = &Организация И ФизическоеЛицо в (ВЫБРАТЬ РАЗЛИЧНЫЕ СтрокиРасчета.ФизическоеЛицо ИЗ ВТСтрокиРасчета КАК СтрокиРасчета ) ) КАК Доход
	|	СГРУППИРОВАТЬ ПО 
	|		Доход.ФизическоеЛицо, 
	|		НАЧАЛОПЕРИОДА(Доход.ДатаДействия, МЕСЯЦ)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|   СУММА(ЕСТЬNULL(НачисленияБаза.РезультатБаза, 0)) КАК РасчетнаяБаза,
	|   СУММА(ЕСТЬNULL(НачисленияБаза.ОтработаноДнейБаза, 0)) КАК ОтработаноДнейБаза,
	|   СУММА(ЕСТЬNULL(НачисленияБаза.ОтработаноЧасовБаза, 0)) КАК ОтработаноЧасовБаза,
	|   МАКСИМУМ(ЕСТЬNULL(ПрожиточныеМинимумы.ПрожиточныйМинимум, 0)) КАК ПрожиточныйМинимумТрудоспособные,
	|	МАКСИМУМ(ЕСТЬNULL(БазовыеПериодыИндексации.БазовыйПериодИндексации, ДАТАВРЕМЯ(1,1,1))) КАК БазовыйПериодИндексации,
	|	МАКСИМУМ(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ), МЕСЯЦ, -2)) КАК ПериодИндексации,
	|	МАКСИМУМ(ЕСТЬNULL(ПараметрыФиксированнойИндексации.ФиксированнаяИндексация, 0)) КАК ФиксированнаяИндексация,
	|	МАКСИМУМ(ЕСТЬNULL(ИндексированныйДоходСовместителей.БазаИндексацииСовместителя, 0)) КАК БазаИндексацииСовместителя,
	|	Начисления.ИдентификаторСтроки,
	|	Начисления.ВидПропорцииВремени
	|ИЗ
	|	ВТСтрокиРасчета КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазовыеПериодыИндексации КАК БазовыеПериодыИндексации
	|		ПО Начисления.НомерСтроки = БазовыеПериодыИндексации.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыФиксированнойИндексации КАК ПараметрыФиксированнойИндексации
	|		ПО Начисления.НомерСтроки = ПараметрыФиксированнойИндексации.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияБаза КАК НачисленияБаза
	|		ПО Начисления.НомерСтроки = НачисленияБаза.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрожиточныеМинимумы КАК ПрожиточныеМинимумы
	|		ПО НачисленияБаза.НомерСтроки = ПрожиточныеМинимумы.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИндексированныйДоходСовместителей КАК ИндексированныйДоходСовместителей
	|		ПО Начисления.ФизическоеЛицо = ИндексированныйДоходСовместителей.ФизическоеЛицо
	|		 И НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ) = ИндексированныйДоходСовместителей.ДатаНачала
	|СГРУППИРОВАТЬ ПО
	|	Начисления.ИдентификаторСтроки,
	|	Начисления.ВидПропорцииВремени
	|";
	
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	
	ГрафикРаботы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГрафикРаботы");
	УчитыватьПредпраздничные = ГрафикРаботы.УчитыватьПраздники;
	ПроизводственныйКалендарьПоГрафику = ГрафикРаботы.ПроизводственныйКалендарь;
	
	// получить число дней по календарю
	НормаДнейЗаМесяц = 0;
	Если ЗначениеЗаполнено(ГрафикРаботы) Тогда
		Попытка
			НормаДнейЗаМесяц = КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(ГрафикРаботы, НачалоМесяца(МесяцНачисления), КонецМесяца(МесяцНачисления));
			НормаЧасовЗаМесяц = НормаДнейЗаМесяц*8;
			НормаЧасовЗаМесяц = НормаЧасовЗаМесяц - СократитьПредпраздничныеЧасы(УчитыватьПредпраздничные, ПроизводственныйКалендарьПоГрафику, НачалоМесяца(МесяцНачисления), КонецМесяца(МесяцНачисления));
		Исключение
			НормаДнейЗаМесяц = 0;
			НормаЧасовЗаМесяц = 0;
		КонецПопытки;
	Иначе
		
		РабочихДнейЧасов = РабочихДнейЧасовВПериоде(КалендарныеГрафики.ПроизводственныйКалендарьУкраины(),  НачалоМесяца(МесяцНачисления), КонецМесяца(МесяцНачисления));
				
		НормаДнейЗаМесяц = РабочихДнейЧасов.Дней;
		НормаЧасовЗаМесяц = РабочихДнейЧасов.Часов;
	КонецЕсли;


	
	// Таблица для сбора записей, рассчитываемых предопределенным способом
	РасчетПредопределеннымСпособом = ТаблицаРасчетаПредопределеннымСпособом();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаНабора = СтрокиНабора[Выборка.ИдентификаторСтроки];
		ИсходныеДанные = ИсходныеДанныеПоИдентификаторуСтроки[Выборка.ИдентификаторСтроки];

		ИсходныеДанные.Вставить("РасчетнаяБаза", Выборка.РасчетнаяБаза);
		
		ИсходныеДанные.Вставить("ПрожиточныйМинимумТрудоспособные", Выборка.ПрожиточныйМинимумТрудоспособные);
		
		ИсходныеДанные.Вставить("БазовыйПериодИндексации", Выборка.БазовыйПериодИндексации);
		ИсходныеДанные.Вставить("ПериодИндексации", Выборка.ПериодИндексации);
		ИсходныеДанные.Вставить("ФиксированнаяИндексация", Выборка.ФиксированнаяИндексация);
		ИсходныеДанные.Вставить("БазаИндексацииСовместителя", Выборка.БазаИндексацииСовместителя);
		
		ИсходныеДанные.Вставить("ОтработаноДней", Выборка.ОтработаноДнейБаза);
		ИсходныеДанные.Вставить("ОтработаноЧасов", Выборка.ОтработаноЧасовБаза);
		ИсходныеДанные.Вставить("НормаДнейЗаМесяц", НормаДнейЗаМесяц);
		ИсходныеДанные.Вставить("НормаЧасовЗаМесяц", НормаЧасовЗаМесяц);
		ИсходныеДанные.Вставить("ВидПропорцииВремени", Выборка.ВидПропорцииВремени);
		
		СтрокаНабора.НормаДнейЗаМесяц = ИсходныеДанные.НормаДнейЗаМесяц;
		СтрокаНабора.НормаЧасовЗаМесяц = ИсходныеДанные.НормаЧасовЗаМесяц;
		
		НоваяСтрока = РасчетПредопределеннымСпособом.Добавить();
		НоваяСтрока.ЗаписьРасчета = СтрокаНабора;
		НоваяСтрока.ИсходныеДанные = ИсходныеДанные;
		
	КонецЦикла;
	
	// Выполняем расчет предопределенным способом
	РассчитатьПредопределеннымСпособомИндексация(РасчетПредопределеннымСпособом, НаборыЗаписей, ДокументСсылка, МесяцНачисления, ДанныеФормыОбъект);
	
КонецПроцедуры

Функция НачисленияИБазовыеПериодыИндексации(СтрокиРасчета, ПериодРегистрации, Организация)

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		Возврат СтрокиРасчета
	КонецЕсли; 	
	
	Если ПериодРегистрации < Дата(2021,04,01) Тогда
		Возврат СтрокиРасчета
	КонецЕсли; 	
	
	ДанныеДляРасчета = Новый ТаблицаЗначений;
	ДанныеДляРасчета.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ДанныеДляРасчета.Колонки.Добавить("ФизическоеЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ДанныеДляРасчета.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ДанныеДляРасчета.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ДанныеДляРасчета.Колонки.Добавить("Должность", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ДанныеДляРасчета.Колонки.Добавить("ИндексВМассиве", Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаРасчета Из СтрокиРасчета Цикл
		Если НЕ СтрокаРасчета.ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ПредопределенноеЗначение("Перечисление.КатегорииНачисленийИНеоплаченногоВремени.Индексация") 
			Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ДанныеДляРасчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчета);
		НоваяСтрока.ФизическоеЛицо = СтрокаРасчета.Сотрудник.ФизическоеЛицо;
		НоваяСтрока.Организация = Организация;
		НоваяСтрока.ДатаНачала = НачалоМесяца(НоваяСтрока.ДатаНачала);
		НоваяСтрока.ДатаОкончания = КонецМесяца(НоваяСтрока.ДатаОкончания);
		НоваяСтрока.ИндексВМассиве = СтрокиРасчета.Индекс(СтрокаРасчета);
	КонецЦикла;
	
	// Если строк с нужными показателями не нашлось - ничего не запрашиваем.
	Если ДанныеДляРасчета.Количество() = 0 Тогда
		Возврат СтрокиРасчета;
	КонецЕсли;
		
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеДляРасчета", ДанныеДляРасчета);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДляРасчета.ИндексВМассиве КАК ИндексВМассиве,
	|	ДанныеДляРасчета.Организация КАК Организация,
	|	ДанныеДляРасчета.Сотрудник КАК Сотрудник,
	|	ДанныеДляРасчета.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеДляРасчета.Подразделение КАК Подразделение,
	|	ДанныеДляРасчета.Должность КАК Должность,
	|	ДанныеДляРасчета.ДатаНачала КАК ДатаНачала,
	|	ДанныеДляРасчета.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТСтрокиРасчета
	|ИЗ
	|	&ДанныеДляРасчета КАК ДанныеДляРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	БазовыеПериодыИндексации.Сотрудник,
	|	БазовыеПериодыИндексации.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	БазовыеПериодыИндексации.Подразделение,
	|	БазовыеПериодыИндексации.Должность,
	|	БазовыеПериодыИндексации.Период
	|ПОМЕСТИТЬ ВТБазовыеПериодыИндексации	
	|ИЗ 
	|	РегистрСведений.ПараметрыРасчетаИндексации Как БазовыеПериодыИндексации
	|ГДЕ 
	|	(БазовыеПериодыИндексации.Сотрудник.ФизическоеЛицо В (ВЫБРАТЬ ФизическоеЛицо ИЗ ВТСтрокиРасчета)
	|	ИЛИ БазовыеПериодыИндексации.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
	|	И БазовыеПериодыИндексации.Организация В (ВЫБРАТЬ Организация ИЗ ВТСтрокиРасчета)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	СтрокиРасчета.ИндексВМассиве,
	|	СтрокиРасчета.ДатаНачала,
	|	СтрокиРасчета.ДатаОкончания,
	|	СтрокиРасчета.Сотрудник,
	|	СтрокиРасчета.Подразделение,
	|	СтрокиРасчета.Должность,
	|   СтрокиРасчета.ФизическоеЛицо,
	|	МАКСИМУМ(ДОБАВИТЬКДАТЕ(ДатыИндексации.Период, ДЕНЬ, -1)) КАК БазовыйПериодИндексации
	|ПОМЕСТИТЬ ВТВыборкаБазовыеПериодыИндексации	
	|	ИЗ 
	|	ВТСтрокиРасчета Как СтрокиРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазовыеПериодыИндексации Как ДатыИндексации
	|		ПО	(СтрокиРасчета.ФизическоеЛицо = ДатыИндексации.ФизическоеЛицо  
	|		  ИЛИ ДатыИндексации.ФизическоеЛицо ЕСТЬ NULL)  
	|		И	СтрокиРасчета.Подразделение = ДатыИндексации.Подразделение  
	|		И	СтрокиРасчета.Должность = ДатыИндексации.Должность  
	|   	И	СтрокиРасчета.ДатаНачала <= ДатыИндексации.Период
	|   	И	СтрокиРасчета.ДатаОкончания >= ДатыИндексации.Период
	|СГРУППИРОВАТЬ ПО
	|	СтрокиРасчета.ИндексВМассиве,
	|	СтрокиРасчета.ДатаНачала,
	|	СтрокиРасчета.ДатаОкончания,
	|	СтрокиРасчета.Сотрудник,
	|	СтрокиРасчета.Подразделение,
	|	СтрокиРасчета.Должность,
	|   СтрокиРасчета.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	БазовыеПериодыИндексации.ИндексВМассиве,
	|	БазовыеПериодыИндексации.ДатаНачала КАК ДатаНачала,
	|	БазовыеПериодыИндексации.ДатаОкончания КАК ДатаОкончания,
	|   СтрокиРасчета.Сотрудник КАК Сотрудник,
	|   СтрокиРасчета.ФизическоеЛицо КАК ФизическоеЛицо,
	|   СтрокиРасчета.Подразделение КАК Подразделение,
	|   СтрокиРасчета.Должность КАК Должность,
	|	ЕСТЬNULL(БазовыеПериодыИндексации.БазовыйПериодИндексации, ДАТАВРЕМЯ(1,1,1)) КАК БазовыйПериодИндексации
	|	ИЗ 
	|	ВТВыборкаБазовыеПериодыИндексации Как БазовыеПериодыИндексации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтрокиРасчета Как СтрокиРасчета
	|		ПО БазовыеПериодыИндексации.Сотрудник = СтрокиРасчета.Сотрудник 
	|		И	БазовыеПериодыИндексации.Подразделение = СтрокиРасчета.Подразделение  
	|		И	БазовыеПериодыИндексации.Должность = СтрокиРасчета.Должность  
	|";

	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокиРасчета[Выборка.ИндексВМассиве].БазовыйПериодНачало = Выборка.ДатаНачала;
		СтрокиРасчета[Выборка.ИндексВМассиве].БазовыйПериодКонец = Выборка.ДатаОкончания;
		Если ЗначениеЗаполнено(Выборка.БазовыйПериодИндексации) Тогда 
			СтрокиРасчета[Выборка.ИндексВМассиве].БазовыйПериодКонец = Выборка.БазовыйПериодИндексации 
		КонецЕсли;	
	КонецЦикла;
	 
	Возврат СтрокиРасчета
	
КонецФункции


Процедура РассчитатьНачисленияДоплатаДоМЗП(ДокументСсылка, Организация, МесяцНачисления, СтрокиНабора, НаборыЗаписей, ДанныеФормыОбъект, ИсходныеДанныеПоИдентификаторуСтроки)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ВременныйРегистратор", НаборыЗаписей["Начисления"].Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	Запрос.УстановитьПараметр("МесяцНачисления", МесяцНачисления);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Измерения = Новый Массив(2);
	Измерения[0] = "Организация";
	Измерения[1] = "Сотрудник";
	Разрезы = Новый Массив(1);
	Разрезы[0] = "Сотрудник";
	Разрезы[0] = "ДатаОкончания";
	Запрос.УстановитьПараметр("Измерения",Измерения);
	Запрос.УстановитьПараметр("Разрезы",Разрезы);
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.НомерСтроки,
	|	Начисления.ИдентификаторСтроки,
	|	Начисления.Сотрудник,
	|	Начисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Начисления.Подразделение КАК Подразделение,
	|	Начисления.Должность КАК Должность,
	|	Начисления.ВидРасчета,
	|	Начисления.Размер,
	|	Начисления.ДатаНачала,
	|	Начисления.ДатаОкончания,
	|	Начисление.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияНачисления,
	|	Начисление.СпособРасчета КАК СпособРасчета,
	|	Начисление.ВидПропорцииВремени
	|ПОМЕСТИТЬ ВТСтрокиРасчета
	|ИЗ
	|	РегистрРасчета.Начисления КАК Начисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисление
	|		ПО (Начисление.Ссылка = Начисления.ВидРасчета)
	|			И (Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоМЗП))
	|ГДЕ
	|	Начисления.Регистратор = &ВременныйРегистратор
	|	И Начисления.Авторасчет
	|";
	
	Запрос.Выполнить();
	
	
	Запрос.Текст = 
	"
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачисленияБаза.НомерСтроки,
	|	НачисленияБаза.ДатаНачала,
	|	СУММА(НачисленияБаза.РезультатБаза) КАК РезультатБаза,
	|	СУММА(НачисленияБаза.ОтработаноДнейБаза) КАК ОтработаноДнейБаза,
	|	СУММА(НачисленияБаза.ОтработаноЧасовБаза) КАК ОтработаноЧасовБаза
	|ПОМЕСТИТЬ ВТНачисленияБаза
	|ИЗ
	|	РегистрРасчета.Начисления.БазаНачисления(
	|			&Измерения,
	|			&Измерения,
	|			,
	|			Регистратор = &ВременныйРегистратор
	|				И ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ДоплатаДоМЗП)
	|				) КАК НачисленияБаза
	//|ГДЕ
	//|  НачисленияБаза.СотрудникРазрез.ФизическоеЛицо = НачисленияБаза.Сотрудник.ФизическоеЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияБаза.НомерСтроки,
	|	НачисленияБаза.ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|   НачисленияБаза.НомерСтроки,
	|   МАКСИМУМ(МинимальнаяОплатаТруда.Период) КАК Период
	|ПОМЕСТИТЬ ВТПериодыМинимальнаяОплатаТруда	
	|ИЗ 
	|	ВТНачисленияБаза КАК НачисленияБаза
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТруда КАК МинимальнаяОплатаТруда
	|	ПО КОНЕЦПЕРИОДА(НачисленияБаза.ДатаНачала, МЕСЯЦ) >= МинимальнаяОплатаТруда.Период
	|
	|СГРУППИРОВАТЬ ПО 
	|	НачисленияБаза.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|   ПериодыМинимальнаяОплатаТруда.НомерСтроки,
	|   МинимальнаяОплатаТруда.Размер КАК МинЗП
	|ПОМЕСТИТЬ ВТМинимальнаяОплатаТруда	
	|ИЗ 
	|	ВТПериодыМинимальнаяОплатаТруда Как ПериодыМинимальнаяОплатаТруда
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТруда КАК МинимальнаяОплатаТруда
	|	ПО ПериодыМинимальнаяОплатаТруда.Период = МинимальнаяОплатаТруда.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПериодыМинимальнаяОплатаТруда
	|////////////////////////////////////////////////////////////////////////////////
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|   СУММА(ЕСТЬNULL(НачисленияБаза.РезультатБаза, 0)) КАК РасчетнаяБаза,
	|   СУММА(ЕСТЬNULL(НачисленияБаза.ОтработаноДнейБаза, 0)) КАК ОтработаноДнейБаза,
	|   СУММА(ЕСТЬNULL(НачисленияБаза.ОтработаноЧасовБаза, 0)) КАК ОтработаноЧасовБаза,
	|   МАКСИМУМ(ЕСТЬNULL(МинимальнаяОплатаТруда.МинЗП, 0)) КАК МинЗП,
	|	Начисления.ИдентификаторСтроки,
	|	Начисления.ВидПропорцииВремени
	|ИЗ
	|	ВТСтрокиРасчета КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияБаза КАК НачисленияБаза
	|		ПО Начисления.НомерСтроки = НачисленияБаза.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМинимальнаяОплатаТруда КАК МинимальнаяОплатаТруда
	|		ПО НачисленияБаза.НомерСтроки = МинимальнаяОплатаТруда.НомерСтроки
	|СГРУППИРОВАТЬ ПО
	|	Начисления.ИдентификаторСтроки,
	|	Начисления.ВидПропорцииВремени
	|";
	
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	
	ГрафикРаботы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГрафикРаботы");
	УчитыватьПредпраздничные = ГрафикРаботы.УчитыватьПраздники;
	ПроизводственныйКалендарьПоГрафику = ГрафикРаботы.ПроизводственныйКалендарь;
	
	// получить число дней по календарю
	НормаДнейЗаМесяц = 0;
	Если ЗначениеЗаполнено(ГрафикРаботы) Тогда
		Попытка
			НормаДнейЗаМесяц = КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(ГрафикРаботы, НачалоМесяца(МесяцНачисления), КонецМесяца(МесяцНачисления));
			НормаЧасовЗаМесяц = НормаДнейЗаМесяц*8;
			НормаЧасовЗаМесяц = НормаЧасовЗаМесяц - СократитьПредпраздничныеЧасы(УчитыватьПредпраздничные, ПроизводственныйКалендарьПоГрафику, НачалоМесяца(МесяцНачисления), КонецМесяца(МесяцНачисления));
		Исключение
			НормаДнейЗаМесяц = 0;
			НормаЧасовЗаМесяц = 0;
		КонецПопытки;
	Иначе
		
		РабочихДнейЧасов = РабочихДнейЧасовВПериоде(КалендарныеГрафики.ПроизводственныйКалендарьУкраины(),  НачалоМесяца(МесяцНачисления), КонецМесяца(МесяцНачисления));
				
		НормаДнейЗаМесяц = РабочихДнейЧасов.Дней;
		НормаЧасовЗаМесяц = РабочихДнейЧасов.Часов;
	КонецЕсли;


	
	// Таблица для сбора записей, рассчитываемых предопределенным способом
	РасчетПредопределеннымСпособом = ТаблицаРасчетаПредопределеннымСпособом();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаНабора = СтрокиНабора[Выборка.ИдентификаторСтроки];
		ИсходныеДанные = ИсходныеДанныеПоИдентификаторуСтроки[Выборка.ИдентификаторСтроки];

		ИсходныеДанные.Вставить("РасчетнаяБаза", Выборка.РасчетнаяБаза);
		ИсходныеДанные.Вставить("МинЗП", Выборка.МинЗП);
		
		ИсходныеДанные.Вставить("ОтработаноДней", Выборка.ОтработаноДнейБаза);
		ИсходныеДанные.Вставить("ОтработаноЧасов", Выборка.ОтработаноЧасовБаза);
		ИсходныеДанные.Вставить("НормаДнейЗаМесяц", НормаДнейЗаМесяц);
		ИсходныеДанные.Вставить("НормаЧасовЗаМесяц", НормаЧасовЗаМесяц);
		ИсходныеДанные.Вставить("ВидПропорцииВремени", Выборка.ВидПропорцииВремени);
		
		СтрокаНабора.НормаДнейЗаМесяц = ИсходныеДанные.НормаДнейЗаМесяц;
		СтрокаНабора.НормаЧасовЗаМесяц = ИсходныеДанные.НормаЧасовЗаМесяц;
		
		НоваяСтрока = РасчетПредопределеннымСпособом.Добавить();
		НоваяСтрока.ЗаписьРасчета = СтрокаНабора;
		НоваяСтрока.ИсходныеДанные = ИсходныеДанные;
		
	КонецЦикла;
	
	// Выполняем расчет предопределенным способом
	РассчитатьПредопределеннымСпособомДоплатаДоМЗП(РасчетПредопределеннымСпособом, НаборыЗаписей, ДокументСсылка, МесяцНачисления, ДанныеФормыОбъект);
	
КонецПроцедуры

Процедура РассчитатьУдержания(ВременнаяСсылка, НаборыЗаписей, ДанныеДляУдержания, ДокументСсылка, Организация, МесяцНачисления, ДанныеФормыОбъект = Неопределено)
	
	Если ДанныеДляУдержания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Нужно подготовить таблицу значений, 
	// сформировать на ее основе движения по регистру расчета
	// запросом выбирать записи в соответствии с очередностью, рассчитывать их и записывать с заполненным результатом
	// после окончания расчета перенести результаты в исходную коллекцию ДанныеДляУдержания
	
	Удержания = ПустаяТаблицаУдержания();
	
	ИсходныеДанныеПоИдентификаторуСтроки = Новый Соответствие;
	
	ИдентификаторСтроки = 1;
	Для Каждого СтрокаДанных Из ДанныеДляУдержания Цикл
		// Заполняем коллекцию для формирования движений
		НоваяСтрока = Удержания.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		
		НоваяСтрока.ИдентификаторСтроки = ИдентификаторСтроки;
		
		СтрокаДанных.ИдентификаторСтрокиВидаРасчета = ИдентификаторСтроки;
		
		ИсходныеДанные = Новый Структура("Результат", 0);
		ИсходныеДанныеПоИдентификаторуСтроки[ИдентификаторСтроки] = ИсходныеДанные;
		
		ИдентификаторСтроки = ИдентификаторСтроки + 1;
	КонецЦикла;

	
	СформироватьДвиженияУдержаний(НаборыЗаписей, Ложь, Организация, МесяцНачисления, Удержания, Истина);
	
	// Выбираем записи и рассчитываем их в соответствии с очередностью расчета	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Удержания.ВидРасчета.ОчередностьРасчета КАК ОчередностьРасчета
	|ИЗ
	|	РегистрРасчета.Удержания КАК Удержания
	|ГДЕ
	|	Удержания.Регистратор = &Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Удержания.ВидРасчета.ОчередностьРасчета";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Регистратор", ВременнаяСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Составляем соответствие строк для более быстрого поиска
	СтрокиНабора = Новый Соответствие;
	Для Каждого СтрокаНабора Из НаборыЗаписей.Удержания Цикл
		СтрокиНабора.Вставить(СтрокаНабора.ИдентификаторСтроки, СтрокаНабора);
	КонецЦикла;
	
	Пока Выборка.Следующий() Цикл
		РассчитатьУдержанияОчередности(ДокументСсылка, Выборка.ОчередностьРасчета, СтрокиНабора, НаборыЗаписей, ДанныеФормыОбъект, ИсходныеДанныеПоИдентификаторуСтроки);
		НаборыЗаписей.Удержания.Записать(Истина, Истина);
	КонецЦикла;
	
	// Перенос результата расчета в ДанныеДляУдержания
	Для Каждого СтрокаДанных Из ДанныеДляУдержания Цикл
		СтрокаНабора = СтрокиНабора[СтрокаДанных.ИдентификаторСтрокиВидаРасчета];
		СтрокаДанных.Результат = СтрокаНабора.Результат;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьУдержанияОчередности(ДокументСсылка, ОчередностьРасчета, СтрокиНабора, НаборыЗаписей, ДанныеФормыОбъект, ИсходныеДанныеПоИдентификаторуСтроки)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Удержания.НомерСтроки,
	|	Удержания.ИдентификаторСтроки,
	|	Удержания.Сотрудник,
	|	Удержания.ВидРасчета,
	|	Удержания.Размер
	|ПОМЕСТИТЬ ВТУдержания
	|ИЗ
	|	РегистрРасчета.Удержания КАК Удержания
	|ГДЕ
	|	Удержания.Регистратор = &ВременныйРегистратор
	|	И Удержания.Авторасчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УдержанияБаза.НомерСтроки,
	|	СУММА(УдержанияБаза.РезультатБаза) КАК РезультатБаза
	|ПОМЕСТИТЬ ВТНачисленияБаза
	|ИЗ
	|	РегистрРасчета.Удержания.БазаНачисления(
	|			&Измерения,
	|			&Измерения,
	|			&Разрезы,
	|			Регистратор = &ВременныйРегистратор
	|				И ВидРасчета.ОчередностьРасчета = &ОчередностьРасчета
	|				И ВидРасчета.СпособРасчета В (&СпособыРасчетаЗависимыеОтБазы)
	|				) КАК УдержанияБаза
	|ГДЕ
	|	УдержанияБаза.РегистраторРазрез <> &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	УдержанияБаза.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УдержанияБаза.НомерСтроки,
	|	СУММА(УдержанияБаза.РезультатБаза) КАК РезультатБаза
	|ПОМЕСТИТЬ ВТУдержанияБаза
	|ИЗ
	|	РегистрРасчета.Удержания.БазаУдержания(
	|			&Измерения,
	|			&Измерения,
	|			&Разрезы,
	|			Регистратор = &ВременныйРегистратор
	|				И ВидРасчета.ОчередностьРасчета = &ОчередностьРасчета
	|				И ВидРасчета.СпособРасчета В (&СпособыРасчетаЗависимыеОтБазы)
	|				) КАК УдержанияБаза
	|ГДЕ
	|	УдержанияБаза.РегистраторРазрез <> &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	УдержанияБаза.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(НачисленияБаза.РезультатБаза, 0) + ЕСТЬNULL(УдержанияБаза.РезультатБаза, 0) КАК РасчетнаяБаза,
	|	Удержание.СпособРасчета КАК СпособРасчета,
	|	Удержание.КатегорияУдержания КАК КатегорияУдержания,
	|	Удержания.ИдентификаторСтроки,
	|	Удержания.Размер
	|ИЗ
	|	ВТУдержания КАК Удержания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.Удержания КАК Удержание
	|		ПО (Удержание.Ссылка = Удержания.ВидРасчета)
	|			И (Удержание.ОчередностьРасчета = &ОчередностьРасчета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияБаза КАК НачисленияБаза
	|		ПО Удержания.НомерСтроки = НачисленияБаза.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТУдержанияБаза КАК УдержанияБаза
	|		ПО Удержания.НомерСтроки = УдержанияБаза.НомерСтроки
	|";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ВременныйРегистратор", НаборыЗаписей["Удержания"].Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	Запрос.УстановитьПараметр("ОчередностьРасчета", ОчередностьРасчета);
	
	Запрос.УстановитьПараметр("СпособыРасчетаЗависимыеОтБазы",РасчетЗарплаты.СпособыРасчетаЗависимыеОтБазы());
	
	Измерения = Новый Массив(1);
	Измерения[0] = "Сотрудник";
	Запрос.УстановитьПараметр("Измерения",Измерения);
	Разрезы = Новый Массив(1);
	Разрезы[0] = "Регистратор";
	Запрос.УстановитьПараметр("Разрезы", Разрезы);
	РезультатЗапроса = Запрос.Выполнить();
	
	// Таблица для сбора записей, рассчитываемых предопределенным способом
	РасчетПредопределеннымСпособом = ТаблицаРасчетаПредопределеннымСпособом();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаНабора = СтрокиНабора[Выборка.ИдентификаторСтроки];
		ИсходныеДанные = ИсходныеДанныеПоИдентификаторуСтроки[Выборка.ИдентификаторСтроки];

		ИсходныеДанные.Вставить("СпособРасчета", Выборка.СпособРасчета);
		ИсходныеДанные.Вставить("КатегорияУдержания", Выборка.КатегорияУдержания);
		ИсходныеДанные.Вставить("Размер", Выборка.Размер);
		
		Если Выборка.РасчетнаяБаза <> Null Тогда
			ИсходныеДанные.Вставить("РасчетнаяБаза", Окр(Выборка.РасчетнаяБаза, 2));
		Иначе
			ИсходныеДанные.Вставить("РасчетнаяБаза", 0);
		КонецЕсли;
		
		НоваяСтрока = РасчетПредопределеннымСпособом.Добавить();
		НоваяСтрока.СпособРасчета = Выборка.СпособРасчета;
		НоваяСтрока.ЗаписьРасчета = СтрокаНабора;
		НоваяСтрока.ИсходныеДанные = ИсходныеДанные;
		
	КонецЦикла;
	
	// Выполняем расчет предопределенным способом
	РассчитатьПредопределеннымСпособом(РасчетПредопределеннымСпособом, НаборыЗаписей, ДокументСсылка, ДанныеФормыОбъект);
	
КонецПроцедуры

// Предназначен для размещения вызовов процедур, выполняющих расчет начислений или удержаний предопределенным способом
//
// Параметры
//	- РасчетПредопределеннымСпособом - таблица значений, см. ТаблицаРасчетаПредопределеннымСпособом()
//	- НаборыЗаписей - структура наборов записей, моделирующая коллекцию движений документа 
//			с установленным отбором по временному регистратору
//	- ДокументСсылка - ссылка на документ, выполняющий расчет
//
Процедура РассчитатьПредопределеннымСпособом(РасчетПредопределеннымСпособом, НаборыЗаписей, ДокументСсылка, ДанныеФормыОбъект)
	
	СпособыРасчета = ОбщегоНазначения.ВыгрузитьКолонку(РасчетПредопределеннымСпособом, "СпособРасчета", Истина);
	Для Каждого СпособРасчета Из СпособыРасчета Цикл
		
		СтрокиТаблицыРасчета = РасчетПредопределеннымСпособом.НайтиСтроки(Новый Структура("СпособРасчета", СпособРасчета));
		
		РассчитатьПоМесячнойТарифнойСтавкеПоЧасам(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка);
		
		РассчитатьПоМесячнойТарифнойСтавкеПоДням(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка);
		
		РассчитатьПоДневнойТарифнойСтавке(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка);
		
		РассчитатьПоЧасовойТарифнойСтавке(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка);
		
		РассчитатьФиксированнойСуммой(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка);
		
		РассчитатьПроцентом(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка);
		
		РассчитатьНулеваяСумма(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка);
		
		// Переопределяемые способы расчета
		РасчетЗарплатыПереопределяемый.РассчитатьПредопределеннымСпособом(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьПредопределеннымСпособомИндексация(РасчетПредопределеннымСпособом, НаборыЗаписей, ДокументСсылка, МесяцНачисления, ДанныеФормыОбъект)
	
	тбКоэффициентыИндексации = Новый ТаблицаЗначений;
	тбКоэффициентыИндексации.Колонки.Добавить("Начало");
	тбКоэффициентыИндексации.Колонки.Добавить("Конец");
	тбКоэффициентыИндексации.Колонки.Добавить("Коэффициент");
	
	Запрос = Новый Запрос();
		
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	ИндексыИнфляции.Период			КАК Период, 
	|	ИндексыИнфляции.Индекс			КАК Индекс,
	|	ВЫБОР 
	|		КОГДА ИндексыИнфляции.Период < &ДатаИзмененияПорогаИндексации
	|		 ТОГДА 1.01
	|		ИНАЧЕ 1.03
	|	КОНЕЦ КАК Порог
	|ИЗ РегистрСведений.ИндексИнфляции КАК ИндексыИнфляции
	|УПОРЯДОЧИТЬ ПО 
	|	ИндексыИнфляции.Период ВОЗР";
	
	Запрос.УстановитьПараметр("ДатаИзмененияПорогаИндексации", РасчетЗарплаты.ДатаИзмененияПорогаИндексации()); 
	
	тбИндексыИнфляции = Запрос.Выполнить().Выгрузить(); 
	
	РезультатФиксированнаяИндексация = 0;
	
	Для Каждого СтрокаТаблицы Из РасчетПредопределеннымСпособом Цикл
		
		Запись = СтрокаТаблицы.ЗаписьРасчета;
		ИсходныеДанные = СтрокаТаблицы.ИсходныеДанные;
		
		ФиксированнаяИндексация = ИсходныеДанные.ФиксированнаяИндексация;
		
		//Расчет коэффициента
		Коэффициент = 1;
		ТекКоэф = 1;
		
		Если ИсходныеДанные.БазовыйПериодИндексации >= ИсходныеДанные.ПериодИндексации Тогда
			Коэффициент = 1;
		Иначе	
			
			СтрокаОтбора = Новый Структура("Начало, Конец");
			СтрокаОтбора.Начало = ИсходныеДанные.БазовыйПериодИндексации;
			СтрокаОтбора.Конец  = ИсходныеДанные.ПериодИндексации;
			масКоэффициентыИндексации = тбКоэффициентыИндексации.НайтиСтроки(СтрокаОтбора);
			
			Если масКоэффициентыИндексации.Количество() <> 0 Тогда
				//коэффициент уже рассчитан
				Коэффициент = масКоэффициентыИндексации[0].Коэффициент;
			Иначе
				
				Для каждого ТекущаяСтрока Из тбИндексыИнфляции Цикл
			
					Если ТекущаяСтрока.Период < ДобавитьМесяц(СтрокаОтбора.Начало,1) Тогда
						Продолжить;
					ИначеЕсли ТекущаяСтрока.Период > СтрокаОтбора.Конец Тогда
						Прервать;			
					КонецЕсли; 
					
					ТекКоэф = ТекКоэф * ТекущаяСтрока.Индекс;
					Если Окр(ТекКоэф, 3) > ТекущаяСтрока.Порог Тогда
						Коэффициент = Коэффициент * Окр(ТекКоэф, 3); 
						ТекКоэф = 1;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;	
			
		КонецЕсли;
		
		Коэффициент = Окр(Коэффициент,3) - 1;
		
		Если ИсходныеДанные.ВидПропорцииВремени = Перечисления.ВидыПропорцииВремени.ПоЧасам Тогда
			Отработано = ИсходныеДанные.ОтработаноЧасов;
			Норма = ИсходныеДанные.НормаЧасовЗаМесяц;
		Иначе
			Отработано = ИсходныеДанные.ОтработаноДней;
			Норма = ИсходныеДанные.НормаДнейЗаМесяц;
		КонецЕсли;	
		
		//Расчет базы
		РасчетнаяБаза = МИН(ИсходныеДанные.РасчетнаяБаза, МАКС(ИсходныеДанные.ПрожиточныйМинимумТрудоспособные-ИсходныеДанные.БазаИндексацииСовместителя,0));
		
		Если НЕ ЗначениеЗаполнено(Отработано)  Тогда
			//Отработанных дней не найдено, считать фиксированную индексацию не надо
			КоэффициентИндексацииПропорционально = 0;
		ИначеЕсли НЕ ЗначениеЗаполнено(Норма) Тогда
			//Графика нет, считаем по полной
			КоэффициентИндексацииПропорционально = 1;
		Иначе
			КоэффициентИндексацииПропорционально = Мин(Отработано/Норма,1);
			РасчетнаяБаза = МАКС(ИсходныеДанные.ПрожиточныйМинимумТрудоспособные-ИсходныеДанные.БазаИндексацииСовместителя,0);
		КонецЕсли;

		
		Запись.Результат = Окр(РасчетнаяБаза * Коэффициент*КоэффициентИндексацииПропорционально,2) + Окр(ФиксированнаяИндексация*КоэффициентИндексацииПропорционально,2);	 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьПредопределеннымСпособомДоплатаДоМЗП(РасчетПредопределеннымСпособом, НаборыЗаписей, ДокументСсылка, МесяцНачисления, ДанныеФормыОбъект)
	
	Для Каждого СтрокаТаблицы Из РасчетПредопределеннымСпособом Цикл
		
		Запись = СтрокаТаблицы.ЗаписьРасчета;
		ИсходныеДанные = СтрокаТаблицы.ИсходныеДанные;
					
		РезультатБаза = ИсходныеДанные.РасчетнаяБаза;
		МинимальнаяЗарплата = ИсходныеДанные.МинЗП;
		
		Если РезультатБаза = 0 Тогда
			Запись.Результат = 0;
			
		ИначеЕсли МинимальнаяЗарплата = 0 Тогда
			Запись.Результат = 0;
			
		Иначе	
			
			Если ИсходныеДанные.ВидПропорцииВремени = Перечисления.ВидыПропорцииВремени.ПоЧасам Тогда
				Отработано = ИсходныеДанные.ОтработаноЧасов;
				Норма = ИсходныеДанные.НормаЧасовЗаМесяц;
			Иначе
				Отработано = ИсходныеДанные.ОтработаноДней;
				Норма = ИсходныеДанные.НормаДнейЗаМесяц;
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(Отработано) Тогда
				//Отработанных дней не найдено, считать не надо
				КоэффициентДоплаты = 0;
			ИначеЕсли Норма = 0 Тогда
				//норма не определена, начисляем полностью
				КоэффициентДоплаты = 1;
			Иначе
				КоэффициентДоплаты = Мин(Отработано/Норма,1);
			КонецЕсли;
			
			МинимальнаяЗарплатаПропорционально = Окр(МинимальнаяЗарплата*КоэффициентДоплаты,2);
			
			Запись.Результат = Макс(МинимальнаяЗарплатаПропорционально - РезультатБаза, 0);
			
		КонецЕсли;	
				
	КонецЦикла;
	
КонецПроцедуры


Процедура РассчитатьПоМесячнойТарифнойСтавкеПоЧасам(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоЧасам Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыРасчета Цикл
		
		Запись = СтрокаТаблицы.ЗаписьРасчета;
		ИсходныеДанные = СтрокаТаблицы.ИсходныеДанные;
		
		Если ИсходныеДанные.НормаЧасовЗаМесяц = 0 ИЛИ
			 ИсходныеДанные.ЧасовПоКалендарю = 0 Тогда
			Запись.Результат = 0;	 
		Иначе		
			Запись.Результат = ИсходныеДанные.Размер * ИсходныеДанные.ЧасовПоКалендарю/ИсходныеДанные.НормаЧасовЗаМесяц;
		КонецЕсли;	 	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьПоМесячнойТарифнойСтавкеПоДням(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоДням Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыРасчета Цикл
		
		Запись = СтрокаТаблицы.ЗаписьРасчета;
		ИсходныеДанные = СтрокаТаблицы.ИсходныеДанные;
		
		Если ИсходныеДанные.НормаДнейЗаМесяц = 0 ИЛИ
			 ИсходныеДанные.ДнейПоКалендарю = 0 Тогда
			Запись.Результат = 0;	 
		Иначе		
			Запись.Результат = ИсходныеДанные.Размер * ИсходныеДанные.ДнейПоКалендарю/ИсходныеДанные.НормаДнейЗаМесяц;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьПоДневнойТарифнойСтавке(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ПоДневнойТарифнойСтавке Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыРасчета Цикл
		
		Запись = СтрокаТаблицы.ЗаписьРасчета;
		ИсходныеДанные = СтрокаТаблицы.ИсходныеДанные;
		
		Запись.Результат = ИсходныеДанные.Размер * ИсходныеДанные.ДнейПоКалендарю;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьПоЧасовойТарифнойСтавке(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ПоЧасовойТарифнойСтавке Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыРасчета Цикл
		
		Запись = СтрокаТаблицы.ЗаписьРасчета;
		ИсходныеДанные = СтрокаТаблицы.ИсходныеДанные;
		
		Запись.Результат = ИсходныеДанные.Размер * ИсходныеДанные.ЧасовПоКалендарю;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьФиксированнойСуммой(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.ФиксированнойСуммой 
		И СпособРасчета <> Перечисления.СпособыРасчетаУдержаний.ФиксированнойСуммой Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыРасчета Цикл
		
		Запись = СтрокаТаблицы.ЗаписьРасчета;
		ИсходныеДанные = СтрокаТаблицы.ИсходныеДанные;
		
		Запись.Результат = ИсходныеДанные.Размер;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьПроцентом(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.Процентом 
		И СпособРасчета <> Перечисления.СпособыРасчетаУдержаний.Процентом Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыРасчета Цикл
		
		Запись = СтрокаТаблицы.ЗаписьРасчета;
		ИсходныеДанные = СтрокаТаблицы.ИсходныеДанные;
		
		Запись.Результат = ИсходныеДанные.РасчетнаяБаза * ИсходныеДанные.Размер / 100;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьНулеваяСумма(СпособРасчета, СтрокиТаблицыРасчета, НаборыЗаписей, ДокументСсылка)
	
	Если СпособРасчета <> Перечисления.СпособыРасчетаНачислений.НулеваяСумма Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицыРасчета Цикл
		
		Запись = СтрокаТаблицы.ЗаписьРасчета;
		ИсходныеДанные = СтрокаТаблицы.ИсходныеДанные;
		
		Запись.Результат = 0;
		
	КонецЦикла;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// Регистрация результатов расчета


Процедура СформироватьДвиженияНачислений(Движения, Отказ, Организация, ПериодРегистрации, Начисления, ЗаписыватьДвижения = Ложь) Экспорт
	
	
	Для Каждого Строка Из Начисления Цикл
		НоваяСтрока = Движения.Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.ПериодРегистрации = ПериодРегистрации;
		НоваяСтрока.ВидРасчета = Строка.Начисление;
		
		// Заполняем базовый период по умолчанию
		НоваяСтрока.БазовыйПериодНачало = НачалоМесяца(НоваяСтрока.ДатаНачала);
		НоваяСтрока.БазовыйПериодКонец = КонецМесяца(НоваяСтрока.ДатаОкончания);
		
		Если Строка.Начисление.ПериодРасчетаБазовыхНачислений <> Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц Тогда
			БазовыйПериод = БазовыйПериодНачисления(НачалоМесяца(НоваяСтрока.ДатаНачала), Строка.Начисление.ПериодРасчетаБазовыхНачислений, Строка.Начисление.КоличествоМесяцевБазовогоПериода);
			НоваяСтрока.БазовыйПериодНачало = БазовыйПериод.ДатаНачала;
			НоваяСтрока.БазовыйПериодКонец = БазовыйПериод.ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	
	Движения.Начисления = НачисленияИБазовыеПериодыИндексации(Движения.Начисления, ПериодРегистрации, Организация);

	Движения.Начисления.Записывать = Истина;
	
	
	Если ЗаписыватьДвижения Тогда
		Движения.Начисления.Записать();
		Движения.Начисления.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияУдержаний(Движения, Отказ, Организация, ПериодРегистрации, Удержания, ЗаписыватьДвижения = Ложь) Экспорт
	
	
	Для Каждого Строка Из Удержания Цикл
		НоваяСтрока = Движения.Удержания.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.ПериодРегистрации = ПериодРегистрации;
		НоваяСтрока.ВидРасчета = Строка.Удержание;
		
		// Заполняем базовый период
		НоваяСтрока.БазовыйПериодНачало = НачалоМесяца(Строка.ДатаНачала);
		НоваяСтрока.БазовыйПериодКонец = КонецМесяца(Строка.ДатаОкончания);
		
	КонецЦикла;
	
	Движения.Удержания.Записывать = Истина;
	
	
	Если ЗаписыватьДвижения Тогда
		Движения.Удержания.Записать();
		Движения.Удержания.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьНачисленияУдержания(Движения, Отказ, Организация, ПериодРегистрации, Начисления, ЗаписыватьДвижения = Ложь) Экспорт
	
	
	Если Начисления <> НеОпределено Тогда
		
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	Начисления.Сотрудник,
			|	Начисления.Подразделение,
			|	Начисления.ВидРасчета КАК НачислениеУдержание,
			|	Начисления.Результат КАК Сумма,
			|	Начисления.ОтработаноДней,
			|	Начисления.ОтработаноЧасов,
			|	Начисления.НормаДней,
			|	Начисления.НормаЧасов,
			|	Начисления.ДатаНачала,
			|	Начисления.ДатаОкончания
			|ПОМЕСТИТЬ ВТНачисления
			|ИЗ
			|	&Начисления КАК Начисления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Начисления.*,
			|	&Организация КАК Организация,
			|	Начисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
			|	&ПериодРегистрации КАК Период,
			|	НАЧАЛОПЕРИОДА(Начисления.ДатаНачала, МЕСЯЦ) КАК ПериодДействия,
			|	Начисления.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияНачисления,
			|	Начисления.НачислениеУдержание.ДоходНДФЛ КАК ДоходНДФЛ,
			|	Начисления.НачислениеУдержание.ВидЕСВ КАК ВидЕСВ
			|ИЗ
			|	ВТНачисления КАК Начисления";
			
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			
		Запрос.УстановитьПараметр("Начисления", Начисления);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
		РезультатЗапроса = Запрос.Выполнить();		
		
	    Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
		    НоваяСтрока = Движения.НачисленияУдержанияПоСотрудникам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.НалоговыйПериодЕСВ = УчетСтраховыхВзносов.ОпределитьНалоговыйПериод(ПериодРегистрации, Выборка.ПериодДействия, Выборка.ВидЕСВ, Выборка.КатегорияНачисления);
			НоваяСтрока.НалоговыйПериодНДФЛ = УчетНДФЛ.ОпределитьНалоговыйПериод(ПериодРегистрации, Выборка.ПериодДействия, Выборка.ДоходНДФЛ, Выборка.КатегорияНачисления);
		КонецЦикла;
		
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Истина;
		
	КонецЕсли;
	
	Если ЗаписыватьДвижения Тогда
		Движения.НачисленияУдержанияПоСотрудникам.Записать();
		Движения.НачисленияУдержанияПоСотрудникам.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры









