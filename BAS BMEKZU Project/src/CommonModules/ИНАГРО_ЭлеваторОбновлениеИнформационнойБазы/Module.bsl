#Область ПрограммныйИнтерфейс

#Область НачальноеЗаполнение
	
// Перезаполняет справочник Виды документов списком документов из метаданных.
//
Процедура ЗаполнитьСправочникВидыДокументов() Экспорт
		
	СписокДокументовККУ = ПолучитьСписокДокументовККУ();	
		
	СправочникВидыДокументов = Справочники.ИНАГРО_ВидыДокументов;

	Для Каждого ДокументККУ Из СписокДокументовККУ Цикл
		
		МетаданныеОбъекта = Метаданные.Документы.Найти(ДокументККУ);
		
		Если МетаданныеОбъекта <> Неопределено Тогда
			
			ИмяПоМетаданным = МетаданныеОбъекта.Имя;
			
			Если СправочникВидыДокументов.НайтиПоРеквизиту("ИмяПоМетаданным", ИмяПоМетаданным) = СправочникВидыДокументов.ПустаяСсылка() Тогда				
				
				НовыйЭлемент = Справочники.ИНАГРО_ВидыДокументов.СоздатьЭлемент();			
				НовыйЭлемент.ИмяПоМетаданным = ИмяПоМетаданным;
				
				Если ДокументККУ.Пометка Тогда
					НовыйЭлемент.ВидЖурналаЛаборатории = Перечисления.ИНАГРО_ВидыЖурналов.ЖурналЛаборатории;
				КонецЕсли;				
				
				Если    ИмяПоМетаданным = "ИНАГРО_ТТНВвоз"
					ИЛИ ИмяПоМетаданным = "ИНАГРО_ТТНВвозЖД"
					ИЛИ ИмяПоМетаданным = "ИНАГРО_ТТНВнутр"
					ИЛИ ИмяПоМетаданным = "ИНАГРО_ТТНВывоз"
					ИЛИ ИмяПоМетаданным = "ИНАГРО_ТТНВывозЖД" Тогда
					НовыйЭлемент.ВидЖурнала            = Перечисления.ИНАГРО_ВидыЖурналов.ЖурналВесовой;			   
				КонецЕсли;
				
				НовыйЭлемент.Наименование    = МетаданныеОбъекта.Синоним;			
				НовыйЭлемент.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 
		
КонецПроцедуры

// Заполняет настройки формирования реестров.
//
Процедура ЗаполнитьИНАГРО_НастройкиФормированияРеестровТТН() Экспорт
	
	Обработки.ИНАГРО_ОбновлениеИнформационнойБазы.ЗаполнитьНастройкиФормированияРеестров();
	
КонецПроцедуры

#КонецОбласти

#Область ПереходСРедакции12На21

// Переобразовывает индивидуальные настройки пользователей.
//
Процедура ПреобразоватьИндивидуальныеНастройкиПользователейЭлеватор12() Экспорт
	
	// РС ИНАГРО_НастройкиПользователей
	
	СписокПереносимыхНастроек = Новый СписокЗначений;
	СписокПереносимыхНастроек.Добавить("ВидХранения",                                "ВидХранения");
	СписокПереносимыхНастроек.Добавить("ЗаполнениеПредРасчБезОтходов",               "ЗаполнениеПредРасчБезОтходов");
	СписокПереносимыхНастроек.Добавить("ИнтерактивноеФормированиеТиповыхДокументов", "ИнтерактивноеФормированиеТиповыхДокументов");
	СписокПереносимыхНастроек.Добавить("КонтролироватьОстаткиУслуг",                 "КонтролироватьОстаткиУслуг");
	СписокПереносимыхНастроек.Добавить("ОсновнойСкладЭлеватора",                     "ОсновнойСкладЭлеватора");
	СписокПереносимыхНастроек.Добавить("ОсновнойТипХранения",                        "ОсновнойТипХранения");
	СписокПереносимыхНастроек.Добавить("ОтражатьВБухгалтерскомУчете",                "ОтражатьВБухгалтерскомУчете");
	СписокПереносимыхНастроек.Добавить("ПоказыватьВДокументахОстатокВЗачетномВесе",  "ПоказыватьВДокументахОстатокВЗачетномВесе");
	СписокПереносимыхНастроек.Добавить("СпособХранения",                             "СпособХранения");
	СписокПереносимыхНастроек.Добавить("УбыльПриХранении",                           "УбыльПриХранении");
	СписокПереносимыхНастроек.Добавить("Урожай",                                     "Урожай");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдалитьИНАГРО_НастройкиПользователей.Значение,
		|	УдалитьИНАГРО_НастройкиПользователей.Настройка.ИмяПредопределенныхДанных КАК ИмяНастройки12,
		|	УдалитьИНАГРО_НастройкиПользователей.Пользователь.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
		|ИЗ
		|	РегистрСведений.УдалитьИНАГРО_НастройкиПользователей КАК УдалитьИНАГРО_НастройкиПользователей
		|ГДЕ
		|	УдалитьИНАГРО_НастройкиПользователей.Настройка.ИмяПредопределенныхДанных В(&СписокПереносимыхНастроек)";
	
	Запрос.УстановитьПараметр("СписокПереносимыхНастроек", СписокПереносимыхНастроек);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ИмяНастройки21 = СписокПереносимыхНастроек.НайтиПоЗначению(Выборка.ИмяНастройки12).Представление;
		
		ПрочитанныеСвойства = Неопределено;
		Если Пользователи.ПрочитатьПользователяИБ(Выборка.ИдентификаторПользователяИБ, ПрочитанныеСвойства) Тогда
			ХранилищеОбщихНастроек.Сохранить(ВРег(ИмяНастройки21), "Элеватор", Выборка.Значение, , ПрочитанныеСвойства.Имя);
		КонецЕсли;   
		
	КонецЦикла;
	
	// РС ИНАГРО_ЗначенияПравПользователя
	
	СписокПереносимыхНастроек = Новый СписокЗначений;
	СписокПереносимыхНастроек.Добавить("ЗапретитьДоступКБухгалтерскойЧастиФормы34",                   "ЗапретитьДоступКБухгалтерскойЧастиФормы34");
	СписокПереносимыхНастроек.Добавить("ЗапретитьДоступКЭлеваторнойЧастиФормы34",                     "ЗапретитьДоступКЭлеваторнойЧастиФормы34");
	СписокПереносимыхНастроек.Добавить("ЗапретитьАвтоматическиИзменятьВесТТН",                        "ЗапретитьАвтоматическиИзменятьВесТТН");
	СписокПереносимыхНастроек.Добавить("ЗапретитьРедактироватьДокументы",                             "ЗапретитьРедактироватьДокументы");
	СписокПереносимыхНастроек.Добавить("ЗапретитьВручнуюИзменятьВесТТН",                              "ЗапретитьВручнуюИзменятьВесТТН");
	СписокПереносимыхНастроек.Добавить("ЗапретитьРедактироватьТТНПриНаличииРеестра",                  "ЗапретитьРедактироватьТТНПриНаличииРеестра");
	СписокПереносимыхНастроек.Добавить("ЗапретитьВводитьДокументыВнеБизнесПроцессов",                 "ЗапретитьВводитьДокументыВнеБизнесПроцессов");
	СписокПереносимыхНастроек.Добавить("ЗапретитьРедактироватьДокументыВведенныеЧерезБизнесПроцессы", "ЗапретитьРедактироватьДокументыВведенныеЧерезБизнесПроцессы");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдалитьИНАГРО_ЗначенияПравПользователя.Значение,
		|	УдалитьИНАГРО_ЗначенияПравПользователя.Право.ИмяПредопределенныхДанных КАК ИмяНастройки12,
		|	УдалитьИНАГРО_ЗначенияПравПользователя.Пользователь
		|ИЗ
		|	РегистрСведений.УдалитьИНАГРО_ЗначенияПравПользователя КАК УдалитьИНАГРО_ЗначенияПравПользователя
		|ГДЕ
		|	УдалитьИНАГРО_ЗначенияПравПользователя.Право.ИмяПредопределенныхДанных В(&СписокПереносимыхНастроек)";

	Запрос.УстановитьПараметр("СписокПереносимыхНастроек", СписокПереносимыхНастроек);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Настройка21 = РегистрыСведений.ИНАГРО_ПраваПользователейЭлеватор.СоздатьМенеджерЗаписи();	
	
	Выборка.Следующий();
	
	Настройка21.Пользователь = Выборка.Пользователь;
	
	Если Выборка.ИмяНастройки12 = Неопределено Тогда
		Возврат;	
	КонецЕсли;

	ИмяНастройки21 = СписокПереносимыхНастроек.НайтиПоЗначению(Выборка.ИмяНастройки12).Представление;
	
	Настройка21[ИмяНастройки21] = Выборка.Значение;

	Пока Выборка.Следующий() Цикл 				
				
		ИмяНастройки21 = СписокПереносимыхНастроек.НайтиПоЗначению(Выборка.ИмяНастройки12).Представление;
	
		Настройка21[ИмяНастройки21] = Выборка.Значение;
		
	КонецЦикла;
	
	Настройка21.Записать();

КонецПроцедуры

// Переобразовывает журналы лаборатории и весовой.
//
Процедура ПреобразоватьЖурналыЛабораторииИВесовой12() Экспорт
	
	ПреобразоватьЖурналыЛаборатории12();
	
	ПреобразоватьЛабораторныйЖурналФорма49();

	ПреобразоватьЖурналыВесовой12();	
	
	ПреобразоватьЭлементыСправочникаВидыДокументов12();

КонецПроцедуры

// Перезаполняет субконто.
//
Процедура ПерезаполнитьСубконто12() Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИНАГРО_АктРаспределения.Ссылка КАК Ссылка,
		|	ИНАГРО_АктРаспределения.УдалитьСубконто1 КАК УдалитьСубконто1,
		|	ИНАГРО_АктРаспределения.УдалитьСубконто2 КАК УдалитьСубконто2,
		|	ИНАГРО_АктРаспределения.УдалитьСубконто3 КАК УдалитьСубконто3
		|ИЗ
		|	Документ.ИНАГРО_АктРаспределения КАК ИНАГРО_АктРаспределения";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(); 	
	
	НачатьТранзакцию();
	
	Попытка
		
		Пока Выборка.Следующий() Цикл			
			
			ДокументСсылка = Выборка.Ссылка;
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();		
			ДокументОбъект.Субконто1 = Выборка.УдалитьСубконто1;
			ДокументОбъект.Субконто2 = Выборка.УдалитьСубконто2;
			ДокументОбъект.Субконто3 = Выборка.УдалитьСубконто3;
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru='Операция не выполнена';uk='Операція не виконана'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Перезаполняет состав комиссий.
//
Процедура ПерезаполнитьСоставКомиссий12() Экспорт
		
	// ИНАГРО_АктУничтоженияНегодныхОтходов, ИНАГРО_ВедомостьОтвесов, ИНАГРО_РеестрТТНВывоз
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_АктУничтоженияНегодныхОтходов.Ссылка КАК Ссылка,
		|	ИНАГРО_АктУничтоженияНегодныхОтходов.ПредседательКомиссии КАК ПредседательКомиссии,
		|	ИНАГРО_АктУничтоженияНегодныхОтходов.ПервыйЧленКомиссии КАК ПервыйЧленКомиссии,
		|	ИНАГРО_АктУничтоженияНегодныхОтходов.ВторойЧленКомиссии КАК ВторойЧленКомиссии,
		|	ИНАГРО_АктУничтоженияНегодныхОтходов.УдалитьПредседательКомиссии.ФизическоеЛицо КАК ПредседательКомиссииФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА ИНАГРО_АктУничтоженияНегодныхОтходов.УдалитьЧленКомиссии1 ССЫЛКА Справочник.Сотрудники
		|			ТОГДА ИНАГРО_АктУничтоженияНегодныхОтходов.УдалитьЧленКомиссии1.ФизическоеЛицо
		|		ИНАЧЕ ИНАГРО_АктУничтоженияНегодныхОтходов.УдалитьЧленКомиссии1
		|	КОНЕЦ КАК ЧленКомиссии1,
		|	ВЫБОР
		|		КОГДА ИНАГРО_АктУничтоженияНегодныхОтходов.УдалитьЧленКомиссии2 ССЫЛКА Справочник.Сотрудники
		|			ТОГДА ИНАГРО_АктУничтоженияНегодныхОтходов.УдалитьЧленКомиссии2.ФизическоеЛицо
		|		ИНАЧЕ ИНАГРО_АктУничтоженияНегодныхОтходов.УдалитьЧленКомиссии2
		|	КОНЕЦ КАК ЧленКомиссии2
		|ИЗ
		|	Документ.ИНАГРО_АктУничтоженияНегодныхОтходов КАК ИНАГРО_АктУничтоженияНегодныхОтходов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИНАГРО_ВедомостьОтвесов.Ссылка,
		|	ИНАГРО_ВедомостьОтвесов.ПредседательКомиссии,
		|	ИНАГРО_ВедомостьОтвесов.ПервыйЧленКомиссии,
		|	ИНАГРО_ВедомостьОтвесов.ВторойЧленКомиссии,
		|	ИНАГРО_ВедомостьОтвесов.УдалитьПредседательКомиссии.ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА ИНАГРО_ВедомостьОтвесов.УдалитьЧленКомиссии1 ССЫЛКА Справочник.Сотрудники
		|			ТОГДА ИНАГРО_ВедомостьОтвесов.УдалитьЧленКомиссии1.ФизическоеЛицо
		|		ИНАЧЕ ИНАГРО_ВедомостьОтвесов.УдалитьЧленКомиссии1
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ИНАГРО_ВедомостьОтвесов.УдалитьЧленКомиссии2 ССЫЛКА Справочник.Сотрудники
		|			ТОГДА ИНАГРО_ВедомостьОтвесов.УдалитьЧленКомиссии2.ФизическоеЛицо
		|		ИНАЧЕ ИНАГРО_ВедомостьОтвесов.УдалитьЧленКомиссии2
		|	КОНЕЦ
		|ИЗ
		|	Документ.ИНАГРО_ВедомостьОтвесов КАК ИНАГРО_ВедомостьОтвесов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИНАГРО_РеестрТТНВывоз.Ссылка,
		|	ИНАГРО_РеестрТТНВывоз.ПредседательКомиссии,
		|	ИНАГРО_РеестрТТНВывоз.ПервыйЧленКомиссии,
		|	ИНАГРО_РеестрТТНВывоз.ВторойЧленКомиссии,
		|	ИНАГРО_РеестрТТНВывоз.УдалитьПредседательКомиссии.ФизическоеЛицо,
		|	ВЫБОР
		|		КОГДА ИНАГРО_РеестрТТНВывоз.УдалитьЧленКомиссии1 ССЫЛКА Справочник.Сотрудники
		|			ТОГДА ИНАГРО_РеестрТТНВывоз.УдалитьЧленКомиссии1.ФизическоеЛицо
		|		ИНАЧЕ ИНАГРО_РеестрТТНВывоз.УдалитьЧленКомиссии1
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ИНАГРО_РеестрТТНВывоз.УдалитьЧленКомиссии2 ССЫЛКА Справочник.Сотрудники
		|			ТОГДА ИНАГРО_РеестрТТНВывоз.УдалитьЧленКомиссии2.ФизическоеЛицо
		|		ИНАЧЕ ИНАГРО_РеестрТТНВывоз.УдалитьЧленКомиссии2
		|	КОНЕЦ
		|ИЗ
		|	Документ.ИНАГРО_РеестрТТНВывоз КАК ИНАГРО_РеестрТТНВывоз";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(); 	
	
	НачатьТранзакцию();
	
	Попытка
		
		Пока Выборка.Следующий() Цикл			
			
			ДокументСсылка = Выборка.Ссылка;
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();		
			ДокументОбъект.ПредседательКомиссии  = Выборка.ПредседательКомиссииФизическоеЛицо;
			ДокументОбъект.ПервыйЧленКомиссии    = Выборка.ЧленКомиссии1;
			ДокументОбъект.ВторойЧленКомиссии    = Выборка.ЧленКомиссии2;
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru='Операция не выполнена';uk='Операція не виконана'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	// ИНАГРО_Инвентаризация
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИНАГРО_Инвентаризация.Ссылка КАК Ссылка,
		|	ИНАГРО_Инвентаризация.ПредседательКомиссии КАК ПредседательКомиссии,
		|	ИНАГРО_Инвентаризация.ПервыйЧленКомиссии КАК ПервыйЧленКомиссии,
		|	ИНАГРО_Инвентаризация.ВторойЧленКомиссии КАК ВторойЧленКомиссии,
		|	ИНАГРО_Инвентаризация.ТретийЧленКомиссии КАК ТретийЧленКомиссии,
		|	ИНАГРО_Инвентаризация.ЧетвертыйЧленКомиссии КАК ЧетвертыйЧленКомиссии,
		|	ИНАГРО_Инвентаризация.ПятыйЧленКомиссии КАК ПятыйЧленКомиссии,
		|	ИНАГРО_Инвентаризация.УдалитьЧленКомиссии1.ФизическоеЛицо КАК ЧленКомиссии1,
		|	ИНАГРО_Инвентаризация.УдалитьЧленКомиссии2.ФизическоеЛицо КАК ЧленКомиссии2,
		|	ИНАГРО_Инвентаризация.УдалитьЧленКомиссии3.ФизическоеЛицо КАК ЧленКомиссии3,
		|	ИНАГРО_Инвентаризация.УдалитьЧленКомиссии4.ФизическоеЛицо КАК ЧленКомиссии4,
		|	ИНАГРО_Инвентаризация.УдалитьЧленКомиссии5.ФизическоеЛицо КАК ЧленКомиссии5,
		|	ИНАГРО_Инвентаризация.УдалитьЧленКомиссии6.ФизическоеЛицо КАК ЧленКомиссии6
		|ИЗ
		|	Документ.ИНАГРО_Инвентаризация КАК ИНАГРО_Инвентаризация";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(); 	
	
	НачатьТранзакцию();
	
	Попытка
		
		Пока Выборка.Следующий() Цикл			
			
			ДокументСсылка = Выборка.Ссылка;
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();		
			ДокументОбъект.ПредседательКомиссии  = Выборка.ЧленКомиссии1;
			ДокументОбъект.ПервыйЧленКомиссии    = Выборка.ЧленКомиссии2;
			ДокументОбъект.ВторойЧленКомиссии    = Выборка.ЧленКомиссии3;
			ДокументОбъект.ТретийЧленКомиссии    = Выборка.ЧленКомиссии4;
			ДокументОбъект.ЧетвертыйЧленКомиссии = Выборка.ЧленКомиссии5;
			ДокументОбъект.ПятыйЧленКомиссии     = Выборка.ЧленКомиссии6;
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru='Операция не выполнена';uk='Операція не виконана'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	// ИНАГРО_РеестрТТНВнутр
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИНАГРО_РеестрТТНВнутр.Ссылка КАК Ссылка,
		|	ИНАГРО_РеестрТТНВнутр.ПредседательКомиссии КАК ПредседательКомиссии,
		|	ИНАГРО_РеестрТТНВнутр.ПервыйЧленКомиссии КАК ПервыйЧленКомиссии,
		|	ИНАГРО_РеестрТТНВнутр.ВторойЧленКомиссии КАК ВторойЧленКомиссии,
		|	ИНАГРО_РеестрТТНВнутр.ТретийЧленКомиссии КАК ТретийЧленКомиссии,
		|	ИНАГРО_РеестрТТНВнутр.УдалитьПервыйЧленКомиссии.ФизическоеЛицо КАК ПредседательКомиссииФизическоеЛицо,
		|	ИНАГРО_РеестрТТНВнутр.УдалитьВторойЧленКомиссии.ФизическоеЛицо КАК ЧленКомиссии1,
		|	ИНАГРО_РеестрТТНВнутр.УдалитьТретийЧленКомиссии.ФизическоеЛицо КАК ЧленКомиссии2
		|ИЗ
		|	Документ.ИНАГРО_РеестрТТНВнутр КАК ИНАГРО_РеестрТТНВнутр";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(); 	
	
	НачатьТранзакцию();
	
	Попытка
		
		Пока Выборка.Следующий() Цикл			
			
			ДокументСсылка = Выборка.Ссылка;
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();		
			ДокументОбъект.ПредседательКомиссии  = Выборка.ПредседательКомиссииФизическоеЛицо;
			ДокументОбъект.ПервыйЧленКомиссии    = Выборка.ЧленКомиссии1;
			ДокументОбъект.ВторойЧленКомиссии    = Выборка.ЧленКомиссии2;
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru='Операция не выполнена';uk='Операція не виконана'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры

// Переобразовывает РС СформированныеДокументы.
//
Процедура ПреобразоватьИНАГРО_СформированныеДокументы12() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_СформированныеДокументы.Период КАК Период,
		|	ИНАГРО_СформированныеДокументы.ДокументИсточник КАК ДокументИсточник,
		|	ИНАГРО_СформированныеДокументы.ИмяТиповогоДокумента КАК ИмяТиповогоДокумента,
		|	ИНАГРО_СформированныеДокументы.ПорядковыйНомерТиповогоДокумента КАК ПорядковыйНомерТиповогоДокумента,
		|	ИНАГРО_СформированныеДокументы.ТиповыйДокумент КАК ТиповыйДокумент,
		|	ИНАГРО_СформированныеДокументы.ЗапретРедактирования КАК ЗапретРедактирования,
		|	ИНАГРО_СформированныеДокументы.УдалитьТиповыйДокумент КАК УдалитьТиповыйДокумент
		|ИЗ
		|	РегистрСведений.ИНАГРО_СформированныеДокументы КАК ИНАГРО_СформированныеДокументы";
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого СтрокаТаблицы Из ТаблицаРезультата Цикл							
			СтрокаТаблицы.ТиповыйДокумент = СтрокаТаблицы.УдалитьТиповыйДокумент;				
		КонецЦикла;
		
		НаборЗаписей = РегистрыСведений.ИНАГРО_СформированныеДокументы.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(ТаблицаРезультата);
		НаборЗаписей.Записать();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru='Операция не выполнена';uk='Операція не виконана'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры

// Заполняет реквизит ЕстьЛабораторныйАнализ.
//
Процедура ЗаполнитьЕстьЛабораторныйАнализ() Экспорт
	
	// ИНАГРО_Переоформление, ИНАГРО_РеестрТТНВвозЖД, ИНАГРО_РеестрТТНВнутр, ИНАГРО_РеестрТТНВывозЖД, ИНАГРО_ТТНВывоз
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_Переоформление.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ИНАГРО_Переоформление КАК ИНАГРО_Переоформление
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИНАГРО_РеестрТТНВвозЖД.Ссылка
		|ИЗ
		|	Документ.ИНАГРО_РеестрТТНВвозЖД КАК ИНАГРО_РеестрТТНВвозЖД
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИНАГРО_РеестрТТНВнутр.Ссылка
		|ИЗ
		|	Документ.ИНАГРО_РеестрТТНВнутр КАК ИНАГРО_РеестрТТНВнутр
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИНАГРО_РеестрТТНВывозЖД.Ссылка
		|ИЗ
		|	Документ.ИНАГРО_РеестрТТНВывозЖД КАК ИНАГРО_РеестрТТНВывозЖД
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИНАГРО_ТТНВывоз.Ссылка
		|ИЗ
		|	Документ.ИНАГРО_ТТНВывоз КАК ИНАГРО_ТТНВывоз";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(); 	

	НачатьТранзакцию();
	
	Попытка
		
		Пока Выборка.Следующий() Цикл			
			
			ДокументСсылка = Выборка.Ссылка;
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			
		КонецЦикла;
				
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru='Операция не выполнена';uk='Операція не виконана'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПреобразоватьЖурналыЛаборатории12()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_ЛабораторныйАнализ.Ссылка КАК ЛабораторныйАнализСсылка,
		|	ИНАГРО_ЛабораторныйАнализ.УдалитьЖурнал КАК Журнал,
		|	УдалитьИНАГРО_ЛабораторныеЖурналы.Ссылка КАК ЛабораторныйЖурналСсылка,
		|	УдалитьИНАГРО_ЛабораторныеЖурналы.Наименование КАК Наименование,
		|	УдалитьИНАГРО_ЛабораторныеЖурналы.ПоследнийНомер КАК ПоследнийНомер,
		|	УдалитьИНАГРО_ЛабораторныеЖурналы.Префикс КАК Префикс
		|ИЗ
		|	Документ.ИНАГРО_ЛабораторныйАнализ КАК ИНАГРО_ЛабораторныйАнализ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьИНАГРО_ЛабораторныеЖурналы КАК УдалитьИНАГРО_ЛабораторныеЖурналы
		|		ПО ИНАГРО_ЛабораторныйАнализ.УдалитьЖурнал = УдалитьИНАГРО_ЛабораторныеЖурналы.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Журнал
		|ИТОГИ ПО
		|	Журнал";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЖурнал = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НачатьТранзакцию();
	
	Попытка
		
		Пока ВыборкаЖурнал.Следующий() Цикл
			
			ВыборкаДетальныеЗаписи = ВыборкаЖурнал.Выбрать();

			Если ЗначениеЗаполнено(ВыборкаЖурнал.Журнал) Тогда
				
				НовыйЭлемент = Справочники.ИНАГРО_ТипыЖурналов.СоздатьЭлемент();
				НовыйЭлемент.Наименование = ВыборкаЖурнал.Журнал.Наименование;
				НовыйЭлемент.ВидЖурнала   = Перечисления.ИНАГРО_ВидыЖурналов.ЖурналЛаборатории;
				НовыйЭлемент.Префикс      = ВыборкаЖурнал.Журнал.Префикс;
				НовыйЭлемент.Записать();
				
				НомерЖурнала20 = РегистрыСведений.ИНАГРО_НумерацияЖурналовЭлеватора.СоздатьМенеджерЗаписи();
				НомерЖурнала20.ВидЖурнала          = НовыйЭлемент.ВидЖурнала;
				НомерЖурнала20.ТипЖурнала          = НовыйЭлемент.Ссылка;
				НомерЖурнала20.ТекущийНомерЖурнала = ВыборкаЖурнал.Журнал.ПоследнийНомер;			
				НомерЖурнала20.Записать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					ДокументСсылка = ВыборкаДетальныеЗаписи.ЛабораторныйАнализСсылка;
					ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
					ДокументОбъект.ВидЖурнала = Перечисления.ИНАГРО_ВидыЖурналов.ЖурналЛаборатории;
					ДокументОбъект.ТипЖурнала = НовыйЭлемент.Ссылка;
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ДокументОбъект.Записать();
					
				КонецЦикла;
				
			Иначе
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					ДокументСсылка = ВыборкаДетальныеЗаписи.ЛабораторныйАнализСсылка;
					ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
					ДокументОбъект.ВидЖурнала = Перечисления.ИНАГРО_ВидыЖурналов.ЖурналЛаборатории;
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ДокументОбъект.Записать();
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru='Операция не выполнена';uk='Операція не виконана'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры

Процедура ПреобразоватьЛабораторныйЖурналФорма49()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_Форма49.Период КАК Период,
		|	ИНАГРО_Форма49.Регистратор КАК Регистратор,
		|	ИНАГРО_Форма49.НомерСтроки КАК НомерСтроки,
		|	ИНАГРО_Форма49.Активность КАК Активность,
		|	ИНАГРО_Форма49.ВидХранения КАК ВидХранения,
		|	ИНАГРО_Форма49.Владелец КАК Владелец,
		|	ИНАГРО_Форма49.Качество КАК Качество,
		|	ИНАГРО_Форма49.ЛабораторныйАнализ КАК ЛабораторныйАнализ,
		|	ИНАГРО_Форма49.ЛабораторныйЖурнал КАК ЛабораторныйЖурнал,
		|	ИНАГРО_Форма49.Номенклатура КАК Номенклатура,
		|	ИНАГРО_Форма49.Организация КАК Организация,
		|	ИНАГРО_Форма49.Склад КАК Склад,
		|	ИНАГРО_Форма49.Урожай КАК Урожай,
		|	ИНАГРО_Форма49.ХарактеристикаВидаКультуры КАК ХарактеристикаВидаКультуры,
		|	ИНАГРО_Форма49.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	ИНАГРО_Форма49.УдалитьЛабораторныйЖурнал КАК УдалитьЛабораторныйЖурнал,
		|	ИНАГРО_Форма49.ЗначениеХарактеристики КАК ЗначениеХарактеристики,
		|	ИНАГРО_Форма49.Вес КАК Вес,
		|	ИНАГРО_Форма49.ВесВЦентнероПроцентах КАК ВесВЦентнероПроцентах,
		|	ИНАГРО_Форма49.УДАЛИТЬЛабораторныйАнализ КАК УДАЛИТЬЛабораторныйАнализ,
		|	ИНАГРО_Форма49.МоментВремени КАК МоментВремени,
		|	ИНАГРО_Форма49.ЛабораторныйАнализ.ТипЖурнала КАК ЛабораторныйАнализТипЖурнала
		|ИЗ
		|	РегистрСведений.ИНАГРО_Форма49 КАК ИНАГРО_Форма49
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор
		|ИТОГИ ПО
		|	Регистратор";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаРегистратор = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НачатьТранзакцию();
	
	Попытка
		
		Пока ВыборкаРегистратор.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.ИНАГРО_Форма49.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистратор.Регистратор);
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			
			ВыборкаДетальныеЗаписи = ВыборкаРегистратор.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальныеЗаписи);
				Запись.ЛабораторныйЖурнал = ВыборкаДетальныеЗаписи.ЛабораторныйАнализТипЖурнала;
			КонецЦикла;
			
			НаборЗаписей.Записать()
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru='Операция не выполнена';uk='Операція не виконана'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры

Процедура ПреобразоватьЖурналыВесовой12()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_ТТНВвоз.Ссылка КАК ТТНСсылка,
		|	ИНАГРО_ТТНВвоз.ВидЖурнала КАК ВидЖурнала,
		|	ИНАГРО_ТТНВвоз.УдалитьЖурналВесовщика КАК Журнал,
		|	УдалитьИНАГРО_ЖурналВесовщика.Ссылка КАК ЖурналВесовщикаСсылка,
		|	УдалитьИНАГРО_ЖурналВесовщика.Наименование КАК Наименование,
		|	УдалитьИНАГРО_ЖурналВесовщика.ПоследнийНомер КАК ПоследнийНомер,
		|	УдалитьИНАГРО_ЖурналВесовщика.Комментарий КАК Комментарий,
		|	ЛОЖЬ КАК Метка
		|ИЗ
		|	Документ.ИНАГРО_ТТНВвоз КАК ИНАГРО_ТТНВвоз
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьИНАГРО_ЖурналВесовщика КАК УдалитьИНАГРО_ЖурналВесовщика
		|		ПО ИНАГРО_ТТНВвоз.УдалитьЖурналВесовщика = УдалитьИНАГРО_ЖурналВесовщика.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИНАГРО_ТТНВвозЖД.Ссылка,
		|	ИНАГРО_ТТНВвозЖД.ВидЖурнала,
		|	ИНАГРО_ТТНВвозЖД.УдалитьЖурналВесовщика,
		|	УдалитьИНАГРО_ЖурналВесовщика.Ссылка,
		|	УдалитьИНАГРО_ЖурналВесовщика.Наименование,
		|	УдалитьИНАГРО_ЖурналВесовщика.ПоследнийНомер,
		|	УдалитьИНАГРО_ЖурналВесовщика.Комментарий,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.ИНАГРО_ТТНВвозЖД КАК ИНАГРО_ТТНВвозЖД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьИНАГРО_ЖурналВесовщика КАК УдалитьИНАГРО_ЖурналВесовщика
		|		ПО ИНАГРО_ТТНВвозЖД.УдалитьЖурналВесовщика = УдалитьИНАГРО_ЖурналВесовщика.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИНАГРО_ТТНВывоз.Ссылка,
		|	ИНАГРО_ТТНВывоз.ВидЖурнала,
		|	ИНАГРО_ТТНВывоз.УдалитьЖурналВесовщика,
		|	УдалитьИНАГРО_ЖурналВесовщика.Ссылка,
		|	УдалитьИНАГРО_ЖурналВесовщика.Наименование,
		|	УдалитьИНАГРО_ЖурналВесовщика.ПоследнийНомер,
		|	УдалитьИНАГРО_ЖурналВесовщика.Комментарий,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.ИНАГРО_ТТНВывоз КАК ИНАГРО_ТТНВывоз
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьИНАГРО_ЖурналВесовщика КАК УдалитьИНАГРО_ЖурналВесовщика
		|		ПО ИНАГРО_ТТНВывоз.УдалитьЖурналВесовщика = УдалитьИНАГРО_ЖурналВесовщика.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИНАГРО_ТТНВывозЖД.Ссылка,
		|	ИНАГРО_ТТНВывозЖД.ВидЖурнала,
		|	ИНАГРО_ТТНВывозЖД.УдалитьЖурналВесовщика,
		|	УдалитьИНАГРО_ЖурналВесовщика.Ссылка,
		|	УдалитьИНАГРО_ЖурналВесовщика.Наименование,
		|	УдалитьИНАГРО_ЖурналВесовщика.ПоследнийНомер,
		|	УдалитьИНАГРО_ЖурналВесовщика.Комментарий,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.ИНАГРО_ТТНВывозЖД КАК ИНАГРО_ТТНВывозЖД
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьИНАГРО_ЖурналВесовщика КАК УдалитьИНАГРО_ЖурналВесовщика
		|		ПО ИНАГРО_ТТНВывозЖД.УдалитьЖурналВесовщика = УдалитьИНАГРО_ЖурналВесовщика.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИНАГРО_ТТНВнутр.Ссылка,
		|	ИНАГРО_ТТНВнутр.ВидЖурнала,
		|	ИНАГРО_ТТНВнутр.УдалитьЖурналВесовщикаНаВвоз,
		|	УдалитьИНАГРО_ЖурналВесовщика.Ссылка,
		|	УдалитьИНАГРО_ЖурналВесовщика.Наименование,
		|	УдалитьИНАГРО_ЖурналВесовщика.ПоследнийНомер,
		|	УдалитьИНАГРО_ЖурналВесовщика.Комментарий,
		|	ИСТИНА
		|ИЗ
		|	Документ.ИНАГРО_ТТНВнутр КАК ИНАГРО_ТТНВнутр
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьИНАГРО_ЖурналВесовщика КАК УдалитьИНАГРО_ЖурналВесовщика
		|		ПО ИНАГРО_ТТНВнутр.УдалитьЖурналВесовщикаНаВвоз = УдалитьИНАГРО_ЖурналВесовщика.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИНАГРО_ТТНВнутр.Ссылка,
		|	ИНАГРО_ТТНВнутр.ВидЖурнала,
		|	ИНАГРО_ТТНВнутр.УдалитьЖурналВесовщикаНаВывоз,
		|	УдалитьИНАГРО_ЖурналВесовщика.Ссылка,
		|	УдалитьИНАГРО_ЖурналВесовщика.Наименование,
		|	УдалитьИНАГРО_ЖурналВесовщика.ПоследнийНомер,
		|	УдалитьИНАГРО_ЖурналВесовщика.Комментарий,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.ИНАГРО_ТТНВнутр КАК ИНАГРО_ТТНВнутр
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьИНАГРО_ЖурналВесовщика КАК УдалитьИНАГРО_ЖурналВесовщика
		|		ПО ИНАГРО_ТТНВнутр.УдалитьЖурналВесовщикаНаВывоз = УдалитьИНАГРО_ЖурналВесовщика.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Журнал
		|ИТОГИ ПО
		|	Журнал";
		
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаЖурнал = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НачатьТранзакцию();
	
	Попытка
		
		Пока ВыборкаЖурнал.Следующий() Цикл
			
			ВыборкаДетальныеЗаписи = ВыборкаЖурнал.Выбрать();
			
			Если ЗначениеЗаполнено(ВыборкаЖурнал.Журнал) Тогда
				
				НовыйЭлемент = Справочники.ИНАГРО_ТипыЖурналов.СоздатьЭлемент();
				НовыйЭлемент.Наименование = ВыборкаЖурнал.Журнал.Наименование;
				НовыйЭлемент.ВидЖурнала   = Перечисления.ИНАГРО_ВидыЖурналов.ЖурналВесовой;
				НовыйЭлемент.Комментарий  = ВыборкаЖурнал.Журнал.Комментарий;
				НовыйЭлемент.Записать();
				
				НомерЖурнала20 = РегистрыСведений.ИНАГРО_НумерацияЖурналовЭлеватора.СоздатьМенеджерЗаписи();
				НомерЖурнала20.ВидЖурнала          = НовыйЭлемент.ВидЖурнала;
				НомерЖурнала20.ТипЖурнала          = НовыйЭлемент.Ссылка;
				НомерЖурнала20.ТекущийНомерЖурнала = ВыборкаЖурнал.Журнал.ПоследнийНомер;			
				НомерЖурнала20.Записать();
				
				ВыборкаДетальныеЗаписи = ВыборкаЖурнал.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					ДокументСсылка = ВыборкаДетальныеЗаписи.ТТНСсылка;
					ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
					ДокументОбъект.ВидЖурнала = Перечисления.ИНАГРО_ВидыЖурналов.ЖурналВесовой;
					Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ИНАГРО_ТТНВнутр") Тогда
						Если ВыборкаДетальныеЗаписи.Метка Тогда
							ДокументОбъект.ТипЖурналаВвоз  = НовыйЭлемент.Ссылка;
						Иначе
							ДокументОбъект.ТипЖурналаВывоз = НовыйЭлемент.Ссылка;	
						КонецЕсли;	
					Иначе
						ДокументОбъект.ТипЖурнала = НовыйЭлемент.Ссылка;
					КонецЕсли;
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ДокументОбъект.Записать();
					
				КонецЦикла;
				
			Иначе
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					ДокументСсылка = ВыборкаДетальныеЗаписи.ТТНСсылка;
					ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
					ДокументОбъект.ВидЖурнала = Перечисления.ИНАГРО_ВидыЖурналов.ЖурналВесовой;
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ДокументОбъект.Записать();
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru='Операция не выполнена';uk='Операція не виконана'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры

Процедура ПреобразоватьЭлементыСправочникаВидыДокументов12()
	
	СправочникВидыДокументов = Справочники.ИНАГРО_ВидыДокументов;

	СправочникСсылка = СправочникВидыДокументов.НайтиПоРеквизиту("ИмяПоМетаданным", "ИНАГРО_РеестрТТНЖДВвоз");
	Если ЗначениеЗаполнено(СправочникСсылка) Тогда			
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		СправочникОбъект.ИмяПоМетаданным = "ИНАГРО_РеестрТТНВвозЖД";
		СправочникОбъект.Записать();
	КонецЕсли;	
	
	СправочникСсылка = СправочникВидыДокументов.НайтиПоРеквизиту("ИмяПоМетаданным", "ИНАГРО_РеестрТТНЖДВывоз");
	Если ЗначениеЗаполнено(СправочникСсылка) Тогда			
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		СправочникОбъект.ИмяПоМетаданным = "ИНАГРО_РеестрТТНВывозЖД";
		СправочникОбъект.Записать();
	КонецЕсли;	
	
	СправочникСсылка = СправочникВидыДокументов.НайтиПоРеквизиту("ИмяПоМетаданным", "ИНАГРО_ТТНВВоз");
	Если ЗначениеЗаполнено(СправочникСсылка) Тогда			
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		СправочникОбъект.ИмяПоМетаданным = "ИНАГРО_ТТНВвоз";
		СправочникОбъект.Записать();
	КонецЕсли;	
	
	СписокДокументовККУ = ПолучитьСписокДокументовККУ();
			
	Для Каждого ДокументККУ Из СписокДокументовККУ Цикл 		
		
		МетаданныеОбъекта = Метаданные.Документы.Найти(ДокументККУ);
		
		Если МетаданныеОбъекта <> Неопределено Тогда
			
			ИмяПоМетаданным  = МетаданныеОбъекта.Имя;			
			СправочникСсылка = СправочникВидыДокументов.НайтиПоРеквизиту("ИмяПоМетаданным", ИмяПоМетаданным);
			
			Если ЗначениеЗаполнено(СправочникСсылка) Тогда		
				
				СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
				
				Если ДокументККУ.Пометка Тогда
					СправочникОбъект.ВидЖурналаЛаборатории = Перечисления.ИНАГРО_ВидыЖурналов.ЖурналЛаборатории;
				КонецЕсли;				
				
				Если    ИмяПоМетаданным = "ИНАГРО_ТТНВвоз"
					ИЛИ ИмяПоМетаданным = "ИНАГРО_ТТНВвозЖД"
					ИЛИ ИмяПоМетаданным = "ИНАГРО_ТТНВнутр"
					ИЛИ ИмяПоМетаданным = "ИНАГРО_ТТНВывоз"
					ИЛИ ИмяПоМетаданным = "ИНАГРО_ТТНВывозЖД" Тогда
					СправочникОбъект.ВидЖурнала            = Перечисления.ИНАГРО_ВидыЖурналов.ЖурналВесовой;			   
				КонецЕсли;
				
				СправочникОбъект.Наименование          = МетаданныеОбъекта.Синоним;				
				СправочникОбъект.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_ВидыДокументов.ИмяПоМетаданным КАК ИмяПоМетаданным,
		|	ИНАГРО_ВидыДокументов.Ссылка КАК Ссылка,
		|	ИНАГРО_ТипыЖурналовЛаборатории.Ссылка КАК ТипыЖурналовЛабораторииСсылка,
		|	ИНАГРО_ТипыЖурналов.Ссылка КАК ТипыЖурналовСсылка,
		|	ИНАГРО_ТипыЖурналовНечетный.Ссылка КАК ТипыЖурналовНечетныйСсылка
		|ИЗ
		|	Справочник.ИНАГРО_ВидыДокументов КАК ИНАГРО_ВидыДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИНАГРО_ТипыЖурналов КАК ИНАГРО_ТипыЖурналов
		|		ПО ИНАГРО_ВидыДокументов.УдалитьЖурналВесовщика.Наименование = ИНАГРО_ТипыЖурналов.Наименование
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИНАГРО_ТипыЖурналов КАК ИНАГРО_ТипыЖурналовНечетный
		|		ПО ИНАГРО_ВидыДокументов.УдалитьЖурналВесовщикаНеЧетный.Наименование = ИНАГРО_ТипыЖурналовНечетный.Наименование
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИНАГРО_ТипыЖурналов КАК ИНАГРО_ТипыЖурналовЛаборатории
		|		ПО ИНАГРО_ВидыДокументов.УдалитьЛабораторныйЖурнал.Наименование = ИНАГРО_ТипыЖурналовЛаборатории.Наименование
		|ГДЕ
		|	ИНАГРО_ТипыЖурналов.ВидЖурнала = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыЖурналов.ЖурналВесовой)
		|	И ИНАГРО_ТипыЖурналовНечетный.ВидЖурнала = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыЖурналов.ЖурналВесовой)
		|	И ИНАГРО_ТипыЖурналовЛаборатории.ВидЖурнала = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыЖурналов.ЖурналЛаборатории)";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();		
		
	Пока Выборка.Следующий() Цикл		
				
		СправочникСсылка = Выборка.Ссылка;
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();			
		
		СправочникОбъект.ТипЖурналаЛаборатории = Выборка.ТипыЖурналовНечетныйСсылка;
		СправочникОбъект.ТипЖурнала            = Выборка.ТипыЖурналовСсылка;
		СправочникОбъект.ТипЖурналаНечетный    = Выборка.ТипыЖурналовНечетныйСсылка;			
		СправочникОбъект.Записать();
		
	КонецЦикла;	
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИНАГРО_ВидыДокументов.Ссылка КАК Ссылка,
		|	ИНАГРО_ВидыДокументов.ИмяПоМетаданным КАК ИмяПоМетаданным
		|ИЗ
		|	Справочник.ИНАГРО_ВидыДокументов КАК ИНАГРО_ВидыДокументов
		|ГДЕ
		|	НЕ ИНАГРО_ВидыДокументов.ИмяПоМетаданным В (&СписокДокументовККУ)";
	
	Запрос.УстановитьПараметр("СписокДокументовККУ", СписокДокументовККУ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();	

	Пока Выборка.Следующий() Цикл		
		
		СправочникСсылка = Выборка.Ссылка;
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();	
		СправочникОбъект.УстановитьПометкуУдаления(Истина);			
		СправочникОбъект.Записать();

	КонецЦикла; 

КонецПроцедуры

Функция ПолучитьСписокДокументовККУ() Экспорт
	
	СписокДокументовККУ = Новый СписокЗначений;
	
	СписокДокументовККУ.Добавить("ИНАГРО_АктЗачистки"); //
	СписокДокументовККУ.Добавить("ИНАГРО_АктРаспределения", , Истина);
	СписокДокументовККУ.Добавить("ИНАГРО_АктРасчет310", , Истина);
	СписокДокументовККУ.Добавить("ИНАГРО_АктСписания", , Истина);
	СписокДокументовККУ.Добавить("ИНАГРО_АктУничтоженияНегодныхОтходов", , Истина);
	СписокДокументовККУ.Добавить("ИНАГРО_АктФасовки", , Истина); 
	СписокДокументовККУ.Добавить("ИНАГРО_Взвешивание"); //
	СписокДокументовККУ.Добавить("ИНАГРО_Инвентаризация", , Истина);
	СписокДокументовККУ.Добавить("ИНАГРО_Корректировка"); //
	СписокДокументовККУ.Добавить("ИНАГРО_КорректировкаСписком"); //
	СписокДокументовККУ.Добавить("ИНАГРО_КорректировкаУслуг"); //
	СписокДокументовККУ.Добавить("ИНАГРО_ЛабораторныйАнализ"); //
	СписокДокументовККУ.Добавить("ИНАГРО_НаблюдениеСостоянияЗерна"); //
	СписокДокументовККУ.Добавить("ИНАГРО_ОтражениеВвозаВывозаСобственногоЗернаВРегламентированномУчете"); //
	СписокДокументовККУ.Добавить("ИНАГРО_Перемещение", , Истина);
	СписокДокументовККУ.Добавить("ИНАГРО_Переоформление", , Истина);
	СписокДокументовККУ.Добавить("ИНАГРО_Переработка", , Истина);
	СписокДокументовККУ.Добавить("ИНАГРО_ПриказНаВывоз", , Истина);
	СписокДокументовККУ.Добавить("ИНАГРО_ПриказНаПеремещение", , Истина);
	СписокДокументовККУ.Добавить("ИНАГРО_ПриходИзПроизводства", , Истина);
	СписокДокументовККУ.Добавить("ИНАГРО_РасчетУслуг"); //
	СписокДокументовККУ.Добавить("ИНАГРО_РасчетУслугХранения"); //
	СписокДокументовККУ.Добавить("ИНАГРО_РасчетыСВладельцем"); //
	СписокДокументовККУ.Добавить("ИНАГРО_РеестрТТНВвоз", , Истина);
	СписокДокументовККУ.Добавить("ИНАГРО_РеестрТТНВвозЖД", , Истина);
	СписокДокументовККУ.Добавить("ИНАГРО_РеестрТТНВнутр", , Истина);
	СписокДокументовККУ.Добавить("ИНАГРО_РеестрТТНВывоз", , Истина);
	СписокДокументовККУ.Добавить("ИНАГРО_РеестрТТНВывозЖД", , Истина);
	СписокДокументовККУ.Добавить("ИНАГРО_Рецепт"); //
	СписокДокументовККУ.Добавить("ИНАГРО_СвидетельствоОКачествеЗерна", , Истина);
	СписокДокументовККУ.Добавить("ИНАГРО_СкладскаяКвитанция", , Истина);
	СписокДокументовККУ.Добавить("ИНАГРО_СкладскаяКвитанцияДвойная", , Истина);
	СписокДокументовККУ.Добавить("ИНАГРО_СкладскаяКвитанцияПростая", , Истина);
	СписокДокументовККУ.Добавить("ИНАГРО_ТТНВвоз", , Истина);
	СписокДокументовККУ.Добавить("ИНАГРО_ТТНВвозЖД", , Истина);
	СписокДокументовККУ.Добавить("ИНАГРО_ТТНВнутр", , Истина);
	СписокДокументовККУ.Добавить("ИНАГРО_ТТНВывоз", , Истина);
	СписокДокументовККУ.Добавить("ИНАГРО_ТТНВывозЖД", , Истина);
	СписокДокументовККУ.Добавить("ИНАГРО_УстановкаПараметровВидовКультур"); //
	СписокДокументовККУ.Добавить("ИНАГРО_УстановкаЦенНаУслуги"); //
	СписокДокументовККУ.Добавить("ИНАГРО_Форма117", , Истина);
	СписокДокументовККУ.Добавить("ИНАГРО_Форма34Сводная", , Истина);	

	Возврат СписокДокументовККУ;
	
КонецФункции

#КонецОбласти
