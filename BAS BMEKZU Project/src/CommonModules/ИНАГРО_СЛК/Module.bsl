//
// Важно: Для пользователя конфигурации должна быть определена роль, 
// у которой установлено право «Активные пользователи»
//
// Важно: Работа с СЛК должна выполняться только в серверном контексте, что 
// позволит избежать установки компоненты СЛК клиентским приложением на локальный 
// компьютер (тонкий и веб клиенты). Поэтому в свойствах данного модуля должны быть
// установлены флаги "Сервер" и "ВызовСервера".

#Область ПрограммныйИнтерфейс

//
// Сохранение параметров связи в хранилище настроек
//
Процедура СохранитьПараметрыСвязи(ПараметрыСвязиСЛК) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Константы.ИНАГРО_ПараметрыСвязиСЛК.Установить(ПараметрыСвязиСЛК);
КонецПроцедуры

//
// Функция, возвращает объект экспортируемый компонентой
//
Функция ОбъектКомпоненты() Экспорт
	
	// Подключаем компоненту только в случае необходимости (см. блок Исключение)
	Попытка
		// Считаем, что компонента уже подключена
		Возврат Новый("AddIn.Licence.LicenceExtension");
	Исключение
		// Исключение возможно только если компонента еще не подключена
	КонецПопытки;
	
	Если НЕ ПодключитьВнешнююКомпоненту("ОбщийМакет.ИНАГРО_КомпонентаСЛК", "Licence", ТипВнешнейКомпоненты.Native) Тогда
		СисИнфо = Новый СистемнаяИнформация;
		ВызватьИсключение НСтр("ru='(EAttachAddIn) Ошибка подключения компоненты СЛК ';uk='(EAttachAddIn) Помилка підключення компоненти СЛК '") + СисИнфо.ТипПлатформы;
	КонецЕсли;
	
	Возврат Новый("AddIn.Licence.LicenceExtension");
	
КонецФункции

//
// Запуск СЛК
//
Функция Старт() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Новый Структура("Статус, Ошибка", Истина, "");
	Если Константы.ИНАГРО_ДемоРежим.Получить() Тогда 
		Возврат Результат;
	КонецЕсли;
	
	ДанныеПодсистем = ПараметрыСеанса.ИНАГРО_ДанныеПодсистем.Получить();
	ТаблицаПодсистем = ДанныеПодсистем.ТаблицаПодсистем;
	КопияТаблицы = ТаблицаПодсистем.Скопировать();
	КопияТаблицы.Свернуть("Ведущий");
	Если (КопияТаблицы.Количество() = 2) Или (КопияТаблицы.Количество() = 1 И КопияТаблицы[0].Ведущий) Тогда 
		НуженВедущий = Истина;
	Иначе 
		НуженВедущий = Ложь;
	КонецЕсли;
	ВедущийНайден = Ложь;
	ОписаниеОшибок = "";
	
	Для Каждого СтрокаПодсистем Из ТаблицаПодсистем Цикл 
		Если СтрокаПодсистем.Включено Тогда
			Попытка
				Менеджер = МенеджерОбъектов(СтрокаПодсистем.СерияКлюча);
			Исключение
				ОписаниеОшибок = ОписаниеОшибок + Строка(СтрокаПодсистем.Подсистема) + ": " + ОписаниеОшибки() + Символы.ПС;
				Продолжить;
			КонецПопытки;
			
			Если Не Менеджер.ПопыткаПроверитьЛицензиюСеанса() Тогда 
				ОписаниеОшибок = ОписаниеОшибок + Строка(СтрокаПодсистем.Подсистема) + ": Ошибка получения лицензии !" + Символы.ПС;
				Продолжить;
			КонецЕсли;
			
			Если СтрокаПодсистем.Ведущий Тогда 
				ВедущийНайден = Истина;		
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ОписаниеОшибок = "" Тогда
		Сообщение  = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибок;
		Сообщение.Сообщить();
	КонецЕсли;
	
	Если НуженВедущий И Не ВедущийНайден Тогда 
		Результат.Статус = Ложь;
		Результат.Ошибка = "Не найден основной ключ защиты!";
	КонецЕсли;
	Возврат Результат;

КонецФункции

//
// Создание объекта по его имени в файле данных
//
Функция СоздатьОбъект(Имя) Экспорт
	
	// Если необходимо оптимизировать обращение к защищенному объекту, 
	// то функции получения объекта нужно поместить в модуль, у которого
	// установлен режим повторного использования возвращаемых объектов "на время сеанса" 
	// (аналогично получению менеджера объектов).
	
	Возврат ИНАГРО_СЛКПовтИсп.СоздатьОбъект(Имя);
	
КонецФункции

//
// Получение менеджера защищенных объектов СЛК
//
Функция МенеджерОбъектов(СерияКлюча) Экспорт
	//
	// Для оптимизации получаем менеджер объектов из специального модуля, у которого
	// установлен режим повторного использования возвращаемых объектов "на время сеанса" 
	//
	Возврат ИНАГРО_СЛКПовтИсп.МенеджерОбъектов(СерияКлюча);
	
КонецФункции

//
// Получение возможности редактирования параметров СЛК
//
Функция ЕстьПраваНастройки() Экспорт 
	Возврат РольДоступна("ПолныеПрава") ИЛИ РольДоступна("АдминистраторСистемы");	
КонецФункции

//
// Возвращает подсистему по имени обработки
//
Функция ПолучитьПодсистему(Имя, ВернутьСериюКлюча = Истина) Экспорт 
	
	Подсистема = Неопределено;
	ДанныеПодсистем = ПараметрыСеанса.ИНАГРО_ДанныеПодсистем.Получить();
	ТаблицаПодсистем = ДанныеПодсистем.ТаблицаПодсистем;
	ТаблицаОбработок = ДанныеПодсистем.ТаблицаОбработок;
	
	Если ТаблицаОбработок.Колонки.Найти("Подсистема") = Неопределено Тогда 
		Возврат Подсистема;
	КонецЕсли;
	
	Для Каждого СтрокаОбработки Из ТаблицаОбработок Цикл
		Если СтрокаОбработки[Имя] Тогда 
			СтрокаПодсистемы = ТаблицаПодсистем.Найти(СтрокаОбработки.Подсистема, "Подсистема");
			Если СтрокаПодсистемы <> Неопределено Тогда 
				Если СтрокаПодсистемы.Включено Тогда 
					Если ВернутьСериюКлюча Тогда 
						Подсистема = СтрокаПодсистемы.СерияКлюча;
					Иначе 
						Подсистема = СтрокаПодсистемы.Подсистема;
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Подсистема;
	
КонецФункции

//
// Инициализация параметров СЛК
//
Процедура ИнициализироватьПараметрыСеансаСЛК()Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаПодсистем = ПолучитьТаблицуПодсистем();
	ТаблицаОбработок = ПолучитьТаблицуОбработок();
	МассивСерверовСЛК = ПолучитьМассивСерверовСЛК();
	ПриоритетныйСерверСЛК = ПолучитьПриоритетныйСерверСЛК();
	Если ПриоритетныйСерверСЛК > МассивСерверовСЛК.Количество()-1 Тогда 
		ПриоритетныйСерверСЛК = 0;
	КонецЕсли;
	СтруктураПараметров = Новый Структура("ТаблицаПодсистем, ТаблицаОбработок, МассивСерверовСЛК, ПриоритетныйСерверСЛК", 
	ТаблицаПодсистем, ТаблицаОбработок, МассивСерверовСЛК, ПриоритетныйСерверСЛК);
	ПараметрыСеанса.ИНАГРО_ДанныеПодсистем = Новый ХранилищеЗначения(СтруктураПараметров);
	
КонецПроцедуры

//
// Процедура вызова защищенной обработки СЛК
//
Функция ВызовЗащищеннойОбработки(Имя) Экспорт
	
	Попытка
		ЗащищенныйОбъект = ИНАГРО_СЛКПовтИсп.СоздатьОбъект(Имя);
	Исключение
		ЗащищенныйОбъект = Неопределено;
	КонецПопытки;
	Если ЗащищенныйОбъект = Неопределено Тогда
		Подсистема = ПолучитьПодсистему(Имя, Ложь);
		Если Подсистема = Неопределено Тогда 
			ТекстИсключения = СтрШаблон(
				НСтр("ru = 'Вызываемый объект ""%1"" недоступен!'; uk = 'Викликаний об''єкт ""%1"" недоступний!'"), Имя);
		Иначе 
			ТекстИсключения = СтрШаблон(
				НСтр("ru = 'Ключ подсистемы ""%1"" недоступен!'; uk = 'Ключ підсистеми ""%1"" недоступний!'"), Подсистема);
		КонецЕсли;
		ВызватьИсключение ТекстИсключения;	
	КонецЕсли;
	
	Возврат ЗащищенныйОбъект;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицуПодсистем()
	
	Попытка
		ТекущийПользователь = ПользователиСлужебный.ИНАГРО_ПолучениеТекущегоПользователя();
	Исключение
		ТекущийПользователь = Неопределено;
	КонецПопытки;
	
	Макет = Перечисления.ИНАГРО_Подсистемы.ПолучитьМакет("КлючиПодсистем");
	ТаблицаПодсистем = Новый ТаблицаЗначений;
	ТаблицаПодсистем.Колонки.Добавить("Подсистема");
	ТаблицаПодсистем.Колонки.Добавить("СерияКлюча");
	ТаблицаПодсистем.Колонки.Добавить("Ведущий");
	ТаблицаПодсистем.Колонки.Добавить("Включено");
	
	Для Сч = 2 По Макет.ВысотаТаблицы Цикл
		Подсистема 	= Макет.Область(Сч, 1).Текст;
		СерияКлюча 	= Макет.Область(Сч, 2).Текст;
		Ведущий 	= Макет.Область(Сч, 3).Текст;
		Если Метаданные.Перечисления.ИНАГРО_Подсистемы.ЗначенияПеречисления.Найти(Подсистема) <> Неопределено Тогда 
			СтрокаТаблицы = ТаблицаПодсистем.Добавить();
			СтрокаТаблицы.Подсистема = Перечисления.ИНАГРО_Подсистемы[Подсистема];
			СтрокаТаблицы.СерияКлюча = СерияКлюча;
			Если Ведущий = "1" Тогда 
				СтрокаТаблицы.Ведущий = Истина;
			Иначе 
				СтрокаТаблицы.Ведущий = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТекущийПользователь = Неопределено Тогда 
		ТаблицаПодсистем.ЗаполнитьЗначения(Истина, "Включено");
	Иначе 
		ТаблицаПодсистем.ЗаполнитьЗначения(Ложь, "Включено");
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИНАГРО_НастройкиЗащиты.Подсистема,
		|	ИНАГРО_НастройкиЗащиты.Пользователь КАК Пользователь
		|ИЗ
		|	РегистрСведений.ИНАГРО_НастройкиЗащиты КАК ИНАГРО_НастройкиЗащиты
		|ГДЕ
		|	ИНАГРО_НастройкиЗащиты.Пользователь В(&Пользователь)
		|	И ИНАГРО_НастройкиЗащиты.Разрешено
		|	И ИНАГРО_НастройкиЗащиты.Подсистема <> ЗНАЧЕНИЕ(Перечисление.ИНАГРО_Подсистемы.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИНАГРО_НастройкиЗащиты.Пользователь УБЫВ
		|ИТОГИ ПО
		|	Пользователь
		|";
		
		МассивПользователей = Новый Массив;
		МассивПользователей.Добавить(Справочники.Пользователи.ПустаяСсылка());
		МассивПользователей.Добавить(ТекущийПользователь);
		Запрос.УстановитьПараметр("Пользователь", МассивПользователей);
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл 
			ВыборкаПользователь = Выборка.Выбрать();
			Пока ВыборкаПользователь.Следующий() Цикл 
				СтрокаТаблицы = ТаблицаПодсистем.Найти(ВыборкаПользователь.Подсистема, "Подсистема");
				Если СтрокаТаблицы <> Неопределено Тогда 
					СтрокаТаблицы.Включено = Истина;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаПодсистем;
	
КонецФункции

Функция ПолучитьТаблицуОбработок()
	
	Макет = Перечисления.ИНАГРО_Подсистемы.ПолучитьМакет("ОбработкиПодсистем");
	ТаблицаПодсистем = Новый ТаблицаЗначений;
	ТаблицаПодсистем.Колонки.Добавить("Подсистема");
	Для СчКолонки = 2 По Макет.ВысотаТаблицы Цикл
		Обработка = Макет.Область(СчКолонки, 1).Текст;
		Если Метаданные.ОбщиеМодули.Найти(Обработка) <> Неопределено Тогда 
			ТаблицаПодсистем.Колонки.Добавить(Обработка);
		КонецЕсли;
	КонецЦикла;
	
	Для СчСтрок = 2 По Макет.ШиринаТаблицы Цикл 
		Подсистема = Макет.Область(1, СчСтрок).Текст;
		Если Метаданные.Перечисления.ИНАГРО_Подсистемы.ЗначенияПеречисления.Найти(Подсистема) <> Неопределено Тогда 
			СтрокаТаблицы = ТаблицаПодсистем.Добавить();
			СтрокаТаблицы.Подсистема = Перечисления.ИНАГРО_Подсистемы[Подсистема];
			Для СчКолонки = 2 По Макет.ВысотаТаблицы Цикл
				Обработка = Макет.Область(СчКолонки, 1).Текст;
				Если ТаблицаПодсистем.Колонки.Найти(Обработка) <> Неопределено Тогда 
					Если Макет.Область(СчКолонки, СчСтрок).Текст = "1" Тогда 
						СтрокаТаблицы[Обработка] = Истина;
					Иначе 
						СтрокаТаблицы[Обработка] = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
		
	Возврат ТаблицаПодсистем;
	
КонецФункции

Функция ПолучитьМассивСерверовСЛК()
	МассивСерверовСЛК = Новый Массив;
	ПараметрыСвязи = Константы.ИНАГРО_ПараметрыСвязиСЛК.Получить();
	Если СокрЛП(ПараметрыСвязи) = "" Тогда
		СохранитьПараметрыСвязи("host=localhost;port=9099/");
		ПараметрыСвязи = Константы.ИНАГРО_ПараметрыСвязиСЛК.Получить();
	КонецЕсли;
	
	ПозицияРазделителя = Найти(ПараметрыСвязи, "/");
	Пока Не ПозицияРазделителя = 0 Цикл
		СтрокаНастройки = Лев(ПараметрыСвязи, ПозицияРазделителя-1);
		Если Не СокрЛП(СтрокаНастройки) = "" Тогда 
			МассивСерверовСЛК.Добавить(СтрокаНастройки);
		КонецЕсли;
		ПараметрыСвязи = Сред(ПараметрыСвязи, ПозицияРазделителя+1);
		ПозицияРазделителя = Найти(ПараметрыСвязи, "/");
	КонецЦикла;
	Если Не СокрЛП(ПараметрыСвязи) = "" Тогда 
		МассивСерверовСЛК.Добавить(ПараметрыСвязи);
	КонецЕсли;
	Возврат МассивСерверовСЛК;
КонецФункции

Функция ПолучитьПриоритетныйСерверСЛК()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИНАГРО_НастройкиЗащиты.ПриоритетСервераСЛК,
	|	1 КАК Порядок
	|ИЗ
	|	РегистрСведений.ИНАГРО_НастройкиЗащиты КАК ИНАГРО_НастройкиЗащиты
	|ГДЕ
	|	ИНАГРО_НастройкиЗащиты.Пользователь = &Пользователь
	|	И ИНАГРО_НастройкиЗащиты.Подсистема = &Подсистема
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИНАГРО_НастройкиЗащиты.ПриоритетСервераСЛК,
	|	2
	|ИЗ
	|	РегистрСведений.ИНАГРО_НастройкиЗащиты КАК ИНАГРО_НастройкиЗащиты
	|ГДЕ
	|	ИНАГРО_НастройкиЗащиты.Пользователь = &ПустойПользователь
	|	И ИНАГРО_НастройкиЗащиты.Подсистема = &Подсистема
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	Запрос.УстановитьПараметр("Пользователь", ПользователиСлужебный.ИНАГРО_ПолучениеТекущегоПользователя());
	Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
	Запрос.УстановитьПараметр("Подсистема", Перечисления.ИНАГРО_Подсистемы.ПустаяСсылка());
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.ПриоритетСервераСЛК;
	Иначе 
		Возврат 0;
	КонецЕсли;
КонецФункции

#КонецОбласти