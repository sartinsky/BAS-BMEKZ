////////////////////////////////////////////////////////////////////////////////
// КадровыйУчет: методы кадрового учета, работающие на стороне сервера
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Получение кадровых данных

// Возвращает таблицу значений заполненную данными физических лиц, перечисленными в 
// параметре СписокНеобходимыхДанных
//
// Параметры
//	ТолькоРазрешенные - Булево
//  СписокФизическихЛиц - Массив ссылок на элементы справочника физические лица или
//						  СправочникСсылка.ФизическиеЛица
//  КадровыеДанные - 	Строка - список полей данных, перечисленных через запятую 
//						или Массив строк с полями данных,
//						которые необходимо получить. Ниже приведены идентификаторы 
//						получаемых данных и описание значения, которое будет возвращено в 
//						таблице значений
//
//	ДатаПолученияДанных	- дата на которую необходимо получить данные физических лиц, 
//						применимо к данным, носящим периодический характер (например - ФИО)
//						Если дату не указывать, будут получены самые последние данные.
//
//  ПоляОтбораПериодическихДанных - Структура, в качестве ключа указывается имя таблицы, содержащей
//									периодические данные (например ФИОФизическихЛиц, ГражданствоФизическихЛиц)
//									В качестве значений коллекция условий отбора, 
//									соединяемых по "И" и применяемых к регистру сведений
//									Коллекция строки которой имеют поля
//										ЛевоеЗначение - строка, имя поля регистра сведений
//										ВидСравнения - строка, вид сравнения, допустимый в языке запросов
//										ПравоеЗначение - значение для сравнения с полем ЛевоеЗначение
//
//	Список полей, допустимых в параметре КадровыеДанные
//
//			- Имена всех реквизитов справочника ФизическиеЛица
//
//			Контактная информация физического лица:
//
//			- АдресДляИнформирования - адрес в формате хранения в базе данных
//			- АдресДляИнформированияПредставление
//
//
//			- АдресМестаПроживания
//			- АдресМестаПроживанияПредставление
//
//			- АдресПоПрописке
//			- АдресПоПропискеПредставление
//
//			- ТелефонДомашний
//			- ТелефонДомашнийПредставление
//
//			- ТелефонРабочий
//			- ТелефонРабочийПредставление
//
//			Информация о гражданстве
//			- Страна - СправочникСсылка.СтраныМира
//
//			Информация о документе, удостоверяющем личность
//			- ДокументВид - СправочникСсылка.ВидыДокументовФизическихЛиц
//			- ДокументСерия - Строка
//			- ДокументНомер - Строка
//			- ДокументДатаВыдачи - Дата
//			- ДокументСрокДействия - Дата
//			- ДокументКемВыдан - Строка
//			- ДокументКодПодразделения - Строка
//			- ДокументПредставление - Строка
//
//			Информация о фамилии, имени, отчестве
//			- Фамилия - Строка;
//			- Имя - Строка;
//			- Отчество - Строка;
//			- ФИОПолные - Строка, полные фамилия имя отчество;
//			- ФамилияИО - Строка, фамилия и инициалы;
//			- ИОФамилия - Строка, инициалы и фамилия.
//
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица значений, содержащая запрошенные данные
//
Функция КадровыеДанныеФизическихЛиц(ТолькоРазрешенные, СписокФизическихЛиц, КадровыеДанные, ДатаПолученияДанных = '00010101', ПоляОтбораПериодическихДанных = Неопределено) Экспорт
	
	Если ТипЗнч(КадровыеДанные) = Тип("Строка") Тогда
		// Преобразуем параметр КадровыеДанные из строки в массив идентификаторов
		МассивНеобходимыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(КадровыеДанные, " ",""), ",");
	Иначе
		МассивНеобходимыхДанных = КадровыеДанные;
	КонецЕсли; 
	
	// Подготовим Запрос и Менеджер временных таблиц
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Сформируем временную таблицу ВТКадровыеДанныеФизическихЛиц
	СоздатьНаДатуВТКадровыеДанныеФизическихЛиц(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, СписокФизическихЛиц, КадровыеДанные, ДатаПолученияДанных, ПоляОтбораПериодическихДанных);
	
	// Выберем кадровые данные физлиц из временной таблицы
	Запрос.Текст = "ВЫБРАТЬ КадровыеДанныеФизическихЛиц.* ИЗ ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц";
	КадровыеДанныеФизическихЛиц = Запрос.Выполнить().Выгрузить();
	
	Возврат КадровыеДанныеФизическихЛиц;
	
КонецФункции

// Возвращает таблицу значений заполненную данными сотрудников, перечисленными в 
// параметре СписокНеобходимыхДанных
//
// Параметры
//	ТолькоРазрешенные - Булево
//  СписокСотрудников - Массив ссылок на элементы справочника сотрудники или
//						  СправочникСсылка.Сотрудники
//  КадровыеДанные - 	Строка - список полей данных, перечисленных через запятую 
//						или Массив строк с полями данных,
//						которые необходимо получить. Ниже приведены идентификаторы 
//						получаемых данных и описание значения, которое будет возвращено в 
//						таблице значений
//						которые необходимо получить. Ниже приведены идентификаторы 
//						получаемых данных и описание значения, которое будет возвращено в 
//						таблице значений
//
//	ДатаПолученияДанных	- дата на которую необходимо получить данные сотрудников, 
//						применимо к данным, носящим периодический характер
//						Если дату не указывать, будут получены самые последние данные.
//
//
//  ПоляОтбораПериодическихДанных - Структура, в качестве ключа указывается имя таблицы, содержащей
//									периодические данные (например ФИОФизическихЛиц, ГражданствоФизическихЛиц)
//									В качестве значений коллекция условий отбора, 
//									соединяемых по "И" и применяемых к регистру сведений
//									Коллекция строки которой имеют поля
//										ЛевоеЗначение - строка, имя поля регистра сведений
//										ВидСравнения - строка, вид сравнения, допустимый в языке запросов
//										ПравоеЗначение - значение для сравнения с полем ЛевоеЗначение
//
//	Список полей, допустимых в параметре КадровыеДанные
//
//			Все имена полей, которые поддерживаются процедурой КадровыеДанныеФизическихЛиц, для
//			получения кадровых данных физического лица. Исключения составляют стандартные реквизиты
//			справочника ФизическиеЛица - Код и Наименование. Для их получения необходимо задать имена 
//			полей ФизическоеЛицоКод и ФизическоеЛицоНаименование, соответственно.
//
//			- Все имена реквизитов справочника Сотрудники
//			- ТабельныйНомер - строка
//			- Организация
//			- Подразделение
//			- Должность
//			- ТарифнаяСтавка - число
//			- ФОТ - число
//			- КоличествоСтавок - число
//			- ОсновноеРабочееМестоВОрганизации - булево
//			- РаботаетВСтуденческомОтряде - булево
//			- ЯвляетсяВоеннослужащим - булево
//			- ЯвляетсяПрокурором - булево
//			- ЯвляетсяФармацевтом - булево
//			- ЯвляетсяЧленомЛетногоЭкипажа - булево
//			- ЯвляетсяШахтером - булево
//			- ЯвляетсяРаботникомСДосрочнойПенсией - булево
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица значений, содержащая запрошенные данные
//
Функция КадровыеДанныеСотрудников(ТолькоРазрешенные, СписокСотрудников, КадровыеДанные, ДатаПолученияДанных = '00010101', ПоляОтбораПериодическихДанных = Неопределено) Экспорт
	
	Если ТипЗнч(КадровыеДанные) = Тип("Строка") Тогда
		// Преобразуем параметр КадровыеДанные из строки в массив идентификаторов
		МассивНеобходимыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(КадровыеДанные, " ",""), ",");
	Иначе
		МассивНеобходимыхДанных = КадровыеДанные;
	КонецЕсли; 
	
	// Подготовим Запрос и Менеджер временных таблиц
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Сформируем временную таблицу ВТКадровыеДанныеФизическихЛиц
	СоздатьНаДатуВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, СписокСотрудников, МассивНеобходимыхДанных, ДатаПолученияДанных, ПоляОтбораПериодическихДанных);
	
	// Выберем кадровые данные физлиц из временной таблицы
	Запрос.Текст = "ВЫБРАТЬ КадровыеДанныеСотрудников.* ИЗ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников";
	КадровыеДанныеСотрудников = Запрос.Выполнить().Выгрузить();
	
	Возврат КадровыеДанныеСотрудников;
	
КонецФункции

// Возвращает таблицу значений заполненную физическими лицами, работавшими в организации в
// заданном периоде
//
// Параметры
//	ТолькоРазрешенные - Булево
//  Организация - СправочникСсылка.Организации - организация по которой необходимо отобрать работавших
//				  в ней физических лиц
//	НачалоПериода 		- Дата
//	ОкончаниеПериода 	- Дата
//  Подразделение - СправочникСсылка.ПодразделенияОрганизаций - подразделение, по которому необходимо отобрать
//					работавших физических лиц. Если подразделение не указывать - будут отобраны физические
//					лица по всей организации
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица значений, содержащая поля Период (Дата, соответствует указанному параметру ОкончаниеПериода)
//						 и ФизическоеЛицо
//
Функция ФизическиеЛицаРаботавшиеВОрганизации(ТолькоРазрешенные, Организация, НачалоПериода, ОкончаниеПериода, Подразделение = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Сформируем временную таблицу ВТФизическиеЛицаРаботавшиеВОрганизации
	СоздатьВТФизическиеЛицаРаботавшиеВОрганизации(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, Организация, НачалоПериода, ОкончаниеПериода, Подразделение);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ФизическиеЛицаРаботавшиеВОрганизации.* ИЗ ВТФизическиеЛицаРаботавшиеВОрганизации КАК ФизическиеЛицаРаботавшиеВОрганизации";
	
	ФизическиеЛицаРаботавшиеВОрганизации = Запрос.Выполнить().Выгрузить();
	
	Возврат ФизическиеЛицаРаботавшиеВОрганизации;
	
КонецФункции

// Возвращает таблицу значений заполненную данными документов физических лиц
//
// Параметры
//  СписокФизическихЛиц - Массив ссылок на элементы справочника физические лица или
//						  СправочникСсылка.ФизическиеЛица
//	ТолькоРазрешенные - Булево
//  ВидДокумента		- СправочникСсылка.ВидыДокументовФизическихЛиц, вид необходимого 
//						  документа
//	ДатаПолученияДанных	- дата на которую необходимо получить данные документов физических лиц, 
//						если дату не указывать, данные будут получены на текущую дату.
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица значений, содержащая поля 
//						Период - Дата
//						ФизическоеЛицо - СправочникСсылка.ФизическиеЛица
//						ВидДокумента - СправочникСсылка.ВидыДокументовФизическихЛиц
//						Серия - Строка
//						Номер - Строка 
//						ДатаВыдачи - Дата
//						КемВыдан Строка
//						КодПодразделения - Строка
//						ЯвляетсяДокументомУдостоверяющимЛичность - Булево
//						Представление - Строка
//
Функция ДокументыФизическихЛиц(СписокФизическихЛиц, ТолькоРазрешенные, ВидДокумента, ДатаПолученияДанных = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаПолученияДанных", ?(ДатаПолученияДанных = Неопределено, ТекущаяДатаСеанса(),ДатаПолученияДанных));
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	&ДатаПолученияДанных КАК Период,
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическихЛица
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&СписокФизическихЛиц)";
	
	Если НЕ ТолькоРазрешенные Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Добавить().Период = ?(ДатаПолученияДанных = Неопределено, ТекущаяДатаСеанса(), ДатаПолученияДанных);
	
	Отбор = Новый Массив;
	Отбор.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение", "Физлицо", " В ", СписокФизическихЛиц));
	Отбор.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение", "ВидДокумента", " = ", ВидДокумента));
	
	ЗарплатаКадры.СоздатьПоТаблицеЗначенийВТИмяРегистраСрезПоследних(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, "ДокументыФизическихЛиц", ИзмеренияДаты, Отбор);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическихЛица.Период,
	|	ФизическихЛица.ФизическоеЛицо,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.ВидДокумента, ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка)) КАК ВидДокумента,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.Серия, """") КАК Серия,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.Номер, """") КАК Номер,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.ДатаВыдачи, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаВыдачи,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.СрокДействия, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК СрокДействия,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.КемВыдан, """") КАК КемВыдан,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.КодПодразделения, """") КАК КодПодразделения,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность, НЕОПРЕДЕЛЕНО) КАК ЯвляетсяДокументомУдостоверяющимЛичность,
	|	ЕСТЬNULL(ДокументыФизическихЛиц.Представление, """") КАК Представление
	|ИЗ
	|	ВТФизическихЛица КАК ФизическихЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДокументыФизическихЛицСрезПоследних КАК ДокументыФизическихЛиц
	|		ПО ФизическихЛица.ФизическоеЛицо = ДокументыФизическихЛиц.Физлицо";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает структуру параметров для СоздатьВТСотрудникиОрганизаций.
//
// Возвращаемое значение:
//   Структура - Содержит ключи:
//				Организация - СправочникСсылка.Организации, если параметр опустить в таблицу войдут все сотрудник
//					независимо от организации
//				ОтбиратьПоГоловнойОрганизации - если Истина, то отбор по головной организации, иначе по текущей организации
//					По умолчанию - ЛОЖЬ
//				Подразделение - СправочникСсылка.ПодразделенияОрганизаций, в таблицу войдут сотрудники указанного подразделения
//					и всех подразделений, подчиненных указанному, если параметр опустить в таблицу войдут все сотрудники
//				СписокФизическихЛиц - Массив ссылок на элементы справочника ФизическиеЛица, если параметр опустить,
//					в таблицу войдут сотрудники всех физических лиц когда либо работавших в Организации
//				НачалоПериода - Дата, значение по умолчанию '00010101'. Если параметр устанавливается, параметр ОкончаниеПериода
//					обязателен к заполнению
//				ОкончаниеПериода - Дата, значение по умолчанию '00010101'. При установке должно выполняться условие
//					ОкончаниеПериода >= НачалоПериода. Используется для выборки кадровых данных сотрудников, если
//					параметр не указан, выборка будет производиться на текущую дату сеанса
//				КадровыеДанные - Строка, содержит список полей кадровых данных, см. описание к функции КадровыеДанныеСотрудников
//
Функция ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц() Экспорт
	
	Возврат КадровыйУчетВнутренний.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	
КонецФункции

// Возвращает структуру параметров для СоздатьВТСотрудникиОрганизаций.
//
// Возвращаемое значение:
//   Структура - Содержит ключи:
//				Организация - СправочникСсылка.Организации, если параметр опустить в таблицу войдут все сотрудник
//					независимо от организации
//				ОтбиратьПоГоловнойОрганизации - если Истина, то отбор по головной организации, иначе по текущей организации
//					По умолчанию - ЛОЖЬ
//				Подразделение - СправочникСсылка.ПодразделенияОрганизаций, в таблицу войдут сотрудники указанного подразделения
//					и всех подразделений, подчиненных указанному, если параметр опустить в таблицу войдут все сотрудники
//				ИмяВТФизическиеЛица - Строка, имя временной таблицы, содержащей физические лица (по умолчанию "ВТФизическиеЛица")
//				ИмяПоляФизическоеЛицо - Строка, имя поля - Физическое лицо (по умолчанию "ФизическоеЛицо")
//				НачалоПериода - Дата, значение по умолчанию '00010101'. Если параметр устанавливается, параметр ОкончаниеПериода
//					обязателен к заполнению
//				ОкончаниеПериода - Дата, значение по умолчанию '00010101'. При установке должно выполняться условие
//					ОкончаниеПериода >= НачалоПериода. Используется для выборки кадровых данных сотрудников, если
//					параметр не указан, выборка будет производиться на текущую дату сеанса
//				КадровыеДанные - Строка, содержит список полей кадровых данных, см. описание к функции КадровыеДанныеСотрудников
//
Функция ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице() Экспорт
		
	Возврат КадровыйУчетВнутренний.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
	
КонецФункции

// Возвращает таблицу значений заполненную сотрудниками
//
// Параметры
//	ТолькоРазрешенные - Булево
//	Параметры - Структура, подготовленная с помощью методов ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц,
//				ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица значений, содержащая поля Период (Дата, соответствует указанному параметру ОкончаниеПериода),
//						 Сотрудник и соответствующее сотруднику ФизическоеЛицо
//
Функция СотрудникиОрганизации(ТолькоРазрешенные, Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры);
	
	Запрос.Текст = 
	"ВЫБРАТЬ СотрудникиОрганизации.* ИЗ ВТСотрудникиОрганизации КАК СотрудникиОрганизации";
	
	СотрудникиОрганизации = Запрос.Выполнить().Выгрузить();
	
	Возврат СотрудникиОрганизации;
	
КонецФункции

// Возвращает таблицу значений содержащую поля ФизическоеЛицо и Сотрудник. Сотрудник отбирается по принципам:
//		- Работает на указанный период
//		- Выбирается сотрудник, работающий по основному месту работы, если такового не существует, выбирается
//			сотрудник, работающий по совместительству, принятый на наиболее раннюю дату
//
// Параметры
//			СписокФизическихЛиц - Массив ссылок на элементы справочника ФизическиеЛица или 
//				СправочникСсылка.ФизическиеЛица, если параметр опустить, в таблицу войдут
//				основные сотрудники всех физических лиц когда либо работавших в организации
//			ТолькоРазрешенные - Булево
//			Организация - СправочникСсылка.Организации
//			Период - Дата
//
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица значений, содержащая поля Сотрудник и соответствующее сотруднику ФизическоеЛицо
//
Функция ОсновныеСотрудникиФизическихЛиц(СписокФизическихЛиц, ТолькоРазрешенные, Организация, Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТОсновныеСотрудникиФизическихЛиц(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, СписокФизическихЛиц, Организация, Период);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ОсновныеСотрудникиФизическихЛиц.* ИЗ ВТОсновныеСотрудникиФизическихЛиц КАК ОсновныеСотрудникиФизическихЛиц";
	
	ОсновныеСотрудникиФизическихЛиц = Запрос.Выполнить().Выгрузить();
	
	Возврат ОсновныеСотрудникиФизическихЛиц;
	
КонецФункции

// Заполняет кадровые движения документа
//		КадроваяИсторияСотрудников
//		ЗанятыеПозицииШтатногоРасписания
//
// Параметры:
//  РегистраторОбъект
//	Движения - коллекция движений, в которой необходимо заполнить кадровые движения
//	КадровыеДвижения - таблица значений с полями:
//		ДатаСобытия
//		ВидСобытия - Перечисление.ВидыКадровыхСобытий
//		Сотрудник
//		ГоловнаяОрганизация
//		Организация
//		Подразделение
//		Должность
//		ВидЗанятости
// 		
Процедура СформироватьКадровыеДвижения(РегистраторОбъект, Движения, КадровыеДвижения) Экспорт
	
	КадровыйУчетВнутренний.СформироватьКадровыеДвижения(РегистраторОбъект, Движения, КадровыеДвижения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ПроверитьВозможностьПроведенияПоКадровомуУчету(ДатаСобытия, Сотрудники, ПроверяемаяСсылка, Отказ, ВидСобытия = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ИзмеренияДаты = Новый ТаблицаЗначений;
	ИзмеренияДаты.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ИзмеренияДаты.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ИзмеренияДаты.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
		НоваяСтрокаИзмеренияДаты  = ИзмеренияДаты.Добавить();
		НоваяСтрокаИзмеренияДаты.Сотрудник = Сотрудники;
	Иначе
		Для каждого Сотрудник Из Сотрудники Цикл
			НоваяСтрокаИзмеренияДаты  = ИзмеренияДаты.Добавить();
			НоваяСтрокаИзмеренияДаты.Сотрудник = Сотрудник;
		КонецЦикла;
	КонецЕсли;
	
	Отбор = Новый Массив;
	СтруктураОтбора = Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение","Регистратор", "<>", ПроверяемаяСсылка);
	Отбор.Добавить(СтруктураОтбора);
	
	ЗарплатаКадры.СоздатьПоТаблицеЗначенийВТИмяРегистра(
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		"КадроваяИсторияСотрудников",
		ИзмеренияДаты,
		Отбор);
		
	Запрос.УстановитьПараметр("ДатаСобытия", ДатаСобытия);
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("ВидСобытия", ВидСобытия);
	
	// Проверка на уникальность событий Прием и Увольнение		
		
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Регистратор,
		|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|	КадроваяИсторияСотрудников.Период,
		|	КадроваяИсторияСотрудников.ВидСобытия
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|ГДЕ
		|	КадроваяИсторияСотрудников.ВидСобытия = &ВидСобытия
		|	И &ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник
		|АВТОУПОРЯДОЧИВАНИЕ";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщенияПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='По сотруднику %1, уже зарегистрировано событие ""%2"" (%3), документ противоречит кадровому приказу %4';uk='По співробітнику %1, вже зареєстрована подія ""%2"" (%3), документ суперечить кадровому наказу %4'"),
				Выборка.Сотрудник,
				Выборка.ВидСобытия,
				Формат(Выборка.Период, "ДФ=dd.MM.yyyy"),
				Выборка.Регистратор);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщенияПользователю,
					Выборка.Регистратор,
					,
					,
					Отказ);
					
		КонецЦикла;
				
		Возврат;		
		
	КонецЕсли; 
	
	// Проверка корректности заданного периода Период, должен быть более даты приема,
	// а для событий кадрового перевода менее даты увольнения
	
	Если ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение
		ИЛИ ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
			|	КадроваяИсторияСотрудников.Период КАК Период,
			|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор
			|ПОМЕСТИТЬ ВТДатыПриема
			|ИЗ
			|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|ГДЕ
			|	КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
			|	КадроваяИсторияСотрудников.Период КАК Период,
			|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор
			|ПОМЕСТИТЬ ВТДатыУвольнения
			|ИЗ
			|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|ГДЕ
			|	КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(ДатыПриема.Сотрудник, ДатыУвольнения.Сотрудник) КАК Сотрудник,
			|	ЕСТЬNULL(ДатыПриема.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПриема,
			|	ЕСТЬNULL(ДатыПриема.Регистратор, ЗНАЧЕНИЕ(Документ.ПриемНаРаботу.ПустаяСсылка)) КАК ПриказОПриеме,
			|	ЕСТЬNULL(ДатыУвольнения.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаУвольнения,
			|	ЕСТЬNULL(ДатыУвольнения.Регистратор, ЗНАЧЕНИЕ(Документ.Увольнение.ПустаяСсылка)) КАК ПриказОбУвольнении
			|ИЗ
			|	Справочник.Сотрудники КАК Сотрудники
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыПриема КАК ДатыПриема
			|		ПО Сотрудники.Ссылка = ДатыПриема.Сотрудник
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыУвольнения КАК ДатыУвольнения
			|		ПО Сотрудники.Ссылка = ДатыУвольнения.Сотрудник
			|ГДЕ
			|	Сотрудники.Ссылка В(&Сотрудники)";

		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ТекстСообщенияПользователю = "";
				ДокументПриказ = Неопределено;
				
				Если Выборка.ДатаПриема > ДатаСобытия Тогда
					
					ТекстСообщенияПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='По сотруднику %1, невозможно зарегистрировать событие ""%2"" ранее, чем дата приема на работу (%3 - %4)';uk='По співробітнику %1, неможливо зареєструвати подію ""%2"" раніше, ніж дата прийому на роботу (%3 - %4)'"),
						Выборка.Сотрудник,
						ВидСобытия,
						Формат(Выборка.ДатаПриема, "ДФ=dd.MM.yyyy"),
						Выборка.ПриказОПриеме);
					
					ДокументПриказ = Выборка.ПриказОПриеме;
					
				ИначеЕсли Выборка.ДатаУвольнения < ДатаСобытия И ЗначениеЗаполнено(Выборка.ДатаУвольнения) Тогда
					
					ТекстСообщенияПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='По сотруднику %1, невозможно зарегистрировать событие ""%2"" позднее, чем дата увольнения (%3 - %4)';uk='По співробітнику %1, неможливо зареєструвати подію ""%2"" пізніше, ніж дата звільнення (%3 - %4)'"),
						Выборка.Сотрудник,
						ВидСобытия,
						Формат(Выборка.ДатаУвольнения, "ДФ=dd.MM.yyyy"),
						Выборка.ПриказОбУвольнении);
						
					ДокументПриказ = Выборка.ПриказОбУвольнении;
					
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(ТекстСообщенияПользователю) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщенияПользователю,
						ДокументПриказ,
						,
						,
						Отказ);
				КонецЕсли; 
						
			КонецЦикла;
			
			Возврат;

		КонецЕсли; 
		
	КонецЕсли;
	
	// Проверка того, что прием на работу самое первое событие
		
	Если ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
			|	МИНИМУМ(КадроваяИсторияСотрудников.Период) КАК Период
			|ПОМЕСТИТЬ ВТРанниеПериоды
			|ИЗ
			|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|
			|СГРУППИРОВАТЬ ПО
			|	КадроваяИсторияСотрудников.Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
			|	КадроваяИсторияСотрудников.Период КАК Период,
			|	КадроваяИсторияСотрудников.ВидСобытия КАК ВидСобытия,
			|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор
			|ИЗ
			|	ВТРанниеПериоды КАК РанниеПериоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|		ПО РанниеПериоды.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
			|			И РанниеПериоды.Период = КадроваяИсторияСотрудников.Период
			|ГДЕ
			|	РанниеПериоды.Период < &ДатаСобытия";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
					
				ТекстСообщенияПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Сотрудника %1 необходимо принять на работу ранее кадрового события ""%2"" (%3 - %4)';uk='Співробітника %1 необхідно прийняти на роботу раніше кадрового події""%2"" (%3 - %4)'"),
					Выборка.Сотрудник,
					Выборка.ВидСобытия,
					Формат(Выборка.Период, "ДФ=dd.MM.yyyy"),
					Выборка.Регистратор);
						
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщенияПользователю,
					Выборка.Регистратор,
					,
					,
					Отказ);
				
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка того, что увольнение самое последнее событие
		
	Если ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
			|	МАКСИМУМ(КадроваяИсторияСотрудников.Период) КАК Период
			|ПОМЕСТИТЬ ВТПоздниеПериоды
			|ИЗ
			|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|
			|СГРУППИРОВАТЬ ПО
			|	КадроваяИсторияСотрудников.Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
			|	КадроваяИсторияСотрудников.Период КАК Период,
			|	КадроваяИсторияСотрудников.ВидСобытия КАК ВидСобытия,
			|	КадроваяИсторияСотрудников.Регистратор КАК Регистратор
			|ИЗ
			|	ВТПоздниеПериоды КАК ПоздниеПериоды
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|		ПО ПоздниеПериоды.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
			|			И ПоздниеПериоды.Период = КадроваяИсторияСотрудников.Период
			|ГДЕ
			|	ПоздниеПериоды.Период > &ДатаСобытия";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
					
				ТекстСообщенияПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Сотрудника %1 необходимо уволить позднее кадрового события ""%2"" (%3 - %4)';uk='Співробітника %1 необхідно звільнити пізніше кадрового події""%2"" (%3 - %4)'"),
					Выборка.Сотрудник,
					Выборка.ВидСобытия,
					Формат(Выборка.Период, "ДФ=dd.MM.yyyy"),
					Выборка.Регистратор);
						
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщенияПользователю,
					Выборка.Регистратор,
					,
					,
					Отказ);
				
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка того, что на период, равный ДатаСобытия, еще нет зарегистрированных событий
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Регистратор,
		|	КадроваяИсторияСотрудников.Сотрудник,
		|	КадроваяИсторияСотрудников.Период,
		|	КадроваяИсторияСотрудников.ВидСобытия
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|ГДЕ
		|	КадроваяИсторияСотрудников.Период = &ДатаСобытия";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщенияПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='По сотруднику %1, дата кадрового события (%2) противоречит кадровому приказу %3';uk='По співробітнику %1, дата кадрової події (%2) суперечить кадровому наказу %3'"),
				Выборка.Сотрудник,
				Формат(Выборка.Период, "ДФ=dd.MM.yyyy"),
				Выборка.Регистратор);
					
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщенияПользователю,
				Выборка.Регистратор,
				,
				,
				Отказ);
			
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСоответствиеСотрудниковОрганизации(Организация, Сотрудник, Отказ) Экспорт
	
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	
	ГоловнаяОрганизацияСотрудника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ГоловнаяОрганизация");
	
	Если ГоловнаяОрганизацияСотрудника <> ГоловнаяОрганизация Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Сотрудник %1 не соответствует организации %2.';uk='Співробітник %1 не відповідає організації %2.'"),
			Сотрудник,
			Организация);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,
			"Объект.Сотрудник",
			,
			Отказ);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеДатыРождения(МассивСотрудников) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	&Период
		|ПОМЕСТИТЬ ВТОтборСотрудников
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивСотрудников)";
		
	Запрос.Выполнить();
	
	ПроверитьЗаполнениеДатыРожденияПоВременнойТаблице(Запрос.МенеджерВременныхТаблиц, "ВТОтборСотрудников", Ложь);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтборСотрудников.Сотрудник
		|ИЗ
		|	ВТОтборСотрудников КАК ОтборСотрудников";
		
	МассивСотрудников = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
		
КонецПроцедуры

Процедура ПроверитьЗаполнениеДатыРожденияПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяВТОтбораСотрудников, ДатаРожденияВТаблице = Истина) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если НЕ ДатаРожденияВТаблице Тогда
		
		ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			Запрос.МенеджерВременныхТаблиц,
			ИмяВТОтбораСотрудников);
			
		СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "ДатаРождения");
		
		ИмяВТСпискаСотрудников = "ВТКадровыеДанныеСотрудников";
		
	Иначе
		ИмяВТСпискаСотрудников = ИмяВТОтбораСотрудников;
	КонецЕсли; 
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.Сотрудник КАК Сотрудник
		|ИЗ
		|	ВТОтбораСотрудников КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ДатаРождения = ДАТАВРЕМЯ(1, 1, 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник";
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтбораСотрудников", ИмяВТСпискаСотрудников);
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Счетчик = 1;
		Выборка = РезультатЗапроса.Выбрать();
		
		КоличествоЗаписей = Выборка.Количество();
		Если КоличествоЗаписей < 10 Тогда
			КоличествоВыводимыхЗаписей = КоличествоЗаписей;
		Иначе
			КоличествоВыводимыхЗаписей = 5;
		КонецЕсли; 
		
		Пока Выборка.Следующий() Цикл
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='У сотрудника %1 не заполнена дата рождения';uk='У співробітника %1 не заповнено дата народження'"),
					Выборка.Сотрудник),
				Выборка.Сотрудник,
				"ДатаРождения",
				"ФизическоеЛицо");
				
			Счетчик = Счетчик + 1;
			Если Счетчик > КоличествоВыводимыхЗаписей Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЦикла;
		
		Если КоличествоЗаписей <> КоличествоВыводимыхЗаписей Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='и еще у %1 сотрудников';uk='і ще у %1 співробітників'"),
					КоличествоЗаписей - КоличествоВыводимыхЗаписей));
				
		КонецЕсли;
		
		ИмяВТВТПромежуточная = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТПромежуточная");
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Т.*
			|ПОМЕСТИТЬ ВТПромежуточная
			|ИЗ
			|	ВТОтбораСотрудников КАК Т
			|ГДЕ
			|	ЛОЖЬ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТОтбораСотрудников
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Т.*
			|ПОМЕСТИТЬ ВТОтбораСотрудников
			|ИЗ
			|	ВТПромежуточная КАК Т";
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТПромежуточная", ИмяВТВТПромежуточная);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОтбораСотрудников", ИмяВТОтбораСотрудников);
			
		Запрос.Выполнить();
		
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает соответствие сотрудников, переданным физическим лицам. Поиск сотрудников ведется
// в рамках головной организации, которая задается параметром Организация. Если, переданная 
// организация, является обособленным подразделением, то поиск ведется среди сотрудников головной
// этого обособленного подразделения.
// Если сотрудника не удается найти - создается новый.
// В ходе поиска сотрудников не производится проверка оформленности на работу. Предполагается, что
// функция вызывается для физических лиц, по которым не был определен сотрудник методом СотрудникиОрганизации.
//
// Параметры:
//			ФизическиеЛица Массив ссылок на Справочник.ФизическиеЛица или ссылка на элемент.
//			Организация - СсправочиникСсылка.Организации
//
// Возвращаемое значение:
//		Соотвествие - ключи соотвествия ссылки на предеанные в параметрах физические лица
//				Значения - соответствующие им сотрудники
//
Функция НеоформленныеСотрудникиФизическихЛиц(ФизическиеЛица, Организация) Экспорт
	
	СоответствиеСотрудниковФизическимЛицам = Новый Соответствие;
	
	ГоловнаяОрганизация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	
	Если ТипЗнч(ФизическиеЛица) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СписокФизическихЛиц = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФизическиеЛица);
	Иначе
		СписокФизическихЛиц = ФизическиеЛица;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
		|	МИНИМУМ(ЕСТЬNULL(Сотрудники.Ссылка, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))) КАК Сотрудник
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|		ПО (Сотрудники.ФизическоеЛицо = ФизическиеЛица.Ссылка)
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&СписокФизическихЛиц)
		|	И Сотрудники.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|
		|СГРУППИРОВАТЬ ПО
		|	ФизическиеЛица.Ссылка";
		
	Запрос.УстановитьПараметр("СписокФизическихЛиц", СписокФизическихЛиц);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Сотудник) Тогда
			СоответствиеСотрудниковФизическимЛицам.Вставить(Выборка.ФизическоеЛицо, Выборка.Сотрудник);
		Иначе
			
			СотрудникОбъект = Справочники.Сотрудники.СоздатьЭлемент();
			СотрудникОбъект.ФизическоеЛицо = Выборка.ФизическоеЛицо;
			СотрудникОбъект.ГоловнаяОрганизация = ГоловнаяОрганизация;
			
			СотрудникОбъект.Записать();
			
			СоответствиеСотрудниковФизическимЛицам.Вставить(Выборка.ФизическоеЛицо, СотрудникОбъект.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеСотрудниковФизическимЛицам;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование временных таблиц с кадровыми данными

// Формирует временную таблицу ВТКадровыеДанныеФизическихЛиц, содержащую кадровые данные физических лиц,
// переданных ей в качестве параметра на указанную дату.
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц в котором формируется временная таблица
//		ТолькоРазрешенные - Булево
//		СписокФизическихЛиц - Массив ссылок или ссылка на элемент справочника ФизическиеЛица
//		КадровыеДанные - см. описание к функции КадровыеДанныеФизическихЛиц
//		ДатаПолученияДанных - Дата, на которую необходимо получить "периодические" данные
//		ПоляОтбораПериодическихДанных -  см. описание к функции КадровыеДанныеФизическихЛиц
// 
Процедура СоздатьНаДатуВТКадровыеДанныеФизическихЛиц(МенеджерВременныхТаблиц, ТолькоРазрешенные, СписокФизическихЛиц, КадровыеДанные, Знач ДатаПолученияДанных, ПоляОтбораПериодическихДанных = Неопределено) Экспорт
	
	// Проверим Передана ли нам дата на которую необходимо получать периодические данные
	Если ДатаПолученияДанных = '00010101000000' Тогда
		ДатаПолученияДанных = ТекущаяДатаСеанса();
	КонецЕсли;
	
	// Проверим, если в качестве параметра СписокФизическихЛиц, передана ссылка, создадим массив
	Если ТипЗнч(СписокФизическихЛиц) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		МассивФизическихЛиц = Новый Массив;
		МассивФизическихЛиц.Добавить(СписокФизическихЛиц);
	Иначе
		МассивФизическихЛиц = СписокФизическихЛиц;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивФизическихЛиц", МассивФизическихЛиц);
	Запрос.УстановитьПараметр("ДатаПолученияДанных", ДатаПолученияДанных);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	&ДатаПолученияДанных КАК Период,
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСписокФизическихЛиц
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка В(&МассивФизическихЛиц)";
	
	Если НЕ ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;	
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(
		МенеджерВременныхТаблиц,
		"ВТСписокФизическихЛиц");
	СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, ТолькоРазрешенные, КадровыеДанные, ПоляОтбораПериодическихДанных);
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТСписокФизическихЛиц";
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает структуру описания полей отбора для методов получения кадровых данных физических лиц
//
// Параметры:
//		ИменаПолейВременнойТаблицыОтборовФизическихЛиц - строка с именами полей отбора
//							физических лиц ",". Строка должна содержать два имени поля, разделенные
//							запятой. Первое имя соответствует полю "ФизическоеЛицо", второе полю "Период"
//
// Возвращаемое значение:
//		Структура содержащая имена полей отбора сотрудников
//			 КлючиСтруктуры:
//			 	ФизическоеЛицо
//				Период
//
Функция ПоляОтбораФизическихЛиц(ИменаПолейВременнойТаблицыОтборовФизическихЛиц = "ФизическоеЛицо,Период") Экспорт
	
	МассивИменПолейОтбораФизическихЛиц = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаПолейВременнойТаблицыОтборовФизическихЛиц, ",");
	Возврат Новый Структура("ФизическоеЛицо,Период", МассивИменПолейОтбораФизическихЛиц[0], МассивИменПолейОтбораФизическихЛиц[1]);
	
КонецФункции

// Возвращает структуру с параметрами для метода СоздатьВТКадровыеДанныеФизическихЛиц
//
// Параметры:
//		МенеджерВременныхТаблиц
//		ИмяВременнойТаблицыОтборовФизическихЛиц - имя временной таблицы - "фильтра"
//		ИменаПолейВременнойТаблицыОтборовФизическихЛиц - строка с именами полей отбора
//							физических лиц ",". Строка должна содержать два имени поля, разделенные
//							запятой. Первое имя соответствует полю "ФизическоеЛицо", второе полю "Период"
//
// Возвращаемое значение:
//		Структура с полями:
//			МенеджерВременныхТаблиц
//			ИмяВременнойТаблицыОтборовФизическихЛиц - имя временной таблицы отборов физических лиц.
//			ИмяВТКадровыеДанныеФизическихЛиц - имя создаваемой временной таблицы
//			ПоляОтбораФизическихЛиц - см. ПоляОтбораФизическихЛиц
//
Функция ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(МенеджерВременныхТаблиц, ИмяВременнойТаблицыОтборовФизическихЛиц, ИменаПолейВременнойТаблицыОтборовФизическихЛиц = "ФизическоеЛицо,Период") Экспорт
	
	ОписательВременныхТаблиц = Новый Структура;
	
	ОписательВременныхТаблиц.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательВременныхТаблиц.Вставить("ИмяВременнойТаблицыОтборовФизическихЛиц", ИмяВременнойТаблицыОтборовФизическихЛиц);
	ОписательВременныхТаблиц.Вставить("ИмяВТКадровыеДанныеФизическихЛиц", "ВТКадровыеДанныеФизическихЛиц");
	ОписательВременныхТаблиц.Вставить("ПоляОтбораФизическихЛиц", ПоляОтбораФизическихЛиц(ИменаПолейВременнойТаблицыОтборовФизическихЛиц));
	
	Возврат ОписательВременныхТаблиц;
	
КонецФункции

// Формирует временную таблицу ВТКадровыеДанныеФизическихЛиц, список физических лиц и периодов,
// по которым необходимо получить данные, берутся из временной таблицы в менеджере временных
// таблиц, переданном в качестве параметра. Временная таблица обязательно должна содержать
// колонки ФизическоеЛицо и Период.
//
// Параметры:
//		ОписательВременныхТаблиц - структура, сформированная 
//				методом ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц
//		ТолькоРазрешенные - Булево
//		КадровыеДанные - см. описание к функции КадровыеДанныеФизическихЛиц
//		ПоляОтбораПериодическихДанных -  см. описание к функции КадровыеДанныеФизическихЛиц
//
Процедура СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, ТолькоРазрешенные, КадровыеДанные, ПоляОтбораПериодическихДанных = Неопределено) Экспорт
	
	Если ТипЗнч(КадровыеДанные) = Тип("Строка") Тогда
		// Преобразуем параметр КадровыеДанные из строки в массив идентификаторов
		МассивНеобходимыхКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(КадровыеДанные, " ",""), ",");
	Иначе
		МассивНеобходимыхКадровыхДанных = КадровыеДанные;
	КонецЕсли; 
	
	Запрос = ЗапросВТКадровыеДанныеФизическихЛиц(
		ТолькоРазрешенные,
		ОписательВременныхТаблиц.ИмяВТКадровыеДанныеФизическихЛиц,
		ОписательВременныхТаблиц.ИмяВременнойТаблицыОтборовФизическихЛиц,
		ОписательВременныхТаблиц.ПоляОтбораФизическихЛиц,
		МассивНеобходимыхКадровыхДанных,
		ПоляОтбораПериодическихДанных);
		
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует временную таблицу ВТКадровыеДанныеСотрудников, содержащую кадровые данные сотрудников,
// переданных ей в качестве параметра на указанную дату.
//
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц в котором формируется временная таблица
//		ТолькоРазрешенные - Булево
//		СписокСотрудников - Массив ссылок или ссылка на элемент справочника Сотрудники
//		КадровыеДанные - см. описание к функции КадровыеДанныеСотрудников
//		ДатаПолученияДанных - Дата, на которую необходимо получить "периодические" данные
//		ПоляОтбораПериодическихДанных -  см. описание к функции КадровыеДанныеСотрудников
// 
Процедура СоздатьНаДатуВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, ТолькоРазрешенные, СписокСотрудников, КадровыеДанные, Знач ДатаПолученияДанных, ПоляОтбораПериодическихДанных = Неопределено) Экспорт
	
	// Проверим Передана ли нам дата на которую необходимо получать периодические данные
	Если ДатаПолученияДанных = '00010101000000' Тогда
		ДатаПолученияДанных = ТекущаяДатаСеанса();
	КонецЕсли;
	
	// Проверим, если в качестве параметра СписокФизическихЛиц, передана ссылка, создадим массив
	Если ТипЗнч(СписокСотрудников) = Тип("СправочникСсылка.Сотрудники") Тогда
		МассивСотрудников = Новый Массив;
		МассивСотрудников.Добавить(СписокСотрудников);
	Иначе
		МассивСотрудников = СписокСотрудников;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСотрудников", МассивСотрудников);
	Запрос.УстановитьПараметр("ДатаПолученияДанных", ДатаПолученияДанных);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	&ДатаПолученияДанных КАК Период,
	|	ДанныеСотрудников.Ссылка КАК Сотрудник
	|ПОМЕСТИТЬ ВТСписокСотрудников
	|ИЗ
	|	Справочник.Сотрудники КАК ДанныеСотрудников
	|ГДЕ
	|	ДанныеСотрудников.Ссылка В(&МассивСотрудников)";

	Если НЕ ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;	
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
		МенеджерВременныхТаблиц,
		"ВТСписокСотрудников");
	СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, ТолькоРазрешенные, КадровыеДанные, ПоляОтбораПериодическихДанных);
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТСписокСотрудников";
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает структуру описания полей отбора для методов получения кадровых данных сотрудников
//
// Параметры:
//		ИменаПолейВременнойТаблицыОтборовСотрудников - строка с именами полей отбора
//							сотрудников ",". Строка должна содержать два имени поля, разделенные
//							запятой. Первое имя соответствует полю "Сотрудник", второе полю "Период"
//
// Возвращаемое значение:
//		Структура содержащая имена полей отбора сотрудников
//			 КлючиСтруктуры:
//			 	Сотрудник
//				Период
//
Функция ПоляОтбораСотрудников(ИменаПолейВременнойТаблицыОтборовСотрудников = "Сотрудник,Период") Экспорт
	
	МассивИменПолейОтбораСотрудников = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаПолейВременнойТаблицыОтборовСотрудников, ",");
	Возврат Новый Структура("Сотрудник,Период", МассивИменПолейОтбораСотрудников[0], МассивИменПолейОтбораСотрудников[1]);
	
КонецФункции

// Возвращает структуру с параметрами для метода СоздатьВТКадровыеДанныеСотрудников
//
// Параметры:
//		МенеджерВременныхТаблиц
//		ИмяВременнойТаблицыОтборовСотрудников - имя временной таблицы - "фильтра"
//		ИменаПолейВременнойТаблицыОтборовСотрудников - строка с именами полей отбора
//							сотрудников ",". Строка должна содержать два имени поля, разделенные
//							запятой. Первое имя соответствует полю "Сотрудник", второе полю "Период"
//
// Возвращаемое значение:
//		Структура с полями:
//			МенеджерВременныхТаблиц
//			ИмяВременнойТаблицыОтборовСотрудников - имя временной таблицы отборов сотрудников.
//			ПоляОтбораСотрудников - см. ПоляОтбораСотрудников
//
Функция ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(МенеджерВременныхТаблиц, ИмяВременнойТаблицыОтборовСотрудников, ИменаПолейВременнойТаблицыОтборовСотрудников = "Сотрудник,Период") Экспорт
	
	ОписательВременныхТаблиц = Новый Структура;
	
	ОписательВременныхТаблиц.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательВременныхТаблиц.Вставить("ИмяВременнойТаблицыОтборовСотрудников", ИмяВременнойТаблицыОтборовСотрудников);
	ОписательВременныхТаблиц.Вставить("ПоляОтбораСотрудников", ПоляОтбораСотрудников(ИменаПолейВременнойТаблицыОтборовСотрудников));
	ОписательВременныхТаблиц.Вставить("ИмяВТКадровыеДанныеСотрудников", "ВТКадровыеДанныеСотрудников");
	
	Возврат ОписательВременныхТаблиц;
	
КонецФункции

// Формирует временную таблицу ВТКадровыеДанныеСотрудников, список сотрудников и периодов,
// по которым необходимо получить данные, берутся из временной таблицы в менеджере временных
// таблиц, переданном в качестве параметра. Временная таблица обязательно должна содержать
// колонки Сотрудник и Период.
//
// Параметры:
//		ОписательВременныхТаблиц - структура, сформированная 
//				методом ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников
//		ТолькоРазрешенные - Булево
//		КадровыеДанные - см. описание к функции КадровыеДанныеСотрудников
//		ПоляОтбораПериодическихДанных -  см. описание к функции КадровыеДанныеСотрудников
//
Процедура СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, ТолькоРазрешенные, КадровыеДанные, ПоляОтбораПериодическихДанных = Неопределено) Экспорт
	
	Если ТипЗнч(КадровыеДанные) = Тип("Строка") Тогда
		// Преобразуем параметр КадровыеДанные из строки в массив идентификаторов
		МассивНеобходимыхКадровыхДанных = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(КадровыеДанные, " ",""), ",");
	Иначе
		МассивНеобходимыхКадровыхДанных = КадровыеДанные;
	КонецЕсли;
	
	Запрос = ЗапросВТКадровыеДанныеСотрудников(
		ТолькоРазрешенные, 
		ОписательВременныхТаблиц.ИмяВТКадровыеДанныеСотрудников, 
		ОписательВременныхТаблиц.ИмяВременнойТаблицыОтборовСотрудников,
		ОписательВременныхТаблиц.ПоляОтбораСотрудников,
		МассивНеобходимыхКадровыхДанных, 
		ПоляОтбораПериодическихДанных);
	
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует временную таблицу ВТФизическиеЛицаРаботавшиеВОрганизации со списком физических лиц, работавших в указанных организации,
// подразделении и в заданном периоде. Если подразделение не указывать в список будут отобраны физические лица работавшие в организации
// независимо от подразделения.
// Временная таблица содержит поля ФизическоеЛицо и Период. Значение поля Период всегда равно значению параметра ОкончаниеПериода
//
// Параметры:
//		МенеджерВременныхТаблиц
//		ТолькоРазрешенные - Булево
//		Организация
//		НачалоПериода - Дата
//		ОкончаниеПериода - Дата
//		Подразделение
//
Процедура СоздатьВТФизическиеЛицаРаботавшиеВОрганизации(МенеджерВременныхТаблиц, ТолькоРазрешенные, Организация, Знач НачалоПериода, Знач ОкончаниеПериода, Подразделение = Неопределено, ОтбиратьПоГоловнойОрганизации = Ложь) Экспорт
	
	ПараметрыПолученияСотрудниковОрганизаций = ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	
	Если ОтбиратьПоГоловнойОрганизации Тогда
		ПараметрыПолученияСотрудниковОрганизаций.Организация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	Иначе
		ПараметрыПолученияСотрудниковОрганизаций.Организация = Организация;
	КонецЕсли;
	
	ПараметрыПолученияСотрудниковОрганизаций.Подразделение 					= Подразделение;
	ПараметрыПолученияСотрудниковОрганизаций.ОтбиратьПоГоловнойОрганизации	= ОтбиратьПоГоловнойОрганизации;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода					= НачалоПериода;
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода				= ОкончаниеПериода;
	
	СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПолученияСотрудниковОрганизаций);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СотрудникиОрганизации.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛицаРаботавшиеВОрганизации
	|ИЗ
	|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиОрганизации";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует временную таблицу ВТСотрудникиОрганизации, содержащую поля Сотрудник и ФизическоеЛицо
// Если заданы параметры НачалоПериода и ОкончаниеПериодаметод вернет список сотрудников, работавших
// в заданном периоде. Если НачалоПериода и ОкончаниеПериодаметод заданы и равны сформирует таблицу
// Сотрудников работавших на заданную дату.
//
// Параметры:
//				МенеджерВременныхТаблиц
//				ТолькоРазрешенные - Булево
//				Параметры - Структура, подготовленная с помощью метода ПараметрыПолученияСотрудниковОрганизаций
//
Процедура СоздатьВТСотрудникиОрганизации(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры) Экспорт
	
	Запрос = ЗапросВТСотрудникиОрганизации(
		ТолькоРазрешенные, 
		"ВТСотрудникиОрганизации", 
		Параметры);
		
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует временную таблицу содержащую поля ФизическоеЛицо и Сотрудник. Сотрудник отбирается по принципам:
//		- Работает на указанный период
//		- Выбирается сотрудник, работающий по основному месту работы, если такового не существует, выбирается
//			сотрудник, работающий по совместительству, принятый на наиболее раннюю дату
//
// Параметры:
//				МенеджерВременныхТаблиц
//				ТолькоРазрешенные - Булево
//				СписокФизическихЛиц - Массив ссылок на элементы справочника ФизическиеЛица или 
//					СправочникСсылка.ФизическиеЛица, если параметр опустить, в таблицу войдут
//					основные сотрудники всех физических лиц когда либо работавших в организации
//				НачалоПериода - Дата
//				ОкончаниеПериода - Дата, если ОкончаниеПериода меньше НачалоПериода, данные будут 
//					получены на дату НачалоПериода
//				Организация - СправочникСсылка.Организации
//
Процедура СоздатьВТОсновныеСотрудникиФизическихЛиц(МенеджерВременныхТаблиц, ТолькоРазрешенные, СписокФизическихЛиц, Организация, НачалоПериода, ОкончаниеПериода = '00010101') Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСотрудниковОрганизаций = ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	Если ЗначениеЗаполнено(Организация) Тогда
		ПараметрыПолученияСотрудниковОрганизаций.Организация = ЗарплатаКадрыПовтИсп.ГоловнаяОрганизация(Организация);
	КонецЕсли;
	ПараметрыПолученияСотрудниковОрганизаций.ОтбиратьПоГоловнойОрганизации 	= Истина;
	ПараметрыПолученияСотрудниковОрганизаций.СписокФизическихЛиц			= СписокФизическихЛиц;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода					= НачалоПериода;
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода				= ?(НачалоПериода > ОкончаниеПериода, НачалоПериода, ОкончаниеПериода);
	ПараметрыПолученияСотрудниковОрганизаций.КадровыеДанные					= "ФизическоеЛицо,ВидЗанятости,ДатаПриема";
	
	СоздатьВТСотрудникиОрганизации(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, ПараметрыПолученияСотрудниковОрганизаций);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСотрудникиПоОсновномуМестуРаботы
	|ИЗ
	|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
	|ГДЕ
	|	КадровыеДанныеСотрудников.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|	И КадровыеДанныеСотрудников.ДатаПриема <> ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	|	КадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадровыеДанныеСотрудников.ВидЗанятости КАК ВидЗанятости,
	|	КадровыеДанныеСотрудников.ДатаПриема КАК ДатаПриема
	|ПОМЕСТИТЬ ВТВсеСотрудникиПоСовместительству
	|ИЗ
	|	ВТСотрудникиОрганизации КАК КадровыеДанныеСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиПоОсновномуМестуРаботы КАК СотрудникиПоОсновномуМестуРаботы
	|		ПО КадровыеДанныеСотрудников.ФизическоеЛицо = СотрудникиПоОсновномуМестуРаботы.ФизическоеЛицо
	|ГДЕ
	|	КадровыеДанныеСотрудников.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|	И КадровыеДанныеСотрудников.ДатаПриема <> ДАТАВРЕМЯ(1, 1, 1)
	|	И СотрудникиПоОсновномуМестуРаботы.ФизическоеЛицо ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеСотрудникиПоСовместительству.ФизическоеЛицо,
	|	МИНИМУМ(ВсеСотрудникиПоСовместительству.ДатаПриема) КАК ДатаПриема
	|ПОМЕСТИТЬ ВТРанниеДатыПриемаСовместителей
	|ИЗ
	|	ВТВсеСотрудникиПоСовместительству КАК ВсеСотрудникиПоСовместительству
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеСотрудникиПоСовместительству.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВсеСотрудникиПоСовместительству.Сотрудник) КАК Сотрудник,
	|	ВсеСотрудникиПоСовместительству.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСотрудникиПоСовместительству
	|ИЗ
	|	ВТВсеСотрудникиПоСовместительству КАК ВсеСотрудникиПоСовместительству
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРанниеДатыПриемаСовместителей КАК РанниеДатыПриемаСовместителей
	|		ПО ВсеСотрудникиПоСовместительству.ФизическоеЛицо = РанниеДатыПриемаСовместителей.ФизическоеЛицо
	|			И ВсеСотрудникиПоСовместительству.ДатаПриема = РанниеДатыПриемаСовместителей.ДатаПриема
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеСотрудникиПоСовместительству.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиПоОсновномуМестуРаботы.Сотрудник,
	|	СотрудникиПоОсновномуМестуРаботы.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТОсновныеСотрудникиФизическихЛиц
	|ИЗ
	|	ВТСотрудникиПоОсновномуМестуРаботы КАК СотрудникиПоОсновномуМестуРаботы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СотрудникиПоСовместительству.Сотрудник,
	|	СотрудникиПоСовместительству.ФизическоеЛицо
	|ИЗ
	|	ВТСотрудникиПоСовместительству КАК СотрудникиПоСовместительству
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиПоОсновномуМестуРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТВсеСотрудникиПоСовместительству
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРанниеДатыПриемаСовместителей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСотрудникиПоСовместительству";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует массив физических лиц сотрудников
//
// Параметры
//	Сотрудники - массив
//
// Возвращаемое значение - массив уникальных физических лиц
//	
Функция ФизическиеЛицаСотрудников(Сотрудники) Экспорт
	
	Соответствие = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Сотрудники, "ФизическоеЛицо");
	
	Возврат ОбщегоНазначения.ВыгрузитьКолонку(Соответствие, "Значение", Истина);
	
КонецФункции

Процедура СоздатьВТОсновныеМестаРаботыФизическихЛиц(МенеджерВременныхТаблиц, ТолькоРазрешенные, Организация, ИмяВТОсновныеМестаРаботыФизическихЛиц, ИмяВТФизическихЛиц, ИмяПоляПериод) Экспорт
	
	КадровыйУчетВнутренний.СоздатьВТОсновныеМестаРаботыФизическихЛиц(МенеджерВременныхТаблиц, ТолькоРазрешенные, Организация, ИмяВТОсновныеМестаРаботыФизическихЛиц, ИмяВТФизическихЛиц, ИмяПоляПериод);
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Функции для регламентированной отчётности

Функция СтруктураПераметровСредняяЧисленность() Экспорт
	
	Возврат КадровыйУчетВнутренний.СтруктураПераметровСредняяЧисленность();
	
КонецФункции

Функция ПолучитьСреднююЧисленность(Организация, Параметры) Экспорт
	
	Возврат КадровыйУчетВнутренний.ПолучитьСреднююЧисленность(Организация, Параметры);
	
КонецФункции

// Функция рассчитывает среднесписочную численность работников, 
// среднесписочную численность женщин, среднесписочную численность инвалидов за период 
//
// Параметры:
//		Организация
//		НачалоПериода
//		КонецПериода
//
Функция СреднесписочнаяЧисленностьРаботающих(Организация, НачалоПериода, КонецПериода) Экспорт 
	Возврат КадровыйУчетВнутренний.СреднесписочнаяЧисленностьРаботающих(Организация, НачалоПериода, КонецПериода)	
КонецФункции

Функция СписокФизическихЛицПоПодразделениюОсновногоМестаРаботы(ТолькоРазрешенные, Параметры) Экспорт
	
	Возврат КадровыйУчетВнутренний.СписокФизическихЛицПоПодразделениюОсновногоМестаРаботы(ТолькоРазрешенные, Параметры);
	
КонецФункции
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции формирования отчетов

Функция ПолучитьСтруктуруПараметровКадровогоПриказа() Экспорт
	
	СтруктураПараметровКадровогоПриказа = Новый Структура;
	
	СтруктураПараметровКадровогоПриказа.Вставить("Ссылка");
	СтруктураПараметровКадровогоПриказа.Вставить("НазваниеОрганизации", "");
	СтруктураПараметровКадровогоПриказа.Вставить("ОрганизацияКодПоЕДРПОУ", "");
	СтруктураПараметровКадровогоПриказа.Вставить("НомерДок", "");
	СтруктураПараметровКадровогоПриказа.Вставить("ДатаДок", '00010101');
	СтруктураПараметровКадровогоПриказа.Вставить("Работник", "");
	СтруктураПараметровКадровогоПриказа.Вставить("ТрудовойДоговорЧисло", "    ");
	СтруктураПараметровКадровогоПриказа.Вставить("ТрудовойДоговорМесяцГод", "______________ 20__");
	СтруктураПараметровКадровогоПриказа.Вставить("ТрудовойДоговорДата", '00010101');
	СтруктураПараметровКадровогоПриказа.Вставить("ТрудовойДоговорНомер", "____");
	СтруктураПараметровКадровогоПриказа.Вставить("ТабельныйНомер", "");
	СтруктураПараметровКадровогоПриказа.Вставить("Подразделение");
	СтруктураПараметровКадровогоПриказа.Вставить("Должность");
	СтруктураПараметровКадровогоПриказа.Вставить("ДолжностьРуководителя", "");
	СтруктураПараметровКадровогоПриказа.Вставить("ФИОРуководителя", "");
	
	Возврат СтруктураПараметровКадровогоПриказа;
		
КонецФункции

Процедура ЗаполнитьПараметрыКадровогоПриказа(Параметры, КадровыеДанные) Экспорт
	
	ЗаполнитьЗначенияСвойств(Параметры, КадровыеДанные);
	
	Параметры.НомерДок = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Параметры.НомерДок, Истина, Истина);
	Параметры.ДатаДок = ?(ЗначениеЗаполнено(Параметры.ДатаДок), Параметры.ДатаДок, ТекущаяДатаСеанса());
	Параметры.ТабельныйНомер = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(Параметры.ТабельныйНомер, Истина, Истина);
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") ИЛИ ТипЗнч(Параметры.Ссылка) = Тип("СправочникСсылка.Сотрудники") Тогда
		Если Параметры.Свойство("ТарифнаяСтавкаЦелаяЧасть") Тогда
			Если КадровыеДанные.ТарифнаяСтавка > 0 Тогда
				ЦелаяЧасть = Цел(КадровыеДанные.ТарифнаяСтавка);
				Параметры.ТарифнаяСтавкаЦелаяЧасть = ЦелаяЧасть;
				Параметры.ТарифнаяСтавкаГривны = КадровыйУчет.РазложитьЧислоВСтроку(ЦелаяЧасть,6,Ложь);
				ДробнаяЧасть = КадровыеДанные.ТарифнаяСтавка - ЦелаяЧасть;
				Параметры.ТарифнаяСтавкаДробнаяЧасть = ?(ДробнаяЧасть = 0, "00", ДробнаяЧасть*100);
				Параметры.ТарифнаяСтавкаКопейки = КадровыйУчет.РазложитьЧислоВСтроку(Параметры.ТарифнаяСтавкаДробнаяЧасть,2,Истина);   
			КонецЕсли;
		КонецЕсли
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.ТрудовойДоговорДата) Тогда
		
		ПредставлениеДатыТрудовогоДоговора  = Формат(Параметры.ТрудовойДоговорДата, "ДЛФ=DD");
		
		Параметры.ТрудовойДоговорЧисло = СокрЛП(Лев(ПредставлениеДатыТрудовогоДоговора,2));
		Параметры.ТрудовойДоговорМесяцГод = СокрЛП(Прав(ПредставлениеДатыТрудовогоДоговора, СтрДлина(ПредставлениеДатыТрудовогоДоговора)-2));
		
	КонецЕсли; 
	
КонецПроцедуры	

Функция ДополнительныеСведенияТиповойФормыП2(СтрокиДанных, ДатаОтчета) Экспорт
	
	Возврат КадровыйУчетВнутренний.ДополнительныеСведенияТиповойФормыП2(СтрокиДанных, ДатаОтчета)
	
КонецФункции

Функция СформироватьЗапросДляП1(МассивОбъектов) Экспорт
	
	Возврат КадровыйУчетВнутренний.СформироватьЗапросДляП1(МассивОбъектов);
	
КонецФункции

Функция СформироватьЗапросДляТ5(МассивОбъектов) Экспорт
	
	Возврат КадровыйУчетВнутренний.СформироватьЗапросДляТ5(МассивОбъектов);
	
КонецФункции

Функция СформироватьЗапросДляП4(МассивОбъектов) Экспорт
	
	Возврат КадровыйУчетВнутренний.СформироватьЗапросДляП4(МассивОбъектов);		
	
КонецФункции	

Процедура СоздатьВТДанныеДокументовКадровыхПеремещений(МенеджерВременныхТаблиц, МассивОбъектов) Экспорт
	
	КадровыйУчетВнутренний.СоздатьВТДанныеДокументовКадровыхПеремещений(МенеджерВременныхТаблиц, МассивОбъектов);
	
КонецПроцедуры

Процедура СоздатьВТДанныеДокументовПриемНаРаботу(МенеджерВременныхТаблиц, МассивОбъектов) Экспорт
	
	КадровыйУчетВнутренний.СоздатьВТДанныеДокументовПриемНаРаботу(МенеджерВременныхТаблиц, МассивОбъектов);
	
КонецПроцедуры

Процедура СоздатьВТДанныеДокументовУвольнение(МенеджерВременныхТаблиц, МассивОбъектов) Экспорт
	
	КадровыйУчетВнутренний.СоздатьВТДанныеДокументовУвольнение(МенеджерВременныхТаблиц, МассивОбъектов);
	
КонецПроцедуры

Функция КадровыеДанныеДляПечатиКадровыхПриказов() Экспорт
	
	Возврат КадровыйУчетВнутренний.КадровыеДанныеДляПечатиКадровыхПриказов();
	
КонецФункции

Функция ОписанияСоставаНачисленийПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды, ИмяПоляПериод = "Период", ИмяПоляСотрудник = "Сотрудник") Экспорт
	
	Возврат КадровыйУчетВнутренний.ОписанияСоставаНачисленийПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды, ИмяПоляПериод, ИмяПоляСотрудник);
	
КонецФункции

Функция ЗапросВТТарифныеСтавкиСотрудников(ТолькоРазрешенные, ИмяВТТарифныеСтавкиСотрудников, ИмяВременнойТаблицыОтборовСотрудников, ПоляОтбораСотрудников, ПоляОтбораПериодическихДанных) Экспорт
	
	Возврат КадровыйУчетВнутренний.ЗапросВТТарифныеСтавкиСотрудников(ТолькоРазрешенные, ИмяВТТарифныеСтавкиСотрудников, ИмяВременнойТаблицыОтборовСотрудников, ПоляОтбораСотрудников, ПоляОтбораПериодическихДанных);
	
КонецФункции

Функция НеобходимыКадровыеДанныеФизическогоЛица(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.НеобходимыКадровыеДанныеФизическогоЛица(ИмяПоля);
	
КонецФункции

Функция НеобходимыТекущиеДанныеСотрудника(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.НеобходимыТекущиеДанныеСотрудника(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымПоИмениЗапрашиваемыхТекущихДанныхСотрудника(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.ПутьКДаннымПоИмениЗапрашиваемыхТекущихДанныхСотрудника(ИмяПоля);
	
КонецФункции

Функция ЗапросВТКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ИмяВТКадровыеДанныеФизическихЛиц, ИмяВременнойТаблицыОтборовФизическихЛиц, ПоляОтбораФизическихЛиц, КадровыеДанные, ПоляОтбораПериодическихДанных) Экспорт
	
	Возврат КадровыйУчетВнутренний.ЗапросВТКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ИмяВТКадровыеДанныеФизическихЛиц, ИмяВременнойТаблицыОтборовФизическихЛиц, ПоляОтбораФизическихЛиц, КадровыеДанные, ПоляОтбораПериодическихДанных);
	
КонецФункции

Функция ЗапросВТКадровыеДанныеСотрудников(ТолькоРазрешенные, ИмяВТКадровыеДанныеСотрудников, ИмяВременнойТаблицыОтборовСотрудников, ПоляОтбораСотрудников, КадровыеДанные, ПоляОтбораПериодическихДанных) Экспорт
	
	Возврат КадровыйУчетВнутренний.ЗапросВТКадровыеДанныеСотрудников(ТолькоРазрешенные, ИмяВТКадровыеДанныеСотрудников, ИмяВременнойТаблицыОтборовСотрудников, ПоляОтбораСотрудников, КадровыеДанные, ПоляОтбораПериодическихДанных);
	
КонецФункции

Функция ЗапросВТСотрудникиОрганизации(ТолькоРазрешенные, ИмяВТСотрудникиОрганизации, Параметры) Экспорт
	
	Возврат КадровыйУчетВнутренний.ЗапросВТСотрудникиОрганизации(ТолькоРазрешенные, ИмяВТСотрудникиОрганизации, Параметры);
	
КонецФункции

Функция ЗапросВТОсновныеСотрудникиОрганизации(ТолькоРазрешенные, ИмяВТСотрудникиОрганизации, ИмяВременнойТаблицыОтборовСотрудников) Экспорт
	
	Возврат КадровыйУчетВнутренний.ЗапросВТОсновныеСотрудникиОрганизации(ТолькоРазрешенные, ИмяВТСотрудникиОрганизации, ИмяВременнойТаблицыОтборовСотрудников);
	
КонецФункции

Процедура ПроверитьТекущуюТарифнуюСтавку(Источник, Отказ, Замещение) Экспорт
	
	КадровыйУчетВнутренний.ПроверитьТекущуюТарифнуюСтавку(Источник, Отказ, Замещение);
	
КонецПроцедуры

Процедура УстановитьТекущуюТарифнуюСтавку(Источник, Отказ, Замещение) Экспорт
	
	КадровыйУчетВнутренний.УстановитьТекущуюТарифнуюСтавку(Источник, Отказ, Замещение);
	
КонецПроцедуры

Функция НеобходимыСведенияПриказаОПриеме(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.НеобходимыСведенияПриказаОПриеме(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымПоИмениДанныхПриказаОПриеме(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.ПутьКДаннымПоИмениДанныхПриказаОПриеме(ИмяПоля);
	
КонецФункции

Функция ПутьКДаннымПоИмениЗапрашиваемойТекущейТарифнойСтавкиСотрудника(Знач ИмяПоля) Экспорт
	
	Возврат КадровыйУчетВнутренний.ПутьКДаннымПоИмениЗапрашиваемойТекущейТарифнойСтавкиСотрудника(ИмяПоля);
	
КонецФункции

Функция ЗапросВТВсеЗначенияДоступаСотрудников(Сотрудники) Экспорт
	
	Возврат КадровыйУчетВнутренний.ЗапросВТВсеЗначенияДоступаСотрудников(Сотрудники);
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.11.1";
	Обработчик.Процедура = "КадровыйУчет.ЗаполнитьСправочникОснованияУвольнения";
	Обработчик.Опциональный = Ложь;
	
КонецПроцедуры
Процедура ЗаполнитьСправочникОснованияУвольнения() Экспорт
		
	КлассификаторXML = Справочники.ОснованияУвольнения.ПолучитьМакет("ОснованияУвольненияПоКЗОТ").ПолучитьТекст();
	
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	МассивСтатей 	= КлассификаторТаблица.ВыгрузитьКолонку("Title");	
	
	Выборка = Справочники.ОснованияУвольнения.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаименованиеСтатьи = ВРЕГ(Выборка.Наименование);
		Если Найти(НаименованиеСтатьи,"КЗОТ") <> 0 Тогда
			НаименованиеСтатьи = СтрЗаменить(НаименованиеСтатьи, "КЗОТ", "КЗПП")
		КонецЕсли;
		Если Найти(НаименованиеСтатьи,"УКРАИНЫ") <> 0  Тогда
			НаименованиеСтатьи = СтрЗаменить(НаименованиеСтатьи, "УКРАИНЫ", "")
		КонецЕсли;
		Если Найти(НаименованиеСтатьи,"УКРАЇНИ") <> 0  Тогда
			НаименованиеСтатьи = СтрЗаменить(НаименованиеСтатьи, "УКРАЇНИ", "")
		КонецЕсли;
		НаименованиеСтатьи = СокрЛП(НаименованиеСтатьи);
		Для Каждого Статья Из МассивСтатей Цикл
			мНаименованиеСтатьи = СтрЗаменить(ВРЕГ(Статья),"УКРАЇНИ","");
			мНаименованиеСтатьи = СокрЛП(мНаименованиеСтатьи);
			Если Найти(НаименованиеСтатьи, мНаименованиеСтатьи) <> 0 Тогда 
				СправочникОбъект = Выборка.ПолучитьОбъект();
				СправочникОбъект.СтатьяЗакона = Статья;
				СправочникОбъект.Записать();
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ПерезаполнитьСлужебныеИдентификаторыФизическихЛиц() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ФизическиеЛица.Ссылка,
		|	ФизическиеЛица.Наименование,
		|	ФизическиеЛица.НаименованиеСлужебное
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	НЕ ФизическиеЛица.ЭтоГруппа";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка= РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаименованиеСлужебное = ФизическиеЛицаЗарплатаКадры.НаименованиеСлужебное(Выборка.Наименование);
			Если Выборка.НаименованиеСлужебное <> НаименованиеСлужебное Тогда
					
				ФизическоеЛицоОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ФизическоеЛицоОбъект.НаименованиеСлужебное = НаименованиеСлужебное;
				ФизическоеЛицоОбъект.ОбменДанными.Загрузка = Истина;
				ФизическоеЛицоОбъект.Записать();
				
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

Функция РазложитьЧислоВСтроку(Значение, Длина, ЛидирующиеНули) Экспорт
	
	Возврат КадровыйУчетВнутренний.РазложитьЧислоВСтроку(Значение, Длина, ЛидирующиеНули);
	
КонецФункции

Функция КатегорияЕСВПоУмолчанию(Организация) Экспорт
	
	Возврат УчетСтраховыхВзносов.КатегорияЕСВПоУмолчанию(Организация);
	
КонецФункции	
