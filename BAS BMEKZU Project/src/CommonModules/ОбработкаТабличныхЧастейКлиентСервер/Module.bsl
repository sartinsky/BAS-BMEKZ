// Рассчитывает сумму в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа
//  ИНАГРО. Добавден параметр для БА ПрименитьЦенуККоличествуГолов
//
Процедура РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЗначениеПустогоКоличества = 0, ЕстьСкидки = Неопределено, ПрименитьЦенуККоличествуГолов = Ложь, РасхождениеКоличества = Ложь) Экспорт // ИНАГРО ПрименитьЦенуККоличествуГолов, РасхождениеКоличества

	ТипСтроки = ТипЗнч(СтрокаТабличнойЧасти);
	ЕстьСкидки = Ложь;
	ЕстьЛьгота = Ложь; // ИНАГРО
	Если ТипСтроки = Тип("Структура") 
	 ИЛИ ТипСтроки = Тип("ДанныеФормыЭлементКоллекции") Тогда
		ЕстьСкидки = СтрокаТабличнойЧасти.Свойство("СуммаБезСкидки");
		
		// ИНАГРО++
		ЕстьЛьгота = СтрокаТабличнойЧасти.Свойство("СтавкаЛьготы"); 
		Если СтрокаТабличнойЧасти.Свойство("ИНАГРО_НовоеКоличество") Тогда
			НовоеКоличество = СтрокаТабличнойЧасти.ИНАГРО_НовоеКоличество;
		ИначеЕсли СтрокаТабличнойЧасти.Свойство("НовоеКоличество") Тогда
			НовоеКоличество = СтрокаТабличнойЧасти.НовоеКоличество;
		КонецЕсли;
        // ИНАГРО--
		
	ИначеЕсли ТипСтроки = Тип("СтрокаТаблицыЗначений") Тогда
		ТЗ = СтрокаТабличнойЧасти.Владелец();
		ЕстьСкидки = (ТЗ.Колонки.Найти("СуммаБезСкидки") <> Неопределено);
		
		// ИНАГРО++
		ЕстьЛьгота = (ТЗ.Колонки.Найти("СтавкаЛьготы") <> Неопределено); 
		Если ТЗ.Колонки.Найти("ИНАГРО_НовоеКоличество") <> Неопределено Тогда
			НовоеКоличество = СтрокаТабличнойЧасти.ИНАГРО_НовоеКоличество;
		ИначеЕсли  ТЗ.Колонки.Найти("НовоеКоличество") <> Неопределено Тогда
			НовоеКоличество = СтрокаТабличнойЧасти.НовоеКоличество;
		КонецЕсли;
		// ИНАГРО--

	Иначе
		Попытка
			СуммаБезСкидки = СтрокаТабличнойЧасти.СуммаБезСкидки;
			ЕстьСкидки = Истина;			 
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	//ИНАГРО ++
	Если ЕстьСкидки Тогда
				
		Если ПрименитьЦенуККоличествуГолов Тогда
			СтрокаТабличнойЧасти.СуммаБезСкидки = СтрокаТабличнойЧасти.Цена * ?(СтрокаТабличнойЧасти.Голов = 0, ЗначениеПустогоКоличества, СтрокаТабличнойЧасти.Голов);
		ИначеЕсли РасхождениеКоличества Тогда
			СтрокаТабличнойЧасти.СуммаБезСкидки = СтрокаТабличнойЧасти.Цена * ?(НовоеКоличество = 0, ЗначениеПустогоКоличества, НовоеКоличество);
		Иначе
			СтрокаТабличнойЧасти.СуммаБезСкидки = СтрокаТабличнойЧасти.Цена * ?(СтрокаТабличнойЧасти.Количество = 0, ЗначениеПустогоКоличества, СтрокаТабличнойЧасти.Количество);
		КонецЕсли;
		
		Если ЕстьЛьгота Тогда
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.СуммаБезСкидки * (1 - СтрокаТабличнойЧасти.СтавкаЛьготы); 
		Иначе  			
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.СуммаБезСкидки - СтрокаТабличнойЧасти.СуммаСкидки;
		КонецЕсли;     
	Иначе
		Если ПрименитьЦенуККоличествуГолов Тогда
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * ?(СтрокаТабличнойЧасти.Голов = 0, ЗначениеПустогоКоличества, СтрокаТабличнойЧасти.Голов);
		ИначеЕсли РасхождениеКоличества Тогда
	        СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * ?(НовоеКоличество = 0, ЗначениеПустогоКоличества, НовоеКоличество);
	    Иначе
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * ?(СтрокаТабличнойЧасти.Количество = 0, ЗначениеПустогоКоличества, СтрокаТабличнойЧасти.Количество);
		КонецЕсли;
		//ИНАГРО -- 
	КонецЕсли;

КонецПроцедуры

// Рассчитывает сумму в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа
//
Процедура РассчитатьСуммуВРозницеТабЧасти(СтрокаТабличнойЧасти, ЗначениеПустогоКоличества = 0) Экспорт

	СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * ?(СтрокаТабличнойЧасти.Количество = 0, ЗначениеПустогоКоличества, СтрокаТабличнойЧасти.Количество);

КонецПроцедуры

// Расчет, исходя из постоянной суммы
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа.
//
Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС = Ложь) Экспорт

	Если ТипЗнч(СтрокаТабличнойЧасти)=Тип("Структура") Тогда
		Если СтрокаТабличнойЧасти.Свойство("Сумма") И СтрокаТабличнойЧасти.Свойство("СтавкаНДС") Тогда
			СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
												СтрокаТабличнойЧасти.Сумма,
												СуммаВключаетНДС,
												УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		КонецЕсли;
	Иначе // Строка табличной части
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
			СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
												СтрокаТабличнойЧасти.Сумма,
												СуммаВключаетНДС,
												УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Рассчитывает суммы НДС и АкцизногоНалога
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//
Процедура РассчитатьСуммуНДСиАкцизногоНалогаТабЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС = Ложь, ЕстьАкцизныйНалог = Ложь, СуммаВключаетАкциз = Ложь) Экспорт
	
	Если ТипЗнч(СтрокаТабличнойЧасти)=Тип("Структура") Тогда
		Если НЕ (СтрокаТабличнойЧасти.Свойство("Сумма") И СтрокаТабличнойЧасти.Свойство("СтавкаНДС")) Тогда
			Возврат;
		КонецЕсли;
	Иначе // Строка табличной части
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) И НЕ ЕстьАкцизныйНалог Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СуммаДляРасчетаНДС = СтрокаТабличнойЧасти.Сумма;
	Если СуммаВключаетАкциз И ЕстьАкцизныйНалог Тогда
		// сумма включает все налоги, сначала надо расчитать акцизный налог, потом НДС
		СтрокаТабличнойЧасти.СуммаАкцизногоНалога = УчетАкцизногоНалога.РассчитатьСуммуАкцизногоНалога(СтрокаТабличнойЧасти.Сумма, СуммаВключаетАкциз, 
													СтрокаТабличнойЧасти.СтатьяДекларацииПоАкцизномуНалогу, СтрокаТабличнойЧасти.ПодакцизныеТоварыДляКоммерческогоИспользования);
		СуммаДляРасчетаНДС = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаАкцизногоНалога;
	КонецЕсли;
	СтрокаТабличнойЧасти.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
												СуммаДляРасчетаНДС,
												СуммаВключаетНДС,
												УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	Если НЕ СуммаВключаетАкциз И ЕстьАкцизныйНалог Тогда
		// сумма указывается без налогов, акцизный налог надо считать после НДС
		СтрокаТабличнойЧасти.СуммаАкцизногоНалога = УчетАкцизногоНалога.РассчитатьСуммуАкцизногоНалога(СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС, СуммаВключаетАкциз, 
													СтрокаТабличнойЧасти.СтатьяДекларацииПоАкцизномуНалогу, СтрокаТабличнойЧасти.ПодакцизныеТоварыДляКоммерческогоИспользования);
	КонецЕсли;

КонецПроцедуры // РассчитатьСуммуНДСТабЧасти()

Процедура ЗаполнитьСтатьюДекларацииПоАкцизномуНалогуТабЧасти(СтрокаТабличнойЧасти) Экспорт

	СтрокаТабличнойЧасти.СтатьяДекларацииПоАкцизномуНалогу = СтрокаТабличнойЧасти.Номенклатура.СтатьяДекларацииПоАкцизномуНалогу;

КонецПроцедуры // ЗаполнитьСтатьюДекларацииПоАкцизномуНалогуТабЧасти()

Процедура РассчитатьПропорциональныйНДСТабЧасти(СтрокаТабличнойЧасти, ПлательщикНДС = Ложь, КоэффициентПропорциональногоНДС = 0) Экспорт
	
	Если Не ПлательщикНДС Тогда
		СтрокаТабличнойЧасти.СуммаНДСПропорциональноКредит = 0;
	Иначе
		Если СтрокаТабличнойЧасти.НалоговоеНазначение <> ПредопределенноеЗначение("Справочник.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально") Тогда
		    СтрокаТабличнойЧасти.СуммаНДСПропорциональноКредит = 0;
		Иначе	
			СтрокаТабличнойЧасти.СуммаНДСПропорциональноКредит = СтрокаТабличнойЧасти.СуммаНДС * КоэффициентПропорциональногоНДС;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

 

// Функция выполняет поиск первой, удовлетворяющей условию поиска, строки табличной части.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа, в которой осуществляется поиск,
//  СтруктураОтбора - структура - задает условие поиска.
//
// Возвращаемое значение: 
//  Строка табличной части - найденная строка табличной части,
//  Неопределено           - строка табличной части не найдена.
//
Функция НайтиСтрокуТабЧасти(Объект, ТабличнаяЧасть, СтруктураОтбора) Экспорт

	СтрокаТабличнойЧасти = Неопределено;
	МассивНайденныхСтрок = Объект[ТабличнаяЧасть].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда

		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

// Процедура выполняет стандартные действия по расчету плановой суммы
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//
Процедура ПересчитатьПлановуюСумму(СтрокаТабличнойЧасти, ЗначениеПустогоКоличества = 0) Экспорт

	СтрокаТабличнойЧасти.СуммаПлановая = 
		?(СтрокаТабличнойЧасти.Количество = 0, ЗначениеПустогоКоличества, СтрокаТабличнойЧасти.Количество)
		* СтрокаТабличнойЧасти.ПлановаяСтоимость;

КонецПроцедуры

Процедура ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЕстьСкидки = Ложь, ЗначениеПустогоКоличества = 0, ПрименитьЦенуККоличествуГолов = Ложь, РасхождениеКоличества = Ложь, ЕстьЛьгота = Ложь) Экспорт // ИНАГРО ПрименитьЦенуККоличествуГолов, РасхождениеКоличества, ЕстьЛьгота
		
	ПересчитыватьЦену = (НЕ ЕстьСкидки ИЛИ (СтрокаТабличнойЧасти.СуммаСкидки  = 0))
					  И (НЕ ЕстьЛьгота ИЛИ (СтрокаТабличнойЧасти.СтавкаЛьготы = 0));		
	
	Если ПрименитьЦенуККоличествуГолов Тогда
		РасчетноеКоличество = ?(СтрокаТабличнойЧасти.Голов           = 0, ЗначениеПустогоКоличества, СтрокаТабличнойЧасти.Голов);  	
	ИначеЕсли РасхождениеКоличества Тогда
		Если СтрокаТабличнойЧасти.Свойство("НовоеКоличество") Тогда
			РасчетноеКоличество = ?(СтрокаТабличнойЧасти.НовоеКоличество = 0, ЗначениеПустогоКоличества, СтрокаТабличнойЧасти.НовоеКоличество);
		ИначеЕсли СтрокаТабличнойЧасти.Свойство("ИНАГРО_НовоеКоличество") Тогда
			РасчетноеКоличество = ?(СтрокаТабличнойЧасти.ИНАГРО_НовоеКоличество = 0, ЗначениеПустогоКоличества, СтрокаТабличнойЧасти.ИНАГРО_НовоеКоличество);
		КонецЕсли;	
	Иначе
		РасчетноеКоличество = ?(СтрокаТабличнойЧасти.Количество      = 0, ЗначениеПустогоКоличества, СтрокаТабличнойЧасти.Количество);
	КонецЕсли;

	Если ПересчитыватьЦену Тогда
		
		Если РасчетноеКоличество = 0 Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / РасчетноеКоличество;
		КонецЕсли; 
		
		Если ЕстьСкидки Тогда
			СтрокаТабличнойЧасти.СуммаБезСкидки = СтрокаТабличнойЧасти.Сумма;
			Если ЕстьЛьгота Тогда			
				СтрокаТабличнойЧасти.СуммаБезСкидки = СтрокаТабличнойЧасти.Сумма / (1 - СтрокаТабличнойЧасти.СтавкаЛьготы);			
			КонецЕсли;
		КонецЕсли; 		
		
	Иначе
		// пересчитываем скидку.
		Если ЕстьЛьгота Тогда			
			СтрокаТабличнойЧасти.СуммаБезСкидки = СтрокаТабличнойЧасти.Сумма / (1 - СтрокаТабличнойЧасти.СтавкаЛьготы);			
		КонецЕсли;  
		СтрокаТабличнойЧасти.СуммаСкидки = СтрокаТабличнойЧасти.СуммаБезСкидки - СтрокаТабличнойЧасти.Сумма; 
	КонецЕсли; 

КонецПроцедуры

Процедура ПриИзмененииСуммаБезСкидкиТабЧасти(СтрокаТабличнойЧасти, ЗначениеПустогоКоличества = 0) Экспорт

	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.СуммаБезСкидки - СтрокаТабличнойЧасти.СуммаСкидки;
	Если (СтрокаТабличнойЧасти.Количество = 0) И (ЗначениеПустогоКоличества = 0) Тогда
		СтрокаТабличнойЧасти.Цена = 0;
		СтрокаТабличнойЧасти.Сумма = 0;
	Иначе
		СтрокаТабличнойЧасти.Цена  = СтрокаТабличнойЧасти.СуммаБезСкидки / ?(СтрокаТабличнойЧасти.Количество = 0, ЗначениеПустогоКоличества, СтрокаТабличнойЧасти.Количество);
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.СуммаБезСкидки - СтрокаТабличнойЧасти.СуммаСкидки;
	КонецЕсли;

КонецПроцедуры

Процедура ПриИзмененииСуммаСкидкиТабЧасти(СтрокаТабличнойЧасти) Экспорт

	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.СуммаБезСкидки - СтрокаТабличнойЧасти.СуммаСкидки;

КонецПроцедуры

Процедура ПриИзмененииКоличествоЦена(Форма, ИмяТаблицы, ЗначениеПустогоКоличества = 0, УчитыватьНДС = Истина, ПрименитьЦенуККоличествуГолов = Ложь, РасхождениеКоличества = Ложь) Экспорт // ИНАГРО ПрименитьЦенуККоличествуГолов, РасхождениеКоличества

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;

	СтрокаТаблицы = Элементы[ИмяТаблицы].ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТаблицы, ЗначениеПустогоКоличества, , ПрименитьЦенуККоличествуГолов, РасхождениеКоличества); // ИНАГРО ПрименитьЦенуККоличествуГолов, РасхождениеКоличества

	Если СтрокаТаблицы.Свойство("СуммаНДС") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если СтрокаТаблицы.Свойство("СуммаВРознице") Тогда
		СтрокаТаблицы.СуммаВРознице = СтрокаТаблицы.Количество * СтрокаТаблицы.ЦенаВРознице;
	КонецЕсли;

	Если СтрокаТаблицы.Свойство("Всего") Тогда
		Если УчитыватьНДС Тогда
			СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		Иначе
			СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма;	
		КонецЕсли; 
	КонецЕсли;
	
	Если СтрокаТаблицы.Свойство("СуммаНУ") Тогда
		СтрокаТаблицы.СуммаНУ = СтрокаТаблицы.Сумма;		
	КонецЕсли;	

КонецПроцедуры

Процедура ПриИзмененииСумма(Форма, ИмяТаблицы, ЗначениеПустогоКоличества = 0, УчитыватьНДС = Истина, ПрименитьЦенуККоличествуГолов = Ложь, РасхождениеКоличества = Ложь) Экспорт // ИНАГРО ПрименитьЦенуККоличествуГолов, РасхождениеКоличества

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;

	СтрокаТаблицы = Элементы[ИмяТаблицы].ТекущиеДанные;

	Если СтрокаТаблицы.Свойство("Количество") Тогда
		ЕстьСкидки = СтрокаТаблицы.Свойство("СуммаСкидки");
		ЕстьЛьгота = СтрокаТаблицы.Свойство("СтавкаЛьготы"); // ИНАГРО
		ПриИзмененииСуммыТабЧасти(СтрокаТаблицы, ЕстьСкидки, ЗначениеПустогоКоличества, ПрименитьЦенуККоличествуГолов, РасхождениеКоличества, ЕстьЛьгота); // ИНАГРО ПрименитьЦенуККоличествуГолов, РасхождениеКоличества, ЕстьЛьгота 
	КонецЕсли;

	Если СтрокаТаблицы.Свойство("СуммаНДС") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если СтрокаТаблицы.Свойство("Всего") Тогда
		Если УчитыватьНДС Тогда
			СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		Иначе
		    СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма;
		КонецЕсли; 
	КонецЕсли;
	
	Если СтрокаТаблицы.Свойство("СуммаНУ") Тогда
		СтрокаТаблицы.СуммаНУ = СтрокаТаблицы.Сумма;
	КонецЕсли;	

КонецПроцедуры

Процедура ПриИзмененииСтавкаНДС(Форма, ИмяТаблицы) Экспорт

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;

	СтрокаТаблицы = Элементы[ИмяТаблицы].ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;

КонецПроцедуры

Процедура ПриИзмененииСуммаНДС(Форма, ИмяТаблицы) Экспорт

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;

	СтрокаТаблицы = Элементы[ИмяТаблицы].ТекущиеДанные;

	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;

КонецПроцедуры

Процедура ПриИзмененииСуммаБезСкидки(Форма, ИмяТаблицы, ЗначениеПустогоКоличества = 0) Экспорт

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;

	СтрокаТаблицы = Элементы[ИмяТаблицы].ТекущиеДанные;
	ПриИзмененииСуммаБезСкидкиТабЧасти(СтрокаТаблицы, ЗначениеПустогоКоличества);

	Если СтрокаТаблицы.Свойство("СуммаНДС") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;

КонецПроцедуры

Процедура ПриИзмененииСуммаСкидки(Форма, ИмяТаблицы) Экспорт

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;

	СтрокаТаблицы = Элементы[ИмяТаблицы].ТекущиеДанные;
	ПриИзмененииСуммаСкидкиТабЧасти(СтрокаТаблицы);

	Если СтрокаТаблицы.Свойство("СуммаНДС") Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если СтрокаТаблицы.Свойство("Всего") Тогда
		СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(Объект.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
	КонецЕсли;

КонецПроцедуры

#Если Клиент Тогда
	
Процедура СуммаСкидкиНачалоВыбора(Форма, ИмяТаблицы, Элемент, СтандартнаяОбработка) Экспорт
	
   	СтандартнаяОбработка = Ложь;
	СтрокаТаблицы = Форма.Элементы[ИмяТаблицы].ТекущиеДанные;

	СписокВыбора = Новый СписокЗначений();	
	СписокВыбора.Добавить(1, НСтр("ru='Скидка процентом';uk='Знижка відсотком'"));
	СписокВыбора.Добавить(2, НСтр("ru='Скидка суммой';uk='Знижка сумою'"));
	
	ДополнительныеПараметры = Новый Структура("Форма , ИмяТаблицы, СтрокаТаблицы", Форма, ИмяТаблицы, СтрокаТаблицы);
	Оповещение = Новый ОписаниеОповещения("СуммаСкидкиНачалоВыбораВыбратьИзСпискаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Форма.ПоказатьВыборИзСписка(Оповещение, СписокВыбора, Элемент, СписокВыбора[0]);
	
КонецПроцедуры

Процедура СуммаСкидкиНачалоВыбораВыбратьИзСпискаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
    Форма = ДополнительныеПараметры.Форма;
    ИмяТаблицы = ДополнительныеПараметры.ИмяТаблицы;
    СтрокаТаблицы = ДополнительныеПараметры.СтрокаТаблицы;
	
	Если НЕ РезультатВыбора = Неопределено Тогда
		
		ВариантСкидки = РезультатВыбора.Значение;
		
		ЭтоВводПроцента = (ВариантСкидки = 1);
		НачальноеЗначение = ?(ЭтоВводПроцента, 0, СтрокаТаблицы.СуммаСкидки);
		
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Введите %1 скидки';uk='Уведіть %1 знижки'"), 
				?(ЭтоВводПроцента, НСтр("ru='процент';uk='відсоток'"),НСтр("ru='сумму';uk='суму'")));
				
		ДополнительныеПараметры = Новый Структура("Форма, ИмяТаблицы, СтрокаТаблицы, ВариантСкидки,  НачальноеЗначение", Форма, ИмяТаблицы, СтрокаТаблицы, ВариантСкидки, НачальноеЗначение);
		Оповещение = Новый ОписаниеОповещения("СуммаСкидкиНачалоВыбораВводЧислаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВводЧисла(Оповещение, НачальноеЗначение, Заголовок);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура СуммаСкидкиНачалоВыбораВводЧислаЗавершение(Число, ДополнительныеПараметры) Экспорт
    
    Форма = ДополнительныеПараметры.Форма;
    ИмяТаблицы = ДополнительныеПараметры.ИмяТаблицы;
    СтрокаТаблицы = ДополнительныеПараметры.СтрокаТаблицы;
    ВариантСкидки = ДополнительныеПараметры.ВариантСкидки;
	НачальноеЗначение = ДополнительныеПараметры.НачальноеЗначение;
	
    Если (Число <> Неопределено) Тогда
        
    	ВведенноеЗначение = ?(Число = Неопределено, НачальноеЗначение, Число);
        Если ВариантСкидки = 2 Тогда
            СтрокаТаблицы.СуммаСкидки = ВведенноеЗначение;
        Иначе// процент	
            СтрокаТаблицы.СуммаСкидки = СтрокаТаблицы.СуммаБезСкидки * ВведенноеЗначение/100;
        КонецЕсли;	
        
        ПриИзмененииСуммаСкидки(Форма, ИмяТаблицы);		
        
    КонецЕсли;

КонецПроцедуры

#КонецЕсли

