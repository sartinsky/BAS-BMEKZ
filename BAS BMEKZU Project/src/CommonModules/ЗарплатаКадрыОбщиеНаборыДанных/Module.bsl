////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Обрабатывает СКД отчетов в части общих источников данных, описанных в СКД
// См. например в текстах запросов СКД
// ПОМЕСТИТЬ ОбщиеЗапросы_НачисленияУдержания
// ВЫБРАТЬ ... ИЗ Представления_КадровыеДанныеСотрудников
// 
// Параметры:
//  Объект - отчет
//
Процедура ЗаполнитьОбщиеИсточникиДанныхОтчета(Объект) Экспорт
	
	ЗаполнитьОбщиеЗапросы(Объект);
	ЗаменитьПредставленияЗапросов(Объект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьОбщиеЗапросы(Объект)
	
	Для Каждого НаборДанных из Объект.СхемаКомпоновкиДанных.НаборыДанных Цикл
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") И Найти(НаборДанных.Запрос, "ОбщиеЗапросы_") > 0 Тогда
			ТекстЗапроса = НаборДанных.Запрос;
			ЗаменитьОбщийТекстЗапросаОбщиеЗапросы(ТекстЗапроса);
			НаборДанных.Запрос = ТекстЗапроса;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьОбщийТекстЗапросаОбщиеЗапросы(ТекстЗапросаПриемник)
	МассивЗапросов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстЗапросаПриемник, ";");
	СтрокаПОМЕСТИТЬ = "ПОМЕСТИТЬ ОБЩИЕЗАПРОСЫ_";
	
	Для Каждого ТекстЗапроса из МассивЗапросов Цикл
		ПозицияСлова = Найти(ВРег(ТекстЗапроса), СтрокаПОМЕСТИТЬ);
		Если ПозицияСлова > 0 Тогда
			ИмяИсточникаДанных = Прав(ТекстЗапроса, СтрДлина(ТекстЗапроса) - ПозицияСлова - СтрДлина(СтрокаПОМЕСТИТЬ) + 1);
			Для НомерСимвола = 1 По СтрДлина(ИмяИсточникаДанных) Цикл
				КодСимвола = КодСимвола(ИмяИсточникаДанных, НомерСимвола);
				Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола) Тогда
					ИмяИсточникаДанных = Лев(ИмяИсточникаДанных, НомерСимвола - 1);
				КонецЕсли;
			КонецЦикла;
			ТекстЗапросаИсточник = ПолучитьТекстОбщегоЗапроса(ИмяИсточникаДанных);
			ТекстЗапросаПриемник = СтрЗаменить(ТекстЗапросаПриемник, ТекстЗапроса, ТекстЗапросаИсточник);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры 

Функция ПолучитьТекстОбщегоЗапроса(ИсточникДанных)
	Возврат ЗарплатаКадрыОбщиеНаборыДанныхВнутренний.ПолучитьТекстОбщегоЗапроса(ИсточникДанных);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции встраивания запросов

Процедура ЗаменитьПредставленияЗапросов(Объект)
	
	Для каждого НаборДанных Из Объект.СхемаКомпоновкиДанных.НаборыДанных Цикл
	
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") И Найти(НаборДанных.Запрос, "Представления_") > 0 Тогда
			
			ЗаменитьЗапросыКПредставлениямВиртуальныхТаблиц(НаборДанных.Запрос);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьЗапросыКПредставлениямВиртуальныхТаблиц(ТекстЗапросаПриемник) Экспорт
	
	СоответствиеПараметров = Новый Соответствие;
	
	МассивЗапросов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстЗапросаПриемник, ";");
	
	Для Каждого ТекстЗапроса из МассивЗапросов Цикл
		
		ТекстЗапросаВРег = ВРег(ТекстЗапроса);
		
		ПозицияСловаПоместить = Найти(ТекстЗапросаВРег, "ПОМЕСТИТЬ ");
		
		Если ПозицияСловаПоместить > 0 Тогда
			
			ПозицияСловаПредставления = Найти(ТекстЗапросаВРег, "ПРЕДСТАВЛЕНИЯ_");
			
			ЭтоОписаниеПредставления = Ложь;
			
			Если ПозицияСловаПредставления > 0 
				И ПозицияСловаПредставления > ПозицияСловаПоместить Тогда
				
				ЭтоОписаниеПредставления = ПустаяСтрока(Сред(ТекстЗапросаВРег, ПозицияСловаПоместить + СтрДлина("ПОМЕСТИТЬ"), ПозицияСловаПредставления - ПозицияСловаПоместить - СтрДлина("ПОМЕСТИТЬ")));
				
			КонецЕсли;
			
			Если ЭтоОписаниеПредставления Тогда
				
				Запрос = ПолучитьЗапросПоПредставлению(ТекстЗапроса, СоответствиеПараметров);
					
				Если Запрос <> Неопределено Тогда
						
					ТекстЗапросаИсточник = Запрос.Текст;
					ТекстЗапросаПриемник = СтрЗаменить(ТекстЗапросаПриемник, ТекстЗапроса, ТекстЗапросаИсточник);
					
				КонецЕсли;
				
			Иначе
				
				ИмяИсточникаДанных = ПервоеСловоНачинаяСПозицииВТексте(ТекстЗапроса, ПозицияСловаПоместить + СтрДлина("ПОМЕСТИТЬ "));
				МассивИзмеренийФильтра = МассивПолейЗапроса(Лев(ТекстЗапроса, ПозицияСловаПоместить - 1));
				СоответствиеПараметров.Вставить(ИмяИсточникаДанных, МассивИзмеренийФильтра);
				
			КонецЕсли;
			 
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗапросПоПредставлению(ТекстЗапроса, СоответствиеПараметров)
	
	Возврат ЗарплатаКадрыОбщиеНаборыДанныхВнутренний.ПолучитьЗапросПоПредставлению(ТекстЗапроса, СоответствиеПараметров);
	
КонецФункции

Функция ПервоеСловоНачинаяСПозицииВТексте(Текст, Позиция) Экспорт
	
	ПервоеСлово = Прав(Текст, СтрДлина(Текст) - Позиция + 1);
	
	Для НомерСимвола = 1 По СтрДлина(ПервоеСлово) Цикл
		
		КодСимвола = КодСимвола(ПервоеСлово, НомерСимвола);
		Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола) Тогда
			ПервоеСлово = Лев(ПервоеСлово, НомерСимвола - 1);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПервоеСлово;
	
КонецФункции

Функция МассивПолейЗапроса(ТекстПолейЗапроса) Экспорт
	
	МассивПолейЗапроса = Новый Массив;
	СловоКАК = " КАК ";
	
	Для НомерСтроки = 1 По СтрЧислоСтрок(ТекстПолейЗапроса) Цикл
		
		ИмяИзмерения = СтрПолучитьСтроку(ТекстПолейЗапроса, НомерСтроки);
		
		ПозицияСлова = Найти(ВРег(ИмяИзмерения), СловоКАК);
		Если ПозицияСлова = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока ПозицияСлова > 0 Цикл
			ИмяИзмерения = Сред(ИмяИзмерения, ПозицияСлова + СтрДлина(СловоКАК));
			ПозицияСлова = Найти(ВРег(ИмяИзмерения), СловоКАК);
		КонецЦикла;
		
		Для НомерСимвола = 1 По СтрДлина(ИмяИзмерения) Цикл
			КодСимвола = КодСимвола(ИмяИзмерения, НомерСимвола);
			Если СтроковыеФункцииКлиентСервер.ЭтоРазделительСлов(КодСимвола) Тогда
				ИмяИзмерения = Лев(ИмяИзмерения, НомерСимвола - 1);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		МассивПолейЗапроса.Добавить(ИмяИзмерения);
		
	КонецЦикла;
	
	Возврат МассивПолейЗапроса;
	
КонецФункции

Функция МассивИменВТИсточниковПараметров(ТекстЗапроса, ИмяИсточникаДанных) Экспорт
	
	МассивИменВТИсточниковПараметров = Новый Массив;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, Символ(13), Символы.ПС);
	ТекстСИЗ = СокрЛП(Сред(ТекстЗапроса, Найти(ТекстЗапроса, ИмяИсточникаДанных)));
	ПозицияСловаИЗ = Найти(ТекстСИЗ, "ИЗ" + Символы.ПС);
	Если ПозицияСловаИЗ > 0 Тогда
		ПозицияСловаГДЕ = Найти(ТекстСИЗ, "ГДЕ" + Символы.ПС);
		ИменаИсточниковПараметров = СокрЛП(Сред(ТекстСИЗ, ПозицияСловаИЗ + 2, ?(ПозицияСловаГДЕ = 0, СтрДлина(ТекстСИЗ), ПозицияСловаГДЕ - ПозицияСловаИЗ - 2)));
		
		МассивИменВТИсточниковПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаИсточниковПараметров, ",");
		
		Для ИндексЭлемента = 0 По МассивИменВТИсточниковПараметров.Количество() - 1 Цикл
			ИмяВТИсточникДанных = МассивИменВТИсточниковПараметров[ИндексЭлемента];
			ПозицияСловаКАК = Найти(ВРег(ИмяВТИсточникДанных), " КАК ");
			Если ПозицияСловаКАК > 0 Тогда
				ИмяВТИсточникДанных = Лев(ИмяВТИсточникДанных, ПозицияСловаКАК - 1);
			КонецЕсли; 
			МассивИменВТИсточниковПараметров[ИндексЭлемента] = СокрЛП(ИмяВТИсточникДанных);
		КонецЦикла;
	КонецЕсли; 
	
	Возврат МассивИменВТИсточниковПараметров;
	
КонецФункции

Функция ПараметрыЗапроса(ТекстЗапроса, ИмяИсточникаДанных) Экспорт
	
	ПараметрыЗапроса = Новый Структура;
	
	ТекстСГДЕ = СокрЛП(Сред(ТекстЗапроса, Найти(ТекстЗапроса, ИмяИсточникаДанных)));
	ПозицияСловаГДЕ = Найти(ТекстСГДЕ, "ГДЕ" + Символы.ПС);
	
	Если ПозицияСловаГДЕ > 0 Тогда
		
		СтрокаПараметров = СокрЛП(Сред(ТекстСГДЕ, ПозицияСловаГДЕ + 3));
		
		МассивСтрокПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаПараметров, "И ");
		
		Для ИндексЭлемента = 0 По МассивСтрокПараметров.Количество() - 1 Цикл
			ПараметрСтрокой = МассивСтрокПараметров[ИндексЭлемента];
			ПозицияРавно = Найти(ПараметрСтрокой, "=");
			ИмяПараметра = СокрЛП(СтрЗаменить(Лев(ПараметрСтрокой, ПозицияРавно - 1), """", ""));
			ЗначениеПараметра = СокрЛП(СтрЗаменить(Сред(ПараметрСтрокой, ПозицияРавно + 1), """", ""));
			ПараметрыЗапроса.Вставить(ИмяПараметра, ЗначениеПараметра);
		КонецЦикла;
		
	КонецЕсли; 
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция КоллекцияОтборПоПараметрам(ПараметрыЗапроса) Экспорт
	
	Отбор = Новый Массив;
	
	ЛевоеЗначениеСтрока = "";
	ВидСравненияСтрока = "";
	Для каждого Параметр Из ПараметрыЗапроса Цикл
		
		Если Найти(ВРег(Параметр.Ключ), "ЛЕВОЕЗНАЧЕНИЕ") = 1 Тогда
			ЛевоеЗначениеСтрока = Параметр.Значение;
		ИначеЕсли Найти(ВРег(Параметр.Ключ), "ВИДСРАВНЕНИЯ") = 1 Тогда
			ВидСравненияСтрока =  Параметр.Значение;
		ИначеЕсли Найти(ВРег(Параметр.Ключ), "ПРАВОЕЗНАЧЕНИЕ") = 1 Тогда
			
			ПравоеЗначениеСтрока =  Параметр.Значение;
			
			Если Найти(ВРег(ПравоеЗначениеСтрока), "ВЫЧИСЛИТЬ(") Тогда
				Попытка
					ПравоеЗначениеУстанавливаемое = Вычислить(ПравоеЗначениеСтрока);
				Исключение
					ПравоеЗначениеУстанавливаемое = ПравоеЗначениеСтрока;
				КонецПопытки;
			Иначе
				ПравоеЗначениеУстанавливаемое = ПравоеЗначениеСтрока;
			КонецЕсли;
			
			Отбор.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение", ЛевоеЗначениеСтрока, ВидСравненияСтрока, ПравоеЗначениеУстанавливаемое));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отбор.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Отбор;
	КонецЕсли;
	
КонецФункции

Функция ПараметрЗапроса(ИмяПараметра, ПараметрыЗапроса) Экспорт
	
	ПредставлениеЗначенияПараметра = Неопределено;
	
	Если ПараметрыЗапроса.Свойство(ИмяПараметра) Тогда
		
		ПредставлениеЗначенияПараметра = ПараметрыЗапроса[ИмяПараметра];
		
		ПараметрыЗапроса.Удалить(ИмяПараметра);
		
	КонецЕсли; 
	
	Возврат ПредставлениеЗначенияПараметра;
	
КонецФункции
