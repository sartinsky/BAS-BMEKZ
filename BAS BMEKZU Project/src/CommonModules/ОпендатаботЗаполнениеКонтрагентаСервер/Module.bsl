
//Функция возвращает массив контрагентов с одинаковым котом по ЕДРПОУ
Функция ПолучитьМассивКонтрагентов(КодПоЕДРПОУ,КонтрагентСсылка=Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.КодПоЕДРПОУ = &КодПоЕДРПОУ";
	
	Если Не КонтрагентСсылка = Неопределено Тогда
		Если Не КонтрагентСсылка.Пустая()Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И Контрагенты.Ссылка <> &КонтрагентСсылка";
			Запрос.УстановитьПараметр("КонтрагентСсылка", КонтрагентСсылка);
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КодПоЕДРПОУ", КодПоЕДРПОУ);
	
	РезультатЗапросаКонтрагенты = Запрос.Выполнить().Выгрузить();
	МассивСсылок = РезультатЗапросаКонтрагенты.ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивСсылок;
	
КонецФункции

Функция ПолучитьСтруктуруОпендатаботДляЗаполненияКонтрагента(КодПоЕДРПОУ,КонтрагентСсылка=Неопределено) Экспорт
	
	РезультатПроверки = Истина;
	
	Если  ПустаяСтрока(КодПоЕДРПОУ) Тогда
		РезультатПроверки = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен код ЕГРПОУ';uk='Не заповнений код ЕДРПОУ'"));
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("РезультатПроверки",РезультатПроверки);  
	СтруктураОтвета.Вставить("КодПоЕДРПОУ",КодПоЕДРПОУ); 
	
	Если РезультатПроверки = Истина Тогда
		Контрагенты = ПолучитьМассивКонтрагентов(КодПоЕДРПОУ,КонтрагентСсылка);
		СтруктураОтвета.Вставить("Контрагенты",Контрагенты);  
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

//Функция возвращает Истина, если у пользователя есть право использования сервиса Опендатабот.Ризики
Функция ЕстьПраваИспользованияОпендатаботСервер(СообщитьПользователю = Истина) Экспорт
	
	Если РольДоступна("ПолныеПрава") Тогда
		Возврат Истина;
	КонецЕсли;
	Если Не РольДоступна("ОпендатаботИспользование") Тогда
		Если СообщитьПользователю Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Недостаточно прав на использование сервиса ""Опендатабот. Ризики"".';uk='Недостатньо прав на використання сервісу ""Опендатабот. Ризики"".'"));
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьТипыДанныхРезультатаЧтения(СтруктураДанные)
	
	Если Не ТипЗнч(СтруктураДанные) = Тип("Структура")
		Или Не ТипЗнч(СтруктураДанные.factors) = Тип("Массив")
		Или Не ТипЗнч(СтруктураДанные.registry) = Тип("Структура")
		Или Не ТипЗнч(СтруктураДанные.registry.address) = Тип("Структура")
		Или Не ТипЗнч(СтруктураДанные.registry.address.parts) = Тип("Структура")Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//Получение поля структуры по имени
//Если поле не найдено, то возвращает пустую строку
//
Функция ПолучитьПолеСтруктуры(Структура, ИмяПоля) Экспорт
	
	Если Структура.Свойство(ИмяПоля) Тогда
		Возврат  Структура[ИмяПоля];
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

//Преобразование даты
//
Функция ПреобразоватьДату(ИсходнаяДата) Экспорт
	
	Если Найти(ИсходнаяДата,"-") = 0 Тогда
		Возврат ИсходнаяДата;	
	КонецЕсли;
	
	День = Сред(ИсходнаяДата,9,2);
	Месяц = Сред(ИсходнаяДата,6,2);
	Год  = Лев(ИсходнаяДата,4);
	Часы = Сред(ИсходнаяДата,12,2);
	Минуты = Сред(ИсходнаяДата,15,2);
	Секунды = Сред(ИсходнаяДата,18,2);
 
	Если ПустаяСтрока(Часы) Тогда
		Часы = 0;
		Минуты = 0;
		Секунды = 0;
		ФорматДаты = "ДЛФ=Д";	
	Иначе
		ФорматДаты = "ДЛФ=ДВ";	
	КонецЕсли;
	
	Возврат Формат(Дата(Год,Месяц,День,Часы,Минуты,Секунды),ФорматДаты);
	
КонецФункции

//Преобразование данных полей структуры в данные для отображения в отчете
//Номер региона - Представление из списка регионов
//Даты в формат ДД.ММ.ГГГГ ЧЧ:ММ:СС
//
Функция ПреобразоватьДанныеСтруктурыДляОтчета(Структура,ДанныеОтчета=Неопределено) Экспорт
	
	Если Не ПолучитьПолеСтруктуры(Структура,"endDate") = "" Тогда
		Структура.endDate = ПреобразоватьДату(Структура.endDate);
	КонецЕсли;
	Если Не ПолучитьПолеСтруктуры(Структура,"regionId") = "" Тогда
		Структура.regionId = ВернутьЗначениеРегиона(Структура.regionId);
	КонецЕсли;
	Если Не ПолучитьПолеСтруктуры(Структура,"birthDate") = "" Тогда
		Структура.birthDate = Лев(ПреобразоватьДату(Структура.birthDate),10);
	КонецЕсли;
	Если Не ПолучитьПолеСтруктуры(Структура,"registrationDate") = "" Тогда
		Структура.registrationDate = Лев(ПреобразоватьДату(Структура.registrationDate),10);
	КонецЕсли;
	Если Не ПолучитьПолеСтруктуры(Структура,"recordDate") = "" Тогда
		Структура.recordDate = Лев(ПреобразоватьДату(Структура.recordDate),10);
	КонецЕсли;
	Если Не ПолучитьПолеСтруктуры(Структура,"date") = "" Тогда
		Структура.date = ПреобразоватьДату(Структура.date);
	КонецЕсли;
	Если Не ПолучитьПолеСтруктуры(Структура,"dateStart") = "" Тогда
		Структура.dateStart = ПреобразоватьДату(Структура.dateStart);
	КонецЕсли;
	Если Не ПолучитьПолеСтруктуры(Структура,"startDate") = "" Тогда
		Структура.startDate = ПреобразоватьДату(Структура.startDate);
	КонецЕсли;
	Если Не ПолучитьПолеСтруктуры(Структура,"dateEnd") = "" Тогда
		Структура.dateEnd = ПреобразоватьДату(Структура.dateEnd);
	КонецЕсли;
	Если Не ПолучитьПолеСтруктуры(Структура,"lostDate") = "" Тогда
		Структура.lostDate = ПреобразоватьДату(Структура.lostDate);
	КонецЕсли;
	Если Не ПолучитьПолеСтруктуры(Структура,"databaseDate") = "" Тогда
		Структура.databaseDate = ПреобразоватьДату(Структура.databaseDate);
	КонецЕсли;
	Если Не ПолучитьПолеСтруктуры(Структура,"lastDeclarationCreatedDate") = "" Тогда
		Структура.lastDeclarationCreatedDate = ПреобразоватьДату(Структура.lastDeclarationCreatedDate);
	КонецЕсли;
	Если Не ПолучитьПолеСтруктуры(Структура,"dateCancellation") = "" Тогда
		Структура.dateCancellation = ПреобразоватьДату(Структура.dateCancellation);
	КонецЕсли;
	Если Не ПолучитьПолеСтруктуры(Структура,"decisionDate") = "" Тогда
		Структура.decisionDate = ПреобразоватьДату(Структура.decisionDate);
	КонецЕсли;
	Если Не ПолучитьПолеСтруктуры(Структура,"certat") = "" Тогда
		Структура.certat = ПреобразоватьДату(Структура.certat);
	КонецЕсли;
	Если Не ПолучитьПолеСтруктуры(Структура,"active") = "" Тогда
		Структура.active = ?(Структура.active = 1 ,"Актуально", "Не актуально");
	КонецЕсли;
	Если Не ПолучитьПолеСтруктуры(Структура,"sex") = "" Тогда
		Структура.sex = ?(Структура.sex = "male","Чоловіча", "Жіноча");
	КонецЕсли;
	Если Не ПолучитьПолеСтруктуры(Структура,"status") = "" Тогда
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Структура.status) Тогда
			Структура.status = ?(Структура.status = "1" ,"Актуально", "Не актуально");
		ИначеЕсли Структура.status = "active" Тогда
			Структура.status = "Активний";
		ИначеЕсли Структура.status = "nonactive" Тогда
			Структура.status = "Не активний";
		ИначеЕсли Структура.status = "cancellation" Тогда
			Структура.status = "Анульовано";
		КонецЕсли;
	КонецЕсли;
	Если Не ПолучитьПолеСтруктуры(Структура,"icon") = "" Тогда
		Если СтрДлина(Структура.icon)>1 Тогда
			Структура.icon = Лев(Структура.icon,1);
		КонецЕсли;
	КонецЕсли;
	Если Не ПолучитьПолеСтруктуры(Структура,"phones") = "" Тогда
		МассивТелефоны = Структура.phones;
		ТекстТелефоны = "";
		Если ТипЗнч(МассивТелефоны) = Тип("Массив") И МассивТелефоны.Количество()>0 Тогда
			Для каждого ЭлементМассивТелефоны Из МассивТелефоны Цикл
				Если НЕ ПустаяСтрока(ТекстТелефоны) Тогда 
					ТекстТелефоны = ТекстТелефоны + ", ";
				КонецЕсли;
		 		ТекстТелефоны = ТекстТелефоны + ЭлементМассивТелефоны;
			КонецЦикла;
		Иначе
			Если ТипЗнч(МассивТелефоны) = Тип("Строка") Тогда
				ТекстТелефоны = МассивТелефоны;
			КонецЕсли;
		КонецЕсли;
		Структура.phones = ТекстТелефоны;
	КонецЕсли;
	Если Не ПолучитьПолеСтруктуры(Структура,"type") = "" Тогда
		Если Структура.type = "singletax" Тогда
			Структура.type = "єдиний податок";
		ИначеЕсли Структура.type = "singlesocialtax" Тогда
			Структура.type = "єдиний соціальний внесок";
		КонецЕсли;
	КонецЕсли;
	Если Не ПолучитьПолеСтруктуры(Структура,"field") = "" Тогда
		Если Структура.field = "location" Тогда
			Структура.field = "адреса";
		ИначеЕсли Структура.field = "old_phones" Тогда
			Структура.field = "телефони";
		ИначеЕсли Структура.field = "full_name" Тогда
			Если ДанныеОтчета.ЭтоЮридическоеЛицо Тогда
				Структура.field = "назва";	
			Иначе
				Структура.field = "прізвище ім'я по батькові";
			КонецЕсли;
		ИначеЕсли Структура.field = "ceo_name" Тогда
			Структура.field = "керівник";
		ИначеЕсли Структура.field = "status" Тогда
			Структура.field = "статус";
		ИначеЕсли Структура.field = "founder" Тогда
			Структура.field = "засновник";
		ИначеЕсли Структура.field = "beneficiary" Тогда
			Структура.field = "бенефіціар";
		ИначеЕсли Структура.field = "activities" Тогда
			Структура.field = "види діяльності";
		КонецЕсли;
	КонецЕсли;		
	Возврат Структура;	
	
КонецФункции

Процедура ПолучитьСтруктуруИнформации(ПараметрыПроцедуры, АдресХранилища) Экспорт
	
	РезультатЧтения = ОпендатаботСервер.ПолучитьРезультатПоСтрокеПоиска(ПараметрыПроцедуры.СтрокаПоиска, Ложь, Неопределено);
	СтруктураИнформации = Новый Структура;
	СтруктураИнформации.Вставить("Ошибка",Истина);
	СтруктураИнформации.Вставить("ТекстОшибки","");
	
	Если НЕ РезультатЧтения.Ошибка Тогда
		РезультатЧтениеJSON = РезультатЧтения.РезультатЧтениеJSON;
		Если РезультатЧтениеJSON.status = "ok" Тогда
			СтруктураДанные = ПолучитьПолеСтруктуры(РезультатЧтениеJSON, "data");
			Если ПроверитьТипыДанныхРезультатаЧтения(СтруктураДанные) Тогда
				
				ЭтоОрганизация = Ложь;
				Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыПроцедуры.СтрокаПоиска) Тогда
					ЭтоОрганизация = (СтрДлина(ПараметрыПроцедуры.СтрокаПоиска) = 8);
				КонецЕсли;
				
				СтруктураИнформации.Вставить("Контрагент",ПараметрыПроцедуры.Контрагент);
				СтруктураИнформации.Вставить("КодПоЕДРПОУ",ПолучитьПолеСтруктуры(СтруктураДанные.registry,"code"));
				Если ЭтоОрганизация Тогда
					СтруктураИнформации.Вставить("ЮридическоеФизическоеЛицо","ЮридическоеЛицо");
				Иначе
					СтруктураИнформации.Вставить("ЮридическоеФизическоеЛицо","ФизическоеЛицо");
				КонецЕсли;
				Если ЭтоОрганизация Тогда
					Если ПустаяСтрока(СокрЛП(ПолучитьПолеСтруктуры(СтруктураДанные.registry,"shortName"))) Тогда
						СтруктураИнформации.Вставить("Наименование",ПолучитьПолеСтруктуры(СтруктураДанные.registry,"fullName"));
					Иначе
						СтруктураИнформации.Вставить("Наименование",ПолучитьПолеСтруктуры(СтруктураДанные.registry,"shortName"));
					Конецесли;
					СтруктураИнформации.Вставить("Руководитель",ПолучитьПолеСтруктуры(СтруктураДанные.registry,"ceoName"));
				Иначе	
					СтруктураИнформации.Вставить("Наименование",ПолучитьПолеСтруктуры(СтруктураДанные.registry,"fullName"));
					СтруктураИнформации.Вставить("Руководитель",ПолучитьПолеСтруктуры(СтруктураДанные.registry,"fullName"));
				КонецЕсли;	
				СтруктураИнформации.Вставить("ИНН","");
				
				ПлательщикНДС = Ложь;
				ПлательщикЕдиногоНалога = Ложь;
				Для каждого Фактор Из СтруктураДанные.factors Цикл
					Если Фактор.factorGroup = "tax" Тогда
						ТипНалогообложения = ПолучитьПолеСтруктуры(Фактор,"type");
						Если ТипНалогообложения = "vat" Тогда
							СтруктураИнформации.ИНН = ПолучитьПолеСтруктуры(Фактор,"number");
							Если ПолучитьПолеСтруктуры(Фактор,"status") = "active" Тогда
								ПлательщикНДС = Истина;	
							КонецЕсли;
						КонецЕсли;
						Если ТипНалогообложения = "singletax" Тогда
							Если ПолучитьПолеСтруктуры(Фактор,"status") = "active" Тогда
								ПлательщикЕдиногоНалога = Истина;	
							КонецЕсли;
						КонецЕсли;
					КонецЕсли; 
				КонецЦикла; 

				
				СтруктураИнформации.Вставить("ПлательщикНДС",ПлательщикНДС);
				СтруктураИнформации.Вставить("ПлательщикЕдиногоНалога",ПлательщикЕдиногоНалога);
				СтруктураИнформации.Вставить("ЭлектроннаяПочта",НРег(ПолучитьПолеСтруктуры(СтруктураДанные.registry,"email")));
				СтруктураИнформации.Вставить("НаименованиеПолное",ПолучитьПолеСтруктуры(СтруктураДанные.registry,"fullName"));
				СтруктураИнформации.Вставить("Телефоны",ПолучитьПолеСтруктуры(СтруктураДанные.registry,"phones"));
				СтруктураИнформации.Вставить("Страна",ПолучитьПолеСтруктуры(СтруктураДанные.registry.address,"country"));
				СтруктураИнформации.Вставить("Индекс",ПолучитьПолеСтруктуры(СтруктураДанные.registry.address,"zip"));
				СтруктураИнформации.Вставить("НаселенныйПункт",ПолучитьПолеСтруктуры(СтруктураДанные.registry.address.parts,"atu"));
				СтруктураИнформации.Вставить("НаселенныйПунктКод",ПолучитьПолеСтруктуры(СтруктураДанные.registry.address.parts,"atuCode"));
				СтруктураИнформации.Вставить("Улица",ПолучитьПолеСтруктуры(СтруктураДанные.registry.address.parts,"street"));
				СтруктураИнформации.Вставить("Дом",ПолучитьПолеСтруктуры(СтруктураДанные.registry.address.parts,"house"));
				СтруктураИнформации.Вставить("ТипДома",ПолучитьПолеСтруктуры(СтруктураДанные.registry.address.parts,"houseType"));
				СтруктураИнформации.Вставить("Квартира",ПолучитьПолеСтруктуры(СтруктураДанные.registry.address.parts,"num"));
				СтруктураИнформации.Вставить("ТипКвартиры",ПолучитьПолеСтруктуры(СтруктураДанные.registry.address.parts,"numType"));
				СтруктураИнформации.Вставить("Представление",ПолучитьПолеСтруктуры(СтруктураДанные.registry.address,"address"));
				СтруктураИнформации.Вставить("Расположение",ПолучитьПолеСтруктуры(СтруктураДанные.registry,"location"));
				СтруктураИнформации.Ошибка = Ложь;
			Иначе                                
				СтруктураИнформации.Ошибка = Истина;
				СтруктураИнформации.ТекстОшибки = НСтр("ru='Ошибка в структуре информации';uk='Помилка у структурі інформації'");
			КонецЕсли
		Иначе
			СтруктураИнформации.Ошибка = Истина;
			СтруктураИнформации.ТекстОшибки = НСтр("ru='Ошибка при получении данных';uk='Помилка при отриманні даних'");
		КонецЕсли;
		Результат = СтруктураИнформации;
	Иначе
		Результат = РезультатЧтения;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

//Процедура заполнения списка регионов для реквизита "СписокРегионов"
//Возвращает список значений, если НомерРегиона = Неопределено
//Если передать номер региона, то возвращает название региона (Представление из списка значений)
//
Функция ВернутьЗначениеРегиона(НомерРегиона = Неопределено) Экспорт
	
	СписокРегионов = Новый СписокЗначений;
	СписокРегионов.Добавить(0,"Не вибрано");
	СписокРегионов.Добавить(1,"Автономна Республіка Крим");
	СписокРегионов.Добавить(2,"Вінницька обл");
	СписокРегионов.Добавить(3,"Волинська обл");
	СписокРегионов.Добавить(4,"Дніпропетровська обл");
	СписокРегионов.Добавить(5,"Донецька обл");
	СписокРегионов.Добавить(6,"Житомирська обл");
	СписокРегионов.Добавить(7,"Закарпатська обл");
	СписокРегионов.Добавить(8,"Запорізька обл");
	СписокРегионов.Добавить(9,"Івано-Франківська обл");
	СписокРегионов.Добавить(10,"Київська обл");
	СписокРегионов.Добавить(11,"Кіровоградська обл");
	СписокРегионов.Добавить(12,"Луганська обл");
	СписокРегионов.Добавить(13,"Львівська обл");
	СписокРегионов.Добавить(14,"Миколаївська обл");
	СписокРегионов.Добавить(15,"Одеська обл");
	СписокРегионов.Добавить(16,"Полтавська обл");
	СписокРегионов.Добавить(17,"Рівненська обл");
	СписокРегионов.Добавить(18,"Сумська обл");
	СписокРегионов.Добавить(19,"Тернопільська обл");
	СписокРегионов.Добавить(20,"Харківська обл");
	СписокРегионов.Добавить(21,"Херсонська обл");
	СписокРегионов.Добавить(22,"Хмельницька обл");
	СписокРегионов.Добавить(23,"Черкаська обл");
	СписокРегионов.Добавить(24,"Чернівецька обл");
	СписокРегионов.Добавить(25,"Чернігівська обл");
	Если НомерРегиона = Неопределено Тогда
		Возврат СписокРегионов;
	Иначе
		Если НомерРегиона = 26 Тогда
			Возврат "м. Київ";	
		ИначеЕсли НомерРегиона = 27 Тогда
			Возврат "м. Севатополь";	
		Иначе	
			Попытка
				Возврат СписокРегионов.Получить(НомерРегиона).Представление;
			Исключение
				Возврат "";
			КонецПопытки
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ПолучитьИнформациюПоКонтрагенту(СтруктураИнформацииДляЗаполнения) Экспорт
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("СтрокаПоиска", СтруктураИнформацииДляЗаполнения.СтрокаПоиска);
	ПараметрыПроцедуры.Вставить("Контрагент"  , СтруктураИнформацииДляЗаполнения.Контрагент);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(СтруктураИнформацииДляЗаполнения.ИдентификаторФормы);
	ПараметрыВыполнения.АдресРезультата = СтруктураИнформацииДляЗаполнения.АдресРезультата;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru='Заполнение карточки контрагента из Опендатабот. Ризики';uk='Заповнення карточки контрагнета з Опендатабот. Ризики'");
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьСтруктуруИнформации",
	ПараметрыПроцедуры,
	ПараметрыВыполнения);
	
КонецПроцедуры

