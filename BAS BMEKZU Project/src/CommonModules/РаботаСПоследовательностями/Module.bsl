////////////////////////////////////////////////////////////////////////////////
// Работа с последовательностями
// 
////////////////////////////////////////////////////////////////////////////////


#Область ПрограммныйИнтерфейс

// Устанавливает блокировку на набор записи последовательности по регистратору.
//
// Параметры:
//	Регистратор - ДокументСсылка.*
//	Отказ 		- Булево
//	Заголовок	- Строка, текст для сообщения
//
Процедура УстановитьБлокировкуНабораЗаписейПоследовательностиПоРегистратору(Регистратор, Отказ = Ложь, Заголовок = "") Экспорт

	ПараметрыБлокировки = Новый Структура();
	ПараметрыБлокировки.Вставить("ТипТаблицы", "Последовательность.ДокументыОрганизаций");
	ПараметрыБлокировки.Вставить("ИмяТаблицы", "НаборЗаписей");
	
	ЗначенияБлокировки = Новый Структура();
	ЗначенияБлокировки.Вставить("Регистратор", Регистратор);
	
	ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(
		ПараметрыБлокировки, ЗначенияБлокировки, , Отказ, Заголовок);

КонецПроцедуры

// Устанавливает блокировку последовательности по Организации.
//
// Параметры:
//	Организация - СправочникСсылка.Организация
//	Отказ 		- Булево
//	Заголовок	- Строка, текст для сообщения
//
Процедура УстановитьБлокировкуПоследовательностиПоОрганизации(Организация, Отказ = Ложь, Заголовок = "") Экспорт

	ПараметрыБлокировки = Новый Структура();
	ПараметрыБлокировки.Вставить("ТипТаблицы", "Последовательность");
	ПараметрыБлокировки.Вставить("ИмяТаблицы", "ДокументыОрганизаций");
	
	ЗначенияБлокировки = Новый Структура();
	ЗначенияБлокировки.Вставить("Организация", Организация);
	
	ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(
		ПараметрыБлокировки, ЗначенияБлокировки, , Отказ, Заголовок);

КонецПроцедуры

// Функция возвращает момент времени, с которого последовательность была нарушена в указанном периоде.
// 
// Параметры:
// 	Организация 	- СправочникСсылка.Организации, список организаций
//	ДатаНачала		- Дата, с которой необходимо анализировать (включительно).
//						Если указана пустая дата, то без ограничения.
//	ДатаОкончания	- Дата, до которого необходимо анализировать (включительно).
//						Если указана пустая дата, то без ограничения.
//
// Возвращаемое значение:
//	МоментВремени, с которого последовательность нарушена
//		или Неопределено, если нарушения последовательности не обнаружено
//
Функция МоментНарушенияПоследовательности(Организация, ДатаНачала = '0001-01-01', ДатаОкончания = '0001-01-01') Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаПоследовательности.Период КАК Период,
	|	ТаблицаПоследовательности.Регистратор КАК Регистратор
	|ИЗ
	|	Последовательность.ДокументыОрганизаций КАК ТаблицаПоследовательности
	|ГДЕ
	|	ТаблицаПоследовательности.Организация В(&Организация)
	|	И ТаблицаПоследовательности.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ИсключенИзПоследовательности))
	|	И &УсловиеПоПериоду
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор";
	
	ТекстУсловиеПоПериоду = "";
	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		ТекстУсловиеПоПериоду = "ТаблицаПоследовательности.Период МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	ИначеЕсли ЗначениеЗаполнено(ДатаНачала) Тогда
		ТекстУсловиеПоПериоду = "ТаблицаПоследовательности.Период >= &ДатаНачала";
		
	ИначеЕсли ЗначениеЗаполнено(ДатаОкончания) Тогда
		ТекстУсловиеПоПериоду = "ТаблицаПоследовательности.Период <= &ДатаОкончания";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстУсловиеПоПериоду) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоПериоду", ТекстУсловиеПоПериоду);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеПоПериоду", "");
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Новый МоментВремени(Выборка.Период, Выборка.Регистратор);
	Иначе
		Результат = Неопределено;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция возвращает более поздний из моментов времени:
//		- когда была нарушена последовательность
//		- первое число следующего месяца, за период с момента нарушения последовательности и ДоДаты, 
//			который не отмечен в регистре сведений ИсключенныеИзПерепроведенияМесяцы.
// 
// Параметры:
// 	Организация - СправочникСсылка.Организации
//	ДоДаты 		- Дата, до которого необходимо анализировать (включительно)
//
// Возвращаемое значение:
//	МоментВремени, с которого последовательность нарушена
//		или Неопределено, если нарушения последовательности не обнаружено
//
Функция МоментНачалаПерепроведенияСУчетомИсключенныхМесяцев(Организация, ДоДаты) Экспорт

	// Если месяц был пропущен, то находим ближайщий следующий за ним,
	// который не является исключенным.

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДоДаты", ДоДаты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ИсключенныеИзПерепроведенияМесяцы.ПериодРегистрации) КАК ПериодРегистрации
	|ИЗ
	|	РегистрСведений.ИсключенныеИзПерепроведенияМесяцы КАК ИсключенныеИзПерепроведенияМесяцы
	|ГДЕ
	|	ИсключенныеИзПерепроведенияМесяцы.Организация = &Организация
	|	И ИсключенныеИзПерепроведенияМесяцы.ПериодРегистрации <= &ДоДаты";

	ДатаНачала = '0001-01-01';
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.ПериодРегистрации <> NULL Тогда
			// Начинаем с месяца, следующего за исключенным из перепроводимых.
			ДатаНачала = КонецМесяца(Выборка.ПериодРегистрации) + 1;
		КонецЕсли;
	КонецЕсли;

	Если ДатаНачала <= ДоДаты Тогда
		Результат = МоментНарушенияПоследовательности(Организация, ДатаНачала, ДоДаты);
	Иначе
		Результат = Неопределено;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Устанавливает состояние "Проведен в последовательности" для всех записей 
// последовательности за указанный период. 
//
// Параметры:
// 	Организация 	- СправочникСсылка.Организации, по которой меняется последовательность.
//	ДатаНачала 		- Дата начала периода. Если указана пустая дата, то самого начала последовательности.
// 	ДатаОкончания	- Дата окончания периода, за который необходимо установить состояние последовательности.
//
// Возвращаемое значение:
//	Момент времени, на который фактически была установлена последовательность.
//
Функция УстановитьПоследовательность(Организация, ДатаНачала, ДатаОкончания, Отказ = Ложь, Заголовок = "") Экспорт

	МоментСледующегоДокумента = Неопределено;
	
	// Для изменения состояний в последовательности блокируем последовательность
	// в целом по организации. 
	// Установка управляемой блокировки возможно только в рамках транзакции.
	// В случае возникновения ошибок отменяем транзакцию.
	
	НачатьТранзакцию();

	Попытка 

		УстановитьБлокировкуПоследовательностиПоОрганизации(Организация);

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", 	Организация);
		Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);

		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаПоследовательности.Регистратор
		|ИЗ
		|	Последовательность.ДокументыОрганизаций КАК ТаблицаПоследовательности
		|ГДЕ
		|	ТаблицаПоследовательности.Организация = &Организация
		|	И &УсловиеПериод
		|	И ТаблицаПоследовательности.СостояниеПроведения В (ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности), ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ИсключенИзПоследовательности))";
		
		ТекстУсловиеПериод = "";
		Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
			ТекстУсловиеПериод = "ТаблицаПоследовательности.Период МЕЖДУ &ДатаНачала И &ДатаОкончания";
		ИначеЕсли ЗначениеЗаполнено(ДатаНачала) Тогда
			ТекстУсловиеПериод = "ТаблицаПоследовательности.Период >= &ДатаНачала";
		ИначеЕсли ЗначениеЗаполнено(ДатаОкончания) Тогда
			ТекстУсловиеПериод = "ТаблицаПоследовательности.Период <= &ДатаОкончания";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстУсловиеПериод) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПериод", ТекстУсловиеПериод);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &УсловиеПериод", "");
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		НаборЗаписей = Последовательности.ДокументыОрганизаций.СоздатьНаборЗаписей();
		
		Пока Выборка.Следующий() Цикл
		
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			
			ВГраница = НаборЗаписей.Количество() - 1;
			
			Для Сч = 0 По ВГраница Цикл
				// Удаляем с конца набора
				Движение = НаборЗаписей[ВГраница - Сч];
				
				// У документа могут быть записи последовательности по нескольким организациям,
				// если у него ранее меняли реквизит Организация, поэтому обрабатываем
				// только записи по текущей организации.
				Если Движение.Организация = Организация Тогда
				
					Если Движение.СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ИсключенИзПоследовательности Тогда
						НаборЗаписей.Удалить(Движение);
					Иначе
						Движение.СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ПроведенВПоследовательности;
					КонецЕсли;
				
				КонецЕсли;
			
			КонецЦикла;
			
			НаборЗаписей.Записать();
		
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		
			// Следующий по очереди документ объявляем проведенным с нарушением, 
			// чтобы с него начать потом перепроведение.
			МоментСледующегоДокумента = МоментВремениПервогоДокументаВПоследовательности(Организация, ДатаОкончания + 1);
			
			Если МоментСледующегоДокумента <> Неопределено Тогда
			
				СброситьСостояниеПоследовательностиДокумента(
					МоментСледующегоДокумента.Ссылка, 
					МоментСледующегоДокумента.Дата,
					Организация);
				
			КонецЕсли;
		
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
	
		ТекстОшибки = ОписаниеОшибки();
		ОписаниеОшибки = ИнформацияОбОшибке();
	
		ОтменитьТранзакцию();
		
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
		ЗаписьЖурналаРегистрации(НСтр("ru='Операция не выполнена';uk='Операція не виконана'"), УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
		ВызватьИсключение ТекстОшибки;
	
	КонецПопытки;
		
	Возврат МоментСледующегоДокумента;
	
КонецФункции

// Устанавливает состояние для документа в последовательности в "Проведен с нарушением последовательности".
//
Процедура СброситьСостояниеПоследовательностиДокумента(Регистратор, Период, Организация) Экспорт

	НаборЗаписей = Последовательности.ДокументыОрганизаций.СоздатьНаборЗаписей();

	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Для Каждого Движение Из НаборЗаписей Цикл
			Если Движение.Организация = Организация Тогда
				Если Движение.СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ПроведенВПоследовательности Тогда
					Движение.СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Проверим, помечен ли документ на удаление или нет
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Регистратор, "ПометкаУдаления");
	
		Движение = НаборЗаписей.Добавить();
		Движение.Период 		= Период;
		Движение.Регистратор 	= Регистратор;
		Движение.Организация 	= Организация;
		Если РеквизитыДокумента.ПометкаУдаления Тогда
			Движение.СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ИсключенИзПоследовательности;
		Иначе
			Движение.СостояниеПроведения = Перечисления.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности;
		КонецЕсли;
	КонецЕсли;
	
	НаборЗаписей.Записать();

КонецПроцедуры

// Возвращает приблизительное количество документов, подлежащий перепроведению
// в указанном периоде по заданной организации.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация, по которой выполняется оценка
//	ДатаНачала - Дата+Время - начало периода для оценки количества документов
//	ДатаОкончания - Дата+Время - окончание периода
//	МоментНарушения - МоментВремени - момент нарушения последовательности или Неопределено.
//	
// Возвращаемое значение:
//	Число - оценка количества документов для перепроведения
//
Функция ОценкаКоличестваДокументовДляПерепроведения(Организация, ДатаНачала, ДатаОкончания, МоментНарушения) Экспорт

	// Определим приблизительное число документов, которые попадают в перепроведение.
	// Фактически число документов может быть больше, за счет того, что
	// могут быть документы, которые не отражаются в журнале операций.
	//
	// При этом счета-фактуры полученные перепроводятся в групповой обработке 
	// не самостоятельно, а при проведении подчиненного документа-основания.
	// Поэтому их исключаем из подсчета, чтобы не получалось 
	// количество документов по отчету группового перепроведения меньше, чем
	// в информационной строке формы закрытия месяца.
	
	МоментНарушенияСсылка = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
	Если МоментНарушения = Неопределено Тогда
		ДатаНач = ДатаНачала;
	Иначе
		ДатаНач = Макс(ДатаНачала, МоментНарушения.Дата);
		Если ЗначениеЗаполнено(МоментНарушения.Ссылка) Тогда
			МоментНарушенияСсылка = МоментНарушения.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("ДатаНач", 		ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", 		ДатаОкончания);
	Запрос.УстановитьПараметр("МоментНарушенияСсылка", 		МоментНарушенияСсылка);

	Если МоментНарушения = Неопределено Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ЖурналОпераций.Ссылка) КАК КоличествоДокументов
		|ИЗ
		|	ЖурналДокументов.ЖурналОпераций КАК ЖурналОпераций
		|ГДЕ
		|	ЖурналОпераций.Организация = &Организация
		|	И ЖурналОпераций.Проведен
		|	И ЖурналОпераций.Дата >= &ДатаНач
		|	И ЖурналОпераций.Дата <= &ДатаКон";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(Журнал.КоличествоДокументов) КАК КоличествоДокументов
		|ИЗ
		|	(ВЫБРАТЬ
		|		КОЛИЧЕСТВО(ЖурналОпераций.Ссылка) КАК КоличествоДокументов
		|	ИЗ
		|		ЖурналДокументов.ЖурналОпераций КАК ЖурналОпераций
		|	ГДЕ
		|		ЖурналОпераций.Организация = &Организация
		|		И ЖурналОпераций.Проведен
		|		И ЖурналОпераций.Дата > &ДатаНач
		|		И ЖурналОпераций.Дата <= &ДатаКон
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КОЛИЧЕСТВО(ЖурналОпераций.Ссылка)
		|	ИЗ
		|		ЖурналДокументов.ЖурналОпераций КАК ЖурналОпераций
		|	ГДЕ
		|		ЖурналОпераций.Организация = &Организация
		|		И ЖурналОпераций.Проведен
		|		И ЖурналОпераций.Дата = &ДатаНач
		|		И ЖурналОпераций.Ссылка >= &МоментНарушенияСсылка) КАК Журнал";
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();

	КоличествоДокументов = 0;

	Если Выборка.Следующий() Тогда
		КоличествоДокументов = ?(Выборка.КоличествоДокументов = NULL, 0, Выборка.КоличествоДокументов);
	КонецЕсли;

	// Округлим в меньшую сторону до "круглых" цифры, чтобы в тексте сообщения можно было написать "более".
	Если КоличествоДокументов > 100 Тогда
		КоличествоДокументов = Цел(КоличествоДокументов / 100) * 100;
	ИначеЕсли КоличествоДокументов > 10 Тогда
		КоличествоДокументов = Цел(КоличествоДокументов / 10) * 10;
	КонецЕсли;

	Возврат КоличествоДокументов;

КонецФункции

// Возвращает момент времени первого документа, который ближе всех находится
// к указанной дате (в будущее).
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация, по которой выполняется оценка
//	НачинаяСДаты - Дата+Время - дата, начиная с которой ищется документ
//	
// Возвращаемое значение:
//	Момент времени
//
Функция МоментВремениПервогоДокументаВПоследовательности(Организация, НачинаяСДаты) Экспорт

	// Находим первый документ, который лежит с указанной даты+время.
	// 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("НачинаяСДаты", 	НачинаяСДаты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаПоследовательности.Регистратор КАК Регистратор,
	|	ТаблицаПоследовательности.Период КАК Период,
	|	ИСТИНА КАК ЭтоДанныеПоследовательности
	|ИЗ
	|	Последовательность.ДокументыОрганизаций КАК ТаблицаПоследовательности
	|ГДЕ
	|	ТаблицаПоследовательности.Организация = &Организация
	|	И ТаблицаПоследовательности.Период >= &НачинаяСДаты
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор";
	
		
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ВводНачальныхОстатков")
			И НЕ Выборка.ЭтоДанныеПоследовательности Тогда
			Результат = Новый МоментВремени(КонецМесяца(Выборка.Период) + 1, Выборка.Регистратор);
		Иначе
			Результат = Новый МоментВремени(Выборка.Период, Выборка.Регистратор);
		КонецЕсли;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы



































































#КонецОбласти

#КонецОбласти















