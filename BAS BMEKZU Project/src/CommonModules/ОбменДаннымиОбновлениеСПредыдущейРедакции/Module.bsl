
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ЗаменитьСсылкуВУдалитьСоответствияОбъектовИнформационныхБаз(СтарыйОбъект, НовыйОбъект) Экспорт
	
	Если НЕ ЗначениеЗаполнено(НовыйОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	СоответствияОбъектовНовые  = РегистрыСведений.УдалитьСоответствияОбъектовИнформационныхБаз.СоздатьНаборЗаписей();
	СоответствияОбъектовНовые.Отбор.УникальныйИдентификаторИсточника.Установить(НовыйОбъект);
	СоответствияОбъектовНовые.Прочитать();
	Если СоответствияОбъектовНовые.Количество() = 0 Тогда
		
		СоответствияОбъектовСтарые = РегистрыСведений.УдалитьСоответствияОбъектовИнформационныхБаз.СоздатьНаборЗаписей();
		СоответствияОбъектовСтарые.Отбор.УникальныйИдентификаторИсточника.Установить(СтарыйОбъект);
		СоответствияОбъектовСтарые.Прочитать();
		Если СоответствияОбъектовСтарые.Количество()>0 Тогда
		
			СоответствияОбъектовНовые.Загрузить(СоответствияОбъектовСтарые.Выгрузить());
			Для Каждого НастройкаУзла Из СоответствияОбъектовНовые Цикл
				НастройкаУзла.УникальныйИдентификаторИсточника = НовыйОбъект;
				НастройкаУзла.УникальныйИдентификаторИсточникаСтрокой = Строка(НовыйОбъект.УникальныйИдентификатор());
				НастройкаУзла.ТипИсточника = Строка(ТипЗнч(НовыйОбъект));
			КонецЦикла;
			
			СоответствияОбъектовСтарые.Очистить();
			СоответствияОбъектовСтарые.Записать();
			СоответствияОбъектовНовые.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры



Процедура ПеренестиНастройкиОбменаДанными(СтарыйУзел, НовыйУзел) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтарыйУзел", СтарыйУзел);
	Запрос.УстановитьПараметр("НовыйУзел", НовыйУзел);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьНастройкиОбменаДанными.*
	|ИЗ
	|	Справочник.УдалитьНастройкиОбменаДанными КАК УдалитьНастройкиОбменаДанными
	|ГДЕ
	|	УдалитьНастройкиОбменаДанными.УзелИнформационнойБазы = &СтарыйУзел
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиТранспортаОбменаДанными.Корреспондент
	|ИЗ
	|	РегистрСведений.НастройкиТранспортаОбменаДанными КАК НастройкиТранспортаОбменаДанными
	|ГДЕ
	|	НастройкиТранспортаОбменаДанными.Корреспондент = &НовыйУзел";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	СтарыйНастройки = РезультатЗапроса[0].Выгрузить();
	НовыеНастройки = РезультатЗапроса[1].Выгрузить();
	Если СтарыйНастройки.Количество() = 0 ИЛИ
		НовыеНастройки.Количество() > 0 Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	Строка = СтарыйНастройки[0];
	МенеджерЗаписи = РегистрыСведений.НастройкиТранспортаОбменаДанными.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Корреспондент = НовыйУзел;
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.Узел = НовыйУзел;
	
	МенеджерЗаписи.COMАутентификацияОперационнойСистемы = Строка.АутентификацияWindowsИнформационнойБазыДляПодключения;
	МенеджерЗаписи.COMВариантРаботыИнформационнойБазы = ?(Строка.ТипИнформационнойБазыДляПодключения, 0, 1); // Истина - файловая(0), Ложь - клиент-серверная(1) 
	МенеджерЗаписи.COMИмяИнформационнойБазыНаСервере1СПредприятия = Строка.ИмяИнформационнойБазыНаСервереДляПодключения;
	МенеджерЗаписи.COMИмяПользователя = Строка.ПользовательИнформационнойБазыДляПодключения;
	МенеджерЗаписи.COMИмяСервера1СПредприятия = Строка.ИмяСервераИнформационнойБазыДляПодключения;
	МенеджерЗаписи.COMКаталогИнформационнойБазы = Строка.КаталогИнформационнойБазыДляПодключения;
	
	МенеджерЗаписи.EMAILМаксимальныйДопустимыйРазмерСообщения = Строка.МаксимальныйРазмерОтправляемогоПакетаЧерезПочту;
	МенеджерЗаписи.EMAILСжиматьФайлИсходящегоСообщения = Строка.ВыполнятьАрхивациюФайловОбмена;
	МенеджерЗаписи.EMAILУчетнаяЗапись = Строка.УчетнаяЗаписьПриемаОтправкиСообщений;
	
	МенеджерЗаписи.FILEКаталогОбменаИнформацией = Строка.КаталогОбменаИнформацией;
	МенеджерЗаписи.FILEСжиматьФайлИсходящегоСообщения = Строка.ВыполнятьАрхивациюФайловОбмена;
	
	МенеджерЗаписи.FTPСжиматьФайлИсходящегоСообщения = Строка.ВыполнятьАрхивациюФайловОбмена;
	МенеджерЗаписи.FTPСоединениеМаксимальныйДопустимыйРазмерСообщения = Строка.МаксимальныйРазмерОтправляемогоПолучаемогоПакетаЧерезFTP;
	МенеджерЗаписи.FTPСоединениеПассивноеСоединение = Строка.ПассивноеFTPСоединение;
	МенеджерЗаписи.FTPСоединениеПользователь = Строка.ПользовательFTPСоединения;
	МенеджерЗаписи.FTPСоединениеПорт = Строка.ПортFTPСоединения;
	МенеджерЗаписи.FTPСоединениеПуть = Строка.FTPАдресОбмена;
	
	Если ЗначениеЗаполнено(Строка.УчетнаяЗаписьПриемаОтправкиСообщений) Тогда
		МенеджерЗаписи.ВидТранспортаСообщенийОбменаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL;
	ИначеЕсли Строка.ТипНастройки = Перечисления.УдалитьТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
		МенеджерЗаписи.ВидТранспортаСообщенийОбменаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.COM;
	ИначеЕсли Строка.ТипНастройки = Перечисления.УдалитьТипыАвтоматическогоОбменаДанными.ОбменЧерезFTPРесурс Тогда
		МенеджерЗаписи.ВидТранспортаСообщенийОбменаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FTP;
	ИначеЕсли Строка.ТипНастройки = Перечисления.УдалитьТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс Тогда
		МенеджерЗаписи.ВидТранспортаСообщенийОбменаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
	КонецЕсли;
	
	МенеджерЗаписи.Записать();
	
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(НовыйУзел, Строка.ПарольИнформационнойБазыДляПодключения, "COMПарольПользователя");
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(НовыйУзел, Строка.ПарольFTPСоединения, "FTPСоединениеПароль");
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(НовыйУзел, Строка.ПарольНаОтправку, "ПарольАрхиваСообщенияОбмен");
	
	ТекстПравилПриемника = Строка.ПравилаОбмена.Получить();
	Если ТипЗнч(ТекстПравилПриемника) = Тип("Строка") И СтрДлина(ТекстПравилПриемника) < 1000 
		И НовыйУзел <> ПланыОбмена.ГлавныйУзел() Тогда 
		// одностронний обмен
		НовыйУзелОбъект = НовыйУзел.ПолучитьОбъект();
		НовыйУзелОбъект.РежимВыгрузкиОбъектов = Перечисления.РежимыВыгрузкиОбъектовОбмена.НеВыгружать;
		НовыйУзелОбъект.Записать();
	КонецЕсли;
	
	НастройкаОбмена = Строка.Ссылка.ПолучитьОбъект();
	НастройкаОбмена.УстановитьПометкуУдаления(Истина);
	
	// Перенос сценариев синхронизации данных
	ПеренестиНастройкиВыполненияОбменаДанными(Строка.Ссылка, НовыйУзел, МенеджерЗаписи.ВидТранспортаСообщенийОбменаПоУмолчанию);
	
КонецПроцедуры

Процедура ВыполнитьОбменДаннымиДляНастройкиАвтоматическогоОбменаДанными(КодНастройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ



Процедура ПеренестиНастройкиВыполненияОбменаДанными(СтараяНастройкаОбмена, НовыйУзел, ВидТранспортаСообщенийОбмена)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтараяНастройкаОбмена", СтараяНастройкаОбмена);
	Запрос.УстановитьПараметр("НовыйУзел", 			   НовыйУзел);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиОбмена.Ссылка,
	|	НастройкиОбмена.НастройкаОбмена,
	|	НастройкиОбмена.ВыполняемоеДействие,
	|	НастройкиОбмена.Ссылка.Наименование,
	|	НастройкиОбмена.Ссылка.ИспользоватьРегламентныеЗадания,
	|	НастройкиОбмена.Ссылка.РегламентноеЗадание,
	|	НастройкиОбмена.Ссылка.КоличествоЭлементовВТранзакцииНаЗагрузкуДанных,
	|	НастройкиОбмена.Ссылка.КоличествоЭлементовВТранзакцииНаВыгрузкуДанных,
	|	НастройкиОбмена.Ссылка.Комментарий
	|ИЗ
	|	Справочник.УдалитьНастройкиВыполненияОбмена.НастройкиОбмена КАК НастройкиОбмена
	|ГДЕ
	|	НастройкиОбмена.НастройкаОбмена = &СтараяНастройкаОбмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СценарииОбменовДаннымиНастройкиОбмена.Ссылка,
	|	СценарииОбменовДаннымиНастройкиОбмена.УзелИнформационнойБазы
	|ИЗ
	|	Справочник.СценарииОбменовДанными.НастройкиОбмена КАК СценарииОбменовДаннымиНастройкиОбмена
	|ГДЕ
	|	СценарииОбменовДаннымиНастройкиОбмена.УзелИнформационнойБазы = &НовыйУзел";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	СтарыеНастройкиВыполненияОбмена  	= РезультатЗапроса[0].Выгрузить();
	НовыеНастройкиСинхронизацииДанных 	= РезультатЗапроса[1].Выгрузить();
	
	Если СтарыеНастройкиВыполненияОбмена.Количество() = 0 
		ИЛИ НовыеНастройкиСинхронизацииДанных.Количество() > 0 Тогда 
		Возврат;
	КонецЕсли;
	
	СтарыеНастройки = СтарыеНастройкиВыполненияОбмена[0];
	
	НовыйСценарийОбменаДанными = Справочники.СценарииОбменовДанными.СоздатьЭлемент();
	НовыйСценарийОбменаДанными.Наименование 					= СтарыеНастройки.Наименование;
	НовыйСценарийОбменаДанными.ИспользоватьРегламентноеЗадание 	= СтарыеНастройки.ИспользоватьРегламентныеЗадания;
	НовыйСценарийОбменаДанными.Комментарий 					  	= СтарыеНастройки.Комментарий;
	
	СтароеРегламентноеЗадание = ОбменДаннымиВызовСервера.НайтиРегламентноеЗаданиеПоПараметру(СтарыеНастройки.РегламентноеЗадание);
	Если СтароеРегламентноеЗадание <> Неопределено Тогда
		Отказ = Ложь;
		Справочники.СценарииОбменовДанными.ОбновитьДанныеРегламентногоЗадания(Отказ, СтароеРегламентноеЗадание.Расписание, НовыйСценарийОбменаДанными);
	КонецЕсли;
	
	Для Каждого СтрокаСтарыхНастроекОбмена ИЗ СтарыеНастройкиВыполненияОбмена Цикл
		
		Если СтрокаСтарыхНастроекОбмена.ВыполняемоеДействие = Перечисления.УдалитьДействиеПриОбмене.ОтложенныеДвижения 
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаСтарыхНастроекОбмена.ВыполняемоеДействие) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяНастройкаОбмена = НовыйСценарийОбменаДанными.НастройкиОбмена.Добавить();
		
		НоваяНастройкаОбмена.УзелИнформационнойБазы = НовыйУзел;  
		НоваяНастройкаОбмена.ВидТранспортаОбмена    = ВидТранспортаСообщенийОбмена;
		
		Если СтрокаСтарыхНастроекОбмена.ВыполняемоеДействие = Перечисления.УдалитьДействиеПриОбмене.ЗагрузкаДанных Тогда
			НоваяНастройкаОбмена.ВыполняемоеДействие 			= Перечисления.ДействияПриОбмене.ЗагрузкаДанных;
		ИначеЕсли СтрокаСтарыхНастроекОбмена.ВыполняемоеДействие = Перечисления.УдалитьДействиеПриОбмене.ВыгрузкаДанных Тогда
			НоваяНастройкаОбмена.ВыполняемоеДействие 			= Перечисления.ДействияПриОбмене.ВыгрузкаДанных;
		КонецЕсли;
		
	КонецЦикла;
	
	НовыйСценарийОбменаДанными.Записать();
	
	НастройкаВыполненияОбмена = СтарыеНастройки.Ссылка.ПолучитьОбъект();
	НастройкаВыполненияОбмена.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

