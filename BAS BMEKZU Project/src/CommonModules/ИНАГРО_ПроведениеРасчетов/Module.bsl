
 // Функция возвращает дату изменения Порядка №100 расчета средней
//
Функция ДатаИзмененияПорядка100() Экспорт
	
	Возврат Дата(2020,12,12);
	
КонецФункции

// Получает данные для расчета ресурсов записей регистра расчета
//
//	ИмяРегистра - строка, имя регистра расчета
//	КатегорияРасчета - ссылка на значение перечисленич КатегорииРасчетов
//	НеобходимыеДанные - Структура с элементами 
//			База,
//			НормаВремени,
//			ОтработаноВремени,
//			...
//	Регистратор - ссылка на документ
//	Организация - ссылка на организацию по которой проводится Регистратор
//	ПериодРегистрации
//	Перерасчет - булево - признак того, что получаем данные для случая перерасчета
//	Физлица - массив ссылок на физлиц - выбранные для перерасчета физлица, или массив содержащий ссылку
//			  на физлицо по которому производится расчет (расчет по одному работнику из документа).	
//
// Возвращает выборку результата запроса
Функция ПолучитьДанныеДляРасчета(ИмяРегистра,
									КатегорияРасчета,
									НеобходимыеДанные,
									Регистратор,
									Организация,
									ПериодРегистрации,
									Перерасчет = Ложь,
									Сотрудники = Неопределено,
									КомментироватьРасчет = Ложь, ФормаКомментариев = НеОпределено) Экспорт

	Если НеобходимыеДанные.НеобходимыИндексыИнфляции Тогда
		// индексы инфляции
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
		Запрос.УстановитьПараметр("парамДатаИзмененияПорогаИндексации", ДатаИзмененияПорогаИндексации());
		
		Запрос.Текст = "
		|ВЫБРАТЬ 
		|	ИндексыИнфляции.Период			КАК Период, 
		|	ИндексыИнфляции.Индекс			КАК ИндексИнфляции,
		|   ВЫБОР КОГДА ИндексыИнфляции.Период >= &парамДатаИзмененияПорогаИндексации 
		|    ТОГДА 1.03
		|    ИНАЧЕ 1.01
		|   КОНЕЦ КАК ПорогИндексации
		| 
		|	ИЗ РегистрСведений.ИндексИнфляции КАК ИндексыИнфляции
		| 
		|ГДЕ ИндексыИнфляции.Период <= &парамПериодРегистрации
		|УПОРЯДОЧИТЬ ПО 
		|	ИндексыИнфляции.Период ВОЗР

		|";
		
		тбИндексыИнфляции = Запрос.Выполнить().Выгрузить();
		НеобходимыеДанные.Вставить("тбИндексыИнфляции", тбИндексыИнфляции);
		
		
		// Проверим правильно ли заполнены ли все социальные группы у базовых начислений индексации
		// иначе могут быть проблемы в расчете индексации.
		Запрос.Текст = "
		|ВЫБРАТЬ 
		|	ИндексацияБазовые.ВидРасчета,
		|	ИндексацияБазовые.ВидРасчета.СоциальнаяГруппа
		|ИЗ  ПланВидовРасчета.ИНАГРО_Начисления.БазовыеВидыРасчета КАК ИндексацияБазовые
		|ГДЕ	ИндексацияБазовые.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Начисления.ИндексацияЗарплаты)
		|	И	ИндексацияБазовые.ВидРасчета.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ПустаяСсылка)		
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество()>0 Тогда
			Индексация = ПланыВидовРасчета.ИНАГРО_Начисления.ИндексацияЗарплаты;
		КонецЕсли;				

	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////
	// Вложенные запросы
	// для получения данных расчета
	// Реализованы как временные таблицы.
	Если Истина Тогда 
		
		// НакопленныеДанные
		Если Истина Тогда 
			// Уже начислено по другим регистраторам в данном расчетном периоде и за всю историю
			// применяется для расчета удержаний "нарастающим итогом за месяц"
			//	Поля:
			//		Сотрудник
			//		ДокументОснование
			//		ВидРасчета
			//		УжеНачисленоВТекущемПериоде
			//		УжеНачисленоЗаВсюИсторию
			//	Описание:
			//		суммирует результаты по видам расчета и документам-основаниям.
			//
			НакопленныеДанныеТекст = " 
			|ВЫБРАТЬ
			|	НакопленныеДанные.Сотрудник,
			|	НакопленныеДанные.ВидРасчета,
			|	НакопленныеДанные.ДокументОснование,
			|";
			НакопленныеДанныеТекст = НакопленныеДанныеТекст + " 
			|	СУММА(ВЫБОР КОГДА НакопленныеДанные.ПериодРегистрации  = Основной.ПериодРегистрации ТОГДА НакопленныеДанные.Результат ИНАЧЕ 0 КОНЕЦ) КАК УжеНачисленоВТекущемПериоде,
			|	СУММА(ВЫБОР КОГДА НакопленныеДанные.ПериодРегистрации <= Основной.ПериодРегистрации ТОГДА НакопленныеДанные.Результат ИНАЧЕ 0 КОНЕЦ) КАК УжеНачисленоЗаВсюИсторию
			|";
			НакопленныеДанныеТекст = НакопленныеДанныеТекст + " 
			|ПОМЕСТИТЬ ВТНакопленныеДанные
			|ИЗ
			|	РегистрРасчета.ИНАГРО_Удержания КАК Основной
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Удержания КАК НакопленныеДанные
			|		ПО 
			|			НакопленныеДанные.Сотрудник = Основной.Сотрудник
			|			И НакопленныеДанные.ВидРасчета = Основной.ВидРасчета
			|			И НакопленныеДанные.ПериодРегистрации <= Основной.ПериодРегистрации
			|			И НакопленныеДанные.Организация = Основной.Организация
			|			И НакопленныеДанные.ДокументОснование = Основной.ДокументОснование
			|			И НакопленныеДанные.Регистратор <> Основной.Регистратор
			|
			|ГДЕ
			|	Основной.Регистратор = &парамРегистратор И Основной.Авторасчет
			|
			|СГРУППИРОВАТЬ ПО
			|	НакопленныеДанные.Сотрудник,
			|	НакопленныеДанные.ВидРасчета,
			|	НакопленныеДанные.ДокументОснование
			|ИНДЕКСИРОВАТЬ ПО 
			|	НакопленныеДанные.Сотрудник,
			|	НакопленныеДанные.ВидРасчета,
			|	НакопленныеДанные.ДокументОснование";
		КонецЕсли; 
		
		// СдельныйЗаработокОрганизацииТекст
		Если Истина Тогда
			//	Поля:
			//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
			//		РазмерЗаработка - размер сдельного заработка
			//	Описание:
			//		получает размер сдельного заработка для начислений со способом расчета "Сдельный заработок".
			//
			СдельныйЗаработокОрганизацииТекст =
			"ВЫБРАТЬ
			|	НесгруппированныеДанные.ОсновнойНомерСтроки КАК ОсновнойНомерСтроки,
			|	СУММА(НесгруппированныеДанные.СуммаЗаработка) КАК СуммаЗаработка,
			|	МАКСИМУМ(НесгруппированныеДанные.ОшибкаВводаФактическойВыработки) КАК ОшибкаВводаФактическойВыработки
			|ПОМЕСТИТЬ ВТСдельныйЗаработокОрганизации
			|ИЗ
			|	(ВЫБРАТЬ
			|		Начисления.НомерСтроки КАК ОсновнойНомерСтроки,
			|		ФактическаяВыработка.Выработка КАК СуммаЗаработка,
			|		ЛОЖЬ КАК ОшибкаВводаФактическойВыработки
			|	ИЗ
			|		РегистрРасчета.ИНАГРО_Начисления.ФактическийПериодДействия(
			|				Регистратор = &парамРегистратор
			|					И Авторасчет
			|					) КАК Начисления
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботниковОрганизаций КАК ФактическаяВыработка
			|			ПО Начисления.Назначение = ФактическаяВыработка.Сотрудник
			|				И (ФактическаяВыработка.Период МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
			|				И (ФактическаяВыработка.СпособВводаДанных В (ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ПоДням), ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ЗаДень)))
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Начисления.НомерСтроки,
			|		ФактическаяВыработка.Выработка,
			|		ВЫБОР
			|			КОГДА ПроверкаКоличестваЗаписей.Сотрудник ЕСТЬ НЕ NULL 
			|					И ФактическаяВыработка.Выработка ЕСТЬ НЕ NULL 
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	ИЗ
			|		РегистрРасчета.ИНАГРО_Начисления КАК Начисления
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботниковОрганизаций КАК ФактическаяВыработка
			|			ПО Начисления.Назначение = ФактическаяВыработка.Сотрудник
			|				И ФактическаяВыработка.Период = Начисления.ПериодДействия
			|				И (ФактическаяВыработка.СпособВводаДанных В (ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ВЦеломЗаПериод)))
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления КАК ПроверкаКоличестваЗаписей
			|			ПО Начисления.Назначение = ПроверкаКоличестваЗаписей.Назначение
			|				И Начисления.ПериодДействия = ПроверкаКоличестваЗаписей.ПериодДействия
			|				И Начисления.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ПроверкаКоличестваЗаписей.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени
			|				И Начисления.Организация = ПроверкаКоличестваЗаписей.Организация
			|				И (Начисления.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы))
			|				И (ПроверкаКоличестваЗаписей.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы))
			|				И ((НЕ(Начисления.Регистратор = ПроверкаКоличестваЗаписей.Регистратор
			|						И Начисления.НомерСтроки = ПроверкаКоличестваЗаписей.НомерСтроки)))
			|	ГДЕ
			|		Начисления.Регистратор = &парамРегистратор
			|		И Начисления.Авторасчет
			|		) КАК НесгруппированныеДанные
			|
			|СГРУППИРОВАТЬ ПО
			|	НесгруппированныеДанные.ОсновнойНомерСтроки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ОсновнойНомерСтроки";
		КонецЕсли;
		
		// СдельныйЗаработокКомпанииТекст
		Если Истина Тогда
			//	Поля:
			//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
			//		РазмерЗаработка - размер сдельного заработка
			//	Описание:
			//		получает размер сдельного заработка для начислений со способом расчета "Сдельный заработок".
			//
			СдельныйЗаработокКомпанииТекст =
			"ВЫБРАТЬ
			|	НесгруппированныеДанные.ОсновнойНомерСтроки КАК ОсновнойНомерСтроки,
			|	СУММА(НесгруппированныеДанные.СуммаЗаработка) КАК СуммаЗаработка,
			|	МАКСИМУМ(НесгруппированныеДанные.ОшибкаВводаФактическойВыработки) КАК ОшибкаВводаФактическойВыработки
			|ПОМЕСТИТЬ ВТСдельныйЗаработокКомпании
			|ИЗ
			|	(ВЫБРАТЬ
			|		Начисления.НомерСтроки КАК ОсновнойНомерСтроки,
			|		ФактическаяВыработка.Выработка КАК СуммаЗаработка,
			|		ЛОЖЬ КАК ОшибкаВводаФактическойВыработки
			|	ИЗ
			|		РегистрРасчета.УправленческиеНачисления.ФактическийПериодДействия(
			|				Регистратор = &парамРегистратор
			|					И Авторасчет) КАК Начисления
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботников КАК ФактическаяВыработка
			|			ПО Начисления.ФизЛицо = ФактическаяВыработка.Физлицо
			|				И (ФактическаяВыработка.Период МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
			|				И (ФактическаяВыработка.СпособВводаДанных В (ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ПоДням), ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ЗаДень)))
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Начисления.НомерСтроки,
			|		ФактическаяВыработка.Выработка,
			|		ВЫБОР
			|			КОГДА ПроверкаКоличестваЗаписей.ФизЛицо ЕСТЬ НЕ NULL 
			|					И ФактическаяВыработка.Выработка ЕСТЬ НЕ NULL 
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	ИЗ
			|		РегистрРасчета.УправленческиеНачисления КАК Начисления
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботников КАК ФактическаяВыработка
			|			ПО Начисления.ФизЛицо = ФактическаяВыработка.Физлицо
			|				И (ФактическаяВыработка.Период = Начисления.ПериодДействия)
			|				И (ФактическаяВыработка.СпособВводаДанных = ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ВЦеломЗаПериод))
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.УправленческиеНачисления КАК ПроверкаКоличестваЗаписей
			|			ПО Начисления.ФизЛицо = ПроверкаКоличестваЗаписей.ФизЛицо
			|				И Начисления.ПериодДействия = ПроверкаКоличестваЗаписей.ПериодДействия
			|				И Начисления.ВидРасчета.ВидУчетаРабочегоВремени = ПроверкаКоличестваЗаписей.ВидРасчета.ВидУчетаРабочегоВремени
			|				И (Начисления.ВидРасчета.ЗачетОтработанногоВремени)
			|				И (ПроверкаКоличестваЗаписей.ВидРасчета.ЗачетОтработанногоВремени)
			|				И ((НЕ(Начисления.Регистратор = ПроверкаКоличестваЗаписей.Регистратор
			|						И Начисления.НомерСтроки = ПроверкаКоличестваЗаписей.НомерСтроки)))
			|	ГДЕ
			|		Начисления.Регистратор = &парамРегистратор
			|		И Начисления.Авторасчет) КАК НесгруппированныеДанные
			|
			|СГРУППИРОВАТЬ ПО
			|	НесгруппированныеДанные.ОсновнойНомерСтроки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ОсновнойНомерСтроки";

		КонецЕсли;
		
		// ВремяПоТабелю*
		Если Истина Тогда 
			//	Данные по отработанному времени и норме времени по методу "сплошной регистрации" в текущем периоде регистрации
			//	Поля 
			//		НомерСтроки
			//		ОтработаноДнейПоТабелю
			//		ОтработаноЧасовПоТабелю
			//		ОтработаноЧасовПоТабелюОтклонение.
			//
			//	Описание                       
			//	Суммируем отработанное время и норму времени в заданном периоде действия для каждой строки начисления
			//	из регистра РабочееВремяРаботниковОрганизаций. 
			ВремяПоТабелюТекст = 
			"ВЫБРАТЬ
			|	Основной.НомерСтроки КАК НомерСтроки,
			|	ИСТИНА КАК УчетПоТабелю,
			|	СУММА(ВЫБОР КОГДА Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ОтработанноеВремя.ВидИспользованияРабочегоВремени
			|				ТОГДА 
			|					ВЫБОР КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
			|							ТОГДА ОтработанноеВремя.Дней
			|						ИНАЧЕ ОтработанноеВремя.Часов
			|					КОНЕЦ
			|				ИНАЧЕ 0
			|			КОНЕЦ) КАК ОсновноеЗначениеПоТабелю,
			|	СУММА(ВЫБОР
			|			КОГДА Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ОтработанноеВремя.ВидИспользованияРабочегоВремени
			|				ТОГДА ОтработанноеВремя.Дней
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ОтработаноДнейПоТабелю,
			|	СУММА(ВЫБОР
			|			КОГДА Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ОтработанноеВремя.ВидИспользованияРабочегоВремени
			|				ТОГДА ОтработанноеВремя.Часов
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ОтработаноЧасовПоТабелю
			|ПОМЕСТИТЬ ВТВремяПоТабелю
			|
			|ИЗ РегистрРасчета.ИНАГРО_Начисления КАК Основной
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ИНАГРО_РабочееВремяРаботниковОрганизаций КАК ОтработанноеВремя
			|		ПО		Основной.Сотрудник = ОтработанноеВремя.Сотрудник
			|			И	Основной.Назначение = ОтработанноеВремя.Назначение
			|			И	(ОтработанноеВремя.Период МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
			|			И	((НЕ ОтработанноеВремя.ВЦеломЗаПериод))
			|
			|ГДЕ
			|	Основной.Регистратор = &парамРегистратор
			|	И Основной.Авторасчет
			|
			|СГРУППИРОВАТЬ ПО
			|	Основной.НомерСтроки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки";
		КонецЕсли; 
		
		// ВТВремяВведенноеВЦеломЗаПериод*
		Если Истина Тогда 
			ВремяВведенноеВЦеломЗаПериодТекст = 
			"ВЫБРАТЬ
			|	Основной.НомерСтроки КАК НомерСтроки,
			|	ИСТИНА КАК УчетПоТабелю,
			|	СУММА(ВЫБОР
			|			КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
			|				ТОГДА ОтработанноеВремя.Дней
			|			ИНАЧЕ ОтработанноеВремя.Часов
			|		КОНЕЦ) КАК ОсновноеЗначениеПоТабелю,
			|	СУММА(ВЫБОР
			|			КОГДА Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ОтработанноеВремя.ВидИспользованияРабочегоВремени
			|				ТОГДА ОтработанноеВремя.Дней
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ОтработаноДнейПоТабелю,
			|	СУММА(ВЫБОР
			|			КОГДА Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ОтработанноеВремя.ВидИспользованияРабочегоВремени
			|				ТОГДА ОтработанноеВремя.Часов
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК ОтработаноЧасовПоТабелю
			|ПОМЕСТИТЬ ВТВремяВведенноеВЦеломЗаПериод
			|ИЗ
			|	РегистрРасчета.ИНАГРО_Начисления КАК Основной
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ИНАГРО_РабочееВремяРаботниковОрганизаций КАК ОтработанноеВремя
			|		ПО Основной.Сотрудник = ОтработанноеВремя.Сотрудник
			|		    И Основной.Назначение = ОтработанноеВремя.Назначение
			|			И ОтработанноеВремя.Период = Основной.ПериодДействия
			|			И Основной.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ОтработанноеВремя.ВидИспользованияРабочегоВремени
			|			И (ОтработанноеВремя.ВЦеломЗаПериод)
			|ГДЕ
			|	Основной.Регистратор = &парамРегистратор
			|	И Основной.Авторасчет
			|
			|СГРУППИРОВАТЬ ПО
			|	Основной.НомерСтроки
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки";
		КонецЕсли; 
		
	КонецЕсли; 
	// Конец определения текстов вложенных запросов
	/////////////////////////////////////////////////////////////////////
	
	Запрос = Новый Запрос();
	НеобходимаБаза = НеобходимыеДанные.База;
	НеобходимГрафик = НеобходимыеДанные.НормаВремени ИЛИ НеобходимыеДанные.ОтработаноВремени ИЛИ НеобходимыеДанные.Календарные ИЛИ НеобходимыеДанные.НормаВремениЗаМесяц;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;

	// параметры запросов
	Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("парамПриход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
	Запрос.УстановитьПараметр("парамВалютаРегламентУчета"	, Константы.ВалютаРегламентированногоУчета.Получить());
	
	// категория начисления (удержания)
	Запрос.УстановитьПараметр("парамКатегорияНачисления", КатегорияРасчета);
	Запрос.УстановитьПараметр("ПоказательРасчетнаяБаза", Справочники.ИНАГРО_ПоказателиСхемМотивации.РасчетнаяБаза);
	
	Если ИмяРегистра = "ИНАГРО_Начисления" Или 
			ИмяРегистра = "ИНАГРО_Удержания" Тогда
		Условие = "ВидРасчета.КатегорияРасчета = &парамКатегорияНачисления И Регистратор = &парамРегистратор И Авторасчет";
		ВнешнееУсловие = "Основной.ВидРасчета.КатегорияРасчета = &парамКатегорияНачисления И Основной.Регистратор = &парамРегистратор";
	Иначе
		Условие = "Регистратор = &парамРегистратор И Авторасчет";
		ВнешнееУсловие = "Основной.Регистратор = &парамРегистратор И Основной.Сотрудник В (&парамСотрудники)";
	КонецЕсли;
	
	// для формирования ИТОГИ при комментировании расчета
	ПоляЗапросаМаксимум = Новый Массив;
	ПоляЗапросаСумма = Новый Массив;
	
	Если ИмяРегистра = "ИНАГРО_Начисления" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ 
		|Основной.Регистратор							КАК Регистратор,
		|Основной.НомерСтроки							КАК НомерСтроки,
		|Основной.ВидРасчета							КАК ВидРасчета,
		|Основной.ВидРасчета.Наименование				КАК ВидРасчетаНаименование,
		|Основной.ВидРасчета.ПериодДействияБазовый		КАК ВидРасчетаПериодДействияБазовый,
		|Основной.Сотрудник								КАК Сотрудник,
		|Основной.Сотрудник.Наименование				КАК СотрудникНаименование,
		|Основной.Назначение							КАК Назначение,
		|Основной.ПериодДействияНачало					КАК ПериодДействияНачало,
		|Основной.ПериодДействияКонец					КАК ПериодДействияКонец,
		|ЕСТЬNULL(Основной.ВидРасчета.ЗачетОтработанногоВремени, ЛОЖЬ)	КАК ЗачетОтработанногоВремени,
		|ЕСТЬNULL(Основной.ВидРасчета.ЗачетНормыВремени, ЛОЖЬ)			КАК ЗачетНормыВремени,
		|ЕСТЬNULL(Основной.ВидРасчета.УчитыватьКалендарные, ЛОЖЬ)			КАК УчитыватьКалендарные,
		|Основной.ВидУчетаВремени						КАК ВидУчетаВремени,
		|Основной.ВидРасчета.СпособРасчета				КАК СпособРасчета, 
		|Основной.ВидРасчета.ДоходНДФЛ					КАК ДоходНДФЛ,
		|Основной.НормаДнейЗаМесяц					КАК НормаДнейЗаМесяц, 
		|Основной.НормаЧасовЗаМесяц					КАК НормаЧасовЗаМесяц
		|";
		
		Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда
			
			// Получим максимальное число показателей			
			Если Истина Тогда
		
				ТекстКолВоПоказателей =
				"ВЫБРАТЬ
				|	МАКСИМУМ(ВложенныйЗапрос.НомерСтроки) КАК КолВоПоказателей
				|ИЗ
				|	РегистрРасчета."+ИмяРегистра+" КАК Основной
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	(ВЫБРАТЬ
				|		Показатели.Ссылка,
				|		Показатели.НомерСтроки КАК НомерСтроки
				|	ИЗ
				|		ПланВидовРасчета."+ИмяРегистра+".Показатели КАК Показатели) КАК ВложенныйЗапрос
				|	ПО ВложенныйЗапрос.Ссылка = Основной.ВидРасчета
				|ГДЕ "+ВнешнееУсловие;
				
				Запрос.Текст = ТекстКолВоПоказателей;
				ВыборкаКоличестваПоказателей = Запрос.Выполнить().Выбрать();
				ВыборкаКоличестваПоказателей.Следующий();
				КоличествоПоказателей = ?(ВыборкаКоличестваПоказателей.КолВоПоказателей=NULL,0,ВыборкаКоличестваПоказателей.КолВоПоказателей);		
			КонецЕсли;
			
			Если КоличествоПоказателей = 0 Тогда
				ТекстЗапроса = ТекстЗапроса + ",
				| 0 КАК КоличествоПоказателей,";
			Иначе
				ТекстЗапроса = ТекстЗапроса + ",
				| Показатели.КоличествоПоказателей КАК КоличествоПоказателей,";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			| Основной.ВидРасчета.ФормулаРасчета КАК ФормулаРасчета";
			Для СчПоказателей = 1 По КоличествоПоказателей Цикл
				ТекстЗапроса = ТекстЗапроса + ", 
				|Показатели.Показатель" + СчПоказателей+".Наименование Как Показатель" + СчПоказателей + "Наименование";
			КонецЦикла;			
			
			Показатель1Текст = ПолучитьТекстПоказателя(НеобходимыеДанные,ИмяРегистра,, КоличествоПоказателей, КомментироватьРасчет);
			Если КоличествоПоказателей > 6 Тогда
				// получим текст запроса для предопределенных показателей
				Показатель1ТекстПредопределенный = ПолучитьТекстПоказателя(НеобходимыеДанные,ИмяРегистра, Истина, КоличествоПоказателей, КомментироватьРасчет);
			КонецЕсли;
			
			Для СчПоказателей = 1 По КоличествоПоказателей Цикл
				Если СчПоказателей > 6 Тогда					
					ПоказательТекст = СтрЗаменить(Показатель1ТекстПредопределенный, "Показатель1", "Показатель"+СчПоказателей);
				Иначе
					ПоказательТекст = СтрЗаменить(Показатель1Текст, "Показатель1", "Показатель"+СчПоказателей);
				КонецЕсли;					
				ТекстЗапроса = ТекстЗапроса + ", 
			   	|" + ПоказательТекст + " Как Показатель"+СчПоказателей;
				
			КонецЦикла;
		КонецЕсли;
		
		// Базы	
		Если НеобходимаБаза Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|ВЫБОР КОГДА Основной.ВидРасчета.БазаПоНазначению ТОГДА БазаНазначения.РезультатБаза ИНАЧЕ База.РезультатБаза КОНЕЦ Как РезультатБаза";
			Если НеобходимыеДанные.ИндексацияЗарплаты ИЛИ НеобходимыеДанные.ДоплатаДоМЗП Тогда
				ТекстЗапроса = ТекстЗапроса + ",	
				|БазаНазначения.ОтработаноДнейБаза Как ОтработаноДнейБаза,
				|БазаНазначения.ОтработаноЧасовБаза Как ОтработаноЧасовБаза";
			КонецЕсли;	
		КонецЕсли;
		
		Если НеобходимГрафик Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	Основной.ГрафикРаботы.Наименование КАК ГрафикРаботыНаименование";
		КонецЕсли;

		Если НеобходимыеДанные.НормаВремени Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ВЫБОР	КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
			|				ТОГДА ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
			|			ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
			|	КОНЕЦ КАК НормаОплачиваемыхДней,
			|	ВЫБОР	КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
			|				ТОГДА ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
			|			ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
			|	КОНЕЦ КАК НормаОплачиваемыхЧасов
			|";
		КонецЕсли;
		
		Если НеобходимыеДанные.Календарные Тогда		
			ТекстЗапроса = ТекстЗапроса + ", 
			|	ЕСТЬNULL(ДанныеГрафика.ПроизводственныйКалендарьКалендарныеДниФактическийПериодДействия,0) КАК КалендарныеДни,
			|	ЕСТЬNULL(ДанныеГрафика.ПроизводственныйКалендарьКалендарныеДниСПраздникамиФактическийПериодДействия,0) КАК КалендарныеДниСПраздниками";
		КонецЕсли;
		
		Если НеобходимыеДанные.ОтработаноВремени Тогда
			
			Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ИНАГРО_КадровоеПеремещениеОрганизаций") ИЛИ
					ТипЗнч(Регистратор) = Тип("ДокументСсылка.ИНАГРО_ВводСведенийОПлановыхНачисленияхУдержаниях")Тогда

				// Не используем табеля. Вместо фактического периода действия - период действия.	
					
				ТекстЗапроса = ТекстЗапроса + ", 
				|	3 КАК СпособВводаВремени,
				|	ЕСТЬNULL(ДанныеГрафика.ОсновноеЗначениеПериодДействия, 0) КАК ОтработаноВремени,
				|	ЕСТЬNULL(ВЫБОР	КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
				|				ТОГДА ДанныеГрафика.ОсновноеЗначениеПериодДействия
				|			ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеПериодДействия
				|			КОНЕЦ, 0) КАК ОтработаноДней,
				|	ЕСТЬNULL(ВЫБОР	КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
				|				ТОГДА ДанныеГрафика.ДополнительноеЗначениеПериодДействия
				|			ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеПериодДействия
				|			КОНЕЦ, 0) КАК ОтработаноЧасов
				|";
				
			Иначе
				
				ТекстЗапроса = ТекстЗапроса + ", 
				|	ВЫБОР	КОГДА ВремяВведенноеВЦеломЗаПериод.УчетПоТабелю ТОГДА 1
				|			КОГДА ВремяПоТабелю.УчетПоТабелю ТОГДА 2
				|			ИНАЧЕ 3
				|	КОНЕЦ КАК СпособВводаВремени,
				|	ЕСТЬNULL(ВЫБОР	КОГДА ВремяВведенноеВЦеломЗаПериод.УчетПоТабелю
				|				ТОГДА ВремяВведенноеВЦеломЗаПериод.ОсновноеЗначениеПоТабелю
				|			КОГДА ВремяПоТабелю.УчетПоТабелю
				|				ТОГДА ВремяПоТабелю.ОсновноеЗначениеПоТабелю
				|			КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
				|				ТОГДА ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
				|			ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
				|	КОНЕЦ, 0) КАК ОтработаноВремени,
				|	ЕСТЬNULL(ВЫБОР	КОГДА ВремяВведенноеВЦеломЗаПериод.УчетПоТабелю
				|				ТОГДА ВремяВведенноеВЦеломЗаПериод.ОтработаноДнейПоТабелю
				|			КОГДА ВремяПоТабелю.УчетПоТабелю
				|				ТОГДА ВремяПоТабелю.ОтработаноДнейПоТабелю
				|			КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
				|				ТОГДА ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
				|			ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
				|	КОНЕЦ, 0) КАК ОтработаноДней,
				|	ЕСТЬNULL(ВЫБОР	КОГДА ВремяВведенноеВЦеломЗаПериод.УчетПоТабелю
				|				ТОГДА ВремяВведенноеВЦеломЗаПериод.ОтработаноЧасовПоТабелю
				|			КОГДА ВремяПоТабелю.УчетПоТабелю
				|				ТОГДА ВремяПоТабелю.ОтработаноЧасовПоТабелю
				|			КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
				|				ТОГДА ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
				|			ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
				|	КОНЕЦ, 0) КАК ОтработаноЧасов
				|";
			КонецЕсли;	
				
		КонецЕсли;
		
		// Допрасчеты
		Если НеобходимыеДанные.ВыслугаЛет Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|СтавкиВыслуги.Ставка 		КАК СтавкаВыслуги";
		
		КонецЕсли;
		
		Если НеобходимыеДанные.ИндексацияЗарплаты Тогда
			
			ТекстЗапроса = ТекстЗапроса + ", 
			|ДанныеПоИндексацииЗарплаты.ИндексацияНачало	Как ИндексацияЗарплатыНачало, 
			|ДанныеПоИндексацииЗарплаты.ИндексацияКонец		Как ИндексацияЗарплатыКонец,
			|
			|ДанныеПоИндексацииЗарплаты.БазаСоцГруппы1		КАК БазаИндексацияЗарплаты1, 
			|ДанныеПоИндексацииЗарплаты.БазаСоцГруппы2		КАК БазаИндексацияЗарплаты2, 
			|ДанныеПоИндексацииЗарплаты.БазаСоцГруппы3		КАК БазаИндексацияЗарплаты3, 
			|ДанныеПоИндексацииЗарплаты.БазаСоцГруппы4		КАК БазаИндексацияЗарплаты4,
			|
			|ДанныеПоИндексацииЗарплаты.ПорогСоцГруппы1	КАК ПорогИндексацияЗарплаты1,
			|ДанныеПоИндексацииЗарплаты.ПорогСоцГруппы2	КАК ПорогИндексацияЗарплаты2,
			|ДанныеПоИндексацииЗарплаты.ПорогСоцГруппы3	КАК ПорогИндексацияЗарплаты3,
			|ДанныеПоИндексацииЗарплаты.ПорогСоцГруппы4	КАК ПорогИндексацияЗарплаты4,
			|
			|ДанныеПоИндексацииЗарплаты.ЕстьСправкаОБазеИндексацииСовместителя КАК ЕстьСправкаОБазеИндексацииСовместителя,
			|ДанныеПоИндексацииЗарплаты.БазаИндексацииСовместителей	Как БазаИндексацииСовместителя,
			|ДанныеПоИндексацииЗарплаты.РезультатБаза		КАК РезультатБазаИндексацияЗарплаты,
			|ДанныеПоИндексацииЗарплаты.РезультатФиксированнаяИндексация		КАК РезультатФиксированнаяИндексация,
			|
			|ДанныеПоИндексацииЗарплаты.РасчетИндексацииПропорционально		КАК РасчетИндексацииПропорционально,
			|ДанныеПоИндексацииЗарплаты.СпособОсновногоРасчета		КАК СпособОсновногоРасчета,
			|ДанныеПоИндексацииЗарплаты.ОсновнойГрафикработы		КАК ОсновнойГрафикработы";
			
		КонецЕсли;
		
		Если НеобходимыеДанные.ИндексацияСоциальныхНачислений Тогда
			
			ТекстЗапроса = ТекстЗапроса + ", 
			|ДанныеПоИндексацииСоциальныхНачислений.ИндексацияНачало	Как ИндексацияСоциальныхНачисленийНачало, 
			|ДанныеПоИндексацииСоциальныхНачислений.ИндексацияКонец		Как ИндексацияСоциальныхНачисленийКонец,
			|
			|ДанныеПоИндексацииСоциальныхНачислений.БазаСоцГруппы1		КАК БазаИндексацияСоциальныхНачислений1, 
			|ДанныеПоИндексацииСоциальныхНачислений.БазаСоцГруппы2		КАК БазаИндексацияСоциальныхНачислений2, 
			|ДанныеПоИндексацииСоциальныхНачислений.БазаСоцГруппы3		КАК БазаИндексацияСоциальныхНачислений3, 
			|ДанныеПоИндексацииСоциальныхНачислений.БазаСоцГруппы4		КАК БазаИндексацияСоциальныхНачислений4,
			|
			|ДанныеПоИндексацииСоциальныхНачислений.ПорогСоцГруппы1	КАК ПорогИндексацияСоциальныхНачислений1,
			|ДанныеПоИндексацииСоциальныхНачислений.ПорогСоцГруппы2	КАК ПорогИндексацияСоциальныхНачислений2,
			|ДанныеПоИндексацииСоциальныхНачислений.ПорогСоцГруппы3	КАК ПорогИндексацияСоциальныхНачислений3,
			|ДанныеПоИндексацииСоциальныхНачислений.ПорогСоцГруппы4	КАК ПорогИндексацияСоциальныхНачислений4,
			|
			|ДанныеПоИндексацииСоциальныхНачислений.РезультатБаза		КАК РезультатБазаИндексацияСоциальныхНачислений";
			
		КонецЕсли;
		
		Если НеобходимыеДанные.ДоплатаДоМЗП ИЛИ НеобходимыеДанные.МинимальнаяЗарплата Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	МинимальнаяЗарплата.МинЗПМесяц КАК МинЗПМесяц,
			|	МинимальнаяЗарплата.МинЗПЧас КАК МинЗПЧас,
			|	МинимальнаяЗарплата.СпособОсновногоРасчета КАК СпособОсновногоРасчетаДляМинЗП";
		КонецЕсли;
		
		Если НеобходимыеДанные.СуммаКомпенсации Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|Задолженность.СуммаВзаиморасчетовОстаток КАК СуммаКомпенсации";   
			
		КонецЕсли;
				
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ РегистрРасчета.ИНАГРО_Начисления Как Основной";
		
		Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда
			
			// ВТПоказатели
			Если Истина Тогда
				// получим временную таблицу с расчетом показателей
				ТекстЗапросаПоказатели = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Основной.ВидРасчета,
				|	МАКСИМУМ(ВСЕПоказатели.НомерСтроки) КАК КоличествоПоказателей";
				Для СчПоказателей = 1 По КоличествоПоказателей Цикл
					ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + ",
					|	Показатели"+ СчПоказателей + ".Показатель КАК Показатель" + СчПоказателей;
				КонецЦикла;
				ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + "
				|ПОМЕСТИТЬ ВТПоказатели
				|ИЗ
				|	РегистрРасчета."+ИмяРегистра +" КАК Основной
				|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета."+ИмяРегистра+".Показатели КАК ВСЕПоказатели
				|	ПО Основной.ВидРасчета = ВСЕПоказатели.Ссылка";
				Для СчПоказателей = 1 По КоличествоПоказателей Цикл
					ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + "
					|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета."+ИмяРегистра+".Показатели КАК Показатели"+ СчПоказателей + "
					|	ПО Основной.ВидРасчета = Показатели"+ СчПоказателей + ".Ссылка 
					|	И  Показатели"+ СчПоказателей + ".НомерСтроки = "+ СчПоказателей;
				КонецЦикла;
				ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + "
				|ГДЕ " + ВнешнееУсловие + "
				|СГРУППИРОВАТЬ ПО
				|	Основной.ВидРасчета";
				Для СчПоказателей = 1 По КоличествоПоказателей Цикл
					ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + ",
					|	Показатели"+ СчПоказателей + ".Показатель";
				КонецЦикла;
				ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + "
				|ИНДЕКСИРОВАТЬ ПО Основной.ВидРасчета";		
				
				Запрос.Текст = ТекстЗапросаПоказатели;
				Запрос.Выполнить();
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
            |ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
			|ПО Показатели.ВидРасчета = Основной.ВидРасчета";
			
			Если НеобходимыеДанные.КалендарныхДнейВмесяце ИЛИ НеобходимыеДанные.ВремяВКалендарныхДнях Тогда  
				ТекстЗапроса = ТекстЗапроса + "
				|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления.ФактическийПериодДействия(Регистратор = &парамРегистратор) КАК ФактическийПериодДействия
				|ПО ФактическийПериодДействия.НомерСтроки = Основной.НомерСтроки";
			КонецЕсли;
			
		КонецЕсли;
		
		Если НеобходимыеДанные.Стаж Тогда
			// присоединение к данным о стаже
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК ДанныеОСтаже			
			|ПО ДанныеОСтаже.Сотрудник = Основной.Сотрудник
			|И	ДанныеОСтаже.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)";
			
			Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
		КонецЕсли;
		
		Если НеобходимаБаза Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления.БазаИНАГРО_Начисления(&парамИзмеренияОсновного, &парамИзмеренияБазового, , " + Условие + ") Как База
			|ПО База.Регистратор = Основной.Регистратор И База.НомерСтроки = Основной.НомерСтроки
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления.БазаИНАГРО_Начисления(&парамИзмеренияОсновногоНазначения, &парамИзмеренияБазовогоНазначения, , " + Условие + ") Как БазаНазначения
			|ПО БазаНазначения.Регистратор = Основной.Регистратор И БазаНазначения.НомерСтроки = Основной.НомерСтроки";
			
		КонецЕсли;
		
		Если НеобходимГрафик Тогда
			
			Запрос.Текст = ВремяПоТабелюТекст;
			Запрос.Выполнить();
			ВремяПоТабелюТекст = "ВТВремяПоТабелю";
			
			Запрос.Текст = ВремяВведенноеВЦеломЗаПериодТекст;
			Запрос.Выполнить();
			ВремяВведенноеВЦеломЗаПериодТекст = "ВТВремяВведенноеВЦеломЗаПериод";
			
			// присоединяем к данным графика
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления.ДанныеГрафика(" + Условие +  ") Как ДанныеГрафика
			|ПО Основной.Регистратор = ДанныеГрафика.Регистратор И Основной.НомерСтроки = ДанныеГрафика.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяПоТабелю КАК ВремяПоТабелю
			|ПО Основной.НомерСтроки = ВремяПоТабелю.НомерСтроки
			|ЛЕВОЕ СОЕДИНЕНИЕ " + ВремяВведенноеВЦеломЗаПериодТекст + " КАК ВремяВведенноеВЦеломЗаПериод
			|ПО Основной.НомерСтроки = ВремяВведенноеВЦеломЗаПериод.НомерСтроки
			|";
			
		КонецЕсли;
		
		// допрасчеты
		Если НеобходимыеДанные.ВыслугаЛет Тогда
			
			// ВТСведенияОСтаже
			Если Истина Тогда
				ТекстЗапросаВТ = "
				|ВЫБРАТЬ
				|  ПриказОПриеме.Сотрудник		КАК Сотрудник,
				|  ПриказОПриеме.ДатаПриема		КАК ДатаПриема,
				|  ОбщийСтаж.ВидСтажа			КАК ВидСтажа,
				|  СУММА( ЕСТЬNULL(ОбщийСтаж.ДнейСтажа, 0))  КАК ДнейСтажа
				|ПОМЕСТИТЬ ВТСведенияОСтаже	
				|	ИЗ (	ВЫБРАТЬ 
				|           	МИНИМУМ(Работники.Период) КАК ДатаПриема,
				|				Работники.Сотрудник	КАК Сотрудник
				|			ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК Работники
				|   		ГДЕ Работники.Сотрудник В (&парамСотрудники)
				|			СГРУППИРОВАТЬ ПО Работники.Сотрудник
				|	) КАК ПриказОприеме
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ ( 
				|	ВЫБРАТЬ
				|		Стаж.ФизЛицо,
				|		Стаж.ДнейСтажа,
				|		Стаж.ВидСтажа
				|	ИЗ РегистрСВедений.НачальныеСведенияОСтажеРаботниковОрганизации КАК Стаж
				|	ГДЕ	Стаж.Организация	= &парамОрганизация
				|
				|) КАК ОбщийСтаж		
				|	ПО ОбщийСтаж.ФизЛицо = ПриказОПриеме.Сотрудник.ФизическоеЛицо 
				|   
				|СГРУППИРОВАТЬ ПО  
				|  ПриказОПриеме.Сотрудник,
				|  ОбщийСтаж.ВидСтажа,
				|  ПриказОПриеме.ДатаПриема
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТСведенияОСтаже = "ВТСведенияОСтаже"; 
			КонецЕсли;
			
				
			// ВТПараметрыВыслуги
			Если Истина Тогда
				ТекстЗапросаВТ =  "
				| ВЫБРАТЬ 
				|  ПараметрыВыслуги.Порог   		 	КАК Порог,
				|  ПараметрыВыслуги.СпособУчетаСтажа  	КАК СпособУчетаСтажа,
				|  ПараметрыВыслуги.Ставка  			КАК Ставка,
				|  МАКСИМУМ(ПараметрыВыслуги1.Порог)    КАК НижнийПорог
				|ПОМЕСТИТЬ ВТПараметрыВыслуги
				|
				|  ИЗ РегистрСведений.ИНАГРО_ШкалаВыслугиЛет.СрезПоследних(&парамПериодРегистрации) КАК ПараметрыВыслуги
				|
				| ЛЕВОЕ СОЕДИНЕНИЕ (
				| 	ВЫБРАТЬ 
				|  		ПараметрыВыслуги.СпособУчетаСтажа	КАК СпособУчетаСтажа,
				|  		ПараметрыВыслуги.Ставка  			КАК Ставка,
				|  		ПараметрыВыслуги.Порог   			КАК Порог
				|
				|  		ИЗ РегистрСведений.ИНАГРО_ШкалаВыслугиЛет.СрезПоследних(&парамПериодРегистрации) КАК ПараметрыВыслуги
				|
				|   ) КАК ПараметрыВыслуги1
				| ПО  ПараметрыВыслуги1.СпособУчетаСтажа = ПараметрыВыслуги.СпособУчетаСтажа
				|	И ПараметрыВыслуги1.Порог    < ПараметрыВыслуги.Порог
				|
				| СГРУППИРОВАТЬ ПО 
				|  ПараметрыВыслуги.Порог, 
				|  ПараметрыВыслуги.СпособУчетаСтажа,
				|  ПараметрыВыслуги.Ставка
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();				
				ТекстЗапросаВТПараметрыВыслуги = "ВТПараметрыВыслуги";				
			 КонецЕсли;
			  
			ТекстЗапроса = ТекстЗапроса + "
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ  " + ТекстЗапросаВТСведенияОСтаже + "  КАК Стаж
				|ПО   (Стаж.ВидСтажа = Основной.ВидРасчета.ВидСтажа Или  Стаж.ВидСтажа ЕСТЬ NULL )
				|   И Стаж.Сотрудник  = Основной.Сотрудник
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ  " + ТекстЗапросаВТПараметрыВыслуги + "  КАК СтавкиВыслуги
				|ПО   (Стаж.ВидСтажа.СпособУчетаСтажа = СтавкиВыслуги.СпособУчетаСтажа ИЛИ Стаж.ВидСтажа ЕСТЬ NULL)
				|   И ВЫБОР КОГДА Стаж.ДнейСтажа ЕСТЬ NULL ТОГДА Стаж.ДатаПриема ИНАЧЕ ДОБАВИТЬКДАТЕ( Стаж.ДатаПриема, ДЕНЬ, - Стаж.ДнейСтажа) КОНЕЦ <= ДОБАВИТЬКДАТЕ( НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало), ГОД, - СтавкиВыслуги.НижнийПорог )
				|   И ВЫБОР КОГДА Стаж.ДнейСтажа ЕСТЬ NULL ТОГДА Стаж.ДатаПриема ИНАЧЕ ДОБАВИТЬКДАТЕ( Стаж.ДатаПриема, ДЕНЬ, - Стаж.ДнейСтажа) КОНЕЦ > ДОБАВИТЬКДАТЕ( НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало), ГОД, - СтавкиВыслуги.Порог )
				|
				|";
		КонецЕсли;

			
		Если НеобходимыеДанные.ИндексацияЗарплаты Тогда
			
			ПрименяетсяФиксированнаяИндексация = (ИНАГРО_ПроведениеРасчетов.ДатаВводаФиксированнойИндексации() <= Регистратор.Дата);
			РасчетИндексацииПропорционально = Константы.ИНАГРО_РасчетИндексацииПропорционально.Получить();			
			Запрос.УстановитьПараметр("парамРасчетИндексацииПропорционально",?(ЗначениеЗаполнено(РасчетИндексацииПропорционально),РасчетИндексацииПропорционально,Перечисления.ИНАГРО_ВариантыАлгоритмовРасчетИндексацииПропорционально.НеПрименять));
			Запрос.УстановитьПараметр("ДатаИзмененияПорядкаИндексации", ДатаИзмененияПорядкаИндексации());

			ПрименяетсяИндексацияПоДожностям = (ИНАГРО_ПроведениеРасчетов.ДатаВводаИндексацииПоДолжностям() <= Регистратор.Дата);
			                                                              
			ПорогИндексации = ?(ДатаИзмененияПорогаИндексации() <= Регистратор.Дата, 1.03, 1.01);
			НеобходимыеДанные.Вставить("ПорогИндексации", ПорогИндексации);
			
			//	ВТИндексироватьСотрудниковПоПериодам
			Если Истина Тогда
				//	Описание:
				// 		В этой таблице только сотрудники по которым есть Вид расчета Индексация 
				//		и периоды по которым надо расчиать тндексацию
				//		Для п.1.
				ТекстЗапросаВТ = "
				|	ВЫБРАТЬ РАЗЛИЧНЫЕ
				|		Доход.Сотрудник									КАК Сотрудник, 
				|		Доход.ПодразделениеОрганизации					КАК ПодразделениеОрганизации,
				|		Доход.Должность									КАК Должность,
				|		НАЧАЛОПЕРИОДА(Доход.БазовыйПериодНачало, МЕСЯЦ)	КАК ДатаНачала 
				|ПОМЕСТИТЬ ВТИндексироватьСотрудниковПоПериодам	
				|   ИЗ РегистрРасчета.ИНАГРО_Начисления КАК Доход
				|	ГДЕ 	Доход.Регистратор = &парамРегистратор 
				|		И	Доход.Сотрудник В (&парамСотрудники) 
				|		И	Доход.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ИндексацияЗарплаты) 
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТИндексироватьСотрудниковПоПериодам = "ВТИндексироватьСотрудниковПоПериодам";
			КонецЕсли;
			
			//	ВТИндексированныйДоходСовместителей
			Если Истина Тогда
				//	Описание:
				// 		Доход совместителей с других мест работы
				//		Для п.1.
				ТекстЗапросаВТ = "
				|	ВЫБРАТЬ 
				|		Доход.ИНАГРО_Сотрудник				КАК Сотрудник, 
				|		Доход.ДатаДействия			КАК ДатаНачала, 
				|		СУММА(Доход.БазаИндексации)	КАК БазаИндексацииСовместителей 
				|ПОМЕСТИТЬ ВТИндексированныйДоходСовместителей	
				|   ИЗ РегистрСведений.ИндексированныйДоходСовместителей.СрезПоследних(&парамПериодРегистрации, 
				|   		ИНАГРО_Сотрудник В (ВЫБРАТЬ РАЗЛИЧНЫЕ Сотрудник ИЗ "+ТекстЗапросаВТИндексироватьСотрудниковПоПериодам+" ) ) КАК Доход
				|	СГРУППИРОВАТЬ ПО 
				|		Доход.ИНАГРО_Сотрудник, 
				|		Доход.ДатаДействия 
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТИндексированныйДоходСовместителей = "ВТИндексированныйДоходСовместителей";
			КонецЕсли;
			
			//	ВТБазовыеПериодыИндексации
			Если Истина Тогда
 				ТекстЗапросаВТ = "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
				// Отбор возможных базовых периодов.
				// Это могут быть записи по нужным сотрудникам, либо записи по местам работы (с пустым сотрудником).
				|  ПараметрыРасчетаИндексации.Сотрудник,
				|  ПараметрыРасчетаИндексации.ПодразделениеОрганизации,
				|  ПараметрыРасчетаИндексации.Должность,
				|  ПараметрыРасчетаИндексации.Период
				|ПОМЕСТИТЬ ВТВсеДанныеПараметрыРасчетаИндексации
				|ИЗ РегистрСведений.ИНАГРО_КоэффициентПовышенияОкладов КАК ПараметрыРасчетаИндексации
				|ГДЕ 
				|	ПараметрыРасчетаИндексации.Организация = &парамОрганизация	
				|   И (ПараметрыРасчетаИндексации.Сотрудник В (ВЫБРАТЬ РАЗЛИЧНЫЕ Основной.Сотрудник ИЗ ВТИндексироватьСотрудниковПоПериодам КАК Основной)
				|      ИЛИ ПараметрыРасчетаИндексации.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
				|ИНДЕКСИРОВАТЬ ПО
				|  Сотрудник
				|;
				|
				// Во-первых, учитываем базовые периоды по месту работы
				// Это могут быть записи по нужному сотруднику на нужном месте, либо записи по месту работы (с пустым сотрудником)
				// Применяется только если уже применяется индексация по должностям.
				|ВЫБРАТЬ
				|   Основной.Сотрудник,
				|   Основной.ДатаНачала,
				|   Основной.ПодразделениеОрганизации,
				|   Основной.Должность,
				|   МАКСИМУМ(ПараметрыРасчетаИндексации.Период) КАК Период
				|ПОМЕСТИТЬ ВТПериодыПараметрыРасчетаИндексации1	
				|ИЗ ВТИндексироватьСотрудниковПоПериодам КАК Основной
				|	ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеДанныеПараметрыРасчетаИндексации КАК ПараметрыРасчетаИндексации
				|	ПО Основной.ПодразделениеОрганизации = ПараметрыРасчетаИндексации.ПодразделениеОрганизации 
				|    И Основной.Должность = ПараметрыРасчетаИндексации.Должность
				|    И (Основной.Сотрудник = ПараметрыРасчетаИндексации.Сотрудник
				|      ИЛИ ПараметрыРасчетаИндексации.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
				|    И ВЫБОР КОГДА &ДатаИзмененияПорядкаИндексации  > НАЧАЛОПЕРИОДА(Основной.ДатаНачала, МЕСЯЦ)
				|   	ТОГДА КОНЕЦПЕРИОДА(Основной.ДатаНачала, МЕСЯЦ) >= ПараметрыРасчетаИндексации.Период
				|     	ИНАЧЕ Основной.ДатаНачала > ПараметрыРасчетаИндексации.Период КОНЕЦ
				|    И "+ ?(ПрименяетсяИндексацияПоДожностям, "ИСТИНА","ЛОЖЬ")+ "
				|
				|СГРУППИРОВАТЬ ПО 
				|		Основной.Сотрудник,
				|		Основной.ДатаНачала,
				|  		Основной.ПодразделениеОрганизации,
				|  		Основной.Должность
				|;

				|
				// Во-вторых, учитываем базовые периоды по нужному сотруднику без указания места работы
				// Эти записи могли быть введены до введения новых правил индексации.
				|ВЫБРАТЬ
				|   Основной.Сотрудник,
				|   Основной.ДатаНачала,
				|   МАКСИМУМ(ПараметрыРасчетаИндексации.Период) КАК Период
				|ПОМЕСТИТЬ ВТПериодыПараметрыРасчетаИндексации2	
				|ИЗ ВТИндексироватьСотрудниковПоПериодам КАК Основной
				|	ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеДанныеПараметрыРасчетаИндексации КАК ПараметрыРасчетаИндексации
				|	ПО ПараметрыРасчетаИндексации.ПодразделениеОрганизации = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) 
				|    И ПараметрыРасчетаИндексации.Должность = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
				|    И Основной.Сотрудник = ПараметрыРасчетаИндексации.Сотрудник
				|    И ВЫБОР КОГДА &ДатаИзмененияПорядкаИндексации  > НАЧАЛОПЕРИОДА(Основной.ДатаНачала, МЕСЯЦ)
				|   	ТОГДА КОНЕЦПЕРИОДА(Основной.ДатаНачала, МЕСЯЦ) >= ПараметрыРасчетаИндексации.Период
				|     	ИНАЧЕ Основной.ДатаНачала > ПараметрыРасчетаИндексации.Период КОНЕЦ
				|
				|СГРУППИРОВАТЬ ПО 

				|		Основной.Сотрудник,
				|		Основной.ДатаНачала
				|;
				|
				// Даты приема на работу
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
				// Отбор возможных базовых периодов.
				// Это могут быть записи по нужным сотрудникам, либо записи по местам работы (с пустым сотрудником).
				|  РаботникиОрганизаций.Сотрудник,
				|  РаботникиОрганизаций.Период КАК ДатаПриемаНаРаботу
				|ПОМЕСТИТЬ ВТВсеДатыПриемаНаРаботу
				|ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПервых(,Организация = &парамОрганизация И Сотрудник В (ВЫБРАТЬ РАЗЛИЧНЫЕ Основной.Сотрудник ИЗ ВТИндексироватьСотрудниковПоПериодам КАК Основной)) КАК РаботникиОрганизаций
				|ИНДЕКСИРОВАТЬ ПО
				|  Сотрудник
				|;
				|
				|ВЫБРАТЬ
				|   Основной.Сотрудник,
				|   Основной.ДатаНачала,
				|	"+ ?(ПрименяетсяИндексацияПоДожностям, "ЕСТЬNULL(ПериодыПараметрыРасчетаИндексации1.Период,ПериодыПараметрыРасчетаИндексации2.Период)","ПериодыПараметрыРасчетаИндексации2.Период")+ " КАК БазовыйПериодИндексации,
				|   ДатыПриемаНаРаботу.ДатаПриемаНаРаботу КАК ДатаПриемаСотрудника
				|ПОМЕСТИТЬ ВТБазовыеПериодыИндексации	
				|ИЗ ВТИндексироватьСотрудниковПоПериодам КАК Основной
				|	ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыПараметрыРасчетаИндексации1 КАК ПериодыПараметрыРасчетаИндексации1
				|	ПО Основной.Сотрудник = ПериодыПараметрыРасчетаИндексации1.Сотрудник 
				|    И Основной.ДатаНачала = ПериодыПараметрыРасчетаИндексации1.ДатаНачала
				|    И Основной.ПодразделениеОрганизации = ПериодыПараметрыРасчетаИндексации1.ПодразделениеОрганизации
				|    И Основной.Должность = ПериодыПараметрыРасчетаИндексации1.Должность
				|	ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыПараметрыРасчетаИндексации2 КАК ПериодыПараметрыРасчетаИндексации2
				|	ПО Основной.Сотрудник = ПериодыПараметрыРасчетаИндексации2.Сотрудник 
				|    И Основной.ДатаНачала = ПериодыПараметрыРасчетаИндексации2.ДатаНачала
				|	ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеДатыПриемаНаРаботу КАК ДатыПриемаНаРаботу
				|	ПО Основной.Сотрудник = ДатыПриемаНаРаботу.Сотрудник 
				|
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТБазовыеПериодыИндексации = "ВТБазовыеПериодыИндексации";
			КонецЕсли;
			Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТБазовыеПериодыИндексации";
			
			//	ВТПараметрыФиксированнойИндексации
			Если Истина Тогда
				ТекстЗапросаВТ = "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
				|  ПараметрыФиксированнойИндексации.Сотрудник,
				|	"+ ?(ПрименяетсяИндексацияПоДожностям, "ПараметрыФиксированнойИндексации.ПодразделениеОрганизации","ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)")+ " КАК ПодразделениеОрганизации,
				|	"+ ?(ПрименяетсяИндексацияПоДожностям, "ПараметрыФиксированнойИндексации.Должность","ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)")+ " КАК Должность,
				|  ПараметрыФиксированнойИндексации.Размер,
				|  ПараметрыФиксированнойИндексации.Период
				|ПОМЕСТИТЬ ВТВсеДанныеПараметрыФиксированнойИндексации
				|ИЗ РегистрСведений.ИНАГРО_ПараметрыФиксированнойИндексации КАК ПараметрыФиксированнойИндексации
				|ГДЕ ПараметрыФиксированнойИндексации.Сотрудник В (ВЫБРАТЬ РАЗЛИЧНЫЕ Основной.Сотрудник ИЗ ВТИндексироватьСотрудниковПоПериодам КАК Основной)
				|  И ПараметрыФиксированнойИндексации.ПодразделениеОрганизации "+ ?(ПрименяетсяИндексацияПоДожностям, "<>","=")+ " ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
				|  И ПараметрыФиксированнойИндексации.Должность "+ ?(ПрименяетсяИндексацияПоДожностям, "<>","=")+ " ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
				|ИНДЕКСИРОВАТЬ ПО
				|  Сотрудник
				|;
				|
				|ВЫБРАТЬ
				|   Основной.Сотрудник,
				|   Основной.ДатаНачала,
				|   Основной.ПодразделениеОрганизации,
				|   Основной.Должность,
				|   МАКСИМУМ(ПараметрыФиксированнойИндексации.Период) КАК Период
				|ПОМЕСТИТЬ ВТПериодыПараметрыФиксированнойИндексации	
				|	ИЗ ВТИндексироватьСотрудниковПоПериодам КАК Основной
				|	ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеДанныеПараметрыФиксированнойИндексации КАК ПараметрыФиксированнойИндексации
				|	ПО Основной.Сотрудник = ПараметрыФиксированнойИндексации.Сотрудник 
				|	 И "+ ?(ПрименяетсяИндексацияПоДожностям, "Основной.ПодразделениеОрганизации","ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)")+ " = ПараметрыФиксированнойИндексации.ПодразделениеОрганизации 
				|	 И "+ ?(ПрименяетсяИндексацияПоДожностям, "Основной.Должность","ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)")+ " = ПараметрыФиксированнойИндексации.Должность 
				|    И КОНЕЦПЕРИОДА(Основной.ДатаНачала, МЕСЯЦ) >= ПараметрыФиксированнойИндексации.Период
				|
				|СГРУППИРОВАТЬ ПО 
				|		Основной.Сотрудник,
				|		Основной.ДатаНачала,
				|  		Основной.ПодразделениеОрганизации,
				|  		Основной.Должность
				|;
				|
				|ВЫБРАТЬ
				|   Основной.Сотрудник,
				|   Основной.ДатаНачала,
				|   ПараметрыФиксированнойИндексации.Размер КАК Результат
				|ПОМЕСТИТЬ ВТПараметрыФиксированнойИндексации	
				|	ИЗ ВТПериодыПараметрыФиксированнойИндексации КАК Основной
				|	ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеДанныеПараметрыФиксированнойИндексации КАК ПараметрыФиксированнойИндексации
				|	ПО Основной.Сотрудник = ПараметрыФиксированнойИндексации.Сотрудник 
				|	 И "+ ?(ПрименяетсяИндексацияПоДожностям, "Основной.ПодразделениеОрганизации","ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)")+ " = ПараметрыФиксированнойИндексации.ПодразделениеОрганизации 
				|	 И "+ ?(ПрименяетсяИндексацияПоДожностям, "Основной.Должность","ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)")+ " = ПараметрыФиксированнойИндексации.Должность
				|    И Основной.Период = ПараметрыФиксированнойИндексации.Период
				|
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
			КонецЕсли;
			
			//	ВТИндексацияРасчетПропорционально
			Если Истина Тогда
				ТекстЗапросаВТ = "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
				|  ПлановыеНачисленияРаботниковОрганизаций.Сотрудник,
				|  ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета.СпособРасчета КАК СпособОсновногоРасчета
				|ПОМЕСТИТЬ ВТВсеДанныеПлановыеНачисленияРаботниковОрганизаций
				|ИЗ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(КОНЕЦПЕРИОДА(&парамПериодРегистрации,МЕСЯЦ), 
				|	Сотрудник В (ВЫБРАТЬ РАЗЛИЧНЫЕ Основной.Сотрудник ИЗ ВТИндексироватьСотрудниковПоПериодам КАК Основной)
 				|	И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное)) КАК ПлановыеНачисленияРаботниковОрганизаций
				|
				|ИНДЕКСИРОВАТЬ ПО
				|  Сотрудник
				|;
				|
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
				|  РаботникиОрганизаций.Сотрудник,
				|  РаботникиОрганизаций.ГрафикРаботы КАК ОсновнойГрафикРаботы
				|ПОМЕСТИТЬ ВТВсеДанныеРаботникиОрганизаций
				|ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(КОНЕЦПЕРИОДА(&парамПериодРегистрации,МЕСЯЦ), 
				|	Сотрудник В (ВЫБРАТЬ РАЗЛИЧНЫЕ Основной.Сотрудник ИЗ ВТИндексироватьСотрудниковПоПериодам КАК Основной)) КАК РаботникиОрганизаций
				|
				|ИНДЕКСИРОВАТЬ ПО
				|  Сотрудник
				|;
                |
				|ВЫБРАТЬ
				|   ВсеДанные.Сотрудник,
				|   МАКСИМУМ(ВсеДанные.СпособОсновногоРасчета) КАК СпособОсновногоРасчета,
				|   МАКСИМУМ(ВсеДанные.ОсновнойГрафикРаботы) КАК ОсновнойГрафикРаботы
				|ПОМЕСТИТЬ ВТИндексацияРасчетПропорционально	
				|ИЗ
				|		(ВЫБРАТЬ
				|   		ВсеДанныеПлановыеНачисленияРаботниковОрганизаций.Сотрудник,
				|   		ВсеДанныеПлановыеНачисленияРаботниковОрганизаций.СпособОсновногоРасчета КАК СпособОсновногоРасчета,
				|   		NULL КАК ОсновнойГрафикРаботы
				|		 ИЗ ВТВсеДанныеПлановыеНачисленияРаботниковОрганизаций КАК ВсеДанныеПлановыеНачисленияРаботниковОрганизаций
				|
				|        ОБЪЕДИНИТЬ ВСЕ
				|
				|		ВЫБРАТЬ
				|   		ВсеДанныеРаботникиОрганизаций.Сотрудник,
				|   		NULL КАК СпособОсновногоРасчета,
				|   		ВсеДанныеРаботникиОрганизаций.ОсновнойГрафикРаботы КАК ОсновнойГрафикРаботы
				|		 ИЗ ВТВсеДанныеРаботникиОрганизаций КАК ВсеДанныеРаботникиОрганизаций
				|      ) КАК ВсеДанные
				|СГРУППИРОВАТЬ ПО
				| ВсеДанные.Сотрудник
				|
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
			КонецЕсли;
			
			
			//	ВТБазаИндексацииЗарплаты
			Если Истина Тогда 
				//	Описание:
				// 		Все сотрудники из табличной части, их внутренние совместительства и все сотрудники которых замещали
				//		Для п.1.
				ТекстЗапросаВТ = "
				|	ВЫБРАТЬ 
				|		Основной.НомерСтроки КАК НомерСтроки, 
				|   	Основной.Сотрудник				КАК Сотрудник,
				|   	НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)	КАК ДатаНачала,
				|   	Основной.ВидРасчета				КАК ВидРасчета,
				|   	СУММА(БазаИзНачислений.Результат)	КАК РезультатБаза,
				|   	СУММА(ВЫБОР КОГДА	БазаИзНачислений.ВидРасчета.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ДетиДо6)
				|                   	ТОГДА   БазаИзНачислений.Результат
				|                   ИНАЧЕ		0
				|				КОНЕЦ )				КАК БазаСоцГруппы1,
				|   	СУММА(ВЫБОР КОГДА	БазаИзНачислений.ВидРасчета.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ДетиДо18)
				|                   	ТОГДА   БазаИзНачислений.Результат
				|                   ИНАЧЕ		0
				|				КОНЕЦ )				КАК БазаСоцГруппы2,
				|   	СУММА(ВЫБОР КОГДА	БазаИзНачислений.ВидРасчета.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.Трудоспособные)
				|                   	ТОГДА   БазаИзНачислений.Результат
				|                   ИНАЧЕ		0
				|				КОНЕЦ )				КАК БазаСоцГруппы3,
				|   	СУММА(ВЫБОР КОГДА	БазаИзНачислений.ВидРасчета.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.НеТрудоспособные)
				|                   	ТОГДА   БазаИзНачислений.Результат
				|                   ИНАЧЕ		0
				|				КОНЕЦ )				КАК БазаСоцГруппы4
				|ПОМЕСТИТЬ ВТБазаИндексацииЗарплаты	
				|		ИЗ РегистрРасчета.ИНАГРО_Начисления КАК Основной
				| 
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления КАК БазаИзНачислений
				|	ПО		Основной.Сотрудник = БазаИзНачислений.Сотрудник  
				|		И	НАЧАЛОПЕРИОДА(БазаИзНачислений.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
				|		И	БазаИзНачислений.ПериодРегистрации <= &парамПериодРегистрации
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.БазовыеВидыРасчета КАК БазовыеВидыРасчета
				|	ПО		Основной.ВидРасчета = БазовыеВидыРасчета.Ссылка  
				|		И	БазаИзНачислений.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
				|
				|	ГДЕ		Основной.Регистратор = &парамРегистратор 
				|		И	Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ИндексацияЗарплаты) 
				|   	И	Основной.Сотрудник В (ВЫБРАТЬ РАЗЛИЧНЫЕ Сотрудник ИЗ "+ТекстЗапросаВТИндексироватьСотрудниковПоПериодам+" )
				|
				|	СГРУППИРОВАТЬ ПО 
				|   	Основной.Сотрудник,
				|       Основной.НомерСтроки,
				|   	Основной.БазовыйПериодНачало,
				|   	Основной.ВидРасчета
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТБазаИндексацииЗарплаты = "ВТБазаИндексацииЗарплаты";
			КонецЕсли; 
		
			//	ВТПрожиточныеМинимумыИндексации
			Если Истина Тогда
				//	Описание:
				// 		Все сотрудники из табличной части, их внутренние совместительства и все сотрудники которых замещали.
				//		
				ТекстЗапросаВТ = "
				|	ВЫБРАТЬ 
				|		Основной.ДатаНачала		КАК ДатаНачала, 
				|		ПрожМинСоцГруппы1.Размер	КАК ПорогСоцГруппы1, 
				|		ПрожМинСоцГруппы2.Размер	КАК ПорогСоцГруппы2, 
				|		ПрожМинСоцГруппы3.Размер	КАК ПорогСоцГруппы3, 
				|		ПрожМинСоцГруппы4.Размер	КАК ПорогСоцГруппы4 
				| 
				|ПОМЕСТИТЬ ВТПрожиточныеМинимумыИндексации	
				|   ИЗ (
				|		ВЫБРАТЬ 
				|			ПериодыИндексации.ДатаНачала		КАК ДатаНачала, 
				|			МАКСИМУМ(ПрожМинСоцГруппы1.Период)	КАК ПериодСоцГруппа1, 
				|			МАКСИМУМ(ПрожМинСоцГруппы2.Период)	КАК ПериодСоцГруппа2, 
				|			МАКСИМУМ(ПрожМинСоцГруппы3.Период)	КАК ПериодСоцГруппа3, 
				|			МАКСИМУМ(ПрожМинСоцГруппы4.Период)	КАК ПериодСоцГруппа4 
				|		ИЗ (
				|   		ВЫБРАТЬ РАЗЛИЧНЫЕ
				|           	Периоды.ДатаНачала КАК ДатаНачала
				|			ИЗ " + ТекстЗапросаВТИндексироватьСотрудниковПоПериодам + " КАК Периоды
				|   		) КАК ПериодыИндексации
				| 
				|       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы1
				|       ПО	ПрожМинСоцГруппы1.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ДетиДо6)
				|       	И	ПрожМинСоцГруппы1.Период <= ПериодыИндексации.ДатаНачала
				| 
				|       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы2
				|       ПО	ПрожМинСоцГруппы2.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ДетиДо18)
				|       	И	ПрожМинСоцГруппы2.Период <= ПериодыИндексации.ДатаНачала
				| 
				|       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы3
				|       ПО	ПрожМинСоцГруппы3.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.Трудоспособные)
				|       	И	ПрожМинСоцГруппы3.Период <= ПериодыИндексации.ДатаНачала
				| 
				|       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы4
				|       ПО	ПрожМинСоцГруппы4.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.НеТрудоспособные)
				|       	И	ПрожМинСоцГруппы4.Период <= ПериодыИндексации.ДатаНачала
				| 
				|		СГРУППИРОВАТЬ ПО 
				|			ПериодыИндексации.ДатаНачала 
				|    ) КАК Основной
				| 
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы1
				|	ПО		ПрожМинСоцГруппы1.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ДетиДо6)
				|		И	ПрожМинСоцГруппы1.Период = Основной.ПериодСоцГруппа1
				| 
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы2
				|	ПО		ПрожМинСоцГруппы2.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ДетиДо18)
				|		И	ПрожМинСоцГруппы2.Период = Основной.ПериодСоцГруппа2
				| 
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы3
				|	ПО		ПрожМинСоцГруппы3.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.Трудоспособные)
				|		И	ПрожМинСоцГруппы3.Период = Основной.ПериодСоцГруппа3
				| 
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы4
				|	ПО		ПрожМинСоцГруппы4.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.НеТрудоспособные)
				|		И	ПрожМинСоцГруппы4.Период = Основной.ПериодСоцГруппа4
				| 
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТПрожиточныеМинимумыИндексации = "ВТПрожиточныеМинимумыИндексации";
			КонецЕсли;
	
			//	ВТДанныеПоИндексации
			Если Истина Тогда
				//	Описание:
				// 		Все сотрудники из табличной части, их внутренние совместительства и все сотрудники которых замещали
				//		Для п.1.
				
				Если ПрименяетсяФиксированнаяИндексация Тогда
					// Индексацию считаем от месяца перед приемом на работу
					ТекстНачалоИндексации ="НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(БазовыеПериодыИндексации.ДатаПриемаСотрудника, МЕСЯЦ, -1), МЕСЯЦ)";
				Иначе
					// Индексацию считаем от даты приема
					ТекстНачалоИндексации ="БазовыеПериодыИндексации.ДатаПриемаСотрудника";
				КонецЕсли;	
				
				ТекстЗапросаВТ = "
				|	ВЫБРАТЬ 
				|		База.Сотрудник					КАК Сотрудник, 
				|		База.НомерСтроки				КАК НомерСтроки, 
				|		База.ДатаНачала					КАК БазовыйПериодНачало, 
				|       База.ВидРасчета					КАК ВидРасчета,
				|		База.ДатаНачала					КАК ИндексацияКонец,
				|		База.РезультатБаза				КАК РезультатБаза, 
				|		База.БазаСоцГруппы1				КАК БазаСоцГруппы1, 
				|		База.БазаСоцГруппы2				КАК БазаСоцГруппы2, 
				|		База.БазаСоцГруппы3				КАК БазаСоцГруппы3, 
				|		База.БазаСоцГруппы4				КАК БазаСоцГруппы4, 
				|
				|		ПрожиточныеМинимумы.ПорогСоцГруппы1	КАК ПорогСоцГруппы1, 
				|		ПрожиточныеМинимумы.ПорогСоцГруппы2	КАК ПорогСоцГруппы2, 
				|		ПрожиточныеМинимумы.ПорогСоцГруппы3	КАК ПорогСоцГруппы3, 
				|		ПрожиточныеМинимумы.ПорогСоцГруппы4	КАК ПорогСоцГруппы4, 
				|
				|		ЕСТЬNULL(БазовыеПериодыИндексации.БазовыйПериодИндексации, НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(БазовыеПериодыИндексации.ДатаПриемаСотрудника, МЕСЯЦ, -1), МЕСЯЦ))	КАК ИндексацияНачало,
				|
				|		ВЫБОР КОГДА ДоходСовместителя.Сотрудник ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ	КАК ЕстьСправкаОБазеИндексацииСовместителя,
				|		ДоходСовместителя.БазаИндексацииСовместителей		КАК БазаИндексацииСовместителей,
				|
				|		ПараметрыФиксированнойИндексации.Результат		КАК РезультатФиксированнаяИндексация,
				|
				|		&парамРасчетИндексацииПропорционально	КАК РасчетИндексацииПропорционально,
				|		ЕСТЬNULL(ИндексацияРасчетПропорционально.СпособОсновногоРасчета,ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоЧасам))	КАК СпособОсновногоРасчета,
				|		ЕСТЬNULL(ИндексацияРасчетПропорционально.ОсновнойГрафикРаботы,ЗНАЧЕНИЕ(Справочник.ИНАГРО_ГрафикиРаботы.ПустаяСсылка))		КАК ОсновнойГрафикРаботы
				|	 
				|ПОМЕСТИТЬ ВТДанныеПоИндексации	
				|	ИЗ " + ТекстЗапросаВТИндексироватьСотрудниковПоПериодам + " Как Основной
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ   " + ТекстЗапросаВТБазаИндексацииЗарплаты + " КАК База
				|	ПО		Основной.Сотрудник = База.Сотрудник 
				|		И	Основной.ДатаНачала = База.ДатаНачала 
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТПрожиточныеМинимумыИндексации + " КАК ПрожиточныеМинимумы
				|	ПО		Основной.ДатаНачала = ПрожиточныеМинимумы.ДатаНачала
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТБазовыеПериодыИндексации + " КАК БазовыеПериодыИндексации
				|	ПО		Основной.Сотрудник = БазовыеПериодыИндексации.Сотрудник
				|		И	Основной.ДатаНачала	= БазовыеПериодыИндексации.ДатаНачала
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТИндексированныйДоходСовместителей + " КАК ДоходСовместителя
				|	ПО		Основной.Сотрудник = ДоходСовместителя.Сотрудник
				|		И	Основной.ДатаНачала	= ДоходСовместителя.ДатаНачала
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыФиксированнойИндексации  КАК ПараметрыФиксированнойИндексации
				|	ПО		Основной.Сотрудник = ПараметрыФиксированнойИндексации.Сотрудник
				|		И	Основной.ДатаНачала	= ПараметрыФиксированнойИндексации.ДатаНачала
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ ВТИндексацияРасчетПропорционально  КАК ИндексацияРасчетПропорционально
				|	ПО		Основной.Сотрудник = ИндексацияРасчетПропорционально.Сотрудник
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТДанныеПоИндексации = "ВТДанныеПоИндексации";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ "+ТекстЗапросаВТДанныеПоИндексации+" КАК ДанныеПоИндексацииЗарплаты
			|ПО		Основной.НомерСтроки = ДанныеПоИндексацииЗарплаты.НомерСтроки
			|";
		КонецЕсли;
		
		Если НеобходимыеДанные.ИндексацияСоциальныхНачислений Тогда
			
			//	ВТИндексироватьСНСотрудниковПоПериодам
			Если Истина Тогда
				//	Описание:
				// 		В этой таблице только сотрудники по которым есть Вид расчета Индексация 
				//		социальных начислений и периоды по которым надо расчиать тндексацию.
				//
				ТекстЗапросаВТ = "
				|	ВЫБРАТЬ РАЗЛИЧНЫЕ
				|		Доход.Сотрудник									КАК Сотрудник, 
				|		НАЧАЛОПЕРИОДА(Доход.БазовыйПериодНачало, МЕСЯЦ)	КАК ДатаНачала 
				|ПОМЕСТИТЬ ВТИндексироватьСНСотрудниковПоПериодам	
				|   ИЗ РегистрРасчета.ИНАГРО_Начисления КАК Доход
				|	ГДЕ 	Доход.Регистратор = &парамРегистратор 
				|		И	Доход.Сотрудник В (&парамСотрудники) 
				|		И	Доход.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ИндексацияСоциальныхНачислений) 
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТИндексироватьСНСотрудниковПоПериодам = "ВТИндексироватьСНСотрудниковПоПериодам";
			КонецЕсли;
			
			//	ВТБазаИндексацииСН
			Если Истина Тогда 
				//	Описание:
				// 		Все сотрудники из табличной части, их внутренние совместительства и все сотрудники которых замещали
				//		Для п.1.
				ТекстЗапросаВТ = "
				|	ВЫБРАТЬ 
				|		Основной.НомерСтроки				 КАК НомерСтроки, 
				|   	Основной.Сотрудник					КАК Сотрудник,
				|   	НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)	КАК ДатаНачала,
				|   	Основной.ВидРасчета					КАК ВидРасчета,
				|   	МАКСИМУМ(Пособия.Период)			КАК БазовыйПериодИндексации,
				|   	СУММА(БазаИзНачислений.Результат)	КАК РезультатБаза,
				|   	СУММА(ВЫБОР КОГДА	БазаИзНачислений.ВидРасчета.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ДетиДо6)
				|                   	ТОГДА   БазаИзНачислений.Результат
				|                   ИНАЧЕ		0
				|				КОНЕЦ )				КАК БазаСоцГруппы1,
				|   	СУММА(ВЫБОР КОГДА	БазаИзНачислений.ВидРасчета.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ДетиДо18)
				|                   	ТОГДА   БазаИзНачислений.Результат
				|                   ИНАЧЕ		0
				|				КОНЕЦ )				КАК БазаСоцГруппы2,
				|   	СУММА(ВЫБОР КОГДА	БазаИзНачислений.ВидРасчета.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.Трудоспособные)
				|                   	ТОГДА   БазаИзНачислений.Результат
				|                   ИНАЧЕ		0
				|				КОНЕЦ )				КАК БазаСоцГруппы3,
				|   	СУММА(ВЫБОР КОГДА	БазаИзНачислений.ВидРасчета.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.НеТрудоспособные)
				|                   	ТОГДА   БазаИзНачислений.Результат
				|                   ИНАЧЕ		0
				|				КОНЕЦ )				КАК БазаСоцГруппы4
				|ПОМЕСТИТЬ ВТБазаИндексацииСН	
				|		ИЗ РегистрРасчета.ИНАГРО_Начисления КАК Основной
				| 
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления КАК БазаИзНачислений
				|	ПО		Основной.Сотрудник = БазаИзНачислений.Сотрудник  
				|		И	НАЧАЛОПЕРИОДА(БазаИзНачислений.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
				|		И	БазаИзНачислений.ПериодРегистрации <= &парамПериодРегистрации
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.БазовыеВидыРасчета КАК БазовыеВидыРасчета
				|	ПО		Основной.ВидРасчета = БазовыеВидыРасчета.Ссылка  
				|		И	БазаИзНачислений.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
				|
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.ИНАГРО_РазмерыЗаконодательноУстановленныхВыплат КАК Пособия
				|	ПО		Пособия.ВидРасчета = БазаИзНачислений.ВидРасчета
				|		И	Пособия.Период <= Основной.БазовыйПериодНачало
				|
				|	ГДЕ		Основной.Регистратор = &парамРегистратор 
				|		И	Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ИндексацияСоциальныхНачислений) 
				|   	И	Основной.Сотрудник В (ВЫБРАТЬ РАЗЛИЧНЫЕ Сотрудник ИЗ "+ТекстЗапросаВТИндексироватьСНСотрудниковПоПериодам+" )
				|
				|	СГРУППИРОВАТЬ ПО 
				|   	Основной.Сотрудник,
				|       Основной.НомерСтроки,
				|   	Основной.БазовыйПериодНачало,
				|   	Основной.ВидРасчета
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТБазаИндексацииСН = "ВТБазаИндексацииСН";
			КонецЕсли; 
		
			//	ВТПрожиточныеМинимумыИндексацииСН
			Если Истина Тогда
				//	Описание:
				// 		Все сотрудники из табличной части, их внутренние совместительства и все сотрудники которых замещали.
				//		
				ТекстЗапросаВТ = "
				|	ВЫБРАТЬ 
				|		Основной.ДатаНачала		КАК ДатаНачала, 
				|		ПрожМинСоцГруппы1.Размер	КАК ПорогСоцГруппы1, 
				|		ПрожМинСоцГруппы2.Размер	КАК ПорогСоцГруппы2, 
				|		ПрожМинСоцГруппы3.Размер	КАК ПорогСоцГруппы3, 
				|		ПрожМинСоцГруппы4.Размер	КАК ПорогСоцГруппы4 
				| 
				|ПОМЕСТИТЬ ВТПрожиточныеМинимумыИндексацииСН	
				|   ИЗ (
				|		ВЫБРАТЬ 
				|			ПериодыИндексации.ДатаНачала		КАК ДатаНачала, 
				|			МАКСИМУМ(ПрожМинСоцГруппы1.Период)	КАК ПериодСоцГруппа1, 
				|			МАКСИМУМ(ПрожМинСоцГруппы2.Период)	КАК ПериодСоцГруппа2, 
				|			МАКСИМУМ(ПрожМинСоцГруппы3.Период)	КАК ПериодСоцГруппа3, 
				|			МАКСИМУМ(ПрожМинСоцГруппы4.Период)	КАК ПериодСоцГруппа4 
				|		ИЗ (
				|   		ВЫБРАТЬ РАЗЛИЧНЫЕ
				|           	Периоды.ДатаНачала КАК ДатаНачала
				|			ИЗ " + ТекстЗапросаВТИндексироватьСНСотрудниковПоПериодам + " КАК Периоды
				|   		) КАК ПериодыИндексации
				| 
				|       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы1
				|       ПО	ПрожМинСоцГруппы1.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ДетиДо6)
				|       	И	ПрожМинСоцГруппы1.Период <= ПериодыИндексации.ДатаНачала
				| 
				|       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы2
				|       ПО	ПрожМинСоцГруппы2.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ДетиДо18)
				|       	И	ПрожМинСоцГруппы2.Период <= ПериодыИндексации.ДатаНачала
				| 
				|       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы3
				|       ПО	ПрожМинСоцГруппы3.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.Трудоспособные)
				|       	И	ПрожМинСоцГруппы3.Период <= ПериодыИндексации.ДатаНачала
				| 
				|       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы4
				|       ПО	ПрожМинСоцГруппы4.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.НеТрудоспособные)
				|       	И	ПрожМинСоцГруппы4.Период <= ПериодыИндексации.ДатаНачала
				| 
				|		СГРУППИРОВАТЬ ПО 
				|			ПериодыИндексации.ДатаНачала 
				|    ) КАК Основной
				| 
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы1
				|	ПО		ПрожМинСоцГруппы1.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ДетиДо6)
				|		И	ПрожМинСоцГруппы1.Период = Основной.ПериодСоцГруппа1
				| 
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы2
				|	ПО		ПрожМинСоцГруппы2.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.ДетиДо18)
				|		И	ПрожМинСоцГруппы2.Период = Основной.ПериодСоцГруппа2
				| 
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы3
				|	ПО		ПрожМинСоцГруппы3.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.Трудоспособные)
				|		И	ПрожМинСоцГруппы3.Период = Основной.ПериодСоцГруппа3
				| 
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожМинСоцГруппы4
				|	ПО		ПрожМинСоцГруппы4.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.НеТрудоспособные)
				|		И	ПрожМинСоцГруппы4.Период = Основной.ПериодСоцГруппа4
				| 
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТПрожиточныеМинимумыИндексацииСН = "ВТПрожиточныеМинимумыИндексацииСН";
			КонецЕсли;
	
			//	ВТДанныеПоИндексацииСН
			Если Истина Тогда
				//	Описание:
				// 		Все сотрудники из табличной части, их внутренние совместительства и все сотрудники которых замещали
				//		Для п.1.
				ТекстЗапросаВТ = "
				|	ВЫБРАТЬ 
				|		База.Сотрудник					КАК Сотрудник, 
				|		База.НомерСтроки				КАК НомерСтроки, 
				|		База.ДатаНачала					КАК БазовыйПериодНачало, 
				|       База.ВидРасчета					КАК ВидРасчета,
				|		База.ДатаНачала					КАК ИндексацияКонец,
				|		База.РезультатБаза				КАК РезультатБаза, 
				|		База.БазаСоцГруппы1				КАК БазаСоцГруппы1, 
				|		База.БазаСоцГруппы2				КАК БазаСоцГруппы2, 
				|		База.БазаСоцГруппы3				КАК БазаСоцГруппы3, 
				|		База.БазаСоцГруппы4				КАК БазаСоцГруппы4, 
				|
				|		ПрожиточныеМинимумы.ПорогСоцГруппы1	КАК ПорогСоцГруппы1, 
				|		ПрожиточныеМинимумы.ПорогСоцГруппы2	КАК ПорогСоцГруппы2, 
				|		ПрожиточныеМинимумы.ПорогСоцГруппы3	КАК ПорогСоцГруппы3, 
				|		ПрожиточныеМинимумы.ПорогСоцГруппы4	КАК ПорогСоцГруппы4, 
				|
				|		База.БазовыйПериодИндексации	КАК ИндексацияНачало
				|	 
				|ПОМЕСТИТЬ ВТДанныеПоИндексацииСН	
				|	ИЗ " + ТекстЗапросаВТИндексироватьСНСотрудниковПоПериодам + " Как Основной
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ   " + ТекстЗапросаВТБазаИндексацииСН + " КАК База
				|	ПО		Основной.Сотрудник = База.Сотрудник 
				|		И	Основной.ДатаНачала = База.ДатаНачала 
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТПрожиточныеМинимумыИндексацииСН + " КАК ПрожиточныеМинимумы
				|	ПО		Основной.ДатаНачала = ПрожиточныеМинимумы.ДатаНачала
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТДанныеПоИндексацииСН = "ВТДанныеПоИндексацииСН";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ "+ТекстЗапросаВТДанныеПоИндексацииСН+" КАК ДанныеПоИндексацииСоциальныхНачислений
			|ПО		Основной.НомерСтроки = ДанныеПоИндексацииСоциальныхНачислений.НомерСтроки
			|";
		КонецЕсли;
		
		Если НеобходимыеДанные.ДоплатаДоМЗП ИЛИ НеобходимыеДанные.МинимальнаяЗарплата Тогда 
			
			Запрос.УстановитьПараметр("парамМинимальнаяЗарплата", НеобходимыеДанные.МинимальнаяЗарплата);
			
			ТекстЗапросаВТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			                 |	Доход.Сотрудник КАК Сотрудник,
			                 |	Доход.Назначение КАК Назначение,
			                 |	НАЧАЛОПЕРИОДА(Доход.БазовыйПериодНачало, МЕСЯЦ) КАК ДатаНачала
			                 |ПОМЕСТИТЬ ВТДоплатыМинЗППоПериодам
			                 |ИЗ
			                 |	РегистрРасчета.ИНАГРО_Начисления КАК Доход
			                 |ГДЕ
			                 |	Доход.Регистратор = &парамРегистратор
			                 |	И Доход.Сотрудник В(&парамСотрудники)
			                 |	И (Доход.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ДоплатаДоМЗП)
			                 |			ИЛИ &парамМинимальнаяЗарплата)
			                 |;
			                 |
			                 |////////////////////////////////////////////////////////////////////////////////
			                 |ВЫБРАТЬ
			                 |	МинимальнаяОплатаТруда.Размер,
			                 |	МинимальнаяОплатаТруда.ИНАГРО_Почасовая,
			                 |	МинимальнаяОплатаТруда.Период
			                 |ПОМЕСТИТЬ ВТВсеДанныеМинЗП
			                 |ИЗ
			                 |	РегистрСведений.МинимальнаяОплатаТруда КАК МинимальнаяОплатаТруда
			                 |;
			                 |
			                 |////////////////////////////////////////////////////////////////////////////////
			                 |ВЫБРАТЬ
			                 |	Основной.Сотрудник,
			                 |	Основной.Назначение,
			                 |	Основной.ДатаНачала,
			                 |	МАКСИМУМ(ВсеДанныеМинЗП.Период) КАК Период
			                 |ПОМЕСТИТЬ ВТПериодыДанныеМинЗП
			                 |ИЗ
			                 |	ВТДоплатыМинЗППоПериодам КАК Основной
			                 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеДанныеМинЗП КАК ВсеДанныеМинЗП
			                 |		ПО Основной.ДатаНачала >= ВсеДанныеМинЗП.Период
			                 |
			                 |СГРУППИРОВАТЬ ПО
			                 |	Основной.Сотрудник,
			                 |	Основной.Назначение,
			                 |	Основной.ДатаНачала
			                 |;
			                 |
			                 |////////////////////////////////////////////////////////////////////////////////
			                 |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			                 |	ПлановыеНачисленияРаботниковОрганизаций.Сотрудник,
			                 |	ПлановыеНачисленияРаботниковОрганизаций.ВидРасчета.СпособРасчета КАК СпособОсновногоРасчета
			                 |ПОМЕСТИТЬ ВТВсеДанныеПлановыеНачисленияРаботниковОрганизацийДляМинЗП
			                 |ИЗ
			                 |	РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
			                 |			КОНЕЦПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ),
			                 |			Сотрудник В
			                 |				(ВЫБРАТЬ
			                 |					ВТДоплатыМинЗППоПериодам.Назначение КАК Сотрудник
			                 |				ИЗ
			                 |					ВТДоплатыМинЗППоПериодам)) КАК ПлановыеНачисленияРаботниковОрганизаций
			                 |ГДЕ
			                 |	ПлановыеНачисленияРаботниковОрганизаций.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное)
			                 |	И ПлановыеНачисленияРаботниковОрганизаций.Действует
			                 |
			                 |ИНДЕКСИРОВАТЬ ПО
			                 |	ПлановыеНачисленияРаботниковОрганизаций.Сотрудник
			                 |;
			                 |
			                 |////////////////////////////////////////////////////////////////////////////////
			                 |ВЫБРАТЬ
			                 |	Основной.ДатаНачала,
			                 |	Основной.Сотрудник,
			                 |	Основной.Назначение,
			                 |	ЕСТЬNULL(ВсеДанныеМинЗП.Размер, 0) КАК МинЗПМесяц,
			                 |	ЕСТЬNULL(ВсеДанныеМинЗП.ИНАГРО_Почасовая, 0) КАК МинЗПЧас,
			                 |	ЕСТЬNULL(ПлановыеНачисления.СпособОсновногоРасчета, ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПомесячнойТарифнойСтавкеПоЧасам)) КАК СпособОсновногоРасчета
			                 |ПОМЕСТИТЬ ВТМинимальнаяЗарплата
			                 |ИЗ
			                 |	ВТПериодыДанныеМинЗП КАК Основной
			                 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеДанныеМинЗП КАК ВсеДанныеМинЗП
			                 |		ПО Основной.Период = ВсеДанныеМинЗП.Период
			                 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеДанныеПлановыеНачисленияРаботниковОрганизацийДляМинЗП КАК ПлановыеНачисления
			                 |		ПО Основной.Назначение = ПлановыеНачисления.Сотрудник
			                 |
			                 |ИНДЕКСИРОВАТЬ ПО
			                 |	Основной.Сотрудник,
			                 |	Основной.ДатаНачала";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
				
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТМинимальнаяЗарплата КАК МинимальнаяЗарплата
			|ПО Основной.Сотрудник = МинимальнаяЗарплата.Сотрудник
			| И Основной.Назначение = МинимальнаяЗарплата.Назначение
			| И НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ) = МинимальнаяЗарплата.ДатаНачала";
		КонецЕсли;
		
		Если НеобходимыеДанные.СуммаКомпенсации Тогда
			ТекстЗапроса = ТекстЗапроса + " 
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыССотрудниками.Остатки(&парамПериодРегистрации, Организация = &парамОрганизация) КАК Задолженность
			|ПО   Задолженность.ПериодВзаиморасчетов = Основной.БазовыйПериодНачало
			|   И Задолженность.Сотрудник = Основной.Сотрудник
			|
			|";
		КонецЕсли;

				
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ " + ВнешнееУсловие;
		
	КонецЕсли;
	
	Если ИмяРегистра = "ИНАГРО_Удержания" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ 
		|	Основной.Регистратор КАК Регистратор, 
		|	ЛОЖЬ		КАК ОтражатьВУпрУчете,
		|	ИСТИНА		КАК ОтражатьВРеглУчете, 
		|	Основной.НомерСтроки КАК НомерСтроки, 
		|	Основной.Сотрудник КАК Сотрудник, 
		|	Основной.Сотрудник.Наименование КАК СотрудникНаименование, 
		|	Основной.ВидРасчета КАК ВидРасчета,
		|	ИСТИНА КАК ВидРасчетаПериодДействияБазовый,
		|	Основной.ВидРасчета.Наименование КАК ВидРасчетаНаименование,
		|	Основной.ВидРасчета.СпособРасчета КАК СпособРасчета";
		
		Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда
			
			// Получим максимальное число показателей			
			Если Истина Тогда
		
				ТекстКолВоПоказателей =
				"ВЫБРАТЬ
				|	МАКСИМУМ(ВложенныйЗапрос.НомерСтроки) КАК КолВоПоказателей
				|ИЗ
				|	РегистрРасчета."+ИмяРегистра+" КАК Основной
				|	ЛЕВОЕ СОЕДИНЕНИЕ
				|	(ВЫБРАТЬ
				|		Показатели.Ссылка,
				|		Показатели.НомерСтроки КАК НомерСтроки
				|	ИЗ
				|		ПланВидовРасчета."+ИмяРегистра+".Показатели КАК Показатели) КАК ВложенныйЗапрос
				|	ПО ВложенныйЗапрос.Ссылка = Основной.ВидРасчета
				|ГДЕ "+ВнешнееУсловие;
				
				Запрос.Текст = ТекстКолВоПоказателей;
				ВыборкаКоличестваПоказателей = Запрос.Выполнить().Выбрать();
				ВыборкаКоличестваПоказателей.Следующий();
				КоличествоПоказателей = ?(ВыборкаКоличестваПоказателей.КолВоПоказателей=NULL,0,ВыборкаКоличестваПоказателей.КолВоПоказателей);		
			КонецЕсли;
			
			Если КоличествоПоказателей = 0 Тогда
				ТекстЗапроса = ТекстЗапроса + ",
				| 0 КАК КоличествоПоказателей,";
			Иначе
				ТекстЗапроса = ТекстЗапроса + ",
				| Показатели.КоличествоПоказателей КАК КоличествоПоказателей,";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			| Основной.ВидРасчета.ФормулаРасчета КАК ФормулаРасчета";
			Для СчПоказателей = 1 По КоличествоПоказателей Цикл
				ТекстЗапроса = ТекстЗапроса + ", 
				|Показатели.Показатель" + СчПоказателей+".Наименование Как Показатель" + СчПоказателей + "Наименование";
				
			КонецЦикла;			
			
			Показатель1Текст = ПолучитьТекстПоказателя(НеобходимыеДанные,ИмяРегистра,, КоличествоПоказателей, КомментироватьРасчет);
			Если КоличествоПоказателей > 6 Тогда
				// получим текст запроса для предопределенных показателей
				Показатель1ТекстПредопределенный = ПолучитьТекстПоказателя(НеобходимыеДанные,ИмяРегистра, Истина, КоличествоПоказателей, КомментироватьРасчет);
			КонецЕсли;
			
			Для СчПоказателей = 1 По КоличествоПоказателей Цикл
				Если СчПоказателей > 6 Тогда					
					ПоказательТекст = СтрЗаменить(Показатель1ТекстПредопределенный, "Показатель1", "Показатель"+СчПоказателей);
				Иначе
					ПоказательТекст = СтрЗаменить(Показатель1Текст, "Показатель1", "Показатель"+СчПоказателей);
				КонецЕсли;					
				ТекстЗапроса = ТекстЗапроса + ", 
			   	|" + ПоказательТекст + " Как Показатель"+СчПоказателей;
				
			КонецЦикла;
		КонецЕсли;
		
		Если НеобходимыеДанные.ПределПоДокументуОснованию Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|	Основной.ДокументОснование.Предел Как ПределПоДокументуОснованию";
		КонецЕсли;
		
		Если НеобходимаБаза Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|База.РезультатБаза КАК РезультатБаза";
			
		КонецЕсли;
		
		Если НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|НакопленныеДанные.УжеНачисленоВТекущемПериоде     КАК УжеНачисленоВТекущемПериоде,
			|НакопленныеДанные.УжеНачисленоЗаВсюИсторию        КАК УжеНачисленоЗаВсюИсторию";
		КонецЕсли;
		
		Если НеобходимыеДанные.ИсчисленныеВзносы Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|ИсчисленныеВзносы.Взносы КАК Взносы";
		КонецЕсли;
		
		Если НеобходимыеДанные.ИсчисленныйНДФЛ Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|ИсчисленныйНДФЛ.НДФЛ КАК ИсчисленныйНДФЛ";
		КонецЕсли;
		
		Если НеобходимыеДанные.ПараметрыИсполнительногоЛиста Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|ИсполниетльныеЛисты_ДетиДо6.Размер          	КАК АлиментыДетиДо6,
			|ИсполниетльныеЛисты_ДетиДо18.Размер          	КАК АлиментыДетиДо18,
			|ИсполниетльныеЛисты_Трудоспособные.Размер		КАК АлиментыТрудоспособные,
			|ИсполниетльныеЛисты.Предел          			КАК Предел,
			|ИсполниетльныеЛисты.ПометкаУвеличиватьДоМинимума КАК ПометкаУвеличиватьДоМинимума,
			|ЕстьNULL(ИсполниетльныеЛисты.ДетейВДокументеВсего, 0)       КАК ДетейВДокументеВсего,
			|ЕстьNULL(ИсполниетльныеЛисты.ДетейВДокументе6, 0)      		КАК ДетейВДокументе6,
			|ЕстьNULL(ИсполниетльныеЛисты.ДетейВДокументе18, 0)     		КАК ДетейВДокументе18,
			|ЕстьNULL(ИсполниетльныеЛисты.ДетейВДокументе19, 0)     		КАК ДетейВДокументе19,
			|ЕстьNULL(ИсполниетльныеЛисты.ДетейВДокументе, 0)            КАК ДетейВДокументе,
			|ИсполниетльныеЛисты.НачалоИндексации			КАК НачалоИндексации";
		КонецЕсли;
		
		Если НеобходимыеДанные.ПараметрыПочты Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|ПочтовыеПереводы.РазмерПочтовогоПеревода		КАК РазмерПочтовогоПеревода,
			|ПараметрыПочты.СуммаДополнительно				КАК СуммаДополнительно,
			|ПараметрыПочты.СуммаМинимальная				КАК СуммаМинимальная,
			|ПараметрыПочты.Ставка 							КАК Ставка";   
		КонецЕсли;
		
		Если НеобходимыеДанные.ПараметрыИндексацииАлиментов Тогда
			ТекстЗапроса = ТекстЗапроса + ", 
			|ПараметрыИндексацииАлиментов.БазаИндексации	КАК БазаИндексации";   
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|	ИЗ РегистрРасчета."+ИмяРегистра+" Как Основной";
		
		Если НеобходимыеДанные.ПоказателиСхемМотивации Тогда
			
			// ВТПоказатели
			Если Истина Тогда
				// получим временную таблицу с расчетом показателей
				ТекстЗапросаПоказатели = 
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Основной.ВидРасчета,
				|	МАКСИМУМ(ВСЕПоказатели.НомерСтроки) КАК КоличествоПоказателей";
				Для СчПоказателей = 1 По КоличествоПоказателей Цикл
					ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + ",
					|	Показатели"+ СчПоказателей + ".Показатель КАК Показатель" + СчПоказателей;
				КонецЦикла;
				ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + "
				|ПОМЕСТИТЬ ВТПоказатели
				|ИЗ
				|	РегистрРасчета."+ИмяРегистра +" КАК Основной
				|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета."+ИмяРегистра+".Показатели КАК ВСЕПоказатели
				|	ПО Основной.ВидРасчета = ВСЕПоказатели.Ссылка";
				Для СчПоказателей = 1 По КоличествоПоказателей Цикл
					ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + "
					|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета."+ИмяРегистра+".Показатели КАК Показатели"+ СчПоказателей + "
					|	ПО Основной.ВидРасчета = Показатели"+ СчПоказателей + ".Ссылка 
					|	И  Показатели"+ СчПоказателей + ".НомерСтроки = "+ СчПоказателей;
				КонецЦикла;
				ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + "
				|ГДЕ " + ВнешнееУсловие + "
				|СГРУППИРОВАТЬ ПО
				|	Основной.ВидРасчета";
				Для СчПоказателей = 1 По КоличествоПоказателей Цикл
					ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + ",
					|	Показатели"+ СчПоказателей + ".Показатель";
				КонецЦикла;
				ТекстЗапросаПоказатели = ТекстЗапросаПоказатели + "
				|ИНДЕКСИРОВАТЬ ПО Основной.ВидРасчета";		
				
				Запрос.Текст = ТекстЗапросаПоказатели;
				Запрос.Выполнить();
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
            |ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК Показатели
			|ПО Показатели.ВидРасчета = Основной.ВидРасчета";
			
			Если НеобходимыеДанные.КалендарныхДнейВмесяце Тогда
				ТекстЗапроса = ТекстЗапроса + "
				|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления.ФактическийПериодДействия(Регистратор = &парамРегистратор) КАК ФактическийПериодДействия
				|ПО ФактическийПериодДействия.НомерСтроки = Основной.НомерСтроки";
			КонецЕсли;
			
		КонецЕсли;
		
		Если НеобходимаБаза Тогда
			
			// ВТБазы
			//	Описание:
			// 		Альтернатива таблице РегистрРасчета.ИНАГРО_ВзносыВФонды.БазаНачисления.
			//
			ТекстЗапросаВТ = "
			|	ВЫБРАТЬ 
			|		Основной.Регистратор КАК Регистратор, 
			|		Основной.НомерСтроки КАК НомерСтроки, 
			|		СУММА(Основной.РезультатБаза)	КАК РезультатБаза
			|ПОМЕСТИТЬ ВТБазы	
			|		ИЗ (
			|		ВЫБРАТЬ 
			|			Основной.Регистратор КАК Регистратор, 
			|			Основной.НомерСтроки КАК НомерСтроки, 
			|			Основной.ВидРасчета КАК Взнос, 
			|			Основной.Сотрудник КАК Сотрудник, 
			|			БазаИзНачислений.ВидРасчета КАК ВидРасчета, 
			|			БазаИзНачислений.Результат		КАК РезультатБаза
			|		ИЗ РегистрРасчета.ИНАГРО_Удержания КАК Основной
			| 
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления КАК БазаИзНачислений
			|		ПО		Основной.Сотрудник = БазаИзНачислений.Сотрудник  
			|			И	БазаИзНачислений.ПериодРегистрации = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
			|			И	БазаИзНачислений.ПериодРегистрации <= &парамПериодРегистрации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Удержания.БазовыеВидыРасчета КАК БазовыеВидыРасчета
			|		ПО		Основной.ВидРасчета = БазовыеВидыРасчета.Ссылка  
			|			И	БазаИзНачислений.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
			| 
			|		ГДЕ Основной.Регистратор = &парамРегистратор
			|			И	Основной.Сотрудник В (&парамСотрудники)
			| 
			|       ОБЪЕДИНИТЬ ВСЕ
			|		ВЫБРАТЬ 
			|			Основной.Регистратор КАК Регистратор, 
			|			Основной.НомерСтроки КАК НомерСтроки, 
			|			Основной.ВидРасчета КАК Взнос, 
			|			Основной.Сотрудник КАК Сотрудник, 
			|			БазаИзНачислений.ВидРасчета КАК ВидРасчета, 
			|			БазаИзНачислений.Результат		КАК РезультатБаза
			|		ИЗ РегистрРасчета.ИНАГРО_Удержания КАК Основной
			| 
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Удержания КАК БазаИзНачислений
			|		ПО		Основной.Сотрудник = БазаИзНачислений.Сотрудник  
			|			И	БазаИзНачислений.ПериодРегистрации = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
			|			И	БазаИзНачислений.ПериодРегистрации <= &парамПериодРегистрации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Удержания.БазовыеВидыРасчета КАК БазовыеВидыРасчета
			|		ПО		Основной.ВидРасчета = БазовыеВидыРасчета.Ссылка  
			|			И	БазаИзНачислений.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
			| 
			|		ГДЕ Основной.Регистратор = &парамРегистратор
			|			И	Основной.Сотрудник В (&парамСотрудники)
			| 
			|	)КАК Основной 
			| 
			|	СГРУППИРОВАТЬ ПО 
			|		Основной.Регистратор, 
			|		Основной.НомерСтроки 
			| ";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТБазы КАК База
			|ПО Основной.Регистратор = База.Регистратор И Основной.НомерСтроки = База.НомерСтроки";
			
		КонецЕсли;
		
		Если НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию Тогда
			Запрос.Текст = НакопленныеДанныеТекст;
			Запрос.Выполнить();
			НакопленныеДанныеТекст = "ВТНакопленныеДанные";
			
			// присоединяем сводные данные по документу основанию
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ "+НакопленныеДанныеТекст+" КАК НакопленныеДанные
			|ПО 
			|	НакопленныеДанные.Сотрудник = Основной.Сотрудник
			|	И НакопленныеДанные.ВидРасчета = Основной.ВидРасчета
			|	И НакопленныеДанные.ДокументОснование = Основной.ДокументОснование";
		КонецЕсли;
		
		Если НеобходимыеДанные.ИсчисленныеВзносы Тогда
			Запрос.УстановитьПараметр("парамЭтоВзносыПоРаботнику", Перечисления.СпособыРасчетаНачислений.Взносы);
			
			ИсчисленныеВзносыТекст = "
			|ВЫБРАТЬ
			|	ВзносыВФонды.Сотрудник      КАК Сотрудник,
			|	СУММА(ВзносыВФонды.Результат) КАК Взносы
			|ПОМЕСТИТЬ ВТИсчисленныеВзносы
			|ИЗ
			|	РегистрРасчета.ИНАГРО_ВзносыВФонды КАК ВзносыВФонды
			|
			|ГДЕ  ВзносыВФонды.Организация = &парамОрганизация
			|	И ВзносыВФонды.ПериодРегистрации = &парамПериодРегистрации
			|	И ВзносыВФонды.ВидРасчета.СпособРасчета В (&парамЭтоВзносыПоРаботнику)
			|
			|СГРУППИРОВАТЬ ПО
			|	ВзносыВФонды.Сотрудник
			|ИНДЕКСИРОВАТЬ ПО 
			|	Сотрудник";
			
			Запрос.Текст = ИсчисленныеВзносыТекст;
			Запрос.Выполнить();
			ИсчисленныеВзносыТекст = "ВТИсчисленныеВзносы";
		
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ " + ИсчисленныеВзносыТекст + " КАК ИсчисленныеВзносы
			|ПО Основной.Сотрудник = ИсчисленныеВзносы.Сотрудник
			|
			|";
			
		КонецЕсли;
		
		Если НеобходимыеДанные.ИсчисленныйНДФЛ Тогда
			ИсчисленныйНДФЛТекст = "
			|ВЫБРАТЬ
			|	ВзаиморасчетыПоНДФЛ.Контрагент		КАК Сотрудник,
			|	СУММА(ВзаиморасчетыПоНДФЛ.Налог)	КАК НДФЛ
			|ПОМЕСТИТЬ ВТИсчисленныйНДФЛ
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛ
			|
			|ГДЕ
			|	ВзаиморасчетыПоНДФЛ.Организация = &парамОрганизация
			|	И НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛ.Период,Месяц) = НАЧАЛОПЕРИОДА(&парамПериодРегистрации,Месяц)
			|	И ВзаиморасчетыПоНДФЛ.ВидДвижения = &парамПриход
			|
			|СГРУППИРОВАТЬ ПО
			|	ВзаиморасчетыПоНДФЛ.Контрагент
			|ИНДЕКСИРОВАТЬ ПО 
			|	Контрагент";
			
			Запрос.Текст = ИсчисленныйНДФЛТекст;
			Запрос.Выполнить();
			ИсчисленныйНДФЛТекст = "ВТИсчисленныйНДФЛ";
			
			// присоединяем данные по исчисленному НДФЛ
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ "+ИсчисленныйНДФЛТекст+" КАК ИсчисленныйНДФЛ
			|ПО Основной.Сотрудник = ИсчисленныйНДФЛ.Сотрудник";
			
		КонецЕсли;
				
		Если НеобходимыеДанные.ПараметрыИсполнительногоЛиста Тогда
			Запрос.УстановитьПараметр("парамДетиДо6"	, Перечисления.СоциальныеГруппыНаселения.ДетиДо6);
			Запрос.УстановитьПараметр("парамДетиДо18"	, Перечисления.СоциальныеГруппыНаселения.ДетиДо18);
			Запрос.УстановитьПараметр("парамТрудоспособные", Перечисления.СоциальныеГруппыНаселения.Трудоспособные);
			
			Запрос.УстановитьПараметр("парамПериодРегистрации6"		, ДобавитьМесяц(ПериодРегистрации, -6*12));
			Запрос.УстановитьПараметр("парамПериодРегистрации18"	, ДобавитьМесяц(ПериодРегистрации, -18*12));
			
			// ВТДанныеПоИспольнительномуЛисту
			Если Истина Тогда
				ТекстЗапросаВТ = "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ТабличнаяЧастьДети.Ссылка                              КАК ИсполнительныйЛист, 
				|	ТабличнаяЧастьДети.Ссылка.ТарифПочты                   КАК ПочтовыйТариф, 
				|	ТабличнаяЧастьДети.Ссылка.Предел                       КАК Предел,
				|	ТабличнаяЧастьДети.Ссылка.ПометкаУвеличиватьДоМинимума КАК ПометкаУвеличиватьДоМинимума,
				|	КОЛИЧЕСТВО ( РАЗЛИЧНЫЕ ТабличнаяЧастьДети.ФизЛицо)     КАК ДетейВДокументеВсего,
				|	КОЛИЧЕСТВО ( РАЗЛИЧНЫЕ АктуальныеДети.ФизЛицо)         КАК ДетейВДокументе,
				|	КОЛИЧЕСТВО ( РАЗЛИЧНЫЕ АктуальныеДети_ДетиДо6.ФизЛицо)			КАК ДетейВДокументе6,
				|	КОЛИЧЕСТВО ( РАЗЛИЧНЫЕ АктуальныеДети_ДетиДо18.ФизЛицо)			КАК ДетейВДокументе18,
				|	КОЛИЧЕСТВО ( РАЗЛИЧНЫЕ АктуальныеДети_Трудоспособные.ФизЛицо)	КАК ДетейВДокументе19,
				|	ТабличнаяЧастьДети.Ссылка.НачалоИндексации КАК НачалоИндексации
				|ПОМЕСТИТЬ ВТДанныеПоИспольнительномуЛисту
				|
				|ИЗ	Документ.ИНАГРО_ИсполнительныйЛист.Дети КАК ТабличнаяЧастьДети
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ИсполнительныйЛист.Дети КАК АктуальныеДети
				|ПО   АктуальныеДети.ГодОкончания >= ГОД(&парамПериодРегистрации) 
				|   И АктуальныеДети.Ссылка = ТабличнаяЧастьДети.Ссылка
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ИсполнительныйЛист.Дети КАК АктуальныеДети_ДетиДо6
				|ПО   НАЧАЛОПЕРИОДА(АктуальныеДети_ДетиДо6.ФизЛицо.ДатаРождения, МЕСЯЦ) >= &парамПериодРегистрации6 
				|	И НАЧАЛОПЕРИОДА(АктуальныеДети_ДетиДо6.ФизЛицо.ДатаРождения, МЕСЯЦ) <  &парамПериодРегистрации
				|	И АктуальныеДети_ДетиДо6.ГодОкончания >= ГОД(&парамПериодРегистрации) 
				|   И АктуальныеДети_ДетиДо6.Ссылка = ТабличнаяЧастьДети.Ссылка
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ИсполнительныйЛист.Дети КАК АктуальныеДети_ДетиДо18
				|ПО   НАЧАЛОПЕРИОДА(АктуальныеДети_ДетиДо18.ФизЛицо.ДатаРождения, МЕСЯЦ) >= &парамПериодРегистрации18 
				|	И НАЧАЛОПЕРИОДА(АктуальныеДети_ДетиДо18.ФизЛицо.ДатаРождения, МЕСЯЦ) <  &парамПериодРегистрации6
				|	И АктуальныеДети_ДетиДо18.ГодОкончания >= ГОД(&парамПериодРегистрации)
				|   И АктуальныеДети_ДетиДо18.Ссылка = ТабличнаяЧастьДети.Ссылка
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ИсполнительныйЛист.Дети КАК АктуальныеДети_Трудоспособные
				|ПО   НАЧАЛОПЕРИОДА(АктуальныеДети_Трудоспособные.ФизЛицо.ДатаРождения, МЕСЯЦ) <  &парамПериодРегистрации18
				|	И АктуальныеДети_Трудоспособные.ГодОкончания >= ГОД(&парамПериодРегистрации)
				|   И АктуальныеДети_Трудоспособные.Ссылка = ТабличнаяЧастьДети.Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	ТабличнаяЧастьДети.Ссылка
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
			КонецЕсли;
			Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТДанныеПоИспольнительномуЛисту";
			
			// присоединяем данные для расчета исполнительных листов
			ТекстЗапроса = ТекстЗапроса + "
			|		
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПоИспольнительномуЛисту КАК ИсполниетльныеЛисты
			|ПО   Основной.ДокументОснование = ИсполниетльныеЛисты.ИсполнительныйЛист 
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы.СрезПоследних(&парамПериодРегистрации) КАК ИсполниетльныеЛисты_ДетиДо6
			|ПО   ИсполниетльныеЛисты_ДетиДо6.СоциальнаяГруппа = &парамДетиДо6 
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы.СрезПоследних(&парамПериодРегистрации) КАК ИсполниетльныеЛисты_ДетиДо18
			|ПО   ИсполниетльныеЛисты_ДетиДо18.СоциальнаяГруппа = &парамДетиДо18 
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы.СрезПоследних(&парамПериодРегистрации) КАК ИсполниетльныеЛисты_Трудоспособные
			|ПО   ИсполниетльныеЛисты_Трудоспособные.СоциальнаяГруппа = &парамТрудоспособные"; 
		КонецЕсли;
				
		Если НеобходимыеДанные.ПараметрыПочты Тогда
			Запрос.УстановитьПараметр("СпособРасчетаПочтовыйСбор", Перечисления.СпособыРасчетаНачислений.ПочтовыйСбор);
			
			// ВТРазмерПочтовогоПеревода
			Если Истина Тогда 
				// 
				//
				ТекстЗапросаВТ =  "
				|ВЫБРАТЬ
				|	Основная.Сотрудник КАК Сотрудник,
				|	Основная.Организация,
				|	Основная.ДокументОснование,
				|	СУММА(Дополнительная.Результат) КАК РазмерПочтовогоПеревода
				|ПОМЕСТИТЬ ВТРазмерПочтовогоПеревода
				|ИЗ
				|	РегистрРасчета.ИНАГРО_Удержания КАК Основная
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Удержания КАК Дополнительная
				|		ПО Основная.ПериодРегистрации = Дополнительная.ПериодРегистрации
				|			И Основная.Сотрудник = Дополнительная.Сотрудник
				|			И Основная.Организация = Дополнительная.Организация
				|			И Основная.ДокументОснование = Дополнительная.ДокументОснование
				|			И Основная.ВидРасчета <> Дополнительная.ВидРасчета
				|ГДЕ
				|	Основная.Регистратор = &парамРегистратор
				|	И Основная.ВидРасчета.СпособРасчета = &СпособРасчетаПочтовыйСбор
				|
				|СГРУППИРОВАТЬ ПО
				|	Основная.Сотрудник,
				|	Основная.Организация,
				|	Основная.ДокументОснование
				|ИНДЕКСИРОВАТЬ ПО 
				|	Сотрудник
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТДвиженияРаботников = "ВТРазмерПочтовогоПеревода";
			КонецЕсли; 
			
			// ВТПараметрыПочты
			Если Истина Тогда 
				// 
				//
				ТекстЗапросаВТ =  "
				|ВЫБРАТЬ 
				|  ПараметрыПочты.ПочтовыйТариф  			КАК ПочтовыйТариф,
				|  ПараметрыПочты.Порог   		 			КАК Порог,
				|  ЕСТЬNULL(ПараметрыПочты.НижнийПорог, 0)	КАК НижнийПорог,
				|  ПочтовыеСборыСтавки.Ставка   		 	КАК Ставка,
				|  ПочтовыеСборыСтавки.СуммаДополнительно	КАК СуммаДополнительно,
				|  ПочтовыеСборыСтавки.СуммаМинимальная		КАК СуммаМинимальная
				|  
				|ПОМЕСТИТЬ ВТПараметрыПочты
				|ИЗ (
				|	ВЫБРАТЬ 
				|	  ПочтовыеСборыПериод.ПочтовыйТариф  		КАК ПочтовыйТариф,
				|	  ПочтовыеСборыПериод.Период   		 		КАК Период,
				|	  ПочтовыеСборыПериод.Порог   		 		КАК Порог,
				|	  МАКСИМУМ(ПочтовыеСборы.Порог)   	КАК НижнийПорог
				|
				|	ИЗ (
				|		ВЫБРАТЬ 
				|		  	ПочтовыеСборыПериод.ПочтовыйТариф  	КАК ПочтовыйТариф,
				|		  	ПочтовыеСборыПериод.Период  		КАК Период,
				|		  	ПочтовыеСборы.Порог   				КАК Порог
				|
				|		  	ИЗ (
				|	 			ВЫБРАТЬ   
				|					ПочтовыеСборы.ПочтовыйТариф  		КАК ПочтовыйТариф,
				|					МАКСИМУМ(ПочтовыеСборы.Период)  	КАК Период
				|		  		ИЗ РегистрСведений.ИНАГРО_ШкалаПочтовыхСборов КАК ПочтовыеСборы
				|				ГДЕ ПочтовыеСборы.Период <= &парамПериодРегистрации
				|				СГРУППИРОВАТЬ ПО
				|		  			ПочтовыеСборы.ПочтовыйТариф
				|		  	) КАК ПочтовыеСборыПериод
				|		  	ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.ИНАГРО_ШкалаПочтовыхСборов КАК ПочтовыеСборы
				|		  	ПО ПочтовыеСборы.ПочтовыйТариф = ПочтовыеСборыПериод.ПочтовыйТариф
				|		  	И ПочтовыеСборы.Период = ПочтовыеСборыПериод.Период
				|
				|	   ) КАК ПочтовыеСборыПериод
				|	 
				|	ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.ИНАГРО_ШкалаПочтовыхСборов КАК ПочтовыеСборы
				|	 ПО  ПочтовыеСборыПериод.ПочтовыйТариф = ПочтовыеСборы.ПочтовыйТариф
				|		И ПочтовыеСборыПериод.Период       = ПочтовыеСборы.Период
				|		И ПочтовыеСборы.Порог        < ПочтовыеСборыПериод.Порог
				|
				|	СГРУППИРОВАТЬ ПО 
				|	  ПочтовыеСборыПериод.ПочтовыйТариф,
				|	  ПочтовыеСборыПериод.Период,
				|	  ПочтовыеСборыПериод.Порог
				|  
				|) КАК ПараметрыПочты
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ  РегистрСведений.ИНАГРО_ШкалаПочтовыхСборов КАК ПочтовыеСборыСтавки
				| ПО  ПараметрыПочты.ПочтовыйТариф	= ПочтовыеСборыСтавки.ПочтовыйТариф
				|	И ПараметрыПочты.Период		= ПочтовыеСборыСтавки.Период
				|	И ПараметрыПочты.Порог        		= ПочтовыеСборыСтавки.Порог
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТДвиженияРаботников = "ВТПараметрыПочты";
			КонецЕсли;
			
			// присоединяем данные для расчета почтового сбора
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерПочтовогоПеревода КАК ПочтовыеПереводы
			|ПО Основной.Сотрудник = ПочтовыеПереводы.Сотрудник И
			|	Основной.Организация = ПочтовыеПереводы.Организация И
			|	Основной.ДокументОснование = ПочтовыеПереводы.ДокументОснование
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыПочты КАК ПараметрыПочты
			|ПО ПочтовыеПереводы.ДокументОснование.ТарифПочты = ПараметрыПочты.ПочтовыйТариф 
			|	И ПочтовыеПереводы.РазмерПочтовогоПеревода <= ПараметрыПочты.Порог
			|	И ПочтовыеПереводы.РазмерПочтовогоПеревода > ПараметрыПочты.НижнийПорог
			|";
			
		КонецЕсли;
		
		Если НеобходимыеДанные.ПараметрыИндексацииАлиментов Тогда
			Запрос.УстановитьПараметр("СпособРасчетаИндексацияАлиментов", Перечисления.СпособыРасчетаНачислений.ИндексацияАлиментов);
			
			// ВТПараметрыИндексацииАлиментов
			Если Истина Тогда 
				// 
				//
				ТекстЗапросаВТ =  "
				|ВЫБРАТЬ
				|	Основная.Сотрудник КАК Сотрудник,
				|	Основная.Организация,
				|	Основная.ДокументОснование,
				|	СУММА(Дополнительная.Результат) КАК БазаИндексации
				|ПОМЕСТИТЬ ВТПараметрыИндексацииАлиментов
				|ИЗ
				|	РегистрРасчета.ИНАГРО_Удержания КАК Основная
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Удержания КАК Дополнительная
				|		ПО Основная.ПериодРегистрации = Дополнительная.ПериодРегистрации
				|			И Основная.Сотрудник = Дополнительная.Сотрудник
				|			И Основная.Организация = Дополнительная.Организация
				|			И Основная.ДокументОснование = Дополнительная.ДокументОснование
				|			И Основная.ВидРасчета <> Дополнительная.ВидРасчета
				|			И Основная.ВидРасчета.КатегорияРасчета.Порядок > Дополнительная.ВидРасчета.КатегорияРасчета.Порядок
				|ГДЕ
				|	Основная.Регистратор = &парамРегистратор
				|	И Основная.ВидРасчета.СпособРасчета = &СпособРасчетаИндексацияАлиментов
				|
				|СГРУППИРОВАТЬ ПО
				|	Основная.Сотрудник,
				|	Основная.Организация,
				|	Основная.ДокументОснование
				|ИНДЕКСИРОВАТЬ ПО 
				|	Сотрудник
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТДвиженияРаботников = "ВТПараметрыИндексацииАлиментов";
			КонецЕсли; 
			
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыИндексацииАлиментов КАК ПараметрыИндексацииАлиментов
			|ПО Основной.Сотрудник = ПараметрыИндексацииАлиментов.Сотрудник И
			|	Основной.Организация = ПараметрыИндексацииАлиментов.Организация И
			|	Основной.ДокументОснование = ПараметрыИндексацииАлиментов.ДокументОснование
			|";
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ " + ВнешнееУсловие;
		
	КонецЕсли;	
		
	Если ИмяРегистра = "ИНАГРО_ВзносыВФонды" Тогда
		
		НеобходимаБаза = Истина;
		ТолькоПоДвижениямТекущегоДокумента=ТипЗнч(Регистратор)=Тип("ДокументСсылка.ИНАГРО_ЗарплатаКВыплатеОрганизаций");
		
		ИспользуетсяЕСВ = ИспользуетсяЕСВ(Регистратор.ПериодРегистрации);
		
		Запрос.УстановитьПараметр("РасчетЗКВ",ТолькоПоДвижениямТекущегоДокумента);
		Запрос.УстановитьПараметр("ПрименятьКоэффициентЕСВДляАвансов",РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Регистратор.Организация)).ПрименятьКоэффициентЕСВДляАвансов);
		Запрос.УстановитьПараметр("ИсползуетсяЕСВ1573",(Регистратор.ПериодРегистрации >= ДатаИзмененияЕСВ1573()));
		Запрос.УстановитьПараметр("ИсползуетсяЕСВ1863",(Регистратор.ПериодРегистрации >= ДатаИзмененияЕСВ1863()));
		Запрос.УстановитьПараметр("МассивНалогиБезКоэффициента",СписокНалогиБезКоэффициента());
		Запрос.УстановитьПараметр("ИсползуетсяЕСВ3688",(Регистратор.ПериодРегистрации >= ДатаИзмененияЕСВ3688()));
		
		ТекстЗапроса = 
		"ВЫБРАТЬ 
		|	Основной.Регистратор				КАК Регистратор, 
		|	ЛОЖЬ	КАК ОтражатьВУпрУчете, 
		|	ИСТИНА	КАК ОтражатьВРеглУчете, 
		|	ВЫБОР КОГДА Основной.Регистратор ССЫЛКА Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ	КАК ЗарплатаКВыплатеОрганизаций,
		|	Основной.НомерСтроки				КАК НомерСтроки, 
		|	Основной.Сотрудник					КАК Сотрудник, 
		|	Основной.Сотрудник.Наименование		КАК СотрудникНаименование, 
		|	Основной.Предел 					КАК Предел,
		|	Основной.ВидРасчета 				КАК ВидРасчета,
		|	Основной.ВидРасчета.Наименование	КАК ВидРасчетаНаименование,
		|	Основной.ВидРасчета.СпособРасчета	КАК СпособРасчета,
		|	Основной.Налог 						КАК Налог,
		|	Основной.НомерПорога                КАК НомерПорога, 
		|	Основной.МинимальнаяБаза 			КАК МинимальнаяБаза,
		|	ВЫБОР 
		|	  КОГДА НЕ &ИсползуетсяЕСВ1573 
		|		ТОГДА ЛОЖЬ
		|	  КОГДА Основной.Налог В (&МассивНалогиБезКоэффициента) 
		|		ТОГДА ЛОЖЬ
		|	  КОГДА &РасчетЗКВ И НЕ &ПрименятьКоэффициентЕСВДляАвансов 
		|		ТОГДА ЛОЖЬ
		|	  КОГДА &ИсползуетсяЕСВ1863
		|		ТОГДА ИСТИНА
		|	  КОГДА Основной.Сотрудник.ИНАГРО_ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы) 
		|		ТОГДА ЛОЖЬ
		|	  КОГДА Основной.ВидРасчета.КатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.ЗависимоеВторогоУровня) ИЛИ Основной.ВидРасчета.КатегорияРасчета = ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.ЗависимоеТретьегоУровня) 
		|		ТОГДА ЛОЖЬ
		|	  ИНАЧЕ ИСТИНА 
		|	КОНЕЦ КАК ПрименениеКоэффициентаЕСВ,
		|	КоэффициентыСтавкиВзносовФОТ.КоэффициентСтавки КАК КоэффициентСтавки,
        |   &ИсползуетсяЕСВ1863 КАК ИсползуетсяЕСВ1863,
	    |
		|	ВЫБОР КОГДА Основной.ВидРасчета.СтавкаПоПериодуРегистрации ТОГДА ВсеВзносыПоМесяцуРегистрации.СтатьяНалоговойДекларации	ИНАЧЕ ВсеВзносы.СтатьяНалоговойДекларации КОНЕЦ			КАК СтатьяНалоговойДекларации, 
		|	ВЫБОР КОГДА Основной.ВидРасчета.СтавкаПоПериодуРегистрации ТОГДА ВсеВзносыПоМесяцуРегистрации.Ставка					ИНАЧЕ ВсеВзносы.Ставка КОНЕЦ                     		КАК Ставка, 
		|	ВЫБОР КОГДА Основной.ВидРасчета.СтавкаПоПериодуРегистрации ТОГДА ВсеВзносыПоМесяцуРегистрации.СтавкаПолная				ИНАЧЕ ВсеВзносы.СтавкаПолная КОНЕЦ                     	КАК СтавкаПолная,
		|	ВЫБОР КОГДА Основной.ВидРасчета.СтавкаПоПериодуРегистрации ТОГДА ВсеВзносыПоМесяцуРегистрации.НижнийПорог				ИНАЧЕ ВсеВзносы.НижнийПорог КОНЕЦ						КАК НижнийПорог,
		|	ВЫБОР КОГДА Основной.ВидРасчета.СтавкаПоПериодуРегистрации ТОГДА ВсеВзносыПоМесяцуРегистрации.Порог						ИНАЧЕ ВсеВзносы.Порог КОНЕЦ								КАК Порог
		|"; 
			
		ТекстЗапроса = ТекстЗапроса + ",
		|Баз.РезультатБаза КАК РезультатБаза,
		|Баз.РезультатБазаОтпускные КАК РезультатБазаОтпускные,
		|БазВычет.РезультатБаза КАК БазаВычет,
		|БазПолные.РезультатБаза КАК БазаПолная,
		|БазДо.БазаДо КАК БазаДо,
		|БазДо.БазаВзносаДо КАК БазаВзносаДо";
		
		ТекстЗапроса = ТекстЗапроса + "
		|	ИЗ РегистрРасчета.ИНАГРО_ВзносыВФонды Как Основной";
		
		// ВТБазы
		Если Истина Тогда 
			
			Если ИспользуетсяЕСВ Тогда
				
				Запрос.УстановитьПараметр("СписокДекретныеПоЕСВ",СписокДекретныеПоЕСВ());
				Запрос.УстановитьПараметр("СписокГПХПоЕСВ",СписокГПХПоЕСВ());
				
				ТекстФильтрПоПериодам = "				И	ВЫБОР КОГДА БазаИзНачислений.ВидРасчета.ЭтоБольничные // Больничные
										|			ИЛИ  БазаИзНачислений.ВидРасчета В (&СписокГПХПоЕСВ) // Оплата по договору ГПХ
										|			ИЛИ  БазаИзНачислений.ВидРасчета В (&СписокДекретныеПоЕСВ) // Декретные
										|			ИЛИ  НЕ Основной.ВидРасчета.ЕСВ //Это старый взнос
										|			ТОГДА	НАЧАЛОПЕРИОДА(БазаИзНачислений.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
										|			    И   БазаИзНачислений.ПериодРегистрации <= &парамПериодРегистрации
										|           КОГДА БазаИзНачислений.ВидРасчета.ЭтоОтпускные // Отпускные
										|               И НАЧАЛОПЕРИОДА(БазаИзНачислений.ПериодДействия, МЕСЯЦ) = &парамПериодРегистрации
										|			ТОГДА НАЧАЛОПЕРИОДА(БазаИзНачислений.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
										|			    И   БазаИзНачислений.ПериодРегистрации <= &парамПериодРегистрации
										|           КОГДА БазаИзНачислений.ВидРасчета.ЭтоОтпускные // Отпускные
										|               И НЕ БазаИзНачислений.Сторно
										|			ТОГДА НАЧАЛОПЕРИОДА(БазаИзНачислений.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
										|			    И   БазаИзНачислений.ПериодРегистрации = &парамПериодРегистрации
										|			ИНАЧЕ	((НАЧАЛОПЕРИОДА(БазаИзНачислений.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
										|			    И   БазаИзНачислений.ПериодРегистрации = &парамПериодРегистрации
										|               И   НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ) = &парамПериодРегистрации) // Начислено в текущем месяце за этот месяц
										|               ИЛИ (НАЧАЛОПЕРИОДА(БазаИзНачислений.ПериодДействия, МЕСЯЦ) < НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
										|			    И   БазаИзНачислений.ПериодРегистрации = &парамПериодРегистрации
										|               И   НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ) = &парамПериодРегистрации) // Начислено в текущем месяце за предыдущий месяц
										|               ИЛИ (НАЧАЛОПЕРИОДА(БазаИзНачислений.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
										|			    И   БазаИзНачислений.ПериодРегистрации < &парамПериодРегистрации
										|               И   НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ) = &парамПериодРегистрации)) // Начислено в предыдущем месяце за текущий месяц
										|
										|           КОНЕЦ
										|";	
			Иначе
				ТекстФильтрПоПериодам = "			И	НАЧАЛОПЕРИОДА(БазаИзНачислений.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
										|			И	БазаИзНачислений.ПериодРегистрации <= &парамПериодРегистрации";	
			КонецЕсли;
			
			//	Описание:
			// 		Альтернатива таблице РегистрРасчета.ИНАГРО_ВзносыВФонды.БазаНачисления.
			//
			ТекстЗапросаВТ = "
			|		ВЫБРАТЬ 
			|			Основной.Регистратор КАК Регистратор, 
			|			Основной.НомерСтроки КАК НомерСтроки, 
			|			Основной.ВидРасчета КАК ВидРасчета,
			|			Основной.Сотрудник КАК Сотрудник,
			|			Основной.ТипНачисления КАК ТипНачисления,
			|           ВЫБОР
			|            КОГДА Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_ВзносыВФонды.ЕСВФОТМобилизованные)
			|            ТОГДА 4
			|			 ИНАЧЕ Основной.ВидРасчета.КатегорияРасчета.Порядок 
			|			КОНЕЦ КАК Порядок,
			|			Основной.Налог КАК Налог,
			|			НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ) КАК БазовыйПериодНачало, 
			|			СУММА(ВЫБОР КОГДА БазаИзНачислений.ВидРасчета.ЭтоОтпускные И БазаИзНачислений.ПериодРегистрации = &парамПериодРегистрации ТОГДА БазаИзНачислений.Результат ИНАЧЕ 0 КОНЕЦ)	КАК РезультатБазаОтпускные, 
			|			СУММА(БазаИзНачислений.Результат)		КАК РезультатБаза 
			|ПОМЕСТИТЬ ВТБазы	
			|		ИЗ РегистрРасчета.ИНАГРО_ВзносыВФонды КАК Основной
			| 
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления КАК БазаИзНачислений
			|		ПО		Основной.Сотрудник = БазаИзНачислений.Сотрудник  
			|"+ТекстФильтрПоПериодам+"
			|  			" + ?(ТолькоПоДвижениямТекущегоДокумента," И БазаИзНачислений.Регистратор = &парамРегистратор", "") + "
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_ВзносыВФонды.БазовыеВидыРасчета КАК БазовыеВидыРасчета
			|		ПО		Основной.ВидРасчета = БазовыеВидыРасчета.Ссылка  
			|			И	БазаИзНачислений.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
			| 
			|		ГДЕ Основной.Регистратор = &парамРегистратор
			|			И	Основной.Сотрудник В (&парамСотрудники)
			| 
			|		СГРУППИРОВАТЬ ПО 
			|			Основной.Регистратор, 
			|			Основной.НомерСтроки,
			|			Основной.ВидРасчета,
			|			Основной.Сотрудник,
			|			Основной.ТипНачисления,
			|           ВЫБОР
			|            КОГДА Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_ВзносыВФонды.ЕСВФОТМобилизованные)
			|            ТОГДА 4
			|			 ИНАЧЕ Основной.ВидРасчета.КатегорияРасчета.Порядок 
			|			КОНЕЦ,
			|			Основной.Налог,
			|			НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ) 
			| ";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТБазы = "ВТБазы";
		КонецЕсли; 
		
		// ВТБазыДо 
		Если Истина Тогда 
			
			Если ИспользуетсяЕСВ Тогда
				
				МассивПенсионный = Новый СписокЗначений();
				МассивПенсионный.Добавить(ПланыВидоврасчета.ИНАГРО_ВзносыВФонды.Пенсионный20050101);
				МассивПенсионный.Добавить(ПланыВидоврасчета.ИНАГРО_ВзносыВФонды.Пенсионный20070101);
				
				МассивПенсионныйФОТ = Новый СписокЗначений();
				МассивПенсионныйФОТ.Добавить(ПланыВидоврасчета.ИНАГРО_ВзносыВФонды.ПенсионныйФОТ20050101);
				
				Запрос.УстановитьПараметр("МассивПенсионный",МассивПенсионный);
				Запрос.УстановитьПараметр("МассивПенсионныйФОТ",МассивПенсионныйФОТ);
				Запрос.УстановитьПараметр("ДатаЕСВ",ДатаВводаЕСВ());
				
				
				// Здесь отбираем по принципу - если начисляется в 2011 году, и за этот период начислено еще в 2010,
				// то базу до определяем по пенсионному фонду.
				ТекстФильтр = "			И ВЫБОР КОГДА НАЧАЛОПЕРИОДА(БазаИзВзносов.ПериодРегистрации, МЕСЯЦ) >= &ДатаЕСВ
							  |				ТОГДА Основной.Налог = БазаИзВзносов.Налог
							  |			  КОГДА Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_ВзносыВФонды.ЕСВ)
							  |				ТОГДА Основной.Налог = БазаИзВзносов.Налог ИЛИ БазаИзВзносов.ВидРасчета В (&МассивПенсионный)
							  |			  КОГДА Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_ВзносыВФонды.ЕСВФОТ)
							  |				ТОГДА Основной.Налог = БазаИзВзносов.Налог ИЛИ БазаИзВзносов.ВидРасчета В (&МассивПенсионныйФОТ)
							  |				ИНАЧЕ Основной.Налог = БазаИзВзносов.Налог
							  |			КОНЕЦ";	
			Иначе
				ТекстФильтр = "			И	Основной.Налог = БазаИзВзносов.Налог";	
			КонецЕсли;
			
			//	Описание:
			// 		суммы уже начисленные ранее по анализируемым в расчете периодам.
			//
			ТекстЗапросаВТ = "
			|		ВЫБРАТЬ 
			|			Основной.Регистратор КАК Регистратор,
			|			Основной.НомерСтроки КАК НомерСтроки,
			|			Основной.ВидРасчета КАК ВидРасчета,
			|			Основной.Сотрудник КАК Сотрудник,
			|			Основной.ТипНачисления КАК ТипНачисления,
			|           ВЫБОР
			|            КОГДА Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_ВзносыВФонды.ЕСВФОТМобилизованные)
			|            ТОГДА 4
			|			 ИНАЧЕ Основной.ВидРасчета.КатегорияРасчета.Порядок 
			|			КОНЕЦ КАК Порядок,
			|			Основной.Налог КАК Налог,
			|			НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ) КАК БазовыйПериодНачало,
			|			СУММА(БазаИзВзносов.База)		КАК БазаДо, 
			|			СУММА(БазаИзВзносов.БазаВзноса)	КАК БазаВзносаДо 
			|ПОМЕСТИТЬ ВТБазыДо	
			|		ИЗ РегистрРасчета.ИНАГРО_ВзносыВФонды  КАК Основной
			| 
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_ВзносыВФонды КАК БазаИзВзносов
			|		ПО		Основной.Сотрудник = БазаИзВзносов.Сотрудник  
			|"+ТекстФильтр+"
			|			И	НАЧАЛОПЕРИОДА(БазаИзВзносов.БазовыйПериодНачало, МЕСЯЦ) = НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
			|			И	БазаИзВзносов.ПериодРегистрации < &парамПериодРегистрации
			|  			" + ?(ТолькоПоДвижениямТекущегоДокумента," И БазаИзВзносов.Регистратор = &парамРегистратор", "") + "
			| 
			|		ГДЕ Основной.Регистратор = &парамРегистратор
			|			И	Основной.Сотрудник В (&парамСотрудники)
			| 
			|		СГРУППИРОВАТЬ ПО 
			|			Основной.Регистратор, 
			|			Основной.НомерСтроки,
			|			Основной.ВидРасчета,
			|			Основной.Сотрудник,
			|			Основной.ТипНачисления,
			|           ВЫБОР
			|            КОГДА Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_ВзносыВФонды.ЕСВФОТМобилизованные)
			|            ТОГДА 4
			|			 ИНАЧЕ Основной.ВидРасчета.КатегорияРасчета.Порядок 
			|			КОНЕЦ,
			|			Основной.Налог,
			|			НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ)
			| ";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТБазыДо = "ВТБазыДо";
		КонецЕсли; 
		
				// ВТБазыВычет
		Если Истина Тогда
			
			// БазаВычет - база взносов ЕСВ, которая имеет более высокий порядок в расчете.
			// Для оплаты взносов с оплаты по ГПХ - это взносы с основной зарплаты
			// Для оплаты взносов с больничных - это взносы с основной зарплаты и взносы с оплаты по ГПХ
			// Используется при определении базы взноса с учетом общего Предела.
			// Т.е. предел при расчете будет уменьшен на сумму БазаВычет.
			
			ТекстЗапросаВТ = "
			|	ВЫБРАТЬ
			|       Результаты.Регистратор КАК Регистратор, 
			|		Результаты.НомерСтроки КАК НомерСтроки, 
			|		СУММА(Результаты.Результат)		КАК РезультатБаза
			|ПОМЕСТИТЬ ВТБазыВычет
			|    ИЗ(
			|		ВЫБРАТЬ 
			|			Основной.Регистратор КАК Регистратор, 
			|			Основной.НомерСтроки КАК НомерСтроки, 
			|			База.РезультатБаза   КАК Результат 
			|		ИЗ ВТБазы КАК Основной
			| 
			|		ЛЕВОЕ СОЕДИНЕНИЕ 
			// Если по взносу есть База, то она будет включать в себя и БазуДо
			// Но если Базы в этом периоде нет, то БазуДо надо учесть все равно.
			|			(ВЫБРАТЬ
			|			 ЕСТЬNULL(Базы.Регистратор,БазыДо.Регистратор) КАК Регистратор, 
			|			 ЕСТЬNULL(Базы.НомерСтроки,БазыДо.НомерСтроки) КАК НомерСтроки, 
			|			 ЕСТЬNULL(Базы.ВидРасчета,БазыДо.ВидРасчета) КАК ВидРасчета,
			|			 ЕСТЬNULL(Базы.ВидРасчета.СпособРасчета,БазыДо.ВидРасчета.СпособРасчета) КАК СпособРасчета,
			|			 ЕСТЬNULL(Базы.Порядок,БазыДо.Порядок) КАК Порядок,
			|			 ЕСТЬNULL(Базы.Сотрудник,БазыДо.Сотрудник) КАК Сотрудник,
			|			 ЕСТЬNULL(Базы.ТипНачисления,БазыДо.ТипНачисления) КАК ТипНачисления,
			|			 НАЧАЛОПЕРИОДА(ЕСТЬNULL(Базы.БазовыйПериодНачало,БазыДо.БазовыйПериодНачало), МЕСЯЦ) КАК БазовыйПериодНачало,
			|			 ВЫБОР 
			|			  КОГДА ЕСТЬNULL(Базы.РезультатБаза,0) <> 0 ТОГДА Базы.РезультатБаза
			|             ИНАЧЕ ЕСТЬNULL(БазыДо.БазаВзносаДо,0)
			|            КОНЕЦ КАК РезультатБаза
			|			 ИЗ ВТБазы КАК Базы
			|			 ПОЛНОЕ СОЕДИНЕНИЕ ВТБазыДо КАК БазыДо
			|			 ПО Базы.НомерСтроки = БазыДо.НомерСтроки ) КАК База 
			|		ПО Основной.Сотрудник = База.Сотрудник
			|        И Основной.БазовыйПериодНачало = База.БазовыйПериодНачало
			|		 И Основной.ВидРасчета.СпособРасчета = База.СпособРасчета
			|        И Основной.Порядок > База.Порядок
			|        И База.ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_ВзносыВФонды.ЕСВМобилизованные)  
			|		) КАК Результаты	
			|			
			| 
			|		СГРУППИРОВАТЬ ПО 
			|			Результаты.Регистратор, 
			|			Результаты.НомерСтроки 
			| 
			|";
			
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТБазы = "ВТБазы";
		КонецЕсли; 
		
		// ВТБазыПолные
		Если Истина Тогда
			
			// БазаПолная - общая база взносов ЕСВ, за исключением взносов ГПХ
			
			ТекстЗапросаВТ = "
			|ВЫБРАТЬ
			|	ЕСТЬNULL(Базы.Регистратор,БазыДо.Регистратор) КАК Регистратор, 
			|	ЕСТЬNULL(Базы.НомерСтроки,БазыДо.НомерСтроки) КАК НомерСтроки, 
			|	ЕСТЬNULL(Базы.ВидРасчета,БазыДо.ВидРасчета) КАК ВидРасчета,
			|	ЕСТЬNULL(Базы.ВидРасчета.СпособРасчета,БазыДо.ВидРасчета.СпособРасчета) КАК СпособРасчета,
			|	ЕСТЬNULL(Базы.ВидРасчета.КатегорияРасчета,БазыДо.ВидРасчета.КатегорияРасчета) КАК КатегорияРасчета,
			|	ЕСТЬNULL(Базы.Порядок,БазыДо.Порядок) КАК Порядок,
			|	ЕСТЬNULL(Базы.Налог,БазыДо.Налог) КАК Налог,
			|	ЕСТЬNULL(Базы.Сотрудник,БазыДо.Сотрудник) КАК Сотрудник,
			|	ЕСТЬNULL(Базы.ТипНачисления,БазыДо.ТипНачисления) КАК ТипНачисления,
			|	НАЧАЛОПЕРИОДА(ЕСТЬNULL(Базы.БазовыйПериодНачало,БазыДо.БазовыйПериодНачало), МЕСЯЦ) КАК БазовыйПериодНачало,
			|	ВЫБОР 
			|	  КОГДА ЕСТЬNULL(Базы.РезультатБаза,0) <> 0 ТОГДА Базы.РезультатБаза
			|     ИНАЧЕ ЕСТЬNULL(БазыДо.БазаДо,0)
			|   КОНЕЦ КАК РезультатБаза
			|ПОМЕСТИТЬ ВТБазыИБазыДо
			|ИЗ ВТБазы КАК Базы
			|	ПОЛНОЕ СОЕДИНЕНИЕ ВТБазыДо КАК БазыДо
			|	ПО Базы.НомерСтроки = БазыДо.НомерСтроки
			|;
			|
			|	ВЫБРАТЬ
			|       Результаты.Регистратор КАК Регистратор, 
			|		Результаты.НомерСтроки КАК НомерСтроки, 
			|		СУММА(Результаты.Результат)		КАК РезультатБаза
			|ПОМЕСТИТЬ ВТБазыПолные
			|    ИЗ(
			|		ВЫБРАТЬ 
			|			Основной.Регистратор КАК Регистратор, 
			|			Основной.НомерСтроки КАК НомерСтроки, 
			|			База.Порядок   КАК Порядок, 
			|			МАКСИМУМ(База.РезультатБаза)   КАК Результат 
			//|		ИЗ ВТБазы КАК Основной
			|		ИЗ ВТБазыИБазыДо КАК Основной
			| 
			|		ЛЕВОЕ СОЕДИНЕНИЕ 
			|		ВТБазыИБазыДо КАК База 
			|		ПО Основной.Сотрудник = База.Сотрудник
			|        И Основной.БазовыйПериодНачало = База.БазовыйПериодНачало
			|		 И Основной.СпособРасчета = База.СпособРасчета
			|		 И База.Налог  <> ЗНАЧЕНИЕ(Справочник.Налоги.ЕСВФОТМобилКомп) 
			|		 И (&ИсползуетсяЕСВ3688 
			|		  ИЛИ
			// Не считаем базу для ЕСВ с ГПХ и не учитываем ее в самой базе
			|        (Основной.КатегорияРасчета <>  ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.ЗависимоеПервогоУровня)
			|        И База.КатегорияРасчета <>  ЗНАЧЕНИЕ(Перечисление.КатегорииРасчетов.ЗависимоеПервогоУровня)))
			|		СГРУППИРОВАТЬ ПО Основной.Регистратор,Основной.НомерСтроки,База.Порядок   	
			|		) КАК Результаты	
			|			
			| 
			|		СГРУППИРОВАТЬ ПО 
			|			Результаты.Регистратор, 
			|			Результаты.НомерСтроки 
			| 
			|";
			
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
		КонецЕсли; 
		
		//	ВТКоэффициентыСтавкиВзносовФОТ
		Если Истина Тогда
			ТекстЗапросаВТ = "
 			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
 			|	КоэффициентыСтавкиВзносовФОТ.КоэффициентСтавки
			|ПОМЕСТИТЬ ВТКоэффициентыСтавкиВзносовФОТ
			|ИЗ
 			|	РегистрСведений.КоэффициентыСтавкиВзносовФОТ КАК КоэффициентыСтавкиВзносовФОТ
			|ГДЕ
			|	КоэффициентыСтавкиВзносовФОТ.Организация = &парамОрганизация
			|	И КоэффициентыСтавкиВзносовФОТ.МесяцНачисления = &парамПериодРегистрации
			|";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТКоэффициентыСтавкиВзносовФОТ = "ВТКоэффициентыСтавкиВзносовФОТ";
		КонецЕсли;
		
		//	ВТПолнаяШкалаПоМесяцуРегистрации
		Если Истина Тогда
			//	Описание:
			// 		Тут получаем все Параметры таблицы ШкалаСтавокНалогов сгруппированые по Налоговым пеиодам
			// 		Так как налог одновременно не может быть и для всех организация 
			//		и для одно достаточно вытащить все с пустой орг. и по текущей.
			//
			ТекстЗапросаВТ = "
 			|		ВЫБРАТЬ 
 			|			ВсяШкала.Налог			КАК Налог,
 			|			ВсяШкала.Период			КАК Период,
 			|			ВсяШкала.Организация	КАК Организация,
 			|			ВсяШкала.СтатьяНалоговойДекларации	КАК СтатьяНалоговойДекларации,
 			|			ВсяШкала.Ставка						КАК Ставка,
 			|			ВсяШкала.СтавкаПолная				КАК СтавкаПолная,
 			|			ЕСТЬNULL(ШкалаНижнийПорог.Порог,0)	КАК НижнийПорог,
 			|			ВсяШкала.Порог						КАК Порог,
 			|			ВсяШкала.НомерПорога				КАК НомерПорога,
 			|			ВсяШкала.НомерПорога.Порядок		КАК НомерПорогаПорядок,
 			|			ВсяШкала.НижнийНомерПорогаПорядок	КАК НижнийНомерПорогаПорядок,
 			|			ШкалаНижнийПорог.НомерПорога		КАК НижнийНомерПорога
			|ПОМЕСТИТЬ ВТПолнаяШкалаПоМесяцуРегистрации	
 			|		ИЗ (	ВЫБРАТЬ 
 			|					ШкалаПериодОрганизация.Налог		КАК Налог,
 			|					ШкалаПериодОрганизация.Период		КАК Период,
 			|					ШкалаПериодОрганизация.Организация	КАК Организация,
 			|					Шкала.СтатьяНалоговойДекларации	КАК СтатьяНалоговойДекларации,
 			|					Шкала.Ставка					КАК Ставка,
 			|					Шкала.СтавкаПолная				КАК СтавкаПолная,			
 			|					Шкала.Порог						КАК Порог,
 			|					Шкала.НомерПорога				КАК НомерПорога,
 			|					Шкала.НомерПорога.Порядок		КАК НомерПорогаПорядок,
 			|					МАКСИМУМ(ШкалаНижнийПорог.НомерПорога.Порядок)  КАК НижнийНомерПорогаПорядок
 			|				ИЗ (
 			|						ВЫБРАТЬ 
 			|							ШкалаСтавок.Налог	КАК Налог,
 			|							ШкалаСтавок.Период	КАК Период,
 			|							МАКСИМУМ(ШкалаСтавок.Организация)	КАК Организация
 			|						ИЗ (
 			|							ВЫБРАТЬ 
 			|								ШкалаСтавокНалогов.Налог							КАК Налог,
 			|								МАКСИМУМ(ШкалаСтавокНалогов.Период)				КАК Период
 			|							ИЗ РегистрСведений.ШкалаСтавокНалогов КАК ШкалаСтавокНалогов
 			|							ГДЕ		ШкалаСтавокНалогов.Период  <= КОНЕЦПЕРИОДА( &парамПериодРегистрации, МЕСЯЦ )
 			|								И	(ШкалаСтавокНалогов.Организация = (&парамОрганизация) ИЛИ ШкалаСтавокНалогов.Организация =  ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
 			|							СГРУППИРОВАТЬ ПО
 			|					   			ШкалаСтавокНалогов.Налог
 			|					   	) КАК ШкалаСтавокПериод
 			|					   	
 			|					   	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаСтавокНалогов КАК ШкалаСтавок	
 			|					   	ПО		ШкалаСтавокПериод.Налог = ШкалаСтавок.Налог	   	
 			|					   		И	ШкалаСтавокПериод.Период = ШкалаСтавок.Период
 			|					 		И	(ШкалаСтавок.Организация = (&парамОрганизация) ИЛИ ШкалаСтавок.Организация =  ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
 			|							
 			|						СГРУППИРОВАТЬ ПО
 			|					   		ШкалаСтавок.Налог,
 			|					   		ШкалаСтавок.Период
 			|				) КАК ШкалаПериодОрганизация
 			|				   
 			|				   
 			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаСтавокНалогов КАК Шкала	
 			|				ПО		ШкалаПериодОрганизация.Налог = Шкала.Налог	   	
 			|					И	ШкалаПериодОрганизация.Период = Шкала.Период
 			|					И	ШкалаПериодОрганизация.Организация = Шкала.Организация

 			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаСтавокНалогов КАК ШкалаНижнийПорог	
 			|				ПО		ШкалаПериодОрганизация.Налог = ШкалаНижнийПорог.Налог	   	
 			|					И	ШкалаПериодОрганизация.Период = ШкалаНижнийПорог.Период
 			|					И	ШкалаПериодОрганизация.Организация = ШкалаНижнийПорог.Организация
 			|					И	ШкалаНижнийПорог.НомерПорога.Порядок < Шкала.НомерПорога.Порядок

 			|			 	СГРУППИРОВАТЬ ПО 
 			|					ШкалаПериодОрганизация.Налог,
 			|					ШкалаПериодОрганизация.Период,
 			|					ШкалаПериодОрганизация.Организация,
 			|					Шкала.СтатьяНалоговойДекларации,
 			|					Шкала.Ставка,
 			|					Шкала.СтавкаПолная,			
 			|					Шкала.Порог,
 			|					Шкала.НомерПорога,
 			|					Шкала.НомерПорога.Порядок
 			|	) КАК ВсяШкала

 			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаСтавокНалогов КАК ШкалаНижнийПорог	
 			|	ПО		ВсяШкала.Налог = ШкалаНижнийПорог.Налог	   	
 			|	И	ВсяШкала.Период = ШкалаНижнийПорог.Период
 			|	И	ВсяШкала.Организация = ШкалаНижнийПорог.Организация
 			|	И	ШкалаНижнийПорог.НомерПорога.Порядок = ВсяШкала.НижнийНомерПорогаПорядок
			|
			|	ИНДЕКСИРОВАТЬ ПО
			|		 Налог, НомерПорогаПорядок 
			|";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТПолнаяШкалаПоМесяцуРегистрации = "ВТПолнаяШкалаПоМесяцуРегистрации";
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПолнаяШкалаПоМесяцуРегистрации";
		
		//	ВТПолнаяШкала
		Если Истина Тогда
			
			//	ВТМесяцыДляАнализа
			Если Истина Тогда
				//	Описание:
				// 		Сотрудники по которым есть зарегистрированные записи по начислениям в периодеРегистрации 
				// 		сгруппированные по периодам действия.
				//
				ТекстЗапросаВТ = "
				|	ВЫБРАТЬ РАЗЛИЧНЫЕ
				|		Взносы.Налог										КАК Налог,    
				|		НАЧАЛОПЕРИОДА(Взносы.БазовыйПериодНачало, МЕСЯЦ)	КАК НалоговыйПериод,    
				|		Взносы.ДатаНачала									КАК ДатаНачала    
				|
				|ПОМЕСТИТЬ ВТМесяцыДляАнализа	
				|	ИЗ	РегистрРасчета.ИНАГРО_ВзносыВФонды КАК Взносы
				|	ГДЕ		Взносы.Регистратор = &парамРегистратор
				|		И	Взносы.Сотрудник В ( &парамСотрудники )
				|
				|	ИНДЕКСИРОВАТЬ ПО
				|		Налог, НалоговыйПериод, ДатаНачала
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТМесяцыДляАнализа = "ВТМесяцыДляАнализа";
			КонецЕсли;
			
			//	ВТШкалаПоНалоговымПериодам
			Если Истина Тогда
				//	Описание:
				// 		Тут получаем все Параметры таблицы ШкалаСтавокНалогов сгруппированые по Налоговым пеиодам
				// 		Так как налог одновременно не может быть и для всех организация 
				//		и для одно достаточно вытащить все с пустой орг. и по текущей.
				//
				ТекстЗапросаВТ = "
				|	ВЫБРАТЬ РАЗЛИЧНЫЕ
				|       ШкалаПоНалоговымПериодам.Налог				КАК Налог,
				|		ШкалаПоНалоговымПериодам.НалоговыйПериод	КАК НалоговыйПериод,    
				|		ВЫБОР КОГДА ШкалаПоНалоговымПериодам.НалоговыйПериод < Шкала.Период ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ	КАК ИзменениеСтавкиВСерединеМесяца,    
				|		ШкалаПоНалоговымПериодам.ДатаНачала			КАК ДатаНачала,    
				|		ШкалаПоНалоговымПериодам.Организация		КАК Организация,    
				|       Шкала.НомерПорога							КАК НомерПорога,
				|       Шкала.НомерПорога.Порядок					КАК НомерПорогаПорядок,
				|       Шкала.СтатьяНалоговойДекларации				КАК СтатьяНалоговойДекларации,
				|       Шкала.Ставка								КАК Ставка,
				|       Шкала.СтавкаПолная							КАК СтавкаПолная,
				|       Шкала.Порог									КАК Порог
				|
				|ПОМЕСТИТЬ ВТШкалаПоНалоговымПериодам	
				|   ИЗ  (
				|		ВЫБРАТЬ
				|			Месяцы1.НалоговыйПериод				КАК НалоговыйПериод,    
				|			Месяцы1.Налог						КАК Налог,
				|			Месяцы1.ДатаНачала					КАК ДатаНачала,
				|			Месяцы1.Период						КАК Период,
				|			МАКСИМУМ(ШкалаСтавокНалогов.Организация)		КАК Организация  
				|			ИЗ	(
				|			ВЫБРАТЬ
				|				Месяцы.НалоговыйПериод				КАК НалоговыйПериод,    
				|				Месяцы.Налог						КАК Налог,
				|				Месяцы.ДатаНачала					КАК ДатаНачала,
				|				МАКСИМУМ(ШкалаСтавокНалогов.Период)	КАК Период
				|				ИЗ	" + ТекстЗапросаВТМесяцыДляАнализа + " КАК Месяцы
				|
				|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаСтавокНалогов КАК ШкалаСтавокНалогов
				|			ПО		Месяцы.Налог = ШкалаСтавокНалогов.Налог
				|				И	ШкалаСтавокНалогов.Период <= Месяцы.ДатаНачала
				|				И	ШкалаСтавокНалогов.Период <= КОНЕЦПЕРИОДА(&ПарамПериодРегистрации, МЕСЯЦ)
				|       		И	(ШкалаСтавокНалогов.Организация = (&парамОрганизация) ИЛИ ШкалаСтавокНалогов.Организация = (&ПустаяОрганизация)) 
				|
				|			СГРУППИРОВАТЬ ПО
				|				Месяцы.НалоговыйПериод,    
				|				Месяцы.Налог,
				|				Месяцы.ДатаНачала
				|   	) КАК Месяцы1
				|
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаСтавокНалогов КАК ШкалаСтавокНалогов
				|		ПО		Месяцы1.Налог = ШкалаСтавокНалогов.Налог
				|			И	ШкалаСтавокНалогов.Период = Месяцы1.Период
				|       	И	(ШкалаСтавокНалогов.Организация = (&парамОрганизация) ИЛИ ШкалаСтавокНалогов.Организация = (&ПустаяОрганизация)) 
				|
				|		СГРУППИРОВАТЬ ПО
				|			Месяцы1.НалоговыйПериод,    
				|			Месяцы1.Налог,
				|			Месяцы1.ДатаНачала,
				|			Месяцы1.Период
				|   ) КАК ШкалаПоНалоговымПериодам
				|
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаСтавокНалогов КАК Шкала
				|	ПО		ШкалаПоНалоговымПериодам.Налог			= Шкала.Налог
				|		И	ШкалаПоНалоговымПериодам.Организация	= Шкала.Организация 
				|		И	ШкалаПоНалоговымПериодам.Период = Шкала.Период 
				|
				|	ИНДЕКСИРОВАТЬ ПО
				|		НалоговыйПериод
				|";
				Запрос.Текст = ТекстЗапросаВТ;
				Запрос.Выполнить();
				ТекстЗапросаВТШкалаПоНалоговымПериодам = "ВТШкалаПоНалоговымПериодам";
			КонецЕсли;
			
			//	Описание:
			// 		Тут получаем все Параметры таблицы ШкалаСтавокНалогов сгруппированые по Налоговым пеиодам
			// 		Так как налог одновременно не может быть и для всех организация 
			//		и для одно достаточно вытащить все с пустой орг. и по текущей.
			//
			ТекстЗапросаВТ = "
			|	ВЫБРАТЬ
			|      	ШкалаСтавок.Налог							КАК Налог,
			|		ШкалаСтавок.НалоговыйПериод					КАК НалоговыйПериод,    
			|      	ШкалаСтавок.ДатаНачала						КАК ДатаНачала,
			|      	ШкалаСтавок.НомерПорога						КАК НомерПорога,
			|      	ШкалаСтавок.СтатьяНалоговойДекларации		КАК СтатьяНалоговойДекларации,
			|		ШкалаСтавок.ИзменениеСтавкиВСерединеМесяца	КАК ИзменениеСтавкиВСерединеМесяца,    
			|      	ШкалаСтавок.Ставка							КАК Ставка,
			|      	ШкалаСтавок.СтавкаПолная					КАК СтавкаПолная,
			|      	ШкалаСтавок.Порог							КАК Порог,
			|		ВЫБОР КОГДА НижнийШкала.НомерПорога ЕСТЬ NULL ТОГДА 0 ИНАЧЕ НижнийШкала.Порог КОНЕЦ	КАК НижнийПорог  
			|
			|ПОМЕСТИТЬ ВТПолнаяШкала	
			|   ИЗ  (
			|		ВЫБРАТЬ
			|       	ШкалаСтавок.Налог							КАК Налог,
			|			ШкалаСтавок.НалоговыйПериод					КАК НалоговыйПериод,    
			|       	ШкалаСтавок.ДатаНачала						КАК ДатаНачала,
			|       	ШкалаСтавок.НомерПорога						КАК НомерПорога,
			|       	ШкалаСтавок.НомерПорогаПорядок				КАК НомерПорогаПорядок,
			|       	ШкалаСтавок.СтатьяНалоговойДекларации		КАК СтатьяНалоговойДекларации,
			|			ШкалаСтавок.ИзменениеСтавкиВСерединеМесяца	КАК ИзменениеСтавкиВСерединеМесяца,    
			|       	ШкалаСтавок.Ставка							КАК Ставка,
			|       	ШкалаСтавок.СтавкаПолная					КАК СтавкаПолная,			
			|       	ШкалаСтавок.Порог							КАК Порог,
			|			МАКСИМУМ(Шкала.ДатаНачала)				КАК НижнийДатаНачала,  
			|			МАКСИМУМ(Шкала.НомерПорогаПорядок) 		КАК НижнийНомерПорогаПорядок  
			|			ИЗ " + ТекстЗапросаВТШкалаПоНалоговымПериодам + " КАК ШкалаСтавок
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТШкалаПоНалоговымПериодам + " КАК Шкала
			|		ПО		ШкалаСтавок.НалоговыйПериод = Шкала.НалоговыйПериод
			|			И	ШкалаСтавок.Налог = Шкала.Налог 
			|       	И	ШкалаСтавок.ДатаНачала >= Шкала.ДатаНачала 
			|       	И	ШкалаСтавок.НомерПорогаПорядок > Шкала.НомерПорогаПорядок 
			|		СГРУППИРОВАТЬ ПО
			|       	ШкалаСтавок.Налог,
			|			ШкалаСтавок.НалоговыйПериод,    
			|       	ШкалаСтавок.ДатаНачала,
			|       	ШкалаСтавок.НомерПорога,
			|       	ШкалаСтавок.НомерПорогаПорядок,
			|       	ШкалаСтавок.СтатьяНалоговойДекларации,
			|			ШкалаСтавок.ИзменениеСтавкиВСерединеМесяца,    
			|       	ШкалаСтавок.Ставка,
			|       	ШкалаСтавок.СтавкаПолная,
			|       	ШкалаСтавок.Порог
			|   ) КАК ШкалаСтавок
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТШкалаПоНалоговымПериодам + " КАК НижнийШкала
			|	ПО		ШкалаСтавок.НалоговыйПериод		= НижнийШкала.НалоговыйПериод
			|		И	ШкалаСтавок.Налог				= НижнийШкала.Налог
			|		И	ШкалаСтавок.НижнийНомерПорогаПорядок	= НижнийШкала.НомерПорогаПорядок
			|		И	ШкалаСтавок.НижнийДатаНачала	= НижнийШкала.ДатаНачала 
			|
			|	ИНДЕКСИРОВАТЬ ПО
			|		 НалоговыйПериод, Налог, НомерПорога 
			|";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТПолнаяШкала = "ВТПолнаяШкала";
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПолнаяШкала";
		
		ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ "+ТекстЗапросаВТБазы+" КАК Баз
		|ПО Основной.Регистратор = Баз.Регистратор И Основной.НомерСтроки = Баз.НомерСтроки
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТБазыВычет КАК БазВычет
		|ПО Основной.Регистратор = БазВычет.Регистратор И Основной.НомерСтроки = БазВычет.НомерСтроки
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТБазыПолные КАК БазПолные
		|ПО Основной.Регистратор = БазПолные.Регистратор И Основной.НомерСтроки = БазПолные.НомерСтроки";
				
		// присоединяем к базе
		Мод = "ВЫБОР КОГДА Рез<0 ТОГДА -Рез ИНАЧЕ Рез КОНЕЦ";
		ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ "+ТекстЗапросаВТБазыДо+" КАК БазДо
		|ПО Основной.НомерСтроки = БазДо.НомерСтроки
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТПолнаяШкалаПоМесяцуРегистрации + " Как ВсеВзносыПоМесяцуРегистрации
		|ПО		Основной.Налог		= ВсеВзносыПоМесяцуРегистрации.Налог 
		|	И ( Основной.НомерПорога <> ЗНАЧЕНИЕ(Перечисление.ПорогиШкалыСтавокНалогов.ПустаяСсылка) И Основной.НомерПорога = ВсеВзносыПоМесяцуРегистрации.НомерПорога
		|		ИЛИ	Основной.НомерПорога = ЗНАЧЕНИЕ(Перечисление.ПорогиШкалыСтавокНалогов.ПустаяСсылка)
		|		И	("+СтрЗаменить (Мод,"Рез","ЕСТЬNULL(Баз.РезультатБаза, 0)")+" > ВсеВзносыПоМесяцуРегистрации.НижнийПорог ИЛИ ВсеВзносыПоМесяцуРегистрации.НижнийПорог = 0 ) 
		|		И	"+СтрЗаменить (Мод,"Рез","ЕСТЬNULL(Баз.РезультатБаза, 0)")+" <= ВсеВзносыПоМесяцуРегистрации.Порог
		|        )
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТПолнаяШкала + " Как ВсеВзносы
		|ПО		Основной.Налог		= ВсеВзносы.Налог 
		|	И	Основной.ДатаНачала	= ВсеВзносы.ДатаНачала 
		|   И ВЫБОР КОГДА Основной.НомерПорога = ЗНАЧЕНИЕ(Перечисление.ПорогиШкалыСтавокНалогов.ПустаяСсылка)
		|           ТОГДА ( "+СтрЗаменить (Мод,"Рез","Баз.РезультатБаза")+" > ВсеВзносы.НижнийПорог 
		|           И "+СтрЗаменить (Мод,"Рез","Баз.РезультатБаза")+" <= ВсеВзносы.Порог )
		|           ИНАЧЕ Основной.НомерПорога = ВсеВзносы.НомерПорога  КОНЕЦ
		|
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТКоэффициентыСтавкиВзносовФОТ + " Как КоэффициентыСтавкиВзносовФОТ
		|ПО		Основной.Налог.Родитель	= ЗНАЧЕНИЕ(Справочник.Налоги.ВзносыФОТ) 
		
		|";
		
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ " + ВнешнееУсловие;
	КонецЕсли;
		
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО НомерСтроки";
	
	Если (НеобходимаБаза ИЛИ НеобходимыеДанные.ИндексацияЗарплаты ИЛИ НеобходимыеДанные.ИндексацияСоциальныхНачислений ИЛИ НеобходимыеДанные.ДоплатаДоМЗП) И КомментироватьРасчет Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ИТОГИ";
		Для Каждого Поле Из ПоляЗапросаМаксимум Цикл
			ТекстЗапроса = ТекстЗапроса + "
			|	МАКСИМУМ(" + Поле + "),";
			Зпт = ",";
		КонецЦикла;
		Для Каждого Поле Из ПоляЗапросаСумма Цикл
			ТекстЗапроса = ТекстЗапроса + "
			|	СУММА(" + Поле + "),";
			Зпт = ",";
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + "
		|	СУММА(РезультатБаза)";
		Если НеобходимыеДанные.ИндексацияЗарплаты ИЛИ НеобходимыеДанные.ДоплатаДоМЗП Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|	МАКСИМУМ(ОтработаноДнейБаза),
			|	МАКСИМУМ(ОтработаноЧасовБаза)";
		КонецЕсли;	
		ТекстЗапроса = ТекстЗапроса + "
		|ПО
		|	НомерСтроки";
	КонецЕсли;
	
	Если	ИмяРегистра = "ИНАГРО_Начисления" Тогда
		// измерения сопоставления
		Измерения = Новый Массив(2);
		Измерения[0] = "Организация";     
		Измерения[1] = "Сотрудник";
		// для начислений сопоставляемые измерения основного и базового регистов совпадают
		Запрос.УстановитьПараметр("парамИзмеренияОсновного", Измерения);
		Запрос.УстановитьПараметр("парамИзмеренияБазового", Измерения);
		// Для начислений сопоставляемые измерения основного и базового регистов совпадают
		// измерения сопоставления.
		Измерения = Новый Массив(3);
		Измерения[0] = "Организация";     
		Измерения[1] = "Сотрудник";
		Измерения[2] = "Назначение";
		Запрос.УстановитьПараметр("парамИзмеренияОсновногоНазначения", Измерения);
		Запрос.УстановитьПараметр("парамИзмеренияБазовогоНазначения", Измерения);
		// список способов расчета, являющихся почасовыми отклонениями
		Запрос.УстановитьПараметр("парамСписокПочасовыхОтклонений", ПолучитьСписокНачисленийПочасовыхОтклонений());
		
		
	Иначе
		// измерения сопоставления для удержаний
		Измерения = Новый Массив(1);
		Измерения[0] = "Сотрудник";
		//Измерения[1] = "Организация";
		// для удержаний сопоставляемые измерения основного и базового регистов разные.
		Запрос.УстановитьПараметр("парамИзмеренияОсновного", Измерения);
		Запрос.УстановитьПараметр("парамИзмеренияБазового", Измерения);
		
	КонецЕсли;
	
	ПроцентныеПоказатели = Новый Массив;
	ПроцентныеПоказатели.Добавить(Перечисления.ИНАГРО_ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная);
	ПроцентныеПоказатели.Добавить(Перечисления.ИНАГРО_ТипыПоказателейСхемМотивации.Процентный);
	Запрос.УстановитьПараметр("ПроцентныеПоказатели", ПроцентныеПоказатели);
	
	ШкальныеПоказатели = Новый Массив;
	ШкальныеПоказатели.Добавить(Перечисления.ИНАГРО_ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная);
	ШкальныеПоказатели.Добавить(Перечисления.ИНАГРО_ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая);
	Запрос.УстановитьПараметр("ШкальныеПоказатели", ШкальныеПоказатели);				
	
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
КонецФункции // ПолучитьДанныеДляРасчета()
#Область ПрограммныйИнтерфейс

// Проставляет в строку табличной части или реквизит формы полученные данные по Сотруднику.
//
Процедура ПолучитьДанныеСотрудника(ДатаСобытия, ДанныеСотрудника) Экспорт
		
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Сотрудник", ДанныеСотрудника.Сотрудник);
	Запрос.УстановитьПараметр("парамДатаСобытия", ДатаСобытия);
	Запрос.УстановитьПараметр("ВидРасчета", ПланыВидовРасчета.ИНАГРО_Начисления.ПустаяСсылка());
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	РаботникиОрганизации.Должность КАК Должность,
	|	РаботникиОрганизации.ПринятНаНовоеРабочееМесто КАК ПринятНаНовоеРабочееМесто,
	|	РаботникиОрганизации.СпособОтраженияВБухучете,
	|	РаботникиОрганизации.ГрафикРаботы,
	|	РаботникиОрганизации.ЗанимаемыхСтавок,
	|	РаботникиОрганизации.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&парамДатаСобытия, Сотрудник = &Сотрудник) КАК РаботникиОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&парамДатаСобытия, ВидРасчета = &ВидРасчета) КАК ПлановыеНачисленияРаботниковОрганизацийСрезПоследних
	|		ПО РаботникиОрганизации.Сотрудник = ПлановыеНачисленияРаботниковОрганизацийСрезПоследних.Сотрудник";

	Запрос.Текст = ТекстЗапроса;
	НаборыДанных = Запрос.Выполнить().Выгрузить();
	
	Если НаборыДанных.Количество() = 0 Тогда
		Возврат;
	Иначе
		ЗаполнитьЗначенияСвойств(ДанныеСотрудника, НаборыДанных[0]);
	КонецЕсли;

КонецПроцедуры

// Выполняет расчет часовой тарифной ставки работника
// Возвращает результат с учетом курса валюты тарифной ставки
//
Функция ЧасоваяТарифнаяСтавкаРаботникаОрг(Знач Сотрудник, Знач ДатаАктуальности) Экспорт
	
	Ставка = 0;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Сотрудник",				Сотрудник);
	Запрос.УстановитьПараметр("ДатаАктуальности",		ДатаАктуальности);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаботникиОрганизацииСрезПоследних.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	ОсновноеНачисление.Показатель1 КАК ОкладТариф,
	|	РаботникиОрганизацииСрезПоследних.ГрафикРаботы КАК ГрафикРаботы,
	|   РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ДлительностьРабочейНедели КАК ДлительностьРабочейНедели,
	|	РаботникиОрганизацииСрезПоследних.ГрафикРаботы.ВидГрафика КАК ВидГрафика,
	|
	|   ДанныеКалендаря.НормаДнейЗаМесяц  КАК НормаДнейЗаМесяц,
	|   ДанныеКалендаря.НормаЧасовЗаМесяц КАК НормаЧасовЗаМесяц,
	|
	|	ОсновноеНачисление.ВидРасчета КАК СпособРасчета
	|ИЗ
	|	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|		&ДатаАктуальности,
	|		Сотрудник = &Сотрудник
	|					И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное)) КАК ОсновноеНачисление
	|		ПО (ИСТИНА)
	|
	|//-----------------------
	|// данные нормы календаря
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		ГрафикиРаботы.ГрафикРаботы	КАК ГрафикРаботы,
	|		СУММА( ГрафикиРаботы.ОсновноеЗначение  )		КАК НормаДнейЗаМесяц,
	|		СУММА( ГрафикиРаботы.ДополнительноеЗначение )	КАК НормаЧасовЗаМесяц
	|	ИЗ	РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	|	ГДЕ		НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ ) = НАЧАЛОПЕРИОДА(&ДатаАктуальности, МЕСЯЦ) 
	|		И	ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням) 
	|	СГРУППИРОВАТЬ ПО
	|		ГрафикиРаботы.ГрафикРаботы
	|) КАК ДанныеКалендаря
	|ПО		ДанныеКалендаря.ГрафикРаботы = РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|
	|
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ПродолжительностьРабочейНедели = ?(Выборка.ДлительностьРабочейНедели = NULL, 0, Выборка.ДлительностьРабочейНедели);
		
		Если Выборка.СпособРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.ТарифЧасовой ИЛИ Выборка.СпособРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.СдельныйНаряд Тогда
			
			Ставка = Выборка.ОкладТариф;
			
		ИначеЕсли Выборка.СпособРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.ОкладПоДням
			ИЛИ Выборка.СпособРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.ОкладПоЧасам Тогда
			
			// Пересчет месячной тарифной ставки в часовую
			Ставка = ?(Выборка.НормаЧасовЗаМесяц=NULL,0,Выборка.ОкладТариф/ Выборка.НормаЧасовЗаМесяц);
			
		ИначеЕсли Выборка.СпособРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.ТарифДневной Тогда
			
			// Пересчет дневной ставки в часовую
			Ставка = Выборка.ОкладТариф/8;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат Ставка;
		
КонецФункции

// Данная процедура написана компанией ИН-АГРО.
	// 
Процедура ПроставитьДанныеСтроки(Сотрудник, Назначение, ДатаСобытия, Регистратор, ТекущаяСтрока) Экспорт
	
	ПериодРегистрации = Регистратор.ПериодРегистрации;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамДатаСобытия", ДатаСобытия);
	Запрос.УстановитьПараметр("парамСотрудник", Сотрудник);
	Запрос.УстановитьПараметр("парамНазначение", Назначение);
	Запрос.УстановитьПараметр("парамВидРасчета", ТекущаяСтрока.ВидРасчета);
	Запрос.УстановитьПараметр("парамСпособРасчета", ТекущаяСтрока.ВидРасчета.СпособРасчета);
	Запрос.УстановитьПараметр("парамОрганизация", Сотрудник.ГоловнаяОрганизация);
	
	Запрос.УстановитьПараметр("парамПериодРегистрации" , ПериодРегистрации);
	Запрос.УстановитьПараметр("парамВалютаРегламентУчета" , Константы.ВалютаРегламентированногоУчета.Получить());
	
	ТекстПВР = "ИНАГРО_Начисления";
	ТекстПРС = "ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций";
	
	//	ВТОкладТариф
	Если Истина Тогда 
		//	Описание:
		// 		Все оклады сотрудников
		//		Для п.1.
		ТекстЗапросаВТ = "
		|ВЫБРАТЬ
		|	Начисления.Организация	КАК Организация,
		|	Начисления.Сотрудник	КАК Назначение,
		|	Начисления.ВидРасчета	КАК ВидРасчета,
		|	ВЫБОР	КОГДА 		Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоДням)
		|					ИЛИ Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоЧасам)
		|					ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВДнях)
		|					ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВЧасах)
		|					ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВДнях)		
		|					ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВЧасах)	
		|				ТОГДА ""ЗА МЕСЯЦ""
		|			КОГДА 	Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоДневнойТарифнойСтавке)
		|			ТОГДА ""ЗА ДЕНЬ""
		|			ИНАЧЕ ""ЗА ЧАС""
		|	КОНЕЦ					КАК СпособУчетаВремени,
		|	Начисления.Показатель1 КАК ОкладТариф,
		//|	&парамВалютаРегламентУчета КАК Валюта1,
		|	Начисления.Период		КАК ДатаНачала,
		|	МИНИМУМ(Окончания.Период)	КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТОкладТариф	
		|ИЗ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций КАК Начисления
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций КАК Окончания
		|ПО 
		|	Начисления.ВидНачисления <> Значение(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Индивидуальное) 
		|	И Начисления.Действует
		|	И Начисления.Организация = &парамОрганизация
		|	И	Начисления.Сотрудник = Окончания.Сотрудник
		|	И	Начисления.ВидРасчета = Окончания.ВидРасчета
		|	И	Начисления.Период < Окончания.Период
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ(
		|	ВЫБРАТЬ ПЕРВЫЕ 1
		|   НаборПоказателей.Ссылка	КАК ВидРасчета,
		|   НаборПоказателей.Показатель	КАК Показатель
		|	ИЗ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК НаборПоказателей
		|	ГДЕ		НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВДнях)
		|		ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВЧасах)
		|					ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВДнях)		
		|					ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВЧасах)	
		|) КАК НаборПоказателей
		|ПО Начисления.ВидРасчета = НаборПоказателей.ВидРасчета
		|
		|ГДЕ		
		|	Начисления.ВидНачисления <> Значение(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Индивидуальное) 
		|	И Начисления.Действует 
		|	И Начисления.Организация = &парамОрганизация
		|	И	Начисления.Сотрудник = &парамНазначение // оклад по назначению
		|
		|СГРУППИРОВАТЬ ПО
		|	Начисления.Действует,		
		|	Начисления.Организация,
		|	Начисления.Сотрудник,
		|	Начисления.ВидРасчета,
		|	ВЫБОР	КОГДА 		Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоДням)
		|					ИЛИ Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоЧасам)
		|					ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВДнях)
		|					ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВЧасах)
		|					ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВДнях)		
		|					ИЛИ	НаборПоказателей.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВЧасах)	
		|				ТОГДА ""ЗА МЕСЯЦ""
		|			КОГДА 	Начисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ПоДневнойТарифнойСтавке)
		|			ТОГДА ""ЗА ДЕНЬ""
		|			ИНАЧЕ ""ЗА ЧАС""
		|	КОНЕЦ,
		|	Начисления.Показатель1,
		//|	Начисления.Валюта1,
		|	Начисления.Период
 		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
	КонецЕсли;
	
	//	ВТЗначенияПоказателей
	Если Истина Тогда 
		//	Описание:
		// 		Все оклады сотрудников
		//		Для п.1.
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ЗначенияПоказателей.Сотрудник,
		|	ЗначенияПоказателей.Подразделение,
		|	ЗначенияПоказателей.Показатель,
		|	НАЧАЛОПЕРИОДА(ЗначенияПоказателей.ПериодДействия, МЕСЯЦ) КАК ПериодДействия,
		|	ЗначенияПоказателей.Значение КАК Значение
		|ПОМЕСТИТЬ ВТЗначенияПоказателей
		|ИЗ РегистрСведений.ИНАГРО_ЗначенияПоказателейСхемМотивации КАК ЗначенияПоказателей
		|	
		|ГДЕ	ЗначенияПоказателей.Организация = &парамОрганизация
		|	И	НАЧАЛОПЕРИОДА(ЗначенияПоказателей.ПериодДействия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&парамДатаСобытия, МЕСЯЦ)
		|	И	(ЗначенияПоказателей.Сотрудник = &парамНазначение
		|	ИЛИ	ЗначенияПоказателей.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Показатель
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТЗначенияПоказателей";
	
	//	ВТПоказатели
	Если Истина Тогда 
		//	Описание:
		// 		
		//		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СотрудникиПодразделенияВПоказателях.Сотрудник КАК Сотрудник,
		|	СотрудникиПодразделенияВПоказателях.Подразделение КАК Подразделение,
		|	ПоказателиВидовРасчета.Ссылка КАК ВидРасчета,
		|	ПоказателиВидовРасчета.Показатель1.ТипПоказателя КАК ТипПоказателя1,
		|	ПоказателиВидовРасчета.Показатель2.ТипПоказателя КАК ТипПоказателя2,
		|	ПоказателиВидовРасчета.Показатель3.ТипПоказателя КАК ТипПоказателя3,
		|	ПоказателиВидовРасчета.Показатель4.ТипПоказателя КАК ТипПоказателя4,
		|	ПоказателиВидовРасчета.Показатель5.ТипПоказателя КАК ТипПоказателя5,
		|	ПоказателиВидовРасчета.Показатель6.ТипПоказателя КАК ТипПоказателя6,
		|	ПоказателиВидовРасчета.Показатель1.ВозможностьИзменения КАК ВозможностьИзменения1,
		|	ПоказателиВидовРасчета.Показатель2.ВозможностьИзменения КАК ВозможностьИзменения2,
		|	ПоказателиВидовРасчета.Показатель3.ВозможностьИзменения КАК ВозможностьИзменения3,
		|	ПоказателиВидовРасчета.Показатель4.ВозможностьИзменения КАК ВозможностьИзменения4,
		|	ПоказателиВидовРасчета.Показатель5.ВозможностьИзменения КАК ВозможностьИзменения5,
		|	ПоказателиВидовРасчета.Показатель6.ВозможностьИзменения КАК ВозможностьИзменения6,
		|	ЗначенияПоказателей1.Значение КАК Показатель1,
		|	ЗначенияПоказателей2.Значение КАК Показатель2,
		|	ЗначенияПоказателей3.Значение КАК Показатель3,
		|	ЗначенияПоказателей4.Значение КАК Показатель4,
		|	ЗначенияПоказателей5.Значение КАК Показатель5,
		|	ЗначенияПоказателей6.Значение КАК Показатель6
		|ПОМЕСТИТЬ ВТПоказатели
		|ИЗ (ВЫБРАТЬ РАЗЛИЧНЫЕ Подразделение, Сотрудник ИЗ ВТЗначенияПоказателей КАК ЗначенияПоказателей) КАК СотрудникиПодразделенияВПоказателях
		|
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	(ВЫБРАТЬ
		|		Показатели.Ссылка КАК Ссылка,
		|		Показатели1.Показатель КАК Показатель1,
		|		Показатели2.Показатель КАК Показатель2,
		|		Показатели3.Показатель КАК Показатель3,
		|		Показатели4.Показатель КАК Показатель4,
		|		Показатели5.Показатель КАК Показатель5,
		|		Показатели6.Показатель КАК Показатель6
		|	ИЗ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели1
		|	ПО Показатели.Ссылка = Показатели1.Ссылка И Показатели1.НомерСтроки = 1
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели2
		|	ПО Показатели.Ссылка = Показатели2.Ссылка И Показатели2.НомерСтроки = 2
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели3
		|	ПО Показатели.Ссылка = Показатели3.Ссылка И Показатели3.НомерСтроки = 3
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели4
		|	ПО Показатели.Ссылка = Показатели4.Ссылка И Показатели4.НомерСтроки = 4
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели5
		|	ПО Показатели.Ссылка = Показатели5.Ссылка И Показатели5.НомерСтроки = 5
		|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК Показатели6
		|	ПО Показатели.Ссылка = Показатели6.Ссылка И Показатели6.НомерСтроки = 6
		|	
		|) КАК ПоказателиВидовРасчета
		|ПО ИСТИНА
		|	
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей1
		|ПО 	ПоказателиВидовРасчета.Показатель1 = ЗначенияПоказателей1.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей1.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей1.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей2
		|ПО		ПоказателиВидовРасчета.Показатель2 = ЗначенияПоказателей2.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей2.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей2.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей3
		|ПО		ПоказателиВидовРасчета.Показатель3 = ЗначенияПоказателей3.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей3.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей3.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей4
		|ПО		ПоказателиВидовРасчета.Показатель4 = ЗначенияПоказателей4.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей4.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей4.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей5
		|ПО		ПоказателиВидовРасчета.Показатель5 = ЗначенияПоказателей5.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей5.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей5.Подразделение
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТЗначенияПоказателей КАК ЗначенияПоказателей6
		|ПО		ПоказателиВидовРасчета.Показатель6 = ЗначенияПоказателей6.Показатель
		|	И	СотрудникиПодразделенияВПоказателях.Сотрудник = ЗначенияПоказателей6.Сотрудник
		|	И	СотрудникиПодразделенияВПоказателях.Подразделение = ЗначенияПоказателей6.Подразделение
		|
		|ГДЕ	ПоказателиВидовРасчета.Ссылка = &парамВидРасчета
		|	И (ЗначенияПоказателей1.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей2.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей3.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей4.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей5.Значение ЕСТЬ НЕ NULL
		|	ИЛИ	ЗначенияПоказателей6.Значение ЕСТЬ НЕ NULL)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРасчета
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПоказатели";

	ТекстПоказатель1 = "
	|			ВЫБОР
	|				КОГДА ПоказателиСхемМотивацийПоСотруднику.Показатель1 ЕСТЬ НЕ NULL 
	|					ТОГДА ПоказателиСхемМотивацийПоСотруднику.Показатель1
	|				КОГДА ПоказателиСхемМотивацийПоПодразделению.Показатель1 ЕСТЬ НЕ NULL 
	|					ТОГДА ПоказателиСхемМотивацийПоПодразделению.Показатель1
	//|				КОГДА ПоказателиСхемМотивацийПоПодразделениюУпр.Показатель1 ЕСТЬ НЕ NULL 
	//|					ТОГДА ПоказателиСхемМотивацийПоПодразделениюУпр.Показатель1
	|				КОГДА ПоказателиСхемМотивацийПоОрганизации.Показатель1 ЕСТЬ НЕ NULL 
	|					ТОГДА ПоказателиСхемМотивацийПоОрганизации.Показатель1
	|				КОГДА ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТарифНазначения)
	|                   // для оклада валюта учтена при его получении
	|					ТОГДА	ВЫБОР	КОГДА Оклады.СпособУчетаВремени = ""ЗА МЕСЯЦ"" И ДанныеКалендаря.НормаЧасовЗаМесяц > 0
	|										ТОГДА Оклады.ОкладТариф/ДанныеКалендаря.НормаЧасовЗаМесяц
	|									КОГДА Оклады.СпособУчетаВремени = ""ЗА ДЕНЬ""
	|										ТОГДА Оклады.ОкладТариф/8
	|									ИНАЧЕ Оклады.ОкладТариф
	|							КОНЕЦ
	|				КОГДА ТипПоказатель1.Показатель = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ОкладТариф)
	|                   // для оклада валюта учтена при его получении
	|					ТОГДА Оклады.ОкладТариф
	|				ИНАЧЕ ЕСТЬNULL(СписокПлановыхНачислений.Показатель1, 0) 
	|			КОНЕЦ
	|	";
	ТекстПоказатель2 = СтрЗаменить(ТекстПоказатель1, "1", "2");
	ТекстПоказатель3 = СтрЗаменить(ТекстПоказатель1, "1", "3");
	ТекстПоказатель4 = СтрЗаменить(ТекстПоказатель1, "1", "4");
	ТекстПоказатель5 = СтрЗаменить(ТекстПоказатель1, "1", "5");
	ТекстПоказатель6 = СтрЗаменить(ТекстПоказатель1, "1", "6");
	// Основной текст запроса
	ОсновнойТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	//|	Работники.Подразделение КАК ПодразделениеУпр,
	|	Оклады.ОкладТариф КАК ОкладТариф,
	//|   Валюты2.Валюта КАК Валюта,
	//|   Валюты2.Курс КАК Курс,
	//|   Валюты2.Кратность КАК Кратность,
    |
	|	" + ТекстПоказатель1 + " КАК Показатель1,
	|	" + ТекстПоказатель2 + " КАК Показатель2,
	|	" + ТекстПоказатель3 + " КАК Показатель3,
	|	" + ТекстПоказатель4 + " КАК Показатель4,
	|	" + ТекстПоказатель5 + " КАК Показатель5,
	|	" + ТекстПоказатель6 + " КАК Показатель6,
	|
	|	ДанныеКалендаря.НормаДнейЗаМесяц	КАК НормаДнейЗаМесяц,
	|	ДанныеКалендаря.НормаЧасовЗаМесяц	КАК НормаЧасовЗаМесяц,
	|	ДанныеКалендаря.ГрафикРаботы        КАК ГрафикРаботы
	|ИЗ ПланВидовРасчета.ИНАГРО_Начисления КАК СписокНачислений
	|
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&парамДатаСобытия, Сотрудник = &парамНазначение) КАК СписокПлановыхНачислений
	|ПО		СписокПлановыхНачислений.ВидРасчета = &парамВидРасчета
	|
	|
	|
	|//-----------------------
	|// данные о подразделении и графике работы
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&парамДатаСобытия, Сотрудник = &парамНазначение) КАК РаботникиОрганизации
	|ПО ИСТИНА
	|
	|
	|//-----------------------
	|// данные нормы календаря
	|ЛЕВОЕ СОЕДИНЕНИЕ (
	|	ВЫБРАТЬ
	|		ГрафикиРаботы.ГрафикРаботы						КАК ГрафикРаботы,
	|		СУММА( ГрафикиРаботы.ОсновноеЗначение  )		КАК НормаДнейЗаМесяц,
	|		СУММА( ГрафикиРаботы.ДополнительноеЗначение )	КАК НормаЧасовЗаМесяц
	|	ИЗ	РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени	КАК ГрафикиРаботы
	|	ГДЕ		НАЧАЛОПЕРИОДА( ГрафикиРаботы.Дата, МЕСЯЦ ) = НАЧАЛОПЕРИОДА( &парамДатаСобытия, МЕСЯЦ ) 
	|		И	ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням) 
	|	СГРУППИРОВАТЬ ПО
	|			ГрафикиРаботы.ГрафикРаботы
	|) КАК ДанныеКалендаря
	|ПО		ДанныеКалендаря.ГрафикРаботы =  
	|			ВЫБОР КОГДА РаботникиОрганизации.ГрафикРаботы.УчетНормыВремениПоОтдельномуГрафику
	|				ТОГДА  РаботникиОрганизации.ГрафикРаботы.ГрафикРаботыНормыВремени 
	|				ИНАЧЕ  РаботникиОрганизации.ГрафикРаботы 
	|		КОНЕЦ 
	|	
	|	
	|
	|
	|//-----------------------
	|// данные о видах показателей
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель1
	|ПО		ТипПоказатель1.Ссылка = СписокНачислений.Ссылка И ТипПоказатель1.НомерСтроки = 1
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель2
	|ПО		ТипПоказатель2.Ссылка = СписокНачислений.Ссылка И ТипПоказатель2.НомерСтроки = 2
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель3
	|ПО		ТипПоказатель3.Ссылка = СписокНачислений.Ссылка И ТипПоказатель3.НомерСтроки = 3
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель4
	|ПО		ТипПоказатель4.Ссылка = СписокНачислений.Ссылка И ТипПоказатель4.НомерСтроки = 4
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель5
	|ПО		ТипПоказатель5.Ссылка = СписокНачислений.Ссылка И ТипПоказатель5.НомерСтроки = 5
	|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК ТипПоказатель6
	|ПО		ТипПоказатель6.Ссылка = СписокНачислений.Ссылка И ТипПоказатель6.НомерСтроки = 6
	|
	|//-----------------------
	|// данные об окладах
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТОкладТариф КАК Оклады
	|ПО	ИСТИНА
	|
	|//-----------------------
	|// данные показателей Схем Мотиваций
	|// по конкретным сотрудникам
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиСхемМотивацийПоСотруднику
	|ПО	ПоказателиСхемМотивацийПоСотруднику.Сотрудник = &парамНазначение
	|
	|// по подразделению
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиСхемМотивацийПоПодразделению
	|ПО	ПоказателиСхемМотивацийПоПодразделению.Подразделение = РаботникиОрганизации.ПодразделениеОрганизации
	|
	|
	|// организации
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТПоказатели КАК ПоказателиСхемМотивацийПоОрганизации
	|ПО		ПоказателиСхемМотивацийПоОрганизации.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И	ПоказателиСхемМотивацийПоОрганизации.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) 
	|
	|
	|ГДЕ СписокНачислений.Ссылка = &парамВидРасчета
	|
	|";
	
	Запрос.Текст = ОсновнойТекстЗапроса;
	
	ВыборкаНачисления = Запрос.Выполнить().Выбрать();
	Пока ВыборкаНачисления.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ВыборкаНачисления);
	КонецЦикла;

КонецПроцедуры

// Процедура вычисляет количество лет, месяцев и дней между двумя датами
//
// Параметры
//  Дата1	- дата, первая дата (более поздняя, часто текущая, стаж определяется по состоянию на эту дату)
//  Дата2	- дата, вторая дата (ранняя дата, с нее начинается "течение" стажа)
//  Лет		- Число, в этот параметр будет записано кол-во лет между двумя датами (Дата1-Дата2)
//  Месяцев	- Число, в этот параметр будет записано кол-во месяцев между двумя датами (Дата1-Дата2)
//  Дней	- Число, в этот параметр будет записано кол-во дней между двумя датами (Дата1-Дата2).
//
Функция РазобратьРазностьДат(Дата1, Дата2, Дней = 0, Месяцев = 0, Лет = 0) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Дата1) ИЛИ НЕ ЗначениеЗаполнено(Дата2) Тогда
		Возврат НСтр("ru='Нет стажа';uk='Немає стажу'");
	КонецЕсли;
	
	Лет		= 0;
	Месяцев	= 0;
	Дней	= 0;
		
	Если Дата1 > Дата2 Тогда
		
		ВременнаяДата = Дата1;
		Если День(ВременнаяДата) < День(Дата2) Тогда
			Дней = (ВременнаяДата - ДобавитьМесяц(ВременнаяДата,-1))/86400;
			ВременнаяДата = ДобавитьМесяц(ВременнаяДата,-1);
		КонецЕсли;
		Если Месяц(ВременнаяДата) < Месяц(Дата2) Тогда
			ВременнаяДата = ДобавитьМесяц(ВременнаяДата,-12);
			Месяцев = 12;
		КонецЕсли;
		
		Лет		= Макс(			 Год(ВременнаяДата)		- Год(Дата2),	0);
		Месяцев	= Макс(Месяцев	+ Месяц(ВременнаяДата)	- Месяц(Дата2),	0);
		Дней	= Макс(Дней		+ День(ВременнаяДата)	- День(Дата2),	0);
		
		
		// Скорректируем отображаемое значение, если "вмешалось" разное количество дней в месяцах.
		
	КонецЕсли;
	
	
	
	Если Лет>20 Тогда
		ОстатокЛет=Лет%10;
	Иначе 
		ОстатокЛет = Лет;	
	КонецЕсли;
	
	Если Дней>20 Тогда
		ОстатокДней=Дней%10;
	Иначе 
		ОстатокДней = Дней;	
	КонецЕсли;
	СтрокаВозврата="";
	
	Если Лет=0 Тогда
		// Пропускаем	
	ИначеЕсли ОстатокЛет=1 Тогда
		СтрокаВозврата = Строка(Лет) + НСтр("ru=' год ';uk=' рік '");
	ИначеЕсли ОстатокЛет < 5 Тогда	
		СтрокаВозврата = Строка(Лет) + НСтр("ru=' года ';uk=' ріки '");
	Иначе
		СтрокаВозврата = Строка(Лет) + НСтр("ru=' лет ';uk=' років '");
	КонецЕсли;
	
	Если Месяцев=0 Тогда
		// Пропускаем	
	ИначеЕсли Месяцев=1 Тогда
		СтрокаВозврата = СтрокаВозврата + НСтр("ru='1 месяц ';uk='1 місяць '");
	ИначеЕсли Месяцев < 5 Тогда	
		СтрокаВозврата = СтрокаВозврата + Строка(Месяцев) + НСтр("ru=' месяца ';uk=' місяці '");
	Иначе
		СтрокаВозврата = СтрокаВозврата + Строка(Месяцев) + НСтр("ru=' месяцев ';uk=' місяців '");
	КонецЕсли;
	
	Если Дней=0 Тогда
		// Пропускаем	
	ИначеЕсли ОстатокДней=1 Тогда
		СтрокаВозврата = СтрокаВозврата + Строка(Дней) + НСтр("ru=' день';uk=' день'");
	ИначеЕсли ОстатокДней < 5 Тогда	
		СтрокаВозврата = СтрокаВозврата + Строка(Дней) + НСтр("ru=' дня';uk=' дні'");
	Иначе
		СтрокаВозврата = СтрокаВозврата + Строка(Дней) + НСтр("ru=' дней';uk=' днів'");
	КонецЕсли;
	
	Если СтрокаВозврата = "" Тогда
		СтрокаВозврата =НСтр("ru='Нет стажа';uk='Немає стажу'");
	КонецЕсли;	
	
	Возврат СтрокаВозврата;

КонецФункции

// Расчитывает среднесписочную численность штатных работников и в эквиваленте полной занятости.
//
// Параметры
//  ВидСредней  	- Строка - "ЭПЗ", "ССЧ"
//  ВидПериода  	- Строка - "МЕСЯЦ", "КВАРТАЛ", "ГОД", "КВАРТАЛСНАЧАЛАГОДА", "МЕСЯЦСНАЧАЛАГОДА" 
//  Организация  	- ссылка - организация
//  ПараметрОтбора  - Строка - "" = по всем(штатным + ГПХ), "Ж" = Женщины, "Инв" = Инвалиды, "Пен" = пенсионеры, 
//                    "Иностранцы" = иностранцы, "ГПХ" - работающие по договору ГПХ, "Штат" - только по штатным.
//
// Возвращаемое число:
//   таблица значений   - Колонки: Период и Сумма.
//
Функция ПолучитьСреднююЧисленность(НачалоПериода, КонецПериода, ВидСредней, ВидПериода = "МЕСЯЦ", Организация, ПараметрОтбора = "") Экспорт
	
	// таблица с результатми
	тбСредняя = Новый ТаблицаЗначений;
	тбСредняя.Колонки.Добавить("Период");
	тбСредняя.Колонки.Добавить("Средняя");
	ТекСтрока = тбСредняя.Добавить();
	ТекСтрока.Средняя = 0;
	
	Если ВидПериода = "МЕСЯЦ" Тогда
		тбСредняя = ПолучитьСреднююЧисленностьЗаМесяц(КонецПериода, ВидСредней, Организация, ПараметрОтбора);
	ИначеЕсли ВидПериода = "КВАРТАЛ" Или ВидПериода = "КВАРТАЛСНАЧАЛАГОДА" Или ВидПериода = "МЕСЯЦСНАЧАЛАГОДА" Тогда
		
		Если ВидПериода = "КВАРТАЛ"  Тогда
			ТекДата	= НачалоКвартала(НачалоПериода);
		Иначе
			ТекДата	= НачалоГода(НачалоПериода);
		КонецЕсли;
		
		КвоМесяцев = 0;
		ДатаКонца	= НачалоМесяца(КонецПериода);
		Пока ТекДата <= ДатаКонца Цикл
			
			тбСредняяЗаМесяц = ПолучитьСреднююЧисленностьЗаМесяц(ТекДата, ВидСредней, Организация, ПараметрОтбора);
			Если тбСредняяЗаМесяц[0].Средняя <> Неопределено Тогда
				ТекСтрока.Средняя = ТекСтрока.Средняя + тбСредняяЗаМесяц[0].Средняя;
			КонецЕсли;
			
			КвоМесяцев = КвоМесяцев + 1;
			ТекДата = ДобавитьМесяц(ТекДата, 1);
		КонецЦикла;
		
		ТекСтрока.Средняя = ?( КвоМесяцев = 0, 0, ОкруглитьПоПравилуЧетнойЦифры(ТекСтрока.Средняя/КвоМесяцев));
		
	КонецЕсли;
	
	Возврат тбСредняя;
	
КонецФункции // ПолучитьСреднюю()

// Рассчитывает записи НДФЛ из переданного набора записей
//
// Параметры: 
//  НеобходимыеДанные		- структура со многими параметрами, необходимыми для расчета
//  ТабличнаяЧастьДокумента - табличная часть документа, структура тч должна быть одинаковой 
//                            со структурой регистра
// Возвращаемое значение:
//  Нет.
//
Процедура РассчитатьЗаписиНДФЛ(НаборЗаписейРегистра, ТабличнаяЧастьДокумента = НеОпределено, МассивИндексыСтрок = НеОпределено, Сотрудники, КомментироватьРасчет = НеОпределено, ФормаКомментариев = НеОпределено) Экспорт
	
	Если НаборЗаписейРегистра.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	// Здесь предполагаем, что в наборе записей не может быть записей с разными периодами регистрации.
	ПериодРегистрации = НаборЗаписейРегистра[0].Период;

	Регистратор = НаборЗаписейРегистра.Отбор.Регистратор.Значение;
	
	ИсходныеДанные = ПолучитьДанныеДляРасчетаНДФЛ(Регистратор, Сотрудники, КомментироватьРасчет, ФормаКомментариев);
	РассчитатьЗаписиНабораНДФЛ(	ИсходныеДанные,
								НаборЗаписейРегистра,
								ТабличнаяЧастьДокумента, 
								МассивИндексыСтрок,
								КомментироватьРасчет, ФормаКомментариев);

	НаборЗаписейРегистра.Записать();
								
КонецПроцедуры // РассчитатьНДФЛ

Функция РасчетСтраховогоСтажа(ДатаНачала, Организация, Сотрудник) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; 
	Запрос.УстановитьПараметр("ДатаНачалаСобытия",	ДатаНачала );
	Запрос.УстановитьПараметр("ГодНачалаСобытия",	Год(ДатаНачала) );
	Запрос.УстановитьПараметр("парамСотрудник",		Сотрудник );
	Запрос.УстановитьПараметр("парамФизЛицо",		Сотрудник.ФизическоеЛицо );
	Запрос.УстановитьПараметр("парамОрганизация",	Организация );
	
	ДатаПриема = ПолучитьДанныеОПриеме(Сотрудник);
	
	ТекстЗапросаВТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтраховойСтажПоДаннымПФУСрезПоследних.Год,
	|	СтраховойСтажПоДаннымПФУСрезПоследних.Месяц КАК Месяц,
	|	СтраховойСтажПоДаннымПФУСрезПоследних.МесяцыСтажа КАК МесяцыСтажа,
	|	СтраховойСтажПоДаннымПФУСрезПоследних.ДниСтажа КАК ДниСтажа
	|ПОМЕСТИТЬ ВТСтраховойСтажПоДаннымПФУ
	|ИЗ
	|	РегистрСведений.ИНАГРО_СтраховойСтажПоДаннымПФУ.СрезПоследних(
	|			&ДатаНачалаСобытия,
	|			Организация = &парамОрганизация
	|				И ФизЛицо = &парамФизЛицо) КАК СтраховойСтажПоДаннымПФУСрезПоследних
	|ГДЕ
	|	ЕСТЬNULL(СтраховойСтажПоДаннымПФУСрезПоследних.Месяц, ДАТАВРЕМЯ(1, 1, 1)) <= &ДатаНачалаСобытия";
	Запрос.Текст = ТекстЗапросаВТ;
	Результат = Запрос.Выполнить();
	
	// Период окончания справки	
	ТекстЗапросаВТ = "ВЫБРАТЬ 
	|	ЕСТЬNULL(МИНИМУМ(СтраховойСтажПоДаннымПФУ.Месяц), ДАТАВРЕМЯ(1, 1, 1)) КАК МинимальныйПериод,
	|	ЕСТЬNULL(МАКСИМУМ(СтраховойСтажПоДаннымПФУ.Месяц), ДАТАВРЕМЯ(1, 1, 1)) КАК МаксимальныйПериод
	|ИЗ ВТСтраховойСтажПоДаннымПФУ КАК СтраховойСтажПоДаннымПФУ
	|ГДЕ
	|	ЕСТЬNULL(СтраховойСтажПоДаннымПФУ.Месяц, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1)";
	Запрос.Текст = ТекстЗапросаВТ;
	Выборка = Запрос.Выполнить().Выбрать();
	МинимальныйПериодСправки = Дата(1, 1, 1);
	МаксимальныйПериодСправки = Дата(1, 1, 1);
	Если Выборка.Следующий() Тогда
		МинимальныйПериодСправки = Выборка.МинимальныйПериод;
		МаксимальныйПериодСправки = ?(Выборка.МаксимальныйПериод = Дата(1, 1, 1), Дата(1, 1, 1),КонецМесяца(Выборка.МаксимальныйПериод));
		Если МаксимальныйПериодСправки > ДатаНачала Тогда МаксимальныйПериодСправки = КонецМесяца(ДобавитьМесяц(ДатаНачала,-1)) КонецЕсли;
	КонецЕсли;
	
	СтруктураСтажа = Новый Структура;
	ТекстЗапросаВТ = "ВЫБРАТЬ 
	|	СтраховойСтажПоДаннымПФУ.Год КАК Год,
	|	СтраховойСтажПоДаннымПФУ.Месяц КАК Месяц,
	|	СтраховойСтажПоДаннымПФУ.МесяцыСтажа КАК МесяцыСтажа,
	|	СтраховойСтажПоДаннымПФУ.ДниСтажа КАК ДниСтажа
	|ИЗ ВТСтраховойСтажПоДаннымПФУ КАК СтраховойСтажПоДаннымПФУ
	|";
	Запрос.Текст = ТекстЗапросаВТ;
	ТаблицаСтажаПоСправкеПодробная = Запрос.Выполнить().Выгрузить();
	СтруктураСтажа.Вставить("ТаблицаСтажаПоСправкеПодробная", ТаблицаСтажаПоСправкеПодробная);
	
	ЛетОбщегоСтажа = 0; МесяцевОбщегоСтажа = 0; ДнейОбщегоСтажа = 0;
	// ВТИтогиПоГодам - таблица итоговых данных по годам из РС СтраховойСтажПоДаннымПФУ
	ТекстЗапросаВТ = "ВЫБРАТЬ
	|	СтраховойСтажПоДаннымПФУ.ДниСтажа КАК ДниСтажа,
	|	СтраховойСтажПоДаннымПФУ.МесяцыСтажа КАК МесяцыСтажа,
	|	СтраховойСтажПоДаннымПФУ.Год
	|ПОМЕСТИТЬ ВТИтогиПоГодам
	|ИЗ
	|	ВТСтраховойСтажПоДаннымПФУ КАК СтраховойСтажПоДаннымПФУ
	|ГДЕ
	|	СтраховойСтажПоДаннымПФУ.Месяц = ДАТАВРЕМЯ(1, 1, 1)
	|	И НЕ(ЕСТЬNULL(СтраховойСтажПоДаннымПФУ.ДниСтажа, 0) = 0
	|				И ЕСТЬNULL(СтраховойСтажПоДаннымПФУ.МесяцыСтажа, 0) = 0)
	|	И СтраховойСтажПоДаннымПФУ.Год < &ГодНачалаСобытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ИтогиМесяцы.МесяцыСтажа), 0) КАК МесяцыСтажа
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтраховойСтажПоДаннымПФУ.Месяц КАК Месяц,
	|		СУММА(СтраховойСтажПоДаннымПФУ.МесяцыСтажа) КАК МесяцыСтажа
	|	ИЗ
	|		ВТСтраховойСтажПоДаннымПФУ КАК СтраховойСтажПоДаннымПФУ
	|	ГДЕ
	|		СтраховойСтажПоДаннымПФУ.Месяц <> ДАТАВРЕМЯ(1, 1, 1)
	|		И НЕ СтраховойСтажПоДаннымПФУ.Год В
	|					(ВЫБРАТЬ
	|						ВТИтогиПоГодам.Год КАК Год
	|					ИЗ
	|						ВТИтогиПоГодам КАК ВТИтогиПоГодам)
	|		И СтраховойСтажПоДаннымПФУ.Месяц < НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СтраховойСтажПоДаннымПФУ.Месяц
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДАТАВРЕМЯ(1, 1, 1),
	|		СУММА(ВТИтогиПоГодам.МесяцыСтажа)
	|	ИЗ
	|		ВТИтогиПоГодам КАК ВТИтогиПоГодам) КАК ИтогиМесяцы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ИтогиДни.ДниСтажа), 0) КАК ДниСтажа
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(СтраховойСтажПоДаннымПФУ.ДниСтажа) КАК ДниСтажа
	|	ИЗ
	|		ВТСтраховойСтажПоДаннымПФУ КАК СтраховойСтажПоДаннымПФУ
	|	ГДЕ
	|		НЕ СтраховойСтажПоДаннымПФУ.Год В
	|					(ВЫБРАТЬ
	|						ВТИтогиПоГодам.Год КАК Год
	|					ИЗ
	|						ВТИтогиПоГодам КАК ВТИтогиПоГодам)
	|		И СтраховойСтажПоДаннымПФУ.МесяцыСтажа = 0
	|		И СтраховойСтажПоДаннымПФУ.Месяц < НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СУММА(ВТИтогиПоГодам.ДниСтажа)
	|	ИЗ
	|		ВТИтогиПоГодам КАК ВТИтогиПоГодам) КАК ИтогиДни";
	
	Запрос.Текст = ТекстЗапросаВТ;
	Выборка = Запрос.ВыполнитьПакет();
	
	МесяцыСтажаИтог = 0; ДниСтажаИтог = 0;
	
	ВыборкаМесяцы = Выборка[1].Выбрать();
	Если ВыборкаМесяцы.Следующий() Тогда
		МесяцыСтажаИтог = ВыборкаМесяцы.МесяцыСтажа;
	КонецЕсли;	

	ВыборкаДни = Выборка[2].Выбрать();
	Если ВыборкаДни.Следующий() Тогда
		ДниСтажаИтог = ВыборкаДни.ДниСтажа;
	КонецЕсли;	
	
	
	МесяцевСтажаПоДаннымПФУ = МесяцыСтажаИтог + Цел(ДниСтажаИтог/30);
	ЛетСтажаПоДаннымПФУ = Цел(МесяцевСтажаПоДаннымПФУ/12);
	МесяцевСтажаПоДаннымПФУ = МесяцевСтажаПоДаннымПФУ - Цел(МесяцевСтажаПоДаннымПФУ/12)*12; 
	ДнейСтажаПоДаннымПФУ = ДниСтажаИтог -  Цел(ДниСтажаИтог/30)*30;

	СтруктураСтажа.Вставить("ЛетСтажаПоДаннымПФУ", 	ЛетСтажаПоДаннымПФУ);
	СтруктураСтажа.Вставить("МесяцевСтажаПоДаннымПФУ", МесяцевСтажаПоДаннымПФУ);
	СтруктураСтажа.Вставить("ДнейСтажаПоДаннымПФУ", ДнейСтажаПоДаннымПФУ);

	ДнейНачальногоСтажа = 0; МесяцевНачальногоСтажа = 0; ЛетНачальногоСтажа = 0;
	// Получение начального стажа
	Если МинимальныйПериодСправки = Дата(1,1,1) Тогда
		Запрос.УстановитьПараметр("МинимальныйПериодСправки", ДатаНачала);
	Иначе 
		Запрос.УстановитьПараметр("МинимальныйПериодСправки", МинимальныйПериодСправки);
	КонецЕсли;
	
	ТекстЗапросаВТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачальныеСведенияОСтажеРаботниковОрганизации.ДнейСтажа,
	|	НачальныеСведенияОСтажеРаботниковОрганизации.Период,
	|	НачальныеСведенияОСтажеРаботниковОрганизации.ДатаСтажа
	|ИЗ
	|	РегистрСведений.ИНАГРО_НачальныеСведенияОСтажеРаботниковОрганизации.СрезПоследних(
	|			&МинимальныйПериодСправки,
	|			Организация = &парамОрганизация
	|				И Сотрудник.ФизическоеЛицо = &парамФизЛицо
	|				И ВидСтажа = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ВидыСтажа.СтраховойСтажДляБольничного)) КАК НачальныеСведенияОСтажеРаботниковОрганизации";
	
	Запрос.Текст = ТекстЗапросаВТ;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПересчитатьСтажИзДаты(Выборка.Период, Выборка.ДатаСтажа, ДнейНачальногоСтажа, МесяцевНачальногоСтажа, ЛетНачальногоСтажа);
	КонецЕсли;
	
	СтруктураСтажа.Вставить("МинимальныйПериодСправки",   МинимальныйПериодСправки);

	СтруктураСтажа.Вставить("ЛетНачальногоСтажа", 	ЛетНачальногоСтажа);
	СтруктураСтажа.Вставить("МесяцевНачальногоСтажа", МесяцевНачальногоСтажа);
	СтруктураСтажа.Вставить("ДнейНачальногоСтажа", ДнейНачальногоСтажа);

	ДнейСтажаДоНачалаСобытия = 0; МесяцевСтажаДоНачалаСобытия = 0; ЛетСтажаДоНачалаСобытия = 0;
	// Стаж до начала события от даты приема или периода окончания справки ПФУ 
	СтруктураСтажа.Вставить("МаксимальныйПериодСправки",   МаксимальныйПериодСправки);
	ДатаОтсчетаДоНачалаСобытия = Дата(1,1,1);
	Если ДатаПриема >= МаксимальныйПериодСправки Тогда
		ДатаОтсчетаДоНачалаСобытия = ДатаПриема;
	Иначе
		ДатаОтсчетаДоНачалаСобытия = НачалоДня(МаксимальныйПериодСправки + 1);
	КонецЕсли;
	ПересчитатьСтажИзДаты(ДатаНачала, ДатаОтсчетаДоНачалаСобытия, ДнейСтажаДоНачалаСобытия, МесяцевСтажаДоНачалаСобытия, ЛетСтажаДоНачалаСобытия);
	
	СтруктураСтажа.Вставить("ДатаОтсчетаДоНачалаСобытия", ДатаОтсчетаДоНачалаСобытия);
	СтруктураСтажа.Вставить("ЛетСтажаДоНачалаСобытия", 	ЛетСтажаДоНачалаСобытия);
	СтруктураСтажа.Вставить("МесяцевСтажаДоНачалаСобытия", МесяцевСтажаДоНачалаСобытия);
	СтруктураСтажа.Вставить("ДнейСтажаДоНачалаСобытия", ДнейСтажаДоНачалаСобытия);
	
	ЛетСтажа = ЛетСтажаПоДаннымПФУ + ЛетНачальногоСтажа + ЛетСтажаДоНачалаСобытия; 
	МесяцевСтажа = МесяцевСтажаПоДаннымПФУ + МесяцевНачальногоСтажа + МесяцевСтажаДоНачалаСобытия; 
	ДнейСтажа = ДнейСтажаПоДаннымПФУ + ДнейНачальногоСтажа + ДнейСтажаДоНачалаСобытия; 

	МесяцевОбщегоСтажа = МесяцевСтажа + Цел(ДнейСтажа/30);
	ЛетОбщегоСтажа = ЛетСтажа + Цел(МесяцевОбщегоСтажа/12);
	МесяцевОбщегоСтажа = МесяцевОбщегоСтажа - Цел(МесяцевОбщегоСтажа/12)*12;
	ДнейОбщегоСтажа = ДнейСтажа -  Цел(ДнейСтажа/30)*30;
	
	СтруктураСтажа.Вставить("ЛетОбщегоСтажа", 	ЛетОбщегоСтажа);
	СтруктураСтажа.Вставить("МесяцевОбщегоСтажа", МесяцевОбщегоСтажа);
	СтруктураСтажа.Вставить("ДнейОбщегоСтажа", 	ДнейОбщегоСтажа);
	// Стаж за 12 месяцев, предшествующих началу события:
	ДатаСтажа12МесяцевДоСобытия = ДобавитьМесяц(ДатаНачала,-12);
	
	Запрос.УстановитьПараметр("ДатаСтажа12МесяцевДоСобытия", ДатаСтажа12МесяцевДоСобытия);
	ТекстЗапросаВТ = "ВЫБРАТЬ
	|	СтраховойСтажПоДаннымПФУ.Год,
	|	СтраховойСтажПоДаннымПФУ.Месяц,
	|	СтраховойСтажПоДаннымПФУ.МесяцыСтажа,
	|	СтраховойСтажПоДаннымПФУ.ДниСтажа
	|ПОМЕСТИТЬ ВТСтраховойСтажПоДаннымПФУ12Месяцев
	|ИЗ
	|	ВТСтраховойСтажПоДаннымПФУ КАК СтраховойСтажПоДаннымПФУ
	|ГДЕ
	|	СтраховойСтажПоДаннымПФУ.Месяц >= НАЧАЛОПЕРИОДА(&ДатаСтажа12МесяцевДоСобытия, МЕСЯЦ)
	|   И СтраховойСтажПоДаннымПФУ.Месяц < НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ)
	|";
	
	Запрос.Текст = ТекстЗапросаВТ;
	Запрос.Выполнить();
	ЛетОбщегоСтажа12Месяцев = 0; МесяцевОбщегоСтажа12Месяцев = 0; ДнейОбщегоСтажа12Месяцев = 0;
	
	ТекстЗапросаВТ = "ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ИтогиМесяцы.МесяцыСтажа), 0) КАК МесяцыСтажа
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтраховойСтажПоДаннымПФУ.Месяц КАК Месяц,
	|		СУММА(СтраховойСтажПоДаннымПФУ.МесяцыСтажа) КАК МесяцыСтажа
	|	ИЗ
	|		ВТСтраховойСтажПоДаннымПФУ12Месяцев КАК СтраховойСтажПоДаннымПФУ
	|	ГДЕ
	|		СтраховойСтажПоДаннымПФУ.Месяц <> ДАТАВРЕМЯ(1, 1, 1)
	|		И СтраховойСтажПоДаннымПФУ.Месяц < НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СтраховойСтажПоДаннымПФУ.Месяц) КАК ИтогиМесяцы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ИтогиДни.ДниСтажа), 0) КАК ДниСтажа
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(СтраховойСтажПоДаннымПФУ.ДниСтажа) КАК ДниСтажа
	|	ИЗ
	|		ВТСтраховойСтажПоДаннымПФУ12Месяцев КАК СтраховойСтажПоДаннымПФУ
	|	ГДЕ
	|		СтраховойСтажПоДаннымПФУ.МесяцыСтажа = 0
	|		И СтраховойСтажПоДаннымПФУ.Месяц < НАЧАЛОПЕРИОДА(&ДатаНачалаСобытия, МЕСЯЦ)) КАК ИтогиДни";
	Запрос.Текст = ТекстЗапросаВТ;
	//
	Выборка = Запрос.ВыполнитьПакет();
	
	МесяцыСтажаИтог = 0; ДниСтажаИтог = 0;
	
	ВыборкаМесяцы = Выборка[0].Выбрать();
	Если ВыборкаМесяцы.Следующий() Тогда
		МесяцыСтажаИтог = ВыборкаМесяцы.МесяцыСтажа;
	КонецЕсли;	

	ВыборкаДни = Выборка[1].Выбрать();
	Если ВыборкаДни.Следующий() Тогда
		ДниСтажаИтог = ВыборкаДни.ДниСтажа;
	КонецЕсли;	
	
	ЛетСтажаПоДаннымПФУ12Месяцев = Цел(МесяцыСтажаИтог/12);
	МесяцевСтажаПоДаннымПФУ12Месяцев = МесяцыСтажаИтог - ЛетСтажаПоДаннымПФУ12Месяцев*12;
	ДнейСтажаПоДаннымПФУ12Месяцев = ДниСтажаИтог -  Цел(ДниСтажаИтог/30)*30;
	
	ДнейНачальногоСтажа12Месяцев = 0; МесяцевНачальногоСтажа12Месяцев = 0; ЛетНачальногоСтажа12Месяцев = 0;
	Если МинимальныйПериодСправки = Дата(1,1,1) Тогда
		Запрос.УстановитьПараметр("МинимальныйПериодСправки", ДатаНачала);
	Иначе 
		Запрос.УстановитьПараметр("МинимальныйПериодСправки", МинимальныйПериодСправки);
	КонецЕсли;
	ТекстЗапросаВТ = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачальныеСведенияОСтажеРаботниковОрганизации.ДнейСтажа,
	|	НачальныеСведенияОСтажеРаботниковОрганизации.Период,
	|	НачальныеСведенияОСтажеРаботниковОрганизации.ДатаСтажа
	|ИЗ
	|	РегистрСведений.ИНАГРО_НачальныеСведенияОСтажеРаботниковОрганизации.СрезПоследних(
	|			&МинимальныйПериодСправки,
	|			Организация = &парамОрганизация
	|				И Сотрудник.ФизическоеЛицо = &парамФизЛицо
	|				И ВидСтажа = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ВидыСтажа.СтраховойСтажДляБольничного)) КАК НачальныеСведенияОСтажеРаботниковОрганизации";
	Запрос.Текст = ТекстЗапросаВТ;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПересчитатьСтажИзДаты(Выборка.Период, Выборка.ДатаСтажа, ДнейНачальногоСтажа12Месяцев, МесяцевНачальногоСтажа12Месяцев, ЛетНачальногоСтажа12Месяцев);
	КонецЕсли;
	
	ДнейСтажаДоНачалаСобытия12Месяцев = 0; МесяцевСтажаДоНачалаСобытия12Месяцев = 0; ЛетСтажаДоНачалаСобытия12Месяцев = 0;
	
	Если МаксимальныйПериодСправки = Дата(1,1,1) Тогда	
		Если ДатаПриема >= ДатаСтажа12МесяцевДоСобытия Тогда
			ДатаОтсчетаДоНачалаСобытия = ДатаПриема;
		Иначе
			ДатаОтсчетаДоНачалаСобытия = НачалоДня(ДатаСтажа12МесяцевДоСобытия + 1);
		КонецЕсли;
	Иначе
		Если ДатаПриема >= МаксимальныйПериодСправки Тогда
			ДатаОтсчетаДоНачалаСобытия = ДатаПриема;
		Иначе
			ДатаОтсчетаДоНачалаСобытия = НачалоДня(МаксимальныйПериодСправки + 1);
		КонецЕсли;
	КонецЕсли;	
	ПересчитатьСтажИзДаты(ДатаНачала, ДатаОтсчетаДоНачалаСобытия, ДнейСтажаДоНачалаСобытия12Месяцев, МесяцевСтажаДоНачалаСобытия12Месяцев, ЛетСтажаДоНачалаСобытия12Месяцев);
	
	ЛетСтажа12Месяцев = ЛетСтажаПоДаннымПФУ12Месяцев + ЛетНачальногоСтажа12Месяцев + ЛетСтажаДоНачалаСобытия12Месяцев; 
	МесяцевСтажа12Месяцев = МесяцевСтажаПоДаннымПФУ12Месяцев + МесяцевНачальногоСтажа12Месяцев + МесяцевСтажаДоНачалаСобытия12Месяцев; 
	ДнейСтажа12Месяцев = ДнейСтажаПоДаннымПФУ12Месяцев + ДнейНачальногоСтажа12Месяцев + ДнейСтажаДоНачалаСобытия12Месяцев; 
	
	МесяцевОбщегоСтажа12Месяцев = МесяцевСтажа12Месяцев + Цел(ДнейСтажа12Месяцев/30) - Цел(МесяцевСтажа12Месяцев/12)*12;
	ЛетОбщегоСтажа12Месяцев = ЛетСтажа12Месяцев + Цел(МесяцевСтажа12Месяцев/12);
	ДнейОбщегоСтажа12Месяцев = ДнейСтажа12Месяцев -  Цел(ДнейСтажа12Месяцев/30)*30;
	
	СтруктураСтажа.Вставить("МесяцевСтажаЗа12Месяцев",МесяцевОбщегоСтажа12Месяцев);
	СтруктураСтажа.Вставить("ЛетСтажаЗа12Месяцев",ЛетОбщегоСтажа12Месяцев);
	СтруктураСтажа.Вставить("ДнейСтажаЗа12Месяцев", ДнейОбщегоСтажа12Месяцев);
	
	Возврат СтруктураСтажа;

КонецФункции

#Область ПроцедурыИФункцииДляАвтозаполнения

// Данная процедура написана компанией ИН-АГРО.
// 
Функция АвтозаполнениеРаботникиОрганизации(Регистратор, ПроверятьДубли = Истина, ЭтоДоговорники = Ложь, ЭтоУволенные = Ложь) Экспорт
	
	ПериодРегистрации = Регистратор.ПериодРегистрации;
	Организация = Регистратор.Организация;
	Ответственный = Регистратор.Ответственный;
	ПодразделениеОрганизации = Регистратор.ПодразделениеОрганизации;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамСсылка",	Регистратор);
	Запрос.УстановитьПараметр("парамНачало",	ПериодРегистрации);
	Запрос.УстановитьПараметр("парамКонец",		КонецМесяца(ПериодРегистрации));
	
	// Надо получить назначение на начало последнего дня месяца
	Запрос.УстановитьПараметр("парамПоследнийДеньПериодаРегистрации",	НачалоДня(КонецМесяца(ПериодРегистрации)) );
	Запрос.УстановитьПараметр("парамПоследнийДеньПередПериодРегистрации",	ПериодРегистрации );
	// Для того чтобы заполнять только уволенными надо брать СрезПоследних на следующий день.
	Запрос.УстановитьПараметр("парамПервыйДеньПослеПериодаРегистрации", КонецМесяца(ПериодРегистрации) + 1);	
	
	Запрос.УстановитьПараметр("парамОрганизация",	Регистратор.Организация);
	Запрос.УстановитьПараметр("парамПользователь",	Регистратор.Ответственный);
	Запрос.УстановитьПараметр("парамПодразделение",	Регистратор.ПодразделениеОрганизации);
	
	ЕстьРеквизитЭтоПересчетНДФЛ = Ложь;
	Если Регистратор.Метаданные().Реквизиты.Найти("ЭтоПересчетНДФЛ") <> Неопределено Тогда
		ЕстьРеквизитЭтоПересчетНДФЛ = Истина;
		Запрос.УстановитьПараметр("ЭтоПересчетНДФЛ",	Регистратор.ЭтоПересчетНДФЛ);
	КонецЕсли;
	ЕстьРеквизитПредварительныйРасчет = Ложь;
	Если Регистратор.Метаданные().Реквизиты.Найти("ПредварительныйРасчет") <> Неопределено Тогда
		ЕстьРеквизитПредварительныйРасчет = Истина;
	КонецЕсли;
	ЕстьПерерассчитываемыйДокумент = Ложь;
	ТекстПерерассчитываемыйДокумент = "";
	Если Регистратор.Метаданные().Реквизиты.Найти("ПерерассчитываемыйДокумент") <> Неопределено Тогда
		ЕстьПерерассчитываемыйДокумент = Истина;
		ТекстПерерассчитываемыйДокумент = "ЗНАЧЕНИЕ(Документ."+Регистратор.Метаданные().Имя+".ПустаяСсылка)";
	КонецЕсли;

	// Проверим ответственного - является ли он расчетчиком вообще и для заданного 
	// подразделения (если оно задано).
	ПустоеПодразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	ПустойОтветственный = Справочники.Пользователи.ПустаяСсылка();
	Если Ответственный <> ПустойОтветственный Тогда
		Если ПодразделениеОрганизации <> ПустоеПодразделение Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Подразделения.Ссылка
			|ИЗ Справочник.ПодразделенияОрганизаций КАК Подразделения
			|ГДЕ Подразделения.Ссылка В ИЕРАРХИИ(&парамПодразделение)
			|";
			Если Запрос.Выполнить().Пустой() Тогда
				ТекстСообщения = НСтр("ru='Ответственный за этот документ не является расчетчиком для выбранного подразделения';uk='Відповідальний за цей документ не є розраховувачем для обраного підрозділу'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат  Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Описание условий	
	ПоВсемПодразделениямОрганизации = Истина;
	Если ПодразделениеОрганизации <> ПустоеПодразделение Тогда
		
		ПоВсемПодразделениямОрганизации = Ложь;
		УсловиеНаПодразделение = "ПодразделениеОрганизации В ИЕРАРХИИ (&парамПодразделение)";
		
	КонецЕсли;
	
		// Текст запроса: срез работников на конец месяца
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Сотрудники.Сотрудник КАК Сотрудник  
		|ИЗ (		
		|	ВЫБРАТЬ
		|		Работники.Сотрудник КАК Сотрудник ";
		Если ЭтоУволенные Тогда  
			ТекстЗапроса = ТекстЗапроса + " ИЗ	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&парамПервыйДеньПослеПериодаРегистрации,Организация = &парамОрганизация) КАК Работники"; 
		Иначе  
			ТекстЗапроса = ТекстЗапроса + " ИЗ	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&парамПоследнийДеньПериодаРегистрации, Организация = &парамОрганизация) КАК Работники";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|	
		|	
		|	// все уволенные до текущего периода
		|	ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ
		|			Работники.Сотрудник КАК Сотрудник
		|		ИЗ	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&парамПоследнийДеньПередПериодРегистрации, Организация = &парамОрганизация) КАК Работники
		|		ГДЕ		Работники.ЗанимаемыхСтавок = 0 
		|			И	Работники.Сотрудник.ОсновноеНазначение = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|			И	Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|			"+?(ПоВсемПодразделениямОрганизации, "", "И Работники."+УсловиеНаПодразделение)+"
		|	) КАК УволенныеРаботники
		|	ПО  Работники.Сотрудник = УволенныеРаботники.Сотрудник
		|	
		|	ГДЕ  Работники.Сотрудник.ОсновноеНазначение = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|	И  УволенныеРаботники.Сотрудник ЕСТЬ NULL
		|	"+?(ПоВсемПодразделениямОрганизации, "", "И Работники."+УсловиеНаПодразделение)+"
		|	"+?(ЭтоУволенные, "И Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)", "")+"
		|	"+?(ЭтоУволенные, "И НЕ Работники.Сотрудник.ИНАГРО_ДоговорПодряда ", "") + "
		|	"+?(ЭтоДоговорники, "И Работники.Сотрудник.ИНАГРО_ДоговорПодряда ", "") + "
		
		
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ДоговорникиОрганизаций.Сотрудник КАК Сотрудник
		|	ИЗ  Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорникиОрганизаций
		|	
		|	ГДЕ ДоговорникиОрганизаций.Проведен
		|		И ДоговорникиОрганизаций.ДатаОкончания >= &парамНачало
		|		И ДоговорникиОрганизаций.ДатаНачала <= &парамКонец
		|		И ДоговорникиОрганизаций.Организация = &парамОрганизация
		|	"+?(ПоВсемПодразделениямОрганизации, "", " И ДоговорникиОрганизаций."+УсловиеНаПодразделение)+"
		|	"+?(ЭтоУволенные,"И НЕ ДоговорникиОрганизаций.Сотрудник.ИНАГРО_ДоговорПодряда ", "") + "
		|	"+?(ЭтоДоговорники, "И ДоговорникиОрганизаций.Сотрудник.ИНАГРО_ДоговорПодряда ", "") + "
		
		|		
		|) КАК Сотрудники		
		|		
		|";
		
		Если ПроверятьДубли Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ЛЕВОЕ СОЕДИНЕНИЕ (		
			|	ВЫБРАТЬ
			|		Работники.Сотрудник КАК Сотрудник
			|	ИЗ  Документ." + Регистратор.Метаданные().Имя + ".РаботникиОрганизации КАК Работники
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|	Документ.ИНАГРО_Сторнирование КАК Сторнирование
			|	ПО Сторнирование.СторнируемыйДокумент = Работники.Ссылка
			|	ГДЕ		Работники.Ссылка <> &парамСсылка 
			|		И	Работники.Ссылка.ПериодРегистрации = &парамНачало
			|		И	Работники.Ссылка.Организация = &парамОрганизация
			|		И	НЕ Работники.Ссылка.ПометкаУдаления
			|		И	Работники.Ссылка.Проведен
            |		И	Сторнирование.Ссылка ЕСТЬ NULL
			|		" + ?(ЕстьРеквизитЭтоПересчетНДФЛ, "И НЕ Работники.Ссылка.ЭтоПересчетНДФЛ <> &ЭтоПересчетНДФЛ", "") + "
			|		" + ?(ЕстьРеквизитПредварительныйРасчет, "И НЕ Работники.Ссылка.ПредварительныйРасчет", "") + "
			|		" + ?(ЕстьПерерассчитываемыйДокумент, "И НЕ Работники.Ссылка.ПерерассчитываемыйДокумент <> " + ТекстПерерассчитываемыйДокумент, "") + "
			|) КАК РаботникиРассчитанныеДругимиДокументами		
			|ПО РаботникиРассчитанныеДругимиДокументами.Сотрудник = Сотрудники.Сотрудник 		
			|		
			|ГДЕ	РаботникиРассчитанныеДругимиДокументами.Сотрудник ЕСТЬ NULL		
			|	И	Сотрудники.Сотрудник.ОсновноеНазначение = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)		
			|";
			
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ Сотрудники.Сотрудник.ОсновноеНазначение = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)		
			|";
			
		КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Данная процедура написана компанией ИН-АГРО.
// 
Процедура АвтозаполнениеВзносы(Регистратор, Взносы, ЭтоВзносы, Сотрудники, ПоРегистратору = Ложь ) Экспорт
	
	Если Регистратор.Метаданные().Реквизиты.Найти("ПерерассчитываемыйДокумент")= Неопределено  Тогда
		мПериодРегистрации = Регистратор.ПериодРегистрации;
	Иначе
		мПериодРегистрации = ?(ЗначениеЗаполнено(Регистратор.ПерерассчитываемыйДокумент), Регистратор.ПерерассчитываемыйДокумент.ПериодРегистрации, Регистратор.ПериодРегистрации);
	КонецЕсли;

	ИспользуетсяЕСВ = ИспользуетсяЕСВ(Регистратор.ПериодРегистрации);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамРегистратор" , Регистратор);
	Запрос.УстановитьПараметр("парамОрганизация" , Регистратор.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", мПериодРегистрации);
	Запрос.УстановитьПараметр("парамСотрудники"  , Сотрудники);
	Запрос.УстановитьПараметр("парамПрогрессивнаяШкала"  , Перечисления.СпособыРасчетаПоШкале.Прогрессивный);
	
	//	ВТРаботникиПоПериодам
	Если Истина Тогда
		
		// Определим правила отнесения к налоговому периоду
		Если ИспользуетсяЕСВ Тогда
			
			Запрос.УстановитьПараметр("СписокДекретныеПоЕСВ",СписокДекретныеПоЕСВ());
			Запрос.УстановитьПараметр("СписокГПХПоЕСВ",СписокГПХПоЕСВ());
			
			ТекстНалоговыйПериод = "ВЫБОР КОГДА Начисления.ВидРасчета.ЭтоБольничные // Больничные
			                        |ИЛИ  Начисления.ВидРасчета В (&СписокГПХПоЕСВ) // Оплата по договору ГПХ
									|ИЛИ  Начисления.ВидРасчета В (&СписокДекретныеПоЕСВ) // Декретные
									|ИЛИ  Начисления.ВидРасчета.ЭтоОтпускные // Отпускные
									|ТОГДА НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало,	МЕСЯЦ) // По периоду действия
									|ИНАЧЕ &ПериодРегистрации // По периоду регистрации
									|КОНЕЦ";
            ТекстНачало = "ВЫБОР КОГДА Начисления.ВидРасчета.ЭтоБольничные
			                        |ИЛИ  Начисления.ВидРасчета В (&СписокГПХПоЕСВ)
									|ИЛИ  Начисления.ВидРасчета В (&СписокДекретныеПоЕСВ)
									|ИЛИ  Начисления.ВидРасчета.ЭтоОтпускные
									|ТОГДА Начисления.ПериодДействияНачало
									|ИНАЧЕ &ПериодРегистрации
									|КОНЕЦ";
			ТекстКонец = "ВЫБОР КОГДА Начисления.ВидРасчета.ЭтоБольничные
			                        |ИЛИ  Начисления.ВидРасчета В (&СписокГПХПоЕСВ)
									|ИЛИ  Начисления.ВидРасчета В (&СписокДекретныеПоЕСВ)
									|ИЛИ  Начисления.ВидРасчета.ЭтоОтпускные
									|ТОГДА Начисления.ПериодДействияКонец
									|ИНАЧЕ &ПериодРегистрации
									|КОНЕЦ";						
		Иначе
			ТекстНалоговыйПериод = "НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало,	МЕСЯЦ)";
			ТекстНачало = "НачисленияВсе.ПериодДействияНачало";
			ТекстКонец = "НачисленияВсе.ПериодДействияКонец";
		КонецЕсли;	
		
		//	Описание:
		// 		Сотрудники по которым есть зарегистрированные записи по начислениям в периодеРегистрации 
		// 		сгруппированные по периодам действия.
		//
		ТекстЗапроса = "
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Начисления.Сотрудник            						КАК Сотрудник,       // сотрудник определяет организацию, потому условие на организацию не требуется
		|"+ТекстНалоговыйПериод+" КАК НалоговыйПериод,
		|		МАКСИМУМ( 
		|       		ВЫБОР КОГДА ЕСТЬNULL(РаботникиПрием.Период,НАЧАЛОПЕРИОДА("+ТекстНачало+", МЕСЯЦ)) > НАЧАЛОПЕРИОДА("+ТекстНачало+", МЕСЯЦ) 
		|							ТОГДА РаботникиПрием.Период
		|                     ИНАЧЕ НАЧАЛОПЕРИОДА("+ТекстНачало+", МЕСЯЦ) КОНЕЦ
		|		)	КАК ДатаНачала,    // если пришел на работу, то это будет дата приема		
		|
		|		МАКСИМУМ( 
		|       		ВЫБОР КОГДА  ЕСТЬNULL(РаботникиУвольнение.Период, КОНЕЦПЕРИОДА("+ТекстКонец+", МЕСЯЦ)) > КОНЕЦПЕРИОДА("+ТекстКонец+", МЕСЯЦ) 
		|							ТОГДА КОНЕЦПЕРИОДА("+ТекстКонец+", МЕСЯЦ)
		|                     ИНАЧЕ ЕСТЬNULL(РаботникиУвольнение.Период, КОНЕЦПЕРИОДА("+ТекстКонец+", МЕСЯЦ)) КОНЕЦ
		|		)	КАК ДатаОкончания    // если уволился то это будет дата увольнения		
		|
		|ПОМЕСТИТЬ ВТРаботникиПоПериодам	
		|	ИЗ	РегистрРасчета.ИНАГРО_Начисления КАК Начисления
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ	РегистрРасчета.ИНАГРО_Начисления КАК НачисленияВсе
		|	ПО		НачисленияВсе.ПериодРегистрации <= &ПериодРегистрации
		|		И	НачисленияВсе.Сотрудник = Начисления.Сотрудник
		|		И	НАЧАЛОПЕРИОДА(НачисленияВсе.ПериодДействияНачало,	МЕСЯЦ) = НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало,	МЕСЯЦ)
		|           " + ?(ПоРегистратору, "И	НачисленияВсе.Регистратор = &парамРегистратор", "") + "
		|
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ( 
		|   	ВЫБРАТЬ
		|			Работники.Сотрудник,
		|			Работники.Период КАК Период
		|       ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК Работники
		|       ГДЕ Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|		И	Работники.Сотрудник В ( &парамСотрудники )
		|   ) КАК РаботникиПрием
		|	ПО		РаботникиПрием.Сотрудник = Начисления.Сотрудник
		|
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ( 
		|   	ВЫБРАТЬ
		|			Работники.Сотрудник,
		|			ДОБАВИТЬКДАТЕ(Работники.Период,СЕКУНДА, -1) КАК Период 
		|       ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК Работники
		|       ГДЕ Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|		И	Работники.Сотрудник В ( &парамСотрудники )
		|   ) КАК РаботникиУвольнение
		|	ПО		РаботникиУвольнение.Сотрудник = Начисления.Сотрудник
		|
		|	ГДЕ		Начисления.ПериодРегистрации = &ПериодРегистрации
		|		И	Начисления.Сотрудник В ( &парамСотрудники )
		|           " + ?(ПоРегистратору, "И	Начисления.Регистратор = &парамРегистратор", "") + "
		|
		|	СГРУППИРОВАТЬ ПО
		|		Начисления.Сотрудник,
		|"+ТекстНалоговыйПериод+"
		|
		|	ИНДЕКСИРОВАТЬ ПО
		|		Сотрудник,
		|		НалоговыйПериод
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТРаботникиПоПериодам = "ВТРаботникиПоПериодам";
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТРаботникиПоПериодам";
	КонецЕсли;
	
	//	ВТВзносы
	Если Истина Тогда
		//	Описание:
		// 		Набор налогов по Сотруднику с периодом актуальности этого налога
		// 		сгруппированные по периодам действия.
		//
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Взносы.Сотрудник		КАК Сотрудник,
		|	Взносы.Налог			КАК Налог,
		|	Взносы.Период			КАК ДатаНачала,
		|	МИНИМУМ (
		|       ВЫБОР	КОГДА НЕ Окончания.Действует		// это закрытие, значит надо закрыть предыдущим днем
		|					ТОГДА  НАЧАЛОПЕРИОДА(Окончания.Период, ДЕНЬ)
		|       		КОГДА Окончания.Действует //ЕСТЬ НЕ NULL		// это закрытие, значит надо закрыть предыдущим днем
		|					ТОГДА  ДОБАВИТЬКДАТЕ(Окончания.Период, ДЕНЬ,-1)
		|				ИНАЧЕ  РаботникиПомесячно.ДатаОкончания						// если не закрыто закрываем последней датой работника	
		|				КОНЕЦ
		|						)	КАК ДатаОкончания
		|
		|ПОМЕСТИТЬ ВТВзносы	
		|ИЗ РегистрСведений.ИНАГРО_ВзносыВФондыРаботниковОрганизаций КАК Взносы
		|			
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ( 			
		|	ВЫБРАТЬ
		|		РаботникиПоПериодам.Сотрудник КАК Сотрудник,
		|		МАКСИМУМ(РаботникиПоПериодам.ДатаОкончания) КАК ДатаОкончания
		|	ИЗ " + ТекстЗапросаВТРаботникиПоПериодам + "	КАК	РаботникиПоПериодам	
		|	СГРУППИРОВАТЬ ПО			
		|		РаботникиПоПериодам.Сотрудник
		|)КАК РаботникиПомесячно			
		|ПО 	Взносы.Сотрудник = РаботникиПомесячно.Сотрудник 			
		|	И	Взносы.Период <= РаботникиПомесячно.ДатаОкончания		
		|			
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ВзносыВФондыРаботниковОрганизаций КАК Окончания
		|ПО		Взносы.Сотрудник = Окончания.Сотрудник
		|	И	Взносы.Налог = Окончания.Налог
		|	И	Взносы.Период < Окончания.Период
		|			
		|ГДЕ	Взносы.Сотрудник В ( &парамСотрудники )
		|	И	Взносы.Действует
		|СГРУППИРОВАТЬ ПО
		|	Взносы.Сотрудник,
		|	Взносы.Налог,
		|	Взносы.Период
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТВзносыРаботников = "ВТВзносы";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТВзносы";
	
	//	ВТВзносыРаботников
	Если Истина Тогда
		//	Описание:
		// 		
		//
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Взносы.Сотрудник		КАК Сотрудник,
		|	Взносы.Налог			КАК Налог,
		|	Взносы.ДатаНачала		КАК ДатаНачала,
		|	МИНИМУМ(ВзносыОкончание.ДатаОкончания)	КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТВзносыРаботников	
		|ИЗ (			
		|	ВЫБРАТЬ
		|		ВзносыНачало.Сотрудник		КАК Сотрудник,
		|		ВзносыНачало.Налог			КАК Налог,
		|		ВзносыНачало.ДатаНачала		КАК ДатаНачала
		|	ИЗ ВТВзносы КАК ВзносыНачало
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТВзносы КАК Предыдущий			
		|	ПО 		ВзносыНачало.Сотрудник = Предыдущий.Сотрудник 			
		|		И 	ВзносыНачало.Налог = Предыдущий.Налог 			
		|		И	ДОБАВИТЬКДАТЕ(ВзносыНачало.ДатаНачала, ДЕНЬ,-1) = Предыдущий.ДатаОкончания		
		|	ГДЕ	Предыдущий.Налог ЕСТЬ NULL
		|) КАК Взносы			
		|			
		|ЛЕВОЕ СОЕДИНЕНИЕ (			
		|	ВЫБРАТЬ
		|		ВзносыКонец.Сотрудник		КАК Сотрудник,
		|		ВзносыКонец.Налог			КАК Налог,
		|		ВзносыКонец.ДатаОкончания	КАК ДатаОкончания
		|	ИЗ ВТВзносы КАК ВзносыКонец
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТВзносы КАК Следующий			
		|	ПО 	ВзносыКонец.Сотрудник = Следующий.Сотрудник 			
		|	И 	ВзносыКонец.Налог = Следующий.Налог 			
		|	И	ДОБАВИТЬКДАТЕ(ВзносыКонец.ДатаОкончания, ДЕНЬ,1) = Следующий.ДатаНачала		
		|	ГДЕ	Следующий.Налог ЕСТЬ NULL
		|) КАК ВзносыОкончание			
		|ПО 	Взносы.Сотрудник = ВзносыОкончание.Сотрудник 			
		|	И 	Взносы.Налог = ВзносыОкончание.Налог 			
		|	И 	Взносы.ДатаНачала <= ВзносыОкончание.ДатаОкончания 			
		|			
		|СГРУППИРОВАТЬ ПО
		|	Взносы.Сотрудник,
		|	Взносы.Налог,
		|	Взносы.ДатаНачала
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТВзносыРаботников = "ВТВзносыРаботников";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТВзносыРаботников";
	
	//	ВТПараметрыНалоговНачалоКонец
	Если Истина Тогда
		
		//	ВТДатаИзмененияПределВидРасчетаШкала
		Если Регистратор.Метаданные().Имя="ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций" Тогда
			//	Описание:
			// 		ПределыСтраховыхВзносов, ВидыРасчетовВзносовВФонды, ШкалаСтавокНалогов   
			//      тут получим даты изменения в таблицах (Периоды)
			//      эти таблички маленькие, потому никакими условиями их не ограничиваем.
			//
			ТекстЗапроса = "
			|//-----------------------
			|// Если не СтавкаПоПериодуРегистрации - старый метод
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Налоги.ИНАГРО_Налог				КАК Налог,
			|	Налоги.Период				КАК Период
			|ПОМЕСТИТЬ ВТДатаИзмененияПределВидРасчетаШкала	
			|ИЗ РегистрСведений.ПределыСтраховыхВзносов КАК Налоги
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВидыРасч.Налог				КАК Налог,
			|	ВидыРасч.Период				КАК Период
			|ИЗ РегистрСведений.ИНАГРО_ВидыРасчетовВзносовВФонды КАК ВидыРасч
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ВидыРасчетовВзносовВФонды.СрезПоследних(&ПериодРегистрации) КАК ВРВзносыВФонды
			|ПО ВидыРасч.Налог = ВРВзносыВФонды.Налог
			|ГДЕ НЕ ВРВзносыВФонды.ВидРасчета.СтавкаПоПериодуРегистрации 
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ШкалаСтавокНалогов.Налог	КАК Налог,
			|	ШкалаСтавокНалогов.Период	КАК Период
			|ИЗ РегистрСведений.ШкалаСтавокНалогов КАК ШкалаСтавокНалогов
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ВидыРасчетовВзносовВФонды.СрезПоследних(&ПериодРегистрации) КАК ВРВзносыВФонды
			|ПО ШкалаСтавокНалогов.Налог = ВРВзносыВФонды.Налог
			|ГДЕ НЕ ВРВзносыВФонды.ВидРасчета.СтавкаПоПериодуРегистрации 
			|";
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
			ТекстЗапросаВТДатаИзмененияПределВидРасчетаШкала = "ВТДатаИзмененияПределВидРасчетаШкала";
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТДатаИзмененияПределВидРасчетаШкала";
		
		//	ВТНалогНачалоКонец
		Если Регистратор.Метаданные().Имя="ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций" Тогда
			//	Описание:
			// 		Определить периоды когда параметры налога не изменялись: Налог (Начало, Конец).   
			//
			ТекстЗапроса = "
			|//-----------------------
			|// Если не СтавкаПоПериодуРегистрации - старый метод
			|ВЫБРАТЬ
			|	ДанныеОНалогах.Налог										КАК Налог,
			|	ДанныеОНалогах.Период										КАК ПериодНачало,
			|	МИНИМУМ( ДОБАВИТЬКДАТЕ( Окончание.Период, СЕКУНДА, -1 ) )	КАК ПериодКонец
			|ПОМЕСТИТЬ ВТНалогНачалоКонец	
			|ИЗ	" + ТекстЗапросаВТДатаИзмененияПределВидРасчетаШкала + " КАК ДанныеОНалогах
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТДатаИзмененияПределВидРасчетаШкала + " КАК Окончание
			|ПО    Окончание.Налог = ДанныеОНалогах.Налог
			|	И	Окончание.Период > ДанныеОНалогах.Период
			|		
			|СГРУППИРОВАТЬ ПО
			|	ДанныеОНалогах.Налог,
			|	ДанныеОНалогах.Период
			|		
			|		
			|"; 
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
			ТекстЗапросаВТНалогНачалоКонец = "ВТНалогНачалоКонец";
		Иначе
			ТекстЗапроса = "
			|//-----------------------
			|// За месяц целиком
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеОНалогах.Налог	КАК Налог,
			|	НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)	КАК ПериодНачало,
			|	КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)		КАК ПериодКонец
			|ПОМЕСТИТЬ ВТНалогНачалоКонец	
			|ИЗ РегистрСведений.ИНАГРО_ВидыРасчетовВзносовВФонды.СрезПоследних(&ПериодРегистрации) КАК ДанныеОНалогах
			|"; 
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
			ТекстЗапросаВТНалогНачалоКонец = "ВТНалогНачалоКонец";
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТНалогНачалоКонец";
		
		//	Описание:
		// 		Определить периоды когда параметры налогов не изменялись + сами параметры: 
		//		Налог+Параметры (Начало, Конец)   
		//
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НалогиПоПериодам.Налог			КАК Налог,
		|	НалогиПоПериодам.ПериодНачало	КАК ПериодНачало,
		|	НалогиПоПериодам.ПериодКонец	КАК ПериодКонец,    // тут может быть NULL
		|
		|	ДанныеОПределахВзносов.Предел	КАК Предел,
		|	ДанныеОПределахВзносов.МинимальнаяБаза	КАК МинимальнаяБаза,
		|	ВидыРасчетов.ВидРасчета			КАК ВидРасчета,
		|	ВидыРасчетов.ВидРасчета.СпособРасчетаПоШкале КАК СпособРасчетаПоШкале,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаПоШкале.ПоШкале) КАК ПрогрессивнаяШкала,
		|
		|	ВЫБОР	КОГДА	ВидыРасчетов.ВидРасчета.СпособРасчетаПоШкале = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаПоШкале.ПоШкале) 
		|   			ТОГДА	NULL
		|   		ИНАЧЕ 		Шкала.НомерПорога 
		|   КОНЕЦ							КАК НомерПорога      // только для прогрессивной шкалы
		|
		|ПОМЕСТИТЬ ВТПараметрыНалоговНачалоКонец	
		|ИЗ (
		|	ВЫБРАТЬ
		|		Налоги.Налог						КАК Налог,
		|		Налоги.ПериодНачало					КАК ПериодНачало,
		|		Налоги.ПериодКонец					КАК ПериодКонец,
		|		ШкалаПериодОрганизация.Организация	КАК Организация,
		|		МАКСИМУМ(Сведения.Период)			КАК ПериодПределВзносав,
		|		МАКСИМУМ(ВидыРасчетов.Период)		КАК ПериодВидРасчета,
		|		МАКСИМУМ(ШкалаПериодОрганизация.Период)	КАК ПериодШкалаСтавок
		|	ИЗ	" + ТекстЗапросаВТНалогНачалоКонец + " КАК Налоги
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПределыСтраховыхВзносов КАК Сведения
		|	ПО		Налоги.Налог			=	Сведения.ИНАГРО_Налог
		|		И	(Налоги.ПериодКонец		>=	Сведения.Период 
		|		ИЛИ	Налоги.ПериодКонец		ЕСТЬ NULL)
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ВидыРасчетовВзносовВФонды КАК ВидыРасчетов
		|	ПО		Налоги.Налог			=	ВидыРасчетов.Налог
		|		И	(Налоги.ПериодКонец		>=	ВидыРасчетов.Период 
		|		ИЛИ	Налоги.ПериодКонец		ЕСТЬ NULL)
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ 
		|			ШкалаСтавок.Налог	КАК Налог,
		|			ШкалаСтавок.Период	КАК Период,
		|			МАКСИМУМ(ШкалаСтавок.Организация)	КАК Организация
		|		ИЗ (
		|			ВЫБРАТЬ 
		|				ШкалаСтавокНалогов.Налог			КАК Налог,
		|				МАКСИМУМ(ШкалаСтавокНалогов.Период)	КАК Период
		|			ИЗ РегистрСведений.ШкалаСтавокНалогов КАК ШкалаСтавокНалогов
		|			ГДЕ		ШкалаСтавокНалогов.Период  <= КОНЕЦПЕРИОДА( &ПериодРегистрации )
		|				И	(ШкалаСтавокНалогов.Организация = (&парамОрганизация) ИЛИ ШкалаСтавокНалогов.Организация =  ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|			СГРУППИРОВАТЬ ПО
		|				ШкалаСтавокНалогов.Налог
		|		) КАК ШкалаСтавокПериод
		|					   	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаСтавокНалогов КАК ШкалаСтавок	
		|		ПО		ШкалаСтавокПериод.Налог = ШкалаСтавок.Налог	   	
		|			И	ШкалаСтавокПериод.Период = ШкалаСтавок.Период
		|			И	(ШкалаСтавок.Организация = (&парамОрганизация) ИЛИ ШкалаСтавок.Организация =  ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|							
		|		СГРУППИРОВАТЬ ПО
		|			ШкалаСтавок.Налог,
		|			ШкалаСтавок.Период
		|	) КАК ШкалаПериодОрганизация
		|	ПО		Налоги.Налог = ШкалаПериодОрганизация.Налог
		|		И	(Налоги.ПериодКонец >=	ШкалаПериодОрганизация.Период 
		|		ИЛИ	Налоги.ПериодКонец ЕСТЬ NULL)
		|
		|	СГРУППИРОВАТЬ ПО
		|		Налоги.Налог,
		|		Налоги.ПериодНачало,
		|		Налоги.ПериодКонец,
		|		ШкалаПериодОрганизация.Организация
	    |) КАК НалогиПоПериодам
	    |
	    |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПределыСтраховыхВзносов КАК ДанныеОПределахВзносов
	    |ПО		НалогиПоПериодам.Налог					= ДанныеОПределахВзносов.ИНАГРО_Налог
	    |	И	НалогиПоПериодам.ПериодПределВзносав	= ДанныеОПределахВзносов.Период 
	    |
	    |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ВидыРасчетовВзносовВФонды КАК ВидыРасчетов
	    |ПО		НалогиПоПериодам.Налог				= ВидыРасчетов.Налог
	    |	И	НалогиПоПериодам.ПериодВидРасчета	= ВидыРасчетов.Период 
	    |
	    |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШкалаСтавокНалогов КАК Шкала
	    |ПО		НалогиПоПериодам.Налог				= Шкала.Налог
	    |	И	НалогиПоПериодам.ПериодШкалаСтавок	= Шкала.Период 
		|	И	НалогиПоПериодам.Организация =  Шкала.Организация
	    |
	    |
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТВТПараметрыНалоговНачалоКонец = "ВТПараметрыНалоговНачалоКонец";
		
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПараметрыНалоговНачалоКонец";
	
	//	ВТОсновная
	Если Истина Тогда
		//	Описание:
		// 		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИСТИНА			КАК Авторасчет,
		|	РаботникиПоПериодам.Сотрудник			КАК Сотрудник,
		|	РаботникиПоПериодам.ДатаНачала 			КАК БазовыйПериодНачало,
		|	РаботникиПоПериодам.ДатаОкончания 		КАК БазовыйПериодКонец,
		|	ВзносыРаботников.Налог					КАК Налог,
		|
		|	ПараметрыНалогов.ВидРасчета				КАК ВидРасчета,
		|	ПараметрыНалогов.НомерПорога			КАК НомерПорога,
		|	ПараметрыНалогов.Предел					КАК Предел,
		|	ПараметрыНалогов.МинимальнаяБаза		КАК МинимальнаяБаза,
		|
		|
		|	ВЫБОР	КОГДА		РаботникиПоПериодам.ДатаНачала >= ВзносыРаботников.ДатаНачала		
		|					И	РаботникиПоПериодам.ДатаНачала >= ПараметрыНалогов.ПериодНачало
		|				ТОГДА	РаботникиПоПериодам.ДатаНачала
		|			КОГДА		ВзносыРаботников.ДатаНачала >= РаботникиПоПериодам.ДатаНачала		
		|					И	ВзносыРаботников.ДатаНачала >= ПараметрыНалогов.ПериодНачало
		|				ТОГДА	ВзносыРаботников.ДатаНачала
		|			КОГДА		ПараметрыНалогов.ПериодНачало >= РаботникиПоПериодам.ДатаНачала	
		|					И	ПараметрыНалогов.ПериодНачало >= ВзносыРаботников.ДатаНачала
		|				ТОГДА	ПараметрыНалогов.ПериодНачало
		|	КОНЕЦ										КАК ДатаНачала,
		|
		|	ВЫБОР	КОГДА		РаботникиПоПериодам.ДатаОкончания <= ВзносыРаботников.ДатаОкончания		
		|					И	(РаботникиПоПериодам.ДатаОкончания <= ПараметрыНалогов.ПериодКонец	ИЛИ ПараметрыНалогов.ПериодКонец ЕСТЬ NULL )
		|				ТОГДА	РаботникиПоПериодам.ДатаОкончания
		|			КОГДА		ВзносыРаботников.ДатаОкончания <= РаботникиПоПериодам.ДатаОкончания		
		|					И	(ВзносыРаботников.ДатаОкончания <= ПараметрыНалогов.ПериодКонец	ИЛИ ПараметрыНалогов.ПериодКонец ЕСТЬ NULL )
		|				ТОГДА	ВзносыРаботников.ДатаОкончания
		|			КОГДА		ПараметрыНалогов.ПериодКонец <= РаботникиПоПериодам.ДатаОкончания	
		|					И	ПараметрыНалогов.ПериодКонец <= ВзносыРаботников.ДатаОкончания
		|				ТОГДА	ПараметрыНалогов.ПериодКонец
		|	КОНЕЦ										КАК ДатаОкончания,
		|
		|	ВзносыРаботников.ДатаНачала		КАК ВзносыРаботниковДатаНачала,
		|	ВзносыРаботников.ДатаОкончания	КАК ВзносыРаботниковДатаОкончания,
		|	ПараметрыНалогов.ПериодНачало   КАК ПараметрыНалоговПериодНачало,
		|	ПараметрыНалогов.ПериодКонец	КАК ПараметрыНалоговПериодКонец
		|
		|ПОМЕСТИТЬ ВТОсновная	
		|ИЗ	" + ТекстЗапросаВТРаботникиПоПериодам + " КАК РаботникиПоПериодам
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТВзносыРаботников + " КАК ВзносыРаботников
		|ПО		РаботникиПоПериодам.Сотрудник =	ВзносыРаботников.Сотрудник
		|	И ( РаботникиПоПериодам.ДатаНачала <=	ВзносыРаботников.ДатаОкончания ИЛИ	ВзносыРаботников.ДатаОкончания ЕСТЬ NULL )
		|	И	ВзносыРаботников.ДатаНачала <= РаботникиПоПериодам.ДатаОкончания 
		|	            
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТВТПараметрыНалоговНачалоКонец + " КАК ПараметрыНалогов
		|	ПО	ВзносыРаботников.Налог = ПараметрыНалогов.Налог
		|	И ( РаботникиПоПериодам.ДатаНачала <= ПараметрыНалогов.ПериодКонец	ИЛИ	ПараметрыНалогов.ПериодКонец ЕСТЬ NULL )
		|	И	ПараметрыНалогов.ПериодНачало <= РаботникиПоПериодам.ДатаОкончания 
		|	И ( ВзносыРаботников.ДатаНачала <= ПараметрыНалогов.ПериодКонец	ИЛИ	ПараметрыНалогов.ПериодКонец ЕСТЬ NULL )
		|	И ( ПараметрыНалогов.ПериодНачало <= ВзносыРаботников.ДатаОкончания ИЛИ	ВзносыРаботников.ДатаОкончания ЕСТЬ NULL)
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТВзносыРаботников = "ВТОсновная";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТОсновная";
	
	
	НужноРассчитыватьКоэффициент = Ложь;
	ЭтоНачислениеЗП = Ложь;
	Если Регистратор.Метаданные().Имя = "ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций" Тогда
        // Проверим есть ли в таблице несоответствие базового периода и периода изменения ставки
		// если есть, то надо будет провести еще расчет коэффициента.
		//
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Основной.Сотрудник,
		|	Основной.БазовыйПериодНачало,
		|	Основной.БазовыйПериодКонец,
		|	Основной.Налог,
		|	Основной.ВидРасчета,
		|	Основной.НомерПорога,
		|	Основной.Предел,
		|	Основной.МинимальнаяБаза,
		|	Основной.ДатаНачала,
		|	Основной.ДатаОкончания
		|ИЗ	ВТОсновная КАК Основной
		|
		|ГДЕ Основной.БазовыйПериодНачало <> Основной.ДатаНачала	            
		|	 ИЛИ Основной.БазовыйПериодКонец <> Основной.ДатаОкончания           
		|";
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НужноРассчитыватьКоэффициент = Истина;
		КонецЕсли;
		ЭтоНачислениеЗП = Истина;
	КонецЕсли;
	
	// Проверим, если в периоде регистрации неоплаченные больничные
	Если Регистратор.Метаданные().Имя = "ИНАГРО_НачислениеЗарплатыРаботникамОрганизаций" Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	Основной.Сотрудник,
		|	Основной.ПериодРегистрации
		|ПОМЕСТИТЬ ВТНеоплаченныеБольничные
		|ИЗ	РегистрРасчета.ИНАГРО_Начисления КАК Основной
		|
		|ГДЕ Основной.ПериодРегистрации = &ПериодРегистрации	            
		|	 И Основной.ПериодДействия = &ПериодРегистрации
		|	 И Основной.Сотрудник В (&парамСотрудники)
		|	 И Основной.ВидРасчета.ЭтоБольничные
		|	 И Основной.Результат = 0
		|";
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ 
		|	NULL  КАК Сотрудник,
		|	NULL  КАК ПериодРегистрации
		|ПОМЕСТИТЬ ВТНеоплаченныеБольничные
		|";
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
	КонецЕсли;	
	
    Запрос.УстановитьПараметр("ПрименятьМинБазу", ЭтоНачислениеЗП И мПериодРегистрации >= ДатаИзмененияЕСВ1573());
	
	Если НужноРассчитыватьКоэффициент Тогда
		
		// ВТНорма	
		Если Истина Тогда
			//	Описание:
			// 		Норма времени по периодам минус норма времени невыходов 
			//		Невыходы - виды расчеты, которые виляют на расчет времени и не включены в базу взноса
			//		Например больничный для безработицы это невыход, но для пенсионного вкрлючается 
			//		в норму отработанного времени для получения пропорции.
			//
			ТекстЗапроса = "
			|ВЫБРАТЬ 
			|	Основной.Сотрудник, 
			|	Основной.ВидРасчета, 
			|	Основной.БазовыйПериодНачало, 
			|	Основной.БазовыйПериодКонец, 
			|	Основной.ДатаНачалаСтавки, 
			|	Основной.ДатаОкончанияСтавки, 
			|	Основной.ГрафикРаботы,
			|	Основной.ДатаНачала, 
			|	Основной.ДатаОкончания,
			|	СУММА(НормыПоГрафику.ОсновноеЗначение) КАК Дней
			|ПОМЕСТИТЬ ВТНорма	
			|ИЗ (
			|	ВЫБРАТЬ 
			|		Основной.Сотрудник					КАК Сотрудник, 
			|		Основной.ВидРасчета					КАК ВидРасчета, 
			|		Основной.БазовыйПериодНачало		КАК БазовыйПериодНачало, 
			|		Основной.БазовыйПериодКонец			КАК БазовыйПериодКонец, 
			|		Основной.ДатаНачала					КАК ДатаНачалаСтавки, 
			|		Основной.ДатаОкончания				КАК ДатаОкончанияСтавки, 
			|		ГрафикРаботника.ГрафикРаботы		КАК ГрафикРаботы,
			|		ВЫБОР КОГДА Работники.ДатаНачала <= Основной.ДатаНачала ТОГДА Основной.ДатаНачала ИНАЧЕ Работники.ДатаНачала КОНЕЦ	КАК ДатаНачала, 
			|		ВЫБОР КОГДА Работники.ДатаОкончания ЕСТЬ NULL ИЛИ Основной.ДатаОкончания <= Работники.ДатаОкончания ТОГДА Основной.ДатаОкончания ИНАЧЕ Работники.ДатаОкончания КОНЕЦ	КАК ДатаОкончания 
			|		ИЗ ВТОсновная КАК Основной
			|
			|		// если график менялся в середине месяца
			|		ЛЕВОЕ СОЕДИНЕНИЕ (
			|			ВЫБРАТЬ 
			|				РаботникиОрганизаций.Сотрудник,
			|				РаботникиОрганизаций.Период КАК ДатаНачала,
			|				МИНИМУМ(ДОБАВИТЬКДАТЕ(РаботникиОрганизаций1.Период,День,-1)) КАК ДатаОкончания
			|			ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизаций
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизаций1
			|			ПО	РаботникиОрганизаций1.ЗанимаемыхСтавок > 0
			|			И	РаботникиОрганизаций1.Сотрудник = РаботникиОрганизаций.Сотрудник
			|			И	РаботникиОрганизаций.Период < РаботникиОрганизаций1.Период
			|			ГДЕ	РаботникиОрганизаций.ЗанимаемыхСтавок > 0
			|			СГРУППИРОВАТЬ ПО 
			|				РаботникиОрганизаций.Сотрудник,
			|				РаботникиОрганизаций.Период
			|		)КАК Работники
			|		ПО		Основной.Сотрудник	= Работники.Сотрудник 
			|			И	Работники.ДатаНачала <= Основной.ДатаОкончания
			|			И	(Основной.ДатаНачала <= Работники.ДатаОкончания ИЛИ Работники.ДатаОкончания ЕСТЬ NULL)
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК ГрафикРаботника
			|		ПО		Основной.Сотрудник	= ГрафикРаботника.Сотрудник 
			|			И	Работники.ДатаНачала = ГрафикРаботника.Период
			|
			|		ГДЕ Основной.БазовыйПериодНачало <> Основной.ДатаНачала
			|		ИЛИ Основной.БазовыйПериодКонец <> Основной.ДатаОкончания
			|) КАК Основной 
			|
			|// График работы
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК НормыПоГрафику
			|ПО		Основной.ГрафикРаботы	= НормыПоГрафику.ГрафикРаботы 
			|	И	Основной.ДатаНачала <= НормыПоГрафику.Дата
			|	И	Основной.ДатаОкончания >= НормыПоГрафику.Дата
			|	И	НормыПоГрафику.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
			|
			|СГРУППИРОВАТЬ ПО 
			|	Основной.Сотрудник, 
			|	Основной.ВидРасчета, 
			|	Основной.БазовыйПериодНачало, 
			|	Основной.БазовыйПериодКонец, 
			|	Основной.ДатаНачалаСтавки, 
			|	Основной.ДатаОкончанияСтавки, 
			|	Основной.ГрафикРаботы,
			|	Основной.ДатаНачала, 
			|	Основной.ДатаОкончания
			|
			|
			|// невыходы нормы с отрицательными значениями
			|ОБЪЕДИНИТЬ ВСЕ			
			|ВЫБРАТЬ 
			|	Основной.Сотрудник, 
			|	Основной.ВидРасчета, 
			|	Основной.БазовыйПериодНачало, 
			|	Основной.БазовыйПериодКонец, 
			|	Основной.ДатаНачалаСтавки, 
			|	Основной.ДатаОкончанияСтавки, 
			|	Основной.ГрафикРаботы,
			|	Основной.ДатаНачала, 
			|	Основной.ДатаОкончания,
			|	СУММА(- НормыПоГрафику.ОсновноеЗначение) КАК Дней
			|
			|ИЗ (
			|ВЫБРАТЬ 
			|	Основной.Сотрудник					КАК Сотрудник, 
			|	Основной.ВидРасчета					КАК ВидРасчета, 
			|	Основной.БазовыйПериодНачало		КАК БазовыйПериодНачало, 
			|	Основной.БазовыйПериодКонец			КАК БазовыйПериодКонец, 
			|	Основной.ДатаНачала					КАК ДатаНачалаСтавки, 
			|	Основной.ДатаОкончания				КАК ДатаОкончанияСтавки, 
			|	БазаИзНачислений.ГрафикРаботы		КАК ГрафикРаботы, 
			|	БазаИзНачислений.ВидРасчета			КАК ВидРасчета1, 
			|	ВЫБОР КОГДА Основной.ДатаНачала	<= БазаИзНачислений.ПериодДействияНачало 
			|			ТОГДА БазаИзНачислений.ПериодДействияНачало 
			|			ИНАЧЕ Основной.ДатаНачала 
			|	КОНЕЦ		КАК ДатаНачала, 
			|	ВЫБОР КОГДА Основной.ДатаОкончания <= БазаИзНачислений.ПериодДействияКонец 
			|		ТОГДА Основной.ДатаОкончания 
			|		ИНАЧЕ БазаИзНачислений.ПериодДействияКонец 
			|	КОНЕЦ	КАК ДатаОкончания 
			|
			|ИЗ ВТОсновная КАК Основной
			|
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления.ДанныеГрафика() КАК БазаИзНачислений
			|ПО		Основной.Сотрудник	= БазаИзНачислений.Назначение 
			|	И	БазаИзНачислений.ПериодДействияНачало <= Основной.ДатаОкончания
			|	И	Основной.ДатаНачала <= БазаИзНачислений.ПериодДействияКонец
			|	И	БазаИзНачислений.ПериодРегистрации <= &ПериодРегистрации
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_ВзносыВФонды.БазовыеВидыРасчета КАК БазовыеВидыРасчета
			|ПО		Основной.ВидРасчета = БазовыеВидыРасчета.Ссылка  
			|	И	БазаИзНачислений.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
			|
			|ГДЕ	БазовыеВидыРасчета.ВидРасчета ЕСТЬ NULL
			|	И	БазаИзНачислений.ВидРасчета.ЗачетНормыВремени
			|	И	(Основной.БазовыйПериодНачало <> Основной.ДатаНачала
			|	ИЛИ Основной.БазовыйПериодКонец <> Основной.ДатаОкончания)
			|
			|) КАК Основной 
			|
			|// График работы
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК НормыПоГрафику
			|ПО		Основной.ГрафикРаботы	= НормыПоГрафику.ГрафикРаботы 
			|	И	Основной.ДатаНачала <= НормыПоГрафику.Дата
			|	И	Основной.ДатаОкончания >= НормыПоГрафику.Дата
			|	И	НормыПоГрафику.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
			|
			|СГРУППИРОВАТЬ ПО 
			|	Основной.Сотрудник, 
			|	Основной.ВидРасчета, 
			|	Основной.БазовыйПериодНачало, 
			|	Основной.БазовыйПериодКонец, 
			|	Основной.ДатаНачалаСтавки, 
			|	Основной.ДатаОкончанияСтавки, 
			|	Основной.ГрафикРаботы,
			|	Основной.ДатаНачала, 
			|	Основной.ДатаОкончания
			|";
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТНорма";
		
		// ВТПолнаяНорма	
		Если Истина Тогда
			//	Описание:
			// 		Норма времени по периодам минус норма времени невыходов 
			//		Невыходы - виды расчеты, которые виляют на расчет времени и не включены в базу взноса
			//		Например больничный для безработицы это невыход, но для пенсионного вкрлючается 
			//		в норму отработанного времени для получения пропорции.
			//
			ТекстЗапроса = "
			|ВЫБРАТЬ 
			|	Основной.Сотрудник, 
			|	Основной.ВидРасчета, 
			|	Основной.БазовыйПериодНачало, 
			|	Основной.БазовыйПериодКонец, 
			|	Основной.ГрафикРаботы,
			|	Основной.ДатаНачала, 
			|	Основной.ДатаОкончания,
			|	СУММА(НормыПоГрафику.ОсновноеЗначение) КАК Дней
			|ПОМЕСТИТЬ ВТПолнаяНорма	
			|ИЗ (
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ 
			|		Основной.Сотрудник					КАК Сотрудник, 
			|		Основной.ВидРасчета					КАК ВидРасчета, 
			|		Основной.БазовыйПериодНачало		КАК БазовыйПериодНачало, 
			|		Основной.БазовыйПериодКонец			КАК БазовыйПериодКонец, 
			|		ГрафикРаботника.ГрафикРаботы		КАК ГрафикРаботы,
			|		ВЫБОР КОГДА Работники.ДатаНачала <= Основной.БазовыйПериодНачало ТОГДА Основной.БазовыйПериодНачало ИНАЧЕ Работники.ДатаНачала КОНЕЦ	КАК ДатаНачала, 
			|		ВЫБОР КОГДА Работники.ДатаОкончания ЕСТЬ NULL ИЛИ Основной.БазовыйПериодКонец <= Работники.ДатаОкончания ТОГДА Основной.БазовыйПериодКонец ИНАЧЕ Работники.ДатаОкончания КОНЕЦ	КАК ДатаОкончания 
			|		ИЗ ВТОсновная КАК Основной
			|
			|		// если график менялся в середине месяца
			|		ЛЕВОЕ СОЕДИНЕНИЕ (
			|			ВЫБРАТЬ 
			|				РаботникиОрганизаций.Сотрудник,
			|				РаботникиОрганизаций.Период КАК ДатаНачала,
			|				МИНИМУМ(ДОБАВИТЬКДАТЕ(РаботникиОрганизаций1.Период,День,-1)) КАК ДатаОкончания
			|			ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизаций
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизаций1
			|			ПО	РаботникиОрганизаций1.ЗанимаемыхСтавок > 0
			|			И	РаботникиОрганизаций1.Сотрудник = РаботникиОрганизаций.Сотрудник
			|			И	РаботникиОрганизаций.Период < РаботникиОрганизаций1.Период
			|			ГДЕ	РаботникиОрганизаций.ЗанимаемыхСтавок > 0
			|			СГРУППИРОВАТЬ ПО 
			|				РаботникиОрганизаций.Сотрудник,
			|				РаботникиОрганизаций.Период
			|		)КАК Работники
			|		ПО		Основной.Сотрудник	= Работники.Сотрудник 
			|			И	Работники.ДатаНачала <= Основной.БазовыйПериодКонец
			|			И	(Основной.БазовыйПериодНачало <= Работники.ДатаОкончания ИЛИ Работники.ДатаОкончания ЕСТЬ NULL)
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК ГрафикРаботника
			|		ПО		Основной.Сотрудник	= ГрафикРаботника.Сотрудник 
			|			И	Работники.ДатаНачала = ГрафикРаботника.Период
			|
			|) КАК Основной 
			|
			|// График работы
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК НормыПоГрафику
			|ПО		Основной.ГрафикРаботы	= НормыПоГрафику.ГрафикРаботы 
			|	И	Основной.ДатаНачала <= НормыПоГрафику.Дата
			|	И	Основной.ДатаОкончания >= НормыПоГрафику.Дата
			|	И	НормыПоГрафику.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
			|
			|СГРУППИРОВАТЬ ПО 
			|	Основной.Сотрудник, 
			|	Основной.ВидРасчета, 
			|	Основной.БазовыйПериодНачало, 
			|	Основной.БазовыйПериодКонец, 
			|	Основной.ГрафикРаботы,
			|	Основной.ДатаНачала, 
			|	Основной.ДатаОкончания
			|
			|
			|// невыходы нормы с отрицательными значениями
			|ОБЪЕДИНИТЬ ВСЕ			
			|ВЫБРАТЬ 
			|	Основной.Сотрудник, 
			|	Основной.ВидРасчета, 
			|	Основной.БазовыйПериодНачало, 
			|	Основной.БазовыйПериодКонец, 
			|	Основной.ГрафикРаботы,
			|	Основной.ДатаНачала, 
			|	Основной.ДатаОкончания,
			|	СУММА( - НормыПоГрафику.ОсновноеЗначение) КАК Дней
			|
			|ИЗ (
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Основной.Сотрудник					КАК Сотрудник, 
			|	Основной.ВидРасчета					КАК ВидРасчета, 
			|	Основной.БазовыйПериодНачало		КАК БазовыйПериодНачало, 
			|	Основной.БазовыйПериодКонец			КАК БазовыйПериодКонец, 
			|	БазаИзНачислений.ГрафикРаботы		КАК ГрафикРаботы, 
			|	БазаИзНачислений.ВидРасчета			КАК ВидРасчета1, 
			|	ВЫБОР КОГДА Основной.БазовыйПериодНачало	<= БазаИзНачислений.ПериодДействияНачало 
			|			ТОГДА БазаИзНачислений.ПериодДействияНачало 
			|			ИНАЧЕ Основной.БазовыйПериодНачало 
			|	КОНЕЦ		КАК ДатаНачала, 
			|	ВЫБОР КОГДА Основной.БазовыйПериодКонец <= БазаИзНачислений.ПериодДействияКонец 
			|		ТОГДА Основной.БазовыйПериодКонец 
			|		ИНАЧЕ БазаИзНачислений.ПериодДействияКонец 
			|	КОНЕЦ	КАК ДатаОкончания 
			|
			|ИЗ ВТОсновная КАК Основной
			|
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления.ДанныеГрафика() КАК БазаИзНачислений
			|ПО		Основной.Сотрудник	= БазаИзНачислений.Назначение 
			|	И	БазаИзНачислений.ПериодДействияНачало <= Основной.БазовыйПериодКонец
			|	И	Основной.БазовыйПериодНачало <= БазаИзНачислений.ПериодДействияКонец
			|	И	БазаИзНачислений.ПериодРегистрации <= &ПериодРегистрации
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_ВзносыВФонды.БазовыеВидыРасчета КАК БазовыеВидыРасчета
			|ПО		Основной.ВидРасчета = БазовыеВидыРасчета.Ссылка  
			|	И	БазаИзНачислений.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
			|
			|ГДЕ	БазовыеВидыРасчета.ВидРасчета ЕСТЬ NULL
			|	И	БазаИзНачислений.ВидРасчета.ЗачетНормыВремени
			|
			|) КАК Основной 
			|
			|// График работы
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК НормыПоГрафику
			|ПО		Основной.ГрафикРаботы	= НормыПоГрафику.ГрафикРаботы 
			|	И	Основной.ДатаНачала <= НормыПоГрафику.Дата
			|	И	Основной.ДатаОкончания >= НормыПоГрафику.Дата
			|	И	НормыПоГрафику.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
			|
			|СГРУППИРОВАТЬ ПО 
			|	Основной.Сотрудник, 
			|	Основной.ВидРасчета, 
			|	Основной.БазовыйПериодНачало, 
			|	Основной.БазовыйПериодКонец, 
			|	Основной.ГрафикРаботы,
			|	Основной.ДатаНачала, 
			|	Основной.ДатаОкончания
			|";
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПолнаяНорма";

		// ВТНормаВремени	
		Если Истина Тогда
			//	Описание:
			// 		Получаем реквизиты Дней и ДнейВсего, для расчета пропорции по норме времени при изменении ставки.
			//
			ТекстЗапроса = "
			|ВЫБРАТЬ 
			|	Основной.Сотрудник, 
			|	Основной.ВидРасчета, 
			|	Основной.БазовыйПериодНачало, 
			|	Основной.БазовыйПериодКонец, 
			|	Основной.ДатаНачала, 
			|	Основной.ДатаОкончания, 
			|	Основной.Дней КАК Дней,
			|	СуммаОсновной.Дней КАК ДнейВсего
			|ПОМЕСТИТЬ ВТНормаВремени	
			|ИЗ ( 
			|	ВЫБРАТЬ 
			|		Норма.Сотрудник, 
			|		Норма.ВидРасчета, 
			|		Норма.БазовыйПериодНачало, 
			|		Норма.БазовыйПериодКонец, 
			|		Норма.ДатаНачалаСтавки		КАК ДатаНачала, 
			|		Норма.ДатаОкончанияСтавки	КАК ДатаОкончания, 
			|		СУММА(Норма.Дней) КАК Дней
			|		ИЗ ВТНорма КАК Норма
			|	СГРУППИРОВАТЬ ПО 
			|		Норма.Сотрудник, 
			|		Норма.ВидРасчета, 
			|		Норма.БазовыйПериодНачало, 
			|		Норма.БазовыйПериодКонец, 
			|		Норма.ДатаНачалаСтавки, 
			|		Норма.ДатаОкончанияСтавки 
			|) КАК Основной 
			| 
			|ЛЕВОЕ СОЕДИНЕНИЕ ( 
			|	ВЫБРАТЬ 
			|		Норма.Сотрудник, 
			|		Норма.ВидРасчета, 
			|		Норма.БазовыйПериодНачало, 
			|		Норма.БазовыйПериодКонец, 
			|		СУММА(Норма.Дней) КАК Дней
			|		ИЗ ВТПолнаяНорма КАК Норма
			|	СГРУППИРОВАТЬ ПО 
			|		Норма.Сотрудник, 
			|		Норма.ВидРасчета, 
			|		Норма.БазовыйПериодНачало, 
			|		Норма.БазовыйПериодКонец 
			|) КАК СуммаОсновной 
			|ПО   СуммаОсновной.Сотрудник = Основной.Сотрудник 
			|	И	СуммаОсновной.ВидРасчета = Основной.ВидРасчета 
			|	И	СуммаОсновной.БазовыйПериодНачало = Основной.БазовыйПериодНачало 
			|	И	СуммаОсновной.БазовыйПериодКонец = Основной.БазовыйПериодКонец  
			|";
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТНормаВремени";
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Основной.Авторасчет,
		|	Основной.Сотрудник,
		|	Основной.БазовыйПериодНачало,
		|	Основной.БазовыйПериодКонец,
		|	Основной.Налог,
		|	Основной.ВидРасчета,
		|	Основной.НомерПорога,
		|	Основной.Предел,
		|	ВЫБОР
		|	 КОГДА НЕ &ПрименятьМинБазу
		|	  ТОГДА 0
		|	 КОГДА Основной.Сотрудник.ИНАГРО_ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
		|	  ТОГДА 0
		|	 КОГДА ЕСТЬNULL(РаботникиОрганизацийНаНачалоПериода.ЗанимаемыхСтавок,0) = 0
		|	   ИЛИ ЕСТЬNULL(РаботникиОрганизацийНаКонецПериода.ЗанимаемыхСтавок,0) = 0
		|	  ТОГДА 0
		|	 КОГДА НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ) > &ПериодРегистрации
		|	  ТОГДА 0
		|	 КОГДА НЕ (НеоплаченныеБольничные.Сотрудник ЕСТЬ NULL)
		|	  ТОГДА 0
		|	 ИНАЧЕ Основной.МинимальнаяБаза
		|	КОНЕЦ КАК МинимальнаяБаза,
		|	Основной.ДатаНачала,
		|	Основной.ДатаОкончания,
		|	НормаВремени.Дней КАК ОтработаноДней,
		|	НормаВремени.ДнейВсего КАК ОтработаноДнейВсего
		|ИЗ	ВТОсновная КАК Основной
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаВремени КАК НормаВремени
		|ПО		Основной.Сотрудник = НормаВремени.Сотрудник
		|	И	Основной.ВидРасчета = НормаВремени.ВидРасчета 
		|	И	Основной.БазовыйПериодНачало = НормаВремени.БазовыйПериодНачало 
		|	И	Основной.БазовыйПериодКонец = НормаВремени.БазовыйПериодКонец 
		|	И	Основной.ДатаНачала = НормаВремени.ДатаНачала 
		|	И	Основной.ДатаОкончания = НормаВремени.ДатаОкончания 
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(НАЧАЛОПЕРИОДА(&ПериодРегистрации,МЕСЯЦ), Организация = &парамОрганизация И Сотрудник В (&парамСотрудники)) 
		|	КАК РаботникиОрганизацийНаНачалоПериода
		|ПО		Основной.Сотрудник = РаботникиОрганизацийНаНачалоПериода.Сотрудник
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ), Секунда, -1), Организация = &парамОрганизация И Сотрудник В (&парамСотрудники)) 
		|	КАК РаботникиОрганизацийНаКонецПериода
		|ПО		Основной.Сотрудник = РаботникиОрганизацийНаКонецПериода.Сотрудник
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТНеоплаченныеБольничные КАК НеоплаченныеБольничные
		|ПО	Основной.Сотрудник = НеоплаченныеБольничные.Сотрудник
		|   И НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ) = НеоплаченныеБольничные.ПериодРегистрации
		|	         	            
		|УПОРЯДОЧИТЬ ПО	            
		|	Основной.Сотрудник,            
		|	НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ),            
		|	Основной.Налог,            
		|	Основной.БазовыйПериодНачало,            
		|	Основной.ДатаНачала,            
		|	НомерПорога.Порядок           
		|";
		Запрос.Текст = ТекстЗапроса;
		
	Иначе	
		
		// точно не надо получать данные графиков в середине месяца
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	Основной.Авторасчет,
		|	Основной.Сотрудник,
		|	Основной.ДатаНачала	КАК ПериодВзаиморасчетов,
		|	Основной.БазовыйПериодНачало,
		|	Основной.БазовыйПериодКонец,
		|	Основной.Налог,
		|	Основной.ВидРасчета,
		|	Основной.НомерПорога,
		|	Основной.Предел,
		|	ВЫБОР
		|	 КОГДА НЕ &ПрименятьМинБазу
		|	  ТОГДА 0
		|	 КОГДА Основной.Сотрудник.ИНАГРО_ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
		|	  ТОГДА 0
		|	 КОГДА ЕСТЬNULL(РаботникиОрганизацийНаНачалоПериода.ЗанимаемыхСтавок,0) = 0
		|	   ИЛИ ЕСТЬNULL(РаботникиОрганизацийНаКонецПериода.ЗанимаемыхСтавок,0) = 0
		|	  ТОГДА 0
        |	 КОГДА НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ) > &ПериодРегистрации
		|	  ТОГДА 0
		|	 КОГДА НЕ (НеоплаченныеБольничные.Сотрудник ЕСТЬ NULL)
		|	  ТОГДА 0
		|	 ИНАЧЕ Основной.МинимальнаяБаза
		|	КОНЕЦ КАК МинимальнаяБаза,
		|	Основной.ДатаНачала,
		|	Основной.ДатаОкончания
		|ИЗ	ВТОсновная КАК Основной
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(НАЧАЛОПЕРИОДА(&ПериодРегистрации,МЕСЯЦ), Организация = &парамОрганизация И Сотрудник В (&парамСотрудники)) 
		|	КАК РаботникиОрганизацийНаНачалоПериода
		|ПО		Основной.Сотрудник = РаботникиОрганизацийНаНачалоПериода.Сотрудник
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(КОНЕЦПЕРИОДА(&ПериодРегистрации,МЕСЯЦ), Организация = &парамОрганизация И Сотрудник В (&парамСотрудники)) 
		|	КАК РаботникиОрганизацийНаКонецПериода
		|ПО		Основной.Сотрудник = РаботникиОрганизацийНаКонецПериода.Сотрудник
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТНеоплаченныеБольничные КАК НеоплаченныеБольничные
		|ПО	Основной.Сотрудник = НеоплаченныеБольничные.Сотрудник
		|   И НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ) = НеоплаченныеБольничные.ПериодРегистрации
		|
		|УПОРЯДОЧИТЬ ПО	            
		|	Основной.Сотрудник,            
		|	НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, МЕСЯЦ),            
		|	Основной.Налог,            
		|	Основной.БазовыйПериодНачало,            
		|	Основной.ДатаНачала,            
		|	НомерПорога.Порядок           
		|";
		Запрос.Текст = ТекстЗапроса;
		
	КонецЕсли;
	
	
	ВыборкаВзносы = Запрос.Выполнить().Выбрать();
	Если ЭтоВзносы Тогда
		СпособВзносы = Перечисления.СпособыРасчетаНачислений.Взносы;
	Иначе
		СпособВзносы = Перечисления.СпособыРасчетаНачислений.ВзносыФОТ;
	КонецЕсли;

	Пока ВыборкаВзносы.Следующий() Цикл
	
		Если НЕ ЗначениеЗаполнено(ВыборкаВзносы.ВидРасчета) Тогда
			Продолжить;
		ИначеЕсли ВыборкаВзносы.ВидРасчета.СпособРасчета <> СпособВзносы Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Взносы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаВзносы);
		ОпределитьКодКатегорииЗЛ(НоваяСтрока, Регистратор);
		ОпределитьТипНачисления(НоваяСтрока, Регистратор);
		
	КонецЦикла;

КонецПроцедуры

// Данная процедура написана компанией ИН-АГРО.
// 
Процедура АвтозаполнениеНДФЛ(Регистратор, НДФЛ, Сотрудники, ПоРегистратору = Ложь, СНачалаГода = Ложь, ГодЗаполнения = 0 ) Экспорт
	
	Если СНачалаГода Тогда
		мПериодРегистрации = Мин(Регистратор.ПериодРегистрации, Дата(ГодЗаполнения,12,1));
	ИначеЕсли Регистратор.Метаданные().реквизиты.Найти("ПерерассчитываемыйДокумент")= Неопределено  Тогда
		мПериодРегистрации = Регистратор.ПериодРегистрации;
	Иначе
		мПериодРегистрации = ?(ЗначениеЗаполнено(Регистратор.ПерерассчитываемыйДокумент), Регистратор.ПерерассчитываемыйДокумент.ПериодРегистрации, Регистратор.ПериодРегистрации);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамРегистратор" , Регистратор);
	Запрос.УстановитьПараметр("парамОрганизация" , Регистратор.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", мПериодРегистрации);
	Запрос.УстановитьПараметр("парамСотрудники"  , Сотрудники);
	
	// парамНачало - парамКонец 
	Если СНачалаГода Тогда
		
		Запрос.УстановитьПараметр("парамНачало" , НачалоГода(мПериодРегистрации) );
		Запрос.УстановитьПараметр("парамКонец"  , КонецМесяца(мПериодРегистрации) );
		
	Иначе
		
		Запрос.УстановитьПараметр("парамНачало" , мПериодРегистрации);
		Запрос.УстановитьПараметр("парамКонец"  , КонецМесяца(мПериодРегистрации));
	
	КонецЕсли;
	
	ИспользуетсяНК = ИспользуетсяНК(Регистратор.ПериодРегистрации);
	
	// ВТРаботникиПоПериодам
	Если Истина Тогда
		
		Если ИспользуетсяНК Тогда
			ТекстНП = "ВЫБОР КОГДА Начисления.ВидРасчета.ЭтоБольничные // Больничные
					|		ИЛИ (Начисления.ВидРасчета.ЭтоОтпускные И НЕ Начисления.Сторно) // Отпускные
					|		ТОГДА Начисления.ПериодДействия
					|		ИНАЧЕ Начисления.ПериодРегистрации
					|		КОНЕЦ";
		Иначе
			ТекстНП = "Начисления.ПериодДействия";
		КонецЕсли;	
		
		//	Описание:
		// 		Сотрудники по которым есть зарегистрированные записи по начислениям в периодеРегистрации 
		// 		сгруппированные по периодам действия.
		//
		ТекстЗапроса = "
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Начисления.Сотрудник            			КАК Сотрудник,		// сотрудник определяет организацию, потому условие на организацию не требуется
		|		Начисления.ВидРасчета.ДоходНДФЛ				КАК ДоходНДФЛ,
		|		"+ТекстНП+"	КАК ПериодДействия,
		|		МИНИМУМ(Начисления.ПериодДействияНачало)	КАК ДатаНачала,		// если принят на работу то это будет дата приема
		|		МАКСИМУМ(Начисления.ПериодДействияКонец)	КАК ДатаОкончания	// если уволился то это будет дата увольнения
		|
		|ПОМЕСТИТЬ ВТРаботникиПоПериодам	
		|	ИЗ	РегистрРасчета.ИНАГРО_Начисления КАК Начисления
		|		ГДЕ	Начисления.ПериодРегистрации <= &парамКонец
		|		И	Начисления.ПериодРегистрации >= &парамНачало
		|		И	Начисления.Сотрудник В ( &парамСотрудники )
		|           " + ?(ПоРегистратору, "И	Начисления.Регистратор = &парамРегистратор", "") + "
		|
		|	СГРУППИРОВАТЬ ПО
		|		Начисления.Сотрудник,
		|		Начисления.ВидРасчета.ДоходНДФЛ,
		|		"+ТекстНП+"
		|
		|	ИНДЕКСИРОВАТЬ ПО
		|		Сотрудник,
		|		ПериодДействия,
		|		ДоходНДФЛ
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТРаботникиПоПериодам = "ВТРаботникиПоПериодам";
	КонецЕсли;
	
	// ВТГражданствоФизЛиц
	Если Истина Тогда
		//	Описание:
		// 		Сотрудники по которым есть зарегистрированные записи по начислениям в периодеРегистрации 
		// 		сгруппированные по периодам действия.
		//
		ТекстЗапроса = "
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ГражданствоФизЛиц.Период     КАК Период,
		|		ГражданствоФизЛиц.ФизическоеЛицо    КАК ФизЛицо,
		|		НЕ ГражданствоФизЛиц.ИНАГРО_НеЯвляетсяНалоговымРезидентом  КАК Резидент
		|
		|ПОМЕСТИТЬ ВТГражданствоФизЛиц	
		|	ИЗ РегистрСведений.ГражданствоФизическихЛиц КАК ГражданствоФизЛиц
		|
		|	ГДЕ  	ГражданствоФизЛиц.Период <= &парамКонец
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТГражданствоФизЛиц = "ВТГражданствоФизЛиц";
	КонецЕсли;
	
	// ВТШахтеры
	Если Истина Тогда
		//	Описание:
		// 		Сотрудники по которым есть зарегистрированные записи по начислениям в периодеРегистрации 
		// 		сгруппированные по периодам действия.
		//
		ТекстЗапроса = "
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ВЫБОР КОГДА РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|		ТОГДА НАЧАЛОПЕРИОДА(РаботникиОрганизаций.Период, МЕСЯЦ)
		|		ИНАЧЕ РаботникиОрганизаций.Период КОНЕЦ   КАК Период,

		|		РаботникиОрганизаций.Сотрудник    КАК Сотрудник,
		|		РаботникиОрганизаций.Должность.ЯвляетсяШахтерскойДолжностью  КАК Шахтер
		|
		|ПОМЕСТИТЬ ВТШахтеры	
		|	ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизаций
		|
		|	ГДЕ		РаботникиОрганизаций.Сотрудник В ( &парамСотрудники )
		|	  	И	РаботникиОрганизаций.Сотрудник.ОсновноеНазначение = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТШахтеры = "ВТШахтеры";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТШахтеры";
		
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ИСТИНА			КАК Авторасчет,
	|	Основной.Сотрудник			КАК Сотрудник,
	|	Основной.ДоходНДФЛ	    	КАК ДоходНДФЛ,
	|	Основной.НалоговыйПериод	КАК НалоговыйПериод,
	|	Параметры_Шахтеры.Шахтер	КАК Параметры_Шахтеры_Шахтер,
	|	Основной.ДоходНДФЛ.ВидСтавкиШахтера	КАК ВидСтавкиШахтера,
	|	NULL	КАК ВидСтавкиНеРезидента,
	|	ВЫБОР	КОГДА ЕстьNULL(Параметры_Шахтеры.Шахтер,ЛОЖЬ)
	|	 ТОГДА Основной.ДоходНДФЛ.ВидСтавкиШахтера
	|	 ИНАЧЕ Основной.ДоходНДФЛ.ВидСтавкиУвеличенная
	|	КОНЕЦ КАК УвеличеннаяСтавка,
	|	ВЫБОР	КОГДА ЕстьNULL(Параметры_Шахтеры.Шахтер,ЛОЖЬ)
	|				ТОГДА Основной.ДоходНДФЛ.ВидСтавкиШахтера 
	|ИНАЧЕ Основной.ДоходНДФЛ.ВидСтавкиРезидента
	|          КОНЕЦ                                        КАК ВидСтавки
	|	ИЗ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			НачисленияРаботников.Сотрудник		КАК Сотрудник,
	|			НачисленияРаботников.ДоходНДФЛ	    КАК ДоходНДФЛ,
	|			НачисленияРаботников.ПериодДействия	КАК НалоговыйПериод,
	|			МАКСИМУМ(ТБШахтеры.Период) 			КАК ПериодРасчетовШахтеры,
	|			МАКСИМУМ(НеРезиденты.Период) 		КАК ПериодРасчетовНеРезиденты
	|		ИЗ " + ТекстЗапросаВТРаботникиПоПериодам + " КАК НачисленияРаботников
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТШахтеры + " КАК ТБШахтеры
	|       ПО		ТБШахтеры.Период <= НачисленияРаботников.ПериодДействия
	|       	И	 ТБШахтеры.Сотрудник = НачисленияРаботников.Сотрудник    
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТГражданствоФизЛиц + " КАК НеРезиденты
	|       ПО		НеРезиденты.Период <= НачисленияРаботников.ПериодДействия
	|       	И	 НеРезиденты.Физлицо = НачисленияРаботников.Сотрудник.ФизическоеЛицо    
	|		СГРУППИРОВАТЬ ПО
	|			НачисленияРаботников.Сотрудник,
	|			НачисленияРаботников.ДоходНДФЛ,
	|			НачисленияРаботников.ПериодДействия
	|   ) КАК Основной
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТШахтеры + " КАК Параметры_Шахтеры
	|	ПО		Основной.ПериодРасчетовШахтеры = Параметры_Шахтеры.Период
	|		И	Основной.Сотрудник =  Параметры_Шахтеры.Сотрудник
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТГражданствоФизЛиц + " КАК Параметры_НеРезиденты
	|	ПО		Основной.ПериодРасчетовНеРезиденты = Параметры_НеРезиденты.Период
	|		И	Основной.Сотрудник.ФизическоеЛицо =  Параметры_НеРезиденты.Физлицо
	|
	|";

	
	Запрос.Текст = ТекстЗапроса;
	МассивНовыхСтрок = Новый Массив();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если	Выборка.ДоходНДФЛ = Null
			ИЛИ	Выборка.ДоходНДФЛ = Неопределено 
			ИЛИ	Выборка.ДоходНДФЛ = Справочники.ВидыДоходовНДФЛ.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли; 
		
		НоваяСтрока = НДФЛ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		МассивНовыхСтрок.Добавить(НоваяСтрока);
	КонецЦикла;
	
	// ВОЕННЫЙ СБОР
	
	Запрос.УстановитьПараметр("ВидДоходаВС", Справочники.ВидыДоходовНДФЛ.ВоенныйСбор);
	Запрос.УстановитьПараметр("ВидСтавкиВС", Перечисления.ВидыСтавокНДФЛ.ВоенныйСбор);
	Запрос.УстановитьПараметр("ТЧНДФЛПолная", НДФЛ.Выгрузить());
	Запрос.УстановитьПараметр("ТЧНДФЛ", НДФЛ.Выгрузить(МассивНовыхСтрок));	
	Запрос.УстановитьПараметр("парамСотрудники"  , Сотрудники);
	Используется1578 = (ДатаИзмененияНК1578() <=  Регистратор.Дата);
	Запрос.УстановитьПараметр("Используется1578", Используется1578);
	//НоваяСхемаУчетаВС = (УчетНДФЛ.ДатаИзмененияСхемыУчетаВС() <=  Регистратор.ПериодРегистрации);
	//Запрос.УстановитьПараметр("НоваяСхемаУчетаВС", НоваяСхемаУчетаВС);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧ.Сотрудник КАК Сотрудник,
	|	ТЧ.ДоходНДФЛ КАК ДоходНДФЛ,
	|	ТЧ.ДоходНДФЛ КАК ДоходНДФЛВС,
	|	ТЧ.НалоговыйПериод КАК НалоговыйПериод,
	|	&ПериодРегистрации КАК ПериодРегистрации,
	|	ТЧ.ВидСтавки КАК ВидСтавки,
	|	ТЧ.УвеличеннаяСтавка КАК УвеличеннаяСтавка
	|ПОМЕСТИТЬ ВТНДФЛ
	|ИЗ
	|	&ТЧНДФЛ КАК ТЧ
	|ГДЕ
	|	ТЧ.Сотрудник В(&парамСотрудники)";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЧ.ДоходНДФЛ			КАК ДоходНДФЛ,
	|	ТЧ.ВидСтавки	    	КАК ВидСтавки,
	|	ТЧ.НалоговыйПериод		КАК НалоговыйПериод,
	|	ТЧ.Доход		 		КАК Доход,
	|	ТЧ.Налог				КАК Налог,
	|	ТЧ.Льгота				КАК Льгота,
	|	ТЧ.КоличествоЛьгот	    КАК КоличествоЛьгот,
	|	ТЧ.Сторно				КАК Сторно,
	|	ТЧ.Авторасчет		 	КАК Авторасчет,
	|	ТЧ.Сотрудник			КАК Сотрудник,
	|	ТЧ.УвеличеннаяСтавка	КАК УвеличеннаяСтавка,
	|	ТЧ.ДоходПолный	    	КАК ДоходПолный
	|ПОМЕСТИТЬ ВТНДФЛПолная
	|ИЗ &ТЧНДФЛПолная КАК ТЧ";
	Запрос.Выполнить();
	
	Если мПериодРегистрации < УчетНДФЛ.ДатаИзмененияСхемыУчетаВС() Тогда
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Ставки.Период КАК Период,
		|	Ставки.ВидСтавки КАК ВидСтавки,
		|	Ставки.Ставка КАК Ставка
		|ПОМЕСТИТЬ ВТСтавкиВС
		|ИЗ
		|	РегистрСведений.СтавкиНДФЛ КАК Ставки
		|ГДЕ
		|	Ставки.ВидСтавки = &ВидСтавкиВС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧ.Сотрудник КАК Сотрудник,
		|	ТЧ.ПериодРегистрации КАК ПериодРегистрации,
		|	ВЫБОР
		|		КОГДА &Используется1578
		|			ТОГДА &ВидСтавкиВС
		|		ИНАЧЕ ТЧ.ДоходНДФЛ.ВидСтавкиВоенныйСбор
		|	КОНЕЦ КАК ВидСтавкиВС,
		|	МАКСИМУМ(Ставки.Период) КАК Период
		|ПОМЕСТИТЬ ВТНДФЛМаксимальныйПериод
		|ИЗ
		|	ВТНДФЛ КАК ТЧ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиВС КАК Ставки
		|		ПО ТЧ.ПериодРегистрации >= Ставки.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ТЧ.Сотрудник,
		|	ТЧ.ПериодРегистрации,
		|	ТЧ.НалоговыйПериод,
		|	ТЧ.ДоходНДФЛ.ВидСтавкиВоенныйСбор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТЧ.Сотрудник КАК Сотрудник,
		|	ТЧ.ПериодРегистрации КАК ПериодРегистрации
		|ПОМЕСТИТЬ ВТНДФЛВС
		|ИЗ
		|	ВТНДФЛМаксимальныйПериод КАК ТЧ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиВС КАК Ставки
		|		ПО ТЧ.Период = Ставки.Период
		|			И (ТЧ.Сотрудник В (&парамСотрудники))
		|ГДЕ
		|	ТЧ.ВидСтавкиВС = &ВидСтавкиВС
		|	И ЕСТЬNULL(Ставки.Ставка, 0) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЧ.ДоходНДФЛ КАК ДоходНДФЛ,
		|	ТЧ.ДоходНДФЛ.Код КАК ДоходНДФЛКод,
		|	ТЧ.ВидСтавки КАК ВидСтавки,
		|	ТЧ.НалоговыйПериод КАК НалоговыйПериод,
		|	ТЧ.Доход КАК Доход,
		|	ТЧ.Налог КАК Налог,
		|	ТЧ.Льгота КАК Льгота,
		|	ТЧ.КоличествоЛьгот КАК КоличествоЛьгот,
		|	ТЧ.Сторно КАК Сторно,
		|	ТЧ.Авторасчет КАК Авторасчет,
		|	ТЧ.Сотрудник КАК Сотрудник,
		|	ТЧ.УвеличеннаяСтавка КАК УвеличеннаяСтавка,
		|	ТЧ.ДоходПолный КАК ДоходПолный
		|ИЗ
		|	ВТНДФЛПолная КАК ТЧ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|   &ВидДоходаВС,
		|	""ВЗ"",
		|	&ВидСтавкиВС,
		|	НДФЛВС.ПериодРегистрации,
		|	0,
		|	0,
		|	NULL,
		|	0,
		|	ЛОЖЬ,
		|	ИСТИНА,
		|	НДФЛВС.Сотрудник,
		|	&ВидСтавкиВС,
		|	0
		|ИЗ
		|	ВТНДФЛВС КАК НДФЛВС
		|
		|УПОРЯДОЧИТЬ ПО
		|	Сотрудник,
		|	НалоговыйПериод,
		|	ДоходНДФЛКод
		|";
	
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТЧ.Сотрудник			КАК Сотрудник,
		|	ВидыДоходовНДФЛ.ОблагаетсяВоеннымСбором2021	КАК ДоходНДФЛ,
		|	ВидыДоходовНДФЛ.ОблагаетсяВоеннымСбором2021.Код	КАК ДоходНДФЛКод,
		|	&ПериодРегистрации      КАК ПериодРегистрации,
		|	ВидыДоходовНДФЛ.ОблагаетсяВоеннымСбором2021.ВидСтавкиРезидента 	КАК ВидСтавки,
		|	ВидыДоходовНДФЛ.ОблагаетсяВоеннымСбором2021.ВидСтавкиУвеличенная	КАК УвеличеннаяСтавка
		|ПОМЕСТИТЬ ВТНДФЛВС
		|ИЗ ВТНДФЛ КАК ТЧ
		|   ЛЕВОЕ СОЕДИНЕНИЕ
		|   Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ
		|   ПО ТЧ.ДоходНДФЛ = ВидыДоходовНДФЛ.Ссылка
		|ГДЕ
		|   ВидыДоходовНДФЛ.ОблагаетсяВоеннымСбором2021 <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
		|;
		|
		|ВЫБРАТЬ
		|	ТЧ.ДоходНДФЛ			КАК ДоходНДФЛ,
		|	ТЧ.ДоходНДФЛ.Код		КАК ДоходНДФЛКод,
		|	ТЧ.ВидСтавки	    	КАК ВидСтавки,
		|	ТЧ.НалоговыйПериод		КАК НалоговыйПериод,
		|	ТЧ.Доход		 		КАК Доход,
		|	ТЧ.Налог				КАК Налог,
		|	ТЧ.Льгота				КАК Льгота,
		|	ТЧ.КоличествоЛьгот	    КАК КоличествоЛьгот,
		|	ТЧ.Сторно				КАК Сторно,
		|	ТЧ.Авторасчет		 	КАК Авторасчет,
		|	ТЧ.Сотрудник			КАК Сотрудник,
		|	ТЧ.УвеличеннаяСтавка	КАК УвеличеннаяСтавка,
		|	ТЧ.ДоходПолный	    	КАК ДоходПолный
		|
		|ИЗ ВТНДФЛПолная КАК ТЧ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|   НДФЛВС.ДоходНДФЛ,
		|   НДФЛВС.ДоходНДФЛКод,
		|   НДФЛВС.ВидСтавки,
		|	НДФЛВС.ПериодРегистрации КАК НалоговыйПериод,
		|	0,
		|	0,
		|	NULL,
		|	0,
		|	ЛОЖЬ,
		|	ИСТИНА,
		|	НДФЛВС.Сотрудник,
		|   НДФЛВС.УвеличеннаяСтавка,
		|	0
		|ИЗ ВТНДФЛВС КАК НДФЛВС
	    |
		|УПОРЯДОЧИТЬ ПО Сотрудник, НалоговыйПериод, ДоходНДФЛКод
		|";
		
	КонецЕсли;	
	
	НДФЛ.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

// Возвращает список начислений для использования при предварительном расчете
//
Функция ПолучитьСписокНачисленийДляПредварительногоРасчета() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета,
	               |	НачисленияДляПредварительногоРасчета.ВидРасчета КАК ВидРасчета1
	               |ИЗ
	               |	ПланВидовРасчета.ИНАГРО_Начисления КАК ОсновныеНачисленияОрганизаций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_НачисленияДляПредварительногоРасчета КАК НачисленияДляПредварительногоРасчета
	               |		ПО НачисленияДляПредварительногоРасчета.ВидРасчета = ОсновныеНачисленияОрганизаций.Ссылка
	               |ГДЕ
	               |	(ОсновныеНачисленияОрганизаций.ЗачетОтработанногоВремени
	               |		И ОсновныеНачисленияОрганизаций.ЗачетНормыВремени)
				   |		ИЛИ НЕ (НачисленияДляПредварительногоРасчета.ВидРасчета ЕСТЬ NULL)";
				   
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"); 
	
КонецФункции

// Данная процедура написана компанией ИН-АГРО.
	// 
Функция ВизуализироватьФормулуРасчета(Объект, Режим = "Текст") Экспорт
	
	СпособРасчета = Объект.СпособРасчета;
	
	Если Режим = "HTML" Тогда
		
		
		СтрокаФормулы ="
		|	<HTML><HEAD>
		|	</HEAD>
		|	<BODY vlink=#000 link=#000 scroll=auto rightMargin=0><FONT face=""MS Sans Serif"" size=1>
		|";
		
	КонецЕсли;
	
	Если  СпособРасчета = Перечисления.СпособыРасчетаНачислений.ФиксированнойСуммой Или
		СпособРасчета = Перечисления.СпособыРасчетаНачислений.УдержаниеФиксированнойСуммой Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|Результат = <FONT color=#0000ee>Фиксированная сумма</FONT>"
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоДоговоруФиксированнойСуммой Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|Результат = <FONT color=#0000ee>Фиксированная сумма</FONT>"
		КонецЕсли;
		
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ИсполнительныйЛистФиксСуммой Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>, указанная в исполнительном листе";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|Результат = <FONT color=#0000ee>Фиксированная сумма, до удержания указанной в документе суммы</FONT>"
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ИсполнительныйЛистФиксСуммойДоПредела Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>, до удержания указанной в документе суммы";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|Результат = <FONT color=#0000ee>Фиксированная сумма, до удержания указанной в документе суммы</FONT>"
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ИсполнительныйЛистПроцентом Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент удержаний> * (<Расчетная база> - <Исчисленный НДФЛ>)"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|Результат = <FONT color=#0000ff>Процент удержаний</FONT> <FONT color=#FF0000> * </FONT> (<FONT color=#0000ff>Расчетная база</FONT> <FONT color=#FF0000> - </FONT> <FONT color=#0000ff>Исчисленный НДФЛ</FONT>)"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ИсполнительныйЛистПроцентомДоПредела Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент удержаний> * (<Расчетная база> - <Исчисленный НДФЛ>), до удержания указанной в документе суммы"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|Результат = <FONT color=#0000ff><Процент удержаний></FONT> <FONT color=#FF0000> * </FONT> <FONT color=#FF0000>(</FONT><FONT color=#0000ff>Расчетная база</FONT> <FONT color=#FF0000> - </FONT> <FONT color=#0000ff>Исчисленный НДФЛ</FONT><FONT color=#FF0000>)</FONT>, до удержания указанной в документе суммы"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.АлиментыФиксСуммой Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>, указанная в исполнительном листе";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|Результат = <FONT color=#0000ee>Фиксированная сумма, до удержания указанной в документе суммы</FONT>"
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.АлиментыФиксСуммойДоПредела Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Фиксированная сумма>, до удержания указанной в документе суммы";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|Результат = <FONT color=#0000ee>Фиксированная сумма, до удержания указанной в документе суммы</FONT>"
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.АлиментыПроцентом Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент удержаний> * (<Расчетная база> - <Исчисленный НДФЛ>)"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|Результат = <FONT color=#0000ff>Процент удержаний</FONT> <FONT color=#FF0000> * </FONT> (<FONT color=#0000ff>Расчетная база</FONT> <FONT color=#FF0000> - </FONT> <FONT color=#0000ff>Исчисленный НДФЛ</FONT>)"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.АлиментыПроцентомДоПредела Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент удержаний> * (<Расчетная база> - <Исчисленный НДФЛ>), до удержания указанной в документе суммы"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|Результат = <FONT color=#0000ff><Процент удержаний></FONT> <FONT color=#FF0000> * </FONT> <FONT color=#FF0000>(</FONT><FONT color=#0000ff>Расчетная база</FONT> <FONT color=#FF0000> - </FONT> <FONT color=#0000ff>Исчисленный НДФЛ</FONT><FONT color=#FF0000>)</FONT>, до удержания указанной в документе суммы"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПочтовыйСбор Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент сбора> * <Сумма по исполнительному листу>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|Результат = <FONT color=#0000ff>Процент сбора</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Сумма по исполнительному листу</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ИндексацияАлиментов Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Коэффициент индексации> * <Сумма по исполнительному листу>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Коэффициент индексации</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Сумма по исполнительному листу</FONT>"			
		КонецЕсли;
	ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаНачислений.НулеваяСумма Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<0>";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|Результат = 0"
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоДневнойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = ""+Справочники.ИНАГРО_ПоказателиСхемМотивации.ОкладТариф.Наименование + " * Отработанное время в днях"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|Результат = <FONT color=#0000ff>"+Справочники.ИНАГРО_ПоказателиСхемМотивации.ОкладТариф.Наименование + "</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Отработанное время в днях</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоЧасовойТарифнойСтавке Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<"+Справочники.ИНАГРО_ПоказателиСхемМотивации.ОкладТариф.Наименование + "> * <Отработанное время в часах>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|Результат = <FONT color=#0000ff>"+Справочники.ИНАГРО_ПоказателиСхемМотивации.ОкладТариф.Наименование + "</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Отработанное время в часах</FONT>"						
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.Процентом Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Процент оплаты> * <Расчетная база>"		
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|Результат = <FONT color=#0000ff>Процент оплаты</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Расчетная база</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаЗаВечерниеЧасы Тогда
		//Если Режим = "Текст" Тогда
		//	СтрокаФормулы = "<"+Справочники.ИНАГРО_ПоказателиСхемМотивации.ОкладТарифНазначения.Наименование + "> * <Процент доплаты> * <Вечернее время в часах>"
		//Иначе
		//	СтрокаФормулы = СтрокаФормулы + "
		//	|Результат = <FONT color=#0000ff>"+Справочники.ИНАГРО_ПоказателиСхемМотивации.ОкладТарифНазначения.Наименование + "</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Процент доплаты</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ee>Вечернее время в часах</FONT>"			
		//КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаЗаНочныеЧасы Тогда
		//Если Режим = "Текст" Тогда
		//	СтрокаФормулы = "<"+Справочники.ИНАГРО_ПоказателиСхемМотивации.ОкладТарифНазначения.Наименование + "> * <Процент доплаты> * <Ночное время в часах>"
		//Иначе
		//	СтрокаФормулы = СтрокаФормулы + "
		//	|Результат = <FONT color=#0000ff>"+Справочники.ИНАГРО_ПоказателиСхемМотивации.ОкладТарифНазначения.Наименование + "</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Процент доплаты</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ee>Ночное время в часах</FONT>"			
		//КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоСреднемуЗаработку 
		Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоСреднемуЗаработкуДляОтпуска Тогда		
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Средний дневной (часовой) заработок> * <Время в днях (часах)>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|Результат = <FONT color=#0000ff>Средний дневной (часовой) заработок</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ee>Время в днях (часах)</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоСреднемуЗаработкуДляКомпенсацииОтпуска Тогда		
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Средний дневной (часовой) заработок> * <Время в календарных днях)>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|Результат = <FONT color=#0000ff>Средний дневной заработок</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ee>Время в календарных днях</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоСреднемуЗаработкуФСС Тогда		
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Средний дневной заработок> * <Время в календарных днях>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|Результат = <FONT color=#0000ff>Средний дневной заработок</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ee>Время в календарных днях</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "Максимум(<Средний заработок> - <Начислено>, <0>)";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|Результат = <FONT color=#0000ff>Максимум</FONT><FONT color=#FF0000>(</FONT><FONT color=#0000ff>Средний заработок</FONT><FONT color=#FF0000> - </FONT><FONT color=#0000ff>Начислено</FONT> <FONT color=#FF0000>,</FONT> 0<FONT color=#FF0000>)</FONT>"		
		КонецЕсли;
		
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ИндексацияЗарплаты
		Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.ИндексацияСоциальныхНачислений Тогда		
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<Индексируемая сумма, с учетом ограничений> * <Коэффициент индексации на дату>"
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|Результат = <FONT color=#0000ff>Индексируемая сумма, с учетом ограничений</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ee>Коэффициент индексации на дату</FONT>"			
		КонецЕсли;
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоДням Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<"+Справочники.ИНАГРО_ПоказателиСхемМотивации.ОкладТариф.Наименование + "> / <Норма времени за месяц в днях> * <Отработанное время в днях>"	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|Результат = <FONT color=#0000ee>"+Справочники.ИНАГРО_ПоказателиСхемМотивации.ОкладТариф.Наименование + "</FONT> <FONT color=#FF0000> / </FONT> <FONT color=#0000ee>Норма времени за месяц в днях</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ee>Отработанное время в днях</FONT>"			
		КонецЕсли;			
	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоЧасам Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "<"+Справочники.ИНАГРО_ПоказателиСхемМотивации.ОкладТариф.Наименование + "> / <Норма времени за месяц в часах> * <Отработанное время в часах>"								
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|Результат = <FONT color=#0000ff>"+Справочники.ИНАГРО_ПоказателиСхемМотивации.ОкладТариф.Наименование + "</FONT> <FONT color=#FF0000> / </FONT> <FONT color=#0000ff>Норма времени за месяц в часах</FONT> <FONT color=#FF0000> * </FONT> <FONT color=#0000ff>Отработанное время в часах</FONT>"			
		КонецЕсли;
   	ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоМЗП Тогда
		Если Режим = "Текст" Тогда
			СтрокаФормулы = "Максимум(<Минимальная зарплата>*<Расчетная база время>/<Норма времени за месяц> - <Расчетная база>, <0>)";
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
							|Результат = <FONT color=#0000ff>Максимум</FONT><FONT color=#FF0000>(</FONT><FONT color=#0000ff>Минимальная зарплата</FONT><FONT color=#FF0000> * <FONT color=#0000ff>Расчетная база время</FONT><FONT color=#FF0000> / <FONT color=#0000ff>Норма времени за месяц</FONT><FONT color=#FF0000>   - </FONT><FONT color=#0000ff>Расчетная база</FONT> <FONT color=#FF0000>,</FONT> 0<FONT color=#FF0000>)</FONT>"		
		КонецЕсли;
		
	ИначеЕсли Объект.ПроизвольнаяФормулаРасчета Тогда
		
		ФормулаРасчета	= Объект.ФормулаРасчета;
		
		Если Режим = "Текст" Тогда
			
			Для Каждого Показатель Из Объект.Показатели Цикл
				ПоказательДляФормулы = Строка(Показатель.Показатель);
				
				ФормулаРасчета	= СтрЗаменить(ФормулаРасчета, "ИсходныеДанные.Показатель"+Показатель.НомерСтроки, ПоказательДляФормулы);
			КонецЦикла;
			
			СтрокаФормулы	= ФормулаРасчета;
			
		Иначе
			СимволыДляЗамены = "/=-+*()?<,";
			
			НоваяФормулаРасчета = "";
			Для НомерСимвола = 1 По СтрДлина(ФормулаРасчета) Цикл
				Символ = Сред(ФормулаРасчета,НомерСимвола,1);
				Если Найти(СимволыДляЗамены,Символ) > 0 Тогда
					НоваяФормулаРасчета = НоваяФормулаРасчета + "<FONT color=#FF0000>" + Символ + "</FONT>"; 
				Иначе
					НоваяФормулаРасчета = НоваяФормулаРасчета + Символ;
				КонецЕсли;
			КонецЦикла;	
			
			ФормулаРасчета = НоваяФормулаРасчета;
			
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " NOT ", "<FONT color=#FF0000> NOT </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " OR ", "<FONT color=#FF0000> OR </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " AND ", "<FONT color=#FF0000> AND </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " И ", "<FONT color=#FF0000> И </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " ИЛИ ", "<FONT color=#FF0000> ИЛИ </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " НЕ ", "<FONT color=#FF0000> НЕ </FONT>"); 
			
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " not ", "<FONT color=#FF0000> not </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " or ", "<FONT color=#FF0000> or </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " and ", "<FONT color=#FF0000> and </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " и ", "<FONT color=#FF0000> и </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " или ", "<FONT color=#FF0000> или </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " не ", "<FONT color=#FF0000> не </FONT>");
			
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " Not ", "<FONT color=#FF0000> Not </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " Or ", "<FONT color=#FF0000> Or </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " And ", "<FONT color=#FF0000> And </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " Или ", "<FONT color=#FF0000> Или </FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, " Не ", "<FONT color=#FF0000> Не </FONT>");		
			
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Цел", "<FONT color=#0000ff>Цел</FONT>"); 
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Окр", "<FONT color=#0000ff>Окр</FONT>");
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Макс", "<FONT color=#0000ff>Макс</FONT>");
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "Мин", "<FONT color=#0000ff>Мин</FONT>");
			ФормулаРасчета = СтрЗаменить(ФормулаРасчета, "ОценитьПо", "<FONT color=#0000ff>ОценитьПо</FONT>");		
			
			Для Каждого Показатель Из Объект.Показатели Цикл
				ПоказательДляФормулы = "<FONT color=#0000ff>" + Строка(Показатель.Показатель)+"</FONT>";
				
				ФормулаРасчета	= СтрЗаменить(ФормулаРасчета, "ИсходныеДанные.Показатель"+Показатель.НомерСтроки, ПоказательДляФормулы);
			КонецЦикла;
			
			СтрокаФормулы	= СтрокаФормулы + "Результат = " + ФормулаРасчета;
		КонецЕсли;
	Иначе
		Если Режим = "Текст" Тогда
			СтрокаФормулы = ""	
		Иначе
			СтрокаФормулы = СтрокаФормулы + "
			|</font></HTML>"
		КонецЕсли;
	КонецЕсли;
	
	Если Режим = "HTML" Тогда
				
		СтрокаФормулы = СтрокаФормулы + "
		|</font></HTML>"

	КонецЕсли;
	
    Возврат СтрокаФормулы;	
	
КонецФункции

// Рассчитывает записи из переданного набора записей
//
// Параметры:
//	ИмяРегистра				- имя регистра, чьи записи будут рассчитаны
//	НаборЗаписейРегистра	- набор записей, которые надо рассчитать
//	НаборЗаписейРасчетСреднего
//	ГоловнаяОрганизация
//	ОбособленноеПодразделение
//	ТабличнаяЧастьДокумента
//	ОднократныйРасчетСреднего	- будево. Если Истина, то при расчете выполняется 
//								  однократный расчет среднего в не зависимости от количесвта различных 
//								  категорий видов расчета в наборе записей
//  МассивИндексыСтрокТабличнойЧасти	- массив с индексами строк табличного поля, для реализации
//										  расчета по одному сотруднику	
//	Физлицо								- ссылка Справочники.ФизическиеЛица, для реализации
//										  расчета по одному сотруднику.	
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьЗаписиРегистраРасчета(ИмяРегистра, 
												НаборЗаписейРегистра,
												ТабличнаяЧастьДокумента = Неопределено,
												МассивИндексыСтрокТабличнойЧасти = Неопределено,
												Сотрудники = Неопределено,
												КомментироватьРасчет = Ложь, 
 												СотрудникиРасчетОтОбратного = Неопределено) Экспорт
	Перем Организация;
												
	Если НаборЗаписейРегистра.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если	НЕ (ИмяРегистра = "ИНАГРО_Начисления" Или
			ИмяРегистра = "ИНАГРО_ВзносыВФонды" Или
			ИмяРегистра = "ИНАГРО_Удержания") Тогда
		Возврат;
	КонецЕсли;
	
	// Получим максимальное число показателей			
	Если	ИмяРегистра = "ИНАГРО_Начисления" Или
		ИмяРегистра = "ИНАГРО_Удержания" Тогда
		
		ЗапросНаКоличествоПоказателей = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(НачисленияПоказатели.НомерСтроки),0) КАК КолВоПоказателей
		|ИЗ");
		Если ИмяРегистра = "ИНАГРО_Начисления" Тогда
			ЗапросНаКоличествоПоказателей.Текст = ЗапросНаКоличествоПоказателей.Текст + "
			|	ПланВидовРасчета.ИНАГРО_Начисления.Показатели КАК НачисленияПоказатели";			
		ИначеЕсли ИмяРегистра = "ИНАГРО_Удержания" Тогда 		
			ЗапросНаКоличествоПоказателей.Текст = ЗапросНаКоличествоПоказателей.Текст + "
			|	ПланВидовРасчета.ИНАГРО_Удержания.Показатели КАК НачисленияПоказатели";
		КонецЕсли;
		ВыборкаКоличестваПоказателей = ЗапросНаКоличествоПоказателей.Выполнить().Выбрать();		
		ВыборкаКоличестваПоказателей.Следующий();
		КоличествоПоказателей = ВыборкаКоличестваПоказателей.КолВоПоказателей;
		
	Иначе
		КоличествоПоказателей = 0;
		
	КонецЕсли;

	
	// Здесь предполагаем, что в наборе записей не может быть записей с разными периодами регистрации.
	ПериодРегистрации = НаборЗаписейРегистра[0].ПериодРегистрации;
	Организация = НаборЗаписейРегистра[0].Организация;
	
	Регистратор = НаборЗаписейРегистра.Отбор.Регистратор.Значение;
	ИмяПВР = Метаданные.РегистрыРасчета[ИмяРегистра].ПланВидовРасчета.Имя;
	
	// получим массив видов расчета из набора записей
	ТаблицаВидовРасчета = НаборЗаписейРегистра.Выгрузить();
	ТаблицаВидовРасчета.Свернуть("ВидРасчета");
	ВидыРасчетов = ТаблицаВидовРасчета.ВыгрузитьКолонку("ВидРасчета");
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Основной.СпособРасчета КАК СпособРасчета
	|" + ?(ИмяПВР = "ИНАГРО_ВзносыВФонды",",
	|	1 ",",
	|	КатегорияРасчета")+" КАК КатегорияРасчета
	|" + ?(ИмяПВР = "ИНАГРО_Начисления",",
	|	Основной.ПериодДействияБазовый КАК ПериодДействияБазовый,
	|	Основной.ЗачетОтработанногоВремени,
	|	Основной.ЗачетНормыВремени,
	|	Основной.УчитыватьКалендарные",",
	|	ЛОЖЬ КАК ЗачетОтработанногоВремени,
	|	ЛОЖЬ КАК ЗачетНормыВремени,
	|	ЛОЖЬ КАК УчитыватьКалендарные");
	Для СчПоказателей = 1 По КоличествоПоказателей Цикл
		ТекстЗапроса = ТекстЗапроса + ",
		|	ВЫБОР
		|		КОГДА ТЧПоказатели.НомерСтроки = "+ СчПоказателей+"
		|			ТОГДА 
		|				ВЫБОР
		|					КОГДА ТЧПоказатели.Показатель.Предопределенный
		|						ТОГДА ТЧПоказатели.Показатель
		|					ИНАЧЕ NULL
		|				КОНЕЦ				
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК Показатель" + СчПоказателей;
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ ПланВидовРасчета."+ИмяПВР+" КАК Основной
	|";
	Если КоличествоПоказателей > 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	ЛЕВОЕ СОЕДИНЕНИЕ  ПланВидовРасчета."+ИмяПВР+".Показатели КАК ТЧПоказатели
		|	ПО Основной.Ссылка = ТЧПоказатели.Ссылка
		|";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|ГДЕ Основной.Ссылка В(&парамВидыРасчетов)
	|УПОРЯДОЧИТЬ ПО
	|	" + ?(ИмяПВР = "ИНАГРО_ВзносыВФонды","1","Основной.КатегорияРасчета.Порядок")+"
	|
	|ИТОГИ 
	|	МАКСИМУМ(ЗачетОтработанногоВремени),
	|	МАКСИМУМ(ЗачетНормыВремени),
	|	МАКСИМУМ(УчитыватьКалендарные)
	|ПО КатегорияРасчета";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("парамВидыРасчетов", ВидыРасчетов);
	
	// получаем список категороий и способов расчета
	ВыборкаКатегорий = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// первая запись набора делается с пересчетом Фактического периода действия
	ТолькоЗапись = Ложь;
	
	Пока ВыборкаКатегорий.Следующий() Цикл
		
		// Получим структуру необходимых данных для расчетов текущей категории
		МассивСпособовРасчета	= Новый Массив;	// Массив способов расчета текущий категории
		МассивПоказателей		= Новый Массив;	// Массив видов показателей схем мотивации
		Календарные				= Ложь;
		НормаВремени			= Ложь;			// Признак необходимости получения нормы времени для видов расчета
		ОтработаноВремени		= Ложь;			// Признак необходимости получения отработанного времени для видов расчета
		НеобходимБазовыйПериод	= Ложь;			// Признак необходимости базового периода
		
		ВложеннаяВыборка = ВыборкаКатегорий.Выбрать();
		Пока ВложеннаяВыборка.Следующий() Цикл
			МассивСпособовРасчета.Добавить(ВложеннаяВыборка.СпособРасчета);
			
			Для Сч = 1 По КоличествоПоказателей Цикл
				Если ВложеннаяВыборка["Показатель"+Сч] <> Null Тогда
					МассивПоказателей.Добавить(ВложеннаяВыборка["Показатель"+Сч]);
				КонецЕсли;
			КонецЦикла;
			
			Если ИмяПВР = "ИНАГРО_Начисления" Тогда
				
				НормаВремени			= НормаВремени ИЛИ ВложеннаяВыборка.ЗачетНормыВремени;
				ОтработаноВремени		= ОтработаноВремени ИЛИ ВложеннаяВыборка.ЗачетОтработанногоВремени ИЛИ ВложеннаяВыборка.ЗачетНормыВремени;
				НеобходимБазовыйПериод	= НеобходимБазовыйПериод ИЛИ (НЕ ВложеннаяВыборка.ПериодДействияБазовый);
				
			КонецЕсли;
			
		КонецЦикла;
		
		НеобходимыеДанные = ПолучитьСтруктуруНеобходимыхДанных(МассивСпособовРасчета, НеобходимыеДанные, МассивПоказателей);
		НеобходимыеДанные.ОтработаноВремени	= НеобходимыеДанные.ОтработаноВремени ИЛИ ВыборкаКатегорий.ЗачетОтработанногоВремени;
		НеобходимыеДанные.НормаВремени		= НеобходимыеДанные.НормаВремени ИЛИ ВыборкаКатегорий.ЗачетНормыВремени;
		НеобходимыеДанные.Календарные		= НеобходимыеДанные.Календарные ИЛИ ВыборкаКатегорий.УчитыватьКалендарные;
		НеобходимыеДанные.КалендарныхДнейВмесяце		= НеобходимыеДанные.Календарные ИЛИ ВыборкаКатегорий.УчитыватьКалендарные;
		НеобходимыеДанные.Вставить("ВТабличнойЧастиЕстьУчетВремени", НЕ ТабличнаяЧастьДокумента.Выгрузить().Колонки.Найти("ОплаченоДнейЧасов") = Неопределено);                     
		
		Если Не НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию Тогда
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = ИмяРегистра = "ИНАГРО_Удержания" И НеобходимыеДанные.База
		КонецЕсли;
		
		Если НеобходимыеДанные.База Тогда
			НеобходимыеДанные.НормаВремениЗаМесяц	= НеобходимыеДанные.НормаВремениЗаМесяц ИЛИ НеобходимБазовыйПериод;
			НеобходимыеДанные.ОтработаноВремени		= НеобходимыеДанные.ОтработаноВремени ИЛИ НеобходимБазовыйПериод;
		КонецЕсли;
		
		Если ИмяПВР = "ИНАГРО_Начисления"  Тогда
			НеобходимыеДанные.НормаВремениЗаМесяц = Истина; // для предотвращения ложных сообщений об отсутствии графика
		КонецЕсли;
		
		// записываем набор перед расчетом каждой категории начислений
		НаборЗаписейРегистра.Записать(Истина, ТолькоЗапись);
		ТолькоЗапись = Истина;
		
		ИсходныеДанные = ПолучитьДанныеДляРасчета(ИмяРегистра, ВыборкаКатегорий.КатегорияРасчета, НеобходимыеДанные, Регистратор, Организация, ПериодРегистрации, , Сотрудники, КомментироватьРасчет);
		
		РассчитатьЗаписиНабора(ИсходныеДанные, НаборЗаписейРегистра, НеобходимыеДанные, ТабличнаяЧастьДокумента, МассивИндексыСтрокТабличнойЧасти, КомментироватьРасчет,, СотрудникиРасчетОтОбратного);
		НаборЗаписейРегистра.Записать(Истина, ТолькоЗапись);
		
		Если ИмяРегистра = "ИНАГРО_ВзносыВФонды"  Тогда
			
			ТолькоПоДвижениямТекущегоДокумента=ТипЗнч(Регистратор)=Тип("ДокументСсылка.ИНАГРО_ЗарплатаКВыплатеОрганизаций");
			Если Не ТолькоПоДвижениямТекущегоДокумента Тогда
				
				ЭтоВзносы = Ложь;
				Если ТипЗнч(ТабличнаяЧастьДокумента) = Тип(НаборЗаписейРегистра.Отбор.Регистратор.Значение.Взносы) Тогда
					ЭтоВзносы = Истина;
				КонецЕсли;
				
				ИсходныеДанныеСторно = ПолучитьДанныеДляРасчетаСторноВзносовВФонды( Регистратор, ЭтоВзносы, Сотрудники, КомментироватьРасчет);
				РассчитатьЗаписиНабораСторноВзносовВФонды(ИсходныеДанныеСторно, НаборЗаписейРегистра, ТабличнаяЧастьДокумента, МассивИндексыСтрокТабличнойЧасти, КомментироватьРасчет);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Данная процедура написана компанией ИН-АГРО.
	// 
Функция ПолучитьКоэффициентРезерваОтпусков(Организация, Период) Экспорт
	
	Учет = РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).ИспользованиеРезерваОтпусков;
	Если НЕ Учет Тогда
		// Учет не ведется, коэффициент 0
		Возврат 0;
	КонецЕсли;
	
	Срез = РегистрыСведений.КоэффициентРезерваОтпусков.СрезПоследних(Период,Новый Структура ("Организация", Организация));
	Если Срез.Количество() = 0 Тогда
		// Коэффициент не задан, по умолчанию 1
		Возврат 1;
	КонецЕсли;
	
	Возврат Срез[0].Коэффициент;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииКоторыеИспользуютсяВДокументахРасчетаСредней

// Данная процедура написана компанией ИН-АГРО.
	// 
Функция РассчитатьПремияЗаГод(пГодоваяПремияБазовыйПериодНачало, Сотрудник) Экспорт
	
	ГодоваяПремия = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГодоваяПремияБазовыйПериодНачало",пГодоваяПремияБазовыйПериодНачало);
	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
	
	мНеУчитыватьСовместителейДляСредних = Ложь;
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|  СУММА(Основной.Результат) КАК Сумма
	|
	|ИЗ РегистрРасчета.ИНАГРО_Начисления КАК Основной
	|ГДЕ НАЧАЛОПЕРИОДА(Основной.БазовыйПериодНачало, ГОД) = &ГодоваяПремияБазовыйПериодНачало
	|    И	Основной.Сотрудник = &Сотрудник
	|	// фильтр в случае если не надо учитывать внутренние совмещения: или основное назначение или замена			
	|	"+ ?(мНеУчитыватьСовместителейДляСредних,"И Основной.Назначение.ОсновноеНазначение <> Основной.Сотрудник","")+"
	|	И Основной.ВидРасчета.ВидПремии = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыПремии.ГодоваяПремия)
	|И НАЧАЛОПЕРИОДА(Основной.БазовыйПериодКОНЕЦ, ГОД) < НАЧАЛОПЕРИОДА(Основной.ПериодРегистрации, ГОД)
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ГодоваяПремия = Выборка.Сумма;
	КонецЕсли;
	Возврат ГодоваяПремия;
	
КонецФункции

// Данная процедура написана компанией ИН-АГРО.
	// 
Функция РассчитатьСреднююПорядок100(Регистратор, КомментироватьРасчет = Ложь) Экспорт 
	
	Организация = Регистратор.Организация;
	мЕстьПремии = РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).ЕстьПремии;
	мЕстьГодоваяПремия = РегистрыСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу.Получить(Новый Структура ("Организация", Организация)).ЕстьГодоваяПремия;
	
	// сам расчет ТЧ РасчетСреднего
	Запрос = Новый Запрос;     
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр( "Регистратор", Регистратор );
	Запрос.УстановитьПараметр( "парамОрганизация", Организация );
	Запрос.УстановитьПараметр( "парамСотрудник", Регистратор.Сотрудник );
	Запрос.УстановитьПараметр( "парамПериодРегистрации", Регистратор.ПериодРегистрации );
	Запрос.УстановитьПараметр( "ПериодРасчетаСреднегоНачало", Регистратор.ПериодРасчетаСреднегоНачало );
	Запрос.УстановитьПараметр( "ПериодРасчетаСреднегоКонец", Регистратор.ПериодРасчетаСреднегоКонец );
	Запрос.УстановитьПараметр( "ВидУчетаВремениДляСредней", Регистратор.ВидУчетаВремениДляСредней );
	Запрос.УстановитьПараметр( "Праздник",	Перечисления.ИНАГРО_ВидыДнейПроизводственногоКалендаря.Праздник);
	Запрос.УстановитьПараметр( "ОтпускЗаСвойСчет", ПланыВидовРасчета.ИНАГРО_Начисления.ОтпускЗаСвойСчет);
	мНеУчитыватьСовместителейДляСредних = Ложь;
	
	Если Не Регистратор.Метаданные().ТабличныеЧасти.Найти("Отпуска") = Неопределено Тогда
		Если Регистратор.Отпуска.Количество() > 0  Тогда
			ДатаНачалаСобытия = Регистратор.Отпуска[0].ДатаНачала
		Иначе	
			ДатаНачалаСобытия = Регистратор.ПериодРегистрации
		КонецЕсли	
	Иначе
		ДатаНачалаСобытия = Регистратор.ДатаНачала
	КонецЕсли;	
	Если ДатаНачалаСобытия < ИНАГРО_ПроведениеРасчетов.ДатаИзмененияПорядка100() Тогда
	
		Коэф = "
		|		(1 + РАЗНОСТЬДАТ(	ВЫБОР КОГДА Средняя.БазовыйПериодНачало > Начисления.ПериодДействияНачало ТОГДА Средняя.БазовыйПериодНачало ИНАЧЕ Начисления.ПериодДействияНачало КОНЕЦ
		|                        ,	ВЫБОР КОГДА Средняя.БазовыйПериодКонец < Начисления.ПериодДействияКонец ТОГДА Средняя.БазовыйПериодКонец ИНАЧЕ Начисления.ПериодДействияКонец КОНЕЦ
		|					, ДЕНЬ))
		|		/ (1 + РАЗНОСТЬДАТ(Начисления.ПериодДействияНачало, Начисления.ПериодДействияКонец, ДЕНЬ))";       
		КоэфПремии = "
		|		(1 + РАЗНОСТЬДАТ(	Средняя.БазовыйПериодНачало, Средняя.БазовыйПериодКонец, ДЕНЬ))
		|		/ (1 + РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(Средняя.БазовыйПериодНачало,МЕСЯЦ), КОНЕЦПЕРИОДА(Средняя.БазовыйПериодНачало,МЕСЯЦ) , ДЕНЬ))";       
		
		//	ВТПоВремени
		Если Истина Тогда
			//	Описание:
			// 		таблица с расчетами по зарплате
			//		если в строке нет авторасчета, то берм значения проставленные пользователем. 
			//      Они потом понадобятся для премии пропорционально.
			//	
			ТекстЗапросаВТ = " 
			
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СредняяБезКаледнаря.БазовыйПериодНачало,
			|	СредняяБезКаледнаря.БазовыйПериодКонец,
			|	СредняяБезКаледнаря.ОтработаноДнейБаза,
			|	СредняяБезКаледнаря.ОтработаноЧасовБаза,
			|	СредняяБезКаледнаря.НормаДнейБаза,
			|	СредняяБезКаледнаря.НормаЧасовБаза,
			|	СУММА(Календарь.КалендарныеДни) КАК КалендарныеДниБаза
			|ПОМЕСТИТЬ ВТПоВремени	
			|ИЗ
			|	(ВЫБРАТЬ
			|		Средняя.БазовыйПериодНачало КАК БазовыйПериодНачало,
			|		Средняя.БазовыйПериодКонец КАК БазовыйПериодКонец,
			|		СУММА(Средняя.ОтработаноДнейБаза) КАК ОтработаноДнейБаза,
			|		СУММА(Средняя.ОтработаноЧасовБаза) КАК ОтработаноЧасовБаза,
			|		СУММА(Средняя.НормаДнейБаза) КАК НормаДнейБаза,
			|		СУММА(Средняя.НормаЧасовБаза) КАК НормаЧасовБаза
			|	ИЗ
			|		(ВЫБРАТЬ
			|			Средняя.БазовыйПериодНачало КАК БазовыйПериодНачало,
			|			Средняя.БазовыйПериодКонец КАК БазовыйПериодКонец,
			|			СУММА(Начисления.ОтработаноДней * "+Коэф+") КАК ОтработаноДнейБаза,
			|			СУММА(Начисления.ОтработаноЧасов * "+Коэф+") КАК ОтработаноЧасовБаза,
			|			СУММА(Начисления.НормаДней * "+Коэф+") КАК НормаДнейБаза,
			|			СУММА(Начисления.НормаЧасов * "+Коэф+") КАК НормаЧасовБаза
			|		ИЗ
			|			РегистрРасчета.ИНАГРО_РасчетСреднегоЗаработка КАК Средняя
			|				ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_СреднийЗаработок.БазовыеВидыРасчета КАК БазовыеВидыРасчета
			|				ПО Средняя.ВидРасчета = БазовыеВидыРасчета.Ссылка
			|					И (Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуДляОтпуска)
			|						ИЛИ Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработку))
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления КАК Начисления
			|				ПО (Начисления.Сотрудник = &парамСотрудник)
			|					И (НАЧАЛОПЕРИОДА(Средняя.БазовыйПериодНачало, МЕСЯЦ) = Начисления.ПериодДействия)
			|					И (Начисления.ПериодРегистрации <= &парамПериодРегистрации)
			|					И (Начисления.Организация = &парамОрганизация)
			|					И (Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуДляОтпуска)
			|						ИЛИ Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработку))
			|					И (Начисления.ВидРасчета = БазовыеВидыРасчета.ВидРасчета)
			|					И (НЕ(Средняя.БазовыйПериодКонец < Начисления.ПериодДействияНачало
			|							ИЛИ Средняя.БазовыйПериодНачало > Начисления.ПериодДействияКонец))
			|		ГДЕ
			|			Средняя.Авторасчет
			|			И Средняя.Регистратор = &Регистратор
			|			И Средняя.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработку), ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуДляОтпуска))
			|		
			|		СГРУППИРОВАТЬ ПО
			|			Средняя.БазовыйПериодНачало,
			|			Средняя.БазовыйПериодКонец
			|		
			|		ОБЪЕДИНИТЬ ВСЕ
			|		
			|		ВЫБРАТЬ
			|			Средняя.БазовыйПериодНачало,
			|			Средняя.БазовыйПериодКонец,
			|			0,
			|			0,
			|			0,
			|			0
			|		ИЗ
			|			РегистрРасчета.ИНАГРО_РасчетСреднегоЗаработка КАК Средняя
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления.ДанныеГрафика(
			|						Назначение = &парамСотрудник
			|							И ПериодДействияНачало <= &ПериодРасчетаСреднегоКонец
			|							И ПериодДействияКонец >= &ПериодРасчетаСреднегоНачало
			|							И ВидРасчета.ЗачетНормыВремени
			|							И ВидРасчета.УчитыватьКалендарные
			|							И ВидРасчета В
			|								(ВЫБРАТЬ
			|									База.ВидРасчета
			|								ИЗ
			|									ПланВидовРасчета.ИНАГРО_СреднийЗаработок.БазовыеВидыРасчета КАК База
			|								ГДЕ
			|									База.Ссылка В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработку), ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуДляОтпуска)))) КАК Начисления
			|				ПО (Начисления.ПериодДействияНачало <= Средняя.БазовыйПериодКонец)
			|					И (Начисления.ПериодДействияКонец >= Средняя.БазовыйПериодНачало)
			|		ГДЕ
			|			Средняя.Авторасчет
			|			И Средняя.Регистратор = &Регистратор
			|			И Средняя.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработку), ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуДляОтпуска))
			|		
			|		СГРУППИРОВАТЬ ПО
			|			Средняя.БазовыйПериодНачало,
			|			Средняя.БазовыйПериодКонец) КАК Средняя
			|	
			|	СГРУППИРОВАТЬ ПО
			|		Средняя.БазовыйПериодНачало,
			|		Средняя.БазовыйПериодКонец
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Средняя.БазовыйПериодНачало,
			|		Средняя.БазовыйПериодКонец,
			|		Средняя.ОтработаноДней,
			|		Средняя.ОтработаноЧасов,
			|		Средняя.НормаДней,
			|		Средняя.НормаЧасов
			|	ИЗ
			|		РегистрРасчета.ИНАГРО_РасчетСреднегоЗаработка КАК Средняя
			|	ГДЕ
			|		НЕ Средняя.Авторасчет
			|		И Средняя.Регистратор = &Регистратор
			|		И Средняя.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработку), ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуДляОтпуска))) КАК СредняяБезКаледнаря
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ИНАГРО_РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря,
			|			ИНАГРО_РегламентированныйПроизводственныйКалендарь.КалендарныеДни КАК КалендарныеДни
			|		ИЗ
			|			РегистрСведений.ИНАГРО_РегламентированныйПроизводственныйКалендарь КАК ИНАГРО_РегламентированныйПроизводственныйКалендарь
			|		ГДЕ
			|			ИНАГРО_РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ПериодРасчетаСреднегоНачало И &ПериодРасчетаСреднегоКонец
			|			И ИНАГРО_РегламентированныйПроизводственныйКалендарь.ВидДня <> &Праздник
			|	ОБЪЕДИНИТЬ ВСЕ
			|	ВЫБРАТЬ
			|		ОтпускаЗаСвойСчет.ПериодДействияНачало,
			|		-1 * ОтпускаЗаСвойСчет.КалендарныеДни
			|	ИЗ
			|		РегистрРасчета.ИНАГРО_Начисления КАК ОтпускаЗаСвойСчет
			|	ГДЕ
			|		ОтпускаЗаСвойСчет.ВидРасчета = &ОтпускЗаСвойСчет
			|		И ОтпускаЗаСвойСчет.Сотрудник = &парамСотрудник
			|		И ОтпускаЗаСвойСчет.ПериодДействияНачало <= &ПериодРасчетаСреднегоКонец
			|		И ОтпускаЗаСвойСчет.ПериодДействияКонец >= &ПериодРасчетаСреднегоНачало
			|		И ОтпускаЗаСвойСчет.ПериодРегистрации <= &парамПериодРегистрации) КАК Календарь
			|		ПО СредняяБезКаледнаря.БазовыйПериодНачало <= Календарь.ДатаКалендаря
			|			И СредняяБезКаледнаря.БазовыйПериодКонец >= Календарь.ДатаКалендаря
			|
			|СГРУППИРОВАТЬ ПО
			|	СредняяБезКаледнаря.БазовыйПериодНачало,
			|	СредняяБезКаледнаря.БазовыйПериодКонец,
			|	СредняяБезКаледнаря.ОтработаноДнейБаза,
			|	СредняяБезКаледнаря.ОтработаноЧасовБаза,
			|	СредняяБезКаледнаря.НормаДнейБаза,
			|	СредняяБезКаледнаря.НормаЧасовБаза
			|";
			
			Запрос.Текст = ТекстЗапросаВТ;
			
			Запрос.Выполнить();
			ТекстЗапросаВТПоВремени = "ВТПоВремени";
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПоВремени";
		
		мНеУчитыватьСовместителейДляСредних = Ложь;
		
		ТекстЗапроса = " 
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|		Основной.НомерСтроки					КАК НомерСтроки,
		|		Основной.Авторасчет						КАК Авторасчет,
		|		Основной.ВидРасчета						КАК ВидРасчета,
		|		Основной.БазовыйПериодНачало			КАК БазовыйПериодНачало,
		|		Основной.БазовыйПериодКонец				КАК БазовыйПериодКонец,
		|		Основной.КоэффициентПовышенияОкладов	КАК КоэффициентПовышенияОкладов,
		|		ВЫБОР КОГДА Время.НормаЧасовБаза > 0 ТОГДА Время.ОтработаноЧасовБаза / Время.НормаЧасовБаза ИНАЧЕ 0 КОНЕЦ КАК Коэф,			
		|		ВЫБОР КОГДА Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК УсловиеПремия,			
		|		ВЫБОР КОГДА Время.ОтработаноЧасовБаза < Время.НормаЧасовБаза ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК УсловиеМеньшеНормы, 
		|		ВЫБОР КОГДА Время.НормаЧасовБаза > 0 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК УсловиеБольшеНуля, 
		|           
		|		ВЫБОР	КОГДА	Основной.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально),ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска))			
		|						И	&ВидУчетаВремениДляСредней  = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимДням) 
		|						И	Время.ОтработаноДнейБаза < Время.НормаДнейБаза И Время.НормаДнейБаза > 0  
		|					ТОГДА	Основной.Результат * Время.ОтработаноДнейБаза / Время.НормаДнейБаза
		|				КОГДА	Основной.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально),ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска))			
		|						И	Время.ОтработаноЧасовБаза < Время.НормаЧасовБаза И Время.НормаЧасовБаза > 0  
		|					ТОГДА	Основной.Результат * Время.ОтработаноЧасовБаза / Время.НормаЧасовБаза
		|				ИНАЧЕ		Основной.Результат КОНЕЦ    
		|												КАК Результат,
		|           
		|           
		|		ВЫБОР	КОГДА	Основной.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально),ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска))			
		|						И	&ВидУчетаВремениДляСредней  = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимДням) 
		|						И	Время.ОтработаноЧасовБаза < Время.НормаДнейБаза И Время.НормаДнейБаза > 0  
		|					ТОГДА	1
		|				КОГДА	Основной.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально),ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска))			
		|						И	Время.ОтработаноЧасовБаза < Время.НормаЧасовБаза И Время.НормаЧасовБаза > 0  
		|					ТОГДА	2
		|				ИНАЧЕ		3 КОНЕЦ    
		|												КАК Результат1,
		|		Основной.РезультатПолный				КАК РезультатПолный,
		|           
		|		ВремяДляСредней.ОтработаноДнейБаза				КАК ОтработаноДней,
		|		ВремяДляСредней.ОтработаноЧасовБаза				КАК ОтработаноЧасов,
		|		ВремяДляСредней.НормаДнейБаза					КАК НормаДней,
		|		ВремяДляСредней.НормаЧасовБаза					КАК НормаЧасов,
		|		ВремяДляСредней.КалендарныеДниБаза				КАК КалендарныеДни";
		ТекстЗапроса = ТекстЗапроса + "
	    |
		|	ИЗ (
		|	ВЫБРАТЬ 
		|		Основной1.НомерСтроки				КАК НомерСтроки,
		|		Основной1.Авторасчет				КАК Авторасчет,
		|		Основной1.ВидРасчета				КАК ВидРасчета,
		|		Основной1.БазовыйПериодНачало		КАК БазовыйПериодНачало,
		|		Основной1.БазовыйПериодКонец		КАК БазовыйПериодКонец, 
		|		Основной1.КоэффициентПовышенияОкладов		КАК КоэффициентПовышенияОкладов, 
		|		СУММА(Основной1.Результат)			КАК Результат,
		//|		СУММА(Основной1.РезультатУпр)		КАК РезультатУпр,
		|		СУММА(Основной1.РезультатПолный)	КАК РезультатПолный
		| " + ?(КомментироватьРасчет,",	
		| 		Основной1.ВидРасчетаРазрез КАК ВидРасчетаРазрез","") + "
		|		ИЗ (
		|		ВЫБРАТЬ 
		|			Средняя.НомерСтроки				КАК НомерСтроки,
		|			Средняя.Авторасчет				КАК Авторасчет,
		|			Средняя.ВидРасчета				КАК ВидРасчета,
		|			Средняя.БазовыйПериодНачало		КАК БазовыйПериодНачало,
		|			Средняя.БазовыйПериодКонец		КАК БазовыйПериодКонец, 
		|			Средняя.КоэффициентПовышенияОкладов	КАК КоэффициентПовышенияОкладов,
		|			ВЫБОР	КОГДА 	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиям)			
		|								ИЛИ	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально)   
		|								ИЛИ	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямОтпуска)   
		|								ИЛИ	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска)   
		|							ТОГДА	ВЫБОР	КОГДА Начисления.ВидРасчета.ЧислоМесяцев <= 1
		|											ТОГДА Начисления.Результат
		|											ИНАЧЕ 0 КОНЕЦ
		|						ИНАЧЕ Начисления.Результат КОНЕЦ
		|				*"+Коэф+"					КАК Результат,
		|			ВЫБОР	КОГДА 	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиям)			
		|								ИЛИ	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально)   
		|								ИЛИ	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямОтпуска)   
		|								ИЛИ	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска)   
		|							ТОГДА	ВЫБОР	КОГДА Начисления.ВидРасчета.ЧислоМесяцев <= 1
		|											ТОГДА Начисления.Результат
		|											ИНАЧЕ 0 КОНЕЦ
		|						ИНАЧЕ Начисления.Результат КОНЕЦ
		|				*"+Коэф+"					КАК РезультатПолный
		| " + ?(КомментироватьРасчет,",	
		| 		Начисления.ВидРасчета КАК ВидРасчетаРазрез","") + "
		|		ИЗ РегистрРасчета.ИНАГРО_РасчетСреднегоЗаработка КАК Средняя     
		|  	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления КАК Начисления
		|		ПО		(Начисления.Сотрудник = &парамСотрудник ИЛИ Начисления.Сотрудник.ОсновноеНазначение = &парамСотрудник) 
		|			// фильтр в случае если не надо учитывать внутренние совмещения: или основное назначение или замена			
		|			"+ ?(мНеУчитыватьСовместителейДляСредних,"И Начисления.Назначение.ОсновноеНазначение <> Начисления.Сотрудник","")+"
		|			И	Начисления.Организация = &парамОрганизация  
		|			И	Начисления.ПериодРегистрации <= &парамПериодРегистрации
		|			И	Начисления.ПериодДействияНачало <= Средняя.БазовыйПериодКонец
		|			И	Средняя.БазовыйПериодНачало <= Начисления.ПериодДействияКонец
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_СреднийЗаработок.БазовыеВидыРасчета КАК БазовыеВидыРасчета
		|		ПО		Средняя.ВидРасчета = БазовыеВидыРасчета.Ссылка  
		|			И	Начисления.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
		|  	
		|		ГДЕ		Средняя.Регистратор = &Регистратор  
		|			И	Средняя.Авторасчет И Средняя.ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии)		
		|			
		|			
		|			
		|		//-----------------------
		|		// по премиям, которые учитываются полной суммой ОТПУСК			
		|		ОБЪЕДИНИТЬ ВСЕ	
		|		ВЫБРАТЬ
		|			Средняя.НомерСтроки					КАК НомерСтроки,
		|			Средняя.Авторасчет					КАК Авторасчет,
		|			Средняя.ВидРасчета               	КАК ВидРасчета,
		|			Средняя.БазовыйПериодНачало			КАК БазовыйПериодНачало,
		|			Средняя.БазовыйПериодКонец			КАК БазовыйПериодКонец,
		|			Средняя.КоэффициентПовышенияОкладов	КАК КоэффициентПовышенияОкладов,
		|			Начисления.Результат * "+КоэфПремии+"		КАК Результат,
		|			Начисления.Результат * "+КоэфПремии+"		КАК РезультатПолный
		| " + ?(КомментироватьРасчет,",	
		| 			Начисления.ВидРасчета КАК ВидРасчетаРазрез","") + "
		|		ИЗ РегистрРасчета.ИНАГРО_РасчетСреднегоЗаработка КАК Средняя
		| 
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления КАК Начисления
		|		ПО		Средняя.Сотрудник = Начисления.Сотрудник  
		|			// фильтр в случае если не надо учитывать внутренние совмещения: или основное назначение или замена			
		|			"+ ?(мНеУчитыватьСовместителейДляСредних,"И Начисления.Назначение.ОсновноеНазначение <> Начисления.Сотрудник","")+"
		|			И	НАЧАЛОПЕРИОДА(Средняя.БазовыйПериодНачало, МЕСЯЦ) = Начисления.ПериодДействия	
		|			И	Начисления.ПериодРегистрации <= &парамПериодРегистрации
		|			И	Начисления.ВидРасчета.ЧислоМесяцев > 1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_СреднийЗаработок.БазовыеВидыРасчета КАК БазовыеВидыРасчета
		|		ПО		Средняя.ВидРасчета = БазовыеВидыРасчета.Ссылка  
		|			И	Начисления.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
		|			
		|		ГДЕ	Средняя.Авторасчет		
		|			И	Средняя.Регистратор = &Регистратор			
		|			И	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямОтпуска)			
		|			
		|		//-----------------------
		|		// по премиям, которые учитываются полной суммой СРЕДНЯЯ			
		|		ОБЪЕДИНИТЬ ВСЕ	
		|		ВЫБРАТЬ
		|			Средняя.НомерСтроки					КАК НомерСтроки,
		|			Средняя.Авторасчет					КАК Авторасчет,
		|			Средняя.ВидРасчета               	КАК ВидРасчета,
		|			Средняя.БазовыйПериодНачало			КАК БазовыйПериодНачало,
		|			Средняя.БазовыйПериодКонец			КАК БазовыйПериодКонец,
		|			Средняя.КоэффициентПовышенияОкладов	КАК КоэффициентПовышенияОкладов,
		|			Начисления.Результат/Начисления.ВидРасчета.ЧислоМесяцев *"+КоэфПремии+"		КАК Результат,
		|			Начисления.Результат/Начисления.ВидРасчета.ЧислоМесяцев *"+КоэфПремии+"		КАК РезультатПолный
		| " + ?(КомментироватьРасчет,",	
		| 			Начисления.ВидРасчета КАК ВидРасчетаРазрез","") + "
	    |		ИЗ РегистрРасчета.ИНАГРО_РасчетСреднегоЗаработка КАК Средняя
		| 
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления КАК Начисления
		|		ПО		Средняя.Сотрудник = Начисления.Сотрудник  
		|			// фильтр в случае если не надо учитывать внутренние совмещения: или основное назначение или замена			
		|			"+ ?(мНеУчитыватьСовместителейДляСредних,"И Начисления.Назначение.ОсновноеНазначение <> Начисления.Сотрудник","")+"
		|			И	Начисления.ПериодДействия МЕЖДУ &ПериодРасчетаСреднегоНачало И &ПериодРасчетаСреднегоКонец	
		|			И	Начисления.ПериодРегистрации <= &парамПериодРегистрации
		|			И	Начисления.ВидРасчета.ЧислоМесяцев > 1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_СреднийЗаработок.БазовыеВидыРасчета КАК БазовыеВидыРасчета
		|		ПО		Средняя.ВидРасчета = БазовыеВидыРасчета.Ссылка  
		|			И	Начисления.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
		|			
		|		ГДЕ	Средняя.Авторасчет		
		|			И	Средняя.Регистратор = &Регистратор			
		|			И	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиям)			
		|			
		|
		|		//-----------------------
		|		// по премиям, которые учитываются пропорционально отработанному времени ОТПУСК	
		|		ОБЪЕДИНИТЬ ВСЕ	
		|		ВЫБРАТЬ
		|			Средняя.НомерСтроки					КАК НомерСтроки,
		|			Средняя.Авторасчет					КАК Авторасчет,
		|			Средняя.ВидРасчета               	КАК ВидРасчета,
		|			Средняя.БазовыйПериодНачало			КАК БазовыйПериодНачало,
		|			Средняя.БазовыйПериодКонец			КАК БазовыйПериодКонец,
		|			Средняя.КоэффициентПовышенияОкладов	КАК КоэффициентПовышенияОкладов,
		|			Начисления.Результат/Начисления.ВидРасчета.ЧислоМесяцев * "+КоэфПремии+"		КАК Результат,
		|			Начисления.Результат/Начисления.ВидРасчета.ЧислоМесяцев * "+КоэфПремии+"		КАК РезультатПолный
		| " + ?(КомментироватьРасчет,",	
		| 			Начисления.ВидРасчета КАК ВидРасчетаРазрез","") + "
	    |		ИЗ РегистрРасчета.ИНАГРО_РасчетСреднегоЗаработка КАК Средняя
		| 
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления КАК Начисления
		|		ПО		Средняя.Сотрудник = Начисления.Сотрудник  
		|			// фильтр в случае если не надо учитывать внутренние совмещения: или основное назначение или замена			
		|			"+ ?(мНеУчитыватьСовместителейДляСредних,"И Начисления.Назначение.ОсновноеНазначение <> Начисления.Сотрудник","")+"
		|			И	НАЧАЛОПЕРИОДА(Средняя.БазовыйПериодНачало, МЕСЯЦ) = Начисления.ПериодДействия	
		|			И	Начисления.ПериодРегистрации <= &парамПериодРегистрации
		|			И	Начисления.ВидРасчета.ЧислоМесяцев > 1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_СреднийЗаработок.БазовыеВидыРасчета КАК БазовыеВидыРасчета
		|		ПО		Средняя.ВидРасчета = БазовыеВидыРасчета.Ссылка  
		|			И	Начисления.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
		|			
		|		ГДЕ		Средняя.Авторасчет		
		|			И	Средняя.Регистратор = &Регистратор			
		|			И	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска)			
		|			
		|			
		|		//-----------------------
		|		// по премиям, которые учитываются пропорционально отработанному времени СРЕДНЯЯ		
		|		ОБЪЕДИНИТЬ ВСЕ	
		|		ВЫБРАТЬ
		|			Средняя.НомерСтроки					КАК НомерСтроки,
		|			Средняя.Авторасчет					КАК Авторасчет,
		|			Средняя.ВидРасчета               	КАК ВидРасчета,
		|			Средняя.БазовыйПериодНачало			КАК БазовыйПериодНачало,
		|			Средняя.БазовыйПериодКонец			КАК БазовыйПериодКонец,
		|			Средняя.КоэффициентПовышенияОкладов	КАК КоэффициентПовышенияОкладов,
		|			Начисления.Результат/Начисления.ВидРасчета.ЧислоМесяцев *"+КоэфПремии+"		КАК Результат,
		|			Начисления.Результат/Начисления.ВидРасчета.ЧислоМесяцев *"+КоэфПремии+"		КАК РезультатПолный
		| " + ?(КомментироватьРасчет,",	
		| 			Начисления.ВидРасчета КАК ВидРасчетаРазрез","") + "
		|		ИЗ РегистрРасчета.ИНАГРО_РасчетСреднегоЗаработка КАК Средняя
		| 
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления КАК Начисления
		|		ПО		Средняя.Сотрудник = Начисления.Сотрудник  
		|			// фильтр в случае если не надо учитывать внутренние совмещения: или основное назначение или замена			
		|			"+ ?(мНеУчитыватьСовместителейДляСредних,"И Начисления.Назначение.ОсновноеНазначение <> Начисления.Сотрудник","")+"
		|			И	Начисления.ПериодДействия МЕЖДУ &ПериодРасчетаСреднегоНачало И &ПериодРасчетаСреднегоКонец	
		|			И	Начисления.ПериодРегистрации <= &парамПериодРегистрации
		|			И	Начисления.ВидРасчета.ЧислоМесяцев > 1
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_СреднийЗаработок.БазовыеВидыРасчета КАК БазовыеВидыРасчета
		|		ПО		Средняя.ВидРасчета = БазовыеВидыРасчета.Ссылка  
		|			И	Начисления.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
		|			
		|		ГДЕ		Средняя.Авторасчет		
		|			И	Средняя.Регистратор = &Регистратор			
		|			И	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально)			
		|			
		|			
		|		//-----------------------
		|		// записиси отредактированные пользователем	или годовая премия		
		|		ОБЪЕДИНИТЬ ВСЕ	
		|		ВЫБРАТЬ
		|			Средняя.НомерСтроки				КАК НомерСтроки,
		|			Средняя.Авторасчет				КАК Авторасчет,
		|			Средняя.ВидРасчета				КАК ВидРасчета,
		|			Средняя.БазовыйПериодНачало		КАК БазовыйПериодНачало,
		|			Средняя.БазовыйПериодКонец		КАК БазовыйПериодКонец,
		|			Средняя.КоэффициентПовышенияОкладов	КАК КоэффициентПовышенияОкладов,
		|			ВЫБОР	КОГДА 	НЕ Средняя.Авторасчет   
		|							ТОГДА	Средняя.Результат
		|						КОГДА 	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии) 
		|							ТОГДА (Средняя.Регистратор.ГодоваяПремия/12)*("+КоэфПремии+")
		|						ИНАЧЕ 0 КОНЕЦ
		|				КАК Результат,
		|			ВЫБОР	КОГДА 	НЕ Средняя.Авторасчет   
		|							ТОГДА	Средняя.РезультатПолный
		|						КОГДА 	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии) 
		|							ТОГДА Средняя.Регистратор.ГодоваяПремия*("+КоэфПремии+")
		|						ИНАЧЕ 0 КОНЕЦ
		|				КАК РезультатПолный
		| " + ?(КомментироватьРасчет,",	
		| 			Средняя.ВидРасчета КАК ВидРасчетаРазрез","") + "
		|		ИЗ РегистрРасчета.ИНАГРО_РасчетСреднегоЗаработка КАК Средняя
		|		ГДЕ		Средняя.Регистратор = &Регистратор			
		|			И	(НЕ Средняя.Авторасчет		
		|			ИЛИ	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии) )		
		|	) КАК Основной1		
		|	СГРУППИРОВАТЬ ПО 
		|		Основной1.НомерСтроки,
		|		Основной1.Авторасчет,
		|		Основной1.ВидРасчета,
		|		Основной1.БазовыйПериодНачало,
		|		Основной1.БазовыйПериодКонец,	 
		|		Основной1.КоэффициентПовышенияОкладов
		| " + ?(КомментироватьРасчет,",	
		| 		Основной1.ВидРасчетаРазрез","") + "
		|	) КАК Основной		
		|			
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТПоВремени КАК Время			
		|	ПО	Время.БазовыйПериодНачало = Основной.БазовыйПериодНачало		
		|			
		|	// Чтобы не писать в каждой строке условие, сделаем левое соединение по этому условию		
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТПоВремени КАК ВремяДляСредней			
		|	ПО	ВремяДляСредней.БазовыйПериодНачало = Основной.БазовыйПериодНачало		
		|		И	(Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработку)			
		|		ИЛИ	Основной.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуДляОтпуска) )			
		|			
		|УПОРЯДОЧИТЬ ПО           
		|  Основной.НомерСтроки УБЫВ         
		|";

	Иначе
		//мНеУчитыватьСовместителейДляСредних = РегистрыСведений.ПараметрыРасчетаЗарплатыОрганизаций.Получить(Новый Структура ("Организация", Организация)).НеУчитыватьСовместителейДляСредних;
		//	ВТПоВремени
		Если Истина Тогда
			//	Описание:
			// 		таблица с расчетами по зарплате
			//		если в строке нет авторасчета, то берм значения проставленные пользователем. Они потом понадобятся для премии пропорционально
			//		
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	РаботникиОрганизаций.Период КАК ДатаПриема
			|ИЗ
			|	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПервых(
			|			,
			|			Организация = &парамОрганизация
			|				И Сотрудник = &парамСотрудник) КАК РаботникиОрганизаций
			|";
			Выборка = Запрос.Выполнить().Выбрать();
			ДатаПриема = Дата(1,1,1);
			Если Выборка.Следующий() Тогда
				ДатаПриема = Выборка.ДатаПриема
			КонецЕсли;	
			Запрос.УстановитьПараметр("ДатаПриема", ДатаПриема);
			
			ТекстЗапросаВТ = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СредняяБезКаледнаря.БазовыйПериодНачало,
			|	СредняяБезКаледнаря.БазовыйПериодКонец,
			|	СредняяБезКаледнаря.ОтработаноДнейБаза,
			|	СредняяБезКаледнаря.ОтработаноЧасовБаза,
			|	СредняяБезКаледнаря.НормаДнейБаза,
			|	СредняяБезКаледнаря.НормаЧасовБаза,
			|	СУММА(Календарь.КалендарныеДни) КАК КалендарныеДниБаза
			|ПОМЕСТИТЬ ВТПоВремени	
			|ИЗ 
			|	(ВЫБРАТЬ
			|		Средняя.БазовыйПериодНачало			КАК БазовыйПериодНачало,
			|		Средняя.БазовыйПериодКонец			КАК БазовыйПериодКонец,
			|   
			|		СУММА(Средняя.ОтработаноДнейБаза)	КАК ОтработаноДнейБаза,
			|		СУММА(Средняя.ОтработаноЧасовБаза)	КАК ОтработаноЧасовБаза,
			|		СУММА(Средняя.НормаДнейБаза)		КАК НормаДнейБаза,
			|		СУММА(Средняя.НормаЧасовБаза)		КАК НормаЧасовБаза
			|   
			|	ИЗ (
			|		ВЫБРАТЬ
			|			Средняя.БазовыйПериодНачало			КАК БазовыйПериодНачало,
			|			Средняя.БазовыйПериодКонец			КАК БазовыйПериодКонец,
			|			СУММА(Начисления.ОтработаноДней)	КАК ОтработаноДнейБаза,
			|			СУММА(Начисления.ОтработаноЧасов)	КАК ОтработаноЧасовБаза,
			|			СУММА(Начисления.НормаДней)		КАК НормаДнейБаза,
			|			СУММА(Начисления.НормаЧасов)		КАК НормаЧасовБаза
			|		ИЗ РегистрРасчета.ИНАГРО_РасчетСреднегоЗаработка КАК Средняя
			|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_СреднийЗаработок.БазовыеВидыРасчета КАК БазовыеВидыРасчета
			|			ПО		Средняя.ВидРасчета = БазовыеВидыРасчета.Ссылка  
			|        		И  (Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуДляОтпуска) 
			|        		ИЛИ  Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработку)) 
			|
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления КАК Начисления  
			|			ПО		Начисления.Сотрудник = &парамСотрудник
			|				И	НАЧАЛОПЕРИОДА(Средняя.БазовыйПериодНачало,МЕСЯЦ) = Начисления.ПериодДействия
			|				И	Начисления.ПериодРегистрации <= &парамПериодРегистрации
			|				И	Начисления.Организация = &парамОрганизация
			|				"+ ?(мНеУчитыватьСовместителейДляСредних,"И Начисления.Назначение.ОсновноеНазначение <> Начисления.Сотрудник","")+"
			|				И	(Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуДляОтпуска) 
			|					ИЛИ	Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработку)) 
			|				И Начисления.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
			|				И НЕ (Средняя.БазовыйПериодКонец < Начисления.ПериодДействияНачало 
			|					ИЛИ Средняя.БазовыйПериодНачало > Начисления.ПериодДействияКонец) 
			| 		
			|		ГДЕ		Средняя.Авторасчет		
			|			И	Средняя.Регистратор = &Регистратор			
			|			И	Средняя.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработку)
			|								, ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуДляОтпуска) )			
			| 		
			| 		СГРУППИРОВАТЬ ПО
			|   		Средняя.БазовыйПериодНачало,
			|   		Средняя.БазовыйПериодКонец
			| 		
			| 		
			|   	// Данные календарным с вычетом праздников и невыходов
			|		ОбЪЕДИНИТЬ ВСЕ   
			|		ВЫБРАТЬ
			|			Средняя.БазовыйПериодНачало			КАК БазовыйПериодНачало,
			|			Средняя.БазовыйПериодКонец			КАК БазовыйПериодКонец,
			|	
			|			0	КАК ОтработаноДнейБаза,
			|			0	КАК ОтработаноЧасовБаза,
			|			0	КАК НормаДнейБаза,
			|			0	КАК НормаЧасовБаза
			|	
			|			ИЗ РегистрРасчета.ИНАГРО_РасчетСреднегоЗаработка КАК Средняя
			|
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления.ДанныеГрафика(
			|					Назначение = &парамСотрудник И ПериодДействияНачало <= &ПериодРасчетаСреднегоКонец И ПериодДействияКонец >= &ПериодРасчетаСреднегоНачало
			|					И ВидРасчета.ЗачетНормыВремени И ВидРасчета.УчитыватьКалендарные
			|					И ВидРасчета В (ВЫБРАТЬ База.ВидРасчета ИЗ ПланВидовРасчета.ИНАГРО_СреднийЗаработок.БазовыеВидыРасчета КАК База ГДЕ База.Ссылка В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработку),ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуДляОтпуска)))
			|					) КАК Начисления
			|			ПО		Начисления.ПериодДействияНачало <= Средняя.БазовыйПериодКонец  
			|				И	Начисления.ПериодДействияКонец >= Средняя.БазовыйПериодНачало  
			|
			|			ГДЕ		Средняя.Авторасчет		
			|				И	Средняя.Регистратор = &Регистратор			
			|				И	Средняя.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработку)			
			|									,ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуДляОтпуска) )			
			| 
			|			СГРУППИРОВАТЬ ПО
			|				Средняя.БазовыйПериодНачало,
			|				Средняя.БазовыйПериодКонец
			| 
			|			) КАК Средняя
			|		СГРУППИРОВАТЬ ПО
			|			Средняя.БазовыйПериодНачало,
			|			Средняя.БазовыйПериодКонец
			|   
			|			
			|		// записиси отредактированные пользователем			
			|		ОБЪЕДИНИТЬ ВСЕ			
			|		ВЫБРАТЬ
			|			Средняя.БазовыйПериодНачало			КАК БазовыйПериодНачало,
			|			Средняя.БазовыйПериодКонец			КАК БазовыйПериодКонец,
			|
			|			Средняя.ОтработаноДней				КАК ОтработаноДней,
			|			Средняя.ОтработаноЧасов				КАК ОтработаноЧасов,
			|			Средняя.НормаДней					КАК НормаДней,
			|			Средняя.НормаЧасов					КАК НормаЧасов
			|
			|	ИЗ РегистрРасчета.ИНАГРО_РасчетСреднегоЗаработка КАК Средняя
			|			
			|	ГДЕ		НЕ Средняя.Авторасчет		
			|		И	Средняя.Регистратор = &Регистратор			
			|		И	Средняя.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработку)			
			|									,ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуДляОтпуска) )	) КАК СредняяБезКаледнаря
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			ИНАГРО_РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря,
			|			ИНАГРО_РегламентированныйПроизводственныйКалендарь.КалендарныеДни КАК КалендарныеДни
			|		ИЗ
			|			РегистрСведений.ИНАГРО_РегламентированныйПроизводственныйКалендарь КАК ИНАГРО_РегламентированныйПроизводственныйКалендарь
			|		ГДЕ
			|			ИНАГРО_РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ПериодРасчетаСреднегоНачало И &ПериодРасчетаСреднегоКонец
			|			И ИНАГРО_РегламентированныйПроизводственныйКалендарь.ВидДня <> &Праздник
			|	ОБЪЕДИНИТЬ ВСЕ
			|	ВЫБРАТЬ
			|		ОтпускаЗаСвойСчет.ПериодДействияНачало,
			|		-1 * ОтпускаЗаСвойСчет.КалендарныеДни
			|	ИЗ
			|		РегистрРасчета.ИНАГРО_Начисления КАК ОтпускаЗаСвойСчет
			|	ГДЕ
			|		ОтпускаЗаСвойСчет.ВидРасчета = &ОтпускЗаСвойСчет
			|		И ОтпускаЗаСвойСчет.Сотрудник = &парамСотрудник
			|		И ОтпускаЗаСвойСчет.ПериодДействияНачало <= &ПериодРасчетаСреднегоКонец
			|		И ОтпускаЗаСвойСчет.ПериодДействияКонец >= &ПериодРасчетаСреднегоНачало
			|		И ОтпускаЗаСвойСчет.ПериодРегистрации <= &парамПериодРегистрации) КАК Календарь
			|		ПО СредняяБезКаледнаря.БазовыйПериодНачало <= Календарь.ДатаКалендаря
			|			И СредняяБезКаледнаря.БазовыйПериодКонец >= Календарь.ДатаКалендаря
			|
			|СГРУППИРОВАТЬ ПО
			|	СредняяБезКаледнаря.БазовыйПериодНачало,
			|	СредняяБезКаледнаря.БазовыйПериодКонец,
			|	СредняяБезКаледнаря.ОтработаноДнейБаза,
			|	СредняяБезКаледнаря.ОтработаноЧасовБаза,
			|	СредняяБезКаледнаря.НормаДнейБаза,
			|	СредняяБезКаледнаря.НормаЧасовБаза
			|";
			Запрос.Текст = ТекстЗапросаВТ;
			
			Запрос.Выполнить();
			ТекстЗапросаВТПоВремени = "ВТПоВремени";
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПоВремени";
		

		Если Истина Тогда
			// Запрос по начислениям кроме премий и записям, отредактированные пользователем 
			ТекстЗапросаВТ = "
			|		ВЫБРАТЬ РАЗРЕШЕННЫЕ 
			|			Средняя.НомерСтроки				КАК НомерСтроки,
			|			Средняя.Авторасчет				КАК Авторасчет,
			|			Средняя.ВидРасчета				КАК ВидРасчета,
			|			Средняя.БазовыйПериодНачало		КАК БазовыйПериодНачало,
			|			Средняя.БазовыйПериодКонец		КАК БазовыйПериодКонец, 
			|			Начисления.Результат			КАК Результат,
			|			Начисления.Результат 			КАК РезультатПолный
			| " + ?(КомментироватьРасчет,",	
			| 		Начисления.ВидРасчета КАК ВидРасчетаРазрез","") + "
			|	    ПОМЕСТИТЬ ВТНачисленияБезПремий
			|		ИЗ РегистрРасчета.ИНАГРО_РасчетСреднегоЗаработка КАК Средняя     
			|  	
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления КАК Начисления
			|		ПО		(Начисления.Сотрудник = &парамСотрудник ИЛИ Начисления.Сотрудник.ОсновноеНазначение = &парамСотрудник) 
			|			// фильтр в случае если не надо учитывать внутренние совмещения: или основное назначение или замена			
			|			"+ ?(мНеУчитыватьСовместителейДляСредних,"И Начисления.Назначение.ОсновноеНазначение <> Начисления.Сотрудник","")+"
			|			И	Начисления.Организация = &парамОрганизация  
			|			И	Начисления.ПериодРегистрации <= &парамПериодРегистрации
			|			И	Начисления.ПериодДействияНачало <= Средняя.БазовыйПериодКонец
			|			И	Средняя.БазовыйПериодНачало <= Начисления.ПериодДействияКонец
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_СреднийЗаработок.БазовыеВидыРасчета КАК БазовыеВидыРасчета
			|		ПО		Средняя.ВидРасчета = БазовыеВидыРасчета.Ссылка  
			|			И	Начисления.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
			|  	
			|		ГДЕ		Средняя.Регистратор = &Регистратор И Средняя.Авторасчет
			|				И 	Средняя.ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиям)			
			|				И	Средняя.ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально)   
			|				И	Средняя.ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямОтпуска)   
			|				И	Средняя.ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска)
			|               И   Средняя.ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии)
			|		// записи, отредактированные пользователем			
			|		ОБЪЕДИНИТЬ ВСЕ	
			|		ВЫБРАТЬ
			|			Средняя.НомерСтроки				КАК НомерСтроки,
			|			Средняя.Авторасчет				КАК Авторасчет,
			|			Средняя.ВидРасчета				КАК ВидРасчета,
			|			Средняя.БазовыйПериодНачало		КАК БазовыйПериодНачало,
			|			Средняя.БазовыйПериодКонец		КАК БазовыйПериодКонец,
			|			ВЫБОР	КОГДА 	НЕ Средняя.Авторасчет   
			|							ТОГДА	Средняя.Результат
			|						ИНАЧЕ 0 КОНЕЦ
			|				КАК Результат,
			|			ВЫБОР	КОГДА 	НЕ Средняя.Авторасчет   
			|							ТОГДА	Средняя.РезультатПолный
			|						ИНАЧЕ 0 КОНЕЦ
			|				КАК РезультатПолный
			| " + ?(КомментироватьРасчет,",	
			| 			Средняя.ВидРасчета КАК ВидРасчетаРазрез","") + "
			|		ИЗ РегистрРасчета.ИНАГРО_РасчетСреднегоЗаработка КАК Средняя
			|		ГДЕ		Средняя.Регистратор = &Регистратор			
			|			И	(НЕ Средняя.Авторасчет)		
			|
			|";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТНачисленияБезПремий";
		
		Если Истина Тогда
			// Запрос по полным суммам премий
			ТекстЗапросаВТ = "
			|		ВЫБРАТЬ РАЗРЕШЕННЫЕ 
			|			Средняя.НомерСтроки					КАК НомерСтроки,
			|			Средняя.Авторасчет					КАК Авторасчет,
			|			Средняя.ВидРасчета               	КАК ВидРасчета,
			|			Средняя.БазовыйПериодНачало			КАК БазовыйПериодНачало,
			|			Средняя.БазовыйПериодКонец			КАК БазовыйПериодКонец,
			|			СУММА(Начисления.Результат) 		КАК Результат,
			|			СУММА(Начисления.Результат) 		КАК РезультатПолный,
			|			Начисления.БазовыйПериодНачало КАК БазовыйПериодПремииНачало,
			|			Начисления.БазовыйПериодКонец КАК БазовыйПериодПремииКонец
			| " + ?(КомментироватьРасчет,",	
			| 			Начисления.ВидРасчета КАК ВидРасчетаРазрез","") + "
			|       ПОМЕСТИТЬ ВТПолныеСуммыПремий
			|		ИЗ РегистрРасчета.ИНАГРО_РасчетСреднегоЗаработка КАК Средняя
			| 
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления КАК Начисления
			|		ПО		Средняя.Сотрудник = Начисления.Сотрудник  
			|			// фильтр в случае если не надо учитывать внутренние совмещения: или основное назначение или замена			
			|			"+ ?(мНеУчитыватьСовместителейДляСредних,"И Начисления.Назначение.ОсновноеНазначение <> Начисления.Сотрудник","")+"
			|			И (Начисления.БазовыйПериодНачало <= Средняя.БазовыйПериодКонец)
			|			И (Начисления.БазовыйПериодКонец >= Средняя.БазовыйПериодНачало)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_СреднийЗаработок.БазовыеВидыРасчета КАК БазовыеВидыРасчета
			|		ПО		Средняя.ВидРасчета = БазовыеВидыРасчета.Ссылка  
			|			И	Начисления.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
			|			
			|		ГДЕ	Средняя.Авторасчет		
			|			И	Средняя.Регистратор = &Регистратор			
			|			И	(Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиям)
			|			ИЛИ Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально)
			|			ИЛИ Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска)
			|			ИЛИ Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямОтпуска)
			|			ИЛИ Средняя.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии))
			|		СГРУППИРОВАТЬ ПО
			|			Средняя.НомерСтроки,
			|			Средняя.Авторасчет,
			|			Средняя.ВидРасчета,
			|			Средняя.БазовыйПериодНачало,
			|			Средняя.БазовыйПериодКонец,
			|			Начисления.ВидРасчета.ЧислоМесяцев,
			|			Начисления.БазовыйПериодНачало,
			|			Начисления.БазовыйПериодКонец
			| " + ?(КомментироватьРасчет,",	
			| 			Начисления.ВидРасчета","") + "
			|";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТПолныеСуммыПремий";	
		
		Если Истина Тогда
			// Запрос по всем возможным базовым периодам премий
			ТекстЗапросаВТ = "
			|	ВЫБРАТЬ
			|		МИНИМУМ(Премии.БазовыйПериодПремииНачало) КАК БазовыйПериодПремииНачалоМин,
			|		МАКСИМУМ(Премии.БазовыйПериодПремииКонец) КАК БазовыйПериодПремииКонецМакс
			|	ПОМЕСТИТЬ ВТИнтервалБазовогоПериодаПремий
			|	ИЗ
			|		ВТПолныеСуммыПремий КАК Премии
			|";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТИнтервалБазовогоПериодаПремий";	
		
		Если Истина Тогда
			// Запрос по отработанным дням в базовых периодах премий
			ТекстЗапросаВТ = "
			|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|		СУММА(Начисления.ОтработаноДней) КАК ОтработаноДней,
			|		Начисления.ПериодДействия КАК ПериодДействия
			|	ПОМЕСТИТЬ ВТОтработаноДнейВБазовыхПериодахПремий
			|	ИЗ
			|		РегистрРасчета.ИНАГРО_Начисления КАК Начисления
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИнтервалБазовогоПериодаПремий КАК БазовыеПериодыПремий
			|			ПО (НАЧАЛОПЕРИОДА(Начисления.ПериодДействия, МЕСЯЦ) МЕЖДУ НАЧАЛОПЕРИОДА(БазовыеПериодыПремий.БазовыйПериодПремииНачалоМин, МЕСЯЦ) 
			|			И КОНЕЦПЕРИОДА(БазовыеПериодыПремий.БазовыйПериодПремииКонецМакс,МЕСЯЦ))
			|	ГДЕ
			|		(Начисления.Сотрудник = &парамСотрудник
			|			"+ ?(мНеУчитыватьСовместителейДляСредних,"И Начисления.Назначение.ОсновноеНазначение <> Начисления.Сотрудник","")+"
			|			И Начисления.Организация = &парамОрганизация)
			|	СГРУППИРОВАТЬ ПО
			|		Начисления.ПериодДействия,
			|		Начисления.Сотрудник
			|";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТОтработаноДнейВБазовыхПериодахПремий";	
		
		Если Истина Тогда
			// Запрос для определения учитываемой части премий
			ТекстЗапросаВТ = "
			|ВЫБРАТЬ
			|	Премии.НомерСтроки КАК НомерСтроки,
			|	Премии.Авторасчет КАК Авторасчет,
			|	Премии.ВидРасчета КАК ВидРасчета,
			|	Премии.БазовыйПериодНачало КАК БазовыйПериодНачало,
			|	Премии.БазовыйПериодКонец КАК БазовыйПериодКонец,
			|	Премии.РезультатПолный КАК РезультатПолный,
			|	Премии.Результат КАК Результат,
			|	СУММА(ВЫБОР
			|			КОГДА Премии.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработку)
			|					ИЛИ Премии.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоЗаработкуДляОтпуска)
			|				ТОГДА 0
			|			ИНАЧЕ ВТОтработаноДней.ОтработаноДней
			|		КОНЕЦ) КАК ОтработаноДней
			| " + ?(КомментироватьРасчет,",	
			| 			Премии.ВидРасчетаРазрез КАК ВидРасчетаРазрез","") + "
			|ПОМЕСТИТЬ ВТУчитываемыеПремии
			|ИЗ
			|	ВТПолныеСуммыПремий КАК Премии
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтработаноДнейВБазовыхПериодахПремий КАК ВТОтработаноДней
			|		ПО (НАЧАЛОПЕРИОДА(ВТОтработаноДней.ПериодДействия, МЕСЯЦ) МЕЖДУ НАЧАЛОПЕРИОДА(Премии.БазовыйПериодПремииНачало, МЕСЯЦ)
			|		И НАЧАЛОПЕРИОДА(Премии.БазовыйПериодПремииКонец, МЕСЯЦ))
			|
			|СГРУППИРОВАТЬ ПО
			|	Премии.НомерСтроки,
			|	Премии.Авторасчет,
			|	Премии.ВидРасчета,
			|	Премии.БазовыйПериодНачало,
			|	Премии.БазовыйПериодКонец,
			|	Премии.Результат,
			|	Премии.РезультатПолный
			| " + ?(КомментироватьРасчет,",	
			| 	Премии.ВидРасчетаРазрез","") + "";
			
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТУчитываемыеПремии";	
		
		
			
		ТекстЗапроса = " 
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|		Основной.НомерСтроки					КАК НомерСтроки,
		|		Основной.Авторасчет						КАК Авторасчет,
		|		Основной.ВидРасчета						КАК ВидРасчета,
		|		Основной.БазовыйПериодНачало			КАК БазовыйПериодНачало,
		|		Основной.БазовыйПериодКонец				КАК БазовыйПериодКонец,
		|		1										КАК КоэффициентПовышенияОкладов,
		|		ВЫБОР КОГДА Основной.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиям),ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально),
		|						ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямОтпуска), ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска), 
		|						ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии))			
		|		ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК УсловиеПремия,			
		|		ВЫБОР КОГДА Время.ОтработаноЧасовБаза < Время.НормаЧасовБаза ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК УсловиеМеньшеНормы, 
		|		ВЫБОР КОГДА Время.НормаЧасовБаза > 0 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК УсловиеБольшеНуля, 
		|       
		|		СУММА(ВЫБОР	КОГДА	Основной.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиям),ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально),
		|						ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямОтпуска), ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска), 
		|						ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии))			
		|					ТОГДА	Основной.Результат * Время.ОтработаноДнейБаза 
		|				ИНАЧЕ		Основной.Результат КОНЕЦ)   
		|												КАК Результат,
		|           
		|		СУММА(ВЫБОР	КОГДА	Основной.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально),ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска),
		|						ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиям), ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямОтпуска), ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии))			
		|					ТОГДА	1
		|				ИНАЧЕ		3 КОНЕЦ)    
		|												КАК Результат1,
		|		СУММА(Основной.РезультатПолный)				КАК РезультатПолный,
		|		ВЫБОР КОГДА Основной.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиям),ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально),
		|			ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямОтпуска), ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска), 
		|			ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии))			
		|		ТОГДА 0 ИНАЧЕ ВремяДляСредней.ОтработаноДнейБаза КОНЕЦ КАК ОтработаноДней,			
		|		ВЫБОР КОГДА Основной.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиям),ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально),
		|			ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямОтпуска), ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска), 
		|			ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии))			
		|		ТОГДА 0 ИНАЧЕ ВремяДляСредней.ОтработаноЧасовБаза КОНЕЦ КАК ОтработаноЧасов,			
		|		ВЫБОР КОГДА Основной.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиям),ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально),
		|			ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямОтпуска), ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска), 
		|			ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии))			
		|		ТОГДА 0 ИНАЧЕ ВремяДляСредней.НормаДнейБаза КОНЕЦ КАК НормаДней,			
		|		ВЫБОР КОГДА Основной.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиям),ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально),
		|			ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямОтпуска), ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска), 
		|			ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии))			
		|		ТОГДА 0 ИНАЧЕ ВремяДляСредней.НормаЧасовБаза КОНЕЦ КАК НормаЧасов,			
		|		ВЫБОР КОГДА Основной.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиям),ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально),
		|			ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямОтпуска), ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска), 
		|			ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии))			
		|		ТОГДА 0 ИНАЧЕ ВремяДляСредней.КалендарныеДниБаза КОНЕЦ КАК КалендарныеДни";
		Если КомментироватьРасчет Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			| Время.НормаЧасовБаза КАК НормаЧасовБаза,
		    | Время.ОтработаноЧасовБаза КАК  ОтработаноЧасовБаза,
			| Время.НормаДнейБаза КАК НормаДнейБаза,
	   		| Время.ОтработаноДнейБаза КАК  ОтработаноДнейБаза,
			| Основной.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
			| Основной.ОтработаноВБазовомПериодеПремии КАК ОтработаноВБазовомПериодеПремии";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|	ИЗ (
		|	ВЫБРАТЬ 
		|		Основной1.НомерСтроки				КАК НомерСтроки,
		|		Основной1.Авторасчет				КАК Авторасчет,
		|		Основной1.ВидРасчета				КАК ВидРасчета,
		|		Основной1.БазовыйПериодНачало		КАК БазовыйПериодНачало,
		|		Основной1.БазовыйПериодКонец		КАК БазовыйПериодКонец, 
		|		СУММА(Основной1.Результат)			КАК Результат,
		|		СУММА(Основной1.РезультатПолный)	КАК РезультатПолный
		| " + ?(КомментироватьРасчет,",	
		| 		Основной1.ОтработаноВБазовомПериодеПремии КАК ОтработаноВБазовомПериодеПремии","") + "
		| " + ?(КомментироватьРасчет,",	
		| 		Основной1.ВидРасчетаРазрез КАК ВидРасчетаРазрез","") + "
		|		ИЗ (
		|		ВЫБРАТЬ  
		|			НачисленияБезПремий.НомерСтроки				КАК НомерСтроки,
		|			НачисленияБезПремий.Авторасчет				КАК Авторасчет,
		|			НачисленияБезПремий.ВидРасчета				КАК ВидРасчета,
		|			НачисленияБезПремий.БазовыйПериодНачало		КАК БазовыйПериодНачало,
		|			НачисленияБезПремий.БазовыйПериодКонец		КАК БазовыйПериодКонец, 
		|			НачисленияБезПремий.Результат				КАК Результат,
		|			НачисленияБезПремий.Результат 				КАК РезультатПолный
		| 		" + ?(КомментироватьРасчет,",	
		| 			0  КАК ОтработаноВБазовомПериодеПремии","") + "                                
		| 		" + ?(КомментироватьРасчет,",	
		| 			НачисленияБезПремий.ВидРасчетаРазрез КАК ВидРасчетаРазрез","") + "
		|	    ИЗ ВТНачисленияБезПремий КАК НачисленияБезПремий
		|
		|		ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		Премии.НомерСтроки,
		|		Премии.Авторасчет,
		|		Премии.ВидРасчета,
		|		Премии.БазовыйПериодНачало,
		|		Премии.БазовыйПериодКонец,
		|		ВЫБОР КОГДА Премии.ОтработаноДней > 0
		|       	ТОГДА Премии.РезультатПолный / Премии.ОтработаноДней
		|       ИНАЧЕ 0
		|       КОНЕЦ,
		|       Премии.Результат
		| 		" + ?(КомментироватьРасчет,",	
		| 			Премии.ОтработаноДней","") + "
		| 		" + ?(КомментироватьРасчет,",	
		| 			Премии.ВидРасчетаРазрез","") + "
		|	ИЗ
		|	ВТУчитываемыеПремии КАК Премии
		|	) КАК Основной1		
		|	СГРУППИРОВАТЬ ПО 
		|		Основной1.НомерСтроки,
		|		Основной1.Авторасчет,
		|		Основной1.ВидРасчета,
		|		Основной1.БазовыйПериодНачало,
		|		Основной1.БазовыйПериодКонец	
		| " + ?(КомментироватьРасчет,",	
		| 		Основной1.ОтработаноВБазовомПериодеПремии","") + "
		| " + ?(КомментироватьРасчет,",	
		| 		Основной1.ВидРасчетаРазрез","") + "
		|	) КАК Основной		
		|			
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТПоВремени КАК Время			
		|	ПО	Время.БазовыйПериодНачало = Основной.БазовыйПериодНачало		
		|			
		|	// Чтобы не писать в каждой строке условие, сделаем левое соединение по этому условию		
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТПоВремени КАК ВремяДляСредней			
		|	ПО	ВремяДляСредней.БазовыйПериодНачало = Основной.БазовыйПериодНачало
		|   СГРУППИРОВАТЬ ПО
		|		Основной.НомерСтроки,
		|		Основной.Авторасчет,
		|		Основной.ВидРасчета,
		|		Основной.БазовыйПериодНачало,
		|		Основной.БазовыйПериодКонец,
		|		1,
		|		ВЫБОР КОГДА Основной.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиям),ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально),
		|						ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямОтпуска), ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска), 
		|						ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии))			
		|		ТОГДА 1 ИНАЧЕ 0 КОНЕЦ,			
		|		ВЫБОР КОГДА Время.ОтработаноЧасовБаза < Время.НормаЧасовБаза ТОГДА 1 ИНАЧЕ 0 КОНЕЦ, 
		|		ВЫБОР КОГДА Время.НормаЧасовБаза > 0 ТОГДА 1 ИНАЧЕ 0 КОНЕЦ, 
		|
		|           
		|		ВЫБОР	КОГДА	Основной.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально),ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска),
		|						ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиям), ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямОтпуска), ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии))			
		|					ТОГДА	1
		|				ИНАЧЕ		3 КОНЕЦ,    
		|												
		|		ВЫБОР КОГДА Основной.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиям),ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально),
		|			ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямОтпуска), ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска), 
		|			ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии))			
		|		ТОГДА 0 ИНАЧЕ ВремяДляСредней.ОтработаноДнейБаза КОНЕЦ,			
		|		ВЫБОР КОГДА Основной.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиям),ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально),
		|			ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямОтпуска), ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска), 
		|			ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии))			
		|		ТОГДА 0 ИНАЧЕ ВремяДляСредней.ОтработаноЧасовБаза КОНЕЦ,			
		|		ВЫБОР КОГДА Основной.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиям),ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально),
		|			ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямОтпуска), ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска), 
		|			ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии))			
		|		ТОГДА 0 ИНАЧЕ ВремяДляСредней.НормаДнейБаза КОНЕЦ,			
		|		ВЫБОР КОГДА Основной.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиям),ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально),
		|			ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямОтпуска), ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска), 
		|			ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии))			
		|		ТОГДА 0 ИНАЧЕ ВремяДляСредней.НормаЧасовБаза КОНЕЦ,			
		|		ВЫБОР КОГДА Основной.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиям),ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямПропорционально),
		|			ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоПремиямОтпуска), ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоФиксПремиямОтпуска), 
		|			ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_СреднийЗаработок.ПоГодовойПремии))			
		|		ТОГДА 0 ИНАЧЕ ВремяДляСредней.КалендарныеДниБаза КОНЕЦ";
		Если КомментироватьРасчет Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			| Время.НормаЧасовБаза,
		    | Время.ОтработаноЧасовБаза,
			| Время.НормаДнейБаза,
	   		| Время.ОтработаноДнейБаза,
			| Основной.ВидРасчетаРазрез,
			| Основной.ОтработаноВБазовомПериодеПремии";
		КонецЕсли;	
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО           
		|  Основной.НомерСтроки УБЫВ         
		|";

	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Получает Сумму оклада за месяц и нормы времени и календарные дни
// 		в случае необходимости оклад перерасчитывается в месячный.
//
Функция ПолучитьПараметрыОклада(мДатаНачала, Сотрудник, ПериодРасчетаСреднегоНачало= Неопределено, ПериодРасчетаСреднегоКонец = Неопределено, ДляДекретных = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамСотрудник",	Сотрудник);
	Запрос.УстановитьПараметр("парамДата",	КонецДня(мДатаНачала));
	Запрос.УстановитьПараметр("парамВалютаРегламентУчета",				Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("парамПериод",	мДатаНачала);
	Запрос.УстановитьПараметр("парамВидНачисления", Перечисления.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Индивидуальное);
	Если ПериодРасчетаСреднегоНачало= Неопределено Тогда
		АнализируемМесяцы = Ложь;
		Запрос.УстановитьПараметр("КвоМесяцев",	12);
		
	Иначе
		Начало = ПериодРасчетаСреднегоНачало;
		Конец = ПериодРасчетаСреднегоКонец;
		Если НачалоМесяца(Начало) = Начало И НачалоДня(КонецМесяца(Конец)) = Конец Тогда
			АнализируемМесяцы = Истина;
			Начало = НачалоМесяца(ПериодРасчетаСреднегоНачало);
			Конец = КонецМесяца(ПериодРасчетаСреднегоКонец);
			КвоМесяцев = (Год(Конец)-Год(Начало))*12+ Месяц(Конец)-Месяц(Начало)+1;
			Запрос.УстановитьПараметр("КвоМесяцев",	КвоМесяцев);
			Запрос.УстановитьПараметр("парамНачало",	Начало);
			Запрос.УстановитьПараметр("парамКонец",	Конец);
		ИначеЕсли Начало = Конец Тогда
			// заболел в первый день работы, анализируем график за предыдущие 6 месяцев
			АнализируемМесяцы = Истина;
			КвоМесяцев = 6;
			Конец = КонецМесяца(ДобавитьМесяц(ПериодРасчетаСреднегоКонец,-1));
			Начало = НачалоМесяца(ДобавитьМесяц(Конец, - КвоМесяцев + 1));
			Запрос.УстановитьПараметр("КвоМесяцев",	КвоМесяцев);
			Запрос.УстановитьПараметр("парамНачало",Начало);
			Запрос.УстановитьПараметр("парамКонец",	Конец);
		Иначе	
			// если не целый период (не целые месяцы) то анализируем год
			АнализируемМесяцы = Ложь;
			Запрос.УстановитьПараметр("КвоМесяцев",	12);
		КонецЕсли;
		
	КонецЕсли;
	
	//	ВТДанныеГрафика
	Если Истина Тогда
		//	Описание:
		// 		График и норма за месяц дней, часов и календарных дней.
		//		
		ТекстЗапросаВТ = "
	  	|	ВЫБРАТЬ 
	  	|		Работники.ГрафикРаботы    	КАК ГрафикРаботы,
	  	|		СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение)			КАК НормаДней,
	  	|		СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение)	КАК НормаЧасов,
	  	|		СУММА(ГрафикиРаботыПоВидамВремени.ПроизводственныйКалендарьКалендарныеДни)	КАК КалендарныеДни
		|ПОМЕСТИТЬ ВТДанныеГрафика	
	  	|	ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&парамПериод, Сотрудник = &парамСотрудник) КАК Работники 
	  	|		   
	  	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	  	|	ПО	" + ?(АнализируемМесяцы,"	ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &парамНачало И &парамКонец"
	  			,"	ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&парамПериод, ГОД) И КОНЕЦПЕРИОДА(&парамПериод, ГОД)") + "
	  	|		И	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = Работники.ГрафикРаботы
	  	|		И	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
	  	|	СГРУППИРОВАТЬ ПО 
	  	|		Работники.ГрафикРаботы
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТДанныеГрафика = "ВТДанныеГрафика";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТДанныеГрафика";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|	Начисления.ВидРасчета	КАК ВидРасчета,
	|	ВЫБОР	КОГДА Начисления.Показатель1 ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ Начисления.Показатель1
	|	КОНЕЦ
	|								КАК ОкладТариф,
	|   
	|	Графики.ГрафикРаботы		КАК ГрафикРаботы,
	|	Графики.НормаДней/&КвоМесяцев		КАК НормаДней,
	|	Графики.НормаЧасов/&КвоМесяцев		КАК НормаЧасов,
	|	Графики.КалендарныеДни/&КвоМесяцев	КАК КалендарныеДни
	|	
	|ИЗ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&парамДата, 
	|						Сотрудник = &парамСотрудник 
	|						И ВидНачисления <> &парамВидНачисления  
	|	) КАК Начисления
	| 
	|// даные графика за год 
	|ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТДанныеГрафика + " КАК Графики
	|ПО	ИСТИНА
	|
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	ПараметрыОклада = Новый Соответствие;
	ПараметрыОклада.Вставить("Оклад",		0);
	ПараметрыОклада.Вставить("НормаДней",	0);
	ПараметрыОклада.Вставить("НормаЧасов",	0);
	ПараметрыОклада.Вставить("КалендарныеДни",	0);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОкладЗаМесяц = Выборка.ОкладТариф;
		// если оклад ввиде тарифа за день или за час приведем его к сумме за месяц
		Если Выборка.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоДневнойТарифнойСтавке
			//ИЛИ Выборка.ВидРасчета.Показатели.Найти(Справочники.ИНАГРО_ПоказателиСхемМотивации.ВремяВДнях) <> Неопределено
			Тогда
			ОкладЗаМесяц = ОкладЗаМесяц*Окр(Выборка.НормаДней,2);
		ИначеЕсли Выборка.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоЧасовойТарифнойСтавке 
			//ИЛИ Выборка.ВидРасчета.Показатели.Найти(Справочники.ИНАГРО_ПоказателиСхемМотивации.ВремяВЧасах) <> Неопределено
			Тогда
			ОкладЗаМесяц = ОкладЗаМесяц*Окр(Выборка.НормаЧасов);
		КонецЕсли;
		
		ПараметрыОклада["Оклад"] = ОкладЗаМесяц;
		ПараметрыОклада["НормаДней"] = Выборка.НормаДней;
		ПараметрыОклада["НормаЧасов"] = Выборка.НормаЧасов;
		ПараметрыОклада["КалендарныеДни"] = ?(ДляДекретных, 30.44, Выборка.КалендарныеДни);
	КонецЕсли;
	
	Возврат ПараметрыОклада;
КонецФункции

#КонецОбласти

#Область ПолучениеСписковСпособовРасчета

// Данная процедура написана компанией ИН-АГРО.
	// 
Функция ПолучитьВидУчетаВремени(ВидРасчета, СуммированныйУчетРабочегоВремени, ВидУчетаВремениДляСредней = Неопределено) Экспорт
	
	// вид учета времени определяется по способу расчета
	Если	ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаЗаВечерниеЧасы Тогда
		ВидУчетаВремени = Перечисления.ИНАГРО_ВидыУчетаВремени.ПоВечернимЧасам;
		
	ИначеЕсли	ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаЗаНочныеЧасы Тогда	
		ВидУчетаВремени = Перечисления.ИНАГРО_ВидыУчетаВремени.ПоНочнымЧасам;
		
	ИначеЕсли	ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоДням
		ИЛИ ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоДневнойТарифнойСтавке Тогда	
		ВидУчетаВремени = Перечисления.ИНАГРО_ВидыУчетаВремени.ПоДням;
		
	ИначеЕсли	ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоЧасам
		ИЛИ ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоЧасовойТарифнойСтавке Тогда	
		ВидУчетаВремени = Перечисления.ИНАГРО_ВидыУчетаВремени.ПоЧасам;
		
	ИначеЕсли ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоСреднемуЗаработку 
		Или ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоСреднемуЗаработкуДляОтпуска
		Или ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоСреднемуЗаработкуДляКомпенсацииОтпуска Тогда
		
		Если ЗначениеЗаполнено(СуммированныйУчетРабочегоВремени) И СуммированныйУчетРабочегоВремени Тогда
			ВидУчетаВремени = Перечисления.ИНАГРО_ВидыУчетаВремени.ПоЧасам;
		Иначе	
			ВидУчетаВремени = Перечисления.ИНАГРО_ВидыУчетаВремени.ПоДням
		КонецЕсли; 
		
		Если ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимЧасам И (ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоСреднемуЗаработку 
		Или ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоСреднемуЗаработкуФСС) Тогда 
		
			ВидУчетаВремени = Перечисления.ИНАГРО_ВидыУчетаВремени.ПоЧасам;
		КонецЕсли;
	Иначе
		ВидУчетаВремени = Перечисления.ИНАГРО_ВидыУчетаВремени.ПоДням;
	КонецЕсли;
	
	Возврат ВидУчетаВремени;
	
КонецФункции

// Проверяет правильность заполнения реквизитов вида расчета 
// для некоторых случаев выдает сообщение об ошибке
// для некоторых - возвращает текст сообщения
// 	Параметры:
//		ВидРасчета - объект Вид расчета
//		Отказ - признак отказа (проверка не прошла)
//	Возвращаемое значение:
//		ТекстСообщения - текст сообщения о результате проверки.
Процедура ПроверитьНастройкуВидаРасчета(ВидРасчета, ВидРасчетаСсылка, Отказ, ПроверятьСоответствиеБазовыхИВедущихРасчетов = Истина) Экспорт
	
	МетаданныеВидаРасчета = ВидРасчета.Метаданные();
	
	Если НЕ ЗначениеЗаполнено(ВидРасчета.Код) Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='Необходимо задать код расчета!';uk='Необхідно задати код розрахунку!'"), Отказ);
	КонецЕсли; 
	
	// Рассчитываем на то, что данная функция вызывается для видов расчета с поддержкой базового периода.
	Если ВидРасчета.БазовыеВидыРасчета.Найти(ВидРасчетаСсылка, "ВидРасчета") <>  НеОпределено 
		И НЕ ВидРасчета.Предопределенный Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='Вид расчета не может быть включен в состав собственной расчетной базы!';uk='Вид розрахунку не може бути включений до складу власної розрахункової бази!'"), Отказ);
	КонецЕсли;
	
	Если ВидРасчета.ВедущиеВидыРасчета.Найти(ВидРасчетаСсылка, "ВидРасчета") <>  НеОпределено Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='Вид расчета не может быть включен в состав собственной таблицы ведущих видов расчета!';uk='Вид розрахунку не може бути включений до складу власної таблиці провідних видів розрахунку!'"), Отказ);
	КонецЕсли;
	
	// Если поддерживается период действия
	Если МетаданныеВидаРасчета.ИспользованиеПериодаДействия Тогда
		Если ВидРасчета.ВытесняющиеВидыРасчета.Найти(ВидРасчетаСсылка, "ВидРасчета") <>  НеОпределено Тогда
			ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='Вид расчета не может быть включен в состав собственной таблицы вытесняющих видов расчета!';uk='Вид розрахунку не може бути включений до складу власної таблиці  видів, що витісняють, розрахунку!'"), Отказ);
		КонецЕсли;
	КонецЕсли;
	ТекстСообщения = "";
		
	// Проверим соответствие списков базовых и ведущих расчетов
	Если ПроверятьСоответствиеБазовыхИВедущихРасчетов Тогда
		Для Каждого СтрокаБазовыйРасчет Из ВидРасчета.БазовыеВидыРасчета Цикл
			
			Если СтрокаБазовыйРасчет.ВидРасчета = Неопределено Тогда
				ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='В строке ';uk='У рядку '") + СтрокаБазовыйРасчет.НомерСтроки + НСтр("ru=' базовых видов расчета не указан вид расчета!';uk=' базових видів розрахунку не зазначений вид розрахунку!'"), Отказ);
				Продолжить
			КонецЕсли;
			
			Если СтрокаБазовыйРасчет.ВидРасчета.Ссылка = Неопределено Тогда
				ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='В строке ';uk='У рядку '") + СтрокаБазовыйРасчет.НомерСтроки + НСтр("ru=' базовых видов расчета не указан вид расчета!';uk=' базових видів розрахунку не зазначений вид розрахунку!'"), Отказ);
			Иначе
				
				Если ВидРасчета.ВедущиеВидыРасчета.Найти(СтрокаБазовыйРасчет.ВидРасчета,"ВидРасчета") = Неопределено Тогда
					ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='Список ведущих видов расчета отличается от списка базовых расчетов. Рекомендуется синхронизировать указанные списки!';uk='Список провідних видів розрахунку відрізняється від списку базових розрахунків. Рекомендується синхронізувати вказані списки!'"), Отказ);
					Прервать;
				КонецЕсли; 
				
			КонецЕсли;
			
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

// Данная процедура написана компанией ИН-АГРО.
	// 
Функция ЗапросСпособОтражения(Начало, ВидРасчета, Сотрудник, Организация ) Экспорт
	
	// Создать запрос и установить параметры
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамФизЛицо"			, Сотрудник.ФизическоеЛицо);
	Запрос.УстановитьПараметр("парамСотрудник"			, Сотрудник);
	Запрос.УстановитьПараметр("парамОрганизация"		, Организация);
	Запрос.УстановитьПараметр("парамНачало"				, Начало);
	Запрос.УстановитьПараметр("парамВидРасчета"			, ВидРасчета);
	
	Запрос.УстановитьПараметр("парамПустойСпособОтраженияВБухучете"        , Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамПоУмолчаниюСпособОтраженияВБухучете"        , Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию);
	
	// Основной текст запроса
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РаботникиОрганизации.ГрафикРаботы									КАК ГрафикРаботы,
	|
	|   ВЫБОР	КОГДА Начисления.СпособОтраженияВБухучете <> &парамПустойСпособОтраженияВБухучете
	|				ТОГДА Начисления.СпособОтраженияВБухучете
	|   		КОГДА СписокПлановыхНачислений.СпособОтраженияВБухучете <> &парамПустойСпособОтраженияВБухучете
	|				ТОГДА СписокПлановыхНачислений.СпособОтраженияВБухучете
	|   		КОГДА РаботникиОрганизации.СпособОтраженияВБухучете <> &парамПустойСпособОтраженияВБухучете
	|				ТОГДА РаботникиОрганизации.СпособОтраженияВБухучете
	|			ИНАЧЕ &парамПоУмолчаниюСпособОтраженияВБухучете
	|	КОНЕЦ													КАК СпособОтраженияВБухучете
	|
	|
	|	ИЗ ПланВидовРасчета.ИНАГРО_Начисления КАК Начисления
	|
	|	//-----------------------
	|	// Способ отражения из регистра сведений плановые начисления с ВР		
	|	// берем последнюю актуальную на период проводку		
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних( &парамНачало
	|		, Организация = &парамОрганизация И Сотрудник = &парамСотрудник И ВидРасчета = &парамВидРасчета) КАК СписокПлановыхНачислений
	|	ПО	ИСТИНА // все параметры заданы в условии отбора 
	|
	|	//-----------------------
	|	// Способ отражения из регистра сведений плановые начисления с пустым ВР		
	|	// берем последнюю актуальную на период проводку		
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних( &парамНачало
	|		, Организация = &парамОрганизация И Сотрудник = &парамСотрудник ) КАК РаботникиОрганизации
	|	ПО	ИСТИНА // все параметры заданы в условии отбора 
	|
	|
	|ГДЕ Начисления.Ссылка = &парамВидРасчета
	|		
	|";        
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// Процедура выполняет движение по регистру ВзаиморасчетыСРаботникамиОрганизаций  и проводки по Бухгалтерскому учету.
//
Процедура ВыполнитьДвиженияПоЗарплате(ДокументВыплаты, Движения, ПроводкиБУ="", СчетКт, ИНАГРО_СпособОплаты, ВыплаченностьЗарплаты, 
	
	СчетОрганизации = Неопределено, Сотрудник = Неопределено, Контрагент = Неопределено, ОбособленноеПодразделениеОрганизации = Неопределено ) Экспорт
	
	ЭтоДепонирование = ДокументВыплаты.Метаданные().Имя = "ИНАГРО_ЗарплатаКВыплатеОрганизаций";
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументВыплаты.Ссылка); 
	Если ДокументВыплаты.Метаданные().Имя = "ПлатежныйОрдерСписаниеДенежныхСредств" Тогда
		Запрос.УстановитьПараметр("парамВедомости",	ДокументВыплаты.ВыплатаЗаработнойПлаты.Выгрузить().ВыгрузитьКолонку("Ведомость") ); 
		ОтражатьВБухгалтерскомУчете = Истина;
		
	ИначеЕсли ДокументВыплаты.Метаданные().Имя = "ИНАГРО_ЗарплатаКВыплатеОрганизаций" Тогда
		Запрос.УстановитьПараметр("парамВедомости",	ДокументВыплаты ); 
		ОтражатьВБухгалтерскомУчете = Истина;
				
	Иначе
		Запрос.УстановитьПараметр("парамВедомости",	ДокументВыплаты.ВыплатаЗаработнойПлаты.Выгрузить().ВыгрузитьКолонку("Ведомость") ); 
		ОтражатьВБухгалтерскомУчете = Истина;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Выплачено", ВыплаченностьЗарплаты);
	Запрос.УстановитьПараметр("парамДата", ДокументВыплаты.Дата);
	Запрос.УстановитьПараметр("СпособОплаты", ИНАГРО_СпособОплаты);
	Запрос.УстановитьПараметр("парамСотрудники", Сотрудник);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	//	ВТРасшифровкаВедомостиСКопейками - по Зарплате к выплате для депонентов
	Если ДокументВыплаты.Метаданные().Имя = "ИНАГРО_ЗарплатаКВыплатеОрганизаций" Тогда
		//	Описание:
		//      осноная часть запроса, тут получим даные для проведения.
		// 
		ТекстЗапросаВТ = "
		|ВЫБРАТЬ
		|	ПараметрыОплаты.Ссылка								КАК Ведомость,
		|	ПараметрыОплаты.Ссылка.Дата							КАК Период,
		|	ПараметрыОплаты.Ссылка.Организация					КАК Организация,
		|	ПараметрыОплаты.Сотрудник							КАК Сотрудник,
		|	ПараметрыОплаты.ПериодВзаиморасчетов				КАК ПериодВзаиморасчетов,
		|	ПараметрыОплаты.СчетУчета							КАК СчетУчета,
		|	ПараметрыОплаты.Ведомость					КАК ВедомостьДепонента,
		|	NULL		КАК СтатьяДвиженияДенежныхСредств,
		|	ПараметрыОплаты.Ссылка 								КАК ДокументРегистратор, 
		|
		|	ПараметрыОплаты.Выплата				КАК СуммаВзаиморасчетов,
		|	ПараметрыОплаты.Копейки		КАК СуммаОкругления
		|        
		|ПОМЕСТИТЬ ВТРасшифровкаВедомостиСКопейками	
		|ИЗ	Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.Зарплата КАК ПараметрыОплаты
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ	Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
		|ПО	РаботникиОрганизации.Ссылка = &Ссылка
		|И	РаботникиОрганизации.Сотрудник = ПараметрыОплаты.Сотрудник       
		|И	РаботникиОрганизации.ВыплаченностьЗарплаты = &Выплачено       
		|И	РаботникиОрганизации.СпособВыплаты = &СпособОплаты       
		| " + ?(Контрагент = Неопределено, "", "И РаботникиОрганизации.Банк = &Контрагент") + "        
		|
		|ГДЕ	ПараметрыОплаты.Ссылка = &Ссылка 
		|" + ?(Сотрудник = Неопределено, "", "	И	ПараметрыОплаты.Сотрудник В (&парамСотрудники)") + "        
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТРасшифровкаВедомостиСКопейками = "ВТРасшифровкаВедомостиСКопейками";
	КонецЕсли;
	
	//	ВТРасшифровкаВедомостиСКопейками
	Если ДокументВыплаты.Метаданные().Имя = "РасходныйКассовыйОрдер" И ДокументВыплаты.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
		ИЛИ ДокументВыплаты.Метаданные().Имя <> "РасходныйКассовыйОрдер" И ДокументВыплаты.Метаданные().Имя <> "ИНАГРО_ЗарплатаКВыплатеОрганизаций" Тогда
		//	Описание:
		//      осноная часть запроса, тут получим даные для проведения.
		// 
		ТекстЗапросаВТ = "
		|ВЫБРАТЬ
		|	ПараметрыОплаты.Ссылка						КАК Ведомость,
		|	Выплаты.Ссылка.Дата							КАК Период,
		|	Выплаты.Ссылка.Организация					КАК Организация,
		|	ПараметрыОплаты.Сотрудник					КАК Сотрудник,
		|	ПараметрыОплаты.ПериодВзаиморасчетов		КАК ПериодВзаиморасчетов,
		|	ПараметрыОплаты.СчетУчета					КАК СчетУчета,
		|	ПараметрыОплаты.Ведомость					КАК ВедомостьДепонента,
		|	Выплаты.Ссылка.СтатьяДвиженияДенежныхСредств		КАК СтатьяДвиженияДенежныхСредств,
		|	Выплаты.Ссылка								КАК ДокументРегистратор,
		|
		|	ПараметрыОплаты.Выплата				КАК СуммаВзаиморасчетов,
		|	ПараметрыОплаты.Копейки		КАК СуммаОкругления
		|        
		|ПОМЕСТИТЬ ВТРасшифровкаВедомостиСКопейками	
		|ИЗ	Документ."+ ДокументВыплаты.Метаданные().Имя +".ВыплатаЗаработнойПлаты КАК Выплаты
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ	Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.Зарплата КАК ПараметрыОплаты
		|ПО Выплаты.Ведомость = ПараметрыОплаты.Ссылка
		|И	Выплаты.СчетУчета = ПараметрыОплаты.СчетУчета
		|" + ?(Сотрудник = Неопределено, "", "	И	ПараметрыОплаты.Сотрудник В (&парамСотрудники)") + "        
		|
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ	Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации
		|ПО	Выплаты.Ведомость = РаботникиОрганизации.Ссылка
		|И	РаботникиОрганизации.Сотрудник = ПараметрыОплаты.Сотрудник       
		|И	РаботникиОрганизации.ВыплаченностьЗарплаты = &Выплачено       
		|И	РаботникиОрганизации.СпособВыплаты = &СпособОплаты       
		| " + ?(Контрагент = Неопределено, "", "И РаботникиОрганизации.Банк = &Контрагент") + "        
		|
		|ГДЕ	Выплаты.Ссылка = &Ссылка 
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТРасшифровкаВедомостиСКопейками = "ВТРасшифровкаВедомостиСКопейками";
	КонецЕсли;
	
	//	ВТРасшифровкаВедомостиСКопейками для РКО по одному работнику
	Если ДокументВыплаты.Метаданные().Имя = "РасходныйКассовыйОрдер" И ДокументВыплаты.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		//	Описание:
		//      осноная часть запроса, тут получим даные для проведения.
		// 
		ТекстЗапросаВТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПараметрыОплаты.Ссылка 		КАК Ведомость,
		|	Выплаты.Ссылка.Дата 		КАК Период,
		|	Выплаты.Ссылка.Организация 	КАК Организация,
		|	ПараметрыОплаты.Сотрудник 	КАК Сотрудник,
		|	ПараметрыОплаты.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
		|	ПараметрыОплаты.СчетУчета 	КАК СчетУчета,
		|	ПараметрыОплаты.Ведомость	КАК ВедомостьДепонента,
		|	Выплаты.Ссылка.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	Выплаты.Ссылка 				КАК ДокументРегистратор,
		|	ПараметрыОплаты.Выплата 	КАК СуммаВзаиморасчетов,
		|	ПараметрыОплаты.Копейки		КАК СуммаОкругления
		|ПОМЕСТИТЬ ВТРасшифровкаВедомостиСКопейками
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК Выплаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.Зарплата КАК ПараметрыОплаты
		|		ПО Выплаты.Ссылка.ПлатежнаяВедомость = ПараметрыОплаты.Ссылка
		|			И (ПараметрыОплаты.Сотрудник В (&парамСотрудники))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК РаботникиОрганизации1
		|		ПО Выплаты.Ссылка.ПлатежнаяВедомость = РаботникиОрганизации1.Ссылка
		|			И (РаботникиОрганизации1.Сотрудник = ПараметрыОплаты.Сотрудник)
		|			И (РаботникиОрганизации1.ВыплаченностьЗарплаты = &Выплачено)
		|			И (РаботникиОрганизации1.СпособВыплаты = &СпособОплаты)
		|ГДЕ
		|	Выплаты.Ссылка = &Ссылка";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТРасшифровкаВедомостиСКопейками = "ВТРасшифровкаВедомостиСКопейками";
		Запрос.Текст = ТекстЗапросаВТ;
	КонецЕсли;
	
	
	// По регистру ВзаиморасчетыСРаботникамиОрганизаций
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Выплаты.Период КАК Период,
	               |	Выплаты.Организация КАК Организация,
	               |	Выплаты.Ведомость КАК Ведомость,
	               |	Выплаты.Сотрудник КАК Сотрудник,
	               |	Выплаты.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	Выплаты.ПериодВзаиморасчетов КАК ПериодВзаиморасчетов,
	               |	Выплаты.СчетУчета КАК СчетУчета,
	               |	Выплаты.ВедомостьДепонента КАК ВедомостьДепонента,
	               |	Выплаты.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	               |	Выплаты.ДокументРегистратор КАК ДокументРегистратор,
	               |	РанееВыплаченныеСуммы.Регистратор КАК РегистраторРанееВыплаченные,
	               |	Выплаты.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	               |	Выплаты.СуммаОкругления КАК СуммаОкругления
	               |ИЗ
	               |	ВТРасшифровкаВедомостиСКопейками КАК Выплаты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
	               |		ПО Выплаты.Ведомость = РанееВыплаченныеСуммы.Ведомость
	               |			И Выплаты.Сотрудник = РанееВыплаченныеСуммы.Сотрудник
	               |			И Выплаты.СчетУчета = РанееВыплаченныеСуммы.СчетУчета
	               |ИТОГИ
	               |	МАКСИМУМ(Период),
	               |	МАКСИМУМ(ПериодВзаиморасчетов),
	               |	СУММА(СуммаВзаиморасчетов),
	               |	СУММА(СуммаОкругления)
	               |ПО
	               |	Организация,
	               |	Сотрудник,
	               |	Ведомость";
	
	
	
	Запрос.Текст = ТекстЗапроса;
	
	НаборЗаписей = Движения.ВзаиморасчетыССотрудниками;
	НаборЗаписейСведенияОВыплатах = Движения.ИНАГРО_СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям;
	СчетУчетаДепонентов = ПланыСчетов.Хозрасчетный.РасчетыПоДепонентам;
	
	
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Организация");
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаСотрудник = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Сотрудник");
		Пока ВыборкаСотрудник.Следующий() Цикл
			
			ВыборкаВедомость = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ведомость");
			Пока ВыборкаВедомость.Следующий() Цикл
				
				Если ЭтоДепонирование Тогда
					
					// Нужны все движения по взаиморасчетам
					// + надо  задепонировать сумму. 
					ДобавитьСтрокуВзаиморасчетыСДепонентамиОрганизаций(ВыборкаВедомость, ДокументВыплаты.Дата, ВидДвиженияНакопления.Приход, Движения.ВзаиморасчетыСДепонентами);
					
				КонецЕсли;
				
				
				// теперь движения по каждому счету
				Выборка = ВыборкаВедомость.Выбрать(ОбходРезультатаЗапроса.Прямой);
				СтрокаПоРаботнику = 1;

				
				Пока Выборка.Следующий() Цикл
					Если Выборка.РегистраторРанееВыплаченные <> NULL И Выборка.РегистраторРанееВыплаченные <> ДокументВыплаты Тогда
						// выплата по ФизЛицу и по ведомости уже производилась
						Если ДокументВыплаты.Метаданные().Имя = "РасходныйКассовыйОрдер" И ДокументВыплаты.ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
							Продолжить
						КонецЕсли;	
					КонецЕсли;
					ЭтоВыплатаДепонента = ?( Выборка.Ведомость.ВидВыплаты = Справочники.ВидыВыплат.Депоненты, Истина, Ложь);
					
					Если ПроводкиБУ <> "" И НЕ ЭтоВыплатаДепонента Тогда
						ДобавитьСтрокуВыполнитьПроводкуВыплатыЗарплаты(Выборка, ПроводкиБУ, Выборка.СчетУчета, СчетКт, ДокументВыплаты.Дата, СчетОрганизации, ОбособленноеПодразделениеОрганизации); 
					КонецЕсли;
					
					Если (Выборка.РегистраторРанееВыплаченные <> NULL И Выборка.РегистраторРанееВыплаченные <> ДокументВыплаты) Тогда
						// выплата по ФизЛицу и по ведомости уже производилась
					ИначеЕсли СтрокаПоРаботнику = 1 Тогда	
						// зарегистрируем факт выплаты по работнику и по ведомости
						ДобавитьСтрокуСведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям(Выборка, НаборЗаписейСведенияОВыплатах);
					КонецЕсли;
					
					
					Если ЭтоВыплатаДепонента Тогда
						
						Если ПроводкиБУ <> "" Тогда
							ДобавитьСтрокуВыполнитьПроводкуВыплатыЗарплаты(Выборка, ПроводкиБУ, СчетУчетаДепонентов, СчетКт, ДокументВыплаты.Дата, СчетОрганизации, ОбособленноеПодразделениеОрганизации); 
						КонецЕсли;	
						ДобавитьСтрокуВзаиморасчетыСДепонентамиОрганизаций(Выборка, ДокументВыплаты.Дата, ВидДвиженияНакопления.Расход, Движения.ВзаиморасчетыСДепонентами);
						
					Иначе
						ДобавитьСтрокуВзаиморасчетыСРаботникамиОрганизаций( Выборка, НаборЗаписей, ИНАГРО_СпособОплаты );
					КонецЕсли;	
					СтрокаПоРаботнику = СтрокаПоРаботнику + 1;

					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры

// Выполняются необходимые действия
//
Функция ГрафикиИНормыПоСотрудникам(Организация, СотрудникиИНазначения, ПериодРегистрации) Экспорт
		
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СотрудникиИНазначения", СотрудникиИНазначения);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("парамПериодРегистрации" , ПериодРегистрации);
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СотрудникиИНазначения.Сотрудник КАК Сотрудник,
	               |	СотрудникиИНазначения.Назначение КАК Назначение
	               |ПОМЕСТИТЬ ВТСотрудникиИНазначения
	               |ИЗ
	               |	&СотрудникиИНазначения КАК СотрудникиИНазначения
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Сотрудник,
	               |	Назначение";
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	СотрудникиИНазначения.Сотрудник КАК Сотрудник,
	               |	СотрудникиИНазначения.Назначение КАК Назначение,
	               |	ДанныеКалендаря.ГрафикРаботы,
	               |	ДанныеКалендаря.НормаДнейЗаМесяц,
	               |	ДанныеКалендаря.НормаЧасовЗаМесяц,
	               |	РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник1,
	               |	РаботникиОрганизацийСрезПоследних.ГрафикРаботы КАК ГрафикРаботы1
	               |ИЗ
	               |	ВТСотрудникиИНазначения КАК СотрудникиИНазначения
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(
	               |				НАЧАЛОПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ),
	               |				Сотрудник В
	               |					(ВЫБРАТЬ
	               |						СотрудникиИНазначения.Назначение
	               |					ИЗ
	               |						ВТСотрудникиИНазначения КАК СотрудникиИНазначения)) КАК РаботникиОрганизацийСрезПоследних
	               |		ПО СотрудникиИНазначения.Назначение = РаботникиОрганизацийСрезПоследних.Сотрудник
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы,
	               |			СУММА(ВЫБОР
	               |					КОГДА ГрафикиРаботы.ГрафикРаботы.УчетНормыВремениПоОтдельномуГрафику
	               |						ТОГДА ИНАГРО_ГрафикиРаботыПоВидамВремени.ОсновноеЗначение
	               |					ИНАЧЕ ГрафикиРаботы.ОсновноеЗначение
	               |				КОНЕЦ) КАК НормаДнейЗаМесяц,
	               |			СУММА(ВЫБОР
	               |					КОГДА ГрафикиРаботы.ГрафикРаботы.УчетНормыВремениПоОтдельномуГрафику
	               |						ТОГДА ИНАГРО_ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение
	               |					ИНАЧЕ ГрафикиРаботы.ДополнительноеЗначение
	               |				КОНЕЦ) КАК НормаЧасовЗаМесяц
	               |		ИЗ
	               |			РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	               |				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК ИНАГРО_ГрафикиРаботыПоВидамВремени
	               |				ПО ГрафикиРаботы.ГрафикРаботы.ГрафикРаботыНормыВремени = ИНАГРО_ГрафикиРаботыПоВидамВремени.ГрафикРаботы
	               |					И ГрафикиРаботы.ВидУчетаВремени = ИНАГРО_ГрафикиРаботыПоВидамВремени.ВидУчетаВремени
	               |					И ГрафикиРаботы.Дата = ИНАГРО_ГрафикиРаботыПоВидамВремени.Дата
	               |		ГДЕ
	               |			НАЧАЛОПЕРИОДА(ГрафикиРаботы.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&парамПериодРегистрации, МЕСЯЦ)
	               |			И ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			ГрафикиРаботы.ГрафикРаботы) КАК ДанныеКалендаря
	               |		ПО (ДанныеКалендаря.ГрафикРаботы = ВЫБОР
	               |				КОГДА РаботникиОрганизацийСрезПоследних.ГрафикРаботы.УчетНормыВремениПоОтдельномуГрафику
	               |					ТОГДА РаботникиОрганизацийСрезПоследних.ГрафикРаботы.ГрафикРаботыНормыВремени
	               |				ИНАЧЕ РаботникиОрганизацийСрезПоследних.ГрафикРаботы
	               |			КОНЕЦ)";
				   
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Выполняются необходимые действия
//
Функция НалогиПоГруппеВзносов(ГруппаОтбора = Неопределено, ДатаОтбора = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Если ГруппаОтбора <> Неопределено Тогда
		ГруппаВзносов = ГруппаОтбора;
	Иначе
		ГруппаВзносов = Справочники.ИНАГРО_ГруппыВзносовВФонды.ОсновнойСостав;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаОтбора) Тогда
		Запрос.УстановитьПараметр("Дата", ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	Иначе	
		Запрос.УстановитьПараметр("Дата", ДатаОтбора);
	КонецЕсли;
	Запрос.УстановитьПараметр("парамГруппа", ГруппаВзносов);
	
		
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Взносы.Налог КАК Налог,
	               |	ВидыРасчетовВзносов.ВидРасчета.СпособРасчета КАК СпособРасчета,
	               |	ВидыРасчетовВзносов.Налог КАК Налог1,
	               |	ВидыРасчетовВзносов.ВидРасчета
	               |ИЗ
	               |	РегистрСведений.ИНАГРО_ВзносыВФондыПоГруппам.СрезПоследних(&Дата, ) КАК Взносы
	               |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ВидыРасчетовВзносовВФонды.СрезПоследних(&Дата, ) КАК ВидыРасчетовВзносов
	               |		ПО Взносы.Налог = ВидыРасчетовВзносов.Налог
	               |ГДЕ
	               |	Взносы.ГруппаВзносов = &парамГруппа
	               |	И Взносы.Действует";
	
	Запрос.Текст = ТекстЗапроса;

	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Выполняются необходимые действия
//
Процедура СформироватьКраткийСоставСотрудников(Объект, ИмяТаблицы) Экспорт
	
	ТЗВрем = Объект[ИмяТаблицы].Выгрузить();
	ТЗВрем.Свернуть("Сотрудник");
	
	Объект.КраткийСоставДокумента = "";
	Для Каждого Чел Из ТЗВрем Цикл
		ТекущееФИО = ПолучитьКраткоеФИО(Чел.Сотрудник.ФизическоеЛицо,Объект.Дата);
		Объект.КраткийСоставДокумента = Объект.КраткийСоставДокумента + ?(Объект.КраткийСоставДокумента = "", "", "; ") + ТекущееФИО;
	КонецЦикла;
	
КонецПроцедуры

// Получает норму времени для всех сотрудников данного подразделения
// в заданном промежутке времени.
// Параметры:
//		1. ДатаНачала - начало периода, за который нужны данные;
//		2. ДатаОкончания - конец периода, за который нужны данные;
// 		3. Организация - организация, по которой нужны данные;
// 		4. ПодразделениеОрганизации - подразделение, по которому нужны данные;
//		5. МасСотрудников - сотрудник или массив сотрудников, по которым нужны данные.
// Возвращаемое значение:
//		Таблица значений с содержимыми данными по нормам времени для данных сотрудников.
//
Процедура ПолучитьНормуВремени(СписокСотрудников, СтруктураСтроки) Экспорт 
	
	ЗапросПоНормеВремени = Новый Запрос;
	
	ЗапросПоНормеВремени.УстановитьПараметр("Организация",СтруктураСтроки.Организация);
	ЗапросПоНормеВремени.УстановитьПараметр("ДатаНачала",НачалоДня(СтруктураСтроки.ДатаДокумента));
	ЗапросПоНормеВремени.УстановитьПараметр("ДатаОкончания",КонецДня(СтруктураСтроки.ДатаПо)+1);
	ЗапросПоНормеВремени.УстановитьПараметр("ДатаОкончанияГрафик",КонецДня(СтруктураСтроки.ДатаПо));
	ЗапросПоНормеВремени.УстановитьПараметр("МасСотрудников",СписокСотрудников);
	
	ЗапросПоНормеВремени.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                            |	РаботникиОрганизацийПринятые.Сотрудник,
	                            |	ВЫБОР
	                            |		КОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.УчетНормыВремениПоОтдельномуГрафику
	                            |			ТОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.ГрафикРаботыНормыВремени
	                            |		ИНАЧЕ РаботникиОрганизацийПринятые.ГрафикРаботы
	                            |	КОНЕЦ КАК ГрафикРаботыСотрудника,
	                            |	РаботникиОрганизацийПринятые.ПодразделениеОрганизации,
	                            |	СУММА(ЕСТЬNULL(НормаВремени.ОсновноеЗначение, 0)) КАК ОсновноеЗначение,
	                            |	СУММА(ЕСТЬNULL(НормаВремени.ДополнительноеЗначение, 0)) КАК ДополнительноеЗначение,
	                            |	СУММА(ЕСТЬNULL(НормаВремени.ПроизводственныйКалендарьКалендарныеДни, 0)) КАК КалендарныеДни,
	                            |	ВЫБОР
	                            |		КОГДА РаботникиОрганизацийПринятые.Регистратор ССЫЛКА Документ.ИНАГРО_ПриемНаРаботуВОрганизацию
	                            |			ТОГДА ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема
	                            |		ИНАЧЕ ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала
	                            |	КОНЕЦ КАК ДатаПриема,
	                            |	РаботникиОрганизацийПринятые.Регистратор КАК Регистратор,
	                            |	ВЫБОР
	                            |		КОГДА РаботникиОрганизацийПринятые.Регистратор ССЫЛКА Документ.ИНАГРО_КадровоеПеремещениеОрганизаций
	                            |			ТОГДА ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала
	                            |		ИНАЧЕ NULL
	                            |	КОНЕЦ КАК ДатаПеремещения
	                            |ПОМЕСТИТЬ Перемещения
	                            |ИЗ
	                            |	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(
	                            |			&ДатаОкончания,
	                            |			Организация = &Организация
	                            |				И ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	                            |				И НЕ сотрудник В
	                            |						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                            |							РаботникиОрганизацийСрезПоследних.Сотрудник
	                            |						ИЗ
	                            |							РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаОкончания, Организация = &Организация
	                            |								И ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиОрганизацийСрезПоследних)) КАК РаботникиОрганизацийПринятые
	                            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК НормаВремени
	                            |		ПО (ВЫБОР
	                            |				КОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.УчетНормыВремениПоОтдельномуГрафику
	                            |					ТОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.ГрафикРаботыНормыВремени
	                            |				ИНАЧЕ РаботникиОрганизацийПринятые.ГрафикРаботы
	                            |			КОНЕЦ = НормаВремени.ГрафикРаботы)
	                            |			И (НормаВремени.Дата >= &ДатаНачала)
	                            |			И (НормаВремени.Дата <= &ДатаОкончанияГрафик)
	                            |			И (НормаВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням))
	                            |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации
	                            |		ПО РаботникиОрганизацийПринятые.Регистратор = ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка
	                            |			И РаботникиОрганизацийПринятые.Сотрудник = ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник
	                            |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации
	                            |		ПО РаботникиОрганизацийПринятые.Регистратор = ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка
	                            |			И РаботникиОрганизацийПринятые.Сотрудник = ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.Сотрудник
	                            |
	                            |СГРУППИРОВАТЬ ПО
	                            |	РаботникиОрганизацийПринятые.Сотрудник,
	                            |	РаботникиОрганизацийПринятые.ПодразделениеОрганизации,
	                            |	ВЫБОР
	                            |		КОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.УчетНормыВремениПоОтдельномуГрафику
	                            |			ТОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.ГрафикРаботыНормыВремени
	                            |		ИНАЧЕ РаботникиОрганизацийПринятые.ГрафикРаботы
	                            |	КОНЕЦ,
	                            |	ВЫБОР
	                            |		КОГДА РаботникиОрганизацийПринятые.Регистратор ССЫЛКА Документ.ИНАГРО_ПриемНаРаботуВОрганизацию
	                            |			ТОГДА ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема
	                            |		ИНАЧЕ ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала
	                            |	КОНЕЦ,
	                            |	РаботникиОрганизацийПринятые.Регистратор,
	                            |	ВЫБОР
	                            |		КОГДА РаботникиОрганизацийПринятые.Регистратор ССЫЛКА Документ.ИНАГРО_КадровоеПеремещениеОрганизаций
	                            |			ТОГДА ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала
	                            |		ИНАЧЕ NULL
	                            |	КОНЕЦ
	                            |;
	                            |
	                            |////////////////////////////////////////////////////////////////////////////////
	                            |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                            |	РаботникиОрганизацийПринятые.Сотрудник,
	                            |	ВЫБОР
	                            |		КОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.УчетНормыВремениПоОтдельномуГрафику
	                            |			ТОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.ГрафикРаботыНормыВремени
	                            |		ИНАЧЕ РаботникиОрганизацийПринятые.ГрафикРаботы
	                            |	КОНЕЦ КАК ГрафикРаботыСотрудника,
	                            |	РаботникиОрганизацийПринятые.ПодразделениеОрганизации,
	                            |	СУММА(ЕСТЬNULL(НормаВремени.ОсновноеЗначение, 0)) КАК ОсновноеЗначение,
	                            |	СУММА(ЕСТЬNULL(НормаВремени.ДополнительноеЗначение, 0)) КАК ДополнительноеЗначение,
	                            |	СУММА(ЕСТЬNULL(НормаВремени.ПроизводственныйКалендарьКалендарныеДни, 0)) КАК КалендарныеДни,
	                            |	ВЫБОР
	                            |		КОГДА РаботникиОрганизацийПринятые.Регистратор ССЫЛКА Документ.ИНАГРО_ПриемНаРаботуВОрганизацию
	                            |			ТОГДА ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема
	                            |		ИНАЧЕ ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала
	                            |	КОНЕЦ КАК ДатаПриема,
	                            |	РаботникиОрганизацийПринятые.Регистратор КАК Регистратор,
	                            |	ВЫБОР
	                            |		КОГДА РаботникиОрганизацийПринятые.Регистратор ССЫЛКА Документ.ИНАГРО_КадровоеПеремещениеОрганизаций
	                            |			ТОГДА ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.ПодразделениеОрганизации
	                            |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	                            |	КОНЕЦ КАК НовоеПодразделение
	                            |ПОМЕСТИТЬ Прием
	                            |ИЗ
	                            |	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(
	                            |			&ДатаОкончания,
	                            |			Организация = &Организация
	                            |				И ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	                            |				И сотрудник В (&МасСотрудников)
	                            |				И НЕ сотрудник В
	                            |						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                            |							РаботникиОрганизацийСрезПоследних.Сотрудник
	                            |						ИЗ
	                            |							РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаОкончания, Организация = &Организация
	                            |								И ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиОрганизацийСрезПоследних)) КАК РаботникиОрганизацийПринятые
	                            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК НормаВремени
	                            |		ПО (ВЫБОР
	                            |				КОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.УчетНормыВремениПоОтдельномуГрафику
	                            |					ТОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.ГрафикРаботыНормыВремени
	                            |				ИНАЧЕ РаботникиОрганизацийПринятые.ГрафикРаботы
	                            |			КОНЕЦ = НормаВремени.ГрафикРаботы)
	                            |			И (НормаВремени.Дата >= &ДатаНачала)
	                            |			И (НормаВремени.Дата <= &ДатаОкончанияГрафик)
	                            |			И (НормаВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням))
	                            |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации
	                            |		ПО РаботникиОрганизацийПринятые.Регистратор = ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка
	                            |			И РаботникиОрганизацийПринятые.Сотрудник = ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник
	                            |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации
	                            |		ПО РаботникиОрганизацийПринятые.Регистратор = ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка
	                            |			И РаботникиОрганизацийПринятые.Сотрудник = ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.Сотрудник
	                            |
	                            |СГРУППИРОВАТЬ ПО
	                            |	РаботникиОрганизацийПринятые.Сотрудник,
	                            |	РаботникиОрганизацийПринятые.ПодразделениеОрганизации,
	                            |	ВЫБОР
	                            |		КОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.УчетНормыВремениПоОтдельномуГрафику
	                            |			ТОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.ГрафикРаботыНормыВремени
	                            |		ИНАЧЕ РаботникиОрганизацийПринятые.ГрафикРаботы
	                            |	КОНЕЦ,
	                            |	ВЫБОР
	                            |		КОГДА РаботникиОрганизацийПринятые.Регистратор ССЫЛКА Документ.ИНАГРО_ПриемНаРаботуВОрганизацию
	                            |			ТОГДА ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема
	                            |		ИНАЧЕ ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала
	                            |	КОНЕЦ,
	                            |	РаботникиОрганизацийПринятые.Регистратор,
	                            |	ВЫБОР
	                            |		КОГДА РаботникиОрганизацийПринятые.Регистратор ССЫЛКА Документ.ИНАГРО_КадровоеПеремещениеОрганизаций
	                            |			ТОГДА ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.ПодразделениеОрганизации
	                            |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	                            |	КОНЕЦ
	                            |
	                            |ОБЪЕДИНИТЬ ВСЕ
	                            |
	                            |ВЫБРАТЬ
	                            |	РаботникиОрганизацийПринятые.Сотрудник,
	                            |	ВЫБОР
	                            |		КОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.УчетНормыВремениПоОтдельномуГрафику
	                            |			ТОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.ГрафикРаботыНормыВремени
	                            |		ИНАЧЕ РаботникиОрганизацийПринятые.ГрафикРаботы
	                            |	КОНЕЦ,
	                            |	РаботникиОрганизацийПринятые.ПодразделениеОрганизации,
	                            |	СУММА(ЕСТЬNULL(НормаВремени.ОсновноеЗначение, 0)),
	                            |	СУММА(ЕСТЬNULL(НормаВремени.ДополнительноеЗначение, 0)),
	                            |	СУММА(ЕСТЬNULL(НормаВремени.ПроизводственныйКалендарьКалендарныеДни, 0)),
	                            |	ВЫБОР
	                            |		КОГДА РаботникиОрганизацийПринятые.Регистратор ССЫЛКА Документ.ИНАГРО_ПриемНаРаботуВОрганизацию
	                            |			ТОГДА ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема
	                            |		ИНАЧЕ ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала
	                            |	КОНЕЦ,
	                            |	РаботникиОрганизацийПринятые.Регистратор,
	                            |	ВЫБОР
	                            |		КОГДА РаботникиОрганизацийПринятые.Регистратор ССЫЛКА Документ.ИНАГРО_КадровоеПеремещениеОрганизаций
	                            |			ТОГДА ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.ПодразделениеОрганизации
	                            |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	                            |	КОНЕЦ
	                            |ИЗ
	                            |	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(
	                            |			&ДатаНачала,
	                            |			Организация = &Организация
	                            |				И ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	                            |				И НЕ сотрудник В
	                            |						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                            |							РаботникиОрганизацийСрезПоследних.Сотрудник
	                            |						ИЗ
	                            |							РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаНачала, Организация = &Организация
	                            |								И ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиОрганизацийСрезПоследних)) КАК РаботникиОрганизацийПринятые
	                            |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК НормаВремени
	                            |		ПО (ВЫБОР
	                            |				КОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.УчетНормыВремениПоОтдельномуГрафику
	                            |					ТОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.ГрафикРаботыНормыВремени
	                            |				ИНАЧЕ РаботникиОрганизацийПринятые.ГрафикРаботы
	                            |			КОНЕЦ = НормаВремени.ГрафикРаботы)
	                            |			И (НормаВремени.Дата >= &ДатаНачала)
	                            |			И (НормаВремени.Дата <= &ДатаОкончанияГрафик)
	                            |			И (НормаВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням))
	                            |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации
	                            |		ПО РаботникиОрганизацийПринятые.Регистратор = ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка
	                            |			И РаботникиОрганизацийПринятые.Сотрудник = ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник
	                            |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации
	                            |		ПО РаботникиОрганизацийПринятые.Регистратор = ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка
	                            |			И РаботникиОрганизацийПринятые.Сотрудник = ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.Сотрудник
	                            |
	                            |СГРУППИРОВАТЬ ПО
	                            |	РаботникиОрганизацийПринятые.Сотрудник,
	                            |	РаботникиОрганизацийПринятые.ПодразделениеОрганизации,
	                            |	ВЫБОР
	                            |		КОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.УчетНормыВремениПоОтдельномуГрафику
	                            |			ТОГДА РаботникиОрганизацийПринятые.ГрафикРаботы.ГрафикРаботыНормыВремени
	                            |		ИНАЧЕ РаботникиОрганизацийПринятые.ГрафикРаботы
	                            |	КОНЕЦ,
	                            |	ВЫБОР
	                            |		КОГДА РаботникиОрганизацийПринятые.Регистратор ССЫЛКА Документ.ИНАГРО_ПриемНаРаботуВОрганизацию
	                            |			ТОГДА ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема
	                            |		ИНАЧЕ ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала
	                            |	КОНЕЦ,
	                            |	РаботникиОрганизацийПринятые.Регистратор,
	                            |	ВЫБОР
	                            |		КОГДА РаботникиОрганизацийПринятые.Регистратор ССЫЛКА Документ.ИНАГРО_КадровоеПеремещениеОрганизаций
	                            |			ТОГДА ИНАГРО_КадровоеПеремещениеОрганизацийРаботникиОрганизации.ПодразделениеОрганизации
	                            |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	                            |	КОНЕЦ
	                            |;
	                            |
	                            |////////////////////////////////////////////////////////////////////////////////
	                            |ВЫБРАТЬ
	                            |	РаботникиОрганизацийСрезПоследних.Регистратор КАК РегистраторУвольнения,
	                            |	РаботникиОрганизацийСрезПоследних.Сотрудник,
	                            |	ИНАГРО_УвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения
	                            |ПОМЕСТИТЬ Увольнение
	                            |ИЗ
	                            |	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(
	                            |			&ДатаОкончания,
	                            |			Организация = &Организация
	                            |				И ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиОрганизацийСрезПоследних
	                            |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИНАГРО_УвольнениеИзОрганизаций.РаботникиОрганизации КАК ИНАГРО_УвольнениеИзОрганизацийРаботникиОрганизации
	                            |		ПО РаботникиОрганизацийСрезПоследних.Сотрудник = ИНАГРО_УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник
	                            |;
	                            |
	                            |////////////////////////////////////////////////////////////////////////////////
	                            |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                            |	Прием.Сотрудник,
	                            |	Прием.ГрафикРаботыСотрудника,
	                            |	Прием.ПодразделениеОрганизации,
	                            |	Прием.ОсновноеЗначение КАК ОтработаноДней,
	                            |	Прием.ДополнительноеЗначение КАК ОтработаноЧасов,
	                            |	Прием.КалендарныеДни,
	                            |	Прием.ДатаПриема,
	                            |	Прием.Регистратор,
	                            |	Прием.НовоеПодразделение,
	                            |	ЕСТЬNULL(Увольнение.ДатаУвольнения, НЕОПРЕДЕЛЕНО) КАК ДатаУвольнения,
	                            |	Перемещения.ДатаПеремещения,
	                            |	ДанныеКалендаря.НормаДнейЗаМесяц,
	                            |	ДанныеКалендаря.НормаЧасовЗаМесяц
	                            |ИЗ
	                            |	Прием КАК Прием
	                            |		ЛЕВОЕ СОЕДИНЕНИЕ Перемещения КАК Перемещения
	                            |		ПО Прием.Сотрудник = Перемещения.Сотрудник
	                            |		ЛЕВОЕ СОЕДИНЕНИЕ Увольнение КАК Увольнение
	                            |		ПО Прием.Сотрудник = Увольнение.Сотрудник
	                            |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                            |			ГрафикиРаботы.ГрафикРаботы КАК ГрафикРаботы,
	                            |			СУММА(ГрафикиРаботы.ОсновноеЗначение) КАК НормаДнейЗаМесяц,
	                            |			СУММА(ГрафикиРаботы.ДополнительноеЗначение) КАК НормаЧасовЗаМесяц
	                            |		ИЗ
	                            |			РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
	                            |		ГДЕ
	                            |			НАЧАЛОПЕРИОДА(ГрафикиРаботы.Дата, МЕСЯЦ) = &ДатаНачала
	                            |			И ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
	                            |		
	                            |		СГРУППИРОВАТЬ ПО
	                            |			ГрафикиРаботы.ГрафикРаботы) КАК ДанныеКалендаря
	                            |		ПО (ВЫБОР
	                            |				КОГДА Прием.ГрафикРаботыСотрудника.УчетНормыВремениПоОтдельномуГрафику
	                            |					ТОГДА ДанныеКалендаря.ГрафикРаботы = Прием.ГрафикРаботыСотрудника.ГрафикРаботыНормыВремени
	                            |				ИНАЧЕ ДанныеКалендаря.ГрафикРаботы = Прием.ГрафикРаботыСотрудника
	                            |			КОНЕЦ)
	                            |ГДЕ
	                            |	Прием.Сотрудник В(&МасСотрудников)";

	Выборка = ЗапросПоНормеВремени.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
				
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыИФункцииДляЕСВ

// Процедура определяет Код категории застрахованного лица
//
Процедура ОпределитьКодКатегорииЗЛ(СтрокаТЧ, Регистратор)
	
	Если Регистратор.ПериодРегистрации < Дата(2011,12,1) Тогда
		СхемаКатегорий = 1;
	ИначеЕсли Регистратор.ПериодРегистрации < Дата(2016,6,1) Тогда	
	    СхемаКатегорий = 2;
	Иначе 
	    СхемаКатегорий = 3;	
	КонецЕсли;
	
	Если СхемаКатегорий = 3 Тогда
		
		// Новая схема
		
		Если СтрокаТЧ.Налог = Справочники.Налоги.ЕСВФОТРаботники 
		 Или СтрокаТЧ.Налог = Справочники.Налоги.ЕСВФОТБюджетники Тогда
			// Наймані працівники на загальних підставах
			// в т.ч. бюджетники.
			СтрокаТЧ.КодКатегорииЗЛ = 1;
		ИначеЕсли СтрокаТЧ.Налог = Справочники.Налоги.ЕСВФОТИнвалиды Тогда
			// Працюючий інвалід
			СтрокаТЧ.КодКатегорииЗЛ = 2;
		ИначеЕсли СтрокаТЧ.Налог = Справочники.Налоги.ЕСВФОТЛетчики Тогда
			// Особа льотного складу
			СтрокаТЧ.КодКатегорииЗЛ = 3;
		ИначеЕсли СтрокаТЧ.Налог = Справочники.Налоги.ЕСВФОТРаботникиЗаПределами Тогда
			// Громадянин України, який працює за її межами
			СтрокаТЧ.КодКатегорииЗЛ = 10;
		ИначеЕсли СтрокаТЧ.Налог = Справочники.Налоги.ЕСВФОТРаботникиИностранные Тогда
			// Назва: працівник іноземних організацій в Україні
			СтрокаТЧ.КодКатегорииЗЛ = 11;	
		ИначеЕсли СтрокаТЧ.Налог = Справочники.Налоги.ЕСВФОТРаботникиСР Тогда
			// Наймані працівники, які працюють на посадах, робота на яких зараховується до стажу, 
			// що дає право на одержання пенсії відповідно до окремих законів України.
			СтрокаТЧ.КодКатегорииЗЛ = 25;	
		ИначеЕсли СтрокаТЧ.Налог = Справочники.Налоги.ЕСВФОТГПХ Тогда
			// Особи, які працюють за угодами ЦПХ
			СтрокаТЧ.КодКатегорииЗЛ = 26;
		ИначеЕсли СтрокаТЧ.Налог = Справочники.Налоги.ЕСВФОТРаботникиУТОГУТОС Тогда
			// Особи, які працюють на підприємствах та в організаціях всеукраїнських громадських організацій інвалідів,
			// зокрема товариствах УТОГ та УТОС.
			СтрокаТЧ.КодКатегорииЗЛ = 27;
		ИначеЕсли СтрокаТЧ.Налог = Справочники.Налоги.ЕСВФОТИнвалиды50 Тогда	
			// Працюючий інвалід на підприємстві або в організації громадських організацій інвалідів, 
			// в яких кількість інвалідів становить понад 50 %. 
			СтрокаТЧ.КодКатегорииЗЛ = 28;
		ИначеЕсли СтрокаТЧ.Налог = Справочники.Налоги.ЕСВФОТБольничные Тогда		
			// Особи, які отримують допомогу по тимчасовій непрацездатності
			СтрокаТЧ.КодКатегорииЗЛ = 29;
		ИначеЕсли СтрокаТЧ.Налог = Справочники.Налоги.ЕСВФОТИнвалидыУТОГУТОС Тогда		
			// Найманий працівник-інвалід, який працює на підприємствах та в організаціях всеукраїнських громадських
			// організацій інвалідів, зокрема товариствах УТОГ та УТОС.
			СтрокаТЧ.КодКатегорииЗЛ = 30;
		ИначеЕсли СтрокаТЧ.Налог = Справочники.Налоги.ЕСВФОТИнвалидыСР Тогда		
			// Працюючі інваліди, які працюють на посадах, робота на яких зараховується до стажу, 
			// що дає право на одержання пенсії відповідно до окремих законів України.
			СтрокаТЧ.КодКатегорииЗЛ = 32;	
		ИначеЕсли СтрокаТЧ.Налог = Справочники.Налоги.ЕСВФОТБольничныеИнвалиды Тогда		
			// Больничные для инвалидов
			СтрокаТЧ.КодКатегорииЗЛ = 36;			
		ИначеЕсли СтрокаТЧ.Налог = Справочники.Налоги.ЕСВФОТБольничныеУТОГ Тогда		
			// Больничные в организациях УТОГ, УТОС
			СтрокаТЧ.КодКатегорииЗЛ = 37;
        ИначеЕсли СтрокаТЧ.Налог = Справочники.Налоги.ЕСВФОТГПХУТОГ Тогда		
			// ГПХ в УТОГ и УТОС
			СтрокаТЧ.КодКатегорииЗЛ = 38;
		ИначеЕсли СтрокаТЧ.Налог = Справочники.Налоги.ЕСВФОТБольничныеИнвалиды50 Тогда		
			// Больничные для инвалида в организации с 50% инвалидов
			СтрокаТЧ.КодКатегорииЗЛ = 39;
		ИначеЕсли СтрокаТЧ.Налог = Справочники.Налоги.ЕСВФОТДекретные Тогда		
			// Дсоби, які отримують допомогу у зв'язку з вагітністю та пологами
			СтрокаТЧ.КодКатегорииЗЛ = 42;	
		ИначеЕсли СтрокаТЧ.Налог = Справочники.Налоги.ЕСВФОТДекретныеИнвалиды Тогда		
			// Декретные для инвалида
			СтрокаТЧ.КодКатегорииЗЛ = 43;
		ИначеЕсли СтрокаТЧ.Налог = Справочники.Налоги.ЕСВФОТДекретныеУТОГ Тогда		
			// Декретные в организациях УТОГ, УТОС
			СтрокаТЧ.КодКатегорииЗЛ = 44;
		ИначеЕсли СтрокаТЧ.Налог = Справочники.Налоги.ЕСВФОТДекретныеИнвалиды50 Тогда		
			// Декретные для инвалида в организации с 50% инвалидов
			СтрокаТЧ.КодКатегорииЗЛ = 45;
		ИначеЕсли СтрокаТЧ.Налог = Справочники.Налоги.ЕСВФОТРаботникиФЛ Тогда		
			// Особа, яка працює у фізичної особи
			СтрокаТЧ.КодКатегорииЗЛ = 46;	
		ИначеЕсли СтрокаТЧ.Налог = Справочники.Налоги.ЕСВФОТМобил Тогда		
			// Працівник, призваний на строкову військову службу
			СтрокаТЧ.КодКатегорииЗЛ = 47;
		ИначеЕсли СтрокаТЧ.Налог = Справочники.Налоги.ЕСВФОТМобилКомп Тогда		
			// Виплати, що компенсуються з бюджету в межах середнього заробітку працівників, призваних на військову службу.
			СтрокаТЧ.КодКатегорииЗЛ = 48;
		КонецЕсли;	
		
	Иначе	
	
		// Определим случаи, когда код не нужен
		Если СтрокаТЧ.ВидРасчета.СпособРасчета <> Перечисления.СпособыРасчетаНачислений.Взносы Тогда
			Возврат;
		КонецЕсли;
		Если НЕ СтрокаТЧ.ВидРасчета.ЕСВ Тогда
			Возврат;
		КонецЕсли;	
		
		Налоги = РегистрыСведений.ИНАГРО_ВзносыВФондыРаботниковОрганизаций.СрезПоследних(СтрокаТЧ.ДатаНачала,Новый Структура("Сотрудник",СтрокаТЧ.Сотрудник));
		
		Если СтрокаТЧ.ВидРасчета = ПланыВидовРасчета.ИНАГРО_ВзносыВФонды.ЕСВГПХ Тогда
			// Особи, які працюють за угодами ЦПХ 
			Налог = Налоги.Найти(Справочники.Налоги.ЕСВФОТРаботникиУТОГУТОС,"Налог"); 
			Если  Налог <> Неопределено И Налог.Действует И СхемаКатегорий = 2 Тогда
				// ГПХ в УТОГ и УТОС
				СтрокаТЧ.КодКатегорииЗЛ = 38;
			Иначе	
				СтрокаТЧ.КодКатегорииЗЛ = 26;
			КонецЕсли;	
			Возврат;
		КонецЕсли;
		
		Если СтрокаТЧ.ВидРасчета = ПланыВидовРасчета.ИНАГРО_ВзносыВФонды.ЕСВБольничные Тогда
			// Бсоби, які отримують допомогу по тимчасовій непрацездатності
			Налог = Налоги.Найти(Справочники.Налоги.ЕСВФОТИнвалиды,"Налог");
			Если Налог <> Неопределено И Налог.Действует И СхемаКатегорий = 2 Тогда
				// Больничные для инвалида
				СтрокаТЧ.КодКатегорииЗЛ = 36;
				Возврат;
			КонецЕсли;	
			Налог = Налоги.Найти(Справочники.Налоги.ЕСВФОТИнвалиды50,"Налог");
			Если Налог <> Неопределено И Налог.Действует И СхемаКатегорий = 2 Тогда
				// Больничные для инвалида в организации с 50% инвалидов
				СтрокаТЧ.КодКатегорииЗЛ = 39;
				Возврат;
			КонецЕсли;	
			Налог = Налоги.Найти(Справочники.Налоги.ЕСВФОТРаботникиУТОГУТОС,"Налог");
			Если Налог <> Неопределено И Налог.Действует И СхемаКатегорий = 2 Тогда
				// Больничные в организациях УТОГ, УТОС
				СтрокаТЧ.КодКатегорииЗЛ = 37;
				Возврат;
			КонецЕсли;
			// Все прочие больничные
			СтрокаТЧ.КодКатегорииЗЛ = 29;
			Возврат;
		КонецЕсли;
		
		Если СтрокаТЧ.ВидРасчета = ПланыВидовРасчета.ИНАГРО_ВзносыВФонды.ЕСВДекретные Тогда
			// Особи, які перебувають у відпустці у зв'язку з вагітністю та пологами
			Налог = Налоги.Найти(Справочники.Налоги.ЕСВФОТИнвалиды,"Налог");
			Если Налог <> Неопределено И Налог.Действует И СхемаКатегорий = 2 Тогда
				// Декретные для инвалида
				СтрокаТЧ.КодКатегорииЗЛ = 43;
				Возврат;
			КонецЕсли;	
			Налог = Налоги.Найти(Справочники.Налоги.ЕСВФОТИнвалиды50,"Налог");
			Если Налог <> Неопределено И Налог.Действует И СхемаКатегорий = 2 Тогда
				// Декретные для инвалида в организации с 50% инвалидов
				СтрокаТЧ.КодКатегорииЗЛ = 45;
				Возврат;
			КонецЕсли;	
			Налог = Налоги.Найти(Справочники.Налоги.ЕСВФОТРаботникиУТОГУТОС,"Налог");
			Если Налог <> Неопределено И Налог.Действует И СхемаКатегорий = 2 Тогда
				// Декретные в организациях УТОГ, УТОС
				СтрокаТЧ.КодКатегорииЗЛ = 44;
				Возврат;
			КонецЕсли;
			// Все прочие декретные
			СтрокаТЧ.КодКатегорииЗЛ = 42;
			Возврат;
		КонецЕсли;
		
		Если СтрокаТЧ.ВидРасчета = ПланыВидовРасчета.ИНАГРО_ВзносыВФонды.ЕСВМобилизованные Тогда
			Налог = Налоги.Найти(Справочники.Налоги.ЕСВМобилизованные,"Налог");
			Если Налог <> Неопределено Тогда
				СтрокаТЧ.КодКатегорииЗЛ = 48;
				Возврат;
			КонецЕсли;	
		КонецЕсли;
		
		Налог = Налоги.Найти(Справочники.Налоги.ЕСВФОТИнвалиды,"Налог");
		Если Налог <> Неопределено И Налог.Действует Тогда
			Налог = Налоги.Найти(Справочники.Налоги.ЕСВРаботникиСР,"Налог");
			Если  Налог <> Неопределено И Налог.Действует Тогда
				// Працюючі інваліди, які працюють на посадах, робота на яких зараховується до стажу,
				// що дає право на одержання пенсії відповідно до окремих законів України.
				СтрокаТЧ.КодКатегорииЗЛ = 32;
			Иначе	
				// Працюючий інвалід (категорія платника: 1 та 2) 
				СтрокаТЧ.КодКатегорииЗЛ = 2;
			КонецЕсли;	
	        Возврат;
		КонецЕсли;
		
		Налог = Налоги.Найти(Справочники.Налоги.ЕСВФОТРаботники,"Налог");
		Если  Налог <> Неопределено И Налог.Действует Тогда
			Налог = Налоги.Найти(Справочники.Налоги.ЕСВРаботникиСР,"Налог");
			Если  Налог <> Неопределено И Налог.Действует Тогда
				// Наймані працівники, які працюють на посадах, робота на яких зараховується до стажу,
				// що дає право на одержання пенсії відповідно до окремих законів України.
				СтрокаТЧ.КодКатегорииЗЛ = 25;
		        Возврат;
			Иначе
				// Наймані працівники на загальних підставах
				СтрокаТЧ.КодКатегорииЗЛ = 1;
		        Возврат;
			КонецЕсли;	
		КонецЕсли;
		Налог = Налоги.Найти(Справочники.Налоги.ЕСВФОТБюджетники,"Налог");
		Если  Налог <> Неопределено И Налог.Действует Тогда
			Налог = Налоги.Найти(Справочники.Налоги.ЕСВРаботникиСР,"Налог");
			Если  Налог <> Неопределено И Налог.Действует Тогда
				// Наймані працівники, які працюють на посадах, робота на яких зараховується до стажу,
				// що дає право на одержання пенсії відповідно до окремих законів України.
				СтрокаТЧ.КодКатегорииЗЛ = 25;
		        Возврат;
			Иначе
				// Наймані працівники на загальних підставах
				СтрокаТЧ.КодКатегорииЗЛ = 1;
		        Возврат;
			КонецЕсли;	
		КонецЕсли;
		Налог = Налоги.Найти(Справочники.Налоги.ЕСВФОТСудостр,"Налог");
		Если  Налог <> Неопределено И Налог.Действует Тогда
			Налог = Налоги.Найти(Справочники.Налоги.ЕСВРаботникиСР,"Налог");
			Если  Налог <> Неопределено И Налог.Действует Тогда
				// Наймані працівники, які працюють на посадах, робота на яких зараховується до стажу,
				// що дає право на одержання пенсії відповідно до окремих законів України.
				СтрокаТЧ.КодКатегорииЗЛ = 25;
		        Возврат;
			Иначе
				// Наймані працівники на загальних підставах
				СтрокаТЧ.КодКатегорииЗЛ = 1;
		        Возврат;
			КонецЕсли;	
		КонецЕсли;
		
		Налог = Налоги.Найти(Справочники.Налоги.ЕСВФОТЛетчики,"Налог");
		Если  Налог <> Неопределено И Налог.Действует Тогда
			// Особа льотного складу
			СтрокаТЧ.КодКатегорииЗЛ = 3;
	        Возврат;
		КонецЕсли;
		Налог = Налоги.Найти(Справочники.Налоги.ЕСВФОТИнвалиды50,"Налог");
		
		Если  Налог <> Неопределено И Налог.Действует Тогда
			// Працюючий інвалід на підприємстві або в організації громадських організацій інвалідів,
			// в яких кількість інвалідів становить понад 50 %. 
			СтрокаТЧ.КодКатегорииЗЛ = 28;
	        Возврат;
		КонецЕсли;
		Налог = Налоги.Найти(Справочники.Налоги.ЕСВФОТРаботникиУТОГУТОС,"Налог"); 
		
		Если  Налог <> Неопределено И Налог.Действует Тогда
			Налог = Налоги.Найти(Справочники.Налоги.ЕСВИнвалидыУТОГУТОС,"Налог"); 
			Если  Налог <> Неопределено И Налог.Действует Тогда
				// Найманий працівник-інвалід, який працює на підприємствах та в організаціях всеукраїнських громадських
				// організацій інвалідів, зокрема товариствах УТОГ та УТОС.
				СтрокаТЧ.КодКатегорииЗЛ = 30;
		        Возврат;
			Иначе
				// Особи, які працюють на підприємствах та в організаціях всеукраїнських громадських організацій інвалідів,
				// зокрема товариствах УТОГ та УТОС.
				СтрокаТЧ.КодКатегорииЗЛ = 27;
		        Возврат;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры	
	
// Процедура определяет тип начисления
//
Процедура ОпределитьТипНачисления(СтрокаТЧ, Регистратор)
	
	// Определим случаи, когда код не нужен
	Если НЕ СтрокаТЧ.ВидРасчета.ЕСВ Тогда
		Возврат;
	КонецЕсли;	
	Если (СтрокаТЧ.ВидРасчета = ПланыВидовРасчета.ИНАГРО_ВзносыВФонды.ЕСВГПХ ИЛИ
		СтрокаТЧ.ВидРасчета = ПланыВидовРасчета.ИНАГРО_ВзносыВФонды.ЕСВФОТГПХ)И
		СтрокаТЧ.БазовыйПериодНачало < Регистратор.ПериодРегистрации Тогда
		СтрокаТЧ.ТипНачисления = 1;
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры	

// Функция возвращает список начислений входящих в базу взноса ЕСВ с оплаты по договорам ГПХ.
//
Функция СписокГПХПоЕСВ() Экспорт
	
	Запрос = Новый Запрос();
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВзносыВФондыБазовыеВидыРасчета.Ссылка,
	               |	ВзносыВФондыБазовыеВидыРасчета.ВидРасчета
	               |ИЗ
	               |	ПланВидовРасчета.ИНАГРО_ВзносыВФонды.БазовыеВидыРасчета КАК ВзносыВФондыБазовыеВидыРасчета
				   |ГДЕ
				   |  ВзносыВФондыБазовыеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_ВзносыВФонды.ЕСВГПХ)
				   |";
				   
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета");
	
КонецФункции

// Функция возвращает список начислений входящих в базу взноса ЕСВ с оплаты отпуска по беременности и родам.
//
Функция СписокДекретныеПоЕСВ() Экспорт
	
	Запрос = Новый Запрос();
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ВзносыВФондыБазовыеВидыРасчета.Ссылка,
	               |	ВзносыВФондыБазовыеВидыРасчета.ВидРасчета
	               |ИЗ
	               |	ПланВидовРасчета.ИНАГРО_ВзносыВФонды.БазовыеВидыРасчета КАК ВзносыВФондыБазовыеВидыРасчета
				   |ГДЕ
				   |  ВзносыВФондыБазовыеВидыРасчета.Ссылка = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_ВзносыВФонды.ЕСВДекретные)
				   |";
				   
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета");
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляАвтозаполнения

// Производит расчет записей набора записей регистра расчета
// параметры:
//  ИсходныеДанные - результат запроса к исходным данным
//  НаборЗаписейРегистра - набор записей
//  ЗаписиДоходыНДФЛ - набор записей регистра доходов НДФЛ
//  ГоловнаяОрганизация - ссылка на организацию
//  ОбособленноеПодразделение - ссылка на обособленное подразделение
//	ТабличнаяЧастьДокумента - табличная часть документа, заполняется по результатам расчета.
//
// возвращаемое значение:
//	нет
//
Процедура РассчитатьЗаписиНабора(ИсходныеДанные,
									НаборЗаписейРегистра,
									НеобходимыеДанные,
									ТабличнаяЧастьДокумента,
									МассивИндексыСтрокТабличнойЧасти = Неопределено,
									КомментироватьРасчет = Ложь, ФормаКомментариев = НеОпределено,
									СотрудникиРасчетОтОбратного = Неопределено)
	
	СтруктураПоиска = Новый Структура("НомерСтроки");
	
	// признаки расчета набора записей определенного регистра
	УправленческиеРасчеты = Ложь;
	УправленческиеНачисления = Ложь;
	РегламентированныеУдержания = Ложь;
	РегламентированныеНачисления = Ложь;
	ВзносыВФонды = Ложь;
	Взносы = Ложь;
	ВзносыФОТ = Ложь;
	Если ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.ИНАГРО_Начисления") Тогда
		ОсновныеНачисленияОрганизаций = Истина;
		РегламентированныеНачисления = Истина;
	ИначеЕсли ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.ИНАГРО_Удержания") Тогда
		РегламентированныеУдержания = Истина;
	ИначеЕсли ТипЗнч(НаборЗаписейРегистра) = Тип("РегистрРасчетаНаборЗаписей.ИНАГРО_ВзносыВФонды") Тогда
		ВзносыВФонды = Истина;
		Если ТипЗнч(ТабличнаяЧастьДокумента) = Тип(НаборЗаписейРегистра.Отбор.Регистратор.Значение.Взносы) Тогда
			Взносы = Истина;
		Иначе
			ВзносыФОТ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПоказательРазмер = "Показатель1";
	
	
	// Соответствие для хранения графика с ошибками
	ГрафикиБезРабочегоВремени = Новый ТаблицаЗначений;
	ГрафикиБезРабочегоВремени.Колонки.Добавить("ГрафикРаботы");
	ГрафикиБезРабочегоВремени.Колонки.Добавить("ВидУчетаВремени");
	
	Пока ИсходныеДанные.Следующий() Цикл
		
		// нужно анализировать только записи, которые есть в списке Исходные данные
		СтрокаДвижений = НаборЗаписейРегистра[ИсходныеДанные.НомерСтроки - 1];
		
		// Позиционирование на строке ТЧ
		СтрокаТабличнойЧасти = Неопределено;
		Если ТабличнаяЧастьДокумента <> Неопределено Тогда
			
			Если ВзносыВФонды Тогда
				Если	Взносы 
					И	СтрокаДвижений.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.Взносы
					ИЛИ 
					ВзносыФОТ 
					И	СтрокаДвижений.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ВзносыФОТ Тогда
					СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Получить(СтрокаДвижений.НомерСтрокиТЧ-1);
				Иначе
					Продолжить;
				КонецЕсли;
				
			ИначеЕсли МассивИндексыСтрокТабличнойЧасти = Неопределено Тогда
				
				// Расчет всего документа
				СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Получить(НаборЗаписейРегистра.Индекс(СтрокаДвижений));
				
			Иначе
				
				// Расчет по сотруднику
				СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Получить(МассивИндексыСтрокТабличнойЧасти.Получить(НаборЗаписейРегистра.Индекс(СтрокаДвижений)));
			КонецЕсли;
			
		КонецЕсли;
		
		РассчитатьЗаписьРегистраРасчета(СтрокаДвижений, ИсходныеДанные, НеобходимыеДанные, УправленческиеРасчеты, РегламентированныеНачисления, РегламентированныеУдержания, ОсновныеНачисленияОрганизаций, ВзносыВФонды, КомментироватьРасчет, ФормаКомментариев, ГрафикиБезРабочегоВремени);

		Если СтрокаДвижений.Авторасчет Тогда
			
			Если СтрокаТабличнойЧасти <> Неопределено Тогда
				СтрокаТабличнойЧасти.Результат = СтрокаДвижений.Результат;
				Попытка
					Если НеобходимыеДанные.ВТабличнойЧастиЕстьУчетВремени И ОсновныеНачисленияОрганизаций И СтрокаДвижений.Авторасчет Тогда
						СтрокаТабличнойЧасти.ОплаченоДнейЧасов = СтрокаДвижений.ОплаченоДнейЧасов;
					ИначеЕсли НеобходимыеДанные.ВТабличнойЧастиЕстьУчетВремени И СтрокаДвижений.Авторасчет Тогда
						СтрокаТабличнойЧасти.ОплаченоДнейЧасов = 0;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			// Если это данные по виду расчета, период действия которого является отработанным временем
			// или учитывается как норма времени, то для рассчитываемой записи сохраним данные о времени.
			Если (НеобходимыеДанные.ВТабличнойЧастиЕстьУчетВремени И ОсновныеНачисленияОрганизаций ИЛИ УправленческиеНачисления) И СтрокаДвижений.Авторасчет Тогда
				
				СпособРасчета = ИсходныеДанные.СпособРасчета;
				
				БылоСообщениеОРабочемВремени = (
				СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоСреднемуЗаработку Или 
				СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоСреднемуЗаработкуФСС Или 
				СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка Или 
				СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоДням Или 
				СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоЧасам Или
				СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоЧасовойТарифнойСтавке Или
				СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоДневнойТарифнойСтавке Или
				СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаЗаВечерниеЧасы Или
				СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаЗаНочныеЧасы); 
				
				БылоСообщениеОВидеВремени = Ложь;
				
				Если ИсходныеДанные.ЗачетОтработанногоВремени Тогда
					СтрокаДвижений.ОтработаноДней = 0;
					СтрокаДвижений.ОтработаноЧасов = 0;
					Если Не БылоСообщениеОРабочемВремени  Тогда
						СообщениеОбОшибке = Ложь;
						ОплачиваемоеВремя = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, , СообщениеОбОшибке, ГрафикиБезРабочегоВремени);
						БылоСообщениеОРабочемВремени = СообщениеОбОшибке;
					КонецЕсли;
					Если ИсходныеДанные.ВидУчетаВремени = Перечисления.ИНАГРО_ВидыУчетаВремени.ПоДням 
						Или СтрокаДвижений.ВидУчетаВремени = Перечисления.ИНАГРО_ВидыУчетаВремени.ПоЧасам Тогда
						СтрокаДвижений.ОтработаноДней = ИсходныеДанные.ОтработаноДней * ?(СтрокаДвижений.Сторно,-1,1);
						СтрокаДвижений.ОтработаноЧасов = ИсходныеДанные.ОтработаноЧасов * ?(СтрокаДвижений.Сторно,-1,1);
					Иначе
						БылоСообщениеОВидеВремени = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если ОсновныеНачисленияОрганизаций И ИсходныеДанные.ЗачетНормыВремени Тогда
					СтрокаДвижений.НормаЧасов = 0;
					СтрокаДвижений.НормаДней = 0;
					Если ИсходныеДанные.НормаОплачиваемыхЧасов = NULL Тогда
						Если Не БылоСообщениеОРабочемВремени Тогда
						КонецЕсли;
					ИначеЕсли ИсходныеДанные.ВидУчетаВремени = Перечисления.ИНАГРО_ВидыУчетаВремени.ПоДням 
						Или ИсходныеДанные.ВидУчетаВремени = Перечисления.ИНАГРО_ВидыУчетаВремени.ПоЧасам Тогда
						СтрокаДвижений.НормаЧасов = ИсходныеДанные.НормаОплачиваемыхЧасов * ?(СтрокаДвижений.Сторно,-1,1);
						СтрокаДвижений.НормаДней = ИсходныеДанные.НормаОплачиваемыхДней * ?(СтрокаДвижений.Сторно,-1,1);
					ИначеЕсли Не БылоСообщениеОВидеВремени Тогда
					КонецЕсли;
				КонецЕсли;
				
				Если ОсновныеНачисленияОрганизаций И ИсходныеДанные.УчитыватьКалендарные Тогда
					Если ИсходныеДанные.ВидРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.ОтпускУчебный 
						ИЛИ ИсходныеДанные.ВидРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.ОтпускЧАЭС
						ИЛИ ИсходныеДанные.ВидРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.ОтпускТворческий Тогда
						                                           
						СтрокаДвижений.КалендарныеДни = ИсходныеДанные.КалендарныеДниСПраздниками * ?(СтрокаДвижений.Сторно,-1,1);
					// только по основному назначению и без вяких замен
					ИначеЕсли СтрокаДвижений.Назначение = СтрокаДвижений.Сотрудник Тогда
						СтрокаДвижений.КалендарныеДни = ИсходныеДанные.КалендарныеДни * ?(СтрокаДвижений.Сторно,-1,1);
					КонецЕсли;
				КонецЕсли;
				
				// Перепишем данные из регистра в табличную часть документа
				Если СтрокаТабличнойЧасти <> Неопределено Тогда
					Если Не ИсходныеДанные.Регистратор.Метаданные().Имя = "ИНАГРО_ПутевойЛистГрузовогоАвтомобиля" И Не ИсходныеДанные.Регистратор.Метаданные().Имя = "ИНАГРО_ПутевойЛистТрактористаМашиниста" Тогда  // В путевке отработанные дни проставляются вручную
						Если ИсходныеДанные.ЗачетОтработанногоВремени Тогда
							СтрокаТабличнойЧасти.ОтработаноДней = СтрокаДвижений.ОтработаноДней;
							СтрокаТабличнойЧасти.ОтработаноЧасов = СтрокаДвижений.ОтработаноЧасов;
						Иначе
							СтрокаТабличнойЧасти.ОтработаноДней = 0;
							СтрокаТабличнойЧасти.ОтработаноЧасов = 0;
						КонецЕсли;
					КонецЕсли;
					Если ОсновныеНачисленияОрганизаций Тогда 
						
						Если ИсходныеДанные.ЗачетНормыВремени Тогда
							СтрокаТабличнойЧасти.НормаДней = СтрокаДвижений.НормаДней;
							СтрокаТабличнойЧасти.НормаЧасов = СтрокаДвижений.НормаЧасов;
						Иначе
							СтрокаТабличнойЧасти.НормаДней = 0;
							СтрокаТабличнойЧасти.НормаЧасов = 0;
						КонецЕсли;
						
						Если ИсходныеДанные.УчитыватьКалендарные Тогда
							СтрокаТабличнойЧасти.КалендарныеДни = СтрокаДвижений.КалендарныеДни;
						Иначе
							СтрокаТабличнойЧасти.КалендарныеДни = 0;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ВзносыВФонды И СтрокаДвижений.Авторасчет Тогда
				Если СтрокаТабличнойЧасти <> НеОпределено Тогда
					
					СтрокаТабличнойЧасти.База                      = СтрокаДвижений.База;
					СтрокаТабличнойЧасти.БазаВзноса                = СтрокаДвижений.БазаВзноса;
					СтрокаТабличнойЧасти.СтатьяНалоговойДекларации = СтрокаДвижений.СтатьяНалоговойДекларации;
					СтрокаТабличнойЧасти.Ставка                    = СтрокаДвижений.Ставка;
					СтрокаТабличнойЧасти.СтавкаПолная              = СтрокаДвижений.СтавкаПолная;
					СтрокаТабличнойЧасти.РезультатПолная           = СтрокаДвижений.РезультатПолная;
					СтрокаТабличнойЧасти.БазаВычет                 = СтрокаДвижений.БазаВычет;
					СтрокаТабличнойЧасти.ТипНачисления             = СтрокаДвижений.ТипНачисления;
				
					Если ИсходныеДанные.ЗарплатаКВыплатеОрганизаций Тогда
						СтрокаТабличнойЧасти.ПериодВзаиморасчетов	= ИсходныеДанные.Регистратор.ПериодРегистрации;
					Иначе
						СтрокаТабличнойЧасти.БазаОтпускные = СтрокаДвижений.БазаОтпускные;
					КонецЕсли;
					СтрокаТабличнойЧасти.КоэффициентСтавки          = СтрокаДвижений.КоэффициентСтавки;
					СтрокаТабличнойЧасти.БазаДоначисление          = СтрокаДвижений.БазаДоначисление;
					СтрокаТабличнойЧасти.РезультатДоначисление     = СтрокаДвижений.РезультатДоначисление;
				КонецЕсли;
				
			ИначеЕсли РегламентированныеУдержания И СтрокаДвижений.Авторасчет Тогда
				Если СтрокаТабличнойЧасти <> НеОпределено Тогда
					СтрокаТабличнойЧасти.Показатель1 = СтрокаДвижений[ПоказательРазмер];
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьЗаписиНабораСторноВзносовВФонды(ИсходныеДанныеСторно,
									НаборЗаписейРегистра,
									ТабличнаяЧастьДокумента,
									МассивИндексыСтрокТабличнойЧасти = Неопределено,
									КомментироватьРасчет = Ложь, ФормаКомментариев = НеОпределено)
	
	СтруктураПоиска = Новый Структура("НомерСтроки");
	ИсходныеДанныеСторно.Сбросить();
	Пока ИсходныеДанныеСторно.Следующий() Цикл
		Продолжить;
		Если ИсходныеДанныеСторно.ВидРасчета.СтавкаПоПериодуРегистрации Тогда
			Продолжить;
		КонецЕсли;
					
		Если ИсходныеДанныеСторно.НомерСтрокиТЧ = NULL Тогда
			
			// Аналогичная строка не нашлась надо создавать сторно запись
			// Названия всех переменных запроса соответствуют названиям измерений, 
			// ресурсов и реквизитов регистра расчета ВзносыВФонды.
			Движение = НаборЗаписейРегистра.Добавить();
			ЗаполнитьЗначенияСвойств(Движение,ИсходныеДанныеСторно);	
			
			НоваяСтрока = ТабличнаяЧастьДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ИсходныеДанныеСторно);	
			
		Иначе
			
			// все параметры совпали, достаточно просто откорректировать ресурсы
			Движение = НаборЗаписейРегистра.Получить(ИсходныеДанныеСторно.НомерСтрокиРегистратора-1);
			Движение.База		= Движение.База + ИсходныеДанныеСторно.База;
			Движение.БазаВзноса	= Движение.БазаВзноса + ИсходныеДанныеСторно.БазаВзноса;
			Движение.Результат	= Движение.Результат + ИсходныеДанныеСторно.Результат;
			
			СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Получить(ИсходныеДанныеСторно.НомерСтрокиТЧ-1);
			СтрокаТабличнойЧасти.База		= СтрокаТабличнойЧасти.База + ИсходныеДанныеСторно.База;
			СтрокаТабличнойЧасти.БазаВзноса	= СтрокаТабличнойЧасти.БазаВзноса + ИсходныеДанныеСторно.БазаВзноса;
			СтрокаТабличнойЧасти.Результат	= СтрокаТабличнойЧасти.Результат + ИсходныеДанныеСторно.Результат;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Рассчитывает значение ресурса записи регистра расчета по ее реквизитам и дополнительным данным.
//
// Параметры: 
//  СтрокаДвижений	- рассчитываемая запись регистра расчета
//  ИсходныеДанные	- выборка из результата запроса с исходными данными для расчета
//  УправленческиеРасчеты - булево, признак того, что это расчет управленческий
//  РегламентированныеНачисления - булево, признак того, что это регламентированное начисление
//  ОсновныеНачисленияОрганизаций - булево, признак того, что это именно основое регламентированное начисление.
//
// Возвращаемое значение:
//  Нет.
//
Процедура РассчитатьЗаписьРегистраРасчета(СтрокаДвижений,
	ИсходныеДанные,
	НеобходимыеДанные,
	УправленческиеРасчеты,
	РегламентированныеНачисления,
	РегламентированныеУдержания,
	ОсновныеНачисленияОрганизаций,
	ВзносыВФонды,
	КомментироватьРасчет, ФормаКомментариев, ГрафикиБезРабочегоВремени)
	
	ВидРасчета = СтрокаДвижений.ВидРасчета;
	СпособРасчета = ИсходныеДанные.СпособРасчета;
	Результат = 0;
	
	РезультатПолучен = Истина;
	ПоказательРазмер = "Показатель1";
	ПоказательПроцент = "Показатель2";
	
	// расчет будем проводить только для авторассчитываемой записи
	Если СтрокаДвижений.Авторасчет Тогда
		
		Если СпособРасчета = Перечисления.СпособыРасчетаНачислений.Процентом Тогда
			// Размер - процент доплаты
			Если Не ИсходныеДанные.РезультатБаза = NULL Тогда
				
				Если РегламентированныеУдержания Тогда
					УжеНачисленоВТекущемПериоде = ?(ИсходныеДанные.УжеНачисленоВТекущемПериоде = Null, 0, ИсходныеДанные.УжеНачисленоВТекущемПериоде);
					Результат = Макс(ИсходныеДанные.РезультатБаза * СтрокаДвижений[ПоказательПроцент]/100 - УжеНачисленоВТекущемПериоде,0);
				Иначе
					Результат = ИсходныеДанные.РезультатБаза * СтрокаДвижений[ПоказательПроцент]/100;
				КонецЕсли;
			КонецЕсли;
			
			// ФиксированнойСуммой
			//		
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ФиксированнойСуммой 
			ИЛИ СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоДоговоруФиксированнойСуммой 
			ИЛИ СпособРасчета = Перечисления.СпособыРасчетаНачислений.УдержаниеФиксированнойСуммой Тогда
			СообщениеОбОшибке = Ложь;
			Результат = СтрокаДвижений[ПоказательРазмер];
			
			// НулеваяСумма
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.НулеваяСумма Тогда
			// Ничего не считаем 

			// ПоМесячнойТарифнойСтавкеПоДням
			// ПоМесячнойТарифнойСтавкеПоЧасам.
		ИначеЕсли
			СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоДням Или 
			СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоЧасам Тогда
			
			НормаВремени = ?( СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоДням , СтрокаДвижений.НормаДнейЗаМесяц,СтрокаДвижений.НормаЧасовЗаМесяц);
			СообщениеОбОшибке = Ложь;
			ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, Ложь, "", СообщениеОбОшибке, ГрафикиБезРабочегоВремени);
			Если НормаВремени <> 0 Тогда
				Результат = СтрокаДвижений[ПоказательРазмер] * ОтработаноВремениОсновное / НормаВремени;
			КонецЕсли;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);
			
			// ПоЧасовойТарифнойСтавке
			// ПоДневнойТарифнойСтавке
			//
		ИначеЕсли
			СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоЧасовойТарифнойСтавке Или
			СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоДневнойТарифнойСтавке Тогда
			
			ОтработаноВремениОсновное = ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, Ложь, "", , ГрафикиБезРабочегоВремени);
			Результат = СтрокаДвижений[ПоказательРазмер] * ОтработаноВремениОсновное;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);			

			// ДоплатаЗаВечерниеЧасы
			//
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаЗаВечерниеЧасы Тогда
			
			ОтработаноВремениОсновное	= ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, Ложь, "", , ГрафикиБезРабочегоВремени);
			ЧасовойТариф	= СтрокаДвижений.Показатель1;
			КоэффициентВечерних	= СтрокаДвижений.Показатель2/100;
			Результат = ЧасовойТариф * КоэффициентВечерних * ОтработаноВремениОсновное;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);
			
			// ДоплатаЗаНочныеЧасы
			//
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаЗаНочныеЧасы Тогда
			
			ОтработаноВремениОсновное	= ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, Ложь, "", , ГрафикиБезРабочегоВремени);
			ЧасовойТариф	= СтрокаДвижений.Показатель1;
			КоэффициентНочных	= СтрокаДвижений.Показатель2/100;
			Результат = ЧасовойТариф * КоэффициентНочных * ОтработаноВремениОсновное;
			
			СтрокаДвижений.ОплаченоДнейЧасов = ОтработаноВремениОсновное * ?(СтрокаДвижений.Сторно,-1,1);
			
			
		// ПочтовыйСбор для исполнительных листов
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПочтовыйСбор Тогда
			
			Если (НЕ ИсходныеДанные.РазмерПочтовогоПеревода = NULL) И (НЕ ИсходныеДанные.РазмерПочтовогоПеревода = 0) И (НЕ(ИсходныеДанные.РазмерПочтовогоПеревода <> 0 И ИсходныеДанные.Ставка = NULL)) Тогда
				 
				РезультатБаза = ИсходныеДанные.РазмерПочтовогоПеревода;
				СуммаДополнительно = ИсходныеДанные.СуммаДополнительно;
				СуммаМинимальная = ИсходныеДанные.СуммаМинимальная; 
				// Убираем НДС согласно постановления ПНБУ №400 от 15.11.2011г.
				// или же оставляем согласно письма ДПСУ от 09.02.2012 № 1706/5/15-3416. 
				НеУчитыватьНДСДляПочтовогоСбора = ПолучитьФункциональнуюОпцию("ИНАГРО_НеУчитыватьНДСДляПочтовогоСбора");
				
				РазмерПочтовогоСбора = ?(РезультатБаза * ИсходныеДанные.Ставка < СуммаМинимальная, СуммаМинимальная,РезультатБаза * ИсходныеДанные.Ставка);
				Результат = (РазмерПочтовогоСбора + СуммаДополнительно) *?(ИсходныеДанные.Регистратор.ПериодРегистрации >= Дата(2012,1,1) И НеУчитыватьНДСДляПочтовогоСбора,1,1.2); 
				// Запишем ставку в размер
				СтрокаДвижений[ПоказательРазмер] = ИсходныеДанные.Ставка;
				
			КонецЕсли;
			
		// ИндексацияАлиментов для исполнительных листов
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ИндексацияАлиментов Тогда
			
			Если (НЕ ИсходныеДанные.БазаИндексации = NULL) И (НЕ ИсходныеДанные.БазаИндексации = 0) Тогда
	
				Начало = НачалоМесяца(?(ИсходныеДанные.НачалоИндексации = Null, Дата("00010101"), ИсходныеДанные.НачалоИндексации));
				Конец  = СтрокаДвижений.ПериодРегистрации;
				БазовыйМесяц = НачалоМесяца(ДобавитьМесяц(Макс(Начало, НеобходимыеДанные.НачалоРасчетаИндексации),-1));
				                          
				КоэффициентИндексации	= РассчитатьЗаписьРегистраРасчета_Индексация_Коэффициент( БазовыйМесяц, Конец, НеобходимыеДанные, "ИндексацияАлиментов" );
				
				РезультатБаза = МИН (ИсходныеДанные.БазаИндексации, ИсходныеДанные.АлиментыТрудоспособные);
				
				Результат = РезультатБаза * КоэффициентИндексации;
				
			КонецЕсли;
			
		// ИсполнительныйЛистПроцентом
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ИсполнительныйЛистПроцентом Тогда
			
			// Размер - процент удержания
			Если Не ИсходныеДанные.РезультатБаза = NULL Тогда                                                
				
				ИсчисленныйНДФЛ 			= ?(ИсходныеДанные.ИсчисленныйНДФЛ = Null, 0, ИсходныеДанные.ИсчисленныйНДФЛ);
				ИсчисленныеВзносы 			= ?(ИсходныеДанные.Взносы = Null, 0, ИсходныеДанные.Взносы);
				
				РезультатБаза = ИсходныеДанные.РезультатБаза - ИсчисленныйНДФЛ - ИсчисленныеВзносы;
				
				Результат = РезультатБаза * СтрокаДвижений[ПоказательРазмер] / 100;
				
			КонецЕсли;            
			
		// АлиментыПроцентом
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.АлиментыПроцентом Тогда
			
			// Размер - процент удержания
			Если (Не ИсходныеДанные.РезультатБаза = NULL) И (НЕ ИсходныеДанные.ДетейВДокументеВсего = 0) Тогда
				
				АлиментыДетиДо6 		= ?(ИсходныеДанные.АлиментыДетиДо6 = Null	, 0, ИсходныеДанные.АлиментыДетиДо6);
				АлиментыДетиДо18 		= ?(ИсходныеДанные.АлиментыДетиДо18 = Null	, 0, ИсходныеДанные.АлиментыДетиДо18);
				АлиментыТрудоспособные 	= ?(ИсходныеДанные.АлиментыТрудоспособные = Null, 0, ИсходныеДанные.АлиментыТрудоспособные);

				ДетейВДокументе6 	= ?(ИсходныеДанные.ДетейВДокументе6 = Null	, 0, ИсходныеДанные.ДетейВДокументе6);
				ДетейВДокументе18 	= ?(ИсходныеДанные.ДетейВДокументе18 = Null	, 0, ИсходныеДанные.ДетейВДокументе18);
				ДетейВДокументе19 	= ?(ИсходныеДанные.ДетейВДокументе19 = Null	, 0, ИсходныеДанные.ДетейВДокументе19);
				
				ПределПоПрожиточнымМинимумам = 0.5 * (ДетейВДокументе6*АлиментыДетиДо6 
													+ АлиментыДетиДо18*ДетейВДокументе18
													+ АлиментыТрудоспособные*ДетейВДокументе19);
													
				// все дети указанные в исполнительном листе
				ДетейВДокументеВсего = ?(ИсходныеДанные.ДетейВДокументеВсего = Null	, 0, ИсходныеДанные.ДетейВДокументеВсего);
				
				// дети которые уже достигли возраста указанного вдокументе
				ДетейВДокументе 	 = ?(ИсходныеДанные.ДетейВДокументе = Null	, 0, ИсходныеДанные.ДетейВДокументе);
				Если ДетейВДокументеВсего = 0 Тогда
					ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 ; %2: В исполнительном листе на уплату алиментов не указанны данные о детях.';uk='%1 ; %2: У виконавчому листі на сплату аліментів не вказані дані про дітей.'"), СтрокаДвижений.Сотрудник, СтрокаДвижений.ВидРасчета),,,СтатусСообщения.Важное);
					Возврат;	
				КонецЕсли;	
				
				ИсчисленныйНДФЛ 			= ?(ИсходныеДанные.ИсчисленныйНДФЛ = Null  , 0, ИсходныеДанные.ИсчисленныйНДФЛ);
				ИсчисленныеВзносы 			= ?(ИсходныеДанные.Взносы = Null, 0, ИсходныеДанные.Взносы);
				
				РезультатБаза = ИсходныеДанные.РезультатБаза - ИсчисленныйНДФЛ - ИсчисленныеВзносы;
				
				Результат = (РезультатБаза * СтрокаДвижений[ПоказательРазмер]/100)*ДетейВДокументе/ДетейВДокументеВсего ;
				
				Если ИсходныеДанные.ПометкаУвеличиватьДоМинимума  Тогда
					Результат = Макс(Результат, ПределПоПрожиточнымМинимумам);
				КонецЕсли;
				
			КонецЕсли;
			
		// ИсполнительныйЛистПроцентомДоПредела
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ИсполнительныйЛистПроцентомДоПредела Тогда
			
			// Размер - процент удержания
			Если Не ИсходныеДанные.РезультатБаза = NULL Тогда
				
				ИсчисленныйНДФЛ 			= ?(ИсходныеДанные.ИсчисленныйНДФЛ = Null, 0, ИсходныеДанные.ИсчисленныйНДФЛ);
				ИсчисленныеВзносы 			= ?(ИсходныеДанные.Взносы = Null, 0, ИсходныеДанные.Взносы);
				УжеНачисленоВТекущемПериоде = ?(ИсходныеДанные.УжеНачисленоВТекущемПериоде = Null, 0, ИсходныеДанные.УжеНачисленоВТекущемПериоде);
				РезультатБаза = ИсходныеДанные.РезультатБаза - ИсчисленныйНДФЛ - ИсчисленныеВзносы;
				
				Результат = Макс((РезультатБаза * СтрокаДвижений[ПоказательРазмер]/100) - УжеНачисленоВТекущемПериоде, 0);
				
				ПределПоДокументуОснованию  = ?(ИсходныеДанные.ПределПоДокументуОснованию = Null, 0 ,ИсходныеДанные.ПределПоДокументуОснованию);
				УжеНачисленоЗаВсюИсторию 	= ?(ИсходныеДанные.УжеНачисленоЗаВсюИсторию = Null, 0, ИсходныеДанные.УжеНачисленоЗаВсюИсторию);
				
				// Ограничим результат расчета в случае достижения предела удержания
				Результат = Мин(Результат, ПределПоДокументуОснованию  - УжеНачисленоЗаВсюИсторию);

			КонецЕсли;
			
		// АлиментыПроцентомДоПредела
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.АлиментыПроцентомДоПредела Тогда
			
			// Размер - процент удержания
			Если (НЕ ИсходныеДанные.РезультатБаза = NULL) И (НЕ ИсходныеДанные.ДетейВДокументеВсего = 0) Тогда
				
				АлиментыДетиДо6 		= ?(ИсходныеДанные.АлиментыДетиДо6 = Null	, 0, ИсходныеДанные.АлиментыДетиДо6);
				АлиментыДетиДо18 		= ?(ИсходныеДанные.АлиментыДетиДо18 = Null	, 0, ИсходныеДанные.АлиментыДетиДо18);
				АлиментыТрудоспособные 	= ?(ИсходныеДанные.АлиментыТрудоспособные = Null	, 0, ИсходныеДанные.АлиментыТрудоспособные);

				ДетейВДокументе6 	= ?(ИсходныеДанные.ДетейВДокументе6 = Null	, 0, ИсходныеДанные.ДетейВДокументе6);
				ДетейВДокументе18 	= ?(ИсходныеДанные.ДетейВДокументе18 = Null	, 0, ИсходныеДанные.ДетейВДокументе18);
				ДетейВДокументе19 	= ?(ИсходныеДанные.ДетейВДокументе19 = Null	, 0, ИсходныеДанные.ДетейВДокументе19);
				
				ПределПоПрожиточнымМинимумам = 0.5 * (ДетейВДокументе6*АлиментыДетиДо6 
													+ АлиментыДетиДо18*ДетейВДокументе18
													+ АлиментыТрудоспособные*ДетейВДокументе19);
				
				// все дети указанные в исполнительном листе
				ДетейВДокументеВсего = ?(ИсходныеДанные.ДетейВДокументеВсего = Null	, 0, ИсходныеДанные.ДетейВДокументеВсего);
				
				// дети которые уже достигли возраста указанного вдокументе
				ДетейВДокументе 	 = ?(ИсходныеДанные.ДетейВДокументе = Null	, 0, ИсходныеДанные.ДетейВДокументе);
				Если ДетейВДокументеВсего = 0 Тогда
					Возврат;	
				КонецЕсли;	
				
				ИсчисленныйНДФЛ 			= ?(ИсходныеДанные.ИсчисленныйНДФЛ = Null  , 0, ИсходныеДанные.ИсчисленныйНДФЛ);
				ИсчисленныеВзносы 			= ?(ИсходныеДанные.Взносы = Null, 0, ИсходныеДанные.Взносы);
				
				РезультатБаза = ИсходныеДанные.РезультатБаза - ИсчисленныйНДФЛ - ИсчисленныеВзносы;
				
				УжеНачисленоВТекущемПериоде = ?(ИсходныеДанные.УжеНачисленоВТекущемПериоде = Null, 0, ИсходныеДанные.УжеНачисленоВТекущемПериоде);
				
				Если ДетейВДокументеВсего <> 0 Тогда
					Результат = Макс((РезультатБаза * СтрокаДвижений[ПоказательРазмер]/100)*ДетейВДокументе/ДетейВДокументеВсего - УжеНачисленоВТекущемПериоде, 0);
					
					Если ИсходныеДанные.ПометкаУвеличиватьДоМинимума  Тогда
						Результат = Макс(Результат, ПределПоПрожиточнымМинимумам);
					КонецЕсли;
				КонецЕсли; 
				
				// Ограничим результат расчета в случае достижения предела удержания
				ПределПоДокументуОснованию  = ?(ИсходныеДанные.ПределПоДокументуОснованию = Null, 0 ,ИсходныеДанные.ПределПоДокументуОснованию);
				УжеНачисленоЗаВсюИсторию 	= ?(ИсходныеДанные.УжеНачисленоЗаВсюИсторию = Null, 0, ИсходныеДанные.УжеНачисленоЗаВсюИсторию);
				
				Результат = Мин(Результат, ПределПоДокументуОснованию  - УжеНачисленоЗаВсюИсторию);
				
			КонецЕсли;
			
		// ИсполнительныйЛистФиксСуммой
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ИсполнительныйЛистФиксСуммой Тогда
			
			Результат = СтрокаДвижений[ПоказательРазмер];
			
		// АлиментыФиксСуммой
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.АлиментыФиксСуммой Тогда
			
			
			Если НЕ ИсходныеДанные.ДетейВДокументеВсего = 0 Тогда
				
				ДетейВДокументеВсего = ?(ИсходныеДанные.ДетейВДокументеВсего=NULL,0,ИсходныеДанные.ДетейВДокументеВсего);// все дети указанные в исполнительном листе
				ДетейВДокументе = ?(ИсходныеДанные.ДетейВДокументе=NULL,0,ИсходныеДанные.ДетейВДокументе);     // дети которые уже достигли возраста указанного вдокументе
				
				Результат = ?(ДетейВДокументеВсего = 0, 0, СтрокаДвижений[ПоказательРазмер] * ДетейВДокументе / ДетейВДокументеВсего);
				
			КонецЕсли;
			
		// ИсполнительныйЛистФиксСуммойДоПредела
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ИсполнительныйЛистФиксСуммойДоПредела Тогда
			
			ПределПоДокументуОснованию  = ?(ИсходныеДанные.ПределПоДокументуОснованию = Null, 0 ,ИсходныеДанные.ПределПоДокументуОснованию);
			УжеНачисленоЗаВсюИсторию 	= ?(ИсходныеДанные.УжеНачисленоЗаВсюИсторию = Null, 0, ИсходныеДанные.УжеНачисленоЗаВсюИсторию);
			
			// Ограничим результат расчета в случае достижения предела удержания
			Результат = Мин(СтрокаДвижений[ПоказательРазмер], ПределПоДокументуОснованию  - УжеНачисленоЗаВсюИсторию);
			
		// АлиментыФиксСуммойДоПредела
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.АлиментыФиксСуммойДоПредела Тогда
			
			Если НЕ ИсходныеДанные.ДетейВДокументеВсего = 0 Тогда
				
				ДетейВДокументеВсего = ИсходныеДанные.ДетейВДокументеВсего;// все дети указанные в исполнительном листе
				ДетейВДокументе = ИсходныеДанные.ДетейВДокументе;     // дети которые уже достигли возраста указанного вдокументе
				ПределПоДокументуОснованию  = ?(ИсходныеДанные.ПределПоДокументуОснованию = Null, 0 ,ИсходныеДанные.ПределПоДокументуОснованию);
				УжеНачисленоЗаВсюИсторию 	= ?(ИсходныеДанные.УжеНачисленоЗаВсюИсторию = Null, 0, ИсходныеДанные.УжеНачисленоЗаВсюИсторию);
				
				// Ограничим результат расчета в случае достижения предела удержания
				Результат = Мин(СтрокаДвижений[ПоказательРазмер] * ДетейВДокументе / ДетейВДокументеВсего, ПределПоДокументуОснованию  - УжеНачисленоЗаВсюИсторию);
			КонецЕсли;	
			
		// ДоплатаДоСреднегоЗаработка
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка Тогда
			
			
			ЗаработокЗаЕдиницуВремени = СтрокаДвижений.Показатель1;
			
			ВидУчетаВремениДляСредней = СтрокаДвижений.ВидУчетаВремениДляСредней;
			Если ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.НормаОплачиваемыхДней = NULL, 0, ИсходныеДанные.НормаОплачиваемыхДней);
			ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.НормаОплачиваемыхЧасов = NULL, 0, ИсходныеДанные.НормаОплачиваемыхЧасов);
			ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоКалендарнымДням Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.КалендарныеДни = NULL, 0, ИсходныеДанные.КалендарныеДни);
			Иначе
				ОплачиваемоеВремя = 0;
			КонецЕсли;
			
			СреднийЗаработок = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени;
			РезультатБаза = ?(ИсходныеДанные.РезультатБаза = NULL, 0, ИсходныеДанные.РезультатБаза);
			
			Результат = Макс(СреднийЗаработок - РезультатБаза, 0);
			СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
			
		// ПоСреднемуЗаработкуДляОтпуска
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоСреднемуЗаработкуДляОтпуска Тогда
			
			ЗаработокЗаЕдиницуВремени = СтрокаДвижений.Показатель1;
			
			ВидУчетаВремениДляСредней = СтрокаДвижений.ВидУчетаВремениДляСредней;
			Если ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.НормаОплачиваемыхДней = NULL, 0, ИсходныеДанные.НормаОплачиваемыхДней);
			ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.НормаОплачиваемыхЧасов = NULL, 0, ИсходныеДанные.НормаОплачиваемыхЧасов);
			ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоКалендарнымДням Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.КалендарныеДни = NULL, 0, ИсходныеДанные.КалендарныеДни);
			ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоКалендарнымДнямСПраздниками Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.КалендарныеДниСПраздниками = NULL, 0, ИсходныеДанные.КалендарныеДниСПраздниками);	
			Иначе
				ОплачиваемоеВремя = 0;
			КонецЕсли;
			
			Результат = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени;
			СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
			
		// ПоСреднемуЗаработкуКомпенсацияОтпуска
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоСреднемуЗаработкуДляКомпенсацииОтпуска Тогда
			
			ЗаработокЗаЕдиницуВремени = СтрокаДвижений.Показатель1;
			КалендарныхДней = СтрокаДвижений.Показатель2;
			
			Результат = ЗаработокЗаЕдиницуВремени * КалендарныхДней;
			СтрокаДвижений.ОплаченоДнейЧасов = КалендарныхДней * ?(СтрокаДвижений.Сторно,-1,1);
			
		// ПоСреднемуЗаработку
		ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоСреднемуЗаработку Тогда
			
			ЗаработокЗаЕдиницуВремени = СтрокаДвижений.Показатель1;
			ПроцентОплаты = ?(СтрокаДвижений.Показатель2 = 0, 100,СтрокаДвижений.Показатель2);
			
			ВидУчетаВремениДляСредней = СтрокаДвижений.ВидУчетаВремениДляСредней;
			Если ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.ОтработаноДней = NULL, 0, ИсходныеДанные.ОтработаноДней);
			ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.ОтработаноЧасов = NULL, 0, ИсходныеДанные.ОтработаноЧасов);
			ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоКалендарнымДням Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.КалендарныеДни = NULL, 0, ИсходныеДанные.КалендарныеДни);
			ИначеЕсли ЗначениеЗаполнено(ИсходныеДанные.ВидУчетаВремени) Тогда
				Если ИсходныеДанные.ВидУчетаВремени = Перечисления.ИНАГРО_ВидыУчетаВремени.ПоДням Тогда
					ОплачиваемоеВремя = ?(ИсходныеДанные.ОтработаноДней = NULL, 0, ИсходныеДанные.ОтработаноДней);
				ИначеЕсли ИсходныеДанные.ВидУчетаВремени = Перечисления.ИНАГРО_ВидыУчетаВремени.ПоЧасам Тогда
					ОплачиваемоеВремя = ?(ИсходныеДанные.ОтработаноЧасов = NULL, 0, ИсходныеДанные.ОтработаноЧасов);
				КонецЕсли;	
			Иначе
				ОплачиваемоеВремя = 0;
			КонецЕсли;
			
			Результат = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты/100;
			СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
			
		// ПоСреднемуЗаработкуФСС
		ИначеЕсли  СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоСреднемуЗаработкуФСС Тогда
			
			ЗаработокЗаЕдиницуВремени = СтрокаДвижений.Показатель1;
			ПроцентОплаты = ?(СтрокаДвижений.Показатель2 = 0, 100,СтрокаДвижений.Показатель2);
			
			ВидУчетаВремениДляСредней = СтрокаДвижений.ВидУчетаВремениДляСредней;
			Если ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимДням Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.НормаОплачиваемыхДней = NULL, 0, ИсходныеДанные.НормаОплачиваемыхДней);
			ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимЧасам Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.НормаОплачиваемыхЧасов = NULL, 0, ИсходныеДанные.НормаОплачиваемыхЧасов);
			ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоКалендарнымДням Тогда
				ОплачиваемоеВремя = ?(ИсходныеДанные.КалендарныеДни = NULL, 0, ИсходныеДанные.КалендарныеДни);
			ИначеЕсли ВидУчетаВремениДляСредней = Перечисления.ИНАГРО_ВидыУчетаВремениДляСредней.ПоКалендарнымДнямСПраздниками Тогда
				ОплачиваемоеВремя = День(СтрокаДвижений.ПериодДействияКонец)-День(СтрокаДвижений.ПериодДействияНачало)+1;
			Иначе
				ОплачиваемоеВремя = 0;
			КонецЕсли;
			
			ПромежуточныйРезультат = Окр(ЗаработокЗаЕдиницуВремени * ПроцентОплаты/100,2);
			Результат = Окр(ОплачиваемоеВремя * ПромежуточныйРезультат,2);
			СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
			
		// КомпенсацияНевыплаченнойЗарплаты
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.КомпенсацияНевыплаченнойЗарплаты Тогда
			
			Если ИсходныеДанные.СуммаКомпенсации = NULL Тогда
				ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 ; %2: нет данных о базовой сумме компенсации.';uk='%1 ; %2: немає даних про базову суму компенсації.'"), СтрокаДвижений.Физлицо, СтрокаДвижений.ВидРасчета),,,СтатусСообщения.Важное);
			Иначе	
				
				Начало = ДобавитьМесяц(СтрокаДвижений.БазовыйПериодНачало, 1);
				Конец  = ДобавитьМесяц(СтрокаДвижений.ПериодРегистрации, -1);
				КоэффициентКомпенсации = РассчитатьЗаписьРегистраРасчета_КоэффициентКомпенсации( Начало, Конец, НеобходимыеДанные );
				
				Результат = ИсходныеДанные.СуммаКомпенсации * КоэффициентКомпенсации;
			КонецЕсли; 
		
		// ИндексацияЗарплаты
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ИндексацияЗарплаты Тогда
			
			БазаИндексацияЗарплаты1 = ?(ИсходныеДанные.БазаИндексацияЗарплаты1 = NULL, 0, ИсходныеДанные.БазаИндексацияЗарплаты1);
			БазаИндексацияЗарплаты2 = ?(ИсходныеДанные.БазаИндексацияЗарплаты2 = NULL, 0, ИсходныеДанные.БазаИндексацияЗарплаты2);
			БазаИндексацияЗарплаты3 = ?(ИсходныеДанные.БазаИндексацияЗарплаты3 = NULL, 0, ИсходныеДанные.БазаИндексацияЗарплаты3);
			БазаИндексацияЗарплаты4 = ?(ИсходныеДанные.БазаИндексацияЗарплаты4 = NULL, 0, ИсходныеДанные.БазаИндексацияЗарплаты4);
			РезультатПолнаяБаза = БазаИндексацияЗарплаты1
			+ БазаИндексацияЗарплаты2
			+ БазаИндексацияЗарплаты3
			+ БазаИндексацияЗарплаты4;
			
			Если СтрокаДвижений.Назначение.ИНАГРО_ВидЗанятости = Перечисления.ВидыЗанятости.ВнутреннееСовместительство Тогда
				Результат = 0;	
				
			ИначеЕсли РезультатПолнаяБаза = 0 Тогда
				
			ИначеЕсли СтрокаДвижений.Сотрудник.ИНАГРО_ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство
				И НЕ ИсходныеДанные.ЕстьСправкаОБазеИндексацииСовместителя Тогда
				
			Иначе	
				Начало = ?(ИсходныеДанные.ИндексацияЗарплатыНачало = Null, Дата("00010101"), ИсходныеДанные.ИндексацияЗарплатыНачало);
				Конец  = ИсходныеДанные.ИндексацияЗарплатыКонец;
				БазовыйМесяц = Макс(Начало, НеобходимыеДанные.НачалоРасчетаИндексации);
				                          
				КоэффициентИндексации	= РассчитатьЗаписьРегистраРасчета_Индексация_Коэффициент( Начало, Конец, НеобходимыеДанные, "ИндексацияЗарплаты" );
				РезультатБаза			= РассчитатьЗаписьРегистраРасчета_Индексация_База( ИсходныеДанные, НеобходимыеДанные, "ИндексацияЗарплаты" );
				ПрожиточныйМинимум = ИсходныеДанные.ПорогИндексацияЗарплаты3;
				
	
				Если ИсходныеДанные.СпособОсновногоРасчета = Перечисления.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоЧасам
					Или ИсходныеДанные.СпособОсновногоРасчета = Перечисления.СпособыРасчетаНачислений.ПоЧасовойТарифнойСтавке
					Или ИсходныеДанные.ОсновнойГрафикРаботы.УчетНормыВремениПоОтдельномуГрафику Тогда
					Отработано = ?(ИсходныеДанные.ОтработаноЧасовБаза = NULL, 0, ИсходныеДанные.ОтработаноЧасовБаза);
					Норма = СтрокаДвижений.НормаЧасовЗаМесяц;
				Иначе
					Отработано = ?(ИсходныеДанные.ОтработаноДнейБаза = NULL, 0, ИсходныеДанные.ОтработаноДнейБаза);
					Норма = СтрокаДвижений.НормаДнейЗаМесяц;
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(Отработано) Тогда
					// Отработанных дней не найдено, считать не надо
					КоэффициентИндексацииПропорционально = 0;
				ИначеЕсли Норма = 0 Тогда
					// Норма не определена, начисляем полностью
					КоэффициентИндексацииПропорционально = 1;
				Иначе
					КоэффициентИндексацииПропорционально = Мин(Отработано/Норма,1);
				КонецЕсли;
				
				Если ИсходныеДанные.РасчетИндексацииПропорционально = Перечисления.ИНАГРО_ВариантыАлгоритмовРасчетИндексацииПропорционально.НеПрименять Тогда
					// Пропорционально считаем только  фиксированную индексацию.
	                РезультатФиксированнаяИндексация = Окр(?(ИсходныеДанные.РезультатФиксированнаяИндексация = Null, 0, ИсходныеДанные.РезультатФиксированнаяИндексация) * КоэффициентИндексацииПропорционально,2);
					Результат  = РезультатБаза * КоэффициентИндексации + РезультатФиксированнаяИндексация;
				ИначеЕсли ИсходныеДанные.РасчетИндексацииПропорционально = Перечисления.ИНАГРО_ВариантыАлгоритмовРасчетИндексацииПропорционально.ДляНеполногоРабочегоВремени Тогда
					// Пропорционально считаем работающим не полное время и  фиксированную индексацию.
	                РезультатФиксированнаяИндексация = Окр(?(ИсходныеДанные.РезультатФиксированнаяИндексация = Null, 0, ИсходныеДанные.РезультатФиксированнаяИндексация) * КоэффициентИндексацииПропорционально,2);
					Если ИсходныеДанные.ОсновнойГрафикРаботы.УчетНормыВремениПоОтдельномуГрафику Тогда
						РезультатБаза = ПрожиточныйМинимум;
						Результат  = РезультатБаза * КоэффициентИндексации * КоэффициентИндексацииПропорционально + РезультатФиксированнаяИндексация;
					Иначе
						Результат  = РезультатБаза * КоэффициентИндексации + РезультатФиксированнаяИндексация;
					КонецЕсли;
				Иначе
					// Пропорционально считаем все
					РезультатБаза = ПрожиточныйМинимум;
					РезультатФиксированнаяИндексация = Окр(?(ИсходныеДанные.РезультатФиксированнаяИндексация = Null, 0, ИсходныеДанные.РезультатФиксированнаяИндексация) * КоэффициентИндексацииПропорционально,2);
					Результат  = РезультатБаза * КоэффициентИндексации * КоэффициентИндексацииПропорционально + РезультатФиксированнаяИндексация;
				КонецЕсли;	
				
				Если ТипЗнч(ИсходныеДанные.Регистратор) = Тип("ДокументСсылка.ИНАГРО_КадровоеПеремещениеОрганизаций") Тогда
					СтрокаДвижений.ОплаченоДнейЧасов = РезультатФиксированнаяИндексация;
				КонецЕсли;	
				
			КонецЕсли;
			
		// ИндексацияСоциальныхНачислений
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ИндексацияСоциальныхНачислений Тогда
			
			БазаИндексацияСоциальныхНачислений1 = ?(ИсходныеДанные.БазаИндексацияСоциальныхНачислений1 = NULL, 0, ИсходныеДанные.БазаИндексацияСоциальныхНачислений1);
			БазаИндексацияСоциальныхНачислений2 = ?(ИсходныеДанные.БазаИндексацияСоциальныхНачислений2 = NULL, 0, ИсходныеДанные.БазаИндексацияСоциальныхНачислений2);
			БазаИндексацияСоциальныхНачислений3 = ?(ИсходныеДанные.БазаИндексацияСоциальныхНачислений3 = NULL, 0, ИсходныеДанные.БазаИндексацияСоциальныхНачислений3);
			БазаИндексацияСоциальныхНачислений4 = ?(ИсходныеДанные.БазаИндексацияСоциальныхНачислений4 = NULL, 0, ИсходныеДанные.БазаИндексацияСоциальныхНачислений4);
			РезультатПолнаяБаза = БазаИндексацияСоциальныхНачислений1
			+ БазаИндексацияСоциальныхНачислений2
			+ БазаИндексацияСоциальныхНачислений3
			+ БазаИндексацияСоциальныхНачислений4;
			Если НЕ РезультатПолнаяБаза = 0 Тогда
				
				Начало = ИсходныеДанные.ИндексацияСоциальныхНачисленийНачало;
				Конец  = ИсходныеДанные.ИндексацияСоциальныхНачисленийКонец;
		
				КоэффициентИндексации	= РассчитатьЗаписьРегистраРасчета_Индексация_Коэффициент( Начало, Конец, НеобходимыеДанные, "ИндексацияСоциальныхНачислений" );
				РезультатБаза			= РассчитатьЗаписьРегистраРасчета_Индексация_База( ИсходныеДанные, НеобходимыеДанные, "ИндексацияСоциальныхНачислений" );
				
				Результат  = РезультатБаза * КоэффициентИндексации;
			КонецЕсли;
			
		// ДоплатаДоМЗП
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоМЗП Тогда
			
			РезультатБаза = ?(ИсходныеДанные.РезультатБаза = NULL, 0, ИсходныеДанные.РезультатБаза);
			МинимальнаяЗарплата = ?(ИсходныеДанные.МинЗПМесяц = NULL, 0, ИсходныеДанные.МинЗПМесяц);
							
			Если НЕ РезультатБаза = 0 И НЕ МинимальнаяЗарплата = 0 Тогда	
				
				Если ИсходныеДанные.СпособОсновногоРасчетаДляМинЗП = Перечисления.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоДням
					Или ИсходныеДанные.СпособОсновногоРасчетаДляМинЗП = Перечисления.СпособыРасчетаНачислений.ПоДневнойТарифнойСтавке Тогда
					Отработано = ИсходныеДанные.ОтработаноДнейБаза;
					Норма = СтрокаДвижений.НормаДнейЗаМесяц;
				Иначе
					Отработано = ИсходныеДанные.ОтработаноЧасовБаза;
					Норма = СтрокаДвижений.НормаЧасовЗаМесяц;
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(Отработано) Тогда
					// Отработанных дней не найдено, считать не надо
					КоэффициентДоплаты = 0;
				ИначеЕсли Норма = 0 Тогда
					// Норма не определена, начисляем полностью
					КоэффициентДоплаты = 1;
				Иначе
					КоэффициентДоплаты = Мин(Отработано/Норма,1);
				КонецЕсли;
				
				МинимальнаяЗарплатаПропорционально = Окр(МинимальнаяЗарплата*КоэффициентДоплаты,2);
				
				Результат = Макс(МинимальнаяЗарплатаПропорционально - РезультатБаза, 0);
	
			КонецЕсли;
			
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула Тогда
			
			// проверем все ли показатели получены			
			Для НомерСтроки = 1 По ИсходныеДанные.КоличествоПоказателей Цикл
				Если ИсходныеДанные["Показатель"+НомерСтроки] = Null Тогда
					РезультатПолучен = Ложь;
				КонецЕсли;
				
				// для показателя типа время запишем его в отработанное
				Если ИсходныеДанные["Показатель"+НомерСтроки+"Наименование"] = Справочники.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВДнях.Наименование
					ИЛИ ИсходныеДанные["Показатель"+НомерСтроки+"Наименование"] = Справочники.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВЧасах.Наименование
					ИЛИ ИсходныеДанные["Показатель"+НомерСтроки+"Наименование"] = Справочники.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВДнях.Наименование
					ИЛИ ИсходныеДанные["Показатель"+НомерСтроки+"Наименование"] = Справочники.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВЧасах.Наименование
					ИЛИ ИсходныеДанные["Показатель"+НомерСтроки+"Наименование"] = Справочники.ИНАГРО_ПоказателиСхемМотивации.Время.Наименование
					ИЛИ ИсходныеДанные["Показатель"+НомерСтроки+"Наименование"] = Справочники.ИНАГРО_ПоказателиСхемМотивации.ВремяВДнях.Наименование
					ИЛИ ИсходныеДанные["Показатель"+НомерСтроки+"Наименование"] = Справочники.ИНАГРО_ПоказателиСхемМотивации.ВремяВКалендарныхДнях.Наименование
					ИЛИ ИсходныеДанные["Показатель"+НомерСтроки+"Наименование"] = Справочники.ИНАГРО_ПоказателиСхемМотивации.ВремяВЧасах.Наименование
					ИЛИ ИсходныеДанные["Показатель"+НомерСтроки+"Наименование"] = Справочники.ИНАГРО_ПоказателиСхемМотивации.ВечерниеВЧасах.Наименование
					ИЛИ ИсходныеДанные["Показатель"+НомерСтроки+"Наименование"] = Справочники.ИНАГРО_ПоказателиСхемМотивации.НочныеВЧасах.Наименование Тогда
					
					СтрокаДвижений.ОплаченоДнейЧасов = ИсходныеДанные["Показатель"+НомерСтроки];
				КонецЕсли;
				
			КонецЦикла;
				
			Если РезультатПолучен Тогда
				Попытка
					Результат = Вычислить(ИсходныеДанные.ФормулаРасчета);
				Исключение					
				КонецПопытки;
			КонецЕсли;
			
			Если ИсходныеДанные.ВидРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.СтажВДнях Тогда
				Результат = ИсходныеДанные.ОтработаноДнейБаза;
			КонецЕсли;	
			Если ИсходныеДанные.ВидРасчета = ПланыВидовРасчета.ИНАГРО_Начисления.СтажВЧасах Тогда
				Результат = ИсходныеДанные.ОтработаноЧасовБаза;
			КонецЕсли;	
			
		// Взносы в фонды
		ИначеЕсли	СпособРасчета = Перечисления.СпособыРасчетаНачислений.Взносы 
			ИЛИ	СпособРасчета = Перечисления.СпособыРасчетаНачислений.ВзносыФОТ Тогда
			
			Если СтрокаДвижений.ВидРасчета.СтавкаПоПериодуРегистрации Тогда
				
				Если НЕ СтрокаДвижений.Сторно Тогда
					
					БазаДо = ?(ИсходныеДанные.БазаДо = NULL, 0, ИсходныеДанные.БазаДо);
					БазаВзносаДо = ?(ИсходныеДанные.БазаВзносаДо = NULL, 0, ИсходныеДанные.БазаВзносаДо);
					База = ?(ИсходныеДанные.РезультатБаза = NULL, 0, ИсходныеДанные.РезультатБаза);
					БазаВычет = ?(ИсходныеДанные.БазаВычет = NULL, 0, ИсходныеДанные.БазаВычет);
					БазаВсего = База;
					
					БазаОтпускные = ?(ИсходныеДанные.РезультатБазаОтпускные = NULL, 0, ИсходныеДанные.РезультатБазаОтпускные);
					МинимальнаяБаза = ?(ИсходныеДанные.МинимальнаяБаза = NULL, 0, ИсходныеДанные.МинимальнаяБаза);
					БазаПолная = ?(ИсходныеДанные.БазаПолная = NULL, 0, ИсходныеДанные.БазаПолная);
					БазаДоначисление = 0;
					РезультатДоначисление = 0;
					
					Если ИсходныеДанные.РезультатБаза = NULL И НЕ (СтрокаДвижений.БазовыйПериодНачало < СтрокаДвижений.ПериодРегистрации И БазаДо <> 0 И БазаПолная <> 0) Тогда
						СтрокаДвижений.База			= 0;
						СтрокаДвижений.БазаВзноса	= 0;
						СтрокаДвижений.БазаВычет	= БазаВычет;
						
					ИначеЕсли ИсходныеДанные.Предел = NULL Тогда
						СтрокаДвижений.База			= 0;
						СтрокаДвижений.БазаВзноса	= 0;
						СтрокаДвижений.БазаВычет	= 0;
						
					ИначеЕсли (База-БазаДо) <> 0 И (ИсходныеДанные.Ставка = Неопределено ИЛИ ИсходныеДанные.Ставка = NULL) Тогда
						СтрокаДвижений.База			= 0;
						СтрокаДвижений.БазаВзноса	= 0;
						СтрокаДвижений.БазаВычет	= 0;
						
					Иначе
						
						Коэф = 1;
						Если	СтрокаДвижений.ДатаНачала <> СтрокаДвижений.БазовыйПериодНачало
							ИЛИ	СтрокаДвижений.ДатаОкончания <> СтрокаДвижений.БазовыйПериодКонец Тогда
							Коэф = ?( СтрокаДвижений.ОтработаноДнейВсего = 0, 1, СтрокаДвижений.ОтработаноДней / СтрокаДвижений.ОтработаноДнейВсего);
							
						КонецЕсли;
						
						Предел = ?(ИсходныеДанные.Предел = NULL, 0, ИсходныеДанные.Предел);
						Ставка = ?(ИсходныеДанные.Ставка = NULL, 0, ИсходныеДанные.Ставка);
						СтавкаПолная = ?(ИсходныеДанные.СтавкаПолная = NULL, 0, ИсходныеДанные.СтавкаПолная);
						Порог = ?(ИсходныеДанные.Порог = NULL, 0, ИсходныеДанные.Порог);
						НижнийПорог = ?(ИсходныеДанные.НижнийПорог = NULL, 0, ИсходныеДанные.НижнийПорог);
						
						КоэффициентСтавки = ?(ИсходныеДанные.КоэффициентСтавки = NULL, 0, ИсходныеДанные.КоэффициентСтавки);
						Если НЕ ИсходныеДанные.ПрименениеКоэффициентаЕСВ Тогда
							// Для тех, у кого коэффициент не нужен
							КоэффициентСтавки = 0;
						ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.Взносы Тогда
							// Для обычных взносов коэффициент не нужен
							КоэффициентСтавки = 0;
						ИначеЕсли КоэффициентСтавки = 0 Тогда
							// Коэффициент нужен, но не задан
							КоэффициентСтавки = 1;
						КонецЕсли;
						ИсползуетсяЕСВ1863 = ИсходныеДанные.ИсползуетсяЕСВ1863;
						
						БазаВзноса = Мин(Макс(Предел-БазаВычет,0), База);
						
						Если МинимальнаяБаза <> 0 И База <> 0 И БазаВычет = 0 Тогда
							БазаДоначисление = Макс(МинимальнаяБаза - БазаПолная,0);
							БазаВзноса = БазаВзноса + БазаДоначисление;
						ИначеЕсли МинимальнаяБаза <> 0 И БазаДо <> 0 И БазаВзносаДо <> 0 И БазаВычет = 0 Тогда
							ДоначисленоРанее = Макс(БазаВзносаДо - БазаДо,0);
							БазаДоначисление = Макс(МинимальнаяБаза - БазаПолная,0) - ДоначисленоРанее;
							БазаВзноса = БазаДоначисление;
						КонецЕсли;	
						
						Если НЕ ИсходныеДанные.ВидРасчета.ЕСВ Тогда
							База = (База - БазаДо) * Коэф;
							БазаВзноса = (БазаВзноса - БазаВзносаДо) * Коэф;
						Иначе	
							Если ИсходныеДанные.ВидРасчета.КатегорияРасчета = Перечисления.КатегорииРасчетов.Первичное
							   И СтрокаДвижений.БазовыйПериодНачало < ИсходныеДанные.Регистратор.ПериодРегистрации Тогда
								// Вообще-то, таких ситуаций быть не должно.
								// Но такое возможно, например, корректировка отпуска в прошедших периодах задним числом.
								// В этом случае не надо учитывать БазуДо, отнесем все сумму в доходы соответсвующего периода.
								// И в этом случае покажем корректировку.
								Если База > 0 Тогда
									СтрокаДвижений.ТипНачисления = 2;
								ИначеЕсли База < 0 Тогда
									СтрокаДвижений.ТипНачисления = 3;
								КонецЕсли;	
							Иначе
								База = (База - БазаДо) * Коэф;
								БазаВзноса = (БазаВзноса - БазаВзносаДо) * Коэф;
							КонецЕсли;	
						КонецЕсли;
						
						Если База = 0 И БазаДо = 0 Тогда
							// Нет базы - нет и коэффициента
							КоэффициентСтавки = 0;
						КонецЕсли;
						РезультатПолная = 0;
						Если ИсползуетсяЕСВ1863 Тогда
							// Расчет при наличии доначисления должен быть ОТДЕЛЬНО по каждой сумме.
							// Общая сумма налога при этом может и не совпадать.
							Результат = Окр((БазаВзноса - БазаДоначисление) * Окр(Ставка * ?(КоэффициентСтавки = 0, 1, КоэффициентСтавки),5),2);
							РезультатДоначисление  = Окр(БазаДоначисление * Ставка,2);
							Если СтавкаПолная > 0 Тогда
								РезультатПолная = Окр((БазаВзноса - БазаДоначисление) * Окр(СтавкаПолная * ?(КоэффициентСтавки = 0, 1, КоэффициентСтавки),5),2);
							КонецЕсли;	
						Иначе	
							Результат  = БазаВзноса * Окр(Ставка * ?(КоэффициентСтавки = 0, 1, КоэффициентСтавки),5);
							РезультатДоначисление  = 0;
							Если СтавкаПолная > 0 Тогда
								РезультатПолная  = БазаВзноса * Окр(СтавкаПолная * ?(КоэффициентСтавки = 0, 1, КоэффициентСтавки),5);
							КонецЕсли;	
						КонецЕсли;	
						
						// Согласно разъяснениями ГФС к доначислению не применяется понижающий коэффициент.
						Результат = Результат + РезультатДоначисление;
						
						// Дополнительные реквизиты регистра расчетов взносы в фонды
						СтрокаДвижений.База			= База;
						СтрокаДвижений.БазаВзноса	= БазаВзноса;
						Результат					= Результат;
						СтрокаДвижений.БазаВычет	= БазаВычет;
						СтрокаДвижений.БазаОтпускные = БазаОтпускные;

						СтрокаДвижений.СтатьяНалоговойДекларации	= ИсходныеДанные.СтатьяНалоговойДекларации;
						СтрокаДвижений.Ставка						= Ставка;
						СтрокаДвижений.СтавкаПолная					= СтавкаПолная;
						СтрокаДвижений.РезультатПолная				= РезультатПолная;
						СтрокаДвижений.КоэффициентСтавки	= КоэффициентСтавки;
						СтрокаДвижений.БазаДоначисление	= БазаДоначисление;
						
						Если СпособРасчета = Перечисления.СпособыРасчетаНачислений.Взносы Тогда
							Результат  = Окр(Результат,2);
						ИначеЕсли ИсползуетсяЕСВ1863 Тогда
							// Законом предусмотрено округнление до 3 знаков
							// но в отчете все равно предусмотрено округление только до 2 знаков.
							Результат  = Окр(Результат,2);
						КонецЕсли; 
						
					КонецЕсли;
					
				Иначе
					// Сторно
					СтрокаДвижений.База = 0;
					СтрокаДвижений.БазаВзноса = 0;
					СтрокаДвижений.БазаВычет = 0;
					СтрокаДвижений.БазаОтпускные = 0;
					СтрокаДвижений.БазаДоначисление = 0;
				КонецЕсли
				
			Иначе
				
				Если НЕ СтрокаДвижений.Сторно Тогда
					
					Если (НЕ ИсходныеДанные.РезультатБаза = NULL) И (НЕ ИсходныеДанные.Предел = NULL) И (НЕ( ИсходныеДанные.РезультатБаза <> 0 И (ИсходныеДанные.Ставка = Неопределено ИЛИ ИсходныеДанные.Ставка = NULL)))Тогда
						
						Коэф = 1;
						Если	СтрокаДвижений.ДатаНачала <> СтрокаДвижений.БазовыйПериодНачало
							ИЛИ	СтрокаДвижений.ДатаОкончания <> СтрокаДвижений.БазовыйПериодКонец Тогда
							Коэф = ?( СтрокаДвижений.ОтработаноДнейВсего = 0, 1, СтрокаДвижений.ОтработаноДней / СтрокаДвижений.ОтработаноДнейВсего);
							
						КонецЕсли;
						
						Предел = ?(ИсходныеДанные.Предел = NULL, 0, ИсходныеДанные.Предел);
						Ставка = ?(ИсходныеДанные.Ставка = NULL, 0, ИсходныеДанные.Ставка);
						Порог = ?(ИсходныеДанные.Порог = NULL, 0, ИсходныеДанные.Порог);
						НижнийПорог = ?(ИсходныеДанные.НижнийПорог = NULL, 0, ИсходныеДанные.НижнийПорог);
						
						БазаЗаМесяц = ?(ИсходныеДанные.РезультатБаза = NULL, 0, ИсходныеДанные.РезультатБаза);
						БазаВзносаЗаМесяц = Мин(Предел, БазаЗаМесяц);
						Если	СтрокаДвижений.ВидРасчета.СпособРасчетаПоШкале = Перечисления.СпособыРасчетаПоШкале.Прогрессивный Тогда 
							БазаЗаМесяц = Макс( Мин(Порог, БазаЗаМесяц)- НижнийПорог, 0);
							БазаВзносаЗаМесяц = Макс( Мин(Порог, БазаВзносаЗаМесяц)- НижнийПорог, 0);
						КонецЕсли;
						
						РезультатЗаМесяц  = БазаВзносаЗаМесяц * Ставка;
						
						БазаВзноса = БазаВзносаЗаМесяц * Коэф;
						База       = БазаЗаМесяц * Коэф;
						Результат  = РезультатЗаМесяц * Коэф;
						
						// Дополнительные реквизиты регистра расчетов взносы в фонды
						СтрокаДвижений.База			= База;
						СтрокаДвижений.БазаВзноса	= БазаВзноса;
						Результат					= Результат;
						
						СтрокаДвижений.СтатьяНалоговойДекларации	= ИсходныеДанные.СтатьяНалоговойДекларации;
						СтрокаДвижений.Ставка						= Ставка;
						
						Если СпособРасчета = Перечисления.СпособыРасчетаНачислений.ВзносыФОТ Тогда
							Результат  = Окр(Результат,6);
						Иначе
							Результат  = Окр(Результат,2);
						КонецЕсли; 
						
					КонецЕсли;
					
				Иначе
					// Сторно
					СтрокаДвижений.База = -СтрокаДвижений.База;
					СтрокаДвижений.БазаВзноса = -СтрокаДвижений.БазаВзноса;
				КонецЕсли
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДвижений.Сторно Тогда
			СтрокаДвижений.Результат = Результат * -1;
		Иначе
			СтрокаДвижений.Результат = Результат;
			Если	СпособРасчета = Перечисления.СпособыРасчетаНачислений.Взносы 
			ИЛИ	СпособРасчета = Перечисления.СпособыРасчетаНачислений.ВзносыФОТ Тогда
				СтрокаДвижений.РезультатДоначисление = РезультатДоначисление;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
//	
КонецПроцедуры

// Рассчитывает коэффициент из переданного набора записей
//
// Параметры: 
//  Начало				- дата		- первый месяц, который нужно учитывать в расчете
//  Конец				- дата		- последний месяц, который нужно учитывать в расчете
//  НеобходимыеДанные	- структура	- структура с необходимыми общими данными для расчета.
//
// Возвращаемое значение:
//  Число, если меньше 0,01, то 0.
//
Функция	РассчитатьЗаписьРегистраРасчета_КоэффициентКомпенсации(Начало, Конец, НеобходимыеДанные)
	
	СтруктураОтбора = Новый Структура(); // // Можно будет сократить на пару секунд время
	СтруктураОтбора.Вставить("Начало", Начало);
	СтруктураОтбора.Вставить("Конец", Конец);
	
	МассивКоэффициентов = НеобходимыеДанные.тбКоэффициентыИнфляции.НайтиСтроки(СтруктураОтбора);
	
	Если МассивКоэффициентов.Количество() = 1 Тогда
		
		// результат уже рассчитан
		Результат = МассивКоэффициентов[0].КоэффициентИнфляции;
		
	Иначе
		
		// рассчитываем первый раз
		Результат = 1;
		
		// проверим не пропущен ли какой-то из месяцев
		ТекМесяц = НачалоМесяца(Начало);
		Пока ТекМесяц <= Конец Цикл
			Если НеобходимыеДанные.тбИндексыИнфляции.Найти(ТекМесяц,"Период") = Неопределено  Тогда
				ТекстСообщения = НСтр("ru='Отсутствует информация об индексе инфляции за: ';uk='Відсутня інформація про індекс інфляції за:'") + Формат(ТекМесяц, "ДФ=ММММ-гггг");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат 0;
			КонецЕсли; 
			ТекМесяц = ДобавитьМесяц(ТекМесяц, 1);
		КонецЦикла;		
		
		Для каждого ТекущаяСтрока Из НеобходимыеДанные.тбИндексыИнфляции Цикл
			
			Если ТекущаяСтрока.Период < Начало
				Или ТекущаяСтрока.Период > Конец Тогда
				
				Продолжить;			
			КонецЕсли; 
			Результат = Результат * ТекущаяСтрока.ИндексИнфляции;
			
		КонецЦикла;  
		
		текСтрока = НеобходимыеДанные.тбКоэффициентыИнфляции.Добавить();
		текСтрока.Начало              = Начало;
		текСтрока.Конец               = Конец;
		текСтрока.КоэффициентИнфляции = Результат;
		
	КонецЕсли;   
	
	Возврат ?( Результат < 1, 0, Результат - 1 ); 
	
КонецФункции

// Рассчитывает коэффициент индексации за заданный период и записывает значение во временный массив
// если во временном массиве уже есть значение коэффициента за период, то повторного расчета не производится
// возвращается значение, рассчитанное ранее. 
//
// Параметры: 
//  Начало				- дата		- первый месяц, который нужно учитывать в расчете
//  Конец				- дата		- последний месяц, который нужно учитывать в расчете
//  НеобходимыеДанные	- структура - структура с необходимыми общими данными для расчета
//  ИмяИндексации		- строка	- "ИндексацияЗарплаты" или "ИндексацияСоциальныхНачислений".
//
// Возвращаемое значение:
//  число, если меньше 0,01, то 0.
//
Функция	РассчитатьЗаписьРегистраРасчета_Индексация_Коэффициент(знач Начало, Конец, НеобходимыеДанные, ИмяИндексации )
	
	Начало = Макс(Добавитьмесяц(НачалоМесяца(Начало),1), НеобходимыеДанные.НачалоРасчетаИндексации);
	Если Конец < Начало Тогда
		Возврат 0;
	КонецЕсли;
	
	
	СтркОтбора = Новый Структура("Начало, Конец");
	СтркОтбора.Начало = Начало;
	СтркОтбора.Конец  = Конец;
	масКоэффициентыИндексации = НеобходимыеДанные.тбКоэффициентыИндексации.НайтиСтроки(СтркОтбора);
	
	Если масКоэффициентыИндексации.Количество() <> 0 
		И масКоэффициентыИндексации[0][ИмяИндексации] <> Неопределено Тогда
		
		// Коэффициент уже рассчитан
		Коэф = масКоэффициентыИндексации[0][ИмяИндексации];
		
	Иначе
		
		// такого коэффициента в таблице еще нет
		Коэф = 1; 
		ТекКоэф = 1;            // умножаем коэф., до достижения порога индексации  
		
		ОкончаниеПериода = ДобавитьМесяц(НачалоМесяца(Конец), -2); 
		
		Для каждого ТекущаяСтрока Из НеобходимыеДанные.тбИндексыИнфляции Цикл
			
			Если ТекущаяСтрока.Период < Начало
				Или ТекущаяСтрока.Период > ОкончаниеПериода Тогда
				
				Продолжить;			
			КонецЕсли; 
			
			ТекКоэф = ТекКоэф * ТекущаяСтрока.ИндексИнфляции;
			
			// Если порог индексации по документу не задан, тогда используем вариант алгоритма по индексу инфляции.
			ПорогИндексации = ?(НеобходимыеДанные.ПорогИндексации = 0, ТекущаяСтрока.ПорогИндексации, НеобходимыеДанные.ПорогИндексации);
			
			Если Окр(ТекКоэф, 3) > ПорогИндексации Тогда
				
				Коэф = Коэф * Окр(ТекКоэф, 3); 
				ТекКоэф = 1;
				
			КонецЕсли;
		КонецЦикла; 
		
		
		Коэф = Окр(Коэф,3) - 1;
		
		// запомним рассчитанный результат
		текСтрока 		 = НеобходимыеДанные.тбКоэффициентыИндексации.Добавить();
		текСтрока.Начало = Начало;
		текСтрока.Конец  = Конец;
		текСтрока[ИмяИндексации] = Коэф;
		
	КонецЕсли; 
	
	Возврат Коэф;
	
КонецФункции // РассчитатьЗаписьРегистраРасчета_Индексация_Коэффициент()

// Рассчитывает сумму базы для индексации зарплаты с учетом прожиточных минимумов различных социальных групп.
//
// Параметры
//  ИсходныеДанные		- выборка	- выборка из результата запроса с исходными данными для расчета
//  НеобходимыеДанные	- структура - структура с необходимыми общими данными для расчета
//  ИмяИндексации		- строка	- "ИндексацияЗарплаты" или "ИндексацияСоциальныхНачислений".
//
// Возвращаемое значение:
//  число.
//
Функция	РассчитатьЗаписьРегистраРасчета_Индексация_База(ИсходныеДанные, НеобходимыеДанные, ИмяИндексации)
	
	Если ИмяИндексации = "ИндексацияЗарплаты" Тогда
		БазаИндексацииСовместителя = ?(ИсходныеДанные.БазаИндексацииСовместителя = NULL ИЛИ ИсходныеДанные.БазаИндексацииСовместителя = Неопределено, 0, ИсходныеДанные.БазаИндексацииСовместителя);
	Иначе
		БазаИндексацииСовместителя = 0;
	КонецЕсли;
	
	
	табПороги = НеобходимыеДанные.тбСоциальныеГруппы.Скопировать();
	табПороги.Колонки.Добавить("База");
	табПороги.Колонки.Добавить("Порог");
	КвоСоцГрупп = табПороги.Количество();
	
	Для Инд = 1  По КвоСоцГрупп Цикл
		
		табПороги[Инд-1].База = ИсходныеДанные["База" + ИмяИндексации + Инд];
		табПороги[Инд-1].Порог = ИсходныеДанные["Порог" + ИмяИндексации + Инд];
		
	КонецЦикла;
	
	// Считаем что совместители всегда работают по статье трудоспособные
	табПороги[2].База = табПороги[2].База + БазаИндексацииСовместителя;
	
	табПороги.Сортировать("Порог");
	
	РезультатБаза = 0;
	РезультатПолнаяБаза = 0;
	Для Инд = 1  По КвоСоцГрупп Цикл
		РезультатБаза = РезультатБаза + Мин( табПороги[Инд-1].База, табПороги[Инд-1].Порог - РезультатБаза);
		РезультатПолнаяБаза = РезультатПолнаяБаза + табПороги[Инд-1].База;
	КонецЦикла;
	
	РезультатБаза = Макс(РезультатБаза - БазаИндексацииСовместителя, 0);
	
	Если (РезультатПолнаяБаза - БазаИндексацииСовместителя) <> ИсходныеДанные["РезультатБаза"+ИмяИндексации]
		И ИсходныеДанные["РезультатБаза"+ИмяИндексации] <> 0 Тогда
		
		РезультатБаза = РезультатБаза * ИсходныеДанные["РезультатБаза"+ИмяИндексации] / (РезультатПолнаяБаза - БазаИндексацииСовместителя);
	КонецЕсли; 
	
	Возврат РезультатБаза;
	
КонецФункции // РассчитатьЗаписьРегистраРасчета_Индексация_База()

// Функция предназначена для получения структуры НеобходимыеДанные с элементами:
//			База
//			НормаВремени
//			ОтработаноВремени
// каждый из которых - булево и означает необходимость получения соотвю исходных данных для 
// расчета записей регистра расчета
// Параметр:
//	МассивСпособовРасчета - массив элементов типа СпособРасчетаСсылка или ПланВидовРасчетаСсылка.
Функция ПолучитьСтруктуруНеобходимыхДанных(МассивСпособовРасчета, НеобходимыеДанные, МассивПоказателей) Экспорт
	
	НеобходимыеДанные = Новый Структура;
	НеобходимыеДанные.Вставить("База", Ложь);
	НеобходимыеДанные.Вставить("НормаВремени", Ложь);
	НеобходимыеДанные.Вставить("НормаВремениЗаМесяц", Ложь);
	НеобходимыеДанные.Вставить("ОтработаноВремени", Ложь);

	НеобходимыеДанные.Вставить("ИсчисленныйНДФЛ", Ложь);
	НеобходимыеДанные.Вставить("ПределПоДокументуОснованию", Ложь); //?
	НеобходимыеДанные.Вставить("НакопленныеДанныеПоДокументуОснованию", Ложь);
	НеобходимыеДанные.Вставить("ПоказателиСхемМотивации", Ложь);
	НеобходимыеДанные.Вставить("Стаж", Ложь);
	НеобходимыеДанные.Вставить("ВремяВКалендарныхДнях", Ложь);  //?
	НеобходимыеДанные.Вставить("КалендарныхДнейВмесяце", Ложь); //?
	
	НеобходимыеДанные.Вставить("КадровыеДанные", Ложь);
	НеобходимыеДанные.Вставить("БазаУдержаний", Ложь);
	НеобходимыеДанные.Вставить("ВыслугаЛет", Ложь);
	НеобходимыеДанные.Вставить("ПараметрыИсполнительногоЛиста", Ложь);
	НеобходимыеДанные.Вставить("Календарные", Ложь);
	
	НеобходимыеДанные.Вставить("ПараметрыПочты", Ложь);
	НеобходимыеДанные.Вставить("ПараметрыИндексацииАлиментов", Ложь);
	НеобходимыеДанные.Вставить("ИсчисленныеВзносы", Ложь);
 	
	НеобходимыеДанные.Вставить("СуммаКомпенсации", Ложь);
	НеобходимыеДанные.Вставить("НеобходимыИндексыИнфляции", Ложь);
	НеобходимыеДанные.Вставить("ИндексацияЗарплаты", Ложь);
	НеобходимыеДанные.Вставить("ИндексацияСоциальныхНачислений", Ложь);
	НеобходимыеДанные.Вставить("БазаИндексацииСовместителя", Ложь);
	
	НеобходимыеДанные.Вставить("ДоплатаДоМЗП", Ложь);
	НеобходимыеДанные.Вставить("МинимальнаяЗарплата", Ложь);

	// для расчета базы необходимо получить Минимальную зарплату для социальных групп
	тбСоциальныеГруппы = Новый ТаблицаЗначений;
	тбСоциальныеГруппы.Колонки.Добавить("СоцГруппа");
	СтрокатбСоциальныеГруппы = тбСоциальныеГруппы.Добавить();
	СтрокатбСоциальныеГруппы.СоцГруппа = Перечисления.СоциальныеГруппыНаселения.ДетиДо6;
	СтрокатбСоциальныеГруппы = тбСоциальныеГруппы.Добавить();
	СтрокатбСоциальныеГруппы.СоцГруппа = Перечисления.СоциальныеГруппыНаселения.ДетиДо18;
	СтрокатбСоциальныеГруппы = тбСоциальныеГруппы.Добавить();
	СтрокатбСоциальныеГруппы.СоцГруппа = Перечисления.СоциальныеГруппыНаселения.Трудоспособные; 
	СтрокатбСоциальныеГруппы = тбСоциальныеГруппы.Добавить();
	СтрокатбСоциальныеГруппы.СоцГруппа = Перечисления.СоциальныеГруппыНаселения.НеТрудоспособные;
	// полученные доп.параметры помещаем в структуру
	НеобходимыеДанные.Вставить("тбСоциальныеГруппы", тбСоциальныеГруппы);
	
	// Данный Если... необходимо пополнять при появлении новых способ расчета или
	// видов расчета, которые не укладываются ни в один из способов.
	Для Каждого СпособРасчета Из МассивСпособовРасчета Цикл
		Если 	
			СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоЧасам ИЛИ 
			СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоМесячнойТарифнойСтавкеПоДням Тогда
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.НормаВремени = Истина;
			НеобходимыеДанные.НормаВремениЗаМесяц = Истина;
			НеобходимыеДанные.КадровыеДанные = Истина; 
			НеобходимыеДанные.Календарные = Истина; 
			
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаЗаВечерниеЧасы Тогда
			НеобходимыеДанные.ОтработаноВремени   = Истина;
			
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаЗаНочныеЧасы Тогда
			НеобходимыеДанные.ОтработаноВремени   = Истина;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.Процентом Тогда
			НеобходимыеДанные.База = Истина;
						
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаНачислений.ИсполнительныйЛистСУчетомОграничения Тогда
			НеобходимыеДанные.БазаУдержаний = Истина;
			
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаНачислений.ИсполнительныйЛистПроцентом
			ИЛИ 	СпособРасчета = Перечисления.СпособыРасчетаНачислений.АлиментыПроцентом Тогда
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.ИсчисленныйНДФЛ = Истина;
			НеобходимыеДанные.ИсчисленныеВзносы = Истина;
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
			НеобходимыеДанные.ПараметрыИсполнительногоЛиста = Истина;	
			
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаНачислений.ИсполнительныйЛистПроцентомДоПредела
			ИЛИ 	СпособРасчета = Перечисления.СпособыРасчетаНачислений.АлиментыПроцентомДоПредела Тогда
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.ИсчисленныйНДФЛ = Истина;
			НеобходимыеДанные.ИсчисленныеВзносы = Истина;
			НеобходимыеДанные.ПределПоДокументуОснованию = Истина;
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
			НеобходимыеДанные.ПараметрыИсполнительногоЛиста = Истина;	
			
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаНачислений.АлиментыФиксСуммой
			ИЛИ 	СпособРасчета = Перечисления.СпособыРасчетаНачислений.ИсполнительныйЛистФиксСуммой Тогда
			
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.БазаУдержаний = Истина;
			НеобходимыеДанные.ПараметрыИсполнительногоЛиста = Истина;	
			
			
		ИначеЕсли 	СпособРасчета = Перечисления.СпособыРасчетаНачислений.ИсполнительныйЛистФиксСуммойДоПредела
			ИЛИ 	СпособРасчета = Перечисления.СпособыРасчетаНачислений.АлиментыФиксСуммойДоПредела Тогда
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.ПределПоДокументуОснованию = Истина;
			НеобходимыеДанные.НакопленныеДанныеПоДокументуОснованию = Истина;
			НеобходимыеДанные.ПараметрыИсполнительногоЛиста = Истина;
			
		ИначеЕсли	СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоСреднемуЗаработкуФСС 
			ИЛИ СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоСреднемуЗаработку 
			ИЛИ СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоСреднемуЗаработкуДляОтпуска Тогда
			
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.НормаВремени = Истина;
			НеобходимыеДанные.Календарные = Истина;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоСреднегоЗаработка Тогда
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.НормаВремени = Истина;
			НеобходимыеДанные.ОтработаноВремени = Истина;
			НеобходимыеДанные.Календарные = Истина;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПочтовыйСбор Тогда
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.ПараметрыПочты =  Истина;
			НеобходимыеДанные.ПараметрыИсполнительногоЛиста = Истина;	
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ИндексацияАлиментов Тогда
			НеобходимыеДанные.База = Истина;
			НеобходимыеДанные.ПараметрыИндексацииАлиментов =  Истина;
			НеобходимыеДанные.ПараметрыИсполнительногоЛиста = Истина;
			НеобходимыеДанные.НеобходимыИндексыИнфляции = Истина;	
			
			тбКоэффициентыИндексации = Новый ТаблицаЗначений;
			тбКоэффициентыИндексации.Колонки.Добавить("Начало");
			тбКоэффициентыИндексации.Колонки.Добавить("Конец");
			тбКоэффициентыИндексации.Колонки.Добавить("ИндексацияАлиментов");
			
			НеобходимыеДанные.Вставить("тбКоэффициентыИндексации", тбКоэффициентыИндексации);
			НеобходимыеДанные.Вставить("НачалоРасчетаИндексации", ДатаНачалаИндексацииАлиментов());
			НеобходимыеДанные.Вставить("ПорогИндексации", 0);
			
		ИначеЕсли 
			СпособРасчета = Перечисления.СпособыРасчетаНачислений.Процентом Тогда //ИнАгро (для расчета удержаний)
			НеобходимыеДанные.База = Истина;
		
		ИначеЕсли   СпособРасчета = Перечисления.СпособыРасчетаНачислений.ИндексацияЗарплаты
			Или СпособРасчета = Перечисления.СпособыРасчетаНачислений.ИндексацияСоциальныхНачислений Тогда
			НеобходимыеДанные.НеобходимыИндексыИнфляции = Истина;	
			НеобходимыеДанные.База = Истина;
			
			Если СпособРасчета = Перечисления.СпособыРасчетаНачислений.ИндексацияЗарплаты Тогда
				НеобходимыеДанные.ИндексацияЗарплаты = Истина;
			ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ИндексацияСоциальныхНачислений Тогда
				НеобходимыеДанные.ИндексацияСоциальныхНачислений = Истина;
			КонецЕсли;
			
			// Для расчета коэффициента индексации необходимо заполнить таблицу с индексами инфляции.
			тбКоэффициентыИндексации = Новый ТаблицаЗначений;
			тбКоэффициентыИндексации.Колонки.Добавить("Начало");
			тбКоэффициентыИндексации.Колонки.Добавить("Конец");
			тбКоэффициентыИндексации.Колонки.Добавить("ИндексацияЗарплаты");
			тбКоэффициентыИндексации.Колонки.Добавить("ИндексацияСоциальныхНачислений");
			
			
			// для расчета базы необходимо получить Минимальную зарплату для социальных групп
			тбСоциальныеГруппы = Новый ТаблицаЗначений;
			тбСоциальныеГруппы.Колонки.Добавить("СоцГруппа");
			
			СтрокатаСоциальныеГруппы = тбСоциальныеГруппы.Добавить();
			СтрокатаСоциальныеГруппы.СоцГруппа = Перечисления.СоциальныеГруппыНаселения.ДетиДо6;
			СтрокатаСоциальныеГруппы = тбСоциальныеГруппы.Добавить();
			СтрокатаСоциальныеГруппы.СоцГруппа = Перечисления.СоциальныеГруппыНаселения.ДетиДо18;
			СтрокатаСоциальныеГруппы = тбСоциальныеГруппы.Добавить();
			СтрокатаСоциальныеГруппы.СоцГруппа = Перечисления.СоциальныеГруппыНаселения.Трудоспособные; 
			СтрокатаСоциальныеГруппы = тбСоциальныеГруппы.Добавить();
			СтрокатаСоциальныеГруппы.СоцГруппа = Перечисления.СоциальныеГруппыНаселения.НеТрудоспособные;
			
			// полученные доп.параметры помещаем в структуру
			НеобходимыеДанные.Вставить("тбКоэффициентыИндексации", тбКоэффициентыИндексации);
			НеобходимыеДанные.Вставить("тбСоциальныеГруппы", тбСоциальныеГруппы);
			НеобходимыеДанные.Вставить("НачалоРасчетаИндексации", '2003.03.01');
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоМЗП Тогда
			НеобходимыеДанные.База = Истина;
	        НеобходимыеДанные.ДоплатаДоМЗП = Истина;
			
		ИначеЕсли СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула Тогда
			НеобходимыеДанные.ПоказателиСхемМотивации = Истина;
			
		ИначеЕсли
			СпособРасчета = Перечисления.СпособыРасчетаНачислений.ФиксированнойСуммой Или
			СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоДоговоруФиксированнойСуммой Тогда
			// ничего...
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Показатель Из МассивПоказателей Цикл
		
		НеобходимыеДанные.ОтработаноВремени = НеобходимыеДанные.ОтработаноВремени 
			Или Показатель = Справочники.ИНАГРО_ПоказателиСхемМотивации.ВремяВДнях 
			Или Показатель = Справочники.ИНАГРО_ПоказателиСхемМотивации.ВремяВЧасах;
			
		НеобходимыеДанные.НормаВремени = НеобходимыеДанные.НормаВремени 
			Или Показатель = Справочники.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВДнях 
			Или Показатель = Справочники.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВЧасах;
			
		НеобходимыеДанные.НормаВремениЗаМесяц = НеобходимыеДанные.НормаВремениЗаМесяц 
			Или Показатель = Справочники.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВДнях 
			Или Показатель = Справочники.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВЧасах;
			
		НеобходимыеДанные.База = НеобходимыеДанные.База 
			Или Показатель = Справочники.ИНАГРО_ПоказателиСхемМотивации.РасчетнаяБаза;
			
		НеобходимыеДанные.ВремяВКалендарныхДнях = НеобходимыеДанные.ВремяВКалендарныхДнях 
			Или Показатель = Справочники.ИНАГРО_ПоказателиСхемМотивации.ВремяВКалендарныхДнях;
		НеобходимыеДанные.МинимальнаяЗарплата = НеобходимыеДанные.МинимальнаяЗарплата 
			Или Показатель = Справочники.ИНАГРО_ПоказателиСхемМотивации.МинимальнаяЗарплата 
			Или Показатель = Справочники.ИНАГРО_ПоказателиСхемМотивации.МинимальнаяЗарплатаЧасовая;
	КонецЦикла;
	
	Возврат НеобходимыеДанные;
КонецФункции

Функция ДатаНачалаИндексацииАлиментов() Экспорт
	
	Возврат Дата(2016,6,1);
	
КонецФункции

 // Функция возвращает дату реформы Единого социального взноса
//
Функция ДатаИзмененияЕСВ1573() Экспорт
	
	Возврат Дата(2015,1,1);
	
КонецФункции

// Функция по периоду определяет необходимость использования Единого социального взноса.
//
Функция ИспользуетсяЕСВ(Период = Неопределено) Экспорт
	
	Если Период = Неопределено Тогда
		Период = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;	
		
	Возврат Период >= ДатаВводаЕСВ();
	
КонецФункции	

// Функция по периоду определяет необходимость использования Налогового кодекса
//
Функция ИспользуетсяНК(Период = Неопределено) Экспорт
	
	Возврат Истина;
	
КонецФункции	

// Функция возвращает дату ввода Единого социального взноса
//
Функция ДатаВводаЕСВ() Экспорт
	
	Возврат Дата(2011,1,1);
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииСвязанныеСРасчетомНДФЛ

// Получает данные для расчета ресурсов записей регистра расчета
//
//	ИмяРегистра - строка, имя регистра расчета
//	КатегорияРасчета - ссылка на значение перечисленич КатегорииРасчетов
//	НеобходимыеДанные - Структура с элементами 
//			База,
//			НормаВремени,
//			ОтработаноВремени,
//			...
//	Регистратор - ссылка на документ
//	Организация - ссылка на организацию по которой проводится Регистратор
//	ПериодРегистрации
//	Перерасчет - булево - признак того, что получаем данные для случая перерасчета
//	Физлица - массив ссылок на физлиц - выбранные для перерасчета физлица, или массив содержащий ссылку
//			  на физлицо по которому производится расчет (расчет по одному работнику из документа).	
//
// Возвращает выборку результата запроса
Функция ПолучитьДанныеДляРасчетаНДФЛ(Регистратор,
									Сотрудники = Неопределено,
									КомментироватьРасчет = Ложь, ФормаКомментариев = НеОпределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТолькоПоДвижениямТекущегоДокумента=ТипЗнч(Регистратор)=Тип("ДокументСсылка.ИНАГРО_ЗарплатаКВыплатеОрганизаций");
	Запрос.УстановитьПараметр("парамСотрудники", Сотрудники);
	Запрос.УстановитьПараметр("парамРегистратор", Регистратор );
	Запрос.УстановитьПараметр("парамОрганизация", Регистратор.Организация );
	Запрос.УстановитьПараметр("парамПериодРегистрации", Регистратор.ПериодРегистрации);
	
	Запрос.УстановитьПараметр("парамВалютаРегламентУчета"	, Константы.ВалютаРегламентированногоУчета.Получить());
	
	Запрос.УстановитьПараметр("парамПриход",				ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("парамТрудоспособные",		Перечисления.СоциальныеГруппыНаселения.Трудоспособные);
	
	СписокЛьгот = Новый СписокЗначений;
	СписокЛьгот.Добавить(Справочники.ВидыЛьготПоНДФЛ.НДФЛ_612а);
	СписокЛьгот.Добавить(Справочники.ВидыЛьготПоНДФЛ.НДФЛ_612б);
	СписокЛьгот.Добавить(Справочники.ВидыЛьготПоНДФЛ.НДФЛ_612в);
	СписокЛьгот.Добавить(Справочники.ВидыЛьготПоНДФЛ.НДФЛ_613е);
	СписокЛьгот.Добавить(Справочники.ВидыЛьготПоНДФЛ.НДФЛ_16912);
	СписокЛьгот.Добавить(Справочники.ВидыЛьготПоНДФЛ.НДФЛ_16912ВР);
	Запрос.УстановитьПараметр("парамРазрешенныеДублиЛьгот",	СписокЛьгот);
	Запрос.УстановитьПараметр("парамБазоваяЛьгота",         Справочники.ВидыЛьготПоНДФЛ.НДФЛ_611);
	
	ИспользуетсяНК = ИспользуетсяНК(Регистратор.ПериодРегистрации);
	Используется3609 = Истина;
	Используется1578 = (ДатаИзмененияНК1578() <=  Регистратор.Дата);
	НоваяСхемаУчетаВС = (УчетНДФЛ.ДатаИзмененияСхемыУчетаВС() <=  Регистратор.ПериодРегистрации);
	
	Запрос.УстановитьПараметр("ИспользуетсяНК", ИспользуетсяНК);
	Запрос.УстановитьПараметр("Используется3609", Используется3609);
	
	// ВОЕННЫЙ СБОР
	Запрос.УстановитьПараметр("ВидДоходаВС", Справочники.ВидыДоходовНДФЛ.ВоенныйСбор);
	Запрос.УстановитьПараметр("ВидСтавкиВС", Перечисления.ВидыСтавокНДФЛ.ВоенныйСбор);
	
	Запрос.УстановитьПараметр("Используется1578", Используется1578);
	Запрос.УстановитьПараметр("НоваяСхемаУчетаВС", НоваяСхемаУчетаВС); 
	
	// Вложенные запросы
	// для получения данных расчета
	// Реализованы как временные таблицы.
	Если Истина Тогда 
		
		// ВТСотрудникиПоНалоговымПериодам
		Если Истина Тогда
			// Определяем Сотрудников с Периодами по которым надо рассчитать НДФЛ
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Основной.Контрагент	КАК Сотрудник, 
			|	Основной.НалоговыйПериод	КАК НалоговыйПериод
			|ПОМЕСТИТЬ ВТСотрудникиПоНалоговымПериодам
			|ИЗ	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК Основной
			|ГДЕ	Основной.Регистратор = &парамРегистратор
			|	И	Основной.Контрагент В (&парамСотрудники)
			|";
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
			ТекстЗапросаВТСотрудникиПоНалоговымПериодам = "ВТСотрудникиПоНалоговымПериодам";
		КонецЕсли;	
		
		// ВТНалоговыеПериоды
		Если Истина Тогда
			// Определяем Сотрудников с Периодами по которым надо рассчитать НДФЛ
			ТекстЗапроса = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Основной.НалоговыйПериод	КАК НалоговыйПериод
			|ПОМЕСТИТЬ ВТНалоговыеПериоды
			|ИЗ	" + ТекстЗапросаВТСотрудникиПоНалоговымПериодам + " КАК Основной
			|";
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
			ТекстЗапросаВТНалоговыеПериоды = "ВТНалоговыеПериоды";
		КонецЕсли;	
		
		// ВТДоход
		Если Истина Тогда
			
			Если ИспользуетсяНК Тогда
				ТекстНП = "ВЫБОР КОГДА Начисления.ВидРасчета.ЭтоБольничные // Больничные
						|ИЛИ (Начисления.ВидРасчета.ЭтоОтпускные  И НЕ Начисления.Сторно) // Отпускные
						|ТОГДА Начисления.ПериодДействия
						|ИНАЧЕ Начисления.ПериодРегистрации
						|КОНЕЦ";
			Иначе
				ТекстНП = "Начисления.ПериодДействия";
			КонецЕсли;
			
			// Получает суммы начисленного дохода Сотрудников в разрезе ПериодовДействия и Видов доходов
			// Суммы по расчетам, которые действуют в текущем периоде.
			//
			ТекстЗапросаВТ = "
			|  	ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|		Основной.Сотрудник    				КАК Сотрудник,
			|		Основной.НалоговыйПериод    		КАК НалоговыйПериод,
			|		Начисления.ПериодРегистрации   		КАК ПериодРегистрации,
			|       Начисления.ВидРасчета.ДоходНДФЛ 	КАК ДоходНДФЛ,
			|		СУММА( Начисления.Результат )		КАК Доход
			|ПОМЕСТИТЬ ВТДоходБезУчетаВС
			|	ИЗ	" + ТекстЗапросаВТСотрудникиПоНалоговымПериодам + " КАК Основной
			|	 
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления КАК Начисления
			|   ПО		Основной.Сотрудник = Начисления.Сотрудник
			|   	И	Основной.НалоговыйПериод = "+ТекстНП+"
			|		И	Начисления.ПериодРегистрации <=	&парамПериодРегистрации
			|		"+?(ТолькоПоДвижениямТекущегоДокумента,"И Начисления.Регистратор=&парамРегистратор","")+"
			|
			|   СГРУППИРОВАТЬ ПО
			|		Основной.Сотрудник,
			|		Основной.НалоговыйПериод,
			|		Начисления.ПериодРегистрации,
			|		Начисления.ВидРасчета.ДоходНДФЛ
			|;
			|
			|   ВЫБРАТЬ
			|		Основной.Сотрудник    				КАК Сотрудник,
			|		Основной.НалоговыйПериод    		КАК НалоговыйПериод,
			|		Основной.ПериодРегистрации    		КАК ПериодРегистрации,
			|       ВЫБОР КОГДА &НоваяСхемаУчетаВС
			|			ТОГДА Основной.ДоходНДФЛ.ОблагаетсяВоеннымСбором2021
			|			ИНАЧЕ &ВидДоходаВС
			|		КОНЕЦ КАК ДоходНДФЛ,
			|		Основной.Доход						КАК Доход
			|ПОМЕСТИТЬ ВТДоходВС
			|	ИЗ	ВТДоходБезУчетаВС КАК Основной
			|   ГДЕ ((Основной.ДоходНДФЛ.ВидСтавкиВоенныйСбор = &ВидСтавкиВС И НЕ &Используется1578)
			|       ИЛИ
			|   	(Основной.ДоходНДФЛ.ВидСтавкиРезидента <> ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.НеОблагается) 
			|   	И Основной.ДоходНДФЛ.ВидСтавкиВоенныйСбор <> ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.НеОблагается) 
			|   	И &Используется1578))
			|;
			|
			|   ВЫБРАТЬ
			|		Основной.Сотрудник    				КАК Сотрудник,
			|		Основной.НалоговыйПериод    		КАК НалоговыйПериод,
			|		Основной.ДоходНДФЛ 					КАК ДоходНДФЛ,
			|		СУММА(Основной.Доход)				КАК Доход
			|ПОМЕСТИТЬ ВТДоход
			|	ИЗ	ВТДоходБезУчетаВС КАК Основной
			|   СГРУППИРОВАТЬ ПО
			|       Основной.Сотрудник,
			|		Основной.НалоговыйПериод,
			|		Основной.ДоходНДФЛ
			|
			|   ОБЪЕДИНИТЬ ВСЕ
			|
			|   ВЫБРАТЬ
			|		Основной.Сотрудник    				КАК Сотрудник,
			|		Основной.ПериодРегистрации    		КАК НалоговыйПериод,
			|		Основной.ДоходНДФЛ 					КАК ДоходНДФЛ,
			|		СУММА(Основной.Доход)				КАК Доход
			|	ИЗ	ВТДоходВС КАК Основной
			|   СГРУППИРОВАТЬ ПО
			|       Основной.Сотрудник,
			|		Основной.ПериодРегистрации,
			|		Основной.ДоходНДФЛ
			|
			|";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТДоход = "ВТДоход";
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТДоход";
		
		// ВТДоходЛьготы
		Если Истина Тогда
			// Получает суммы начисленного дохода Сотрудников в разрезе ПериодовДействия и Видов доходов
			// Суммы по расчетам, которые действуют в текущем периоде.
			//
			ТекстЗапросаВТ = "
			|  	ВЫБРАТЬ
			|		Основной.Сотрудник    				КАК Сотрудник,
			|		Основной.НалоговыйПериод    		КАК НалоговыйПериод,
			|		СУММА( Начисления.Результат )		КАК Доход
			|ПОМЕСТИТЬ ВТДоходЛьготы
			|	ИЗ	" + ТекстЗапросаВТСотрудникиПоНалоговымПериодам + " КАК Основной
			|	 
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления КАК Начисления
			|   ПО		Основной.Сотрудник = Начисления.Сотрудник
			|   	И	Основной.НалоговыйПериод = "+ТекстНП+"
			|		И	Начисления.ПериодРегистрации <=	&парамПериодРегистрации
			|		"+?(ТолькоПоДвижениямТекущегоДокумента,"И Начисления.Регистратор=&парамРегистратор","")+"
			|
			|  ГДЕ Начисления.ВидРасчета.ДоходНДФЛ.УчитыватьВзносы
			|      И Начисления.ВидРасчета.ДоходНДФЛ <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.Код01ГПХ)
			|      И Начисления.ВидРасчета.ДоходНДФЛ <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.Код42)
			|
			|   СГРУППИРОВАТЬ ПО
			|		Основной.Сотрудник,
			|		Основной.НалоговыйПериод
			|";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТДоходЛьготы = "ВТДоходЛьготы";
		КонецЕсли;
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТДоходЛьготы";
		
		// ВТВзносы
		Если Истина Тогда
			
			Если ИспользуетсяНК Тогда
				ТекстНП = "ВЫБОР КОГДА БазаИзНачислений.ВидРасчета.ЭтоБольничные // Больничные
						|ИЛИ (БазаИзНачислений.ВидРасчета.ЭтоОтпускные  И НЕ БазаИзНачислений.Сторно) // Отпускные
						|ТОГДА НАЧАЛОПЕРИОДА(БазаИзНачислений.ПериодДействия, МЕСЯЦ)
						|ИНАЧЕ БазаИзНачислений.ПериодРегистрации
						|КОНЕЦ";
			Иначе
				ТекстНП = "НАЧАЛОПЕРИОДА(БазаИзНачислений.ПериодДействия, МЕСЯЦ)";
			КонецЕсли;
			
			// Получает суммы взносов в фонды социального страхования Сотрудников в разрезе Налогового периода
			// только по доходу 01.
			ТекстЗапросаВТ = "
			|ВЫБРАТЬ
			|	Основной.Сотрудник,
			|	Основной.НалоговыйПериод,
			|	Основной.ДоходНДФЛ,
			|	СУММА(ВЫБОР КОГДА Основной.БазаВзноса <> 0 И Основной.БазаДоходаНДФЛ < Основной.БазаВзноса
			|					ТОГДА Основной.Взнос*Основной.БазаДоходаНДФЛ/Основной.БазаВзноса 
			|				КОГДА Основной.БазаВзноса <> 0 И Основной.БазаДоходаНДФЛ >= Основной.БазаВзноса
			|					ТОГДА Основной.Взнос 
			|				ИНАЧЕ 0 
			|			КОНЕЦ) КАК СуммаВзносов,
			|	0 КАК БазаВзносов,
			|	0 КАК СуммаВзносовБЛ,
			|	0 КАК БазаВзносовБЛ
			|ПОМЕСТИТЬ ВТВзносы
			|ИЗ (
			|	ВЫБРАТЬ
			|		Основной.Сотрудник,
			|		Основной.НалоговыйПериод,
			|		Основной.ДоходНДФЛ,
			|		Основной.ВидРасчета,
			|		Основной.БазаВзноса,
			|		Основной.Взнос,
			|		СУММА(БазаИзНачислений.Результат) КАК БазаДоходаНДФЛ
			|	ИЗ (
			|			  ВЫБРАТЬ
			|				Основной.Сотрудник,
			|				Основной.НалоговыйПериод,
			|				Основной.ДоходНДФЛ,
			|				ВзносыВФонды.ВидРасчета,
			|				СУММА( ВзносыВФонды.База )			КАК БазаВзноса,
			|				СУММА( ВзносыВФонды.Результат )		КАК Взнос
			|			ИЗ	(
			
			|				ВЫБРАТЬ
			|					Основной.Контрагент КАК Сотрудник, 
			|					Основной.НалоговыйПериод,
			|					Основной.ДоходНДФЛ
			|				ИЗ	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК Основной
			|				ГДЕ	Основной.Регистратор = &парамРегистратор
			|					И	Основной.Контрагент В (&парамСотрудники)
			|					И	Основной.ДоходНДФЛ.УчитыватьВзносы
			|					И   (&Используется3609 ИЛИ (Основной.ДоходНДФЛ <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.Код01ГПХ) И Основной.ДоходНДФЛ <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.Код42)))
			|			) КАК Основной
			|
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_ВзносыВФонды КАК ВзносыВФонды
			|			   ПО		Основной.Сотрудник			= ВзносыВФонды.Сотрудник
			|				   И	Основной.НалоговыйПериод	= НАЧАЛОПЕРИОДА( ВзносыВФонды.БазовыйПериодНачало, МЕСЯЦ )
			|					И	ВзносыВФонды.ПериодРегистрации			<=	&парамПериодРегистрации
			|					И	ВзносыВФонды.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.Взносы)
			|		"+?(ТолькоПоДвижениямТекущегоДокумента,"И ВзносыВФонды.Регистратор=&парамРегистратор","")+"
			|
			|			СГРУППИРОВАТЬ ПО
			|				Основной.Сотрудник,
			|				Основной.НалоговыйПериод,
			|				Основной.ДоходНДФЛ,
			|				ВзносыВФонды.ВидРасчета
			|	) КАК Основной
			|	 
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ИНАГРО_Начисления КАК БазаИзНачислений
			|	ПО		Основной.Сотрудник = БазаИзНачислений.Сотрудник  
			|		И	БазаИзНачислений.ВидРасчета.ДоходНДФЛ = Основной.ДоходНДФЛ 
			|		И	"+ТекстНП+" = Основной.НалоговыйПериод
			|		И	БазаИзНачислений.ПериодРегистрации <= &парамПериодРегистрации
			|		" + ?(ТолькоПоДвижениямТекущегоДокумента," И БазаИзНачислений.Регистратор = &парамРегистратор", "") + "
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ИНАГРО_ВзносыВФонды.БазовыеВидыРасчета КАК БазовыеВидыРасчета
			|	ПО		Основной.ВидРасчета = БазовыеВидыРасчета.Ссылка  
			|		И	БазаИзНачислений.ВидРасчета = БазовыеВидыРасчета.ВидРасчета
			|				 
			|	СГРУППИРОВАТЬ ПО
			|		Основной.Сотрудник,
			|		Основной.НалоговыйПериод,
			|		Основной.ДоходНДФЛ,
			|		Основной.ВидРасчета,
			|		Основной.БазаВзноса,
			|		Основной.Взнос
			|) КАК Основной
			|
			|СГРУППИРОВАТЬ ПО
			|	Основной.Сотрудник,
			|	Основной.НалоговыйПериод,
			|	Основной.ДоходНДФЛ
			|";
			Запрос.Текст = ТекстЗапросаВТ;
			Запрос.Выполнить();
			ТекстЗапросаВТВзносы = "ВТВзносы";
		КонецЕсли;	
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТВзносы";
		
		// ВТАктуальныеЛьготыРаботниковПоНалоговымПериодам
		Если Истина Тогда
			// Получает по Сотрудникам в разрезе периодов актуальные льготы
			//
			ТекстЗапроса = "
			|  	ВЫБРАТЬ
			|		ПериодыЛьгот.Сотрудник    			КАК Сотрудник,
			|		ПериодыЛьгот.НалоговыйПериод    	КАК НалоговыйПериод,
			|		ЛьготыРаботниковОрганизаций.Льгота	КАК Льгота
			|ПОМЕСТИТЬ ВТАктуальныеЛьготыРаботниковПоНалоговымПериодам
			|	ИЗ	(
			|  		ВЫБРАТЬ
			|			Основной.Сотрудник    		КАК Сотрудник,
			|			Основной.НалоговыйПериод    КАК НалоговыйПериод,
			|			Льготы.Льгота				КАК Льгота,
			|			МАКСИМУМ( Льготы.Период )	КАК ПериодИзмененияЛьготы
			|		ИЗ	" + ТекстЗапросаВТСотрудникиПоНалоговымПериодам + " КАК Основной
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛьготыПоНДФЛСотрудников КАК Льготы
			|		ПО		Основной.Сотрудник = Льготы.ИНАГРО_Сотрудник
			|   		И	Льготы.Период <= Основной.НалоговыйПериод		
			|   	СГРУППИРОВАТЬ ПО
			|			Основной.Сотрудник,
			|			Основной.НалоговыйПериод,
			|			Льготы.Льгота
			|   ) КАК ПериодыЛьгот
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛьготыПоНДФЛСотрудников КАК ЛьготыРаботниковОрганизаций
			|	ПО		ПериодыЛьгот.Сотрудник = ЛьготыРаботниковОрганизаций.ИНАГРО_Сотрудник
			|   	И	ПериодыЛьгот.Льгота = ЛьготыРаботниковОрганизаций.Льгота
			|   	И	ПериодыЛьгот.ПериодИзмененияЛьготы <= ЛьготыРаботниковОрганизаций.Период
			|
			|   ГДЕ  ЛьготыРаботниковОрганизаций.Актуальность 
			|";
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
			ТекстЗапросаВТАктуальныеЛьготыРаботниковПоНалоговымПериодам = "ВТАктуальныеЛьготыРаботниковПоНалоговымПериодам";
		КонецЕсли;	
		
		// ВТИнвалиды
		Если Истина Тогда
			// Получает по Сотрудникам в разрезе периодов актуальные льготы
			//
			ТекстЗапроса = "
			|  	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		Инвалиды.ФизЛицоИнвалид    			КАК ФизЛицоИнвалид,
			|		Инвалиды.НалоговыйПериод    		КАК НалоговыйПериод
			|ПОМЕСТИТЬ ВТИнвалиды
			|	ИЗ	(
			|  		ВЫБРАТЬ
			|			Основной.НалоговыйПериод    				КАК НалоговыйПериод,
			|			СведенияОбИнвалидности.ФизическоеЛицо    			КАК ФизЛицоИнвалид,
			|			МАКСИМУМ(СведенияОбИнвалидности.Период )	КАК ПериодНачалаИнвалидности
			|		ИЗ	" + ТекстЗапросаВТНалоговыеПериоды + " КАК Основной
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизическихЛиц КАК СведенияОбИнвалидности
			|		ПО		Основной.НалоговыйПериод >= СведенияОбИнвалидности.Период
			|   	СГРУППИРОВАТЬ ПО
			|			Основной.НалоговыйПериод,
			|			СведенияОбИнвалидности.ФизическоеЛицо
			|   ) КАК Инвалиды
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбИнвалидностиФизическихЛиц КАК СведенияОбИнвалидности
			|	ПО		Инвалиды.ФизЛицоИнвалид = СведенияОбИнвалидности.ФизическоеЛицо
			|   	И	Инвалиды.ПериодНачалаИнвалидности = СведенияОбИнвалидности.Период
			|
			|   ГДЕ  СведенияОбИнвалидности.Инвалидность 
			|";
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
			ТекстЗапросаВТИнвалиды = "ВТИнвалиды";
		КонецЕсли;	
		
		// ВТДетиРаботников
		Если Истина Тогда
			// Получаем Сотрудников с Налоговыми периодами и колличество детей на 
			// каждый период в разрезе периодов актуальные льготы.
			//
			ТекстЗапроса = "
			|	ВЫБРАТЬ 
			|		СемьяСДетьми.Сотрудник					КАК Сотрудник,
			|		СемьяСДетьми.НалоговыйПериод			КАК НалоговыйПериод,
			|		СУММА(СемьяСДетьми.КвоДетей)			КАК КвоДетей,
			|		СУММА(СемьяСДетьми.КвоДетейИнвалидов)	КАК КвоДетейИнвалидов
			|ПОМЕСТИТЬ ВТДетиРаботников
			|	ИЗ (
			|		ВЫБРАТЬ
			|			Основной.Сотрудник    				КАК Сотрудник,
			|			Основной.НалоговыйПериод    		КАК НалоговыйПериод,
			|			Семья.НомерСтроки      				КАК НомерСтроки,
			|			Семья.ФизЛицо      					КАК Ребенок,       
			|			ВЫРАЗИТЬ (ВЫБОР 
			|					КОГДА Семья.СтепеньРодства = ЗНАЧЕНИЕ(Справочник.СтепениРодстваФизЛиц.Ребенок) 
			|					И	Семья.Иждивенец 
			|					И 	Семья.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
			|					И	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Семья.ФизЛицо.ДатаРождения, ГОД), ГОД, 18) >= НАЧАЛОПЕРИОДА(Основной.НалоговыйПериод, ГОД)
			|					И	Семья.ФизЛицо.ДатаРождения <= НАЧАЛОПЕРИОДА(Основной.НалоговыйПериод, МЕСЯЦ)
			|					ТОГДА 1
			|                   КОГДА Семья.СтепеньРодства = ЗНАЧЕНИЕ(Справочник.СтепениРодстваФизЛиц.Ребенок) 
			|					И	Семья.Иждивенец 
			|					И 	Семья.ФизЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
            |					И	(Семья.ГодРождения+18) >= ГОД(Основной.НалоговыйПериод) 
			|					И	Семья.ГодРождения <= ГОД(Основной.НалоговыйПериод)
			|					ТОГДА 1
			|					ИНАЧЕ 0 
			|			КОНЕЦ КАК ЧИСЛО(5,2)) 								КАК КвоДетей,
			|			ВЫРАЗИТЬ(ВЫБОР 
			|					КОГДА	Семья.СтепеньРодства = ЗНАЧЕНИЕ(Справочник.СтепениРодстваФизЛиц.Ребенок) 
			|						И	Семья.Иждивенец 
			|						И 	Семья.ФизЛицо <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
			|						И	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(Семья.ФизЛицо.ДатаРождения, ГОД), ГОД, 18) >= НАЧАЛОПЕРИОДА(Основной.НалоговыйПериод, ГОД) 
			|						И	Семья.ФизЛицо.ДатаРождения <= НАЧАЛОПЕРИОДА(Основной.НалоговыйПериод, МЕСЯЦ)
			|						И	Инвалиды.ФизЛицоИнвалид ЕСТЬ НЕ NULL 
			|					ТОГДА 1 
			|           		КОГДА  Семья.СтепеньРодства = ЗНАЧЕНИЕ(Справочник.СтепениРодстваФизЛиц.Ребенок) 
			|						И	Семья.Иждивенец 
			|						И 	Семья.ФизЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
			|						И	(Семья.ГодРождения+18) >= ГОД(Основной.НалоговыйПериод)
			|						И	Семья.ГодРождения <= ГОД(Основной.НалоговыйПериод)
			|						И	Семья.Иждивенец ЕСТЬ НЕ NULL 
			|					ТОГДА 1 
			|					ИНАЧЕ 0 
			|			КОНЕЦ КАК ЧИСЛО(5,2))								КАК КвоДетейИнвалидов
			|
			|		ИЗ " + ТекстЗапросаВТСотрудникиПоНалоговымПериодам + " КАК Основной
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.СоставСемьи КАК Семья 
			|       ПО		Основной.Сотрудник.ФизическоеЛицо = Семья.Ссылка
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТИнвалиды + " КАК Инвалиды
			|		ПО		Семья.ФизЛицо = Инвалиды.ФизЛицоИнвалид
			|			И	Основной.НалоговыйПериод = Инвалиды.НалоговыйПериод
			|	) КАК СемьяСДетьми
			|
			|СГРУППИРОВАТЬ ПО
			|	СемьяСДетьми.Сотрудник,
			|	СемьяСДетьми.НалоговыйПериод
			|";
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
			ТекстЗапросаВТДетиРаботников = "ВТДетиРаботников";
		КонецЕсли;	
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТДетиРаботников";
		
		// ВТЛьготы - Льготы и их парааметы Количество льгот, Количество порогов
		Если Истина Тогда
			// Получает по Сотрудникам в разрезе периодов, актуальные льготыи их параметры
			//
			Если НЕ ИспользуетсяНК Тогда
				ТекстЗапроса = "
				|	ВЫБРАТЬ РАЗЛИЧНЫЕ
				|		Льготы.Сотрудник			КАК Сотрудник,
				|		Льготы.НалоговыйПериод		КАК НалоговыйПериод,
				|		Льготы.КвоЛьгот				КАК КвоЛьгот,
				|		Льготы.КвоПороговЛьгот		КАК КвоПороговЛьгот,
				|		МАКСИМУМ (Льготы.Льгота)	КАК Льгота
				|	 
				|ПОМЕСТИТЬ ВТЛьготы
				|	ИЗ (
				|		ВЫБРАТЬ РАЗЛИЧНЫЕ
				|			СведенияОЛьготах.Сотрудник    			КАК Сотрудник,
				|			СведенияОЛьготах.НалоговыйПериод    	КАК НалоговыйПериод,
				|			СведенияОЛьготах.Льгота					КАК Льгота,
				|	 
				|			ВЫРАЗИТЬ( ВЫБОР КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.Основной) 
				|								ТОГДА СведенияОЛьготах.Льгота.РазмерНДФЛ 
				|							КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.НаКаждогоРебенка) 
				|								ТОГДА СведенияОЛьготах.Льгота.РазмерНДФЛ * ДетиРаботников.КвоДетей 
				|							КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.НаКаждогоРебенкаИнвалида) 
				|								ТОГДА СведенияОЛьготах.Льгота.РазмерНДФЛ * ДетиРаботников.КвоДетейИнвалидов 
				|							КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.НаТроихДетей)
				|										И ДетиРаботников.КвоДетей >= 3
				|								ТОГДА СведенияОЛьготах.Льгота.РазмерНДФЛ * ДетиРаботников.КвоДетей 
				|		 		       		ИНАЧЕ 0
				|	         		   		КОНЕЦ
				|					КАК ЧИСЛО(5,2) )       		КАК КвоЛьгот,
				|	 
				|			ВЫРАЗИТЬ (ВЫБОР КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.Основной) 
				|							ТОГДА 1 
				|						КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.НаКаждогоРебенка) 
				|							ТОГДА ДетиРаботников.КвоДетей 
				|						КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.НаКаждогоРебенкаИнвалида) 
				|							ТОГДА ДетиРаботников.КвоДетейИнвалидов 
				|						КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.НаТроихДетей)
				|										И ДетиРаботников.КвоДетей >= 3
				|							ТОГДА ДетиРаботников.КвоДетей 
				|		        		ИНАЧЕ 1 
				|	            	КОНЕЦ
				|				КАК ЧИСЛО(5,2))    		КАК КвоПороговЛьгот
				|			ИЗ " + ТекстЗапросаВТАктуальныеЛьготыРаботниковПоНалоговымПериодам + " КАК СведенияОЛьготах
				|
				|			ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТДетиРаботников + " КАК ДетиРаботников
				|			ПО		СведенияОЛьготах.Сотрудник = ДетиРаботников.Сотрудник
				|				И   СведенияОЛьготах.НалоговыйПериод = ДетиРаботников.НалоговыйПериод
				|	) КАК Льготы
				|	СГРУППИРОВАТЬ ПО
				|		Льготы.Сотрудник,
				|		Льготы.НалоговыйПериод,
				|		Льготы.КвоЛьгот,
				|		Льготы.КвоПороговЛьгот
				|";
			Иначе
				// Для льгот "на каждого ребенка" количество порогов льгот теперь НЕ увеличивается.
				// Исключение - льгота 169.1.2 у одного родителя
				// Указанная выше норма отменена Законом №3609.
				
				Если Используется3609 Тогда
					КвоПороговЛьгот = "ВЫРАЗИТЬ (ВЫБОР КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.Основной) 
				|						    ИЛИ СведенияОЛьготах.Льгота = ЗНАЧЕНИЕ(Справочник.ВидыЛьготПоНДФЛ.НДФЛ_16912ВР)	
				|							ТОГДА 1 
				|						КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.НаКаждогоРебенка) 
				|							ТОГДА ДетиРаботников.КвоДетей 
				|						КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.НаКаждогоРебенкаИнвалида) 
				|							ТОГДА ДетиРаботников.КвоДетейИнвалидов 
				|						КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.НаТроихДетей)
				|										И ДетиРаботников.КвоДетей >= 3
				|							ТОГДА ДетиРаботников.КвоДетей 
				|		        		ИНАЧЕ 1 
				|	            	КОНЕЦ
				|				КАК ЧИСЛО(5,2))    		КАК КвоПороговЛьгот";
				Иначе
				    КвоПороговЛьгот = "ВЫРАЗИТЬ (ВЫБОР КОГДА СведенияОЛьготах.Льгота = ЗНАЧЕНИЕ(Справочник.ВидыЛьготПоНДФЛ.НДФЛ_16912) 
				|							ТОГДА ДетиРаботников.КвоДетей 
				|		        		ИНАЧЕ 1 
				|	            	КОНЕЦ
				|				КАК ЧИСЛО(5,2))    		КАК КвоПороговЛьгот";

			КонецЕсли;
			
				ТекстЗапроса = "
				|	ВЫБРАТЬ РАЗЛИЧНЫЕ
                |		Льготы.Сотрудник			КАК Сотрудник,
                |		Льготы.НалоговыйПериод		КАК НалоговыйПериод,
                |		Льготы.КвоЛьгот				КАК КвоЛьгот,
                |		Льготы.КвоПороговЛьгот		КАК КвоПороговЛьгот,
                |		МАКСИМУМ (Льготы.Льгота)	КАК Льгота
                |	 
                |ПОМЕСТИТЬ ВТЛьготы
                |	ИЗ (
                |		ВЫБРАТЬ РАЗЛИЧНЫЕ
                |			СведенияОЛьготах.Сотрудник    			КАК Сотрудник,
                |			СведенияОЛьготах.НалоговыйПериод    	КАК НалоговыйПериод,
                |			СведенияОЛьготах.Льгота					КАК Льгота,
                |	 
                |			ВЫРАЗИТЬ( ВЫБОР КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.Основной) 
                |								ТОГДА СведенияОЛьготах.Льгота.РазмерНДФЛ 
                |							КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.НаКаждогоРебенка) 
                |								ТОГДА СведенияОЛьготах.Льгота.РазмерНДФЛ * ДетиРаботников.КвоДетей 
                |							КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.НаКаждогоРебенкаИнвалида) 
                |								ТОГДА СведенияОЛьготах.Льгота.РазмерНДФЛ * ДетиРаботников.КвоДетейИнвалидов 
                |							КОГДА СведенияОЛьготах.Льгота.СпособПримененияНДФЛ = ЗНАЧЕНИЕ(Перечисление.СпособыПримененияЛьготРаботников.НаТроихДетей)
                |										И ДетиРаботников.КвоДетей >= 3
                |								ТОГДА СведенияОЛьготах.Льгота.РазмерНДФЛ * ДетиРаботников.КвоДетей 
                |		 		       		ИНАЧЕ 0
                |	         		   		КОНЕЦ
                |					КАК ЧИСЛО(5,2) )       		КАК КвоЛьгот,
                |	 
                |
                |			"+КвоПороговЛьгот+"
                |			ИЗ " + ТекстЗапросаВТАктуальныеЛьготыРаботниковПоНалоговымПериодам + " КАК СведенияОЛьготах
                |
                |			ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТДетиРаботников + " КАК ДетиРаботников
                |			ПО		СведенияОЛьготах.Сотрудник = ДетиРаботников.Сотрудник
                |				И   СведенияОЛьготах.НалоговыйПериод = ДетиРаботников.НалоговыйПериод
                |	) КАК Льготы
                |	СГРУППИРОВАТЬ ПО
				|		Льготы.Сотрудник,
				|		Льготы.НалоговыйПериод,
				|		Льготы.КвоЛьгот,
				|		Льготы.КвоПороговЛьгот
                |";
            КонецЕсли;
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
			ТекстЗапросаВТЛьготы = "ВТЛьготы";
		КонецЕсли;	
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТЛьготы";
		
		// ВТЛьготыРаботников
		Если Истина Тогда
			// 
			//
			ТекстЗапроса = "
            |	ВЫБРАТЬ РАЗЛИЧНЫЕ
            |		Льготы.Сотрудник			КАК Сотрудник,
            |		Льготы.НалоговыйПериод		КАК НалоговыйПериод,
            |		Льготы.КвоЛьгот					КАК КвоЛьгот,
            |		ПараметрыЛьгот.КвоПороговЛьгот	КАК КвоПороговЛьгот,
            |		ПараметрыЛьгот.Льгота			КАК Льгота,
            |		БазоваяЛьгота.КвоЛьгот			КАК БазоваяКвоЛьгот,
            |		БазоваяЛьгота.КвоПороговЛьгот	КАК БазоваяКвоПороговЛьгот,
            |		БазоваяЛьгота.Льгота			КАК БазоваяЛьгота
			|	 
			|ПОМЕСТИТЬ ВТЛьготыРаботников
			|	ИЗ (
			|  		ВЫБРАТЬ
			|			Основной.Сотрудник    			КАК Сотрудник,
			|			Основной.НалоговыйПериод    	КАК НалоговыйПериод,
			|			МАКСИМУМ( Основной.КвоЛьгот )	КАК КвоЛьгот
			|		ИЗ	" + ТекстЗапросаВТЛьготы + " КАК Основной
			|   	СГРУППИРОВАТЬ ПО
			|			Основной.Сотрудник,
			|			Основной.НалоговыйПериод
			|   ) КАК Льготы
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТЛьготы + "  КАК ПараметрыЛьгот
			|	ПО		Льготы.Сотрудник = ПараметрыЛьгот.Сотрудник
			|		И	Льготы.НалоговыйПериод = ПараметрыЛьгот.НалоговыйПериод
			|   	И	Льготы.КвоЛьгот = ПараметрыЛьгот.КвоЛьгот
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТЛьготы + "  КАК БазоваяЛьгота
			|	ПО		Льготы.Сотрудник = БазоваяЛьгота.Сотрудник
			|   	И	Льготы.НалоговыйПериод = БазоваяЛьгота.НалоговыйПериод
			|   	И	БазоваяЛьгота.Льгота = &парамБазоваяЛьгота
			|";
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
			ТекстЗапросаВТЛьготыРаботников = "ВТЛьготыРаботников";
		КонецЕсли;	
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТЛьготыРаботников";
		
		// ВТСтавки
		Если Истина Тогда
			// Получает по Сотрудникам в разрезе периодов актуальные льготы
			//
			ТекстЗапроса = "
			|  	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		АктивныеПериоды.НалоговыйПериод    	КАК НалоговыйПериод,
			|		МинимальнаяОплатаТруда.Размер		КАК МинимальнаяОплатаТруда,
			|		ПрожиточныеМинимумы.Размер			КАК ПрожиточныйМинимум,
			|		АктивныеПериоды.ВидСтавки           КАК ВидСтавкиНДФЛ,           
			|		СтавкиНДФЛ.Ставка                   КАК СтавкаНДФЛ,           
			|		СтавкиНДФЛ.Порог                    КАК ПорогСтавкаНДФЛ,
			|		РазмерыЛьготНДФЛ.Ставка 			КАК РазмерыЛьготНДФЛСтавка,
			|		РазмерыЛьготНДФЛ.Порог       		КАК РазмерыЛьготНДФЛПорог
			|ПОМЕСТИТЬ ВТСтавки
			|	ИЗ	(
			|  		ВЫБРАТЬ
			|			Основной.НалоговыйПериод    				КАК НалоговыйПериод,
			|			СтавкиНДФЛ.ВидСтавки    					КАК ВидСтавки,
			|			МАКСИМУМ( МинимальнаяОплатаТруда.Период )	КАК ПериодМинимальнаяОплатаТруда,
			|			МАКСИМУМ( ПрожиточныеМинимумы.Период )		КАК ПериодПрожиточныеМинимумы,
			|			МАКСИМУМ( СтавкиНДФЛ.Период )				КАК ПериодСтавкиНДФЛ,
			|			МАКСИМУМ( РазмерыЛьготНДФЛ.Период )			КАК ПериодРазмерыЛьготНДФЛ
			|		ИЗ	" + ТекстЗапросаВТНалоговыеПериоды + " КАК Основной
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТруда КАК МинимальнаяОплатаТруда
			|		ПО		НАЧАЛОПЕРИОДА(Основной.НалоговыйПериод, ГОД) >= МинимальнаяОплатаТруда.Период
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожиточныеМинимумы
			|		ПО		НАЧАЛОПЕРИОДА(Основной.НалоговыйПериод, ГОД) >= ПрожиточныеМинимумы.Период
			|		        И ПрожиточныеМинимумы.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.Трудоспособные)
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДФЛ КАК СтавкиНДФЛ
			|		ПО		Основной.НалоговыйПериод >= СтавкиНДФЛ.Период
			|
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыЛьготНДФЛ КАК РазмерыЛьготНДФЛ
			|		ПО		Основной.НалоговыйПериод >= РазмерыЛьготНДФЛ.Период
			|
			|   	СГРУППИРОВАТЬ ПО
			|			Основной.НалоговыйПериод,
			|			СтавкиНДФЛ.ВидСтавки
			|   ) КАК АктивныеПериоды
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТруда КАК МинимальнаяОплатаТруда
			|	ПО		АктивныеПериоды.ПериодМинимальнаяОплатаТруда = МинимальнаяОплатаТруда.Период
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрожиточныеМинимумы КАК ПрожиточныеМинимумы
			|	ПО		АктивныеПериоды.ПериодПрожиточныеМинимумы = ПрожиточныеМинимумы.Период
			|     И ПрожиточныеМинимумы.СоциальнаяГруппа = ЗНАЧЕНИЕ(Перечисление.СоциальныеГруппыНаселения.Трудоспособные)
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДФЛ КАК СтавкиНДФЛ
			|	ПО		АктивныеПериоды.ПериодСтавкиНДФЛ = СтавкиНДФЛ.Период
			|		И	АктивныеПериоды.ВидСтавки = СтавкиНДФЛ.ВидСтавки
			|
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыЛьготНДФЛ КАК РазмерыЛьготНДФЛ
			|	ПО		АктивныеПериоды.ПериодРазмерыЛьготНДФЛ = РазмерыЛьготНДФЛ.Период
			|";
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
			ТекстЗапросаВТСтавки = "ВТСтавки";
		КонецЕсли; 
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТСтавки";
		
		// ВТНалогДо
		Если НЕ ТолькоПоДвижениямТекущегоДокумента Тогда
			// Получает по Сотрудникам ранее начисленные суммц НДФЛ и дохода
			//
			ТекстЗапроса = "
			|		ВЫБРАТЬ 
			|			НДФЛ.Контрагент			КАК Сотрудник, 
			|			НДФЛ.НалоговыйПериод	КАК НалоговыйПериод, 
			|			НДФЛ.ДоходНДФЛ			КАК ДоходНДФЛ, 
			|			СУММА(НДФЛ.Доход)	КАК Доход,
			|			СУММА(НДФЛ.Налог)КАК Налог
			|ПОМЕСТИТЬ ВТНалогДо
			|		ИЗ РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК НДФЛ
			|
			|	ГДЕ	(НДФЛ.Период <= &парамПериодРегистрации ИЛИ НДФЛ.Регистратор ССЫЛКА Документ.ИНАГРО_Сторнирование)
			|		И	НДФЛ.Регистратор <> &парамРегистратор
			|		И	НДФЛ.ВидДвижения = &парамПриход
			|		И	НДФЛ.Организация = &парамОрганизация
			|		И	НДФЛ.Контрагент В (&парамСотрудники)
			|		И	НДФЛ.НалоговыйПериод В (ВЫБРАТЬ РАЗЛИЧНЫЕ Периоды.НалоговыйПериод ИЗ " + ТекстЗапросаВТСотрудникиПоНалоговымПериодам + " КАК Периоды )
			|
			|		СГРУППИРОВАТЬ ПО
			|			НДФЛ.Контрагент, 
			|			НДФЛ.НалоговыйПериод, 
			|			НДФЛ.ДоходНДФЛ 
			|";
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
			ТекстЗапросаВТНалогДо = "ВТНалогДо";
		КонецЕсли; 
		Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТНалогДо";
		
	КонецЕсли;
	
	// Конец формирования виртуальных таблиц
	/////////////////////////////////////////////////////////////////////
	
	Если ИспользуетсяНК Тогда
		ЗапросВсего = 	"ЛЕВОЕ СОЕДИНЕНИЕ
				|   (ВЫБРАТЬ
				|      Начисления.Сотрудник КАК Сотрудник,
				|      Начисления.НалоговыйПериод КАК НалоговыйПериод,
				|      СУММА(Начисления.Доход) КАК Доход
				|    ИЗ "+ТекстЗапросаВТДоход+" КАК Начисления
				|    ГДЕ Начисления.ДоходНДФЛ.ВидСтавкиУвеличенная = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.Увеличенная)
				|    СГРУППИРОВАТЬ ПО
				|      Начисления.Сотрудник,
				|      Начисления.НалоговыйПериод
				|   ) КАК НачисленияВсего
				|ПО		Основной.Контрагент  = НачисленияВсего.Сотрудник
				|	И	Основной.НалоговыйПериод  = НачисленияВсего.НалоговыйПериод
				|ЛЕВОЕ СОЕДИНЕНИЕ
				|   (ВЫБРАТЬ
				|      Взносы.Сотрудник КАК Сотрудник,
				|      Взносы.НалоговыйПериод КАК НалоговыйПериод,
				|      СУММА(Взносы.СуммаВзносов) КАК СуммаВзносов
				|    ИЗ ВТВзносы КАК Взносы
				|    СГРУППИРОВАТЬ ПО
				|      Взносы.Сотрудник,
				|      Взносы.НалоговыйПериод
				|   ) КАК ВзносыВсего
				|ПО		Основной.Контрагент  = ВзносыВсего.Сотрудник
				|	И	Основной.НалоговыйПериод  = ВзносыВсего.НалоговыйПериод";
				
		РезультатВсего = "	НачисленияВсего.Доход КАК ДоходПолный,
						 |	ВзносыВсего.СуммаВзносов КАК ВзносыВсего,";		
		
		РезультатВидСтавки = "Основной.УвеличеннаяСтавка КАК ОсновнойВидСтавкиУвеличенная,
							|СтавкиУвеличенная.СтавкаНДФЛ  КАК СтавкаНДФЛУвеличенная,
							|СтавкиУвеличенная.ПорогСтавкаНДФЛ  КАК ПорогСтавкаНДФЛУвеличенная,";
							
		ЗапросВидСтавки = 	"ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТСтавки + " КАК СтавкиУвеличенная
							|ПО		Основной.НалоговыйПериод	= СтавкиУвеличенная.НалоговыйПериод
							|И		Основной.УвеличеннаяСтавка	= СтавкиУвеличенная.ВидСтавкиНДФЛ";
		
	Иначе
		ЗапросВсего = 	"";
		РезультатВсего = "	0 КАК ДоходПолный, 0 КАК ВзносыВсего,";
		РезультатВидСтавки = "0 КАК ОсновнойВидСтавкиУвеличенная,
							|0  КАК СтавкаНДФЛУвеличенная,
							|0  КАК ПорогСтавкаНДФЛУвеличенная,";
		ЗапросВидСтавки = 	"";
		
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ИспользуетсяНК				КАК ИспользуетсяНК,
	|	ЛОЖЬ КАК ОтражатьВУпрУчете, 
	|	Основной.НомерСтроки				КАК НомерСтроки, 
	|	Основной.Авторасчет					КАК Авторасчет,
	|	Основной.Контрагент					КАК Сотрудник,
	|	Основной.Регистратор				КАК Регистратор,
	|ВЫБОР КОГДА Основной.Регистратор ССЫЛКА Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ	КАК ЗарплатаКВыплатеОрганизаций,
	|	Основной.НалоговыйПериод			КАК НалоговыйПериод,
	|	Основной.ДоходНДФЛ.УчитыватьВзносы КАК УчитыватьВзносы,
	|	Основной.ДоходНДФЛ					КАК ДоходНДФЛ,
	|	                              
	|	"+?(ТолькоПоДвижениямТекущегоДокумента,"0","НалогДо.Доход")+"	КАК ДоходДо,
	|	"+?(ТолькоПоДвижениямТекущегоДокумента,"0","НалогДо.Налог")+"	КАК НалогДо,
	|	                              
	|	Начисления.Доход					КАК Доход,
	|"+РезультатВсего+"
	|	НачисленияЛьготы.Доход				КАК ДоходЛьготы,
	|	Взносы.СуммаВзносов					КАК СуммаВзносов,
	|	Взносы.БазаВзносов					КАК БазаВзносов,
	|	Взносы.СуммаВзносовБЛ				КАК СуммаВзносовБЛ,
	|	Взносы.БазаВзносовБЛ				КАК БазаВзносовБЛ,
	|	                              
	|Основной.НалоговыйПериод КАК ОсновнойНалоговыйПериод, 
	|Основной.ВидСтавки       КАК ОсновнойВидСтавки,
	|Ставки.НалоговыйПериод   КАК СтавкиНалоговыйПериод,
	|Ставки.ВидСтавкиНДФЛ     КАК СтавкиВидСтавкиНДФЛ,
	|	Ставки.МинимальнаяОплатаТруда		КАК МинимальнаяОплатаТруда,
	|	Ставки.ПрожиточныйМинимум			КАК ПрожиточныйМинимум,
	|	Ставки.СтавкаНДФЛ                   КАК СтавкаНДФЛ,           
	|	Ставки.РазмерыЛьготНДФЛСтавка 		КАК РазмерыЛьготНДФЛСтавка,
	|	Ставки.РазмерыЛьготНДФЛПорог       	КАК РазмерыЛьготНДФЛПорог,
	|
	|"+РезультатВидСтавки+"
	|	                                                            
	|	ЛьготыРаботников.Льгота				КАК Льгота,
	|	ЛьготыРаботников.КвоПороговЛьгот    КАК КвоПороговЛьгот,                          
	|	// если доход меньше одного порога и есть базовая льгота то количество льгот складывается
	|   ВЫБОР	КОГДА	НачисленияЛьготы.Доход <= Ставки.РазмерыЛьготНДФЛПорог          
	|                И	НЕ &ПрименятьЛьготуНДФЛБазовуюИДетскуюПоПорогуДетской
	|                И	ЛьготыРаботников.Льгота	В (&парамРазрешенныеДублиЛьгот)
	|				ТОГДА ЛьготыРаботников.КвоЛьгот + ЕСТЬNULL(ЛьготыРаботников.БазоваяКвоЛьгот, 0)
	|   		КОГДА	НачисленияЛьготы.Доход <= ЛьготыРаботников.КвоПороговЛьгот*Ставки.РазмерыЛьготНДФЛПорог          
	|                И	&ПрименятьЛьготуНДФЛБазовуюИДетскуюПоПорогуДетской
	|                И	ЛьготыРаботников.Льгота	В (&парамРазрешенныеДублиЛьгот)
	|				ТОГДА ЛьготыРаботников.КвоЛьгот + ЕСТЬNULL(ЛьготыРаботников.БазоваяКвоЛьгот, 0)
	|			КОГДА	НачисленияЛьготы.Доход <= Ставки.РазмерыЛьготНДФЛПорог*ЕСТЬNULL(ЛьготыРаботников.КвоПороговЛьгот, 0)          
	|				ТОГДА ЛьготыРаботников.КвоЛьгот
	|         ИНАЧЕ 0
	|   КОНЕЦ						        КАК КвоЛьгот,
    |
    |   &НеПрименятьЛьготуНДФЛДляАвансов КАК НеПрименятьЛьготуНДФЛДляАвансов, 
    |   &НеПрименятьЛьготуНДФЛДляБудущихПериодов КАК НеПрименятьЛьготуНДФЛДляБудущихПериодов
    |
    |
    |ИЗ	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК Основной
    |
    |"+?(ТолькоПоДвижениямТекущегоДокумента,"","
    |ЛЕВОЕ СОЕДИНЕНИЕ "+ТекстЗапросаВТНалогДо+" КАК НалогДо 
	| 	ПО		Основной.Контрагент = НалогДо.Сотрудник
	|		И	Основной.ДоходНДФЛ = НалогДо.ДоходНДФЛ
	|		И	Основной.НалоговыйПериод = НалогДо.НалоговыйПериод
	|")+" 
	| 
	| 
	|ЛЕВОЕ СОЕДИНЕНИЕ "+ТекстЗапросаВТДоход+" КАК Начисления
	|ПО		Основной.Контрагент  = Начисления.Сотрудник
	|	И	Основной.НалоговыйПериод  = Начисления.НалоговыйПериод
	|	И	Основной.ДоходНДФЛ  = Начисления.ДоходНДФЛ
	|
	|"+ЗапросВсего+"
	| 
	|ЛЕВОЕ СОЕДИНЕНИЕ "+ТекстЗапросаВТДоходЛьготы+" КАК НачисленияЛьготы
	|ПО		Основной.Контрагент  = НачисленияЛьготы.Сотрудник
	|	И	Основной.НалоговыйПериод  = НачисленияЛьготы.НалоговыйПериод
	|	И	Основной.ДоходНДФЛ.УчитыватьВзносы
	| 
	|ЛЕВОЕ СОЕДИНЕНИЕ "+ТекстЗапросаВТВзносы+" КАК Взносы
	|ПО		Основной.Контрагент  = Взносы.Сотрудник
	|	И	Основной.НалоговыйПериод  = Взносы.НалоговыйПериод
	|	И	Основной.ДоходНДФЛ	= Взносы.ДоходНДФЛ
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТСтавки + " КАК Ставки
	|ПО		Основной.НалоговыйПериод	= Ставки.НалоговыйПериод
	|И		Основной.ВидСтавки	= Ставки.ВидСтавкиНДФЛ
	|
	|"+ЗапросВидСтавки+"
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТЛьготыРаботников + " КАК ЛьготыРаботников
	|ПО		Основной.Контрагент			= ЛьготыРаботников.Сотрудник
	|	И	Основной.НалоговыйПериод	= ЛьготыРаботников.НалоговыйПериод
	|	И	Основной.ДоходНДФЛ.УчитыватьВзносы
	|	И   Основной.ДоходНДФЛ <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.Код01ГПХ)
	|	И   Основной.ДоходНДФЛ <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.Код42)
	|
	|ГДЕ Основной.Регистратор = &парамРегистратор
	|	И	Основной.Контрагент В (&парамСотрудники)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Основной.НомерСтроки
	|";
	
	Запрос.Текст = ТекстЗапроса; 
	//
	Запрос.УстановитьПараметр("НеПрименятьЛьготуНДФЛДляАвансов", Константы.ИНАГРО_НеПрименятьЛьготуНДФЛДляАвансов.Получить());
	Запрос.УстановитьПараметр("НеПрименятьЛьготуНДФЛДляБудущихПериодов", Константы.ИНАГРО_НеПрименятьЛьготуНДФЛДляБудущихПериодов.Получить());
	Запрос.УстановитьПараметр("ПрименятьЛьготуНДФЛБазовуюИДетскуюПоПорогуДетской", Константы.ИНАГРО_ПрименятьЛьготуНДФЛБазовуюИДетскуюПоПорогуДетской.Получить());
	//	
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

// Данная процедура написана компанией ИН-АГРО.
	// 
Процедура РассчитатьЗаписиНабораНДФЛ(ИсходныеДанные,
									НаборЗаписейРегистра,
									ТабличнаяЧастьДокумента,
									МассивИндексыСтрокТабличнойЧасти = Неопределено,
									КомментироватьРасчет = Ложь, ФормаКомментариев = НеОпределено)
	
	СтруктураПоиска = Новый Структура("НомерСтроки");
	
	Для Каждого СтрокаДвижений Из НаборЗаписейРегистра Цикл
		СтруктураПоиска.НомерСтроки = СтрокаДвижений.НомерСтроки;
		
		Если ИсходныеДанные.НайтиСледующий(СтруктураПоиска) Тогда
			СтрокаТабличнойЧасти = Неопределено;
			Если ТабличнаяЧастьДокумента <> Неопределено Тогда
				Если МассивИндексыСтрокТабличнойЧасти = Неопределено Тогда
					// Расчет всего документа
					СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Получить(НаборЗаписейРегистра.Индекс(СтрокаДвижений));
				Иначе
					// Расчет по сотруднику
					СтрокаТабличнойЧасти = ТабличнаяЧастьДокумента.Получить(МассивИндексыСтрокТабличнойЧасти.Получить(НаборЗаписейРегистра.Индекс(СтрокаДвижений)));
				КонецЕсли;
			КонецЕсли;
			
			// Окончательный расчет
			РассчитатьЗаписьНДФЛ(СтрокаДвижений, ИсходныеДанные, КомментироватьРасчет, ФормаКомментариев);
			
			Если ТабличнаяЧастьДокумента <> НеОпределено Тогда
				
				СтрокаТабличнойЧасти.Доход		= СтрокаДвижений.Доход;
				СтрокаТабличнойЧасти.Налог		= СтрокаДвижений.Налог;
				СтрокаТабличнойЧасти.Льгота		= СтрокаДвижений.Льгота;
				СтрокаТабличнойЧасти.КоличествоЛьгот	= СтрокаДвижений.КоличествоЛьгот;
				СтрокаТабличнойЧасти.ДоходПолный = СтрокаДвижений.ДоходПолный;
				
				Если ИсходныеДанные.ЗарплатаКВыплатеОрганизаций Тогда
					СтрокаТабличнойЧасти.ПериодВзаиморасчетов	= ИсходныеДанные.Регистратор.ПериодРегистрации;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры // РассчитатьЗаписиНабораНДФЛ

// Данная процедура написана компанией ИН-АГРО.
	// 
Процедура РассчитатьЗаписьНДФЛ(СтрокаДвижений, ИсходныеДанные, КомментироватьРасчет, ФормаКомментариев)
	
	Если НЕ СтрокаДвижений.Авторасчет Тогда
		Возврат;
	КонецЕсли;
	


	Если НЕ СтрокаДвижений.Сторно Тогда
	
		// Сначала рассчитаем базу налога
		ДоходДо			= ?( ИсходныеДанные.ДоходДо<> NULL			, ИсходныеДанные.ДоходДо, 0);
		НалогДо			= ?( ИсходныеДанные.НалогДо<> NULL			, ИсходныеДанные.НалогДо, 0);
		Доход			= ?( ИсходныеДанные.Доход<> NULL			, ИсходныеДанные.Доход, 0);
		ДоходЛьготы		= ?( ИсходныеДанные.ДоходЛьготы<> NULL		, ИсходныеДанные.ДоходЛьготы, 0);
		КоэфЛьготы = ?(ИсходныеДанные.УчитыватьВзносы, ?(ДоходЛьготы = 0, 0, Окр(Доход/ДоходЛьготы,5)), 1);
		ДоходПолный		= ?( ИсходныеДанные.ДоходПолный<> NULL			, ИсходныеДанные.ДоходПолный, 0);
		ВзносыВсего		= ?( ИсходныеДанные.ВзносыВсего<> NULL			, ИсходныеДанные.ВзносыВсего, 0);

		СуммаВзносов	= ?( ИсходныеДанные.СуммаВзносов<> NULL	, ИсходныеДанные.СуммаВзносов, 0);
		БазаВзносов		= ?( ИсходныеДанные.БазаВзносов<> NULL	, ИсходныеДанные.БазаВзносов, 0);
		СуммаВзносовБЛ	= ?( ИсходныеДанные.СуммаВзносовБЛ<> NULL	, ИсходныеДанные.СуммаВзносовБЛ, 0);
		БазаВзносовБЛ	= ?( ИсходныеДанные.БазаВзносовБЛ<> NULL	, ИсходныеДанные.БазаВзносовБЛ, 0);
		БазаНалога		= Окр(Доход, 2) - ?(ИсходныеДанные.УчитыватьВзносы, СуммаВзносов+СуммаВзносовБЛ, 0);
		
		МинимальнаяОплатаТруда	= ?( ИсходныеДанные.МинимальнаяОплатаТруда <> NULL	, ИсходныеДанные.МинимальнаяОплатаТруда, 0);
		ПрожиточныйМинимум		= ?( ИсходныеДанные.ПрожиточныйМинимум <> NULL	, ИсходныеДанные.ПрожиточныйМинимум, 0);
		СтавкаНДФЛ				= ?( ИсходныеДанные.СтавкаНДФЛ<> NULL				, ИсходныеДанные.СтавкаНДФЛ, 0);
		СтавкаНДФЛУвеличенная		= ?( ИсходныеДанные.СтавкаНДФЛУвеличенная<> NULL			, ИсходныеДанные.СтавкаНДФЛУвеличенная, 0);
		ПорогСтавкаНДФЛУвеличенная		= ?( ИсходныеДанные.ПорогСтавкаНДФЛУвеличенная<> NULL			, ИсходныеДанные.ПорогСтавкаНДФЛУвеличенная, 0);
		
		КвоПороговЛьгот	= ?( ИсходныеДанные.КвоПороговЛьгот<> NULL		, ИсходныеДанные.КвоПороговЛьгот, 0);
		ПорогЛьготы		= ?( ИсходныеДанные.РазмерыЛьготНДФЛПорог<> NULL	, ИсходныеДанные.РазмерыЛьготНДФЛПорог, 0);
		СтавкаЛьготы	= ?( ИсходныеДанные.РазмерыЛьготНДФЛСтавка<> NULL	, ИсходныеДанные.РазмерыЛьготНДФЛСтавка, 0);
		
		СуммаЛьготы = 0;
		СуммаЛьготыВсего = 0;
		
		Если ИсходныеДанные.ЗарплатаКВыплатеОрганизаций И ИсходныеДанные.НеПрименятьЛьготуНДФЛДляАвансов Тогда
			КвоЛьгот = 0;
			Льгота	= Справочники.ВидыЛьготПоНДФЛ.ПустаяСсылка();
		ИначеЕсли ИсходныеДанные.НеПрименятьЛьготуНДФЛДляБудущихПериодов И (ИсходныеДанные.Регистратор.ПериодРегистрации < ИсходныеДанные.НалоговыйПериод) Тогда	
		    КвоЛьгот = 0;
			Льгота	= Справочники.ВидыЛьготПоНДФЛ.ПустаяСсылка();
		Иначе	
			Если ДоходЛьготы <= КвоПороговЛьгот * ПорогЛьготы Тогда			
				Льгота		= ИсходныеДанные.Льгота;
				
				КвоЛьгот	= ?( ИсходныеДанные.КвоЛьгот <> NULL, ИсходныеДанные.КвоЛьгот, 0);
				Если НЕ ИсходныеДанные.ИспользуетсяНК Тогда
					СуммаЛьготыВсего = МинимальнаяОплатаТруда * СтавкаЛьготы * КоэфЛьготы;
					СуммаЛьготы = Окр(КвоЛьгот * МинимальнаяОплатаТруда * СтавкаЛьготы * КоэфЛьготы,2);
				Иначе
					СуммаЛьготыВсего = ПрожиточныйМинимум * СтавкаЛьготы * КоэфЛьготы;
					СуммаЛьготы = Окр(КвоЛьгот * ПрожиточныйМинимум * СтавкаЛьготы * КоэфЛьготы,2);
				КонецЕсли;
				БазаНалога	= БазаНалога - СуммаЛьготы;
				
			Иначе
				
				КвоЛьгот=0;
				Если Льгота = Неопределено Тогда
					Льгота		= Справочники.ВидыЛьготПоНДФЛ.ПустаяСсылка();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		
		Если НЕ ИсходныеДанные.ИспользуетсяНК Тогда
			
			Налог = Окр(Макс(БазаНалога * СтавкаНДФЛ, 0), 2);
		Иначе 	
		
			Налог = Окр(Макс(БазаНалога * СтавкаНДФЛ, 0), 5);
			
			// Ст. 167.1 Налогового кодекса - если общий доход превышает 10-ти кратный размер минимальной зарплаты,
			// то к сумме превышения применяется ставка 17%.
			// Т.е. к налогу по ставке 15% (уже рассчитано) надо доначислить 2% от суммы превышения.
			// Если в месяце есть несколько видов дохода - учтем по каждому пропорционально.
			Если СтавкаНДФЛУвеличенная <> 0 И СтавкаНДФЛУвеличенная <> СтавкаНДФЛ И ДоходПолный <> 0 И (ДоходПолный <> ВзносыВсего) И Доход <> 0 Тогда
				Превышение = Макс(ДоходПолный - ВзносыВсего - ПорогСтавкаНДФЛУвеличенная,0)*БазаНалога/(ДоходПолный - ВзносыВсего);
				СтавкаПревышение = Макс(СтавкаНДФЛУвеличенная - СтавкаНДФЛ,0);
				НалогПревышение = Окр(Превышение*СтавкаПревышение,5);
				Налог = Окр(Налог + НалогПревышение,2);
			Иначе
				Превышение = 0;
				НалогПревышение = 0;
				Налог = Окр(Налог,2);
			КонецЕсли;
			
		КонецЕсли;	
		
		// в таблицу полученные значения
		СтрокаДвижений.Доход = Доход - ДоходДо;
		СтрокаДвижений.Налог = Налог - НалогДо;
		СтрокаДвижений.Льгота = ?(СуммаЛьготы = 0, "", Льгота);
		СтрокаДвижений.КоличествоЛьгот = КвоЛьгот;
		СтрокаДвижений.ДоходПолный = ДоходПолный;
	
	Иначе
		СтрокаДвижений.Доход = -СтрокаДвижений.Доход;
		СтрокаДвижений.Налог = -СтрокаДвижений.Налог;
		СтрокаДвижений.Льгота = СтрокаДвижений.Льгота;
		СтрокаДвижений.КоличествоЛьгот = -СтрокаДвижений.КоличествоЛьгот;
		СтрокаДвижений.ДоходПолный = ДоходПолный;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьЗаписьНДФЛ

// Функция возвращает дату изменения Налогового кодекса Законом №1578
//
Функция ДатаИзмененияНК1578() Экспорт
	
	Возврат Дата(2015,1,1);
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляРасчетовСредних

// Осуществляет округление числа по правилу четной цифры
//
// Параметры
//  Значение  - Число - округляемое значение.
//
Функция ОкруглитьПоПравилуЧетнойЦифры(Значение)
	
	Если (Значение = Неопределено) Или (Значение = NULL) Тогда
		Возврат 0;
	КонецЕсли;	
	
	ЦелаяЧасть = Цел(Значение);
	ДробнаяЧасть = Значение - ЦелаяЧасть;
	Если (ДробнаяЧасть >= 0.6) Или (ДробнаяЧасть < 0.5) Тогда
		// Стандартно
		Возврат Окр(Значение);
	КонецЕсли;
	ПоловинаЦелой = Цел(ЦелаяЧасть/2);
	Если (ЦелаяЧасть = (ПоловинаЦелой*2)) Тогда
		// Четное - округляем в меньшую
	    Возврат ЦелаяЧасть;
	Иначе
		// Нечетное - округляем в большую
		Возврат ЦелаяЧасть+1;
	КонецЕсли;	
	
КонецФункции	

// Расчитывает среднесписочную численность штатных работников и в эквиваленте полной занятости.
//
// Параметры
//  ВидСредней  - Строка - "ЭПЗ", "ССЧ"
//  ВидПериода  - Строка - "МЕСЯЦ", "КВАРТАЛ", "ГОД", "КВАРТАЛСНАЧАЛАГОДА", "МЕСЯЦСНАЧАЛАГОДА" 
//  Организация  - ссылка - организация
//  ПараметрОтбора  - Строка - "" = по всем, "Ж" = Женщины, "Инв" = Инвалиды, "Пен" = пенсионеры, 
//					"Иностранцы" = иностранцы, "ГПХ" - работающие по договору ГПХ.
//
// Возвращаемое число:
//   таблица значений   - Колонки: Период и Сумма.
//
Функция ПолучитьСреднююЧисленностьЗаМесяц(КонецПериода, ВидСредней, Организация, ПараметрОтбора = "") Экспорт
	
	// таблица с результатми
	тбСредняя = Новый ТаблицаЗначений;
	тбСредняя.Колонки.Добавить("Период");
	тбСредняя.Колонки.Добавить("Средняя");
	тбСредняя.Колонки.Добавить("РасчетВыполнен");
	
	Если ВидСредней = "ССЧ" Тогда
		 ФормаОтчета = Отчеты.ИНАГРО_СреднеучетнаяЧисленностьСотрудников.Создать();
	 ИначеЕсли ВидСредней = "ЭПЗ" Тогда
		 ФормаОтчета = Отчеты.ИНАГРО_СреднеучетнаяЧисленностьСотрудниковЭПЗ.Создать();
	КонецЕсли;

	ФормаОтчета.ЗаполнитьНачальныеНастройки();
	ФормаОтчета.ПостроительОтчета.Отбор.Организация.Значение = Организация;
	ФормаОтчета.ПостроительОтчета.Отбор.Организация.Использование = Истина;
	
	ВидОтчета 	  = "";
	ВидРаботников = "";
	Если  ВРЕГ(ПараметрОтбора) = "Ж" Тогда
		ВидОтчета = "Женщины";	
	ИначеЕсли  ВРЕГ(ПараметрОтбора) = "ЖШТАТ" Тогда
		ВидОтчета	  = "Женщины"; 
		ВидРаботников = "Штатные";	
	ИначеЕсли  ВРЕГ(ПараметрОтбора) = "ШТАТ" Тогда
		ВидРаботников = "Штатные";	
	ИначеЕсли  ВРЕГ(ПараметрОтбора) = "СОВМ" Тогда
		ВидРаботников = "Совместители";	
	ИначеЕсли  ВРЕГ(ПараметрОтбора) = "ГПХ" Тогда
		Если ВидСредней = "ЭПЗ" Тогда
		   ВидОтчета = "ГПХ";
		КонецЕсли;
		ВидРаботников = "ГПХ";	
	ИначеЕсли  ВРЕГ(ПараметрОтбора) = "ПЕНСИОНЕРЫ" Тогда
		ВидОтчета = "Пенсионеры";
	ИначеЕсли  ВидСредней = "ССЧ" И ВРЕГ(ПараметрОтбора) = "ИНОСТРАНЦЫ" Тогда
		ВидОтчета = "Иностранцы";	
	ИначеЕсли  ВРЕГ(ПараметрОтбора) = "ИНВШТАТ" Тогда
		ВидРаботников = "Штатные";
		ВидОтчета = "Инвалиды";	
	ИначеЕсли  ВРЕГ(ПараметрОтбора) = "ИНВ" Тогда
		ВидОтчета = "Инвалиды";
	ИначеЕсли  ВРЕГ(ПараметрОтбора) = "ПЕННЕИНВ" Тогда
		ВидОтчета = "Пенсионеры не инвалиды";	
	ИначеЕсли  ВРЕГ(ПараметрОтбора) = "ИНВНЕПЕН" Тогда
		ВидОтчета = "Инвалиды не пенсионеры";
	ИначеЕсли  ВРЕГ(ПараметрОтбора) = "ИНВПЕН" Тогда
		ВидОтчета = "Инвалиды пенсионеры";
	ИначеЕсли  ВРЕГ(ПараметрОтбора) = "ДОПГАРАНТИИ" Тогда
		ВидОтчета = "С доп. гарантиями трудоустройства";
	ИначеЕсли  ВРЕГ(ПараметрОтбора) = "ДОПГАРАНТИИШТАТ" Тогда
		ВидРаботников = "Штатные";
		ВидОтчета = "С доп. гарантиями трудоустройства";
	ИначеЕсли  ВРЕГ(ПараметрОтбора) = "ДОПГАРАНТИИНЕИНВ" Тогда
		ВидОтчета = "ДопГарантииНеИнв";
	ИначеЕсли  ВРЕГ(ПараметрОтбора) = "ДОПГАРАНТИИНЕИНВШТАТ" Тогда
		ВидРаботников = "Штатные";
		ВидОтчета = "ДопГарантииНеИнв";
	ИначеЕсли  ВРЕГ(ПараметрОтбора) = "ДОПГАРАНТИИ10ЛЕТ" Тогда
		ВидОтчета = "ДопГарантии10Лет";
	ИначеЕсли  ВРЕГ(ПараметрОтбора) = "ДОПГАРАНТИИ10ЛЕТШТАТ" Тогда
		ВидРаботников = "Штатные";
		ВидОтчета = "ДопГарантии10Лет";
	ИначеЕсли ВидСредней = "ССЧ" И ВРЕГ(ПараметрОтбора) = "СЕЛШТАТ" Тогда
		ВидРаботников = "Штатные";
		ВидОтчета = "Сел";
	ИначеЕсли ВидСредней = "ССЧ" И ВРЕГ(ПараметрОтбора) = "ЖСЕЛШТАТ" Тогда
		ВидРаботников = "Штатные";
		ВидОтчета = "ЖСел";
	ИначеЕсли ВидСредней = "ССЧ" И ВРЕГ(ПараметрОтбора) = "ОТ18ДО35" Тогда
		ВидРаботников = "Штатные";
		ВидОтчета = "От18До35";
	ИначеЕсли ВидСредней = "ССЧ" И ВРЕГ(ПараметрОтбора) = "ЖОТ18ДО35" Тогда
		ВидРаботников = "Штатные";
		ВидОтчета = "ЖОт18До35";
	ИначеЕсли ВидСредней = "ССЧ" И ВРЕГ(ПараметрОтбора) = "ОТ18ДО35" Тогда
		ВидРаботников = "Штатные";
		ВидОтчета = "ОТ18ДО35";
	ИначеЕсли ВидСредней = "ССЧ" И ВРЕГ(ПараметрОтбора) = "ЖОТ18ДО35" Тогда
		ВидРаботников = "Штатные";
		ВидОтчета = "ЖОТ18ДО35";
	ИначеЕсли ВидСредней = "ССЧ" И ВРЕГ(ПараметрОтбора) = "ОТ36ДО60" Тогда
		ВидРаботников = "Штатные";
		ВидОтчета = "От36До60";
	ИначеЕсли ВидСредней = "ССЧ" И ВРЕГ(ПараметрОтбора) = "ЖОТ36ДО60" Тогда
		ВидРаботников = "Штатные";
		ВидОтчета = "ЖОт36До60";
	ИначеЕсли ВидСредней = "ССЧ" И ВРЕГ(ПараметрОтбора) = "ОТ60" Тогда
		ВидРаботников = "Штатные";
		ВидОтчета = "От60";
	ИначеЕсли ВидСредней = "ССЧ" И ВРЕГ(ПараметрОтбора) = "ЖОТ60" Тогда
		ВидРаботников = "Штатные";
		ВидОтчета = "ЖОт60";
	ИначеЕсли ВидСредней = "ССЧ" И ВРЕГ(ПараметрОтбора) = "ЖИНВШТАТ" Тогда
		ВидРаботников = "Штатные";
		ВидОтчета = "ЖИнв";
	ИначеЕсли ВидСредней = "ССЧ" И ВРЕГ(ПараметрОтбора) = "ИНВСЕЛШТАТ" Тогда
		ВидРаботников = "Штатные";
		ВидОтчета = "ИнвСел";
	ИначеЕсли ВидСредней = "ССЧ" И ВРЕГ(ПараметрОтбора) = "ЖИНВСЕЛШТАТ" Тогда
		ВидРаботников = "Штатные";
		ВидОтчета = "ЖИнвСел";
	ИначеЕсли ВидСредней = "ССЧ" И ВРЕГ(ПараметрОтбора) = "ИНВШТАТОТ18ДО35" Тогда
		ВидРаботников = "Штатные";
		ВидОтчета = "ИнвОт18До35";
	ИначеЕсли ВидСредней = "ССЧ" И ВРЕГ(ПараметрОтбора) = "ЖИНВШТАТОТ18ДО35" Тогда
		ВидРаботников = "Штатные";
		ВидОтчета = "ЖИнвОт18До35";
	ИначеЕсли ВидСредней = "ССЧ" И ВРЕГ(ПараметрОтбора) = "ИНВШТАТОТ36ДО60" Тогда
		ВидРаботников = "Штатные";
		ВидОтчета = "ИнвОт36До60";
	ИначеЕсли ВидСредней = "ССЧ" И ВРЕГ(ПараметрОтбора) = "ЖИНВШТАТОТ36ДО60" Тогда
		ВидРаботников = "Штатные";
		ВидОтчета = "ЖИнвОт36До60";
	ИначеЕсли ВидСредней = "ССЧ" И ВРЕГ(ПараметрОтбора) = "ИНВШТАТОТ60" Тогда
		ВидРаботников = "Штатные";
		ВидОтчета = "ИнвОт60";
	ИначеЕсли ВидСредней = "ССЧ" И ВРЕГ(ПараметрОтбора) = "ЖИНВШТАТОТ60" Тогда
		ВидРаботников = "Штатные";
		ВидОтчета = "ЖИнвОт60";
	ИначеЕсли ПараметрОтбора <> "" Тогда
		ТекСтрока = тбСредняя.Добавить();
		ТекСтрока.Период = НачалоМесяца(КонецПериода);
		ТекСтрока.Средняя = 0;
		ТекСтрока.РасчетВыполнен = Ложь;
		Возврат тбСредняя;
	КонецЕсли;
	
	ФормаОтчета.НачалоПериода   = НачалоМесяца(КонецПериода);
	ФормаОтчета.КонецПериода	= КонецМесяца(КонецПериода);
	
	ФормаОтчета.ВидОтчета	  = ВидОтчета;
	Если ВидСредней = "ССЧ" Тогда
		ФормаОтчета.ВидРаботников = ВидРаботников;
	КонецЕсли;
	
	ФормаОтчета.СформироватьПараметрыОтчета();
	Выборка = ФормаОтчета.ПостроительОтчета.ПолучитьЗапрос().Выполнить().Выбрать( ОбходРезультатаЗапроса.ПоГруппировкам);
	Выборка.Следующий();
	
	ТекСтрока = тбСредняя.Добавить();
	ТекСтрока.Период = НачалоМесяца(КонецПериода);
	ТекСтрока.Средняя = ОкруглитьПоПравилуЧетнойЦифры(Выборка.Средняя);
	ТекСтрока.РасчетВыполнен = Истина;
	
	Возврат тбСредняя;
	
КонецФункции

#КонецОбласти

#Область ПолучениеСписковСпособовРасчета

Процедура ДобавитьСтрокуВзаиморасчетыСРаботникамиОрганизаций(Выборка, НаборЗаписей, ИНАГРО_СпособВыплаты = Неопределено)
	
	Если ИНАГРО_СпособВыплаты = Неопределено Тогда
		ИНАГРО_СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ПустаяСсылка();
	КонецЕсли;
	
	Если Выборка.СуммаВзаиморасчетов = 0
		И Выборка.СуммаОкругления = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, Выборка);
	Движение.КодОперации = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Выплата;
	Движение.ИНАГРО_СпособВыплаты = ИНАГРО_СпособВыплаты;
	Движение.СпособВыплаты = Выборка.Ведомость.ВидВыплаты;
	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	Движение.СуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов + Выборка.СуммаОкругления;	
		
	Если Выборка.СуммаОкругления > 0 Тогда
		
		Движение = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
		Движение.КодОперации = Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.ПереносКопеекНаСледующийМесяц;
		Если Выборка.Ведомость.ВидВыплаты = ПредопределенноеЗначение("Справочник.ВидыВыплат.АвансПредварительныйРасчет") ИЛИ Выборка.Ведомость.ВидВыплаты = ПредопределенноеЗначение("Справочник.ВидыВыплат.Отпуск") Тогда
			Движение.ПериодВзаиморасчетов = НачалоМесяца(Выборка.ПериодВзаиморасчетов);
		Иначе
			Движение.ПериодВзаиморасчетов = ДобавитьМесяц(НачалоМесяца(Выборка.ПериодВзаиморасчетов),1);
		КонецЕсли;
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.СуммаВзаиморасчетов 	= - Выборка.СуммаОкругления;	
		Движение.СуммаОкругления = 0;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуСведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям(Выборка, НаборЗаписей)
	
	Если Выборка.СуммаВзаиморасчетов = 0
		И Выборка.СуммаОкругления = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движение = НаборЗаписей.Добавить();
	Движение.Ведомость	= Выборка.Ведомость;
	Движение.Сотрудник	= Выборка.Сотрудник;
	Движение.СчетУчета  = Выборка.СчетУчета;
	
КонецПроцедуры

Процедура ДобавитьСтрокуВзаиморасчетыСДепонентамиОрганизаций(Выборка, Период, ВидДвижения, НаборЗаписей)
	
	Если Выборка.СуммаВзаиморасчетов = 0
		И Выборка.СуммаОкругления = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, Выборка);
	Движение.ВидДвижения		= ВидДвижения;
	Движение.ИНАГРО_Сотрудник	= Выборка.Сотрудник;
	Движение.Сумма				= Выборка.СуммаВзаиморасчетов + Выборка.СуммаОкругления;	
	Если ВидДвижения = ВидДвиженияНакопления.Расход Тогда
		Движение.Ведомость		= Выборка.ВедомостьДепонента;
	КонецЕсли;	
	
КонецПроцедуры

// Данная процедура написана компанией ИН-АГРО.
	// 
Процедура ДобавитьСтрокуВыполнитьПроводкуВыплатыЗарплаты(Выборка, ПроводкиБУ, СчетДт, СчетКт, Дата, СчетОрганизации = Неопределено, 
	ОбособленноеПодразделениеОрганизации = Неопределено, СтатьяДвиженияДенежныхСредств = Неопределено ) Экспорт
	
	Если Выборка.СуммаВзаиморасчетов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Проводка = ПроводкиБУ.Добавить();
	
	Проводка.Период      = Дата;
	Проводка.Активность  = ИСТИНА;
	Проводка.Организация = Выборка.Организация;
	Проводка.Содержание  = НСтр("ru='Выплата зарплаты';uk='Виплата зарплати'",Локализация.КодЯзыкаИнформационнойБазы());
	Проводка.Сумма       = Выборка.СуммаВзаиморасчетов;
	
	Проводка.СчетКт      = СчетКт;
	Если ЗначениеЗаполнено(СчетОрганизации) Тогда
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "БанковскиеСчета", СчетОрганизации);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ОбособленноеПодразделениеОрганизации) Тогда
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОбособленныеПодразделенияБезОбразованияЮрЛица" ,ОбособленноеПодразделениеОрганизации);
	КонецЕсли;
	
	Если СтатьяДвиженияДенежныхСредств = Неопределено Тогда
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", Выборка.СтатьяДвиженияДенежныхСредств);
	Иначе
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтатьиДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
	КонецЕсли;
	
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "РаботникиОрганизаций", Выборка.Сотрудник);	
	
	Проводка.СчетДт      = СчетДт;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "РаботникиОрганизаций", Выборка.Сотрудник);
		
КонецПроцедуры	

Функция ПолучитьКраткоеФИО(ФизическоеЛицо,Период,ИнициалыСлева=Ложь) 
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		Возврат "          .  .  ";
	КонецЕсли;
	
	ЗначенияФИО = ПолучитьЗначенияФИО(ФизическоеЛицо,Период);
	Если ЗначенияФИО.Фамилия = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если ИнициалыСлева Тогда
		ИнициалИмя = ?(ЗначенияФИО.Имя <> "", Лев(ЗначенияФИО.Имя,1) + ".", "." );
		ИнициалОтчество = ?(ЗначенияФИО.Отчество <> "", " " + Лев(ЗначенияФИО.Отчество,1) + ".", "." );
		Фамилия = " " + ЗначенияФИО.Фамилия;
		Результат = ИнициалИмя + ИнициалОтчество + Фамилия; 
		Возврат Результат;
	КонецЕсли;
	
	Результат = ЗначенияФИО.Фамилия + ?(ЗначенияФИО.Имя <> "", " " + Лев(ЗначенияФИО.Имя,1) + ".", "." ) 
				+ ?(ЗначенияФИО.Отчество <> "", " " + Лев(ЗначенияФИО.Отчество,1) + ".", "." ); 
				
	Возврат Результат;
	
КонецФункции	

Функция ПолучитьЗначенияФИО(ФизическоеЛицо, Период) 
	
	ФИОСтруктура = Новый Структура("Фамилия, Имя, Отчество");
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.Параметры.Вставить("Период", ТекущаяДата());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо,
	|	ФИОФизическихЛицСрезПоследних.Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Период, ФизическоеЛицо = &ФизическоеЛицо) КАК ФИОФизическихЛицСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ФИОСтруктура,Выборка);
	КонецЕсли;	
	
	Возврат ФИОСтруктура;
	
КонецФункции	

#КонецОбласти

#Область ПроцедурыИФункцииРасчетаСтраховогоСтажа

// Данная процедура написана компанией ИН-АГРО.
	// 
Функция ПересчитатьСтажИзДаты(ДатаНачала, ДатаТекущая, Дней, Месяцев, Лет) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(ДатаТекущая) Тогда
		Возврат НСтр("ru='Нет стажа';uk='Немає стажу'");
	КонецЕсли;
	
	Годы = Год(ДатаНачала)-Год(ДатаТекущая);
	Если Годы < 0 Тогда
		Годы = Годы + 100;
	КонецЕсли;
	
	Разн = Месяц(ДатаНачала) - Месяц(ДатаТекущая) + Годы*12;
	Если День(ДатаНачала) < День(ДатаТекущая) Тогда
		Разн = Разн-1;
	КонецЕсли;
	
	Месяцев = Разн%12;
	Лет = (Разн-Месяцев)/12;
	Дней = (ДатаНачала-ДобавитьМесяц(ДатаТекущая,Разн))/86400;
	
	Если Лет>20 Тогда
		ОстатокЛет=Лет%10;
	Иначе 
		ОстатокЛет = Лет;	
	КонецЕсли;
	
	Если Дней > 20 Тогда
		ОстатокДней=Дней%10;
	Иначе 
		ОстатокДней = Дней;	
	КонецЕсли;
	СтрокаВозврата="";
	
	Если Лет = 0 Тогда
		// Пропускаем	
	ИначеЕсли ОстатокЛет=1 Тогда
		СтрокаВозврата =Строка(Лет) + НСтр("ru=' год ';uk=' рік '");
	ИначеЕсли ОстатокЛет < 5 Тогда	
		СтрокаВозврата = Строка(Лет) + НСтр("ru=' года ';uk=' ріки '");
	Иначе
		СтрокаВозврата = Строка(Лет) + НСтр("ru=' лет ';uk=' років '");
	КонецЕсли;
	
	Если Месяцев=0 Тогда
		// Пропускаем	
	ИначеЕсли Месяцев = 1 Тогда
		СтрокаВозврата = СтрокаВозврата + НСтр("ru='1 месяц ';uk='1 місяць '");
	ИначеЕсли Месяцев < 5 Тогда	
		СтрокаВозврата = СтрокаВозврата+Строка(Месяцев) + НСтр("ru=' месяца ';uk=' місяці '");
	Иначе
		СтрокаВозврата = СтрокаВозврата+Строка(Месяцев) + НСтр("ru=' месяцев ';uk=' місяців '");
	КонецЕсли;
	
	Если Дней=0 Тогда
		// Пропускаем	
	ИначеЕсли ОстатокДней = 1 Тогда
		СтрокаВозврата = СтрокаВозврата + Строка(Дней) + НСтр("ru=' день';uk=' день'");
	ИначеЕсли ОстатокДней < 5 Тогда	
		СтрокаВозврата = СтрокаВозврата + Строка(Дней) + НСтр("ru=' дня';uk=' дні'");
	Иначе
		СтрокаВозврата = СтрокаВозврата + Строка(Дней) + НСтр("ru=' дней';uk=' днів'");
	КонецЕсли;
	
	Если СтрокаВозврата = "" Тогда
		СтрокаВозврата = НСтр("ru='Нет стажа';uk='Немає стажу'");
	КонецЕсли;	
	
	Возврат СтрокаВозврата;
	
КонецФункции

Функция ПолучитьДанныеОПриеме(Сотрудник)
	
	ЭтоПервыйРабочийДень = Ложь;
	ДатаПриема = Дата('00010101');
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамСотрудник",		Сотрудник );
	Запрос.УстановитьПараметр("парамФизЛицо",		Сотрудник.ФизическоеЛицо );
	
	
	ТекстЗапроса = "
	|	ВЫБРАТЬ
	|       ПриемРаботников.ДатаПриема КАК ДатаПриема,
	|		СУММА(ЕСТЬNULL(Графики.ОсновноеЗначение,0)) КАК ОтработаноДнейСНачалаМесяца
	|   ИЗ (
	|		ВЫБРАТЬ 
	|          	МИНИМУМ(Работники.Период) КАК ДатаПриема
	|		ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК Работники
	|   	ГДЕ Работники.Сотрудник = &парамСотрудник
	|       ) КАК ПриемРаботников
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК Работники 
	|   	ПО		Работники.Сотрудник = &парамСотрудник
	|			И	Работники.Период = ПриемРаботников.ДатаПриема
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК Графики
	|   	ПО  	Графики.Дата >= НАЧАЛОПЕРИОДА(Работники.Период, МЕСЯЦ)
	|			И	Графики.Дата < Работники.Период
	|			И	Графики.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
	|			// индивидуальные графики и табели не анализируем, так как нас интерисует только норма времени
	|			И	ВЫБОР КОГДА Работники.ГрафикРаботы.ГрафикРаботыНормыВремени <> ЗНАЧЕНИЕ(Справочник.ИНАГРО_ГрафикиРаботы.ПустаяСсылка)
	|						ТОГДА  Работники.ГрафикРаботы.ГрафикРаботыНормыВремени
	|                     ИНАЧЕ Работники.ГрафикРаботы
	|				КОНЕЦ = Графики.ГрафикРаботы
	|    СГРУППИРОВАТЬ ПО
	|       ПриемРаботников.ДатаПриема
	|";
		
		
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаПриема = Выборка.ДатаПриема;
		ДатаПриемаПервыйРабочийДень = Выборка.ОтработаноДнейСНачалаМесяца = 0;
	КонецЕсли;

	Возврат ДатаПриема;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПолучениеДанныхРасчета

// Функция предназначена для получения оплачиваемого времени по результату запроса при расчете:
//
// Параметры:
//	ИсходныеДанные - строка выборки из результат запроса, по которой вернуть время.
//
// Возвращаемое значение:
//	Число - размер оплачиваемого времени в днях/часах.
//
Функция ОплачиваемоеВремя(ИсходныеДанные, СтрокаДвижений, КомментироватьРасчет, КомментарийВладелец, СообщениеОбОшибке = Ложь, ГрафикиБезРабочегоВремени)
	
	ОплачиваемоеВремя = 0;
	РасшифровкаКомментария = НеОпределено;
	ВажностьКомментария = НеОпределено;
	ОплачиваемоеВремя = ИсходныеДанные.ОтработаноВремени;
	
	Если ИсходныеДанные.ОтработаноВремени = Null Тогда
		СообщениеОбОшибке = Истина;
		Возврат 0;
	КонецЕсли;
	
	Если ИсходныеДанные.ВидУчетаВремени <> Перечисления.ИНАГРО_ВидыУчетаВремени.ПоДням Тогда
		ОплачиваемоеВремя = ИсходныеДанные.ОтработаноЧасов;
	КонецЕсли;
	
	Если ОплачиваемоеВремя = 0 И СтрокаДвижений.НормаДнейЗаМесяц = 0 И СтрокаДвижений.НормаЧасовЗаМесяц = 0 Тогда
		КлючПоиска = Новый Структура("ГрафикРаботы,ВидУчетаВремени");
		КлючПоиска.ВидУчетаВремени = ИсходныеДанные.ВидУчетаВремени;
		КлючПоиска.ГрафикРаботы = СтрокаДвижений.ГрафикРаботы;
		
		КоличествоСтрокГрафика = ГрафикиБезРабочегоВремени.НайтиСтроки(КлючПоиска).Количество();
		СообщениеОбОшибке = Истина;
	КонецЕсли;
	
	Возврат ОплачиваемоеВремя;
	
КонецФункции 

Функция ПолучитьТекстПоказателя(НеобходимыеДанные, ВидПВР, Предопределенный = Ложь, КоличествоПоказателей, КомментироватьРасчет)		
	
	Если 	НеобходимыеДанные.ОтработаноВремени Или 
		НеобходимыеДанные.НормаВремениЗаМесяц Или
		НеобходимыеДанные.Стаж Или
		НеобходимыеДанные.ВремяВКалендарныхДнях Или
		НеобходимыеДанные.База Тогда
		Если ВидПВР = "ИНАГРО_Удержания"  Тогда
			Показатель1Текст = "ВЫБОР "+
			?(НеобходимыеДанные.ВремяВКалендарныхДнях, "
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ВремяВКалендарныхДнях)
			|		ТОГДА РАЗНОСТЬДАТ(ФактическийПериодДействия.БазовыйПериодНачало, ФактическийПериодДействия.БазовыйПериодКонец, ДЕНЬ) + 1  ", "")+"
			|";
		Иначе
			Показатель1Текст = "ВЫБОР "+
			?(НеобходимыеДанные.ВремяВКалендарныхДнях, "                 
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ВремяВКалендарныхДнях)
			|		ТОГДА РАЗНОСТЬДАТ(ФактическийПериодДействия.ПериодДействияНачало, ФактическийПериодДействия.ПериодДействияКонец, ДЕНЬ) + 1 ", "")+"
			|";
			
		КонецЕсли;
		
		Показатель1Текст = Показатель1Текст +
		?(НеобходимыеДанные.ОтработаноВремени, "
		|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ВремяВДнях)  
		|		ТОГДА ВЫБОР	КОГДА ВремяВведенноеВЦеломЗаПериод.УчетПоТабелю
		|						ТОГДА ВремяВведенноеВЦеломЗаПериод.ОтработаноДнейПоТабелю
		|					КОГДА ВремяПоТабелю.УчетПоТабелю
		|						ТОГДА ВремяПоТабелю.ОтработаноДнейПоТабелю
		|					КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
		|						ТОГДА ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
		|					ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
		|			КОНЕЦ 
		|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.ВремяВЧасах)
		|		ТОГДА ВЫБОР	КОГДА ВремяВведенноеВЦеломЗаПериод.УчетПоТабелю
		|						ТОГДА ВремяВведенноеВЦеломЗаПериод.ОтработаноЧасовПоТабелю
		|					КОГДА ВремяПоТабелю.УчетПоТабелю
		|						ТОГДА ВремяПоТабелю.ОтработаноЧасовПоТабелю
		|					КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
		|						ТОГДА ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия
		|					ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия
		|			КОНЕЦ","") + 
		?(НеобходимыеДанные.НормаВремени, "
		|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВДнях)
		|		ТОГДА ВЫБОР КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням) 
		|				ТОГДА ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия  
		|				ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия 
		|			КОНЕЦ
		|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениВЧасах)
		|		ТОГДА ВЫБОР КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням) 
		|				ТОГДА ДанныеГрафика.ДополнительноеЗначениеФактическийПериодДействия  
		|			ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеФактическийПериодДействия    
		|			КОНЕЦ","") +
		?(НеобходимыеДанные.НормаВремениЗаМесяц, "
		|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВДнях)
		|		ТОГДА ВЫБОР КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням) 
		|				ТОГДА ДанныеГрафика.ОсновноеЗначениеПериодДействия 
		|				ИНАЧЕ ДанныеГрафика.ДополнительноеЗначениеПериодДействия 
		|			КОНЕЦ
		|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.НормаВремениЗаМесяцВЧасах)
		|		ТОГДА ВЫБОР КОГДА Основной.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням) 
		|				ТОГДА ДанныеГрафика.ДополнительноеЗначениеПериодДействия 
		|			ИНАЧЕ ДанныеГрафика.ОсновноеЗначениеПериодДействия 
		|		КОНЕЦ", "");
		
		Показатель1Текст = Показатель1Текст +		
		?(НеобходимыеДанные.База, "
		|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.РасчетнаяБаза)
		|		ТОГДА База.РезультатБаза", "");	
			
		Показатель1Текст = Показатель1Текст+
			?(НеобходимыеДанные.МинимальнаяЗарплата, "                 
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.МинимальнаяЗарплата)
			|		ТОГДА МинимальнаяЗарплата.МинЗПМесяц
			|	КОГДА Показатели.Показатель1 = ЗНАЧЕНИЕ(Справочник.ИНАГРО_ПоказателиСхемМотивации.МинимальнаяЗарплатаЧасовая)
			|		ТОГДА МинимальнаяЗарплата.МинЗПЧас", ""); 	
		
		
		Если Предопределенный ИЛИ КоличествоПоказателей = 0 Тогда
			
			Показатель1Текст = Показатель1Текст + "				
			|ИНАЧЕ 0
			|КОНЕЦ ";
		Иначе
			Показатель1Текст = Показатель1Текст + "				
			|ИНАЧЕ ВЫБОР КОГДА Показатели.Показатель1.ТипПоказателя В (&ШкальныеПоказатели)
			|		ТОГДА Показатели.Показатель1
			|	    ИНАЧЕ  Основной.Показатель1 / ВЫБОР КОГДА Показатели.Показатель1.ТипПоказателя В (&ПроцентныеПоказатели) ТОГДА 100 ИНАЧЕ 1 КОНЕЦ
			|КОНЕЦ КОНЕЦ";
			
		КонецЕсли;
	Иначе
		Если Предопределенный ИЛИ КоличествоПоказателей = 0 Тогда
			
			Показатель1Текст = Показатель1Текст + "				
			|ИНАЧЕ 0
			|КОНЕЦ ";
		Иначе
			
			Показатель1Текст = "ВЫБОР 
			|КОГДА Показатели.Показатель1.ТипПоказателя В (&ШкальныеПоказатели)
			|		ТОГДА Показатели.Показатель1
			|	  	ИНАЧЕ  Основной.Показатель1 / ВЫБОР КОГДА Показатели.Показатель1.ТипПоказателя В (&ПроцентныеПоказатели) ТОГДА 100 ИНАЧЕ 1 КОНЕЦ
			|КОНЕЦ";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Показатель1Текст;
	
КонецФункции

// Возвращает список алгоритмов начислений, являющихся почасовыми отклонениями
//
// Параметры
//  нет.
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаНачислений.
//
Функция ПолучитьСписокНачисленийПочасовыхОтклонений() Экспорт

	СписокСпособов = Новый СписокЗначений;
	 
	СписокСпособов.Добавить(Перечисления.ИНАГРО_ВидыВремени.ЧасовоеНеотработанное);
	СписокСпособов.Добавить(Перечисления.ИНАГРО_ВидыВремени.ЧасовоеОтработанноеВПределахНормы);

	Возврат СписокСпособов

КонецФункции // ПолучитьСписокДополнительныхВариантовНачислений()

// Данная процедура написана компанией ИН-АГРО.
	// 
Функция ПолучитьДанныеДляРасчетаСторноВзносовВФонды(Регистратор, ЭтоВзносы , Сотрудники = НеОпределено, КомментироватьРасчет = Ложь, ФормаКомментариев = НеОпределено)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("парамРегистратор",		Регистратор);
	Запрос.УстановитьПараметр("парамОрганизация",		Регистратор.Организация );
	Запрос.УстановитьПараметр("парамПериодРегистрации",	Регистратор.ПериодРегистрации );
	Запрос.УстановитьПараметр("парамСотрудники",		Сотрудники);
	Запрос.УстановитьПараметр("парамСпособРасчета", ?(ЭтоВзносы, Перечисления.СпособыРасчетаНачислений.Взносы, Перечисления.СпособыРасчетаНачислений.ВзносыФОТ));
	
	//	ВТВзносыРегистратора
	Если Истина Тогда
		//	Описание:
		// 		Сотрудники по которым есть зарегистрированные записи по начислениям в периодеРегистрации 
		// 		сгруппированные по периодам действия.
		//
		ТекстЗапроса = "
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Основной.НомерСтрокиТЧ				КАК НомерСтрокиТЧ, 
		|		Основной.НомерСтроки				КАК НомерСтроки, 
		|		Основной.Сотрудник					КАК Сотрудник, 
		|		Основной.Налог						КАК Налог, 
		|		Основной.НомерПорога        		КАК НомерПорога, 
		|		Основной.БазовыйПериодНачало		КАК БазовыйПериодНачало, 
		|		Основной.ВидРасчета				 	КАК ВидРасчета, 
		|		Основной.Предел                   	КАК Предел, 
		|		Основной.Ставка                   	КАК Ставка, 
		|		Основной.СтатьяНалоговойДекларации  КАК СтатьяНалоговойДекларации, 
		|		Основной.ДатаНачала        			КАК ДатаНачала, 
		|		Основной.ДатаОкончания        		КАК ДатаОкончания 
		|
		|ПОМЕСТИТЬ ВТВзносыРегистратора	
		|
		|	ИЗ РегистрРасчета.ИНАГРО_ВзносыВФонды КАК Основной
		|	ГДЕ		Основной.Регистратор = &парамРегистратор
		|		И	Основной.Сотрудник В (&парамСотрудники)
		|		И	Основной.ВидРасчета.СпособРасчета = &парамСпособРасчета
		|
		|	ИНДЕКСИРОВАТЬ ПО
		|		Сотрудник, Налог, НомерПорога
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТВзносыРегистратора = "ВТВзносыРегистратора";
	КонецЕсли;
	
	//	ВТРаботникиПоПериодамИНалоги
	Если Истина Тогда
		//	Описание:
		// 		Сотрудники по которым есть зарегистрированные записи по начислениям в периодеРегистрации 
		// 		сгруппированные по периодам действия.
		//
		ТекстЗапроса = "
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Основной.ПериодРегистрации		КАК ПериодРегистрации, 
		|		Основной.Организация			КАК Организация, 
		|		Основной.Сотрудник				КАК Сотрудник, 
		|		Основной.Налог					КАК Налог, 
		|		Основной.БазовыйПериодНачало	КАК БазовыйПериодНачало, 
		|		Основной.БазовыйПериодКонец		КАК БазовыйПериодКонец 
		|
		|ПОМЕСТИТЬ ВТРаботникиПоПериодамИНалоги	
		|	ИЗ РегистрРасчета.ИНАГРО_ВзносыВФонды КАК Основной
		|
		|	ГДЕ		Основной.Регистратор = &парамРегистратор
		|		И	Основной.Сотрудник В (&парамСотрудники)
		|		И	Основной.Авторасчет
		|
		|	ИНДЕКСИРОВАТЬ ПО
		|		Сотрудник,
		|		Налог,
		|		БазовыйПериодНачало
		|";
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		ТекстЗапросаВТРаботникиПоПериодамИНалоги = "ВТРаботникиПоПериодамИНалоги";
	КонецЕсли;
	
	
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|	ИСТИНА			 	  			КАК Сторно, 
	|	ИСТИНА							КАК Авторасчет, 
	|	Основной.ПериодРегистрации  	КАК ПериодРегистрации, 
	|	Основной.Организация  			КАК Организация, 
	|	Основной.Сотрудник 	  			КАК Сотрудник, 
	|	Основной.Налог                  КАК Налог, 
	|	Основной.БазовыйПериодНачало	КАК БазовыйПериодНачало, 
	|	Основной.БазовыйПериодКонец		КАК БазовыйПериодКонец, 
	|
	|	ВзносыДо.ВидРасчета				 			КАК ВидРасчета, 
	|	ВзносыДо.ВидРасчета.Наименование 			КАК ВидРасчетаНаименование, 
	|	ВзносыДо.Предел                   			КАК Предел, 
	|	ВзносыДо.Ставка                   			КАК Ставка, 
	|	ВзносыДо.СтатьяНалоговойДекларации        	КАК СтатьяНалоговойДекларации, 
	|	ВзносыДо.НомерПорога        				КАК НомерПорога, 
	|	ВзносыДо.ДатаНачала        					КАК ДатаНачала, 
	|	ВзносыДо.ДатаОкончания        				КАК ДатаОкончания,
	|
	|	ВзносыРегистратора.НомерСтроки        		КАК НомерСтрокиРегистратора, 
	|	ВзносыРегистратора.НомерСтрокиТЧ        	КАК НомерСтрокиТЧ, 
	|
	|	-ВзносыДо.База			КАК База, 
	|	-ВзносыДо.БазаВзноса	КАК БазаВзноса, 
	|	-ВзносыДо.Результат		КАК Результат 
	| 
	|	ИЗ " + ТекстЗапросаВТРаботникиПоПериодамИНалоги + " КАК Основной
	| 
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ 
	|			ВзносыВФонды.Сотрудник                  КАК Сотрудник, 
	|			ВзносыВФонды.Налог        				КАК Налог, 
	|			ВзносыВФонды.БазовыйПериодНачало		КАК БазовыйПериодНачало, 
	|			ВзносыВФонды.ВидРасчета        			КАК ВидРасчета, 
	|			ВзносыВФонды.Предел        				КАК Предел, 
	|			ВзносыВФонды.Ставка						КАК Ставка, 
	|			ВзносыВФонды.СтатьяНалоговойДекларации	КАК СтатьяНалоговойДекларации, 
	|			ВзносыВФонды.НомерПорога        		КАК НомерПорога, 
	|			ВзносыВФонды.ДатаНачала        			КАК ДатаНачала, 
	|			ВзносыВФонды.ДатаОкончания        		КАК ДатаОкончания, 
	|			СУММА(ВзносыВФонды.База)        КАК База, 
	|			СУММА(ВзносыВФонды.БазаВзноса)	КАК БазаВзноса, 
	|			СУММА(ВзносыВФонды.Результат)	КАК Результат 
	|
	|		ИЗ РегистрРасчета.ИНАГРО_ВзносыВФонды КАК ВзносыВФонды
	|
	|		ГДЕ ВзносыВФонды.ПериодРегистрации < &парамПериодРегистрации
	|		И	ВзносыВФонды.Регистратор <> &парамРегистратор
	|		И	ВзносыВФонды.Организация = &парамОрганизация
	|		И	ВзносыВФонды.Сотрудник В (&парамСотрудники)
	|		И	НАЧАЛОПЕРИОДА(ВзносыВФонды.БазовыйПериодНачало, МЕСЯЦ) В (ВЫБРАТЬ РАЗЛИЧНЫЕ Периоды.БазовыйПериодНачало ИЗ " + ТекстЗапросаВТРаботникиПоПериодамИНалоги + " КАК Периоды )
	|		И	ВзносыВФонды.ВидРасчета.СпособРасчета = &парамСпособРасчета
	|
	|		СГРУППИРОВАТЬ ПО
	|			ВзносыВФонды.Сотрудник, 
	|			ВзносыВФонды.Налог, 
	|			ВзносыВФонды.БазовыйПериодНачало, 
	|			ВзносыВФонды.ВидРасчета, 
	|			ВзносыВФонды.Предел, 
	|			ВзносыВФонды.Ставка, 
	|			ВзносыВФонды.СтатьяНалоговойДекларации, 
	|			ВзносыВФонды.НомерПорога, 
	|			ВзносыВФонды.ДатаНачала, 
	|			ВзносыВФонды.ДатаОкончания 
	| 
	|	) КАК ВзносыДо 
	| 	ПО		Основной.Сотрудник = ВзносыДо.Сотрудник
	|		И	Основной.Налог = ВзносыДо.Налог
	|		И	Основной.БазовыйПериодНачало = НАЧАЛОПЕРИОДА(ВзносыДо.БазовыйПериодНачало, МЕСЯЦ) 
	| 
	|	ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТВзносыРегистратора + " КАК ВзносыРегистратора
	|   ПО		ВзносыДо.Сотрудник = ВзносыРегистратора.Сотрудник
	|   	И	ВзносыДо.Налог = ВзносыРегистратора.Налог
	|   	И	ВзносыДо.НомерПорога = ВзносыРегистратора.НомерПорога
	|   	И	ВзносыДо.БазовыйПериодНачало = ВзносыРегистратора.БазовыйПериодНачало
	|   	И	ВзносыДо.ВидРасчета = ВзносыРегистратора.ВидРасчета
	|   	И	ВзносыДо.Предел = ВзносыРегистратора.Предел
	|   	И	ВзносыДо.Ставка = ВзносыРегистратора.Ставка
	|   	И	ВзносыДо.СтатьяНалоговойДекларации = ВзносыРегистратора.СтатьяНалоговойДекларации
	|   	И	ВзносыДо.ДатаНачала = ВзносыРегистратора.ДатаНачала
	|   	И	ВзносыДо.ДатаОкончания = ВзносыРегистратора.ДатаОкончания
	|
	| ГДЕ	НЕ ВзносыДо.Результат ЕСТЬ NULL
	|	 И (ВзносыДо.База <> 0 
	|	ИЛИ ВзносыДо.БазаВзноса <> 0 
	|	ИЛИ ВзносыДо.Результат <> 0)
	|"; 

	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция СписокНалогиБезКоэффициента()
	
	МассивНалогиБезКоэффициента = Новый Массив();
	МассивНалогиБезКоэффициента.Добавить(Справочники.Налоги.ЕСВФОТГПХУТОГ);
	МассивНалогиБезКоэффициента.Добавить(Справочники.Налоги.ЕСВФОТИнвалиды);
	МассивНалогиБезКоэффициента.Добавить(Справочники.Налоги.ЕСВФОТИнвалиды50);
	МассивНалогиБезКоэффициента.Добавить(Справочники.Налоги.ЕСВФОТРаботникиУТОГУТОС);
	МассивНалогиБезКоэффициента.Добавить(Справочники.Налоги.ЕСВФОТБольничныеИнвалиды);
	МассивНалогиБезКоэффициента.Добавить(Справочники.Налоги.ЕСВФОТБольничныеИнвалиды50);
	МассивНалогиБезКоэффициента.Добавить(Справочники.Налоги.ЕСВФОТБольничныеУТОГ);
	МассивНалогиБезКоэффициента.Добавить(Справочники.Налоги.ЕСВФОТДекретныеИнвалиды);
	МассивНалогиБезКоэффициента.Добавить(Справочники.Налоги.ЕСВФОТДекретныеИнвалиды50);
	МассивНалогиБезКоэффициента.Добавить(Справочники.Налоги.ЕСВФОТДекретныеУТОГ);

	
	Возврат МассивНалогиБезКоэффициента;
		
КонецФункции

Функция ДатаИзмененияПорогаИндексации() Экспорт
	
	Возврат Дата(2016,1,1);
	
КонецФункции

Функция ДатаВводаИндексацииПоДолжностям() Экспорт
	
	Возврат Дата(2015,12,1);
	
КонецФункции

// Выполняются необходимые действия
//
Функция ДатаВводаФиксированнойИндексации() Экспорт
	
	Возврат Дата(2012,6,1);
	
КонецФункции

// Функция возвращает дату реформы Единого социального взноса
//
Функция ДатаИзмененияЕСВ3688() Экспорт
	
	Возврат Дата(2016,1,1);
	
КонецФункции

// Функция возвращает дату реформы Единого социального взноса
//
Функция ДатаИзмененияЕСВ1863() Экспорт
	
	Возврат Дата(2015,3,1);
	
КонецФункции

// Функция возвращает дату изменения порядка индексации
//
Функция ДатаИзмененияПорядкаИндексации() Экспорт
	
	Возврат Дата(2021,4,1);
	
КонецФункции

Функция ПолучитьПараметыОклада1213(мДатаНачала, Сотрудник, ПериодРасчетаСреднегоНачало = Неопределено, ПериодРасчетаСреднегоКонец = Неопределено, За12Месяцев = Ложь) Экспорт

	КвоМесяцев = ?(За12Месяцев,12,2);
	
	НормаДнейЗаРабочийМесяцПолная = 0;
	НормаЧасовЗаРабочийМесяцПолная = 0;

	НормаДнейЗаРабочийМесяц = 0;
	НормаЧасовЗаРабочийМесяц = 0;
	
	ОкладЗаМесяц = 0; Оклад = 0;
	СуммаРегл = 0;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамСотрудник",	Сотрудник);
	Запрос.УстановитьПараметр("парамПериод",	КонецДня(мДатаНачала));
	Запрос.УстановитьПараметр("парамНеопределено",	Неопределено);
	//Запрос.УстановитьПараметр("парамМассивСпособовРасчетовБезВалюты",	ИНАГРО_ПроведениеРасчетов.ПолучитьСписокСпособовРасчетаНеТребующихУказанияВалюты());
	Начало = ДобавитьМесяц(НачалоМесяца(мДатаНачала),-КвоМесяцев);
	Конец =  ДобавитьМесяц(КонецМесяца(мДатаНачала),-1);
		
	Запрос.УстановитьПараметр("парамНачало",Начало);
	Запрос.УстановитьПараметр("парамКонец",	Конец);
	Запрос.УстановитьПараметр("КвоМесяцев", КвоМесяцев);
	Запрос.УстановитьПараметр("парамВидНачисления", Перечисления.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Индивидуальное);
	
	Если Истина Тогда
		//	Описание:
		// 		График и норма за месяц дней, часов и календарных дней
		//
		ТекстЗапросаВТ = "
	  	|ВЫБРАТЬ 
	  	|	ВсеГрафики.ГрафикРаботы    	КАК ГрафикРаботы,
	  	|	СУММА(ВсеГрафики.НормаДнейЗаРабочийМесяц)	КАК НормаДнейЗаРабочийМесяц,
	  	|	СУММА(ВсеГрафики.НормаЧасовЗаРабочийМесяц)	КАК НормаЧасовЗаРабочийМесяц,
	  	|	СУММА(ВсеГрафики.НормаДней)					КАК НормаДней,
	  	|	СУММА(ВсеГрафики.НормаЧасов)				КАК НормаЧасов,
	  	|	СУММА(ВсеГрафики.КалендарныеДни)			КАК КалендарныеДни
		|ПОМЕСТИТЬ ВТДанныеГрафика	
	  	|	ИЗ ( 
	  	|	ВЫБРАТЬ 
	  	|		Работники.ГрафикРаботы    	КАК ГрафикРаботы,
	  	|		0			КАК НормаДнейЗаРабочийМесяц,
	  	|		0			КАК НормаЧасовЗаРабочийМесяц,
	  	|		СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение)			КАК НормаДней,
	  	|		СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение)	КАК НормаЧасов,
	  	|		СУММА(ГрафикиРаботыПоВидамВремени.ПроизводственныйКалендарьКалендарныеДни)	КАК КалендарныеДни
	  	|	ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&парамПериод, Сотрудник = &парамСотрудник) КАК Работники 
	  	|		   
	  	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	  	|	ПО	ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &парамНачало И &парамКонец
		|		И	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = Работники.ГрафикРаботы
	  	|		И	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
	  	|	СГРУППИРОВАТЬ ПО 
	  	|		Работники.ГрафикРаботы
	  	|		   
	  	|		   
	  	|	ОБЪЕДИНИТЬ ВСЕ	   
	  	|	ВЫБРАТЬ 
	  	|		Работники.ГрафикРаботы    	КАК ГрафикРаботы,
	  	|		СУММА(ГрафикиРаботыЗаРабочийМесяц.ОсновноеЗначение)			КАК НормаДнейЗаРабочийМесяц,
	  	|		СУММА(ГрафикиРаботыЗаРабочийМесяц.ДополнительноеЗначение)	КАК НормаЧасовЗаРабочийМесяц,
	  	|		0	КАК НормаДней,
	  	|		0	КАК НормаЧасов,
	  	|		0	КАК КалендарныеДни
	  	|	ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&парамПериод, Сотрудник = &парамСотрудник) КАК Работники 
	  	|		   
	  	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыЗаРабочийМесяц
	  	|	ПО		ГрафикиРаботыЗаРабочийМесяц.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&парамПериод, МЕСЯЦ) И КОНЕЦПЕРИОДА(&парамПериод, МЕСЯЦ)
	  	|		И	ГрафикиРаботыЗаРабочийМесяц.ГрафикРаботы = Работники.ГрафикРаботы
	  	|		И	ГрафикиРаботыЗаРабочийМесяц.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
	  	|	СГРУППИРОВАТЬ ПО 
	  	|		Работники.ГрафикРаботы
	  	|) КАК ВсеГрафики		   
	  	|СГРУППИРОВАТЬ ПО 
	  	|	ВсеГрафики.ГрафикРаботы
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТДанныеГрафика = "ВТДанныеГрафика";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТДанныеГрафика";
			
	
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|	Начисления.ВидРасчета	КАК ВидРасчета,
	|   
	|	ВЫБОР	КОГДА Начисления.Показатель1 ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ Начисления.Показатель1
	|	КОНЕЦ КАК ОкладТариф,
	|	Графики.ГрафикРаботы	КАК ГрафикРаботы,
	|	Графики.НормаДнейЗаРабочийМесяц		КАК НормаДнейЗаРабочийМесяц,
	|	Графики.НормаЧасовЗаРабочийМесяц	КАК НормаЧасовЗаРабочийМесяц,
	|	Графики.НормаДней		КАК НормаДней,
	|	Графики.НормаЧасов		КАК НормаЧасов,
	|	Графики.КалендарныеДни	КАК КалендарныеДни
	|	
	|ИЗ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&парамПериод, 
	|						Сотрудник = &парамСотрудник 
	|						И ВидНачисления <> &парамВидНачисления  
	|	) КАК Начисления
	| 
	|// даные графика за год 
	|ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТДанныеГрафика + " КАК Графики
	|ПО	ИСТИНА
    | 
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	ПараметрыОклада = Новый Соответствие;
	ПараметрыОклада.Вставить("Оклад",		0);
	ПараметрыОклада.Вставить("НормаДней",	0);
	ПараметрыОклада.Вставить("НормаЧасов",	0);
	ПараметрыОклада.Вставить("КалендарныеДни", 0);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ОкладЗаМесяц = Выборка.ОкладТариф;
		// если оклад ввиде тарифа за день или за час приведем его к сумме за месяц
		Если Выборка.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоДневнойТарифнойСтавке
			ИЛИ Выборка.ВидРасчета.Показатели.Найти(Справочники.ИНАГРО_ПоказателиСхемМотивации.ВремяВДнях) <> Неопределено
				Тогда
			ОкладЗаМесяц = ОкладЗаМесяц*Окр(Выборка.НормаДнейЗаРабочийМесяц,2);
		ИначеЕсли Выборка.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоЧасовойТарифнойСтавке 
			ИЛИ Выборка.ВидРасчета.Показатели.Найти(Справочники.ИНАГРО_ПоказателиСхемМотивации.ВремяВЧасах) <> Неопределено
				Тогда
			ОкладЗаМесяц = ОкладЗаМесяц*Окр(Выборка.НормаЧасовЗаРабочийМесяц);
		КонецЕсли;
				
		МинимальнаяОплатаТруда = РегистрыСведений.МинимальнаяОплатаТруда.СрезПоследних(НачалоМесяца(мДатаНачала));
		Если МинимальнаяОплатаТруда.Количество() > 0 Тогда 
			МинимальныйРазмерОплатыТруда = МинимальнаяОплатаТруда[0].Размер;
		Иначе	
			МинимальныйРазмерОплатыТруда = 0;
		КонецЕсли;	
		
		ПараметрыОклада["НормаДней"] = Выборка.НормаДней;
		ПараметрыОклада["НормаЧасов"] = Выборка.НормаЧасов;
		 
		ПараметрыОклада["КалендарныеДни"] = ?(За12Месяцев,Выборка.КалендарныеДни, 0);
		
		НормаДнейЗаРабочийМесяц = Выборка.НормаДнейЗаРабочийМесяц;
		НормаЧасовЗаРабочийМесяц = Выборка.НормаЧасовЗаРабочийМесяц;
		НормаДнейЗаРабочийМесяцПолная = Выборка.НормаДнейЗаРабочийМесяц; 
		НормаЧасовЗаРабочийМесяцПолная = Выборка.НормаЧасовЗаРабочийМесяц; 
		Если Истина Тогда
			//	Описание:
			// 		График полного рабочего времени и норма за месяц дней, часов
			//
			ТекстЗапросаГрафикПРВ = "
			|ВЫБРАТЬ 
			|	ДанныеГрафика.ГрафикРаботы.ГрафикРаботыНормыВремени КАК ГрафикПолногоРабочегоВремени
			|ИЗ ВТДанныеГрафика КАК ДанныеГрафика
			|";
			Запрос.Текст = ТекстЗапросаГрафикПРВ;
			ВыборкаГрафикПРВ = Запрос.Выполнить().Выбрать();
			Если ВыборкаГрафикПРВ.Следующий() Тогда
				ГрафикПолногоРабочегоВремени = ВыборкаГрафикПРВ.ГрафикПолногоРабочегоВремени;
				Если НЕ ГрафикПолногоРабочегоВремени = Неопределено И НЕ ГрафикПолногоРабочегоВремени = Справочники.ИНАГРО_ГрафикиРаботы.ПустаяСсылка() Тогда
					Запрос.УстановитьПараметр("ГрафикПолногоРабочегоВремени",ГрафикПолногоРабочегоВремени);
					
					ТекстЗапросаГрафикПРВ = "
					|ВЫБРАТЬ 
					|	СУММА(ГрафикиРаботыЗаРабочийМесяц.ОсновноеЗначение)	КАК НормаДнейЗаРабочийМесяцПолная,
					|	СУММА(ГрафикиРаботыЗаРабочийМесяц.ДополнительноеЗначение) КАК НормаЧасовЗаРабочийМесяцПолная
					|ИЗ РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыЗаРабочийМесяц
					|	ГДЕ		ГрафикиРаботыЗаРабочийМесяц.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&парамПериод, МЕСЯЦ) И КОНЕЦПЕРИОДА(&парамПериод, МЕСЯЦ)
					|		И	ГрафикиРаботыЗаРабочийМесяц.ГрафикРаботы = &ГрафикПолногоРабочегоВремени
					|		И	ГрафикиРаботыЗаРабочийМесяц.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
					|"; 
					Запрос.Текст = ТекстЗапросаГрафикПРВ;
					РезультатЗапроса = Запрос.Выполнить();
					ВыборкаГрафикПРВ = Запрос.Выполнить().Выбрать();
					Если ВыборкаГрафикПРВ.Следующий() Тогда
						НормаДнейЗаРабочийМесяцПолная = ВыборкаГрафикПРВ.НормаДнейЗаРабочийМесяцПолная;
						НормаЧасовЗаРабочийМесяцПолная = ВыборкаГрафикПРВ.НормаЧасовЗаРабочийМесяцПолная;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоДневнойТарифнойСтавке И НормаДнейЗаРабочийМесяцПолная > 0 Тогда
			ОкладЗаМесяц = Окр(ОкладЗаМесяц/НормаДнейЗаРабочийМесяцПолная*НормаДнейЗаРабочийМесяц,2);
			МинимальныйРазмерОплатыТруда = Окр(МинимальныйРазмерОплатыТруда/НормаДнейЗаРабочийМесяцПолная*НормаДнейЗаРабочийМесяц,2);
		ИначеЕсли Выборка.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоЧасовойТарифнойСтавке И НормаЧасовЗаРабочийМесяцПолная > 0 Тогда
			ОкладЗаМесяц = Окр(ОкладЗаМесяц/НормаЧасовЗаРабочийМесяцПолная*НормаЧасовЗаРабочийМесяц,2);
			МинимальныйРазмерОплатыТруда = Окр(МинимальныйРазмерОплатыТруда/НормаЧасовЗаРабочийМесяцПолная*НормаЧасовЗаРабочийМесяц,2);
		КонецЕсли;
		
		Оклад = Макс(ОкладЗаМесяц, МинимальныйРазмерОплатыТруда);
		
		ПараметрыОклада["Оклад"] = Окр(Оклад*КвоМесяцев,2);
		
	КонецЕсли;
	
	Возврат ПараметрыОклада;
КонецФункции

// Получает Сумму оклада за месяц и нормы времени и календарные дни
// 		в случае необходимости оклад перерасчитывается в месячный.
//
Функция ПолучитьПараметыОклада( мДатаНачала, Сотрудник, ПериодРасчетаСреднегоНачало= Неопределено, ПериодРасчетаСреднегоКонец = Неопределено, ДляДекретных = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("парамСотрудник",	Сотрудник);
	Запрос.УстановитьПараметр("парамДата",	КонецДня(мДатаНачала));
	Запрос.УстановитьПараметр("парамВалютаРегламентУчета",				Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("парамПериод",	мДатаНачала);
	Запрос.УстановитьПараметр("парамВидНачисления", Перечисления.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Индивидуальное);
	Если ПериодРасчетаСреднегоНачало= Неопределено Тогда
		АнализируемМесяцы = Ложь;
		Запрос.УстановитьПараметр("КвоМесяцев",	12);
		
	Иначе
		Начало = ПериодРасчетаСреднегоНачало;
		Конец = ПериодРасчетаСреднегоКонец;
		Если НачалоМесяца(Начало) = Начало И НачалоДня(КонецМесяца(Конец)) = Конец Тогда
			АнализируемМесяцы = Истина;
			Начало = НачалоМесяца(ПериодРасчетаСреднегоНачало);
			Конец = КонецМесяца(ПериодРасчетаСреднегоКонец);
			КвоМесяцев = (Год(Конец)-Год(Начало))*12+ Месяц(Конец)-Месяц(Начало)+1;
			Запрос.УстановитьПараметр("КвоМесяцев",	КвоМесяцев);
			Запрос.УстановитьПараметр("парамНачало",	Начало);
			Запрос.УстановитьПараметр("парамКонец",	Конец);
		ИначеЕсли Начало = Конец Тогда
			// заболел в первый день работы, анализируем график за предыдущие 6 месяцев
			АнализируемМесяцы = Истина;
			КвоМесяцев = 6;
			Конец = КонецМесяца(ДобавитьМесяц(ПериодРасчетаСреднегоКонец,-1));
			Начало = НачалоМесяца(ДобавитьМесяц(Конец, - КвоМесяцев + 1));
			Запрос.УстановитьПараметр("КвоМесяцев",	КвоМесяцев);
			Запрос.УстановитьПараметр("парамНачало",Начало);
			Запрос.УстановитьПараметр("парамКонец",	Конец);
		Иначе	
			// если не целый период (не целые месяцы) то анализируем год
			АнализируемМесяцы = Ложь;
			Запрос.УстановитьПараметр("КвоМесяцев",	12);
		КонецЕсли;
		
	КонецЕсли;
	
	//	ВТДанныеГрафика
	Если Истина Тогда
		//	Описание:
		// 		График и норма за месяц дней, часов и календарных дней.
		//		
		ТекстЗапросаВТ = "
	  	|	ВЫБРАТЬ 
	  	|		Работники.ГрафикРаботы    	КАК ГрафикРаботы,
	  	|		СУММА(ГрафикиРаботыПоВидамВремени.ОсновноеЗначение)			КАК НормаДней,
	  	|		СУММА(ГрафикиРаботыПоВидамВремени.ДополнительноеЗначение)	КАК НормаЧасов,
	  	|		СУММА(ГрафикиРаботыПоВидамВремени.ПроизводственныйКалендарьКалендарныеДни)	КАК КалендарныеДни
		|ПОМЕСТИТЬ ВТДанныеГрафика	
	  	|	ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&парамПериод, Сотрудник = &парамСотрудник) КАК Работники 
	  	|		   
	  	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	  	|	ПО	" + ?(АнализируемМесяцы,"	ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ &парамНачало И &парамКонец"
	  			,"	ГрафикиРаботыПоВидамВремени.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&парамПериод, ГОД) И КОНЕЦПЕРИОДА(&парамПериод, ГОД)") + "
	  	|		И	ГрафикиРаботыПоВидамВремени.ГрафикРаботы = Работники.ГрафикРаботы
	  	|		И	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
	  	|	СГРУППИРОВАТЬ ПО 
	  	|		Работники.ГрафикРаботы
		|";
		Запрос.Текст = ТекстЗапросаВТ;
		Запрос.Выполнить();
		ТекстЗапросаВТДанныеГрафика = "ВТДанныеГрафика";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ * ИЗ ВТДанныеГрафика";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|	Начисления.ВидРасчета	КАК ВидРасчета,
	|	ВЫБОР	КОГДА Начисления.Показатель1 ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ Начисления.Показатель1
	|	КОНЕЦ
	|								КАК ОкладТариф,
	|   
	|	Графики.ГрафикРаботы		КАК ГрафикРаботы,
	|	Графики.НормаДней/&КвоМесяцев		КАК НормаДней,
	|	Графики.НормаЧасов/&КвоМесяцев		КАК НормаЧасов,
	|	Графики.КалендарныеДни/&КвоМесяцев	КАК КалендарныеДни
	|	
	|ИЗ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&парамДата, 
	|						Сотрудник = &парамСотрудник 
	|						И ВидНачисления <> &парамВидНачисления  
	|	) КАК Начисления
	| 
	|// даные графика за год 
	|ЛЕВОЕ СОЕДИНЕНИЕ " + ТекстЗапросаВТДанныеГрафика + " КАК Графики
	|ПО	ИСТИНА
	|
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	ПараметрыОклада = Новый Соответствие;
	ПараметрыОклада.Вставить("Оклад",		0);
	ПараметрыОклада.Вставить("НормаДней",	0);
	ПараметрыОклада.Вставить("НормаЧасов",	0);
	ПараметрыОклада.Вставить("КалендарныеДни",	0);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОкладЗаМесяц = Выборка.ОкладТариф;
		// если оклад ввиде тарифа за день или за час приведем его к сумме за месяц
		Если Выборка.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоДневнойТарифнойСтавке
			//ИЛИ Выборка.ВидРасчета.Показатели.Найти(Справочники.ИНАГРО_ПоказателиСхемМотивации.ВремяВДнях) <> Неопределено
			Тогда
			ОкладЗаМесяц = ОкладЗаМесяц*Окр(Выборка.НормаДней,2);
		ИначеЕсли Выборка.ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ПоЧасовойТарифнойСтавке 
			//ИЛИ Выборка.ВидРасчета.Показатели.Найти(Справочники.ИНАГРО_ПоказателиСхемМотивации.ВремяВЧасах) <> Неопределено
			Тогда
			ОкладЗаМесяц = ОкладЗаМесяц*Окр(Выборка.НормаЧасов);
		КонецЕсли;
		
		ПараметрыОклада["Оклад"] = ОкладЗаМесяц;
		ПараметрыОклада["НормаДней"] = Выборка.НормаДней;
		ПараметрыОклада["НормаЧасов"] = Выборка.НормаЧасов;
		ПараметрыОклада["КалендарныеДни"] = ?(ДляДекретных, 30.44, Выборка.КалендарныеДни);
	КонецЕсли;
	
	Возврат ПараметрыОклада;
КонецФункции

#КонецОбласти

#КонецОбласти