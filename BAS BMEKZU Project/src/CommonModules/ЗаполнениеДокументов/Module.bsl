Функция ПолучитьДанныеОрганизацияПриИзменении(ПараметрыДокумента) Экспорт

	ТекПользователь = Пользователи.ТекущийПользователь();

	Если ПараметрыДокумента.Свойство("Организация") Тогда

		Если ПараметрыДокумента.Свойство("ПодразделениеОрганизации")
		   И ЗначениеЗаполнено(ПараметрыДокумента.Организация) Тогда

			ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");

			// Если ПодразделениеОрганизации не заполнено.
			Если НЕ ЗначениеЗаполнено(ПараметрыДокумента.ПодразделениеОрганизации) Тогда
				// Если ПодразделениеПоУмолчанию соответствует выбранной организации, подставляем его.
				Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, ПараметрыДокумента.Организация) Тогда
					ПараметрыДокумента.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
				КонецЕсли;
			Иначе
				// Если ПодразделениеОрганизации не соответствует выбранной организации.
				Если НЕ БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПараметрыДокумента.ПодразделениеОрганизации, ПараметрыДокумента.Организация) Тогда
					// Если ПодразделениеПоУмолчанию соответствует выбранной организации, подставляем его.
					Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, ПараметрыДокумента.Организация) Тогда
						ПараметрыДокумента.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
					Иначе // Выбрана не основная организация. ПодразделениеОрганизации нужно очистить.
						ПараметрыДокумента.ПодразделениеОрганизации = БухгалтерскийУчетПереопределяемый.ПустоеПодразделение();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ПараметрыДокумента.Свойство("ДоговорКонтрагента")
		   И ЗначениеЗаполнено(ПараметрыДокумента.Организация)
		   И ЗначениеЗаполнено(ПараметрыДокумента.ДоговорКонтрагента)
		   И НЕ ПараметрыДокумента.ДоговорКонтрагента.Организация = ПараметрыДокумента.Организация Тогда
			ПараметрыДокумента.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

	Возврат ПараметрыДокумента;

КонецФункции

Функция ПолучитьДанныеКонтрагентПриИзменении(ПараметрыДокумента, СписокВидовДоговоров = Неопределено,
	                                         СтруктураДополнительныхПараметров = Неопределено) Экспорт

	Если ПараметрыДокумента.Свойство("ДоговорКонтрагента") Тогда
	 	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(ПараметрыДокумента.ДоговорКонтрагента,
									ПараметрыДокумента.Контрагент,
									ПараметрыДокумента.Организация,
									СписокВидовДоговоров,
									СтруктураДополнительныхПараметров);
	КонецЕсли;

	Если ПараметрыДокумента.Свойство("Сделка") Тогда
		Если ПараметрыДокумента.Сделка <> Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			ПараметрыДокумента.Вставить("Сделка", Неопределено);
		КонецЕсли;
	КонецЕсли;

	Возврат ПараметрыДокумента;

КонецФункции

// Процедура выполняет общие действия при изменении контрагента
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа
//
Процедура ПриИзмененииЗначенияКонтрагента(ДокументОбъект,СписокВидовДоговоров = Неопределено,СтруктураДополнительныхПараметров = Неопределено,
	                                      НаименованиеРеквизитаДоговора = "", НаименованиеРеквизитаКонтрагента = "") Экспорт

	Если НЕ ЗначениеЗаполнено(НаименованиеРеквизитаКонтрагента) Тогда
	    НаименованиеРеквизитаКонтрагента = "Контрагент";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НаименованиеРеквизитаДоговора) Тогда
	    НаименованиеРеквизитаДоговора = "ДоговорКонтрагента";
	КонецЕсли;

	МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента(НаименованиеРеквизитаДоговора, МетаданныеДокумента) Тогда

	 	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(ДокументОбъект[НаименованиеРеквизитаДоговора],
									ДокументОбъект[НаименованиеРеквизитаКонтрагента],
									ДокументОбъект["Организация"],
									СписокВидовДоговоров,
									СтруктураДополнительныхПараметров);

	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Сделка", МетаданныеДокумента)
		И НЕ ТипЗнч(ДокументОбъект.Сделка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда

		ДокументОбъект.Сделка = Неопределено;

	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияКонтрагента()

// Процедура - обработчик события ПриИзменении поля ввода Организация
//
// Параметры:
//  ДокументОбъект - объект документ в форме которого произошло событие.
//  ТекПользователь - текущий пользователь, настройки которого используются
//                 по умолчанию.
//
Процедура ПриИзмененииЗначенияОрганизации(ДокументОбъект, ТекПользователь) Экспорт

	МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда

		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеДокумента)
		   И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда

			ПодразделениеПоУмолчанию = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");

			// Если ПодразделениеОрганизации не заполнено.
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.ПодразделениеОрганизации) Тогда

				// Если ПодразделениеПоУмолчанию соответствует выбранной организации, подставляем его.
				Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, ДокументОбъект.Организация) Тогда
					ДокументОбъект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
				КонецЕсли;

			Иначе // Если ПодразделениеОрганизации заполнено.

				// Если ПодразделениеОрганизации не соответствует выбранной организации.
				Если НЕ БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ДокументОбъект.ПодразделениеОрганизации, ДокументОбъект.Организация) Тогда

					// Если ПодразделениеПоУмолчанию соответствует выбранной организации, подставляем его.
					Если БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеПоУмолчанию, ДокументОбъект.Организация) Тогда
						ДокументОбъект.ПодразделениеОрганизации = ПодразделениеПоУмолчанию;
					Иначе // Выбрана не основная организация. ПодразделениеОрганизации нужно очистить.
						ДокументОбъект.ПодразделениеОрганизации = БухгалтерскийУчетПереопределяемый.ПустоеПодразделение();
					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента)
		   И ЗначениеЗаполнено(ДокументОбъект.Организация)
		   И ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
		   
		   	РеквизитыДоговора = БухгалтерскийУчетПереопределяемый.ПолучитьРеквизитыДоговораКонтрагента(ДокументОбъект.ДоговорКонтрагента);
		   
		   	Если РеквизитыДоговора.Организация <> ДокументОбъект.Организация Тогда
				ДокументОбъект.ДоговорКонтрагента = Неопределено;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияОрганизации()

// Функция выполняет общие действия при изменении договора взаиморасчетов
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//  СпособЗаполненияЦен          - значение перечисления "Способы заполнения цен", определяет по какому из
//								   регистров ("Цены номенклатуры" или "Цены номенклатуры контрагентов") будет строиться запрос;
//  СтараяВалютаВзаиморасчетов   - ссылка на справочник валют, определяет валюту взаиморасчетов
//                                 до изменения договора;
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  СтруктураРеквизитовДокумента - структура, задает список обрабатываемых реквизитов документа;
// 								   если реквизит надо обрабатывать, то для него есть ключ в этой структуре
//  ТипОперации                  - необязаетельный, строка вида операции ("Покупка" или "Продажа");
//                                 если не передан, то реквизиты, зависящие от вида операции, не заполняются
//  ИмяТабличнойЧасти	         - имя табличной части
//  СтарыйДоговорКонтрагента  - старый договор контрагента, который был до изменения
//  СтруктураЗначений			 - структура, в эту переменную возвращаются значения элементов диалога выбора валюты.
//
Функция ПриИзмененииЗначенияДоговора(ДокументОбъект, СтараяВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
								 СпособЗаполненияЦен, СтруктураРеквизитовДокумента, ТипОперации = "", ИмяТабличнойЧасти,
								 СтарыйДоговорКонтрагента = Неопределено,
								 СтруктураЗначений = Неопределено) Экспорт

	Перем Договор, ТипЦенВДоговоре;

	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ЗаполнитьЦены",		Ложь);
	ПараметрыОбработки.Вставить("ПересчитатьЦены",		Ложь);
	ПараметрыОбработки.Вставить("ОбновитьЦенаИВалюта",	Ложь);
	ПараметрыОбработки.Вставить("ТекстВопроса",			"");
	ПараметрыОбработки.Вставить("ПредыдущаяВалюта",		ДокументОбъект.ВалютаДокумента);

	МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();
	Договор = ДокументОбъект.ДоговорКонтрагента;

	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаРегламентированногоУчета, ДокументОбъект.Дата);

		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
			ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		КонецЕсли;

		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
			ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
		КонецЕсли;

		Возврат ПараметрыОбработки;

	Иначе

		// Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов
		// и договоров взаиморасчетов имеет тип не договор поставщика, то это неправильно и надо вернуть старый договор
		// Аналогично если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры
		// и договоров взаиморасчетов имеет тип не договор покупателя
		ИмяРеквизитаВидДоговора = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаВидДоговора();
		ЗначениеВидаДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, ИмяРеквизитаВидДоговора);
		
		Если (СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов
			 И НЕ БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСПоставщиком(ЗначениеВидаДоговора)
			 И НЕ БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомитентом(ЗначениеВидаДоговора))
		 Или (СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры
			 И НЕ БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСПокупателем(ЗначениеВидаДоговора)
			 И НЕ БухгалтерскийУчетПереопределяемый.ЭтоВидДоговораСКомиссионером(ЗначениеВидаДоговора)) Тогда

			ТекстПредупреждения = НСтр("ru='В документе можно выбирать только договоры с ';uk='В документі можна вибирати тільки договори з '")
								+ ?(СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, НСтр("ru='покупателями или с комиссионерами';uk='покупцями або з комісіонерами'"), НСтр("ru='поставщиками или комитентами';uk='постачальниками або комітентами'"))+"!"+Символы.ПС;
			Если ЗначениеЗаполнено(СтарыйДоговорКонтрагента)
			   И СтарыйДоговорКонтрагента.Владелец = ДокументОбъект.Контрагент Тогда
				ТекстПредупреждения = ТекстПредупреждения + НСтр("ru='Будет восстановлен старый договор.';uk='Буде відновлений старий договір.'");
				ДокументОбъект.ДоговорКонтрагента = СтарыйДоговорКонтрагента;
			Иначе
				ТекстПредупреждения = ТекстПредупреждения + НСтр("ru='Договор будет очищен.';uk='Договір буде очищений.'");
				ДокументОбъект.ДоговорКонтрагента = Неопределено;
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
			// дальше ничего пересчитывать не надо
			Возврат ПараметрыОбработки;

		КонецЕсли;

	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Сделка", МетаданныеДокумента)
		И НЕ ТипЗнч(ДокументОбъект.Сделка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда

		ДокументОбъект.Сделка = Неопределено;

	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда

		ДокументОбъект.Контрагент = Договор.Владелец;

	ИначеЕсли ЗначениеЗаполнено(Договор)
			И ДокументОбъект.Контрагент <> Договор.Владелец Тогда //Владелец нового договора должен совпадать с контрагентом документа.

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Выбранный договор принадлежит другому контрагенту.
|Будет восстановлен старый договор.';uk='Вибраний договір належить іншому контрагенту.
|Буде відновлений старий договір.'"));
			Договор = СтарыйДоговорКонтрагента;

	КонецЕсли;

	//Владелец нового договора должен совпадать с контрагентом документа.

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
		 И НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ДокументОбъект.Организация = Договор.Организация;
	КонецЕсли;

	// если хоть в одной табличной части есть хотя бы одна строка, надо пересчитывать
	НадоПересчитывать = Ложь;
	Для каждого ТЧОбъекта Из МетаданныеДокумента.ТабличныеЧасти Цикл
		Если ДокументОбъект[ТЧОбъекта.Имя].Количество() > 0 Тогда
			НадоПересчитывать = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если НадоПересчитывать = Ложь Тогда

		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
			ДокументОбъект.ВалютаДокумента    = БухгалтерскийУчетПереопределяемый.ВалютаВзаиморасчетов(Договор);
			СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(БухгалтерскийУчетПереопределяемый.ВалютаВзаиморасчетов(Договор), ДокументОбъект.Дата);

			// В некоторых документах курс и кратность документа отсутствуют.
			Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента) Тогда
				ДокументОбъект.КурсДокумента           = СтруктураКурсаДокумента.Курс;
			КонецЕсли;
			Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
			Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
				ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
			КонецЕсли;
			Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
		КонецЕсли;

		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(Договор.ТипЦен) Тогда
				ДокументОбъект.ТипЦен = Договор.ТипЦен;
				Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) Тогда
					ДокументОбъект.СуммаВключаетНДС= Договор.ТипЦен.ЦенаВключаетНДС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	Иначе // ДокументОбъект.[ИмяТабличнойЧасти].Количество() > 0

		// Если заполнен и по другим параметрам, то предварительно спрашиваем
		НеобходимоПересчитать = Ложь;
		ТекстВопроса = НСтр("ru='Договор с контрагентом предусматривает параметры взаиморасчетов,
|отличные от установленных в документе:';uk='Договір з контрагентом передбачає параметри взаєморозрахунків,
|відмінні від установлених у документі:'");

		// Валюта документа
		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
		   И (ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ВалютаВзаиморасчетов(Договор))) Тогда
			НовыйВалютаДокумента    = БухгалтерскийУчетПереопределяемый.ВалютаВзаиморасчетов(Договор);
			СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НовыйВалютаДокумента, ДокументОбъект.Дата);
			Если СтруктураРеквизитовДокумента.Свойство("КурсВзаиморасчетов") Тогда
				СтруктураРеквизитовДокумента.Вставить("КурсВзаиморасчетов", СтруктураКурсаДокумента.Курс);
			КонецЕсли;
			Если СтруктураРеквизитовДокумента.Свойство("КратностьВзаиморасчетов") Тогда
				СтруктураРеквизитовДокумента.Вставить("КратностьВзаиморасчетов", СтруктураКурсаДокумента.Кратность);
			КонецЕсли;

			Если  ДокументОбъект.ВалютаДокумента <> НовыйВалютаДокумента Тогда
				НеобходимоПересчитать 					= Истина;
				ПараметрыОбработки.ЗаполнитьЦены 		= Истина;

				ТекстВалюта = ?(НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента), НСтр("ru='Не задана';uk='Не задана'"), СокрЛП(ДокументОбъект.ВалютаДокумента));
				ТекстВопроса = ТекстВопроса + Символы.ПС + 
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Валюта документа: ""%1"", договора: ""%2"".';uk='Валюта документу: ""%1"", договору: ""%2"".'") , ТекстВалюта , СокрЛП(НовыйВалютаДокумента));
			КонецЕсли;
		КонецЕсли;

		// Тип цен
		НадоПередаватьНовыйТипЦен = Ложь;
		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента) Тогда
			НовыйТипЦен = ДокументОбъект.ТипЦен;
			Если ЗначениеЗаполнено(Договор.ТипЦен) Тогда
				НовыйТипЦен = Договор.ТипЦен;
			КонецЕсли;

			Если ДокументОбъект.ТипЦен <> НовыйТипЦен Тогда
				НеобходимоПересчитать = Истина;
				НадоПередаватьНовыйТипЦен = Истина;
				ПараметрыОбработки.ЗаполнитьЦены 		= Истина;
				ПараметрыОбработки.ОбновитьЦенаИВалюта	= Истина;
				ТекстТипЦен = ?(НЕ ЗначениеЗаполнено(ДокументОбъект.ТипЦен), НСтр("ru='Не задан';uk='Не заданий'"), СокрЛП(ДокументОбъект.ТипЦен));
				ТекстВопроса = ТекстВопроса + Символы.ПС +
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Тип цен документа: ""%1"", договора: ""%2"".';uk='Тип цін документу: ""%1"", договору: ""%2"".'") , ТекстТипЦен, СокрЛП(НовыйТипЦен));
			КонецЕсли;
		КонецЕсли;

		Если НеобходимоПересчитать Тогда
			ПараметрыОбработки.ТекстВопроса	= ТекстВопроса + Символы.ПС + НСтр("ru='Пересчитать документ в соответствии с договором?';uk='Перерахувати документ відповідно до договору?'");
		Иначе

			// Установим курс и кратность взаиморасчетов
			Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
			   И (ЗначениеЗаполнено(БухгалтерскийУчетПереопределяемый.ВалютаВзаиморасчетов(Договор))) Тогда
				СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(БухгалтерскийУчетПереопределяемый.ВалютаВзаиморасчетов(Договор), ДокументОбъект.Дата);
				Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
					ДокументОбъект.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
				КонецЕсли;
				Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
					ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли; // ДокументОбъект.[ИмяТЧ].Количество() = 0

	// если валюта документа после выбора договора не совпадала с валютой договора или с регламентированной,
	// очистим договор
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда

		Если ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета
		   И ДокументОбъект.ВалютаДокумента <> ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда

			ТекстПредупреждения = НСтр("ru='Валюта документа не совпадает ни с валютой договора, ни с валютой регламентированного учета!';uk='Валюта документа не збігається ні з валютою договору, ні з валютою регламентованого обліку!'")+Символы.ПС;			
			Если ЗначениеЗаполнено(СтарыйДоговорКонтрагента)
			   И СтарыйДоговорКонтрагента.Владелец = ДокументОбъект.Контрагент Тогда
				ТекстПредупреждения = ТекстПредупреждения + НСтр("ru='Будет восстановлен старый договор.';uk='Буде відновлений старий договір.'");
				ДокументОбъект.ДоговорКонтрагента = СтарыйДоговорКонтрагента;
			Иначе
				ТекстПредупреждения = ТекстПредупреждения + НСтр("ru='Договор будет очищен.';uk='Договір буде очищений.'");
				ДокументОбъект.ДоговорКонтрагента = Неопределено;
			КонецЕсли;

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
			// дальше ничего пересчитывать не надо
			Возврат ПараметрыОбработки;

		КонецЕсли;

	КонецЕсли;

	Возврат ПараметрыОбработки;

КонецФункции // ПриИзмененииЗначенияДоговора()

// Определяет курс документа, который равен либо курсу документа (если в документе он существует),
// либо курсу взаиморасчетов, либо 1.
//
// Параметры:
//  ДокументОбъект                 - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - курс документа.
//
Функция КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
		// Если валюта документа совпадает с валютой регл. учета, то курс 1.
		Если (ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента)) И (ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда

			МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();

			// Если есть реквизит КурсДокумента - его и вернем
			Если ТипЗнч(ДокументОбъект) = Тип("Структура") И ДокументОбъект.Свойство("КурсДокумента")
				ИЛИ ТипЗнч(ДокументОбъект) <> Тип("Структура") И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КурсДокумента;
			КонецЕсли;

			// Если нет КурсДокумента и валюта документа не совпадает с валютой регл. учета,
			// то такой документ может быть выписан только в валюте взаиморасчетов,
			// если есть реквизит КурсВзаиморасчетов - его и вернем.
			Если ТипЗнч(ДокументОбъект) = Тип("Структура") И ДокументОбъект.Свойство("КурсВзаиморасчетов")
				ИЛИ ТипЗнч(ДокументОбъект) <> Тип("Структура") И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КурсВзаиморасчетов;
			КонецЕсли;

			// Если нет КурсВзаиморасчетов и валюта документа не совпадает с валютой регл. учета,
			// то КурсВзаиморасчетов должен быть в табличной части документа или может вообще отсутствовать.
			// Тогда возьмем курс из справочника на дату документа.
			Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,ДокументОбъект.Дата).Курс;

		КонецЕсли;
	КонецЕсли;

	Возврат 1;

КонецФункции // КурсДокумента()

// Определяет кратность документа, которая равен либо кратности документа (если в документе она существует),
// либо кратности взаиморасчетов, либо 1.
//
// Параметры:
//  ДокументОбъект - объект документа, курс которого надо получить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Число - кратность валюты в документе.
//
Функция КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	МетаданныеДокумента = ДокументОбъект.Ссылка.Метаданные();

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
		// Если валюта документа совпадает с валютой регл. учета, то кратность 1.
		Если (ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента)) И (ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета) Тогда

			// Если есть реквизит КратностьДокумента - его и вернем
			Если ТипЗнч(ДокументОбъект) = Тип("Структура") И ДокументОбъект.Свойство("КратностьДокумента")
				ИЛИ ТипЗнч(ДокументОбъект) <> Тип("Структура") И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КратностьДокумента;
			КонецЕсли;

			// Если нет КратностьДокумента и валюта документа не совпадает с валютой регл. учета,
			// то такой документ может быть выписан только в валюте взаиморасчетов,
			// если есть реквизит КратностьВзаиморасчетов - его и вернем.
			Если ТипЗнч(ДокументОбъект) = Тип("Структура") И ДокументОбъект.Свойство("КратностьВзаиморасчетов")
				ИЛИ ТипЗнч(ДокументОбъект) <> Тип("Структура") И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
				Возврат ДокументОбъект.КратностьВзаиморасчетов;
			КонецЕсли;

			// Если нет КратностьВзаиморасчетов и валюта документа не совпадает с валютой регл. учета,
			// то КратностьВзаиморасчетов должна быть в табличной части документа или может вообще отсутствовать.
			//Тогда возьмем Кратность из справочника на дату документа.
			Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента,ДокументОбъект.Дата).Кратность;

		КонецЕсли;
    КонецЕсли;

	Возврат 1;

КонецФункции // КратностьДокумента()


Процедура УдалитьКлючИзСтруктуры(Структура, Ключ)

	Если ТипЗнч(Структура) = Тип("Структура") И Структура.Свойство(Ключ) Тогда
		Структура.Удалить(Ключ);
	КонецЕсли;

КонецПроцедуры

// Для реквизита ПодразделениеОрганизации.
// Как правило, не следует применять для ПодразделениеЗатрат
Функция ПолучитьПодразделениеПоУмолчанию(ДокументОбъект, МетаданныеДокумента)
	ПодразделениеОрганизации = БухгалтерскийУчетПереопределяемый.ПустоеПодразделение();
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Склад", МетаданныеДокумента)
		И ЗначениеЗаполнено(ДокументОбъект.Склад)
		И ДокументОбъект.Склад.Метаданные().Реквизиты.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
		РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.Склад, "ПодразделениеОрганизации");
		ПодразделениеОрганизации = РеквизитыСклада.ПодразделениеОрганизации;
	ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СчетОрганизации", МетаданныеДокумента)
		И ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации)
		И ДокументОбъект.СчетОрганизации.Метаданные().Реквизиты.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
		РеквизитыСчетаОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.СчетОрганизации, "ПодразделениеОрганизации");
		ПодразделениеОрганизации = РеквизитыСчетаОрганизации.ПодразделениеОрганизации;
	Иначе
		ПодразделениеОрганизации = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
	КонецЕсли;

    Возврат(ПодразделениеОрганизации);

КонецФункции

// Процедура предназначена для заполнения общих реквизитов документов,
// вызывается в обработчиках событий "ОбработкаЗаполнения" в модулях документов.
//
// Параметры:
//  ДокументОбъект   - <ДокументОбъект> - документ, реквизиты которого необходимо заполнить
//  ДанныеЗаполнения - <Структура> или <Неопределено> - одноименный параметр обработчика ОбработкаЗаполнения документа
//
Процедура Заполнить(ДокументОбъект, ДанныеЗаполнения = Неопределено) Экспорт
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
		ДокументОбъект.Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	КонецЕсли;
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьПоСтруктуре(ДокументОбъект, ДанныеЗаполнения, МетаданныеДокумента);
	КонецЕсли;
	
	ЕстьРеквизитОрганизация          = ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Организация",          МетаданныеДокумента);
	ЕстьРеквизитКонтрагент           = ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Контрагент",           МетаданныеДокумента);
	ЕстьРеквизитДоговор              = ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ДоговорКонтрагента",   МетаданныеДокумента);
	ЕстьРеквизитВалютаДокумента      = ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВалютаДокумента",      МетаданныеДокумента);
	ЕстьРеквизитВалютаВзаиморасчетов = ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВалютаВзаиморасчетов", МетаданныеДокумента);
	ЕстьРеквизитСчетОрганизации      = ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СчетОрганизации",      МетаданныеДокумента);
	ЕстьРеквизитСчетКасса            = ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СчетКасса",            МетаданныеДокумента);
	
	// Проверяем корректность связанных реквизитов, заполненных из ДанныхЗаполнения документа:
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("РучнаяКорректировка", МетаданныеДокумента) Тогда
		ДокументОбъект.РучнаяКорректировка = Ложь;
	КонецЕсли;
	
	Если ЕстьРеквизитДоговор
		И ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
		
		СвойстваДоговора = БухгалтерскийУчетПереопределяемый.ПолучитьРеквизитыДоговораКонтрагента(ДокументОбъект.ДоговорКонтрагента);
		
		Если ЕстьРеквизитКонтрагент Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.Контрагент)
				И ДокументОбъект.Контрагент <> СвойстваДоговора.Владелец Тогда
				ДокументОбъект.ДоговорКонтрагента = Неопределено;
				СвойстваДоговора = Неопределено;
				УдалитьКлючИзСтруктуры(ДанныеЗаполнения, "ДоговорКонтрагента");
			Иначе
				ДокументОбъект.Контрагент = СвойстваДоговора.Владелец;
			КонецЕсли;
		КонецЕсли;
		
		Если СвойстваДоговора <> Неопределено
			И ЕстьРеквизитОрганизация Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
				Если ДокументОбъект.Организация <> СвойстваДоговора.Организация Тогда
					ДокументОбъект.ДоговорКонтрагента = Неопределено;
					Если ЕстьРеквизитКонтрагент Тогда
						ДокументОбъект.Контрагент = Неопределено
					КонецЕсли;
					СвойстваДоговора    = Неопределено;
					УдалитьКлючИзСтруктуры(ДанныеЗаполнения, "ДоговорКонтрагента");
				КонецЕсли;
			Иначе
				ДокументОбъект.Организация = СвойстваДоговора.Организация;
			КонецЕсли;
		КонецЕсли;
		
		Если СвойстваДоговора <> Неопределено Тогда
			Если ЕстьРеквизитВалютаВзаиморасчетов Тогда
				ДокументОбъект.ВалютаВзаиморасчетов = СвойстваДоговора.ВалютаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполняем реквизиты значениями по умолчанию:
	Если ЕстьРеквизитОрганизация И НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		
		ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		
		Справочники.Организации.ПроверитьНаличиеОрганизацииПриОднофирменномУчете(ОсновнаяОрганизация);
		
		ДокументОбъект.Организация = ОсновнаяОрганизация;
		
	КонецЕсли;
	
	ПлательщикНДС = ЕстьРеквизитОрганизация И УчетнаяПолитика.ПлательщикНДС(ДокументОбъект.Организация, ДокументОбъект.Дата);
	
	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("СтруктурнаяЕдиница", ДокументОбъект, МетаданныеДокумента)
		И ЕстьРеквизитОрганизация Тогда
		ДокументОбъект.СтруктурнаяЕдиница = БухгалтерскийУчетПереопределяемый.ПолучитьБанковскийСчетПоУмолчанию(ДокументОбъект.Организация);
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента) Тогда
		ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("ВидОперации", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.ВидОперации = Перечисления[ДокументОбъект.ВидОперации.Метаданные().Имя][0];
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("Склад", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.Склад = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("СкладОрдер", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.СкладОрдер = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойСклад");
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("СтавкаНДС", ДокументОбъект, МетаданныеДокумента) Тогда
		
		ДокументЯвляетсяРеализацией	= БухгалтерскийУчетКлиентСерверПереопределяемый.ДокументЯвляетсяРеализацией(ДокументОбъект.Ссылка);
		
		Если НЕ ПлательщикНДС И ДокументЯвляетсяРеализацией Тогда
			ДокументОбъект.СтавкаНДС	= Перечисления.СтавкиНДС.НеНДС;
		Иначе
			ДокументОбъект.СтавкаНДС	= Перечисления.СтавкиНДС.НДС20;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("АвторасчетНДС", МетаданныеДокумента) Тогда
		
		Если НЕ ДокументОбъект.ДополнительныеСвойства.Свойство("АвторасчетНДСУстановленИзДокументаОснования") Тогда
			ДокументОбъект.АвторасчетНДС = ПлательщикНДС;		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("БанковскийСчет", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.БанковскийСчет = БухгалтерскийУчетПереопределяемый.ПолучитьБанковскийСчетПоУмолчанию(ДокументОбъект.Организация);
		Если ЕстьРеквизитВалютаДокумента Тогда
			ДокументОбъект.ВалютаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.БанковскийСчет, "ВалютаДенежныхСредств");
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("СчетОрганизации", ДокументОбъект, МетаданныеДокумента) Тогда
		Если ТипДанныхЗаполнения = Тип("Структура") И ДанныеЗаполнения.Свойство("БанковскийСчет")
			И ЗначениеЗаполнено(ДанныеЗаполнения.БанковскийСчет) Тогда
			ДокументОбъект.СчетОрганизации = ДанныеЗаполнения.БанковскийСчет;
		Иначе
			УчетДенежныхСредствБП.УстановитьБанковскийСчет(
				ДокументОбъект.СчетОрганизации, ДокументОбъект.Организация, ДокументОбъект.ВалютаДокумента, Истина);
		КонецЕсли;
		
		Если ЕстьРеквизитВалютаДокумента И НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
			ДокументОбъект.ВалютаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.СчетОрганизации, "ВалютаДенежныхСредств");
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьРеквизитСчетОрганизации И ЕстьРеквизитВалютаДокумента И ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации) Тогда
		ВалютаСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.СчетОрганизации, "ВалютаДенежныхСредств");
		Если ВалютаСчета <> ДокументОбъект.ВалютаДокумента Тогда
			ДокументОбъект.ВалютаДокумента = ВалютаСчета;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьРеквизитОрганизация
		И ЗначениеЗаполнено(ДокументОбъект.Организация)
		И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеДокумента)
		И НЕ БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ДокументОбъект.ПодразделениеОрганизации, ДокументОбъект.Организация) Тогда
		
		ПодразделениеОрганизации = ПолучитьПодразделениеПоУмолчанию(ДокументОбъект, МетаданныеДокумента);
		Если ЗначениеЗаполнено(ПодразделениеОрганизации) 
			И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ПодразделениеОрганизации, ДокументОбъект.Организация) Тогда
			ДокументОбъект.ПодразделениеОрганизации = ПодразделениеОрганизации;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьРеквизитОрганизация
		И ЗначениеЗаполнено(ДокументОбъект.Организация)
		И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("МестонахождениеОС", МетаданныеДокумента)
		И НЕ БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ДокументОбъект.МестонахождениеОС, ДокументОбъект.Организация) Тогда
		
		МестонахождениеОС = ПолучитьПодразделениеПоУмолчанию(ДокументОбъект, МетаданныеДокумента);
		Если ЗначениеЗаполнено(МестонахождениеОС) 
			И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(МестонахождениеОС, ДокументОбъект.Организация) Тогда
			ДокументОбъект.МестонахождениеОС = МестонахождениеОС;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьРеквизитОрганизация
		И ЗначениеЗаполнено(ДокументОбъект.Организация)
		И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Местонахождение", МетаданныеДокумента)
		И НЕ БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ДокументОбъект.Местонахождение, ДокументОбъект.Организация) Тогда
		
		Местонахождение = ПолучитьПодразделениеПоУмолчанию(ДокументОбъект, МетаданныеДокумента);
		Если ЗначениеЗаполнено(Местонахождение) 
			И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(Местонахождение, ДокументОбъект.Организация) Тогда
			ДокументОбъект.Местонахождение = Местонахождение;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьРеквизитВалютаДокумента И НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если ЕстьРеквизитВалютаВзаиморасчетов И НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаВзаиморасчетов) Тогда
		ДокументОбъект.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента) Тогда
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.КурсДокумента)
			ИЛИ ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета И ДокументОбъект.КурсДокумента = 1 Тогда
			
			СтруктураКурсаДокумента      = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
			ДокументОбъект.КурсДокумента = СтруктураКурсаДокумента.Курс;
			Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.КурсВзаиморасчетов)
			ИЛИ ДокументОбъект.ВалютаДокумента <> ВалютаРегламентированногоУчета И ДокументОбъект.КурсВзаиморасчетов = 1 Тогда
			
			СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
			ДокументОбъект.КурсВзаиморасчетов = СтруктураКурсаДокумента.Курс;
			Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("ЗанимаемыхСтавок", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.ЗанимаемыхСтавок = 1;
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("ДатаС", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.ДатаС = ДокументОбъект.Дата;
	КонецЕсли;
	
	
	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("ПериодРегистрации", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.ПериодРегистрации = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	
	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("МестоСоставленияДокумента", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.МестоСоставленияДокумента = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеМестоСоставленияДокумента");;
	КонецЕсли;
	
	Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("ПредставительОрганизации", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.ПредставительОрганизации = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойПредставительОрганизации");;
	КонецЕсли;

	// Заполнение реквизитов расчетного документа
	Если ОбщегоНазначенияБП.ЕстьТабЧастьДокумента("РасшифровкаПлатежа", МетаданныеДокумента) Тогда
		Если ДокументОбъект.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаПлатеж = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитТабЧастиДокумента("СтавкаНДС", СтрокаПлатеж, МетаданныеДокумента, "РасшифровкаПлатежа") Тогда
				Если ЕстьРеквизитОрганизация И ЗначениеЗаполнено(ДокументОбъект.Организация) 
					И (МетаданныеДокумента.Имя = "ПриходныйКассовыйОрдер" ИЛИ МетаданныеДокумента.Имя = "ПоступлениеНаРасчетныйСчет") Тогда
					
					СтрокаПлатеж.СтавкаНДС = ?(НЕ ПлательщикНДС, Перечисления.СтавкиНДС.БезНДС, Перечисления.СтавкиНДС.НДС20);
				Иначе
					СтрокаПлатеж.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаПлатеж = ДокументОбъект.РасшифровкаПлатежа[0];
		КонецЕсли;
		
		Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("СчетОрганизации", ДокументОбъект, МетаданныеДокумента) Тогда
			ДокументОбъект.СчетОрганизации = Неопределено;
			УчетДенежныхСредствБП.УстановитьБанковскийСчет(
				ДокументОбъект.СчетОрганизации, ДокументОбъект.Организация, ДокументОбъект.ВалютаДокумента);
		КонецЕсли;
		Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("ПодразделениеОрганизации", ДокументОбъект, МетаданныеДокумента) Тогда
			Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СчетОрганизации", МетаданныеДокумента)
				И ТипЗнч(ДокументОбъект.СчетОрганизации) = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации() Тогда
				
				РеквизитыСчетаОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.СчетОрганизации, "ПодразделениеОрганизации");
				Если ЗначениеЗаполнено(РеквизитыСчетаОрганизации.ПодразделениеОрганизации) Тогда
					ДокументОбъект.ПодразделениеОрганизации = РеквизитыСчетаОрганизации.ПодразделениеОрганизации;
				КонецЕсли;
			Иначе
				ОсновноеПодразделение = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
				Если ЗначениеЗаполнено(ОсновноеПодразделение)
					И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ОсновноеПодразделение, ДокументОбъект.Организация) Тогда
					ДокументОбъект.ПодразделениеОрганизации = ОсновноеПодразделение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ЕстьРасчетыСКонтрагентами = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСКонтрагентами(ДокументОбъект.ВидОперации);
		ЕстьРасчетыПоКредитам     = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыПоКредитам(ДокументОбъект.ВидОперации);
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			Если ОбщегоНазначенияБП.ЕстьНезаполненныйРеквизитДокумента("СчетКонтрагента", ДокументОбъект, МетаданныеДокумента)
				И ТипЗнч(ДокументОбъект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				БанковскийСчетКонтрагента = БухгалтерскийУчетПереопределяемый.ПолучитьБанковскийСчетПоУмолчанию(ДокументОбъект.Контрагент);
				Если ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
					ВалютаБанковскогоСчетаКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетКонтрагента, "ВалютаДенежныхСредств");
					ВалютаБанковскогоСчетаОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.СчетОрганизации, "ВалютаДенежныхСредств");
					Если ВалютаБанковскогоСчетаКонтрагента = ВалютаБанковскогоСчетаОрганизации
						ИЛИ НЕ ЗначениеЗаполнено(ВалютаБанковскогоСчетаОрганизации)
						И ЕстьРеквизитВалютаДокумента И ВалютаБанковскогоСчетаКонтрагента = ДокументОбъект.ВалютаДокумента Тогда
						ДокументОбъект.СчетКонтрагента = БанковскийСчетКонтрагента;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента)
				И ЗначениеЗаполнено(ДокументОбъект.Контрагент)
				И ТипЗнч(ДокументОбъект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				РеквизитыКонтрагента 	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.Контрагент, "ОсновнойДоговорКонтрагента");
				ОсновнойДоговорКонтрагента = УчетВзаиморасчетов.ДоступныйДоговорКонтрагента(РеквизитыКонтрагента.ОсновнойДоговорКонтрагента);
				РеквизитыДоговора		= БухгалтерскийУчетПереопределяемый.ПолучитьРеквизитыДоговораКонтрагента(ОсновнойДоговорКонтрагента);
				Если УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(
						ДокументОбъект.ВидОперации).Найти(ОсновнойДоговорКонтрагента.ВидДоговора) <> Неопределено Тогда
					Если ДокументОбъект.Организация.Пустая() Тогда
						СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
						Организация = РеквизитыДоговора.Организация;
					ИначеЕсли РеквизитыДоговора.Организация.Пустая()
						ИЛИ РеквизитыДоговора.Организация=ДокументОбъект.Организация Тогда
						СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
					СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
						РеквизитыДоговора.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
					СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
					СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
					ДокументОбъект.ВалютаДокумента = РеквизитыДоговора.ВалютаВзаиморасчетов;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура предназначена для заполнения общих реквизитов документов по документу основанию,
//	вызывается в обработчиках событий "ОбработкаЗаполнения" в модулях документов.
//
// Параметры:
//  ДокументОбъект  - объект редактируемого документа,
//  ДокументОснование - объект документа основания
//  КопироватьПодразделение - булево - если да - подразделение организации берется из документа-основания,
//										если нет - из реквизита СчетОрганизации или настройки пользователя
//
Процедура ЗаполнитьПоОснованию(ДокументОбъект, ДокументОснование, КопироватьПодразделение = Истина) Экспорт

	МетаданныеДокумента          = ДокументОбъект.Метаданные();
	МетаданныеДокументаОснования = ДокументОснование.Метаданные();

	// Дата
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
		ДокументОбъект.Дата = НачалоДня(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
	КонецЕсли;

	// Организация.
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
	   И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Организация", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Организация = ДокументОснование.Организация;
	КонецЕсли;

	// Склад.
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Склад", МетаданныеДокумента)
	   И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Склад", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Склад = ДокументОснование.Склад;
	КонецЕсли;

	// Контрагент.
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента)
	   И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Контрагент = ДокументОснование.Контрагент;
	КонецЕсли;

	// ДоговорКонтрагента.
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента)
	   И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокументаОснования) Тогда
	   
	   РеквизитыДоговора = БухгалтерскийУчетПереопределяемый.ПолучитьРеквизитыДоговораКонтрагента(ДокументОснование.ДоговорКонтрагента);
	   
	   Если НЕ ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента)
	      ИЛИ ДокументОбъект.Организация = РеквизитыДоговора.Организация Тогда

			ДокументОбъект.ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента;

			// КурсВзаиморасчетов.
			Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
				СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыДоговора.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
				ДокументОбъект.КурсВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Курс;

				// КратностьВзаиморасчетов.
				Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
					ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
				КонецЕсли;
			КонецЕсли;
		
		КонецЕсли;

	КонецЕсли;

	// Банковский счет
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокумента) Тогда

		// Если в документе-основании есть структурная единица, то берем ее оттуда
		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница)
			   И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации() Тогда
				ДокументОбъект.БанковскийСчет = ДокументОснование.СтруктурнаяЕдиница;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.БанковскийСчет) Тогда
				ДокументОбъект.БанковскийСчет = ДокументОснование.БанковскийСчет;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СчетОрганизации", МетаданныеДокумента) Тогда

		// Если в документе-основании есть структурная единица, то берем ее оттуда
		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СтруктурнаяЕдиница", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница)
			   И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации() Тогда
				ДокументОбъект.СчетОрганизации = ДокументОснование.СтруктурнаяЕдиница;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СчетОрганизации", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СчетОрганизации) Тогда
				ДокументОбъект.СчетОрганизации = ДокументОснование.СчетОрганизации;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.БанковскийСчет) Тогда
				ДокументОбъект.СчетОрганизации = ДокументОснование.БанковскийСчет;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// Подразделение организации
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеДокумента) Тогда

		Если КопироватьПодразделение Тогда

			Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ПодразделениеОрганизации", МетаданныеДокументаОснования) Тогда
				ДокументОбъект.ПодразделениеОрганизации = ДокументОснование.ПодразделениеОрганизации;
			КонецЕсли;

		Иначе

			Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СчетОрганизации", МетаданныеДокумента) Тогда
				Если ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации)
					И (ДокументОбъект.СчетОрганизации.Метаданные().Реквизиты.Найти("ПодразделениеОрганизации") <> Неопределено) Тогда
					РеквизитыСчетаОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.СчетОрганизации, "ПодразделениеОрганизации");
					ДокументОбъект.ПодразделениеОрганизации = РеквизитыСчетаОрганизации.ПодразделениеОрганизации;
				КонецЕсли;
			Иначе
				ОсновноеПодразделение = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
				Если ЗначениеЗаполнено(ОсновноеПодразделение)
					И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ОсновноеПодразделение, ДокументОбъект.Организация) Тогда
					ДокументОбъект.ПодразделениеОрганизации = ОсновноеПодразделение;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	// ВалютаДокумента.
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента)
	   И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокументаОснования) Тогда

		// Если есть касса или банковский счет, то валюта должна браться только оттуда
		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("Касса", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.Касса) Тогда
				РеквизитыКассы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.Касса, "ВалютаДенежныхСредств");
				ДокументОбъект.ВалютаДокумента = РеквизитыКассы.ВалютаДенежныхСредств;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитДокумента("БанковскийСчет", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.БанковскийСчет) Тогда
				РеквизитыБанковскогоСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.БанковскийСчет, "ВалютаДенежныхСредств");
				ДокументОбъект.ВалютаДокумента = РеквизитыБанковскогоСчета.ВалютаДенежныхСредств;
		    КонецЕсли;
		Иначе
			ДокументОбъект.ВалютаДокумента = ДокументОснование.ВалютаДокумента;
		КонецЕсли;

		// КурсДокумента.
		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокумента) Тогда
			СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
			ДокументОбъект.КурсДокумента = СтруктураКурсаДокумента.Курс;

			// КратностьДокумента.
			Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КратностьДокумента", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// ТипЦен.
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокумента)
	   И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ТипЦен", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.ТипЦен = ДокументОснование.ТипЦен;
	КонецЕсли;

	// СуммаВключаетНДС.
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
	   И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.СуммаВключаетНДС = ДокументОснование.СуммаВключаетНДС;
	КонецЕсли;

	// АвторасчетНДС.
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("АвторасчетНДС", МетаданныеДокумента)
	   И ОбщегоНазначенияБП.ЕстьРеквизитДокумента("АвторасчетНДС", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.АвторасчетНДС = ДокументОснование.АвторасчетНДС;
		ДокументОбъект.ДополнительныеСвойства.Вставить("АвторасчетНДСУстановленИзДокументаОснования", Истина);
	КонецЕсли;

КонецПроцедуры

// Заполняет реквизиты объекта значениями, полученными в структуре ДанныхЗаполнения.
//	Заполнение возможно только в случае, когда в качестве ДанныхЗаполнения получена структура.
//	Заполнены будут только те реквизиты, для которых в метаданных установлен флаг "ЗаполнятьИзДанныхЗаполнения"
//
//
// Параметры
//  <Объект>  - <СправочникОбъект>, <ДокументОбъект> и т.д. - Заполняемый объект
//  <ДанныеЗаполнения>  - <произвольный тип> - параметр, полученный в ОбработкеЗаполнения объекта
//  <МетаданныеОбъекта>  - <Метаданные> -
//
//
Процедура ЗаполнитьПоСтруктуре(Объект, ДанныеЗаполнения, МетаданныеОбъекта = Неопределено)	Экспорт

	Если Объект = Неопределено
		ИЛИ ТипЗнч(ДанныеЗаполнения) <> Тип("Структура")
		ИЛИ ДанныеЗаполнения.Количество() = 0 Тогда

		Возврат;

	КонецЕсли;

	Если МетаданныеОбъекта = Неопределено Тогда
		МетаданныеОбъекта = Объект.Метаданные();
	КонецЕсли;
	Если  Метаданные.Справочники.Содержит(МетаданныеОбъекта)
		ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		РазличатьГруппыИЭлементы = МетаданныеОбъекта.Иерархический;
	Иначе
		РазличатьГруппыИЭлементы = Ложь;
	КонецЕсли;

	СтруктураЗаполнения = Новый Структура;
	Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Если Реквизит.ЗаполнятьИзДанныхЗаполнения
			И ДанныеЗаполнения.Свойство(Реквизит.Имя) Тогда
			СтруктураЗаполнения.Вставить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Если Реквизит.ЗаполнятьИзДанныхЗаполнения
			И ДанныеЗаполнения.Свойство(Реквизит.Имя) Тогда
			Если РазличатьГруппыИЭлементы Тогда
				Если (Объект.ЭтоГруппа И Реквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
					ИЛИ
					(НЕ Объект.ЭтоГруппа И Реквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы)
					Тогда
					СтруктураЗаполнения.Вставить(Реквизит.Имя);
				КонецЕсли;
			Иначе
				СтруктураЗаполнения.Вставить(Реквизит.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, ДанныеЗаполнения);
	ЗаполнитьЗначенияСвойств(Объект, СтруктураЗаполнения);

КонецПроцедуры

Процедура ЗаполнитьПодразделениеЗатрат(ПодразделениеЗатрат, Знач Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(ПодразделениеЗатрат) Тогда
		ПодразделениеЗатрат = ОбщегоНазначенияБПВызовСервераПовтИсп.ПодразделениеПоУмолчанию(Организация);
	КонецЕсли;
	
КонецПроцедуры
