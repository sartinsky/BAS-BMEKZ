Функция ФункцияВосстановленияЧтения(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт
	Если Значение = Null Тогда
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПолучитьРезультатКомандыEDIПровайдеру2(ИмяКоманды, ПараметрыКоманды = Null, ВыгружатьОтветEDIПровайдераВСоответствие = Ложь, СерверEDI = Неопределено, ПортEDI = Неопределено) Экспорт
	Если СерверEDI = Неопределено Тогда
		СерверEDI = Константы.скEDI_СерверEDIПровайдера.Получить();
	КонецЕсли;
	
	Если ПортEDI = Неопределено Тогда
		ПортEDI = Константы.скEDI_ПортEDIПровайдера.Получить();
	КонецЕсли;
	
	Если ВыгружатьОтветEDIПровайдераВСоответствие Тогда
		лОтветEDIПровайдера = Новый Соответствие;
	Иначе
		лОтветEDIПровайдера = Новый Структура;
	КонецЕсли;
	
	Попытка
		лСтрокаJSONСПараметрамиЗапросаКEDIПровайдеру = КонтейнерДанных1СВJSONСтроку(ПараметрыКоманды);
		ОтветEDIПровайдера_JSONСтрока = ОтправитьКомандуEDIПровайдеру(ИмяКоманды, лСтрокаJSONСПараметрамиЗапросаКEDIПровайдеру, , СерверEDI, ПортEDI);
		Если ОтветEDIПровайдера_JSONСтрока <> Неопределено Тогда
			ОтветEDIПровайдера_JSONСтрока = СтрЗаменить(ОтветEDIПровайдера_JSONСтрока, Символ(0), Символы.ПС);
			//ОтветEDIПровайдера_JSONСтрока = СтрЗаменить(ОтветEDIПровайдера_JSONСтрока, "\u0000", "\n");
			ПоместитьJSONСтрокуВКонтейнерДанных1С(ОтветEDIПровайдера_JSONСтрока, лОтветEDIПровайдера, ВыгружатьОтветEDIПровайдераВСоответствие);
		КонецЕсли;
	Исключение
		лОтветEDIПровайдера.Вставить("Code", -1);
		лОтветEDIПровайдера.Вставить("Message", ?(Найти(ОтветEDIПровайдера_JSONСтрока, "{"), ОписаниеОшибки(), ОписаниеОшибки() + Символы.ПС + ОтветEDIПровайдера_JSONСтрока));
	КонецПопытки;
	
	Возврат лОтветEDIПровайдера;
	
КонецФункции // ПолучитьРезультатКомандыEDIПровайдеру()

Функция ПолучитьРезультатКомандыEDIПровайдеру(ИмяКоманды, ПараметрыКоманды = Null, ВыгружатьОтветEDIПровайдераВСоответствие = Ложь, СтрокаПодключенияEDI = Неопределено, СерверEDI = Неопределено, ПортEDI = Неопределено) Экспорт
	//Если СерверEDI = Неопределено Тогда
	//	СерверEDI = Константы.скEDI_СерверEDIПровайдера.Получить();
	//КонецЕсли;
	//
	//Если ПортEDI = Неопределено Тогда
	//	ПортEDI = Константы.скEDI_ПортEDIПровайдера.Получить();
	//КонецЕсли;
	
	Если ВыгружатьОтветEDIПровайдераВСоответствие Тогда
		лОтветEDIПровайдера = Новый Соответствие;
	Иначе
		лОтветEDIПровайдера = Новый Структура;
	КонецЕсли;
	
	Попытка
		лСтрокаJSONСПараметрамиЗапросаКEDIПровайдеру = КонтейнерДанных1СВJSONСтроку(ПараметрыКоманды);
		ОтветEDIПровайдера_JSONСтрока = ОтправитьКомандуEDIПровайдеру(ИмяКоманды, лСтрокаJSONСПараметрамиЗапросаКEDIПровайдеру, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
		Если ОтветEDIПровайдера_JSONСтрока <> Неопределено Тогда
			ОтветEDIПровайдера_JSONСтрока = СтрЗаменить(ОтветEDIПровайдера_JSONСтрока, Символ(0), Символы.ПС);
			//ОтветEDIПровайдера_JSONСтрока = СтрЗаменить(ОтветEDIПровайдера_JSONСтрока, "\u0000", "\n");
			ПоместитьJSONСтрокуВКонтейнерДанных1С(ОтветEDIПровайдера_JSONСтрока, лОтветEDIПровайдера, ВыгружатьОтветEDIПровайдераВСоответствие);
		КонецЕсли;
	Исключение
		лОтветEDIПровайдера.Вставить("Code", -1);
		лОтветEDIПровайдера.Вставить("Message", ?(Найти(ОтветEDIПровайдера_JSONСтрока, "{"), ОписаниеОшибки(), ОписаниеОшибки() + Символы.ПС + ОтветEDIПровайдера_JSONСтрока));
	КонецПопытки;
	
	Возврат лОтветEDIПровайдера;
	
КонецФункции // ПолучитьРезультатКомандыEDIПровайдеру()

Функция ПарсингСтрокиПодключения(СтрокаПодключения, ИспользоватьЗащищенноеСоединение, СерверEDI, ПортEDI, Префикс, Ошибка) Экспорт
	Стр = СокрЛП(СтрокаПодключения);
	Если Лев(НРег(Стр), 8) = "https://" Тогда
		ИспользоватьЗащищенноеСоединение = Истина;
		Стр = Сред(Стр, 9);
	ИначеЕсли Лев(НРег(Стр), 7) = "http://" Тогда
		ИспользоватьЗащищенноеСоединение = Ложь;
		Стр = Сред(Стр, 8);
	Иначе
		Ошибка = НСтр("ru = 'Не корректная строка подключения'; uk = 'Не коректний рядок підключення'") + " """ + СтрокаПодключения + """";
		Возврат Ложь;
	КонецЕсли;
	
	н = Найти(Стр, ":");
	Если н > 0 Тогда
		СерверEDI = Лев(Стр, н-1);
		Стр = Сред(Стр, н+1);
	Иначе
		Ошибка = НСтр("ru = 'Не корректная строка подключения'; uk = 'Не коректний рядок підключення'") + " """ + СтрокаПодключения + """";
		Возврат Ложь;
	КонецЕсли;
	
	н = Найти(Стр, "/");
	Если н > 0 Тогда
		ПортСтр = Лев(Стр, н-1);
		Стр = Сред(Стр, н+1);
	Иначе
		ПортСтр = Стр;
		Стр = "";
	КонецЕсли;
	
	Попытка
		ПортEDI = Число(ПортСтр);
	Исключение
		ПортEDI = 0;
	КонецПопытки;
	
	Если ПортEDI = 0 Тогда
		Ошибка = НСтр("ru = 'Не корректная строка подключения'; uk = 'Не коректний рядок підключення'") + " """ + СтрокаПодключения + """";
		Возврат Ложь;
	КонецЕсли;
	
	Если Стр = "" Тогда
		Префикс = "";
	Иначе
		Если Прав(Стр, 1) = "/" Тогда
			Префикс = Стр;
		Иначе
			Префикс = Стр + "/";
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ОтправитьКомандуEDIПровайдеру(ИмяКомандыEDIПровайдера, ПараметрыКоманды, СтрокаПодключенияEDI = Неопределено, СерверEDI = Неопределено, ПортEDI = Неопределено)
	Перем лОтветEDIПровайдера;
	
	ЗащищенноеСоединение = Неопределено;
	ПрефиксЗапроса = "";
	Если СтрокаПодключенияEDI = Неопределено Тогда
		Если СерверEDI = Неопределено Тогда
			СерверEDI = Константы.скEDI_СерверEDIПровайдера.Получить();
			Если СерверEDI = "" Тогда
				СерверEDI = "localhost";
			КонецЕсли;
		КонецЕсли;
		
		Если ПортEDI = Неопределено Тогда
			ПортEDI = Константы.скEDI_ПортEDIПровайдера.Получить();
			Если ПортEDI = 0 Тогда
				ПортEDI = 9080;
			КонецЕсли;	
		КонецЕсли;
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
	Иначе
		ИспользоватьЗащищенноеСоединение = Истина;
		ТекСерверEDI = Неопределено;
		ТекПортEDI = Неопределено;
		Ошибка = "";
		Если ПарсингСтрокиПодключения(СтрокаПодключенияEDI, ИспользоватьЗащищенноеСоединение, ТекСерверEDI, ТекПортEDI, ПрефиксЗапроса, Ошибка) Тогда
			Если ИспользоватьЗащищенноеСоединение Тогда
				ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL;
			КонецЕсли;
			СерверEDI = ТекСерверEDI;
			ПортEDI = ТекПортEDI;
		Иначе
			Возврат "{Code:-1;Message:""" + СтрЗаменить(Ошибка, """", """""") + """}";
		КонецЕсли;
	КонецЕсли;
	
	Соединение = Новый HTTPСоединение(СерверEDI, ПортEDI, , , , 0, ЗащищенноеСоединение);
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
	Заголовки.Вставить("X-PRG-TYPE", "1C, " + Константы.скEDI_НомерВерсии.Получить());
	Запрос = Новый HTTPЗапрос("/" + ПрефиксЗапроса + ИмяКомандыEDIПровайдера, Заголовки);
	Запрос.УстановитьТелоИзСтроки(ПараметрыКоманды);
	лHTTPОтвет = Соединение.ОтправитьДляОбработки(Запрос);
	лОтветEDIПровайдера = лHTTPОтвет.ПолучитьТелоКакСтроку();

	Возврат лОтветEDIПровайдера;
КонецФункции // ОтправитьКомандуEDIПровайдеру()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ПоместитьJSONСтрокуВКонтейнерДанных1С(СтрокаJSON, КонтейнерДанных1С, ПоместитьJSONСтрокуВСоответствие)
	КонтейнерДанных1С = JSONСтрокуВКонтейнерДанных1С(СтрокаJSON, ПоместитьJSONСтрокуВСоответствие);
КонецПроцедуры // ПоместитьJSONСтрокуВСтруктуру()

Функция JSONСтрокуВКонтейнерДанных1С(СтрокаJSON, ПоместитьJSONСтрокуВСоответствие = Ложь) Экспорт
	//ЕСЛИ ВЕРСИЯ ПЛАТФОРМЫ 8.3.6.1977 и старше
	лЧтениеJSON = Новый ЧтениеJSON();
	лЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	КонтейнерДанных1С = ПрочитатьJSON(лЧтениеJSON, ПоместитьJSONСтрокуВСоответствие);
	//...ЕСЛИ ВЕРСИЯ ПЛАТФОРМЫ 8.3.6.1977 и старше
	
	//ЕСЛИ ВЕРСИЯ ПЛАТФОРМЫ ниже 8.3.6.1977
	//ОбработкаJSON = Обработки.скEDI_JSON.Создать();
	//КонтейнерДанных1С = ОбработкаJSON.ПрочитатьJSON82(СтрокаJSON, , , ПоместитьJSONСтрокуВСоответствие);
	//...ЕСЛИ ВЕРСИЯ ПЛАТФОРМЫ ниже 8.3.6.1977
	
	Возврат КонтейнерДанных1С;
КонецФункции

Функция КонтейнерДанных1СВJSONСтроку(ПараметрыКоманды) Экспорт
	Если ПараметрыКоманды = Null Тогда
		лСтрокаJSON = "";
	Иначе
		//ЕСЛИ ВЕРСИЯ ПЛАТФОРМЫ 8.3.6.1977 и старше
		лЗаписьJSON = Новый ЗаписьJSON;
		лЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(лЗаписьJSON, ПараметрыКоманды, , "ФункцияВосстановленияЧтения", скEDI_КомандыEDIПровайдеру);
		лСтрокаJSON = лЗаписьJSON.Закрыть();
		//...ЕСЛИ ВЕРСИЯ ПЛАТФОРМЫ 8.3.6.1977 и старше
		
		//ЕСЛИ ВЕРСИЯ ПЛАТФОРМЫ ниже 8.3.6.1977
		//ОбработкаJSON = Обработки.скEDI_JSON.Создать();
		//лСтрокаJSON = ОбработкаJSON.ЗаписатьJSON82(ПараметрыКоманды);
		//...ЕСЛИ ВЕРСИЯ ПЛАТФОРМЫ ниже 8.3.6.1977
	КонецЕсли;
	Возврат лСтрокаJSON;
КонецФункции
