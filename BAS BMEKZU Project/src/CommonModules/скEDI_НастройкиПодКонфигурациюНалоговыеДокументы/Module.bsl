
Функция ТипЧерезПопытку(ТипСтр)
	Попытка
		Возврат Тип(ТипСтр);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
КонецФункции

Функция НайтиСоздатьКонтрагента(Контрагент, ИНН, КодПоЕДРПОУ, КодФилиала, Наименование)
	ИДКонфигурации = скEDI_НастройкиПодКонфигурацию.ИДКонфигурации();
	Если ЗначениеЗаполнено(ИНН) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	Контрагенты.Ссылка
		               |ИЗ
		               |	Справочник.Контрагенты КАК Контрагенты
		               |ГДЕ
		               |	Контрагенты.ИНН = &ИНН
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Контрагенты.ПометкаУдаления";
		
		Если ИдКонфигурации = "ЕРП" ИЛИ ИдКонфигурации = "BASУТ" ИЛИ ИдКонфигурации = "BASERP" ИЛИ ИдКонфигурации = "BASКУП" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Контрагенты.ИНН", "Контрагенты.ИННПлательщикаНДС");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ИНН", ИНН);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Контрагент = Выборка.Ссылка;
			Возврат Истина;
		Иначе
			//КодПоЕДРПОУ = "";
			Если не ЗначениеЗаполнено(КодПоЕДРПОУ) Тогда
				Если Не скEDI_ОбщегоНазначения.ПолучитьЕДРПОУ(ИНН, КодПоЕДРПОУ) Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			Если ИдКонфигурации = "BASУТ" ИЛИ ИдКонфигурации = "BASERP" ИЛИ ИдКонфигурации = "BASКУП" Тогда
				Партнер = Справочники.Партнеры.НайтиПоРеквизиту("НаименованиеПолное", Наименование);
				Если Партнер = Справочники.Партнеры .ПустаяСсылка() Тогда
					ПартнерОбъект 				  		= Справочники.Партнеры.СоздатьЭлемент();
					ПартнерОбъект.Наименование 			= Наименование;
					ПартнерОбъект.НаименованиеПолное 	= Наименование;
					ПартнерОбъект.Поставщик 			= Истина;
					ПартнерОбъект.ГруппаДоступа         = Справочники.ГруппыДоступаПартнеров.НайтиПоНаименованию("Поставщики");
					ПартнерОбъект.ЮрФизЛицо 		    = ?(СтрДлина(КодПоЕДРПОУ) > 8, Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо, Перечисления.КомпанияЧастноеЛицо.Компания);
					ПартнерОбъект.Записать();
					Партнер = ПартнерОбъект.Ссылка;
				КонецЕсли;
				
				КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
				КонтрагентОбъект.Наименование 		= Наименование;
				КонтрагентОбъект.НаименованиеПолное = Наименование;
				КонтрагентОбъект.КодПоЕДРПОУ	 	= КодПоЕДРПОУ;
				КонтрагентОбъект.ИННПлательщикаНДС 	= ИНН;
				КонтрагентОбъект.Партнер            = Партнер;
				КонтрагентОбъект.ПлательщикНДС      = Истина;
				КонтрагентОбъект.КодФилиала 		= КодФилиала;
				КонтрагентОбъект.ЮрФизЛицо          = ?(СтрДлина(КодПоЕДРПОУ) > 8, Перечисления.ЮрФизЛицо.ФизЛицо, Перечисления.ЮрФизЛицо.ЮрЛицо);
				
				Попытка
					КонтрагентОбъект.Записать();
					Контрагент = КонтрагентОбъект.Ссылка;
				Исключение
					//Сообщить("Контрагент не создан " + ОписаниеОшибки());
					Возврат Ложь;
				КонецПопытки;
				Возврат Истина;
			Иначе
				НаименованиеГруппы = "Созданные при загрузке электронных документов";
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
				|	Контрагенты.Ссылка
				|ИЗ
				|	Справочник.Контрагенты КАК Контрагенты
				|ГДЕ
				|	Контрагенты.Наименование = &НаименованиеГруппы
				|	И НЕ Контрагенты.ПометкаУдаления
				|	И Контрагенты.ЭтоГруппа";
				
				Запрос.УстановитьПараметр("НаименованиеГруппы", НаименованиеГруппы);
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда 
					ГруппаКонтрагетов = Выборка.Ссылка;
				Иначе
					ГруппаКонтрагетовОбъект = Справочники.Контрагенты.СоздатьГруппу();
					ГруппаКонтрагетовОбъект.Наименование = НаименованиеГруппы;
					ГруппаКонтрагетовОбъект.Записать();
					ГруппаКонтрагетов = ГруппаКонтрагетовОбъект.Ссылка;
				КонецЕсли;
				
				КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
				КонтрагентОбъект.Наименование 		= Наименование;
				КонтрагентОбъект.НаименованиеПолное = Наименование;
				КонтрагентОбъект.КодПоЕДРПОУ	 	= КодПоЕДРПОУ;
				КонтрагентОбъект.ИНН 				= ИНН;
				КонтрагентОбъект.КодФилиала 		= КодФилиала;
				МетаданныеКонтрагента = КонтрагентОбъект.Метаданные();
				Если МетаданныеКонтрагента.Реквизиты.Найти("ЮридическоеФизическоеЛицо") <> Неопределено Тогда
					КонтрагентОбъект.ЮридическоеФизическоеЛицо = ?(СтрДлина(КодПоЕДРПОУ) <= 8, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
				ИначеЕсли МетаданныеКонтрагента.Реквизиты.Найти("ЮрФизЛицо") <> Неопределено Тогда
					КонтрагентОбъект.ЮрФизЛицо = ?(СтрДлина(КодПоЕДРПОУ) <= 8, Перечисления.ЮрФизЛицо.ЮрЛицо, Перечисления.ЮрФизЛицо.ФизЛицо);
				КонецЕсли;
				КонтрагентОбъект.Комментарий		= "Создан автоматически при загрузке электронных документов";
				КонтрагентОбъект.Родитель			= ГруппаКонтрагетов;
				Попытка
					КонтрагентОбъект.Записать();
					Контрагент = КонтрагентОбъект.Ссылка;
				Исключение
					//Сообщить("Контрагент не создан " + ОписаниеОшибки());
					Возврат Ложь;
				КонецПопытки;
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция УстановитьОтметкуОРегистрацииНалоговогоДокумента(ЭлектронныйДокументОбъектСсылка, Документ1С, ТелоДокумента = "") Экспорт
	ИДКонфигурации = скEDI_НастройкиПодКонфигурацию.ИДКонфигурации();
	
	ДатаРегистрацииВДФС = ЭлектронныйДокументОбъектСсылка.ДатаРегистрацииВДФС;
	ЗарегистрированВДФС = ЭлектронныйДокументОбъектСсылка.ЗарегистрированВДФС;
	
	Если ЗначениеЗаполнено(Документ1С) Тогда
		ТипДокумента = ТипЗнч(Документ1С);
		МетаданныеДокумента = Документ1С.Метаданные();
		Если ТипДокумента = ТипЧерезПопытку("ДокументСсылка.НалоговаяНакладная") Тогда
			РедактироватьДокумент = Ложь;
			Если ЗарегистрированВДФС Тогда
				Если ИдКонфигурации = "ЕРП" ИЛИ ИдКонфигурации = "BASУТ" ИЛИ ИдКонфигурации = "BASERP" ИЛИ ИдКонфигурации = "BASКУП" Тогда
					Если Документ1С.СтатусРегистрацииВЕРНН <> ПредопределенноеЗначение("Перечисление.СтатусыРегистрацииВЕРНННалоговыхДокументов.ЗарегистрированВЕРНН") Тогда
						РедактироватьДокумент = Истина;
					КонецЕсли;
				ИначеЕсли Документ1С.ВключенаВЕдиныйРеестрНалоговыхНакладных <> Истина Тогда
					РедактироватьДокумент = Истина;
				КонецЕсли;
			КонецЕсли;
			Если РедактироватьДокумент Тогда
				НалоговаяНакладная = Документ1С.ПолучитьОбъект();
				
				Если ИдКонфигурации = "ЕРП" ИЛИ ИдКонфигурации = "BASУТ" ИЛИ ИдКонфигурации = "BASERP" ИЛИ ИдКонфигурации = "BASКУП" Тогда
					НалоговаяНакладная.СтатусРегистрацииВЕРНН = ПредопределенноеЗначение("Перечисление.СтатусыРегистрацииВЕРНННалоговыхДокументов.ЗарегистрированВЕРНН");
				Иначе
					НалоговаяНакладная.ВключенаВЕдиныйРеестрНалоговыхНакладных = Истина;
				КонецЕсли;
				
				НалоговаяНакладная.ОбменДанными.Загрузка = Истина;
				НалоговаяНакладная.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			Возврат Истина;
		ИначеЕсли ТипДокумента = ТипЧерезПопытку("ДокументСсылка.Приложение2КНалоговойНакладной") Тогда
			РедактироватьДокумент = Ложь;
			Если ЗарегистрированВДФС Тогда
				Если ИдКонфигурации = "ЕРП" ИЛИ ИдКонфигурации = "BASУТ" ИЛИ ИдКонфигурации = "BASERP" ИЛИ ИдКонфигурации = "BASКУП" Тогда
					Если Документ1С.СтатусРегистрацииВЕРНН <> ПредопределенноеЗначение("Перечисление.СтатусыРегистрацииВЕРНННалоговыхДокументов.ЗарегистрированВЕРНН") Тогда
						РедактироватьДокумент = Истина;
					КонецЕсли;
				ИначеЕсли Документ1С.ВключенаВЕдиныйРеестрНалоговыхНакладных <> Истина Тогда
					РедактироватьДокумент = Истина;
				КонецЕсли;
				
				МетаданныеДокументаДатаВключенияВЕдиныйРеестрНалоговыхНакладных = МетаданныеДокумента.Реквизиты.Найти("ДатаВключенияВЕдиныйРеестрНалоговыхНакладных");
				Если МетаданныеДокументаДатаВключенияВЕдиныйРеестрНалоговыхНакладных <> Неопределено Тогда
					Если Документ1С.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных <> МетаданныеДокументаДатаВключенияВЕдиныйРеестрНалоговыхНакладных.Тип.ПривестиЗначение(ДатаРегистрацииВДФС) Тогда
						РедактироватьДокумент = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если РедактироватьДокумент Тогда
				Приложение2КНалоговойНакладной = Документ1С.ПолучитьОбъект();
				
				Если ИдКонфигурации = "ЕРП" ИЛИ ИдКонфигурации = "BASУТ" ИЛИ ИдКонфигурации = "BASERP" ИЛИ ИдКонфигурации = "BASКУП" Тогда
					Приложение2КНалоговойНакладной.СтатусРегистрацииВЕРНН = ПредопределенноеЗначение("Перечисление.СтатусыРегистрацииВЕРНННалоговыхДокументов.ЗарегистрированВЕРНН");
				Иначе
					Приложение2КНалоговойНакладной.ВключенаВЕдиныйРеестрНалоговыхНакладных = Истина;
				КонецЕсли;
				Если МетаданныеДокумента.Реквизиты.Найти("ДатаВключенияВЕдиныйРеестрНалоговыхНакладных") <> Неопределено Тогда
					Приложение2КНалоговойНакладной.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных  = ДатаРегистрацииВДФС;
				КонецЕсли;
				Приложение2КНалоговойНакладной.ОбменДанными.Загрузка = Истина;
				Приложение2КНалоговойНакладной.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			Возврат Истина;
		ИначеЕсли ТипДокумента = ТипЧерезПопытку("ДокументСсылка.РегистрацияВходящегоНалоговогоДокумента") Тогда
			РедактироватьДокумент = Ложь;
			Если ЗарегистрированВДФС Тогда
				МетаданныеДокументаДатаВключенияВЕдиныйРеестрНалоговыхНакладных = МетаданныеДокумента.Реквизиты.Найти("ДатаВключенияВЕдиныйРеестрНалоговыхНакладных");
				Если МетаданныеДокументаДатаВключенияВЕдиныйРеестрНалоговыхНакладных <> Неопределено Тогда
					Если Документ1С.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных <> МетаданныеДокументаДатаВключенияВЕдиныйРеестрНалоговыхНакладных.Тип.ПривестиЗначение(ДатаРегистрацииВДФС) Тогда
						РедактироватьДокумент = Истина;
					КонецЕсли;
				КонецЕсли;
				Если МетаданныеДокумента.Реквизиты.Найти("ЕстьXML") <> Неопределено Тогда
					Если Документ1С.ЕстьXML <> Истина Тогда
						РедактироватьДокумент = Истина;
					КонецЕсли;
				КонецЕсли;
				Если МетаданныеДокумента.Реквизиты.Найти("ДанныеXML") <> Неопределено Тогда
					Если Документ1С.ДанныеXML.Получить() = Неопределено Тогда
						РедактироватьДокумент = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если РедактироватьДокумент Тогда
				ЗКП = Документ1С.ПолучитьОбъект();
				
				//Если ЗКП.Контрагент.Пустая() Тогда
				//	ЗКП.Контрагент = ДКонтрагент;
				//	Если ИдКонфигурации = "ЕРП" ИЛИ ИдКонфигурации = "BASУТ" Тогда
				//		ЗКП.Партнер  = ДКонтрагент.Партнер;
				//	КонецЕсли;
				//КонецЕсли;
				
				Если МетаданныеДокумента.Реквизиты.Найти("ДатаВключенияВЕдиныйРеестрНалоговыхНакладных") <> Неопределено Тогда
					ЗКП.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных  = ДатаРегистрацииВДФС;
				КонецЕсли;
				Если МетаданныеДокумента.Реквизиты.Найти("ДанныеXML") <> Неопределено Тогда
					Если Не ЗначениеЗаполнено(ТелоДокумента) Тогда
						ЭлектронныйДокумент = ЭлектронныйДокументОбъектСсылка.Ссылка;
						СодержаниеЭлектронногоДокумента = скEDI_ОбщегоНазначения.ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент);
						Если СодержаниеЭлектронногоДокумента <> Неопределено Тогда
							ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(ТелоДокумента) Тогда
						//Снимаем ЭЦП
						ЗапросНаРазборСообщения = Новый Структура("Body", ТелоДокумента);
						РезультатРазбораСообщения = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("parsemessage", ЗапросНаРазборСообщения);
						Если РезультатРазбораСообщения.Code = 0 Тогда
							ТелоДокументаБезПодписей = РезультатРазбораСообщения.Text;
							
							Если МетаданныеДокумента.Реквизиты.Найти("ЕстьXML") <> Неопределено Тогда
								ЗКП.ЕстьXML   = Истина;
							КонецЕсли;
							Если МетаданныеДокумента.Реквизиты.Найти("ЭлектронныйДокумент") <> Неопределено Тогда
								ЗКП.ЭлектронныйДокумент   = Истина;
							КонецЕсли;
							//ЗКП.ЭлектронныйДокумент = Истина;
							//ЗКП.Звит1С_DOC_ID   = DOC_ID;
							//
							//ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
							//Текст = Новый ТекстовыйДокумент;
							//Текст.УстановитьТекст(XML);
							//Текст.Записать(ИмяВременногоФайла, "windows-1251");
							//
							//ЗКП.ДанныеXML = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяВременногоФайла), Новый СжатиеДанных(9));
							ЗКП.ДанныеXML = Новый ХранилищеЗначения(Base64Значение(ТелоДокументаБезПодписей), Новый СжатиеДанных(9));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ЗКП.ОбменДанными.Загрузка = Истина;
				ЗКП.Записать();
			КонецЕсли;
			Возврат Истина;
		ИначеЕсли ТипДокумента = ТипЧерезПопытку("ДокументСсылка.ЗаписьКнигиПриобретения") Тогда
			РедактироватьДокумент = Ложь;
			Если ЗарегистрированВДФС Тогда
				МетаданныеДокументаДатаВключенияВЕдиныйРеестрНалоговыхНакладных = МетаданныеДокумента.Реквизиты.Найти("ДатаВключенияВЕдиныйРеестрНалоговыхНакладных");
				Если МетаданныеДокументаДатаВключенияВЕдиныйРеестрНалоговыхНакладных <> Неопределено Тогда
					Если Документ1С.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных <> МетаданныеДокументаДатаВключенияВЕдиныйРеестрНалоговыхНакладных.Тип.ПривестиЗначение(ДатаРегистрацииВДФС) Тогда
						РедактироватьДокумент = Истина;
					КонецЕсли;
				КонецЕсли;
				Если МетаданныеДокумента.Реквизиты.Найти("ЕстьXML") <> Неопределено Тогда
					Если Документ1С.ЕстьXML <> Истина Тогда
						РедактироватьДокумент = Истина;
					КонецЕсли;
				КонецЕсли;
				Если МетаданныеДокумента.Реквизиты.Найти("ДанныеXML") <> Неопределено Тогда
					Если Документ1С.ДанныеXML.Получить() = Неопределено Тогда
						РедактироватьДокумент = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если РедактироватьДокумент Тогда
				ЗКП = Документ1С.ПолучитьОбъект();
				
				//Если ЗКП.Контрагент.Пустая() Тогда
				//	ЗКП.Контрагент = ДКонтрагент;
				//	Если ИдКонфигурации = "ЕРП" ИЛИ ИдКонфигурации = "BASУТ" Тогда
				//		ЗКП.Партнер  = ДКонтрагент.Партнер;
				//	КонецЕсли;
				//КонецЕсли;
				
				Если МетаданныеДокумента.Реквизиты.Найти("ДатаВключенияВЕдиныйРеестрНалоговыхНакладных") <> Неопределено Тогда
					ЗКП.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных  = ДатаРегистрацииВДФС;
				КонецЕсли;
				Если МетаданныеДокумента.Реквизиты.Найти("ДанныеXML") <> Неопределено Тогда
					Если Не ЗначениеЗаполнено(ТелоДокумента) Тогда
						ЭлектронныйДокумент = ЭлектронныйДокументОбъектСсылка.Ссылка;
						СодержаниеЭлектронногоДокумента = скEDI_ОбщегоНазначения.ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент);
						Если СодержаниеЭлектронногоДокумента <> Неопределено Тогда
							ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(ТелоДокумента) Тогда
						//Снимаем ЭЦП
						ЗапросНаРазборСообщения = Новый Структура("Body", ТелоДокумента);
						РезультатРазбораСообщения = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("parsemessage", ЗапросНаРазборСообщения);
						Если РезультатРазбораСообщения.Code = 0 Тогда
							ТелоДокументаБезПодписей = РезультатРазбораСообщения.Text;
							
							Если МетаданныеДокумента.Реквизиты.Найти("ЕстьXML") <> Неопределено Тогда
								ЗКП.ЕстьXML   = Истина;
							КонецЕсли;
							Если МетаданныеДокумента.Реквизиты.Найти("ЭлектронныйДокумент") <> Неопределено Тогда
								ЗКП.ЭлектронныйДокумент   = Истина;
							КонецЕсли;
							//ЗКП.ЭлектронныйДокумент = Истина;
							//ЗКП.Звит1С_DOC_ID   = DOC_ID;
							//
							//ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
							//Текст = Новый ТекстовыйДокумент;
							//Текст.УстановитьТекст(XML);
							//Текст.Записать(ИмяВременногоФайла, "windows-1251");
							//
							//ЗКП.ДанныеXML = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяВременногоФайла), Новый СжатиеДанных(9));
							ЗКП.ДанныеXML = Новый ХранилищеЗначения(Base64Значение(ТелоДокументаБезПодписей), Новый СжатиеДанных(9));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ЗКП.ОбменДанными.Загрузка = Истина;
				ЗКП.Записать();
			КонецЕсли;
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция НайтиНалоговыйДокумент(Документ1С, Организация, ВидЭлектронногоДокумента, ТипДокумента, ВхИсх, ЭлектронныйДокументОбъектСсылка,
	ИмяШаблона, СоответствиеЗначений)
	
	ИДКонфигурации = скEDI_НастройкиПодКонфигурацию.ИДКонфигурации();
	
	Если ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий Тогда
		ИмяДокументаЗКП = "РегистрацияВходящегоНалоговогоДокумента";
		Если ИДКонфигурации = "УТ" ИЛИ ИДКонфигурации = "УПП"  Тогда
			ИмяДокументаЗКП = "ЗаписьКнигиПриобретения";
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Док.Ссылка,
		               |	Док.Организация,
		               |	Док.Контрагент,
		               |	Док.Контрагент.ИНН КАК КонтрагентИНН,
		               |	Док.НомерВходящегоДокумента,
		               |	Док.ДатаВходящегоДокумента,
		               |	Док.ВидОперации,
		              // |	Док.Звит1С_DOC_ID КАК DOC_ID,
		               |	Док.СуммаНДСДокумента КАК СуммаНДС
		               |ИЗ
		               |	Документ.РегистрацияВходящегоНалоговогоДокумента КАК Док
		               |ГДЕ
		               |	Док.ДатаВходящегоДокумента >= &НачДата
		               |	И Док.ДатаВходящегоДокумента <= &КонДата
		               |	И Док.НомерВходящегоДокумента = &НомерВходящегоДокумента
		               |	И Док.Организация = &Организация
		               |	И Док.Контрагент.ИНН = &ИНН
		               |	И Док.ВидОперации В(&ВидыОперации)
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Док.ПометкаУдаления";
					   
		Если ИмяДокументаЗКП <> "РегистрацияВходящегоНалоговогоДокумента" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрацияВходящегоНалоговогоДокумента", ИмяДокументаЗКП);
		КонецЕсли;
		
		Если ИдКонфигурации = "ЕРП" ИЛИ ИдКонфигурации = "BASУТ" ИЛИ ИдКонфигурации = "BASERP" ИЛИ ИдКонфигурации = "BASКУП" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Контрагент.ИНН", "Контрагент.ИННПлательщикаНДС");
		КонецЕсли;
		
		ВидыОперации = Новый СписокЗначений;
		Если ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная Тогда
			ВидыОперации.Добавить(Перечисления["ВидыОпераций"+ИмяДокументаЗКП].НалоговаяНакладная);
		ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной Тогда
			ВидыОперации.Добавить(Перечисления["ВидыОпераций"+ИмяДокументаЗКП].РасчетКорректировкиВозврат);
			ВидыОперации.Добавить(Перечисления["ВидыОпераций"+ИмяДокументаЗКП].РасчетКорректировкиКорректировка);
		КонецЕсли;
		Запрос.УстановитьПараметр("ВидыОперации", ВидыОперации);
		
		ДатаДокумента = ЭлектронныйДокументОбъектСсылка.ДатаДокумента;
		Запрос.УстановитьПараметр("НачДата", НачалоДня(ДатаДокумента));
		Запрос.УстановитьПараметр("КонДата", КонецДня(ДатаДокумента));
		
		Запрос.УстановитьПараметр("НомерВходящегоДокумента", ЭлектронныйДокументОбъектСсылка.НомерДокумента);
		Запрос.УстановитьПараметр("Организация", Организация.Организация1С);
		Запрос.УстановитьПараметр("ИНН", ЭлектронныйДокументОбъектСсылка.ИННПродавца);
		
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Документ1С = Выборка.Ссылка;
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий Тогда
		Если ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная Тогда
			ДлинаНомера = 8;//9;
			Если ИДКонфигурации = "BASERP"  Тогда
				ДлинаНомера = 6;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	НалоговаяНакладная.Ссылка,
			               |	НалоговаяНакладная.Организация,
			               |	НалоговаяНакладная.Контрагент,
			               |	НалоговаяНакладная.Контрагент.ИНН КАК КонтрагентИНН
			               |ИЗ
			               |	Документ.НалоговаяНакладная КАК НалоговаяНакладная
			               |ГДЕ
			               |	НалоговаяНакладная.Организация = &Организация
			               |	И НалоговаяНакладная.Дата >= &НачДата
			               |	И НалоговаяНакладная.Дата <= &КонДата
			               |	И НалоговаяНакладная.Номер ПОДОБНО &МаскаНомера
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	НалоговаяНакладная.ПометкаУдаления";
						   
			Если ИдКонфигурации = "ЕРП" ИЛИ ИдКонфигурации = "BASУТ"  ИЛИ ИдКонфигурации = "BASERP"  ИЛИ ИдКонфигурации = "BASКУП" Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Контрагент.ИНН", "Контрагент.ИННПлательщикаНДС");
			КонецЕсли;
			
			ДатаДокумента = ЭлектронныйДокументОбъектСсылка.ДатаДокумента;
			Запрос.УстановитьПараметр("НачДата", НачалоДня(ДатаДокумента));
			Запрос.УстановитьПараметр("КонДата", КонецДня(ДатаДокумента));
			
			МаскаНомера = СокрЛП(ЭлектронныйДокументОбъектСсылка.НомерДокумента);
			ПозСлеш = Найти(МаскаНомера, "/");
			Если ПозСлеш >= 1 Тогда
				МаскаНомера = Лев(МаскаНомера, ПозСлеш-1);
			КонецЕсли;
			Если СтрДлина(МаскаНомера) >= ДлинаНомера Тогда
				МаскаНомера = "%" + МаскаНомера;
			Иначе
				МаскаНомера = "%" + Прав("000000000000000" + МаскаНомера, ДлинаНомера);
			КонецЕсли;
			
			Запрос.УстановитьПараметр("МаскаНомера", МаскаНомера);
			
			Запрос.УстановитьПараметр("Организация", Организация.Организация1С);
			//Запрос.УстановитьПараметр("ИНН", ЭлектронныйДокументОбъектСсылка.ИННПродавца);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Документ1С = Выборка.Ссылка;
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной Тогда
			ДлинаНомера = 8;//9;
			Если ИДКонфигурации = "BASERP"  Тогда
				ДлинаНомера = 6;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	Приложение2КНалоговойНакладной.Ссылка,
			               |	Приложение2КНалоговойНакладной.Организация,
			               |	Приложение2КНалоговойНакладной.Контрагент,
			               |	Приложение2КНалоговойНакладной.Контрагент.ИНН КАК КонтрагентИНН
			               |ИЗ
			               |	Документ.Приложение2КНалоговойНакладной КАК Приложение2КНалоговойНакладной
			               |ГДЕ
			               |	Приложение2КНалоговойНакладной.Организация = &Организация
			               |	И Приложение2КНалоговойНакладной.Дата >= &НачДата
			               |	И Приложение2КНалоговойНакладной.Дата <= &КонДата
			               |	И Приложение2КНалоговойНакладной.Номер ПОДОБНО &МаскаНомера
			               |
			               |УПОРЯДОЧИТЬ ПО
			               |	Приложение2КНалоговойНакладной.ПометкаУдаления";
						   
			Если ИдКонфигурации = "ЕРП" ИЛИ ИдКонфигурации = "BASУТ"  ИЛИ ИдКонфигурации = "BASERP"  ИЛИ ИдКонфигурации = "BASКУП" Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Контрагент.ИНН", "Контрагент.ИННПлательщикаНДС");
			КонецЕсли;
			//Если ИдКонфигурации = "ЕРП" ИЛИ ИдКонфигурации = "BASУТ" Тогда
			//	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Контрагент.ИНН", "Контрагент.ИННПлательщикаНДС");
			//КонецЕсли;
			
			ДатаДокумента = ЭлектронныйДокументОбъектСсылка.ДатаДокумента;
			Запрос.УстановитьПараметр("НачДата", НачалоДня(ДатаДокумента));
			Запрос.УстановитьПараметр("КонДата", КонецДня(ДатаДокумента));
			
			МаскаНомера = СокрЛП(ЭлектронныйДокументОбъектСсылка.НомерДокумента);
			ПозСлеш = Найти(МаскаНомера, "/");
			Если ПозСлеш >= 1 Тогда
				МаскаНомера = Лев(МаскаНомера, ПозСлеш-1);
			КонецЕсли;
			Если СтрДлина(МаскаНомера) >= ДлинаНомера Тогда
				МаскаНомера = "%" + МаскаНомера;
			Иначе
				МаскаНомера = "%" + Прав("000000000000000" + МаскаНомера, ДлинаНомера);
			КонецЕсли;
			
			Запрос.УстановитьПараметр("МаскаНомера", МаскаНомера);
			
			Запрос.УстановитьПараметр("Организация", Организация.Организация1С);
			//Запрос.УстановитьПараметр("ИНН", ЭлектронныйДокументОбъектСсылка.ИННПродавца);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Документ1С = Выборка.Ссылка;
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция СоздатьЗаполнитьНалоговыйДокумент(Документ1С, Организация, ВидЭлектронногоДокумента, ТипДокумента, ВхИсх, ЭлектронныйДокументОбъектСсылка,
	ИмяШаблона, СоответствиеЗначений, ТелоДокумента = "")
	
	ИДКонфигурации = скEDI_НастройкиПодКонфигурацию.ИДКонфигурации();
	
	Таблица0 = СоответствиеЗначений.Получить("0");
	Если ТипЗнч(Таблица0) = Тип("Массив") Тогда
		Если Таблица0.Количество() >= 1 Тогда
			Таблица0ПерваяСтрока = Таблица0[0];
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	Таблица1 = СоответствиеЗначений.Получить("1");
	
	Если ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий Тогда
		ДОрганизация = Организация.Организация1С;
		Если не ЗначениеЗаполнено(ДОрганизация) Тогда
			Возврат Ложь;
		КонецЕсли;
		ДКонтрагент = Неопределено;
		Если не НайтиСоздатьКонтрагента(ДКонтрагент, Таблица0ПерваяСтрока.Получить("HKSEL"), Таблица0ПерваяСтрока.Получить("HTINSEL"), Таблица0ПерваяСтрока.Получить("HNUM2"), Таблица0ПерваяСтрока.Получить("HNAMESEL")) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		НомерДокумента = ЭлектронныйДокументОбъектСсылка.НомерДокумента;
		ДатаДокумента = ЭлектронныйДокументОбъектСсылка.ДатаДокумента;
		ДатаРегистрацииВДФС = ЭлектронныйДокументОбъектСсылка.ДатаРегистрацииВДФС;
		ЗарегистрированВДФС = ЭлектронныйДокументОбъектСсылка.ЗарегистрированВДФС;
		
		ИмяДокументаЗКП = "РегистрацияВходящегоНалоговогоДокумента";
		Если ИДКонфигурации = "УТ" ИЛИ ИДКонфигурации = "УПП"  Тогда
			ИмяДокументаЗКП = "ЗаписьКнигиПриобретения";
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Документ1С) Тогда
			ЗКП = Документы[ИмяДокументаЗКП].СоздатьДокумент();
			МетаданныеДокумента = ЗКП.Метаданные();
			Если  ИдКонфигурации = "БП"  Тогда
				Выполнить("мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
						|ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЗКП, глЗначениеПеременной(""глТекущийПользователь""), мВалютаРегламентированногоУчета)");
				//Выполнить("ЗаполнениеДокументов.ЗаполнитьОбязательныеРеквизитыШапкиНовогоДокумента(ЭтотОбъект, глЗначениеПеременной(""глТекущийПользователь""))");
			ИначеЕсли ИдКонфигурации = "УТП" Тогда
				Выполнить("мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
						|ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЗКП, глЗначениеПеременной(""глТекущийПользователь""), мВалютаРегламентированногоУчета, ""Продажа"")");	
				//Выполнить("ОбщегоНазначения.ЗаполнитьОбязательныеРеквизитыШапкиНовогоДокумента(ЭтотОбъект, глЗначениеПеременной(""глТекущийПользователь""));");
			ИначеЕсли ИдКонфигурации = "УТ" Тогда
				Выполнить("мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
						|ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЗКП, глЗначениеПеременной(""глТекущийПользователь""), мВалютаРегламентированногоУчета)");
			ИначеЕсли ИдКонфигурации = "УПП" Тогда
				Выполнить("ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЗКП)");	
			ИначеЕсли ИдКонфигурации = "БП20"
				ИЛИ ИДКонфигурации = "БП20ИНАГРО" Тогда
				Выполнить("
				|ЗКП.Ответственный = Пользователи.ТекущийПользователь();
				|ЗаполнениеДокументов.Заполнить(ЗКП, Новый Структура);
				|");
			ИначеЕсли ИдКонфигурации = "ЕРП" Тогда
				Выполнить("
				|ЗКП.Ответственный = Пользователи.ТекущийПользователь();
				|ЗаполнениеДокументов.Заполнить(ЗКП, Новый Структура);
				|");
			ИначеЕсли ИдКонфигурации = "BASКУП" Тогда
				Выполнить("
				|ЗКП.Ответственный = Пользователи.ТекущийПользователь();
				|ЗаполнениеДокументов.Заполнить(ЗКП, Новый Структура);
				|");
			ИначеЕсли ИдКонфигурации = "BASERP" Тогда
				Выполнить("
				|ЗКП.Ответственный = Пользователи.ТекущийПользователь();
				|ЗаполнениеДокументов.Заполнить(ЗКП, Новый Структура);
				|");
			ИначеЕсли ИдКонфигурации = "BASУТ" Тогда
				Выполнить("
				|ЗКП.Ответственный = Пользователи.ТекущийПользователь();
				|ЗаполнениеДокументов.Заполнить(ЗКП, Новый Структура);
				|");
			КонецЕсли;
			
			//ЗКП.Дата 		= КонецДня(ТекущаяДата()) - 59;
			//Если СоздаватьДокументыДатойВыпискиКонтрагентом = Истина Тогда
				ЗКП.Дата    = КонецДня(ДатаДокумента) - 59;
			//КонецЕсли;
			
			ЗКП.Организация = ДОрганизация;
			ЗКП.Контрагент  = ДКонтрагент;
			
			Если ИдКонфигурации = "ЕРП" ИЛИ ИдКонфигурации = "BASУТ" ИЛИ ИдКонфигурации = "BASERP" ИЛИ ИдКонфигурации = "BASКУП" Тогда
				ЗКП.Партнер  = ДКонтрагент.Партнер;
			КонецЕсли;
			
			Если ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной Тогда //ТипДокумента = "РК"
				ЗКП.ВидОперации = Перечисления["ВидыОпераций"+ИмяДокументаЗКП].РасчетКорректировкиВозврат;
			ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная Тогда
			    ЗКП.ВидОперации = Перечисления["ВидыОпераций"+ИмяДокументаЗКП].НалоговаяНакладная;
			КонецЕсли;
			
			Если  ИдКонфигурации = "БП"
				или ИдКонфигурации = "УТП" 
				или ИдКонфигурации = "УТ" 
				или ИдКонфигурации = "УПП"
			Тогда
				Выполнить("ЗКП.ОбособленноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""ОсновноеОбособленноеПодразделениеОрганизации"")");	
				Если НЕ ЗКП.ОбособленноеПодразделение.Владелец = ЗКП.Организация Тогда
					ЗКП.ОбособленноеПодразделение = Неопределено;				
				КонецЕсли; 
			ИначеЕсли ИдКонфигурации = "БП20" 
				ИЛИ ИДКонфигурации = "БП20ИНАГРО"
				или ИдКонфигурации = "ЕРП" 
				или ИдКонфигурации = "BASУТ"
				ИЛИ ИдКонфигурации = "BASERP" 
				ИЛИ ИдКонфигурации = "BASКУП"
			Тогда
				Выполнить("ЗКП.ОбособленноеПодразделение = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию(""ОсновноеОбособленноеПодразделениеОрганизации"")");
				Если НЕ ЗКП.ОбособленноеПодразделение.Владелец = ЗКП.Организация Тогда
					ЗКП.ОбособленноеПодразделение = Неопределено;				
				КонецЕсли; 
			КонецЕсли;
			
			Если  ИдКонфигурации = "БП"
				или ИдКонфигурации = "УТП" 
				//или ИдКонфигурации = "УТ" 
				или ИдКонфигурации = "УПП"
			Тогда
				Выполнить("ЗКП.СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС");
				
				СчетаУчета = Неопределено;
				Если ИдКонфигурации = "УТП" Тогда
	                Выполнить("СчетаУчета = УправлениеВзаиморасчетами.ПолучитьСчетаРасчетовСКонтрагентом(ЗКП.Организация, ЗКП.Контрагент, ЗКП.ДоговорКонтрагента);");
				Иначе
					Выполнить("СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(ЗКП.Организация, ЗКП.Контрагент, ЗКП.ДоговорКонтрагента);");
				КонецЕсли;
				
				ЗКП.СчетУчетаНДС 	 = СчетаУчета.СчетУчетаНДСПриобретений;
				
				Выполнить("ЗКП.СчетУчетаКорректировкиНДСКредит = ПланыСчетов.Хозрасчетный.КорректировкиНалоговогоКредита");
			ИначеЕсли ИдКонфигурации = "БП20" 
				ИЛИ ИДКонфигурации = "БП20ИНАГРО"
				//или ИдКонфигурации = "ЕРП" 
				//или ИдКонфигурации = "BASУТ" 
			Тогда
				Выполнить("
						|	ЗКП.СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;
						|	
						|	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(ЗКП.Организация, ЗКП.Контрагент, ЗКП.ДоговорКонтрагента);
						|	
						|	ЗКП.СчетУчетаНДС 	 = СчетаУчета.СчетУчетаНДСПриобретений;
						|	ЗКП.СчетУчетаКорректировкиНДСКредит = ПланыСчетов.Хозрасчетный.КорректировкиНалоговогоКредита;
						|");
			КонецЕсли;
			
			ЗКП.НомерВходящегоДокумента = НомерДокумента;
			ЗКП.ДатаВходящегоДокумента  = ДатаДокумента;
			Если ЗарегистрированВДФС Тогда
				ЗКП.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных  = ДатаРегистрацииВДФС;
			КонецЕсли;
			
			ЗКП.ВидДокумента = "-";
			
			//ЗКП.ЕстьXML   		= Истина;
			//ЗКП.ЭлектронныйДокумент = Истина;
			//ЗКП.Звит1С_DOC_ID   = DOC_ID;
			//
			//
			//ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			//Текст = Новый ТекстовыйДокумент;
			//Текст.УстановитьТекст(XML);
			//Текст.Записать(ИмяВременногоФайла, "windows-1251");
			//
			//ЗКП.ДанныеXML = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяВременногоФайла), Новый СжатиеДанных(9));
			//
			//// заполним табличную часть документа
			//// получим данны реквизитов кроме ТЧ
			//РеквизитыXML = Новый Структура;
			//
			//ЧтениеXML = Новый ЧтениеXML;
			//ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
			//ЧтениеXML.ИгнорироватьПробелы = Истина;
			//Пока ЧтениеXML.Прочитать() Цикл
			//	Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			//		ТекУзел = ВРЕГ(ЧтениеXML.Имя);
			//		Если    ТекУзел = "DECLAR"
			//			ИЛИ ТекУзел = "DECLARHEAD"
			//			ИЛИ ТекУзел = "DECLARBODY"
			//			ИЛИ ТекУзел = "LINKED_DOCS" Тогда
			//			Продолжить;
			//		ИначеЕсли Найти(ТекУзел, "XXXX") > 0 Тогда
			//			Продолжить;
			//		Иначе
			//			Если ВРЕГ(ЧтениеXML.ЗначениеАтрибута("xsi:nil")) = "TRUE" Тогда
			//				Продолжить;
			//			КонецЕсли;
			//			ЧтениеXML.Прочитать();
			//			РеквизитыXML.Вставить(ТекУзел, ЧтениеXML.Значение);
			//		КонецЕсли;
			//	КонецЕсли;
			//КонецЦикла;		
			//ЧтениеXML.Закрыть();			
			
			//C_DOC     = ""; РеквизитыXML.Свойство("C_DOC",	   C_DOC);
			C_DOC = Таблица0ПерваяСтрока.Получить("C_DOC");
			//C_DOC_SUB = ""; РеквизитыXML.Свойство("C_DOC_SUB", C_DOC_SUB);
			C_DOC_SUB = Таблица0ПерваяСтрока.Получить("C_DOC_SUB");
			//C_DOC_VER = ""; РеквизитыXML.Свойство("C_DOC_VER", C_DOC_VER);
			C_DOC_VER = Таблица0ПерваяСтрока.Получить("C_DOC_VER");

			// договор контрагента
			ДоговорКонтрагентаДата  = "";
			ДоговорКонтрагентаНомер = "";
			Если ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная Тогда //C_DOC_SUB = "010"
				//РеквизитыXML.Свойство("H01G2D", ДоговорКонтрагентаДата);
				//РеквизитыXML.Свойство("H01G3S", ДоговорКонтрагентаНомер);
				ДоговорКонтрагентаДата = Таблица0ПерваяСтрока.Получить("H01G2D");
				ДоговорКонтрагентаНомер = Таблица0ПерваяСтрока.Получить("H01G3S");
			ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной тогда
				//РеквизитыXML.Свойство("H01G1D", ДоговорКонтрагентаДата);
				//РеквизитыXML.Свойство("H01G2S", ДоговорКонтрагентаНомер);
				ДоговорКонтрагентаДата = Таблица0ПерваяСтрока.Получить("H01G1D");
				ДоговорКонтрагентаНомер = Таблица0ПерваяСтрока.Получить("H01G2S");
			КонецЕсли;
			Если ЗначениеЗаполнено(ДоговорКонтрагентаДата) Тогда
				ДоговорКонтрагентаДата = СокрЛП(ДоговорКонтрагентаДата);
				ДоговорКонтрагентаДата = Дата(Сред(ДоговорКонтрагентаДата, 5, 4), Сред(ДоговорКонтрагентаДата, 3, 2), Сред(ДоговорКонтрагентаДата, 1, 2));
			КонецЕсли;
			
			Если  ЗначениеЗаполнено(ЗКП.Контрагент)
				И ЗначениеЗаполнено(ДоговорКонтрагентаДата)
				И ЗначениеЗаполнено(ДоговорКонтрагентаНомер) Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	Спр.Ссылка
				               |ИЗ
				               |	Справочник.ДоговорыКонтрагентов КАК Спр
				               |ГДЕ
				               |	Спр.Владелец = &Контрагент
				               |	И Спр.Дата = &ДоговорКонтрагентаДата
				               |	И Спр.Номер = &ДоговорКонтрагентаНомер
				               |	И Спр.Организация = &Организация
				               |
				               |УПОРЯДОЧИТЬ ПО
				               |	Спр.Код УБЫВ";
						   
				Если ИдКонфигурации = "ЕРП" ИЛИ ИдКонфигурации = "BASУТ" ИЛИ ИдКонфигурации = "BASERP" ИЛИ ИдКонфигурации = "BASКУП" Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "Спр.Владелец", "Спр.Контрагент");	
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "Спр.Код", "Спр.Ссылка");	
				КонецЕсли;					   
						   
				Запрос.УстановитьПараметр("Контрагент", 			 ЗКП.Контрагент);				   
				Запрос.УстановитьПараметр("ДоговорКонтрагентаДата",  ДоговорКонтрагентаДата);
				Запрос.УстановитьПараметр("ДоговорКонтрагентаНомер", ДоговорКонтрагентаНомер);
				Запрос.УстановитьПараметр("Организация", ДОрганизация); // К типовому алгоритму добавлен отбор по Организации
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ЗКП.ДоговорКонтрагента = Выборка.Ссылка;
				КонецЕсли;
				
			КонецЕсли;
			
			HFILL = Таблица0ПерваяСтрока.Получить("HFILL");//HFILL = ""; РеквизитыXML.Свойство("HFILL", HFILL);
			Если ЗначениеЗаполнено(HFILL) Тогда
				HFILL = СокрЛП(HFILL);
				ЗКП.ДатаВходящегоДокумента = Дата(Сред(HFILL, 5, 4), Сред(HFILL, 3, 2), Сред(HFILL, 1, 2));
			КонецЕсли;
			
			// для П2 дата и номер корректируемой налоговой накладной
			Если ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной Тогда //C_DOC_SUB = "012"
				HNUM = Таблица0ПерваяСтрока.Получить("HPODNUM");  HNUM  = СокрЛП(HNUM);//HNUM  = ""; РеквизитыXML.Свойство("HPODNUM",  HNUM);  HNUM  = СокрЛП(HNUM);
				HNUM1 = Таблица0ПерваяСтрока.Получить("HPODNUM1");  HNUM1 = СокрЛП(HNUM1); HNUM1 = ?(HNUM1 = "0", "", HNUM1);//HNUM1 = ""; РеквизитыXML.Свойство("HPODNUM1", HNUM1); HNUM1 = СокрЛП(HNUM1); HNUM1 = ?(HNUM1 = "0", "", HNUM1);
				HNUM2 = Таблица0ПерваяСтрока.Получить("HPODNUM2"); HNUM2 = СокрЛП(HNUM2);//HNUM2 = ""; РеквизитыXML.Свойство("HPODNUM2", HNUM2); HNUM2 = СокрЛП(HNUM2);
				НомерКорректируемогоВходящегоДокумента = HNUM; 
				Если ЗначениеЗаполнено(HNUM1) Тогда
					НомерКорректируемогоВходящегоДокумента = НомерКорректируемогоВходящегоДокумента + "/" + HNUM1;
				КонецЕсли;
				Если ЗначениеЗаполнено(HNUM2) Тогда
					Если ЗначениеЗаполнено(HNUM1) Тогда
						Если C_DOC_VER > "04" Тогда
							// всего два слеша
							НомерКорректируемогоВходящегоДокумента = НомерКорректируемогоВходящегоДокумента + "/" + HNUM2;	
						Иначе	
						    // всего один слеш
							НомерКорректируемогоВходящегоДокумента = НомерКорректируемогоВходящегоДокумента + HNUM2;	
						КонецЕсли;
					Иначе
						Если C_DOC_VER > "04" Тогда
							// два слеша
							НомерКорректируемогоВходящегоДокумента = НомерКорректируемогоВходящегоДокумента + "//" + HNUM2;	
						Иначе	
						    // один слеш
							НомерКорректируемогоВходящегоДокумента = НомерКорректируемогоВходящегоДокумента + "/ " + HNUM2;	
						КонецЕсли;
					
					КонецЕсли;
				КонецЕсли;
				
				ДатаКорректируемогоВходящегоДокумента = "";
				HFILL = Таблица0ПерваяСтрока.Получить("HPODFILL");//HFILL = ""; РеквизитыXML.Свойство("HPODFILL", HFILL);
				Если ЗначениеЗаполнено(HFILL) Тогда
					HFILL = СокрЛП(HFILL);
					ДатаКорректируемогоВходящегоДокумента = Дата(Сред(HFILL, 5, 4), Сред(HFILL, 3, 2), Сред(HFILL, 1, 2));
				КонецЕсли;
				
				ЗКП.НомерКорректируемогоВходящегоДокумента = НомерКорректируемогоВходящегоДокумента;
				ЗКП.ДатаКорректируемогоВходящегоДокумента  = ДатаКорректируемогоВходящегоДокумента;
				
			КонецЕсли;
			
			// суммы документа по ставкам
			БазаНДС20  = 0; СуммаНДС20 = 0;
			БазаНДС14  = 0; СуммаНДС14 = 0;
			БазаНДС7   = 0; СуммаНДС7  = 0;
			БазаНДС0   = 0;
			БазаБезНДС = 0;
			Тара = 0;
			
			// 20%
			Если ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная Тогда //C_DOC_SUB = "010"
				//РеквизитыXML.Свойство("R01G7", БазаНДС20);
				//РеквизитыXML.Свойство("R03G7", СуммаНДС20);
				БазаНДС20 = Таблица0ПерваяСтрока.Получить("R01G7");
				СуммаНДС20 = Таблица0ПерваяСтрока.Получить("R03G7");
			ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной Тогда
				//РеквизитыXML.Свойство("R01G9", БазаНДС20);
				//РеквизитыXML.Свойство("R02G9", СуммаНДС20);
				БазаНДС20 = Таблица0ПерваяСтрока.Получить("R01G9");
				СуммаНДС20 = Таблица0ПерваяСтрока.Получить("R02G9");
			КонецЕсли;
			
			// 14%
			Если ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная Тогда //C_DOC_SUB = "010"
				БазаНДС14 = Таблица0ПерваяСтрока.Получить("R01G14");
				СуммаНДС14 = Таблица0ПерваяСтрока.Получить("R03G14");
			ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной Тогда
				БазаНДС14 = Таблица0ПерваяСтрока.Получить("R01G14");
				СуммаНДС14 = Таблица0ПерваяСтрока.Получить("R03G14");
			КонецЕсли;
			
			// 7% и 0%
			Если HNUM1 = "7" Тогда
				
				Если ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная Тогда //C_DOC_SUB = "010"
					//РеквизитыXML.Свойство("R01G8",  БазаНДС7);
					//РеквизитыXML.Свойство("R03G8",  СуммаНДС7);
					БазаНДС7 = Таблица0ПерваяСтрока.Получить("R01G8");
					СуммаНДС7 = Таблица0ПерваяСтрока.Получить("R03G8");
					
					// В сумме НДС по ставке 7 могут находиться ошибочно разделители триад
					СуммаНДС7 = СтрЗаменить(СуммаНДС7, " ", "");
					
				ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной Тогда
					//РеквизитыXML.Свойство("R01G10", БазаНДС7);
					//РеквизитыXML.Свойство("R02G9",  СуммаНДС7);
					БазаНДС7 = Таблица0ПерваяСтрока.Получить("R01G10");
					СуммаНДС7 = Таблица0ПерваяСтрока.Получить("R02G9");
				КонецЕсли;
				
			Иначе
				
				Если ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная Тогда //C_DOC_SUB = "010"
					//РеквизитыXML.Свойство("R01G109",  БазаНДС7);
					//РеквизитыXML.Свойство("R03G109",  СуммаНДС7);
					БазаНДС7 = Таблица0ПерваяСтрока.Получить("R01G109");
					СуммаНДС7 = Таблица0ПерваяСтрока.Получить("R03G109");
					
					R01G8 = Таблица0ПерваяСтрока.Получить("R01G8");
					Если ЗначениеЗаполнено(R01G8) Тогда //РеквизитыXML.Свойство("R01G8")
						БазаНДС0 = БазаНДС0 + R01G8;//РеквизитыXML.R01G8;
					КонецЕсли;
					R01G9 = Таблица0ПерваяСтрока.Получить("R01G9");
					Если ЗначениеЗаполнено(R01G9) Тогда //РеквизитыXML.Свойство("R01G9")
						БазаНДС0 = БазаНДС0 + R01G9;//РеквизитыXML.R01G9;
					КонецЕсли;
				ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной Тогда
					//РеквизитыXML.Свойство("R01G111",  БазаНДС7);
					//РеквизитыXML.Свойство("R02G111",  СуммаНДС7);
					БазаНДС7 = Таблица0ПерваяСтрока.Получить("R01G111");
					СуммаНДС7 = Таблица0ПерваяСтрока.Получить("R02G111");
					
					БазаНДС0 = Таблица0ПерваяСтрока.Получить("R01G10");
					Если БазаНДС0 = Неопределено Тогда //НЕ РеквизитыXML.Свойство("R01G10",  БазаНДС0)
						БазаНДС0 = 0;
						
						R006G03 = Таблица0ПерваяСтрока.Получить("R006G03");
						Если ЗначениеЗаполнено(R006G03) Тогда //РеквизитыXML.Свойство("R006G03")
							БазаНДС0 = БазаНДС0 + R006G03;//РеквизитыXML.R006G03;
						КонецЕсли;
						R007G03 = Таблица0ПерваяСтрока.Получить("R007G03");
						Если ЗначениеЗаполнено(R007G03) Тогда //РеквизитыXML.Свойство("R007G03")
							БазаНДС0 = БазаНДС0 + R007G03;//РеквизитыXML.R007G03;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// БезНДС
			Если ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная Тогда //C_DOC_SUB = "010"
				//РеквизитыXML.Свойство("R01G10",  БазаБезНДС);
				БазаБезНДС = Таблица0ПерваяСтрока.Получить("R01G10");
			ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной Тогда
				//РеквизитыXML.Свойство("R01G11", БазаБезНДС);
				БазаБезНДС = Таблица0ПерваяСтрока.Получить("R01G11");
			КонецЕсли;
			
			// Тара
			Если ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная Тогда //C_DOC_SUB = "010"
				//РеквизитыXML.Свойство("R02G11",  Тара);
				Тара = Таблица0ПерваяСтрока.Получить("R02G11");
			КонецЕсли;
			
			лпДополнитьДанныеВДокументе = Ложь;
			Если ИдКонфигурации = "БП20"
				ИЛИ ИДКонфигурации = "БП20ИНАГРО" Тогда
				
				лпДоговорКонтрагента 	= Неопределено;
				лпСделка 				= Неопределено;
				лпВидДеятельности 		= Неопределено;
				лпАмортизируется 		= Неопределено;
				лпХозДеятельность		= Неопределено;
				отЧисло	= Новый ОписаниеТипов("Число");
				
				Если ЗначениеЗаполнено(СуммаНДС20) Тогда
					лпСуммаНДСДокумента = отЧисло.ПривестиЗначение(СуммаНДС20);
				ИначеЕсли ЗначениеЗаполнено(СуммаНДС14) Тогда
					лпСуммаНДСДокумента = отЧисло.ПривестиЗначение(СуммаНДС14);
				ИначеЕсли ЗначениеЗаполнено(СуммаНДС7) Тогда
					лпСуммаНДСДокумента = отЧисло.ПривестиЗначение(СуммаНДС7);
				Иначе
					лпСуммаНДСДокумента = 0;
				КонецЕсли;	
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ОжидаемыйИПодтвержденныйНДСПриобретенийОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
				|	ОжидаемыйИПодтвержденныйНДСПриобретенийОстатки.Сделка КАК Сделка,
				|	ОжидаемыйИПодтвержденныйНДСПриобретенийОстатки.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
				|	ОжидаемыйИПодтвержденныйНДСПриобретенийОстатки.Амортизируется КАК Амортизируется,
				|	ОжидаемыйИПодтвержденныйНДСПриобретенийОстатки.ДляХозяйственнойДеятельности КАК ДляХозяйственнойДеятельности
				|ИЗ
				|	РегистрНакопления.ОжидаемыйИПодтвержденныйНДСПриобретений.Остатки(&НаДату, ) КАК ОжидаемыйИПодтвержденныйНДСПриобретенийОстатки
				|ГДЕ
				|	ОжидаемыйИПодтвержденныйНДСПриобретенийОстатки.Организация = &Организация
				|	И ОжидаемыйИПодтвержденныйНДСПриобретенийОстатки.Сделка <> НЕОПРЕДЕЛЕНО
				|	И ОжидаемыйИПодтвержденныйНДСПриобретенийОстатки.СуммаНДСОстаток = &СуммаНДСОстаток
				|	И ОжидаемыйИПодтвержденныйНДСПриобретенийОстатки.СобытиеНДС = &СобытиеНДС
				|	И НАЧАЛОПЕРИОДА(ВЫБОР
				|				КОГДА ОжидаемыйИПодтвержденныйНДСПриобретенийОстатки.Сделка = НЕОПРЕДЕЛЕНО
				|					ТОГДА ДАТАВРЕМЯ(1, 1, 1)
				|				ИНАЧЕ ОжидаемыйИПодтвержденныйНДСПриобретенийОстатки.Сделка.Дата
				|			КОНЕЦ, ДЕНЬ) = &ДатаДокументаРасчета";
				
				Запрос.УстановитьПараметр("ДатаДокументаРасчета", ДатаДокумента);
				Запрос.УстановитьПараметр("НаДату", КонецДня(ДатаДокумента));
				Запрос.УстановитьПараметр("Организация", ДОрганизация);
				Если ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной Тогда
					Запрос.УстановитьПараметр("СобытиеНДС", Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Возврат);
				ИначеЕсли ТипДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная Тогда
					Запрос.УстановитьПараметр("СобытиеНДС", Перечисления.СобытияОжидаемыйИПодтвержденныйНДСПриобретений.Поступление);
				КонецЕсли;
				Запрос.УстановитьПараметр("СуммаНДСОстаток", лпСуммаНДСДокумента);
				
				ВыборкаДопДанные = Запрос.Выполнить().Выбрать();
				ВыборкаДопДанные.Следующий();
				
				Если ВыборкаДопДанные.Количество() = 1 Тогда
					лпДополнитьДанныеВДокументе = Истина;
					лпДоговорКонтрагента 	= ВыборкаДопДанные.ДоговорКонтрагента;
					лпСделка 				= ВыборкаДопДанные.Сделка;
					лпВидДеятельности 		= ВыборкаДопДанные.ВидДеятельностиНДС;
					лпАмортизируется 		= ВыборкаДопДанные.Амортизируется;
					лпХозДеятельность		= ВыборкаДопДанные.ДляХозяйственнойДеятельности;
				КонецЕсли;	
				
			КонецЕсли;
			
			Если лпДополнитьДанныеВДокументе Тогда
				Если Не ЗначениеЗаполнено(ЗКП.ДоговорКонтрагента) Тогда
					ЗКП.ДоговорКонтрагента = лпДоговорКонтрагента;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ЗКП.Сделка) Тогда
					ЗКП.Сделка = лпСделка;
				КонецЕсли;
			КонецЕсли;	
			
			// добавляем строки в ТЧ
			СтрокаДок = Неопределено;
			Если ЗначениеЗаполнено(БазаНДС20) И Число(БазаНДС20) <> 0 Тогда
				
				Если  ИдКонфигурации = "БП"
					или ИдКонфигурации = "УТП" 
					или ИдКонфигурации = "УТ" 
					или ИдКонфигурации = "УПП"
					или ИдКонфигурации = "БП20" 
					ИЛИ ИДКонфигурации = "БП20ИНАГРО"
					//или ИдКонфигурации = "ЕРП" 
					//или ИдКонфигурации = "BASУТ" 
				Тогда
					СтрокаДок = ЗКП.Товары.Добавить();
				Иначе	
				    СтрокаДок = ЗКП.Поставка.Добавить();
				КонецЕсли;
				
				СтрокаДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
				
				СтрокаДок.Сумма     = БазаНДС20;
				СтрокаДок.СуммаНДС  = СуммаНДС20;
				Если  ИдКонфигурации = "БП"
					или ИдКонфигурации = "УТП" 
					или ИдКонфигурации = "УТ" 
					или ИдКонфигурации = "УПП"
					или ИдКонфигурации = "БП20" 
					ИЛИ ИДКонфигурации = "БП20ИНАГРО"
					//или ИдКонфигурации = "ЕРП" 
					//или ИдКонфигурации = "BASУТ" 
				Тогда
					СтрокаДок.СуммаВзаиморасчетов = СтрокаДок.Сумма + СтрокаДок.СуммаНДС;    
				Иначе
					СтрокаДок.СуммаСНДС = СтрокаДок.Сумма + СтрокаДок.СуммаНДС;    
				КонецЕсли;
			
			КонецЕсли;
			
			Если ЗначениеЗаполнено(БазаНДС14) И Число(БазаНДС14) <> 0 Тогда
				
				Если  ИдКонфигурации = "БП"
					или ИдКонфигурации = "УТП" 
					или ИдКонфигурации = "УТ" 
					или ИдКонфигурации = "УПП"
					или ИдКонфигурации = "БП20" 
					ИЛИ ИДКонфигурации = "БП20ИНАГРО"
					//или ИдКонфигурации = "ЕРП" 
					//или ИдКонфигурации = "BASУТ" 
				Тогда
					СтрокаДок = ЗКП.Товары.Добавить();
				Иначе	
				    СтрокаДок = ЗКП.Поставка.Добавить();
				КонецЕсли;
				
				СтрокаДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС14;
				
				СтрокаДок.Сумма     = БазаНДС14;
				СтрокаДок.СуммаНДС  = СуммаНДС14;
				Если  ИдКонфигурации = "БП"
					или ИдКонфигурации = "УТП" 
					или ИдКонфигурации = "УТ" 
					или ИдКонфигурации = "УПП"
					или ИдКонфигурации = "БП20" 
					ИЛИ ИДКонфигурации = "БП20ИНАГРО"
					//или ИдКонфигурации = "ЕРП" 
					//или ИдКонфигурации = "BASУТ" 
				Тогда
					СтрокаДок.СуммаВзаиморасчетов = СтрокаДок.Сумма + СтрокаДок.СуммаНДС;    
				Иначе
					СтрокаДок.СуммаСНДС = СтрокаДок.Сумма + СтрокаДок.СуммаНДС;    
				КонецЕсли;
			
			КонецЕсли;
			
			Если ЗначениеЗаполнено(БазаНДС7) И Число(БазаНДС7) <> 0 Тогда
				
				Если  ИдКонфигурации = "БП"
					или ИдКонфигурации = "УТП" 
					или ИдКонфигурации = "УТ" 
					или ИдКонфигурации = "УПП"
					или ИдКонфигурации = "БП20" 
					ИЛИ ИДКонфигурации = "БП20ИНАГРО"
					//или ИдКонфигурации = "ЕРП" 
					//или ИдКонфигурации = "BASУТ" 
				Тогда
					СтрокаДок = ЗКП.Товары.Добавить();
				Иначе	
					СтрокаДок = ЗКП.Поставка.Добавить();
				КонецЕсли;
				
				СтрокаДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС7;
				СтрокаДок.Сумма     = БазаНДС7;
				СтрокаДок.СуммаНДС  = СуммаНДС7;
				Если  ИдКонфигурации = "БП"
					или ИдКонфигурации = "УТП" 
					или ИдКонфигурации = "УТ" 
					или ИдКонфигурации = "УПП"
					или ИдКонфигурации = "БП20"  
					ИЛИ ИДКонфигурации = "БП20ИНАГРО"
					//или ИдКонфигурации = "ЕРП" 
					//или ИдКонфигурации = "BASУТ" 
					Тогда
					СтрокаДок.СуммаВзаиморасчетов = СтрокаДок.Сумма + СтрокаДок.СуммаНДС;    
				Иначе
					СтрокаДок.СуммаСНДС = СтрокаДок.Сумма + СтрокаДок.СуммаНДС;    
				КонецЕсли;
			
			КонецЕсли;
			
			Если ЗначениеЗаполнено(БазаНДС0) И Число(БазаНДС0) <> 0 Тогда
				
				Если  ИдКонфигурации = "БП"
					или ИдКонфигурации = "УТП" 
					или ИдКонфигурации = "УТ" 
					или ИдКонфигурации = "УПП"
					или ИдКонфигурации = "БП20" 
					ИЛИ ИДКонфигурации = "БП20ИНАГРО"
					//или ИдКонфигурации = "ЕРП" 
					//или ИдКонфигурации = "BASУТ" 
				Тогда
					СтрокаДок = ЗКП.Товары.Добавить();
				Иначе	
				    СтрокаДок = ЗКП.Поставка.Добавить();
				КонецЕсли;
				
				СтрокаДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
				СтрокаДок.Сумма     = БазаНДС0;
				Если  ИдКонфигурации = "БП"
					или ИдКонфигурации = "УТП" 
					или ИдКонфигурации = "УТ" 
					или ИдКонфигурации = "УПП"
					или ИдКонфигурации = "БП20" 
					ИЛИ ИДКонфигурации = "БП20ИНАГРО"
					//или ИдКонфигурации = "ЕРП" 
					//или ИдКонфигурации = "BASУТ" 
				Тогда
					СтрокаДок.СуммаВзаиморасчетов = СтрокаДок.Сумма;    
				Иначе
					СтрокаДок.СуммаСНДС = СтрокаДок.Сумма;    
				КонецЕсли;
			
			КонецЕсли;
			
			Если ЗначениеЗаполнено(БазаБезНДС) И Число(БазаБезНДС) <> 0 Тогда
				
				Если  ИдКонфигурации = "БП"
					или ИдКонфигурации = "УТП" 
					или ИдКонфигурации = "УТ" 
					или ИдКонфигурации = "УПП"
					или ИдКонфигурации = "БП20" 
					ИЛИ ИДКонфигурации = "БП20ИНАГРО"
					//или ИдКонфигурации = "ЕРП" 
					//или ИдКонфигурации = "BASУТ" 
				Тогда
					СтрокаДок = ЗКП.Товары.Добавить();
				Иначе	
				    СтрокаДок = ЗКП.Поставка.Добавить();
				КонецЕсли;
				
				СтрокаДок.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				СтрокаДок.Сумма     = БазаБезНДС;
				Если  ИдКонфигурации = "БП"
					или ИдКонфигурации = "УТП" 
					или ИдКонфигурации = "УТ" 
					или ИдКонфигурации = "УПП"
					или ИдКонфигурации = "БП20" 
					ИЛИ ИДКонфигурации = "БП20ИНАГРО"
					//или ИдКонфигурации = "ЕРП" 
					//или ИдКонфигурации = "BASУТ" 
				Тогда
					СтрокаДок.СуммаВзаиморасчетов = СтрокаДок.Сумма;    
				Иначе
					СтрокаДок.СуммаСНДС = СтрокаДок.Сумма;    
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаДок <> Неопределено Тогда
				Если ИдКонфигурации = "BASУТ" ИЛИ ИдКонфигурации = "BASERP" ИЛИ ИдКонфигурации = "BASКУП" Тогда
					
					Отбор = Новый Структура("ВидОперации, СтавкаНДС", ЗКП.ВидОперации, СтрокаДок.СтавкаНДС);
					
					КешЗначенийСтатейНалоговыхДекларацийПоУмолчанию = Новый ТаблицаЗначений;
					
					Колонки = КешЗначенийСтатейНалоговыхДекларацийПоУмолчанию.Колонки;
					Колонки.Добавить("ВидОперации",    Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийРегистрацияВходящегоНалоговогоДокумента"));
					Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
					Колонки.Добавить("СтатьяДекларацииНДСНалоговыйКредит", Новый ОписаниеТипов("СправочникСсылка.СтатьиНалоговыхДеклараций"));
					
					Массив = КешЗначенийСтатейНалоговыхДекларацийПоУмолчанию.НайтиСтроки(Отбор);
					Если Массив.Количество() = 0 Тогда
						СтрокаДок.СтатьяДекларацииНДСНалоговыйКредит = Документы.РегистрацияВходящегоНалоговогоДокумента.ПолучитьСтатьюНалоговойДекларации(ЗКП.ВидОперации, СтрокаДок.СтавкаНДС);
					Иначе
						СтрокаДок.СтатьяДекларацииНДСНалоговыйКредит = Массив[0].СтатьяДекларацииНДСНалоговыйКредит;
					КонецЕсли;
					
					лпОрганизацияПлательщикНДС = Неопределено;
					Выполнить("лпОрганизацияПлательщикНДС = НДСОбщегоНазначенияСервер.ОрганизацияПлательщикНДС(ЗКП.Организация, ЗКП.Дата);");
					
					Если НЕ лпОрганизацияПлательщикНДС 
						ИЛИ СтрокаДок.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС 
						ИЛИ СтрокаДок.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС 
						Тогда
						СтрокаДок.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
					Иначе
						СтрокаДок.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая;
					КонецЕСли;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаДок <> Неопределено И лпДополнитьДанныеВДокументе Тогда
				СтрокаДок.ДляХозяйственнойДеятельности = лпХозДеятельность;
				Если лпВидДеятельности = Перечисления.ВидыДеятельностиНДС.Облагаемая Тогда
					СтрокаДок.ДляОперацийОблагаемыхНДС = Истина;
				ИначеЕсли лпВидДеятельности = Перечисления.ВидыДеятельностиНДС.Необлагаемая Тогда
					СтрокаДок.ДляОперацийОблагаемыхНДС = Ложь;
				КонецЕсли;
				СтрокаДок.Амортизируется = лпАмортизируется;
				СтрокаДок.СтатьяДекларацииНДСНалоговыйКредит = Документы.РегистрацияВходящегоНалоговогоДокумента.ОпределитьСтатьюНалоговойДекларации(ЗКП.ВидОперации, СтрокаДок);
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(Тара) И Число(Тара) <> 0 Тогда
				
				Если  //ИдКонфигурации = "БП"
					//или ИдКонфигурации = "УТП" 
					//или ИдКонфигурации = "УТ" 
					//или 
					ИдКонфигурации = "УПП"
					//или ИдКонфигурации = "БП20" 
					//или ИдКонфигурации = "ЕРП" 
					//или ИдКонфигурации = "BASУТ" 
				Тогда
					СтрокаТары = ЗКП.ВозвратнаяТара.Добавить();
					СтрокаТары.Сумма = Число(Тара);
				Иначе	
					ЗКП.СуммаВозвратнойТары = Число(Тара);	
				КонецЕсли;
			КонецЕсли;
			
			Если ЗарегистрированВДФС Тогда
				ЗКП.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных  = ДатаРегистрацииВДФС;
				Если МетаданныеДокумента.Реквизиты.Найти("ДанныеXML") <> Неопределено Тогда
					Если Не ЗначениеЗаполнено(ТелоДокумента) Тогда
						ЭлектронныйДокумент = ЭлектронныйДокументОбъектСсылка.Ссылка;//ДанныеДокумента.ЭлектронныйДокумент;
						СодержаниеЭлектронногоДокумента = скEDI_ОбщегоНазначения.ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент);
						Если СодержаниеЭлектронногоДокумента <> Неопределено Тогда
							ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(ТелоДокумента) Тогда
						//Снимаем ЭЦП
						ЗапросНаРазборСообщения = Новый Структура("Body", ТелоДокумента);
						РезультатРазбораСообщения = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("parsemessage", ЗапросНаРазборСообщения);
						Если РезультатРазбораСообщения.Code = 0 Тогда
							ТелоДокументаБезПодписей = РезультатРазбораСообщения.Text;
							
							Если МетаданныеДокумента.Реквизиты.Найти("ЕстьXML") <> Неопределено Тогда
								ЗКП.ЕстьXML   = Истина;
							КонецЕсли;
							Если МетаданныеДокумента.Реквизиты.Найти("ЭлектронныйДокумент") <> Неопределено Тогда
								ЗКП.ЭлектронныйДокумент   = Истина;
							КонецЕсли;
							//ЗКП.ЭлектронныйДокумент = Истина;
							//ЗКП.Звит1С_DOC_ID   = DOC_ID;
							//
							//ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
							//Текст = Новый ТекстовыйДокумент;
							//Текст.УстановитьТекст(XML);
							//Текст.Записать(ИмяВременногоФайла, "windows-1251");
							//
							//ЗКП.ДанныеXML = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяВременногоФайла), Новый СжатиеДанных(9));
							ЗКП.ДанныеXML = Новый ХранилищеЗначения(Base64Значение(ТелоДокументаБезПодписей), Новый СжатиеДанных(9));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ЗКП.УстановитьНовыйНомер();
			//Необходима отработка события "ПередЗаписью"
			//ЗКП.ОбменДанными.Загрузка = Истина;
			ЗКП.Записать();
			
			Документ1С = ЗКП.Ссылка;
			Возврат Истина;
		Иначе
			МетаданныеДокумента = Документ1С.Метаданные();
			РедактироватьДокумент = Ложь;
			Если ЗарегистрированВДФС Тогда
				Если МетаданныеДокумента.Реквизиты.Найти("ДатаВключенияВЕдиныйРеестрНалоговыхНакладных") <> Неопределено Тогда
					Если Документ1С.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных <> ДатаРегистрацииВДФС Тогда
						РедактироватьДокумент = Истина;
					КонецЕсли;
				КонецЕсли;
				Если МетаданныеДокумента.Реквизиты.Найти("ЕстьXML") <> Неопределено Тогда
					Если Документ1С.ЕстьXML <> Истина Тогда
						РедактироватьДокумент = Истина;
					КонецЕсли;
				КонецЕсли;
				Если МетаданныеДокумента.Реквизиты.Найти("ДанныеXML") <> Неопределено Тогда
					Если Документ1С.ДанныеXML.Получить() = Неопределено Тогда
						РедактироватьДокумент = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если РедактироватьДокумент Тогда
				ЗКП = Документ1С.ПолучитьОбъект();
				
				//Если ЗКП.Контрагент.Пустая() Тогда
				//	ЗКП.Контрагент = ДКонтрагент;
				//	Если ИдКонфигурации = "ЕРП" ИЛИ ИдКонфигурации = "BASУТ" Тогда
				//		ЗКП.Партнер  = ДКонтрагент.Партнер;
				//	КонецЕсли;
				//КонецЕсли;
				Если МетаданныеДокумента.Реквизиты.Найти("ДатаВключенияВЕдиныйРеестрНалоговыхНакладных") <> Неопределено Тогда
					ЗКП.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных  = ДатаРегистрацииВДФС;
				КонецЕсли;
				
				Если МетаданныеДокумента.Реквизиты.Найти("ДанныеXML") <> Неопределено Тогда
					ЭлектронныйДокумент = ЭлектронныйДокументОбъектСсылка.Ссылка;//ДанныеДокумента.ЭлектронныйДокумент;
					СодержаниеЭлектронногоДокумента = скEDI_ОбщегоНазначения.ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент);
					Если СодержаниеЭлектронногоДокумента <> Неопределено Тогда
						ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
						//Снимаем ЭЦП
						ЗапросНаРазборСообщения = Новый Структура("Body", ТелоДокумента);
						РезультатРазбораСообщения = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("parsemessage", ЗапросНаРазборСообщения);
						Если РезультатРазбораСообщения.Code = 0 Тогда
							ТелоДокументаБезПодписей = РезультатРазбораСообщения.Text;
							
							Если МетаданныеДокумента.Реквизиты.Найти("ЕстьXML") <> Неопределено Тогда
								ЗКП.ЕстьXML   = Истина;
							КонецЕсли;
							Если МетаданныеДокумента.Реквизиты.Найти("ЭлектронныйДокумент") <> Неопределено Тогда
								ЗКП.ЭлектронныйДокумент   = Истина;
							КонецЕсли;
							//ЗКП.ЭлектронныйДокумент = Истина;
							//ЗКП.Звит1С_DOC_ID   = DOC_ID;
							//
							//ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
							//Текст = Новый ТекстовыйДокумент;
							//Текст.УстановитьТекст(XML);
							//Текст.Записать(ИмяВременногоФайла, "windows-1251");
							//
							//ЗКП.ДанныеXML = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяВременногоФайла), Новый СжатиеДанных(9));
							ЗКП.ДанныеXML = Новый ХранилищеЗначения(Base64Значение(ТелоДокументаБезПодписей), Новый СжатиеДанных(9));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ЗКП.ОбменДанными.Загрузка = Истина;
				ЗКП.Записать();
			КонецЕсли;
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий Тогда
		Возврат УстановитьОтметкуОРегистрацииНалоговогоДокумента(ЭлектронныйДокументОбъектСсылка, Документ1С);
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ЗагрузитьНалоговыйДокумент1С(Документ1С, Организация, ВидЭлектронногоДокумента, ТипДокумента, ВхИсх, ЭлектронныйДокументОбъектСсылка,
	ИмяШаблона, СоответствиеЗначений, Коментарий, ДокументБылСоздан, ТолькоПоиск = Ложь, ЭтоАвтоматическаяОбработка = Ложь, ТелоДокумента = "") экспорт
	
	ИДКонфигурации = скEDI_НастройкиПодКонфигурацию.ИДКонфигурации();
	
	ДокументБылСоздан = Ложь;
	Если НайтиНалоговыйДокумент(Документ1С, Организация, ВидЭлектронногоДокумента, ТипДокумента, ВхИсх, ЭлектронныйДокументОбъектСсылка, ИмяШаблона, СоответствиеЗначений) Тогда
		Если ТолькоПоиск Тогда
			Возврат Истина;
		Иначе
			ДокументБылСоздан = СоздатьЗаполнитьНалоговыйДокумент(Документ1С, Организация, ВидЭлектронногоДокумента, ТипДокумента, ВхИсх, ЭлектронныйДокументОбъектСсылка, ИмяШаблона, СоответствиеЗначений, ТелоДокумента);
			Возврат ДокументБылСоздан;
		КонецЕсли;
	Иначе
		Если ТолькоПоиск Тогда
			Возврат Ложь;
		Иначе
			ДокументБылСоздан = СоздатьЗаполнитьНалоговыйДокумент(Документ1С, Организация, ВидЭлектронногоДокумента, ТипДокумента, ВхИсх, ЭлектронныйДокументОбъектСсылка, ИмяШаблона, СоответствиеЗначений, ТелоДокумента);
			Возврат ДокументБылСоздан;
		КонецЕсли;
	КонецЕсли;
КонецФункции
