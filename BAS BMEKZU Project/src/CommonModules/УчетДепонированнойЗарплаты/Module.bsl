////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура регистрирует факт депонирования зарплаты
//
// Параметры
//  Движения 	- коллекция наборов записей движений платежного документа
//  Отказ    	- признак отказа в проведении
//	Зарплата	- таблица значений с данными о депонируемой зарплате:
//								•	Дата
//								•	Организация (СправочникСсылка.Организации)
//								•	ФизическоеЛицо (СправочникСсылка.ФизическиеЛица)
//								•	Сумма
//								•	Ведомость (ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу) - необязательное
//
// Возвращаемое значение:
//
// Обработка ошибочных ситуаций
//	выдается сообщение, признак «Отказ» выставляется в Истина
//
Процедура ЗарегистрироватьДепонированнуюЗарплату(Движения, Отказ, Знач Зарплата, ОтражатьВБухучете = Ложь) Экспорт
	
	// Взаиморасчеты с депонентами 
	ДепонируемыеСуммы = Зарплата.Скопировать();
	
	ДепонируемыеСуммы.Колонки.Добавить("ВидДвижения");
	ДепонируемыеСуммы.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход, "ВидДвижения");
	
	ДепонируемыеСуммы.Колонки.Дата.Имя = "Период";
	
//++ БУ ЗИК	
	Движения.ВзаиморасчетыСДепонентами.Загрузить(ДепонируемыеСуммы);
	
	Движения.ВзаиморасчетыСДепонентами.Записывать = Истина;
//-- БУ ЗИК	
	
	// Отражение в бухучете
	Если ОтражатьВБухучете Тогда
		
		КолонкиГруппировок = "Дата, Организация";
		ОрганизацииДаты = Зарплата.Скопировать(, КолонкиГруппировок);
		ОрганизацииДаты.Свернуть(КолонкиГруппировок);
		
		Отбор = Новый Структура(КолонкиГруппировок);
		Для Каждого ОрганизацияДата Из ОрганизацииДаты Цикл
			
			ЗаполнитьЗначенияСвойств(Отбор, ОрганизацияДата);
			
			Депоненты = Зарплата.Скопировать(Отбор, "ФизическоеЛицо, Сумма");
			Депоненты.Свернуть("ФизическоеЛицо", "Сумма");
			
			ОтразитьВБухучете(Перечисления.ВидыОперацийПоЗарплате.Депонирование, Движения, Отказ, ОрганизацияДата.Организация, ОрганизацияДата.Дата, Зарплата);
			
		КонецЦикла	
		
	КонецЕсли	
	
КонецПроцедуры

// Функция возвращает информацию по остаткам депонированной зарплаты
//
// Параметры
//	Регистратор 	- ссылка на документ-заказчик (его выплаты депонентов не учитываются)
//	Организация		- организация
//	ДатаВыплаты		- дата выплаты депонированных сумм
//  ФизическиеЛица	- массив ссылок на физические лица (необязательное, если не указано - по всем физлицам)
//	ДепонированоДо	- максимально допустимая дата депонирования
//
// Возвращаемое значение:
//		НевыплаченныеДепоненты - Таблица значений с данными о депонентах вида:
//			ФизическоеЛицо	- СправочникСсылка.ФизическиеЛица
//			Сумма			- Число 15.2
//			Ведомость		- ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу (может быть пустым)
//
Функция ОстатокДепонированнойЗарплаты(Регистратор, Организация, ДатаВыплаты, ФизическиеЛица = Неопределено, ДепонированоДо = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Регистратор",		Регистратор);
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("Дата",				ДатаВыплаты);
	
	Запрос.УстановитьПараметр("ФизическиеЛица", ФизическиеЛица);
	Запрос.УстановитьПараметр("ПоВсемФизлицам", ФизическиеЛица = Неопределено);
	
	Запрос.УстановитьПараметр("ДепонированоДо",	ДепонированоДо);
	Запрос.УстановитьПараметр("ПоВсемДатам",	ДепонированоДо = Неопределено);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НеВыплаченныеДепоненты.ФизическоеЛицо,
	|	НеВыплаченныеДепоненты.Ведомость,
	|	СУММА(НеВыплаченныеДепоненты.Сумма) КАК Сумма
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВзаиморасчетыСДепонентами.Организация КАК Организация,
	|		ВзаиморасчетыСДепонентами.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ВзаиморасчетыСДепонентами.Ведомость КАК Ведомость,
	|		ВЫБОР
	|			КОГДА ВзаиморасчетыСДепонентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ВзаиморасчетыСДепонентами.Сумма
	|			ИНАЧЕ -ВзаиморасчетыСДепонентами.Сумма
	|		КОНЕЦ КАК Сумма
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыСДепонентами КАК ВзаиморасчетыСДепонентами
	|	ГДЕ
	|		ВзаиморасчетыСДепонентами.Организация = &Организация
	|		И (&ПоВсемФизлицам
	|				ИЛИ ВзаиморасчетыСДепонентами.ФизическоеЛицо В (&ФизическиеЛица))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВзаиморасчетыСДепонентами.Организация,
	|		ВзаиморасчетыСДепонентами.ФизическоеЛицо,
	|		ВзаиморасчетыСДепонентами.Ведомость,
	|		ВЫБОР
	|			КОГДА ВзаиморасчетыСДепонентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ВзаиморасчетыСДепонентами.Сумма
	|			ИНАЧЕ ВзаиморасчетыСДепонентами.Сумма
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ВзаиморасчетыСДепонентами КАК ВзаиморасчетыСДепонентами
	|	ГДЕ
	|		ВзаиморасчетыСДепонентами.Регистратор = &Регистратор) КАК НеВыплаченныеДепоненты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыСДепонентами КАК ВзаиморасчетыСДепонентами
	|		ПО НеВыплаченныеДепоненты.Организация = ВзаиморасчетыСДепонентами.Организация
	|			И НеВыплаченныеДепоненты.ФизическоеЛицо = ВзаиморасчетыСДепонентами.ФизическоеЛицо
	|			И НеВыплаченныеДепоненты.Ведомость = ВзаиморасчетыСДепонентами.Ведомость
	|			И (ВзаиморасчетыСДепонентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|			И (&ПоВсемДатам
	|				ИЛИ ВзаиморасчетыСДепонентами.Период < &ДепонированоДо)
	|ГДЕ
	|	ВзаиморасчетыСДепонентами.Организация = &Организация
	|	И (&ПоВсемФизлицам
	|			ИЛИ ВзаиморасчетыСДепонентами.ФизическоеЛицо В (&ФизическиеЛица))
	|
	|СГРУППИРОВАТЬ ПО
	|	НеВыплаченныеДепоненты.ФизическоеЛицо,
	|	НеВыплаченныеДепоненты.Ведомость
	|
	|ИМЕЮЩИЕ
	|	СУММА(НеВыплаченныеДепоненты.Сумма) > 0";
	
	ОстатокДепонированнойЗарплаты = Запрос.Выполнить().Выгрузить();
	
	Возврат ОстатокДепонированнойЗарплаты;
	
КонецФункции

// Процедура регистрирует списание (выдачу) депонированных сумм
//
// Параметры
//  Движения 		- коллекция наборов записей движений платежного документа
//  Отказ    		- признак отказа в проведении
//	Организация		- организация
//	ДатаСписания	- дата списания депонированных сумм
//	СписываемыеСуммы- таблица значений с данными о списании депонированных сумм вида:
//								•	ФизическоеЛицо (СправочникСсылка.ФизическиеЛица)
//								•	Сумма (число 15.2)
//								•	Ведомость (ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу) - необязательное
//
// Возвращаемое значение:
//
// Обработка ошибочных ситуаций
//	выдается сообщение, признак «Отказ» выставляется в Истина
//
Процедура СписатьДепонированнуюЗарплату(Движения, Отказ, Организация, ДатаСписания, Знач Зарплата, ОтражатьВБухучете = Ложь) Экспорт
	
	Регистратор = Движения.ВзаиморасчетыСДепонентами.Отбор.Регистратор.Значение;
	
	// Взаиморасчеты с депонентами 
	СписываемыеСуммы = Зарплата.Скопировать();
	
	СписываемыеСуммы.Колонки.Добавить("ВидДвижения");
	СписываемыеСуммы.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
	
	СписываемыеСуммы.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	СписываемыеСуммы.ЗаполнитьЗначения(Организация, "Организация");
	
	СписываемыеСуммы.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	СписываемыеСуммы.ЗаполнитьЗначения(ДатаСписания, "Период");
	
	Движения.ВзаиморасчетыСДепонентами.Загрузить(СписываемыеСуммы);
	
	Движения.ВзаиморасчетыСДепонентами.Записывать = Истина;
	
	// Отражение в бухучете
	Если ОтражатьВБухучете Тогда
		ОтразитьВБухучете(Перечисления.ВидыОперацийПоЗарплате.СписаниеДепонента, Движения, Отказ, Организация, ДатаСписания, Зарплата)
	КонецЕсли
	
КонецПроцедуры

// Процедура регистрирует списание (выдачу) депонированных сумм
//
// Параметры
//  Регистратор				 - ДокументОбъект, регистрирующий движения
//  Отказ    				 - признак отказа в проведении
//	Организация				 - организация
//	НомерПлатежногоДокумента - Строка, номер документа по которому производится списание
//	ДатаСписания	- дата списания депонированных сумм
//	СписываемыеСуммы- таблица значений с данными о списании депонированных сумм вида:
//								•	ФизическоеЛицо (СправочникСсылка.ФизическиеЛица)
//								•	Сумма (число 15.2)
//								•	Ведомость (ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу) - необязательное
//
// Возвращаемое значение:
//
// Обработка ошибочных ситуаций
//	выдается сообщение, признак «Отказ» выставляется в Истина
//
Процедура СписатьДепонированнуюЗарплатуДокументом(Регистратор, Отказ, Организация, НомерПлатежногоДокумента, ДатаСписания, Знач Зарплата, ОтражатьВБухучете = Ложь) Экспорт
	
	Движения = Регистратор.Движения;
	
	// Взаиморасчеты с депонентами 
	СписываемыеСуммы = Зарплата.Скопировать();
	
	СписываемыеСуммы.Колонки.Добавить("ВидДвижения");
	СписываемыеСуммы.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
	
	СписываемыеСуммы.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	СписываемыеСуммы.ЗаполнитьЗначения(Организация, "Организация");
	
	СписываемыеСуммы.Колонки.Добавить("НомерПлатежногоДокумента", Новый ОписаниеТипов("Строка"));
	СписываемыеСуммы.ЗаполнитьЗначения(НомерПлатежногоДокумента, "НомерПлатежногоДокумента");
	
	СписываемыеСуммы.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	СписываемыеСуммы.ЗаполнитьЗначения(ДатаСписания, "Период");
	
	Движения.ВзаиморасчетыСДепонентами.Загрузить(СписываемыеСуммы);
	
	Движения.ВзаиморасчетыСДепонентами.Записывать = Истина;
	
	// Отражение в бухучете
	Если ОтражатьВБухучете Тогда
		ОтразитьВБухучете(Перечисления.ВидыОперацийПоЗарплате.СписаниеДепонента, Движения, Отказ, Организация, ДатаСписания, Зарплата)
	КонецЕсли	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОтразитьВБухучете(ВидОперации, Движения, Отказ, Организация, ДатаОперации, Знач Зарплата)

		Депоненты = Зарплата.Скопировать();
		Депоненты.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоЗарплате"));
		Депоненты.ЗаполнитьЗначения(ВидОперации, "ВидОперации");
		
		УчетДепонированнойЗарплатыПереопределяемый.ОтразитьВБухучете(Движения, Отказ, Организация, ДатаОперации, Депоненты);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции документа Депонирование зарплаты

/// Обработчики событий модуля объекта документов Депонирование зарплаты

Процедура ДепонированиеЗарплатыОбработкаПроведения(ДокументОбъект, Отказ) Экспорт
	УчетДепонированнойЗарплатыВнутренний.ДепонированиеЗарплатыОбработкаПроведения(ДокументОбъект, Отказ);
КонецПроцедуры

/// Методы доступа к документу депонирования

 Функция ДепонированиеЗарплатыДанныеДляПроведения(ДокументОбъект) Экспорт
	Возврат УчетДепонированнойЗарплатыВнутренний.ДепонированиеЗарплатыДанныеДляПроведения(ДокументОбъект);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Блок функций первоначального заполнения и обновления ИБ
//

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	
КонецПроцедуры
