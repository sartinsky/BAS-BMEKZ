////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ПРОВЕРКИ НЕОБХОДИМОСТИ ПРОВЕДЕНИЯ ДОКУМЕНТОВ ПО РАЗДЕЛАМ УЧЕТА

// Функция возвращает признак необходимости контроля отрицальных остатков товаров при списании.
//
Функция ОтключитьКонтрольОтрицательныхОстатков() Экспорт
	
	Возврат Константы.ОтключитьКонтрольОтрицательныхОстатков.Получить();
	
КонецФункции // ОтключитьКонтрольОтрицательныхОстатков()

// Функция возвращает признак необходимости отражения на счетах расчетов с контрагентами on-line.
//
Функция ПроводитьПоРасчетамСКонтрагентами(Организация, Период) Экспорт
	
	Возврат Истина;
	
КонецФункции // ПроводитьПоРасчетамСКонтрагентами()

// Функция возвращает признак необходимости отражения в регистрах НДС on-line.
//
Функция ПроводитьПоНДС(Организация, Период) Экспорт
	
	Возврат Истина;
	
КонецФункции // ПроводитьПоНДС()

// Функция возвращает признак необходимости отражения по налоговому учету.
//
Функция ПроводитьПоНУ(Организация, Период) Экспорт
	
	Возврат Истина;
	
КонецФункции // ПроводитьПоНУ()

// Функция возвращает признак необходимости отражения на счетах учетам МПЗ on-line.
//
Функция ПроводитьПоСписаниюМПЗ(Организация, Период) Экспорт
	
	Возврат Истина;
	
КонецФункции // ПроводитьПоСписаниюМПЗ()

// Функция возвращает 1, если ведется кадровый учет, иначе 0.
//
Функция ВедетсяКадровыйУчет() Экспорт
	
	Возврат УчетЗарплаты.ВедетсяКадровыйУчет();

КонецФункции // ВедетсяКадровыйУчет()

// Процедура устанавливает настройки для ведения кадрового учета
//
// Параметры:
//	ВестиКадровыйУчет - Булево
//
Процедура УстановитьНастройкиКадровогоУчета(ВестиКадровыйУчет, УчетЗарплатыИКадровСредствамиБухгалтерии) Экспорт

	УчетЗарплаты.УстановитьНастройкиКадровогоУчета(ВестиКадровыйУчет, УчетЗарплатыИКадровСредствамиБухгалтерии);
	
КонецПроцедуры // УстановитьУчетЗарплатыИКадровВоВнешнейПрограмме()

// Функция возвращает 1, если используется учет зарплаты ведется во внешней программе, иначе 0.
//
Функция УчетЗарплатыИКадровВоВнешнейПрограмме() Экспорт
	
	Возврат ?(Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить(), 1, 0);

КонецФункции // УчетЗарплатыИКадровВоВнешнейПрограмме()

// Процедура устанавливает настройки для ведения учета зарплаты во внешней программе.
//
// Параметры:
//	ВестиУчетЗарплатыИКадровВоВнешнейПрограмме - Булево
//
Процедура УстановитьУчетЗарплатыИКадровВоВнешнейПрограмме(ВестиУчетЗарплатыИКадровВоВнешнейПрограмме) Экспорт

	Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Установить(ВестиУчетЗарплатыИКадровВоВнешнейПрограмме);
	
	Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Установить(НЕ ВестиУчетЗарплатыИКадровВоВнешнейПрограмме);
		
	УчетЗарплаты.УстановитьНастройкиУчетаЗарплаты(ВестиУчетЗарплатыИКадровВоВнешнейПрограмме);
		
КонецПроцедуры // УстановитьУчетЗарплатыИКадровВоВнешнейПрограмме()

// Функция возвращает 1, если используется учет зарплаты ведется сводно, иначе 0.
//
Функция ВедетсяУчетРасчетовПоЗарплатеСводно() Экспорт
	
	Возврат Константы.ВедетсяУчетРасчетовПоЗарплатеСводно.Получить();

КонецФункции // ВедетсяУчетРасчетовПоЗарплатеСводно()

// Процедура устанавливает настройки для ведения учета зарплаты во внешней программе.
//
// Параметры:
//	ВестиУчетЗарплатыИКадровВоВнешнейПрограмме - Булево
//
Процедура УстановитьПараметрыУчетаРасчетовПоЗарплате(ВедетсяУчетРасчетовПоЗарплатеСводно) Экспорт

	Константы.ВедетсяУчетРасчетовПоЗарплатеСводно.Установить(ВедетсяУчетРасчетовПоЗарплатеСводно);
	Константы.ВедетсяУчетРасчетовПоЗарплатеПоРаботникам.Установить(НЕ ВедетсяУчетРасчетовПоЗарплатеСводно);

КонецПроцедуры // УстановитьПараметрыУчетаРасчетовПоЗарплате()

// Функция возвращает Истина, если в настройках организации указано, что ведется производственная деятельность.
//
Функция ВедетсяПроизводственнаяДеятельность(Организация, Период) Экспорт

 	Возврат ПолучитьФункциональнуюОпцию("ВедетсяПроизводственнаяДеятельность") И УчетнаяПолитика.ВедетсяПроизводственнаяДеятельность(Организация, Период);
 	
КонецФункции // ВедетсяПроизводственнаяДеятельность()

// Функция возвращает Истина, если в конфигурации ведется учет по валютам.
//
Функция ИспользоватьВалютныйУчет() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет");

КонецФункции // ИспользоватьВалютныйУчет()

// Функция возвращает ИСТИНА, если документ считается проведенным.
//
Функция ДокументПроведен(ДокументСсылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОперацияБух") 
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаЗаписейРегистров") Тогда
	
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ПометкаУдаления");
		Возврат НЕ РеквизитыДокумента.ПометкаУдаления;

	Иначе
	
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Проведен");
		Возврат РеквизитыДокумента.Проведен;
	
	КонецЕсли;	

КонецФункции // ДокументПроведен()


///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВОЙСТВ ДОГОВОРА

//Функция возвращает организацию по договору
//
Функция ПолучитьОрганизациюПоДоговору(Договор) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "Организация");
	
КонецФункции // ПолучитьОрганизациюПоДоговору()

//Функция возвращает контрагента по договору
//
Функция ПолучитьКонтрагентаПоДоговору(Договор) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора());
	
КонецФункции // ПолучитьКонтрагентаПоДоговору()

//Функция возвращает вид расчетов по договору
// Параметры
//		ДоговорКонтрагента 				- СправочникСсылка.ДоговорыКонтрагентов
//
// Возвращаемое значение
//      ПеречислениеСсылка.ВидыРасчетовПоДоговорам
//
Функция ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента) Экспорт
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
		"ВалютаВзаиморасчетов");
	
	Если РеквизитыДоговора.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета 
	 ИЛИ НЕ ЗначениеЗаполнено(РеквизитыДоговора.ВалютаВзаиморасчетов) Тогда
	
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;
	
	Иначе
	
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;
	
	Конецесли;
	
	Возврат ВидРасчетовПоДоговору;

КонецФункции

//Функция возвращает валюту договора
// Параметры
//		ДоговорКонтрагента 				- СправочникСсылка.ДоговорыКонтрагентов
//
// Возвращаемое значение
//      СправочникСсылка.Валюты
Функция ВалютаВзаиморасчетов(ДоговорКонтрагента) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	
КонецФункции // ВалютаВзаиморасчетов()


//Функция возвращет пустое значение договора
//
Функция ПолучитьПустоеЗначениеДоговора() Экспорт
	
	Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
КонецФункции // ПолучитьПустоеЗначениеДоговора()

//Функция возвращает текст, для получения свойства ВидДоговора в запросе
//
Функция ТекстЗапросаВидДоговора(ИмяПоля) Экспорт
	
	// Для УП будет
	//
	// ВЫРАЗИТЬ(ПолеДоговор КАК Справочник.ДоговорыКонтрагентов).ХозяйственнаяОперация
	
	ИмяРеквизитаВидДоговора = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаВидДоговора();
	
	Возврат СтрЗаменить("ВЫРАЗИТЬ(ПолеДоговор КАК Справочник.ДоговорыКонтрагентов)." + ИмяРеквизитаВидДоговора, "ПолеДоговор", ИмяПоля); 
	
КонецФункции // ТекстЗапросаВидДоговора()


// Получает договор контрагента по умолчанию с учетом условий отбора. Возвращается основной договор или единственный или пустая ссылка
//
// Параметры
//  ВладелецДоговора	–	<СправочникСсылка.Контрагенты> 
//							Контрагент, договор которого нужно получить
//  ОрганизацияДоговора	–	<СправочникСсылка.Организации> 
//							Организация, договор которой нужно получить
//  СписокВидовДоговора	–	<Массив> или <СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоровКонтрагентов> 
//							Нужные виды договора
//  СтруктураПараметров	–	<Структура>
//							Структура дополнительных параметров отбора договоров по реквизитам.
//							Элементы структуры СтруктураПараметров:
//							Ключ - имя реквизита договора, Значение - еще одна структура
//							
//							Элементы структуры, которая находится в Значение:
//							Ключ - "ЗначениеОтбора", Значение - значение реквизита договора для отбора. Обязательный элемент.
//							Ключ - "ВидСравненияОтбора", Значение - <ВидСравнения>. Необязательный элемент, по умолчанию ВидСравнения.Равно
//
// Возвращаемое значение:
//   <СправочникСсылка.ДоговорыКонтрагентов> – найденный счет или пустая ссылка
//
Функция УстановитьДоговорКонтрагента(ДоговорКонтрагента,ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора=неопределено, СтруктураПараметров = Неопределено) Экспорт

	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникВладелец
	|		ПО ДоговорыКонтрагентов.Владелец = СправочникВладелец.Ссылка
	|			И ДоговорыКонтрагентов.Ссылка = СправочникВладелец.ОсновнойДоговорКонтрагента
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ОрганизацияДоговора);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	ИмяРеквизитаКонтрагент = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора();
	ИмяРеквизитаВидДоговора = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаВидДоговора();
	
	ТекстФильтра = "
	|	ДоговорыКонтрагентов." + ИмяРеквизитаКонтрагент + " = &ВладелецДоговора
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
	+?(СписокВидовДоговора<>неопределено,"
	|	И ДоговорыКонтрагентов." + ИмяРеквизитаВидДоговора + " В (&СписокВидовДоговора)","");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Для каждого Параметр Из СтруктураПараметров Цикл
			ИмяРеквизита = Параметр.Ключ;
			СтруктураОтбора = Параметр.Значение;
			
			ВидСравненияЗапроса = "";

			Если НЕ СтруктураОтбора.Свойство("ВидСравненияОтбора") Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Равно Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
				ВидСравненияЗапроса = "<>";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
				ВидСравненияЗапроса = "В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
				ВидСравненияЗапроса = "НЕ В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Больше Тогда
				ВидСравненияЗапроса = ">";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
				ВидСравненияЗапроса = ">=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Меньше Тогда
				ВидСравненияЗапроса = "<";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
				ВидСравненияЗапроса = "<=";
			Иначе // другие варианты 
				ВидСравненияЗапроса = "=";
			КонецЕсли;
			
			ТекстФильтра = ТекстФильтра + "
			|	И ДоговорыКонтрагентов." + ИмяРеквизита + " " + ВидСравненияЗапроса + " (&" + ИмяРеквизита + ")";
			Запрос.УстановитьПараметр(ИмяРеквизита, СтруктураОтбора.ЗначениеОтбора);
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НайденОсновнойДоговор = Выборка.Приоритет = 1;
		НайденОдинДоговор     = Выборка.Количество() = 1;
		
		Если НайденОсновнойДоговор ИЛИ НайденОдинДоговор Тогда
			НовыйДоговор = Выборка.Ссылка;
		КонецЕсли;
	
	КонецЕсли;
	
	РеквизитыДоговора = ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента);
	
	Если (НЕ ЗначениеЗаполнено(ДоговорКонтрагента)) 
		ИЛИ (РеквизитыДоговора.Владелец <> ВладелецДоговора ИЛИ РеквизитыДоговора.Организация <> ОрганизацияДоговора)  Тогда	
		ДоговорКонтрагента = НовыйДоговор;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПолучитьДоговорКонтрагента()

// Функция ЭтоВидДоговораСПоставщиком возвращает ИСТИНА, 
// если договор с таким видом является договором с поставщиком.
//
Функция ЭтоВидДоговораСПоставщиком(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;

КонецФункции // ЭтоВидДоговораСПоставщиком()

// Функция ЭтоВидДоговораСПокупателем возвращает ИСТИНА, 
// если договор с таким видом является договором с покупателем.
//
Функция ЭтоВидДоговораСПокупателем(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;

КонецФункции // ЭтоВидДоговораСПокупателем()

// Функция ЭтоВидДоговораСКомитентом возвращает ИСТИНА, 
// если договор с таким видом является договором с комитентом.
//
Функция ЭтоВидДоговораСКомитентом(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;

КонецФункции // ЭтоВидДоговораСКомитентом()

// Функция ЭтоВидДоговораСКомиссионером возвращает ИСТИНА, 
// если договор с таким видом является договором с комиссионером.
//
Функция ЭтоВидДоговораСКомиссионером(ВидДоговораХозОперация) Экспорт

	Возврат ВидДоговораХозОперация = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;

КонецФункции // ЭтоВидДоговораСКомиссионером()


// Функция ПолучитьВидДоговораСПоставщиком возвращает значение вида договоров, 
// которые используются при расчетах с поставщиками.
//
Функция ПолучитьВидДоговораСПоставщиком() Экспорт

	Возврат Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;

КонецФункции // ПолучитьВидДоговораСПоставщиком()

// Функция ПолучитьВидДоговораСПокупателем возвращает значение вида договоров, 
// которые используются при расчетах с покупателями.
//
Функция ПолучитьВидДоговораСПокупателем() Экспорт

	Возврат Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;

КонецФункции // ПолучитьВидДоговораСПокупателем()

// Функция ПолучитьВидДоговораСКомиссионером возвращает значение вида договоров, 
// которые используются при расчетах с комиссионерами.
//
Функция ПолучитьВидДоговораСКомиссионером() Экспорт

	Возврат Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;

КонецФункции // ПолучитьВидДоговораСКомиссионером()

// Функция ПолучитьВидДоговораСКомитентом возвращает значение вида договоров, 
// которые используются при расчетах с комитентами.
//
Функция ПолучитьВидДоговораСКомитентом() Экспорт

	Возврат Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;

КонецФункции // ПолучитьВидДоговораСКомитентом()

// Функция ПолучитьМассивВидовДоговоров возвращает массив видов договоров
// в соответствии с переданными параметрами. Функцию можно использовать для
// сокращения числа вызова отдельных функций, возвращающих по одному значению.
//
// Параметры:
//		СПоставщиком - Булево, признак включения видов договоров с поставщиком
//		СПокупателем - Булево, признак включения видов договоров с покупателем
//		СКомитентом  - Булево, признак включения видов договоров с комитентом
//		СКомиссионером  - Булево, признак включения видов договоров с комиссионером
//
Функция ПолучитьМассивВидовДоговоров(СПоставщиком = Ложь, СПокупателем = Ложь, 
	СКомитентом = Ложь, СКомиссионером = Ложь) Экспорт

	МассивВидыДоговоров = Новый Массив;
	
	Если СПоставщиком Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	КонецЕсли;

	Если СПокупателем Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	КонецЕсли;

	Если СКомитентом Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	КонецЕсли;

	Если СКомиссионером Тогда
		МассивВидыДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	КонецЕсли;


	Возврат МассивВидыДоговоров;

КонецФункции // ПолучитьМассивВидовДоговоров()

// Функция ПолучитьРеквизитыДоговора() возвращает структуру со реквизитами договора, 
// используемыми при проведении документов по регламентированному учету. Функция используется 
// для унификации имен реквизитов справочника ДоговорыКонтрагентов при обращении к ним 
// из разных конфигураций, при этом типы самих реквизитов могут различаться в разных 
// конфигурациях.
//
// Параметры:
//  ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов.
//
// Возвращаемое значение:
//  Структура с ключами:
//		Ссылка				 - СправочникСсылка.ДоговорыКонтрагентов, ссылка на сам договор
//		ВалютаВзаиморасчетов - СправочникСсылка.Валюты, валюта взаиморасчетов по договору
//		Организация 		 - СправочникСсылка.Организации, организация, с которой заключен договор
//		Владелец 			 - СправочникСсылка.Контрагент, контрагент, с которым заключен договор
//		ВидДоговора 		 - ПеречислениеСсылка.ВидыДоговоровКонтрагентов  (БП)
//							   или ПеречислениеСсылка.ХозяйственныеОперации (УП) 
//		ТипЦен				 - СправочникСсылка.ТипыЦенНоменклатуры (БП)
//							   или НЕОПРЕДЕЛЕНО (УП)
//		
//		
Функция ПолучитьРеквизитыДоговораКонтрагента(ДоговорКонтрагента) Экспорт

	СтруктураРеквизиты = Новый Структура();
	СтруктураРеквизиты.Вставить("Ссылка",  				Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ВалютаВзаиморасчетов",	Справочники.Валюты.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("Владелец",				Справочники.Контрагенты.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("Организация",			Справочники.Организации.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ТипЦен",				Справочники.ТипыЦенНоменклатуры.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ВидДоговора",			Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка());

	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СтруктураРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента,
																		"Ссылка,
																		|ВалютаВзаиморасчетов,
																		|Владелец,
																		|Организация,
																		|ТипЦен,
																		|ВидДоговора");
	КонецЕсли;
	
	Возврат СтруктураРеквизиты;

КонецФункции // ПолучитьРеквизитыДоговора()

// Функция возвращает договор с контрагентом из переданного документа.
//
Функция ПолучитьДоговорКонтрагентаИзДокумента(ДокументОснование) Экспорт

	ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда

		// Взять первый договор из табличной части
		Если ДокументОснование.ДоговорКонтрагента.Пустая() Тогда
			Если ДокументОснование.РасшифровкаПлатежа.Количество() > 0 Тогда
				ДоговорКонтрагента = ДокументОснование.РасшифровкаПлатежа[0].ДоговорКонтрагента;
			КонецЕсли;
		Иначе
			ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента;
		КонецЕсли;

	КонецЕсли;

	Возврат ДоговорКонтрагента;

КонецФункции // ПолучитьДоговорКонтрагентаИзДокумента()

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВОЙСТВ СКЛАДА

// Функция ТекстЗапросаНоменклатурнаяГруппаСклада возвращает текст запроса
// для получения НоменклатурнойГруппы из склада.
//
Функция ТекстЗапросаНоменклатурнаяГруппаСклада(ИмяПоля) Экспорт

	Возврат "ВЫРАЗИТЬ(" + ИмяПоля + " КАК Справочник.Склады).НоменклатурнаяГруппа"; 

КонецФункции // ТекстЗапросаНоменклатурнаяГруппаСклада()

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВОЙСТВ НОМЕНКЛАТУРЫ

// Возвращает сведения о номенклатуре
//
// Параметры:
//  Номенклатура       - номенклатура
//  ПараметрыОбъекта   - структура содержащая поля:
//  - Дата                    - обязательный
//  - Организация             - обязательный
//  - Склад                   - не обязательный
//  - ТипЦен                  - не обязательный
//  - ВалютаДокумента         - не обязательный
//  - КурсВзаиморасчетов      - не обязательный
//  - КратностьВзаиморасчетов - не обязательный
//  - СуммаВключаетНДС        - не обязательный
//  - СтавкаНДС               - не обязательный (Если параметр передан,
//    то будет использована переданная ставка, иначе ставка из номенклатуры)
//
// Возвращаемое значение:
//  Структура - структура сведений о номенклатуре.
//
Функция ПолучитьСведенияОНоменклатуре(Номенклатура, ПараметрыОбъекта) Экспорт

	Если ТипЗнч(Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокНоменклатуры = Новый Массив;
	СписокНоменклатуры.Добавить(Номенклатура);
	
	СведенияОНоменклатуре = ПолучитьСведенияОСпискеНоменклатуры(СписокНоменклатуры, ПараметрыОбъекта).Получить(Номенклатура);
	
	Возврат СведенияОНоменклатуре;

КонецФункции

// Возвращает сведения о массиве номенклатуры
//
// Параметры:
//  СписокНоменклатуры - массив номенклатуры
//  ПараметрыОбъекта   - структура содержащая поля:
//  - Дата                    - обязательный
//  - Организация             - обязательный
//  - Склад                   - не обязательный
//  - ТипЦен                  - не обязательный
//  - ВалютаДокумента         - не обязательный
//  - КурсВзаиморасчетов      - не обязательный
//  - КратностьВзаиморасчетов - не обязательный
//  - СуммаВключаетНДС        - не обязательный
//  - СтавкаНДС               - не обязательный (Если параметр передан,
//    то будет использована переданная ставка, иначе ставка из номенклатуры)
//
// Возвращает соответствие:
//  Ключ     - номенклатура
//  Значение - структура сведений о номенклатуре
//
Функция ПолучитьСведенияОСпискеНоменклатуры(СписокНоменклатуры, ПараметрыОбъекта) Экспорт
	Перем Склад;
	перем СтавкаНДС, ЦенаВключаетНДС, СуммаВключаетНДС;
	Перем ВалютаДокумента, КурсДокумента, КратностьДокумента;
	Перем ТипЦен, ТипЦенРозничнойТорговли, ТипЦенПлановойСебестоимости;
	Перем ТаблицаЦен, ТаблицаЦенВРознице, ТаблицаЦенПлановойСебестоимости;
	
	Дата		= ПараметрыОбъекта.Дата;
	Организация	= ПараметрыОбъекта.Организация;
	
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Организация, Дата);
	ПлательщикНДСПриостановлен = УчетнаяПолитика.ПлательщикНДСПриостановлен(Организация, Дата);
	
	ПараметрыОбъекта.Свойство("СтавкаНДС", СтавкаНДС);
	ПараметрыОбъекта.Свойство("ТипЦенПлановойСебестоимости", ТипЦенПлановойСебестоимости);
	
	Если ПараметрыОбъекта.Свойство("Склад", Склад) И ЗначениеЗаполнено(Склад) Тогда
		Если ТипЗнч(Склад) = Тип("СправочникСсылка.Склады") Тогда // ИНАГРО
			ТипЦенРозничнойТорговли = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипЦенРозничнойТорговли");
		КонецЕслИ;
	КонецЕслИ;
	
	Если ПараметрыОбъекта.Свойство("ТипЦен", ТипЦен) И ЗначениеЗаполнено(ТипЦен) Тогда
		ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС = Ложь;
	КонецЕсли;
	
	Если НЕ ПараметрыОбъекта.Свойство("СуммаВключаетНДС", СуммаВключаетНДС) Тогда
		СуммаВключаетНДС = ЦенаВключаетНДС;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если НЕ ПараметрыОбъекта.Свойство("ВалютаДокумента", ВалютаДокумента)
		ИЛИ НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
		
		ПараметрыОбъекта.Свойство("КурсДокумента", КурсДокумента);
		ПараметрыОбъекта.Свойство("КратностьДокумента", КратностьДокумента);
		
		Если КурсДокумента = Неопределено ИЛИ КратностьДокумента = Неопределено Тогда
			ПараметрыОбъекта.Свойство("КурсВзаиморасчетов", КурсДокумента);
			ПараметрыОбъекта.Свойство("КратностьВзаиморасчетов", КратностьДокумента);
		КонецЕсли;
		
		Если КурсДокумента = Неопределено ИЛИ КратностьДокумента = Неопределено Тогда
			КурсНаДату = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
			КурсДокумента		= КурсНаДату.Курс;
			КратностьДокумента	= КурсНаДату.Кратность;
		КонецЕсли;
		
	Иначе
		КурсДокумента		= 1;
		КратностьДокумента	= 1;
	КонецЕсли;
	
	ИменаРеквизитов =
		"Код, Наименование, НаименованиеПолное, Артикул,
		|БазоваяЕдиницаИзмерения, СтавкаНДС,
		|Услуга, НоменклатурнаяГруппа,
		|СтатьяЗатрат, ОсновнаяСпецификацияНоменклатуры";
	
	СоответствиеСведенийОНоменклатуре = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокНоменклатуры, ИменаРеквизитов);
	
	
	СоответствиеСчетовУчета = ПолучитьСчетаУчетаСпискаНоменклатуры(
		Организация, СписокНоменклатуры, Склад, Дата);
	
	Если ЗначениеЗаполнено(ТипЦен) Тогда
		ТаблицаЦен = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(СписокНоменклатуры, ТипЦен, Дата);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипЦенРозничнойТорговли) Тогда
		ТаблицаЦенВРознице = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(СписокНоменклатуры, ТипЦенРозничнойТорговли, Дата);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипЦенПлановойСебестоимости) Тогда
		ТаблицаЦенПлановойСебестоимости = Ценообразование.ПолучитьТаблицуЦенНоменклатуры(СписокНоменклатуры, ТипЦенПлановойСебестоимости, Дата);
	КонецЕсли;
	
	
	Для Каждого Номенклатура Из СписокНоменклатуры Цикл
		
		СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(Номенклатура);
		Если СведенияОНоменклатуре = Неопределено Тогда
			СведенияОНоменклатуре = Новый Структура(ИменаРеквизитов);
			СоответствиеСведенийОНоменклатуре.Вставить(Номенклатура, СведенияОНоменклатуре);
		КонецЕсли;
		
		Если ПустаяСтрока(СведенияОНоменклатуре.НаименованиеПолное) Тогда
			СведенияОНоменклатуре.НаименованиеПолное = СведенияОНоменклатуре.Наименование;
		КонецЕсли;
		
		СведенияОНоменклатуре.Вставить("Коэффициент", ?(ЗначениеЗаполнено(СведенияОНоменклатуре.БазоваяЕдиницаИзмерения), 1, 0));
		
		СчетаУчета = СоответствиеСчетовУчета.Получить(Номенклатура);
		СведенияОНоменклатуре.Вставить("СчетаУчета", СчетаУчета);
		
		Комиссионный	= Ложь;
		
		Если СчетаУчета <> Неопределено Тогда
			
			СвойстваСчетаУчетаБУ = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетаУчета.СчетУчетаБУ);
			Комиссионный = СвойстваСчетаУчетаБУ.Забалансовый;
			
		КонецЕсли;
		
		СведенияОНоменклатуре.Вставить("Комиссионный",	Комиссионный);
		
		
			
		Если ЗначениеЗаполнено(СтавкаНДС) Тогда;
			// Ставка НДС передана в параметрах
			СведенияОНоменклатуре.СтавкаНДС = СтавкаНДС;
			
		
		ИначеЕсли НЕ ПлательщикНДС ИЛИ ПлательщикНДСПриостановлен Тогда
				СведенияОНоменклатуре.СтавкаНДС = Перечисления.СтавкиНДС.НеНДС;

		КонецЕсли;
		
		Цена = 0;
		Если ЗначениеЗаполнено(ТипЦен) Тогда
			
			НайденнаяСтрока	= ТаблицаЦен.Найти(Номенклатура, "Номенклатура");
			Если НайденнаяСтрока <> Неопределено Тогда
				
				Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					НайденнаяСтрока.Цена,
					НайденнаяСтрока.Валюта, ВалютаДокумента,
					НайденнаяСтрока.Курс, КурсДокумента,
					НайденнаяСтрока.Кратность, КратностьДокумента);
					
				Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
					Цена, ЦенаВключаетНДС, СуммаВключаетНДС,
					УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
					
			КонецЕсли;
			
		КонецЕсли;
		СведенияОНоменклатуре.Вставить("Цена", Цена);
		СведенияОНоменклатуре.Вставить("ЦенаВключаетНДС", ЦенаВключаетНДС);
		
		ЦенаВРознице = 0;
		Если ЗначениеЗаполнено(ТипЦенРозничнойТорговли) Тогда
			
			НайденнаяСтрока = ТаблицаЦенВРознице.Найти(Номенклатура, "Номенклатура");
			Если НайденнаяСтрока <> Неопределено Тогда
				
				ЦенаВРознице = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					НайденнаяСтрока.Цена,
					НайденнаяСтрока.Валюта, ВалютаРегламентированногоУчета,
					НайденнаяСтрока.Курс, 1,
					НайденнаяСтрока.Кратность, 1);
			КонецЕсли;
			
		КонецЕсли;
		СведенияОНоменклатуре.Вставить("ЦенаВРознице", ЦенаВРознице);
		
		Если НЕ ПлательщикНДС ИЛИ ПлательщикНДСПриостановлен Тогда
			СведенияОНоменклатуре.Вставить("СтавкаНДСВРознице", Перечисления.СтавкиНДС.НеНДС);
		Иначе
			СведенияОНоменклатуре.Вставить("СтавкаНДСВРознице", СведенияОНоменклатуре.СтавкаНДС);
		КонецЕсли;
		
		ПлановаяСтоимость = 0;
		Если ЗначениеЗаполнено(ТипЦенПлановойСебестоимости) Тогда
			
			НайденнаяСтрока = ТаблицаЦенПлановойСебестоимости.Найти(Номенклатура, "Номенклатура");
			Если НайденнаяСтрока <> Неопределено Тогда
				
				ПлановаяСтоимость = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					НайденнаяСтрока.Цена,
					НайденнаяСтрока.Валюта, ВалютаРегламентированногоУчета,
					НайденнаяСтрока.Курс, 1,
					НайденнаяСтрока.Кратность, 1);
			КонецЕсли;
			
		КонецЕсли;
		СведенияОНоменклатуре.Вставить("ПлановаяСтоимость", ПлановаяСтоимость);
		
	КонецЦикла;
	
	Возврат СоответствиеСведенийОНоменклатуре;

КонецФункции

// Функция возвращает Истина, если переданная номенклатура является услугой.
//
Функция НоменклатураЯвляетсяУслугой(Номенклатура) Экспорт

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Услуга");

КонецФункции // НоменклатураЯвляетсяУслугой()

// Функция возвращает выражение на языке запросов для получения признака услуги 
// от поля типа Номенклатура.
//
Функция ТекстЗапросаЭтоУслуга(ПолеНоменклатура) Экспорт

	Возврат "ЕСТЬNULL(ВЫРАЗИТЬ(" + ПолеНоменклатура + " КАК Справочник.Номенклатура).Услуга, ЛОЖЬ)";

КонецФункции // ТекстЗапросаЭтоУслуга

///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОПРЕДЕЛЕНИЯ ТИПОВ

//Функция возвращает типы значений, для которых имеет смысл отбор по организации
//
Функция ТипыСвязанныеСОрганизацией() Экспорт
	
	Возврат Новый ОписаниеТипов(Документы.ТипВсеСсылки(), 
		"СправочникСсылка.БанковскиеСчета,СправочникСсылка.ПодразделенияОрганизаций,
		|СправочникСсылка.ДоговорыКонтрагентов");
		
КонецФункции // ТипыСвязанныеСОрганизацией()

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВОЙСТВ ОРГАНИЗАЦИИ

//Функция возвращает значение головной организации
//
Функция ГоловнаяОрганизация(Организация) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
	
КонецФункции // ГоловнаяОрганизация()

//Функция возвращает признак того, что организация является обособленным
//подразделением выделенным на отдельный баланс
//
Функция ОбособленноеПодразделение(Организация) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ОбособленноеПодразделение");
	
КонецФункции // ОбособленноеПодразделение()

// Формирует список головных организаций предприятия
//
Функция ПолучитьСписокГоловныхОрганизаций() Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Организации.Ссылка,
	                      |	Организации.Наименование КАК Наименование
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |ГДЕ
	                      |	Организации.ГоловнаяОрганизация = Организации.Ссылка
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Наименование");

	СписокОрганизаций = Новый СписокЗначений;

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОрганизаций;

КонецФункции

// Формирует список обособленных структурных подразделений организации
//
Функция ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование  КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|	И Организации.Ссылка <> &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";

	СписокОП = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() Цикл
		СписокОП.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОП;

КонецФункции // ПолучитьСписокОбособленныхПодразделенийОрганизации()

// Функция ПолучитьБанковскийСчетПоУмолчанию возвращает ссылку на 
// банковский счет организации или контрагента по умолчанию.
//
// Параметры:
//	ЮрФизЛицо 	- СправочникСсылка.Организации, СправочникСсылка.Контрагенты, лицо, 
//					для которого возвращается банковский счет.
//	Валюта 		- СправочникСсылка.Валюты, требуется для единообразия с БРУ и УП
//
// Возвращаемое значение:
// 	СправочникСсылка.БанковскиеСчета - основной банковский счет.
//
Функция ПолучитьБанковскийСчетПоУмолчанию(ЮрФизЛицо, Валюта = Неопределено) Экспорт

	БанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты")  Тогда
		
		БанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЮрФизЛицо, "ОсновнойБанковскийСчет");
		
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникОбъект.Организации")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникОбъект.Контрагенты") Тогда
		
		БанковскийСчет = ЮрФизЛицо.ОсновнойБанковскийСчет;
		
	КонецЕсли;
	
	Возврат БанковскийСчет;

КонецФункции // ПолучитьБанковскийСчетПоУмолчанию()

// Функция СтруктураОрганизации возвращает структуру с реквизитами организации
//
Функция СтруктураОрганизации(Организация) Экспорт

	Организации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация);
	СписокОП = Новый СписокЗначений;
	Для Каждого ЭлементМассива Из Организации Цикл
		СписокОП.Добавить(ЭлементМассива);
	КонецЦикла;

	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ГоловнаяОрганизация, ОбособленноеПодразделение, ЕстьОбособленныеПодразделения");
	
	СписокГО = Новый СписокЗначений;
	СписокГО.Добавить(РеквизитыОрганизации.ГоловнаяОрганизация);
	
	Если РеквизитыОрганизации.ЕстьОбособленныеПодразделения Тогда
		ТипОрганизации = "ГО";
	ИначеЕсли РеквизитыОрганизации.ОбособленноеПодразделение Тогда
		ТипОрганизации = "ОП";
	Иначе
		ТипОрганизации = "Простая";
	КонецЕсли;
		
	СвойстваОрганизации = Новый Структура("Тип, Организация, ГоловнаяОрганизация", ТипОрганизации, СписокОП, СписокГО);
	
	Возврат СвойстваОрганизации;
	
КонецФункции // СтруктураОрганизации()

// Возвращает перечень (массив) всех структурных частей переданной головной организации, имеющих отдельный баланс.
// В перечень входит головная организация и все ее обособленные подразделения на выделенном балансе.
// В перечень входят только те организации, данные по которым доступны текущему пользователю.
//
Функция ВсяОрганизация(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");

КонецФункции

Функция ВедетсяУчетКассОбособленныхПодразделений() Экспорт
	
	Возврат Константы.ИспользоватьУчетДенежныхСредствПоОбособленнымПодразделениям.Получить();

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВЕДЕНИЙ ОБ ОРГАНИЗАЦИИ ИЛИ КОНТРАГЕНТЕ



// Функция находит актуальное значение адреса в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//  ТипАдреса - тип контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного адреса
//
Функция ПолучитьАдресИзКонтактнойИнформации(Объект, ТипАдреса = "") Экспорт
	
	Если ЗначениеЗаполнено(Объект) Тогда
		
		Если ТипАдреса = "Фактический" Тогда
			Начало = "Факт";
		ИначеЕсли ТипАдреса = "Регистрации" Или ТипАдреса = "Юридический" Тогда
			Начало = "Юр";
		ИначеЕсли ТипАдреса = "Почтовый" Тогда
			Начало = "Почтовый";
		Иначе
			Начало = "";
		КонецЕсли;
		
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
			Окончание = "Организации";
			ВладелецКонтактнойИнформации = Объект;
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Окончание = "Контрагента";
			ВладелецКонтактнойИнформации = Объект;
		КонецЕсли;
		
		ВидАдреса = Справочники.ВидыКонтактнойИнформации[Начало + "Адрес" + Окончание].Ссылка;

		ТабЗн = ВладелецКонтактнойИнформации.КонтактнаяИнформация.Выгрузить();
		
		НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";

КонецФункции // ПолучитьАдресИзКонтактнойИнформации()

// Функция находит актуальное значение адреса в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//  ТипАдреса - тип контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного адреса
//
Функция ПолучитьСтрануИзКонтактнойИнформации(Объект, ТипАдреса = "") Экспорт 

	Если ЗначениеЗаполнено(Объект) Тогда
		
		Если ТипАдреса = "Фактический" Тогда
			Начало = "Факт";
		ИначеЕсли ТипАдреса = "Регистрации" Или ТипАдреса = "Юридический" Тогда
			Начало = "Юр";
		ИначеЕсли ТипАдреса = "Почтовый" Тогда
			Начало = "Почтовый";
		Иначе
			Начало = "";
		КонецЕсли;
		
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
			Окончание = "Организации";
			ВладелецКонтактнойИнформации = Объект;
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Окончание = "Контрагента";
			ВладелецКонтактнойИнформации = Объект;
		КонецЕсли;
		
		ВидАдреса = Справочники.ВидыКонтактнойИнформации[Начало + "Адрес" + Окончание].Ссылка;

		ТабЗн = ВладелецКонтактнойИнформации.КонтактнаяИнформация.Выгрузить();
		
		НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].Страна;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";

КонецФункции // ПолучитьСтрануИзКонтактнойИнформации()

// Функция находит актуальное значение телефона в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного телефона
//
Функция ПолучитьТелефонИзКонтактнойИнформации(Объект) Экспорт

	Если ЗначениеЗаполнено(Объект) Тогда
	
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
			Окончание = "Организации";
			ВладелецКонтактнойИнформации = Объект;
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Окончание = "Контрагента";
			ВладелецКонтактнойИнформации = Объект;
		КонецЕсли;

		ВидТелефона = Справочники.ВидыКонтактнойИнформации["Телефон" + Окончание].Ссылка;

		ТабЗн           = ВладелецКонтактнойИнформации.КонтактнаяИнформация.Выгрузить();
		НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ВидТелефона));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ПолучитьТелефонИзКонтактнойИнформации()

// Функция находит актуальное значение факса в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного факса
//
Функция ПолучитьФаксИзКонтактнойИнформации(Объект) Экспорт

	Если ЗначениеЗаполнено(Объект) Тогда
	
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
			Окончание = "Организации";
			ВладелецКонтактнойИнформации = Объект;
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Окончание = "Контрагенты";
			ВладелецКонтактнойИнформации = Объект;
		КонецЕсли;

		ВидФакса = Справочники.ВидыКонтактнойИнформации["Факс" + Окончание].Ссылка;

		ТабЗн           = ВладелецКонтактнойИнформации.КонтактнаяИнформация.Выгрузить();
		НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Факс, ВидФакса));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";


КонецФункции // ПолучитьФаксИзКонтактнойИнформации()

// Функция находит актуальное значение адреса Email в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного телефона
//
Функция ПолучитьEmailИзКонтактнойИнформации(Объект) Экспорт

	Если ЗначениеЗаполнено(Объект) Тогда
	
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
			Окончание = "Организации";
			ВладелецКонтактнойИнформации = Объект;
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Окончание = "Контрагенты";
			ВладелецКонтактнойИнформации = Объект;
		КонецЕсли;

		ВидЭлектроннойПочты = Справочники.ВидыКонтактнойИнформации["Email" + Окончание].Ссылка;

		ТабЗн           = ВладелецКонтактнойИнформации.КонтактнаяИнформация.Выгрузить();
		НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, ВидЭлектроннойПочты));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";

КонецФункции // ПолучитьEmailИзКонтактнойИнформации()

//  Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и отчества.
//  БанковскийСчет - Банковский счет, если счет не основной.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода = '20200101', ДляФизЛицаТолькоИнициалы = Истина, БанковскийСчет = Неопределено, КодЯзыка = "ru") Экспорт

	Сведения = Новый Структура("Представление, ПолноеНаименование, КодПоЕДРПОУ, КодПоДРФО, ИНН, НомерСвидетельства,"+ 
								"Телефоны, Факс, Email, ЮридическийАдрес, ФактическийАдрес,"+
								"Банк, МФО, КоррСчет, НомерСчета, НомерСчетаУстаревший, ПредставлениеБанковскогоСчета, МФО_Платеж, НомерСчетаСПереносом, АдресБанка,"+
								"ИнформацияОСтатусеПлательщикаНалогов, НаименованиеДСТУ");
	Запрос   = Новый Запрос;
	Данные   = Неопределено;

	Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		Возврат Сведения;
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("Строка") Тогда
		Сведения.Вставить("Представление",      ЮрФизЛицо);
		Сведения.Вставить("ПолноеНаименование", ЮрФизЛицо);
		Возврат Сведения;
	КонецЕсли;

	Если ЗначениеЗаполнено(БанковскийСчет) И ТипЗнч(БанковскийСчет) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		ТекБанковскийСчет = БанковскийСчет;
	Иначе
		ТекБанковскийСчет = ЮрФизЛицо.ОсновнойБанковскийСчет;
	КонецЕсли;

	ИмяРеквизитаБанка = "Банк";
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		ИмяСправочника = "Организации";
 		ИмяРегистраСхемыНалогообложения = "УчетнаяПолитикаОрганизаций";
 		ИмяИзмерения = "Организация";
		ИмяТаблицыКодовОрганизации = "КодыОрганизации";
		ТекстПоляИнформацияОСтатусеПлательщикаНалогов = "ЕСТЬNULL(РегистрСхемыНалогообложения.ИнформацияОСтатусеПлательщикаНалогов,"""")";
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяСправочника = "Контрагенты";
 		ИмяРегистраСхемыНалогообложения = "СхемыНалогообложенияКонтрагентов";
 		ИмяИзмерения = "Контрагент";
		ИмяТаблицыКодовОрганизации = "Организации";
		ТекстПоляИнформацияОСтатусеПлательщикаНалогов = " """" ";
	Иначе
		Возврат Сведения;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПарЮрФизЛицо", ЮрФизЛицо);
	Запрос.УстановитьПараметр("ПарБанковскийСчет", ТекБанковскийСчет);
 	Запрос.УстановитьПараметр("ДатаПериода", ДатаПериода);
	
	Если НЕ ЗначениеЗаполнено(ТекБанковскийСчет) Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	Организации.Представление      КАК Наименование,
		|	Организации.НаименованиеПолное КАК ПолноеНаименование,
		|	Организации.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,		
		|	"+ИмяТаблицыКодовОрганизации+".ИНН                КАК ИНН,
		|	Организации.КодПоЕДРПОУ		   КАК КодПоЕДРПОУ,
		|	"+ИмяТаблицыКодовОрганизации+".НомерСвидетельства КАК НомерСвидетельства,
		|	""""                           КАК НомерСчета,
		|	""""                           КАК НомерСчетаУстаревший,
		|	""""                           КАК Банк,
		|	""""                           КАК МФО,
		|	""""                           КАК КоррСчет,
		|	""""                           КАК АдресБанка,
		|	"+ТекстПоляИнформацияОСтатусеПлательщикаНалогов + " 			  КАК ИнформацияОСтатусеПлательщикаНалогов
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК Организации
		|
		|   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+ИмяРегистраСхемыНалогообложения+".СрезПоследних(&ДатаПериода) КАК РегистрСхемыНалогообложения
		|	ПО РегистрСхемыНалогообложения."+ИмяИзмерения+" = Организации.Ссылка";
		
		
		Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
			// У Организации регистрационные коды хранятся в регистре сведений
			ТекстЗапроса = ТекстЗапроса +"
		|   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыОрганизации.СрезПоследних(&ДатаПериода) КАК КодыОрганизации
		|	ПО КодыОрганизации.Организация = Организации.Ссылка";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса +"
		|ГДЕ
		|	Организации.Ссылка = &ПарЮрФизЛицо";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	Организации.Представление                      КАК Наименование,
		|	Организации.НаименованиеПолное                 КАК ПолноеНаименование,
		|	Организации.ЮридическоеФизическоеЛицо 		   КАК ЮридическоеФизическоеЛицо,		
		|	"+ИмяТаблицыКодовОрганизации+".ИНН 			   КАК ИНН,
		|	Организации.КодПоЕДРПОУ                        КАК КодПоЕДРПОУ,
		|	"+ИмяТаблицыКодовОрганизации+".НомерСвидетельства                 КАК НомерСвидетельства,
		|	БанковскиеСчета.НомерСчета                     КАК НомерСчета,
		|	БанковскиеСчета.НомерСчетаУстаревший           КАК НомерСчетаУстаревший,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+"          КАК Банк,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".Код      КАК МФО,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".КоррСчет КАК КоррСчет,
		|	БанковскиеСчета."+ИмяРеквизитаБанка+".Адрес    КАК АдресБанка,
		|	"+ТекстПоляИнформацияОСтатусеПлательщикаНалогов + " 			  КАК ИнформацияОСтатусеПлательщикаНалогов
		|ИЗ
		|	Справочник."+ИмяСправочника+" КАК Организации
		|
		|   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+ИмяРегистраСхемыНалогообложения+".СрезПоследних(&ДатаПериода) КАК РегистрСхемыНалогообложения
		|	ПО РегистрСхемыНалогообложения."+ИмяИзмерения+" = Организации.Ссылка";
		
		Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
			// У Организации регистрационные коды хранятся в регистре сведений
			ТекстЗапроса = ТекстЗапроса +"
		|   ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыОрганизации.СрезПоследних(&ДатаПериода) КАК КодыОрганизации
		|	ПО КодыОрганизации.Организация = Организации.Ссылка";
		
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса +",
		|	Справочник.БанковскиеСчета    КАК БанковскиеСчета
		|
		|ГДЕ
		|	Организации.Ссылка       = &ПарЮрФизЛицо
		|	И БанковскиеСчета.Ссылка = &ПарБанковскийСчет";
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	
	Данные = Запрос.Выполнить().Выбрать();
	Данные.Следующий();

	Если Данные.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		Сведения.Вставить("КодПоЕДРПОУ", Данные.КодПоЕДРПОУ);
	Иначе
		Сведения.Вставить("КодПоДРФО", Данные.КодПоЕДРПОУ);
	КонецЕсли;

	Сведения.Вставить("ПолноеНаименование", Данные.ПолноеНаименование);
	Сведения.Вставить("НаименованиеДСТУ", ВРег(Данные.ПолноеНаименование));

	Если Данные <> Неопределено Тогда
		Сведения.Вставить("Представление",    Данные.Наименование);
		Сведения.Вставить("ИНН",              Данные.ИНН);
		Сведения.Вставить("НомерСвидетельства", Данные.НомерСвидетельства);
		Сведения.Вставить("Телефоны",         ПолучитьТелефонИзКонтактнойИнформации(ЮрФизЛицо));
		Сведения.Вставить("Факс", 			  ПолучитьФаксИзКонтактнойИнформации(ЮрФизЛицо)); 
		Сведения.Вставить("Email",   		  ПолучитьEmailИзКонтактнойИнформации(ЮрФизЛицо));
		Сведения.Вставить("НомерСчета",       Данные.НомерСчета);
		Сведения.Вставить("НомерСчетаУстаревший",       Данные.НомерСчетаУстаревший);
		Сведения.Вставить("МФО_Платеж",       Данные.МФО);
		Сведения.Вставить("Банк",             Данные.Банк);
		Сведения.Вставить("МФО",              Данные.МФО);
		Сведения.Вставить("АдресБанка",       Данные.АдресБанка);
		Сведения.Вставить("КоррСчет",         Данные.КоррСчет);
		Сведения.Вставить("ЮридическийАдрес", 			ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо, "Юридический"));
		Сведения.Вставить("ФактическийАдрес", 			ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо, "Фактический"));
		Сведения.Вставить("ИнформацияОСтатусеПлательщикаНалогов",         Данные.ИнформацияОСтатусеПлательщикаНалогов);
															
		Если НЕ ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
			Сведения.ПолноеНаименование = Сведения.Представление;
		КонецЕсли;
		
		НачалоПереходногоПериода = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьДатуНачалаПереходаНаСтандартIBAN();
		КонецПереходногоПериода = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьДатуОкончанияПереходаНаСтандартIBAN();
		ПервыйНомерСчета = "";
		ВторойНомерСчета = "";
		Если ДатаПериода > КонецПереходногоПериода Тогда
			ПервыйНомерСчета = Данные.НомерСчета;
		ИначеЕсли ДатаПериода >= НачалоПереходногоПериода И ДатаПериода <= КонецПереходногоПериода Тогда
			ПервыйНомерСчета = Данные.НомерСчета;
			Если ЗначениеЗаполнено(Данные.НомерСчетаУстаревший) И Данные.НомерСчетаУстаревший <> Данные.НомерСчета Тогда
				ВторойНомерСчета = Данные.НомерСчетаУстаревший;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Данные.НомерСчетаУстаревший) Тогда
				ПервыйНомерСчета = Данные.НомерСчетаУстаревший;
				//заменяем для вывода номер счета на старый
				Сведения.Вставить("НомерСчета",       ПервыйНомерСчета);
			Иначе
				ПервыйНомерСчета = Данные.НомерСчета;
			КонецЕсли;
		КонецЕсли;
		
		НомерСчетаСПереносом = Сведения.НомерСчета;
		Если СтрДлина(НомерСчетаСПереносом) > 20 Тогда
			НомерСчетаСПереносом = Лев(НомерСчетаСПереносом, 10) + Символы.ПС + Сред(НомерСчетаСПереносом, 11);
		КонецЕсли;
		Сведения.Вставить("НомерСчетаСПереносом", НомерСчетаСПереносом);
		
		//заменяем для вывода МФО в платежках
		Если УправлениеДенежнымиСредствами.НомерБанковскогоСчетаСоответствуетСтандартуIBAN(Сведения.НомерСчета) Тогда
			Сведения.Вставить("МФО_Платеж", "0");
		КонецЕсли;
		
		ПредставлениеСчета = "";
		Если ЗначениеЗаполнено(ПервыйНомерСчета) Тогда
			
			НуженМФОПервогоСчета = НЕ УправлениеДенежнымиСредствами.НомерБанковскогоСчетаСоответствуетСтандартуIBAN(ПервыйНомерСчета);
			НуженМФОВторогоСчета = НЕ НуженМФОПервогоСчета И ЗначениеЗаполнено(ВторойНомерСчета) И НЕ УправлениеДенежнымиСредствами.НомерБанковскогоСчетаСоответствуетСтандартуIBAN(ВторойНомерСчета);
		
			ПредставлениеСчета = НСтр("ru='т/с ';uk='п/р '",КодЯзыка) + ПервыйНомерСчета 
				+ ?(ЗначениеЗаполнено(ВторойНомерСчета), 
					" (" + НСтр("ru='устар. ';uk='застар. '",КодЯзыка) + ВторойНомерСчета 
					+ ?(НуженМФОВторогоСчета, ", " + НСтр("ru='МФО ';uk='МФО '",КодЯзыка) + Данные.МФО, "")+ ")", "") 
				+ " " + НСтр("ru='в банке ';uk='у банку '",КодЯзыка) + Данные.Банк
				+ ?(НуженМФОПервогоСчета, ", " + НСтр("ru='МФО ';uk='МФО '",КодЯзыка) + Данные.МФО, "");
				
		КонецЕсли;
		Сведения.Вставить("ПредставлениеБанковскогоСчета",       ПредставлениеСчета);
	КонецЕсли;

	Возврат Сведения;

КонецФункции // СведенияОЮрФизЛице()

// Функция возвращает код организации (для юр/физ. лица)
//
// Параметры
//  СписокСведений - список значений со значениями параметров организации
//
// Возвращаемое значение:
//   Строка   – код ЕДРПОУ, если организация юр.лицо, код по ДРФО если физ.лицо
//
Функция ПолучитьКодОрганизации(СписокСведений) Экспорт

	Код = "";
	
	Если ТипЗнч(СписокСведений) = Тип("Структура") Тогда
		
		Если СписокСведений.Свойство("КодПоЕДРПОУ") Тогда
			
			Код = СписокСведений.КодПоЕДРПОУ;	
			
		КонецЕсли;
		
		// если в списке есть код по ДРФО, значит организация - физ.лицо.
		Если СписокСведений.Свойство("КодПоДРФО") Тогда
			
			Если НЕ ПустаяСтрока(СписокСведений.КодПоДРФО) Тогда
			
				Код = СписокСведений.КодПоДРФО;		
			
			КонецЕсли; 
			
		КонецЕсли;
		
	Иначе
		
		// странно, должна передаваться структура
		Код = СписокСведений;
		
	КонецЕсли;
	
	Возврат Код;
        
КонецФункции // ПолучитьКодОрганизации()

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ СВОЙСТВ ПОДРАЗДЕЛЕНИЯ

// Функция возвращает ссылку на пустое подразделение.
//
Функция ПустоеПодразделение() Экспорт

	Возврат Справочники.ПодразделенияОрганизаций.ПустаяСсылка();

КонецФункции // ПустоеПодразделение()

// Функция возвращает ссылку на пустое подразделение.
//
Функция ПустоеОбособленноеПодразделение() Экспорт

	Возврат Справочники.ОбособленныеПодразделенияОрганизаций.ПустаяСсылка();

КонецФункции // ПустоеПодразделение()

// Функция возвращает Истина, если переданное подразделение может быть выбрано для 
// указанной организации.
//                         
Функция ПодразделениеПринадлежитОрганизации(Подразделение, Организация) Экспорт

	Результат = Ложь;

	Если ЗначениеЗаполнено(Подразделение) И ЗначениеЗаполнено(Организация) Тогда
	
		ИмяРеквизитаОрганизации = БухгалтерскийУчетКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
	
		Если ЗначениеЗаполнено(ИмяРеквизитаОрганизации) Тогда
			РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подразделение, ИмяРеквизитаОрганизации);
			Результат = (РеквизитыПодразделения[ИмяРеквизитаОрганизации] = Организация);
		Иначе
			// Если для подразделения нет явно указанного владельца, то считаем, что любое подразделение может 
			// принадлежать любой организации.
			Результат = Истина;
		КонецЕсли;
	
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПодразделениеПринадлежитОрганизации()

// Функция возвращает организацию, соответствующую переданному подразделению.
// Если передан параметр ТекущаяВыбраннаяОрганизация и его значение не противоречит 
// соответствию подразделения и организации, то возвращает значение параметра ТекущаяВыбраннаяОрганизация.
//
Функция ОрганизацияПодразделения(Подразделение, ТекущаяВыбраннаяОрганизация = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
		Возврат ТекущаяВыбраннаяОрганизация;
	КонецЕсли;
	
	ИмяРеквизитаОрганизации = БухгалтерскийУчетКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
	
	Если НЕ ЗначениеЗаполнено(ИмяРеквизитаОрганизации) Тогда
		// Если нет явно заданного владельца, то оставляем текущую организацию.
		Возврат ТекущаяВыбраннаяОрганизация;
	КонецЕсли;
	
	РеквизитыПодразделения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Подразделение, ИмяРеквизитаОрганизации);
	Если ЗначениеЗаполнено(ТекущаяВыбраннаяОрганизация) 
		И РеквизитыПодразделения[ИмяРеквизитаОрганизации] = ТекущаяВыбраннаяОрганизация Тогда
		Возврат ТекущаяВыбраннаяОрганизация;
	ИначеЕсли ЗначениеЗаполнено(РеквизитыПодразделения[ИмяРеквизитаОрганизации]) Тогда
		Возврат РеквизитыПодразделения[ИмяРеквизитаОрганизации];
	Иначе
		Возврат ТекущаяВыбраннаяОрганизация;
	КонецЕсли;

КонецФункции // ОрганизацияПодразделения()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ НАСТРОЕК ПОЛЬЗОВАТЕЛЕЙ

// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Настройка    - Строка - вид настройки, значение по умолчанию которой необходимо получить
//  Пользователь - СправочникСсылка.Пользователи - пользователь программы, настройка которого
//				   запрашивается, если параметр не передается настройка возвращается для текущего пользователя
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеПоУмолчанию(Настройка, Пользователь = Неопределено) Экспорт

	НастройкаВРег = ВРег(Настройка);
	НастройкаТипаСсылка = Ложь;

	Если НастройкаВРег = ВРег("ОсновнаяОрганизация") Тогда
		Возврат Справочники.Организации.ОрганизацияПоУмолчанию(Пользователь);
	ИначеЕсли НастройкаВРег = ВРег("ОсновноеПодразделениеОрганизации") Тогда
		ПустоеЗначение = ПустоеПодразделение();
		ИмяОбъекта = "Справочник.ПодразделенияОрганизаций";
		НастройкаТипаСсылка = Истина;
	ИначеЕсли НастройкаВРег = ВРег("ОсновноеОбособленноеПодразделениеОрганизации") Тогда
		ПустоеЗначение = ПустоеОбособленноеПодразделение();
		ИмяОбъекта = "Справочник.ОбособленныеПодразделенияОрганизаций";
		НастройкаТипаСсылка = Истина;
	ИначеЕсли НастройкаВРег = ВРег("ОсновнойСклад") Тогда
		Возврат Справочники.Склады.ПолучитьСкладПоУмолчанию(Пользователь);
	ИначеЕсли НастройкаВРег = ВРег("ОсновноеМестоСоставленияДокумента") Тогда
		ПустоеЗначение = "";
		НастройкаТипаСсылка = Ложь;
	ИначеЕсли НастройкаВРег = ВРег("ОсновнойПредставительОрганизации") Тогда
		ПустоеЗначение = Справочники.ФизическиеЛица.ПустаяСсылка();
		ИмяОбъекта = "Справочник.ФизическиеЛица";
		НастройкаТипаСсылка = Истина;
	ИначеЕсли НастройкаВРег = ВРег("КтоВыписалНалоговуюНакладную") Тогда
		ПустоеЗначение = Справочники.ФизическиеЛица.ПустаяСсылка();
		ИмяОбъекта = "Справочник.ФизическиеЛица";
		НастройкаТипаСсылка = Истина;
	ИначеЕсли НастройкаВРег = ВРег("НоменклатураДляЗаполненияНалоговыхНакладных") Тогда
		ПустоеЗначение = Справочники.Номенклатура.ПустаяСсылка();
		ИмяОбъекта = "Справочник.Номенклатура";
		НастройкаТипаСсылка = Истина;
	ИначеЕсли НастройкаВРег = ВРег("РабочаяДата") Тогда
		ПустоеЗначение = '0001-01-01';
	ИначеЕсли НастройкаВРег = ВРег("ВариантРабочегоСтола") Тогда
		ПустоеЗначение = "ЗадачиБухгалтера";
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить(НастройкаВРег,,, Пользователь);

	Если ТипЗнч(ЗначениеНастройки) = ТипЗнч(ПустоеЗначение) Тогда
		Если НастройкаТипаСсылка Тогда
			Если НЕ ОбщегоНазначения.СсылкаСуществует(ЗначениеНастройки) Тогда
				ЗначениеНастройки = ПустоеЗначение;
			Иначе
				Запроc = Новый Запрос;
				Запроc.УстановитьПараметр("Ссылка", ЗначениеНастройки);
				Запроc.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	ЗначенияОбъекта.Ссылка
				|ИЗ
				|	" + ИмяОбъекта + " КАК ЗначенияОбъекта
				|ГДЕ
				|	ЗначенияОбъекта.Ссылка = &Ссылка";
				Результат = Запроc.Выполнить();
				Если Результат.Пустой() Тогда
					ЗначениеНастройки = ПустоеЗначение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗначениеНастройки = ПустоеЗначение;
	КонецЕсли;
	
	Возврат ?(ЗначениеНастройки = Неопределено, ПустоеЗначение, ЗначениеНастройки);
	
КонецФункции // ПолучитьЗначениеПоУмолчанию()

///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ИНФОРМАЦИИ О ЦЕНАХ НОМЕНКЛАТУРЫ И СЕБЕСТОИМОСТИ СПИСАНИЯ

//Функция возвращает соотвествие Номенклатура - Цена (в гривнах)
//в функцию передаются параметры цены - Тип (вид) цен, период (дата), валюта, курс и кратность
//номенклатура передается как массив
//
//Полученное значение используется для оперделения учетных цен (не цен продажи)
//
Функция ПодготовитьСоответствиеНоменклатураЦена(СтруктураПараметров) Экспорт
	
	Период       = СтруктураПараметров.Период;
	ТипЦен       = СтруктураПараметров.ТипЦен;
	Валюта       = СтруктураПараметров.Валюта;
	Курс         = СтруктураПараметров.Курс;
	Кратность    = СтруктураПараметров.Кратность;
	Номенклатура = СтруктураПараметров.Номенклатура;

	СоответствиеНоменклатураЦена = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ТипЦен", ТипЦен);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Период,
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, ) КАК КурсыВалютСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЦеныНоменклатуры.Номенклатура,
	|	ЦеныНоменклатуры.Цена,
	|	ЦеныНоменклатуры.Валюта,
	|	КурсыВалют.Курс,
	|	КурсыВалют.Кратность
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Период,
	|			Номенклатура В (&Номенклатура)
	|				И ТипЦен = &ТипЦен) КАК ЦеныНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|		ПО ЦеныНоменклатуры.Валюта = КурсыВалют.Валюта";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЦенаНоменклатуры = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Выборка.Цена,
			Выборка.Валюта,	Валюта, 
		    Выборка.Курс, Курс, 
		    Выборка.Кратность, Кратность);

		СоответствиеНоменклатураЦена.Вставить(Выборка.Номенклатура, ЦенаНоменклатуры);
		
	КонецЦикла;

	Возврат СоответствиеНоменклатураЦена;

КонецФункции // ПодготовитьСоответствиеНоменклатураЦена()

// Получает сумму списания активов для заполнения печатных форм документов
Функция ПолучитьСуммуСписанияАктивов(МассивРегистраторов, ДатаНач, ДатаКон, БланкиСтрогойОтчетности = Ложь) Экспорт	
	
	ПроводкиДокумента = Новый ТаблицаЗначений;
	ПроводкиДокумента.Колонки.Добавить("Регистратор");
	ПроводкиДокумента.Колонки.Добавить("Номенклатура");
	ПроводкиДокумента.Колонки.Добавить("Количество");
	ПроводкиДокумента.Колонки.Добавить("Сумма");
	
	ТаблицаСуммСписания = Новый ТаблицаЗначений;
	ТаблицаСуммСписания.Колонки.Добавить("Регистратор", 	Документы.ТипВсеСсылки());
	ТаблицаСуммСписания.Колонки.Добавить("Номенклатура", 	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаСуммСписания.Колонки.Добавить("Количество", 		ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 3));
	ТаблицаСуммСписания.Колонки.Добавить("Сумма", 			ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	
	Если БланкиСтрогойОтчетности Тогда
		// при списании бланков строгой отчетности происходит одновременное списание по балансовым и небалансовым счетам
		// нас интересует стоимость списания только по балансовым счетам
		УсловиеСчетКт = " НЕ СчетКт.Забалансовый ";
	Иначе
		УсловиеСчетКт = " ИСТИНА ";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Регистратор,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
	|	СУММА(ХозрасчетныйДвиженияССубконто.КоличествоКт) КАК КоличествоКт,
	|	СУММА(ХозрасчетныйДвиженияССубконто.Сумма) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(&ДатаНач, &ДатаКон, Регистратор В (&МассивРегистраторов) И " + УсловиеСчетКт + " ) КАК ХозрасчетныйДвиженияССубконто
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйДвиженияССубконто.Регистратор,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт3
	|";
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("МассивРегистраторов", МассивРегистраторов);
	
	ПроводкиДокумента = Запрос.Выполнить().Выгрузить();
	Для Каждого ПроводкаДокумента Из ПроводкиДокумента Цикл
		Если ТипЗнч(ПроводкаДокумента.СубконтоКт1) = Тип("СправочникСсылка.Номенклатура") Тогда
			Строка = ТаблицаСуммСписания.Добавить();
			Строка.Регистратор 	= ПроводкаДокумента.Регистратор;
			Строка.Номенклатура = ПроводкаДокумента.СубконтоКт1;
			Строка.Количество   = ПроводкаДокумента.КоличествоКт;
			Строка.Сумма        = ПроводкаДокумента.Сумма;
		КонецЕсли;
		Если ТипЗнч(ПроводкаДокумента.СубконтоКт2) = Тип("СправочникСсылка.Номенклатура") Тогда
			Строка = ТаблицаСуммСписания.Добавить();
			Строка.Регистратор 	= ПроводкаДокумента.Регистратор;
			Строка.Номенклатура = ПроводкаДокумента.СубконтоКт2;
			Строка.Количество   = ПроводкаДокумента.КоличествоКт;
			Строка.Сумма        = ПроводкаДокумента.Сумма;
		КонецЕсли;
		Если ТипЗнч(ПроводкаДокумента.СубконтоКт3) = Тип("СправочникСсылка.Номенклатура") Тогда
			Строка = ТаблицаСуммСписания.Добавить();
			Строка.Регистратор 	= ПроводкаДокумента.Регистратор;
			Строка.Номенклатура = ПроводкаДокумента.СубконтоКт3;
			Строка.Количество   = ПроводкаДокумента.КоличествоКт;
			Строка.Сумма        = ПроводкаДокумента.Сумма;
		КонецЕсли;
	КонецЦикла;
	ТаблицаСуммСписания.Свернуть("Регистратор, Номенклатура","Количество,Сумма");
	
	ТаблицаСуммСписания.Индексы.Добавить("Регистратор, Номенклатура");
	ТаблицаСуммСписания.Индексы.Добавить("Номенклатура");
	
  	Возврат  ТаблицаСуммСписания;
  
КонецФункции // ПолучитьСуммуСписанияАктивов()


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ СЧЕТОВ УЧЕТА ПО УМОЛЧАНИЮ

// Функция возвращает возможные счета учета расчетов с контрагентом
//
// Параметры:
//  Организация - по которой выполняется поиск
//  Контрагент  - по которому выполняется поиск
//  Договор     - по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаРасчетовСКонтрагентом(Знач Организация, Знач Контрагент, Знач Договор) Экспорт

	Результат = Новый Структура(" 
								|СчетРасчетов, СчетАвансов,
								|СчетРасчетовПокупателя, СчетАвансовПокупателя,
								|СчетУчетаТары, СчетУчетаТарыПокупателя,
								|СчетАвансовПоТаре, СчетАвансовПоТареПокупателя,
								|СчетРасчетовПриБартере, СчетАвансовПриБартере,
								|СчетРасчетовПокупателяПриБартере, СчетАвансовПокупателяПриБартере,
								|СчетУчетаНДСПриобретений,СчетУчетаНДСПриобретенийПодтвержденный,
								|СчетУчетаНДСПродаж,СчетУчетаНДСПродажПодтвержденный,
								|НалоговоеНазначениеПриобретений,НалоговоеНазначениеПриобретенийПоТаре,
								|НалоговоеНазначениеПродаж, НалоговоеНазначениеПродажПоТаре,
								|СтавкаНДСПриобретений,СтавкаНДСПродаж,
								|Организация, Контрагент, Договор, ВидРасчетовПоДоговору, Амортизируется");

	Если ТипЗнч(Договор) = Тип("ПеречислениеСсылка.ВидыРасчетовПоДоговорам") Тогда
		ВидРасчетовПоДоговору = Договор;
		Договор = ПолучитьПустоеЗначениеДоговора();
	Иначе							
		ВидРасчетовПоДоговору = ОпределениеВидаРасчетовПоПараметрамДоговора(Договор);
	КонецЕсли;

	СписокГруппКонтрагентов = ОбщегоНазначенияБПВызовСервера.ПолучитьСписокВышеСтоящихГрупп(Контрагент);
	
	СписокГруппДоговоров = ОбщегоНазначенияБПВызовСервера.ПолучитьСписокВышеСтоящихГрупп(Договор);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("Контрагент",        Контрагент);
	Запрос.УстановитьПараметр("Договор",           Договор);
	Запрос.УстановитьПараметр("ВидРасчетов",       ВидРасчетовПоДоговору);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойДоговор",     ПолучитьПустоеЗначениеДоговора());
	Запрос.УстановитьПараметр("ПустойВидРасчетов", Перечисления.ВидыРасчетовПоДоговорам.ПустаяСсылка());
	
	Индекс = 1;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	" + Индекс + " КАК Приоритет,
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаАвансовПоТареВыданных,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаАвансовПоТареПолученных,
	|	СчетУчетаРасчетовСПоставщикомПриБартере,
	|	СчетУчетаРасчетовСПокупателемПриБартере,
	|	СчетУчетаНДСПриобретений,
	|	СчетУчетаНДСПриобретенийПодтвержденный,
	|	СчетУчетаНДСПродаж,
	|	СчетУчетаНДСПродажПодтвержденный,
	|	НалоговоеНазначениеПриобретений,
	|	НалоговоеНазначениеПриобретенийПоТаре,
	|	НалоговоеНазначениеПродаж,
	|   НалоговоеНазначениеПродажПоТаре,
	|	СтавкаНДСПриобретений,
	|	СтавкаНДСПродаж,
	|	Организация,
	|	Контрагент,
	|	Договор,
	|	Амортизируется,
	|  	ВидРасчетовПоДоговору
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	
	|	Организация = &Организация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &Договор И НЕ &Договор = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс, ГруппаДоговоров);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаАвансовПоТареВыданных,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаАвансовПоТареПолученных,
		|	СчетУчетаРасчетовСПоставщикомПриБартере,
		|	СчетУчетаРасчетовСПокупателемПриБартере,
		|	СчетУчетаНДСПриобретений,
		|	СчетУчетаНДСПриобретенийПодтвержденный,
		|	СчетУчетаНДСПродаж,
		|	СчетУчетаНДСПродажПодтвержденный,
		|	НалоговоеНазначениеПриобретений,
		|	НалоговоеНазначениеПриобретенийПоТаре,
		|	НалоговоеНазначениеПродаж,
		|   НалоговоеНазначениеПродажПоТаре,
		|	СтавкаНДСПриобретений,
		|	СтавкаНДСПродаж,
		|	Организация,
		|	Контрагент,
		|	Договор,
		|	Амортизируется,
		|  	ВидРасчетовПоДоговору
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &Организация И
		|	Контрагент            = &Контрагент И
		|	Договор               = &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаАвансовПоТареВыданных,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаАвансовПоТареПолученных,
	|	СчетУчетаРасчетовСПоставщикомПриБартере,
	|	СчетУчетаРасчетовСПокупателемПриБартере,
	|	СчетУчетаНДСПриобретений,
	|	СчетУчетаНДСПриобретенийПодтвержденный,
	|	СчетУчетаНДСПродаж,
	|	СчетУчетаНДСПродажПодтвержденный,
	|	НалоговоеНазначениеПриобретений,
	|	НалоговоеНазначениеПриобретенийПоТаре,
	|	НалоговоеНазначениеПродаж,
	|   НалоговоеНазначениеПродажПоТаре,
	|	СтавкаНДСПриобретений,
	|	СтавкаНДСПродаж,
	|	Организация,
	|	Контрагент,
	|	Договор,
	|	Амортизируется,
	|  	ВидРасчетовПоДоговору
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация = &Организация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, ГруппаКонтрагентов);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаАвансовПоТареВыданных,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаАвансовПоТареПолученных,
		|	СчетУчетаРасчетовСПоставщикомПриБартере,
		|	СчетУчетаРасчетовСПокупателемПриБартере,
		|	СчетУчетаНДСПриобретений,
		|	СчетУчетаНДСПриобретенийПодтвержденный,
		|	СчетУчетаНДСПродаж,
		|	СчетУчетаНДСПродажПодтвержденный,
		|	НалоговоеНазначениеПриобретений,
		|	НалоговоеНазначениеПриобретенийПоТаре,
		|	НалоговоеНазначениеПродаж,
		|   НалоговоеНазначениеПродажПоТаре,
		|	СтавкаНДСПриобретений,
		|	СтавкаНДСПродаж,
		|	Организация,
		|	Контрагент,
		|	Договор,
		|	Амортизируется,
		|  	ВидРасчетовПоДоговору
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &Организация И
		|	Контрагент            = &ГруппаКонтрагентов" + Индекс + " И
		|	Договор               = &ПустойДоговор
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаАвансовПоТареВыданных,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаАвансовПоТареПолученных,
	|	СчетУчетаРасчетовСПоставщикомПриБартере,
	|	СчетУчетаРасчетовСПокупателемПриБартере,
	|	СчетУчетаНДСПриобретений,
	|	СчетУчетаНДСПриобретенийПодтвержденный,
	|	СчетУчетаНДСПродаж,
	|	СчетУчетаНДСПродажПодтвержденный,
	|	НалоговоеНазначениеПриобретений,
	|	НалоговоеНазначениеПриобретенийПоТаре,
	|	НалоговоеНазначениеПродаж,
	|   НалоговоеНазначениеПродажПоТаре,
	|	СтавкаНДСПриобретений,
	|	СтавкаНДСПродаж,
	|	Организация,
	|	Контрагент,
	|	Договор,
	|	Амортизируется,
	|  	ВидРасчетовПоДоговору
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация           = &Организация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс, ГруппаДоговоров);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаАвансовПоТареВыданных,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаАвансовПоТареПолученных,
		|	СчетУчетаРасчетовСПоставщикомПриБартере,
		|	СчетУчетаРасчетовСПокупателемПриБартере,
		|	СчетУчетаНДСПриобретений,
		|	СчетУчетаНДСПриобретенийПодтвержденный,
		|	СчетУчетаНДСПродаж,
		|	СчетУчетаНДСПродажПодтвержденный,
		|	НалоговоеНазначениеПриобретений,
		|	НалоговоеНазначениеПриобретенийПоТаре,
		|	НалоговоеНазначениеПродаж,
		|   НалоговоеНазначениеПродажПоТаре,
		|	СтавкаНДСПриобретений,
		|	СтавкаНДСПродаж,
		|	Организация,
		|	Контрагент,
		|	Договор,
		|	Амортизируется,
		|  	ВидРасчетовПоДоговору
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &ПустаяОрганизация И
		|	Контрагент            = &Контрагент И
		|	Договор               = &ГруппаДоговоров" + Индекс + "
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаАвансовПоТареВыданных,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаАвансовПоТареПолученных,
	|	СчетУчетаРасчетовСПоставщикомПриБартере,
	|	СчетУчетаРасчетовСПокупателемПриБартере,
	|	СчетУчетаНДСПриобретений,
	|	СчетУчетаНДСПриобретенийПодтвержденный,
	|	СчетУчетаНДСПродаж,
	|	СчетУчетаНДСПродажПодтвержденный,
	|	НалоговоеНазначениеПриобретений,
	|	НалоговоеНазначениеПриобретенийПоТаре,
	|	НалоговоеНазначениеПродаж,
	|   НалоговоеНазначениеПродажПоТаре,
	|	СтавкаНДСПриобретений,
	|	СтавкаНДСПродаж,
	|	Организация,
	|	Контрагент,
	|	Договор,
	|	Амортизируется,
	|  	ВидРасчетовПоДоговору
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация = &ПустаяОрганизация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, ГруппаКонтрагентов);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Индекс + ",
		|	СчетУчетаРасчетовСПоставщиком,
		|	СчетУчетаАвансовВыданных,
		|	СчетУчетаРасчетовСПокупателем,
		|	СчетУчетаАвансовПолученных,
		|	СчетУчетаРасчетовПоТареСПоставщиком,
		|	СчетУчетаАвансовПоТареВыданных,
		|	СчетУчетаРасчетовПоТареСПокупателем,
		|	СчетУчетаАвансовПоТареПолученных,
		|	СчетУчетаРасчетовСПоставщикомПриБартере,
		|	СчетУчетаРасчетовСПокупателемПриБартере,
		|	СчетУчетаНДСПриобретений,
		|	СчетУчетаНДСПриобретенийПодтвержденный,
		|	СчетУчетаНДСПродаж,
		|	СчетУчетаНДСПродажПодтвержденный,
		|	НалоговоеНазначениеПриобретений,
		|	НалоговоеНазначениеПриобретенийПоТаре,
		|	НалоговоеНазначениеПродаж,
		|   НалоговоеНазначениеПродажПоТаре,
		|	СтавкаНДСПриобретений,
		|	СтавкаНДСПродаж,
		|	Организация,
		|	Контрагент,
		|	Договор,
		|	Амортизируется,
		|  	ВидРасчетовПоДоговору
		|
		|ИЗ
		|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
		|
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &ПустаяОрганизация И
		|	Контрагент            = &ГруппаКонтрагентов" + Индекс + " И
		|	Договор               = &ПустойДоговор
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаАвансовПоТареВыданных,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаАвансовПоТареПолученных,
	|	СчетУчетаРасчетовСПоставщикомПриБартере,
	|	СчетУчетаРасчетовСПокупателемПриБартере,
	|	СчетУчетаНДСПриобретений,
	|	СчетУчетаНДСПриобретенийПодтвержденный,
	|	СчетУчетаНДСПродаж,
	|	СчетУчетаНДСПродажПодтвержденный,
	|	НалоговоеНазначениеПриобретений,
	|	НалоговоеНазначениеПриобретенийПоТаре,
	|	НалоговоеНазначениеПродаж,
	|   НалоговоеНазначениеПродажПоТаре,
	|	СтавкаНДСПриобретений,
	|	СтавкаНДСПродаж,
	|	Организация,
	|	Контрагент,
	|	Договор,
	|	Амортизируется,
	|  	ВидРасчетовПоДоговору
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ПустойВидРасчетов И
	|	Организация           = &Организация И
	|	Контрагент            = &Контрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаАвансовПоТареВыданных,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаАвансовПоТареПолученных,
	|	СчетУчетаРасчетовСПоставщикомПриБартере,
	|	СчетУчетаРасчетовСПокупателемПриБартере,
	|	СчетУчетаНДСПриобретений,
	|	СчетУчетаНДСПриобретенийПодтвержденный,
	|	СчетУчетаНДСПродаж,
	|	СчетУчетаНДСПродажПодтвержденный,
	|	НалоговоеНазначениеПриобретений,
	|	НалоговоеНазначениеПриобретенийПоТаре,
	|	НалоговоеНазначениеПродаж,
	|   НалоговоеНазначениеПродажПоТаре,
	|	СтавкаНДСПриобретений,
	|	СтавкаНДСПродаж,
	|	Организация,
	|	Контрагент,
	|	Договор,
	|	Амортизируется,
	|  	ВидРасчетовПоДоговору
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ПустойВидРасчетов И
	|	Организация           = &Организация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаАвансовПоТареВыданных,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаАвансовПоТареПолученных,
	|	СчетУчетаРасчетовСПоставщикомПриБартере,
	|	СчетУчетаРасчетовСПокупателемПриБартере,
	|	СчетУчетаНДСПриобретений,
	|	СчетУчетаНДСПриобретенийПодтвержденный,
	|	СчетУчетаНДСПродаж,
	|	СчетУчетаНДСПродажПодтвержденный,
	|	НалоговоеНазначениеПриобретений,
	|	НалоговоеНазначениеПриобретенийПоТаре,
	|	НалоговоеНазначениеПродаж,
	|   НалоговоеНазначениеПродажПоТаре,
	|	СтавкаНДСПриобретений,
	|	СтавкаНДСПродаж,
	|	Организация,
	|	Контрагент,
	|	Договор,
	|	Амортизируется,
	|  	ВидРасчетовПоДоговору
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация           = &ПустаяОрганизация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Индекс + ",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаАвансовПоТареВыданных,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаАвансовПоТареПолученных,
	|	СчетУчетаРасчетовСПоставщикомПриБартере,
	|	СчетУчетаРасчетовСПокупателемПриБартере,
	|	СчетУчетаНДСПриобретений,
	|	СчетУчетаНДСПриобретенийПодтвержденный,
	|	СчетУчетаНДСПродаж,
	|	СчетУчетаНДСПродажПодтвержденный,
	|	НалоговоеНазначениеПриобретений,
	|	НалоговоеНазначениеПриобретенийПоТаре,
	|	НалоговоеНазначениеПродаж,
	|   НалоговоеНазначениеПродажПоТаре,
	|	СтавкаНДСПриобретений,
	|	СтавкаНДСПродаж,
	|	Организация,
	|	Контрагент,
	|	Договор,
	|	Амортизируется,
	|  	ВидРасчетовПоДоговору
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ПустойВидРасчетов И
	|	Организация           = &ПустаяОрганизация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		Результат.СчетРасчетов                     = Выборка.СчетУчетаРасчетовСПоставщиком;
		Результат.СчетАвансов                      = Выборка.СчетУчетаАвансовВыданных;
		Результат.СчетРасчетовПокупателя           = Выборка.СчетУчетаРасчетовСПокупателем;
		Результат.СчетАвансовПокупателя            = Выборка.СчетУчетаАвансовПолученных;
		
		Результат.СчетУчетаТары                    = Выборка.СчетУчетаРасчетовПоТареСПоставщиком;
		Результат.СчетАвансовПоТаре                = Выборка.СчетУчетаАвансовПоТареВыданных;
		Результат.СчетУчетаТарыПокупателя          = Выборка.СчетУчетаРасчетовПоТареСПокупателем;
		Результат.СчетАвансовПоТареПокупателя      = Выборка.СчетУчетаАвансовПоТареПолученных;
		
		Результат.СчетРасчетовПриБартере           = Выборка.СчетУчетаРасчетовСПоставщикомПриБартере;
		Результат.СчетАвансовПриБартере            = Выборка.СчетУчетаРасчетовСПокупателемПриБартере;
		Результат.СчетРасчетовПокупателяПриБартере = Выборка.СчетУчетаРасчетовСПокупателемПриБартере;
		Результат.СчетАвансовПокупателяПриБартере  = Выборка.СчетУчетаРасчетовСПоставщикомПриБартере;
		
		Результат.СчетУчетаНДСПриобретений            		= Выборка.СчетУчетаНДСПриобретений;
		Результат.СчетУчетаНДСПриобретенийПодтвержденный 	= Выборка.СчетУчетаНДСПриобретенийПодтвержденный;
		Результат.СчетУчетаНДСПродаж             			= Выборка.СчетУчетаНДСПродаж;
		Результат.СчетУчетаНДСПродажПодтвержденный          = Выборка.СчетУчетаНДСПродажПодтвержденный;
		
		Результат.НалоговоеНазначениеПриобретений    		= Выборка.НалоговоеНазначениеПриобретений;
		Результат.НалоговоеНазначениеПриобретенийПоТаре     = Выборка.НалоговоеНазначениеПриобретенийПоТаре;
		Результат.НалоговоеНазначениеПродаж    			    = Выборка.НалоговоеНазначениеПродаж;
		Результат.НалоговоеНазначениеПродажПоТаре           = Выборка.НалоговоеНазначениеПродажПоТаре;
		
		Результат.СтавкаНДСПриобретений	                = Выборка.СтавкаНДСПриобретений;
		Результат.СтавкаНДСПродаж            			= Выборка.СтавкаНДСПродаж;
		
		Результат.Амортизируется            			= Выборка.Амортизируется;
		
		Результат.Организация						= Выборка.Организация;
		Результат.Контрагент            			= Выборка.Контрагент;
		Результат.Договор            				= Выборка.Договор;
		Результат.ВидРасчетовПоДоговору            	= Выборка.ВидРасчетовПоДоговору;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()


// Функция возвращает счета учета номенклатуры по выбранной организации.
//
// Параметры:
//  Организация  - организация, по которой определяются счета учета
//  Склад        - место хранения, по которому определяются счета учета
//  Номенклатура - номенклатура, по которой определяются счета учета
//  Дата         - дата, на которую определяются счета учета
//  ОсобыйПорядокНалогообложения - признак того, что необходимо получить счета для особого порядка налогообложения
//
// Возвращаемое значение:
//  Структура - структура счетов учета номенклатуры
// 
Функция ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура, Склад = Неопределено, Дата = Неопределено, ОсобыйПорядокНалогообложения = Ложь) Экспорт

	Если ТипЗнч(Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокНоменклатуры	= Новый Массив;
	СписокНоменклатуры.Добавить(Номенклатура);
	
	СведенияОНоменклатуре = ПолучитьСчетаУчетаСпискаНоменклатуры(
		Организация, СписокНоменклатуры, Склад, Дата).Получить(Номенклатура);
	
	Возврат СведенияОНоменклатуре;

КонецФункции

// Функция возвращает счета учета номенклатуры по выбранной организации.
//
// Параметры:
//  Организация  - организация, по которой определяются счета учета
//  Склад        - место хранения, по которому определяются счета учета
//  Номенклатура - номенклатура, по которой определяются счета учета
//  Дата         - дата, на которую определяются счета учета
//  ОсобыйПорядокНалогообложения - признак того, что необходимо получить счета для особого порядка налогообложения
//
// Возвращает соответствие:
//  Ключ     - номенклатура
//  Значение - структура счетов учета номенклатуры
//
Функция ПолучитьСчетаУчетаСпискаНоменклатуры(Организация, СписокНоменклатуры, Склад = Неопределено, Знач Дата = Неопределено) Экспорт

	Результат	= Новый Соответствие;
	Если СписокНоменклатуры.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПустойСчет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	
	Для Каждого Номенклатура Из СписокНоменклатуры Цикл
		Если Номенклатура = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураВозврата = Новый Структура();
		СтруктураВозврата.Вставить("СчетУчетаБУ",					ПустойСчет);
		СтруктураВозврата.Вставить("СчетУчетаБУЯвляетсяЗабалансовым", Ложь);
		СтруктураВозврата.Вставить("СчетУчетаДавСырья",				ПустойСчет);
		СтруктураВозврата.Вставить("СчетПередачиБУ",				ПустойСчет);
		СтруктураВозврата.Вставить("СчетПередачиЗабБУ",				ПустойСчет);
		СтруктураВозврата.Вставить("СубконтоБУ1",						Неопределено);
		СтруктураВозврата.Вставить("СубконтоБУ2",						Неопределено);
		СтруктураВозврата.Вставить("СубконтоБУ3",						Неопределено);
		СтруктураВозврата.Вставить("СчетУчетаДоп",					ПустойСчет);
		СтруктураВозврата.Вставить("СхемаРеализации",				Справочники.СхемыРеализации.ПустаяСсылка());
		СтруктураВозврата.Вставить("НалоговоеНазначение",				Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка());
		СтруктураВозврата.Вставить("НалоговоеНазначениеДоходовИЗатрат",	Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка());
		СтруктураВозврата.Вставить("Номенклатура",						Неопределено);
		СтруктураВозврата.Вставить("Организация",						Неопределено);
		СтруктураВозврата.Вставить("Склад",								Неопределено);
		СтруктураВозврата.Вставить("ТипСклада",							Неопределено);

		
		Результат.Вставить(Номенклатура, СтруктураВозврата);
	КонецЦикла;

	МассивОрганизаций = Новый Массив();
	МассивОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
	МассивОрганизаций.Добавить(Организация);
	
	МассивСкладов = Новый Массив();
	МассивСкладов.Добавить(Справочники.Склады.ПустаяСсылка());
	
	МассивТиповСкладов = Новый Массив();
	МассивТиповСкладов.Добавить(Перечисления.ТипыСкладов.ПустаяСсылка());
	
	// ИНАГРО++
	Если ТипЗнч(Склад) = Тип("СправочникСсылка.Склады") Тогда
		Если ЗначениеЗаполнено(Склад) Тогда
			МассивСкладов.Добавить(Склад);
			МассивТиповСкладов.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипСклада"));
		КонецЕсли;
	КонецЕсли;
	// ИНАГРО--
	
	СоответствиеЭлементовИГрупп = ОбщегоНазначенияБПВызовСервера.ПолучитьСписокВышеСтоящихГруппЭлементов(СписокНоменклатуры);
	
	ТаблицаИерархии = Новый ТаблицаЗначений;
	ТаблицаИерархии.Колонки.Добавить("Элемент",		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаИерархии.Колонки.Добавить("Родитель",	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаИерархии.Колонки.Добавить("Уровень",		ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(10, 0));
	
	Для каждого Номенклатура Из СписокНоменклатуры Цикл
		
		НоваяСтрока = ТаблицаИерархии.Добавить();
		НоваяСтрока.Элемент		= Номенклатура;
		НоваяСтрока.Родитель	= Номенклатура;
		
		СписокГрупп = СоответствиеЭлементовИГрупп.Получить(Номенклатура);
		Если СписокГрупп = Неопределено Тогда
			НоваяСтрока.Уровень = 1;
			Продолжить;
		КонецЕсли;
		
		КоличествоВышеСтоящихГрупп = СписокГрупп.Количество();
		
		НоваяСтрока.Уровень = КоличествоВышеСтоящихГрупп + 1;
		
		Для Индекс = 1 По КоличествоВышеСтоящихГрупп Цикл
			НоваяСтрока = ТаблицаИерархии.Добавить();
			НоваяСтрока.Элемент	= Номенклатура;
			НоваяСтрока.Родитель= СписокГрупп[Индекс - 1];
			НоваяСтрока.Уровень	= КоличествоВышеСтоящихГрупп - Индекс + 1;
		КонецЦикла;
		
	КонецЦикла;
	
	НоваяСтрока = ТаблицаИерархии.Добавить();	// Корень
	
	МассивНоменклатуры = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаИерархии, "Родитель", Истина);
	
	Дата = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());

	ПлательщикНДСПриостановлен = УчетнаяПолитика.ПлательщикНДСПриостановлен(Организация, Дата);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаИерархии",	ТаблицаИерархии);
	Запрос.УстановитьПараметр("МассивОрганизаций",	МассивОрганизаций);
	Запрос.УстановитьПараметр("МассивНоменклатуры",	ОбщегоНазначенияБПВызовСервера.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры));
	Запрос.УстановитьПараметр("МассивСкладов",		МассивСкладов);
	Запрос.УстановитьПараметр("МассивТиповСкладов",	МассивТиповСкладов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИерархии.Элемент КАК Элемент,
	|	ТаблицаИерархии.Родитель КАК Родитель,
	|	ТаблицаИерархии.Уровень КАК Уровень
	|ПОМЕСТИТЬ ВТТаблицаИерархии
	|ИЗ
	|	&ТаблицаИерархии КАК ТаблицаИерархии
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИерархии.Элемент КАК Номенклатура,
	|	ТаблицаИерархии.Родитель КАК Родитель,
	|	ТаблицаИерархии.Уровень КАК Уровень,
	|	СчетаУчетаНоменклатуры.Номенклатура КАК СчетаУчетаНоменклатурыНоменклатура,
	|	СчетаУчетаНоменклатуры.Организация КАК Организация,
	|	СчетаУчетаНоменклатуры.Склад КАК Склад,
	|	СчетаУчетаНоменклатуры.ТипСклада КАК ТипСклада,
	|	СчетаУчетаНоменклатуры.СчетУчетаБУ КАК СчетУчетаБУ,
	|	ЕСТЬNULL(СчетаУчетаНоменклатуры.СчетУчетаБУ.Забалансовый, ЛОЖЬ) КАК СчетУчетаБУЯвляетсяЗабалансовым,
	|	СчетаУчетаНоменклатуры.СчетУчетаЗабалансовыйБУ КАК СчетУчетаДавСырья,
	|	СчетаУчетаНоменклатуры.СчетУчетаЗабалансовыйБУ КАК СчетУчетаДоп,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачиБУ КАК СчетПередачиБУ,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачиЗабалансовыйБУ КАК СчетПередачиЗабБУ,
	|	СчетаУчетаНоменклатуры.СубконтоБУ1 КАК СубконтоБУ1,
	|	СчетаУчетаНоменклатуры.СубконтоБУ2 КАК СубконтоБУ2,
	|	СчетаУчетаНоменклатуры.СубконтоБУ3 КАК СубконтоБУ3,
	|	СчетаУчетаНоменклатуры.СхемаРеализации КАК СхемаРеализации,
	|	СчетаУчетаНоменклатуры.НалоговоеНазначение КАК НалоговоеНазначение,
	|	СчетаУчетаНоменклатуры.НалоговоеНазначениеДоходовИЗатрат КАК НалоговоеНазначениеДоходовИЗатрат
	|ИЗ
	|	ВТТаблицаИерархии КАК ТаблицаИерархии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
	|		ПО ТаблицаИерархии.Родитель = СчетаУчетаНоменклатуры.Номенклатура
	|ГДЕ
	|	СчетаУчетаНоменклатуры.Организация В(&МассивОрганизаций)
	|	И СчетаУчетаНоменклатуры.Номенклатура В(&МассивНоменклатуры)
	|	И СчетаУчетаНоменклатуры.Склад В(&МассивСкладов)
	|	И СчетаУчетаНоменклатуры.ТипСклада В(&МассивТиповСкладов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Уровень УБЫВ,
	|	Склад УБЫВ,
	|	ТипСклада УБЫВ,
	|	Организация УБЫВ";
	
	ТаблицаСчетовУчета = Запрос.Выполнить().Выгрузить();
	ТаблицаСчетовУчета.Индексы.Добавить("Номенклатура");
	
	ОтборСчетовУчета = Новый Структура("Номенклатура");
	
	ПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	
	Для Каждого Номенклатура Из СписокНоменклатуры Цикл
		
		СтруктураВозврата = Результат.Получить(Номенклатура);
		
		ОтборСчетовУчета.Номенклатура = Номенклатура;
		
		НайденныеСтроки = ТаблицаСчетовУчета.НайтиСтроки(ОтборСчетовУчета);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураВозврата, НайденныеСтроки[0]);
			СтруктураВозврата.Номенклатура = НайденныеСтроки[0].СчетаУчетаНоменклатурыНоменклатура;
		Иначе
			
			ОтборСчетовУчета.Номенклатура = ПустаяНоменклатура;
			
			НайденныеСтроки = ТаблицаСчетовУчета.НайтиСтроки(ОтборСчетовУчета);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтруктураВозврата, НайденныеСтроки[0]);
				СтруктураВозврата.Номенклатура = НайденныеСтроки[0].СчетаУчетаНоменклатурыНоменклатура;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПлательщикНДСПриостановлен Тогда
			СтруктураВозврата.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность; 
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Функция возвращает счета учета по выбранному объекту строительства.
//
// Параметры:
//  Организация - организация, по которой выполняется поиск
//  Объект      - объект строительства, по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура, содержащая счета учета объекта строительства
// 
Функция СчетаУчетаОбъектовСтроительства(Организация, Объект) Экспорт

	ПустойСчет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	Результат = Новый Структура("СчетУчета, СчетУчетаНДС", ПустойСчет, ПустойСчет);

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("ПустойОбъект",      Справочники.ОбъектыСтроительства.ПустаяСсылка());
	Запрос.УстановитьПараметр("Объект",            Объект);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетБухгалтерскогоУчета КАК СчетУчета,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &Организация И
	|	ОбъектСтроительства = &Объект
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	СчетБухгалтерскогоУчета КАК СчетУчета,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &Организация И
	|	ОбъектСтроительства = &ПустойОбъект
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	СчетБухгалтерскогоУчета КАК СчетУчета,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &ПустаяОрганизация И
	|	ОбъектСтроительства = &Объект
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	СчетБухгалтерскогоУчета КАК СчетУчета,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &ПустаяОрганизация И
	|	ОбъектСтроительства = &ПустойОбъект";
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		Результат.СчетУчета  = Выборка.СчетУчета;
		Результат.СчетУчетаНДС = Выборка.СчетУчетаНДС;

	КонецЕсли;

	Возврат Результат;

КонецФункции // СчетаУчетаОбъектовСтроительства()

// Функция возвращает массив счетов, которые необходимо регламентно переоценивать.
// 
Функция СчетаПодлежащиеПереоценке() Экспорт
	
	// Валютные счета, подлежащие переоценке
	// Все балансовые валютные счета
	// Счета, переоцениваемые в особом порядке, исключаются
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный
	|	И (НЕ Хозрасчетный.Забалансовый)
	|	И (НЕ Хозрасчетный.Ссылка В
	|				(ВЫБРАТЬ
	|					СчетаСОсобымПорядкомПереоценки.Счет
	|				ИЗ
	|					РегистрСведений.СчетаСОсобымПорядкомПереоценкиБУ КАК СчетаСОсобымПорядкомПереоценки))";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");

КонецФункции

// Функция возвращает прочий счет учета по выбранной организации.
//
// Параметры:
//  Организация         - организация, по которой определяются счета учета
//  ВидПрочегоСчетаУчета  - вид прочего счета учета
//
// Возвращаемое значение:
//  Структура - структура содержащая информацию о счете учета и значениях субконто 
// 
Функция ПолучитьСчетУчетаПрочий(Организация, ВидПрочегоСчетаУчета) Экспорт

	СтруктураВозврата = Новый Структура("СчетУчетаБУ, Субконто1, Субконто2,Субконто3");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",        	Организация);
	Запрос.УстановитьПараметр("ВидПрочегоСчетаУчета",	ВидПрочегоСчетаУчета);
	Запрос.УстановитьПараметр("ПустаяОрганизация",  Справочники.Организации.ПустаяСсылка());
    Индекс      = 1;
	ТекстЗапроса = "";
	
	//1	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	СчетУчетаБУ,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3
	|ИЗ
	|	РегистрСведений.СчетаУчетаПрочие КАК СчетаУчетаПрочие
	|
	|ГДЕ
	|	Организация  = &Организация И
	|	ВидПрочегоСчетаУчета = &ВидПрочегоСчетаУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	СчетУчетаБУ,
	|	Субконто1,
	|	Субконто2,
	|	Субконто3
	|ИЗ
	|	РегистрСведений.СчетаУчетаПрочие КАК СчетаУчетаПрочие
	|
	|ГДЕ
	|	Организация  = &ПустаяОрганизация И
	|	ВидПрочегоСчетаУчета = &ВидПрочегоСчетаУчета";
	
	Запрос.Текст    = ТекстЗапроса;
	СведенияОСчетах = Запрос.Выполнить().Выбрать();

	Если СведенияОСчетах.Следующий() Тогда
		
        //счета бухгалтерского учета
		СтруктураВозврата.СчетУчетаБУ	= СведенияОСчетах.СчетУчетаБУ;
		СтруктураВозврата.Субконто1		= СведенияОСчетах.Субконто1;
		СтруктураВозврата.Субконто2		= СведенияОСчетах.Субконто2;
		СтруктураВозврата.Субконто3		= СведенияОСчетах.Субконто3;

	КонецЕсли;

	Возврат СтруктураВозврата;

КонецФункции // ПолучитьПрочийСчетУчета()


///////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ АНАЛИТИКИ ПЛАНА СЧЕТОВ


// Проверяет используются ли счета-классы в качестве групп и возвращает признак.
//
Функция ПолучитьИспользоватьКлассыСчетовВКачествеГрупп() Экспорт
	
	ЗапросКлассыСчетов = Новый Запрос;
	ЗапросКлассыСчетов.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	                           |	Хозрасчетный.Ссылка
	                           |ИЗ
	                           |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	                           |ГДЕ
	                           |	Хозрасчетный.Родитель = &Родитель";
	ЗапросКлассыСчетов.УстановитьПараметр("Родитель",ПланыСчетов.Хозрасчетный.НеоборотныеАктивы);
	Возврат ЗапросКлассыСчетов.Выполнить().Выбрать().Количество()>0;
	
КонецФункции

// Процедура устанавливает подчиненность для Двузначных счетов.
// В зависимости от параметра, они либо подчинены Однозначным, либо нет. 
//
// Параметры:
//	ИспользоватьКлассыСчетовВКачествеГрупп - Булево
//
Процедура УстановитьПараметрыКлассовСчетов(ИспользоватьКлассыСчетовВКачествеГрупп) Экспорт	
	
	Счета = Новый СписокЗначений();
	Счета.Добавить("НеоборотныеАктивы");
	Счета.Добавить("Запасы");
	Счета.Добавить("ДенежныеСредстваРасчетыИДругиеАктивы");
	Счета.Добавить("СобственныйКапиталИОбеспечениеОбязательств");
	Счета.Добавить("ДолгосрочныеОбязательства");
	Счета.Добавить("ТекущиеОбязательства");
	Счета.Добавить("ДоходыИРезультатыДеятельности");
	Счета.Добавить("ЗатратыПоЭлементам");
	Счета.Добавить("ЗатратыДеятельности");
	Счета.Добавить("ЗабалансовыеСчета");
	
	Если ИспользоватьКлассыСчетовВКачествеГрупп Тогда
		
		Для каждого СчетИмя из Счета Цикл
			Счет  = ПланыСчетов.Хозрасчетный[СчетИмя.Значение];
			ЗапросКлассыСчетов = Новый Запрос;
			ЗапросКлассыСчетов.Текст = "ВЫБРАТЬ
			                           |	Хозрасчетный.Ссылка
			                           |ИЗ
			                           |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
			                           |ГДЕ
			                           |	ПОДСТРОКА(Хозрасчетный.Код,1,1) = &КодРодителя И
			                           |	Хозрасчетный.Забалансовый = &РодительЗабалансовый И
			                           |	Хозрасчетный.Родитель = &ПустаяСсылка И
			                           |	НЕ Хозрасчетный.Ссылка = &Родитель";
			ЗапросКлассыСчетов.УстановитьПараметр("Родитель",Счет);
			ЗапросКлассыСчетов.УстановитьПараметр("РодительЗабалансовый",Счет.Забалансовый);
			ЗапросКлассыСчетов.УстановитьПараметр("КодРодителя",СокрЛП(Счет.Код));
			ЗапросКлассыСчетов.УстановитьПараметр("ПустаяСсылка",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
			ВыборкаСчетов = ЗапросКлассыСчетов.Выполнить().Выбрать();
			Пока ВыборкаСчетов.Следующий() Цикл
				ОбъектСчет = ВыборкаСчетов.Ссылка.ПолучитьОбъект();
				Если НЕ ОбъектСчет.Родитель = Счет Тогда
				
					ОбъектСчет.Родитель = Счет;
					ОбъектСчет.ОбменДанными.Загрузка = Истина; // для обхода интерактивной проверки
					ОбъектСчет.Записать();
					
					Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для счета %1 в качестве группы установлен счет %2.';uk='Для рахунку %1 в якості групи встановлений рахунок %2.'"), Строка(ВыборкаСчетов.Ссылка),Строка(Счет));
					ЗаписьЖурналаРегистрации(НСтр("ru='Изменения параметров классов счетов';uk='Зміни параметрів класів рахунків'"),
						УровеньЖурналаРегистрации.Информация, ВыборкаСчетов.Ссылка.Метаданные(),
						ВыборкаСчетов.Ссылка, Сообщение, РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
				
				КонецЕсли; 
			КонецЦикла;
		КонецЦикла;
	Иначе
		
		Для каждого СчетИмя из Счета Цикл
			Счет  = ПланыСчетов.Хозрасчетный[СчетИмя.Значение];
			ЗапросКлассыСчетов = Новый Запрос;
			ЗапросКлассыСчетов.Текст = "ВЫБРАТЬ
									   |	Хозрасчетный.Ссылка
									   |ИЗ
									   |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
									   |ГДЕ
									   |	Хозрасчетный.Родитель = &Родитель";
			ЗапросКлассыСчетов.УстановитьПараметр("Родитель",Счет);
			ВыборкаСчетов = ЗапросКлассыСчетов.Выполнить().Выбрать();
			Пока ВыборкаСчетов.Следующий() Цикл
				ОбъектСчет = ВыборкаСчетов.Ссылка.ПолучитьОбъект();
				Если НЕ ОбъектСчет.Родитель = ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
				
					ОбъектСчет.Родитель = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
					ОбъектСчет.ОбменДанными.Загрузка = Истина; // для обхода интерактивной проверки
					ОбъектСчет.Записать();
					
					Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Счет %1 сделан счетом первого уровня.';uk='Рахунок %1 зроблений рахунком першого рівня.'"), Строка(ВыборкаСчетов.Ссылка));
					ЗаписьЖурналаРегистрации(НСтр("ru='Изменения параметров классов счетов';uk='Зміни параметрів класів рахунків'"),
						УровеньЖурналаРегистрации.Информация, ВыборкаСчетов.Ссылка.Метаданные(),
						ВыборкаСчетов.Ссылка, Сообщение, РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрыКлассовСчетов()
	
Функция СчетВИерархииВМассиве(Счет, Эталон) Экспорт

	Результат = Ложь;
	Если ЗначениеЗаполнено(Счет) Тогда
		Если ТипЗнч(Эталон) = Тип("Массив") Тогда
			Для каждого СчетЭталон Из Эталон Цикл
				Если БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(Счет, СчетЭталон) Тогда
					Результат = Истина;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
		Иначе	
			Результат = БухгалтерскийУчетВызовСервераПовтИсп.СчетВИерархии(Счет, Эталон);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;

КонецФункции

