
Процедура ЗарплатаКадрыОбновлениеС12()Экспорт
	ДатаНачала = '20100101';
	ДатаОкончания = КонецГода(ТекущаяДата());
	
	СоответствиеКонвертированныхОбъектов = Новый Соответствие;
	//НачатьТранзакцию();
	
	НачальноеЗаполнениеНовыхОбъектов();
	
	Константы.ИспользоватьКадровыйУчет.Установить(Истина);
	Константы.ИспользоватьНачислениеЗарплаты.Установить(Истина);
	Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Установить(Истина);
	Константы.ВедетсяУчетРасчетовПоЗарплатеПоРаботникам.Установить(Истина);
	
	КонвертироватьУчетнуюПолитикуПоПерсоналу(); 
	
	//СПРАВОЧНИКИ
	ФизическиеЛицаКонвертация();
	ПодразделенияКонвертация();
	СотрудникиКонвертация();
	ОрганизацииКонвертация();
	ВидыВыплатКонвертация();
	ПредопределенныеСпособыОтраженияПоУмолчанию = ПредопределенныеСпособыОтраженияПоУмолчанию();
	СпособыОтраженияЗарплатыВРеглУчетеКонвертация();
	
	//ПЛАНЫ ВИДОВ РАСЧЕТА
	КонвертироватьПВРНачисления(СоответствиеКонвертированныхОбъектов);
	КонвертироватьПВРУдержания(СоответствиеКонвертированныхОбъектов);
	КонвертироватьПределыСтраховыхВзносов();
	ПерезаполнениеОбновленныхОбъектов();
	ЗаполнитьПредопределенныеСпособыОтраженияПоУмолчанию(ПредопределенныеСпособыОтраженияПоУмолчанию);
	
	//РЕГИСТРЫ СВЕДЕНИЙ
	ГражданствоФизическихЛицКонвертация(СоответствиеКонвертированныхОбъектов);
	СведенияОбИнвалидностиФизическихЛицКонвертация();
	
	//КонвертироватьДанныеОБанковскихКарточкахРаботников();  //ИНАГРО
	
	//КонвертироватьДанныеСведенийОВыплатахРаботникам(СоответствиеКонвертированныхОбъектов); //ИНАГРО
	
	БухучетЗарплатыСотрудников();
	
	//РЕГИСТРЫ НАКОПЛЕНИЯ
	
	КонвертироватьДанныеУчетаВзаиморасчетовССотрудниками(СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьДанныеВзаиморасчетовСДепонентами(СоответствиеКонвертированныхОбъектов);
	
	//
	КонвертироватьДокументыПриемНаРаботу(СписокДокументовПриемНаРаботу(), СоответствиеКонвертированныхОбъектов);
	//
	КонвертироватьДокументыКадровоеПеремещение(СписокДокументовКадровоеПеремещение(), СоответствиеКонвертированныхОбъектов);
	//
	КонвертироватьДокументывВводПлановыхНачислений(СписокДокументовВводПлановыхНачислений(), СоответствиеКонвертированныхОбъектов);
	КонвертироватьДокументывВводПлановыхНачисленийПоВзносам(СписокДокументовВводПлановыхНачислений(), СоответствиеКонвертированныхОбъектов);
	//
	КонвертироватьДанныеИзмененияПараметровРасчетаИндексацииПоДолжностям(СоответствиеКонвертированныхОбъектов);
	//
	КонвертироватьДокументыУвольнение(СписокДокументовУвольнение(), СоответствиеКонвертированныхОбъектов);
	//
	ТаблицаКатегорий = ФизическиеЛицаСОднойКатегориейЕСВ();
	КонвертироватьДанныеРегистраРасчетаНачисления(СоответствиеКонвертированныхОбъектов);
	КонвертироватьДанныеРегистраРасчетаУдержания(СоответствиеКонвертированныхОбъектов);
	//
	КонвертироватьДанныеРРВзносыВФондыИНалоги(СоответствиеКонвертированныхОбъектов,ТаблицаКатегорий);
	
	КонвертироватьВзаиморасчетыПоВзносамВФонды(СоответствиеКонвертированныхОбъектов);
	//
	//КонвертироватьВзаиморасчетыПоНДФЛ(СоответствиеКонвертированныхОбъектов);
	//КонвертироватьЛьготыПоНДФЛСотрудников(СоответствиеКонвертированныхОбъектов);
	//КонвертироватьРНВзаиморасчетыПоНДФЛ();
	
	//КонвертироватьИндексированныйДоходСовместителей(СоответствиеКонвертированныхОбъектов);
	
	КонвертироватьДокументыТабельУчетаРабочегоВремени(); // ИНАГРО
	
	КонвертироватьДокументыНачислениеЗарплаты(СоответствиеКонвертированныхОбъектов,ТаблицаКатегорий);
	
	КонвертироватьДокументыВедомостьНаВыплатуЗарплаты();
	//УстановитьРучнуюКорректировкуДокументов(); // ИНАГРО. Ручных корректировок устанавливать не нужно
	
КонецПроцедуры	

Функция КонвертироватьДанные(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов = Неопределено, СсылкаНаПриемник = Неопределено)Экспорт 
	Если СоответствиеКонвертированныхОбъектов = Неопределено Тогда
		СоответствиеКонвертированныхОбъектов = Новый Соответствие;
	КонецЕсли;	
	
	Если (Не ЗначениеЗаполнено(КонвертируемыеДанные)) ИЛИ НеПроизводитьКонвертациюЗначения(ТипЗнч(КонвертируемыеДанные)) Тогда
		Возврат КонвертируемыеДанные;
	КонецЕсли;	
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(КонвертируемыеДанные)) Тогда
		СсылкаНаКонвертируемоеЗначение = КонвертируемыеДанные;		
	Иначе	
		Структура = Новый Структура("Ссылка");
		ЗаполнитьЗначенияСвойств(Структура, КонвертируемыеДанные);
		
		Если ЗначениеЗаполнено(Структура.Ссылка) Тогда
			СсылкаНаКонвертируемоеЗначение = КонвертируемыеДанные.Ссылка;
		Иначе
			Возврат КонвертируемыеДанные;
		КонецЕсли;	
	КонецЕсли;	
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНаКонвертируемоеЗначение)) Тогда
		СписокДокументов = Новый Массив;
		СписокДокументов.Добавить(СсылкаНаКонвертируемоеЗначение);
		
		Результат = КонвертироватьДокументы(СписокДокументов, СоответствиеКонвертированныхОбъектов);
		
		Возврат Результат[СсылкаНаКонвертируемоеЗначение];
	Иначе	
		Возврат КонвертироватьСсылочныеДанные(СсылкаНаКонвертируемоеЗначение, КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	КонецЕсли;	
КонецФункции	

Функция КонвертироватьДокументы(СписокДокументов, СоответствиеКонвертированныхОбъектов = Неопределено)
    Результат = Новый Соответствие;
	
	Для Каждого Документ Из СписокДокументов Цикл
		Результат.Вставить(Документ);
	КонецЦикла;
	
	КонвертируемыеДокументыПоТипам = КонвертируемыеДокументыПоТипам(СписокДокументов);
	
	//ДокументыУдалитьНачислениеЗарплаты = КонвертируемыеДокументыПоТипам[Тип("ДокументСсылка.УдалитьНачислениеЗарплатыРаботникамОрганизаций")];

	//Если ДокументыУдалитьНачислениеЗарплаты.Количество() > 0 Тогда
	//	СоотвествиеКонвертированныхДокументов = КонвертироватьДокументыНачислениеЗарплаты(ДокументыУдалитьНачислениеЗарплаты, СоответствиеКонвертированныхОбъектов);
	//	
	//	Для Каждого КонвертированныйДокумент Из СоотвествиеКонвертированныхДокументов Цикл
	//		Результат.Вставить(КонвертированныйДокумент.Ключ, КонвертированныйДокумент.Значение);
	//	КонецЦикла;	
	//КонецЕсли;	
	
	//ДокументыЗарплатаКВыплатеОрганизаций = КонвертируемыеДокументыПоТипам[Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты")];

	//Если ДокументыЗарплатаКВыплатеОрганизаций.Количество() > 0 Тогда
	//	СоотвествиеКонвертированныхДокументов = КонвертироватьДокументыЗарплатаКВыплате(ДокументыЗарплатаКВыплатеОрганизаций, СоответствиеКонвертированныхОбъектов);
	//	
	//	Для Каждого КонвертированныйДокумент Из СоотвествиеКонвертированныхДокументов Цикл
	//		Результат.Вставить(КонвертированныйДокумент.Ключ, КонвертированныйДокумент.Значение);
	//	КонецЦикла;	
	//КонецЕсли;	
	
	ДокументыУдалитьПриемНаРаботуВОрганизацию = КонвертируемыеДокументыПоТипам[Тип("ДокументСсылка.УдалитьПриемНаРаботуВОрганизацию")];

	Если ДокументыУдалитьПриемНаРаботуВОрганизацию.Количество() > 0 Тогда
		СоотвествиеКонвертированныхДокументов = КонвертироватьДокументыПриемНаРаботу(ДокументыУдалитьПриемНаРаботуВОрганизацию, СоответствиеКонвертированныхОбъектов);
		
		Для Каждого КонвертированныйДокумент Из СоотвествиеКонвертированныхДокументов Цикл
			Результат.Вставить(КонвертированныйДокумент.Ключ, КонвертированныйДокумент.Значение);
		КонецЦикла;	
	КонецЕсли;	
	
	ДокументыУдалитьКадровоеПеремещениеОрганизаций = КонвертируемыеДокументыПоТипам[Тип("ДокументСсылка.УдалитьКадровоеПеремещениеОрганизаций")];

	Если ДокументыУдалитьКадровоеПеремещениеОрганизаций.Количество() > 0 Тогда
		СоотвествиеКонвертированныхДокументов = КонвертироватьДокументыКадровоеПеремещение(ДокументыУдалитьКадровоеПеремещениеОрганизаций, СоответствиеКонвертированныхОбъектов);
		
		Для Каждого КонвертированныйДокумент Из СоотвествиеКонвертированныхДокументов Цикл
			Результат.Вставить(КонвертированныйДокумент.Ключ, КонвертированныйДокумент.Значение);
		КонецЦикла;	
	КонецЕсли;	
	
	ДокументыУдалитьУвольнениеИзОрганизаций = КонвертируемыеДокументыПоТипам[Тип("ДокументСсылка.УдалитьУвольнениеИзОрганизаций")];

	Если ДокументыУдалитьУвольнениеИзОрганизаций.Количество() > 0 Тогда
		СоотвествиеКонвертированныхДокументов = КонвертироватьДокументыУвольнение(ДокументыУдалитьУвольнениеИзОрганизаций, СоответствиеКонвертированныхОбъектов);
		
		Для Каждого КонвертированныйДокумент Из СоотвествиеКонвертированныхДокументов Цикл
			Результат.Вставить(КонвертированныйДокумент.Ключ, КонвертированныйДокумент.Значение);
		КонецЦикла;	
	КонецЕсли;	
	
	ДокументыУдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций = КонвертируемыеДокументыПоТипам[Тип("ДокументСсылка.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций")];

	Если ДокументыУдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.Количество() > 0 Тогда
		СоотвествиеКонвертированныхДокументов = КонвертироватьДокументывВводПлановыхНачислений(ДокументыУдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций, СоответствиеКонвертированныхОбъектов);
		
		Для Каждого КонвертированныйДокумент Из СоотвествиеКонвертированныхДокументов Цикл
			Результат.Вставить(КонвертированныйДокумент.Ключ, КонвертированныйДокумент.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого КонвертированныйДокумент ИЗ Результат Цикл
		Если КонвертированныйДокумент.Ключ <> КонвертированныйДокумент.Значение Тогда
			ОбменДаннымиОбновлениеСПредыдущейРедакции.ЗаменитьСсылкуВУдалитьСоответствияОбъектовИнформационныхБаз(
				КонвертированныйДокумент.Ключ, КонвертированныйДокумент.Значение)
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

Функция КонвертируемыеТипыДокументовБП2()
	КонвертируемыеТипыДокументов = Новый Массив;
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьКадровоеПеремещениеОрганизаций"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьПриемНаРаботуВОрганизацию"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.УдалитьУвольнениеИзОрганизаций"));
	КонвертируемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты"));

    Возврат КонвертируемыеТипыДокументов;
КонецФункции	

Функция КонвертируемыеДокументыПоТипам(СписокДокументов)
	КонвертируемыеДокументыПоТипам = Новый Соответствие;
	
	КонвертируемыеТипыДокументов = КонвертируемыеТипыДокументовБП2();	
	
	Для Каждого ТипДокумента Из КонвертируемыеТипыДокументов Цикл
		КонвертируемыеДокументыПоТипам.Вставить(ТипДокумента, Новый Массив);
	КонецЦикла;
	
	Для Каждого Документ Из СписокДокументов Цикл
		ДокументыПоТипу = КонвертируемыеДокументыПоТипам[ТипЗнч(Документ)];
		
		Если ДокументыПоТипу <> Неопределено Тогда
			ДокументыПоТипу.Добавить(Документ);			
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат КонвертируемыеДокументыПоТипам;
КонецФункции	

Функция КонвертироватьСсылочныеДанные(СсылкаНаКонверируемоеЗначение, КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник)
	ТипЗначения = ТипЗнч(СсылкаНаКонверируемоеЗначение);
	
	Если ТипЗначения = Тип("СправочникСсылка.Должности") Тогда 
		ВозвращаемоеЗначение = КонвертироватьЭлементДолжность(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда 
		ВозвращаемоеЗначение = КонвертироватьЭлементПодразделенияОрганизаций(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.Сотрудники")Тогда 
		ВозвращаемоеЗначение = КонвертироватьЭлементСотрудникиОрганизаций(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
		ВозвращаемоеЗначение = КонвертироватьЭлементФизическиеЛица(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник);
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ВидыЗанятости") Тогда 
		ВозвращаемоеЗначение = ПолучитьСоответствиеЭлементаПеречисленияВидыЗанятости(КонвертируемыеДанные);	
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.УдалитьПолФизическихЛиц") Тогда 
		ВозвращаемоеЗначение = ПолучитьСоответствиеЭлементаПеречисленияПолФизическихЛиц(КонвертируемыеДанные);	
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ПричиныИзмененияСостояния") Тогда 
		ВозвращаемоеЗначение = ПолучитьСоответствиеЭлементаПричиныИзмененияСостояния(КонвертируемыеДанные);	
	Иначе 
		ВозвращаемоеЗначение = СсылкаНаКонверируемоеЗначение;
	КонецЕсли;
	
	Если ВозвращаемоеЗначение <> СсылкаНаКонверируемоеЗначение Тогда
		ОбменДаннымиОбновлениеСПредыдущейРедакции.ЗаменитьСсылкуВУдалитьСоответствияОбъектовИнформационныхБаз(СсылкаНаКонверируемоеЗначение, ВозвращаемоеЗначение)
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьСсылкуНаКонвертированныйОбъект(Ссылка, СоответствиеКонвертированныхОбъектов)
	СоответствиеКонвертированныхОбъектовПоТипу = СоответствиеКонвертированныхОбъектов.Получить(ТипЗнч(Ссылка));
	Если СоответствиеКонвертированныхОбъектовПоТипу = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат СоответствиеКонвертированныхОбъектовПоТипу.Получить(Ссылка);
	КонецЕсли;	
КонецФункции

Процедура ВставитьСсылкуНаКонвертированныйОбъект(СсылкаИсходногоОбъетка, СсылкаКонвертированногоОбъекта, СоответствиеКонвертированныхОбъектов)
	Если СоответствиеКонвертированныхОбъектов <> Неопределено Тогда
	
		СоответствиеКонвертированныхОбъектовПоТипу = СоответствиеКонвертированныхОбъектов.Получить(ТипЗнч(СсылкаИсходногоОбъетка));
		Если СоответствиеКонвертированныхОбъектовПоТипу = Неопределено Тогда
			СоответствиеКонвертированныхОбъектовПоТипу = Новый Соответствие;
			СоответствиеКонвертированныхОбъектов.Вставить(ТипЗнч(СсылкаИсходногоОбъетка), СоответствиеКонвертированныхОбъектовПоТипу);
		КонецЕсли;	

		СоответствиеКонвертированныхОбъектовПоТипу.Вставить(СсылкаИсходногоОбъетка, СсылкаКонвертированногоОбъекта);
		
	КонецЕсли;	
КонецПроцедуры	

Функция НеПроизводитьКонвертациюЗначения(Тип)
	Если Тип = Тип("Число") 
		Или Тип = Тип("Строка")
		Или Тип = Тип("Дата") 
		Или Тип = Тип("Булево")
		Или Тип = Тип("УникальныйИдентификатор") 
		Или Тип = Тип("ХранилищаНастроекМенеджер") 
		Или Тип = Тип("Null") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
КонецФункции	

Функция ПолучитьСсылкуНаНовыйЭлемент(КонвертируемыеДанные, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник)
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(КонвертируемыеДанные)) Тогда
		Ссылка = КонвертируемыеДанные;
	Иначе 
		Ссылка = КонвертируемыеДанные.Ссылка;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;            
	
	СсылкаНаКонвертированныйОбъект = ПолучитьСсылкуНаКонвертированныйОбъект(Ссылка, СоответствиеКонвертированныхОбъектов);
	Если СсылкаНаКонвертированныйОбъект <> Неопределено Тогда
		Возврат СсылкаНаКонвертированныйОбъект;		
	КонецЕсли;	
	
	Если КонвертируемыеДанные.Предопределенный Тогда
		Элемент = ПолучитьСоответствиеПредопределенногоЭлемент(Ссылка);
		Если Элемент <> Неопределено Тогда
			Возврат Элемент;
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаПриемник) Тогда
		ВставитьСсылкуНаКонвертированныйОбъект(Ссылка, СсылкаНаПриемник, СоответствиеКонвертированныхОбъектов);
		Возврат СсылкаНаПриемник;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

Функция ПолучитьСоответствиеПредопределенногоЭлемент(Элемент)
	
	Возврат Неопределено;
	
КонецФункции	

///////////////////////////////////////////////////////////////////////////////////////////////////////
//Справочники

Процедура УстановитьКодСправочника(ОбъектПриемник, ДанныеИсточника)
	СтруктураДанныхИсточника = Новый Структура("Код", Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураДанныхИсточника, ДанныеИсточника);
	Если СтруктураДанныхИсточника.Код <> Неопределено И ОбъектПриемник.Метаданные().ДлинаКода <> 0 Тогда
		ОбъектПриемник.Код = СтруктураДанныхИсточника.Код;	
	КонецЕсли;	
КонецПроцедуры	

//Справочник Должности
//
Функция КонвертироватьЭлементДолжность(Ссылка, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	Возврат Ссылка;	
КонецФункции	

// Справочник ПодразделенияОрганизаций 
//
Процедура ПодразделенияКонвертация()
	
	Запрос = Новый запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Родитель = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|	И ПодразделенияОрганизаций.РеквизитДопУпорядочиванияИерархического = """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка= РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ПодразделениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПодразделениеОбъект.Записать();
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры 

Функция КонвертироватьЭлементПодразделенияОрганизаций(Ссылка, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	Возврат Ссылка;	
КонецФункции	

// Справочник СотрудникиОрганизаций 
//
Процедура СотрудникиКонвертация()
	
	Возврат;
	
КонецПроцедуры	

Функция КонвертироватьЭлементСотрудникиОрганизаций(Ссылка, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	Возврат Ссылка;	
КонецФункции	

// Справочник ФизическиеЛица
//
Процедура ФизическиеЛицаКонвертация()	
	
	ВыборкаФизЛиц = Справочники.ФизическиеЛица.Выбрать();
	
	Пока ВыборкаФизЛиц.Следующий() Цикл 
		Если НЕ ВыборкаФизЛиц.ЭтоГруппа Тогда
			ФизЛицоОбъект = ВыборкаФизЛиц.ПолучитьОбъект();
			ФизЛицоОбъект.Пол = КонвертироватьДанные(ФизЛицоОбъект.УдалитьПол, Новый Соответствие);
			ФизЛицоОбъект.ФИО = ФизЛицоОбъект.Наименование;
			ФизЛицоОбъект.Записать();
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

Функция КонвертироватьЭлементФизическиеЛица(Ссылка, СоответствиеКонвертированныхОбъектов, СсылкаНаПриемник = Неопределено)
	Возврат Ссылка;	
КонецФункции

// Справочник ВидыВыплат 
//
Процедура ВидыВыплатКонвертация()
	
	Выборка = Справочники.ВидыВыплат.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		Если НЕ Выборка.Предопределенный И ЗначениеЗаполнено(Выборка.ИНАГРО_ВидРасчета) // ИНАГРО
			 И Выборка.Начисления.Количество() = 0 Тогда
			ВидыВыплатОбъект = Выборка.ПолучитьОбъект();
			НС = ВидыВыплатОбъект.Начисления.Добавить();
			НС.Начисление = ВидыВыплатОбъект.ИНАГРО_ВидРасчета; // ИНАГРО
			ВидыВыплатОбъект.Записать();
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры 

// Справочник СпособыОтраженияЗарплатыВРеглУчете 
//
Процедура СпособыОтраженияЗарплатыВРеглУчетеКонвертация()
	
	Выборка = Справочники.СпособыОтраженияЗарплатыВРеглУчете.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.Предопределенный Тогда
			СпособыОтраженияОбъект = Выборка.ПолучитьОбъект();
			Если Выборка.ИНАГРО_ВзносыОсновногоНачисления = NULL ИЛИ Выборка.СпособОтраженияЕСВФОТ = NULL Тогда // ИНАГРО
				Продолжить;
			КонецЕсли;	
			Если НЕ Выборка.ИНАГРО_ВзносыОсновногоНачисления Тогда // ИНАГРО
				СпособыОтраженияОбъект.СтратегияОтраженияЕСВФОТ = Перечисления.СтратегииОтраженияВУчетеЕСВ.КакНачисление;
			ИначеЕсли Выборка.ИНАГРО_ВзносыОсновногоНачисления И Выборка.СпособОтраженияЕСВФОТ = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка() Тогда // ИНАГРО
				СпособыОтраженияОбъект.СтратегияОтраженияЕСВФОТ = Перечисления.СтратегииОтраженияВУчетеЕСВ.КакОсновноеНачислениеСотрудника
			Иначе	
				СпособыОтраженияОбъект.СтратегияОтраженияЕСВФОТ = Перечисления.СтратегииОтраженияВУчетеЕСВ.ОсобымСпособом
			КонецЕсли;	
			СпособыОтраженияОбъект.Записать();
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры 

Функция ПредопределенныеСпособыОтраженияПоУмолчанию()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпособыОтраженияЗарплатыВРеглУчете.Ссылка,
	|	СпособыОтраженияЗарплатыВРеглУчете.Наименование,
	|	СпособыОтраженияЗарплатыВРеглУчете.СчетДт,
	|	СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт1,
	|	СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт2,
	|	СпособыОтраженияЗарплатыВРеглУчете.СубконтоДт3,
	|	СпособыОтраженияЗарплатыВРеглУчете.СчетКт,
	|	СпособыОтраженияЗарплатыВРеглУчете.СубконтоКт1,
	|	СпособыОтраженияЗарплатыВРеглУчете.СубконтоКт2,
	|	СпособыОтраженияЗарплатыВРеглУчете.СубконтоКт3,
	|	СпособыОтраженияЗарплатыВРеглУчете.НалоговоеНазначениеДоходовИЗатрат,
	|	СпособыОтраженияЗарплатыВРеглУчете.НалоговоеНазначение,
	|	СпособыОтраженияЗарплатыВРеглУчете.СтратегияОтраженияЕСВФОТ,
	|	СпособыОтраженияЗарплатыВРеглУчете.СпособОтраженияЕСВФОТ,
	|	СпособыОтраженияЗарплатыВРеглУчете.ИмяПредопределенныхДанных
	|ИЗ
	|	Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК СпособыОтраженияЗарплатыВРеглУчете
	|ГДЕ
	|	(СпособыОтраженияЗарплатыВРеглУчете.Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию)
	|			ИЛИ СпособыОтраженияЗарплатыВРеглУчете.Ссылка = ЗНАЧЕНИЕ(Справочник.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеУдержанийПоУмолчанию))";
	
	ДанныеСправочника = Запрос.Выполнить().Выгрузить();
	
	Возврат ДанныеСправочника;
	
КонецФункции

Процедура ЗаполнитьПредопределенныеСпособыОтраженияПоУмолчанию(ПредопределенныеСпособыОтраженияПоУмолчанию)
	
	Для Каждого СтрокаДанных Из ПредопределенныеСпособыОтраженияПоУмолчанию Цикл
		НайденныйЭлемент = СтрокаДанных.Ссылка; 
		Если Не НайденныйЭлемент = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка() И Не НайденныйЭлемент.ЭтоГруппа Тогда
			СпособыОтраженияОбъект = НайденныйЭлемент.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(СпособыОтраженияОбъект, СтрокаДанных);
			СпособыОтраженияОбъект.Записать();
		КонецЕсли;	
	КонецЦикла;	
	
	КонецПроцедуры	

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Организации

Процедура ОрганизацииКонвертация()
	
	Возврат;
	
КонецПроцедуры	

//////////////////////////////////////////////////////////////////////////////////////////
//Перечисления
//////////////////////////////////////////////////////////////////////////////////////////
//Перечисление ВидыЗанятости

Функция ПолучитьСоответствиеЭлементаПеречисленияВидыЗанятости(Элемент)
	Возврат Элемент;	
КонецФункции

Функция ПолучитьСоответствиеЭлементаПеречисленияПолФизическихЛиц(Элемент)
	Если Элемент = Перечисления.УдалитьПолФизическихЛиц.Мужской Тогда
		Возврат Перечисления.ПолФизическогоЛица.Мужской;
	ИначеЕсли Элемент = Перечисления.УдалитьПолФизическихЛиц.Женский Тогда
		Возврат Перечисления.ПолФизическогоЛица.Женский; 
	КонецЕсли;	
КонецФункции

Функция ПолучитьСоответствиеЭлементаПричиныИзмененияСостояния(Элемент)
	Если Элемент = Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу Тогда
		Возврат Перечисления.ВидыКадровыхСобытий.Прием;
	ИначеЕсли Элемент = Перечисления.ПричиныИзмененияСостояния.Перемещение Тогда
		Возврат Перечисления.ВидыКадровыхСобытий.Перемещение;
	ИначеЕсли Элемент = Перечисления.ПричиныИзмененияСостояния.Увольнение Тогда
		Возврат Перечисления.ВидыКадровыхСобытий.Увольнение;
	Иначе
		Возврат Перечисления.ВидыКадровыхСобытий.ПустаяСсылка();
	КонецЕсли;	
КонецФункции	

//////////////////////////////////////////////////////////////////////////////////////////////////////
//ПЛАНЫ ВИДОВ РАСЧЕТА 

//ПВР Начисления
Процедура КонвертироватьПВРНачисления(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВзносыБазовыеВидыРасчета.ВидРасчета КАК ВидРасчета,
	               |	МАКСИМУМ(ВзносыБазовыеВидыРасчета.Ссылка) КАК Взнос
	               |ПОМЕСТИТЬ ВТБазыВзносов
	               |ИЗ
	               |	ПланВидовРасчета.УДАЛИТЬВзносы.БазовыеВидыРасчета КАК ВзносыБазовыеВидыРасчета
	               |ГДЕ
	               |	ВзносыБазовыеВидыРасчета.Ссылка.ЕСВ = ИСТИНА
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВзносыБазовыеВидыРасчета.ВидРасчета
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Начисления.Ссылка,
	               |	Начисления.СпособОтраженияВБухучете,
	               |	Начисления.УДАЛИТЬКатегорияРасчета,
	               |	Начисления.УДАЛИТЬЭтоОклад,
	               |	Начисления.УДАЛИТЬЭтоОтпуск,
	               |	Начисления.УДАЛИТЬЭтоБольничные,
	               |	Начисления.СпособРасчета,
	               |	Начисления.ЗачетОтработанногоВремени,
	               |	Начисления.ЗачетНормыВремени,
	               |	Начисления.Отчет3ПВВидИспользованияРабочегоВремени,
	               |	БазыВзносов.Взнос КАК ВидВзноса,
	               |	ВЫБОР
	               |		КОГДА БазыВзносов.Взнос = ЗНАЧЕНИЕ(ПланВидовРасчета.УдалитьВзносы.ЕСВ)
	               |				ИЛИ БазыВзносов.Взнос = ЗНАЧЕНИЕ(ПланВидовРасчета.УдалитьВзносы.ЕСВФОТ)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ОсновнаяЗарплата)
	               |		КОГДА БазыВзносов.Взнос = ЗНАЧЕНИЕ(ПланВидовРасчета.УдалитьВзносы.ЕСВБольничные)
	               |				ИЛИ БазыВзносов.Взнос = ЗНАЧЕНИЕ(ПланВидовРасчета.УдалитьВзносы.ЕСВФОТБольничные)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.Больничные)
	               |		КОГДА БазыВзносов.Взнос = ЗНАЧЕНИЕ(ПланВидовРасчета.УдалитьВзносы.ЕСВГПХ)
	               |				ИЛИ БазыВзносов.Взнос = ЗНАЧЕНИЕ(ПланВидовРасчета.УдалитьВзносы.ЕСВФОТГПХ)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ПоДоговорамГПХ)
	               |		КОГДА БазыВзносов.Взнос = ЗНАЧЕНИЕ(ПланВидовРасчета.УдалитьВзносы.ЕСВДекретные)
	               |				ИЛИ БазыВзносов.Взнос = ЗНАЧЕНИЕ(ПланВидовРасчета.УдалитьВзносы.ЕСВФОТДекретные)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.Декретные)
               	   |		КОГДА БазыВзносов.Взнос = ЗНАЧЕНИЕ(ПланВидовРасчета.УдалитьВзносы.ЕСВМобилизованные)
	               |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.НачисленияМобилизованным)
		           |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.НеУчитывается)
	               |	КОНЕЦ КАК ВидЕСВ,
	               |	Начисления.УДАЛИТЬЭтоЗарплатаМобилизованным,
				   |    Начисления.УДАЛИТЬПропорцияВремениПоЧасам КАК ПропорцияВремениПоЧасам
	               |ИЗ
	               |	ПланВидовРасчета.Начисления КАК Начисления
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТБазыВзносов КАК БазыВзносов
	               |		ПО Начисления.Ссылка = БазыВзносов.ВидРасчета
	               |ГДЕ
	               |	Начисления.Предопределенный = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеОчередностиРасчета = Новый Соответствие;
	СоответствиеОчередностиРасчета.Вставить(Перечисления.КатегорииРасчетов.Первичное,0);
	СоответствиеОчередностиРасчета.Вставить(Перечисления.КатегорииРасчетов.ЗависимоеПервогоУровня,1);
	СоответствиеОчередностиРасчета.Вставить(Перечисления.КатегорииРасчетов.ЗависимоеВторогоУровня,2);
	СоответствиеОчередностиРасчета.Вставить(Перечисления.КатегорииРасчетов.ЗависимоеТретьегоУровня,3);

	Пока Выборка.Следующий() Цикл
		НачислениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		НачислениеОбъект.ОчередностьРасчета = СоответствиеОчередностиРасчета.Получить(Выборка.УДАЛИТЬКатегорияРасчета);

		// Категория начисления или неоплаченного времени
		Если Выборка.УДАЛИТЬЭтоОклад Тогда
			НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда;
		ИначеЕсли Выборка.УДАЛИТЬЭтоОтпуск Тогда
			НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска
		ИначеЕсли Выборка.УДАЛИТЬЭтоБольничные Тогда
			Если Выборка.ВидВзноса = ПланыВидовРасчета.УдалитьВзносы.ЕСВДекретные Тогда
				НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам;
			Иначе
				Если Выборка.Отчет3ПВВидИспользованияРабочегоВремени = Справочники.СтатьиНалоговыхДеклараций.ОтчетПоТруду_НеФОТ Тогда
					НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста;
				Иначе	
					НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя;
				КонецЕсли;	
			КонецЕсли;	
		ИначеЕсли Выборка.УДАЛИТЬЭтоЗарплатаМобилизованным Тогда
			НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.НачисленияМобилизованным
		ИначеЕсли Выборка.СпособРасчета = Перечисления.СпособыРасчетаНачислений.Процентом Тогда
			Если Выборка.ВидВзноса = ПланыВидовРасчета.УдалитьВзносы.ЕСВ Тогда
				НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия
			КонецЕсли;
		ИначеЕсли Выборка.ВидВзноса = ПланыВидовРасчета.УдалитьВзносы.ЕСВГПХ Тогда
			НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоДоговоруГПХ;
		ИначеЕсли Выборка.Ссылка = ПланыВидовРасчета.Начисления.ИндексацияЗарплаты Тогда
			НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Индексация	
		Иначе	
			НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прочее;
		КонецЕсли;	
		
		Если Не НачислениеОбъект.Предопределенный Тогда
			Если НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ПовременнаяОплатаТруда Тогда
				НачислениеОбъект.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.ТарифнаяСтавкаОклад	
			ИначеЕсли НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска Тогда
				НачислениеОбъект.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.Отпускные	
			ИначеЕсли НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя Тогда
				НачислениеОбъект.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.БольничныеЗаСчетПредприятия	
			ИначеЕсли НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста Тогда
				НачислениеОбъект.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.ПомощьИДругиеВыплатыЗаСчетФСС	
			ИначеЕсли НачислениеОбъект.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Индексация Тогда
				НачислениеОбъект.ВидНачисленияДляТиповыхОтчетов = Перечисления.ВидыНачисленийДляТиповыхОтчетов.ИндексацияЗарплаты
			КонецЕсли;	
		КонецЕсли;	
		
		НачислениеОбъект.ВидЕСВ = Выборка.ВидЕСВ;
	
		НачислениеОбъект.ПериодРасчетаБазовыхНачислений = Перечисления.ПериодыРасчетаБазовыхНачислений.ТекущийМесяц;
		НачислениеОбъект.КоличествоМесяцевБазовогоПериода = 1;
		Если Выборка.СпособОтраженияВБухучете = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка() Тогда
			НачислениеОбъект.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачислений.ПоДаннымОСотрудникеИЕгоПлановыхНачислениях
		Иначе
			НачислениеОбъект.СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВУчетеНачислений.КакЗаданоВидуРасчета
		КонецЕсли;	
		
		Если Выборка.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ИндексацияЗарплаты Или Выборка.СпособРасчета = Перечисления.СпособыРасчетаНачислений.ДоплатаДоМЗП Тогда
			Если Выборка.ПропорцияВремениПоЧасам Тогда
				НачислениеОбъект.ВидПропорцииВремени = Перечисления.ВидыПропорцииВремени.ПоЧасам
			Иначе	
				НачислениеОбъект.ВидПропорцииВремени = Перечисления.ВидыПропорцииВремени.ПоДням
			КонецЕсли;	
		КонецЕсли;	
		БазовыеВидыРасчетаОбъекта = НачислениеОбъект.БазовыеВидыРасчета.Выгрузить();
		Если БазовыеВидыРасчетаОбъекта.Количество() > 0 Тогда
			НачислениеОбъект.ВедущиеВидыРасчета.Загрузить(БазовыеВидыРасчетаОбъекта)		
		КонецЕсли;	

		НачислениеОбъект.ОбменДанными.Загрузка = ИСТИНА;
		НачислениеОбъект.Записать();
		
	КонецЦикла;	
		

КонецПроцедуры	

// ПВР Удержания
//
Процедура КонвертироватьПВРУдержания(СоответствиеКонвертированныхОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Удержания.Ссылка,
	|	Удержания.СпособРасчета,
	|	Удержания.ОчередностьРасчета,
	|	Удержания.УДАЛИТЬСпособРасчета,
	|	Удержания.УдалитьВидВзаиморасчетов,
	|	Удержания.УДАЛИТЬКатегорияРасчета,
	|	Удержания.УДАЛИТЬЭтоАлименты
	|ИЗ
	|	ПланВидовРасчета.Удержания КАК Удержания
	|ГДЕ
	|	Удержания.Предопределенный = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеОчередностиРасчета = Новый Соответствие;
	СоответствиеОчередностиРасчета.Вставить(Перечисления.КатегорииРасчетов.Первичное,0);
	СоответствиеОчередностиРасчета.Вставить(Перечисления.КатегорииРасчетов.ЗависимоеПервогоУровня,1);
	СоответствиеОчередностиРасчета.Вставить(Перечисления.КатегорииРасчетов.ЗависимоеВторогоУровня,2);
	СоответствиеОчередностиРасчета.Вставить(Перечисления.КатегорииРасчетов.ЗависимоеТретьегоУровня,3);

	
	Пока Выборка.Следующий() Цикл
		УдержаниеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		УдержаниеОбъект.ОчередностьРасчета = СоответствиеОчередностиРасчета.Получить(Выборка.УДАЛИТЬКатегорияРасчета);
		Если Выборка.УДАЛИТЬЭтоАлименты Тогда
			УдержаниеОбъект.КатегорияУдержания = Перечисления.КатегорииУдержаний.Алименты;
		Иначе
			УдержаниеОбъект.КатегорияУдержания = Перечисления.КатегорииУдержаний.Прочее;
		КонецЕсли;
		
		Если Выборка.УДАЛИТЬСпособРасчета = Перечисления.СпособыРасчетаНачислений.ФиксированнойСуммой Тогда
			УдержаниеОбъект.СпособРасчета = Перечисления.СпособыРасчетаУдержаний.ФиксированнойСуммой
		ИначеЕсли Выборка.УДАЛИТЬСпособРасчета = Перечисления.СпособыРасчетаНачислений.Процентом Тогда
			УдержаниеОбъект.СпособРасчета = Перечисления.СпособыРасчетаУдержаний.Процентом
		КонецЕсли;	
		УдержаниеОбъект.ОбменДанными.Загрузка = ИСТИНА;
		УдержаниеОбъект.Записать();
	КонецЦикла;	
		

КонецПроцедуры	

/////////////////////////////////////////////////////////////////////////////////////////////////////
// РЕГИСТРЫ СВЕДЕНИЙ

Процедура ГражданствоФизическихЛицКонвертация(СоответствиеКонвертированныхОбъектов)
	
	НаборЗаписей = РегистрыСведений.ГражданствоФизическихЛиц.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	НаборЗаписей.Записать();
	
КонецПроцедуры	

Процедура СведенияОбИнвалидностиФизическихЛицКонвертация()
	НаборЗаписей = РегистрыСведений.СведенияОбИнвалидностиФизическихЛиц.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	НаборЗаписей.Записать();
КонецПроцедуры	

/////////////////////////////////////////////////////////////////////////////////////////////////////
// РЕГИСТРЫ РАСЧЕТА

/////////////////////////////////////////////////////////////////////////////////////////////////////
// РЕГИСТРЫ РАСЧЕТА
Процедура КонвертироватьДанныеРегистраРасчетаНачисления(СоответствиеКонвертированныхОбъектов);

	Выборка = ДанныеРегистровРасчета("Начисления");
	
	ТаблицаНачислений = Новый ТаблицаЗначений;
	ТаблицаНачислений.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаНачислений.Колонки.Добавить("Сотрудник");
	ТаблицаНачислений.Колонки.Добавить("Подразделение");
	ТаблицаНачислений.Колонки.Добавить("НачислениеУдержание");
	ТаблицаНачислений.Колонки.Добавить("НормаДней");
	ТаблицаНачислений.Колонки.Добавить("НормаЧасов");
	ТаблицаНачислений.Колонки.Добавить("ОтработаноДней");
	ТаблицаНачислений.Колонки.Добавить("ОтработаноЧасов");
	ТаблицаНачислений.Колонки.Добавить("КалендарныеДни");
	ТаблицаНачислений.Колонки.Добавить("Сумма");
	ТаблицаНачислений.Колонки.Добавить("НалоговыйПериодЕСВ");
	ТаблицаНачислений.Колонки.Добавить("НалоговыйПериодНДФЛ");
	ТаблицаНачислений.Колонки.Добавить("ПериодДействия");
	ТаблицаНачислений.Колонки.Добавить("Период");
	ТаблицаНачислений.Колонки.Добавить("ДатаНачала");
	ТаблицаНачислений.Колонки.Добавить("ДатаОкончания");
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписей = РегистрыРасчета.Начисления.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		Организация = Справочники.Организации.ПустаяСсылка();
		ТаблицаНачислений.Очистить();
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			
			ЗаписьНабора.ОтработаноДней = ЗаписьНабора.УдалитьОтработаноДней;
			ЗаписьНабора.ОтработаноЧасов = ЗаписьНабора.УдалитьОтработаноЧасов;
			
			СтрокаТаблицы = ТаблицаНачислений.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЗаписьНабора);
			
			СтрокаТаблицы.Сотрудник = ?(ЗначениеЗаполнено(СтрокаТаблицы.Сотрудник), СтрокаТаблицы.Сотрудник, Справочники.Сотрудники.ПустаяСсылка());
			СтрокаТаблицы.НачислениеУдержание = ЗаписьНабора.ВидРасчета;	
			СтрокаТаблицы.НалоговыйПериодЕСВ = УчетСтраховыхВзносов.ОпределитьНалоговыйПериод(ЗаписьНабора.ПериодРегистрации, НачалоМесяца(ЗаписьНабора.ДатаНачала), ЗаписьНабора.ВидРасчета.ВидЕСВ, ЗаписьНабора.ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени);
			СтрокаТаблицы.НалоговыйПериодНДФЛ = УчетНДФЛ.ОпределитьНалоговыйПериод(ЗаписьНабора.ПериодРегистрации, НачалоМесяца(ЗаписьНабора.ДатаНачала), ЗаписьНабора.ВидРасчета.ДоходНДФЛ, ЗаписьНабора.ВидРасчета.КатегорияНачисленияИлиНеоплаченногоВремени);
			СтрокаТаблицы.ПериодДействия = НачалоМесяца(ЗаписьНабора.ДатаНачала);
			СтрокаТаблицы.Период = НачалоМесяца(ЗаписьНабора.ПериодРегистрации);
			СтрокаТаблицы.Сумма = ЗаписьНабора.Результат;
			СтрокаТаблицы.ФизическоеЛицо = ?(ЗначениеЗаполнено(СтрокаТаблицы.Сотрудник.ФизическоеЛицо), СтрокаТаблицы.Сотрудник.ФизическоеЛицо, Справочники.ФизическиеЛица.ПустаяСсылка());
			Организация = ЗаписьНабора.Организация;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		Документ = Выборка.Регистратор.ПолучитьОбъект();
		УчетНачисленнойЗарплаты.ЗарегистрироватьДанныеРегистровРасчета(Документ, Ложь, Организация, ТаблицаНачислений);
		
	КонецЦикла	
	
КонецПроцедуры	

Процедура КонвертироватьДанныеРегистраРасчетаУдержания(СоответствиеКонвертированныхОбъектов)

	Выборка = ДанныеРегистровРасчета("Удержания");
	
	ТаблицаУдержаний = Новый ТаблицаЗначений;
	ТаблицаУдержаний.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаУдержаний.Колонки.Добавить("Сотрудник");
	ТаблицаУдержаний.Колонки.Добавить("Подразделение");
	ТаблицаУдержаний.Колонки.Добавить("НачислениеУдержание");
	ТаблицаУдержаний.Колонки.Добавить("Сумма");
	ТаблицаУдержаний.Колонки.Добавить("ПериодДействия");
	ТаблицаУдержаний.Колонки.Добавить("Период");
	ТаблицаУдержаний.Колонки.Добавить("ДатаНачала");
	ТаблицаУдержаний.Колонки.Добавить("ДатаОкончания");
	Организация = Справочники.Организации.ПустаяСсылка();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписей = РегистрыРасчета.Удержания.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		ТаблицаУдержаний.Очистить();
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			
			СтрокаТаблицы = ТаблицаУдержаний.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЗаписьНабора);
			
			СтрокаТаблицы.Сотрудник = ?(ЗначениеЗаполнено(СтрокаТаблицы.Сотрудник), СтрокаТаблицы.Сотрудник, Справочники.Сотрудники.ПустаяСсылка());
			СтрокаТаблицы.НачислениеУдержание = ЗаписьНабора.ВидРасчета;	
			СтрокаТаблицы.ПериодДействия = НачалоМесяца(НачалоМесяца(ЗаписьНабора.БазовыйПериодНачало));
			СтрокаТаблицы.Период = НачалоМесяца(ЗаписьНабора.ПериодРегистрации);
			СтрокаТаблицы.Сумма = ЗаписьНабора.Результат;
			СтрокаТаблицы.ФизическоеЛицо = ?(ЗначениеЗаполнено(СтрокаТаблицы.Сотрудник.ФизическоеЛицо), СтрокаТаблицы.Сотрудник.ФизическоеЛицо, Справочники.ФизическиеЛица.ПустаяСсылка()); 
			Организация = ЗаписьНабора.Организация;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		Документ = Выборка.Регистратор.ПолучитьОбъект();
		УчетНачисленнойЗарплаты.ЗарегистрироватьДанныеРегистровРасчета(Документ, Ложь, Организация, ТаблицаУдержаний);
		
	КонецЦикла	
	
КонецПроцедуры	

Функция ДанныеРегистровРасчета(РегистрРасчета)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Регистр.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрРасчета." + РегистрРасчета + " КАК Регистр
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	Возврат Запрос.Выполнить().Выбрать()
	
КонецФункции	

Процедура КонвертироватьДанныеРРВзносыВФондыИНалоги(СоответствиеКонвертированныхОбъектов,ТаблицаКатегорий)
	
	Выборка = ДанныеВзносыВФондыИНалоги();
	
	ТаблицаВзносов = Новый ТаблицаЗначений;
	ТаблицаВзносов.Колонки.Добавить("Организация");
	ТаблицаВзносов.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаВзносов.Колонки.Добавить("ВидРасчета");
	ТаблицаВзносов.Колонки.Добавить("СпособРасчета");
	ТаблицаВзносов.Колонки.Добавить("ВидЕСВ");
	ТаблицаВзносов.Колонки.Добавить("Период");
	ТаблицаВзносов.Колонки.Добавить("НалоговыйПериод");
	ТаблицаВзносов.Колонки.Добавить("СтатьяНалоговойДекларации");
	ТаблицаВзносов.Колонки.Добавить("Сумма");
	ТаблицаВзносов.Колонки.Добавить("База");
	ТаблицаВзносов.Колонки.Добавить("БазаВзноса");
	ТаблицаВзносов.Колонки.Добавить("БазаОтпускные");
	ТаблицаВзносов.Колонки.Добавить("ДатаНачала");
	ТаблицаВзносов.Колонки.Добавить("ДатаОкончания");
	ТаблицаВзносов.Колонки.Добавить("БазаВычет");
	ТаблицаВзносов.Колонки.Добавить("Налог");
	ТаблицаВзносов.Колонки.Добавить("Ставка");
	ТаблицаВзносов.Колонки.Добавить("СтавкаПолная");
	ТаблицаВзносов.Колонки.Добавить("Предел");
	ТаблицаВзносов.Колонки.Добавить("ОтработаноДней");
	ТаблицаВзносов.Колонки.Добавить("ОтработаноДнейВсего");
	ТаблицаВзносов.Колонки.Добавить("КатегорияЕСВ");
	ТаблицаВзносов.Колонки.Добавить("ТипНачисления");
	ТаблицаВзносов.Колонки.Добавить("БазаДоначисление");
	ТаблицаВзносов.Колонки.Добавить("РезультатДоначисление");
	ТаблицаВзносов.Колонки.Добавить("РезультатПолная");
	Организация = Справочники.Организации.ПустаяСсылка();
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей = РегистрыРасчета.УДАЛИТЬВзносыВФондыИНалоги.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		ТаблицаВзносов.Очистить();
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если ЗаписьНабора.Результат <> 0 Тогда
				СтрокаТаблицы = ТаблицаВзносов.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЗаписьНабора);	
				
				СтрокаТаблицы.ФизическоеЛицо = ?(ЗначениеЗаполнено(ЗаписьНабора.Сотрудник.ФизическоеЛицо), ЗаписьНабора.Сотрудник.ФизическоеЛицо, Справочники.ФизическиеЛица.ПустаяСсылка()); 
				
				Если ЗаписьНабора.ВидРасчета = ПланыВидовРасчета.УдалитьВзносы.ЕСВФОТ
					или ЗаписьНабора.ВидРасчета = ПланыВидовРасчета.УдалитьВзносы.ЕСВФОТБольничные
					или ЗаписьНабора.ВидРасчета = ПланыВидовРасчета.УдалитьВзносы.ЕСВФОТГПХ
					или ЗаписьНабора.ВидРасчета = ПланыВидовРасчета.УдалитьВзносы.ЕСВФОТДекретные
					или ЗаписьНабора.ВидРасчета = ПланыВидовРасчета.УдалитьВзносы.ЕСВФОТМобилизованные Тогда
					
					СтрокаТаблицы.СпособРасчета = Перечисления.СпособыРасчетаВзносов.ВзносыФОТ;
				Иначе
					СтрокаТаблицы.СпособРасчета = Перечисления.СпособыРасчетаВзносов.Взносы;
				КонецЕсли;	
				
				Если ЗаписьНабора.ВидРасчета = ПланыВидовРасчета.УДАЛИТЬВзносы.ЕСВ ИЛИ ЗаписьНабора.ВидРасчета = ПланыВидовРасчета.УдалитьВзносы.ЕСВФОТ Тогда 
					ВидЕСВ = Перечисления.ВидыЕСВ.ОсновнаяЗарплата
				ИначеЕсли ЗаписьНабора.ВидРасчета =ПланыВидовРасчета.УдалитьВзносы.ЕСВБольничные ИЛИ ЗаписьНабора.ВидРасчета = ПланыВидовРасчета.УдалитьВзносы.ЕСВФОТБольничные Тогда
					ВидЕСВ = Перечисления.ВидыЕСВ.Больничные
				ИначеЕсли ЗаписьНабора.ВидРасчета = ПланыВидовРасчета.УдалитьВзносы.ЕСВГПХ ИЛИ ЗаписьНабора.ВидРасчета = ПланыВидовРасчета.УдалитьВзносы.ЕСВФОТГПХ Тогда
					ВидЕСВ = Перечисления.ВидыЕСВ.ПоДоговорамГПХ
				ИначеЕсли ЗаписьНабора.ВидРасчета = ПланыВидовРасчета.УдалитьВзносы.ЕСВДекретные ИЛИ ЗаписьНабора.ВидРасчета = ПланыВидовРасчета.УдалитьВзносы.ЕСВФОТДекретные Тогда
					ВидЕСВ = Перечисления.ВидыЕСВ.Декретные
				ИначеЕсли ЗаписьНабора.ВидРасчета = ПланыВидовРасчета.УдалитьВзносы.ЕСВМобилизованные Тогда
					ВидЕСВ = Перечисления.ВидыЕСВ.НачисленияМобилизованным
				Иначе 
					ВидЕСВ = Перечисления.ВидыЕСВ.НеУчитывается
				КонецЕсли;	   
				СтрокаТаблицы.ВидЕСВ = ВидЕСВ;
				
				СтрокаТаблицы.НалоговыйПериод = НачалоМесяца(ЗаписьНабора.ДатаНачала);
				СтрокаТаблицы.Период = НачалоМесяца(ЗаписьНабора.ПериодРегистрации);
				СтрокаТаблицы.Сумма = ЗаписьНабора.Результат;
				Организация = ЗаписьНабора.Организация;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаВзносовДляПоиска = ТаблицаВзносов.Скопировать();
		ТаблицаВзносовДляПоиска.Индексы.Добавить("ФизическоеЛицо");
		ТаблицаВзносовДляПоиска.Индексы.Добавить("ВидЕСВ");
		ТаблицаВзносовДляПоиска.Индексы.Добавить("СпособРасчета");
		Для Каждого СтрокаТаблицыВзносов Из ТаблицаВзносов Цикл
			Если СтрокаТаблицыВзносов.Сумма = 0 Тогда
				Продолжить;
			ИначеЕсли (Выборка.Регистратор.Дата < Дата(2016,6,1)) ИЛИ (Выборка.Регистратор.Дата >= Дата(2016,6,1) И СтрокаТаблицыВзносов.СпособРасчета = Перечисления.СпособыРасчетаВзносов.Взносы) Тогда 
				НайденнаяКатегорияЕСВ = Справочники.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка();
				
				Если СтрокаТаблицыВзносов.ВидЕСВ = Перечисления.ВидыЕСВ.ОсновнаяЗарплата ИЛИ СтрокаТаблицыВзносов.ВидЕСВ = Перечисления.ВидыЕСВ.ПоДоговорамГПХ Тогда
					
					Отбор = Новый Структура("ФизическоеЛицо,Организация");
					Отбор.Вставить("ФизическоеЛицо",СтрокаТаблицыВзносов.ФизическоеЛицо);
					Отбор.Вставить("Организация",СтрокаТаблицыВзносов.Организация);
					
					НайденныеСтроки = ТаблицаКатегорий.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество() > 0 Тогда
						НайденнаяКатегорияЕСВ = НайденныеСтроки[0].КатегорияЕСВ;	
					КонецЕсли;	
				ИначеЕсли СтрокаТаблицыВзносов.ВидЕСВ = Перечисления.ВидыЕСВ.НачисленияМобилизованным Тогда
					
					НайденнаяКатегорияЕСВ = Справочники.КатегорииЗастрахованныхЛицЕСВ.МобилизованныйРаботникКомпенсация
					
				ИначеЕсли СтрокаТаблицы.СпособРасчета = Перечисления.СпособыРасчетаВзносов.Взносы Тогда
					
					Отбор = Новый Структура("ФизическоеЛицо,ВидЕСВ,СпособРасчета");
					Отбор.Вставить("ФизическоеЛицо",СтрокаТаблицыВзносов.ФизическоеЛицо);
					Отбор.Вставить("ВидЕСВ",СтрокаТаблицыВзносов.ВидЕСВ);
					Отбор.Вставить("СпособРасчета",Перечисления.СпособыРасчетаВзносов.ВзносыФОТ);
					НайденныеСтроки = ТаблицаВзносовДляПоиска.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество() > 0 Тогда
						НайденнаяКатегорияЕСВ = УчетСтраховыхВзносов.ПолучитьКатегориюЕСВНеДляОсновнойЗарплаты(НайденныеСтроки[0].Налог,НайденныеСтроки[0].ВидРасчета);
					КонецЕсли;	
				Иначе
					НайденнаяКатегорияЕСВ = УчетСтраховыхВзносов.ПолучитьКатегориюЕСВНеДляОсновнойЗарплаты(ЗаписьНабора.Налог,ЗаписьНабора.ВидРасчета);
				КонецЕсли;	
			Иначе
				НайденнаяКатегорияЕСВ = Справочники.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка();
				НайденнаяКатегорияЕСВ = УчетСтраховыхвзносов.ПолучитьКатегориюЕСВ(СтрокаТаблицыВзносов.Налог);
			КонецЕсли;	
			СтрокаТаблицыВзносов.КатегорияЕСВ = НайденнаяКатегорияЕСВ;
		КонецЦикла;	
				
		Документ = Выборка.Регистратор.ПолучитьОбъект();
		УчетСтраховыхВзносов.ЗарегистрироватьДанныеЕСВ(Документ, Ложь, Организация, ТаблицаВзносов);

		
	КонецЦикла	

	
КонецПроцедуры

Функция ДанныеВзносыВФондыИНалоги()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзносыВФондыИНалоги.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрРасчета.УДАЛИТЬВзносыВФондыИНалоги КАК ВзносыВФондыИНалоги
	|ГДЕ
	|	ВзносыВФондыИНалоги.ВидРасчета.ЕСВ = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	Возврат Запрос.Выполнить().Выбрать()
	
КонецФункции	

Процедура КонвертироватьВзаиморасчетыПоВзносамВФонды(СоответствиеКонвертированныхОбъектов)

	Выборка = ДанныеВзаиморасчетовПоВзносамВФонды();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписей = РегистрыНакопления.ВзаиморасчетыПоВзносамВФонды.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если ЗначениеЗаполнено(ЗаписьНабора.ИНАГРО_Сотрудник) Тогда  // ИНАГРО ++
				ЗаписьНабора.ФизическоеЛицо = ЗаписьНабора.ИНАГРО_Сотрудник.ФизическоеЛицо;
				//ЗаписьНабора.УДАЛИТЬСотрудник = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать();
		
	КонецЦикла;

КонецПроцедуры	

Функция ДанныеВзаиморасчетовПоВзносамВФонды()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыПоВзносамВФонды.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыПоВзносамВФонды КАК ВзаиморасчетыПоВзносамВФонды
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	Возврат Запрос.Выполнить().Выбрать()
	
	
КонецФункции	

Процедура КонвертироватьПределыСтраховыхВзносов()
	Запрос = Новый Запрос; // ИНАГРО
	Запрос.Текст = "ВЫБРАТЬ
	|	ПределыСтраховыхВзносов.ИНАГРО_Налог КАК Налог
	|ИЗ
	|	РегистрСведений.ПределыСтраховыхВзносов КАК ПределыСтраховыхВзносов
	|ГДЕ
	|	ПределыСтраховыхВзносов.ИНАГРО_Налог.Предопределенный = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ПределыСтраховыхВзносов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИНАГРО_Налог.Установить(Выборка.Налог);
		НаборЗаписей.Записать(Истина);
	КонецЦикла;	
	
КонецПроцедуры	
Процедура КонвертироватьВзаиморасчетыПоНДФЛ(СоответствиеКонвертированныхОбъектов)
	
	Выборка = ДанныеВзаиморасчетовПоНДФЛ();
	ТаблицаНДФЛ = Новый ТаблицаЗначений;
	ТаблицаНДФЛ.Колонки.Добавить("Организация");
	ТаблицаНДФЛ.Колонки.Добавить("ФизическоеЛицо");
	ТаблицаНДФЛ.Колонки.Добавить("Период");
	ТаблицаНДФЛ.Колонки.Добавить("НалоговыйПериод");
	ТаблицаНДФЛ.Колонки.Добавить("ДоходНДФЛ");
	ТаблицаНДФЛ.Колонки.Добавить("Налог");
	ТаблицаНДФЛ.Колонки.Добавить("Доход");
	ТаблицаНДФЛ.Колонки.Добавить("Льгота");
	ТаблицаНДФЛ.Колонки.Добавить("КоличествоЛьгот");
	ТаблицаНДФЛ.Колонки.Добавить("ВидСтавки");
	ТаблицаНДФЛ.Колонки.Добавить("УвеличеннаяСтавка");
	ТаблицаНДФЛ.Колонки.Добавить("ДоходПолный");
	
	

	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписей = РегистрыНакопления.ВзаиморасчетыПоНДФЛ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		Организация = Справочники.Организации.ПустаяСсылка();
		ТаблицаНДФЛ.Очистить();
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			
			СтрокаТаблицы = ТаблицаНДФЛ.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЗаписьНабора);
			СтрокаТаблицы.ФизическоеЛицо = ?(ЗначениеЗаполнено(ЗаписьНабора.Контрагент), ЗаписьНабора.Контрагент.ФизическоеЛицо, Справочники.ФизическиеЛица.ПустаяСсылка());
			Организация = ЗаписьНабора.Организация;
		КонецЦикла;	
		
		Документ = Выборка.Регистратор.ПолучитьОбъект();
		УчетНДФЛ.ЗарегистрироватьДанныеВзаиморасчетовПоНДФЛ(Документ, Ложь, Организация, ТаблицаНДФЛ);
		
	КонецЦикла
	
КонецПроцедуры

Функция ДанныеВзаиморасчетовПоНДФЛ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыПоНДФЛ.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛ
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ВзаиморасчетыПоНДФЛ.Контрагент) = ТИП(Справочник.Сотрудники)
	|	И ВзаиморасчетыПоНДФЛ.ВидДвижения = &Приход
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	Запрос.УстановитьПараметр("Приход",ВидДвиженияНакопления.Приход);
	
	Возврат Запрос.Выполнить().Выбрать()
	
КонецФункции	

Процедура КонвертироватьЛьготыПоНДФЛСотрудников(СоответствиеКонвертированныхОбъектов)

	Выборка = ДанныеЛьготыПоНДФЛСотрудников();
	
	ТаблицаЛьгот = Новый ТаблицаЗначений;
	
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата");	
	ОписаниеТиповФизическоеЛицо = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	ОписаниеТиповОрганизация = Новый ОписаниеТипов("СправочникСсылка.Организации");
	ОписаниеТиповВидыЛьготПоНДФЛ = Новый ОписаниеТипов("СправочникСсылка.ВидыЛьготПоНДФЛ");
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	ТаблицаЛьгот.Колонки.Добавить("Период",ОписаниеТиповДата);
	ТаблицаЛьгот.Колонки.Добавить("ФизическоеЛицо",ОписаниеТиповФизическоеЛицо);
	ТаблицаЛьгот.Колонки.Добавить("Организация",ОписаниеТиповОрганизация);
	ТаблицаЛьгот.Колонки.Добавить("Льгота",ОписаниеТиповВидыЛьготПоНДФЛ);
	
	ТаблицаЛьгот.Индексы.Добавить("Период,ФизическоеЛицо,Организация,Льгота");
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписей = РегистрыСведений.ЛьготыПоНДФЛСотрудников.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		
		КоличествоЗаписейВНаборе = НаборЗаписей.Количество()-1;
		ИндексСтроки = КоличествоЗаписейВНаборе;
		Пока ИндексСтроки >= 0 Цикл
			ЗаписьНабора = НаборЗаписей[ИндексСтроки];
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Период", ЗаписьНабора.Период);
			СтруктураОтбора.Вставить("ФизическоеЛицо", ЗаписьНабора.УДАЛИТЬСотрудник.ФизическоеЛицо);
			СтруктураОтбора.Вставить("Организация",ЗаписьНабора.Организация);
			СтруктураОтбора.Вставить("Льгота",ЗаписьНабора.Льгота);
			
			МассивПоиска = ТаблицаЛьгот.НайтиСтроки(СтруктураОтбора);
			Если МассивПоиска.Количество() > 0 Тогда 
				НаборЗаписей.Удалить(ЗаписьНабора);	
			Иначе
				НоваяСтрокаТаблицыЛьгот = ТаблицаЛьгот.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицыЛьгот, ЗаписьНабора);
				НоваяСтрокаТаблицыЛьгот.ФизическоеЛицо = ЗаписьНабора.УДАЛИТЬСотрудник.ФизическоеЛицо;
				Если ЗначениеЗаполнено(ЗаписьНабора.УДАЛИТЬСотрудник) Тогда
					ЗаписьНабора.ФизическоеЛицо = ЗаписьНабора.УДАЛИТЬСотрудник.ФизическоеЛицо;
					ЗаписьНабора.УДАЛИТЬСотрудник = Справочники.Сотрудники.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
			ИндексСтроки = ИндексСтроки - 1;
		КонецЦикла;
		НаборЗаписей.Записать();
		
	КонецЦикла;

КонецПроцедуры	

Функция ДанныеЛьготыПоНДФЛСотрудников()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛьготыПоНДФЛСотрудников.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.ЛьготыПоНДФЛСотрудников КАК ЛьготыПоНДФЛСотрудников
	|
	|ГДЕ
	|	НЕ ЛьготыПоНДФЛСотрудников.Регистратор ССЫЛКА Документ.УдалитьУвольнениеИзОрганизаций
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	Возврат Запрос.Выполнить().Выбрать()
	
	
КонецФункции	

Функция ДанныеРНВзаиморасчетыПоНДФЛ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыПоНДФЛ.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛ
	//|ГДЕ    //ИНАГРО
	//|	ВзаиморасчетыПоНДФЛ.Контрагент ССЫЛКА Справочник.Сотрудники
	//|	ИЛИ ВзаиморасчетыПоНДФЛ.Контрагент ССЫЛКА Справочник.ФизическиеЛица
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	Возврат Запрос.Выполнить().Выбрать()
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ДОКУМЕНТЫ

Функция КонвертироватьДанныеДокумента(ДанныеДокумента, СоответствиеКонвертированныхОбъектов)
	
	ДокументОбъект = ДокументСоответсвующийКонвертируемому(ДанныеДокумента);
		
	ДокументОбъект.ОбменДанными.Загрузка = Истина;	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьБизнесЛогикуПриЗаписи", Истина);
	ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаписатьНаборыЗначенийДоступа", Истина);
	Если ТипЗнч(ДокументОбъект.Ссылка) <> ТипЗнч(ДанныеДокумента.Ссылка) Тогда 
		ЗаполнитьРеквизитыНовогоДокумента(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов);
	КонецЕсли;	
	
	НачатьТранзакцию();
	ПередЗаписьюДокумента(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов);
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ВставитьСсылкуНаКонвертированныйОбъект(ДанныеДокумента.Ссылка, ДокументОбъект.Ссылка, СоответствиеКонвертированныхОбъектов);
	
	//ПослеЗаписиДокумента(ДанныеДокумента, ДокументОбъект);
	
	ЗафиксироватьТранзакцию();
	
	Возврат ДокументОбъект.Ссылка;
КонецФункции	

Функция КонвертироватьДанныеДокументаПараметрыИндексации(ДанныеДокумента, СоответствиеКонвертированныхОбъектов)
	
	ДокументОбъект = Документы.ИзменениеПараметровРасчетаИндексации.СоздатьДокумент();
		
	ДокументОбъект.ОбменДанными.Загрузка = Истина;	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьБизнесЛогикуПриЗаписи", Истина);
	ДокументОбъект.ДополнительныеСвойства.Вставить("ЗаписатьНаборыЗначенийДоступа", Истина);
	Если ТипЗнч(ДокументОбъект.Ссылка) <> ТипЗнч(ДанныеДокумента.Ссылка) Тогда 
		ЗаполнитьРеквизитыНовогоДокументаПараметрыИндексации(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов);
	КонецЕсли;	
	
	НачатьТранзакцию();
	ПередЗаписьюДокумента(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов);
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	
	ВставитьСсылкуНаКонвертированныйОбъект(ДанныеДокумента.Ссылка, ДокументОбъект.Ссылка, СоответствиеКонвертированныхОбъектов);
	
	ЗафиксироватьТранзакцию();
	
	Возврат ДокументОбъект.Ссылка;
КонецФункции

Процедура ЗаполнитьРеквизитыНовогоДокументаПараметрыИндексации(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов)
	СоотвествиеРеквизитов = СоответствиеРеквизитовДокументаПараметрыИндексации();
	
	Для Каждого Реквизит Из СоотвествиеРеквизитов Цикл
		Если ТипЗнч(Реквизит.Значение) = Тип("Структура") Тогда 
			ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект[Реквизит.Ключ], ДанныеДокумента[Реквизит.Значение.ИмяТЧ], Реквизит.Значение, СоответствиеКонвертированныхОбъектов); 		
		Иначе
			ДокументОбъект[Реквизит.Ключ] = КонвертироватьДанные(ДанныеДокумента[Реквизит.Значение], СоответствиеКонвертированныхОбъектов);
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

Функция ДокументСоответсвующийКонвертируемому(ДанныеДокумента)
	Если ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьПриемНаРаботуВОрганизацию") Тогда
		Возврат Документы.ПриемНаРаботу.СоздатьДокумент();
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьКадровоеПеремещениеОрганизаций") Тогда
		Возврат Документы.КадровыйПеревод.СоздатьДокумент();
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций") Тогда
		Возврат Документы.КадровыйПеревод.СоздатьДокумент();
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка)  = Тип("ДокументСсылка.УдалитьУвольнениеИзОрганизаций") Тогда
		Возврат Документы.Увольнение.СоздатьДокумент();
	Иначе
		Возврат ДанныеДокумента.Ссылка.ПолучитьОбъект();
	КонецЕсли;	
		
КонецФункции	

Процедура ПередЗаписьюДокумента(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов)
	Если ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьПриемНаРаботуВОрганизацию") 
		Или ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьКадровоеПеремещениеОрганизаций") 
		Или ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьУвольнениеИзОрганизаций") 
		Или ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций") 
		Тогда 
		
		ПередЗаписьюКадровогоДокумента(ДокументОбъект, ДанныеДокумента);
		
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Номер) Тогда
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыНовогоДокумента(ДокументОбъект, ДанныеДокумента, СоответствиеКонвертированныхОбъектов)
	СоотвествиеРеквизитов = СоответствиеРеквизитовКонвертируемогоДокумента(ДанныеДокумента);
	
	Для Каждого Реквизит Из СоотвествиеРеквизитов Цикл
		Если ТипЗнч(Реквизит.Значение) = Тип("Структура") Тогда 
			ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект[Реквизит.Ключ], ДанныеДокумента[Реквизит.Значение.ИмяТЧ], Реквизит.Значение, СоответствиеКонвертированныхОбъектов); 		
		Иначе
			ДокументОбъект[Реквизит.Ключ] = КонвертироватьДанные(ДанныеДокумента[Реквизит.Значение], СоответствиеКонвертированныхОбъектов);
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

Процедура ЗаполнитьТабличнуюЧастьДокумента(ТЧПриемник, ДанныеИсточник, СоответствиеРеквизитовТЧ, СоответствиеКонвертированныхОбъектов)
	Если ТипЗнч(ДанныеИсточник) = Тип("РезультатЗапроса") Тогда
		ТЧИсточник = ДанныеИсточник.Выгрузить();
	Иначе 
		ТЧИсточник = ДанныеИсточник;
	КонецЕсли;	
	
	ТЧПриемник.Очистить();
	Для Каждого СтрокаТЧИсточник Из ТЧИсточник Цикл
		СтрокаТЧПриемник = ТЧПриемник.Добавить();
		Для Каждого РеквизитТЧ Из СоответствиеРеквизитовТЧ Цикл
			Если РеквизитТЧ.Ключ <> "ИмяТЧ" Тогда
				СтрокаТЧПриемник[РеквизитТЧ.Ключ] = КонвертироватьДанные(СтрокаТЧИсточник[РеквизитТЧ.Значение], СоответствиеКонвертированныхОбъектов);		
			КонецЕсли;	                            
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры	

Функция СоответствиеРеквизитовКонвертируемогоДокумента(ДанныеДокумента)
	Если ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьПриемНаРаботуВОрганизацию") Тогда
		Возврат СоответствиеРеквизитовДокументаПриемНаработу();
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьКадровоеПеремещениеОрганизаций") Тогда
		Возврат СоответствиеРеквизитовДокументаКадровоеПеремещение();	
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций") Тогда
		Возврат СоответствиеРеквизитовДокументавВводПлановыхНачислений();
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьУвольнениеИзОрганизаций") Тогда
		Возврат СоответствиеРеквизитовДокументаУвольнение();
	Иначе	
		Возврат Новый Структура;
	КонецЕсли;	
КонецФункции	

Функция ВписатьДанныеВыборкиПоДокументуВСтруткуры(Выборка, Колонки)
	Структура = Новый Структура;
	
	Для Каждого Колонка Из Колонки Цикл
		Структура.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
	КонецЦикла;	
	
	Возврат Структура;	
КонецФункции

Функция ТаблицаЗначенийПоДаннымВыборки(Выборка, СсылкаНаВладельцаТЧ, Колонки)
	Таблица = Новый ТаблицаЗначений;
		
	Для Каждого Колонка Из Колонки Цикл
		Таблица.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;	
	
	Выборка.Сбросить();
	Если Выборка.НайтиСледующий(Новый Структура("Ссылка", СсылкаНаВладельцаТЧ)) Тогда
		Выборка.СледующийПоЗначениюПоля("Ссылка");
		
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			Пока Выборка.Следующий() Цикл
				СтрокаТаблицы = Таблица.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;	

	Возврат Таблица;
	
КонецФункции

Функция СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов)
	СоответствиеКонвертируемыхДокументовНовым = Новый Соответствие;
	
	Для Каждого Документ Из СписокДокументов Цикл
		СсылкаНаКонвертированныйОбъект = ПолучитьСсылкуНаКонвертированныйОбъект(Документ, СоответствиеКонвертированныхОбъектов);
		
		Если ЗначениеЗаполнено(СсылкаНаКонвертированныйОбъект) Тогда
			СоответствиеКонвертируемыхДокументовНовым.Вставить(Документ, СсылкаНаКонвертированныйОбъект);
		КонецЕсли;		
	КонецЦикла;	
	
	Возврат СоответствиеКонвертируемыхДокументовНовым;
	
КонецФункции	

Функция СоответствиеКонвертированнымДокументовПоДатеНомеру(СписокДокументов, ИмяИсточникаДанных, ИмяПриемникаДанных, СоответствиеКонвертированныхОбъектов = Неопределено)
	СоответствиеКонвертируемыхДокументовНовым = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсточникДанных.Ссылка КАК КонвертируемыйДокумент,
	|	ПриемникДанных.Ссылка КАК КонвертированныйДокумент
	|ИЗ
	|	#ИсточникДанных КАК ИсточникДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ #ПриемникДанных КАК ПриемникДанных
	|		ПО ИсточникДанных.Дата = ПриемникДанных.Дата
	|			И (ИсточникДанных.Ссылка В (&СписокДокументов))
	|			И (ПОДСТРОКА(ИсточникДанных.Номер, 1, 100) = ПОДСТРОКА(ПриемникДанных.Номер, 1, 100))";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ИсточникДанных", ИмяИсточникаДанных);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ПриемникДанных", ИмяПриемникаДанных);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		СоответствиеКонвертируемыхДокументовНовым.Вставить(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент);			
	КонецЦикла;	
	
	Если СоответствиеКонвертированныхОбъектов <> Неопределено Тогда
		ВставитьСсылкуНаКонвертированныйОбъект(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент, СоответствиеКонвертированныхОбъектов);
	КонецЕсли;	
	
	Возврат СоответствиеКонвертируемыхДокументовНовым;
	
КонецФункции	

//////////////////////////////////////////////////////////////////////////////////////////////
// НАЧИСЛЕНИЕ ЗАРПЛАТЫ

Процедура КонвертироватьДокументыНачислениеЗарплаты(СоответствиеКонвертированныхОбъектов = Неопределено, ТаблицаКатегорий)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	НачислениеЗарплаты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
	|ГДЕ
	|	НачислениеЗарплаты.ПометкаУдаления = ЛОЖЬ
	|	И НачислениеЗарплаты.ПредварительныйРасчет = ЛОЖЬ
	|
	|";

	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		НачатьТранзакцию();
		
		РегистраторОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаВзносовФОТ Из РегистраторОбъект.ЭтотОбъект.ВзносыФОТ Цикл
			СтрокаВзносовФОТ.ФизическоеЛицо = ?(ЗначениеЗаполнено(СтрокаВзносовФОТ.УдалитьСотрудник), СтрокаВзносовФОТ.УдалитьСотрудник.ФизическоеЛицо, Справочники.ФизическиеЛица.ПустаяСсылка());
			Если СтрокаВзносовФОТ.ВидРасчета = ПланыВидовРасчета.УДАЛИТЬВзносы.ЕСВ ИЛИ СтрокаВзносовФОТ.ВидРасчета = ПланыВидовРасчета.УдалитьВзносы.ЕСВФОТ Тогда 
				ВидЕСВ = Перечисления.ВидыЕСВ.ОсновнаяЗарплата
			ИначеЕсли СтрокаВзносовФОТ.ВидРасчета =ПланыВидовРасчета.УдалитьВзносы.ЕСВБольничные ИЛИ СтрокаВзносовФОТ.ВидРасчета = ПланыВидовРасчета.УдалитьВзносы.ЕСВФОТБольничные Тогда
				ВидЕСВ = Перечисления.ВидыЕСВ.Больничные
			ИначеЕсли СтрокаВзносовФОТ.ВидРасчета = ПланыВидовРасчета.УдалитьВзносы.ЕСВГПХ ИЛИ СтрокаВзносовФОТ.ВидРасчета = ПланыВидовРасчета.УдалитьВзносы.ЕСВФОТГПХ Тогда
				ВидЕСВ = Перечисления.ВидыЕСВ.ПоДоговорамГПХ
			ИначеЕсли СтрокаВзносовФОТ.ВидРасчета = ПланыВидовРасчета.УдалитьВзносы.ЕСВДекретные ИЛИ СтрокаВзносовФОТ.ВидРасчета = ПланыВидовРасчета.УдалитьВзносы.ЕСВФОТДекретные Тогда
				ВидЕСВ = Перечисления.ВидыЕСВ.Декретные
			Иначе 
				ВидЕСВ = Перечисления.ВидыЕСВ.НеУчитывается
			КонецЕсли;	   
			СтрокаВзносовФОТ.ВидЕСВ = ВидЕСВ; 
			
			НайденнаяКатегорияЕСВ = Справочники.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка();
			
			Если Выборка.Ссылка.Дата < Дата(2016,6,1) Тогда 
				Если СтрокаВзносовФОТ.ВидЕСВ = Перечисления.ВидыЕСВ.ОсновнаяЗарплата ИЛИ СтрокаВзносовФОТ.ВидЕСВ = Перечисления.ВидыЕСВ.ПоДоговорамГПХ Тогда
				
					Отбор = Новый Структура("ФизическоеЛицо,Организация");
					Отбор.Вставить("ФизическоеЛицо",СтрокаВзносовФОТ.ФизическоеЛицо);
					Отбор.Вставить("Организация",Выборка.Ссылка.Организация);
			
					НайденныеСтроки = ТаблицаКатегорий.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество() > 0 Тогда
						НайденнаяКатегорияЕСВ = НайденныеСтроки[0].КатегорияЕСВ;	
					КонецЕсли;	
				
				Иначе
				
					НайденнаяКатегорияЕСВ = УчетСтраховыхВзносов.ПолучитьКатегориюЕСВНеДляОсновнойЗарплаты(СтрокаВзносовФОТ.Налог,СтрокаВзносовФОТ.ВидРасчета);
				КонецЕсли;	
			Иначе
				НайденнаяКатегорияЕСВ = УчетСтраховыхвзносов.ПолучитьКатегориюЕСВ(СтрокаВзносовФОТ.Налог);
			КонецЕсли;	
			
			СтрокаВзносовФОТ.КатегорияЕСВ = НайденнаяКатегорияЕСВ;
			
		КонецЦикла;
		
		Для Каждого СтрокаВзносов Из РегистраторОбъект.ЭтотОбъект.Взносы Цикл
			СтрокаВзносов.ФизическоеЛицо = ?(ЗначениеЗаполнено(СтрокаВзносов.УдалитьСотрудник), СтрокаВзносов.УдалитьСотрудник.ФизическоеЛицо, Справочники.ФизическиеЛица.ПустаяСсылка());
			Если СтрокаВзносов.УдалитьВидРасчета = ПланыВидовРасчета.УДАЛИТЬВзносы.ЕСВ ИЛИ СтрокаВзносов.УдалитьВидРасчета = ПланыВидовРасчета.УдалитьВзносы.ЕСВФОТ Тогда 
				ВидЕСВ = Перечисления.ВидыЕСВ.ОсновнаяЗарплата
			ИначеЕсли СтрокаВзносов.УдалитьВидРасчета =ПланыВидовРасчета.УдалитьВзносы.ЕСВБольничные ИЛИ СтрокаВзносов.УдалитьВидРасчета = ПланыВидовРасчета.УдалитьВзносы.ЕСВФОТБольничные Тогда
				ВидЕСВ = Перечисления.ВидыЕСВ.Больничные
			ИначеЕсли СтрокаВзносов.УдалитьВидРасчета = ПланыВидовРасчета.УдалитьВзносы.ЕСВГПХ ИЛИ СтрокаВзносов.УдалитьВидРасчета = ПланыВидовРасчета.УдалитьВзносы.ЕСВФОТГПХ Тогда
				ВидЕСВ = Перечисления.ВидыЕСВ.ПоДоговорамГПХ
			ИначеЕсли СтрокаВзносов.УдалитьВидРасчета = ПланыВидовРасчета.УдалитьВзносы.ЕСВДекретные ИЛИ СтрокаВзносов.УдалитьВидРасчета = ПланыВидовРасчета.УдалитьВзносы.ЕСВФОТДекретные Тогда
				ВидЕСВ = Перечисления.ВидыЕСВ.Декретные
			Иначе 
				ВидЕСВ = Перечисления.ВидыЕСВ.НеУчитывается
			КонецЕсли;	   
			СтрокаВзносов.ВидЕСВ = ВидЕСВ; 
			
			НайденнаяКатегорияЕСВ = Справочники.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка();
			Если СтрокаВзносов.ВидЕСВ = Перечисления.ВидыЕСВ.ОсновнаяЗарплата ИЛИ СтрокаВзносов.ВидЕСВ = Перечисления.ВидыЕСВ.ПоДоговорамГПХ Тогда
				
				Отбор = Новый Структура("ФизическоеЛицо,Организация");
				Отбор.Вставить("ФизическоеЛицо",СтрокаВзносов.ФизическоеЛицо);
				Отбор.Вставить("Организация",Выборка.Ссылка.Организация);
			
				НайденныеСтроки = ТаблицаКатегорий.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НайденнаяКатегорияЕСВ = НайденныеСтроки[0].КатегорияЕСВ;	
				КонецЕсли;	
				
			Иначе
				
				Отбор = Новый Структура("ФизическоеЛицо,ВидЕСВ");
				Отбор.Вставить("ФизическоеЛицо",СтрокаВзносов.ФизическоеЛицо);
				Отбор.Вставить("ВидЕСВ",СтрокаВзносов.ВидЕСВ);
				
				НайденныеСтроки = РегистраторОбъект.ЭтотОбъект.ВзносыФОТ.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НайденнаяКатегорияЕСВ = УчетСтраховыхВзносов.ПолучитьКатегориюЕСВНеДляОсновнойЗарплаты(НайденныеСтроки[0].Налог,НайденныеСтроки[0].ВидРасчета);
				КонецЕсли;	
			КонецЕсли;	
			СтрокаВзносов.КатегорияЕСВ = НайденнаяКатегорияЕСВ;
		КонецЦикла;
		
		Для Каждого СтрокаНДФЛ Из РегистраторОбъект.ЭтотОбъект.НДФЛ Цикл
			СтрокаНДФЛ.ФизическоеЛицо = ?(ЗначениеЗаполнено(СтрокаНДФЛ.УдалитьСотрудник), СтрокаНДФЛ.УдалитьСотрудник.ФизическоеЛицо, Справочники.ФизическиеЛица.ПустаяСсылка());
		КонецЦикла;
		
		
		Если РегистраторОбъект.Проведен Тогда
			РегистраторОбъект.РучнаяКорректировка = Истина;
		КонецЕсли;	
		
		РегистраторОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;	
	
КонецПроцедуры	

/////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////
// ПРИЕМ НА РАБОТУ

Функция СписокДокументовПриемНаРаботу()
	СписокДокументов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьПриемНаРаботуВОрганизацию.Ссылка
	|ИЗ
	|	Документ.УдалитьПриемНаРаботуВОрганизацию КАК УдалитьПриемНаРаботуВОрганизацию
	|ГДЕ
	|	НЕ УдалитьПриемНаРаботуВОрганизацию.ПометкаУдаления
	|	И УдалитьПриемНаРаботуВОрганизацию.Проведен = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокДокументов.Добавить(Выборка.Ссылка);		
	КонецЦикла;	
	
	Возврат СписокДокументов;
КонецФункции	

Функция КонвертироватьДокументыПриемНаРаботу(СписокДокументов, СоответствиеКонвертированныхОбъектов)
	НеконвертированныеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокДокументов);
	
	Результат = Новый Соответствие;
			
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов);
	
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка КАК КонвертируемыйДокумент,
	|	ПриемНаРаботу.Ссылка КАК КонвертированныйДокумент
	|ИЗ
	|	Документ.УдалитьПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|		ПО УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник = ПриемНаРаботу.Сотрудник
	|			И УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема = ПриемНаРаботу.ДатаПриема
	|			И УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата = ПриемНаРаботу.Дата
	|			И УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Проведен = ПриемНаРаботу.Проведен
	|			И (УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка В (&СписокДокументов))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, Выборка.КонвертируемыйДокумент);
	КонецЦикла;	
	
    Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Дата2015", Дата(2015,12,31));
	Запрос.УстановитьПараметр("Дата2016", Дата(2016,06,1));
	СоответствиеКатегорий = Новый ТаблицаЗначений;
	ОписаниеТиповНалог = Новый ОписаниеТипов("СправочникСсылка.Налоги");
	ОписаниеТиповКатегория = Новый ОписаниеТипов("СправочникСсылка.КатегорииЗастрахованныхЛицЕСВ");
	
	СоответствиеКатегорий.Колонки.Добавить("Налог", ОписаниеТиповНалог);
	СоответствиеКатегорий.Колонки.Добавить("Категория", ОписаниеТиповКатегория);
	
	НоваяСтрокаСоответствия = СоответствиеКатегорий.Добавить();
	НоваяСтрокаСоответствия.Налог = Справочники.Налоги.ЕСВФОТБюджетники;
	НоваяСтрокаСоответствия.Категория = Справочники.КатегорииЗастрахованныхЛицЕСВ.НаемныйРаботникБюджет;
	
	НоваяСтрокаСоответствия = СоответствиеКатегорий.Добавить();
	НоваяСтрокаСоответствия.Налог = Справочники.Налоги.ЕСВФОТСудостр;
	НоваяСтрокаСоответствия.Категория = Справочники.КатегорииЗастрахованныхЛицЕСВ.НаемныйРаботникСудостроитель;
	
	НоваяСтрокаСоответствия = СоответствиеКатегорий.Добавить();
	НоваяСтрокаСоответствия.Налог = Справочники.Налоги.ЕСВФОТРаботникиСР;
	НоваяСтрокаСоответствия.Категория = Справочники.КатегорииЗастрахованныхЛицЕСВ.НаемныйРаботникНаСпециальныхРаботах;
	
	НоваяСтрокаСоответствия = СоответствиеКатегорий.Добавить();
	НоваяСтрокаСоответствия.Налог = Справочники.Налоги.ЕСВФОТГПХСудостр;
	НоваяСтрокаСоответствия.Категория = Справочники.КатегорииЗастрахованныхЛицЕСВ.НаемныйРаботникГПХСудостроитель;
	
	Запрос.УстановитьПараметр("СоответствиеКатегорий", СоответствиеКатегорий);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.ПодразделениеОрганизации КАК Подразделение,
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Должность,
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаПриема,
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Дата,
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Проведен,
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Номер,
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Ответственный,
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация,
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник.ИНАГРО_ВидЗанятости КАК ВидЗанятости, //ИНАГРО
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка,
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.ПринятНаНовоеРабочееМесто,
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.ДатаСозданияРабочегоМеста
	|ИЗ
	|	Документ.УдалитьПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации
	|ГДЕ
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка В(&СписокДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка,
	|	УдалитьПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьПриемНаРаботуВОрганизациюОсновныеНачисления.Ссылка КАК Ссылка,
	|	УдалитьПриемНаРаботуВОрганизациюОсновныеНачисления.Сотрудник КАК Сотрудник,
	|	УдалитьПриемНаРаботуВОрганизациюОсновныеНачисления.ВидРасчета КАК Начисление,
	|	УдалитьПриемНаРаботуВОрганизациюОсновныеНачисления.Размер
	|ИЗ
	|	Документ.УдалитьПриемНаРаботуВОрганизацию.ОсновныеНачисления КАК УдалитьПриемНаРаботуВОрганизациюОсновныеНачисления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник,
	|	УдалитьПриемНаРаботуВОрганизациюОсновныеНачисления.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьПриемНаРаботуВОрганизациюУдержания.Ссылка КАК Ссылка,
	|	УдалитьПриемНаРаботуВОрганизациюУдержания.Сотрудник КАК Сотрудник,
	|	УдалитьПриемНаРаботуВОрганизациюУдержания.ВидРасчета КАК Удержание,
	|	УдалитьПриемНаРаботуВОрганизациюУдержания.Размер
	|ИЗ
	|	Документ.УдалитьПриемНаРаботуВОрганизацию.Удержания КАК УдалитьПриемНаРаботуВОрганизациюУдержания
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник,
	|	УдалитьПриемНаРаботуВОрганизациюУдержания.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеКатегорий.Налог КАК Налог,
	|   СоответствиеКатегорий.Категория КАК Категория
	|ПОМЕСТИТЬ ВТСоответствиеКатегорий 
	|ИЗ &СоответствиеКатегорий КАК СоответствиеКатегорий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыКатегорийЕСВСрезПоследних.Категория КАК Категория,
	|	ПараметрыКатегорийЕСВСрезПоследних.ЕСВ КАК Взнос,
	|	ПараметрыКатегорийЕСВСрезПоследних.ЕСВФОТ КАК ВзносФОТ
	|ПОМЕСТИТЬ ВТПараметрыКатегорий2015
	|ИЗ
	|	РегистрСведений.ПараметрыКатегорийЕСВ.СрезПоследних(
	|			&Дата2015,
	|			(Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ОсновнаяЗарплата)
	|				ИЛИ Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ПоДоговорамГПХ)
	|				ИЛИ Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.НачисленияМобилизованным))
	|				И Категория <> ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.НаемныйРаботникВИностранныхОрганизациях)
	|				И Категория <> ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.НаемныйРаботникЗаПределамиУкраины)
	|) КАК ПараметрыКатегорийЕСВСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыКатегорийЕСВСрезПоследних.Категория КАК Категория,
	|	ПараметрыКатегорийЕСВСрезПоследних.ЕСВ КАК Взнос,
	|	ВЫБОР КОГДА ЕСТЬNULL(СоответствиеКатегорий.Категория, ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)
	|		ТОГДА 
	|			СоответствиеКатегорий.Налог 
	|		ИНАЧЕ 
	|			ПараметрыКатегорийЕСВСрезПоследних.ЕСВФОТ 
	|	КОНЕЦ КАК ВзносФОТ
	|ПОМЕСТИТЬ ВТПараметрыКатегорий2016
	|ИЗ
	|	РегистрСведений.ПараметрыКатегорийЕСВ.СрезПоследних(
	|			&Дата2016,
	|			(Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ОсновнаяЗарплата)
	|				ИЛИ Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ПоДоговорамГПХ)
	|				ИЛИ Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.НачисленияМобилизованным))
	|) КАК ПараметрыКатегорийЕСВСрезПоследних
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВТСоответствиеКатегорий КАК СоответствиеКатегорий
	|ПО 
	|	ПараметрыКатегорийЕСВСрезПоследних.Категория = СоответствиеКатегорий.Категория
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьПриемНаРаботуВОрганизациюВзносы.Ссылка КАК Ссылка,
	|	УдалитьПриемНаРаботуВОрганизациюВзносы.Сотрудник КАК Сотрудник,
	|	УдалитьПриемНаРаботуВОрганизациюВзносы.Налог КАК Налог
	|ПОМЕСТИТЬ ВТВзносы
	|ИЗ
	|	Документ.УдалитьПриемНаРаботуВОрганизацию.Взносы КАК УдалитьПриемНаРаботуВОрганизациюВзносы
	|ГДЕ
	|	УдалитьПриемНаРаботуВОрганизациюВзносы.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|	И УдалитьПриемНаРаботуВОрганизациюВзносы.Налог В
	|			(ВЫБРАТЬ
	|				ПараметрыКатегорий.Взнос
	|			ИЗ
	|				ВТПараметрыКатегорий2015 КАК ПараметрыКатегорий)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьПриемНаРаботуВОрганизациюВзносыФОТ.Ссылка КАК Ссылка,
	|	УдалитьПриемНаРаботуВОрганизациюВзносыФОТ.Сотрудник КАК Сотрудник,
	|	УдалитьПриемНаРаботуВОрганизациюВзносыФОТ.Налог КАК Налог
	|ПОМЕСТИТЬ ВТВзносыФОТ
	|ИЗ
	|	Документ.УдалитьПриемНаРаботуВОрганизацию.ВзносыФОТ КАК УдалитьПриемНаРаботуВОрганизациюВзносыФОТ
	|ГДЕ
	|	УдалитьПриемНаРаботуВОрганизациюВзносыФОТ.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|	И УдалитьПриемНаРаботуВОрганизациюВзносыФОТ.Налог В
	|			(ВЫБРАТЬ
	|				ПараметрыКатегорий.ВзносФОТ
	|			ИЗ
	|				ВТПараметрыКатегорий2016 КАК ПараметрыКатегорий
	| 			ОБЪЕДИНИТЬ  
	|			ВЫБРАТЬ
	|				ПараметрыКатегорий.ВзносФОТ
	|			ИЗ
	|				ВТПараметрыКатегорий2015 КАК ПараметрыКатегорий)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзносыФОТ.Ссылка КАК Ссылка,
	|	ВзносыФОТ.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Взносы.Налог, ЗНАЧЕНИЕ(Справочник.Налоги.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Налоги.ПустаяСсылка)
	|				И ЕСТЬNULL(ПараметрыКатегорий2016.Категория, ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)
	|			ТОГДА ПараметрыКатегорий2016.Категория
	|		ИНАЧЕ ПараметрыКатегорий2015.Категория
	|	КОНЕЦ КАК КатегорияЕСВ
	|ИЗ
	|	ВТВзносыФОТ КАК ВзносыФОТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВзносы КАК Взносы
	|		ПО ВзносыФОТ.Ссылка = Взносы.Ссылка
	|			И ВзносыФОТ.Сотрудник = Взносы.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыКатегорий2015 КАК ПараметрыКатегорий2015
	|		ПО ВзносыФОТ.Налог = ПараметрыКатегорий2015.ВзносФОТ
	|			И (Взносы.Налог = ПараметрыКатегорий2015.Взнос)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыКатегорий2016 КАК ПараметрыКатегорий2016
	|		ПО (ВЫБОР
	|				КОГДА ЕСТЬNULL(Взносы.Налог, ЗНАЧЕНИЕ(Справочник.Налоги.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Налоги.ПустаяСсылка)
	|					ТОГДА ВзносыФОТ.Налог = ПараметрыКатегорий2016.ВзносФОТ
	|			КОНЕЦ)
	|";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам 	= РезультатыЗапроса[0].Выбрать();
	ВыборкаПоНачислениям	= РезультатыЗапроса[1].Выбрать(); 
	ВыборкаПоУдержаниям 	= РезультатыЗапроса[2].Выбрать();
	ВыборкаПоКатегориям 	= РезультатыЗапроса[8].Выбрать();
		
	Пока ВыборкаПоДокументам.СледующийПоЗначениюПоля("Ссылка") Цикл
		НачатьТранзакцию();
		Пока ВыборкаПоДокументам.Следующий() Цикл
			ДанныеВыгружаемогоДокумента = СтруктураДанныхДокументаПриемНаРаботу();
			
			ДанныеВыгружаемогоДокумента.Организация = ВыборкаПоДокументам.Организация;
			ДанныеВыгружаемогоДокумента.Сотрудник = ВыборкаПоДокументам.Сотрудник;
			ДанныеВыгружаемогоДокумента.Подразделение = ВыборкаПоДокументам.Подразделение;
			ДанныеВыгружаемогоДокумента.Должность = ВыборкаПоДокументам.Должность;
			ДанныеВыгружаемогоДокумента.ДатаПриема = ВыборкаПоДокументам.ДатаПриема;
			ДанныеВыгружаемогоДокумента.ВидЗанятости = ВыборкаПоДокументам.ВидЗанятости;
			ДанныеВыгружаемогоДокумента.Ответственный = ВыборкаПоДокументам.Ответственный;
			ДанныеВыгружаемогоДокумента.Дата = ВыборкаПоДокументам.Дата;
			ДанныеВыгружаемогоДокумента.Номер = ВыборкаПоДокументам.Номер;
			ДанныеВыгружаемогоДокумента.Проведен = ВыборкаПоДокументам.Проведен;
			ДанныеВыгружаемогоДокумента.ФизическоеЛицо = ВыборкаПоДокументам.ФизическоеЛицо;
			ДанныеВыгружаемогоДокумента.Ссылка = ВыборкаПоДокументам.Ссылка;
			ДанныеВыгружаемогоДокумента.ПринятНаНовоеРабочееМесто = ВыборкаПоДокументам.ПринятНаНовоеРабочееМесто;
			ДанныеВыгружаемогоДокумента.ДатаСозданияРабочегоМеста = ВыборкаПоДокументам.ДатаСозданияРабочегоМеста;
			
			УстановитьКатегориюЕСВ(ДанныеВыгружаемогоДокумента,ВыборкаПоКатегориям);
			
			ВписатьНачисленияВДанныеКадровогоДокумента(ДанныеВыгружаемогоДокумента, ВыборкаПоНачислениям);
			ВписатьУдержанияВДанныеКадровогоДокумента(ДанныеВыгружаемогоДокумента, ВыборкаПоУдержаниям);
			
			КонвертированныйДокумент = КонвертироватьДанныеДокумента(ДанныеВыгружаемогоДокумента, СоответствиеКонвертированныхОбъектов);
			
			Результат.Вставить(ВыборкаПоДокументам.Ссылка, КонвертированныйДокумент);
			
			КонвертироватьДвиженияПриемаНаРаботу(ДанныеВыгружаемогоДокумента.Ссылка, ДанныеВыгружаемогоДокумента.Сотрудник, СоответствиеКонвертированныхОбъектов, КонвертированныйДокумент.ПолучитьОбъект());
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции	

Процедура ВписатьНачисленияВДанныеКадровогоДокумента(ДанныеВыгружаемогоДокумента, ВыборкаПоНачислениям)
	ВыборкаПоНачислениям.Сбросить();
	
	СтруктураПоиска = Новый Структура("Ссылка, Сотрудник", ДанныеВыгружаемогоДокумента.Ссылка, ДанныеВыгружаемогоДокумента.Сотрудник);	
	
	Если ВыборкаПоНачислениям.НайтиСледующий(СтруктураПоиска) Тогда
		ВыборкаПоНачислениям.СледующийПоЗначениюПоля("Ссылка");
		ВыборкаПоНачислениям.СледующийПоЗначениюПоля("Сотрудник");
		
		Пока ВыборкаПоНачислениям.Следующий() Цикл
			СтрокаНачислений = ДанныеВыгружаемогоДокумента.Начисления.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаНачислений, ВыборкаПоНачислениям);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ВписатьУдержанияВДанныеКадровогоДокумента(ДанныеВыгружаемогоДокумента, ВыборкаПоУдержаниям)
	ВыборкаПоУдержаниям.Сбросить();
	
	СтруктураПоиска = Новый Структура("Ссылка, Сотрудник", ДанныеВыгружаемогоДокумента.Ссылка, ДанныеВыгружаемогоДокумента.Сотрудник);	
	
	Если ВыборкаПоУдержаниям.НайтиСледующий(СтруктураПоиска) Тогда
		ВыборкаПоУдержаниям.СледующийПоЗначениюПоля("Ссылка");
		ВыборкаПоУдержаниям.СледующийПоЗначениюПоля("Сотрудник");
		
		Пока ВыборкаПоУдержаниям.Следующий() Цикл
			СтрокаУдержаний = ДанныеВыгружаемогоДокумента.Удержания.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаУдержаний, ВыборкаПоУдержаниям);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьКатегориюЕСВ(ДанныеВыгружаемогоДокумента, ВыборкаПоКатегориям)
	
	ВыборкаПоКатегориям.Сбросить();
	
	СтруктураПоиска = Новый Структура("Ссылка, Сотрудник", ДанныеВыгружаемогоДокумента.Ссылка, ДанныеВыгружаемогоДокумента.Сотрудник);	
	
	Если ВыборкаПоКатегориям.НайтиСледующий(СтруктураПоиска) Тогда
		ВыборкаПоКатегориям.СледующийПоЗначениюПоля("Ссылка");
		ВыборкаПоКатегориям.СледующийПоЗначениюПоля("Сотрудник");
		
		Если ВыборкаПоКатегориям.Следующий() Тогда
			ДанныеВыгружаемогоДокумента.КатегорияЕСВ = ВыборкаПоКатегориям.КатегорияЕСВ;
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры

Функция СтруктураДанныхДокументаПриемНаРаботу()
	СтруктураДанныхДокумента = Новый Структура;
	
	СтруктураДанныхДокумента.Вставить("Организация");    
	СтруктураДанныхДокумента.Вставить("Сотрудник");       
	СтруктураДанныхДокумента.Вставить("ФизическоеЛицо");
	СтруктураДанныхДокумента.Вставить("Подразделение"); 
	СтруктураДанныхДокумента.Вставить("Должность");     
	СтруктураДанныхДокумента.Вставить("ДатаПриема");   
	СтруктураДанныхДокумента.Вставить("ВидЗанятости"); 
	СтруктураДанныхДокумента.Вставить("Ответственный"); 
	СтруктураДанныхДокумента.Вставить("Дата");          
	СтруктураДанныхДокумента.Вставить("Номер");           
	СтруктураДанныхДокумента.Вставить("Проведен");          
	СтруктураДанныхДокумента.Вставить("Ссылка");
	СтруктураДанныхДокумента.Вставить("ПринятНаНовоеРабочееМесто");              
	СтруктураДанныхДокумента.Вставить("ДатаСозданияРабочегоМеста");              
	СтруктураДанныхДокумента.Вставить("КатегорияЕСВ");              

		
	Начисления = Новый ТаблицаЗначений;
	Начисления.Колонки.Добавить("Начисление");
	Начисления.Колонки.Добавить("Размер");
	
	Удержания = Новый ТаблицаЗначений;
	Удержания.Колонки.Добавить("Удержание");
	Удержания.Колонки.Добавить("Размер");

	СтруктураДанныхДокумента.Вставить("Начисления", Начисления);
	СтруктураДанныхДокумента.Вставить("Удержания", Удержания);
	
	Возврат СтруктураДанныхДокумента;
	
КонецФункции	

Функция СоответствиеРеквизитовДокументаПриемНаработу()
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
	СоответствиеРеквизитов.Вставить("Проведен", "Проведен");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");
	СоответствиеРеквизитов.Вставить("Сотрудник", "Сотрудник");
	СоответствиеРеквизитов.Вставить("ФизическоеЛицо", "ФизическоеЛицо");
	СоответствиеРеквизитов.Вставить("Подразделение", "Подразделение");
	СоответствиеРеквизитов.Вставить("Должность", "Должность");
	СоответствиеРеквизитов.Вставить("ДатаПриема", "ДатаПриема");
	СоответствиеРеквизитов.Вставить("ВидЗанятости", "ВидЗанятости");
	СоответствиеРеквизитов.Вставить("КатегорияЕСВ", "КатегорияЕСВ");
	
	СоответствиеРеквизитовТЧ = Новый Структура;
	СоответствиеРеквизитовТЧ.Вставить("ИмяТЧ", "Начисления");
	СоответствиеРеквизитовТЧ.Вставить("Начисление", "Начисление");
	СоответствиеРеквизитовТЧ.Вставить("Размер", "Размер");
		
	СоответствиеРеквизитов.Вставить("Начисления", СоответствиеРеквизитовТЧ);
	
	СоответствиеРеквизитовТЧ = Новый Структура;
	СоответствиеРеквизитовТЧ.Вставить("ИмяТЧ", "Удержания");
	СоответствиеРеквизитовТЧ.Вставить("Удержание", "Удержание");
	СоответствиеРеквизитовТЧ.Вставить("Размер", "Размер");

	СоответствиеРеквизитов.Вставить("Удержания", СоответствиеРеквизитовТЧ);
	
	Возврат СоответствиеРеквизитов;
КонецФункции	

Процедура КонвертироватьДвиженияПриемаНаРаботу(Документ, Сотрудник, СоответствиеКонвертированныхОбъектов, НовыйРегистратор)
	КлючПорцииДанных = Новый Структура("Регистратор, Сотрудник", Документ, Сотрудник);
	
	КонвертироватьПорциюДанныхКадровойИстории(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, Ложь, НовыйРегистратор);
	
	КонвертироватьПорциюДанныхПлановыхНачислений(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, Ложь, НовыйРегистратор);
	
	КонвертироватьПорциюДанныхПлановыхУдержаний(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, Ложь, НовыйРегистратор);
	
	КонвертироватьПорциюДанныхПараметровИндексации(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, Ложь, НовыйРегистратор); 
	
	КонвертироватьПорциюДанныхЕСВ(НовыйРегистратор);
	
КонецПроцедуры	

Процедура ПередЗаписьюКадровогоДокумента(ДокументОбъект, ДанныеДокумента)
	ТипДокументаБП2Строка = "";
	Если ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьПриемНаРаботуВОрганизацию") Тогда
		ТипДокументаБП2Строка = "Прием на работу";
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьКадровоеПеремещениеОрганизаций") Тогда
		ТипДокументаБП2Строка = "Кадровое перемещение";	
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьУвольнениеИзОрганизаций") Тогда
		ТипДокументаБП2Строка = "Увольнение";
	ИначеЕсли ТипЗнч(ДанныеДокумента.Ссылка) = Тип("ДокументСсылка.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций") Тогда 
		ТипДокументаБП2Строка = "Ввод сведений о плановых начислениях работников организаций";	
	КонецЕсли;	
	
	ДокументОбъект.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								 НСтр("ru='Перенос документа из Бухгалтерии 1.2: %1 № %2 от %3';uk='Перенесення документу з Бухгалтерії 1.2: %1 № %2 від %3'"),
								 ТипДокументаБП2Строка,
								 ДанныеДокумента.Номер,
								 ДанныеДокумента.Дата);
								 
	ДокументОбъект.УстановитьНовыйНомер();								 
КонецПроцедуры	

//////////////////////////////////////////////////////////////////////////////////////////////
// КАДРОВОЕ ПЕРЕМЕЩЕНИЕ

Функция СписокДокументовКадровоеПеремещение()
	СписокДокументов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьКадровоеПеремещениеОрганизаций.Ссылка
	|ИЗ
	|	Документ.УдалитьКадровоеПеремещениеОрганизаций КАК УдалитьКадровоеПеремещениеОрганизаций
	|ГДЕ
	|	НЕ УдалитьКадровоеПеремещениеОрганизаций.ПометкаУдаления
	|	И УдалитьКадровоеПеремещениеОрганизаций.Проведен = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокДокументов.Добавить(Выборка.Ссылка);		
	КонецЦикла;	
	
	Возврат СписокДокументов;
КонецФункции	

Функция КонвертироватьДокументыКадровоеПеремещение(СписокДокументов, СоответствиеКонвертированныхОбъектов)
	НеконвертированныеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокДокументов);
	
	Результат = Новый Соответствие;
			
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов);
	
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка КАК КонвертируемыйДокумент,
	|	КадровыйПеревод.Ссылка КАК КонвертированныйДокумент
	|ИЗ
	|	Документ.УдалитьКадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПеревод КАК КадровыйПеревод
	|		ПО УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Сотрудник = КадровыйПеревод.Сотрудник
	|			И УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала = КадровыйПеревод.ДатаНачала
	|			И УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.Дата = КадровыйПеревод.Дата
	|			И УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.Проведен = КадровыйПеревод.Проведен
	|			И (УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка В (&СписокДокументов))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка КАК КонвертируемыйДокумент,
	|	ИзменениеПараметровРасчетаИндексации.Ссылка КАК ИзменениеПараметровРасчетаИндексации
	|ИЗ
	|	Документ.УдалитьКадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИзменениеПараметровРасчетаИндексации КАК ИзменениеПараметровРасчетаИндексации
	|		ПО УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Сотрудник = ИзменениеПараметровРасчетаИндексации.Сотрудник
	|			И УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала = ИзменениеПараметровРасчетаИндексации.ДатаИзменения
	|			И УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.Дата = ИзменениеПараметровРасчетаИндексации.Дата
	|			И УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.Проведен = ИзменениеПараметровРасчетаИндексации.Проведен
	|			И (УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка В (&СписокДокументов))
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, Выборка.КонвертируемыйДокумент);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Дата2015", Дата(2015,12,31));
	Запрос.УстановитьПараметр("Дата2016", Дата(2016,06,1));
	СоответствиеКатегорий = Новый ТаблицаЗначений;
	ОписаниеТиповНалог = Новый ОписаниеТипов("СправочникСсылка.Налоги");
	ОписаниеТиповКатегория = Новый ОписаниеТипов("СправочникСсылка.КатегорииЗастрахованныхЛицЕСВ");
	
	СоответствиеКатегорий.Колонки.Добавить("Налог", ОписаниеТиповНалог);
	СоответствиеКатегорий.Колонки.Добавить("Категория", ОписаниеТиповКатегория);
	
	НоваяСтрокаСоответствия = СоответствиеКатегорий.Добавить();
	НоваяСтрокаСоответствия.Налог = Справочники.Налоги.ЕСВФОТБюджетники;
	НоваяСтрокаСоответствия.Категория = Справочники.КатегорииЗастрахованныхЛицЕСВ.НаемныйРаботникБюджет;
	
	НоваяСтрокаСоответствия = СоответствиеКатегорий.Добавить();
	НоваяСтрокаСоответствия.Налог = Справочники.Налоги.ЕСВФОТСудостр;
	НоваяСтрокаСоответствия.Категория = Справочники.КатегорииЗастрахованныхЛицЕСВ.НаемныйРаботникСудостроитель;
	
	НоваяСтрокаСоответствия = СоответствиеКатегорий.Добавить();
	НоваяСтрокаСоответствия.Налог = Справочники.Налоги.ЕСВФОТРаботникиСР;
	НоваяСтрокаСоответствия.Категория = Справочники.КатегорииЗастрахованныхЛицЕСВ.НаемныйРаботникНаСпециальныхРаботах;
	
	НоваяСтрокаСоответствия = СоответствиеКатегорий.Добавить();
	НоваяСтрокаСоответствия.Налог = Справочники.Налоги.ЕСВФОТГПХСудостр;
	НоваяСтрокаСоответствия.Категория = Справочники.КатегорииЗастрахованныхЛицЕСВ.НаемныйРаботникГПХСудостроитель;
	
	Запрос.УстановитьПараметр("СоответствиеКатегорий", СоответствиеКатегорий);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.ПодразделениеОрганизации КАК Подразделение,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Должность,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.ДатаНачала,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.Дата,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.Проведен,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.Номер,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.Ответственный,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.Организация,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Сотрудник.ИНАГРО_ВидЗанятости КАК ВидЗанятости,   //ИНАГРО
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.ОбособленноеПодразделениеКуда КАК ОбособленноеПодразделение,
	|	ИСТИНА КАК ИзменитьПодразделениеИДолжность,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.ПринятНаНовоеРабочееМесто КАК ПринятНаНовоеРабочееМесто,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.ИндексацияЗаработка,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.ФиксированнаяИндексация КАК ФиксированнаяИндексация
	|ИЗ
	|	Документ.УдалитьКадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации
	|ГДЕ
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка В(&СписокДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка,
	|	УдалитьКадровоеПеремещениеОрганизацийРаботникиОрганизации.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьКадровоеПеремещениеОрганизацийОсновныеНачисления.Ссылка КАК Ссылка,
	|	УдалитьКадровоеПеремещениеОрганизацийОсновныеНачисления.Сотрудник КАК Сотрудник,
	|	УдалитьКадровоеПеремещениеОрганизацийОсновныеНачисления.ВидРасчета КАК Начисление,
	|	ВЫБОР
	|		КОГДА УдалитьКадровоеПеремещениеОрганизацийОсновныеНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|			ТОГДА 0
	|		ИНАЧЕ УдалитьКадровоеПеремещениеОрганизацийОсновныеНачисления.Размер
	|	КОНЕЦ КАК Размер
	|ИЗ
	|	Документ.УдалитьКадровоеПеремещениеОрганизаций.ОсновныеНачисления КАК УдалитьКадровоеПеремещениеОрганизацийОсновныеНачисления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник,
	|	УдалитьКадровоеПеремещениеОрганизацийОсновныеНачисления.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьКадровоеПеремещениеОрганизацийУдержания.Ссылка КАК Ссылка,
	|	УдалитьКадровоеПеремещениеОрганизацийУдержания.Сотрудник КАК Сотрудник,
	|	УдалитьКадровоеПеремещениеОрганизацийУдержания.ВидРасчета КАК Удержание,
	|	ВЫБОР
	|		КОГДА УдалитьКадровоеПеремещениеОрганизацийУдержания.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|			ТОГДА 0
	|		ИНАЧЕ УдалитьКадровоеПеремещениеОрганизацийУдержания.Размер
	|	КОНЕЦ КАК Размер
	|ИЗ
	|	Документ.УдалитьКадровоеПеремещениеОрганизаций.Удержания КАК УдалитьКадровоеПеремещениеОрганизацийУдержания
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник,
	|	УдалитьКадровоеПеремещениеОрганизацийУдержания.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьКадровоеПеремещениеОрганизацийНачисленияДо.Ссылка КАК Ссылка,
	|	УдалитьКадровоеПеремещениеОрганизацийНачисленияДо.Сотрудник КАК Сотрудник,
	|	УдалитьКадровоеПеремещениеОрганизацийНачисленияДо.ВидРасчета КАК Начисление,
	|	УдалитьКадровоеПеремещениеОрганизацийНачисленияДо.Размер КАК Размер,
	|	УдалитьКадровоеПеремещениеОрганизацийНачисленияДо.Результат КАК Результат
	|ИЗ
	|	Документ.УдалитьКадровоеПеремещениеОрганизаций.НачисленияДо КАК УдалитьКадровоеПеремещениеОрганизацийНачисленияДо
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник,
	|	УдалитьКадровоеПеремещениеОрганизацийНачисленияДо.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьКадровоеПеремещениеОрганизацийНачисленияПосле.Ссылка КАК Ссылка,
	|	УдалитьКадровоеПеремещениеОрганизацийНачисленияПосле.Сотрудник КАК Сотрудник,
	|	УдалитьКадровоеПеремещениеОрганизацийНачисленияПосле.ВидРасчета КАК Начисление,
	|	УдалитьКадровоеПеремещениеОрганизацийНачисленияПосле.Размер КАК Размер,
	|	УдалитьКадровоеПеремещениеОрганизацийНачисленияПосле.Результат КАК Результат
	|ИЗ
	|	Документ.УдалитьКадровоеПеремещениеОрганизаций.НачисленияПосле КАК УдалитьКадровоеПеремещениеОрганизацийНачисленияПосле
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник,
	|	УдалитьКадровоеПеремещениеОрганизацийНачисленияПосле.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеКатегорий.Налог КАК Налог,
	|   СоответствиеКатегорий.Категория КАК Категория
	|ПОМЕСТИТЬ ВТСоответствиеКатегорий 
	|ИЗ &СоответствиеКатегорий КАК СоответствиеКатегорий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыКатегорийЕСВСрезПоследних.Категория КАК Категория,
	|	ПараметрыКатегорийЕСВСрезПоследних.ЕСВ КАК Взнос,
	|	ПараметрыКатегорийЕСВСрезПоследних.ЕСВФОТ КАК ВзносФОТ
	|ПОМЕСТИТЬ ВТПараметрыКатегорий2015
	|ИЗ
	|	РегистрСведений.ПараметрыКатегорийЕСВ.СрезПоследних(
	|			&Дата2015,
	|			(Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ОсновнаяЗарплата)
	|				ИЛИ Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ПоДоговорамГПХ)
	|				ИЛИ Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.НачисленияМобилизованным))
	|				И Категория <> ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.НаемныйРаботникВИностранныхОрганизациях)
	|				И Категория <> ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.НаемныйРаботникЗаПределамиУкраины)) КАК ПараметрыКатегорийЕСВСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыКатегорийЕСВСрезПоследних.Категория КАК Категория,
	|	ПараметрыКатегорийЕСВСрезПоследних.ЕСВ КАК Взнос,
	|	ВЫБОР КОГДА ЕСТЬNULL(СоответствиеКатегорий.Категория, ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)
	|		ТОГДА 
	|			СоответствиеКатегорий.Налог 
	|		ИНАЧЕ 
	|			ПараметрыКатегорийЕСВСрезПоследних.ЕСВФОТ 
	|	КОНЕЦ КАК ВзносФОТ
	|ПОМЕСТИТЬ ВТПараметрыКатегорий2016
	|ИЗ
	|	РегистрСведений.ПараметрыКатегорийЕСВ.СрезПоследних(
	|			&Дата2016,
	|			(Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ОсновнаяЗарплата)
	|				ИЛИ Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ПоДоговорамГПХ)
	|				ИЛИ Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.НачисленияМобилизованным))
	|) КАК ПараметрыКатегорийЕСВСрезПоследних
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВТСоответствиеКатегорий КАК СоответствиеКатегорий
	|ПО 
	|	ПараметрыКатегорийЕСВСрезПоследних.Категория = СоответствиеКатегорий.Категория
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьКадровоеПеремещениеОрганизацийВзносы.Ссылка КАК Ссылка,
	|	УдалитьКадровоеПеремещениеОрганизацийВзносы.Сотрудник КАК Сотрудник,
	|	УдалитьКадровоеПеремещениеОрганизацийВзносы.Налог КАК Налог,
	|	УдалитьКадровоеПеремещениеОрганизацийВзносы.Действие КАК Действие
	|ПОМЕСТИТЬ ВТВзносы
	|ИЗ
	|	Документ.УдалитьКадровоеПеремещениеОрганизаций.Взносы КАК УдалитьКадровоеПеремещениеОрганизацийВзносы
	|ГДЕ
	|	УдалитьКадровоеПеремещениеОрганизацийВзносы.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|	И УдалитьКадровоеПеремещениеОрганизацийВзносы.Налог В
	|			(ВЫБРАТЬ
	|				ПараметрыКатегорий.Взнос
	|			ИЗ
	|				ВТПараметрыКатегорий2015 КАК ПараметрыКатегорий)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьКадровоеПеремещениеОрганизацийВзносыФОТ.Ссылка КАК Ссылка,
	|	УдалитьКадровоеПеремещениеОрганизацийВзносыФОТ.Сотрудник КАК Сотрудник,
	|	УдалитьКадровоеПеремещениеОрганизацийВзносыФОТ.Налог КАК Налог,
	|	УдалитьКадровоеПеремещениеОрганизацийВзносыФОТ.Действие КАК Действие
	|ПОМЕСТИТЬ ВТВзносыФОТ
	|ИЗ
	|	Документ.УдалитьКадровоеПеремещениеОрганизаций.ВзносыФОТ КАК УдалитьКадровоеПеремещениеОрганизацийВзносыФОТ
	|ГДЕ
	|	УдалитьКадровоеПеремещениеОрганизацийВзносыФОТ.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|	И УдалитьКадровоеПеремещениеОрганизацийВзносыФОТ.Налог В
	|			(ВЫБРАТЬ
	|				ПараметрыКатегорий.ВзносФОТ КАК Налог
	|			ИЗ
	|				ВТПараметрыКатегорий2016 КАК ПараметрыКатегорий
	|		
	|			ОБЪЕДИНИТЬ
	|		
	|			ВЫБРАТЬ
	|				ПараметрыКатегорий.ВзносФОТ
	|			ИЗ
	|				ВТПараметрыКатегорий2015 КАК ПараметрыКатегорий)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзносыФОТ.Ссылка КАК Ссылка,
	|	ВзносыФОТ.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Взносы.Налог, ЗНАЧЕНИЕ(Справочник.Налоги.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Налоги.ПустаяСсылка)
	|				И ЕСТЬNULL(ПараметрыКатегорий2016.Категория, ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)
	|			ТОГДА ПараметрыКатегорий2016.Категория
	|		ИНАЧЕ ПараметрыКатегорий2015.Категория
	|	КОНЕЦ КАК КатегорияЕСВ
	|ПОМЕСТИТЬ ВТВзносыИКатегорииЕСВ
	|ИЗ
	|	ВТВзносыФОТ КАК ВзносыФОТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВзносы КАК Взносы
	|		ПО ВзносыФОТ.Ссылка = Взносы.Ссылка
	|			И ВзносыФОТ.Сотрудник = Взносы.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыКатегорий2015 КАК ПараметрыКатегорий2015
	|		ПО ВзносыФОТ.Налог = ПараметрыКатегорий2015.ВзносФОТ
	|			И (Взносы.Налог = ПараметрыКатегорий2015.Взнос)
	|			И (Взносы.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить)
	|				ИЛИ Взносы.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
	|				ИЛИ (ВзносыФОТ.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить)
	|					ИЛИ ВзносыФОТ.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыКатегорий2016 КАК ПараметрыКатегорий2016
	|		ПО (ВЫБОР
	|				КОГДА ЕСТЬNULL(Взносы.Налог, ЗНАЧЕНИЕ(Справочник.Налоги.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Налоги.ПустаяСсылка)
	|					ТОГДА ВзносыФОТ.Налог = ПараметрыКатегорий2016.ВзносФОТ
	|			КОНЕЦ)
	|			И (ВзносыФОТ.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить)
	|				ИЛИ ВзносыФОТ.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать))
	|ГДЕ
	|	НЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(Взносы.Налог, ЗНАЧЕНИЕ(Справочник.Налоги.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Налоги.ПустаяСсылка)
	|						И ЕСТЬNULL(ПараметрыКатегорий2016.Категория, ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)
	|					ТОГДА ПараметрыКатегорий2016.Категория
	|				ИНАЧЕ ПараметрыКатегорий2015.Категория
	|			КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзносыИКатегорииЕСВ.Ссылка КАК Ссылка,
	|	ВзносыИКатегорииЕСВ.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ВзносыИКатегорииЕСВ.КатегорияЕСВ) КАК КатегорияЕСВ
	|ИЗ
	|	ВТВзносыИКатегорииЕСВ КАК ВзносыИКатегорииЕСВ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзносыИКатегорииЕСВ.Ссылка,
	|	ВзносыИКатегорииЕСВ.Сотрудник";

	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = РезультатыЗапроса[0].Выбрать();
	ВыборкаПоНачислениям = РезультатыЗапроса[1].Выбрать(); 
	ВыборкаПоУдержаниям = РезультатыЗапроса[2].Выбрать(); 
	ВыборкаПоНачислениямДо = РезультатыЗапроса[3].Выбрать(); 
	ВыборкаПоНачислениямПосле = РезультатыЗапроса[4].Выбрать(); 
    ВыборкаПоКатегориям = РезультатыЗапроса[11].Выбрать();
	
	Пока ВыборкаПоДокументам.СледующийПоЗначениюПоля("Ссылка") Цикл
		НачатьТранзакцию();
		Пока ВыборкаПоДокументам.Следующий() Цикл
			ДанныеВыгружаемогоДокумента = СтруктураДанныхДокументаКадровоеПеремещение();

			ДанныеВыгружаемогоДокумента.Организация = ВыборкаПоДокументам.Организация;
			ДанныеВыгружаемогоДокумента.Сотрудник = ВыборкаПоДокументам.Сотрудник;
			ДанныеВыгружаемогоДокумента.Подразделение = ВыборкаПоДокументам.Подразделение;
			ДанныеВыгружаемогоДокумента.ОбособленноеПодразделение = ВыборкаПоДокументам.Организация;
			ДанныеВыгружаемогоДокумента.Должность = ВыборкаПоДокументам.Должность;
			ДанныеВыгружаемогоДокумента.ДатаНачала = ВыборкаПоДокументам.ДатаНачала;
			ДанныеВыгружаемогоДокумента.ВидЗанятости = ВыборкаПоДокументам.ВидЗанятости;
			ДанныеВыгружаемогоДокумента.Ответственный = ВыборкаПоДокументам.Ответственный;
			ДанныеВыгружаемогоДокумента.Дата = ВыборкаПоДокументам.Дата;
			ДанныеВыгружаемогоДокумента.Номер = ВыборкаПоДокументам.Номер;
			ДанныеВыгружаемогоДокумента.Проведен = ВыборкаПоДокументам.Проведен;
			ДанныеВыгружаемогоДокумента.ИзменитьПодразделениеИДолжность = Истина;
			ДанныеВыгружаемогоДокумента.ФизическоеЛицо = ВыборкаПоДокументам.ФизическоеЛицо; 
			ДанныеВыгружаемогоДокумента.Ссылка = ВыборкаПоДокументам.Ссылка;
			ДанныеВыгружаемогоДокумента.ПринятНаНовоеРабочееМесто = ВыборкаПоДокументам.ПринятНаНовоеРабочееМесто;
			ДанныеВыгружаемогоДокумента.ИндексацияЗаработка = ВыборкаПоДокументам.ИндексацияЗаработка;
			ДанныеВыгружаемогоДокумента.ФиксированнаяИндексация = ВыборкаПоДокументам.ФиксированнаяИндексация;

			ВписатьНачисленияВДанныеКадровогоДокумента(ДанныеВыгружаемогоДокумента, ВыборкаПоНачислениям);
			ВписатьУдержанияВДанныеКадровогоДокумента(ДанныеВыгружаемогоДокумента, ВыборкаПоУдержаниям);
			УстановитьКатегориюЕСВ(ДанныеВыгружаемогоДокумента,ВыборкаПоКатегориям);
			
			ДанныеВыгружаемогоДокумента.ИзменитьНачисления = ДанныеВыгружаемогоДокумента.Начисления.Количество() > 0;
			
			КонвертированныйДокумент = КонвертироватьДанныеДокумента(ДанныеВыгружаемогоДокумента, СоответствиеКонвертированныхОбъектов);
			
			Результат.Вставить(ВыборкаПоДокументам.Ссылка, КонвертированныйДокумент);
			
			КонвертироватьДвиженияКадровогоПеремещение(ДанныеВыгружаемогоДокумента.Ссылка, ДанныеВыгружаемогоДокумента.Сотрудник, СоответствиеКонвертированныхОбъектов, КонвертированныйДокумент.ПолучитьОбъект());
			Если ВыборкаПоДокументам.ИндексацияЗаработка Тогда
				ВписатьНачисленияДоВДанныеДокументаИзмененияПараметровРасчетаИндексации(ДанныеВыгружаемогоДокумента, ВыборкаПоНачислениямДо);
				ВписатьНачисленияПослеВДанныеДокументаИзмененияПараметровРасчетаИндексации(ДанныеВыгружаемогоДокумента, ВыборкаПоНачислениямПосле);
				КонвертированныйДокумент = КонвертироватьДанныеДокументаПараметрыИндексации(ДанныеВыгружаемогоДокумента, СоответствиеКонвертированныхОбъектов);
				Результат.Вставить(ВыборкаПоДокументам.Ссылка, КонвертированныйДокумент);
				КонвертироватьДвиженияИзмененияПараметровРасчетаИндексации(ДанныеВыгружаемогоДокумента.Ссылка, ДанныеВыгружаемогоДокумента.Сотрудник, СоответствиеКонвертированныхОбъектов, КонвертированныйДокумент.ПолучитьОбъект());
			КонецЕсли;
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции	

Функция СтруктураДанныхДокументаКадровоеПеремещение()
	СтруктураДанныхДокумента = Новый Структура;
	
	СтруктураДанныхДокумента.Вставить("Организация");
	СтруктураДанныхДокумента.Вставить("Сотрудник");
	СтруктураДанныхДокумента.Вставить("Подразделение");
	СтруктураДанныхДокумента.Вставить("ОбособленноеПодразделение");
	СтруктураДанныхДокумента.Вставить("Должность");
	СтруктураДанныхДокумента.Вставить("ДатаНачала");
	СтруктураДанныхДокумента.Вставить("ВидЗанятости");
	СтруктураДанныхДокумента.Вставить("Ответственный");
	СтруктураДанныхДокумента.Вставить("Дата");
	СтруктураДанныхДокумента.Вставить("Номер");
	СтруктураДанныхДокумента.Вставить("Проведен");
	СтруктураДанныхДокумента.Вставить("ИзменитьПодразделениеИДолжность");
	СтруктураДанныхДокумента.Вставить("ИзменитьНачисления");
	СтруктураДанныхДокумента.Вставить("ПричинаПеревода");
	СтруктураДанныхДокумента.Вставить("Ссылка");
	СтруктураДанныхДокумента.Вставить("ФизическоеЛицо");
	СтруктураДанныхДокумента.Вставить("ПринятНаНовоеРабочееМесто");
	СтруктураДанныхДокумента.Вставить("ИндексацияЗаработка");
	СтруктураДанныхДокумента.Вставить("ФиксированнаяИндексация");
	СтруктураДанныхДокумента.Вставить("КатегорияЕСВ");
	
	Начисления = Новый ТаблицаЗначений;
	Начисления.Колонки.Добавить("Начисление");
	Начисления.Колонки.Добавить("Размер");
	
	Удержания = Новый ТаблицаЗначений;
	Удержания.Колонки.Добавить("Удержание");
	Удержания.Колонки.Добавить("Размер");
	
	НачисленияДо = Новый ТаблицаЗначений;
	НачисленияДо.Колонки.Добавить("Начисление");
	НачисленияДо.Колонки.Добавить("Размер");
	НачисленияДо.Колонки.Добавить("Результат");
	
	НачисленияПосле = Новый ТаблицаЗначений;
	НачисленияПосле.Колонки.Добавить("Начисление");
	НачисленияПосле.Колонки.Добавить("Размер");
	НачисленияПосле.Колонки.Добавить("Результат");
	
	СтруктураДанныхДокумента.Вставить("Начисления", Начисления);
	СтруктураДанныхДокумента.Вставить("Удержания", Удержания);
	СтруктураДанныхДокумента.Вставить("НачисленияДо", НачисленияДо);
	СтруктураДанныхДокумента.Вставить("НачисленияПосле", НачисленияПосле);

	Возврат СтруктураДанныхДокумента;
	
КонецФункции	

Функция СоответствиеРеквизитовДокументаКадровоеПеремещение()
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
	СоответствиеРеквизитов.Вставить("Проведен", "Проведен");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");
	СоответствиеРеквизитов.Вставить("Сотрудник", "Сотрудник");
	СоответствиеРеквизитов.Вставить("Подразделение", "Подразделение");
	СоответствиеРеквизитов.Вставить("ОбособленноеПодразделение", "ОбособленноеПодразделение");
	СоответствиеРеквизитов.Вставить("Должность", "Должность");
	СоответствиеРеквизитов.Вставить("ДатаНачала", "ДатаНачала");
	СоответствиеРеквизитов.Вставить("ВидЗанятости", "ВидЗанятости");
	СоответствиеРеквизитов.Вставить("ФизическоеЛицо", "ФизическоеЛицо");
	СоответствиеРеквизитов.Вставить("ИзменитьПодразделениеИДолжность", "ИзменитьПодразделениеИДолжность");
	СоответствиеРеквизитов.Вставить("ИзменитьНачисления", "ИзменитьНачисления");
	СоответствиеРеквизитов.Вставить("КатегорияЕСВ", "КатегорияЕСВ");

	СоответствиеРеквизитовТЧ = Новый Структура;
	СоответствиеРеквизитовТЧ.Вставить("ИмяТЧ", "Начисления");
	СоответствиеРеквизитовТЧ.Вставить("Начисление", "Начисление");
	СоответствиеРеквизитовТЧ.Вставить("Размер", "Размер");
	
	СоответствиеРеквизитов.Вставить("Начисления", СоответствиеРеквизитовТЧ);
	
	СоответствиеРеквизитовТЧ = Новый Структура;
	СоответствиеРеквизитовТЧ.Вставить("ИмяТЧ", "Удержания");
	СоответствиеРеквизитовТЧ.Вставить("Удержание", "Удержание");
	СоответствиеРеквизитовТЧ.Вставить("Размер", "Размер");
		
	СоответствиеРеквизитов.Вставить("Удержания", СоответствиеРеквизитовТЧ);
	
	
	
	

	Возврат СоответствиеРеквизитов;
КонецФункции	

Процедура КонвертироватьДвиженияКадровогоПеремещение(Документ, Сотрудник, СоответствиеКонвертированныхОбъектов, НовыйРегистратор)
	КлючПорцииДанных = Новый Структура("Регистратор, Сотрудник", Документ, Сотрудник);
	
	КонвертироватьПорциюДанныхКадровойИстории(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, Ложь, НовыйРегистратор);
	
	КонвертироватьПорциюДанныхПлановыхНачислений(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, Ложь, НовыйРегистратор);
	
	КонвертироватьПорциюДанныхПлановыхУдержаний(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, Ложь, НовыйРегистратор);
	
	КонвертироватьПорциюДанныхЕСВ(НовыйРегистратор);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////
// Ввод сведений о плановых начислениях работников организаций

Функция СписокДокументовВводПлановыхНачислений()
	СписокДокументов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.Ссылка
	|ИЗ
	|	Документ.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций КАК УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций
	|ГДЕ
	|	НЕ УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.ПометкаУдаления
	|	И УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.Проведен = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокДокументов.Добавить(Выборка.Ссылка);		
	КонецЦикла;	
	
	Возврат СписокДокументов;
КонецФункции	

Функция  КонвертироватьДокументывВводПлановыхНачислений(СписокДокументов, СоответствиеКонвертированныхОбъектов)
	НеконвертированныеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокДокументов);
	
	Результат = Новый Соответствие;
			
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов);
	
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Ссылка КАК КонвертируемыйДокумент,
	|	КадровыйПереводНачисления.Ссылка КАК КонвертированныйДокумент
	|ИЗ
	|	Документ.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.ОсновныеНачисления КАК УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПеревод.Начисления КАК КадровыйПереводНачисления
	|		ПО УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.ДатаДействия = КадровыйПереводНачисления.Ссылка.ДатаНачала
	|			И УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Ссылка.Дата = КадровыйПереводНачисления.Ссылка.Дата
	|			И УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Ссылка.Проведен = КадровыйПереводНачисления.Ссылка.Проведен
	|			И УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Сотрудник = КадровыйПереводНачисления.Ссылка.Сотрудник
	|			И (НЕ КадровыйПереводНачисления.Ссылка.ИзменитьПодразделениеИДолжность)
	|			И УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.ДатаДействия = КадровыйПереводНачисления.Ссылка.ДатаНачала
	|ГДЕ
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Ссылка В (&СписокДокументов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, Выборка.КонвертируемыйДокумент);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	Запрос.УстановитьПараметр("Дата2015", Дата(2015,12,31));
	Запрос.УстановитьПараметр("Дата2016", Дата(2016,06,1));
	СоответствиеКатегорий = Новый ТаблицаЗначений;
	ОписаниеТиповНалог = Новый ОписаниеТипов("СправочникСсылка.Налоги");
	ОписаниеТиповКатегория = Новый ОписаниеТипов("СправочникСсылка.КатегорииЗастрахованныхЛицЕСВ");
	
	СоответствиеКатегорий.Колонки.Добавить("Налог", ОписаниеТиповНалог);
	СоответствиеКатегорий.Колонки.Добавить("Категория", ОписаниеТиповКатегория);
	
	НоваяСтрокаСоответствия = СоответствиеКатегорий.Добавить();
	НоваяСтрокаСоответствия.Налог = Справочники.Налоги.ЕСВФОТБюджетники;
	НоваяСтрокаСоответствия.Категория = Справочники.КатегорииЗастрахованныхЛицЕСВ.НаемныйРаботникБюджет;
	
	НоваяСтрокаСоответствия = СоответствиеКатегорий.Добавить();
	НоваяСтрокаСоответствия.Налог = Справочники.Налоги.ЕСВФОТСудостр;
	НоваяСтрокаСоответствия.Категория = Справочники.КатегорииЗастрахованныхЛицЕСВ.НаемныйРаботникСудостроитель;
	
	НоваяСтрокаСоответствия = СоответствиеКатегорий.Добавить();
	НоваяСтрокаСоответствия.Налог = Справочники.Налоги.ЕСВФОТРаботникиСР;
	НоваяСтрокаСоответствия.Категория = Справочники.КатегорииЗастрахованныхЛицЕСВ.НаемныйРаботникНаСпециальныхРаботах;
	
	НоваяСтрокаСоответствия = СоответствиеКатегорий.Добавить();
	НоваяСтрокаСоответствия.Налог = Справочники.Налоги.ЕСВФОТГПХСудостр;
	НоваяСтрокаСоответствия.Категория = Справочники.КатегорииЗастрахованныхЛицЕСВ.НаемныйРаботникГПХСудостроитель;
	
	Запрос.УстановитьПараметр("СоответствиеКатегорий", СоответствиеКатегорий);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Ссылка.Ссылка КАК Ссылка,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Ссылка.Организация,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Ссылка.Проведен,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Ссылка.Дата,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Ссылка.Ответственный,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Сотрудник КАК Сотрудник,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.ВидРасчета КАК Начисление,
	|	ВЫБОР
	|		КОГДА УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|			ТОГДА 0
	|		ИНАЧЕ УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Размер
	|	КОНЕЦ КАК Размер,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Ссылка.Номер,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.ДатаДействия КАК ДатаНачала,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Ссылка.ИндексацияЗаработка
	|ИЗ
	|	Документ.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.ОсновныеНачисления КАК УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления
	|ГДЕ
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийОсновныеНачисления.Ссылка В(&СписокДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник,
	|	ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийНачисленияДо.Ссылка КАК Ссылка,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийНачисленияДо.Сотрудник КАК Сотрудник,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийНачисленияДо.ВидРасчета КАК Начисление,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийНачисленияДо.Размер КАК Размер,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийНачисленияДо.Результат КАК Результат
	|ИЗ
	|	Документ.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.НачисленияДо КАК УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийНачисленияДо
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийНачисленияДо.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийНачисленияПосле.Ссылка КАК Ссылка,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийНачисленияПосле.Сотрудник КАК Сотрудник,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийНачисленияПосле.ВидРасчета КАК Начисление,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийНачисленияПосле.Размер КАК Размер,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийНачисленияПосле.Результат КАК Результат
	|ИЗ
	|	Документ.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.НачисленияПосле КАК УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийНачисленияПосле
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийНачисленияПосле.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧПараметрыРасчетаИндексации.Ссылка КАК Ссылка,
	|	ТЧПараметрыРасчетаИндексации.Сотрудник КАК Сотрудник,
	|	ТЧПараметрыРасчетаИндексации.ПодразделениеОрганизации КАК Подразделение,
	|	ТЧПараметрыРасчетаИндексации.Должность КАК Должность,
	|	ТЧПараметрыРасчетаИндексации.ФиксированнаяИндексация КАК ФиксированнаяИндексация
	|ИЗ
	|	Документ.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.ПараметрыРасчетаИндексации КАК ТЧПараметрыРасчетаИндексации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник,
	|	ТЧПараметрыРасчетаИндексации.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеКатегорий.Налог КАК Налог,
	|   СоответствиеКатегорий.Категория КАК Категория
	|ПОМЕСТИТЬ ВТСоответствиеКатегорий 
	|ИЗ &СоответствиеКатегорий КАК СоответствиеКатегорий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыКатегорийЕСВСрезПоследних.Категория КАК Категория,
	|	ПараметрыКатегорийЕСВСрезПоследних.ЕСВ КАК Взнос,
	|	ПараметрыКатегорийЕСВСрезПоследних.ЕСВФОТ КАК ВзносФОТ
	|ПОМЕСТИТЬ ВТПараметрыКатегорий2015
	|ИЗ
	|	РегистрСведений.ПараметрыКатегорийЕСВ.СрезПоследних(
	|			&Дата2015,
	|			(Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ОсновнаяЗарплата)
	|				ИЛИ Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ПоДоговорамГПХ)
	|				ИЛИ Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.НачисленияМобилизованным))
	|				И Категория <> ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.НаемныйРаботникВИностранныхОрганизациях)
	|				И Категория <> ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.НаемныйРаботникЗаПределамиУкраины)) КАК ПараметрыКатегорийЕСВСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыКатегорийЕСВСрезПоследних.Категория КАК Категория,
	|	ПараметрыКатегорийЕСВСрезПоследних.ЕСВ КАК Взнос,
	|	ВЫБОР КОГДА ЕСТЬNULL(СоответствиеКатегорий.Категория, ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)
	|		ТОГДА 
	|			СоответствиеКатегорий.Налог 
	|		ИНАЧЕ 
	|			ПараметрыКатегорийЕСВСрезПоследних.ЕСВФОТ 
	|	КОНЕЦ КАК ВзносФОТ
	|ПОМЕСТИТЬ ВТПараметрыКатегорий2016
	|ИЗ
	|	РегистрСведений.ПараметрыКатегорийЕСВ.СрезПоследних(
	|			&Дата2016,
	|			(Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ОсновнаяЗарплата)
	|				ИЛИ Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ПоДоговорамГПХ)
	|				ИЛИ Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.НачисленияМобилизованным))
	|) КАК ПараметрыКатегорийЕСВСрезПоследних
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВТСоответствиеКатегорий КАК СоответствиеКатегорий
	|ПО 
	|	ПараметрыКатегорийЕСВСрезПоследних.Категория = СоответствиеКатегорий.Категория
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносы.Ссылка КАК Ссылка,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносы.Сотрудник КАК Сотрудник,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносы.Налог КАК Налог,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносы.Действие КАК Действие
	|ПОМЕСТИТЬ ВТВзносы
	|ИЗ
	|	Документ.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.Взносы КАК УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносы
	|ГДЕ
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносы.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|	И УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносы.Налог В (ВЫБРАТЬ ПараметрыКатегорий.Взнос ИЗ ВТПараметрыКатегорий2015 КАК ПараметрыКатегорий)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносыФОТ.Ссылка КАК Ссылка,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносыФОТ.Сотрудник КАК Сотрудник,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносыФОТ.Налог КАК Налог,
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносыФОТ.Действие КАК Действие
	|ПОМЕСТИТЬ ВТВзносыФОТ
	|ИЗ
	|	Документ.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.ВзносыФОТ КАК УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносыФОТ
	|ГДЕ
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносыФОТ.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|	И УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносыФОТ.Налог В 
	|			(ВЫБРАТЬ
	|				ПараметрыКатегорий.ВзносФОТ
	|			ИЗ
	|				ВТПараметрыКатегорий2016 КАК ПараметрыКатегорий
	| 			ОБЪЕДИНИТЬ  
	|			ВЫБРАТЬ
	|				ПараметрыКатегорий.ВзносФОТ
	|			ИЗ
	|				ВТПараметрыКатегорий2015 КАК ПараметрыКатегорий)
	|
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзносыФОТ.Ссылка КАК Ссылка,
	|	ВзносыФОТ.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Взносы.Налог, ЗНАЧЕНИЕ(Справочник.Налоги.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Налоги.ПустаяСсылка)
	|				И ЕСТЬNULL(ПараметрыКатегорий2016.Категория, ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)
	|			ТОГДА ПараметрыКатегорий2016.Категория
	|		ИНАЧЕ ПараметрыКатегорий2015.Категория
	|	КОНЕЦ КАК КатегорияЕСВ
	|ПОМЕСТИТЬ ВТВзносыИКатегорииЕСВ
	|ИЗ
	|	ВТВзносыФОТ КАК ВзносыФОТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВзносы КАК Взносы
	|		ПО ВзносыФОТ.Ссылка = Взносы.Ссылка
	|			И ВзносыФОТ.Сотрудник = Взносы.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыКатегорий2015 КАК ПараметрыКатегорий2015
	|		ПО ВзносыФОТ.Налог = ПараметрыКатегорий2015.ВзносФОТ
	|			И (Взносы.Налог = ПараметрыКатегорий2015.Взнос)
	|			И (Взносы.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить)
	|				ИЛИ Взносы.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
	|				ИЛИ (ВзносыФОТ.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить)
	|					ИЛИ ВзносыФОТ.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыКатегорий2016 КАК ПараметрыКатегорий2016
	|		ПО (ВЫБОР
	|				КОГДА ЕСТЬNULL(Взносы.Налог, ЗНАЧЕНИЕ(Справочник.Налоги.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Налоги.ПустаяСсылка)
	|					ТОГДА ВзносыФОТ.Налог = ПараметрыКатегорий2016.ВзносФОТ
	|			КОНЕЦ)
	|			И (ВзносыФОТ.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить)
	|				ИЛИ ВзносыФОТ.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать))
	|ГДЕ
	|	НЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(Взносы.Налог, ЗНАЧЕНИЕ(Справочник.Налоги.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Налоги.ПустаяСсылка)
	|						И ЕСТЬNULL(ПараметрыКатегорий2016.Категория, ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)
	|					ТОГДА ПараметрыКатегорий2016.Категория
	|				ИНАЧЕ ПараметрыКатегорий2015.Категория
	|			КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзносыИКатегорииЕСВ.Ссылка КАК Ссылка,
	|	ВзносыИКатегорииЕСВ.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ВзносыИКатегорииЕСВ.КатегорияЕСВ) КАК КатегорияЕСВ
	|ИЗ
	|	ВТВзносыИКатегорииЕСВ КАК ВзносыИКатегорииЕСВ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзносыИКатегорииЕСВ.Ссылка,
	|	ВзносыИКатегорииЕСВ.Сотрудник";

    РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаПоНачислениям = РезультатыЗапроса[0].Выбрать();
	ВыборкаПоНачислениямДо = РезультатыЗапроса[1].Выбрать();
	ВыборкаПоНачислениямПосле = РезультатыЗапроса[2].Выбрать();
	ВыборкаПопараметрамФиксированнойИндексации = РезультатыЗапроса[3].Выбрать();
	ВыборкаПоКатегориям = РезультатыЗапроса[10].Выбрать();
	
	Пока ВыборкаПоНачислениям.СледующийПоЗначениюПоля("Ссылка") Цикл
		НачатьТранзакцию();
		Пока ВыборкаПоНачислениям.СледующийПоЗначениюПоля("Сотрудник") Цикл
			ДанныеВыгружаемогоДокумента = СтруктураДанныхДокументавВводПлановыхНачислений();
			
			ДанныеВыгружаемогоДокумента.Организация = ВыборкаПоНачислениям.Организация;
			ДанныеВыгружаемогоДокумента.Сотрудник = ВыборкаПоНачислениям.Сотрудник;
			ДанныеВыгружаемогоДокумента.ДатаНачала = ВыборкаПоНачислениям.ДатаНачала;
			ДанныеВыгружаемогоДокумента.Ответственный = ВыборкаПоНачислениям.Ответственный;
			ДанныеВыгружаемогоДокумента.Дата = ВыборкаПоНачислениям.Дата;
			ДанныеВыгружаемогоДокумента.Номер = ВыборкаПоНачислениям.Номер;
			ДанныеВыгружаемогоДокумента.Проведен = ВыборкаПоНачислениям.Проведен;
			ДанныеВыгружаемогоДокумента.ИзменитьПодразделениеИДолжность = Ложь;
			ДанныеВыгружаемогоДокумента.ФизическоеЛицо = ВыборкаПоНачислениям.ФизическоеЛицо; 
			ДанныеВыгружаемогоДокумента.ИзменитьНачисления = Истина;		
			ДанныеВыгружаемогоДокумента.Ссылка = ВыборкаПоНачислениям.Ссылка;
			ДанныеВыгружаемогоДокумента.ИндексацияЗаработка = ВыборкаПоНачислениям.ИндексацияЗаработка;
			УстановитьКатегориюЕСВ(ДанныеВыгружаемогоДокумента,ВыборкаПоКатегориям);
			
			Пока ВыборкаПоНачислениям.Следующий() Цикл
				СтрокаНачислений = ДанныеВыгружаемогоДокумента.Начисления.Добавить();
				СтрокаНачислений.Начисление = ВыборкаПоНачислениям.Начисление;
				СтрокаНачислений.Размер = ВыборкаПоНачислениям.Размер;
			КонецЦикла;	
			ВыборкаПопараметрамФиксированнойИндексации.Сбросить();
	
			СтруктураПоиска = Новый Структура("Ссылка, Сотрудник", ДанныеВыгружаемогоДокумента.Ссылка, ДанныеВыгружаемогоДокумента.Сотрудник);	
	
			Если ВыборкаПопараметрамФиксированнойИндексации.НайтиСледующий(СтруктураПоиска) Тогда
				ВыборкаПопараметрамФиксированнойИндексации.СледующийПоЗначениюПоля("Ссылка");
				ВыборкаПопараметрамФиксированнойИндексации.СледующийПоЗначениюПоля("Сотрудник");
		 		Пока ВыборкаПопараметрамФиксированнойИндексации.Следующий() Цикл
					ДанныеВыгружаемогоДокумента.Подразделение = ВыборкаПопараметрамФиксированнойИндексации.Подразделение;
					ДанныеВыгружаемогоДокумента.Должность = ВыборкаПопараметрамФиксированнойИндексации.Должность;
					ДанныеВыгружаемогоДокумента.ФиксированнаяИндексация = ВыборкаПопараметрамФиксированнойИндексации.ФиксированнаяИндексация;
				КонецЦикла;	
			КонецЕсли;	
			КонвертированныйДокумент = КонвертироватьДанныеДокумента(ДанныеВыгружаемогоДокумента, СоответствиеКонвертированныхОбъектов);
			
			Результат.Вставить(ВыборкаПоНачислениям.Ссылка, КонвертированныйДокумент);
			Если ВыборкаПоНачислениям.Ссылка.Проведен Тогда 
				КонвертироватьДвижениявВводаПлановыхНачислений(ДанныеВыгружаемогоДокумента.Ссылка, 
				ДанныеВыгружаемогоДокумента.Сотрудник, 
				СоответствиеКонвертированныхОбъектов, 
				КонвертированныйДокумент.ПолучитьОбъект());
			КонецЕсли;	
			Если ВыборкаПоНачислениям.ИндексацияЗаработка Тогда
				ВписатьНачисленияДоВДанныеДокументаИзмененияПараметровРасчетаИндексации(ДанныеВыгружаемогоДокумента, ВыборкаПоНачислениямДо);
				ВписатьНачисленияПослеВДанныеДокументаИзмененияПараметровРасчетаИндексации(ДанныеВыгружаемогоДокумента, ВыборкаПоНачислениямПосле);
				КонвертированныйДокумент = КонвертироватьДанныеДокументаПараметрыИндексации(ДанныеВыгружаемогоДокумента, СоответствиеКонвертированныхОбъектов);
				Результат.Вставить(ВыборкаПоНачислениям.Ссылка, КонвертированныйДокумент);
				Если ВыборкаПоНачислениям.Ссылка.Проведен Тогда 
					КонвертироватьДвиженияИзмененияПараметровРасчетаИндексации(ДанныеВыгружаемогоДокумента.Ссылка, ДанныеВыгружаемогоДокумента.Сотрудник, СоответствиеКонвертированныхОбъектов, КонвертированныйДокумент.ПолучитьОбъект());
				КонецЕсли;	
			КонецЕсли;
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции

Функция  КонвертироватьДокументывВводПлановыхНачисленийПоВзносам(СписокДокументов, СоответствиеКонвертированныхОбъектов)
	НеконвертированныеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокДокументов);
	
	Результат = Новый Соответствие;
			
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов);
	
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносы.Ссылка КАК КонвертируемыйДокумент,
	|	КадровыйПеревод.Ссылка КАК КонвертированныйДокумент
	|ИЗ
	|	Документ.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.Взносы КАК УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КадровыйПеревод КАК КадровыйПеревод
	|		ПО УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносы.Ссылка.Дата = КадровыйПеревод.Ссылка.Дата
	|			И УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносы.Ссылка.Проведен = КадровыйПеревод.Ссылка.Проведен
	|			И УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносы.Сотрудник = КадровыйПеревод.Ссылка.Сотрудник
	|			И (НЕ КадровыйПеревод.Ссылка.ИзменитьПодразделениеИДолжность)
	|			И УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносы.ДатаДействия = КадровыйПеревод.Ссылка.ДатаНачала
	|ГДЕ
	|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносы.Ссылка В (&СписокДокументов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, Выборка.КонвертируемыйДокумент);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	Запрос.УстановитьПараметр("Дата2015", Дата(2015,12,31));
	Запрос.УстановитьПараметр("Дата2016", Дата(2016,06,1));
	СоответствиеКатегорий = Новый ТаблицаЗначений;
	ОписаниеТиповНалог = Новый ОписаниеТипов("СправочникСсылка.Налоги");
	ОписаниеТиповКатегория = Новый ОписаниеТипов("СправочникСсылка.КатегорииЗастрахованныхЛицЕСВ");
	
	СоответствиеКатегорий.Колонки.Добавить("Налог", ОписаниеТиповНалог);
	СоответствиеКатегорий.Колонки.Добавить("Категория", ОписаниеТиповКатегория);
	
	НоваяСтрокаСоответствия = СоответствиеКатегорий.Добавить();
	НоваяСтрокаСоответствия.Налог = Справочники.Налоги.ЕСВФОТБюджетники;
	НоваяСтрокаСоответствия.Категория = Справочники.КатегорииЗастрахованныхЛицЕСВ.НаемныйРаботникБюджет;
	
	НоваяСтрокаСоответствия = СоответствиеКатегорий.Добавить();
	НоваяСтрокаСоответствия.Налог = Справочники.Налоги.ЕСВФОТСудостр;
	НоваяСтрокаСоответствия.Категория = Справочники.КатегорииЗастрахованныхЛицЕСВ.НаемныйРаботникСудостроитель;
	
	НоваяСтрокаСоответствия = СоответствиеКатегорий.Добавить();
	НоваяСтрокаСоответствия.Налог = Справочники.Налоги.ЕСВФОТРаботникиСР;
	НоваяСтрокаСоответствия.Категория = Справочники.КатегорииЗастрахованныхЛицЕСВ.НаемныйРаботникНаСпециальныхРаботах;
	
	НоваяСтрокаСоответствия = СоответствиеКатегорий.Добавить();
	НоваяСтрокаСоответствия.Налог = Справочники.Налоги.ЕСВФОТГПХСудостр;
	НоваяСтрокаСоответствия.Категория = Справочники.КатегорииЗастрахованныхЛицЕСВ.НаемныйРаботникГПХСудостроитель;
	
	Запрос.УстановитьПараметр("СоответствиеКатегорий", СоответствиеКатегорий);

	Запрос.Текст = "ВЫБРАТЬ
					|	ПараметрыКатегорийЕСВСрезПоследних.Категория КАК Категория,
					|	ПараметрыКатегорийЕСВСрезПоследних.ЕСВ КАК Взнос,
					|	ПараметрыКатегорийЕСВСрезПоследних.ЕСВФОТ КАК ВзносФОТ
					|ПОМЕСТИТЬ ВТПараметрыКатегорий2015
					|ИЗ
					|	РегистрСведений.ПараметрыКатегорийЕСВ.СрезПоследних(
					|			&Дата2015,
					|			(Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ОсновнаяЗарплата)
					|				ИЛИ Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ПоДоговорамГПХ))
					|				И Категория <> ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.НаемныйРаботникВИностранныхОрганизациях)
					|				И Категория <> ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.НаемныйРаботникЗаПределамиУкраины)) КАК ПараметрыКатегорийЕСВСрезПоследних
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	СоответствиеКатегорий.Налог КАК Налог,
					|   СоответствиеКатегорий.Категория КАК Категория
					|ПОМЕСТИТЬ ВТСоответствиеКатегорий 
					|ИЗ &СоответствиеКатегорий КАК СоответствиеКатегорий
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ПараметрыКатегорийЕСВСрезПоследних.Категория КАК Категория,
					|	ПараметрыКатегорийЕСВСрезПоследних.ЕСВ КАК Взнос,
					|	ВЫБОР КОГДА ЕСТЬNULL(СоответствиеКатегорий.Категория, ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)
					|		ТОГДА 
					|			СоответствиеКатегорий.Налог 
					|		ИНАЧЕ 
					|			ПараметрыКатегорийЕСВСрезПоследних.ЕСВФОТ 
					|	КОНЕЦ КАК ВзносФОТ
					|ПОМЕСТИТЬ ВТПараметрыКатегорий2016
					|ИЗ
					|	РегистрСведений.ПараметрыКатегорийЕСВ.СрезПоследних(
					|			&Дата2016,
					|			(Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ОсновнаяЗарплата)
					|				ИЛИ Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ПоДоговорамГПХ)
					|				ИЛИ Вид = ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.НачисленияМобилизованным))
					|) КАК ПараметрыКатегорийЕСВСрезПоследних
					|ЛЕВОЕ СОЕДИНЕНИЕ
					|	ВТСоответствиеКатегорий КАК СоответствиеКатегорий
					|ПО 
					|	ПараметрыКатегорийЕСВСрезПоследних.Категория = СоответствиеКатегорий.Категория
					|
					|;
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносыФОТ.Ссылка КАК Ссылка,
					|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносыФОТ.Сотрудник КАК Сотрудник,
					|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносыФОТ.Налог КАК Налог,
					|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносыФОТ.Ссылка.Организация КАК Организация,
					|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносыФОТ.Ссылка.Проведен КАК Проведен,
					|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносыФОТ.Ссылка.Ответственный КАК Ответственный,
					|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносыФОТ.Ссылка.Номер КАК Номер,
					|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносыФОТ.Ссылка.Дата КАК Дата,
					|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносыФОТ.Ссылка.ИндексацияЗаработка КАК ИндексацияЗаработка,
					|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносыФОТ.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
					|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносыФОТ.ДатаДействия КАК ДатаДействия,
					|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносыФОТ.Действие КАК Действие
					|ПОМЕСТИТЬ ВТВзносыФОТ
					|ИЗ
					|	Документ.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.ВзносыФОТ КАК УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносыФОТ
					|ГДЕ
					|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносыФОТ.Ссылка В (&СписокДокументов)
					|	И УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносыФОТ.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
					|	И УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносыФОТ.Налог В
					|			(ВЫБРАТЬ
					|				ПараметрыКатегорий.ВзносФОТ
					|			ИЗ
					|				ВТПараметрыКатегорий2016 КАК ПараметрыКатегорий
					| 			ОБЪЕДИНИТЬ  
					|			ВЫБРАТЬ
					|				ПараметрыКатегорий.ВзносФОТ
					|			ИЗ
					|				ВТПараметрыКатегорий2015 КАК ПараметрыКатегорий)
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	Ссылка,
					|	Сотрудник
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносы.Ссылка КАК Ссылка,
					|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносы.Сотрудник КАК Сотрудник,
					|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносы.Налог КАК Налог,
					|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносы.Действие КАК Действие
					|ПОМЕСТИТЬ ВТВзносы
					|ИЗ
					|	Документ.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.Взносы КАК УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносы
					|ГДЕ
					|	УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносы.Ссылка В (&СписокДокументов)
					|	И УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносы.Действие <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
					|	И УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизацийВзносы.Налог В
					|			(ВЫБРАТЬ
					|				ПараметрыКатегорий.Взнос
					|			ИЗ
					|				ВТПараметрыКатегорий2015 КАК ПараметрыКатегорий)
					|
					|ИНДЕКСИРОВАТЬ ПО
					|	Ссылка,
					|	Сотрудник
					|;
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВзносыФОТ.* Из ВТВзносыФОТ КАК ВзносыФОТ
					|;
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВзносыФОТ.Ссылка КАК Ссылка,
					|	ВзносыФОТ.Сотрудник КАК Сотрудник,
					|	ВЫБОР
					|		КОГДА ЕСТЬNULL(Взносы.Налог, ЗНАЧЕНИЕ(Справочник.Налоги.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Налоги.ПустаяСсылка)
					|				И ЕСТЬNULL(ПараметрыКатегорий2016.Категория, ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)
					|			ТОГДА ПараметрыКатегорий2016.Категория
					|		ИНАЧЕ ПараметрыКатегорий2015.Категория
					|	КОНЕЦ КАК КатегорияЕСВ
					|ПОМЕСТИТЬ ВТВзносыИКатегорииЕСВ
					|ИЗ
					|	ВТВзносыФОТ КАК ВзносыФОТ
					|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВзносы КАК Взносы
					|		ПО ВзносыФОТ.Ссылка = Взносы.Ссылка
					|			И ВзносыФОТ.Сотрудник = Взносы.Сотрудник
					|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыКатегорий2015 КАК ПараметрыКатегорий2015
					|		ПО ВзносыФОТ.Налог = ПараметрыКатегорий2015.ВзносФОТ
					|			И (Взносы.Налог = ПараметрыКатегорий2015.Взнос)
					|			И (Взносы.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить)
					|				ИЛИ Взносы.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)
					|				ИЛИ (ВзносыФОТ.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить)
					|					ИЛИ ВзносыФОТ.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать)))
					|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПараметрыКатегорий2016 КАК ПараметрыКатегорий2016
					|		ПО (ВЫБОР
					|				КОГДА ЕСТЬNULL(Взносы.Налог, ЗНАЧЕНИЕ(Справочник.Налоги.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Налоги.ПустаяСсылка)
					|					ТОГДА ВзносыФОТ.Налог = ПараметрыКатегорий2016.ВзносФОТ
					|			КОНЕЦ)
					|			И (ВзносыФОТ.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Изменить)
					|				ИЛИ ВзносыФОТ.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Начать))
					|ГДЕ
					|	НЕ ВЫБОР
					|				КОГДА ЕСТЬNULL(Взносы.Налог, ЗНАЧЕНИЕ(Справочник.Налоги.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Налоги.ПустаяСсылка)
					|						И ЕСТЬNULL(ПараметрыКатегорий2016.Категория, ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)
					|					ТОГДА ПараметрыКатегорий2016.Категория
					|				ИНАЧЕ ПараметрыКатегорий2015.Категория
					|			КОНЕЦ = ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ВзносыИКатегорииЕСВ.Ссылка КАК Ссылка,
					|	ВзносыИКатегорииЕСВ.Сотрудник КАК Сотрудник,
					|	МАКСИМУМ(ВзносыИКатегорииЕСВ.КатегорияЕСВ) КАК КатегорияЕСВ
					|ИЗ
					|	ВТВзносыИКатегорииЕСВ КАК ВзносыИКатегорииЕСВ
					|
					|СГРУППИРОВАТЬ ПО
					|	ВзносыИКатегорииЕСВ.Ссылка,
					|	ВзносыИКатегорииЕСВ.Сотрудник";

    РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаПоДокументам = РезультатыЗапроса[5].Выбрать();
	ВыборкаПоКатегориям = РезультатыЗапроса[7].Выбрать();
	
	Пока ВыборкаПоДокументам.СледующийПоЗначениюПоля("Ссылка") Цикл
		НачатьТранзакцию();
		Пока ВыборкаПоДокументам.Следующий() Цикл
		
			ДанныеВыгружаемогоДокумента = СтруктураДанныхДокументавВводПлановыхНачислений();
			
			ВыборкаПоКатегориям.Сбросить();
	        СтруктураПоиска = Новый Структура("Ссылка, Сотрудник", ВыборкаПоДокументам.Ссылка, ВыборкаПоДокументам.Сотрудник);	

			Если ВыборкаПоКатегориям.НайтиСледующий(СтруктураПоиска) Тогда
				ВыборкаПоКатегориям.СледующийПоЗначениюПоля("Ссылка");
				ВыборкаПоКатегориям.СледующийПоЗначениюПоля("Сотрудник");
				Если ВыборкаПоКатегориям.Следующий() Тогда
					ДанныеВыгружаемогоДокумента.КатегорияЕСВ = ВыборкаПоКатегориям.КатегорияЕСВ;
				КонецЕсли;
			Иначе Продолжить;	
			КонецЕсли;	
			
			ДанныеВыгружаемогоДокумента.Организация = ВыборкаПоДокументам.Организация;
			ДанныеВыгружаемогоДокумента.Сотрудник = ВыборкаПоДокументам.Сотрудник;
			ДанныеВыгружаемогоДокумента.ДатаНачала = ВыборкаПоДокументам.ДатаДействия;
			ДанныеВыгружаемогоДокумента.Ответственный = ВыборкаПоДокументам.Ответственный;
			ДанныеВыгружаемогоДокумента.Дата = ВыборкаПоДокументам.Дата;
			ДанныеВыгружаемогоДокумента.Номер = ВыборкаПоДокументам.Номер;
			ДанныеВыгружаемогоДокумента.Проведен = ВыборкаПоДокументам.Проведен;
			ДанныеВыгружаемогоДокумента.ИзменитьПодразделениеИДолжность = Ложь;
			ДанныеВыгружаемогоДокумента.ФизическоеЛицо = ВыборкаПоДокументам.ФизическоеЛицо; 
			ДанныеВыгружаемогоДокумента.Ссылка = ВыборкаПоДокументам.Ссылка;
			ДанныеВыгружаемогоДокумента.ИндексацияЗаработка = ВыборкаПоДокументам.ИндексацияЗаработка;
			
			КонвертированныйДокумент = КонвертироватьДанныеДокумента(ДанныеВыгружаемогоДокумента, СоответствиеКонвертированныхОбъектов);
			
			Результат.Вставить(ВыборкаПоДокументам.Ссылка, КонвертированныйДокумент);
			Если ВыборкаПоДокументам.Ссылка.Проведен Тогда
				КонвертироватьПорциюДанныхЕСВ(КонвертированныйДокумент.ПолучитьОбъект());												
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	КонецЦикла;	
	
	Возврат Результат;
КонецФункции	


Функция СтруктураДанныхДокументавВводПлановыхНачислений()
	СтруктураДанныхДокумента = Новый Структура;
	
	СтруктураДанныхДокумента.Вставить("Организация");
	СтруктураДанныхДокумента.Вставить("Сотрудник");
	СтруктураДанныхДокумента.Вставить("ДатаНачала");
	СтруктураДанныхДокумента.Вставить("Ответственный");
	СтруктураДанныхДокумента.Вставить("Дата");
	СтруктураДанныхДокумента.Вставить("Номер");
	СтруктураДанныхДокумента.Вставить("Проведен");
	СтруктураДанныхДокумента.Вставить("ИзменитьПодразделениеИДолжность");
	СтруктураДанныхДокумента.Вставить("ИзменитьНачисления");
	СтруктураДанныхДокумента.Вставить("ПричинаПеревода");
	СтруктураДанныхДокумента.Вставить("Ссылка");
	СтруктураДанныхДокумента.Вставить("ФизическоеЛицо");
	СтруктураДанныхДокумента.Вставить("ИндексацияЗаработка");
	СтруктураДанныхДокумента.Вставить("КатегорияЕСВ");
	СтруктураДанныхДокумента.Вставить("Подразделение");
	СтруктураДанныхДокумента.Вставить("Должность");
	СтруктураДанныхДокумента.Вставить("ФиксированнаяИндексация");

	Начисления = Новый ТаблицаЗначений;
	Начисления.Колонки.Добавить("Начисление");
	Начисления.Колонки.Добавить("Размер");
	
	НачисленияДо = Новый ТаблицаЗначений;
	НачисленияДо.Колонки.Добавить("Начисление");
	НачисленияДо.Колонки.Добавить("Размер");
	НачисленияДо.Колонки.Добавить("Результат");
	
	НачисленияПосле = Новый ТаблицаЗначений;
	НачисленияПосле.Колонки.Добавить("Начисление");
	НачисленияПосле.Колонки.Добавить("Размер");
	НачисленияПосле.Колонки.Добавить("Результат");
	
	СтруктураДанныхДокумента.Вставить("Начисления", Начисления);
	СтруктураДанныхДокумента.Вставить("НачисленияДо", НачисленияДо);
	СтруктураДанныхДокумента.Вставить("НачисленияПосле", НачисленияПосле);

	Возврат СтруктураДанныхДокумента;
	
КонецФункции	

Функция СоответствиеРеквизитовДокументавВводПлановыхНачислений()
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
	СоответствиеРеквизитов.Вставить("Проведен", "Проведен");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");
	СоответствиеРеквизитов.Вставить("Сотрудник", "Сотрудник");
	СоответствиеРеквизитов.Вставить("ДатаНачала", "ДатаНачала");
	СоответствиеРеквизитов.Вставить("ФизическоеЛицо", "ФизическоеЛицо");
	СоответствиеРеквизитов.Вставить("ИзменитьПодразделениеИДолжность", "ИзменитьПодразделениеИДолжность");
	СоответствиеРеквизитов.Вставить("ИзменитьНачисления", "ИзменитьНачисления");
	СоответствиеРеквизитов.Вставить("КатегорияЕСВ", "КатегорияЕСВ");
	
	СоответствиеРеквизитовТЧ = Новый Структура;
	СоответствиеРеквизитовТЧ.Вставить("ИмяТЧ", "Начисления");
	СоответствиеРеквизитовТЧ.Вставить("Начисление", "Начисление");
	СоответствиеРеквизитовТЧ.Вставить("Размер", "Размер");
		
	СоответствиеРеквизитов.Вставить("Начисления", СоответствиеРеквизитовТЧ);
	
	
	
	
	
	Возврат СоответствиеРеквизитов;
КонецФункции	

Процедура КонвертироватьДвижениявВводаПлановыхНачислений(Документ, Сотрудник, СоответствиеКонвертированныхОбъектов, НовыйРегистратор)
	КлючПорцииДанных = Новый Структура("Регистратор, Сотрудник, Период", Документ, Сотрудник, НовыйРегистратор.ДатаНачала);
	
	КонвертироватьПорциюДанныхПлановыхНачислений(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, Ложь, НовыйРегистратор);
	
	КонвертироватьПорциюДанныхЕСВ(НовыйРегистратор);

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////
// Изменение параметров расчета индексации

Процедура КонвертироватьДвиженияИзмененияПараметровРасчетаИндексации(Документ, Сотрудник, СоответствиеКонвертированныхОбъектов, НовыйРегистратор)
	
	КлючПорцииДанных = Новый Структура("Регистратор, Сотрудник", Документ, Сотрудник);
	КонвертироватьПорциюДанныхПараметровИндексации(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, Ложь, НовыйРегистратор);	
	
КонецПроцедуры

Процедура ВписатьНачисленияДоВДанныеДокументаИзмененияПараметровРасчетаИндексации(ДанныеВыгружаемогоДокумента, ВыборкаПоНачислениямДо)
	ВыборкаПоНачислениямДо.Сбросить();
	
	СтруктураПоиска = Новый Структура("Ссылка, Сотрудник", ДанныеВыгружаемогоДокумента.Ссылка, ДанныеВыгружаемогоДокумента.Сотрудник);	
	
	Если ВыборкаПоНачислениямДо.НайтиСледующий(СтруктураПоиска) Тогда
		ВыборкаПоНачислениямДо.СледующийПоЗначениюПоля("Ссылка");
		ВыборкаПоНачислениямДо.СледующийПоЗначениюПоля("Сотрудник");
		
		Пока ВыборкаПоНачислениямДо.Следующий() Цикл
			СтрокаНачислений = ДанныеВыгружаемогоДокумента.НачисленияДо.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаНачислений, ВыборкаПоНачислениямДо);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВписатьНачисленияПослеВДанныеДокументаИзмененияПараметровРасчетаИндексации(ДанныеВыгружаемогоДокумента, ВыборкаПоНачислениямПосле)
	ВыборкаПоНачислениямПосле.Сбросить();
	
	СтруктураПоиска = Новый Структура("Ссылка, Сотрудник", ДанныеВыгружаемогоДокумента.Ссылка, ДанныеВыгружаемогоДокумента.Сотрудник);	
	
	Если ВыборкаПоНачислениямПосле.НайтиСледующий(СтруктураПоиска) Тогда
		ВыборкаПоНачислениямПосле.СледующийПоЗначениюПоля("Ссылка");
		ВыборкаПоНачислениямПосле.СледующийПоЗначениюПоля("Сотрудник");
		
		Пока ВыборкаПоНачислениямПосле.Следующий() Цикл
			СтрокаНачислений = ДанныеВыгружаемогоДокумента.НачисленияПосле.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаНачислений, ВыборкаПоНачислениямПосле);
		КонецЦикла;	
	КонецЕсли;	
	
КонецПроцедуры

Функция СоответствиеРеквизитовДокументаПараметрыИндексации()
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
	СоответствиеРеквизитов.Вставить("Проведен", "Проведен");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");
	СоответствиеРеквизитов.Вставить("Сотрудник", "Сотрудник");
	СоответствиеРеквизитов.Вставить("Подразделение", "Подразделение");
	СоответствиеРеквизитов.Вставить("Должность", "Должность");
	СоответствиеРеквизитов.Вставить("ДатаИзменения", "ДатаНачала");
	СоответствиеРеквизитов.Вставить("ФизическоеЛицо", "ФизическоеЛицо");
	СоответствиеРеквизитов.Вставить("ФиксированнаяИндексация", "ФиксированнаяИндексация");
	
	СоответствиеРеквизитовТЧ = Новый Структура;
	СоответствиеРеквизитовТЧ.Вставить("ИмяТЧ", "НачисленияДо");
	СоответствиеРеквизитовТЧ.Вставить("Начисление", "Начисление");
	СоответствиеРеквизитовТЧ.Вставить("Размер", "Размер");
	СоответствиеРеквизитовТЧ.Вставить("Результат", "Результат");
	
	СоответствиеРеквизитов.Вставить("НачисленияДо", СоответствиеРеквизитовТЧ);
	
	СоответствиеРеквизитовТЧ = Новый Структура;
	СоответствиеРеквизитовТЧ.Вставить("ИмяТЧ", "НачисленияПосле");
	СоответствиеРеквизитовТЧ.Вставить("Начисление", "Начисление");
	СоответствиеРеквизитовТЧ.Вставить("Размер", "Размер");
	СоответствиеРеквизитовТЧ.Вставить("Результат", "Результат");
	
	СоответствиеРеквизитов.Вставить("НачисленияПосле", СоответствиеРеквизитовТЧ);

	Возврат СоответствиеРеквизитов;
КонецФункции	

//////////////////////////////////////////////////////////////////////////////////////////////
// УВОЛЬНЕНИЕ

Функция СписокДокументовУвольнение()
	СписокДокументов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьУвольнениеИзОрганизаций.Ссылка
	|ИЗ
	|	Документ.УдалитьУвольнениеИзОрганизаций КАК УдалитьУвольнениеИзОрганизаций
	|ГДЕ
	|	УдалитьУвольнениеИзОрганизаций.Проведен = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокДокументов.Добавить(Выборка.Ссылка);		
	КонецЦикла;	
	
	Возврат СписокДокументов;
КонецФункции	

Функция КонвертироватьДокументыУвольнение(СписокДокументов, СоответствиеКонвертированныхОбъектов)
	НеконвертированныеДокументы = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СписокДокументов);
	
	Результат = Новый Соответствие;
			
	СоответствиеКонвертированныхДокументов = СоответствиеКонвертированнымДокументов(СписокДокументов, СоответствиеКонвертированныхОбъектов);
	
	Для Каждого СконвертированныйДокумент Из СоответствиеКонвертированныхДокументов Цикл
		Результат.Вставить(СконвертированныйДокумент.Ключ, СконвертированныйДокумент.Значение);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, СконвертированныйДокумент.Ключ);
	КонецЦикла;	

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Ссылка КАК КонвертируемыйДокумент,
	|	Увольнение.Ссылка КАК КонвертированныйДокумент
	|ИЗ
	|	Документ.УдалитьУвольнениеИзОрганизаций.РаботникиОрганизации КАК УдалитьУвольнениеИзОрганизацийРаботникиОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Увольнение КАК Увольнение
	|		ПО УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник = Увольнение.Сотрудник
	|			И УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения = Увольнение.ДатаУвольнения
	|			И УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Дата = Увольнение.Дата
	|			И УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Проведен = Увольнение.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.КонвертируемыйДокумент, Выборка.КонвертированныйДокумент);
		
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(НеконвертированныеДокументы, Выборка.КонвертируемыйДокумент);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументов", НеконвертированныеДокументы);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Ссылка КАК Ссылка,
	|	УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Физлицо,
	|	УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения,
	|	УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.ОснованиеУвольнения КАК СтатьяКЗоТ,
	|	УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Дата,
	|	УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Номер,
	|	УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Проведен,
	|	УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Организация,
	|	УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Ответственный,
	|	УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Документ.УдалитьУвольнениеИзОрганизаций.РаботникиОрганизации КАК УдалитьУвольнениеИзОрганизацийРаботникиОрганизации
	|ГДЕ
	|	УдалитьУвольнениеИзОрганизацийРаботникиОрганизации.Ссылка В(&СписокДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник";
	
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПоДокументам.СледующийПоЗначениюПоля("Ссылка") Цикл
		НачатьТранзакцию();
		Пока ВыборкаПоДокументам.Следующий() Цикл
			ДанныеВыгружаемогоДокумента = СтруктураДанныхДокументаУвольнение();
			
			ДанныеВыгружаемогоДокумента.Организация = ВыборкаПоДокументам.Организация;
			ДанныеВыгружаемогоДокумента.Сотрудник = ВыборкаПоДокументам.Сотрудник;
			ДанныеВыгружаемогоДокумента.ДатаУвольнения = ВыборкаПоДокументам.ДатаУвольнения;
			ДанныеВыгружаемогоДокумента.СтатьяКЗоТ = ВыборкаПоДокументам.СтатьяКЗоТ;
			ДанныеВыгружаемогоДокумента.Ответственный = ВыборкаПоДокументам.Ответственный;
			ДанныеВыгружаемогоДокумента.Дата = ВыборкаПоДокументам.Дата;
			ДанныеВыгружаемогоДокумента.Номер = ВыборкаПоДокументам.Номер;
			ДанныеВыгружаемогоДокумента.Проведен = ВыборкаПоДокументам.Проведен;
			ДанныеВыгружаемогоДокумента.ФизическоеЛицо = ВыборкаПоДокументам.ФизическоеЛицо;
			ДанныеВыгружаемогоДокумента.Ссылка = ВыборкаПоДокументам.Ссылка;
						
			КонвертированныйДокумент = КонвертироватьДанныеДокумента(ДанныеВыгружаемогоДокумента, СоответствиеКонвертированныхОбъектов);
			
			Результат.Вставить(ВыборкаПоДокументам.Ссылка, КонвертированныйДокумент);
			
			КонвертироватьДвиженияУвольнения(ДанныеВыгружаемогоДокумента.Ссылка, 
									ДанныеВыгружаемогоДокумента.Сотрудник, 
									СоответствиеКонвертированныхОбъектов, 
									КонвертированныйДокумент.ПолучитьОбъект());
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции	

Функция СтруктураДанныхДокументаУвольнение()
	СтруктураДанныхДокумента = Новый Структура;
	
	СтруктураДанныхДокумента.Вставить("Организация");
	СтруктураДанныхДокумента.Вставить("Сотрудник");
	СтруктураДанныхДокумента.Вставить("ФизическоеЛицо");
	СтруктураДанныхДокумента.Вставить("ДатаУвольнения");
	СтруктураДанныхДокумента.Вставить("Ответственный");
	СтруктураДанныхДокумента.Вставить("СтатьяКЗоТ");
	СтруктураДанныхДокумента.Вставить("Дата");
	СтруктураДанныхДокумента.Вставить("Номер");
	СтруктураДанныхДокумента.Вставить("Проведен");
	СтруктураДанныхДокумента.Вставить("Ссылка");
		
	Начисления = Новый ТаблицаЗначений;
	Начисления.Колонки.Добавить("Начисление");
	Начисления.Колонки.Добавить("Размер");
	
	СтруктураДанныхДокумента.Вставить("Начисления", Начисления);
	
	Возврат СтруктураДанныхДокумента;
	
КонецФункции	

Функция СоответствиеРеквизитовДокументаУвольнение()
	СоответствиеРеквизитов = Новый Структура;
	
	СоответствиеРеквизитов.Вставить("Дата", "Дата");
	СоответствиеРеквизитов.Вставить("Проведен", "Проведен");
	СоответствиеРеквизитов.Вставить("Организация", "Организация");
	СоответствиеРеквизитов.Вставить("Сотрудник", "Сотрудник");
	СоответствиеРеквизитов.Вставить("ФизическоеЛицо", "ФизическоеЛицо");
	СоответствиеРеквизитов.Вставить("СтатьяКЗоТ", "СтатьяКЗоТ");
	СоответствиеРеквизитов.Вставить("ДатаУвольнения", "ДатаУвольнения");
	
	Возврат СоответствиеРеквизитов;
КонецФункции	

Процедура КонвертироватьДвиженияУвольнения(Документ, Сотрудник, СоответствиеКонвертированныхОбъектов, НовыйРегистратор)
	КлючПорцииДанных = Новый Структура("Регистратор, Сотрудник", Документ, Сотрудник);
	
	КонвертироватьПорциюДанныхКадровойИстории(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, Ложь, НовыйРегистратор);
	
	КонвертироватьПорциюДанныхПлановыхНачислений(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, Ложь, НовыйРегистратор);
	
	КонвертироватьПрекращениеДействияЕСВПриУвольнении(НовыйРегистратор);
КонецПроцедуры	

//////////////////////////////////////////////////////////////////////////////////////////////
// ВЕДОМОСТЬ НА ВЫПЛАТУ ЗАРПЛАТЫ

Процедура КонвертироватьДокументыВедомостьНаВыплатуЗарплаты()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	ВедомостьНаВыплатуЗарплаты.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплаты КАК ВедомостьНаВыплатуЗарплаты
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплаты.ПометкаУдаления = ЛОЖЬ
	|
	|";

	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		НачатьТранзакцию();
		
		РегистраторОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаПараметрыОплаты Из РегистраторОбъект.ЭтотОбъект.ПараметрыОплаты Цикл
			
			СтрокаПараметрыОплаты.Физлицо = ?(ЗначениеЗаполнено(СтрокаПараметрыОплаты.Сотрудник), СтрокаПараметрыОплаты.Сотрудник.ФизическоеЛицо, Справочники.ФизическиеЛица.ПустаяСсылка());
			
		КонецЦикла;
		
		РегистраторОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;	
	
КонецПроцедуры	

//////////////////////////////////////////////////////////////////////////////////////////////
// КАДРОВАЯ ИСТОРИЯ СОТРУДНИКОВ

Процедура КонвертироватьПорциюДанныхКадровойИстории(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, ТолькоДвиженияНепереносимыхРегистраторов = Ложь, НовыйРегистратор = Неопределено)
	НачатьТранзакцию();
	
	ДанныеКадровойИстории = ДанныеКадровойИстории(КлючПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов);	
	
	ЗарегистрироватьЗаписиКадровойИсторииСотрудников(ДанныеКадровойИстории, СоответствиеКонвертированныхОбъектов, НовыйРегистратор);
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры	

Функция ДанныеКадровойИстории(КлючиПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов = Ложь)
	Запрос = Новый Запрос;
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Запрос.УстановитьПараметр(КлючДанных.Ключ, КлючДанных.Значение);		
	КонецЦикла;	
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		Запрос.УстановитьПараметр("ТипыПереносимыхДокументов", КонвертируемыеТипыДокументовБП2());
	КонецЕсли;	

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИНАГРО_РаботникиОрганизаций.Сотрудник,
	|	ИНАГРО_РаботникиОрганизаций.Организация КАК Организация,
	|	ИНАГРО_РаботникиОрганизаций.Организация КАК ГоловнаяОрганизация,
	|	ИНАГРО_РаботникиОрганизаций.Сотрудник.ИНАГРО_ВидЗанятости КАК ВидЗанятости,  //ИНАГРО
	|	ИНАГРО_РаботникиОрганизаций.ПодразделениеОрганизации КАК Подразделение,
	|	ИНАГРО_РаботникиОрганизаций.Должность,
	|	ИНАГРО_РаботникиОрганизаций.ПричинаИзмененияСостояния,
	|	ИНАГРО_РаботникиОрганизаций.ПринятНаНовоеРабочееМесто,
	|	ИНАГРО_РаботникиОрганизаций.ДатаСозданияРабочегоМеста,
	//|	ИНАГРО_РаботникиОрганизаций.ЗанимаемыхСтавок,
	|	ИНАГРО_РаботникиОрганизаций.Период,
	|	ИНАГРО_РаботникиОрганизаций.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК ИНАГРО_РаботникиОрганизаций
	|ГДЕ
	|	&Условие
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	
	ТекстУсловия = "";
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Если ТипЗнч(КлючДанных.Значение) = Тип("Массив") Тогда
			ТекстУсловия = ТекстУсловия + " И ИНАГРО_РаботникиОрганизаций." +  КлючДанных.Ключ + " В (&" + КлючДанных.Ключ + ")";
		Иначе
			ТекстУсловия = ТекстУсловия + " И ИНАГРО_РаботникиОрганизаций." +  КлючДанных.Ключ + " = &" + КлючДанных.Ключ;
		КонецЕсли;		
	КонецЦикла;	
	
	ТекстУсловия = Сред(ТекстУсловия, 3);
		
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		ТекстУсловия = ТекстУсловия + " И НЕ ТИПЗНАЧЕНИЯ(ИНАГРО_РаботникиОрганизаций.Регистратор) В (&ТипыПереносимыхДокументов)";
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);

	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции	

Процедура ЗарегистрироватьЗаписиКадровойИсторииСотрудников(ДанныеКадровойИстории, СоответствиеКонвертированныхОбъектов, НовыйРегистратор = Неопределено)
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса = НовыйРегистратор;
	КонецЕсли;	
	
	Пока ДанныеКадровойИстории.СледующийПоЗначениюПоля("Организация") Цикл
		Если НовыйРегистратор = Неопределено Тогда
			ДокументПереноса = ДокументПереносаДанных(ДанныеКадровойИстории.Период, ДанныеКадровойИстории.Организация, , "КадроваяИсторияСотрудников");
			ДокументПереноса.ОбменДанными.Загрузка = Истина;
		КонецЕсли;	
		
		Пока ДанныеКадровойИстории.Следующий() Цикл
			ЗаписьКадровойИстории = ДокументПереноса.Движения.КадроваяИсторияСотрудников.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьКадровойИстории, ДанныеКадровойИстории);
			ЗаписьКадровойИстории.ВидСобытия = КонвертироватьДанные(ДанныеКадровойИстории.ПричинаИзмененияСостояния, СоответствиеКонвертированныхОбъектов);
		КонецЦикла;	
		
		Если НовыйРегистратор = Неопределено Тогда
			ДокументПереноса.Движения.КадроваяИсторияСотрудников.Записывать = Истина;
			ДокументПереноса.Записать();
		КонецЕсли;	
	КонецЦикла;	
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса.Движения.КадроваяИсторияСотрудников.Записать();
	КонецЕсли;	
КонецПроцедуры	

//////////////////////////////////////////////////////////////////////////////////////////////
// ПЛАНОВЫЕ НАЧИСЛЕНИЯ СОТРУДНИКОВ 

Процедура КонвертироватьПорциюДанныхПлановыхНачислений(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, ТолькоДвиженияНепереносимыхРегистраторов = Ложь, НовыйРегистратор = Неопределено)
	НачатьТранзакцию();
	
	ДанныеПлановыхНачислений = ДанныеПлановыхНачислений(КлючПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов);
	
	ЗарегистрироватПлановыеНачисления(ДанныеПлановыхНачислений, СоответствиеКонвертированныхОбъектов, НовыйРегистратор);
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры

Функция ДанныеПлановыхНачислений(КлючиПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов = Ложь)
	Запрос = Новый Запрос;
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Запрос.УстановитьПараметр(КлючДанных.Ключ, КлючДанных.Значение);		
	КонецЦикла;	
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		Запрос.УстановитьПараметр("ТипыПереносимыхДокументов", КонвертируемыеТипыДокументовБП2());
	КонецЕсли;	

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА КОНЕЦПЕРИОДА(УдалитьПлановыеНачисленияРаботниковОрганизаций.Период, ДЕНЬ) = УдалитьПлановыеНачисленияРаботниковОрганизаций.Период
	|   	ТОГДА ДОБАВИТЬКДАТЕ(УдалитьПлановыеНачисленияРаботниковОрганизаций.Период, Секунда, 1)
	|       ИНАЧЕ УдалитьПлановыеНачисленияРаботниковОрганизаций.Период
	|   КОНЕЦ КАК Период,
	|	УдалитьПлановыеНачисленияРаботниковОрганизаций.Сотрудник,
	|	УдалитьПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение КАК Начисление,
	|	УдалитьПлановыеНачисленияРаботниковОрганизаций.Размер,
	|	УдалитьПлановыеНачисленияРаботниковОрганизаций.Организация,
	|	УдалитьПлановыеНачисленияРаботниковОрганизаций.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.УдалитьПлановыеНачисленияРаботниковОрганизаций КАК УдалитьПлановыеНачисленияРаботниковОрганизаций
	|ГДЕ
	|   УдалитьПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение <> ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка) И
	|	&Условие";
	
	ТекстУсловия = "";
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Если ТипЗнч(КлючДанных.Значение) = Тип("Массив") Тогда
			ТекстУсловия = ТекстУсловия + " И УдалитьПлановыеНачисленияРаботниковОрганизаций." +  КлючДанных.Ключ + " В (&" + КлючДанных.Ключ + ")";
		Иначе
			ТекстУсловия = ТекстУсловия + " И УдалитьПлановыеНачисленияРаботниковОрганизаций." +  КлючДанных.Ключ + " = &" + КлючДанных.Ключ;
		КонецЕсли;		
	КонецЦикла;	
	
	ТекстУсловия = Сред(ТекстУсловия, 3);
		
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		ТекстУсловия = ТекстУсловия + " И НЕ ТИПЗНАЧЕНИЯ(УдалитьПлановыеНачисленияРаботниковОрганизаций.Регистратор) В (&ТипыПереносимыхДокументов)";
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);

	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции	

Процедура ЗарегистрироватПлановыеНачисления(ДанныеПлановыхНачислений, СоответствиеКонвертированныхОбъектов, НовыйРегистратор = Неопределено)
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса = НовыйРегистратор;
	КонецЕсли;	
	
	Пока ДанныеПлановыхНачислений.СледующийПоЗначениюПоля("Организация") Цикл
		Если НовыйРегистратор = Неопределено Тогда
			ДокументПереноса = ДокументПереносаДанных(ДанныеПлановыхНачислений.Период, ДанныеПлановыхНачислений.Организация, , "ПлановыеНачисления");
			ДокументПереноса.ОбменДанными.Загрузка = Истина;
		КонецЕсли;	
		
		Пока ДанныеПлановыхНачислений.Следующий() Цикл
			ЗаписьПлановогоНачисления = ДокументПереноса.Движения.ПлановыеНачисления.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьПлановогоНачисления, ДанныеПлановыхНачислений);
			ЗаписьПлановогоНачисления.Начисление = КонвертироватьДанные(ДанныеПлановыхНачислений.Начисление, СоответствиеКонвертированныхОбъектов);
		КонецЦикла;	
			
		Если НовыйРегистратор = Неопределено Тогда
			ДокументПереноса.Движения.ПлановыеНачисления.Записывать = Истина;
			ДокументПереноса.Записать();
		КонецЕсли;	
	КонецЦикла;
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса.Движения.ПлановыеНачисления.Записать();
	КонецЕсли;	
КонецПроцедуры	

//////////////////////////////////////////////////////////////////////////////////////////////
// ПЛАНОВЫЕ Удержания СОТРУДНИКОВ 

Процедура КонвертироватьПорциюДанныхПлановыхУдержаний(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, ТолькоДвиженияНепереносимыхРегистраторов = Ложь, НовыйРегистратор = Неопределено)
	НачатьТранзакцию();
	
	ДанныеПлановыхУдержаний = ДанныеПлановыхУдержаний(КлючПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов);
	
	ЗарегистрироватПлановыеУдержания(ДанныеПлановыхУдержаний, СоответствиеКонвертированныхОбъектов, НовыйРегистратор);
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры

Функция ДанныеПлановыхУдержаний(КлючиПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов = Ложь)
	Запрос = Новый Запрос;
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Запрос.УстановитьПараметр(КлючДанных.Ключ, КлючДанных.Значение);		
	КонецЦикла;	
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		Запрос.УстановитьПараметр("ТипыПереносимыхДокументов", КонвертируемыеТипыДокументовБП2());
	КонецЕсли;	

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьПлановыеУдержанияРаботниковОрганизаций.Период,
	|	УдалитьПлановыеУдержанияРаботниковОрганизаций.Сотрудник,
	|	УдалитьПлановыеУдержанияРаботниковОрганизаций.ВидРасчета КАК Удержание,
	|	УдалитьПлановыеУдержанияРаботниковОрганизаций.Размер,
	|	УдалитьПлановыеУдержанияРаботниковОрганизаций.Организация,
	|	УдалитьПлановыеУдержанияРаботниковОрганизаций.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.УдалитьПлановыеУдержанияРаботниковОрганизаций КАК УдалитьПлановыеУдержанияРаботниковОрганизаций
	|ГДЕ
	|   УдалитьПлановыеУдержанияРаботниковОрганизаций.ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.Удержания.ПустаяСсылка) И
	|	&Условие";
	
	ТекстУсловия = "";
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Если ТипЗнч(КлючДанных.Значение) = Тип("Массив") Тогда
			ТекстУсловия = ТекстУсловия + " И УдалитьПлановыеУдержанияРаботниковОрганизаций." +  КлючДанных.Ключ + " В (&" + КлючДанных.Ключ + ")";
		Иначе
			ТекстУсловия = ТекстУсловия + " И УдалитьПлановыеУдержанияРаботниковОрганизаций." +  КлючДанных.Ключ + " = &" + КлючДанных.Ключ;
		КонецЕсли;		
	КонецЦикла;	
	
	ТекстУсловия = Сред(ТекстУсловия, 3);
		
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		ТекстУсловия = ТекстУсловия + " И НЕ ТИПЗНАЧЕНИЯ(УдалитьПлановыеУдержанияРаботниковОрганизаций.Регистратор) В (&ТипыПереносимыхДокументов)";
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);

	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

Процедура ЗарегистрироватПлановыеУдержания(ДанныеПлановыхУдержаний, СоответствиеКонвертированныхОбъектов, НовыйРегистратор = Неопределено)
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса = НовыйРегистратор;
	КонецЕсли;	
	
	Пока ДанныеПлановыхУдержаний.СледующийПоЗначениюПоля("Организация") Цикл
		Если НовыйРегистратор = Неопределено Тогда
			ДокументПереноса = ДокументПереносаДанных(ДанныеПлановыхУдержаний.Период, ДанныеПлановыхУдержаний.Организация, , "ПлановыеУдержания");
			ДокументПереноса.ОбменДанными.Загрузка = Истина;
		КонецЕсли;	
		
		Пока ДанныеПлановыхУдержаний.Следующий() Цикл
			ЗаписьПлановогоУдержания = ДокументПереноса.Движения.ПлановыеУдержания.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьПлановогоУдержания, ДанныеПлановыхУдержаний);
			ЗаписьПлановогоУдержания.Удержание = КонвертироватьДанные(ДанныеПлановыхУдержаний.Удержание, СоответствиеКонвертированныхОбъектов);
		КонецЦикла;	
			
		Если НовыйРегистратор = Неопределено Тогда
			ДокументПереноса.Движения.ПлановыеУдержания.Записывать = Истина;
			ДокументПереноса.Записать();
		КонецЕсли;	
	КонецЦикла;
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса.Движения.ПлановыеУдержания.Записать();
	КонецЕсли;	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////
// Параметры индексации СОТРУДНИКОВ 

Процедура КонвертироватьПорциюДанныхПараметровИндексации(КлючПорцииДанных, СоответствиеКонвертированныхОбъектов, ТолькоДвиженияНепереносимыхРегистраторов = Ложь, НовыйРегистратор = Неопределено)
	НачатьТранзакцию();
	
	ДанныеПараметровРасчетаИндексации = ДанныеПараметровРасчетаИндексации(КлючПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов);
	
	ЗарегистрироватьПараметрыРасчетаИндексации(ДанныеПараметровРасчетаИндексации, СоответствиеКонвертированныхОбъектов, НовыйРегистратор);
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры

Функция ДанныеПараметровРасчетаИндексации(КлючиПорцииДанных, ТолькоДвиженияНепереносимыхРегистраторов = Ложь)
	Запрос = Новый Запрос;
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Запрос.УстановитьПараметр(КлючДанных.Ключ, КлючДанных.Значение);		
	КонецЦикла;	
	
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		Запрос.УстановитьПараметр("ТипыПереносимыхДокументов", КонвертируемыеТипыДокументовБП2());
	КонецЕсли;	

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьПараметрыРасчетаИндексации.Период,
	|	УдалитьПараметрыРасчетаИндексации.Регистратор,
	|	УдалитьПараметрыРасчетаИндексации.НомерСтроки,
	|	УдалитьПараметрыРасчетаИндексации.Активность,
	|	УдалитьПараметрыРасчетаИндексации.Организация,
	|	УдалитьПараметрыРасчетаИндексации.Сотрудник,
	|	УдалитьПараметрыРасчетаИндексации.ПодразделениеОрганизации КАК Подразделение,
	|	УдалитьПараметрыРасчетаИндексации.Должность,
	|	УдалитьПараметрыРасчетаИндексации.Коэффициент,
	|	УдалитьПараметрыРасчетаИндексации.ФиксированнаяИндексация
	|ИЗ
	|	РегистрСведений.УдалитьПараметрыРасчетаИндексации КАК УдалитьПараметрыРасчетаИндексации
	|ГДЕ
	|	&Условие";
	
	ТекстУсловия = "";
	
	Для Каждого КлючДанных Из КлючиПорцииДанных Цикл
		Если ТипЗнч(КлючДанных.Значение) = Тип("Массив") Тогда
			ТекстУсловия = ТекстУсловия + " И УдалитьПараметрыРасчетаИндексации." +  КлючДанных.Ключ + " В (&" + КлючДанных.Ключ + ")";
		Иначе
			ТекстУсловия = ТекстУсловия + " И УдалитьПараметрыРасчетаИндексации." +  КлючДанных.Ключ + " = &" + КлючДанных.Ключ;
		КонецЕсли;		
	КонецЦикла;	
	
	ТекстУсловия = Сред(ТекстУсловия, 3);
		
	Если ТолькоДвиженияНепереносимыхРегистраторов Тогда
		ТекстУсловия = ТекстУсловия + " И НЕ ТИПЗНАЧЕНИЯ(УдалитьПараметрыРасчетаИндексации.Регистратор) В (&ТипыПереносимыхДокументов)";
	КонецЕсли;	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстУсловия);

	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции	

Процедура ЗарегистрироватьПараметрыРасчетаИндексации(ДанныеПараметровРасчетаИндексации, СоответствиеКонвертированныхОбъектов, НовыйРегистратор = Неопределено)
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса = НовыйРегистратор;
	КонецЕсли;	
	
	Пока ДанныеПараметровРасчетаИндексации.СледующийПоЗначениюПоля("Организация") Цикл
		Если НовыйРегистратор = Неопределено Тогда
			ДокументПереноса = ДокументПереносаДанных(ДанныеПараметровРасчетаИндексации.Период, ДанныеПараметровРасчетаИндексации.Организация, , "ПараметрыРасчетаИндексации");
			ДокументПереноса.ОбменДанными.Загрузка = Истина;
		КонецЕсли;	
		
		Пока ДанныеПараметровРасчетаИндексации.Следующий() Цикл
			ЗаписьПараметровРасчетаИндексации = ДокументПереноса.Движения.ПараметрыРасчетаИндексации.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьПараметровРасчетаИндексации, ДанныеПараметровРасчетаИндексации);
			ЗаписьПараметровРасчетаИндексации = КонвертироватьДанные(ДанныеПараметровРасчетаИндексации, СоответствиеКонвертированныхОбъектов);
		КонецЦикла;	
			
		Если НовыйРегистратор = Неопределено Тогда
			ДокументПереноса.Движения.ПараметрыРасчетаИндексации.Записывать = Истина;
			ДокументПереноса.Записать();
		КонецЕсли;	
	КонецЦикла;
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса.Движения.ПараметрыРасчетаИндексации.Записать();
	КонецЕсли;	
КонецПроцедуры	

// параметры расчета индексации по должностям (
Процедура КонвертироватьДанныеИзмененияПараметровРасчетаИндексацииПоДолжностям(СоответствиеКонвертируемыхОбъектов)
	НачатьТранзакцию();
	
	ДанныеПараметровРасчетаИндексации = ДанныеИзмененияПараметровРасчетаИндексацииПоДолжностям();
	
	Пока ДанныеПараметровРасчетаИндексации.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		ДокументПереноса = ДанныеПараметровРасчетаИндексации.Регистратор.ПолучитьОбъект();
		Пока ДанныеПараметровРасчетаИндексации.СледующийПоЗначениюПоля("Должность") Цикл
			ЗаписьПараметровРасчетаИндексации = ДокументПереноса.Движения.ПараметрыРасчетаИндексации.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьПараметровРасчетаИндексации, ДанныеПараметровРасчетаИндексации);
			ЗаписьПараметровРасчетаИндексации = КонвертироватьДанные(ДанныеПараметровРасчетаИндексации, СоответствиеКонвертируемыхОбъектов);
			ДокументПереноса.ОбменДанными.Загрузка = Истина;
			ДокументПереноса.Движения.ПараметрыРасчетаИндексации.Записывать = Истина;
			ДокументПереноса.Записать();
		КонецЦикла;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры

Функция ДанныеИзмененияПараметровРасчетаИндексацииПоДолжностям()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Регистр.Регистратор КАК Регистратор,
	|	Регистр.Период,
	|	Регистр.НомерСтроки,
	|	Регистр.Активность,
	|	Регистр.Организация,
	|	Регистр.Сотрудник,
	|	Регистр.Должность,
	|	Регистр.Коэффициент,
	|	Регистр.ФиксированнаяИндексация,
	|	Регистр.ПодразделениеОрганизации КАК Подразделение
	|ИЗ
	|	РегистрСведений.УдалитьПараметрыРасчетаИндексации КАК Регистр
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Регистр.Регистратор) = ТИП(Документ.ИзменениеПараметровРасчетаИндексацииПоДолжностям)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	Возврат Запрос.Выполнить().Выбрать()
	
КонецФункции
// параметры расчета индексации по должностям )

//////////////////////////////////////////////////////////////////////////////////////////////
// Данные ЕСВ СОТРУДНИКОВ 
Процедура КонвертироватьПорциюДанныхЕСВ(НовыйРегистратор = Неопределено)
	НачатьТранзакцию();
	
    ЗарегистрироватьЕСВ(НовыйРегистратор);
	
	ЗафиксироватьТранзакцию();
КонецПроцедуры

Процедура ЗарегистрироватьЕСВ(НовыйРегистратор = Неопределено)
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса = НовыйРегистратор;
		Если ДокументПереноса.КатегорияЕСВ <> Справочники.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка() Тогда
			ЗаписьЕСВ = ДокументПереноса.Движения.ЕСВСотрудников.Добавить();
			Если ТипЗнч(ДокументПереноса) = Тип("ДокументОбъект.ПриемНаРаботу") Тогда
				ЗаписьЕСВ.Период = ДокументПереноса.ДатаПриема
			Иначе
				ЗаписьЕСВ.Период = ДокументПереноса.Дата
			КонецЕсли;	
			ЗаписьЕСВ.Сотрудник = ДокументПереноса.Сотрудник;
			ЗаписьЕСВ.ФизическоеЛицо = ДокументПереноса.ФизическоеЛицо;
			ЗаписьЕСВ.КатегорияЕСВ = ДокументПереноса.КатегорияЕСВ;
			ДокументПереноса.Движения.ЕСВСотрудников.Записать();
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры	

Процедура КонвертироватьПрекращениеДействияЕСВПриУвольнении(НовыйРегистратор = Неопределено)
	
	Если НовыйРегистратор <> Неопределено Тогда
		ДокументПереноса = НовыйРегистратор;
		ЗаписьЕСВ = ДокументПереноса.Движения.ЕСВСотрудников.Добавить();
		ЗаписьЕСВ.Период = КонецДня(КонецДня(ДокументПереноса.ДатаУвольнения)+1);
		ЗаписьЕСВ.Сотрудник = ДокументПереноса.Сотрудник;
		ЗаписьЕСВ.ФизическоеЛицо = ДокументПереноса.ФизическоеЛицо;
		ЗаписьЕСВ.КатегорияЕСВ = Справочники.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка();
		ДокументПереноса.Движения.ЕСВСотрудников.Записать();
	КонецЕсли;	
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////////////////////
// РЕГИСТРЫ НАКОПЛЕНИЯ

/////////////////////////////////////////////////////////////////////////////////////////////
// ВЗАИМОРАСЧЕТЫ 

Процедура КонвертироватьДанныеУчетаВзаиморасчетовССотрудниками(СоответствиеКонвертируемыхОбъектов)
	
	Выборка = ДанныеВзаиморасчетыССотрудниками();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НачатьТранзакцию();
		НаборЗаписей = РегистрыНакопления.ВзаиморасчетыССотрудниками.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если ЗначениеЗаполнено(ЗаписьНабора.Сотрудник.ФизическоеЛицо) Тогда
				ЗаписьНабора.ФизическоеЛицо = ЗаписьНабора.Сотрудник.ФизическоеЛицо;
			КонецЕсли;	
			Если ЗаписьНабора.ИНАГРО_СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк // ИНАГРО
				Тогда ЗаписьНабора.СпособВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект
			ИначеЕсли ЗаписьНабора.ИНАГРО_СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу // ИНАГРО
				Тогда ЗаписьНабора.СпособВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.Касса
			КонецЕсли;
			//ЗаписьНабора.Сотрудник = Справочники.Сотрудники.ПустаяСсылка(); // ИНАГРО Сотрудника не очищаем.
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	КонецЦикла	

КонецПроцедуры

Функция ДанныеВзаиморасчетыССотрудниками()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Регистр.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыССотрудниками КАК Регистр
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	Возврат Запрос.Выполнить().Выбрать()
	
КонецФункции

//Депоненты

Процедура КонвертироватьДанныеВзаиморасчетовСДепонентами(СоответствиеКонвертируемыхОбъектов)
	
	Выборка = ДанныеВзаиморасчетыСДепонентами();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НачатьТранзакцию();
		НаборЗаписей = РегистрыНакопления.ВзаиморасчетыСДепонентами.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если ЗначениеЗаполнено(ЗаписьНабора.ИНАГРО_Сотрудник.ФизическоеЛицо) Тогда
				ЗаписьНабора.ФизическоеЛицо = ЗаписьНабора.ИНАГРО_Сотрудник.ФизическоеЛицо; //ИНАГРО
				//ЗаписьНабора.УдалитьСотрудник = Справочники.Сотрудники.ПустаяСсылка();    //ИНАГРО. Не удаляем
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.СписаниеДепонентовВДоходыОрганизаций") Тогда	
			ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
			Для Каждого СтрокаДокумента Из ДокументОбъект.Работники Цикл
				СтрокаДокумента.ФизическоеЛицо = СтрокаДокумента.ИНАГРО_Сотрудник.ФизическоеЛицо; //ИНАГРО++	
				//СтрокаДокумента.УдалитьСотрудник = Справочники.Сотрудники.ПустаяСсылка();       //ИНАГРО. Не удаляем
			КонецЦикла;
			ДокументОбъект.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	КонецЦикла	

КонецПроцедуры

Функция ДанныеВзаиморасчетыСДепонентами()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Регистр.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСДепонентами КАК Регистр
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	Возврат Запрос.Выполнить().Выбрать()
	
КонецФункции

Функция ДокументПереносаДанных(Дата, Организация, ИменаРегистровНакопления = "", ИменаРегистровСведений = "")
	МассивИменРегистровНакопления = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРегистровНакопления, ",");
	МассивИменРегистровСведений   = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРегистровСведений, ",");	
	
	Документ = Документы.ОперацияБух.СоздатьДокумент();
	Документ.Дата = Дата;
	Документ.Организация = Организация;
	
	
	
	СтрокаДвиженияПоРегистрам = НСтр("ru='Данные регистров: ';uk='Дані регістрів: '");
	Для Каждого ИмяРегистра Из МассивИменРегистровНакопления Цикл
		СтрокаРегистра = Документ.ТаблицаРегистровНакопления.Добавить();
		СтрокаРегистра.Имя = ИмяРегистра;
		Документ.Движения[ИмяРегистра].Записывать = Истина;
		СтрокаДвиженияПоРегистрам = СтрокаДвиженияПоРегистрам + ИмяРегистра + ", ";
	КонецЦикла;	
	
	Для Каждого ИмяРегистра Из МассивИменРегистровСведений Цикл
		СтрокаРегистра = Документ.ТаблицаРегистровСведений.Добавить();
		СтрокаРегистра.Имя = ИмяРегистра;
		Документ.Движения[ИмяРегистра].Записывать = Истина;
		СтрокаДвиженияПоРегистрам = СтрокаДвиженияПоРегистрам + ИмяРегистра + ", ";
	КонецЦикла;	
	
	Документ.Комментарий = Строка(Организация) + НСтр("ru=' за ';uk=' за '") + Формат(Дата, "ДФ='дд.ММ.гггг ""г.""'") + " " + СтрокаДвиженияПоРегистрам;
	
	Документ.УстановитьНовыйНомер();
	Документ.ОбменДанными.Загрузка = Истина;
	
	Возврат Документ;
КонецФункции	


// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПЕРЕНОСА ДАННЫХ

//Функция раскладывает строку с данными об адресе (в формате 9 запятых) на элементы структуры
Функция РазложитьАдрес(Знач СтрокаАдрес) Экспорт
	
	Страна = "";
	Индекс = "";
	Регион = "";
	Район = "";
	Город = "";
	НаселенныйПункт = "";
	Улица ="";
	Дом ="";
	Корпус ="";
	Квартира ="";

	МассивАдрес	=	СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаАдрес);
	ЭлементовВМассиве = МассивАдрес.Количество();   

	Если ЭлементовВМассиве	>	0	тогда
		Страна	=	СокрЛП(МассивАдрес[0]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	1	тогда
		Индекс	=	СокрЛП(МассивАдрес[1]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	2	тогда
		Регион	=	СокрЛП(МассивАдрес[2]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	3	тогда
		Район	=	СокрЛП(МассивАдрес[3]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	4	тогда
		Город	=	СокрЛП(МассивАдрес[4]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	5	тогда
		НаселенныйПункт	=	СокрЛП(МассивАдрес[5]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	6	тогда
		Улица	=	СокрЛП(МассивАдрес[6]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	7	тогда
		Дом	=	СокрЛП(МассивАдрес[7]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	8	тогда
		Корпус	=	СокрЛП(МассивАдрес[8]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	9	тогда
		Квартира	=	СокрЛП(МассивАдрес[9]);
	КонецЕсли;

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Страна",Страна);
	СтруктураВозврата.Вставить("Индекс",Индекс);
	СтруктураВозврата.Вставить("Регион",Регион);
	СтруктураВозврата.Вставить("Район",Район);
	СтруктураВозврата.Вставить("Город",Город);
	СтруктураВозврата.Вставить("НаселенныйПункт",НаселенныйПункт);
	СтруктураВозврата.Вставить("Улица",Улица);
	СтруктураВозврата.Вставить("Дом",Дом);
	СтруктураВозврата.Вставить("Корпус",Корпус);
	СтруктураВозврата.Вставить("Квартира",Квартира);

	Возврат СтруктураВозврата;
	
КонецФункции	 

Функция АдресВФорматеБСП(Строка9Запятых)
	СтруктураАдреса = РазложитьАдрес(Строка9Запятых);
	ВозвращаемаяСтрока = "";
	Для Каждого КлючИЗначение Из СтруктураАдреса Цикл
		Если ПустаяСтрока(КлючИЗначение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		ВозвращаемаяСтрока = ВозвращаемаяСтрока + ?(ПустаяСтрока(ВозвращаемаяСтрока), "", Символы.ПС) + КлючИЗначение.Ключ + "=" + СокрЛП(КлючИЗначение.Значение);
	КонецЦикла;
	Если Не ПустаяСтрока(СтруктураАдреса.Дом) Тогда
		ВозвращаемаяСтрока = ВозвращаемаяСтрока + Символы.ПС + "ТипДома=дом";
	КонецЕсли;
	Если Не ПустаяСтрока(СтруктураАдреса.Корпус) Тогда
		ВозвращаемаяСтрока = ВозвращаемаяСтрока + Символы.ПС + "ТипКорпуса=корпус";
	КонецЕсли;
	Если Не ПустаяСтрока(СтруктураАдреса.Квартира) Тогда
		ВозвращаемаяСтрока = ВозвращаемаяСтрока + Символы.ПС + "ТипКвартиры=кв.";
	КонецЕсли;
	Возврат ВозвращаемаяСтрока;
КонецФункции

Процедура СформироватьПередставлениеАдреса(Адрес, Представление)
	СтруктураАдреса = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(Адрес);
	УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеАдреса(СтруктураАдреса, Представление);
КонецПроцедуры

Процедура УстановитьРучнуюКорректировкуДокументов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И РасходныйКассовыйОрдер.ВидОперации В(ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям),ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику))
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.Ссылка
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И ПриходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
 	|ВЫБРАТЬ
	|	СписаниеСРасчетногоСчета.Ссылка
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.ПометкаУдаления = ЛОЖЬ
	|	И СписаниеСРасчетногоСчета.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога),ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП))
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		РегистраторОбъект = Выборка.Ссылка.ПолучитьОбъект();
		РегистраторОбъект.РучнаяКорректировка = Истина;
		РегистраторОбъект.Записать();
		ЗафиксироватьТранзакцию();
	КонецЦикла;	
	
КонецПроцедуры	
Процедура НачальноеЗаполнениеНовыхОбъектов() 
	
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("Справочник", "КатегорииЗастрахованныхЛицЕСВ");
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("Справочник", "СпособыОкругленияПриВыплатеЗарплаты");
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("РегистрСведений", "ПараметрыКатегорийЕСВ");
    Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("РегистрСведений", "НастройкаКолонокУпрощенногоУчета");

КонецПроцедуры	

Процедура ПерезаполнениеОбновленныхОбъектов() 
	
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("Справочник", "ВидыВыплат");
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("Справочник", "ВидыДоходовНДФЛ");
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("Справочник", "ВидыЛьготПоНДФЛ");
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("Справочник", "СпособыОтраженияЗарплатыВРеглУчете");
	
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("ПланВидовРасчета", "Начисления");
    Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("ПланВидовРасчета", "Удержания");

	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("РегистрСведений", "ПределыСтраховыхВзносов");
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("РегистрСведений", "МинимальнаяОплатаТруда");
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("РегистрСведений", "ПрожиточныеМинимумы");
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("РегистрСведений", "РазмерыЛьготНДФЛ");
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("РегистрСведений", "СтавкиНДФЛ");
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("РегистрСведений", "ШкалаСтавокНалогов");
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("РегистрСведений", "ИндексИнфляции");
	
КонецПроцедуры	

// РЕГИСТРЫ СВЕДЕНИЙ 
Процедура КонвертироватьУчетнуюПолитикуПоПерсоналу()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьРаботникиОрганизаций.ПринятНаНовоеРабочееМесто КАК ПринятНаНовоеРабочееМесто,
	|	УдалитьРаботникиОрганизаций.Организация КАК Организация
	|ПОМЕСТИТЬ ВТНовыеРабочиеМеста
	|ИЗ
	// ИНАГРО ++
	//|	РегистрСведений.УдалитьРаботникиОрганизаций КАК УдалитьРаботникиОрганизаций	
	|	РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК УдалитьРаботникиОрганизаций
	// ИНАГРО --
	|ГДЕ
	|	УдалитьРаботникиОрганизаций.ПринятНаНовоеРабочееМесто = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	УдалитьРаботникиОрганизаций.Организация,
	|	УдалитьРаботникиОрганизаций.ПринятНаНовоеРабочееМесто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА УДАЛИТЬУчетнаяПолитикаПоПерсоналу.ОкруглятьДо = 1
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СпособыОкругленияПриВыплатеЗарплаты.ДоГривны)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СпособыОкругленияПриВыплатеЗарплаты.БезОкругления)
	|	КОНЕЦ КАК СпособОкругления,
	|	УДАЛИТЬУчетнаяПолитикаПоПерсоналу.Организация КАК Организация,
	|	УДАЛИТЬУчетнаяПолитикаПоПерсоналу.ИспользованиеРезерваОтпусков КАК ИспользованиеРезерваОтпусков,
	|	УДАЛИТЬУчетнаяПолитикаПоПерсоналу.ИспользуетсяТрудШахтеров КАК ИспользуетсяТрудШахтеров,
	|	НовыеРабочиеМеста.ПринятНаНовоеРабочееМесто КАК ЕстьПринятыеНаНовоеРабочееМесто,
	|	УДАЛИТЬУчетнаяПолитикаПоПерсоналу.ПрименятьКоэффициентЕСВДляАвансов КАК ПрименятьКоэффициентЕСВДляАвансов
	|ИЗ
	// ИНАГРО ++
	//|	РегистрСведений.УДАЛИТЬУчетнаяПолитикаПоПерсоналу КАК УДАЛИТЬУчетнаяПолитикаПоПерсоналу
	|	РегистрСведений.ИНАГРО_УчетнаяПолитикаПоПерсоналу КАК УДАЛИТЬУчетнаяПолитикаПоПерсоналу
	// ИНАГРО --
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНовыеРабочиеМеста КАК НовыеРабочиеМеста
	|		ПО УДАЛИТЬУчетнаяПолитикаПоПерсоналу.Организация = НовыеРабочиеМеста.Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.НастройкиУчетаЗарплаты.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		
		СтрокаНабора = НаборЗаписей.Добавить();
		СтрокаНабора.Организация = Выборка.Организация;
		Если Выборка.ЕстьПринятыеНаНовоеРабочееМесто = ИСТИНА Тогда
			СтрокаНабора.УчетНовыхРабочихМест = ИСТИНА
		Иначе
			СтрокаНабора.УчетНовыхРабочихМест = ЛОЖЬ
		КонецЕсли;	
		Если Выборка.ПрименятьКоэффициентЕСВДляАвансов = ИСТИНА Тогда
			СтрокаНабора.ПрименятьКоэффициентЕСВДляАвансов = ИСТИНА
		Иначе
			СтрокаНабора.ПрименятьКоэффициентЕСВДляАвансов = ЛОЖЬ
		КонецЕсли;	
		ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
		НаборЗаписей.Записать();
	КонецЦикла;	
	
	
КонецПроцедуры	

Процедура КонвертироватьДанныеОБанковскихКарточкахРаботников()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Организация,
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСуществующиеЗаписи
	|ИЗ
	|	РегистрСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам КАК ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьПараметрыВыплатыЗПРаботниковСрезПоследних.Период КАК Период,
	|	УдалитьПараметрыВыплатыЗПРаботниковСрезПоследних.Организация КАК Организация,
	|	УдалитьПараметрыВыплатыЗПРаботниковСрезПоследних.Банк КАК Банк,
	|	УдалитьПараметрыВыплатыЗПРаботниковСрезПоследних.НомерКарточки КАК НомерКарточки,
	|	УдалитьПараметрыВыплатыЗПРаботниковСрезПоследних.ДатаДействия КАК ДатаДействия,
	|	УдалитьПараметрыВыплатыЗПРаботниковСрезПоследних.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТДанныеОБанковскихКарточках
	|ИЗ
	|	РегистрСведений.ИНАГРО_ПараметрыВыплатыЗПРаботников.СрезПоследних(  // ИНАГРО ++
	|			,
	|			НЕ Организация В
	|						(ВЫБРАТЬ
	|							СуществующиеЗаписи.Организация
	|						ИЗ
	|							ВТСуществующиеЗаписи КАК СуществующиеЗаписи)
	|				И НЕ Сотрудник.ФизическоеЛицо В
	|						(ВЫБРАТЬ
	|							СуществующиеЗаписи.ФизическоеЛицо
	|						ИЗ
	|							ВТСуществующиеЗаписи КАК СуществующиеЗаписи)) КАК УдалитьПараметрыВыплатыЗПРаботниковСрезПоследних
	|ГДЕ
	|	УдалитьПараметрыВыплатыЗПРаботниковСрезПоследних.Активность = ИСТИНА
	|	И УдалитьПараметрыВыплатыЗПРаботниковСрезПоследних.СпособВыплаты = ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)";
	Запрос.Выполнить();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ              
	|	ДанныеОБанковскихКарточках.Банк,
	|	ДанныеОБанковскихКарточках.Организация
	|ИЗ
	|	ВТДанныеОБанковскихКарточках КАК ДанныеОБанковскихКарточках";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗарплатныеПроекты.НовыйЗарплатныйПроектПоОрганизацииИБанку(Выборка.Организация,Выборка.Банк);
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДанныеОБанковскихКарточках.Период, МЕСЯЦ) КАК Месяц,
	|	МАКСИМУМ(ДанныеОБанковскихКарточках.Период) КАК Период,
	|	ДанныеОБанковскихКарточках.Организация КАК Организация,
	|	ДанныеОБанковскихКарточках.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТВТДанныеОБанковскихКарточкахПоПериодам
	|ИЗ
	|	ВТДанныеОБанковскихКарточках КАК ДанныеОБанковскихКарточках
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОБанковскихКарточках.Организация,
	|	ДанныеОБанковскихКарточках.ФизическоеЛицо,
	|	НАЧАЛОПЕРИОДА(ДанныеОБанковскихКарточках.Период, МЕСЯЦ)
	|
	|;
	|
	|ВЫБРАТЬ
	|	ДанныеОБанковскихКарточкахПоПериодам.Период КАК Период,
	|	ДанныеОБанковскихКарточках.Организация КАК Организация,
	|	ДанныеОБанковскихКарточках.Банк КАК Банк,
	|	ДанныеОБанковскихКарточках.НомерКарточки КАК НомерЛицевогоСчета,
	|	ДанныеОБанковскихКарточках.ДатаДействия КАК ДатаДействия,
	|	ДанныеОБанковскихКарточках.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТВТДанныеОБанковскихКарточкахПоПериодам КАК ДанныеОБанковскихКарточкахПоПериодам	
	|ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОБанковскихКарточках КАК ДанныеОБанковскихКарточках
	|ПО
	|	ДанныеОБанковскихКарточкахПоПериодам.Период = ДанныеОБанковскихКарточках.Период
	|	И ДанныеОБанковскихКарточкахПоПериодам.ФизическоеЛицо = ДанныеОБанковскихКарточках.ФизическоеЛицо
	|	И ДанныеОБанковскихКарточкахПоПериодам.Организация = ДанныеОБанковскихКарточках.Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ЗагрузкаДанных", Истина);
		СтрокаНабора = НаборЗаписей.Добавить();
		СтрокаНабора.Организация = Выборка.Организация;
		ЗаполнитьЗначенияСвойств(СтрокаНабора, Выборка);
		ЗарплатныйПроект = ЗарплатныеПроекты.ЗарплатныйПроектПоОрганизацииИБанку(Выборка.Организация, Выборка.Банк);
		СтрокаНабора.ЗарплатныйПроект = ЗарплатныйПроект;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	

КонецПроцедуры	

Процедура БухучетЗарплатыСотрудников()
	
	Запрос = Новый Запрос;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(УдалитьПлановыеНачисленияРаботниковОрганизаций.Период, МЕСЯЦ) КАК Период,
	|	УдалитьПлановыеНачисленияРаботниковОрганизаций.Сотрудник,
	|	МАКСИМУМ(УдалитьПлановыеНачисленияРаботниковОрганизаций.СпособОтраженияВБухучете) КАК СпособОтраженияЗарплатыВБухучете
	|ИЗ
	|	РегистрСведений.УдалитьПлановыеНачисленияРаботниковОрганизаций КАК УдалитьПлановыеНачисленияРаботниковОрганизаций
	|ГДЕ
	|	УдалитьПлановыеНачисленияРаботниковОрганизаций.ВидРасчетаИзмерение = ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(УдалитьПлановыеНачисленияРаботниковОрганизаций.Период, МЕСЯЦ),
	|	УдалитьПлановыеНачисленияРаботниковОрганизаций.Сотрудник
	|";
	
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	НаборЗаписей = РегистрыСведений.БухучетЗарплатыСотрудников.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	НаборЗаписей.Загрузить(Результат);
	НаборЗаписей.Записать();

	
КонецПроцедуры	

Процедура КонвертироватьДанныеСведенийОВыплатахРаботникам(СоответствиеКонвертируемыхОбъектов)
	РезультатСтруктура = ДанныеСведенийОВыплатахРаботникам();
	Выборка = РезультатСтруктура.Выборка;
	ТаблицаИсключаемыхРегистраторов = РезультатСтруктура.ТаблицаИсключаемыхРегистраторов; 
	ТаблицаПроверяемыхФизическихЛиц = РезультатСтруктура.ТаблицаПроверяемыхФизическихЛиц;
	МассивФизическихЛиц = Новый Массив;
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		Пока Выборка.Следующий() Цикл 
			Если Не ТаблицаИсключаемыхРегистраторов.Найти(Выборка.Регистратор, "Регистратор") = Неопределено Тогда 
				НаборЗаписей = РегистрыСведений.ИНАГРО_СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.СоздатьНаборЗаписей(); // ИНАГРО
				НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
				НаборЗаписей.Прочитать();
				МассивФизическихЛиц.Очистить();
				ДокументПереноса = Выборка.Регистратор.ПолучитьОбъект(); 
				Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
					Отбор = Новый Структура();
					Отбор.Вставить("ФизическоеЛицо",ЗаписьНабора.Сотрудник.ФизическоеЛицо);
					Отбор.Вставить("СчетУчета",ЗаписьНабора.СчетУчета);
					Отбор.Вставить("Ведомость",ЗаписьНабора.Ведомость);
					массивПоиска =  ТаблицаПроверяемыхФизическихЛиц.НайтиСтроки(Отбор);
					Если массивПоиска = Неопределено ИЛИ (НЕ (массивПоиска = Неопределено) И массивПоиска.Количество() = 0)Тогда
						Если НЕ МассивФизическихЛиц.Найти(ЗаписьНабора.Сотрудник.ФизическоеЛицо) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						ЗаписьОплатаВедомостейНаВыплатуЗарплаты = ДокументПереноса.Движения.ОплатаВедомостейНаВыплатуЗарплаты.Добавить();
						ЗаписьОплатаВедомостейНаВыплатуЗарплаты.Организация = ЗаписьНабора.Сотрудник.ГоловнаяОрганизация;
						ЗаписьОплатаВедомостейНаВыплатуЗарплаты.ФизическоеЛицо = ЗаписьНабора.Сотрудник.ФизическоеЛицо;
						ЗаписьОплатаВедомостейНаВыплатуЗарплаты.Активность = ЗаписьНабора.Активность;
						ЗаписьОплатаВедомостейНаВыплатуЗарплаты.Период = ЗаписьНабора.Период;
						ЗаполнитьЗначенияСвойств(ЗаписьОплатаВедомостейНаВыплатуЗарплаты, ЗаписьНабора);
						МассивФизическихЛиц.Добавить(ЗаписьНабора.Сотрудник.ФизическоеЛицо);
					Иначе
						Продолжить
					КонецЕсли;
				КонецЦикла;
			Иначе
				НаборЗаписей = РегистрыСведений.ИНАГРО_СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.СоздатьНаборЗаписей(); // ИНАГРО
				НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
				НаборЗаписей.Прочитать();
				МассивФизическихЛиц.Очистить();
				ДокументПереноса = Выборка.Регистратор.ПолучитьОбъект(); 
				Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
					Если НЕ МассивФизическихЛиц.Найти(ЗаписьНабора.Сотрудник.ФизическоеЛицо) = Неопределено Тогда
						Продолжить;
					КонецЕсли;	
					ЗаписьОплатаВедомостейНаВыплатуЗарплаты = ДокументПереноса.Движения.ОплатаВедомостейНаВыплатуЗарплаты.Добавить();
					ЗаписьОплатаВедомостейНаВыплатуЗарплаты.Организация = ЗаписьНабора.Сотрудник.ГоловнаяОрганизация;
					ЗаписьОплатаВедомостейНаВыплатуЗарплаты.ФизическоеЛицо = ЗаписьНабора.Сотрудник.ФизическоеЛицо;
					ЗаписьОплатаВедомостейНаВыплатуЗарплаты.Активность = ЗаписьНабора.Активность;
					ЗаписьОплатаВедомостейНаВыплатуЗарплаты.Период = ЗаписьНабора.Период;
					ЗаполнитьЗначенияСвойств(ЗаписьОплатаВедомостейНаВыплатуЗарплаты, ЗаписьНабора);
					МассивФизическихЛиц.Добавить(ЗаписьНабора.Сотрудник.ФизическоеЛицо);
				КонецЦикла;
			КонецЕсли;	
		КонецЦикла;
		ДокументПереноса.Движения.ОплатаВедомостейНаВыплатуЗарплаты.Записать();
	КонецЦикла;	
	
КонецПроцедуры

Функция ДанныеСведенийОВыплатахРаботникам()
	Результат = Новый Структура;
		
	Запрос = Новый Запрос;     
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Регистр.Регистратор КАК Регистратор,
	|	Регистр.Ведомость КАК Ведомость,
	|	Регистр.Регистратор.Дата КАК ДатаДокумента,
	|	Регистр.Регистратор.Номер КАК НомерДокумента,
	|	ЕСТЬNULL(Регистр.Сотрудник.ФизическоеЛицо, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ФизическоеЛицо,
	|	Регистр.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ ВТТабВсехРегистраторов
	|ИЗ
	|	РегистрСведений.ИНАГРО_СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК Регистр // ИНАГРО
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор";
	Запрос.Выполнить();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ТабРегистраторов.Регистратор) КАК КоличествоРегистраторов,
	|	ТабРегистраторов.Ведомость,
	|	ТабРегистраторов.ФизическоеЛицо, 
	|	ТабРегистраторов.СчетУчета
	|ПОМЕСТИТЬ ВТТабВедомостей
	|ИЗ
	|	ВТТабВсехРегистраторов КАК ТабРегистраторов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабРегистраторов.Ведомость,
	|	ТабРегистраторов.ФизическоеЛицо,
	|	ТабРегистраторов.СчетУчета
	|ИМЕЮЩИЕ КОЛИЧЕСТВО(ТабРегистраторов.Регистратор) > 1 
	|";
	Запрос.Выполнить();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабРегистраторов.Регистратор КАК Регистратор,
	|	ТабРегистраторов.Ведомость,
	|	ТабРегистраторов.ФизическоеЛицо,
	|	ТабРегистраторов.СчетУчета,
	|	ТабРегистраторов.ДатаДокумента КАК ДатаДокумента,
	|	ТабРегистраторов.НомерДокумента КАК НомерДокумента
	|ПОМЕСТИТЬ ВТТабДублирующихсяСтрок
	|ИЗ
	|	ВТТабВсехРегистраторов КАК ТабРегистраторов
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	ВТТабВедомостей КАК ТабВедомостей
	|ПО
	|	ТабРегистраторов.Ведомость = ТабВедомостей.Ведомость
	|	И ТабРегистраторов.ФизическоеЛицо = ТабВедомостей.ФизическоеЛицо
	|	И ТабРегистраторов.СчетУчета = ТабВедомостей.СчетУчета
	|";
	Запрос.Выполнить();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабРегистраторов.Ведомость КАК Ведомость,
	|	МИНИМУМ(ТабРегистраторов.Регистратор) КАК Регистратор
	|ПОМЕСТИТЬ ВТТабПервыхДокументовПоВедомости
	|ИЗ
	|	ВТТабДублирующихсяСтрок КАК ТабРегистраторов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабРегистраторов.Ведомость"; 
	Запрос.Выполнить();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабРегистраторов.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТабПроверяемыхРегистраторов	
	|ИЗ
	|	ВТТабДублирующихсяСтрок КАК ТабРегистраторов
	|ГДЕ
	|	НЕ ТабРегистраторов.Регистратор В
	|				(ВЫБРАТЬ
	|					ВТТабПервыхДокументовПоВедомости.Регистратор
	|				ИЗ
	|					ВТТабПервыхДокументовПоВедомости КАК ВТТабПервыхДокументовПоВедомости)"; 
	Запрос.Выполнить();

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабДублирующихсяСтрок.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТабДублирующихсяСтрок.СчетУчета КАК СчетУчета,
	|	ТабДублирующихсяСтрок.Ведомость КАК Ведомость,
	|	ТабРегистраторов.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТабПроверяемыхФизическихЛиц
	|ИЗ
	|	ВТабПроверяемыхРегистраторов КАК ТабРегистраторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТТабДублирующихсяСтрок КАК ТабДублирующихсяСтрок
	|		ПО ТабРегистраторов.Регистратор = ТабДублирующихсяСтрок.Регистратор"; 
	Запрос.Выполнить();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|   ТабРегистраторов.Регистратор КАК Регистратор
	|ИЗ
	|	ВТабПроверяемыхРегистраторов КАК ТабРегистраторов
	|"; 
	ТаблицаИсключаемыхРегистраторов = Запрос.Выполнить().Выгрузить();
	Результат.Вставить("ТаблицаИсключаемыхРегистраторов",ТаблицаИсключаемыхРегистраторов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабПроверяемыхФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТабПроверяемыхФизическихЛиц.СчетУчета КАК СчетУчета,
	|	ТабПроверяемыхФизическихЛиц.Ведомость КАК Ведомость,
	|   ТабПроверяемыхФизическихЛиц.Регистратор КАК Регистратор
	|ИЗ
	|	ВТабПроверяемыхФизическихЛиц КАК ТабПроверяемыхФизическихЛиц
	|"; 
	ТаблицаПроверяемыхФизическихЛиц = Запрос.Выполнить().Выгрузить();
	Результат.Вставить("ТаблицаПроверяемыхФизическихЛиц",ТаблицаПроверяемыхФизическихЛиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабРегистраторов.Регистратор КАК Регистратор
	|ИЗ
	|	ВТТабВсехРегистраторов КАК ТабРегистраторов
	|СГРУППИРОВАТЬ ПО
	|	ТабРегистраторов.Регистратор
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	Выборка =  Запрос.Выполнить().Выбрать();
	Результат.Вставить("Выборка", Выборка);
	
	Возврат Результат
КонецФункции	

Процедура КонвертироватьИндексированныйДоходСовместителей(СоответствиеКонвертированныхОбъектов)

	Выборка = ДанныеИндексированныйДоходСовместителей();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		
		НаборЗаписей = РегистрыСведений.ИндексированныйДоходСовместителей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если ЗначениеЗаполнено(ЗаписьНабора.УДАЛИТЬСотрудник) Тогда
				ЗаписьНабора.ФизическоеЛицо = ЗаписьНабора.УДАЛИТЬСотрудник.ФизическоеЛицо;
				ЗаписьНабора.УДАЛИТЬСотрудник = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Записать();
		
	КонецЦикла;

КонецПроцедуры	

Функция ДанныеИндексированныйДоходСовместителей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИндексированныйДоходСовместителей.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.ИндексированныйДоходСовместителей КАК ИндексированныйДоходСовместителей
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор";
	
	Возврат Запрос.Выполнить().Выбрать()
	
	
КонецФункции	

Функция ФизическиеЛицаСОднойКатегориейЕСВ()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСВСотрудников.КатегорияЕСВ) КАК КоличествоКатегорий,
	|	ЕСВСотрудников.КатегорияЕСВ КАК КатегорияЕСВ,
	|	ЕСВСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСВСотрудников.Сотрудник.ГоловнаяОрганизация КАК Организация
	|ПОМЕСТИТЬ ВТВсеКатегорииФизлиц
	|ИЗ
	|	РегистрСведений.ЕСВСотрудников КАК ЕСВСотрудников
	|ГДЕ
	|	ЕСВСотрудников.КатегорияЕСВ <> ЗНАЧЕНИЕ(Справочник.КатегорииЗастрахованныхЛицЕСВ.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСВСотрудников.ФизическоеЛицо,
	|	ЕСВСотрудников.Сотрудник.ГоловнаяОрганизация,
	|	ЕСВСотрудников.КатегорияЕСВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеКатегорииФизлиц.ФизическоеЛицо,
	|	ВсеКатегорииФизлиц.Организация,
	|	ВсеКатегорииФизлиц.КатегорияЕСВ
	|ИЗ
	|	ВТВсеКатегорииФизлиц КАК ВсеКатегорииФизлиц
	|ГДЕ
	|	ВсеКатегорииФизлиц.КоличествоКатегорий = 1";
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	ТаблицаРезультат.Индексы.Добавить("Организация");
	ТаблицаРезультат.Индексы.Добавить("ФизическоеЛицо");

	Возврат ТаблицаРезультат;
	
КонецФункции	

// Последовательность ДокументыОрганизаций
Процедура ОчиститьПоследовательностьДокументыОрганизаций()

	// Последовательность необходимо очистить, так как в процессе обновления при перезаписи кадрово-зарплатных документов 
	// в последовательности формируются движения
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыОрганизаций.Регистратор
	|ИЗ
	|	Последовательность.ДокументыОрганизаций КАК ДокументыОрганизаций";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	ВыборкаРегистраторов = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаРегистраторов.Следующий() Цикл
	
		НачатьТранзакцию();
		
		ПоследовательностьНаборЗаписей = Последовательности.ДокументыОрганизаций.СоздатьНаборЗаписей();
		ПоследовательностьНаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		ПоследовательностьНаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	
	КонецЦикла;

КонецПроцедуры

Процедура КонвертироватьДокументыТабельУчетаРабочегоВремени()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИНАГРО_ТабельУчетаРабочегоВремениОрганизации.Ссылка КАК Ссылка,
	|	ИНАГРО_ТабельУчетаРабочегоВремениОрганизации.СпособВводаДанных,
	|	ИНАГРО_ТабельУчетаРабочегоВремениОрганизации.ПериодРегистрации
	|ИЗ
	|	Документ.ИНАГРО_ТабельУчетаРабочегоВремениОрганизации КАК ИНАГРО_ТабельУчетаРабочегоВремениОрганизации
	|ГДЕ
	|	ИНАГРО_ТабельУчетаРабочегоВремениОрганизации.ПометкаУдаления = ЛОЖЬ";

	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		НачатьТранзакцию();
		
		РегистраторОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Выборка.СпособВводаДанных = Перечисления.ИНАГРО_СпособыВводаДанныхОВремени.ВЦеломЗаПериод
			Или Выборка.СпособВводаДанных = Перечисления.ИНАГРО_СпособыВводаДанныхОВремени.Месяц Тогда
			РегистраторОбъект.ДатаНачалаПериода = НачалоМесяца(Выборка.ПериодРегистрации);
			РегистраторОбъект.ДатаОкончанияПериода = КонецМесяца(Выборка.ПериодРегистрации);
		КонецЕсли; 
					
		РегистраторОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура КонвертироватьРНВзаиморасчетыПоНДФЛ() Экспорт
	
	Выборка = ДанныеРНВзаиморасчетыПоНДФЛ();
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НачатьТранзакцию();
		НаборЗаписей = РегистрыНакопления.ВзаиморасчетыПоНДФЛ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			Если ЗаписьНабора.УдалитьНалоговыйПериод = '00010101' Тогда
				ЗаписьНабора.НалоговыйПериод = ЗаписьНабора.ПериодВзаиморасчетов
			Иначе
				ЗаписьНабора.НалоговыйПериод = ЗаписьНабора.УдалитьНалоговыйПериод
			КонецЕсли;	
			Если ЗначениеЗаполнено(ЗаписьНабора.УдалитьДоходПолный) Тогда
				ЗаписьНабора.Льгота = ЗаписьНабора.УдалитьЛьгота;
				ЗаписьНабора.ВидСтавки = ЗаписьНабора.УдалитьВидСтавки;
				ЗаписьНабора.УвеличеннаяСтавка = ЗаписьНабора.УдалитьУвеличеннаяСтавка;
				ЗаписьНабора.ДоходПолный = ЗаписьНабора.УдалитьДоходПолный;
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	КонецЦикла	

КонецПроцедуры
