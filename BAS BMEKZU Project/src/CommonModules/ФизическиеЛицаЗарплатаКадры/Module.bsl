////////////////////////////////////////////////////////////////////////////////
// ФизическиеЛицаЗарплатаКадры: методы, дополняющие функциональность справочника
// 		ФизическиеЛица
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Добавляет в коллекцию описание проверяемых данных
// 
// Параметры:
//		КоллекцияПравил - Массив, если передано Неопределено будет создан массив
//		ПравилоПроверки - Строка, идентификатор правила проверки
//						доступные идентификаторы:
//							ДРФО
//							МестоРождения
//							Адрес
//		ПутьКДанным - Строка
//		ПредставлениеПроверяемогоЭлемента - Строка
//		ОбязательноКЗаполнению - Булево, по умолчанию Ложь
//
Процедура ДобавитьПравилоПроверки(КоллекцияПравил, ПравилоПроверки, ПутьКДанным, ПредставлениеПроверяемогоЭлемента, ОбязательноКЗаполнению = Ложь) Экспорт
	
	ПроверитьКоллекциюПравил(КоллекцияПравил);
	
	ПравилоПроверки = ОписаниеПравилаПроверкиДанных();
	
	ПравилоПроверки.ПравилоПроверки = ПравилоПроверки;
	ПравилоПроверки.ПутьКДанным = ПутьКДанным;
	ПравилоПроверки.ПредставлениеПроверяемогоЭлемента = ПредставлениеПроверяемогоЭлемента;
	ПравилоПроверки.ОбязательноКЗаполнению = ОбязательноКЗаполнению;
	
	КоллекцияПравил.Добавить(ПравилоПроверки);
	
КонецПроцедуры

// Добавляет в коллекцию описание правил с идентификатором "УдостоверениеЛичности", для проверки документа, удостоверяющего личность
// Описание одноименных параметров, см. ДобавитьПравилоПроверки
//
// Параметры:
//		ПутьКДаннымСерииДокумента
//		ПутьКДаннымНомераДокумента
//		ПутьКДаннымДатыВыдачиДокумента
//      ПутьКДаннымКемВыданДокумент
//
Процедура ДобавитьПравилоПроверкиУдостоверенияЛичности(КоллекцияПравил, ПутьКДаннымВидДокумента, ПутьКДаннымСерииДокумента, ПутьКДаннымНомераДокумента, ПутьКДаннымДатыВыдачиДокумента, ПутьКДаннымКемВыданДокумент, ПредставлениеПроверяемогоЭлемента, ОбязательноКЗаполнению = Ложь) Экспорт
	
	ПроверитьКоллекциюПравил(КоллекцияПравил);
	
	ПравилоПроверки = ОписаниеПравилаПроверкиДанных();
	
	ПравилоПроверки.ПравилоПроверки = "УдостоверениеЛичности";
	ПравилоПроверки.ПутьКДанным = ПутьКДаннымВидДокумента;
	ПравилоПроверки.ПредставлениеПроверяемогоЭлемента = ПредставлениеПроверяемогоЭлемента;
	ПравилоПроверки.ОбязательноКЗаполнению = ОбязательноКЗаполнению;
	ПравилоПроверки.Вставить("ПутьКДаннымСерииДокумента", ПутьКДаннымСерииДокумента);
	ПравилоПроверки.Вставить("ПутьКДаннымНомераДокумента", ПутьКДаннымНомераДокумента);
	ПравилоПроверки.Вставить("ПутьКДаннымДатыВыдачиДокумента", ПутьКДаннымДатыВыдачиДокумента);
	ПравилоПроверки.Вставить("ПутьКДаннымКемВыданДокумент", ПутьКДаннымКемВыданДокумент);
	
	КоллекцияПравил.Добавить(ПравилоПроверки);
	
КонецПроцедуры

// Добавляет в коллекцию описание правил с идентификатором "ДатаРождения", для проверки даты рождения
// Описание одноименных параметров, см. ДобавитьПравилоПроверки
//
// Параметры:
//		ДатаПроверки
//
Процедура ДобавитьПравилоПроверкиДатыРождения(КоллекцияПравил, ПутьКДанным, ПредставлениеПроверяемогоЭлемента, ДатаПроверки, ОбязательноКЗаполнению = Ложь) Экспорт
	
	ПроверитьКоллекциюПравил(КоллекцияПравил);
	
	ПравилоПроверки = ОписаниеПравилаПроверкиДанных();
	
	ПравилоПроверки.ПравилоПроверки = "ДатаРождения";
	ПравилоПроверки.ПутьКДанным = ПутьКДанным;
	ПравилоПроверки.ПредставлениеПроверяемогоЭлемента = ПредставлениеПроверяемогоЭлемента;
	ПравилоПроверки.ОбязательноКЗаполнению = ОбязательноКЗаполнению;
	ПравилоПроверки.Вставить("ДатаПроверки", ДатаПроверки);
	
	КоллекцияПравил.Добавить(ПравилоПроверки);
	
КонецПроцедуры

// Добавляет в коллекцию описание правил с идентификатором "ФИО", для проверки заполненности фамилии, имени, отчества
// Описание одноименных параметров, см. ДобавитьПравилоПроверки
//
// Параметры:
//		ПутьКДаннымФамилия
//		ПутьКДаннымИмя
//		ПутьКДаннымОтчество
//		ПутьКДаннымСтраныГражданства
//
Процедура ДобавитьПравилоПроверкиФИО(КоллекцияПравил, ПутьКДаннымФамилия, ПутьКДаннымИмя, ПутьКДаннымОтчество, ПутьКДаннымСтраныГражданства, ПредставлениеПроверяемогоЭлемента) Экспорт
	
	ПроверитьКоллекциюПравил(КоллекцияПравил);
	
	ПравилоПроверки = ОписаниеПравилаПроверкиДанных();
	
	ПравилоПроверки.ПравилоПроверки = "ФИО";
	ПравилоПроверки.ПредставлениеПроверяемогоЭлемента = ПредставлениеПроверяемогоЭлемента;
	ПравилоПроверки.ОбязательноКЗаполнению = Истина;
	
	ПравилоПроверки.ПутьКДанным = ПутьКДаннымФамилия;
	ПравилоПроверки.Вставить("ПутьКДаннымИмя", ПутьКДаннымИмя);
	ПравилоПроверки.Вставить("ПутьКДаннымОтчество", ПутьКДаннымОтчество);
	ПравилоПроверки.Вставить("ПутьКДаннымСтраныГражданства", ПутьКДаннымСтраныГражданства);
	
	КоллекцияПравил.Добавить(ПравилоПроверки);
	
КонецПроцедуры

// Проверяет заполнение коллекции данных физических лиц, заполняет коллекцию ошибок
//
// Параметры:
//		КоллекцияДанныхФизическихЛиц - коллекция данных (массив структур, таблица значений)
//		ПравилаПроверки - массив, описаний правил проверки
//		Ошибки - массив, описаний найденных ошибок
//		Отказ
//
Процедура ПроверитьКоллекциюДанных(КоллекцияДанныхФизическихЛиц, ПравилаПроверки, Ошибки, Отказ = Ложь) Экспорт
	
	Для ИндексЭлемента = 0 По КоллекцияДанныхФизическихЛиц.Количество() - 1 Цикл
		
		ПроверитьДанныеФизическогоЛица(
			КоллекцияДанныхФизическихЛиц[ИндексЭлемента],
			ПравилаПроверки,
			Ошибки,
			Отказ,
			ИндексЭлемента);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет заполнение данных физического лица, заполняет коллекцию ошибок
//
// Параметры:
//		ДанныеФизическогоЛица
//		Ошибки
//		Отказ
//		НомерСтроки
//
Процедура ПроверитьДанныеФизическогоЛица(ДанныеФизическогоЛица, ПравилаПроверки, Ошибки, Отказ = Ложь, НомерСтроки = Неопределено) Экспорт
	
	ФизическиеЛицаЗарплатаКадрыВнутренний.ПроверитьДанныеФизическогоЛица(ДанныеФизическогоЛица, ПравилаПроверки, Ошибки, Отказ, НомерСтроки);
	
КонецПроцедуры

// Выводит в окно сообщений ошибки проверки данных физических лиц
//
// Параметры:
//		Ошибки - Соответствие массива описания ошибок физическим лицам
//		Отказ
//
Процедура ВывестиОшибкиДанныхФизическогоЛица(Ошибки, Отказ = Ложь) Экспорт
	
	Для каждого ОшибкаДанных Из Ошибки Цикл
		
		ОписаниеОшибки = ОшибкаДанных.Значение;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ОписаниеОшибки.ТекстОшибки,
			,
			ОписаниеОшибки.ПолеФормы 
				+ ?(ОписаниеОшибки.НомерСтроки = Неопределено, "", "[" + ОписаниеОшибки.НомерСтроки + "]"),
			,
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	Перем Организация;
	Перем Подразделение;
	Параметры.Отбор.Свойство("Организация", Организация);
	Параметры.Отбор.Свойство("Подразделение", Подразделение);
	
	Если Организация <> НеОпределено Или Подразделение <> НеОпределено Тогда
		// Если есть отбор по организации или подразделению - отрабатываем особенным образом
		
		ЗапросТекст = 
		"ВЫБРАТЬ *
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО ФизическиеЛица.Ссылка = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
		|			И (ТекущиеКадровыеДанныеСотрудников.ОсновноеРабочееМестоВОрганизации)
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
		|	И ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение = &Подразделение
		|	И &ДополнительноеУсловие";
		
		ОрганизацияСписком = ТипЗнч(Организация) = Тип("Массив") ИЛИ ТипЗнч(Организация) = Тип("СписокЗначений");
		Если Организация = НеОпределено ИЛИ ОрганизацияСписком И Организация.Количество() = 0 Тогда
			ЗапросТекст = СтрЗаменить(ЗапросТекст, "ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
				|	И ", "");
		ИначеЕсли ОрганизацияСписком Тогда
			ЗапросТекст = СтрЗаменить(ЗапросТекст, "ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация = &Организация
				|	И ", "ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация В (&Организация)
				|	И ");
		КонецЕсли;
		
		ПодразделениеСписком = ТипЗнч(Подразделение) = Тип("Массив") ИЛИ ТипЗнч(Подразделение) = Тип("СписокЗначений");
		Если Подразделение = НеОпределено ИЛИ ПодразделениеСписком И Подразделение.Количество() = 0 Тогда
			ЗапросТекст = СтрЗаменить(ЗапросТекст, "ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение = &Подразделение
				|	И ", "");
		ИначеЕсли ПодразделениеСписком Тогда
			ЗапросТекст = СтрЗаменить(ЗапросТекст, "ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение = &Подразделение
				|	И ", "ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение В (&Подразделение)
				|	И ");
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ЗапросТекст;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("СтрокаПоиска", Параметры.СтрокаПоиска + "%");
		
		ЗарплатаКадры.ЗаполнитьДанныеВыбораСправочника(ДанныеВыбора, Метаданные.Справочники.ФизическиеЛица, Параметры.Отбор, Запрос, "ФизическиеЛица");
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	ФизическиеЛицаЗарплатаКадрыВнутренний.ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
КонецПроцедуры

Процедура ПроверитьУникальностьНаименованияФизическогоЛица(ФизическоеЛицоОбъект, Отказ) Экспорт
	
	СтруктураФИО = ФизическиеЛицаКлиентСервер.ФамилияИмяОтчество(ФизическоеЛицоОбъект.ФИО);
	СписокУточнений = СотрудникиФормы.ПодобратьСписокУточненийТекущегоФизическогоЛица(ФизическоеЛицоОбъект.Ссылка, СтруктураФИО.Фамилия, СтруктураФИО.Имя, СтруктураФИО.Отчество, "");
	НайденноеЗначение = СписокУточнений.НайтиПоЗначению(ФизическоеЛицоОбъект.УточнениеНаименования);
	Если НайденноеЗначение <> Неопределено Тогда
		ТекстСообщения = НСтр("ru='Уже существуют физические лица с такими ФИО.
|Для них использованы следующие уточнения наименования:';uk='Вже існують фізичні особи з такими ПІБ.
|Для них використані наступні уточнення найменування:'");
		Для каждого Уточнение Из СписокУточнений Цикл
			ТекстСообщения = ТекстСообщения + "
			| - " + Уточнение.Значение;
		КонецЦикла;
		ТекстСообщения = ТекстСообщения + "
		| Дополните представление текущего физического лица на закладке ""Прочее"".";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ФизическоеЛицо.УточнениеНаименования", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ФамилияДляПоиска(Знач Фамилия) Экспорт
	
	ПодготовитьКПоискуПоФИО(Фамилия); 
	
	ПодготовитьКПоискуПоФИОСБуквамиЕЁ(Фамилия);
	
	Возврат Фамилия;
	
КонецФункции

Функция ИмяДляПоиска(Знач Имя) Экспорт
	
	ПодготовитьКПоискуПоФИО(Имя); 
	
	Если ЗначениеЗаполнено(Имя) И Найти("НАТАЛЬЯ,НАТАЛИЯ", Имя) > 0 Тогда
		Имя = "НАТАЛЬИЯ";
	КонецЕсли;
	
	ПодготовитьКПоискуПоФИОСБуквамиЕЁ(Имя);
	
	Возврат Имя;
	
КонецФункции

Функция ОтчествоДляПоиска(Знач Отчество) Экспорт
	
	ПодготовитьКПоискуПоФИО(Отчество); 
	
	ПодготовитьКПоискуПоФИОСБуквамиЕЁ(Отчество);
	
	МассивПодстрок = Новый Массив;
	МассивПодстрок.Добавить("ИЕВИЧ");
	МассивПодстрок.Добавить("ЬЕВИЧ");
	МассивПодстрок.Добавить("ИЕВНА");
	МассивПодстрок.Добавить("ЬЕВНА");
	НетЗаменыСимволов = Истина;
	Для каждого Стр Из МассивПодстрок Цикл
		ПозицияСимвола = Найти(Отчество, Стр);
		Если ПозицияСимвола > 0 Тогда
			Отчество = Лев(Отчество,ПозицияСимвола-1) + "ИЬ" + Сред(Отчество,ПозицияСимвола+1);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НетЗаменыСимволов Тогда
		
		МассивПодстрок = Новый Массив;
		МассивПодстрок.Добавить("ЬЯНОВИЧ");
		МассивПодстрок.Добавить("ИЯНОВИЧ");
		МассивПодстрок.Добавить("ИАНОВИЧ");
		МассивПодстрок.Добавить("ЬЯНОВНА");
		МассивПодстрок.Добавить("ИЯНОВНА");
		МассивПодстрок.Добавить("ИАНОВНА");
		Для каждого Стр Из МассивПодстрок Цикл
			ПозицияСимвола = Найти(Отчество, Стр);
			Если ПозицияСимвола > 0 Тогда
				Отчество = Лев(Отчество,ПозицияСимвола-1) + "ИЬЯА" + Сред(Отчество,ПозицияСимвола+2);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Отчество;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ОписаниеПравилаПроверкиДанных()
	
	Возврат Новый Структура("ПравилоПроверки, ПутьКДанным, ПредставлениеПроверяемогоЭлемента, ОбязательноКЗаполнению");	
	
Конецфункции

Процедура ПроверитьКоллекциюПравил(КоллекцияПравил)
	
	Если КоллекцияПравил = Неопределено Тогда
		КоллекцияПравил = Новый Массив;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПодготовитьКПоискуПоФИО(Представление)
	
	Представление = ВРег(Представление);
	
	Представление = СтрЗаменить(Представление, "~", "~~");
	Представление = СтрЗаменить(Представление, "%", "~%");
	Представление = СтрЗаменить(Представление, "_", "~_");
	Представление = СтрЗаменить(Представление, "[", "~[");
	Представление = СтрЗаменить(Представление, "-", "~-");
	
КонецПроцедуры

Процедура ПодготовитьКПоискуПоФИОСБуквамиЕЁ(Представление)
	
	Представление = СтрЗаменить(Представление, "Е", "&");
	Представление = СтрЗаменить(Представление, "Ё", "&");
	Представление = СтрЗаменить(Представление, "&", "ЕЁ");
	
КонецПроцедуры

Функция НаименованиеСлужебное(Наименование) Экспорт
	
	СтруктураФИО = ФизическиеЛицаКлиентСервер.ФамилияИмяОтчество(Наименование);
	
	Возврат 
		ФамилияДляПоиска(СтруктураФИО.Фамилия) + " "
		+ ИмяДляПоиска(СтруктураФИО.Имя) + " "
		+ ОтчествоДляПоиска(СтруктураФИО.Отчество);
			
КонецФункции

