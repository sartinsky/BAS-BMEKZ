#Область ПрограммныйИнтерфейс

// Функция осуществляет подключение устройства.
//
// Параметры:
//  ОбъектДрайвера   - <*>
//           - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ПодключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт
	
	Результат = Истина;

	ПараметрыПодключения.Вставить("ИДУстройства", "");

	ВыходныеПараметры = Новый Массив();

	Порт         = Неопределено;
	Скорость     = Неопределено;
	ТипВП        = Неопределено;
	Пауза        = 0;

	Параметры.Свойство("Порт"        , Порт);
	Параметры.Свойство("Скорость"    , Скорость);
	Параметры.Свойство("ТипВП"    	 , ТипВП);
	//Параметры.Свойство("Пауза"    	 , Пауза);

	Если Порт         = Неопределено
	 Или Скорость     = Неопределено 
	 Или ТипВП        = Неопределено Тогда
 
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Не настроены параметры устройства.
        |Для корректной работы устройства необходимо задать параметры его работы.
        |Сделать это можно при помощи формы ""Настройка параметров"" модели
        |подключаемого оборудования в форме ""Подключение и настройка оборудования"".'
        |;uk='Не настроєні параметри пристрою.
        |Для коректної роботи пристрою необхідно задати параметри його роботи.
        |Зробити це можна за допомогою форми ""Настройка параметрів"" моделі
        |обладнання для підключення в формі ""Підключення та настройка обладнання"".'"));

		Результат = Ложь;
	КонецЕсли;

	Если Результат Тогда
		
		ПараметрыПодключения.ИДУстройства = "WP89";

		КомПорт = "COM" + Строка(Параметры.Порт) +":"+ Строка(СтрЗаменить(Параметры.Скорость," ",""));

		ОбъектДрайвера.ТипВП = Параметры.ТипВП;
		
		ВыходныеПараметры.Очистить(); 
		ВыходныеПараметры.Добавить("WP89"); // ИсточникСобытия.
		
		МассивИменСобытий = Новый Массив;
		МассивИменСобытий.Добавить("WEIGHT");
		МассивИменСобытий.Добавить("TIMEOUT");
		ВыходныеПараметры.Добавить(МассивИменСобытий); // Массив ИменаСобытий.
		
		Попытка
			ОбъектДрайвера.ОткрытьПорт(КомПорт);			
		Исключение
			
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(999);
			ВыходныеПараметры.Добавить(НСтр("ru = 'Ошибка открытия Com-порта. 
			|Возможно в настройках оборудования указан не правильный Com-порт.
			|'; uk = 'Помилка відкриття Com-порта. 
			|Можливо в налаштуваннях обладнання вказано невірний Com-порт.'"));
			
			Результат = Ложь;
		КонецПопытки;
	
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция осуществляет отключение устройства.
//
// Параметры:
//  ОбъектДрайвера - <*>
//         - ОбъектДрайвера драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <Булево> - Результат работы функции.
//
Функция ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры) Экспорт

	Результат = Истина;

	ВыходныеПараметры = Новый Массив();

	Попытка 
		ОбъектДрайвера.ЗакрытьПорт();
	Исключение 
	КонецПопытки;
	
	ПараметрыПодключения.ИДУстройства = Неопределено;

	Возврат Результат;

КонецФункции

// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу
//
Функция ВыполнитьКоманду(Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения) Экспорт

	Результат = Истина;

	ВыходныеПараметры = Новый Массив();

	// Получение веса
	Если Команда = "ПолучитьВес" ИЛИ Команда = "GetWeight" Тогда
		Результат = ПолучитьВес(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);
		
	// Обработка события от устройства
	ИначеЕсли Команда = "ОбработатьСобытие" Тогда
		Событие = ВходныеПараметры[0];
		Данные  = ВходныеПараметры[1];
		Результат = ОбработатьСобытие(ОбъектДрайвера, Параметры, ПараметрыПодключения, Событие, Данные, ВыходныеПараметры);	
		
	// Завершение обработки события от устройства
	ИначеЕсли Команда = "ЗавершитьОбработкуСобытия" Тогда
		РезультатОбработкиСобытия = ВходныеПараметры[0];

		Результат = ЗавершитьОбработкуСобытия(ОбъектДрайвера, Параметры, ПараметрыПодключения,
		                                      РезультатОбработкиСобытия, ВыходныеПараметры);	
		
	// Указанная команда не поддерживается данным драйвером
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""%Команда%"" не поддерживается данным драйвером.';uk='Команда ""%Команда%"" не підтримується цим драйвером.'"));
		ВыходныеПараметры[1] = СтрЗаменить(ВыходныеПараметры[1], "%Команда%", Команда);
		Результат = Ложь;

	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура осуществляет получение веса груза, расположенного на весах.
//
Функция ПолучитьВес(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры)
	
	Результат = Истина;	
	ПолученВес = Ложь;
	
	ОбъектДрайвера.ЗапроситьВес();
	ИНАГРО_МенеджерОборудованияКлиент.Пауза(Параметры.Пауза);
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьСобытие(ОбъектДрайвера, Параметры, ПараметрыПодключения, Событие, Данные, ВыходныеПараметры)
	
	Результат = Истина;
	
	ПолученныйВес = -1;
	
	Если Событие = "WEIGHT" Тогда
		Если ОбъектДрайвера.Стабильность = 1 Тогда
			ПолученныйВес = ОбъектДрайвера.Вес;
			ПолученныйВес = ПолученныйВес * Параметры.Множитель;
			
			ВыходныеПараметры = Новый Массив();
			ВыходныеПараметры.Добавить("WP89");
			ВыходныеПараметры.Добавить(ПолученныйВес);
			
		Иначе
			ПолученныйВес = -1;
		КонецЕсли;
		
	Иначе 	
		ПолученныйВес = -1;
	КонецЕсли;

	Если ПолученныйВес = -1 Тогда
		
		ВыходныеПараметры = Новый Массив();
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru = 'Ошибка получения веса.
		                           |Возможно вес не стабилизировался или сработал TIMEOUT от весопроцессора. 
                                   |'; uk = 'Помилка отримання ваги.
								   |Можливо вага не стабілізувалась або спрацював TIMEOUT від вагопроцесора'"));
		
		Результат = Ложь;
		
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

// Процедура вызывается, когда система готова принять следующее событие от устройства
//
Функция ЗавершитьОбработкуСобытия(ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                  РезультатОбработкиСобытия, ВыходныеПараметры)

	Результат = Истина;
	
	Попытка
		ОбъектДрайвера.ЗакрытьПорт();
	Исключение
		ВыходныеПараметры = Новый Массив();
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(999);
		ВыходныеПараметры.Добавить(НСтр("ru = 'Ошибка закрытия Com-порта.
								|'; uk = 'Помилка закриття Com-порта.'"));
		
		Результат = Ложь;	
		
	КонецПопытки;	
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти