#Область ПрограммныйИнтерфейс

#Область ПараметрыУчетаЭлеватораИНастройки

//	Возвращает структуру параметров учета элеватора на указаную дату.
//
//	Параметры:
//  	Дата - Дата 
//
//	Возвращаемое значение:
//  	Структура - содержит значения ресурсов регистра
//		
Функция ПолучитьПараметрыУчетаЭлеватора(Дата) Экспорт 
	
	Возврат ИНАГРО_ЭлеваторСервер.ПолучитьПараметрыУчетаЭлеватора(Дата);
	
КонецФункции

//	Возвращает параметр учета элеватора на указаную дату по указаному имени.
//
//	Параметры:
//  	Дата                  - Дата
//		ПараметрУчета         - Строка
//		ЗначениеПоУмолчанию   - значение по умолчанию ресурса регистра с именем ПараметрУчета
//
//	Возвращаемое значение:
//      - ЛюбаяСсылка         - тип ресурса регистра с именем ПараметрУчета
//      - Неопределено        
//
Функция ПолучитьПараметрУчетаЭлеватора(Дата, ПараметрУчета, ЗначениеПоУмолчанию) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ПолучитьПараметрУчетаЭлеватора(Дата, ПараметрУчета, ЗначениеПоУмолчанию);
	
КонецФункции

// Получает наименование контрагента.
//
//	Параметры:
//  	Владелец - СправочникСсылка.Контрагенты
//
//	Возвращаемое значение:
//  	Строка
//
Функция ПолучитьНаименованияКонтрагента(Владелец) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ПолучитьНаименованияКонтрагента(Владелец);
	
КонецФункции

// Функция определяет принадлежность Контрагента к нашему предприятию.
//
//	Параметры:
//  	Контрагент - СправочникСсылка.Контрагенты
//	Возвращаемое значение:
//  	Булево     - Истина, если Контрагент принадлежит нашему предприятию
//
Функция ОпределитьПринадлежностьКонтрагента(Контрагент) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ОпределитьПринадлежностьКонтрагента(Контрагент)
	
КонецФункции

// Функция получает настройку списывать или нет отходы с владельцев.
//
//	Параметры:
//  	ДанныеОбъекта - Структура
//	Возвращаемое значение:
//  	Булево        - Истина, если не списывать отходы с владельцев
//
Функция ПолучитьНастройкуНеСписыватьОтходыСВладельцев(ДанныеОбъекта) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ПолучитьНастройкуНеСписыватьОтходыСВладельцев(ДанныеОбъекта);

КонецФункции	

// Получает настройку видимости для элементов форм, связанных с масличностью.
//
//	Параметры:
//  	Дата   - Дата
//	Возвращаемое значение:
//  	Булево - Истина, если разрешена видимость для элементов форм, связанных с масличностью
//  
Функция ПолучитьВидимостьМасличность(Дата) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ПолучитьВидимостьМасличность(Дата);
	
КонецФункции

// Функция проверяет на заполнение качества культуры
//
//	Параметры:
//		Дата               - Дата
//		ЛабораторныйАнализ - ДокументСсылка.ИНАГРО_ЛабораторныйАнализ
//		Влажность          - Число
//		Номенклатура       - СправочникСсылка.Номенклатура
//
//	Возвращаемое значение:
// 		Булево 
//
Функция ПроверкаЗаполненияКачества(Дата, ЛабораторныйАнализ, Влажность, Номенклатура) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ПроверкаЗаполненияКачества(Дата, ЛабораторныйАнализ, Влажность, Номенклатура);	
	
КонецФункции

// Получает значение указаного ресурса с регистра сведений ПредопределеннаяНоменклатуры.
//
//	Параметры:
//  	Номенклатура - СправочникСсылка.Номенклатура
//
//	Возвращаемое значение:
//  	СправочникСсылка.Номенклатура
//
Функция ПолучитьПредопределеннуюНоменклатуру(Номенклатура) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ПолучитьПредопределеннуюНоменклатуру(Номенклатура);	
	
КонецФункции	

// Возвращает предопределенную номенклатуру в виде структуры.
//
//	Параметры:
//  	Дата        - Дата
//		Организация - СправочникСсылка.Организации
//
//	Возвращаемое значение:
//  	Структура
//
Функция ПолучитьСтруктуруПредопределеннойНоменклатуры (Дата, Организация) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ПолучитьСтруктуруПредопределеннойНоменклатуры(ТекущаяДата(), Организация);
	
КонецФункции

// Получает значения базисных показателей.
//
//  Параметры:
//  	ВидКультуры        - СправочникСсылка.ИНАГРО_ВидыКультур
//  	Дата               - Дата
//  	Организация        - СправочникСсылка.Организации
//  	Контрагент         - СправочникСсылка.Контрагенты
//  	ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов
//  	Склад              - СправочникСсылка.Склады
//
//  Возвращаемое значение:	
//  	Структура
//
Функция ПолучитьБазисныеЗначения(ВидКультуры, Дата, Организация, Контрагент, ДоговорКонтрагента, Склад = Неопределено) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ПолучитьБазисныеЗначения(ВидКультуры, Дата, Организация, Контрагент, ДоговорКонтрагента, Склад);
	
КонецФункции                                      

// Получает цену на услугу элеватора.
//
//  Параметры:
//		Организация        - СправочникСсылка.Организации
//		Дата       		   - Дата
//		Контрагент		   - СправочникСсылка.Контрагент
//		ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов
//  	ВидКультуры		   - СправочникСсылка.ИНАГРО_ВидыКультур
//		Урожай             - СправочникСсылка.ИНАГРО_ВидыУрожая
//		Услуга             - СправочникСсылка.Номенклатура - услуга, цену которой получаем
//
//  Возвращаемое значение:	
//  	Число - цена на услугу
//
Функция ПолучитьЦенуУслугиЭлеватора(Организация = Неопределено,
	                                Дата,
									Контрагент = Неопределено,
									ДоговорКонтрагента = Неопределено,
									ВидКультуры = Неопределено,
									Урожай = Неопределено,
									Услуга) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ПолучитьЦенуУслугиЭлеватора(Организация, Дата, Контрагент, ДоговорКонтрагента, ВидКультуры, Урожай, Услуга);	
	
КонецФункции

// Получает процент естественной убыли.
//
//	Параметры:
//		Дата           - Дата
//  	Номенклатура   - СправочникСсылка.Номенклатура
//		СрокХранения   - Число - период хранения культуры
//		СпособХранения - ПеречислениеСсылка.ИНАГРО_СпособХранения
//		Склад          - СправочникСсылка.Склады
//
//  Возвращаемое значение:	
//  	Число          - расчитаный процент естественной убыли
//
Функция ПолучитьПроцентЕстественнойУбыли(Дата, Номенклатура, СрокХранения,СпособХранения = Неопределено,Склад = Неопределено) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ПолучитьПроцентЕстественнойУбыли(Дата, Номенклатура,СрокХранения,СпособХранения,Склад);
	
КонецФункции

// Функция возвращает операцию по документу "Переоформление".
//
//	Параметры:
//  	Документ - ДокументОбъект.ИНАГРО_Переоформление, ДокументСсылка.ИНАГРО_Переоформление
//	Возвращаемое значение:
//  	ПеречислениеСсылка.ИНАГРО_ВидыОперацийПереоформления
//
Функция ПолучитьОперациюПереоформления(Документ) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ПолучитьОперациюПереоформления(Документ);
	
КонецФункции

// Функция возвращает информацию об ответственных лицах организации на дату среза.
//
//	Параметры:
//  	Организация              - СправочникСсылка.Организации
//		ДатаСреза                - Дата
//		СтруктурнаяЕдиница       - СправочникСсылка.Склады
//		ДанныеОтветственногоЛица - Структура
//
//	Возвращаемое значение:
//  	СправочникСсылка.ФизическиеЛица
//
Функция ОтветственныеЛица(Организация, ДатаСреза, СтруктурнаяЕдиница, ДанныеОтветственногоЛица = Неопределено) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ОтветственныеЛица(Организация, ДатаСреза, СтруктурнаяЕдиница, ДанныеОтветственногоЛица);
	
КонецФункции

// Функция возвращает информацию об ответственных лицах организации на дату среза.
//
//	Параметры:
//  	Организация              - СправочникСсылка.Организации
//		ДатаСреза                - Дата
//		СтруктурнаяЕдиница       - СправочникСсылка.Склады
//		ДанныеОтветственногоЛица - Структура
//
//	Возвращаемое значение:
//  	СправочникСсылка.ФизическиеЛица
//
Функция ОтветственныеЛицаИмяФамилия(Организация, ДатаСреза, СтруктурнаяЕдиница, ДанныеОтветственногоЛица = Неопределено) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ОтветственныеЛицаИмяФамилия(Организация, ДатаСреза, СтруктурнаяЕдиница, ДанныеОтветственногоЛица);
	
КонецФункции

// Функция возвращает информацию об ответственных лицах организации на дату среза.
//
//	Параметры:
//  	Организация - СправочникСсылка.Организации
//		ДатаСреза   - Дата
//
//	Возвращаемое значение:
//  	Структура
//
Функция ОтветственныеЛицаОрганизации(Организация, ДатаСреза) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ОтветственныеЛицаОрганизации(Организация, ДатаСреза);
	
КонецФункции

// Функция возвращает информацию об ответственных лицах организации в формате Имя и Фамилия на дату среза.
//
//	Параметры:
//  	Организация - СправочникСсылка.Организации
//		ДатаСреза   - Дата
//
//	Возвращаемое значение:
//  	Структура
//
Функция ОтветственныеЛицаОрганизацииИмяФамилия(Организация, ДатаСреза) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ОтветственныеЛицаОрганизацииИмяФамилия(Организация, ДатаСреза);
	
КонецФункции

#Область ДополнительныеРеквизиты

// Получает значение указаного ресурса из регистра сведений ДополнительныеРеквизитыОрганизации на указаную Дату.
//
//	Параметры:
//  	Организация  - СправочникСсылка.Организации
//		ИмяРеквизита - Строка
//		Дата         - Дата
//
//	Возвращаемое значение:
//  	- Булево	
//		- СправочникСсылка.Контрагент
//		- СправочникСсылка.ДоговорыКонтрагентов
//      - Неопределено
//
Функция ПолучитьДополнительныйРеквизитОрганизации(Организация, ИмяРеквизита, Дата = Неопределено) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ПолучитьДополнительныйРеквизитОрганизации(Организация, ИмяРеквизита, Дата);
	
КонецФункции

// Получает значение указаного ресурса из регистра сведений ИНАГРО_ДополнительныеРеквизитыПодразделенияОрганизации.
//
//	Параметры:
//  	ПодразделениеОрганизации - СправочникСсылка.ПодразделенияОрганизаций
//		ИмяРеквизита             - Строка
//
//	Возвращаемое значение:
//  	Булево	
//
Функция ПолучитьДополнительныйРеквизитПодразделенияОрганизации(ПодразделениеОрганизации, ИмяРеквизита) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ПолучитьДополнительныйРеквизитПодразделенияОрганизации(ПодразделениеОрганизации, ИмяРеквизита); 
		
КонецФункции	

// Получает значение указаного ресурса из регистра сведений ДополнительныеРеквизитыКонтрагента.
//
//	Параметры:
//		Контрагент            - СправочникСсылка.Контрагент
//		ИмяРеквизита          - Строка
//      ЗначениеПоУмолчанию   - значение по умолчанию ресурса регистра с именем ИмяРеквизита
//
//	Возвращаемое значение:
//  	- Булево	          - Истина, если Контрагент принадлежит нашему предприятию
//      - Неопределено        
//
Функция ПолучитьДополнительныйРеквизитКонтрагента(Контрагент, ИмяРеквизита, ЗначениеПоУмолчанию = Неопределено) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ПолучитьДополнительныйРеквизитКонтрагента(Контрагент, ИмяРеквизита, ЗначениеПоУмолчанию);
	
КонецФункции

// Получает значение указаного ресурса из регистра сведений ДополнительныеРеквизитыНоменклатуры.
//
//	Параметры:
//  	Номенклатура - СправочникСсылка.Номенклатура
//		ИмяРеквизита - Строка
//
//	Возвращаемое значение:
//  	- Булево
//  	- СправочникСсылка.ИНАГРО_ВидыКультур
//      - СправочникСсылка.ИНАГРО_КлассификаторЗерна
//      - ПеречислениеСсылка.ИНАГРО_ВидыТМЦ
//      - Неопределено
//
Функция ПолучитьДополнительныйРеквизитНоменклатуры(Номенклатура, ИмяРеквизита) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ПолучитьДополнительныйРеквизитНоменклатуры(Номенклатура, ИмяРеквизита);

КонецФункции	

// Получает значение указаного ресурса из регистра сведений ИНАГРО_ДополнительныеРеквизитыСкладов.
//
//	Параметры:
//  	Склад - СправочникСсылка.Склады
//		ИмяРеквизита - Строка
//
//	Возвращаемое значение:
//  	- Булево
//  	- СправочникСсылка.ИНАГРО_ВидыКультур
//      - СправочникСсылка.ИНАГРО_КлассификаторЗерна
//      - ПеречислениеСсылка.ИНАГРО_ВидыТМЦ
//      - Неопределено
//
Функция ПолучитьДополнительныйРеквизитСклада(Склад, ИмяРеквизита) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ПолучитьДополнительныйРеквизитСклада(Склад, ИмяРеквизита);
	
КонецФункции

// Получает значение указаного ресурса из регистра сведений ДополнительныеРеквизитыМестХранения.
//
//	Параметры:
//  	Дата          - Дата	
// 		МестоХранения - СправочникСсылка.ИНАГРО_МестаХранения
//		ИмяРеквизита  - Строка
//
//	Возвращаемое значение:
//  	- СправочникСсылка.ИНАГРО_ВидыХранения
//      - Неопределено
//
Функция ПолучитьДополнительныйРеквизитМестаХранения(Дата, МестоХранения, ИмяРеквизита) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ПолучитьДополнительныйРеквизитМестаХранения(Дата, МестоХранения, ИмяРеквизита);
		
КонецФункции

#КонецОбласти

#КонецОбласти 

#Область ЛабораторныйАнализ

// ЛабораторныйАнализПриИзмененииНаСервере.
//
//	Параметры:
//  	ДанныеОбъекта                    - Структура	
// 		ПараметрыДляРасчетаЗачетногоВеса - Структура
//
Процедура ЛабораторныйАнализПриИзмененииНаСервере(ДанныеОбъекта, ПараметрыДляРасчетаЗачетногоВеса = Неопределено) Экспорт
	
	ИНАГРО_ЭлеваторСервер.ЛабораторныйАнализПриИзмененииНаСервере(ДанныеОбъекта, ПараметрыДляРасчетаЗачетногоВеса);
	
КонецПроцедуры

// Проверяет заполнение лабораторного анализа.
//
//	Параметры:
//  	Результат                      - ДокументСсылка.ИНАГРО_ЛабораторныйАнализ	
// 		ПараметрыДляПроверкиЗаполнения - Структура
//
//	Возвращаемое значение:
//  	Булево
//
Функция ЛабораторныйАнализПроверкаЗаполнения(Результат, ПараметрыДляПроверкиЗаполнения) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ЛабораторныйАнализПроверкаЗаполнения(Результат, ПараметрыДляПроверкиЗаполнения);
	
КонецФункции

// Получает номер из лабораторного анализа
//
//	Параметры:
//  	ЛабораторныйАнализ - ДокументСсылка.ИНАГРО_ЛабораторныйАнализ	
//
//	Возвращаемое значение:
//  	- Строка
//  	- Число
//
Функция ПолучитьНомерЛабАнализаИзЛабАнализа(ЛабораторныйАнализ) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ПолучитьНомерЛабАнализаИзЛабАнализа(ЛабораторныйАнализ);
	
КонецФункции

// Получает масличность из лабораторного анализа.
//
//	Параметры:
//  	ЛабораторныйАнализ - ДокументСсылка.ИНАГРО_ЛабораторныйАнализ	
//
//	Возвращаемое значение:
//  	Число
//  
Функция ПолучитьМасличностьИзЛабАнализа(ЛабораторныйАнализ) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ПолучитьМасличностьИзЛабАнализа(ЛабораторныйАнализ);
	
КонецФункции

#КонецОбласти

#Область Движения

#Область ДвиженияПоРегистру_ИНАГРО_Остатки

// Выполняет движение приход по регистру ИНАГРО_Остатки.
//
//  Параметры:
//		Движения       		      - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	  - Структура - структура реквизитов шапки документа
//		КорректироватьЗачетныйВес - Булево
//
Процедура ДвиженияПоРегиструОстаткиПриход(Движения, СтруктураШапкиДокумента, КорректироватьЗачетныйВес = Ложь) Экспорт 
	
	ИНАГРО_ЭлеваторСервер.ДвиженияПоРегиструОстаткиПриход(Движения, СтруктураШапкиДокумента, КорректироватьЗачетныйВес);
	
КонецПроцедуры 

// Выполняет движение расход по регистру ИНАГРО_Остатки.
//
//  Параметры:
//		Движения       		         - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	     - Структура - структура реквизитов шапки документа
//		СписатьОстатокСЗачетногоВеса - Булево
//
Процедура ДвиженияПоРегиструОстаткиРасход(Движения, СтруктураШапкиДокумента, СписатьОстатокСЗачетногоВеса = Ложь) Экспорт
	
	ИНАГРО_ЭлеваторСервер.ДвиженияПоРегиструОстаткиРасход(Движения, СтруктураШапкиДокумента, СписатьОстатокСЗачетногоВеса);
		 
КонецПроцедуры 

#КонецОбласти

#Область ДвиженияПоРегистру_ИНАГРО_ОстаткиСводная

// Выполняет движение приход по регистру ИНАГРО_ОстаткиСводная.
//
//  Параметры:
//		Движения       		      - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента_  - Структура, СтрокаТаблицыЗначений - структура реквизитов шапки документа
//		КорректироватьЗачетныйВес - Булево
//
Процедура ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтруктураШапкиДокумента_, КорректироватьЗачетныйВес = Ложь) Экспорт
	
	ИНАГРО_ЭлеваторСервер.ДвиженияПоРегиструОстаткиСводнаяПриход(Движения, СтруктураШапкиДокумента_, КорректироватьЗачетныйВес);
		
КонецПроцедуры 

// Выполняет движение расход по регистру ИНАГРО_ОстаткиСводная.
//
//
//  Параметры:
//		Движения       		         - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента_     - Структура, СтрокаТаблицыЗначений - структура реквизитов шапки документа
//		СписатьОстатокСЗачетногоВеса - Булево
//
Процедура ДвиженияПоРегиструОстаткиСводнаяРасход(Движения, СтруктураШапкиДокумента_, СписатьОстатокСЗачетногоВеса = Ложь) Экспорт
	
	ИНАГРО_ЭлеваторСервер.ДвиженияПоРегиструОстаткиСводнаяРасход(Движения, СтруктураШапкиДокумента_, СписатьОстатокСЗачетногоВеса);
	
КонецПроцедуры 

#КонецОбласти

#Область ДвиженияПоРегистру_ИНАГРО_Форма36

// Выполняет движение по приходным ресурсам по регистру ИНАГРО_Форма36.
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		Операция                - Строка - вид движения по регистру
//		СписатьКачествоСОстатка - Булево
//		Период                  - Булево
//
Процедура ДвиженияПоРегиструФорма36Приход(Движения, СтруктураШапкиДокумента, Операция = "Приход", СписатьКачествоСОстатка = 0, Период = 0) Экспорт
	
	ИНАГРО_ЭлеваторСервер.ДвиженияПоРегиструФорма36Приход(Движения, СтруктураШапкиДокумента, Операция, СписатьКачествоСОстатка, Период)
	
КонецПроцедуры 

// Выполняет движение по расходным ресурсам по регистру ИНАГРО_Форма36.
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		Операция                - Строка - вид движения по регистру
//		СписатьКачествоСОстатка - Булево
//		Период                  - Булево
//
Процедура ДвиженияПоРегиструФорма36Расход(Движения, СтруктураШапкиДокумента, Операция = "Приход", СписатьКачествоСОстатка = 0, Период = 0) Экспорт
	
	ИНАГРО_ЭлеваторСервер.ДвиженияПоРегиструФорма36Расход(Движения, СтруктураШапкиДокумента, Операция, СписатьКачествоСОстатка, Период)
	
КонецПроцедуры

#КонецОбласти

#Область ДвиженияПоРегистру_ИНАГРО_Форма36Сводная

// Выполняет движение по приходным ресурсам по регистру ИНАГРО_Форма36Сводная.
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		Операция                - Строка - вид движения по регистру
//		СписатьКачествоСОстатка - Булево
//		Период                  - Булево
//
Процедура ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтруктураШапкиДокумента, Операция = "Приход", СписатьКачествоСОстатка = 0, Период = 0) Экспорт
	
	ИНАГРО_ЭлеваторСервер.ДвиженияПоРегиструФорма36СводнаяПриход(Движения, СтруктураШапкиДокумента, Операция, СписатьКачествоСОстатка, Период);
	
КонецПроцедуры 

// Выполняет движение по расходным ресурсам по регистру ИНАГРО_Форма36Сводная.
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		Операция                - Строка - вид движения по регистру
//		СписатьКачествоСОстатка - Булево
//		Период                  - Булево
//
Процедура ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтруктураШапкиДокумента, Операция = "Приход", СписатьКачествоСОстатка = 0, Период = 0) Экспорт
	
	ИНАГРО_ЭлеваторСервер.ДвиженияПоРегиструФорма36СводнаяРасход(Движения, СтруктураШапкиДокумента, Операция, СписатьКачествоСОстатка, Период)
	
КонецПроцедуры 

#КонецОбласти

#Область ДвиженияПоДругимРегистрам

// Выполняет движения Приход и Расход по регистру ИНАГРО_РасчетыПоУслугам.
//
//  Параметры:
//		Движения     - КоллекцияДвижений - коллекция движений документа
//		ТаблицаУслуг - ТаблицаЗначений
//		ВидДвижения  - Строка - вид движения по регистру
//
Процедура ДвиженияПоРегиструРасчетыПоУслугам(Движения, ТаблицаУслуг, ВидДвижения = "") Экспорт
	
	ИНАГРО_ЭлеваторСервер.ДвиженияПоРегиструРасчетыПоУслугам(Движения, ТаблицаУслуг, ВидДвижения);
	
КонецПроцедуры	  

// Выполняет движение по регистру ИНАГРО_Форма49 (журнал лабораторных анализов).
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//
Процедура ДвиженияПоРегиструФорма49(Движения, СтруктураШапкиДокумента) Экспорт
	
	ИНАГРО_ЭлеваторСервер.ДвиженияПоРегиструФорма49(Движения, СтруктураШапкиДокумента);
	
КонецПроцедуры

// Выполняет движение по регистру ИНАГРО_ЖурналЛабораторныхАнализов.
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//
Процедура ДвиженияПоРегиструЖурналЛабораторныхАнализов(Движения, СтруктураШапкиДокумента) Экспорт
	
	ИНАГРО_ЭлеваторСервер.ДвиженияПоРегиструЖурналЛабораторныхАнализов(Движения, СтруктураШапкиДокумента);
	
КонецПроцедуры 

// Выполняет движение по регистру ИНАГРО_ВыпускПродукции.
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//
Процедура ДвиженияПоРегиструВыпускПродукции(СтруктураШапкиДокумента, Движения) Экспорт
	
	ИНАГРО_ЭлеваторСервер.ДвиженияПоРегиструВыпускПродукции(СтруктураШапкиДокумента, Движения);
	
КонецПроцедуры

// Выполняет движение по регистру ИНАГРО_ЗатратыНаПроизводство.
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		СтрокаПродукции         - строка табличной части
//
Процедура ДвиженияПоРегиструЗатратыНаПроизводство(СтруктураШапкиДокумента, Движения, СтрокаПродукции = Неопределено) Экспорт
	
	ИНАГРО_ЭлеваторСервер.ДвиженияПоРегиструЗатратыНаПроизводство(СтруктураШапкиДокумента, Движения, СтрокаПродукции);
		
КонецПроцедуры

// Выполняет движение по приходу регистра ИНАГРО_РасчетныйВыпускПродукции.
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//	
Процедура ДвиженияПоРегиструРасчетныйВыпускПродукцииПриход(Движения, СтруктураШапкиДокумента) Экспорт
	
	ИНАГРО_ЭлеваторСервер.ДвиженияПоРегиструРасчетныйВыпускПродукции(Движения, СтруктураШапкиДокумента, ВидДвиженияНакопления.Приход);
	
КонецПроцедуры

// Выполняет движение по расходу регистра ИНАГРО_РасчетныйВыпускПродукции.
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента - Структура - структура реквизитов шапки документа
//	
Процедура ДвиженияПоРегиструРасчетныйВыпускПродукцииРасход(Движения, СтруктураШапкиДокумента) Экспорт
	
	ИНАГРО_ЭлеваторСервер.ДвиженияПоРегиструРасчетныйВыпускПродукции(Движения, СтруктураШапкиДокумента, ВидДвиженияНакопления.Расход);
	
КонецПроцедуры

// Выполняет движение по регистру ИНАГРО_КонтрольВвозаСобственногоЗерна.
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		СтрокаТЧ                - строка табличной части
//		ВидДвижения             - Строка - вид движения по регистру
//
Процедура ДвиженияПоРегиструКонтрольВвозаСобственногоЗерна(Движения, СтруктураШапкиДокумента, СтрокаТЧ, ВидДвижения = "") Экспорт
	
	ИНАГРО_ЭлеваторСервер.ДвиженияПоРегиструКонтрольВвозаСобственногоЗерна(Движения, СтруктураШапкиДокумента, СтрокаТЧ, ВидДвижения);
	
КонецПроцедуры

// Выполняет движение по регистру ИНАГРО_КонтрольВывозаСобственногоЗерна.
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		СтрокаТЧ                - строка табличной части
//		ВидДвижения             - Строка - вид движения по регистру
//
Процедура ДвиженияПоРегиструКонтрольВывозаСобственногоЗерна(Движения, СтруктураШапкиДокумента, СтрокаТЧ, ВидДвижения = "") Экспорт
	
	ИНАГРО_ЭлеваторСервер.ДвиженияПоРегиструКонтрольВывозаСобственногоЗерна(Движения, СтруктураШапкиДокумента, СтрокаТЧ, ВидДвижения);
	
КонецПроцедуры

// Выполняет движение по регистру ИНАГРО_КонтрольПриказовНаВывоз.
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		СтрокаТЧ                - строка табличной части
//		ВидДвижения             - Строка - вид движения по регистру
//
Процедура ДвиженияПоРегиструКонтрольПриказовНаВывоз(Движения, СтруктураШапкиДокумента, СтрокаТЧ, ВидДвижения = "")Экспорт
	
	ИНАГРО_ЭлеваторСервер.ДвиженияПоРегиструКонтрольПриказовНаВывоз(Движения, СтруктураШапкиДокумента, СтрокаТЧ, ВидДвижения);
	
КонецПроцедуры

// Выполняет движение по регистру ИНАГРО_ДвиженияПоПереработке
//
//  Параметры:
//		Движения       		    - КоллекцияДвижений - коллекция движений документа
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		ВидДвижения             - Строка - вид движения по регистру
//
Процедура ДвиженияПоРегиструДвиженияПоПереработке(Движения, СтруктураШапкиДокумента, ВидДвижения = "") Экспорт
	
	ИНАГРО_ЭлеваторСервер.ДвиженияПоРегиструДвиженияПоПереработке(Движения, СтруктураШапкиДокумента, ВидДвижения);
	
КонецПроцедуры 

#КонецОбласти

#КонецОбласти

#Область ФормированиеРеестровТТН

// Формирует Реестры ТТНВвоз
//
//  Параметры:
//  	ПараметрыРеестра - Структура
//
Процедура СформироватьРеестрТТН_Ввоз(ПараметрыРеестра) Экспорт
	
	ИНАГРО_ЭлеваторСервер.СформироватьРеестрТТН_Ввоз(ПараметрыРеестра);
	
КонецПроцедуры

// Формирует Реестры ТТНВывоз
//
//  Параметры:
//  	ПараметрыРеестра - Структура
//
Процедура СформироватьРеестрТТН_Вывоз(ПараметрыРеестра) Экспорт
	
	ИНАГРО_ЭлеваторСервер.СформироватьРеестрТТН_Вывоз(ПараметрыРеестра);	
	
КонецПроцедуры

// Формирует Реестры ТТНВнутр
//
//  Параметры:
//  	ПараметрыРеестра - Структура
//
Процедура СформироватьРеестрТТН_Внутр(ПараметрыРеестра) Экспорт
	
	 ИНАГРО_ЭлеваторСервер.СформироватьРеестрТТН_Внутр(ПараметрыРеестра);
	
КонецПроцедуры

// Формирует Реестры ТТНВвозЖД
//
//	Параметры:
//  	ПараметрыРеестра - Структура
//
Процедура СформироватьРеестрТТН_ВвозЖД(ПараметрыРеестра) Экспорт
	
	ИНАГРО_ЭлеваторСервер.СформироватьРеестрТТН_ВвозЖД(ПараметрыРеестра);
	
КонецПроцедуры

// Формирует Реестры ТТНВывозЖД
//
//	Параметры:
//  	ПараметрыРеестра - Структура
//
Процедура СформироватьРеестрТТН_ВывозЖД(ПараметрыРеестра) Экспорт
	
	ИНАГРО_ЭлеваторСервер.СформироватьРеестрТТН_ВывозЖД(ПараметрыРеестра);	
	
КонецПроцедуры

#КонецОбласти

#Область Расчеты

// Пересчет зачетного веса при проведении документа.
//
//  Параметры:
//  	ДанныеОбъекта - Структура - структура с параметрами для расчета зачетного веса
//
//  Возвращаемое значение:
//  	Число         - рассчитанное значение зачетного веса
//
Функция ЗачетныйВесПриПроведении(ДанныеОбъекта) Экспорт //, ФизическийВес = 0, Номенклатура, Влажность = 0, СорнаяПримесь = 0, ЗачетныйВес = 0, Организация, Контрагент, ДоговорКонтрагента) Экспорт 
	
	Возврат ИНАГРО_ЭлеваторСервер.ЗачетныйВесПриПроведении(ДанныеОбъекта); //, ФизическийВес, Номенклатура, Влажность, СорнаяПримесь, ЗачетныйВес, Организация, Контрагент, ДоговорКонтрагента);
	
КонецФункции

// Пересчет физического веса в зачетный.
//
//  Параметры:
//  	ДанныеОбъекта               - Структура - структура с параметрами для расчета зачетного веса
//      ПересчетПриЛюбыхОтклонениях - Булево
//
//  Возвращаемое значение:
//  	Число                       - рассчитанное значение зачетного веса
//
Функция	РассчитатьЗачетныйВес(ДанныеОбъекта, ПересчетПриЛюбыхОтклонениях = Ложь) Экспорт //, ФизическийВес = 0, Номенклатура, Влажность, СорнаяПримесь, ПересчетПриЛюбыхОтклонениях = Ложь, Организация, Контрагент, ДоговорКонтрагента) Экспорт
		
	Возврат ИНАГРО_ЭлеваторСервер.РассчитатьЗачетныйВес(ДанныеОбъекта, ПересчетПриЛюбыхОтклонениях); //, ФизическийВес, Номенклатура, Влажность, СорнаяПримесь, ПересчетПриЛюбыхОтклонениях, Организация, Контрагент, ДоговорКонтрагента);
	
КонецФункции

// Пересчет физического веса в контрольный зачетный вес.
//
//  Параметры:
//  	Ссылка             - ДокументСсылка - документ для которого выполяентся операция
//      ФизическийВес      - Число - физический вес
//  	Номенклатура       - СправочникСсылка.Номенклатура
//  	Влажность          - Число
//  	СорнаяПримесь      - Число
//  	Организация        - СправочникСсылка.Организации
//  	Контрагент         - СправочникСсылка.Контрагенты
//  	ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов
//
//  Возвращаемое значение:
//  	Число              - рассчитанное значение контрольного зачетного веса
//
Функция	РассчитатьКонтрольныйЗачетныйВес(Ссылка, ФизическийВес, Номенклатура, Влажность, СорнаяПримесь, Организация, Контрагент, ДоговорКонтрагента) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.РассчитатьКонтрольныйЗачетныйВес(Ссылка, ФизическийВес, Номенклатура, Влажность, СорнаяПримесь, Организация, Контрагент, ДоговорКонтрагента);
	
КонецФункции

// Заполняет параметры связаные с физическим весом до сушки и очистки.
//
//  Параметры:
//		ДокументОбъект  - ДокументОбъект.ИНАГРО_Форма34Сводная
//		МетодЗаполнения - Строка
//
Процедура ЗаполнитьФизическийВесДо(ДокументОбъект, МетодЗаполнения = "ЗаполнитьФорму34ДаннымиАвтоВвоза") Экспорт 
	
	ИНАГРО_ЭлеваторСервер.ЗаполнитьФизическийВесДо(ДокументОбъект, МетодЗаполнения);
		
КонецПроцедуры

// Заполняет параметры связанные с физическим весом после сушки и очистки.
//
//  Параметры:
//		ДокументОбъект              - ДокументОбъект.ИНАГРО_Форма34Сводная
//		МетодЗаполнения             - Строка
//		ЗаполнитьРасчетПоВладельцам - Булево
//
Процедура ЗаполнитьФизическийВесПосле(ДокументОбъект, МетодЗаполнения = "ЗаполнитьФорму34ДаннымиАвтоВвоза", ЗаполнитьРасчетПоВладельцам = Истина) Экспорт
	
	ИНАГРО_ЭлеваторСервер.ЗаполнитьФизическийВесПосле(ДокументОбъект, МетодЗаполнения, ЗаполнитьРасчетПоВладельцам);
		
КонецПроцедуры

// Расчет натуралных скидок.
//
//	Параметры:
//  	Документ                 - ДокументОбъект, ДокументСсылка - документ для которого выполяентся операция
//		СтрокаТабличнойЧасти     - строка табличной части
//		СтрокаТаблицыПартийЗерна - СтрокаТаблицыЗначений
//
Процедура РасчетНатуральныхСкидок(Документ, СтрокаТабличнойЧасти = Неопределено, СтрокаТаблицыПартийЗерна = Неопределено) Экспорт
	
	ИНАГРО_ЭлеваторСервер.РасчетНатуральныхСкидок(Документ, СтрокаТабличнойЧасти, СтрокаТаблицыПартийЗерна);
		
КонецПроцедуры

// Расчитывает процент влажности или сорной примеси.
//
//	Параметры:
//		ФизВес     - Число - физический вес для расчета
//  	ВесУбыли   - Число - вес по влажноси или по сорной примеси или по зерновой примеси
//  	Округление - Число - количество знаков после запятой
//
//	Возвращаемое значение:
//  	Число      - процент влажности или сорной примеси
//
Функция Процент(ФизВес = 0, ВесУбыли = 0, Округление = 2) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.Процент(ФизВес, ВесУбыли, Округление);
	
КонецФункции

// Функция возвращает Истина если ТМЦ является продукцией.
//
//	Параметры:
//		ТМЦ - СправочникСсылка.Номенклатура
//  	
//	Возвращаемое значение:
//  	Булево
//
Функция Продукция(ТМЦ) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.Продукция(ТМЦ);
	
КонецФункции

// Функция возвращает Истина если ТМЦ является годными отходами.
//
//	Параметры:
//		ТМЦ - СправочникСсылка.Номенклатура
//  	
//	Возвращаемое значение:
//  	Булево
//
Функция ГодныеОтходы(ТМЦ) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ГодныеОтходы(ТМЦ);
	
КонецФункции

// Функция возвращает Истина если ТМЦ является негодными отходами.
//
//	Параметры:
//		ТМЦ - СправочникСсылка.Номенклатура
//  	
//	Возвращаемое значение:
//  	Булево
//
Функция НегодныеОтходы(ТМЦ) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.НегодныеОтходы(ТМЦ);
	
КонецФункции

// Возвращает вес прописью.
//
//	Параметры:
//		Язык     		- Строка - код языка прописи
//  	Вес   			- Число - числовое значения веса
//  	БезДробнойЧасти - Булево - означает будет ли выводится дробная часть.
//
//	Возвращаемое значение: 
//		Строка          - вес прописью
//
Функция ВернутьВесПрописью(Язык = "", Вес, БезДробнойЧасти = Истина) Экспорт
		
	Возврат ИНАГРО_ЭлеваторСервер.ВернутьВесПрописью(Язык, Вес, БезДробнойЧасти);
	
КонецФункции

// Возвращает сумму прописью.
//
//	Параметры:
//  	Сумма  - Число - числовое значения суммы.
//
//	Возвращаемое значение:
//		Строка - сумма прописью
//
Функция ВернутьСуммуПрописью(Сумма) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ВернутьСуммуПрописью(Сумма);
	
КонецФункции

#КонецОбласти 

#Область ПолучениеОстатков

// Заполняет структуру шапки остатками из регистра ИНАГРО_Форма36.
//
//  Параметры:
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		Фильтр                  - Строка - фильтр для запроса
//
//  Возвращаемое значение:
//  	Структура               - СтруктураШапкиДокумента с добавлеными параметрами из Формы36.
//
Функция ЗаполнитьСтруктуруШапкиДокументаОстаткамиФормы36(СтруктураШапкиДокумента, Фильтр) Экспорт
	
	Возврат	ИНАГРО_ЭлеваторСервер.ЗаполнитьСтруктуруШапкиДокументаОстаткамиФормы36(СтруктураШапкиДокумента, Фильтр);
	
КонецФункции

// Заполняет структуру шапки остатками из регистра ИНАГРО_Форма36Сводная.
//
//  Параметры:
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//		Фильтр                  - Строка - фильтр для запроса
//
//  Возвращаемое значение:
//  	Структура               - СтруктураШапкиДокумента с добавлеными параметрами из Формы36.
//
Функция ЗаполнитьСтруктуруШапкиДокументаОстаткамиФормы36Сводная(СтруктураШапкиДокумента, Фильтр) Экспорт
	
	Возврат	ИНАГРО_ЭлеваторСервер.ЗаполнитьСтруктуруШапкиДокументаОстаткамиФормы36Сводная(СтруктураШапкиДокумента, Фильтр);
	
КонецФункции

// Проверяет остатки по приказу.
//
//	Параметры:
//		СтруктураШапкиДокумента	- Структура - структура реквизитов шапки документа
//
//	Возвращаемое значение:
//  	Булево                  - Отказ = Истина, если нет остатков по приказу
//
Функция ПроверитьОстатокПоПриказу(СтруктураШапкиДокумента) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ПроверитьОстатокПоПриказу(СтруктураШапкиДокумента);
		
КонецФункции

// Проверяет наличие зерна на остатке.
//
//  Параметры:
//  	ДанныеОбъекта - Структура
//
//  Возвращаемое значение:	
//  	Структура     - структура, содержащая вес зерна и текст сообщения с указанными параметрами.   
//
Функция ПроверкаНаличияЗерна(ДанныеОбъекта) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ПроверкаНаличияЗерна(ДанныеОбъекта);
	
КонецФункции

#КонецОбласти 

#Область БлокировкаДокументовДляЗаписи

// Проверка блокировки документов для записи.
//
//  Параметры:
//  	Источник        - ДокументОбъект
//      Отказ           - Булево - устанавливает в Истина, если отказ от формирования типового документа
//  	РежимЗаписи     - РежимЗаписиДокумента
//  	РежимПроведения - РежимПроведенияДокумента 
//
Процедура ПроверкаБлокировкиДокументовДляЗаписи(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Перем ИгнорироватьЗапретРедактирования;
	
	Если Отказ ИЛИ Источник.ОбменДанными.Загрузка Тогда		 
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ИгнорироватьЗапретРедактирования") Тогда
		ИгнорироватьЗапретРедактирования = Источник.ДополнительныеСвойства.ИгнорироватьЗапретРедактирования;
	Иначе	
		ИгнорироватьЗапретРедактирования = Ложь;
	КонецЕсли;
	
	Если  ИгнорироватьЗапретРедактирования = Ложь Тогда
		
		// Проверим возможность изменения документа
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ТаблицаРегистра.Период КАК Период,
			|	ТаблицаРегистра.ДокументИсточник КАК ДокументИсточник,
			|	ТаблицаРегистра.ТиповыйДокумент КАК ТиповыйДокумент,
			|	ТаблицаРегистра.ЗапретРедактирования КАК ЗапретРедактирования
			|ИЗ
			|	РегистрСведений.ИНАГРО_СформированныеДокументы КАК ТаблицаРегистра
			|ГДЕ
			|	ТаблицаРегистра.ТиповыйДокумент = &Источник";
		
		Запрос.УстановитьПараметр("Источник", Источник.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Отказ = Ложь;
		Если НЕ Выборка.Количество() = 0 Тогда
			Выборка.Следующий();
			ЭтоЗапрет = Выборка.ЗапретРедактирования;
			//Пока Выборка.Следующий() Цикл
			Если ЭтоЗапрет Тогда
				Если Выборка.ЗапретРедактирования Тогда 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Документ: %1 сформирован автоматически на основании документа %2.';uk='Документ: %1 сформований автоматично на підставі документа %2.'"), Источник, Выборка.ДокументИсточник)+ Символы.ПС + 
					НСтр("ru='На данный документ установлен запрет редактирования!'; uk='На даний документ встановлено заборону редагування!'"),,,СтатусСообщения.Информация);
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли
			//КонецЦикла;
		КонецЕсли;	  
	КонецЕсли;
	
	// Распроведем или пометим на удаление сфоримированые документы
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаРегистра.Период КАК Период,
		|	ТаблицаРегистра.ДокументИсточник КАК ДокументИсточник,
		|	ТаблицаРегистра.ИмяТиповогоДокумента КАК ИмяТиповогоДокумента,
		|	ТаблицаРегистра.ПорядковыйНомерТиповогоДокумента КАК ПорядковыйНомерТиповогоДокумента,
		|	ТаблицаРегистра.ТиповыйДокумент КАК ТиповыйДокумент,
		|	ТаблицаРегистра.ЗапретРедактирования КАК ЗапретРедактирования
		|ИЗ
		|	РегистрСведений.ИНАГРО_СформированныеДокументы КАК ТаблицаРегистра
		|ГДЕ
		|	ТаблицаРегистра.ДокументИсточник = &Источник";
	
	Запрос.УстановитьПараметр("Источник", Источник.Ссылка);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() <> 0 Тогда
		
		РазблокироватьДокументыДляЗаписи(Источник.Ссылка);
		
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.ТиповыйДокумент.ПолучитьОбъект();
			ДокументОбъект.ДополнительныеСвойства.Вставить("ИгнорироватьЗапретРедактирования", ИгнорироватьЗапретРедактирования);
			
			Если (РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) И ДокументОбъект.Проведен Тогда 
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			
			Если Источник.ПометкаУдаления <> ДокументОбъект.ПометкаУдаления Тогда 
				ДокументОбъект.ПометкаУдаления = Источник.ПометкаУдаления;
				ДокументОбъект.Записать();
			КонецЕсли;
			
			ЗаблокироватьДокументыДляЗаписи(Выборка, ДокументОбъект, Истина);
			
		КонецЦикла;
		
	КонецЕсли;	  
	
КонецПроцедуры

// Блокирует сформированные документы для записи.
//
//	Параметры:
//  	Выборка          - Выборка
//      ДокументОбъект   - ДокументОбъект
//      ЗаписьСуществует - Булево - Истина, если запись в регистре существует
//
Процедура ЗаблокироватьДокументыДляЗаписи(Выборка, ДокументОбъект, ЗаписьСуществует) Экспорт
	
	// Движения по регистру сведений ИНАГРО_СформированныеДокументы
	Попытка
		Если ЗаписьСуществует Тогда
			НаборЗаписей = РегистрыСведений.ИНАГРО_СформированныеДокументы.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ДокументИсточник.Использование 				  = Истина;
			НаборЗаписей.Отбор.ДокументИсточник.Значение      				  = Выборка.ДокументИсточник;
			НаборЗаписей.Отбор.ИмяТиповогоДокумента.Использование 			  = Истина;
			НаборЗаписей.Отбор.ИмяТиповогоДокумента.Значение      			  = Выборка.ИмяТиповогоДокумента;
			НаборЗаписей.Отбор.ПорядковыйНомерТиповогоДокумента.Использование = Истина;
			НаборЗаписей.Отбор.ПорядковыйНомерТиповогоДокумента.Значение      = Выборка.ПорядковыйНомерТиповогоДокумента;
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Если Запись.ИмяТиповогоДокумента = Выборка.ИмяТиповогоДокумента 
					И Запись.ПорядковыйНомерТиповогоДокумента = Выборка.ПорядковыйНомерТиповогоДокумента Тогда 
					Запись.ЗапретРедактирования = Истина;
					//Запись.РазрешитьРедактирование = УстанавливатьРазрешениеНаРедактирование(Выборка.ДокументИсточник);
				КонецЕсли;
			КонецЦикла;
			НаборЗаписей.Записать(Истина);
		Иначе
			НаборЗаписей = РегистрыСведений.ИНАГРО_СформированныеДокументы.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ДокументИсточник.Использование = Истина;
			НаборЗаписей.Отбор.ДокументИсточник.Значение      = Выборка.ДокументИсточник;
			НаборЗаписей.Прочитать();
			НоваяЗапись  = НаборЗаписей.Добавить();
			// Измерения
			НоваяЗапись.Период     			 			 = Выборка.ДокументИсточник.Дата;
			НоваяЗапись.ДокументИсточник     			 = Выборка.ДокументИсточник;
			НоваяЗапись.ИмяТиповогоДокумента     		 = Выборка.ИмяТиповогоДокумента;
			НоваяЗапись.ПорядковыйНомерТиповогоДокумента = Выборка.ПорядковыйНомерТиповогоДокумента;
			НоваяЗапись.ТиповыйДокумент                  = ДокументОбъект.Ссылка;
			НоваяЗапись.ЗапретРедактирования             = Истина;
			//НоваяЗапись.РазрешитьРедактирование			 = УстанавливатьРазрешениеНаРедактирование(Выборка.ДокументИсточник);
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

// Разблокирует сформированные документы для записи.
//
//	Параметры:
//  	ДокументИсточник - ДокументОбъект
//
Процедура РазблокироватьДокументыДляЗаписи(ДокументИсточник) Экспорт
	
	// Разблокируем документы 
	Попытка
		НаборЗаписей = РегистрыСведений.ИНАГРО_СформированныеДокументы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументИсточник.Использование = Истина;
		НаборЗаписей.Отбор.ДокументИсточник.Значение      = ДокументИсточник;
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.ЗапретРедактирования = Ложь;
		КонецЦикла;
		НаборЗаписей.Записать();
	Исключение 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());	
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочийФункционал

// Устанавливает префикс источника подписки в соответствии с префиксом информационной базы и префиксом организации.
// Источник подписки должен содержать обязательный реквизит шапки "Организация", тип: "СправочникСсылка.Организации".
//
//  Параметры:
// 		Источник             - Источник события подписки.
//  	СтандартнаяОбработка - Булево - флаг стандартной обработки подписки
//  	Префикс              - Строка - префикс объекта, который нужно изменить
//
Процедура УстановитьПрефиксИнформационнойБазыИОрганизацииНомеруДокумента(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	ИНАГРО_ЭлеваторСервер.УстановитьПрефиксИнформационнойБазыИОрганизацииНомеруДокумента(Источник, СтандартнаяОбработка, Префикс);
	
КонецПроцедуры

// Увеличивает очередной номер (при записи документа) журнала элеватора.
//
//  Параметры:
//  	Отбор	     - Структура - структура отбора по измерениям регистра
//      НомерЖурнала - Число - очередной номер журнала элеватора
//
Процедура ЗаписатьОчереднойНомер(Отбор, НомерЖурнала) Экспорт
	
	ИНАГРО_ЭлеваторСервер.ЗаписатьОчереднойНомер(Отбор, НомерЖурнала);
		
КонецПроцедуры

// Формирует подчиненные типовые документы.
//
//	Параметры:
//  	ДокументОбъект - ДокументОбъект - документ для которого выполяентся операция
//      Отказ          - Булево - устанавливает в Истина, если отказ от формирования типового документа
//
Процедура СформироватьПодчиненныеДокументы(ДокументОбъект, Отказ) Экспорт
	
	ИНАГРО_ЭлеваторФормированиеДокументовСервер.СформироватьПодчиненныеДокументы(ДокументОбъект, Отказ);
		
КонецПроцедуры

// Получает список регистраторов регистра ИНАГРО_Форма34Сводная.
//
//  Параметры:
//		Ссылка		   - ссылка документа
//
//  Возвращаемое значение:
//		СписокЗначений - список регистраторов регистра Форма34Сводная
//
Функция РегистраторыФорма34(Ссылка) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.РегистраторыФорма34(Ссылка);
	
КонецФункции	

// Получает список регистраторов по определенному отбору в которых стоит галочка перевес.
//
//  Параметры:
//		Ссылка		   - ссылка документа
//
//  Возвращаемое значение:
//		СписокЗначений - список регистраторов по определенному отбору в которых стоит галочка перевес.
//
Функция РегистраторыСПеревесом(Ссылка) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.РегистраторыСПеревесом(Ссылка);	
	
КонецФункции	

// Очищает структуру по заданным ключам структуры.
//
//  Параметры:
//  	СтруктураПараметровДляОчистки - Структура
//
Процедура ОчиститьСтруктуруПараметров(СтруктураПараметровДляОчистки) Экспорт
	
	Для Каждого СтрСтруктураОчистки Из СтруктураПараметровДляОчистки Цикл		
		Если СтруктураПараметровДляОчистки.Свойство(СтрСтруктураОчистки.Ключ) = Истина Тогда			
			СтруктураПараметровДляОчистки.Удалить(СтрСтруктураОчистки.Ключ);			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// По переданной структуре полей формирует запрос по шапке документа для формирования таблицы товаров.
//
//  Параметры: 
//  ДокументОбъект        - ДокументОбъект
//  СтруктураПолей        - Структура
//  СтруктураПростыхПолей - Структура
//  СтруктураСложныхПолей - Структура
// 
//  Возвращаемое значение:
//  	РезультатЗапроса
//
Функция СформироватьТаблицуТоваровПоШапкеДокумента(ДокументОбъект,
		                                           СтруктураПолей,
												   СтруктураПростыхПолей = Неопределено,
												   СтруктураСложныхПолей = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "";
	
	ДокументМетаданные = ДокументОбъект.Метаданные();
	
	Для Каждого Реквизит Из СтруктураПолей Цикл
		
		ТекстЗапроса = ТекстЗапроса + ",
		|Док." + Реквизит.Значение + 
		" КАК " + СокрЛП(Реквизит.Ключ);
		
	КонецЦикла;
	
	ТекстСоединение="";
	
	Если ТипЗнч(СтруктураПростыхПолей) = Тип("Структура") Тогда // Добавим к запросу конструкции.
		
		НомерПараметра = 0;
		
		Для Каждого Элемент Из СтруктураПростыхПолей Цикл
			
			Если НЕ ЗначениеЗаполнено(Элемент.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			
			НомерПараметра = НомерПараметра + 1;
			
			ТекстЗапроса  = ТекстЗапроса + ",
			| &ПараметрЗапроса" + НомерПараметра + " КАК " + СокрЛП(Элемент.Ключ);
			Запрос.УстановитьПараметр("ПараметрЗапроса" + НомерПараметра, Элемент.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(СтруктураСложныхПолей) = Тип("Структура") Тогда // Добавим к запросу конструкции.
		
		Для Каждого Элемент Из СтруктураСложныхПолей Цикл
			
			ТекстЗапроса  = ТекстЗапроса + ",
			| " + Элемент.Значение + 
			" КАК " + СокрЛП(Элемент.Ключ);
			
		КонецЦикла;
		
		Если СтруктураСложныхПолей.Свойство("Проект") Тогда
			
			ТекстСоединение="
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УстановкаПроектовДляНоменклатуры.СрезПоследних(&ДатаДок, НоменклатураПроекта В (ВЫБРАТЬ Номенклатура ИЗ Документ." + ДокументМетаданные.Имя + " ГДЕ Ссылка = &ДокументСсылка)) КАК ПроектыНоменклатуры
			|ПО Док.Номенклатура=ПроектыНоменклатуры.НоменклатураПроекта";
			
			Запрос.УстановитьПараметр("ДатаДок",ДокументОбъект.Дата);
			
		КонецЕсли;
		
		Если СтруктураСложныхПолей.Свойство("КонтролироватьЛимит") Тогда
			
			ТекстСоединение="
			|ЛЕВОЕ СОЕДИНЕНИЕ (
			|	ВЫБРАТЬ
			|		ЛимитыОтпуска.Номенклатура 					КАК ЛимитыНоменклатура,
			|		ЛимитыОтпуска.ХарактеристикаНоменклатуры 	КАК ЛимитыХарактеристикаНоменклатуры,
			|		ЛимитыОтпуска.Склад 						КАК ЛимитыСклад,
			|		МАКСИМУМ(ЛимитыОтпуска.КонтролироватьЛимит) КАК КонтролироватьЛимит
			|   ИЗ
			|		РегистрСведений.ЛимитыОтпускаМатериалов.СрезПоследних(&ДатаДок, Подразделение = &Подразделение И Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Документ." + ДокументМетаданные.Имя + " ГДЕ Ссылка = &ДокументСсылка)) КАК ЛимитыОтпуска
			|	СГРУППИРОВАТЬ ПО
			|		ЛимитыОтпуска.Номенклатура,
			|		ЛимитыОтпуска.ХарактеристикаНоменклатуры,
			|		ЛимитыОтпуска.Склад
			|	) КАК ЛимитыОтпуска
			|	ПО 
			|		Док.Номенклатура 				 = ЛимитыОтпуска.ЛимитыНоменклатура
			|		И Док.ХарактеристикаНоменклатуры = ЛимитыОтпуска.ЛимитыХарактеристикаНоменклатуры
			|		И Док.Склад                      = ЛимитыОтпуска.ЛимитыСклад
			|";
			
			Запрос.УстановитьПараметр("ДатаДок",		ДокументОбъект.Дата);
			Запрос.УстановитьПараметр("Подразделение",	ДокументОбъект.Подразделение);
			
		КонецЕсли;
		
		Если    СтруктураСложныхПолей.Свойство("СчетУчетаБУ")
			ИЛИ СтруктураСложныхПолей.Свойство("СчетУчетаВРозницеБУ")
			ИЛИ СтруктураСложныхПолей.Свойство("СчетУчетаЗабалансовыйБУ")
			ИЛИ СтруктураСложныхПолей.Свойство("СчетУчетаПередачиБУ")
			ИЛИ	СтруктураСложныхПолей.Свойство("СчетУчетаПередачиЗабалансовыйБУ")
			ИЛИ СтруктураСложныхПолей.Свойство("СчетУчетаНДСПриобретений")
			ИЛИ СтруктураСложныхПолей.Свойство("СчетУчетаНДСПродаж")
			ИЛИ СтруктураСложныхПолей.Свойство("СхемаРеализации")
			ИЛИ СтруктураСложныхПолей.Свойство("ВидНалоговойДеятельности")
			ИЛИ СтруктураСложныхПолей.Свойство("СтатьяПриростаУбылиЗапасов")
			ИЛИ СтруктураСложныхПолей.Свойство("СтатьяПриростаУбылиЗапасовВРознице")
			ИЛИ СтруктураСложныхПолей.Свойство("Амортизируется")
			ИЛИ СтруктураСложныхПолей.Свойство("УчитываетсяКакЗапасНУ") Тогда
			
			Если СтруктураПолей.Номенклатура = "НоменклатураНовая" Тогда
				НоменклатураВЗапрос = "НоменклатураНовая";
			ИначеЕсли СтруктураПолей.Номенклатура = "Номенклатура" Тогда
				НоменклатураВЗапрос = "Номенклатура";
			КонецЕсли;
			
			ТекстСоединение="
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураОрганизаций КАК НоменклатураОрганизаций
			|ПО Док." + НоменклатураВЗапрос + "= НоменклатураОрганизаций.Номенклатура 
			|	И Док." + НоменклатураВЗапрос + ".ВидНоменклатуры=НоменклатураОрганизаций.Номенклатура.ВидНоменклатуры ";
			
			Запрос.УстановитьПараметр("ДатаДок",ДокументОбъект.Дата);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ 
	| 1 КАК НомерСтроки" + ТекстЗапроса + "
	| ИЗ 
	|      Документ." + ДокументМетаданные.Имя + 
	" КАК Док"+ТекстСоединение+" 
	|     ГДЕ Док.Ссылка = &ДокументСсылка";
	
	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ДокументСсылка" , ДокументОбъект.Ссылка);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает копию структуры
//
//	Параметры:
//  	Источник
//
//	Возвращаемое значение:
//
//
Функция ПолучитьКопиюСтруктуры(Источник) Экспорт
	
	Возврат ИНАГРО_ЭлеваторСервер.ПолучитьКопиюСтруктуры(Источник);

КонецФункции                                      

// Определяет наличие ключа
//
//	Параметры:
//  	КоллекцияЗначений
//		Ключ
//
//	Возвращаемое значение:
//
//
Функция ЕстьКлюч(КоллекцияЗначений, Ключ) Экспорт
		
	Возврат ИНАГРО_ЭлеваторСервер.ЕстьКлюч(КоллекцияЗначений, Ключ);
	
КонецФункции

#КонецОбласти