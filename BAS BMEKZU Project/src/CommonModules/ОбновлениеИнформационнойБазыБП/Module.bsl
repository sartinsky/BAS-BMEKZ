////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы демонстрационной конфигурации (БиблиотекаСтандартныхПодсистемДемо).
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = Метаданные.Имя;
	Описание.Версия = Метаданные.Версия;
	
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	Описание.ТребуемыеПодсистемы.Добавить("БиблиотекаТехнологииСервиса");

	Описание.ТребуемыеПодсистемы.Добавить("ЗарплатаКадрыБазовая");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Подключаются процедуры-обработчики обновления конфигурации

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "0.0.0.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьПустуюИБ";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "0.0.0.1";
	Обработчик.Процедура = "ОбновлениеСПредыдущейРедакции.ЗаполнениеРеквизитовОрганизацииПриОбновленииС12";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "0.0.0.1";
	Обработчик.Процедура = "НСИССервер.ПриОбновленииРелиза";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьДатуТекущейВерсии";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Оперативно";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "РегламентированнаяОтчетность.ВыполнитьОбновлениеИнформационнойБазы";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Оперативно";
	    		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.11";
	Обработчик.Процедура = "ОбновлениеСПредыдущейРедакции.УстановитьКонстантыПриПереходеС12";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с Б12 на Б20
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.11";
	Обработчик.Процедура = "ОбновлениеСПредыдущейРедакции.ОчиститьТиповыеОперацииОперацииБухПриПереходеС12";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с Б12 на Б20
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.11";
	Обработчик.Процедура = "ОбновлениеСПредыдущейРедакции.ПереносКИиДопСвойствПриОбновленииС12";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с Б12 на Б20
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.11";
	Обработчик.Процедура = "ОбновлениеСПредыдущейРедакции.ПереносОсновнойОрганизацииПриОбновленииС12";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с Б12 на Б20
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.11";
	Обработчик.Процедура = "ОбновлениеСПредыдущейРедакции.ЗаполнениеЗначенийФункциональныхОпцийПриОбновленииС12";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с Б12 на Б20
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПерезаписатьУчетнуюПолитику";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с Б12 на Б20
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаменитьТипыСкладовВРегистреСчетовУчетаНоменклатуры";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с Б12 на Б20
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.11";
	Обработчик.Процедура = "ОбновлениеСПредыдущейРедакции.КонвертироватьДокументыФизическихЛицС12";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с Б12 на Б20
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.11";
	Обработчик.Процедура = "ОбновлениеСПредыдущейРедакции.ЗаполнитьРегистрыНастроекНалоговыхДокументов";
	Обработчик.НачальноеЗаполнение = Истина;
	
	//++ БУ ЗИК	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.11";
	Обработчик.Процедура = "ЗарплатаКадрыОбновлениеСПредыдущейРедакции.ЗарплатаКадрыОбновлениеС12";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с Б12 на Б20
	//-- БУ ЗИК	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.11";
	Обработчик.Процедура = "ОбновлениеСПредыдущейРедакции.ПроизвестиЗаменуСсылокНаНовыйПредопределенныйЭлементГруппыПользователей";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с Б12 на Б20
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьЗначениеРеквизитаОплатаВВалютеВДоговорахКонтрагентов";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с Б12 на Б20
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьЗначениеРеквизитаВалютныйВБанковскихСчетах";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с Б12 на Б20

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ОбновитьДополнительныеОтчетыИОбработки";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с Б12 на Б20

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьСуммуУслугВТЧРасшифровкаПлатежаВДокументахПоступлениеНаРС";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьИспользоватьРучнуюКорректировкуДвижений";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ВключитьРежимРазделенияИтоговРегистровНакопленийИБухгалтерии";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.0.1.11";
	Обработчик.Процедура = "ОбновлениеСПредыдущейРедакции.ОбновитьРИБПриПереходе12На20";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с Б12 на Б20

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.0.1.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнениеРеквизитовПервичныхДокументов";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.0.1.11";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ОбновитьТипыПредопределеннойКонтактнойИнформации";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с Б12 на Б20

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "2.0.1.11";
	Обработчик.Процедура    = "РегистрыСведений.ВыполненныеЗадачиНачалаРаботы.ЗаполнитьПервоначально";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с Б12 на Б20
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "2.0.1.11";
	Обработчик.Процедура    = "Справочники.ВидыРегистровУчета.ЗаполнитьВидыРегистровУчета";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с Б12 на Б20
	Обработчик.ОбщиеДанные  = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия       = "2.0.1.11";
	Обработчик.Процедура    = "ОбновлениеИнформационнойБазыБП.УстановитьФорматСохраненияРегистровУчета";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с Б12 на Б20

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.1.11";
	Обработчик.Процедура           = "Справочники.Организации.ПерезаполнитьКонстантуИспользоватьНесколькоОрганизаций";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Если ПолучитьФункциональнуюОпцию("РаботаВЛокальномРежиме") Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия       		= "2.0.1.11";
		Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.УстановитьИспользованиеДополнительныхОтчетовИОбработок";
		Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с Б12 на Б20
		Обработчик.ОбщиеДанные         = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.1.11";
	Обработчик.Процедура           = "МониторРуководителя.ЗаполнитьДанныеМонитораРуководителя";
	Обработчик.НачальноеЗаполнение = Истина; // Надо выполнять при обновлении с Б12 на Б20

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.11";
	Обработчик.Процедура = "Обработки.ПомощникПереходаСРедакции12.ВыполнитьСохранениеНумерацииПриОбновлении";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.1.11";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБП.ИзменениеНалоговогоНазначенияОСЗаполнитьФлагПересчетаНакопленнойАмортизации";
	Обработчик.НачальноеЗаполнение = Истина; // В противном случае процедура не запустится при переходе с Б12 на Б20
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.11";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ПреобразоватьИндивидуальныеНастройкиПользователей12";
	Обработчик.НачальноеЗаполнение = Истина;
			
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.58";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьПериодВДокументахРегламентированныйОтчет";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.71";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьПредопределенные_2_0_1_71";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.0.1.75";
	Обработчик.Процедура           = "РегистрыСведений.КорреспонденцииСчетов.ЗаполнитьКорреспонденцииСчетов";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с Б12 на Б20
	Обработчик.ОбщиеДанные         = Истина;	

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 	 = "2.0.2.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьПредопределенные_2_0_2_2";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 	 = "2.0.2.2";
	Обработчик.Процедура = "ОбновлениеСПредыдущейРедакции.ЗаполнитьЗначениеРеквизитаНомерВходящегоДокументаВДокСписаниеСРасчетногоСчета";
	Обработчик.НачальноеЗаполнение = Истина; // Процедура должна запускаться при переходе с Б12 на Б20
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 	 = "2.0.4.3";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьПредопределенные_2_0_4_3";
	Обработчик.НачальноеЗаполнение = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 	 = "2.0.6.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыБП.ЗаполнитьПредопределенные_2_0_6_1";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.0.7.2";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ОбновитьКонтактнаяИнформацияEmailФизическогоЛица";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.0.7.2";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ПеренестиКонтактнуюИнформациюФизЛицаВОрганизацию";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.0.9.2";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ИзменитьВариантыОтчетаВидовРегистраУчета";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.ОбщиеДанные         = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.0.14.2";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ЗаполнитьПредопределенные_2_0_14_2";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.0.15.2";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ЗаполнитьПериодВзаиморасчетовЗП";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик.Версия = "2.0.15.2";
	Обработчик.Процедура = "ЗарплатаКадрыОбновлениеСПредыдущейРедакции.КонвертироватьРНВзаиморасчетыПоНДФЛ";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.16.2";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ЗаполнитьПредопределенные_2_0_16_2";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.16.3";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ЗаполнитьПредопределенные_2_0_16_3";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.0.16.3";
		Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ЗаполнитьВидТерриторииДляПолей";
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.16.4";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ПерезаполнитьТабельныйНомер";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.16.4";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.УстановитьПереключатели";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.0.17.3";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ЗаполнитьНалогиАктуальность";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия 		= "2.0.17.3";
		Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ЗаполнитьНормативнаяОценкаЗемлиЕдПлощади";
		Обработчик.НачальноеЗаполнение = Истина;
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.0.17.3";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ЗаполнитьIDСтрокиТЧПутевыеЛисты";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.18.2";
	Обработчик.Процедура = "ЗарплатаКадрыОбновлениеСПредыдущейРедакции.КонвертироватьРНВзаиморасчетыПоНДФЛ";
			
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "2.1.1.2";
	Обработчик.Процедура            = "ОбновлениеИнформационнойБазыБП.ПеренестиПрисоединенныеФайлы";
	Обработчик.НачальноеЗаполнение  = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "2.1.1.3";
	Обработчик.Процедура           = "Справочники.Организации.ПеренестиФайлыОрганизацииВПрисоединенныеФайлы";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.1.1.7";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ЗаполнитьПредопределенные_2_1_1_7";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия               = "2.1.1.10";
	Обработчик.Процедура            = "ОбновлениеИнформационнойБазыБП.КонтактнаяИнформацияОбновлениеИБ";
	Обработчик.НачальноеЗаполнение  = Истина;
	
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.3.1";
	Обработчик.Процедура = "НСИССервер.ПриОбновленииРелиза";
	Обработчик.НачальноеЗаполнение = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.1.5.2";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ЗаполнитьПредопределенные_2_1_5_2";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.1.5.3";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ЗаполнитьСтатьюДекларацииНДС22";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБЭМКЗУ() Тогда // ИНАГРО
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.1.5.4";
		Обработчик.Процедура = "ИНАГРО_ЭлеваторОбновлениеИнформационнойБазы.ПреобразоватьИндивидуальныеНастройкиПользователейЭлеватор12";
		Обработчик.НачальноеЗаполнение = Истина;
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.1.5.4";
		Обработчик.Процедура = "ИНАГРО_ЭлеваторОбновлениеИнформационнойБазы.ПреобразоватьЖурналыЛабораторииИВесовой12";
		Обработчик.НачальноеЗаполнение = Истина;
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.1.5.4";
		Обработчик.Процедура = "ИНАГРО_ЭлеваторОбновлениеИнформационнойБазы.ПерезаполнитьСоставКомиссий12";
		Обработчик.НачальноеЗаполнение = Истина;

		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.1.5.4";
		Обработчик.Процедура = "ИНАГРО_ЭлеваторОбновлениеИнформационнойБазы.ПерезаполнитьСубконто12";
		Обработчик.НачальноеЗаполнение = Истина;
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.1.5.4";
		Обработчик.Процедура = "ИНАГРО_ЭлеваторОбновлениеИнформационнойБазы.ПреобразоватьИНАГРО_СформированныеДокументы12";
		Обработчик.НачальноеЗаполнение = Истина;
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.1.5.4";
		Обработчик.Процедура = "ИНАГРО_ЭлеваторОбновлениеИнформационнойБазы.ЗаполнитьЕстьЛабораторныйАнализ";
		Обработчик.НачальноеЗаполнение = Истина;
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.1.5.4";
		Обработчик.Процедура = "ИНАГРО_ЭлеваторОбновлениеИнформационнойБазы.ЗаполнитьИНАГРО_НастройкиФормированияРеестровТТН";
		Обработчик.НачальноеЗаполнение = Истина;
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.1.5.4";
		Обработчик.Процедура = "ИНАГРО_ОбновлениеИнформационнойБазы.Обновление_ПереходНа21";
		Обработчик.НачальноеЗаполнение = Истина;
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.1.5.4";
		Обработчик.Процедура = "ИНАГРО_ОбновлениеИнформационнойБазы.ЗаполнитьУчетнуюПолитикупоПерсоналу";
		Обработчик.НачальноеЗаполнение = Истина;

	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.1.6.3";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ЗаполнитьПредопределенные_2_1_6_3";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.1.7.1";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ЗаполнитьПредопределенные_2_1_7_1";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.1.8.2";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ЗаполнитьПредопределенные_2_1_8_2";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда

		Обработчик = Обработчики.Добавить();
		Обработчик.Версия 		= "2.1.8.4";
		Обработчик.Процедура 	= "ИНАГРО_ОбновлениеИнформационнойБазы.Обновление_ПереходНа21";
		Обработчик.НачальноеЗаполнение = Ложь;
		
	КонецЕсли;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.1.9.2";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ЗаполнитьПредопределенные_2_1_9_1";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.1.9.2";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ВыполнитьКорректировкуРеглОтчетов";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.1.10.1";
	Обработчик.Процедура 	= "ИНАГРО_ОбновлениеИнформационнойБазы.Обновление_ПереходНа21";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.1.10.1";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ИсправитьДвиженияХозрасчетный";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.1.11.2";
	Обработчик.Процедура 	= "ИНАГРО_ОбновлениеИнформационнойБазы.Обновление_ПереходНа21";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.1.11.2";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ЗаполнитьПредопределенные_2_1_11_2";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.1.11.2";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ИсправитьДвиженияХозрасчетный";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.1.12.1";
	Обработчик.Процедура 	= "ИНАГРО_ОбновлениеИнформационнойБазы.Обновление_ПереходНа21";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.1.12.1";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ИсправитьДвиженияХозрасчетный";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.1.13.1";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ВыполнитьКорректировкуРеглОтчетов";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.1.13.1";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ИсправитьДвиженияХозрасчетный";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.1.13.2";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ЗаполнитьПредопределенные_2_1_13_2";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	///// Повторяем в каждом релизе
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.1.14.3";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ВыполнитьКорректировкуРеглОтчетов";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.1.14.3";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ИсправитьДвиженияХозрасчетный";
	Обработчик.НачальноеЗаполнение = Ложь;
	////////////////////////////////
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия 		= "2.1.14.3";
	Обработчик.Процедура 	= "ОбновлениеИнформационнойБазыБП.ЗаполнитьПредопределенныеСтатьиНалоговыхДеклараций";
	Обработчик.НачальноеЗаполнение = Ложь;

КонецПроцедуры

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	ОбновлениеСПредыдущейРедакции.УстановитьПраваПервогоАдминистратора();
	
	ОбновлениеСПредыдущейРедакции.ОчиститьВерисиюПодсистемыБСППриПереходеС12();
	
	ОбновлениеСПредыдущейРедакции.ОбработатьПотерянныеОбъекты();
	
КонецПроцедуры

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
	Если ОбновлениеСПредыдущейРедакции.ЭтоПереходСРедакции12() Тогда 
		
		РежимОбновленияДанных = "ОбновлениеВерсии";
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "БухгалтерияДляУкраины" Тогда
        Параметры.ВерсияКонфигурации = ПредыдущаяВерсияКонфигурации;
    КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


// Функция выполняет начальное заполнение информационной базы.
//
// Параметры:
//  ДокументОписаниеОбновлений - табличный документ, в который выводится описание обновлений.
//  МакетОписаниеОбновлений    - макет "ОписаниеОбновлений" с заполненными параметрами.
//
// Возвращаемое значение:
//  Функция возвращает номер первой коммерческой версии конфигурации.
//
Процедура ЗаполнитьПустуюИБ() Экспорт

	Если ЗначениеЗаполнено(Константы.УдалитьНомерВерсииКонфигурации.Получить()) Тогда 
		Возврат; // Переход с версии 1.2
	КонецЕсли;
	
	КодЯзыкаИБ = Локализация.КодЯзыкаИнформационнойБазы();
	// Заполнение справочника Валюты.
	ВалютаРегламентированногоУчета = НайтиСоздатьВалюту("980", "грн", НСтр("ru='Гривна';uk='Гривня'", КодЯзыкаИБ)			, "гривна, гривни, гривен, ж, копейка, копейки, копеек, ж, 2", "гривня, гривні, гривень, ж, копійка, копійки, копійок, ж, 2");
	ВалютаУправленческогоУчета     = НайтиСоздатьВалюту("840", "USD", НСтр("ru='Доллар США';uk='Долар США'", КодЯзыкаИБ)	, "доллар, доллара, долларов, м, цент, цента, центов, м, 2", "долар, долари, доларів, м, цент, центи, центів, м, 2" );
	ВалютаМеждународногоУчета      = НайтиСоздатьВалюту("978", "EUR", НСтр("ru='Евро';uk='Євро'",КодЯзыкаИБ)      			, "евро, евро, евро, м, цент, цента, центов, м, 2", "євро, євро, євро, м, цент, центи, центів, м, 2" );
	
	
	Константы.ВалютаРегламентированногоУчета.Установить(ВалютаРегламентированногоУчета);
	Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Установить(Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить);
	Константы.ИспользоватьРучнуюКорректировкуДвижений.Установить(Истина);
	Константы.ИспользоватьВалютныйУчет.Установить(Истина);
	Константы.ВедетсяДеятельностьПоДоговорамКомиссииНаПродажу.Установить(Истина);
	Константы.ВедетсяПроизводственнаяДеятельность.Установить(Истина);
	Константы.ИспользоватьПодсистемуПроизводство.Установить(Истина);

	Константы.ВедетсяРозничнаяТорговля.Установить(Истина);
	Константы.ВедетсяУчетВозвратнойТары.Установить(Истина);
	Константы.ОтключитьКонтрольОтрицательныхОстатков.Установить(Истина);
	Константы.УчетЗарплатыИКадровСредствамиБухгалтерии.Установить(Истина);
	
	// Обязательное начальное заполнение информационной базы.
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьВсеОбъекты(Ложь, Истина, Истина);
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("РегистрСведений", "СчетаУчетаНоменклатуры", Истина);
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("РегистрСведений", "ИНАГРО_СчетаУчетаБиологическихАктивов", Истина); // ИНАГРО
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("РегистрСведений", "ИНАГРО_СтавкиНалогаДля4гр", Истина); // ИНАГРО
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБЭМКЗУ() Тогда // ИНАГРО
		ИНАГРО_ЭлеваторОбновлениеИнформационнойБазы.ЗаполнитьСправочникВидыДокументов();
		Обработки.ИНАГРО_ОбновлениеИнформационнойБазы.ЗаполнитьНастройкиФормированияРеестров();
	КонецЕсли;

	// Заполнение реквизита "Запретить использовать в проводках" в планах счетов
	УстановитьПараметрыСчетовБУ();
	УстановитьПараметрыСчетовБУНалоговыйУчетС2015(); 
	// Установка субконто "Статьи движения денежных средств" на счете "Касса" и его субсчетах						 
	УстановитьСубконтоСтатьяДвиженияДенежныхСредств();

	УстановитьСуммовойУчетНаСкладах();

	УстановитьУчетНаСчетахТоваровВРознице();
	
	// Установка параметров классов счетов. По умолчанию счета-классы не используем как группы.
	УстановитьПараметрыКлассовСчетов();
	// Установка субконто на неавтоматизированных счетах
	ЗаполнениеСубконтоНеавтоматизированныхСчетов(Истина);
	НачальноеЗаполнениеСправочникаСобытияОС();
	// Заполнение справочника КлассификаторЕдиницИзмерения.
	ЕдиницаИзмеренияВеса = НайтиСоздатьЕдиницу("0301", "кг", НСтр("ru='Килограмм';uk='Кілограм'",КодЯзыкаИБ));
	ЕдиницаПоУмолчанию   = НайтиСоздатьЕдиницу("2009", "шт", НСтр("ru='Штука';uk='Штука'",КодЯзыкаИБ));
	
	ЗаполнитьРСсАналитикойСтатьиЗатрат();
	
	ВключитьРежимРазделенияИтоговРегистровНакопленийИБухгалтерии();
	
	КонтактнаяИнформацияОбновлениеИБ();
	
	//ЗаполнитьРеквизитыКлючевыхОпераций();
	
	УстановитьДатуТекущейВерсии();
	
КонецПроцедуры // ЗаполнитьПустуюИБ()


Процедура КонтактнаяИнформацияОбновлениеИБ()  Экспорт
	
	
	ПараметрыПроверкиАдреса = Новый Структура;
	ПараметрыПроверкиАдреса.Вставить("ТолькоНациональныйАдрес", Истина);
	ПараметрыПроверкиАдреса.Вставить("ПроверятьКорректность", Ложь);
	ПараметрыПроверкиАдреса.Вставить("СкрыватьНеактуальныеАдреса", Ложь);
	ПараметрыПроверкиАдреса.Вставить("ВключатьСтрануВПредставление", Ложь);
	
	ЯзыкЗаполнения = Локализация.КодЯзыкаИнформационнойБазы();
	
	// Пользователи
	ПараметрыГруппы = Новый Структура("Вид, Наименование", Справочники.ВидыКонтактнойИнформации.СправочникПользователи, 
		НСтр("ru='Контактная информация справочника ""Пользователи""';uk='Контактна інформація довідника ""Користувачі""'", ЯзыкЗаполнения));
	УправлениеКонтактнойИнформацией.УстановитьСвойстваГруппыВидаКонтактнойИнформации(ПараметрыГруппы);
					
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.EmailПользователя;
	ПараметрыВида.Наименование	 					= НСтр("ru='Email';uk='Email'", ЯзыкЗаполнения);
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 1;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
	ПараметрыВида.Наименование	 					= НСтр("ru='Телефон';uk='Телефон'", ЯзыкЗаполнения);
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 2;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Другое);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияПользователя;
	ПараметрыВида.Наименование	 					= НСтр("ru='Другое (любая другая контактная информация)';uk='Інше (будь-яка інша контактна інформація)'", ЯзыкЗаполнения);
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 3;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);	
	// Конец Пользователи
	
	// КонтактныеЛица
	ПараметрыГруппы = Новый Структура("Вид, Наименование", Справочники.ВидыКонтактнойИнформации.СправочникКонтактныеЛица, 
		НСтр("ru='Контактная информация справочника ""Контактные лица""';uk='Контактна інформація довідника ""Контактні особи""'", ЯзыкЗаполнения));
	УправлениеКонтактнойИнформацией.УстановитьСвойстваГруппыВидаКонтактнойИнформации(ПараметрыГруппы);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияКонтактныеЛица;
	ПараметрыВида.Наименование	 					= НСтр("ru='Адрес для информирования';uk='Адреса для інформування'", ЯзыкЗаполнения);
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 1;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйКонтактныеЛица;
	ПараметрыВида.Наименование	 					= НСтр("ru='Телефон мобильный';uk='Телефон мобільний'", ЯзыкЗаполнения);
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 2;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийКонтактныеЛица;
	ПараметрыВида.Наименование	 					= НСтр("ru='Телефон рабочий';uk='Телефон робочий'", ЯзыкЗаполнения);
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 3;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.EmailКонтактныеЛица;
	ПараметрыВида.Наименование	 					= НСтр("ru='Email';uk='Email'", ЯзыкЗаполнения);
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 4;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Другое);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтактныеЛица;
	ПараметрыВида.Наименование	 					= НСтр("ru='Другое (любая другая контактная информация)';uk='Інше (будь-яка інша контактна інформація)'", ЯзыкЗаполнения);
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 5;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);	
	// Конец КонтактныеЛица
	
	// Контрагенты
	ПараметрыГруппы = Новый Структура("Вид, Наименование", Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты, 
		НСтр("ru='Контактная информация справочника ""Контрагенты""';uk='Контактна інформація довідника ""Контрагенти""'", ЯзыкЗаполнения));
	УправлениеКонтактнойИнформацией.УстановитьСвойстваГруппыВидаКонтактнойИнформации(ПараметрыГруппы);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	ПараметрыВида.Наименование	 					= НСтр("ru='Юридический адрес';uk='Юридична адреса'", ЯзыкЗаполнения);
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Истина;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 1;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
	ПараметрыВида.Наименование	 					= НСтр("ru='Фактический адрес';uk='Фактична адреса'", ЯзыкЗаполнения);
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Истина;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 2;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
	ПараметрыВида.Наименование	 					= НСтр("ru='Почтовый адрес';uk='Поштова адреса'", ЯзыкЗаполнения);
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Истина;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 3;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
	ПараметрыВида.Наименование	 					= НСтр("ru='Телефон';uk='Телефон'", ЯзыкЗаполнения);
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 4;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Факс);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты;
	ПараметрыВида.Наименование	 					= НСтр("ru='Факс';uk='Факс'", ЯзыкЗаполнения);
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 5;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты;
	ПараметрыВида.Наименование	 					= НСтр("ru='Email';uk='Email'", ЯзыкЗаполнения);
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 6;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Другое);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты;
	ПараметрыВида.Наименование	 					= НСтр("ru='Другое (любая другая контактная информация)';uk='Інше (будь-яка інша контактна інформація)'", ЯзыкЗаполнения);
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 7;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);	
	// Конец Контрагенты
	
	// Организации
	ОрганизацииСлужебный.ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций();	
	// Конец Организации
	
	// ОсновныеСредства
	ПараметрыГруппы = Новый Структура("Вид, Наименование", Справочники.ВидыКонтактнойИнформации.СправочникОсновныеСредства, 
		НСтр("ru='Контактная информация справочника ""Основные средства""';uk='Контактна інформація довідника ""Основні засоби""'", ЯзыкЗаполнения));
	УправлениеКонтактнойИнформацией.УстановитьСвойстваГруппыВидаКонтактнойИнформации(ПараметрыГруппы);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.АдресМестонахожденияОсновныеСредства;
	ПараметрыВида.Наименование	 					= НСтр("ru='Адрес местонахождения';uk='Адреса місцезнаходження'", ЯзыкЗаполнения);
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Истина;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 1;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);	
	// Конец ОсновныеСредства
	
	// ФизическиеЛица
	ПараметрыГруппы = Новый Структура("Вид, Наименование", Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица, 
		НСтр("ru='Контактная информация справочника ""Физические лица""';uk='Контактна інформація довідника ""Фізичні особи""'", ЯзыкЗаполнения));
	УправлениеКонтактнойИнформацией.УстановитьСвойстваГруппыВидаКонтактнойИнформации(ПараметрыГруппы);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;
	ПараметрыВида.Наименование	 					= НСтр("ru='Телефон домашний';uk='Телефон домашній'", ЯзыкЗаполнения);
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 1;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Телефон);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;
	ПараметрыВида.Наименование	 					= НСтр("ru='Телефон рабочий';uk='Телефон робочий'", ЯзыкЗаполнения);
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 2;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
	ПараметрыВида.Наименование	 					= НСтр("ru='Адрес по прописке';uk='Адреса за пропискою'", ЯзыкЗаполнения);
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Истина;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 3;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	ЗаполнитьЗначенияСвойств(ПараметрыВида.НастройкиПроверки, ПараметрыПроверкиАдреса);
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
	ПараметрыВида.Наименование	 					= НСтр("ru='Адрес места проживания';uk='Адреса місця проживання'", ЯзыкЗаполнения);
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Истина;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 4;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	ЗаполнитьЗначенияСвойств(ПараметрыВида.НастройкиПроверки, ПараметрыПроверкиАдреса);
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица;
	ПараметрыВида.Наименование	 					= НСтр("ru='Адрес для информирования';uk='Адреса для інформування'", ЯзыкЗаполнения);
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Истина;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 5;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Истина;
	ЗаполнитьЗначенияСвойств(ПараметрыВида.НастройкиПроверки, ПараметрыПроверкиАдреса);
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
	ПараметрыВида.Наименование	 					= НСтр("ru='Email';uk='Email'", ЯзыкЗаполнения);
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 6;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	ПараметрыВида.ЗапретитьРедактированиеПользователем = Ложь;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	// Конец ФизическиеЛица
	
КонецПроцедуры

Процедура ОбновитьКонтактнаяИнформацияEmailФизическогоЛица() Экспорт

	ЯзыкЗаполнения = Локализация.КодЯзыкаИнформационнойБазы();
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
	ПараметрыВида.Наименование	 					= НСтр("ru='Email';uk='Email'", ЯзыкЗаполнения);
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 6;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Истина;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);	

КонецПроцедуры
 
Процедура ПеренестиКонтактнуюИнформациюФизЛицаВОрганизацию() Экспорт
	 
 	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	Организации.ИндивидуальныйПредприниматель КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТОрганизацииДляПереносаКИ
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОрганизацииДляПереносаКИ.Организация,
	|	ВТОрганизацииДляПереносаКИ.ФизическоеЛицо,
	|	ФизическиеЛицаКонтактнаяИнформация.Тип,
	|	ФизическиеЛицаКонтактнаяИнформация.Вид,
	|	ФизическиеЛицаКонтактнаяИнформация.Представление,
	|	ФизическиеЛицаКонтактнаяИнформация.ЗначенияПолей,
	|	ФизическиеЛицаКонтактнаяИнформация.Страна,
	|	ФизическиеЛицаКонтактнаяИнформация.Регион,
	|	ФизическиеЛицаКонтактнаяИнформация.Город,
	|	ФизическиеЛицаКонтактнаяИнформация.АдресЭП,
	|	ФизическиеЛицаКонтактнаяИнформация.ДоменноеИмяСервера,
	|	ФизическиеЛицаКонтактнаяИнформация.НомерТелефона,
	|	ФизическиеЛицаКонтактнаяИнформация.НомерТелефонаБезКодов
	|ИЗ
	|	ВТОрганизацииДляПереносаКИ КАК ВТОрганизацииДляПереносаКИ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|		ПО ВТОрганизацииДляПереносаКИ.ФизическоеЛицо = ФизическиеЛицаКонтактнаяИнформация.Ссылка
	|ГДЕ
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТОрганизацииДляПереносаКИ.ФизическоеЛицо
	|			ИЗ
	|				ВТОрганизацииДляПереносаКИ КАК ВТОрганизацииДляПереносаКИ)
	|	И ФизическиеЛицаКонтактнаяИнформация.Вид.Предопределенный
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;	
	КонецЕсли; 
	
	СоответствиеВидовКИ = Новый Соответствие;
	
	СоответствиеВидовКИ.Вставить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица 			, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	СоответствиеВидовКИ.Вставить(Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица       	, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
	СоответствиеВидовКИ.Вставить(Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица      , Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации);
	СоответствиеВидовКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица         	, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	СоответствиеВидовКИ.Вставить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица         		, Справочники.ВидыКонтактнойИнформации.ТелефонПоЮридическомуАдресуОрганизации);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	НачатьТранзакцию();
	Попытка
	
		Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
			
			Организация = Выборка.Организация.ПолучитьОбъект();
			Организация.КонтактнаяИнформация.Очистить();
			
			Пока Выборка.Следующий() Цикл
				
				ВидКонтактнойИнформацииОрганизации = СоответствиеВидовКИ.Получить(Выборка.Вид);
				Если ВидКонтактнойИнформацииОрганизации = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаКИОрганизации = Организация.КонтактнаяИнформация.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКИОрганизации, Выборка);
				СтрокаКИОрганизации.Вид = ВидКонтактнойИнформацииОрганизации;
				
				
			КонецЦикла;
			
			Организация.ОбменДанными.Загрузка = Истина;
			Организация.Записать();
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru='Операция не выполнена';uk='Операція не виконана'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();	
 
КонецПроцедуры

Процедура ЗаполнитьРСсАналитикойСтатьиЗатрат() Экспорт

	НайденныеСтатьи = Новый Структура;
	НайденныеСтатьи.Вставить("СтатьиЗатрат_КурсРазницы", Справочники.СтатьиЗатрат.НайтиПоНаименованию(
		НСтр("ru='Отрицательное значение курсовых разниц (операционные)';uk=""Від'ємне значення курсових різниць (операційні)""", Локализация.КодЯзыкаИнформационнойБазы()), Истина));
	НайденныеСтатьи.Вставить("СтатьиЗатрат_СбытДругие", Справочники.СтатьиЗатрат.НайтиПоНаименованию(
		НСтр("ru='Другие затраты, связанные со сбытом товаров, выполнением работ, оказанием услуг';uk=""Інші витрати, пов'язані зі збутом товарів, виконанням робіт, наданням послуг""", Локализация.КодЯзыкаИнформационнойБазы()), Истина));
	НайденныеСтатьи.Вставить("СтатьиЗатрат_Банк", Справочники.СтатьиЗатрат.НайтиПоНаименованию(
		НСтр("ru='Плата за расчетно-кассовое обслуживание и другие услуги банков';uk='Плата за розрахунково-касове обслуговування та інші послуги банків'", Локализация.КодЯзыкаИнформационнойБазы()), Истина));
	НайденныеСтатьи.Вставить("СтатьиЗатрат_Налоги", Справочники.СтатьиЗатрат.НайтиПоНаименованию(
		НСтр("ru='Суммы начисленных налогов и сборов, установленных НКУ, других обязательных платежей';uk=""Суми нарахованих податків і зборів, встановлених ПКУ, інших обов'язкових платежів""", Локализация.КодЯзыкаИнформационнойБазы()), Истина));
	НайденныеСтатьи.Вставить("СтатьиЗатрат_БезнадежнаяЗадолженность", Справочники.СтатьиЗатрат.НайтиПоНаименованию(
		НСтр("ru='Затраты на создание резерва сомнительных долгов';uk='Витрати на створення резерву сумнівних боргів'", Локализация.КодЯзыкаИнформационнойБазы()), Истина));
	НайденныеСтатьи.Вставить("СтатьиЗатрат_Другие", Справочники.СтатьиЗатрат.НайтиПоНаименованию(
		НСтр("ru='Другие расходы хозяйственной деятельности';uk='Інші витрати господарської діяльності'", Локализация.КодЯзыкаИнформационнойБазы()), Истина));
		
	ЗаполнитьРСПараметрыКурсовыхРазниц(НайденныеСтатьи);
	ЗаполнитьРССчетаУчетаПрочие(НайденныеСтатьи, Истина);

//++ БУ ЗИК	
	СпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеБольничныхЗаСчетПредприятия.ПолучитьОбъект();
	СпособОтражения.СубконтоДт1 = НайденныеСтатьи.СтатьиЗатрат_Другие;
	СпособОтражения.Записать();
//-- БУ ЗИК

КонецПроцедуры

Процедура ЗаполнитьРСПараметрыКурсовыхРазниц(НайденныеСтатьи)
	
	НаборЗаписей = РегистрыСведений.ПараметрыУчетаКурсовыхРазниц.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();

	Для каждого Запись Из НаборЗаписей Цикл
		
		СчетЗатрат = Запись.СчетЗатрат;
		Для НомСубконто = 1 По 3 Цикл
			
			Если СчетЗатрат.ВидыСубконто.Количество()<НомСубконто Тогда
				Прервать;
			КонецЕсли;
			
			ВидСубконто = СчетЗатрат.ВидыСубконто[НомСубконто-1].ВидСубконто;
			Если      ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат Тогда
				Запись["Субконто" + НомСубконто + "Затрат"] = НайденныеСтатьи.СтатьиЗатрат_КурсРазницы;
				Прервать;
			КонецЕсли;

		КонецЦикла;
		
	КонецЦикла;

	НаборЗаписей.Записать();

КонецПроцедуры

Процедура ЗаполнитьРССчетаУчетаПрочие(НайденныеСтатьи, ПервыйЗапуск = Ложь)
	
	РС = РегистрыСведений.СчетаУчетаПрочие;

	МассивОрганизаций = Новый Массив();
	МассивОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
	Если НЕ ПервыйЗапуск Тогда
		НаборЗаписей = РС.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		СписокИспользуемыхОрганизаций = НаборЗаписей.ВыгрузитьКолонку("Организация");
		Для каждого Организация Из СписокИспользуемыхОрганизаций Цикл
			
			Если МассивОрганизаций.Найти(Организация) = Неопределено Тогда
				МассивОрганизаций.Добавить(Организация); 
			КонецЕсли;
		
		КонецЦикла;
	КонецЕсли;

	Для каждого Организация Из МассивОрганизаций Цикл
		
		Только8Класс = Ложь;
		Если ЗначениеЗаполнено(Организация) Тогда
			ИспользуемыеКлассыСчетовРасходов = УчетнаяПолитика.ИспользуемыеКлассыСчетовРасходов(Организация, ОбщегоНазначенияБП.ПолучитьРабочуюДату());
			Только8Класс = (ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8);
		КонецЕсли;
		
		Запись = РС.СоздатьМенеджерЗаписи();		
		Запись.Активность 			= Истина;		
		Запись.ВидПрочегоСчетаУчета = Перечисления.ВидыПрочихСчетовУчета.СчетЗатратОтчетКомиссионераОПродажах;		
		Если Только8Класс Тогда
		    Запись.СчетУчетаБУ   		= ПланыСчетов.Хозрасчетный.ДругиеОперационныеЗатраты;
		Иначе	
			Запись.СчетУчетаБУ   		= ПланыСчетов.Хозрасчетный.РасходыНаСбыт;
		КонецЕсли;
		Запись.Субконто1     			= НайденныеСтатьи.СтатьиЗатрат_СбытДругие;
	    Запись.Записать();
		        
		Запись = РС.СоздатьМенеджерЗаписи();		
		Запись.Активность 			= Истина;		
		Запись.ВидПрочегоСчетаУчета = Перечисления.ВидыПрочихСчетовУчета.СчетЗатратКурсоваяРазницаПокупкаПродажаВалюты;		
		Если Только8Класс Тогда
		    Запись.СчетУчетаБУ   		= ПланыСчетов.Хозрасчетный.ДругиеОперационныеЗатраты;
		Иначе	
			Запись.СчетУчетаБУ   		= ПланыСчетов.Хозрасчетный.ЗатратыОтОперационнойКурсовойРазницы;
		КонецЕсли;
		Запись.Субконто1     		= НайденныеСтатьи.СтатьиЗатрат_КурсРазницы;
	    Запись.Записать();
		
		Запись = РС.СоздатьМенеджерЗаписи();		
		Запись.Активность 			= Истина;		
		Запись.ВидПрочегоСчетаУчета = Перечисления.ВидыПрочихСчетовУчета.СчетДоходовКурсоваяРазницаПокупкаПродажаВалюты;		
	    Запись.СчетУчетаБУ   		= ПланыСчетов.Хозрасчетный.ДоходОтОперационнойКурсовойРазницы;
		Запись.Субконто1     		= Справочники.СтатьиДоходов.ПустаяСсылка();
	    Запись.Записать();
		
		Запись = РС.СоздатьМенеджерЗаписи();		
		Запись.Активность 			= Истина;		
		Запись.ВидПрочегоСчетаУчета = Перечисления.ВидыПрочихСчетовУчета.СчетЗатратКомиссионныеПокупкаПродажаВалюты;		
		Если Только8Класс Тогда                    
		    Запись.СчетУчетаБУ   		= ПланыСчетов.Хозрасчетный.ДругиеОперационныеЗатраты;
			Запись.Субконто1     		= НайденныеСтатьи.СтатьиЗатрат_Банк;
		Иначе	
			Запись.СчетУчетаБУ   		= ПланыСчетов.Хозрасчетный.АдминистративныеРасходы;
			Запись.Субконто1     		= Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
			Запись.Субконто2     		= НайденныеСтатьи.СтатьиЗатрат_Банк;
		КонецЕсли;
	    Запись.Записать();
		
		Запись = РС.СоздатьМенеджерЗаписи();		
		Запись.Активность 			= Истина;		
		Запись.ВидПрочегоСчетаУчета = Перечисления.ВидыПрочихСчетовУчета.СчетЗатратПенсионныйПродажаВалюты;		
		Если Только8Класс Тогда
		    Запись.СчетУчетаБУ   		= ПланыСчетов.Хозрасчетный.ДругиеОперационныеЗатраты;
		Иначе	
			Запись.СчетУчетаБУ   		= ПланыСчетов.Хозрасчетный.ДругиеЗатратыОперационнойДеятельности;
		КонецЕсли;
		Запись.Субконто1     		= НайденныеСтатьи.СтатьиЗатрат_Налоги;
	    Запись.Записать();
		
		Запись = РС.СоздатьМенеджерЗаписи();		
		Запись.Активность 			= Истина;		
		Запись.ВидПрочегоСчетаУчета = Перечисления.ВидыПрочихСчетовУчета.СчетЗатратСебестоимостьПродажаВалюты;		
		Если Только8Класс Тогда
		    Запись.СчетУчетаБУ   		= ПланыСчетов.Хозрасчетный.ДругиеОперационныеЗатраты;
		Иначе	
			Запись.СчетУчетаБУ   		= ПланыСчетов.Хозрасчетный.СебестоимостьРеализованнойИностраннойВалюты;
		КонецЕсли;
		Запись.Субконто1     			= НайденныеСтатьи.СтатьиЗатрат_КурсРазницы;
	    Запись.Записать();

		Запись = РС.СоздатьМенеджерЗаписи();		
		Запись.Активность 			= Истина;		
		Запись.ВидПрочегоСчетаУчета = Перечисления.ВидыПрочихСчетовУчета.СчетДоходовСебестоимостьПродажаВалюты;		
	    Запись.СчетУчетаБУ   		= ПланыСчетов.Хозрасчетный.ДоходОтРеализацииИностраннойВалюты;
		Запись.Субконто1     		= Справочники.СтатьиДоходов.ПустаяСсылка();
	    Запись.Записать();
		
		Запись = РС.СоздатьМенеджерЗаписи();		
		Запись.Активность 			= Истина;		
		Запись.ВидПрочегоСчетаУчета = Перечисления.ВидыПрочихСчетовУчета.СчетДтСписаниеЗадолженностиКорректировкаДолга;		
		Если Только8Класс Тогда
		    Запись.СчетУчетаБУ   		= ПланыСчетов.Хозрасчетный.ДругиеОперационныеЗатраты;
		Иначе	
			Запись.СчетУчетаБУ   		= ПланыСчетов.Хозрасчетный.СомнительныеИБезнадежныеДолги;
		КонецЕсли;
		Запись.Субконто1     		= НайденныеСтатьи.СтатьиЗатрат_БезнадежнаяЗадолженность;
	    Запись.Записать();
		
		Запись = РС.СоздатьМенеджерЗаписи();		
		Запись.Активность 			= Истина;		
		Запись.ВидПрочегоСчетаУчета = Перечисления.ВидыПрочихСчетовУчета.СчетКтСписаниеЗадолженностиКорректировкаДолга;		
		Запись.СчетУчетаБУ   		= ПланыСчетов.Хозрасчетный.ДоходОтСписанияКредиторскойЗадолженности;
		Запись.Субконто1     		= Справочники.СтатьиДоходов.ПустаяСсылка();
	    Запись.Записать();

	КонецЦикла;

КонецПроцедуры

// Разделяет дебиторскую и кредиторскую задолженность на 2 табличные части
//	в следующих видах документов:
//		- КорректировкаДолга
Процедура РазделитьЗадолженностьВДокументах()	Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаДолгаДебиторскаяЗадолженность.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КорректировкаДолга.ДебиторскаяЗадолженность КАК КорректировкаДолгаДебиторскаяЗадолженность
	|ГДЕ
	|	КорректировкаДолгаДебиторскаяЗадолженность.УдалитьВидЗадолженности = ЗНАЧЕНИЕ(Перечисление.ВидыЗадолженности.Кредиторская)
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаДолгаДебиторскаяЗадолженность.Ссылка
	|";

	ВыборкаДокументов = Запрос.Выполнить().Выбрать();

	НачатьТранзакцию();
	Попытка

		Пока ВыборкаДокументов.Следующий() Цикл

			ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			СтрокиКредиторки = ДокументОбъект.ДебиторскаяЗадолженность.НайтиСтроки(Новый Структура("УдалитьВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская));
			Для Каждого СтрокаКредиторки Из СтрокиКредиторки Цикл

				НоваяСтрока = ДокументОбъект.КредиторскаяЗадолженность.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКредиторки);
				ДокументОбъект.ДебиторскаяЗадолженность.Удалить(СтрокаКредиторки);

			КонецЦикла;
			ДокументОбъект.Записать();

		КонецЦикла;

	Исключение

		ОтменитьТранзакцию();
		ВызватьИсключение;

	КонецПопытки;

	ЗафиксироватьТранзакцию();


КонецПроцедуры

// Процедура заполняет значение реквизита Валютный справочника ДоговорыКонтрагентов
// и справочника БанковскиеСчета
Процедура ЗаполнитьЗначениеРеквизитаВалютный() Экспорт

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();


	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО ДоговорыКонтрагентов.ВалютаВзаиморасчетов <> Константы.ВалютаРегламентированногоУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО БанковскиеСчета.ВалютаДенежныхСредств <> Константы.ВалютаРегламентированногоУчета";

	Выборка = Запрос.Выполнить().Выбрать();

	НачатьТранзакцию();
	Попытка
		Пока Выборка.Следующий() Цикл
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.Валютный = Истина;
			СправочникОбъект.Записать();
		КонецЦикла;
	Исключение

		ОтменитьТранзакцию();

		ТекстСообщения = НСтр("ru='Операция не выполнена';uk='Операція не виконана'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		ВызватьИсключение;

	КонецПопытки;

	ЗафиксироватьТранзакцию();

КонецПроцедуры


// Процедура копирует значение из реквизита объекта СуммаУслуг
// в реквизит ТЧ РасшифровкаПлатежа СуммаУслуг документа ПоступлениеНаРС
//
Процедура УстановитьСуммуУслугВТЧРасшифровкаПлатежаВДокументахПоступлениеНаРС() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Ссылка,
	|	ПоступлениеНаРасчетныйСчет.СуммаУслуг КАК СуммаУслуг
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчет.СуммаУслуг > 0
	|	И ПоступлениеНаРасчетныйСчет.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам)";
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Попытка
		
		Пока ВыборкаДокументов.Следующий() Цикл
			
			Если ВыборкаДокументов.Ссылка.РасшифровкаПлатежа.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			ДокументОбъект.РасшифровкаПлатежа[0].СуммаУслуг = ВыборкаДокументов.СуммаУслуг;
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru='Операция не выполнена';uk='Операція не виконана'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Процедура устанавливает Статью ДДС в банковски и кассовых документах 
// из ТЧ РасшифровкаПлатежа в шапку документа, для "прочих" операций
// в которых ТЧ РасшифровкаПлатежа не используется
//
Процедура УстановитьВДокументахСтатьюДДСИзРасшифровкаПлатежа() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств) КАК СтатьяДвиженияДенежныхСредств
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление)
	|	И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
	|	И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|	И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.СтатьяДвиженияДенежныхСредств = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка,
	|	МАКСИМУМ(СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств)
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК СписаниеСРасчетногоСчетаРасшифровкаПлатежа
	|ГДЕ
	|	(СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание)
	|			ИЛИ СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу)
	|			ИЛИ СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет)
	|			ИЛИ СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП)
	|			ИЛИ СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога))
	|	И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
	|	И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|	И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.СтатьяДвиженияДенежныхСредств = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка,
	|	МАКСИМУМ(ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств)
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	(ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ПрочийПриход)
	|			ИЛИ ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица)
	|			ИЛИ ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ПолучениеНаличныхВБанке))
	|	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
	|	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|	И ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.СтатьяДвиженияДенежныхСредств = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка,
	|	МАКСИМУМ(РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств)
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	(РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ПрочийРасход)
	|			ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу)
	|			ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям)
	|			ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику)
	|			ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк)
	|			ИЛИ РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаДепонентов))
	|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств ЕСТЬ НЕ NULL 
	|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|	И РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка.СтатьяДвиженияДенежныхСредств = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Попытка
		
		Пока ВыборкаДокументов.Следующий() Цикл
			
			ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			ДокументОбъект.СтатьяДвиженияДенежныхСредств = ВыборкаДокументов.СтатьяДвиженияДенежныхСредств;
			ДокументОбъект.РасшифровкаПлатежа.Очистить();
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru='Операция не выполнена';uk='Операція не виконана'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

//Включает режим разделения итогов для регистров бухгалтерии и регистров накопления
//
Процедура ВключитьРежимРазделенияИтоговРегистровНакопленийИБухгалтерии() Экспорт
	
	Для Каждого Регистр Из РегистрыНакопления Цикл
			Регистр.УстановитьРежимРазделенияИтогов(Истина);
	КонецЦикла;
	
	Для Каждого Регистр Из РегистрыБухгалтерии Цикл
			Регистр.УстановитьРежимРазделенияИтогов(Истина);
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОБНОВЛЕНИЯ ИНФОРМАЦИОННОЙ БАЗЫ

// Устанавливает флаг "Запретить использовать в проводках"
// хозрасчетным счетам
//
Процедура УстановитьПараметрыСчетовБУ()
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();

	ВыборкаСчетов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически();
	Пока ВыборкаСчетов.Следующий() Цикл
        Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаСчетов.Ссылка, "Родитель");
		Если НЕ ЗначениеЗаполнено(Родитель) Тогда
			Продолжить;
		КонецЕсли;

		Объект = Родитель.ПолучитьОбъект();
		Если Объект.ЗапретитьИспользоватьВПроводках Тогда
			Продолжить;
		КонецЕсли;

		Объект.ЗапретитьИспользоватьВПроводках = Истина;
		Объект.Записать();

	КонецЦикла;

	ЗафиксироватьТранзакцию();

КонецПроцедуры

// Устанавливает флаги УчетПоНалоговымНазначениямНДС и УчетСуммНУ 
// хозрасчетным счетам для налогового учета с 2015
//
Процедура УстановитьПараметрыСчетовБУНалоговыйУчетС2015() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	СчетаУчетСуммНУ = Новый Массив;
	СчетаУчетСуммНУ.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	СчетаУчетСуммНУ.Добавить(ПланыСчетов.Хозрасчетный.ДругиеНеоборотныеМатериальныеАктивыГруппа);
	СчетаУчетСуммНУ.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
	СчетаУчетСуммНУ.Добавить(ПланыСчетов.Хозрасчетный.ИзносАмортизацияНеоборотныхАктивов);
	СчетаУчетСуммНУ.Добавить(ПланыСчетов.Хозрасчетный.НеоборотныеАктивыИГруппыВыбытияУдерживаемыеДляПродажи);
	СчетаУчетСуммНУ.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
	СчетаУчетСуммНУ.Добавить(ПланыСчетов.Хозрасчетный.МалоценныеАктивыВЭксплуатации);
	СчетаУчетСуммНУ.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивыРастениеводстваПоПервоначальнойСтоимостиАмортизируются); // ИНАГРО
	СчетаУчетСуммНУ.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивыЖивотноводстваПоПервоначальнойСтоимостиАмортизируются);  // ИНАГРО
	СчетаУчетСуммНУ.Добавить(ПланыСчетов.Хозрасчетный.НезрелыеДолгосрочныеБиологическиеАктивыПоПервоначальнойСтоимостиАмортизируются);        // ИНАГРО
	
	СчетаУчетПоНалоговымНазначениямНДС = Новый Массив;
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ДругиеНеоборотныеМатериальныеАктивыГруппа);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ИзносАмортизацияНеоборотныхАктивов);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.КапитальныеИнвестиции);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ПроизводственныеЗапасы);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.МалоценныеИБыстроизнашивающиесяПредметы);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.Производство);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.Полуфабрикаты);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ПродукцияСельскохозяйственногоПроизводства);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.Товары);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ЗатратыБудущихПериодов);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.МалоценныеАктивыВЭксплуатации);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ЗатратыПоЭлементам);
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивы); // ИНАГРО
	СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ТекущиеБиологическиеАктивы);      // ИНАГРО
	
	Если НЕ БухгалтерскийУчетПереопределяемый.ПолучитьИспользоватьКлассыСчетовВКачествеГрупп() Тогда
		СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.МатериальныеЗатраты);
		СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ЗатратыНаОплатуТруда);
		СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ОтчисленияНаСоциальныеМероприятия);
		СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.Амортизация);
		СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ДругиеОперационныеЗатраты);
		СчетаУчетПоНалоговымНазначениямНДС.Добавить(ПланыСчетов.Хозрасчетный.ДругиеЗатратыПоЭлементам);
	КонецЕсли; 

	ВыборкаСчетов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически();
	Пока ВыборкаСчетов.Следующий() Цикл
		
		Объект = ВыборкаСчетов.Ссылка.ПолучитьОбъект();
		
		СтароеЗначениеУчетСуммНУ = Объект.УчетСуммНУ;
		СтароеЗначениеУчетПоНалоговымНазначениямНДС = Объект.УчетПоНалоговымНазначениямНДС;
		
		Объект.УчетСуммНУ = Ложь;
		Объект.УчетПоНалоговымНазначениямНДС = Ложь;
		Если Объект.НалоговыйУчет Тогда
			Если БухгалтерскийУчетПереопределяемый.СчетВИерархииВМассиве(ВыборкаСчетов.Ссылка, СчетаУчетСуммНУ) Тогда
				Объект.УчетСуммНУ = Истина;
			КонецЕсли;
			Если БухгалтерскийУчетПереопределяемый.СчетВИерархииВМассиве(ВыборкаСчетов.Ссылка, СчетаУчетПоНалоговымНазначениямНДС) Тогда
				Объект.УчетПоНалоговымНазначениямНДС = Истина;
			КонецЕсли;
		КонецЕсли; 
		
		Если (НЕ Объект.УчетСуммНУ = СтароеЗначениеУчетСуммНУ) 
			ИЛИ (НЕ Объект.УчетПоНалоговымНазначениямНДС = СтароеЗначениеУчетПоНалоговымНазначениямНДС) Тогда 
			
			Объект.Записать();
			
		КонецЕсли;
	КонецЦикла;

	ЗафиксироватьТранзакцию();

КонецПроцедуры


Процедура УстановитьСуммовойУчетНаСкладах()

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;

	Счета = Новый СписокЗначений();
	Счета.Добавить("МатериалыПереданныеВПереработку");
	Счета.Добавить("ТоварыНаКомиссии");

	Для каждого Счет Из Счета Цикл
		УстановитьСубконтоНоменклатура(Счет.Значение, "Хозрасчетный", Истина, Истина);
	КонецЦикла;

	Счета = Новый СписокЗначений();
	Счета.Добавить("ПриобретениеОсновныхСредств");
	Счета.Добавить("ПриобретениеДругихНеоборотныхМатериальныхАктивов");
	Счета.Добавить("ПроизводственныеЗапасы");
	Счета.Добавить("Полуфабрикаты");
	Счета.Добавить("ГотоваяПродукция");
	Счета.Добавить("Товары");
	Счета.Добавить("ТоварыПринятыеНаКомиссиюВсего");
	Счета.Добавить("МалоценныеИБыстроизнашивающиесяПредметыНаСкладе");

	НачатьТранзакцию();

	Для каждого Счет Из Счета Цикл
		УстановитьСубконтоНоменклатура(Счет.Значение, "Хозрасчетный", Истина, Ложь);
	КонецЦикла;
	
	УстановитьСубконтоНоменклатура("УценкиЗапасов", "Хозрасчетный", Ложь, Ложь);



	ЗафиксироватьТранзакцию();

КонецПроцедуры // УправлениеСуммовымУчетомНаСкладах()

Процедура УстановитьУчетНаСчетахТоваровВРознице()
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	// Настройки суммового и количественного учета по субконто на счете должны быть такие же как и в процедуре 
	// ОбщегоНазначенияБПВызовСервера.ПолучитьСоответствиеСубконтоПараметрамУчета().
	Счета = Новый Соответствие;
	Счета.Вставить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ, Истина);
	Счета.Вставить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ, Истина);
	Счета.Вставить(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ, Истина);
	Счета.Вставить(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ, Ложь);
	
	Для каждого КлючЗначение Из Счета Цикл
		
		Счет = КлючЗначение.Ключ;
		
		Если Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады) = Неопределено Тогда
			Попытка
				СчетОбъект = Счет.ПолучитьОбъект();
				
				НоваяСтрокаСубконто = СчетОбъект.ВидыСубконто.Добавить();
				НоваяСтрокаСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
				НоваяСтрокаСубконто.Суммовой 		= Истина;
				НоваяСтрокаСубконто.Количественный 	= Счета[Счет];
				СчетОбъект.Записать();
				
			Исключение
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Установка субконто Склад на счете %1 не выполнена.';uk='Установка субконто Склад на рахунку %1 не виконана.'"), Счет);
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка
					,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры // УстановитьУчетНаСчетахТоваровВРознице

// Установка субконто "Документы расчетов с контрагентами" на счетах расчетов (36, 63, 377, 685)
//
Процедура УстановитьУчетПоДокументамНаСчетахРасчетов()

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	ОбрабатываемыеСчета = Новый Массив;

	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоВыданнымАвансам);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСДругимиДебиторами);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСДругимиКредиторами);
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНеоборотнымАктивамИГруппамВыбытияУдерживаемымиДляПродажи);

	// Исключения - счета (включая подчиненные им), на которых есть аналитика "Контрагенты" и "Договоры",
	// но на которых не нужно устанавливать субконто "Документы расчетов с контрагентом"
	СчетаИсключения = Новый Массив;

	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИсполнительнымДокументам); //6853  
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРабочимиИСлужащимиПоДругимОперациям); //3773
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями); //36Р
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоГарантийномуОбеспечению); //364
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыАрендыЗемлиИИмущества); //6856  ИНАГРО 

	Запрос = Новый запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ(&ОбрабатываемыеСчета)
	|	И (НЕ ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ (&СчетаИсключения))
	|	И ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)";

	Запрос.УстановитьПараметр("ОбрабатываемыеСчета", ОбрабатываемыеСчета);
	Запрос.УстановитьПараметр("СчетаИсключения",     СчетаИсключения);

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		СчетОбъект    = Выборка.Счет.ПолучитьОбъект();
		Субконто      = СчетОбъект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ВидСубконто");
		НетДокументов = (Субконто = Неопределено);
		ВсегоСубконто = СчетОбъект.ВидыСубконто.Количество();
		Если НетДокументов И ВсегоСубконто < 3 Тогда

			НовыйВид = СчетОбъект.ВидыСубконто.Добавить();

			НовыйВид.ВидСубконто    = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами;
			НовыйВид.Суммовой       = Истина;
			НовыйВид.Валютный       = Истина;
			НовыйВид.Количественный = Истина;

			СчетОбъект.Записать();
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника,
//  ПараметрыПрописиНаРусском - значение соответствующего реквизита справочника.
//  ПараметрыПрописиНаУкраинском - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаРусском, ПараметрыПрописиНаУкраинском) Экспорт
	
	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);
	
	Если Ссылка.Пустая() Тогда
		
		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();
		
		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописиНаРусском = ПараметрыПрописиНаРусском;
		СправочникОбъект.ПараметрыПрописиНаУкраинском = ПараметрыПрописиНаУкраинском;
		
		СправочникОбъект.Записать();
		
		Ссылка = СправочникОбъект.Ссылка;
		
		// установим курс и кратность = 1 на 1 января 1980
		РаботаСКурсамиВалют.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);
		
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции // НайтиСоздатьВалюту()

// Функция создает элемент справочника КлассификаторЕдиницИзмерения, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьЕдиницу(Код, Наименование, НаименованиеПолное) Экспорт

	Ссылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда
		СправочникОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();

		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;
	КонецЕсли;

	Возврат Ссылка;

КонецФункции

// Устанавливает субконто "Номенклатура" и "Контрагент" у указанного счета.
//
Процедура УстановитьСубконтоНоменклатура(ИмяСчета, ИмяПланаСчетов, ЕстьКоличество, ЕстьКонтрагент)

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	ВидСубконто = "ВидыСубконтоХозрасчетные";

	Попытка

		Счет  = ПланыСчетов[ИмяПланаСчетов][ИмяСчета];
		Счета = Новый СписокЗначений();
		Счета.Добавить(Счет);

		ВыборкаСчетов = ПланыСчетов[ИмяПланаСчетов].ВыбратьИерархически(Счет);
		Пока ВыборкаСчетов.Следующий() Цикл
			// счета исключения
			Если (НЕ (ВыборкаСчетов.Ссылка = ПланыСчетов.Хозрасчетный.ТоварыВТорговле)) И
				(НЕ (ВыборкаСчетов.Ссылка = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ)) И
				(НЕ (ВыборкаСчетов.Ссылка= ПланыСчетов.Хозрасчетный.ТорговаяНаценка)) И 
				(НЕ (ВыборкаСчетов.Ссылка = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ)) И
				(НЕ (ВыборкаСчетов.Ссылка = ПланыСчетов.Хозрасчетный.НеоборотныеАктивыИГруппыВыбытияУдерживаемыеДляПродажи)) И				
				(НЕ (ВыборкаСчетов.Ссылка = ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыМатериалы)) И
                (НЕ (ВыборкаСчетов.Ссылка = ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходы)) И
                (НЕ (ВыборкаСчетов.Ссылка = ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыТовары)) И
			    (НЕ (ВыборкаСчетов.Ссылка = ПланыСчетов.Хозрасчетный.ТранспортноЗаготовительныеРасходыТоварыСуммовойУчет))
				Тогда
				Счета.Добавить(ВыборкаСчетов.Ссылка);
			КонецЕсли;
		КонецЦикла;

		Для каждого Счет Из Счета Цикл

			Объект = Счет.Значение.ПолучитьОбъект();

			Если ЕстьКонтрагент Тогда

				Если Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Контрагенты, "ВидСубконто") = Неопределено Тогда

					НовыйВид = Объект.ВидыСубконто.Вставить(0);

					НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Контрагенты;
					НовыйВид.Суммовой    = Истина;

					Если ЕстьКоличество Тогда
						НовыйВид.Количественный = Истина;
					КонецЕсли;

					Объект.Записать();
				КонецЕсли;

			КонецЕсли;

			Если Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Номенклатура, "ВидСубконто") = Неопределено Тогда

				НовыйВид = Объект.ВидыСубконто.Добавить();

				НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Номенклатура;
				НовыйВид.Суммовой    = Истина;

				Если ЕстьКоличество Тогда
					НовыйВид.Количественный = Истина;
				КонецЕсли;

				Объект.Записать();
			КонецЕсли;

		КонецЦикла;

	Исключение
		ТекстСообщения = НСтр("ru='Операция не выполнена';uk='Операція не виконана'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
    КонецПопытки;

КонецПроцедуры // УстановитьСубконтоНоменклатура()

// Устанавливает субконто статья движения денежных средств
//
Процедура УстановитьСубконтоСтатьяДвиженияДенежныхСредств()
	
	Попытка

		Счет  = ПланыСчетов.Хозрасчетный.Касса;
		Счета = Новый СписокЗначений();
		Счета.Добавить(Счет);

		ВыборкаСчетов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически(Счет);
		Пока ВыборкаСчетов.Следующий() Цикл

			Счета.Добавить(ВыборкаСчетов.Ссылка);

		КонецЦикла;

		Для каждого Счет Из Счета Цикл

			Объект   = Счет.Значение.ПолучитьОбъект();
			КодСчета = Объект.Код;

			Если Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств, "ВидСубконто") = Неопределено Тогда
				
				НовыйВид = Объект.ВидыСубконто.Добавить();

				НовыйВид.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств;
				НовыйВид.Суммовой    = Истина;
	      		НовыйВид.ТолькоОбороты = Истина;
				НовыйВид.Количественный = Истина;
				НовыйВид.Валютный = Истина;
			

				Объект.Записать();

			КонецЕсли;
			
		КонецЦикла;

	Исключение

		ТекстСообщения = НСтр("ru='Операция не выполнена';uk='Операція не виконана'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

	КонецПопытки
	
КонецПроцедуры

// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - объект, который требуется записать.
//
Процедура ЗаписатьСправочникОбъект(СправочникОбъект, Сообщать = Ложь) Экспорт

	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;

	Если СправочникОбъект.ЭтоНовый() Тогда
		Если СправочникОбъект.ЭтоГруппа Тогда
			СтрСообщения = НСтр("ru='Создана группа справочника ""%1"", код: ""%2"", наименование: ""%3""';uk='Створена група довідника ""%1"", код: ""%2"", назва: ""%3""'") ;
		Иначе
			СтрСообщения = НСтр("ru='Создан элемент справочника ""%1"", код: ""%2"", наименование: ""%3""';uk='Створений елемент довідника ""%1"", код: ""%2"", назва: ""%3""'") ;
		КонецЕсли; 
	Иначе
		Если СправочникОбъект.ЭтоГруппа Тогда
			СтрСообщения = НСтр("ru='Обработана группа справочника ""%1"", код: ""%2"", наименование: ""%3""';uk='Оброблена група довідника ""%1"", код: ""%2"", найменування: ""%3""'") ;
		Иначе
			СтрСообщения = НСтр("ru='Обработан элемент справочника ""%1"", код: ""%2"", наименование: ""%3""';uk='Оброблений елемент довідника ""%1"", код: ""%2"", найменування: ""%3""'") ;
		КонецЕсли; 
	КонецЕсли;

	Если СправочникОбъект.Метаданные().ДлинаКода > 0 Тогда
		ПолныйКод = СправочникОбъект.ПолныйКод();
	Иначе
		ПолныйКод = НСтр("ru='<без кода>';uk='<без коду>'");
	КонецЕсли; 
	СтрСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрСообщения, СправочникОбъект.Метаданные().Синоним, ПолныйКод, СправочникОбъект.Наименование);

	Попытка
		СправочникОбъект.Записать();
		Если Сообщать = Истина Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрСообщения, СправочникОбъект);
		КонецЕсли;

	Исключение

		ТекстСообщения = НСтр("ru='Не удалось завершить действие: %1';uk='Не вдалося завершити дію: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрСообщения);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

	КонецПопытки;

КонецПроцедуры

// Процедура перезаписывает учетную политику
//
Процедура ПерезаписатьУчетнуюПолитику() Экспорт
	
	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	НаборЗаписей.Записать();

КонецПроцедуры

Процедура УстановитьКорректировкуДляДокументовПоЗП() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВводНачальныхОстатков.Ссылка
	|ИЗ
	|	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
	|ГДЕ
	|	ВводНачальныхОстатков.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам)
	|	И ВводНачальныхОстатков.Проведен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаДепонентов))
	|	И РасходныйКассовыйОрдер.Проведен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписаниеСРасчетногоСчета.Ссылка
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП)
	|	И СписаниеСРасчетногоСчета.Проведен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтражениеЗарплатыВУчете.Ссылка
	|ИЗ
	|	Документ.ОтражениеЗарплатыВУчете КАК ОтражениеЗарплатыВУчете
	|ГДЕ
	|	ОтражениеЗарплатыВУчете.Проведен = ИСТИНА";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Попытка
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.РучнаяКорректировка = Истина;
				ДокументОбъект.ОбменДанными.Загрузка = Истина;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЦикла;
		Исключение
			ТекстСообщения = НСтр("ru='Операция не выполнена';uk='Операція не виконана'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

// Установка видимости флажка "Ручная корректировка" в формах документов
//
Процедура УстановитьИспользоватьРучнуюКорректировкуДвижений() Экспорт

	Константы.ИспользоватьРучнуюКорректировкуДвижений.Установить(Истина);

КонецПроцедуры // УстановитьИспользоватьРучнуюКорректировкуДвижений()

// Установка значения константы "Ведется сводный учет расчетов с персоналом"
//
Процедура ОпределитьПараметруУчетаРасчетовСРаботниками() Экспорт
		
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	БУ = ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
	ВестиСводныйУчетРасчетовСРаботниками = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто") = Неопределено;
	Константы.ВедетсяУчетРасчетовПоЗарплатеСводно.Установить(ВестиСводныйУчетРасчетовСРаботниками);
	Константы.ВедетсяУчетРасчетовПоЗарплатеПоРаботникам.Установить(НЕ ВестиСводныйУчетРасчетовСРаботниками);
	
КонецПроцедуры

// Очистим справочник Банки от неиспользуемых элементов
// 
Процедура ОчиститьБанкиОтНеиспользуемыхЭлементов() Экспорт
	
	// удалим элементы, на которые нет ссылок
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Банк КАК Банк
	|ПОМЕСТИТЬ ВТ_АктуальныеБанки
	|ИЗ
	|	(ВЫБРАТЬ
	|		БанковскиеСчета.Банк КАК Банк
	|	ИЗ
	|		Справочник.БанковскиеСчета КАК БанковскиеСчета
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		БанковскиеСчета.БанкДляРасчетов
	|	ИЗ
	|		Справочник.БанковскиеСчета КАК БанковскиеСчета
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ВЫРАЗИТЬ(УдалитьСоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника КАК Справочник.Банки)
	|	ИЗ
	|		РегистрСведений.УдалитьСоответствияОбъектовИнформационныхБаз КАК УдалитьСоответствияОбъектовИнформационныхБаз
	|	ГДЕ
	|		УдалитьСоответствияОбъектовИнформационныхБаз.ТипИсточника = ""СправочникСсылка.Банки""
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		УдалитьЛицевыеСчетаРаботниковОрганизации.Банк
	|	ИЗ
	|		РегистрСведений.УдалитьЛицевыеСчетаРаботниковОрганизации КАК УдалитьЛицевыеСчетаРаботниковОрганизации) КАК ВложенныйЗапрос
	|ГДЕ
	|	ЕСТЬNULL(ВложенныйЗапрос.Банк, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО
	|	И ВложенныйЗапрос.Банк <> ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Банк
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Банки.Ссылка КАК Банк
	|ИЗ
	|	Справочник.Банки КАК Банки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АктуальныеБанки КАК ВТ_АктуальныеБанки
	|		ПО Банки.Ссылка = ВТ_АктуальныеБанки.Банк
	|ГДЕ
	|	НЕ Банки.Ссылка.ЭтоГруппа
	|	И ВТ_АктуальныеБанки.Банк ЕСТЬ NULL ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивБанков = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Банк");
	Для инд = 0 По МассивБанков.ВГраница() Цикл
		БанкОбъект = МассивБанков[инд].ПолучитьОбъект();
		БанкОбъект.ОбменДанными.Загрузка = Истина;
		БанкОБъект.Удалить();
	КонецЦикла;
	
	// удалим пусты группы
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Банки.Родитель КАК Родитель
	|ПОМЕСТИТЬ ВТ_АктуальныеРегионы
	|ИЗ
	|	Справочник.Банки КАК Банки
	|ГДЕ
	|	НЕ Банки.ЭтоГруппа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Банки.Ссылка КАК Банк
	|ИЗ
	|	Справочник.Банки КАК Банки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АктуальныеРегионы КАК ВТ_АктуальныеРегионы
	|		ПО Банки.Ссылка = ВТ_АктуальныеРегионы.Родитель
	|ГДЕ
	|	Банки.ЭтоГруппа
	|	И ВТ_АктуальныеРегионы.Родитель ЕСТЬ NULL ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивГруппБанков = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Банк");
	Для инд = 0 По МассивГруппБанков.ВГраница() Цикл
		РегионОбъект = МассивГруппБанков[инд].ПолучитьОбъект();
		РегионОбъект.ОбменДанными.Загрузка = Истина;
		РегионОбъект.Удалить();
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьОчиститьНаборЗаписей(ТипРегистра, ИмяРегистра, Источник, Примемник, СуммаОперации = 0, Дополнять = Ложь)
	
	Если ТипРегистра = "РегистрСведений" Тогда
		НаборЗаписейРегистра	= РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	ИначеЕсли ТипРегистра = "РегистрНакопления" Тогда
		НаборЗаписейРегистра	= РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
	ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
		НаборЗаписейРегистра	= РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
	КонецЕсли;
	
	ОтборПоРегистратору = НаборЗаписейРегистра.Отбор.Регистратор;
	ОтборПоРегистратору.Установить(Источник);
	НаборЗаписейРегистра.Прочитать();
	
	ТаблицаЗаписей = НаборЗаписейРегистра.Выгрузить();	
	
	Если ТипРегистра = "РегистрСведений" Тогда
		НовыйНаборЗаписей	= РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	ИначеЕсли ТипРегистра = "РегистрНакопления" Тогда
		НовыйНаборЗаписей	= РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
	ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
		НовыйНаборЗаписей	= РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
		СуммаОперации = ТаблицаЗаписей.Итог("Сумма");
	КонецЕсли;
	
	ОтборПоРегистратору = НовыйНаборЗаписей.Отбор.Регистратор;
	ОтборПоРегистратору.Установить(Примемник);
	НовыйНаборЗаписей.Прочитать();	
		
	Если НовыйНаборЗаписей.Количество() <> 0 Тогда
		Если Дополнять Тогда
			ТаблицаНовыхЗаписей = НовыйНаборЗаписей.Выгрузить();	
			Для Каждого Строка ИЗ ТаблицаЗаписей Цикл
				НоваяЗапись = ТаблицаНовыхЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
			КонецЦикла;
			ТаблицаЗаписей =  ТаблицаНовыхЗаписей;	
		КонецЕсли;		
	КонецЕсли;
	
	НовыйНаборЗаписей.Загрузить(ТаблицаЗаписей);
	НовыйНаборЗаписей.Записать();	
	
	НаборЗаписейРегистра.Очистить();
	НаборЗаписейРегистра.Записать();
	
КонецПроцедуры

// Заполнение регистра "Данные первичных документов
//
Процедура ЗаполнениеРеквизитовПервичныхДокументов() Экспорт
	
	// Документы, у которых есть реквизиты вх.номер и вх.дата
	ВходящиеДокументы = Новый Массив;
	ВходящиеДокументы.Добавить("ВозвратТоваровПоставщику");
	ВходящиеДокументы.Добавить("ДокументРасчетовСКонтрагентом");
	ВходящиеДокументы.Добавить("ОтчетКомиссионераОПродажах");
	ВходящиеДокументы.Добавить("ПоступлениеДопРасходов");
	ВходящиеДокументы.Добавить("ПлатежныйОрдерПоступлениеДенежныхСредств");
	ВходящиеДокументы.Добавить("ПоступлениеНаРасчетныйСчет");
	ВходящиеДокументы.Добавить("ПоступлениеНМА");
	ВходящиеДокументы.Добавить("ПоступлениеТоваровУслуг");
	ВходящиеДокументы.Добавить("РегистрацияВходящегоНалоговогоДокумента");
	ВходящиеДокументы.Добавить("СписаниеСРасчетногоСчета");	
	ВходящиеДокументы.Добавить("СчетНаОплатуПоставщика");
	
	// Документы, у которых нет реквизитов вх.номер и вх.дата
	РасчетныеДокументы = Новый Массив;
	РасчетныеДокументы.Добавить("АвансовыйОтчет");
	РасчетныеДокументы.Добавить("АктОбОказанииПроизводственныхУслуг");
	РасчетныеДокументы.Добавить("АктСверкиВзаиморасчетов");
	РасчетныеДокументы.Добавить("ВводВЭксплуатациюОС");
	РасчетныеДокументы.Добавить("ВводНачальныхОстатков");
	РасчетныеДокументы.Добавить("ВозвратТоваровОтПокупателя");
	РасчетныеДокументы.Добавить("ГТДИмпорт");
	РасчетныеДокументы.Добавить("ЗакрытиеМесяца");
	РасчетныеДокументы.Добавить("ИнвентаризацияНЗП");
	РасчетныеДокументы.Добавить("ИнвентаризацияНМА");
	РасчетныеДокументы.Добавить("ИнвентаризацияОС");
	РасчетныеДокументы.Добавить("ИнвентаризацияТоваровНаСкладе");
	РасчетныеДокументы.Добавить("ИндексацияОС");
	РасчетныеДокументы.Добавить("КомандировкиОрганизаций");
	РасчетныеДокументы.Добавить("КомплектацияНоменклатуры");
	РасчетныеДокументы.Добавить("КорректировкаДолга");
	РасчетныеДокументы.Добавить("МодернизацияНМА");
	РасчетныеДокументы.Добавить("МодернизацияОС");
	РасчетныеДокументы.Добавить("НалоговаяНакладная");
	РасчетныеДокументы.Добавить("ОперацияБух");
	РасчетныеДокументы.Добавить("ОпределениеФинансовыхРезультатов");
	РасчетныеДокументы.Добавить("ОприходованиеТоваров");
	РасчетныеДокументы.Добавить("ОтчетКомитентуОПродажах");
	РасчетныеДокументы.Добавить("ОтчетОРозничныхПродажах");
	РасчетныеДокументы.Добавить("ОтчетПроизводстваЗаСмену");
	РасчетныеДокументы.Добавить("Партия");
	РасчетныеДокументы.Добавить("ПартияМалоценныхАктивовВЭксплуатации");
	РасчетныеДокументы.Добавить("ПередачаМалоценныхАктивовВЭксплуатацию");
	РасчетныеДокументы.Добавить("ПередачаНМА");
	РасчетныеДокументы.Добавить("ПередачаОборудованияВМонтаж");
	РасчетныеДокументы.Добавить("ПередачаОС");
	РасчетныеДокументы.Добавить("ПередачаТоваров");
	РасчетныеДокументы.Добавить("ПеремещениеТоваров");
	РасчетныеДокументы.Добавить("ПереоценкаОС");
	РасчетныеДокументы.Добавить("ПереоценкаТоваровВРознице");
	РасчетныеДокументы.Добавить("ПлатежныйОрдерСписаниеДенежныхСредств");
	РасчетныеДокументы.Добавить("ПодготовкаКПередачеОС");
	РасчетныеДокументы.Добавить("ПокупкаПродажаВалюты");
	РасчетныеДокументы.Добавить("ПоступлениеИзПереработки");
	РасчетныеДокументы.Добавить("ПриемНаРаботу");
	РасчетныеДокументы.Добавить("Приложение1КНалоговойНакладной");
	РасчетныеДокументы.Добавить("Приложение2КНалоговойНакладной");
	РасчетныеДокументы.Добавить("ПринятиеКУчетуНМА");
	РасчетныеДокументы.Добавить("ПриходныйКассовыйОрдер");
	РасчетныеДокументы.Добавить("РасходныйКассовыйОрдер");
	РасчетныеДокументы.Добавить("РасчетыПоНалогуНаПрибыль");
	РасчетныеДокументы.Добавить("РеализацияТоваровУслуг");
	РасчетныеДокументы.Добавить("РеализацияУслугПоПереработке");
	РасчетныеДокументы.Добавить("РегистрацияАвансовВНалоговомУчете");
	РасчетныеДокументы.Добавить("СписаниеМалоценныхАктивовИзЭксплуатации");
	РасчетныеДокументы.Добавить("СписаниеНМА");
	РасчетныеДокументы.Добавить("СписаниеОС");
	РасчетныеДокументы.Добавить("СписаниеТоваров");
	РасчетныеДокументы.Добавить("СчетНаОплатуПокупателю");
	РасчетныеДокументы.Добавить("ТребованиеНакладная");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	МассивОрганизаций = РезультатЗапроса.ВыгрузитьКолонку("Организация");
	
	// Обработка входящих документов
	Для Каждого ВходящийДокумент ИЗ ВходящиеДокументы Цикл
		РеквизитыДокументов = ПолучитьРеквизитыДокументов(МассивОрганизаций, ВходящийДокумент, Истина);
		ЗаписатьРеквизитыДокументов(РеквизитыДокументов);
	КонецЦикла;
	
	// Обработка исходящих или расчетных документов
	Для Каждого РасчетныйДокумент ИЗ РасчетныеДокументы Цикл
		РеквизитыДокументов = ПолучитьРеквизитыДокументов(МассивОрганизаций, РасчетныйДокумент);
		ЗаписатьРеквизитыДокументов(РеквизитыДокументов);
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьРеквизитыДокументов(МассивОрганизаций, ТипДокумента, ВходящиеДокументы = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	
	Если ВходящиеДокументы Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументРасчетовСКонтрагентом.Организация КАК Организация,
		|	ДокументРасчетовСКонтрагентом.Ссылка КАК Документ,
		|	ДокументРасчетовСКонтрагентом.ДатаВходящегоДокумента КАК Дата,
		|	ДокументРасчетовСКонтрагентом.НомерВходящегоДокумента КАК Номер,
		|	ЛОЖЬ КАК ПреобразоватьНомер,
		|	ДокументРасчетовСКонтрагентом.Дата КАК ДатаРегистратора,
		|	ДокументРасчетовСКонтрагентом.Номер КАК НомерРегистратора
		|ИЗ
		|	Документ.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом
		|ГДЕ
		|	ДокументРасчетовСКонтрагентом.Организация В(&МассивОрганизаций)";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументРасчетовСКонтрагентом.Организация КАК Организация,
		|	ДокументРасчетовСКонтрагентом.Ссылка КАК Документ,
		|	ДокументРасчетовСКонтрагентом.Дата КАК Дата,
		|	ДокументРасчетовСКонтрагентом.Номер КАК Номер,
		|	ИСТИНА КАК ПреобразоватьНомер,
		|	ДокументРасчетовСКонтрагентом.Дата КАК ДатаРегистратора,
		|	ДокументРасчетовСКонтрагентом.Номер КАК НомерРегистратора
		|ИЗ
		|	Документ.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом
		|ГДЕ
		|	ДокументРасчетовСКонтрагентом.Организация В(&МассивОрганизаций)";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДокументРасчетовСКонтрагентом", ТипДокумента); 
		
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ЗаписатьРеквизитыДокументов(ВыборкаДокументов)
		
	Пока ВыборкаДокументов.Следующий() Цикл
		МенеджерЗаписиРегистра = РегистрыСведений.ДанныеПервичныхДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписиРегистра.Прочитать();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписиРегистра, ВыборкаДокументов);		
		
		Если ВыборкаДокументов.ПреобразоватьНомер Тогда
			МенеджерЗаписиРегистра.Номер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаДокументов.Номер, Истина, Истина);
		КонецЕсли;
		
		Попытка
			МенеджерЗаписиРегистра.Записать();
		Исключение
			ТекстСообщения	= НСтр("ru='Не удалось зарегистрировать данные документа';uk='Не вдалося зареєструвати дані документа'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
        		
	КонецЦикла;
	
КонецПроцедуры


Процедура ОбновитьТипыПредопределеннойКонтактнойИнформации() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда // В подчиненных узлах РИБ не выполняется
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыКонтактнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Предопределенный = ИСТИНА
	|	И ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ПустаяСсылка)";
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		КонтактнаяИнформацияОбновлениеИБ();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьФорматСохраненияРегистровУчета() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.ФорматСохраненияРегистровУчета.Получить()) Тогда
		Константы.ФорматСохраненияРегистровУчета.Установить(Перечисления.ФорматыСохраненияОтчетов.PDF);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменениеНалоговогоНазначенияОСЗаполнитьФлагПересчетаНакопленнойАмортизации() Экспорт

	// ИзменениеНалоговогоНазначенияОС
	Выборка = Документы.ИзменениеНалоговогоНазначенияОС.Выбрать();
	
	НачатьТранзакцию();
	
	Попытка
	
		Пока Выборка.Следующий() Цикл
			
			ЗаписыватьОбъект = Ложь;
			Объект = Выборка.ПолучитьОбъект();
			
			Если Объект.ПересчитыватьНакопленнуюАмортизациюВСвязиСКорректировкойНК = Ложь Тогда
				ЗаписыватьОбъект = Истина;
				Объект.ПересчитыватьНакопленнуюАмортизациюВСвязиСКорректировкойНК = Истина;
			КонецЕсли;
			
			Если ЗаписыватьОбъект Тогда
				Объект.ОбменДанными.Загрузка = Истина;
				Объект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
		КонецЦикла;
	
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru='Операция не выполнена';uk='Операція не виконана'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ПреобразоватьИндивидуальныеНастройкиПользователей12() Экспорт

	СписокПереносимыхНастроек = Новый СписокЗначений;
	СписокПереносимыхНастроек.Добавить("ОсновнаяОрганизация","ОсновнаяОрганизация");
	СписокПереносимыхНастроек.Добавить("ОсновноеПодразделениеОрганизации","ОсновноеПодразделениеОрганизации");
	СписокПереносимыхНастроек.Добавить("ОсновноеОбособленноеПодразделениеОрганизации","ОсновноеОбособленноеПодразделениеОрганизации");
	СписокПереносимыхНастроек.Добавить("ОсновнойСклад","ОсновнойСклад");
	СписокПереносимыхНастроек.Добавить("ОсновноеМестоСоставленияРасходныхДокументов","ОсновноеМестоСоставленияДокумента");
	СписокПереносимыхНастроек.Добавить("ОсновнойПредставительОрганизации","ОсновнойПредставительОрганизации");
	СписокПереносимыхНастроек.Добавить("КтоВыписалНалоговуюНакладную","КтоВыписалНалоговуюНакладную");
	СписокПереносимыхНастроек.Добавить("НоменклатураДляЗаполненияНалоговыхНакладных","НоменклатураДляЗаполненияНалоговыхНакладных");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдалитьНастройкиПользователей.Значение,
		|	УдалитьНастройкиПользователей.Настройка.ИмяПредопределенныхДанных КАК ИмяНастройки12,
		|	УдалитьНастройкиПользователей.Пользователь.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
		|ИЗ
		|	РегистрСведений.УдалитьНастройкиПользователей КАК УдалитьНастройкиПользователей
		|ГДЕ
		|	УдалитьНастройкиПользователей.Настройка.ИмяПредопределенныхДанных В(&СписокПереносимыхНастроек)";
	
	Запрос.УстановитьПараметр("СписокПереносимыхНастроек", СписокПереносимыхНастроек);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		//Определить имя настройки в 8.2
		ИмяНастройки20 = СписокПереносимыхНастроек.НайтиПоЗначению(Выборка.ИмяНастройки12).Представление;
		
		//Определим имя пользователя и сохраним настройки
		ПрочитанныеСвойства = Неопределено;
		Если Пользователи.ПрочитатьПользователяИБ(Выборка.ИдентификаторПользователяИБ, ПрочитанныеСвойства) Тогда
			ХранилищеОбщихНастроек.Сохранить(ВРег(ИмяНастройки20),,Выборка.Значение,, ПрочитанныеСвойства.Имя);
		КонецЕсли;   
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПериодВДокументахРегламентированныйОтчет()  Экспорт
	
	Выборка = Документы.РегламентированныйОтчет.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Отчет = Выборка.ПолучитьОбъект();
		
		Отчет.Заблокировать();
		
		Отчет.ПредставлениеПериода = ПредставлениеПериода(Отчет.ДатаНачала, КонецДня(Отчет.ДатаОкончания), "ФП = Истина");
		Отчет.Записать(РежимЗаписиДокумента.Запись);
		
		Отчет.Разблокировать();
	
	КонецЦикла;
	
КонецПроцедуры	

Процедура ЗаполнитьПредопределенные_2_0_1_71()  Экспорт
	
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("Справочник", 	   "СтатьиНалоговыхДеклараций");
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("Справочник", 	   "НаборыСтатейНалоговыхДеклараций");
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("РегистрСведений", "НаборыСтатейНалоговыхДеклараций");
	//Единый налог, объем дохода по группам
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("РегистрСведений",  "ПараметрыНалоговогоУчета");
	
	КодЯзыкаЗаполнения = Локализация.КодЯзыкаИнформационнойБазы();
	//добавленные счета
	ОбъектСчет = ПланыСчетов.Хозрасчетный.РазницыПоНалогуНаПрибыльРучныеКорректировки.ПолучитьОбъект();
	ОбъектСчет.Наименование = НСтр("ru='Разницы по налогу на прибыль (ручные корректировки)';uk='Різниці по податку на прибуток (ручні коригування)'", КодЯзыкаЗаполнения);
	ОбъектСчет.Записать();
	
КонецПроцедуры	


Процедура ЗаполнитьПредопределенные_2_0_2_2()  Экспорт
	
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("Справочник", 	   "СтатьиНалоговыхДеклараций");
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("РегистрСведений", "НаборыСтатейНалоговыхДеклараций", Истина);
	
КонецПроцедуры	

Процедура ЗаполнитьПредопределенные_2_0_4_3()  Экспорт
	
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("Справочник", 	   "СтатьиНалоговыхДеклараций");
	
КонецПроцедуры	

Процедура ЗаполнитьПредопределенные_2_0_6_1()  Экспорт
	
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("Справочник", 	   "СтатьиНалоговыхДеклараций");
	
КонецПроцедуры	

Процедура ЗаполнитьПредопределенные_2_0_14_2()  Экспорт
	
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("Справочник", 	   "СтатьиНалоговыхДеклараций");
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("РегистрСведений", "НаборыСтатейНалоговыхДеклараций", Истина);
	
КонецПроцедуры	

Процедура ЗаполнитьПредопределенные_2_1_1_7()  Экспорт
	
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("Справочник", 	   "СтатьиНалоговыхДеклараций");
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("РегистрСведений", "НаборыСтатейНалоговыхДеклараций", Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенные_2_1_5_2()  Экспорт
	
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("Справочник", 	   "СтатьиНалоговыхДеклараций");
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("РегистрСведений", "НаборыСтатейНалоговыхДеклараций", Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенные_2_1_6_3()  Экспорт
	
	//Единый налог, объем дохода по группам
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("РегистрСведений",  "ПараметрыНалоговогоУчета");
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенные_2_1_7_1()  Экспорт
	
	КодЯзыкаЗаполнения = Локализация.КодЯзыкаИнформационнойБазы();
	ОбъектСчет = ПланыСчетов.Хозрасчетный.Животные.ПолучитьОбъект();
	ОбъектСчет.Наименование = НСтр("ru='Животные';uk='Тварини'", КодЯзыкаЗаполнения);
	ОбъектСчет.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенные_2_1_8_2()  Экспорт
	
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("Справочник",  "СтатьиЗатрат");
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("Справочник",  "СпособыОтраженияРасходовПоАмортизации");
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенные_2_1_9_1()  Экспорт
	
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("Справочник", 	   "СтатьиНалоговыхДеклараций");
	
КонецПроцедуры


Процедура ЗаполнитьСтатьюДекларацииНДС22() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НалоговаяНакладнаяТовары.Ссылка КАК Ссылка,
	|	НалоговаяНакладнаяТовары.НомерСтроки КАК НомерСтроки,
	|	""Товары"" КАК ИмяТЧ
	|ИЗ
	|	Документ.НалоговаяНакладная.Товары КАК НалоговаяНакладнаяТовары
	|ГДЕ
	|	НалоговаяНакладнаяТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|	И НалоговаяНакладнаяТовары.Ссылка.Дата >= ДАТАВРЕМЯ(2020, 1, 1)
	|	И НалоговаяНакладнаяТовары.Ссылка.ТипПричиныНевыдачиПокупателю = 7
	|	И НалоговаяНакладнаяТовары.СтатьяДекларацииНДСНалоговыеОбязательства = ЗНАЧЕНИЕ(Справочник.СтатьиНалоговыхДеклараций.НДС_НООсвобожден)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговаяНакладнаяУслуги.Ссылка,
	|	НалоговаяНакладнаяУслуги.НомерСтроки,
	|	""Услуги""
	|ИЗ
	|	Документ.НалоговаяНакладная.Услуги КАК НалоговаяНакладнаяУслуги
	|ГДЕ
	|	НалоговаяНакладнаяУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|	И НалоговаяНакладнаяУслуги.Ссылка.Дата >= ДАТАВРЕМЯ(2020, 1, 1)
	|	И НалоговаяНакладнаяУслуги.Ссылка.ТипПричиныНевыдачиПокупателю = 7
	|	И НалоговаяНакладнаяУслуги.СтатьяДекларацииНДСНалоговыеОбязательства = ЗНАЧЕНИЕ(Справочник.СтатьиНалоговыхДеклараций.НДС_НООсвобожден)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговаяНакладнаяОС.Ссылка,
	|	НалоговаяНакладнаяОС.НомерСтроки,
	|	""ОС""
	|ИЗ
	|	Документ.НалоговаяНакладная.ОС КАК НалоговаяНакладнаяОС
	|ГДЕ
	|	НалоговаяНакладнаяОС.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|	И НалоговаяНакладнаяОС.Ссылка.Дата >= ДАТАВРЕМЯ(2020, 1, 1)
	|	И НалоговаяНакладнаяОС.Ссылка.ТипПричиныНевыдачиПокупателю = 7
	|	И НалоговаяНакладнаяОС.СтатьяДекларацииНДСНалоговыеОбязательства = ЗНАЧЕНИЕ(Справочник.СтатьиНалоговыхДеклараций.НДС_НООсвобожден)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НалоговаяНакладнаяНМА.Ссылка,
	|	НалоговаяНакладнаяНМА.НомерСтроки,
	|	""НМА""
	|ИЗ
	|	Документ.НалоговаяНакладная.НМА КАК НалоговаяНакладнаяНМА
	|ГДЕ
	|	НалоговаяНакладнаяНМА.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|	И НалоговаяНакладнаяНМА.Ссылка.Дата >= ДАТАВРЕМЯ(2020, 1, 1)
	|	И НалоговаяНакладнаяНМА.Ссылка.ТипПричиныНевыдачиПокупателю = 7
	|	И НалоговаяНакладнаяНМА.СтатьяДекларацииНДСНалоговыеОбязательства = ЗНАЧЕНИЕ(Справочник.СтатьиНалоговыхДеклараций.НДС_НООсвобожден)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|ИТОГИ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	НачатьТранзакцию();
		
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Попытка
		
		Пока ВыборкаСсылка.Следующий() Цикл
			
			ДокументОбъект = ВыборкаСсылка.Ссылка.ПолучитьОбъект();
			Если ДокументОбъект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Выборка = ВыборкаСсылка.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ДокументОбъект[Выборка.ИмяТЧ][Выборка.НомерСтроки - 1].СтатьяДекларацииНДСНалоговыеОбязательства = Справочники.СтатьиНалоговыхДеклараций.НДС_НОНеОблагЭкспорт;
				
			КонецЦикла;
			
			ДокументОбъект.Записать(?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru='Операция не выполнена';uk='Операція не виконана'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;

	ЗафиксироватьТранзакцию();

КонецПроцедуры

Процедура ИсправитьПрефиксы() Экспорт
	
	Выборка = Справочники.ПодразделенияОрганизаций.Выбрать(); 
	Пока Выборка.Следующий() Цикл 
		СтрокаЗамены = Сред(Выборка.Код,3,6);
		Если СтрЧислоВхождений(СтрокаЗамены, "-") = 2 Тогда
			ОбъектИсправления = Выборка.ПолучитьОбъект();
			ОбъектИсправления.Код = СтрЗаменить(Выборка.Код, СтрокаЗамены, "-00000");
			ОбъектИсправления.Записать();
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// БИБЛИОТЕКА СТАНДАРТНЫХ ПОДСИСТЕМ

Процедура ОбновитьДополнительныеОтчетыИОбработки() Экспорт
	
	СоответствиеИменКомандРазделам = Новый Соответствие;
	
	// Дополнительные отчеты
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыБанкИКасса", 
		Метаданные.Подсистемы.БанкИКасса
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыПродажи", 
		Метаданные.Подсистемы.Продажи
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыПокупки", 
		Метаданные.Подсистемы.Покупки
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыСклад", 
		Метаданные.Подсистемы.Склад
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыПроизводство", 
		Метаданные.Подсистемы.Производство
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыОСИНМА", 
		Метаданные.Подсистемы.ОСИНМА
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыЗарплатаИКадры", 
		Метаданные.Подсистемы.ЗарплатаИКадры
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыОперации", 
		Метаданные.Подсистемы.Операции
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыОтчеты", 
		Метаданные.Подсистемы.Отчеты
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыСправочники", 
		Метаданные.Подсистемы.Справочники
	);

	СоответствиеИменКомандРазделам.Вставить(
		"ДополнительныеОтчетыАдминистрирование", 
		Метаданные.Подсистемы.Администрирование
	);

	// Дополнительные обработки
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДопонительныеОбработкиБанкИКасса", 
		Метаданные.Подсистемы.БанкИКасса
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДопонительныеОбработкиПродажи", 
		Метаданные.Подсистемы.Продажи
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДопонительныеОбработкиПокупки", 
		Метаданные.Подсистемы.Покупки
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДопонительныеОбработкиСклад", 
		Метаданные.Подсистемы.Склад
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДопонительныеОбработкиПроизводство", 
		Метаданные.Подсистемы.Производство
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДопонительныеОбработкиОСИНМА", 
		Метаданные.Подсистемы.ОСИНМА
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДопонительныеОбработкиЗарплатаИКадры", 
		Метаданные.Подсистемы.ЗарплатаИКадры
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДопонительныеОбработкиОперации", 
		Метаданные.Подсистемы.Операции
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДопонительныеОбработкиОтчеты", 
		Метаданные.Подсистемы.Отчеты
	);
	
	СоответствиеИменКомандРазделам.Вставить(
		"ДопонительныеОбработкиСправочники", 
		Метаданные.Подсистемы.Справочники
	);
	
	ДополнительныеОтчетыИОбработки.ЗаменитьИменаРазделовНаИдентификаторы(СоответствиеИменКомандРазделам);
	
КонецПроцедуры

Процедура ЗарегистрироватьИзменинияИдентификаторовОбъектовМетаданных() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел()=Неопределено Тогда
		ПланыОбменаРИБ = Новый Массив();
		ПланыОбменаРИБ.Добавить(Метаданные.ПланыОбмена.Полный);
		ПланыОбменаРИБ.Добавить(Метаданные.ПланыОбмена.ПоОрганизации);
		Для Каждого ПланОбмена Из ПланыОбменаРИБ Цикл
			Запрос = Новый Запрос();
			Запрос.Параметры.Вставить("ЭтотУзел", ПланыОбмена[ПланОбмена.Имя].ЭтотУзел());
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПланОбменаРИБ.Ссылка
			|ИЗ
			|	ПланОбмена.[ИмяПланаОбмена] КАК ПланОбменаРИБ
			|ГДЕ
			|	ПланОбменаРИБ.Ссылка <> &ЭтотУзел";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "[ИмяПланаОбмена]", ПланОбмена.Имя);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(Выборка.Ссылка, Метаданные.Справочники.ИдентификаторыОбъектовМетаданных);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьТипыСкладовВРегистреСчетовУчетаНоменклатуры() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры";

	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	КоличествоСтрок = ТаблицаРезультата.Количество();
	Для Инд = 1 по КоличествоСтрок Цикл
		Строка = ТаблицаРезультата[Инд-1];
		Если ЗначениеЗаполнено(Строка.Склад) Тогда
			Строка.ТипСклада = Строка.Склад.ТипСклада;
		ИначеЕсли Не ЗначениеЗаполнено(Строка.УдалитьТипСклада) Тогда
			Продолжить;
		ИначеЕсли Строка.УдалитьТипСклада = Перечисления.УдалитьТипыСкладов.Оптовый Тогда
			Строка.ТипСклада = Перечисления.ТипыСкладов.ОптовыйСклад;
		ИначеЕсли Строка.УдалитьТипСклада = Перечисления.УдалитьТипыСкладов.Розничный Тогда
			Строка.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин;
			НоваяСтрока = ТаблицаРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ТипСклада 	= Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
			Строка.ТипСклада 		= Перечисления.ТипыСкладов.РозничныйМагазин;
		КонецЕсли;
		Строка.УдалитьТипСклада = Перечисления.ТипыСкладов.ПустаяСсылка();
	КонецЦикла;

	НаборЗаписей = РегистрыСведений.СчетаУчетаНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(ТаблицаРезультата);
	//НаборЗаписей.Записать(Истина);

КонецПроцедуры


Процедура УстановитьДатуТекущейВерсии() Экспорт
	
	// в режиме сервиса не требуется напоминать об обновлении
	Если ОбщегоНазначения.РазделениеВключено() Тогда	
		 Возврат;
	КонецЕсли;
	
 	Константы.ДатаТекущейВерсии.Установить(Дата(2019,09,01));
	
		
КонецПроцедуры

Процедура ОбновитьЗарплатуКВыплатеОрганизаций() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплаты.Ссылка
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплаты КАК ВедомостьНаВыплатуЗарплаты";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
			ДокументОбъект.СуммаДокумента = ДокументОбъект.Зарплата.Итог("Сумма") + ДокументОбъект.Зарплата.Итог("КомпенсацияЗаЗадержкуЗарплаты");
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();							
		Исключение
			ТекстСообщения	= НСтр("ru='Не удалось обновить данные документа';uk='Не вдалося оновити дані документа'");
			ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));			
			ОтменитьТранзакцию();
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗначениеКодаПредопределенныхЭлементов(СписокПредопределенныхЭлементов)
	
	МассивЭлементов = Новый Массив;
	
	Пока СписокПредопределенныхЭлементов.Количество()>0 Цикл
		
		МассивЭлементов.Очистить();
		КолвоЭлементовВСписке = СписокПредопределенныхЭлементов.Количество();
		ТекушийТипЗначения = ТипЗнч(СписокПредопределенныхЭлементов [КолвоЭлементовВСписке-1].Значение);
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТекушийТипЗначения);
		ЕСли МетаданныеТипа.ДлинаКода = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для ОбратныйИндекс = 1 По КолвоЭлементовВСписке Цикл
			ЭлементСписка = СписокПредопределенныхЭлементов [КолвоЭлементовВСписке - ОбратныйИндекс];
			
			Если ТипЗнч(ЭлементСписка.Значение) = ТекушийТипЗначения Тогда
				МассивЭлементов.Добавить(ЭлементСписка.Значение);
				СписокПредопределенныхЭлементов.Удалить(ЭлементСписка);
			КонецЕсли;			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Предопределенные.Ссылка
		|ИЗ
		|	" + МетаданныеТипа.ПолноеИмя() + " КАК Предопределенные
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + МетаданныеТипа.ПолноеИмя() + " КАК Пользовательские
		|		ПО Предопределенные.Код = Пользовательские.Код
		|
		|ГДЕ
		|	Предопределенные.Ссылка В(&СписокЭлементов)
		|    И Пользовательские.Ссылка НЕ В(&СписокЭлементов)";
		
		Запрос.УстановитьПараметр("СписокЭлементов", МассивЭлементов);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.УстановитьНовыйКод();
			Объект.Записать();
		КонецЦикла;	
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьПустойТипКонтактнойИнформации() Экспорт
	
	ОбъектыКИ = Новый Массив();
	ОбъектыКИ.Добавить("Справочник.КонтактныеЛица");
	ОбъектыКИ.Добавить("Справочник.Контрагенты");
	ОбъектыКИ.Добавить("Справочник.Организации");
	ОбъектыКИ.Добавить("Справочник.ОсновныеСредства");
	ОбъектыКИ.Добавить("Справочник.ПодразделенияОрганизаций");
	ОбъектыКИ.Добавить("Справочник.Пользователи");
	ОбъектыКИ.Добавить("Справочник.ФизическиеЛица");
	
	Для Каждого ОбъектКИ Из ОбъектыКИ Цикл
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таб.Ссылка,
		|	Таб.Вид КАК ВидДляПоиска,
		|	Таб.Вид.Тип КАК ТипДляУстановки
		|ИЗ
		|	" + ОбъектКИ + ".КонтактнаяИнформация КАК Таб
		|ГДЕ
		|	Таб.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ПустаяСсылка)
		|	И Таб.Вид <> ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)
		|	И Таб.Вид.Тип <> ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.ПустаяСсылка)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
				Если НЕ ЗначениеЗаполнено(Выборка.Ссылка.Владелец) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
						
			ОбъектСсылки = Выборка.Ссылка.ПолучитьОбъект();
			СтрокиДляУстановки = ОбъектСсылки.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип, Вид",Перечисления.ТипыКонтактнойИнформации.ПустаяСсылка(), Выборка.ВидДляПоиска));
			Для Каждого СтрокаДляУстановки Из СтрокиДляУстановки Цикл
				СтрокаДляУстановки.Тип = Выборка.ТипДляУстановки;
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ОбъектСсылки);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначениеРеквизитаОплатаВВалютеВДоговорахКонтрагентов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ЭтоГруппа = ЛОЖЬ";
	
	ВыборкаДоговоров = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Попытка
		
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		Пока ВыборкаДоговоров.Следующий() Цикл
			
			ДоговорОбъект = ВыборкаДоговоров.Ссылка.ПолучитьОбъект();
			ДоговорОбъект.ОплатаВВалюте = ВалютаРегламентированногоУчета <> ВыборкаДоговоров.ВалютаВзаиморасчетов;
			ДоговорОбъект.ОбменДанными.Загрузка = Истина;
			ДоговорОбъект.Записать();
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru='Операция не выполнена';uk='Операція не виконана'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
		
КонецПроцедуры

Процедура ЗаполнитьЗначениеРеквизитаВалютныйВБанковскихСчетах() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	БанковскиеСчета.ВалютаДенежныхСредств
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета";
	
	ВыборкаБанковскихСчетов = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Попытка
		
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		Пока ВыборкаБанковскихСчетов.Следующий() Цикл
			
			БанковскиеСчетаОбъект = ВыборкаБанковскихСчетов.Ссылка.ПолучитьОбъект();
			БанковскиеСчетаОбъект.Валютный = ВалютаРегламентированногоУчета <> ВыборкаБанковскихСчетов.ВалютаДенежныхСредств;
			БанковскиеСчетаОбъект.ОбменДанными.Загрузка = Истина;
			БанковскиеСчетаОбъект.Записать();
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru='Операция не выполнена';uk='Операція не виконана'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
		
КонецПроцедуры

// Устанавливает начальные параметры счетов-классов
//
Процедура УстановитьПараметрыКлассовСчетов()
	
	//по умолчанию классы счетов не используются в качестве групп
	БухгалтерскийУчетПереопределяемый.УстановитьПараметрыКлассовСчетов(Ложь);
	
КонецПроцедуры

// Устанавливает субконто на неавтоматизированных счетах
//
Процедура УстановитьСубконтоНеавтоматизированныхСчетов(СчетДляСубконто, ВидСубконто, ТолькоОбороты = Ложь)
	
	Попытка

		Счета = Новый СписокЗначений();
		Счета.Добавить(СчетДляСубконто);

		ВыборкаСчетов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически(СчетДляСубконто);
		Пока ВыборкаСчетов.Следующий() Цикл

			Счета.Добавить(ВыборкаСчетов.Ссылка);

		КонецЦикла;

		Для каждого Счет Из Счета Цикл

			Объект   = Счет.Значение.ПолучитьОбъект();
			КодСчета = Объект.Код;

			Если Объект.ВидыСубконто.Найти(ВидСубконто, "ВидСубконто") = Неопределено Тогда
				
				НовыйВид = Объект.ВидыСубконто.Добавить();

				НовыйВид.ВидСубконто = ВидСубконто;
				НовыйВид.ТолькоОбороты = ТолькоОбороты;
				НовыйВид.Суммовой    = Истина;
				НовыйВид.Количественный = Истина;
				НовыйВид.Валютный = Истина;

				Объект.Записать();
			КонецЕсли;
			
		КонецЦикла;

	Исключение

		ТекстСообщения = НСтр("ru='Счет ""';uk='Рахунок ""'") + Строка(КодСчета) + """:";
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

	КонецПопытки
	
КонецПроцедуры


Функция ПроверитьВозможностьДобавленияСубконто(СчетДляСубконто)

	Счета = Новый СписокЗначений();
	Счета.Добавить(СчетДляСубконто);

	ВыборкаСчетов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически(СчетДляСубконто);
	Пока ВыборкаСчетов.Следующий() Цикл

		Счета.Добавить(ВыборкаСчетов.Ссылка);

	КонецЦикла;
	
	УжеЕстьСубконто = Ложь;

	Для каждого Счет Из Счета Цикл
		Объект   = Счет.Значение.ПолучитьОбъект();
		Если Объект.ВидыСубконто.Количество()>0 Тогда
			УжеЕстьСубконто = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НЕ УжеЕстьСубконто;

КонецФункции // ПроверитьВозможностьДобавленияСубконто(()

Процедура ЗаполнениеСубконтоНеавтоматизированныхСчетов(ЭтоНачальноеЗаполнение)
	
	//14
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ДолгосрочныеФинансовыеИнвестиции) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ДолгосрочныеФинансовыеИнвестиции, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ФинансовыеИнвестиции);
	КонецЕсли; 
	//155
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ПриобретениеВыращиваниеДолгосрочныхБиологическихАктивов) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ПриобретениеВыращиваниеДолгосрочныхБиологическихАктивов, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БиологическиеАктивы);
	КонецЕсли;
	
	// ИНАГРО ++
	//16
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивы) Тогда
		УстановитьСубконтоСчетовБА(ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивы, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БиологическиеАктивы);
		УстановитьСубконтоСчетовБА(ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивы, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	//161
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивыРастениеводстваПоСправедливойСтоимости) Тогда
		УстановитьСубконтоСчетовБА(ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивыРастениеводстваПоСправедливойСтоимости, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БиологическиеАктивы);
		УстановитьСубконтоСчетовБА(ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивыРастениеводстваПоСправедливойСтоимости, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	//162
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивыРастениеводстваПоПервоначальнойСтоимости) Тогда
		УстановитьСубконтоСчетовБА(ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивыРастениеводстваПоПервоначальнойСтоимости, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	//1621
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивыРастениеводстваПоПервоначальнойСтоимостиНеАмортизируются) Тогда
		УстановитьСубконтоСчетовБА(ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивыРастениеводстваПоПервоначальнойСтоимостиНеАмортизируются, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БиологическиеАктивы);
		УстановитьСубконтоСчетовБА(ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивыРастениеводстваПоПервоначальнойСтоимостиНеАмортизируются, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	//163
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивыЖивотноводстваПоСправедливойСтоимости) Тогда
		УстановитьСубконтоСчетовБА(ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивыЖивотноводстваПоСправедливойСтоимости, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БиологическиеАктивы);
		УстановитьСубконтоСчетовБА(ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивыЖивотноводстваПоСправедливойСтоимости, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	//164
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивыЖивотноводстваПоПервоначальнойСтоимости) Тогда
		УстановитьСубконтоСчетовБА(ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивыЖивотноводстваПоПервоначальнойСтоимости, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	//1641
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивыЖивотноводстваПоПервоначальнойСтоимостиНеАмортизируются) Тогда
		УстановитьСубконтоСчетовБА(ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивыЖивотноводстваПоПервоначальнойСтоимостиНеАмортизируются, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БиологическиеАктивы);
		УстановитьСубконтоСчетовБА(ПланыСчетов.Хозрасчетный.ДолгосрочныеБиологическиеАктивыЖивотноводстваПоПервоначальнойСтоимостиНеАмортизируются, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	//165
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.НезрелыеДолгосрочныеБиологическиеАктивыПоСправедливойСтоимости) Тогда
		УстановитьСубконтоСчетовБА(ПланыСчетов.Хозрасчетный.НезрелыеДолгосрочныеБиологическиеАктивыПоСправедливойСтоимости, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БиологическиеАктивы);
		УстановитьСубконтоСчетовБА(ПланыСчетов.Хозрасчетный.НезрелыеДолгосрочныеБиологическиеАктивыПоСправедливойСтоимости, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	//166
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.НезрелыеДолгосрочныеБиологическиеАктивыПоПервоначальнойСтоимости) Тогда
		УстановитьСубконтоСчетовБА(ПланыСчетов.Хозрасчетный.НезрелыеДолгосрочныеБиологическиеАктивыПоПервоначальнойСтоимости, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	//1661
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.НезрелыеДолгосрочныеБиологическиеАктивыПоПервоначальнойСтоимостиНеАмортизируются) Тогда
		УстановитьСубконтоСчетовБА(ПланыСчетов.Хозрасчетный.НезрелыеДолгосрочныеБиологическиеАктивыПоПервоначальнойСтоимостиНеАмортизируются, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БиологическиеАктивы);
		УстановитьСубконтоСчетовБА(ПланыСчетов.Хозрасчетный.НезрелыеДолгосрочныеБиологическиеАктивыПоПервоначальнойСтоимостиНеАмортизируются, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли;
	// ИНАГРО --
	
	//181
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ЗадолженностьЗаИмуществоПереданноеВФинансовуюАренду) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ЗадолженностьЗаИмуществоПереданноеВФинансовуюАренду, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ЗадолженностьЗаИмуществоПереданноеВФинансовуюАренду, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	КонецЕсли; 
	//182
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ДолгосрочныеВекселяПолученные) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ДолгосрочныеВекселяПолученные, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ДолгосрочныеВекселяПолученные, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги);
	КонецЕсли; 
	//183
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ДругаяДебиторскаяЗадолженность) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ДругаяДебиторскаяЗадолженность, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ДругаяДебиторскаяЗадолженность, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	КонецЕсли; 
	//184
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ПрочиеНеоборотныеАктивы) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ПрочиеНеоборотныеАктивы, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеНеоборотныеАктивы);
	КонецЕсли; 
	//21
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ТекущиеБиологическиеАктивы) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ТекущиеБиологическиеАктивы, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БиологическиеАктивы);
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ТекущиеБиологическиеАктивы, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли; 
	//34
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.КраткосрочныеВекселяПолученные) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.КраткосрочныеВекселяПолученные, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги);
	КонецЕсли; 
	//35
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ТекущиеФинансовыеИнвестиции) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ТекущиеФинансовыеИнвестиции, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ФинансовыеИнвестиции);
	КонецЕсли; 
	//373
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.РасчетыПоНачисленнымДоходам) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.РасчетыПоНачисленнымДоходам, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.РасчетыПоНачисленнымДоходам, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	КонецЕсли; 
	//374
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.РасчетыПоПретензиям, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	КонецЕсли; 
	//376
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.РасчетыПоСсудамЧленамКредитныхСоюзов) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.РасчетыПоСсудамЧленамКредитныхСоюзов, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.РасчетыПоСсудамЧленамКредитныхСоюзов, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	КонецЕсли; 
	//40
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.УставныйКапитал) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.УставныйКапитал, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.УставныйКапитал, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги);
	КонецЕсли; 
	//41
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ПаевойКапитал) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ПаевойКапитал, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ПаевойКапитал, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги);
	КонецЕсли; 
	//45
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ИзъятыйКапитал) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ИзъятыйКапитал, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги);
	КонецЕсли; 
	//46
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.НеоплаченныйКапитал) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.НеоплаченныйКапитал, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.НеоплаченныйКапитал, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги);
	КонецЕсли; 
	//47
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ОбеспечениеБудущихЗатратИПлатежей) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ОбеспечениеБудущихЗатратИПлатежей, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат, Истина);
	КонецЕсли; 
	//48
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ЦелевоеФинансированиеИЦелевыеПоступления) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ЦелевоеФинансированиеИЦелевыеПоступления, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НазначениеЦелевыхСредств);
	КонецЕсли; 
	//49
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.СтраховыеРезервы) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.СтраховыеРезервы, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Резервы);
	КонецЕсли; 
	//50
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймы) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймы, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймы, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	КонецЕсли; 
	//51
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ДолгосрочныеВекселяВыданные) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ДолгосрочныеВекселяВыданные, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги);
	КонецЕсли; 
	//52
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ДолгосрочныеОбязательстваПоОблигациям) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ДолгосрочныеОбязательстваПоОблигациям, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги);
	КонецЕсли; 
	//53
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ДолгосрочныеОбязательстваПоАренде) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ДолгосрочныеОбязательстваПоАренде, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	КонецЕсли; 
	//55
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ПрочиеДолгосрочныеОбязательства) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ПрочиеДолгосрочныеОбязательства, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ПрочиеДолгосрочныеОбязательства, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	КонецЕсли; 
	//60
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	КонецЕсли; 
	//61
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ТекущаяЗадолженностьПоДолгосрочнымОбязательствам) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ТекущаяЗадолженностьПоДолгосрочнымОбязательствам, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ТекущаяЗадолженностьПоДолгосрочнымОбязательствам, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	КонецЕсли; 
	//62
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.КраткосрочныеВекселяВыданные) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.КраткосрочныеВекселяВыданные, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги);
	КонецЕсли; 
	//654
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.РасчетыПоИндивидуальномуСтрахованию) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.РасчетыПоИндивидуальномуСтрахованию, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций);
	КонецЕсли; 
	//67
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.РасчетыСУчастниками) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.РасчетыСУчастниками, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	КонецЕсли; 
	//682
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ВнутренниеРасчеты) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ВнутренниеРасчеты, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ВнутренниеРасчеты, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	КонецЕсли; 
	//683
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ВнутрихозяйственныеРасчеты, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	КонецЕсли; 
	//684
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.РасчетыПоНачисленнымПроцентам) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.РасчетыПоНачисленнымПроцентам, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.РасчетыПоНачисленнымПроцентам, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	КонецЕсли; 
	//69
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ДоходыБудущихПериодов) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ДоходыБудущихПериодов, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДоходыБудущихПериодов);
	КонецЕсли; 
	//03
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.КонтрактныеОбязательства) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.КонтрактныеОбязательства, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.КонтрактныеОбязательства);
	КонецЕсли; 
	//05
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ГарантииИОбеспечениеПредоставленные) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ГарантииИОбеспечениеПредоставленные, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Гарантии);
	КонецЕсли; 
	//06
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.ГарантииИОбеспечениеПолученные) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.ГарантииИОбеспечениеПолученные, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Гарантии);
	КонецЕсли; 
	//07
	Если ЭтоНачальноеЗаполнение ИЛИ ПроверитьВозможностьДобавленияСубконто(ПланыСчетов.Хозрасчетный.СписанныеАктивы) Тогда
		УстановитьСубконтоНеавтоматизированныхСчетов(ПланыСчетов.Хозрасчетный.СписанныеАктивы, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);	
	КонецЕсли; 
КонецПроцедуры	

Процедура НачальноеЗаполнениеСправочникаСобытияОС()
	
	КодЯзыкаИБ = Локализация.КодЯзыкаИнформационнойБазы();
	
	Попытка 
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВводВЭксплуатацию;
		СпрСобытияОС.Наименование = НСтр("ru='Ввод в эксплуатацию';uk='Введення в експлуатацію'",КодЯзыкаИБ);
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВнутреннееПеремещение;
		СпрСобытияОС.Наименование = НСтр("ru='Внутреннее перемещение';uk='Внутрішнє переміщення'",КодЯзыкаИБ);
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.Списание;
		СпрСобытияОС.Наименование = НСтр("ru='Списание';uk='Списання'",КодЯзыкаИБ);
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.Модернизация;
		СпрСобытияОС.Наименование = НСтр("ru='Модернизация и ремонт';uk='Модернізація та ремонт'",КодЯзыкаИБ);
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.Ремонт;
		СпрСобытияОС.Наименование = НСтр("ru='Ремонт';uk='Ремонт'",КодЯзыкаИБ);
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПодготовкаКПередаче;
		СпрСобытияОС.Наименование = НСтр("ru='Подготовка к передаче';uk='Підготовка до передачі'",КодЯзыкаИБ);
		СпрСобытияОС.Записать();
		
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();
		СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.Передача;
		СпрСобытияОС.Наименование = НСтр("ru='Передача';uk='Передача'",КодЯзыкаИБ);
		СпрСобытияОС.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьИспользованиеДополнительныхОтчетовИОбработок() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("РаботаВЛокальномРежиме") Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДополнительныеОтчетыИОбработки.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки";
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой()
			И ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
			
			Константы.ИспользоватьДополнительныеОтчетыИОбработки.Установить(Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ИзменитьВариантыОтчетаВидовРегистраУчета() Экспорт

	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Было неправильно указано имя варианта отчета
	ВидРегистра = Справочники.ВидыРегистровУчета.СправкаРасчетСебестоимостиПродукцииИУслуг.ПолучитьОбъект();
	ВидРегистра.ВариантОтчета = "СебестоимостьВыпущеннойПродукцииИОказанныхУслугПроизводственногоХарактера";
	ВидРегистра.Записать();	

КонецПроцедуры

Процедура ПеренестиПрисоединенныеФайлы() Экспорт
	
	СуществуютПрисоединенныеФайлы = Истина;
	
	Пока СуществуютПрисоединенныеФайлы Цикл
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	УдалитьПрисоединенныеФайлы.ПрисоединенныйФайл КАК Файл,
		|	УдалитьПрисоединенныеФайлы.ХранимыйФайл КАК ДвоичныеДанныеФайла
		|ИЗ
		|	РегистрСведений.УдалитьПрисоединенныеФайлы КАК УдалитьПрисоединенныеФайлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДвоичныеДанныеФайлов КАК ДвоичныеДанныеФайлов
		|		ПО УдалитьПрисоединенныеФайлы.ПрисоединенныйФайл = ДвоичныеДанныеФайлов.Файл
		|ГДЕ
		|	ДвоичныеДанныеФайлов.Файл ЕСТЬ NULL";
		
		РезультатЗапроса = Запрос.Выполнить();
		СуществуютПрисоединенныеФайлы = НЕ РезультатЗапроса.Пустой();
		Если СуществуютПрисоединенныеФайлы Тогда
			
			НаборЗаписей = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьНаборЗаписей();
			НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Ложь, Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенные_2_0_16_2()  Экспорт
	
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьПланВидовРасчета("ИНАГРО_Начисления");
	
КонецПроцедуры	

Процедура ЗаполнитьПредопределенные_2_0_16_3()  Экспорт
	
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("РегистрСведений", "ИНАГРО_СтавкиНалогаДля4гр", Истина);
	
КонецПроцедуры	

// ИНАГРО. Устанавливает субконто на счетах БА
//
Процедура УстановитьСубконтоСчетовБА(СчетДляСубконто, ВидСубконто, ТолькоОбороты = Ложь)
	
	Попытка

		Объект   = СчетДляСубконто.ПолучитьОбъект();
		КодСчета = Объект.Код;

		Если Объект.ВидыСубконто.Найти(ВидСубконто, "ВидСубконто") = Неопределено Тогда
			
			НовыйВид = Объект.ВидыСубконто.Добавить();

			НовыйВид.ВидСубконто = ВидСубконто;
			НовыйВид.ТолькоОбороты = ТолькоОбороты;
			НовыйВид.Суммовой    = Истина;
			НовыйВид.Количественный = Истина;
			НовыйВид.Валютный = Истина;

			Объект.Записать();
		КонецЕсли;

	Исключение

		ТекстСообщения = НСтр("ru='Счет ""';uk='Рахунок ""'") + Строка(КодСчета) + """:";
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

	КонецПопытки
	
КонецПроцедуры

// ИНАГРО.
//
Процедура ЗаполнитьПериодВзаиморасчетовЗП() Экспорт
	
	Выборка = ДанныеПоПериодуВзаиморасчетов();
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		Для Каждого ЗаписьТЧ Из ДокументОбъект.ВзносыФОТ Цикл
			Если ЗаписьТЧ.УдалитьПериодВзаиморасчетов <> '00010101' Тогда
				ЗаписьТЧ.ПериодВзаиморасчетов = ЗаписьТЧ.УдалитьПериодВзаиморасчетов;
			КонецЕсли;	
		КонецЦикла;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		ЗафиксироватьТранзакцию();
	КонецЦикла	
	
КонецПроцедуры

// ИНАГРО.
//
Функция ДанныеПоПериодуВзаиморасчетов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИНАГРО_ЗарплатаКВыплатеОрганизаций.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций КАК ИНАГРО_ЗарплатаКВыплатеОрганизаций
	|ГДЕ
	|	(ИНАГРО_ЗарплатаКВыплатеОрганизаций.ВидВыплаты = ЗНАЧЕНИЕ(Справочник.ВидыВыплат.ОчереднаяВзносы)
	|			ИЛИ ИНАГРО_ЗарплатаКВыплатеОрганизаций.ВидВыплаты = ЗНАЧЕНИЕ(Справочник.ВидыВыплат.ОчереднаяПогашениеДолговВзносы))";
	
	Возврат Запрос.Выполнить().Выбрать()
	
КонецФункции

// ИНАГРО.
//
Процедура ЗаполнитьВидТерриторииДляПолей() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.ИНАГРО_ПризнакПоля = ИСТИНА
	|	И ПодразделенияОрганизаций.ИНАГРО_ВидТерритории = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыТерриторий.ПустаяСсылка)";
	
	ВыборкаЭлементов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЭлементов.Следующий() Цикл
		
		НачатьТранзакцию();
		
		СправочникОбъект = ВыборкаЭлементов.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ИНАГРО_ВидТерритории = Перечисления.ИНАГРО_ВидыТерриторий.Общие;
		
		СправочникОбъект.Записать();							
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
КонецПроцедуры


// ИНАГРО.
//
Процедура ПерезаполнитьТабельныйНомер() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник,
	               |	ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.ТабельныйНомер
	               |ИЗ
	               |	Документ.ИНАГРО_ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации
	               |ГДЕ
	               |	ИНАГРО_ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Проведен";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СотрудникСсылка = Выборка.Сотрудник;
		СотрудникОбъект = СотрудникСсылка.ПолучитьОбъект();
		СотрудникОбъект.ИНАГРО_ТабельныйНомер = Выборка.ТабельныйНомер;
		СотрудникОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// ИНАГРО.
//
Процедура УстановитьПереключатели() Экспорт
	
	// Автотранспорт.
	НаборЗаписей = РегистрыСведений.ИНАГРО_ВидыРаботАвтотранспорта.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать(); 
	Для Каждого Запись Из НаборЗаписей Цикл 
		Если Запись.НормыК = "КЛитрамНа100КМ" Тогда
			Запись.НормыК = "КЛитрамНаСтоКМ"; 
		КонецЕсли;
	КонецЦикла; 
	НаборЗаписей.Записать();
	
	// Сельхозтехника.
	НаборЗаписей = РегистрыСведений.ИНАГРО_ВидыРаботСельхозтехники.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать(); 
	Для Каждого Запись Из НаборЗаписей Цикл 
		Если Запись.НормаГСМПо = "ВыплатаВНатуре" Тогда
			Запись.НормаГСМПо = "КВыпВНатуре";
		ИначеЕсли Запись.НормаГСМПо = "Часам" Тогда
			Запись.НормаГСМПо = "КЧасам";
		ИначеЕсли Запись.НормаГСМПо = "Га" Тогда
			Запись.НормаГСМПо = "КГа";
		ИначеЕсли Запись.НормаГСМПо = "УслугиГа" Тогда
			Запись.НормаГСМПо = "КУслГа";
		КонецЕсли;
		
		Если Запись.РасценкаК = "СменНорм" Тогда
			Запись.РасценкаК = "КСменНорм";
		ИначеЕсли Запись.РасценкаК = "ВНатуре" Тогда
			Запись.РасценкаК = "КВыпВНатуре";
		КонецЕсли; 
		
		Если Запись.СменныхНормОт = "ВНатуре" Тогда
			Запись.СменныхНормОт = "КВыпВНатуре";
		КонецЕсли; 
	КонецЦикла; 
	НаборЗаписей.Записать();
	
	// Ручной труд.
	НаборЗаписей = РегистрыСведений.ИНАГРО_ВидыРаботРучнойТруд.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать(); 
	Для Каждого Запись Из НаборЗаписей Цикл 
		Если Запись.РасценкаК = "0" Тогда
			Запись.РасценкаК = "КВыпВНатуре";
		КонецЕсли; 
		
		Если Запись.СменныхНормОт = "ВНатуре" Тогда
			Запись.СменныхНормОт = "СНКВыпВНатуре";
		ИначеЕсли Запись.СменныхНормОт = "ОтработаныхЧасов" Тогда
			Запись.СменныхНормОт = "СНОтработаныхЧасов";
		КонецЕсли; 
	КонецЦикла; 
	НаборЗаписей.Записать();
	
КонецПроцедуры

// ИНАГРО.
//
Процедура ЗаполнитьНормативнаяОценкаЗемлиЕдПлощади() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.ИНАГРО_НормативнаяОценкаЗемли КАК ИНАГРО_НормативнаяОценкаЗемли";

	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	КоличествоСтрок = ТаблицаРезультата.Количество();
	Для Инд = 1 по КоличествоСтрок Цикл
		Строка = ТаблицаРезультата[Инд-1];
		Если ЗначениеЗаполнено(Строка.Участок) Тогда
			Строка.НормативнаяОценкаЗемлиЕдПлощади	= ?(Строка.Участок.ПлощадьФизическая>0,Строка.НормативнаяОценкаЗемли/Строка.Участок.ПлощадьФизическая,0);
		КонецЕсли;
	КонецЦикла;

	НаборЗаписей = РегистрыСведений.ИНАГРО_НормативнаяОценкаЗемли.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(ТаблицаРезультата);
	//НаборЗаписей.Записать(Истина);

КонецПроцедуры

// ИНАГРО.
//
Процедура ЗаполнитьНалогиАктуальность() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Налоги.УдалитьАктуальность,
	|	Налоги.Ссылка КАК Налог
	|ИЗ
	|	Справочник.Налоги КАК Налоги";

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.УдалитьАктуальность Тогда
			НалогиСсылка = Выборка.Налог;
			НалогиОбъект = НалогиСсылка.ПолучитьОбъект();
			НалогиОбъект.Актуальность = Выборка.УдалитьАктуальность;
			НалогиОбъект.Записать();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// ИНАГРО.
//
Процедура ЗаполнитьIDСтрокиТЧПутевыеЛисты() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ИНАГРО_ПутевойЛистТрактористаМашиниста.Ссылка
	                |ИЗ
	                |	Документ.ИНАГРО_ПутевойЛистТрактористаМашиниста КАК ИНАГРО_ПутевойЛистТрактористаМашиниста";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		ДокументСсылка = Выборка.Ссылка;
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		Для Каждого СтрокаРаботы Из ДокументОбъект.ПутевыеЛисты Цикл
			Если СтрокаРаботы.ЕстьПомощник Тогда
				
				IDНовойСтроки = Новый УникальныйИдентификатор;
				СтрокаРаботы.IDСтроки = IDНовойСтроки;
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("УдалитьСтрокаТЧПутевыеЛисты", СтрокаРаботы.НомерСтроки);
				
				СоответствияПомощники = ДокументОбъект.Помощники.НайтиСтроки(ПараметрыОтбора);
				
				Для Каждого СтрокаПомощник Из СоответствияПомощники Цикл
					СтрокаПомощник.IDСтроки = IDНовойСтроки;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		ЗафиксироватьТранзакцию();
	КонецЦикла;

КонецПроцедуры
 
// ИНАГРО.
//
Процедура ПерезаполнитьНалоговыеНакладные() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НалоговаяНакладная.Ссылка КАК Ссылка,
		|	НалоговаяНакладная.ВключаетсяВУточняющийРасчет КАК ВключаетсяВУточняющийРасчет,
		|	НалоговаяНакладная.ПодтверждаетсяГТД КАК ПодтверждаетсяГТД,
		|	НалоговаяНакладная.НомерГТД КАК НомерГТД,
		|	НалоговаяНакладная.УточняемыйПериод КАК УточняемыйПериод,
		|	НалоговаяНакладная.ПоставкаДипПредставительству КАК ПоставкаДипПредставительству,
		|	НалоговаяНакладная.УдалитьВключаетсяВУточняющийРасчет КАК УдалитьВключаетсяВУточняющийРасчет,
		|	НалоговаяНакладная.УдалитьПодтверждаетсяГТД КАК УдалитьПодтверждаетсяГТД,
		|	НалоговаяНакладная.УдалитьНомерГТД КАК УдалитьНомерГТД,
		|	НалоговаяНакладная.УдалитьУточняемыйПериод КАК УдалитьУточняемыйПериод,
		|	НалоговаяНакладная.УдалитьПоставкаДипПредставительству КАК УдалитьПоставкаДипПредставительству
		|ИЗ
		|	Документ.НалоговаяНакладная КАК НалоговаяНакладная";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	НачатьТранзакцию();
	
	Попытка
		
		Пока Выборка.Следующий() Цикл
			
			ДокументСсылка = Выборка.Ссылка;
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.ВключаетсяВУточняющийРасчет  = Выборка.УдалитьВключаетсяВУточняющийРасчет;
			ДокументОбъект.ПодтверждаетсяГТД            = Выборка.УдалитьПодтверждаетсяГТД;
			ДокументОбъект.НомерГТД                     = Выборка.УдалитьНомерГТД;
			ДокументОбъект.УточняемыйПериод             = Выборка.УдалитьУточняемыйПериод;
			ДокументОбъект.ПоставкаДипПредставительству = Выборка.УдалитьПоставкаДипПредставительству;
			ДокументОбъект.Записать();
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = НСтр("ru='Операция не выполнена';uk='Операція не виконана'");
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры

Процедура ВыполнитьКорректировкуРеглОтчетов() Экспорт
	
	// Перезаполняем источники старых отчетов
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегламентированныйОтчет.Ссылка КАК Ссылка,
	               |	РегламентированныйОтчет.ИсточникОтчета КАК ИсточникОтчета
	               |ИЗ
	               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ИсточникОтчета = "ИНАГРО_РегламентированныйОтчетДекларацияЧервертойГруппы" Тогда
			ОтчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ОтчетОбъект.ОбменДанными.Загрузка = Истина;
			ОтчетОбъект.ИсточникОтчета = "ИНАГРО_РегламентированныйОтчетДекларацияЧетвертойГруппы";
			ОтчетОбъект.Записать(РежимЗаписиДокумента.Запись);
		ИначеЕсли Выборка.ИсточникОтчета = "ИНАГРО_ОтчетПоРеализацииСельскохозяйственнойПродуцииФорма21" Тогда
			ОтчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ОтчетОбъект.ОбменДанными.Загрузка = Истина;
			ОтчетОбъект.ИсточникОтчета = "ИНАГРО_ОтчетПоРеализацииСельскохозяйственнойПродукцииФорма21";
			ОтчетОбъект.Записать(РежимЗаписиДокумента.Запись);
		ИначеЕсли Выборка.ИсточникОтчета = "ИНАГРО_ОсновныеЕкономическиеПоказателиРаботыСельхозПредприятий_50сг" Тогда
			ОтчетОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ОтчетОбъект.ОбменДанными.Загрузка = Истина;
			ОтчетОбъект.ИсточникОтчета = "ИНАГРО_ОсновныеЭкономическиеПоказателиРаботыСельхозПредприятий_50сг";
			ОтчетОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЦикла;
	
	// Скрываем старые элементы в справочнике
	Запрос = Новый Запрос;
	запрос.Текст = "ВЫБРАТЬ
	               |	РегламентированныеОтчеты.Ссылка КАК Ссылка,
	               |	РегламентированныеОтчеты.ИсточникОтчета КАК ИсточникОтчета
	               |ИЗ
	               |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
		
	Пока Выборка.Следующий() Цикл
		Если Выборка.ИсточникОтчета = "ИНАГРО_РегламентированныйОтчетДекларацияЧервертойГруппы" Тогда
			МенеджерЗаписи = РегистрыСведений.СкрытыеРегламентированныеОтчеты.СоздатьМенеджерЗаписи();
		    МенеджерЗаписи.РегламентированныйОтчет = Выборка.Ссылка; 
			МенеджерЗаписи.Записать(); 	
		ИначеЕсли Выборка.ИсточникОтчета = "ИНАГРО_ОтчетПоРеализацииСельскохозяйственнойПродуцииФорма21" Тогда
			МенеджерЗаписи = РегистрыСведений.СкрытыеРегламентированныеОтчеты.СоздатьМенеджерЗаписи();
		    МенеджерЗаписи.РегламентированныйОтчет = Выборка.Ссылка; 
			МенеджерЗаписи.Записать(); 	
		ИначеЕсли Выборка.ИсточникОтчета = "ИНАГРО_ОсновныеЕкономическиеПоказателиРаботыСельхозПредприятий_50сг" Тогда
			МенеджерЗаписи = РегистрыСведений.СкрытыеРегламентированныеОтчеты.СоздатьМенеджерЗаписи();
		    МенеджерЗаписи.РегламентированныйОтчет = Выборка.Ссылка; 
			МенеджерЗаписи.Записать(); 	  
		ИначеЕсли Выборка.ИсточникОтчета = "ИНАГРО_РегламентированныйОтчетДекларацияОПрибылиДляСХ" Тогда
			МенеджерЗаписи = РегистрыСведений.СкрытыеРегламентированныеОтчеты.СоздатьМенеджерЗаписи();
		    МенеджерЗаписи.РегламентированныйОтчет = Выборка.Ссылка; 
			МенеджерЗаписи.Записать(); 	
		ИначеЕсли Выборка.ИсточникОтчета = "ИНАГРО_ДанныеОНаличииЗемельныхУчастков" Тогда
			МенеджерЗаписи = РегистрыСведений.СкрытыеРегламентированныеОтчеты.СоздатьМенеджерЗаписи();
		    МенеджерЗаписи.РегламентированныйОтчет = Выборка.Ссылка; 
			МенеджерЗаписи.Записать(); 	 
		ИначеЕсли Выборка.ИсточникОтчета = "ИНАГРО_РегламентированныйОтчетНалоговыйРасчетФСХНалога" Тогда
			МенеджерЗаписи = РегистрыСведений.СкрытыеРегламентированныеОтчеты.СоздатьМенеджерЗаписи();
		    МенеджерЗаписи.РегламентированныйОтчет = Выборка.Ссылка; 
			МенеджерЗаписи.Записать(); 	
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура ИсправитьДвиженияХозрасчетный() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	(Хозрасчетный.Регистратор ССЫЛКА Документ.ИНАГРО_КорректировкаЗатрат
	|			ИЛИ Хозрасчетный.Регистратор ССЫЛКА Документ.ИНАГРО_ВедомостьРеализация)
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Регистратор
	|ИТОГИ ПО
	|	Регистратор";
	
	//Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(НачалоПериода));
	//Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(КонецПериода));
	//
	РезультатЗапроса = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока РезультатЗапроса.Следующий() Цикл
		НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(РезультатЗапроса.Регистратор);
		НаборЗаписей.Прочитать();
		Записывать = Ложь;
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Если Не ЗначениеЗаполнено(Запись.ВалютаДт) Тогда	
				Если ТипЗнч(Запись.ВалютаДт) = Тип("СправочникСсылка.Валюты") Тогда
					Запись.ВалютаДт = Неопределено;
					Записывать = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Запись.ВалютаКт) Тогда
				Если ТипЗнч(Запись.ВалютаКт) = Тип("СправочникСсылка.Валюты") Тогда
					Запись.ВалютаКт = Неопределено;
					Записывать = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Запись.ВалютнаяСуммаДт) Тогда
				Если ТипЗнч(Запись.ВалютнаяСуммаДт) = Тип("Число") Тогда
					Запись.ВалютнаяСуммаДт = Неопределено;
					Записывать = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Запись.ВалютнаяСуммаКт) Тогда
				Если ТипЗнч(Запись.ВалютнаяСуммаКт) = Тип("Число") Тогда
					Запись.ВалютнаяСуммаКт = Неопределено;
					Записывать = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Запись.КоличествоДт) Тогда
				Если ТипЗнч(Запись.КоличествоДт) = Тип("Число") Тогда
					Запись.КоличествоДт = Неопределено;
					Записывать = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Запись.КоличествоКт) Тогда
				Если ТипЗнч(Запись.КоличествоКт) = Тип("Число") Тогда
					Запись.КоличествоКт = Неопределено;
					Записывать = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если Лев(Метаданные.Версия, 1) = Строка(1) Тогда
				Если Не ЗначениеЗаполнено(Запись.ПоштучныйДт) Тогда
					Если ТипЗнч(Запись.ПоштучныйДт) = Тип("Число") Тогда
						Запись.ПоштучныйДт = Неопределено;
						Записывать = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Запись.ПоштучныйКт) Тогда
					Если ТипЗнч(Запись.ПоштучныйКт) = Тип("Число") Тогда
						Запись.ПоштучныйКт = Неопределено;
						Записывать = Истина;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Лев(Метаданные.Версия, 1) = Строка(2) Тогда
				Если Не ЗначениеЗаполнено(Запись.КоличествоГоловДт) Тогда
					Если ТипЗнч(Запись.КоличествоГоловДт) = Тип("Число") Тогда
						Запись.КоличествоГоловДт = Неопределено;
						Записывать = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Запись.КоличествоГоловКт) Тогда
					Если ТипЗнч(Запись.КоличествоГоловКт) = Тип("Число") Тогда
						Запись.КоличествоГоловКт = Неопределено;
						Записывать = Истина;
					КонецЕсли;
				КонецЕсли;
			Иначе
			КонецЕсли;
		КонецЦикла;
		
		Если Записывать Тогда
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенные_2_1_11_2()  Экспорт
	
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("Справочник", 	   "СтатьиНалоговыхДеклараций");
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("РегистрСведений", "НаборыСтатейНалоговыхДеклараций", Истина);
	
КонецПроцедуры	


Процедура ЗаполнитьПредопределенные_2_1_13_2()  Экспорт
	
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("РегистрСведений", "ИндексИнфляции");
	
КонецПроцедуры


Процедура ЗаполнитьПредопределенныеСтатьиНалоговыхДеклараций()  Экспорт
	
	Обработки.НачальноеЗаполнениеИОбновлениеОбъектов.ЗаполнитьОбъект("Справочник", 	   "СтатьиНалоговыхДеклараций");
	
КонецПроцедуры

#КонецОбласти
