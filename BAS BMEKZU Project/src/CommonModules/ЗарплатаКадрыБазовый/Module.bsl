////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Предназначена для использования в ОбщегоНазначенияПереопределяемый.ЗаполнитьТаблицуПереименованияОбъектовМетаданных
//
// Заполняет переименования тех объектов метаданных, которые невозможно
// автоматически найти по типу, но ссылки на которые требуется сохранять
// в базе данных (например: подсистемы, роли).
//
// Подробнее: см. ОбщегоНазначения.ДобавитьПереименование().
//
Процедура ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог) Экспорт
	
	
КонецПроцедуры

Процедура ПроверитьВозможностьСменыГоловнойОрганизации(Организация, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НачисленияУдержанияПоСотрудникам.Организация
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.Организация = &Организация";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='По %1 производилось начисление/удержание зарплаты.
|Что бы изменить головную организацию, необходимо отменить проведение этих документов.';uk='За %1 виконувалося нарахування/утримання зарплати.
|Що б змінити головну організацію, необхідно скасувати проведення цих документів.'"),
			Организация);
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Организация,
			"ГоловнаяОрганизация",
			"Объект",
			Отказ);
		
	КонецЕсли; 
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	КадроваяИсторияСотрудников.ГоловнаяОрганизация
			|ИЗ
			|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|ГДЕ
			|	КадроваяИсторияСотрудников.Организация = &Организация
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	КадроваяИсторияСотрудников.ГоловнаяОрганизация
			|ИЗ
			|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
			|ГДЕ
			|	КадроваяИсторияСотрудников.ГоловнаяОрганизация = &Организация";
			
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='В %1 произведен прием на работу сотрудников.
|Что бы изменить головную организацию, необходимо отменить проведение этих документов.';uk='У %1 проведений прийом на роботу співробітників.
|Щоб змінити головну організацію, необхідно скасувати проведення цих документів.'"),
				Организация);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Организация,
				"ГоловнаяОрганизация",
				"Объект",
				Отказ);
			
		КонецЕсли; 
			
	КонецЕсли; 	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Блок функций получения значений по умолчанию

Процедура ПолучитьЗначенияПоУмолчанию(ЗаполняемыеЗначения) Экспорт
	
	Если ЗаполняемыеЗначения.Свойство("Год") Тогда
		ЗаполняемыеЗначения.Год = Год(ТекущаяДатаСеанса());
	КонецЕсли;
	Если ЗаполняемыеЗначения.Свойство("Месяц") Тогда
		ЗаполняемыеЗначения.Месяц = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	Если ЗаполняемыеЗначения.Свойство("ПредыдущийГод") Тогда
		ЗаполняемыеЗначения.ПредыдущийГод = Год(ТекущаяДатаСеанса()) - 1;
	КонецЕсли;
	Если ЗаполняемыеЗначения.Свойство("ПредыдущийМесяц") Тогда
		ЗаполняемыеЗначения.ПредыдущийМесяц = НачалоМесяца(НачалоМесяца(ТекущаяДатаСеанса()) - 1);
	КонецЕсли;
	Если ЗаполняемыеЗначения.Свойство("ПредыдущийКвартал") Тогда
		ЗаполняемыеЗначения.ПредыдущийКвартал = НачалоКвартала(НачалоКвартала(ТекущаяДатаСеанса()) - 1);
	КонецЕсли;
	Если ЗаполняемыеЗначения.Свойство("Ответственный") Тогда
		ЗаполняемыеЗначения.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

// Массив поддерживаемых идентификаторов значений по умолчанию
Функция СписокДоступныхЗначенийПоУмолчанию() Экспорт
	ПоддерживаемыеИдентификаторы = Новый Массив();
	ПоддерживаемыеИдентификаторы.Добавить("Год");
	ПоддерживаемыеИдентификаторы.Добавить("Месяц");
	ПоддерживаемыеИдентификаторы.Добавить("ПредыдущийГод");
	ПоддерживаемыеИдентификаторы.Добавить("ПредыдущийМесяц");
	ПоддерживаемыеИдентификаторы.Добавить("ПредыдущийКвартал");
	ПоддерживаемыеИдентификаторы.Добавить("Ответственный");
	ПоддерживаемыеИдентификаторы.Добавить("Организация");
	ПоддерживаемыеИдентификаторы.Добавить("Руководитель");
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьРуководителя");
	ПоддерживаемыеИдентификаторы.Добавить("ГлавныйБухгалтер");
	ПоддерживаемыеИдентификаторы.Добавить("Кассир");
	ПоддерживаемыеИдентификаторы.Добавить("ДолжностьКассира");
	ПоддерживаемыеИдентификаторы.Добавить("Подразделение");
	Возврат ПоддерживаемыеИдентификаторы;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Даты запрета изменения данных

Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВводСведенийОбИндексированномДоходе"                             , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВедомостьНаВыплатуЗарплаты"                                      , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВедомостьНаВыплатуЗарплатыВБанк"                                 , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ВедомостьНаВыплатуЗарплатыВКассу"                                , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ДепонированиеЗарплаты"				                            , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ЗаявлениеНаПрименениеЛьготы"                                     , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.КадровыйПеревод"                                                 , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеПараметровРасчетаИндексацииПоДолжностям"                , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ИзменениеПараметровРасчетаИндексации"                			, "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.КомандировкиОрганизаций"                                         , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.НачислениеЗарплаты"                                              , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ПриемНаРаботу"                                                  	, "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.СписаниеДепонентовВДоходыОрганизаций"                            , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.СправкаОДоходах"                                                 , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.Увольнение"                                                  	, "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОтражениеЗарплатыВБухучете"                                     	, "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОтражениеЗарплатыВУчете"                                     	, "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УдалитьВводНачальныхОстатковПоЗарплате"                          , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УдалитьВводСведенийОПлановыхНачисленияхРаботниковОрганизаций"    , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УдалитьКадровоеПеремещениеОрганизаций"                           , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УдалитьНачислениеКоммунальногоНалога"                            , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УдалитьОтражениеЗарплатыВРеглУчете"                              , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УдалитьПодтверждениеУплатыНалоговПоЗарплате"                     , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УдалитьПриемНаРаботуВОрганизацию"                                , "Дата" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.УдалитьУвольнениеИзОрганизаций"                                  , "Дата" , "БухгалтерскийУчет", "Организация");

	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ВзаиморасчетыПоВзносамВФонды"                           , "Период" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ВзаиморасчетыПоНДФЛ"                                    , "Период" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ВзаиморасчетыСДепонентами"                              , "Период" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.НачисленияУдержанияПоСотрудникам"                       , "Период" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ВзаиморасчетыССотрудниками"                             , "Период" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ВзаиморасчетыПоУдержаниям"                              , "Период" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.ЕСВПоСотрудникам"                                       , "Период" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрНакопления.НДФЛПоСотрудникам"                                      , "Период" , "БухгалтерскийУчет", "Организация");
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.БухучетЗарплатыОрганизаций"								, "Период" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.БухучетЗарплатыПодразделений"								, "Период" , "БухгалтерскийУчет", "Подразделение.Владелец");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.БухучетЗарплатыСотрудников"								, "Период" , "БухгалтерскийУчет", "Сотрудник.ГоловнаяОрганизация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ЕСВСотрудников"                                           , "Период" , "БухгалтерскийУчет", ""); 
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ИндексированныйДоходСовместителей"                        , "Период" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.КадроваяИсторияСотрудников"                               , "Период" , "БухгалтерскийУчет", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.КоэффициентРезерваОтпусков"                        		, "Период" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам"              , "Период" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ЛьготыПоНДФЛСотрудников"                              	, "Период" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ОтражениеВзносовВРеглУчете"                              	, "Период" , "БухгалтерскийУчет", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ПараметрыКатегорийЕСВ"                              		, "Период" , "БухгалтерскийУчет", "");
	// ИНАГРО ++
	//ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.УдалитьПараметрыВыплатыЗПРаботников"                      , "Период" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ИНАГРО_ПараметрыВыплатыЗПРаботников"                      , "Период" , "БухгалтерскийУчет", "Организация");
	// ИНАГРО --
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ПараметрыРасчетаИндексации"                               , "Период" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ПлановыеНачисления"                                       , "Период" , "БухгалтерскийУчет", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ПлановыеУдержания"                                        , "Период" , "БухгалтерскийУчет", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.СтатьиЗатратПоВзносамФОТ"                                 , "Период" , "БухгалтерскийУчет", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.УдалитьВзносыВФондыРаботниковОрганизаций"                 , "Период" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.УдалитьВидыРасчетовВзносовВФонды"                 		, "Период" , "БухгалтерскийУчет", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.УдалитьПаспортныеДанныеФизЛиц"                 			, "Период" , "БухгалтерскийУчет", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.УдалитьПараметрыРасчетаИндексации"                        , "Период" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.УдалитьПлановыеНачисленияРаботниковОрганизаций"           , "Период" , "БухгалтерскийУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.УдалитьПлановыеУдержанияРаботниковОрганизаций"            , "Период" , "БухгалтерскийУчет", "Организация");
	// ИНАГРО ++
	//ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.УдалитьРаботникиОрганизаций"                              , "Период" , "БухгалтерскийУчет", "Организация"); 
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.ИНАГРО_РаботникиОрганизаций"                      		, "Период" , "БухгалтерскийУчет", "Организация");
	// ИНАГРО --
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.СведенияОбИнвалидностиФизическихЛиц"						, "Период" ,"БухгалтерскийУчет", "");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.СведенияОПенсионерах"										, "Период" ,"БухгалтерскийУчет", "");
    ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.СведенияОЛицахСДополнительнымиГарантиями"					, "Период" ,"БухгалтерскийУчет", "");
	

	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "РегистрСведений.СпециальныеРежимыЗарплатаКадры"                           , "Период" , "БухгалтерскийУчет", "Организация");
	
	// Раздел ОбъектыБазовойРеализации
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПодсистемы.ОбъектыБазовойРеализации") Тогда
		МодульОбъектыБазовойРеализации = ОбщегоНазначения.ОбщийМодуль("ЗарплатаКадрыОбъектыБазовойРеализации");
		МодульОбъектыБазовойРеализации.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Префиксация справочников по Организации

Процедура ПолучитьПрефиксообразующиеРеквизиты(Объекты) Экспорт
	
	СтрокаТаблицы = Объекты.Добавить();
	СтрокаТаблицы.Объект = Метаданные.Справочники.Сотрудники;
	СтрокаТаблицы.Реквизит = "ГоловнаяОрганизация";
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// Выгрузка/загрузка данных

// Заполняет массив типов неразделенных данных. Он используется при обновлении ссылок 
// при загрузке-выгрузке конфигурации
// 
// Параметры:
//  МассивТипов - массив
//
Процедура ТипыОбщихДанных(Знач МассивТипов) Экспорт
	
	
КонецПроцедуры

// Заполняет массив типов неразделенных данных, 
// для которых при выгрузке/загрузке используется сопоставление не по коду, 
// а по реквизиту ИдентификаторОбъекта
// 
// Параметры:
//  МассивТипов - массив
//
Процедура ТипыОбщихДанныхСопоставляемыхПоИдентификаторуОбъекта(Знач МассивТипов) Экспорт
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Регламентированная отчетность

// Процедура заполняет список используемых регламентированных отчетов
//
Процедура ЗаполнитьСписокРегламентированныхОтчетов(СписокРегламентированныхОтчетов) Экспорт
	
	
КонецПроцедуры

// Процедура заполняет структуру показателей.
// Ключ структуры – идентификатор показателя.
// Значение структуры – массив из двух элементов:
// 	- признак автозаполнения показателя,
//	- признак расшифровки показателя.
//
// Параметры:
// 	ПоказателиОтчета - структура показателей отчета,
// 	ИДОтчета         - идентификатор отчета,
//	ИДРедакцииОтчета - идентификатор редакции формы отчета.
//
Процедура ЗаполнитьПоказателиРегламентированногоОтчета(ПоказателиОтчета, ИДОтчета, ИДРедакцииОтчета) Экспорт
	
	
КонецПроцедуры

// Процедура заполняет переданную в виде контейнера структуру данных отчета.
//
Процедура ЗаполнитьРегламентированныйОтчет(ИДОтчета, ИДРедакцииОтчета, ПараметрыОтчета, Контейнер) Экспорт
	
	
КонецПроцедуры

#Область Печать

// Определяет объекты, в которых есть процедура ДобавитьКомандыПечати().
// Подробнее см. УправлениеПечатьюПереопределяемый.
//
// Параметры:
//  СписокОбъектов - Массив - список менеджеров объектов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Справочники.Организации);
	СписокОбъектов.Добавить(Справочники.Сотрудники);
	СписокОбъектов.Добавить(Справочники.ФизическиеЛица);
	СписокОбъектов.Добавить(Документы.ВедомостьНаВыплатуЗарплаты);
	СписокОбъектов.Добавить(Документы.ВедомостьНаВыплатуЗарплатыВБанк);
	СписокОбъектов.Добавить(Документы.ВедомостьНаВыплатуЗарплатыВКассу);
	СписокОбъектов.Добавить(Документы.ДепонированиеЗарплаты);
	СписокОбъектов.Добавить(Документы.ЗаявлениеНаПрименениеЛьготы);
	СписокОбъектов.Добавить(Документы.ИзменениеПараметровРасчетаИндексации);
	СписокОбъектов.Добавить(Документы.ИзменениеПараметровРасчетаИндексацииПоДолжностям);
	СписокОбъектов.Добавить(Документы.КадровыйПеревод);
	СписокОбъектов.Добавить(Документы.КомандировкиОрганизаций);
	СписокОбъектов.Добавить(Документы.НачислениеЗарплаты);
	СписокОбъектов.Добавить(Документы.ОтражениеВзаиморасчетовСКонтрагентамиВ1ДФ);
	СписокОбъектов.Добавить(Документы.ОтражениеЗарплатыВБухучете);
	СписокОбъектов.Добавить(Документы.ПриемНаРаботу);
	СписокОбъектов.Добавить(Документы.СписаниеДепонентовВДоходыОрганизаций);
	СписокОбъектов.Добавить(Документы.СправкаОДоходах);
	СписокОбъектов.Добавить(Документы.Увольнение);
	
КонецПроцедуры

// Дополнительные настройки списка команд печати.
//
// Параметры:
//  НастройкиСписка - Структура - модификаторы списка команд печати.
//   * МенеджерКомандПечати     - МенеджерОбъекта - менеджер объекта, в котором формируется список команд печати;
//   * АвтоматическоеЗаполнение - Булево - заполнять команды печати из объектов, входящих в состав журнала.
//                                         Значение по умолчанию: Истина.
//
Процедура ПриПолученииНастроекСпискаКомандПечати(НастройкиСписка) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область Пользователи

Процедура ПриОпределенииНазначенияРолей(НазначениеРолей) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	//// ЗарплатаКадрыПодсистемы
	//Списки.Вставить(Метаданные.РегистрыСведений.ИсторияРегистрацийВНалоговомОргане, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.ИсторияРегистрацийВНалоговомОрганеВторичный, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.НастройкиЗарплатаКадры, Истина);
	//// Конец ЗарплатаКадрыПодсистемы
	//
	//// ЗарплатаКадрыПодсистемы.Выплаты
	//Списки.Вставить(Метаданные.РегистрыСведений.ОплатаВедомостейНаВыплатуЗарплаты, Истина);
	//// Конец ЗарплатаКадрыПодсистемы.Выплаты
	//
	//ВзаиморасчетыССотрудниками.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	//
	//ОбменСБанкамиПоЗарплатнымПроектам.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	//
	//// ЗарплатаКадрыПодсистемы.КадровыйУчет
	//Списки.Вставить(Метаданные.Справочники.Сотрудники, Истина);
	//Списки.Вставить(Метаданные.ЖурналыДокументов.КадровыеДокументы, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.ВидыЗанятостиСотрудников, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.ВидыЗанятостиСотрудниковИнтервальный, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.ГражданствоФизическихЛиц, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.КадроваяИсторияСотрудников, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.КадроваяИсторияСотрудниковИнтервальный, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.ОсновныеСотрудникиФизическихЛиц, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.ТекущаяТарифнаяСтавкаСотрудников, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.ТекущиеКадровыеДанныеСотрудников, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.ФИОФизическихЛиц, Истина);
	//// Конец ЗарплатаКадрыПодсистемы.КадровыйУчет
	//
	//// RLS на объекты подсистемы ЗащитаПерсональныхДанных поставляется в ролях подсистемы КадровыйУчет:
	////   ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры
	////   ЧтениеДанныхФизическихЛицЗарплатаКадры
	//Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗащитаПерсональныхДанных") Тогда
	//	Списки.Вставить(Метаданные.Документы["ОтзывСогласияНаОбработкуПерсональныхДанных"], Ложь);
	//	Списки.Вставить(Метаданные.Документы["СогласиеНаОбработкуПерсональныхДанных"], Ложь);
	//	Списки.Вставить(Метаданные.РегистрыСведений["СогласияНаОбработкуПерсональныхДанных"], Ложь);
	//	Списки.Вставить(Метаданные.РегистрыСведений["СубъектыДляСкрытияПерсональныхДанных"], Ложь);
	//КонецЕсли;
	//
	//// ЗарплатаКадрыПодсистемы.ОтражениеЗарплатыВБухгалтерскомУчете
	//Списки.Вставить(Метаданные.РегистрыСведений.БухучетЗарплатыОрганизаций, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.ОтражениеВРегламентированномУчетеНастройкиОрганизаций, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.ПроцентЕНВДДляУчетаЗатратНаЗарплату, Истина);
	//// Конец ЗарплатаКадрыПодсистемы.ОтражениеЗарплатыВБухгалтерскомУчете
	//
	//// ЗарплатаКадрыПодсистемы.ПерсонифицированныйУчет
	//Списки.Вставить(Метаданные.Справочники.КомплектыОтчетностиПерсучета, Истина);
	//Списки.Вставить(Метаданные.Справочники.ОписьПачекСЗВ_6ПрисоединенныеФайлы, Истина);
	//Списки.Вставить(Метаданные.Документы.ВедомостьУплатыАДВ_11, Истина);
	//Списки.Вставить(Метаданные.Документы.ДанныеОКорректировкеСведенийЗастрахованныхЛицСЗВ_КОРР, Истина);
	//Списки.Вставить(Метаданные.Документы.ОписьОДВ_1, Истина);
	//Списки.Вставить(Метаданные.Документы.ОписьПачекСЗВ_6, Истина);
	//Списки.Вставить(Метаданные.Документы.ПачкаДокументовАДВ_1, Истина);
	//Списки.Вставить(Метаданные.Документы.ПачкаДокументовАДВ_2, Истина);
	//Списки.Вставить(Метаданные.Документы.ПачкаДокументовАДВ_3, Истина);
	//Списки.Вставить(Метаданные.Документы.ПачкаДокументовДСВ_1, Истина);
	//Списки.Вставить(Метаданные.Документы.ПачкаДокументовСЗВ_6_1, Истина);
	//Списки.Вставить(Метаданные.Документы.ПачкаДокументовСЗВ_6_3, Истина);
	//Списки.Вставить(Метаданные.Документы.ПачкаДокументовСЗВ_6_4, Истина);
	//Списки.Вставить(Метаданные.Документы.ПачкаДокументовСЗВ_К, Истина);
	//Списки.Вставить(Метаданные.Документы.ПачкаДокументовСПВ_1, Истина);
	//Списки.Вставить(Метаданные.Документы.ПачкаДокументовСПВ_2, Истина);
	//Списки.Вставить(Метаданные.Документы.ПачкаРазделов6РасчетаРСВ_1, Истина);
	//Списки.Вставить(Метаданные.Документы.РеестрДСВ_3, Истина);
	//Списки.Вставить(Метаданные.Документы.РеестрСЗВ_6_2, Истина);
	//Списки.Вставить(Метаданные.Документы.СведенияОЗаработкеСтажеЗастрахованныхЛицСЗВ_ИСХ, Истина);
	//Списки.Вставить(Метаданные.Документы.СведенияОЗастрахованныхЛицахСЗВ_М, Истина);
	//Списки.Вставить(Метаданные.Документы.СведенияОСтраховомСтажеЗастрахованныхЛицСЗВ_СТАЖ, Истина);
	//Списки.Вставить(Метаданные.ЖурналыДокументов.АнкетыПерсонифицированногоУчета, Истина);
	//Списки.Вставить(Метаданные.ЖурналыДокументов.ДобровольноеПенсионноеСтрахованиеПФР, Истина);
	//Списки.Вставить(Метаданные.ЖурналыДокументов.ПерсонифицированныйУчет, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.ИсторияРегистрацийВОрганеПФР, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.ПодразделенияЗаПределамиРФ, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.СведенияОВзносахВПФР, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.ТерриториальныеУсловияПФР, Истина);
	//Списки.Вставить(Метаданные.РегистрыНакопления.СтраховыеВзносыПереданныеВПФР, Истина);
	//// Конец ЗарплатаКадрыПодсистемы.ПерсонифицированныйУчет
	//
	//// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	//Списки.Вставить(Метаданные.РегистрыСведений.ОснованияПолномочийОтветственныхЛиц, Истина);
	//// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	//
	//// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования
	//Списки.Вставить(Метаданные.Документы.ИсходящаяСправкаОЗаработкеДляРасчетаПособий, Истина);
	//Списки.Вставить(Метаданные.Документы.РеестрДанныхЭЛНЗаполняемыхРаботодателем, Истина);
	//Списки.Вставить(Метаданные.РегистрыНакопления.ПособияПоСоциальномуСтрахованию, Истина);
	//Списки.Вставить(Метаданные.РегистрыНакопления.ПособияПоУходуЗаРебенком, Истина);
	//// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования
	//
	//// ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.ПрямыеВыплаты
	//Списки.Вставить(Метаданные.Документы.ЗаявлениеВФССОВозмещенииВыплатРодителямДетейИнвалидов, Истина);
	//Списки.Вставить(Метаданные.Документы.ЗаявлениеВФССОВозмещенииРасходовНаПогребение, Истина);
	//Списки.Вставить(Метаданные.Документы.ЗаявлениеСотрудникаНаВыплатуПособия, Истина);
	//Списки.Вставить(Метаданные.Документы.ОписьЗаявленийСотрудниковНаВыплатуПособий, Истина);
	//Списки.Вставить(Метаданные.Документы.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий, Истина);
	//Списки.Вставить(Метаданные.Документы.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком, Истина);
	//Списки.Вставить(Метаданные.ЖурналыДокументов.ЗаявленияОписиИРеестрыНаВыплатуПособий, Истина);
	//// Конец ЗарплатаКадрыПодсистемы.ПособияСоциальногоСтрахования.ПрямыеВыплаты
	//
	//// ЗарплатаКадрыПодсистемы.РасчетЗарплаты
	//Списки.Вставить(Метаданные.РегистрыСведений.ПлановыеАвансы, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.ПлановыеАвансыИнтервальный, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.ПлановыеНачисления, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.ПлановыеНачисленияИнтервальный, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.ПлановыеУдержания, Истина);
	//// Конец ЗарплатаКадрыПодсистемы.РасчетЗарплаты
	//
	//// ЗарплатаКадрыПодсистемы.УчетВзносовДокументы
	//Списки.Вставить(Метаданные.Документы.АктПроверкиСтраховыхВзносов, Истина);
	//Списки.Вставить(Метаданные.Документы.ПерерасчетСтраховыхВзносов, Истина);
	//// Конец ЗарплатаКадрыПодсистемы.УчетВзносовДокументы
	//
	//// ЗарплатаКадрыПодсистемы.УчетНачисленнойЗарплаты
	//Списки.Вставить(Метаданные.РегистрыНакопления.НачисленияУдержанияПоСотрудникам, Истина);
	//Списки.Вставить(Метаданные.РегистрыНакопления.ОтработанноеВремяПоСотрудникам, Истина);
	//// Конец ЗарплатаКадрыПодсистемы.УчетНачисленнойЗарплаты
	//
	//// ЗарплатаКадрыПодсистемы.УчетНДФЛ
	//Списки.Вставить(Метаданные.Документы.АвансовыйПлатежИностранцаПоНДФЛ, Истина);
	//Списки.Вставить(Метаданные.Документы.ВозвратНДФЛ, Истина);
	//Списки.Вставить(Метаданные.Документы.ОперацияНалоговогоУчетаПоНДФЛ, Истина);
	//Списки.Вставить(Метаданные.ЖурналыДокументов.ДокументыПоНДФЛ, Истина);
	//Списки.Вставить(Метаданные.ЖурналыДокументов.ЗаявленияНаВычеты, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.ДоходыПредыдущегоМестаРаботыНДФЛ, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.ПрименениеСтандартныхВычетовПоНДФЛ, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.ПрименениеСтандартныхВычетовПоНДФЛВторичный, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.СтандартныеВычетыНаДетейНДФЛ, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.СтандартныеВычетыПоНДФЛВторичный, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.СтандартныеВычетыФизическихЛицНДФЛ, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛ, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.СтатусФизическихЛицКакНалогоплательщиковНДФЛВторичный, Истина);
	//Списки.Вставить(Метаданные.РегистрыНакопления.АвансовыеПлатежиИностранцевПоНДФЛ, Истина);
	//Списки.Вставить(Метаданные.РегистрыНакопления.ИмущественныеВычетыНДФЛ, Истина);
	//Списки.Вставить(Метаданные.РегистрыНакопления.ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ, Истина);
	//Списки.Вставить(Метаданные.РегистрыНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ, Истина);
	//Списки.Вставить(Метаданные.РегистрыНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ, Истина);
	//Списки.Вставить(Метаданные.РегистрыНакопления.СведенияОДоходахНДФЛ, Истина);
	//Списки.Вставить(Метаданные.РегистрыНакопления.УплатаНДФЛНалоговымиАгентамиКРаспределению, Истина);
	//// Конец ЗарплатаКадрыПодсистемы.УчетНДФЛ
	//
	//// ЗарплатаКадрыПодсистемы.УчетНДФЛДокументы
	//Списки.Вставить(Метаданные.Документы.ЗаявлениеНаПредоставлениеСтандартныхВычетовПоНДФЛ, Истина);
	//Списки.Вставить(Метаданные.Документы.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ, Истина);
	//Списки.Вставить(Метаданные.Документы.ПерерасчетНДФЛ, Истина);
	//Списки.Вставить(Метаданные.Документы.ПрекращениеСтандартныхВычетовНДФЛ, Истина);
	//Списки.Вставить(Метаданные.Документы.СправкаНДФЛ, Истина);
	//Списки.Вставить(Метаданные.Документы.СправкиНДФЛДляПередачиВНалоговыйОрган, Истина);
	//Списки.Вставить(Метаданные.Документы.УведомлениеОПравеНаИмущественныйВычетДляНДФЛ, Истина);
	//// Конец ЗарплатаКадрыПодсистемы.УчетНДФЛДокументы
	//
	//// ЗарплатаКадрыПодсистемы.УчетСтраховыхВзносов
	//Списки.Вставить(Метаданные.Документы.ОперацияУчетаПоСтраховымВзносам, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.НастройкиИспользованияСтраховыхВзносовПоКлассамУсловийТруда, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.НастройкиУчетаСтраховыхВзносов, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.СведенияОбИнвалидностиФизическихЛиц, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.СтатусыЗастрахованныхФизическихЛиц, Истина);
	//Списки.Вставить(Метаданные.РегистрыНакопления.ИсчисленныеСтраховыеВзносы, Истина);
	//Списки.Вставить(Метаданные.РегистрыНакопления.РасчетыСФондамиПоСтраховымВзносам, Истина);
	//Списки.Вставить(Метаданные.РегистрыНакопления.СведенияОДоходахСтраховыеВзносы, Истина);
	//Списки.Вставить(Метаданные.РегистрыНакопления.СтраховыеВзносыПоФизическимЛицам, Истина);
	//// Конец ЗарплатаКадрыПодсистемы.УчетСтраховыхВзносов
	//
	//// ЗарплатаКадрыПодсистемы.ФизическиеЛица
	//Списки.Вставить(Метаданные.Справочники.ФизическиеЛица, Истина);
	//Списки.Вставить(Метаданные.РегистрыСведений.ДокументыФизическихЛиц, Истина);
	//// Конец ЗарплатаКадрыПодсистемы.ФизическиеЛица
	//
	//// ЗарплатаКадрыПриложения
	//Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПодсистемы.ОбъектыБазовойРеализации") Тогда
	//	Списки.Вставить(Метаданные.Документы["ВедомостьНаВыплатуЗарплаты"], Истина);
	//КонецЕсли;
	//Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БазовыеСправочныеДанные.Организации") Тогда
	//	Списки.Вставить(Метаданные.Справочники["Организации"], Истина);
	//КонецЕсли;
	//Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ПодразделенияОрганизаций") Тогда
	//	Списки.Вставить(Метаданные.Справочники["ПодразделенияОрганизаций"], Истина);
	//КонецЕсли;
	//Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.БухучетХозрасчетныхОрганизаций") Тогда
	//	Списки.Вставить(Метаданные.Документы["ОтражениеЗарплатыВБухучете"], Истина);
	//КонецЕсли;
	//Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.КадровыйУчетБазовый") Тогда
	//	Списки.Вставить(Метаданные.Документы["КадровыйПеревод"], Истина);
	//	Списки.Вставить(Метаданные.Документы["ПриемНаРаботу"], Истина);
	//	Списки.Вставить(Метаданные.Документы["Увольнение"], Истина);
	//КонецЕсли;
	//Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ОценочныеОбязательстваЗарплатаКадры") Тогда
	//	Списки.Вставить(Метаданные.Документы["НачислениеОценочныхОбязательствПоОтпускам"], Истина);
	//	Списки.Вставить(Метаданные.РегистрыСведений["ЗарплатаКадрыДолиСписанияКосвенныхРасходов"], Истина);
	//	Списки.Вставить(Метаданные.РегистрыСведений["НастройкиРасчетаРезервовОтпусков"], Истина);
	//	Списки.Вставить(Метаданные.РегистрыСведений["РасчетРезерваОтпусков"], Истина);
	//	Списки.Вставить(Метаданные.РегистрыНакопления["ОценочныеОбязательства"], Истина);
	//	Списки.Вставить(Метаданные.РегистрыНакопления["ОценочныеОбязательстваПоСотрудникам"], Истина);
	//КонецЕсли;
	//Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РасчетЗарплатыДляНебольшихОрганизаций") Тогда
	//	Списки.Вставить(Метаданные.Документы["БольничныйЛист"], Истина);
	//	Списки.Вставить(Метаданные.Документы["ИсполнительныйЛист"], Истина);
	//	Списки.Вставить(Метаданные.Документы["НачислениеЗарплаты"], Истина);
	//	Списки.Вставить(Метаданные.Документы["Отпуск"], Истина);
	//	Списки.Вставить(Метаданные.ЖурналыДокументов["НачислениеЗарплаты"], Истина);
	//	Списки.Вставить(Метаданные.РегистрыСведений["УсловияУдержанияПоИсполнительномуДокументу"], Истина);
	//КонецЕсли;
	//Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.УчетДепонированнойЗарплаты") Тогда
	//	Модуль = ОбщегоНазначения.ОбщийМодуль("УчетДепонированнойЗарплаты");
	//	Модуль.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	//КонецЕсли;
	//Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.РегламентированнаяОтчетностьЗаполнение") Тогда
	//	Списки.Вставить(Метаданные.Документы["СправкиПоНДФЛДляРасчетаПоНалогуНаПрибыль"], Истина);
	//КонецЕсли;
	//// Конец ЗарплатаКадрыПриложения
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Список, Ограничение) Экспорт
	
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовДоступа.
Процедура УправлениеДоступомЗаполнитьСвойстваВидаДоступа(ВидыДоступа) Экспорт
	
	// Организации.
	// Потенциально могут быть добавлены и другой библиотекой, поэтому добавляем с проверкой.
	Если ВидыДоступа.Найти("Организации", "Имя") = Неопределено Тогда
		ВидДоступа = ВидыДоступа.Добавить();
		ВидДоступа.Имя = "Организации";
		ВидДоступа.Представление = НСтр("ru='Организации';uk='Організації'");
		ВидДоступа.ТипЗначений   = Тип("СправочникСсылка.Организации");
	КонецЕсли;
	
	// Физические лица.
	ВидДоступа = ВидыДоступа.Добавить();
	ВидДоступа.Имя = "ГруппыФизическихЛиц";
	ВидДоступа.Представление = НСтр("ru='Группы физических лиц';uk='Групи фізичних осіб'");
	ВидДоступа.ТипЗначений = Тип("СправочникСсылка.ФизическиеЛица");
	ВидДоступа.ТипГруппЗначений = Тип("СправочникСсылка.ГруппыДоступаФизическихЛиц");
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииИспользованияВидаДоступа.
Процедура УправлениеДоступомЗаполнитьИспользованиеВидаДоступа(ИмяВидаДоступа, Использование) Экспорт
	
	Если ИмяВидаДоступа = "ГруппыФизическихЛиц" Тогда
		Использование = Константы.ОграничиватьДоступНаУровнеЗаписейФизическиеЛица.Получить();
	КонецЕсли;
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных.
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	
КонецПроцедуры

#КонецОбласти
