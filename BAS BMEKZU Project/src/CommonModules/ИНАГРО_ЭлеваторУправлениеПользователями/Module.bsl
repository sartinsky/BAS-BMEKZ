#Область ПрограммныйИнтерфейс

// Проверяет на возможность возможность доступа к бух. части ф34.
//
//	Параметры:
//		Пользователь - СправочникСсылка.Пользователи - текущий Пользователь программы 
//
//	Возвращаемое значение:
//  	Булево       - Истина - запрет доступа
//
функция ЗапретитьДоступКБухгалтерскойЧастиФормы34(Пользователь) Экспорт
	
	ЗапретитьДоступ = ПолучитьЗначениеПраваПользователя(Пользователь, "ЗапретитьДоступКБухгалтерскойЧастиФормы34");
	
	Возврат ?(ЗапретитьДоступ = Неопределено, Ложь, ЗапретитьДоступ);
	
КонецФункции

// Проверяет на возможность возможность доступа к оперативной части ф34.
//
//	Параметры:
//		Пользователь - СправочникСсылка.Пользователи - текущий Пользователь программы 
//
//	Возвращаемое значение:
//  	Булево       - Истина - запрет доступа
//
функция ЗапретитьДоступКЭлеваторнойЧастиФормы34(Пользователь) Экспорт
	
	ЗапретитьДоступ = ПолучитьЗначениеПраваПользователя(Пользователь, "ЗапретитьДоступКЭлеваторнойЧастиФормы34");
	
	Возврат ?(ЗапретитьДоступ = Неопределено, Ложь, ЗапретитьДоступ);
	
КонецФункции

// Проверяет на возможность править вес ТТН
//
//	Параметры:
//		Пользователь  - ПользовательИнформационнойБазы 
//		ДатаДокумента - Дата 
//
//	Возвращаемое значение:
//  	Булево        - Истина - запрет доступа
//
Функция ЗапретитьАвтоматическиИзменятьВесТТН(Пользователь, ДатаДокумента) Экспорт
	
	ЗапрещеноРедактировать = ПолучитьЗначениеПраваПользователя(Пользователь, "ЗапретитьАвтоматическиИзменятьВесТТН");
	
	Если    ЗапрещеноРедактировать = Неопределено
		ИЛИ ЗапрещеноРедактировать = Ложь  Тогда
		Возврат Ложь;
	ИначеЕсли ЗапрещеноРедактировать Тогда
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Функция возвращает право редактирования веса документах ТТН и Реестры ТТН.
//
//	Параметры:
//		Пользователь - СправочникСсылка.Пользователи - текущий Пользователь программы 
//
//	Возвращаемое значение:
//  	Булево       - Истина - запрет доступа
//
Функция ЗапретитьВручнуюИзменятьВесТТН(Пользователь) Экспорт
	
	ЗапретитьИзменять = ПолучитьЗначениеПраваПользователя(Пользователь, "ЗапретитьВручнуюИзменятьВесТТН");
	
	Если    ЗапретитьИзменять = Неопределено
		ИЛИ ЗапретитьИзменять = Ложь Тогда
		Возврат Ложь;
	ИначеЕсли ЗапретитьИзменять Тогда
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Проверяет запрещено ли вводить документ без бизнес-процесса.
//
//	Параметры:
//		Пользователь - СправочникСсылка.Пользователи - текущий Пользователь программы 
//
//	Возвращаемое значение:
//  	Булево       - Истина - запрет доступа
//
функция ЗапретитьВводитьДокументыВнеБизнесПроцессов(Пользователь) Экспорт
	
	ЗапретитьВводить = ПолучитьЗначениеПраваПользователя(Пользователь, "ЗапретитьВводитьДокументыВнеБизнесПроцессов");
	
	Возврат ?(ЗапретитьВводить = Неопределено, Ложь, ЗапретитьВводить);
	
КонецФункции

// Проверяет на возможность редактировать документ.
//
//	Параметры:
//		Пользователь  - ПользовательИнформационнойБазы 
//		ДатаДокумента - Дата 
//
//	Возвращаемое значение:
//  	Булево        - Истина - запрет доступа
//
Функция ЗапретитьРедактироватьДокументы(Пользователь, ДатаДокумента) Экспорт
	
	ЗапрещеноРедактировать = ПолучитьЗначениеПраваПользователя(Пользователь, "ЗапретитьРедактироватьДокументы");
	
	КоличествоДней   = 0;
	КоличествоДней   = ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(ТекущаяДата(), "КоличествоДнейДляРедактирования", 0);
	КоличествоСекунд = КоличествоДней * 24 * 60 * 60;
	РазницаДат       = НачалоДня(ТекущаяДата()) - НачалоДня(ДатаДокумента);
	
	Если ЗапрещеноРедактировать = Неопределено ИЛИ ЗапрещеноРедактировать = Ложь Тогда
		Возврат Ложь;
	ИначеЕсли ЗапрещеноРедактировать Тогда
		Если РазницаДат > КоличествоСекунд Тогда 		
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Проверяет на возможность редактировать документ.
//
//	Параметры:
//		Пользователь  - ПользовательИнформационнойБазы 
//		ДатаДокумента - Дата 
//
//	Возвращаемое значение:
//  	Булево        - Истина - запрет доступа
//
Функция ЗапретитьРедактироватьДокументыВведенныеЧерезБизнесПроцессы(Пользователь, ДатаДокумента) Экспорт
	
	ЗапрещеноРедактировать = ПолучитьЗначениеПраваПользователя(Пользователь, "ЗапретитьРедактироватьДокументыВведенныеЧерезБизнесПроцессы");
	
	Если    ЗапрещеноРедактировать = Неопределено
		ИЛИ ЗапрещеноРедактировать = Ложь  Тогда
		Возврат Ложь;
	ИначеЕсли ЗапрещеноРедактировать Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Проверяет на возможность редактировать ТТН Не включена ли она в реестр.
//
//	Параметры:
//		Пользователь  - ПользовательИнформационнойБазы 
//		ДатаДокумента - Дата 
//
//	Возвращаемое значение:
//  	Булево        - Истина - запрет доступа
//
Функция ЗапретитьРедактироватьТТНПриНаличииРеестра(Пользователь, ДатаДокумента) Экспорт
	
	ЗапрещеноРедактировать = ПолучитьЗначениеПраваПользователя(Пользователь, "ЗапретитьРедактироватьТТНПриНаличииРеестра");
	
	КоличествоСекунд = 0;
	РазницаДат       = 1;
	
	Если ИНАГРО_Элеватор.ПолучитьПараметрУчетаЭлеватора(ТекущаяДата(), "ИнтерактивноеФормированиеРеестровТТН", Ложь) Тогда
		КоличествоСекунд = 24 * 60 * 60;
		РазницаДат       = НачалоДня(ТекущаяДата()) - НачалоДня(ДатаДокумента);		
	КонецЕсли;
	
	Если    ЗапрещеноРедактировать = Неопределено
		ИЛИ ЗапрещеноРедактировать = Ложь  Тогда
		Возврат Ложь;
	ИначеЕсли ЗапрещеноРедактировать Тогда
		Если РазницаДат > КоличествоСекунд Тогда 		
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает список значений права, установленных для пользователя.
// Если количество значений меньше количество доступных ролей, то возвращается значение по умолчанию.
//
// Параметры:
// Пользователь
//  Право               - право, для которого определяются значения
//  ЗначениеПоУмолчанию - значение по умолчанию для передаваемого права (возвращается в случае
//                        отсутствия значений в регистре сведений).
//
// Возвращаемое значение:
//  Список всех значений, установленных наборам прав (ролям), доступных пользователю.
//
Функция ПолучитьЗначениеПраваПользователя(Пользователь, Право)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", Пользователь);
	
	ПраваПользователейЭлеватор = РегистрыСведений.ИНАГРО_ПраваПользователейЭлеватор.Получить(Отбор);
		
	Возврат ПраваПользователейЭлеватор[Право];	
		
КонецФункции

#КонецОбласти


