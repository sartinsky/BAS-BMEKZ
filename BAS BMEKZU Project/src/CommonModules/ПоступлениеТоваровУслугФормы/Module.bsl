////////////////////////////////////////////////////////////////////////////////
// ПоступлениеТоваровУслугФормы: серверные процедуры и функции, вызываемые из форм
// документа "Поступление товаров и услуг".
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(Форма);
	// Конец СтандартныеПодсистемы.Печать

	// ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(Форма, ДополнительныеОтчетыИОбработкиКлиентСервер.ТипФормыОбъекта());
	// Конец ДополнительныеОтчетыИОбработки

	Если Форма.Параметры.Ключ.Пустая() Тогда
		Форма.ПодготовитьФормуНаСервере();
	КонецЕсли;
	
	Форма.ЗначениеРабочейДаты = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("РабочаяДата");
	
	// Уведомим о появлении функционала рабочей даты
	Форма.НастройкиПредупреждений = ОбщегоНазначенияБП.НастройкиПредупрежденийОбИзменениях("РабочаяДатаИзДокумента");
	
	// Показываем, если это новый документ и сама рабочая дата еще не установлена.
	Форма.НастройкиПредупреждений.РабочаяДатаИзДокумента = Форма.НастройкиПредупреждений.РабочаяДатаИзДокумента
		И Форма.Параметры.Ключ.Пустая()
		И НЕ ЗначениеЗаполнено(Форма.ЗначениеРабочейДаты);
	
	// Если форма вызвана в режиме смена вида операции - модифицируем сразу при открытии, 
	// чтобы можно было подтвердить или отказаться от изменения путем сохранения или 
	// отказа от сохранения документа.
	Если Форма.Параметры.Свойство("ИзменитьВидОперации")
		И Форма.Параметры.ИзменитьВидОперации Тогда
		
		// Не кэшируем переменную Объект, т.к. может вызываться Форма.ИзменитьРеквизиты(),
		// которая меняет Объект.
		Форма.Объект.ВидОперации = Форма.Параметры.ЗначенияЗаполнения.ВидОперации;
		ВидОперацииОбработатьИзменение(Форма);
		

		УстановитьЗаголовокФормы(Форма);
		Форма.ОбновитьИтогиНаСервере();
		Форма.УправлениеФормойНаСервере();
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения	

	Форма.ПодготовитьФормуНаСервере();

КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт

	Объект = Форма.Объект;

	УстановитьЗаголовокФормы(Форма);


	Форма.ЗаполнитьДобавленныеКолонкиТаблиц();
	

КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ


Процедура ДатаПриИзменении(Форма) Экспорт

	ДатаОбработатьИзменение(Форма);
	Форма.УправлениеФормойНаСервере();

КонецПроцедуры

Процедура ОрганизацияПриИзменении(Форма) Экспорт

	ОрганизацияОбработатьИзменение(Форма);
	
	Форма.УстановитьЗаголовкиКолонок();
	
	Форма.УправлениеФормойНаСервере();

КонецПроцедуры

Процедура СкладПриИзменении(Форма) Экспорт

	СкладОбработатьИзменение(Форма);	
	
	Форма.УправлениеФормойНаСервере();
	
КонецПроцедуры

Процедура КонтрагентПриИзменении(Форма) Экспорт

	КонтрагентОбработатьИзменение(Форма);
	Форма.УправлениеФормойНаСервере();

КонецПроцедуры

Процедура ДоговорКонтрагентаПриИзменении(Форма) Экспорт

	ДоговорКонтрагентаОбработатьИзменение(Форма);
	Форма.УправлениеФормойНаСервере();

КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Товары


Процедура ТоварыНоменклатураПриИзменении(СтрокаТабличнойЧасти, Знач ДанныеОбъекта) Экспорт

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
	
	Если ДанныеОбъекта.РассчитыватьСуммаВРознице Тогда
		СтрокаТабличнойЧасти.ЦенаВРознице = СведенияОНоменклатуре.ЦенаВРознице;
	КонецЕсли;
	
	Если ДанныеОбъекта.ЗаполнятьСтавкуНДСВРознице Тогда
		СтрокаТабличнойЧасти.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДС;
	КонецЕсли;
	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВРозницеТабЧасти(СтрокаТабличнойЧасти);
	
	Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СведенияОНоменклатуре);
		
КонецПроцедуры

Процедура ТоварыЕдиницаИзмеренияПриИзменении(СтрокаТабличнойЧасти, ПараметрыОбъекта) Экспорт

	МетаданныеДокумента = ПараметрыОбъекта.Ссылка.Метаданные();
	
	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта, "Товары", МетаданныеДокумента);
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ПараметрыОбъекта.СуммаВключаетНДС);
		
КонецПроцедуры

Процедура ОбработкаОповещенияОбработкиТабличнойЧастиТовары(Форма, Параметры) Экспорт

	Объект = Форма.Объект;

	ТаблицаОбработки = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	
	Отбор = Новый Структура("НомерСтрокиДокумента", 0);
	ТаблицаОбработки.Индексы.Добавить("НомерСтрокиДокумента");
	ДобавленныеСтроки = ТаблицаОбработки.НайтиСтроки(Отбор);
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, Склад, ЭтоКомиссия");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ЭтоКомиссия = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоКомиссия");
	
	СоответствиеСчетовУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаСпискаНоменклатуры(
		ДанныеОбъекта.Организация, ОбщегоНазначения.ВыгрузитьКолонку(ДобавленныеСтроки, "Номенклатура", Истина), ДанныеОбъекта.Склад, ДанныеОбъекта.Дата);
	
	Для Каждого СтрокаТабличнойЧасти ИЗ ДобавленныеСтроки Цикл
		
		СчетаУчета = СоответствиеСчетовУчета.Получить(СтрокаТабличнойЧасти.Номенклатура);
		
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
			ДанныеОбъекта, СтрокаТабличнойЧасти, "Товары", СчетаУчета);
		
	КонецЦикла;
	
	Объект.Товары.Загрузить(ТаблицаОбработки);
	
КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Услуги


Процедура УслугиНоменклатураПриИзменении(СтрокаТабличнойЧасти, Знач ДанныеОбъекта) Экспорт

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Содержание		= СведенияОНоменклатуре.НаименованиеПолное;
	СтрокаТабличнойЧасти.Цена			= СведенияОНоменклатуре.Цена;
	СтрокаТабличнойЧасти.СтавкаНДС		= СведенияОНоменклатуре.СтавкаНДС;
	
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
		ДанныеОбъекта, СтрокаТабличнойЧасти, "Услуги", СведенияОНоменклатуре);
		
КонецПроцедуры

// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМ ДОКУМЕНТА ПоступлениеТоваровУслуг


Процедура СвернутьТовары(Форма) Экспорт

	Объект = Форма.Объект;

	ТаблицаТоваров = Объект.Товары.Выгрузить();
	
	ТаблицаТоваров.Свернуть("СтавкаНДС, СтавкаНДСВРознице", "Сумма, СуммаНДС, Всего, СуммаВРознице");
	
	Объект.Товары.Загрузить(ТаблицаТоваров);
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "ТоварыСвернуты", Истина);

КонецПроцедуры

Процедура ОпределитьНеобходимостьРасчетаСуммыВРознице(Форма) Экспорт
	
	Объект = Форма.Объект;
	УчетВПродажныхЦенах = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "УчетВПродажныхЦенах");	
	
	// ИНАГРО++
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		Если Объект.ИНАГРО_СкладВТЧ Тогда
			РассчитыватьСуммаВРознице = (Объект.ИНАГРО_ПоступлениеВРозницу
										И УчетВПродажныхЦенах 
										И (Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия)
										И (НЕ Форма.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом));
			
			НТТ = Ложь;
			
		Иначе
			
			Объект.ИНАГРО_ПоступлениеВРозницу = Ложь;
			
			ИНАГРО_Склад = ?(Объект.ИНАГРО_ВидПоступления = Перечисления.ИНАГРО_ВидыПоступленияТоваров.ПоОрдеру, Объект.Склад.Склад, Объект.Склад); 		
			
			РассчитыватьСуммаВРознице = ((ИНАГРО_Склад.ТипСклада <> Перечисления.ТипыСкладов.ОптовыйСклад)
										И УчетВПродажныхЦенах 
										И (Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия)
										И (НЕ Форма.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом));
			
			НТТ = ИНАГРО_Склад.ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
			
		КонецЕсли;
		
		ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "РассчитыватьСуммаВРознице", РассчитыватьСуммаВРознице);
		ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "ИНАГРО_Склад",              ИНАГРО_Склад);	
		ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "НТТ",                       НТТ);
		
	Иначе
		
		ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "ТипСклада");
		Если ТипСклада <> Перечисления.ТипыСкладов.ОптовыйСклад
			И УчетВПродажныхЦенах
			И (Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия)
			И Форма.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			РассчитыватьСуммаВРознице = Истина;
		Иначе
			РассчитыватьСуммаВРознице = Ложь;
		КонецЕсли;
		
		ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "РассчитыватьСуммаВРознице", РассчитыватьСуммаВРознице);
		
		НТТ = ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка;
		ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "НТТ", НТТ);
		
	КонецЕсли;
	// ИНАГРО-- 
	                                                                                           
КонецПроцедуры

Процедура ЗаполнитьРассчитатьСуммы(Форма, 
					Знач ВалютаДоИзменения, 
					КурсДоИзменения, 
					КратностьДоИзменения, 
					ПерезаполнитьЦены = Ложь, 
					ПересчитатьЦены = Ложь, 
					ПересчитатьНДС = Ложь,
					РассчитатьНДССУчетомОшибокОкругления = Ложь) Экспорт

	Объект = Форма.Объект;

	Если ПерезаполнитьЦены Тогда
		
		СписокНоменклатуры	= ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина);
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.Услуги, "Номенклатура"));
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.ВозвратнаяТара, "Номенклатура"));
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.Оборудование, "Номенклатура"));
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(СписокНоменклатуры,
			ОбщегоНазначения.ВыгрузитьКолонку(Объект.БланкиСтрогогоУчета, "Номенклатура"));
		
		ТаблицаЦенНоменклатуры	= Ценообразование.ПолучитьТаблицуЦенНоменклатуры(
			СписокНоменклатуры,
			Объект.ТипЦен,
			Объект.Дата);
		
	ИначеЕсли ПересчитатьЦены Тогда
		Если КурсДоИзменения <> 0 И КратностьДоИзменения <> 0 Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность", КурсДоИзменения, КратностьДоИзменения);
		Иначе
			СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДоИзменения, Объект.Дата);
		КонецЕсли;
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Форма, СтрокаТаблицы, ТаблицаЦенНоменклатуры, ВалютаДоИзменения,
			СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 0);
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Объект.ОбъектыСтроительства Цикл
		ЗаполнитьРассчитатьСуммыВСтрокеПоОбъектамСтроительства(Форма, СтрокаТаблицы, ВалютаДоИзменения,
			СтруктураКурса, ПересчитатьЦены, ПересчитатьНДС, Истина, 0);
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Объект.Оборудование Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Форма, СтрокаТаблицы, ТаблицаЦенНоменклатуры, ВалютаДоИзменения,
			СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 0);
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Объект.ВозвратнаяТара Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Форма, СтрокаТаблицы, ТаблицаЦенНоменклатуры, ВалютаДоИзменения,
			СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Ложь, 0);
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Объект.Услуги Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Форма, СтрокаТаблицы, ТаблицаЦенНоменклатуры, ВалютаДоИзменения,
			СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1);
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Объект.БланкиСтрогогоУчета Цикл
		ЗаполнитьРассчитатьСуммыВСтроке(Форма, СтрокаТаблицы, ТаблицаЦенНоменклатуры, ВалютаДоИзменения,
			СтруктураКурса, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС, Истина, 1);
	КонецЦикла;	
	
	Если РассчитатьНДССУчетомОшибокОкругления Тогда
		
		// пересчет сумм НДС с учетом ошибок округления
		// соответствие для хранения погрешностей округлений
		ПогрешностиОкругления = Новый Соответствие();
		// пересчет сумм НДС с учетом ошибок округления
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.Товары, 				Объект.Ссылка, Объект.СуммаВключаетНДС, ПогрешностиОкругления, "Товары",				Строка(Объект.ВалютаДокумента));
		// пересчет сумм НДС с учетом ошибок округления
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.БланкиСтрогогоУчета,  Объект.Ссылка, Объект.СуммаВключаетНДС, ПогрешностиОкругления, "БланкиСтрогогоУчета",	Строка(Объект.ВалютаДокумента));
		// пересчет сумм НДС с учетом ошибок округления
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.Услуги, 			  	Объект.Ссылка, Объект.СуммаВключаетНДС, ПогрешностиОкругления, "Услуги",				Строка(Объект.ВалютаДокумента));
		// пересчет сумм НДС с учетом ошибок округления
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.Оборудование, 		Объект.Ссылка, Объект.СуммаВключаетНДС, ПогрешностиОкругления, "Оборудование",			Строка(Объект.ВалютаДокумента));
		// пересчет сумм НДС с учетом ошибок округления
		УчетНДСКлиентСервер.ПересчитатьНДСсУчетомПогрешностиОкругления(Объект.ОбъектыСтроительства, Объект.Ссылка, Объект.СуммаВключаетНДС, ПогрешностиОкругления, "ОбъектыСтроительства", 	Строка(Объект.ВалютаДокумента));
		
	КонецЕсли;
	
	Форма.ЗаполнитьДобавленныеКолонкиТаблиц();
	
	#Если НаКлиенте Тогда
		Форма.РассчитатьПропорциональныйНДСНаКлиенте();
	#Иначе
		Форма.РассчитатьПропорциональныйНДСНаСервере();
	#КонецЕсли
	
КонецПроцедуры
//КонецПроцедуры

Функция ОбработкаВыбораПодборВставкаИзБуфера(Форма, ВыбранноеЗначение, ИмяТаблицы) Экспорт

	ЭтоВставкаИзБуфера = ВыбранноеЗначение.Свойство("ЭтоВставкаИзБуфера");

	Объект = Форма.Объект;

	ЭтоКомиссия					= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоКомиссия");
	НТТ 						= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "НТТ");
	УчетВПродажныхЦенах 		= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "УчетВПродажныхЦенах");
	РассчитыватьСуммаВРознице 	= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "РассчитыватьСуммаВРознице");
	РазделениеПоСтавкамВРознице = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "РазделениеПоСтавкамВРознице");
	ИНАГРО_Склад                = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ИНАГРО_Склад"); // ИНАГРО

	ДобавленныеИзмененныеСтроки = Новый Структура;
	ДобавленныеИзмененныеСтроки.Вставить("Оборудование", 	Новый Массив());
	ДобавленныеИзмененныеСтроки.Вставить("Товары", 		Новый Массив());
	ДобавленныеИзмененныеСтроки.Вставить("Услуги", 		Новый Массив());
	ДобавленныеИзмененныеСтроки.Вставить("ВозвратнаяТара",Новый Массив());
	ДобавленныеИзмененныеСтроки.Вставить("БланкиСтрогогоУчета",Новый Массив());

	СписокСвойств = Неопределено;
	Если ЭтоВставкаИзБуфера Тогда
		
		ТаблицаТоваров = ВыбранноеЗначение.Данные;
		СписокСвойств = ВыбранноеЗначение.СписокСвойств;
		
	Иначе
		
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресПодобраннойНоменклатурыВХранилище);
		
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура("Дата, ВидОперации, Организация, Склад, ЭтоКомиссия, ПлательщикНДС");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	ДанныеОбъекта.ЭтоКомиссия = ЭтоКомиссия;
	ДанныеОбъекта.ПлательщикНДС = Форма.ПлательщикНДС;
	ДанныеОбъекта.Склад = ИНАГРО_Склад; // ИНАГРО
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		ДанныеОбъекта.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.НеНДС);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ВалютаВзаиморасчетов) И НЕ (Форма.ВалютаВзаиморасчетов = Форма.ВалютаРегламентированногоУчета) Тогда
		ДанныеОбъекта.Вставить("СтавкаНДС", ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
	КонецЕсли;
	
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаТоваров, "Номенклатура", Истина), ДанныеОбъекта);
	
	Если ЗначениеЗаполнено(Объект.ТипЦен) Тогда
		ЦенаВключаетНДС	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ТипЦен, "ЦенаВключаетНДС");
	Иначе
		ЦенаВключаетНДС	= Объект.СуммаВключаетНДС;
	КонецЕсли;
	
	КоличествоДобавленныхСтрок = 0;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		// При копировании всегда добавляем новые строки, если это вставка из буфера
		СтрокаТабличнойЧасти  = Неопределено;
		Если Не ЭтоВставкаИзБуфера Тогда
		
			СтруктураОтбора = Новый Структура("Номенклатура, Цена", СтрокаТовара.Номенклатура, СтрокаТовара.Цена);
			Если ИмяТаблицы = "Оборудование"
				ИЛИ ИмяТаблицы = "Товары" 
				ИЛИ ИмяТаблицы = "БланкиСтрогогоУчета" Тогда
			    СтруктураОтбора.Вставить("ЕдиницаИзмерения",СтрокаТовара.ЕдиницаИзмерения);
			КонецЕсли; 
			
			СтрокаТабличнойЧасти = НайтиСтрокуТабличнойЧасти(Форма, ИмяТаблицы, СтруктураОтбора);
			
		КонецЕсли;
			
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли - увеличиваем количество.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			Если ИмяТаблицы = "Оборудование" Тогда	
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
			ИначеЕсли ИмяТаблицы = "Товары" Тогда
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВРозницеТабЧасти(СтрокаТабличнойЧасти);
				
			ИначеЕсли ИмяТаблицы = "БланкиСтрогогоУчета" Тогда
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
			ИначеЕсли ИмяТаблицы = "Услуги" Тогда
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
			ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
				// Рассчитать реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
			КонецЕсли;
			
		Иначе
			
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТовара.Номенклатура);
			Если ЭтоВставкаИзБуфера
				И СведенияОНоменклатуре <> Неопределено
				И ЗначениеЗаполнено(СведенияОНоменклатуре.Услуга) Тогда
				
				Если СведенияОНоменклатуре.Услуга Тогда
					
					Если ИмяТаблицы = "Товары" ИЛИ ИмяТаблицы = "Оборудование" Тогда
						Продолжить;
					КонецЕсли;
					
				Иначе
					
					Если ИмяТаблицы = "Услуги" Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			СтрокаТабличнойЧасти = Объект[ИмяТаблицы].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, СписокСвойств);
			КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок + 1;
			
			Если СведенияОНоменклатуре = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВСтрокеТабличнойЧасти(
				ДанныеОбъекта, СтрокаТабличнойЧасти, ИмяТаблицы, СведенияОНоменклатуре);
				
			Если ЭтоВставкаИзБуфера
				И Найти(СписокСвойств, "СчетУчетаБУ") <> 0 
				И ЗначениеЗаполнено(СтрокаТовара["СчетУчетаБУ"]) Тогда
				
				СтрокаТабличнойЧасти.СчетУчетаБУ = СтрокаТовара.СчетУчетаБУ;
			КонецЕсли;
			
			Если ЭтоВставкаИзБуфера
				И Найти(СписокСвойств, "СчетЗатрат") <> 0 
				И ЗначениеЗаполнено(СтрокаТовара["СчетЗатрат"]) Тогда
				
				СтрокаТабличнойЧасти.СчетЗатрат = СтрокаТовара.СчетЗатрат;
				
				ИсточникИДокументОдногоВида = ВыбранноеЗначение.Свойство("ИсточникИДокументОдногоВида");
				Если ИсточникИДокументОдногоВида = Истина Тогда
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТовара, "Субконто1,Субконто2,Субконто3");
				КонецЕсли;
			КонецЕсли;
				
			Если ИмяТаблицы = "Оборудование" Тогда
				
				// Заполняем реквизиты табличной части
				СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
				
				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
			ИначеЕсли ИмяТаблицы = "Товары" Тогда
				
				// Заполняем реквизиты табличной части
				СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
				
				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				
				Если РассчитыватьСуммаВРознице Тогда
					СтрокаТабличнойЧасти.ЦенаВРознице = СведенияОНоменклатуре.ЦенаВРознице;
				КонецЕсли;
				
				Если НТТ И УчетВПродажныхЦенах И РазделениеПоСтавкамВРознице Тогда
					СтрокаТабличнойЧасти.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДС;
				КонецЕсли;
				
				
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуВРозницеТабЧасти(СтрокаТабличнойЧасти);
				
			ИначеЕсли ИмяТаблицы = "БланкиСтрогогоУчета" Тогда
				
				// Заполняем реквизиты табличной части
				СтрокаТабличнойЧасти.СтавкаНДС				= СведенияОНоменклатуре.СтавкаНДС;
				
				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				
				Если РассчитыватьСуммаВРознице Тогда
					СтрокаТабличнойЧасти.ЦенаВРознице = СведенияОНоменклатуре.ЦенаВРознице;
				КонецЕсли;
				
				Если НТТ И УчетВПродажныхЦенах И РазделениеПоСтавкамВРознице Тогда
					СтрокаТабличнойЧасти.СтавкаНДСВРознице = СведенияОНоменклатуре.СтавкаНДС;
				КонецЕсли;
				
				
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
				СтрокаТабличнойЧасти.УчитываетсяПоНоминальнойСтоимости = СтрокаТабличнойЧасти.Номенклатура.УчитываетсяПоНоминальнойСтоимости;
				СтрокаТабличнойЧасти.ЦенаНоминальная = Документы.ПоступлениеТоваровУслуг.БланкиСтрогогоУчетаПолучитьЦенуНоминальную(СтрокаТабличнойЧасти.Номенклатура, Объект.Дата);
				ПоступлениеТоваровУслугФормыКлиентСервер.БланкиСтрогоУчетаРассчитатьНоминальныеРеквизиты(СтрокаТабличнойЧасти, ДанныеОбъекта);
				
			ИначеЕсли ИмяТаблицы = "Услуги" Тогда
				
				// Заполняем реквизиты табличной части
				СтрокаТабличнойЧасти.Содержание	= ?(ЗначениеЗаполнено(СтрокаТабличнойЧасти.Содержание), 
					СтрокаТабличнойЧасти.Содержание, СведенияОНоменклатуре.НаименованиеПолное);
				СтрокаТабличнойЧасти.СтавкаНДС	= СведенияОНоменклатуре.СтавкаНДС;
				
				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Объект.СуммаВключаетНДС,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				
				// Рассчитываем реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, Объект.СуммаВключаетНДС);
				
				
			ИначеЕсли ИмяТаблицы = "ВозвратнаяТара" Тогда
				
				СтрокаТабличнойЧасти.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				СтрокаТабличнойЧасти.Цена, ЦенаВключаетНДС, Истина,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СведенияОНоменклатуре.СтавкаНДС));
				
				// Рассчитать реквизиты табличной части
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Запоминаем 
		ДобавленныеИзмененныеСтроки[ИмяТаблицы].Добавить(СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
	Если ЭтоВставкаИзБуфера Тогда
		ВыбранноеЗначение.КоличествоДобавленныхСтрок = КоличествоДобавленныхСтрок;
	КонецЕсли;	
	
	Возврат ДобавленныеИзмененныеСтроки;

КонецФункции

Процедура УстановитьЗаголовокФормы(Форма) Экспорт
	
	Объект = Форма.Объект;

	ТекстЗаголовка = НСтр("ru='Поступление товаров и услуг';uk='Надходження товарів і послуг'");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстЗаголовка = ТекстЗаголовка + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru=' %1 от %2';uk=' %1 від %2'"), Объект.Номер, Объект.Дата);
	Иначе
		ТекстЗаголовка = ТекстЗаголовка + НСтр("ru=' (создание)';uk=' (створення)'");
	КонецЕсли;
	
	Форма.Заголовок = ТекстЗаголовка + " (" + Строка(Объект.ВидОперации) + ")";

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


Процедура ВидОперацииОбработатьИзменение(Форма) Экспорт
	
	Объект = Форма.Объект;
	ЭтоКомиссия = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоКомиссия");

	Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Возврат;
	КонецЕсли;

	МассивВидовДоговоров = Форма.ПолучитьМассивВидовДоговоров();

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Если МассивВидовДоговоров.Найти(Форма.ВидДоговора) = Неопределено Тогда
			Объект.ДоговорКонтрагента = Неопределено;
			Объект.Сделка = Неопределено;
			Форма.ВидДоговора = МассивВидовДоговоров[0];
			Форма.ВедениеВзаиморасчетов = Неопределено;
		КонецЕсли;
	КонецЕсли;

	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.БланкиСтрогогоУчета
			Тогда
		Если Объект.ВозвратнаяТара.Количество() > 0 Тогда
			Объект.ВозвратнаяТара.Очистить();
		КонецЕсли;
		Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			Объект.СуммаВключаетНДС = Ложь;	
			Форма.УстановитьЗаголовкиКолонок();
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(Объект.Организация) Тогда
		БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента,
			Объект.Контрагент, Объект.Организация, МассивВидовДоговоров);
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение(Форма);
		ЭтоКомиссия = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ЭтоКомиссия");
	КонецЕсли;
	
	Форма.УстановитьПараметрыВыбораДляСчетовУчета();
		
		
	
КонецПроцедуры

Процедура ДатаОбработатьИзменение(Форма)
	
	Объект = Форма.Объект;

	Если Не ЗначениеЗаполнено(Объект.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.УстановитьФункциональныеОпцииФормы();
	
	ПересчитатьЦены   = Ложь;
	ПерезаполнитьЦены = Ложь;
	ПересчитатьНДС    = Ложь;
	
	НовыйТипЦен = Объект.ТипЦен;
	ВалютаДоИзменения 	= Объект.ВалютаДокумента;
	КурсДоИзменения 	= Объект.КурсВзаиморасчетов;
	КратностьДоИзменения= Объект.КратностьВзаиморасчетов;

	ОпределитьНеобходимостьРасчетаСуммыВРознице(Форма);
	ТоварыСвернуты 	= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ТоварыСвернуты");
	НТТ 			= ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "НТТ");
	РассчитыватьСуммаВРознице = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "РассчитыватьСуммаВРознице");
	ТоварыСвернуты	= ТоварыСвернуты И НТТ И РассчитыватьСуммаВРознице;
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "ТоварыСвернуты", ТоварыСвернуты);

	// При изменении даты предложить перезаполнить курс валюты

	Если Объект.ВалютаДокумента <> Форма.ВалютаРегламентированногоУчета И ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		СтарыйКурс      = Объект.КурсВзаиморасчетов;
		СтараяКратность = Объект.КратностьВзаиморасчетов;

		СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;

	КонецЕсли;
	
	Форма.УстановитьЗаголовкиКолонок();
	
КонецПроцедуры

Процедура ОрганизацияОбработатьИзменение(Форма)

	Объект = Форма.Объект;
	
	ПредыдущаяОрганизацияПлательщикНДС = Форма.ПлательщикНДС;

	Форма.УстановитьФункциональныеОпцииФормы();
	
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти(Форма);
	
	Для каждого СтрокаУслуги Из Объект.Услуги Цикл
		Для НомерСубконто = 1 По 3 Цикл
			Если ТипЗнч(СтрокаУслуги["Субконто"+НомерСубконто]) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
				Если НЕ ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаУслуги["Субконто"+НомерСубконто], "Владелец").Владелец = Объект.Организация Тогда
					СтрокаУслуги["Субконто"+НомерСубконто] = Неопределено	
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОпределитьНеобходимостьРасчетаСуммыВРознице(Форма);
	
	ТоварыСвернуты 			  = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ТоварыСвернуты");
	НТТ 					  = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "НТТ");
	РассчитыватьСуммаВРознице = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "РассчитыватьСуммаВРознице");
	
	ТоварыСвернуты = ТоварыСвернуты И НТТ И РассчитыватьСуммаВРознице;
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "ТоварыСвернуты", ТоварыСвернуты);
	
	
	// Если изменился статус плательщика НДС необходимо перезаполнить ставки НДС
	Если ПредыдущаяОрганизацияПлательщикНДС <> Форма.ПлательщикНДС Тогда
		ПересчитатьСуммыПриИзмененииПризнакаПлательщикНДС(Форма);
	КонецЕсли;
	
	Объект.Сделка = Неопределено;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентОбработатьИзменение(Форма);
	КонецЕсли;

КонецПроцедуры

Процедура СкладОбработатьИзменение(Форма)
	
	Объект = Форма.Объект;

	ОпределитьНеобходимостьРасчетаСуммыВРознице(Форма);
	
	
	ЗаполнитьСчетаУчетаВТабличнойЧасти(Форма);
	
КонецПроцедуры

Процедура КонтрагентОбработатьИзменение(Форма)

	Объект = Форма.Объект;

	МассивВидовДоговоров = Форма.ПолучитьМассивВидовДоговоров();

	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(Объект.ДоговорКонтрагента,
		Объект.Контрагент, Объект.Организация, МассивВидовДоговоров);

	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаОбработатьИзменение(Форма);
	КонецЕсли;

КонецПроцедуры

Процедура ДоговорКонтрагентаОбработатьИзменение(Форма)
	
	Объект = Форма.Объект;

	ВалютаДоИзменения 	= Объект.ВалютаДокумента;
	КурсДоИзменения 	= Объект.КурсВзаиморасчетов;
	КратностьДоИзменения= Объект.КратностьВзаиморасчетов;
	
	ПерезаполнитьЦены = Ложь;
	ПересчитатьЦены   = Ложь;
	ПересчитатьНДС    = Ложь;
	
	ДоговорУказан 	  = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.ДоговорКонтрагента,
		"ВалютаВзаиморасчетов, Владелец, ТипЦен, ВидДоговора, ВедениеВзаиморасчетов");
	
	ЭтоКомиссия 	     		= ДоговорУказан И РеквизитыДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "ЭтоКомиссия", ЭтоКомиссия);
		
	Если НЕ ДоговорУказан ИЛИ НЕ (РеквизитыДоговора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам) Тогда
		Объект.Сделка = Неопределено;
	КонецЕсли;
	Если ДоговорУказан Тогда
		Форма.ВалютаВзаиморасчетов   = РеквизитыДоговора.ВалютаВзаиморасчетов;
		Форма.ВедениеВзаиморасчетов  = РеквизитыДоговора.ВедениеВзаиморасчетов;

		Объект.ВалютаДокумента 		= Форма.ВалютаВзаиморасчетов;
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = РеквизитыДоговора.Владелец;
		КонецЕсли;
	Иначе
		Объект.ВалютаДокумента = Форма.ВалютаРегламентированногоУчета;
		Форма.ВедениеВзаиморасчетов  = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПустаяСсылка");
	КонецЕсли;
	
	Форма.УстановитьФункциональныеОпцииФормы();	
	
	Если ВалютаДоИзменения <> Объект.ВалютаДокумента Тогда
		СтруктураКурсаДокумента        = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;
	КонецЕсли;
	
	НовыйТипЦен = Объект.ТипЦен;
	Если ДоговорУказан И ЗначениеЗаполнено(РеквизитыДоговора.ТипЦен) Тогда
		НовыйТипЦен = РеквизитыДоговора.ТипЦен;
	КонецЕсли;
	
	ЕстьСтроки = ЕстьСтрокиВТабличныхЧастях(Форма);
	
	Если Объект.ВалютаДокумента <> ВалютаДоИзменения
		ИЛИ КурсДоИзменения <> Объект.КурсВзаиморасчетов 
		ИЛИ Объект.ТипЦен <> НовыйТипЦен Тогда
		ПересчитатьЦены = ЕстьСтроки;
	КонецЕсли;
	
	ПрежнийСуммаВключаетНДС = Объект.СуммаВключаетНДС;
	Если ДоговорУказан И ЗначениеЗаполнено(НовыйТипЦен) Тогда
		Объект.ТипЦен 			= НовыйТипЦен;
		Объект.СуммаВключаетНДС = НовыйТипЦен.ЦенаВключаетНДС;
		ПересчитатьНДС 			= Объект.СуммаВключаетНДС <> ПрежнийСуммаВключаетНДС;
	КонецЕсли;
	
	ОпределитьНеобходимостьРасчетаСуммыВРознице(Форма);
	
	ТоварыСвернуты			  = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ТоварыСвернуты");
	НТТ 					  = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "НТТ");
	РассчитыватьСуммаВРознице = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "РассчитыватьСуммаВРознице");
	ИНАГРО_Склад              = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "ИНАГРО_Склад"); // ИНАГРО
	
	Если НТТ И РассчитыватьСуммаВРознице И НЕ ТоварыСвернуты И НЕ Объект.ИНАГРО_СкладВТЧ Тогда // ИНАГРО
		Для каждого СтрокаТаблицы Из Объект.Товары Цикл
			Если СтрокаТаблицы.ЦенаВРознице = 0 Тогда
				СтрокаТаблицы.ЦенаВРознице = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТаблицы.Номенклатура,    
					ИНАГРО_Склад.ТипЦенРозничнойТорговли, Объект.Дата, Форма.ВалютаРегламентированногоУчета, 1, 1) * СтрокаТаблицы.Коэффициент;
				СтрокаТаблицы.СуммаВРознице = СтрокаТаблицы.Количество * СтрокаТаблицы.ЦенаВРознице;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТоварыСвернуты = ТоварыСвернуты И НТТ И РассчитыватьСуммаВРознице;
	ПоступлениеТоваровУслугФормыКлиентСервер.УстановитьРеквизитФормы(Форма, "ТоварыСвернуты", ТоварыСвернуты);
	
	Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаРасчетов(Объект);
	Если ДоговорУказан Тогда
		Форма.УстановитьПараметрыВыбораДляСчетовУчета();
	КонецЕсли;
	
	
	
	Если ЕстьСтроки И (ПерезаполнитьЦены ИЛИ ПересчитатьЦены ИЛИ ПересчитатьНДС) Тогда
		ЗаполнитьРассчитатьСуммы(Форма, ВалютаДоИзменения, КурсДоИзменения, КратностьДоИзменения, ПерезаполнитьЦены, ПересчитатьЦены, ПересчитатьНДС);
	ИначеЕсли ПересчитатьНДС Тогда
		Форма.УстановитьЗаголовкиКолонок();
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура ЗаполнитьРассчитатьСуммыВСтроке(Форма, 
					СтрокаТаблицы, 
					ТаблицаЦенНоменклатуры, 
					ВалютаПередИзменением, 
					СтруктураКурса, 
					ПерезаполнитьЦены, 
					ПересчитатьЦены, 
					ПересчитатьНДС, 
					ЕстьНДС, 
					ЗначениеПустогоКоличества)

	Объект = Форма.Объект;

	Если ПерезаполнитьЦены Тогда
		
		НайденнаяСтрока	= ТаблицаЦенНоменклатуры.Найти(СтрокаТаблицы.Номенклатура, "Номенклатура");
		Если НайденнаяСтрока <> Неопределено Тогда
			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НайденнаяСтрока.Цена, НайденнаяСтрока.Валюта, Объект.ВалютаДокумента, НайденнаяСтрока.Курс,
				Объект.КурсВзаиморасчетов, НайденнаяСтрока.Кратность, Объект.КратностьВзаиморасчетов);
		Иначе
			Цена = 0;
		КонецЕсли;
		
		// Признак того, что цена включает НДС, хранится в реквизите ЦенаВключаетНДС типа цен
		ЦенаВключаетНДС = ?(ЗначениеЗаполнено(Объект.ТипЦен), Объект.ТипЦен.ЦенаВключаетНДС, Ложь);
		
	Иначе
		Если ПересчитатьЦены Тогда

			Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТаблицы.Цена, ВалютаПередИзменением, Объект.ВалютаДокумента, СтруктураКурса.Курс,
				Объект.КурсВзаиморасчетов, СтруктураКурса.Кратность, Объект.КратностьВзаиморасчетов);

		Иначе
			Цена = СтрокаТаблицы.Цена;
		КонецЕсли;
		// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
		ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);
	КонецЕсли;

	Если ЕстьНДС Тогда
		Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, ЦенаВключаетНДС,
			Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));

		// У объектов строительства нет поля Цена
		Если СтрокаТаблицы.Свойство("Цена") <> Неопределено Тогда
			СтрокаТаблицы.Цена = Цена;
		КонецЕсли;

		СтрокаТаблицы.Сумма = Цена * ?(СтрокаТаблицы.Количество = 0, ЗначениеПустогоКоличества, СтрокаТаблицы.Количество);

		СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(СтрокаТаблицы.Сумма,
			Объект.СуммаВключаетНДС, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
	Иначе
		// У объектов строительства нет поля Цена
		Если СтрокаТаблицы.Свойство("Цена") <> Неопределено Тогда
			СтрокаТаблицы.Цена = Цена;
		КонецЕсли;
		СтрокаТаблицы.Сумма = Цена * ?(СтрокаТаблицы.Количество =0, ЗначениеПустогоКоличества, СтрокаТаблицы.Количество);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьРассчитатьСуммыВСтрокеПоОбъектамСтроительства(Форма, 
					СтрокаТаблицы, 
					ВалютаПередИзменением, 
					СтруктураКурса, 
					ПересчитатьЦены, 
					ПересчитатьНДС, 
					ЕстьНДС, 
					ЗначениеПустогоКоличества)

	Объект = Форма.Объект;

	Если ПересчитатьЦены Тогда
		Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаТаблицы.Сумма,
			ВалютаПередИзменением,
			Объект.ВалютаДокумента,
			СтруктураКурса.Курс,
			Объект.КурсВзаиморасчетов,
			СтруктураКурса.Кратность,
			Объект.КратностьВзаиморасчетов);
	Иначе
		Сумма = СтрокаТаблицы.Сумма;
	КонецЕсли;

	// Признак того, что цена включает НДС, хранится в реквизите СуммаВключаетНДС документа
	ЦенаВключаетНДС = ?(ПересчитатьНДС, НЕ Объект.СуммаВключаетНДС, Объект.СуммаВключаетНДС);

	Если ЕстьНДС Тогда
		Сумма = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(
			Сумма,
			ЦенаВключаетНДС,
			Объект.СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));

		СтрокаТаблицы.Сумма = Сумма;

		СтрокаТаблицы.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
			СтрокаТаблицы.Сумма,
			Объект.СуммаВключаетНДС,
			УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС));
	Иначе
		СтрокаТаблицы.Сумма = Сумма;
	КонецЕсли;

КонецПроцедуры

Функция ЕстьСтрокиВТабличныхЧастях(Форма)

	Объект = Форма.Объект;

	Если Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия Тогда
		Возврат (Объект.Товары.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0 
			ИЛИ Объект.ВозвратнаяТара.Количество() > 0 );

	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.БланкиСтрогогоУчета Тогда
		Возврат (Объект.Товары.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0   ИЛИ Объект.БланкиСтрогогоУчета.Количество() > 0
			ИЛИ Объект.ВозвратнаяТара.Количество() > 0 );


	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		Возврат (Объект.Товары.Количество() > 0);

	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		Возврат (Объект.Оборудование.Количество() > 0 ИЛИ Объект.Товары.Количество() > 0 
			ИЛИ Объект.Услуги.Количество() > 0 ИЛИ Объект.ВозвратнаяТара.Количество() > 0);

	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства Тогда
		Возврат (Объект.ОбъектыСтроительства.Количество() > 0 ИЛИ Объект.Услуги.Количество() > 0);

	Иначе
		Возврат Ложь;

	КонецЕсли;

КонецФункции

Процедура ЗаполнитьСчетаУчетаВТабличнойЧасти(Форма, ИмяТабличнойЧасти = "")
	
	Объект = Форма.Объект;
	
	РассчитыватьСуммаВРознице = ПоступлениеТоваровУслугФормыКлиентСервер.ПолучитьРеквизитФормы(Форма, "РассчитыватьСуммаВРознице");

	Если РассчитыватьСуммаВРознице Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Оборудование" Тогда
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Оборудование");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Товары" Тогда
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Товары");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "Услуги" Тогда
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "Услуги");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "ВозвратнаяТара");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "БланкиСтрогогоУчета" Тогда
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(Объект, "БланкиСтрогогоУчета");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТабличнойЧасти) ИЛИ ИмяТабличнойЧасти = "ОбъектыСтроительства" Тогда
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВТабЧастиПоОбъектамСтроительства(Объект);
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиСтрокуТабличнойЧасти(Форма, ИмяТабличнойЧасти, СтруктураОтбора)

	Объект = Форма.Объект;

	СтрокаТабличнойЧасти = Неопределено;

	МассивНайденныхСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции

Процедура ПересчитатьСуммыПриИзмененииПризнакаПлательщикНДС(Форма)
	
	Объект = Форма.Объект;
	
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	ПараметрыОбъекта = Новый Структура("Организация, Дата, ПлательщикНДС", Объект.Организация, Объект.Дата, Форма.ПлательщикНДС);

	Если Не Форма.ПлательщикНДС Тогда
		//организацию-плательщика поменяли на неплательщика, сумма не включала НДС - надо пересчитать;
		ПересчитатьНДС = Не Объект.СуммаВключаетНДС;			
		
		Объект.СуммаВключаетНДС = Истина;
	Иначе
		//организацию-неплательщика поменяли на плательщика;
		ПересчитатьНДС = Ложь;
		
		//заполним ставки до пересчета цены
		Для Каждого Строка Из Объект.Товары Цикл
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(Строка, ПараметрыОбъекта, "Товары", МетаданныеДокумента);
		КонецЦикла;
		Для Каждого Строка Из Объект.Услуги Цикл
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(Строка, ПараметрыОбъекта, "Услуги", МетаданныеДокумента);
		КонецЦикла;

	КонецЕсли;
			
	ЗаполнитьРассчитатьСуммы(
		Форма, 
		Объект.ВалютаДокумента, 
		Объект.КурсВзаиморасчетов, 
		Объект.КратностьВзаиморасчетов,
		Ложь, // ПерезаполнитьЦены
		Ложь, // ПересчитатьЦены
		ПересчитатьНДС
	);
	
	Если Не Форма.ПлательщикНДС Тогда
		//организацию-плательщика поменяли на неплательщика 
		
		//заполним ставки после пересчета цены
		// и пересчитаем зависимые от ставки колонки СуммаНДС, Всего
		Для Каждого Строка Из Объект.Товары Цикл
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(Строка, ПараметрыОбъекта, "Товары", МетаданныеДокумента);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(Строка, Объект.СуммаВключаетНДС);
		КонецЦикла;
		Для Каждого Строка Из Объект.Услуги Цикл
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(Строка, ПараметрыОбъекта, "Услуги", МетаданныеДокумента);
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(Строка, Объект.СуммаВключаетНДС);
		КонецЦикла;
	
		Форма.ЗаполнитьДобавленныеКолонкиТаблиц();
	
	КонецЕсли;
	
КонецПроцедуры
