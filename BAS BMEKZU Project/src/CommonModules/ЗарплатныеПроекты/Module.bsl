////////////////////////////////////////////////////////////////////////////////
// Подсистема "Зарплатные проекты"
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Получает первый зарплатный проект по организации
//
// Параметры:
//		Организация - ссылка на организацию
//		ПолучитьЕслиЕдинственный - Если (Истина), то проверяется, чтобы зарплатный проект был единственным в организации,
//				Если зарплатный проект не единственный, тогда возвращается пустая ссылка
//				Иначе (Ложь) проверка не делается и возвращается первый
//
// Возвращаемое значение:
//		ЗарплатныйПроект
//		Если зарплатный проект не найден - возвращается пустая ссылка
//
Функция ЗарплатныйПроектПоОрганизации(Организация, ПолучитьЕслиЕдинственный = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(ЗарплатныеПроекты.Ссылка) КАК Количество
	|ПОМЕСТИТЬ ВТЗарплатныеПроекты
	|ИЗ
	|	Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|ГДЕ
	|	ЗарплатныеПроекты.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЗарплатныеПроекты.Ссылка КАК ЗарплатныйПроект,
	|	ВТЗарплатныеПроекты.Количество КАК Количество
	|ИЗ
	|	Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗарплатныеПроекты КАК ВТЗарплатныеПроекты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЗарплатныеПроекты.Организация = &Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если ПолучитьЕслиЕдинственный Тогда
			Если Выборка.Количество = 1 Тогда
				Возврат Выборка.ЗарплатныйПроект;
			Иначе
				Возврат Справочники.ЗарплатныеПроекты.ПустаяСсылка();
			КонецЕсли;
		Иначе
			Возврат Выборка.ЗарплатныйПроект;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Справочники.ЗарплатныеПроекты.ПустаяСсылка();
	
КонецФункции

// Получает первый зарплатный проект по организации и банку
//
// Параметры:
//		Организация - ссылка на организацию,
//		Банк - ссылка на банк,
//
// Возвращаемое значение:
//		ЗарплатныйПроект
//		Если зарплатный проект не найден - возвращается пустая ссылка
//
Функция ЗарплатныйПроектПоОрганизацииИБанку(Организация, Банк) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Банк", Банк);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗарплатныеПроекты.Ссылка КАК ЗарплатныйПроект
	|ИЗ
	|	Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|ГДЕ
	|	ЗарплатныеПроекты.Организация = &Организация
	|	И ЗарплатныеПроекты.Банк = &Банк";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.ЗарплатныйПроект;
		
	КонецЕсли;
	
	Возврат Справочники.ЗарплатныеПроекты.ПустаяСсылка();
	
КонецФункции

// Создает новый зарплатный проект, используя наименование банка
//
// Параметры:
//		Банк - банк, используя наименование которого создается зарплатный проект
//
// Возвращаемое значение:
//		Зарплатный проект - ссылка на созданный зарплатный проект
//		Или пустая ссылка, если зарплатный проект не создан
//
Функция НовыйЗарплатныйПроектПоОрганизацииИБанку(Организация, Банк) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) ИЛИ НЕ ЗначениеЗаполнено(Банк) Тогда
		Возврат Справочники.ЗарплатныеПроекты.ПустаяСсылка();
	КонецЕсли;
	
	ЗарплатныйПроектОбъект = Справочники.ЗарплатныеПроекты.СоздатьЭлемент();
	ЗарплатныйПроектОбъект.Наименование = Банк.Наименование;
	ЗарплатныйПроектОбъект.Организация = Организация;
	ЗарплатныйПроектОбъект.Банк = Банк;
	
	ЗарплатныйПроектОбъект.Записать();
	
	Возврат ЗарплатныйПроектОбъект.Ссылка;
	
КонецФункции

// Возвращает структуру с описанием временной таблицы для процедуры СоздатьПоВременнойТаблицеВТЛицевыеСчетаСотрудников
//
// Параметры:
//		МенеджерВременныхТаблиц
//		ИмяВременнойТаблицы - имя временной таблицы
//
// Возвращаемое значение:
//		Структура с полями:
//			МенеджерВременныхТаблиц
//			ИмяВременнойТаблицы - имя временной таблицы с сотрудниками
//
Функция ОписательВременныхТаблицДляСоздатьПоВременнойТаблицеВТЛицевыеСчетаСотрудников(МенеджерВременныхТаблиц, ИмяВременнойТаблицы) Экспорт
	
	ОписательВременныхТаблиц = Новый Структура;
	ОписательВременныхТаблиц.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательВременныхТаблиц.Вставить("ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	
	Возврат ОписательВременныхТаблиц;
	
КонецФункции

Процедура СоздатьПоВременнойТаблицеВТЛицевыеСчетаСотрудников(ОписательВременныхТаблиц, ТолькоРазрешенные, Организация, ДатаПолученияДанных = Неопределено, ЗарплатныйПроект = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаПолученияДанных", ?(ДатаПолученияДанных = Неопределено, ТекущаяДатаСеанса(), ДатаПолученияДанных));
	Запрос.УстановитьПараметр("ЗарплатныйПроект", ?(ЗарплатныйПроект = Неопределено, Справочники.ЗарплатныеПроекты.ПустаяСсылка(), ЗарплатныйПроект));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Период КАК МесяцОткрытия,
	|	СписокСотрудников.Сотрудник КАК Сотрудник,
	|	СписокСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ЗарплатныйПроект КАК ЗарплатныйПроект,
	|	ЗарплатныеПроекты.Банк КАК Банк,
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.НомерЛицевогоСчета КАК НомерЛицевогоСчета,
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Документ КАК Документ
	|ПОМЕСТИТЬ ВТЛицевыеСчетаСотрудников
	|ИЗ
	|	РегистрСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.СрезПоследних(&ДатаПолученияДанных, ) КАК ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ОписательВременныхТаблиц.ИмяВременнойТаблицы + " КАК СписокСотрудников
	|		ПО ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ФизическоеЛицо = СписокСотрудников.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|		ПО ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ЗарплатныйПроект = ЗарплатныеПроекты.Ссылка
	|ГДЕ
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Организация = &Организация
	|	И (ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ЗарплатныйПроект = &ЗарплатныйПроект
	|			ИЛИ &ЗарплатныйПроект = ЗНАЧЕНИЕ(Справочник.ЗарплатныеПроекты.ПустаяСсылка))";
	
	Если НЕ ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует временную таблицу ВТЛицевыеСчетаСотрудников сотрудников с номерами лицевых счетов 
// по переданной организации и списку сотрудников
//
// Параметры:
//		МенеджерВременныхТаблиц
//		ТолькоРазрешенные - Булево
//		СписокСотрудников - список сотрудников, по которым нужно получить лицевые счета
//		Организация - организация, по которой нужно получить лицевые счета
//		ДатаПолученияДанных - дата на которую необходимо получить данные о номерах лицевых счетов,
//						если дату не указывать, данные будут получены на текущую дату.
//		ЗарплатныйПроект - зарплатный проект, если не задан, то по всем зарплатным проектам
//
// Создает в МенеджерВременныхТаблиц временную таблицу с именем ВТЛицевыеСчетаСотрудников.
// Возвращаемое значение:
//		Таблица значений с колонками, описанными в процедуре СоздатьПоВременнойТаблицеВТЛицевыеСчетаСотрудников
//
Процедура СоздатьВТЛицевыеСчетаСотрудников(МенеджерВременныхТаблиц, ТолькоРазрешенные, СписокСотрудников, Организация, ДатаПолученияДанных = Неопределено, ЗарплатныйПроект = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТСписокСотрудников
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&СписокСотрудников)";
	
	Если НЕ ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	
	Запрос.Выполнить();
	
	СоздатьПоВременнойТаблицеВТЛицевыеСчетаСотрудников(
			ОписательВременныхТаблицДляСоздатьПоВременнойТаблицеВТЛицевыеСчетаСотрудников(
					МенеджерВременныхТаблиц, "ВТСписокСотрудников"), ТолькоРазрешенные, Организация, ДатаПолученияДанных, ЗарплатныйПроект);
	
	Запрос.Текст = "УНИЧТОЖИТЬ ВТСписокСотрудников";
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует  таблицу значений физлиц с номерами лицевых счетов 
// по переданной организации и списку физических лиц
//
// Параметры:
//		ТолькоРазрешенные - Булево
//		СписокФизическихЛиц - список сотрудников, по которым нужно получить лицевые счета
//		Организация - организация, по которой нужно получить лицевые счета
//		ДатаПолученияДанных - дата на которую необходимо получить данные о номерах лицевых счетов,
//						если дату не указывать, данные будут получены на текущую дату.
//		ЗарплатныйПроект - зарплатный проект, если не задан, то по всем зарплатным проектам
//
// Возвращаемое значение:
//		Таблица значений с колонками
//
Функция ЛицевыеСчетаСотрудниковПоФизлицам(МассивФизическихЛиц, ТолькоРазрешенные, Организация, ДатаПолученияДанных = Неопределено, ЗарплатныйПроект = Неопределено) Экспорт	
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("МассивФизическихЛиц", МассивФизическихЛиц);
	Запрос.УстановитьПараметр("ДатаПолученияДанных", ?(ДатаПолученияДанных = Неопределено, ТекущаяДатаСеанса(), ДатаПолученияДанных));
	Запрос.УстановитьПараметр("ЗарплатныйПроект", ?(ЗарплатныйПроект = Неопределено, Справочники.ЗарплатныеПроекты.ПустаяСсылка(), ЗарплатныйПроект));
	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Период КАК МесяцОткрытия,
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ЗарплатныйПроект КАК ЗарплатныйПроект,
	|	ЗарплатныеПроекты.Банк КАК Банк,
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.НомерЛицевогоСчета КАК НомерЛицевогоСчета,
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.СрезПоследних(&ДатаПолученияДанных, ) КАК ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|		ПО ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ЗарплатныйПроект = ЗарплатныеПроекты.Ссылка
	|ГДЕ
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Организация = &Организация
	|	И (ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ЗарплатныйПроект = &ЗарплатныйПроект
	|			ИЛИ &ЗарплатныйПроект = ЗНАЧЕНИЕ(Справочник.ЗарплатныеПроекты.ПустаяСсылка))
	|	И ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ФизическоеЛицо В(&МассивФизическихЛиц)";
	
	Если НЕ ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Возвращает таблицу значений с сотрудниками и их лицевыми счетами
//
// Параметры:
//		СписокСотрудников - список сотрудников, по которым нужно получить лицевые счета
//		ТолькоРазрешенные - Булево
//		Организация - организация, по которой нужно получить лицевые счета
//		ДатаПолученияДанных - дата на которую необходимо получить данные о номерах лицевых счетов,
//						если дату не указывать, данные будут получены на текущую дату.
//		ЗарплатныйПроект - зарплатный проект, если не задан, то по всем зарплатным проектам
//
// Возвращаемое значение:
//		Таблица значений с колонками, описанными в процедуре СоздатьПоВременнойТаблицеВТЛицевыеСчетаСотрудников
//
Функция ЛицевыеСчетаСотрудников(СписокСотрудников, ТолькоРазрешенные, Организация, ДатаПолученияДанных = Неопределено, ЗарплатныйПроект = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьВТЛицевыеСчетаСотрудников(Запрос.МенеджерВременныхТаблиц, ТолькоРазрешенные, СписокСотрудников, Организация, ДатаПолученияДанных, ЗарплатныйПроект);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	ВТЛицевыеСчетаСотрудников КАК ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает структуру с описанием временной таблицы для процедуры СоздатьПоВременнойТаблицеВТОплачиваемыеДанныеВедомостей
//
// Параметры:
//		МенеджерВременныхТаблиц
//		ИмяВременнойТаблицы - имя временной таблицы
//
// Возвращаемое значение:
//		Структура с полями:
//			МенеджерВременныхТаблиц
//			ИмяВременнойТаблицы - имя временной таблицы с сотрудниками
//
Функция ОписательВременныхТаблицДляСоздатьПоВременнойТаблицеВТОплачиваемыеДанныеВедомостей(МенеджерВременныхТаблиц, ИмяВременнойТаблицы) Экспорт
	
	ОписательВременныхТаблиц = Новый Структура;
	ОписательВременныхТаблиц.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ОписательВременныхТаблиц.Вставить("ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	
	Возврат ОписательВременныхТаблиц;
	
КонецФункции


// Процедура исключает ведомости, по которым оплата регистрируется подсистемой "Обмен с банками", 
// из переданной временной таблицы
//
// Параметры
//		МенеджерВременныхТаблиц - содержит временную таблицу, имя которой указывается в "ОписательВременныхТаблиц"
//			Временная таблица может быть создана с помощью метода ВзаиморасчетыССотрудниками.СоздатьВТДанныеВедомостейДляОплатыДокументом,
//			с данными об оплате вида:
//					Ведомость (ДокументСсылка)
//					ФизическоеЛицо (СправочникСсылка.ФизическиеЛица)
//					СуммаКВыплате
//
Процедура СоздатьПоВременнойТаблицеВТОплачиваемыеДанныеВедомостей(ОписательВременныхТаблиц, ТолькоРазрешенные = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ОписательВременныхТаблиц.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеВедомостейДляОплаты.Ведомость КАК Ведомость
	|ПОМЕСТИТЬ ВТИсключаемыеВедомости
	|ИЗ
	|	" + ОписательВременныхТаблиц.ИмяВременнойТаблицы + " КАК ДанныеВедомостейДляОплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|		ПО ДанныеВедомостейДляОплаты.Ведомость = ВедомостьНаВыплатуЗарплатыВБанк.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|		ПО (ВедомостьНаВыплатуЗарплатыВБанк.ЗарплатныйПроект = ЗарплатныеПроекты.Ссылка)
	|			И (ЗарплатныеПроекты.ИспользоватьЭлектронныйДокументооборотСБанком)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеВедомостейДляОплаты.Ведомость КАК Ведомость,
	|	ДанныеВедомостейДляОплаты.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ДанныеВедомостейДляОплаты.СуммаКВыплате КАК СуммаВыплаты
	|ПОМЕСТИТЬ ВТОплачиваемыеДанныеВедомостей
	|ИЗ
	|	" + ОписательВременныхТаблиц.ИмяВременнойТаблицы + " КАК ДанныеВедомостейДляОплаты
	|ГДЕ
	|	НЕ ДанныеВедомостейДляОплаты.Ведомость В
	|				(ВЫБРАТЬ
	|					ИсключаемыеВедомости.Ведомость
	|				ИЗ
	|					ВТИсключаемыеВедомости КАК ИсключаемыеВедомости)";
	
	Если НЕ ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Возвращает структуру пояснения для номера лицевого счета
//
// Параметры:
//		ФизическоеЛицо
//		ЗарплатныйПроект
//		НомерЛицевогоСчета - Строка, проверяемый номер лицевого счета
//		ЛицевыеСчета - Структура лицевого счета
//		ЛицевыеСчетаПрежняя - Структура лицевого счета до исправления
//
// Возвращаемое значение:
//		Структура:
//			СообщенияПроверки - Строка, текст сообщения проверки номера лицевого счета, показывается при нажатии на гиперссылку надписи
//			Картинка - картинка, может принимать значения "Предупреждение" и "ОперацияВыполненаУспешно"
//			ТекстНадписи - Строка, текст, который будет показан пользователю на форме
//			ЭлементЦветТекста - Цвет текста надписи
//			ВведенДокументом - Булево, Истина, если лицевой счет введен документом подтверждения, иначе Ложь
//
Функция СтруктураПоясненияКНомеруЛицевогоСчета(ФизическоеЛицо, ЗарплатныйПроект, НомерЛицевогоСчета, ЛицевыеСчета, ЛицевыеСчетаПрежняя) Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить(
		"СообщениеПроверки",
		СообщениеПроверкиНомераЛицевогоСчетаНаСоответствиеТребованиям(ФизическоеЛицо, ЗарплатныйПроект, НомерЛицевогоСчета));
	
	СтруктураЛицевыеСчета = Новый Структура;
	Для Каждого ЭлементСтруктуры Из ЛицевыеСчетаПрежняя Цикл
		СтруктураЛицевыеСчета.Вставить(ЭлементСтруктуры.Ключ, ЛицевыеСчета[ЭлементСтруктуры.Ключ]);
	КонецЦикла;
	СтруктураЛицевыеСчета = Новый ФиксированнаяСтруктура(СтруктураЛицевыеСчета);
	
	РезультатПроверки.Вставить(
		"ЗначениеЛСИзменено",
		Не ОбщегоНазначения.КоллекцииИдентичны(
			ЛицевыеСчетаПрежняя,
			СтруктураЛицевыеСчета));
	
	ЛСУказанПравильно = ?(ПустаяСтрока(РезультатПроверки.СообщениеПроверки), Истина, Ложь);
	
	СообщенияПроверки = ?(ПустаяСтрока(РезультатПроверки.СообщениеПроверки),
			НСтр("ru='Номер лицевого счета указан правильно';uk='Номер особового рахунку вказаний правильно'"), РезультатПроверки.СообщениеПроверки);
	
	ВведенДокументом = Ложь;
	Если ЛСУказанПравильно Или (Не РезультатПроверки.ЗначениеЛСИзменено И ЗначениеЗаполнено(ЛицевыеСчета.Документ)) Тогда
		Картинка = БиблиотекаКартинок.ОперацияВыполненаУспешно;
		Если Не РезультатПроверки.ЗначениеЛСИзменено И ЗначениеЗаполнено(ЛицевыеСчета.Документ) Тогда
			ТекстНадписи  = НСтр("ru='Номер лицевого счета введен документом';uk='Номер особового рахунку введений документом'");
			ВведенДокументом = Истина;
		Иначе
			ТекстНадписи  = НСтр("ru='';uk=''");
		КонецЕсли;
		ЭлементЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
	Иначе
		Картинка = БиблиотекаКартинок.Предупреждение;
		ТекстНадписи  = НСтр("ru='Ошибка';uk='Помилка'");
		ЭлементЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
	КонецЕсли;
	
	СтруктураПояснения = Новый Структура;
	СтруктураПояснения.Вставить("СообщенияПроверки", СообщенияПроверки);
	СтруктураПояснения.Вставить("Картинка", Картинка);
	СтруктураПояснения.Вставить("ТекстНадписи", ТекстНадписи);
	СтруктураПояснения.Вставить("ЭлементЦветТекста", ЭлементЦветТекста);
	СтруктураПояснения.Вставить("ВведенДокументом", ВведенДокументом);
	
	Возврат СтруктураПояснения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает таблицу значений с физическими лицами по номерам лицевых счетов
//
// Параметры:
//		ЛицевыеСчета - Таблица значений с номерами лицевых счетов, для которых требуется найти физических лиц
//				НомерЛицевогоСчета - строка, номер лицевого счета
//		Организация - Организация, по которой отбираются лицевые счета
//		ЗарплатныйПроект - Зарплатный проект, по которому отбираются лицевые счета
//
// Возвращаемое значение:
//		Таблица значений
//			НомерЛицевогоСчета - строка, номер лицевого счета
//			ФизическоеЛицо - ссылка на физическое лицо, которому принадлежит номер лицевого счета
//
Функция ФизическиеЛицаПоНомерамЛицевыхСчетов(ЛицевыеСчета, Организация, ЗарплатныйПроект = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ЛицевыеСчета", ЛицевыеСчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ЗарплатныйПроект", ?(ЗарплатныйПроект = Неопределено,
					Справочники.ЗарплатныеПроекты.ПустаяСсылка(), ЗарплатныйПроект));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЛицевыеСчета.НомерЛицевогоСчета
	|ПОМЕСТИТЬ ВТЛицевыеСчета
	|ИЗ
	|	&ЛицевыеСчета КАК ЛицевыеСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛицевыеСчета.НомерЛицевогоСчета КАК НомерЛицевогоСчета,
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТЛицевыеСчета КАК ЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам КАК ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам
	|		ПО (ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Организация = &Организация)
	|			И ЛицевыеСчета.НомерЛицевогоСчета = ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.НомерЛицевогоСчета
	|			И (ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ЗарплатныйПроект = &ЗарплатныйПроект
	|				ИЛИ &ЗарплатныйПроект = ЗНАЧЕНИЕ(Справочник.ЗарплатныеПроекты.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛицевыеСчета.НомерЛицевогоСчета,
	|	ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ФизическоеЛицо";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает таблицу значений с физическими лицами по документам удостоверяющим личность
//
// Параметры
//		ДанныеДокументов - таблица значений, в которой находятся данные документов удостоверяющих личность
//				ДокументВид - наименование вида документа
//				КодВидаДокумента - код МВД документа
//				ДокументСерия - серия документа
//				ДокументНомер - номер документа
//
// Возвращаемое значение:
//		Таблица значений
//			ДокументВид - наименование вида документа
//			КодВидаДокумента - код МВД документа
//			ДокументСерия - серия документа
//			ДокументНомер - номер документа
//			ФизическоеЛицо - ссылка на физическое лицо, которому принадлежит документ удостоверяющий личность
//
Функция ФизическиеЛицаПоДокументамУдостоверяющимЛичность(ДанныеДокументов) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДанныеДокументов", ДанныеДокументов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументов.ДокументВид КАК ДокументВид,
	|	ДанныеДокументов.ДокументСерия КАК ДокументСерия,
	|	ДанныеДокументов.ДокументНомер КАК ДокументНомер
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	&ДанныеДокументов КАК ДанныеДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументов.ДокументВид КАК ДокументВид,
	|	ДанныеДокументов.ДокументСерия КАК ДокументСерия,
	|	ДанныеДокументов.ДокументНомер КАК ДокументНомер,
	|	ДокументыФизическихЛиц.Физлицо КАК ФизическоеЛицо
	|ИЗ
	|	ВТДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
	|		ПО ДанныеДокументов.ДокументВид = ВидыДокументовФизическихЛиц.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
	|		ПО (ВидыДокументовФизическихЛиц.Ссылка = ДокументыФизическихЛиц.ВидДокумента)
	|			И ДанныеДокументов.ДокументСерия = ДокументыФизическихЛиц.Серия
	|			И ДанныеДокументов.ДокументНомер = ДокументыФизическихЛиц.Номер
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокументов.ДокументВид,
	|	ДанныеДокументов.ДокументСерия,
	|	ДанныеДокументов.ДокументНомер,
	|	ДокументыФизическихЛиц.Физлицо";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает сообщение об ошибке в номере лицевого счета сотрудника,
// если номер лицевого счета не соответствует стандарту
//
// Параметры:
//		ФизическоеЛицо - Физическое лицо, чей лицевой счет проверяется
//		НомерЛицевогоСчета - Строка, номер лицевого счета сотрудника
//		ЗарплатныйПроект - зарплатный проект, в котором открыт лицевой счет
//
Функция СообщениеПроверкиНомераЛицевогоСчетаНаСоответствиеТребованиям(ФизическоеЛицо, ЗарплатныйПроект, Знач НомерЛицевогоСчета) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗарплатныйПроект) Тогда
		
		ТекстОшибки = НСтр("ru='Не указан зарплатный проект.';uk='Не вказаний зарплатний проект.'");
		
		Возврат ТекстОшибки;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции
