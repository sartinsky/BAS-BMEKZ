//Функция возвращает вид расчетов по договору
// Параметры
//		ДоговорКонтрагента 				- СправочникСсылка.ДоговорыКонтраентов
//		ВалютаРегламентированногоУчета 	- СправочникСсылка.Валюты
//
// Возвращаемое значение
//      ПеречилениеСсылка.ВидыРасчетовПоДоговорам
//
Функция ОпределениеВидаРасчетовПоПараметрамДоговора(ДоговорКонтрагента,ВалютаРегламентированногоУчета) Экспорт

	Если ДоговорКонтрагента.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета 
	 ИЛИ НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;

	Иначе
		ВидРасчетовПоДоговору = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;

	Конецесли;

	Возврат ВидРасчетовПоДоговору;

КонецФункции

// Функция возвращает возможные счета учета расчетов с контрагентом
//
// Параметры:
//  Организация - по которой выполняется поиск
//  Контрагент  - по которому выполняется поиск
//  Договор     - по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, Договор, ВалютаРегламентированногоУчета = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ВалютаРегламентированногоУчета) тогда
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;

	Результат = Новый Структура("
	|СчетРасчетов, СчетАвансов,
	|СчетРасчетовПокупателя, СчетАвансовПокупателя,
	|СчетУчетаТары, СчетУчетаТарыПокупателя,
	|СчетАвансовПоТаре, СчетАвансовПоТареПокупателя,
	|СчетРасчетовПриБартере, СчетАвансовПриБартере,
	|СчетРасчетовПокупателяПриБартере, СчетАвансовПокупателяПриБартере,
	|СчетУчетаНДСПриобретений,СчетУчетаНДСПриобретенийПодтвержденный,
	|СчетУчетаНДСПродаж,СчетУчетаНДСПродажПодтвержденный,
	|НалоговоеНазначениеПриобретений,НалоговоеНазначениеПриобретенийПоТаре,
	|НалоговоеНазначениеПродаж, НалоговоеНазначениеПродажПоТаре,
	|СтавкаНДСПриобретений,СтавкаНДСПродаж,
	|Организация, Контрагент, Договор, ВидРасчетовПоДоговору, Амортизируется,
	|СчетУчетаРасчетовПоДотации, СчетУчетаРасчетовПоПаям, СчетУчетаРасчетовПоЗарплате"); // ИНАГРО

	ВидРасчетовПоДоговору = ОпределениеВидаРасчетовПоПараметрамДоговора(Договор,ВалютаРегламентированногоУчета);

	СписокГруппКонтрагентов = ОбщегоНазначенияБПВызовСервера.ПолучитьСписокВышеСтоящихГрупп(Контрагент);
	
	СписокГруппДоговоров = ОбщегоНазначенияБПВызовСервера.ПолучитьСписокВышеСтоящихГрупп(Договор);
	
	Запрос    = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("Контрагент",        Контрагент);
	Запрос.УстановитьПараметр("Договор",           Договор);
	Запрос.УстановитьПараметр("ВидРасчетов",       ВидРасчетовПоДоговору);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКонтрагент",  Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойДоговор",     Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВидРасчетов", Перечисления.ВидыРасчетовПоДоговорам.ПустаяСсылка());
	
	ШаблонЗапросаБезГде =",
	|	СчетУчетаРасчетовСПоставщиком,
	|	СчетУчетаАвансовВыданных,
	|	СчетУчетаРасчетовСПокупателем,
	|	СчетУчетаАвансовПолученных,
	|	СчетУчетаРасчетовПоТареСПоставщиком,
	|	СчетУчетаАвансовПоТареВыданных,
	|	СчетУчетаРасчетовПоТареСПокупателем,
	|	СчетУчетаАвансовПоТареПолученных,
	//ИНАГРО++
	|	ИНАГРО_СчетУчетаРасчетовПоДотации,
	|   ИНАГРО_СчетУчетаРасчетовПоПаям,
	|   ИНАГРО_СчетУчетаРасчетовПоЗарплате,
	//ИНАГРО--    
	|	СчетУчетаРасчетовСПоставщикомПриБартере,
	|	СчетУчетаРасчетовСПокупателемПриБартере,
	|	СчетУчетаНДСПриобретений,
	|	СчетУчетаНДСПриобретенийПодтвержденный,
	|	СчетУчетаНДСПродаж,
	|	СчетУчетаНДСПродажПодтвержденный,
	|	НалоговоеНазначениеПриобретений,
	|	НалоговоеНазначениеПриобретенийПоТаре,
	|	НалоговоеНазначениеПродаж,
	|   НалоговоеНазначениеПродажПоТаре,
	|	СтавкаНДСПриобретений,
	|	СтавкаНДСПродаж,
	|	Организация,
	|	Контрагент,
	|	Договор,
	|	Амортизируется,
	|  	ВидРасчетовПоДоговору
	|
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами
	|";
	
	Индекс = 1;
		
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	" + Формат(Индекс,"ЧГ=0") + " КАК Приоритет" +
	ШаблонЗапросаБезГде + "
	|ГДЕ
	|	
	|	Организация = &Организация И
	|	Контрагент  = &Контрагент И
	|	Договор     = &Договор И НЕ &Договор = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс, ГруппаДоговоров);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ	
		|
		|ВЫБРАТЬ
		|	" + Формат(Индекс,"ЧГ=0") +
		ШаблонЗапросаБезГде + "
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация 		  = &Организация И
		|	Контрагент  		  = &Контрагент И
		|	Договор     		  = &ГруппаДоговоров" + Индекс + "
		|";
	
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ	
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс,"ЧГ=0") +
	ШаблонЗапросаБезГде + "
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация 		  = &Организация И
	|	Контрагент  		  = &Контрагент И
	|	Договор     		  = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, ГруппаКонтрагентов);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Формат(Индекс,"ЧГ=0") +
		ШаблонЗапросаБезГде + "
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация 		  = &Организация И
		|	Контрагент            = &ГруппаКонтрагентов" + Индекс + " И
		|	Договор     		  = &ПустойДоговор
		|";
	
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс,"ЧГ=0") +
	ШаблонЗапросаБезГде + "
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация 		  = &Организация И
	|	Контрагент  		  = &ПустойКонтрагент И
	|	Договор     		  = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаДоговоров Из СписокГруппДоговоров Цикл
		
		Запрос.УстановитьПараметр("ГруппаДоговоров" + Индекс, ГруппаДоговоров);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Формат(Индекс,"ЧГ=0") +
		ШаблонЗапросаБезГде + "
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация 	 	  = &ПустаяОрганизация И
		|	Контрагент            = &Контрагент И
		|	Договор               = &ГруппаДоговоров" + Индекс + "
	    |";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс,"ЧГ=0") +
	ШаблонЗапросаБезГде + "
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация 		  = &ПустаяОрганизация И
	|	Контрагент 			  = &Контрагент И
	|	Договор     		  = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	Для Каждого ГруппаКонтрагентов Из СписокГруппКонтрагентов Цикл
		
		Запрос.УстановитьПараметр("ГруппаКонтрагентов" + Индекс, ГруппаКонтрагентов);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	" + Формат(Индекс,"ЧГ=0") +
		ШаблонЗапросаБезГде + "
		|ГДЕ
		|	ВидРасчетовПоДоговору = &ВидРасчетов И
		|	Организация           = &ПустаяОрганизация И
		|	Контрагент            = &ГруппаКонтрагентов" + Индекс + " И
		|	Договор               = &ПустойДоговор
		|";
		
		Индекс = Индекс + 1;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс,"ЧГ=0") +
	ШаблонЗапросаБезГде + "
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ВидРасчетов И
	|	Организация           = &ПустаяОрганизация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|";
	
	Индекс = Индекс + 1;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + Формат(Индекс,"ЧГ=0") +
	ШаблонЗапросаБезГде + "
	|ГДЕ
	|	ВидРасчетовПоДоговору = &ПустойВидРасчетов И
	|	Организация           = &ПустаяОрганизация И
	|	Контрагент            = &ПустойКонтрагент И
	|	Договор               = &ПустойДоговор
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		Результат.СчетРасчетов                     = Выборка.СчетУчетаРасчетовСПоставщиком;
		Результат.СчетАвансов                      = Выборка.СчетУчетаАвансовВыданных;
		Результат.СчетРасчетовПокупателя           = Выборка.СчетУчетаРасчетовСПокупателем;
		Результат.СчетАвансовПокупателя            = Выборка.СчетУчетаАвансовПолученных;
		
		Результат.СчетУчетаТары                    = Выборка.СчетУчетаРасчетовПоТареСПоставщиком;
		Результат.СчетАвансовПоТаре                = Выборка.СчетУчетаАвансовПоТареВыданных;
		Результат.СчетУчетаТарыПокупателя          = Выборка.СчетУчетаРасчетовПоТареСПокупателем;
		Результат.СчетАвансовПоТареПокупателя      = Выборка.СчетУчетаАвансовПоТареПолученных;
		
		// ИНАГРО++     
		Результат.СчетУчетаРасчетовПоДотации       = Выборка.ИНАГРО_СчетУчетаРасчетовПоДотации;
		Результат.СчетУчетаРасчетовПоПаям  		   = Выборка.ИНАГРО_СчетУчетаРасчетовПоПаям;
		Результат.СчетУчетаРасчетовПоЗарплате  	   = Выборка.ИНАГРО_СчетУчетаРасчетовПоЗарплате;
		// ИНАГРО--
		
		Результат.СчетРасчетовПриБартере           = Выборка.СчетУчетаРасчетовСПоставщикомПриБартере;
		Результат.СчетАвансовПриБартере            = Выборка.СчетУчетаРасчетовСПокупателемПриБартере;
		Результат.СчетРасчетовПокупателяПриБартере = Выборка.СчетУчетаРасчетовСПокупателемПриБартере;
		Результат.СчетАвансовПокупателяПриБартере  = Выборка.СчетУчетаРасчетовСПоставщикомПриБартере;
		
		Результат.СчетУчетаНДСПриобретений            		= Выборка.СчетУчетаНДСПриобретений;
		Результат.СчетУчетаНДСПриобретенийПодтвержденный 	= Выборка.СчетУчетаНДСПриобретенийПодтвержденный;
		Результат.СчетУчетаНДСПродаж             			= Выборка.СчетУчетаНДСПродаж;
		Результат.СчетУчетаНДСПродажПодтвержденный          = Выборка.СчетУчетаНДСПродажПодтвержденный;
		
		Результат.НалоговоеНазначениеПриобретений    		= Выборка.НалоговоеНазначениеПриобретений;
		Результат.НалоговоеНазначениеПриобретенийПоТаре     = Выборка.НалоговоеНазначениеПриобретенийПоТаре;
		Результат.НалоговоеНазначениеПродаж    			    = Выборка.НалоговоеНазначениеПродаж;
		Результат.НалоговоеНазначениеПродажПоТаре           = Выборка.НалоговоеНазначениеПродажПоТаре;
		
		Результат.СтавкаНДСПриобретений	                = Выборка.СтавкаНДСПриобретений;
		Результат.СтавкаНДСПродаж            			= Выборка.СтавкаНДСПродаж;
		
		Результат.Амортизируется            			= Выборка.Амортизируется;
		
		Результат.Организация						= Выборка.Организация;
		Результат.Контрагент            			= Выборка.Контрагент;
		Результат.Договор            				= Выборка.Договор;
		Результат.ВидРасчетовПоДоговору            	= Выборка.ВидРасчетовПоДоговору;
		
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьСчетаРасчетовСКонтрагентом()

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАЧЕТА АВАНСА, ЗАКРЫТИЯ ЗАДОЛЖЕННОСТИ
//

Процедура УпорядочитьТаблицуПоДокументу(ТаблицаЗначений, КолонкаДокумента, КолонкаДаты = "ДатаДокументаРасчетов") Экспорт

	
	
	Если ТаблицаЗначений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	КэшПоТипам = Новый Соответствие;
	
	Для каждого СтрокаТаблицы из ТаблицаЗначений Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[КолонкаДокумента]) тогда 
			Продолжить;
		КонецЕсли;
		
		ТипТекущегоДокумента = ТипЗнч(СтрокаТаблицы[КолонкаДокумента]);
		Если Документы.ТипВсеСсылки().СодержитТип(ТипТекущегоДокумента)  тогда
			
			МассивТипа = КэшПоТипам[ТипТекущегоДокумента];
			Если МассивТипа = Неопределено Тогда
				МассивТипа = Новый Массив;
				КэшПоТипам.Вставить(ТипТекущегоДокумента, МассивТипа);
			КонецЕсли;
			
			МассивТипа.Добавить(СтрокаТаблицы[КолонкаДокумента]);
		КонецЕсли;
		
	КонецЦикла;
	
	Если КэшПоТипам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаЗначений.Колонки.Найти(КолонкаДаты) = Неопределено Тогда
		ТаблицаЗначений.Колонки.Добавить(КолонкаДаты, ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	КонецЕсли;
	
	ТаблицаЗначений.Колонки.Добавить("ДокументДляУпорядочивания", Документы.ТипВсеСсылки());
	
	ТаблицаЗначений.Индексы.Добавить(КолонкаДокумента);
	
	Запрос = новый запрос;

	Для Каждого КлючИЗначение ИЗ КэшПоТипам Цикл
		ИмяМетаданных = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ).Имя;

		Запрос.Текст = Запрос.Текст+
		?(Запрос.Текст="","",
		" 
		|Объединить все")+
		"
		|	ВЫБРАТЬ
		|	Док.Ссылка Как Ссылка,
		|	Док.Дата
		|	ИЗ
		|		Документ."+ИмяМетаданных+" КАК Док
		|	Где Док.ссылка в  (&ДокументыТипа_"+ИмяМетаданных+")";
		Запрос.УстановитьПараметр("ДокументыТипа_"+ИмяМетаданных, КлючИЗначение.Значение);
		
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДокумента = ТаблицаЗначений.Найти(Выборка.Ссылка, КолонкаДокумента);
		СтрокаДокумента.ДокументДляУпорядочивания = Выборка.Ссылка;
		СтрокаДокумента[КолонкаДаты] = Выборка.Дата;
	КонецЦикла;
	
	СписокКолонок = КолонкаДаты + ", ДокументДляУпорядочивания";
	
	ТаблицаЗначений.Сортировать(СписокКолонок);
	
	ТаблицаЗначений.Колонки.Удалить(ТаблицаЗначений.Колонки["ДокументДляУпорядочивания"]);
	ТаблицаЗначений.Колонки.Удалить(ТаблицаЗначений.Колонки[КолонкаДаты]);
	
КонецПроцедуры

Функция ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ВидДокумента,ВидОперации = неопределено)Экспорт

	ВидДействийДокумента = Новый Структура("Направление, РасчетыВозврат");
	ВидыДокументов       = Новый Соответствие();

	ВидыДокументов.Вставить("ПоступлениеТоваровУслуг",     "Поступление"); 	 
	ВидыДокументов.Вставить("ПоступлениеДопРасходов",      "Поступление");
	ВидыДокументов.Вставить("ПоступлениеНМА",              "Поступление");
	ВидыДокументов.Вставить("ВозвратТоваровОтПокупателя",  "Поступление");
	ВидыДокументов.Вставить("ПолучениеУслугПоПереработке", "Поступление");
	ВидыДокументов.Вставить("ПоступлениеИзПереработки",    "Поступление");
	ВидыДокументов.Вставить("ГТДИмпорт"					 , "Поступление");
	ВидыДокументов.Вставить("АвансовыйОтчет"			 , "Поступление");

	ВидыДокументов.Вставить("РеализацияУслугПоПереработке",      "Выбытие");
	ВидыДокументов.Вставить("АктОбОказанииПроизводственныхУслуг","Выбытие");
	ВидыДокументов.Вставить("ПередачаНМА",                       "Выбытие");
	ВидыДокументов.Вставить("ПередачаОС",                        "Выбытие");
	ВидыДокументов.Вставить("ВозвратТоваровПоставщику",          "Выбытие");
	
	// ИНАГРО++
	ВидыДокументов.Вставить("ИНАГРО_ВедомостьРеализация",        "Выбытие");
	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда
		ВидыДокументов.Вставить("ИНАГРО_ПоступлениеБиологическихАктивов", 		  "Поступление");
		ВидыДокументов.Вставить("ИНАГРО_ГТДИмпортБиологическихАктивов", 		  "Поступление");
		ВидыДокументов.Вставить("ИНАГРО_ВозвратБиологическихАктивовОтПокупателя", "Поступление");
		ВидыДокументов.Вставить("ИНАГРО_ВозвратБиологическихАктивовПоставщику",   "Выбытие");
		ВидыДокументов.Вставить("ИНАГРО_РеализацияБиологическихАктивов",          "Выбытие");
	КонецЕсли;
	// ИНАГРО--
	
	Если ВидДокумента = "ОтчетКомитентуОПродажах" тогда 
		Если ВидОперации= "ПоТоварам" тогда
			ВидыДокументов.Вставить("ОтчетКомитентуОПродажах", "Поступление");
		Иначе
			ВидыДокументов.Вставить("ОтчетКомитентуОПродажах", "Выбытие");
		КонецЕсли;
	КонецЕсли;

	Если ВидДокумента = "ОтчетКомиссионераОПродажах" тогда 
		Если ВидОперации= "ПоУслугам" тогда
			ВидыДокументов.Вставить("ОтчетКомиссионераОПродажах", "Поступление");
		Иначе
			ВидыДокументов.Вставить("ОтчетКомиссионераОПродажах", "Выбытие");
		КонецЕсли;
	КонецЕсли;

	Если ВидДокумента = "РеализацияТоваровУслуг" тогда 
		Если ВидОперации= "КомиссионнаяВыручка" тогда
			ВидыДокументов.Вставить("РеализацияТоваровУслуг",     "Поступление");
		Иначе
			ВидыДокументов.Вставить("РеализацияТоваровУслуг",     "Выбытие");
		КонецЕсли;
	КонецЕсли;
	
	// ИНАГРО ++
	Если ВидДокумента = "ИНАГРО_РасчетКорректировкиЦены" тогда 
		Если ВидОперации= Перечисления.ИНАГРО_ВидыОперацийКорректировкиСтоимости.ВходящиеДокументы тогда
			ВидыДокументов.Вставить("ИНАГРО_РасчетКорректировкиЦены", "Поступление");
		Иначе
			ВидыДокументов.Вставить("ИНАГРО_РасчетКорректировкиЦены", "Выбытие");
		КонецЕсли;
	КонецЕсли;
	// ИНАГРО--
	
	ВидДействийДокумента.Вставить("Направление",ВидыДокументов[ВидДокумента]);

	ВидОперацииРасчет  = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;

	Если ЗначениеЗаполнено(ВидОперации) тогда

		//Определение вида операции

		РасчетВозвратПоВидуОпераций = Новый Соответствие();

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия,      ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование,         ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства, ВидОперацииРасчет);
		
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия,			ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРеализацияТоваров.Оборудование,				ВидОперацииРасчет);
		
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.ПродажаКомиссия,	ВидОперацииВозврат);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийВозвратТоваровОтПокупателя.Оборудование,		ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия,		ВидОперацииВозврат);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийВозвратТоваровПоставщику.Оборудование,		ВидОперацииВозврат);
		
		ВидДействийДокумента.Вставить("РасчетыВозврат", РасчетВозвратПоВидуОпераций[ВидОперации]);

	Иначе

		Если    (ВидДокумента = "РеализацияУслугПоПереработке")
			или (ВидДокумента = "АктОбОказанииПроизводственныхУслуг")
			или (ВидДокумента = "РеализацияТоваровУслуг")
			или (ВидДокумента = "ПоступлениеИзПереработки")
			или (ВидДокумента = "ПолучениеУслугПоПереработке")
			или (ВидДокумента = "ОтчетКомиссионераОПродажах")
			или (ВидДокумента = "ОтчетКомитентуОПродажах")
			или (ВидДокумента = "ПоступлениеНМА")
			или (ВидДокумента = "ПередачаНМА")
			или (ВидДокумента = "ПередачаОС") 
			или (ВидДокумента = "ПоступлениеДопРасходов") 
			
			тогда

			ВидДействийДокумента.Вставить("РасчетыВозврат",ВидОперацииРасчет);
			
		КонецЕсли;

	КонецЕсли;

	Возврат ВидДействийДокумента;

КонецФункции

// Выполняет зачет аванса по указанному документу
//
// Параметры
// ДокументОбъект    - ДокументОбъект или ДокументСсылка - Документ для которого выполяентся операция.
Функция ЗачетАванса(ДокументОбъект, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета, ТаблицыДокумента, Отказ,Заголовок,НомерЖурнала="",УменьшитьСуммуРегл=0,УменьшитьСуммуВал=0, СчетРасчетов = Неопределено, СчетАвансов = Неопределено) Экспорт

	Перем ВидОперации,Сделка,УчитыватьДвиженияДокумента;

	// ИНАГРО ++
	СтруктураШапкиДокумента.Свойство("Сделка",      Сделка);
	
	Если ДокументОбъект.Метаданные().Имя = "ИНАГРО_РасчетКорректировкиЦены" Тогда     
		ВидОперации =  СтруктураШапкиДокумента.Ссылка.ВидОперации;
		НаправлениеДвижения = ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(СтруктураШапкиДокумента.Ссылка.Метаданные().Имя, ВидОперации).Направление;
		ЭтоВозврат          = (ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(СтруктураШапкиДокумента.Ссылка.Метаданные().Имя, ВидОперации).РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат);
		//МоментДокумента     = Новый МоментВремени(СтруктураШапкиДокумента.ДокументОснование.Ссылка.Дата, СтруктураШапкиДокумента.ДокументОснование.Ссылка);
		МоментДокумента     = Новый МоментВремени(ДокументОбъект.Дата, ДокументОбъект.Ссылка);
		КурсДокумента       = ЗаполнениеДокументов.КурсДокумента(СтруктураШапкиДокумента.Ссылка.ДокументОснование, ВалютаРегламентированногоУчета); 
		КратностьДокумента  = ЗаполнениеДокументов.КратностьДокумента(СтруктураШапкиДокумента.Ссылка.ДокументОснование, ВалютаРегламентированногоУчета);
	Иначе	
		СтруктураШапкиДокумента.Свойство("ВидОперации", ВидОперации);
		НаправлениеДвижения = ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ДокументОбъект.Метаданные().Имя, ВидОперации).Направление;
		ЭтоВозврат          = (ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(ДокументОбъект.Метаданные().Имя, ВидОперации).РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат);
		МоментДокумента     = Новый МоментВремени(ДокументОбъект.Дата, ДокументОбъект.Ссылка);
		КурсДокумента       = СтруктураШапкиДокумента.КурсДокумента;
		КратностьДокумента  = СтруктураШапкиДокумента.КратностьДокумента;
	КонецЕсли;

	Организация         = СтруктураШапкиДокумента.Организация;
	ДатаДока            = СтруктураШапкиДокумента.Дата;
	// ИНАГРО --
	
	Контрагент          = СтруктураШапкиДокумента.Контрагент;
	ДоговорКонтрагента  = СтруктураШапкиДокумента.ДоговорКонтрагента;
	Если Не ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам и не ЭтоВозврат тогда
		Сделка = Неопределено;
	КонецЕсли;
	
	Если СчетРасчетов = Неопределено Тогда
		СчетРасчетов        = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;	
	КонецЕсли; 
	Если СчетАвансов = Неопределено Тогда
		
		СчетАвансов         = СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансам;	
	КонецЕсли; 
	
	ВалютаДокумента     = СтруктураШапкиДокумента.ВалютаДокумента;
	РасчетыВВалюте      = НЕ (ВалютаДокумента = ВалютаРегламентированногоУчета);

	СуммаДокументаСНДСРегл            = 0;
	СуммаДокументаСНДСВВалютеРасчетов = 0;

	//Формирование таблицы для возврата сумм зачтенных авансов (по документам)
	ЗачетаАвансаРегл = Новый ТаблицаЗначений();
	ЗачетаАвансаРегл.Колонки.Добавить("ДокументОплаты", Документы.ТипВсеСсылки());
	ЗачетаАвансаРегл.Колонки.Добавить("Сделка",         Документы.ТипВсеСсылки());
	ЗачетаАвансаРегл.Колонки.Добавить("Сумма",          ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ЗачетаАвансаРегл.Колонки.Добавить("СуммаВал",       ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	
	ЗачетаАвансаРегл.Колонки.Добавить("Контрагент", новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ЗачетаАвансаРегл.Колонки.Добавить("ДоговорКонтрагента",новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ЗачетаАвансаРегл.Колонки.Добавить("ВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	Если СтруктураШапкиДокумента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам и
		 НЕ ЗначениеЗаполнено(Сделка) и не ЭтоВозврат тогда
 		//Документ не требует обработки
		Возврат ЗачетаАвансаРегл; // Возвращена пустая таблица
	КонецЕсли;
	
	Для каждого ТекущаяТаблица из ТаблицыДокумента Цикл

		Если ТекущаяТаблица.Значение.Колонки.Найти("ПроводкиСуммаСНДСРегл") = Неопределено тогда

			Если ЭтоВозврат Тогда
				ТекстСообщения = НСтр("ru='Ошибка при выделении аванса.';uk='Помилка при виділенні авансу.'");
			Иначе
				ТекстСообщения = НСтр("ru='Ошибка при зачете аванса.';uk='Помилка при заліку авансу.'");
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Заголовок + Символы.ПС + ТекстСообщения, ДокументОбъект, , "Объект", Отказ);
			Возврат Неопределено;
        КонецЕсли;

		СуммаДокументаСНДСРегл = СуммаДокументаСНДСРегл + ТекущаяТаблица.Значение.Итог("ПроводкиСуммаСНДСРегл");

		Если РасчетыВВалюте тогда
			СуммаДокументаСНДСВВалютеРасчетов = СуммаДокументаСНДСВВалютеРасчетов + ТекущаяТаблица.Значение.Итог("ПроводкиСуммаСНДСВал");
		КонецЕсли;
		
	КонецЦикла;
    
	Если СуммаДокументаСНДСВВалютеРасчетов = 0 тогда
		СуммаДокументаСНДСВВалютеРасчетов = СуммаДокументаСНДСРегл;
	КонецЕсли;
	 
	СуммаДокументаСНДСВВалютеРасчетов = СуммаДокументаСНДСВВалютеРасчетов - УменьшитьСуммуВал; 
	СуммаДокументаСНДСРегл = СуммаДокументаСНДСРегл  - УменьшитьСуммуРегл;

	Если СуммаДокументаСНДСРегл = 0 тогда 
		//Документ не требует обработки
		Возврат ЗачетаАвансаРегл; // Возвращена пустая таблица
	КонецЕсли;


	Если ЭтоВозврат тогда
		Если НаправлениеДвижения="Поступление" тогда
			СодержаниеОперации = НСтр("ru='Выделение аванса (оплаченная часть при возвр.)';uk='Виділення авансу (оплачена частина при поверн.)'",Локализация.КодЯзыкаИнформационнойБазы());
		Иначе
			СодержаниеОперации = НСтр("ru='Возврат поставщику. Неоплаченная часть.';uk='Повернення постачальнику. Неоплачена частина.'",Локализация.КодЯзыкаИнформационнойБазы());
		КонецЕслИ;
	Иначе
		Если НаправлениеДвижения="Поступление" тогда
			СодержаниеОперации = НСтр("ru='Зачет аванса поставщику';uk='Зарахування авансу постачальнику'",Локализация.КодЯзыкаИнформационнойБазы());
		Иначе
			СодержаниеОперации = НСтр("ru='Зачет аванса покупателя';uk='Зарахування авансу покупця'",Локализация.КодЯзыкаИнформационнойБазы());
		КонецЕслИ;
	КонецЕслИ;
	
	СуфиксСчетаРасчетов = ?(НаправлениеДвижения = "Поступление", "Дт", "Кт");
	СуфиксСчетаАвансов  = ?(НаправлениеДвижения = "Поступление", "Кт", "Дт");

	//Если счет оплаты совпадает со счетом аванса или счет аванса не заполнен и расчеты не в у.е. - возвращаемся без зачета аванса
	Если (НЕ ЗначениеЗаполнено(СчетАвансов)) тогда
		//Проводка по бух. учету по зачету аванса не формируется
		Возврат ЗачетаАвансаРегл; // Возвращена пустая таблица
	КонецЕсли;

	Если РасчетыВВалюте Тогда
		УсловиеВалюта = ВалютаДокумента;
	Иначе
		УсловиеВалюта = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;

	ЗнакФильтрПоОстаткам = ?(НаправлениеДвижения = "Поступление" , 1, -1);
	
	СтруктураШапкиДокумента.Свойство("УчитыватьДвиженияДокумента",УчитыватьДвиженияДокумента);
	Если УчитыватьДвиженияДокумента = Истина 
		ИЛИ ДокументОбъект.Метаданные().Имя = "ИНАГРО_РасчетКорректировкиЦены" Тогда // ИНАГРО ++
		// нужно бует расчитывать остатки включая документ;
		Период = Новый Граница(МоментДокумента,ВидГраницы.Включая);
	Иначе
		Период = МоментДокумента;
	КонецЕсли;
	
	НомерСубконтоРасчетныеДокументы = 0;
	Если НЕ СчетАвансов.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами,"ВидСубконто") = Неопределено тогда
		НомерСубконтоРасчетныеДокументы = СчетАвансов.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами,"ВидСубконто").НомерСтроки;
	КонецЕсли;
	Если (НомерСубконтоРасчетныеДокументы = 0) и (СчетРасчетов = СчетАвансов) и (Не РасчетыВВалюте) Тогда
		// нет расчетных документов, и счет авансов = счет расчетов, взаиморасчеты не в валюте - нет смысла делать проводку перезачет
		ТаблицаАвансов = Новый ТаблицаЗначений;
	Иначе
		ТаблицаАвансов       = БухгалтерскийУчетРед12.ПолучитьОстатокПоСчету(Организация,Период,?(НаправлениеДвижения = "Поступление" и ЭтоВозврат,СчетРасчетов,СчетАвансов),УсловиеВалюта ,Контрагент, ДоговорКонтрагента,Сделка,ЗнакФильтрПоОстаткам);
		Если НЕ НомерСубконтоРасчетныеДокументы = 0 Тогда
			УпорядочитьТаблицуПоДокументу(ТаблицаАвансов,"Субконто"+НомерСубконтоРасчетныеДокументы);
		КонецЕсли;
	КонецЕсли; 

	СуммаЗачетаАвансаРегл            = 0;
	СуммаЗачетаАвансаВВалютеРасчетов = 0;
	КорректировкиПриРасчетахВВалюте  = 0;

	Если ТаблицаАвансов.Количество()=0 тогда
		Возврат ЗачетаАвансаРегл; // Возвращена пустая таблица
	КонецЕсли;
	
	ПроводкиБУ = ДокументОбъект.Движения.Хозрасчетный;
	
	Для каждого СтрокаАванса из ТаблицаАвансов Цикл

		//Расчет суммы перекрытия задолженности на счете, определение суммовых разниц
		ТекущийАванс = Макс(0, Мин(СуммаДокументаСНДСВВалютеРасчетов,СтрокаАванса[?(РасчетыВВалюте,"ВалютнаяСуммаОстаток","СуммаОстаток")]));
		
		Если ТекущийАванс = 0 тогда 
			Продолжить;
		КонецЕсли;

		Если РасчетыВВалюте Тогда
			
			// считаем аванс по историческому курсу
            ИсторическийАвансРегл = (ТекущийАванс / СтрокаАванса.ВалютнаяСуммаОстаток) * СтрокаАванса.СуммаОстаток;
			ТекущийАвансРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекущийАванс, ВалютаДокумента, ВалютаРегламентированногоУчета,
				                                        КурсДокумента, 1, КратностьДокумента, 1);
														
			// на какую сумму нужно откорректировать стоимость запасов 
            КорректировкиПриРасчетахВВалюте = КорректировкиПриРасчетахВВалюте + (ИсторическийАвансРегл - ТекущийАвансРегл);
			
			ТекущийАвансРегл = ИсторическийАвансРегл;
			
		Иначе

			ТекущийАвансРегл = ТекущийАванс;

		КонецЕсли;
		
		СуммаДокументаСНДСВВалютеРасчетов = СуммаДокументаСНДСВВалютеРасчетов - ТекущийАванс;
		СуммаЗачетаАвансаВВалютеРасчетов  = СуммаЗачетаАвансаВВалютеРасчетов + ТекущийАванс;
		СуммаЗачетаАвансаРегл             = СуммаЗачетаАвансаРегл + ТекущийАвансРегл;

		СтрокаЗачетаАванса = ЗачетаАвансаРегл.Добавить();
		СтрокаЗачетаАванса.Сумма  = ТекущийАвансРегл;
		СтрокаЗачетаАванса.Сделка = СтруктураШапкиДокумента.Ссылка;
        СтрокаЗачетаАванса.СуммаВал = ТекущийАванс;
		
		СтрокаЗачетаАванса.Контрагент = Контрагент;
        СтрокаЗачетаАванса.ДоговорКонтрагента = ДоговорКонтрагента;
		Если СтруктураШапкиДокумента.Свойство("ВалютаВзаиморасчетов") Тогда
			СтрокаЗачетаАванса.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
		Иначе
	        СтрокаЗачетаАванса.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли; 
		
		Если не НомерСубконтоРасчетныеДокументы = 0 тогда
			СтрокаЗачетаАванса.ДокументОплаты = СтрокаАванса["Субконто"+НомерСубконтоРасчетныеДокументы];
		КонецЕсли;

		//Формирование проводки для стандартного режима зачета аванса
		Если НЕ ((НомерСубконтоРасчетныеДокументы = 0) и (СчетРасчетов = СчетАвансов)) Тогда 
			Проводка = ПроводкиБУ.Добавить();

			Проводка.Период       = ДатаДока;
			Проводка.Организация  = Организация;
			Проводка.НомерЖурнала = НомерЖурнала;
			Проводка.Содержание   = СодержаниеОперации;

			Проводка["Счет" + СуфиксСчетаРасчетов]= СчетРасчетов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуфиксСчетаРасчетов], Проводка["Субконто" + СуфиксСчетаРасчетов], "Контрагенты",        Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуфиксСчетаРасчетов], Проводка["Субконто" + СуфиксСчетаРасчетов], "Договоры",           ДоговорКонтрагента);
			// ИНАГРО ++
			Если ДокументОбъект.Метаданные().Имя = "ИНАГРО_РасчетКорректировкиЦены"  тогда
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуфиксСчетаРасчетов], Проводка["Субконто" + СуфиксСчетаРасчетов], "ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(СтруктураШапкиДокумента.ДокументОснование, Сделка));
			Иначе	
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуфиксСчетаРасчетов], Проводка["Субконто" + СуфиксСчетаРасчетов], "ДокументыРасчетовСКонтрагентами", УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(СтруктураШапкиДокумента.Ссылка, Сделка));
			Конецесли;
			// ИНАГРО --
			
			Проводка["Счет" + СуфиксСчетаАвансов]= СчетАвансов;
			Для НомерСубконто = 1 по 3 Цикл
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + СуфиксСчетаАвансов], Проводка["Субконто" + СуфиксСчетаАвансов], НомерСубконто,СтрокаАванса["Субконто" + НомерСубконто]);
			КонецЦикла;

			Проводка.Сумма = ТекущийАвансРегл;

			Если СчетРасчетов.Валютный тогда
				Проводка["Валюта" + СуфиксСчетаРасчетов]        = ДоговорКонтрагента.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + СуфиксСчетаРасчетов] = ТекущийАванс;
			Конецесли;

			Если СчетАвансов.Валютный тогда
				Проводка["Валюта" + СуфиксСчетаАвансов]        = ДоговорКонтрагента.ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + СуфиксСчетаАвансов] = ТекущийАванс;
			Конецесли;

		КонецЕсли;

	КонецЦикла;

	Если РасчетыВВалюте и КорректировкиПриРасчетахВВалюте <> 0 тогда
		
		РаспределитьКорректировкуПриРасчетахВВалюте(КорректировкиПриРасчетахВВалюте,ТаблицыДокумента,Отказ,Заголовок, Истина);

	КонецЕсли;

	Возврат ЗачетаАвансаРегл;

КонецФункции

Процедура РаспределитьКорректировкуПриРасчетахВВалюте(СуммаКорректировки,ТаблицыДокумента,Отказ,Заголовок,УвеличитьСуммуКорректировкиНаСуммуСНДС)

	Если СуммаКорректировки = 0 тогда
		Возврат;
	КонецЕсли;

	//Определим суммы по каждой из переданных таблиц значений
	СуммыПоТаблицамДокумента = Новый ТаблицаЗначений();
	СуммыПоТаблицамДокумента.Колонки.Добавить("ИмяТаблицы");
	СуммыПоТаблицамДокумента.Колонки.Добавить("СуммаСНДС",     ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	СуммыПоТаблицамДокумента.Колонки.Добавить("СуммаБезНДС",   ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	СуммыПоТаблицамДокумента.Колонки.Добавить("НДС",           ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	СуммыПоТаблицамДокумента.Колонки.Добавить("Корректировка", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));

	Для каждого ТекущаяТаблица Из ТаблицыДокумента Цикл

		СтрокаТаблицы = СуммыПоТаблицамДокумента.Добавить();

		СтрокаТаблицы.ИмяТаблицы = ТекущаяТаблица.Ключ;
		СтрокаТаблицы.СуммаСНДС  = ТекущаяТаблица.Значение.Итог("ПроводкиСуммаСНДСРегл");

		Если НЕ ТекущаяТаблица.Значение.Колонки.Найти("ПроводкиСуммаНДСРегл") = Неопределено тогда

			СтрокаТаблицы.СуммаБезНДС = ТекущаяТаблица.Значение.Итог("ПроводкиСуммаБезНДСРегл");
			СтрокаТаблицы.НДС         = ТекущаяТаблица.Значение.Итог("ПроводкиСуммаНДСРегл");

		Иначе
			СтрокаТаблицы.СуммаБезНДС = ТекущаяТаблица.Значение.Итог("ПроводкиСуммаБезНДСРегл");

		КонецЕсли;

	КонецЦикла;

	//Распределим корректировку по таблицам значений
	СуммаСНДСКРаспределению = СуммаКорректировки+?(УвеличитьСуммуКорректировкиНаСуммуСНДС,СуммыПоТаблицамДокумента.Итог("СуммаСНДС"),0);

	Если СуммаСНДСКРаспределению = 0 тогда
		СтрокаСообщения = НСтр("ru='Ошибка в распределении корректировок при зачете аванса по расчетам в условных единицах.';uk='Помилка в розподілі коригування при заліку авансу по розрахунках в умовних одиницях.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
		Возврат;
	КонецЕсли;

	НДСКРаспределению    = 0;
	БезНДСКРаспределению = 0;

	Если Не СуммыПоТаблицамДокумента.Итог("НДС") = 0 тогда
		НДСКРаспределению = Окр(СуммаСНДСКРаспределению * СуммыПоТаблицамДокумента.Итог("НДС") / СуммыПоТаблицамДокумента.Итог("СуммаСНДС"), 2);
	КонецЕсли;

	БезНДСКРаспределению = СуммаСНДСКРаспределению - НДСКРаспределению;

	Если НЕ БезНДСКРаспределению = 0 тогда
		НовыеСуммы = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(БезНДСКРаспределению,СуммыПоТаблицамДокумента.ВыгрузитьКолонку("СуммаБезНДС"));
		СуммыПоТаблицамДокумента.ЗагрузитьКолонку(НовыеСуммы,"СуммаБезНДС");
	КонецЕсли;

	Если НЕ НДСКРаспределению = 0 тогда
		НовыеСуммы = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(НДСКРаспределению,СуммыПоТаблицамДокумента.ВыгрузитьКолонку("НДС"));
		СуммыПоТаблицамДокумента.ЗагрузитьКолонку(НовыеСуммы,"НДС");
	КонецЕсли;

	Для каждого СтрокаТаблицы Из СуммыПоТаблицамДокумента Цикл
		СтрокаТаблицы.СуммаСНДС = СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС;
	КонецЦикла;

	//Распределим корректировку в пределах каждой таблицы значений
	Для каждого СтрокаКРаспределению из СуммыПоТаблицамДокумента Цикл

		ТаблицаЗначений     = ТаблицыДокумента[СтрокаКРаспределению.ИмяТаблицы];
		СуммаКРаспределению = СтрокаКРаспределению.СуммаСНДС;

		Если СуммаКРаспределению = 0 тогда
			продолжить;
		КонецЕсли;

		Если не СтрокаКРаспределению.СуммаБезНДС = 0 тогда
			НовыеСуммы = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СтрокаКРаспределению.СуммаБезНДС, ТаблицаЗначений.ВыгрузитьКолонку("ПроводкиСуммаБезНДСРегл"));
			ТаблицаЗначений.ЗагрузитьКолонку(НовыеСуммы,"ПроводкиСуммаБезНДСРегл");
		КонецЕсли;
		
		Если НЕ СтрокаКРаспределению.НДС = 0 тогда
			НовыеСуммы = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СтрокаКРаспределению.НДС,ТаблицаЗначений.ВыгрузитьКолонку("ПроводкиСуммаНДСРегл"));
			ТаблицаЗначений.ЗагрузитьКолонку(НовыеСуммы,"ПроводкиСуммаНДСРегл");
		КонецЕсли;

		Для каждого СтрокаТаблицы  Из ТаблицаЗначений Цикл
			СтрокаТаблицы.ПроводкиСуммаСНДСРегл = СтрокаТаблицы.ПроводкиСуммаБезНДСРегл + СтрокаТаблицы.ПроводкиСуммаНДСРегл;
		КонецЦикла; 

	КонецЦикла;

Конецпроцедуры

// Выполняет зачет аванса по указанному документу
//
// Параметры
// ДокументОбъект    - ДокументОбъект или ДокументСсылка - Документ для которого выполяентся операция.
Функция ЗачетАвансаПодотчетника(ДокументОбъект, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета, ТаблицыДокумента, Отказ,СчетРасчетов) Экспорт

	Организация         = СтруктураШапкиДокумента.Организация;
	ДатаДока            = СтруктураШапкиДокумента.Дата;
	МоментДокумента     = Новый МоментВремени(ДокументОбъект.Дата,ДокументОбъект.Ссылка);
	КурсДокумента       = СтруктураШапкиДокумента.КурсДокумента;
	КратностьДокумента  = СтруктураШапкиДокумента.КратностьДокумента;
	Контрагент          = СтруктураШапкиДокумента.ФизЛицо;
	
	ВалютаДокумента     = СтруктураШапкиДокумента.ВалютаДокумента;
	
	СуммаДокументаСНДСРегл            = 0;
	СуммаДокументаСНДСВВалютеРасчетов = 0;

	Для каждого ТекущаяТаблица из ТаблицыДокумента Цикл

		Если ТекущаяТаблица.Значение.Колонки.Найти("ПроводкиСуммаСНДСРегл") = Неопределено тогда

			ТекстСообщения = НСтр("ru='Ошибка при зачете аванса.';uk='Помилка при заліку авансу.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокументОбъект, , "Объект", Отказ);
			Возврат Неопределено;
        КонецЕсли;

		СуммаДокументаСНДСРегл = СуммаДокументаСНДСРегл + ТекущаяТаблица.Значение.Итог("ПроводкиСуммаСНДСРегл");
        СуммаДокументаСНДСВВалютеРасчетов = СуммаДокументаСНДСВВалютеРасчетов + ТекущаяТаблица.Значение.Итог("ПроводкиСуммаСНДСВал");
				
	КонецЦикла;
	 
	СуммаДокументаСНДСВВалютеРасчетов = СуммаДокументаСНДСВВалютеРасчетов; 
	СуммаДокументаСНДСРегл = СуммаДокументаСНДСРегл;

	Если СуммаДокументаСНДСРегл = 0 тогда 
		//Документ не требует обработки
		Возврат Неопределено; 
	КонецЕсли;

    УсловиеВалюта = ВалютаДокумента;
	ЗнакФильтрПоОстаткам = 1;
	
	Период = МоментДокумента;
		
	ТаблицаАвансов       = БухгалтерскийУчетРед12.ПолучитьОстатокПоСчету(Организация,Период,СчетРасчетов,УсловиеВалюта ,Контрагент,,,ЗнакФильтрПоОстаткам);
	
	СуммаЗачетаАвансаРегл            = 0;
	СуммаЗачетаАвансаВВалютеРасчетов = 0;
	КорректировкиПриРасчетахВВалюте  = 0;

	Если ТаблицаАвансов.Количество()=0 тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для каждого СтрокаАванса из ТаблицаАвансов Цикл

		//Расчет суммы перекрытия задолженности на счете, определение суммовых разниц
		ТекущийАванс = Макс(0, Мин(СуммаДокументаСНДСВВалютеРасчетов,СтрокаАванса["ВалютнаяСуммаОстаток"]));
		
		Если ТекущийАванс = 0 тогда 
			Продолжить;
		КонецЕсли;

		// считаем аванс по историческому курсу
		ИсторическийАвансРегл = (ТекущийАванс / СтрокаАванса.ВалютнаяСуммаОстаток) * СтрокаАванса.СуммаОстаток;
		ТекущийАвансРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекущийАванс, ВалютаДокумента, ВалютаРегламентированногоУчета,
														КурсДокумента, 1, КратностьДокумента, 1);
														
		// на какую сумму нужно откорректировать 
		КорректировкиПриРасчетахВВалюте = КорректировкиПриРасчетахВВалюте + (ИсторическийАвансРегл - ТекущийАвансРегл);
		
		ТекущийАвансРегл = ИсторическийАвансРегл;
			
		
		СуммаДокументаСНДСВВалютеРасчетов = СуммаДокументаСНДСВВалютеРасчетов - ТекущийАванс;
		СуммаЗачетаАвансаВВалютеРасчетов  = СуммаЗачетаАвансаВВалютеРасчетов + ТекущийАванс;
		СуммаЗачетаАвансаРегл             = СуммаЗачетаАвансаРегл + ТекущийАвансРегл;

	КонецЦикла;

	Если КорректировкиПриРасчетахВВалюте <> 0 тогда
		
		РаспределитьКорректировкуПриРасчетахВВалюте(КорректировкиПриРасчетахВВалюте,ТаблицыДокумента,Отказ,, Истина);

	КонецЕсли;

	Возврат КорректировкиПриРасчетахВВалюте;

КонецФункции

Функция ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(Знач ВидДокумента,ВидОперации = неопределено) Экспорт

	ВидДействийДокумента = Новый Структура("Направление,РасчетыВозврат");
	ВидыДокументовДДС    = Новый Соответствие();

	//ВидыДокументовДДС.Вставить("АккредитивПереданный", 				   "Выбытие");
	//ВидыДокументовДДС.Вставить("ИнкассовоеПоручениеПолученное", 		   "Выбытие");
	ВидыДокументовДДС.Вставить("СписаниеСРасчетногоСчета",				   "Выбытие");
	//ВидыДокументовДДС.Вставить("ПлатежноеТребованиеПолученное", 		   "Выбытие");
	ВидыДокументовДДС.Вставить("ПлатежныйОрдерСписаниеДенежныхСредств",    "Выбытие");
	ВидыДокументовДДС.Вставить("РасходныйКассовыйОрдер", 				   "Выбытие");
	//ВидыДокументовДДС.Вставить("АккредитивПолученный", 				   "Поступление");
	//ВидыДокументовДДС.Вставить("ИнкассовоеПоручениеПереданное", 		   "Поступление");
	ВидыДокументовДДС.Вставить("ПоступлениеНаРасчетныйСчет", 			   "Поступление");
	ВидыДокументовДДС.Вставить("ПлатежныйОрдерПоступлениеДенежныхСредств", "Поступление");
	ВидыДокументовДДС.Вставить("ПриходныйКассовыйОрдер", 				   "Поступление");

	ВидыДокументовДДС.Вставить("АвансовыйОтчет", 						   "Выбытие");
	ВидыДокументовДДС.Вставить("ВозвратТоваровПоставщику", 				   "Поступление");
	
	ВидОперацииРасчет  = Перечисления.РасчетыВозврат.Расчеты;
	ВидОперацииВозврат = Перечисления.РасчетыВозврат.Возврат;
	
	Если ТипЗнч(ВидДокумента) = Тип("Строка") Тогда
		// Получен непосредственно вид документа
		// Дополнительные действия не требуются
		
		ВидДействийДокумента.Вставить("Направление",ВидыДокументовДДС[ВидДокумента]);
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ВидДокумента)) Тогда
		ТипСсылки = ТипЗнч(ВидДокумента);
		// Получена ссылка на документ. Необходимо определить его вид.
	    Для каждого ТекущееЗначениеСоответсвия Из ВидыДокументовДДС Цикл
			Если ТипСсылки = Тип("ДокументСсылка."+ТекущееЗначениеСоответсвия.Ключ) Тогда
				ВидДействийДокумента.Вставить("Направление",ТекущееЗначениеСоответсвия.Значение);
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		// Специфическая обработка
		Если ТипСсылки = Тип("ДокументСсылка.АвансовыйОтчет") тогда
			ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииРасчет);
			Возврат ВидДействийДокумента;
		ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ВозвратТоваровПоставщику") тогда
			ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииВозврат);
			Возврат ВидДействийДокумента;
		КонецЕсли;
	КонецЕсли; 
	


	Если ЗначениеЗаполнено(ВидОперации) тогда

		//Определение вида операции

		РасчетВозвратПоВидуОпераций = Новый Соответствие();

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику													 ,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю									 ,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя													 ,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПоставщиком									 ,ВидОперацииВозврат);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником								 ,ВидОперацииВозврат);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствРаботником	 								 ,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ОплатаПоставщику					 ,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю	 ,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя				 ,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратДенежныхСредствПоставщиком,ВидОперацииВозврат);

		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику											 ,ВидОперацииРасчет);
		РасчетВозвратПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратДенежныхСредствПокупателю							 ,ВидОперацииВозврат);
		

		ВидДействийДокумента.Вставить("РасчетыВозврат",РасчетВозвратПоВидуОпераций[ВидОперации]);

	ИначеЕсли ВидДокумента="АвансовыйОтчет" тогда
		ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииРасчет);
	ИначеЕсли ВидДокумента="ВозвратТоваровПоставщику" тогда
		ВидДействийДокумента.Вставить("РасчетыВозврат", ВидОперацииВозврат);
	Конецесли;

	Возврат ВидДействийДокумента;

КонецФункции

// Выполняет приход/расход (возврат) денег по платежным документам при расчетах с контрагентами
//
// Параметры
// ОбъектСсылка    - ДокументОбъект или ДокументСсылка - Документ для которого выполяентся операция.
// РежимПроведения - РежимПроведенияДокумента- Режим проведения документа, для регламентной процедуры - неопределено
// РасчетыВВалюте  - Булево                  - Признак расчетов в валюте
// СчетКт          - ПланСчетов.Хозрасчетный - корреспондирующий счет
//
Функция ДвижениеДенег(ДокументОбъект, СтруктураШапкиДокумента, Знач ОпределятьСостояниеРасчетов = Ложь, Отказ, Заголовок,
			БазовоеСодержаниеПроводки = "", НомерЖурнала = "", РеестрПлатежей = Неопределено, ПереворачиватьОтрицательныеПроводки = Ложь) Экспорт

	Перем ВидОперации;
	
	//Подготовим реестр платежей по данным документа
	Если РеестрПлатежей = Неопределено Тогда
		РеестрПлатежей = УправлениеДенежнымиСредствами.ПодготовитьТаблицуОплат(СтруктураШапкиДокумента);
	КонецЕсли; 

	Если РеестрПлатежей.Количество() = 0 тогда
		//Расчеты отсутствуют
		Возврат Истина;
	КонецЕсли;

	//Получение основных данных документа для фильтра остатков
	Организация         = СтруктураШапкиДокумента.Организация;
	ДатаДока            = СтруктураШапкиДокумента.Дата;
	Если СтруктураШапкиДокумента.ВидДокумента = "КорректировкаДолга" Тогда
		НаправлениеДвижения = ?(СтруктураШапкиДокумента.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская,"Поступление","Выбытие");
	Иначе	
		НаправлениеДвижения = ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(СтруктураШапкиДокумента.ВидДокумента).Направление;
	КонецЕсли; 
	ЭтоВозврат          = СтруктураШапкиДокумента.ЭтоВозврат;
	СтруктураШапкиДокумента.Свойство("ВидОперации", ВидОперации);
	
	
	//Таблица значений для занесения промежуточных расчетов
	РеестрПроводок = РеестрПлатежей.Скопировать();
	РеестрПроводок.Колонки.Добавить("РезультатРаспределения",Новый ОписаниеТипов("Булево"));

	Если ОпределятьСостояниеРасчетов тогда
		
		//Оценка текущего состояния расчетов по БУ для каждого счета из счетов оплаты в документе.
		РеестрПроводок.Очистить();
		
		//Для банковских документов дата движения может отличаться
		МоментДокумента = Новый МоментВремени(ДатаДока,СтруктураШапкиДокумента.Ссылка);

		ПлатежиСвернуто = РеестрПлатежей.Скопировать();
		ПлатежиСвернуто.Свернуть("Контрагент,ДоговорКонтрагента,Сделка,СчетОплаты,ВалютаВзаиморасчетов","СуммаВзаиморасчетов");

		РеестрЗадолженности = ПлатежиСвернуто.СкопироватьКолонки();

		//Дополним реестр задолженностей необходимыми колонками
		ТекущаяЗадолженность = Новый ТаблицаЗначений;
		ТекущаяЗадолженность.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		ТекущаяЗадолженность.Колонки.Добавить("Субконто1");
		ТекущаяЗадолженность.Колонки.Добавить("Субконто2");
		ТекущаяЗадолженность.Колонки.Добавить("Субконто3");
		ТекущаяЗадолженность.Колонки.Добавить("Валюта");
		ТекущаяЗадолженность.Колонки.Добавить("СуммаОстаток", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
		ТекущаяЗадолженность.Колонки.Добавить("ВалютнаяСуммаОстаток", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));		
		
		ОбщегоНазначенияБПВызовСервера.ДополнитьКолонкиТаблицыЗначений(РеестрЗадолженности,ТекущаяЗадолженность);
		ОбщегоНазначенияБПВызовСервера.ДополнитьКолонкиТаблицыЗначений(РеестрПроводок,ТекущаяЗадолженность);

		//Получим таблицу задолженностей по данным бух. учета
		Для каждого ХарактеристикиПлатежа из ПлатежиСвернуто цикл

			//Для пустой оплаты не нужны остатки
			Если ХарактеристикиПлатежа.СуммаВзаиморасчетов=0 тогда
				Продолжить;
			КонецЕсли;

			СчетОплаты = ХарактеристикиПлатежа.СчетОплаты;
			Если НЕ ЗначениеЗаполнено(СчетОплаты) тогда
				//Если счет оплаты не заполнен (возможно при возврате), остатки оценивать не надо.
				Продолжить;
			КонецЕсли;

			//Определяем режим получения остатков
			ПолучитьОстаткиВВалюте = НЕ(ХарактеристикиПлатежа.ВалютаВзаиморасчетов = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета) 
				                     И ХарактеристикиПлатежа.СчетОплаты.Валютный;

			//Определяем фильтр по аналитике
			АналитикаСчета = Новый массив(3);

			Для каждого Субконто из ХарактеристикиПлатежа.СчетОплаты.ВидыСубконто Цикл

				Если Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты тогда
					АналитикаСчета[Субконто.НомерСтроки-1] = ХарактеристикиПлатежа.Контрагент;
				ИначеЕсли Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры тогда
					АналитикаСчета[Субконто.НомерСтроки-1] = ХарактеристикиПлатежа.ДоговорКонтрагента;
				ИначеЕсли Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами тогда
					АналитикаСчета[Субконто.НомерСтроки-1] = ХарактеристикиПлатежа.Сделка;
				КонецЕсли;

			КонецЦикла;

			УсловиеВалюта = Неопределено;

			Если ПолучитьОстаткиВВалюте Тогда
				УсловиеВалюта = ХарактеристикиПлатежа.ВалютаВзаиморасчетов;
			КонецЕсли;

			ЗнакФильтрПоОстаткам = ?(НаправлениеДвижения = "Поступление",1,-1);

			НомерСубконтоРасчетныеДокументы = 0;

			Если НЕ СчетОплаты.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами,"ВидСубконто")=Неопределено тогда
				НомерСубконтоРасчетныеДокументы = СчетОплаты.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами,"ВидСубконто").НомерСтроки;
			КонецЕсли;

			Если Не(НомерСубконтоРасчетныеДокументы=0) 
				и ХарактеристикиПлатежа.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам
				и НЕ ЗначениеЗаполнено(ХарактеристикиПлатежа.Сделка) тогда
				Продолжить;

			КонецЕсли;

			ТекущаяЗадолженность = 	БухгалтерскийУчетРед12.ПолучитьОстатокПоСчету(Организация,МоментДокумента,СчетОплаты,УсловиеВалюта ,АналитикаСчета[0],АналитикаСчета[1],АналитикаСчета[2],ЗнакФильтрПоОстаткам);

			Если не НомерСубконтоРасчетныеДокументы = 0 тогда
				УпорядочитьТаблицуПоДокументу(ТекущаяЗадолженность,"Субконто" + НомерСубконтоРасчетныеДокументы);
			КонецЕсли;

			Если ТекущаяЗадолженность.Количество() > 0 тогда

				Для каждого СтрокаЗадолженности из ТекущаяЗадолженность цикл

					СтрокаРеестра = РеестрЗадолженности.Добавить();

					Для каждого Колонка из ПлатежиСвернуто.Колонки Цикл
						СтрокаРеестра[Колонка.Имя] = ХарактеристикиПлатежа[Колонка.Имя];
					КонецЦикла;

					Для каждого Колонка из ТекущаяЗадолженность.Колонки Цикл
						СтрокаРеестра[Колонка.Имя] = СтрокаЗадолженности[Колонка.Имя];
					КонецЦикла;

				КонецЦикла;

			КонецЕсли;

		КонецЦикла;

		СуммовыеРазницыПоДокументам = Неопределено;

		УправлениеВзаиморасчетами.ФИФОПоРасчетам(РеестрПроводок, РеестрПлатежей,РеестрЗадолженности,СтруктураШапкиДокумента,"СчетОплаты", СуммовыеРазницыПоДокументам, НаправлениеДвижения, Заголовок);	

	КонецЕсли;

	ПроводкиБУ = ДокументОбъект.Движения.Хозрасчетный;

	БазовыйСуфиксСчетаРасчетов = ?(НаправлениеДвижения = "Поступление","Кт","Дт");
	БазовыйСуфиксКоррСчета     = ?(НаправлениеДвижения = "Поступление","Дт","Кт");
	
	//Проводки по результатам распределения
	Для каждого РезультатРаспределения из РеестрПроводок Цикл

		Если РезультатРаспределения.ВалютнаяСумма=0 и РезультатРаспределения.ГривневаяСумма=0 и РезультатРаспределения.СуммаВзаиморасчетов=0 тогда
			Продолжить;
		КонецЕслИ;
		
		Если ПереворачиватьОтрицательныеПроводки Тогда
			СуфиксСчетаРасчетов = ?(РезультатРаспределения.ГривневаяСумма>0,БазовыйСуфиксСчетаРасчетов,БазовыйСуфиксКоррСчета);
			СуфиксКоррСчета     = ?(РезультатРаспределения.ГривневаяСумма>0,БазовыйСуфиксКоррСчета,БазовыйСуфиксСчетаРасчетов);
		Иначе
			СуфиксСчетаРасчетов = БазовыйСуфиксСчетаРасчетов;
			СуфиксКоррСчета     = БазовыйСуфиксКоррСчета;
		КонецЕсли; 

		Если РезультатРаспределения.РезультатРаспределения тогда

			
			Если не (РеестрПроводок.Колонки.Найти("СодержаниеПроводки") = Неопределено) и ЗначениеЗаполнено(РезультатРаспределения.СодержаниеПроводки) тогда
				СодержаниеПроводки = РезультатРаспределения.СодержаниеПроводки;
			ИначеЕсли ЗначениеЗаполнено(БазовоеСодержаниеПроводки) тогда
				СодержаниеПроводки = БазовоеСодержаниеПроводки;
			Иначе
				СодержаниеПроводки  = ?(ЭтоВозврат,?(ТипЗнч(РезультатРаспределения.Сделка) =Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"),НСтр("ru='Возврат оплаты';uk='Повернення оплати'",Локализация.КодЯзыкаИнформационнойБазы()),НСтр("ru='Возврат аванса';uk='Повернення авансу'",Локализация.КодЯзыкаИнформационнойБазы())),НСтр("ru='Оплата';uk='Оплата'",Локализация.КодЯзыкаИнформационнойБазы()));
			КонецЕсли;

			СчетРасчетов = ?(НЕ ЗначениеЗаполнено(РезультатРаспределения.СчетОплаты),РезультатРаспределения.СчетАванса,РезультатРаспределения.СчетОплаты);

		Иначе

			Если не (РеестрПроводок.Колонки.Найти("СодержаниеПроводки") = Неопределено) и ЗначениеЗаполнено(РезультатРаспределения.СодержаниеПроводки) тогда
				СодержаниеПроводки = РезультатРаспределения.СодержаниеПроводки;
			ИначеЕсли ЗначениеЗаполнено(БазовоеСодержаниеПроводки) тогда
				СодержаниеПроводки = БазовоеСодержаниеПроводки;
			Иначе
				СодержаниеПроводки  = ?(ЭтоВозврат,НСтр("ru='Возврат';uk='Повернення'",Локализация.КодЯзыкаИнформационнойБазы()),НСтр("ru='Оплата (аванс)';uk='Оплата (аванс)'",Локализация.КодЯзыкаИнформационнойБазы()));
			КонецЕсли;

			СчетРасчетов = ?(НЕ ЗначениеЗаполнено(РезультатРаспределения.СчетАванса),РезультатРаспределения.СчетОплаты,РезультатРаспределения.СчетАванса);

		КонецЕслИ;

		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период       = ДатаДока;
		Проводка.Организация  = Организация;
		Проводка.Содержание   = СодержаниеПроводки;
		Проводка.НомерЖурнала = НомерЖурнала;

		Проводка["Счет"+СуфиксСчетаРасчетов]= СчетРасчетов;

		Если РезультатРаспределения.РезультатРаспределения тогда

			Для НомерСубконто = 1 по 3 Цикл
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет"+СуфиксСчетаРасчетов],Проводка["Субконто"+СуфиксСчетаРасчетов],НомерСубконто,РезультатРаспределения["Субконто"+НомерСубконто]);
			КонецЦикла;
			Если СчетРасчетов.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами,"ВидСубконто") = Неопределено Тогда
				РезультатРаспределения.Сделка = Неопределено;
			КонецЕсли; 

		Иначе
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет"+СуфиксСчетаРасчетов],Проводка["Субконто"+СуфиксСчетаРасчетов],"Контрагенты",РезультатРаспределения.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет"+СуфиксСчетаРасчетов],Проводка["Субконто"+СуфиксСчетаРасчетов],"Договоры",РезультатРаспределения.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет"+СуфиксСчетаРасчетов],Проводка["Субконто"+СуфиксСчетаРасчетов],"ДокументыРасчетовСКонтрагентами",?(ОпределятьСостояниеРасчетов,УправлениеВзаиморасчетами.ОпределитьДокументРасчетовСКонтрагентом(СтруктураШапкиДокумента.Ссылка,РезультатРаспределения.Сделка),РезультатРаспределения.Сделка));
		КонецЕслИ;

		Проводка["Счет"+СуфиксКоррСчета] = РезультатРаспределения.КоррСчет;

		Для НомерСубконто = 1 по 3 Цикл
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет"+СуфиксКоррСчета],Проводка["Субконто"+СуфиксКоррСчета],НомерСубконто,РезультатРаспределения["КоррСубконто"+НомерСубконто]);
		КонецЦикла;
        ЗнакСуммы = ?(ПереворачиватьОтрицательныеПроводки и РезультатРаспределения.ГривневаяСумма<0,-1,1);
		
		Проводка.Сумма = РезультатРаспределения.ГривневаяСумма*ЗнакСуммы;

		Если Проводка["Счет" + СуфиксКоррСчета].Валютный тогда
			Проводка["Валюта" + СуфиксКоррСчета]        = СтруктураШапкиДокумента.ВалютаДокумента;
			Проводка["ВалютнаяСумма" + СуфиксКоррСчета] = РезультатРаспределения .ВалютнаяСумма*ЗнакСуммы;
		КонецЕсли;

		Если Проводка["Счет" + СуфиксСчетаРасчетов].Валютный Тогда
			Проводка["Валюта" + СуфиксСчетаРасчетов]        = РезультатРаспределения.ВалютаВзаиморасчетов;
			Проводка["ВалютнаяСумма" + СуфиксСчетаРасчетов] = РезультатРаспределения.СуммаВзаиморасчетов*ЗнакСуммы;
		КонецЕсли;

		Если (ДатаДока < '2015 01 01') И (НЕ РеестрПлатежей.Колонки.Найти("НалоговоеНазначение") = Неопределено) Тогда
			
			Проводка["НалоговоеНазначение" + СуфиксКоррСчета] = РезультатРаспределения.НалоговоеНазначение;
			
			Если НЕ РезультатРаспределения.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность Тогда
				Проводка["СуммаНУ" + СуфиксКоррСчета] = Проводка.Сумма;	
			КонецЕсли;
			
			Если НЕ РеестрПлатежей.Колонки.Найти("НеОтноситьНаЗатратыПоНУ") = Неопределено
				И РезультатРаспределения.НеОтноситьНаЗатратыПоНУ = Истина Тогда
				Проводка["СуммаНУ" + СуфиксКоррСчета] = 0;		
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	
	Возврат Истина;

КонецФункции // ДвижениеДенег()

