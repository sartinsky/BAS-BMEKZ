
// Функция возвращает счета учета по выбранному объекту
//
// Параметры:
//  Организация - по которой выполняется поиск
//  Объект      - ... строительства по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета 
// 
Функция ПолучитьСчетаУчетаОбъектовСтроительства(Организация, Объект) Экспорт

	Результат = Новый Структура("СчетУчетаБУ, СчетУчетаНДС, НалоговоеНазначение");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация"      , Организация);
	Запрос.УстановитьПараметр("ПустойОбъект"     , Справочники.ОбъектыСтроительства.ПустаяСсылка());
	Запрос.УстановитьПараметр("Объект"           , Объект);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	ОбъектыСтроительстваОрганизаций.СчетБухгалтерскогоУчета    КАК СчетУчетаБУ,
	|	ОбъектыСтроительстваОрганизаций.СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|ГДЕ
	|	ОбъектыСтроительстваОрганизаций.Организация = &Организация
	|	И ОбъектыСтроительстваОрганизаций.ОбъектСтроительства = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ОбъектыСтроительстваОрганизаций.СчетБухгалтерскогоУчета,
	|	ОбъектыСтроительстваОрганизаций.СчетБухгалтерскогоУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|ГДЕ
	|	ОбъектыСтроительстваОрганизаций.Организация = &ПустаяОрганизация
	|	И ОбъектыСтроительстваОрганизаций.ОбъектСтроительства = &Объект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3,
	|	ОбъектыСтроительстваОрганизаций.СчетБухгалтерскогоУчета,
	|	ОбъектыСтроительстваОрганизаций.СчетБухгалтерскогоУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|ГДЕ
	|	ОбъектыСтроительстваОрганизаций.Организация = &Организация
	|	И ОбъектыСтроительстваОрганизаций.ОбъектСтроительства = &ПустойОбъект
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4,
	|	ОбъектыСтроительстваОрганизаций.СчетБухгалтерскогоУчета,
	|	ОбъектыСтроительстваОрганизаций.СчетБухгалтерскогоУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|ГДЕ
	|	ОбъектыСтроительстваОрганизаций.Организация = &ПустаяОрганизация
	|	И ОбъектыСтроительстваОрганизаций.ОбъектСтроительства = &ПустойОбъект
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		Результат.СчетУчетаБУ  = Выборка.СчетУчетаБУ;
		Результат.СчетУчетаНДС = Выборка.СчетУчетаНДС;

	КонецЕсли;
	
	Результат.НалоговоеНазначение = Объект.НалоговоеНазначение;

	Возврат Результат;

КонецФункции //ПолучитьСчетаУчетаОбъектовСтроительства()

// Функция определяет фактический срок использования актива (в месяцах)
// исходя из даты принятия актива к учету и даты выбытия
//
// Параметры:
//   ДатаПринятияКУчету - дата принятия актива к учету
//   ДатаВыбытия - дата выбытия актива
//
// Возвращаемое значение:
//   Число месяцев.
//
Функция ОпределитьФактическийСрокИспользования(ДатаПринятияКУчету, ДатаВыбытия) Экспорт
	
	КоличествоЛет     = Год(ДатаВыбытия) - Год(ДатаПринятияКУчету);
	КоличествоМесяцев = Месяц(ДатаВыбытия) - Месяц(ДатаПринятияКУчету);
	
	Возврат КоличествоЛет * 12 + КоличествоМесяцев;
	
КонецФункции // ОпределитьФактическийСрокИспользования()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ АМОРТИЗАЦИИ ОС

// Расчитывает сумму амортизации по указаному основному средству по бух/нал учету
//
// Параметры
//  ОсновноеСредство                            - СправочникСсылка.ОсновныеСредства - ОС, по которому 
//                                                нужно рассчитать амортизацию.
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//
// Возвращаемое значение:
//   Число - Сумма начисленной амортизации
//
Функция РасчетАмортизацииРегл(ДатаРасчета, Организация, ОсновноеСредство = Неопределено, ОтражатьВБУ = Истина, ОтражатьВНУ = Истина,
	                             ВыдаватьСообщения = Истина, Отказ = Ложь) Экспорт

	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОбъектУчета"           , Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаАмортизации.Колонки.Добавить("СчетУчета"     		, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("СчетАмортизации"    	, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("Амортизация"			, ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("АмортизацияНУ"			, ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("Метод_50_50"			, Новый ОписаниеТипов("Булево"));
	ТаблицаАмортизации.Колонки.Добавить("НалоговоеНазначение"	, Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТаблицаАмортизации.Колонки.Добавить("Местонахождение"		, Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	ТаблицаАмортизации.Колонки.Добавить("СуммаПереоценкиПропорциональнаяАмортизации", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СчетУчетаДооценокОС"	, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НачалоГода"    , НачалоГода(ДатаРасчета));
	СтруктураПараметров.Вставить("НачалоКвартала", НачалоКвартала(ДатаРасчета));
	СтруктураПараметров.Вставить("НачалоПериода" , НачалоМесяца(ДатаРасчета));
	СтруктураПараметров.Вставить("КонецПериода"  , КонецМесяца(ДатаРасчета));
	СтруктураПараметров.Вставить("Организация"   , Организация);
	СтруктураПараметров.Вставить("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	СтруктураПараметров.Вставить("Период"    	 , ДатаРасчета);
	
	СтруктураПараметров.Вставить("НачалоПериода200911" , Дата(2009,11,01));
	
	ДатаНКУ2015 = '2015 01 01';
	
	Если ОсновноеСредство = Неопределено Тогда
		
		ТекстУсловия 	= "";
		
		ТекстУсловияПроизводственные 	= "";
		
	Иначе
		
		СтруктураПараметров.Вставить("СписокОС", ОсновноеСредство);
		ТекстУсловия 	= "И ОсновноеСредство В (&СписокОС)";
		
		ТекстУсловияПроизводственные 	= "И ОсновноеСредство В (&СписокОСПроизводственные)";
		
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Для каждого КлючЗначение Из СтруктураПараметров Цикл
	
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);	
	
	КонецЦикла;
		
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаУчета"" 						КАК ТипЗаписи,
	|	СчетаБухгалтерскогоУчета.СчетУчета 	КАК Поле
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|		            &НачалоПериода,
	|		            Организация = &Организация
	|		            " + ТекстУсловия + ") КАК СчетаБухгалтерскогоУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаУчетаНачалоГода"",
	|	СчетаБухгалтерскогоУчета.СчетУчета
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|		            &НачалоГода,
	|		            Организация = &Организация
	|		            " + ТекстУсловия + ") КАК СчетаБухгалтерскогоУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаУчетаНачалоКвартала"",
	|	СчетаБухгалтерскогоУчета.СчетУчета
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|		            &НачалоКвартала,
	|		            Организация = &Организация
	|		            " + ТекстУсловия + ") КАК СчетаБухгалтерскогоУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаАмортизации"",
	|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|		            &НачалоПериода,
	|		            Организация = &Организация
	|		            " + ТекстУсловия + ") КАК СчетаБухгалтерскогоУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаАмортизацииНачалоГода"",
	|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|		            &НачалоГода,
	|		            Организация = &Организация
	|		            " + ТекстУсловия + ") КАК СчетаБухгалтерскогоУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаАмортизацииНачалоКвартала"",
	|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|		            &НачалоКвартала,
	|		            Организация = &Организация
	|		            " + ТекстУсловия + ") КАК СчетаБухгалтерскогоУчета
	|ИТОГИ ПО
	|	ТипЗаписи";
	
	ДеревоРезультатов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтруктураПараметров.Вставить("СчетаУчета"                    , Неопределено);
	СтруктураПараметров.Вставить("СчетаУчетаНачалоГода"          , Неопределено);
	СтруктураПараметров.Вставить("СчетаУчетаНачалоКвартала"      , Неопределено);
	СтруктураПараметров.Вставить("СчетаАмортизации"              , Неопределено);
	СтруктураПараметров.Вставить("СчетаАмортизацииНачалоГода"    , Неопределено);
	СтруктураПараметров.Вставить("СчетаАмортизацииНачалоКвартала", Неопределено);
	
	Для каждого СтрокаТипаЗаписи Из ДеревоРезультатов.Строки Цикл
	
		СтруктураПараметров.Вставить(СтрокаТипаЗаписи.ТипЗаписи, 
		                             СтрокаТипаЗаписи.Строки.ВыгрузитьКолонку("Поле"));	
	
	КонецЦикла;

	Если ТранзакцияАктивна() И ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
		
		ЗапросСчетовАмортизации = Новый Запрос;
		ЗапросСчетовАмортизации.УстановитьПараметр("ВнешнийИсточник", СтруктураПараметров.СчетаАмортизации);
		ЗапросСчетовАмортизации.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК СчетНачисленияАмортизации
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В(&ВнешнийИсточник)";
		ИсточникДанных = ЗапросСчетовАмортизации.Выполнить();
		
		// Блокировка регистра бухгалтерии.
		
		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы, ИсточникДанных", 
														"РегистрБухгалтерии", "Хозрасчетный", ИсточникДанных);
														
		СтруктураЗначенийБлокировки = Новый Структура("Период, Организация", 
													  Новый Диапазон(, КонецМесяца(ДатаРасчета)), Организация);
													  
		СтруктураИсточникаДанных = Новый Структура("Счет", "СчетНачисленияАмортизации");
		
		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, СтруктураИсточникаДанных);
		
	КонецЕсли;	
	
	Запрос = Новый Запрос();
	
	Для каждого КлючЗначение Из СтруктураПараметров Цикл
	
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);	
	
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СубконтоОС"    , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);	
	Запрос.УстановитьПараметр("СостояниеВвода", Перечисления.СостоянияОС.ВведеноВЭксплуатацию);	
	
	Если ОсновноеСредство <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписокОСПроизводственные", ОсновноеСредство);	
	КонецЕсли;	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ
	|	СнятыеСУчета
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета) И
	|	СостоянияОСОрганизаций.ДатаСостояния < &Период И
	|	СостоянияОСОрганизаций.Организация = &Организация " + ТекстУсловия + "
	|;
	|
	|ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	|	ЕСТЬNULL(НачислениеАмортизации.НачислятьАмортизацию, ЛОЖЬ)        КАК НачислятьАмортизацию,
	|	ЕСТЬNULL(НачислениеАмортизацииНУ.НачислятьАмортизацию, ЛОЖЬ)        КАК НачислятьАмортизациюНУ
	|ПОМЕСТИТЬ
	|   СписокОС
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|		            &НачалоПериода,
	|		            Организация = &Организация
	|		            " + ТекстУсловия + " И ОсновноеСредство НЕ В (ВЫБРАТЬ ОсновноеСредство ИЗ СнятыеСУчета)) КАК НачислениеАмортизации
	|		ПО ОсновныеСредства.Ссылка = НачислениеАмортизации.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(
	|		            &НачалоПериода,
	|		            Организация = &Организация
	|		            " + ТекстУсловия + " И ОсновноеСредство НЕ В (ВЫБРАТЬ ОсновноеСредство ИЗ СнятыеСУчета)) КАК НачислениеАмортизацииНУ
	|		ПО ОсновныеСредства.Ссылка = НачислениеАмортизацииНУ.ОсновноеСредство
	|ГДЕ
	|	(НачислениеАмортизации.НачислятьАмортизацию
	|			ИЛИ НачислениеАмортизацииНУ.НачислятьАмортизацию)
	|;
	|
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведения.Организация                                       	  КАК Организация,
	|	ПервоначальныеСведения.ОсновноеСредство                                       КАК ОсновноеСредство,
	|	ПервоначальныеСведения.ПараметрВыработки                            		  КАК ПараметрВыработки,
	|	ПервоначальныеСведения.СпособНачисленияАмортизации                            КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведения.ПервоначальнаяСтоимость                            	  КАК ПервоначальнаяСтоимость
	|ПОМЕСТИТЬ
	|   ПервоначальныеСведения
	|ИЗ	
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|		            &НачалоПериода,
	|		            Организация = &Организация
	|		            И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК ПервоначальныеСведения
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияНУ.ОсновноеСредство                             КАК ОсновноеСредство,
	|	ПервоначальныеСведенияНУ.СпособНачисленияАмортизации                  КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияНУ.НалоговаяГруппаОС                            КАК НалоговаяГруппаОС
	|ПОМЕСТИТЬ
	|   ПервоначальныеСведенияНУ
	|ИЗ	
	|			РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
	|		                    &НачалоПериода,
	|		                    Организация = &Организация
	|		                    И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК ПервоначальныеСведенияНУ
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизации.ОсновноеСредство                            КАК ОсновноеСредство,
	|	ПараметрыАмортизации.СрокИспользованияДляВычисленияАмортизации   КАК СрокИспользованияДляВычисленияАмортизации,
	|	ПараметрыАмортизации.СтоимостьДляВычисленияАмортизации           КАК СтоимостьДляВычисленияАмортизации,
	|	ПараметрыАмортизации.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПараметрыАмортизации.ЛиквидационнаяСтоимость                     КАК ЛиквидационнаяСтоимость,
	|	ПараметрыАмортизации.Период                                      КАК Период
	|ПОМЕСТИТЬ
	|   ПараметрыАмортизации
	|ИЗ	
	|			РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|		                    &НачалоПериода,
	|		                    Организация = &Организация
	|		                    И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК ПараметрыАмортизации
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииНУ.ОсновноеСредство                            КАК ОсновноеСредство,
	|	ПараметрыАмортизацииНУ.СрокИспользованияДляВычисленияАмортизации   КАК СрокИспользованияДляВычисленияАмортизации,
	|	ПараметрыАмортизацииНУ.СтоимостьДляВычисленияАмортизации           КАК СтоимостьДляВычисленияАмортизации,
	|	ПараметрыАмортизацииНУ.Период                                      КАК Период
	|ПОМЕСТИТЬ
	|   ПараметрыАмортизацииНУ
	|ИЗ	
	|			РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(
	|		                    &НачалоПериода,
	|		                    Организация = &Организация
	|		                    И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК ПараметрыАмортизацииНУ
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиАмортизации.ОсновноеСредство                             КАК ОсновноеСредство,
	|	ГрафикиАмортизации.ГрафикАмортизации                            КАК ГрафикАмортизации
	|ПОМЕСТИТЬ
	|   ГрафикиАмортизации
	|ИЗ	
	|			РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|		                    &НачалоПериода,
	|		                    Организация = &Организация
	|		                    И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК ГрафикиАмортизации
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыработкаОС.ОсновноеСредство                             КАК ОсновноеСредство,
	|	ВыработкаОС.ПараметрВыработки                            КАК ПараметрВыработки,
	|	ВыработкаОС.КоличествоОборот                             КАК КоличествоОборот
	|ПОМЕСТИТЬ
	|   ВыработкаОС
	|ИЗ	
	|			РегистрНакопления.ВыработкаОС.Обороты(
	|			                  &НачалоПериода,
	|			                  &КонецПериода, ,
	|		                      (Организация = &Организация ИЛИ Организация = &ПустаяОрганизация) И
	|			                  ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК ВыработкаОС
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтоимостьОстатки.Субконто1                             	КАК ОсновноеСредство,
	|	СтоимостьОстатки.СуммаОстатокДт							КАК СуммаОстатокДт,
	|	СтоимостьОстатки.СуммаНУОстатокДт						КАК СуммаНУОстатокДт
	|ПОМЕСТИТЬ
	|   СтоимостьОстатки
	|ИЗ	
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &НачалоПериода,
	|		                       Счет В (&СчетаУчета),
	|		                       &СубконтоОС,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК СтоимостьОстатки
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтоимостьНачалоГода.Субконто1                             	КАК ОсновноеСредство,
	|	СтоимостьНачалоГода.СуммаОстатокДт	                        КАК СуммаОстатокДт,
	|	СтоимостьНачалоГода.СуммаНУОстатокДт						КАК СуммаНУОстатокДт
	|ПОМЕСТИТЬ
	|   СтоимостьНачалоГода
	|ИЗ	
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &НачалоГода,
	|		                       Счет В (&СчетаУчетаНачалоГода),
	|		                       &СубконтоОС,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК СтоимостьНачалоГода
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтоимостьНачалоКвартала.Субконто1           	               КАК ОсновноеСредство,
	|	СтоимостьНачалоКвартала.СуммаОстатокДт		                   КАК СуммаОстатокДт,
	|	СтоимостьНачалоКвартала.СуммаНУОстатокДт					   КАК СуммаНУОстатокДт
	|ПОМЕСТИТЬ
	|   СтоимостьНачалоКвартала
	|ИЗ	
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &НачалоКвартала,
	|		                       Счет В (&СчетаУчетаНачалоКвартала),
	|		                       &СубконтоОС,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК СтоимостьНачалоКвартала
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АмортизацияОстатки.Субконто1           	               КАК ОсновноеСредство,
	|	АмортизацияОстатки.СуммаОстатокКт		               КАК СуммаОстатокКт,
	|	АмортизацияОстатки.СуммаНУОстатокКт		               КАК СуммаНУОстатокКт
	|ПОМЕСТИТЬ
	|   АмортизацияОстатки
	|ИЗ	
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &НачалоПериода,
	|		                       Счет В (&СчетаАмортизации),
	|		                       &СубконтоОС,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК АмортизацияОстатки
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АмортизацияНачалоГода.Субконто1           	               КАК ОсновноеСредство,
	|	АмортизацияНачалоГода.СуммаОстатокКт		               КАК СуммаОстатокКт,
	|	АмортизацияНачалоГода.СуммаНУОстатокКт		               КАК СуммаНУОстатокКт
	|ПОМЕСТИТЬ
	|   АмортизацияНачалоГода
	|ИЗ	
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &НачалоГода,
	|		                       Счет В (&СчетаАмортизацииНачалоГода),
	|		                       &СубконтоОС,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК АмортизацияНачалоГода
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АмортизацияНачалоКвартала.Субконто1           	               КАК ОсновноеСредство,
	|	АмортизацияНачалоКвартала.СуммаОстатокКт		               КАК СуммаОстатокКт,
	|	АмортизацияНачалоКвартала.СуммаНУОстатокКт		               КАК СуммаНУОстатокКт
	|ПОМЕСТИТЬ
	|   АмортизацияНачалоКвартала
	|ИЗ	
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &НачалоКвартала,
	|		                       Счет В (&СчетаАмортизацииНачалоКвартала),
	|		                       &СубконтоОС,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК АмортизацияНачалоКвартала
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(НачислениеАмортизацииОС.Период)  КАК Период,
	|	НачислениеАмортизацииОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ
	|   ДатыПервойАмортизации
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет КАК НачислениеАмортизацииОС
	|ГДЕ 
	|	(НачислениеАмортизацииОС.НачислятьАмортизацию) И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)
	|СГРУППИРОВАТЬ ПО 
	|	НачислениеАмортизацииОС.ОсновноеСредство
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеАмортизацииОС.Период                             КАК ДатаПервойАмортизации,
	|	НачислениеАмортизацииОС.ОсновноеСредство                   КАК ОсновноеСредство
	|ПОМЕСТИТЬ
	|   ПервоеНачислениеАмортизации
	|ИЗ
	|	ДатыПервойАмортизации
	|			ЛЕВОЕ СОЕДИНЕНИЕ 
	|				РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет КАК НачислениеАмортизацииОС
	|			ПО ДатыПервойАмортизации.ОсновноеСредство = НачислениеАмортизацииОС.ОсновноеСредство 
	|		 	 И ДатыПервойАмортизации.Период = НачислениеАмортизацииОС.Период
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпособыОтраженияРасходов.ОсновноеСредство           	        		КАК ОсновноеСредство,
	|	СпособыОтраженияРасходов.СпособыОтраженияРасходовПоАмортизации          КАК СпособыОтраженияРасходовПоАмортизации
	|ПОМЕСТИТЬ
	|   СпособыОтраженияРасходов
	|ИЗ	
	|			РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|		                    &НачалоПериода,
	|		                    Организация = &Организация
	|		                    И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК СпособыОтраженияРасходов
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;	
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленнаяАмортизация.СубконтоКт1           	        КАК ОсновноеСредство,
	|	НачисленнаяАмортизация.СуммаОборот		               	КАК СуммаОборот,
	|	НачисленнаяАмортизация.СуммаНУОборотКт	               	КАК СуммаНУОборот
	|ПОМЕСТИТЬ
	|   НачисленнаяАмортизация
	|ИЗ	
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|		                       &НачалоПериода,
	|		                       &КонецПериода, ,
	|		                       (НЕ СчетДт В (&СчетаАмортизации)), ,
	|		                       СчетКт В (&СчетаАмортизации),
	|		                       &СубконтоОС,
	|		                       Организация = &Организация
	|		                       И СубконтоКт1 В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)
	|		                       ) КАК НачисленнаяАмортизация	
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;	
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчета.ОсновноеСредство           	        КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчета.СчетУчета                              КАК СчетУчета,
	|	СчетаБухгалтерскогоУчета.СчетУчетаДооценокОС                      КАК СчетУчетаДооценокОС,
	|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации              КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ
	|   СчетаБухгалтерскогоУчета
	|ИЗ	
	|			РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|		                    &НачалоПериода,
	|		                    Организация = &Организация
	|		                    И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК СчетаБухгалтерскогоУчета
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;	
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НалоговыеНазначенияОС.ОсновноеСредство           	        КАК ОсновноеСредство,
	|	НалоговыеНазначенияОС.НалоговоеНазначение                   КАК НалоговоеНазначение
	|ПОМЕСТИТЬ
	|   НалоговыеНазначенияОС
	|ИЗ	
	|			РегистрСведений.НалоговыеНазначенияОС.СрезПоследних(
	|		                    &НачалоПериода,
	|		                    Организация = &Организация
	|		                    И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК НалоговыеНазначенияОС
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;	
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестонахождениеОС.ОсновноеСредство                             	КАК ОсновноеСредство,
	|	МестонахождениеОС.Местонахождение                       		КАК Местонахождение
	|ПОМЕСТИТЬ
	|   МестонахождениеОС
	|ИЗ	
	|			РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			                  &КонецПериода,
	|							  Организация = &Организация
	|			                  И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК МестонахождениеОС
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПереоценкаОС.ОсновноеСредство                             	КАК ОсновноеСредство,
	|	ПереоценкаОС.СуммаПереоценкиНачальныйОстаток              	КАК СуммаПереоценки,
	//|	ПереоценкаОС.СуммаПереоценкиОборот              			КАК СуммаПереоценкиОборот
	|	ПереоценкаОС.СуммаПереоценкиПриход + ПереоценкаОС.СуммаПереоценкиРасход КАК СуммаПереоценкиОборот
	|ПОМЕСТИТЬ
	|   ПереоценкаОС
	|ИЗ	
	|			РегистрНакопления.ПереоценкаОСБухгалтерскийУчет.ОстаткиИОбороты(
	|			                  &НачалоПериода, &КонецПериода, , ,
	|							  Организация = &Организация
	|			                  И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК ПереоценкаОС
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|// Для производственного способа
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОС.ОсновноеСредство  			КАК ОсновноеСредство,
	|	СостоянияОС.ДатаСостояния  				КАК ДатаСостояния
	|ПОМЕСТИТЬ
	|   СписокОСПринятыхВТекущемМесяце
	|ИЗ	
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОС
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|		            &КонецПериода,
	|		            Организация = &Организация
	|		            " + ТекстУсловияПроизводственные + ") КАК НачислениеАмортизации
	|	ПО НачислениеАмортизации.Организация = СостоянияОС.Организация
	|		И НачислениеАмортизации.ОсновноеСредство = СостоянияОС.ОсновноеСредство
	|		И (НачислениеАмортизации.НачислятьАмортизацию)
	|		И СостоянияОС.Состояние = &СостояниеВвода
	|		И (СостоянияОС.ДатаСостояния МЕЖДУ &НачалоПериода И &КонецПериода)
	|		И (СостоянияОС.ДатаСостояния > &НачалоПериода200911)
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведения.Организация                                       	  КАК Организация,
	|	ПервоначальныеСведения.ОсновноеСредство                                       КАК ОсновноеСредство,
	|	ПервоначальныеСведения.ПараметрВыработки                            		  КАК ПараметрВыработки,
	|	ПервоначальныеСведения.СпособНачисленияАмортизации                            КАК СпособНачисленияАмортизации
	|ПОМЕСТИТЬ
	|   ПервоначальныеСведенияПМ
	|ИЗ	
	|		РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПервых(
	|		            &НачалоПериода,
	|		            Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОСПринятыхВТекущемМесяце)
	|		            ) КАК ПервоначальныеСведения
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведения.Организация                                       	  КАК Организация,
	|	ПервоначальныеСведения.ОсновноеСредство                                       КАК ОсновноеСредство,
	|	ПервоначальныеСведения.СпособНачисленияАмортизации                            КАК СпособНачисленияАмортизации
	|ПОМЕСТИТЬ
	|   ПервоначальныеСведенияПМ_НУ
	|ИЗ	
	|		РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПервых(
	|		            &НачалоПериода,
	|		            Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОСПринятыхВТекущемМесяце)
	|		            ) КАК ПервоначальныеСведения
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыработкаОС.ОсновноеСредство                             КАК ОсновноеСредство,
	|	ВыработкаОС.ПараметрВыработки                            КАК ПараметрВыработки,
	|	ВыработкаОС.КоличествоОборот                             КАК КоличествоОборот
	|ПОМЕСТИТЬ
	|   ВыработкаОСПМ
	|ИЗ	
	|			РегистрНакопления.ВыработкаОС.Обороты(
	|			                  &НачалоПериода,
	|			                  &КонецПериода, ,
	|		                      (Организация = &Организация ИЛИ Организация = &ПустаяОрганизация) И
	|			                  ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОСПринятыхВТекущемМесяце)) КАК ВыработкаОС
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизации.ОсновноеСредство                            КАК ОсновноеСредство,
	|	ПараметрыАмортизации.СрокИспользованияДляВычисленияАмортизации   КАК СрокИспользованияДляВычисленияАмортизации,
	|	ПараметрыАмортизации.СтоимостьДляВычисленияАмортизации           КАК СтоимостьДляВычисленияАмортизации,
	|	ПараметрыАмортизации.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПараметрыАмортизации.ЛиквидационнаяСтоимость                     КАК ЛиквидационнаяСтоимость,
	|	ПараметрыАмортизации.Период                                      КАК Период
	|ПОМЕСТИТЬ
	|   ПараметрыАмортизацииПМ
	|ИЗ	
	|		РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПервых(
	|	                    &НачалоПериода,
	|	                    Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОСПринятыхВТекущемМесяце)) КАК ПараметрыАмортизации
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииНУ.ОсновноеСредство                            КАК ОсновноеСредство,
	|	ПараметрыАмортизацииНУ.СрокИспользованияДляВычисленияАмортизации   КАК СрокИспользованияДляВычисленияАмортизации,
	|	ПараметрыАмортизацииНУ.СтоимостьДляВычисленияАмортизации           КАК СтоимостьДляВычисленияАмортизации,
	|	ПараметрыАмортизацииНУ.Период                                      КАК Период
	|ПОМЕСТИТЬ
	|   ПараметрыАмортизацииПМ_НУ
	|ИЗ	
	|		РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПервых(
	|	                    &НачалоПериода,
	|	                    Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОСПринятыхВТекущемМесяце)) КАК ПараметрыАмортизацииНУ
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпособыОтраженияРасходов.ОсновноеСредство           	        		КАК ОсновноеСредство,
	|	СпособыОтраженияРасходов.СпособыОтраженияРасходовПоАмортизации          КАК СпособыОтраженияРасходовПоАмортизации
	|ПОМЕСТИТЬ
	|   СпособыОтраженияРасходовПМ
	|ИЗ	
	|			РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПервых(
	|		                    &НачалоПериода,
	|		                    Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОСПринятыхВТекущемМесяце)) КАК СпособыОтраженияРасходов
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;	
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленнаяАмортизация.СубконтоКт1           	        КАК ОсновноеСредство,
	|	НачисленнаяАмортизация.СуммаОборот		               	КАК СуммаОборот,
	|	НачисленнаяАмортизация.СуммаНУОборотКт		            КАК СуммаНУОборот
	|ПОМЕСТИТЬ
	|   НачисленнаяАмортизацияПМ
	|ИЗ	
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|		                       &НачалоПериода,
	|		                       &КонецПериода, ,
	|		                       (НЕ СчетДт В (&СчетаАмортизации)), ,
	|		                       СчетКт В (&СчетаАмортизации),
	|		                       &СубконтоОС,
	|		                       Организация = &Организация
	|		                       И СубконтоКт1 В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОСПринятыхВТекущемМесяце)
	|		                       ) КАК НачисленнаяАмортизация
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;	
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчета.ОсновноеСредство           	        КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчета.СчетУчета                              КАК СчетУчета,
	|	СчетаБухгалтерскогоУчета.СчетУчетаДооценокОС                      КАК СчетУчетаДооценокОС,
	|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации              КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ
	|   СчетаБухгалтерскогоУчетаПМ
	|ИЗ	
	|			РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПервых(
	|		                    &НачалоПериода,
	|		                    Организация = &Организация
	|		                    И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОСПринятыхВТекущемМесяце)) КАК СчетаБухгалтерскогоУчета
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;	
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НалоговыеНазначенияОС.ОсновноеСредство           	        КАК ОсновноеСредство,
	|	НалоговыеНазначенияОС.НалоговоеНазначение                   КАК НалоговоеНазначение
	|ПОМЕСТИТЬ
	|   НалоговыеНазначенияОСПМ
	|ИЗ	
	|			РегистрСведений.НалоговыеНазначенияОС.СрезПервых(
	|		                    &НачалоПериода,
	|		                    Организация = &Организация
	|		                    И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОСПринятыхВТекущемМесяце)) КАК НалоговыеНазначенияОС
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;	
	|	
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МестонахождениеОС.ОсновноеСредство                             	КАК ОсновноеСредство,
	|	МестонахождениеОС.Местонахождение                       		КАК Местонахождение
	|ПОМЕСТИТЬ
	|   МестонахождениеОСПМ
	|ИЗ	
	|			РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|			                  &КонецПериода,
	|							  Организация = &Организация
	|			                  И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОСПринятыхВТекущемМесяце)) КАК МестонахождениеОС
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|	
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПереоценкаОС.ОсновноеСредство                             	КАК ОсновноеСредство,
	|	ПереоценкаОС.СуммаПереоценкиНачальныйОстаток              	КАК СуммаПереоценки,
	//|	ПереоценкаОС.СуммаПереоценкиОборот              			КАК СуммаПереоценкиОборот
	|	ПереоценкаОС.СуммаПереоценкиПриход + ПереоценкаОС.СуммаПереоценкиРасход КАК СуммаПереоценкиОборот
	|ПОМЕСТИТЬ
	|   ПереоценкаОСПМ
	|ИЗ	
	|			РегистрНакопления.ПереоценкаОСБухгалтерскийУчет.ОстаткиИОбороты(
	|			                  &НачалоПериода, &КонецПериода, , ,
	|							  Организация = &Организация
	|			                  И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОСПринятыхВТекущемМесяце)) КАК ПереоценкаОС
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|ВЫБРАТЬ
	|	ПервоначальныеСведения.ОсновноеСредство                                       КАК ОсновноеСредство,
	|	СписокОС.НачислятьАмортизацию                                       		  КАК НачислятьАмортизацию,
	|	СписокОС.НачислятьАмортизациюНУ                                       		  КАК НачислятьАмортизациюНУ,
	|	ПервоначальныеСведения.СпособНачисленияАмортизации                            КАК СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияНУ.СпособНачисленияАмортизации, ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка)) КАК СпособНачисленияАмортизацииНУ,
	|	ЕСТЬNULL(ПараметрыАмортизации.СрокИспользованияДляВычисленияАмортизации, 0)   КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизации.СтоимостьДляВычисленияАмортизации, 0)           КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизации.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизации.ЛиквидационнаяСтоимость, 0)                     КАК ЛиквидационнаяСтоимость,
	|	ЕСТЬNULL(ПараметрыАмортизацииНУ.СрокИспользованияДляВычисленияАмортизации, 0) КАК СрокИспользованияДляВычисленияАмортизацииНУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииНУ.СтоимостьДляВычисленияАмортизации, 0)         КАК СтоимостьДляВычисленияАмортизацииНУ,
	|	ПараметрыАмортизации.Период                                                   КАК Период,
	|	ПараметрыАмортизацииНУ.Период                                                 КАК ПериодНУ,
	|	ПервоначальныеСведения.ПервоначальнаяСтоимость                            	  КАК ПервоначальнаяСтоимость,
	|	ПервоеНачислениеАмортизации.ДатаПервойАмортизации                             КАК ДатаПервойАмортизации,
	|	ЕСТЬNULL(ВыработкаОС.КоличествоОборот, 0)                                     КАК ТекущийОбъемПродукцииРабот,
	|	СпособыОтраженияРасходов.СпособыОтраженияРасходовПоАмортизации                КАК СпособыОтраженияРасходовПоАмортизации,
	|	ГрафикиАмортизации.ГрафикАмортизации                                          КАК ГрафикАмортизации,
	|	ЕСТЬNULL(СтоимостьОстатки.СуммаОстатокДт, 0) 
	|		- ЕСТЬNULL(АмортизацияОстатки.СуммаОстатокКт, 0)                          КАК СтоимостьКонечныйОстаток,
	|	ЕСТЬNULL(НачисленнаяАмортизация.СуммаОборот, 0)                               КАК АмортизацияОборот,
	|	ЕСТЬNULL(СтоимостьНачалоГода.СуммаОстатокДт, 0) 
	|		- ЕСТЬNULL(АмортизацияНачалоГода.СуммаОстатокКт, 0)                       КАК СтоимостьНаНачалоГода,
	|	ЕСТЬNULL(СтоимостьНачалоКвартала.СуммаОстатокДт, 0) 
	|		- ЕСТЬNULL(АмортизацияНачалоКвартала.СуммаОстатокКт, 0)                   КАК СтоимостьНаНачалоКвартала,
	|	ЕСТЬNULL(СтоимостьОстатки.СуммаНУОстатокДт, 0) 
	|		- ЕСТЬNULL(АмортизацияОстатки.СуммаНУОстатокКт, 0)                        КАК СтоимостьКонечныйОстатокНУ,
	|	ЕСТЬNULL(НачисленнаяАмортизация.СуммаНУОборот, 0)                             КАК АмортизацияОборотНУ,
	|	ЕСТЬNULL(СтоимостьНачалоГода.СуммаНУОстатокДт, 0) 
	|		- ЕСТЬNULL(АмортизацияНачалоГода.СуммаНУОстатокКт, 0)                     КАК СтоимостьНаНачалоГодаНУ,
	|	ЕСТЬNULL(СтоимостьНачалоКвартала.СуммаНУОстатокДт, 0) 
	|		- ЕСТЬNULL(АмортизацияНачалоКвартала.СуммаНУОстатокКт, 0)                 КАК СтоимостьНаНачалоКварталаНУ,
	|	СостоянияОС.ДатаСостояния                                                     КАК ДатаВводаВЭксплуатацию,
	|	НалоговыеНазначенияОС.НалоговоеНазначение                                     КАК НалоговоеНазначение,
	|	МестонахождениеОС.Местонахождение                                             КАК Местонахождение,
	|	ЕСТЬNULL(ПереоценкаОС.СуммаПереоценки, 0)          							  КАК СуммаПереоценки,
	|	ЕСТЬNULL(ПереоценкаОС.СуммаПереоценкиОборот, 0)        						  КАК СуммаПереоценкиОборот,
	|	СчетаБухгалтерскогоУчета.СчетУчета                                            КАК СчетУчета,
	|	СчетаБухгалтерскогоУчета.СчетУчетаДооценокОС                      			  КАК СчетУчетаДооценокОС,
	|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации                            КАК СчетНачисленияАмортизации
	|ИЗ
	|	ПервоначальныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			СписокОС
	|		ПО ПервоначальныеСведения.ОсновноеСредство = СписокОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			ПервоначальныеСведенияНУ
	|		ПО ПервоначальныеСведения.ОсновноеСредство = ПервоначальныеСведенияНУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			ПараметрыАмортизации
	|		ПО ПервоначальныеСведения.ОсновноеСредство = ПараметрыАмортизации.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			ПараметрыАмортизацииНУ
	|		ПО ПервоначальныеСведения.ОсновноеСредство = ПараметрыАмортизацииНУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			ГрафикиАмортизации
	|		ПО ПервоначальныеСведения.ОсновноеСредство = ГрафикиАмортизации.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			ВыработкаОС
	|		ПО ПервоначальныеСведения.ОсновноеСредство = ВыработкаОС.ОсновноеСредство
	|			И ПервоначальныеСведения.ПараметрВыработки = ВыработкаОС.ПараметрВыработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			СтоимостьОстатки
	|		ПО ПервоначальныеСведения.ОсновноеСредство = СтоимостьОстатки.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			СтоимостьНачалоГода
	|		ПО ПервоначальныеСведения.ОсновноеСредство = СтоимостьНачалоГода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			СтоимостьНачалоКвартала
	|		ПО ПервоначальныеСведения.ОсновноеСредство = СтоимостьНачалоКвартала.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			АмортизацияОстатки
	|		ПО ПервоначальныеСведения.ОсновноеСредство = АмортизацияОстатки.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			АмортизацияНачалоГода
	|		ПО ПервоначальныеСведения.ОсновноеСредство = АмортизацияНачалоГода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			АмортизацияНачалоКвартала
	|		ПО ПервоначальныеСведения.ОсновноеСредство = АмортизацияНачалоКвартала.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			ПервоеНачислениеАмортизации
	|		ПО ПервоначальныеСведения.ОсновноеСредство = ПервоеНачислениеАмортизации.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			СпособыОтраженияРасходов
	|		ПО ПервоначальныеСведения.ОсновноеСредство = СпособыОтраженияРасходов.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			НачисленнаяАмортизация
	|		ПО ПервоначальныеСведения.ОсновноеСредство = НачисленнаяАмортизация.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОС
	|		ПО ПервоначальныеСведения.ОсновноеСредство = СостоянияОС.ОсновноеСредство
	|			И ПервоначальныеСведения.Организация = СостоянияОС.Организация
	|			И (СостоянияОС.Состояние = &СостояниеВвода)
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			СчетаБухгалтерскогоУчета
	|		ПО ПервоначальныеСведения.ОсновноеСредство = СчетаБухгалтерскогоУчета.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			НалоговыеНазначенияОС
	|		ПО ПервоначальныеСведения.ОсновноеСредство = НалоговыеНазначенияОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			МестонахождениеОС
	|		ПО ПервоначальныеСведения.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			ПереоценкаОС
	|		ПО ПервоначальныеСведения.ОсновноеСредство = ПереоценкаОС.ОсновноеСредство
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СписокОСПринятыхВТекущемМесяце.ОсновноеСредство 									КАК ОсновноеСредство,
	|	ИСТИНА                                       		  КАК НачислятьАмортизацию,
	|	ВЫБОР 
	|		КОГДА  
	|			ЕСТЬNULL(ПервоначальныеСведенияПМ_НУ.СпособНачисленияАмортизации,
	|						ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка)) = 
	|						ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Производственный) 
	|		
	|	ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ 														КАК НачислятьАмортизациюНУ,
	|	ПервоначальныеСведенияПМ.СпособНачисленияАмортизации 								КАК СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияПМ_НУ.СпособНачисленияАмортизации, 
	|					ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПустаяСсылка)) КАК СпособНачисленияАмортизацииНУ,

	|	ЕСТЬNULL(ПараметрыАмортизацииПМ.СрокИспользованияДляВычисленияАмортизации, 0)   	КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииПМ.СтоимостьДляВычисленияАмортизации, 0)           	КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииПМ.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) 	КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииПМ.ЛиквидационнаяСтоимость, 0)                     	КАК ЛиквидационнаяСтоимость,
	|	ЕСТЬNULL(ПараметрыАмортизацииПМ_НУ.СрокИспользованияДляВычисленияАмортизации, 0)   	КАК СрокИспользованияДляВычисленияАмортизацииНУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииПМ_НУ.СтоимостьДляВычисленияАмортизации, 0)           	КАК СтоимостьДляВычисленияАмортизацииНУ,
	|	ПараметрыАмортизацииПМ.Период                                                   	КАК Период,
	|	ПараметрыАмортизацииПМ_НУ.Период                                                   	КАК ПериодНУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииПМ.СтоимостьДляВычисленияАмортизации, 0)           	КАК ПервоначальнаяСтоимость,
	|	NULL                             													КАК ДатаПервойАмортизации,
	|	ЕСТЬNULL(ВыработкаОСПМ.КоличествоОборот, 0)                                     	КАК ТекущийОбъемПродукцииРабот,
	|	СпособыОтраженияРасходовПМ.СпособыОтраженияРасходовПоАмортизации                	КАК СпособыОтраженияРасходовПоАмортизации,
	|	NULL                                          										КАК ГрафикАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииПМ.СтоимостьДляВычисленияАмортизации, 0)           	КАК СтоимостьКонечныйОстаток,
	|	ЕСТЬNULL(НачисленнаяАмортизацияПМ.СуммаОборот, 0)                               	КАК АмортизацияОборот,
	|	0														                      		КАК СтоимостьНаНачалоГода,
	|	0														                      		КАК СтоимостьНаНачалоКвартала,
	|	ЕСТЬNULL(ПараметрыАмортизацииПМ_НУ.СтоимостьДляВычисленияАмортизации, 0)           	КАК СтоимостьКонечныйОстатокНУ,
	|	ЕСТЬNULL(НачисленнаяАмортизацияПМ.СуммаНУОборот, 0)                               	КАК АмортизацияОборотНУ,
	|	0														                      		КАК СтоимостьНаНачалоГодаНУ,
	|	0														                      		КАК СтоимостьНаНачалоКварталаНУ,
	|	СписокОСПринятыхВТекущемМесяце.ДатаСостояния                                  		КАК ДатаВводаВЭксплуатацию,
	|	НалоговыеНазначенияОСПМ.НалоговоеНазначение                                     КАК НалоговоеНазначение,
	|	МестонахождениеОСПМ.Местонахождение		            							  	КАК Местонахождение,
	|	ЕСТЬNULL(ПереоценкаОСПМ.СуммаПереоценки, 0)            							  	КАК СуммаПереоценки,
	|	ЕСТЬNULL(ПереоценкаОСПМ.СуммаПереоценкиОборот, 0)            						КАК СуммаПереоценкиОборот,
	|	СчетаБухгалтерскогоУчетаПМ.СчетУчета                                            	КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаПМ.СчетУчетаДооценокОС                      					КАК СчетУчетаДооценокОС,
	|	СчетаБухгалтерскогоУчетаПМ.СчетНачисленияАмортизации                            	КАК СчетНачисленияАмортизации
	|ИЗ
	|	СписокОСПринятыхВТекущемМесяце
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|		ПервоначальныеСведенияПМ
	|		ПО СписокОСПринятыхВТекущемМесяце.ОсновноеСредство = ПервоначальныеСведенияПМ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|		ПервоначальныеСведенияПМ_НУ
	|		ПО СписокОСПринятыхВТекущемМесяце.ОсновноеСредство = ПервоначальныеСведенияПМ_НУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			ВыработкаОСПМ
	|		ПО ПервоначальныеСведенияПМ.ОсновноеСредство = ВыработкаОСПМ.ОсновноеСредство
	|			И ПервоначальныеСведенияПМ.ПараметрВыработки = ВыработкаОСПМ.ПараметрВыработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|		ПараметрыАмортизацииПМ
	|		ПО СписокОСПринятыхВТекущемМесяце.ОсновноеСредство = ПараметрыАмортизацииПМ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|		ПараметрыАмортизацииПМ_НУ
	|		ПО СписокОСПринятыхВТекущемМесяце.ОсновноеСредство = ПараметрыАмортизацииПМ_НУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			НачисленнаяАмортизацияПМ
	|		ПО СписокОСПринятыхВТекущемМесяце.ОсновноеСредство = НачисленнаяАмортизацияПМ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			СпособыОтраженияРасходовПМ
	|		ПО СписокОСПринятыхВТекущемМесяце.ОсновноеСредство = СпособыОтраженияРасходовПМ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			СчетаБухгалтерскогоУчетаПМ
	|		ПО СписокОСПринятыхВТекущемМесяце.ОсновноеСредство = СчетаБухгалтерскогоУчетаПМ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			НалоговыеНазначенияОСПМ
	|		ПО СписокОСПринятыхВТекущемМесяце.ОсновноеСредство = НалоговыеНазначенияОСПМ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			МестонахождениеОСПМ
	|		ПО СписокОСПринятыхВТекущемМесяце.ОсновноеСредство = МестонахождениеОСПМ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			ПереоценкаОСПМ
	|		ПО СписокОСПринятыхВТекущемМесяце.ОсновноеСредство = ПереоценкаОСПМ.ОсновноеСредство
	| ГДЕ ПервоначальныеСведенияПМ.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Производственный)
	|";
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();
	
	ТаблицаГрафиков = ПолучитьТаблицуГрафиков();

	Пока ВыборкаПоОС.Следующий() Цикл
		
		НачислятьАмортизацию 	= ВыборкаПоОС.НачислятьАмортизацию;
		НачислятьАмортизациюНУ 	= ВыборкаПоОС.НачислятьАмортизациюНУ;
		
		НачислятьАмортизацию = НачислятьАмортизацию И ОтражатьВБУ;
		НачислятьАмортизациюНУ = НачислятьАмортизациюНУ И ОтражатьВНУ;
		
		СпособНачисленияАмортизацииНУ = ВыборкаПоОС.СпособНачисленияАмортизацииНУ;
		Если НЕ ЗначениеЗаполнено(СпособНачисленияАмортизацииНУ) Тогда
			СпособНачисленияАмортизацииНУ  = ВыборкаПоОС.СпособНачисленияАмортизации;
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СтоимостьДляВычисленияАмортизацииНУ) И НачислятьАмортизациюНУ Тогда
			
			НачислятьАмортизациюНУ = Ложь;	
			
		КонецЕсли;	
		
		Если ОтражатьВБУ И (ВыборкаПоОС.АмортизацияОборот > 0) И НЕ ЗначениеЗаполнено(ВыборкаПоОС.СуммаПереоценкиОборот) Тогда
			
			Если ВыдаватьСообщения Тогда
				
				Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для основного средства %1 амортизация в этом месяце уже начислялась';uk='Бух. розрахунок амортизації: для основного засобу %1 амортизація в цьому місяці вже нараховувалася'"), ВыборкаПоОС.ОсновноеСредство));
				
			КонецЕсли;
			
			Продолжить; // по указанному ОС в этом месяце уже начисляли амортизацию 
			
		КонецЕсли;

		Если НачислятьАмортизациюНУ И ЗначениеЗаполнено(ВыборкаПоОС.АмортизацияОборотНУ) Тогда
			
			Если ВыдаватьСообщения Тогда
				
				Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для основного средства %1 амортизация в этом месяце уже начислялась';uk='Под. розрахунок амортизації: для основного засобу %1 амортизація в цьому місяці вже нараховувалася'"), ВыборкаПоОС.ОсновноеСредство));
				
			КонецЕсли;
			
			НачислятьАмортизациюНУ = Ложь;; // по указанному ОС в этом месяце уже начисляли амортизацию 
			
			Если НЕ НачислятьАмортизацию Тогда
				Продолжить;
			КонецЕсли;	
			
		КонецЕсли;
		
		Если НачислятьАмортизацию И НЕ ЗначениеЗаполнено(ВыборкаПоОС.СпособНачисленияАмортизации) Тогда
			
			Если ВыдаватьСообщения Тогда
				
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для основного средства %1 не указан способ амортизации';uk='Бух. розрахунок амортизації: для основного засобу %1 не вказаний спосіб амортизації'"), ВыборкаПоОС.ОсновноеСредство);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;

		Если НачислятьАмортизациюНУ И НЕ ЗначениеЗаполнено(СпособНачисленияАмортизацииНУ) Тогда
			
			Если ВыдаватьСообщения Тогда
				
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для основного средства %1 не указан способ амортизации';uk='Под. розрахунок амортизації: для основного засобу %1 не вказаний спосіб амортизації'"), ВыборкаПоОС.ОсновноеСредство);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если НачислятьАмортизациюНУ 
				И СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииОС.Производственный 
				И НачалоМесяца(ДатаРасчета) >= ДатаНКУ2015 
				И НачалоМесяца(ДатаРасчета) < Дата('20200401') Тогда
			Если ВыдаватьСообщения Тогда
				
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для основного средства %1 указан недопустимый производственный метод начисления амортизации. Измените метод документом ""Изменение параметров начисления амортизации ОС"". ';uk='Под. розрахунок амортизації: для основних засобів %1 вказано некоректний виробничий метод нарахування амортизації. Змініть метод документом ""Зміна параметрів нарахування амортизації ОЗ"". '"), ВыборкаПоОС.ОсновноеСредство);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если НачислятьАмортизациюНУ И ВыборкаПоОС.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность И НачалоМесяца(ДатаРасчета) >= ДатаНКУ2015 Тогда
			
			НачислятьАмортизациюНУ = Ложь;	
			
			Если ВыдаватьСообщения Тогда
				
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для основного средства %1 указано нехоз. налоговое назначение. Амортизация (НУ) не начислена.';uk='Под. розрахунок амортизації: для основних засобів %1 зазначено негосп. податкове призначення. Амортизація (ПО) не нарахована.'"), ВыборкаПоОС.ОсновноеСредство);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , );
				
			КонецЕсли;
							 
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) И НачислятьАмортизацию Тогда
			
			Если ВыдаватьСообщения Тогда
				
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для основного средства %1 стоимость для вычисления амортизации равна 0';uk='Бух. розрахунок амортизації: для основного засобу %1 вартість для обчислення амортизації дорівнює 0'"), ВыборкаПоОС.ОсновноеСредство);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		

		
		СуммаАмортизации = 0;
		
		СуммаАмортизацииНУ = 0;
		
		Метод_50_50      = Ложь;
		
		СтоимостьДляВычисленияАмортизации 			= ВыборкаПоОС.СтоимостьДляВычисленияАмортизации;
		ЛиквидационнаяСтоимость						= ВыборкаПоОС.ЛиквидационнаяСтоимость;
		АмортизируемаяСтоимость	 					= СтоимостьДляВычисленияАмортизации - ЛиквидационнаяСтоимость;
		СрокИспользованияДляВычисленияАмортизации	= ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации;
		
		СтоимостьДляВычисленияАмортизацииНУ 		= ВыборкаПоОС.СтоимостьДляВычисленияАмортизацииНУ;
		АмортизируемаяСтоимостьНУ	 				= СтоимостьДляВычисленияАмортизацииНУ - ЛиквидационнаяСтоимость;
		СрокИспользованияДляВычисленияАмортизацииНУ	= ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизацииНУ;
		
		ТекущийОбъемПродукцииРабот					= ВыборкаПоОС.ТекущийОбъемПродукцииРабот;
		ОбъемПродукцииРаботДляВычисленияАмортизации	= ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации;
		ДатаВводаВЭксплуатацию                      = ВыборкаПоОС.ДатаВводаВЭксплуатацию;
		
		Если ВыборкаПоОС.ДатаВводаВЭксплуатацию = NULL Тогда
	    	ДатаВводаВЭксплуатациюНУ 				= NULL;
		Иначе	
			ДатаВводаВЭксплуатациюНУ 				= Макс(ВыборкаПоОС.ДатаВводаВЭксплуатацию, '20110331');
		КонецЕсли;	
		
		СтоимостьКонечныйОстаток					= ВыборкаПоОС.СтоимостьКонечныйОстаток;
		
		СтоимостьКонечныйОстатокНУ					= ВыборкаПоОС.СтоимостьКонечныйОстатокНУ;
		
		Если (ЛиквидационнаяСтоимость <> 0) 
		   И (ЛиквидационнаяСтоимость >= СтоимостьКонечныйОстаток) И (ЛиквидационнаяСтоимость >= СтоимостьКонечныйОстатокНУ) Тогда
			
			Если ВыдаватьСообщения Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух./нал. расчет амортизации: остаточная стоимость основного средства %1 достигла ликвидационной <%2>, амортизация не начислена.';uk='Бух./под. розрахунок амортизації: залишкова вартість основного засобу %1 досягла ліквідаційної <%2>, амортизація не нарахована.'"),
				                             ВыборкаПоОС.ОсновноеСредство, ЛиквидационнаяСтоимость); 
											 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
            Продолжить;
			
		КонецЕсли;
		
		Если НачислятьАмортизацию Тогда
		
		Если ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Прямолинейный Тогда

			Если НачислятьАмортизацию Тогда
				Если СрокИспользованияДляВычисленияАмортизации = 0 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для основного средства %1 при расчете по способу %2 не указан срок полезного использования!';uk='Бух. розрахунок амортизації: для основного засобу %1 при розрахунку за способом %2 не вказаний строк корисного використання!'"), ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли; 
				
				СуммаГодовойАмортизации = АмортизируемаяСтоимость / СрокИспользованияДляВычисленияАмортизации * 12;

				Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
					
					СуммаАмортизации = СуммаГодовойАмортизации / 12;

				Иначе
					
					КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, 
					                                                                 ВыборкаПоОС.ГрафикАмортизации, 
																					 ДатаРасчета);
					СуммаАмортизации       = СуммаГодовойАмортизации * КоэффициентАмортизации;

				КонецЕсли;
			КонецЕсли;	
			
		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Производственный Тогда

			Если ОбъемПродукцииРаботДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для основного средства %1 при расчете по способу %2 не указан предполагаемый объем выработки!';uk='Бух. розрахунок амортизації: для основного засобу %1 при розрахунку за способом %2 не вказаний передбачуваний обсяг виробітку!'"), ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;

			СуммаАмортизации = АмортизируемаяСтоимость * ТекущийОбъемПродукцииРабот / ОбъемПродукцииРаботДляВычисленияАмортизации;
			
		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшенияОстатка Тогда

			Если ЛиквидационнаяСтоимость = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для основного средства %1 при расчете по способу %2 не указана ликвидационная стоимость!';uk='Бух. розрахунок амортизації: для основного засобу %1 при розрахунку за способом %2 не вказана ліквідаційна вартість!'"), ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;

			Если СрокИспользованияДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для основного средства %1 при расчете по способу %2 не указан срок полезного использования!';uk='Бух. розрахунок амортизації: для основного засобу %1 при розрахунку за способом %2 не вказаний строк корисного використання!'"), ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Если Год(ВыборкаПоОС.Период) = Год(ДатаРасчета) Тогда
				
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации;
				
			Иначе
				
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьНаНачалоГода;
				
			КонецЕсли;
			
			Если ДатаВводаВЭксплуатацию = NULL Тогда
				
				Если ВыдаватьСообщения Тогда
					
					Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для основного средства %1 при расчете по способу %2 не определилась дата ввода в эксплуатацию!';uk='Бух. розрахунок амортизації: для основного засобу %1 при розрахунку способом %2 не визначилася дата уведення в експлуатацію!'"), ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации));
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			РазностьЛет = Год(ДатаРасчета) - Год(ДатаВводаВЭксплуатацию);
			
			Если РазностьЛет > 0 Тогда
				
				ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизации 
				                                   - РазностьЛет * 12
				                                   + Месяц(ДатаВводаВЭксплуатацию)
												   
			ИначеЕсли СрокИспользованияДляВычисленияАмортизации < 12 Тогда											   
				
				ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизации;
												   
			Иначе
				
				ОсталосьЭксплуатироватьВЭтомГоду = 0;
												   
			КонецЕсли;
													   
			Если (ОсталосьЭксплуатироватьВЭтомГоду < 12) И (ОсталосьЭксплуатироватьВЭтомГоду > 0)  Тогда
				
				// Последний год применяем прямолинейный метод
				
				СуммаГодовойАмортизации = 12 * (СтоимостьИтоговая - ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГоду
				
			ИначеЕсли ОсталосьЭксплуатироватьВЭтомГоду >= 0 Тогда
				
				СуммаГодовойАмортизации = СтоимостьИтоговая * (1 - Pow(ЛиквидационнаяСтоимость / СтоимостьДляВычисленияАмортизации,
				                                                       12 / СрокИспользованияДляВычисленияАмортизации));
																	   
			Иначе // Срок использования исчерпан
				
				СуммаГодовойАмортизации = 0;
				
				Если ВыдаватьСообщения Тогда
					
					Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для основного средства %1 при расчете по способу %2 срок использования исчерпан!';uk='Бух. розрахунок амортизації: для основного засобу %1 при розрахунку способом %2 строк використання вичерпаний!'"), ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации));
					
				КонецЕсли;
				
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				
				СуммаАмортизации   = СуммаГодовойАмортизации / 12;
				
			Иначе
				
				КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков,
				                                                                 ВыборкаПоОС.ГрафикАмортизации,
																				 ДатаРасчета);
				СуммаАмортизации       = СуммаГодовойАмортизации * КоэффициентАмортизации;
				
			КонецЕсли;

			
		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка Тогда
			
			Если СрокИспользованияДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для основного средства %1 при расчете по способу %2 не указан срок полезного использования!';uk='Бух. розрахунок амортизації: для основного засобу %1 при розрахунку за способом %2 не вказаний строк корисного використання!'"), ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли; 
			
			Если СрокИспользованияДляВычисленияАмортизации <= 24 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для основного средства %1 при расчете по способу %2 указан срок полезного использования <%3> мес.!
|Для корректного начисления амортизации срок использования должен быть более 24 месяца.';uk='Бух. розрахунок амортизації: для основного засобу %1 при розрахунку способом %2 зазначений строк корисного використання <%3> міс.!
|Для коректного нарахування амортизації строк використання повинен бути більше 24 місяців.'"),
						ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации, СрокИспользованияДляВычисленияАмортизации);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Если Год(ВыборкаПоОС.Период) = Год(ДатаРасчета) Тогда
				
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации;
				
			Иначе
				
				СтоимостьИтоговая = ВыборкаПоОС.СтоимостьНаНачалоГода;
				
			КонецЕсли;
			
			Если ДатаВводаВЭксплуатацию = NULL Тогда
				
				Если ВыдаватьСообщения Тогда
					
					Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для основного средства %1 при расчете по способу %2 не определилась дата ввода в эксплуатацию!';uk='Бух. розрахунок амортизації: для основного засобу %1 при розрахунку способом %2 не визначилася дата уведення в експлуатацію!'"), ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации));
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			РазностьЛет = Год(ДатаРасчета) - Год(ДатаВводаВЭксплуатацию);
			
			Если РазностьЛет > 0 Тогда
				
				ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизации 
				                                   - РазностьЛет * 12
				                                   + Месяц(ДатаВводаВЭксплуатацию)
												   
			ИначеЕсли СрокИспользованияДляВычисленияАмортизации < 12 Тогда											   
				
				ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизации;
												   
			Иначе
				
				ОсталосьЭксплуатироватьВЭтомГоду = 0;
												   
			КонецЕсли;
			
			Если (ОсталосьЭксплуатироватьВЭтомГоду <= 12) И (ОсталосьЭксплуатироватьВЭтомГоду > 0)  Тогда
				
				// Последний год применяем прямолинейный метод
				
				СуммаГодовойАмортизации = 12 * (СтоимостьИтоговая - ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГоду
				
			ИначеЕсли ОсталосьЭксплуатироватьВЭтомГоду >= 0 Тогда
				
				СуммаГодовойАмортизации = 2 * (СтоимостьИтоговая - ЛиквидационнаяСтоимость) / СрокИспользованияДляВычисленияАмортизации * 12;
				
			Иначе // Срок использования исчерпан
				
				СуммаГодовойАмортизации = 0;
				
				Если ВыдаватьСообщения Тогда
					
					Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для основного средства %1 при расчете по способу %2 срок использования исчерпан!';uk='Бух. розрахунок амортизації: для основного засобу %1 при розрахунку способом %2 строк використання вичерпаний!'"), ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации));
					
				КонецЕсли;
			
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				
				СуммаАмортизации = СуммаГодовойАмортизации / 12;
				
			Иначе
				
				КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков,
				                                                                 ВыборкаПоОС.ГрафикАмортизации,
																				 ДатаРасчета);
				СуммаАмортизации        = СуммаГодовойАмортизации * КоэффициентАмортизации;
				
			КонецЕсли;
			
		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный Тогда

			Если СрокИспользованияДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для основного средства %1 при расчете по способу %2 не указан срок полезного использования!';uk='Бух. розрахунок амортизації: для основного засобу %1 при розрахунку за способом %2 не вказаний строк корисного використання!'"), ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли; 
			
			Если ДатаВводаВЭксплуатацию = NULL Тогда
				
				Если ВыдаватьСообщения Тогда
					
					Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для основного средства %1 при расчете по способу %2 не определилась дата ввода в эксплуатацию!';uk='Бух. розрахунок амортизації: для основного засобу %1 при розрахунку способом %2 не визначилася дата уведення в експлуатацію!'"), ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации));
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;

			ЧислоЛетПользования       = Макс(1,СрокИспользованияДляВычисленияАмортизации / 12);
			ЧислоЛетПользования       = Цел(ЧислоЛетПользования)+ ?(ЧислоЛетПользования 
			                                                    - Цел(ЧислоЛетПользования) = 0, 0, 1); // округляем к наибольшему целому
			
			ГодИспользования          = Год(ДатаРасчета) - Год(ДатаВводаВЭксплуатацию) + 1;
			
			Если Месяц(ДатаВводаВЭксплуатацию) >= Месяц(ДатаРасчета) Тогда
				
				ГодИспользования	  = ГодИспользования - 1;
				
			КонецЕсли; 

			СуммаГодовойАмортизации   = АмортизируемаяСтоимость * (ЧислоЛетПользования - ГодИспользования + 1)
					/ (ЧислоЛетПользования * (ЧислоЛетПользования + 1) / 2 );
										  
			Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
				
				СуммаАмортизации = СуммаГодовойАмортизации / 12;

			Иначе
				
				КоэффициентАмортизации  = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков,
				                                                                  ВыборкаПоОС.ГрафикАмортизации,
																				  ДатаРасчета);
				СуммаАмортизации        = СуммаГодовойАмортизации * КоэффициентАмортизации;

			КонецЕсли;
			
		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Налоговый Тогда
			
			
		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС._50_50 Тогда
			
			// Амортизация начисляется в документе ввод в эксплуатацию и документах выбытия
			Метод_50_50 = Истина;
			ЛиквидационнаяСтоимость = 0;
			
			НачислятьАмортизацию = Ложь;
				
		ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС._100 Тогда

			// Амортизация начисляется в документе ввод в эксплуатацию
			НачислятьАмортизацию = Ложь;
	
		Иначе 
			
			Если ВыдаватьСообщения  Тогда
			
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для основного средства %1 установлен способ расчета амортизации, не поддерживаемый в бухгалтерском учете (%2)!';uk='Бух. розрахунок амортизації: для основного засобу %1 встановлений спосіб розрахунку амортизації, який не підтримується у бухгалтерському обліку (%2)!'"), ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
			
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		КонецЕсли;
		
		Если НачислятьАмортизациюНУ Тогда
			Если СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииОС.Прямолинейный Тогда
				
				Если СрокИспользованияДляВычисленияАмортизацииНУ = 0 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для основного средства %1 при расчете по способу %2 не указан срок полезного использования!';uk='Под. розрахунок амортизації: для основного засобу %1 при розрахунку за способом %2 не вказаний строк корисного використання!'"), ВыборкаПоОС.ОсновноеСредство, СпособНачисленияАмортизацииНУ);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли; 
				
				СуммаГодовойАмортизацииНУ = АмортизируемаяСтоимостьНУ / СрокИспользованияДляВычисленияАмортизацииНУ * 12;

				Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
					
					СуммаАмортизацииНУ = СуммаГодовойАмортизацииНУ / 12;

				Иначе
					
					КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, 
					                                                                 ВыборкаПоОС.ГрафикАмортизации, 
																					 ДатаРасчета);
					СуммаАмортизацииНУ       = СуммаГодовойАмортизацииНУ * КоэффициентАмортизации;

				КонецЕсли;
				
			ИначеЕсли СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииОС.Производственный 
						И (НачалоМесяца(ДатаРасчета) < ДатаНКУ2015 ИЛИ НачалоМесяца(ДатаРасчета) >= Дата('20200401')) Тогда
				
				
				Если ОбъемПродукцииРаботДляВычисленияАмортизации = 0 Тогда
					
					Продолжить;
					
				КонецЕсли;

				СуммаАмортизацииНУ = АмортизируемаяСтоимостьНУ * ТекущийОбъемПродукцииРабот / ОбъемПродукцииРаботДляВычисленияАмортизации;
				
			ИначеЕсли СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшенияОстатка Тогда
				
				Если СрокИспользованияДляВычисленияАмортизацииНУ = 0 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для основного средства %1 при расчете по способу %2 не указан срок полезного использования!';uk='Под. розрахунок амортизації: для основного засобу %1 при розрахунку за способом %2 не вказаний строк корисного використання!'"), ВыборкаПоОС.ОсновноеСредство, СпособНачисленияАмортизацииНУ);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
				Если Год(ВыборкаПоОС.ПериодНУ) = Год(ДатаРасчета) Тогда
					
					СтоимостьИтоговаяНУ = ВыборкаПоОС.СтоимостьДляВычисленияАмортизацииНУ;
					
				Иначе
					
					СтоимостьИтоговаяНУ = ВыборкаПоОС.СтоимостьНаНачалоГодаНУ;
					
				КонецЕсли;
				
				Если ДатаВводаВЭксплуатациюНУ = NULL Тогда
					
					Если ВыдаватьСообщения Тогда
						
						Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для основного средства %1 при расчете по способу %2 не определилась дата ввода в эксплуатацию!';uk='Под. розрахунок амортизації: для основного засобу %1 при розрахунку способом %2 не визначилася дата уведення в експлуатацію!'"), ВыборкаПоОС.ОсновноеСредство, СпособНачисленияАмортизацииНУ));
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
				РазностьЛетНУ = Год(ДатаРасчета) - Год(ДатаВводаВЭксплуатациюНУ);
				
				Если РазностьЛетНУ > 0 Тогда
					
					ОсталосьЭксплуатироватьВЭтомГодуНУ = СрокИспользованияДляВычисленияАмортизацииНУ 
					                                   - РазностьЛетНУ * 12
					                                   + Месяц(ДатаВводаВЭксплуатациюНУ)
													   
				ИначеЕсли СрокИспользованияДляВычисленияАмортизацииНУ < 12 Тогда 
					
					ОсталосьЭксплуатироватьВЭтомГодуНУ = СрокИспользованияДляВычисленияАмортизацииНУ;
													   
				Иначе
					
					ОсталосьЭксплуатироватьВЭтомГодуНУ = 0;
													   
				КонецЕсли;
														   
				Если (ОсталосьЭксплуатироватьВЭтомГодуНУ < 12) И (ОсталосьЭксплуатироватьВЭтомГодуНУ > 0)  Тогда
					
					// Последний год применяем прямолинейный метод
					
					СуммаГодовойАмортизацииНУ = 12 * (СтоимостьИтоговаяНУ - ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГодуНУ
					
				ИначеЕсли ОсталосьЭксплуатироватьВЭтомГодуНУ >= 0 Тогда
					
					СуммаГодовойАмортизацииНУ = СтоимостьИтоговаяНУ * (1 - Pow(ЛиквидационнаяСтоимость / СтоимостьДляВычисленияАмортизацииНУ,
					                                                       12 / СрокИспользованияДляВычисленияАмортизацииНУ));
																		   
				Иначе // Срок использования исчерпан
					
					СуммаГодовойАмортизацииНУ = 0;
					
					Если ВыдаватьСообщения Тогда
						
						Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для основного средства %1 при расчете по способу %2 срок использования исчерпан!';uk='Под. розрахунок амортизації: для основного засобу %1 при розрахунку способом %2 строк використання вичерпаний!'"), ВыборкаПоОС.ОсновноеСредство, СпособНачисленияАмортизацииНУ));
						
					КонецЕсли;
					
				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
					
					СуммаАмортизацииНУ   = СуммаГодовойАмортизацииНУ / 12;
					
				Иначе
					
					КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков,
					                                                                 ВыборкаПоОС.ГрафикАмортизации,
																					 ДатаРасчета);
					СуммаАмортизацииНУ       = СуммаГодовойАмортизацииНУ * КоэффициентАмортизации;
					
				КонецЕсли;
				
			ИначеЕсли СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииОС.УскоренногоУменьшенияОстатка Тогда
				
				Если СрокИспользованияДляВычисленияАмортизацииНУ = 0 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для основного средства %1 при расчете по способу %2 не указан срок полезного использования!';uk='Под. розрахунок амортизації: для основного засобу %1 при розрахунку за способом %2 не вказаний строк корисного використання!'"), ВыборкаПоОС.ОсновноеСредство, СпособНачисленияАмортизацииНУ);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли; 
				
				Если СрокИспользованияДляВычисленияАмортизацииНУ <= 24 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для основного средства %1 при расчете по способу %2 указан срок полезного использования <%3> мес.!
|Для корректного начисления амортизации срок использования должен быть более 24 месяца.';uk='Под. розрахунок амортизації: для основного засобу %1 при розрахунку способом %2 зазначений строк корисного використання <%3> міс.!
|Для коректного нарахування амортизації строк використання повинен бути більше 24 місяців.'"),
						                                ВыборкаПоОС.ОсновноеСредство, ВыборкаПоОС.СпособНачисленияАмортизации, СрокИспользованияДляВычисленияАмортизации);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
						
					КонецЕсли;
					
				КонецЕсли; 
				
				Если Год(ВыборкаПоОС.ПериодНУ) = Год(ДатаРасчета) Тогда
					
					СтоимостьИтоговаяНУ = ВыборкаПоОС.СтоимостьДляВычисленияАмортизацииНУ;
					
				Иначе
					
					СтоимостьИтоговаяНУ = ВыборкаПоОС.СтоимостьНаНачалоГодаНУ;
					
				КонецЕсли;
				
				Если ДатаВводаВЭксплуатациюНУ = NULL Тогда
					
					Если ВыдаватьСообщения Тогда
						
						Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для основного средства %1 при расчете по способу %2 не определилась дата ввода в эксплуатацию!';uk='Под. розрахунок амортизації: для основного засобу %1 при розрахунку способом %2 не визначилася дата уведення в експлуатацію!'"), ВыборкаПоОС.ОсновноеСредство, СпособНачисленияАмортизацииНУ));
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
				РазностьЛетНУ = Год(ДатаРасчета) - Год(ДатаВводаВЭксплуатациюНУ);
				
				Если РазностьЛетНУ > 0 Тогда
					
					ОсталосьЭксплуатироватьВЭтомГодуНУ = СрокИспользованияДляВычисленияАмортизацииНУ 
					                                   - РазностьЛетНУ * 12
					                                   + Месяц(ДатаВводаВЭксплуатациюНУ)
													   
				ИначеЕсли СрокИспользованияДляВычисленияАмортизацииНУ < 12 Тогда											   
					
					ОсталосьЭксплуатироватьВЭтомГодуНУ = СрокИспользованияДляВычисленияАмортизацииНУ;
													   
				Иначе
					
					ОсталосьЭксплуатироватьВЭтомГодуНУ = 0;
													   
				КонецЕсли;
				
				Если (ОсталосьЭксплуатироватьВЭтомГодуНУ <= 12) И (ОсталосьЭксплуатироватьВЭтомГодуНУ > 0)  Тогда
					
					// Последний год применяем прямолинейный метод
					
					СуммаГодовойАмортизацииНУ = 12 * (СтоимостьИтоговаяНУ - ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГодуНУ
					
				ИначеЕсли ОсталосьЭксплуатироватьВЭтомГодуНУ >= 0 Тогда
					
					СуммаГодовойАмортизацииНУ = 2 * (СтоимостьИтоговаяНУ - ЛиквидационнаяСтоимость) / СрокИспользованияДляВычисленияАмортизацииНУ * 12;
					
				Иначе // Срок использования исчерпан
					
					СуммаГодовойАмортизацииНУ = 0;
					
					Если ВыдаватьСообщения Тогда
						
						Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для основного средства %1 при расчете по способу %2 срок использования исчерпан!';uk='Под. розрахунок амортизації: для основного засобу %1 при розрахунку способом %2 строк використання вичерпаний!'"), ВыборкаПоОС.ОсновноеСредство, СпособНачисленияАмортизацииНУ));
						
					КонецЕсли;
				
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
					
					СуммаАмортизацииНУ = СуммаГодовойАмортизацииНУ / 12;
					
				Иначе
					
					КоэффициентАмортизации = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков,
					                                                                 ВыборкаПоОС.ГрафикАмортизации,
																					 ДатаРасчета);
					СуммаАмортизацииНУ        = СуммаГодовойАмортизацииНУ * КоэффициентАмортизации;
					
				КонецЕсли;
				
			ИначеЕсли СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииОС.Кумулятивный Тогда
				
				Если СрокИспользованияДляВычисленияАмортизацииНУ = 0 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для основного средства %1 при расчете по способу %2 не указан срок полезного использования!';uk='Под. розрахунок амортизації: для основного засобу %1 при розрахунку за способом %2 не вказаний строк корисного використання!'"), ВыборкаПоОС.ОсновноеСредство, СпособНачисленияАмортизацииНУ);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли; 
				
				Если ДатаВводаВЭксплуатациюНУ = NULL Тогда
					
					Если ВыдаватьСообщения Тогда
						
						Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для основного средства %1 при расчете по способу %2 не определилась дата ввода в эксплуатацию!';uk='Под. розрахунок амортизації: для основного засобу %1 при розрахунку способом %2 не визначилася дата уведення в експлуатацію!'"), ВыборкаПоОС.ОсновноеСредство, СпособНачисленияАмортизацииНУ));
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;

				ЧислоЛетПользования       = Макс(1,СрокИспользованияДляВычисленияАмортизацииНУ / 12);
				ЧислоЛетПользования       = Цел(ЧислоЛетПользования) + ?(ЧислоЛетПользования 
				                                                    - Цел(ЧислоЛетПользования) = 0, 0, 1); // округляем к наибольшему целому
				
				ГодИспользования          = Год(ДатаРасчета) - Год(ДатаВводаВЭксплуатациюНУ) + 1;
				
				Если Месяц(ДатаВводаВЭксплуатациюНУ) >= Месяц(ДатаРасчета) Тогда
					
					ГодИспользования	  = ГодИспользования - 1;
					
				КонецЕсли; 

				СуммаГодовойАмортизацииНУ   = АмортизируемаяСтоимостьНУ * (ЧислоЛетПользования - ГодИспользования + 1)
						/ (ЧислоЛетПользования * (ЧислоЛетПользования + 1) / 2 );
											  
				Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
					
					СуммаАмортизацииНУ = СуммаГодовойАмортизацииНУ / 12;

				Иначе
					
					КоэффициентАмортизации  = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков,
					                                                                  ВыборкаПоОС.ГрафикАмортизации,
																					  ДатаРасчета);
					СуммаАмортизацииНУ        = СуммаГодовойАмортизацииНУ * КоэффициентАмортизации;

				КонецЕсли;
				
			ИначеЕсли СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииОС._50_50 Тогда
				
				// Амортизация начисляется в документе ввод в эксплуатацию и документах выбытия
				Метод_50_50 = Истина;
				ЛиквидационнаяСтоимость = 0;
				
				НачислятьАмортизациюНУ = Ложь;
				
			ИначеЕсли СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииОС._100 Тогда

				// Амортизация начисляется в документе ввод в эксплуатацию
				НачислятьАмортизациюНУ = Ложь;
		
			Иначе 
				
				Если ВыдаватьСообщения  Тогда
				
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для основного средства %1 установлен способ расчета амортизации, не поддерживаемый в налоговом учете (%2)!';uk='Под. розрахунок амортизації: для основних засобів %1 встановлений спосіб розрахунку амортизації, не застосовується в податковому обліку (%2)!'"), ВыборкаПоОС.ОсновноеСредство, СпособНачисленияАмортизацииНУ);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
				
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
		КонецЕсли;

		Если НачислятьАмортизацию Тогда
			СуммаАмортизации = Макс(0, Мин(СуммаАмортизации, СтоимостьКонечныйОстаток - ЛиквидационнаяСтоимость));
		Иначе
			СуммаАмортизации = 0;
		КонецЕсли;

		Если НачислятьАмортизациюНУ Тогда
			СуммаАмортизацииНУ = Макс(0, Мин(СуммаАмортизацииНУ, СтоимостьКонечныйОстатокНУ - ЛиквидационнаяСтоимость));
		Иначе	
			СуммаАмортизацииНУ = 0;
		КонецЕсли;	
		
		СтрокаАмортизации = ТаблицаАмортизации.Добавить();

		СтрокаАмортизации.ОбъектУчета            = ВыборкаПоОС.ОсновноеСредство;
		СтрокаАмортизации.НаправлениеАмортизации = ВыборкаПоОС.СпособыОтраженияРасходовПоАмортизации;
		СтрокаАмортизации.НалоговоеНазначение 	 = ВыборкаПоОС.НалоговоеНазначение;
		СтрокаАмортизации.Местонахождение 		 = ВыборкаПоОС.Местонахождение;
    	СтрокаАмортизации.СчетУчета	             = ВыборкаПоОС.СчетУчета;
    	СтрокаАмортизации.СчетАмортизации	     = ВыборкаПоОС.СчетНачисленияАмортизации;
    	СтрокаАмортизации.Амортизация            = СуммаАмортизации;
    	СтрокаАмортизации.АмортизацияНУ          = СуммаАмортизацииНУ;
    	СтрокаАмортизации.Метод_50_50            = Метод_50_50;
		
		Если СтоимостьКонечныйОстаток > 0 Тогда
    		СтрокаАмортизации.СуммаПереоценкиПропорциональнаяАмортизации = ВыборкаПоОС.СуммаПереоценки * СуммаАмортизации / СтоимостьКонечныйОстаток;
		КонецЕсли;	
		СтрокаАмортизации.СчетУчетаДооценокОС = ВыборкаПоОС.СчетУчетаДооценокОС;
		Если НЕ ЗначениеЗаполнено(СтрокаАмортизации.СчетУчетаДооценокОС) Тогда 
			СтрокаАмортизации.СчетУчетаДооценокОС = ПланыСчетов.Хозрасчетный.ДооценкаОсновныхСредств; // По умолчанию 423.1
		КонецЕсли;	

		Если СуммаАмортизации = 0 И НачислятьАмортизацию И ВыдаватьСообщения И Не Метод_50_50 Тогда
			
			Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для основного средства %1 амортизация равна 0';uk='Бух. розрахунок амортизації: для основного засобу %1 амортизація дорівнює 0'"), ВыборкаПоОС.ОсновноеСредство));
			
		КонецЕсли;

	КонецЦикла;
	
	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииБухРегл()

// Получает сводную таблицу графиков - годовых и индивидуальных одним запросом - чтобы потом можно было 
// данные ез нее дергать, а не лазить в справочник за каждым значеним
//
Функция ПолучитьТаблицуГрафиков()

	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ссылка КАК График,
	|	Коэффициент1,
	|	Коэффициент2,
	|	Коэффициент3,
	|	Коэффициент4,
	|	Коэффициент5,
	|	Коэффициент6,
	|	Коэффициент7,
	|	Коэффициент8,
	|	Коэффициент9,
	|	Коэффициент10,
	|	Коэффициент11,
	|	Коэффициент12,
	|	ВЫРАЗИТЬ((Коэффициент1
	|	         + Коэффициент2
	|	         + Коэффициент3
	|	         + Коэффициент4
	|	         + Коэффициент5
	|	         + Коэффициент6
	|	         + Коэффициент7
	|	         + Коэффициент8
	|	         + Коэффициент9
	|	         + Коэффициент10
	|	         + Коэффициент11
	|	         + Коэффициент12) КАК ЧИСЛО(15,5)) КАК СуммаКоэффициентов
	|ИЗ
	|	Справочник.ГодовыеГрафикиАмортизацииОС КАК ГодовыеГрафикиАмортизацииОС";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуГрафиков

Функция ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, График, ДатаРасчета)

	КоэффициентАммортизации = 0;

	СтрокаТЧ = ТаблицаГрафиков.Найти(График, "График");
	Если СтрокаТЧ = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	СуммаВсех   = СтрокаТЧ.СуммаКоэффициентов;
	СуммаОдного = СтрокаТЧ["Коэффициент" + Месяц(ДатаРасчета)];

	КоэффициентАммортизации = СуммаОдного / ?(СуммаВсех = 0 ИЛИ СуммаВсех = NULL, 1, СуммаВсех);

	Возврат КоэффициентАммортизации;

КонецФункции // ПолучитьКоэффициентАмортизацииИзГрафика()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА АМОРТИЗАЦИИ НМА

// Расчитывает сумму амортизации по указаному Нематериальному активу по бух/нал учету
//
// Параметры
//  НематериальныйАктив                         - СправочникСсылка.НематериальныеАктивы - НА, по которому 
//                                                нужно рассчитать амортизацию.
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//
// Возвращаемое значение:
//   ТаблицаЗначений начисленной амортизации
//
Функция РасчетАмортизацииНМАРегл(ДатаРасчета, Организация, НематериальныйАктив = Неопределено, ОтражатьВБУ = Истина, ОтражатьВНУ = Истина, 
	                                ВыдаватьСообщения = Истина, Отказ = Ложь) Экспорт


	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОбъектУчета"           , Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы"));
	ТаблицаАмортизации.Колонки.Добавить("СчетУчета"     		, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("СчетАмортизации"    	, Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("Амортизация"			, ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("АмортизацияНУ"			, ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("НалоговоеНазначение"	, Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТаблицаАмортизации.Колонки.Добавить("Местонахождение", 			Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НачалоГода"    , НачалоГода(ДатаРасчета));
	СтруктураПараметров.Вставить("НачалоКвартала", НачалоКвартала(ДатаРасчета));
	СтруктураПараметров.Вставить("НачалоПериода" , НачалоМесяца(ДатаРасчета));
	СтруктураПараметров.Вставить("КонецПериода"  , КонецМесяца(ДатаРасчета));
	СтруктураПараметров.Вставить("Организация"   , Организация);
	СтруктураПараметров.Вставить("НачалоПериода200911" , Дата(2009,11,01));
	
	ДатаНКУ2015 = '2015 01 01';
	
	Если НематериальныйАктив = Неопределено Тогда
		
		ТекстУсловия 	= "";
		
		ТекстУсловияПроизводственные 	= "";
		
	Иначе
		
		СтруктураПараметров.Вставить("СписокНМА", НематериальныйАктив);
		ТекстУсловия 	= "И НематериальныйАктив В (&СписокНМА)";
		
		ТекстУсловияПроизводственные 	= "И НематериальныйАктив В (&СписокНМАПроизводственные)";
		
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Списан", Перечисления.ВидыСостоянийНМА.Списан);
	
	Для каждого КлючЗначение Из СтруктураПараметров Цикл
	
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);	
	
	КонецЦикла;
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	""СписокНМА""                             КАК ТипЗаписи,
	|	НачислениеАмортизации.НематериальныйАктив КАК Поле
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|		            &НачалоПериода,
	|		            Организация = &Организация И НематериальныйАктив В
	|	                (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	                 	СостояниеНМА.НематериальныйАктив
	|	                 ИЗ	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(&НачалоПериода,
	|	                 	                Организация = &Организация " + ТекстУсловия + ") КАК СостояниеНМА
	|	                 ГДЕ
	|	                 	СостояниеНМА.Состояние <> &Списан)) КАК НачислениеАмортизации
	|ГДЕ
	|	НачислениеАмортизации.НачислятьАмортизацию
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаУчета"",
	|	СчетаБухгалтерскогоУчета.СчетУчета
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|		            &НачалоПериода,
	|		            Организация = &Организация
	|		            " + ТекстУсловия + ") КАК СчетаБухгалтерскогоУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаУчетаНачалоГода"",
	|	СчетаБухгалтерскогоУчета.СчетУчета
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|		            &НачалоГода,
	|		            Организация = &Организация
	|		            " + ТекстУсловия + ") КАК СчетаБухгалтерскогоУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаУчетаНачалоКвартала"",
	|	СчетаБухгалтерскогоУчета.СчетУчета
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|		            &НачалоКвартала,
	|		            Организация = &Организация
	|		            " + ТекстУсловия + ") КАК СчетаБухгалтерскогоУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаАмортизации"",
	|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|		            &НачалоПериода,
	|		            Организация = &Организация
	|		            " + ТекстУсловия + ") КАК СчетаБухгалтерскогоУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаАмортизацииНачалоГода"",
	|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|		            &НачалоГода,
	|		            Организация = &Организация
	|		            " + ТекстУсловия + ") КАК СчетаБухгалтерскогоУчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаАмортизацииНачалоКвартала"",
	|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|		            &НачалоКвартала,
	|		            Организация = &Организация
	|		            " + ТекстУсловия + ") КАК СчетаБухгалтерскогоУчета
	|ИТОГИ ПО
	|	ТипЗаписи";
	
	ДеревоРезультатов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтруктураПараметров.Вставить("СписокНМА"                     , Неопределено);
	СтруктураПараметров.Вставить("СчетаУчета"                    , Неопределено);
	СтруктураПараметров.Вставить("СчетаУчетаНачалоГода"          , Неопределено);
	СтруктураПараметров.Вставить("СчетаУчетаНачалоКвартала"      , Неопределено);
	СтруктураПараметров.Вставить("СчетаАмортизации"              , Неопределено);
	СтруктураПараметров.Вставить("СчетаАмортизацииНачалоГода"    , Неопределено);
	СтруктураПараметров.Вставить("СчетаАмортизацииНачалоКвартала", Неопределено);
	
	Для каждого СтрокаТипаЗаписи Из ДеревоРезультатов.Строки Цикл
	
		СтруктураПараметров.Вставить(СтрокаТипаЗаписи.ТипЗаписи, 
		                             СтрокаТипаЗаписи.Строки.ВыгрузитьКолонку("Поле"));	
	
	КонецЦикла;

	Если СтруктураПараметров.СписокНМА <> Неопределено И 
		ТранзакцияАктивна() И ОбщегоНазначенияБПВызовСервераПовтИсп.ИспользоватьУправляемыеБлокировки() Тогда
		
		ЗапросСчетовАмортизации = Новый Запрос;
		ЗапросСчетовАмортизации.УстановитьПараметр("ВнешнийИсточник", СтруктураПараметров.СчетаАмортизации);
		ЗапросСчетовАмортизации.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК СчетНачисленияАмортизации
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В(&ВнешнийИсточник)";
		ИсточникДанных = ЗапросСчетовАмортизации.Выполнить();
		
		// Блокировка регистра бухгалтерии.
		
		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы, ИсточникДанных", 
														"РегистрБухгалтерии", "Хозрасчетный", ИсточникДанных);
														
		СтруктураЗначенийБлокировки = Новый Структура("Период, Организация", 
													  Новый Диапазон(, КонецМесяца(ДатаРасчета)), Организация);
													  
		СтруктураИсточникаДанных = Новый Структура("Счет", "СчетНачисленияАмортизации");
		
		ОбщегоНазначенияБПВызовСервера.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, СтруктураИсточникаДанных);
		
	КонецЕсли;	
	Запрос = Новый Запрос();
	
	Для каждого КлючЗначение Из СтруктураПараметров Цикл
	
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);	
	
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СубконтоНМА", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);	
	
	Запрос.УстановитьПараметр("СостояниеВвода", Перечисления.ВидыСостоянийНМА.ПринятКУчету);
	Если НематериальныйАктив <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписокНМАПроизводственные", НематериальныйАктив);	
	КонецЕсли;	
	
	Запрос.Текст =
	"
	|ВЫБРАТЬ
	|	СостоянияНМА.НематериальныйАктив  			КАК НематериальныйАктив,
	|	СостоянияНМА.Период  						КАК ДатаСостояния
	|ПОМЕСТИТЬ
	|   СписокНМАПринятыхВТекущемМесяце
	|ИЗ	
	|	РегистрСведений.СостоянияНМАОрганизаций КАК СостоянияНМА
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|		            &КонецПериода,
	|		            Организация = &Организация
	|		            " + ТекстУсловияПроизводственные + ") КАК НачислениеАмортизации
	|	ПО НачислениеАмортизации.Организация = СостоянияНМА.Организация
	|		И НачислениеАмортизации.НематериальныйАктив = СостоянияНМА.НематериальныйАктив
	|		И (НачислениеАмортизации.НачислятьАмортизацию)
	|		И СостоянияНМА.Состояние = &СостояниеВвода
	|		И (СостоянияНМА.Период МЕЖДУ &НачалоПериода И &КонецПериода)
	|		И (СостоянияНМА.Период > &НачалоПериода200911)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ПервоначальныеСведения.НематериальныйАктив                         КАК НематериальныйАктив,
	|	ПервоначальныеСведения.СпособНачисленияАмортизации                 КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведения.СрокПолезногоИспользования                  КАК СрокИспользованияДляВычисленияАмортизации,
	|	ПервоначальныеСведения.ПервоначальнаяСтоимость                     КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияНУ.СрокПолезногоИспользования, 0)   КАК СрокИспользованияДляВычисленияАмортизацииНУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияНУ.ПервоначальнаяСтоимостьНУ, 0)    КАК СтоимостьДляВычисленияАмортизацииНУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияНУ.СпособНачисленияАмортизации, ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииНМА.ПустаяСсылка)) КАК СпособНачисленияАмортизацииНУ,
	|	ПервоначальныеСведения.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПервоначальныеСведения.ЛиквидационнаяСтоимость                     КАК ЛиквидационнаяСтоимость,
	|	ПервоначальныеСведения.Период                                      КАК Период,
	|	ПервоначальныеСведенияНУ.Период                                    КАК ПериодНУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияНУ.НачислятьАмортизацию, ЛОЖЬ) 	   КАК НачислятьАмортизациюНУ,
	|	ПервоначальныеСведенияНУ.НалоговаяГруппаОС                         КАК НалоговаяГруппаОС,
	|	ПервоначальныеСведенияНУ.НалоговоеНазначение                       КАК НалоговоеНазначение,
	|	ЕСТЬNULL(ВыработкаНМА.КоличествоОборот, 0)                         КАК ТекущийОбъемПродукцииРабот,
	|	МестонахождениеНМА.Местонахождение                                 КАК Местонахождение,
	|	СпособыОтраженияРасходов.СпособОтраженияРасходов                   КАК СпособыОтраженияРасходовПоАмортизации,
	|	ЕСТЬNULL(СтоимостьОстатки.СуммаОстатокДт, 0) 
	|		- ЕСТЬNULL(АмортизацияОстатки.СуммаОстатокКт, 0)               КАК СтоимостьКонечныйОстаток,
	|	ЕСТЬNULL(НачисленнаяАмортизация.СуммаОборот, 0)                    КАК АмортизацияОборот,
	|	ЕСТЬNULL(СтоимостьНачалоГода.СуммаОстатокДт, 0) 
	|		- ЕСТЬNULL(АмортизацияНачалоГода.СуммаОстатокКт, 0)            КАК СтоимостьНаНачалоГода,
	|	ЕСТЬNULL(СтоимостьНачалоКвартала.СуммаОстатокДт, 0) 
	|		- ЕСТЬNULL(АмортизацияНачалоКвартала.СуммаОстатокКт, 0)        КАК СтоимостьНаНачалоКвартала,
	|	ЕСТЬNULL(СтоимостьОстатки.СуммаНУОстатокДт, 0) 
	|		- ЕСТЬNULL(АмортизацияОстатки.СуммаНУОстатокКт, 0)               КАК СтоимостьКонечныйОстатокНУ,
	|	ЕСТЬNULL(НачисленнаяАмортизация.СуммаНУОборотКт, 0)                    КАК АмортизацияОборотНУ,
	|	ЕСТЬNULL(СтоимостьНачалоГода.СуммаНУОстатокДт, 0) 
	|		- ЕСТЬNULL(АмортизацияНачалоГода.СуммаНУОстатокКт, 0)            КАК СтоимостьНаНачалоГодаНУ,
	|	ЕСТЬNULL(СтоимостьНачалоКвартала.СуммаНУОстатокДт, 0) 
	|		- ЕСТЬNULL(АмортизацияНачалоКвартала.СуммаНУОстатокКт, 0)        КАК СтоимостьНаНачалоКварталаНУ,
	|	ПерваяАмортизация.ДатаПервойАмортизации                            КАК ДатаПервойАмортизации,
	|	СчетаБухгалтерскогоУчета.СчетУчета                                 КАК СчетУчета,
	|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации                 КАК СчетНачисленияАмортизации
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|		            &НачалоПериода,
	|		            Организация = &Организация
	|		            И НематериальныйАктив В (&СписокНМА)) КАК ПервоначальныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ                                                                              
	|			РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(
	|		    		        &НачалоПериода,
	|		            		Организация = &Организация
	|				            И НематериальныйАктив В (&СписокНМА)) КАК ПервоначальныеСведенияНУ
	|		ПО ПервоначальныеСведения.НематериальныйАктив = ПервоначальныеСведенияНУ.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ                                                                              
	|			РегистрНакопления.ВыработкаНМА.Обороты(
	|			                  &НачалоПериода,
	|			                  &КонецПериода, ,
	|			                  НематериальныйАктив В (&СписокНМА)) КАК ВыработкаНМА
	|		ПО ПервоначальныеСведения.НематериальныйАктив = ВыработкаНМА.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &НачалоПериода,
	|		                       Счет В (&СчетаУчета),
	|		                       &СубконтоНМА,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (&СписокНМА)) КАК СтоимостьОстатки
	|		ПО ПервоначальныеСведения.НематериальныйАктив = СтоимостьОстатки.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &НачалоГода,
	|		                       Счет В (&СчетаУчетаНачалоГода),
	|		                       &СубконтоНМА,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (&СписокНМА)) КАК СтоимостьНачалоГода
	|		ПО ПервоначальныеСведения.НематериальныйАктив = СтоимостьНачалоГода.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &НачалоКвартала,
	|		                       Счет В (&СчетаУчетаНачалоКвартала),
	|		                       &СубконтоНМА,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (&СписокНМА)) КАК СтоимостьНачалоКвартала
	|		ПО ПервоначальныеСведения.НематериальныйАктив = СтоимостьНачалоКвартала.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &НачалоПериода,
	|		                       Счет В (&СчетаАмортизации),
	|		                       &СубконтоНМА,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (&СписокНМА)) КАК АмортизацияОстатки
	|		ПО ПервоначальныеСведения.НематериальныйАктив = АмортизацияОстатки.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &НачалоГода,
	|		                       Счет В (&СчетаАмортизацииНачалоГода),
	|		                       &СубконтоНМА,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (&СписокНМА)) КАК АмортизацияНачалоГода
	|		ПО ПервоначальныеСведения.НематериальныйАктив = АмортизацияНачалоГода.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &НачалоКвартала,
	|		                       Счет В (&СчетаАмортизацииНачалоКвартала),
	|		                       &СубконтоНМА,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (&СписокНМА)) КАК АмортизацияНачалоКвартала
	|		ПО ПервоначальныеСведения.НематериальныйАктив = АмортизацияНачалоКвартала.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.МестонахождениеНМАБухгалтерскийУчет.СрезПоследних(
	|			                &НачалоПериода, Организация = &Организация И НематериальныйАктив В (&СписокНМА)) КАК МестонахождениеНМА
	|		ПО ПервоначальныеСведения.НематериальныйАктив = МестонахождениеНМА.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.СрезПоследних(
	|		                    &НачалоПериода,
	|		                    Организация = &Организация
	|		                    И НематериальныйАктив В (&СписокНМА)) КАК СпособыОтраженияРасходов
	|		ПО ПервоначальныеСведения.НематериальныйАктив = СпособыОтраженияРасходов.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|		                       &НачалоПериода,
	|		                       &КонецПериода, ,
	|		                       (НЕ СчетДт В (&СчетаАмортизации)), ,
	|		                       СчетКт В (&СчетаАмортизации),
	|		                       &СубконтоНМА,
	|		                       Организация = &Организация
	|		                       И СубконтоКт1 В (&СписокНМА)
	|		                       ) КАК НачисленнаяАмортизация
	|		ПО ПервоначальныеСведения.НематериальныйАктив = НачисленнаяАмортизация.СубконтоКт1
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			(ВЫБРАТЬ
	|				НачислениеАмортизации.НематериальныйАктив КАК НематериальныйАктив,
	|				МИНИМУМ(НачислениеАмортизации.Период)  КАК ДатаПервойАмортизации
	|			ИЗ
	|				РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет КАК НачислениеАмортизации
	|			ГДЕ
	|				НачислениеАмортизации.Организация = &Организация
	|				И НачислениеАмортизации.НачислятьАмортизацию
	|				И НачислениеАмортизации.НематериальныйАктив В(&СписокНМА)
	|		
	|			СГРУППИРОВАТЬ ПО
	|				НачислениеАмортизации.НематериальныйАктив) КАК ПерваяАмортизация
	|		ПО ПервоначальныеСведения.НематериальныйАктив = ПерваяАмортизация.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|		                    &НачалоПериода,
	|		                    Организация = &Организация
	|		                    И НематериальныйАктив В (&СписокНМА)) КАК СчетаБухгалтерскогоУчета
	|		ПО ПервоначальныеСведения.НематериальныйАктив = СчетаБухгалтерскогоУчета.НематериальныйАктив
	
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СписокНМАПринятыхВТекущемМесяце.НематериальныйАктив 				КАК НематериальныйАктив,
	|	ПервоначальныеСведения.СпособНачисленияАмортизации                 	КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведения.СрокПолезногоИспользования                  	КАК СрокИспользованияДляВычисленияАмортизации,
	|	ПервоначальныеСведения.ПервоначальнаяСтоимость                     	КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияНУ.СрокПолезногоИспользования, 0)    КАК СрокИспользованияДляВычисленияАмортизацииНУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияНУ.ПервоначальнаяСтоимостьНУ, 0) 	КАК СтоимостьДляВычисленияАмортизацииНУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияНУ.СпособНачисленияАмортизации, ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииНМА.ПустаяСсылка)) КАК СпособНачисленияАмортизацииНУ,
	|	ПервоначальныеСведения.ОбъемПродукцииРаботДляВычисленияАмортизации 	КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПервоначальныеСведения.ЛиквидационнаяСтоимость                     	КАК ЛиквидационнаяСтоимость,
	|	ПервоначальныеСведения.Период                                      	КАК Период,
	|	ПервоначальныеСведенияНУ.Период                                    КАК ПериодНУ,
	|	ВЫБОР 
	|		КОГДА  
	|			ЕСТЬNULL(ПервоначальныеСведенияНУ.СпособНачисленияАмортизации,
	|						ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииНМА.ПустаяСсылка)) = 
	|						ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииНМА.Производственный) 
	|		
	|	ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ 									   КАК НачислятьАмортизациюНУ,
	|	ПервоначальныеСведенияНУ.НалоговаяГруппаОС                         КАК НалоговаяГруппаОС,
	|	ПервоначальныеСведенияНУ.НалоговоеНазначение                       КАК НалоговоеНазначение,
	|	ЕСТЬNULL(ВыработкаНМА.КоличествоОборот, 0)                         КАК ТекущийОбъемПродукцииРабот,
	|	МестонахождениеНМА.Местонахождение                                 КАК Местонахождение,
	|	СпособыОтраженияРасходов.СпособОтраженияРасходов                   КАК СпособыОтраженияРасходовПоАмортизации,
	|	ПервоначальныеСведения.ПервоначальнаяСтоимость                     КАК СтоимостьКонечныйОстаток,
	|	ЕСТЬNULL(НачисленнаяАмортизация.СуммаОборот, 0)                    КАК АмортизацияОборот,
	|	0            													   КАК СтоимостьНаНачалоГода,
	|	0        														   КАК СтоимостьНаНачалоКвартала,
	|	ПервоначальныеСведенияНУ.ПервоначальнаяСтоимостьНУ                 КАК СтоимостьКонечныйОстатокНУ,
	|	ЕСТЬNULL(НачисленнаяАмортизация.СуммаНУОборотКт, 0)                КАК АмортизацияОборотНУ,
	|	0            													   КАК СтоимостьНаНачалоГодаНУ,
	|	0        														   КАК СтоимостьНаНачалоКварталаНУ,
	|	NULL                            								   КАК ДатаПервойАмортизации,
	|	СчетаБухгалтерскогоУчета.СчетУчета                                 КАК СчетУчета,
	|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации                 КАК СчетНачисленияАмортизации
	|ИЗ
	|	СписокНМАПринятыхВТекущемМесяце
	|	ЛЕВОЕ СОЕДИНЕНИЕ                                                                              
	|		РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПервых(
	|			&НачалоПериода,
	|		    Организация = &Организация
	|		    И НематериальныйАктив В (ВЫБРАТЬ НематериальныйАктив ИЗ СписокНМАПринятыхВТекущемМесяце)) КАК ПервоначальныеСведения
	|	ПО СписокНМАПринятыхВТекущемМесяце.НематериальныйАктив = ПервоначальныеСведения.НематериальныйАктив
	|	ЛЕВОЕ СОЕДИНЕНИЕ                                                                              
	|		РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПервых(
	|			&НачалоПериода,
	|		    Организация = &Организация
	|		    И НематериальныйАктив В (ВЫБРАТЬ НематериальныйАктив ИЗ СписокНМАПринятыхВТекущемМесяце)) КАК ПервоначальныеСведенияНУ
	|	ПО СписокНМАПринятыхВТекущемМесяце.НематериальныйАктив = ПервоначальныеСведенияНУ.НематериальныйАктив
	|	ЛЕВОЕ СОЕДИНЕНИЕ                                                                              
	|		РегистрНакопления.ВыработкаНМА.Обороты(
	|	        &НачалоПериода,
	|	        &КонецПериода, ,
	|	        НематериальныйАктив В (ВЫБРАТЬ НематериальныйАктив ИЗ СписокНМАПринятыхВТекущемМесяце)) КАК ВыработкаНМА
	|	ПО ПервоначальныеСведения.НематериальныйАктив = ВыработкаНМА.НематериальныйАктив
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.СрезПервых(
	|	                    &НачалоПериода,
	|	                    Организация = &Организация
	|	                    И НематериальныйАктив В (ВЫБРАТЬ НематериальныйАктив ИЗ СписокНМАПринятыхВТекущемМесяце)) КАК СпособыОтраженияРасходов
	|	ПО СписокНМАПринятыхВТекущемМесяце.НематериальныйАктив = СпособыОтраженияРасходов.НематериальныйАктив
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|	                       &НачалоПериода,
	|	                       &КонецПериода, ,
	|	                       (НЕ СчетДт В (&СчетаАмортизации)), ,
	|	                       СчетКт В (&СчетаАмортизации),
	|	                       &СубконтоНМА,
	|	                       Организация = &Организация
	|	                       И СубконтоКт1 В (ВЫБРАТЬ НематериальныйАктив ИЗ СписокНМАПринятыхВТекущемМесяце)
	|	                       ) КАК НачисленнаяАмортизация
	|	ПО СписокНМАПринятыхВТекущемМесяце.НематериальныйАктив = НачисленнаяАмортизация.СубконтоКт1
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПервых(
	|	                    &НачалоПериода,
	|	                    Организация = &Организация
	|	                    И НематериальныйАктив В (ВЫБРАТЬ НематериальныйАктив ИЗ СписокНМАПринятыхВТекущемМесяце)) КАК СчетаБухгалтерскогоУчета
	|	ПО СписокНМАПринятыхВТекущемМесяце.НематериальныйАктив = СчетаБухгалтерскогоУчета.НематериальныйАктив
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.МестонахождениеНМАБухгалтерскийУчет.СрезПервых(
	|		                &НачалоПериода, Организация = &Организация И НематериальныйАктив В (ВЫБРАТЬ НематериальныйАктив ИЗ СписокНМАПринятыхВТекущемМесяце)) КАК МестонахождениеНМА
	|	ПО СписокНМАПринятыхВТекущемМесяце.НематериальныйАктив = МестонахождениеНМА.НематериальныйАктив
	| ГДЕ ПервоначальныеСведения.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииНМА.Производственный)
	|";
	ВыборкаПоНМА = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПоНМА.Следующий() Цикл
		
		НачислятьАмортизацию 	= Истина;
		НачислятьАмортизациюНУ 	= ВыборкаПоНМА.НачислятьАмортизациюНУ;
		
		НачислятьАмортизацию = НачислятьАмортизацию И ОтражатьВБУ;
		НачислятьАмортизациюНУ = НачислятьАмортизациюНУ И ОтражатьВНУ;
		
		СпособНачисленияАмортизацииНУ = ВыборкаПоНМА.СпособНачисленияАмортизацииНУ;
		Если НЕ ЗначениеЗаполнено(СпособНачисленияАмортизацииНУ) Тогда
			СпособНачисленияАмортизацииНУ  = ВыборкаПоНМА.СпособНачисленияАмортизации;
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СтоимостьДляВычисленияАмортизацииНУ) И НачислятьАмортизациюНУ Тогда
			
			НачислятьАмортизациюНУ = Ложь;	
			
		КонецЕсли;	
		
		Если НачислятьАмортизацию И (ВыборкаПоНМА.АмортизацияОборот > 0) Тогда
			
			Если ВыдаватьСообщения Тогда
				
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для нематериального актива %1 амортизация в этом месяце уже начислялась';uk='Бух. розрахунок амортизації: для нематеріального активу %1 амортизація в цьому місяці вже нараховувалася'"), ВыборкаПоНМА.НематериальныйАктив);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , );
				
			КонецЕсли;
			
			Продолжить; // по указанному НМА в этом месяце уже начисляли амортизацию 
			
		КонецЕсли;

		Если НачислятьАмортизацию И НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СпособНачисленияАмортизации) Тогда
			
			Если ВыдаватьСообщения Тогда
				
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для нематериального актива %1 не указан способ амортизации';uk='Бух. розрахунок амортизації: для нематеріального активу %1 не вказаний спосіб амортизації'"), ВыборкаПоНМА.НематериальныйАктив);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если НачислятьАмортизациюНУ И НЕ ЗначениеЗаполнено(СпособНачисленияАмортизацииНУ) Тогда
			
			Если ВыдаватьСообщения Тогда
				
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для нематериального актива %1 не указан способ амортизации';uk='Под. розрахунок амортизації: для основного засобу %1 не вказаний спосіб амортизації'"), ВыборкаПоНМА.НематериальныйАктив);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если НачислятьАмортизациюНУ 
				И СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииНМА.Производственный 
				И НачалоМесяца(ДатаРасчета) >= ДатаНКУ2015 
				И НачалоМесяца(ДатаРасчета) < Дата('20200401') Тогда
			
			Если ВыдаватьСообщения Тогда
				
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для нематериального актива %1 указан недопустимый производственный метод начисления амортизации. Измените метод документом ""Изменение параметров начисления амортизации НМА"". ';uk='Под. розрахунок амортизації: для нематеріального активу %1 вказано некоректний виробничий метод нарахування амортизації. Змініть метод документом ""Зміна параметрів нарахування амортизації НМА"". '"), ВыборкаПоНМА.НематериальныйАктив);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если НачислятьАмортизациюНУ И ВыборкаПоНМА.НалоговоеНазначение = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность И НачалоМесяца(ДатаРасчета) >= ДатаНКУ2015 Тогда
			
			НачислятьАмортизациюНУ = Ложь;	
			
			Если ВыдаватьСообщения Тогда
				
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для нематериального актива %1 указано нехоз. налоговое назначение. Амортизация (НУ) не начислена.';uk='Под. розрахунок амортизації: для нематеріального активу %1 зазначено негосп. податкове призначення. Амортизація (ПО) не нарахована.'"), ВыборкаПоНМА.НематериальныйАктив);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , );
				
			КонецЕсли;
							 
		КонецЕсли;

		Если НачислятьАмортизацию И НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации) Тогда
			
			Если ВыдаватьСообщения Тогда
				
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для нематериального актива %1 стоимость для вычисления амортизации равна 0';uk='Бух. розрахунок амортизації: для нематеріального активу %1 вартість для обчислення амортизації дорівнює 0'"), ВыборкаПоНМА.НематериальныйАктив);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		СуммаАмортизации = 0;
		СуммаАмортизацииНУ = 0;
		
		СтоимостьДляВычисленияАмортизации 			= ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации;
		ЛиквидационнаяСтоимость						= ВыборкаПоНМА.ЛиквидационнаяСтоимость;
		АмортизируемаяСтоимость	 					= СтоимостьДляВычисленияАмортизации - ЛиквидационнаяСтоимость;
		СрокИспользованияДляВычисленияАмортизации	= ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации;
		
		СтоимостьДляВычисленияАмортизацииНУ 		= ВыборкаПоНМА.СтоимостьДляВычисленияАмортизацииНУ;
		АмортизируемаяСтоимостьНУ	 				= СтоимостьДляВычисленияАмортизацииНУ - ЛиквидационнаяСтоимость;
		СрокИспользованияДляВычисленияАмортизацииНУ	= ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизацииНУ;
		
		ТекущийОбъемПродукцииРабот					= ВыборкаПоНМА.ТекущийОбъемПродукцииРабот;
		ОбъемПродукцииРаботДляВычисленияАмортизации	= ВыборкаПоНМА.ОбъемПродукцииРаботДляВычисленияАмортизации;
		ДатаПервойАмортизации                       = ВыборкаПоНМА.ДатаПервойАмортизации;
		
		Если ВыборкаПоНМА.ДатаПервойАмортизации = NULL Тогда
	    	ДатаПервойАмортизацииНУ 				= NULL;
		Иначе	
			ДатаПервойАмортизацииНУ 				= Макс(ВыборкаПоНМА.ДатаПервойАмортизации, '20110331');
		КонецЕсли;	
		
		СтоимостьКонечныйОстаток					= ВыборкаПоНМА.СтоимостьКонечныйОстаток;
		
		СтоимостьКонечныйОстатокНУ					= ВыборкаПоНМА.СтоимостьКонечныйОстатокНУ;
		
		Если (ЛиквидационнаяСтоимость <> 0) 
		   И (ЛиквидационнаяСтоимость >= СтоимостьКонечныйОстаток) Тогда
			
			Если ВыдаватьСообщения Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: остаточная стоимость нематериального актива %1 достигла ликвидационной <%2>, амортизация не начислена.';uk='Бух. розрахунок амортизації: залишкова вартість нематеріального активу %1 досягла ліквідаційної <%2>, амортизація не нарахована.'"),
				                             ВыборкаПоНМА.НематериальныйАктив, ЛиквидационнаяСтоимость); 
				
											 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
            Продолжить;
			
		КонецЕсли;
		
		Если НачислятьАмортизацию Тогда
		
		Если ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.Прямолинейный Тогда

			Если СрокИспользованияДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не указан срок полезного использования!';uk='Бух. розрахунок амортизації: для нематеріального активу %1 при розрахунку за способом %2 не вказаний строк корисного використання!'"),
					                           ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли; 
			
			СуммаАмортизации = АмортизируемаяСтоимость / СрокИспользованияДляВычисленияАмортизации;
			
			Если НачислятьАмортизациюНУ Тогда
				Если СрокИспользованияДляВычисленияАмортизацииНУ = 0 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не указан срок полезного использования!';uk='Под. розрахунок амортизації: для нематеріального активу %1 при розрахунку за способом %2 не вказаний строк корисного використання!'"),
						                           ВыборкаПоНМА.НематериальныйАктив, СпособНачисленияАмортизацииНУ);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли; 
				
				СуммаАмортизацииНУ = АмортизируемаяСтоимостьНУ / СрокИспользованияДляВычисленияАмортизацииНУ;
			КонецЕсли;	

		ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.Производственный Тогда

			Если ОбъемПродукцииРаботДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не указан предполагаемый объем выработки!';uk='Бух. розрахунок амортизації: для нематеріального активу %1 при розрахунку за способом %2 не вказаний передбачуваний обсяг виробітку!'"), ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;

			СуммаАмортизации = АмортизируемаяСтоимость * ТекущийОбъемПродукцииРабот / ОбъемПродукцииРаботДляВычисленияАмортизации;
			
			СуммаАмортизацииНУ = АмортизируемаяСтоимостьНУ * ТекущийОбъемПродукцииРабот / ОбъемПродукцииРаботДляВычисленияАмортизации;

		ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшенияОстатка Тогда

			Если ЛиквидационнаяСтоимость = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не указана ликвидационная стоимость!';uk='Бух. розрахунок амортизації: для нематеріального активу %1 при розрахунку за способом %2 не вказана ліквідаційна вартість!'"), ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;

			Если СрокИспользованияДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не указан срок полезного использования!';uk='Бух. розрахунок амортизації: для нематеріального активу %1 при розрахунку за способом %2 не вказаний строк корисного використання!'"),
					                           ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Если Год(ВыборкаПоНМА.Период) = Год(ДатаРасчета) Тогда
				
				СтоимостьИтоговая = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации;
				
			Иначе
				
				СтоимостьИтоговая = ВыборкаПоНМА.СтоимостьНаНачалоГода;
				
			КонецЕсли;
			
			Если ДатаПервойАмортизации = NULL Тогда
				
				Если ВыдаватьСообщения Тогда
					
					Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не определилась дата ввода в эксплуатацию!';uk='Бух. розрахунок амортизації: для нематеріального активу %1 при розрахунку способом %2 не зазначена дата введення в експлуатацію!'"), ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации));
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			РазностьЛет = Год(ДатаРасчета) - Год(ДатаПервойАмортизации);
			
			Если РазностьЛет > 0 Тогда
				
				ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизации 
				                                   - РазностьЛет * 12
				                                   + Месяц(ДатаПервойАмортизации)
			ИначеЕсли СрокИспользованияДляВычисленияАмортизации < 12 Тогда											   
				
				ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизации;
												   
			Иначе
				
				ОсталосьЭксплуатироватьВЭтомГоду = 0;
												   
			КонецЕсли;
			
			Если (ОсталосьЭксплуатироватьВЭтомГоду < 12) И (ОсталосьЭксплуатироватьВЭтомГоду > 0)  Тогда
				
				// Последний год применяем прямолинейный метод
				
				СуммаГодовойАмортизации = 12 * (СтоимостьИтоговая - ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГоду
				
			ИначеЕсли ОсталосьЭксплуатироватьВЭтомГоду >= 0 Тогда
				
				СуммаГодовойАмортизации = СтоимостьИтоговая * (1 - Pow(ЛиквидационнаяСтоимость / СтоимостьДляВычисленияАмортизации,
				                                                       12 / СрокИспользованияДляВычисленияАмортизации));
				
			Иначе // Срок использования исчерпан
				
				СуммаГодовойАмортизации = 0;
				
				Если ВыдаватьСообщения Тогда
					
					Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для нематериального актива %1 при расчете по способу %2 срок использования исчерпан!';uk='Бух. розрахунок амортизації: для нематеріального активу %1 при розрахунку способом %2 строк використання вичерпаний!'"), ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации));
					
				КонецЕсли;
			
			КонецЕсли;
			
			СуммаАмортизации  = СуммаГодовойАмортизации / 12;
			
			Если НачислятьАмортизациюНУ Тогда
				
				Если СрокИспользованияДляВычисленияАмортизацииНУ = 0 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не указан срок полезного использования!';uk='Под. розрахунок амортизації: для нематеріального активу %1 при розрахунку за способом %2 не вказаний строк корисного використання!'"),
						                           ВыборкаПоНМА.НематериальныйАктив, СпособНачисленияАмортизацииНУ);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
				Если Год(ВыборкаПоНМА.ПериодНУ) = Год(ДатаРасчета) Тогда
					
					СтоимостьИтоговаяНУ = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизацииНУ;
					
				Иначе
					
					СтоимостьИтоговаяНУ = ВыборкаПоНМА.СтоимостьНаНачалоГодаНУ;
					
				КонецЕсли;
				
				Если ДатаПервойАмортизацииНУ = NULL Тогда
					
					Если ВыдаватьСообщения Тогда
						
						Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не определилась дата ввода в эксплуатацию!';uk='Под. розрахунок амортизації: для нематеріального активу %1 при розрахунку способом %2 не зазначена дата введення в експлуатацію!'"), ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации));
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
				РазностьЛетНУ = Год(ДатаРасчета) - Год(ДатаПервойАмортизацииНУ);
				
				Если РазностьЛетНУ > 0 Тогда
					
					ОсталосьЭксплуатироватьВЭтомГодуНУ = СрокИспользованияДляВычисленияАмортизацииНУ 
					                                   - РазностьЛетНУ * 12
					                                   + Месяц(ДатаПервойАмортизацииНУ)
				ИначеЕсли СрокИспользованияДляВычисленияАмортизацииНУ < 12 Тогда											   
					
					ОсталосьЭксплуатироватьВЭтомГодуНУ = СрокИспользованияДляВычисленияАмортизацииНУ;
													   
				Иначе
					
					ОсталосьЭксплуатироватьВЭтомГодуНУ = 0;
													   
				КонецЕсли;
				
				Если (ОсталосьЭксплуатироватьВЭтомГодуНУ < 12) И (ОсталосьЭксплуатироватьВЭтомГодуНУ > 0)  Тогда
					
					// Последний год применяем прямолинейный метод
					
					СуммаГодовойАмортизацииНУ = 12 * (СтоимостьИтоговаяНУ - ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГодуНУ
					
				ИначеЕсли ОсталосьЭксплуатироватьВЭтомГодуНУ >= 0 Тогда
					
					СуммаГодовойАмортизацииНУ = СтоимостьИтоговаяНУ * (1 - Pow(ЛиквидационнаяСтоимость / СтоимостьДляВычисленияАмортизацииНУ,
					                                                       12 / СрокИспользованияДляВычисленияАмортизацииНУ));
					
				Иначе // Срок использования исчерпан
					
					СуммаГодовойАмортизацииНУ = 0;
					
					Если ВыдаватьСообщения Тогда
						
						Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для нематериального актива %1 при расчете по способу %2 срок использования исчерпан!';uk='Под. розрахунок амортизації: для нематеріального активу %1 при розрахунку способом %2 строк використання вичерпаний!'"), ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации));
						
					КонецЕсли;
				
				КонецЕсли;
				
				СуммаАмортизацииНУ  = СуммаГодовойАмортизацииНУ / 12;
				
			КонецЕсли;

		ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.УскоренногоУменьшенияОстатка Тогда
			
			Если СрокИспользованияДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не указан срок полезного использования!';uk='Бух. розрахунок амортизації: для нематеріального активу %1 при розрахунку за способом %2 не вказаний строк корисного використання!'"),
					                           ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли; 
			
			Если СрокИспользованияДляВычисленияАмортизации <= 24 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для нематериального актива %1 при расчете по способу %2 указан срок полезного использования <%3> мес.!
|Для корректного начисления амортизации срок использования должен быть более 24 месяца.';uk='Бух. розрахунок амортизації: для нематеріального активу %1 при розрахунку способом %2 вказаний строк корисного використання <%3> міс.!
|Для коректного нарахування амортизації строк використання повинен бути більше 24 місяців.'"),
					ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации, СрокИспользованияДляВычисленияАмортизации);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Если Год(ВыборкаПоНМА.Период) = Год(ДатаРасчета) Тогда
				
				СтоимостьИтоговая = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации;
				
			Иначе
				
				СтоимостьИтоговая = ВыборкаПоНМА.СтоимостьНаНачалоГода;
				
			КонецЕсли;
			
			Если ДатаПервойАмортизации = NULL Тогда
				
				Если ВыдаватьСообщения Тогда
					
					Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не определилась дата ввода в эксплуатацию!';uk='Бух. розрахунок амортизації: для нематеріального активу %1 при розрахунку способом %2 не зазначена дата введення в експлуатацію!'"), ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации));
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			РазностьЛет = Год(ДатаРасчета) - Год(ДатаПервойАмортизации);
			
			Если РазностьЛет > 0 Тогда
				
				ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизации 
				                                   - РазностьЛет * 12
				                                   + Месяц(ДатаПервойАмортизации)
												   
			ИначеЕсли СрокИспользованияДляВычисленияАмортизации < 12 Тогда											   
				
				ОсталосьЭксплуатироватьВЭтомГоду = СрокИспользованияДляВычисленияАмортизации;
												   
			Иначе
				
				ОсталосьЭксплуатироватьВЭтомГоду = 0;
												   
			КонецЕсли;
			
			Если (ОсталосьЭксплуатироватьВЭтомГоду <= 12) И (ОсталосьЭксплуатироватьВЭтомГоду > 0)  Тогда
				
				// Последний год применяем прямолинейный метод
				
				СуммаГодовойАмортизации = 12 * (СтоимостьИтоговая - ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГоду
				
			ИначеЕсли ОсталосьЭксплуатироватьВЭтомГоду >= 0 Тогда
				
				СуммаГодовойАмортизации = 2 * (СтоимостьИтоговая - ЛиквидационнаяСтоимость) / СрокИспользованияДляВычисленияАмортизации * 12;
				
			Иначе // Срок использования исчерпан
				                                            
				СуммаГодовойАмортизации = 0;
				
				Если ВыдаватьСообщения Тогда
					
					Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для нематериального актива %1 при расчете по способу %2 срок использования исчерпан!';uk='Бух. розрахунок амортизації: для нематеріального активу %1 при розрахунку способом %2 строк використання вичерпаний!'"), ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации));
					
				КонецЕсли;
			
			КонецЕсли;
			
			СуммаАмортизации  = СуммаГодовойАмортизации / 12;
			
			Если НачислятьАмортизациюНУ Тогда
				
				Если СрокИспользованияДляВычисленияАмортизацииНУ = 0 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не указан срок полезного использования!';uk='Под. розрахунок амортизації: для нематеріального активу %1 при розрахунку за способом %2 не вказаний строк корисного використання!'"),
						                           ВыборкаПоНМА.НематериальныйАктив, СпособНачисленияАмортизацииНУ);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли; 
				
				Если СрокИспользованияДляВычисленияАмортизацииНУ <= 24 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для нематериального актива %1 при расчете по способу %2 указан срок полезного использования <%3> мес.!
|Для корректного начисления амортизации срок использования должен быть более 24 месяца.';uk='Под. розрахунок амортизації: для нематеріального активу %1 при розрахунку способом %2 вказаний строк корисного використання <%3> міс.!
|Для коректного нарахування амортизації строк використання повинен бути більше 24 місяців.'"),
						ВыборкаПоНМА.НематериальныйАктив, СпособНачисленияАмортизацииНУ, СрокИспользованияДляВычисленияАмортизацииНУ);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
						
					КонецЕсли;
					
				КонецЕсли; 
				
				Если Год(ВыборкаПоНМА.ПериодНУ) = Год(ДатаРасчета) Тогда
					
					СтоимостьИтоговаяНУ = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизацииНУ;
					
				Иначе
					
					СтоимостьИтоговаяНУ = ВыборкаПоНМА.СтоимостьНаНачалоГодаНУ;
					
				КонецЕсли;
				
				Если ДатаПервойАмортизацииНУ = NULL Тогда
					
					Если ВыдаватьСообщения Тогда
						
						Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не определилась дата ввода в эксплуатацию!';uk='Под. розрахунок амортизації: для нематеріального активу %1 при розрахунку способом %2 не зазначена дата введення в експлуатацію!'"), ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации));
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
				РазностьЛетНУ = Год(ДатаРасчета) - Год(ДатаПервойАмортизацииНУ);
				
				Если РазностьЛетНУ > 0 Тогда
					
					ОсталосьЭксплуатироватьВЭтомГодуНУ = СрокИспользованияДляВычисленияАмортизацииНУ 
					                                   - РазностьЛетНУ * 12
					                                   + Месяц(ДатаПервойАмортизацииНУ)
													   
				ИначеЕсли СрокИспользованияДляВычисленияАмортизацииНУ < 12 Тогда											   
					
					ОсталосьЭксплуатироватьВЭтомГодуНУ = СрокИспользованияДляВычисленияАмортизацииНУ;
													   
				Иначе
					
					ОсталосьЭксплуатироватьВЭтомГодуНУ = 0;
													   
				КонецЕсли;
				
				Если (ОсталосьЭксплуатироватьВЭтомГодуНУ <= 12) И (ОсталосьЭксплуатироватьВЭтомГодуНУ > 0)  Тогда
					
					// Последний год применяем прямолинейный метод
					
					СуммаГодовойАмортизацииНУ = 12 * (СтоимостьИтоговаяНУ - ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГодуНУ
					
				ИначеЕсли ОсталосьЭксплуатироватьВЭтомГодуНУ >= 0 Тогда
					
					СуммаГодовойАмортизацииНУ = 2 * (СтоимостьИтоговаяНУ - ЛиквидационнаяСтоимость) / СрокИспользованияДляВычисленияАмортизацииНУ * 12;
					
				Иначе // Срок использования исчерпан
					
					СуммаГодовойАмортизацииНУ = 0;
					
					Если ВыдаватьСообщения Тогда
						
						Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для нематериального актива %1 при расчете по способу %2 срок использования исчерпан!';uk='Под. розрахунок амортизації: для нематеріального активу %1 при розрахунку способом %2 строк використання вичерпаний!'"), ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации));
						
					КонецЕсли;
				
				КонецЕсли;
				
				СуммаАмортизацииНУ  = СуммаГодовойАмортизацииНУ / 12;
				
				
			КонецЕсли;
			
		ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.Кумулятивный Тогда

			Если СрокИспользованияДляВычисленияАмортизации = 0 Тогда
				
				Если ВыдаватьСообщения Тогда
					
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не указан срок полезного использования!';uk='Бух. розрахунок амортизації: для нематеріального активу %1 при розрахунку за способом %2 не вказаний строк корисного використання!'"),
					                           ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли; 
			
			Если ДатаПервойАмортизации = NULL Тогда
				
				Если ВыдаватьСообщения Тогда
					
					Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не определилась дата первой амортизации!';uk='Бух. розрахунок амортизації: для нематеріального активу %1 при розрахунку за способом %2 не визначилася дата першої амортизації!'"), ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации));
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;

			ЧислоЛетПользования       = Макс(1,СрокИспользованияДляВычисленияАмортизации / 12);
			ЧислоЛетПользования       = Цел(ЧислоЛетПользования) + ?(ЧислоЛетПользования 
			                                                    - Цел(ЧислоЛетПользования) = 0, 0, 1); // округляем к наибольшему целому
			
			ГодИспользования          = Год(ДатаРасчета) - Год(ДатаПервойАмортизации) + 1;
			
			Если Месяц(ДатаПервойАмортизации) >= Месяц(ДатаРасчета) Тогда
				
				ГодИспользования	  = ГодИспользования - 1;
				
			КонецЕсли; 

			СуммаГодовойАмортизации   = АмортизируемаяСтоимость * (ЧислоЛетПользования - ГодИспользования + 1)
					/ (ЧислоЛетПользования * (ЧислоЛетПользования + 1) / 2 );
				
			СуммаАмортизации = СуммаГодовойАмортизации / 12;
			
			Если НачислятьАмортизациюНУ Тогда
				
				Если СрокИспользованияДляВычисленияАмортизацииНУ = 0 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не указан срок полезного использования!';uk='Под. розрахунок амортизації: для нематеріального активу %1 при розрахунку за способом %2 не вказаний строк корисного використання!'"),
						                           ВыборкаПоНМА.НематериальныйАктив, СпособНачисленияАмортизацииНУ);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли; 
				
				Если ДатаПервойАмортизацииНУ = NULL Тогда
					
					Если ВыдаватьСообщения Тогда
						
						Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не определилась дата первой амортизации!';uk='Под. розрахунок амортизації: для нематеріального активу %1 при розрахунку за способом %2 не визначилася дата першої амортизації!'"), ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации));
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;

				ЧислоЛетПользования       = Макс(1,СрокИспользованияДляВычисленияАмортизацииНУ / 12);
				ЧислоЛетПользования       = Цел(ЧислоЛетПользования) + ?(ЧислоЛетПользования 
				                                                    - Цел(ЧислоЛетПользования) = 0, 0, 1); // округляем к наибольшему целому
				
				ГодИспользования          = Год(ДатаРасчета) - Год(ДатаПервойАмортизацииНУ) + 1;
				
				Если Месяц(ДатаПервойАмортизацииНУ) >= Месяц(ДатаРасчета) Тогда
					
					ГодИспользования	  = ГодИспользования - 1;
					
				КонецЕсли; 

				СуммаГодовойАмортизацииНУ   = АмортизируемаяСтоимостьНУ * (ЧислоЛетПользования - ГодИспользования + 1)
						/ (ЧислоЛетПользования * (ЧислоЛетПользования + 1) / 2 );
					
				СуммаАмортизацииНУ = СуммаГодовойАмортизацииНУ / 12;
				
			КонецЕсли;
	
		Иначе 
			
			Если ВыдаватьСообщения  Тогда
			
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для нематериального актива %1 установлен способ расчета амортизации, не поддерживаемый в бухгалтерском учете (%2)!';uk='Бух. розрахунок амортизації: для нематеріального активу %1 встановлений спосіб розрахунку амортизації, який не підтримується у бухгалтерському обліку (%2)!'"), ВыборкаПоНМА.НематериальныйАктив, ВыборкаПоНМА.СпособНачисленияАмортизации);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
			
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		КонецЕсли;

		Если НачислятьАмортизациюНУ Тогда
		
			Если СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииНМА.Прямолинейный Тогда

				Если СрокИспользованияДляВычисленияАмортизацииНУ = 0 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не указан срок полезного использования!';uk='Под. розрахунок амортизації: для нематеріального активу %1 при розрахунку за способом %2 не вказаний строк корисного використання!'"),
						                           ВыборкаПоНМА.НематериальныйАктив, СпособНачисленияАмортизацииНУ);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли; 
				
				СуммаАмортизацииНУ = АмортизируемаяСтоимостьНУ / СрокИспользованияДляВычисленияАмортизацииНУ;

			
			ИначеЕсли СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииНМА.Производственный 
						И (НачалоМесяца(ДатаРасчета) < ДатаНКУ2015 ИЛИ НачалоМесяца(ДатаРасчета) >= Дата('20200401')) Тогда
				
				
				Если ОбъемПродукцииРаботДляВычисленияАмортизации = 0 Тогда
					
					Продолжить;
					
				КонецЕсли;

				СуммаАмортизацииНУ = АмортизируемаяСтоимостьНУ * ТекущийОбъемПродукцииРабот / ОбъемПродукцииРаботДляВычисленияАмортизации;

			ИначеЕсли СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшенияОстатка Тогда

				Если СрокИспользованияДляВычисленияАмортизацииНУ = 0 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не указан срок полезного использования!';uk='Под. розрахунок амортизації: для нематеріального активу %1 при розрахунку за способом %2 не вказаний строк корисного використання!'"),
						                           ВыборкаПоНМА.НематериальныйАктив, СпособНачисленияАмортизацииНУ);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
				Если Год(ВыборкаПоНМА.ПериодНУ) = Год(ДатаРасчета) Тогда
					
					СтоимостьИтоговаяНУ = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизацииНУ;
					
				Иначе
					
					СтоимостьИтоговаяНУ = ВыборкаПоНМА.СтоимостьНаНачалоГодаНУ;
					
				КонецЕсли;
				
				Если ДатаПервойАмортизацииНУ = NULL Тогда
					
					Если ВыдаватьСообщения Тогда
						
						Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не определилась дата ввода в эксплуатацию!';uk='Под. розрахунок амортизації: для нематеріального активу %1 при розрахунку способом %2 не зазначена дата введення в експлуатацію!'"), ВыборкаПоНМА.НематериальныйАктив, СпособНачисленияАмортизацииНУ));
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
				РазностьЛетНУ = Год(ДатаРасчета) - Год(ДатаПервойАмортизацииНУ);
				
				Если РазностьЛетНУ > 0 Тогда
					
					ОсталосьЭксплуатироватьВЭтомГодуНУ = СрокИспользованияДляВычисленияАмортизацииНУ 
					                                   - РазностьЛетНУ * 12
					                                   + Месяц(ДатаПервойАмортизацииНУ)
				ИначеЕсли СрокИспользованияДляВычисленияАмортизацииНУ < 12 Тогда											   
					
					ОсталосьЭксплуатироватьВЭтомГодуНУ = СрокИспользованияДляВычисленияАмортизацииНУ;
													   
				Иначе
					
					ОсталосьЭксплуатироватьВЭтомГодуНУ = 0;
													   
				КонецЕсли;
				
				Если (ОсталосьЭксплуатироватьВЭтомГодуНУ < 12) И (ОсталосьЭксплуатироватьВЭтомГодуНУ > 0)  Тогда
					
					// Последний год применяем прямолинейный метод
					
					СуммаГодовойАмортизацииНУ = 12 * (СтоимостьИтоговаяНУ - ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГодуНУ
					
				ИначеЕсли ОсталосьЭксплуатироватьВЭтомГодуНУ >= 0 Тогда
					
					СуммаГодовойАмортизацииНУ = СтоимостьИтоговаяНУ * (1 - Pow(ЛиквидационнаяСтоимость / СтоимостьДляВычисленияАмортизацииНУ,
					                                                       12 / СрокИспользованияДляВычисленияАмортизацииНУ));
					
				Иначе // Срок использования исчерпан
					
					СуммаГодовойАмортизацииНУ = 0;
					
					Если ВыдаватьСообщения Тогда
						
						Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для нематериального актива %1 при расчете по способу %2 срок использования исчерпан!';uk='Под. розрахунок амортизації: для нематеріального активу %1 при розрахунку способом %2 строк використання вичерпаний!'"), ВыборкаПоНМА.НематериальныйАктив, СпособНачисленияАмортизацииНУ));
						
					КонецЕсли;
				
				КонецЕсли;
				
				СуммаАмортизацииНУ  = СуммаГодовойАмортизацииНУ / 12;
				

			ИначеЕсли СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииНМА.УскоренногоУменьшенияОстатка Тогда
			
				Если СрокИспользованияДляВычисленияАмортизацииНУ = 0 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не указан срок полезного использования!';uk='Под. розрахунок амортизації: для нематеріального активу %1 при розрахунку за способом %2 не вказаний строк корисного використання!'"),
						                           ВыборкаПоНМА.НематериальныйАктив, СпособНачисленияАмортизацииНУ);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли; 
				
				Если СрокИспользованияДляВычисленияАмортизацииНУ <= 24 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для нематериального актива %1 при расчете по способу %2 указан срок полезного использования <%3> мес.!
|Для корректного начисления амортизации срок использования должен быть более 24 месяца.';uk='Под. розрахунок амортизації: для нематеріального активу %1 при розрахунку способом %2 вказаний строк корисного використання <%3> міс.!
|Для коректного нарахування амортизації строк використання повинен бути більше 24 місяців.'"),
						ВыборкаПоНМА.НематериальныйАктив, СпособНачисленияАмортизацииНУ, СрокИспользованияДляВычисленияАмортизацииНУ);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
						
					КонецЕсли;
					
				КонецЕсли; 
				
				Если Год(ВыборкаПоНМА.ПериодНУ) = Год(ДатаРасчета) Тогда
					
					СтоимостьИтоговаяНУ = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизацииНУ;
					
				Иначе
					
					СтоимостьИтоговаяНУ = ВыборкаПоНМА.СтоимостьНаНачалоГодаНУ;
					
				КонецЕсли;
				
				Если ДатаПервойАмортизацииНУ = NULL Тогда
					
					Если ВыдаватьСообщения Тогда
						
						Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не определилась дата ввода в эксплуатацию!';uk='Под. розрахунок амортизації: для нематеріального активу %1 при розрахунку способом %2 не зазначена дата введення в експлуатацію!'"), ВыборкаПоНМА.НематериальныйАктив, СпособНачисленияАмортизацииНУ));
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
				РазностьЛетНУ = Год(ДатаРасчета) - Год(ДатаПервойАмортизацииНУ);
				
				Если РазностьЛетНУ > 0 Тогда
					
					ОсталосьЭксплуатироватьВЭтомГодуНУ = СрокИспользованияДляВычисленияАмортизацииНУ 
					                                   - РазностьЛетНУ * 12
					                                   + Месяц(ДатаПервойАмортизацииНУ)
													   
				ИначеЕсли СрокИспользованияДляВычисленияАмортизацииНУ < 12 Тогда											   
					
					ОсталосьЭксплуатироватьВЭтомГодуНУ = СрокИспользованияДляВычисленияАмортизацииНУ;
													   
				Иначе
					
					ОсталосьЭксплуатироватьВЭтомГодуНУ = 0;
													   
				КонецЕсли;
				
				Если (ОсталосьЭксплуатироватьВЭтомГодуНУ <= 12) И (ОсталосьЭксплуатироватьВЭтомГодуНУ > 0)  Тогда
					
					// Последний год применяем прямолинейный метод
					
					СуммаГодовойАмортизацииНУ = 12 * (СтоимостьИтоговаяНУ - ЛиквидационнаяСтоимость) / ОсталосьЭксплуатироватьВЭтомГодуНУ
					
				ИначеЕсли ОсталосьЭксплуатироватьВЭтомГодуНУ >= 0 Тогда
					
					СуммаГодовойАмортизацииНУ = 2 * (СтоимостьИтоговаяНУ - ЛиквидационнаяСтоимость) / СрокИспользованияДляВычисленияАмортизацииНУ * 12;
					
				Иначе // Срок использования исчерпан
					
					СуммаГодовойАмортизацииНУ = 0;
					
					Если ВыдаватьСообщения Тогда
						
						Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для нематериального актива %1 при расчете по способу %2 срок использования исчерпан!';uk='Под. розрахунок амортизації: для нематеріального активу %1 при розрахунку способом %2 строк використання вичерпаний!'"), ВыборкаПоНМА.НематериальныйАктив, СпособНачисленияАмортизацииНУ));
						
					КонецЕсли;
				
				КонецЕсли;
				
				СуммаАмортизацииНУ  = СуммаГодовойАмортизацииНУ / 12;
				
			ИначеЕсли СпособНачисленияАмортизацииНУ = Перечисления.СпособыНачисленияАмортизацииНМА.Кумулятивный Тогда

				Если СрокИспользованияДляВычисленияАмортизацииНУ = 0 Тогда
					
					Если ВыдаватьСообщения Тогда
						
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не указан срок полезного использования!';uk='Под. розрахунок амортизації: для нематеріального активу %1 при розрахунку за способом %2 не вказаний строк корисного використання!'"),
						                           ВыборкаПоНМА.НематериальныйАктив, СпособНачисленияАмортизацииНУ);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли; 
				
				Если ДатаПервойАмортизацииНУ = NULL Тогда
					
					Если ВыдаватьСообщения Тогда
						
						Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для нематериального актива %1 при расчете по способу %2 не определилась дата первой амортизации!';uk='Под. розрахунок амортизації: для нематеріального активу %1 при розрахунку за способом %2 не визначилася дата першої амортизації!'"), ВыборкаПоНМА.НематериальныйАктив, СпособНачисленияАмортизацииНУ));
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;

				ЧислоЛетПользования       = Макс(1,СрокИспользованияДляВычисленияАмортизацииНУ / 12);
				ЧислоЛетПользования       = Цел(ЧислоЛетПользования) + ?(ЧислоЛетПользования 
				                                                    - Цел(ЧислоЛетПользования) = 0, 0, 1); // округляем к наибольшему целому
				
				ГодИспользования          = Год(ДатаРасчета) - Год(ДатаПервойАмортизацииНУ) + 1;
				
				Если Месяц(ДатаПервойАмортизацииНУ) >= Месяц(ДатаРасчета) Тогда
					
					ГодИспользования	  = ГодИспользования - 1;
					
				КонецЕсли; 

				СуммаГодовойАмортизацииНУ   = АмортизируемаяСтоимостьНУ * (ЧислоЛетПользования - ГодИспользования + 1)
						/ (ЧислоЛетПользования * (ЧислоЛетПользования + 1) / 2 );
					
				СуммаАмортизацииНУ = СуммаГодовойАмортизацииНУ / 12;
				
			Иначе 
			
				Если ВыдаватьСообщения  Тогда
				
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нал. расчет амортизации: для нематериального актива %1 установлен способ расчета амортизации, не поддерживаемый в налоговом учете (%2)!';uk='Под. розрахунок амортизації: для нематеріального активу %1 встановлений спосіб розрахунку амортизації, не застосовується в податковому обліку (%2)!'"), ВыборкаПоНМА.НематериальныйАктив, СпособНачисленияАмортизацииНУ);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
				
				КонецЕсли;
			
				Продолжить;
			
			КонецЕсли;
		
		КонецЕсли;
		
		Если НачислятьАмортизацию Тогда 
			СуммаАмортизации  = Макс(0, Мин(СуммаАмортизации, СтоимостьКонечныйОстаток - ЛиквидационнаяСтоимость));
		Иначе
			СуммаАмортизации = 0;
		КонецЕсли;	

		Если НачислятьАмортизациюНУ Тогда
			СуммаАмортизацииНУ  = Макс(0, Мин(СуммаАмортизацииНУ, СтоимостьКонечныйОстатокНУ - ЛиквидационнаяСтоимость));
		Иначе	
			СуммаАмортизацииНУ = 0;
		КонецЕсли;	
		
		СтрокаАмортизации = ТаблицаАмортизации.Добавить();

		СтрокаАмортизации.ОбъектУчета            = ВыборкаПоНМА.НематериальныйАктив;
		СтрокаАмортизации.НаправлениеАмортизации = ВыборкаПоНМА.СпособыОтраженияРасходовПоАмортизации;
    	СтрокаАмортизации.СчетУчета	             = ВыборкаПоНМА.СчетУчета;
    	СтрокаАмортизации.СчетАмортизации	     = ВыборкаПоНМА.СчетНачисленияАмортизации;
    	СтрокаАмортизации.Амортизация            = СуммаАмортизации;
    	СтрокаАмортизации.АмортизацияНУ          = СуммаАмортизацииНУ;
		СтрокаАмортизации.НалоговоеНазначение 	 = ВыборкаПоНМА.НалоговоеНазначение;
        СтрокаАмортизации.Местонахождение 		 = ВыборкаПоНМА.Местонахождение;

		Если НачислятьАмортизацию И СуммаАмортизации = 0 И ВыдаватьСообщения Тогда
			
			Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Бух. расчет амортизации: для нематериального актива %1 амортизация равна 0';uk='Бух. розрахунок амортизації: для нематеріального активу %1 амортизація дорівнює 0'"), ВыборкаПоНМА.НематериальныйАктив));
			
		КонецЕсли;

	КонецЦикла;
	
	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииНМАБухРегл()

///////////////////////////////////////////////////////////////////////////////
// РАСПРЕДЕЛЕНИЕ АМОРТИЗАЦИИ

//Функция получает таблицу значений с указанием списка ОС или НМА и сумм амортизации
//возвращает таблицу значений с распределенными значениями амортизации
//
Функция ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ПроводкиБУ, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, НомерЖурнала, ТекстПроводки = Неопределено) Экспорт

	ДатаРасчета = СтруктураШапкиДокумента.Дата;
	Улучшение = ("МодернизацияОС" = СтруктураШапкиДокумента.ВидДокумента);

	// определим структуру выходной таблицы
	ТабЗатрат = Новый ТаблицаЗначений;
	ТабЗатрат.Колонки.Добавить("Сумма", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла( 15, 2));
	ТабЗатрат.Колонки.Добавить("СуммаНУ", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла( 15, 2));
	ТабЗатрат.Колонки.Добавить("НалоговоеНазначение",      			Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТабЗатрат.Колонки.Добавить("НалоговоеНазначениеДоходовИЗатрат", Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
	ТабЗатрат.Колонки.Добавить("СчетЗатрат");
	ТабЗатрат.Колонки.Добавить("СчетАмортизации");
	ТабЗатрат.Колонки.Добавить("ОбъектУчета");
	ТабЗатрат.Колонки.Добавить("Субконто1");
	ТабЗатрат.Колонки.Добавить("Субконто2");
	ТабЗатрат.Колонки.Добавить("Субконто3");

	МассивКоэф = Новый Массив;

	// цикл по Объектам из ТабАмортизации
	Для Каждого СтрокаТЗ Из ТабАмортизации Цикл

		Если СтрокаТЗ.Сумма = 0 И СтрокаТЗ.СуммаНУ = 0 тогда
			//Распределять амортизацию не надо, так как распределять нечего.
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.НаправлениеАмортизации) Тогда
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для объекта %1 не указаны способы отражения расходов по амортизации';uk=""Для об'єкта %1 не вказані способи відображення витрат по амортизації"""), СтрокаТЗ.ОбъектУчета);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			Продолжить;
		КонецЕсли;

		Если СтрокаТЗ.НаправлениеАмортизации.Способы.Количество() = 0 Тогда
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для объекта %1 в способах отражения затрат по амортизации нет записей';uk=""Для об'єкта %1 у способах відображення витрат по амортизації немає записів"""), СтрокаТЗ.ОбъектУчета);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
			Продолжить;
		КонецЕсли;

		МассивКоэф.Очистить();
		Для Каждого СтрокаНапр Из СтрокаТЗ.НаправлениеАмортизации.Способы Цикл
			МассивКоэф.Добавить(СтрокаНапр.Коэффициент);
		КонецЦикла;

		МассивСумм = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СтрокаТЗ.Сумма, МассивКоэф, 2);
		МассивСуммНУ = ОбщегоНазначенияБПКлиентСервер.РаспределитьПропорционально(СтрокаТЗ.СуммаНУ, МассивКоэф, 2);
		Если МассивСумм = Неопределено И МассивСуммНУ = Неопределено Тогда
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для объекта %1 в способах отражения расходов по амортизации не проставлены коэффициенты';uk=""Для об'єкта %1 у способах відображення витрат по амортизації не проставлені коефіцієнти"""), СтрокаТЗ.ОбъектУчета);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			Продолжить;
		КонецЕсли;

		Если (МассивСумм <> Неопределено И МассивСумм.Количество() <> МассивКоэф.Количество()) И (МассивСуммНУ <> Неопределено И МассивСуммНУ.Количество() <> МассивКоэф.Количество()) Тогда
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для объекта %1 в способах отражения затрат по амортизации есть нулевые коэффициенты';uk=""Для об'єкта %1 у способах відображення витрат по амортизації є нульові коефіцієнти"""), СтрокаТЗ.ОбъектУчета);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			Продолжить;
		КонецЕсли;

		Для Каждого СтрокаНапр Из СтрокаТЗ.НаправлениеАмортизации.Способы Цикл
			
			НоваяСтрока = ТабЗатрат.Добавить();
			НоваяСтрока.СчетЗатрат               = СтрокаНапр.СчетЗатрат;
			НоваяСтрока.ОбъектУчета              = СтрокаТЗ.ОбъектУчета;
			НоваяСтрока.СчетАмортизации          = СтрокаТЗ.СчетАмортизации;
			НоваяСтрока.Субконто1                = СтрокаНапр.Субконто1;
			НоваяСтрока.Субконто2                = СтрокаНапр.Субконто2;
			НоваяСтрока.Субконто3                = СтрокаНапр.Субконто3;
			
			ТипПодразделение = Тип("СправочникСсылка.ПодразделенияОрганизаций");
			
			Если ТипЗнч(НоваяСтрока.Субконто1) = ТипПодразделение Тогда
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Субконто1) Тогда
					// получаем по местонахождению объекта
					НоваяСтрока.Субконто1 = СтрокаТЗ.Местонахождение;
				КонецЕсли;	
			ИначеЕсли ТипЗнч(НоваяСтрока.Субконто2) = ТипПодразделение Тогда	
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Субконто2) Тогда
					// получаем по местонахождению объекта
					НоваяСтрока.Субконто2 = СтрокаТЗ.Местонахождение;
				КонецЕсли;	
			ИначеЕсли ТипЗнч(НоваяСтрока.Субконто3) = ТипПодразделение Тогда	
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Субконто3) Тогда
					// получаем по местонахождению объекта
					НоваяСтрока.Субконто3 = СтрокаТЗ.Местонахождение;
				КонецЕсли;	
			КонецЕсли;	
			
			Если Улучшение Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаНапр.СтатьяЗатратНаУлучшениеОС) Тогда
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Для объекта %1 в способе отражения затрат по амортизации и улучшению не указана статья затрат на улучшение ОС';uk= 'Для об''єкта %1 у способі відображення витрат по амортизації не вказана стаття витрат на поліпшення ОЗ'"), СтрокаТЗ.ОбъектУчета);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
					Продолжить;
				КонецЕсли;	
				
				Если ТипЗнч(НоваяСтрока.Субконто1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
					НоваяСтрока.Субконто1 = СтрокаНапр.СтатьяЗатратНаУлучшениеОС;
				ИначеЕсли ТипЗнч(НоваяСтрока.Субконто2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда	
					НоваяСтрока.Субконто2 = СтрокаНапр.СтатьяЗатратНаУлучшениеОС;
				ИначеЕсли ТипЗнч(НоваяСтрока.Субконто3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда	
					НоваяСтрока.Субконто3 = СтрокаНапр.СтатьяЗатратНаУлучшениеОС;
				КонецЕсли;	
			КонецЕсли; 
			
			Если МассивСумм <> Неопределено Тогда
				НоваяСтрока.Сумма 	= МассивСумм[СтрокаНапр.НомерСтроки - 1];
			КонецЕсли;
			
			Если МассивСуммНУ <> Неопределено Тогда
				НоваяСтрока.СуммаНУ = МассивСуммНУ[СтрокаНапр.НомерСтроки - 1];
			КонецЕсли;	
			НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат 	 	= СтрокаНапр.НалоговоеНазначениеДоходовИЗатрат;
			
			НоваяСтрока.НалоговоеНазначение 					= СтрокаТЗ.НалоговоеНазначение;
			
			ХарактерЗатрат = Неопределено;
			
			НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(НоваяСтрока, НоваяСтрока.СчетЗатрат, ХарактерЗатрат,
																   	НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат, , 
																	НоваяСтрока.НалоговоеНазначение, НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат,
																	,ДатаРасчета
																	, 
																	, СтруктураШапкиДокумента.ЕстьНДС
																	);
			Если ХарактерЗатрат = "ОПЗ" Тогда
				Если ЗначениеЗаполнено(СтрокаНапр.НалоговоеНазначение) Тогда
					НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат = СтрокаНапр.НалоговоеНазначение;
				КонецЕсли;
			КонецЕсли;
																	
			СтрокаСообщенияДоп = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' (Способ отражения: ""%1"", строка № %2)';uk=' (Спосіб відображення: ""%1"", рядок № %2)'"), СтрокаТЗ.НаправлениеАмортизации, СтрокаНапр.НомерСтроки);
																	
//	 		Если НоваяСтрока.СуммаНУ <> 0 И СтруктураШапкиДокумента.ЕстьНалогНаПрибыль Тогда
			Если СтруктураШапкиДокумента.ЕстьНДС И СтрокаНапр.СчетЗатрат.УчетПоНалоговымНазначениямНДС Тогда
				Если Улучшение Тогда
					// при наличии ошибки документ не проводится
					ПроверитьСоответствиеНалоговогоНазначенияАмортизации(СтрокаТЗ.ОбъектУчета, НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат, НоваяСтрока.НалоговоеНазначение, Отказ, СтрокаСообщенияДоп);
				Иначе	
					ПроверитьСоответствиеНалоговогоНазначенияАмортизации(СтрокаТЗ.ОбъектУчета, НоваяСтрока.НалоговоеНазначениеДоходовИЗатрат, НоваяСтрока.НалоговоеНазначение, , СтрокаСообщенияДоп);
				КонецЕсли;	
	 		КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;

	ДопПараметры = Новый Структура;
	
	//формирование проводок
	
	Для каждого СтрокаЗатрат из ТабЗатрат Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаЗатрат.Сумма) И НЕ ЗначениеЗаполнено(СтрокаЗатрат.СуммаНУ) тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = ПроводкиБУ.Добавить();
		
		Проводка.Период       = ДатаРасчета;
		Проводка.НомерЖурнала = НомерЖурнала;
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма        = СтрокаЗатрат.Сумма;
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			Проводка.СуммаНУДт      = СтрокаЗатрат.СуммаНУ;
		КонецЕсли;
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 ИЛИ СтрокаЗатрат.НалоговоеНазначениеДоходовИЗатрат.ГруппаНалоговогоНазначения = Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС Тогда
			Проводка.НалоговоеНазначениеДт      = СтрокаЗатрат.НалоговоеНазначениеДоходовИЗатрат;
		КонецЕсли;	
		
		Проводка.СчетДт = СтрокаЗатрат.СчетЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, 1, СтрокаЗатрат.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, 2, СтрокаЗатрат.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, 3, СтрокаЗатрат.Субконто3);
		
		Проводка.СчетКт = СтрокаЗатрат.СчетАмортизации;
		
		Если СтруктураШапкиДокумента.ЕстьНалогНаПрибыльДо2015 Тогда
			Проводка.СуммаНУКт      = СтрокаЗатрат.СуммаНУ;
		Иначе
			Если Проводка.СчетКт.УчетСуммНУ Тогда
				Проводка.СуммаНУКт  = СтрокаЗатрат.СуммаНУ;
			КонецЕсли;
		КонецЕсли;
		Проводка.НалоговоеНазначениеКт      = СтрокаЗатрат.НалоговоеНазначение;
		
		Если Улучшение Тогда
			
			Проводка.Содержание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Модернизация ""%1""';uk='Модернізація ""%1""'",Локализация.КодЯзыкаИнформационнойБазы()), СтрокаЗатрат.ОбъектУчета);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетАмортизации, Проводка.СубконтоКт, 1, СтруктураШапкиДокумента.ОбъектСтроительства);
			
		Иначе
			
			Проводка.Содержание = ?(НЕ ЗначениеЗаполнено(ТекстПроводки), НСтр("ru='Начислена амортизация';uk='Нараховано амортизацію'",Локализация.КодЯзыкаИнформационнойБазы()), ТекстПроводки);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетАмортизации, Проводка.СубконтоКт, 1, СтрокаЗатрат.ОбъектУчета);
			
		КонецЕсли;
		
	КонецЦикла;

	// Отражение амортизации на 09 счете
	
	Если НЕ Улучшение Тогда
		
		СуммаПроводки = ТабЗатрат.Итог("Сумма");
		
		Если СуммаПроводки <> 0 Тогда
			
			Проводка = ПроводкиБУ.Добавить();
			
			Проводка.Период       = ДатаРасчета;
			Проводка.Содержание   = НСтр("ru='Накопление амортизационных отчислений';uk='Накопичення амортизаційних відрахувань'",Локализация.КодЯзыкаИнформационнойБазы());
			Проводка.НомерЖурнала = НомерЖурнала;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Сумма        = СуммаПроводки;
			
			Проводка.СчетДт = ПланыСчетов.Хозрасчетный.АмортизационныеОтчисления;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТабЗатрат;

КонецФункции // ПолучитьРаспределениеАмортизацииПоНаправлениямРегл()

Процедура ПроверитьСоответствиеНалоговогоНазначенияАмортизации(ОбъектУчета, НалоговоеНазначениеЗатрат, НалоговоеНазначениеОбъекта, Отказ = Ложь, СтрокаСообщенияДоп = "") Экспорт 
	
	НехозДеятельностьНДС = (НалоговоеНазначениеОбъекта = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность);
	НехозДеятельностьНКУ = (НалоговоеНазначениеЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НКУ_НеХозДеятельность);
	
	ОблагаемаяВидДеятельностиЗатрат = (НалоговоеНазначениеЗатрат.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.Облагаемая);
	ОблагаемаяВидДеятельностиОбъекта = (НалоговоеНазначениеОбъекта.ВидДеятельностиНДС = Перечисления.ВидыДеятельностиНДС.Облагаемая);
	
	НалоговоеНазначениеЗатратНДСное = НалоговоеНазначениеЗатрат.ГруппаНалоговогоНазначения = Перечисления.ГруппыНалоговыхНазначений.НалоговыеНазначенияАктивовИВзаиморасчетовПоНДС;
	
	Если НЕ ЗначениеЗаполнено(НалоговоеНазначениеЗатрат) Тогда
		
		СтрокаСообщения = НСтр("ru='Не заполнено налоговое назначение амортизации';uk='Не заповнене податкове призначення амортизації'") + СтрокаСообщенияДоп;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ОбъектУчета, , "Объект", Отказ);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(НалоговоеНазначениеОбъекта) Тогда
		
		СтрокаСообщения = НСтр("ru='Не заполнено налоговое назначение объекта';uk=""Не заповнене податкове призначення об'єкта""");
		
	ИначеЕсли НалоговоеНазначениеЗатрат = НалоговоеНазначениеОбъекта Тогда
		
		
	ИначеЕсли НЕ НалоговоеНазначениеЗатратНДСное Тогда 
		
		Если НехозДеятельностьНДС <> НехозДеятельностьНКУ Тогда
			
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Налоговое назначение объекта %1 <%2> не соответствует налоговому назначению амортизации (<%3>)';uk=""Податкове призначення об'єкта %1 <%2> не відповідає  податковому призначенню амортизації (<%3>)"""), ОбъектУчета, НалоговоеНазначениеОбъекта, НалоговоеНазначениеЗатрат) + СтрокаСообщенияДоп;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ОбъектУчета, , "Объект", Отказ);
			
		КонецЕсли;
		
	Иначе
		
		// НалоговоеНазначениеЗатратНДСное = Истина
		Если НалоговоеНазначениеОбъекта = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
			
			Если НалоговоеНазначениеЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность Тогда
				
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Налоговое назначение объекта %1 <%2> не соответствует налоговому назначению амортизации (<%3>)';uk=""Податкове призначення об'єкта %1 <%2> не відповідає  податковому призначенню амортизації (<%3>)"""), ОбъектУчета, НалоговоеНазначениеОбъекта, НалоговоеНазначениеЗатрат) + СтрокаСообщенияДоп;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ОбъектУчета, , "Объект", Отказ);
				
			КонецЕсли;
			
		ИначеЕсли НалоговоеНазначениеОбъекта = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая Тогда
			
			Если НалоговоеНазначениеЗатрат <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая Тогда	
				
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Налоговое назначение объекта %1 <%2> не соответствует налоговому назначению амортизации (<%3>)';uk=""Податкове призначення об'єкта %1 <%2> не відповідає  податковому призначенню амортизації (<%3>)"""), ОбъектУчета, НалоговоеНазначениеОбъекта, НалоговоеНазначениеЗатрат) + СтрокаСообщенияДоп;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ОбъектУчета, , "Объект", Отказ);
				
			КонецЕсли; 
			
		ИначеЕсли НалоговоеНазначениеЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая 
			  ИЛИ НалоговоеНазначениеЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
			  
			  // здесь НалоговоеНазначениеОбъекта - не обл. НДС (хоз или не хоз)
			  
			  СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Налоговое назначение объекта %1 <%2> не соответствует налоговому назначению амортизации (<%3>)';uk=""Податкове призначення об'єкта %1 <%2> не відповідає  податковому призначенню амортизації (<%3>)"""), ОбъектУчета, НалоговоеНазначениеОбъекта, НалоговоеНазначениеЗатрат) + СтрокаСообщенияДоп;
			  ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, ОбъектУчета, , "Объект", Отказ);
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСоответствиеНалоговогоНазначенияАмортизации

Процедура ПроверитьСоответствиеНалоговогоНазначенияОбъектов(ОбъектУчетаКт, ОбъектУчетаДт, НалоговоеНазначениеКт, НалоговоеНазначениеДт, Отказ = Ложь, Заголовок = "") Экспорт
	
	СтрокаОбъектУчетаКт = "";
	Если ТипЗнч(ОбъектУчетаКт) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
		СтрокаОбъектУчетаКт = НСтр("ru='объекта строительства';uk=""об'єкта будівництва""");
	ИначеЕсли ТипЗнч(ОбъектУчетаКт) = Тип("СправочникСсылка.Номенклатура") Тогда	
		СтрокаОбъектУчетаКт = НСтр("ru='оборудования';uk='устаткування'");
	КонецЕсли;	

	СтрокаОбъектУчетаДт = "";
	
	Если ТипЗнч(ОбъектУчетаДт) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
		СтрокаОбъектУчетаДт = НСтр("ru='объекта строительства';uk=""об'єкта будівництва""");
	ИначеЕсли ТипЗнч(ОбъектУчетаДт) = Тип("СправочникСсылка.Номенклатура") Тогда	
		СтрокаОбъектУчетаДт = НСтр("ru='оборудования';uk='устаткування'");
	Иначе	
		СтрокаОбъектУчетаДт = НСтр("ru='основного средства';uk='основного засобу'");
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(НалоговоеНазначениеКт) Тогда
		
		Возврат;
		
	ИначеЕсли НалоговоеНазначениеДт = НалоговоеНазначениеКт Тогда
		
		Возврат;
		
	ИначеЕсли НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально Тогда
			
		Если  НалоговоеНазначениеДт <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая
			И НалоговоеНазначениеДт <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность Тогда
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Налоговое назначение %1 <%2> не соответствует налоговому назначению %3 <%4>';uk='Податкове призначення %1 <%2> не відповідає  податковому призначенню %3 <%4>'"), СтрокаОбъектУчетаКт, НалоговоеНазначениеКт, СтрокаОбъектУчетаДт, НалоговоеНазначениеДт);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			Отказ = Истина;
		КонецЕсли;
		
	ИначеЕсли НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая Тогда
		
		Если  НалоговоеНазначениеДт <> Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая Тогда
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Налоговое назначение %1 <%2> не соответствует налоговому назначению %3 <%4>';uk='Податкове призначення %1 <%2> не відповідає  податковому призначенню %3 <%4>'"), СтрокаОбъектУчетаКт, НалоговоеНазначениеКт, СтрокаОбъектУчетаДт, НалоговоеНазначениеДт);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			Отказ = Истина;
		КонецЕсли;
		
	ИначеЕсли     (НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Пропорционально)
			  ИЛИ (НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_Облагаемая)
				Тогда
		// здесь НалоговоеНазначениеКт - не обл. НДС (хоз или не хоз)
		
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Налоговое назначение %1 <%2> не соответствует налоговому назначению %3 <%4>';uk='Податкове призначення %1 <%2> не відповідає  податковому призначенню %3 <%4>'"), СтрокаОбъектУчетаКт, НалоговоеНазначениеКт, СтрокаОбъектУчетаДт, НалоговоеНазначениеДт);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		Отказ = Истина;
	ИначеЕсли  (НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность И 
				НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность)
			  ИЛИ  (НалоговоеНазначениеДт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность И 
					НалоговоеНазначениеКт = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность) Тогда
				
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Налоговое назначение %1 <%2> не соответствует налоговому назначению %3 <%4>';uk='Податкове призначення %1 <%2> не відповідає  податковому призначенню %3 <%4>'"), СтрокаОбъектУчетаКт, НалоговоеНазначениеКт, СтрокаОбъектУчетаДт, НалоговоеНазначениеДт);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСоответствиеНалоговогоНазначенияОбъектов

Процедура ПроверитьСоответствиеНалоговогоНазначенияАмортизацииОбъекта(ОбъектУчета, СпособОтраженияРасходовПоАмортизации, НалоговоеНазначение, Отказ = Ложь, Заголовок = "", Дата = '00010101', ЕстьУчетНДС = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СпособОтраженияРасходовПоАмортизации) Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого СтрокаНапр Из СпособОтраженияРасходовПоАмортизации.Способы Цикл
		
		СтрокаСообщенияДоп = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru=' (Способ отражения: ""%1"", строка № %2)';uk=' (Спосіб відображення: ""%1"", рядок № %2)'"), СпособОтраженияРасходовПоАмортизации, СтрокаНапр.НомерСтроки);
		
		НалоговоеНазначениеДоходовИЗатрат = СтрокаНапр.НалоговоеНазначениеДоходовИЗатрат;
		
		ХарактерЗатрат = Неопределено;
		НалоговыйУчет.ОпределениеАналитикиНалоговогоУчетаВПроводкахДляЗатрат(СтрокаНапр, СтрокаНапр.СчетЗатрат, ХарактерЗатрат,
															   	НалоговоеНазначениеДоходовИЗатрат, , 
																НалоговоеНазначение, СтрокаНапр.НалоговоеНазначениеДоходовИЗатрат,
																,Дата
																, 
																, ЕстьУчетНДС
																);
																
		Если ХарактерЗатрат = "ОПЗ" Тогда
			Если ЗначениеЗаполнено(СтрокаНапр.НалоговоеНазначение) Тогда
				// при неуказанном НН по НДС по 91 счету НН определяется исходя из НН 
				НалоговоеНазначениеДоходовИЗатрат = СтрокаНапр.НалоговоеНазначение;
			Иначе	
				// при неуказанном НН по НДС по 91 счету НН определяется исходя из НН 
				НалоговоеНазначениеДоходовИЗатрат = НалоговоеНазначение;
			КонецЕсли;
		КонецЕсли;
																
		Если НЕ ЗначениеЗаполнено(НалоговоеНазначениеДоходовИЗатрат) Тогда
			НалоговоеНазначениеДоходовИЗатрат = Справочники.НалоговыеНазначенияАктивовИЗатрат.ПустаяСсылка();
		КонецЕсли;	
		
		ПроверитьСоответствиеНалоговогоНазначенияАмортизации(ОбъектУчета, НалоговоеНазначениеДоходовИЗатрат, НалоговоеНазначение, Отказ, СтрокаСообщенияДоп);
		
	КонецЦикла;	
		
КонецПроцедуры // ПроверитьСоответствиеНалоговогоНазначенияОбъектов


///////////////////////////////////////////////////////////////////////////////
// ОПРЕДЕЛЕНИЕ СОСТОЯНИЯ ОС


// Функция расчитывает стоимость объекта строительства по разным видам учета
// Возвращает структуру со значениями стоимостей по видам учета, поля:
// - СтоимостьБУ
// - СтоимостьНУ
//
Функция РасчитатьСтоимостьОбъектаСтроительства(СчетУчетаБУВнеоборотногоАктива,
	                                           ОбъектСтроительства, Организация, Период = Неопределено) Экспорт

	СтруктураСтоимость = Новый Структура;
	СтруктураСтоимость.Вставить("СтоимостьБУ", 0);
	СтруктураСтоимость.Вставить("СтоимостьНУ", 0);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период"             , Период);
	Запрос.УстановитьПараметр("Организация"        , Организация);
	Запрос.УстановитьПараметр("СчетУчетаБУ"        , СчетУчетаБУВнеоборотногоАктива);
	Запрос.УстановитьПараметр("ОбъектСтроительства", ОбъектСтроительства);
	Запрос.УстановитьПараметр("СубконтоОС"         , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СтоимостьБУ,
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт    КАК СтоимостьНУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, 
	|	                   Счет = &СчетУчетаБУ, &СубконтоОС,
	|	                   Организация = &Организация
	|	                   И Субконто1 = &ОбъектСтроительства) КАК ХозрасчетныйОстатки";
	ТЗ = Запрос.Выполнить().Выгрузить();

	Если ТЗ.Количество()>0 Тогда

		СтруктураСтоимость.Вставить("СтоимостьБУ", ТЗ.Итог("СтоимостьБУ"));
		СтруктураСтоимость.Вставить("СтоимостьНУ", ТЗ.Итог("СтоимостьНУ"));

	КонецЕсли;

	Возврат СтруктураСтоимость;

КонецФункции


// Возвращает из справочника событий ОС первую найденную запись с заданным видом события,
// иначе возвращает пустую ссылку на справочник
//
// Параметры
//  ВидСобытия (Перечисление ВидыСобытийОС): вид события
//
// Возвращаемое значение:
//   элемент справочника событий ОС
//
Функция ПолучитьСобытиеПоОСИзСправочника(ВидСобытия) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидСобытияОС", ВидСобытия);
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка,
	|	ВидСобытияОС
	|ИЗ
	|	Справочник.СобытияОС КАК СобытияОС
	|
	|ГДЕ
	|	ВидСобытияОС = &ВидСобытияОС";
	ТаблицаСобытий = Запрос.Выполнить().Выгрузить();

	Если ТаблицаСобытий.Количество()>0 Тогда
		Возврат ТаблицаСобытий[0].Ссылка;

	Иначе
		Возврат Справочники.СобытияОС.ПустаяСсылка();

	КонецЕсли;

КонецФункции // ПолучитьСобытиеОСИзСправочника()

// Поцедура проверяет дублирование состояний ОС. 
// Если определенное состояние было установлено ранее, устанавливать его второй раз нельзя (в пределах одной организации)
Процедура ПроверкаДублированияЗаписейСостоянийОС(Организация, ТаблицаЗаписей,Отказ,Заголовок) Экспорт

	Если ТаблицаЗаписей.Количество() =0 тогда
		Возврат;
	КонецЕсли;
	
	НаборСостояний = Новый Массив();
	ОС_ПоСостояниям  = Новый Массив();
	Для каждого Состояние из Перечисления.СостоянияОС Цикл
		НаборСостояний.Добавить(Состояние);
		ОС_ПоСостояниям.Добавить(Новый массив());
	КонецЦикла;
	
	Для Каждого ТекЗапись из ТаблицаЗаписей Цикл
		
		Для А = 1 по НаборСостояний.количество() Цикл
			Если ТекЗапись.Состояние = НаборСостояний[А-1] тогда	
				ОС_ПоСостояниям[А-1].Добавить(ТекЗапись.ОсновноеСредство);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТекущийРегистратор = ТаблицаЗаписей.Отбор.Регистратор.Значение;
	
	Для А = 1 по НаборСостояний.количество() Цикл
		Если ОС_ПоСостояниям[А-1].Количество()>0 тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	СостоянияОСОрганизаций.ОсновноеСредство,
			|	СостоянияОСОрганизаций.ОсновноеСредство.Код КАК КодОС,
			|	СостоянияОСОрганизаций.ДатаСостояния,
			|	СостоянияОСОрганизаций.Регистратор
			|ИЗ
			|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
			|
			|ГДЕ
			|	СостоянияОСОрганизаций.Организация = &Организация И
			|	СостоянияОСОрганизаций.Состояние = &Состояние И
			|	(НЕ СостоянияОСОрганизаций.Регистратор = &ТекущийРегистратор) И
			|	СостоянияОСОрганизаций.ОсновноеСредство В(&ОсновныеСредства)";

			Запрос.УстановитьПараметр("Организация",Организация );
			Запрос.УстановитьПараметр("Состояние",	НаборСостояний[А-1]);
			Запрос.УстановитьПараметр("ОсновныеСредства",ОС_ПоСостояниям[А-1]);
			Запрос.УстановитьПараметр("ТекущийРегистратор",ТекущийРегистратор);

			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();

			ШаблонСообщения = НСтр("ru='Для основного средства <%1 (%2)> в организации <%3> уже зафиксировано состояние <%4>
|документом <%5>. Дата состояния: %6';uk='Для основного засобу <%1 (%2)> в організації <%3> вже зафіксований стан <%4>
|документом <%5>. Дата стану: %6'");
			
			
			Пока Выборка.Следующий() Цикл
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.ОсновноеСредство,
					Выборка.КодОС, Организация, НаборСостояний[А-1], Выборка.Регистратор, Формат(Выборка.ДатаСостояния, "ДФ=dd.MM.yyyy"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);

			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
Конецпроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОПРЕДЕЛЕНИЕ СОСТОЯНИЯ НМА

// Поцедура проверяет дублирование состояний НМА. 
// Если определенное состояние было установлено ранее, устанавливать его второй раз нельзя (в пределах одной организации)
Процедура ПроверкаДублированияЗаписейСостоянийНМА(Организация, Период, ТаблицаЗаписей,Отказ,Заголовок) Экспорт
	
	Если ТаблицаЗаписей.Количество() =0 тогда
		Возврат;
	КонецЕсли;
	
	НаборСостояний = Новый Массив();
	НМА_ПоСостояниям  = Новый Массив();
	Для каждого Состояние из Перечисления.ВидыСостоянийНМА Цикл
		НаборСостояний.Добавить(Состояние);
		НМА_ПоСостояниям.Добавить(Новый массив());
	КонецЦикла;
	
	Для Каждого ТекЗапись из ТаблицаЗаписей Цикл
		
		Для А = 1 по НаборСостояний.количество() Цикл
			Если ТекЗапись.Состояние = НаборСостояний[А-1] тогда	
				НМА_ПоСостояниям[А-1].Добавить(ТекЗапись.НематериальныйАктив);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТекущийРегистратор = ТаблицаЗаписей.Отбор.Регистратор.Значение;
	
	Для А = 1 по НаборСостояний.Количество() Цикл
		Если НМА_ПоСостояниям[А-1].Количество()>0 тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив,
			|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив.Код КАК КодНМА,
			|	СостоянияНМАОрганизацийСрезПоследних.Период,
			|	СостоянияНМАОрганизацийСрезПоследних.Регистратор
			|ИЗ
			|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
			|		&Период,
			|		Организация = &Организация
			|		    И НематериальныйАктив В (&НематериальныеАктивы)
			|		    И Состояние = &Состояние
			|		    И (НЕ Регистратор = &ТекущийРегистратор)) КАК СостоянияНМАОрганизацийСрезПоследних";

			Запрос.УстановитьПараметр("Организация",Организация );
			Запрос.УстановитьПараметр("Состояние",	НаборСостояний[А-1]);
			Запрос.УстановитьПараметр("НематериальныеАктивы",НМА_ПоСостояниям[А-1]);
			Запрос.УстановитьПараметр("ТекущийРегистратор",ТекущийРегистратор);
			Запрос.УстановитьПараметр("Период", Новый Граница(Новый МоментВремени(Период, ТекущийРегистратор), ВидГраницы.Исключая));

			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();

			ШаблонСообщения = НСтр("ru='Для нематериального актива <%1 (%2)> в организации <%3> уже зафиксировано состояние <%4>
|документом <%5>. Дата состояния: %6';uk='Для нематеріального активу <%1 (%2)> в організації <%3> вже зафіксований стан <%4>
|документом <%5>. Дата стану: %6'");
			
			Пока Выборка.Следующий() Цикл
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Выборка.НематериальныйАктив,
					Выборка.КодНМА, Организация, НаборСостояний[А-1], Выборка.Регистратор, Формат(Выборка.Период, "ДФ=dd.MM.yyyy"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ОбработатьПодборНематериальныхАктивов(Знач КоллекцияНМА, Знач ВыбранноеЗначение) Экспорт
	
	ТаблицаНМА = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресВХранилище);
	
	ИсходныеДанные = КоллекцияНМА.Выгрузить();
	ИсходныеДанные.Индексы.Добавить("НематериальныйАктив");
	
	ДобавленныеСтроки = Новый Массив;
	
	КоллекцияНМА.Очистить();
	Для каждого СтрокаТаблицы Из ТаблицаНМА Цикл
		ЭлементКоллекции = КоллекцияНМА.Добавить();
		
		СтрокаИсходныхДанных = ИсходныеДанные.Найти(СтрокаТаблицы.НематериальныйАктив, "НематериальныйАктив");
		Если СтрокаИсходныхДанных <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЭлементКоллекции, СтрокаИсходныхДанных);
		Иначе
			ДобавленныеСтроки.Добавить(ЭлементКоллекции);
		КонецЕсли;
			
		ЗаполнитьЗначенияСвойств(ЭлементКоллекции, СтрокаТаблицы);
	КонецЦикла;
	
	Возврат ДобавленныеСтроки;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЩЕГО НАЗНАЧЕНИЯ



///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЩЕГО НАЗНАЧЕНИЯ ОС

// Процедура дополняет табличную часть колонками
// СчетУчетаБУ, СчетНачисленияАмортизацииБУ, СчетУчетаНУ, СтатьяАмортизации,
// НалоговаяГруппаОС, Пообъектно, УчитываетсяКакЗапасНУ,
// НалоговоеНазначение_ОС для основных средств. 
//
// Параметры
//  ДатаДока                     – Тип: Дата, МоментВремени, Граница – Дата, на которую получать результаты
//                 
//  ТаблицаПоОС                  – Тип: ТаблицаЗначений – Таблица, в которую необходимо добавить колонки
//                 
//  СтруктураШапкиДокумента      – Тип: Структура - параметры документа
//                 
//  Отказ                        – Тип: Булево – признак отказа
//                 
//  Заголовок                    – Тип: Строка – заголовок вызывающего документа,
//                                               для сообщения об ошибке
//                 
//  ИмяКолонкиОсновногоСредства  – Тип: Строка – Наименование колонки, в которой содержаться основные средства
//                 
//
Процедура ДополнитьТабличнуюЧастьСведениямиОбОСБухНалогРегл(ДатаДока, ТаблицаПоОС,
	                                                        СтруктураШапкиДокумента, Отказ, Заголовок,
														    ИмяКолонкиОсновногоСредства = "ОсновноеСредство",
															ПолучатьСпособНачисленияАмортизации = Ложь) Экспорт
	
	ТаблицаПоОС.Колонки.Добавить("СчетУчетаБУ"                , Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаПоОС.Колонки.Добавить("СчетНачисленияАмортизацииБУ", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаПоОС.Колонки.Добавить("НаправлениеБУ"              , Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаПоОС.Колонки.Добавить("СчетУчетаДооценокОС"          , Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	Если ПолучатьСпособНачисленияАмортизации Тогда
		
		ТаблицаПоОС.Колонки.Добавить("СпособНачисленияАмортизацииБУ", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыНачисленияАмортизацииОС"));
		
	КонецЕсли;
	
	ТекОрганизация          = СтруктураШапкиДокумента.Организация;
	ЕстьНалогНаПрибыль      = СтруктураШапкиДокумента.ЕстьНалогНаПрибыль;
	ЕстьНДС                 = СтруктураШапкиДокумента.ЕстьНДС;
	ЕстьНалоговыйУчет		= ЕстьНалогНаПрибыль ИЛИ ЕстьНДС;
	ВидДеятельностиНепроизводственная = Справочники.ВидыНалоговойДеятельности.НеОблагаемая;
	
		
		ТаблицаПоОС.Колонки.Добавить("НалоговоеНазначение_ОС",      Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
		ТаблицаПоОС.Колонки.Добавить("ВидНалоговойДеятельности_ОС", Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговойДеятельности"));
		ТаблицаПоОС.Колонки.Добавить("ВидДеятельностиНДС_ОС",       Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДеятельностиНДС"));
		ТаблицаПоОС.Колонки.Добавить("НалоговаяГруппаОС",           Новый ОписаниеТипов("СправочникСсылка.НалоговыеГруппыОсновныхСредств"));
		ТаблицаПоОС.Колонки.Добавить("НеПроизводственноеОСНУ",      Новый ОписаниеТипов("Булево"));
		
	
	СписокОС = ТаблицаПоОС.ВыгрузитьКолонку(ИмяКолонкиОсновногоСредства);
	
	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("ТекОрганизация", ТекОрганизация);
	Запрос.УстановитьПараметр("Период",        Новый Граница(ДатаДока, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("СписокОС",       СписокОС);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетаБухгалтерскогоУчетаОС.ОсновноеСредство                         КАК ОС_БУ,
	|	СчетаБухгалтерскогоУчетаОС.СчетУчета                                КАК СчетУчетаБУ,
	|	СчетаБухгалтерскогоУчетаОС.СчетУчетаДооценокОС                        КАК СчетУчетаДооценокОС,
	|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации                КАК СчетНачисленияАмортизацииБУ," + ?(ПолучатьСпособНачисленияАмортизации, "
	|	ПервоначальныеСведенияОС_БУ.СпособНачисленияАмортизации             КАК СпособНачисленияАмортизацииБУ,", "") + "
	|	СпособыОтраженияБУ.СпособыОтраженияРасходовПоАмортизации            КАК НаправлениеБУ" + ?(ЕстьНалогНаПрибыль, ",
	|	ПервоначальныеСведенияОС_НУ.ОсновноеСредство                        КАК ОС_НУ,
	|	ПервоначальныеСведенияОС_НУ.НалоговаяГруппаОС                       КАК НалоговаяГруппаОС", "") + ",
	|	НалоговыеНазначенияОС.ОсновноеСредство                              КАК ОС_НУ1,
	|	НалоговыеНазначенияОС.НалоговоеНазначение                           КАК НалоговоеНазначение_ОС,
	|	НалоговыеНазначенияОС.НалоговоеНазначение.ВидНалоговойДеятельности  КАК ВидНалоговойДеятельности_ОС,
	|	НалоговыеНазначенияОС.НалоговоеНазначение.ВидДеятельностиНДС        КАК ВидДеятельностиНДС_ОС
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|		            &Период,
	|		            Организация = &ТекОрганизация
	|		            И ОсновноеСредство В (&СписокОС)) КАК СчетаБухгалтерскогоУчетаОС" + ?(ПолучатьСпособНачисленияАмортизации, "
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|		                    &Период,
	|		                    Организация = &ТекОрганизация
	|		                    И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОС_БУ
	|		ПО СчетаБухгалтерскогоУчетаОС.ОсновноеСредство = ПервоначальныеСведенияОС_БУ.ОсновноеСредство", "") + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|		                    &Период,
	|		                    Организация = &ТекОрганизация
	|		                    И ОсновноеСредство В (&СписокОС)) КАК СпособыОтраженияБУ
	|		ПО СчетаБухгалтерскогоУчетаОС.ОсновноеСредство = СпособыОтраженияБУ.ОсновноеСредство" + ?(ЕстьНалогНаПрибыль, ",
	|		ПОЛНОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
	|		                    &Период,
	|		                    Организация = &ТекОрганизация
	|		                    И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОС_НУ                  
	|		ПО СчетаБухгалтерскогоУчетаОС.ОсновноеСредство = ПервоначальныеСведенияОС_НУ.ОсновноеСредство", "") + "
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.НалоговыеНазначенияОС.СрезПоследних(
	|		                    &Период,
	|		                    Организация = &ТекОрганизация
	|		                    И ОсновноеСредство В (&СписокОС)) КАК НалоговыеНазначенияОС
	|		ПО СчетаБухгалтерскогоУчетаОС.ОсновноеСредство = НалоговыеНазначенияОС.ОсновноеСредство";
	
	ТаблицаСведенийОС  = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл
		
		ТекОС =  СтрокаТЧ[ИмяКолонкиОсновногоСредства];
		
		Если ЕстьНалогНаПрибыль Тогда
			
			Колонки = "ОС_БУ, ОС_НУ, ОС_НУ1";
			
		ИначеЕсли ЕстьНДС Тогда
			
			Колонки = "ОС_БУ, ОС_НУ1";
			
		Иначе
			
			Колонки = "ОС_БУ";
			
		КонецЕсли;
		
		СтрокаСведений = ТаблицаСведенийОС.Найти(ТекОс, Колонки);	
		
		Если СтрокаСведений = Неопределено Тогда
			
			Если ЕстьНалоговыйУчет Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Строка %1.
|	Регл. учет: По основному средству ""%2"" и организации ""%3"" нет информации
|	в регистрах сведений:
|	""Счета бухгалтерского учета основных средств""
|	""Первоначальные сведения об основных средствах (налоговый учет)""
|	""Налоговые назначения ОС""
|	Возможно, оно не принято к учету.';uk='Рядок %1.
|	Регл. облік: По основному засобу ""%2"" і організації ""%3"" немає інформації
|	у регістрах відомостей:
|	""Рахунки бухгалтерського обліку основних засобів""
|	""Початкові відомості про основні засоби (податковий облік)""
|	""Податкові призначення ОЗ""
|	Можливо, воно не прийнято до обліку.'"), ТаблицаПоОС.Индекс(СтрокаТЧ) + 1, ТекОс, ТекОрганизация);	
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Строка %1.
|	Регл. учет: По основному средству ""%2"" и организации ""%3"" нет информации
|	в регистрах сведений:
|	""Счета бухгалтерского учета основных средств""
|	Возможно, оно не принято к учету.';uk='Рядок %1.
|	Регл. облік: По основному засобу ""%2"" і організації ""%3"" немає інформації
|	у регістрах відомостей:
|	""Рахунки бухгалтерського обліку основних засобів""
|	Можливо, воно не прийнято до обліку.'"), ТаблицаПоОС.Индекс(СтрокаТЧ) + 1, ТекОс, ТекОрганизация);	
			КонецЕсли;	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			Продолжить
			
		КонецЕсли;
		
		СчетУчетаБУ = СтрокаСведений.СчетУчетаБУ;
		
		Если НЕ ЗначениеЗаполнено(СчетУчетаБУ) Тогда
			
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Строка %1.
|	Бух. учет: По основному средству ""%2"" и организации ""%3"" не заполнен счет учета 
|	в регистре сведений ""Счета бухгалтерского учета основных средств""';uk='Рядок %1.
|	Бух. облік: По основному засобу ""%2"" і організації ""%3"" не заповнений рахунок 
|	у регістрі відомостей ""Рахунки бухгалтерського обліку основних засобів""'"), ТаблицаПоОС.Индекс(СтрокаТЧ) + 1, ТекОс, ТекОрганизация);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
			
		Иначе
			
			СтрокаТЧ.СчетУчетаБУ = СчетУчетаБУ;
			
		КонецЕсли;
		
		СчетНачисленияАмортизацииБУ = СтрокаСведений.СчетНачисленияАмортизацииБУ;
		
		Если НЕ ЗначениеЗаполнено(СчетНачисленияАмортизацииБУ) Тогда
			
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Строка %1.
|	Бух. учет: По основному средству ""%2"" и организации ""%3"" не заполнен счет начисления амортизации
|	в регистре сведений ""Счета бухгалтерского учета основных средств""';uk='Рядок %1.
|	Бух. облік: По основному засобу ""%2"" і організації ""%3"" не заповнений рахунок нарахування амортизації
|	у регістрі відомостей ""Рахунки бухгалтерського обліку основних засобів""'"), ТаблицаПоОС.Индекс(СтрокаТЧ)+ 1, ТекОс, ТекОрганизация);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
			
		Иначе
			
			СтрокаТЧ.СчетНачисленияАмортизацииБУ = СчетНачисленияАмортизацииБУ;
			
		КонецЕсли;
		
		СтрокаТЧ.СчетУчетаДооценокОС = СтрокаСведений.СчетУчетаДооценокОС;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаДооценокОС) Тогда 
			СтрокаТЧ.СчетУчетаДооценокОС = ПланыСчетов.Хозрасчетный.ДооценкаОсновныхСредств; // По умолчанию 423.1
		КонецЕсли;	
		
		НаправлениеБУ = СтрокаСведений.НаправлениеБУ;
		
		// Направление будет проверяться при распределении амортизации,
		// поэтому сообщения не выдаются
		Если ЗначениеЗаполнено(НаправлениеБУ) Тогда
			
			СтрокаТЧ.НаправлениеБУ = НаправлениеБУ;
			
		КонецЕсли;
		
		Если ПолучатьСпособНачисленияАмортизации Тогда
			
			СтрокаТЧ.СпособНачисленияАмортизацииБУ = СтрокаСведений.СпособНачисленияАмортизацииБУ
			
		КонецЕсли;
		
		Если ЕстьНалогНаПрибыль ИЛИ ЕстьНДС Тогда
			
			НалоговоеНазначение_ОС      = СтрокаСведений.НалоговоеНазначение_ОС;
 			ВидНалоговойДеятельности_ОС = СтрокаСведений.ВидНалоговойДеятельности_ОС;
			Непроизводственное          = Ложь;
			
			Если НЕ ЗначениеЗаполнено(НалоговоеНазначение_ОС) Тогда
				
				//НалоговоеНазначение_ОС должен быть заполнен обязательно
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Строка %1.
|	Налог. учет: По Основному средству ""%2"" и организации ""%3"" не заполнено налоговое назначение
|	в регистре сведений ""Налоговые назначения ОС""';uk='Рядок %1.
|	Податк. облік: По Основному засобу ""%2"" і організації ""%3"" не заповнене податкове призначення
|	у регістрі відомостей ""Податкові призначення ОЗ""'"), ТаблицаПоОС.Индекс(СтрокаТЧ) + 1, ТекОс, ТекОрганизация);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
				
			Иначе
				
				СтрокаТЧ.НалоговоеНазначение_ОС      = НалоговоеНазначение_ОС;
				СтрокаТЧ.ВидНалоговойДеятельности_ОС = ВидНалоговойДеятельности_ОС;
				СтрокаТЧ.ВидДеятельностиНДС_ОС       = СтрокаСведений.ВидДеятельностиНДС_ОС;
				Непроизводственное                   = (ВидНалоговойДеятельности_ОС 
				                                        = ВидДеятельностиНепроизводственная);
				СтрокаТЧ.НеПроизводственноеОСНУ      = Непроизводственное;
				
			КонецЕсли;
			
			Если ЕстьНалогНаПрибыль Тогда
				
				НалоговаяГруппаОС = СтрокаСведений.НалоговаяГруппаОС;
					
				Если НЕ ЗначениеЗаполнено(НалоговаяГруппаОС) Тогда
						
						
				Иначе
						
					СтрокаТЧ.НалоговаяГруппаОС = НалоговаяГруппаОС;
						
				КонецЕсли;
				
				
				
			КонецЕсли;
			
		Иначе
			//СтрокаТЧ.НалоговоеНазначение_ОС = СтрокаСведений.НалоговоеНазначение_ОС;
		    НепроизводственныйОС = (СтрокаСведений.НалоговоеНазначение_ОС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность);
			Если НепроизводственныйОС Тогда
				СтрокаТЧ.НалоговоеНазначение_ОС = СтрокаСведений.НалоговоеНазначение_ОС;
			Иначе	
				СтрокаТЧ.НалоговоеНазначение_ОС = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
			КонецЕсли;	
		
		КонецЕсли;
			
		
	КонецЦикла;

КонецПроцедуры // ДополнитьТабличнуюЧастьСведениямиОбОСБухНалогРегл()

// Заполняет табличную часть основных средств следующими значениями:
// (Имя колонки основных средств должно быть "ОсновноеСредство")
//
// 	Управленческий учет:
//	 	Стоимость;
//	 	Амортизация;
//	 	АмортизацияЗаМесяц;
//
// 	Бухгалтерский учет:
//	 	СтоимостьБУ;
//	 	АмортизацияБУ;
//	 	АмортизацияЗаМесяцБУ;
//
// 	Налоговый учет:
//	 	СтоимостьНУ;
//	 	АмортизацияЗаМесяцНУ;
//
// Параметры
//
//  ДатаРасчета                   - Дата - Дата расчета амортизации
//
//  ОС                            – Табличная часть – табличная часть документа для заполнения
//                 
//  ТекОрганизация                – Тип: СправочникСсылка.Организации – Организация
//                 
//  ОтражатьВУправленческомУчете  – Булево 
//                 
//  ОтражатьВБухгалтерскомУчете   – Булево 
//                 
//  ОтражатьВНалоговомУчете       – Булево 
//                 
//  ДатаИтогов                    – Дата, МоментВремени, Граница - дата получения итогов 
//                 
Процедура ЗаполнитьТабличнуюЧастьОсновныхСредств(ДатаРасчета, ОС, ТекОрганизация, 
	                                             ОтражатьВНалоговомУчете, ДатаИтогов = Неопределено) Экспорт
												 
	Если НЕ ЗначениеЗаполнено(ТекОрганизация) Тогда

		Сообщить(НСтр("ru='Для заполнения табличной части необходимо указать организацию';uk='Для заповнення табличної частини необхідно вказати організацію'"));
		Возврат
		
	КонецЕсли;
	
	Если ДатаИтогов = Неопределено Тогда
		ДатаИтогов = ДатаРасчета;
	КонецЕсли;	
	
	// Для компактной записи вводятся 
	// новые переменные
	НУ = ОтражатьВНалоговомУчете;
												 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ТекОрганизация);
	Запрос.УстановитьПараметр("ДатаИтогов" , ДатаИтогов);
	
	ТаблицаОС = ОС.Выгрузить();
	СписокОС = ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос.УстановитьПараметр("СписокОС"  , СписокОС);
	Запрос.УстановитьПараметр("СубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПредварительныйЗапрос.ОС КАК ОС,
	|	СУММА(ПредварительныйЗапрос.СтоимостьБУ) КАК СтоимостьБУ,
	|	СУММА(ПредварительныйЗапрос.АмортизацияБУ) КАК АмортизацияБУ,
	|	СУММА(ПредварительныйЗапрос.СтоимостьНУ) КАК СтоимостьНУ,
	|	СУММА(ПредварительныйЗапрос.АмортизацияНУ) КАК АмортизацияНУ,
	|	СУММА(ПредварительныйЗапрос.СуммаПереоценки) КАК СуммаПереоценки
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтоимостьБУ.Субконто1 КАК ОС,
	|		СтоимостьБУ.СуммаОстатокДт КАК СтоимостьБУ,
	|		0 КАК АмортизацияБУ,
	|		СтоимостьБУ.СуммаНУОстатокДт КАК СтоимостьНУ,
	|		0 КАК АмортизацияНУ,
	|		ПереоценкаОС.СуммаПереоценкиОстаток КАК СуммаПереоценки
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&ДатаИтогов,
	|				Счет В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						СчетаБухгалтерскогоУчета.СчетУчета
	|					ИЗ
	|						РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&ДатаИтогов, Организация = &Организация
	|							И ОсновноеСредство В (&СписокОС)) КАК СчетаБухгалтерскогоУчета),
	|				&СубконтоОС,
	|				Организация = &Организация
	|					И Субконто1 В (&СписокОС)) КАК СтоимостьБУ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПереоценкаОСБухгалтерскийУчет.Остатки(
	|					&ДатаИтогов,
	|					Организация = &Организация
	|						И ОсновноеСредство В (&СписокОС)) КАК ПереоценкаОС
	|			ПО СтоимостьБУ.Субконто1 = ПереоценкаОС.ОсновноеСредство
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АмортизацияБУ.Субконто1,
	|		0,
	|		АмортизацияБУ.СуммаОстатокКт,
	|		0,
	|		АмортизацияБУ.СуммаНУОстатокКт,
	|		0
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&ДатаИтогов,
	|				Счет В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации
	|					ИЗ
	|						РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&ДатаИтогов, Организация = &Организация
	|							И ОсновноеСредство В (&СписокОС)) КАК СчетаБухгалтерскогоУчета),
	|				&СубконтоОС,
	|				Организация = &Организация
	|					И Субконто1 В (&СписокОС)) КАК АмортизацияБУ) КАК ПредварительныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредварительныйЗапрос.ОС";
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() > 0 Тогда
			
		ТаблицаАмортизацииБух = РасчетАмортизацииРегл(ДатаРасчета, ТекОрганизация, СписокОС);
		
		ЕстьРеквизитПревышениеСуммДооценокНадСуммамиУценокБУ = (ТаблицаОС.Колонки.Найти("ПревышениеСуммДооценокНадСуммамиУценокБУ") <> Неопределено);
		
		Для Каждого Строка Из ОС Цикл
			
			СтрокаТЗ = ТЗ.Найти(Строка.ОсновноеСредство, "ОС"); 
			
			Если СтрокаТЗ = Неопределено Тогда
				
				Строка.СтоимостьБУ          = 0;
				Строка.АмортизацияБУ        = 0;
				Строка.АмортизацияЗаМесяцБУ = 0;
				
				Строка.СтоимостьНУ          = 0;
				Строка.АмортизацияНУ        = 0;
				Строка.АмортизацияЗаМесяцНУ = 0;
				
			Иначе
				// В соответствующие поля строки запишем данные из запроса
				
				Строка.СтоимостьБУ          = СтрокаТЗ.СтоимостьБУ;
				Строка.АмортизацияБУ        = СтрокаТЗ.АмортизацияБУ;
				СтрокаТаблицаАмортизацииБух = ТаблицаАмортизацииБух.Найти(Строка.ОсновноеСредство, "ОбъектУчета");
				
				Строка.СтоимостьНУ          = СтрокаТЗ.СтоимостьНУ;
				Строка.АмортизацияНУ        = СтрокаТЗ.АмортизацияНУ;
				
				Если ЕстьРеквизитПревышениеСуммДооценокНадСуммамиУценокБУ Тогда
					Строка.ПревышениеСуммДооценокНадСуммамиУценокБУ 		= СтрокаТЗ.СуммаПереоценки;
				КонецЕсли;	
				
				Если СтрокаТаблицаАмортизацииБух = Неопределено Тогда
					
					Строка.АмортизацияЗаМесяцБУ = 0;
					Строка.АмортизацияЗаМесяцНУ = 0;
					
				Иначе
					
					Если СтрокаТаблицаАмортизацииБух.Метод_50_50 Тогда
						
						Строка.АмортизацияЗаМесяцБУ = СтрокаТЗ.СтоимостьБУ - СтрокаТЗ.АмортизацияБУ;
						Строка.АмортизацияЗаМесяцНУ = СтрокаТЗ.СтоимостьНУ - СтрокаТЗ.АмортизацияНУ;
						
					Иначе
						
						Строка.АмортизацияЗаМесяцБУ = СтрокаТаблицаАмортизацииБух.Амортизация;
						Строка.АмортизацияЗаМесяцНУ = СтрокаТаблицаАмортизацииБух.АмортизацияНУ;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Сообщить(НСтр("ru='Данные для заполнения отсутствуют.';uk='Дані для заповнення відсутні.'"));
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьОсновныхСредств()

// Проверяет табличную часть на наличие в ней списанных или не введенных 
// в эксплуатацию Основных средств
// (Имя колонки основных средств должно быть "ОсновноеСредство")
//
// Параметры
//  ДатаДока                     - Тип: Дата - дата, на которую проверять
//
//  ТекОрганизация               – Тип: СправочникСсылка.Организации – Организация
//                 
//  ТаблицаПоОС                  – Тип: ТаблицаЗначений – ТаблицаЗначений
//                                                        Основные средства, которой нужно проверять
//
//  Отказ                        – Тип: Булево – признак отказа
//                 
//  Заголовок                    – Тип: Строка – заголовок вызывающего документа,
//                                               для сообщения об ошибке
//
Процедура ПроверитьНаСписанность(ДатаДока, ТекОрганизация, ТаблицаПоОС, Отказ, Заголовок) Экспорт
								 
	Если Отказ Тогда
									 
		Возврат
		
	КонецЕсли;								 
	
	СписокОС = ТаблицаПоОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("НаДату"  , ДатаДока.Дата);
	Запрос.УстановитьПараметр("ТекущийРегистратор", ДатаДока.Ссылка);
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	Запрос.УстановитьПараметр("Списано" , Перечисления.СостоянияОС.СнятоСУчета);
	
	МассивСостояний = Новый Массив(2);
	МассивСостояний[0] = Перечисления.СостоянияОС.ВведеноВЭксплуатацию;
	МассивСостояний[1] = Перечисления.СостоянияОС.СнятоСУчета;
	Запрос.УстановитьПараметр("СписокСостояний", МассивСостояний);
	
	Запрос.УстановитьПараметр("Организация", ТекОрганизация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияОС.ОсновноеСредство КАК ОС_БУ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СостоянияОС.Состояние = &Списано
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Списано
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОС
	|ГДЕ
	|	СостоянияОС.Организация = &Организация
	|	И СостоянияОС.ОсновноеСредство В(&СписокОС)
	|	И СостоянияОС.Состояние В(&СписокСостояний)
	|	И СостоянияОС.Регистратор <> &ТекущийРегистратор
	|	И СостоянияОС.ДатаСостояния <= &НаДату
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОС.ОсновноеСредство";
	ТаблицаСведений = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТЧ Из ТаблицаПоОС Цикл
		
		ТекОС          = СтрокаТЧ.ОсновноеСредство;
		СтрокаСведений = ТаблицаСведений.Найти(ТекОС, "ОС_БУ");
		
		Если СтрокаСведений <> Неопределено Тогда
			
			Если СтрокаСведений.Списано Тогда
				
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Строка %1.
|	Бухг. учет: На %2 
|	основное средство ""%3""
|	организации ""%4"" уже снято с учета!';uk='Рядок %1.
|	Бухг. облік: На %2 
|	основний засіб ""%3""
|	організації ""%4"" уже знято з обліку!'"), (ТаблицаПоОС.Индекс(СтрокаТЧ) + 1), ДатаДока.Дата, ТекОС, ТекОрганизация);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
				
			КонецЕсли;
			
		Иначе
			
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Строка %1.
|	Бухг. учет: На %2
|	основное средство ""%3""
|	еще не введено в эксплуатацию по организации ""%4""!';uk='Рядок %1.
|	Бухг. облік: На %2
|	основний засіб ""%3""
|	ще не введено в експлуатацію по організації ""%4""!'"), (ТаблицаПоОС.Индекс(СтрокаТЧ) + 1), ДатаДока.Дата, ТекОС, ТекОрганизация);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ПроверитьНаСписанность()


// Устанавливает НалоговаяГруппаОС 
// по значению СчетУчетаБУ 
// или по значению СчетУчетаБУВнеоборотногоАктива
//
Процедура УстановитьНалоговуюГруппуОС(СчетУчетаБУ, НалоговаяГруппаОС) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СчетУчетаБУ) Тогда
		Возврат;
	КонецЕсли;	
	
	ПланХозрасчетный = ПланыСчетов.Хозрасчетный;
	
	Счет10   = ПланХозрасчетный.ОсновныеСредства;
	
	Счет101 	= ПланХозрасчетный.ЗемельныеУчастки;
	Счет102 	= ПланХозрасчетный.КапитальныеЗатратыПоУлучшениюЗемель;
	Счет103 	= ПланХозрасчетный.ДомаИСооружения;
	Счет104 	= ПланХозрасчетный.МашиныИОборудование;
	Счет105 	= ПланХозрасчетный.ТранспортныеСредства;
	Счет106 	= ПланХозрасчетный.ИнструментыПриборыИИнвентарь;
	Счет107 	= ПланХозрасчетный.Животные;
	Счет108 	= ПланХозрасчетный.МноголетниеНасаждения;
	Счет109 	= ПланХозрасчетный.ДругиеОсновныеСредстваГруппа;
	
	Счет111 	= ПланХозрасчетный.БиблиотечныеФонды;
	Счет112 	= ПланХозрасчетный.МалоценныеНеоборотныеМатериальныеАктивы;
	Счет113 	= ПланХозрасчетный.ВременныеНетитульныеСооружения;
	Счет114 	= ПланХозрасчетный.ПриродныеРесурсы;
	Счет115 	= ПланХозрасчетный.ИнвентарнаяТара;
	Счет116 	= ПланХозрасчетный.ПредметыПроката;
	Счет117 	= ПланХозрасчетный.ДругиеНеоборотныеМатериальныеАктивыПодгруппа;
	Счет16 		= ПланХозрасчетный.ДолгосрочныеБиологическиеАктивы;
	
	Если СчетУчетаБУ.ПринадлежитЭлементу(Счет101) ИЛИ СчетУчетаБУ = Счет101 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа1;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет102) ИЛИ СчетУчетаБУ = Счет102 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа2;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет103) ИЛИ СчетУчетаБУ = Счет103 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа3;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет104) ИЛИ СчетУчетаБУ = Счет104 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа4;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет105) ИЛИ СчетУчетаБУ = Счет105 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа5;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет106) ИЛИ СчетУчетаБУ = Счет106 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа6;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет107) ИЛИ СчетУчетаБУ = Счет107 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа7;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет108) ИЛИ СчетУчетаБУ = Счет108 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа8;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет109) ИЛИ СчетУчетаБУ.ПринадлежитЭлементу(Счет117) ИЛИ СчетУчетаБУ = Счет109 ИЛИ СчетУчетаБУ = Счет117 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа9;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет111) ИЛИ СчетУчетаБУ = Счет111 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа10;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет112) ИЛИ СчетУчетаБУ = Счет112 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа11;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет113) ИЛИ СчетУчетаБУ = Счет113 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа12;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет114) ИЛИ СчетУчетаБУ = Счет114 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа13;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет115) ИЛИ СчетУчетаБУ = Счет115 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа14;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет116) ИЛИ СчетУчетаБУ = Счет116 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа15;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет16) ИЛИ СчетУчетаБУ = Счет116 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа16;
	КонецЕсли;	
			

КонецПроцедуры // УстановитьНалоговуюГруппуОС()

// Устанавливает НалоговаяГруппаНМА 
// по значению СчетУчетаБУ 
// или по значению СчетУчетаБУВнеоборотногоАктива
//
Процедура УстановитьНалоговуюГруппуНМА(СчетУчетаБУ, НалоговаяГруппаОС) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СчетУчетаБУ) Тогда
		Возврат;
	КонецЕсли;	
	
	ПланХозрасчетный = ПланыСчетов.Хозрасчетный;
	
	Счет12   = ПланХозрасчетный.НематериальныеАктивы;
	
	Счет121 	= ПланХозрасчетный.ПраваНаИспользованиеПриродныхРесурсов;
	Счет122 	= ПланХозрасчетный.ПраваНаИспользованиеИмущества;
	Счет123 	= ПланХозрасчетный.ПраваНаЗнакиДляТоваровИУслуг;
	Счет124 	= ПланХозрасчетный.ПраваНаОбъектыПромышленнойСобственности;
	Счет125 	= ПланХозрасчетный.АвторскиеИСмежныеСНимиПрава;
	Счет127 	= ПланХозрасчетный.ДругиеНематериальныеАктивы;
	
	Если СчетУчетаБУ.ПринадлежитЭлементу(Счет121) ИЛИ СчетУчетаБУ = Счет121 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.НМАГруппа1;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет122) ИЛИ СчетУчетаБУ = Счет122 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.НМАГруппа2;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет123) ИЛИ СчетУчетаБУ = Счет123 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.НМАГруппа3;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет124) ИЛИ СчетУчетаБУ = Счет124 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.НМАГруппа4;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет125) ИЛИ СчетУчетаБУ = Счет125 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.НМАГруппа5;
	ИначеЕсли СчетУчетаБУ.ПринадлежитЭлементу(Счет127) ИЛИ СчетУчетаБУ = Счет127 Тогда
		НалоговаяГруппаОС = Справочники.НалоговыеГруппыОсновныхСредств.НМАГруппа6;
	КонецЕсли;	
			
КонецПроцедуры // УстановитьНалоговуюГруппуНМА()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЩЕГО НАЗНАЧЕНИЯ НМА
 
// Процедура дополняет табличную часть колонками
// СчетУчетаБУ, СчетНачисленияАмортизацииБУ,
// ВидНалоговойДеятельности_НМА  для нематериальных активов. 
//
// Параметры
//  ДатаДока                     – Тип: Дата, МоментВремени, Граница – Дата, на которую получать результаты
//                 
//  ТекОрганизация               – Тип: СправочникСсылка.Организации – Организация
//                 
//  ТаблицаПоНМА                  – Тип: ТаблицаЗначений – Таблица, в которую необходимо добавить колонки
//                 
//  СтруктураШапкиДокумента      – Тип: Структура - параметры документа
//                 
//  Отказ                        – Тип: Булево – признак отказа
//                 
//  Заголовок                    – Тип: Строка – заголовок вызывающего документа,
//                                               для сообщения об ошибке
//                 
//  ИмяКолонкиНМА                 – Тип: Строка – Наименование колонки, в которой содержаться нематериальные активы
//                 
//
Процедура ДополнитьТабличнуюЧастьСведениямиОбНМАБухНалогРегл(ДатаДока, ТаблицаПоНМА, 
	                                                         СтруктураШапкиДокумента, Отказ, Заголовок,
														     ИмяКолонкиНМА = "НематериальныйАктив") Экспорт
															 
	ТекОрганизация                    = СтруктураШапкиДокумента.Организация;
	ВидДеятельностиНепроизводственная = Справочники.ВидыНалоговойДеятельности.НеОблагаемая;
	
	ТаблицаПоНМА.Колонки.Добавить("СчетУчетаБУ"                , Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаПоНМА.Колонки.Добавить("СчетНачисленияАмортизацииБУ", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаПоНМА.Колонки.Добавить("НаправлениеБУ"              , Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	
	ЕстьНалоговыйУчет = (СтруктураШапкиДокумента.ЕстьНалогНаПрибыль
							     ИЛИ СтруктураШапкиДокумента.ЕстьНДС);
	
		
		ТаблицаПоНМА.Колонки.Добавить("НалоговоеНазначение_НМА",      Новый ОписаниеТипов("СправочникСсылка.НалоговыеНазначенияАктивовИЗатрат"));
		ТаблицаПоНМА.Колонки.Добавить("ВидНалоговойДеятельности_НМА", Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговойДеятельности"));
		ТаблицаПоНМА.Колонки.Добавить("НалоговаяГруппаОС"           , Новый ОписаниеТипов("СправочникСсылка.НалоговыеГруппыОсновныхСредств"));
		
	
	СписокНМА = ТаблицаПоНМА.ВыгрузитьКолонку(ИмяКолонкиНМА);
	
	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("ТекОрганизация", ТекОрганизация);
	Запрос.УстановитьПараметр("Период",        Новый Граница(ДатаДока, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("СписокНМА",       СписокНМА);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаУчетаБУ.НематериальныйАктив                                      КАК НМА_БУ,
	|	СчетаУчетаБУ.СчетУчета                                                КАК СчетУчетаБУ,
	|	СчетаУчетаБУ.СчетНачисленияАмортизации                                КАК СчетНачисленияАмортизацииБУ,
	|	СпособыОтраженияБУ.СпособОтраженияРасходов                            КАК НаправлениеБУ,
	|	ПервоначальныеСведенияНУ.НематериальныйАктив                          КАК НМА_НУ,
	|	ПервоначальныеСведенияНУ.НалоговоеНазначение.ВидНалоговойДеятельности КАК ВидНалоговойДеятельности_НМА,
	|	ПервоначальныеСведенияНУ.НалоговоеНазначение 						  КАК НалоговоеНазначение_НМА,
	|	ПервоначальныеСведенияНУ.НалоговаяГруппаОС                            КАК НалоговаяГруппаОС
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(&Период,
	|	                Организация = &ТекОрганизация И НематериальныйАктив В (&СписокНМА))
	|	                КАК СчетаУчетаБУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.СрезПоследних(
	|		                    &Период,
	|		                    Организация = &ТекОрганизация
	|		                    И НематериальныйАктив В (&СписокНМА)) КАК СпособыОтраженияБУ
	|		ПО СчетаУчетаБУ.НематериальныйАктив = СпособыОтраженияБУ.НематериальныйАктив
	|	   
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(
	|		                    &Период, Организация = &ТекОрганизация 
	|		                    И НематериальныйАктив В (&СписокНМА))
	|		                    КАК ПервоначальныеСведенияНУ
	|		ПО СчетаУчетаБУ.НематериальныйАктив = ПервоначальныеСведенияНУ.НематериальныйАктив";
	ТаблицаСведенийНМА  = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТЧ Из ТаблицаПоНМА Цикл
		
		ТекНМА =  СтрокаТЧ[ИмяКолонкиНМА];
		Колонки = ?(ЕстьНалоговыйУчет, "НМА_БУ, НМА_НУ", "НМА_БУ");
		СтрокаСведений = ТаблицаСведенийНМА.Найти(ТекНМА, Колонки);	
		
		Если СтрокаСведений = Неопределено Тогда
			
			Если ЕстьНалоговыйУчет Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Строка %1.
|	Регл. учет: По нематериальному активу ""%2"" и организации ""%3"" нет информации
|	в регистрах сведений:
|	""Счета бухгалтерского учета нематериальных активов""
|	""Первоначальные сведения о НМА (налоговый учет)""
|	Возможно, оно не принято к учету.';uk='Рядок %1.
|	Регл. облік: По нематеріальному активу ""%2"" і організації ""%3"" немає інформації
|	у регістрах відомостей:
|	""Рахунки бухгалтерського обліку нематеріальних активів""
|	""Початкові відомості про НМА (податковий облік)""
|	Можливо, воно не прийнято до обліку.'"), (ТаблицаПоНМА.Индекс(СтрокаТЧ) + 1), ТекНМА, ТекОрганизация);
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Строка %1.
|	Регл. учет: По нематериальному активу ""%2"" и организации ""%3"" нет информации
|	в регистрах сведений:
|	""Счета бухгалтерского учета нематериальных активов""
|	Возможно, оно не принято к учету.';uk='Рядок %1.
|	Регл. облік: По нематеріальному активу ""%2"" і організації ""%3"" немає інформації
|	у регістрах відомостей:
|	""Рахунки бухгалтерського обліку нематеріальних активів""
|	Можливо, воно не прийнято до обліку.'"), (ТаблицаПоНМА.Индекс(СтрокаТЧ) + 1), ТекНМА, ТекОрганизация);
			КонецЕсли;	
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			Продолжить
			
		КонецЕсли;
		
		СчетУчетаБУ = СтрокаСведений.СчетУчетаБУ;
		
		Если НЕ ЗначениеЗаполнено(СчетУчетаБУ) Тогда
			
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Строка %1.
|	Бух. учет: По нематериальному активу ""%2"" и организации "" 
|	%3"" не заполнен счет учета 
|	в регистре сведений ""Счета бухгалтерского учета нематериальных активов""';uk='Рядок %1.
|	Бух. облік: По нематеріальному активу ""%2"" і організації "" 
|	%3"" не заповнений рахунок 
|	у регістрі відомостей ""Рахунки бухгалтерського обліку нематеріальних активів""'"), (ТаблицаПоНМА.Индекс(СтрокаТЧ) + 1), ТекНМА, ТекОрганизация);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
			
		Иначе
			
			СтрокаТЧ.СчетУчетаБУ = СчетУчетаБУ;
			
		КонецЕсли;
		
		СчетНачисленияАмортизацииБУ = СтрокаСведений.СчетНачисленияАмортизацииБУ;
		
		Если НЕ ЗначениеЗаполнено(СчетНачисленияАмортизацииБУ) Тогда
			
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Строка %1.
|	Бух. учет: По нематериальному активу ""%2
|	"" и организации ""%3
|	"" не заполнен счет начисления амортизации
|	в регистре сведений ""Счета бухгалтерского учета нематериальных активов""';uk='Рядок %1.
|	Бух. облік: По нематеріальному активу ""%2
|	"" і організації ""%3
|	"" не заповнений рахунок нарахування амортизації
|	у регістрі відомостей ""Рахунки бухгалтерського обліку нематеріальних активів""'"), (ТаблицаПоНМА.Индекс(СтрокаТЧ) + 1), ТекНМА, ТекОрганизация);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
			
		Иначе
			
			СтрокаТЧ.СчетНачисленияАмортизацииБУ = СчетНачисленияАмортизацииБУ;
			
		КонецЕсли;
		
		НаправлениеБУ = СтрокаСведений.НаправлениеБУ;
		
		// Направление будет проверяться при распределении амортизации,
		// поэтому сообщения не выдаются
		Если ЗначениеЗаполнено(НаправлениеБУ) Тогда
			
			СтрокаТЧ.НаправлениеБУ = НаправлениеБУ;
			
		КонецЕсли;
		
		Если ЕстьНалоговыйУчет Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаСведений.НМА_НУ) Тогда
				
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Строка %1.
|	Налог. учет: По нематериальному активу 
|	""%2"" и организации ""%3"" нет информации
|	в регистре сведений:
|	""Первоначальные сведения о НМА (налоговый учет)""
|	Возможно, оно не принято к учету.';uk='Рядок %1.
|	Податк. облік: По нематеріальному активу 
|	""%2"" і організації ""%3"" немає інформації
|	у регістрі відомостей:
|	""Початкові відомості про НМА (податковий облік)""
|	Можливо, воно не прийнято до обліку.'"), (ТаблицаПоНМА.Индекс(СтрокаТЧ) + 1), ТекНМА, ТекОрганизация);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
				Продолжить;
				
			КонецЕсли;
			
			ВидНалоговойДеятельности_НМА = СтрокаСведений.ВидНалоговойДеятельности_НМА;
			
			Если НЕ ЗначениеЗаполнено(ВидНалоговойДеятельности_НМА) Тогда
				
					//Вид налоговой деятельности должен быть заполнен обязательно
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Строка %1.
|	Налог. учет: По нематериальному активу 
|	""%2"" и организации ""%3"" не заполнено налоговое назначение
|	в регистре сведений ""Первоначальные сведения о НМА (налоговый учет)""';uk='Рядок %1.
|	Податк. облік: По нематеріальному активу 
|	""%2"" і організації ""%3"" не заповнене податкове призначення
|	у регістрі відомостей ""Початкові відомості про НМА (податковий облік)""'"), (ТаблицаПоНМА.Индекс(СтрокаТЧ) + 1), ТекНМА, ТекОрганизация);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
				
			Иначе
									 
				СтрокаТЧ.ВидНалоговойДеятельности_НМА = ВидНалоговойДеятельности_НМА;
					
			КонецЕсли;
			
			СтрокаТЧ.НалоговоеНазначение_НМА = СтрокаСведений.НалоговоеНазначение_НМА;
			
			
				
				НалоговаяГруппаОС = СтрокаСведений.НалоговаяГруппаОС;
			
				Если НЕ ЗначениеЗаполнено(НалоговаяГруппаОС) Тогда
					
					
				Иначе
										 
					СтрокаТЧ.НалоговаяГруппаОС = НалоговаяГруппаОС;
						
				КонецЕсли;
				
		Иначе
			//СтрокаТЧ.НалоговоеНазначение_НМА = СтрокаСведений.НалоговоеНазначение_НМА;
		    НепроизводственноеНМА = (СтрокаСведений.НалоговоеНазначение_НМА = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность);
			Если НепроизводственноеНМА Тогда
				СтрокаТЧ.НалоговоеНазначение_НМА = СтрокаСведений.НалоговоеНазначение_НМА;
			Иначе	
				СтрокаТЧ.НалоговоеНазначение_НМА = Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяХозДеятельность;
			КонецЕсли;	

		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ДополнитьТабличнуюЧастьСведениямиОбНМАБухНалогРегл()

// Заполняет табличную часть нематериальных активов следующими значениями:
// (Имя колонки нематериальный активов должно быть "НематериальныйАктив")
//
// 	Бухгалтерский учет:
//	 	СтоимостьБУ;
//	 	АмортизацияБУ;
//	 	АмортизацияЗаМесяцБУ;
//
// 	Налоговый учет:
//	 	СтоимостьНУ;
//	 	АмортизацияНУ;
//	 	АмортизацияЗаМесяцНУ;
//
// Параметры
//
//  ДатаРасчета                   - Дата - Дата расчета амортизации
//
//  НМА                            – Табличная часть – табличная часть документа для заполнения
//                 
//  ТекОрганизация                – Тип: СправочникСсылка.Организации – Организация
//                 
//  ОтражатьВБухгалтерскомУчете   – Булево 
//                 
//  ОтражатьВНалоговомУчете       – Булево 
//                 
//  ДатаИтогов                    – Дата, МоментВремени, Граница - дата получения итогов 
//                 
Процедура ЗаполнитьТабличнуюЧастьНематериальныхАктивов(ДатаРасчета, НМА, ТекОрганизация, 
												 ОтражатьВНалоговомУчете, ДатаИтогов = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТекОрганизация) Тогда

		Сообщить(НСтр("ru='Для заполнения табличной части необходимо указать организацию';uk='Для заповнення табличної частини необхідно вказати організацію'"));
		Возврат
		
	КонецЕсли;
	
	Если ДатаИтогов = Неопределено Тогда
		ДатаИтогов = ДатаРасчета;
	КонецЕсли;	
	
	// Для компактной записи вводятся 
	// новые переменные
	НУ = ОтражатьВНалоговомУчете;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ТекОрганизация);
	Запрос.УстановитьПараметр("ДатаИтогов" , ДатаИтогов);
	
	ТаблицаНМА = НМА.Выгрузить();
	СписокНМА = ТаблицаНМА.ВыгрузитьКолонку("НематериальныйАктив");
	
	Запрос.УстановитьПараметр("СписокНМА"         , СписокНМА);
	Запрос.УстановитьПараметр("СубконтоНМА"       , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	Запрос.Текст =				   
	"ВЫБРАТЬ
	|	ПредварительныйЗапрос.НМА                        КАК НМА,
	|	СУММА(ПредварительныйЗапрос.СтоимостьБУ)         КАК СтоимостьБУ,
	|	СУММА(ПредварительныйЗапрос.АмортизацияБУ)       КАК АмортизацияБУ,
	|	СУММА(ПредварительныйЗапрос.СтоимостьНУ)         КАК СтоимостьНУ,
	|	СУММА(ПредварительныйЗапрос.АмортизацияНУ)       КАК АмортизацияНУ
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтоимостьБУ.Субконто1      		КАК НМА,
	|		СтоимостьБУ.СуммаОстатокДт 		КАК СтоимостьБУ,
	|		0                          		КАК АмортизацияБУ,
	|		СтоимостьБУ.СуммаНУОстатокДт 	КАК СтоимостьНУ,
	|		0                          		КАК АмортизацияНУ
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			               &ДатаИтогов,
	|			               Счет В
	|			               	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			               	 	СчетаБухгалтерскогоУчета.СчетУчета
	|			                 ИЗ
	|			                 	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|			                 	                &ДатаИтогов,
	|			                 	                Организация = &Организация
	|			                                    И НематериальныйАктив В (&СписокНМА)
	|			                                    ) КАК СчетаБухгалтерскогоУчета),
	|			               &СубконтоНМА,
	|			               Организация = &Организация
	|			               И Субконто1 В (&СписокНМА)) КАК СтоимостьБУ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АмортизацияБУ.Субконто1,
	|		0,
	|		АмортизацияБУ.СуммаОстатокКт,
	|		0,
	|		АмортизацияБУ.СуммаНУОстатокКт
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			               &ДатаИтогов,
	|			               Счет В
	|			               	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			               		СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации
	|			                 ИЗ
	|			                 	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|			                 	                &ДатаИтогов,
	|			                 	                Организация = &Организация
	|			                                    И НематериальныйАктив В (&СписокНМА)
	|			                                    ) КАК СчетаБухгалтерскогоУчета),
	|			               &СубконтоНМА,
	|			               Организация = &Организация
	|			               И Субконто1 В (&СписокНМА)) КАК АмортизацияБУ	
	|	) КАК ПредварительныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредварительныйЗапрос.НМА";
				   
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество()>0 Тогда
		
		ТаблицаАмортизацииБух = РасчетАмортизацииНМАРегл(ДатаРасчета, ТекОрганизация, СписокНМА);
		
		Для каждого Строка Из НМА Цикл
			
			СтрокаТЗ = ТЗ.Найти(Строка.НематериальныйАктив, "НМА");
			
			Если СтрокаТЗ = Неопределено Тогда
				
				//бухгалтерский учет
				Строка.СтоимостьБУ          = 0;
				Строка.АмортизацияБУ        = 0;
				Строка.АмортизацияЗаМесяцБУ = 0;
				
				//налоговый учет
				Строка.СтоимостьНУ          = 0;
				Строка.АмортизацияНУ        = 0;
				Строка.АмортизацияЗаМесяцНУ = 0;
				
			Иначе
				// В соответствующие поля строки запишем данные из запроса
				
				//бухгалтерский учет
				Строка.СтоимостьБУ          = СтрокаТЗ.СтоимостьБУ;
				Строка.АмортизацияБУ        = СтрокаТЗ.АмортизацияБУ;
				СтрокаТаблицаАмортизацииБух = ТаблицаАмортизацииБух.Найти(Строка.НематериальныйАктив, "ОбъектУчета");
					
				Строка.СтоимостьНУ          = СтрокаТЗ.СтоимостьНУ;
				Строка.АмортизацияНУ        = СтрокаТЗ.АмортизацияНУ;
				
				Если СтрокаТаблицаАмортизацииБух = Неопределено Тогда
					
					Строка.АмортизацияЗаМесяцБУ = 0;
					Строка.АмортизацияЗаМесяцНУ = 0;
					
				Иначе
					
					Строка.АмортизацияЗаМесяцБУ = СтрокаТаблицаАмортизацииБух.Амортизация;
					Строка.АмортизацияЗаМесяцНУ = СтрокаТаблицаАмортизацииБух.АмортизацияНУ;
					
				КонецЕсли;
				
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Сообщить(НСтр("ru='Данные для заполнения отсутствуют.';uk='Дані для заповнення відсутні.'"));
		
	КонецЕсли;
	
	
КонецПроцедуры // ЗаполнитьТабличнуюЧастьНематериальныхАктивов()

// Проверяет табличную часть на наличие в ней списанных или не введенных 
// в эксплуатацию НМА
// (Имя колонки НМА должно быть "НематериальныйАктив")
//
// Параметры
//  ДатаДока                     - Тип: Дата - дата, на которую проверять
//
//  ТекОрганизация               – Тип: СправочникСсылка.Организации – Организация
//                 
//  ТаблицаПоНМА                 – Тип: ТаблицаЗначений – ТаблицаЗначений
//                                                        нематериальные активы, которые нужно проверять
//
//  Отказ                        – Тип: Булево – признак отказа
//                 
//  Заголовок                    – Тип: Строка – заголовок вызывающего документа,
//                                               для сообщения об ошибке
//
Процедура ПроверитьНаСписанностьНМА(ДатаДока, ТекОрганизация, ТаблицаПоНМА, Отказ, Заголовок) Экспорт
								 
	Если Отказ Тогда
		Возврат
	КонецЕсли;								 
	
	СписокНМА = ТаблицаПоНМА.ВыгрузитьКолонку("НематериальныйАктив");
	
	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("Период"      , ДатаДока);
	Запрос.УстановитьПараметр("СписокНМА"   , СписокНМА);
	Запрос.УстановитьПараметр("СнятСУчета"  , Перечисления.ВидыСостоянийНМА.Списан);
	Запрос.УстановитьПараметр("ПринятКучету", Перечисления.ВидыСостоянийНМА.ПринятКУчету);
	Запрос.УстановитьПараметр("Организация" , ТекОрганизация);
	Запрос.УстановитьПараметр("ТекущийРегистратор",   ДатаДока.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияНМА.НематериальныйАктив КАК НМА,
	|	ВЫБОР
	|		КОГДА СостоянияНМА.Состояние = &СнятСУчета
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                            КАК СнятСУчета,
	|	ВЫБОР
	|		КОГДА СостоянияНМА.Состояние = &ПринятКУчету
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                            КАК НеПринятКУчету
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
	|		            &Период,
	|		            Организация = &Организация
	|			        И НематериальныйАктив В (&СписокНМА)
	|		    		И (НЕ Регистратор = &ТекущийРегистратор)) КАК СостоянияНМА";
	ТаблицаСведений = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТЧ Из ТаблицаПоНМА Цикл
		
		ТекНМА         = СтрокаТЧ.НематериальныйАктив;
		СтрокаСведений = ТаблицаСведений.Найти(ТекНМА, "НМА");
		
		Если СтрокаСведений <> Неопределено Тогда
			
			Если СтрокаСведений.СнятСучета Тогда
				
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Строка %1.
|	Бухг. учет: На %2 
|	нематериальный актив ""%3""
|	организации ""%4"" уже снят с учета!';uk='Рядок %1.
|	Бухг. облік: На %2 
|	нематеріальний актив ""%3""
|	організації ""%4"" уже снять із обліку!'"), (ТаблицаПоНМА.Индекс(СтрокаТЧ) + 1), ДатаДока.Дата, ТекНМА, ТекОрганизация);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
								 
			ИначеЕсли СтрокаСведений.НеПринятКУчету Тогда

				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Строка %1.
|	Бухг. учет: На %2 
|	нематериальный актив ""%3""
|	еще не принят к учету по организации организации ""%4""!';uk='Рядок %1.
|	Бухг. облік: На %2 
|	нематеріальний актив ""%3""
|	ще не прийнятий до обліку по організації організації ""%4""!'"), (ТаблицаПоНМА.Индекс(СтрокаТЧ) + 1), ДатаДока.Дата, ТекНМА, ТекОрганизация);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
				
			КонецЕсли;
			
		Иначе
			
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Строка %1.
|	Бухг. учет: На %2 
|	нематериальный актив ""%3""
|	еще не поступил в организацию ""%4"" и не принят к учету!';uk='Рядок %1.
|	Бухг. облік: На %2 
|	нематеріальний актив ""%3""
|	ще не надійшов в організацію ""%4"" і не прийнятий до обліку!'"), (ТаблицаПоНМА.Индекс(СтрокаТЧ) + 1), ДатаДока.Дата, ТекНМА, ТекОрганизация);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения, , , , Отказ);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры


