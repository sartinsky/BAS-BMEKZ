#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ЗаполнитьДокументыНаЭкспорт(ОбъектПлатежныеДокументы, ДокументыНаЭкспорт, НачПериода, КонПериода, БанковскийСчет,
		ВыгружатьПлатПоручения, ВыгружатьПлатТребования) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""Платежное поручение"" КАК ВидДокумента,
	|	ПлатежноеПоручение.Ссылка КАК Документ,
	|	ПлатежноеПоручение.Проведен,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СостояниеДокумента,
	|	ПлатежноеПоручение.Номер,
	|	ПлатежноеПоручение.Дата,
	|	ПлатежноеПоручение.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ПлатежноеПоручение.СуммаДокумента,
	|	0 КАК СуммаНаПриход,
	|	ПлатежноеПоручение.СуммаДокумента КАК СуммаНаРасход,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.ТекстПлательщика КАК СТРОКА(500)) КАК ТекстПлательщика,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.ТекстПолучателя КАК СТРОКА(500)) КАК ТекстПолучателя,
	|	ПлатежноеПоручение.СчетОрганизации.ВалютаДенежныхСредств.Код КАК КодВалюты,
	|	ПлатежноеПоручение.Организация.КодПоЕДРПОУ КАК ОКПОПлательщика,
	|	ПлатежноеПоручение.Контрагент.КодПоЕДРПОУ КАК ОКПОПолучателя,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.Организация.НаименованиеПолное КАК СТРОКА(250)) КАК Организация,
	|	ПлатежноеПоручение.Организация.Наименование КАК ОрганизацияКратко,
	|	ПлатежноеПоручение.СчетОрганизации КАК ОрганизацияСчет,
	|	ПлатежноеПоручение.СчетОрганизации.НомерСчета КАК ОрганизацияНомерСчета,
	|	ПлатежноеПоручение.СчетОрганизации.Банк.Код КАК ОрганизацияМФОБанка,
	|	ПлатежноеПоручение.СчетОрганизации.Банк.Наименование КАК ОрганизацияБанк,
	|	ПлатежноеПоручение.СчетОрганизации.Банк.КоррСчет КАК ОрганизацияРасчСчет,
	|	ПлатежноеПоручение.СчетОрганизации.Банк.Город КАК ОрганизацияГородБанка,
	|	ПлатежноеПоручение.СчетОрганизации.СуммаБезКопеек КАК СуммаБезКопеек,
	|	ПлатежноеПоручение.СчетОрганизации.ТекстНазначения КАК ОрганизацияТекстНазначения,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.СчетКонтрагента.Владелец.НаименованиеПолное КАК СТРОКА(250)) КАК Контрагент,
	|	ПлатежноеПоручение.СчетКонтрагента.Владелец.Наименование КАК КонтрагентКратко,
	|	ПлатежноеПоручение.СчетКонтрагента КАК КонтрагентСчет,
	|	ПлатежноеПоручение.СчетКонтрагента.НомерСчета КАК КонтрагентНомерСчета,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Наименование КАК КонтрагентБанк,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.КоррСчет КАК КонтрагентРасчСчет,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Город КАК КонтрагентГородБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Код КАК КонтрагентМФОБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.ТекстНазначения КАК КонтрагентТекстНазначения,
	|	"""" КАК ОписаниеОшибок,
	|	"""" КАК Готовность
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.Дата МЕЖДУ &ДатаНачало И &ДатаОкончание
	|	И НЕ ПлатежноеПоручение.ПометкаУдаления
	|	И НЕ ПлатежноеПоручение.Оплачено
	|	И ПлатежноеПоручение.СчетОрганизации = &Счет
	|	И &ВыгружатьПлатПоручения
	|
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидДокумента,
	|	ПлатежноеПоручение.Дата,
	|	Документ";
	
	ЗапросПоДокументам = Новый Запрос(ТекстЗапроса);
	ЗапросПоДокументам.УстановитьПараметр("ДатаНачало",    НачалоДня(НачПериода));
	ЗапросПоДокументам.УстановитьПараметр("ДатаОкончание", КонецДня(КонПериода));
	ЗапросПоДокументам.УстановитьПараметр("Счет",          БанковскийСчет);
	ЗапросПоДокументам.УстановитьПараметр("ВыгружатьПлатПоручения",  ВыгружатьПлатПоручения);
	ЗапросПоДокументам.УстановитьПараметр("ВыгружатьПлатТребования", ВыгружатьПлатТребования);
	
	ВыборкаДляЭкспорта = ЗапросПоДокументам.Выполнить().Выгрузить();
	ОбъектПлатежныеДокументы.Загрузить(ВыборкаДляЭкспорта);
	
	КоллекцияЭлементов = Метаданные.Обработки.КлиентБанк.ТабличныеЧасти.ПлатежныеДокументы.Реквизиты;
	Для каждого СтрокаДокумента Из ОбъектПлатежныеДокументы Цикл
		
		
		СтрокаДокумента.Выгружать = ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок);
		
		Если СтрокаДокумента.Готовность > 0 Тогда
			СтрокаДокумента.ОписаниеОшибок = СтрокаДокумента.ОписаниеОшибок;
		Иначе
			СтрокаДокумента.ОписаниеОшибок = НСтр("ru='Документ готов к выгрузке!';uk='Документ готовий до вивантаження!'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДокументыНаЭкспорт


Процедура ПроверитьНаПустоеЗначениеЭкспорта(СтрокаЭкспорта, ИмяСвойства, ПредставлениеСвойства)
	
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта[ИмяСвойства]) Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 3, "Не заполнено """ + ПредставлениеСвойства + """!");
		УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;
	
КонецПроцедуры



// Процедура проверяет заполнение таблицы с документами.
//
Процедура ПроверитьЗаполнениеТаблицыДокументов(Объект, Документ, Документы = "ДокументыКИмпорту", Отказ = Ложь) Экспорт
	
	ЕстьНепроведенные = Ложь;
	Документы = ?(Документы = "ПлатежныеДокументы", "Объект.ПлатежныеДокументы", Документы);
	Для НомСтр = 0 По Документ.Количество() - 1 Цикл
		Если Документ[НомСтр].Готовность > 0 Тогда
			
			Если Документы <> "ДокументыКИмпорту" И Документ[НомСтр].Свойство("Проведен") И НЕ Документ[НомСтр].Проведен Тогда
				ЕстьНепроведенные = Истина;
			КонецЕсли;
			
			Если НЕ Документ[НомСтр].Свойство("Выгружать") ИЛИ НЕ Документ[НомСтр].Выгружать Тогда
				
				МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Документ[НомСтр].ОписаниеОшибок, Символы.ПС);
				Для каждого Ошибка Из МассивСтрок Цикл
					
					// Выводим только реальные ошибки. Информация о ненайденых объектах указана в строках списка документов
					
					Если Найти(ВРЕГ(Ошибка), НСтр("ru='НЕ НАЙДЕН';uk='НЕ ЗНАЙДЕНИЙ'")) = 1 Тогда
						Продолжить;
					КонецЕсли; 
					
					Если Найти(Ошибка, НСтр("ru='счет';uk='рахунок'")) <> 0 Тогда
						Поле = Документы + "[" + Формат(НомСтр, "ЧН=0; ЧГ=") + "].СчетКонтрагента";
						ПолеТаблицы = "Счет контрагента";
					ИначеЕсли Найти(Ошибка, НСтр("ru='ЕДРПОУ';uk='ЄДРПОУ'")) <> 0 Тогда
						Поле = Документы + "[" + Формат(НомСтр, "ЧН=0; ЧГ=") + "].Контрагент";
						Если Найти(Ошибка, НСтр("ru='получателя';uk='одержувача'")) > 0 Тогда
							ПолеТаблицы = "ЕДРПОУ получателя";
						Иначе
							ПолеТаблицы = "ЕДРПОУ контрагента";
						КонецЕсли;
					ИначеЕсли Найти(Ошибка, НСтр("ru='МФО';uk='МФО'")) <> 0 Тогда
						Поле = Документы + "[" + Формат(НомСтр, "ЧН=0; ЧГ=") + "].СчетКонтрагента";
						Если Найти(Ошибка, НСтр("ru='плательщика';uk='платника'")) > 0 Тогда
							ПолеТаблицы = "МФО плательщика";
                        ИначеЕсли Найти(Ошибка, НСтр("ru='получателя';uk='одержувача'")) > 0 Тогда
							ПолеТаблицы = "МФО получателя";
	                    Иначе
							ПолеТаблицы = "МФО";
						КонецЕсли;
						
					ИначеЕсли Найти(Ошибка, НСтр("ru='сумма';uk='сума'")) <> 0 Тогда
						Поле = Документы + "[" + Формат(НомСтр, "ЧН=0; ЧГ=") + "].СуммаСписано";
						ПолеТаблицы = "Сумма";
					ИначеЕсли Найти(Ошибка, НСтр("ru='номер';uk='номер'")) <> 0 Тогда
						Поле = Документы + "[" + Формат(НомСтр, "ЧН=0; ЧГ=") + "].Номер"
							+ ?(Документы = "ДокументыКИмпорту", "Док", "");
						ПолеТаблицы = "Номер";
					Иначе
						Продолжить;
					КонецЕсли;
					
					ТекстОшибки = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения(
						"Колонка", "Корректность", ПолеТаблицы, НомСтр + 1, "Платежные документы");
					ТекстОшибки = СокрЛП(ТекстОшибки) + Символы.ПС + СокрЛП(Ошибка);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, Поле,, Отказ);
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьНепроведенные Тогда
		
		Поле = "Объект.ПлатежныеДокументы";
		ТекстСообщения = НСтр("ru='Некоторые документы не проведены и не могут быть выгружены';uk='Деякі документи не проведені і не можуть бути вивантажені'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТаблицыДокументов

// Функция создает соответствие из переданной строки.
//
Функция СоздатьСоответствиеИзСтроки(Знач СтрокаЧерезЗапятую)
	
	НовоеСоответствие = Новый Соответствие;
	
	ПозицияРазделителя = Найти(СтрокаЧерезЗапятую, ",");
	
	Пока ПозицияРазделителя > 0 Цикл
		
		ИмяИтема = Лев(СтрокаЧерезЗапятую, ПозицияРазделителя - 1);
		НовоеСоответствие.Вставить(ИмяИтема, Истина);
		СтрокаЧерезЗапятую = Сред(СтрокаЧерезЗапятую, ПозицияРазделителя + 1);
		ПозицияРазделителя = Найти(СтрокаЧерезЗапятую, ",");
		
	КонецЦикла;
	
	Если СтрДлина(СтрокаЧерезЗапятую) > 0 Тогда
		
		НовоеСоответствие.Вставить(СтрокаЧерезЗапятую, Истина);
		
	КонецЕсли;
	
	Возврат НовоеСоответствие;
	
КонецФункции

// Процедура добавляет замечание.
//
Процедура ДобавитьЗамечание(СтруктураДокумента, НоваяГотовность, ТекстЗамечания)
	
	УстановитьГотовность(СтруктураДокумента.Готовность, НоваяГотовность);
	ДобавитьВСтроку(СтруктураДокумента.ОписаниеОшибок, ТекстЗамечания);
	
КонецПроцедуры

// Процедура устанавливает готовность.
//
Процедура УстановитьГотовность(ТекущаяГотовность, НоваяГотовность)
	
	Если ТекущаяГотовность < НоваяГотовность Тогда
		ТекущаяГотовность = НоваяГотовность;
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет переданное значение в строку.
//
Процедура ДобавитьВСтроку(Буфер, НоваяСтрока)
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
	Иначе
		Буфер = Буфер + Символы.ПС + НоваяСтрока;
	КонецЕсли;
	
КонецПроцедуры



// Процедура выгружает данные в файл.
//
Функция ВыгрузитьXML(ТаблицаДокументов, ПлатежныеДокументы, Кодировка, Программа, НачПериода, КонПериода, БанковскийСчет, ФайлВыгрузки, Организация, КлючУникальности) Экспорт
	
	ПотокВыгрузки = Новый ТекстовыйДокумент();
	
	Если Кодировка = "DOS" Тогда
		КодировкаXML = "DOS 866";
	ИначеЕсли Кодировка = "Windows" Тогда
		КодировкаXML = "Windows-1251";
	Иначе
		КодировкаXML = "UTF-8";
	КонецЕсли;
	
	// Формируем заголовок.
	СтрокаИнформацииОXML = "<?xml version=""1.0"" encoding=""" + КодировкаXML + """?>";
	
	УзелКорень = СоздатьУзел("_1CClientBankExchange");
	
	УзелКорень.ЗаписатьСоответствиеПространстваИмен("xsi","http://www.w3.org/2001/XMLSchema-instance");
	
	одЗаписатьЭлемент(УзелКорень,"ВерсияФормата",	"2.00");
	одЗаписатьЭлемент(УзелКорень,"Отправитель", 	Метаданные.Синоним);
	одЗаписатьЭлемент(УзелКорень,"Получатель",  	Программа);
	одЗаписатьЭлемент(УзелКорень,"ДатаСоздания", 	Формат(ТекущаяДата(),"ДФ=yyyy-MM-dd"));
	одЗаписатьЭлемент(УзелКорень,"ДатаНачала", 		Формат(НачПериода,"ДФ=yyyy-MM-dd"));
	одЗаписатьЭлемент(УзелКорень,"ДатаКонца", 		Формат(КонПериода,"ДФ=yyyy-MM-dd"));
	
	одЗаписатьЭлемент(УзелКорень,"РасчСчет", БанковскийСчет.НомерСчета);
	
	одЗаписатьЭлемент(УзелКорень,"КодВалюты", СокрЛП(БанковскийСчет.ВалютаДенежныхСредств.Код));
	
	// Выводим отмеченные секции документов.
	Для Каждого СтрокаСекции Из ПлатежныеДокументы Цикл
		
		Если НЕ СтрокаСекции.Выгружать Тогда
			Продолжить;
		КонецЕсли;
	
		УзелСекцияДокумент = СоздатьУзел("СекцияДокумент");
		
		СтуртураДляЗаписи = СформироватьСтруктуруЭкспорта();
		ЗаполнитьЗначениеЭкспорта(СтуртураДляЗаписи, СтрокаСекции, Организация);
		
		Для каждого ВыгружаемыйРеквизит из СтуртураДляЗаписи Цикл
			Значение = ПривестиЗначение(ВыгружаемыйРеквизит.Значение);
			Если НЕ ПустаяСтрока(Значение) Тогда
				одЗаписатьЭлемент(УзелСекцияДокумент, ВыгружаемыйРеквизит.Ключ, Значение);
			КонецЕсли;
		КонецЦикла;
		
		ДобавитьПодчиненный(УзелКорень, УзелСекцияДокумент);
		
		СтрокаСекции.Готовность = -2;
		
	КонецЦикла;	
	
	УзелКорень.ЗаписатьКонецЭлемента();
	XML = УзелКорень.Закрыть();
	
	// Записываем на диск.
	ПотокВыгрузки.ДобавитьСтроку(СтрокаИнформацииОXML);
	ПотокВыгрузки.ДобавитьСтроку(XML);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	// Кодировку задаем текстом, иначе бывают проблемы на сервере в Linux и в связке англоязычная Windows + англоязычный SQL
	Если Кодировка = "DOS" Тогда 
		Кодир = "cp866";        // КодировкаТекста.OEM;
	ИначеЕсли Кодировка = "Windows" Тогда
		Кодир = "windows-1251"; // КодировкаТекста.ANSI;
	Иначе
		Кодир = "UTF-8";
	КонецЕсли;
	
	ПотокВыгрузки.Записать(ИмяВременногоФайла, Кодир);
	
	// Отметим те документы которые успешно загрузились
	Для каждого СтрокаСекции Из ПлатежныеДокументы Цикл
		СтрокаСекции.Готовность = ?(СтрокаСекции.Готовность = -2, -1, СтрокаСекции.Готовность);
	КонецЦикла;
	
	Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), КлючУникальности);
	
	Возврат Адрес;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ОБЪЕКТОМ XMLЗапись

// Создает новый xml-узел
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
//
// Параметры: 
//  Имя            - Имя узла
//
// Возвращаемое значение:
//  Объект нового xml-узла
//
Функция СоздатьУзел(Имя) Экспорт 

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьНачалоЭлемента(Имя);

	Возврат ЗаписьXML;

КонецФункции // СоздатьУзел()

// Устанавливает атрибут указанного xml-узла
//
// Параметры: 
//  Узел           - xml-узел
//  Имя            - имя атрибута
//  Значение       - устанавливаемое значение
//
Процедура УстановитьАтрибут(Узел, Имя, Значение) Экспорт

	СтрокаЗаписи = XMLСтрока(Значение);
	
	Узел.ЗаписатьАтрибут(Имя, СтрокаЗаписи);
	
КонецПроцедуры // УстановитьАтрибут()

// Осуществляет запись элемента и его значения в указанный объект
//
// Параметры:
//  Объект         - объект типа XMLЗапись
//  Имя            - Строка. Имя элемента
//  Значение       - Значение элемента
// 
Процедура одЗаписатьЭлемент(Объект, Имя, Значение="") Экспорт

	Объект.ЗаписатьНачалоЭлемента(Имя);
	Стр = XMLСтрока(Значение);
	
	Объект.ЗаписатьТекст(Стр);
	Объект.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // одЗаписатьЭлемент() 

// Подчиняет xml-узел указанному узлу-родителю
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Узел           - подчиняемый узел 
//
Процедура ДобавитьПодчиненный(УзелРодитель, Узел) Экспорт

	Если ТипЗнч(Узел) <> Тип("Строка") Тогда
		Узел.ЗаписатьКонецЭлемента();
		ИнформацияДляЗаписиВФайл = Узел.Закрыть();
	Иначе
		ИнформацияДляЗаписиВФайл = Узел;
	КонецЕсли;
	
	УзелРодитель.ЗаписатьБезОбработки(ИнформацияДляЗаписиВФайл);
		
КонецПроцедуры // ДобавитьПодчиненный() 



// Функция формирует структуру экспорта.
//
Функция СформироватьСтруктуруЭкспорта()
	
	СтруктураЭкспорта = Новый Структура;
	
	СтруктураЭкспорта.Вставить("Выгружать",              ""); // "_"
	СтруктураЭкспорта.Вставить("Готовность",             ""); // "Готовность"
	
	СтруктураЭкспорта.Вставить("ВидДокумента"            "");  // "Вид документа",                      
	
	СтруктураЭкспорта.Вставить("НомерДок",               ""); // "№ Документа"
	СтруктураЭкспорта.Вставить("Номер",                  ""); // "Номер"
	СтруктураЭкспорта.Вставить("Дата",                   ""); // "Дата"
	
	СтруктураЭкспорта.Вставить("ДокументИД"              "");  // "№ Документа (ИД)",                      
	
	СтруктураЭкспорта.Вставить("Операция",               ""); // "Операция"
	СтруктураЭкспорта.Вставить("СчетОрганизации",        ""); // "Эл. Р/с организации"
	СтруктураЭкспорта.Вставить("НомерСчетаОрганизации",  ""); // "Р/с организации"
	СтруктураЭкспорта.Вставить("Сумма",                  ""); // "Сумма"
	
	СтруктураЭкспорта.Вставить("КодВалюты",              "");  // "Валюта платежа",                     
	
	СтруктураЭкспорта.Вставить("Контрагент",             ""); // "Контрагент"
	СтруктураЭкспорта.Вставить("СчетКонтрагента",        ""); // "Р/с контрагента"
	СтруктураЭкспорта.Вставить("НомерСчетаКонтрагента",  ""); // "Эл. Р/с контрагента"
	
	
	СтруктураЭкспорта.Вставить("ПлательщикСчет",         ""); // "Расчетный счет плательщика"
	СтруктураЭкспорта.Вставить("Плательщик",             ""); // "Плательщик"
	СтруктураЭкспорта.Вставить("ПлательщикОКПО",         "");  // "ОКПО (ЕДРПОУ) плательщика",            
	СтруктураЭкспорта.Вставить("ПлательщикБанк",         "");  // "Банк плательщика",       
	СтруктураЭкспорта.Вставить("ПлательщикМФО",          ""); // "МФО банка плательщика",  
	
	СтруктураЭкспорта.Вставить("ПолучательСчет",         ""); // "Расчетный счет получателя"
	СтруктураЭкспорта.Вставить("Получатель",             ""); // "Получатель"
	СтруктураЭкспорта.Вставить("ПолучательОКПО",         "");  // "ОКПО (ЕДРПОУ) получателя",             
	СтруктураЭкспорта.Вставить("ПолучательБанк",         "");  // "Банк получателя",        
	СтруктураЭкспорта.Вставить("ПолучательМФО",          ""); // "МФО банка получателя",   
	
	
	
	СтруктураЭкспорта.Вставить("НазначениеПлатежа",      ""); // "Назначение платежа"
	
	СтруктураЭкспорта.Вставить("Документ",               ""); // "Источник"
	СтруктураЭкспорта.Вставить("СекцияДокумент",         ""); // "Выгрузка"
	
	СтруктураЭкспорта.Вставить("ОписаниеОшибок",         ""); // "Замечания"
	СтруктураЭкспорта.Вставить("ТипДокумента",           ""); // "Тип пл. документа"
	
	Возврат СтруктураЭкспорта;
	
КонецФункции // СформироватьСтруктуруЭкспорта

// Процедура заполняет экспортные значения.
//
Процедура ЗаполнитьЗначениеЭкспорта(СтрокаЭкспорта, ВыборкаДляЭкспорта, Организация)

	Если ВыборкаДляЭкспорта.ВидДокумента = "Платежное требование" Тогда
		Плательщик = "Контрагент";
		Получатель = "Организация";
	Иначе
		Плательщик = "Организация";
		Получатель = "Контрагент";
	КонецЕсли;

	СтрокаЭкспорта.Номер          =	ПолучитьНомерВФорматеОбмена(ВыборкаДляЭкспорта.Документ, ВыборкаДляЭкспорта.Номер);
	СтрокаЭкспорта.Дата           =	Формат(ВыборкаДляЭкспорта.Дата, "ДЛФ=Д");
	СтрокаЭкспорта.Сумма          =	Формат(ВыборкаДляЭкспорта.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧГ=0");
	СтрокаЭкспорта.ПлательщикСчет =	ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
	СтрокаЭкспорта.ПолучательСчет =	ВыборкаДляЭкспорта[Получатель + "НомерСчета"];
	СтрокаЭкспорта.ВидДокумента	= 	ВыборкаДляЭкспорта.ВидДокумента;
	СтрокаЭкспорта.КодВалюты	= 	ВыборкаДляЭкспорта.КодВалюты;;




	// Плательщик
	СтрокаЭкспорта.Плательщик = ВыборкаДляЭкспорта[Плательщик];


	// ПлательщикБанк, ПлательщикМФО 
	СтрокаЭкспорта.ПлательщикБанк 	= ВыборкаДляЭкспорта[Плательщик + "Банк"];
	СтрокаЭкспорта.ПлательщикМФО 	= ВыборкаДляЭкспорта[Плательщик + "МФОБанка"];


	// Получатель
	СтрокаЭкспорта.Получатель = ВыборкаДляЭкспорта[Получатель];


	// ПолучательБанк, ПолучательМФО 
	СтрокаЭкспорта.ПолучательБанк 	= ВыборкаДляЭкспорта[Получатель + "Банк"];
	СтрокаЭкспорта.ПолучательМФО 	= ВыборкаДляЭкспорта[Получатель + "МФОБанка"];


	// ПлательщикОКПО
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикОКПО) Тогда
		СтрокаЭкспорта.ПлательщикОКПО = ВыборкаДляЭкспорта.ОКПОПлательщика;
	КонецЕсли;
	
	// ПолучательОКПО
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательОКПО) Тогда
		СтрокаЭкспорта.ПолучательОКПО = ВыборкаДляЭкспорта.ОКПОПолучателя;
	КонецЕсли;


	
	// ДокументИД
	СтрокаЭкспорта.ДокументИД = ВыборкаДляЭкспорта.Номер;
	
	// НазначениеПлатежа
	СтрокаЭкспорта.НазначениеПлатежа = СтрЗаменить(СтрЗаменить(СтрЗаменить(ВыборкаДляЭкспорта.НазначениеПлатежа, Символы.ПС, ""), Символы.ВК, ""), Символы.ПФ, "");
	
КонецПроцедуры // ЗаполнитьЗначениеЭкспорта

// Функция проверяет наличие в строке только цифр.
//
Функция ЕстьНеЦифры(Знач СтрокаПроверки)
	
	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрокаПроверки = СокрЛП(СтрокаПроверки);
	Длина = СтрДлина(СтрокаПроверки);
	
	Для Ном = 1 По Длина Цикл
		Если Найти("0123456789", Сред(СтрокаПроверки, Ном, 1)) = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Функция получает дату из строки.
//
Функция ПолучитьДатуИзСтроки(Приемник, Источник)
	
	Буфер = Источник;
	
	ПозицияТочки = Найти(Буфер, "-");
	
	Если ПозицияТочки = 0 Тогда
		Возврат НСтр("ru='Неверный формат строки с датой';uk='Невірний формат рядку з датою'");
	КонецЕсли;
	
	ГодДаты = Лев(Буфер, ПозицияТочки - 1);
	Буфер = Сред(Буфер, ПозицияТочки + 1);
	
	ПозицияТочки = Найти(Буфер, "-");
	
	Если ПозицияТочки = 0 Тогда
		Возврат НСтр("ru='Неверный формат строки с датой';uk='Невірний формат рядку з датою'");
	КонецЕсли;
	
	МесяцДаты = Лев(Буфер, ПозицияТочки - 1);
	ЧислоДаты = Сред(Буфер, ПозицияТочки + 1);
	
	
	Если СтрДлина(ГодДаты) = 2 Тогда
		
		Если Число(ГодДаты) < 50 Тогда
			ГодДаты = "20" + ГодДаты;
		Иначе
			ГодДаты = "19" + ГодДаты ;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		
		Приемник = Дата(Число(ГодДаты), Число(МесяцДаты), Число(ЧислоДаты));
		
	Исключение
		
		Возврат НСтр("ru='Не удалось преобразовать строку в дату';uk='Не вдалося перетворити строку в дату'");
		
	КонецПопытки;
	
	Возврат Приемник;
	
КонецФункции

Функция ПолучитьЧислоИзСтроки(Знач НомерДок)
	
	Если ПустаяСтрока(НомерДок) Тогда
		Возврат 0;
	КонецЕсли;
	
	ТолькоЦифры = Истина;
	ДлинаНомера = СтрДлина(НомерДок);
	Для инд = 1 По ДлинаНомера Цикл
		// поиск ведем с конца номера, до первого не цифрового символа
		ПозицияНеЦифровойСимвол = ДлинаНомера - инд + 1;
		
		Код = КодСимвола(НомерДок, ПозицияНеЦифровойСимвол);
		
		Если Код < 48 ИЛИ Код > 57 Тогда
			ТолькоЦифры = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТолькоЦифры Тогда
		Номер = НомерДок;
	ИначеЕсли ПозицияНеЦифровойСимвол < ДлинаНомера Тогда
		Номер = Сред(НомерДок, ПозицияНеЦифровойСимвол + 1); 
	ИначеЕсли ПозицияНеЦифровойСимвол = ДлинаНомера Тогда
		Возврат НомерДок;
	КонецЕсли;
	
	Возврат Число(Номер);
	
КонецФункции

// Функция возвращает номер в формате обмена.
//
Функция ПолучитьНомерВФорматеОбмена(Документ, НомерДокумента)
	
	Номер = СокрЛП(НомерДокумента);
	ПрефиксОрганизации = "";
	
	ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации(Документ, Истина, ПрефиксОрганизации);
	
	// Удаление префикса из номера документа.
	Если Найти(Номер, ПрефиксОрганизации) = 1 Тогда
		Номер = Сред(Номер, СтрДлина(ПрефиксОрганизации) + 1);
	КонецЕсли;
	
	// Так же, может остаться "минус" впереди.
	Если Лев(Номер, 1) = "-" Тогда
		Номер = Сред(Номер, 2);
	КонецЕсли;
	
	// Удаление ведущих нулей.
	Пока Лев(Номер, 1) = "0" Цикл
		Номер = Сред(Номер, 2);
	КонецЦикла;
	
	Возврат Номер;
	
КонецФункции

// Функция формирует значение на основании типа переданного значения.
//
Функция ПривестиЗначение(Значение)
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		
		Возврат СокрЛП(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		
		Возврат Формат(Значение, "ЧРД=.; ЧРГ=' '; ЧГ=0");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		
		Возврат Формат(Значение, "ДФ=yyyy-MM-dd");
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

//Процедура выводит на печать отчет о выгруженных документах
//
Процедура ПечатьОтчетаОВыгруженныхПлатежныхДокументах(ПолеОтчета, Источник, Организация, БанковскийСчет, НачПериода, КонПериода) Экспорт
	
	МакетОтчета = ПолучитьМакет("ОтчетОВыгруженныхПлатежныхДокументах");
	
	Шапка   = МакетОтчета.ПолучитьОбласть("Шапка");
	Строка  = МакетОтчета.ПолучитьОбласть("Строка");
	Подвал  = МакетОтчета.ПолучитьОбласть("Подвал");
	НазвОрг = МакетОтчета.ПолучитьОбласть("НазваниеОрганизации");
	
	НазвОрг.Параметры.НазваниеОрганизации = Организация.Наименование;
	ПолеОтчета.Вывести(НазвОрг);
	
	Шапка.Параметры.ИмяОтчета 			= НСтр("ru='Отчет о выгруженных платежных документах';uk='Звіт про вивантажені платіжні документи'");
	Шапка.Параметры.ИмяСуммыСписания 	= НСтр("ru='На списание';uk='На списання'");
	Шапка.Параметры.ИмяСуммыПоступления = НСтр("ru='На поступление';uk='На надходження'");
	
	Если НачПериода = КонПериода Тогда
		Шапка.Параметры.ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='по счету  %1 за %2';uk='по рахунку %1 %2'"), БанковскийСчет.НомерСчета, Формат(НачПериода, "ДЛФ=D"));
	Иначе
		Шапка.Параметры.ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='по счету  %1 с %2 по %3';uk='по рахунку %1 з %2 по %3'"), БанковскийСчет.НомерСчета, Формат(НачПериода, "ДЛФ=D"), Формат(КонПериода, "ДЛФ=D"));
	КонецЕсли;
	
	ПолеОтчета.Вывести(Шапка);
	
	Индекс      = 0;
	ИтогоСуммаП = 0;
	ИтогоСуммаР = 0;
	
	Для каждого СтрокаИсточника Из Источник Цикл
		
		Если СтрокаИсточника.Готовность <> -1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаИсточника.ВидДокумента = "Платежное поручение" Тогда
			Строка.Параметры.Плательщик     = СтрокаИсточника.Организация;
			Строка.Параметры.ПлательщикСчет = СтрокаИсточника.ОрганизацияНомерСчета;
			Строка.Параметры.Получатель     = СтрокаИсточника.Контрагент;
			Строка.Параметры.ПолучательСчет = СтрокаИсточника.КонтрагентНомерСчета;
			Строка.Параметры.СуммаСписание  = СтрокаИсточника.СуммаДокумента;
			Строка.Параметры.СуммаПоступление = "";
			ИтогоСуммаР = ИтогоСуммаР + СтрокаИсточника.СуммаДокумента;
		Иначе
			Строка.Параметры.Плательщик     = СтрокаИсточника.Контрагент;
			Строка.Параметры.ПлательщикСчет = СтрокаИсточника.КонтрагентНомерСчета;
			Строка.Параметры.Получатель     = СтрокаИсточника.Организация;
			Строка.Параметры.ПолучательСчет = СтрокаИсточника.ОрганизацияНомерСчета;
			Строка.Параметры.СуммаСписание  = "";
			Строка.Параметры.СуммаПоступление = СтрокаИсточника.СуммаДокумента;
			ИтогоСуммаП = ИтогоСуммаП + СтрокаИсточника.СуммаДокумента;
		КонецЕсли;
		
		Строка.Параметры.Документ = СтрокаИсточника.Документ;
		Индекс = Индекс + 1;
		Строка.Параметры.Индекс   = Индекс;
		
		ПолеОтчета.Вывести(Строка);
		
	КонецЦикла;
	
	Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;
	Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;
	
	ПолеОтчета.Вывести(Подвал);
	
	ПолеОтчета.ОтображатьГруппировки = Ложь;
	ПолеОтчета.ОтображатьЗаголовки   = Ложь;
	ПолеОтчета.ОтображатьСетку       = Ложь;
	ПолеОтчета.ТолькоПросмотр        = Истина;
	
КонецПроцедуры

// Процедура печатает отчет о загруженных платежных документах.
//
Процедура ПечатьОтчетаОЗагруженныхПлатежныхДокументах(ПолеОтчета, Источник, Организация, Импорт_РасчетныеСчета, Импорт_Заголовок) Экспорт
	
	ИмеетсяСекцияРасчСчет = Ложь;
	
	МакетОтчета = ПолучитьМакет("ОтчетОЗагруженныхПлатежныхДокументах");
	
	Шапка   = МакетОтчета.ПолучитьОбласть("Шапка");
	Строка  = МакетОтчета.ПолучитьОбласть("Строка");
	Подвал  = МакетОтчета.ПолучитьОбласть("Подвал");
	Остатки = МакетОтчета.ПолучитьОбласть("Остатки");
	НазвОрг = МакетОтчета.ПолучитьОбласть("НазваниеОрганизации");
	
	НазвОрг.Параметры.НазваниеОрганизации = Организация.Наименование;
	ПолеОтчета.Вывести(НазвОрг);
	
	Для каждого СтрокаСчета Из Импорт_РасчетныеСчета Цикл
		
		Если НЕ ПустаяСтрока(СтрокаСчета.ДатаНачала) Тогда
			
			Индекс                = 0;
			ИтогоСуммаП           = 0;
			ИтогоСуммаР           = 0;
			ИмеетсяСекцияРасчСчет = Истина;
			
			Шапка.Параметры.ИмяОтчета       = НСтр("ru='Отчет о загруженных документах';uk='Звіт про завантажені документи'");
			Шапка.Параметры.ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='по счету %1 с %2 по %3';uk='по рахунку %1 з %2 по %3'"),
				СтрокаСчета.РасчСчетОрг,
				СтрокаСчета.ДатаНачала,
				СтрокаСчета.ДатаКонца);

			ПолеОтчета.Вывести(Шапка);
			
			Отбор = Новый Структура;
			Отбор.Вставить("СчетОрганизации", ПоискБанковскогоСчета(СтрокаСчета.РасчСчетОрг));
			ОтборПоСчету = Источник.НайтиСтроки(Отбор);
			
			ДатаНачала = ПолучитьДатуИзСтроки(ДатаНачала, СтрокаСчета.ДатаНачала);
			ДатаКонца  = ПолучитьДатуИзСтроки(ДатаКонца, СтрокаСчета.ДатаКонца);
			
			Для каждого СтрокаИсточника Из Источник Цикл
				
				Если СтрокаИсточника.СуммаПоступило > 0
					И СтрокаИсточника.ДатаДок >= ДатаНачала И СтрокаИсточника.ДатаДок <= ДатаКонца Тогда
					
					Строка.Параметры.Контрагент       = СтрокаИсточника.Плательщик;
					Строка.Параметры.Счет             = СтрокаИсточника.ПлательщикСчет;
					Строка.Параметры.Договор          = СтрокаИсточника.Договор;
					Строка.Параметры.СуммаПоступление = СтрокаИсточника.СуммаПоступило;
					Строка.Параметры.СуммаСписание    = "";
					Строка.Параметры.Дата             = СтрокаИсточника.Дата;
					ИтогоСуммаП                       = ИтогоСуммаП + СтрокаИсточника.СуммаПоступило;
					
				ИначеЕсли СтрокаИсточника.СуммаСписано > 0
					И СтрокаИсточника.ДатаДок >= ДатаНачала И СтрокаИсточника.ДатаДок <= ДатаКонца Тогда
					
					Строка.Параметры.Контрагент       = СтрокаИсточника.Получатель;
					Строка.Параметры.Счет 		      = СтрокаИсточника.ПолучательСчет;
					Строка.Параметры.Договор          = СтрокаИсточника.Договор;
					Строка.Параметры.СуммаСписание    = СтрокаИсточника.СуммаСписано;
					Строка.Параметры.СуммаПоступление = "";
					Строка.Параметры.Дата             = СтрокаИсточника.Дата;
					ИтогоСуммаР                       = ИтогоСуммаР + СтрокаИсточника.СуммаСписано;
					
				Иначе
					Продолжить;
				КонецЕсли;
				
				Строка.Параметры.Номер             = СтрокаИсточника.Номер;
				Строка.Параметры.НазначениеПлатежа = СтрокаИсточника.НазначениеПлатежа;
				Индекс = Индекс + 1;
				
				ЕстьНезаполненныеРеквизиты = Ложь;
				
				Если Найти(СтрокаИсточника.Контрагент, НСтр("ru='Не найден';uk='Не знайдений'")) > 0 Тогда
					Строка.Область("R1C7:R1C7").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла; // стиль: Отрицательное число (красный 255,0,0)
					ЕстьНезаполненныеРеквизиты = Истина;
				КонецЕсли;
				
				Если Найти(СтрокаИсточника.СчетКонтрагента, НСтр("ru='Не найден';uk='Не знайдений'")) > 0 Тогда
					Строка.Область("R2C7:R2C7").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
					ЕстьНезаполненныеРеквизиты = Истина;
				КонецЕсли;
				
				Если Найти(СтрокаИсточника.Договор, НСтр("ru='Не найден';uk='Не знайдений'")) > 0 Тогда
					Строка.Область("R3C7:R3C7").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
					ЕстьНезаполненныеРеквизиты = Истина;
				КонецЕсли;
				
				Если СтрокаИсточника.НомерДокументаНекорректен Тогда
					Строка.Область("R1C4:R1C4").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
					ЕстьНезаполненныеРеквизиты = Истина;
				КонецЕсли;
				
				Док = СтрокаИсточника.Документ;
				Если ЗначениеЗаполнено(Док) Тогда
					Строка.Параметры.Документ        = Док;
					Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля; // стиль: Цвет редактирования (черный 0,0,0) 
				Иначе
					Строка.Параметры.Документ        = "Не загружен";
				КонецЕсли;
				
				Если ЕстьНезаполненныеРеквизиты Тогда
					Строка.Область("R1C5:R1C5").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
				КонецЕсли;
				
				Строка.Параметры.Индекс = Индекс;
				ПолеОтчета.Вывести(Строка);
				
			КонецЦикла;
			
			Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;
			Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;
			
			ПолеОтчета.Вывести(Подвал);
			
			Остатки.Параметры.Текст1 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Остаток на начало %1:';uk='Залишок на початок %1:'"), СтрокаСчета.ДатаНачала);
			Остатки.Параметры.Текст2 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Остаток на конец %1:';uk='Залишок на кінець %1:'"), СтрокаСчета.ДатаКонца);
			
			Если НЕ ПустаяСтрока(СтрокаСчета.НачальныйОстаток)
					И НЕ ЕстьНеЦифры(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаСчета.НачальныйОстаток, ".", ""), "-", ""), ",", "")) Тогда
				Остатки.Параметры.Сумма1 = Формат(Число(СтрокаСчета.НачальныйОстаток), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧРГ=,");
			Иначе
				Остатки.Параметры.Сумма1 = СтрокаСчета.НачальныйОстаток;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(СтрокаСчета.КонечныйОстаток)
					И НЕ ЕстьНеЦифры(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаСчета.КонечныйОстаток, ".", ""), "-", ""), ",", "")) Тогда
				Остатки.Параметры.Сумма2 = Формат(Число(СтрокаСчета.КонечныйОстаток), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧРГ=,");
			Иначе
				Остатки.Параметры.Сумма2 = СтрокаСчета.КонечныйОстаток;
			КонецЕсли;
			
			ПолеОтчета.Вывести(Остатки);
			
		КонецЕсли;

	КонецЦикла;

	Если НЕ ИмеетсяСекцияРасчСчет Тогда
		
		Для каждого СтрокаСчета Из Импорт_РасчетныеСчета Цикл
			
			Индекс      = 0;
			ИтогоСуммаП = 0;
			ИтогоСуммаР = 0;
			
			Шапка.Параметры.ИмяОтчета       = НСтр("ru='Отчет о загруженных документах';uk='Звіт про завантажені документи'");
			Шапка.Параметры.ОписаниеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='по счету %1 с %2 по %3';uk='по рахунку %1 з %2 по %3'"),
				СтрокаСчета.РасчСчетОрг,
				Импорт_Заголовок.ДатаНачала,
				Импорт_Заголовок.ДатаКонца);
			ПолеОтчета.Вывести(Шапка);
			
			Отбор = Новый Структура;
			Отбор.Вставить("СчетОрганизации", ПоискБанковскогоСчета(СтрокаСчета.РасчСчетОрг));
			ОтборПоСчету = Источник.НайтиСтроки(Отбор);
			
			Для каждого СтрокаИсточника Из Источник Цикл
				
				Если СтрокаИсточника.СуммаПоступило > 0 Тогда
					
					Строка.Параметры.Контрагент       = СтрокаИсточника.Плательщик;
					Строка.Параметры.Счет	          = СтрокаИсточника.ПлательщикСчет;
					Строка.Параметры.Договор          = СтрокаИсточника.Договор;
					Строка.Параметры.СуммаПоступление = СтрокаИсточника.СуммаПоступило;
					Строка.Параметры.СуммаСписание    = "";
					Строка.Параметры.Дата             = СтрокаИсточника.Дата;
					ИтогоСуммаП                       = ИтогоСуммаП + СтрокаИсточника.СуммаПоступило;
					
				ИначеЕсли СтрокаИсточника.СуммаСписано > 0  Тогда
					
					Строка.Параметры.Контрагент       = СтрокаИсточника.Получатель;
					Строка.Параметры.Счет 		      = СтрокаИсточника.ПолучательСчет;
					Строка.Параметры.Договор          = СтрокаИсточника.Договор;
					Строка.Параметры.СуммаСписание    = СтрокаИсточника.СуммаСписано;
					Строка.Параметры.СуммаПоступление = "";
					Строка.Параметры.Дата             = СтрокаИсточника.Дата;
					ИтогоСуммаР                       = ИтогоСуммаР + СтрокаИсточника.СуммаСписано;
					
				Иначе
					
					Продолжить;
					
				КонецЕсли;
				
				Строка.Параметры.Номер = СтрокаИсточника.Номер;
				Строка.Параметры.НазначениеПлатежа = СтрокаИсточника.НазначениеПлатежа;
				Индекс = Индекс + 1;
				
				ЕстьНезаполненныеРеквизиты = Ложь;
				
				Если Найти(СтрокаИсточника.Контрагент, НСтр("ru='Не найден';uk='Не знайдений'")) > 0 Тогда
					Строка.Область("R1C7:R1C7").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла; // стиль: Отрицательное число (красный 255,0,0)
					ЕстьНезаполненныеРеквизиты = Истина;
				КонецЕсли;
				
				Если Найти(СтрокаИсточника.СчетКонтрагента, НСтр("ru='Не найден';uk='Не знайдений'")) > 0 Тогда
					Строка.Область("R2C7:R2C7").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
					ЕстьНезаполненныеРеквизиты = Истина;
				КонецЕсли;
				
				Если Найти(СтрокаИсточника.Договор, НСтр("ru='Не найден';uk='Не знайдений'")) > 0 Тогда
					Строка.Область("R3C7:R3C7").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
					ЕстьНезаполненныеРеквизиты = Истина;
				КонецЕсли;
				
				Если СтрокаИсточника.НомерДокументаНекорректен Тогда
					Строка.Область("R1C4:R1C4").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
					ЕстьНезаполненныеРеквизиты = Истина;
				КонецЕсли;
				
				Док = СтрокаИсточника.Документ;
				Если ЗначениеЗаполнено(Док) Тогда
					Строка.Параметры.Документ        = Док;
					Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля; // стиль: Цвет редактирования (черный 0,0,0) 
				Иначе
					Строка.Параметры.Документ        = НСтр("ru='Не загружен';uk='Не завантажений'");
				КонецЕсли;
				
				Если ЕстьНезаполненныеРеквизиты Тогда
					Строка.Область("R1C5:R1C5").ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
				КонецЕсли;
				
				Строка.Параметры.Индекс = Индекс;
				ПолеОтчета.Вывести(Строка);
				
			КонецЦикла;
			
			Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;
			Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;
			
			ПолеОтчета.Вывести(Подвал);
			
			Остатки.Параметры.Текст1 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Остаток на начало %1:';uk='Залишок на початок %1:'"), Импорт_Заголовок.ДатаНачала);
			Остатки.Параметры.Текст2 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Остаток на конец %1:';uk='Залишок на кінець %1:'"), Импорт_Заголовок.ДатаКонца);
			Остатки.Параметры.Сумма1 = "";
			Остатки.Параметры.Сумма2 = "";
			ПолеОтчета.Вывести(Остатки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПолеОтчета.ОтображатьГруппировки = Ложь;
	ПолеОтчета.ОтображатьЗаголовки   = Ложь;
	ПолеОтчета.ОтображатьСетку       = Ложь;
	ПолеОтчета.ТолькоПросмотр        = Истина;
	
КонецПроцедуры // ПечатьОтчетаОЗагруженныхПлатежныхДокументах

//////////////////////////////////////////////////////////

Процедура ДобавитьСлужебныеКолонки(ДокументыДляИмпорта)
	
	// Если колонки уже существуют, то ничего не делаем
	Если ДокументыДляИмпорта.Колонки.Найти("Исходящий") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыДляИмпорта.Колонки.Добавить("Исходящий",                Новый ОписаниеТипов("Булево"));
	ДокументыДляИмпорта.Колонки.Добавить("ЕстьДатаПлатежа",          Новый ОписаниеТипов("Булево"));
	ДокументыДляИмпорта.Колонки.Добавить("ЭтоПлатежноеПоручение",    Новый ОписаниеТипов("Булево"));
	ДокументыДляИмпорта.Колонки.Добавить("НайтиКонтрагента",         Новый ОписаниеТипов("Булево"));
	ДокументыДляИмпорта.Колонки.Добавить("СчетДляПоискаДок",         Новый ОписаниеТипов("Строка"));
	ДокументыДляИмпорта.Колонки.Добавить("ОКПОДляПоискаДок",          Новый ОписаниеТипов("Строка"));
	ДокументыДляИмпорта.Колонки.Добавить("ВидОперацииДокумента",     Новый ОписаниеТипов("Строка"));
	ДокументыДляИмпорта.Колонки.Добавить("СчетКонтрагентаДляПоиска", Новый ОписаниеТипов("Строка"));
	ДокументыДляИмпорта.Колонки.Добавить("ОКПОКонтрагента",           Новый ОписаниеТипов("Строка"));
	ДокументыДляИмпорта.Колонки.Добавить("ИмяКонтрагента",           Новый ОписаниеТипов("Строка"));
	
КонецПроцедуры

Функция ПолучитьСписокСвоихСчетов(Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	БанковскиеСчета.Банк.Код КАК МФО
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Организация";
	
	УстановитьПривилегированныйРежим(Истина);
	СписокБановскихСчетов = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	СписокБановскихСчетов.Индексы.Добавить("НомерСчета");
	СписокБановскихСчетов.Индексы.Добавить("МФО");
	
	Возврат СписокБановскихСчетов;
	
КонецФункции

Функция ПолучитьТаблицуСвязей()
	
	ТаблицаСвязейВидаОперацииВидДоговора = Новый ТаблицаЗначений;
	ТаблицаСвязейВидаОперацииВидДоговора.Колонки.Добавить("ВидОперации",
		Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийПоступлениеДенежныхСредств, ПеречислениеСсылка.ВидыОперацийСписаниеДенежныхСредств"));
	ТаблицаСвязейВидаОперацииВидДоговора.Колонки.Добавить("ВидДоговора", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДоговоровКонтрагентов"));
	ТаблицаСвязейВидаОперацииВидДоговора.Колонки.Добавить("Приоритет",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	СтрокаСвязей.Приоритет   = 0;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	СтрокаСвязей.Приоритет   = 1;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	СтрокаСвязей.Приоритет   = 2;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратДенежныхСредствПоставщиком;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	СтрокаСвязей.Приоритет   = 0;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратДенежныхСредствПоставщиком;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	СтрокаСвязей.Приоритет   = 1;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратДенежныхСредствПоставщиком;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	СтрокаСвязей.Приоритет   = 2;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	СтрокаСвязей.Приоритет   = 0;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	СтрокаСвязей.Приоритет   = 0;
	
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	СтрокаСвязей.Приоритет   = 0;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	СтрокаСвязей.Приоритет   = 1;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	СтрокаСвязей.Приоритет   = 2;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратДенежныхСредствПокупателю;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	СтрокаСвязей.Приоритет   = 0;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратДенежныхСредствПокупателю;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером;
	СтрокаСвязей.Приоритет   = 1;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратДенежныхСредствПокупателю;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	СтрокаСвязей.Приоритет   = 2;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймамСКонтрагентами;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	СтрокаСвязей.Приоритет   = 0;
	СтрокаСвязей = ТаблицаСвязейВидаОперацииВидДоговора.Добавить();
	СтрокаСвязей.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
	СтрокаСвязей.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	СтрокаСвязей.Приоритет   = 0;
	
	Возврат ТаблицаСвязейВидаОперацииВидДоговора;
	
КонецФункции

//////////////////////////////////////////////////////////

Процедура ОпределитьСсылочныеДанные(КешСвойствДокументов, ДокументыДляИмпорта, СтруктураДанныхИмпорта,
		Организация, БанковскийСчет, ДеревоКонтрагентов, НастройкиПоУмолчаниюДляДокументов,
		СоздаватьНенайденныеЭлементы, СтекОповещений) Экспорт
	
	НомерСтроки = 0;
	НомерСчета  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "НомерСчета");
	
	СписокБанковскихСчетовОрганизации = ПолучитьСписокСвоихСчетов(Организация);
	
	ДобавитьСлужебныеКолонки(ДокументыДляИмпорта);
	
	// Формируем объектные структуры данных.
	Для каждого СтрокаДокумента Из ДокументыДляИмпорта Цикл
		// Последовательно обрабатываем каждую загруженную строку.
		
		// Распознаем реквизиты.
		// Если в файле находятся выписки пл. документов по нескольким счетам, то распознаем и отображаем
		// только те, которые выгружены по указанному банковскому счету.
		Если СтрокаДокумента.ПлательщикСчет = НомерСчета
			ИЛИ СтрокаДокумента.ПолучательСчет = НомерСчета Тогда
			
			ПодготовитьДанныеВСтрокедокумента(СтрокаДокумента,
				Организация, БанковскийСчет, НомерСчета, СписокБанковскихСчетовОрганизации, НастройкиПоУмолчаниюДляДокументов);
			
			НомерСтроки = НомерСтроки + 1;
			СтрокаДокумента.НомерСтроки = НомерСтроки;
			// Для каждого реквизита (= колонка) надо проверить на пустое значение.
			Для каждого КолонкаИмпорта Из ДокументыДляИмпорта.Колонки Цикл
				ПроверитьНаПустоеЗначениеИмпорта(КешСвойствДокументов,
					СтрокаДокумента, КолонкаИмпорта.Имя, СтруктураДанныхИмпорта[КолонкаИмпорта.Имя]);
			КонецЦикла;
			
			Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("Строка") ИЛИ
				ТипЗнч(СтрокаДокумента.СчетКонтрагента) = Тип("Строка") ИЛИ
				ТипЗнч(СтрокаДокумента.Договор) = Тип("Строка") Тогда
				
				// Добавляем реквизиты в табличную часть для дальнейшего использования.
				СписокНенайденных(СтрокаДокумента, ДеревоКонтрагентов);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
				Если СтрокаДокумента.Проведен Тогда
					СтрокаДокумента.СостояниеДокумента = 1;
				Иначе 
					СтрокаДокумента.СостояниеДокумента = 0;
				КонецЕсли; 
			Иначе
				СтрокаДокумента.СостояниеДокумента     = 3;
			КонецЕсли;
			
		Иначе
			// Остальные помечаем для последующего удаления.
			СтрокаДокумента.НомерСтроки = 0;
		КонецЕсли;
	КонецЦикла;
	
	РаспознатьДанные(ДокументыДляИмпорта, ДеревоКонтрагентов,
				Организация, БанковскийСчет, НомерСчета,
				СоздаватьНенайденныеЭлементы, СтекОповещений);
	
	// Удалим ненужные строки из таблицы.
	Количество = ДокументыДляИмпорта.Количество() - 1;
	Для Ном = 0 По Количество Цикл
		Если ДокументыДляИмпорта[Количество - Ном].НомерСтроки = 0 Тогда
			ДокументыДляИмпорта.Удалить(Количество - Ном);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура РаспознатьДанные(ДокументыДляИмпорта, ДеревоКонтрагентов,
		Организация, БанковскийСчет, НомерСчета,
		СоздаватьНенайденныеЭлементы, СтекОповещений)
		
	Если ДокументыДляИмпорта.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	ВалютаВзаиморасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "ВалютаДенежныхСредств");
	Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
	КонецЕсли;
		
	//Если документ уже есть в ИБ, то берем все данные из него.
	СоответствиеРеквизитовПлатежки = Новый Соответствие;
	
	МассивСтрокСКонтрагентами = Новый Массив;
	НайденныеКонтрагенты      = Новый Соответствие;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	МассивПлатежек = ДокументыДляИмпорта.НайтиСтроки(
		Новый Структура("Исходящий, ЭтоПлатежноеПоручение", Истина, Истина));
	Если МассивПлатежек.Количество() > 0 Тогда
		ТаблицаПлатежек = ДокументыДляИмпорта.Скопировать(МассивПлатежек,
			"НомерСтроки, ДатаПлПоручения, ПолучательСчет");
		
		Запрос.УстановитьПараметр("СчетОрганизации", БанковскийСчет);
		Запрос.УстановитьПараметр("ТаблицаПлатежек", ТаблицаПлатежек);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПлатежек.НомерСтроки,
		|	ТаблицаПлатежек.ДатаПлПоручения КАК ДатаПлПоручения,
		|	ТаблицаПлатежек.ПолучательСчет
		|ПОМЕСТИТЬ ВТ_ТаблицаПлатежек
		|ИЗ
		|	&ТаблицаПлатежек КАК ТаблицаПлатежек
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДатаПлПоручения,
		|	ТаблицаПлатежек.ПолучательСчет";
		
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Док.Ссылка,
		|	Док.Дата,
		|	Док.Номер,
		|	Док.Контрагент,
		|	Док.СчетКонтрагента,
		|	Док.ДоговорКонтрагента,
		|	ЕСТЬNULL(Док.ДоговорКонтрагента.ВидДоговора, НЕОПРЕДЕЛЕНО) КАК ВидДоговора,
		|	Док.СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Док.ДокументОснование) = ТИП(Документ.СписаниеСРасчетногоСчета)
		|				И Док.ДокументОснование <> ЗНАЧЕНИЕ(Документ.СписаниеСРасчетногоСчета.ПустаяСсылка)
		|			ТОГДА Док.ДокументОснование
		|		ИНАЧЕ ЕСТЬNULL(СписаниеСРасчетногоСчета.Ссылка, НЕОПРЕДЕЛЕНО)
		|	КОНЕЦ КАК ДокументОснование,
		|	ТаблицаПлатежек.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Док.ДокументОснование) = ТИП(Документ.СписаниеСРасчетногоСчета)
		|				И Док.ДокументОснование <> ЗНАЧЕНИЕ(Документ.СписаниеСРасчетногоСчета.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(Док.ДокументОснование КАК Документ.СписаниеСРасчетногоСчета).Проведен
		|		ИНАЧЕ СписаниеСРасчетногоСчета.Проведен
		|	КОНЕЦ КАК ДокументОснованиеПроведен,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Док.ДокументОснование) = ТИП(Документ.СписаниеСРасчетногоСчета)
		|				И Док.ДокументОснование <> ЗНАЧЕНИЕ(Документ.СписаниеСРасчетногоСчета.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(Док.ДокументОснование КАК Документ.СписаниеСРасчетногоСчета).НомерВходящегоДокумента
		|		ИНАЧЕ СписаниеСРасчетногоСчета.НомерВходящегоДокумента
		|	КОНЕЦ КАК НомерВходящегоДокумента,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Док.ДокументОснование) = ТИП(Документ.СписаниеСРасчетногоСчета)
		|				И Док.ДокументОснование <> ЗНАЧЕНИЕ(Документ.СписаниеСРасчетногоСчета.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(Док.ДокументОснование КАК Документ.СписаниеСРасчетногоСчета).ДатаВходящегоДокумента
		|		ИНАЧЕ СписаниеСРасчетногоСчета.ДатаВходящегоДокумента
		|	КОНЕЦ КАК ДатаВходящегоДокумента,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Док.ДокументОснование) = ТИП(Документ.СписаниеСРасчетногоСчета)
		|				И Док.ДокументОснование <> ЗНАЧЕНИЕ(Документ.СписаниеСРасчетногоСчета.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(Док.ДокументОснование КАК Документ.СписаниеСРасчетногоСчета).ВидОперации
		|		ИНАЧЕ СписаниеСРасчетногоСчета.ВидОперации
		|	КОНЕЦ КАК ДокументОснованиеВидОперации,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(Док.ДокументОснование) = ТИП(Документ.СписаниеСРасчетногоСчета)
		|				И Док.ДокументОснование <> ЗНАЧЕНИЕ(Документ.СписаниеСРасчетногоСчета.ПустаяСсылка)
		|			ТОГДА ВЫРАЗИТЬ(Док.ДокументОснование КАК Документ.СписаниеСРасчетногоСчета).СчетКонтрагента
		|		ИНАЧЕ СписаниеСРасчетногоСчета.СчетКонтрагента
		|	КОНЕЦ КАК ДокументОснованиеСчетКонтрагента,
		|	ВЫБОР
		|		КОГДА Док.Проведен
		|			ТОГДА 0
		|		КОГДА Док.ПометкаУдаления
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	ВТ_ТаблицаПлатежек КАК ТаблицаПлатежек
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК Док
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
		|			ПО (ТИПЗНАЧЕНИЯ(СписаниеСРасчетногоСчета.ДокументОснование) = ТИП(Документ.ПлатежноеПоручение))
		|				И Док.Ссылка = СписаниеСРасчетногоСчета.ДокументОснование
		|		ПО ТаблицаПлатежек.ПолучательСчет = Док.СчетКонтрагента.НомерСчета
		|			И (ТаблицаПлатежек.ДатаПлПоручения = НАЧАЛОПЕРИОДА(Док.Дата, ДЕНЬ))
		|ГДЕ
		|	Док.Организация = &Организация
		|	И Док.СчетОрганизации = &СчетОрганизации
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	Приоритет";
		
		ДокументыДляИмпорта.Индексы.Добавить("НомерСтроки");
		
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			РеквизитыПлатежки = Новый Структура("Ссылка, Контрагент, СчетКонтрагента, ДоговорКонтрагента,
				|ВидДоговора, СтавкаНДС,
				|ДокументОснование, ДокументОснованиеПроведен, ДокументОснованиеВидОперации, ДокументОснованиеСчетКонтрагента,
				|НомерВходящегоДокумента, ДатаВходящегоДокумента");
				
			СтрокаДокумента = ДокументыДляИмпорта.Найти(Выборка.НомерСтроки, "НомерСтроки");
			Пока Выборка.Следующий() Цикл
				НомерДок     = СокрЛП(Выборка.Номер);
				ВыборкаНомер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.Номер, Истина, Истина);
				
				НомераРавны = ВыборкаНомер = СтрокаДокумента.НомерДок;
				Если НЕ НомераРавны Тогда
					ЧислоНомерДок        = ПолучитьЧислоИзСтроки(НомерДок);
					ЧислоВСтрокеНомерДок = ПолучитьЧислоИзСтроки(СтрокаДокумента.НомерДок);
					НомераРавны          = ЧислоНомерДок = ЧислоВСтрокеНомерДок;
				КонецЕсли;
				
				Если НомераРавны Тогда
					ЗаполнитьЗначенияСвойств(РеквизитыПлатежки, Выборка);
					СтрокаДокумента.ДокументОснование = РеквизитыПлатежки.Ссылка;
					
					Если ЗначениеЗаполнено(РеквизитыПлатежки.ДокументОснование) И
						ТипЗнч(РеквизитыПлатежки.ДокументОснование) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда 
						
						Документ = РеквизитыПлатежки.ДокументОснование;
						СтрокаДокумента.Документ        = Документ;
						СтрокаДокумента.Проведен        = РеквизитыПлатежки.ДокументОснованиеПроведен;
						СтрокаДокумента.Номер           = РеквизитыПлатежки.НомерВходящегоДокумента;
						СтрокаДокумента.ДатаДок         = РеквизитыПлатежки.ДатаВходящегоДокумента; 
						СтрокаДокумента.ВидОперации     = РеквизитыПлатежки.ДокументОснованиеВидОперации;
						СтрокаДокумента.СчетКонтрагента = РеквизитыПлатежки.ДокументОснованиеСчетКонтрагента;
						СтрокаДокумента.СостояниеДокумента = ?(СтрокаДокумента.Проведен, 1, 0);
						
						Если Документ.РасшифровкаПлатежа.Количество() > 0 Тогда
							СтрокаДокумента.СтатьяДДС   = Документ.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств; 
							СтрокаДокумента.Договор     = Документ.РасшифровкаПлатежа[0].ДоговорКонтрагента;
							СтрокаДокумента.СтавкаНДС   = Документ.РасшифровкаПлатежа[0].СтавкаНДС;
						КонецЕсли;
						
						Если Документ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
							СтрокаДокумента.Контрагент  = Документ.Организация;
						Иначе
							СтрокаДокумента.Контрагент  = Документ.Контрагент;
						КонецЕсли;
					Иначе
						ЗаполнитьЗначенияСвойств(СтрокаДокумента, РеквизитыПлатежки,, "ДокументОснование");
						СтрокаДокумента.Договор   = Выборка.ДоговорКонтрагента;
						СтрокаДокумента.СтатьяДДС = Выборка.СтатьяДвиженияДенежныхСредств;
					КонецЕсли;
					
					СоответствиеРеквизитовПлатежки.Вставить(Выборка.НомерСтроки, РеквизитыПлатежки);
					
					Если ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
						НайденныеКонтрагенты.Вставить(Выборка.НомерСтроки, СтрокаДокумента.Контрагент);
					КонецЕсли;
					
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//3) Найдем ранее загруженный (введенный вручную) документ.
	//Реквизиты для поиска: Вид документа, Дата, Номер, Номер счета.
	
	МассивПлатежейПолучено = ДокументыДляИмпорта.НайтиСтроки(
		Новый Структура("ЕстьДатаПлатежа, ВидДокумента", Истина, "ПоступлениеНаРасчетныйСчет"));
	МассивПлатежейСписано = ДокументыДляИмпорта.НайтиСтроки(
		Новый Структура("ЕстьДатаПлатежа, ВидДокумента", Истина, "СписаниеСРасчетногоСчета"));
	Если МассивПлатежейПолучено.Количество() > 0 ИЛИ МассивПлатежейСписано.Количество() > 0 Тогда
		Если МассивПлатежейПолучено.Количество() > 0 Тогда
			МассивСтрок = МассивПлатежейПолучено;
			Если МассивПлатежейСписано.Количество() > 0 Тогда
				Для инд = 0 По МассивПлатежейСписано.ВГраница() Цикл
					МассивСтрок.Добавить(МассивПлатежейСписано[инд]);
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли МассивПлатежейСписано.Количество() > 0 Тогда
			МассивСтрок = МассивПлатежейСписано;
		КонецЕсли;
		
		ТаблицаСтрок = ДокументыДляИмпорта.Скопировать(МассивСтрок,
			"НомерСтроки, НомерДок, Номер, НомерДокументаНекорректен, ДатаДок, ДатаПлПоручения, ПолучательСчет, ПолучательОКПО, ПлательщикСчет, ПлательщикОКПО, Исходящий, Документ");
		
		ТаблицаДат = ТаблицаСтрок.Скопировать(, "ДатаДок, ДатаПлПоручения");
		ТаблицаДат.Сортировать("ДатаДок");
		МаксимальнаяДата = ТаблицаДат[ТаблицаДат.Количество() - 1].ДатаДок;
		МинимальнаяДата  = МаксимальнаяДата;
		Для каждого СтрокаТаблицы Из ТаблицаДат Цикл
			Если СтрокаТаблицы.ДатаДок = '00010101' Тогда
				Продолжить;
			КонецЕсли;
			
			Если МинимальнаяДата <= СтрокаТаблицы.ДатаДок Тогда
				Прервать;
			Иначе
				МинимальнаяДата = СтрокаТаблицы.ДатаДок;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаДат.Сортировать("ДатаПлПоручения");
		МаксимальнаяДатаПлПоручения = ТаблицаДат[ТаблицаДат.Количество() - 1].ДатаПлПоручения;
		МинимальнаяДатаПлПоручения  = МаксимальнаяДатаПлПоручения;
		Для каждого СтрокаТаблицы Из ТаблицаДат Цикл
			Если СтрокаТаблицы.ДатаПлПоручения = '00010101' Тогда
				Продолжить;
			КонецЕсли;
			
			Если МинимальнаяДатаПлПоручения <= СтрокаТаблицы.ДатаПлПоручения Тогда
				Прервать;
			Иначе
				МинимальнаяДатаПлПоручения = СтрокаТаблицы.ДатаПлПоручения;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//При наличии нескольких предпочтении отдается первому с совпадающим номером счета
	ЗапросПоискаДокумента = Новый Запрос;
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлатежныеДокументы.Ссылка КАК Ссылка,
	|	ПлатежныеДокументы.Проведен КАК Проведен,
	|	ПлатежныеДокументы.НомерВходящегоДокумента КАК Номер,
	|	ПлатежныеДокументы.Дата КАК Дата,
	|	НАЧАЛОПЕРИОДА(ПлатежныеДокументы.Дата, ДЕНЬ) КАК ДатаНачалоДня,
	|	НАЧАЛОПЕРИОДА(ПлатежныеДокументы.ДатаВходящегоДокумента, ДЕНЬ) КАК ДатаНачалоДняПл,
	|	ЕСТЬNULL(ПлатежныеДокументы.СчетКонтрагента.НомерСчета, """") КАК КонтрагентНомерСчета,
	|	ПлатежныеДокументы.Контрагент.КодПоЕДРПОУ КАК КонтрагентОКПО,
	|	ПлатежныеДокументы.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ПлатежныеДокументы.Проведен
	|			ТОГДА 0
	|		КОГДА ПлатежныеДокументы.ПометкаУдаления
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПлатежныеДокументы
	|ГДЕ
	|	(НАЧАЛОПЕРИОДА(ПлатежныеДокументы.Дата, ДЕНЬ) МЕЖДУ &МинимальнаяДата И &МаксимальнаяДата
	|			ИЛИ НАЧАЛОПЕРИОДА(ПлатежныеДокументы.ДатаВходящегоДокумента, ДЕНЬ) МЕЖДУ &МинДатаПлПоручения И &МаксДатаПлПоручения)
	|	И ПлатежныеДокументы.СчетОрганизации = &СчетОрганизации
	|	И ПлатежныеДокументы.Организация = &Организация";
	
	ТекстЗапроса = "";
	Если МассивПлатежейПолучено.Количество() > 0 Тогда
		ТекстЗапроса = ШаблонТекстаЗапроса;
	КонецЕсли;
	
	Если МассивПлатежейСписано.Количество() > 0 Тогда
		ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "ПоступлениеНаРасчетныйСчет", "СписаниеСРасчетногоСчета");
		Если ТекстЗапроса <> "" Тогда
			ШаблонТекстаЗапроса = "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|" +
			СтрЗаменить(ШаблонТекстаЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ШаблонТекстаЗапроса;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	КонтрагентНомерСчета УБЫВ,
		|	КонтрагентОКПО УБЫВ,
		|	Приоритет";
		
		ЗапросПоискаДокумента.Текст = ТекстЗапроса;
		
		ЗапросПоискаДокумента.УстановитьПараметр("МинимальнаяДата",     МинимальнаяДата);
		ЗапросПоискаДокумента.УстановитьПараметр("МаксимальнаяДата",    МаксимальнаяДата);
		ЗапросПоискаДокумента.УстановитьПараметр("МинДатаПлПоручения",  МинимальнаяДатаПлПоручения);
		ЗапросПоискаДокумента.УстановитьПараметр("МаксДатаПлПоручения", МаксимальнаяДатаПлПоручения);
		ЗапросПоискаДокумента.УстановитьПараметр("Организация",         Организация);
		ЗапросПоискаДокумента.УстановитьПараметр("СчетОрганизации",     БанковскийСчет);
		
		ТаблицаДокументовИзБазы = ЗапросПоискаДокумента.Выполнить().Выгрузить();
		ТаблицаДокументовИзБазы.Индексы.Добавить("ДатаНачалоДня");
		ТаблицаДокументовИзБазы.Индексы.Добавить("ДатаНачалоДняПл");
		
		Для каждого СтрокаДокумента Из ТаблицаСтрок Цикл
			// часть строк заполнили из платежек, их обрабатывать не нужно
			Если СоответствиеРеквизитовПлатежки.Получить(СтрокаДокумента.НомерСтроки) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			РеквизитыПлатежки = Новый Структура("Ссылка, Контрагент, СчетКонтрагента, ДоговорКонтрагента,
				|ВидДоговора, СтавкаНДС,
				|ДокументОснование");
			
			ДлинаНомера = СтрДлина(СтрокаДокумента.НомерДок);
			ДлинаНомера = ?(ДлинаНомера < 6, 6, ДлинаНомера);
			
			МассивСтрокПоДню = ТаблицаДокументовИзБазы.НайтиСтроки(Новый Структура("ДатаНачалоДня", СтрокаДокумента.ДатаДок));
			ИндексСтрок = Новый Соответствие;
			Для инд = 0 По МассивСтрокПоДню.ВГраница() Цикл
				ИндексСтрок.Вставить(ТаблицаДокументовИзБазы.Индекс(МассивСтрокПоДню[инд]), МассивСтрокПоДню[инд]);
			КонецЦикла;
			
			МассивСтрокПоДнюПл = ТаблицаДокументовИзБазы.НайтиСтроки(Новый Структура("ДатаНачалоДняПл", СтрокаДокумента.ДатаПлПоручения));
			Для инд = 0 По МассивСтрокПоДнюПл.ВГраница() Цикл
				Если ИндексСтрок[ТаблицаДокументовИзБазы.Индекс(МассивСтрокПоДнюПл[инд])] = Неопределено Тогда
					МассивСтрокПоДню.Добавить(МассивСтрокПоДнюПл[инд]);
					ИндексСтрок.Вставить(ТаблицаДокументовИзБазы.Индекс(МассивСтрокПоДнюПл[инд]), МассивСтрокПоДнюПл[инд]);
				КонецЕсли;
			КонецЦикла;
			
			Если МассивСтрокПоДню.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СчетДляПоискаДок = ?(СтрокаДокумента.Исходящий, СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПлательщикСчет);
			ОКПОДляПоискаДок  = ?(СтрокаДокумента.Исходящий, СтрокаДокумента.ПолучательОКПО,  СтрокаДокумента.ПлательщикОКПО);
			
			ДокументНайден = Ложь;
			КоличествоДок  = 0;
			Для инд = 0 По МассивСтрокПоДню.ВГраница() Цикл
				Результат    = МассивСтрокПоДню[инд];
				ВыборкаНомер = СокрЛ(Прав(СокрП(Результат.Номер), ДлинаНомера));
				
				ЕстьРеквизитДляПроверки = ЗначениеЗаполнено(Результат.КонтрагентНомерСчета) ИЛИ ЗначениеЗаполнено(Результат.КонтрагентОКПО);
				РСРавны  = Результат.КонтрагентНомерСчета = СчетДляПоискаДок
					ИЛИ НЕ ЗначениеЗаполнено(Результат.КонтрагентНомерСчета);
				ОКПОРавны = Результат.КонтрагентОКПО = ОКПОДляПоискаДок
					ИЛИ НЕ ЗначениеЗаполнено(Результат.КонтрагентОКПО);
				
				Если ВыборкаНомер = СтрокаДокумента.НомерДок
					И ЕстьРеквизитДляПроверки И РСРавны И ОКПОРавны Тогда
					
					Если КоличествоДок = 0 Тогда
						СтрокаИсходногоДокумента = ДокументыДляИмпорта.Найти(СтрокаДокумента.НомерСтроки, "НомерСтроки");
						СтрокаИсходногоДокумента.Документ = Результат.Ссылка;
						СтрокаИсходногоДокумента.Проведен = Результат.Проведен;
						СтрокаИсходногоДокумента.НомерДок = Результат.Номер;
						СтрокаИсходногоДокумента.ДатаДок  = Результат.Дата;
						
						ДокументНайден = ЗначениеЗаполнено(СтрокаИсходногоДокумента.Документ);
					КонецЕсли;
					
					КоличествоДок = КоличествоДок + 1;
				КонецЕсли;
			КонецЦикла;
			
			Если КоличествоДок > 1 Тогда
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='В информационной базе найдено несколько (%1) соответствующих документов!';uk='В інформаційній базі знайдено кілька (%1) відповідних документів!'"), КоличествоДок);
				ДобавитьЗамечание(СтрокаИсходногоДокумента, 1, ОписаниеОшибки);
			КонецЕсли;
			
			//Если документ уже есть в ИБ, то берем все данные из него.
			Если ДокументНайден Тогда
				Документ = СтрокаИсходногоДокумента.Документ; 
				СтрокаИсходногоДокумента.ВидОперации = Документ.ВидОперации; 
				Если Документ.РасшифровкаПлатежа.Количество() > 0 Тогда
					СтрокаИсходногоДокумента.СтатьяДДС = Документ.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств; 
					СтрокаИсходногоДокумента.Договор = Документ.РасшифровкаПлатежа[0].ДоговорКонтрагента;
				КонецЕсли;
				
				СтрокаИсходногоДокумента.СчетКонтрагента = Документ.СчетКонтрагента;
				СтрокаИсходногоДокумента.СчетОрганизации = БанковскийСчет;
				СтрокаИсходногоДокумента.СостояниеДокумента  = ?(СтрокаИсходногоДокумента.Проведен, 1, 0);
				
				Если Документ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
					СтрокаИсходногоДокумента.Контрагент = Документ.Организация;
				Иначе
					СтрокаИсходногоДокумента.Контрагент = Документ.Контрагент;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаИсходногоДокумента.Контрагент) Тогда
					НайденныеКонтрагенты.Вставить(СтрокаИсходногоДокумента.НомерСтроки, СтрокаИсходногоДокумента.Контрагент);
				КонецЕсли;
				
				СтрокаИсходногоДокумента.ДокументОснование = Документ.ДокументОснование;
				РеквизитыПлатежки.Ссылка = Документ.ДокументОснование;
				ЗаполнитьЗначенияСвойств(РеквизитыПлатежки, Документ);
				СоответствиеРеквизитовПлатежки.Вставить(СтрокаИсходногоДокумента.НомерСтроки, РеквизитыПлатежки);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//6 и 7) Определим контрагента и р/с контрагента
	
	МассивОКПО            = Новый Массив;
	МассивНомеровСчетов  = Новый Массив;
	МассивСтрокКУдалению = Новый Массив;
	ТаблицаКонтрагентов  = ДокументыДляИмпорта.Скопировать(,
		"НомерСтроки, СчетКонтрагентаДляПоиска, ОКПОКонтрагента, ИмяКонтрагента");
	
	Для каждого СтрокаДокумента Из ТаблицаКонтрагентов Цикл
		Если СоответствиеРеквизитовПлатежки.Получить(СтрокаДокумента.НомерСтроки) <> Неопределено Тогда
			МассивСтрокКУдалению.Добавить(СтрокаДокумента);
		ИначеЕсли ПустаяСтрока(СтрокаДокумента.СчетКонтрагентаДляПоиска)
			И ПустаяСтрока(СтрокаДокумента.ОКПОКонтрагента)
			И ПустаяСтрока(СтрокаДокумента.ИмяКонтрагента) Тогда
			МассивСтрокКУдалению.Добавить(СтрокаДокумента);
		Иначе
			Если НЕ ПустаяСтрока(СтрокаДокумента.ОКПОКонтрагента) Тогда
				МассивОКПО.Добавить(СтрокаДокумента.ОКПОКонтрагента)
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(СтрокаДокумента.СчетКонтрагентаДляПоиска) Тогда
				МассивНомеровСчетов.Добавить(СтрокаДокумента.СчетКонтрагентаДляПоиска)
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для инд = 0 По МассивСтрокКУдалению.ВГраница() Цикл
		ТаблицаКонтрагентов.Удалить(МассивСтрокКУдалению[инд]);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаКонтрагентов", ТаблицаКонтрагентов);
	Запрос.УстановитьПараметр("СписокОКПО",           МассивОКПО);
	Запрос.УстановитьПараметр("СписокСчетов",        МассивНомеровСчетов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаКонтрагентов.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаКонтрагентов.СчетКонтрагентаДляПоиска КАК СТРОКА(34)) КАК СчетКонтрагентаДляПоиска,
	|	ВЫРАЗИТЬ(ТаблицаКонтрагентов.ОКПОКонтрагента КАК СТРОКА(12)) КАК ОКПОКонтрагента,
	|	ВЫРАЗИТЬ(ТаблицаКонтрагентов.ИмяКонтрагента КАК СТРОКА(100)) КАК ИмяКонтрагента
	|ПОМЕСТИТЬ ТаблицаКонтрагентов
	|ИЗ
	|	&ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОКПОКонтрагента,
	|	СчетКонтрагентаДляПоиска";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(БанковскиеСчета.Владелец КАК Справочник.Контрагенты) КАК Контрагент,
	|	ВЫРАЗИТЬ(БанковскиеСчета.Владелец КАК Справочник.Контрагенты).КодПоЕДРПОУ КАК ОКПО,
	|	ТаблицаКонтрагентов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаКонтрагентов.СчетКонтрагентаДляПоиска КАК НомерСчета,
	|	БанковскиеСчета.Ссылка КАК БанковскийСчет,
	|	ВЫРАЗИТЬ(БанковскиеСчета.Владелец КАК Справочник.Контрагенты).Наименование КАК ВладелецНаименование,
	|	ВЫРАЗИТЬ(БанковскиеСчета.Владелец КАК Справочник.Контрагенты).НаименованиеПолное КАК ВладелецНаименованиеПолное
	|ПОМЕСТИТЬ ВТ_БанковскиеСчета
	|ИЗ
	|	ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО ТаблицаКонтрагентов.СчетКонтрагентаДляПоиска = БанковскиеСчета.НомерСчета
	|ГДЕ
	|	ТаблицаКонтрагентов.СчетКонтрагентаДляПоиска <> """"
	|	И БанковскиеСчета.НомерСчета В(&СписокСчетов)
	|	И ТИПЗНАЧЕНИЯ(БанковскиеСчета.Владелец) = ТИП(Справочник.Контрагенты)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВладелецНаименование,
	|	ВладелецНаименованиеПолное
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.КодПоЕДРПОУ КАК ОКПО,
	|	ТаблицаКонтрагентов.НомерСтроки КАК НомерСтроки,
	|	2 КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Приоритет2
	|ИЗ
	|	ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ТаблицаКонтрагентов.ОКПОКонтрагента = Контрагенты.КодПоЕДРПОУ
	|ГДЕ
	|	ТаблицаКонтрагентов.ОКПОКонтрагента <> """"
	|	И Контрагенты.КодПоЕДРПОУ В(&СписокОКПО)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_БанковскиеСчета.Контрагент КАК Контрагент,
	|	ВТ_БанковскиеСчета.ОКПО КАК ОКПО,
	|	ВТ_БанковскиеСчета.НомерСтроки КАК НомерСтроки,
	|	3 КАК Приоритет,
	|	ВТ_БанковскиеСчета.НомерСчета КАК НомерСчета,
	|	ВТ_БанковскиеСчета.БанковскийСчет КАК БанковскийСчет
	|ПОМЕСТИТЬ ВТ_Приоритет3
	|ИЗ
	|	ВТ_БанковскиеСчета КАК ВТ_БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ПО ВТ_БанковскиеСчета.ВладелецНаименование = ТаблицаКонтрагентов.ИмяКонтрагента
	|			И ВТ_БанковскиеСчета.НомерСтроки = ТаблицаКонтрагентов.НомерСтроки
	|ГДЕ
	|	ТаблицаКонтрагентов.СчетКонтрагентаДляПоиска <> """"
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_БанковскиеСчета.Контрагент,
	|	ВТ_БанковскиеСчета.ОКПО,
	|	ВТ_БанковскиеСчета.НомерСтроки,
	|	3,
	|	ВТ_БанковскиеСчета.НомерСчета,
	|	ВТ_БанковскиеСчета.БанковскийСчет
	|ИЗ
	|	ВТ_БанковскиеСчета КАК ВТ_БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ПО ВТ_БанковскиеСчета.ВладелецНаименованиеПолное = ТаблицаКонтрагентов.ИмяКонтрагента
	|			И ВТ_БанковскиеСчета.НомерСтроки = ТаблицаКонтрагентов.НомерСтроки
	|ГДЕ
	|	ТаблицаКонтрагентов.СчетКонтрагентаДляПоиска <> """"
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_БанковскиеСчета.Контрагент,
	|	ВТ_БанковскиеСчета.ОКПО,
	|	ВТ_БанковскиеСчета.НомерСтроки,
	|	3,
	|	ВТ_БанковскиеСчета.НомерСчета,
	|	ВТ_БанковскиеСчета.БанковскийСчет
	|ИЗ
	|	ВТ_БанковскиеСчета КАК ВТ_БанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ПО ВТ_БанковскиеСчета.ОКПО = ТаблицаКонтрагентов.ОКПОКонтрагента
	|			И ВТ_БанковскиеСчета.НомерСтроки = ТаблицаКонтрагентов.НомерСтроки
	|ГДЕ
	|	ТаблицаКонтрагентов.СчетКонтрагентаДляПоиска <> """"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.КодПоЕДРПОУ КАК ОКПО,
	|	ТаблицаКонтрагентов.НомерСтроки КАК НомерСтроки,
	|	4 КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Приоритет4
	|ИЗ
	|	ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ТаблицаКонтрагентов.ОКПОКонтрагента = Контрагенты.ИНН
	|ГДЕ
	|	ТаблицаКонтрагентов.ОКПОКонтрагента <> """"
	|	И Контрагенты.КодПоЕДРПОУ В(&СписокОКПО)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Приоритет2.Контрагент КАК Контрагент,
	|	ВТ_Приоритет2.ОКПО КАК ОКПО,
	|	ВТ_Приоритет2.НомерСтроки КАК НомерСтроки,
	|	1 КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Приоритет1
	|ИЗ
	|	ВТ_Приоритет2 КАК ВТ_Приоритет2
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Приоритет4 КАК ВТ_Приоритет4
	|		ПО ВТ_Приоритет2.Контрагент = ВТ_Приоритет4.Контрагент
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_Приоритет3.Контрагент,
	|	ВТ_Приоритет3.ОКПО,
	|	ВТ_Приоритет3.НомерСтроки,
	|	1
	|ИЗ
	|	ВТ_Приоритет3 КАК ВТ_Приоритет3
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Приоритет4 КАК ВТ_Приоритет4
	|		ПО ВТ_Приоритет3.Контрагент = ВТ_Приоритет4.Контрагент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Приоритет1.Контрагент КАК Контрагент,
	|	ВТ_Приоритет1.ОКПО КАК ОКПО,
	|	ВТ_Приоритет1.НомерСтроки КАК НомерСтроки,
	|	0 КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Приоритет0
	|ИЗ
	|	ВТ_Приоритет1 КАК ВТ_Приоритет1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ПО ВТ_Приоритет1.Контрагент.Наименование = ТаблицаКонтрагентов.ИмяКонтрагента
	|			И ВТ_Приоритет1.НомерСтроки = ТаблицаКонтрагентов.НомерСтроки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВТ_Приоритет1.Контрагент,
	|	ВТ_Приоритет1.ОКПО,
	|	ВТ_Приоритет1.НомерСтроки,
	|	0
	|ИЗ
	|	ВТ_Приоритет1 КАК ВТ_Приоритет1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
	|		ПО ВТ_Приоритет1.Контрагент.НаименованиеПолное = ТаблицаКонтрагентов.ИмяКонтрагента
	|			И ВТ_Приоритет1.НомерСтроки = ТаблицаКонтрагентов.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Контрагент КАК Контрагент,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.ОКПО КАК ОКПО,
	|	МИНИМУМ(ВложенныйЗапрос.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ КонтрагентыСгруппированныеПоПриоритетам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_Приоритет1.Контрагент КАК Контрагент,
	|		ВТ_Приоритет1.ОКПО КАК ОКПО,
	|		ВТ_Приоритет1.НомерСтроки КАК НомерСтроки,
	|		ВТ_Приоритет1.Приоритет КАК Приоритет
	|	ИЗ
	|		ВТ_Приоритет1 КАК ВТ_Приоритет1
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Приоритет2.Контрагент,
	|		ВТ_Приоритет2.ОКПО КАК ОКПО,
	|		ВТ_Приоритет2.НомерСтроки,
	|		ВТ_Приоритет2.Приоритет
	|	ИЗ
	|		ВТ_Приоритет2 КАК ВТ_Приоритет2
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Приоритет3.Контрагент,
	|		ВТ_Приоритет3.ОКПО КАК ОКПО,
	|		ВТ_Приоритет3.НомерСтроки,
	|		ВТ_Приоритет3.Приоритет
	|	ИЗ
	|		ВТ_Приоритет3 КАК ВТ_Приоритет3
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Приоритет4.Контрагент,
	|		ВТ_Приоритет4.ОКПО КАК ОКПО,
	|		ВТ_Приоритет4.НомерСтроки,
	|		ВТ_Приоритет4.Приоритет
	|	ИЗ
	|		ВТ_Приоритет4 КАК ВТ_Приоритет4) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.ОКПО,
	|	ВложенныйЗапрос.НомерСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыСгруппированныеПоПриоритетам.Контрагент КАК Контрагент,
	|	МИНИМУМ(КонтрагентыСгруппированныеПоПриоритетам.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ МинимальныйПриоритетВРазрезеКонтрагентов
	|ИЗ
	|	КонтрагентыСгруппированныеПоПриоритетам КАК КонтрагентыСгруппированныеПоПриоритетам
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтрагентыСгруппированныеПоПриоритетам.Контрагент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыСгруппированныеПоПриоритетам.Контрагент КАК Контрагент,
	|	КонтрагентыСгруппированныеПоПриоритетам.НомерСтроки,
	|	КонтрагентыСгруппированныеПоПриоритетам.ОКПО,
	|	КонтрагентыСгруппированныеПоПриоритетам.Приоритет
	|ПОМЕСТИТЬ КонтрагентыСМинимальнымПриоритетом
	|ИЗ
	|	КонтрагентыСгруппированныеПоПриоритетам КАК КонтрагентыСгруппированныеПоПриоритетам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МинимальныйПриоритетВРазрезеКонтрагентов КАК МинимальныйПриоритетВРазрезеКонтрагентов
	|		ПО КонтрагентыСгруппированныеПоПриоритетам.Контрагент = МинимальныйПриоритетВРазрезеКонтрагентов.Контрагент
	|			И КонтрагентыСгруппированныеПоПриоритетам.Приоритет = МинимальныйПриоритетВРазрезеКонтрагентов.Приоритет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтрагентыСМинимальнымПриоритетом.Контрагент КАК Контрагент,
	|	КонтрагентыСМинимальнымПриоритетом.ОКПО КАК ОКПО,
	|	КонтрагентыСМинимальнымПриоритетом.Приоритет КАК Приоритет,
	|	КонтрагентыСМинимальнымПриоритетом.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	КонтрагентыСМинимальнымПриоритетом КАК КонтрагентыСМинимальнымПриоритетом
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыСМинимальнымПриоритетом.Контрагент КАК Контрагент,
	|	ВТ_Приоритет3.БанковскийСчет КАК БанковскийСчет,
	|	ВТ_Приоритет3.НомерСчета КАК НомерСчета,
	|	КонтрагентыСМинимальнымПриоритетом.Приоритет КАК Приоритет,
	|	КонтрагентыСМинимальнымПриоритетом.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ВТ_Приоритет3.БанковскийСчет КАК Справочник.БанковскиеСчета).Владелец КАК Владелец
	|ИЗ
	|	КонтрагентыСМинимальнымПриоритетом КАК КонтрагентыСМинимальнымПриоритетом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Приоритет3 КАК ВТ_Приоритет3
	|		ПО КонтрагентыСМинимальнымПриоритетом.Контрагент = ВТ_Приоритет3.Контрагент
	|			И КонтрагентыСМинимальнымПриоритетом.НомерСтроки = ВТ_Приоритет3.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаКонтрагентов";
	
	Пакет = Запрос.ВыполнитьПакет();
	Выборка = Пакет[0].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		СтрокаДокумента = ДокументыДляИмпорта.Найти(Выборка.НомерСтроки, "НомерСтроки");
		// учтем дубли с одинаковым приоритетом
		НайденоКонтрагентов = 0;
		Пока Выборка.Следующий() Цикл
			ОКПОКонтрагента      = Выборка.ОКПО;
			НайденоКонтрагентов = НайденоКонтрагентов + 1;
			Если НайденоКонтрагентов = 1 Тогда
				СтрокаДокумента.Контрагент = Выборка.Контрагент;
				МассивСтрокСКонтрагентами.Добавить(СтрокаДокумента);
				НайденныеКонтрагенты.Вставить(Выборка.НомерСтроки, Выборка.Контрагент);
			КонецЕсли;
		КонецЦикла;
		
		Если НайденоКонтрагентов > 1 Тогда
			ДобавитьЗамечание(СтрокаДокумента, 2, "В информационной базе найдено несколько("
				+ НайденоКонтрагентов + ") контрагентов с одинаковым кодом ЕДРПОУ ("
				+ ОКПОКонтрагента + ")!");
		КонецЕсли;
	КонецЦикла;
	
	//_______________________________________________________________________________________________________________
	// банковский счет контрагента
	Выборка = Пакет[1].Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
		СтрокаДокумента = ДокументыДляИмпорта.Найти(Выборка.НомерСтроки, "НомерСтроки");
		// учтем дубли с одинаковым приоритетом
		НайденоРС = 0;
		Пока Выборка.Следующий() Цикл
			Владелец = НайденныеКонтрагенты.Получить(Выборка.НомерСтроки);
			Если Владелец = Неопределено
				ИЛИ Владелец <> Выборка.Владелец Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСчета = Выборка.НомерСчета;
			НайденоРС  = НайденоРС + 1;
			Если НайденоРС = 1 Тогда
				СтрокаДокумента.СчетКонтрагента = Выборка.БанковскийСчет;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденоРС > 1 Тогда
			ДобавитьЗамечание(СтрокаДокумента, 2, "В информационной базе найдено несколько("
				+ НайденоРС + ") одинаковых банковских счетов ("
				+ НомерСчета + ")!");
		КонецЕсли;
	КонецЦикла;
	
	МассивСтрокПустыхКонтрагентов = ДокументыДляИмпорта.НайтиСтроки(Новый Структура("Контрагент", Неопределено));
	Для инд = 0 По МассивСтрокПустыхКонтрагентов.ВГраница() Цикл
		СтрокаДокумента = МассивСтрокПустыхКонтрагентов[инд];
		ЕстьЗамечание   =  НЕ ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок);
		СтрокаДокумента.Контрагент      =
			?(ЕстьЗамечание ИЛИ НЕ СоздаватьНенайденныеЭлементы, НСтр("ru='Не найден (';uk='Не знайдений ('"), НСтр("ru='Не загружен (';uk='Не завантажений ('")) + СтрокаДокумента.ИмяКонтрагента + ")"; 
		СтрокаДокумента.СчетКонтрагента =
			?(ЕстьЗамечание ИЛИ НЕ СоздаватьНенайденныеЭлементы, НСтр("ru='Не найден (';uk='Не знайдений ('"), НСтр("ru='Не загружен (';uk='Не завантажений ('")) + СтрокаДокумента.СчетКонтрагентаДляПоиска + ")";
		СтрокаДокумента.Договор         = ?(ЕстьЗамечание ИЛИ НЕ СоздаватьНенайденныеЭлементы, НСтр("ru='Не найден';uk='Не знайдений'"), НСтр("ru='Не создан';uk='Не створений'"));
		СтрокаДокумента.ДоговорКонтрагентаНеНайден = Истина;
		
		СписокНенайденных(СтрокаДокумента, ДеревоКонтрагентов);
		Если НЕ СоздаватьНенайденныеЭлементы Тогда

			ДобавитьЗамечание(СтрокаДокумента, 2, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru='Не найден контрагент (%1, ЕДРПОУ %2).';uk='Не знайдений контрагент (%1, ЄДРПОУ %2).'"), СтрокаДокумента.ИмяКонтрагента, СтрокаДокумента.ОКПОКонтрагента));
			ДобавитьЗамечание(СтрокаДокумента, 2, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru='Не найден счет контрагента (%1).';uk='Не знайдений рахунок контрагента (%1).'"), СтрокаДокумента.СчетКонтрагентаДляПоиска));
			ДобавитьЗамечание(СтрокаДокумента, 2, НСтр("ru='Не найден договор. ';uk='Не знайдений договір. '"));
		КонецЕсли;
	КонецЦикла;
	
	МассивСтрокПустыхРасчетныхСчетов = ДокументыДляИмпорта.НайтиСтроки(Новый Структура("СчетКонтрагента", Неопределено));
	Для инд = 0 По МассивСтрокПустыхРасчетныхСчетов.ВГраница() Цикл
		СтрокаДокумента = МассивСтрокПустыхРасчетныхСчетов[инд];
		ЕстьЗамечание   =  НЕ ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок);
		СтрокаДокумента.СчетКонтрагента =
			?(ЕстьЗамечание ИЛИ НЕ СоздаватьНенайденныеЭлементы, НСтр("ru='Не найден (';uk='Не знайдений ('"), НСтр("ru='Не загружен (';uk='Не завантажений ('")) + СтрокаДокумента.СчетКонтрагентаДляПоиска + ")";
		
		СписокНенайденных(СтрокаДокумента, ДеревоКонтрагентов);
		Если НЕ СоздаватьНенайденныеЭлементы Тогда
			ДобавитьЗамечание(СтрокаДокумента, 2, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru='Не найден счет контрагента (%1).';uk='Не знайдений рахунок контрагента (%1).'"), СтрокаДокумента.СчетКонтрагентаДляПоиска));
		КонецЕсли;
	КонецЦикла;
	
	//_______________________________________________________________________________________________________________
	//8) Определим договор контрагента
		
	МассивПустыхДоговоров = ДокументыДляИмпорта.НайтиСтроки(Новый Структура("Договор", Неопределено));
	Если МассивПустыхДоговоров.Количество() > 0 Тогда
		ТаблицаПустыхДоговоров = ДокументыДляИмпорта.Скопировать(МассивПустыхДоговоров,
			"НомерСтроки, Контрагент, ВидОперации");
		
		ТаблицаСвязейВидаОперацииВидДоговора = ПолучитьТаблицуСвязей();
		
		Запрос.УстановитьПараметр("ТаблицаКонтрагентов", ТаблицаПустыхДоговоров);
		Запрос.УстановитьПараметр("ТаблицаСвязей",       ТаблицаСвязейВидаОперацииВидДоговора);
		Запрос.УстановитьПараметр("Организация",         Организация);
		Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСвязей.ВидОперации КАК ВидОперации,
		|	ТаблицаСвязей.ВидДоговора КАК ВидДоговора,
		|	ТаблицаСвязей.Приоритет КАК Приоритет
		|ПОМЕСТИТЬ ТаблицаСвязей
		|ИЗ
		|	&ТаблицаСвязей КАК ТаблицаСвязей
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидДоговора,
		|	ВидОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаКонтрагентов.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ(ТаблицаКонтрагентов.Контрагент КАК Справочник.Контрагенты) КАК Контрагент,
		|	ТаблицаКонтрагентов.ВидОперации КАК ВидОперации
		|ПОМЕСТИТЬ ТаблицаКонтрагентов
		|ИЗ
		|	&ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаКонтрагентов.НомерСтроки КАК НомерСтроки,
		|	ТаблицаКонтрагентов.Контрагент КАК Контрагент,
		|	ДоговорыКонтрагентов.Ссылка КАК Договор,
		|	ДоговорыКонтрагентов.ВидДоговора КАК ВидДоговора,
		|	ТаблицаКонтрагентов.ВидОперации КАК ВидОперации
		|ПОМЕСТИТЬ ВТ_Договора
		|ИЗ
		|	ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ТаблицаКонтрагентов.Контрагент = ДоговорыКонтрагентов.Владелец
		|			И (ДоговорыКонтрагентов.Организация = &Организация)
		|			И (ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов)
		|ГДЕ
		|	ДоговорыКонтрагентов.Организация = &Организация
		|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерСтроки,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.Договор,
		|	ВложенныйЗапрос.ВидОперации,
		|	МИНИМУМ(ВложенныйЗапрос.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ ВТ_ДоговараМин
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ_Договора.НомерСтроки КАК НомерСтроки,
		|		ВТ_Договора.Контрагент КАК Контрагент,
		|		ВТ_Договора.Договор КАК Договор,
		|		ВТ_Договора.ВидОперации КАК ВидОперации,
		|		ТаблицаСвязей.Приоритет КАК Приоритет
		|	ИЗ
		|		ВТ_Договора КАК ВТ_Договора
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСвязей КАК ТаблицаСвязей
		|			ПО ВТ_Договора.ВидДоговора = ТаблицаСвязей.ВидДоговора
		|				И ВТ_Договора.ВидОперации = ТаблицаСвязей.ВидОперации) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.ВидОперации,
		|	ВложенныйЗапрос.НомерСтроки,
		|	ВложенныйЗапрос.Контрагент,
		|	ВложенныйЗапрос.Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДоговараМин.НомерСтроки КАК НомерСтроки,
		|	ВТ_ДоговараМин.Контрагент,
		|	ВТ_ДоговараМин.Договор,
		|	ВТ_ДоговараМин.ВидОперации,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ВТ_ДоговараМин.Договор = ВТ_ДоговараМин.Контрагент.ОсновнойДоговорКонтрагента
		|				ТОГДА -1
		|			ИНАЧЕ ВТ_ДоговараМин.Приоритет
		|		КОНЕЦ) КАК Приоритет
		|ИЗ
		|	ВТ_ДоговараМин КАК ВТ_ДоговараМин
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДоговараМин.ВидОперации,
		|	ВТ_ДоговараМин.НомерСтроки,
		|	ВТ_ДоговараМин.Контрагент,
		|	ВТ_ДоговараМин.Договор
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	Приоритет";
		
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("НомерСтроки") Цикл
			СтрокаДокумента = ДокументыДляИмпорта.Найти(Выборка.НомерСтроки, "НомерСтроки");
			// учтем дубли с одинаковым приоритетом
			Если Выборка.Следующий() Тогда
				СтрокаДокумента.Договор = Выборка.Договор;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Для инд = 0 По МассивСтрокСКонтрагентами.ВГраница() Цикл
		Если ЗначениеЗаполнено(МассивСтрокСКонтрагентами[инд].Договор) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДокумента      = МассивСтрокСКонтрагентами[инд];
		ВидОперацииДокумента = СтрокаДокумента.ВидОперации;
		
		СписокВидовДоговоров = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(ВидОперацииДокумента);
		Если ВидОперацииДокумента  <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет 
			И ВидОперацииДокумента <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
			И СписокВидовДоговоров.Количество() > 0  Тогда
			ЕстьЗамечание = НЕ ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок);
			СтрокаДокумента.ДоговорКонтрагентаНеНайден = Истина;
			СтрокаДокумента.Договор = ?(ЕстьЗамечание ИЛИ НЕ СоздаватьНенайденныеЭлементы, НСтр("ru='Не найден';uk='Не знайдений'"), НСтр("ru='Не создан';uk='Не створений'"));
			
			СписокНенайденных(СтрокаДокумента, ДеревоКонтрагентов);
			Если НЕ СоздаватьНенайденныеЭлементы Тогда
				ДобавитьЗамечание(СтрокаДокумента, 2, НСтр("ru='Не найден договор. ';uk='Не знайдений договір. '"));
			КонецЕсли;
		Иначе
			СтрокаДокумента.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // РаспознатьДанные

Процедура ПодготовитьДанныеВСтрокедокумента(СтрокаДокумента,
		Организация, БанковскийСчет, НомерСчета, СписокБанковскихСчетовОрганизации, НастройкиПоУмолчаниюДляДокументов)

	//1) Определим вид платежа – входящий или исходящий
	ПлатежноеПоручение  = ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ПЛАТЕЖНОЕПОРУЧЕНИЕ";
	ПлатежноеТребование = ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ПЛАТЕЖНОЕТРЕБОВАНИЕ";
	
	Исходящий           = СтрокаДокумента.ПлательщикСчет = НомерСчета;
	СтрокаДокумента.Исходящий = Исходящий;
	
	//_______________________________________________________________________________________________________________
	//2) Определим вид документа в программе
	ВидДокумента = ?(Исходящий, "СписаниеСРасчетногоСчета",    "ПоступлениеНаРасчетныйСчет");
	ИмяДокумента = ?(Исходящий, "Списание с расчетного счета", "Поступление на расчетный счет");
	
	СтрокаДокумента.ВидДокумента = ВидДокумента;
	СтрокаДокумента.ИмяДокумента = ИмяДокумента;
	РеквизитСчета = ?(Исходящий, "СчетОрганизации", "СчетКонтрагента");
	
	//_______________________________________________________________________________________________________________
	//3) Найдем ранее загруженный (введенный вручную) документ.
	//Реквизиты для поиска: Вид документа, Дата, Номер, Номер счета.
	
	// Распознаем дату документа
	ВсеРеквизитыПоискаЕсть   = Ложь;
	ДокументНайден           = Ложь;	
	СтрокаДокумента.НомерДок = СтрокаДокумента.Номер;
	Если НЕ ПустаяСТрока(СтрокаДокумента.Дата) Тогда
		ДатаПлДокумента = ПолучитьДатуИзСтроки('00010101', СтрокаДокумента.Дата);
	Иначе
		ДатаПлДокумента = '00010101';
	КонецЕсли;
	
	Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаСписано) Тогда
		ДатаИзСтроки = ПолучитьДатуИзСтроки('00010101', СтрокаДокумента.ДатаСписано);
	ИначеЕсли НЕ ПустаяСТрока(СтрокаДокумента.ДатаПоступило) Тогда
		ДатаИзСтроки = ПолучитьДатуИзСтроки('00010101', СтрокаДокумента.ДатаПоступило);
	Иначе
		ДатаИзСтроки = ДатаПлДокумента;
	КонецЕсли;
	
	РеквизитыПлатежки = Новый Структура("Ссылка, Контрагент, СчетКонтрагента, ДоговорКонтрагента, ВидДоговора, СтавкаНДС,
		|ДокументОснование");
	
	Если ЗначениеЗаполнено(ДатаИзСтроки) Тогда
		СтрокаДокумента.ЕстьДатаПлатежа  = Истина;
		СтрокаДокумента.ДатаПлПоручения  = ДатаПлДокумента;
		СтрокаДокумента.ДатаДок          = ДатаИзСтроки;
		
		СтрокаДокумента.ЭтоПлатежноеПоручение = Исходящий И ПлатежноеПоручение;
		СтрокаДокумента.СчетДляПоискаДок = ?(Исходящий, СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПлательщикСчет);
		СтрокаДокумента.ОКПОДляПоискаДок  = ?(Исходящий, СтрокаДокумента.ПолучательОКПО,  СтрокаДокумента.ПлательщикОКПО);
	КонецЕсли;
	
	//Ставка НДС из платежки
	СтрокаДокумента.СтавкаНДС = РеквизитыПлатежки.СтавкаНДС;
	
	//_______________________________________________________________________________________________________________
	//4) Определяем вид операции документа
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
		Если Исходящий Тогда
			Если ЗначениеЗаполнено(РеквизитыПлатежки.Ссылка) Тогда
				// Используем тот же алгоритм, что и при вводе списания с расчетного счета на основании платежного поручения
				Если ТипЗнч(РеквизитыПлатежки.ДокументОснование) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
					ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП;
				Иначе
					Если РеквизитыПлатежки.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
 						ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратДенежныхСредствПокупателю;
					ИначеЕсли РеквизитыПлатежки.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
						ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
					Иначе
						ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли СписокБанковскихСчетовОрганизации.НайтиСтроки(
					Новый Структура("НомерСчета, МФО", СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПолучательМФО)).Количество() > 0 Тогда
				ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
			Иначе
				ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
			КонецЕсли; 
		Иначе // входящий платеж
			ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
		КонецЕсли;
		
		СтрокаДокумента.ВидОперации = ВидОперацииДокумента;
	Иначе
		ВидОперацииДокумента = СтрокаДокумента.ВидОперации;
	КонецЕсли;
	
	СтрокаДокумента.ВидОперацииДокумента = ВидОперацииДокумента;
	
	//_______________________________________________________________________________________________________________
	//5) Определяем банковский счет организации
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетОрганизации) Тогда
		СтрокаДокумента.СчетОрганизации = БанковскийСчет;
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//6) Определяем банковский счет контрагента
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) ИЛИ ТипЗнч(СтрокаДокумента.СчетКонтрагента) = Тип("Строка")
		И Найти(СтрокаДокумента.СчетКонтрагента, НСтр("ru='Не загружен';uk='Не завантажений'")) > 0 Тогда
		
		Если ЗначениеЗаполнено(РеквизитыПлатежки.Ссылка) Тогда
			СтрокаДокумента.СчетКонтрагента = РеквизитыПлатежки.СчетКонтрагента;
		Иначе
			СтрокаДокумента.НайтиКонтрагента = Истина;
			Если СтрокаДокумента.Исходящий Тогда
				СтрокаДокумента.СчетКонтрагентаДляПоиска = СокрЛП(СтрокаДокумента.ПолучательСчет);
				СтрокаДокумента.ОКПОКонтрагента  = СокрЛП(СтрокаДокумента.ПолучательОКПО);
					СтрокаДокумента.ИмяКонтрагента = СтрокаДокумента.Получатель;
				
			Иначе
				СтрокаДокумента.СчетКонтрагентаДляПоиска = СокрЛП(СтрокаДокумента.ПлательщикСчет);
				СтрокаДокумента.ОКПОКонтрагента  = СокрЛП(СтрокаДокумента.ПлательщикОКПО);
					СтрокаДокумента.ИмяКонтрагента = СтрокаДокумента.Плательщик;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	//_______________________________________________________________________________________________________________
	//7) Определим контрагента
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Контрагент) ИЛИ ТипЗнч(СтрокаДокумента.Контрагент) = Тип("Строка")
		И Найти(СтрокаДокумента.Контрагент, НСтр("ru='Не загружен';uk='Не завантажений'")) > 0 Тогда
		
		Если ЗначениеЗаполнено(РеквизитыПлатежки.Ссылка) Тогда
			СтрокаДокумента.Контрагент = РеквизитыПлатежки.Контрагент;
		ИначеЕсли ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
			СтрокаДокумента.Контрагент = Организация;
		КонецЕсли;
		
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//8) Определим договор контрагента
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Договор)
		ИЛИ ТипЗнч(СтрокаДокумента.Договор) = Тип("Строка") Тогда
		
		Если ЗначениеЗаполнено(РеквизитыПлатежки.ДоговорКонтрагента) Тогда
			СтрокаДокумента.Договор = РеквизитыПлатежки.ДоговорКонтрагента;
		Иначе
			Если ВидОперацииДокумента  = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет 
				И ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
				И УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(ВидОперацииДокумента).Количество() = 0  Тогда
				СтрокаДокумента.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//9) Определим Статью ДДС по умолчанию
		
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СтатьяДДС) Тогда
		СтрокаДокумента.СтатьяДДС = НастройкиПоУмолчаниюДляДокументов[ИмяДокумента].СтатьяДДС;
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//10) Определим сумму
	
	// Преобразуем из строки в число
	Буфер = СокрЛП(СтрЗаменить(СтрокаДокумента.Сумма, " ", ""));
	
	Если НЕ ЕстьНеЦифры(СтрЗаменить(СтрЗаменить(СтрЗаменить(Буфер, ".", ""), "-", ""), ",", "")) И Буфер <> "" Тогда
		Сумма = Число(Буфер);
		
		Если Сумма < 0 Тогда
			Сумма = - Сумма;      
		КонецЕсли;
		
		СтрокаДокумента.СуммаДокумента = Сумма;
		Если Исходящий Тогда
			СтрокаДокумента.СуммаСписано   = Сумма;
		Иначе
			СтрокаДокумента.СуммаПоступило = Сумма;
		КонецЕсли;
		
	Иначе
		ДобавитьЗамечание(СтрокаДокумента, 4, "Указана неверная сумма документа(" + Буфер + ")!");
		
	КонецЕсли;
	
	
	//_______________________________________________________________________________________________________________
	//12) Определим ДатаОтсылкиДок(для Платежного требования выставленное)
	
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСтрока(СтрокаДокумента.ДатаОтсылкиДок) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.ДатаОтсылки, СтрокаДокумента.ДатаОтсылкиДок);
	КонецЕсли;
	
	
	//_______________________________________________________________________________________________________________
	//14) ДатаСписано и ДатаПоступило, ДатаПроведения
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСтрока(СтрокаДокумента.ДатаСписано) И СтрокаДокумента.СуммаСписано <> 0 Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Списано, СтрокаДокумента.ДатаСписано);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.Списано = '00010101';
		Иначе
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Списано;
		КонецЕсли;
	Иначе
		СтрокаДокумента.Списано = '00010101';
		СтрокаДокумента.ДатаПроведения = СтрокаДокумента.ДатаДок;
	КонецЕсли;
	
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСтрока(СтрокаДокумента.ДатаПоступило) И СтрокаДокумента.СуммаПоступило <> 0 Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Поступило, СтрокаДокумента.ДатаПоступило);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.Поступило = '00010101';
		Иначе
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Поступило;
		КонецЕсли;
	Иначе
		СтрокаДокумента.Поступило = '00010101';
		СтрокаДокумента.ДатаПроведения = СтрокаДокумента.ДатаДок;
	КонецЕсли;
	
	
КонецПроцедуры // ПодготовитьДанныеВСтрокедокумента




// Разбирает файл импорта и заполняет таблицу документов (для импорта).
// (без распознавания)
Функция РазобратьФайлИмпортаXML(ДокументыДляИмпорта, СтруктураДанныхИмпорта, ВыводитьСообщения,
		НомерСчета, 
		КодВалютыБанковскогоСчета, 
		Кодировка, Организация,
		Импорт_Заголовок, Импорт_РасчетныеСчета, ИмяВременногоФайла, СоздаватьНенайденныеЭлементы = Истина,
		СтекОповещений = Неопределено) Экспорт
	
	// Подготавливаем структуры обработки данных
	Импорт_ВидыДокументов = Новый Массив;
	
	Если СтекОповещений = Неопределено Тогда
		СтекОповещений = Новый Массив;
	КонецЕсли;
	
	// Подготавливаем структуры обработки данных.
	Импорт_ПризнакОбмена = Ложь;
	НайденКонецФайла     = Ложь;
	
	НомерОбрабатываемогоСчета = "";
	
	СписокДокументов = Новый СписокЗначений;
	
	Импорт_РасчетныеСчета.Очистить();
	ДокументыДляИмпорта.Очистить();
	
	// Получаем исходные данные.
	Импорт_ТекстДляРазбора = ПрочитатьФайл(ИмяВременногоФайла, Кодировка);
	
	Если Импорт_ТекстДляРазбора = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru='Файл загрузки не содержит данных!';uk='Файл завантаження не містить даних!'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ФайлXML = Новый ЧтениеXML;
	Попытка
		ФайлXML.УстановитьСтроку(Импорт_ТекстДляРазбора);
		ФайлXML.Прочитать();
	Исключение
		ТекстСообщения = НСтр("ru='Ошибка чтения файла XML';uk='Помилка читання файлу XML'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
		Возврат Ложь;
	КонецПопытки;	
	
	ФайлXML = Новый ЧтениеXML;
	ФайлXML.УстановитьСтроку(Импорт_ТекстДляРазбора);
	
	Импорт_Загружаемые = Новый Структура(
		"Номер, Дата, Сумма,
	 	|КодВалюты,СтатусДокумента,ДокументИД,
		|СтатусСоставителя,
		|ДатаСписано,
		|ДатаПоступило,
		|ПлательщикСчет, Плательщик, ПлательщикМФО, ПлательщикОКПО, ПлательщикБанк,
		|ПолучательСчет, Получатель, ПолучательМФО, ПолучательОКПО, ПолучательБанк,
		|НазначениеПлатежа,
		|НомерСчетаПоставщика, ДатаОтсылкиДок");
	
	// Заполняем первичные структуры данных.
	
	СообщатьОПустомСчете = Истина;
	Пока ФайлXML.Прочитать() Цикл		
		
		ИмяТега = ВРег(СокрЛП(ФайлXML.Имя)); 		
		
		Если ИмяТега="СЕКЦИЯДОКУМЕНТ" И ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			НоваяСтрокаДокументов = ДокументыДляИмпорта.Добавить();

			Если НЕ ЗагрузитьСекциюДокументаXML(НоваяСтрокаДокументов, ФайлXML, Импорт_ВидыДокументов, Импорт_Загружаемые) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Если НомерОбрабатываемогоСчета = "" И СообщатьОПустомСчете Тогда
				СообщатьОПустомСчете = Ложь;
				
				ТекстСообщения = НСтр("ru='В заголовке файла не указан банковский счет!
|При загрузке будет использован банковский счет, указанный в форме.';uk='В заголовку файлу не вказаний банківський рахунок!
|При завантаженні буде використаний банківський рахунок, вказаний у формі.'");
				СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
			КонецЕсли;
			
			Если НомерОбрабатываемогоСчета <> "" И НомерОбрабатываемогоСчета <> НомерСчета Тогда
				ДокументыДляИмпорта.Удалить(НоваяСтрокаДокументов);
			ИначеЕсли ЗначениеЗаполнено(НоваяСтрокаДокументов.КодВалюты) И НоваяСтрокаДокументов.КодВалюты <> СокрЛП(КодВалютыБанковскогоСчета) Тогда
				ДокументыДляИмпорта.Удалить(НоваяСтрокаДокументов);
			КонецЕсли;
			
			
		ИначеЕсли ИмяТега="СЕКЦИЯРАСЧСЧЕТ" Тогда
			
			СтрокаРССчетов = Импорт_РасчетныеСчета.Добавить();
			
			Если НЕ ЗагрузитьСекциюРасчСчетаXML(СтрокаРССчетов, ФайлXML) Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
			Если НомерСчета <> СтрокаРССчетов.РасчСчетОрг Тогда
				Импорт_РасчетныеСчета.Удалить(СтрокаРССчетов);
			КонецЕсли;
			
		ИначеЕсли ИмяТега="РАСЧСЧЕТ" Тогда
			
			Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ФайлXML.Прочитать();	
				Значение = ФайлXML.Значение;
			КонецЕсли;	
			
			Если ФайлXML.ТипУзла = ТипУзлаXML.Текст Тогда
				ФайлXML.Прочитать();	
			КонецЕсли;	
			
				НомерОбрабатываемогоСчетаСтароеЗначение = НомерОбрабатываемогоСчета;
				НомерОбрабатываемогоСчета = Значение;
				
				Если СчетПринадлежитОрганизации(Значение, Организация) Тогда
					Если НомерСчета = Значение Тогда
						ПараметрыОтбора = Новый Структура;
						ПараметрыОтбора.Вставить("РасчСчетОрг", Значение);
						
						СтрокаРССчетов = Импорт_РасчетныеСчета.НайтиСтроки(ПараметрыОтбора);
						Если СтрокаРССчетов.Количество() = 0 Тогда
							СтрокаРССчетов = Импорт_РасчетныеСчета.Добавить();
							СтрокаРССчетов.РасчСчетОрг = Значение;
						КонецЕсли;
					Иначе
						Если ВыводитьСообщения Тогда
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='В заголовке файла указан счет (%1), отличный от указанного, расчеты по которому загружаться не будут!';uk='В заголовку файлу вказаний рахунок (%1), відмінний від зазначеного, розрахунки за яким завантажуватися не будуть!'"),
								Значение);
							
							СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
						КонецЕсли;
					КонецЕсли;

				Иначе
					Если ВыводитьСообщения Тогда
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='В заголовке файла указан счет, не принадлежащий организации: %1!';uk='В заголовку файлу вказаний рахунок, що не належить організації: %1!'"), Значение);
						
                        СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
					КонецЕсли;
					
					НомерОбрабатываемогоСчета = ?(НомерОбрабатываемогоСчетаСтароеЗначение = "",
						НомерСчета, НомерОбрабатываемогоСчетаСтароеЗначение);
					Продолжить;
				КонецЕсли;
			
		////ИначеЕсли Лев(Врег(СокрЛП(Стр)), 8) = "ДОКУМЕНТ" Тогда
		////	
		////	Импорт_ВидыДокументов.Добавить(Значение);
			
		ИначеЕсли ИмяТега="_1CCLIENTBANKEXCHANGE" И ФайлXML.ТипУзла = ТипУзлаXML.КонецЭлемента  Тогда
			
			Если НЕ Импорт_ПризнакОбмена Тогда
				
				ТекстСообщения = НСтр("ru='В файле импорта отсутствует признак обмена ""1CClientBankExchange""!';uk='У файлі імпорту відсутня ознака обміну ""1CClientBankExchange""!'");
				
				СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
				Возврат Ложь;
				
			КонецЕсли;
			
			НайденКонецФайла = Истина;
			Возврат Истина;
			
		ИначеЕсли ИмяТега="_1CCLIENTBANKEXCHANGE" И ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента  Тогда
			
			Импорт_ПризнакОбмена = Истина;
			
		Иначе
			
			Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ФайлXML.Прочитать();	
				Значение = ФайлXML.Значение;
			КонецЕсли;	
			
			ЗагрузитьСтрокуЗаголовкаXML(ИмяТега, Значение, Импорт_Заголовок);
			
			Если ФайлXML.ТипУзла = ТипУзлаXML.Текст Тогда
				ФайлXML.Прочитать();	
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ НайденКонецФайла Тогда
		
		Импорт_РасчетныеСчета.Очистить();
		ДокументыДляИмпорта.Очистить();
		
		ТекстСообщения = НСтр("ru='Файл загрузки не соответствует стандарту (не найдена секция КонецФайла)!';uk='Файл завантаження не відповідає стандарту (не знайдена секція КонецФайла)!'");
		СтекОповещений.Добавить(Новый Структура("Текст", ТекстСообщения));
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // РазобратьФайлИмпорта


// Функция возвращает прочитанный файл обмена.
//
Функция ПрочитатьФайл(Файл, Кодировка)
	
	ФайлЗагр = Новый Файл(Файл);
	
	Если НЕ ФайлЗагр.Существует() Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Файла %1 не существует!';uk='Файла %1 не існує!'"), Файл);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	
	// Кодировку задаем текстом, иначе бывают проблемы на сервере в Linux и в связке англоязычная Windows + англоязычный SQL
	Если Кодировка = "DOS" Тогда
		Кодир = КодировкаТекста.OEM;
	ИначеЕсли Кодировка = "Windows" Тогда
		Кодир = КодировкаТекста.ANSI;
	Иначе	
		Кодир = КодировкаТекста.UTF8;
	КонецЕсли;
	
	Попытка
		
		ПотокЧтения = Новый ТекстовыйДокумент();
		ПотокЧтения.Прочитать(Файл, Кодир);
		
	Исключение
		
		ТекстСообщения = НСтр("ru='Файл не прочитан.';uk='Файл не прочитаний.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
		
		Возврат Неопределено;
		
	КонецПопытки;
	

	Если ПотокЧтения.КоличествоСтрок() < 1 Тогда
		ТекстСообщения = НСтр("ru='В файле нет данных!';uk='У файлі немає даних!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПотокЧтения.ПолучитьТекст();
	
	
КонецФункции // ПрочитатьФайл



// Функция загружает секцию документа.
//
Функция ЗагрузитьСекциюДокументаXML(НоваяСтрокаДокументов, ФайлXML, Импорт_ВидыДокументов, Импорт_Загружаемые)
	
	ВидДокумента = ФайлXML.ПолучитьАтрибут("Вид");
	
	Если ВидДокумента <> Неопределено Тогда
		НоваяСтрокаДокументов.Операция = ВидДокумента;
		
		Импорт_ВидыДокументов.Добавить(ВидДокумента);
	Иначе // по умолчанию: "Платежное поручение"	
		
		ВидДокумента = "ПлатежноеПоручение";
		
		НоваяСтрокаДокументов.Операция = ВидДокумента;
		
		Импорт_ВидыДокументов.Добавить(ВидДокумента);
	КонецЕсли;	
	
	Пока ФайлXML.Прочитать() Цикл
		
		ИмяТега = ВРег(СокрЛП(ФайлXML.Имя)); 
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ФайлXML.Прочитать();	
			Значение = ФайлXML.Значение;
		КонецЕсли;	
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.Текст Тогда
			ФайлXML.Прочитать();	
		КонецЕсли;	
		
		Если ИмяТега = "ВИДДОКУМЕНТА" Тогда
			Если НоваяСтрокаДокументов.Операция <> Значение Тогда
				НоваяСтрокаДокументов.Операция = Значение;
				
				Импорт_ВидыДокументов.Добавить(Значение);
			КонецЕсли;	
			
			Продолжить;
		КонецЕсли;
		
		Если ИмяТега="СЕКЦИЯДОКУМЕНТ" Тогда
			Возврат Истина;
		КонецЕсли;	
		
		Если Импорт_Загружаемые.Свойство(ИмяТега) = Истина Тогда
			
			НоваяСтрокаДокументов[ИмяТега] = Значение;
			
		Иначе
				
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Неверный реквизит платежного документа: %1!';uk='Невірний реквізит платіжного документа: %1!'"), ИмяТега);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Возврат Ложь;
			
		КонецЕсли;
			
	КонецЦикла;
	
	НоваяСтрокаДокументов.СостояниеДокумента = 3;
	
	Возврат Истина;
	
КонецФункции // ЗагрузитьСекциюДокумента

// Функция загружает секцию расчетного счета.
//
Функция ЗагрузитьСекциюРасчСчетаXML(СтрокаРССчета, ФайлXML)
	
	ТегиРасчетногоСчета = Новый Структура(
		ВРЕГ("ДатаНачала, ДатаКонца, РасчСчетОрг, НачальныйОстаток, ВсегоПоступило, ВсегоСписано, КонечныйОстаток, КонецРасчСчет"));
	
	Пока ФайлXML.Прочитать() Цикл
		
		Тег = ВРег(СокрЛП(ФайлXML.Имя)); 
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ФайлXML.Прочитать();	
			Значение = ФайлXML.Значение;
		КонецЕсли;	
		
		Если ФайлXML.ТипУзла = ТипУзлаXML.Текст Тогда
			ФайлXML.Прочитать();	
		КонецЕсли;	
		
		Если Тег="СЕКЦИЯРАСЧСЧЕТ" Тогда
			Возврат Истина;
		КонецЕсли;	
		
		Если ТегиРасчетногоСчета.Свойство(Тег) Тогда
			
			СтрокаРССчета[Тег] = Значение;
			
		Иначе
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Неверный реквизит в секции описания банковского счета: %1!';uk='Невірний реквізит у секції опису банківського рахунку: %1!'"), Тег);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	////Если ВРЕГ(Лев(СокрЛП(СтрокаРазбора), 13)) = "КОНЕЦРАСЧСЧЕТ" Тогда
	////	Возврат Истина;
	////Иначе
	////	Возврат Ложь;
	////КонецЕсли;
	
КонецФункции

// Функция загружает заголовок файла обмена.
//
Функция ЗагрузитьСтрокуЗаголовкаXML(Тег, Значение, Импорт_Заголовок)
	
	Если ТипЗнч(Импорт_Заголовок) = Тип("Неопределено") Тогда
		Импорт_Заголовок = Новый Структура(
			ВРЕГ("ВерсияФормата, Кодировка, Отправитель, Получатель, ДатаСоздания, ВремяСоздания, ДатаНачала, ДатаКонца"));
	КонецЕсли;
	
	Если Импорт_Заголовок.Свойство(Тег) Тогда
		
		Импорт_Заголовок[Тег] = Значение;
		
	Иначе
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Неверный реквизит заголовка: %1!';uk='Невірний реквізит заголовку: %1!'"), Тег);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);;
		
	КонецЕсли;
	
КонецФункции


// Процедура проверяет на пустое значение.
//
Процедура ПроверитьНаПустоеЗначениеИмпорта(КешСвойствДокументов, СтрокаИмпорта, ИмяСвойства, ПредставлениеСвойства)
	
	ВариантНеПустых = ПолучитьВариантНеПустых(СтрокаИмпорта.ТипДокумента);
	Если КешСвойствДокументов[ВариантНеПустых].Свойство(ИмяСвойства) Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаИмпорта[ИмяСвойства]) Тогда
			
			Стр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не заполнено ""%1""!';uk='Не заповнено ""%1""!'"), ПредставлениеСвойства);
			ДобавитьЗамечание(СтрокаИмпорта, 3, Стр);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет вариант не пустых.
//
Функция ПолучитьВариантНеПустых(ТипДокумента)
	
	Если ТипДокумента < 3
		ИЛИ ТипДокумента = 11
		ИЛИ ТипДокумента = 12 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции

// Функция проверяет принадлежность счета организации.
//
Функция СчетПринадлежитОрганизации(НомерСчета, Организация)
	
	ЗапросПоСчету = Новый Запрос;
	ЗапросПоСчету.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Владелец,
	|	БанковскиеСчета.НомерСчета,
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.Владелец = &Организация
	|	И БанковскиеСчета.НомерСчета = &НомерСчета";
	
	ЗапросПоСчету.УстановитьПараметр("НомерСчета", НомерСчета);
	ЗапросПоСчету.УстановитьПараметр("Организация", Организация);
	ВыборкаЗапроса = ЗапросПоСчету.Выполнить().Выбрать();
	
	Возврат ВыборкаЗапроса.Следующий();
	
КонецФункции

// Процедура создает список не найденных контрагентов.
//
Процедура СписокНеНайденных(СтрокаДокумента, ДеревоКонтрагентов) Экспорт
	
	НайденКонтрагент = ТипЗнч(СтрокаДокумента.Контрагент)      <> Тип("Строка");
	НайденСчет       = ТипЗнч(СтрокаДокумента.СчетКонтрагента) <> Тип("Строка");
	НайденДоговор    = ТипЗнч(СтрокаДокумента.Договор)         <> Тип("Строка");
	
	ТипКонтрагента   = ?(СтрокаДокумента.Исходящий, "ПОЛУЧАТЕЛЬ", "ПЛАТЕЛЬЩИК");
	
	
	ПолеПоиска       = НСтр("ru='ЕДРПОУ';uk='ЄДРПОУ'");
	ЗначениеПоиска   = СтрокаДокумента[ТипКонтрагента + "ОКПО"];
	// Если ИНН контрагента в файле не задан, то ищем по имени
	Если ПустаяСтрока(ЗначениеПоиска) Тогда
		ПолеПоиска     = НСтр("ru='Наименование';uk='Найменування'");
		ЗначениеПоиска = СтрокаДокумента[ТипКонтрагента];
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Представление, Значение", ПолеПоиска, ЗначениеПоиска);
	НайденныеЗаписиОКонтрагенте = ДеревоКонтрагентов.Строки.НайтиСтроки(СтруктураПоиска, Истина);
	
	// Контрагент
	Если НайденныеЗаписиОКонтрагенте.Количество() = 0 Тогда
		
		НовыйКонтрагент = ДеревоКонтрагентов.Строки.Добавить();
		НовыйКонтрагент.Представление = СтрокаДокумента[ТипКонтрагента];
		НовыйКонтрагент.НомСтроки     = СтрокаДокумента.НомерСтроки;
		
		ДобавитьОписаниеНовогоРеквизита(НСтр("ru='Наименование';uk='Найменування'"), "", ТипКонтрагента,  НовыйКонтрагент.Строки, СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита(НСтр("ru='ЕДРПОУ';uk='ЄДРПОУ'"),       "ОКПО",      ТипКонтрагента, НовыйКонтрагент.Строки, СтрокаДокумента);
		
		Если НайденКонтрагент Тогда
			НовыйКонтрагент.Реквизит = СтрокаДокумента.Контрагент;
		КонецЕсли;
		
	Иначе
		НайденнаяЗаписьОКонтрагенте = НайденныеЗаписиОКонтрагенте[0];
		НовыйКонтрагент = НайденнаяЗаписьОКонтрагенте.Родитель;
		
		Если НовыйКонтрагент = Неопределено Тогда
			НовыйКонтрагент = НайденнаяЗаписьОКонтрагенте;
		КонецЕсли;
		
	КонецЕсли;
	
	//СчетКонтрагента
	НайденныеСтроки = НовыйКонтрагент.Строки.Найти(СтрокаДокумента[ТипКонтрагента + "СЧЕТ"], "Значение");
	Если НЕ НайденСчет И НайденныеСтроки = Неопределено Тогда
		
		РеквизитыНовогоКонтрагента = ДобавитьОписаниеНовогоРеквизита(НСтр("ru='Счет';uk='Рахунок'"), "СЧЕТ", ТипКонтрагента, НовыйКонтрагент.Строки, СтрокаДокумента);
		
			ДобавитьОписаниеНовогоРеквизита(НСтр("ru='Банк';uk='Банк'"), 			"БАНК", 	ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита(НСтр("ru='МФО банка';uk='МФО банку'"),		"МФО", 		ТипКонтрагента, РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита(НСтр("ru='Валюта платежа';uk='Валюта платежу'"), 	"КодВалюты", "", РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
		
	КонецЕсли;
	
	//ВидДоговора
	Если НЕ НайденДоговор Тогда
		ВидыДоговоров = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(СтрокаДокумента.ВидОперации);
		Если ВидыДоговоров.Количество() > 0 Тогда
			ВидДоговора = Строка(ВидыДоговоров[0]);
		КонецЕсли;
	КонецЕсли;
	
	//Договор
	НайденныеСтроки = НовыйКонтрагент.Строки.Найти(ВидДоговора, "Значение");
	Если НЕ НайденДоговор И НайденныеСтроки = Неопределено Тогда
		РеквизитыНовогоКонтрагента = НовыйКонтрагент.Строки.Добавить();
		РеквизитыНовогоКонтрагента.Представление = НСтр("ru='Договор';uk='Договір'");
		РеквизитыНовогоКонтрагента.Значение      = ВидДоговора;
		
		РеквизитыДоговора = РеквизитыНовогоКонтрагента.Строки.Добавить();
		РеквизитыДоговора.Представление = НСтр("ru='Наименование';uk='Найменування'");
		РеквизитыДоговора.Значение      = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Основной договор %1';uk='Основний договір %1'"), НРег(ВидДоговора));
		
		РеквизитыДоговора = РеквизитыНовогоКонтрагента.Строки.Добавить();
		РеквизитыДоговора.Представление = НСтр("ru='Вид';uk='Вид'");
		РеквизитыДоговора.Значение      = ВидДоговора;
		
		РеквизитыДоговора = РеквизитыНовогоКонтрагента.Строки.Добавить();
		РеквизитыДоговора.Представление = НСтр("ru='Ведение взаиморасчетов';uk='Ведення взаєморозрахунків'");
		РеквизитыДоговора.Значение      = НСтр("ru='По договору в целом';uk='За договором у цілому'");
		
		ДобавитьОписаниеНовогоРеквизита(НСтр("ru='Валюта платежа';uk='Валюта платежу'"), 	"КодВалюты", "", РеквизитыНовогоКонтрагента.Строки, СтрокаДокумента);
	КонецЕсли;
	
КонецПроцедуры // СписокНеНайденных

Процедура ДобавитьРеквизитыДоговора(РеквизитыНовогоКонтрагента, ВидДоговора) Экспорт
	
	РеквизитыДоговора = РеквизитыНовогоКонтрагента.Добавить();
	РеквизитыДоговора.Представление = НСтр("ru='Наименование';uk='Найменування'");
	РеквизитыДоговора.Значение      = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Основной договор %1';uk='Основний договір %1'"), НРег(ВидДоговора));
	
	РеквизитыДоговора = РеквизитыНовогоКонтрагента.Добавить();
	РеквизитыДоговора.Представление = НСтр("ru='Вид';uk='Вид'");
	РеквизитыДоговора.Значение      = ВидДоговора;
	
	РеквизитыДоговора = РеквизитыНовогоКонтрагента.Добавить();
	РеквизитыДоговора.Представление = НСтр("ru='Ведение взаиморасчетов';uk='Ведення взаєморозрахунків'");
	РеквизитыДоговора.Значение      = НСтр("ru='По договору в целом';uk='За договором у цілому'");
	
КонецПроцедуры

// Функция добавляет и возвращает описание нового реквизита.
//
Функция ДобавитьОписаниеНовогоРеквизита(Представление, Реквизит, ТипКонтрагента, НовыйКонтрагент, СтрокаДокумента)
	
	РеквизитыНовогоКонтрагента = НовыйКонтрагент.Добавить();
	
	РеквизитыНовогоКонтрагента.Представление = Представление;
	РеквизитыНовогоКонтрагента.Значение      = СтрокаДокумента[ТипКонтрагента + Реквизит];
	РеквизитыНовогоКонтрагента.Реквизит      = ТипКонтрагента + Реквизит;
	
	Возврат РеквизитыНовогоКонтрагента;
	
КонецФункции

// Функция осуществляет поиск банковского счета и возвращает ссылку на него.
//
Функция ПоискБанковскогоСчета(Номер)
	
	Запрос = Новый запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.НомерСчета = &Номер";
	
	Запрос.УстановитьПараметр("Номер", Номер);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Возврат Результат.Выгрузить()[0].Ссылка;
		
	Иначе
		
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции

// Функция преобразует структуру настроек "по умолчанию" для документов
//
Функция ПолучитьСтруктуруНастроек(НастройкаЗаполнения)
	
	СоответствиеНастроек = Новый Соответствие();
	СоответствиеНастроек.Вставить("Поступление на расчетный счет", Новый Структура("Проводить, СтатьяДДС", Ложь));
	СоответствиеНастроек.Вставить("Списание с расчетного счета",   Новый Структура("Проводить, СтатьяДДС", Ложь));
	СоответствиеНастроек.Вставить("КомисияБанка",                  Новый Структура("Проводить, СтатьяДДС", Ложь));
	
	Для каждого СтрокаНастройки Из НастройкаЗаполнения Цикл
		СоответствиеНастроек[СтрокаНастройки[0]].Проводить = СтрокаНастройки[1];
		СоответствиеНастроек[СтрокаНастройки[0]].СтатьяДДС = СтрокаНастройки[2];
	КонецЦикла;
	

	Возврат СоответствиеНастроек;
	
КонецФункции

//////////////////////////////////////

// Процедура загружает платежные документы в информационную базу.
//
Процедура Загрузить(ДокументыКИмпорту, Импорт_Заголовок, Организация,
		Импорт_РасчетныеСчета, ИспользоватьГраницуОбработки, НастройкиПоУмолчаниюДляДокументов, ДатаГраницыОбработки, БанковскийСчет,
		СтекОповещений = Неопределено) Экспорт
	
	НачалоИнтервалаЗагрузки = Дата("00010101");
	КонецИнтервалаЗагрузки  = Дата("00010101");
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Результат = ПолучитьДатуИзСтроки(НачалоИнтервалаЗагрузки, Импорт_Заголовок.ДатаНачала);
	
	Если СтекОповещений = Неопределено Тогда
		СтекОповещений = Новый Массив;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		ТекстСообщения =
			НСтр("ru='В заголовке файла загрузки неверно указана дата начала интервала! Файл не может быть загружен!';uk='У заголовку файлу завантаження невірно зазначена дата початку інтервалу! Файл не може бути завантажений!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Результат = ПолучитьДатуИзСтроки(КонецИнтервалаЗагрузки, Импорт_Заголовок.ДатаКонца);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		ТекстСообщения = НСтр("ru='В заголовке файла импорта неверно указана дата окончания интервала!';uk='У заголовку файлу імпорту невірно вказана дата закінчення інтервалу!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Загружаем отмеченные секции документов.
	Для каждого СтрокаСекции Из ДокументыКИмпорту Цикл
		
		Если СтрокаСекции.Загружать Тогда
			
			РезультатПроверки = ПроверитьДокументДляЗагрузки(СтрокаСекции);
			
			Если ПустаяСтрока(РезультатПроверки) Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
					// В ИБ не найден документ, необходимо создать новый.
					ОбъектДокумента = СоздатьНовыйПлатежныйДокумент(СтрокаСекции.ВидДокумента, СтрокаСекции.Номер, СтрокаСекции.Дата);
				Иначе
					// В ИБ найден документ, необходимо получить его объект.
					ОбъектДокумента = СтрокаСекции.Документ.ПолучитьОбъект();
					//Если после прочтения данных документ попавший в список был удален, то необходимо создать новый
					Если ОбъектДокумента = Неопределено Тогда
						ОбъектДокумента = СоздатьНовыйПлатежныйДокумент(СтрокаСекции.ВидДокумента, СтрокаСекции.Номер, СтрокаСекции.Дата);
					КонецЕсли;
				КонецЕсли;
				
				ЭтоНовыйДокумент = ОбъектДокумента.ЭтоНовый();
				
				// Заполняем все реквизиты документа.
				ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент, Организация, ВалютаРегламентированногоУчета);
				
				//Если контрагент не создан, то добавляем его реквизиты в табличную часть для дальнейшего использования
				Если СтрокаСекции.РеквизитыКонтрагента <> Неопределено Тогда
					ОбъектДокумента.РеквизитыКонтрагента.Загрузить(СтрокаСекции.РеквизитыКонтрагента);
				КонецЕсли;
				
				Если ОбъектДокумента.ПометкаУдаления Тогда
					ЗадатьПометкуНаУдаление(ОбъектДокумента, Ложь);
				КонецЕсли;
				
				ЗаписатьОбъект(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент, НастройкиПоУмолчаниюДляДокументов, СтекОповещений);
				
				Если НЕ ОбъектДокумента.ЭтоНовый() Тогда
					СтрокаСекции.Документ = ОбъектДокумента.Ссылка;
					Если СтрокаСекции.ВидДокумента    = "ПлатежноеПоручение"
						ИЛИ СтрокаСекции.ВидДокумента = "ПлатежноеТребование"  Тогда
						РеквизитДаты   = "Дата";
						РеквизитНомера = "Номер";
					Иначе
						РеквизитДаты   = "ДатаВходящегоДокумента";
						РеквизитНомера = "НомерВходящегоДокумента";
					КонецЕсли;
					
					СтрокаСекции.НомерДок = ОбъектДокумента[РеквизитНомера];
				КонецЕсли;
				
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Платежный документ ""%1"" №%2 от %3 не может быть загружен:%4%5!';uk='Платіжний документ ""%1"" №%2 від %3 не може бути завантажений:%4%5!'"),
					СтрокаСекции.Операция, СтрокаСекции.Номер, СтрокаСекции.Дата, Символы.ПС, РезультатПроверки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Составляем список счетов.
	СписокСчетов = Новый СписокЗначений;
	
	Для каждого СтрокаСчета Из Импорт_РасчетныеСчета Цикл
		СписокСчетов.Добавить(СокрЛП(СтрокаСчета.РасчСчетОрг));
	КонецЦикла;
	
	//Платежные документы, отсутствующие в списке загруженным помечаем на удаление
	ВыборкаДокументов = Новый Запрос;
	ВыборкаДокументов.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписаниеСРасчетногоСчета.Ссылка КАК Ссылка,
	|	СписаниеСРасчетногоСчета.ДатаВходящегоДокумента КАК ДатаДокумента,
	|	СписаниеСРасчетногоСчета.СчетОрганизации.НомерСчета КАК НомерСчета,
	|	СписаниеСРасчетногоСчета.НеПодтвержденоВыпискойБанка
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.Дата >= &ДатаНач
	|	И СписаниеСРасчетногоСчета.Дата <= &ДатаКон
	|	И СписаниеСРасчетногоСчета.Организация = &Организация
	|	И СписаниеСРасчетногоСчета.ВалютаДокумента = &Валюта
	|	И СписаниеСРасчетногоСчета.СчетОрганизации.НомерСчета В(&СписокСчетов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеНаРасчетныйСчет.Ссылка,
	|	ПоступлениеНаРасчетныйСчет.ДатаВходящегоДокумента,
	|	ПоступлениеНаРасчетныйСчет.СчетОрганизации.НомерСчета,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчет.Дата >= &ДатаНач
	|	И ПоступлениеНаРасчетныйСчет.Дата <= &ДатаКон
	|	И ПоступлениеНаРасчетныйСчет.Организация = &Организация
	|	И ПоступлениеНаРасчетныйСчет.ВалютаДокумента = &Валюта
	|	И ПоступлениеНаРасчетныйСчет.СчетОрганизации.НомерСчета В(&СписокСчетов)";
	
	ВыборкаДокументов.УстановитьПараметр("ДатаНач",      НачалоДня(НачалоИнтервалаЗагрузки));
	ВыборкаДокументов.УстановитьПараметр("ДатаКон",      КонецДня(КонецИнтервалаЗагрузки));
	ВыборкаДокументов.УстановитьПараметр("Организация",  Организация);
	ВыборкаДокументов.УстановитьПараметр("СписокСчетов", СписокСчетов);
	
	ВыборкаДокументов.УстановитьПараметр("Валюта", БанковскийСчет.ВалютаДенежныхСредств);
	
	ДокументыНаУдаление = ВыборкаДокументов.Выполнить().Выбрать();
	
	Пока ДокументыНаУдаление.Следующий() Цикл
		
		СтрокаВТаблицеИмпорта = ДокументыКИмпорту.НайтиСтроки(Новый Структура("Документ", ДокументыНаУдаление.Ссылка));
		
		Если СтрокаВТаблицеИмпорта = Неопределено И НЕ ДокументыНаУдаление.НеПодтвержденоВыпискойБанка Тогда
			ОбъектДокументаКУдаление = ДокументыНаУдаление.Ссылка.ПолучитьОбъект();
			ЗадатьПометкуНаУдаление(ОбъектДокументаКУдаление, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // Загрузить

// Процедура устанавливает/снимает пометку удаления с объекта.
//
Процедура ЗадатьПометкуНаУдаление(ОбъектДляПометки, Пометка)
	
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляПометки);
	НазваниеДействия = ?(Пометка, НСтр("ru=' помечен на удаление';uk=' відмічений для вилучення'"), НСтр("ru=' отменена пометка на удаление';uk=' відмінена позначка на вилучення'"));
	
	Попытка
		ОбъектДляПометки.Записать(РежимЗаписиДокумента.Запись);
		ОбъектДляПометки.УстановитьПометкуУдаления(Пометка);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1:%2.';uk='%1:%2.'"), Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2), НазваниеДействия);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1: не %2! Произошли ошибки при записи!';uk='%1: не %2! Відбулися помилки при записі!'"),
			Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2), НазваниеДействия);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

		ОписаниеОшибки = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
		
	КонецПопытки
	
КонецПроцедуры

// Процедура записывает объект в информационную базу данных.
//
Процедура ЗаписатьОбъект(ОбъектДляЗаписи, СтрокаСекции, ЭтоНовыйДокумент, НастройкиПоУмолчаниюДляДокументов, СтекОповещений)
	
	ТипДокумента = ТипЗнч(ОбъектДляЗаписи);
	
	Если ТипДокумента = Тип("ДокументОбъект.СписаниеСРасчетногоСчета") Тогда
		ИмяДокумента = "Списание с расчетного счета";
		ОбъектДляЗаписи.НеПодтвержденоВыпискойБанка = Ложь;
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет") Тогда
		ИмяДокумента = "Поступление на расчетный счет";
	Иначе
		ИмяДокумента = ОбъектДляЗаписи.Метаданные().Синоним;
	КонецЕсли;
	
	Проводить = НастройкиПоУмолчаниюДляДокументов[ИмяДокумента].Проводить;
	УстановитьСвойство(ОбъектДляЗаписи, "Комментарий", НСтр("ru='Загружен из Клиент-Банка';uk='Завантажений із Клієнта-Банку'"),, Истина);
	
	ОбъектМодифицирован = ОбъектДляЗаписи.Модифицированность();
	ОбъектПроведен      = ОбъектДляЗаписи.Проведен;
	
	ВершинаСтека = Неопределено;
	Если ОбъектМодифицирован Тогда
		Попытка
			Если ОбъектПроведен Тогда
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				СтрокаСекции.Проведен = ОбъектДляЗаписи.Проведен;
			Иначе
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			СтрокаСекции.СостояниеДокумента = 0;
				
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1%2.';uk='%1%2.'"), ?(ЭтоНовыйДокумент, НСтр("ru='Создан ';uk='Створений '"), НСтр("ru='Перезаписан ';uk='Перезаписан '")),
				ПолучитьПредставлениеОбъекта(ОбъектДляЗаписи));
			
			СтекОповещений.Добавить(Новый Структура("Текст, Ссылка", СтрокаСообщения, ОбъектДляЗаписи.Ссылка));
			ВершинаСтека = СтекОповещений[СтекОповещений.ВГраница()]
		Исключение
			НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляЗаписи);
			ТекстСообщения  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1%2! Произошли ошибки при записи документа!';uk='%1%2! Відбулися помилки при записі документа!'"),
				Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2),
				?(ЭтоНовыйДокумент, НСтр("ru=' не создан';uk=' не створений'"), НСтр("ru=' не записан';uk=' не записаний'")));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ОписаниеОшибки = ИнформацияОбОшибке();
			ТекстОшибки = НСтр("ru='%1
|%2';uk='%1
|%2'");
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Данные. Изменение';uk='Дані. Зміна'"),
				УровеньЖурналаРегистрации.Ошибка, ОбъектДляЗаписи.Метаданные(),
				?(ЭтоНовыйДокумент, "", ОбъектДляЗаписи.Ссылка),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
					ОписаниеОшибки.Описание,
					?(ЭтоНовыйДокумент, ТекстСообщения, НСтр("ru='Произошли ошибки при записи документа!';uk='Відбулися помилки при записі документа!'"))));
			
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляЗаписи);
	
	Если Проводить
	   И (ОбъектМодифицирован ИЛИ НЕ ОбъектПроведен) Тогда
	   Попытка
			ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);
			
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1%2';uk='%1%2'"), ?(ОбъектПроведен, НСтр("ru='Перепроведен ';uk='Перепроведений '"), НСтр("ru='Проведен ';uk='Проведено '")), НазваниеОбъекта);
			Если ВершинаСтека <> Неопределено Тогда
				ВершинаСтека.Текст = ВершинаСтека.Текст + Символы.ПС + СтрокаСообщения;
			КонецЕсли;
			
			СтрокаСекции.Проведен = ОбъектДляЗаписи.Проведен;
			СтрокаСекции.СостояниеДокумента = 1;
		Исключение
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 не проведен! Произошли ошибки при проведении!';uk='%1 не проведений! Відбулися помилки при проведенні!'"),
				Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ОписаниеОшибки = ИнформацияОбОшибке();
			
			ТекстОшибки = НСтр("ru='%1
|Произошли ошибки при проведении!';uk='%1
|Відбулися помилки при проведенні!'");
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru='Данные. Проведение';uk='Дані. Проведення'"),
				УровеньЖурналаРегистрации.Ошибка, ОбъектДляЗаписи.Метаданные(), ОбъектДляЗаписи.Ссылка,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
				ОписаниеОшибки.Описание));
        КонецПопытки
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьОбъект

// Процедура устанавливает значение свойства.
//
Процедура УстановитьСвойство(Объект, ИмяСвойства, ЗначениеСвойства, ОбязательнаяЗаменаСтарогоЗначения = Ложь, ЭтоНовыйДокумент)
	
	Если ЗначениеСвойства <> Неопределено И Объект[ИмяСвойства] <> ЗначениеСвойства Тогда
		
		Если ЭтоНовыйДокумент
			ИЛИ (НЕ ЗначениеЗаполнено(Объект[ИмяСвойства]) ИЛИ ОбязательнаяЗаменаСтарогоЗначения)
			ИЛИ ТипЗнч(Объект[ИмяСвойства]) = Тип("Булево")
			ИЛИ ТипЗнч(Объект[ИмяСвойства]) = Тип("Дата") Тогда
			
			Объект[ИмяСвойства] = ЗначениеСвойства;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура рассчитывает сумму взаиморасчетов.
//
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ОбъектДокумента, ЭтоНовыйДокумент)
	
	УстановитьСвойство(СтрокаПлатеж, "СуммаВзаиморасчетов",
		РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаПлатеж.СуммаПлатежа, ОбъектДокумента.ВалютаДокумента,
			ОбъектДокумента.ВалютаДокумента,
			1, СтрокаПлатеж.КурсВзаиморасчетов,
			1, СтрокаПлатеж.КратностьВзаиморасчетов)
		,, ЭтоНовыйДокумент);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент, Организация, ВалютаРегламентированногоУчета)
	
	Если ТипЗнч(ОбъектДокумента) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета") Тогда
		ЗаполнитьРеквизитПлатежногоОрдераСписание(
			ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент, Организация, ВалютаРегламентированногоУчета);
	ИначеЕсли ТипЗнч(ОбъектДокумента) = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет") Тогда
		ЗаполнитьРеквизитПлатежногоОрдераПоступление(
			ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент, Организация, ВалютаРегламентированногоУчета);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоОрдераСписание(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент, Организация,ВалютаРегламентированногоУчета)
	
	//Организация
	ДатаВхДокумента = ПолучитьДатуИзСтроки('00010101', ИсходныеДанные.Дата);
	Если ЗначениеЗаполнено(ДатаВхДокумента) Тогда
		УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ДатаВхДокумента,, ЭтоНовыйДокумент);
	Иначе
		УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ИсходныеДанные.ДатаДок,, ЭтоНовыйДокумент);
	КонецЕсли; 
	
	УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерДок,, ЭтоНовыйДокумент);
	УстановитьСвойство(ОбъектДокумента, "Организация", Организация,, ЭтоНовыйДокумент);
	Если ЗначениеЗаполнено(ИсходныеДанные.Списано) Тогда
		УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.Списано,, ЭтоНовыйДокумент);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумента.Дата) Тогда
		УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок,, ЭтоНовыйДокумент);
	КонецЕсли;
	
	
	//ДокументОснование (платежное поручение)
	УстановитьСвойство(ОбъектДокумента, "ДокументОснование", ИсходныеДанные.ДокументОснование,, ЭтоНовыйДокумент);
	
	//Контрагент, ДоговорКонтрагента, СтатьяДвиженияДенежныхСредств
	Если ИсходныеДанные.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент,, ЭтоНовыйДокумент);
	КонецЕсли;
	
	Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
	Иначе
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
	КонецЕсли;
	
	ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
	УстановитьСвойство(СтрокаРасшифровки, "ДоговорКонтрагента",
		?(ИсходныеДанные.Договор = НСтр("ru='Не найден';uk='Не знайдений'"), Неопределено, ИсходныеДанные.Договор),, ЭтоНовыйДокумент);
	Если ОднаСтрокаВРасшифровкеПлатежа Тогда
	
		УстановитьСвойство(СтрокаРасшифровки, "ДоговорКонтрагента",
			?(ИсходныеДанные.Договор = НСтр("ru='Не найден';uk='Не знайдений'"), Неопределено, ИсходныеДанные.Договор),, ЭтоНовыйДокумент);
		Если ЗначениеЗаполнено(ИсходныеДанные.СтатьяДДС) Тогда
			УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств",
				ИсходныеДанные.СтатьяДДС, Истина, ЭтоНовыйДокумент);
		КонецЕсли;
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
			Организация, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам",     СчетаУчета.СчетАвансов,,  ЭтоНовыйДокумент);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентом", СчетаУчета.СчетРасчетов,, ЭтоНовыйДокумент);
		
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаНДС", 				СчетаУчета.СчетУчетаНДСПриобретений,, 				ЭтоНовыйДокумент);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаНДСПодтвержденный", СчетаУчета.СчетУчетаНДСПриобретенийПодтвержденный,, ЭтоНовыйДокумент);
		УстановитьСвойство(СтрокаРасшифровки, "НалоговоеНазначение", 		СчетаУчета.НалоговоеНазначениеПриобретений,, 		ЭтоНовыйДокумент);
		
	КонецЕсли;
	
	//СчетОрганизации, СчетКонтрагента
	УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации,, ЭтоНовыйДокумент);
	Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
		УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента", ИсходныеДанные.СчетКонтрагента,, ЭтоНовыйДокумент);
	КонецЕсли;
	
	//ВалютаДокумента
	УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств,, ЭтоНовыйДокумент);
	
	//СчетБанк
	Если ОбъектДокумента.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Хозрасчетный.ТекущиеСчетаВНациональнойВалюте,, ЭтоНовыйДокумент);
	Иначе
		УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Хозрасчетный.ТекущиеСчетаВИностраннойВалюте,, ЭтоНовыйДокумент);
	КонецЕсли;
	
	//ВидОперации
	УстановитьСвойство(ОбъектДокумента, "ВидОперации", ИсходныеДанные.ВидОперации,,ЭтоНовыйДокумент);
	
	//СуммаДокумента
	УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента, Истина, ЭтоНовыйДокумент);
	
	//РасшифровкаПлатежа
	ЕстьРасчетыСКонтрагентами = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыСКонтрагентами(ОбъектДокумента.ВидОперации);
	ЕстьРасчетыПоКредитам     = УчетДенежныхСредствКлиентСервер.ЕстьРасчетыПоКредитам(ОбъектДокумента.ВидОперации);
	Если ОбъектДокумента.ЭтоНовый() 
		ИЛИ ОднаСтрокаВРасшифровкеПлатежа И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
		
		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			РассчитатьКурсИСуммуВзаиморасчетов(
				СтрокаРасшифровки, ПолучитьВалютуДоговора(СтрокаРасшифровки.ДоговорКонтрагента),
				ОбъектДокумента.Дата, ОбъектДокумента, ЭтоНовыйДокумент);
		КонецЕсли;
			
		Если ЕстьРасчетыСКонтрагентами Тогда
			Если ЗначениеЗаполнено(ИсходныеДанные.СтавкаНДС) Тогда
				СтрокаРасшифровки.СтавкаНДС = ИсходныеДанные.СтавкаНДС;
			ИначеЕсли НЕ УчетнаяПолитика.ПлательщикНДС(Организация, ОбъектДокумента.Дата) Тогда
				СтрокаРасшифровки.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				СтрокаРасшифровки.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
			КонецЕсли;
			
			ЗначениеСтавкиНДС          = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
			СтрокаРасшифровки.СуммаНДС = Окр(СтрокаРасшифровки.СуммаПлатежа*ЗначениеСтавкиНДС /(100 + ЗначениеСтавкиНДС), 2);
		КонецЕсли;
			
	КонецЕсли;

	
	
	//Ответственный
	УстановитьСвойство(ОбъектДокумента, "Ответственный", Пользователи.ТекущийПользователь(),,ЭтоНовыйДокумент);
	
	//НазначениеПлатежа
		
		НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа;
		
	
	УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", НазначениеПлатежа, Истина, ЭтоНовыйДокумент);
	
КонецПроцедуры // ЗаполнитьРеквизитПлатежногоОрдераСписание

Процедура ЗаполнитьРеквизитПлатежногоОрдераПоступление(ОбъектДокумента, ИсходныеДанные, ЭтоНовыйДокумент, Организация, ВалютаРегламентированногоУчета)
	
	//Организация
	ДатаВхДокумента = ПолучитьДатуИзСтроки('00010101', ИсходныеДанные.Дата);
	Если ЗначениеЗаполнено(ДатаВхДокумента) Тогда
		УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ДатаВхДокумента,,        ЭтоНовыйДокумент);
	Иначе
		УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ИсходныеДанные.ДатаДок,, ЭтоНовыйДокумент);
	КонецЕсли; 
	
	УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента",   ИсходныеДанные.НомерДок,, ЭтоНовыйДокумент);
	УстановитьСвойство(ОбъектДокумента, "Организация", Организация,, ЭтоНовыйДокумент);
	
	Если ЗначениеЗаполнено(ИсходныеДанные.Поступило) Тогда
		УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.Поступило,, ЭтоНовыйДокумент);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектДокумента.Дата) Тогда
		УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок,, ЭтоНовыйДокумент);
	КонецЕсли;
	
	
	//Контрагент, ДоговорКонтрагента, СтатьяДвиженияДенежныхСредств
	УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент,, ЭтоНовыйДокумент);
	Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
	Иначе
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
	КонецЕсли;
	
	ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
	УстановитьСвойство(СтрокаРасшифровки, "ДоговорКонтрагента",
		?(ИсходныеДанные.Договор = НСтр("ru='Не найден';uk='Не знайдений'"), Неопределено, ИсходныеДанные.Договор),, ЭтоНовыйДокумент);
	
	Если ОднаСтрокаВРасшифровкеПлатежа Тогда
		УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", ИсходныеДанные.СтатьяДДС,, ЭтоНовыйДокумент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент) И ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) Тогда
		
		СчетаУчета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(
			Организация, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам",     СчетаУчета.СчетАвансовПокупателя,,  ЭтоНовыйДокумент);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентом", СчетаУчета.СчетРасчетовПокупателя,, ЭтоНовыйДокумент);
		
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаНДС", 				СчетаУчета.СчетУчетаНДСПродаж,, 				ЭтоНовыйДокумент);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаНДСПодтвержденный", СчетаУчета.СчетУчетаНДСПродажПодтвержденный,, ЭтоНовыйДокумент);
		УстановитьСвойство(СтрокаРасшифровки, "НалоговоеНазначение", 		СчетаУчета.НалоговоеНазначениеПродаж,, 		ЭтоНовыйДокумент);
		
	КонецЕсли;
	
	//СчетОрганизации,СчетКонтрагента
	УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации,, ЭтоНовыйДокумент);
	Если ТипЗнч(ИсходныеДанные.СчетКонтрагента) <> Тип("Строка") Тогда
		УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента", ИсходныеДанные.СчетКонтрагента,, ЭтоНовыйДокумент);
	КонецЕсли;
	
	//ВалютаДокумента
	УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств,, ЭтоНовыйДокумент);
	
	//СчетБанк
	Если ОбъектДокумента.ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
		УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Хозрасчетный.ТекущиеСчетаВНациональнойВалюте,, ЭтоНовыйДокумент);
	Иначе
		УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Хозрасчетный.ТекущиеСчетаВИностраннойВалюте,, ЭтоНовыйДокумент);
	КонецЕсли;
	
	//ВидОперации
	УстановитьСвойство(ОбъектДокумента, "ВидОперации", ИсходныеДанные.ВидОперации,, ЭтоНовыйДокумент);
	
	//СуммаДокумента
	УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента, Истина, ЭтоНовыйДокумент);
	Если ОбъектДокумента.ЭтоНовый()
		ИЛИ ОднаСтрокаВРасшифровкеПлатежа И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
		
		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		РассчитатьКурсИСуммуВзаиморасчетов(
			СтрокаРасшифровки,
			ПолучитьВалютуДоговора(СтрокаРасшифровки.ДоговорКонтрагента), ОбъектДокумента.Дата, ОбъектДокумента, ЭтоНовыйДокумент);
		
		Если НЕ УчетнаяПолитика.ПлательщикНДС(Организация, ОбъектДокумента.Дата) Тогда
			СтрокаРасшифровки.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Иначе
			СтрокаРасшифровки.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		КонецЕсли;
		
		ЗначениеСтавкиНДС     		= УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
		СтрокаРасшифровки.СуммаНДС  = СтрокаРасшифровки.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
		
	КонецЕсли;
	
	//Ответственный
	УстановитьСвойство(ОбъектДокумента, "Ответственный", Пользователи.ТекущийПользователь(),, ЭтоНовыйДокумент);
	
	//НазначениеПлатежа
		
		НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа;
		
	
	УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", НазначениеПлатежа, Истина, ЭтоНовыйДокумент);
	
КонецПроцедуры // ЗаполнитьРеквизитПлатежногоОрдераПоступление

Процедура РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатеж, ТекущаяВалютаВзаиморасчетов, ДатаКурса, ОбъектДокумента, ЭтоНовыйДокумент)
	
	СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
		ТекущаяВалютаВзаиморасчетов, ДатаКурса);
	
	УстановитьСвойство(СтрокаПлатеж, "КурсВзаиморасчетов",      СтруктураКурсаВзаиморасчетов.Курс,,      ЭтоНовыйДокумент);
	УстановитьСвойство(СтрокаПлатеж, "КратностьВзаиморасчетов", СтруктураКурсаВзаиморасчетов.Кратность,, ЭтоНовыйДокумент);
	
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ОбъектДокумента, ЭтоНовыйДокумент);
	
КонецПроцедуры

Процедура СоздатьКонтрагентов(ДеревоКонтрагентов, ГруппаДляНовыхКонтрагентов, Организация, МассивКонтрагентов, СтекОповещений) Экспорт
	
	МассивСтрок        = Новый Массив;
	МассивКонтрагентов = Новый Массив;
	
	Для каждого СтрокаДерева Из ДеревоКонтрагентов.Строки Цикл
		
		Если СтрокаДерева.Пометка Тогда
			
			НовыйЭлемент = СоздатьКонтрагента(СтрокаДерева,
				ГруппаДляНовыхКонтрагентов,
				Организация, СтекОповещений);
			
			Если НЕ НовыйЭлемент.Пустая() Тогда
				МассивКонтрагентов.Добавить(НовыйЭлемент);
				МассивСтрок.Добавить(СтрокаДерева);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Строка Из МассивСтрок Цикл
		
		ДеревоКонтрагентов.Строки.Удалить(Строка);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция создает контрагента и его реквизиты.
//
Функция СоздатьКонтрагента(СтрокаКонтрагент, ГруппаДляНовыхКонтрагентов, Организация, СтекОповещений = Неопределено)
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если СтекОповещений = Неопределено Тогда
		СтекОповещений = Новый Массив;
	КонецЕсли;
	
	// Эти элементы есть у всех справочников.
	Если НЕ ЗначениеЗаполнено(СтрокаКонтрагент.Реквизит) Тогда
		
		НовыйЭлемент = Справочники.Контрагенты.СоздатьЭлемент();
		
		НовыйЭлемент.Наименование       = СтрокаКонтрагент.Представление;
		НовыйЭлемент.НаименованиеПолное = НовыйЭлемент.Наименование;
		НовыйЭлемент.Родитель           = ГруппаДляНовыхКонтрагентов;
		НовыйЭлемент.КодПоЕДРПОУ        = СтрокаКонтрагент.Строки[1].Значение;
		НовыйЭлемент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		
		Если НовыйЭлемент.ПолучитьСсылкуНового().Пустая() Тогда
			НовыйЭлемент.УстановитьСсылкуНового(Справочники.Контрагенты.ПолучитьСсылку());
		КонецЕсли;
		
		НовыйЭлемент.ГоловнойКонтрагент = НовыйЭлемент.ПолучитьСсылкуНового();
		НовыйЭлемент.Записать();
		
		СтекОповещений.Добавить(Новый Структура("Ссылка", НовыйЭлемент.Ссылка));
		
	Иначе
		
		НовыйЭлемент = СтрокаКонтрагент.Реквизит.ПолучитьОбъект();
		
	КонецЕсли;
	
	Для каждого Строка Из СтрокаКонтрагент.Строки Цикл
		
		Если Строка.Представление = НСтр("ru='Счет';uk='Рахунок'") Тогда
			
			Попытка
				
				НомерСчета = Строка.Значение;
				НовыйСчет  = Справочники.БанковскиеСчета.СоздатьЭлемент();
				
				РССчет = Строка.Строки;
				
				ВалютаСчета = "";
				КодВалюты = РССчет[2].Значение; //Валюта платежа
				Если ЗначениеЗаполнено(КодВалюты) Тогда
					ВалютаСчета = Справочники.Валюты.НайтиПоКоду(КодВалюты);
				КонецЕсли;	
				
				НовыйСчет.НомерСчета = НомерСчета;
				НовыйСчет.Владелец   = НовыйЭлемент.Ссылка;
				НовыйСчет.ВидСчета   = "Расчетный";
				НовыйСчет.ВалютаДенежныхСредств = ?(ЗначениеЗаполнено(ВалютаСчета), ВалютаСчета, ВалютаРегламентированногоУчета);
				
				
					// Банк контрагента.
					НовыйБанк = НайтиБанк(РССчет[1].Значение); // МФО
					Если НовыйБанк = Справочники.Банки.ПустаяСсылка() Тогда
						НовыйБанк = Справочники.Банки.СоздатьЭлемент();
						НовыйБанк.Наименование = РССчет[0].Значение;
						НовыйБанк.Код          = РССчет[1].Значение;
						НовыйБанк.Записать();
					КонецЕсли;
					
					НовыйСчет.Банк = НовыйБанк.Ссылка;
				
				Если ЗначениеЗаполнено(НовыйСчет.Банк) Тогда
					БанкДляНаименования    = НовыйСчет.Банк;
					НовыйСчет.Наименование = Лев(НовыйСчет.НомерСчета + ", " + БанкДляНаименования, 100);
					НовыйСчет.Записать();

					Если НЕ ЗначениеЗаполнено(НовыйЭлемент.ОсновнойБанковскийСчет) Тогда
						НовыйЭлемент.ОсновнойБанковскийСчет = НовыйСчет.Ссылка;
					КонецЕсли;
					
					СтекОповещений.Добавить(Новый Структура("Ссылка", НовыйСчет.Ссылка));
				Иначе
					ВызватьИсключение НСтр("ru='У банковского счета не определено поле Банк';uk='У банківського рахунки не визначено поле Банк'");
				КонецЕсли;
				
			Исключение
				
				ТекстСообщения = НСтр("ru='Не удалось создать банковский счет контрагента!';uk='Не вдалося створити банківський рахунок контрагента!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
				ОписаниеОшибки = ИнформацияОбОшибке();
				
				ТекстОшибки = НСтр("ru='%1
|Произошли ошибки при записи!';uk='%1
|Відбулися помилки при записі!'");
			
				ЗаписьЖурналаРегистрации(
					НСтр("ru='Данные. Изменение';uk='Дані. Зміна'"),
					УровеньЖурналаРегистрации.Ошибка, НовыйСчет.Метаданные(),,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
						ОписаниеОшибки.Описание));
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если Строка.Представление = НСтр("ru='Договор';uk='Договір'") И Строка.Пометка Тогда
			
			Попытка
				
				НайденныйДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
				НайденныйДоговорОбъект.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
				
				КодВалюты = Строка.Строки[3].Значение; //Валюта платежа				
				
				Если ЗначениеЗаполнено(КодВалюты) Тогда
					НайденныйДоговорОбъект.ВалютаВзаиморасчетов = Справочники.Валюты.НайтиПоКоду(КодВалюты);
				КонецЕсли;	
				
				Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.ВалютаВзаиморасчетов) Тогда
					НайденныйДоговорОбъект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.ВедениеВзаиморасчетов) Тогда
					НайденныйДоговорОбъект.ВедениеВзаиморасчетов 	= Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
					НайденныйДоговорОбъект.ВедениеВзаиморасчетовНУ 	= Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.Организация) Тогда
					НайденныйДоговорОбъект.Организация = Организация;
				КонецЕсли;
				
				НайденныйДоговорОбъект.Владелец = НовыйЭлемент.Ссылка;
				Вид = Строка.Значение;
				Если Вид = НСтр("ru='С покупателем';uk='З покупцем'") Тогда
					НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
				ИначеЕсли Вид = НСтр("ru='С поставщиком';uk='З постачальником'") Тогда
					НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
				Иначе
					НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
				КонецЕсли;
				
				НайденныйДоговорОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Основной договор (%1).';uk='Основний договір (%1).'"), НРег(Вид));
				НайденныйДоговорОбъект.Записать();
				НайденныйДоговор = НайденныйДоговорОбъект.Ссылка;
				
				Если НЕ ЗначениеЗаполнено(НовыйЭлемент.ОсновнойДоговорКонтрагента) Тогда
					НовыйЭлемент.ОсновнойДоговорКонтрагента = НайденныйДоговор;
				КонецЕсли;
				
				СтекОповещений.Добавить(Новый Структура("Ссылка", НайденныйДоговор));
			Исключение
				
				ТекстСообщения = НСтр("ru='Не удалось создать договор контрагента!';uk='Не вдалося створити договір контрагента!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
				ОписаниеОшибки = ИнформацияОбОшибке();
			
				ТекстОшибки = НСтр("ru='%1
|Произошли ошибки при записи!';uk='%1
|Відбулися помилки при записі!'");
			
				ЗаписьЖурналаРегистрации(
					НСтр("ru='Данные. Изменение';uk='Дані. Зміна'"),
					УровеньЖурналаРегистрации.Ошибка, НайденныйДоговорОбъект.Метаданные(),,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
						ОписаниеОшибки.Описание));
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НовыйЭлемент.Записать();
	
	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции // СоздатьКонтрагента



Функция НайтиБанк(МФО)
	
	НайденныйБанк = Справочники.Банки.ПустаяСсылка();
	
	Если НЕ ПустаяСтрока(МФО) Тогда
		НайденныйБанк = Справочники.Банки.НайтиПоКоду(МФО);
	КонецЕсли;
	
	Возврат НайденныйБанк;

КонецФункции


// Функция возвращает представление объекта.
//
Функция ПолучитьПредставлениеОбъекта(Объект)
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеПоручение") Тогда
		НазваниеОбъекта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='документ ""Платежное поручение"" № %1 от %2';uk='документ ""Платіжне доручення"" № %1 від %2'"), СокрЛП(Объект.Номер), Объект.Дата);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета") Тогда
		НазваниеОбъекта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='документ ""Списание с банковского счета"" № %1 от %2';uk='документ ""Списання з банківського рахунку"" № %1 від %2'"), СокрЛП(Объект.Номер), Объект.Дата);
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет") Тогда
		НазваниеОбъекта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='документ ""Поступление на банковский счет"" № %1 от %2';uk='документ ""Надходження на банківський рахунок"" № %1 від %2'"), СокрЛП(Объект.Номер), Объект.Дата);
		
		
	Иначе
		НазваниеОбъекта = НСтр("ru='объект';uk=""об'єкт""");
	КонецЕсли;
	
	Возврат НазваниеОбъекта;
	
КонецФункции

// Функция возвращает результат проверки загружаемого документа.
//
Функция ПроверитьДокументДляЗагрузки(СтруктураДокумента)
	
	Результат = "";
	
	Если СтруктураДокумента.Готовность > 3 Тогда
		Результат = СтруктураДокумента.ОписаниеОшибок;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьНовыйПлатежныйДокумент(ВидДокумента, Номер, Дата)
	
	НовыйДокумент = Документы[ВидДокумента].СоздатьДокумент();
	
	Если ВидДокумента = "ПлатежноеПоручение" ИЛИ ВидДокумента = "ПлатежноеТребование" Тогда
		НовыйДокумент.Номер = ПривестиНомер(НовыйДокумент.Номер, Номер);
		НовыйДокумент.Дата  = Дата;
		
	Иначе
		НовыйДокумент.НомерВходящегоДокумента = Номер;
		НовыйДокумент.ДатаВходящегоДокумента = Дата;
		
	КонецЕсли;
	
	Возврат НовыйДокумент;
	
КонецФункции

Функция ПривестиНомер(НомерДокумента, Номер)
	
	НовыйНомер  = "";
	ДлинаНомера = СтрДлина(Номер);
	ДлинаНомераДокумента = СтрДлина(НомерДокумента);
	
	Возврат Лев(НомерДокумента, ДлинаНомераДокумента - ДлинаНомера) + Номер;
	
КонецФункции

Функция ПолучитьВалютуДоговора(ДоговорКонтрагента)
	
	ЗапросПоиска = Новый Запрос;
	ЗапросПоиска.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &Ссылка";
	
	ЗапросПоиска.УстановитьПараметр("Ссылка", ДоговорКонтрагента);
	Выборка = ЗапросПоиска.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВалютаВзаиморасчетов;
	Иначе
		Возврат Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
КонецФункции


Функция ЗаполнитьКешСвойств()
	
	ИмпортНеПустые_ПлатежноеПоручение =
		"Номер, Дата, Сумма, ПлательщикСчет, ПлательщикОКПО, ПолучательСчет, ПолучательОКПО";
	
	
	Импорт_НеПустые = Новый Массив;
	
	Импорт_НеПустые.Добавить(Новый Структура(ИмпортНеПустые_ПлатежноеПоручение));
	
	Возврат Импорт_НеПустые;
	
КонецФункции

Процедура ОчиститьНенайденныеПоля(ДокументыКИмпорту)
	
	Для каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		СтрокаДокумента.ОписаниеОшибок = "";
		Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("Строка") Тогда
			СтрокаДокумента.Контрагент = Неопределено;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаДокумента.СчетКонтрагента) = Тип("Строка") Тогда
			СтрокаДокумента.СчетКонтрагента = Неопределено;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаДокумента.Договор) = Тип("Строка") Тогда
			СтрокаДокумента.Договор = Неопределено;
		КонецЕсли;
		
		СтрокаДокумента.ДоговорКонтрагентаНеНайден = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьНастройкиПрограммыКлиентаБанка(Организация, БанковскийСчет) Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("НастройкиЗагружены",                       Ложь);
	Настройки.Вставить("Кодировка",                                "Windows");
	Настройки.Вставить("Программа",                                "");
	Настройки.Вставить("ФайлВыгрузки",                             "");
	Настройки.Вставить("ФайлЗагрузки",                             "");
	Настройки.Вставить("Платежное_Поручение",                      Истина);
	Настройки.Вставить("Платежное_Требование",                     Ложь);
	Настройки.Вставить("СоздаватьНенайденныеЭлементы",             Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОбменаСКлиентомБанка.Программа,
	|	НастройкиОбменаСКлиентомБанка.Кодировка,
	|	НастройкиОбменаСКлиентомБанка.ФайлЗагрузки,
	|	НастройкиОбменаСКлиентомБанка.ФайлВыгрузки,
	|	НастройкиОбменаСКлиентомБанка.ВидыВыгружаемыхПлатДокументов,
	|	НастройкиОбменаСКлиентомБанка.ОтключитьАвтоматическоеСозданиеНенайденныхЭлементов
	|ИЗ
	|	РегистрСведений.НастройкиОбменаСКлиентомБанка КАК НастройкиОбменаСКлиентомБанка
	|ГДЕ
	|	НастройкиОбменаСКлиентомБанка.БанковскийСчет = &Счет
	|	И НастройкиОбменаСКлиентомБанка.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Счет",        БанковскийСчет);
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Настройки.Вставить("НастройкиЗагружены",                       Истина);
		Настройки.Вставить("Кодировка",                                Выборка.Кодировка);
		Настройки.Вставить("Программа",                                Выборка.Программа);
		Настройки.Вставить("ФайлВыгрузки",                             Выборка.ФайлВыгрузки);
		Настройки.Вставить("ФайлЗагрузки",                             Выборка.ФайлЗагрузки);
		Настройки.Вставить("СоздаватьНенайденныеЭлементы",             НЕ Выборка.ОтключитьАвтоматическоеСозданиеНенайденныхЭлементов);
		
		ВидыВыгружаемыхПлатДокументов = Выборка.ВидыВыгружаемыхПлатДокументов.Получить();
		Если ВидыВыгружаемыхПлатДокументов <> Неопределено Тогда
			Для каждого Вид Из ВидыВыгружаемыхПлатДокументов Цикл
				Настройки.Вставить(СтрЗаменить(Вид.Документ, " ", "_"), Вид.Пометка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат Настройки;
	
КонецФункции

/////////////////////////////////////////////////////////////////////
// ФОНОВОЕ ВЫПОЛНЕНИЕ

Процедура ФоноваяЧтениеДокументовКИмпорту(СтруктураПараметров, АдресХранилища) Экспорт
	
	НомерСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.БанковскийСчет, "НомерСчета");
	НастройкиПоУмолчаниюДляДокументов = ПолучитьСтруктуруНастроек(СтруктураПараметров.НастройкаЗаполнения);
	
	КодВалютыБанковскогоСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураПараметров.БанковскийСчет, "ВалютаДенежныхСредств.Код");
	
	ДанныеДляЗаполнения  = Новый Структура;
	
	КешСвойствДокументов = ЗаполнитьКешСвойств();
	НайденКонецФайла     = НЕ СтруктураПараметров.ТребуетсяПовторноеЧтениеФайла;
	Если СтруктураПараметров.ТребуетсяПовторноеЧтениеФайла Тогда
		ИмяВременногоФайла  = ПолучитьИмяВременногоФайла("xml");
		ДвоичныеДанныеФайла = СтруктураПараметров.ДвоичныеДанныеФайла;
		ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
		
		НайденКонецФайла = РазобратьФайлИмпортаXML(
							СтруктураПараметров.ДокументыКИмпорту,
							СтруктураПараметров.СтруктураДанныхИмпорта,
							СтруктураПараметров.ВыводитьСообщения,
							НомерСчета,
							КодВалютыБанковскогоСчета,
							СтруктураПараметров.Кодировка,
							СтруктураПараметров.Организация,
							СтруктураПараметров.Импорт_Заголовок,
							СтруктураПараметров.Импорт_РасчетныеСчета,
							ИмяВременногоФайла,
							СтруктураПараметров.СоздаватьНенайденныеЭлементы,
							СтруктураПараметров.СтекОповещений);
	Иначе
		ОчиститьНенайденныеПоля(СтруктураПараметров.ДокументыКИмпорту);
	КонецЕсли;
	
	Если НайденКонецФайла Тогда
		ОпределитьСсылочныеДанные(КешСвойствДокументов,
							СтруктураПараметров.ДокументыКИмпорту,
							СтруктураПараметров.СтруктураДанныхИмпорта,
							СтруктураПараметров.Организация,
							СтруктураПараметров.БанковскийСчет,
							СтруктураПараметров.ДеревоКонтрагентов,
							НастройкиПоУмолчаниюДляДокументов,
							СтруктураПараметров.СоздаватьНенайденныеЭлементы,
							СтруктураПараметров.СтекОповещений);
		ДанныеДляЗаполнения.Вставить("СостояниеЗагрузки", 1);
	Иначе
		ДанныеДляЗаполнения.Вставить("СостояниеЗагрузки", 0);
	КонецЕсли;
	
	ДанныеДляЗаполнения.Вставить("ДокументыКИмпорту",     СтруктураПараметров.ДокументыКИмпорту);
	ДанныеДляЗаполнения.Вставить("ДеревоКонтрагентов",    СтруктураПараметров.ДеревоКонтрагентов);
	ДанныеДляЗаполнения.Вставить("Импорт_Заголовок",      СтруктураПараметров.Импорт_Заголовок);
	ДанныеДляЗаполнения.Вставить("Импорт_РасчетныеСчета", СтруктураПараметров.Импорт_РасчетныеСчета);
	ДанныеДляЗаполнения.Вставить("СтекОповещений",        СтруктураПараметров.СтекОповещений);
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения,    АдресХранилища);
	
КонецПроцедуры

Процедура ФоноваяЗагрузкаДокументовКИмпорту(СтруктураПараметров, АдресХранилища) Экспорт
	
	НастройкиПоУмолчаниюДляДокументов = ПолучитьСтруктуруНастроек(СтруктураПараметров.НастройкаЗаполнения);
	
	ДанныеДляЗаполнения = Новый Структура;
	
	Загрузить(СтруктураПараметров.ДокументыКИмпорту,
			  СтруктураПараметров.Импорт_Заголовок,
			  СтруктураПараметров.Организация,
			  СтруктураПараметров.Импорт_РасчетныеСчета,
			  СтруктураПараметров.ИспользоватьГраницуОбработки,
			  НастройкиПоУмолчаниюДляДокументов,
			  СтруктураПараметров.ДатаГраницыОбработки,
			  СтруктураПараметров.БанковскийСчет,
			  СтруктураПараметров.СтекОповещений);
	
	ДанныеДляЗаполнения.Вставить("ДокументыКИмпорту",  СтруктураПараметров.ДокументыКИмпорту);
	ДанныеДляЗаполнения.Вставить("СтекОповещений",     СтруктураПараметров.СтекОповещений);
	ДанныеДляЗаполнения.Вставить("СостояниеЗагрузки",  2);
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ФоноваяЗагрузкаКонтрагентовИДокументов(СтруктураПараметров, АдресХранилища) Экспорт
	
	НастройкиПоУмолчаниюДляДокументов = ПолучитьСтруктуруНастроек(СтруктураПараметров.НастройкаЗаполнения);
	
	МассивСтрок = СтруктураПараметров.ДеревоКонтрагентов.Строки.НайтиСтроки(
		Новый Структура("Пометка", Ложь), Истина);
	
	Для инд = 0 По МассивСтрок.ВГраница() Цикл
		МассивСтрок[инд].Пометка = Истина;
	КонецЦикла;
	
	ДанныеДляЗаполнения  = Новый Структура;
	КешСвойствДокументов = ЗаполнитьКешСвойств();
	
	СоздатьКонтрагентов(СтруктураПараметров.ДеревоКонтрагентов,
						СтруктураПараметров.ГруппаДляНовыхКонтрагентов,
						СтруктураПараметров.Организация,
						СтруктураПараметров.МассивКонтрагентов,
						СтруктураПараметров.СтекОповещений);
	
	ДанныеДляЗаполнения.Вставить("ДеревоКонтрагентов", СтруктураПараметров.ДеревоКонтрагентов);
	ДанныеДляЗаполнения.Вставить("МассивКонтрагентов", СтруктураПараметров.МассивКонтрагентов);
	
	ОчиститьНенайденныеПоля(СтруктураПараметров.ДокументыКИмпорту);
	ОпределитьСсылочныеДанные(КешСвойствДокументов,
							СтруктураПараметров.ДокументыКИмпорту,
							СтруктураПараметров.СтруктураДанныхИмпорта,
							СтруктураПараметров.Организация,
							СтруктураПараметров.БанковскийСчет,
							СтруктураПараметров.ДеревоКонтрагентов,
							НастройкиПоУмолчаниюДляДокументов,
							Истина,
							СтруктураПараметров.СтекОповещений);
	
	Загрузить(СтруктураПараметров.ДокументыКИмпорту,
			  СтруктураПараметров.Импорт_Заголовок,
			  СтруктураПараметров.Организация,
			  СтруктураПараметров.Импорт_РасчетныеСчета,
			  СтруктураПараметров.ИспользоватьГраницуОбработки,
			  НастройкиПоУмолчаниюДляДокументов,
			  СтруктураПараметров.ДатаГраницыОбработки,
			  СтруктураПараметров.БанковскийСчет,
			  СтруктураПараметров.СтекОповещений);
	
	ДанныеДляЗаполнения.Вставить("ДокументыКИмпорту",  СтруктураПараметров.ДокументыКИмпорту);
	ДанныеДляЗаполнения.Вставить("СтекОповещений",     СтруктураПараметров.СтекОповещений);
	ДанныеДляЗаполнения.Вставить("СостояниеЗагрузки",  2);
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ФоноваяЗагрузкаКонтрагентов(СтруктураПараметров, АдресХранилища) Экспорт
	
	ДанныеДляЗаполнения = Новый Структура;
	
	СоздатьКонтрагентов(СтруктураПараметров.ДеревоКонтрагентов,
						СтруктураПараметров.ГруппаДляНовыхКонтрагентов,
						СтруктураПараметров.Организация,
						СтруктураПараметров.МассивКонтрагентов,
						СтруктураПараметров.СтекОповещений);
	
	ДанныеДляЗаполнения.Вставить("ДеревоКонтрагентов", СтруктураПараметров.ДеревоКонтрагентов);
	ДанныеДляЗаполнения.Вставить("МассивКонтрагентов", СтруктураПараметров.МассивКонтрагентов);
	ДанныеДляЗаполнения.Вставить("СтекОповещений",     СтруктураПараметров.СтекОповещений);
	ПоместитьВоВременноеХранилище(ДанныеДляЗаполнения, АдресХранилища);
	
КонецПроцедуры

#КонецЕсли