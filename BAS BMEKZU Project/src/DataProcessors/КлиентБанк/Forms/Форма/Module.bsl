
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем ТекущееЗначениеЯчейкиРедактированияДоИзменения;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКнопкиЗагрузить(Форма)
	
	Элементы = Форма.Элементы;
	Элементы.КомандаЗагрузить.Доступность =  Форма.КоличествоКЗагрузке > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()
	
	Элементы.ДокументыКИмпортуПоказатьОшибки.Видимость      = Объект.СоздаватьНенайденныеЭлементы;
	Элементы.ДокументыКИмпортуСоздатьКонтрагентов.Видимость = НЕ Объект.СоздаватьНенайденныеЭлементы;
	Элементы.ГруппаСообщенияОбОшибке.Видимость              = НЕ Объект.СоздаватьНенайденныеЭлементы;
	
	Элементы.ДекорацияОтчетОВыгрузке.Доступность  = ЭкспортПроизведен;
	Элементы.ДекорацияВыгруженныйФайл.Доступность = ЭкспортПроизведен;
	Элементы.ДекорацияЗагружаемыйФайл.Доступность = ЗначениеЗаполнено(Объект.ФайлЗагрузки);
	
	УстановитьДоступностьКнопкиЗагрузить(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере()
	
	
	
	ОткрытаСтраницаВыгрузки = Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыгрузка;
	
		Элементы.КомандаВыгрузить.КнопкаПоУмолчанию   = ОткрытаСтраницаВыгрузки;
	
	Элементы.КомандаЗагрузить.КнопкаПоУмолчанию       = НЕ ОткрытаСтраницаВыгрузки;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьЭлементовВыбораФайлов()
	
	Элементы.ФайлВыгрузки.Видимость             = ВозможностьВыбораФайлов;
	Элементы.ДекорацияФайлВыгрузки.Видимость    = ВозможностьВыбораФайлов;
	Элементы.ФайлЗагрузки.Видимость             = ВозможностьВыбораФайлов;
	Элементы.ДекорацияФайлЗагрузки.Видимость    = ВозможностьВыбораФайлов;
	Элементы.ДекорацияЗагружаемыйФайл.Видимость = ВозможностьВыбораФайлов;
	Элементы.ДекорацияВыгруженныйФайл.Видимость = ВозможностьВыбораФайлов;
	Элементы.ДокументыКИмпортуКомандаПрочитатьДанныеИзФайла.Видимость = ВозможностьВыбораФайлов;
	
	Если ВозможностьВыбораФайлов Тогда
		Элементы.ГруппаУправлениеЗагрузкой.ТекущаяСтраница = Элементы.ГруппаЗагрузкаТонкийКлиент;
	Иначе
		Элементы.ГруппаУправлениеЗагрузкой.ТекущаяСтраница = Элементы.ГруппаЗагрузкаВебКлиент;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКнопкуПоУмолчанию(ОткрытаСтраницаВыгрузки)
	
		Элементы.КомандаВыгрузить.КнопкаПоУмолчанию   = ОткрытаСтраницаВыгрузки;
	
	Элементы.КомандаЗагрузить.КнопкаПоУмолчанию       = НЕ ОткрытаСтраницаВыгрузки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДокументыКИмпортуКонтрагентПриИзмененииСервер(ТекущиеДанные, Знач СоздаватьНенайденныеЭлементы)
	
	Если ТипЗнч(ТекущиеДанные.СчетКонтрагента) = Тип("Строка") Тогда
		СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			СчетКонтрагента, ТекущиеДанные.Контрагент, ТекущиеДанные.ВалютаРегламентированногоУчета);
		Если СчетКонтрагента <> Справочники.БанковскиеСчета.ПустаяСсылка() Тогда
			ТекущиеДанные.СчетКонтрагента = СчетКонтрагента;
		КонецЕсли;
	Иначе
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(
			ТекущиеДанные.СчетКонтрагента, ТекущиеДанные.Контрагент, ТекущиеДанные.ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	СписокВидовДоговоров = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(ТекущиеДанные.ВидОперации);
	
	Если ТипЗнч(ТекущиеДанные.Договор) = Тип("Строка") Тогда
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		УстановитьДоговорКонтрагента(
			ДоговорКонтрагента, ТекущиеДанные.Контрагент, ТекущиеДанные.Организация, СписокВидовДоговоров);
		Если ДоговорКонтрагента <> Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
			ТекущиеДанные.Договор = ДоговорКонтрагента;
		КонецЕсли;
	Иначе
		УстановитьДоговорКонтрагента(
			ТекущиеДанные.Договор, ТекущиеДанные.Контрагент, ТекущиеДанные.Организация, СписокВидовДоговоров);
	КонецЕсли;
	
	ОбновитьСостояниеСтроки(
		ТекущиеДанные.ДоговорКонтрагентаНеНайден, ТекущиеДанные.Готовность, ТекущиеДанные.Договор,
		СоздаватьНенайденныеЭлементы, ТекущиеДанные.ВидОперации, ТекущиеДанные.ОписаниеОшибок,
		ТекущиеДанные.Контрагент, ТекущиеДанные.СчетКонтрагента);
	
	Возврат ТекущиеДанные;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьСостояниеСтроки(ДоговорКонтрагентаНеНайден, Готовность, Договор,
		Знач СоздаватьНенайденныеЭлементы, Знач ВидОперации, Знач ОписаниеОшибок, Знач Контрагент, Знач СчетКонтрагента)
	
	Если ВидОперации    = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
		
		ДоговорКонтрагентаНеНайден = Ложь;
		Договор = "";
		Возврат;
	КонецЕсли;
	
	ТипСтрока = Тип("Строка");
	ДоговорКонтрагентаНеНайден = ТипЗнч(Договор) = ТипСтрока;
	
	Если НЕ СоздаватьНенайденныеЭлементы Тогда
		СтрокаНеГотова = ДоговорКонтрагентаНеНайден ИЛИ
			НЕ(ТипЗнч(Контрагент)      <> ТипСтрока И ЗначениеЗаполнено(Контрагент)
			 И ТипЗнч(СчетКонтрагента) <> ТипСтрока И ЗначениеЗаполнено(СчетКонтрагента));
		
		Готовность = ?(СтрокаНеГотова, 3, 0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОшибкуВЖурнал(ТекстСообщения, ОписаниеОшибки)
	
	ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки.Описание);
	
КонецПроцедуры

// Процедура загружает из текстового файла данные в таблицу импорта
//
&НаКлиенте
Процедура ПрочитатьДанныеИзФайла(ВыводитьСообщения = Истина, ТребуетсяПовторноеЧтениеФайла = Истина) Экспорт
	Перем АдресФайлаСтарый;
	
	Если НЕ БанковскийСчетЗаполнен() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТребуетсяПовторноеЧтениеФайла Тогда
		АдресФайлаСтарый = АдресФайла;
		АдресФайла       = Неопределено;
	КонецЕсли;
	
	Если ВыводитьСообщения И ТребуетсяПовторноеЧтениеФайла Тогда
		ОчиститьСообщения();
	КонецЕсли;
	
		
	Если ВозможностьВыбораФайлов Тогда
		
		Если ТребуетсяПовторноеЧтениеФайла Тогда
			
			// Вариант для установленного расширения для работы с файлами
			Если НЕ ЗначениеЗаполнено(Объект.ФайлЗагрузки) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Не указан файл данных для загрузки в Бухгалтерию';uk='Не вказаний файл даних для завантаження в Бухгалтерію'")
					,, "Объект.ФайлЗагрузки");
				Возврат;
			КонецЕсли;
			
			ФайлВыгрузки = Новый Файл(Объект.ФайлЗагрузки);
			Если НЕ ФайлВыгрузки.Существует() Тогда
				ТекстСообщения = НСтр("ru='Файл данных для загрузки в Бухгалтерию не обнаружен';uk='Файл даних для завантаження в Бухгалтерію не виявлено'");
				Если ВыводитьСообщения Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения
						,, "Объект.ФайлЗагрузки");
				Иначе
					ПоказатьПредупреждение(, ТекстСообщения);
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
			
			Если ФайлВыгрузки.ЭтоКаталог() Тогда
				ТекстСообщения = НСтр("ru='Файл данных для загрузки в Бухгалтерию не корректен - выбран ""каталог"".
|Выберите файл загрузки';uk='Файл даних для завантаження в Бухгалтерію не коректний - обраний ""каталог"".
|Виберіть файл завантаження'");
				Если ВыводитьСообщения Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения
						,, "Объект.ФайлЗагрузки");
				Иначе
					ПоказатьПредупреждение(, ТекстСообщения);
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
			
			ПомещаемыеФайлы = Новый Массив;
			ПомещенныеФайлы = Новый Массив;
			МассивВызовов   = Новый Массив;
			
			ОписаниеФайла   = Новый ОписаниеПередаваемогоФайла(Объект.ФайлЗагрузки);
			
			ПомещаемыеФайлы.Добавить(ОписаниеФайла);
			
			МассивВызовов.Добавить(Новый Массив);
			
			МассивВызовов[0].Добавить("ПоместитьФайлы");
			МассивВызовов[0].Добавить(ПомещаемыеФайлы);
			МассивВызовов[0].Добавить(ПомещенныеФайлы);
			МассивВызовов[0].Добавить("");
			МассивВызовов[0].Добавить(Ложь);
			
			Если ЗапроситьРазрешениеПользователя(МассивВызовов) Тогда
				ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы,, Ложь, УникальныйИдентификатор);
				ОписаниеФайлов = ПомещенныеФайлы.Получить(0);
				АдресФайла     = ОписаниеФайлов.Хранение;
				
				Если АдресФайла = Неопределено Тогда
					Возврат;
				КонецЕсли;
				
				// Передаем на сервер
				ПрочитатьФайл(ВыводитьСообщения, ТребуетсяПовторноеЧтениеФайла);
			КонецЕсли;
		ИначеЕсли АдресФайла <> Неопределено Тогда // временное хранилище может быть не валидно
			// Передаем на сервер
			ПрочитатьФайл(ВыводитьСообщения, ТребуетсяПовторноеЧтениеФайла);
		КонецЕсли;
		
	Иначе
		// Веб клиент без расширения для работы с файлами
		Попытка
			Если ТребуетсяПовторноеЧтениеФайла Тогда
				ДополнительныеПараметры  = Новый Структура("ВыводитьСообщения, ТребуетсяПовторноеЧтениеФайла, АдресФайлаСтарый",
					ВыводитьСообщения, ТребуетсяПовторноеЧтениеФайла, АдресФайлаСтарый);
				ОповещениеПомещениеФайла = Новый ОписаниеОповещения("ПомещениеФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				НачатьПомещениеФайла(ОповещениеПомещениеФайла, АдресФайла, "CB_to_1C.xml", Истина, УникальныйИдентификатор);
			ИначеЕсли АдресФайла <> Неопределено Тогда // если чтения вообще не было, то перечитывать пока нечего
				ПрочитатьФайл(ВыводитьСообщения, ТребуетсяПовторноеЧтениеФайла);
			КонецЕсли;
		Исключение
			АдресФайла = Неопределено;
			ШаблонСообщения = НСтр("ru='При чтении файла данных для загрузки в Бухгалтерию возникла ошибка
|%1';uk='При читанні файлу даних для завантаження в Бухгалтерію виникла помилка
|%1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ОписаниеОшибки = ИнформацияОбОшибке();
			ЗаписатьОшибкуВЖурнал(ТекстСообщения, ОписаниеОшибки);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры // ПрочитатьДанныеИзФайла

&НаКлиенте
Процедура ПрочитатьФайл(ВыводитьСообщения, ТребуетсяПовторноеЧтениеФайла)
	
	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	Результат  = ЗаполнитьДокументыНаИмпорт(ИБФайловая, ВыводитьСообщения, ТребуетсяПовторноеЧтениеФайла);
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
		
		ИдентификаторЗадания    = Результат.ИдентификаторЗадания;
		АдресХранилища          = Результат.АдресХранилища;
	Иначе
		
		ОповеститьОЗагрузкеДанныхНаКлиенте(Результат.СтруктураДанныхКлиента, "Чтение");
		СостояниеЗагрузки       = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция БанковскийСчетЗаполнен()
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не выбран банковский счет';uk='Не вибраний банківський рахунок'")
			,, "Объект.БанковскийСчет");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПериодЗаполнен()
	
	ПериодЗаполнен = Истина;
	
	Если НЕ ЗначениеЗаполнено(Объект.НачПериода) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не заполнена дата начала периода';uk='Не заповнена дата початку періоду'")
			,, "Объект.НачПериода");
		ПериодЗаполнен = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КонПериода) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не заполнена дата окончания периода';uk='Не заповнена дата закінчення періоду'")
			,, "Объект.КонПериода");
		ПериодЗаполнен = Ложь;
	КонецЕсли;
	
	Возврат ПериодЗаполнен;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруДанныхИмпорта()
	
	СтруктураДанныхИмпорта = Новый Соответствие;
	Для каждого КолонкаИмпорта Из ПолучитьРеквизиты("ДокументыКИмпорту") Цикл
		СтруктураДанныхИмпорта.Вставить(КолонкаИмпорта.Имя, КолонкаИмпорта.Заголовок);
	КонецЦикла;
	
	Возврат СтруктураДанныхИмпорта;
	
КонецФункции

// Процедура заполняет документы на импорт
//
&НаСервере
Функция ЗаполнитьДокументыНаИмпорт(ИБФайловая, ВыводитьСообщения, ТребуетсяПовторноеЧтениеФайла)
	
	ТаблицаКонтрагентов.ПолучитьЭлементы().Очистить();
	ДеревоКонтрагентов  = РеквизитФормыВЗначение("ТаблицаКонтрагентов");
	
	ДвоичныеДанныеФайла = ?(ТребуетсяПовторноеЧтениеФайла, ПолучитьИзВременногоХранилища(АдресФайла), Неопределено);
	
	СтекОповещений      = Новый Массив;
	СтруктураПараметров = Новый Структура(
		"ДокументыКИмпорту, СтруктураДанныхИмпорта, ВыводитьСообщения, БанковскийСчет, Кодировка,
		|Организация, НастройкаЗаполнения, ДеревоКонтрагентов, Импорт_Заголовок, Импорт_РасчетныеСчета,
		|ДвоичныеДанныеФайла, СоздаватьНенайденныеЭлементы,
		|СтекОповещений, ТребуетсяПовторноеЧтениеФайла",
		ДокументыКИмпорту.Выгрузить(), ПолучитьСтруктуруДанныхИмпорта(), ВыводитьСообщения, Объект.БанковскийСчет, Объект.Кодировка,
		Объект.Организация, НастройкаЗаполнения.Выгрузить(), ДеревоКонтрагентов, Импорт_Заголовок, Импорт_РасчетныеСчета.Выгрузить(),
		ДвоичныеДанныеФайла, Объект.СоздаватьНенайденныеЭлементы,
		СтекОповещений, ТребуетсяПовторноеЧтениеФайла);
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Обработки.КлиентБанк.ФоноваяЧтениеДокументовКИмпорту(СтруктураПараметров, АдресХранилища);
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		НаименованиеЗадания = НСтр("ru='Чтение данных из файла импорта банка-клиента';uk='Читання даних з файлу імпорту банку-клієнта'");
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.КлиентБанк.ФоноваяЧтениеДокументовКИмпорту",
			СтруктураПараметров,
			НаименованиеЗадания);
		
		АдресХранилища = Результат.АдресХранилища;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		Результат.Вставить("СтруктураДанныхКлиента", ЗагрузитьПодготовленныеДанные(ТребуетсяПовторноеЧтениеФайла));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Серверная процедура обновляет таблицу с выгружаемыми документами
//
&НаСервере
Процедура ДокументыНаЭкспортОбновитьСервер(Знач ВыгружатьПлатПоручения, Знач ВыгружатьПлатТребования)
	
	ЗаполнитьДокументыНаЭкспорт(ВыгружатьПлатПоручения, ВыгружатьПлатТребования);
	ПроверитьЗаполнениеТаблицыДокументов("ПлатежныеДокументы");
	ПлатежныеДокументыОбновитьИтогиВПодвале();
	
КонецПроцедуры

// Процедура заполняет таблицу документов на экспорт
//
&НаСервере
Процедура ЗаполнитьДокументыНаЭкспорт(ВыгружатьПлатПоручения, ВыгружатьПлатТребования)
	
	Обработки.КлиентБанк.ЗаполнитьДокументыНаЭкспорт(Объект.ПлатежныеДокументы,
													Элементы.ПлатежныеДокументы,
													Объект.НачПериода,
													Объект.КонПериода,
													Объект.БанковскийСчет,
													ВыгружатьПлатПоручения, ВыгружатьПлатТребования);
	
КонецПроцедуры

// Процедура проверяет заполнение таблицы с документами
//
&НаСервере
Процедура ПроверитьЗаполнениеТаблицыДокументов(Документы, ОбновитьТаблицуКонтрагентов = Ложь)
	
	Обработки.КлиентБанк.ПроверитьЗаполнениеТаблицыДокументов(Объект,
		?(Документы = "ПлатежныеДокументы", Объект.ПлатежныеДокументы, ДокументыКИмпорту), Документы);
	
	Если ОбновитьТаблицуКонтрагентов Тогда
		ЗначениеВРеквизитФормы(ПолучитьИзВременногоХранилища(АдресХранилищаКонтрагентов), "ТаблицаКонтрагентов");
	КонецЕсли;
	
	ДокументыКИмпортуОбновитьИтогиВПодвале();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьВидыДоговоров(ВидОперации)
	
	Возврат УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(ВидОперации);
	
КонецФункции

&НаСервереБезКонтекста
Функция ДокументыКИмпортуСчетКонтрагентаПриИзмененииСервер(ТекущиеДанные, Знач СоздаватьНенайденныеЭлементы)
	
	Если ЗначениеЗаполнено(ТекущиеДанные.СчетКонтрагента) И НЕ ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
		Попытка
			ТекущиеДанные.Контрагент = ТекущиеДанные.СчетКонтрагента.Владелец;
		Исключение
			// Запись в журнал регистрации не требуется
		КонецПопытки;
	КонецЕсли;
	
	СписокВидовДоговоров = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(ТекущиеДанные.ВидОперации);
	
	Если ТипЗнч(ТекущиеДанные.Договор) = Тип("Строка") Тогда
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		УстановитьДоговорКонтрагента(ДоговорКонтрагента, ТекущиеДанные.Контрагент, ТекущиеДанные.Организация, СписокВидовДоговоров);
		Если ДоговорКонтрагента <> Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
			ТекущиеДанные.Договор = ДоговорКонтрагента;
		КонецЕсли;
	Иначе
		УстановитьДоговорКонтрагента(ТекущиеДанные.Договор, ТекущиеДанные.Контрагент, ТекущиеДанные.Организация, СписокВидовДоговоров);
	КонецЕсли;
	
	ОбновитьСостояниеСтроки(
		ТекущиеДанные.ДоговорКонтрагентаНеНайден, ТекущиеДанные.Готовность, ТекущиеДанные.Договор,
		СоздаватьНенайденныеЭлементы, ТекущиеДанные.ВидОперации, ТекущиеДанные.ОписаниеОшибок,
		ТекущиеДанные.Контрагент, ТекущиеДанные.СчетКонтрагента);
	
	Возврат ТекущиеДанные;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСпискиДокументов(ВыводитьСообщения, ТребуетсяПовторноеЧтениеФайла = Истина)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыгрузка Тогда
		ОбновитьСписокДокументовНаЭкспорт();
	Иначе
		Если НастройкаВыполнена Тогда
			ОчиститьСообщения();
			
			Если ТребуетсяПовторноеЧтениеФайла Тогда
				ДокументыКИмпорту.Очистить();
			КонецЕсли;
			
			ПрочитатьДанныеИзФайла(ВыводитьСообщения, ТребуетсяПовторноеЧтениеФайла);
		ИначеЕсли ПустаяСтрока(Объект.ФайлЗагрузки) Тогда
			ДокументыКИмпорту.Очистить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Открывает для просмотра текстовой документ
//
&НаКлиенте
Процедура ОткрытьФайлДляПросмотра(Элемент, Кодировка, Заголовок) Экспорт
	
	ОбъектПроверки  = Объект[Элемент.Имя];
	ЭлементПривязки = "Объект." + Элемент.Имя;
	Если ПустаяСтрока(ОбъектПроверки) Тогда
		ТекстСоощения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 не заполнен';uk='%1 не заповнений'"), Заголовок);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСоощения
			,, ЭлементПривязки);
		
		Возврат;
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(Элемент.ТекстРедактирования);
	Если НЕ ФайлНаДиске.Существует() Тогда
		ТекстСоощения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 не обнаружен';uk='%1 не виявлений'"), Заголовок);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСоощения
			,, ЭлементПривязки);
		
		Возврат;
	КонецЕсли;
	
	Если ФайлНаДиске.ЭтоКаталог() Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 не корректен - выбран ""каталог"".
|Выберите %1';uk='%1 не коректний - обраний ""каталог"".
|Виберіть %1'"), Заголовок);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстСообщения
		,, ЭлементПривязки);
		
		Возврат;
	КонецЕсли;
		
	Текст = Новый ТекстовыйДокумент();
	Если Кодировка = "DOS" Тогда
		Кодир = КодировкаТекста.OEM;
	ИначеЕсли Кодировка = "Windows" Тогда
		Кодир = КодировкаТекста.ANSI;
	Иначе	
		Кодир = КодировкаТекста.UTF8;
	КонецЕсли;
	
	Текст.Прочитать(Элемент.ТекстРедактирования, Кодир);
	Текст.Показать(Заголовок, Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаДляВыгрузкиИЗагрузки(Элемент, Режим) Экспорт
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбора.Фильтр                      = НСтр("ru='XML файл';uk='XML файл'") + " (*.xml)|*.xml";
	ДиалогВыбора.Заголовок                   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Выберите файл для %1 данных из клиента банка';uk='Виберіть файл для %1 даних з клієнта банку'"), Режим);
	ДиалогВыбора.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбора.Расширение                  = "xml";
	ДиалогВыбора.ИндексФильтра               = 0;
	ДиалогВыбора.ПолноеИмяФайла              = ?(ПустаяСтрока(Элемент.ТекстРедактирования),
		?(Режим = НСтр("ru='выгрузки';uk='вивантаження'"), "1C_to_CB.xml", "CB_to_1C.xml"), Элемент.ТекстРедактирования);
	ДиалогВыбора.ПроверятьСуществованиеФайла = Ложь;
	
	Если ДиалогВыбора.Выбрать() Тогда
		Если Режим = НСтр("ru='загрузки';uk='завантаження'") Тогда
			Объект.ФайлЗагрузки = ДиалогВыбора.ПолноеИмяФайла;
			
			Оповестить("ВыбранФайлЗагрузки");
		Иначе
			Объект.ФайлВыгрузки = ДиалогВыбора.ПолноеИмяФайла;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

// Процедура формирует отчет о выгрузке
//
&НаСервере
Процедура ПолучитьОтчетОВыгрузке(ПолеОтчета)
	
	Обработки.КлиентБанк.ПечатьОтчетаОВыгруженныхПлатежныхДокументах(ПолеОтчета,
																	Объект.ПлатежныеДокументы,
																	Объект.Организация,
																	Объект.БанковскийСчет,
																	Объект.НачПериода,
																	Объект.КонПериода);
	
КонецПроцедуры

// Процедура формирует отчет о загрузке
//
&НаСервере
Процедура ПолучитьОтчетОЗагрузке(ПолеОтчета)
	
	Обработки.КлиентБанк.ПечатьОтчетаОЗагруженныхПлатежныхДокументах(ПолеОтчета,
																	ДокументыКИмпорту,
																	Объект.Организация,
																	Импорт_РасчетныеСчета,
																	Импорт_Заголовок);
	
КонецПроцедуры

// Функция помещает таблицу сведений о ненайденных контрагентах во временное хранилище
// и возвращает адрес этого хранилища
&НаСервере
Функция ПолучитьАдресВременногоХранилищаТаблицыКонтрагентов()
	
	// Не будем создавать ненайденные элементы:
	//   - для тех строк, которые пользователь не выбрал в Выписке
	//   - для тех строк, которые пользователь заполнил сам (вручную)
	ТипСтрока              = Тип("Строка");
	СоответствиеОтмеченных = Новый Соответствие();
	Для каждого СтрокаИмпорта Из ДокументыКИмпорту Цикл
		Загружать = СтрокаИмпорта.Загружать;
		Если Загружать Тогда
			Загружать = НЕ(ТипЗнч(СтрокаИмпорта.Контрагент)      <> ТипСтрока И ЗначениеЗаполнено(СтрокаИмпорта.Контрагент)
						 И ТипЗнч(СтрокаИмпорта.СчетКонтрагента) <> ТипСтрока И ЗначениеЗаполнено(СтрокаИмпорта.СчетКонтрагента)
						 И ТипЗнч(СтрокаИмпорта.Договор)         <> ТипСтрока И ЗначениеЗаполнено(СтрокаИмпорта.Договор));
		КонецЕсли;
		
		СоответствиеОтмеченных.Вставить(СтрокаИмпорта.НомерСтроки, Новый Структура("Загружать", Загружать));
		
		Если Загружать Тогда
			Если ТипЗнч(СтрокаИмпорта.Контрагент)   <> ТипСтрока И ЗначениеЗаполнено(СтрокаИмпорта.Контрагент)
			И ТипЗнч(СтрокаИмпорта.СчетКонтрагента) <> ТипСтрока И НЕ ЗначениеЗаполнено(СтрокаИмпорта.СчетКонтрагента) Тогда
				СоответствиеОтмеченных[СтрокаИмпорта.НомерСтроки].Вставить("Контрагент", СтрокаИмпорта.Контрагент);
			КонецЕсли;
			
			Если ТипЗнч(СтрокаИмпорта.Договор) = ТипСтрока Тогда
				ВидыДоговоров = УчетДенежныхСредствКлиентСервер.ОпределитьВидДоговораСКонтрагентом(СтрокаИмпорта.ВидОперации);
				Если ВидыДоговоров.Количество() > 0 Тогда
					ВидДоговора = Строка(ВидыДоговоров[0]);
				Иначе
					ВидДоговора = Неопределено;
				КонецЕсли;
				
				СоответствиеОтмеченных[СтрокаИмпорта.НомерСтроки].Вставить("ВидДоговора", ВидДоговора);
			Иначе
				СоответствиеОтмеченных[СтрокаИмпорта.НомерСтроки].Вставить("Договор", СтрокаИмпорта.Договор);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого НенайденныйКонтрагент Из ТаблицаКонтрагентов.ПолучитьЭлементы() Цикл
		Если НенайденныйКонтрагент.УчаствуетВНесколькихСтроках Тогда
			Пометка = СоответствиеОтмеченных[НенайденныйКонтрагент.НомСтроки].Загружать;
			Для каждого СтрокаУчастия Из НенайденныйКонтрагент.ДопСтрокиВКоторыхУчаствуетКонтрагент Цикл
				Пометка = Пометка ИЛИ СоответствиеОтмеченных[СтрокаУчастия.Значение].Загружать;
			КонецЦикла;
			
			НенайденныйКонтрагент.Пометка = Пометка;
		Иначе
			НенайденныйКонтрагент.Пометка = СоответствиеОтмеченных[НенайденныйКонтрагент.НомСтроки].Загружать;
		КонецЕсли;
		
		Если НенайденныйКонтрагент.Пометка Тогда
			// если контрагент выбран пользователем, то заполним в дереве ненайденных ссылку на этого контрагента
			Если СоответствиеОтмеченных[НенайденныйКонтрагент.НомСтроки].Свойство("Контрагент") Тогда
				ВыбранныйКонтрагент = СоответствиеОтмеченных[НенайденныйКонтрагент.НомСтроки].Контрагент;
				Если НенайденныйКонтрагент.Реквизит <> ВыбранныйКонтрагент Тогда
					НенайденныйКонтрагент.Реквизит = ВыбранныйКонтрагент;
					НенайденныйКонтрагент.Представление = СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранныйКонтрагент, "Наименование"));
				КонецЕсли;
			КонецЕсли;
			
			НенайденныйКонтрагент.ЭтоРодитель = Истина;
			ПодчиненныеТекущемуЭлементы = НенайденныйКонтрагент.ПолучитьЭлементы();
			
			// актуализируем Вид договора, в зависимости от Вида операции
			АктуализироватьНенайденныеДоговора(ПодчиненныеТекущемуЭлементы, НенайденныйКонтрагент.НомСтроки, СоответствиеОтмеченных);
			Для каждого НомерДопСтроки Из НенайденныйКонтрагент.ДопСтрокиВКоторыхУчаствуетКонтрагент Цикл
				АктуализироватьНенайденныеДоговора(ПодчиненныеТекущемуЭлементы, НомерДопСтроки.Значение, СоответствиеОтмеченных, Истина);
			КонецЦикла;
		Иначе
			НенайденныйКонтрагент.ЭтоРодитель = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("ТаблицаКонтрагентов"), УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Процедура АктуализироватьНенайденныеДоговора(ЭлементыДерева, Знач НомСтроки, Знач СоответствиеОтмеченных, Знач ЭтоДопСтрока = Ложь)
	
	Если СоответствиеОтмеченных[НомСтроки].Свойство("ВидДоговора") Тогда
		ВидДоговора = СоответствиеОтмеченных[НомСтроки].ВидДоговора;
		ПодчиненныйЭлемент = НайтиДанныеФормыЭлементДерева(ЭлементыДерева, "Значение", ВидДоговора);
		Если ЭтоДопСтрока Тогда
			Если ПодчиненныйЭлемент = Неопределено Тогда
				ПодчиненныйЭлемент = ЭлементыДерева.Добавить();
				ПодчиненныйЭлемент.Пометка       = Истина;
				ПодчиненныйЭлемент.Представление = НСтр("ru='Договор';uk='Договір'");
				ПодчиненныйЭлемент.Значение      = ВидДоговора;
				Обработки.КлиентБанк.ДобавитьРеквизитыДоговора(ПодчиненныйЭлемент.ПолучитьЭлементы(), ВидДоговора);
			Иначе
				ПодчиненныйЭлемент.Пометка = Истина;
			КонецЕсли;
		ИначеЕсли ПодчиненныйЭлемент = Неопределено Тогда
			ПодчиненныйЭлемент = НайтиДанныеФормыЭлементДерева(ЭлементыДерева, "Представление", НСтр("ru='Договор';uk='Договір'"));
			Если ПодчиненныйЭлемент = Неопределено Тогда
				ПодчиненныйЭлемент = ЭлементыДерева.Добавить();
				ПодчиненныйЭлемент.Пометка       = Истина;
				ПодчиненныйЭлемент.Представление = НСтр("ru='Договор';uk='Договір'");
				ПодчиненныйЭлемент.Значение      = ВидДоговора;
				Обработки.КлиентБанк.ДобавитьРеквизитыДоговора(ПодчиненныйЭлемент.ПолучитьЭлементы(), ВидДоговора);
			ИначеЕсли ПодчиненныйЭлемент.Значение <> ВидДоговора Тогда
				ПодчиненныйЭлемент.Значение = ВидДоговора;
				ПодчиненныйЭлемент.Реквизит = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				Для каждого ЭлементДоговора Из ПодчиненныйЭлемент.ПолучитьЭлементы() Цикл
					Если ЭлементДоговора.Представление = НСтр("ru='Наименование';uk='Найменування'") Тогда
						ЭлементДоговора.Значение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Основной договор %1';uk='Основний договір %1'"), НРег(ВидДоговора));
					КонецЕсли;
					
					Если ЭлементДоговора.Представление = НСтр("ru='Вид';uk='Вид'") Тогда
						ЭлементДоговора.Значение = ВидДоговора;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ПодчиненныйЭлемент.Пометка = Истина;
		КонецЕсли;
	ИначеЕсли СоответствиеОтмеченных[НомСтроки].Свойство("Договор") И НЕ ЭтоДопСтрока Тогда
		Договор = СоответствиеОтмеченных[НомСтроки].Договор;
		ПодчиненныйЭлемент = НайтиДанныеФормыЭлементДерева(ЭлементыДерева, "Реквизит", Договор);
		Если ПодчиненныйЭлемент = Неопределено Тогда
			ПодчиненныйЭлемент = НайтиДанныеФормыЭлементДерева(ЭлементыДерева, "Представление", НСтр("ru='Договор';uk='Договір'"));
			Если ПодчиненныйЭлемент <> Неопределено И ПодчиненныйЭлемент.Реквизит <> Договор Тогда
				ПодчиненныйЭлемент.Пометка  = Ложь;
				ПодчиненныйЭлемент.Реквизит = Договор;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиДанныеФормыЭлементДерева(Знач ЭлементыДерева, Знач ПолеПоиска, Знач ЗначениеПоиска)
	
	Для каждого ЭлементДоговора Из ЭлементыДерева Цикл
		Если ЭлементДоговора[ПолеПоиска] = ЗначениеПоиска Тогда
			Возврат ЭлементДоговора;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено; // ничего не нашли
	
КонецФункции

&НаКлиенте
Процедура РезультатПроведения(Команда)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
		ПараметрыФормы = Новый Структура("ДокументДвижений", ТекущиеДанные.Документ);
		ОткрытьФорму("Обработка.КорректировкаДвижений.Форма",
			ПараметрыФормы,
			Команда,
			Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацияСервер()
	
	Если УчетДенежныхСредствБП.УстановитьБанковскийСчет(Объект.БанковскийСчет, Объект.Организация, ВалютаРегламентированногоУчета) Тогда
		ЗагрузитьНастройкиДляБанковскогоСчета();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПодготовленныеДанные(УстановитьОтметку = Ложь)
	
	СтруктураДанныхНаКлиенте = Новый Структура();
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат СтруктураДанныхНаКлиенте;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ДокументыКИмпорту") Тогда
		ДокументыКИмпорту.Загрузить(СтруктураДанных.ДокументыКИмпорту);
		
		Если УстановитьОтметку Тогда
			ДокументыКИмпортуУстановитьОтметку(УстановитьОтметку);
		КонецЕсли;
		
		Элементы.ДокументыКИмпортуСуммаПоступило.ТекстПодвала = Формат(ДокументыКИмпорту.Итог("СуммаПоступило"), "ЧЦ=12; ЧДЦ=2");
		Элементы.ДокументыКИмпортуСуммаСписано.ТекстПодвала   = Формат(ДокументыКИмпорту.Итог("СуммаСписано"),   "ЧЦ=12; ЧДЦ=2");
		
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("Импорт_Заголовок") И СтруктураДанных.Импорт_Заголовок <> Неопределено Тогда
		Импорт_Заголовок = СтруктураДанных.Импорт_Заголовок;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("Импорт_РасчетныеСчета") Тогда
		ЗначениеВРеквизитФормы(СтруктураДанных.Импорт_РасчетныеСчета, "Импорт_РасчетныеСчета");
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("ДеревоКонтрагентов") Тогда
		ЗначениеВРеквизитФормы(СтруктураДанных.ДеревоКонтрагентов, "ТаблицаКонтрагентов");
		Элементы.ДокументыКИмпортуСоздатьКонтрагентов.Доступность =
			НЕ Объект.СоздаватьНенайденныеЭлементы И ТаблицаКонтрагентов.ПолучитьЭлементы().Количество() > 0;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("СтекОповещений")
		И СтруктураДанных.СтекОповещений.Количество() > 0 Тогда
		СтруктураДанныхНаКлиенте.Вставить("СтекОповещений", СтруктураДанных.СтекОповещений);
		СтруктураДанныхНаКлиенте.Вставить("КоличествоЗагруженныхДокументов",
			ОпределитьКоличествоЗагруженныхДокументов(СтруктураДанных.СтекОповещений));
	КонецЕсли;
		
	Если СтруктураДанных.Свойство("СостояниеЗагрузки") Тогда
		СостояниеЗагрузки = СтруктураДанных.СостояниеЗагрузки;
	КонецЕсли;
	
	Если НЕ Объект.СоздаватьНенайденныеЭлементы Тогда
		ПроверитьЗаполнениеТаблицыДокументов("ДокументыКИмпорту");
	КонецЕсли;
	
	Возврат СтруктураДанныхНаКлиенте;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьКоличествоЗагруженныхДокументов(СтекОповещений)
	
	КоличествоДокументов = 0;
	Для каждого ЭлементСтека Из СтекОповещений Цикл
		Если ЭлементСтека.Свойство("Ссылка")
			И (ТипЗнч(ЭлементСтека.Ссылка) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет")
			ИЛИ ТипЗнч(ЭлементСтека.Ссылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета")) Тогда
			КоличествоДокументов = КоличествоДокументов + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоличествоДокументов;
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуДокументов(ДеревоКонтрагентов)
	
	ТаблицаДокументовКИмпорту = ДокументыКИмпорту.Выгрузить();
	ТаблицаДокументовКИмпорту.Колонки.Добавить("РеквизитыКонтрагента");
	Для каждого СтрокаСекции Из ТаблицаДокументовКИмпорту Цикл
		ТипКонтрагента  = ?(СтрокаСекции.ПлательщикСчет = Объект.БанковскийСчет.НомерСчета, "ПОЛУЧАТЕЛЬ", "ПЛАТЕЛЬЩИК");
		
		ПолеПоиска       = НСтр("ru='ЕДРПОУ';uk='ЄДРПОУ'");
		ЗначениеПоиска   = СтрокаСекции[ТипКонтрагента + "ОКПО"];
		// Если ИНН контрагента в файле не задан, то ищем по имени
		Если ПустаяСтрока(ЗначениеПоиска) Тогда
			ПолеПоиска     = НСтр("ru='Наименование';uk='Найменування'");
			ЗначениеПоиска = СтрокаСекции[ТипКонтрагента];
			
			Если ПустаяСтрока(ЗначениеПоиска) Тогда
				ЗначениеПоиска = СтрокаСекции[ТипКонтрагента];
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Представление, Значение", ПолеПоиска, ЗначениеПоиска);
		НайденныеЗаписиОКонтрагенте = ДеревоКонтрагентов.Строки.НайтиСтроки(СтруктураПоиска, Истина);
		
		СтрокаСекции.РеквизитыКонтрагента = Неопределено;
		
		Если НайденныеЗаписиОКонтрагенте.Количество() > 0 Тогда
			НайденнаяСтрока = НайденныеЗаписиОКонтрагенте[0];
			
			Родитель = НайденнаяСтрока.Родитель;
			Если Родитель <> Неопределено Тогда
				НайденнаяСтрока = Родитель;
			КонецЕсли;
			
			РеквизитыКонтрагента = Новый ТаблицаЗначений();
			РеквизитыКонтрагента.Колонки.Добавить("Значение");
			РеквизитыКонтрагента.Колонки.Добавить("Представление");
			РеквизитыКонтрагента.Колонки.Добавить("Реквизит");
			
			СтрокаСекции.РеквизитыКонтрагента = РеквизитыКонтрагента;
			
			Для Счет = 0 По 2 Цикл
				НовыйРеквизит = РеквизитыКонтрагента.Добавить();
				НовыйРеквизит.Представление = НайденнаяСтрока.Строки[Счет].Представление;
				НовыйРеквизит.Значение      = НайденнаяСтрока.Строки[Счет].Значение;
				НовыйРеквизит.Реквизит      = НайденнаяСтрока.Строки[Счет].Реквизит;
			КонецЦикла;
			
			Если СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
				ВидДоговора = НСтр("ru='С покупателем';uk='З покупцем'");
			ИначеЕсли СтрокаСекции.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
				ВидДоговора = НСтр("ru='С поставщиком';uk='З постачальником'");
			Иначе
				ВидДоговора = НСтр("ru='другой';uk='інший'");
			КонецЕсли;
			
			Для каждого Строка Из НайденнаяСтрока.Строки Цикл
				Если Строка.Представление = НСтр("ru='Счет';uk='Рахунок'") И Строка.Значение = СтрокаСекции[ТипКонтрагента + "СЧЕТ"] Тогда
					
					НовыйРеквизит = РеквизитыКонтрагента.Добавить();
					НовыйРеквизит.Представление = Строка.Представление;
					НовыйРеквизит.Значение      = Строка.Значение;
					НовыйРеквизит.Реквизит      = Строка.Реквизит;
					
					Для каждого ПодСтрока Из Строка.Строки Цикл
						НовыйРеквизит = РеквизитыКонтрагента.Добавить();
						НовыйРеквизит.Представление = ПодСтрока.Представление;
						НовыйРеквизит.Значение      = ПодСтрока.Значение;
						НовыйРеквизит.Реквизит      = ПодСтрока.Реквизит;
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
			
			Для каждого Строка Из НайденнаяСтрока.Строки Цикл
				Если Строка.Представление = НСтр("ru='Договор';uk='Договір'") И Строка.Значение = ВидДоговора Тогда
					
					НовыйРеквизит = РеквизитыКонтрагента.Добавить();
					НовыйРеквизит.Представление = Строка.Представление;
					НовыйРеквизит.Значение      = Строка.Значение;
					НовыйРеквизит.Реквизит      = Строка.Реквизит;
					
					Для каждого ПодСтрока Из Строка.Строки Цикл
						НовыйРеквизит = РеквизитыКонтрагента.Добавить();
						НовыйРеквизит.Представление = ПодСтрока.Представление;
						НовыйРеквизит.Значение      = ПодСтрока.Значение;
						НовыйРеквизит.Реквизит      = ПодСтрока.Реквизит;
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДокументовКИмпорту;
	
КонецФункции

// Функция загружает документы к импорту
//
&НаСервере
Функция ЗагрузитьДокументыКИмпорту(ИБФайловая)
	
	НеобходимоЗагружатьКонтрагентов = Объект.СоздаватьНенайденныеЭлементы И ТаблицаКонтрагентов.ПолучитьЭлементы().Количество() > 0;
	Если НеобходимоЗагружатьКонтрагентов Тогда
		АдресХранилищаКонтрагентов = ПолучитьАдресВременногоХранилищаТаблицыКонтрагентов();
	КонецЕсли;
	
	СтекОповещений     = Новый Массив;
	ДеревоКонтрагентов = РеквизитФормыВЗначение("ТаблицаКонтрагентов");
	Если НеобходимоЗагружатьКонтрагентов Тогда
		СтруктураПараметров =
			Новый Структура("ДокументыКИмпорту, СтруктураДанныхИмпорта, ДеревоКонтрагентов, ГруппаДляНовыхКонтрагентов,
				|МассивКонтрагентов, Импорт_Заголовок, Организация, Импорт_РасчетныеСчета, ИспользоватьГраницуОбработки,
				|НастройкаЗаполнения, ДатаГраницыОбработки, БанковскийСчет, СтекОповещений",
				ПолучитьТаблицуДокументов(ДеревоКонтрагентов), ПолучитьСтруктуруДанныхИмпорта(), ДеревоКонтрагентов, ГруппаДляНовыхКонтрагентов,
				Неопределено, Импорт_Заголовок, Объект.Организация, Импорт_РасчетныеСчета.Выгрузить(), Объект.ИспользоватьГраницуОбработки,
				НастройкаЗаполнения.Выгрузить(), Объект.ДатаГраницыОбработки, Объект.БанковскийСчет,
				СтекОповещений);
	Иначе
		СтруктураПараметров = Новый Структура("ДокументыКИмпорту, Импорт_Заголовок, Организация, Импорт_РасчетныеСчета,
			|ИспользоватьГраницуОбработки, НастройкаЗаполнения, ДатаГраницыОбработки, БанковскийСчет, СтекОповещений",
			ПолучитьТаблицуДокументов(ДеревоКонтрагентов), Импорт_Заголовок, Объект.Организация, Импорт_РасчетныеСчета.Выгрузить(),
			Объект.ИспользоватьГраницуОбработки, НастройкаЗаполнения.Выгрузить(), Объект.ДатаГраницыОбработки, Объект.БанковскийСчет,
			СтекОповещений);
	КонецЕсли;
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Если НеобходимоЗагружатьКонтрагентов Тогда
			Обработки.КлиентБанк.ФоноваяЗагрузкаКонтрагентовИДокументов(СтруктураПараметров, АдресХранилища);
		Иначе
			Обработки.КлиентБанк.ФоноваяЗагрузкаДокументовКИмпорту(СтруктураПараметров, АдресХранилища);
		КонецЕсли;
		
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		ПроцедураОбработки = ?(НеобходимоЗагружатьКонтрагентов,
			"Обработки.КлиентБанк.ФоноваяЗагрузкаКонтрагентовИДокументов",
			"Обработки.КлиентБанк.ФоноваяЗагрузкаДокументовКИмпорту");
		НаименованиеЗадания = НСтр("ru='Загрузка банковских документов из обработки ""Клиент-банк""';uk='Завантаження банківських документів з обробки ""Клієнт-банк""'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			ПроцедураОбработки,
			СтруктураПараметров, 
			НаименованиеЗадания);
		
		АдресХранилища = Результат.АдресХранилища;
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		НеобходимоЗагружатьКонтрагентов = Объект.СоздаватьНенайденныеЭлементы И ТаблицаКонтрагентов.ПолучитьЭлементы().Количество() > 0;
		Результат.Вставить("СтруктураДанныхКлиента", ЗагрузитьПодготовленныеДанные(НеобходимоЗагружатьКонтрагентов));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОЗагрузкеДанныхНаКлиенте(СтруктураДанныхКлиента, Операция = "Загрузка")
	
	Если Операция = "Загрузка" Тогда
		ЗагрузкаНеЗавершилась = Ложь;
		Если СтруктураДанныхКлиента.Свойство("КоличествоЗагруженныхДокументов")
			И СтруктураДанныхКлиента.КоличествоЗагруженныхДокументов > 0 Тогда
			ТекстОповещения = НСтр("ru='Документы загружены (%1)';uk='Документи завантажені (%1)'");
			ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОповещения, СтруктураДанныхКлиента.КоличествоЗагруженныхДокументов);
			ПоказатьОповещениеПользователя(ТекстОповещения,
				"e1cib/command/ЖурналДокументов.Деньги.Команда.БанковскиеВыписки", НСтр("ru='Банковские выписки';uk='Банківські виписки'"));
		Иначе
			ЗагрузкаНеЗавершилась = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДанныхКлиента.Свойство("СтекОповещений") Тогда
		Если Операция = "Загрузка" Тогда
			Для каждого Оповещение Из СтруктураДанныхКлиента.СтекОповещений Цикл
				Если Оповещение.Свойство("Текст") Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Оповещение.Текст);
				КонецЕсли;
			КонецЦикла;
			
			Если ЗагрузкаНеЗавершилась Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Для каждого Сообщение Из СтруктураДанныхКлиента.СтекОповещений Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение.Текст);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Операция = "Загрузка" Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"));
		Если Объект.СоздаватьНенайденныеЭлементы Тогда
			ОповеститьОбИзменении(Тип("СправочникСсылка.Контрагенты"));
			Оповестить("СозданиеНеНайденного");
			СостояниеЗагрузки = 2;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДокументыКИмпортуНаКлиенте()
	
	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	Результат  = ЗагрузитьДокументыКИмпорту(ИБФайловая);
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
		
		ИдентификаторЗадания    = Результат.ИдентификаторЗадания;
		АдресХранилища          = Результат.АдресХранилища;
	Иначе
		СостояниеЗагрузки       = 3;
		ОповеститьОЗагрузкеДанныхНаКлиенте(Результат.СтруктураДанныхКлиента);
		СостояниеЗагрузки       = 2;
	КонецЕсли;
	
КонецПроцедуры

// Функция вызывает функцию выгрузки документов из модуля объекта
//
&НаСервере
Функция ВыгрузитьДокументы()
	
	Возврат Обработки.КлиентБанк.ВыгрузитьXML(ТаблицаДокументов.Выгрузить(),
											Объект.ПлатежныеДокументы,
											Объект.Кодировка,
											Объект.Программа,
											Объект.НачПериода,
											Объект.КонПериода,
											Объект.БанковскийСчет,
											Объект.ФайлВыгрузки,
											Объект.Организация,
											УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВидыДокументов(ТаблицаДокументов)
	
	Макет                   = УправлениеПечатью.МакетПечатнойФормы("Обработка.КлиентБанк.ВидыДокументов");
	ОбластьДокументов       = Макет.ПолучитьОбласть("Документы");
	ОбластьДокументовВысота = ОбластьДокументов.ВысотаТаблицы;
	
	Для НСтр = 1 По ОбластьДокументовВысота Цикл
		ВидДокумента  = СокрЛП(ОбластьДокументов.Область(НСтр, 1).Текст);
		Название      = СокрЛП(ОбластьДокументов.Область(НСтр, 2).Текст);
		Корреспондент = СокрЛП(ОбластьДокументов.Область(НСтр, 3).Текст);
		Кратко        = СокрЛП(ОбластьДокументов.Область(НСтр, 4).Текст);
		
		Стр = ТаблицаДокументов.Добавить();
		Стр.Пометка        = Истина;
		Стр.Документ       = ВидДокумента;
		Стр.Название       = Название;
		Стр.Корреспондент  = Корреспондент;
		Стр.ДокументКратко = Кратко;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьДоговорКонтрагента(ДоговорКонтрагента,
		Знач Контрагент, Знач Организация, Знач СписокВидовДоговоров = Неопределено, Знач Отбор = Неопределено)
	
	БухгалтерскийУчетПереопределяемый.УстановитьДоговорКонтрагента(
		ДоговорКонтрагента, Контрагент, Организация, СписокВидовДоговоров, Отбор);
	
КонецПроцедуры

&НаСервере
Процедура ДокументыКИмпортуОбновитьИтогиВПодвале()
	
	СуммаПоступило = 0;
	СуммаСписано   = 0;
	Количество     = 0;
	
	ОтборСтрокКЗагрузке = Новый Структура("Загружать", Истина);
	СтрокиКЗагрузке     = ДокументыКИмпорту.НайтиСтроки(ОтборСтрокКЗагрузке);
	Для каждого Строка Из СтрокиКЗагрузке Цикл
		СуммаПоступило = СуммаПоступило + Строка.СуммаПоступило;
		СуммаСписано   = СуммаСписано   + Строка.СуммаСписано;
		Количество     = Количество     + 1;
	КонецЦикла;
	
	КоличествоКЗагрузке     = Количество;
	СуммаПоступилоКЗагрузке = СуммаПоступило;
	СуммаСписаноКЗагрузке   = СуммаСписано;
	
	Если НЕ Объект.СоздаватьНенайденныеЭлементы Тогда
		СтатуснаяСтрокаПриЗагрузкеТекст = "";
		Если ДокументыКИмпорту.Количество() > 0 Тогда
			Если Элементы.ДокументыКИмпорту.ТекущаяСтрока = Неопределено Тогда
				СтатуснаяСтрокаПриЗагрузкеТекст = СокрЛП(ДокументыКИмпорту[0].ОписаниеОшибок);
			Иначе
				ТекСтрока = ДокументыКИмпорту.НайтиПоИдентификатору(Элементы.ДокументыКИмпорту.ТекущаяСтрока);
				Если ТекСтрока = Неопределено Тогда
					СтатуснаяСтрокаПриЗагрузкеТекст = СокрЛП(ДокументыКИмпорту[0].ОписаниеОшибок);
				Иначе
					СтатуснаяСтрокаПриЗагрузкеТекст = СокрЛП(ТекСтрока.ОписаниеОшибок);
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтатуснаяСтрокаПриЗагрузке = "";
		КонецЕсли;
		
		Элементы.СтатуснаяСтрокаПриЗагрузке.Подсказка = СтатуснаяСтрокаПриЗагрузкеТекст;
		СтатуснаяСтрокаПриЗагрузке = ?(СтатуснаяСтрокаПриЗагрузкеТекст = "",
			СтатуснаяСтрокаПриЗагрузкеТекст,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Предупреждение: %1';uk='Попередження: %1'"), СтатуснаяСтрокаПриЗагрузкеТекст));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПлатежныеДокументыОбновитьИтогиВПодвале()
	
	Сумма      = 0;
	Количество = 0;
	
	ОтборСтрокКВыгрузке = Новый Структура("Выгружать", Истина);
	СтрокиКВыгрузке     = Объект.ПлатежныеДокументы.НайтиСтроки(ОтборСтрокКВыгрузке);
	Для каждого Строка Из СтрокиКВыгрузке Цикл
		Сумма      = Сумма      + Строка.СуммаДокумента;
		Количество = Количество + 1;
	КонецЦикла;
	
	КоличествоКВыгрузке     = Количество;
	СуммаДокументаКВыгрузке = Сумма;
	
КонецПроцедуры

&НаСервере
Процедура ДокументыКИмпортуУстановитьОтметку(Отметка)
	
	Для каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		СтрокаДокумента.Загружать = Отметка;
	КонецЦикла;
	
	ДокументыКИмпортуОбновитьИтогиВПодвале();
	УстановитьДоступностьКнопкиЗагрузить(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПлатежныеДокументыУстановитьОтметку(Отметка)
	
	Для каждого СтрокаДокумента Из Объект.ПлатежныеДокументы Цикл
		СтрокаДокумента.Выгружать = Отметка;
	КонецЦикла;
	
	ПлатежныеДокументыОбновитьИтогиВПодвале();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиДляБанковскогоСчета()
	
	НастройкаВыполнена     = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		
		Настройки = Обработки.КлиентБанк.ПолучитьНастройкиПрограммыКлиентаБанка(Объект.Организация, Объект.БанковскийСчет);
		
		Объект.Программа                                = Настройки.Программа;
		Объект.Кодировка                                = Настройки.Кодировка;
		Объект.ФайлВыгрузки                             = Настройки.ФайлВыгрузки;
		Объект.ФайлЗагрузки                             = Настройки.ФайлЗагрузки;
		Объект.ВыгружатьПлатежноеПоручение              = Настройки.Платежное_Поручение;
		Объект.ВыгружатьПлатежноеТребование             = Настройки.Платежное_Требование;
		Объект.СоздаватьНенайденныеЭлементы             = Настройки.СоздаватьНенайденныеЭлементы;
		
		НастройкаВыполнена                              = Настройки.НастройкиЗагружены;
		
		
		УправлениеФормойНаСервере();
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНомерСчета(БанковскийСчет)
	
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчет, "НомерСчета");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокДокументовНаЭкспорт(ОчищатьСообщения = Истина)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.ГруппаВыгрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ОчищатьСообщения Тогда
		ОчиститьСообщения();
	КонецЕсли;
	
	Объект.ПлатежныеДокументы.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.ВыгружатьПлатежноеПоручение И НЕ Объект.ВыгружатьПлатежноеТребование Тогда
		ПоказатьПредупреждение(, НСтр("ru='Необходимо отметить хотя бы один из видов платежных документов.';uk='Необхідно відзначити хоча б один з видів платіжних документів.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Банковский счет");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.БанковскийСчет");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.КонПериода) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Конец периода выгрузки");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.КонПериода");
		Возврат;
	КонецЕсли;
	
	ДокументыНаЭкспортОбновитьСервер(Объект.ВыгружатьПлатежноеПоручение, Объект.ВыгружатьПлатежноеТребование);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Команда устанавливает флажки во всех строках таблицы
//
&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	ПлатежныеДокументыУстановитьОтметку(Истина);
	
КонецПроцедуры

// Команда снимает флажки во всех строках таблицы
//
&НаКлиенте
Процедура СнятьОтметкуСоВсех(Команда)
	
	ПлатежныеДокументыУстановитьОтметку(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузить(Команда)
	
	ОчиститьСообщения();
	Если Объект.ПлатежныеДокументы.Количество() > 0 Тогда
		
		АдресФайлаВоВременномХранилище = ВыгрузитьДокументы();
		
		Если ВозможностьВыбораФайлов Тогда
			
			// Вариант для установленного расширения для работы с файлами
			
			Если НЕ ЗначениеЗаполнено(Объект.ФайлВыгрузки) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Не указан файл данных для выгрузки из Бухгалтерии';uk='Не вказаний файл даних для вивантаження з Бухгалтерії'")
					,, "Объект.ФайлВыгрузки");
				Возврат;
			КонецЕсли;
			
			ЭтоКаталог = Ложь;
			Если Прав(СокрЛП(Объект.ФайлВыгрузки), 1) = "\"
				ИЛИ Прав(СокрЛП(Объект.ФайлВыгрузки), 1) = "/" Тогда
				ЭтоКаталог   = Истина;
			ИначеЕсли Прав(СокрЛП(Объект.ФайлВыгрузки), 4) <> ".xml" Тогда
				ФайлВыгрузки = Новый Файл(Объект.ФайлВыгрузки);
				ЭтоКаталог   = ФайлВыгрузки.Существует() И ФайлВыгрузки.ЭтоКаталог();
			КонецЕсли;
			
			Если ЭтоКаталог Тогда
				ТекстСообщения = НСтр("ru='Файл данных для выгрузки из Бухгалтерии не корректен - выбран ""каталог"".
|Выберите файл выгрузки';uk='Файл даних для вивантаження з Бухгалтерії не коректний - обраний ""каталог"".
|Виберіть файл вивантаження'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения
					,, "Объект.ФайлВыгрузки");
				
				Возврат;
			КонецЕсли;
			
			ПередаваемыеФайлы = Новый Массив;
			ПереданныеФайлы   = Новый Массив;
			МассивВызовов     = Новый Массив;
			
			ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(Объект.ФайлВыгрузки, АдресФайлаВоВременномХранилище);
			
			ПередаваемыеФайлы.Добавить(ОписаниеФайла);
			
			МассивВызовов.Добавить(Новый Массив);
			
			МассивВызовов[0].Добавить("ПолучитьФайлы");
			МассивВызовов[0].Добавить(ПередаваемыеФайлы);
			МассивВызовов[0].Добавить(ПереданныеФайлы);
			МассивВызовов[0].Добавить("");
			МассивВызовов[0].Добавить(Ложь);
			
			Если ЗапроситьРазрешениеПользователя(МассивВызовов) Тогда
				
				ПолучитьФайлы(ПередаваемыеФайлы, ПереданныеФайлы,, Ложь);
				ТекстЗаголовока = НСтр("ru='Данные успешно выгружены в файл';uk='Дані успішно вивантажені в файл'");
				
				#Если НЕ ВебКлиент Тогда
				ПоказатьОповещениеПользователя(
					ТекстЗаголовока, "file:///" + СтрЗаменить(СокрЛП(Объект.ФайлВыгрузки), "\", "/"),
					Объект.ФайлВыгрузки, Элементы.КомандаВыгрузить.Картинка);
				#Иначе
				ПоказатьОповещениеПользователя(
					ТекстЗаголовока,,
					Объект.ФайлВыгрузки, Элементы.КомандаВыгрузить.Картинка);
				#КонецЕсли
				
			КонецЕсли;
			
		Иначе
			// Веб клиент без расширения для работы с файлами
			Попытка
				
				ПолучитьФайл(АдресФайлаВоВременномХранилище, "1C_to_CB.xml", Истина);
				
			Исключение
				ШаблонСообщения = НСтр("ru='При записи файла возникла ошибка
|%1';uk='При записі файлу відбулася помилка
|%1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ОписаниеОшибки = ИнформацияОбОшибке();
				
				ЗаписатьОшибкуВЖурнал(ТекстСообщения, ОписаниеОшибки);
				
			КонецПопытки;
			
		КонецЕсли;
		
		ЭкспортПроизведен = Истина;
		
	Иначе
		
		Если Объект.НачПериода = Объект.КонПериода Тогда
			ТекстПериода = Формат(Объект.НачПериода, "ДФ=dd.MM.yyyy");
		Иначе
			ТекстПериода = НСтр("ru='период с %1 по %2';uk='період з %1 до %2'");
			ТекстПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПериода,
				Формат(Объект.НачПериода, "ДФ=dd.MM.yyyy"), 
				Формат(Объект.КонПериода, "ДФ=dd.MM.yyyy"));
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru='Отсутствуют платежные поручения за %1
|по счету %2
|(%3).
|
|Попробуйте изменить период или указать другой банковский счет.';uk='Відсутні платіжні доручення за %1
|по рахунку %2
|(%3).
|
|Спробуйте змінити період або вказати інший банківський рахунок.'");
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			ТекстПериода,
			Объект.БанковскийСчет,
			Объект.Организация);
		
		ПоказатьПредупреждение(, ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузить(Команда)
	
	ОчиститьСообщения();
	Если ДокументыКИмпорту.Количество() > 0 Тогда
		ЗагрузитьДокументыКИмпортуНаКлиенте();
	Иначе
		ТекстШаблона = НСтр("ru='Список документов для загрузки пуст.
|%1.';uk='Список документів для завантаження порожній.
|%1.'");
		Если ВозможностьВыбораФайлов Тогда
			Если ПустаяСтрока(Объект.ФайлЗагрузки) Тогда
				ОбъектПривязки = "Объект.ФайлЗагрузки";
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстШаблона, НСтр("ru='Не указан файл данных для загрузки в Бухгалтерию';uk='Не вказаний файл даних для завантаження в Бухгалтерію'"));
			ИначеЕсли СостояниеЗагрузки = 0 Тогда
				ОбъектПривязки = "ДокументыКИмпорту";
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстШаблона, НСтр("ru='Для отображения документов в списке используйте команду ""Обновить из файла""';uk='Для відображення документів у списку використовуйте команду ""Оновити з файлу""'"));
			Иначе
				ОбъектПривязки = "ДокументыКИмпорту";
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстШаблона, НСтр("ru='Возможно в файле обмена не содержится данных';uk='Можливо в файлі обміну не міститься даних'"));
			КонецЕсли;
		ИначеЕсли НЕ ВозможностьВыбораФайлов Тогда
			ОбъектПривязки = "ДокументыКИмпорту";
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстШаблона, НСтр("ru='Для отображения документов в списке используйте команду ""Открыть и прочитать данные из файла""';uk='Для відображення документів у списку використовуйте команду ""Відкрити і прочитати дані з файлу""'"));
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ОбъектПривязки);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаОтчетПоВыгрузке(Команда)
	
	ПолеОтчета = Новый ТабличныйДокумент;
	ПолучитьОтчетОВыгрузке(ПолеОтчета);
	ПолеОтчета.ТолькоПросмотр = Истина;
	ПолеОтчета.Показать(НСтр("ru='Отчет о выгруженных платежных документах';uk='Звіт про вивантажені платіжні документи'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьВыгруженныйФайл(Элемент)
	
	ОткрытьФайлДляПросмотра(
		Новый Структура("ТекстРедактирования, Имя", Объект.ФайлВыгрузки, "ФайлВыгрузки"),
			Объект.Кодировка, НСтр("ru='Файл выгрузки';uk='Файл вивантаження'"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьЗагружаемыйФайл(Элемент)
	
	ОткрытьФайлДляПросмотра(
		Новый Структура("ТекстРедактирования, Имя", Объект.ФайлЗагрузки, "ФайлЗагрузки"),
			Объект.Кодировка, НСтр("ru='Файл загрузки';uk='Файл завантаження'"));
	
КонецПроцедуры

&НаКлиенте
Процедура НеинтерактивноеИзменениениеНастройки(ВызваноИзПриОткрытии = Ложь)
	
	Режим = Новый СписокЗначений;
	Режим.Добавить(КодВозвратаДиалога.Да,  НСтр("ru='Открыть настройки';uk='Відкрити настройки'"));
	Режим.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Настроить позже';uk='Настроїти пізніше'"));
	
	ШаблонВопроса = НСтр("ru='Рекомендуется проверить настройки обмена с клиент-банком
|по счету %1';uk='Рекомендується перевірити настройки обміну з клієнт-банком
|по рахунку %1'");
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонВопроса, Объект.БанковскийСчет);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросВыполнитьНастройкуЗавершение", ЭтотОбъект, ВызваноИзПриОткрытии);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Режим,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуКлиентБанка()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Организация");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.Организация");
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",                                    Объект.Организация);
	ПараметрыФормы.Вставить("БанковскийСчет",                                 Объект.БанковскийСчет);
	ПараметрыФормы.Вставить("ГруппаДляНовыхКонтрагентов",                     ГруппаДляНовыхКонтрагентов);
	ПараметрыФормы.Вставить("СтатьяДДССписаниеСРасчетногоСчета",              СтатьяДДССписаниеСРасчетногоСчета);
	ПараметрыФормы.Вставить("СтатьяДДСПоступлениеНаРасчетныйСчет",            СтатьяДДСПоступлениеНаРасчетныйСчет);
	ПараметрыФормы.Вставить("ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета",   ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета);
	ПараметрыФормы.Вставить("ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет", ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыполнитьНастройкуКлиентБанкаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаНастройкиЗаполнения", ПараметрыФормы, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройка(Команда)
	
	ВыполнитьНастройкуКлиентБанка();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтчетПоЗагрузке(Команда)
	
	ПолеОтчета = Новый ТабличныйДокумент;
	ПолучитьОтчетОЗагрузке(ПолеОтчета);
	ПолеОтчета.ТолькоПросмотр = Истина;
	ПолеОтчета.Показать(НСтр("ru='Отчет о загруженных документах';uk='Звіт про завантажені документи'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтрагентов(Команда)
	
	ПараметрыФормы = Новый Структура;
	АдресХранилищаКонтрагентов = ПолучитьАдресВременногоХранилищаТаблицыКонтрагентов();
	
	ПараметрыФормы.Вставить("АдресХранилищаКонтрагентов", АдресХранилищаКонтрагентов);
	ПараметрыФормы.Вставить("Организация",                Объект.Организация);
	ПараметрыФормы.Вставить("ГруппаДляНовыхКонтрагентов", ГруппаДляНовыхКонтрагентов);
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма.ФормаКонтрагентов", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДокументыКИмпортуКонтекстноеМенюКнопкаИзменить(Команда)
	
	Если НЕ ЗначениеЗаполнено(ДокументыКИмпорту) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	ДокументыКИмпортуВыбор(Элементы.ДокументыКИмпорту, Элементы.ДокументыКИмпорту.ТекущаяСтрока,
		Элементы.ДокументыКИмпорту.ТекущийЭлемент, СтандартнаяОбработка);
	
	Если СтандартнаяОбработка Тогда
		Элементы.ДокументыКИмпорту.ИзменитьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыНаЭкспорт(Команда)
	
	ОбновитьСписокДокументовНаЭкспорт();
	
КонецПроцедуры

// Команда считывает данные из текстового файла
//
&НаКлиенте
Процедура КомандаПрочитатьДанныеИзФайла(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.ГруппаЗагрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПрочитатьДанныеИзФайла();
	
КонецПроцедуры

// Команда устанавливает флажки во всех строках таблицы
//
&НаКлиенте
Процедура ДокументыКИмпортуОтметитьВсе(Команда)
	
	ДокументыКИмпортуУстановитьОтметку(Истина);
	
КонецПроцедуры

// Команда снимает флажки во всех строках таблицы
//
&НаКлиенте
Процедура ДокументыКИмпортуСнятьОтметкуСоВсех(Команда)
	
	ДокументыКИмпортуУстановитьОтметку(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьФайл(Команда)
	
	ПрочитатьДанныеИзФайла();
	Если НЕ Объект.СоздаватьНенайденныеЭлементы Тогда
		ПроверитьЗаполнениеТаблицыДокументов("ДокументыКИмпорту");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибки(Команда)
	
	Элементы.ДокументыКИмпортуПоказатьОшибки.Пометка = НЕ Элементы.ДокументыКИмпортуПоказатьОшибки.Пометка;
	ПоказатьОшибкиНаСервере(Элементы.ДокументыКИмпортуПоказатьОшибки.Пометка);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиНаСервере(Включить)
	
	Если НЕ Объект.СоздаватьНенайденныеЭлементы Тогда
		Возврат;
	КонецЕсли;
	
	Если Включить Тогда
		ОтборОшибок = Новый Структура("ЕстьОшибка", Истина);
		Элементы.ДокументыКИмпорту.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборОшибок);
	Иначе
		Элементы.ДокументыКИмпорту.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизацияСервер();
	
	ОбновитьСпискиДокументов(Истина);
	УправлениеФормой();
	
	Если НЕ НастройкаВыполнена И ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		НеинтерактивноеИзменениениеНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	
	ЗагрузитьНастройкиДляБанковскогоСчета();
	
	ОбновитьСпискиДокументов(Истина);
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайлаДляВыгрузкиИЗагрузки(Элемент, НСтр("ru='выгрузки';uk='вивантаження'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФайлДляПросмотра(Элемент, Объект.Кодировка, НСтр("ru='Файл выгрузки';uk='Файл вивантаження'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайлаДляВыгрузкиИЗагрузки(Элемент, НСтр("ru='загрузки';uk='завантаження'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФайлДляПросмотра(Элемент, Объект.Кодировка, НСтр("ru='Файл загрузки';uk='Файл завантаження'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ПустаяСтрока(Текст) Тогда
		Объект.ФайлЗагрузки = СокрЛП(Текст);
		ПрочитатьДанныеИзФайла();
	КонецЕсли;
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ <Платежные документы>

&НаКлиенте
Процедура ПлатежныеДокументыВыгружатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПлатежныеДокументы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Знак = ?(ТекущиеДанные.Выгружать, 1, -1);
	
	КоличествоКВыгрузке     = КоличествоКВыгрузке     + 1 * Знак;
	СуммаДокументаКВыгрузке = СуммаДокументаКВыгрузке + ТекущиеДанные.СуммаДокумента * Знак;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "ПлатежныеДокументыОписаниеОшибок" Тогда
		ПоказатьОповещениеПользователя(НСтр("ru='Ошибки в документе';uk='Помилки в документі'"),
			ПолучитьНавигационнуюСсылку(Элемент.ТекущиеДанные.Документ),
			Элемент.ТекущиеДанные.ОписаниеОшибок);
	ИначеЕсли Поле.Имя = "ПлатежныеДокументыНазначениеПлатежа" Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("Заголовок", НСтр("ru='Назначение платежа';uk='Призначення платежу'"));
		ПараметрыСообщения.Вставить("Сообщение", Элемент.ТекущиеДанные.НазначениеПлатежа);
		Если Элемент.ТекущиеДанные.Документ <> Неопределено Тогда
			ПараметрыСообщения.Вставить("ГиперссылкаТекст",
				ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(Элемент.ТекущиеДанные.Документ));
			ПараметрыСообщения.Вставить("ГиперссылкаНавигация", ПолучитьНавигационнуюСсылку(Элемент.ТекущиеДанные.Документ));
		КонецЕсли;
		
		ОбщегоНазначенияБПКлиент.ПоказатьСообщениеВФорме(ПараметрыСообщения);
		
	Иначе
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеДокументыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент.Имя <> "ПлатежныеДокументыВыгружать" И Элемент.Имя <> "ПлатежныеДокументы" Тогда
		Отказ = Истина;
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежныеДокументыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ <Документы к импорту>

// Событие вызывается при двойном щелчке мыши или нажатии Enter
//
&НаКлиенте
Процедура ДокументыКИмпортуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТаблицы = ДокументыКИмпорту.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле.Имя = "ДокументыКИмпортуЗагружать" Тогда
		СтрокаТаблицы.Загружать = НЕ СтрокаТаблицы.Загружать;
	ИначеЕсли Поле.Имя = "ДокументыКИмпортуОписаниеОшибок" Тогда
		СтандартнаяОбработка = Ложь;
		Если Элемент.ТекущиеДанные.Документ = Неопределено Тогда
			СсылкаДляПерехода = Неопределено;
		Иначе
			СсылкаДляПерехода = ПолучитьНавигационнуюСсылку(СтрокаТаблицы.Документ);
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(НСтр("ru='Ошибки в документе';uk='Помилки в документі'"), СсылкаДляПерехода, СтрокаТаблицы.ОписаниеОшибок);
	ИначеЕсли Поле.Имя = "ДокументыКИмпортуНазначениеПлатежа" Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("Заголовок", НСтр("ru='Назначение платежа';uk='Призначення платежу'"));
		ПараметрыСообщения.Вставить("Сообщение", СтрокаТаблицы.НазначениеПлатежа);
		Если СтрокаТаблицы.Документ <> Неопределено Тогда
			ПараметрыСообщения.Вставить("ГиперссылкаТекст",
				ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(СтрокаТаблицы.Документ));
			ПараметрыСообщения.Вставить("ГиперссылкаНавигация", ПолучитьНавигационнуюСсылку(СтрокаТаблицы.Документ));
		КонецЕсли;
		
		ОбщегоНазначенияБПКлиент.ПоказатьСообщениеВФорме(ПараметрыСообщения);
		
	ИначеЕсли Поле.Имя = "ДокументыКИмпортуДокумент" Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
			
			
			ПоказатьЗначение(, СтрокаТаблицы.Документ);
		Иначе
			// не реагируем
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
		Если Поле.Имя = "ДокументыКИмпортуНомерСтроки"
			ИЛИ Поле.Имя = "ДокументыКИмпортуДокумент"
			ИЛИ Поле.Имя = "ДокументыКИмпортуНомерДок"
			ИЛИ Поле.Имя = "ДокументыКИмпортуДатаПроведения"
			ИЛИ Поле.Имя = "ДокументыКИмпортуСуммаСписано"
			ИЛИ Поле.Имя = "ДокументыКИмпортуСуммаПоступило"
			ИЛИ Поле.Имя = "ДокументыКИмпортуВидОперации"
			ИЛИ Поле.Имя = "ДокументыКИмпортуДоговор" И СостояниеЗагрузки = 2
			Тогда
			
			
			СтандартнаяОбработка = Ложь;
			ПоказатьЗначение(, СтрокаТаблицы.Документ);
			
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуПриАктивизацииСтроки(Элемент)
	
	Если НЕ Объект.СоздаватьНенайденныеЭлементы Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ВывестиСтатусЗагрузки", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	
	Если ТекущиеДанные.Контрагент = Неопределено ИЛИ ТипЗнч(ТекущиеДанные.Контрагент) = Тип("Строка") Тогда
		ТекущиеДанные.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуВидОперацииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	
	СписокВидовДоговоров  = ЗаполнитьВидыДоговоров(ТекущиеДанные.ВидОперации);
	ДоговорКонтрагента    = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	УстановитьДоговорКонтрагента(ДоговорКонтрагента, ТекущиеДанные.Контрагент, Объект.Организация, СписокВидовДоговоров);
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекущиеДанные.Договор = ДоговорКонтрагента;
	Иначе
		ТекущиеДанные.Договор = ?(Объект.СоздаватьНенайденныеЭлементы, НСтр("ru='Не создан';uk='Не створений'"), НСтр("ru='Не найден';uk='Не знайдений'"));
	КонецЕсли;
	
	Если СписокВидовДоговоров.Количество() > 0 И НастройкаЗаполнения.Количество() > 0 Тогда
		Если СписокВидовДоговоров[0] = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем") Тогда
			ТекущиеДанные.СтатьяДДС = НастройкаЗаполнения[0].СтатьяДДС; // Вид ДДС "СредстваПолученныеОтПокупателейИЗаказчиков"
		ИначеЕсли СписокВидовДоговоров[0] = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком") Тогда
			ТекущиеДанные.СтатьяДДС = НастройкаЗаполнения[1].СтатьяДДС; // Вид ДДС "ОплатаОборотныхАктивов"
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСостояниеСтроки(
		ТекущиеДанные.ДоговорКонтрагентаНеНайден, ТекущиеДанные.Готовность, ТекущиеДанные.Договор,
		Объект.СоздаватьНенайденныеЭлементы, ТекущиеДанные.ВидОперации, ТекущиеДанные.ОписаниеОшибок,
		ТекущиеДанные.Контрагент, ТекущиеДанные.СчетКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	
	Если ТекущиеДанные.Договор = Неопределено ИЛИ ТипЗнч(ТекущиеДанные.Договор) = Тип("Строка") Тогда
		ТекущиеДанные.Договор = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	Иначе
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ВидДоговораВзаиморасчетов = ЗаполнитьВидыДоговоров(ТекущиеДанные.ВидОперации);
	Если ВидДоговораВзаиморасчетов.Количество() = 0 Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",
		Новый Структура("Владелец, Организация, ВидДоговора",
			ТекущиеДанные.Контрагент, Объект.Организация, Новый ФиксированныйМассив(ВидДоговораВзаиморасчетов)));
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ЗначениеОтбора", ВалютаРегламентированногоУчета);
	
	СтруктураДополнительныхПараметров = Новый Структура();
	СтруктураДополнительныхПараметров.Вставить("ВалютаВзаиморасчетов", СтруктураОтбора);
	ПараметрыФормы.Вставить("СтруктураДополнительныхПараметров",       СтруктураДополнительныхПараметров);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуСчетКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	
	Если ТекущиеДанные.СчетКонтрагента = Неопределено ИЛИ ТипЗнч(ТекущиеДанные.СчетКонтрагента) = Тип("Строка")
		И НЕ (ТекущиеДанные.Контрагент = Неопределено ИЛИ ТипЗнч(ТекущиеДанные.Контрагент) = Тип("Строка")) Тогда
		ТекущиеДанные.СчетКонтрагента = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
	Иначе
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор",
		Новый Структура("Владелец, Организация",
			ТекущиеДанные.Контрагент, Объект.Организация));
	
	СтруктураДополнительныхПараметров = Новый Структура;
	СтруктураДополнительныхПараметров.Вставить("ВалютаДенежныхСредств",
		Новый Структура("ЗначениеОтбора", ВалютаРегламентированногоУчета));
	СтруктураДополнительныхПараметров.Вставить("Валютный",       Новый Структура("ЗначениеОтбора", Ложь));
	ПараметрыФормы.Вставить("СтруктураДополнительныхПараметров", СтруктураДополнительныхПараметров);
	
	ОткрытьФорму("Справочник.БанковскиеСчета.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуКонтрагентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	
	ВходящиеПараметры = Новый Структура;
	ВходящиеПараметры.Вставить("Организация",                    Объект.Организация);
	ВходящиеПараметры.Вставить("ВидОперации",                    ТекущиеДанные.ВидОперации);
	ВходящиеПараметры.Вставить("СчетКонтрагента",                ТекущиеДанные.СчетКонтрагента);
	ВходящиеПараметры.Вставить("Контрагент",                     ТекущиеДанные.Контрагент);
	ВходящиеПараметры.Вставить("Договор",                        ТекущиеДанные.Договор);
	ВходящиеПараметры.Вставить("Готовность",                     ТекущиеДанные.Готовность);
	ВходящиеПараметры.Вставить("ВидОперации",                    ТекущиеДанные.ВидОперации);
	ВходящиеПараметры.Вставить("ОписаниеОшибок",                 ТекущиеДанные.ОписаниеОшибок);
	ВходящиеПараметры.Вставить("ДоговорКонтрагентаНеНайден",     ТекущиеДанные.ДоговорКонтрагентаНеНайден);
	ВходящиеПараметры.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	
	ИсходящиеПараметры = ДокументыКИмпортуКонтрагентПриИзмененииСервер(ВходящиеПараметры, Объект.СоздаватьНенайденныеЭлементы);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ИсходящиеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуСчетКонтрагентаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	
	ВходящиеПараметры = Новый Структура;
	ВходящиеПараметры.Вставить("Организация",                    Объект.Организация);
	ВходящиеПараметры.Вставить("ВидОперации",                    ТекущиеДанные.ВидОперации);
	ВходящиеПараметры.Вставить("СчетКонтрагента",                ТекущиеДанные.СчетКонтрагента);
	ВходящиеПараметры.Вставить("Контрагент",                     ТекущиеДанные.Контрагент);
	ВходящиеПараметры.Вставить("Договор",                        ТекущиеДанные.Договор);
	ВходящиеПараметры.Вставить("Готовность",                     ТекущиеДанные.Готовность);
	ВходящиеПараметры.Вставить("ВидОперации",                    ТекущиеДанные.ВидОперации);
	ВходящиеПараметры.Вставить("ОписаниеОшибок",                 ТекущиеДанные.ОписаниеОшибок);
	ВходящиеПараметры.Вставить("ДоговорКонтрагентаНеНайден",     ТекущиеДанные.ДоговорКонтрагентаНеНайден);
	ВходящиеПараметры.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);
	
	ИсходящиеПараметры = ДокументыКИмпортуСчетКонтрагентаПриИзмененииСервер(ВходящиеПараметры, Объект.СоздаватьНенайденныеЭлементы);
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ИсходящиеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуКонтрагентОчистка(Элемент, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекДанные.Контрагент) <> Тип("Строка") Тогда
		ИмяКонтрагента = ?(ПустаяСтрока(ТекДанные.Получатель1), ТекДанные.Получатель, ТекДанные.Получатель1);
		ТекДанные.Контрагент = Неопределено;
		ТекущееЗначениеЯчейкиРедактированияДоИзменения = "Не загружен (" + СокрЛП(ИмяКонтрагента) + ")";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуЗагружатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Знак = ?(ТекущиеДанные.Загружать, 1, -1);
	
	КоличествоКЗагрузке     = КоличествоКЗагрузке     + 1 * Знак;
	СуммаПоступилоКЗагрузке = СуммаПоступилоКЗагрузке + ТекущиеДанные.СуммаПоступило * Знак;
	СуммаСписаноКЗагрузке   = СуммаСписаноКЗагрузке   + ТекущиеДанные.СуммаСписано   * Знак;
	
	УстановитьДоступностьКнопкиЗагрузить(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееЗначениеЯчейкиРедактирования = ТекДанные[СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, "")];
	
	Если ТипЗнч(ТекущееЗначениеЯчейкиРедактирования) <> Тип("Строка") И НЕ ЗначениеЗаполнено(ТекущееЗначениеЯчейкиРедактирования)
		И ЗначениеЗаполнено(ТекущееЗначениеЯчейкиРедактированияДоИзменения) Тогда
		ТекДанные[СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, "")] = ТекущееЗначениеЯчейкиРедактированияДоИзменения;
		ТекущееЗначениеЯчейкиРедактированияДоИзменения = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуПередНачаломИзменения(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееЗначениеЯчейкиРедактированияДоИзменения = ТекДанные[СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, "")];
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаВыгрузка Тогда
		ОбновитьСписокДокументовНаЭкспорт();
	КонецЕсли;
	
	ОткрытаСтраницаВыгрузки = Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыгрузка;
	УстановитьКнопкуПоУмолчанию(ОткрытаСтраницаВыгрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Параметр = ЭтотОбъект Тогда
		ОбновитьСписокДокументовНаЭкспорт();
	ИначеЕсли ИмяСобытия = "СозданиеНеНайденного" Тогда
		ПрочитатьДанныеИзФайла(, Ложь);
		Если НЕ Объект.СоздаватьНенайденныеЭлементы Тогда
			ПроверитьЗаполнениеТаблицыДокументов("ДокументыКИмпорту", НЕ ПустаяСтрока(АдресХранилищаКонтрагентов));
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ВыбранФайлЗагрузки" Тогда
		Если НЕ ПустаяСтрока(Объект.ФайлЗагрузки) Тогда
			ПрочитатьДанныеИзФайла();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзменениеВыписки" И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗагрузка Тогда
		Если СостояниеЗагрузки <> 3 Тогда
			ОчиститьСообщения();
			ПодключитьОбработчикОжидания("Подключаемый_ОпределитьСсылочныеДанные", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	
	Объект.НачПериода = ОбщегоНазначенияБП.ПолучитьРабочуюДату();
	Объект.КонПериода = ОбщегоНазначенияБП.ПолучитьРабочуюДату();
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Объект.БанковскийСчет = БухгалтерскийУчетПереопределяемый.ПолучитьБанковскийСчетПоУмолчанию(Объект.Организация);
	КонецЕсли;
	
	Если Параметры.Свойство("РежимПоУмолчанию") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы[Параметры.РежимПоУмолчанию];
	КонецЕсли;
	
	ЗаполнитьВидыДокументов(ТаблицаДокументов);
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ИспользоватьСтатьиДДС          = Истина;
	
	ЗагрузитьНастройкиДляБанковскогоСчета();
	
	Если Параметры.Свойство("ЭлектроннаяВыпискаБанка") Тогда
		ЭлектроннаяВыпискаБанка = Параметры.ЭлектроннаяВыпискаБанка;
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВыгрузка Тогда
		ДокументыНаЭкспортОбновитьСервер(Объект.ВыгружатьПлатежноеПоручение, Объект.ВыгружатьПлатежноеТребование);
	КонецЕсли;
	
	УправлениеФормойНаСервере();
	
	ОрганизацияЗаголовок = НСтр("ru='Организация:';uk='Організація:'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	
	Если НастройкаЗаполнения.Количество() = 0 Тогда
		НастройкаЗаполненияСтрока = НастройкаЗаполнения.Добавить();
		НастройкаЗаполненияСтрока.Документ = "Поступление на расчетный счет";
		НастройкаЗаполненияСтрока = НастройкаЗаполнения.Добавить();
		НастройкаЗаполненияСтрока.Документ = "Списание с расчетного счета";
	Иначе
		Для каждого НастройкаЗаполненияСтрока Из НастройкаЗаполнения Цикл
			Если НастройкаЗаполненияСтрока.Документ = "Поступление на расчетный счет" Тогда
				ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет = НастройкаЗаполненияСтрока.Проводить;
				СтатьяДДСПоступлениеНаРасчетныйСчет            = НастройкаЗаполненияСтрока.СтатьяДДС;
			ИначеЕсли НастройкаЗаполненияСтрока.Документ = "Списание с расчетного счета" Тогда
				ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета   = НастройкаЗаполненияСтрока.Проводить;
				СтатьяДДССписаниеСРасчетногоСчета              = НастройкаЗаполненияСтрока.СтатьяДДС;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВозможностьВыбораФайлов = РаботаСФайламиСлужебныйКлиент.РасширениеРаботыСФайламиПодключено();
	УстановитьВидимостьЭлементовВыбораФайлов();
	
	
	Если ВозможностьВыбораФайлов Тогда
		НастройкаКлиентБанкаПриОткрытии();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКлиентБанкаПриОткрытии()
	
	Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Если НастройкаВыполнена Тогда
			Если ВозможностьВыбораФайлов И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗагрузка Тогда
				ПодключитьОбработчикОжидания("Подкючаемый_ПрочитатьДанныеИзФайла", 0.1, Истина);
			КонецЕсли;
		Иначе
			ПодключитьОбработчикОжидания("Подключаемый_СпроситьПроНастройкуКлиентБанка", 0.1, Истина);
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧАЕМЫЕ ОБРАБОТЧИКИ


&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ОповеститьОЗагрузкеДанныхНаКлиенте(ЗагрузитьПодготовленныеДанные(СостояниеЗагрузки < 2),
				?(СостояниеЗагрузки < 2, "Чтение", "Загрузка"));
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ВремяНачалаОперации = Неопределено;
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВывестиСтатусЗагрузки()
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтатуснаяСтрокаПриЗагрузкеТекст = СокрЛП(ТекущиеДанные.ОписаниеОшибок);
		
		Элементы.СтатуснаяСтрокаПриЗагрузке.Подсказка = СтатуснаяСтрокаПриЗагрузкеТекст;
		СтатуснаяСтрокаПриЗагрузке = ?(СтатуснаяСтрокаПриЗагрузкеТекст = "",
			СтатуснаяСтрокаПриЗагрузкеТекст,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Предупреждение %1';uk='Попередження %1'"), СтатуснаяСтрокаПриЗагрузкеТекст));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подкючаемый_ПрочитатьДанныеИзФайла()
	
	ПрочитатьДанныеИзФайла(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОпределитьСсылочныеДанные()
	
	ПрочитатьДанныеИзФайла(Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СпроситьПроНастройкуКлиентБанка()
	
	НеинтерактивноеИзменениениеНастройки(Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗАВЕРШЕНИЕ НЕМОДАЛЬНЫХ ВЫЗОВОВ

&НаКлиенте
Процедура УстановкаРасширенияРаботыСФайламиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВозможностьВыбораФайлов = ПодключитьРасширениеРаботыСФайлами();
	УстановитьВидимостьЭлементовВыбораФайлов();
	
	НастройкаКлиентБанкаПриОткрытии();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуКлиентБанкаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		ГруппаДляНовыхКонтрагентов                     = РезультатЗакрытия.ГруппаДляНовыхКонтрагентов;
		СтатьяДДССписаниеСРасчетногоСчета              = РезультатЗакрытия.СтатьяДДССписаниеСРасчетногоСчета;
		СтатьяДДСПоступлениеНаРасчетныйСчет            = РезультатЗакрытия.СтатьяДДСПоступлениеНаРасчетныйСчет;
		ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета   = РезультатЗакрытия.ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета;
		ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет = РезультатЗакрытия.ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет;
		
		НайденнаяСтрока = НастройкаЗаполнения.НайтиСтроки(Новый Структура("Документ", "Поступление на расчетный счет"));
		НайденнаяСтрока[0].Проводить = ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет;
		НайденнаяСтрока[0].СтатьяДДС = СтатьяДДСПоступлениеНаРасчетныйСчет;
		
		НайденнаяСтрока = НастройкаЗаполнения.НайтиСтроки(Новый Структура("Документ", "Списание с расчетного счета"));
		НайденнаяСтрока[0].Проводить = ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета;
		НайденнаяСтрока[0].СтатьяДДС = СтатьяДДССписаниеСРасчетногоСчета;
		
		ЗаполнитьЗначенияСвойств(Объект, РезультатЗакрытия);
		
		ТребуетсяПовторноеЧтениеФайла = РезультатЗакрытия.КритическоеИзменение;
		НастройкаВыполнена            = Истина;
		
		ОбновитьСпискиДокументов(Истина, ТребуетсяПовторноеЧтениеФайла);
		УправлениеФормой();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВыполнитьНастройкуЗавершение(Ответ, ВызваноИзПриОткрытии) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьНастройкуКлиентБанка();
	
	Если ВызваноИзПриОткрытии
		И ВозможностьВыбораФайлов
		И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗагрузка
		И НастройкаВыполнена
		И НЕ ПустаяСтрока(Объект.ФайлЗагрузки) Тогда
		
		ПрочитатьДанныеИзФайла(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеФайлаЗавершение(Результат, АдресФайлаПомещенный, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	АдресФайла = АдресФайлаПомещенный;
	
	Если АдресФайла = Неопределено Тогда
		Если НЕ ВозможностьВыбораФайлов И ЗначениеЗаполнено(ДополнительныеПараметры.АдресФайлаСтарый) Тогда
			АдресФайла = ДополнительныеПараметры.АдресФайлаСтарый;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// Передаем на сервер
	ПрочитатьФайл(ДополнительныеПараметры.ВыводитьСообщения, ДополнительныеПараметры.ТребуетсяПовторноеЧтениеФайла);
	
КонецПроцедуры

