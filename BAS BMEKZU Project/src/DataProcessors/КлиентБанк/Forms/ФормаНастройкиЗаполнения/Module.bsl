////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
Функция ПроверитьНевозможностьСохранения()
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(Настр_БанковскийСчет) Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "Банковский счет");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Настр_БанковскийСчет");
		Возврат Истина;
	КонецЕсли;
	
	Если Настр_Программа = "" Тогда
		ТекстСообщения = ОбщегоНазначенияБПКлиентСервер.ПолучитьТекстСообщения("Поле", "Заполнение", "программа Клиента банка");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Настр_Программа");
		
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ Настр_ПлатежноеПоручение И НЕ Настр_ПлатежноеТребование Тогда
		ТекстСообщения = НСтр("ru='Не выбраны документы для выгрузки';uk='Не вибрані документи для вивантаження'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Настр_ПлатежноеПоручение");
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Элементы.Настр_ФайлЗагрузки.Видимость = Форма.ВозможностьВыбораФайлов;
	Элементы.Настр_ФайлВыгрузки.Видимость = Форма.ВозможностьВыбораФайлов;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьТаблицуПлатежныхДокументов(Знач ПлатежноеПоручение, Знач ПлатежноеТребование)
	
	ТаблицаДокументов = Новый ТаблицаЗначений();
	ТаблицаДокументов.Колонки.Добавить("Документ", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(24));
	ТаблицаДокументов.Колонки.Добавить("Пометка",  Новый ОписаниеТипов("Булево"));
	
	СтрокаДокумента = ТаблицаДокументов.Добавить();
	СтрокаДокумента.Документ = "Платежное поручение";
	СтрокаДокумента.Пометка  = ПлатежноеПоручение;
	
	СтрокаДокумента = ТаблицаДокументов.Добавить();
	СтрокаДокумента.Документ = "Платежное требование";
	СтрокаДокумента.Пометка  = ПлатежноеТребование;
	
	Возврат ТаблицаДокументов;
	
КонецФункции

&НаСервере
Процедура ПолучитьДанные()
	
	Настройки = Обработки.КлиентБанк.ПолучитьНастройкиПрограммыКлиентаБанка(Организация, Настр_БанковскийСчет);
	
	Настр_Кодировка                                  = Настройки.Кодировка;
	Настр_Программа                                  = Настройки.Программа;
	Настр_ФайлВыгрузки                               = Настройки.ФайлВыгрузки;
	Настр_ФайлЗагрузки                               = Настройки.ФайлЗагрузки;
	Настр_АвтоматическоеСозданиеНенайденныхЭлементов = Настройки.СоздаватьНенайденныеЭлементы;
	
	Настройки.Свойство("Платежное_поручение",  Настр_ПлатежноеПоручение);
	Настройки.Свойство("Платежное_требование", Настр_ПлатежноеТребование);
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиНаСервере(Знач Организация, Знач БанковскийСчет, Знач Программа,
		Знач Кодировка, Знач ФайлВыгрузки, Знач ФайлЗагрузки, 
		Знач ПлатежноеПоручение, Знач ПлатежноеТребование, Знач АвтоматическоеСозданиеНенайденныхЭлементов)
	
	НастройкиОбменаСКлиентомБанка = РегистрыСведений.НастройкиОбменаСКлиентомБанка.СоздатьМенеджерЗаписи();
	НастройкиОбменаСКлиентомБанка.БанковскийСчет = БанковскийСчет;
	НастройкиОбменаСКлиентомБанка.Организация    = Организация;
	НастройкиОбменаСКлиентомБанка.Прочитать();
	
	ТаблицаДокументов = ЗаполнитьТаблицуПлатежныхДокументов(ПлатежноеПоручение, ПлатежноеТребование);
	
	НастройкиОбменаСКлиентомБанка.Организация                              = Организация;
	НастройкиОбменаСКлиентомБанка.БанковскийСчет                           = БанковскийСчет;
	НастройкиОбменаСКлиентомБанка.Программа                                = Программа;
	НастройкиОбменаСКлиентомБанка.Кодировка                                = Кодировка;
	НастройкиОбменаСКлиентомБанка.ФайлВыгрузки                             = ФайлВыгрузки;
	НастройкиОбменаСКлиентомБанка.ФайлЗагрузки                             = ФайлЗагрузки;
	НастройкиОбменаСКлиентомБанка.ВидыВыгружаемыхПлатДокументов            = Новый ХранилищеЗначения(ТаблицаДокументов);
	НастройкиОбменаСКлиентомБанка.ОтключитьАвтоматическоеСозданиеНенайденныхЭлементов = НЕ АвтоматическоеСозданиеНенайденныхЭлементов;
	
	НастройкиОбменаСКлиентомБанка.Записать();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.Настр_Программа.СписокВыбора.ЗагрузитьЗначения(
		УчетДенежныхСредствБП.СписокСовместимыхПрограммКлиентовБанка(Истина));
	
	Организация                                               = Параметры.Организация;
	Настр_ГруппаДляНовыхКонтрагентов                          = Параметры.ГруппаДляНовыхКонтрагентов;
	Настр_БанковскийСчет                                      = Параметры.БанковскийСчет;
	
	Настр_СтатьяДДССписаниеСРасчетногоСчета                   = Параметры.СтатьяДДССписаниеСРасчетногоСчета;
	Настр_СтатьяДДСПоступлениеНаРасчетныйСчет                 = Параметры.СтатьяДДСПоступлениеНаРасчетныйСчет;
	
	Настр_ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета        = Параметры.ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета;
	Настр_ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет      = Параметры.ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет;
	
	КритическоеИзменение = Ложь;
	
	ПолучитьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВозможностьВыбораФайлов = ПодключитьРасширениеРаботыСФайлами();
	
	Если НЕ (ЗначениеЗаполнено(ЭтотОбъект.Настр_ФайлВыгрузки) ИЛИ ЗначениеЗаполнено(ЭтотОбъект.Настр_ФайлЗагрузки)) Тогда
		#Если ВебКлиент Тогда
			Если ВозможностьВыбораФайлов Тогда
				
				Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
				ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
				ДиалогОткрытияФайла.ПолноеИмяФайла = "";
				ДиалогОткрытияФайла.Каталог = "";
				ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
				ДиалогОткрытияФайла.Заголовок = НСтр("ru='Выберите путь к локальному кэшу файлов';uk='Виберіть шлях до локального кешу файлів'");
				Если ДиалогОткрытияФайла.Выбрать() Тогда
					ИмяКаталога = ДиалогОткрытияФайла.Каталог;
					ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталога);	
					
					ЭтотОбъект.Настр_ФайлВыгрузки = ИмяКаталога + "1C_to_CB.xml";
					ЭтотОбъект.Настр_ФайлЗагрузки = ИмяКаталога + "CB_to_1C.xml";
				КонецЕсли;
				
			КонецЕсли;
		#Иначе
			ЭтотОбъект.Настр_ФайлВыгрузки = КаталогВременныхФайлов() + "1C_to_CB.xml";
			ЭтотОбъект.Настр_ФайлЗагрузки = КаталогВременныхФайлов() + "CB_to_1C.xml";
			Модифицированность = Истина;
		#КонецЕсли
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru='Настройки были изменены, сохранить?';uk='Настройки були змінені, зберегти?'");
		
		ОписаниеОповещенияЗавершение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Отказ = ПроверитьНевозможностьСохранения();
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ЗакрытьИСохранить(Неопределено);
	Иначе
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура Настр_ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайлаДляВыгрузкиИЗагрузки(Элемент, НСтр("ru='загрузки';uk='завантаження'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Настр_ФайлЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФайлДляПросмотра(Элемент, Настр_Кодировка, "Файл загрузки");
	
КонецПроцедуры

&НаКлиенте
Процедура Настр_ФайлЗагрузкиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	КритическоеИзменение = Истина;
	Настр_ФайлЗагрузки = Текст;
	
КонецПроцедуры

&НаКлиенте
Процедура Настр_ФайлВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайлаДляВыгрузкиИЗагрузки(Элемент, НСтр("ru='выгрузки';uk='вивантаження'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Настр_ФайлВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФайлДляПросмотра(Элемент, Настр_Кодировка, "Файл выгрузки");
	
КонецПроцедуры

// Открывает для просмотра текстовой документ
//
&НаКлиенте
Процедура ОткрытьФайлДляПросмотра(Элемент, Кодировка, Заголовок) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ФайлНаДиске = Новый Файл(Элемент.ТекстРедактирования);
	Если НЕ ФайлНаДиске.Существует() Тогда
		ПоказатьПредупреждение(, "Не найден файл!");
		Возврат;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент();
	Если Кодировка = "DOS" Тогда
		Кодир = КодировкаТекста.OEM;
	ИначеЕсли Кодировка = "Windows" Тогда
		Кодир = КодировкаТекста.ANSI;
	Иначе	
		Кодир = КодировкаТекста.UTF8;
	КонецЕсли;
	
	Текст.Прочитать(Элемент.ТекстРедактирования, Кодир);
	Текст.Показать(Заголовок, Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаДляВыгрузкиИЗагрузки(Элемент, Режим) Экспорт
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбора.Фильтр                      = НСтр("ru='XML файл';uk='XML файл'") + " (*.xml)|*.xml";
	ДиалогВыбора.Заголовок                   = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Выберите файл для %1 данных из клиента банка';uk='Виберіть файл для %1 даних з клієнта банку'"), Режим);
	ДиалогВыбора.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбора.Расширение                  = "xml";
	ДиалогВыбора.ИндексФильтра               = 0;
	ДиалогВыбора.ПолноеИмяФайла              = ?(ПустаяСтрока(Элемент.ТекстРедактирования),
		?(Режим = НСтр("ru='выгрузки';uk='вивантаження'"), "1C_to_CB.xml", "CB_to_1C.xml"), Элемент.ТекстРедактирования);
	ДиалогВыбора.ПроверятьСуществованиеФайла = Ложь;
	
	Если ДиалогВыбора.Выбрать() Тогда
		Если Режим = НСтр("ru='загрузки';uk='завантаження'") Тогда
			Настр_ФайлЗагрузки = ДиалогВыбора.ПолноеИмяФайла;
		Иначе
			Настр_ФайлВыгрузки = ДиалогВыбора.ПолноеИмяФайла;
		КонецЕсли;
		
		Модифицированность   = Истина;
		КритическоеИзменение = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Настр_БанковскийСчетПриИзменении(Элемент)
	
	ПолучитьДанные();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Настр_ПрограммаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура("Заголовок, Список, ТекущаяСтрока",
		НСтр("ru='Выберите название программы';uk='Виберіть назву програми'"),
		Элементы.Настр_Программа.СписокВыбора,
		?(Настр_Программа = "", "Система ""Клиент-Банк""", Настр_Программа));
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("Настр_ПрограммаНачалоВыбораЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораИзСписка", СтруктураПараметров, ЭтотОбъект,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура Настр_ПрограммаНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ВыбранныйЭлемент = РезультатЗакрытия;
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Настр_Программа    = ВыбранныйЭлемент;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Настр_АвтоматическоеСозданиеНенайденныхЭлементовПриИзменении(Элемент)
	
	КритическоеИзменение = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Настр_КодировкаПриИзменении(Элемент)
	
	КритическоеИзменение = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗакрытьИСохранить(Команда)
	
	Если ПроверитьНевозможностьСохранения() Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиНаСервере(Организация, Настр_БанковскийСчет, Настр_Программа,
		Настр_Кодировка, Настр_ФайлВыгрузки, Настр_ФайлЗагрузки, 
		Настр_ПлатежноеПоручение, Настр_ПлатежноеТребование, Настр_АвтоматическоеСозданиеНенайденныхЭлементов);
	
	ИсходящиеПараметры = Новый Структура;
	ИсходящиеПараметры.Вставить("БанковскийСчет",                           Настр_БанковскийСчет);
	ИсходящиеПараметры.Вставить("ФайлВыгрузки",                             Настр_ФайлВыгрузки);
	ИсходящиеПараметры.Вставить("ФайлЗагрузки",                             Настр_ФайлЗагрузки);
	ИсходящиеПараметры.Вставить("Кодировка",                                Настр_Кодировка);
	ИсходящиеПараметры.Вставить("Программа",                                Настр_Программа);
	ИсходящиеПараметры.Вставить("ГруппаДляНовыхКонтрагентов",               Настр_ГруппаДляНовыхКонтрагентов);
	ИсходящиеПараметры.Вставить("ВыгружатьПлатежноеПоручение",              Настр_ПлатежноеПоручение);
	ИсходящиеПараметры.Вставить("ВыгружатьПлатежноеТребование",             Настр_ПлатежноеТребование);
	ИсходящиеПараметры.Вставить("СтатьяДДССписаниеСРасчетногоСчета",        Настр_СтатьяДДССписаниеСРасчетногоСчета);
	ИсходящиеПараметры.Вставить("СтатьяДДСПоступлениеНаРасчетныйСчет",      Настр_СтатьяДДСПоступлениеНаРасчетныйСчет);
	ИсходящиеПараметры.Вставить("ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета",
		Настр_ПроводитьПриЗагрузкеСписаниеСРасчетногоСчета);
	ИсходящиеПараметры.Вставить("ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет",
		Настр_ПроводитьПриЗагрузкеПоступлениеНаРасчетныйСчет);
	ИсходящиеПараметры.Вставить("СоздаватьНенайденныеЭлементы",             Настр_АвтоматическоеСозданиеНенайденныхЭлементов);
	ИсходящиеПараметры.Вставить("КритическоеИзменение",                     КритическоеИзменение);
	
	Модифицированность = Ложь;
	
	Закрыть(ИсходящиеПараметры);
	
КонецПроцедуры
