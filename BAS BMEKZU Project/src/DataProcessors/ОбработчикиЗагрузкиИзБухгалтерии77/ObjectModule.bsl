#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
//
// Данный модуль содержит экспортные процедуры обработчиков событий конвертации 
// и предназначен для отладки правил обмена. 
// После отладки рекомендуется внести соответствующие исправления обработчиков
// в базе «Конвертация данных 2.0» и заново сформировать файл правил.
//
////////////////////////////////////////////////////////////////////////////////
// ИСПОЛЬЗУЕМЫЕ СОКРАЩЕНИЯ ИМЕН ПЕРЕМЕННЫХ (АББРЕВИАТУРЫ)
//
//  ПКО  - правило конвертации объектов
//  ПКС  - правило конвертации свойств объектов
//  ПКГС - правило конвертации группы свойств объектов
//  ПКЗ  - правило конвертации значений объектов
//  ПВД  - правило выгрузки данных
//  ПОД  - правило очистки данных


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБРАБОТКИ


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПЕРЕМЕННЫЕ МОДУЛЯ ДЛЯ НАПИСАНИЯ АЛГОРИТМОВ (ОБЩИЕ ДЛЯ ВЫГРУЗКИ И ЗАГРУЗКИ)

Перем Параметры;
Перем Правила;
Перем Алгоритмы;
Перем Запросы;
Перем ТаблицаПравилВыгрузки;
Перем ТаблицаНастройкиПараметров;
Перем УзелДляОбмена; // только для on-line обмена
Перем ОбщиеПроцедурыФункции;
Перем ДатаНачала;
Перем ДатаОкончания;
Перем ДатаВыгрузкиДанных; // только для on-line обмена
Перем КомментарийПриВыгрузкеДанных;
Перем КомментарийПриЗагрузкеДанных;


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБРАБОТОК ОБМЕНА (ОБЩИЕ ДЛЯ ВЫГРУЗКИ И ЗАГРУЗКИ)

Перем одТипСтрока;                // Тип("Строка")
Перем одТипБулево;                // Тип("Булево")
Перем одТипЧисло;                 // Тип("Число")
Перем одТипДата;                  // Тип("Дата")
Перем одТипХранилищеЗначения;     // Тип("ХранилищеЗначения")
Перем одТипДвоичныеДанные;        // Тип("ДвоичныеДанные")
Перем одТипВидДвиженияНакопления; // Тип("ВидДвиженияНакопления")
Перем одТипУдалениеОбъекта;       // Тип("УдалениеОбъекта")
Перем одТипВидСчета;			  // Тип("ВидСчета")
Перем одТипТип;			  		  // Тип("Тип")
Перем одТипСоответствие;		  // Тип("Соответствие")

Перем одТипУзлаXML_КонецЭлемента;
Перем одТипУзлаXML_НачалоЭлемента;
Перем одТипУзлаXML_Текст;

Перем ЗначениеПустаяДата;


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ (ГЛОБАЛЬНЫЕ)

Процедура Конвертация_ПослеЗагрузкиОбъекта(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
	ИмяТипаОбъекта, ОбъектНайден) Экспорт
	
	Если ИмяТипаОбъекта = "Справочник" ИЛИ ИмяТипаОбъекта = "ПланВидовХарактеристик" Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Код) Тогда
			Объект.УстановитьНовыйКод();
		КонецЕсли;
		
		Если ТипЗнч(Объект) = Тип("СправочникОбъект.Сотрудники") Тогда
			Объект.ОбменДанными.Загрузка = Ложь;
			Попытка
				Объект.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	ИначеЕсли ИмяТипаОбъекта = "Документ" Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
			Объект.УстановитьНовыйНомер();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Конвертация_ПередЗагрузкойДанных(ФайлОбмена, Отказ) Экспорт

	//*********************************************************************************************
	// Настройка параметров учета
	//*********************************************************************************************
	
	// Склады
	// если не включен складской учет - то включим его принудительно
	
	ПараметрыУчета = ОбщегоНазначенияБПВызовСервера.ОпределитьПараметрыУчета();
	Если ПараметрыУчета.СкладскойУчет<> 1
		ИЛИ ПараметрыУчета.ВестиУчетПоРаботникам<> 1 Тогда
		ПараметрыУчета.СкладскойУчет = 2;
		ПараметрыУчета.ВестиПартионныйУчет = Истина;
		ПараметрыУчета.ВестиУчетПоРаботникам = 1;
		Константы.ИспользоватьУчетДенежныхСредствПоОбособленнымПодразделениям.Установить(Истина);
		ПараметрыУчета.КассыОбособленныхПодразделений = Истина;
		ОбщегоНазначенияБПВызовСервера.ПрименитьПараметрыУчета(ПараметрыУчета);
	КонецЕсли;
	
	//*********************************************************************************************
	
	Параметры.Вставить("ПараметрыАлгоритмов",Новый Структура);
	
	НаборКонстант = Константы.СоздатьНабор("ВедетсяПроизводственнаяДеятельность, ВедетсяРозничнаяТорговля");
	НаборКонстант.Прочитать();
	НаборКонстант.ВедетсяПроизводственнаяДеятельность = Истина;
	НаборКонстант.ВедетсяРозничнаяТорговля = Истина;
	НаборКонстант.Записать();
	
КонецПроцедуры

Процедура Конвертация_ПослеЗагрузкиДанных() Экспорт
	
	НаборЗаписей = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		ЗаписьНабора.ОсновноеРабочееМестоВОрганизации = Истина;
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВводНачальныхОстатков.Ссылка,
	|	ВводНачальныхОстатков.РазделУчета
	|ИЗ
	|	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
	|ГДЕ
	|	ВводНачальныхОстатков.Организация =&Организация";
	Попытка
		Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Исключение
		Возврат;
	КонецПопытки;
	
	Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы ИЗ Результат Цикл
		
		Объект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
		
		Если (Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство)
			ИЛИ (Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОтсроченныеНалоговыеАктивыИОбязательства) 	
			ИЛИ (Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета) 
			ИЛИ (Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства) 
			ИЛИ (Объект.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов) Тогда
			
			КоллекцияОбъектов = Объект.БухСправка;
			
			//обрабатываем субконто БУ
			Параметры.ПараметрыАлгоритмов.Очистить();
			Параметры.ПараметрыАлгоритмов.Вставить("ИмяТабличнойЧасти", "БухСправка");
			Параметры.ПараметрыАлгоритмов.Вставить("ИмяСчета","СчетУчета");
			Параметры.ПараметрыАлгоритмов.Вставить("ИмяСубконто","Субконто");
			Параметры.ПараметрыАлгоритмов.Вставить("ЗагруженныйОбъект",Объект);
			Выполнить(Алгоритмы.ОбработкаСубконтоПослеЗагрузки);
			
			
		КонецЕсли;
		
		Объект.ОбменДанными.Загрузка = Истина;
		Попытка
			Объект.Записать();
		Исключение
		КонецПопытки;
	
	КонецЦикла;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ ОБЪЕКТОВ

Процедура ПКО_ПослеЗагрузки_ДоговорыКонтрагентов(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если ОбъектНайден Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПриЗагрузке_ДоговорыКонтрагентовПоВидам(ФайлОбмена, ОбъектНайден, Объект, НеЗамещатьОбъект, ОбъектМодифицирован) Экспорт

	//Если ОбъектНайден Тогда
	//	Если НЕ Объект.ЭтоГруппа Тогда
	//		Если НЕ ЗначениеЗаполнено(Объект.ВидДоговора) Тогда
	//			Объект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
	//			НеЗамещатьОбъект = Истина;
	//		КонецЕсли;
	//		Если НЕ ЗначениеЗаполнено(Объект.ВалютаВзаиморасчетов) Тогда
	//			Объект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_РасходыБудущихПериодов(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	
	//обрабатываем субконто БУ
	Параметры.ПараметрыАлгоритмов.Очистить();
	Параметры.ПараметрыАлгоритмов.Вставить("ИмяТабличнойЧасти", "");
	Параметры.ПараметрыАлгоритмов.Вставить("ИмяСчета","СчетЗатрат");
	Параметры.ПараметрыАлгоритмов.Вставить("ИмяСубконто","СубконтоЗатрат");
	Параметры.ПараметрыАлгоритмов.Вставить("ЗагруженныйОбъект",Объект);
	Выполнить(Алгоритмы.ОбработкаСубконтоПослеЗагрузки);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_СобытияОС(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если Не ЗначениеЗаполнено(Объект.Код) Тогда Объект.УстановитьНовыйКод() КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ОСПеремещение(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если Не ЗначениеЗаполнено(Объект.Код) Тогда Объект.УстановитьНовыйКод() КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ОСМодернизация(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если Не ЗначениеЗаполнено(Объект.Код) Тогда Объект.УстановитьНовыйКод() КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ОСВводИПринятиеКУчету(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если Не ЗначениеЗаполнено(Объект.Код) Тогда Объект.УстановитьНовыйКод() КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ОСВыбытие(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если Не ЗначениеЗаполнено(Объект.Код) Тогда Объект.УстановитьНовыйКод() КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ОСПодготовкаКПередаче(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если Не ЗначениеЗаполнено(Объект.Код) Тогда Объект.УстановитьНовыйКод() КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ОСПередача(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если Не ЗначениеЗаполнено(Объект.Код) Тогда Объект.УстановитьНовыйКод() КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_СпособыОтраженияРасходовПоАмортизации(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	//обрабатываем субконто БУ
	Параметры.ПараметрыАлгоритмов.Очистить();
	Параметры.ПараметрыАлгоритмов.Вставить("ИмяТабличнойЧасти", "Способы");
	Параметры.ПараметрыАлгоритмов.Вставить("ИмяСчета","СчетЗатрат");
	Параметры.ПараметрыАлгоритмов.Вставить("ИмяСубконто","Субконто");
	Параметры.ПараметрыАлгоритмов.Вставить("ЗагруженныйОбъект",Объект);
	Выполнить(Алгоритмы.ОбработкаСубконтоПослеЗагрузки);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_СпособыОтраженияРасходовПоСпецодежде(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	//обрабатываем субконто БУ
	Параметры.ПараметрыАлгоритмов.Очистить();
	Параметры.ПараметрыАлгоритмов.Вставить("ИмяТабличнойЧасти", "Способы");
	Параметры.ПараметрыАлгоритмов.Вставить("ИмяСчета","СчетЗатрат");
	Параметры.ПараметрыАлгоритмов.Вставить("ИмяСубконто","Субконто");
	Параметры.ПараметрыАлгоритмов.Вставить("ЗагруженныйОбъект",Объект);
	Выполнить(Алгоритмы.ОбработкаСубконтоПослеЗагрузки);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_КонтрагентБанк(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если Объект.ЭтоНовый() Тогда
		Если Объект.ПолучитьСсылкуНового().Пустая() Тогда
			Объект.УстановитьСсылкуНового(Справочники.Контрагенты.ПолучитьСсылку());
		КонецЕсли;
		Объект.ГоловнойКонтрагент = Объект.ПолучитьСсылкуНового();
	Иначе
		Если Объект.ГоловнойКонтрагент<> Объект.Ссылка Тогда
			Объект.ГоловнойКонтрагент = Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ПорядокОтраженияЗарплатыВБухУчете(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	//обрабатываем субконто БУ
	Параметры.ПараметрыАлгоритмов.Очистить();
	Параметры.ПараметрыАлгоритмов.Вставить("ИмяТабличнойЧасти", "");
	Параметры.ПараметрыАлгоритмов.Вставить("ИмяСчета","Счет");
	Параметры.ПараметрыАлгоритмов.Вставить("ИмяСубконто","Субконто");
	Параметры.ПараметрыАлгоритмов.Вставить("ЗагруженныйОбъект",Объект);
	Выполнить(Алгоритмы.ОбработкаСубконтоПослеЗагрузки);
	Параметры.ПараметрыАлгоритмов.Очистить();
	Параметры.ПараметрыАлгоритмов.Вставить("ИмяТабличнойЧасти", "");
	Параметры.ПараметрыАлгоритмов.Вставить("ИмяСчета","СчетНУ");
	Параметры.ПараметрыАлгоритмов.Вставить("ИмяСубконто","СубконтоНУ");
	Параметры.ПараметрыАлгоритмов.Вставить("ЗагруженныйОбъект",Объект);
	Выполнить(Алгоритмы.ОбработкаСубконтоПослеЗагрузки);

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ОперацияБух (ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Для каждого Корреспонденция из Объект.Движения.Хозрасчетный Цикл
		Для каждого Субконто из Корреспонденция.СубконтоДт Цикл
			Ок = Ложь;
			Для каждого ВидыСубконто из Корреспонденция.СчетДт.ВидыСубконто Цикл
				Если ВидыСубконто.ВидСубконто = Субконто.Ключ Тогда
					Ок = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если не Ок Тогда
				Корреспонденция.СубконтоДт.Удалить(Субконто.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Субконто из Корреспонденция.СубконтоКт Цикл
			Ок = Ложь;
			Для каждого ВидыСубконто из Корреспонденция.СчетКт.ВидыСубконто Цикл
				Если ВидыСубконто.ВидСубконто = Субконто.Ключ Тогда
					Ок = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если не Ок Тогда
				Корреспонденция.СубконтоКт.Удалить(Субконто.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		Если (Корреспонденция.СчетДт = ПланыСчетов.Хозрасчетный.ПустаяСсылка()) 
			или (НЕ Корреспонденция.СчетДт.НалоговыйУчет) Тогда
			Корреспонденция.СуммаНУДт = 0;
			Корреспонденция.СуммаПРДт = 0;
			Корреспонденция.СуммаВРДт = 0;
		КонецЕсли;
		Если (Корреспонденция.СчетКт = ПланыСчетов.Хозрасчетный.ПустаяСсылка())
			или (НЕ Корреспонденция.СчетКт.НалоговыйУчет) Тогда
			Корреспонденция.СуммаНУКт = 0;
			Корреспонденция.СуммаПРКт = 0;
			Корреспонденция.СуммаВРКт = 0;
		КонецЕсли;
		Если (Корреспонденция.СчетДт = ПланыСчетов.Хозрасчетный.ПустаяСсылка())
			или (НЕ Корреспонденция.СчетДт.Валютный) Тогда
			Корреспонденция.ВалютаДт = Справочники.Валюты.ПустаяСсылка();
			Корреспонденция.ВалютнаяСуммаДт = 0;
		КонецЕсли;
		Если (Корреспонденция.СчетКт = ПланыСчетов.Хозрасчетный.ПустаяСсылка())
			или (НЕ Корреспонденция.СчетКт.Валютный) Тогда
			Корреспонденция.ВалютаКт = Справочники.Валюты.ПустаяСсылка();
			Корреспонденция.ВалютнаяСуммаКт = 0;
		КонецЕсли;
		Если (Корреспонденция.СчетДт = ПланыСчетов.Хозрасчетный.ПустаяСсылка())
			или (НЕ Корреспонденция.СчетДт.Количественный) Тогда
			Корреспонденция.КоличествоДт = 0;
		КонецЕсли;
		Если (Корреспонденция.СчетКт = ПланыСчетов.Хозрасчетный.ПустаяСсылка())
			или (НЕ Корреспонденция.СчетКт.Количественный) Тогда
			Корреспонденция.КоличествоКт = 0;
		КонецЕсли;
	КонецЦикла;
	
	Объект.Движения.Хозрасчетный.Записывать = Истина;

КонецПроцедуры

Процедура ПКО_ПриЗагрузке_Хозрасчетный(ФайлОбмена, ОбъектНайден, Объект, НеЗамещатьОбъект, ОбъектМодифицирован) Экспорт

	Пока ФайлОбмена.Прочитать() Цикл 
		ИмяУзла = ФайлОбмена.ЛокальноеИмя; 
		ТипУзла = ФайлОбмена.ТипУзла; 
		Если ИмяУзла = "АтрибутыСчета" И (ТипУзла = одТипУзлаXML_НачалоЭлемента) Тогда 
			УстанавливатьАтрибуты = одАтрибут(ФайлОбмена, одТипБулево, "УстанавливатьАтрибуты");
			Если УстанавливатьАтрибуты Тогда
				Объект.Количественный = одАтрибут(ФайлОбмена, одТипБулево, "Количественный");
				Объект.Валютный       = одАтрибут(ФайлОбмена, одТипБулево, "Валютный");
				Объект.Забалансовый   = одАтрибут(ФайлОбмена, одТипБулево, "Забалансовый");
			КонецЕсли;
		ИначеЕсли (ИмяУзла = "АтрибутыСчета") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда 
			Прервать; 
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_Хозрасчетный(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если Объект = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_Организации(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Если Не ОбъектНайден Тогда
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.Записать();
	КонецЕсли;
	
	Объект.ГоловнаяОрганизация = Объект.Ссылка;
	
	Параметры.Вставить("Организация", Объект.Ссылка);
	
	МенеджерЗаписиРегистра = РегистрыСведений.ДатыВводаНачальныхОстатков.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРегистра.Организация = Объект.Ссылка;
	МенеджерЗаписиРегистра.Прочитать();
	Если НЕ МенеджерЗаписиРегистра.Выбран() Тогда
		МенеджерЗаписиРегистра.Организация = Объект.Ссылка;
	КонецЕсли;
	МенеджерЗаписиРегистра.ДатаВводаНачальныхОстатков = ДатаНачала - 24*60*60;
	МенеджерЗаписиРегистра.Записать();
	

КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_Номенклатура(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт


КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_ПаспортныеДанныеФизЛиц(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	ТекстСерия				= НСтр("ru=', серия: %1';uk=', серія: %1'");
	ТекстНомер				= НСтр("ru=', № %1';uk=', № %1'");
	ТекстДатаВыдачи			= НСтр("ru=', выдан: %1 года';uk=', видано: %1 року'");
	ТекстСрокДействия		= НСтр("ru=', действует до: %1 года';uk=', діє до: %1 року'");
	ТекстКодПодразделения	= НСтр("ru=', № подр. %1';uk=', № підр.  %1'");
		
	Объект.Представление = ""
				+ Объект.ВидДокумента
				+ ?(ЗначениеЗаполнено(Объект.Серия), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСерия, Объект.Серия), "")
				+ ?(ЗначениеЗаполнено(Объект.Номер), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстНомер, Объект.Номер), "")
				+ ?(ЗначениеЗаполнено(Объект.ДатаВыдачи), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДатаВыдачи, Формат(Объект.ДатаВыдачи,"ДФ='дд ММММ гггг'")), "")
				+ ?(ЗначениеЗаполнено(Объект.СрокДействия), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСрокДействия, Формат(Объект.СрокДействия,"ДФ='дд ММММ гггг'")), "")
				+ ?(ЗначениеЗаполнено(Объект.КемВыдан), ", " + Объект.КемВыдан, "")
				+ ?(ЗначениеЗаполнено(Объект.КодПодразделения) И Объект.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.Паспорт, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКодПодразделения, Объект.КодПодразделения), "")
				
КонецПроцедуры

Процедура ПКО_ПослеЗагрузки_СписаниеОС_Обороты(ФайлОбмена, Отказ, Ссылка, Объект, ПараметрыОбъекта, ОбъектМодифицирован, 
                                           ИмяТипаОбъекта, ОбъектНайден, НаборЗаписей) Экспорт

	Объект.ОбменДанными.Загрузка = Истина;
	Объект.Записать();
	
	СобытияОСОрганизаций = Объект.Движения.СобытияОСОрганизаций;
	
	Для Каждого СтрокаТаблицы ИЗ СобытияОСОрганизаций Цикл		
		СтрокаТаблицы.НазваниеДокумента = Строка(Объект.Метаданные());
		СтрокаТаблицы.НомерДокумента = Объект.Номер;
	КонецЦикла;
	
	Объект.Записать();

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ СВОЙСТВ И ГРУПП СВОЙСТВ ОБЪЕКТОВ


////////////////////////////////////////////////////////////////////////////////
// АЛГОРИТМЫ

Процедура Алгоритм_ОбработкаСубконтоПослеЗагрузки()

	ИмяТабличнойЧасти = Параметры.ПараметрыАлгоритмов.ИмяТабличнойЧасти;
	ИмяСчета          = Параметры.ПараметрыАлгоритмов.ИмяСчета;
	ИмяСубконто       = Параметры.ПараметрыАлгоритмов.ИмяСубконто;
	ЗагруженныйОбъект = Параметры.ПараметрыАлгоритмов.ЗагруженныйОбъект;
	
	Если ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		//обрабатываем табличную часть
		Для каждого Корреспонденция из ЗагруженныйОбъект[ИмяТабличнойЧасти] Цикл
			
			СведенияОСчете = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Корреспонденция[ИмяСчета]);
			Для СчетчикСубконто = 1 По 3 Цикл
				Для СчетчикСчета = 1 по СведенияОСчете.КоличествоСубконто Цикл
					Если (Корреспонденция[ИмяСубконто+СчетчикСубконто] = СведенияОСчете["ВидСубконто"+СчетчикСчета+"ТипЗначения"].ПривестиЗначение(Корреспонденция[ИмяСубконто+СчетчикСубконто]))
						  и (СчетчикСчета <> СчетчикСубконто) и (ЗначениеЗаполнено(Корреспонденция[ИмяСубконто+СчетчикСубконто])) Тогда
						Субконто = Корреспонденция[ИмяСубконто+СчетчикСчета];
						Корреспонденция[ИмяСубконто+СчетчикСчета] = Корреспонденция[ИмяСубконто+СчетчикСубконто];
						Корреспонденция[ИмяСубконто+СчетчикСубконто] = Субконто;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
	
			Для СчетчикСубконто = 1 По 3 Цикл
				Если СведенияОСчете.КоличествоСубконто >= СчетчикСубконто Тогда
					Корреспонденция[ИмяСубконто+СчетчикСубконто] = СведенияОСчете["ВидСубконто"+СчетчикСубконто+"ТипЗначения"].ПривестиЗначение(Корреспонденция[ИмяСубконто+СчетчикСубконто]);
	
				Иначе
	
					Корреспонденция[ИмяСубконто+СчетчикСубконто] = Неопределено;
				КонецЕсли;
			КонецЦикла;		
		КонецЦикла;	
		
	Иначе
		//обрабатываем объект
	    Корреспонденция = ЗагруженныйОбъект;	
		СведенияОСчете = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Корреспонденция[ИмяСчета]);
		Для СчетчикСубконто = 1 По 3 Цикл
			Для СчетчикСчета = 1 по СведенияОСчете.КоличествоСубконто Цикл
				Если (Корреспонденция[ИмяСубконто+СчетчикСубконто] = СведенияОСчете["ВидСубконто"+СчетчикСчета+"ТипЗначения"].ПривестиЗначение(Корреспонденция[ИмяСубконто+СчетчикСубконто]))
					  и (СчетчикСчета <> СчетчикСубконто)  и (ЗначениеЗаполнено(Корреспонденция[ИмяСубконто+СчетчикСубконто])) Тогда
					Субконто = Корреспонденция[ИмяСубконто+СчетчикСчета];
					Корреспонденция[ИмяСубконто+СчетчикСчета] = Корреспонденция[ИмяСубконто+СчетчикСубконто];
					Корреспонденция[ИмяСубконто+СчетчикСубконто] = Субконто;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	
		Для СчетчикСубконто = 1 По 3 Цикл
			Если СведенияОСчете.КоличествоСубконто >= СчетчикСубконто Тогда
				Корреспонденция[ИмяСубконто+СчетчикСубконто] = СведенияОСчете["ВидСубконто"+СчетчикСубконто+"ТипЗначения"].ПривестиЗначение(Корреспонденция[ИмяСубконто+СчетчикСубконто]);
	
			Иначе
				Корреспонденция[ИмяСубконто+СчетчикСубконто] = Неопределено;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
//                          !!!ВНИМАНИЕ!!! 
//            ИЗМЕНЯТЬ КОД В ЭТОМ БЛОКЕ (НИЖЕ) ЗАПРЕЩЕНО!
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// ВЫЗОВ ОБЩИХ ПРОЦЕДУР И ФУНКЦИЙ


// Производит выгрузку объекта в соответствии с указанным правилом конвертации
//
// Параметры:
//  Источник				 - произвольный источник данных
//  Приемник				 - xml-узел объекта приемника
//  ВходящиеДанные			 - произвольные вспомогательные данные, передаваемые правилу
//                             для выполнения конвертации
//  ИсходящиеДанные			 - произвольные вспомогательные данные, передаваемые правилам
//                             конвертации свойств
//  ИмяПКО					 - имя правила конвертации, согласно которому осуществляется выгрузка
//  УзелСсылки				 - xml-узел ссылки объекта приемника
//  ТолькоПолучитьУзелСсылки - если Истина, то выгрузка объекта не производится, только формируется
//                             xml-узел ссылки
//  ПКО                      - ссылка на правило конвертации
//
// Возвращаемое значение:
//  xml-узел ссылки или значение приемника
//
Функция ВыгрузитьПоПравилу(Источник					= Неопределено,
						   Приемник					= Неопределено,
						   ВходящиеДанные			= Неопределено,
						   ИсходящиеДанные			= Неопределено,
						   ИмяПКО					= "") Экспорт
						   
	Возврат ОбщиеПроцедурыФункции.ВыгрузитьПоПравилу(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО);
	
КонецФункции

// Создает новый xml-узел
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
//
// Параметры: 
//  Имя            - Имя узла
//
// Возвращаемое значение:
//  Объект нового xml-узла
//
Функция СоздатьУзел(Имя) Экспорт

	Возврат ОбщиеПроцедурыФункции.СоздатьУзел(Имя); 

КонецФункции

// Добавляет новый xml-узел к указанному узлу-родителю
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Имя            - имя добавляемого узла
//
// Возвращаемое значение:
//  Новый xml-узел, добавленный к указанному узлу-родителю
//
Функция ДобавитьУзел(УзелРодитель, Имя) Экспорт

	Возврат ОбщиеПроцедурыФункции.ДобавитьУзел(УзелРодитель, Имя); 

КонецФункции

// Копирует указанный xml-узел
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры: 
//  Узел           - копируемый узел
//
// Возвращаемое значение:
//  Новый xml - копия указанного узла
//
Функция КопироватьУзел(Узел) Экспорт

	Возврат ОбщиеПроцедурыФункции.КопироватьУзел(Узел); 
	
КонецФункции 

// Устанавливает значение параметра "Загрузка" для свойства объекта "ОбменДанными".
//
// Параметры:
//  Объект   - объект, для которого устанавливается свойство
//  Значение - значение устанавливаемого свойства "Загрузка"
// 
Процедура УстановитьОбменДаннымиЗагрузка(Объект, Значение = Истина) Экспорт

	ОбщиеПроцедурыФункции.УстановитьОбменДаннымиЗагрузка(Объект, Значение);
	
КонецПроцедуры

// Устанавливает атрибут указанного xml-узла
//
// Параметры: 
//  Узел           - xml-узел
//  Имя            - имя атрибута
//  Значение       - устанавливаемое значение
//
Процедура УстановитьАтрибут(Узел, Имя, Значение) Экспорт
	
	ОбщиеПроцедурыФункции.УстановитьАтрибут(Узел, Имя, Значение);
	
КонецПроцедуры

// Подчиняет xml-узел указанному узлу-родителю
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Узел           - подчиняемый узел 
//
Процедура ДобавитьПодчиненный(УзелРодитель, Узел) Экспорт

	ОбщиеПроцедурыФункции.ДобавитьПодчиненный(УзелРодитель, Узел);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ОБЪЕКТОМ XMLЧтение

// Осуществляет запись элемента и его значения в указанный объект
//
// Параметры:
//  Объект         - объект типа XMLЗапись
//  Имя            - Строка. Имя элемента
//  Значение       - Значение элемента
// 
Процедура одЗаписатьЭлемент(Объект, Имя, Значение="") Экспорт

	ОбщиеПроцедурыФункции.одЗаписатьЭлемент(Объект, Имя, Значение);
	
КонецПроцедуры

// Читает значение атрибута по имени из указанного объекта, приводит значение
// к указанному примитивному типу
//
// Параметры:
//  Объект      - объект типа XMLЧтение, спозиционированный на начале элемента,
//                атрибут которого требуется получить
//  Тип         - Значение типа Тип. Тип атрибута
//  Имя         - Строка. Имя атрибута
//
// Возвращаемое значение:
//  Значение атрибута полученное по имени и приведенное к указанному типу
// 
Функция одАтрибут(Объект, Тип, Имя) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одАтрибут(Объект, Тип, Имя);
		
КонецФункции
 
// Пропускает узлы xml до конца указанного элемента (по умолчанию текущего)
//
// Параметры:
//  Объект   - объект типа XMLЧтение
//  Имя      - имя узла, до конца которого пропускаем элементы
// 
Процедура одПропустить(Объект, Имя = "") Экспорт
	
	ОбщиеПроцедурыФункции.одПропустить(Объект, Имя);
	
КонецПроцедуры

// Читает текст элемента и приводит значение к указанному типу
//
// Параметры:
//  Объект           - объект типа XMLЧтение, из которого осуществлется чтение
//  Тип              - тип получаемого значения
//  ИскатьПоСвойству - для ссылочных типов может быть указано свойство, по которому
//                     следует искать объект: "Код", "Наименование", <ИмяРеквизита>, "Имя" (предопределенного значения)
//
// Возвращаемое значение:
//  Значение xml-элемента, приведенное к соответствующему типу
//
Функция одЗначениеЭлемента(Объект, Тип, ИскатьПоСвойству = "", ОбрезатьСтрокуСправа = Истина) Экспорт

	Возврат ОбщиеПроцедурыФункции.одЗначениеЭлемента(Объект, Тип, ИскатьПоСвойству, ОбрезатьСтрокуСправа);

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ДАННЫМИ

// Возвращает строку - имя переданного значения перечисления.
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  Значение     - значение перечисления
//
// Возвращаемое значение:
//  Строка       - имя переданного значения перечисления.
//
Функция одИмяЗначенияПеречисления(Значение) Экспорт

    Возврат ОбщиеПроцедурыФункции.одИмяЗначенияПеречисления(Значение);
	
КонецФункции

// Определяет заполнено ли переданное значение
//
// Параметры: 
//  Значение       - значение, заполенение которого надо проверить
//
// Возвращаемое значение:
//  Истина         - значение не заполнено, ложь - иначе.
//
Функция одПустое(Значение, ЭтоNULL=Ложь) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одПустое(Значение, ЭтоNULL);
	
КонецФункции

// Возвращает объект ОписаниеТипов, содержащий указанный тип.
//
// Параметры:
//  ЗначениеТипа - строка с именем типа или значение типа Тип.
//  
// Возвращаемое значение:
//  ОписаниеТипов
//
Функция одОписаниеТипа(ЗначениеТипа) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одОписаниеТипа(ЗначениеТипа);

КонецФункции

// Возвращает пустое (дефолтное) значение указанного типа
//
// Параметры:
//  Тип          - строка с именем типа или значение типа Тип.
//
// Возвращаемое значение:
//  Пустое значение указанного типа.
// 
Функция одПолучитьПустоеЗначение(Тип) Экспорт

    Возврат ОбщиеПроцедурыФункции.одПолучитьПустоеЗначение(Тип);
	
КонецФункции

// Осуществляет простой поиск объекта информационной базы по указанному свойству.
//
// Параметры:
//  Менеджер       - менеджер искомого объекта;
//  Свойство       - свойство, по которому осуществляем поиск: Имя, Код, 
//                   Наименование или Имя индексируемого реквизита;
//  Значение       - значение свойства, по которому ищем объект.
//
// Возвращаемое значение:
//  Найденный объект информационной базы.
//
Функция одНайтиОбъектПоСвойству(Менеджер, Свойство, Значение, 
	                        НайденныйОбъектПоУникальномуИдентификатору = Неопределено, 
	                        ОбщаяСтруктураСвойств = Неопределено, ОбщиеСвойстваПоиска = Неопределено, 
	                        РежимПоискаОсновногоОбъекта = Истина, СтрокаЗапросаПоискаПоУникальномуИдентификатору = "") Экспорт

	Возврат ОбщиеПроцедурыФункции.одНайтиОбъектПоСвойству(Менеджер, Свойство, Значение, 
	                                               НайденныйОбъектПоУникальномуИдентификатору,	
	                                               ОбщаяСтруктураСвойств, ОбщиеСвойстваПоиска, 
	                                               РежимПоискаОсновногоОбъекта, СтрокаЗапросаПоискаПоУникальномуИдентификатору);
	
КонецФункции

// Осуществляет простой поиск объекта информационной базы по указанному свойству.
//
// Параметры:
//  Стр            - Строка - значение свойства, по которому осуществляется 
//                   поиск объект;
//  Тип            - тип искомого объекта;
//  Свойство       - Строка - имя свойства, по-которому ищем объект.
//
// Возвращаемое значение:
//  Найденный объект информационной базы
//
Функция одПолучитьЗначениеПоСтроке(Стр, Тип, Свойство = "") Экспорт

	Возврат ОбщиеПроцедурыФункции.одПолучитьЗначениеПоСтроке(Стр, Тип, Свойство);

КонецФункции

// Возвращает строковое представление типа значения 
//
// Параметры: 
//  ЗначениеИлиТип - произвольное значение или значение типа тип
//
// Возвращаемое значение:
//  Строка - строковое представление типа значения
//
Функция одТипЗначенияСтрокой(ЗначениеИлиТип) Экспорт

	Возврат ОбщиеПроцедурыФункции.одТипЗначенияСтрокой(ЗначениеИлиТип);
	
КонецФункции

// Возвращает XML представление объекта ОписаниеТипов
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  ОписаниеТипов  - объект ОписаниеТипов, XML представление которого требуется получить
//
// Возвращаемое значение:
//  Строка - XML представление переданного объекта ОписаниеТипов
//
Функция одПолучитьXMLПредставлениеОписанияТипов(ОписаниеТипов) Экспорт

	Возврат ОбщиеПроцедурыФункции.одПолучитьXMLПредставлениеОписанияТипов(ОписаниеТипов);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СТРОКАМИ

// Разбирает строку на две части: до подстроки разделителя и после.
//
// Параметры:
//  Стр          - разбираемая строка;
//  Разделитель  - подстрока-разделитель:
//  Режим        - 0 - разделитель в возвращаемые подстроки не включается;
//                 1 - разделитель включается в левую подстроку;
//                 2 - разделитель включается в правую подстроку.
//
// Возвращаемое значение:
//  Правая часть строки - до символа-разделителя.
// 
Функция ОтделитьРазделителем(Стр, Знач Разделитель, Режим=0) Экспорт

    Возврат ОбщиеПроцедурыФункции.ОтделитьРазделителем(Стр, Разделитель, Режим);
	
КонецФункции

// Преобразует значения из строки в массив, используя указанный разделитель
//
// Параметры:
//  Стр            - Разбираемая строка
//  Разделитель    - подстрока разделитель
//
// Возвращаемое значение:
//  Массив значений
// 
Функция МассивИзСтроки(Знач Стр, Разделитель=",") Экспорт

	Возврат ОбщиеПроцедурыФункции.МассивИзСтроки(Стр, Разделитель);

КонецФункции

Функция ПолучитьСтроковыйНомерБезПрефиксов(Номер) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.ПолучитьСтроковыйНомерБезПрефиксов(Номер);
	
КонецФункции

// Разбирает строку, выделяя из нее префикс и числовую часть.
//
// Параметры:
//  Стр            - Строка. Разбираемая строка;
//  ЧисловаяЧасть  - Число. Переменная, в которую возвратится числовая часть строки;
//  Режим          - Строка. Если "Число", то возвратит числовую часть, иначе - префикс.
//
// Возвращаемое значение:
//  Префикс строки
//
Функция ПолучитьПрефиксЧислоНомера(Знач Стр, ЧисловаяЧасть = "", Режим = "") Экспорт

	Возврат ОбщиеПроцедурыФункции.ПолучитьПрефиксЧислоНомера(Стр, ЧисловаяЧасть, Режим);

КонецФункции

// Приводит номер (код) к требуемой длине. При этом выделяется префикс
// и числовая часть номера, остальное пространство между префиксом и
// номером заполняется нулями.
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  Стр          - преобразовываемая строка;
//  Длина        - требуемая длина строки.
//
// Возвращаемое значение:
//  Строка       - код или номер, приведенная к требуемой длине.
// 
Функция ПривестиНомерКДлине(Знач Стр, Длина, ДобавлятьНулиЕслиДлинаНеМеньшеТекущейДлиныНомера = Истина, Префикс = "") Экспорт

	Возврат ОбщиеПроцедурыФункции.ПривестиНомерКДлине(Стр, Длина, ДобавлятьНулиЕслиДлинаНеМеньшеТекущейДлиныНомера, Префикс);

КонецФункции

// Добавляет к префиксу номера или кода подстроку
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  Стр          - Строка. Номер или код;
//  Добавок      - добаляемая к префиксу подстрока;
//  Длина        - требуемая результрирующая длина строки;
//  Режим        - "Слева" - подстрока добавляется слева к префиксу, иначе - справа.
//
// Возвращаемое значение:
//  Строка       - номер или код, к префиксу которого добавлена указанная подстрока.
//
Функция ДобавитьКПрефиксу(Знач Стр, Добавок = "", Длина = "", Режим = "Слева") Экспорт

	Возврат ОбщиеПроцедурыФункции.ДобавитьКПрефиксу(Стр, Добавок, Длина, Режим); 

КонецФункции

// Дополняет строку указанным символом до указанной длины.
//
// Параметры: 
//  Стр          - дополняемая строка;
//  Длина        - требуемая длина результирующей строки;
//  Чем          - символ, которым дополняется строка.
//
// Возвращаемое значение:
//  Строка, дополненная указанным символом до указанной длины.
//
Функция одДополнитьСтроку(Стр, Длина, Чем = " ") Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одДополнитьСтроку(Стр, Длина, Чем);

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФАЙЛОМ ОБМЕНА

// Сохраняет в файл указанный xml-узел
//
// Параметры:
//  Узел           - xml-узел, сохранямый в файл
//
Процедура ЗаписатьВФайл(Узел) Экспорт

	ОбщиеПроцедурыФункции.ЗаписатьВФайл(Узел);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПРАВИЛАМИ ОБМЕНА

// Осуществляет поиск правила конвертации по имени или в соответствии с типом
// переданного объекта
//
// Параметры:
//  Объект         - Объект-источник, для которого ищем правило конвертации
//  ИмяПравила     - имя правила конвертации
//
// Возвращаемое значение:
//  Ссылка на правило конвертации (строка в таблице правил)
// 
Функция НайтиПравило(Объект, ИмяПравила="") Экспорт

	Возврат ОбщиеПроцедурыФункции.НайтиПравило(Объект, ИмяПравила);

КонецФункции


////////////////////////////////////////////////////////////////////////////////
//

Процедура ПередатьИнформациюОЗаписиВПриемник(ИнформацияДляЗаписиВФайл, СтрокаОшибкиВБазеПриемнике = "") Экспорт
	
	ОбщиеПроцедурыФункции.ПередатьИнформациюОЗаписиВПриемник(ИнформацияДляЗаписиВФайл, СтрокаОшибкиВБазеПриемнике);
	
КонецПроцедуры

Процедура ПередатьОдинПараметрВПриемник(Имя, ИсходноеЗначениеПараметра, ПравилоКонвертации = "") Экспорт
	
	ОбщиеПроцедурыФункции.ПередатьОдинПараметрВПриемник(Имя, ИсходноеЗначениеПараметра, ПравилоКонвертации);
	
КонецПроцедуры

Процедура ПередатьДополнительныеПараметрыВПриемник() Экспорт
	
	ОбщиеПроцедурыФункции.ПередатьДополнительныеПараметрыВПриемник();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// КОНСТРУКТОР И ДЕСТРУКТОР ОБРАБОТКИ

Процедура Конструктор(Владелец) Экспорт

	ОбщиеПроцедурыФункции      = Владелец;
	Параметры                  = Владелец.Параметры;
	Запросы                    = Владелец.Запросы;
	Правила                    = Владелец.Правила;
	ТаблицаПравилВыгрузки      = Владелец.ТаблицаПравилВыгрузки;
	ТаблицаНастройкиПараметров = Владелец.ТаблицаНастройкиПараметров;
	
	КомментарийПриВыгрузкеДанных = Владелец.КомментарийПриВыгрузкеДанных;
	КомментарийПриЗагрузкеДанных = Владелец.КомментарийПриЗагрузкеДанных;
	
	
	//переменная для универсального обмена
	Попытка
		ДатаНачала = Владелец.ДатаНачала;
	Исключение
	КонецПопытки;
	
	//переменная для универсального обмена
	Попытка
		ДатаОкончания = Владелец.ДатаОкончания;
	Исключение
	КонецПопытки;
	
	//переменная для on-line обмена
	Попытка
		ДатаВыгрузкиДанных = Владелец.ДатаВыгрузкиДанных;
	Исключение
	КонецПопытки;
	
	//переменная для on-line обмена
	Попытка
		УзелДляОбмена = Владелец.УзелДляОбмена;
	Исключение
	КонецПопытки;
	
	// Типы
	одТипСтрока                = Тип("Строка");
	одТипБулево                = Тип("Булево");
	одТипЧисло                 = Тип("Число");
	одТипДата                  = Тип("Дата");
	одТипХранилищеЗначения     = Тип("ХранилищеЗначения");
	одТипДвоичныеДанные        = Тип("ДвоичныеДанные");
	одТипВидДвиженияНакопления = Тип("ВидДвиженияНакопления");
	одТипУдалениеОбъекта       = Тип("УдалениеОбъекта");
	одТипВидСчета			   = Тип("ВидСчета");
	одТипТип                   = Тип("Тип");
	одТипСоответствие          = Тип("Соответствие");
	
	ЗначениеПустаяДата		   = Дата('00010101');
	
	// Типы узлов xml
	одТипУзлаXML_КонецЭлемента  = ТипУзлаXML.КонецЭлемента;
	одТипУзлаXML_НачалоЭлемента = ТипУзлаXML.НачалоЭлемента;
	одТипУзлаXML_Текст          = ТипУзлаXML.Текст;
	
	Алгоритмы = Новый Структура;
	
	
	Алгоритмы.Вставить("ОбработкаСубконтоПослеЗагрузки", "Алгоритм_ОбработкаСубконтоПослеЗагрузки();");

КонецПроцедуры


Процедура Деструктор() Экспорт
	
	ОбщиеПроцедурыФункции = Неопределено;
	
КонецПроцедуры

#КонецЕсли