////////////////////////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура УстановитьОтбор(ЭлементыОтбора, ИмяПоля, Значение)
	КоличествоИзменено = 0;
	Для Каждого ЭлементОтбора из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля) Тогда
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = Значение;
				ЭлементОтбора.Использование = Истина;
				КоличествоИзменено = КоличествоИзменено + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если КоличествоИзменено = 0 Тогда
		ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Значение;
		ЭлементОтбора.Использование = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивКодовДокумента_НаСервере(Организация, ЖурналРабочегоСтола)
	Результат = Новый Массив;
	
	ТипыЭлектронныхДокументов = Новый СписокЗначений;
	Если ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы") Тогда
		ТипыЭлектронныхДокументов.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями"));
		ТипыЭлектронныхДокументов.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.СоглашениеОАнулированииДокумента"));
		ТипыЭлектронныхДокументов.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент"));
	ИначеЕсли ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС") Тогда
		ТипыЭлектронныхДокументов.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная"));
		ТипыЭлектронныхДокументов.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной"));
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	скEDI_ЭлектронныйДокумент.ИмяШаблона КАК ИмяШаблона
	               |ИЗ
	               |	Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
	               |ГДЕ
	               |	скEDI_ЭлектронныйДокумент.Организация = &Организация
	               |	И скEDI_ЭлектронныйДокумент.ВидЭлектронногоДокумента.ТипДокумента В(&ТипыЭлектронныхДокументов)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ИмяШаблона";
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТипыЭлектронныхДокументов", ТипыЭлектронныхДокументов);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		Результат.Добавить(ВыборкаРезультатаЗапроса.ИмяШаблона);
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Процедура УстановитьПараметрыСписков()
	Попытка
		СписокДокументов.Параметры.УстановитьЗначениеПараметра("ТекущаяДата"	, ТекущаяДата());
	Исключение
	КонецПопытки;
	СписокДокументов.Параметры.УстановитьЗначениеПараметра("Организация"	, Объект.Организация);
	СписокДокументов.Параметры.УстановитьЗначениеПараметра("ДатаНачала"		, ФильтрПериод.ДатаНачала);
	СписокДокументов.Параметры.УстановитьЗначениеПараметра("ДатаОкончания"	, ФильтрПериод.ДатаОкончания);
	//ОтображатьВсеВариантыДокументов
	РасчитатьИтогиПоСпискуНаСервере();
	
	УстановитьОтбор(СписокДопДокументыДФС.Отбор.Элементы, "Организация", Объект.Организация);
	
	Элементы.ОтборКод.СписокВыбора.ЗагрузитьЗначения(ПолучитьМассивКодовДокумента_НаСервере(Объект.Организация, ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы")));
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыСписковДокументыНДС()
	СписокДокументовДокументыНДС.Параметры.УстановитьЗначениеПараметра("ТекущаяДата"	, ТекущаяДата());
	СписокДокументовДокументыНДС.Параметры.УстановитьЗначениеПараметра("Организация"	, Объект.Организация);
	СписокДокументовДокументыНДС.Параметры.УстановитьЗначениеПараметра("ДатаНачала"		, ФильтрПериодДокументыНДС.ДатаНачала);
	СписокДокументовДокументыНДС.Параметры.УстановитьЗначениеПараметра("ДатаОкончания"	, ФильтрПериодДокументыНДС.ДатаОкончания);
	//ОтображатьВсеВариантыДокументов
	РасчитатьИтогиПоСпискуДокументыНДСНаСервере();
	
	УстановитьОтбор(СписокДопДокументыДФС.Отбор.Элементы, "Организация", Объект.Организация);
	
	Элементы.ОтборКодДокументыНДС.СписокВыбора.ЗагрузитьЗначения(ПолучитьМассивКодовДокумента_НаСервере(Объект.Организация, ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС")));
КонецПроцедуры

&НаСервере
Процедура СостояниеРасчетовСБюджетомСписокОбновитьАктуальностьНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	скEDI_ПоказателиПлательщикаНалоговАктуальность.ДатаУстановки
	               |ИЗ
	               |	РегистрСведений.скEDI_ПоказателиПлательщикаНалоговАктуальность КАК скEDI_ПоказателиПлательщикаНалоговАктуальность
	               |ГДЕ
	               |	скEDI_ПоказателиПлательщикаНалоговАктуальность.Организация = &Организация
	               |	И скEDI_ПоказателиПлательщикаНалоговАктуальность.Год = &Год";
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Год", СостояниеРасчетовСБюджетомГод);
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		СостояниеРасчетовСБюджетомДатаУктуальности = ВыборкаЗапроса.ДатаУстановки;
	Иначе
		СостояниеРасчетовСБюджетомДатаУктуальности = 0;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыСостояниеРасчетовСБюджетомСписокНаСервере()
	СостояниеРасчетовСБюджетомСписок.Параметры.УстановитьЗначениеПараметра("Организация", Объект.Организация);
	СостояниеРасчетовСБюджетомСписок.Параметры.УстановитьЗначениеПараметра("Год", СостояниеРасчетовСБюджетомГод);
	СостояниеРасчетовСБюджетомСписокОбновитьАктуальностьНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьФлагОбменНалоговымиДокументамиСГФС(пОрганизация)
	Возврат пОрганизация.ОбменНалоговымиДокументамиСГФС;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНаличиеВидаЭлектронногоДокументаДокументСВложениями(пОрганизация)
	Возврат скEDI_ОбщегоНазначения.ПолучитьНаличиеВидаЭлектронногоДокументаДокументСВложениями(пОрганизация);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНаличиеВидаЭлектронногоСоглашениеОАнулированииДокумента(пОрганизация)
	Возврат скEDI_ОбщегоНазначения.ПолучитьНаличиеВидаЭлектронногоСоглашениеОАнулированииДокумента(пОрганизация);
КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоЭлектронномуДокументуДляОтображения(ЭлектронныйДокумент, знач ОсновнойЭлектронныйДокумент, пЗаголовокЗакладкиВариантыДокументов, пМассивСобытийПоЭлектронномуДокументу, пЗаголовокЗакладкиСвязанныеДокументы, пМассивСвязанныхЭлектронныхДокументов)
	пТаблица = скEDI_ОбщегоНазначения.ПолучитьТаблицуСобытийПоЭлектронномуДокументу(ЭлектронныйДокумент);
	пМассивСобытийПоЭлектронномуДокументу = Новый Массив;
	Для Каждого СтрокаТаблицы Из пТаблица Цикл
		ЭлементМассива = Новый Структура;
		Для Каждого Колонка из пТаблица.Колонки Цикл
			ЭлементМассива.Вставить(Колонка.Имя, СтрокаТаблицы[Колонка.Имя]);
		КонецЦикла;
		пМассивСобытийПоЭлектронномуДокументу.Добавить(ЭлементМассива);
	КонецЦикла;
	
	Если ОсновнойЭлектронныйДокумент = ПредопределенноеЗначение("Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка") Тогда
		ОсновнойЭлектронныйДокумент = ЭлектронныйДокумент;
	КонецЕсли;
	
	КоличествоВариантовДокументов = 0;
	Если ЭлектронныйДокумент <> ПредопределенноеЗначение("Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	КОЛИЧЕСТВО(*) КАК Количество
		               |ИЗ
		               |	Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
		               |ГДЕ
		               |	скEDI_ЭлектронныйДокумент.ОсновнойЭлектронныйДокумент = &ОсновнойЭлектронныйДокумент
		               |	И скEDI_ЭлектронныйДокумент.Ссылка <> &ТекЭлектронныйДокумент";
		Запрос.УстановитьПараметр("ТекЭлектронныйДокумент", ЭлектронныйДокумент);
		Запрос.УстановитьПараметр("ОсновнойЭлектронныйДокумент", ОсновнойЭлектронныйДокумент);
		ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		Если ВыборкаРезультатаЗапроса.Следующий() Тогда
			КоличествоВариантовДокументов = КоличествоВариантовДокументов + ВыборкаРезультатаЗапроса.Количество;
		КонецЕсли;
		
		Если ОсновнойЭлектронныйДокумент <> ЭлектронныйДокумент Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	КОЛИЧЕСТВО(*) КАК Количество
			               |ИЗ
			               |	Документ.скEDI_ЭлектронныйДокумент КАК скEDI_ЭлектронныйДокумент
			               |ГДЕ
			               |	скEDI_ЭлектронныйДокумент.Ссылка = &ОсновнойЭлектронныйДокумент
			               |	И скEDI_ЭлектронныйДокумент.Ссылка <> &ТекЭлектронныйДокумент";
			Запрос.УстановитьПараметр("ТекЭлектронныйДокумент", ЭлектронныйДокумент);
			Запрос.УстановитьПараметр("ОсновнойЭлектронныйДокумент", ОсновнойЭлектронныйДокумент);
			ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
			Если ВыборкаРезультатаЗапроса.Следующий() Тогда
				КоличествоВариантовДокументов = КоличествоВариантовДокументов + ВыборкаРезультатаЗапроса.Количество;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	пЗаголовокЗакладкиВариантыДокументов = Строка(КоличествоВариантовДокументов);
	
	
	// Обновление списка связаных документов
	КоличествоСвязанныхЭлектронныхДокументов = 0;
	пМассивСвязанныхЭлектронныхДокументов = Новый Массив;
	Если ЗначениеЗаполнено(ЭлектронныйДокумент) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	скEDI_СвязиЭлектронныхДокументов.ЭлектронныйДокумент1 КАК ЭлектронныйДокумент,
		               |	скEDI_СвязиЭлектронныхДокументов.ТипСвязи КАК ТипСвязи,
		               |	1 КАК УсловиеПоДокументу
		               |ИЗ
		               |	РегистрСведений.скEDI_СвязиЭлектронныхДокументов КАК скEDI_СвязиЭлектронныхДокументов
		               |ГДЕ
		               |	скEDI_СвязиЭлектронныхДокументов.ЭлектронныйДокумент2 = &ЭлектронныйДокумент
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	скEDI_СвязиЭлектронныхДокументов.ЭлектронныйДокумент2,
		               |	скEDI_СвязиЭлектронныхДокументов.ТипСвязи,
		               |	2
		               |ИЗ
		               |	РегистрСведений.скEDI_СвязиЭлектронныхДокументов КАК скEDI_СвязиЭлектронныхДокументов
		               |ГДЕ
		               |	скEDI_СвязиЭлектронныхДокументов.ЭлектронныйДокумент1 = &ЭлектронныйДокумент";
		Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
		
		ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
		Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
			пМассивСвязанныхЭлектронныхДокументов.Добавить(ВыборкаРезультатаЗапроса.ЭлектронныйДокумент);
			КоличествоСвязанныхЭлектронныхДокументов = КоличествоСвязанныхЭлектронныхДокументов + 1;
		КонецЦикла;
	КонецЕсли;
	пЗаголовокЗакладкиСвязанныеДокументы = Строка(КоличествоСвязанныхЭлектронныхДокументов);
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ИнициализироватьПодписьИОтправкуЭлектронныхДокументов(ЖурналРабочегоСтола, Отправлять, ФормироватьНовыйВариантДокументов = Ложь, ОтправлятьТолькоСсылку = Ложь, ОтправлятьНаДоподписание = Ложь, ПовторноеУтверждение = Ложь)
	ЭлементыСписокДокументов = Неопределено;
	Если ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументов;
	ИначеЕсли ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументовДокументыНДС;
	Иначе
		Возврат;
	КонецЕсли;
	
	лМассивДанныхДокументов = Новый Массив;
	Для Каждого лВыделенаяСтрока Из ЭлементыСписокДокументов.ВыделенныеСтроки Цикл
		лДанныеВыделенойСтроки = ЭлементыСписокДокументов.ДанныеСтроки(лВыделенаяСтрока);
		лСтруктураДанныхДокумента = скEDI_ОбщегоНазначенияКлиент.ПолучитьСтруктуруДанныхПоЭлектронномуДокументу();
		ЗаполнитьЗначенияСвойств(лСтруктураДанныхДокумента, лДанныеВыделенойСтроки);
		//лСтруктураДанныхДокумента.Вставить("ПараметрыСозданияДокументов"    , Новый Структура);
		//лСтруктураДанныхДокумента.Вставить("СоответствиеЗначенийРеквизитов" , Новый Соответствие);
		//лСтруктураДанныхДокумента.Вставить("ЕстьОшибки"                     , Ложь);
		лМассивДанныхДокументов.Добавить(лСтруктураДанныхДокумента);
	КонецЦикла;
	МассивДанныхПоДокументам = Новый ФиксированныйМассив(лМассивДанныхДокументов);
	ВерсияМассиваДанныхПоДокументам = Новый УникальныйИдентификатор;
	
	ВыполняемыеОперации = Новый Массив;
	Если ОтправлятьНаДоподписание Тогда
		ВыполняемыеОперации.Добавить("ОтправитьНаДоподписание");
	Иначе
		Если БесплатнаяОтправка50 Тогда
			Отправлять = Истина;
			ВыполняемыеОперации.Добавить("Free");
		КонецЕсли;
		Если ФормироватьНовыйВариантДокументов Тогда  
			ВыполняемыеОперации.Добавить("СформироватьНовыйВариантЭлектронногоДокумента");
		КонецЕсли;
		Если ПовторноеУтверждение Тогда  
			ВыполняемыеОперации.Добавить("ПовторноеУтверждение");
		КонецЕсли;
		ВыполняемыеОперации.Добавить("Подпись");
		
		Если Отправлять Тогда  
			ВыполняемыеОперации.Добавить("Отправка");
			Если ОтправлятьТолькоСсылку Тогда
				ВыполняемыеОперации.Добавить("OnlyHref");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОшибкаПолученияПодписей = "";
	Подписанты = скEDI_ОбщегоНазначения.ПолучитьПодписантов(ВыполняемыеОперации, Объект.Организация, МассивДанныхПоДокументам, ОшибкаПолученияПодписей);
	Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
		Сообщить(ОшибкаПолученияПодписей);
		Возврат;
	КонецЕсли;
	
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Новый Структура("ВерсияМассиваДанныхПоДокументам,ВыполняемыеОперации,Организация,Подписанты", ВерсияМассиваДанныхПоДокументам, ВыполняемыеОперации, Объект.Организация, Подписанты);
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов.Вставить("ЖурналРабочегоСтола", ЖурналРабочегоСтола);
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
		лФормаНастройкиПараметровПодписиДокументов = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастройкиПодписейЭлектронныхДокументов", лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма);
		ВыполнитьОперацииСЭлектроннымиДокументами(лФормаНастройкиПараметровПодписиДокументов.ОткрытьМодально());
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастройкиПараметровПодписиДокументов(лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма, "ВыполнитьОперацииСЭлектроннымиДокументами");
	КонецЕсли;
КонецПроцедуры // ИнициализироватьПодписьЭлектронногоДокумента()

&НаКлиенте
Процедура ИнициализироватьФормированиеНовогоВариантаЭлектронныхДокументов(ЖурналРабочегоСтола)
	ЭлементыСписокДокументов = Неопределено;
	Если ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументов;
	ИначеЕсли ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументовДокументыНДС;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаголовокДокумента = "";
	КоличествоДокументов = 0;
	
	лМассивДанныхДокументов = Новый Массив;
	Для Каждого лВыделенаяСтрока Из ЭлементыСписокДокументов.ВыделенныеСтроки Цикл
		лДанныеВыделенойСтроки = ЭлементыСписокДокументов.ДанныеСтроки(лВыделенаяСтрока);
		лСтруктураДанныхДокумента = скEDI_ОбщегоНазначенияКлиент.ПолучитьСтруктуруДанныхПоЭлектронномуДокументу();
		ЗаполнитьЗначенияСвойств(лСтруктураДанныхДокумента, лДанныеВыделенойСтроки);
		//лСтруктураДанныхДокумента.Вставить("ПараметрыСозданияДокументов"    , Новый Структура);
		//лСтруктураДанныхДокумента.Вставить("СоответствиеЗначенийРеквизитов" , Новый Соответствие);
		//лСтруктураДанныхДокумента.Вставить("ЕстьОшибки"                     , Ложь);
		лМассивДанныхДокументов.Добавить(лСтруктураДанныхДокумента);
		
		ЗаголовокДокумента = Строка(лДанныеВыделенойСтроки.ВидЭлектронногоДокумента)
		+ " №" + лДанныеВыделенойСтроки.ЭлектронныйДокументНомерДокумента
		+ " " + НСтр("ru = 'от'; uk = 'від'") + " " + Формат(лДанныеВыделенойСтроки.Дата, "ДФ=dd.MM.yyyy");
		КоличествоДокументов = КоличествоДокументов + 1;
	КонецЦикла;
	
	Если КоличествоДокументов = 1 Тогда
		ТекстВопроса = НСтр("ru = 'Сформировать новый вариант Электронного документа'; uk = 'Сформувати новий варіант Електронного документа'")
		+ " """ + ЗаголовокДокумента + """?";
	ИначеЕсли КоличествоДокументов > 1 Тогда
		ТекстВопроса = НСтр("ru = 'Сформировать новый вариант для'; uk = 'Сформувати новий варіант для'")
		+ " "
		+ Строка(КоличествоДокументов)
		+ " "
		+ НСтр("ru = 'электронных докуме1нтов'; uk = 'електронних документів'")
		+ "?";
	Иначе
		Возврат;
	КонецЕсли;
	
	МассивДанныхПоДокументам = Новый ФиксированныйМассив(лМассивДанныхДокументов);
	ВерсияМассиваДанныхПоДокументам = Новый УникальныйИдентификатор;
	
	ВыполняемыеОперации = Новый Массив;
	ВыполняемыеОперации.Добавить("СформироватьНовыйВариантИСохранитьЭлектронногоДокумента");
	
	//ОшибкаПолученияПодписей = "";
	//Подписанты = скEDI_ОбщегоНазначения.ПолучитьПодписантов(ВыполняемыеОперации, Объект.Организация, МассивДанныхПоДокументам, ОшибкаПолученияПодписей);
	//Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
	//	Сообщить(ОшибкаПолученияПодписей);
	//	Возврат;
	//КонецЕсли;
	//
	лПараметрыФормированияНовогоВариантаЭлектронныхДокументов = Новый Структура("ВерсияМассиваДанныхПоДокументам,ВыполняемыеОперации,Организация,Подписанты", ВерсияМассиваДанныхПоДокументам, ВыполняемыеОперации, Объект.Организация, Неопределено);
	лПараметрыФормированияНовогоВариантаЭлектронныхДокументов.Вставить("ЖурналРабочегоСтола", ЖурналРабочегоСтола);
	лПараметрыФормированияНовогоВариантаЭлектронныхДокументов.Вставить("ТаблицаНеобходимыхПодписей", Неопределено);
	лПараметрыФормированияНовогоВариантаЭлектронныхДокументов.Вставить("ТаблицаНеобходимыхПодписейШифрования", Неопределено);
	
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
		//лФормаНастройкиПараметровПодписиДокументов = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастройкиПодписейЭлектронныхДокументов", лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма);
		//ВыполнитьОперацииСЭлектроннымиДокументами(лФормаНастройкиПараметровПодписиДокументов.ОткрытьМодально());
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ПоказатьВопросБезМодальности("ВыполнитьОперацииСЭлектроннымиДокументами", ЭтаФорма, лПараметрыФормированияНовогоВариантаЭлектронныхДокументов, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		//скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастройкиПараметровПодписиДокументов(лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма, "ВыполнитьОперацииСЭлектроннымиДокументами");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьУстановкуОсновногоВариантаЭлектронныхДокументов(ЖурналРабочегоСтола)
	ЭлементыСписокДокументов = Неопределено;
	Если ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументов;
	ИначеЕсли ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументовДокументыНДС;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаголовокДокумента = "";
	КоличествоДокументов = 0;
	
	лМассивДанныхДокументов = Новый Массив;
	Для Каждого лВыделенаяСтрока Из ЭлементыСписокДокументов.ВыделенныеСтроки Цикл
		лДанныеВыделенойСтроки = ЭлементыСписокДокументов.ДанныеСтроки(лВыделенаяСтрока);
		лСтруктураДанныхДокумента = скEDI_ОбщегоНазначенияКлиент.ПолучитьСтруктуруДанныхПоЭлектронномуДокументу();
		ЗаполнитьЗначенияСвойств(лСтруктураДанныхДокумента, лДанныеВыделенойСтроки);
		//лСтруктураДанныхДокумента.Вставить("ПараметрыСозданияДокументов"    , Новый Структура);
		//лСтруктураДанныхДокумента.Вставить("СоответствиеЗначенийРеквизитов" , Новый Соответствие);
		//лСтруктураДанныхДокумента.Вставить("ЕстьОшибки"                     , Ложь);
		лМассивДанныхДокументов.Добавить(лСтруктураДанныхДокумента);
		
		ЗаголовокДокумента = Строка(лДанныеВыделенойСтроки.ВидЭлектронногоДокумента)
		+ " №" + лДанныеВыделенойСтроки.ЭлектронныйДокументНомерДокумента
		+ " " + НСтр("ru = 'от'; uk = 'від'") + " " + Формат(лДанныеВыделенойСтроки.Дата, "ДФ=dd.MM.yyyy");
		КоличествоДокументов = КоличествоДокументов + 1;
	КонецЦикла;
	
	Если КоличествоДокументов = 1 Тогда
		ТекстВопроса = НСтр("ru = 'Использовать'; uk = 'Використовувати'")
		+ " """ + ЗаголовокДокумента + """ "
		+ НСтр("ru = 'как основной вариант'; uk = 'як основний варіант'") + "?";
	ИначеЕсли КоличествоДокументов > 1 Тогда
		ТекстВопроса = НСтр("ru = 'Использовать данные электронные документы как основной вариант для'; uk = 'Використовувати дані електронні документи як основний варіант для'")
		+ " "
		+ Строка(КоличествоДокументов)
		+ " "
		+ НСтр("ru = 'электронных документов'; uk = 'електронних документів'")
		+ "?";
	Иначе
		Возврат;
	КонецЕсли;
	
	МассивДанныхПоДокументам = Новый ФиксированныйМассив(лМассивДанныхДокументов);
	ВерсияМассиваДанныхПоДокументам = Новый УникальныйИдентификатор;
	
	ВыполняемыеОперации = Новый Массив;
	ВыполняемыеОперации.Добавить("УстановитьОсновнойВариантЭлектронногоДокумента");
	
	//ОшибкаПолученияПодписей = "";
	//Подписанты = скEDI_ОбщегоНазначения.ПолучитьПодписантов(ВыполняемыеОперации, Объект.Организация, МассивДанныхПоДокументам, ОшибкаПолученияПодписей);
	//Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
	//	Сообщить(ОшибкаПолученияПодписей);
	//	Возврат;
	//КонецЕсли;
	//
	лПараметрыФормированияНовогоВариантаЭлектронныхДокументов = Новый Структура("ВерсияМассиваДанныхПоДокументам,ВыполняемыеОперации,Организация,Подписанты", ВерсияМассиваДанныхПоДокументам, ВыполняемыеОперации, Объект.Организация, Неопределено);
	лПараметрыФормированияНовогоВариантаЭлектронныхДокументов.Вставить("ЖурналРабочегоСтола", ЖурналРабочегоСтола);
	лПараметрыФормированияНовогоВариантаЭлектронныхДокументов.Вставить("ТаблицаНеобходимыхПодписей", Неопределено);
	лПараметрыФормированияНовогоВариантаЭлектронныхДокументов.Вставить("ТаблицаНеобходимыхПодписейШифрования", Неопределено);
	
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
		//лФормаНастройкиПараметровПодписиДокументов = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастройкиПодписейЭлектронныхДокументов", лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма);
		//ВыполнитьОперацииСЭлектроннымиДокументами(лФормаНастройкиПараметровПодписиДокументов.ОткрытьМодально());
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ПоказатьВопросБезМодальности("ВыполнитьОперацииСЭлектроннымиДокументами", ЭтаФорма, лПараметрыФормированияНовогоВариантаЭлектронныхДокументов, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		//скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастройкиПараметровПодписиДокументов(лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма, "ВыполнитьОперацииСЭлектроннымиДокументами");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьСнятиеПодписейПоЭлектроннымДокументам(ЖурналРабочегоСтола)
	ЭлементыСписокДокументов = Неопределено;
	Если ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументов;
	ИначеЕсли ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументовДокументыНДС;
	Иначе
		Возврат;
	КонецЕсли;
	
	лМассивДанныхДокументов = Новый Массив;
	Для Каждого лВыделенаяСтрока Из ЭлементыСписокДокументов.ВыделенныеСтроки Цикл
		лДанныеВыделенойСтроки = ЭлементыСписокДокументов.ДанныеСтроки(лВыделенаяСтрока);
		лСтруктураДанныхДокумента = скEDI_ОбщегоНазначенияКлиент.ПолучитьСтруктуруДанныхПоЭлектронномуДокументу();
		ЗаполнитьЗначенияСвойств(лСтруктураДанныхДокумента, лДанныеВыделенойСтроки);
		//лСтруктураДанныхДокумента.Вставить("ПараметрыСозданияДокументов"    , Новый Структура);
		//лСтруктураДанныхДокумента.Вставить("СоответствиеЗначенийРеквизитов" , Новый Соответствие);
		//лСтруктураДанныхДокумента.Вставить("ЕстьОшибки"                     , Ложь);
		лМассивДанныхДокументов.Добавить(лСтруктураДанныхДокумента);
	КонецЦикла;
	МассивДанныхПоДокументам = Новый ФиксированныйМассив(лМассивДанныхДокументов);
	ВерсияМассиваДанныхПоДокументам = Новый УникальныйИдентификатор;
	
	ВыполняемыеОперации = Новый Массив;
	ВыполняемыеОперации.Добавить("СнятьПодписи");
	
	лПараметрыФормыНастройкиСнятияПодписейЭлектронныхДокументов = Новый Структура("ВерсияМассиваДанныхПоДокументам,ВыполняемыеОперации,Организация,ТаблицаНеобходимыхПодписей,ТаблицаНеобходимыхПодписейШифрования", ВерсияМассиваДанныхПоДокументам, ВыполняемыеОперации, Объект.Организация, Новый Массив, Новый Массив);
	лПараметрыФормыНастройкиСнятияПодписейЭлектронныхДокументов.Вставить("ЖурналРабочегоСтола", ЖурналРабочегоСтола);
	ВыполнитьОперацииСЭлектроннымиДокументами(лПараметрыФормыНастройкиСнятияПодписейЭлектронныхДокументов);
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьОперацииСЭлектроннымиДокументами(ПараметрыОпераций, ДополнительныеПараметрыОпераций = Неопределено) Экспорт
	Если ТипЗнч(ПараметрыОпераций) = Тип("КодВозвратаДиалога") Тогда
		Если ПараметрыОпераций = КодВозвратаДиалога.Да Тогда
			ПараметрыОпераций = ДополнительныеПараметрыОпераций;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыОпераций) = Тип("Структура") Тогда
		Если ПараметрыОпераций.ВерсияМассиваДанныхПоДокументам = ВерсияМассиваДанныхПоДокументам Тогда
			СтруктураДополнительныхПараметров = Новый Структура;
			СтруктураДополнительныхПараметров.Вставить("ВыполняемыеОперации"              , ПараметрыОпераций.ВыполняемыеОперации);
			СтруктураДополнительныхПараметров.Вставить("НастройкиНеобходимыхПодписей"     , ПараметрыОпераций.ТаблицаНеобходимыхПодписей);
			СтруктураДополнительныхПараметров.Вставить("НастройкиПодписейШифрования"      , ПараметрыОпераций.ТаблицаНеобходимыхПодписейШифрования);
			СтруктураДополнительныхПараметров.Вставить("ЖурналРабочегоСтола"              , ПараметрыОпераций.ЖурналРабочегоСтола);
			СтруктураДополнительныхПараметров.Вставить("КоличествоЭлементовВОднойТаблице" , 1000); //ДОРАБОТАТЬ
			СтруктураДополнительныхПараметров.Вставить("ЖурналОперации" , "");
			
			Если ПараметрыОпераций.ВыполняемыеОперации.Найти("Отклонение") <> Неопределено Тогда 
				
				лТекстКвитанции = "";
				
				Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
					
					Если ВвестиСтроку(лТекстКвитанции, НСтр("ru = 'Отклонить по причине:'; uk = 'Відхилити по причині:'"), , Истина) Тогда							
						ПродолжитьВыполнениеОперацийСЭлектроннымиДокументами(лТекстКвитанции, СтруктураДополнительныхПараметров);
					КонецЕсли;
					
				Иначе
					
					скEDI_ОткрытиеФормБезМодальности.скEDI_ПоказатьВводСтроки("ПродолжитьВыполнениеОперацийСЭлектроннымиДокументами"
					, лТекстКвитанции
					, НСтр("ru = 'Отклонить по причине:'; uk = 'Відхилити по причині:'")
					, ЭтаФорма
					, СтруктураДополнительныхПараметров);
				КонецЕсли;
				
			ИначеЕсли ПараметрыОпераций.ВыполняемыеОперации.Найти("Отзыв") <> Неопределено Тогда 
				лТекстКвитанции = "";
				
				Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
					
					Если ВвестиСтроку(лТекстКвитанции, НСтр("ru = 'Заблокировать по причине:'; uk = 'Заблокувати по причині:'"), , Истина) Тогда							
						ПродолжитьВыполнениеОперацийСЭлектроннымиДокументами(лТекстКвитанции, СтруктураДополнительныхПараметров);
					КонецЕсли;
					
				Иначе
					
					скEDI_ОткрытиеФормБезМодальности.скEDI_ПоказатьВводСтроки("ПродолжитьВыполнениеОперацийСЭлектроннымиДокументами"
					, лТекстКвитанции
					, НСтр("ru = 'Заблокировать по причине:'; uk = 'Заблокувати по причині:'")
					, ЭтаФорма
					, СтруктураДополнительныхПараметров);
				КонецЕсли;
				
			Иначе	
				ПродолжитьВыполнениеОперацийСЭлектроннымиДокументами("",СтруктураДополнительныхПараметров);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыполнениеОперацийСЭлектроннымиДокументами(ПараметрыОпераций = Неопределено, ДополнительныеПараметрыОпераций = Неопределено) Экспорт
	// Проверка указания причины отклонения.
	Если (ДополнительныеПараметрыОпераций.ВыполняемыеОперации.Найти("Отклонение") <> Неопределено
		ИЛИ ДополнительныеПараметрыОпераций.ВыполняемыеОперации.Найти("Отзыв") <> Неопределено)
		И ПараметрыОпераций = Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли (ДополнительныеПараметрыОпераций.ВыполняемыеОперации.Найти("Отклонение") <> Неопределено
		ИЛИ ДополнительныеПараметрыОпераций.ВыполняемыеОперации.Найти("Отзыв") <> Неопределено) Тогда 		
		ДополнительныеПараметрыОпераций.Вставить("ТекстКвитанции" , ПараметрыОпераций);	
	КонецЕсли;	
	
	Если (ДополнительныеПараметрыОпераций.ВыполняемыеОперации.Найти("Подпись") <> Неопределено
		ИЛИ ДополнительныеПараметрыОпераций.ВыполняемыеОперации.Найти("Отзыв") <> Неопределено) Тогда 		
		ДополнительныеПараметрыОпераций.Вставить("ТекстКвитанции" , ПараметрыОпераций);	
	КонецЕсли;	
	
	//2018-09-27
	РезультатыФункцииПечатьДокумента = Неопределено;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если ДополнительныеПараметрыОпераций.ВыполняемыеОперации.Найти("Подпись") <> Неопределено 
			ИЛИ ДополнительныеПараметрыОпераций.ВыполняемыеОперации.Найти("Отправка") <> Неопределено
			ИЛИ ДополнительныеПараметрыОпераций.ВыполняемыеОперации.Найти("ОтправкаВДФС") <> Неопределено
			ИЛИ ДополнительныеПараметрыОпераций.ВыполняемыеОперации.Найти("Проверка") <> Неопределено Тогда 
			
			РезультатыФункцииПечатьДокумента = скEDI_НастройкиПодКонфигурациюКлиент.ПолучитьРезультатыФункцииПечатьДокумента(МассивДанныхПоДокументам);
		КонецЕсли;	
	#КонецЕсли
	Если РезультатыФункцииПечатьДокумента = Неопределено Тогда
	Иначе
		ФиксированноеСоответствиеДокументов = Новый ФиксированноеСоответствие(РезультатыФункцииПечатьДокумента);
		ДополнительныеПараметрыОпераций.Вставить("РезультатыФункцииПечатьДокумента", ФиксированноеСоответствиеДокументов);
	КонецЕсли;
	//...2018-09-27
	
	КлючОбработанойЗаписи = Неопределено;
	РезультатКоличество = Неопределено;
	МассивСообщенийПоДокументам = Неопределено;
	ЖурналРабочегоСтолаОбработанойЗаписи = Неопределено;
	ДополнительныеПараметрыОпераций.Свойство("ЖурналРабочегоСтола", ЖурналРабочегоСтолаОбработанойЗаписи);
	Результат = скEDI_ОбщегоНазначения.ОбработкаДокументовВызовСервера(МассивДанныхПоДокументам, ДополнительныеПараметрыОпераций, КлючОбработанойЗаписи, РезультатКоличество, МассивСообщенийПоДокументам);
	
	ТаблицаСообщенияПоДокументам = Неопределено;
	ГруппаСообщения = Неопределено;
	Если ЖурналРабочегоСтолаОбработанойЗаписи = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы") Тогда
		ТаблицаСообщенияПоДокументам = СообщенияПоДокументам;
		ГруппаСообщения = Элементы.ГруппаСообщения;
	ИначеЕсли ЖурналРабочегоСтолаОбработанойЗаписи = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС") Тогда
		ТаблицаСообщенияПоДокументам = СообщенияПоДокументамДокументыНДС;
		ГруппаСообщения = Элементы.ГруппаСообщенияДокументыНДС;
	КонецЕсли;
	ЕстьСообщения = Ложь;
	
	Если ТаблицаСообщенияПоДокументам <> Неопределено Тогда
		ТаблицаСообщенияПоДокументам.Очистить();
		Для Каждого СообщениеПоДокументам из МассивСообщенийПоДокументам Цикл
			НоваяСтрокаСообщенияПоДокументам = ТаблицаСообщенияПоДокументам.Добавить();
			НоваяСтрокаСообщенияПоДокументам.Ошибка = СообщениеПоДокументам.Ошибка;
			НоваяСтрокаСообщенияПоДокументам.Описание = СообщениеПоДокументам.Описание;
			НоваяСтрокаСообщенияПоДокументам.Организация = СообщениеПоДокументам.Организация;
			НоваяСтрокаСообщенияПоДокументам.ЭлектронныйДокумент = СообщениеПоДокументам.ЭлектронныйДокумент;
			НоваяСтрокаСообщенияПоДокументам.Документ1С = СообщениеПоДокументам.Документ1С;
			НоваяСтрокаСообщенияПоДокументам.ВидЭлектронногоДокумента = СообщениеПоДокументам.ВидЭлектронногоДокумента;
			
			Если НоваяСтрокаСообщенияПоДокументам.Ошибка Тогда
				НоваяСтрокаСообщенияПоДокументам.Картинка = 1;
			Иначе
				НоваяСтрокаСообщенияПоДокументам.Картинка = 0;
			КонецЕсли;
			ЕстьСообщения = Истина;
		КонецЦикла;
		ГруппаСообщения.Видимость = ЕстьСообщения;
	КонецЕсли;
	
	Если ДополнительныеПараметрыОпераций.ВыполняемыеОперации.Найти("ПоказатьРезультатПроверки") <> Неопределено Тогда
		ТекстСообщенияОРезультатахПроверки = НСтр("ru = 'Проверено документов'; uk = 'Перевірено документів'") + ": " + Строка(РезультатКоличество.Проверено);
		Если (РезультатКоличество.ПровереноЕстьЗамечания = 0) и (РезультатКоличество.ПровереноЕстьОшибки = 0) Тогда
			ТекстСообщенияОРезультатахПроверки = ТекстСообщенияОРезультатахПроверки + Символы.ПС + НСтр("ru = 'Ошибор/замечаний нет'; uk = 'Помилок/зауважень немає'");
		Иначе
			Если РезультатКоличество.ПровереноЗамечанийНет > 0 Тогда
				ТекстСообщенияОРезультатахПроверки = ТекстСообщенияОРезультатахПроверки
				+ Символы.ПС
				+ НСтр("ru = 'Ошибок/замечаний нет'; uk = 'Помилок/зауважень немає'") + ": "
				+ Строка(РезультатКоличество.ПровереноЗамечанийНет);
			КонецЕсли;
			Если РезультатКоличество.ПровереноЕстьЗамечания > 0 Тогда
				ТекстСообщенияОРезультатахПроверки = ТекстСообщенияОРезультатахПроверки
				+ Символы.ПС
				+ НСтр("ru = 'Есть замечания'; uk = 'Є зауваження'") + ": "
				+ Строка(РезультатКоличество.ПровереноЕстьЗамечания);
			КонецЕсли;
			Если РезультатКоличество.ПровереноЕстьОшибки > 0 Тогда
				ТекстСообщенияОРезультатахПроверки = ТекстСообщенияОРезультатахПроверки
				+ Символы.ПС
				+ НСтр("ru = 'Есть ошибки'; uk = 'Є помилки'") + ": "
				+ Строка(РезультатКоличество.ПровереноЕстьОшибки);
			КонецЕсли;
		КонецЕсли;
		Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
			Предупреждение(ТекстСообщенияОРезультатахПроверки, 30, НСтр("ru = 'Результат проверки'; uk = 'Результат перевірки'"));
		Иначе
			скEDI_ОткрытиеФормБезМодальности.ПоказатьПредупреждение_83(ТекстСообщенияОРезультатахПроверки, 30, НСтр("ru = 'Результат проверки'; uk = 'Результат перевірки'"));
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Результат) Тогда 
		скEDI_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат);	
	КонецЕсли;
	
	Если ЖурналРабочегоСтолаОбработанойЗаписи = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы") Тогда
		ОбновитьПослеВыполненияДействийСЭлектроннымиДокументамиЖурналПервичныеДокументы(КлючОбработанойЗаписи);
	ИначеЕсли ЖурналРабочегоСтолаОбработанойЗаписи = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС") Тогда
		ОбновитьПослеВыполненияДействийСЭлектроннымиДокументамиЖурналДокументыНДС(КлючОбработанойЗаписи);
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьПослеВыполненияДействийСЭлектроннымиДокументамиЖурналПервичныеДокументы(КлючОбработанойЗаписи = Неопределено)
	Элементы.СписокДокументов.Обновить();
	Если КлючОбработанойЗаписи <> Неопределено Тогда
		Если Элементы.СписокДокументов.ПроверитьСтроку(КлючОбработанойЗаписи) Тогда
			Элементы.СписокДокументов.ТекущаяСтрока = КлючОбработанойЗаписи;
		Иначе
			Сообщить(НСтр("ru = 'Данные не отображены в списке, так как не соответствуют отбору.'; uk = 'Дані не відображені в списку, так як не відповідають відбору.'"));
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьКнопокКомандСпискаДокументов();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПослеВыполненияДействийСЭлектроннымиДокументамиЖурналДокументыНДС(КлючОбработанойЗаписи = Неопределено)
	Элементы.СписокДокументовДокументыНДС.Обновить();
	Если КлючОбработанойЗаписи <> Неопределено Тогда
		Если Элементы.СписокДокументовДокументыНДС.ПроверитьСтроку(КлючОбработанойЗаписи) Тогда
			Элементы.СписокДокументовДокументыНДС.ТекущаяСтрока = КлючОбработанойЗаписи;
		Иначе
			Сообщить(НСтр("ru = 'Данные не отображены в списке, так как не соответствуют отбору.'; uk = 'Дані не відображені в списку, так як не відповідають відбору.'"));
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьКнопокКомандСпискаДокументовДокументыНДС();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПослеВыполненияДействийСДополнительнымиЭлектроннымиДокументамиДФС(КлючОбработанойЗаписи = Неопределено) Экспорт
	Элементы.СписокДопДокументыДФС.Обновить();
	Если КлючОбработанойЗаписи <> Неопределено Тогда
		Если Элементы.СписокДопДокументыДФС.ПроверитьСтроку(КлючОбработанойЗаписи) Тогда
			Элементы.СписокДопДокументыДФС.ТекущаяСтрока = КлючОбработанойЗаписи;
		Иначе
			Сообщить(НСтр("ru = 'Данные не отображены в списке, так как не соответствуют отбору.'; uk = 'Дані не відображені в списку, так як не відповідають відбору.'"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ИнициализироватьПодтверждениеИОтправкуОтветаНаЭлектронныйДокумент(ЖурналРабочегоСтола)
	ЭлементыСписокДокументов = Неопределено;
	Если ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументов;
	ИначеЕсли ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументовДокументыНДС;
	Иначе
		Возврат;
	КонецЕсли;
	
	лМассивДанныхДокументов = Новый Массив;
	Для Каждого лВыделенаяСтрока Из ЭлементыСписокДокументов.ВыделенныеСтроки Цикл
		лДанныеВыделенойСтроки = ЭлементыСписокДокументов.ДанныеСтроки(лВыделенаяСтрока);
		лСтруктураДанныхДокумента = скEDI_ОбщегоНазначенияКлиент.ПолучитьСтруктуруДанныхПоЭлектронномуДокументу();
		ЗаполнитьЗначенияСвойств(лСтруктураДанныхДокумента, лДанныеВыделенойСтроки);
		//лСтруктураДанныхДокумента.Вставить("ПараметрыСозданияДокументов"    , Новый Структура);
		//лСтруктураДанныхДокумента.Вставить("СоответствиеЗначенийРеквизитов" , Новый Соответствие);
		//лСтруктураДанныхДокумента.Вставить("ЕстьОшибки"                     , Ложь);
		лМассивДанныхДокументов.Добавить(лСтруктураДанныхДокумента);
	КонецЦикла;
	МассивДанныхПоДокументам = Новый ФиксированныйМассив(лМассивДанныхДокументов);
	ВерсияМассиваДанныхПоДокументам = Новый УникальныйИдентификатор;
	
	ВыполняемыеОперации = Новый Массив;
	Если БесплатнаяОтправка50 Тогда
		ВыполняемыеОперации.Добавить("Free");
	КонецЕсли;
	ВыполняемыеОперации.Добавить("Подпись");//2018-03-21
	ВыполняемыеОперации.Добавить("ОтправкаКвитанций");
	
	ОшибкаПолученияПодписей = "";
	Подписанты = скEDI_ОбщегоНазначения.ПолучитьПодписантов(ВыполняемыеОперации, Объект.Организация, МассивДанныхПоДокументам, ОшибкаПолученияПодписей);
	Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
		Сообщить(ОшибкаПолученияПодписей);
		Возврат;
	КонецЕсли;
	
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Новый Структура("ВерсияМассиваДанныхПоДокументам,ВыполняемыеОперации,Организация,Подписанты", ВерсияМассиваДанныхПоДокументам, ВыполняемыеОперации, Объект.Организация, Подписанты);
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов.Вставить("ЖурналРабочегоСтола", ЖурналРабочегоСтола);
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
		лФормаНастройкиПараметровПодписиДокументов = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастройкиПодписейЭлектронныхДокументов", лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма);
		ВыполнитьОперацииСЭлектроннымиДокументами(лФормаНастройкиПараметровПодписиДокументов.ОткрытьМодально());
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастройкиПараметровПодписиДокументов(лПараметрыФормыНастройкиПодписейЭлектронныхДокументов
		, ЭтаФорма 
		, "ВыполнитьОперацииСЭлектроннымиДокументами");
	КонецЕсли;
КонецПроцедуры // ИнициализироватьПодписьЭлектронногоДокумента()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ИнициализироватьОтклонениеЭлектронногоДокумента(ЖурналРабочегоСтола)
	ЭлементыСписокДокументов = Неопределено;
	Если ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументов;
	ИначеЕсли ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументовДокументыНДС;
	Иначе
		Возврат;
	КонецЕсли;
	
	лМассивДанныхДокументов = Новый Массив;
	Для Каждого лВыделенаяСтрока Из ЭлементыСписокДокументов.ВыделенныеСтроки Цикл
		
		лДанныеВыделенойСтроки = ЭлементыСписокДокументов.ДанныеСтроки(лВыделенаяСтрока);
		лСтруктураДанныхДокумента = скEDI_ОбщегоНазначенияКлиент.ПолучитьСтруктуруДанныхПоЭлектронномуДокументу();
		ЗаполнитьЗначенияСвойств(лСтруктураДанныхДокумента, лДанныеВыделенойСтроки);
		//лСтруктураДанныхДокумента.Вставить("ПараметрыСозданияДокументов"    , Новый Структура);
		//лСтруктураДанныхДокумента.Вставить("СоответствиеЗначенийРеквизитов" , Новый Соответствие);
		//лСтруктураДанныхДокумента.Вставить("ЕстьОшибки"                     , Ложь);
		
		//Если скEDI_ОбщегоНазначения.ЭлектронныйДокументНеОтправлен(лСтруктураДанныхДокумента.ЭлектронныйДокумент) Тогда
			лМассивДанныхДокументов.Добавить(лСтруктураДанныхДокумента);			
		//КонецЕсли;
		
	КонецЦикла;
	МассивДанныхПоДокументам = Новый ФиксированныйМассив(лМассивДанныхДокументов);
	ВерсияМассиваДанныхПоДокументам = Новый УникальныйИдентификатор;
	
	ВыполняемыеОперации = Новый Массив;
	Если БесплатнаяОтправка50 Тогда
		ВыполняемыеОперации.Добавить("Free");
	КонецЕсли;
	//ВыполняемыеОперации.Добавить("Подпись");
	ВыполняемыеОперации.Добавить("Отклонение");
	
	ОшибкаПолученияПодписей = "";
	Подписанты = скEDI_ОбщегоНазначения.ПолучитьПодписантов(ВыполняемыеОперации, Объект.Организация, МассивДанныхПоДокументам, ОшибкаПолученияПодписей);
	Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
		Сообщить(ОшибкаПолученияПодписей);
		Возврат;
	КонецЕсли;
	
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Новый Структура("ВерсияМассиваДанныхПоДокументам,ВыполняемыеОперации,Организация,Подписанты", ВерсияМассиваДанныхПоДокументам, ВыполняемыеОперации, Объект.Организация, Подписанты);
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов.Вставить("ЖурналРабочегоСтола", ЖурналРабочегоСтола);
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
		лФормаНастройкиПараметровПодписиДокументов = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастройкиПодписейЭлектронныхДокументов", лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма);
		ВыполнитьОперацииСЭлектроннымиДокументами(лФормаНастройкиПараметровПодписиДокументов.ОткрытьМодально());
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастройкиПараметровПодписиДокументов(лПараметрыФормыНастройкиПодписейЭлектронныхДокументов
		, ЭтаФорма 
		, "ВыполнитьОперацииСЭлектроннымиДокументами");
	КонецЕсли;
КонецПроцедуры // ИнициализироватьПодтверждениеИОтправкуОтветаНаЭлектронныйДокумент()

&НаКлиенте
Процедура ИнициализироватьПроверкуЭлектронногоДокумента(ЖурналРабочегоСтола)
	ЭлементыСписокДокументов = Неопределено;
	Если ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументов;
	ИначеЕсли ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументовДокументыНДС;
	Иначе
		Возврат;
	КонецЕсли;
	
	лМассивДанныхДокументов = Новый Массив;
	Для Каждого лВыделенаяСтрока Из ЭлементыСписокДокументов.ВыделенныеСтроки Цикл
		
		лДанныеВыделенойСтроки = ЭлементыСписокДокументов.ДанныеСтроки(лВыделенаяСтрока);
		лСтруктураДанныхДокумента = скEDI_ОбщегоНазначенияКлиент.ПолучитьСтруктуруДанныхПоЭлектронномуДокументу();
		ЗаполнитьЗначенияСвойств(лСтруктураДанныхДокумента, лДанныеВыделенойСтроки);
		//лСтруктураДанныхДокумента.Вставить("ПараметрыСозданияДокументов"    , Новый Структура);
		//лСтруктураДанныхДокумента.Вставить("СоответствиеЗначенийРеквизитов" , Новый Соответствие);
		//лСтруктураДанныхДокумента.Вставить("ЕстьОшибки"                     , Ложь);
		
		//Если скEDI_ОбщегоНазначения.ЭлектронныйДокументНеОтправлен(лСтруктураДанныхДокумента.ЭлектронныйДокумент) Тогда ???????			
			лМассивДанныхДокументов.Добавить(лСтруктураДанныхДокумента);			
		//КонецЕсли;
		
	КонецЦикла;
	МассивДанныхПоДокументам = Новый ФиксированныйМассив(лМассивДанныхДокументов);
	ВерсияМассиваДанныхПоДокументам = Новый УникальныйИдентификатор;
	
	ВыполняемыеОперации = Новый Массив;
	ВыполняемыеОперации.Добавить("Проверка");
	ВыполняемыеОперации.Добавить("ПоказатьРезультатПроверки");
	
	ПараметрыОпераций = Новый Структура;
	ПараметрыОпераций.Вставить("ВыполняемыеОперации", ВыполняемыеОперации);
	ПараметрыОпераций.Вставить("ТаблицаНеобходимыхПодписей", Неопределено);
	ПараметрыОпераций.Вставить("ТаблицаНеобходимыхПодписейШифрования", Неопределено);
	ПараметрыОпераций.Вставить("ВерсияМассиваДанныхПоДокументам", ВерсияМассиваДанныхПоДокументам);
	ПараметрыОпераций.Вставить("ЖурналРабочегоСтола", ЖурналРабочегоСтола);
	ВыполнитьОперацииСЭлектроннымиДокументами(ПараметрыОпераций);
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ИнициализироватьОтзывЭлектронногоДокумента(ЖурналРабочегоСтола)
	ЭлементыСписокДокументов = Неопределено;
	Если ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументов;
	ИначеЕсли ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументовДокументыНДС;
	Иначе
		Возврат;
	КонецЕсли;
	
	лМассивДанныхДокументов = Новый Массив;
	Для Каждого лВыделенаяСтрока Из ЭлементыСписокДокументов.ВыделенныеСтроки Цикл
		
		лДанныеВыделенойСтроки = ЭлементыСписокДокументов.ДанныеСтроки(лВыделенаяСтрока);
		
		лСтруктураДанныхДокумента = скEDI_ОбщегоНазначенияКлиент.ПолучитьСтруктуруДанныхПоЭлектронномуДокументу();
		ЗаполнитьЗначенияСвойств(лСтруктураДанныхДокумента, лДанныеВыделенойСтроки);
		//лСтруктураДанныхДокумента.Вставить("ПараметрыСозданияДокументов"    , Новый Структура);
		//лСтруктураДанныхДокумента.Вставить("СоответствиеЗначенийРеквизитов" , Новый Соответствие);
		//лСтруктураДанныхДокумента.Вставить("ЕстьОшибки"                     , Ложь);
		
		//Если Не скEDI_ОбщегоНазначения.ЭлектронныйДокументНеОтправлен(лДанныеВыделенойСтроки.ЭлектронныйДокумент) Тогда			 
			лМассивДанныхДокументов.Добавить(лСтруктураДанныхДокумента);		 
		//Иначе			 
		//	Сообщить("Электронный документ " + лДанныеВыделенойСтроки.ЭлектронныйДокумент + " не был отправлен.");			 
		//КонецЕсли;
		
	КонецЦикла;
	
	МассивДанныхПоДокументам = Новый ФиксированныйМассив(лМассивДанныхДокументов);
	ВерсияМассиваДанныхПоДокументам = Новый УникальныйИдентификатор;
	
	ВыполняемыеОперации = Новый Массив;
	Если БесплатнаяОтправка50 Тогда
		ВыполняемыеОперации.Добавить("Free");
	КонецЕсли;
	//ВыполняемыеОперации.Добавить("Подпись");
	ВыполняемыеОперации.Добавить("Отзыв");
	
	ОшибкаПолученияПодписей = "";
	Подписанты = скEDI_ОбщегоНазначения.ПолучитьПодписантов(ВыполняемыеОперации, Объект.Организация, МассивДанныхПоДокументам, ОшибкаПолученияПодписей);
	Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
		Сообщить(ОшибкаПолученияПодписей);
		Возврат;
	КонецЕсли;
	
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Новый Структура("ВерсияМассиваДанныхПоДокументам,ВыполняемыеОперации,Организация,Подписанты", ВерсияМассиваДанныхПоДокументам, ВыполняемыеОперации, Объект.Организация, Подписанты);
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов.Вставить("ЖурналРабочегоСтола", ЖурналРабочегоСтола);
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
		лФормаНастройкиПараметровПодписиДокументов = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастройкиПодписейЭлектронныхДокументов", лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма);
		ВыполнитьОперацииСЭлектроннымиДокументами(лФормаНастройкиПараметровПодписиДокументов.ОткрытьМодально());
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастройкиПараметровПодписиДокументов(лПараметрыФормыНастройкиПодписейЭлектронныхДокументов
		, ЭтаФорма 
		, "ВыполнитьОперацииСЭлектроннымиДокументами");
	КонецЕсли;
КонецПроцедуры // ИнициализироватьПодтверждениеИОтправкуОтветаНаЭлектронныйДокумент()

&НаКлиенте
Процедура ИнициализироватьПовторнуюОтправкуЭлектронныхДокументовКвитанций(ЖурналРабочегоСтола)
	ЭлементыСписокДокументов = Неопределено;
	Если ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументов;
	ИначеЕсли ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументовДокументыНДС;
	Иначе
		Возврат;
	КонецЕсли;
	
	лМассивДанныхДокументов = Новый Массив;
	Для Каждого лВыделенаяСтрока Из ЭлементыСписокДокументов.ВыделенныеСтроки Цикл
		
		лДанныеВыделенойСтроки = ЭлементыСписокДокументов.ДанныеСтроки(лВыделенаяСтрока);
		лСтруктураДанныхДокумента = скEDI_ОбщегоНазначенияКлиент.ПолучитьСтруктуруДанныхПоЭлектронномуДокументу();
		ЗаполнитьЗначенияСвойств(лСтруктураДанныхДокумента, лДанныеВыделенойСтроки);
		//лСтруктураДанныхДокумента.Вставить("ПараметрыСозданияДокументов"    , Новый Структура);
		//лСтруктураДанныхДокумента.Вставить("СоответствиеЗначенийРеквизитов" , Новый Соответствие);
		//лСтруктураДанныхДокумента.Вставить("ЕстьОшибки"                     , Ложь);
		лМассивДанныхДокументов.Добавить(лСтруктураДанныхДокумента);			
	КонецЦикла;
	МассивДанныхПоДокументам = Новый ФиксированныйМассив(лМассивДанныхДокументов);
	ВерсияМассиваДанныхПоДокументам = Новый УникальныйИдентификатор;
	
	ВыполняемыеОперации = Новый Массив;
	ВыполняемыеОперации.Добавить("ПовторнаяОтправка");
	
	ОшибкаПолученияПодписей = "";
	Подписанты = скEDI_ОбщегоНазначения.ПолучитьПодписантов(ВыполняемыеОперации, Объект.Организация, МассивДанныхПоДокументам, ОшибкаПолученияПодписей);
	Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
		Сообщить(ОшибкаПолученияПодписей);
		Возврат;
	КонецЕсли;
	
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Новый Структура("ВерсияМассиваДанныхПоДокументам,ВыполняемыеОперации,Организация,Подписанты", ВерсияМассиваДанныхПоДокументам, ВыполняемыеОперации, Объект.Организация, Подписанты);
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов.Вставить("ЖурналРабочегоСтола", ЖурналРабочегоСтола);
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
		лФормаНастройкиПараметровПодписиДокументов = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастройкиПодписейЭлектронныхДокументов", лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма);
		ВыполнитьОперацииСЭлектроннымиДокументами(лФормаНастройкиПараметровПодписиДокументов.ОткрытьМодально());
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастройкиПараметровПодписиДокументов(лПараметрыФормыНастройкиПодписейЭлектронныхДокументов
		, ЭтаФорма 
		, "ВыполнитьОперацииСЭлектроннымиДокументами");
	КонецЕсли;
КонецПроцедуры // ИнициализироватьПодтверждениеИОтправкуОтветаНаЭлектронныйДокумент()

&НаКлиенте
Процедура ОбновитьДанныеГруппыИнформация(пЭлементСписокДокументов, пСобытияПоЭлектронномуДокументу, пСписокВариантыДокументов, пЗаголовокЗакладкиВариантыДокументов, пСписокСвязанныхДокументов, пЗаголовокЗакладкиСвязанныеДокументы)
	ТекущиеДанные = пЭлементСписокДокументов.ТекущиеДанные;
	
	пЗаголовокЗакладкиВариантыДокументов_ = "";
	пМассивСобытийПоЭлектронномуДокументу = Неопределено;
	пЗаголовокЗакладкиСвязанныеДокументы_ = "";
	пМассивСвязанныхЭлектронныхДокументов = Неопределено;
	ЭлектронныйДокумент = ПредопределенноеЗначение("Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка");
	ОсновнойЭлектронныйДокумент = ПредопределенноеЗначение("Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка");
	Если ТекущиеДанные <> Неопределено Тогда
		ПолучитьДанныеПоЭлектронномуДокументуДляОтображения(ТекущиеДанные.ЭлектронныйДокумент, ТекущиеДанные.ОсновнойЭлектронныйДокумент, пЗаголовокЗакладкиВариантыДокументов_, пМассивСобытийПоЭлектронномуДокументу, пЗаголовокЗакладкиСвязанныеДокументы_, пМассивСвязанныхЭлектронныхДокументов);
		
		ЭлектронныйДокумент = ТекущиеДанные.ЭлектронныйДокумент;
		ОсновнойЭлектронныйДокумент = ТекущиеДанные.ОсновнойЭлектронныйДокумент;
		Если ОсновнойЭлектронныйДокумент = ПредопределенноеЗначение("Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка") Тогда
			ОсновнойЭлектронныйДокумент = ЭлектронныйДокумент;
		КонецЕсли;
	КонецЕсли;
	
	пЗаголовокЗакладкиВариантыДокументов = пЗаголовокЗакладкиВариантыДокументов_;
	пСобытияПоЭлектронномуДокументу.Очистить();
	Если ТипЗнч(пМассивСобытийПоЭлектронномуДокументу) = Тип("Массив") Тогда
		Для Каждого ЭлементМассиваСобытийПоЭлектронномуДокументу Из пМассивСобытийПоЭлектронномуДокументу Цикл
			НоваяСтрокаСобытийПоЭлектронномуДокументу = пСобытияПоЭлектронномуДокументу.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСобытийПоЭлектронномуДокументу, ЭлементМассиваСобытийПоЭлектронномуДокументу);
		КонецЦикла;
	КонецЕсли;
	пСписокВариантыДокументов.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата());
	пСписокВариантыДокументов.Параметры.УстановитьЗначениеПараметра("ТекЭлектронныйДокумент", ЭлектронныйДокумент);
	пСписокВариантыДокументов.Параметры.УстановитьЗначениеПараметра("ОсновнойЭлектронныйДокумент", ОсновнойЭлектронныйДокумент);
	
	пЗаголовокЗакладкиСвязанныеДокументы = пЗаголовокЗакладкиСвязанныеДокументы_;
	пСписокСвязанныхДокументов.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата());
	пСписокСвязанныхДокументов.Параметры.УстановитьЗначениеПараметра("СписокЭлектронныхДокументов", пМассивСвязанныхЭлектронныхДокументов);
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура УстановитьДоступностьКнопокКомандСпискаДокументов()
	ОбновитьДанныеГруппыИнформация(Элементы.СписокДокументов, СобытияПоЭлектронномуДокументу, СписокВариантыДокументов, ЗаголовокЗакладкиВариантыДокументов, СписокСвязанныеДокументы, ЗаголовокЗакладкиСвязанныеДокументы);

	Если Элементы.СписокДокументов.ТекущиеДанные = Неопределено Тогда
		Элементы.СписокДокументовОткрытьДокумент1С.Доступность = Ложь;
		Элементы.СписокДокументовОткрытьЭлектронныйДокумент.Доступность = Ложь;
	Иначе
		Если ЗначениеЗаполнено(Элементы.СписокДокументов.ТекущиеДанные.Документ1С) Тогда
			Элементы.СписокДокументовОткрытьДокумент1С.Доступность = Истина;
		Иначе
			Элементы.СписокДокументовОткрытьДокумент1С.Доступность = Ложь;
		КонецЕсли;
		Элементы.СписокДокументовОткрытьЭлектронныйДокумент.Доступность = Истина;
	КонецЕсли;
	
	ЕстьЭлементы = Ложь;
	лМассивДанныхДокументов = Новый Массив;
	Для Каждого лВыделеннаяСтрокаСпискаДокументов Из Элементы.СписокДокументов.ВыделенныеСтроки Цикл 
		лДанныеВыделенойСтроки = Элементы.СписокДокументов.ДанныеСтроки(лВыделеннаяСтрокаСпискаДокументов);
		Если лДанныеВыделенойСтроки = Неопределено Тогда
			Прервать;
		КонецЕсли;
		лСтруктураДанныхДокумента = Новый Структура("Дата,ВидЭлектронногоДокумента,ТипДокумента,Документ1С,ЭлектронныйДокумент,ВхИсх,ГдеСоздан,Состояние,СостояниеРегистрацияВДФС,ЕстьФинальнаяКвитанцияДФС,ВидДокумента1С,СоответствиеДокументов,НеобходимоПроведениеДокумента1С,Документ1СПроведен,Обработано,ДатаОбработки,РегистрируетсяВЕРННПокупателем,ЭтоОсновнойВариант,ОшибкаШифрованияПриОтправке");
		ЗаполнитьЗначенияСвойств(лСтруктураДанныхДокумента, лДанныеВыделенойСтроки);
		лМассивДанныхДокументов.Добавить(лСтруктураДанныхДокумента);
		ЕстьЭлементы = Истина;
	КонецЦикла;
	лДоступныеКоманды = скEDI_ОбщегоНазначенияКлиент.ПолучитьДоступныеКоманды(лМассивДанныхДокументов);
	
	Элементы.СписокДокументовПодписать.Доступность                                               = лДоступныеКоманды.Подписать;
	Элементы.СписокДокументовПодписатьИОтправить.Доступность                                     = лДоступныеКоманды.ПодписатьИОтправить;
	Элементы.СписокДокументовПодписатьИОтправитьТолькоСсылка.Доступность                         = лДоступныеКоманды.ПодписатьИОтправитьТолькоСсылку;
	Элементы.СписокДокументовОтправитьНаДоподписание.Доступность                                 = лДоступныеКоманды.ОтправитьНаДоподписание;
	//Элементы.СписокДокументовПодписатьИОтправитьВДФС.Доступность                                 = лДоступныеКоманды.ПодписатьИОтправитьВДФС;
	Элементы.СписокДокументовПодтвердитьИОтправитьОтветНаВходящийЭлектронныйДокумент.Доступность = лДоступныеКоманды.Подтвердить;
	Элементы.СписокДокументовОтклонитьВходящийЭлектронныйДокумент.Доступность                    = лДоступныеКоманды.Отклонить;
	Элементы.СписокДокументовОтозватьЭлектронныйДокумент.Доступность                             = лДоступныеКоманды.Отозвать;
	Элементы.СписокДокументовОтправитьПовторно.Доступность                                       = лДоступныеКоманды.ПовторнаяОтправка;
	Элементы.СписокДокументовСоздатьДокументы1С.Доступность                                      = лДоступныеКоманды.СоздатьДокумент1С;
	Элементы.СписокДокументовПровестиДокументы1С.Доступность                                     = лДоступныеКоманды.ПровестиДокумент1С;
	Элементы.СписокДокументовСнятьПодписиСЭлектронногоДокумента.Доступность                      = лДоступныеКоманды.СнятьПодписи;
	//Элементы.СписокДокументовПроверитьЭлектронныйДокумент.Доступность                            = лДоступныеКоманды.Проверить;
	Элементы.СписокДокументовЭкспортДокументов.Доступность                                       = лДоступныеКоманды.ЭкспортДокументов;
	//Элементы.СписокДокументовОтправитьЗапросОСостоянииРегистрации.Доступность                    = лДоступныеКоманды.ОтправитьЗапросОСостоянииРегистрации;
	Элементы.СписокДокументовСформироватьНовыйВариантПодписатьИОтправитьЭлектронныеДокументы.Доступность = лДоступныеКоманды.СформироватьНовыйВариантЭлектронногоДокумента;
	Элементы.СписокДокументовУстановитьОсновнойВариантЭлектронногоДокумента.Доступность = лДоступныеКоманды.УстановитьОсновнойВариантЭлектронногоДокумента;
	Элементы.СписокДокументовАннулироватьЭлектронныйДокумент.Доступность = лДоступныеКоманды.Аннулировать;
	Элементы.СписокДокументовПодписатьИОтправить_Переподписать.Доступность = лДоступныеКоманды.ПовторноеУтверждение;
	Элементы.СписокДокументовПодписатьИОтправить_Переподписать.Видимость = лДоступныеКоманды.ПовторноеУтверждение;
	Элементы.СписокДокументовПечатьПредварительныйПросмотр.Доступность = ЕстьЭлементы;
	
	Если БесплатнаяОтправка50 Тогда
		Элементы.СписокДокументовПодписать.Видимость = Ложь;
		Элементы.СписокДокументовОтправитьНаДоподписание.Видимость = Ложь;
		//Элементы.СписокДокументовПодписатьИОтправитьВДФС.Видимость = Ложь;
		//Элементы.СписокДокументовПроверитьЭлектронныйДокумент.Видимость = Ложь;
		Элементы.СписокДокументовОтправитьПовторно.Видимость = Ложь;
	Иначе
		Элементы.СписокДокументовПодписать.Видимость = Истина;
		Элементы.СписокДокументовОтправитьНаДоподписание.Видимость = Истина;
		//Если ОбменНалоговымиДокументамиСГФС Тогда
		//	Элементы.СписокДокументовПодписатьИОтправитьВДФС.Видимость = Истина;
		//	Элементы.СписокДокументовПроверитьЭлектронныйДокумент.Видимость = Истина;
		//Иначе
		//	Элементы.СписокДокументовПодписатьИОтправитьВДФС.Видимость = Ложь;
		//	Элементы.СписокДокументовПроверитьЭлектронныйДокумент.Видимость = Ложь;
		//КонецЕсли;
		Элементы.СписокДокументовОтправитьПовторно.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры // УстановитьДоступностьКнопокКомандСпискаДокументов()

&НаКлиенте
Процедура УстановитьДоступностьКнопокКомандСпискаДокументовДокументыНДС()
	ОбновитьДанныеГруппыИнформация(Элементы.СписокДокументовДокументыНДС, СобытияПоЭлектронномуДокументуДокументыНДС, СписокВариантыДокументовДокументыНДС, ЗаголовокЗакладкиВариантыДокументовДокументыНДС, СписокСвязанныеДокументыДокументыНДС, ЗаголовокЗакладкиСвязанныеДокументыДокументыНДС);
	
	Если Элементы.СписокДокументовДокументыНДС.ТекущиеДанные = Неопределено Тогда
		Элементы.СписокДокументовОткрытьДокумент1СДокументыНДС.Доступность = Ложь;
		Элементы.СписокДокументовОткрытьЭлектронныйДокументДокументыНДС.Доступность = Ложь;
	Иначе
		Если ЗначениеЗаполнено(Элементы.СписокДокументовДокументыНДС.ТекущиеДанные.Документ1С) Тогда
			Элементы.СписокДокументовОткрытьДокумент1СДокументыНДС.Доступность = Истина;
		Иначе
			Элементы.СписокДокументовОткрытьДокумент1СДокументыНДС.Доступность = Ложь;
		КонецЕсли;
		Элементы.СписокДокументовОткрытьЭлектронныйДокументДокументыНДС.Доступность = Истина;
	КонецЕсли;
	
	ЕстьЭлементы = Ложь;
	лМассивДанныхДокументов = Новый Массив;
	Для Каждого лВыделеннаяСтрокаСпискаДокументов Из Элементы.СписокДокументовДокументыНДС.ВыделенныеСтроки Цикл 
		лДанныеВыделенойСтроки = Элементы.СписокДокументовДокументыНДС.ДанныеСтроки(лВыделеннаяСтрокаСпискаДокументов);
		Если лДанныеВыделенойСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		лСтруктураДанныхДокумента = Новый Структура("Дата,ВидЭлектронногоДокумента,ТипДокумента,Документ1С,ЭлектронныйДокумент,ВхИсх,ГдеСоздан,Состояние,СостояниеРегистрацияВДФС,ЕстьФинальнаяКвитанцияДФС,ВидДокумента1С,СоответствиеДокументов,НеобходимоПроведениеДокумента1С,Документ1СПроведен,Обработано,ДатаОбработки,РегистрируетсяВЕРННПокупателем,ЭтоОсновнойВариант,ОшибкаШифрованияПриОтправке");
		ЗаполнитьЗначенияСвойств(лСтруктураДанныхДокумента, лДанныеВыделенойСтроки);
		лМассивДанныхДокументов.Добавить(лСтруктураДанныхДокумента);
		ЕстьЭлементы = Истина;
	КонецЦикла;
	лДоступныеКоманды = скEDI_ОбщегоНазначенияКлиент.ПолучитьДоступныеКоманды(лМассивДанныхДокументов);
	
	Элементы.СписокДокументовПодписатьДокументыНДС.Доступность                                               = лДоступныеКоманды.Подписать;
	Элементы.СписокДокументовПодписатьИОтправитьДокументыНДС.Доступность                                     = лДоступныеКоманды.ПодписатьИОтправить;
	//Элементы.СписокДокументовПодписатьИОтправитьТолькоСсылкаДокументыНДС.Доступность                         = лДоступныеКоманды.ПодписатьИОтправитьТолькоСсылку;
	Элементы.СписокДокументовПодписатьИОтправитьВДФСДокументыНДС.Доступность                                 = лДоступныеКоманды.ПодписатьИОтправитьВДФС;
	Элементы.СписокДокументовПодтвердитьИОтправитьОтветНаВходящийЭлектронныйДокументДокументыНДС.Доступность = лДоступныеКоманды.Подтвердить;
	Элементы.СписокДокументовОтклонитьВходящийЭлектронныйДокументДокументыНДС.Доступность                    = лДоступныеКоманды.Отклонить;
	Элементы.СписокДокументовОтозватьЭлектронныйДокументДокументыНДС.Доступность                             = лДоступныеКоманды.Отозвать;
	Элементы.СписокДокументовОтправитьПовторноДокументыНДС.Доступность                                       = лДоступныеКоманды.ПовторнаяОтправка;
	Элементы.СписокДокументовСоздатьДокументы1СДокументыНДС.Доступность                                      = лДоступныеКоманды.СоздатьДокумент1С;
	Элементы.СписокДокументовПровестиДокументы1СДокументыНДС.Доступность                                     = лДоступныеКоманды.ПровестиДокумент1С;
	Элементы.СписокДокументовСнятьПодписиСЭлектронногоДокументаДокументыНДС.Доступность                      = лДоступныеКоманды.СнятьПодписи;
	Элементы.СписокДокументовПроверитьЭлектронныйДокументДокументыНДС.Доступность                            = лДоступныеКоманды.Проверить;
	Элементы.СписокДокументовЭкспортДокументовДокументыНДС.Доступность                                       = лДоступныеКоманды.ЭкспортДокументов;
	Элементы.СписокДокументовОтправитьЗапросОСостоянииРегистрацииДокументыНДС.Доступность                    = лДоступныеКоманды.ОтправитьЗапросОСостоянииРегистрации;
	Элементы.СписокДокументовСформироватьНовыйВариантЭлектронныеДокументыДокументыНДС.Доступность            = лДоступныеКоманды.СформироватьНовыйВариантЭлектронногоДокумента;
	Элементы.СписокДокументовПечатьПредварительныйПросмотрДокументы1С.Доступность = ЕстьЭлементы;
	
	//Если БесплатнаяОтправка50 Тогда
	//	Элементы.СписокДокументовПодписать.Видимость = Ложь;
	//	Элементы.СписокДокументовПодписатьИОтправитьВДФС.Видимость = Ложь;
	//	Элементы.СписокДокументовПроверитьЭлектронныйДокумент.Видимость = Ложь;
	//	Элементы.СписокДокументовОтправитьПовторно.Видимость = Ложь;
	//Иначе
	//	Элементы.СписокДокументовПодписать.Видимость = Истина;
	//	Если ОбменНалоговымиДокументамиСГФС Тогда
	//		Элементы.СписокДокументовПодписатьИОтправитьВДФС.Видимость = Истина;
	//		Элементы.СписокДокументовПроверитьЭлектронныйДокумент.Видимость = Истина;
	//	Иначе
	//		Элементы.СписокДокументовПодписатьИОтправитьВДФС.Видимость = Ложь;
	//		Элементы.СписокДокументовПроверитьЭлектронныйДокумент.Видимость = Ложь;
	//	КонецЕсли;
	//	Элементы.СписокДокументовОтправитьПовторно.Видимость = Истина;
	//КонецЕсли;
КонецПроцедуры // УстановитьДоступностьКнопокКомандСпискаДокументов()

&НаСервере
Процедура ОбновитьДанныеСрокДействияЛицензииНаСервере(ОбновлятьСрокДействияЛицензии = Истина)
	ЕДРПОУ = Объект.Организация.Код;
	Филиал = Объект.Организация.Филиал;
	Если ЗначениеЗаполнено(ЕДРПОУ) Тогда
		Если ОбновлятьСрокДействияЛицензии Тогда
			ТекСрокДействияЛицензии = Неопределено;
			ТекНаименованиеЛицензии = "";
			скEDI_ОбщегоНазначения.ПолучитьДанныеПоЛицензии(ЕДРПОУ, Филиал, ТекСрокДействияЛицензии, ТекНаименованиеЛицензии, Истина);
			
			СрокДействияЛицензии = ТекСрокДействияЛицензии;
			НаименованиеЛицензии = ТекНаименованиеЛицензии;
		КонецЕсли;
		Если ЗначениеЗаполнено(СрокДействияЛицензии) Тогда
			Элементы.ДекорацияДанныеПоЛицензии.Заголовок = НСтр("ru = 'Срок действия лицензии'; uk = 'Термін дії ліцензії'")
			+ " " + НаименованиеЛицензии + " " + Формат(СрокДействияЛицензии, "ДФ=dd.MM.yyyy");
			
			Если СрокДействияЛицензии < ДобавитьМесяц(ТекущаяДата(), 1) Тогда
				Если СрокДействияЛицензии < НачалоДня(ТекущаяДата()) Тогда
					БесплатнаяОтправка50 = Истина;
				Иначе
					БесплатнаяОтправка50 = Ложь;
				КонецЕсли;
				Элементы.ДекорацияДанныеПоЛицензии.ЦветТекста = Новый Цвет(255, 0, 0);// красный
			Иначе
				БесплатнаяОтправка50 = Ложь;
				Элементы.ДекорацияДанныеПоЛицензии.ЦветТекста = Новый Цвет(0, 0, 0);// черный
			КонецЕсли;
		Иначе
			БесплатнаяОтправка50 = Истина;
			Элементы.ДекорацияДанныеПоЛицензии.Заголовок = НСтр("ru = 'Лицензия отсутствует.'; uk = 'Ліцензія відсутня.'");
			Элементы.ДекорацияДанныеПоЛицензии.ЦветТекста = Новый Цвет(255, 0, 0);// красный
		КонецЕсли;
		
		Если БесплатнаяОтправка50 Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	скEDI_СтатусыЛицензииСрезПоследних.СтатусЛицензииБезОплаты КАК СтатусЛицензииБезОплаты
			               |ИЗ
			               |	РегистрСведений.скEDI_СтатусыЛицензии.СрезПоследних(
			               |			&Месяц,
			               |			ЕДРПОУ = &ЕДРПОУ
			               |				И Филиал = &Филиал) КАК скEDI_СтатусыЛицензииСрезПоследних
			               |ГДЕ
			               |	РАЗНОСТЬДАТ(скEDI_СтатусыЛицензииСрезПоследних.Период, &Месяц, МЕСЯЦ) = 0";
			Запрос.УстановитьПараметр("Месяц", ТекущаяДата());
			Запрос.УстановитьПараметр("ЕДРПОУ", ЕДРПОУ);
			Запрос.УстановитьПараметр("Филиал", Филиал);
			
			ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
			Если ВыборкаРезультатаЗапроса.Следующий() Тогда
				СтатусЛицензииБезОплаты = ВыборкаРезультатаЗапроса.СтатусЛицензииБезОплаты;
				Элементы.ДекорацияДанныеПоЛицензии.Заголовок = Элементы.ДекорацияДанныеПоЛицензии.Заголовок + " " + Строка(СтатусЛицензииБезОплаты);
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ДекорацияДанныеПоЛицензии.Видимость = Истина;
	Иначе
		БесплатнаяОтправка50 = Истина;
		Элементы.ДекорацияДанныеПоЛицензии.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОбработкиДокументовНаСервере()
	ДанныеОбработкиДокументов = ПолучитьДанныеОбработкиДокументов(Объект.Организация);
	Если ЗначениеЗаполнено(ДанныеОбработкиДокументов.ДатаПоследнегоПриемаВходящихСообщений)
		И Строка(ДанныеОбработкиДокументов.ДатаПоследнегоПриемаВходящихСообщений) <> АктуальноНаДатаПоследнейОбработки Тогда 
		АктуальноНаДатаПоследнейОбработки = ДанныеОбработкиДокументов.ДатаПоследнегоПриемаВходящихСообщений;
		Элементы.АктуальноНаДатаПоследнейОбработки.Видимость = Истина;
	КонецЕсли;
	
	Если ДанныеОбработкиДокументов.ОтображатьЛимитРегистрацииВГФС Тогда
		Если ЗначениеЗаполнено(ДанныеОбработкиДокументов.ЛимитДата) Тогда
			ЛимитГФС = Формат(ДанныеОбработкиДокументов.ЛимитСумма, "ЧДЦ=2") + " грн. " + НСтр("ru = 'По состоянию на'; uk = 'Станом на'") + " " + Формат(ДанныеОбработкиДокументов.ЛимитДата, "ДФ='dd.MM.yyyy HH:mm:ss'");
			Если ЗначениеЗаполнено(ДанныеОбработкиДокументов.ЛимитНовыйДокумент) Тогда
				ЛимитГФС = ЛимитГФС + Символы.ПС + ДанныеОбработкиДокументов.ЛимитНовыйДокументОписание;
			КонецЕсли;
			Элементы.ОткрытьВыпискуПоЗапросуНаПолучениеЛимитаГФС.Доступность = Истина;
		Иначе
			Если ЗначениеЗаполнено(ДанныеОбработкиДокументов.ЛимитНовыйДокумент) Тогда
				ЛимитГФС = ДанныеОбработкиДокументов.ЛимитНовыйДокументОписание;
			Иначе
				ЛимитГФС = НСтр("ru = 'Запрос не отправлялся'; uk = 'Запит не відсилався'");
			КонецЕсли;
			Элементы.ОткрытьВыпискуПоЗапросуНаПолучениеЛимитаГФС.Доступность = Ложь;
		КонецЕсли;
		ЛимитГФС_Документ = ДанныеОбработкиДокументов.ЛимитДокумент;
		ЛимитГФС_НовыйДокумент = ДанныеОбработкиДокументов.ЛимитНовыйДокумент;
		//Элементы.ГруппаЛимитГФС.Видимость = Истина;
	Иначе
		//Элементы.ГруппаЛимитГФС.Видимость = Ложь;
		ЛимитГФС = "";
		ЛимитГФС_Дата = '00010101';
		ЛимитГФС_Сумма = 0;
		ЛимитГФС_Документ = Неопределено;
		ЛимитГФС_НовыйДокумент = Неопределено;
	КонецЕсли;
	ОбновитьДанныеСрокДействияЛицензииНаСервере(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеОбработкиДокументовКлиент()
	ОбновитьДанныеОбработкиДокументовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыпискуПоЗапросуНаПолучениеЛимитаГФС(Команда)
	ОткрытьЗначение(ЛимитГФС_Документ);
КонецПроцедуры


&НаКлиенте
Процедура ОтправитьЗапросНаПолучениеЛимитаГФС(Команда)
	ОбновитьДанныеОбработкиДокументовКлиент();
	Если ЗначениеЗаполнено(ЛимитГФС_НовыйДокумент) Тогда
		ОткрытьЗначение(ЛимитГФС_НовыйДокумент);
	Иначе
		ЗначенияЗаполнения	= Новый Структура("ОрганизацияEDI",	Объект.Организация);

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения",	ЗначенияЗаполнения);

		ОткрытьФорму("Документ.скEDI_ЗапросНаПолучениеЛимитаРегистрацииВЕРНН.Форма.ФормаДокумента", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПолучитьДанныеОбработкиДокументов(Знач Организация)
	Результат = Новый Структура("ДатаПоследнегоПриемаВходящихСообщений,ОтображатьЛимитРегистрацииВГФС,ЛимитСумма,ЛимитДата,ЛимитДокумент,ЛимитНовыйДокумент,ЛимитНовыйДокументОписание");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация" , Организация);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	скEDI_ВыполненныеОперацииОбработкиДокументов.ДатаВыполнения
	|ИЗ
	|	РегистрСведений.скEDI_ВыполненныеОперацииОбработкиДокументов КАК скEDI_ВыполненныеОперацииОбработкиДокументов
	|ГДЕ
	|	скEDI_ВыполненныеОперацииОбработкиДокументов.Организация = &Организация";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Результат.ДатаПоследнегоПриемаВходящихСообщений = Выборка.ДатаВыполнения;
	Иначе
		Результат.ДатаПоследнегоПриемаВходящихСообщений = Дата("00010101");
	КонецЕсли;	
	
	Если Организация.ОбменНалоговымиДокументамиСГФС Тогда
		Результат.ОтображатьЛимитРегистрацииВГФС = Истина;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	скEDI_ВипискиПоЛимитуРегистрацииВЕРННСрезПоследних.Период,
		               |	скEDI_ВипискиПоЛимитуРегистрацииВЕРННСрезПоследних.Строка2Сумма,
		               |	скEDI_ВипискиПоЛимитуРегистрацииВЕРННСрезПоследних.Регистратор
		               |ИЗ
		               |	РегистрСведений.скEDI_ВипискиПоЛимитуРегистрацииВЕРНН.СрезПоследних(, Организация = &Организация) КАК скEDI_ВипискиПоЛимитуРегистрацииВЕРННСрезПоследних";
		Запрос.УстановитьПараметр("Организация", Организация);
		
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		Если ВыборкаЗапроса.Следующий() Тогда
			Результат.ЛимитДата = ВыборкаЗапроса.Период;
			Результат.ЛимитСумма = ВыборкаЗапроса.Строка2Сумма;
			Результат.ЛимитДокумент = ВыборкаЗапроса.Регистратор;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	скEDI_ЗапросНаПолучениеЛимитаРегистрацииВЕРНН.Ссылка,
		               |	скEDI_ЗапросНаПолучениеЛимитаРегистрацииВЕРНН.Дата,
		               |	скEDI_ЗапросНаПолучениеЛимитаРегистрацииВЕРНН.Состояние
		               |ИЗ
		               |	Документ.скEDI_ЗапросНаПолучениеЛимитаРегистрацииВЕРНН КАК скEDI_ЗапросНаПолучениеЛимитаРегистрацииВЕРНН
		               |ГДЕ
		               |	скEDI_ЗапросНаПолучениеЛимитаРегистрацииВЕРНН.ОрганизацияEDI = &Организация
		               |	И скEDI_ЗапросНаПолучениеЛимитаРегистрацииВЕРНН.Состояние В (ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.Создан), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.Подписан), ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.ОтправленВДФС))
		               |	И НЕ скEDI_ЗапросНаПолучениеЛимитаРегистрацииВЕРНН.ПометкаУдаления
		               |	И РАЗНОСТЬДАТ(скEDI_ЗапросНаПолучениеЛимитаРегистрацииВЕРНН.Дата, &ТекДата, ДЕНЬ) <= 0
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	скEDI_ЗапросНаПолучениеЛимитаРегистрацииВЕРНН.Дата УБЫВ";
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
		
		ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
		Если ВыборкаЗапроса.Следующий() Тогда
			Результат.ЛимитНовыйДокумент = ВыборкаЗапроса.Ссылка;
			Результат.ЛимитНовыйДокументОписание = НСтр("ru = 'Запрос на дату'; uk = 'Запит на дату'") + " " + Формат(ВыборкаЗапроса.Дата, "ДФ='dd.MM.yyyy HH:mm:ss'") + " " + Строка(ВыборкаЗапроса.Состояние);
		КонецЕсли;
	Иначе
		Результат.ОтображатьЛимитРегистрацииВГФС = Ложь;
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(Результат);;
КонецФункции	
////////////////////////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьСписокКолонокПоТаблице(СписокКолонокПоУмолчанию, Элементы.СписокДокументов);
	ЗаполнитьСписокКолонокПоТаблице(СписокКолонокПоУмолчаниюДокументыНДС, Элементы.СписокДокументовДокументыНДС);
	
	скEDI_НастройкиПодКонфигурацию.НастроитьСписокОтображенияЭлектронныхДокументов(СписокДокументов, СписокВариантыДокументов, Перечисления.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы);
	скEDI_НастройкиПодКонфигурацию.НастроитьСписокОтображенияЭлектронныхДокументов(СписокДокументовДокументыНДС, СписокВариантыДокументовДокументыНДС, Перечисления.скEDI_ЖурналыРабочегоСтола.ДокументыНДС);
	
	ПроверитьНаНаличиеОбновлений(Отказ);
	ТекстЛицензионногоСоглашения = ПолучитьЛицензионноеСоглашение();
	
	СписокВариантыДокументов.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата());
	СписокВариантыДокументов.Параметры.УстановитьЗначениеПараметра("ТекЭлектронныйДокумент", Неопределено);
	СписокВариантыДокументов.Параметры.УстановитьЗначениеПараметра("ОсновнойЭлектронныйДокумент", Неопределено);
	СписокВариантыДокументовДокументыНДС.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата());
	СписокВариантыДокументовДокументыНДС.Параметры.УстановитьЗначениеПараметра("ТекЭлектронныйДокумент", Неопределено);
	СписокВариантыДокументовДокументыНДС.Параметры.УстановитьЗначениеПараметра("ОсновнойЭлектронныйДокумент", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	скEDI_Организации.Ссылка
	|ИЗ
	|	Справочник.скEDI_Организации КАК скEDI_Организации
	|
	|УПОРЯДОЧИТЬ ПО
	|	скEDI_Организации.Основная УБЫВ,
	|	скEDI_Организации.ПометкаУдаления";
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
		Объект.Организация = ВыборкаРезультатаЗапроса.Ссылка;
	КонецЕсли;
	
	ОбменНалоговымиДокументамиСГФС = ПолучитьФлагОбменНалоговымиДокументамиСГФС(Объект.Организация);
	ЕстьЖурналПервичныеДокументы = Истина;
	ЕстьЖурналДокументыНДС = ОбменНалоговымиДокументамиСГФС;
	
	ЗаполнитьНастройкиПриОткрытии();
	
	Если ЕстьЖурналДокументыНДС	Тогда
		Элементы.ГруппаДокументыНДС.Видимость = Истина;
	Иначе
		Элементы.ГруппаДокументыНДС.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбменНалоговымиДокументамиСГФС	Тогда
		Элементы.ГруппаСверкаСЕРНН.Видимость = Истина;
		Элементы.ГруппаДопДокументыДФС.Видимость = Истина;
	Иначе
		Элементы.ГруппаСверкаСЕРНН.Видимость = Ложь;
		Элементы.ГруппаДопДокументыДФС.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьПараметрыСписков();
	УстановитьПараметрыСписковДокументыНДС();
	УстановитьПараметрыСостояниеРасчетовСБюджетомСписокНаСервере();
	
	ОбновитьВидимостьДобавитьУниверсальныйЭлектронныйДокументСервере();
	ОбновитьВидимостьАннулироватьЭлектронныйДокументСервере();
	
	Элементы.ГруппаСообщения.Видимость = Ложь;
	Элементы.ГруппаСообщенияДокументыНДС.Видимость = Ложь;
	
	ОбновитьДанныеСрокДействияЛицензииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьДобавитьУниверсальныйЭлектронныйДокументСервере()
	ЕстьНастройкиДокументСВложениями = ПолучитьНаличиеВидаЭлектронногоДокументаДокументСВложениями(Объект.Организация);
	Если ЕстьНастройкиДокументСВложениями Тогда
		Элементы.СписокДокументовДобавитьУниверсальныйЭлектронныйДокумент.Видимость = Истина;
	Иначе
		Элементы.СписокДокументовДобавитьУниверсальныйЭлектронныйДокумент.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьАннулироватьЭлектронныйДокументСервере()
	ЕстьНастройкиСоглашениеОАнулированииДокумента = ПолучитьНаличиеВидаЭлектронногоСоглашениеОАнулированииДокумента(Объект.Организация);
	Если ЕстьНастройкиСоглашениеОАнулированииДокумента Тогда
		Элементы.СписокДокументовАннулироватьЭлектронныйДокумент.Видимость = Истина;
	Иначе
		Элементы.СписокДокументовАннулироватьЭлектронныйДокумент.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПрименитьНастройкиОтборовНаКлиенте();
	РасчитатьИтогиПоСпискуНаСервере();
	
	ПрименитьНастройкиОтборовДокументыНДСНаКлиенте();
	РасчитатьИтогиПоСпискуДокументыНДСНаСервере();
	
	ПодключитьОбработчикОжидания("ОбновитьДанныеОбработкиДокументовКлиент", 60, Ложь);
	ОбновитьДанныеОбработкиДокументовКлиент();
	
	ПроверитьСоответствиеМинимальнойВерсииEDIПровайдера_Клиент();
	//Если НЕ Отказ Тогда
	//	ПроверитьЗапущенТолстыйКлиент(Отказ);
	//КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.скEDI_ФормаОтображенияНовостей", Новый Структура("ФормаОткрытаИзРабочегоСтолаFlyDoc", Истина));
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаСервере
Функция ПолучитьВидЭлектронногоДокументаПоОрганизации(ВидЭлектронногоДокумента, Организация)
	Если Не ЗначениеЗаполнено(ВидЭлектронногоДокумента) Тогда
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	Иначе
		Если ВидЭлектронногоДокумента.Владелец = Организация Тогда
			Возврат Истина;
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	скEDI_ВидыЭлектронныхДокументов.Ссылка
			               |ИЗ
			               |	Справочник.скEDI_ВидыЭлектронныхДокументов КАК скEDI_ВидыЭлектронныхДокументов
			               |ГДЕ
			               |	скEDI_ВидыЭлектронныхДокументов.Владелец = &Владелец
			               |	И скEDI_ВидыЭлектронныхДокументов.Наименование = &Наименование";
			Запрос.УстановитьПараметр("Владелец", Организация);
			Запрос.УстановитьПараметр("Наименование", ВидЭлектронногоДокумента.Наименование);
			
			ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
			Если ВыборкаРезультатаЗапроса.Следующий() Тогда
				ВидЭлектронногоДокумента = ВыборкаРезультатаЗапроса.Ссылка;
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ПривестиОтборВидЭлектронногоДокументаКОрганизацииНаСервере(ТекОтборВидЭлектронногоДокумента, ТекЖурналРабочегоСтола)
	НовыйСписокДляОтбора = Новый СписокЗначений;
	ЕстьЗаполненоеЗначениеОтбора = Ложь;
	Для Каждого ТекЭлементОтбора из ТекОтборВидЭлектронногоДокумента Цикл
		ТекЗначениеЭлементаОтбора = ТекЭлементОтбора.Значение;
		Если ЗначениеЗаполнено(ТекЗначениеЭлементаОтбора) Тогда
			Если ПолучитьВидЭлектронногоДокументаПоОрганизации(ТекЗначениеЭлементаОтбора, Объект.Организация) Тогда
				НовыйСписокДляОтбора.Добавить(ТекЗначениеЭлементаОтбора);
				ЕстьЗаполненоеЗначениеОтбора = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Не ЕстьЗаполненоеЗначениеОтбора Тогда
		НовыйСписокДляОтбора.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	КонецЕсли;
	ТекОтборВидЭлектронногоДокумента = НовыйСписокДляОтбора;
КонецПроцедуры
	
&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	УстановитьПараметрыСписков();
	УстановитьПараметрыСписковДокументыНДС();
	ПривестиОтборВидЭлектронногоДокументаКОрганизацииНаСервере(ОтборВидЭлектронногоДокумента, ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы"));
	ПривестиОтборВидЭлектронногоДокументаКОрганизацииНаСервере(ОтборВидЭлектронногоДокументаДокументыНДС, ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС"));
	УстановитьПараметрыСостояниеРасчетовСБюджетомСписокНаСервере();
	
	ОбменНалоговымиДокументамиСГФС = ПолучитьФлагОбменНалоговымиДокументамиСГФС(Объект.Организация);
	ЕстьЖурналПервичныеДокументы = Истина;
	ЕстьЖурналДокументыНДС = ОбменНалоговымиДокументамиСГФС;
	Если ЕстьЖурналДокументыНДС	Тогда
		Элементы.ГруппаДокументыНДС.Видимость = Истина;
	Иначе
		Элементы.ГруппаДокументыНДС.Видимость = Ложь;
	КонецЕсли;
	Если ОбменНалоговымиДокументамиСГФС	Тогда
		Элементы.ГруппаСверкаСЕРНН.Видимость = Истина;
		Элементы.ГруппаДопДокументыДФС.Видимость = Истина;
	Иначе
		Элементы.ГруппаСверкаСЕРНН.Видимость = Ложь;
		Элементы.ГруппаДопДокументыДФС.Видимость = Ложь;
	КонецЕсли;
	ЕстьНастройкиДокументСВложениями = ПолучитьНаличиеВидаЭлектронногоДокументаДокументСВложениями(Объект.Организация);
	Если ЕстьНастройкиДокументСВложениями Тогда
		Элементы.СписокДокументовДобавитьУниверсальныйЭлектронныйДокумент.Видимость = Истина;
	Иначе
		Элементы.СписокДокументовДобавитьУниверсальныйЭлектронныйДокумент.Видимость = Ложь;
	КонецЕсли;
	
	ОбновитьВидимостьАннулироватьЭлектронныйДокументСервере();
	
	ОбновитьДанныеСрокДействияЛицензииНаСервере();
	ОбновитьДанныеОбработкиДокументовНаСервере();
	
	ПрименитьНастройкиОтборовСверкаСЕРНННаСервере();
КонецПроцедуры
	
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
	
	ПрименитьНастройкиОтборов("ПриСменеОрганизации");	
	ПрименитьНастройкиОтборовДокументыНДС("ПриСменеОрганизации");	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПриАктивизацииСтроки(Элемент)
	УстановитьДоступностьКнопокКомандСпискаДокументов();
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовДокументыНДСПриАктивизацииСтроки(Элемент)
	УстановитьДоступностьКнопокКомандСпискаДокументовДокументыНДС();
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////////////////////////
// МЕТОДЫ ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КомандаПодписатьИОтправить(Команда)
	ИнициализироватьПодписьИОтправкуЭлектронныхДокументов(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы"), Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОтправитьЭлектронныеДокументы_Переподписать(Команда)
	ИнициализироватьПодписьИОтправкуЭлектронныхДокументов(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы"), Истина, , , , Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодписатьИОтправитьДокументыНДС(Команда)
	ИнициализироватьПодписьИОтправкуЭлектронныхДокументов(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС"), Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодписать(Команда)
	ИнициализироватьПодписьИОтправкуЭлектронныхДокументов(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы"), Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодписатьДокументыНДС(Команда)
	ИнициализироватьПодписьИОтправкуЭлектронныхДокументов(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС"), Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СнятьПодписиСЭлектронногоДокумента(Команда)
	ИнициализироватьСнятиеПодписейПоЭлектроннымДокументам(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы"));
КонецПроцедуры

&НаКлиенте
Процедура СнятьПодписиСЭлектронногоДокументаДокументыНДС(Команда)
	ИнициализироватьСнятиеПодписейПоЭлектроннымДокументам(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС"));
КонецПроцедуры

&НаКлиенте
Процедура КомандаПолучить(Команда)
	// Структура параметров для получения входящих сообщений
	ВыполняемыеОперации = Новый Массив;
	ВыполняемыеОперации.Добавить("ПолучениеВходящихСообщений");
	
	ОшибкаПолученияПодписей = "";
	Подписанты = скEDI_ОбщегоНазначения.ПолучитьПодписантов(ВыполняемыеОперации, Объект.Организация, МассивДанныхПоДокументам, ОшибкаПолученияПодписей);
	Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
		Сообщить(ОшибкаПолученияПодписей);
		Возврат;
	КонецЕсли;
	
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Новый Структура("ВыполняемыеОперации,Организация,Подписанты" , ВыполняемыеОперации, Объект.Организация, Подписанты);
	
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
		
		лФормаНастройкиПараметровПодписиДокументов = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастройкиПодписейЭлектронныхДокументов", лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма);
		лФормаНастройкиПараметровПодписиДокументов.Элементы.ФормаПринятьНастройкиПодписей.Заголовок = НСтр("ru = 'Получить входящие сообщения'; uk = 'Отримати вхідні повідомлення'");
		
		РезультатФормыНастройкиПодписей = лФормаНастройкиПараметровПодписиДокументов.ОткрытьМодально();
		ВходящиеСообщенияПолучены = ПолучитьИОбработатьВходящиеСообщенияПоЭлектроннымДокументамНаСервере(Объект.Организация, РезультатФормыНастройкиПодписей);
		ОбновитьДанныеОбработкиДокументовКлиент();
		
		Если ВходящиеСообщенияПолучены Тогда 																														
			Если ЕстьЖурналПервичныеДокументы Тогда
				ОбновитьПослеВыполненияДействийСЭлектроннымиДокументамиЖурналПервичныеДокументы();
			КонецЕсли;
			Если ЕстьЖурналДокументыНДС Тогда
				ОбновитьПослеВыполненияДействийСЭлектроннымиДокументамиЖурналДокументыНДС();
			КонецЕсли;
			ОбновитьПослеВыполненияДействийСДополнительнымиЭлектроннымиДокументамиДФС();
		КонецЕсли;	
		
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастройкиПараметровПодписиДокументов(лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма
		,"ПродолжитьПолучениеВходящихСообщений");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПолучениеВходящихСообщений(ПараметрыОпераций, ДополнительныеПараметрыОпераций = Неопределено) Экспорт
	
	Если ПараметрыОпераций <> Неопределено Тогда
		
		ВходящиеСообщенияПолучены = ПолучитьИОбработатьВходящиеСообщенияПоЭлектроннымДокументамНаСервере(Объект.Организация, ПараметрыОпераций);
		
		Если ВходящиеСообщенияПолучены Тогда
			Если ЕстьЖурналПервичныеДокументы Тогда
				ОбновитьПослеВыполненияДействийСЭлектроннымиДокументамиЖурналПервичныеДокументы();
			КонецЕсли;
			Если ЕстьЖурналДокументыНДС Тогда
				ОбновитьПослеВыполненияДействийСЭлектроннымиДокументамиЖурналДокументыНДС();
			КонецЕсли;
			ОбновитьПослеВыполненияДействийСДополнительнымиЭлектроннымиДокументамиДФС();
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьДанныеОбработкиДокументовКлиент();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИОбработатьВходящиеСообщенияПоЭлектроннымДокументамНаСервере(Организация, РезультатФормыНастройкиПодписей)
	ВходящиеСообщенияПолучены = скEDI_ОбщегоНазначения.ПолучитьИОбработатьВходящиеСообщенияПоЭлектроннымДокументам(Организация
		, ЭтаФорма
		, РезультатФормыНастройкиПодписей);
	Возврат ВходящиеСообщенияПолучены;
КонецФункции

&НаСервере
Процедура СоздатьДокументы1СНаСервере(лМассивДанныхДокументов, КлючОбработанойЗаписи)
	скEDI_ОбщегоНазначения.СоздатьДокументы1С(лМассивДанныхДокументов, КлючОбработанойЗаписи);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы1С(Команда)
	СоздатьДокументы1СПоЖурналу(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы1СДокументыНДС(Команда)
	СоздатьДокументы1СПоЖурналу(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы1СПоЖурналу(ЖурналРабочегоСтола)
	ЭлементыСписокДокументов = Неопределено;
	Если ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументов;
	ИначеЕсли ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументовДокументыНДС;
	Иначе
		Возврат;
	КонецЕсли;
	
	лМассивДанныхДокументов = Новый Массив;
	Для Каждого лВыделенаяСтрока Из ЭлементыСписокДокументов.ВыделенныеСтроки Цикл
		лДанныеВыделенойСтроки = ЭлементыСписокДокументов.ДанныеСтроки(лВыделенаяСтрока);
		
		лСтруктураДанныхДокумента = Новый Структура("Документ1С, ЭлектронныйДокумент");
		ЗаполнитьЗначенияСвойств(лСтруктураДанныхДокумента, лДанныеВыделенойСтроки);
		лМассивДанныхДокументов.Добавить(лСтруктураДанныхДокумента);
	КонецЦикла;
	КлючОбработанойЗаписи = Неопределено;
	СоздатьДокументы1СНаСервере(лМассивДанныхДокументов, КлючОбработанойЗаписи);
	
	Если ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы") Тогда
		ОбновитьПослеВыполненияДействийСЭлектроннымиДокументамиЖурналПервичныеДокументы(КлючОбработанойЗаписи);
	ИначеЕсли ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС") Тогда
		ОбновитьПослеВыполненияДействийСЭлектроннымиДокументамиЖурналДокументыНДС(КлючОбработанойЗаписи);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПровестиДокументы1СНаСервере(лМассивДанныхДокументов)
	скEDI_ОбщегоНазначения.ПровестиДокументы1С(лМассивДанныхДокументов);
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокументы1С(Команда)
	ПровестиДокументы1СПоЖурналу(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы"));
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокументы1СДокументыНДС(Команда)
	ПровестиДокументы1СПоЖурналу(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС"));
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокументы1СПоЖурналу(ЖурналРабочегоСтола)
	ЭлементыСписокДокументов = Неопределено;
	Если ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументов;
	ИначеЕсли ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументовДокументыНДС;
	Иначе
		Возврат;
	КонецЕсли;
	
	лМассивДанныхДокументов = Новый Массив;
	Для Каждого лВыделенаяСтрока Из ЭлементыСписокДокументов.ВыделенныеСтроки Цикл
		
		лДанныеВыделенойСтроки = ЭлементыСписокДокументов.ДанныеСтроки(лВыделенаяСтрока);
		
		лСтруктураДанныхДокумента = Новый Структура("Документ1С, ЭлектронныйДокумент");
		ЗаполнитьЗначенияСвойств(лСтруктураДанныхДокумента, лДанныеВыделенойСтроки);
		лМассивДанныхДокументов.Добавить(лСтруктураДанныхДокумента);
		
	КонецЦикла;
	
	ПровестиДокументы1СНаСервере(лМассивДанныхДокументов);
	
	Если ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы") Тогда
		ОбновитьПослеВыполненияДействийСЭлектроннымиДокументамиЖурналПервичныеДокументы();
	ИначеЕсли ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС") Тогда
		ОбновитьПослеВыполненияДействийСЭлектроннымиДокументамиЖурналДокументыНДС();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьИОтправитьОтветНаВходящийЭлектронныйДокумент(Команда)
	ИнициализироватьПодтверждениеИОтправкуОтветаНаЭлектронныйДокумент(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы"));
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьИОтправитьОтветНаВходящийЭлектронныйДокументДокументыНДС(Команда)
	ИнициализироватьПодтверждениеИОтправкуОтветаНаЭлектронныйДокумент(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС"));
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьВходящийЭлектронныйДокумент(Команда)
	ИнициализироватьОтклонениеЭлектронногоДокумента(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы"));
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьВходящийЭлектронныйДокументДокументыНДС(Команда)
	ИнициализироватьОтклонениеЭлектронногоДокумента(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС"));
КонецПроцедуры

&НаКлиенте
Процедура ОтозватьЭлектронныйДокумент(Команда)
	ИнициализироватьОтзывЭлектронногоДокумента(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы"));
КонецПроцедуры

&НаКлиенте
Процедура ОтозватьЭлектронныйДокументДокументыНДС(Команда)
	ИнициализироватьОтзывЭлектронногоДокумента(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС"));
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПовторно(Команда)
	ИнициализироватьПовторнуюОтправкуЭлектронныхДокументовКвитанций(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы"));
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПовторноДокументыНДС(Команда)
	ИнициализироватьПовторнуюОтправкуЭлектронныхДокументовКвитанций(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС"));
КонецПроцедуры

&НаСервере
Процедура УстановитьСнятьОтметкуОбработаноНаСервере(лМассивДанныхДокументов, Обработано)
	скEDI_ОбщегоНазначения.УстановитьСнятьОтметкуОбработаноПоМассивуДокументов(лМассивДанныхДокументов, Обработано);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметкуОбработано(Команда)
	УстановитьОтметкуОбработаноПоЖурналу(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы"));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметкуОбработаноДокументыНДС(Команда)
	УстановитьОтметкуОбработаноПоЖурналу(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС"));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметкуОбработаноПоЖурналу(ЖурналРабочегоСтола)
	ЭлементыСписокДокументов = Неопределено;
	Если ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументов;
	ИначеЕсли ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументовДокументыНДС;
	Иначе
		Возврат;
	КонецЕсли;
	
	лМассивДанныхДокументов = Новый Массив;
	Для Каждого лВыделенаяСтрока Из ЭлементыСписокДокументов.ВыделенныеСтроки Цикл
		
		лДанныеВыделенойСтроки = ЭлементыСписокДокументов.ДанныеСтроки(лВыделенаяСтрока);
		
		лСтруктураДанныхДокумента = Новый Структура("Документ1С, ЭлектронныйДокумент");
		ЗаполнитьЗначенияСвойств(лСтруктураДанныхДокумента, лДанныеВыделенойСтроки);
		лМассивДанныхДокументов.Добавить(лСтруктураДанныхДокумента);
		
	КонецЦикла;
	
	УстановитьСнятьОтметкуОбработаноНаСервере(лМассивДанныхДокументов, Истина);
	
	Если ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы") Тогда
		ОбновитьПослеВыполненияДействийСЭлектроннымиДокументамиЖурналПервичныеДокументы();
	ИначеЕсли ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС") Тогда
		ОбновитьПослеВыполненияДействийСЭлектроннымиДокументамиЖурналДокументыНДС();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуОбработано(Команда)
	СнятьОтметкуОбработаноПоЖурналу(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы"));
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуОбработаноДокументыНДС(Команда)
	СнятьОтметкуОбработаноПоЖурналу(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС"));
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуОбработаноПоЖурналу(ЖурналРабочегоСтола)
	ЭлементыСписокДокументов = Неопределено;
	Если ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументов;
	ИначеЕсли ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументовДокументыНДС;
	Иначе
		Возврат;
	КонецЕсли;
	
	лМассивДанныхДокументов = Новый Массив;
	Для Каждого лВыделенаяСтрока Из ЭлементыСписокДокументов.ВыделенныеСтроки Цикл
		
		лДанныеВыделенойСтроки = ЭлементыСписокДокументов.ДанныеСтроки(лВыделенаяСтрока);
		
		лСтруктураДанныхДокумента = Новый Структура("Документ1С, ЭлектронныйДокумент");
		ЗаполнитьЗначенияСвойств(лСтруктураДанныхДокумента, лДанныеВыделенойСтроки);
		лМассивДанныхДокументов.Добавить(лСтруктураДанныхДокумента);
		
	КонецЦикла;
	
	УстановитьСнятьОтметкуОбработаноНаСервере(лМассивДанныхДокументов, Ложь);
	
	Если ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы") Тогда
		ОбновитьПослеВыполненияДействийСЭлектроннымиДокументамиЖурналПервичныеДокументы();
	ИначеЕсли ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС") Тогда
		ОбновитьПослеВыполненияДействийСЭлектроннымиДокументамиЖурналДокументыНДС();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокумент1С(Команда)
	
	Если Элементы.СписокДокументов.ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Элементы.СписокДокументов.ТекущиеДанные.Документ1С) Тогда
			
			Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
				ОткрытьЗначение(Элементы.СписокДокументов.ТекущиеДанные.Документ1С);
			Иначе
				скEDI_ОткрытиеФормБезМодальности.ПоказатьДокумент1С(Элементы.СписокДокументов.ТекущиеДанные.Документ1С);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокумент1СДокументыНДС(Команда)
	
	Если Элементы.СписокДокументовДокументыНДС.ТекущиеДанные <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Элементы.СписокДокументовДокументыНДС.ТекущиеДанные.Документ1С) Тогда
			
			Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
				ОткрытьЗначение(Элементы.СписокДокументовДокументыНДС.ТекущиеДанные.Документ1С);
			Иначе
				скEDI_ОткрытиеФормБезМодальности.ПоказатьДокумент1С(Элементы.СписокДокументовДокументыНДС.ТекущиеДанные.Документ1С);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭлектронныйДокумент(Команда)
	лТекущиеДанныеСпискаДокументов = Элементы.СписокДокументов.ТекущиеДанные;
	Если лТекущиеДанныеСпискаДокументов <> Неопределено Тогда
		Если ЗначениеЗаполнено(лТекущиеДанныеСпискаДокументов.ЭлектронныйДокумент) Тогда
			лПараметрыФормыОтображенияЭлектронногоДокумента = Новый Структура("ЭлектронныйДокумент", лТекущиеДанныеСпискаДокументов.ЭлектронныйДокумент);
		Иначе
			лПараметрыФормыОтображенияЭлектронногоДокумента = Новый Структура;
			лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("Документ1С", лТекущиеДанныеСпискаДокументов.Документ1С);
			лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("Организация", Объект.Организация);
			лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("ВидЭлектронногоДокумента", лТекущиеДанныеСпискаДокументов.ВидЭлектронногоДокумента);
		КонецЕсли;
		КлючУникальностиФормыОтображениеЭлектронныхДокументов = скEDI_ОбщегоНазначения.ПолучитьКлючУникальностиФормыОтображениеЭлектронныхДокументов(лПараметрыФормыОтображенияЭлектронногоДокумента);
		ОткрытьФорму("ОбщаяФорма.скEDI_ОтображениеЭлектронныхДокументов", лПараметрыФормыОтображенияЭлектронногоДокумента, ЭтаФорма, КлючУникальностиФормыОтображениеЭлектронныхДокументов);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭлектронныйДокументДокументыНДС(Команда)
	лТекущиеДанныеСпискаДокументов = Элементы.СписокДокументовДокументыНДС.ТекущиеДанные;
	Если лТекущиеДанныеСпискаДокументов <> Неопределено Тогда
		Если ЗначениеЗаполнено(лТекущиеДанныеСпискаДокументов.ЭлектронныйДокумент) Тогда
			лПараметрыФормыОтображенияЭлектронногоДокумента = Новый Структура("ЭлектронныйДокумент", лТекущиеДанныеСпискаДокументов.ЭлектронныйДокумент);
		Иначе
			лПараметрыФормыОтображенияЭлектронногоДокумента = Новый Структура;
			лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("Документ1С", лТекущиеДанныеСпискаДокументов.Документ1С);
			лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("Организация", Объект.Организация);
			лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("ВидЭлектронногоДокумента", лТекущиеДанныеСпискаДокументов.ВидЭлектронногоДокумента);
		КонецЕсли;
		КлючУникальностиФормыОтображениеЭлектронныхДокументов = скEDI_ОбщегоНазначения.ПолучитьКлючУникальностиФормыОтображениеЭлектронныхДокументов(лПараметрыФормыОтображенияЭлектронногоДокумента);
		ОткрытьФорму("ОбщаяФорма.скEDI_ОтображениеЭлектронныхДокументов", лПараметрыФормыОтображенияЭлектронногоДокумента, ЭтаФорма, КлючУникальностиФормыОтображениеЭлектронныхДокументов);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьЭлектронныйДокумент(Команда)
 	лТекущиеДанныеСпискаДокументов = Элементы.СписокДокументов.ТекущиеДанные;
	Если лТекущиеДанныеСпискаДокументов <> Неопределено Тогда
		Если ЗначениеЗаполнено(лТекущиеДанныеСпискаДокументов.ЭлектронныйДокумент) Тогда
			лПараметрыФормыОтображенияЭлектронногоДокумента = скEDI_ОбщегоНазначения.ПолучитьПараметрыФормыОтображенияДляСоглашенияОбАннулировании(лТекущиеДанныеСпискаДокументов.ЭлектронныйДокумент, Объект.Организация);
			КлючУникальностиФормыОтображениеЭлектронныхДокументов = скEDI_ОбщегоНазначения.ПолучитьКлючУникальностиФормыОтображениеЭлектронныхДокументов(лПараметрыФормыОтображенияЭлектронногоДокумента);
			ОткрытьФорму("ОбщаяФорма.скEDI_ОтображениеЭлектронныхДокументов", лПараметрыФормыОтображенияЭлектронногоДокумента, ЭтаФорма, КлючУникальностиФормыОтображениеЭлектронныхДокументов);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьЭлектронныйДокумент(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовДокументыНДСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьЭлектронныйДокументДокументыНДС(Неопределено);
КонецПроцедуры

&НаСервере
Процедура ВосстановитьЗначениеОтбора(ТекущийОтбор, СохраненныйОтбор)
	
	Для Каждого ЭлементОтбора Из СохраненныйОтбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			НовыйЭлементОтбора = ТекущийОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НовыйЭлементОтбора = ТекущийОтбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
			ВосстановитьЗначениеОтбора(НовыйЭлементОтбора, ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ДополнитьПредопределеннуюНастройкуОтборамиПоУмолчанию() 
	
	ЭлементОтбора = СписокДокументов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭлектронныйДокумент.Номер");
	ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбора.Использование = Ложь;
	
	ЭлементОтбора = СписокДокументов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СоответствиеДокументов");
	ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Ложь;
	
	ЭлементОтбора = СписокДокументов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВхИсх");
	СписокВхИсх = Новый СписокЗначений;
	СписокВхИсх.Добавить(Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Входящий);
	СписокВхИсх.Добавить(Перечисления.скEDI_ВхИсхЭлектронныйДокумент.Исходящий);
	ЭлементОтбора.ПравоеЗначение= СписокВхИсх;
	ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование = Ложь;
	
	ЭлементОтбора = СписокДокументов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидЭлектронногоДокумента");
	ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Ложь;
	
	ЭлементОтбора = СписокДокументов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоследняяОперация");
	ЭлементОтбора.ПравоеЗначение= Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоМесяца);
	ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.Использование = Ложь;
	
	ЭлементОтбора = СписокДокументов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент");
	ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Ложь;
	
	ЭлементОтбора = СписокДокументов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЕДРПОУКонтрагента");
	ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбора.Использование = Ложь;
	
	ЭлементОтбора = СписокДокументов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФилиалКонтрагента");
	ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиОтбораПоУмолчаниюНаСервере()
	КонтрагентДляОтбора = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	
	ОтборКод = "";
	
	ОтборНомер = "";
	ОтборНомерУсловие = ПредопределенноеЗначение("Перечисление.скEDI_УсловияОтбораСтрока.Содержит");
	
	ОтборВхИсх.Очистить();
	ОтборВхИсх.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	
	ОтборВидЭлектронногоДокумента.Очистить();
	ОтборВидЭлектронногоДокумента.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	
	ОтборСоответствияДокументов.Очистить();
	ОтборСоответствияДокументов.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	
	ОтборСостояние.Очистить();
	ОтборСостояние.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	
	ОтборНеСоответствияДокументов.Очистить();
	ОтборНеСоответствияДокументов.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	
	ОтборТолькоТребующиеОбработки = Ложь;
	ОтборОтображатьВсеВариантыДокументов = Ложь;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиОтбораПоУмолчаниюДокументыНДСНаСервере()
	КонтрагентДляОтбораДокументыНДС = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	
	ОтборКодДокументыНДС = "";
	
	ОтборНомерДокументыНДС = "";
	ОтборНомерУсловиеДокументыНДС = ПредопределенноеЗначение("Перечисление.скEDI_УсловияОтбораСтрока.Содержит");
	
	ОтборВхИсхДокументыНДС.Очистить();
	ОтборВхИсхДокументыНДС.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	
	ОтборВидЭлектронногоДокументаДокументыНДС.Очистить();
	ОтборВидЭлектронногоДокументаДокументыНДС.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	
	ОтборСоответствияДокументовДокументыНДС.Очистить();
	ОтборСоответствияДокументовДокументыНДС.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	
	ОтборСостояниеДокументыНДС.Очистить();
	ОтборСостояниеДокументыНДС.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	
	ОтборСостояниеРегистрацияВДФСДокументыНДС.Очистить();
	ОтборСостояниеРегистрацияВДФСДокументыНДС.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	
	ОтборНеСоответствияДокументовДокументыНДС.Очистить();
	ОтборНеСоответствияДокументовДокументыНДС.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	
	ОтборТолькоТребующиеОбработкиДокументыНДС = Ложь;
	ОтборОтображатьВсеВариантыДокументовДокументыНДС = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНастройкиОтбораПоУмолчаниюНаКлиенте()
	КонтрагентДляОтбора = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	
	ОтборКод = "";
	
	ОтборНомер = "";
	ОтборНомерУсловие = ПредопределенноеЗначение("Перечисление.скEDI_УсловияОтбораСтрока.Содержит");
	
	ОтборВхИсх.Очистить();
	ОтборВхИсх.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	
	ОтборВидЭлектронногоДокумента.Очистить();
	ОтборВидЭлектронногоДокумента.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	
	ОтборСоответствияДокументов.Очистить();
	ОтборСоответствияДокументов.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	
	ОтборСостояние.Очистить();
	ОтборСостояние.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	
	ОтборНеСоответствияДокументов.Очистить();
	ОтборНеСоответствияДокументов.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	
	ОтборТолькоТребующиеОбработки = Ложь;
	ОтборОтображатьВсеВариантыДокументов = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНастройкиОтбораПоУмолчаниюДокументыНДСНаКлиенте()
	КонтрагентДляОтбораДокументыНДС = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	
	ОтборКодДокументыНДС = "";
	
	ОтборНомерДокументыНДС = "";
	ОтборНомерУсловиеДокументыНДС = ПредопределенноеЗначение("Перечисление.скEDI_УсловияОтбораСтрока.Содержит");
	
	ОтборВхИсхДокументыНДС.Очистить();
	ОтборВхИсхДокументыНДС.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	
	ОтборВидЭлектронногоДокументаДокументыНДС.Очистить();
	ОтборВидЭлектронногоДокументаДокументыНДС.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	
	ОтборСоответствияДокументовДокументыНДС.Очистить();
	ОтборСоответствияДокументовДокументыНДС.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	
	ОтборСостояниеДокументыНДС.Очистить();
	ОтборСостояниеДокументыНДС.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	
	ОтборСостояниеРегистрацияВДФСДокументыНДС.Очистить();
	ОтборСостояниеРегистрацияВДФСДокументыНДС.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	
	ОтборНеСоответствияДокументовДокументыНДС.Очистить();
	ОтборНеСоответствияДокументовДокументыНДС.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	
	ОтборТолькоТребующиеОбработкиДокументыНДС = Ложь;
	ОтборОтображатьВсеВариантыДокументовДокументыНДС = Ложь;
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкиОтборовЖурналРабочегоСтола(ВыборкаНастроек, ЖурналРабочегоСтола, Р_СписокДокументов, Р_ФильтрПериод, Р_ОтборКод, Р_ОтборНомер, Р_ОтборНомерУсловие, Р_КонтрагентДляОтбора, Р_ОтборВидЭлектронногоДокумента, Р_ОтборВхИсх, Р_ОтборСостояние, Р_ОтборСостояниеРегистрацияВДФС, Р_ОтборСоответствияДокументов, Р_ОтборТолькоТребующиеОбработки, Р_ОтборОтображатьВсеВариантыДокументов, Р_ОтборНеСоответствияДокументов)
	НастройкаУсловийОтбора = Неопределено;
	НастройкаРабочегоСтола = Неопределено;
	ФильтрПериодНастроен = Ложь;
	
	ВыборкаНастроек.Сбросить();
	Пока ВыборкаНастроек.Следующий() Цикл
		Если ВыборкаНастроек.ЖурналРабочегоСтола = ЖурналРабочегоСтола Тогда
			Вариант = ВыборкаНастроек.ФильтрДатаВариант.Получить();
			Если ТипЗнч(Вариант) = Тип("ВариантСтандартногоПериода") Тогда
				Р_ФильтрПериод.Вариант = Вариант;
				Если ФильтрПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
					Р_ФильтрПериод.ДатаНачала 	= ВыборкаНастроек.ФильтрДатаНачала;
					Р_ФильтрПериод.ДатаОкончания  = ВыборкаНастроек.ФильтрДатаОкончания;
				КонецЕсли;
			Иначе
				Р_ФильтрПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
				Р_ФильтрПериод.ДатаНачала 	= ВыборкаНастроек.ФильтрДатаНачала;
				Р_ФильтрПериод.ДатаОкончания  = ВыборкаНастроек.ФильтрДатаОкончания;
			КонецЕсли;
			НастройкаУсловийОтбора = ВыборкаНастроек.НастройкаУсловийОтбора.Получить();
			НастройкаРабочегоСтола = ВыборкаНастроек.НастройкаРабочегоСтола.Получить();
			ФильтрПериодНастроен = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если не ФильтрПериодНастроен Тогда
		Р_ФильтрПериод.Вариант = ВариантСтандартногоПериода.Месяц;
	КонецЕсли;
	
	Если ТипЗнч(НастройкаРабочегоСтола) = Тип("ТаблицаЗначений") Тогда
		УстановитьПорядокКолонокРабочегоСтола(НастройкаРабочегоСтола);
	КонецЕсли;

	Если ТипЗнч(НастройкаУсловийОтбора) = Тип("СписокЗначений") Тогда
		Для Каждого СтрокаУсловийОтбора Из НастройкаУсловийОтбора Цикл
			ЭлементУсловияОтбора = СтрокаУсловийОтбора.Значение;
			ДобавитьЭлементУсловияОтбора(Р_СписокДокументов.Отбор.Элементы, ЭлементУсловияОтбора);
			Если ЭлементУсловияОтбора.ТипЭлемента = "СтандартнаяНастройкаОтборовФлайДок" Тогда
				Если ЭлементУсловияОтбора.ИмяНастройки = "Код" Тогда
					Р_ОтборКод = ЭлементУсловияОтбора.Значение;
				ИначеЕсли ЭлементУсловияОтбора.ИмяНастройки = "Номер" Тогда
					Р_ОтборНомер = ЭлементУсловияОтбора.Значение;
				ИначеЕсли ЭлементУсловияОтбора.ИмяНастройки = "НомерУсловие" Тогда
					Р_ОтборНомерУсловие = ЭлементУсловияОтбора.Значение;
				ИначеЕсли ЭлементУсловияОтбора.ИмяНастройки = "Контрагент" Тогда
					Р_КонтрагентДляОтбора = ЭлементУсловияОтбора.Значение;
				ИначеЕсли ЭлементУсловияОтбора.ИмяНастройки = "ВидЭлектронногоДокумента" Тогда
					Р_ОтборВидЭлектронногоДокумента = ЭлементУсловияОтбора.Значение;
					ПривестиОтборВидЭлектронногоДокументаКОрганизацииНаСервере(Р_ОтборВидЭлектронногоДокумента, ЖурналРабочегоСтола);
				ИначеЕсли ЭлементУсловияОтбора.ИмяНастройки = "ВхИсх" Тогда
					Р_ОтборВхИсх = ЭлементУсловияОтбора.Значение;
				ИначеЕсли ЭлементУсловияОтбора.ИмяНастройки = "Состояние" Тогда
					Р_ОтборСостояние = ЭлементУсловияОтбора.Значение;
				ИначеЕсли ЭлементУсловияОтбора.ИмяНастройки = "СостояниеРегистрацияВДФС" Тогда
					Р_ОтборСостояниеРегистрацияВДФС = ЭлементУсловияОтбора.Значение;
				ИначеЕсли ЭлементУсловияОтбора.ИмяНастройки = "СоответствиеДокументов" Тогда
					Р_ОтборСоответствияДокументов = ЭлементУсловияОтбора.Значение;
				ИначеЕсли ЭлементУсловияОтбора.ИмяНастройки = "ТолькоТребующиеОбработки" Тогда
					Р_ОтборТолькоТребующиеОбработки = ЭлементУсловияОтбора.Значение;
				ИначеЕсли ЭлементУсловияОтбора.ИмяНастройки = "ОтображатьВсеВариантыДокументов" Тогда
					Р_ОтборОтображатьВсеВариантыДокументов = ЭлементУсловияОтбора.Значение;
				ИначеЕсли ЭлементУсловияОтбора.ИмяНастройки = "НеСоответствияДокументов" Тогда
					Р_ОтборНеСоответствияДокументов = ЭлементУсловияОтбора.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ФильтрПериодСверкаСЕРНН.Вариант = ВариантСтандартногоПериода.Месяц;
	
	СостояниеРасчетовСБюджетомГод = Год(ТекущаяДата());
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиПриОткрытии()
	ЗаполнитьНастройкиОтбораПоУмолчаниюНаСервере();
	ЗаполнитьНастройкиОтбораПоУмолчаниюДокументыНДСНаСервере();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	скEDI_РабочийСтол_НастройкиПользователейПоУмолчанию.ЖурналРабочегоСтола КАК ЖурналРабочегоСтола,
	|	скEDI_РабочийСтол_НастройкиПользователейПоУмолчанию.ФильтрДатаВариант КАК ФильтрДатаВариант,
	|	скEDI_РабочийСтол_НастройкиПользователейПоУмолчанию.ФильтрДатаНачала КАК ФильтрДатаНачала,
	|	скEDI_РабочийСтол_НастройкиПользователейПоУмолчанию.ФильтрДатаОкончания КАК ФильтрДатаОкончания,
	|	скEDI_РабочийСтол_НастройкиПользователейПоУмолчанию.НастройкаУсловийОтбора КАК НастройкаУсловийОтбора,
	|	скEDI_РабочийСтол_НастройкиПользователейПоУмолчанию.НастройкаРабочегоСтола КАК НастройкаРабочегоСтола
	|ИЗ
	|	РегистрСведений.скEDI_РабочийСтол_НастройкиПользователейПоУмолчанию КАК скEDI_РабочийСтол_НастройкиПользователейПоУмолчанию
	|ГДЕ
	|	скEDI_РабочийСтол_НастройкиПользователейПоУмолчанию.Пользователь = &ТекПользователь";
	
	Запрос.УстановитьПараметр("ТекПользователь", скEDI_НастройкиПодКонфигурацию.ПолучитьТекущегоПользователя());
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПрименитьНастройкиОтборовЖурналРабочегоСтола(Выборка, ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы"), СписокДокументов, ФильтрПериод, ОтборКод, ОтборНомер, ОтборНомерУсловие, КонтрагентДляОтбора, ОтборВидЭлектронногоДокумента, ОтборВхИсх, ОтборСостояние, Неопределено, ОтборСоответствияДокументов, ОтборТолькоТребующиеОбработки, ОтборОтображатьВсеВариантыДокументов, ОтборНеСоответствияДокументов);
	ПрименитьНастройкиОтборовЖурналРабочегоСтола(Выборка, ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС"), СписокДокументовДокументыНДС, ФильтрПериодДокументыНДС, ОтборКодДокументыНДС, ОтборНомерДокументыНДС, ОтборНомерУсловиеДокументыНДС, КонтрагентДляОтбораДокументыНДС, ОтборВидЭлектронногоДокументаДокументыНДС, ОтборВхИсхДокументыНДС, ОтборСостояниеДокументыНДС, ОтборСостояниеРегистрацияВДФСДокументыНДС, ОтборСоответствияДокументовДокументыНДС, ОтборТолькоТребующиеОбработкиДокументыНДС, ОтборОтображатьВсеВариантыДокументовДокументыНДС, ОтборНеСоответствияДокументовДокументыНДС);
	
	ФильтрПериодСверкаСЕРНН.Вариант = ВариантСтандартногоПериода.Месяц;
	СостояниеРасчетовСБюджетомГод = Год(ТекущаяДата());
КонецПроцедуры	

&НаСервере
Процедура ДобавитьЭлементУсловияОтбора(ЭлементыОтбора, ЭлементУсловияОтбора)
	Если ТипЗнч(ЭлементУсловияОтбора) = Тип("Структура") Тогда
		Если ЭлементУсловияОтбора.ТипЭлемента = "ГруппаЭлементовОтбораКомпоновкиДанных" Тогда
			ТекГруппаОтбора = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ТекГруппаОтбора.ПредставлениеПользовательскойНастройки = ЭлементУсловияОтбора.ПредставлениеПользовательскойНастройки;
			ТекГруппаОтбора.ТипГруппы = ЭлементУсловияОтбора.ТипГруппы;
			Для Каждого ЭлементГруппыУсловияОтбора из ЭлементУсловияОтбора.СписокПодчиненныхЭлементов Цикл
				ДобавитьЭлементУсловияОтбора(ТекГруппаОтбора.Элементы, ЭлементГруппыУсловияОтбора.Значение);
			КонецЦикла;
			ТекГруппаОтбора.Использование = ЭлементУсловияОтбора.Использование;
		ИначеЕсли ЭлементУсловияОтбора.ТипЭлемента = "ЭлементОтбораКомпоновкиДанных" Тогда
			ТекЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ТекЭлементОтбора.ПредставлениеПользовательскойНастройки = ЭлементУсловияОтбора.ПредставлениеПользовательскойНастройки;
			
			Если ЭлементУсловияОтбора.ЛевоеЗначениеТип = "ПолеКомпоновкиДанных" Тогда
				ТекЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЭлементУсловияОтбора.ЛевоеЗначение);
			ИначеЕсли ЭлементУсловияОтбора.ЛевоеЗначениеТип = "СписокЗначений" Тогда
				ТекЭлементОтбора.ЛевоеЗначение = ЭлементУсловияОтбора.ЛевоеЗначение;
			ИначеЕсли ЭлементУсловияОтбора.ЛевоеЗначениеТип = "Значение" Тогда
				ТекЭлементОтбора.ЛевоеЗначение = ЭлементУсловияОтбора.ЛевоеЗначение;
			КонецЕсли;
			ТекЭлементОтбора.ВидСравнения = ЭлементУсловияОтбора.ВидСравнения;
			Если ЭлементУсловияОтбора.ПравоеЗначениеТип = "ПолеКомпоновкиДанных" Тогда
				ТекЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ЭлементУсловияОтбора.ПравоеЗначение);
			ИначеЕсли ЭлементУсловияОтбора.ПравоеЗначениеТип = "СписокЗначений" Тогда
				ТекЭлементОтбора.ПравоеЗначение = ЭлементУсловияОтбора.ПравоеЗначение;
			ИначеЕсли ЭлементУсловияОтбора.ПравоеЗначениеТип = "Значение" Тогда
				ТекЭлементОтбора.ПравоеЗначение = ЭлементУсловияОтбора.ПравоеЗначение;
			КонецЕсли;
			ТекЭлементОтбора.Использование = ЭлементУсловияОтбора.Использование;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
	
&НаКлиенте
Процедура СписокЭлементовПометкаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.СписокЭлементов.ТекущиеДанные;
	
	НайденныйЭлемент = Элементы.Найти(ТекСтрока.Значение);
	Если НайденныйЭлемент <> Неопределено Тогда
		НайденныйЭлемент.Видимость = ТекСтрока.Пометка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаНаличиеОбновлений(Отказ)		
	
	НомерТекущейВерсии = Константы.скEDI_НомерВерсии.Получить();
	МакетИнформацияОВерсиях = ПолучитьОбщийМакет("скEDI_ИнформацияОВерсиях");
	ОбластьПоследняяВерсия  = МакетИнформацияОВерсиях.ПолучитьОбласть("НомерВерсии");
	НомерПоследнейВерсии    = ОбластьПоследняяВерсия.ТекущаяОбласть.Текст;
	
	Если НомерТекущейВерсии = "" Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ПомощникНачальногоЗаполнения;
		Элементы.ПродолжитьУстановку.КнопкаПоУмолчанию = Истина;
	ИначеЕсли НомерТекущейВерсии <> НомерПоследнейВерсии Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ПомощникОбновление;
		Элементы.ПродолжитьОбновление.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьУстановкуСервер(ЗакрытьФорму, ВыполненоУстановку)
	
	Если ОбновлениеЛегально = 2 Тогда 
		Сообщить(НСтр("ru = 'Установка не выполнена'; uk = 'Встановлення не виконано'"));
		ЗакрытьФорму = Истина;
		Возврат;
	КонецЕсли;
	
	МакетИнформацияОВерсиях = ПолучитьОбщийМакет("скEDI_ИнформацияОВерсиях");
	ОбластьПоследняяВерсия  = МакетИнформацияОВерсиях.ПолучитьОбласть("НомерВерсии");
	НомерПоследнейВерсии    = ОбластьПоследняяВерсия.ТекущаяОбласть.Текст;
	
	Константы.скEDI_ИспользованиеПодсистемы.Установить(Истина);
	Константы.скEDI_СерверEDIПровайдера.Установить("localhost");
	Константы.скEDI_ПортEDIПровайдера.Установить("9080");
	скEDI_Сервис.ЗарегистрироватьПечатнуюФорму_Сервер();	
	Константы.скEDI_НомерВерсии.Установить(НомерПоследнейВерсии);	
	скEDI_Сервис.ЗаполнитьНастройкуОтображенияЭлектронныхДокументов_Релиз_1_1_2_3();
	
	ВыполненоУстановку = Истина;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбновлениеСервер(ЗакрытьФорму, ИнформацияОбОбновлениях, ВыполненоОбновление)
	
	Если ОбновлениеЛегально = 2 Тогда 
		Сообщить(НСтр("ru = 'Обновление не выполнено'; uk = 'Оновлення не виконано'"));
		ЗакрытьФорму = Истина;
		Возврат;
	КонецЕсли;
	
	ИнформацияОбОбновлениях = Новый ТабличныйДокумент;
	
	Если НомерТекущейВерсии = "1.0.2.6" Тогда
		НомерТекущейВерсии = "1.0.3.4";
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.0.2.6 на версию 1.0.3.4';uk='оновлення інформаційної бази з версії 1.0.2.6 на версію 1.0.3.4'"));
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.0.3.4" Тогда
		НомерТекущейВерсии = "1.0.4.3";
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.0.3.4 на версию 1.0.4.3';uk='оновлення інформаційної бази з версії 1.0.3.4 на версію 1.0.4.3'"));
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.0.4.3" Тогда
		НомерТекущейВерсии = "1.0.4.4";
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.0.4.3 на версию 1.0.4.4';uk='оновлення інформаційної бази з версії 1.0.4.3 на версію 1.0.4.4'"));
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.0.4.4" Тогда
		НомерТекущейВерсии = "1.1.1.6";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.0.4.4 на версию 1.1.1.6';uk='оновлення інформаційної бази з версії 1.0.4.4 на версію 1.1.1.6'"));
		скEDI_Сервис.СконвертироватьНастройкиШаблоновТабличнаяЧастьВРегистрСведений();
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.1.6" Тогда
		НомерТекущейВерсии = "1.1.1.7";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.1.6 на версию 1.1.1.7';uk='оновлення інформаційної бази з версії 1.1.1.6 на версію 1.1.1.7'"));
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.1.7" Тогда
		НомерТекущейВерсии = "1.1.1.8";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.1.7 на версию 1.1.1.8';uk='оновлення інформаційної бази з версії 1.1.1.7 на версію 1.1.1.8'"));
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.1.8" Тогда
		НомерТекущейВерсии = "1.1.1.9";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.1.8 на версию 1.1.1.9';uk='оновлення інформаційної бази з версії 1.1.1.8 на версію 1.1.1.9'"));
		скEDI_Сервис.УстановитьПризнакПредопределенныйВидамЭлектронныхДокументов();
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.1.9" Тогда
		НомерТекущейВерсии = "1.1.1.10";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.1.9 на версию 1.1.1.10';uk='оновлення інформаційної бази з версії 1.1.1.9 на версію 1.1.1.10'"));
		скEDI_Сервис.УстановитьПризнакПредопределенныйВидамЭлектронныхДокументов();
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;

	Если НомерТекущейВерсии = "1.1.1.10" Тогда
		НомерТекущейВерсии = "1.1.1.11";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.1.10 на версию 1.1.1.11';uk='оновлення інформаційної бази з версії 1.1.1.10 на версію 1.1.1.11'"));
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.1.11" Тогда
		НомерТекущейВерсии = "1.1.1.12";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.1.11 на версию 1.1.1.12';uk='оновлення інформаційної бази з версії 1.1.1.11 на версію 1.1.1.12'"));
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.1.12" Тогда
		НомерТекущейВерсии = "1.1.1.13";
		Константы.скEDI_СерверEDIПровайдера.Установить("localhost");
		Константы.скEDI_ПортEDIПровайдера.Установить("9080");
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.1.12 на версию 1.1.1.13';uk='оновлення інформаційної бази з версії 1.1.1.12 на версію 1.1.1.13'"));
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.1.13" Тогда
		НомерТекущейВерсии = "1.1.1.14";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.1.13 на версию 1.1.1.14';uk='оновлення інформаційної бази з версії 1.1.1.13 на версію 1.1.1.14'"));
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.1.14" Тогда
		НомерТекущейВерсии = "1.1.1.15";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.1.14 на версию 1.1.1.15';uk='оновлення інформаційної бази з версії 1.1.1.14 на версію 1.1.1.15'"));
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.1.15" Тогда
		НомерТекущейВерсии = "1.1.1.16";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.1.15 на версию 1.1.1.16';uk='оновлення інформаційної бази з версії 1.1.1.15 на версію 1.1.1.16'"));
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.1.16" Тогда
		НомерТекущейВерсии = "1.1.1.17";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.1.16 на версию 1.1.1.17';uk='оновлення інформаційної бази з версії 1.1.1.16 на версію 1.1.1.17'"));
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.1.17" Тогда
		НомерТекущейВерсии = "1.1.1.18";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.1.17 на версию 1.1.1.18';uk='оновлення інформаційної бази з версії 1.1.1.17 на версію 1.1.1.18'"));
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.1.18" Тогда
		НомерТекущейВерсии = "1.1.1.19";
		
		скEDI_Сервис.ЗарегистрироватьПечатнуюФорму_Сервер();
		скEDI_Сервис.УстановитьТипЭлектронногоДокумента_Релиз_1_1_2_0();
		скEDI_Сервис.УстановитьВариантОпределенияСуммыПоДокументу_Релиз_1_1_1_19();
		скEDI_Сервис.УстановитьСпособОтправкиКонтрагентуВОрганизацииEDI_Релиз_1_1_2_0();
		скEDI_Сервис.ОбработктьЭлектронныеДокументы_Релиз_1_1_2_0();
		скEDI_Сервис.ОбработатьКвитанции_Релиз_1_1_2_0();
		
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.1.18 на версию 1.1.1.19';uk='оновлення інформаційної бази з версії 1.1.1.18 на версію 1.1.1.19'"));
		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.1.19" Тогда
		НомерТекущейВерсии = "1.1.2.0";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.1.19 на версию 1.1.2.0';uk='оновлення інформаційної бази з версії 1.1.1.19 на версію 1.1.2.0'"));
		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.2.0" Тогда
		НомерТекущейВерсии = "1.1.2.1";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.2.0 на версию 1.1.2.1';uk='оновлення інформаційної бази з версії 1.1.2.0 на версію 1.1.2.1'"));
		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.2.1" Тогда
		НомерТекущейВерсии = "1.1.2.2";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.2.1 на версию 1.1.2.2';uk='оновлення інформаційної бази з версії 1.1.2.1 на версію 1.1.2.2'"));
		
		скEDI_Сервис.ЗаполнитьНаименованиеНастроекВыгрузкиЗагрузки_Релиз_1_1_2_2();
		
		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.2.2" Тогда
		НомерТекущейВерсии = "1.1.2.3";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.2.2 на версию 1.1.2.3';uk='оновлення інформаційної бази з версії 1.1.2.2 на версію 1.1.2.3'"));
		
		скEDI_Сервис.ЗаполнитьНастройкуОтображенияЭлектронныхДокументов_Релиз_1_1_2_3();
		
		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.2.3" Тогда
		НомерТекущейВерсии = "1.1.2.4";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.2.3 на версию 1.1.2.4';uk='оновлення інформаційної бази з версії 1.1.2.3 на версію 1.1.2.4'"));
		
		скEDI_Сервис.ПеренестиСодержанияИВложенияВРегистрыСведений_Релиз_1_1_2_4();
		скEDI_Сервис.СконвертироватьУсловияДокументов1С_Релиз_1_1_2_4();
		скEDI_Сервис.ЗаполнитьЕДРПОУВладельцаШаблонаВыгрузкиЗагрузки_Релиз_1_1_2_4();
		скEDI_Сервис.ПеренестиФаксимилеВРегистрыСведений_Релиз_1_1_2_4();
		
		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.2.4" Тогда
		НомерТекущейВерсии = "1.1.2.5";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.2.4 на версию 1.1.2.5';uk='оновлення інформаційної бази з версії 1.1.2.4 на версію 1.1.2.5'"));
		
		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.2.5" Тогда
		НомерТекущейВерсии = "1.1.2.6";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.2.5 на версию 1.1.2.6';uk='оновлення інформаційної бази з версії 1.1.2.5 на версію 1.1.2.6'"));
		
		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.2.6" Тогда
		НомерТекущейВерсии = "1.1.2.7";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.2.6 на версию 1.1.2.7';uk='оновлення інформаційної бази з версії 1.1.2.6 на версію 1.1.2.7'"));
		
		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	
	Если НомерТекущейВерсии = "1.1.2.7" Тогда
		НомерТекущейВерсии = "1.1.2.8";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.2.7 на версию 1.1.2.8';uk='оновлення інформаційної бази з версії 1.1.2.7 на версію 1.1.2.8'"));
		
		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.2.8" Тогда
		НомерТекущейВерсии = "1.1.3.0";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.2.8 на версию 1.1.3.0';uk='оновлення інформаційної бази з версії 1.1.2.8 на версію 1.1.3.0'"));
		скEDI_Сервис.ЗаполнитьГруппуДопДокументыДФС_Релиз_1_1_3_0();
		скEDI_Сервис.УстановитьПолученоОтКонтрагентаСПомощьюВСодержимоеЭлектронныхДокументов_Релиз_1_1_3_0();
		скEDI_Сервис.УстановитьОсновнойЭлектронныйДокумент_Релиз_1_1_3_0();
		скEDI_Сервис.УстановитьПометкуУдаления_Релиз_1_1_3_0();
		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.3.0" Тогда
		НомерТекущейВерсии = "1.1.3.1";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.3.0 на версию 1.1.3.1';uk='оновлення інформаційної бази з версії 1.1.3.0 на версію 1.1.3.1'"));
		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.3.1" Тогда
		НомерТекущейВерсии = "1.1.3.2";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.3.1 на версию 1.1.3.2';uk='оновлення інформаційної бази з версії 1.1.3.1 на версію 1.1.3.2'"));
		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.3.2" Тогда
		НомерТекущейВерсии = "1.1.3.3";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.3.2 на версию 1.1.3.3';uk='оновлення інформаційної бази з версії 1.1.3.2 на версію 1.1.3.3'"));
		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.3.3" Тогда
		НомерТекущейВерсии = "1.1.3.4";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.3.3 на версию 1.1.3.4';uk='оновлення інформаційної бази з версії 1.1.3.3 на версію 1.1.3.4'"));
		скEDI_Сервис.ОбновитьИнформациюОСертификатах_Релиз_1_1_3_4();
		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.3.4" Тогда
		НомерТекущейВерсии = "1.1.3.5";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.3.4 на версию 1.1.3.5';uk='оновлення інформаційної бази з версії 1.1.3.4 на версію 1.1.3.5'"));
		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.3.5" Тогда
		НомерТекущейВерсии = "1.1.3.6";
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.3.5 на версию 1.1.3.6';uk='оновлення інформаційної бази з версії 1.1.3.5 на версію 1.1.3.6'"));
		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.3.6" Тогда
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.3.6 на версию 1.1.3.7';uk='оновлення інформаційної бази з версії 1.1.3.6 на версію 1.1.3.7'"));
		НомерТекущейВерсии = "1.1.3.7";
		скEDI_Сервис.ЗаполнитьДополнительныеРеквизитыВРегистреСведений_скEDI_ЭлектронныеДокументы_Релиз_1_1_3_7();
		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.3.7" Тогда
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.3.7 на версию 1.1.3.8';uk='оновлення інформаційної бази з версії 1.1.3.7 на версію 1.1.3.8'"));
		НомерТекущейВерсии = "1.1.3.8";
		Константы.скEDI_ИспользованиеПодсистемы.Установить(Истина);
		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.3.8" Тогда
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.3.8 на версию 1.1.3.9';uk='оновлення інформаційної бази з версії 1.1.3.8 на версію 1.1.3.9'"));
		НомерТекущейВерсии = "1.1.3.9";
		Константы.скEDI_ИспользованиеПодсистемы.Установить(Истина);
		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.3.9" Тогда
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.3.9 на версию 1.1.3.10';uk='оновлення інформаційної бази з версії 1.1.3.9 на версію 1.1.3.10'"));
		НомерТекущейВерсии = "1.1.3.10";
		скEDI_Сервис.ДобавитьВидЄлектронногоДокументаУниверсальнійДокумент_Релиз_1_1_3_10();
		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.3.10" Тогда
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.3.10 на версию 1.1.3.11';uk='оновлення інформаційної бази з версії 1.1.3.10 на версію 1.1.3.11'"));
		НомерТекущейВерсии = "1.1.3.11";
		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.3.11" Тогда
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.3.11 на версию 1.1.3.12';uk='оновлення інформаційної бази з версії 1.1.3.11 на версію 1.1.3.12'"));
		НомерТекущейВерсии = "1.1.3.12";
		скEDI_Сервис.Заполнить_ЖурналРабочегоСтола_НастройкиПользователейПоУмолчанию_Релиз_1_1_3_12();
		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.3.12" Тогда
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.3.12 на версию 1.1.3.13';uk='оновлення інформаційної бази з версії 1.1.3.12 на версію 1.1.3.13'"));
		НомерТекущейВерсии = "1.1.3.13";
		скEDI_Сервис.ПерезаполнитьПредопределенныеШаблоны();
		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.3.13" Тогда
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.3.13 на версию 1.1.3.14';uk='оновлення інформаційної бази з версії 1.1.3.13 на версію 1.1.3.14'"));
		НомерТекущейВерсии = "1.1.3.14";
		//скEDI_Сервис.ПерезаполнитьПредопределенныеШаблоны();
		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.3.14" Тогда
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.3.14 на версию 1.1.3.15';uk='оновлення інформаційної бази з версії 1.1.3.14 на версію 1.1.3.15'"));
		НомерТекущейВерсии = "1.1.3.15";
		скEDI_Сервис.Заполнить_НастройкиВидаЭлектронногоДокументаСоглашениеОАнулировании_Релиз_1_1_3_15();
		скEDI_Сервис.ДобавитьВидЄлектронногоДокументаСоглашениеОАнулировании_Релиз_1_1_3_15();
		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.3.15" Тогда
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.3.15 на версию 1.1.3.16';uk='оновлення інформаційної бази з версії 1.1.3.15 на версію 1.1.3.16'"));
		НомерТекущейВерсии = "1.1.3.16";
		//скEDI_Сервис.УстановитьСпособОтправкиНалоговыхДокументовКонтрагенту_Релиз_1_1_3_16();
		скEDI_Сервис.ПроверитьТребуетПовторногоУтверждения_Релиз_1_1_3_16();

		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	Если НомерТекущейВерсии = "1.1.3.16" Тогда
		Сообщить(НСтр("ru='обновление информационной базы с версии 1.1.3.16 на версию 1.1.3.17';uk='оновлення інформаційної бази з версії 1.1.3.16 на версію 1.1.3.17'"));
		НомерТекущейВерсии = "1.1.3.17";

		ОбластьМакета = МакетИнформацияОВерсиях.ПолучитьОбласть("Версия" + СтрЗаменить(НомерТекущейВерсии, ".", "_"));
		ИнформацияОбОбновлениях.НачатьГруппуСтрок("Версия " + НомерТекущейВерсии);
		ИнформацияОбОбновлениях.Вывести(ОбластьМакета);
		ИнформацияОбОбновлениях.ЗакончитьГруппуСтрок();
		ВыполненоОбновление = Истина;		
		Константы.скEDI_НомерВерсии.Установить(НомерТекущейВерсии);	
	КонецЕсли;
	
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьУстановку(Команда)
	Состояние(НСтр("ru = 'Выполняется установка подсистемы FlyDoc'; uk = 'Виконується встановлення підсистеми FlyDoc'"));
	
	ЗакрытьФорму 		= Ложь;
	ВыполненоУстановку = Ложь;
	ВыполнитьУстановкуСервер(ЗакрытьФорму, ВыполненоУстановку);
	Если ЗакрытьФорму = Истина Тогда
		
		Закрыть();
		
	ИначеЕсли ВыполненоУстановку Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.РабочийСтол;
		
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Открыть Рабочий стол FlyDoc'; uk = 'Відкрити Робочий стіл FlyDoc'"));
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОбновление(Команда)
	
	Состояние(НСтр("ru = 'Выполняется обновление подсистемы FlyDoc'; uk = 'Виконується оновлення підсистеми FlyDoc'"));
	
	ЗакрытьФорму 		= Ложь;
	ВыполненоОбновление = Ложь;
	ИнформацияОбОбновлениях = Новый ТабличныйДокумент;
	ВыполнитьОбновлениеСервер(ЗакрытьФорму, ИнформацияОбОбновлениях, ВыполненоОбновление);
	Если ЗакрытьФорму = Истина Тогда
		
		Закрыть();
		
	ИначеЕсли ВыполненоОбновление Тогда
		
		ОткрытьФорму("ОбщаяФорма.скEDI_ФормаИнформацияОбОбновлениях", Новый Структура("ИнформацияОбОбновлении", ИнформацияОбОбновлениях));
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.РабочийСтол;
		
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Открыть Рабочий стол FlyDoc'; uk = 'Відкрити Робочий стіл FlyDoc'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеЛегально1ПриИзменении(Элемент)
	Элементы.ПродолжитьУстановку.Доступность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеЛегальноПриИзменении(Элемент)
	Элементы.ПродолжитьОбновление.Доступность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "скEDI_НеобходимоОбновитьСписокЭлектронныхДокументов" Тогда
		ОбновитьПослеВыполненияДействийСЭлектроннымиДокументамиЖурналПервичныеДокументы(Параметр);
	ИначеЕсли ИмяСобытия = "скEDI_НеобходимоОбновитьСписокЭлектронныхДокументовДокументыНДС" Тогда
		ОбновитьПослеВыполненияДействийСЭлектроннымиДокументамиЖурналДокументыНДС(Параметр);
	ИначеЕсли ИмяСобытия = "скEDI_НеобходимоОбновитьСписокДополнительныхЭлектронныхДокументовДФС" Тогда
		ОбновитьПослеВыполненияДействийСДополнительнымиЭлектроннымиДокументамиДФС(Параметр);
	ИначеЕсли ИмяСобытия = "скEDI_ИзмененСписокВидовЭлектронныхДокументов" Тогда
		ОбновитьВидимостьДобавитьУниверсальныйЭлектронныйДокументСервере();
		ОбновитьВидимостьАннулироватьЭлектронныйДокументСервере();
	ИначеЕсли ИмяСобытия = "скEDI_УстановитьОтбор_ТребуетПовторногоУтверждения_для_Органииизации" Тогда
		Если ТипЗнч(Параметр) = Тип("СправочникСсылка.скEDI_Организации") Тогда
			Если ЗначениеЗаполнено(Параметр) Тогда
				УстановитьОтбор_ТребуетПовторногоУтверждения(Параметр);
				Открыть();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтбор_ТребуетПовторногоУтверждения(ПараметрОрганизация)
	Объект.Организация = ПараметрОрганизация;
	
	//СписокДокументов
	ФильтрПериод.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	ФильтрПериод.ДатаНачала = Дата(2022, 1, 1, 0, 0, 0);
	ФильтрПериод.ДатаОкончания = '00010101';
	
	КонтрагентДляОтбора = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	
	ОтборКод = "";
	
	ОтборНомер = "";
	ОтборНомерУсловие = ПредопределенноеЗначение("Перечисление.скEDI_УсловияОтбораСтрока.Содержит");
	
	ОтборВхИсх.Очистить();
	ОтборВхИсх.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	
	ОтборВидЭлектронногоДокумента.Очистить();
	ОтборВидЭлектронногоДокумента.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	
	ОтборСоответствияДокументов.Очистить();
	ОтборСоответствияДокументов.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	
	ОтборСостояние.Очистить();
	ОтборСостояние.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_СостоянияЭлектронныхДокументов.ТребуетПовторногоУтверждения"));
	
	ОтборНеСоответствияДокументов.Очистить();
	ОтборНеСоответствияДокументов.Добавить(Неопределено, НСтр("ru = 'Все'; uk = 'Всі'"));
	
	ОтборТолькоТребующиеОбработки = Ложь;
	ОтборОтображатьВсеВариантыДокументов = Ложь;
	
	ОрганизацияПриИзмененииНаСервере();
	
	ПрименитьНастройкиОтборов("ПриСменеОрганизации");	
	ПрименитьНастройкиОтборовДокументыНДС("ПриСменеОрганизации");	
	
	Элементы.ГруппаЖурналы.ТекущаяСтраница = Элементы.ГруппаПервичныеДокументы;
КонецПроцедуры

&НаСервереБезКонтекста 
Процедура ЗаписатьНастройкиПоУмолчаниюВРегистр_Сервер(ЖурналРабочегоСтола, Настройки)
	ТекПользователь = скEDI_НастройкиПодКонфигурацию.ПолучитьТекущегоПользователя();
	Запись = РегистрыСведений.скEDI_РабочийСтол_НастройкиПользователейПоУмолчанию.СоздатьМенеджерЗаписи();
	Запись.Пользователь = ТекПользователь;
	Запись.ЖурналРабочегоСтола = ЖурналРабочегоСтола;
	Запись.Прочитать();
	Если не Запись.Выбран() Тогда
		Запись.Пользователь = ТекПользователь;
		Запись.ЖурналРабочегоСтола = ЖурналРабочегоСтола;
	КонецЕсли;
	Запись.ФильтрДатаВариант = Новый ХранилищеЗначения(Настройки.ФильтрДатаВариант);
	Запись.ФильтрДатаНачала 	= Настройки.ФильтрДатаНачала;
	Запись.ФильтрДатаОкончания 	= Настройки.ФильтрДатаОкончания;
	Запись.НастройкаУсловийОтбора = Новый ХранилищеЗначения(Настройки.НастройкаУсловийОтбора);
	Запись.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНастройкуУсловияОтбораНаКлиенте(ЭлементУсловияОтбора)
	Если ТипЗнч(ЭлементУсловияОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		Если Найти(ЭлементУсловияОтбора.ПредставлениеПользовательскойНастройки, "_БыстрыйОтбор") > 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		Результат = Новый Структура;
		Результат.Вставить("ТипЭлемента", "ГруппаЭлементовОтбораКомпоновкиДанных");
		Результат.Вставить("ПредставлениеПользовательскойНастройки", ЭлементУсловияОтбора.ПредставлениеПользовательскойНастройки);
		Результат.Вставить("ТипГруппы", ЭлементУсловияОтбора.ТипГруппы);
		Результат.Вставить("Использование", ЭлементУсловияОтбора.Использование);
		СписокПодчиненныхЭлементов = Новый СписокЗначений;
		ЕстьПодчиненныеЭлементы = Ложь;
		Для Каждого ПодчиненныйЭлементУсловияОтбора Из ЭлементУсловияОтбора.Элементы Цикл
			ТекНастройка = ПолучитьНастройкуУсловияОтбораНаКлиенте(ПодчиненныйЭлементУсловияОтбора);
			Если ЗначениеЗаполнено(ТекНастройка) Тогда
				СписокПодчиненныхЭлементов.Добавить(ТекНастройка);
				ЕстьПодчиненныеЭлементы = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьПодчиненныеЭлементы Тогда
			Результат.Вставить("СписокПодчиненныхЭлементов", СписокПодчиненныхЭлементов);
			Возврат Результат;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭлементУсловияОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Если Найти(ЭлементУсловияОтбора.ПредставлениеПользовательскойНастройки, "_БыстрыйОтбор") > 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		Результат = Новый Структура;
		Результат.Вставить("ТипЭлемента", "ЭлементОтбораКомпоновкиДанных");
		Результат.Вставить("ПредставлениеПользовательскойНастройки", ЭлементУсловияОтбора.ПредставлениеПользовательскойНастройки);
		Результат.Вставить("Использование", ЭлементУсловияОтбора.Использование);
		Если ТипЗнч(ЭлементУсловияОтбора.ЛевоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
			Результат.Вставить("ЛевоеЗначениеТип", "ПолеКомпоновкиДанных");
			Результат.Вставить("ЛевоеЗначение", Строка(ЭлементУсловияОтбора.ЛевоеЗначение));
		ИначеЕсли ТипЗнч(ЭлементУсловияОтбора.ЛевоеЗначение) = Тип("СписокЗначений") Тогда
			Результат.Вставить("ЛевоеЗначениеТип", "СписокЗначений");
			Результат.Вставить("ЛевоеЗначение", ЭлементУсловияОтбора.ЛевоеЗначение);
		Иначе
			Результат.Вставить("ЛевоеЗначениеТип", "Значение");
			Результат.Вставить("ЛевоеЗначение", ЭлементУсловияОтбора.ЛевоеЗначение);
		КонецЕсли;
		Результат.Вставить("ВидСравнения", ЭлементУсловияОтбора.ВидСравнения);
		Если ТипЗнч(ЭлементУсловияОтбора.ПравоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
			Результат.Вставить("ПравоеЗначениеТип", "ПолеКомпоновкиДанных");
			Результат.Вставить("ПравоеЗначение", Строка(ЭлементУсловияОтбора.ПравоеЗначение));
		ИначеЕсли ТипЗнч(ЭлементУсловияОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
			Результат.Вставить("ПравоеЗначениеТип", "СписокЗначений");
			Результат.Вставить("ПравоеЗначение", ЭлементУсловияОтбора.ПравоеЗначение);
		Иначе
			Результат.Вставить("ПравоеЗначениеТип", "Значение");
			Результат.Вставить("ПравоеЗначение", ЭлементУсловияОтбора.ПравоеЗначение);
		КонецЕсли;
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьНастройкуУсловийОтбораНаКлиенте()
	Результат = Новый СписокЗначений;
	Для Каждого ЭлементОтбора Из СписокДокументов.Отбор.Элементы Цикл
		ТекНастройка = ПолучитьНастройкуУсловияОтбораНаКлиенте(ЭлементОтбора);
		Если ЗначениеЗаполнено(ТекНастройка) Тогда
			Результат.Добавить(ТекНастройка);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОтборКод) Тогда
		ТекНастройка = Новый Структура;
		ТекНастройка.Вставить("ТипЭлемента", "СтандартнаяНастройкаОтборовФлайДок");
		ТекНастройка.Вставить("ИмяНастройки", "Код");
		ТекНастройка.Вставить("Значение", ОтборКод);
		Результат.Добавить(ТекНастройка);
	КонецЕсли;
	
	ТекНастройка = Новый Структура;
	ТекНастройка.Вставить("ТипЭлемента", "СтандартнаяНастройкаОтборовФлайДок");
	ТекНастройка.Вставить("ИмяНастройки", "НомерУсловие");
	ТекНастройка.Вставить("Значение", ОтборНомерУсловие);
	Результат.Добавить(ТекНастройка);
	Если ЗначениеЗаполнено(ОтборНомер) Тогда
		ТекНастройка = Новый Структура;
		ТекНастройка.Вставить("ТипЭлемента", "СтандартнаяНастройкаОтборовФлайДок");
		ТекНастройка.Вставить("ИмяНастройки", "Номер");
		ТекНастройка.Вставить("Значение", ОтборНомер);
		Результат.Добавить(ТекНастройка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонтрагентДляОтбора) Тогда
		ТекНастройка = Новый Структура;
		ТекНастройка.Вставить("ТипЭлемента", "СтандартнаяНастройкаОтборовФлайДок");
		ТекНастройка.Вставить("ИмяНастройки", "Контрагент");
		ТекНастройка.Вставить("Значение", КонтрагентДляОтбора);
		Результат.Добавить(ТекНастройка);
	КонецЕсли;
	
	Если ОтборВидЭлектронногоДокумента.Количество() > 0 Тогда
		Если ОтборВидЭлектронногоДокумента.Получить(0).Значение <> Неопределено Тогда
			ТекНастройка = Новый Структура;
			ТекНастройка.Вставить("ТипЭлемента", "СтандартнаяНастройкаОтборовФлайДок");
			ТекНастройка.Вставить("ИмяНастройки", "ВидЭлектронногоДокумента");
			ТекНастройка.Вставить("Значение", ОтборВидЭлектронногоДокумента);
			Результат.Добавить(ТекНастройка);
		КонецЕсли;
	КонецЕсли;
	Если ОтборВхИсх.Количество() > 0 Тогда
		Если ОтборВхИсх.Получить(0).Значение <> Неопределено Тогда
			ТекНастройка = Новый Структура;
			ТекНастройка.Вставить("ТипЭлемента", "СтандартнаяНастройкаОтборовФлайДок");
			ТекНастройка.Вставить("ИмяНастройки", "ВхИсх");
			ТекНастройка.Вставить("Значение", ОтборВхИсх);
			Результат.Добавить(ТекНастройка);
		КонецЕсли;
	КонецЕсли;
	Если ОтборСостояние.Количество() > 0 Тогда
		Если ОтборСостояние.Получить(0).Значение <> Неопределено Тогда
			ТекНастройка = Новый Структура;
			ТекНастройка.Вставить("ТипЭлемента", "СтандартнаяНастройкаОтборовФлайДок");
			ТекНастройка.Вставить("ИмяНастройки", "Состояние");
			ТекНастройка.Вставить("Значение", ОтборСостояние);
			Результат.Добавить(ТекНастройка);
		КонецЕсли;
	КонецЕсли;
	Если ОтборСоответствияДокументов.Количество() > 0 Тогда
		Если ОтборСоответствияДокументов.Получить(0).Значение <> Неопределено Тогда
			ТекНастройка = Новый Структура;
			ТекНастройка.Вставить("ТипЭлемента", "СтандартнаяНастройкаОтборовФлайДок");
			ТекНастройка.Вставить("ИмяНастройки", "СоответствиеДокументов");
			ТекНастройка.Вставить("Значение", ОтборСоответствияДокументов);
			Результат.Добавить(ТекНастройка);
		КонецЕсли;
	КонецЕсли;
	
	Если ОтборТолькоТребующиеОбработки Тогда
		ТекНастройка = Новый Структура;
		ТекНастройка.Вставить("ТипЭлемента", "СтандартнаяНастройкаОтборовФлайДок");
		ТекНастройка.Вставить("ИмяНастройки", "ТолькоТребующиеОбработки");
		ТекНастройка.Вставить("Значение", ОтборТолькоТребующиеОбработки);
		Результат.Добавить(ТекНастройка);
	КонецЕсли;
	Если ОтборОтображатьВсеВариантыДокументов Тогда
		ТекНастройка = Новый Структура;
		ТекНастройка.Вставить("ТипЭлемента", "СтандартнаяНастройкаОтборовФлайДок");
		ТекНастройка.Вставить("ИмяНастройки", "ОтображатьВсеВариантыДокументов");
		ТекНастройка.Вставить("Значение", ОтборОтображатьВсеВариантыДокументов);
		Результат.Добавить(ТекНастройка);
	КонецЕсли;
	
	Если ОтборНеСоответствияДокументов.Количество() > 0 Тогда
		Если ОтборНеСоответствияДокументов.Получить(0).Значение <> Неопределено Тогда
			ТекНастройка = Новый Структура;
			ТекНастройка.Вставить("ТипЭлемента", "СтандартнаяНастройкаОтборовФлайДок");
			ТекНастройка.Вставить("ИмяНастройки", "НеСоответствияДокументов");
			ТекНастройка.Вставить("Значение", ОтборНеСоответствияДокументов);
			Результат.Добавить(ТекНастройка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьНастройкуУсловийОтбораДокументыНДСНаКлиенте()
	Результат = Новый СписокЗначений;
	Для Каждого ЭлементОтбора Из СписокДокументовДокументыНДС.Отбор.Элементы Цикл
		ТекНастройка = ПолучитьНастройкуУсловияОтбораНаКлиенте(ЭлементОтбора);
		Если ЗначениеЗаполнено(ТекНастройка) Тогда
			Результат.Добавить(ТекНастройка);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОтборКодДокументыНДС) Тогда
		ТекНастройка = Новый Структура;
		ТекНастройка.Вставить("ТипЭлемента", "СтандартнаяНастройкаОтборовФлайДок");
		ТекНастройка.Вставить("ИмяНастройки", "Код");
		ТекНастройка.Вставить("Значение", ОтборКодДокументыНДС);
		Результат.Добавить(ТекНастройка);
	КонецЕсли;
	
	ТекНастройка = Новый Структура;
	ТекНастройка.Вставить("ТипЭлемента", "СтандартнаяНастройкаОтборовФлайДок");
	ТекНастройка.Вставить("ИмяНастройки", "НомерУсловие");
	ТекНастройка.Вставить("Значение", ОтборНомерУсловиеДокументыНДС);
	Результат.Добавить(ТекНастройка);
	Если ЗначениеЗаполнено(ОтборНомерДокументыНДС) Тогда
		ТекНастройка = Новый Структура;
		ТекНастройка.Вставить("ТипЭлемента", "СтандартнаяНастройкаОтборовФлайДок");
		ТекНастройка.Вставить("ИмяНастройки", "Номер");
		ТекНастройка.Вставить("Значение", ОтборНомерДокументыНДС);
		Результат.Добавить(ТекНастройка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонтрагентДляОтбораДокументыНДС) Тогда
		ТекНастройка = Новый Структура;
		ТекНастройка.Вставить("ТипЭлемента", "СтандартнаяНастройкаОтборовФлайДок");
		ТекНастройка.Вставить("ИмяНастройки", "Контрагент");
		ТекНастройка.Вставить("Значение", КонтрагентДляОтбораДокументыНДС);
		Результат.Добавить(ТекНастройка);
	КонецЕсли;
	
	Если ОтборВидЭлектронногоДокументаДокументыНДС.Количество() > 0 Тогда
		Если ОтборВидЭлектронногоДокументаДокументыНДС.Получить(0).Значение <> Неопределено Тогда
			ТекНастройка = Новый Структура;
			ТекНастройка.Вставить("ТипЭлемента", "СтандартнаяНастройкаОтборовФлайДок");
			ТекНастройка.Вставить("ИмяНастройки", "ВидЭлектронногоДокумента");
			ТекНастройка.Вставить("Значение", ОтборВидЭлектронногоДокументаДокументыНДС);
			Результат.Добавить(ТекНастройка);
		КонецЕсли;
	КонецЕсли;
	Если ОтборВхИсхДокументыНДС.Количество() > 0 Тогда
		Если ОтборВхИсхДокументыНДС.Получить(0).Значение <> Неопределено Тогда
			ТекНастройка = Новый Структура;
			ТекНастройка.Вставить("ТипЭлемента", "СтандартнаяНастройкаОтборовФлайДок");
			ТекНастройка.Вставить("ИмяНастройки", "ВхИсх");
			ТекНастройка.Вставить("Значение", ОтборВхИсхДокументыНДС);
			Результат.Добавить(ТекНастройка);
		КонецЕсли;
	КонецЕсли;
	Если ОтборСостояниеДокументыНДС.Количество() > 0 Тогда
		Если ОтборСостояниеДокументыНДС.Получить(0).Значение <> Неопределено Тогда
			ТекНастройка = Новый Структура;
			ТекНастройка.Вставить("ТипЭлемента", "СтандартнаяНастройкаОтборовФлайДок");
			ТекНастройка.Вставить("ИмяНастройки", "Состояние");
			ТекНастройка.Вставить("Значение", ОтборСостояниеДокументыНДС);
			Результат.Добавить(ТекНастройка);
		КонецЕсли;
	КонецЕсли;
	Если ОтборСостояниеРегистрацияВДФСДокументыНДС.Количество() > 0 Тогда
		Если ОтборСостояниеРегистрацияВДФСДокументыНДС.Получить(0).Значение <> Неопределено Тогда
			ТекНастройка = Новый Структура;
			ТекНастройка.Вставить("ТипЭлемента", "СтандартнаяНастройкаОтборовФлайДок");
			ТекНастройка.Вставить("ИмяНастройки", "СостояниеРегистрацияВДФС");
			ТекНастройка.Вставить("Значение", ОтборСостояниеРегистрацияВДФСДокументыНДС);
			Результат.Добавить(ТекНастройка);
		КонецЕсли;
	КонецЕсли;
	Если ОтборСоответствияДокументовДокументыНДС.Количество() > 0 Тогда
		Если ОтборСоответствияДокументовДокументыНДС.Получить(0).Значение <> Неопределено Тогда
			ТекНастройка = Новый Структура;
			ТекНастройка.Вставить("ТипЭлемента", "СтандартнаяНастройкаОтборовФлайДок");
			ТекНастройка.Вставить("ИмяНастройки", "СоответствиеДокументов");
			ТекНастройка.Вставить("Значение", ОтборСоответствияДокументовДокументыНДС);
			Результат.Добавить(ТекНастройка);
		КонецЕсли;
	КонецЕсли;
	
	Если ОтборТолькоТребующиеОбработкиДокументыНДС Тогда
		ТекНастройка = Новый Структура;
		ТекНастройка.Вставить("ТипЭлемента", "СтандартнаяНастройкаОтборовФлайДок");
		ТекНастройка.Вставить("ИмяНастройки", "ТолькоТребующиеОбработки");
		ТекНастройка.Вставить("Значение", ОтборТолькоТребующиеОбработкиДокументыНДС);
		Результат.Добавить(ТекНастройка);
	КонецЕсли;
	Если ОтборОтображатьВсеВариантыДокументовДокументыНДС Тогда
		ТекНастройка = Новый Структура;
		ТекНастройка.Вставить("ТипЭлемента", "СтандартнаяНастройкаОтборовФлайДок");
		ТекНастройка.Вставить("ИмяНастройки", "ОтображатьВсеВариантыДокументов");
		ТекНастройка.Вставить("Значение", ОтборОтображатьВсеВариантыДокументовДокументыНДС);
		Результат.Добавить(ТекНастройка);
	КонецЕсли;
	
	Если ОтборНеСоответствияДокументовДокументыНДС.Количество() > 0 Тогда
		Если ОтборНеСоответствияДокументовДокументыНДС.Получить(0).Значение <> Неопределено Тогда
			ТекНастройка = Новый Структура;
			ТекНастройка.Вставить("ТипЭлемента", "СтандартнаяНастройкаОтборовФлайДок");
			ТекНастройка.Вставить("ИмяНастройки", "НеСоответствияДокументов");
			ТекНастройка.Вставить("Значение", ОтборНеСоответствияДокументовДокументыНДС);
			Результат.Добавить(ТекНастройка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруНастроек()
	Настройки = Новый Структура;
	Настройки.Вставить("ФильтрДатаВариант", ФильтрПериод.Вариант);
	Настройки.Вставить("ФильтрДатаНачала", ФильтрПериод.ДатаНачала);
	Настройки.Вставить("ФильтрДатаОкончания", ФильтрПериод.ДатаОкончания);
	НастройкаУсловийОтбора = ПолучитьНастройкуУсловийОтбораНаКлиенте();
	Настройки.Вставить("НастройкаУсловийОтбора", НастройкаУсловийОтбора);

	Возврат Новый ФиксированнаяСтруктура(Настройки);
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруНастроекДокументыНДС()
	Настройки = Новый Структура;
	Настройки.Вставить("ФильтрДатаВариант", ФильтрПериодДокументыНДС.Вариант);
	Настройки.Вставить("ФильтрДатаНачала", ФильтрПериодДокументыНДС.ДатаНачала);
	Настройки.Вставить("ФильтрДатаОкончания", ФильтрПериодДокументыНДС.ДатаОкончания);
	НастройкаУсловийОтбора = ПолучитьНастройкуУсловийОтбораДокументыНДСНаКлиенте();
	Настройки.Вставить("НастройкаУсловийОтбора", НастройкаУсловийОтбора);

	Возврат Новый ФиксированнаяСтруктура(Настройки);
КонецФункции

&НаКлиенте
Процедура ФильтрПериодПриИзменении(Элемент)
	УстановитьПараметрыСписков();
	ЗаписатьНастройкиПоУмолчаниюВРегистр_Сервер(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы"), ПолучитьСтруктуруНастроек());
	РасчитатьИтогиПоСпискуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПериодДокументыНДСПриИзменении(Элемент)
	УстановитьПараметрыСписковДокументыНДС();
	ЗаписатьНастройкиПоУмолчаниюВРегистр_Сервер(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС"), ПолучитьСтруктуруНастроекДокументыНДС());
	РасчитатьИтогиПоСпискуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияФормыНастройкиПолейОтбора(ВыбранныеПоляОтбора, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ВыбранныеПоляОтбора = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
	
	СписокНеобходимоУдалить = Новый СписокЗначений;
	
	Для Каждого ЭлементСписка ИЗ ВыбранныеПоляОтбора Цикл
		Если ЭлементСписка.Пометка Тогда
			ЭлементДобавлен = Ложь;
			Для Каждого ЭлементОтбора Из СписокДокументов.Отбор.Элементы Цикл
				Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;
				Если ЭлементОтбора.ЛевоеЗначение = ЭлементСписка.Значение Тогда
					ЭлементДобавлен = Истина;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ЭлементДобавлен Тогда
				ЭлементОтбораПроведен = СписокДокументов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбораПроведен.ЛевоеЗначение = ЭлементСписка.Значение;
				ЭлементОтбораПроведен.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбораПроведен.Использование = Ложь;
			КонецЕсли;
		Иначе
			Для Каждого ЭлементОтбора Из СписокДокументов.Отбор.Элементы Цикл
				Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;
				Если ЭлементОтбора.ЛевоеЗначение = ЭлементСписка.Значение Тогда
					СписокНеобходимоУдалить.Добавить(ЭлементОтбора);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из СписокНеобходимоУдалить Цикл
		СписокДокументов.Отбор.Элементы.Удалить(УдаляемыйЭлемент.Значение);
	КонецЦикла;
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаКлиенте
Процедура ИнициализироватьПодписьИОтправкуЭлектронныхДокументовВДФС(ЖурналРабочегоСтола, Отправлять)
	ЭлементыСписокДокументов = Неопределено;
	Если ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументов;
	ИначеЕсли ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументовДокументыНДС;
	Иначе
		Возврат;
	КонецЕсли;
	
	лМассивДанныхДокументов = Новый Массив;
	Для Каждого лВыделенаяСтрока Из ЭлементыСписокДокументов.ВыделенныеСтроки Цикл
		лДанныеВыделенойСтроки = ЭлементыСписокДокументов.ДанныеСтроки(лВыделенаяСтрока);
		лСтруктураДанныхДокумента = скEDI_ОбщегоНазначенияКлиент.ПолучитьСтруктуруДанныхПоЭлектронномуДокументу();
		ЗаполнитьЗначенияСвойств(лСтруктураДанныхДокумента, лДанныеВыделенойСтроки);
		лМассивДанныхДокументов.Добавить(лСтруктураДанныхДокумента);
	КонецЦикла;
	МассивДанныхПоДокументам = Новый ФиксированныйМассив(лМассивДанныхДокументов);
	ВерсияМассиваДанныхПоДокументам = Новый УникальныйИдентификатор;
	
	ВыполняемыеОперации = Новый Массив;
	ВыполняемыеОперации.Добавить("Подпись");
	
	Если Отправлять Тогда  
		ВыполняемыеОперации.Добавить("ОтправкаВДФС");
	КонецЕсли;
	
	ОшибкаПолученияПодписей = "";
	Подписанты = скEDI_ОбщегоНазначения.ПолучитьПодписантов(ВыполняемыеОперации, Объект.Организация, МассивДанныхПоДокументам, ОшибкаПолученияПодписей);
	Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
		Сообщить(ОшибкаПолученияПодписей);
		Возврат;
	КонецЕсли;
	
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Новый Структура("ВерсияМассиваДанныхПоДокументам,ВыполняемыеОперации,Организация,Подписанты", ВерсияМассиваДанныхПоДокументам, ВыполняемыеОперации, Объект.Организация, Подписанты);
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов.Вставить("ЖурналРабочегоСтола", ЖурналРабочегоСтола);
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
		лФормаНастройкиПараметровПодписиДокументов = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастройкиПодписейЭлектронныхДокументов", лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма);
		ВыполнитьОперацииСЭлектроннымиДокументами(лФормаНастройкиПараметровПодписиДокументов.ОткрытьМодально());
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастройкиПараметровПодписиДокументов(лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма, "ВыполнитьОперацииСЭлектроннымиДокументами");
	КонецЕсли;
КонецПроцедуры // ИнициализироватьПодписьЭлектронногоДокумента()

&НаКлиенте
Процедура ПодписатьИОтправитьЭлектронныеДокументыВДФСДокументыНДС(Команда)
	ИнициализироватьПодписьИОтправкуЭлектронныхДокументовВДФС(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС"), Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЭлектронныйДокументДокументыНДС(Команда)
	ИнициализироватьПроверкуЭлектронногоДокумента(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС"));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБыстрыйОтборПоСписку(ТекСписокДокументов, ПолеОтбора, ЗначениеОтбора)
	ТекЭлементОтбора = Неопределено;
	Для Каждого ЭлементОтбора Из ТекСписокДокументов.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементОтбора.ПредставлениеПользовательскойНастройки = ПолеОтбора + "_БыстрыйОтбор" Тогда
			ТекЭлементОтбора = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеОтбора = Неопределено Тогда
		Если ТекЭлементОтбора <> Неопределено Тогда
			ТекЭлементОтбора.Использование = Ложь;
		КонецЕсли;
	ИначеЕсли ЗначениеОтбора.Количество() = 0 Тогда
		Если ТекЭлементОтбора <> Неопределено Тогда
			ТекЭлементОтбора.Использование = Ложь;
		КонецЕсли;
	Иначе
		Все = Ложь;
		Для Каждого ЭлементЗначенияОтбора из ЗначениеОтбора Цикл
			Если ЭлементЗначенияОтбора.Значение = Неопределено Тогда
				Все = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Все Тогда
			Если ТекЭлементОтбора <> Неопределено Тогда
				ТекЭлементОтбора.Использование = Ложь;
			КонецЕсли;
		Иначе
			Если ТекЭлементОтбора = Неопределено Тогда
				ТекЭлементОтбора = ТекСписокДокументов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ТекЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеОтбора);
				ТекЭлементОтбора.ПредставлениеПользовательскойНастройки = ПолеОтбора + "_БыстрыйОтбор";
			КонецЕсли;
			Если ЗначениеОтбора.Количество() = 1 Тогда
				ТекЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
				ТекЭлементОтбора.ПравоеЗначение= ЗначениеОтбора[0].Значение;
				ТекЭлементОтбора.Использование = Истина;
			Иначе
				ТекЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
				ТекЭлементОтбора.ПравоеЗначение= ЗначениеОтбора;
				ТекЭлементОтбора.Использование = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБыстрыйОтборПоЗначению(ТекСписокДокументов, ПолеОтбора, ЗначениеОтбора, ВидСравнения)
	ТекЭлементОтбора = Неопределено;
	Для Каждого ЭлементОтбора Из ТекСписокДокументов.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементОтбора.ПредставлениеПользовательскойНастройки = ПолеОтбора + "_БыстрыйОтбор" Тогда
			ТекЭлементОтбора = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(ЗначениеОтбора) или ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено или ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		Если ТекЭлементОтбора = Неопределено Тогда
			ТекЭлементОтбора = ТекСписокДокументов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ТекЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеОтбора);
			ТекЭлементОтбора.ПредставлениеПользовательскойНастройки = ПолеОтбора + "_БыстрыйОтбор";
		КонецЕсли;
		ТекЭлементОтбора.ВидСравнения  = ВидСравнения;
		Если ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено или ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
			ТекЭлементОтбора.ПравоеЗначение = "";
		Иначе
			ТекЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;
		КонецЕсли;
		ТекЭлементОтбора.Использование = Истина;
	Иначе
		Если ТекЭлементОтбора <> Неопределено Тогда
			ТекЭлементОтбора.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкиОтборовНаКлиенте()
	УстановитьБыстрыйОтборПоЗначению(СписокДокументов, "Код", ОтборКод, ВидСравненияКомпоновкиДанных.Равно);
	
	Если ОтборНомерУсловие = ПредопределенноеЗначение("Перечисление.скEDI_УсловияОтбораСтрока.Содержит") Тогда
		ОтборНомерЗначение = ОтборНомер;
		ОтборНомерУсловиеЗначение = ВидСравненияКомпоновкиДанных.Содержит;
	ИначеЕсли ОтборНомерУсловие = ПредопределенноеЗначение("Перечисление.скEDI_УсловияОтбораСтрока.Равно") Тогда
		ОтборНомерЗначение = ОтборНомер;
		ОтборНомерУсловиеЗначение = ВидСравненияКомпоновкиДанных.Равно;
	ИначеЕсли ОтборНомерУсловие = ПредопределенноеЗначение("Перечисление.скEDI_УсловияОтбораСтрока.НачинаетсяС") Тогда
		ОтборНомерЗначение = ОтборНомер;
		ОтборНомерУсловиеЗначение = ВидСравненияКомпоновкиДанных.НачинаетсяС;
	ИначеЕсли ОтборНомерУсловие = ПредопределенноеЗначение("Перечисление.скEDI_УсловияОтбораСтрока.ЗаканчиваетсяНа") Тогда
		Если ЗначениеЗаполнено(ОтборНомер) Тогда
			ОтборНомерЗначение = "%" + ОтборНомер;
		Иначе
			ОтборНомерЗначение = "";
		КонецЕсли;
		ОтборНомерУсловиеЗначение = ВидСравненияКомпоновкиДанных.Подобно;
	ИначеЕсли ОтборНомерУсловие = ПредопределенноеЗначение("Перечисление.скEDI_УсловияОтбораСтрока.Заполнено") Тогда
		ОтборНомерЗначение = "";
		ОтборНомерУсловиеЗначение = ВидСравненияКомпоновкиДанных.Заполнено;
	ИначеЕсли ОтборНомерУсловие = ПредопределенноеЗначение("Перечисление.скEDI_УсловияОтбораСтрока.НеЗаполнено") Тогда
		ОтборНомерЗначение = "";
		ОтборНомерУсловиеЗначение = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ИначеЕсли ОтборНомерУсловие = ПредопределенноеЗначение("Перечисление.скEDI_УсловияОтбораСтрока.Подобно") Тогда
		ОтборНомерЗначение = ОтборНомер;
		ОтборНомерУсловиеЗначение = ВидСравненияКомпоновкиДанных.Подобно;
	ИначеЕсли ОтборНомерУсловие = ПредопределенноеЗначение("Перечисление.скEDI_УсловияОтбораСтрока.НеПодобно") Тогда
		ОтборНомерЗначение = ОтборНомер;
		ОтборНомерУсловиеЗначение = ВидСравненияКомпоновкиДанных.НеПодобно;
	Иначе
		ОтборНомерЗначение = "";
		ОтборНомерУсловиеЗначение = ВидСравненияКомпоновкиДанных.Содержит;
	КонецЕсли;
	УстановитьБыстрыйОтборПоЗначению(СписокДокументов, "ЭлектронныйДокументНомерДокумента", ОтборНомерЗначение, ОтборНомерУсловиеЗначение);
	
	УстановитьБыстрыйОтборПоЗначению(СписокДокументов, "Контрагент", КонтрагентДляОтбора, ВидСравненияКомпоновкиДанных.Равно);
		
	УстановитьБыстрыйОтборПоСписку(СписокДокументов, "ВидЭлектронногоДокумента", ОтборВидЭлектронногоДокумента);
	УстановитьБыстрыйОтборПоСписку(СписокДокументов, "ВхИсх", ОтборВхИсх);
	УстановитьБыстрыйОтборПоСписку(СписокДокументов, "Состояние", ОтборСостояние);
	УстановитьБыстрыйОтборПоСписку(СписокДокументов, "СоответствиеДокументов", ОтборСоответствияДокументов);	
	
	
	//ТребуетОбработки
	ТекЭлементОтбораТребуетОбработки = Неопределено;
	Для Каждого ЭлементОтбора Из СписокДокументов.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементОтбора.ПредставлениеПользовательскойНастройки = "Обработано_БыстрыйОтбор" Тогда
			ТекЭлементОтбораТребуетОбработки = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ОтборТолькоТребующиеОбработки Тогда
		Если ТекЭлементОтбораТребуетОбработки = Неопределено Тогда
			ТекЭлементОтбораТребуетОбработки = СписокДокументов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ТекЭлементОтбораТребуетОбработки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Обработано");
			ТекЭлементОтбораТребуетОбработки.ПредставлениеПользовательскойНастройки = "Обработано_БыстрыйОтбор";
		КонецЕсли;
		ТекЭлементОтбораТребуетОбработки.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
		ТекЭлементОтбораТребуетОбработки.ПравоеЗначение= Ложь;
		ТекЭлементОтбораТребуетОбработки.Использование = Истина;
	Иначе
		Если ТекЭлементОтбораТребуетОбработки <> Неопределено Тогда
			ТекЭлементОтбораТребуетОбработки.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//ОтображатьВсеВариантыДокументов
	ТекЭлементОтбораОтображатьТолькоОсновнойВариантДокументов = Неопределено;
	Для Каждого ЭлементОтбора Из СписокДокументов.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементОтбора.ПредставлениеПользовательскойНастройки = "ОтображатьТолькоОсновнойВариантДокументов_БыстрыйОтбор" Тогда
			ТекЭлементОтбораОтображатьТолькоОсновнойВариантДокументов = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если не ОтборОтображатьВсеВариантыДокументов Тогда
		Если ТекЭлементОтбораОтображатьТолькоОсновнойВариантДокументов = Неопределено Тогда
			ТекЭлементОтбораОтображатьТолькоОсновнойВариантДокументов = СписокДокументов.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ТекЭлементОтбораОтображатьТолькоОсновнойВариантДокументов.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоОсновнойВариант");
			ТекЭлементОтбораОтображатьТолькоОсновнойВариантДокументов.ПредставлениеПользовательскойНастройки = "ОтображатьТолькоОсновнойВариантДокументов_БыстрыйОтбор";
		КонецЕсли;
		ТекЭлементОтбораОтображатьТолькоОсновнойВариантДокументов.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
		ТекЭлементОтбораОтображатьТолькоОсновнойВариантДокументов.ПравоеЗначение= Истина;
		ТекЭлементОтбораОтображатьТолькоОсновнойВариантДокументов.Использование = Истина;
	Иначе
		Если ТекЭлементОтбораОтображатьТолькоОсновнойВариантДокументов <> Неопределено Тогда
			ТекЭлементОтбораОтображатьТолькоОсновнойВариантДокументов.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//
	//ОтборНеСоответствияДокументов
	ГруппаОтбораНеСоответствияДокументов = Неопределено;
	ЭлементОтбораНеСоответствияДокументовПоСумме = Неопределено;
	ЭлементОтбораНеСоответствияДокументовПоДате = Неопределено;
	ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ = Неопределено;
	ЭлементОтбораНеСоответствияДокументовПоКодуФилиала = Неопределено;
	Для Каждого ЭлементОтбора Из СписокДокументов.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбора.ПредставлениеПользовательскойНастройки = "НеСоответствияДокументов_БыстрыйОтбор" Тогда
				ГруппаОтбораНеСоответствияДокументов = ЭлементОтбора;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ГруппаОтбораНеСоответствияДокументов <> Неопределено Тогда
		Для Каждого ЭлементОтбора Из ГруппаОтбораНеСоответствияДокументов.Элементы Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Если ЭлементОтбора.ПредставлениеПользовательскойНастройки = "НеСоответствияДокументовПоСумме_БыстрыйОтбор" Тогда
					ЭлементОтбораНеСоответствияДокументовПоСумме = ЭлементОтбора;
				ИначеЕсли ЭлементОтбора.ПредставлениеПользовательскойНастройки = "НеСоответствияДокументовПоДате_БыстрыйОтбор" Тогда
					ЭлементОтбораНеСоответствияДокументовПоДате = ЭлементОтбора;
				ИначеЕсли ЭлементОтбора.ПредставлениеПользовательскойНастройки = "НеСоответствияДокументовПоЕДРПОУ_БыстрыйОтбор" Тогда
					ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ = ЭлементОтбора;
				ИначеЕсли ЭлементОтбора.ПредставлениеПользовательскойНастройки = "НеСоответствияДокументовПоКодуФилиала_БыстрыйОтбор" Тогда
					ЭлементОтбораНеСоответствияДокументовПоКодуФилиала = ЭлементОтбора;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ОтборНеСоответствияДокументов.Количество() = 0 Тогда
		Если ГруппаОтбораНеСоответствияДокументов <> Неопределено Тогда
			ГруппаОтбораНеСоответствияДокументов.Использование = Ложь;
		КонецЕсли;
		Если ЭлементОтбораНеСоответствияДокументовПоСумме <> Неопределено Тогда
			ЭлементОтбораНеСоответствияДокументовПоСумме.Использование = Ложь;
		КонецЕсли;
		Если ЭлементОтбораНеСоответствияДокументовПоДате <> Неопределено Тогда
			ЭлементОтбораНеСоответствияДокументовПоДате.Использование = Ложь;
		КонецЕсли;
		Если ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ <> Неопределено Тогда
			ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ.Использование = Ложь;
		КонецЕсли;
		Если ЭлементОтбораНеСоответствияДокументовПоКодуФилиала <> Неопределено Тогда
			ЭлементОтбораНеСоответствияДокументовПоКодуФилиала.Использование = Ложь;
		КонецЕсли;
	Иначе
		Все = Ложь;
		Для Каждого ЭлементЗначенияОтбора из ОтборНеСоответствияДокументов Цикл
			Если ЭлементЗначенияОтбора.Значение = Неопределено Тогда
				Все = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Все Тогда
			Если ГруппаОтбораНеСоответствияДокументов <> Неопределено Тогда
				ГруппаОтбораНеСоответствияДокументов.Использование = Ложь;
			КонецЕсли;
			Если ЭлементОтбораНеСоответствияДокументовПоСумме <> Неопределено Тогда
				ЭлементОтбораНеСоответствияДокументовПоСумме.Использование = Ложь;
			КонецЕсли;
			Если ЭлементОтбораНеСоответствияДокументовПоДате <> Неопределено Тогда
				ЭлементОтбораНеСоответствияДокументовПоДате.Использование = Ложь;
			КонецЕсли;
			Если ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ <> Неопределено Тогда
				ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ.Использование = Ложь;
			КонецЕсли;
			Если ЭлементОтбораНеСоответствияДокументовПоКодуФилиала <> Неопределено Тогда
				ЭлементОтбораНеСоответствияДокументовПоКодуФилиала.Использование = Ложь;
			КонецЕсли;
		Иначе
			Если ГруппаОтбораНеСоответствияДокументов = Неопределено Тогда
				ГруппаОтбораНеСоответствияДокументов = СписокДокументов.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтбораНеСоответствияДокументов.ПредставлениеПользовательскойНастройки = "НеСоответствияДокументов_БыстрыйОтбор";
			КонецЕсли;     //СписокДокументов.Отбор.Элементы[0].ТипГруппы
			ГруппаОтбораНеСоответствияДокументов.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ГруппаОтбораНеСоответствияДокументов.Использование = Истина;
			
			НеСоответствияДокументовПоСумме = Ложь;
			НеСоответствияДокументовПоДате = Ложь;
			НеСоответствияДокументовПоЕДРПОУ = Ложь;
			НеСоответствияДокументовПоКодуФилиала = Ложь;
			Для Каждого ЭлементСписка Из ОтборНеСоответствияДокументов Цикл
				Если ЭлементСписка.Значение = "ПоСумме" Тогда
					НеСоответствияДокументовПоСумме = Истина;
				ИначеЕсли ЭлементСписка.Значение = "ПоДате" Тогда
					НеСоответствияДокументовПоДате = Истина;
				ИначеЕсли ЭлементСписка.Значение = "ПоЕДРПОУ" Тогда
					НеСоответствияДокументовПоЕДРПОУ = Истина;
				ИначеЕсли ЭлементСписка.Значение = "ПоКодуФилиала" Тогда
					НеСоответствияДокументовПоКодуФилиала = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если НеСоответствияДокументовПоСумме Тогда
				Если ЭлементОтбораНеСоответствияДокументовПоСумме = Неопределено Тогда
					ЭлементОтбораНеСоответствияДокументовПоСумме = ГруппаОтбораНеСоответствияДокументов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбораНеСоответствияДокументовПоСумме.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НеСоответствиеПоСуммеДокумента");
					ЭлементОтбораНеСоответствияДокументовПоСумме.ПредставлениеПользовательскойНастройки = "НеСоответствияДокументовПоСумме_БыстрыйОтбор";
				КонецЕсли;
				ЭлементОтбораНеСоответствияДокументовПоСумме.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбораНеСоответствияДокументовПоСумме.ПравоеЗначение = Истина;
				ЭлементОтбораНеСоответствияДокументовПоСумме.Использование = Истина;
			Иначе
				Если ЭлементОтбораНеСоответствияДокументовПоСумме <> Неопределено Тогда
					ЭлементОтбораНеСоответствияДокументовПоСумме.Использование = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если НеСоответствияДокументовПоДате Тогда
				Если ЭлементОтбораНеСоответствияДокументовПоДате = Неопределено Тогда
					ЭлементОтбораНеСоответствияДокументовПоДате = ГруппаОтбораНеСоответствияДокументов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбораНеСоответствияДокументовПоДате.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НеСоответствиеПоДате");
					ЭлементОтбораНеСоответствияДокументовПоДате.ПредставлениеПользовательскойНастройки = "НеСоответствияДокументовПоДате_БыстрыйОтбор";
				КонецЕсли;
				ЭлементОтбораНеСоответствияДокументовПоДате.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбораНеСоответствияДокументовПоДате.ПравоеЗначение = Истина;
				ЭлементОтбораНеСоответствияДокументовПоДате.Использование = Истина;
			Иначе
				Если ЭлементОтбораНеСоответствияДокументовПоДате <> Неопределено Тогда
					ЭлементОтбораНеСоответствияДокументовПоДате.Использование = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если НеСоответствияДокументовПоЕДРПОУ Тогда
				Если ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ = Неопределено Тогда
					ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ = ГруппаОтбораНеСоответствияДокументов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НеСоответствиеПоЕДРПОУКонтрагента");
					ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ.ПредставлениеПользовательскойНастройки = "НеСоответствияДокументовПоЕДРПОУ_БыстрыйОтбор";
				КонецЕсли;
				ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ.ПравоеЗначение = Истина;
				ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ.Использование = Истина;
			Иначе
				Если ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ <> Неопределено Тогда
					ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ.Использование = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если НеСоответствияДокументовПоКодуФилиала Тогда
				Если ЭлементОтбораНеСоответствияДокументовПоКодуФилиала = Неопределено Тогда
					ЭлементОтбораНеСоответствияДокументовПоКодуФилиала = ГруппаОтбораНеСоответствияДокументов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбораНеСоответствияДокументовПоКодуФилиала.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НеСоответствиеПоФилиалКонтрагента");
					ЭлементОтбораНеСоответствияДокументовПоКодуФилиала.ПредставлениеПользовательскойНастройки = "НеСоответствияДокументовПоКодуФилиала_БыстрыйОтбор";
				КонецЕсли;
				ЭлементОтбораНеСоответствияДокументовПоКодуФилиала.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбораНеСоответствияДокументовПоКодуФилиала.ПравоеЗначение = Истина;
				ЭлементОтбораНеСоответствияДокументовПоКодуФилиала.Использование = Истина;
			Иначе
				Если ЭлементОтбораНеСоответствияДокументовПоКодуФилиала <> Неопределено Тогда
					ЭлементОтбораНеСоответствияДокументовПоКодуФилиала.Использование = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//...ОтборНеСоответствияДокументов
	
	ОбновитьПослеВыполненияДействийСЭлектроннымиДокументамиЖурналПервичныеДокументы();
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкиОтборовДокументыНДСНаКлиенте()
	УстановитьБыстрыйОтборПоЗначению(СписокДокументовДокументыНДС, "Код", ОтборКодДокументыНДС, ВидСравненияКомпоновкиДанных.Равно);
	
	Если ОтборНомерУсловиеДокументыНДС = ПредопределенноеЗначение("Перечисление.скEDI_УсловияОтбораСтрока.Содержит") Тогда
		ОтборНомерЗначение = ОтборНомерДокументыНДС;
		ОтборНомерУсловиеЗначение = ВидСравненияКомпоновкиДанных.Содержит;
	ИначеЕсли ОтборНомерУсловиеДокументыНДС = ПредопределенноеЗначение("Перечисление.скEDI_УсловияОтбораСтрока.Равно") Тогда
		ОтборНомерЗначение = ОтборНомерДокументыНДС;
		ОтборНомерУсловиеЗначение = ВидСравненияКомпоновкиДанных.Равно;
	ИначеЕсли ОтборНомерУсловиеДокументыНДС = ПредопределенноеЗначение("Перечисление.скEDI_УсловияОтбораСтрока.НачинаетсяС") Тогда
		ОтборНомерЗначение = ОтборНомерДокументыНДС;
		ОтборНомерУсловиеЗначение = ВидСравненияКомпоновкиДанных.НачинаетсяС;
	ИначеЕсли ОтборНомерУсловиеДокументыНДС = ПредопределенноеЗначение("Перечисление.скEDI_УсловияОтбораСтрока.ЗаканчиваетсяНа") Тогда
		Если ЗначениеЗаполнено(ОтборНомерДокументыНДС) Тогда
			ОтборНомерЗначение = "%" + ОтборНомерДокументыНДС;
		Иначе
			ОтборНомерЗначение = "";
		КонецЕсли;
		ОтборНомерУсловиеЗначение = ВидСравненияКомпоновкиДанных.Подобно;
	ИначеЕсли ОтборНомерУсловиеДокументыНДС = ПредопределенноеЗначение("Перечисление.скEDI_УсловияОтбораСтрока.Заполнено") Тогда
		ОтборНомерЗначение = "";
		ОтборНомерУсловиеЗначение = ВидСравненияКомпоновкиДанных.Заполнено;
	ИначеЕсли ОтборНомерУсловиеДокументыНДС = ПредопределенноеЗначение("Перечисление.скEDI_УсловияОтбораСтрока.НеЗаполнено") Тогда
		ОтборНомерЗначение = "";
		ОтборНомерУсловиеЗначение = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ИначеЕсли ОтборНомерУсловиеДокументыНДС = ПредопределенноеЗначение("Перечисление.скEDI_УсловияОтбораСтрока.Подобно") Тогда
		ОтборНомерЗначение = ОтборНомерДокументыНДС;
		ОтборНомерУсловиеЗначение = ВидСравненияКомпоновкиДанных.Подобно;
	ИначеЕсли ОтборНомерУсловиеДокументыНДС = ПредопределенноеЗначение("Перечисление.скEDI_УсловияОтбораСтрока.НеПодобно") Тогда
		ОтборНомерЗначение = ОтборНомерДокументыНДС;
		ОтборНомерУсловиеЗначение = ВидСравненияКомпоновкиДанных.НеПодобно;
	Иначе
		ОтборНомерЗначение = "";
		ОтборНомерУсловиеЗначение = ВидСравненияКомпоновкиДанных.Содержит;
	КонецЕсли;
	УстановитьБыстрыйОтборПоЗначению(СписокДокументовДокументыНДС, "ЭлектронныйДокументНомерДокумента", ОтборНомерЗначение, ОтборНомерУсловиеЗначение);
	
	УстановитьБыстрыйОтборПоЗначению(СписокДокументовДокументыНДС, "Контрагент", КонтрагентДляОтбораДокументыНДС, ВидСравненияКомпоновкиДанных.Равно);
		
	УстановитьБыстрыйОтборПоСписку(СписокДокументовДокументыНДС, "ВидЭлектронногоДокумента", ОтборВидЭлектронногоДокументаДокументыНДС);
	УстановитьБыстрыйОтборПоСписку(СписокДокументовДокументыНДС, "ВхИсх", ОтборВхИсхДокументыНДС);
	УстановитьБыстрыйОтборПоСписку(СписокДокументовДокументыНДС, "Состояние", ОтборСостояниеДокументыНДС);
	УстановитьБыстрыйОтборПоСписку(СписокДокументовДокументыНДС, "СостояниеРегистрацияВДФС", ОтборСостояниеРегистрацияВДФСДокументыНДС);
	УстановитьБыстрыйОтборПоСписку(СписокДокументовДокументыНДС, "СоответствиеДокументов", ОтборСоответствияДокументовДокументыНДС);	
	
	
	//ТребуетОбработки
	ТекЭлементОтбораТребуетОбработки = Неопределено;
	Для Каждого ЭлементОтбора Из СписокДокументовДокументыНДС.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементОтбора.ПредставлениеПользовательскойНастройки = "Обработано_БыстрыйОтбор" Тогда
			ТекЭлементОтбораТребуетОбработки = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ОтборТолькоТребующиеОбработкиДокументыНДС Тогда
		Если ТекЭлементОтбораТребуетОбработки = Неопределено Тогда
			ТекЭлементОтбораТребуетОбработки = СписокДокументовДокументыНДС.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ТекЭлементОтбораТребуетОбработки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Обработано");
			ТекЭлементОтбораТребуетОбработки.ПредставлениеПользовательскойНастройки = "Обработано_БыстрыйОтбор";
		КонецЕсли;
		ТекЭлементОтбораТребуетОбработки.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
		ТекЭлементОтбораТребуетОбработки.ПравоеЗначение= Ложь;
		ТекЭлементОтбораТребуетОбработки.Использование = Истина;
	Иначе
		Если ТекЭлементОтбораТребуетОбработки <> Неопределено Тогда
			ТекЭлементОтбораТребуетОбработки.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//ОтображатьВсеВариантыДокументов
	ТекЭлементОтбораОтображатьТолькоОсновнойВариантДокументов = Неопределено;
	Для Каждого ЭлементОтбора Из СписокДокументовДокументыНДС.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементОтбора.ПредставлениеПользовательскойНастройки = "ОтображатьТолькоОсновнойВариантДокументов_БыстрыйОтбор" Тогда
			ТекЭлементОтбораОтображатьТолькоОсновнойВариантДокументов = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если не ОтборОтображатьВсеВариантыДокументовДокументыНДС Тогда
		Если ТекЭлементОтбораОтображатьТолькоОсновнойВариантДокументов = Неопределено Тогда
			ТекЭлементОтбораОтображатьТолькоОсновнойВариантДокументов = СписокДокументовДокументыНДС.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ТекЭлементОтбораОтображатьТолькоОсновнойВариантДокументов.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоОсновнойВариант");
			ТекЭлементОтбораОтображатьТолькоОсновнойВариантДокументов.ПредставлениеПользовательскойНастройки = "ОтображатьТолькоОсновнойВариантДокументов_БыстрыйОтбор";
		КонецЕсли;
		ТекЭлементОтбораОтображатьТолькоОсновнойВариантДокументов.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
		ТекЭлементОтбораОтображатьТолькоОсновнойВариантДокументов.ПравоеЗначение= Истина;
		ТекЭлементОтбораОтображатьТолькоОсновнойВариантДокументов.Использование = Истина;
	Иначе
		Если ТекЭлементОтбораОтображатьТолькоОсновнойВариантДокументов <> Неопределено Тогда
			ТекЭлементОтбораОтображатьТолькоОсновнойВариантДокументов.Использование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//
	//ОтборНеСоответствияДокументов
	ГруппаОтбораНеСоответствияДокументов = Неопределено;
	ЭлементОтбораНеСоответствияДокументовПоСумме = Неопределено;
	ЭлементОтбораНеСоответствияДокументовПоДате = Неопределено;
	ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ = Неопределено;
	ЭлементОтбораНеСоответствияДокументовПоКодуФилиала = Неопределено;
	Для Каждого ЭлементОтбора Из СписокДокументовДокументыНДС.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбора.ПредставлениеПользовательскойНастройки = "НеСоответствияДокументов_БыстрыйОтбор" Тогда
				ГруппаОтбораНеСоответствияДокументов = ЭлементОтбора;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ГруппаОтбораНеСоответствияДокументов <> Неопределено Тогда
		Для Каждого ЭлементОтбора Из ГруппаОтбораНеСоответствияДокументов.Элементы Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Если ЭлементОтбора.ПредставлениеПользовательскойНастройки = "НеСоответствияДокументовПоСумме_БыстрыйОтбор" Тогда
					ЭлементОтбораНеСоответствияДокументовПоСумме = ЭлементОтбора;
				ИначеЕсли ЭлементОтбора.ПредставлениеПользовательскойНастройки = "НеСоответствияДокументовПоДате_БыстрыйОтбор" Тогда
					ЭлементОтбораНеСоответствияДокументовПоДате = ЭлементОтбора;
				ИначеЕсли ЭлементОтбора.ПредставлениеПользовательскойНастройки = "НеСоответствияДокументовПоЕДРПОУ_БыстрыйОтбор" Тогда
					ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ = ЭлементОтбора;
				ИначеЕсли ЭлементОтбора.ПредставлениеПользовательскойНастройки = "НеСоответствияДокументовПоКодуФилиала_БыстрыйОтбор" Тогда
					ЭлементОтбораНеСоответствияДокументовПоКодуФилиала = ЭлементОтбора;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ОтборНеСоответствияДокументовДокументыНДС.Количество() = 0 Тогда
		Если ГруппаОтбораНеСоответствияДокументов <> Неопределено Тогда
			ГруппаОтбораНеСоответствияДокументов.Использование = Ложь;
		КонецЕсли;
		Если ЭлементОтбораНеСоответствияДокументовПоСумме <> Неопределено Тогда
			ЭлементОтбораНеСоответствияДокументовПоСумме.Использование = Ложь;
		КонецЕсли;
		Если ЭлементОтбораНеСоответствияДокументовПоДате <> Неопределено Тогда
			ЭлементОтбораНеСоответствияДокументовПоДате.Использование = Ложь;
		КонецЕсли;
		Если ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ <> Неопределено Тогда
			ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ.Использование = Ложь;
		КонецЕсли;
		Если ЭлементОтбораНеСоответствияДокументовПоКодуФилиала <> Неопределено Тогда
			ЭлементОтбораНеСоответствияДокументовПоКодуФилиала.Использование = Ложь;
		КонецЕсли;
	Иначе
		Все = Ложь;
		Для Каждого ЭлементЗначенияОтбора из ОтборНеСоответствияДокументовДокументыНДС Цикл
			Если ЭлементЗначенияОтбора.Значение = Неопределено Тогда
				Все = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Все Тогда
			Если ГруппаОтбораНеСоответствияДокументов <> Неопределено Тогда
				ГруппаОтбораНеСоответствияДокументов.Использование = Ложь;
			КонецЕсли;
			Если ЭлементОтбораНеСоответствияДокументовПоСумме <> Неопределено Тогда
				ЭлементОтбораНеСоответствияДокументовПоСумме.Использование = Ложь;
			КонецЕсли;
			Если ЭлементОтбораНеСоответствияДокументовПоДате <> Неопределено Тогда
				ЭлементОтбораНеСоответствияДокументовПоДате.Использование = Ложь;
			КонецЕсли;
			Если ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ <> Неопределено Тогда
				ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ.Использование = Ложь;
			КонецЕсли;
			Если ЭлементОтбораНеСоответствияДокументовПоКодуФилиала <> Неопределено Тогда
				ЭлементОтбораНеСоответствияДокументовПоКодуФилиала.Использование = Ложь;
			КонецЕсли;
		Иначе
			Если ГруппаОтбораНеСоответствияДокументов = Неопределено Тогда
				ГруппаОтбораНеСоответствияДокументов = СписокДокументовДокументыНДС.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтбораНеСоответствияДокументов.ПредставлениеПользовательскойНастройки = "НеСоответствияДокументов_БыстрыйОтбор";
			КонецЕсли;     //СписокДокументов.Отбор.Элементы[0].ТипГруппы
			ГруппаОтбораНеСоответствияДокументов.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ГруппаОтбораНеСоответствияДокументов.Использование = Истина;
			
			НеСоответствияДокументовПоСумме = Ложь;
			НеСоответствияДокументовПоДате = Ложь;
			НеСоответствияДокументовПоЕДРПОУ = Ложь;
			НеСоответствияДокументовПоКодуФилиала = Ложь;
			Для Каждого ЭлементСписка Из ОтборНеСоответствияДокументовДокументыНДС Цикл
				Если ЭлементСписка.Значение = "ПоСумме" Тогда
					НеСоответствияДокументовПоСумме = Истина;
				ИначеЕсли ЭлементСписка.Значение = "ПоДате" Тогда
					НеСоответствияДокументовПоДате = Истина;
				ИначеЕсли ЭлементСписка.Значение = "ПоЕДРПОУ" Тогда
					НеСоответствияДокументовПоЕДРПОУ = Истина;
				ИначеЕсли ЭлементСписка.Значение = "ПоКодуФилиала" Тогда
					НеСоответствияДокументовПоКодуФилиала = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если НеСоответствияДокументовПоСумме Тогда
				Если ЭлементОтбораНеСоответствияДокументовПоСумме = Неопределено Тогда
					ЭлементОтбораНеСоответствияДокументовПоСумме = ГруппаОтбораНеСоответствияДокументов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбораНеСоответствияДокументовПоСумме.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НеСоответствиеПоСуммеДокумента");
					ЭлементОтбораНеСоответствияДокументовПоСумме.ПредставлениеПользовательскойНастройки = "НеСоответствияДокументовПоСумме_БыстрыйОтбор";
				КонецЕсли;
				ЭлементОтбораНеСоответствияДокументовПоСумме.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбораНеСоответствияДокументовПоСумме.ПравоеЗначение = Истина;
				ЭлементОтбораНеСоответствияДокументовПоСумме.Использование = Истина;
			Иначе
				Если ЭлементОтбораНеСоответствияДокументовПоСумме <> Неопределено Тогда
					ЭлементОтбораНеСоответствияДокументовПоСумме.Использование = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если НеСоответствияДокументовПоДате Тогда
				Если ЭлементОтбораНеСоответствияДокументовПоДате = Неопределено Тогда
					ЭлементОтбораНеСоответствияДокументовПоДате = ГруппаОтбораНеСоответствияДокументов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбораНеСоответствияДокументовПоДате.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НеСоответствиеПоДате");
					ЭлементОтбораНеСоответствияДокументовПоДате.ПредставлениеПользовательскойНастройки = "НеСоответствияДокументовПоДате_БыстрыйОтбор";
				КонецЕсли;
				ЭлементОтбораНеСоответствияДокументовПоДате.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбораНеСоответствияДокументовПоДате.ПравоеЗначение = Истина;
				ЭлементОтбораНеСоответствияДокументовПоДате.Использование = Истина;
			Иначе
				Если ЭлементОтбораНеСоответствияДокументовПоДате <> Неопределено Тогда
					ЭлементОтбораНеСоответствияДокументовПоДате.Использование = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если НеСоответствияДокументовПоЕДРПОУ Тогда
				Если ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ = Неопределено Тогда
					ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ = ГруппаОтбораНеСоответствияДокументов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НеСоответствиеПоЕДРПОУКонтрагента");
					ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ.ПредставлениеПользовательскойНастройки = "НеСоответствияДокументовПоЕДРПОУ_БыстрыйОтбор";
				КонецЕсли;
				ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ.ПравоеЗначение = Истина;
				ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ.Использование = Истина;
			Иначе
				Если ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ <> Неопределено Тогда
					ЭлементОтбораНеСоответствияДокументовПоЕДРПОУ.Использование = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если НеСоответствияДокументовПоКодуФилиала Тогда
				Если ЭлементОтбораНеСоответствияДокументовПоКодуФилиала = Неопределено Тогда
					ЭлементОтбораНеСоответствияДокументовПоКодуФилиала = ГруппаОтбораНеСоответствияДокументов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбораНеСоответствияДокументовПоКодуФилиала.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НеСоответствиеПоФилиалКонтрагента");
					ЭлементОтбораНеСоответствияДокументовПоКодуФилиала.ПредставлениеПользовательскойНастройки = "НеСоответствияДокументовПоКодуФилиала_БыстрыйОтбор";
				КонецЕсли;
				ЭлементОтбораНеСоответствияДокументовПоКодуФилиала.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбораНеСоответствияДокументовПоКодуФилиала.ПравоеЗначение = Истина;
				ЭлементОтбораНеСоответствияДокументовПоКодуФилиала.Использование = Истина;
			Иначе
				Если ЭлементОтбораНеСоответствияДокументовПоКодуФилиала <> Неопределено Тогда
					ЭлементОтбораНеСоответствияДокументовПоКодуФилиала.Использование = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//...ОтборНеСоответствияДокументов
	
	ОбновитьПослеВыполненияДействийСЭлектроннымиДокументамиЖурналДокументыНДС();
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкиОтборов(Команда)
	ПрименитьНастройкиОтборовНаКлиенте();
	ЗаписатьНастройкиПоУмолчаниюВРегистр_Сервер(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы"), ПолучитьСтруктуруНастроек());
	РасчитатьИтогиПоСпискуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкиОтборовДокументыНДС(Команда)
	ПрименитьНастройкиОтборовДокументыНДСНаКлиенте();
	ЗаписатьНастройкиПоУмолчаниюВРегистр_Сервер(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС"), ПолучитьСтруктуруНастроекДокументыНДС());
	РасчитатьИтогиПоСпискуДокументыНДСНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияФормыВыбораДанныхДляОтборов(ВыбранныеПоляОтбора, ДополнительныеПараметры = Неопределено) Экспорт
	Если ВыбранныеПоляОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ДополнительныеПараметры = "ВидЭлектронногоДокумента" Тогда
		ОтборВидЭлектронногоДокумента = ВыбранныеПоляОтбора;
	ИначеЕсли ДополнительныеПараметры = "СостояниеЭлектронногоДокумента" Тогда
		ОтборСостояние = ВыбранныеПоляОтбора;
	//ИначеЕсли ДополнительныеПараметры = "СостояниеЭлектронногоДокументаРегистрацияВДФС" Тогда
	//	ОтборСостояниеРегистрацияВДФС = ВыбранныеПоляОтбора;
	ИначеЕсли ДополнительныеПараметры = "СоответствиеЭлектронныхДокументов" Тогда
		ОтборСоответствияДокументов = ВыбранныеПоляОтбора;
	ИначеЕсли ДополнительныеПараметры = "ОтборВхИсх" Тогда
		ОтборВхИсх = ВыбранныеПоляОтбора;	
	ИначеЕсли ДополнительныеПараметры = "СверкаСУчетнымиДокументами" Тогда
		ОтборНеСоответствияДокументов = ВыбранныеПоляОтбора;	
	ИначеЕсли ДополнительныеПараметры = "ВидЭлектронногоДокументаДокументыНДС" Тогда
		ОтборВидЭлектронногоДокументаДокументыНДС = ВыбранныеПоляОтбора;
	ИначеЕсли ДополнительныеПараметры = "СостояниеЭлектронногоДокументаДокументыНДС" Тогда
		ОтборСостояниеДокументыНДС = ВыбранныеПоляОтбора;
	ИначеЕсли ДополнительныеПараметры = "СостояниеЭлектронногоДокументаРегистрацияВДФСДокументыНДС" Тогда
		ОтборСостояниеРегистрацияВДФСДокументыНДС = ВыбранныеПоляОтбора;
	ИначеЕсли ДополнительныеПараметры = "СоответствиеЭлектронныхДокументовДокументыНДС" Тогда
		ОтборСоответствияДокументовДокументыНДС = ВыбранныеПоляОтбора;
	ИначеЕсли ДополнительныеПараметры = "ОтборВхИсхДокументыНДС" Тогда
		ОтборВхИсхДокументыНДС = ВыбранныеПоляОтбора;	
	ИначеЕсли ДополнительныеПараметры = "СверкаСУчетнымиДокументамиДокументыНДС" Тогда
		ОтборНеСоответствияДокументовДокументыНДС = ВыбранныеПоляОтбора;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидЭлектронногоДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ПолеОтбора, Организация, СписокТекущий", "ВидЭлектронногоДокумента", Объект.Организация, ОтборВидЭлектронногоДокумента);
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
		ВыбранныеПоляОтбора = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаВыбораДанныхДляОтборов", ПараметрыФормы).ОткрытьМодально();
		ПослеЗакрытияФормыВыбораДанныхДляОтборов(ВыбранныеПоляОтбора, "ВидЭлектронногоДокумента");
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ПолучитьФормуВыбораДанныхДляОтбора(ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидЭлектронногоДокументаДокументыНДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ПолеОтбора, Организация, СписокТекущий", "ВидЭлектронногоДокументаДокументыНДС", Объект.Организация, ОтборВидЭлектронногоДокументаДокументыНДС);
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
		ВыбранныеПоляОтбора = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаВыбораДанныхДляОтборов", ПараметрыФормы).ОткрытьМодально();
		ПослеЗакрытияФормыВыбораДанныхДляОтборов(ВыбранныеПоляОтбора, "ВидЭлектронногоДокументаДокументыНДС");
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ПолучитьФормуВыбораДанныхДляОтбора(ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ПолеОтбора, Организация, СписокТекущий", "СостояниеЭлектронногоДокумента", Объект.Организация, ОтборСостояние);
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
		ВыбранныеПоляОтбора = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаВыбораДанныхДляОтборов", ПараметрыФормы).ОткрытьМодально();
		ПослеЗакрытияФормыВыбораДанныхДляОтборов(ВыбранныеПоляОтбора, "СостояниеЭлектронногоДокумента");
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ПолучитьФормуВыбораДанныхДляОтбора(ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеДокументыНДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ПолеОтбора, Организация, СписокТекущий", "СостояниеЭлектронногоДокументаДокументыНДС", Объект.Организация, ОтборСостояниеДокументыНДС);
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
		ВыбранныеПоляОтбора = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаВыбораДанныхДляОтборов", ПараметрыФормы).ОткрытьМодально();
		ПослеЗакрытияФормыВыбораДанныхДляОтборов(ВыбранныеПоляОтбора, "СостояниеЭлектронногоДокументаДокументыНДС");
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ПолучитьФормуВыбораДанныхДляОтбора(ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеРегистрацияВДФСДокументыНДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ПолеОтбора, Организация, СписокТекущий", "СостояниеЭлектронногоДокументаРегистрацияВДФСДокументыНДС", Объект.Организация, ОтборСостояниеРегистрацияВДФСДокументыНДС);
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
		ВыбранныеПоляОтбора = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаВыбораДанныхДляОтборов", ПараметрыФормы).ОткрытьМодально();
		ПослеЗакрытияФормыВыбораДанныхДляОтборов(ВыбранныеПоляОтбора, "СостояниеЭлектронногоДокументаРегистрацияВДФСДокументыНДС");
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ПолучитьФормуВыбораДанныхДляОтбора(ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОтборВхИсхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ПолеОтбора, Организация, СписокТекущий", "ОтборВхИсх", Объект.Организация, ОтборВхИсх);
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
		ВыбранныеПоляОтбора = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаВыбораДанныхДляОтборов", ПараметрыФормы).ОткрытьМодально();
		ПослеЗакрытияФормыВыбораДанныхДляОтборов(ВыбранныеПоляОтбора, "ОтборВхИсх");
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ПолучитьФормуВыбораДанныхДляОтбора(ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборВхИсхДокументыНДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ПолеОтбора, Организация, СписокТекущий", "ОтборВхИсхДокументыНДС", Объект.Организация, ОтборВхИсхДокументыНДС);
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
		ВыбранныеПоляОтбора = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаВыбораДанныхДляОтборов", ПараметрыФормы).ОткрытьМодально();
		ПослеЗакрытияФормыВыбораДанныхДляОтборов(ВыбранныеПоляОтбора, "ОтборВхИсхДокументыНДС");
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ПолучитьФормуВыбораДанныхДляОтбора(ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборСоответствияДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ПолеОтбора, Организация, СписокТекущий", "СоответствиеЭлектронныхДокументов", Объект.Организация, ОтборСоответствияДокументов);
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
		ВыбранныеПоляОтбора = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаВыбораДанныхДляОтборов", ПараметрыФормы).ОткрытьМодально();
		ПослеЗакрытияФормыВыбораДанныхДляОтборов(ВыбранныеПоляОтбора, "СоответствиеЭлектронныхДокументов");
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ПолучитьФормуВыбораДанныхДляОтбора(ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборСоответствияДокументовДокументыНДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ПолеОтбора, Организация, СписокТекущий", "СоответствиеЭлектронныхДокументовДокументыНДС", Объект.Организация, ОтборСоответствияДокументовДокументыНДС);
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
		ВыбранныеПоляОтбора = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаВыбораДанныхДляОтборов", ПараметрыФормы).ОткрытьМодально();
		ПослеЗакрытияФормыВыбораДанныхДляОтборов(ВыбранныеПоляОтбора, "СоответствиеЭлектронныхДокументовДокументыНДС");
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ПолучитьФормуВыбораДанныхДляОтбора(ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоответствиеМинимальнойВерсииEDIПровайдера_Клиент()
	ТекстВопроса = ПроверитьСоответствиеМинимальнойВерсииEDIПровайдера();

	Если ТекстВопроса = "" Тогда
		Возврат;
	КонецЕсли;
	
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
		Предупреждение(ТекстВопроса);
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ПоказатьПредупреждение_83(ТекстВопроса);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗапущенТолстыйКлиент(Отказ) 
	
	Если НЕ скEDI_ОбщегоНазначенияКлиент.ЭтоТолстыйКлиент() Тогда
		ТекстВопроса = НСтр("ru = '1С: Предприятие запущено в режиме """"Тонкий клиент"""". Некоторые функции могут работать некорректно.'; 
						    |uk = '1С: Підприємство відкрито в режимі ""Тонкий клієнт"". Деякі функції можуть працювати некоректно.'");
		Если скEDI_ОбщегоНазначения.ЭтоРежимБезМодальности() Тогда
			Сообщить(ТекстВопроса);
		Иначе
			Ответ = Вопрос(ТекстВопроса + НСтр("ru = ' Открыть рабочий стол'; uk = ' Відкрити робочий стіл?'"), РежимДиалогаВопрос.ДаНет);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьСоответствиеМинимальнойВерсииEDIПровайдера()
	
	ТекстВопроса = "";
	МинимальнаяВерсия = скEDI_ОбщегоНазначения.ПолучитьМинимальнуюВерсиюEDIПровайдера();
	ОтветEDIПровайдера = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("svc/version", Null);
	Если ОтветEDIПровайдера.Code = 0 Тогда
		пВерсия = ОтветEDIПровайдера.Version;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(пВерсия) Тогда
		ТекстВопроса = НСтр("ru = 'Не обнаружена служба EDI-провайдера.'; uk = 'Не знайдена служба EDI-провайдера.'")
	ИначеЕсли скEDI_ОбщегоНазначения.СравнитьВерсии(МинимальнаяВерсия, пВерсия) > 0 Тогда
		ТекстВопроса = НСтр("ru = 'Версия EDI-провайдера ('; uk = 'Версія EDI-провайдера ('")
		+ пВерсия
		+ НСтр("ru = ') не соответствует минимальным требованиям подсистемы. 
                |Необходимо обновить сервис до актуальной версии - '; uk = ') не відповідає мінімальним вимогам підсистеми. 
                |Необхідно оновити сервіс до актуальної версії -'")
		+ МинимальнаяВерсия;
	КонецЕсли;
	
	Возврат ТекстВопроса;
	
КонецФункции

&НаКлиенте
Процедура ОтборНеСоответствияДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ПолеОтбора, Организация, СписокТекущий", "СверкаСУчетнымиДокументами", Объект.Организация, ОтборНеСоответствияДокументов);
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
		ВыбранныеПоляОтбора = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаВыбораДанныхДляОтборовИли", ПараметрыФормы).ОткрытьМодально();
		ПослеЗакрытияФормыВыбораДанныхДляОтборов(ВыбранныеПоляОтбора, "СверкаСУчетнымиДокументами");
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ПолучитьФормуВыбораДанныхДляОтбораИли(ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборНеСоответствияДокументовДокументыНДСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ПолеОтбора, Организация, СписокТекущий", "СверкаСУчетнымиДокументамиДокументыНДС", Объект.Организация, ОтборНеСоответствияДокументовДокументыНДС);
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
		ВыбранныеПоляОтбора = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаВыбораДанныхДляОтборовИли", ПараметрыФормы).ОткрытьМодально();
		ПослеЗакрытияФормыВыбораДанныхДляОтборов(ВыбранныеПоляОтбора, "СверкаСУчетнымиДокументамиДокументыНДС");
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ПолучитьФормуВыбораДанныхДляОтбораИли(ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокВариантыДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	лТекущиеДанныеСпискаДокументов = Элементы.СписокВариантыДокументов.ТекущиеДанные;
	Если лТекущиеДанныеСпискаДокументов <> Неопределено Тогда
		Если ЗначениеЗаполнено(лТекущиеДанныеСпискаДокументов.ЭлектронныйДокумент) Тогда
			лПараметрыФормыОтображенияЭлектронногоДокумента = Новый Структура("ЭлектронныйДокумент", лТекущиеДанныеСпискаДокументов.ЭлектронныйДокумент);
		Иначе
			лПараметрыФормыОтображенияЭлектронногоДокумента = Новый Структура;
			лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("Документ1С", лТекущиеДанныеСпискаДокументов.Документ1С);
			лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("Организация", Объект.Организация);
			лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("ВидЭлектронногоДокумента", лТекущиеДанныеСпискаДокументов.ВидЭлектронногоДокумента);
		КонецЕсли;
		КлючУникальностиФормыОтображениеЭлектронныхДокументов = скEDI_ОбщегоНазначения.ПолучитьКлючУникальностиФормыОтображениеЭлектронныхДокументов(лПараметрыФормыОтображенияЭлектронногоДокумента);
		ОткрытьФорму("ОбщаяФорма.скEDI_ОтображениеЭлектронныхДокументов", лПараметрыФормыОтображенияЭлектронногоДокумента, ЭтаФорма, КлючУникальностиФормыОтображениеЭлектронныхДокументов);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокВариантыДокументовДокументыНДСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	лТекущиеДанныеСпискаДокументов = Элементы.СписокВариантыДокументовДокументыНДС.ТекущиеДанные;
	Если лТекущиеДанныеСпискаДокументов <> Неопределено Тогда
		Если ЗначениеЗаполнено(лТекущиеДанныеСпискаДокументов.ЭлектронныйДокумент) Тогда
			лПараметрыФормыОтображенияЭлектронногоДокумента = Новый Структура("ЭлектронныйДокумент", лТекущиеДанныеСпискаДокументов.ЭлектронныйДокумент);
		Иначе
			лПараметрыФормыОтображенияЭлектронногоДокумента = Новый Структура;
			лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("Документ1С", лТекущиеДанныеСпискаДокументов.Документ1С);
			лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("Организация", Объект.Организация);
			лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("ВидЭлектронногоДокумента", лТекущиеДанныеСпискаДокументов.ВидЭлектронногоДокумента);
		КонецЕсли;
		КлючУникальностиФормыОтображениеЭлектронныхДокументов = скEDI_ОбщегоНазначения.ПолучитьКлючУникальностиФормыОтображениеЭлектронныхДокументов(лПараметрыФормыОтображенияЭлектронногоДокумента);
		ОткрытьФорму("ОбщаяФорма.скEDI_ОтображениеЭлектронныхДокументов", лПараметрыФормыОтображенияЭлектронногоДокумента, ЭтаФорма, КлючУникальностиФормыОтображениеЭлектронныхДокументов);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокСвязанныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	лТекущиеДанныеСпискаДокументов = Элементы.СписокСвязанныеДокументы.ТекущиеДанные;
	Если лТекущиеДанныеСпискаДокументов <> Неопределено Тогда
		Если ЗначениеЗаполнено(лТекущиеДанныеСпискаДокументов.ЭлектронныйДокумент) Тогда
			лПараметрыФормыОтображенияЭлектронногоДокумента = Новый Структура("ЭлектронныйДокумент", лТекущиеДанныеСпискаДокументов.ЭлектронныйДокумент);
		Иначе
			лПараметрыФормыОтображенияЭлектронногоДокумента = Новый Структура;
			лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("Документ1С", лТекущиеДанныеСпискаДокументов.Документ1С);
			лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("Организация", Объект.Организация);
			лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("ВидЭлектронногоДокумента", лТекущиеДанныеСпискаДокументов.ВидЭлектронногоДокумента);
		КонецЕсли;
		КлючУникальностиФормыОтображениеЭлектронныхДокументов = скEDI_ОбщегоНазначения.ПолучитьКлючУникальностиФормыОтображениеЭлектронныхДокументов(лПараметрыФормыОтображенияЭлектронногоДокумента);
		ОткрытьФорму("ОбщаяФорма.скEDI_ОтображениеЭлектронныхДокументов", лПараметрыФормыОтображенияЭлектронногоДокумента, ЭтаФорма, КлючУникальностиФормыОтображениеЭлектронныхДокументов);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокСвязанныеДокументыДокументыНДСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	лТекущиеДанныеСпискаДокументов = Элементы.СписокСвязанныеДокументыДокументыНДС.ТекущиеДанные;
	Если лТекущиеДанныеСпискаДокументов <> Неопределено Тогда
		Если ЗначениеЗаполнено(лТекущиеДанныеСпискаДокументов.ЭлектронныйДокумент) Тогда
			лПараметрыФормыОтображенияЭлектронногоДокумента = Новый Структура("ЭлектронныйДокумент", лТекущиеДанныеСпискаДокументов.ЭлектронныйДокумент);
		Иначе
			лПараметрыФормыОтображенияЭлектронногоДокумента = Новый Структура;
			лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("Документ1С", лТекущиеДанныеСпискаДокументов.Документ1С);
			лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("Организация", Объект.Организация);
			лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("ВидЭлектронногоДокумента", лТекущиеДанныеСпискаДокументов.ВидЭлектронногоДокумента);
		КонецЕсли;
		КлючУникальностиФормыОтображениеЭлектронныхДокументов = скEDI_ОбщегоНазначения.ПолучитьКлючУникальностиФормыОтображениеЭлектронныхДокументов(лПараметрыФормыОтображенияЭлектронногоДокумента);
		ОткрытьФорму("ОбщаяФорма.скEDI_ОтображениеЭлектронныхДокументов", лПараметрыФормыОтображенияЭлектронногоДокумента, ЭтаФорма, КлючУникальностиФормыОтображениеЭлектронныхДокументов);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьКлючЗаписиСписокДокументов(Организация, ЭлектронныйДокумент, Документ1С, ВидЭлектронногоДокумента)
	ЗначениеКлюча = Новый Структура;
	ЗначениеКлюча.Вставить("Организация", Организация);
	ЗначениеКлюча.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
	ЗначениеКлюча.Вставить("Документ1С", Документ1С);
	ЗначениеКлюча.Вставить("ВидЭлектронногоДокумента", ВидЭлектронногоДокумента);
	Возврат РегистрыСведений.скEDI_ЭлектронныеДокументы.СоздатьКлючЗаписи(ЗначениеКлюча);
КонецФункции

&НаКлиенте
Процедура СообщенияПоДокументамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ДанныеВыбраннойСтроки = Элементы.СообщенияПоДокументам.ДанныеСтроки(ВыбраннаяСтрока);
	Элементы.СписокДокументов.ТекущаяСтрока = СоздатьКлючЗаписиСписокДокументов(ДанныеВыбраннойСтроки.Организация, ДанныеВыбраннойСтроки.ЭлектронныйДокумент, ДанныеВыбраннойСтроки.Документ1С, ДанныеВыбраннойСтроки.ВидЭлектронногоДокумента);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СообщенияПоДокументамДокументыНДСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ДанныеВыбраннойСтроки = Элементы.СообщенияПоДокументамДокументыНДС.ДанныеСтроки(ВыбраннаяСтрока);
	Элементы.СписокДокументовДокументыНДС.ТекущаяСтрока = СоздатьКлючЗаписиСписокДокументов(ДанныеВыбраннойСтроки.Организация, ДанныеВыбраннойСтроки.ЭлектронныйДокумент, ДанныеВыбраннойСтроки.Документ1С, ДанныеВыбраннойСтроки.ВидЭлектронногоДокумента);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СообщенияПоДокументамПоказать(Команда)
	Элементы.ГруппаСообщения.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СообщенияПоДокументамПоказатьДокументыНДС(Команда)
	Элементы.ГруппаСообщенияДокументыНДС.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СообщенияПоДокументамСкрыть(Команда)
	Элементы.ГруппаСообщения.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СообщенияПоДокументамСкрытьДокументыНДС(Команда)
	Элементы.ГруппаСообщенияДокументыНДС.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СообщенияПоДокументамПерейти(Команда)
	ДанныеВыбраннойСтроки = Элементы.СообщенияПоДокументам.ТекущиеДанные;
	Если ДанныеВыбраннойСтроки <> Неопределено Тогда
		Элементы.СписокДокументов.ТекущаяСтрока = СоздатьКлючЗаписиСписокДокументов(ДанныеВыбраннойСтроки.Организация, ДанныеВыбраннойСтроки.ЭлектронныйДокумент, ДанныеВыбраннойСтроки.Документ1С, ДанныеВыбраннойСтроки.ВидЭлектронногоДокумента);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СообщенияПоДокументамПерейтиДокументыНДС(Команда)
	ДанныеВыбраннойСтроки = Элементы.СообщенияПоДокументамДокументыНДС.ТекущиеДанные;
	Если ДанныеВыбраннойСтроки <> Неопределено Тогда
		Элементы.СписокДокументовДокументыНДС.ТекущаяСтрока = СоздатьКлючЗаписиСписокДокументов(ДанныеВыбраннойСтроки.Организация, ДанныеВыбраннойСтроки.ЭлектронныйДокумент, ДанныеВыбраннойСтроки.Документ1С, ДанныеВыбраннойСтроки.ВидЭлектронногоДокумента);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СообщенияПоДокументамОчистить(Команда)
	СообщенияПоДокументам.Очистить();
	Элементы.ГруппаСообщения.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СообщенияПоДокументамОчиститьДокументыНДС(Команда)
	СообщенияПоДокументамДокументыНДС.Очистить();
	Элементы.ГруппаСообщенияДокументыНДС.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкиОтборовСверкаСЕРНН(Команда)
	ПрименитьНастройкиОтборовСверкаСЕРНННаСервере();
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкиОтборовСверкаСЕРНННаСервере()
	СписокСверкаСЕРНН.Очистить();
	Элементы.ОтправитьЗапросы1ВЕРНН.Доступность = Ложь;
	
	ЕстьНеобходимостьОтправитьЗапрос = Ложь;
	
	ДанныеОбработкиДокументов = ПолучитьДанныеОбработкиДокументов(Объект.Организация);
	ДатаПоследнегоПолученияВх = ДанныеОбработкиДокументов.ДатаПоследнегоПриемаВходящихСообщений;
	ТекущаяДата = ТекущаяДата();
	
	ТекДата = НачалоДня(ФильтрПериодСверкаСЕРНН.ДатаНачала);
	ДатаОкончания = ФильтрПериодСверкаСЕРНН.ДатаОкончания;
	Если ДатаОкончания >= НачалоДня(ТекущаяДата) Тогда
		ДатаОкончания = НачалоДня(ТекущаяДата) - 1*24*60*60;
	КонецЕсли;
	СписокДат = Новый Массив;
	Пока ТекДата <= ДатаОкончания Цикл
		СписокДат.Добавить(ТекДата);
		ТекДата = ТекДата + 1*24*60*60;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	скEDI_НалоговыеДокументыСверкаСЕРНН.ДобавитьВЗапросВременнуюТаблицуСписокДат(Запрос, СписокДат);
	скEDI_НалоговыеДокументыСверкаСЕРНН.ДобавитьВЗапросВременнуюТаблицуВТЗапросы1(Запрос, Объект.Организация);
	скEDI_НалоговыеДокументыСверкаСЕРНН.ДобавитьВЗапросВременнуюТаблицуВТЗапросы1Последние(Запрос);
	скEDI_НалоговыеДокументыСверкаСЕРНН.ДобавитьВЗапросВременнуюТаблицуВТЗапросы1ИДокументы(Запрос, Объект.Организация);
	скEDI_НалоговыеДокументыСверкаСЕРНН.ДобавитьВЗапросВременнуюТаблицуВТЗапросы1ИДокументыСостояниеЗапроса2(Запрос, Объект.Организация);
	скEDI_НалоговыеДокументыСверкаСЕРНН.УстановитьТекстЗапросаЗляСпискаСверкаСЕРНН(Запрос);
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		НоваяСтрокаСписка = СписокСверкаСЕРНН.Добавить();
		НоваяСтрокаСписка.Дата = ВыборкаРезультатаЗапроса.Дата;
		НоваяСтрокаСписка.Запрос1 = ВыборкаРезультатаЗапроса.Запрос1;
		НоваяСтрокаСписка.Запрос1Номер = ВыборкаРезультатаЗапроса.Запрос1Номер;
		НоваяСтрокаСписка.Запрос1ДатаОтправки = ВыборкаРезультатаЗапроса.Запрос1ДатаОтправки;
		НоваяСтрокаСписка.Запрос1Состояние = ВыборкаРезультатаЗапроса.Запрос1Состояние;
		НоваяСтрокаСписка.Запрос1ДатаФормированияОтвета = ВыборкаРезультатаЗапроса.Запрос1ДатаФормированияОтвета;
		НоваяСтрокаСписка.Запрос1ДатаПолученияОтвета = ВыборкаРезультатаЗапроса.Запрос1ДатаПолученияОтвета;
		НоваяСтрокаСписка.КоличествоДокументовВВыписке = ВыборкаРезультатаЗапроса.КоличествоДокументовВВыписке;
		НоваяСтрокаСписка.КоличествоДокументовВВналичии = ВыборкаРезультатаЗапроса.КоличествоДокументовВВналичии;
		НоваяСтрокаСписка.КоличествоДокументовОтсутствуют = ВыборкаРезультатаЗапроса.КоличествоДокументовОтсутствуют;
		НоваяСтрокаСписка.КоличествоДокументовНетВыписке = ВыборкаРезультатаЗапроса.КоличествоДокументовНетВыписке;
		НоваяСтрокаСписка.Запрос2ДатаПолученияОтветов = ВыборкаРезультатаЗапроса.Запрос2ДатаПолученияОтветов;
		НоваяСтрокаСписка.Запрос2ДатаОтправкиЗапросов = ВыборкаРезультатаЗапроса.Запрос2ДатаОтправкиЗапросов;
		НоваяСтрокаСписка.Запрос2ДатаОтправкиЗапросовЗапросДоставлен = ВыборкаРезультатаЗапроса.Запрос2ДатаОтправкиЗапросовЗапросДоставлен;
		НоваяСтрокаСписка.Запрос2ДатаОтправкиЗапросовЗапросОтклонен = ВыборкаРезультатаЗапроса.Запрос2ДатаОтправкиЗапросовЗапросОтклонен;
		НоваяСтрокаСписка.Запрос1ПричинаОтклоненияДФС = ВыборкаРезультатаЗапроса.Запрос1ПричинаОтклоненияДФС;
		НоваяСтрокаСписка.Запрос2ЕстьНеобработаныеДокументы = ВыборкаРезультатаЗапроса.Запрос2ЕстьНеобработаныеДокументы;
		
		НоваяСтрокаСписка.Состояние = "";
		НоваяСтрокаСписка.СостояниеИндексКартинки = 0;
		Если ЗначениеЗаполнено(ВыборкаРезультатаЗапроса.Запрос1Состояние) Тогда
			Если ВыборкаРезультатаЗапроса.Запрос1Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.ОтправленВДФС") Тогда
				НоваяСтрокаСписка.Состояние = НСтр("ru = 'Ожидается выписка по списку документов.'; uk = 'Очікується витяг по списку документів.'");
				НоваяСтрокаСписка.СостояниеИндексКартинки = 2;
			ИначеЕсли ВыборкаРезультатаЗапроса.Запрос1Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.ПолученоКвитанциюОтДФС") Тогда
				НоваяСтрокаСписка.Состояние = НСтр("ru = 'Ожидается выписка по списку документов.'; uk = 'Очікується витяг по списку документів.'");
				НоваяСтрокаСписка.СостояниеИндексКартинки = 2;
			ИначеЕсли ВыборкаРезультатаЗапроса.Запрос1Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.ПолученоОтклонениеОтДФС") Тогда
				НоваяСтрокаСписка.Состояние = НСтр("ru = 'Запрос на получение списка документов отклонен.'; uk = 'Запит на отримання списку документів відхилено.'") + " " + НоваяСтрокаСписка.Запрос1ПричинаОтклоненияДФС;
				НоваяСтрокаСписка.СостояниеИндексКартинки = 4;
				ЕстьНеобходимостьОтправитьЗапрос = Истина;
			ИначеЕсли ВыборкаРезультатаЗапроса.Запрос1Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.ПолученоОтветОтДФС") Тогда
				Если НоваяСтрокаСписка.КоличествоДокументовОтсутствуют = 0 Тогда
					Если НоваяСтрокаСписка.КоличествоДокументовНетВыписке = 0 Тогда
						НоваяСтрокаСписка.Состояние = НСтр("ru = 'Количество документов совпадает'; uk = 'Кількість документів співпадає'");
						НоваяСтрокаСписка.СостояниеИндексКартинки = 3;
					Иначе
						НоваяСтрокаСписка.Состояние = НСтр("ru = 'Есть документы, которых нет в выписке!'; uk = 'Є документи, котрі відсутні у витязі!'") + " (" + Строка(НоваяСтрокаСписка.КоличествоДокументовНетВыписке) + ")";
						НоваяСтрокаСписка.СостояниеИндексКартинки = 5;
					КонецЕсли;
				Иначе
					Если НоваяСтрокаСписка.Запрос2ЕстьНеобработаныеДокументы Тогда
						НоваяСтрокаСписка.Состояние = НСтр("ru = 'Необходимо отправить запрос на получение документов по списку.'; uk = 'Необхідно відправити запит на отримання документів по списку.'");
						НоваяСтрокаСписка.СостояниеИндексКартинки = 1;
						ЕстьНеобходимостьОтправитьЗапрос = Истина;
					ИначеЕсли ЗначениеЗаполнено(НоваяСтрокаСписка.Запрос2ДатаОтправкиЗапросовЗапросОтклонен) Тогда
						НоваяСтрокаСписка.Состояние = НСтр("ru = 'Запрос на получение документов отклонен. Необходимо повторить.'; uk = 'Запит на отримання документів віххилено. Необхідно повторити.'");
						НоваяСтрокаСписка.СостояниеИндексКартинки = 4;
						ЕстьНеобходимостьОтправитьЗапрос = Истина;
					Иначе
						МинДата = ДатаПоследнегоПолученияВх;
						СостояниеСтроки = "";
						Если ЗначениеЗаполнено(МинДата) Тогда
							Если ЗначениеЗаполнено(НоваяСтрокаСписка.Запрос2ДатаПолученияОтветов) Тогда
								Если НоваяСтрокаСписка.Запрос2ДатаПолученияОтветов <= МинДата Тогда
									МинДата = НоваяСтрокаСписка.Запрос2ДатаПолученияОтветов;
									СостояниеСтроки = НСтр("ru = 'Запрос на получение документов отправлен.'; uk = 'Запит на отримання документів відправлено.'");
								КонецЕсли;
							КонецЕсли;
							Если ЗначениеЗаполнено(НоваяСтрокаСписка.Запрос2ДатаОтправкиЗапросов) Тогда
								Если НоваяСтрокаСписка.Запрос2ДатаОтправкиЗапросов <= МинДата Тогда
									МинДата = НоваяСтрокаСписка.Запрос2ДатаОтправкиЗапросов;
									СостояниеСтроки = НСтр("ru = 'Запрос на получение документов отправлен.'; uk = 'Запит на отримання документів відправлено.'");
								КонецЕсли;
							КонецЕсли;
							Если ЗначениеЗаполнено(НоваяСтрокаСписка.Запрос2ДатаОтправкиЗапросовЗапросДоставлен) Тогда
								Если НоваяСтрокаСписка.Запрос2ДатаОтправкиЗапросовЗапросДоставлен <= МинДата Тогда
									МинДата = НоваяСтрокаСписка.Запрос2ДатаОтправкиЗапросовЗапросДоставлен;
									СостояниеСтроки = НСтр("ru = 'Запрос на получение документов отправлен.'; uk = 'Запит на отримання документів відправлено.'");
								КонецЕсли;
							КонецЕсли;
							Если ДатаПоследнегоПолученияВх + 10*60 < ТекущаяДата Тогда
								НоваяСтрокаСписка.Состояние = НСтр("ru = 'Необходимо получить входящие сообщения.'; uk = 'Необхідно отримати вхідні повідомлення.'");;
								НоваяСтрокаСписка.СостояниеИндексКартинки = 2;
							ИначеЕсли НачалоДня(МинДата) < НачалоДня(ДатаПоследнегоПолученияВх) Тогда
								НоваяСтрокаСписка.Состояние = СостояниеСтроки + " " + НСтр("ru = 'Необходимо повторить.'; uk = 'Необхідно повторити.'");
								НоваяСтрокаСписка.СостояниеИндексКартинки = 1;
								ЕстьНеобходимостьОтправитьЗапрос = Истина;
							Иначе
								НоваяСтрокаСписка.Состояние = НСтр("ru = 'Необходимо получить входящие сообщения.'; uk = 'Необхідно отримати вхідні повідомлення.'");
								НоваяСтрокаСписка.СостояниеИндексКартинки = 2;
							КонецЕсли;
						Иначе
							НоваяСтрокаСписка.Состояние = НСтр("ru = 'Необходимо получить входящие сообщения.'; uk = 'Необхідно отримати вхідні повідомлення.'");
							НоваяСтрокаСписка.СостояниеИндексКартинки = 2;
						КонецЕсли;
					КонецЕсли;
					//НоваяСтрокаСписка.Запрос2ДатаПолученияОтветов
					//НоваяСтрокаСписка.Запрос2ДатаОтправкиЗапросов
					//НоваяСтрокаСписка.Запрос2ДатаОтправкиЗапросовЗапросДоставлен
					//НоваяСтрокаСписка.Запрос2ДатаОтправкиЗапросовЗапросОтклонен
					//ДатаПоследнегоПолученияВх
					//ТекущаяДата
				КонецЕсли;
			Иначе
				НоваяСтрокаСписка.Состояние = "";
				НоваяСтрокаСписка.СостояниеИндексКартинки = 0;
			КонецЕсли;
		Иначе
			НоваяСтрокаСписка.Состояние = НСтр("ru = 'Необходимо отправить запрос на получение списка документов.'; uk = 'Необхідно відправити запит на отримання списку документів.'");
			НоваяСтрокаСписка.СостояниеИндексКартинки = 1;
			ЕстьНеобходимостьОтправитьЗапрос = Истина;
		КонецЕсли;
	КонецЦикла;
	Элементы.ОтправитьЗапросы1ВЕРНН.Доступность = ЕстьНеобходимостьОтправитьЗапрос;
КонецПроцедуры


&НаСервере
Функция ПолучитьСписокПодписантовДляЗапросовВЕРНННаСервере(ВыполняемыеОперации, Организация, ОшибкаПолученияПодписей)
	Возврат Документы.скEDI_ЗапросНаПолучениеВедомостейЕРНН.ПолучитьСписокПодписантов(ВыполняемыеОперации, Организация, , , ОшибкаПолученияПодписей);
КонецФункции

&НаКлиенте
Процедура ОтправитьЗапросы1ВЕРНН(Команда)
	//лМассивДанныхДокументов = Новый Массив;
	//Для Каждого лВыделенаяСтрока Из Элементы.СписокДокументов.ВыделенныеСтроки Цикл
	//	лДанныеВыделенойСтроки = Элементы.СписокДокументов.ДанныеСтроки(лВыделенаяСтрока);
	//	лСтруктураДанныхДокумента = скEDI_ОбщегоНазначенияКлиент.ПолучитьСтруктуруДанныхПоЭлектронномуДокументу();
	//	ЗаполнитьЗначенияСвойств(лСтруктураДанныхДокумента, лДанныеВыделенойСтроки);
	//	//лСтруктураДанныхДокумента.Вставить("ПараметрыСозданияДокументов"    , Новый Структура);
	//	//лСтруктураДанныхДокумента.Вставить("СоответствиеЗначенийРеквизитов" , Новый Соответствие);
	//	//лСтруктураДанныхДокумента.Вставить("ЕстьОшибки"                     , Ложь);
	//	лМассивДанныхДокументов.Добавить(лСтруктураДанныхДокумента);
	//КонецЦикла;
	//МассивДанныхПоДокументам = Новый ФиксированныйМассив(лМассивДанныхДокументов);
	ВерсияМассиваДанныхПоДокументам = Новый УникальныйИдентификатор;
	
	ВыполняемыеОперации = Новый Массив;
	ВыполняемыеОперации.Добавить("Подпись");
	
	//Если Отправлять Тогда  
		ВыполняемыеОперации.Добавить("ОтправкаВДФС");
	//КонецЕсли;
	
	ОшибкаПолученияПодписей = "";
//	Подписанты = скEDI_ОбщегоНазначения.ПолучитьПодписантов(ВыполняемыеОперации, Объект.Организация, МассивДанныхПоДокументам, ОшибкаПолученияПодписей);
	Подписанты = ПолучитьСписокПодписантовДляЗапросовВЕРНННаСервере(ВыполняемыеОперации, Объект.Организация, ОшибкаПолученияПодписей);
	Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
		Сообщить(ОшибкаПолученияПодписей);
		Возврат;
	КонецЕсли;
	
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Новый Структура("ВерсияМассиваДанныхПоДокументам,ВыполняемыеОперации,Организация,Подписанты", ВерсияМассиваДанныхПоДокументам, ВыполняемыеОперации, Объект.Организация, Подписанты);
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
		лФормаНастройкиПараметровПодписиДокументов = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастройкиПодписейЭлектронныхДокументов", лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма);
		СоздатьИОтправитьЗапросы1ВЕРНН(лФормаНастройкиПараметровПодписиДокументов.ОткрытьМодально());
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастройкиПараметровПодписиДокументов(лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма, "СоздатьИОтправитьЗапросы1ВЕРНН");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СоздатьИОтправитьЗапросы1ВЕРНННаСервере(ПараметрыОпераций) Экспорт
	ТаблицаНастроекПодписей = ПараметрыОпераций.ТаблицаНеобходимыхПодписей;
	ТаблицаНастроекПодписей = ?(ТипЗнч(ТаблицаНастроекПодписей) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписей, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписей);
	ТаблицаНастроекПодписейШифрования = ПараметрыОпераций.ТаблицаНеобходимыхПодписейШифрования;
	ТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ТаблицаНастроекПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписейШифрования, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписейШифрования);
	
	ВыполняемыеОперации = ПараметрыОпераций.ВыполняемыеОперации;
	
	ДанныеОбработкиДокументов = ПолучитьДанныеОбработкиДокументов(Объект.Организация);
	ДатаПоследнегоПолученияВх = ДанныеОбработкиДокументов.ДатаПоследнегоПриемаВходящихСообщений;
	ТекущаяДата = ТекущаяДата();
	
	СписокДатФормированиеЗапроса1 = Новый Массив;
	СписокДатФормированиеЗапроса2 = Новый Массив;
	Для Каждого СтрокаСпискаСверкаСЕРНН из СписокСверкаСЕРНН Цикл
		Если СтрокаСпискаСверкаСЕРНН.КоличествоДокументовОтсутствуют > 0 Тогда
			СписокДатФормированиеЗапроса2.Добавить(СтрокаСпискаСверкаСЕРНН.Дата);
		Иначе
			СписокДатФормированиеЗапроса1.Добавить(СтрокаСпискаСверкаСЕРНН.Дата);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	скEDI_НалоговыеДокументыСверкаСЕРНН.ДобавитьВЗапросВременнуюТаблицуСписокДат(Запрос, СписокДатФормированиеЗапроса1);
	скEDI_НалоговыеДокументыСверкаСЕРНН.ДобавитьВЗапросВременнуюТаблицуВТЗапросы1(Запрос, Объект.Организация);
	скEDI_НалоговыеДокументыСверкаСЕРНН.ДобавитьВЗапросВременнуюТаблицуВТЗапросы1Последние(Запрос);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТДаты.Дата КАК Дата,
	               |	ВТЗапросы1Последние.Ссылка,
	               |	ВТЗапросы1Последние.Состояние
	               |ИЗ
	               |	ВТДаты КАК ВТДаты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗапросы1Последние КАК ВТЗапросы1Последние
	               |		ПО ВТДаты.Дата = ВТЗапросы1Последние.Дата
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата";
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		Если ВыборкаРезультатаЗапроса.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.ОтправленВДФС") Тогда
			Продолжить;
		ИначеЕсли ВыборкаРезультатаЗапроса.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.ПолученоКвитанциюОтДФС") Тогда
			Продолжить;
		ИначеЕсли ВыборкаРезультатаЗапроса.Состояние = ПредопределенноеЗначение("Перечисление.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.ПолученоОтветОтДФС") Тогда
			Продолжить;
		Иначе
			ДокументЗапросВЕРНН = Документы.скEDI_ЗапросНаПолучениеВедомостейЕРНН.СоздатьДокумент();
			ДокументЗапросВЕРНН.ОрганизацияEDI = Объект.Организация;
			ДокументЗапросВЕРНН.Организация = ДокументЗапросВЕРНН.ОрганизацияEDI.Организация1С;
			ДокументЗапросВЕРНН.Состояние = Перечисления.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.Создан;
			ДокументЗапросВЕРНН.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	        ДокументЗапросВЕРНН.Документы = Истина;
	        ДокументЗапросВЕРНН.ДокументыВыданые = Истина;
	        ДокументЗапросВЕРНН.ДокументыПолученые = Истина;
			ДокументЗапросВЕРНН.ДокументыНаДату = ВыборкаРезультатаЗапроса.Дата;
			ДокументЗапросВЕРНН.Дата = ТекущаяДата();
			ДокументЗапросВЕРНН.УстановитьНовыйНомер();
			
			РезультатСозданияИОтправкиЗапроса = Документы.скEDI_ЗапросНаПолучениеВедомостейЕРНН.ОбработатьЭлектронныйДокумент_Объект(ДокументЗапросВЕРНН, ВыполняемыеОперации, ТаблицаНастроекПодписей, ТаблицаНастроекПодписейШифрования);
			Если РезультатСозданияИОтправкиЗапроса <> Неопределено Тогда
				Сообщить(НСтр("ru = 'Запрос не отправлен'; uk = 'Запит не відправлено'") + ". " + Строка(РезультатСозданияИОтправкиЗапроса));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Истина Тогда
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		скEDI_НалоговыеДокументыСверкаСЕРНН.ДобавитьВЗапросВременнуюТаблицуСписокДат(Запрос, СписокДатФормированиеЗапроса2);
		скEDI_НалоговыеДокументыСверкаСЕРНН.ДобавитьВЗапросВременнуюТаблицуВТЗапросы1(Запрос, Объект.Организация);
		скEDI_НалоговыеДокументыСверкаСЕРНН.ДобавитьВЗапросВременнуюТаблицуВТЗапросы1Последние(Запрос);
		скEDI_НалоговыеДокументыСверкаСЕРНН.ДобавитьВЗапросВременнуюТаблицуВТЗапросы1ИДокументы(Запрос, Объект.Организация);
		скEDI_НалоговыеДокументыСверкаСЕРНН.ДобавитьВЗапросВременнуюТаблицуВТЗапросы1ИДокументыСостояниеЗапроса2(Запрос, Объект.Организация);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВТЗапросы1ИДокументыСостояниеЗапроса2.Дата,
		               |	ВТЗапросы1ИДокументыСостояниеЗапроса2.Запрос1,
		               |	ВТЗапросы1ИДокументыСостояниеЗапроса2.ВыданыйПолученый,
		               |	ВТЗапросы1ИДокументыСостояниеЗапроса2.ВидДокумента,
		               |	ВТЗапросы1ИДокументыСостояниеЗапроса2.ВхИсх,
		               |	ВТЗапросы1ИДокументыСостояниеЗапроса2.ТипДокумента,
		               |	ВТЗапросы1ИДокументыСостояниеЗапроса2.НомерДокумента,
		               |	ВТЗапросы1ИДокументыСостояниеЗапроса2.СпецРежимНалогообложения,
		               |	ВТЗапросы1ИДокументыСостояниеЗапроса2.Филиал,
		               |	ВТЗапросы1ИДокументыСостояниеЗапроса2.ДатаДокумента,
		               |	ВТЗапросы1ИДокументыСостояниеЗапроса2.ИННПродавца,
		               |	ВТЗапросы1ИДокументыСостояниеЗапроса2.ИННПродавцаА,
		               |	ВТЗапросы1ИДокументыСостояниеЗапроса2.СуммаНДС,
		               |	ВТЗапросы1ИДокументыСостояниеЗапроса2.ЭлектроныйДокумент,
		               |	ВТЗапросы1ИДокументыСостояниеЗапроса2.ЕстьЗапрос1,
		               |	ВТЗапросы1ИДокументыСостояниеЗапроса2.ЕстьЭлектронныйДокумент,
		               |	ВТЗапросы1ИДокументыСостояниеЗапроса2.Запрос2Состояние,
		               |	ВТЗапросы1ИДокументыСостояниеЗапроса2.Запрос2Дата
		               |ИЗ
		               |	ВТЗапросы1ИДокументыСостояниеЗапроса2 КАК ВТЗапросы1ИДокументыСостояниеЗапроса2
		               |ГДЕ
		               |	ВТЗапросы1ИДокументыСостояниеЗапроса2.ЕстьЗапрос1
		               |	И НЕ ВТЗапросы1ИДокументыСостояниеЗапроса2.ЕстьЭлектронныйДокумент
		               |	И ВЫБОР
		               |			КОГДА ВТЗапросы1ИДокументыСостояниеЗапроса2.Запрос2Состояние = ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.ПолученоОтветОтДФС)
		               |				ТОГДА ВЫБОР
		               |						КОГДА ВТЗапросы1ИДокументыСостояниеЗапроса2.Запрос2Дата > &ДатаПоследнегоПолученияВх
		               |							ТОГДА ЛОЖЬ
		               |						КОГДА РАЗНОСТЬДАТ(ВТЗапросы1ИДокументыСостояниеЗапроса2.Запрос2Дата, &ТекущаяДата, ДЕНЬ) > 0
		               |							ТОГДА ИСТИНА
		               |						ИНАЧЕ ЛОЖЬ
		               |					КОНЕЦ
		               |			КОГДА ВТЗапросы1ИДокументыСостояниеЗапроса2.Запрос2Состояние = ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.ОтправленВДФС)
		               |				ТОГДА ВЫБОР
		               |						КОГДА ВТЗапросы1ИДокументыСостояниеЗапроса2.Запрос2Дата > &ДатаПоследнегоПолученияВх
		               |							ТОГДА ЛОЖЬ
		               |						КОГДА РАЗНОСТЬДАТ(ВТЗапросы1ИДокументыСостояниеЗапроса2.Запрос2Дата, &ТекущаяДата, ДЕНЬ) > 0
		               |							ТОГДА ИСТИНА
		               |						ИНАЧЕ ЛОЖЬ
		               |					КОНЕЦ
		               |			КОГДА ВТЗапросы1ИДокументыСостояниеЗапроса2.Запрос2Состояние = ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.ПолученоКвитанциюОтДФС)
		               |				ТОГДА ВЫБОР
		               |						КОГДА ВТЗапросы1ИДокументыСостояниеЗапроса2.Запрос2Дата > &ДатаПоследнегоПолученияВх
		               |							ТОГДА ЛОЖЬ
		               |						КОГДА РАЗНОСТЬДАТ(ВТЗапросы1ИДокументыСостояниеЗапроса2.Запрос2Дата, &ТекущаяДата, ДЕНЬ) > 0
		               |							ТОГДА ИСТИНА
		               |						ИНАЧЕ ЛОЖЬ
		               |					КОНЕЦ
		               |			КОГДА ВТЗапросы1ИДокументыСостояниеЗапроса2.Запрос2Состояние = ЗНАЧЕНИЕ(Перечисление.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.ПолученоОтклонениеОтДФС)
		               |				ТОГДА ИСТИНА
		               |			ИНАЧЕ ИСТИНА
		               |		КОНЕЦ";
		Запрос.УстановитьПараметр("ДатаПоследнегоПолученияВх", ДатаПоследнегоПолученияВх);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
		РезультатЗапроса = Запрос.Выполнить();
		Если не РезультатЗапроса.Пустой() Тогда
			ВыборкаРезультатаЗапроса = РезультатЗапроса.Выбрать();
			
			СоздатьНовыйДокументЗапросВЕРНН = Истина;
			КоличествоСтрокВСписке = 0;
			Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
				Если СоздатьНовыйДокументЗапросВЕРНН Тогда
					ДокументЗапросВЕРНН = Документы.скEDI_ЗапросНаПолучениеВедомостейЕРНН.СоздатьДокумент();
					ДокументЗапросВЕРНН.ОрганизацияEDI = Объект.Организация;
					ДокументЗапросВЕРНН.Организация = ДокументЗапросВЕРНН.ОрганизацияEDI.Организация1С;
					ДокументЗапросВЕРНН.Состояние = Перечисления.скEDI_СостоянияДополнительныхЭлектронныхДокументовДФС.Создан;
					ДокументЗапросВЕРНН.Ответственный = ПараметрыСеанса.ТекущийПользователь;
					//ДокументЗапросВЕРНН.Документы = Истина;
					//ДокументЗапросВЕРНН.ДокументыВыданые = Истина;
					//ДокументЗапросВЕРНН.ДокументыПолученые = Истина;
					//ДокументЗапросВЕРНН.ДокументыНаДату = СтрокаСпискаСверкаСЕРНН.Дата;
					ДокументЗапросВЕРНН.Дата = ТекущаяДата();
					ДокументЗапросВЕРНН.УстановитьНовыйНомер();
					ДокументЗапросВЕРНН.ПоСписку = Истина;
					ДокументЗапросВЕРНН.ИмпортДокументаСКвитанцией = Истина;
					
					СоздатьНовыйДокументЗапросВЕРНН = Ложь;
					КоличествоСтрокВСписке = 0;
				КонецЕсли;
				
				
				НоваяСтрокаСписок = ДокументЗапросВЕРНН.Список.Добавить();
				НоваяСтрокаСписок.НомерДокумента = ВыборкаРезультатаЗапроса.НомерДокумента;
				НоваяСтрокаСписок.СпецРежимНалогообложения = ВыборкаРезультатаЗапроса.СпецРежимНалогообложения;
				НоваяСтрокаСписок.Филиал = ВыборкаРезультатаЗапроса.Филиал;
				НоваяСтрокаСписок.ДатаДокумента = ВыборкаРезультатаЗапроса.ДатаДокумента;
				НоваяСтрокаСписок.ВидДокумента = ВыборкаРезультатаЗапроса.ВидДокумента;
				НоваяСтрокаСписок.ИННПродавца = ВыборкаРезультатаЗапроса.ИННПродавца;
				КоличествоСтрокВСписке = КоличествоСтрокВСписке + 1;
				
				Если КоличествоСтрокВСписке >= 999 Тогда
					РезультатСозданияИОтправкиЗапроса = Документы.скEDI_ЗапросНаПолучениеВедомостейЕРНН.ОбработатьЭлектронныйДокумент_Объект(ДокументЗапросВЕРНН, ВыполняемыеОперации, ТаблицаНастроекПодписей, ТаблицаНастроекПодписейШифрования);
					Если РезультатСозданияИОтправкиЗапроса <> Неопределено Тогда
						Сообщить(НСтр("ru = 'Запрос не отправлен'; uk = 'Запит не відправлено'") + ". " + Строка(РезультатСозданияИОтправкиЗапроса));
					КонецЕсли;
					СоздатьНовыйДокументЗапросВЕРНН = Истина;
					КоличествоСтрокВСписке = 0;
				КонецЕсли;
			КонецЦикла;
			Если КоличествоСтрокВСписке > 0 Тогда
				РезультатСозданияИОтправкиЗапроса = Документы.скEDI_ЗапросНаПолучениеВедомостейЕРНН.ОбработатьЭлектронныйДокумент_Объект(ДокументЗапросВЕРНН, ВыполняемыеОперации, ТаблицаНастроекПодписей, ТаблицаНастроекПодписейШифрования);
				Если РезультатСозданияИОтправкиЗапроса <> Неопределено Тогда
					Сообщить(НСтр("ru = 'Запрос не отправлен'; uk = 'Запит не відправлено'") + ". " + Строка(РезультатСозданияИОтправкиЗапроса));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ПрименитьНастройкиОтборовСверкаСЕРНННаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИОтправитьЗапросы1ВЕРНН(ПараметрыОпераций, ДополнительныеПараметрыОпераций = Неопределено) Экспорт
	Если ПараметрыОпераций <> Неопределено Тогда
		Если ПараметрыОпераций.ВерсияМассиваДанныхПоДокументам = ВерсияМассиваДанныхПоДокументам Тогда
			СоздатьИОтправитьЗапросы1ВЕРНННаСервере(ПараметрыОпераций);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортДокументов(Команда)
	ЭкспортДокументовПоЖурналу(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы"));
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортДокументовДокументыНДС(Команда)
	ЭкспортДокументовПоЖурналу(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС"));
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортДокументовПоЖурналу(ЖурналРабочегоСтола)
	//ИмяФайлаЭлектронногоДокумента = СформироватьИмяФайлаЭлектронногоДокументаНаСервере(ЭлектронныйДокумент);
	ПараметрыЭкспорта = Новый Структура("ЧтоСохраняем,НомерФайла,ИмяФайла", "СписокЭлектронныхДокументов", -1, "");
	ПараметрыЭкспорта.Вставить("ЖурналРабочегоСтола", ЖурналРабочегоСтола);
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
		лФормаСохраненияПодписанныхДокументовВфайл = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаДляЭкспортаДокументаСПодписями", ПараметрыЭкспорта, ЭтаФорма);
		ЭкспортДанныхДокументаДокумента(лФормаСохраненияПодписанныхДокументовВфайл.ОткрытьМодально());
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуСохраненияПодписанныхДокументов(ЭтаФорма, ПараметрыЭкспорта);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортДанныхДокументаДокумента(ПараметрыСохраненияДокументов, ДополнительныеПараметры = Неопределено) Экспорт
	Если ТипЗнч(ПараметрыСохраненияДокументов) = Тип("Структура") Тогда
		ЧтоСохраняем = Неопределено;
		НомерФайла = Неопределено;
		ИмяФайла = Неопределено;
		КаталогСохранения = "";
		СохранятьТелоДокумента = Ложь;
		СохранятьИзображениеДокумента = Ложь;
		СохранятьВложенныеФайлы = Ложь;
		СохранятьВ_P7S    = Ложь;
		СохранятьВ_CADES  = Ложь;
		СохранятьБезПодписей = Ложь;
		СохранятьИзображениеДокументаPDF = Ложь;
		СохранятьИзображениеДокументаPNG = Ложь;
		ЖурналРабочегоСтола = Неопределено;
		ПараметрыСохраненияДокументов.Свойство("ЧтоСохраняем", ЧтоСохраняем);
		ПараметрыСохраненияДокументов.Свойство("ИмяФайла", ИмяФайла);
		ПараметрыСохраненияДокументов.Свойство("НомерФайла", НомерФайла);
		ПараметрыСохраненияДокументов.Свойство("КаталогСохранения", КаталогСохранения);
		ПараметрыСохраненияДокументов.Свойство("СохранятьТелоДокумента", СохранятьТелоДокумента);
		ПараметрыСохраненияДокументов.Свойство("СохранятьИзображениеДокумента", СохранятьИзображениеДокумента);
		ПараметрыСохраненияДокументов.Свойство("СохранятьВложенныеФайлы", СохранятьВложенныеФайлы);
		ПараметрыСохраненияДокументов.Свойство("СохранятьВ_P7S", СохранятьВ_P7S);
		ПараметрыСохраненияДокументов.Свойство("СохранятьВ_CADES", СохранятьВ_CADES);
		ПараметрыСохраненияДокументов.Свойство("СохранятьБезПодписей", СохранятьБезПодписей);
		ПараметрыСохраненияДокументов.Свойство("СохранятьИзображениеДокументаPDF", СохранятьИзображениеДокументаPDF);
		ПараметрыСохраненияДокументов.Свойство("СохранятьИзображениеДокументаPNG", СохранятьИзображениеДокументаPNG);
		ПараметрыСохраненияДокументов.Свойство("ЖурналРабочегоСтола", ЖурналРабочегоСтола);
		
		Если СохранятьВ_CADES <> Истина И СохранятьВ_P7S <> Истина И СохранятьБезПодписей <> Истина И СохранятьИзображениеДокументаPDF <> Истина И СохранятьИзображениеДокументаPNG <> Истина Тогда
			Возврат;
		КонецЕсли;
		
		ЭлементыСписокДокументов = Неопределено;
		Если ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы") тогда
			ЭлементыСписокДокументов = Элементы.СписокДокументов;
		ИначеЕсли ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС") тогда
			ЭлементыСписокДокументов = Элементы.СписокДокументовДокументыНДС;
		Иначе
			Возврат;
		КонецЕсли;
		
		лМассивЭлектронныхДокументов = Новый Массив;
		Для Каждого лВыделенаяСтрока Из ЭлементыСписокДокументов.ВыделенныеСтроки Цикл
			лДанныеВыделенойСтроки = ЭлементыСписокДокументов.ДанныеСтроки(лВыделенаяСтрока);
			Если ЗначениеЗаполнено(лДанныеВыделенойСтроки.ЭлектронныйДокумент) Тогда
				лМассивЭлектронныхДокументов.Добавить(лДанныеВыделенойСтроки.ЭлектронныйДокумент);
			КонецЕсли;
		КонецЦикла;
		МассивЭлектронныхДокументов = Новый ФиксированныйМассив(лМассивЭлектронныхДокументов);
		
		
		МассивФайлов = Новый Массив;
		МассивАрхивов = Новый Массив;
		ПолучитьМассивДанныхДляЭкспортаПоСпискуЭлектронныхДокументовНаСервере(КаталогСохранения, МассивФайлов, МассивАрхивов, МассивЭлектронныхДокументов, ЧтоСохраняем, СохранятьТелоДокумента, СохранятьИзображениеДокумента, СохранятьВложенныеФайлы, СохранятьВ_CADES, СохранятьВ_P7S, СохранятьБезПодписей, СохранятьИзображениеДокументаPDF, СохранятьИзображениеДокументаPNG);
		МассивПолученыхФайлов = Новый Массив;
		Если МассивФайлов.Количество() = 0 Тогда
			скEDI_ОбщегоНазначенияКлиент.ПоказатьПредупреждение_(НСтр("ru = 'Нет файлов для сохранены'; uk = 'Нема файлів для збереження'"));
		ИначеЕсли ПолучитьФайлы(МассивФайлов, МассивПолученыхФайлов, КаталогСохранения, Ложь) = Истина Тогда
			ТекстСообщения = НСтр("ru = 'Файлы сохранены'; uk = 'Файли збережені'");
			КоличествоСтрокВСообщении = 0;
			МаксимальноеКоличествоСтрокВСообщении = 10;
			ТекстСообщенияСформирован = Ложь;
			
			Для Каждого Архив Из МассивАрхивов Цикл
				ИмяФайлаАрхива = КаталогСохранения + "\" + Архив.Наименование + "_p7s.zip";
				ЗаписьZIP = Новый ЗаписьZipФайла(ИмяФайлаАрхива, , Архив.Наименование + " P7S");
				Для Каждого ФайлАрхива Из Архив.МассивФайловАрхива Цикл
					ЗаписьZIP.Добавить(ФайлАрхива.ПутьКВременномуФайлу);//, РежимСохраненияПутейZIP.НеСохранятьПути);
					
					ИндМассиваМассивПолученыхФайлов = МассивПолученыхФайлов.ВГраница();
					Пока ИндМассиваМассивПолученыхФайлов >= 0 Цикл
						Если МассивПолученыхФайлов[ИндМассиваМассивПолученыхФайлов].Имя = ФайлАрхива.ПутьКВременномуФайлу Тогда
							МассивПолученыхФайлов.Удалить(ИндМассиваМассивПолученыхФайлов);
						КонецЕсли;
						ИндМассиваМассивПолученыхФайлов = ИндМассиваМассивПолученыхФайлов - 1;
					КонецЦикла;
				КонецЦикла;
				ЗаписьZIP.Записать();
				УдалитьФайлы(Архив.КаталогВременныхФайлов);
				
				КоличествоСтрокВСообщении = КоличествоСтрокВСообщении + 1;
				Если не ТекстСообщенияСформирован Тогда
					Если КоличествоСтрокВСообщении > МаксимальноеКоличествоСтрокВСообщении Тогда
						ТекстСообщения = ТекстСообщения + Символы.ПС + "...";
						ТекстСообщенияСформирован = Истина;
					Иначе
						ТекстСообщения = ТекстСообщения + Символы.ПС + ИмяФайлаАрхива;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ПолученыйФайл Из МассивПолученыхФайлов Цикл
				КоличествоСтрокВСообщении = КоличествоСтрокВСообщении + 1;
				Если не ТекстСообщенияСформирован Тогда
					Если КоличествоСтрокВСообщении > МаксимальноеКоличествоСтрокВСообщении Тогда
						ТекстСообщения = ТекстСообщения + Символы.ПС + "...";
						ТекстСообщенияСформирован = Истина;
					Иначе
						ТекстСообщения = ТекстСообщения + Символы.ПС + ПолученыйФайл.Имя;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			скEDI_ОбщегоНазначенияКлиент.ПоказатьПредупреждение_(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПредварительныйПросмотр(Команда)
	ПечатьПредварительныйПросмотрДокументовПоЖурналу(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы"));
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПредварительныйПросмотрДокументы1С(Команда)
	ПечатьПредварительныйПросмотрДокументовПоЖурналу(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС"));
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПредварительныйПросмотрДокументовПоЖурналу(ЖурналРабочегоСтола)
	ЭлементыСписокДокументов = Неопределено;
	Если ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументов;
	ИначеЕсли ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС") тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументовДокументыНДС;
	Иначе
		Возврат;
	КонецЕсли;
	
	лМассивЭлектронныхДокументов = Новый Массив;
	Для Каждого лВыделенаяСтрока Из ЭлементыСписокДокументов.ВыделенныеСтроки Цикл
		лДанныеВыделенойСтроки = ЭлементыСписокДокументов.ДанныеСтроки(лВыделенаяСтрока);

		лПараметры = Новый Структура;
		лПараметры.Вставить("Документ1С", лДанныеВыделенойСтроки.Документ1С);
		лПараметры.Вставить("Организация", Объект.Организация);
		лПараметры.Вставить("ВидЭлектронногоДокумента", лДанныеВыделенойСтроки.ВидЭлектронногоДокумента);
		лПараметры.Вставить("ЭлектронныйДокумент", лДанныеВыделенойСтроки.ЭлектронныйДокумент);
		лПараметры.Вставить("Состояние", лДанныеВыделенойСтроки.Состояние);
		лПараметры.Вставить("ГдеСоздан", лДанныеВыделенойСтроки.ГдеСоздан);
		лМассивЭлектронныхДокументов.Добавить(Новый ФиксированнаяСтруктура(лПараметры));
	КонецЦикла;
	МассивЭлектронныхДокументов = Новый ФиксированныйМассив(лМассивЭлектронныхДокументов);
	

	//лТекущиеДанныеСпискаДокументов = Элементы.СписокДокументовДокументыНДС.ТекущиеДанные;
	//Если лТекущиеДанныеСпискаДокументов <> Неопределено Тогда
	//	Если ЗначениеЗаполнено(лТекущиеДанныеСпискаДокументов.ЭлектронныйДокумент) Тогда
	//		лПараметрыФормыОтображенияЭлектронногоДокумента = Новый Структура("ЭлектронныйДокумент", лТекущиеДанныеСпискаДокументов.ЭлектронныйДокумент);
	//	Иначе
	//		лПараметрыФормыОтображенияЭлектронногоДокумента = Новый Структура;
	//		лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("Документ1С", лТекущиеДанныеСпискаДокументов.Документ1С);
	//		лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("Организация", Объект.Организация);
	//		лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("ВидЭлектронногоДокумента", лТекущиеДанныеСпискаДокументов.ВидЭлектронногоДокумента);
	//	КонецЕсли;
	//	КлючУникальностиФормыОтображениеЭлектронныхДокументов = скEDI_ОбщегоНазначения.ПолучитьКлючУникальностиФормыОтображениеЭлектронныхДокументов(лПараметрыФормыОтображенияЭлектронногоДокумента);
	ПараметрыПросмотра = Новый Структура("МассивДокументов", МассивЭлектронныхДокументов);
	ОткрытьФорму("ОбщаяФорма.скEDI_ФормаПредварительныйПросмотр", ПараметрыПросмотра, ЭтаФорма, Новый УникальныйИдентификатор);
	//КонецЕсли;
	
	
	//МассивФайлов = Новый Массив;
	//МассивАрхивов = Новый Массив;
 	//ПолучитьМассивДанныхДляЭкспортаПоСпискуЭлектронныхДокументовНаСервере(КаталогСохранения, МассивФайлов, МассивАрхивов, МассивЭлектронныхДокументов, ЧтоСохраняем, СохранятьТелоДокумента, СохранятьИзображениеДокумента, СохранятьВложенныеФайлы, СохранятьВ_CADES, СохранятьВ_P7S, СохранятьБезПодписей, СохранятьИзображениеДокументаPDF, СохранятьИзображениеДокументаPNG);

	////ИмяФайлаЭлектронногоДокумента = СформироватьИмяФайлаЭлектронногоДокументаНаСервере(ЭлектронныйДокумент);
	//ПараметрыЭкспорта = Новый Структура("ЧтоСохраняем,НомерФайла,ИмяФайла", "СписокЭлектронныхДокументов", -1, "");
	//ПараметрыЭкспорта.Вставить("ЖурналРабочегоСтола", ЖурналРабочегоСтола);
	//Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
	//	лФормаСохраненияПодписанныхДокументовВфайл = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаДляЭкспортаДокументаСПодписями", ПараметрыЭкспорта, ЭтаФорма);
	//	ЭкспортДанныхДокументаДокумента(лФормаСохраненияПодписанныхДокументовВфайл.ОткрытьМодально());
	//Иначе
	//	скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуСохраненияПодписанныхДокументов(ЭтаФорма, ПараметрыЭкспорта);
	//КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСерверебезКонтекста
Функция ДобавитьСуфиксКИмениФайла(Знач ИмяФайла, Суфикс)
	Д = СтрДлина(ИмяФайла);
	Р = -1;
	Для Н = 0 по Д-1 Цикл
		Если Сред(ИмяФайла, Д-Н, 1) = "." Тогда
			Р = Д-Н;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Р > 1 Тогда
		Возврат Лев(ИмяФайла, Р-1) + Суфикс + Сред(ИмяФайла, Р);
	ИначеЕсли Р = 1 Тогда
		Возврат Суфикс + ИмяФайла;
	Иначе
		Возврат ИмяФайла + Суфикс;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьМассивДанныхДляСохраненияВФорматеP7SНаСервере(КаталогСохранения, МассивФайлов, МассивАрхивов, ИмяФайла, ТелоДокумента, СохранятьТелоИПодписи, СохранятьТело)
	ПараметрыКоманды = Новый Структура("Body", ТелоДокумента);
	ОтветEDIПровайдера = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("p7sfromsign", ПараметрыКоманды);
	
	ТелоДокументаБезПодписей = "";
	Если ОтветEDIПровайдера.Свойство("Body", ТелоДокументаБезПодписей) Тогда
		Если ЗначениеЗаполнено(ТелоДокументаБезПодписей) Тогда
			Если СохранятьТело Тогда
				СсылкаНаТелоЭлектронногоДокументаНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ТелоДокументаБезПодписей));
				МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла, СсылкаНаТелоЭлектронногоДокументаНаСервере));
			КонецЕсли;
			Если СохранятьТелоИПодписи Тогда
				ОписаниеАрхива = Новый Структура;
				ОписаниеАрхива.Вставить("Наименование", ИмяФайла);
				ОписаниеАрхива.Вставить("КаталогВременныхФайлов", КаталогСохранения + "\" + ИмяФайла + "_temp_files");
				
				МассивФайловАрхива = Новый Массив;
				
				СсылкаНаЭлектронныйДокументНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ТелоДокументаБезПодписей));
				
				ОписаниеФайлаДляАрхива = Новый Структура;
				ОписаниеФайлаДляАрхива.Вставить("ПутьКВременномуФайлу", ОписаниеАрхива.КаталогВременныхФайлов + "\" + ИмяФайла);
				ОписаниеФайлаДляАрхива.Вставить("ИмяФайла", ИмяФайла);
				ОписаниеФайлаДляАрхива.Вставить("АдресВоВременномХранилище", СсылкаНаЭлектронныйДокументНаСервере);
				
				МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ОписаниеФайлаДляАрхива.ПутьКВременномуФайлу, СсылкаНаЭлектронныйДокументНаСервере));
				МассивФайловАрхива.Добавить(ОписаниеФайлаДляАрхива);
				
				МассивПодписей = Неопределено;
				Если ОтветEDIПровайдера.Свойство("Signs", МассивПодписей) Тогда
					Если ТипЗнч(МассивПодписей) = Тип("Массив") Тогда
						счПодписей = 0;
						Для Каждого ЭлементМассиваПодписей Из МассивПодписей Цикл
							счПодписей = счПодписей + 1;
							
							ИмяФайлаПодписи = "signature" + Строка(счПодписей) + ".p7s";
							СсылкаНаПодписьНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ЭлементМассиваПодписей));
							
							ОписаниеФайлаДляАрхива = Новый Структура;
							ОписаниеФайлаДляАрхива.Вставить("ПутьКВременномуФайлу", ОписаниеАрхива.КаталогВременныхФайлов + "\" + ИмяФайлаПодписи);
							ОписаниеФайлаДляАрхива.Вставить("ИмяФайла", ИмяФайлаПодписи);
							ОписаниеФайлаДляАрхива.Вставить("АдресВоВременномХранилище", СсылкаНаПодписьНаСервере);
							
							МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ОписаниеФайлаДляАрхива.ПутьКВременномуФайлу, СсылкаНаПодписьНаСервере));
							МассивФайловАрхива.Добавить(ОписаниеФайлаДляАрхива);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				ОписаниеАрхива.Вставить("МассивФайловАрхива", МассивФайловАрхива);
				МассивАрхивов.Добавить(ОписаниеАрхива);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСерверебезКонтекста
Функция ИзменитьРасширениеИмениФайла(Знач ИмяФайла, Расширение)
	Если Врег(Прав(ИмяФайла, 4)) = ".XML" Тогда
		ИмяФайла = Лев(ИмяФайла, СтрДлина(ИмяФайла)-4);
	КонецЕсли;
	Возврат ИмяФайла + Расширение;
КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьМассивДанныхДляЭкспортаПоСпискуЭлектронныхДокументовНаСервере(КаталогСохранения, МассивФайлов, МассивАрхивов, МассивЭлектронныхДокументов, ЧтоСохраняем, СохранятьТелоДокумента, СохранятьИзображениеДокумента, СохранятьВложенныеФайлы, CADES, P7S, БезПодписей, ИзображениеДокументаPDF, ИзображениеДокументаPNG)
	ДлинаПрефиксаФайлов = Цел(Log10(МассивЭлектронныхДокументов.Количество())) + 2;
	Преф = "";
	Для н = 1 по ДлинаПрефиксаФайлов Цикл
		Преф = Преф + "0";
	КонецЦикла;
	ТекНомерДокумента = 0;
	Для Каждого ЭлектронныйДокумент Из МассивЭлектронныхДокументов Цикл
		ТекНомерДокумента = ТекНомерДокумента + 1;
		СодержаниеЭлектронногоДокумента = скEDI_ОбщегоНазначения.ПолучитьПоследнееСодержаниеЭлектронногоДокумента(ЭлектронныйДокумент);
		Если СодержаниеЭлектронногоДокумента <> Неопределено Тогда
			Если ЧтоСохраняем = "СписокЭлектронныхДокументов" Тогда
				ВидЭлектронногоДокумента = ЭлектронныйДокумент.ВидЭлектронногоДокумента;
				ТекИмяФайла = Прав(Преф + Формат(ТекНомерДокумента, "ЧГ=0"), ДлинаПрефиксаФайлов) + " " + ВидЭлектронногоДокумента.Наименование + " №" + СокрЛП(ЭлектронныйДокумент.НомерДокумента) + " від " + Формат(ЭлектронныйДокумент.ДатаДокумента, "ДФ=dd.MM.yyyy") + ".xml";
				ТекИмяФайла = СтрЗаменить(ТекИмяФайла, "/", "_");
				ТекИмяФайла = СтрЗаменить(ТекИмяФайла, "\", "_");
				ТекИмяФайла = СтрЗаменить(ТекИмяФайла, ":", "_");
				ТекИмяФайла = СтрЗаменить(ТекИмяФайла, "*", "_");
				ТекИмяФайла = СтрЗаменить(ТекИмяФайла, "<", "_");
				ТекИмяФайла = СтрЗаменить(ТекИмяФайла, ">", "_");
				ТекИмяФайла = СтрЗаменить(ТекИмяФайла, "|", "_");
				ТекИмяФайла = СтрЗаменить(ТекИмяФайла, "?", "_");
				Если СохранятьТелоДокумента Тогда
					ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					Если ЗначениеЗаполнено(ТелоДокумента) Тогда
						Если CADES Тогда
							СсылкаНаТелоЭлектронногоДокументаНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ТелоДокумента));
							МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ИзменитьРасширениеИмениФайла(ТекИмяФайла, "_cades.xml"), СсылкаНаТелоЭлектронногоДокументаНаСервере));
						КонецЕсли;
						Если P7S или БезПодписей Тогда
							ДополнитьМассивДанныхДляСохраненияВФорматеP7SНаСервере(КаталогСохранения, МассивФайлов, МассивАрхивов, ТекИмяФайла, ТелоДокумента, P7S, БезПодписей);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если СохранятьИзображениеДокумента Тогда
					ИзображениеДокумента = СодержаниеЭлектронногоДокумента.ИзображениеДокумента;
					Если ЗначениеЗаполнено(ИзображениеДокумента) Тогда
						Если CADES Тогда
							СсылкаНаИзображениеЭлектронногоДокументаНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ИзображениеДокумента));
							МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ИзменитьРасширениеИмениФайла(ТекИмяФайла, "_cades.pdf"), СсылкаНаИзображениеЭлектронногоДокументаНаСервере));
						КонецЕсли;
						Если P7S или БезПодписей Тогда
							ДополнитьМассивДанныхДляСохраненияВФорматеP7SНаСервере(КаталогСохранения, МассивФайлов, МассивАрхивов, ИзменитьРасширениеИмениФайла(ТекИмяФайла, ".pdf"), ИзображениеДокумента, P7S, БезПодписей);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				пДанныеДляОтображенияЭлектронногоДокументаСоответствие = Неопределено;
				Если ИзображениеДокументаPDF или ИзображениеДокументаPNG Тогда
					//ТелоДокумента = СодержаниеЭлектронногоДокумента.ТелоДокумента;
					
					//Если ЗначениеЗаполнено(ТелоДокумента) Тогда
						пПредставлениеЭлектронногоДокументаPDF = "";
						пОтображениеМассивКартинок = Неопределено;
						скEDI_ОбщегоНазначения.ПолучитьСодержимоеПоЭлектронномуДокументу(ЭлектронныйДокумент.Организация, ВидЭлектронногоДокумента.ТипДокумента, ЭлектронныйДокумент, СодержаниеЭлектронногоДокумента, ИзображениеДокументаPDF, ИзображениеДокументаPNG, СохранятьВложенныеФайлы, пПредставлениеЭлектронногоДокументаPDF, пОтображениеМассивКартинок, Неопределено, пДанныеДляОтображенияЭлектронногоДокументаСоответствие, "");
						Если ИзображениеДокументаPDF Тогда
							СсылкаНаТелоЭлектронногоДокументаНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(пПредставлениеЭлектронногоДокументаPDF));
							МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ТекИмяФайла+"_for_print.pdf", СсылкаНаТелоЭлектронногоДокументаНаСервере));
						КонецЕсли;
						Если ИзображениеДокументаPNG Тогда
							Если ТипЗнч(пОтображениеМассивКартинок) = Тип("Массив") Тогда
								НомерКартинки = 0;
								Для Каждого ОтображениеКартинка Из пОтображениеМассивКартинок Цикл
									НомерКартинки = НомерКартинки + 1;
									СсылкаНаТелоЭлектронногоДокументаНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ОтображениеКартинка));
									МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ТекИмяФайла+"_for_print_p_" + Прав("000" + Формат(НомерКартинки, "ЧГ=0"), 3) + ".png", СсылкаНаТелоЭлектронногоДокументаНаСервере));
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
					//КонецЕсли;
				КонецЕсли;
				
				Если СохранятьВложенныеФайлы Тогда
					НомерВложения = 0;
					Если ЗначениеЗаполнено(СодержаниеЭлектронногоДокумента.ВложениеДокумента1) Тогда
						НомерВложения = НомерВложения + 1;
						ВложениеДокумента = СодержаниеЭлектронногоДокумента.ВложениеДокумента1;
						Если ЗначениеЗаполнено(СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1) Тогда
							ТекИмяФайлаВложения = ТекИмяФайла + " " + СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента1;
						Иначе
							ТекИмяФайлаВложения = ТекИмяФайла + ".attachment" + Формат(НомерВложения, "ЧГ=0");
						КонецЕсли;
						Если CADES Тогда
							СсылкаНаВложениеДокументаНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ВложениеДокумента));
							МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ДобавитьСуфиксКИмениФайла(ТекИмяФайлаВложения, "_cades"), СсылкаНаВложениеДокументаНаСервере));
						КонецЕсли;
						Если P7S или БезПодписей Тогда
							ДополнитьМассивДанныхДляСохраненияВФорматеP7SНаСервере(КаталогСохранения, МассивФайлов, МассивАрхивов, ТекИмяФайлаВложения, ВложениеДокумента, P7S, БезПодписей);
						КонецЕсли;
						Если ИзображениеДокументаPDF или ИзображениеДокументаPNG Тогда
							Если ТипЗнч(пДанныеДляОтображенияЭлектронногоДокументаСоответствие) = Тип("Соответствие") Тогда
								ДанныеДляОтображенияЭлектронногоДокумента = пДанныеДляОтображенияЭлектронногоДокументаСоответствие.Получить(НомерВложения);
								Если ЗначениеЗаполнено(ДанныеДляОтображенияЭлектронногоДокумента) Тогда
									Если ИзображениеДокументаPDF Тогда
										Если ДанныеДляОтображенияЭлектронногоДокумента.ЕстьПДФ Тогда
											СсылкаНаТелоЭлектронногоДокументаНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ДанныеДляОтображенияЭлектронногоДокумента.ОтображениеПДФ));
											МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ТекИмяФайлаВложения+"_for_print.pdf", СсылкаНаТелоЭлектронногоДокументаНаСервере));
										КонецЕсли;
									КонецЕсли;
									Если ИзображениеДокументаPNG Тогда
										Если ДанныеДляОтображенияЭлектронногоДокумента.ЕстьКартинка Тогда
											пОтображениеМассивКартинок = ДанныеДляОтображенияЭлектронногоДокумента.ОтображениеМассивКартинок;
											Если ТипЗнч(пОтображениеМассивКартинок) = Тип("Массив") Тогда
												НомерКартинки = 0;
												Для Каждого ОтображениеКартинка Из пОтображениеМассивКартинок Цикл
													НомерКартинки = НомерКартинки + 1;
													СсылкаНаТелоЭлектронногоДокументаНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ОтображениеКартинка));
													МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ТекИмяФайлаВложения+"_for_print_p_" + Прав("000" + Формат(НомерКартинки, "ЧГ=0"), 3) + ".png", СсылкаНаТелоЭлектронногоДокументаНаСервере));
												КонецЦикла;
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(СодержаниеЭлектронногоДокумента.ВложениеДокумента2) Тогда
						НомерВложения = НомерВложения + 1;
						ВложениеДокумента = СодержаниеЭлектронногоДокумента.ВложениеДокумента2;
						Если ЗначениеЗаполнено(СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2) Тогда
							ТекИмяФайлаВложения = ТекИмяФайла + " " + СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента2;
						Иначе
							ТекИмяФайлаВложения = ТекИмяФайла + ".attachment" + Формат(НомерВложения, "ЧГ=0");
						КонецЕсли;
						Если CADES Тогда
							СсылкаНаВложениеДокументаНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ВложениеДокумента));
							МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ДобавитьСуфиксКИмениФайла(ТекИмяФайлаВложения, "_cades"), СсылкаНаВложениеДокументаНаСервере));
						КонецЕсли;
						Если P7S или БезПодписей Тогда
							ДополнитьМассивДанныхДляСохраненияВФорматеP7SНаСервере(КаталогСохранения, МассивФайлов, МассивАрхивов, ТекИмяФайлаВложения, ВложениеДокумента, P7S, БезПодписей);
						КонецЕсли;
						Если ИзображениеДокументаPDF или ИзображениеДокументаPNG Тогда
							Если ТипЗнч(пДанныеДляОтображенияЭлектронногоДокументаСоответствие) = Тип("Соответствие") Тогда
								ДанныеДляОтображенияЭлектронногоДокумента = пДанныеДляОтображенияЭлектронногоДокументаСоответствие.Получить(НомерВложения);
								Если ЗначениеЗаполнено(ДанныеДляОтображенияЭлектронногоДокумента) Тогда
									Если ИзображениеДокументаPDF Тогда
										Если ДанныеДляОтображенияЭлектронногоДокумента.ЕстьПДФ Тогда
											СсылкаНаТелоЭлектронногоДокументаНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ДанныеДляОтображенияЭлектронногоДокумента.ОтображениеПДФ));
											МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ТекИмяФайлаВложения+"_for_print.pdf", СсылкаНаТелоЭлектронногоДокументаНаСервере));
										КонецЕсли;
									КонецЕсли;
									Если ИзображениеДокументаPNG Тогда
										Если ДанныеДляОтображенияЭлектронногоДокумента.ЕстьКартинка Тогда
											пОтображениеМассивКартинок = ДанныеДляОтображенияЭлектронногоДокумента.ОтображениеМассивКартинок;
											Если ТипЗнч(пОтображениеМассивКартинок) = Тип("Массив") Тогда
												НомерКартинки = 0;
												Для Каждого ОтображениеКартинка Из пОтображениеМассивКартинок Цикл
													НомерКартинки = НомерКартинки + 1;
													СсылкаНаТелоЭлектронногоДокументаНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ОтображениеКартинка));
													МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ТекИмяФайлаВложения+"_for_print_p_" + Прав("000" + Формат(НомерКартинки, "ЧГ=0"), 3) + ".png", СсылкаНаТелоЭлектронногоДокументаНаСервере));
												КонецЦикла;
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					Если ЗначениеЗаполнено(СодержаниеЭлектронногоДокумента.ВложениеДокумента3) Тогда
						НомерВложения = НомерВложения + 1;
						ВложениеДокумента = СодержаниеЭлектронногоДокумента.ВложениеДокумента3;
						Если ЗначениеЗаполнено(СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3) Тогда
							ТекИмяФайлаВложения = ТекИмяФайла + " " + СодержаниеЭлектронногоДокумента.ИмяФайлаВложениеДокумента3;
						Иначе
							ТекИмяФайлаВложения = ТекИмяФайла + ".attachment" + Формат(НомерВложения, "ЧГ=0");
						КонецЕсли;
						Если CADES Тогда
							СсылкаНаВложениеДокументаНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ВложениеДокумента));
							МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ДобавитьСуфиксКИмениФайла(ТекИмяФайлаВложения, "_cades"), СсылкаНаВложениеДокументаНаСервере));
						КонецЕсли;
						Если P7S или БезПодписей Тогда
							ДополнитьМассивДанныхДляСохраненияВФорматеP7SНаСервере(КаталогСохранения, МассивФайлов, МассивАрхивов, ТекИмяФайлаВложения, ВложениеДокумента, P7S, БезПодписей);
						КонецЕсли;
						Если ИзображениеДокументаPDF или ИзображениеДокументаPNG Тогда
							Если ТипЗнч(пДанныеДляОтображенияЭлектронногоДокументаСоответствие) = Тип("Соответствие") Тогда
								ДанныеДляОтображенияЭлектронногоДокумента = пДанныеДляОтображенияЭлектронногоДокументаСоответствие.Получить(НомерВложения);
								Если ЗначениеЗаполнено(ДанныеДляОтображенияЭлектронногоДокумента) Тогда
									Если ИзображениеДокументаPDF Тогда
										Если ДанныеДляОтображенияЭлектронногоДокумента.ЕстьПДФ Тогда
											СсылкаНаТелоЭлектронногоДокументаНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ДанныеДляОтображенияЭлектронногоДокумента.ОтображениеПДФ));
											МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ТекИмяФайлаВложения+"_for_print.pdf", СсылкаНаТелоЭлектронногоДокументаНаСервере));
										КонецЕсли;
									КонецЕсли;
									Если ИзображениеДокументаPNG Тогда
										Если ДанныеДляОтображенияЭлектронногоДокумента.ЕстьКартинка Тогда
											пОтображениеМассивКартинок = ДанныеДляОтображенияЭлектронногоДокумента.ОтображениеМассивКартинок;
											Если ТипЗнч(пОтображениеМассивКартинок) = Тип("Массив") Тогда
												НомерКартинки = 0;
												Для Каждого ОтображениеКартинка Из пОтображениеМассивКартинок Цикл
													НомерКартинки = НомерКартинки + 1;
													СсылкаНаТелоЭлектронногоДокументаНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ОтображениеКартинка));
													МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ТекИмяФайлаВложения+"_for_print_p_" + Прав("000" + Формат(НомерКартинки, "ЧГ=0"), 3) + ".png", СсылкаНаТелоЭлектронногоДокументаНаСервере));
												КонецЦикла;
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
					МассивВложенийДокумента4 = СодержаниеЭлектронногоДокумента.МассивВложенийДокумента4;
					Если ТипЗнч(МассивВложенийДокумента4) = Тип("Массив") или ТипЗнч(МассивВложенийДокумента4) = Тип("ФиксированныйМассив") Тогда
						Для Каждого ЭлементМассиваВложенийДокумента4 Из МассивВложенийДокумента4 Цикл
							НомерВложения = НомерВложения + 1;
							ВложениеДокумента = ЭлементМассиваВложенийДокумента4.ВложениеДокумента;
							Если ЗначениеЗаполнено(ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента) Тогда
								ТекИмяФайлаВложения = ТекИмяФайла + " " + ЭлементМассиваВложенийДокумента4.ИмяФайлаВложениеДокумента;
							Иначе
								ТекИмяФайлаВложения = ТекИмяФайла + ".attachment" + Формат(НомерВложения, "ЧГ=0");
							КонецЕсли;
							Если CADES Тогда
								СсылкаНаВложениеДокументаНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ВложениеДокумента));
								МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ДобавитьСуфиксКИмениФайла(ТекИмяФайлаВложения, "_cades"), СсылкаНаВложениеДокументаНаСервере));
							КонецЕсли;
							Если P7S или БезПодписей Тогда
								ДополнитьМассивДанныхДляСохраненияВФорматеP7SНаСервере(КаталогСохранения, МассивФайлов, МассивАрхивов, ТекИмяФайлаВложения, ВложениеДокумента, P7S, БезПодписей);
							КонецЕсли;
							Если ИзображениеДокументаPDF или ИзображениеДокументаPNG Тогда
								Если ТипЗнч(пДанныеДляОтображенияЭлектронногоДокументаСоответствие) = Тип("Соответствие") Тогда
									ДанныеДляОтображенияЭлектронногоДокумента = пДанныеДляОтображенияЭлектронногоДокументаСоответствие.Получить(НомерВложения);
									Если ЗначениеЗаполнено(ДанныеДляОтображенияЭлектронногоДокумента) Тогда
										Если ИзображениеДокументаPDF Тогда
											Если ДанныеДляОтображенияЭлектронногоДокумента.ЕстьПДФ Тогда
												СсылкаНаТелоЭлектронногоДокументаНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ДанныеДляОтображенияЭлектронногоДокумента.ОтображениеПДФ));
												МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ТекИмяФайлаВложения+"_for_print.pdf", СсылкаНаТелоЭлектронногоДокументаНаСервере));
											КонецЕсли;
										КонецЕсли;
										Если ИзображениеДокументаPNG Тогда
											Если ДанныеДляОтображенияЭлектронногоДокумента.ЕстьКартинка Тогда
												пОтображениеМассивКартинок = ДанныеДляОтображенияЭлектронногоДокумента.ОтображениеМассивКартинок;
												Если ТипЗнч(пОтображениеМассивКартинок) = Тип("Массив") Тогда
													НомерКартинки = 0;
													Для Каждого ОтображениеКартинка Из пОтображениеМассивКартинок Цикл
														НомерКартинки = НомерКартинки + 1;
														СсылкаНаТелоЭлектронногоДокументаНаСервере = ПоместитьВоВременноеХранилище(Base64Значение(ОтображениеКартинка));
														МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(ТекИмяФайлаВложения+"_for_print_p_" + Прав("000" + Формат(НомерКартинки, "ЧГ=0"), 3) + ".png", СсылкаНаТелоЭлектронногоДокументаНаСервере));
													КонецЦикла;
												КонецЕсли;
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЗапросОСостоянииРегистрацииДокументыНДС(Команда)
	МассивДокументов = Неопределено;
	Для Каждого лВыделенаяСтрока Из Элементы.СписокДокументовДокументыНДС.ВыделенныеСтроки Цикл
		Если МассивДокументов = Неопределено Тогда
			МассивДокументов = Новый Массив;
		КонецЕсли;
		
		лДанныеВыделенойСтроки = Элементы.СписокДокументовДокументыНДС.ДанныеСтроки(лВыделенаяСтрока);
		лСтруктураДанныхДокумента = скEDI_ОбщегоНазначенияКлиент.ПолучитьСтруктуруДанныхПоЭлектронномуДокументу();
		ЗаполнитьЗначенияСвойств(лСтруктураДанныхДокумента, лДанныеВыделенойСтроки);
		МассивДокументов.Добавить(лСтруктураДанныхДокумента);
		
		//Если МассивДокументов.Количество() >= 1000 Тогда
		//	ЗначенияЗаполнения	= Новый Структура;
		//	ЗначенияЗаполнения.Вставить("ОрганизацияEDI", Объект.Организация);
		//	ЗначенияЗаполнения.Вставить("СписокДокументов", Новый ФиксированныйМассив(МассивДокументов));

		//	ПараметрыФормы = Новый Структура;
		//	ПараметрыФормы.Вставить("ЗначенияЗаполнения",	ЗначенияЗаполнения);

		//	ОткрытьФорму("Документ.скEDI_ЗапросНаПолучениеВедомостейЕРНН.Форма.ФормаДокумента", ПараметрыФормы);
		//	
		//	МассивДокументов = Неопределено;
		//КонецЕсли;
	КонецЦикла;
	
	Если МассивДокументов <> Неопределено Тогда
		ЗначенияЗаполнения	= Новый Структура;
		ЗначенияЗаполнения.Вставить("ОрганизацияEDI", Объект.Организация);
		ЗначенияЗаполнения.Вставить("СписокДокументов", Новый ФиксированныйМассив(МассивДокументов));
		
		РезультатыФункцииПечатьДокумента = Неопределено;
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			РезультатыФункцииПечатьДокумента = скEDI_НастройкиПодКонфигурациюКлиент.ПолучитьРезультатыФункцииПечатьДокумента(МассивДокументов);		
		#КонецЕсли
		Если РезультатыФункцииПечатьДокумента = Неопределено Тогда
		Иначе
			ФиксированноеСоответствиеДокументов = Новый ФиксированноеСоответствие(РезультатыФункцииПечатьДокумента);
			ЗначенияЗаполнения.Вставить("РезультатыФункцииПечатьДокумента", ФиксированноеСоответствиеДокументов);
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения",	ЗначенияЗаполнения);
		
		ОткрытьФорму("Документ.скEDI_ЗапросНаПолучениеВедомостейЕРНН.Форма.ФормаДокумента", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОтборСпискаДокументовПриИзменении(Элемент)
	ЗаписатьНастройкиПоУмолчаниюВРегистр_Сервер(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы"), ПолучитьСтруктуруНастроек());
	РасчитатьИтогиПоСпискуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтборСпискаДокументовДокументыНДСПриИзменении(Элемент)
	ЗаписатьНастройкиПоУмолчаниюВРегистр_Сервер(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС"), ПолучитьСтруктуруНастроекДокументыНДС());
	РасчитатьИтогиПоСпискуДокументыНДСНаСервере();
КонецПроцедуры


&НаСервере
Процедура РасчитатьИтогиПоСпискуНаСервере()
	СписокИтогДокументовСуммаБезНДСЭлектронногоДокумента = 0;
	СписокИтогДокументовСуммаДокумента1С = 0;
	СписокИтогДокументовСуммаНДСДокумента1С = 0;
	СписокИтогДокументовСуммаБезНДСДокумента1С = 0;
	СписокИтогДокументовСуммаНДСЭлектронногоДокумента = 0;
	СписокИтогДокументовСуммаЭлектронногоДокумента = 0;
	
	Попытка
		Схема = Элементы.СписокДокументов.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
		//ПолеИтога = Схема.ПоляИтога.Добавить();
		//ПолеИтога.ПутьКДанным = "СуммаЭлектронногоДокумента";
		//ПолеИтога.Выражение = "Сумма(СуммаЭлектронногоДокумента)";
		//
		//ПолеИтога = Схема.ПоляИтога.Добавить();
		//ПолеИтога.ПутьКДанным = "СуммаНДСЭлектронногоДокумента";
		//ПолеИтога.Выражение = "Сумма(СуммаНДСЭлектронногоДокумента)";
		
		Настройки = Элементы.СписокДокументов.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
		МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		СписокИтогДокументовСуммаБезНДСЭлектронногоДокумента = Результат.Итог("СуммаБезНДСЭлектронногоДокумента");
		СписокИтогДокументовСуммаДокумента1С = Результат.Итог("СуммаДокумента1С");
		СписокИтогДокументовСуммаНДСДокумента1С = Результат.Итог("СуммаНДСДокумента1С");
		СписокИтогДокументовСуммаБезНДСДокумента1С = Результат.Итог("СуммаБезНДСДокумента1С");
		СписокИтогДокументовСуммаНДСЭлектронногоДокумента = Результат.Итог("СуммаНДСЭлектронногоДокумента");
		СписокИтогДокументовСуммаЭлектронногоДокумента = Результат.Итог("СуммаЭлектронногоДокумента");
		СписокИтогКоличествоДокументов = НСтр("ru = 'Записей'; uk = 'Записів'") + ": " + Строка(Результат.Количество());
	Исключение
		
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура РасчитатьИтогиПоСпискуДокументыНДСНаСервере()
	СписокИтогДокументовСуммаБезНДСЭлектронногоДокументаДокументыНДС = 0;
	СписокИтогДокументовСуммаДокумента1СДокументыНДС = 0;
	СписокИтогДокументовСуммаНДСДокумента1СДокументыНДС = 0;
	СписокИтогДокументовСуммаБезНДСДокумента1СДокументыНДС = 0;
	СписокИтогДокументовСуммаНДСЭлектронногоДокументаДокументыНДС = 0;
	СписокИтогДокументовСуммаЭлектронногоДокументаДокументыНДС = 0;
	
	Попытка
		Схема = Элементы.СписокДокументовДокументыНДС.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
		//ПолеИтога = Схема.ПоляИтога.Добавить();
		//ПолеИтога.ПутьКДанным = "СуммаЭлектронногоДокумента";
		//ПолеИтога.Выражение = "Сумма(СуммаЭлектронногоДокумента)";
		//
		//ПолеИтога = Схема.ПоляИтога.Добавить();
		//ПолеИтога.ПутьКДанным = "СуммаНДСЭлектронногоДокумента";
		//ПолеИтога.Выражение = "Сумма(СуммаНДСЭлектронногоДокумента)";
		
		Настройки = Элементы.СписокДокументовДокументыНДС.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
		МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		
		Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
		СписокИтогДокументовСуммаБезНДСЭлектронногоДокументаДокументыНДС = Результат.Итог("СуммаБезНДСЭлектронногоДокумента");
		СписокИтогДокументовСуммаДокумента1СДокументыНДС = Результат.Итог("СуммаДокумента1С");
		СписокИтогДокументовСуммаНДСДокумента1СДокументыНДС = Результат.Итог("СуммаНДСДокумента1С");
		СписокИтогДокументовСуммаБезНДСДокумента1СДокументыНДС = Результат.Итог("СуммаБезНДСДокумента1С");
		СписокИтогДокументовСуммаНДСЭлектронногоДокументаДокументыНДС = Результат.Итог("СуммаНДСЭлектронногоДокумента");
		СписокИтогДокументовСуммаЭлектронногоДокументаДокументыНДС = Результат.Итог("СуммаЭлектронногоДокумента");
		СписокИтогКоличествоДокументовДокументыНДС = НСтр("ru = 'Записей'; uk = 'Записів'") + ": " + Строка(Результат.Количество());
	Исключение
		
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокДокументовДокументыНДС(Команда)
	Элементы.СписокДокументовДокументыНДС.Обновить();
	РасчитатьИтогиПоСпискуДокументыНДСНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокДокументов(Команда)
	Элементы.СписокДокументов.Обновить();
	РасчитатьИтогиПоСпискуНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьСостояниеРасчетовСБюджетом(Команда)
	// Структура параметров для получения входящих сообщений
	ВыполняемыеОперации = Новый Массив;
	ВыполняемыеОперации.Добавить("ЗапроситьДанныеПоРасчетамСБюджетом");
	
	Подписанты = Новый Структура;
	МассивПодписей = Новый Массив;
	МассивПодписей.Добавить(Неопределено);
	Подписанты.Вставить("МассивПодписей", МассивПодписей);
	
	МассивПодписей = Новый Массив;
	//МассивПодписей.Добавить(Новый Структура("ОрганизацияEDI, ПодписьШифрования", Организация, Неопределено));
	Подписанты.Вставить("МассивПодписейШифрования", МассивПодписей);
	
	лМассивДанныхДокументов = Новый Массив;
	лМассивДанныхДокументов.Добавить(СостояниеРасчетовСБюджетомГод);
	МассивДанныхПоДокументам = Новый ФиксированныйМассив(лМассивДанныхДокументов);
	ВерсияМассиваДанныхПоДокументам = Новый УникальныйИдентификатор;
	
	лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Новый Структура("ВыполняемыеОперации,ВерсияМассиваДанныхПоДокументам,Организация,Подписанты" , ВыполняемыеОперации, ВерсияМассиваДанныхПоДокументам, Объект.Организация, Подписанты);
	
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
		
		лФормаНастройкиПараметровПодписиДокументов = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастройкиПодписейЭлектронныхДокументов", лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма);
		лФормаНастройкиПараметровПодписиДокументов.Элементы.ФормаПринятьНастройкиПодписей.Заголовок = НСтр("ru = 'Запросить данные по расчетам с бюджетом'; uk = 'Запросити дані по розрахункам з бюджетом'");
		
		РезультатФормыНастройкиПодписей = лФормаНастройкиПараметровПодписиДокументов.ОткрытьМодально();
		ПолучитьИОбработатьСостояниеРасчетовСБюджетомНаСервере(РезультатФормыНастройкиПодписей);
		
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастройкиПараметровПодписиДокументов(лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма
		,"ПолучитьИОбработатьСостояниеРасчетовСБюджетомНаСервере");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СоздатьСтрокуBase64(Строка)
	 ВременныйФайл = ПолучитьИмяВременногоФайла();
	 
	 ЗаписьТекста = Новый ЗаписьТекста(ВременныйФайл, "CESU-8");
	 ЗаписьТекста.Записать(Строка);
	 ЗаписьТекста.Закрыть();
	 
	 ДД_Файла = Новый ДвоичныеДанные(ВременныйФайл);
	 СтрокаBase64 = Base64Строка(ДД_Файла);
	 
	 УдалитьФайлы(ВременныйФайл);
	 
	 Возврат СтрокаBase64;
КонецФункции // СоздатьСтрокуBase64()

&НаСервере
Процедура ПолучитьИОбработатьСостояниеРасчетовСБюджетомНаСервере(ПараметрыОпераций, ДополнительныеПараметрыОпераций = Неопределено) Экспорт
	Если ПараметрыОпераций <> Неопределено Тогда
		Если ПараметрыОпераций.ВерсияМассиваДанныхПоДокументам = ВерсияМассиваДанныхПоДокументам Тогда
			Если ПараметрыОпераций.ВыполняемыеОперации.Найти("ЗапроситьДанныеПоРасчетамСБюджетом") <> Неопределено Тогда 
				ТокенПодписан = Ложь;
				Токен = "";
				СообщениеОбОшибке = "";
				Для Каждого лДанныеПодписи Из ПараметрыОпераций.ТаблицаНеобходимыхПодписей Цикл
					ТелоДокумента = СоздатьСтрокуBase64(Объект.Организация.Код);
					лПараметрыПодписиДокумента = Новый Структура;
					лПараметрыПодписиДокумента.Вставить("Body",     ТелоДокумента);
					
					СтрокаПодключенияEDI = Неопределено;
					СерверEDI = Неопределено;
					ПортEDI = Неопределено;
					скEDI_ОбщегоНазначения.ДобавитьПараметрыСекретногоКлюча(лПараметрыПодписиДокумента, лДанныеПодписи, СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					//лРезультатПодписиДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("gov/sign", лПараметрыПодписиДокумента, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					лРезультатПодписиДокумента = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("ptn/sign", лПараметрыПодписиДокумента, , СтрокаПодключенияEDI, СерверEDI, ПортEDI);
					Если лРезультатПодписиДокумента.Code = 0 Тогда
						ТокенПодписан = Истина;
						Токен = лРезультатПодписиДокумента.Body;
					Иначе
						СообщениеОбОшибке = "Ошибка подписи документа: " + лРезультатПодписиДокумента.Message;
					КонецЕсли;
					
					Прервать;
				КонецЦикла;
				
				Если ТокенПодписан Тогда
					Соединение = Новый HTTPСоединение("api.tax.gov.ua", , , , , 0, Новый ЗащищенноеСоединениеOpenSSL);
					
					ПараметрыЗапроса = Новый Структура("data", Токен);
					Заголовки = Новый Соответствие();
					Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
					Запрос = Новый HTTPЗапрос("/" + "gateway/get_token", Заголовки);
					Запрос.УстановитьТелоИзСтроки(скEDI_КомандыEDIПровайдеру.КонтейнерДанных1СВJSONСтроку(ПараметрыЗапроса), КодировкаТекста.ANSI);
					лHTTPОтвет = Соединение.ОтправитьДляОбработки(Запрос);
					
					Если лHTTPОтвет.КодСостояния = 502 Тогда
						СообщениеОбОшибке = "Помилка проксі під’єднання до сервісу";
						Сообщить(СообщениеОбОшибке);
					Иначе
						лОтвет = лHTTPОтвет.ПолучитьТелоКакСтроку();
						лАвторизация = скEDI_КомандыEDIПровайдеру.JSONСтрокуВКонтейнерДанных1С(лОтвет);
						
						Если лАвторизация.Свойство("error") Тогда
							СообщениеОбОшибке = "Ошибка получения данных: " + лАвторизация.error_description;
							Сообщить(СообщениеОбОшибке);
						Иначе
							access_token = лАвторизация.access_token;
							token_type = лАвторизация.token_type;
							expires_in = лАвторизация.expires_in;
							
							
							ПараметрыЗапроса = Новый Структура;
							ПараметрыЗапроса.Вставить("actionName", "get_kor");
							ПараметрыЗапросаДата = Новый Структура;
							ПараметрыЗапросаДата.Вставить("startPos", 0);
							ПараметрыЗапросаДата.Вставить("MaxCount", 150);
							Годы = Новый Массив;
							Для Каждого ЭлементМассиваДанныхПоДокументам Из МассивДанныхПоДокументам Цикл
								Годы.Добавить(ЭлементМассиваДанныхПоДокументам);
							КонецЦикла;
							ПараметрыЗапросаДата.Вставить("YEAROPERS", Годы);
							ПараметрыЗапроса.Вставить("data", ПараметрыЗапросаДата);
							
							Заголовки = Новый Соответствие();
							Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");
							Заголовки.Вставить("Authorization", token_type + " " + access_token);
							Запрос = Новый HTTPЗапрос("/" + "gateway/json", Заголовки);
							Запрос.УстановитьТелоИзСтроки(скEDI_КомандыEDIПровайдеру.КонтейнерДанных1СВJSONСтроку(ПараметрыЗапроса), КодировкаТекста.ANSI);
							лHTTPОтвет = Соединение.ОтправитьДляОбработки(Запрос);
							лОтвет = лHTTPОтвет.ПолучитьТелоКакСтроку();
							лРезультат = скEDI_КомандыEDIПровайдеру.JSONСтрокуВКонтейнерДанных1С(лОтвет);
							
							ДатаУстановки = ТекущаяДата();
							Если ВРег(лРезультат.message) = "OK" Тогда
								Для Каждого тГод Из Годы Цикл
									ПоказателиПлательщикаНалоговНаборЗаписей = РегистрыСведений.скEDI_ПоказателиПлательщикаНалогов.СоздатьНаборЗаписей();
									ПоказателиПлательщикаНалоговНаборЗаписей.Отбор.Организация.Установить(Объект.Организация);
									ПоказателиПлательщикаНалоговНаборЗаписей.Отбор.Год.Установить(тГод);
									ПоказателиПлательщикаНалоговНаборЗаписей.Записать(Истина);
								КонецЦикла;
								
								НомерПоказателя = 1;
								Для Каждого ЭлементСписка Из лРезультат.data.list Цикл
									ПоказателиПлательщикаНалоговМенеджерЗаписи = РегистрыСведений.скEDI_ПоказателиПлательщикаНалогов.СоздатьМенеджерЗаписи();
									ПоказателиПлательщикаНалоговМенеджерЗаписи.Организация = Объект.Организация;
									ПоказателиПлательщикаНалоговМенеджерЗаписи.Год = ЭлементСписка.YEAROPER;
									ПоказателиПлательщикаНалоговМенеджерЗаписи.НомерПоказателя = НомерПоказателя;
									
									ПоказателиПлательщикаНалоговМенеджерЗаписи.ДатаУстановки = ДатаУстановки;
									ПоказателиПлательщикаНалоговМенеджерЗаписи.YEAROPER = ЭлементСписка.YEAROPER;
									ПоказателиПлательщикаНалоговМенеджерЗаписи.ROW_NUM = ЭлементСписка.ROW_NUM;
									
									ПоказателиПлательщикаНалоговМенеджерЗаписи.HEAD_TIN = ЭлементСписка.HEAD_TIN;
									ПоказателиПлательщикаНалоговМенеджерЗаписи.NAME_PLATEJ = ЭлементСписка.NAME_PLATEJ;
									ПоказателиПлательщикаНалоговМенеджерЗаписи.C_RAJ = ЭлементСписка.C_RAJ;
									ПоказателиПлательщикаНалоговМенеджерЗаписи.C_REG = ЭлементСписка.C_REG;
									ПоказателиПлательщикаНалоговМенеджерЗаписи.STI_NAME = ЭлементСписка.STI_NAME;
									ПоказателиПлательщикаНалоговМенеджерЗаписи.KOD_RECIPIENT = Формат(ЭлементСписка.KOD_RECIPIENT, "ЧГ=0");
									ПоказателиПлательщикаНалоговМенеджерЗаписи.NAME_RECIPIENT = ЭлементСписка.NAME_RECIPIENT;
									ПоказателиПлательщикаНалоговМенеджерЗаписи.VB = ЭлементСписка.VB;
									ПоказателиПлательщикаНалоговМенеджерЗаписи.SHOT = ЭлементСписка.SHOT;
									ПоказателиПлательщикаНалоговМенеджерЗаписи.MFO = Формат(ЭлементСписка.MFO, "ЧГ=0");
									ПоказателиПлательщикаНалоговМенеджерЗаписи.BUD_ACCOUNT = ЭлементСписка.BUD_ACCOUNT;
									ПоказателиПлательщикаНалоговМенеджерЗаписи.ST = ЭлементСписка.ST;
									ПоказателиПлательщикаНалоговМенеджерЗаписи.NARAH_0 = ЭлементСписка.NARAH_0;
									ПоказателиПлательщикаНалоговМенеджерЗаписи.SPLBD_0 = ЭлементСписка.SPLBD_0;
									ПоказателиПлательщикаНалоговМенеджерЗаписи.POVBD_0 = ЭлементСписка.POVBD_0;
									ПоказателиПлательщикаНалоговМенеджерЗаписи.PEREPL_0 = ЭлементСписка.PEREPL_0;
									ПоказателиПлательщикаНалоговМенеджерЗаписи.NEDOIM_0 = ЭлементСписка.NEDOIM_0;
									ПоказателиПлательщикаНалоговМенеджерЗаписи.PENIA_0 = ЭлементСписка.PENIA_0;
									ПоказателиПлательщикаНалоговМенеджерЗаписи.TSTMP = ЭлементСписка.TSTMP;
									ПоказателиПлательщикаНалоговМенеджерЗаписи.IDPMNT = ЭлементСписка.IDPMNT;
									
									ПоказателиПлательщикаНалоговМенеджерЗаписи.Записать(Истина);
									
									НомерПоказателя = НомерПоказателя + 1;
								КонецЦикла;
								Для Каждого тГод Из Годы Цикл
									ПоказателиПлательщикаНалоговМенеджерЗаписиАктуальность = РегистрыСведений.скEDI_ПоказателиПлательщикаНалоговАктуальность.СоздатьМенеджерЗаписи();
									ПоказателиПлательщикаНалоговМенеджерЗаписиАктуальность.Организация = Объект.Организация;
									ПоказателиПлательщикаНалоговМенеджерЗаписиАктуальность.Год = тГод;
									ПоказателиПлательщикаНалоговМенеджерЗаписиАктуальность.ДатаУстановки = ДатаУстановки;
									ПоказателиПлательщикаНалоговМенеджерЗаписиАктуальность.Записать(Истина);
								КонецЦикла;
								СостояниеРасчетовСБюджетомСписокОбновитьАктуальностьНаСервере();
								Элементы.СостояниеРасчетовСБюджетомСписок.Обновить();
							Иначе
								СообщениеОбОшибке = "Ошибка получения данных: " + лАвторизация.error_description;
								Сообщить(СообщениеОбОшибке);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Сообщить(СообщениеОбОшибке);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СостояниеРасчетовСБюджетомГодПриИзменении(Элемент)
	УстановитьПараметрыСостояниеРасчетовСБюджетомСписокНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНовыйВариантПодписатьИОтправитьЭлектронныеДокументы(Команда)
	ИнициализироватьПодписьИОтправкуЭлектронныхДокументов(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы"), Истина, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНовыйВариантЭлектронныеДокументыДокументыНДС(Команда)
	ИнициализироватьФормированиеНовогоВариантаЭлектронныхДокументов(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС"));
	//ИнициализироватьПодписьИОтправкуЭлектронныхДокументов(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС"), Истина, Истина);
КонецПроцедуры

&НаСервере
Функция ПолучитьЛицензионноеСоглашение()
	ТекстЛицензионногоСоглашения = "<html><head><meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8""></head><body><h2 align=""center"">
|							ЛІЦЕНЗІЯ
|
|
|</h2>
|
|<h2 align=""center""> (невиключна) на використання Комп'ютерної програми «FlyDoc» </h2>
|<p>
|	Ліцензіар надає Ліцензіату невиключне право використовувати об’єкт авторського права, під яким розуміється комп’ютерна програма «FlyDoc» (далі - Програма) та її оновлення, створені та випущені протягом строку дії невиключної ліцензії, виданої Ліцензіату Ліцензіаром, відповідно до нижченаведених умов:
|</p>
|<p>
|	
|	<b> Вид ліцензії: </b>  <u> невиключна </u><br>
|	<strong>Спосіб використання:</strong><br>
|		-	відтворення Програми у кількості 1 (одного) примірника з метою використання функціональних можливостей Програми для обміну електронними документами, яка дозволяє організувати відправку, прийом, підтвердження та відхилення електронних документів, підписання електронних документів шляхом накладення електронних цифрових підписів.
|
|</p>
|<p>
|	<b>Територія використання:</b> <u>територія України.</u> <br>
|
|</p>
|<p>
|
|
|</p>
|<p>
|	<b>Строк дії ліцензії: </b> ця Ліцензія на використання комп’ютерної програми «FlyDoc» визначається з моменту формування файлу ліцензії для використання комп’ютерної програми «FlyDoc» і продовжується до закінчення оплаченого Ліцензіатом строку (терміну). <br>
|</p>
|<p>
|
|	Ліцензіар є власником виключних майнових прав на Програму.<br>
|	Ліцензіат не має права передавати або відступати одержану ліцензію третім особам.<br>
|	Права на використання Програми та способи її використання, які не визначені в цій ліцензії, вважаються такими, що не надані Ліцензіату.<br>
|	Відтворення будь-яким способом та розповсюдження друкованих та інших інформаційних матеріалів, що надаються разом з примірником Програми, без згоди Ліцензіара – забороняється.<br>
|	Ліцензіар може припинити дію цієї Ліцензії без будь-яких відшкодувань, якщо Ліцензіат порушує права Ліцензіара та/або Автора чи не дотримується умов і положень цієї ліцензії.<br>
|	Ліцензіат розуміє, визнає та погоджується з тим, що отримує примірник Програми у стані «як є» (загальноприйнятий міжнародний принцип «AS IS»), що не виключає можливості наявності помилок у Програмі, а сама Програма може не відповідати очікуванням та/або потребам Ліцензіата, але це не впливає на можливість використання комп’ютерної програми за її функціональним призначенням. <br>
|	Ліцензіат, придбавши примірник комп’ютерної програми з метою його використання за функціональним призначенням, тим самим підтверджує ознайомлення та повне розуміння всіх умов ліцензії, своє беззастережне, повне та безвідкличне прийняття умов ліцензії, а також приймає на себе зобов’язання дотримуватись всіх умов, викладених у ліцензії.<br>
|	Ліцензіар не несе відповідальності за завдані збитки або заподіяну шкоду (в тому числі, але не обмежуючись, втрачену вигоду) Ліцензіата.<br>
|
|</p>
|
|
|</body></html>
|";			

Возврат ТекстЛицензионногоСоглашения;

КонецФункции

&НаКлиенте
Процедура ОчиститьНастройкиОтборов(Команда)
	ЗаполнитьНастройкиОтбораПоУмолчаниюНаКлиенте();
	ПрименитьНастройкиОтборовНаКлиенте();
	ЗаписатьНастройкиПоУмолчаниюВРегистр_Сервер(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы"), ПолучитьСтруктуруНастроек());
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНастройкиОтборовДокументыНДС(Команда)
	ЗаполнитьНастройкиОтбораПоУмолчаниюДокументыНДСНаКлиенте();
	ПрименитьНастройкиОтборовДокументыНДСНаКлиенте();
	ЗаписатьНастройкиПоУмолчаниюВРегистр_Сервер(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы"), ПолучитьСтруктуруНастроекДокументыНДС());
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокКолонокПоТаблице(ТЗСписокКолонок, Таблица)
	Номер1 = 0;
	ТЗСписокКолонок.Очистить();	
	Для Каждого СтрВерхУр ИЗ Таблица.ПодчиненныеЭлементы Цикл
		
		Номер1 = Номер1 + 100;
		
		НовСписокКолонок = ТЗСписокКолонок.Добавить();
		НовСписокКолонок.Родитель = СтрВерхУр.Родитель.Имя;
		НовСписокКолонок.ИмяКолонки = СтрВерхУр.Имя;
		НовСписокКолонок.Видимость = СтрВерхУр.Видимость;
		НовСписокКолонок.КолонкаПолная = СтрВерхУр.Заголовок;
		НовСписокКолонок.НомерТаб = Номер1;
		
		
		Если СтрВерхУр.Заголовок <>"" Тогда
			НовСписокКолонок.КолонкаПолная = СтрВерхУр.Заголовок;
		Иначе
			НовСписокКолонок.КолонкаПолная = СтрЗаменить(СтрВерхУр.Имя,"СписокДокументов","");
		КонецЕсли;	
		
		Если СтрВерхУр.Имя = Таблица.Имя + "ИндексКартинки" Тогда
			  Продолжить;
		КонецЕсли;	  
			Номер2 = 0;
			Для каждого эл из СтрВерхУр.ПодчиненныеЭлементы Цикл
				
				Номер2 = Номер2 + 1;
				НовСписокКолонок = ТЗСписокКолонок.Добавить();
				НовСписокКолонок.Родитель = эл.Родитель.Имя;
				НовСписокКолонок.ИмяКолонки = эл.Имя;
				НовСписокКолонок.Видимость = эл.Видимость;  
				НовСписокКолонок.НомерТаб = Номер1 + Номер2;

				Если эл.Заголовок <>"" Тогда
					НовСписокКолонок.КолонкаПолная = эл.Заголовок;
				Иначе
					НовСписокКолонок.КолонкаПолная = СтрЗаменить(эл.Имя, Таблица.Имя, "");
				КонецЕсли;	
				
			КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКолонкиЖурналаРабочегоСтола(ЖурналРабочегоСтола)
	Если ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы") Тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументов;
	ИначеЕсли ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС") Тогда
		ЭлементыСписокДокументов = Элементы.СписокДокументовДокументыНДС;
	КонецЕсли;
	
	ЗаполнитьСписокКолонокПоТаблице(СписокКолонокСлужебный, ЭлементыСписокДокументов);
	
	ПараметрыФормы = Новый Структура("ТабНастройкиКолонок, ТабНастройкиКолонокПоУмолчанию", СписокКолонокСлужебный, СписокКолонокПоУмолчанию);
	ПараметрыФормы.Вставить("ЖурналРабочегоСтола", ЖурналРабочегоСтола);
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
		НастроенныеКолонки = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастроекРабочегоСтола", ПараметрыФормы).ОткрытьМодально();
		ПослеЗакрытияФормыНастройкиРабочегоСтола(НастроенныеКолонки);
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастройкиРабочегоСтола(ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКолонки(Команда)
	НастроитьКолонкиЖурналаРабочегоСтола(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы"));
КонецПроцедуры

&НаКлиенте
Процедура НастроитьКолонкиДокументыНДС(Команда)
	НастроитьКолонкиЖурналаРабочегоСтола(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС"));
КонецПроцедуры

&НаСервере
Процедура ПослеЗакрытияФормыНастройкиРабочегоСтола(РезультатНастройки, ККР = неопределено) Экспорт
	ЖурналРабочегоСтола = Неопределено;
	НастройкаРабочегоСтола = Неопределено;
	Если ТипЗнч(РезультатНастройки) = Тип("Структура") Тогда
		Если РезультатНастройки.Действие = "УстановитьСписокКолонок" Тогда
			ЖурналРабочегоСтола = РезультатНастройки.ЖурналРабочегоСтола;
			Если ТипЗнч(РезультатНастройки.СписокКолонок) = Тип("ДанныеФормыКоллекция") Тогда
				НастроенныеКолонки = РезультатНастройки.СписокКолонок.Выгрузить();
				НастройкаРабочегоСтола = Новый ХранилищеЗначения(НастроенныеКолонки);
			ИначеЕсли ТипЗнч(РезультатНастройки.СписокКолонок) = Тип("ТаблицаЗначений") Тогда
				НастроенныеКолонки = РезультатНастройки.СписокКолонок;
				НастройкаРабочегоСтола = Новый ХранилищеЗначения(НастроенныеКолонки);
			Иначе
				Возврат;
			КонецЕсли;
		ИначеЕсли РезультатНастройки.Действие = "УстановитьСтандартныеНастройки" Тогда
			ЖурналРабочегоСтола = РезультатНастройки.ЖурналРабочегоСтола;
			Если ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы") Тогда
				НастроенныеКолонки = СписокКолонокПоУмолчанию.Выгрузить();
				НастройкаРабочегоСтола = Неопределено;
			ИначеЕсли ЖурналРабочегоСтола = ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ДокументыНДС") Тогда
				НастроенныеКолонки = СписокКолонокПоУмолчаниюДокументыНДС.Выгрузить();
				НастройкаРабочегоСтола = Неопределено;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	ТекПользователь = скEDI_НастройкиПодКонфигурацию.ПолучитьТекущегоПользователя();
	Запись = РегистрыСведений.скEDI_РабочийСтол_НастройкиПользователейПоУмолчанию.СоздатьМенеджерЗаписи();
	Запись.Пользователь = ТекПользователь;
	Запись.ЖурналРабочегоСтола = ЖурналРабочегоСтола;
	Запись.Прочитать();
	Если не Запись.Выбран() Тогда
		Запись.Пользователь = ТекПользователь;
		Запись.ЖурналРабочегоСтола = ЖурналРабочегоСтола;
		Запись.ФильтрДатаВариант = Новый ХранилищеЗначения(ВариантСтандартногоПериода.Месяц);
	КонецЕсли;
	Запись.НастройкаРабочегоСтола = НастройкаРабочегоСтола;
	Запись.Записать(Истина);
	
	УстановитьПорядокКолонокРабочегоСтола(НастроенныеКолонки);
КонецПроцедуры

&НаСервере
Процедура УстановитьПорядокКолонокРабочегоСтола(НастроенныеКолонки)
	Если ТипЗнч(НастроенныеКолонки) = Тип("ТаблицаЗначений") Тогда
		НастроенныеКолонки.Сортировать("НомерТаб Убыв");	
		ИндексСтроки = 0;
		Попытка
			Для ИндексСтроки = 1 По НастроенныеКолонки.Количество()-1 Цикл
				Элементы[СтрЗаменить(НастроенныеКолонки[ИндексСтроки].ИмяКолонки,Символ(34),"")].Видимость = НастроенныеКолонки[ИндексСтроки].Видимость;
				Элементы.Переместить(Элементы[СтрЗаменить(НастроенныеКолонки[ИндексСтроки].ИмяКолонки,Символ(34),"")], Элементы[СтрЗаменить(НастроенныеКолонки[ИндексСтроки].Родитель,Символ(34),"")],  Элементы[СтрЗаменить(НастроенныеКолонки[ИндексСтроки-1].ИмяКолонки,Символ(34),"")]);
			КонецЦикла;
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСпискаОткрыть(Команда)
	Элементы.ГруппаВертикальнаяНастройкиСписка.Видимость = Истина;
	Элементы.НастройкаСпискаЗакрыть.Видимость = Истина;
	Элементы.НастройкаСпискаОткрыть.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСпискаОткрытьДокументыНДС(Команда)
	Элементы.ГруппаВертикальнаяНастройкиСпискаДокументыНДС.Видимость = Истина;
	Элементы.НастройкаСпискаЗакрытьДокументыНДС.Видимость = Истина;
	Элементы.НастройкаСпискаОткрытьДокументыНДС.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСпискаЗакрыть(Команда)
	Элементы.ГруппаВертикальнаяНастройкиСписка.Видимость = Ложь;
	Элементы.НастройкаСпискаЗакрыть.Видимость = Ложь;
	Элементы.НастройкаСпискаОткрыть.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСпискаЗакрытьДокументыНДС(Команда)
	Элементы.ГруппаВертикальнаяНастройкиСпискаДокументыНДС.Видимость = Ложь;
	Элементы.НастройкаСпискаЗакрытьДокументыНДС.Видимость = Ложь;
	Элементы.НастройкаСпискаОткрытьДокументыНДС.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОтправитьЭлектронныеДокументыТолькоСсылка(Команда)
	ИнициализироватьПодписьИОтправкуЭлектронныхДокументов(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы"), Истина, , Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУниверсальныйЭлектронныйДокумент(Команда)
	лПараметрыФормыОтображенияЭлектронногоДокумента = Новый Структура;
	лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("Организация", Объект.Организация);
	лПараметрыФормыОтображенияЭлектронногоДокумента.Вставить("ТипДокумента", ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями"));
	КлючУникальностиФормыОтображениеЭлектронныхДокументов = скEDI_ОбщегоНазначения.ПолучитьКлючУникальностиФормыОтображениеЭлектронныхДокументов(лПараметрыФормыОтображенияЭлектронногоДокумента);
	ОткрытьФорму("ОбщаяФорма.скEDI_ОтображениеЭлектронныхДокументов", лПараметрыФормыОтображенияЭлектронногоДокумента, ЭтаФорма, КлючУникальностиФормыОтображениеЭлектронныхДокументов);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаДоподписание(Команда)
	ИнициализироватьПодписьИОтправкуЭлектронныхДокументов(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы"), Истина, , , Истина);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОсновнойВариантЭлектронногоДокумента(Команда)
	ИнициализироватьУстановкуОсновногоВариантаЭлектронныхДокументов(ПредопределенноеЗначение("Перечисление.скEDI_ЖурналыРабочегоСтола.ПервичныеДокументы"));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗапросНаПолученияСпискаДокументов_НаКлиенте()
	ТекущиеДанные = Элементы.СписокСверкаСЕРНН.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Запрос1 = ТекущиеДанные.Запрос1;
		Если ЗначениеЗаполнено(Запрос1) Тогда
			Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
				ОткрытьЗначение(Запрос1);
			Иначе
				скEDI_ОткрытиеФормБезМодальности.ПоказатьДокумент1С(Запрос1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокСверкаСЕРННВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле = Элементы.СписокСверкаСЕРННЗапрос1ДатаОтправки
		или Поле = Элементы.СписокСверкаСЕРННЗапрос1Номер
		или Поле = Элементы.СписокСверкаСЕРННЗапрос1Состояние
		или Поле = Элементы.СписокСверкаСЕРННЗапрос1ДатаФормированияОтвета Тогда
		
		ОткрытьЗапросНаПолученияСпискаДокументов_НаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗапросНаПолученияСпискаДокументов(Команда)
	ОткрытьЗапросНаПолученияСпискаДокументов_НаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура СписокСверкаСЕРННПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.СписокСверкаСЕРНН.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Запрос1 = ТекущиеДанные.Запрос1;
		Если ЗначениеЗаполнено(Запрос1) Тогда
			Элементы.ОткрытьЗапросНаПолученияСпискаДокументов.Доступность = Истина;
		Иначе
			Элементы.ОткрытьЗапросНаПолученияСпискаДокументов.Доступность = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ОткрытьЗапросНаПолученияСпискаДокументов.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

