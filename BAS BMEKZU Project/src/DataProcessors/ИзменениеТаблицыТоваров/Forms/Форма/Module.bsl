
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

 &НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И НЕ ПеренестиВДокумент И Объект.Товары.Количество() > 0 Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru='Перенести изменения в документ?';uk='Перенести зміни в документ?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПеренестиИзмененияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗакрытииФормыНаСервере();

	Если ПеренестиВДокумент Тогда
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("ИдентификаторВызывающейФормы", 					ВладелецФормы.УникальныйИдентификатор);
		ПараметрОповещения.Вставить("АдресОбработаннойТабличнойЧастиТоварыВХранилище", 	АдресХранилищаТовары);
		
		Оповестить("ОбработанаТабличнаяЧастьТовары", ПараметрОповещения, ВладелецФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриИзмененииТекущегоДействия();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Параметры.АдресХранилищаТовары) Тогда
		ТекстСообщения = НСтр("ru='Непосредственное открытие обработки изменения таблицы товаров не предусмотрено. 
|Для открытия обработки можно воспользоваться командой ""Изменить"" в формах документов';uk='Безпосереднє відкриття обробки зміни таблиці товарів не передбачено. 
|Для відкриття обробки можна скористатися командою ""Змінити"" в формах документів'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	//заполним реквизиты формы из переданных параметров
	СписокСвойств = "АдресХранилищаТовары, ЗаполнятьЦеныПоПокупке, ДокументСсылка, ДокументДата, ДокументОрганизация,
		|ДокументВалюта, ДокументКурс, ДокументКратность, ДокументСуммаВключаетНДС, ДокументТипЦен, ДокументСклад";
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, СписокСвойств);
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(Параметры.АдресХранилищаТовары);
	Объект.Товары.Загрузить(ТаблицаТоваров);
	
	//Установим пометку и заполним номер строки документа
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		СтрокаТабличнойЧасти.Пометка 					= Истина;
		СтрокаТабличнойЧасти.НомерСтрокиДокумента 		= СтрокаТабличнойЧасти.НомерСтроки;
		СтрокаТабличнойЧасти.НоменклатураДоИзменения 	= СтрокаТабличнойЧасти.Номенклатура;
	КонецЦикла;
	
	ИмяТаблицы = "Товары";
	
	ПодготовитьФормуНаСервере(); 	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ТекущееДействиеПриИзменении(Элемент)

	// Установим элементы формы в зависимости от выбранного действия
	ПриИзмененииТекущегоДействия();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Товары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	Модифицированность = Истина;
	ОбновитьИтоги(ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.Товары.ТекущиеДанные.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыСтроки = Новый Структура("Номенклатура, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС,
		|КоличествоМест, ЕдиницаИзмерения, Коэффициент, 
		|СчетУчетаБУ, СхемаРеализации, НалоговоеНазначение");
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СтрокаТабличнойЧасти);		
	
	НоменклатураПриИзмененииНаСервере(ПараметрыСтроки);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПараметрыСтроки);
	
	РассчитатьСуммыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПоказыватьСуммуНДС, ДокументСуммаВключаетНДС, ПоказыватьСуммуАкцизногоНалога);
	
	//очистим номер строки документа при изменении номенклатуры, чтобы при переносе в документ сработали обработчики заполнения документа
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерСтрокиДокумента) И 
		СтрокаТабличнойЧасти.НоменклатураДоИзменения <> СтрокаТабличнойЧасти.Номенклатура Тогда
		СтрокаТабличнойЧасти.НомерСтрокиДокумента = 0;
	КонецЕсли;
	СтрокаТабличнойЧасти.НоменклатураДоИзменения = СтрокаТабличнойЧасти.Номенклатура;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;

	ПараметрыСтроки = Новый Структура("Номенклатура, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС,
		|КоличествоМест, ЕдиницаИзмерения, Коэффициент, 
		|СчетУчетаБУ, СхемаРеализации, НалоговоеНазначение");
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СтрокаТабличнойЧасти);		
	
	ЕдиницаИзмеренияПриИзмененииНаСервере(ПараметрыСтроки);

	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПараметрыСтроки);

	РассчитатьСуммыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПоказыватьСуммуНДС, ДокументСуммаВключаетНДС, ПоказыватьСуммуАкцизногоНалога);	

КонецПроцедуры  

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПоказыватьСуммуНДС, ДокументСуммаВключаетНДС, ПоказыватьСуммуАкцизногоНалога);
	
	Если ПоказыватьСуммуВРознице И ПоказыватьКоличество Тогда
		СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПоказыватьСуммуНДС, ДокументСуммаВключаетНДС, ПоказыватьСуммуАкцизногоНалога);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаВРозницеПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если ПоказыватьСуммуВРознице И ПоказыватьКоличество Тогда
		СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ПоказыватьСкидки);
	Если ПоказыватьСуммуНДС Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
		ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВРозницеПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если ПоказыватьКоличество И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.ЦенаВРознице = СтрокаТабличнойЧасти.СуммаВРознице / СтрокаТабличнойЧасти.Количество;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если ПоказыватьСуммуНДС Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
		ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	ПеренестиВДокумент = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействие(Команда)

	Если ТекущееДействие = "ДобавитьИзДокумента" Тогда   		
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияДокумент) Тогда
			ТекстСообщения = НСтр("ru='Не указан документ, из которого добавляются строки списка';uk='Не вказаний документ, з якого додаються рядки списку'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияДокумент");
			Возврат;
		КонецЕсли;
		
		ДобавитьДанныеИзДокумента(ВариантЗначенияДокумент);
		
	ИначеЕсли ТекущееДействие = "УстановитьЦеныПоТипу" Тогда     
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияТипЦенНоменклатуры) Тогда
			ТекстСообщения = НСтр("ru='Не указан тип цен номенклатуры';uk='Не вказаний тип цін номенклатури'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияТипЦенНоменклатуры");
			Возврат;
		КонецЕсли;
		
		УстановитьЦеныПоТипу(ВариантЗначенияТипЦенНоменклатуры);
		
	ИначеЕсли ТекущееДействие = "УстановитьЦеныВРозницеПоТипу" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияТипЦенНоменклатуры) Тогда
			ТекстСообщения = НСтр("ru='Не указан тип цен номенклатуры';uk='Не вказаний тип цін номенклатури'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияТипЦенНоменклатуры");
			Возврат;
		КонецЕсли;
		
		УстановитьЦеныВРозницеПоТипу(ВариантЗначенияТипЦенНоменклатуры);     		

	ИначеЕсли ТекущееДействие = "РаспределитьСуммуПоСуммам" Тогда    	
	
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияЧислоСумма) Тогда
			ТекстСообщения = НСтр("ru='Не указана сумма распределения! Распределение невозможно';uk='Не вказана сума розподілу! Розподіл неможливий'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияЧислоСумма");
			Возврат;
		КонецЕсли;
		
		РаспределитьСуммуПоКолонке("Сумма", ВариантЗначенияЧислоСумма);
		
	ИначеЕсли ТекущееДействие = "РаспределитьСуммуПоКоличеству" Тогда 		
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияЧислоСумма) Тогда
			ТекстСообщения = НСтр("ru='Не указана сумма распределения! Распределение невозможно';uk='Не вказана сума розподілу! Розподіл неможливий'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияЧислоСумма");
			Возврат;
		КонецЕсли;
		
		РаспределитьСуммуПоКолонке("Количество", ВариантЗначенияЧислоСумма);
		
	ИначеЕсли ТекущееДействие = "ИзменитьЦеныНаПроцент" Тогда    
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияЧислоПроцент) Тогда
			ТекстСообщения = НСтр("ru='Не указан процент';uk='Не вказаний відсоток'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияЧислоПроцент");
			Возврат;
		КонецЕсли;
		
		ИзменитьЦенуНаПроцент(ВариантЗначенияЧислоПроцент);
		
	ИначеЕсли ТекущееДействие = "ИзменитьЦеныВРозницеНаПроцент" Тогда    
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияЧислоПроцент) Тогда
			ТекстСообщения = НСтр("ru='Не указан процент';uk='Не вказаний відсоток'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияЧислоПроцент");
			Возврат;
		КонецЕсли;
		
		ИзменитьЦенуВРозницеНаПроцент(ВариантЗначенияЧислоПроцент);
		
	ИначеЕсли ТекущееДействие = "ОкруглитьЦеныДо" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияПорядокОкругления) Тогда
			ТекстСообщения = НСтр("ru='Не указан порядок округления';uk='Не вказаний порядок округлення'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияПорядокОкругления");
			Возврат;
		КонецЕсли;
		
		ОкруглитьЦену(ВариантЗначенияПорядокОкругления);
			
	ИначеЕсли ТекущееДействие = "ОкруглитьЦеныВРозницеДо" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияПорядокОкругления) Тогда
			ТекстСообщения = НСтр("ru='Не указан порядок округления';uk='Не вказаний порядок округлення'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияПорядокОкругления");
			Возврат;
		КонецЕсли;
		
		ОкруглитьЦенуВРознице(ВариантЗначенияПорядокОкругления);
		
	ИначеЕсли ТекущееДействие = "УстановитьСтавкуНДС" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияСтавкаНДС) Тогда
			ТекстСообщения = НСтр("ru='Не указана ставка НДС';uk='Не вказана ставка ПДВ'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияСтавкаНДС");
			Возврат;
		КонецЕсли;
		
		УстановитьСтавкуНДС(ВариантЗначенияСтавкаНДС);
		
	ИначеЕсли ТекущееДействие = "УстановитьСкидкуПроцентом" Тогда
				
		УстановитьСкидкуПроцентом(ВариантЗначенияЧислоПроцент);
		
	ИначеЕсли ТекущееДействие = "УстановитьСкидкуСуммойПоСуммамм" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияЧислоСумма) Тогда
			ТекстСообщения = НСтр("ru='Не указана сумма скидки! Распределение невозможно';uk='Не зазначена сума знижки! Розподіл неможливий'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияЧислоСумма");
			Возврат;
		КонецЕсли;
		
		РаспределитьСуммуСкидкиПоКолонке("Сумма", ВариантЗначенияЧислоСумма);

	ИначеЕсли ТекущееДействие = "УстановитьСкидкуСуммойПоКоличеству" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияЧислоСумма) Тогда
			ТекстСообщения = НСтр("ru='Не указана сумма скидки! Распределение невозможно';uk='Не зазначена сума знижки! Розподіл неможливий'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияЧислоСумма");
			Возврат;
		КонецЕсли;
		
		РаспределитьСуммуСкидкиПоКолонке("Количество", ВариантЗначенияЧислоСумма);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекущееДействие) Тогда
		
		ТекстСообщения = НСтр("ru='Не указано действие';uk='Не вказана дія'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ТекущееДействие");
		Возврат;
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Действие указано не верно!';uk='Дія вказана не вірно!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ТекущееДействие");
		Возврат;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	УправлениеФормой(ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)

	УстановитьПометкуВСтрокахТабличнойЧасти(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)

	УстановитьПометкуВСтрокахТабличнойЧасти(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБезПереноса(Команда)

	Модифицированность = Ложь;
	ПеренестиВДокумент = Ложь;
	Закрыть();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// Операции с формой и элементами формы

&НаКлиенте
Процедура ПриИзмененииТекущегоДействия()

	Если ТекущееДействие = "ДобавитьИзДокумента" Тогда     			
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияДокумент;
		Элементы.ТекущееДействие.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		ВариантЗначенияДокумент = Неопределено;
		
	ИначеЕсли ТекущееДействие = "УстановитьЦеныПоТипу" Тогда       
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияТипЦенНоменклатуры;
		Элементы.ТекущееДействие.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		ВариантЗначенияТипЦенНоменклатуры = ДокументТипЦен;
		
	ИначеЕсли ТекущееДействие = "УстановитьЦеныВРозницеПоТипу" Тогда
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияТипЦенНоменклатуры;
		Элементы.ТекущееДействие.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		ВариантЗначенияТипЦенНоменклатуры = ДокументТипЦенРозничнойТорговли;

	ИначеЕсли ТекущееДействие = "РаспределитьСуммуПоСуммам" Тогда      	
	
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияЧислоСумма;
		Элементы.ТекущееДействие.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		ВариантЗначенияЧислоСумма = Неопределено;
		  
	ИначеЕсли ТекущееДействие = "РаспределитьСуммуПоКоличеству" Тогда         
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияЧислоСумма;
		Элементы.ТекущееДействие.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		ВариантЗначенияЧислоСумма = Неопределено;
		
	ИначеЕсли ТекущееДействие = "ИзменитьЦеныНаПроцент" Тогда       
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияЧислоПроцент;
		Элементы.ТекущееДействие.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		ВариантЗначенияЧислоПроцент = Неопределено;
		
	ИначеЕсли ТекущееДействие = "ИзменитьЦеныВРозницеНаПроцент" Тогда       
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияЧислоПроцент;
		Элементы.ТекущееДействие.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		ВариантЗначенияЧислоПроцент = Неопределено;
		
	ИначеЕсли ТекущееДействие = "ОкруглитьЦеныДо" Тогда
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияПорядокОкругления;
		Элементы.ТекущееДействие.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		ВариантЗначенияПорядокОкругления = ПорядокОругленияПоУмолчанию;
			
	ИначеЕсли ТекущееДействие = "ОкруглитьЦеныВРозницеДо" Тогда
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияПорядокОкругления;
		Элементы.ТекущееДействие.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		ВариантЗначенияПорядокОкругления = ПорядокОругленияПоУмолчаниюВРознице;
		
	ИначеЕсли ТекущееДействие = "УстановитьСтавкуНДС" Тогда
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияСтавкаНДС;
		Элементы.ТекущееДействие.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		ВариантЗначенияСтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20");
		
	ИначеЕсли ТекущееДействие = "УстановитьСкидкуПроцентом" Тогда
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияЧислоПроцент;
		Элементы.ТекущееДействие.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		ВариантЗначенияЧислоПроцент = Неопределено;
		
	ИначеЕсли ТекущееДействие = "УстановитьСкидкуСуммойПоСуммамм"  Тогда
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияЧислоСумма;
		Элементы.ТекущееДействие.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		ВариантЗначенияЧислоСумма = Неопределено;
		
	ИначеЕсли ТекущееДействие = "УстановитьСкидкуСуммойПоКоличеству" Тогда
		  
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияЧислоСумма;
		Элементы.ТекущееДействие.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
		ВариантЗначенияЧислоСумма = Неопределено;
		
	Иначе          
		
		Элементы.ГруппаСтраницыПоляВводаВариантаЗначения.ТекущаяСтраница = Элементы.ГруппаПолеВводаВариантаЗначенияПустаяСтраница;
		Элементы.ТекущееДействие.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ИнициализироватьРеквизитыФормы();
	СформироватьСписокДействий(Элементы.ТекущееДействие.СписокВыбора);

	//загрузим текущее действие из сохраненных настроек
	ВидДокумента = ДокументСсылка.Метаданные().Имя;
	ТекущееДействие = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбработкаТабличнойЧастиТекущееДействие", ВидДокумента);
	Если Элементы.ТекущееДействие.СписокВыбора.НайтиПоЗначению(ТекущееДействие) = Неопределено Тогда
		ТекущееДействие = Элементы.ТекущееДействие.СписокВыбора[0].Значение;
	КонецЕсли;
	
	УстановитьЗаголовкиКолонок();
	ЗаполнитьДобавленныеКолонкиТаблиц();
	ЗаполнитьОграниченияТипаПолейВводаВариантаЗначения();
	
	Элементы.ГруппаПодвал.Видимость = ПоказыватьСуммуНДС;
	
	СформироватьНадписьЦеныИВалюта(ЭтаФорма);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	ОбновитьИтоги(Форма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОграниченияТипаПолейВводаВариантаЗначения()

	// В случае добавления из документа должны выбираться только документы с таб. частью "Товары",
	// в которой есть реквизиты "Номенклатура", "Количество".
	
	МассивНужныхТипов = Новый Массив();
	
	Для Каждого Документ Из Метаданные.Документы Цикл
		
		Если Документ.ТабличныеЧасти.Найти(ИмяТаблицы) <> Неопределено Тогда
			Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("Номенклатура", Документ, ИмяТаблицы)
				И ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("Количество",  Документ, ИмяТаблицы) Тогда
				МассивНужныхТипов.Добавить(Тип("ДокументСсылка." + Документ.Имя));
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ВариантЗначенияДокумент.ОграничениеТипа = Новый ОписаниеТипов(МассивНужныхТипов);

КонецПроцедуры 

&НаСервере
Процедура ИнициализироватьРеквизитыФормы()
	
	ПеренестиВДокумент = Ложь;

	ДокументМетаданные = ДокументСсылка.Метаданные();
	
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ОбрабатыватьПоТипуЦен = ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ТипЦен", ДокументМетаданные);
	Если ЗначениеЗаполнено(ДокументСклад) Тогда
		ДокументТипЦенРозничнойТорговли = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСклад, "ТипЦенРозничнойТорговли");
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументТипЦен) Тогда
		ПорядокОругленияПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументТипЦен, "ПорядокОкругления");	
	Иначе
		ПорядокОругленияПоУмолчанию = Перечисления.ПорядкиОкругления.Окр0_01;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументТипЦенРозничнойТорговли) Тогда
		ПорядокОругленияПоУмолчаниюВРознице = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументТипЦенРозничнойТорговли, 
																							"ПорядокОкругления");	
	Иначе
		ПорядокОругленияПоУмолчаниюВРознице = Перечисления.ПорядкиОкругления.Окр0_01;
	КонецЕсли;
	
	ПоказыватьКоличество 			= ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("Количество", 
													ДокументМетаданные, ИмяТаблицы);
	ПоказыватьЦену 					= ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("Цена", 
													ДокументМетаданные, ИмяТаблицы);
	ПоказыватьСумму 				= ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("Сумма", 
													ДокументМетаданные, ИмяТаблицы);
	ПоказыватьСтавкуНДС 			= ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", 
													ДокументМетаданные, ИмяТаблицы);
	ПоказыватьСуммуНДС 				= ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", 
													ДокументМетаданные, ИмяТаблицы);
	ПоказыватьЦенуВРознице			= ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("ЦенаВРознице", 
													ДокументМетаданные, ИмяТаблицы);
	ПоказыватьСуммуВРознице			= ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СуммаВРознице", 
													ДокументМетаданные, ИмяТаблицы);
	ПоказыватьВалюту 				= ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("Валюта", 
													ДокументМетаданные, ИмяТаблицы);
	ПоказыватьСкидки                = ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СуммаСкидки", 
													ДокументМетаданные, ИмяТаблицы);

	ПоказыватьСуммуАкцизногоНалога  = ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СуммаАкцизногоНалога", 
													ДокументМетаданные, ИмяТаблицы);
	
	Если ПоказыватьСуммуНДС Тогда
		ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ДокументОрганизация, ДокументДата);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументСклад) Тогда
		ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСклад, "ТипСклада");
		ОбрабатыватьЦеныСуммыВРознице = (ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
	Иначе
		ОбрабатыватьЦеныСуммыВРознице = Ложь;
	КонецЕсли;
	
	ПоказыватьЦенуВРознице  = ПоказыватьЦенуВРознице И ОбрабатыватьЦеныСуммыВРознице;
	ПоказыватьСуммуВРознице = ПоказыватьСуммуВРознице И ОбрабатыватьЦеныСуммыВРознице;
	ПоказыватьСуммуАкцизногоНалога = ПоказыватьСуммуАкцизногоНалога И ДокументДата >= '2015 01 01';
	
	Если ЗначениеЗаполнено(ДокументОрганизация) Тогда
		ОтборОрганизация = ДокументОрганизация;
	Иначе
		// случай вызова из документа УстановкаЦенНоменклатуры или без выбранной организации в документе
		ОтборОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		Если НЕ ЗначениеЗаполнено(ОтборОрганизация) Тогда
			ОтборОрганизация = ПолучитьСписокОрганизаций();	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// Обработчики действий обработки

&НаСервере
Процедура ДобавитьДанныеИзДокумента(ДокументИсточник)

	Если НЕ ЗначениеЗаполнено(ДокументИсточник) Тогда
		Возврат;
	КонецЕсли; 
	
	МетаданныеДокументаИсточника 	= ДокументИсточник.Метаданные();
	
	// получим валюту документа-источника
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокументаИсточника) Тогда 
		ВалютаДокументаИсточника 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсточник, "ВалютаДокумента");
		Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КурсДокумента", МетаданныеДокументаИсточника) Тогда
			КурсДокументаИсточника		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсточник, "КурсДокумента");
			КратностьДокументаИсточника	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсточник, "КратностьДокумента");
		ИначеЕсли ОбщегоНазначенияБП.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокументаИсточника) Тогда
			КурсДокументаИсточника		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсточник, "КурсВзаиморасчетов");
			КратностьДокументаИсточника	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсточник, "КратностьВзаиморасчетов");
		Иначе
			КурсДокументаИсточника		= 0;
			КратностьДокументаИсточника	= 1;
		КонецЕсли;
	Иначе
		ВалютаДокументаИсточника 	= ВалютаРегламентированногоУчета; 
		КурсДокументаИсточника		= 1;
		КратностьДокументаИсточника	= 1;
	КонецЕсли;
	
	// получим пометку СуммаВключаетНДС документа-источника
	Если ОбщегоНазначенияБП.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокументаИсточника) Тогда 
		СуммаВключаетНДСИсточника	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсточник, "СуммаВключаетНДС");
	Иначе
		СуммаВключаетНДСИсточника 	= Ложь;	
	КонецЕсли;
	
	// получим табличную часть "Товары" документа-источника
	ТекстПолей = "";
	РеквизитыТоваровИсточника = МетаданныеДокументаИсточника.ТабличныеЧасти.Товары.Реквизиты;
	СтруктураРеквизитов = ПолучитьСтруктуруОбрабатываемыхРеквизитовТабличнойЧасти(РеквизитыТоваровИсточника); 
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Ключ));
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
			|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;
 	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ТекстПолей
	|ИЗ
	|	&ТабличнаяЧастьТоварыДокументаИсточника КАК ПсевдонимТовары
	|ГДЕ
	|	ПсевдонимТовары.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПолей", ТекстПолей);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТабличнаяЧастьТоварыДокументаИсточника", 
													МетаданныеДокументаИсточника.ПолноеИмя() + ".Товары");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументИсточник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаТоваровДокумента = РезультатЗапроса.Выгрузить();

	// добавим полученную таблицу в табличную часть обработки
	Для Каждого СтрокаТовара ИЗ ТаблицаТоваровДокумента Цикл
		
		// Ищем добавляемую позицию в существующей таблице по номенклатуре и по цене, в случае, когда цена видима.
		// Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура("Номенклатура");
		СтруктураОтбора.Номенклатура  = СтрокаТовара.Номенклатура;
		
		// пересчитаем цену строки документа-источника под параметры обработки для корректности отбора
		// высчитанное значение и будет значением цены в случае добавления новой строки обработки 
		НоваяЦенаСтроки = 0;
		Если СтруктураРеквизитов.Свойство("Цена") И ПоказыватьЦену Тогда
			
			Если ПоказыватьВалюту И СтруктураРеквизитов.Свойство("Валюта") И ЗначениеЗаполнено(СтрокаТовара.Валюта) Тогда
				ВалютаПересчета 	= СтрокаТовара.Валюта;
				КурсПересчета		= 0;
				КратностьПересчета 	= 1;
			ИначеЕсли ЗначениеЗаполнено(ДокументВалюта) Тогда
				ВалютаПересчета 	= ДокументВалюта;	
				КурсПересчета		= ДокументКурс;
				КратностьПересчета 	= ДокументКратность;
			Иначе
				ВалютаПересчета 	= ВалютаРегламентированногоУчета;
				КурсПересчета		= 1;
				КратностьПересчета 	= 1;
			КонецЕсли;
			
			Если СтруктураРеквизитов.Свойство("Валюта") И ЗначениеЗаполнено(СтрокаТовара.Валюта) Тогда
				ВалютаЦены			= СтрокаТовара.Валюта;
				КурсЦены			= 0;
				КратностьЦены 		= 1;
			ИначеЕсли ЗначениеЗаполнено(ВалютаДокументаИсточника) Тогда
				ВалютаЦены 			= ВалютаДокументаИсточника;
				КурсЦены			= КурсДокументаИсточника;
				КратностьЦены 		= КратностьДокументаИсточника;
			Иначе
				ВалютаЦены 			= ВалютаРегламентированногоУчета;
				КурсЦены			= 1;
				КратностьЦены 		= 1;
			КонецЕсли;
			
			Цена = ПолучитьЦенуПослеПересчета(СтрокаТовара.Цена, ВалютаЦены, ВалютаПересчета, ДокументДата, 
					КурсЦены, КурсПересчета, КратностьЦены, КратностьПересчета);
					
			Если СтруктураРеквизитов.Свойство("СтавкаНДС") Тогда
						
				НоваяЦенаСтроки = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
						СуммаВключаетНДСИсточника,
						ДокументСуммаВключаетНДС,
						УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТовара.СтавкаНДС));
						
			Иначе
				
				НоваяЦенаСтроки = Цена;
						
			КонецЕсли;
					
			НоваяЦенаСтроки = Окр(НоваяЦенаСтроки, 2);					

			СтруктураОтбора.Вставить("Цена", НоваяЦенаСтроки);	
			
		КонецЕсли;
		
		// производим поиск строк по структуре отбора
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, ИмяТаблицы, СтруктураОтбора);
		Если НЕ СтрокаТабличнойЧасти = Неопределено Тогда
			
			// Нашли, увеличиваем количество в первой найденной строке
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			// Рассчитаем связанные реквизиты табличной части.
			РассчитатьСуммыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПоказыватьСуммуНДС, ДокументСуммаВключаетНДС, ПоказыватьСуммуАкцизногоНалога);
			
			Если ПоказыватьСуммуВРознице И ПоказыватьКоличество Тогда
				СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;
			КонецЕсли;
			
		Иначе
			
			// добавляем новую строку.
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
			
			// новые строки будут по умолчанию помечены.
			НоваяСтрока.Пометка = Истина;
			
			// пересчитаем связанные реквизиты табличной части.
			
			Если ПоказыватьКоличество Тогда
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) Тогда
	            	НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "БазоваяЕдиницаИзмерения"); 
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Коэффициент) Тогда
					НоваяСтрока.Коэффициент = 1;	
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПоказыватьСтавкуНДС Тогда
				
				ПараметрыОбъекта = Новый Структура("Дата, Организация", ДокументДата, ДокументОрганизация);
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ПараметрыОбъекта, ИмяТаблицы, ДокументСсылка.Метаданные());
				
			КонецЕсли;
			
			Если ПоказыватьВалюту Тогда
				
				Если СтруктураРеквизитов.Свойство("Валюта") И ЗначениеЗаполнено(СтрокаТовара.Валюта) Тогда
					НоваяСтрока.Валюта = СтрокаТовара.Валюта;
				ИначеЕсли ЗначениеЗаполнено(ВалютаДокументаИсточника) Тогда
					НоваяСтрока.Валюта = ВалютаДокументаИсточника;	
				Иначе
					НоваяСтрока.Валюта = ВалютаРегламентированногоУчета;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПоказыватьЦену Тогда
				
				НоваяСтрока.Цена = НоваяЦенаСтроки;
				
			КонецЕсли;
			
			РассчитатьСуммыСтрокиТабличнойЧасти(НоваяСтрока, ПоказыватьСуммуНДС, ДокументСуммаВключаетНДС, ПоказыватьСуммуАкцизногоНалога);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьЦеныПоТипу(УстанавливаемыйТипЦен)

	Если НЕ ЗначениеЗаполнено(УстанавливаемыйТипЦен) Тогда
		Возврат;
	КонецЕсли; 
	
	//	Получим цены нужного типа
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", 	Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ТипЦен", 				УстанавливаемыйТипЦен);
	Запрос.УстановитьПараметр("ДатаЦен", 				ДокументДата);
	Запрос.УстановитьПараметр("ВалютаЦенПоУмолчанию", 	ВалютаРегламентированногоУчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Валюта, &ВалютаЦенПоУмолчанию) КАК Валюта,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаЦен,
	|				Номенклатура В (&МассивНоменклатуры)
	|					И ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (ЦеныНоменклатурыСрезПоследних.Номенклатура = СправочникНоменклатура.Ссылка)
	|ГДЕ
	|	СправочникНоменклатура.Ссылка В(&МассивНоменклатуры)";

	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();

	// Найдем у данной номенклатуры значение цены выбранного типа.
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда

			// Сбросим выборку для последующего поиска.
			ВыборкаИзЗапроса.Сбросить();
			
			// Ищем в выборке номенклатуру.
			Если ВыборкаИзЗапроса.НайтиСледующий(СтрокаТабличнойЧасти.Номенклатура, "Номенклатура")  Тогда
				
				Если ПоказыватьВалюту И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Валюта) Тогда
					ВалютаПересчета 	= СтрокаТабличнойЧасти.Валюта;
					КурсПересчета		= 0;
					КратностьПересчета 	= 1;
				ИначеЕсли ЗначениеЗаполнено(ДокументВалюта) Тогда
					ВалютаПересчета 	= ДокументВалюта;
					КурсПересчета		= ДокументКурс;
					КратностьПересчета 	= ДокументКратность;
				Иначе
					ВалютаПересчета = ВалютаРегламентированногоУчета;
					КурсПересчета		= 1;
					КратностьПересчета 	= 1;
				КонецЕсли;
				
				ЦенаБазовая = ПолучитьЦенуПослеПересчета(ВыборкаИзЗапроса.Цена, ВыборкаИзЗапроса.Валюта, 
										ВалютаПересчета, ДокументДата, , КурсПересчета, , КратностьПересчета);
				
			Иначе
				ЦенаБазовая = 0;
			КонецЕсли;

			СтрокаТабличнойЧасти.Цена = ЦенаБазовая * ?(СтрокаТабличнойЧасти.Коэффициент = 0, 1, СтрокаТабличнойЧасти.Коэффициент);

			// пересчитаем связанные реквизиты
			РассчитатьСуммыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПоказыватьСуммуНДС, ДокументСуммаВключаетНДС, ПоказыватьСуммуАкцизногоНалога);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры  

&НаСервере
Процедура УстановитьЦеныВРозницеПоТипу(УстанавливаемыйТипЦенВРознице)

	Если НЕ ЗначениеЗаполнено(УстанавливаемыйТипЦенВРознице) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УстанавливаемыйТипЦенВРознице, 
				"ПорядокОкругления, ОкруглятьВБольшуюСторону"); 
	ПорядокОкругленияТипаЦен			= ЗначенияРеквизитов.ПорядокОкругления;
	ОкруглятьВБольшуюСторонуТипаЦен		= ЗначенияРеквизитов.ОкруглятьВБольшуюСторону;
	
	//	Получим цены нужного типа
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", 	Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ТипЦен", 				УстанавливаемыйТипЦенВРознице);
	Запрос.УстановитьПараметр("ДатаЦен", 				ДокументДата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Валюта КАК Валюта,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДатаЦен,
	|			Номенклатура В (&МассивНоменклатуры)
	|				И ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних";
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
	
	// Найдем у данной номенклатуры значение цены выбранного типа.
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда
			
			// Сбросим выборку для последующего поиска.
			ВыборкаИзЗапроса.Сбросить();
			
			// Ищем в выборке номенклатуру.
			Если ВыборкаИзЗапроса.НайтиСледующий(СтрокаТабличнойЧасти.Номенклатура,"Номенклатура")  Тогда
	
	            ЦенаБазовая = ПолучитьЦенуПослеПересчета(ВыборкаИзЗапроса.Цена, ВыборкаИзЗапроса.Валюта, 
														ВалютаРегламентированногоУчета, ДокументДата);
														
			Иначе
				ЦенаБазовая = 0;
			КонецЕсли; 
	
			// Не забудем округлить.
			СтрокаТабличнойЧасти.ЦенаВРознице = Обработки.ИзменениеТаблицыТоваров.ОкруглитьЦену(ЦенаБазовая, 
								ПорядокОкругленияТипаЦен, ОкруглятьВБольшуюСторонуТипаЦен); 

			//// пересчитаем связанные реквизиты.
			Если ПоказыватьСуммуВРознице И ПоказыватьКоличество Тогда
				СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;
			КонецЕсли;
		
		КонецЕсли; 
		
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ОкруглитьЦену(ПорядокОкругленияЦены)

	Если НЕ ЗначениеЗаполнено(ПорядокОкругленияЦены) Тогда
		Возврат;
	КонецЕсли; 

	Если ЗначениеЗаполнено(ДокументТипЦен) Тогда
		ОкруглятьВБольшуюСторону = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументТипЦен, "ОкруглятьВБольшуюСторону");
	Иначе
		ОкруглятьВБольшуюСторону = Истина;
	КонецЕсли;

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда
			
			СтрокаТабличнойЧасти.Цена = Обработки.ИзменениеТаблицыТоваров.ОкруглитьЦену(СтрокаТабличнойЧасти.Цена, 
														ПорядокОкругленияЦены, ОкруглятьВБольшуюСторону); 
			
			//// пересчитаем связанные реквизиты.
			РассчитатьСуммыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПоказыватьСуммуНДС, ДокументСуммаВключаетНДС, ПоказыватьСуммуАкцизногоНалога);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОкруглитьЦенуВРознице(ПорядокОкругленияЦены)

	Если НЕ ЗначениеЗаполнено(ПорядокОкругленияЦены) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ДокументТипЦенРозничнойТорговли) Тогда
		ОкруглятьВБольшуюСторону = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументТипЦенРозничнойТорговли, 
																							"ОкруглятьВБольшуюСторону");
	Иначе
		ОкруглятьВБольшуюСторону = Истина;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда

			СтрокаТабличнойЧасти.ЦенаВРознице = Обработки.ИзменениеТаблицыТоваров.ОкруглитьЦену(СтрокаТабличнойЧасти.ЦенаВРознице, 
														ПорядокОкругленияЦены, ОкруглятьВБольшуюСторону); 
														
			//// пересчитаем связанные реквизиты.
			Если ПоказыватьСуммуВРознице И ПоказыватьКоличество Тогда
				СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры 

&НаСервере
Процедура ИзменитьЦенуНаПроцент(ПроцентИзменения)

	Если НЕ ЗначениеЗаполнено(ПроцентИзменения) Тогда
		Возврат;
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда
			
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * (100 + ПроцентИзменения) / 100;
			
			// пересчитаем связанные реквизиты.
			РассчитатьСуммыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПоказыватьСуммуНДС, ДокументСуммаВключаетНДС, ПоказыватьСуммуАкцизногоНалога);
			
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры 

&НаСервере
Процедура ИзменитьЦенуВРозницеНаПроцент(ПроцентИзменения)

	Если НЕ ЗначениеЗаполнено(ПроцентИзменения) Тогда
		Возврат;
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда
			
			СтрокаТабличнойЧасти.ЦенаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * (100 + ПроцентИзменения) / 100;
			
			// пересчитаем связанные реквизиты.
			Если ПоказыватьСуммуВРознице И ПоказыватьКоличество Тогда
				СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры 

&НаСервере
Процедура РаспределитьСуммуПоКолонке(ИмяКолонки, СуммаРаспределения)
	
	Если НЕ ЗначениеЗаполнено(СуммаРаспределения) Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ (ИмяКолонки = "Количество" ИЛИ ИмяКолонки = "Сумма") Тогда
		Возврат;
	КонецЕсли; 
	
	// Посчитаем общую сумму помеченных позиций
	ОбщаяСумма = 0;
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда
			ОбщаяСумма = ОбщаяСумма + СтрокаТабличнойЧасти[ИмяКолонки];
		КонецЕсли; 
	КонецЦикла; 
	
	Если ОбщаяСумма = 0 Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='Общая сумма помеченных строк нулевая! 
|Распределение невозможно';uk='Загальна сума позначених рядків нульова! 
|Розподіл неможливий'"));
		Возврат;
	КонецЕсли; 
		
	// Распределение
	СтрокаМаксимальнойСуммы = Неопределено;  // На эту строку будем относить остаток после распределения (ошибки округления)
	МаксимальнаяСумма       = 0; 			 // Значение максимальной суммы.
	НепогашеннаяСумма       = СуммаРаспределения;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда

			Дельта = СуммаРаспределения * СтрокаТабличнойЧасти[ИмяКолонки] / ОбщаяСумма;
			
			// Если Дельта по модулю оказалась больше, чем осталось погасить
			Если Дельта < 0 Тогда
				Дельта = Макс(НепогашеннаяСумма, Дельта)
			Иначе
				Дельта = Мин(НепогашеннаяСумма, Дельта)
			КонецЕсли; 

			// Проверим текущую сумму на максимум.
			Если СтрокаТабличнойЧасти.Сумма > МаксимальнаяСумма  Тогда
				МаксимальнаяСумма       = СтрокаТабличнойЧасти.Сумма;
				СтрокаМаксимальнойСуммы = СтрокаТабличнойЧасти;
			КонецЕсли;

			// Увеличиваем значение и запоминаем старое.
			ТекущаяСумма             	= СтрокаТабличнойЧасти.Сумма;
			СтрокаТабличнойЧасти.Сумма 	= СтрокаТабличнойЧасти.Сумма + Дельта;
			
			// Остаток нераспределенной суммы надо уменьшать на значение реального изменения
			НепогашеннаяСумма = НепогашеннаяСумма - (СтрокаТабличнойЧасти.Сумма - ТекущаяСумма);

			// Пересчитываем связанные реквизиты.
			ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ПоказыватьСкидки);

			Если ПоказыватьСуммуНДС Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
				ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;  
		
	// Если что-то осталось, относим на строку с максимальной суммой.
	Если НепогашеннаяСумма > 0 И СтрокаМаксимальнойСуммы <> Неопределено Тогда

		СтрокаМаксимальнойСуммы.Сумма = СтрокаМаксимальнойСуммы.Сумма + НепогашеннаяСумма;
		ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаМаксимальнойСуммы, ПоказыватьСкидки);
		Если ПоказыватьСуммуНДС Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаМаксимальнойСуммы, ДокументСуммаВключаетНДС);
			ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаМаксимальнойСуммы, ДокументСуммаВключаетНДС);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтавкуНДС(НоваяСтавкаНДС)

	Если НЕ ЗначениеЗаполнено(НоваяСтавкаНДС) Тогда
		Возврат;
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда
			
			СтрокаТабличнойЧасти.СтавкаНДС = НоваяСтавкаНДС;
			
			// Пересчитываем связанные реквизиты.
			Если ПоказыватьСуммуНДС Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
				ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// Прочие операции

&НаСервере
Процедура СформироватьСписокДействий(СписокДействий)

	// Заполним список возможных действий с табличной частью.
	СписокДействий.Очистить();

	СписокДействий.Добавить("ДобавитьИзДокумента",						НСтр("ru='Добавить товары из документа';uk='Додати товари з документа'"));
	
	Если ПоказыватьЦену И ОбрабатыватьПоТипуЦен Тогда
		СписокДействий.Добавить("УстановитьЦеныПоТипу", 				НСтр("ru='Установить цены по типу';uk='Встановити ціни по типу'"));
	КонецЕсли;
	
	Если ПоказыватьЦенуВРознице  Тогда
        СписокДействий.Добавить("УстановитьЦеныВРозницеПоТипу", 		НСтр("ru='Установить цены в рознице по типу';uk='Встановити ціни в роздробі за типом'"));
	КонецЕсли;
	
	Если ПоказыватьСтавкуНДС Тогда
		СписокДействий.Добавить("УстановитьСтавкуНДС", 					НСтр("ru='Установить ставку НДС';uk='Встановити ставку ПДВ'"));
	КонецЕсли;
	
	Если ПоказыватьЦену Тогда
		СписокДействий.Добавить("ИзменитьЦеныНаПроцент",				НСтр("ru='Изменить цены на процент';uk='Змінити ціни на відсоток'"));
	КонецЕсли;
	
	Если ПоказыватьЦенуВРознице Тогда
		СписокДействий.Добавить("ИзменитьЦеныВРозницеНаПроцент",		НСтр("ru='Изменить цены в рознице на процент';uk='Змінити ціни в роздробі на відсоток'"));
	КонецЕсли;
	
	Если ПоказыватьЦену И ОбрабатыватьПоТипуЦен Тогда
		СписокДействий.Добавить("ОкруглитьЦеныДо", 						НСтр("ru='Округлить цены до';uk='Округлити ціни до'"));
	КонецЕсли;
	
	Если ПоказыватьЦенуВРознице Тогда
		СписокДействий.Добавить("ОкруглитьЦеныВРозницеДо",				НСтр("ru='Округлить цены в рознице до';uk='Округлити ціни в роздробі до'"));	
	КонецЕсли;
	
	Если ПоказыватьСумму Тогда
		
		СписокДействий.Добавить("РаспределитьСуммуПоКоличеству", 		НСтр("ru='Распределить сумму по количеству';uk='Розподілити суму по кількості'"));
		
		Если ПоказыватьСуммуНДС Тогда
			Если ДокументСуммаВключаетНДС Тогда 
				СписокДействий.Добавить("РаспределитьСуммуПоСуммам", 	НСтр("ru='Распределить сумму по сумме с НДС';uk='Розподілити суму по сумі з ПДВ'"));
			Иначе
				СписокДействий.Добавить("РаспределитьСуммуПоСуммам", 	НСтр("ru='Распределить сумму по сумме без НДС';uk='Розподілити суму по сумі без ПДВ'"));
			КонецЕсли;
		Иначе
			СписокДействий.Добавить("РаспределитьСуммуПоСуммам", 		НСтр("ru='Распределить сумму по сумме';uk='Розподілити суму по сумі'"));
		КонецЕсли;

	КонецЕсли;
	
	Если ПоказыватьСкидки Тогда
		СписокДействий.Добавить("УстановитьСкидкуПроцентом",            НСтр("ru='Установить скидку процентом';uk='Встановити знижку відсотком'"));
		СписокДействий.Добавить("УстановитьСкидкуСуммойПоСуммамм",      НСтр("ru='Установить скидку суммой (по суммам)';uk='Встановити знижку сумою (по сумах)'"));
		СписокДействий.Добавить("УстановитьСкидкуСуммойПоКоличеству",   НСтр("ru='Установить скидку суммой (по количеству)';uk='Встановити знижку сумою (по кількості)'"));
	КонецЕсли;

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПоказыватьСуммуНДС, СуммаВключаетНДС, ПоказыватьСуммуАкцизногоНалога)

	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);

	Если ПоказыватьСуммуАкцизногоНалога Тогда
        ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСиАкцизногоНалогаТабЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС);
		ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС);
	ИначеЕсли ПоказыватьСуммуНДС Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС);
		ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС)

	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЦенуПослеПересчета(Знач Цена, Знач ВалютаНач, Знач ВалютаКон, Знач ДатаПересчета, 
	Знач КурсНач = Неопределено, Знач КурсКон = Неопределено, Знач КратностьНач = Неопределено, Знач КратностьКон = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(КурсНач) Тогда 		
		КурсКратностьНач 	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаНач, ДатаПересчета);
		КурсНач 			= КурсКратностьНач.Курс;
		КратностьНач 		= КурсКратностьНач.Кратность;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КурсКон) Тогда
		КурсКратностьКон 	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаКон, ДатаПересчета);
		КурсКон 			= КурсКратностьКон.Курс;
		КратностьКон		= КурсКратностьКон.Кратность;
	КонецЕсли;
	
	Возврат РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Цена, ВалютаНач, ВалютаКон,
		КурсНач, КурсКон, КратностьНач, КратностьКон);
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруОбрабатываемыхРеквизитовТабличнойЧасти(РеквизитыТабличнойЧасти)

	//ключ - псевдоним в запросе, значение - имя реквизита
	СтруктураРеквизитов = Новый Структура;
	
	СтруктураРеквизитов.Вставить("Номенклатура", 	"Номенклатура");
	СтруктураРеквизитов.Вставить("Количество", 		"Количество");
	
	Если РеквизитыТабличнойЧасти.Найти("КоличествоМест") <> Неопределено Тогда
		СтруктураРеквизитов.Вставить("КоличествоМест", "КоличествоМест");
	КонецЕсли;

	Если РеквизитыТабличнойЧасти.Найти("ЕдиницаИзмерения") <> Неопределено Тогда
		СтруктураРеквизитов.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("Коэффициент") <> Неопределено Тогда
		СтруктураРеквизитов.Вставить("Коэффициент", "Коэффициент");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("Цена") <> Неопределено Тогда
		СтруктураРеквизитов.Вставить("Цена", "Цена");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("ЦенаВРознице")  <> Неопределено И ПоказыватьЦенуВРознице Тогда
		СтруктураРеквизитов.Вставить("ЦенаВРознице", "ЦенаВРознице");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("Сумма")  <> Неопределено И ПоказыватьСумму Тогда
		СтруктураРеквизитов.Вставить("Сумма", "Сумма");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("СуммаВРознице")  <> Неопределено И ПоказыватьСуммуВРознице Тогда
		СтруктураРеквизитов.Вставить("СуммаВРознице", "СуммаВРознице");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("СтавкаНДС")  <> Неопределено И ПоказыватьСтавкуНДС Тогда
		СтруктураРеквизитов.Вставить("СтавкаНДС", "СтавкаНДС");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("СуммаНДС")  <> Неопределено И ПоказыватьСуммуНДС Тогда
		СтруктураРеквизитов.Вставить("СуммаНДС", "СуммаНДС");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("Валюта")  <> Неопределено И ПоказыватьВалюту Тогда
		СтруктураРеквизитов.Вставить("Валюта", "Валюта");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("СуммаСкидки")  <> Неопределено И ПоказыватьСкидки Тогда
		СтруктураРеквизитов.Вставить("СуммаСкидки", "СуммаСкидки");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("СуммаБезСкидки")  <> Неопределено И ПоказыватьСкидки Тогда
		СтруктураРеквизитов.Вставить("СуммаБезСкидки", "СуммаБезСкидки");
	КонецЕсли;

	Возврат СтруктураРеквизитов;

КонецФункции 
 
&НаСервере
Процедура УстановитьПометкуВСтрокахТабличнойЧасти(НоваяПометка)

	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		СтрокаТабличнойЧасти.Пометка = НоваяПометка;
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	Если ПоказыватьСуммуНДС Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)

	Если Форма.ПоказыватьСуммуНДС Тогда
		Форма.ИтогиВсего = Форма.Объект.Товары.Итог("Всего");
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	СтруктураНадписи = Новый Структура(
		"ВалютаДокумента, Курс, Кратность, СуммаВключаетНДС, ВалютаРегламентированногоУчета",
		Форма.ДокументВалюта,
		Форма.ДокументКурс,
		Форма.ДокументКратность,
		Форма.ДокументСуммаВключаетНДС,
		Форма.ВалютаРегламентированногоУчета);
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры

&НаСервере
Процедура НоменклатураПриИзмененииНаСервере(ПараметрыСтроки)

	МетаданныеДокумента = ДокументСсылка.Метаданные();

	Если ПоказыватьСтавкуНДС Тогда
		ПараметрыОбъекта = Новый Структура("Дата, Организация", ДокументДата, ДокументОрганизация);
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(ПараметрыСтроки, ПараметрыОбъекта, ИмяТаблицы, МетаданныеДокумента);
	КонецЕсли;
	
	Если ПоказыватьЦену Тогда
		
		ПараметрыОбъекта = Новый Структура;
		ПараметрыОбъекта.Вставить("Ссылка",	 			ДокументСсылка);
		ПараметрыОбъекта.Вставить("Дата",	 			ДокументДата);
		ПараметрыОбъекта.Вставить("Организация", 		ДокументОрганизация);
		ПараметрыОбъекта.Вставить("ВалютаДокумента", 	ДокументВалюта);
		ПараметрыОбъекта.Вставить("ТипЦен", 			ДокументТипЦен);
		ПараметрыОбъекта.Вставить("СуммаВключаетНДС",   ДокументСуммаВключаетНДС);
		
		Если ЗаполнятьЦеныПоПокупке Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(ПараметрыСтроки, ПараметрыОбъекта, ИмяТаблицы,
						МетаданныеДокумента);
		Иначе
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(ПараметрыСтроки, ПараметрыОбъекта, ИмяТаблицы,
						МетаданныеДокумента);
		КонецЕсли;
					
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ПриЗакрытииФормыНаСервере()

	ВидДокумента = ДокументСсылка.Метаданные().Имя;
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбработкаТабличнойЧастиТекущееДействие", ВидДокумента, ТекущееДействие);

	Если ПеренестиВДокумент Тогда
		ТаблицаТовары = СформироватьТаблицуДляПереносаВДокумент();
		ПоместитьВоВременноеХранилище(ТаблицаТовары, АдресХранилищаТовары);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция СформироватьТаблицуДляПереносаВДокумент()

	ТаблицаОбработки = Объект.Товары.Выгрузить();
	
	ТаблицаДокумента = ПолучитьИзВременногоХранилища(АдресХранилищаТовары);
		
	// Создадим структуру, которая будет содержать имена колонок присутствующих в 
	// документе, но не присутствующих в ТЧ обработки. 
	СтруктураНовыхКолонок = Новый Структура;
	
	Для Каждого КолонкаТаблицыДокумента Из ТаблицаДокумента.Колонки Цикл
		
		// Если колонка есть в таблице документа, но ее нет в таблице, выгруженной
		// из обработки и нет в структуре новых колонок, тогда добавим ее в таблицу
		// и в структуру
		Если ТаблицаОбработки.Колонки.Найти(КолонкаТаблицыДокумента.Имя) = Неопределено
			И НЕ СтруктураНовыхКолонок.Свойство(КолонкаТаблицыДокумента.Имя) Тогда
			ТаблицаОбработки.Колонки.Добавить(КолонкаТаблицыДокумента.Имя);
			СтруктураНовыхКолонок.Вставить(КолонкаТаблицыДокумента.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	// Идем по строкам табличной части и обрабатываем строки, в которых заполнен
	// реквизит НомерДокумента. Эти строки были выгружены из документа.
	Для каждого СтрокаТаблицы Из ТаблицаОбработки Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.НомерСтрокиДокумента) Тогда
			
			// Если номер строки заполнен, находим соответствующую строку в табличной 
			// части документа
			СтрокаТаблицыДокумента = ТаблицаДокумента[СтрокаТаблицы.НомерСтрокиДокумента - 1];

			// Во избежание проблем с подчиненными реквизитами, строка ТЧ обработки 
			// считается соответствующей строке ТЧ документа, только в том случае,если
			// номенклатура не изменилась. Если номенклатура в строке изменилась, 
			// считается, что это новая строка.
			Если СтрокаТаблицыДокумента.Номенклатура = СтрокаТаблицы.Номенклатура Тогда
				
				// Теперь пройдем по колонкам структуры новых колонок
				Для Каждого НоваяКолонкаТаблицы Из СтруктураНовыхКолонок Цикл
					СтрокаТаблицы[НоваяКолонкаТаблицы.Ключ] = СтрокаТаблицыДокумента[НоваяКолонкаТаблицы.Ключ];
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаОбработки;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокОрганизаций()
	
	СписокОрганизаций = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ПометкаУдаления = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Организация);
	КонецЦикла;
	
	Возврат СписокОрганизаций;
	
КонецФункции

&НаКлиенте
Процедура ВопросПеренестиИзмененияЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт

	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		ПеренестиВДокумент = Истина;
		Модифицированность = Ложь;
		Закрыть();
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаБезСкидкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаБезСкидкиТабЧасти(СтрокаТабличнойЧасти);

	Если ПоказыватьСуммуНДС Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
		ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаСкидкиТабЧасти(СтрокаТабличнойЧасти);

	Если ПоказыватьСуммуНДС Тогда
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
		ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	
   	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы[ИмяТаблицы].ТекущиеДанные;

	СписокВыбора = Новый СписокЗначений();	
	СписокВыбора.Добавить(1, НСтр("ru='Скидка процентом';uk='Знижка відсотком'"));
	СписокВыбора.Добавить(2, НСтр("ru='Скидка суммой';uk='Знижка сумою'"));
	
	ДополнительныеПараметры = Новый Структура("Форма , ИмяТаблицы, СтрокаТаблицы", ЭтаФорма, ИмяТаблицы, СтрокаТаблицы);
	Оповещение = Новый ОписаниеОповещения("СуммаСкидкиНачалоВыбораВыбратьИзСпискаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ЭтаФорма.ПоказатьВыборИзСписка(Оповещение, СписокВыбора, Элемент, СписокВыбора[0]);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаСкидкиНачалоВыбораВыбратьИзСпискаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
    Форма = ДополнительныеПараметры.Форма;
    ИмяТаблицы = ДополнительныеПараметры.ИмяТаблицы;
    СтрокаТаблицы = ДополнительныеПараметры.СтрокаТаблицы;
	
	Если НЕ РезультатВыбора = Неопределено Тогда
		
		ВариантСкидки = РезультатВыбора.Значение;
		
		ЭтоВводПроцента = (ВариантСкидки = 1);
		НачальноеЗначение = ?(ЭтоВводПроцента, 0, СтрокаТаблицы.СуммаСкидки);
		
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Введите %1 скидки';uk='Уведіть %1 знижки'"), 
				?(ЭтоВводПроцента, НСтр("ru='процент';uk='відсоток'"),НСтр("ru='сумму';uk='суму'")));
				
		ДополнительныеПараметры = Новый Структура("Форма, ИмяТаблицы, СтрокаТаблицы, ВариантСкидки,  НачальноеЗначение", Форма, ИмяТаблицы, СтрокаТаблицы, ВариантСкидки, НачальноеЗначение);
		Оповещение = Новый ОписаниеОповещения("СуммаСкидкиНачалоВыбораВводЧислаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВводЧисла(Оповещение, НачальноеЗначение, Заголовок);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаСкидкиНачалоВыбораВводЧислаЗавершение(Число, ДополнительныеПараметры) Экспорт
    
    Форма = ДополнительныеПараметры.Форма;
    ИмяТаблицы = ДополнительныеПараметры.ИмяТаблицы;
    СтрокаТаблицы = ДополнительныеПараметры.СтрокаТаблицы;
    ВариантСкидки = ДополнительныеПараметры.ВариантСкидки;
	НачальноеЗначение = ДополнительныеПараметры.НачальноеЗначение;
	
    Если (Число <> Неопределено) Тогда
        
    	ВведенноеЗначение = ?(Число = Неопределено, НачальноеЗначение, Число);
        Если ВариантСкидки = 2 Тогда
            СтрокаТаблицы.СуммаСкидки = ВведенноеЗначение;
        Иначе// процент	
            СтрокаТаблицы.СуммаСкидки = СтрокаТаблицы.СуммаБезСкидки * ВведенноеЗначение/100;
        КонецЕсли;	
        
		ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаСкидкиТабЧасти(СтрокаТаблицы);

		Если ПоказыватьСуммуНДС Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТаблицы, ДокументСуммаВключаетНДС);
			ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТаблицы, ДокументСуммаВключаетНДС);
		КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры



&НаСервере
Процедура УстановитьЗаголовкиКолонок()
	
	Если ПоказыватьСуммуНДС Тогда
		ЗаголовокЦена = ?(ПлательщикНДС, ?(ДокументСуммаВключаетНДС, НСтр("ru='Цена с НДС';uk='Ціна з ПДВ'"), НСтр("ru='Цена без НДС';uk='Ціна без ПДВ'")), НСтр("ru='Цена';uk='Ціна'"));
		ЗаголовокСумма = ?(ПлательщикНДС, ?(ДокументСуммаВключаетНДС, НСтр("ru='Сумма с НДС';uk='Сума з ПДВ'"), НСтр("ru='Сумма без НДС';uk='Сума без ПДВ'")), НСтр("ru='Сумма';uk='Сума'"));
	Иначе
		ЗаголовокЦена   = НСтр("ru='Цена';uk='Ціна'");
		ЗаголовокСумма	= НСтр("ru='Сумма';uk='Сума'");
	КонецЕсли;
	
	Элементы.ТоварыЦена.Заголовок 	= ЗаголовокЦена;
	Элементы.ТоварыСумма.Заголовок 	= ЗаголовокСумма;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСкидкуПроцентом(ПроцентСкидки)
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда
			
			СтрокаТабличнойЧасти.СуммаСкидки = СтрокаТабличнойЧасти.СуммаБезСкидки * ПроцентСкидки /100;
			
			// пересчитаем связанные реквизиты.
			РассчитатьСуммыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПоказыватьСуммуНДС, ДокументСуммаВключаетНДС, ПоказыватьСуммуАкцизногоНалога);
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьСуммуСкидкиПоКолонке(ИмяКолонки, СуммаРаспределения)
	
	Если НЕ ЗначениеЗаполнено(СуммаРаспределения) Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ (ИмяКолонки = "Количество" ИЛИ ИмяКолонки = "Сумма") Тогда
		Возврат;
	КонецЕсли; 
	
	// Посчитаем общую сумму помеченных позиций
	ОбщаяСумма = 0;
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда
			ОбщаяСумма = ОбщаяСумма + СтрокаТабличнойЧасти[ИмяКолонки];
		КонецЕсли; 
	КонецЦикла; 
	
	Если ОбщаяСумма = 0 Тогда
		ОбщегоНазначенияБПКлиентСервер.СообщитьОбОшибке(НСтр("ru='Общая сумма помеченных строк нулевая! 
|Распределение невозможно';uk='Загальна сума позначених рядків нульова! 
|Розподіл неможливий'"));
		Возврат;
	КонецЕсли; 
		
	// Распределение
	СтрокаМаксимальнойСуммы = Неопределено;  // На эту строку будем относить остаток после распределения (ошибки округления)
	МаксимальнаяСумма       = 0; 			 // Значение максимальной суммы.
	НепогашеннаяСумма       = СуммаРаспределения;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда

			Дельта = СуммаРаспределения * СтрокаТабличнойЧасти[ИмяКолонки] / ОбщаяСумма;
			
			// Если Дельта по модулю оказалась больше, чем осталось погасить
			Если Дельта < 0 Тогда
				Дельта = Макс(НепогашеннаяСумма, Дельта)
			Иначе
				Дельта = Мин(НепогашеннаяСумма, Дельта)
			КонецЕсли; 

			// Проверим текущую сумму на максимум.
			Если СтрокаТабличнойЧасти[ИмяКолонки] > МаксимальнаяСумма  Тогда
				МаксимальнаяСумма       = СтрокаТабличнойЧасти[ИмяКолонки];
				СтрокаМаксимальнойСуммы = СтрокаТабличнойЧасти;
			КонецЕсли;

			// Увеличиваем значение и запоминаем старое.
			СтрокаТабличнойЧасти.СуммаСкидки = Дельта;
			
			// Остаток нераспределенной суммы надо уменьшать на значение реального изменения
			НепогашеннаяСумма = НепогашеннаяСумма - СтрокаТабличнойЧасти.СуммаСкидки;

			// Пересчитываем связанные реквизиты.
			ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаСкидкиТабЧасти(СтрокаТабличнойЧасти);
			Если ПоказыватьСуммуНДС Тогда
				ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
				ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;  
		
	// Если что-то осталось, относим на строку с максимальной суммой.
	Если НепогашеннаяСумма > 0 И СтрокаМаксимальнойСуммы <> Неопределено Тогда

		СтрокаМаксимальнойСуммы.СуммаСкидки = СтрокаМаксимальнойСуммы.СуммаСкидки + НепогашеннаяСумма;
		ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаСкидкиТабЧасти(СтрокаМаксимальнойСуммы);
		Если ПоказыватьСуммуНДС Тогда
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаМаксимальнойСуммы, ДокументСуммаВключаетНДС);
			ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаМаксимальнойСуммы, ДокументСуммаВключаетНДС);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЕдиницаИзмеренияПриИзмененииНаСервере(СтрокаТабличнойЧасти)
	
	ОбработкаТабличныхЧастей.ЗаполнитьКоэффициентТабЧасти(СтрокаТабличнойЧасти, Неопределено, "Товары", Метаданные.Обработки.ИзменениеТаблицыТоваров);
	
КонецПроцедуры
