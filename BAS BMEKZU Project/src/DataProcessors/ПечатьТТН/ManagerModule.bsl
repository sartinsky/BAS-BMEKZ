
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТТН") Тогда
		
		Если ТипЗнч(ПараметрыПечати.Документ) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			ТабДокумент = ПечатьТТН_ПеремещениеТоваров(ПараметрыПечати, ОбъектыПечати);
		Иначе
			ТабДокумент = ПечатьТТН(ПараметрыПечати, ОбъектыПечати);
		КонецЕсли;
		
		ИмяФайлаПечатнойФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Товарно-транспортная накладная (1-ТН) №%1 от %2';uk='Товарно-транспортна накладна (1-ТН) №%1 від %2'"),
			ПараметрыПечати.НомерТТН,
			Формат(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПечати.Документ, "Дата"), "ДФ=dd.MM.yyyy"));
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТТН", НСтр("ru='Товарно-транспортная накладная (1-ТН)';uk='Товарно-транспортна накладна (1-ТН)'"), 
			ТабДокумент,,"Обработка.ПечатьТТН.ПФ_MXL_UK_ТТН", ИмяФайлаПечатнойФормы);
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьТТН(ПараметрыПечати, ОбъектыПечати) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Документ                 = ПараметрыПечати.Документ;
	МаркаИГосНомерАвтомобиля = ПараметрыПечати.МаркаИГосНомерАвтомобиля;
	ГосНомерПрицепа          = ПараметрыПечати.ГосНомерПрицепа;
	ПунктПогрузки            = ПараметрыПечати.ПунктПогрузки;
	ПунктРазгрузки           = ПараметрыПечати.ПунктРазгрузки;
	Водитель                 = ПараметрыПечати.Водитель;
	Перевозчик               = ПараметрыПечати.Перевозчик;
	ВидПеревозки             = ПараметрыПечати.ВидПеревозки;
	НомерТТН                 = ПараметрыПечати.НомерТТН;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза",          Документ.Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Документ.Склад);
	Запрос.УстановитьПараметр("ТекущийДокумент",  Документ);
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ссылка       КАК Документ,
	|	Номер,
	|	Дата         КАК ДатаДокумента,
	|	Организация,
	|	Организация  КАК ЮрФизЛицо,
	|	Организация  КАК Поставщик,
	|	Организация  КАК Контрагент,
	|	Организация  КАК Руководители,
	|	ВЫБОР КОГДА Грузополучатель = &ПустойКонтрагент
	|	      ТОГДА Контрагент
	|	      ИНАЧЕ Грузополучатель КОНЕЦ КАК Грузополучатель,
	| 	Организация  КАК Грузоотправитель,
	|	БанковскийСчетОрганизации КАК БанковскийСчет,
	|	Контрагент   КАК Покупатель,
	|	Контрагент   КАК Плательщик,
	|	ОтветственныеЛица.ФизическоеЛицо КАК ОтветственноеЛицо,
	|	ВалютаДокумента,
	|	КурсВзаиморасчетов       КАК Курс,
	|	КратностьВзаиморасчетов  КАК Кратность,
	|	СуммаВключаетНДС,
	|	Получил,
	|	ДоверенностьСерия,
	|	ДоверенностьНомер,
	|	ДоверенностьДата
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|ПО
	|	ОтветственныеЛица.СтруктурнаяЕдиница = РеализацияТоваровУслуг.Склад
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	// ИНАГРО++
	|  "
	+?(ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ(),"
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ссылка КАК Документ,
	|	ИНАГРО_РеализацияБиологическихАктивов.Номер,
	|	ИНАГРО_РеализацияБиологическихАктивов.Дата КАК ДатаДокумента,
	|	ИНАГРО_РеализацияБиологическихАктивов.Организация,
	|	ИНАГРО_РеализацияБиологическихАктивов.Организация КАК ЮрФизЛицо,
	|	ИНАГРО_РеализацияБиологическихАктивов.Организация КАК Поставщик,
	|	ИНАГРО_РеализацияБиологическихАктивов.Организация КАК Контрагент,
	|	ИНАГРО_РеализацияБиологическихАктивов.Организация КАК Руководители,
	|	ВЫБОР
	|		КОГДА ИНАГРО_РеализацияБиологическихАктивов.Грузополучатель = &ПустойКонтрагент
	|			ТОГДА ИНАГРО_РеализацияБиологическихАктивов.Контрагент
	|		ИНАЧЕ ИНАГРО_РеализацияБиологическихАктивов.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ИНАГРО_РеализацияБиологическихАктивов.Организация КАК Грузоотправитель,
	|	ИНАГРО_РеализацияБиологическихАктивов.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	ИНАГРО_РеализацияБиологическихАктивов.Контрагент КАК Покупатель,
	|	ИНАГРО_РеализацияБиологическихАктивов.Контрагент КАК Плательщик,
	|	ОтветственныеЛица.ФизическоеЛицо КАК ОтветственноеЛицо,
	|	ИНАГРО_РеализацияБиологическихАктивов.ВалютаДокумента,
	|	ИНАГРО_РеализацияБиологическихАктивов.КурсВзаиморасчетов КАК Курс,
	|	ИНАГРО_РеализацияБиологическихАктивов.КратностьВзаиморасчетов КАК Кратность,
	|	ИНАГРО_РеализацияБиологическихАктивов.СуммаВключаетНДС,
	|	ИНАГРО_РеализацияБиологическихАктивов.Получил,
	|	ИНАГРО_РеализацияБиологическихАктивов.ДоверенностьСерия,
	|	ИНАГРО_РеализацияБиологическихАктивов.ДоверенностьНомер,
	|	ИНАГРО_РеализацияБиологическихАктивов.ДоверенностьДата
	|ИЗ
	|	Документ.ИНАГРО_РеализацияБиологическихАктивов КАК ИНАГРО_РеализацияБиологическихАктивов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|		ПО (ОтветственныеЛица.СтруктурнаяЕдиница = ИНАГРО_РеализацияБиологическихАктивов.Склад)
	|ГДЕ
	|	ИНАГРО_РеализацияБиологическихАктивов.Ссылка = &ТекущийДокумент","");	
	// ИНАГРО--

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Документ);

	Если Документ.ВалютаДокумента = Документ.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		// Документ оформлен в валюте взаиморасчетов
		Запрос.УстановитьПараметр("Курс", Документ.КурсВзаиморасчетов);
		Запрос.УстановитьПараметр("Кратность", Документ.КратностьВзаиморасчетов);
	Иначе
		// Документ оформлен в валюте регламентированного учета
		Запрос.УстановитьПараметр("Курс", 1);
		Запрос.УстановитьПараметр("Кратность", 1);
	КонецЕсли;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                                 КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное              КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Код			                 КАК Артикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление               КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Код 						 КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                             КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление   	         КАК ВидУпаковки,
	|	ВложенныйЗапрос.СтавкаНДС           КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена                КАК Цена,
	|	ВложенныйЗапрос.Количество          КАК Количество,
	|	ВложенныйЗапрос.Сумма               КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС            КАК СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки         КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка               КАК Метка
	|ИЗ
	|
	|	(
	|	ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.Коэффициент,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения 					 КАК ЕдиницаИзмеренияМест,
	|		РеализацияТоваровУслуг.СтавкаНДС,
	|		РеализацияТоваровУслуг.Цена * &Курс / &Кратность             КАК Цена,
	|		СУММА(РеализацияТоваровУслуг.Количество)                     КАК Количество,
	|		СУММА(РеализацияТоваровУслуг.Сумма    * &Курс / &Кратность)  КАК Сумма,
	|		СУММА(РеализацияТоваровУслуг.СуммаНДС * &Курс / &Кратность)  КАК СуммаНДС,
	|		МИНИМУМ(РеализацияТоваровУслуг.НомерСтроки)                  КАК НомерСтроки,
	|		0                                                            КАК Метка
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|		РеализацияТоваровУслуг.Номенклатура,
	|		РеализацияТоваровУслуг.Коэффициент,
	|		РеализацияТоваровУслуг.ЕдиницаИзмерения,
	|		РеализацияТоваровУслуг.СтавкаНДС,
	|		РеализацияТоваровУслуг.Цена
	// ИНАГРО++
	|"	
	+?(ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ(),"
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИНАГРО_РеализацияБиологическихАктивовТовары.Номенклатура,
	|		ИНАГРО_РеализацияБиологическихАктивовТовары.Коэффициент,
	|		ИНАГРО_РеализацияБиологическихАктивовТовары.ЕдиницаИзмерения,
	|		ИНАГРО_РеализацияБиологическихАктивовТовары.ЕдиницаИзмерения,
	|		ИНАГРО_РеализацияБиологическихАктивовТовары.СтавкаНДС,
	|		ИНАГРО_РеализацияБиологическихАктивовТовары.Цена * &Курс / &Кратность,
	|		СУММА(ИНАГРО_РеализацияБиологическихАктивовТовары.Количество),
	|		СУММА(ИНАГРО_РеализацияБиологическихАктивовТовары.Сумма * &Курс / &Кратность),
	|		СУММА(ИНАГРО_РеализацияБиологическихАктивовТовары.СуммаНДС * &Курс / &Кратность),
	|		МИНИМУМ(ИНАГРО_РеализацияБиологическихАктивовТовары.НомерСтроки),
	|		0
	|	ИЗ
	|		Документ.ИНАГРО_РеализацияБиологическихАктивов.Товары КАК ИНАГРО_РеализацияБиологическихАктивовТовары
	|	ГДЕ
	|		ИНАГРО_РеализацияБиологическихАктивовТовары.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ИНАГРО_РеализацияБиологическихАктивовТовары.Номенклатура,
	|		ИНАГРО_РеализацияБиологическихАктивовТовары.Коэффициент,
	|		ИНАГРО_РеализацияБиологическихАктивовТовары.ЕдиницаИзмерения,
	|		ИНАГРО_РеализацияБиологическихАктивовТовары.СтавкаНДС,
	|		ИНАГРО_РеализацияБиологическихАктивовТовары.Цена","")+"	) КАК ВложенныйЗапрос
	// ИНАГРО--
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номенклатура                    КАК Номенклатура,
	|	РеализацияТоваровУслуг.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.Код   			   КАК Артикул,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Представление               КАК БазоваяЕдиницаНаименование,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения.Код 						КАК БазоваяЕдиницаКодПоОКЕИ,
	|	РеализацияТоваровУслуг.Номенклатура.БазоваяЕдиницаИзмерения                             КАК ЕдиницаИзмерения,
	|	NULL                                                  КАК ВидУпаковки,
	|	""Без НДС""                                           КАК СтавкаНДС,
	|	РеализацияТоваровУслуг.Цена * &Курс / &Кратность      КАК Цена,
	|	РеализацияТоваровУслуг.Количество                     КАК Количество,
	|	РеализацияТоваровУслуг.Сумма * &Курс / &Кратность     КАК Сумма,
	|	0                                                     КАК СуммаНДС,
	|	РеализацияТоваровУслуг.НомерСтроки                    КАК НомерСтроки,
	|	2                                                     КАК Метка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.ВозвратнаяТара КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
//	// ИНАГРО++
	| "
	+?(ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ(),"
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИНАГРО_РеализацияБиологическихАктивовВозвратнаяТара.Номенклатура,
	|	ИНАГРО_РеализацияБиологическихАктивовВозвратнаяТара.Номенклатура.НаименованиеПолное,
	|	ИНАГРО_РеализацияБиологическихАктивовВозвратнаяТара.Номенклатура.Код,
	|	ИНАГРО_РеализацияБиологическихАктивовВозвратнаяТара.Номенклатура.БазоваяЕдиницаИзмерения.Представление,
	|	ИНАГРО_РеализацияБиологическихАктивовВозвратнаяТара.Номенклатура.БазоваяЕдиницаИзмерения.Код,
	|	ИНАГРО_РеализацияБиологическихАктивовВозвратнаяТара.Номенклатура.БазоваяЕдиницаИзмерения,
	|	NULL,
	|	""Без НДС"",
	|	ИНАГРО_РеализацияБиологическихАктивовВозвратнаяТара.Цена * &Курс / &Кратность,
	|	ИНАГРО_РеализацияБиологическихАктивовВозвратнаяТара.Количество,
	|	ИНАГРО_РеализацияБиологическихАктивовВозвратнаяТара.Сумма * &Курс / &Кратность,
	|	0,
	|	ИНАГРО_РеализацияБиологическихАктивовВозвратнаяТара.НомерСтроки,
	|	2
	|ИЗ
	|	Документ.ИНАГРО_РеализацияБиологическихАктивов.ВозвратнаяТара КАК ИНАГРО_РеализацияБиологическихАктивовВозвратнаяТара
	|ГДЕ
	|	ИНАГРО_РеализацияБиологическихАктивовВозвратнаяТара.Ссылка = &ТекущийДокумент","")+"
	// ИНАГРО--
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|
	|";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТТН";
	НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
	
	Если Шапка.ДатаДокумента < Дата("20140114") Тогда
		ЗаполнитьТТН (Шапка, ЗапросТовары, ТабДокумент,ПараметрыПечати)
	ИначеЕсли Шапка.ДатаДокумента < Дата("20180910")Тогда
		ЗаполнитьТТН2014 (Шапка, ЗапросТовары, ТабДокумент,ПараметрыПечати)
	ИначеЕсли Шапка.ДатаДокумента < Дата("20190712")Тогда
	    ЗаполнитьТТН2018 (Шапка, ЗапросТовары, ТабДокумент,ПараметрыПечати)
	Иначе
		ЗаполнитьТТН2019 (Шапка, ЗапросТовары, ТабДокумент,ПараметрыПечати)
	КонецЕсли;
	
	// В табличном документе зададим имя области, в которую был выведен объект.
	// Конкретно в этом случае, нужен не для покомплектной печати, а для возможности задать наименование фалйа при сохранении с номером и датой.
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
		НомерСтрокиНачало, ОбъектыПечати, Документ);
	
	Возврат ТабДокумент;

КонецФункции // ПечатьТТН()
	
Процедура ЗаполнитьТТН (Шапка, ЗапросТовары, ТабДокумент, ПараметрыПечати)
	
	Документ                 = ПараметрыПечати.Документ;
	МаркаИГосНомерАвтомобиля = ПараметрыПечати.МаркаИГосНомерАвтомобиля;
	ГосНомерПрицепа          = ПараметрыПечати.ГосНомерПрицепа;
	ПунктПогрузки            = ПараметрыПечати.ПунктПогрузки;
	ПунктРазгрузки           = ПараметрыПечати.ПунктРазгрузки;
	Водитель                 = ПараметрыПечати.Водитель;
	Перевозчик               = ПараметрыПечати.Перевозчик;
	ВидПеревозки             = ПараметрыПечати.ВидПеревозки;
	НомерТТН                 = ПараметрыПечати.НомерТТН;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 5;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 5;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;

	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьТТН.ПФ_MXL_UK_ТТН");
	
	КодЯзыкаПечать = "uk";
	
	// Выводим общие реквизиты шапки
	СведенияОПокупателе       = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	СведенияОГрузоотправитель = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);

	Если ЗначениеЗаполнено(Документ.БанковскийСчетОрганизации) Тогда
		НомерСчета = Документ.БанковскийСчетОрганизации.НомерСчета;
		Банк       = Документ.БанковскийСчетОрганизации.Банк;
		МФО		   = Документ.БанковскийСчетОрганизации.Банк.Код;
		
		СведенияОГрузоотправитель.Вставить("НомерСчета",       НомерСчета);
		СведенияОГрузоотправитель.Вставить("Банк",             Банк);
		СведенияОГрузоотправитель.Вставить("МФО",              МФО);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.НомерДокумента                = НомерТТН;
	ОбластьМакета.Параметры.ДатаДокумента                 = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.Грузоотправитель              = Шапка.Грузоотправитель;
	ОбластьМакета.Параметры.Грузополучатель               = Шапка.Грузополучатель;
	ОбластьМакета.Параметры.Плательщик                    = Шапка.Покупатель;
	ОбластьМакета.Параметры.ГрузоотправительПредставление = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ",, КодЯзыкаПечать);
	ОбластьМакета.Параметры.ГрузополучательПредставление  = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОГрузополучателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ",, КодЯзыкаПечать);
	ОбластьМакета.Параметры.ПлательщикПредставление       = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ",, КодЯзыкаПечать);
	ОбластьМакета.Параметры.ГрузоотправительЕДРПОУ = СведенияОГрузоотправитель.КодПоЕДРПОУ;
	ОбластьМакета.Параметры.ГрузополучательЕДРПОУ  = СведенияОГрузополучателе.КодПоЕДРПОУ;
	ОбластьМакета.Параметры.ПлательщикЕДРПОУ       = СведенияОПокупателе.КодПоЕДРПОУ;
	
	ОбластьМакета.Параметры.МаркаИГосНомерАвтомобиля = МаркаИГосНомерАвтомобиля;
	ОбластьМакета.Параметры.ФИОВодителя = Водитель;
	ОбластьМакета.Параметры.ВидПеревозки = ВидПеревозки;
	ОбластьМакета.Параметры.ГосНомерПрицепа = ГосНомерПрицепа; 
	
	ОбластьМакета.Параметры.ПунктПогрузки = ПунктПогрузки;
	ОбластьМакета.Параметры.ПунктРазгрузки = ПунктРазгрузки;
	
	ОбластьМакета.Параметры.ОрганизацияПеревозчик = Перевозчик;
	
	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 23;
	СтрокШапки      = 10;
	СтрокПодвала    = 9;
	НомерСтраницы   = 1;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ЗапросТовары.Количество();

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;

	// инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	Ном             = 0;

	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрок.ТоварНаименование;
		//		Мест        = ВыборкаСтрок.КоличествоМест;
		Количество  = ВыборкаСтрок.Количество;
		СуммаСНДС   = Окр((ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС)), 2);
		ОбластьМакета.Параметры.Сумма = СуммаСНДС;

		ОбластьМакета.Параметры.Цена = ?(Количество = 0, 0, СуммаСНДС / Количество);

		ТабДокумент.Вывести(ОбластьМакета);

		// увеличим итоги по дукументу
		ИтогоКоличество = ИтогоКоличество + Количество;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;

	КонецЦикла;

	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоКоличество = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогоСуммаСНДС  = ИтогоСуммаСНДС;

	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");

	Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента);
	
	// Отпуск товара разрешил
	ФИООтпускРазрешил       = Руководители.РуководительПредставление;
	ДолжностьОтпускРазрешил = Руководители.РуководительДолжность;
	
	ОбластьМакета.Параметры.ОтпускРазрешилДолжность = ДолжностьОтпускРазрешил;
	ОбластьМакета.Параметры.ДоверенностьЧерезКого   = Шапка.Получил;
	
	ОбластьМакета.Параметры.СерияДоверенности = Шапка.ДоверенностьСерия;
	ОбластьМакета.Параметры.НомерДоверенности = Шапка.ДоверенностьНомер;
	ОбластьМакета.Параметры.ДатаДоверенности  = Формат(Шапка.ДоверенностьДата, "ДФ = ""дд.ММ.гггг""");
	ОбластьМакета.Параметры.ОтпущеноНаСуммуПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ИтогоСуммаСНДС, Константы.ВалютаРегламентированногоУчета.Получить(), КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПогрузочныеОперации");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПрочиеСведения");
	ТабДокумент.Вывести(ОбластьМакета);

КонецПроцедуры // ЗаполнитьТТН()

Процедура ЗаполнитьТТН2014 (Шапка, ЗапросТовары, ТабДокумент, ПараметрыПечати)
	
	Документ                 = ПараметрыПечати.Документ;
	МаркаИГосНомерАвтомобиля = ПараметрыПечати.МаркаИГосНомерАвтомобиля;
	ГосНомерПрицепа          = ПараметрыПечати.ГосНомерПрицепа;
	ПунктПогрузки            = ПараметрыПечати.ПунктПогрузки;
	ПунктРазгрузки           = ПараметрыПечати.ПунктРазгрузки;
	Водитель                 = ПараметрыПечати.Водитель;
	Перевозчик               = ПараметрыПечати.Перевозчик;
	ВидПеревозки             = ПараметрыПечати.ВидПеревозки;
	НомерТТН                 = ПараметрыПечати.НомерТТН;

	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 5;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 5;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;

	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьТТН.ПФ_MXL_UK_ТТН2014");
	
	КодЯзыкаПечать = "uk";
	
	// Выводим общие реквизиты шапки
	СведенияОПокупателе       = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	СведенияОГрузоотправитель = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	
	Если ЗначениеЗаполнено(Документ.БанковскийСчетОрганизации) Тогда
		НомерСчета = Документ.БанковскийСчетОрганизации.НомерСчета;
		Банк       = Документ.БанковскийСчетОрганизации.Банк;
		МФО		   = Документ.БанковскийСчетОрганизации.Банк.Код;
		
		СведенияОГрузоотправитель.Вставить("НомерСчета",       НомерСчета);
		СведенияОГрузоотправитель.Вставить("Банк",             Банк);
		СведенияОГрузоотправитель.Вставить("МФО",              МФО);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.НомерДокумента                = НомерТТН;
	ОбластьМакета.Параметры.ДатаДокумента                 = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.Грузоотправитель              = Шапка.Грузоотправитель;
	ОбластьМакета.Параметры.Грузополучатель               = Шапка.Грузополучатель;
	ОбластьМакета.Параметры.Плательщик                    = Шапка.Покупатель;
	ОбластьМакета.Параметры.ГрузоотправительПредставление = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ,",, КодЯзыкаПечать);
	ОбластьМакета.Параметры.ГрузополучательПредставление  = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОГрузополучателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ,",, КодЯзыкаПечать);
	ОбластьМакета.Параметры.ПлательщикПредставление       = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ,",, КодЯзыкаПечать);
	
	ОбластьМакета.Параметры.МаркаИГосНомерАвтомобиля = МаркаИГосНомерАвтомобиля;
	ОбластьМакета.Параметры.ФИОВодителя = Водитель;
	ОбластьМакета.Параметры.ВидПеревозки = ВидПеревозки;
	ОбластьМакета.Параметры.ГосНомерПрицепа = ГосНомерПрицепа; 
	
	ОбластьМакета.Параметры.ПунктПогрузки = ПунктПогрузки;
	ОбластьМакета.Параметры.ПунктРазгрузки = ПунктРазгрузки;
	
	ОбластьМакета.Параметры.ОрганизацияПеревозчик = Перевозчик;
	
	Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента);
	
	// Отпуск товара разрешил
	ФИООтпускРазрешил       = Руководители.РуководительПредставление;
	ДолжностьОтпускРазрешил = Руководители.РуководительДолжность;
	
	ОбластьМакета.Параметры.ОтпускРазрешилДолжность = ?(ЗначениеЗаполнено(ФИООтпускРазрешил), ФИООтпускРазрешил + ", " + ДолжностьОтпускРазрешил, "");
	
	ОбластьМакета.Параметры.СерияДоверенности = Шапка.ДоверенностьСерия;
	ОбластьМакета.Параметры.НомерДоверенности = Шапка.ДоверенностьНомер;
	ОбластьМакета.Параметры.ДатаДоверенности  = Формат(Шапка.ДоверенностьДата, "ДФ = ""дд.ММ.гггг""");
	
	СуммаСНДС   = Окр((ЗапросТовары.Итог("Сумма") + ?(Шапка.СуммаВключаетНДС, 0, ЗапросТовары.Итог("СуммаНДС"))), 2);
	ОбластьМакета.Параметры.ОтпущеноНаСуммуПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаСНДС, Константы.ВалютаРегламентированногоУчета.Получить(), КодЯзыкаПечать);
	ОбластьМакета.Параметры.СуммаНДС                = ОбщегоНазначенияБПВызовСервера.ФорматСумм(ЗапросТовары.Итог("СуммаНДС"), Константы.ВалютаРегламентированногоУчета.Получить());
	
	Количество = ЗапросТовары.Итог("Количество");
	КоличествоМест = ?(Цел(Количество) = Количество, Количество, Цел(Количество) + 1);
	КоличествоМестПрописью = НРег(ЧислоПрописью(КоличествоМест,"Л=uk_UK"));
	ОбластьМакета.Параметры.КоличествоМестПрописью  = Лев(КоличествоМестПрописью,СтрДлина(КоличествоМестПрописью)-3);
	
	ТабДокумент.Вывести(ОбластьМакета);
    ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	КоличествоСтрок = ЗапросТовары.Количество();

	// инициализация итогов по странице
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;

	// инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	Ном             = 1;

	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.НомерСтроки = Ном;
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрок.ТоварНаименование;
		//		Мест        = ВыборкаСтрок.КоличествоМест;
		Количество  = ВыборкаСтрок.Количество;
		СуммаСНДС   = Окр((ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС)), 2);
		СуммаБезНДС = СуммаСНДС - ВыборкаСтрок.СуммаНДС;
		
		ОбластьМакета.Параметры.Сумма = СуммаСНДС;

		ОбластьМакета.Параметры.Цена = ?(Количество = 0, 0, СуммаБезНДС / Количество);

		ТабДокумент.Вывести(ОбластьМакета);

		// увеличим итоги по дукументу
		ИтогоКоличество = ИтогоКоличество + Количество;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;
		Ном             = Ном + 1;

	КонецЦикла;

	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоКоличество = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогоСуммаСНДС  = ИтогоСуммаСНДС;

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПогрузочныеОперации");
	ТабДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры  //ЗаполнитьТТН2014

Процедура ЗаполнитьТТН2018 (Шапка, ЗапросТовары, ТабДокумент, ПараметрыПечати)
	
	Документ                 = ПараметрыПечати.Документ;
	МаркаИГосНомерАвтомобиля = ПараметрыПечати.МаркаИГосНомерАвтомобиля;
	ГосНомерПрицепа          = ПараметрыПечати.ГосНомерПрицепа;
	ПунктПогрузки            = ПараметрыПечати.ПунктПогрузки;
	ПунктРазгрузки           = ПараметрыПечати.ПунктРазгрузки;
	Водитель                 = ПараметрыПечати.Водитель;
	Перевозчик               = ПараметрыПечати.Перевозчик;
	ВидПеревозки             = ПараметрыПечати.ВидПеревозки;
	НомерТТН                 = ПараметрыПечати.НомерТТН;

	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 5;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 5;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;

	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьТТН.ПФ_MXL_UK_ТТН2018");
	
	КодЯзыкаПечать = "uk";
	
	// Выводим общие реквизиты шапки
	СведенияОПокупателе       = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	СведенияОГрузоотправитель = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	
	Если ЗначениеЗаполнено(Документ.БанковскийСчетОрганизации) Тогда
		НомерСчета = Документ.БанковскийСчетОрганизации.НомерСчета;
		Банк       = Документ.БанковскийСчетОрганизации.Банк;
		МФО		   = Документ.БанковскийСчетОрганизации.Банк.Код;
		
		СведенияОГрузоотправитель.Вставить("НомерСчета",       НомерСчета);
		СведенияОГрузоотправитель.Вставить("Банк",             Банк);
		СведенияОГрузоотправитель.Вставить("МФО",              МФО);
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.НомерДокумента                = НомерТТН;
	ОбластьМакета.Параметры.ДатаДокумента                 = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.Грузоотправитель              = Шапка.Грузоотправитель;
	ОбластьМакета.Параметры.Грузополучатель               = Шапка.Грузополучатель;
	ОбластьМакета.Параметры.Плательщик                    = Шапка.Покупатель;
	ОбластьМакета.Параметры.ГрузоотправительПредставление = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ,",, КодЯзыкаПечать);
	ОбластьМакета.Параметры.ГрузополучательПредставление  = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОГрузополучателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ,",, КодЯзыкаПечать);
	ОбластьМакета.Параметры.ПлательщикПредставление       = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ,",, КодЯзыкаПечать);
	
	ОбластьМакета.Параметры.МаркаИГосНомерАвтомобиля = МаркаИГосНомерАвтомобиля;
	ОбластьМакета.Параметры.ФИОВодителя = Водитель;
	ОбластьМакета.Параметры.ВидПеревозки = ВидПеревозки;
	ОбластьМакета.Параметры.ГосНомерПрицепа = ГосНомерПрицепа; 
	
	ОбластьМакета.Параметры.ПунктПогрузки = ПунктПогрузки;
	ОбластьМакета.Параметры.ПунктРазгрузки = ПунктРазгрузки;
	
	ОбластьМакета.Параметры.ОрганизацияПеревозчик = Перевозчик;
	
	Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента);
	
	// Отпуск товара разрешил
	ФИООтпускРазрешил       = Руководители.РуководительПредставление;
	ДолжностьОтпускРазрешил = Руководители.РуководительДолжность;
	
	ОбластьМакета.Параметры.ОтпускРазрешилДолжность = ?(ЗначениеЗаполнено(ФИООтпускРазрешил), ФИООтпускРазрешил + ", " + ДолжностьОтпускРазрешил, "");
	
	ОбластьМакета.Параметры.СерияДоверенности = Шапка.ДоверенностьСерия;
	ОбластьМакета.Параметры.НомерДоверенности = Шапка.ДоверенностьНомер;
	ОбластьМакета.Параметры.ДатаДоверенности  = Формат(Шапка.ДоверенностьДата, "ДФ = ""дд.ММ.гггг""");
	
	СуммаСНДС   = Окр((ЗапросТовары.Итог("Сумма") + ?(Шапка.СуммаВключаетНДС, 0, ЗапросТовары.Итог("СуммаНДС"))), 2);
	ОбластьМакета.Параметры.ОтпущеноНаСуммуПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаСНДС, Константы.ВалютаРегламентированногоУчета.Получить(), КодЯзыкаПечать);
	ОбластьМакета.Параметры.СуммаНДС                = ОбщегоНазначенияБПВызовСервера.ФорматСумм(ЗапросТовары.Итог("СуммаНДС"), Константы.ВалютаРегламентированногоУчета.Получить());
	
	Количество = ЗапросТовары.Итог("Количество");
	КоличествоМест = ?(Цел(Количество) = Количество, Количество, Цел(Количество) + 1);
	КоличествоМестПрописью = НРег(ЧислоПрописью(КоличествоМест,"Л=uk_UK"));
	ОбластьМакета.Параметры.КоличествоМестПрописью  = Лев(КоличествоМестПрописью,СтрДлина(КоличествоМестПрописью)-3);
	
	ТабДокумент.Вывести(ОбластьМакета);
    ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	КоличествоСтрок = ЗапросТовары.Количество();

	// инициализация итогов по странице
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;

	// инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	Ном             = 1;

	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.НомерСтроки = Ном;
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрок.ТоварНаименование;
		//		Мест        = ВыборкаСтрок.КоличествоМест;
		Количество  = ВыборкаСтрок.Количество;
		СуммаСНДС   = Окр((ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС)), 2);
		СуммаБезНДС = СуммаСНДС - ВыборкаСтрок.СуммаНДС;
		
		ОбластьМакета.Параметры.Сумма = СуммаСНДС;

		ОбластьМакета.Параметры.Цена = ?(Количество = 0, 0, СуммаБезНДС / Количество);

		ТабДокумент.Вывести(ОбластьМакета);

		// увеличим итоги по дукументу
		ИтогоКоличество = ИтогоКоличество + Количество;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;
		Ном             = Ном + 1;

	КонецЦикла;

	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоКоличество = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогоСуммаСНДС  = ИтогоСуммаСНДС;

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПогрузочныеОперации");
	ТабДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры  //ЗаполнитьТТН2018

Процедура ЗаполнитьТТН2019 (Шапка, ЗапросТовары, ТабДокумент, ПараметрыПечати)
	
	Документ                 = ПараметрыПечати.Документ;
	МаркаИГосНомерАвтомобиля = ПараметрыПечати.МаркаИГосНомерАвтомобиля;
	ГосНомерПрицепа          = ПараметрыПечати.ГосНомерПрицепа;
	ПунктПогрузки            = ПараметрыПечати.ПунктПогрузки;
	ПунктРазгрузки           = ПараметрыПечати.ПунктРазгрузки;
	Водитель                 = ПараметрыПечати.Водитель;
	Перевозчик               = ПараметрыПечати.Перевозчик;
	ВидПеревозки             = ПараметрыПечати.ВидПеревозки;
	НомерТТН                 = ПараметрыПечати.НомерТТН;

	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 5;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 5;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;

	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьТТН.ПФ_MXL_UK_ТТН2019");
	
	КодЯзыкаПечать = "uk";
	
	// Выводим общие реквизиты шапки
	 СведенияОПокупателе       = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента,,,КодЯзыкаПечать);
	 СведенияОГрузополучателе  = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента,,,КодЯзыкаПечать);
	 СведенияОГрузоотправитель = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента,,Шапка.БанковскийСчет,КодЯзыкаПечать);
	
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.НомерДокумента                = НомерТТН;
	ОбластьМакета.Параметры.ДатаДокумента                 = Формат(Шапка.ДатаДокумента,"Л=uk_UA; ДФ='''""''dd''""'' MMMM yyyy'") +" року";
	ОбластьМакета.Параметры.Грузоотправитель              = Шапка.Грузоотправитель;
	ОбластьМакета.Параметры.Грузополучатель               = Шапка.Грузополучатель;
	ОбластьМакета.Параметры.Плательщик                    = Шапка.Покупатель;
	ОбластьМакета.Параметры.ГрузоотправительПредставление = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ,",, КодЯзыкаПечать);
	ОбластьМакета.Параметры.ГрузополучательПредставление  = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОГрузополучателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ,",, КодЯзыкаПечать);
	ОбластьМакета.Параметры.ПлательщикПредставление       = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ,",, КодЯзыкаПечать);
	
	ОбластьМакета.Параметры.МаркаИГосНомерАвтомобиля = МаркаИГосНомерАвтомобиля;
	ОбластьМакета.Параметры.ФИОВодителя = Водитель;
	ОбластьМакета.Параметры.ВидПеревозки = ВидПеревозки;
	ОбластьМакета.Параметры.ГосНомерПрицепа = ГосНомерПрицепа; 
	
	ОбластьМакета.Параметры.ПунктПогрузки = ПунктПогрузки;
	ОбластьМакета.Параметры.ПунктРазгрузки = ПунктРазгрузки;
	
	ОбластьМакета.Параметры.ОрганизацияПеревозчик = Перевозчик;
	
	Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента);
	
	СуммаСНДС   = Окр((ЗапросТовары.Итог("Сумма") + ?(Шапка.СуммаВключаетНДС, 0, ЗапросТовары.Итог("СуммаНДС"))), 2);
	ОбластьМакета.Параметры.ОтпущеноНаСуммуПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(СуммаСНДС, Константы.ВалютаРегламентированногоУчета.Получить(), КодЯзыкаПечать);
	ОбластьМакета.Параметры.СуммаНДС                = ОбщегоНазначенияБПВызовСервера.ФорматСумм(ЗапросТовары.Итог("СуммаНДС"), Константы.ВалютаРегламентированногоУчета.Получить());
	
	Количество = ЗапросТовары.Итог("Количество");
	КоличествоМест = ?(Цел(Количество) = Количество, Количество, Цел(Количество) + 1);
	КоличествоМестПрописью = НРег(ЧислоПрописью(КоличествоМест,"Л=uk_UK"));
	ОбластьМакета.Параметры.КоличествоМестПрописью  = Лев(КоличествоМестПрописью,СтрДлина(КоличествоМестПрописью)-3);
	
	ТабДокумент.Вывести(ОбластьМакета);
    ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ЗаголовокТаблицы);
	
	КоличествоСтрок = ЗапросТовары.Количество();

	// инициализация итогов по странице
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;

	// инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	Ном             = 1;

	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.НомерСтроки = Ном;
		ОбластьМакета.Параметры.ТоварНаименование = ВыборкаСтрок.ТоварНаименование;
		//		Мест        = ВыборкаСтрок.КоличествоМест;
		Количество  = ВыборкаСтрок.Количество;
		СуммаСНДС   = Окр((ВыборкаСтрок.Сумма + ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрок.СуммаНДС)), 2);
		СуммаБезНДС = СуммаСНДС - ВыборкаСтрок.СуммаНДС;
		
		ОбластьМакета.Параметры.Сумма = СуммаСНДС;

		ОбластьМакета.Параметры.Цена = ?(Количество = 0, 0, СуммаБезНДС / Количество);

		ТабДокумент.Вывести(ОбластьМакета);

		// увеличим итоги по дукументу
		ИтогоКоличество = ИтогоКоличество + Количество;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;
		Ном             = Ном + 1;

	КонецЦикла;

	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоКоличество = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогоСуммаСНДС  = ИтогоСуммаСНДС;

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПогрузочныеОперации");
	ТабДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры  //ЗаполнитьТТН2019 

// Функция осуществляет печать формы "1-Т"
// на основании документа "ПеремещениеТоваров".
//
Функция ПечатьТТН_ПеремещениеТоваров(ПараметрыПечати, ОбъектыПечати) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Документ                 = ПараметрыПечати.Документ;
	МаркаИГосНомерАвтомобиля = ПараметрыПечати.МаркаИГосНомерАвтомобиля;
	ГосНомерПрицепа          = ПараметрыПечати.ГосНомерПрицепа;
	ПунктПогрузки            = ПараметрыПечати.ПунктПогрузки;
	ПунктРазгрузки           = ПараметрыПечати.ПунктРазгрузки;
	Водитель                 = ПараметрыПечати.Водитель;
	Перевозчик               = ПараметрыПечати.Перевозчик;
	ВидПеревозки             = ПараметрыПечати.ВидПеревозки;
	НомерТТН                 = ПараметрыПечати.НомерТТН;
	ТипЦен                   = ПараметрыПечати.ТипЦен;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза",          Документ.Дата);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Документ.СкладОтправитель);
	Запрос.УстановитьПараметр("ТекущийДокумент",    Документ);
	Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТипСкладаНТТ",       Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата         КАК ДатаДокумента,
	|	Организация,
	|	Организация  КАК ЮрФизЛицо,
	|	Организация  КАК Поставщик,
	|	Организация  КАК Контрагент,
	|	Организация  КАК Руководители,
	|	Организация  КАК Грузополучатель,
	|	Организация  КАК Грузоотправитель,
	|	Организация.ОсновнойБанковскийСчет КАК БанковскийСчет,
	|	&ПустойКонтрагент КАК Покупатель,
	|	&ПустойКонтрагент КАК Плательщик,
	|	ВЫБОР КОГДА (СкладОтправитель.ТипСклада = &ТипСкладаНТТ ИЛИ СкладПолучатель.ТипСклада = &ТипСкладаНТТ) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЕстьНТТ,
	|	ОтветственныеЛица.ФизическоеЛицо КАК ОтветственноеЛицо
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ДокПеремещение
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ОтветственныеЛица.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &СтруктурнаяЕдиница) КАК ОтветственныеЛица
	|ПО
	|	ОтветственныеЛица.СтруктурнаяЕдиница = ДокПеремещение.СкладОтправитель
	|
	|ГДЕ
	|	ДокПеремещение.Ссылка = &ТекущийДокумент";

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", Документ);
	Запрос.УстановитьПараметр("ЕстьНТТ",         Шапка.ЕстьНТТ);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура                                 КАК Номенклатура,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Код         				     КАК Артикул,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление               КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Код 						 КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ВложенныйЗапрос.ЕдиницаИзмерения                             КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление   	         КАК ВидУпаковки,
	|	ВложенныйЗапрос.Цена                                         КАК Цена,
	|	0                                                            КАК Сумма,
	|	ВложенныйЗапрос.Количество                                   КАК Количество,
	|	ВложенныйЗапрос.НомерСтроки                                  КАК НомерСтроки,
	|	ВложенныйЗапрос.Метка                                        КАК Метка
	|ИЗ
	|
	|	(
	|	ВЫБРАТЬ
	|		ДокТовар.Номенклатура,
	|		ДокТовар.ЕдиницаИзмерения,
	|		ДокТовар.ЕдиницаИзмерения,
	|		ВЫБОР КОГДА &ЕстьНТТ ТОГДА ДокТовар.Цена ИНАЧЕ 0 КОНЕЦ КАК Цена,
	|		СУММА(ДокТовар.Количество)          КАК Количество,
	|		МИНИМУМ(ДокТовар.НомерСтроки)       КАК НомерСтроки,
	|		0                                   КАК Метка
	|	ИЗ
	|		Документ.ПеремещениеТоваров.Товары КАК ДокТовар
	|	ГДЕ
	|		ДокТовар.Ссылка = &ТекущийДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|		ДокТовар.Номенклатура,
	|		ДокТовар.ЕдиницаИзмерения,
	|		ВЫБОР КОГДА &ЕстьНТТ ТОГДА ДокТовар.Цена ИНАЧЕ 0 КОНЕЦ
	|
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)),
	|	ВложенныйЗапрос.Номенклатура.Код,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Код,
	|	ВложенныйЗапрос.ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление,
	|	ВложенныйЗапрос.Цена,
	|	0,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.Метка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокТовар.Номенклатура КАК Номенклатура,
	|		ДокТовар.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ВЫБОР
	|			КОГДА &ЕстьНТТ
	|				ТОГДА ДокТовар.Цена
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Цена,
	|		СУММА(ДокТовар.Количество) КАК Количество,
	|		МИНИМУМ(ДокТовар.НомерСтроки) КАК НомерСтроки,
	|		1 КАК Метка
	|	ИЗ
	|		Документ.ПеремещениеТоваров.ТоварыНаКомиссии КАК ДокТовар
	|	ГДЕ
	|		ДокТовар.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДокТовар.Номенклатура,
	|		ДокТовар.ЕдиницаИзмерения,
	|		ВЫБОР
	|			КОГДА &ЕстьНТТ
	|				ТОГДА ДокТовар.Цена
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ДокТовар.ЕдиницаИзмерения) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
 	|
	|ВЫБРАТЬ
	|	ДокТара.Номенклатура                                  КАК Номенклатура,
	|	ДокТара.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
	|	ДокТара.Номенклатура.Код             			      КАК Артикул,
	|	ДокТара.Номенклатура.БазоваяЕдиницаИзмерения.Представление               КАК БазоваяЕдиницаНаименование,
	|	ДокТара.Номенклатура.БазоваяЕдиницаИзмерения.Код 						 КАК БазоваяЕдиницаКодПоОКЕИ,
	|	ДокТара.Номенклатура.БазоваяЕдиницаИзмерения                             КАК ЕдиницаИзмерения,
	|	NULL                                                  КАК ВидУпаковки,
	|	0                                                     КАК Цена,
	|	0                                                     КАК Сумма,	
	|	ДокТара.Количество                                    КАК Количество,
	|	ДокТара.НомерСтроки                                   КАК НомерСтроки,
	|	2                                                     КАК Метка
	|ИЗ
	|	Документ.ПеремещениеТоваров.ВозвратнаяТара КАК ДокТара
	|
	|ГДЕ
	|	ДокТара.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
	|
	|";

	ЗапросТовары = Запрос.Выполнить().Выгрузить();

	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		Количество  = ВыборкаСтрок.Количество;

		Если ВыборкаСтрок.Метка <> 0
		 ИЛИ НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			Цена      = 0;
			СуммаСНДС = 0;
		Иначе
			Если ВыборкаСтрок.Цена = 0 Тогда
				Цена = Ценообразование.ПолучитьЦенуНоменклатуры(ВыборкаСтрок.Номенклатура, 
				                                ТипЦен, Шапка.ДатаДокумента, 
				                                мВалютаРегламентированногоУчета, 1, 1);
			Иначе
				Цена = ВыборкаСтрок.Цена;
			КонецЕсли;

			СуммаСНДС = Окр(Количество * Цена, 2);
		КонецЕсли;

		ВыборкаСтрок.Цена  = Цена;
		ВыборкаСтрок.Сумма = СуммаСНДС;

	КонецЦикла;
	
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТТН";
	НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
	
	Если Шапка.ДатаДокумента < Дата("20140114") Тогда
		ЗаполнитьТТН_ПеремещениеТоваров  (Шапка, ЗапросТовары, ТабДокумент, ПараметрыПечати)
	ИначеЕсли Шапка.ДатаДокумента < Дата("20180910") Тогда
	    ЗаполнитьТТН2014_ПеремещениеТоваров  (Шапка, ЗапросТовары, ТабДокумент, ПараметрыПечати)
	ИначеЕсли Шапка.ДатаДокумента < Дата("20190712")Тогда
	    ЗаполнитьТТН2018_ПеремещениеТоваров (Шапка, ЗапросТовары, ТабДокумент,ПараметрыПечати)
	Иначе
		ЗаполнитьТТН2019_ПеремещениеТоваров (Шапка, ЗапросТовары, ТабДокумент,ПараметрыПечати)
	КонецЕсли;	
	
	// В табличном документе зададим имя области, в которую был выведен объект.
	// Конкретно в этом случае, нужен не для покомплектной печати, а для возможности задать наименование фалйа при сохранении с номером и датой.
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
		НомерСтрокиНачало, ОбъектыПечати, Документ);	
	
	Возврат ТабДокумент;

КонецФункции // ПечатьТТН_ПеремещениеТоваров()

Процедура ЗаполнитьТТН_ПеремещениеТоваров (Шапка, ЗапросТовары, ТабДокумент, ПараметрыПечати)
	
	мВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	МаркаИГосНомерАвтомобиля = ПараметрыПечати.МаркаИГосНомерАвтомобиля;
	ГосНомерПрицепа          = ПараметрыПечати.ГосНомерПрицепа;
	ПунктПогрузки            = ПараметрыПечати.ПунктПогрузки;
	ПунктРазгрузки           = ПараметрыПечати.ПунктРазгрузки;
	Водитель                 = ПараметрыПечати.Водитель;
	Перевозчик               = ПараметрыПечати.Перевозчик;
	ВидПеревозки             = ПараметрыПечати.ВидПеревозки;
	НомерТТН                 = ПараметрыПечати.НомерТТН;
	ТипЦен                   = ПараметрыПечати.ТипЦен;
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 5;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 5;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;

	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьТТН.ПФ_MXL_UK_ТТН");
	
	КодЯзыкаПечать = "uk";
	
	// Выводим общие реквизиты шапки
	СведенияОПокупателе       = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	СведенияОГрузоотправитель = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.НомерДокумента                = НомерТТН;
	ОбластьМакета.Параметры.ДатаДокумента                 = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.Грузоотправитель              = Шапка.Грузоотправитель;
	ОбластьМакета.Параметры.Грузополучатель               = Шапка.Грузополучатель;
	ОбластьМакета.Параметры.Плательщик                    = Шапка.Покупатель;
	ОбластьМакета.Параметры.ГрузоотправительПредставление = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ",, КодЯзыкаПечать);
	ОбластьМакета.Параметры.ГрузополучательПредставление  = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОГрузополучателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ",, КодЯзыкаПечать);
	ОбластьМакета.Параметры.ПлательщикПредставление       = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ",, КодЯзыкаПечать);
	ОбластьМакета.Параметры.ГрузоотправительЕДРПОУ = СведенияОГрузоотправитель.КодПоЕДРПОУ;
	ОбластьМакета.Параметры.ГрузополучательЕДРПОУ  = СведенияОГрузополучателе.КодПоЕДРПОУ;
	ОбластьМакета.Параметры.ПлательщикЕДРПОУ       = СведенияОПокупателе.КодПоЕДРПОУ;
	
	ОбластьМакета.Параметры.МаркаИГосНомерАвтомобиля = МаркаИГосНомерАвтомобиля;
	ОбластьМакета.Параметры.ФИОВодителя = Водитель;
	ОбластьМакета.Параметры.ВидПеревозки = ВидПеревозки;
	ОбластьМакета.Параметры.ГосНомерПрицепа = ГосНомерПрицепа; 
	
	ОбластьМакета.Параметры.ПунктПогрузки = ПунктПогрузки;
	ОбластьМакета.Параметры.ПунктРазгрузки = ПунктРазгрузки;
	
	ОбластьМакета.Параметры.ОрганизацияПеревозчик = Перевозчик;
	
	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 23;
	СтрокШапки      = 10;
	СтрокПодвала    = 9;
	НомерСтраницы   = 1;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ЗапросТовары.Количество();

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;

	// инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	Ном             = 0;

	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);
		Количество  = ВыборкаСтрок.Количество;

		Если ВыборкаСтрок.Метка = 2
		 ИЛИ НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			Цена      = 0;
			СуммаСНДС = 0;
		Иначе
			Если ВыборкаСтрок.Цена = 0 Тогда
				Цена = Ценообразование.ПолучитьЦенуНоменклатуры(ВыборкаСтрок.Номенклатура, 
				                                ТипЦен, Шапка.ДатаДокумента, 
				                                мВалютаРегламентированногоУчета, 1, 1);
			Иначе
				Цена = ВыборкаСтрок.Цена;
			КонецЕсли;

			СуммаСНДС = Окр(Количество * Цена, 2);
		КонецЕсли;

		ОбластьМакета.Параметры.Цена  = Цена;
		ОбластьМакета.Параметры.Сумма = СуммаСНДС;

		ТабДокумент.Вывести(ОбластьМакета);
		
		// увеличим итоги по дукументу
		ИтогоКоличество = ИтогоКоличество + Количество;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;

	КонецЦикла;
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоКоличество = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогоСуммаСНДС  = ИтогоСуммаСНДС;

	ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	
	Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента);
	
	// Отпуск товара разрешил
	ФИООтпускРазрешил       = Руководители.РуководительПредставление;
	ДолжностьОтпускРазрешил = Руководители.РуководительДолжность;
	
	ОбластьМакета.Параметры.ОтпускРазрешилДолжность = ДолжностьОтпускРазрешил;
	
	ОбластьМакета.Параметры.ОтпущеноНаСуммуПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ИтогоСуммаСНДС, Константы.ВалютаРегламентированногоУчета.Получить(), КодЯзыкаПечать);
	ТабДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПогрузочныеОперации");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПрочиеСведения");
	ТабДокумент.Вывести(ОбластьМакета);

КонецПроцедуры

Процедура ЗаполнитьТТН2014_ПеремещениеТоваров (Шапка, ЗапросТовары, ТабДокумент, ПараметрыПечати)
	
	МаркаИГосНомерАвтомобиля = ПараметрыПечати.МаркаИГосНомерАвтомобиля;
	ГосНомерПрицепа          = ПараметрыПечати.ГосНомерПрицепа;
	ПунктПогрузки            = ПараметрыПечати.ПунктПогрузки;
	ПунктРазгрузки           = ПараметрыПечати.ПунктРазгрузки;
	Водитель                 = ПараметрыПечати.Водитель;
	Перевозчик               = ПараметрыПечати.Перевозчик;
	ВидПеревозки             = ПараметрыПечати.ВидПеревозки;
	НомерТТН                 = ПараметрыПечати.НомерТТН;
	
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 5;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 5;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;

	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьТТН.ПФ_MXL_UK_ТТН2014");
	
	КодЯзыкаПечать = "uk";
	
	// Выводим общие реквизиты шапки
	СведенияОПокупателе       = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	СведенияОГрузоотправитель = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.НомерДокумента                = НомерТТН;
	ОбластьМакета.Параметры.ДатаДокумента                 = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.Грузоотправитель              = Шапка.Грузоотправитель;
	ОбластьМакета.Параметры.Грузополучатель               = Шапка.Грузополучатель;
	ОбластьМакета.Параметры.Плательщик                    = Шапка.Покупатель;
	ОбластьМакета.Параметры.ГрузоотправительПредставление = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ,",, КодЯзыкаПечать);
	ОбластьМакета.Параметры.ГрузополучательПредставление  = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОГрузополучателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ,",, КодЯзыкаПечать);
	ОбластьМакета.Параметры.ПлательщикПредставление       = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ,",, КодЯзыкаПечать);
	
	ОбластьМакета.Параметры.МаркаИГосНомерАвтомобиля = МаркаИГосНомерАвтомобиля;
	ОбластьМакета.Параметры.ФИОВодителя = Водитель;
	ОбластьМакета.Параметры.ВидПеревозки = ВидПеревозки;
	ОбластьМакета.Параметры.ГосНомерПрицепа = ГосНомерПрицепа; 
	
	ОбластьМакета.Параметры.ПунктПогрузки = ПунктПогрузки;
	ОбластьМакета.Параметры.ПунктРазгрузки = ПунктРазгрузки;
	
	ОбластьМакета.Параметры.ОрганизацияПеревозчик = Перевозчик;
	
	Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента);
	
	// Отпуск товара разрешил
	ФИООтпускРазрешил       = Руководители.РуководительПредставление;
	ДолжностьОтпускРазрешил = Руководители.РуководительДолжность;
	
	ОбластьМакета.Параметры.ОтпускРазрешилДолжность = ?(ЗначениеЗаполнено(ФИООтпускРазрешил), ФИООтпускРазрешил + ", " + ДолжностьОтпускРазрешил, "");
	
	ОбластьМакета.Параметры.ОтпущеноНаСуммуПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ЗапросТовары.Итог("Сумма"), Константы.ВалютаРегламентированногоУчета.Получить(), КодЯзыкаПечать);
	
	Количество = ЗапросТовары.Итог("Количество");
	КоличествоМест = ?(Цел(Количество) = Количество, Количество, Цел(Количество) + 1);
	КоличествоМестПрописью = НРег(ЧислоПрописью(КоличествоМест,"Л=uk_UK"));
	ОбластьМакета.Параметры.КоличествоМестПрописью  = Лев(КоличествоМестПрописью,СтрДлина(КоличествоМестПрописью)-3);
	
	ТабДокумент.Вывести(ОбластьМакета);
    ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	Ном = 1;
	
	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);
		ОбластьМакета.Параметры.НомерСтроки = Ном;
		Ном = Ном + 1;
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоКоличество = ЗапросТовары.Итог("Количество");
	ОбластьМакета.Параметры.ИтогоСуммаСНДС  = ЗапросТовары.Итог("Сумма");

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПогрузочныеОперации");
	ТабДокумент.Вывести(ОбластьМакета);
КонецПроцедуры

Процедура ЗаполнитьТТН2018_ПеремещениеТоваров (Шапка, ЗапросТовары, ТабДокумент, ПараметрыПечати)
	
	МаркаИГосНомерАвтомобиля = ПараметрыПечати.МаркаИГосНомерАвтомобиля;
	ГосНомерПрицепа          = ПараметрыПечати.ГосНомерПрицепа;
	ПунктПогрузки            = ПараметрыПечати.ПунктПогрузки;
	ПунктРазгрузки           = ПараметрыПечати.ПунктРазгрузки;
	Водитель                 = ПараметрыПечати.Водитель;
	Перевозчик               = ПараметрыПечати.Перевозчик;
	ВидПеревозки             = ПараметрыПечати.ВидПеревозки;
	НомерТТН                 = ПараметрыПечати.НомерТТН;
	
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 5;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 5;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;

	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьТТН.ПФ_MXL_UK_ТТН2018");
	
	КодЯзыкаПечать = "uk";
	
	// Выводим общие реквизиты шапки
	СведенияОПокупателе       = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	СведенияОГрузоотправитель = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.НомерДокумента                = НомерТТН;
	ОбластьМакета.Параметры.ДатаДокумента                 = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.Грузоотправитель              = Шапка.Грузоотправитель;
	ОбластьМакета.Параметры.Грузополучатель               = Шапка.Грузополучатель;
	ОбластьМакета.Параметры.Плательщик                    = Шапка.Покупатель;
	ОбластьМакета.Параметры.ГрузоотправительПредставление = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ,",, КодЯзыкаПечать);
	ОбластьМакета.Параметры.ГрузополучательПредставление  = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОГрузополучателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ,",, КодЯзыкаПечать);
	ОбластьМакета.Параметры.ПлательщикПредставление       = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ,",, КодЯзыкаПечать);
	
	ОбластьМакета.Параметры.МаркаИГосНомерАвтомобиля = МаркаИГосНомерАвтомобиля;
	ОбластьМакета.Параметры.ФИОВодителя = Водитель;
	ОбластьМакета.Параметры.ВидПеревозки = ВидПеревозки;
	ОбластьМакета.Параметры.ГосНомерПрицепа = ГосНомерПрицепа; 
	
	ОбластьМакета.Параметры.ПунктПогрузки = ПунктПогрузки;
	ОбластьМакета.Параметры.ПунктРазгрузки = ПунктРазгрузки;
	
	ОбластьМакета.Параметры.ОрганизацияПеревозчик = Перевозчик;
	
	Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента);
	
	// Отпуск товара разрешил
	ФИООтпускРазрешил       = Руководители.РуководительПредставление;
	ДолжностьОтпускРазрешил = Руководители.РуководительДолжность;
	
	ОбластьМакета.Параметры.ОтпускРазрешилДолжность = ?(ЗначениеЗаполнено(ФИООтпускРазрешил), ФИООтпускРазрешил + ", " + ДолжностьОтпускРазрешил, "");
	
	ОбластьМакета.Параметры.ОтпущеноНаСуммуПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ЗапросТовары.Итог("Сумма"), Константы.ВалютаРегламентированногоУчета.Получить(), КодЯзыкаПечать);
	
	Количество = ЗапросТовары.Итог("Количество");
	КоличествоМест = ?(Цел(Количество) = Количество, Количество, Цел(Количество) + 1);
	КоличествоМестПрописью = НРег(ЧислоПрописью(КоличествоМест,"Л=uk_UK"));
	ОбластьМакета.Параметры.КоличествоМестПрописью  = Лев(КоличествоМестПрописью,СтрДлина(КоличествоМестПрописью)-3);
	
	ТабДокумент.Вывести(ОбластьМакета);
    ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	Ном = 1;
	
	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);
		ОбластьМакета.Параметры.НомерСтроки = Ном;
		Ном = Ном + 1;
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоКоличество = ЗапросТовары.Итог("Количество");
	ОбластьМакета.Параметры.ИтогоСуммаСНДС  = ЗапросТовары.Итог("Сумма");

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПогрузочныеОперации");
	ТабДокумент.Вывести(ОбластьМакета);
КонецПроцедуры

Процедура ЗаполнитьТТН2019_ПеремещениеТоваров (Шапка, ЗапросТовары, ТабДокумент, ПараметрыПечати)
	
	МаркаИГосНомерАвтомобиля = ПараметрыПечати.МаркаИГосНомерАвтомобиля;
	ГосНомерПрицепа          = ПараметрыПечати.ГосНомерПрицепа;
	ПунктПогрузки            = ПараметрыПечати.ПунктПогрузки;
	ПунктРазгрузки           = ПараметрыПечати.ПунктРазгрузки;
	Водитель                 = ПараметрыПечати.Водитель;
	Перевозчик               = ПараметрыПечати.Перевозчик;
	ВидПеревозки             = ПараметрыПечати.ВидПеревозки;
	НомерТТН                 = ПараметрыПечати.НомерТТН;
	
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху              = 0;
	ТабДокумент.ПолеСлева               = 5;
	ТабДокумент.ПолеСнизу               = 0;
	ТабДокумент.ПолеСправа              = 5;
	ТабДокумент.АвтоМасштаб             = Истина;
	ТабДокумент.ОриентацияСтраницы      = ОриентацияСтраницы.Ландшафт;

	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПечатьТТН.ПФ_MXL_UK_ТТН2019");
	
	КодЯзыкаПечать = "uk";
	
	// Выводим общие реквизиты шапки
	//СведенияОПокупателе       = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	//СведенияОГрузополучателе  = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	//СведенияОГрузоотправитель = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	СведенияОПокупателе       = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента,,,КодЯзыкаПечать);
	СведенияОГрузополучателе  = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента,,,КодЯзыкаПечать);
	СведенияОГрузоотправитель = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента,,,КодЯзыкаПечать);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.НомерДокумента                = НомерТТН;
	ОбластьМакета.Параметры.ДатаДокумента                 = Формат(Шапка.ДатаДокумента,"Л=uk_UA; ДФ='''""''dd''""'' MMMM yyyy'") +" року";
	ОбластьМакета.Параметры.Грузоотправитель              = Шапка.Грузоотправитель;
	ОбластьМакета.Параметры.Грузополучатель               = Шапка.Грузополучатель;
	ОбластьМакета.Параметры.Плательщик                    = Шапка.Покупатель;
	ОбластьМакета.Параметры.ГрузоотправительПредставление = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ,",, КодЯзыкаПечать);
	ОбластьМакета.Параметры.ГрузополучательПредставление  = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОГрузополучателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ,",, КодЯзыкаПечать);
	ОбластьМакета.Параметры.ПлательщикПредставление       = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,МФО,КодПоЕДРПОУ,",, КодЯзыкаПечать);
	
	ОбластьМакета.Параметры.МаркаИГосНомерАвтомобиля = МаркаИГосНомерАвтомобиля;
	ОбластьМакета.Параметры.ФИОВодителя = Водитель;
	ОбластьМакета.Параметры.ВидПеревозки = ВидПеревозки;
	ОбластьМакета.Параметры.ГосНомерПрицепа = ГосНомерПрицепа; 
	
	ОбластьМакета.Параметры.ПунктПогрузки = ПунктПогрузки;
	ОбластьМакета.Параметры.ПунктРазгрузки = ПунктРазгрузки;
	
	ОбластьМакета.Параметры.ОрганизацияПеревозчик = Перевозчик;
	
	Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента);
	
	ОбластьМакета.Параметры.ОтпущеноНаСуммуПрописью = ОбщегоНазначенияБПВызовСервера.СформироватьСуммуПрописью(ЗапросТовары.Итог("Сумма"), Константы.ВалютаРегламентированногоУчета.Получить(), КодЯзыкаПечать);
	
	Количество = ЗапросТовары.Итог("Количество");
	КоличествоМест = ?(Цел(Количество) = Количество, Количество, Цел(Количество) + 1);
	КоличествоМестПрописью = НРег(ЧислоПрописью(КоличествоМест,"Л=uk_UK"));
	ОбластьМакета.Параметры.КоличествоМестПрописью  = Лев(КоличествоМестПрописью,СтрДлина(КоличествоМестПрописью)-3);
	
	ТабДокумент.Вывести(ОбластьМакета);
    ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	Ном = 1;
	
	// Выводим многострочную часть докмента
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	Для Каждого ВыборкаСтрок Из ЗапросТовары Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрок.Номенклатура) Тогда
			Сообщить(НСтр("ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.';uk='В одному з рядків не заповнене значення номенклатури - рядок під час друку буде пропущений.'"), СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
		ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрок.ТоварНаименование);
		ОбластьМакета.Параметры.НомерСтроки = Ном;
		Ном = Ном + 1;
		ТабДокумент.Вывести(ОбластьМакета);

	КонецЦикла;
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоКоличество = ЗапросТовары.Итог("Количество");
	ОбластьМакета.Параметры.ИтогоСуммаСНДС  = ЗапросТовары.Итог("Сумма");

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПогрузочныеОперации");
	ТабДокумент.Вывести(ОбластьМакета);
КонецПроцедуры 

#КонецЕсли