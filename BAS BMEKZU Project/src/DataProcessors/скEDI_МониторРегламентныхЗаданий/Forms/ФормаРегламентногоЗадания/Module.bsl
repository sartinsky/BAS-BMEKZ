&НаКлиенте
Перем ЗакрытиеРазрешеноКак;

////////////////////////////////////////////////////////////////////////////////
// ОбработчикиСобытийФормы

// Процедура - При создании на сервере.
//
// Параметры:
//  Отказ				 - Булево - признак отказа.
//  СтандартнаяОбработка - Булево - признак стандартной обработки. 
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Если скEDI_ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда 
	//	Элементы.КоличествоФоновыхПроцессов.Доступность = НЕ  
	//	КоличествоФоновыхПроцессов = 1;
	//КонецЕсли;	
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	Для Каждого Пользователь из ПользователиИБ Цикл
		Элементы.ИмяПользователя.СписокВыбора.Добавить(Пользователь.Имя, Пользователь.Имя + " - " + Пользователь.ПолноеИмя);
	КонецЦикла;
	
	Если Параметры.Свойство("СозданиеНовогоЗадания") И Параметры.СозданиеНовогоЗадания Тогда 
		
		СозданиеНовогоЗадания      = Истина;
		Расписание                 = Новый РасписаниеРегламентногоЗадания;
		КоличествоФоновыхПроцессов = 1;
		
		Если Параметры.Свойство("ВидОперацииРегламентногоЗадания") Тогда 
			
			ВидОперацииРегламентногоЗадания = Параметры.ВидОперацииРегламентногоЗадания; 
		
			// Создание реквизитов и элементов формы на основании вида операции.
			СозданиеЭлементовФормы();
			
		КонецЕсли;	

	Иначе 
		
		СозданиеНовогоЗадания = Ложь;
		
		// Открытие формы существующего рег. задания.		
		Если Параметры.Свойство("ИдентификаторРегЗадания") Тогда 
			ИдентификаторРегЗадания = Параметры.ИдентификаторРегЗадания;
		Иначе 
			Отказ = Истина;
			Сообщить(НСтр("ru = 'Регламентное задание не доступно (не найден идентификатор)'; uk = 'Регламентне завдання не доступне (не знайдено ідентифікатор)'"));
		КонецЕсли;	
		
		Если НЕ Отказ Тогда 
			
			// Расписание
			РегЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ИдентификаторРегЗадания));
			
			Если РегЗадание <> Неопределено Тогда 
				
				Расписание      = РегЗадание.Расписание;
				ИмяПользователя = РегЗадание.ИмяПользователя;
							
				// Заполнение параметров
				Если РегЗадание.Параметры.Количество() > 0 Тогда 
					
					СтруктураПараметров = РегЗадание.Параметры[0];	// Для данного вида	
					
					ВидОперацииРегламентногоЗадания  = СтруктураПараметров.ВидОперацииРегламентногоЗадания;
					
					Если ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ПолучениеВходящихСообщений") Тогда
						ЗаполнитьЗначенияСвойств(ЭтаФорма , СтруктураПараметров,,"ТаблицаНеобходимыхПодписейШифрования");
					ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ОбработкаИсходящихДокументов") Тогда 
						ЗаполнитьЗначенияСвойств(ЭтаФорма , СтруктураПараметров,,"ТаблицаНеобходимыхПодписейШифрования,ТаблицаНеобходимыхПодписей, ПериодВыборки, ВидыЭлектронногоДокумента");
					ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.РегистрацияНалоговыхДокументов") Тогда 
						ЗаполнитьЗначенияСвойств(ЭтаФорма , СтруктураПараметров,,"ТаблицаНеобходимыхПодписейШифрования,ТаблицаНеобходимыхПодписей, ПериодВыборки, ВидыЭлектронногоДокумента");
					ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ОтправкаЗарегистрированныхНалоговыхДокументовКонтрагенту") Тогда 
						ЗаполнитьЗначенияСвойств(ЭтаФорма , СтруктураПараметров,,"ТаблицаНеобходимыхПодписейШифрования,ТаблицаНеобходимыхПодписей, ПериодВыборки, ВидыЭлектронногоДокумента");
					ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.СверкаНалоговыхДокументовЕРНН") Тогда 
						ЗаполнитьЗначенияСвойств(ЭтаФорма , СтруктураПараметров,,"ТаблицаНеобходимыхПодписейШифрования,ТаблицаНеобходимыхПодписей");
					ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ОтправкаЗапросаНаПолучениеЛимитаРегистрацииВЕРНН") Тогда
						ЗаполнитьЗначенияСвойств(ЭтаФорма , СтруктураПараметров,,"ТаблицаНеобходимыхПодписейШифрования,ТаблицаНеобходимыхПодписей");
					КонецЕсли;
					
					Если ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ПолучениеВходящихСообщений") Тогда 
						
						Если СтруктураПараметров.Свойство("ТаблицаНеобходимыхПодписейШифрования") 
							И ТипЗнч(СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования) = Тип("ТаблицаЗначений") Тогда 
							ТаблицаНеобходимыхПодписейШифрования.Загрузить(СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования);	
						КонецЕсли;
						
					ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ОбработкаИсходящихДокументов") Тогда 	
						
						Если СтруктураПараметров.Свойство("ТаблицаНеобходимыхПодписейШифрования") 
							И ТипЗнч(СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования) = Тип("ТаблицаЗначений") Тогда 
							ТаблицаНеобходимыхПодписейШифрования.Загрузить(СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования);	
						КонецЕсли;
						
						Если СтруктураПараметров.Свойство("ТаблицаНеобходимыхПодписей") 
							И ТипЗнч(СтруктураПараметров.ТаблицаНеобходимыхПодписей) = Тип("ТаблицаЗначений") Тогда 
							ТаблицаНеобходимыхПодписей.Загрузить(СтруктураПараметров.ТаблицаНеобходимыхПодписей);	
						КонецЕсли;
						
						Если СтруктураПараметров.Свойство("ПериодВыборки") Тогда 
							ЗаполнитьЗначенияСвойств(ПериодВыборки, СтруктураПараметров.ПериодВыборки); 
						КонецЕсли;
						
						Если СтруктураПараметров.Свойство("ВидыЭлектронногоДокумента") Тогда 
							ВидыЭлектронногоДокумента.ЗагрузитьЗначения(СтруктураПараметров.ВидыЭлектронногоДокумента.ВыгрузитьЗначения());		
						КонецЕсли;
						
					ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.РегистрацияНалоговыхДокументов") Тогда 	
						
						Если СтруктураПараметров.Свойство("ТаблицаНеобходимыхПодписейШифрования") 
							И ТипЗнч(СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования) = Тип("ТаблицаЗначений") Тогда 
							ТаблицаНеобходимыхПодписейШифрования.Загрузить(СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования);	
						КонецЕсли;
						
						Если СтруктураПараметров.Свойство("ТаблицаНеобходимыхПодписей") 
							И ТипЗнч(СтруктураПараметров.ТаблицаНеобходимыхПодписей) = Тип("ТаблицаЗначений") Тогда 
							ТаблицаНеобходимыхПодписей.Загрузить(СтруктураПараметров.ТаблицаНеобходимыхПодписей);	
						КонецЕсли;
						
						Если СтруктураПараметров.Свойство("ПериодВыборки") Тогда 
							ЗаполнитьЗначенияСвойств(ПериодВыборки, СтруктураПараметров.ПериодВыборки); 
						КонецЕсли;
						
						Если СтруктураПараметров.Свойство("ВидыЭлектронногоДокумента") Тогда 
							ВидыЭлектронногоДокумента.ЗагрузитьЗначения(СтруктураПараметров.ВидыЭлектронногоДокумента.ВыгрузитьЗначения());		
						КонецЕсли;
						
					ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ОтправкаЗарегистрированныхНалоговыхДокументовКонтрагенту") Тогда 	
						
						Если СтруктураПараметров.Свойство("ТаблицаНеобходимыхПодписейШифрования") 
							И ТипЗнч(СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования) = Тип("ТаблицаЗначений") Тогда 
							ТаблицаНеобходимыхПодписейШифрования.Загрузить(СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования);	
						КонецЕсли;
						
						Если СтруктураПараметров.Свойство("ТаблицаНеобходимыхПодписей") 
							И ТипЗнч(СтруктураПараметров.ТаблицаНеобходимыхПодписей) = Тип("ТаблицаЗначений") Тогда 
							ТаблицаНеобходимыхПодписей.Загрузить(СтруктураПараметров.ТаблицаНеобходимыхПодписей);	
						КонецЕсли;
						
						Если СтруктураПараметров.Свойство("ПериодВыборки") Тогда 
							ЗаполнитьЗначенияСвойств(ПериодВыборки, СтруктураПараметров.ПериодВыборки); 
						КонецЕсли;
						
						Если СтруктураПараметров.Свойство("ВидыЭлектронногоДокумента") Тогда 
							ВидыЭлектронногоДокумента.ЗагрузитьЗначения(СтруктураПараметров.ВидыЭлектронногоДокумента.ВыгрузитьЗначения());		
						КонецЕсли;
						
					ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.СверкаНалоговыхДокументовЕРНН") Тогда 	
						
						Если СтруктураПараметров.Свойство("ТаблицаНеобходимыхПодписейШифрования") 
							И ТипЗнч(СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования) = Тип("ТаблицаЗначений") Тогда 
							ТаблицаНеобходимыхПодписейШифрования.Загрузить(СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования);	
						КонецЕсли;
						
						Если СтруктураПараметров.Свойство("ТаблицаНеобходимыхПодписей") 
							И ТипЗнч(СтруктураПараметров.ТаблицаНеобходимыхПодписей) = Тип("ТаблицаЗначений") Тогда 
							ТаблицаНеобходимыхПодписей.Загрузить(СтруктураПараметров.ТаблицаНеобходимыхПодписей);	
						КонецЕсли;
						
						Если СтруктураПараметров.Свойство("ПериодС", ПериодС) Тогда
							//ЗаполнитьЗначенияСвойств(ПериодС, СтруктураПараметров.ПериодС); 
						КонецЕсли;
						
						//Если СтруктураПараметров.Свойство("ПериодВыборки") Тогда 
						//	ЗаполнитьЗначенияСвойств(ПериодВыборки, СтруктураПараметров.ПериодВыборки); 
						//КонецЕсли;
						
						//Если СтруктураПараметров.Свойство("ВидыЭлектронногоДокумента") Тогда 
						//	ВидыЭлектронногоДокумента.ЗагрузитьЗначения(СтруктураПараметров.ВидыЭлектронногоДокумента.ВыгрузитьЗначения());		
						//КонецЕсли;
						
					ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ОтправкаЗапросаНаПолучениеЛимитаРегистрацииВЕРНН") Тогда 	
					
						Если СтруктураПараметров.Свойство("ТаблицаНеобходимыхПодписейШифрования") 
							И ТипЗнч(СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования) = Тип("ТаблицаЗначений") Тогда 
							ТаблицаНеобходимыхПодписейШифрования.Загрузить(СтруктураПараметров.ТаблицаНеобходимыхПодписейШифрования);	
						КонецЕсли;
						
						Если СтруктураПараметров.Свойство("ТаблицаНеобходимыхПодписей") 
							И ТипЗнч(СтруктураПараметров.ТаблицаНеобходимыхПодписей) = Тип("ТаблицаЗначений") Тогда 
							ТаблицаНеобходимыхПодписей.Загрузить(СтруктураПараметров.ТаблицаНеобходимыхПодписей);	
						КонецЕсли;					
						
					КонецЕсли;	
					
				КонецЕсли;
				
				// Создание реквизитов и элементов формы на основании вида операции.
				СозданиеЭлементовФормы();

			Иначе
				Расписание = Новый РасписаниеРегламентногоЗадания;
			КонецЕсли;	
					
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Оповестить("ЗакрытиеФормыРегЗадания", Истина, ПолучитьФорму("Обработка.скEDI_МониторРегламентныхЗаданий.Форма.ФормаМонитора"));
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - Вид операции регламентного задания при изменении.
//
// Параметры:
//  Элемент	 - Элемент формы - поле ввода вида операции.  
//
&НаКлиенте
Процедура ВидОперацииРегламентногоЗаданияПриИзменении(Элемент)
	СозданиеЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ПриИзмененииОрганизации();
КонецПроцедуры

&НаКлиенте
Процедура ВидыЭлектронныхДокументовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ВидыЭлектронногоДокумента.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.скEDI_ВидыЭлектронныхДокументов");
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОбработчикиКомандФормы

// Процедура - Выполнить рег. задание.
//
// Параметры:
//  Команда	 - КомандаФормы - команда закрытия с сохранением значений и установкой свойства "использование".
//
&НаКлиенте
Процедура ВключитьРегЗадание(Команда)
	
	Если НЕ ПроверкаЗаполненияПройдена() Тогда 
		Возврат;	
	КонецЕсли;
	
	Отказ = Ложь;
	
	Если НЕ СозданиеНовогоЗадания И ЗначениеЗаполнено(ИдентификаторРегЗадания) Тогда 
		
		// Перезаписать существующее рег. задание.
		ПерезаполнитьРегЗадание(Отказ, Истина);
		
		Если НЕ Отказ Тогда
			ЗакрытиеРазрешеноКак = КодВозвратаДиалога.Нет;
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли СозданиеНовогоЗадания Тогда 
		
		// Создать новое рег. задание.
		СоздатьНовоеРегЗадание(Отказ, Истина);
		
		Если НЕ Отказ Тогда
			ЗакрытиеРазрешеноКак = КодВозвратаДиалога.Нет;
			Закрыть();
		КонецЕсли;
		
	Иначе
		ЗакрытиеРазрешеноКак = КодВозвратаДиалога.Нет;
		Закрыть();	
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаписатьРегЗадание(Отказ)
	
	Если НЕ ПроверкаЗаполненияПройдена() Тогда 
		Отказ = Истина;
		Возврат;	
	КонецЕсли;
	
	Отказ = Ложь;
	
	Если НЕ СозданиеНовогоЗадания И ЗначениеЗаполнено(ИдентификаторРегЗадания) Тогда 
		
		// Перезаписать существующее рег. задание.
		ПерезаполнитьРегЗадание(Отказ);
		
		//Если НЕ Отказ Тогда 
		//	Закрыть();
		//КонецЕсли;
		
	ИначеЕсли СозданиеНовогоЗадания Тогда 
		
		// Создать новое рег. задание.
		СоздатьНовоеРегЗадание(Отказ);
		
		//Если НЕ Отказ Тогда 
		//	Закрыть();
		//КонецЕсли;
		
	//Иначе	
	//	Закрыть();	
	КонецЕсли;	
	
КонецПроцедуры

// Процедура - Записать и закрыть.
//
// Параметры:
//  Команда	 - КомандаФормы - команда закрытия с сохранением значений.
//
&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Отказ = Ложь;
	ЗаписатьРегЗадание(Отказ);
	Если Не Отказ Тогда
		ЗакрытиеРазрешеноКак = КодВозвратаДиалога.Нет;
		Закрыть();
	КонецЕсли;
	
	//Если НЕ ПроверкаЗаполненияПройдена() Тогда 
	//	Возврат;	
	//КонецЕсли;
	//Отказ = Ложь;
	//
	//Если НЕ СозданиеНовогоЗадания И ЗначениеЗаполнено(ИдентификаторРегЗадания) Тогда 
	//	
	//	// Перезаписать существующее рег. задание.
	//	ПерезаполнитьРегЗадание(Отказ);
	//	
	//	Если НЕ Отказ Тогда 
	//		Закрыть();
	//	КонецЕсли;
	//	
	//ИначеЕсли СозданиеНовогоЗадания Тогда 
	//	
	//	// Создать новое рег. задание.
	//	СоздатьНовоеРегЗадание(Отказ);
	//	
	//	Если НЕ Отказ Тогда 
	//		Закрыть();
	//	КонецЕсли;
	//	
	//Иначе	
	//	Закрыть();	
	//КонецЕсли;	
	//
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписание(Команда)
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
		Если Диалог.ОткрытьМодально() Тогда
			Расписание = Диалог.Расписание;
		КонецЕсли;		
		ОбновитьТекстКнопкиРасписания();		
	Иначе	
		скEDI_ОткрытиеФормБезМодальности.ПоказатьДиалогРасписания(Диалог, "ПоказатьДиалогРасписанияЗавершение", ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогРасписанияЗавершение(ПарРасписание, ДополнительныеПараметры) Экспорт 
	Если НЕ ПарРасписание = Неопределено Тогда
		Расписание = ПарРасписание;
		Модифицированность = Истина;
	КонецЕсли;
	ОбновитьТекстКнопкиРасписания();
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокПодписантовДляДокументаЗапросНаПолучениеВедомостейЕРНН(ВыполняемыеОперации, Организация, ОшибкаПолученияПодписей)
	Подписанты = Документы.скEDI_ЗапросНаПолучениеВедомостейЕРНН.ПолучитьСписокПодписантов(ВыполняемыеОперации, Организация, , , ОшибкаПолученияПодписей);
	Возврат Подписанты;
КонецФункции

&НаСервере
Функция ПолучитьСписокПодписантовДляДокументаЗапросНаПолучениеЛимитаРегистрацииВЕРНН(ВыполняемыеОперации, Организация, ОшибкаПолученияПодписей)
	Подписанты = Документы.скEDI_ЗапросНаПолучениеЛимитаРегистрацииВЕРНН.ПолучитьСписокПодписантов(ВыполняемыеОперации, Организация, , , ОшибкаПолученияПодписей);
	Возврат Подписанты;
КонецФункции

&НаКлиенте
Процедура ИзменитьНастройкиСертификатов(Команда)	
	Если НастройкиСертификатаУстановлены Тогда		
		Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда			
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос(НСтр("ru = 'Изменить настройки?'; uk = 'Змінити налаштування?'"), Режим, 0);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;			
		Иначе
			скEDI_ОткрытиеФормБезМодальности.ПоказатьВопросБезМодальности("ВопросИзменитьНастройкиСертификатаЗавершение", ЭтаФорма,, НСтр("ru = 'Изменить настройки?'; uk = 'Змінити налаштування?'"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;		
	Иначе
		ЗаменитьНастройкиСертификата();		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВопросИзменитьНастройкиСертификатаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт 
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаменитьНастройкиСертификата();	
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ЗаменитьНастройкиСертификата()
	Если ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ПолучениеВходящихСообщений") Тогда
		МассивПараметровДляПолученияПодписаний = Новый Массив;
		ВыполняемыеОперации = Новый Массив;
		ВыполняемыеОперации.Добавить("ДляРегламентногоЗадания");
		ВыполняемыеОперации.Добавить("ПолучениеВходящихСообщений");
		
		ОшибкаПолученияПодписей = "";
		Подписанты = скEDI_ОбщегоНазначения.ПолучитьПодписантов(ВыполняемыеОперации, Организация, МассивПараметровДляПолученияПодписаний, ОшибкаПолученияПодписей);
		Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
			Сообщить(ОшибкаПолученияПодписей);
			Возврат;
		КонецЕсли;
		лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Новый Структура("ВерсияМассиваДанныхПоДокументам,ВыполняемыеОперации,Организация,Подписанты", Неопределено, ВыполняемыеОперации, Организация, Подписанты);
		
		Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда	
			
			лФормаНастройкиПараметровПодписиДокументов = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастройкиПодписейЭлектронныхДокументов", лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма);

			лНастройкиНеобходимыхПодписей = лФормаНастройкиПараметровПодписиДокументов.ОткрытьМодально();
			ПрочитатьНастройкиПодписей(лНастройкиНеобходимыхПодписей);
			
		Иначе
			
			скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастройкиПараметровПодписиДокументов(лПараметрыФормыНастройкиПодписейЭлектронныхДокументов
																								, ЭтаФорма
																								, "ПрочитатьНастройкиПодписей");
			
		КонецЕсли;
	ИначеЕсли  ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ОбработкаИсходящихДокументов")Тогда

		Если ВидыЭлектронногоДокумента.Количество() <> 0 
						И ЗначениеЗаполнено(Организация) Тогда 
			
			
			МассивПараметровДляПолученияПодписаний = Новый Массив;
			
			Для Каждого ВидЭлектронногоДокумента Из ВидыЭлектронногоДокумента Цикл 
				//Если ВидЭлектронногоДокумента.Значение.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
				//	СтрукрураНастроекДляПолученияПодписаний = Новый Структура("ЭлектронныйДокумент,Документ1С,ВидЭлектронногоДокумента,ВхИсх,РегистрируетсяВЕРННПокупателем"
				//	, ПредопределенноеЗначение("Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка")
				//	, Неопределено
				//	, ВидЭлектронногоДокумента.Значение
				//	, ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий")
				//	, Истина);
				//	МассивПараметровДляПолученияПодписаний.Добавить(СтрукрураНастроекДляПолученияПодписаний);
					СтрукрураНастроекДляПолученияПодписаний = Новый Структура("ЭлектронныйДокумент,Документ1С,ВидЭлектронногоДокумента,ВхИсх,РегистрируетсяВЕРННПокупателем"
					, ПредопределенноеЗначение("Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка")
					, Неопределено
					, ВидЭлектронногоДокумента.Значение
					, ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий")
					, Ложь);
					МассивПараметровДляПолученияПодписаний.Добавить(СтрукрураНастроекДляПолученияПодписаний);
				//Иначе  
				//	СтрукрураНастроекДляПолученияПодписаний = Новый Структура("ЭлектронныйДокумент,Документ1С,ВидЭлектронногоДокумента,ВхИсх"
				//	, ПредопределенноеЗначение("Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка")
				//	, Неопределено
				//	, ВидЭлектронногоДокумента.Значение
				//	, ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий"));
				//	МассивПараметровДляПолученияПодписаний.Добавить(СтрукрураНастроекДляПолученияПодписаний);
				//КонецЕсли;
			КонецЦикла;	
			
			ВыполняемыеОперации = Новый Массив;
			ВыполняемыеОперации.Добавить("ДляРегламентногоЗадания");
			ВыполняемыеОперации.Добавить("Подпись");
			ВыполняемыеОперации.Добавить("Отправка");
			
			ОшибкаПолученияПодписей = "";
			Подписанты = скEDI_ОбщегоНазначения.ПолучитьПодписантов(ВыполняемыеОперации, Организация, МассивПараметровДляПолученияПодписаний, ОшибкаПолученияПодписей);
			Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
				Сообщить(ОшибкаПолученияПодписей);
				Возврат;
			КонецЕсли;
			лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Новый Структура("ВерсияМассиваДанныхПоДокументам,ВыполняемыеОперации,Организация,Подписанты", Неопределено, ВыполняемыеОперации, Организация, Подписанты);
			
			Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда	
				
				лФормаНастройкиПараметровПодписиДокументов = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастройкиПодписейЭлектронныхДокументов", лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма);

				лНастройкиНеобходимыхПодписей = лФормаНастройкиПараметровПодписиДокументов.ОткрытьМодально();
				ПрочитатьНастройкиПодписей(лНастройкиНеобходимыхПодписей);
				
			Иначе
				
				скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастройкиПараметровПодписиДокументов(лПараметрыФормыНастройкиПодписейЭлектронныхДокументов
																									, ЭтаФорма
																									, "ПрочитатьНастройкиПодписей");
				
			КонецЕсли;

		Иначе
			
			Если ВидыЭлектронногоДокумента.Количество() = 0 Тогда 
				Сообщить(НСтр("ru = 'Не заполнено ""Виды электронных документов""'; uk = 'Не заповнено ""Види електронних документів""'"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Организация) Тогда 
				Сообщить(НСтр("ru = 'Не заполнено значение поля ""Организация""'; uk = 'Не заповнено значення поля ""Організація""'"));
			КонецЕсли;
	
		КонецЕсли;
		
	ИначеЕсли  ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.РегистрацияНалоговыхДокументов")Тогда

		Если ВидыЭлектронногоДокумента.Количество() <> 0 
						И ЗначениеЗаполнено(Организация) Тогда 
			
			
			МассивПараметровДляПолученияПодписаний = Новый Массив;
			
			Для Каждого ВидЭлектронногоДокумента Из ВидыЭлектронногоДокумента Цикл 
				//Если ВидЭлектронногоДокумента.Значение.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
				//	СтрукрураНастроекДляПолученияПодписаний = Новый Структура("ЭлектронныйДокумент,Документ1С,ВидЭлектронногоДокумента,ВхИсх,РегистрируетсяВЕРННПокупателем"
				//	, ПредопределенноеЗначение("Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка")
				//	, Неопределено
				//	, ВидЭлектронногоДокумента.Значение
				//	, ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий")
				//	, Истина);
				//	МассивПараметровДляПолученияПодписаний.Добавить(СтрукрураНастроекДляПолученияПодписаний);
					СтрукрураНастроекДляПолученияПодписаний = Новый Структура("ЭлектронныйДокумент,Документ1С,ВидЭлектронногоДокумента,ВхИсх,РегистрируетсяВЕРННПокупателем"
					, ПредопределенноеЗначение("Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка")
					, Неопределено
					, ВидЭлектронногоДокумента.Значение
					, ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий")
					, Ложь);
					МассивПараметровДляПолученияПодписаний.Добавить(СтрукрураНастроекДляПолученияПодписаний);
				//Иначе  
				//	СтрукрураНастроекДляПолученияПодписаний = Новый Структура("ЭлектронныйДокумент,Документ1С,ВидЭлектронногоДокумента,ВхИсх"
				//	, ПредопределенноеЗначение("Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка")
				//	, Неопределено
				//	, ВидЭлектронногоДокумента.Значение
				//	, ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий"));
				//	МассивПараметровДляПолученияПодписаний.Добавить(СтрукрураНастроекДляПолученияПодписаний);
				//КонецЕсли;
			КонецЦикла;	
			
			ВыполняемыеОперации = Новый Массив;
			ВыполняемыеОперации.Добавить("ДляРегламентногоЗадания");
			ВыполняемыеОперации.Добавить("Подпись");
			ВыполняемыеОперации.Добавить("Отправка");
			
			ОшибкаПолученияПодписей = "";
			Подписанты = скEDI_ОбщегоНазначения.ПолучитьПодписантов(ВыполняемыеОперации, Организация, МассивПараметровДляПолученияПодписаний, ОшибкаПолученияПодписей);
			Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
				Сообщить(ОшибкаПолученияПодписей);
				Возврат;
			КонецЕсли;
			лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Новый Структура("ВерсияМассиваДанныхПоДокументам,ВыполняемыеОперации,Организация,Подписанты", Неопределено, ВыполняемыеОперации, Организация, Подписанты);
			
			Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда	
				
				лФормаНастройкиПараметровПодписиДокументов = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастройкиПодписейЭлектронныхДокументов", лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма);

				лНастройкиНеобходимыхПодписей = лФормаНастройкиПараметровПодписиДокументов.ОткрытьМодально();
				ПрочитатьНастройкиПодписей(лНастройкиНеобходимыхПодписей);
				
			Иначе
				
				скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастройкиПараметровПодписиДокументов(лПараметрыФормыНастройкиПодписейЭлектронныхДокументов
																									, ЭтаФорма
																									, "ПрочитатьНастройкиПодписей");
				
			КонецЕсли;

		Иначе
			
			Если ВидыЭлектронногоДокумента.Количество() = 0 Тогда 
				Сообщить(НСтр("ru = 'Не заполнено ""Виды электронных документов""'; uk = 'Не заповнено ""Види електронних документів""'"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Организация) Тогда 
				Сообщить(НСтр("ru = 'Не заполнено значение поля ""Организация""'; uk = 'Не заповнено значення поля ""Організація""'"));
			КонецЕсли;
	
		КонецЕсли;
		
	ИначеЕсли  ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ОтправкаЗарегистрированныхНалоговыхДокументовКонтрагенту")Тогда

		Если ВидыЭлектронногоДокумента.Количество() <> 0 
						И ЗначениеЗаполнено(Организация) Тогда 
			
			
			МассивПараметровДляПолученияПодписаний = Новый Массив;
			
			//Для Каждого ВидЭлектронногоДокумента Из ВидыЭлектронногоДокумента Цикл 
			//	//Если ВидЭлектронногоДокумента.Значение.ТипДокумента = ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной") Тогда
			//	//	СтрукрураНастроекДляПолученияПодписаний = Новый Структура("ЭлектронныйДокумент,Документ1С,ВидЭлектронногоДокумента,ВхИсх,РегистрируетсяВЕРННПокупателем"
			//	//	, ПредопределенноеЗначение("Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка")
			//	//	, Неопределено
			//	//	, ВидЭлектронногоДокумента.Значение
			//	//	, ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий")
			//	//	, Истина);
			//	//	МассивПараметровДляПолученияПодписаний.Добавить(СтрукрураНастроекДляПолученияПодписаний);
			//		СтрукрураНастроекДляПолученияПодписаний = Новый Структура("ЭлектронныйДокумент,Документ1С,ВидЭлектронногоДокумента,ВхИсх,РегистрируетсяВЕРННПокупателем"
			//		, ПредопределенноеЗначение("Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка")
			//		, Неопределено
			//		, ВидЭлектронногоДокумента.Значение
			//		, ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий")
			//		, Ложь);
			//		МассивПараметровДляПолученияПодписаний.Добавить(СтрукрураНастроекДляПолученияПодписаний);
			//	//Иначе  
			//	//	СтрукрураНастроекДляПолученияПодписаний = Новый Структура("ЭлектронныйДокумент,Документ1С,ВидЭлектронногоДокумента,ВхИсх"
			//	//	, ПредопределенноеЗначение("Документ.скEDI_ЭлектронныйДокумент.ПустаяСсылка")
			//	//	, Неопределено
			//	//	, ВидЭлектронногоДокумента.Значение
			//	//	, ПредопределенноеЗначение("Перечисление.скEDI_ВхИсхЭлектронныйДокумент.Исходящий"));
			//	//	МассивПараметровДляПолученияПодписаний.Добавить(СтрукрураНастроекДляПолученияПодписаний);
			//	//КонецЕсли;
			//КонецЦикла;	
			
			ВыполняемыеОперации = Новый Массив;
			ВыполняемыеОперации.Добавить("ДляРегламентногоЗадания");
			//ВыполняемыеОперации.Добавить("Подпись");
			ВыполняемыеОперации.Добавить("Отправка");
			
			ОшибкаПолученияПодписей = "";
			Подписанты = скEDI_ОбщегоНазначения.ПолучитьПодписантов(ВыполняемыеОперации, Организация, МассивПараметровДляПолученияПодписаний, ОшибкаПолученияПодписей);
			Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
				Сообщить(ОшибкаПолученияПодписей);
				Возврат;
			КонецЕсли;
			лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Новый Структура("ВерсияМассиваДанныхПоДокументам,ВыполняемыеОперации,Организация,Подписанты", Неопределено, ВыполняемыеОперации, Организация, Подписанты);
			
			Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда	
				
				лФормаНастройкиПараметровПодписиДокументов = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастройкиПодписейЭлектронныхДокументов", лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма);

				лНастройкиНеобходимыхПодписей = лФормаНастройкиПараметровПодписиДокументов.ОткрытьМодально();
				ПрочитатьНастройкиПодписей(лНастройкиНеобходимыхПодписей);
				
			Иначе
				
				скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастройкиПараметровПодписиДокументов(лПараметрыФормыНастройкиПодписейЭлектронныхДокументов
																									, ЭтаФорма
																									, "ПрочитатьНастройкиПодписей");
				
			КонецЕсли;

		Иначе
			
			Если ВидыЭлектронногоДокумента.Количество() = 0 Тогда 
				Сообщить(НСтр("ru = 'Не заполнено ""Виды электронных документов""'; uk = 'Не заповнено ""Види електронних документів""'"));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Организация) Тогда 
				Сообщить(НСтр("ru = 'Не заполнено значение поля ""Организация""'; uk = 'Не заповнено значення поля ""Організація""'"));
			КонецЕсли;
	
		КонецЕсли;
		
	ИначеЕсли  ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.СверкаНалоговыхДокументовЕРНН")Тогда

		Если ЗначениеЗаполнено(Организация) Тогда 
			ВыполняемыеОперации = Новый Массив;
			ВыполняемыеОперации.Добавить("ДляРегламентногоЗадания");
			ВыполняемыеОперации.Добавить("Подпись");
			ВыполняемыеОперации.Добавить("ОтправкаВДФС");
			
			ОшибкаПолученияПодписей = "";
			Подписанты = ПолучитьСписокПодписантовДляДокументаЗапросНаПолучениеВедомостейЕРНН(ВыполняемыеОперации, Организация, ОшибкаПолученияПодписей);
			//Подписанты = скEDI_ОбщегоНазначения.ПолучитьПодписантов(ВыполняемыеОперации, Организация, МассивПараметровДляПолученияПодписаний, ОшибкаПолученияПодписей);
			Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
				Сообщить(ОшибкаПолученияПодписей);
				Возврат;
			КонецЕсли;
			лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Новый Структура("ВерсияМассиваДанныхПоДокументам,ВыполняемыеОперации,Организация,Подписанты", Неопределено, ВыполняемыеОперации, Организация, Подписанты);
			
			Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда	
				
				лФормаНастройкиПараметровПодписиДокументов = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастройкиПодписейЭлектронныхДокументов", лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма);

				лНастройкиНеобходимыхПодписей = лФормаНастройкиПараметровПодписиДокументов.ОткрытьМодально();
				ПрочитатьНастройкиПодписей(лНастройкиНеобходимыхПодписей);
				
			Иначе
				
				скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастройкиПараметровПодписиДокументов(лПараметрыФормыНастройкиПодписейЭлектронныхДокументов
																									, ЭтаФорма
																									, "ПрочитатьНастройкиПодписей");
				
			КонецЕсли;

		Иначе
			Сообщить(НСтр("ru = 'Не заполнено значение поля ""Организация""'; uk = 'Не заповнено значення поля ""Організація""'"));
		КонецЕсли;
		
	ИначеЕсли  ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ОтправкаЗапросаНаПолучениеЛимитаРегистрацииВЕРНН")Тогда

		Если ЗначениеЗаполнено(Организация) Тогда 
			ВыполняемыеОперации = Новый Массив;
			ВыполняемыеОперации.Добавить("ДляРегламентногоЗадания");
			ВыполняемыеОперации.Добавить("Подпись");
			ВыполняемыеОперации.Добавить("ОтправкаВДФС");
			
			ОшибкаПолученияПодписей = "";
			Подписанты = ПолучитьСписокПодписантовДляДокументаЗапросНаПолучениеЛимитаРегистрацииВЕРНН(ВыполняемыеОперации, Организация, ОшибкаПолученияПодписей);
			//Подписанты = скEDI_ОбщегоНазначения.ПолучитьПодписантов(ВыполняемыеОперации, Организация, МассивПараметровДляПолученияПодписаний, ОшибкаПолученияПодписей);
			Если ЗначениеЗаполнено(ОшибкаПолученияПодписей) Тогда
				Сообщить(ОшибкаПолученияПодписей);
				Возврат;
			КонецЕсли;
			лПараметрыФормыНастройкиПодписейЭлектронныхДокументов = Новый Структура("ВерсияМассиваДанныхПоДокументам,ВыполняемыеОперации,Организация,Подписанты", Неопределено, ВыполняемыеОперации, Организация, Подписанты);
			
			Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда	
				
				лФормаНастройкиПараметровПодписиДокументов = ПолучитьФорму("ОбщаяФорма.скEDI_ФормаНастройкиПодписейЭлектронныхДокументов", лПараметрыФормыНастройкиПодписейЭлектронныхДокументов, ЭтаФорма);

				лНастройкиНеобходимыхПодписей = лФормаНастройкиПараметровПодписиДокументов.ОткрытьМодально();
				ПрочитатьНастройкиПодписей(лНастройкиНеобходимыхПодписей);
				
			Иначе
				
				скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуНастройкиПараметровПодписиДокументов(лПараметрыФормыНастройкиПодписейЭлектронныхДокументов
																									, ЭтаФорма
																									, "ПрочитатьНастройкиПодписей");
				
			КонецЕсли;

		Иначе
			Сообщить(НСтр("ru = 'Не заполнено значение поля ""Организация""'; uk = 'Не заповнено значення поля ""Організація""'"));
		КонецЕсли
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьТекстКнопкиРасписания()
	
	ТекстРасписания = Строка(Расписание);
	
	Если ЗначениеЗаполнено(ТекстРасписания) Тогда 
		Элементы.ФормаНастроитьРасписание.Заголовок = ТекстРасписания;
	Иначе 	
		Элементы.ФормаНастроитьРасписание.Заголовок = "Настроить расписание";
	КонецЕсли;
	
	ИзменитьЗаголовокКнопкиНастройкиСертификатов();
	
КонецПроцедуры	

&НаКлиенте
Функция ПроверкаЗаполненияПройдена()
	
	Результат = Истина;
	
	// Общие проверки.
	Если НЕ ЗначениеЗаполнено(Организация) Тогда 
		Сообщить(НСтр("ru = 'Не заполнено значение поля ""Организация"". Сохранение невозможно.'; uk = 'Не заповнено значення поля ""Організація"". Збереження неможливо.'"));
		Результат = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОперацииРегламентногоЗадания) Тогда 
		Сообщить(НСтр("ru = 'Не заполнено значение поля ""Вид операции"". Сохранение невозможно.'; uk = 'Не заповнено значення поля ""Вид операції"". Збереження неможливо.'"));
		Результат = Ложь;
	КонецЕсли;
	
	// Преверки для видов операций.
	Если ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ПолучениеВходящихСообщений") Тогда 
		Если НЕ НастройкиСертификатаУстановлены Тогда 
			Сообщить(НСтр("ru = 'Не заполнено настройки сертификата. Сохранение невозможно.'; uk = 'Не заповнено налаштування сертифіката. Збереження неможливо.'"));
			Результат = Ложь;
		КонецЕсли;
	ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ОбработкаИсходящихДокументов") Тогда	
		
		Если КоличествоДокументовВОдномПотоке = 0 Тогда 
			Сообщить(НСтр("ru = 'Не заполнено значение поля ""Количество документов в одной обрабокте"". Сохранение невозможно.'; uk = 'Не заповнено значення поля ""Кількість документів в одній обробці"". Збереження неможливо.'"));
			Результат = Ложь;
		КонецЕсли;	
		
		Если НЕ НастройкиСертификатаУстановлены Тогда 
			Сообщить(НСтр("ru = 'Не заполнено настройки сертификата. Сохранение невозможно.'; uk = 'Не заповнено налаштування сертифіката. Збереження неможливо.'"));
			Результат = Ложь;
		КонецЕсли;
				
	ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.СверкаНалоговыхДокументовЕРНН") Тогда	
		
		ПериодСДата = ПериодС.Дата;
		Если Не ЗначениеЗаполнено(ПериодСДата) Тогда
			Сообщить(НСтр("ru = 'Не заполнено значение поля ""Период с"". Сохранение невозможно.'; uk = 'Не заповнено значення поля ""Період з"". Збереження неможливо.'"));
			Результат = Ложь;
		КонецЕсли;	
		//Если КоличествоДокументовВОдномПотоке = 0 Тогда 
		//	Сообщить(НСтр("ru = 'Не заполнено значение поля ""Количество документов в одной обрабокте"". Сохранение невозможно.'; uk = 'Не заповнено значення поля ""Кількість документів в одній обробці"". Збереження неможливо.'"));
		//	Результат = Ложь;
		//КонецЕсли;	
		
		//Если ОтправлятьНалоговыеДокументыНаРегистрациюПовторно Тогда
		//	Если ИнтервалПовторнойОтправки <= 0 Тогда
		//		Сообщить(НСтр("ru = 'Не заполнено значение поля ""Интервал повтоной отправки"". Сохранение невозможно.'; uk = 'Не заповнено значення поля ""Інтервал повтоної відправки"". Збереження неможливо.'"));
		//		Результат = Ложь;
		//	КонецЕсли;
		//КонецЕсли;
		
		Если НЕ НастройкиСертификатаУстановлены Тогда 
			Сообщить(НСтр("ru = 'Не заполнено настройки сертификата. Сохранение невозможно.'; uk = 'Не заповнено налаштування сертифіката. Збереження неможливо.'"));
			Результат = Ложь;
		КонецЕсли;
				
	ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.РегистрацияНалоговыхДокументов") Тогда	
		
		Если КоличествоДокументовВОдномПотоке = 0 Тогда 
			Сообщить(НСтр("ru = 'Не заполнено значение поля ""Количество документов в одной обрабокте"". Сохранение невозможно.'; uk = 'Не заповнено значення поля ""Кількість документів в одній обробці"". Збереження неможливо.'"));
			Результат = Ложь;
		КонецЕсли;	
		
		Если ОтправлятьНалоговыеДокументыНаРегистрациюПовторно Тогда
			Если ИнтервалПовторнойОтправки <= 0 Тогда
				Сообщить(НСтр("ru = 'Не заполнено значение поля ""Интервал повтоной отправки"". Сохранение невозможно.'; uk = 'Не заповнено значення поля ""Інтервал повтоної відправки"". Збереження неможливо.'"));
				Результат = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ НастройкиСертификатаУстановлены Тогда 
			Сообщить(НСтр("ru = 'Не заполнено настройки сертификата. Сохранение невозможно.'; uk = 'Не заповнено налаштування сертифіката. Збереження неможливо.'"));
			Результат = Ложь;
		КонецЕсли;
				
	ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ОтправкаЗарегистрированныхНалоговыхДокументовКонтрагенту") Тогда	
		
		Если КоличествоДокументовВОдномПотоке = 0 Тогда 
			Сообщить(НСтр("ru = 'Не заполнено значение поля ""Количество документов в одной обрабокте"". Сохранение невозможно.'; uk = 'Не заповнено значення поля ""Кількість документів в одній обробці"". Збереження неможливо.'"));
			Результат = Ложь;
		КонецЕсли;	
		
		Если НЕ НастройкиСертификатаУстановлены Тогда 
			Сообщить(НСтр("ru = 'Не заполнено настройки сертификата. Сохранение невозможно.'; uk = 'Не заповнено налаштування сертифіката. Збереження неможливо.'"));
			Результат = Ложь;
		КонецЕсли;
				
	КонецЕсли;

	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Процедура ПриИзмененииОрганизации()
	Ключ       = "";
	Сертификат = "";
	Пароль     = "";
	
	НастройкиСертификатаУстановлены = Ложь;
	ИзменитьЗаголовокКнопкиНастройкиСертификатов();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПодписи()
		
	Ключ       = "";
	Сертификат = "";
	Пароль     = "";
	
	НастройкиСертификатаУстановлены = Ложь;
	ИзменитьЗаголовокКнопкиНастройкиСертификатов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВидаЭлектронногоДокумента()
				
	НастройкиСертификатаУстановлены = Ложь;
	ТаблицаНеобходимыхПодписей.Очистить();
	ТаблицаНеобходимыхПодписейШифрования.Очистить();
	ИзменитьЗаголовокКнопкиНастройкиСертификатов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОтборДокументовПоЗапросу()
	Если ОтборДокументовПоЗапросу Тогда
		Элементы.скEDI_КнопкаОткрытьКонструкторЗапроса.Видимость = Истина;
		Элементы.скEDI_ТекстЗапроса.Видимость = Истина;
	Иначе
		Элементы.скEDI_КнопкаОткрытьКонструкторЗапроса.Видимость = Ложь;
		Элементы.скEDI_ТекстЗапроса.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Команда)
	СтандартнаяОбработка = Ложь;
	
	//ТекстЗапроса = Запись.ТекстЗапроса;
	КонструкторЗапроса = Новый КонструкторЗапроса;
	Если СтрДлина(СокрЛП(ТекстЗапроса)) > 0 Тогда
		//Попытка
			КонструкторЗапроса.Текст = ТекстЗапроса;
		//Исключение
		//	Предупреждение(ОписаниеОшибки());
		//	Режим = РежимДиалогаВопрос.ДаНет;                                                         
		//	Ответ = Вопрос("Удалить текст запроса?", Режим, 0);
		//	Если Ответ <> КодВозвратаДиалога.Да Тогда
		//		Возврат;
		//	КонецЕсли;
		//	
		//	КонструкторЗапроса = Новый КонструкторЗапроса;
		//КонецПопытки;
	КонецЕсли;
	
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
		Если КонструкторЗапроса.ОткрытьМодально() = Истина Тогда
			ПослеРедактированияТекстаЗапроса(КонструкторЗапроса.Текст, Неопределено);
		КонецЕсли;
	Иначе
		скEDI_ОткрытиеФормБезМодальности.ОткрытьФормуКонструктораЗапроса(КонструкторЗапроса, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеРедактированияТекстаЗапроса(Текст, ДополнительныеПараметры) Экспорт
	Если Текст <> Неопределено Тогда
		ТекстСообщения = "";
		Если НЕ ПроверкаТекстаЗапроса(Текст, ТекстСообщения) Тогда
			Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
				Предупреждение(ТекстСообщения);
			Иначе
				скEDI_ОткрытиеФормБезМодальности.ПоказатьПредупреждение_83(ТекстСообщения);
			КонецЕсли;
		Иначе
			ТекстЗапроса = Текст;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверкаТекстаЗапроса(пТекстЗапроса, ТекстСообщения)
	ТекстСообщения = "";
	//ПроверкаПараметров
	Запрос = Новый Запрос(пТекстЗапроса);
	Попытка
		ПараметрыЗапроса = Запрос.НайтиПараметры();
	Исключение
		ТекстСообщения = СтрЗаменить(Сред(ОписаниеОшибки(),83),"Синтаксическая ошибка","Синтаксическая ошибка в тексте запроса:");
		Возврат Ложь;
	КонецПопытки;
	ЕстьДругиеПараметры = Ложь;
	Для каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		ИмяПараметра =  ПараметрЗапроса.Имя;
		Если ВРег(ИмяПараметра) = ВРег("Организация") Тогда
		ИначеЕсли ВРег(ИмяПараметра) = ВРег("ВидыЭлектронногоДокумента") Тогда
		ИначеЕсли ВРег(ИмяПараметра) = ВРег("ДатаНачала") Тогда
		ИначеЕсли ВРег(ИмяПараметра) = ВРег("ДатаОкончания") Тогда
		Иначе
			ТекстСообщения = ТекстСообщения + ?(ТекстСообщения = "", "", Символы.ПС)
			+НСтр("ru = 'В запросе обнаружен неподдерживаемый параметр'; uk = 'В запросі виявлено параметр, що не підтримується'") + ": """ + ИмяПараметра + """";
			ЕстьДругиеПараметры = Истина;
		КонецЕсли;
	КонецЦикла; 
	//Если не ЕстьПараметрСсылка Тогда
	//	ТекстСообщения = ТекстСообщения + ?(ТекстСообщения = "", "", Символы.ПС)
	//	+НСтр("ru = 'В запросе не обнаружен параметр ""Ссылка""'; uk = 'В запросі не виявлено параметр ""Ссылка""'");
	//КонецЕсли;
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ПрочитатьНастройкиПодписей(СтруктураПодписей, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если СтруктураПодписей <> Неопределено Тогда 
		
		Если ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ПолучениеВходящихСообщений") Тогда
			
			Если СтруктураПодписей.ТаблицаНеобходимыхПодписейШифрования.Количество() > 0 Тогда 
				Сертификат = СтруктураПодписей.ТаблицаНеобходимыхПодписейШифрования[0].ТелоСертификата;
				КлючНаЗащищенномНосителе = СтруктураПодписей.ТаблицаНеобходимыхПодписейШифрования[0].КлючНаЗащищенномНосителе;
				Ключ       = СтруктураПодписей.ТаблицаНеобходимыхПодписейШифрования[0].ТелоСекретногоКлюча;
				Пароль     = СтруктураПодписей.ТаблицаНеобходимыхПодписейШифрования[0].ПарольСекретногоКлюча;
				ЗащищенныйНосительДоступен = СтруктураПодписей.ТаблицаНеобходимыхПодписейШифрования[0].ЗащищенныйНосительДоступен;
			КонецЕсли;
			
			ТаблицаНастроекПодписейШифрования = СтруктураПодписей.ТаблицаНеобходимыхПодписейШифрования;
			ТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ТаблицаНастроекПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписейШифрования, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписейШифрования);
			ТаблицаНеобходимыхПодписейШифрования.Загрузить(ТаблицаНастроекПодписейШифрования);
			
			Если ЗначениеЗаполнено(Сертификат) Тогда
				Если КлючНаЗащищенномНосителе Тогда
					Если ЗащищенныйНосительДоступен И  ЗначениеЗаполнено(Пароль) Тогда 
						НастройкиСертификатаУстановлены = Истина;
					Иначе
						НастройкиСертификатаУстановлены = Ложь;
					КонецЕсли;
				Иначе
					Если ЗначениеЗаполнено(Ключ) И  ЗначениеЗаполнено(Пароль) Тогда 
						НастройкиСертификатаУстановлены = Истина;
					Иначе
						НастройкиСертификатаУстановлены = Ложь;
					КонецЕсли;
				КонецЕсли;
			Иначе
				НастройкиСертификатаУстановлены = Ложь;
			КонецЕсли;
			
		ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ОбработкаИсходящихДокументов") Тогда
			
			ТаблицаНастроекПодписей = СтруктураПодписей.ТаблицаНеобходимыхПодписей;
			ТаблицаНастроекПодписей = ?(ТипЗнч(ТаблицаНастроекПодписей) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписей, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписей);
			ТаблицаНеобходимыхПодписей.Загрузить(ТаблицаНастроекПодписей);
			
			ТаблицаНастроекПодписейШифрования = СтруктураПодписей.ТаблицаНеобходимыхПодписейШифрования;
			ТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ТаблицаНастроекПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписейШифрования, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписейШифрования);
			ТаблицаНеобходимыхПодписейШифрования.Загрузить(ТаблицаНастроекПодписейШифрования);
			
			Если ТаблицаНеобходимыхПодписей.Количество() > 0
				И ТаблицаНеобходимыхПодписейШифрования.Количество() > 0 Тогда 
				
				НастройкиСертификатаУстановлены = Истина;
				
			Иначе
				НастройкиСертификатаУстановлены = Ложь;
			КонецЕсли;
			
		ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.РегистрацияНалоговыхДокументов") Тогда
			
			ТаблицаНастроекПодписей = СтруктураПодписей.ТаблицаНеобходимыхПодписей;
			ТаблицаНастроекПодписей = ?(ТипЗнч(ТаблицаНастроекПодписей) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписей, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписей);
			ТаблицаНеобходимыхПодписей.Загрузить(ТаблицаНастроекПодписей);
			
			ТаблицаНастроекПодписейШифрования = СтруктураПодписей.ТаблицаНеобходимыхПодписейШифрования;
			ТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ТаблицаНастроекПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписейШифрования, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписейШифрования);
			ТаблицаНеобходимыхПодписейШифрования.Загрузить(ТаблицаНастроекПодписейШифрования);
			
			Если ТаблицаНеобходимыхПодписей.Количество() > 0
				И ТаблицаНеобходимыхПодписейШифрования.Количество() > 0 Тогда 
				
				НастройкиСертификатаУстановлены = Истина;
				
			Иначе
				НастройкиСертификатаУстановлены = Ложь;
			КонецЕсли;
			
		ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ОтправкаЗарегистрированныхНалоговыхДокументовКонтрагенту") Тогда
			Если СтруктураПодписей.ТаблицаНеобходимыхПодписейШифрования.Количество() > 0 Тогда 
				Сертификат = СтруктураПодписей.ТаблицаНеобходимыхПодписейШифрования[0].ТелоСертификата;
				КлючНаЗащищенномНосителе = СтруктураПодписей.ТаблицаНеобходимыхПодписейШифрования[0].КлючНаЗащищенномНосителе;
				Ключ       = СтруктураПодписей.ТаблицаНеобходимыхПодписейШифрования[0].ТелоСекретногоКлюча;
				Пароль     = СтруктураПодписей.ТаблицаНеобходимыхПодписейШифрования[0].ПарольСекретногоКлюча;
				ЗащищенныйНосительДоступен = СтруктураПодписей.ТаблицаНеобходимыхПодписейШифрования[0].ЗащищенныйНосительДоступен;
			КонецЕсли;
			
			ТаблицаНастроекПодписей = СтруктураПодписей.ТаблицаНеобходимыхПодписей;
			ТаблицаНастроекПодписей = ?(ТипЗнч(ТаблицаНастроекПодписей) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписей, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписей);
			ТаблицаНеобходимыхПодписей.Загрузить(ТаблицаНастроекПодписей);
			
			ТаблицаНастроекПодписейШифрования = СтруктураПодписей.ТаблицаНеобходимыхПодписейШифрования;
			ТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ТаблицаНастроекПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписейШифрования, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписейШифрования);
			ТаблицаНеобходимыхПодписейШифрования.Загрузить(ТаблицаНастроекПодписейШифрования);
			
			Если ЗначениеЗаполнено(Сертификат) Тогда
				Если КлючНаЗащищенномНосителе Тогда
					Если ЗащищенныйНосительДоступен И  ЗначениеЗаполнено(Пароль) Тогда 
						НастройкиСертификатаУстановлены = Истина;
					Иначе
						НастройкиСертификатаУстановлены = Ложь;
					КонецЕсли;
				Иначе
					Если ЗначениеЗаполнено(Ключ) И  ЗначениеЗаполнено(Пароль) Тогда 
						НастройкиСертификатаУстановлены = Истина;
					Иначе
						НастройкиСертификатаУстановлены = Ложь;
					КонецЕсли;
				КонецЕсли;
			Иначе
				НастройкиСертификатаУстановлены = Ложь;
			КонецЕсли;
		
			//ТаблицаНастроекПодписей = СтруктураПодписей.ТаблицаНеобходимыхПодписей;
			//ТаблицаНастроекПодписей = ?(ТипЗнч(ТаблицаНастроекПодписей) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписей, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписей);
			//ТаблицаНеобходимыхПодписей.Загрузить(ТаблицаНастроекПодписей);
			//
			//ТаблицаНастроекПодписейШифрования = СтруктураПодписей.ТаблицаНеобходимыхПодписейШифрования;
			//ТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ТаблицаНастроекПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписейШифрования, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписейШифрования);
			//ТаблицаНеобходимыхПодписейШифрования.Загрузить(ТаблицаНастроекПодписейШифрования);
			//
			//Если ТаблицаНеобходимыхПодписей.Количество() > 0
			//	И ТаблицаНеобходимыхПодписейШифрования.Количество() > 0 Тогда 
			//	
			//	НастройкиСертификатаУстановлены = Истина;
			//	
			//Иначе
			//	НастройкиСертификатаУстановлены = Ложь;
			//КонецЕсли;
			//
		ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.СверкаНалоговыхДокументовЕРНН") Тогда
			
			ТаблицаНастроекПодписей = СтруктураПодписей.ТаблицаНеобходимыхПодписей;
			ТаблицаНастроекПодписей = ?(ТипЗнч(ТаблицаНастроекПодписей) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписей, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписей);
			ТаблицаНеобходимыхПодписей.Загрузить(ТаблицаНастроекПодписей);
			
			ТаблицаНастроекПодписейШифрования = СтруктураПодписей.ТаблицаНеобходимыхПодписейШифрования;
			ТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ТаблицаНастроекПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписейШифрования, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписейШифрования);
			ТаблицаНеобходимыхПодписейШифрования.Загрузить(ТаблицаНастроекПодписейШифрования);
			
			Если ТаблицаНеобходимыхПодписей.Количество() > 0
				И ТаблицаНеобходимыхПодписейШифрования.Количество() > 0 Тогда 
				
				НастройкиСертификатаУстановлены = Истина;
				
			Иначе
				НастройкиСертификатаУстановлены = Ложь;
			КонецЕсли;
			
		ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ОтправкаЗапросаНаПолучениеЛимитаРегистрацииВЕРНН") Тогда
			
			ТаблицаНастроекПодписей = СтруктураПодписей.ТаблицаНеобходимыхПодписей;
			ТаблицаНастроекПодписей = ?(ТипЗнч(ТаблицаНастроекПодписей) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписей, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписей);
			ТаблицаНеобходимыхПодписей.Загрузить(ТаблицаНастроекПодписей);
			
			ТаблицаНастроекПодписейШифрования = СтруктураПодписей.ТаблицаНеобходимыхПодписейШифрования;
			ТаблицаНастроекПодписейШифрования = ?(ТипЗнч(ТаблицаНастроекПодписейШифрования) = Тип("ДанныеФормыКоллекция"), ДанныеФормыВЗначение(ТаблицаНастроекПодписейШифрования, Тип("ТаблицаЗначений")), ТаблицаНастроекПодписейШифрования);
			ТаблицаНеобходимыхПодписейШифрования.Загрузить(ТаблицаНастроекПодписейШифрования);
			
			Если ТаблицаНеобходимыхПодписей.Количество() > 0
				И ТаблицаНеобходимыхПодписейШифрования.Количество() > 0 Тогда 
				
				НастройкиСертификатаУстановлены = Истина;
				
			Иначе
				НастройкиСертификатаУстановлены = Ложь;
			КонецЕсли;
		КонецЕсли;
					
	Иначе
		
		НастройкиСертификатаУстановлены = Ложь;
		
		Сертификат = ""; 	
		Ключ       = ""; 
		Пароль     = ""; 
		ТаблицаНеобходимыхПодписейШифрования.Очистить();
		ТаблицаНеобходимыхПодписей.Очистить();
		
	КонецЕсли;
	
	ИзменитьЗаголовокКнопкиНастройкиСертификатов();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура СозданиеЭлементовФормы()
	  
	// Удаляем старые эелменты формы
	МассивЭлементовДляУдаления = Новый Массив;
	
	Для Каждого Элемент Из Элементы Цикл 
		
		Если СтрЧислоВхождений(Элемент.Имя, "скEDI_") > 0
			И Элемент.Вид <> ВидГруппыФормы.КонтекстноеМеню 
			И Элемент.Вид <> ВидДекорацииФормы.Надпись Тогда 
			
			МассивЭлементовДляУдаления.Добавить(Элемент);
			
		КонецЕсли;
				
	КонецЦикла;	
	
	Для Каждого ЭлементКУдалению Из МассивЭлементовДляУдаления Цикл
		Элементы.Удалить(ЭлементКУдалению);	
	КонецЦикла;	
	
	Если ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ПолучениеВходящихСообщений") Тогда 
		/// Элементы формы		
		
		// Кнопка изменения настроек сертификатов
		ЭлементФормы_НастройкаСертификата = Элементы.Добавить("скEDI_НастроитьСертификаты", Тип("КнопкаФормы"));
		ЭлементФормы_НастройкаСертификата.Вид = ВидКнопкиФормы.Гиперссылка;
		ЭлементФормы_НастройкаСертификата.ИмяКоманды = "ИзменитьНастройкиСертификата";
		
		ИзменитьЗаголовокКнопкиНастройкиСертификатов();
		
	ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ОбработкаИсходящихДокументов") Тогда 
		
		// Виды электронного документа
		ЭлементФормы_ВидыЭлектронногоДокумента = Элементы.Добавить("скEDI_ВидыЭлектронногоДокумента", Тип("ПолеФормы"));
		ЭлементФормы_ВидыЭлектронногоДокумента.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы_ВидыЭлектронногоДокумента.ПутьКДанным = "ВидыЭлектронногоДокумента";
		
		МассивСвязей = Новый Массив;
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Организация"));
		ЭлементФормы_ВидыЭлектронногоДокумента.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
		МассивПараметров = Новый Массив;
		//МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипДокумента", ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент")));
		СписокТиповДокументов = Новый СписокЗначений;
		СписокТиповДокументов.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ДокументСВложениями"));
		СписокТиповДокументов.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.ПервичныйДокумент"));
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипДокумента", СписокТиповДокументов));
		ЭлементФормы_ВидыЭлектронногоДокумента.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);

		ЭлементФормы_ВидыЭлектронногоДокумента.КнопкаОткрытия = Ложь;
		
		ЭлементФормы_ВидыЭлектронногоДокумента.УстановитьДействие("ПриИзменении", "ПриИзмененииВидаЭлектронногоДокумента");
		ЭлементФормы_ВидыЭлектронногоДокумента.УстановитьДействие("НачалоВыбора", "ВидыЭлектронныхДокументовНачалоВыбора");
		
		
		// Период выборки документов
		ЭлементФормы_ПериодВыборки = Элементы.Добавить("скEDI_ПериодВыборки", Тип("ПолеФормы"));
		ЭлементФормы_ПериодВыборки.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы_ПериодВыборки.ПутьКДанным = "ПериодВыборки";
		
		// Запрос
		ЭлементФормы_ОтборДокументовПоЗапросу = Элементы.Добавить("скEDI_ОтборДокументовПоЗапросу", Тип("ПолеФормы"));
		ЭлементФормы_ОтборДокументовПоЗапросу.Вид = ВидПоляФормы.ПолеФлажка;
		ЭлементФормы_ОтборДокументовПоЗапросу.ПутьКДанным = "ОтборДокументовПоЗапросу";
		ЭлементФормы_ОтборДокументовПоЗапросу.УстановитьДействие("ПриИзменении", "ПриИзмененииОтборДокументовПоЗапросу");
		
		ЭлементФормы_КнопкаОткрытьКонструкторЗапроса = Элементы.Добавить("скEDI_КнопкаОткрытьКонструкторЗапроса", Тип("КнопкаФормы"));
		ЭлементФормы_КнопкаОткрытьКонструкторЗапроса.ИмяКоманды = "ОткрытьКонструкторЗапроса";
		
		ЭлементФормы_ТекстЗапроса = Элементы.Добавить("скEDI_ТекстЗапроса", Тип("ПолеФормы"));
		ЭлементФормы_ТекстЗапроса.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы_ТекстЗапроса.ПутьКДанным = "ТекстЗапроса";
		ЭлементФормы_ТекстЗапроса.МногострочныйРежим = Истина;
		Если ОтборДокументовПоЗапросу Тогда
			ЭлементФормы_КнопкаОткрытьКонструкторЗапроса.Видимость = Истина;
			ЭлементФормы_ТекстЗапроса.Видимость = Истина;
		Иначе
			ЭлементФормы_КнопкаОткрытьКонструкторЗапроса.Видимость = Ложь;
			ЭлементФормы_ТекстЗапроса.Видимость = Ложь;
		КонецЕсли;
		
		// Количество Процессов
		ЭлементФормы_КоличествоФоновыхПроцессов = Элементы.Добавить("скEDI_КоличествоФоновыхПроцессов", Тип("ПолеФормы"));
		ЭлементФормы_КоличествоФоновыхПроцессов.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы_КоличествоФоновыхПроцессов.ПутьКДанным = "КоличествоФоновыхПроцессов";
		
		// Количество документов в одной обрабокте
		ЭлементФормы_КоличествоДокументовВОдномПотоке = Элементы.Добавить("скEDI_КоличествоДокументовВОдномПотоке", Тип("ПолеФормы"));
		ЭлементФормы_КоличествоДокументовВОдномПотоке.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы_КоличествоДокументовВОдномПотоке.ПутьКДанным = "КоличествоДокументовВОдномПотоке";

		// Кнопка изменения настроек сертификатов
		ЭлементФормы_НастройкаСертификата = Элементы.Добавить("скEDI_НастроитьСертификаты", Тип("КнопкаФормы"));
		ЭлементФормы_НастройкаСертификата.Вид = ВидКнопкиФормы.Гиперссылка;
		ЭлементФормы_НастройкаСертификата.ИмяКоманды = "ИзменитьНастройкиСертификата";

		ИзменитьЗаголовокКнопкиНастройкиСертификатов();

	ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.РегистрацияНалоговыхДокументов") Тогда 
		
		// Виды электронного документа
		ЭлементФормы_ВидыЭлектронногоДокумента = Элементы.Добавить("скEDI_ВидыЭлектронногоДокумента", Тип("ПолеФормы"));
		ЭлементФормы_ВидыЭлектронногоДокумента.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы_ВидыЭлектронногоДокумента.ПутьКДанным = "ВидыЭлектронногоДокумента";
		
		МассивСвязей = Новый Массив;
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Организация"));
		ЭлементФормы_ВидыЭлектронногоДокумента.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
		МассивПараметров = Новый Массив;
		Массив2 = Новый Массив;
		Массив2.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная"));
		Массив2.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной"));
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипДокумента", Массив2));
		ЭлементФормы_ВидыЭлектронногоДокумента.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);

		ЭлементФормы_ВидыЭлектронногоДокумента.КнопкаОткрытия = Ложь;
		
		ЭлементФормы_ВидыЭлектронногоДокумента.УстановитьДействие("ПриИзменении", "ПриИзмененииВидаЭлектронногоДокумента");
		ЭлементФормы_ВидыЭлектронногоДокумента.УстановитьДействие("НачалоВыбора", "ВидыЭлектронныхДокументовНачалоВыбора");
		
		
		// Период выборки документов
		ЭлементФормы_ПериодВыборки = Элементы.Добавить("скEDI_ПериодВыборки", Тип("ПолеФормы"));
		ЭлементФормы_ПериодВыборки.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы_ПериодВыборки.ПутьКДанным = "ПериодВыборки";

		// ОтправлятьНалоговыеДокументыНаРегистрациюПовторно
		ЭлементФормы_ПериодВыборки = Элементы.Добавить("скEDI_ОтправлятьНалоговыеДокументыНаРегистрациюПовторно", Тип("ПолеФормы"));
		ЭлементФормы_ПериодВыборки.Вид = ВидПоляФормы.ПолеФлажка;
		ЭлементФормы_ПериодВыборки.ПутьКДанным = "ОтправлятьНалоговыеДокументыНаРегистрациюПовторно";

		// ИнтервалПовторнойОтправки
		ЭлементФормы_ПериодВыборки = Элементы.Добавить("скEDI_ИнтервалПовторнойОтправки", Тип("ПолеФормы"));
		ЭлементФормы_ПериодВыборки.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы_ПериодВыборки.ПутьКДанным = "ИнтервалПовторнойОтправки";
		ЭлементФормы_ПериодВыборки.КнопкаРегулирования = Истина;

		// Количество Процессов
		ЭлементФормы_КоличествоФоновыхПроцессов = Элементы.Добавить("скEDI_КоличествоФоновыхПроцессов", Тип("ПолеФормы"));
		ЭлементФормы_КоличествоФоновыхПроцессов.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы_КоличествоФоновыхПроцессов.ПутьКДанным = "КоличествоФоновыхПроцессов";
		
		// Количество документов в одной обрабокте
		ЭлементФормы_КоличествоДокументовВОдномПотоке = Элементы.Добавить("скEDI_КоличествоДокументовВОдномПотоке", Тип("ПолеФормы"));
		ЭлементФормы_КоличествоДокументовВОдномПотоке.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы_КоличествоДокументовВОдномПотоке.ПутьКДанным = "КоличествоДокументовВОдномПотоке";

		// Кнопка изменения настроек сертификатов
		ЭлементФормы_НастройкаСертификата = Элементы.Добавить("скEDI_НастроитьСертификаты", Тип("КнопкаФормы"));
		ЭлементФормы_НастройкаСертификата.Вид = ВидКнопкиФормы.Гиперссылка;
		ЭлементФормы_НастройкаСертификата.ИмяКоманды = "ИзменитьНастройкиСертификата";

		ИзменитьЗаголовокКнопкиНастройкиСертификатов();

	ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ОтправкаЗарегистрированныхНалоговыхДокументовКонтрагенту") Тогда 
		
		// Виды электронного документа
		ЭлементФормы_ВидыЭлектронногоДокумента = Элементы.Добавить("скEDI_ВидыЭлектронногоДокумента", Тип("ПолеФормы"));
		ЭлементФормы_ВидыЭлектронногоДокумента.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы_ВидыЭлектронногоДокумента.ПутьКДанным = "ВидыЭлектронногоДокумента";
		
		МассивСвязей = Новый Массив;
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Организация"));
		ЭлементФормы_ВидыЭлектронногоДокумента.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
		МассивПараметров = Новый Массив;
		Массив2 = Новый Массив;
		Массив2.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная"));
		Массив2.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной"));
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипДокумента", Массив2));
		ЭлементФормы_ВидыЭлектронногоДокумента.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);

		ЭлементФормы_ВидыЭлектронногоДокумента.КнопкаОткрытия = Ложь;
		
		ЭлементФормы_ВидыЭлектронногоДокумента.УстановитьДействие("ПриИзменении", "ПриИзмененииВидаЭлектронногоДокумента");
		ЭлементФормы_ВидыЭлектронногоДокумента.УстановитьДействие("НачалоВыбора", "ВидыЭлектронныхДокументовНачалоВыбора");
		
		
		// Период выборки документов
		ЭлементФормы_ПериодВыборки = Элементы.Добавить("скEDI_ПериодВыборки", Тип("ПолеФормы"));
		ЭлементФормы_ПериодВыборки.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы_ПериодВыборки.ПутьКДанным = "ПериодВыборки";
		ЭлементФормы_ПериодВыборки.Заголовок = НСтр("ru = 'Период выборки документов (По дате регистрации)'; uk = 'Період вибірки документів (По даті реєстрації)'");

		// Количество Процессов
		ЭлементФормы_КоличествоФоновыхПроцессов = Элементы.Добавить("скEDI_КоличествоФоновыхПроцессов", Тип("ПолеФормы"));
		ЭлементФормы_КоличествоФоновыхПроцессов.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы_КоличествоФоновыхПроцессов.ПутьКДанным = "КоличествоФоновыхПроцессов";
		
		// Количество документов в одной обрабокте
		ЭлементФормы_КоличествоДокументовВОдномПотоке = Элементы.Добавить("скEDI_КоличествоДокументовВОдномПотоке", Тип("ПолеФормы"));
		ЭлементФормы_КоличествоДокументовВОдномПотоке.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы_КоличествоДокументовВОдномПотоке.ПутьКДанным = "КоличествоДокументовВОдномПотоке";

		// Кнопка изменения настроек сертификатов
		ЭлементФормы_НастройкаСертификата = Элементы.Добавить("скEDI_НастроитьСертификаты", Тип("КнопкаФормы"));
		ЭлементФормы_НастройкаСертификата.Вид = ВидКнопкиФормы.Гиперссылка;
		ЭлементФормы_НастройкаСертификата.ИмяКоманды = "ИзменитьНастройкиСертификата";

		ИзменитьЗаголовокКнопкиНастройкиСертификатов();

	ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.СверкаНалоговыхДокументовЕРНН") Тогда 
		
		//// Виды электронного документа
		//ЭлементФормы_ВидыЭлектронногоДокумента = Элементы.Добавить("скEDI_ВидыЭлектронногоДокумента", Тип("ПолеФормы"));
		//ЭлементФормы_ВидыЭлектронногоДокумента.Вид = ВидПоляФормы.ПолеВвода;
		//ЭлементФормы_ВидыЭлектронногоДокумента.ПутьКДанным = "ВидыЭлектронногоДокумента";
		//
		//МассивСвязей = Новый Массив;
		//МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Организация"));
		//ЭлементФормы_ВидыЭлектронногоДокумента.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);

		//ЭлементФормы_ВидыЭлектронногоДокумента.КнопкаОткрытия = Ложь;
		//
		//ЭлементФормы_ВидыЭлектронногоДокумента.УстановитьДействие("ПриИзменении", "ПриИзмененииВидаЭлектронногоДокумента");
		//ЭлементФормы_ВидыЭлектронногоДокумента.УстановитьДействие("НачалоВыбора", "ВидыЭлектронныхДокументовНачалоВыбора");
		
		
		// Период выборки документов
		ЭлементФормы_ПериодС = Элементы.Добавить("скEDI_ПериодС", Тип("ПолеФормы"));
		ЭлементФормы_ПериодС.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы_ПериодС.ПутьКДанным = "ПериодС";

		//// Количество документов в одной обрабокте
		//ЭлементФормы_КоличествоДокументовВОдномПотоке = Элементы.Добавить("скEDI_КоличествоДокументовВОдномПотоке", Тип("ПолеФормы"));
		//ЭлементФормы_КоличествоДокументовВОдномПотоке.Вид = ВидПоляФормы.ПолеВвода;
		//ЭлементФормы_КоличествоДокументовВОдномПотоке.ПутьКДанным = "КоличествоДокументовВОдномПотоке";

		// Кнопка изменения настроек сертификатов
		ЭлементФормы_НастройкаСертификата = Элементы.Добавить("скEDI_НастроитьСертификаты", Тип("КнопкаФормы"));
		ЭлементФормы_НастройкаСертификата.Вид = ВидКнопкиФормы.Гиперссылка;
		ЭлементФормы_НастройкаСертификата.ИмяКоманды = "ИзменитьНастройкиСертификата";

		ИзменитьЗаголовокКнопкиНастройкиСертификатов();

	ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ОтправкаЗапросаНаПолучениеЛимитаРегистрацииВЕРНН") Тогда
		
		// Кнопка изменения настроек сертификатов
		ЭлементФормы_НастройкаСертификата = Элементы.Добавить("скEDI_НастроитьСертификаты", Тип("КнопкаФормы"));
		ЭлементФормы_НастройкаСертификата.Вид = ВидКнопкиФормы.Гиперссылка;
		ЭлементФормы_НастройкаСертификата.ИмяКоманды = "ИзменитьНастройкиСертификата";

		ИзменитьЗаголовокКнопкиНастройкиСертификатов();
	КонецЕсли;
	
	ОбновитьТекстКнопкиРасписания();
	
КонецПроцедуры	

&НаСервере
Процедура ПерезаполнитьРегЗадание(Отказ, ИспользованиеРегЗадания = Неопределено)
	
	/// Изменение параметров. рег задания.
	РегЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ИдентификаторРегЗадания));
	
	
	// Параметры выполнения рег. задания зависят от вида операции.	
	Если ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ПолучениеВходящихСообщений") Тогда
		
		СтруктураПараметровМетодаРегЗадания = Новый Структура("Организация,ВидОперацииРегламентногоЗадания,Сертификат,Ключ,Пароль,КоличествоФоновыхПроцессов,
															|НаименованиеФоновогоПроцесса,ВидОперацииРегламентногоЗадания,
															|ТаблицаНеобходимыхПодписейШифрования,НастройкиСертификатаУстановлены"
																,Организация
																,ВидОперацииРегламентногоЗадания
																,Сертификат
																,Ключ
																,Пароль
																,?(КоличествоФоновыхПроцессов = 0, 1, КоличествоФоновыхПроцессов)
																,ИдентификаторРегЗадания
																,ВидОперацииРегламентногоЗадания
																,ТаблицаНеобходимыхПодписейШифрования.Выгрузить()
																,НастройкиСертификатаУстановлены);
		
	ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ОбработкаИсходящихДокументов") Тогда
		
		СтруктураПараметровМетодаРегЗадания = Новый Структура("Организация,ВидОперацииРегламентногоЗадания,КоличествоФоновыхПроцессов, 
																		|КоличествоДокументовВОдномПотоке, НаименованиеФоновогоПроцесса, ВидОперацииРегламентногоЗадания,
																		|ТаблицаНеобходимыхПодписейШифрования, ТаблицаНеобходимыхПодписей, 
																		|НастройкиСертификатаУстановлены, ПериодВыборки, ВидыЭлектронногоДокумента, ОтборДокументовПоЗапросу, ТекстЗапроса"
																	, Организация
																	, ВидОперацииРегламентногоЗадания
																	, ?(КоличествоФоновыхПроцессов = 0, 1, КоличествоФоновыхПроцессов)
																	, КоличествоДокументовВОдномПотоке
																	, ИдентификаторРегЗадания
																	, ВидОперацииРегламентногоЗадания
																	, ТаблицаНеобходимыхПодписейШифрования.Выгрузить()
																	, ТаблицаНеобходимыхПодписей.Выгрузить()
																	, НастройкиСертификатаУстановлены
																	, ПериодВыборки
																	, ВидыЭлектронногоДокумента
																	, ОтборДокументовПоЗапросу
																	, ТекстЗапроса);
	
	ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.РегистрацияНалоговыхДокументов") Тогда
		
		СтруктураПараметровМетодаРегЗадания = Новый Структура("Организация,ВидОперацииРегламентногоЗадания,КоличествоФоновыхПроцессов, 
																		|КоличествоДокументовВОдномПотоке, НаименованиеФоновогоПроцесса, ВидОперацииРегламентногоЗадания,
																		|ТаблицаНеобходимыхПодписейШифрования, ТаблицаНеобходимыхПодписей, 
																		|НастройкиСертификатаУстановлены, ПериодВыборки, ВидыЭлектронногоДокумента,
																		|ОтправлятьНалоговыеДокументыНаРегистрациюПовторно,ИнтервалПовторнойОтправки"
																	, Организация
																	, ВидОперацииРегламентногоЗадания
																	, ?(КоличествоФоновыхПроцессов = 0, 1, КоличествоФоновыхПроцессов)
																	, КоличествоДокументовВОдномПотоке
																	, ИдентификаторРегЗадания
																	, ВидОперацииРегламентногоЗадания
																	, ТаблицаНеобходимыхПодписейШифрования.Выгрузить()
																	, ТаблицаНеобходимыхПодписей.Выгрузить()
																	, НастройкиСертификатаУстановлены
																	, ПериодВыборки
																	, ВидыЭлектронногоДокумента
																	, ОтправлятьНалоговыеДокументыНаРегистрациюПовторно, ИнтервалПовторнойОтправки);
	
	ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ОтправкаЗарегистрированныхНалоговыхДокументовКонтрагенту") Тогда
		
		СтруктураПараметровМетодаРегЗадания = Новый Структура("Организация,ВидОперацииРегламентногоЗадания,КоличествоФоновыхПроцессов, 
																		|КоличествоДокументовВОдномПотоке, НаименованиеФоновогоПроцесса, ВидОперацииРегламентногоЗадания,
																		|ТаблицаНеобходимыхПодписейШифрования, ТаблицаНеобходимыхПодписей, 
																		|НастройкиСертификатаУстановлены, ПериодВыборки, ВидыЭлектронногоДокумента"
																	, Организация
																	, ВидОперацииРегламентногоЗадания
																	, ?(КоличествоФоновыхПроцессов = 0, 1, КоличествоФоновыхПроцессов)
																	, КоличествоДокументовВОдномПотоке
																	, ИдентификаторРегЗадания
																	, ВидОперацииРегламентногоЗадания
																	, ТаблицаНеобходимыхПодписейШифрования.Выгрузить()
																	, ТаблицаНеобходимыхПодписей.Выгрузить()
																	, НастройкиСертификатаУстановлены
																	, ПериодВыборки
																	, ВидыЭлектронногоДокумента);
	
	ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.СверкаНалоговыхДокументовЕРНН") Тогда
		
		СтруктураПараметровМетодаРегЗадания = Новый Структура("Организация,ВидОперацииРегламентногоЗадания,КоличествоФоновыхПроцессов, 
																		|НаименованиеФоновогоПроцесса, ВидОперацииРегламентногоЗадания,
																		|ТаблицаНеобходимыхПодписейШифрования, ТаблицаНеобходимыхПодписей, 
																		|НастройкиСертификатаУстановлены, ПериодС"
																	, Организация
																	, ВидОперацииРегламентногоЗадания
																	, ?(КоличествоФоновыхПроцессов = 0, 1, КоличествоФоновыхПроцессов)
																	, ИдентификаторРегЗадания
																	, ВидОперацииРегламентногоЗадания
																	, ТаблицаНеобходимыхПодписейШифрования.Выгрузить()
																	, ТаблицаНеобходимыхПодписей.Выгрузить()
																	, НастройкиСертификатаУстановлены
																	, ПериодС);
	
	ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ОтправкаЗапросаНаПолучениеЛимитаРегистрацииВЕРНН") Тогда
		
		СтруктураПараметровМетодаРегЗадания = Новый Структура("Организация,ВидОперацииРегламентногоЗадания,КоличествоФоновыхПроцессов, 
																		|НаименованиеФоновогоПроцесса, ВидОперацииРегламентногоЗадания,
																		|ТаблицаНеобходимыхПодписейШифрования, ТаблицаНеобходимыхПодписей, 
																		|НастройкиСертификатаУстановлены"
																	, Организация
																	, ВидОперацииРегламентногоЗадания
																	, ?(КоличествоФоновыхПроцессов = 0, 1, КоличествоФоновыхПроцессов)
																	, ИдентификаторРегЗадания
																	, ВидОперацииРегламентногоЗадания
																	, ТаблицаНеобходимыхПодписейШифрования.Выгрузить()
																	, ТаблицаНеобходимыхПодписей.Выгрузить()
																	, НастройкиСертификатаУстановлены);
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	
	МассивПараметров.Добавить(СтруктураПараметровМетодаРегЗадания);
	
	РегЗадание.Параметры = МассивПараметров;
	
	// Расписание
	Если Расписание <> Неопределено Тогда  
		РегЗадание.Расписание = Расписание;
	КонецЕсли;
	
	// Имя пользователя
	РегЗадание.ИмяПользователя = ИмяПользователя;
	
	Если ИспользованиеРегЗадания <> Неопределено Тогда 
		РегЗадание.Использование = ИспользованиеРегЗадания;
	КонецЕсли;
	
	Попытка
		РегЗадание.Записать();				
	Исключение
		Сообщить(ОписаниеОшибки());
		Отказ = Истина;
	КонецПопытки;	
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьНовоеРегЗадание(Отказ, ИспользованиеРегЗадания = Ложь)
		
	// Для разных видов операций разные рег. задания.
	Если ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ПолучениеВходящихСообщений") Тогда 
		
		Попытка
			РегламентноеЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.скEDI_ПолучениеВходящихСообщений);
			
			РегламентноеЗадание.Наименование = НСтр("ru = 'Получение входящих сообщений (FlyDoc)'; uk = 'Отримання вхідних повідомлень (FlyDoc)'");
			
			// Уникальность рег. задания в пределах метаданных.
			РегламентноеЗадание.Ключ             = Строка(Новый УникальныйИдентификатор);
				 
			РегламентноеЗадание.Расписание = Расписание;
			
			// Пользователь рег. задания.
			
			// Имя пользователя
			РегламентноеЗадание.ИмяПользователя = ИмяПользователя;
			
			РегламентноеЗадание.Использование = ИспользованиеРегЗадания;
			
			РегламентноеЗадание.КоличествоПовторовПриАварийномЗавершении = 3;
			РегламентноеЗадание.ИнтервалПовтораПриАварийномЗавершении    = 10;
			
			
			РегламентноеЗадание.Записать();
			
			ИдентификаторРегЗадания = Строка(РегламентноеЗадание.УникальныйИдентификатор);

			
			// Параметры рег. задания.							
			СтруктураПараметровМетодаРегЗадания = Новый Структура("Организация,ВидОперацииРегламентногоЗадания,Сертификат,Ключ,Пароль,КоличествоФоновыхПроцессов, 
																		|НаименованиеФоновогоПроцесса, ВидОперацииРегламентногоЗадания,
																		|ТаблицаНеобходимыхПодписейШифрования, НастройкиСертификатаУстановлены"
																	, Организация
																	, ВидОперацииРегламентногоЗадания
																	, Сертификат
																	, Ключ
																	, Пароль
																	, ?(КоличествоФоновыхПроцессов = 0, 1, КоличествоФоновыхПроцессов)
																	, ИдентификаторРегЗадания
																	, ВидОперацииРегламентногоЗадания
																	, ТаблицаНеобходимыхПодписейШифрования.Выгрузить()
																	, НастройкиСертификатаУстановлены);
				
					
			МассивПараметров = Новый Массив;
			
			МассивПараметров.Добавить(СтруктураПараметровМетодаРегЗадания);
			
			РегламентноеЗадание.Параметры = МассивПараметров;
			
			РегламентноеЗадание.Записать();
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Отказ = Истина;
		КонецПопытки;
		
	ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ОбработкаИсходящихДокументов") Тогда 
		
		Попытка
			РегламентноеЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.скEDI_ОтправкаДокументов);
			
			РегламентноеЗадание.Наименование = НСтр("ru = 'Обработка исходящих документов (FlyDoc)'; uk = 'Обробка вихідних документів (FlyDoc)'");
			
			// Уникальность рег. задания в пределах метаданных.
			РегламентноеЗадание.Ключ = Строка(Новый УникальныйИдентификатор);
				 
			РегламентноеЗадание.Расписание = Расписание;
			
			// Пользователь рег. задания.
			
			// Имя пользователя
			РегламентноеЗадание.ИмяПользователя = ИмяПользователя;
			
			РегламентноеЗадание.Использование = ИспользованиеРегЗадания;
			
			РегламентноеЗадание.КоличествоПовторовПриАварийномЗавершении = 3;
			РегламентноеЗадание.ИнтервалПовтораПриАварийномЗавершении    = 10;
			
			
			РегламентноеЗадание.Записать();
			
			ИдентификаторРегЗадания = Строка(РегламентноеЗадание.УникальныйИдентификатор);

			
			// Параметры рег. задания.						
			СтруктураПараметровМетодаРегЗадания = Новый Структура("Организация,ВидОперацииРегламентногоЗадания,КоличествоФоновыхПроцессов, 
																		|КоличествоДокументовВОдномПотоке, НаименованиеФоновогоПроцесса, ВидОперацииРегламентногоЗадания,
																		|ТаблицаНеобходимыхПодписейШифрования, ТаблицаНеобходимыхПодписей, 
																		|НастройкиСертификатаУстановлены, ПериодВыборки, ВидыЭлектронногоДокумента, ОтборДокументовПоЗапросу, ТекстЗапроса"
																	, Организация
																	, ВидОперацииРегламентногоЗадания
																	, ?(КоличествоФоновыхПроцессов = 0, 1, КоличествоФоновыхПроцессов)
																	, КоличествоДокументовВОдномПотоке
																	, ИдентификаторРегЗадания
																	, ВидОперацииРегламентногоЗадания
																	, ТаблицаНеобходимыхПодписейШифрования.Выгрузить()
																	, ТаблицаНеобходимыхПодписей.Выгрузить()
																	, НастройкиСертификатаУстановлены
																	, ПериодВыборки
																	, ВидыЭлектронногоДокумента
																	, ОтборДокументовПоЗапросу
																	, ТекстЗапроса);
			
			МассивПараметров = Новый Массив;
			
			МассивПараметров.Добавить(СтруктураПараметровМетодаРегЗадания);
			
			РегламентноеЗадание.Параметры = МассивПараметров;
			
			РегламентноеЗадание.Записать();
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Отказ = Истина;
		КонецПопытки;
	
	ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.РегистрацияНалоговыхДокументов") Тогда 
		
		Попытка
			РегламентноеЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.скEDI_РегистрацияНалоговыхДокументов);
			
			РегламентноеЗадание.Наименование = НСтр("ru = 'Регистрация налоговых документов (FlyDoc)'; uk = 'Реєстрація податкових документів (FlyDoc)'");
			
			// Уникальность рег. задания в пределах метаданных.
			РегламентноеЗадание.Ключ = Строка(Новый УникальныйИдентификатор);
				 
			РегламентноеЗадание.Расписание = Расписание;
			
			// Пользователь рег. задания.
			
			// Имя пользователя
			РегламентноеЗадание.ИмяПользователя = ИмяПользователя;
			
			РегламентноеЗадание.Использование = ИспользованиеРегЗадания;
			
			РегламентноеЗадание.КоличествоПовторовПриАварийномЗавершении = 3;
			РегламентноеЗадание.ИнтервалПовтораПриАварийномЗавершении    = 10;
			
			
			РегламентноеЗадание.Записать();
			
			ИдентификаторРегЗадания = Строка(РегламентноеЗадание.УникальныйИдентификатор);

			
			// Параметры рег. задания.						
			СтруктураПараметровМетодаРегЗадания = Новый Структура("Организация,ВидОперацииРегламентногоЗадания,КоличествоФоновыхПроцессов, 
																		|КоличествоДокументовВОдномПотоке, НаименованиеФоновогоПроцесса, ВидОперацииРегламентногоЗадания,
																		|ТаблицаНеобходимыхПодписейШифрования, ТаблицаНеобходимыхПодписей, 
																		|НастройкиСертификатаУстановлены, ПериодВыборки, ВидыЭлектронногоДокумента,
																		|ОтправлятьНалоговыеДокументыНаРегистрациюПовторно,ИнтервалПовторнойОтправки"
																	, Организация
																	, ВидОперацииРегламентногоЗадания
																	, ?(КоличествоФоновыхПроцессов = 0, 1, КоличествоФоновыхПроцессов)
																	, КоличествоДокументовВОдномПотоке
																	, ИдентификаторРегЗадания
																	, ВидОперацииРегламентногоЗадания
																	, ТаблицаНеобходимыхПодписейШифрования.Выгрузить()
																	, ТаблицаНеобходимыхПодписей.Выгрузить()
																	, НастройкиСертификатаУстановлены
																	, ПериодВыборки
																	, ВидыЭлектронногоДокумента
																	, ОтправлятьНалоговыеДокументыНаРегистрациюПовторно,ИнтервалПовторнойОтправки);
			
			МассивПараметров = Новый Массив;
			
			МассивПараметров.Добавить(СтруктураПараметровМетодаРегЗадания);
			
			РегламентноеЗадание.Параметры = МассивПараметров;
			
			РегламентноеЗадание.Записать();
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Отказ = Истина;
		КонецПопытки;
	
	ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ОтправкаЗарегистрированныхНалоговыхДокументовКонтрагенту") Тогда 
		
		Попытка
			РегламентноеЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.скEDI_ОтправкаЗарегистрированныхНалоговыхДокументовКонтрагенту);
			
			РегламентноеЗадание.Наименование = НСтр("ru = 'Отправка зарегистрированных Налоговых документов Контрагенту (FlyDoc)'; uk = 'Відправка зареєстрованих Податкових документів Контрагенту (FlyDoc)'");
			
			// Уникальность рег. задания в пределах метаданных.
			РегламентноеЗадание.Ключ = Строка(Новый УникальныйИдентификатор);
				 
			РегламентноеЗадание.Расписание = Расписание;
			
			// Пользователь рег. задания.
			
			// Имя пользователя
			РегламентноеЗадание.ИмяПользователя = ИмяПользователя;
			
			РегламентноеЗадание.Использование = ИспользованиеРегЗадания;
			
			РегламентноеЗадание.КоличествоПовторовПриАварийномЗавершении = 3;
			РегламентноеЗадание.ИнтервалПовтораПриАварийномЗавершении    = 10;
			
			
			РегламентноеЗадание.Записать();
			
			ИдентификаторРегЗадания = Строка(РегламентноеЗадание.УникальныйИдентификатор);

			
			// Параметры рег. задания.						
			СтруктураПараметровМетодаРегЗадания = Новый Структура("Организация,ВидОперацииРегламентногоЗадания,КоличествоФоновыхПроцессов, 
																		|КоличествоДокументовВОдномПотоке, НаименованиеФоновогоПроцесса, ВидОперацииРегламентногоЗадания,
																		|ТаблицаНеобходимыхПодписейШифрования, ТаблицаНеобходимыхПодписей, 
																		|НастройкиСертификатаУстановлены, ПериодВыборки, ВидыЭлектронногоДокумента"
																	, Организация
																	, ВидОперацииРегламентногоЗадания
																	, ?(КоличествоФоновыхПроцессов = 0, 1, КоличествоФоновыхПроцессов)
																	, КоличествоДокументовВОдномПотоке
																	, ИдентификаторРегЗадания
																	, ВидОперацииРегламентногоЗадания
																	, ТаблицаНеобходимыхПодписейШифрования.Выгрузить()
																	, ТаблицаНеобходимыхПодписей.Выгрузить()
																	, НастройкиСертификатаУстановлены
																	, ПериодВыборки
																	, ВидыЭлектронногоДокумента);
			
			МассивПараметров = Новый Массив;
			
			МассивПараметров.Добавить(СтруктураПараметровМетодаРегЗадания);
			
			РегламентноеЗадание.Параметры = МассивПараметров;
			
			РегламентноеЗадание.Записать();
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Отказ = Истина;
		КонецПопытки;
	
	ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.СверкаНалоговыхДокументовЕРНН") Тогда 
		
		Попытка
			РегламентноеЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.скEDI_СверкаНалоговыхДокументовЕРНН);
			
			РегламентноеЗадание.Наименование = НСтр("ru = 'Сверка Налоговых документов с ЕРНН (FlyDoc)'; uk = 'Звірка Податкових документів з ЄРПН (FlyDoc)'");
			
			// Уникальность рег. задания в пределах метаданных.
			РегламентноеЗадание.Ключ = Строка(Новый УникальныйИдентификатор);
				 
			РегламентноеЗадание.Расписание = Расписание;
			
			// Пользователь рег. задания.
			
			// Имя пользователя
			РегламентноеЗадание.ИмяПользователя = ИмяПользователя;
			
			РегламентноеЗадание.Использование = ИспользованиеРегЗадания;
			
			РегламентноеЗадание.КоличествоПовторовПриАварийномЗавершении = 3;
			РегламентноеЗадание.ИнтервалПовтораПриАварийномЗавершении    = 10;
			
			
			РегламентноеЗадание.Записать();
			
			ИдентификаторРегЗадания = Строка(РегламентноеЗадание.УникальныйИдентификатор);

			
			// Параметры рег. задания.						
			СтруктураПараметровМетодаРегЗадания = Новый Структура("Организация,ВидОперацииРегламентногоЗадания,КоличествоФоновыхПроцессов, 
																		|КоличествоДокументовВОдномПотоке, НаименованиеФоновогоПроцесса, ВидОперацииРегламентногоЗадания,
																		|ТаблицаНеобходимыхПодписейШифрования, ТаблицаНеобходимыхПодписей, 
																		|НастройкиСертификатаУстановлены, ПериодС"
																	, Организация
																	, ВидОперацииРегламентногоЗадания
																	, ?(КоличествоФоновыхПроцессов = 0, 1, КоличествоФоновыхПроцессов)
																	, КоличествоДокументовВОдномПотоке
																	, ИдентификаторРегЗадания
																	, ВидОперацииРегламентногоЗадания
																	, ТаблицаНеобходимыхПодписейШифрования.Выгрузить()
																	, ТаблицаНеобходимыхПодписей.Выгрузить()
																	, НастройкиСертификатаУстановлены
																	, ПериодС);
			
			МассивПараметров = Новый Массив;
			
			МассивПараметров.Добавить(СтруктураПараметровМетодаРегЗадания);
			
			РегламентноеЗадание.Параметры = МассивПараметров;
			
			РегламентноеЗадание.Записать();
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Отказ = Истина;
		КонецПопытки;
		
	ИначеЕсли ВидОперацииРегламентногоЗадания = ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ОтправкаЗапросаНаПолучениеЛимитаРегистрацииВЕРНН") Тогда 
		
		Попытка
			РегламентноеЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.скEDI_ОтправкаЗапросаНаПолучениеЛимитаРегистрацииВЕРНН);
			
			РегламентноеЗадание.Наименование = НСтр("ru = 'Отправка запроса на получение лимита регистрации в ЕРНН (FlyDoc)'; uk = 'Відправка запиту на отримання ліміту реєстрації в ЄРНН (FlyDoc)'");
			
			// Уникальность рег. задания в пределах метаданных.
			РегламентноеЗадание.Ключ = Строка(Новый УникальныйИдентификатор);
				 
			РегламентноеЗадание.Расписание = Расписание;
			
			// Пользователь рег. задания.
			
			// Имя пользователя
			РегламентноеЗадание.ИмяПользователя = ИмяПользователя;
			
			РегламентноеЗадание.Использование = ИспользованиеРегЗадания;
			
			РегламентноеЗадание.КоличествоПовторовПриАварийномЗавершении = 3;
			РегламентноеЗадание.ИнтервалПовтораПриАварийномЗавершении    = 10;
			
			
			РегламентноеЗадание.Записать();
			
			ИдентификаторРегЗадания = Строка(РегламентноеЗадание.УникальныйИдентификатор);

			
			// Параметры рег. задания.						
			СтруктураПараметровМетодаРегЗадания = Новый Структура("Организация,ВидОперацииРегламентногоЗадания,КоличествоФоновыхПроцессов, 
																		|КоличествоДокументовВОдномПотоке, НаименованиеФоновогоПроцесса, ВидОперацииРегламентногоЗадания,
																		|ТаблицаНеобходимыхПодписейШифрования, ТаблицаНеобходимыхПодписей, 
																		|НастройкиСертификатаУстановлены"
																	, Организация
																	, ВидОперацииРегламентногоЗадания
																	, ?(КоличествоФоновыхПроцессов = 0, 1, КоличествоФоновыхПроцессов)
																	, КоличествоДокументовВОдномПотоке
																	, ИдентификаторРегЗадания
																	, ВидОперацииРегламентногоЗадания
																	, ТаблицаНеобходимыхПодписейШифрования.Выгрузить()
																	, ТаблицаНеобходимыхПодписей.Выгрузить()
																	, НастройкиСертификатаУстановлены);
			
			МассивПараметров = Новый Массив;
			
			МассивПараметров.Добавить(СтруктураПараметровМетодаРегЗадания);
			
			РегламентноеЗадание.Параметры = МассивПараметров;
			
			РегламентноеЗадание.Записать();
			
		Исключение
			Сообщить(ОписаниеОшибки());
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЗаголовокКнопкиНастройкиСертификатов()
	
	Если НастройкиСертификатаУстановлены Тогда 
		Элементы["скEDI_НастроитьСертификаты"].Заголовок = НСтр("ru = 'Настроено'; uk = 'Налаштовано'");
	Иначе	
		Элементы["скEDI_НастроитьСертификаты"].Заголовок = НСтр("ru = 'Ввести данные секретного ключа'; uk = 'Ввести данні секретного ключа'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы = Истина Тогда
		Если Модифицированность Тогда
			ТекстПредупреждения = НСтр("ru = 'В форме'; uk = 'В формі'");
			Если ЭтаФорма.Заголовок = "" Тогда
				ТекстПредупреждения = ТекстПредупреждения
				+ " """
				+ НСтр("ru = 'Регламентированное задание'; uk = 'Регламентоване завдання'");
			Иначе
				ТекстПредупреждения = ТекстПредупреждения
				+ " """
				+ ЭтаФорма.Заголовок;
			КонецЕсли;
			ТекстПредупреждения = ТекстПредупреждения
			+ """ "
			+ НСтр("ru = 'есть не сохраненная информация'; uk = 'є не збережена інформація'");
			
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Если Модифицированность Тогда
			Если ЗакрытиеРазрешеноКак = Неопределено Тогда
				ТекстВопроса = НСтр("ru = 'В форме'; uk = 'В формі'");
				Если ЭтаФорма.Заголовок = "" Тогда
					ТекстВопроса = ТекстВопроса
					+ " """
					+ НСтр("ru = 'Регламентированное задание'; uk = 'Регламентоване завдання'");
				Иначе
					ТекстВопроса = ТекстВопроса
					+ " """
					+ ЭтаФорма.Заголовок;
				КонецЕсли;
				ТекстВопроса = ТекстВопроса
				+ """ "
				+ НСтр("ru = 'есть не сохраненная информация'; uk = 'є не збережена інформація'")
				+ "!";
				ТекстВопроса = ТекстВопроса
				+ Символы.ПС
				+ НСтр("ru = 'Сохранить?'; uk = 'Зберегти?'");
		        ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтаФорма), ТекстВопроса,  РежимДиалогаВопрос.ДаНетОтмена);
		        Отказ = Истина;
			ИначеЕсли ЗакрытиеРазрешеноКак = КодВозвратаДиалога.Да Тогда
				ЗаписатьРегЗадание(Отказ);
				//ИнициализироватьСохранениеДанныхЭлектронногоДокумента();
			ИначеЕсли ЗакрытиеРазрешеноКак = КодВозвратаДиалога.Нет Тогда
				
			ИначеЕсли ЗакрытиеРазрешеноКак = КодВозвратаДиалога.Отмена Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		//Если не Отказ Тогда
		//	Если ЗначениеЗаполнено(КлючУникальности) Тогда
		//		ОбновитьДанныеВСоответствииФормОтображенияЭлектронныхДокументовНаСервере(КлючУникальности, Неопределено, "");
		//	КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗакрытиеРазрешеноКак = РезультатВопроса;
		Закрыть();
    ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ЗакрытиеРазрешеноКак = РезультатВопроса;
		Закрыть();
	Иначе
		ЗакрытиеРазрешеноКак = Неопределено;
    КонецЕсли;	
КонецПроцедуры






	
