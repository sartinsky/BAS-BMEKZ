
////////////////////////////////////////////////////////////////////////////////
// ОбработчикиСобытийФормы

// Процедура - При создании на сервере.
//
// Параметры:
//  Отказ				 - Булево - признак отказа.
//  СтандартнаяОбработка - Булево - признак стандартной обработки. 
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НеобходимЗапускМенеджераФоновыхЗаданий = скEDI_ОбщегоНазначения.ИнформационнаяБазаФайловая()
											И НЕ скEDI_ОбщегоНазначения.ЭтоПлатформа83БезРежимаСовместимости();
											

	// В файловых версиях до 8.3.3. для обработки фоновых заданий должен быть запущен специальный сеанс.
	Если НеобходимЗапускМенеджераФоновыхЗаданий Тогда 
		Попытка
			ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ", ""));
		Исключение
			 Сообщить(НСтр("ru = 'Менеджер фоновых заданий не активен. Запустите сеанс <пользователя для запуска рег. заданий>'; uk = 'Менеджер фонових задань не активний. Запустіть сеанс <користувач для запуску рег. завдань>'"));
			 Отказ = Истина;
			 Возврат;
		КонецПопытки;	
	КонецЕсли;	
	
	// Обновление спика рег. заданий (FlyDoc)
	ОбновитьСписокРегламентныхЗаданий();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - Добавить новое рег. задание.
//
// Параметры:
//  Команда	 - Команда формы - команда добавления рег. задания. 
//
&НаКлиенте
Процедура ДобавитьНовоеРегЗадание(Команда)
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ПолучениеВходящихСообщений"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ОбработкаИсходящихДокументов"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.РегистрацияНалоговыхДокументов"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ОтправкаЗарегистрированныхНалоговыхДокументовКонтрагенту"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.СверкаНалоговыхДокументовЕРНН"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.скEDI_ВидыОперацийРегламентныхЗаданий.ОтправкаЗапросаНаПолучениеЛимитаРегистрацииВЕРНН"));
	
	Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда		
		ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент(НСтр("ru = 'Выберите вид операции регламентного задания'; uk = 'Виберіть вид операції регламентного завдання'"));
		ПродолжитьДобавлениеРегЗадания(ВыбранныйЭлемент);
	Иначе		
		скEDI_ОткрытиеФормБезМодальности.ПоказатьСписокВыбораВидаРегЗадания("ПродолжитьДобавлениеРегЗадания" , СписокВыбора ,ЭтаФорма, Неопределено);		
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьДобавлениеРегЗадания(ВыбранныйЭлемент , ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		//Сообщить(НСтр("ru = 'Вид операции не выбран.'; uk = 'Вид операції не вибрано.'"));
	Иначе
		
		ПараметрыОткрытия = Новый Структура("СозданиеНовогоЗадания,ВидОперацииРегламентногоЗадания" , Истина, ВыбранныйЭлемент.Значение);
     	ОткрытьФорму("Обработка.скEDI_МониторРегламентныхЗаданий.Форма.ФормаРегламентногоЗадания" , ПараметрыОткрытия);
		
	КонецЕсли;
	
КонецПроцедуры	


// Процедура - Обновить список рег. заданий.
//
// Параметры:
//  Команда	 - Команда формы - команда обновления рег. заданий. 
//
&НаКлиенте
Процедура ОбновитьСписокРегЗаданий(Команда)
	ОбновитьСписокРегламентныхЗаданий();		
КонецПроцедуры

// Процедура - Удалить рег. задание.
//
// Параметры:
//  Команда	 - 	КомандаФормы - Команда удаления рег. задания текущей строки.
//
&НаКлиенте
Процедура УдалитьРегЗадание(Команда)
	
	ТекСтрока = Элементы.ТаблицаРегламентныеЗадания.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда
		
		Если скEDI_ОбщегоНазначения.ЭтоПлатформа82() Тогда
			Результат = Вопрос("Удалить данное регламентированное задание?", РежимДиалогаВопрос.ДаНет);	
			
			Если Результат = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
			
			УдалитьРегЗаданиеСервер(ТекСтрока.Идентификатор);
			ОбновитьСписокРегламентныхЗаданий();	
		Иначе
			скEDI_ОткрытиеФормБезМодальности.ПоказатьВопросБезМодальности("ВопросУдалитьЗаданиеЗавершение", ЭтаФорма, ТекСтрока, "Удалить данное регламентированное задание?", РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросУдалитьЗаданиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт 
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		УдалитьРегЗаданиеСервер(ДополнительныеПараметры.Идентификатор);
		ОбновитьСписокРегламентныхЗаданий();	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьРегЗадание(Команда)
	ОткрытьФормуРегЗадания();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокФоновыхЗаданий_Нажатие(Команда)
	
	ТекСтрока = Элементы.ТаблицаРегламентныеЗадания.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда
		ОбновитьСписокФоновыхЗаданий(ТекСтрока.Идентификатор);		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФоновыеЗаданияПриАктивизацииСтроки(Элемент)
	ТекущаяСтрокаФоновыхЗаданий = Элементы.ТаблицаФоновыеЗадания.ТекущаяСтрока;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКПредОшибкеФоновыеЗадания(Команда)
	
	ТекСтрока = ТекущаяСтрокаФоновыхЗаданий;
	
	Пока Истина Цикл 
		
		ТекСтрока = ТекСтрока - 1;
		
		ДанныеСтроки = Элементы.ТаблицаФоновыеЗадания.ДанныеСтроки(ТекСтрока);
		
		Если ДанныеСтроки = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		
		Если ДанныеСтроки.ЕстьОшибка Тогда 
			Элементы.ТаблицаФоновыеЗадания.ТекущаяСтрока = ТекСтрока;
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСледОшибкеФоновыеЗадания(Команда)
	
	ТекСтрока = ТекущаяСтрокаФоновыхЗаданий;
	
	Пока Истина Цикл 
		
		ТекСтрока = ТекСтрока + 1;
		
		ДанныеСтроки = Элементы.ТаблицаФоновыеЗадания.ДанныеСтроки(ТекСтрока);
		
		Если ДанныеСтроки = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		
		Если ДанныеСтроки.ЕстьОшибка Тогда 
			Элементы.ТаблицаФоновыеЗадания.ТекущаяСтрока = ТекСтрока;
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФоновыеЗаданияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.ТаблицаФоновыеЗадания.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда
		ОткрытьФорму("Обработка.скEDI_МониторРегламентныхЗаданий.Форма.ФоновоеЗадание" , Новый Структура("ИдентификаторФоновогоЗадания"
																									, ТекСтрока.Идентификатор));		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОбработчикиСобытийЭлементовТаблицыФормы_ТаблицаРегламентныеЗадания

&НаКлиенте
Процедура ВыполнитьРегЗаданиеСейчас(Команда)
	
	ТекСтрока = Элементы.ТаблицаРегламентныеЗадания.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда 	
		ВыполнитьРегЗаданиеСервер(Новый Структура("Идентификатор" , ТекСтрока.Идентификатор));		
		ОбновитьСписокФоновыхЗаданий(ТекСтрока.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРегламентныеЗаданияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьФормуРегЗадания();		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРегламентныеЗаданияИспользованиеПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ТаблицаРегламентныеЗадания.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда 
		
		ПриИзмененииИспользованияРегЗадания(Новый Структура("Идентификатор,Использование" 
															,ТекСтрока.Идентификатор, ТекСтрока.Использование));
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРегламентныеЗаданияПриАктивизацииСтроки(Элемент)
	
	ТекСтрока = Элементы.ТаблицаРегламентныеЗадания.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда 
		ОбновитьСписокФоновыхЗаданий(ТекСтрока.Идентификатор);	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьФоновоеЗадание(Команда)
	
	
	ТекСтрока = Элементы.ТаблицаРегламентныеЗадания.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда 
		ОтменитьСписокФоновыхЗаданий(ТекСтрока.Идентификатор);	
	КонецЕсли;	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьФормуРегЗадания()
	
	ТекСтрока = Элементы.ТаблицаРегламентныеЗадания.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда 
		
		ПараметрыОткрытия = Новый Структура("СозданиеНовогоЗадания,ИдентификаторРегЗадания" , Ложь, ТекСтрока.Идентификатор);
		
		ОткрытьФорму("Обработка.скEDI_МониторРегламентныхЗаданий.Форма.ФормаРегламентногоЗадания" , ПараметрыОткрытия);
		
	КонецЕсли;
	
КонецПроцедуры	
	

&НаСервере
Процедура УдалитьРегЗаданиеСервер(Идентификатор)
	
	НачатьТранзакцию();
	
	Отказ = Ложь;
	
	Попытка
		
		РегЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(Идентификатор));
		
		РегЗадание.Удалить();
		
		
		Если НЕ Отказ Тогда 
			
			// очищаем настройки удаляемого рег. задания.
			НаборЗаписей = РегистрыСведений.скEDI_ДеталиВыполненияРегЗаданий.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИдентификаторРегЗадания.Установить(Идентификатор);
			НаборЗаписей.Записать(Истина);
			
		КонецЕсли;
		
	Исключение
		Отказ = Истина;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если Отказ Тогда 
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьСписокРегламентныхЗаданий()
		
	ТаблицаРегламентныеЗадания.Очистить();
	
	// Отбор по рег. заданиям подсистемы FlyDoc. Предопределенные не отображаем - они просто шаблоны.
	Отбор = Новый Структура("Метаданные,Предопределенное" , Метаданные.РегламентныеЗадания.скEDI_ПолучениеВходящихСообщений, Ложь);
	Регламентные = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
	ОбновитьСписокРегламентныхЗаданийПоОтбору(Регламентные);
	
	Отбор = Новый Структура("Метаданные,Предопределенное" , Метаданные.РегламентныеЗадания.скEDI_ОтправкаДокументов, Ложь);
	Регламентные = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
	ОбновитьСписокРегламентныхЗаданийПоОтбору(Регламентные);
		
	Отбор = Новый Структура("Метаданные,Предопределенное" , Метаданные.РегламентныеЗадания.скEDI_РегистрацияНалоговыхДокументов, Ложь);
	Регламентные = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
	ОбновитьСписокРегламентныхЗаданийПоОтбору(Регламентные);
		
	Отбор = Новый Структура("Метаданные,Предопределенное" , Метаданные.РегламентныеЗадания.скEDI_ОтправкаЗарегистрированныхНалоговыхДокументовКонтрагенту, Ложь);
	Регламентные = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
	ОбновитьСписокРегламентныхЗаданийПоОтбору(Регламентные);
		
	Отбор = Новый Структура("Метаданные,Предопределенное" , Метаданные.РегламентныеЗадания.скEDI_СверкаНалоговыхДокументовЕРНН, Ложь);
	Регламентные = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
	ОбновитьСписокРегламентныхЗаданийПоОтбору(Регламентные);
	
	Отбор = Новый Структура("Метаданные,Предопределенное" , Метаданные.РегламентныеЗадания.скEDI_ОтправкаЗапросаНаПолучениеЛимитаРегистрацииВЕРНН, Ложь);
	Регламентные = РегламентныеЗадания.ПолучитьРегламентныеЗадания(Отбор);
	ОбновитьСписокРегламентныхЗаданийПоОтбору(Регламентные);
		
КонецПроцедуры	

&НаСервере
Процедура ОбновитьСписокРегламентныхЗаданийПоОтбору(Регламентные)
	
	Для Каждого Регламентное из Регламентные Цикл
		НоваяСтрока = ТаблицаРегламентныеЗадания.Добавить();
		
		НоваяСтрока.Наименование = Регламентное.Наименование;
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Наименование) Тогда 
			
			Если Регламентное.Метаданные <> Неопределено Тогда
				НоваяСтрока.Наименование = Регламентное.Метаданные.Наименование;	
			КонецЕсли;	
			
		КонецЕсли;	
		
		НоваяСтрока.Ключ             = Регламентное.Ключ;
		НоваяСтрока.Расписание       = Регламентное.Расписание;
		НоваяСтрока.ИмяПользователя  = Регламентное.ИмяПользователя;
		НоваяСтрока.Предопределенное = Регламентное.Предопределенное;
		НоваяСтрока.Использование    = Регламентное.Использование;
		НоваяСтрока.Идентификатор    = Регламентное.УникальныйИдентификатор;
		НоваяСтрока.Расписание       = Регламентное.Расписание;
		
		// Состояния рег. заданий - переделаено на работу с фоновыми создаваемыми "вручную" в процессе выполнения рег. задания.
		
		// Обновление списка фоновых процессов для данного рег задания
		ОбновитьСписокФоновыхЗаданий(Регламентное.УникальныйИдентификатор);
		
		ПоследнееЗадание = Регламентное.ПоследнееЗадание;
		
		// Заполняем данными последнего фонового задания		
		
		// Сортировка таблицы фоновыъх процессов по дате окончания.
		ТаблицаФоновыеЗадания.Сортировать("Начало УБЫВ, Конец УБЫВ");
		
		Если ПоследнееЗадание <> Неопределено Тогда			
			НоваяСтрока.ДатаНачала = ПоследнееЗадание.Начало;			
		КонецЕсли;
		
		
		// "Дата окончания" - последняя дата окончания. 
		Если ТаблицаФоновыеЗадания.Количество() > 0 Тогда 
			
			НоваяСтрока.СостояниеВыполнения = ТаблицаФоновыеЗадания[0].Состояние;
			НоваяСтрока.ДатаНачала          = ТаблицаФоновыеЗадания[0].Начало;
			НоваяСтрока.ДатаОкончания       = ТаблицаФоновыеЗадания[0].Конец;
			
		КонецЕсли;
		
		// Чтение параметров рег. задания.
		МассивПараметров = Регламентное.Параметры;
		
		// Для данного вида рег. заданий предполагается 1 параметро - Структура параметров.
		Если МассивПараметров.Количество() = 1 Тогда 
			
			СтруктураПараметров = МассивПараметров[0];
			
			Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда 
				
				// Организация
				Если СтруктураПараметров.Свойство("Организация") Тогда 
					НоваяСтрока.Организация = СтруктураПараметров.Организация; 	
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокФоновыхЗаданий(ИдентификаторРегЗадания)
		
	ТаблицаФоновыеЗадания.Очистить();
	
    СтруктураТекстовКнопокОшибокФоновых = Новый Структура;
	ФоновыеЗаданияТЗ                    = ТаблицаФоновыеЗадания.Выгрузить();
	
	РегЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ИдентификаторРегЗадания));
	
	Если РегЗадание <> Неопределено Тогда 
		
		// Фоновые процессы, которые запускаются рег. заданием самостоятельно.
		Отбор = Новый Структура("РегламентноеЗадание" , РегЗадание);
		Фоновые = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		
		ДополнитьТаблицуФоновыхЗаданий(Фоновые,ФоновыеЗаданияТЗ);
				
		// Фоновые процессы, запускаемые вручную
		Отбор = Новый Структура("Ключ" , "РучнойЗапуск_" + ИдентификаторРегЗадания);
		Фоновые = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		
		ДополнитьТаблицуФоновыхЗаданий(Фоновые,ФоновыеЗаданияТЗ);
		
		// Подчиненные фоновые процессы, запускаемые фоновыми процессами описанными выше.
		// их отличительная черта - наименование фонового процесса = УИД рег. задания.
		Отбор = Новый Структура("Наименование" , ИдентификаторРегЗадания);
		Фоновые = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		
		ДополнитьТаблицуФоновыхЗаданий(Фоновые,ФоновыеЗаданияТЗ);
		
		// Сортировка таблицы фоновыъх процессов по дате окончания.
		ФоновыеЗаданияТЗ.Сортировать("Начало УБЫВ, Конец УБЫВ");
		
		ТаблицаФоновыеЗадания.Загрузить(ФоновыеЗаданияТЗ);
				
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ОтменитьСписокФоновыхЗаданий(ИдентификаторРегЗадания)
			
	РегЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ИдентификаторРегЗадания));
	
	Если РегЗадание <> Неопределено Тогда 
		
		// Фоновые процессы, которые запускаются рег. заданием самостоятельно.
		Отбор = Новый Структура("РегламентноеЗадание,Состояние" , РегЗадание,СостояниеФоновогоЗадания.Активно);
		Фоновые = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		
		ОтменитьФоновыеЗадания(Фоновые);
				
		// Фоновые процессы, запускаемые вручную
		Отбор = Новый Структура("Ключ,Состояние" , "РучнойЗапуск_" + ИдентификаторРегЗадания,СостояниеФоновогоЗадания.Активно);
		Фоновые = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		
		ОтменитьФоновыеЗадания(Фоновые);
		
		// Подчиненные фоновые процессы, запускаемые фоновыми процессами описанными выше.
		// их отличительная черта - наименование фонового процесса = УИД рег. задания.
		Отбор = Новый Структура("Наименование,Состояние" , ИдентификаторРегЗадания,СостояниеФоновогоЗадания.Активно);
		Фоновые = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		
		ОтменитьФоновыеЗадания(Фоновые);
		
	КонецЕсли;
	
	ОбновитьСписокФоновыхЗаданий(ИдентификаторРегЗадания);
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьФоновыеЗадания(Фоновые)
	
	Для Каждого Фоновое из Фоновые Цикл
		
		Попытка
			Фоновое.Отменить();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
		
	КонецЦикла;
	
КонецПроцедуры	
	
&НаСервере
Процедура ДополнитьТаблицуФоновыхЗаданий(Фоновые,ФоновыеЗаданияТЗ)
	
	НомерСтроки = ФоновыеЗаданияТЗ.Количество();
	
	Для Каждого Фоновое из Фоновые Цикл
		
		НоваяСтрока = ФоновыеЗаданияТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока , Фоновое);
		
		НоваяСтрока.ПорядковыйНомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		
		Если Фоновое.ИнформацияОбОшибке <> Неопределено Тогда 
			НоваяСтрока.СообщенияПользователюИОписаниеИнформацииОбОшибке = Фоновое.ИнформацияОбОшибке.Описание;
			НоваяСтрока.ЕстьОшибка = Истина;
		КонецЕсли;
		
		// Дополнение информации сообщениями по данному фоновому заданию.
		МассивСообщенийИзФона = Фоновое.ПолучитьСообщенияПользователю();
		
		Если МассивСообщенийИзФона <> Неопределено Тогда
			Для Каждого Сообщение Из МассивСообщенийИзФона Цикл 
				Если ЗначениеЗаполнено(Сообщение.Текст) Тогда 
					НоваяСтрока.СообщенияПользователюИОписаниеИнформацииОбОшибке = 
					НоваяСтрока.СообщенияПользователюИОписаниеИнформацииОбОшибке + ?(ЗначениеЗаполнено(НоваяСтрока.СообщенияПользователюИОписаниеИнформацииОбОшибке)
					, Символы.ПС, "") + Сообщение.Текст;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;
		
		// Если в строке информации есть "ОШИБКА: " - нужно выделить данную строку, а сам текст убрать. 
		Если СтрЧислоВхождений(НоваяСтрока.СообщенияПользователюИОписаниеИнформацииОбОшибке, "ОШИБКА: ")> 0 Тогда 
			НоваяСтрока.ЕстьОшибка = Истина;
			НоваяСтрока.СообщенияПользователюИОписаниеИнформацииОбОшибке = СтрЗаменить(НоваяСтрока.СообщенияПользователюИОписаниеИнформацииОбОшибке
			,"ОШИБКА: ","");
		КонецЕсли;	
		
		НоваяСтрока.Идентификатор = Фоновое.УникальныйИдентификатор;
		НоваяСтрока.Ключ          = Фоновое.Ключ;
		
		// Заполнение структуры с данными тектов ошибок.
		Если НоваяСтрока.ЕстьОшибка Тогда 
			
			СтруктураТекстовСтроки = Новый Структура("ТекстПред,ТекстСлед", "НетДанных", "НетДанных");
			
			// Если есть предыдущая ошибка - ей запишем "текст след." а текущей строке "текст пред".
			Если СтруктураТекстовКнопокОшибокФоновых.Свойство("Строка_" + Формат(НомерПредыдущейСтрокиОшибки, "ЧГ=0")) Тогда 
				
				СтруктураТекстовКнопокОшибокФоновых["Строка_" + Формат(НомерПредыдущейСтрокиОшибки, "ЧГ=0")].ТекстСлед = НоваяСтрока.Начало;
				
				СтруктураТекстовСтроки.ТекстПред = ДатаПредыдущейОшибки; 
				
			КонецЕсли;	
			
			// Обновляем данные для следующей ошибки.
			НомерПредыдущейСтрокиОшибки = НоваяСтрока.ПорядковыйНомерСтроки;
			ДатаПредыдущейОшибки        = НоваяСтрока.Начало; 
			
			СтруктураТекстовКнопокОшибокФоновых.Вставить("Строка_" + Формат(НоваяСтрока.ПорядковыйНомерСтроки, "ЧГ=0"), СтруктураТекстовСтроки);
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытиеФормыРегЗадания" Тогда 
		
		// Обновлять или нет.
		Если Параметр Тогда 
			ОбновитьСписокРегламентныхЗаданий();	
		КонецЕсли;
		
	КонецЕсли;	
			
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииИспользованияРегЗадания(ТекущиеДанныеСтроки)

	Попытка
		
		РегЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ТекущиеДанныеСтроки.Идентификатор));			
		РегЗадание.Использование = ТекущиеДанныеСтроки.Использование;
		
		РегЗадание.Записать();
		
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРегЗаданиеСервер(ТекущиеДанные)
	
	Попытка
		
		// Проверим существующие активные фоновые задания по данному рег. заданию.
		РегЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ТекущиеДанные.Идентификатор));
		
		Отбор = Новый Структура("РегламентноеЗадание,Состояние" , РегЗадание, СостояниеФоновогоЗадания.Активно);
		
		Отказ = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор).Количество() > 0;
		
		РегЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ТекущиеДанные.Идентификатор));
		
		Отбор = Новый Структура("Ключ,Состояние" , "РучнойЗапуск_" + ТекущиеДанные.Идентификатор, СостояниеФоновогоЗадания.Активно);
		
		Отказ2 = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор).Количество() > 0;

		
		Если НЕ Отказ И НЕ Отказ2 Тогда 
			//скEDI_ОбщегоНазначения.скEDI_ПолучениеВходящихСообщений(РегЗадание.Параметры[0]);  //ТЕСТ
			//скEDI_ОбщегоНазначения.скEDI_ОтправкаДокументов(РегЗадание.Параметры[0]);  //ТЕСТ
			
			ФоновыеЗадания.Выполнить(РегЗадание.Метаданные.ИмяМетода , РегЗадание.Параметры, "РучнойЗапуск_" + ТекущиеДанные.Идентификатор );	
		Иначе 	
			Сообщить(НСтр("ru = 'Существуют активные фоновые задания по данному рег. заданию. Запуск невозможен.'; uk = 'Існують активні фонові задання по даному рег. завданню. Запуск неможливий.'"));
		КонецЕсли;	
		
	Исключение
		Сообщить(ОписаниеОшибки());	
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеОбОшибкахИзФоновыхЗаданий(ИндексТекущейСтроки)
	
	СтруктураПустойРезультат    = Новый Структура("ТекстПред, ТекстСлед", "НетДанных", "НетДанных");
			
	Если СтруктураТекстовКнопокОшибокФоновых.Свойство("Строка_" + Формат(ИндексТекущейСтроки, "ЧГ=0"))  Тогда 
		Возврат СтруктураТекстовКнопокОшибокФоновых["Строка_" + Формат(ИндексТекущейСтроки, "ЧГ=0")];
	Иначе	
		Возврат СтруктураПустойРезультат;
	КонецЕсли;
	
КонецФункции	



	
	


