#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция подготавливает параметры и запускает основную процедуру
// перепроведения в фоновом задании.
//
// Параметры:
//	ПараметрыПерепроведения - Структура с ключами:
//		- Организация - СправочникСсылка.Организации
//		- УникальныйИдентификаторФормы 
//		- МоментНачала - МоментВремени
//		- ДатаОкончания - Дата
//		- ОстанавливатьсяПоОшибке - Булево
//		- НеПерепроводитьРегламентныеДокументыЗаПоследнийМесяц - Булево,
//			Если Истина, то существующие за последний месяц периода перепроведения документы
//			помечаются как неактуальные, но после выполнения основного перепроведения не проводятся.
//		- ДополнительныеПараметры - 
//			Для возможности передачи произвольных данных, учитываемых в процедурах после завершения
//			длительной операции группового перепроведения. Эти данные возвращаются вместе с результатом
//			процедуры перепроведения.
//		- АдресХранилищаСОшибками - Строка
//			Адрес временного хранилища, в котором сохраняется отчет об ошибках при перепроведении.
//			Необходимо создавать временное хранилище в том сеансе работы с ИБ, в котором потом планируется
//			обращаться к нему для получения отчета. Если были обнаружены ошибки в процессе перепроведения,
//			то хранилище будет доступно до окончания сеанса, в котором оно создано, либо до явного удаления.
//
Функция ПараметрыПерепроведения() Экспорт

	Результат = Новый Структура();
	
	Результат.Вставить("Организация", 					Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("УникальныйИдентификаторФормы", 	Неопределено);
	Результат.Вставить("МоментНачала", 					Новый МоментВремени('0001-01-01', Неопределено));
	Результат.Вставить("ДатаОкончания", 				'0001-01-01');
	Результат.Вставить("ОстанавливатьсяПоОшибке", 		Ложь);
	Результат.Вставить("ЭтоЗакрытиеМесяца",				Ложь);
	Результат.Вставить("ЭтоПомощникПоУчетуНДС",			Ложь);
	Результат.Вставить("ДополнительныеПараметры", 		Неопределено);
	Результат.Вставить("АдресХранилищаСОшибками", 		"");
	
	Возврат Результат;

КонецФункции

// Функция подготавливает параметры и запускает основную процедуру
// перепроведения в фоновом задании.
//
// Параметры:
//	ПараметрыПерепроведения - структура, возвращаемая функцией ПараметрыПерепроведения()
//
Функция ЗапуститьПерепроведение(ПараметрыПерепроведения) Экспорт
	
	Если НЕ ПередНачаломПерепроведения(ПараметрыПерепроведения.Организация, ПараметрыПерепроведения.УникальныйИдентификаторФормы) Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Временное хранилище для отчета об ошибках необходимо создавать
	// в том же сеансе работы с пользователем, из которого требуется обращение к ним, 
	// т.к. временное хранилище очищается при завершении сеанса фонового задания.
	Если НЕ ЗначениеЗаполнено(ПараметрыПерепроведения.АдресХранилищаСОшибками) Тогда
		ПараметрыПерепроведения.Вставить("АдресХранилищаСОшибками", ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор()));
	КонецЕсли;

	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ПараметрыПерепроведения.УникальныйИдентификаторФормы);
		ПерепроведениеДокументов(ПараметрыПерепроведения, АдресХранилища);
		
		Результат = Новый Структура();
		Результат.Вставить("ЗаданиеВыполнено", 			Истина);
		Результат.Вставить("АдресХранилища", 			АдресХранилища);
		Результат.Вставить("ИдентификаторЗадания", 		Неопределено);
		Результат.Вставить("ДополнительныеПараметры", 	ПараметрыПерепроведения.ДополнительныеПараметры);

	Иначе
		НаименованиеЗадания = НСтр("ru='Групповое перепроведение документов';uk='Групове перепроведення документів'");
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			ПараметрыПерепроведения.УникальныйИдентификаторФормы,
			"Обработки.ГрупповоеПерепроведениеДокументов.ПерепроведениеДокументов",
			ПараметрыПерепроведения,
			НаименованиеЗадания);

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет подготовительные действия перед групповым перепроведением, 
// возвращает Истина, если успешно, иначе Ложь.
//
Функция ПередНачаломПерепроведения(Организация, УникальныйИдентификаторФормы) Экспорт

	Успешно = Истина;

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Попытка
				ЗаблокироватьДанныеДляРедактирования(Выборка.Организация,, УникальныйИдентификаторФормы);
			Исключение
				РазблокироватьДанныеДляРедактирования(, УникальныйИдентификаторФормы);
				Успешно = Ложь;
				Прервать;
			КонецПопытки;
		КонецЦикла;
	Иначе
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Организация, , УникальныйИдентификаторФормы);
		Исключение
			РазблокироватьДанныеДляРедактирования(, УникальныйИдентификаторФормы);
			Успешно = Ложь;
		КонецПопытки;
	КонецЕсли;

	Возврат Успешно;

КонецФункции

// Необходимо вызывать после завершения фонового задания группового перепроведения
// для снятия захваченных блокировок.
//
Процедура ПослеОкончанияПерепроведения(УникальныйИдентификаторФормы) Экспорт

	РазблокироватьДанныеДляРедактирования(, УникальныйИдентификаторФормы);

КонецПроцедуры

Процедура ПерепроведениеДокументов(Параметры, АдресХранилища) Экспорт
	
	РезультатОбработки = Новый Структура();
	РезультатОбработки.Вставить("ПроведеноДокументов", 				0);
	РезультатОбработки.Вставить("НеУдалосьПровести", 				0);
	РезультатОбработки.Вставить("ПроведениеПрервано", 				Ложь);
	РезультатОбработки.Вставить("ПоследовательностьВосстановлена", 	Ложь);
	РезультатОбработки.Вставить("ДополнительныеПараметры", 			Параметры.ДополнительныеПараметры);
	РезультатОбработки.Вставить("АдресХранилищаСОшибками", 			Параметры.АдресХранилищаСОшибками);

	ДатаНачала = Параметры.МоментНачала.Дата;

	ДатаОкончания = '00010101';
	Если ЗначениеЗаполнено(Параметры.ДатаОкончания) Тогда
		ДатаОкончания = КонецДня(Параметры.ДатаОкончания);
	КонецЕсли;

	МассивДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Истина);
	
	ТаблицаОрганизаций = Новый ТаблицаЗначений;
	ТаблицаОрганизаций.Колонки.Добавить("Организация", 									Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОрганизаций.Колонки.Добавить("ПроведенВХронологическойПоследовательности", 	Новый ОписаниеТипов("Булево"));
	ТаблицаОрганизаций.Колонки.Добавить("ЭтоПервыйДокументПоОрганизации", 				Новый ОписаниеТипов("Булево"));
	ТаблицаОрганизаций.Колонки.Добавить("НоваяДатаНарушенияПоследовательности",			Новый ОписаниеТипов("Дата"));
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Если МассивДоступныхОрганизаций.Найти(Параметры.Организация) <> Неопределено Тогда
			// Пользователь может выбрать в форме обработки группового перепроведения организацию,
			// которая доступна на просмотр в справочнике Организации, 
			// но к данным бухгалтерии которой у пользователя нет доступа.
			// В таком случае ничего не будем делать.
			// Иначе оставляем только ту организацию, которую явно выбрал пользователь.
			СтрокаОрганизации = ТаблицаОрганизаций.Добавить();
			СтрокаОрганизации.Организация = Параметры.Организация;
		КонецЕсли;
	Иначе
		Для Каждого ТекущаяОрганизация Из МассивДоступныхОрганизаций Цикл
			СтрокаОрганизации = ТаблицаОрганизаций.Добавить();
			СтрокаОрганизации.Организация = ТекущаяОрганизация;
		КонецЦикла;
	КонецЕсли;

	ТаблицаОрганизаций.ЗаполнитьЗначения(Истина, "ПроведенВХронологическойПоследовательности");
	ТаблицаОрганизаций.ЗаполнитьЗначения(Истина, "ЭтоПервыйДокументПоОрганизации");

	УстановитьПривилегированныйРежим(Истина);

	МассивОрганизацийДляПерепроведения = ТаблицаОрганизаций.ВыгрузитьКолонку("Организация");

	// Если даты не заданы, то определим их по фактическим данным.
	Если НЕ ЗначениеЗаполнено(ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ОпределитьГраницыПериода(МассивОрганизацийДляПерепроведения, ДатаНачала, ДатаОкончания);
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачальнаяСсылка", 	Параметры.МоментНачала.Ссылка);
	Запрос.УстановитьПараметр("Организации", 		МассивОрганизацийДляПерепроведения);
	
	ТекстЗапросаПервыйМесяц 		= "";
	ТекстЗапросаПоследующиеМесяцы 	= "";
	
	//НомераТаблиц = Новый Структура();
	//
	//СформироватьТекстЗапросаВсеДокументы(Параметры, ТекстЗапросаПервыйМесяц, ТекстЗапросаПоследующиеМесяцы, НомераТаблиц);
	ТекстЗапроса = ТекстЗапросаПоПервичнымДокументам();
	
	
	ТаблицаСообщений	= ПустаяТаблицаСообщенийПользователю();
	ПроведениеПрервано	= Ложь;
	
	// Хранит соответствие типов документов, входящих в последовательность,
	// Инициализируется в функции ДокументВходитВПоследовательность().
	КэшСоставДокументовПоследовательности = Неопределено;
	


		
		Запрос.УстановитьПараметр("ДатаНачала", 		ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", 		ДатаОкончания);
		
		
		// При наличии головных организаций и обособленных подразделений регламентные операции необходимо перепроводить
		// после выполнения перепроведения первичных документов по всем организациям, 
		// соблюдая последовательность закрытия. 
		
		
		Для Каждого СтрокаОрганизации Из ТаблицаОрганизаций Цикл

			ТекущаяОрганизация = СтрокаОрганизации.Организация;
			Запрос.УстановитьПараметр("Организация", 		ТекущаяОрганизация);
			
			Запрос.Текст = ТекстЗапроса;


		//
		//	ОтменитьПроведениеРегламентныхДокументовНДС(Параметры, РегламентныеДокументыНДС, ТаблицаСообщений);
			
			ВыборкаПоДокументам = Запрос.Выполнить().Выбрать();
			
			Пока ВыборкаПоДокументам.Следующий() Цикл

				Если СтрокаОрганизации.ЭтоПервыйДокументПоОрганизации Тогда

					МоментНарушения = РаботаСПоследовательностями.МоментНачалаПерепроведенияСУчетомИсключенныхМесяцев(
						ТекущаяОрганизация, ДатаОкончания);
						
					МоментДокумента = Новый МоментВремени(ВыборкаПоДокументам.Дата, ВыборкаПоДокументам.Ссылка);
						
					Если МоментНарушения <> Неопределено Тогда
						// Текущий документ является первым среди перепроводимых по организации.
						// Если он лежит позже момента нарушения последовательности, 
						// то считаем его тоже проведенным с нарушением последовательности.
						Если МоментДокумента.Сравнить(МоментНарушения) <= 0 Тогда
							СтрокаОрганизации.ПроведенВХронологическойПоследовательности = Истина;
						Иначе
							СтрокаОрганизации.ПроведенВХронологическойПоследовательности = Ложь;
							// Колонку НоваяДатаНарушенияПоследовательности в этом случае не заполняем, 
							// по этому признаку потом будет сдвигать последовательность в конце цикла перепроведения.
						КонецЕсли;
					КонецЕсли;

					СтрокаОрганизации.ЭтоПервыйДокументПоОрганизации = Ложь;

				КонецЕсли;
				
				ТекущаяДатаПроведения 	= ВыборкаПоДокументам.Дата;
				Успешно = Истина;
				
				Если ВыборкаПоДокументам.ДействиеСДокументом = 0 Тогда
					Если ДокументВходитВПоследовательность(ВыборкаПоДокументам.Ссылка, КэшСоставДокументовПоследовательности) Тогда
						Успешно =  ИсключитьИзПоследовательности(ВыборкаПоДокументам, ТаблицаСообщений);
					КонецЕсли;
					
				ИначеЕсли ВыборкаПоДокументам.ДействиеСДокументом = 1 И ВыборкаПоДокументам.РучнаяКорректировка Тогда
					Если ДокументВходитВПоследовательность(ВыборкаПоДокументам.Ссылка, КэшСоставДокументовПоследовательности) Тогда
					    Успешно = УстановитьСостояниеПоследовательности(ВыборкаПоДокументам, 
					    	Перечисления.СостоянияПроведенияВПоследовательности.ПроведенВПоследовательности, ТаблицаСообщений);
					КонецЕсли;

				Иначе
					Успешно = ПровестиПервичныйДокумент(ВыборкаПоДокументам, СтрокаОрганизации.ПроведенВХронологическойПоследовательности, ТаблицаСообщений);
				
				КонецЕсли;
						
				Если Успешно Тогда
					РезультатОбработки.ПроведеноДокументов = РезультатОбработки.ПроведеноДокументов + 1;
				Иначе
					// Если не смогли перепровести текущий документ, то все последующие документы автоматически
					// будут не в хронологической последовательности.
					Если СтрокаОрганизации.ПроведенВХронологическойПоследовательности Тогда
						Если ДокументВходитВПоследовательность(ВыборкаПоДокументам.Ссылка, КэшСоставДокументовПоследовательности) Тогда
							// Первый документ, на котором возникло нарушение последовательности, отмечаем это. 
							// Ошибки при проведении документов, не входящих в последовательность, будут выведены в общий список 
							// ошибок, но не влияют на саму последовательность.
							УстановитьСостояниеПоследовательности(ВыборкаПоДокументам, 
								Перечисления.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности, ТаблицаСообщений);
							
							СтрокаОрганизации.ПроведенВХронологическойПоследовательности = Ложь;
							// СтрокаОрганизации.НоваяДатаНарушенияПоследовательности здесь не устанавливаем, 
							// т.к. уже отметили нарушение границы самим текущим документом.
						КонецЕсли;
					КонецЕсли;
				
					РезультатОбработки.НеУдалосьПровести = РезультатОбработки.НеУдалосьПровести + 1;
					Если Параметры.ОстанавливатьсяПоОшибке Тогда
						ПроведениеПрервано = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла; // по первичным документам за месяца по организации

			Если ПроведениеПрервано Тогда
				// Прекращаем цикл по организациям
				Прервать;


			КонецЕсли;
			
		КонецЦикла; // по организации

		
		
		



	// По каждой организации для первого документа, следующего за тем, 
	// которые последний был проведен в хронологической последовательности,
	// установим признак нарушения его последовательности, т.к. сейчас перепровели все 
	// его предыдущие документы, и теперь с него надо начинать перепроведение.
	//
	// Также определим результат выполнения с учетом всех организаций.
 	ПроведенВХронологическойПоследовательности = Истина;
	
	Для Каждого СтрокаОрганизации Из ТаблицаОрганизаций Цикл
	
		НоваяДатаНарушенияПоследовательности = '0001-01-01';
		Если СтрокаОрганизации.ПроведенВХронологическойПоследовательности И НЕ ПроведениеПрервано Тогда
			// Все месяцы по организации были проведены успешно, 
			// поэтому в следующий раз начинаем со следующей даты.
			НоваяДатаНарушенияПоследовательности = ДатаОкончания + 1;
		Иначе
			// Если в начале цикла перепроведения последовательность была нарушена
			// в периодах, предшествующих периоду перепроведения, 
			// то НоваяДатаНарушенияПоследовательности будет пустой и тогда сдвигать последовательность не надо.
			НоваяДатаНарушенияПоследовательности = СтрокаОрганизации.НоваяДатаНарушенияПоследовательности;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(НоваяДатаНарушенияПоследовательности) Тогда
			РаботаСПоследовательностями.УстановитьПоследовательность(
				СтрокаОрганизации.Организация, ДатаНачала, НоваяДатаНарушенияПоследовательности);
		КонецЕсли;
	
		ПроведенВХронологическойПоследовательности = ПроведенВХронологическойПоследовательности
			И СтрокаОрганизации.ПроведенВХронологическойПоследовательности;
	КонецЦикла;
	
	РезультатОбработки.ПроведениеПрервано = ПроведениеПрервано;
	РезультатОбработки.ПоследовательностьВосстановлена = ПроведенВХронологическойПоследовательности;

	Если ТаблицаСообщений.Количество() > 0 Тогда

		// Если делали "по всем организация", то в заголовке ничего не показываем
		Если МассивОрганизацийДляПерепроведения.Количество() = 1 Тогда
			ОрганизацияДляЗаголовка = МассивОрганизацийДляПерепроведения[0];
		Иначе
			ОрганизацияДляЗаголовка = "";
		КонецЕсли;
	
		ТабДокумент = ВывестиСообщенияПользователю(ТаблицаСообщений, 
			РезультатОбработки, 
			ОрганизацияДляЗаголовка, 
			ДатаНачала, 
			ДатаОкончания);
		
		// Проиндексируем таблицу для поиска ней по КлючуДанных в форме ошибок.
		ТаблицаСообщений.Индексы.Добавить("КлючДанных");
		
		ОшибкиПерепроведения = Новый Структура();

		ОшибкиПерепроведения.Вставить("ТаблицаСообщенийПользователю", 	ТаблицаСообщений);
		ОшибкиПерепроведения.Вставить("ОтчетПоОшибкам", 				ТабДокумент);
		
		АдресХранилищаСОшибками = ПоместитьВоВременноеХранилище(ОшибкиПерепроведения, РезультатОбработки.АдресХранилищаСОшибками);
		
	Иначе
		// Если ошибок не возникло, то уничтожим временное хранилище для них, чтобы место не занимало.
		УдалитьИзВременногоХранилища(РезультатОбработки.АдресХранилищаСОшибками);
		РезультатОбработки.АдресХранилищаСОшибками = "";

	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатОбработки, АдресХранилища);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ВывестиСообщенияПользователю(ТаблицаСообщений, РезультатОбработки, ОрганизацияДляЗаголовка, ДатаНачала, ДатаОкончания)

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Отчет_об_ошибках_группового_перепроведения_документов";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ГрупповоеПерепроведениеДокументов.ОписаниеОшибок");
	
	ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");

	ОбластьШапка.Параметры.Организация = ОрганизацияДляЗаголовка;
	
	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		ОбластьШапка.Параметры.ПериодПерепроведения = ПредставлениеПериода(ДатаНачала, ДатаОкончания);
	ИначеЕсли ЗначениеЗаполнено(ДатаНачала) Тогда
		ОбластьШапка.Параметры.ПериодПерепроведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 - ...';uk='%1 - ...'"), Формат(ДатаНачала, ?(ДатаНачала = НачалоДня(ДатаНачала), "ДЛФ=Д", "ДЛФ=ДВ")));
	ИначеЕсли ЗначениеЗаполнено(ДатаОкончания) Тогда
		ОбластьШапка.Параметры.ПериодПерепроведения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='... - %1';uk='... - %1'"), 
			Формат(ДатаОкончания, ?(ДатаОкончания = НачалоДня(ДатаОкончания) 
										ИЛИ ДатаОкончания = КонецДня(ДатаОкончания), "ДЛФ=Д", "ДЛФ=ДВ")));
	КонецЕсли;

	ОбластьШапка.Параметры.ПроведеноДокументов 	= РезультатОбработки.ПроведеноДокументов;
	ОбластьШапка.Параметры.НеУдалосьПровести 	= РезультатОбработки.НеУдалосьПровести;

	ТабДокумент.Вывести(ОбластьШапка);	
	
	ОбластьГруппаОшибки 	= Макет.ПолучитьОбласть("ГруппаОшибки");
	ОбластьГруппаИнформация = Макет.ПолучитьОбласть("ГруппаИнформация");
	ОбластьСсылка 	= Макет.ПолучитьОбласть("Ссылка");
	ОбластьТекст2 	= Макет.ПолучитьОбласть("ТекстВторогоУровня");
	
	ТекущийКлючДанных = Неопределено;
	
	// Выводим в отчет в иерархическом виде:
	//	- группа сообщений (ошибки, информация) - если есть несколько типов сообщений
	//		- документ
	//  		- сообщения по этому документу
	
	ТаблицаСообщений.Сортировать("ТипСообщения, НомерСообщения");
	
	Сч = 0;
	КоличествоСообщений = ТаблицаСообщений.Количество();
	Если КоличествоСообщений > 0 Тогда
		ЕстьСообщенияРазныхТипов = ТаблицаСообщений[КоличествоСообщений - 1].ТипСообщения <> 0;
	КонецЕсли;
	
	Пока Сч < КоличествоСообщений Цикл
	
		СтрокаТаблицы = ТаблицаСообщений[Сч];
		
		ТекущийТипСообщения = СтрокаТаблицы.ТипСообщения;
		
		Если ЕстьСообщенияРазныхТипов Тогда
			Если ТекущийТипСообщения = 0 Тогда // Ошибка
				ТабДокумент.Вывести(ОбластьГруппаОшибки);
			Иначе
				ТабДокумент.Вывести(ОбластьГруппаИнформация);
			КонецЕсли;
		
			ТабДокумент.НачатьГруппуСтрок();
		КонецЕсли;
		
		НомерПП = 0;
		
		Пока Сч < КоличествоСообщений
			И ТекущийТипСообщения = ТаблицаСообщений[Сч].ТипСообщения Цикл
		
			НомерПП = НомерПП + 1;
			
			СтрокаТаблицы = ТаблицаСообщений[Сч];
			
			ТекущийКлючДанных = СтрокаТаблицы.КлючДанных;
		
		    // Выводим документ и все его сообщения
		    ОбластьСсылка.Параметры.НомерПП			= НомерПП;
	    	ОбластьСсылка.Параметры.Ссылка 			= СтрокаТаблицы.КлючДанных;
		    ОбластьСсылка.Параметры.Представление 	= Строка(СтрокаТаблицы.КлючДанных);
		    ТабДокумент.Вывести(ОбластьСсылка);
		    ТабДокумент.НачатьГруппуСтрок();
			
		    ВложенныйНомерПП = 0;
		    
		    Пока Сч < КоличествоСообщений
		    	И ТекущийТипСообщения = ТаблицаСообщений[Сч].ТипСообщения
		    	И ТекущийКлючДанных = ТаблицаСообщений[Сч].КлючДанных Цикл
		    
		    	ВложенныйНомерПП = ВложенныйНомерПП + 1;
		    	
		    	СтрокаТаблицы = ТаблицаСообщений[Сч];

	    		// Если документ сообщил о нескольких ошибках, то будем выводить для них субномера.
		    	Если ВложенныйНомерПП = 1 
		    		И (Сч = КоличествоСообщений - 1  // Это последнее сообщение в таблице или следующее сообщение относится к другом типу/документу.
		    				ИЛИ ТаблицаСообщений[Сч + 1].КлючДанных <> ТекущийКлючДанных
		    				ИЛИ ТаблицаСообщений[Сч + 1].ТипСообщения <> ТекущийТипСообщения)  Тогда
		    		ОбластьТекст2.Параметры.НомерПП = "";
		    	Иначе
		    		ОбластьТекст2.Параметры.НомерПП	= Формат(НомерПП, "ЧГ=") + "." + Формат(ВложенныйНомерПП, "ЧГ=");
		    	КонецЕсли;
		    	ОбластьТекст2.Параметры.Текст 				= СтрокаТаблицы.Сообщение.Текст;
		    	ОбластьТекст2.Параметры.Расшифровка 		= СтрокаТаблицы.Сообщение;
		    	
		    	ТабДокумент.Вывести(ОбластьТекст2);
		    	
		    	Сч = Сч + 1;
		    КонецЦикла; // по сообщениям одного документа
		    
		    ТабДокумент.ЗакончитьГруппуСтрок();
		
		КонецЦикла; // по документам
		
		Если ЕстьСообщенияРазныхТипов Тогда
	    	ТабДокумент.ЗакончитьГруппуСтрок();
	    КонецЕсли;
		
	КонецЦикла; // по типам сообщений
	
	Возврат ТабДокумент;

КонецФункции

Функция ПустаяТаблицаСообщенийПользователю()

	ОписаниеТиповЧисло = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(10, 0));

	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("КлючДанных");
	Результат.Колонки.Добавить("Сообщение");
	Результат.Колонки.Добавить("ТипСообщения",   ОписаниеТиповЧисло); // 0 - ошибка, 1 - информация
	Результат.Колонки.Добавить("НомерСообщения", ОписаниеТиповЧисло); // для последующей сортировки в пределах типа сообщения
	
	Возврат Результат;

КонецФункции

Процедура ДобавитьСообщениеПользователюВТаблицу(ТаблицаСообщений, НовоеСообщение, СсылкаНаДокумент, ЭтоОшибка)

	СтрокаТаблицы 					= ТаблицаСообщений.Добавить();
	Если НЕ ЗначениеЗаполнено(НовоеСообщение.КлючДанных) Тогда
		СтрокаТаблицы.КлючДанных 	= СсылкаНаДокумент;
		НовоеСообщение.КлючДанных	= СсылкаНаДокумент;
	Иначе
		СтрокаТаблицы.КлючДанных 	= НовоеСообщение.КлючДанных;
	КонецЕсли;
	СтрокаТаблицы.Сообщение 		= НовоеСообщение;
	СтрокаТаблицы.ТипСообщения 		= ?(ЭтоОшибка, 0, 1);
	СтрокаТаблицы.НомерСообщения	= ТаблицаСообщений.Количество();

КонецПроцедуры

Процедура ЗапомнитьСообщенияПользователю(ТаблицаСообщений, ТекстПричины, СсылкаНаДокумент, ЭтоОшибка = Истина)

	СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
	КоличествоСообщений = СообщенияПользователю.Количество();
	
	Если КоличествоСообщений > 0 Тогда
		Для ИндексСообщения = 0 По КоличествоСообщений - 1 Цикл
			ДобавитьСообщениеПользователюВТаблицу(ТаблицаСообщений, СообщенияПользователю[ИндексСообщения], СсылкаНаДокумент, ЭтоОшибка);
		КонецЦикла;
	ИначеЕсли ЭтоОшибка Тогда
		// Документ сам о себе ничего не сказал, поэтому выводим общий текст сообщения о том,
		// что возникла ошибка.
		Если ЗначениеЗаполнено(ТекстПричины) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Обработка документа %1 не выполнена по причине: 
|%2';uk='Обробка документа %1 не виконана по причині: 
|%2'"),
				Строка(СсылкаНаДокумент), ТекстПричины);
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='При обработке документа %1 возникла ошибка!';uk='При обробці документа %1 виникла помилка!'"),
				Строка(СсылкаНаДокумент));
		КонецЕсли;
	
		НовоеСообщение 				= Новый СообщениеПользователю();
		НовоеСообщение.КлючДанных 	= СсылкаНаДокумент;
		НовоеСообщение.Текст 		= ТекстСообщения;
		
		ДобавитьСообщениеПользователюВТаблицу(ТаблицаСообщений, НовоеСообщение, СсылкаНаДокумент, ЭтоОшибка);
	
	КонецЕсли;

КонецПроцедуры

Процедура ОпределитьГраницыПериода(МассивОрганизаций, ДатаНачала, ДатаОкончания)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", МассивОрганизаций);
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Хозрасчетный.Период
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Организация В(&Организации)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Хозрасчетный.Период";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаНачала = Выборка.Период;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Хозрасчетный.Период
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Организация В(&Организации)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Хозрасчетный.Период УБЫВ";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДатаОкончания = Выборка.Период;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ПровестиПервичныйДокумент(ВыборкаПоДокументам, ПроведенВХронологическойПоследовательности, ТаблицаСообщений)

	Успешно = Истина;

	Попытка
	
		// Обычное перепроведение документа
		ДокументОбъект = ВыборкаПоДокументам.Ссылка.ПолучитьОбъект();
		
		ДокументОбъект.ДополнительныеСвойства.Вставить("ГрупповоеПерепроведение", Истина);
		ДокументОбъект.ДополнительныеСвойства.Вставить("ПроведенВХронологическойПоследовательности", ПроведенВХронологическойПоследовательности);
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			// При проведении документ может выдать информационные сообщения, 
			// не мешающие проведению, запомним их для вывода в отчет.
			ЗапомнитьСообщенияПользователю(ТаблицаСообщений, "", ВыборкаПоДокументам.Ссылка, Ложь);
		Иначе
			Успешно = Ложь;
			ЗапомнитьСообщенияПользователю(ТаблицаСообщений, "", ВыборкаПоДокументам.Ссылка);
		КонецЕсли;
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ЗапомнитьСообщенияПользователю(ТаблицаСообщений, ТекстОшибки, ВыборкаПоДокументам.Ссылка);

		Успешно = Ложь;

	КонецПопытки;

	Возврат Успешно;

КонецФункции

Функция УстановитьСостояниеПоследовательности(ВыборкаПоДокументам, НовоеСостояние, ТаблицаСообщений)

	Успешно = Истина;

	НаборЗаписейПоследовательности = Последовательности.ДокументыОрганизаций.СоздатьНаборЗаписей();
	
	НачатьТранзакцию();
	Попытка
		РаботаСПоследовательностями.УстановитьБлокировкуНабораЗаписейПоследовательностиПоРегистратору(ВыборкаПоДокументам.Ссылка);
		
		НаборЗаписейПоследовательности.Отбор.Регистратор.Установить(ВыборкаПоДокументам.Ссылка, Истина);
		
		НаборЗаписейПоследовательности.Прочитать();
		ЕстьЗаписьПоОрганизации = Ложь;
		Для Каждого Движение Из НаборЗаписейПоследовательности Цикл
			Если Движение.Организация = ВыборкаПоДокументам.Организация Тогда
				Движение.СостояниеПроведения = НовоеСостояние;
				ЕстьЗаписьПоОрганизации = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьЗаписьПоОрганизации Тогда
			Движение = НаборЗаписейПоследовательности.Добавить();
			Движение.Период 		= ВыборкаПоДокументам.Дата;
			Движение.Регистратор	= ВыборкаПоДокументам.Ссылка;
			Движение.Организация	= ВыборкаПоДокументам.Организация;
			Движение.СостояниеПроведения = НовоеСостояние;
		КонецЕсли;
		
		НаборЗаписейПоследовательности.Записать();
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ОтменитьТранзакцию();
		
		ЗапомнитьСообщенияПользователю(ТаблицаСообщений, ТекстОшибки, ВыборкаПоДокументам.Ссылка);
		Успешно = Ложь;

	КонецПопытки;
	
	Возврат Успешно;

КонецФункции

Функция ИсключитьИзПоследовательности(ВыборкаПоДокументам, ТаблицаСообщений)

	Успешно = Истина;

	НаборЗаписейПоследовательности = Последовательности.ДокументыОрганизаций.СоздатьНаборЗаписей();

	НаборЗаписейПоследовательности.Отбор.Регистратор.Установить(ВыборкаПоДокументам.Ссылка);

	НачатьТранзакцию();
	Попытка
		РаботаСПоследовательностями.УстановитьБлокировкуНабораЗаписейПоследовательностиПоРегистратору(ВыборкаПоДокументам.Ссылка);
		
		НаборЗаписейПоследовательности.Прочитать();
		ВГраница = НаборЗаписейПоследовательности.Количество() - 1;
		Для Сч = 0 По ВГраница Цикл
			Движение = НаборЗаписейПоследовательности[ВГраница - Сч];
			Если Движение.Организация = ВыборкаПоДокументам.Организация Тогда
				НаборЗаписейПоследовательности.Удалить(Движение);
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписейПоследовательности.Записать();
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ОтменитьТранзакцию();
		
		ЗапомнитьСообщенияПользователю(ТаблицаСообщений, ТекстОшибки, ВыборкаПоДокументам.Ссылка);
		Успешно = Ложь;

	КонецПопытки;

	Возврат Успешно;

КонецФункции

Функция ТекстЗапросаПоПервичнымДокументам()

	ДокументыНеТребующиеПерепроведения = БезусловноИсключаемыеИзПерепроведенияДокументы();


	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Журнал.Период КАК Дата,
	|	Журнал.Регистратор КАК Ссылка,
	|	Журнал.Организация КАК Организация,
	|	ИСТИНА КАК РучнаяКорректировка,
	|	ВЫБОР
	|		КОГДА УстановкаЦенНоменклатуры.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДействиеСДокументом
	|ИЗ
	|	Последовательность.ДокументыОрганизаций КАК Журнал
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УстановкаЦенНоменклатуры КАК УстановкаЦенНоменклатуры
	|		ПО Журнал.Регистратор = УстановкаЦенНоменклатуры.Ссылка
	|ГДЕ
	|	Журнал.Организация = &Организация
	|	И Журнал.СостояниеПроведения = ЗНАЧЕНИЕ(Перечисление.СостоянияПроведенияВПоследовательности.ПроведенСНарушениемПоследовательности)
	|	И Журнал.Период >= &ДатаНачала И Журнал.Период <= &ДатаОкончания
	|";

	
	СписокДокументов = Новый СписокЗначений;
	
	Для Каждого МетаданныеДокумента Из Метаданные.Документы Цикл

		// У некоторых ролей нет прав на отдельные документы
		Если НЕ РольДоступна("ПолныеПрава") Тогда
			Если НЕ ПравоДоступа("Чтение", МетаданныеДокумента) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		ИмяДокумента = МетаданныеДокумента.Имя;

		//Отсекаем документы, которые не следует перепроводить
		Если ДокументыНеТребующиеПерепроведения.Свойство(ИмяДокумента) Тогда
			Продолжить;
		КонецЕсли;

		// Отсечь документы с префиксом Удалить
		Если Найти(МетаданныеДокумента.Имя, "Удалить") = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		// Отсечь документы с префиксом Устарело
		Если Найти(МетаданныеДокумента.Имя, "Устарело") = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если МетаданныеДокумента.Проведение <> Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			Продолжить;
		КонецЕсли;
		
		Если МетаданныеДокумента.Движения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("Организация") = Неопределено Тогда
			// Документы без организации могут быть добавлены на конкретном внедрении у пользователей,
			// но они не могут влиять на последовательность и учетные данные в регистрах, 
			// т.к. организация является ключевым измерением.
			// Поэтому такие документы не перепроводим.
			Продолжить;
		КонецЕсли;
		
		ЕстьРучнаяКорректировка = МетаданныеДокумента.Реквизиты.Найти("РучнаяКорректировка") <> Неопределено;
				
		
		ТекстЗапроса = ТекстЗапроса + ?(ЗначениеЗаполнено(ТекстЗапроса)," ОБЪЕДИНИТЬ ВСЕ ","") + " 
			|
			|ВЫБРАТЬ 
			|	Журнал.Дата КАК Дата,
			|	Журнал.Ссылка КАК Ссылка, 
			|	Журнал.Организация КАК Организация,
			|	" + ?(ЕстьРучнаяКорректировка, "РучнаяКорректировка", "ЛОЖЬ") + " КАК РучнаяКорректировка,
			|	ВЫБОР
			|		КОГДА Журнал.Проведен
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ДействиеСДокументом
			|ИЗ Документ." + ИмяДокумента + " КАК Журнал
			|ГДЕ 
			|	Журнал.Организация = &Организация  // Все оставшиеся в списке перепроводимых документы имеют реквизит Организация
			|	И Журнал.Дата >= &ДатаНачала И Журнал.Дата <= &ДатаОкончания";
			
			
			
			СписокДокументов.Добавить(ИмяДокумента);
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	Дата, 
	|	Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция возвращает список документов, которые в принципе не требуется перепроводить 
//
Функция БезусловноИсключаемыеИзПерепроведенияДокументы() Экспорт

	// Список безуcловно исключаемых из перепроведения документов
	// состоит из документов, которые не влияют на движения первичных документов
	// и операции закрытия месяца. 
	// В него не входят документы, для которых в метаданных свойство
	// Проведение = Запретить (например, ОперацияБух). 
	// Такие документы отсекаются в цикле построение текста запроса.

	Результат = Новый Структура();
	
	//Зарплатные и кадровые документы
	Результат.Вставить("ВводСведенийОбИндексированномДоходе");
	Результат.Вставить("ВедомостьНаВыплатуЗарплаты");
	Результат.Вставить("ВедомостьНаВыплатуЗарплатыВБанк");
	Результат.Вставить("ВедомостьНаВыплатуЗарплатыВКассу");
	Результат.Вставить("ЗаявлениеНаПрименениеЛьготы");
	Результат.Вставить("ИзменениеПараметровРасчетаИндексации");
	Результат.Вставить("ИзменениеПараметровРасчетаИндексацииПоДолжностям");
	Результат.Вставить("КомандировкиОрганизаций");
	Результат.Вставить("НачислениеЗарплаты");
	Результат.Вставить("ОтражениеЗарплатыВБухучете");
	Результат.Вставить("ОтражениеЗарплатыВУчете");
	Результат.Вставить("ОтражениеВзаиморасчетовСКонтрагентамиВ1ДФ");
	Если Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить() Тогда
		Результат.Вставить("ДепонированиеЗарплаты");
		Результат.Вставить("СписаниеДепонированнойЗарплаты");
	КонецЕсли;
	
	
	//Документы, не требующие перепроведения. Их движения не зависят от остатков
	Результат.Вставить("УстановкаГарантийныхСроковНалоговыйУчет");
	Результат.Вставить("УстановкаКоэффициентаПропорциональногоОтнесенияНДСНаКредит");
	Результат.Вставить("УстановкаПорядкаЗакрытияПодразделений");
	Результат.Вставить("УстановкаЦенНоменклатуры");

	

	Возврат Результат;

КонецФункции

Функция ДокументВходитВПоследовательность(СсылкаНаДокумент, КэшСоставДокументовПоследовательности)

	Если КэшСоставДокументовПоследовательности = Неопределено Тогда
		КэшСоставДокументовПоследовательности = Новый Соответствие;

		МетаданныеПоследовательности = Метаданные.Последовательности.ДокументыОрганизаций.Документы;
		
		Для Каждого МетаДок Из МетаданныеПоследовательности Цикл
		
			КэшСоставДокументовПоследовательности.Вставить(Тип("ДокументСсылка." + МетаДок.Имя), Истина);
		КонецЦикла;
	КонецЕсли;
	
	ТипДокумента = ТипЗнч(СсылкаНаДокумент);
	
	Результат = КэшСоставДокументовПоследовательности[ТипДокумента];
	Если Результат = Неопределено Тогда
		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецЕсли
