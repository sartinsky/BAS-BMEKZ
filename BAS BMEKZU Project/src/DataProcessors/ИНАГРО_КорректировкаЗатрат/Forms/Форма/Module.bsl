#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УправлениеФормой();
	
	ИнициализироватьКомпоновщикНастроек();

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ПеренестиВДокумент Тогда
		
		СтруктураВозврата = Новый Структура;
		
		СтрокаОтбора = "";
		АдресТЗ = ОбработатьИзменениеОтборовНаСервере(СтрокаОтбора);
		СтрокаОтбора = СтрЗаменить(СтрокаОтбора," И ","; ");
		СтрокаОтбора = СтрЗаменить(СтрокаОтбора,"Равно"," = ");
		СтрокаОтбора = СтрЗаменить(СтрокаОтбора,"Дорівнює"," = ");
		СтрокаОтбора = СтрЗаменить(СтрокаОтбора,"Не равно"," <> ");
		СтрокаОтбора = СтрЗаменить(СтрокаОтбора,"Не дорівнює"," <> ");
		
		Если Локализация.КодЯзыкаИнформационнойБазы() = "uk" Тогда
			СтрокаОтбора = СтрЗаменить(СтрокаОтбора,"В списке","В списку");
			СтрокаОтбора = СтрЗаменить(СтрокаОтбора,"В группе","В групі");
			СтрокаОтбора = СтрЗаменить(СтрокаОтбора,"Организация","Організація");
			СтрокаОтбора = СтрЗаменить(СтрокаОтбора,"СчетЗатрат","РахунокВитрат");
			СтрокаОтбора = СтрЗаменить(СтрокаОтбора,"Подразделение","Підрозділ");
			СтрокаОтбора = СтрЗаменить(СтрокаОтбора,"НоменклатурнаяГруппа","НоменклатурнаГрупа");
			СтрокаОтбора = СтрЗаменить(СтрокаОтбора,"СтатьяЗатрат","СтаттяВитрат");
			СтрокаОтбора = СтрЗаменить(СтрокаОтбора,"НалоговоеНазначениеДоходовИЗатрат","ПодатковеПризначенняВитрат");
		КонецЕсли;

		СтруктураВозврата.Вставить("АдресТЗ", АдресТЗ);
		СтруктураВозврата.Вставить("ИнформацияОтбор", СтрокаОтбора);
		
		Оповестить("ГрупповоеЗаполнение1", СтруктураВозврата, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьЗаполнениеДокумента(Команда)
	
	ПеренестиВДокумент = Истина;	
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеФормой()
	
	Параметры.Свойство("ДатаАктуальности", Объект.ДатаАктуальности);
	Параметры.Свойство("Организация",      Организация);	
		
КонецПроцедуры    

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек()
	
	ТекстЗапроса = ПолучитьТекстЗапроса();
	
	СхемаКомпоновкиДанных = СхемаКомпоновкиДанных(ТекстЗапроса);
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор)));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Параметры.Организация;  
	ЭлементОтбора.Использование = Истина; 
	
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетЗатрат");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Ложь; 
	
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Ложь; 
	
	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НоменклатурнаяГруппа");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Ложь; 

	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатьяЗатрат");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Ложь; 

	ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НалоговоеНазначениеДоходовИЗатрат");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Ложь; 	
		
КонецПроцедуры

&НаСервере
Функция СхемаКомпоновкиДанных(ТекстЗапроса)
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.Имя = "НаборДанных1";
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции

&НаСервере
Функция ОбработатьИзменениеОтборовНаСервере(СтрокаОтбора)
	
	ТекстЗапроса = ПолучитьТекстЗапроса();
	
	СхемаКомпоновкиДанных = СхемаКомпоновкиДанных(ТекстЗапроса);
	
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(КомпоновщикНастроек.Настройки);
	
	Для Каждого Элемент Из КомпоновщикНастроекКомпоновкиДанных.Настройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
		Если Не Элемент.Папка Тогда
			Поле = КомпоновщикНастроекКомпоновкиДанных.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			Поле.Использование = Истина;
			Поле.Поле = Элемент.Поле;
		КонецЕсли;
	КонецЦикла;
	
	Группа = КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Группа.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));  	
	
	НастройкиКомпоновщика = КомпоновщикНастроекКомпоновкиДанных.Настройки;
	ПараметрыНастройки = НастройкиКомпоновщика.ПараметрыДанных;	
	
	НайденноеЗначениеПараметра = ПараметрыНастройки.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Дата"));
	Если НайденноеЗначениеПараметра <> Неопределено Тогда
		НайденноеЗначениеПараметра.Использование = Истина;
		НайденноеЗначениеПараметра.Значение = Объект.ДатаАктуальности;
	КонецЕсли;
	
	НайденноеЗначениеПараметра = ПараметрыНастройки.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Организация"));
	Если НайденноеЗначениеПараметра <> Неопределено Тогда
		НайденноеЗначениеПараметра.Использование = Истина;
		НайденноеЗначениеПараметра.Значение = Организация;
	КонецЕсли;
	
	НайденноеЗначениеПараметра = ПараметрыНастройки.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СчетЗатрат"));
	Если НайденноеЗначениеПараметра <> Неопределено Тогда
		НайденноеЗначениеПараметра.Использование = Истина;
		НайденноеЗначениеПараметра.Значение = СчетЗатрат;
	КонецЕсли;
	
	НайденноеЗначениеПараметра = ПараметрыНастройки.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Подразделение"));
	Если НайденноеЗначениеПараметра <> Неопределено Тогда
		НайденноеЗначениеПараметра.Использование = Истина;
		НайденноеЗначениеПараметра.Значение = Подразделение;
	КонецЕсли;
	
	НайденноеЗначениеПараметра = ПараметрыНастройки.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НоменклатурнаяГруппа"));
	Если НайденноеЗначениеПараметра <> Неопределено Тогда
		НайденноеЗначениеПараметра.Использование = Истина;
		НайденноеЗначениеПараметра.Значение = НоменклатурнаяГруппа;
	КонецЕсли;
	
	НайденноеЗначениеПараметра = ПараметрыНастройки.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СтатьяЗатрат"));
	Если НайденноеЗначениеПараметра <> Неопределено Тогда
		НайденноеЗначениеПараметра.Использование = Истина;
		НайденноеЗначениеПараметра.Значение = СтатьяЗатрат;
	КонецЕсли;
	
	НайденноеЗначениеПараметра = ПараметрыНастройки.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НалоговоеНазначениеДоходовИЗатрат"));
	Если НайденноеЗначениеПараметра <> Неопределено Тогда
		НайденноеЗначениеПараметра.Использование = Истина;
		НайденноеЗначениеПараметра.Значение = НалоговоеНазначениеДоходовИЗатрат;
	КонецЕсли;  
	
	Результат = Новый ТаблицаЗначений;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Попытка
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
		КомпоновщикНастроекКомпоновкиДанных.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		СтрокаОтбора = КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор;
	Исключение
		ТекстСообщенияОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	АдресСпискаВыбранных = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);
	
	Возврат АдресСпискаВыбранных;
	
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапроса()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ИНАГРО_ЗатратыОрганизацийОстатки.НоменклатурнаяГруппа,
		|	ИНАГРО_ЗатратыОрганизацийОстатки.Организация,
		|	ИНАГРО_ЗатратыОрганизацийОстатки.Подразделение,
		|	ИНАГРО_ЗатратыОрганизацийОстатки.СтатьяЗатрат,
		|	ИНАГРО_ЗатратыОрганизацийОстатки.СчетЗатрат,
		|	ИНАГРО_ЗатратыОрганизацийОстатки.НалоговоеНазначениеДоходовИЗатрат КАК НалоговоеНазначение,
		|	ИНАГРО_ЗатратыОрганизацийОстатки.КоличествоОстаток КАК Количество,
		|	ИНАГРО_ЗатратыОрганизацийОстатки.СуммаОстаток КАК Сумма,
		|	ИНАГРО_ЗатратыОрганизацийОстатки.СуммаНУОстаток КАК СуммаНУ
		|ИЗ
		|	РегистрНакопления.ИНАГРО_ЗатратыОрганизаций.Остатки(&Дата, ) КАК ИНАГРО_ЗатратыОрганизацийОстатки";
					
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти