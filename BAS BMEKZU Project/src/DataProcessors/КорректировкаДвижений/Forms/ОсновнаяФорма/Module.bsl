&НаКлиенте
Перем ИдентификаторСтрокиДт;
&НаКлиенте
Перем ИдентификаторСтрокиКт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если НЕ Параметры.Свойство("ДокументДвижений") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	ДокументДвижений    = Параметры.ДокументДвижений;
	МетаданныеДокумента = ДокументДвижений.Метаданные();
	ЗаполнитьРеквизитыОбъекта(МетаданныеДокумента);
	Если НЕ Объект.Проведен 
		 И НЕ Объект.РучнаяКорректировка Тогда
		Возврат;
	КонецЕсли;

	УстановитьПараметрыФункциональныхОпцийФормыОбъекта();
	
	Элементы.РучнаяКорректировка.Видимость = Объект.ЕстьРучнаяКорректировка;
	ЭтотОбъект.ТолькоПросмотр = НЕ ЕстьПравоНаРедактирование;

	ЗаполнитьТаблицуРегистров(МетаданныеДокумента);
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСДвижениями = ПроведениеСервер.ПолучитьМассивИспользуемыхРегистров(
		ДокументДвижений, МетаданныеДокумента.Движения);
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтображениеВТаблицеРегистров(РегистрыСДвижениями);
	СоздатьРеквизитыФормы();
	ПрочитатьДвиженияДокумента(ДокументДвижений);
	СоздатьЭлементыФормы();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	 
	УстановитьВозможностьРедактированияЗаписей();
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Движения документа: %1';uk='Рухи документа: %1'"), 
		Строка(ДокументДвижений));

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыОбъекта(МетаданныеДокумента)

	Объект.Проведен = БухгалтерскийУчетПереопределяемый.ДокументПроведен(ДокументДвижений);
	Объект.ЕстьОрганизация = МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено;
	Объект.ЕстьРучнаяКорректировка = МетаданныеДокумента.Реквизиты.Найти("РучнаяКорректировка") <> Неопределено;
	ИменаРеквизитов = "Дата,ПометкаУдаления,Организация,РучнаяКорректировка";
	Если НЕ Объект.ЕстьОрганизация Тогда
		ИменаРеквизитов = СтрЗаменить(ИменаРеквизитов, ",Организация", "");
	КонецЕсли;
	Если НЕ Объект.ЕстьРучнаяКорректировка Тогда
		ИменаРеквизитов = СтрЗаменить(ИменаРеквизитов, ",РучнаяКорректировка", "");
	КонецЕсли;
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументДвижений, ИменаРеквизитов);
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыДокумента);
	РучнаяКорректировка = Объект.РучнаяКорректировка;
	
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Истина);
	
	ЕстьПравоНаРедактирование = ПравоДоступа("Изменение", МетаданныеДокумента)
		И ДоступныеОрганизации.Найти(Объект.Организация) <> Неопределено;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()

	ПоляОбъектаДт = Новый Структура(
		"Субконто1, Субконто2, Субконто3, Валютный, Количественный, Поштучный, НалоговыйУчет",  //ИНАГРО ++ добавляем поштучный учет
		"СубконтоДт1", "СубконтоДт2", "СубконтоДт3", "ВалютныйДт", "КоличественныйДт", "ПоштучныйДт", "НалоговыйДт"); //ИНАГРО ++ добавляем поштучный учет

	ПоляОбъектаКт = Новый Структура(
		"Субконто1, Субконто2, Субконто3, Валютный, Количественный, Поштучный, НалоговыйУчет",  //ИНАГРО ++ добавляем поштучный учет
		"СубконтоКт1", "СубконтоКт2", "СубконтоКт3", "ВалютныйКт", "КоличественныйКт",  "ПоштучныйКт", "НалоговыйКт"); //ИНАГРО ++ добавляем поштучный учет

	Для каждого Проводка Из ХозрасчетныйНаборЗаписей Цикл
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетДт, Проводка, ПоляОбъектаДт);
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетКт, Проводка, ПоляОбъектаКт);
		ЗаполнитьНадписиВПроводке(Проводка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыФункциональныхОпцийФормыОбъекта()
	
	Если (ТипЗнч(ДокументДвижений) = Тип("ДокументСсылка.ВводНачальныхОстатков")) Тогда
		Период = КонецМесяца(Объект.Дата) + 1;
	Иначе
		Период = Объект.Дата;
	КонецЕсли;
	
	Если Объект.ЕстьОрганизация Тогда 
		
		ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(
			ЭтаФорма,
			Объект.Организация,
			Период);
		
	Иначе
		Элементы.ХозрасчетныйГруппаНалоговыйУчетДт.Заголовок = НСтр("ru='Сумма НУ Дт';uk='Сума ПО Дт'");
		Элементы.ХозрасчетныйГруппаНалоговыйУчетКт.Заголовок = НСтр("ru='Сумма НУ Кт';uk='Сума ПО Кт'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если НЕ Объект.Проведен 
		 И НЕ Объект.РучнаяКорректировка Тогда
		
		Если БухгалтерскийУчетКлиентСерверПереопределяемый.ЭтоРегламентнаяОперация(ДокументДвижений) Тогда
			ТекстПредупреждения = НСтр("ru='Регламентная операция не выполнена.
|Для получения информации о движениях необходимо выполнить регламентную операцию.';uk='Регламентна операція не виконана.
|Для отримання інформації про рухах необхідно виконати регламентну операцію.'");
		ИначеЕсли ТипЗнч(ДокументДвижений) = Тип("ДокументСсылка.ОперацияБух") Тогда
			ТекстПредупреждения = НСтр("ru='Операция помечена на удаление.
|Для получения информации о движениях необходимо снять пометку на удаление';uk='Операцію відмічено для вилучення.
|Для отримання інформації про рухи необхідно зняти помітку на вилучення'");
		Иначе
			ТекстПредупреждения = НСтр("ru='Документ не проведен.
|Для получения информации о движениях необходимо провести документ.';uk='Документ не проведений.
|Для отримання інформації про рухи необхідно провести документ.'");
		КонецЕсли;

		ПоказатьПредупреждение( , ТекстПредупреждения);

		Отказ = Истина;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()

	ОбновитьДвиженияНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		
		ТекстВопроса = НСтр("ru='Сохранить изменения движений?';uk='Зберегти зміни рухів?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, ,КодВозвратаДиалога.Да);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РучнаяКорректировкаПриИзменении(Элемент)

	ВыполнитьДействияПриИзмененииРучнойКорректировки();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыХозрасчетный

&НаКлиенте
Процедура ХозрасчетныйПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Хозрасчетный.ТекущиеДанные;
	ИмяКолонки    = Элементы.Хозрасчетный.ТекущийЭлемент.Имя;
	ИдСтроки      = Элементы.Хозрасчетный.ТекущаяСтрока;
	
	Если Найти(ИмяКолонки, "СубконтоДт") > 0
		И ИдСтроки <> ИдентификаторСтрокиДт Тогда
	
		ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
			"ХозрасчетныйСубконтоДт1", "ХозрасчетныйСубконтоДт2", "ХозрасчетныйСубконтоДт3");
		БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ТекущиеДанные.СчетДт, ЭтаФорма, ПоляФормы, Неопределено, Истина);
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт");
		ИдентификаторСтрокиДт = ИдСтроки;
	
	ИначеЕсли Найти(ИмяКолонки, "СубконтоКт") > 0
		И ИдСтроки <> ИдентификаторСтрокиКт Тогда
	
		ПоляФормы = Новый Структура("Субконто1, Субконто2, Субконто3",
			"ХозрасчетныйСубконтоКт1", "ХозрасчетныйСубконтоКт2", "ХозрасчетныйСубконтоКт3");
		БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ТекущиеДанные.СчетКт, ЭтаФорма, ПоляФормы, Неопределено, Истина);
		ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт");
		ИдентификаторСтрокиКт = ИдСтроки;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Сначала выполняем общие действия для всех регистров
	Подключаемый_ТаблицаРегистраПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование);
	
	Если НоваяСтрока Тогда
		ЗаполнитьНадписиВПроводке(Элементы.Хозрасчетный.ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСчетДтПриИзменении(Элемент)
	
	ОбработатьИзменениеСчета("Дт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Дт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоДт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Дт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСчетКтПриИзменении(Элемент)
	
	ОбработатьИзменениеСчета("Кт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Кт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт1ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Кт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Кт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт2ПриИзменении(Элемент)
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, "Кт");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозрасчетныйСубконтоКт3НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьНачалоВыбораСубконто("Кт", Элемент, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУниверсальные

// Общая процедура для всех регистров. Устанавливает период и организацию в добавляемых строках.
//
&НаКлиенте
Процедура Подключаемый_ТаблицаРегистраПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.Свойство("Период") Тогда
		Элемент.ТекущиеДанные.Период = Объект.Дата;
	КонецЕсли;

	Если НоваяСтрока
			И НЕ Копирование
			И Элемент.ТекущиеДанные.Свойство("Организация")
			И ЗначениеЗаполнено(Объект.Организация) Тогда
		Элемент.ТекущиеДанные.Организация = Объект.Организация;
	КонецЕсли;

КонецПроцедуры

// Общая процедура для всех остаточных регистров накопления. Обеспечивает показ правильной картинки в строке.
//
&НаКлиенте
Процедура Подключаемый_ВидДвиженияПриИзменении(Элемент)
	
	Если ТипЗнч(ТекущийЭлемент) = Тип("ТаблицаФормы")
		И ТекущийЭлемент.ТекущиеДанные.Свойство("КартинкаСтроки") Тогда
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		Если ТекущиеДанные.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
			ТекущиеДанные.КартинкаСтроки = 2 + ?(ТекущиеДанные.Активность, 0, 1);
		Иначе
			ТекущиеДанные.КартинкаСтроки = 4 + ?(ТекущиеДанные.Активность, 0, 1);
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если НЕ Модифицированность Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	ИзмененаРучнаяКорректировка = Объект.ЕстьРучнаяКорректировка
		И Объект.РучнаяКорректировка <> РучнаяКорректировка;

	Если Объект.ЕстьРучнаяКорректировка
		И Объект.РучнаяКорректировка
		И НЕ РучнаяКорректировка Тогда
		
		ТекстВопроса = НСтр("ru='Ручная корректировка движений документа отменена.
|Восстановить движения, сформированные автоматически?';uk='Ручне коригування рухів документа скасовано.
|Відновити руху, сформовані автоматично?'");
			
		Оповещение = Новый ОписаниеОповещения("ВопросВосстановитьДвиженияЗавершение", ЭтотОбъект, ИзмененаРучнаяКорректировка);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ЗаписатьДвиженияИЗакрыть(ИзмененаРучнаяКорректировка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДвижения(Команда)
	
	ОбновитьДвиженияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСоставРегистров(Команда)

	СписокДвижений  = Новый СписокЗначений;
	СписокРегистров = Новый СписокЗначений;
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если НЕ СтрокаРегистра.ПравоНаПросмотр Тогда
			Продолжить;
		КонецЕсли;
		СписокДвижений.Добавить(СтрокаРегистра.Имя, , СтрокаРегистра.ЕстьДвижения);
		СписокРегистров.Добавить(СтрокаРегистра.Имя, СтрокаРегистра.Синоним, СтрокаРегистра.Отображение);
	КонецЦикла;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СписокДвижений",  СписокДвижений);
	СтруктураПараметров.Вставить("СписокРегистров", СписокРегистров);

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОткрытьНастройкуЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.КорректировкаДвижений.Форма.ФормаНастройки", СтруктураПараметров, ЭтаФорма,,,,ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиВСписокРегистра(Команда)
	
	ИмяРегистра = СтрЗаменить(Команда.Имя, "ПерейтиВСписок", "");
	
	// Проверим, что таблица регистра добавлена на форму
	Если Элементы.Найти(ИмяРегистра) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяРегистра].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	// установим отбор по организации документа (иначе в некоторых формах установится отбор по основной организации)
	Если Объект.ЕстьОрганизация Тогда
		ПараметрыОтбора = Новый Структура("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора); 
	КонецЕсли;
	
	// Подготовим ключ записи для позиционирования в форме списка
	ПараметрыТекущейЗаписи = Новый Структура;
	ПараметрыТекущейЗаписи.Вставить("ИмяРегистра", ИмяРегистра);
	ПараметрыТекущейЗаписи.Вставить("Регистратор", ДокументДвижений);
	Если Объект.ЕстьОрганизация Тогда
		ПараметрыТекущейЗаписи.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	Для Каждого ЭлементФормыТабПоля ИЗ Элементы[ИмяРегистра].ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементФормыТабПоля) = Тип("ПолеФормы") Тогда
			ИмяСвойства = СтрЗаменить(ЭлементФормыТабПоля.Имя, ИмяРегистра, "");
			Если ИмяСвойства = "Регистратор" ИЛИ ИмяСвойства = "Организация" Тогда
				Продолжить;
			КонецЕсли;
			ПараметрыТекущейЗаписи.Вставить(ИмяСвойства, ТекущиеДанные[ИмяСвойства]);			
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыКлючаЗаписи = ПолучитьПараметрыКлючаЗаписи(ПараметрыТекущейЗаписи);
	Если ПараметрыКлючаЗаписи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипРегистра = ПараметрыКлючаЗаписи.ТипРегистра;
	ПараметрыФормы.Вставить("ТекущаяСтрока", ПараметрыКлючаЗаписи.КлючЗаписи);

	ОткрытьФорму(ТипРегистра + "." + ИмяРегистра + ".ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьНастройкуЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	СписокРезультат = РезультатЗакрытия;
	
	Если ТипЗнч(СписокРезультат) = Тип("СписокЗначений") Тогда

		БылиИзменения = Ложь;
		Для каждого СтрокаРегистра Из Регистры Цикл
			СтрокаСписка = СписокРезультат.НайтиПоЗначению(СтрокаРегистра.Имя);
			Если СтрокаРегистра.Отображение <> СтрокаСписка.Пометка Тогда
				БылиИзменения = Истина;
				СтрокаРегистра.Отображение = СтрокаСписка.Пометка;
			КонецЕсли;
		КонецЦикла;

		Если БылиИзменения Тогда

			ВыполнитьДействияПриИзмененииСоставаРегистров();

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПараметров(Форма, ТекущиеДанные, ШаблонИмяПоляОбъекта, ИмяПоляСчетУчета)

	СписокПараметров = Новый Структура;
	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		Если ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().СодержитТип(ТипЗнч(ТекущиеДанные[ИмяПоля])) Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ТекущиеДанные[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	СписокПараметров.Вставить("ОстаткиОбороты", "Кт");
	СписокПараметров.Вставить("Организация",    ТекущиеДанные["Организация"]);
	СписокПараметров.Вставить("СчетУчета",      ТекущиеДанные[ИмяПоляСчетУчета]);

	Возврат СписокПараметров;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, ДтКт = "")
	
	ИдСтроки = Форма.Элементы.Хозрасчетный.ТекущаяСтрока;
	Если ИдСтроки <> Неопределено Тогда
		СтрокаТаблицы = Форма.ХозрасчетныйНаборЗаписей.НайтиПоИдентификатору(ИдСтроки);
		Если ДтКт <> "Кт" Тогда
			ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоДт%Индекс%", "СчетДт");
			БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
				Форма, СтрокаТаблицы, "СубконтоДт%Индекс%", "ХозрасчетныйСубконтоДт%Индекс%", ПараметрыДокумента);
		КонецЕсли;
		Если ДтКт <> "Дт" Тогда
			ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоКт%Индекс%", "СчетКт");
			БухгалтерскийУчетКлиентСервер.ИзменитьПараметрыВыбораПолейСубконто(
				Форма, СтрокаТаблицы, "СубконтоКт%Индекс%", "ХозрасчетныйСубконтоКт%Индекс%", ПараметрыДокумента);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеСчета(ДтКт)

	ТекущиеДанные = Элементы.Хозрасчетный.ТекущиеДанные;
	
	ПоляФормы = Новый Структура("Субконто1,Субконто2,Субконто3");
	ПоляФормы.Субконто1 = "ХозрасчетныйСубконто" + ДтКт + "1";
	ПоляФормы.Субконто2 = "ХозрасчетныйСубконто" + ДтКт + "2";
	ПоляФормы.Субконто3 = "ХозрасчетныйСубконто" + ДтКт + "3";
	БухгалтерскийУчетКлиентСервер.ПриВыбореСчета(ТекущиеДанные["Счет" + ДтКт], ЭтаФорма, ПоляФормы, Неопределено, Истина);
	
	ПоляОбъекта = Новый Структура("Субконто1,Субконто2,Субконто3,Подразделение,Валютный,Количественный,Поштучный,Организация");
	ПоляОбъекта.Субконто1      = "Субконто" + ДтКт + "1";
	ПоляОбъекта.Субконто2      = "Субконто" + ДтКт + "2";
	ПоляОбъекта.Субконто3      = "Субконто" + ДтКт + "3";
	ПоляОбъекта.Подразделение  = "Подразделение" + ДтКт;
	ПоляОбъекта.Валютный       = "Валютный" + ДтКт;
	ПоляОбъекта.Количественный = "Количественный" + ДтКт;
	// ИНАГРО ++
	ПоляОбъекта.Поштучный 	   = "Поштучный" + ДтКт;
	// ИНАГРО --
	ПоляОбъекта.Организация    = Объект.Организация;
	БухгалтерскийУчетКлиентСервер.ПриИзмененииСчета(ТекущиеДанные["Счет" + ДтКт], ТекущиеДанные, ПоляОбъекта, Истина);
	
	ИзменитьПараметрыВыбораПолейСубконто(ЭтаФорма, ДтКт);
	
	ЗаполнитьНадписиВПроводке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНачалоВыбораСубконто(ДтКт, Элемент, СтандартнаяОбработка)

	ТекущиеДанные      = Элементы.Хозрасчетный.ТекущиеДанные;
	ПараметрыДокумента = ПолучитьСписокПараметров(ЭтаФорма, ТекущиеДанные, "Субконто"+ДтКт+"%Индекс%", "Счет"+ДтКт);
	ОбщегоНазначенияБПКлиент.НачалоВыбораЗначенияСубконто(ЭтаФорма, Элемент, СтандартнаяОбработка, ПараметрыДокумента);

КонецПроцедуры

&НаСервере
Процедура ЗаписатьДвижения(Отказ)

	Если РучнаяКорректировка Тогда

		Попытка
			НачатьТранзакцию();
			ДокОбъект = ДокументДвижений.ПолучитьОбъект();
			Если НЕ ДокОбъект.РучнаяКорректировка Тогда
				ДокОбъект.РучнаяКорректировка = Истина;
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;

			Для каждого СтрокаРегистра Из Регистры Цикл
				Если СтрокаРегистра.ЕстьРеквизит Тогда
					ИмяРеквизита = СтрокаРегистра.Имя + "НаборЗаписей";
					НаборЗаписей = РеквизитФормыВЗначение(ИмяРеквизита);
					НаборЗаписей.Отбор.Регистратор.Установить(ДокументДвижений);
					НаборЗаписей.УстановитьАктивность(НЕ Объект.ПометкаУдаления);
					Если НЕ (СтрокаРегистра.ТипРегистра = "РегистрСведений" 
						И (Метаданные.РегистрыСведений[СтрокаРегистра.Имя].ПериодичностьРегистраСведений 
						= Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический)) 
						И НЕ (СтрокаРегистра.ТипРегистра = "РегистрРасчета") 
						Тогда
						Для каждого Запись Из НаборЗаписей Цикл
							Если Запись.Период = '00010101' Тогда
								Запись.Период = Объект.Дата;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					НаборЗаписей.Записать(Истина);
				КонецЕсли;
			КонецЦикла;
			ЗафиксироватьТранзакцию();
			Объект.РучнаяКорректировка = Истина;
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось записать движения документа %1: %2';uk='Не вдалося записати рухи документа %1: %2'"), 
				Строка(ДокументДвижений), 
				ОписаниеОшибки());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументДвижений);
			ИмяСобытия = НСтр("ru='Ошибка записи движений документа';uk='Помилка запису рухів документа'");
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,, ДокументДвижений, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;

	Иначе

		Попытка
			ДокОбъект = ДокументДвижений.ПолучитьОбъект();
			Если ДокОбъект.РучнаяКорректировка Тогда
				ДокОбъект.РучнаяКорректировка = Ложь;
			КонецЕсли;
			Если БухгалтерскийУчетКлиентСерверПереопределяемый.ЭтоРегламентнаяОперация(ДокументДвижений) Тогда
				ДокОбъект.ВыполнитьОперацию();
			Иначе
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			Объект.РучнаяКорректировка = Истина;
		Исключение
			Если БухгалтерскийУчетКлиентСерверПереопределяемый.ЭтоРегламентнаяОперация(ДокументДвижений) Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не удалось выполнить операцию %1: %2';uk='Не вдалося виконати операцію %1: %2'") 
					+ Символы.ПС + НСтр("ru='Регламентная операция отменена.';uk='Регламентна операція скасована.'"), 
					Строка(ДокументДвижений), 
					ОписаниеОшибки());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументДвижений);
				ДокОбъект.ОтменитьОперацию();
				ИмяСобытия = НСтр("ru='Ошибка выполнения регламентной операции';uk='Помилка виконання регламентної операції'");
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,, ДокументДвижений, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Иначе
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не удалось перепровести документ %1: %2';uk='Не вдалося перепровести документ %1: %2'") 
					+ Символы.ПС + НСтр("ru='Проведение документа отменено.';uk='Проведення документа скасовано.'"), 
					Строка(ДокументДвижений),  
					ОписаниеОшибки());
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументДвижений);
				ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				ИмяСобытия = НСтр("ru='Ошибка перепроведения документа';uk='Помилка перепроведення документа'");
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,, ДокументДвижений, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецЕсли;
			ВызватьИсключение;
		КонецПопытки;

		УстановитьДоступностьСубконто();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПриИзмененииСоставаРегистров()

	СоздатьРеквизитыФормы();
	СоздатьЭлементыФормы();

	УстановитьВозможностьРедактированияЗаписей();

КонецПроцедуры

&НаСервере
Процедура ОбновитьДвиженияНаСервере()
	
	МетаданныеДокумента = ДокументДвижений.Метаданные();
	ЗаполнитьРеквизитыОбъекта(МетаданныеДокумента);
	
	УстановитьПараметрыФункциональныхОпцийФормыОбъекта();
	
	ЭтотОбъект.ТолькоПросмотр = НЕ ЕстьПравоНаРедактирование;
	
	ЗаполнитьТаблицуРегистров(МетаданныеДокумента);
	УстановитьПривилегированныйРежим(Истина);
	РегистрыСДвижениями = ПроведениеСервер.ПолучитьМассивИспользуемыхРегистров(
		ДокументДвижений, МетаданныеДокумента.Движения);
	УстановитьПривилегированныйРежим(Ложь);
	УстановитьОтображениеВТаблицеРегистров(РегистрыСДвижениями);
	СоздатьРеквизитыФормы();
	ПрочитатьДвиженияДокумента(ДокументДвижений);
	СоздатьЭлементыФормы();
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	 
	УстановитьВозможностьРедактированияЗаписей();
	
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Движения документа: %1';uk='Рухи документа: %1'"), 
		Строка(ДокументДвижений));

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРегистров(МетаданныеДокумента)

	МетаданныеРегистровНакопления = Метаданные.РегистрыНакопления;
	МетаданныеРегистровСведений   = Метаданные.РегистрыСведений;
	МетаданныеРегистровРасчета    = Метаданные.РегистрыРасчета;
	ВидРегистраОстатки            = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки;
	
	Регистры.Очистить();
	Для каждого МетаданныеРегистра Из МетаданныеДокумента.Движения Цикл
		
		Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(МетаданныеРегистра) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРегистра     = Регистры.Добавить();
		СтрокаРегистра.Имя = МетаданныеРегистра.Имя;
		
		ПолноеИмя    = МетаданныеРегистра.ПолноеИмя();
		ПозицияТочки = Найти(ПолноеИмя, ".");
		ТипРегистра  = Лев(ПолноеИмя, ПозицияТочки - 1);

		СтрокаРегистра.ТипРегистра = ТипРегистра;
		СтрокаРегистра.Синоним     = МетаданныеРегистра.Синоним;
		
		Если ТипРегистра = "РегистрБухгалтерии" Тогда
			СтрокаРегистра.ПравоНаПросмотр = ПравоДоступа("Просмотр", Метаданные.РегистрыБухгалтерии[СтрокаРегистра.Имя]);
		ИначеЕсли ТипРегистра = "РегистрНакопления" Тогда
			СтрокаРегистра.ПравоНаПросмотр = ПравоДоступа("Просмотр", МетаданныеРегистровНакопления[СтрокаРегистра.Имя]);
		ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
			СтрокаРегистра.ПравоНаПросмотр = ПравоДоступа("Просмотр", МетаданныеРегистровСведений[СтрокаРегистра.Имя]);
		ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
			СтрокаРегистра.ПравоНаПросмотр = ПравоДоступа("Просмотр", МетаданныеРегистровРасчета[СтрокаРегистра.Имя]);
		КонецЕсли;
		
		Если ТипРегистра = "РегистрНакопления" Тогда
			СтрокаРегистра.РегистрОстатков = МетаданныеРегистра.ВидРегистра = ВидРегистраОстатки;
		КонецЕсли;
		
	КонецЦикла;
	
	// Сначала показывается регистр бухгалтерии, затем регистры накопления, затем - сведений
	Регистры.Сортировать("ТипРегистра, Синоним");

КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыФормы()

	ПоказатьХозрасчетный = Ложь;

	Для каждого СтрокаРегистра Из Регистры Цикл
		
		Если СтрокаРегистра.Имя = "Хозрасчетный" Тогда
			ПоказатьХозрасчетный = СтрокаРегистра.Отображение;
			Продолжить;
		КонецЕсли;
		
		ИмяГруппы = "Группа" + СтрокаРегистра.Имя;
		
		ТекГруппа = Элементы.Найти(ИмяГруппы);
		Если ТекГруппа = Неопределено 
			И СтрокаРегистра.Отображение Тогда

			//Найдем группу, перед которой будем вставлять новую группу
			СледующаяГруппа = Неопределено;
			Для каждого Строка Из Регистры Цикл
				Если Строка.ТипРегистра >= СтрокаРегистра.ТипРегистра
					И Строка.Синоним > СтрокаРегистра.Синоним
					И Строка.Отрисован Тогда
					СледующаяГруппа = Элементы["Группа" + Строка.Имя];
					Прервать;
				КонецЕсли;
			КонецЦикла;

			ТекГруппа = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), Элементы.ПанельРегистров, СледующаяГруппа);
			
			ТекГруппа.Заголовок      = СтрокаРегистра.Синоним;
			СтрокаРегистра.Отрисован = Истина;

			Если СтрокаРегистра.ТипРегистра = "РегистрБухгалтерии" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.РегистрБухгалтерии;
				КартинкаАктивности = БиблиотекаКартинок.АктивностьПоРБ;
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрНакопления" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.РегистрНакопления;
				КартинкаАктивности = БиблиотекаКартинок.АктивностьПоРН;
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрСведений" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.РегистрСведений;
				КартинкаАктивности = БиблиотекаКартинок.АктивностьПоРС;
			ИначеЕсли СтрокаРегистра.ТипРегистра = "РегистрРасчета" Тогда
				ТекГруппа.Картинка = БиблиотекаКартинок.РегистрРасчета;
				КартинкаАктивности = БиблиотекаКартинок.АктивностьПоРР;
			КонецЕсли;

			// На странице регистра создаем таблицу
			ИмяТаблицы = СтрокаРегистра.Имя;
			ТекТаблица = Элементы.Найти(ИмяТаблицы);
			Если ТекТаблица <> Неопределено Тогда
				Элементы.Удалить(ТекТаблица);
			КонецЕсли;
			ТекТаблица = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), ТекГруппа);
			ПутьКДаннымТаблицы = СтрокаРегистра.Имя + "НаборЗаписей";
			ТекТаблица.ПутьКДанным = ПутьКДаннымТаблицы;
			// Назначаем общий обработчик
			ТекТаблица.УстановитьДействие("ПриНачалеРедактирования", "Подключаемый_ТаблицаРегистраПриНачалеРедактирования");
			ТекТаблица.КартинкаСтрок = КартинкаАктивности;
			Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" 
				И СтрокаРегистра.РегистрОстатков Тогда
				ТекТаблица.ПутьКДаннымКартинкиСтроки = ПутьКДаннымТаблицы + ".КартинкаСтроки";
			Иначе
				ТекТаблица.ПутьКДаннымКартинкиСтроки = ПутьКДаннымТаблицы + ".Активность";
			КонецЕсли;
			
			ИмяКоманды   = ИмяТаблицы + "ПерейтиВСписок";
			СуществующаяКоманда = Команды.Найти(ИмяКоманды);
			Если НЕ СуществующаяКоманда = Неопределено Тогда
				Команды.Удалить(СуществующаяКоманда);
			КонецЕсли;
			НоваяКоманда = Команды.Добавить(ИмяКоманды);
			НоваяКоманда.Картинка  = БиблиотекаКартинок.НайтиВСписке;
			НоваяКоманда.Заголовок = НСтр("ru='Перейти в список движений';uk='Перейти у список рухів'");
			НоваяКоманда.Подсказка = НСтр("ru='Перейти в список движений регистра';uk='Перейти у список рухів регістра'");
			НоваяКоманда.Действие  = "Подключаемый_ПерейтиВСписокРегистра";
			НоваяКнопка = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ТекТаблица.КоманднаяПанель);
			НоваяКнопка.ИмяКоманды = ИмяКоманды;
			НоваяКнопка.ТолькоВоВсехДействиях = Истина;

			ТекГруппа.ПутьКДаннымЗаголовка = ПутьКДаннымТаблицы + ".КоличествоСтрок";
			
			РеквизитыНабораЗаписей = ЭтотОбъект[ПутьКДаннымТаблицы].Выгрузить(Новый Массив);

			// Некоторые колонки не показываем
			РеквизитыНабораЗаписей.Колонки.Удалить("Регистратор");
			РеквизитыНабораЗаписей.Колонки.Удалить("Активность");

			Если РеквизитыНабораЗаписей.Колонки.Найти("МоментВремени") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("МоментВремени");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("Период") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("Период");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("Организация") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("Организация");
			КонецЕсли;

			Если РеквизитыНабораЗаписей.Колонки.Найти("ИсходныйНомерСтроки") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("ИсходныйНомерСтроки");
			КонецЕсли;
			
			Если РеквизитыНабораЗаписей.Колонки.Найти("КартинкаСтроки") <> Неопределено Тогда
				РеквизитыНабораЗаписей.Колонки.Удалить("КартинкаСтроки");
			КонецЕсли;
			
			// Создаем колонки таблицы
			Для каждого КолонкаРеквизита Из РеквизитыНабораЗаписей.Колонки Цикл
				Если ВРЕГ(ЛЕВ(КолонкаРеквизита.Имя,7)) = "УДАЛИТЬ" Тогда
					Продолжить;
				КонецЕсли;					
				ИмяКолонки = СтрокаРегистра.Имя + КолонкаРеквизита.Имя;
				ТекКолонка = Элементы.Найти(ИмяКолонки);
				Если ТекКолонка = Неопределено Тогда
					ТекКолонка = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ТекТаблица);
				КонецЕсли;
				ТекКолонка.ПутьКДанным = ТекТаблица.ПутьКДанным + "." + КолонкаРеквизита.Имя;
				ТекКолонка.Заголовок   = КолонкаРеквизита.Заголовок;
				ТекКолонка.Вид = ВидПоляФормы.ПолеВвода;
				Если КолонкаРеквизита.Имя = "НомерСтроки" Тогда
					ТекКолонка.Ширина = 2;
				ИначеЕсли КолонкаРеквизита.Имя = "ВидДвижения" Тогда
					ТекКолонка.Ширина = 15;
				КонецЕсли;
				Если КолонкаРеквизита.Имя = "ВидДвижения"
					И СтрокаРегистра.ТипРегистра = "РегистрНакопления" 
					И СтрокаРегистра.РегистрОстатков Тогда
					ТекКолонка.УстановитьДействие("ПриИзменении", "Подключаемый_ВидДвиженияПриИзменении");
				КонецЕсли;
				
			КонецЦикла;

			УстановитьСвязиПараметровВыбораКолонокСпискаРегистра(СтрокаРегистра.Имя);
			
		ИначеЕсли ТекГруппа <> Неопределено И НЕ СтрокаРегистра.Отображение Тогда
			
			Элементы.Удалить(ТекГруппа);
			СтрокаРегистра.Отрисован = Ложь;
			
		КонецЕсли;

	КонецЦикла;

	Элементы.ГруппаХозрасчетный.Видимость = ПоказатьХозрасчетный;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСубконто()

	Для Каждого Проводка Из ХозрасчетныйНаборЗаписей Цикл
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоДт1", "СубконтоДт2", "СубконтоДт3");
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетДт, Проводка, ПоляОбъекта);
		
		ПоляОбъекта = Новый Структура("Субконто1, Субконто2, Субконто3",
		"СубконтоКт1", "СубконтоКт2", "СубконтоКт3");
		БухгалтерскийУчетКлиентСервер.УстановитьДоступностьСубконто(Проводка.СчетКт, Проводка, ПоляОбъекта);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьВозможностьРедактированияЗаписей()

	Элементы.КнопкаЗаписатьИЗакрыть.Видимость = Объект.ЕстьРучнаяКорректировка;
	Для каждого СтраницаРегистра Из Элементы.ПанельРегистров.ПодчиненныеЭлементы Цикл
		СтраницаРегистра.ТолькоПросмотр = НЕ РучнаяКорректировка;
		ИмяРегистра = СтрЗаменить(СтраницаРегистра.Имя, "Группа", "");
		ТаблицаРегистра = Элементы[ИмяРегистра];
		ТаблицаРегистра.ИзменятьСоставСтрок  = РучнаяКорректировка;
		ТаблицаРегистра.ИзменятьПорядокСтрок = РучнаяКорректировка;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеВТаблицеРегистров(РегистрыСДвижениями)

	Для каждого СтрокаРегистра Из Регистры Цикл
		
		СтрокаРегистра.ЕстьДвижения = РегистрыСДвижениями.Найти(СтрокаРегистра.Имя) <> Неопределено;
		СтрокаРегистра.Отображение  = СтрокаРегистра.ЕстьДвижения И СтрокаРегистра.ПравоНаПросмотр;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбораКолонокСпискаРегистра(ИмяРегистра)
	
	ЭлементКонтрагент         = Элементы.Найти(ИмяРегистра + "Контрагент");
	ЭлементДоговорКонтрагента = Элементы.Найти(ИмяРегистра + "ДоговорКонтрагента");
	
	Если ЭлементДоговорКонтрагента <> Неопределено Тогда
		СвязиПараметровДоговор = Новый Массив;
		СвязиПараметровДоговор.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));		
		Если ЭлементКонтрагент <> Неопределено Тогда			
			СвязиПараметровДоговор.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы."+ИмяРегистра+".ТекущиеДанные.Контрагент"));
		КонецЕсли; 
		ЭлементДоговорКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровДоговор);
	КонецЕсли; 
	
КонецПроцедуры 

&НаСервере
Процедура СоздатьРеквизитыФормы()

	ИменаРеквизитов = Новый Массив;
	Для каждого Реквизит Из ПолучитьРеквизиты() Цикл
		ИменаРеквизитов.Добавить(Реквизит.Имя);
	КонецЦикла;
	ДобавляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты   = Новый Массив;
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.Имя = "Хозрасчетный" Тогда
			СтрокаРегистра.ЕстьРеквизит = Истина;
			Продолжить;
		КонецЕсли;
		ИмяРеквизита = СтрокаРегистра.Имя + "НаборЗаписей";
		Если (СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать)
			И ИменаРеквизитов.Найти(ИмяРеквизита) = Неопределено Тогда
			ТипРеквизита  = Новый ОписаниеТипов(СтрокаРегистра.ТипРегистра + "НаборЗаписей." + СтрокаРегистра.Имя);
			НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, , , Истина);
			ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" 
				И СтрокаРегистра.РегистрОстатков Тогда
				КартинкаСтроки = Новый РеквизитФормы("КартинкаСтроки", Новый ОписаниеТипов("Число"), ИмяРеквизита);
				ДобавляемыеРеквизиты.Добавить(КартинкаСтроки);
			КонецЕсли;
		ИначеЕсли НЕ (СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать)
			И ИменаРеквизитов.Найти(ИмяРеквизита) <> Неопределено Тогда
			УдаляемыеРеквизиты.Добавить(ИмяРеквизита);
		КонецЕсли;
		СтрокаРегистра.ЕстьРеквизит = СтрокаРегистра.Отображение ИЛИ СтрокаРегистра.Записывать;
	КонецЦикла;
	
	Если ДобавляемыеРеквизиты.Количество() > 0 
		ИЛИ УдаляемыеРеквизиты.Количество() > 0 Тогда
		ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПрочитатьДвиженияДокумента(ДокументДвижений)
	
	УстановитьПривилегированныйРежим(Истина); // ИНАГРО
	
	Для каждого СтрокаРегистра Из Регистры Цикл
		Если СтрокаРегистра.Отображение Тогда
			ИмяРеквизита = СтрокаРегистра.Имя + "НаборЗаписей";
			НаборЗаписей = РеквизитФормыВЗначение(ИмяРеквизита);
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументДвижений);
			НаборЗаписей.Прочитать();
			ЗначениеВРеквизитФормы(НаборЗаписей, ИмяРеквизита);
			Если СтрокаРегистра.ТипРегистра = "РегистрНакопления" 
				И СтрокаРегистра.РегистрОстатков Тогда
				Для каждого СтрокаЗаписи Из ЭтотОбъект[ИмяРеквизита] Цикл
					Если СтрокаЗаписи.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
						СтрокаЗаписи.КартинкаСтроки = 2 + ?(СтрокаЗаписи.Активность, 0, 1);
					Иначе
						СтрокаЗаписи.КартинкаСтроки = 4 + ?(СтрокаЗаписи.Активность, 0, 1);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			СтрокаРегистра.Записывать = ЭтотОбъект[ИмяРеквизита].Количество() > 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ВыполнитьДействияПриИзмененииРучнойКорректировки()
	
	Если РучнаяКорректировка = Объект.РучнаяКорректировка Тогда
		ОбновитьДвиженияНаСервере();
		ЭтаФорма.Модифицированность = Ложь;
	Иначе
		УстановитьВозможностьРедактированияЗаписей();
	КонецЕсли;
	
КонецПроцедуры
  
&НаСервереБезКонтекста
Функция ПолучитьПараметрыКлючаЗаписи(ПараметрыЗаписи)
	
	ПараметрыКлючаЗаписи = Новый Структура("КлючЗаписи, ТипРегистра");
	
	ИмяРегистра = ПараметрыЗаписи.ИмяРегистра;
	
	Если НЕ Метаданные.РегистрыБухгалтерии.Найти(ИмяРегистра) = Неопределено Тогда
		
		ПараметрыКлючаЗаписи.ТипРегистра = "РегистрБухгалтерии";

		Если ПараметрыЗаписи.Свойство("Регистратор") И ПараметрыЗаписи.Свойство("НомерСтроки") Тогда
			ЗначениеКлючаЗаписи = Новый Структура;
			ЗначениеКлючаЗаписи.Вставить("Регистратор", ПараметрыЗаписи.Регистратор);
			ЗначениеКлючаЗаписи.Вставить("НомерСтроки", ПараметрыЗаписи.НомерСтроки);
			ПараметрыКлючаЗаписи.КлючЗаписи = РегистрыБухгалтерии[ИмяРегистра].СоздатьКлючЗаписи(ЗначениеКлючаЗаписи);	
		КонецЕсли;
		
	ИначеЕсли НЕ Метаданные.РегистрыНакопления.Найти(ИмяРегистра) = Неопределено Тогда
		
		ПараметрыКлючаЗаписи.ТипРегистра = "РегистрНакопления";
		
		Если ПараметрыЗаписи.Свойство("Регистратор") И ПараметрыЗаписи.Свойство("НомерСтроки") Тогда
			ЗначениеКлючаЗаписи = Новый Структура;
			ЗначениеКлючаЗаписи.Вставить("Регистратор", ПараметрыЗаписи.Регистратор);
			ЗначениеКлючаЗаписи.Вставить("НомерСтроки", ПараметрыЗаписи.НомерСтроки);
			ПараметрыКлючаЗаписи.КлючЗаписи = РегистрыНакопления[ИмяРегистра].СоздатьКлючЗаписи(ЗначениеКлючаЗаписи);	
		КонецЕсли;
		
	ИначеЕсли НЕ Метаданные.РегистрыСведений.Найти(ИмяРегистра) = Неопределено Тогда
		
		ПараметрыКлючаЗаписи.ТипРегистра = "РегистрСведений";
		
		ЗначениеКлючаЗаписи = Новый Структура;
		Если НЕ Метаданные.РегистрыСведений[ИмяРегистра].ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический 
			И ПараметрыЗаписи.Свойство("Период") Тогда
			ЗначениеКлючаЗаписи.Вставить("Период", 		ПараметрыЗаписи.Период); 	
		КонецЕсли;
		Если Метаданные.РегистрыСведений[ИмяРегистра].РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору
			И ПараметрыЗаписи.Свойство("Регистратор") Тогда
			ЗначениеКлючаЗаписи.Вставить("Регистратор", ПараметрыЗаписи.Регистратор); 	
		КонецЕсли;
		Для Каждого ИзмерениеРегистра ИЗ Метаданные.РегистрыСведений[ИмяРегистра].Измерения Цикл
			Если ПараметрыЗаписи.Свойство(ИзмерениеРегистра.Имя) Тогда
				ЗначениеКлючаЗаписи.Вставить(ИзмерениеРегистра.Имя, ПараметрыЗаписи[ИзмерениеРегистра.Имя]); 		
			КонецЕсли;
		КонецЦикла;
		ПараметрыКлючаЗаписи.КлючЗаписи = РегистрыСведений[ИмяРегистра].СоздатьКлючЗаписи(ЗначениеКлючаЗаписи);
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыКлючаЗаписи;

КонецФункции

&НаКлиенте
Процедура ЗаписатьДвиженияИЗакрыть(ИзмененаРучнаяКорректировка)
	
	Отказ = Ложь;
	ЗаписатьДвижения(Отказ);
	Если НЕ Отказ Тогда
		Если ИзмененаРучнаяКорректировка Тогда
			ОповеститьОбИзменении(ДокументДвижений);
		КонецЕсли;
		ЭтаФорма.Модифицированность = Ложь;
		Оповестить("ВыполненаЗаписьДокумента", Новый Структура("ДокументСсылка", ДокументДвижений));
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВосстановитьДвиженияЗавершение(Ответ, ИзмененаРучнаяКорректировка) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаписатьДвиженияИЗакрыть(ИзмененаРучнаяКорректировка)
	Иначе
		РучнаяКорректировка = Истина;
		УстановитьВозможностьРедактированияЗаписей();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Отказ = Ложь;
		ЗаписатьДвижения(Отказ);
		Если НЕ Отказ Тогда
			Модифицированность = Ложь;
			Закрыть();
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНадписиВПроводке(Проводка)
	
	Проводка.НадписьКоличествоДт = ?(Проводка.КоличественныйДтДоступность, НСтр("ru='Кол.:';uk='Кіл.:'"), "");
	Проводка.НадписьКоличествоКт = ?(Проводка.КоличественныйКтДоступность, НСтр("ru='Кол.:';uk='Кіл.:'"), "");
	// ИНАГРО++
	Проводка.НадписьКоличествоГоловДт = ?(Проводка.ПоштучныйДтДоступность, НСтр("ru='Голов:';uk='Голів:'"), "");
	Проводка.НадписьКоличествоГоловКт = ?(Проводка.ПоштучныйКтДоступность, НСтр("ru='Голов.:';uk='Голів.:'"), "");
	// ИНАГРО--

КонецПроцедуры

#КонецОбласти

