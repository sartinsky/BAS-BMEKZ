#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КаталогВыгрузкиДанных = ХранилищеОбщихНастроек.Загрузить("ИНАГРО_ЭкспортДанных_КаталогВыгрузкиДанных", "Элеватор");
	Организация           = ХранилищеОбщихНастроек.Загрузить("ИНАГРО_ЭкспортДанных_Организация",           "Элеватор");
	
	Объект.КоличествоСимволовНомераСкладскойКвитанции   = ХранилищеОбщихНастроек.Загрузить("ИНАГРО_ЭкспортДанных_КоличествоСимволовНомераСкладскойКвитанции",   "Элеватор");
	Объект.КоличествоСимволовНомераДокументаОснования   = ХранилищеОбщихНастроек.Загрузить("ИНАГРО_ЭкспортДанных_КоличествоСимволовНомераДокументаОснования",   "Элеватор");
	Объект.КоличествоСимволовНомераЛабораторногоАнализа = ХранилищеОбщихНастроек.Загрузить("ИНАГРО_ЭкспортДанных_КоличествоСимволовНомераЛабораторногоАнализа", "Элеватор");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ЗавершениеРаботы Тогда
		ПередЗакрытиемНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗакрытиемНаСервере()
	
	ХранилищеОбщихНастроек.Сохранить("ИНАГРО_ЭкспортДанных_КаталогВыгрузкиДанных", "Элеватор", КаталогВыгрузкиДанных);
	ХранилищеОбщихНастроек.Сохранить("ИНАГРО_ЭкспортДанных_Организация",           "Элеватор", Организация);
	
	ХранилищеОбщихНастроек.Сохранить("ИНАГРО_ЭкспортДанных_КоличествоСимволовНомераСкладскойКвитанции",   "Элеватор", Объект.КоличествоСимволовНомераСкладскойКвитанции);
	ХранилищеОбщихНастроек.Сохранить("ИНАГРО_ЭкспортДанных_КоличествоСимволовНомераДокументаОснования",   "Элеватор", Объект.КоличествоСимволовНомераДокументаОснования);
	ХранилищеОбщихНастроек.Сохранить("ИНАГРО_ЭкспортДанных_КоличествоСимволовНомераЛабораторногоАнализа", "Элеватор", Объект.КоличествоСимволовНомераЛабораторногоАнализа);

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КаталогВыгрузкиДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = НСтр("ru='Выберите каталог сохранения файлов *.xml';uk='Виберіть каталог збереження файлів *.xml'");
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);	
	Диалог.Заголовок = НСтр("ru='Выберите каталог схоранения файлов *.xml';uk='Виберіть каталог збереження файлів *.xml'");
	
	Если Диалог.Выбрать() Тогда
		КаталогВыгрузкиДанных = Диалог.Каталог;		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)

	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", Объект.ДатаНачала, Объект.ДатаОкончания);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаНачала	 = РезультатВыбора.НачалоПериода;
	Объект.ДатаОкончания = РезультатВыбора.КонецПериода;		
		
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если Объект.СписокСкладскихКвитанций.Количество() > 0 Тогда
		Объект.СписокСкладскихКвитанций.Очистить();
	КонецЕсли;
	
	ЗаполнитьНаСервере();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	ЕстьДокументы  = Истина;
	ДокументСсылка = Неопределено;
	
	Пока ЕстьДокументы Цикл
		
		Выборка       = ПолучитьВыборкуДокументов(ДокументСсылка, "ИНАГРО_СкладскаяКвитанция");
		ЕстьДокументы = Выборка.Количество() > 0;		
		
		Пока Выборка.Следующий() Цикл			
			ДокументСсылка = Выборка.Ссылка;
			НоваяСтрока = Объект.СписокСкладскихКвитанций.Добавить();
			НоваяСтрока.ДатаДокумента      = Выборка.Ссылка.Дата;
			НоваяСтрока.СерияНомер         = СокрЛП("" + Выборка.Ссылка.Серия + " - " + Выборка.Ссылка.НомерВходящий);
			НоваяСтрока.СкладскаяКвитанция = Выборка.Ссылка;			
			НоваяСтрока.Выгружено          = Ложь;
		КонецЦикла;
		
	КонецЦикла;
	
	ЕстьДокументы  = Истина;
	ДокументСсылка = Неопределено;
	
	Пока ЕстьДокументы Цикл
		
		Выборка       = ПолучитьВыборкуДокументов(ДокументСсылка,"ИНАГРО_СкладскаяКвитанцияДвойная");
		ЕстьДокументы = Выборка.Количество() > 0;		
		
		Пока Выборка.Следующий() Цикл			
			ДокументСсылка = Выборка.Ссылка;
			НоваяСтрока = Объект.СписокСкладскихКвитанций.Добавить();
			НоваяСтрока.ДатаДокумента      = Выборка.Ссылка.Дата;
			НоваяСтрока.СерияНомер         = СокрЛП("" + Выборка.Ссылка.Серия + " - " + Выборка.Ссылка.НомерВходящий);
			НоваяСтрока.СкладскаяКвитанция = Выборка.Ссылка;			
			НоваяСтрока.Выгружено          = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	ЕстьДокументы  = Истина;
	ДокументСсылка = Неопределено;
	
	Пока ЕстьДокументы Цикл
		
		Выборка       = ПолучитьВыборкуДокументов(ДокументСсылка,"ИНАГРО_СкладскаяКвитанцияПростая");
		ЕстьДокументы = Выборка.Количество() > 0;		
		
		Пока Выборка.Следующий() Цикл
			ДокументСсылка = Выборка.Ссылка;
			НоваяСтрока = Объект.СписокСкладскихКвитанций.Добавить();
			НоваяСтрока.ДатаДокумента      = Выборка.Ссылка.Дата;
			НоваяСтрока.СерияНомер         = СокрЛП("" + Выборка.Ссылка.Серия + " - " + Выборка.Ссылка.НомерВходящий);
			НоваяСтрока.СкладскаяКвитанция = Выборка.Ссылка;			
			НоваяСтрока.Выгружено          = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	Объект.СписокСкладскихКвитанций.Сортировать("ДатаДокумента");
	
КонецПроцедуры

&НаКлиенте
Процедура Вырузить(Команда)
	
	Если ЗначениеЗаполнено(КаталогВыгрузкиДанных) Тогда
		
		Если Объект.СписокСкладскихКвитанций.Количество() >0 Тогда	
			
			Имя                = "ERZS3_Data.xml";
			ИмяФайла           = КаталогВыгрузкиДанных + "\" + Имя;		
			ИмяКаталогаНаДиске = КаталогВыгрузкиДанных;
			
			АдресХранилища = ВырузитьНаСервере();    
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
			ДвоичныеДанные.Записать(ИмяФайла);
			
		Иначе
			
			ТекстСообщения = НСтр("ru='Нет данных для выгрузки!';uk='Немає даних для вивантаження!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
			
		КонецЕсли; 
		
	Иначе
		ТекстСообщения = НСтр("ru='Укажите путь каталога выгрузки данных!';uk ='Вкажіть путь каталогу вигрузки даних!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Функция ВырузитьНаСервере()
	
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм(); 
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Data");
	
	ИндикаторОбработки = 0;
	Элементы.ИндикаторОбработки.МаксимальноеЗначение = Объект.СписокСкладскихКвитанций.Количество();
	
	КоличествоДокументов = 0;

	Для Каждого СтрокаТабличнойЧасти Из Объект.СписокСкладскихКвитанций Цикл		
		
		ИндикаторОбработки = ИндикаторОбработки + 1;
		
		Если СтрокаТабличнойЧасти.Выгружено Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоДокументов = КоличествоДокументов + 1;
		
		ВсеЗаполнено = Истина;		
				
		// Реквизиты для заполнения
		
		СкладскаяКвитанция = СтрокаТабличнойЧасти.СкладскаяКвитанция;
		
		ИмяДокумента = СкладскаяКвитанция.Метаданные().Имя;
		
		Если ИмяДокумента      = "ИНАГРО_СкладскаяКвитанция" Тогда    			
			ТипДокумента = 1;
		ИначеЕсли ИмяДокумента = "ИНАГРО_СкладскаяКвитанцияПростая" Тогда
			ТипДокумента = 2;			
		ИначеЕсли ИмяДокумента = "ИНАГРО_СкладскаяКвитанцияДвойная" Тогда
			ТипДокумента = 3;				
		КонецЕсли; 

		НомерДокумента            = СкладскаяКвитанция.Номер;
		НомерДок                  = ИНАГРО_Общий.ВернутьКодБезПрефикса(СкладскаяКвитанция.Номер, Объект.КоличествоСимволовНомераСкладскойКвитанции);
		ДатаДокумента             = СкладскаяКвитанция.Дата;		
		Организация               = СкладскаяКвитанция.Организация;
		СерияИНомер               = СокрЛП(СкладскаяКвитанция.Серия + СкладскаяКвитанция.НомерВходящий);		
		Если ТипДокумента = 1 Тогда
			НомерНакладной = СокрЛП(?(СокрЛП(СкладскаяКвитанция.НомерДокументаОснования) = "", "-----", ИНАГРО_Общий.ВернутьКодБезПрефикса(СкладскаяКвитанция.НомерДокументаОснования, Объект.КоличествоСимволовНомераДокументаОснования)));
		КонецЕсли;		
		Владелец                  = СокрЛП(?(ЗначениеЗаполнено(СкладскаяКвитанция.Владелец.НаименованиеПолное), СкладскаяКвитанция.Владелец.НаименованиеПолное, СкладскаяКвитанция.Владелец));
		ЮридическоеФизическоеЛицо = СкладскаяКвитанция.Владелец.ЮридическоеФизическоеЛицо;
		ЕДРПОУ                    = СкладскаяКвитанция.Владелец.КодПоЕДРПОУ;
		ИНН                       = СкладскаяКвитанция.Владелец.ИНН;
		Адрес                     = БухгалтерскийУчетПереопределяемый.ПолучитьАдресИзКонтактнойИнформации(СкладскаяКвитанция.Владелец, "Юридический");		
		ДатаДоговора              = ПолучитьДату(СкладскаяКвитанция.ДатаДоговора);
		НомерДоговора             = СкладскаяКвитанция.НомерДоговора;		
		ВидХранения               = СкладскаяКвитанция.ВидХранения;
		ТипХранения               = СкладскаяКвитанция.ТипХранения;		
		Урожай                    = СокрЛП(СкладскаяКвитанция.Урожай);		
		ЗачетныйВес               = СтрЗаменить(СокрЛП(СкладскаяКвитанция.ЗачетныйВес), Символы.НПП, "");
		ФизическийВес             = СтрЗаменить(СокрЛП(СкладскаяКвитанция.ФизическийВес), Символы.НПП, "");		
		ЛабораторныйАнализ        = СкладскаяКвитанция.ЛабораторныйАнализ;
		Влажность                 = СокрЛП(СкладскаяКвитанция.Влажность);
		ЗерноваяПримесь           = СокрЛП(СкладскаяКвитанция.ЗерноваяПримесь);
		СорнаяПримесь             = СокрЛП(СкладскаяКвитанция.СорнаяПримесь);		
		ПечатьДоВостребования     = СкладскаяКвитанция.ПечатьДоВостребования;		
		ДатаВыдачи                = ПолучитьДату(СкладскаяКвитанция.ДатаВыдачи);		
		ПечатьВесаКВыдаче         = СкладскаяКвитанция.ПечатьВесаКВыдаче;
		Если ПечатьВесаКВыдаче Тогда
			Количество = НСтр("ru='согласно акта расчета ';uk='згідно акту розрахунку '", КодЯзыкаПечать);
		Иначе
			Количество = ИНАГРО_Элеватор.ВернутьВесПрописью("uk_UA", СкладскаяКвитанция.ФизическийВес);
		КонецЕсли;		
		Комментарий               = ?(СкладскаяКвитанция.Комментарий = "", "_", СкладскаяКвитанция.Комментарий);		
		КлассификаторЗерна        = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитНоменклатуры(СкладскаяКвитанция.Номенклатура, "КлассификаторЗерна");
		ИдентификаторВидаЗерна    = Число(?(КлассификаторЗерна = NULL, 0, КлассификаторЗерна.ИндексВидаЗерна));
		ИдентификаторКлассаЗерна  = Число(?(КлассификаторЗерна = NULL, 0, КлассификаторЗерна.Код));
		
		// Характеристики
		
		СтруктураХарактеристик = Новый Структура;
		
		Инд = 0;
		Для Каждого СтрокаЛабАнализа Из СкладскаяКвитанция.Характеристики Цикл
			Если ЗначениеЗаполнено(СтрокаЛабАнализа.Характеристика) Тогда
				Характеристика = ПланыВидовХарактеристик.ИНАГРО_ХарактеристикиВидовКультур.ПолучитьИмяПредопределенного(СтрокаЛабАнализа.Характеристика);
				Если Характеристика = "" Тогда
					Инд = Инд + 1;
					Характеристика = "ХарактеристикаДоп" + Инд;	
				КонецЕсли;
				СтруктураХарактеристик.Вставить(Характеристика, (?(ЗначениеЗаполнено(СтрокаЛабАнализа.Характеристика.КраткоеНаименование),
				СокрЛП(СтрокаЛабАнализа.Характеристика.КраткоеНаименование + "-"),
				СокрЛП(СтрокаЛабАнализа.Характеристика.Наименование + "-")) + СокрЛП(СтрокаЛабАнализа.Значение)));
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ВсеЗаполнено Тогда
			Продолжить;
		КонецЕсли;		
		
		// Запись в XML
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
		// <!--  Серія та номер документу 
		ЗаписатьЗначениеXML(ЗаписьXML, "Document_Seria_Number", СерияИНомер);
		Заполнен(СкладскаяКвитанция, СерияИНомер, НСтр("ru='серия и номер';uk='серія і номер'"));              
		ЗаписатьЗначениеXML(ЗаписьXML, "Current_Number", НомерДок);
		// <!-- 		тип документа
		// 1 - Квитанція
		// 2 - Просте свідоцтво
		// 3 - Подвійне свідоцтво
		ЗаписатьЗначениеXML(ЗаписьXML,"Document_Type", ТипДокумента);
		
		// <!--  тільки квітанція: номер накладної
		Если ТипДокумента = 1 Тогда
			ЗаписатьЗначениеXML(ЗаписьXML, "Invoice_Number", НомерНакладной);
			Заполнен(СкладскаяКвитанция, НомерНакладной, НСтр("ru='номер накладной';uk='номер накладної'"));       
		КонецЕсли;
		// <!--  дата прийняття зернаі 
		ЗаписатьЗначениеXML(ЗаписьXML, "Grain_Receive_Date", ПолучитьДату(ДатаДокумента));
		
		// <!-- 		тип зерна
		// 1 - Звичайне
		// 2 - Зерно державного аграрного фонду
		// 3 - Регіональний контракт 		
		СобственноеПодразделение = ИНАГРО_Элеватор.ПолучитьДополнительныйРеквизитКонтрагента(Владелец, "СобственноеПодразделение"); // !!!!!
		Если СобственноеПодразделение Тогда
			ЗаписатьЗначениеXML(ЗаписьXML, "Grain_Type", "4");
		Иначе	
			ЗаписатьЗначениеXML(ЗаписьXML, "Grain_Type", СокрЛП(ВидХранения.DRU_КодВидаХранения));
		КонецЕсли;	
		Заполнен(СкладскаяКвитанция, ВидХранения.DRU_КодВидаХранения, НСтр("ru='код вида хранения';uk='код виду зберігання'"));  
		// <!--  Ідентифікатор виду зерна 
		ЗаписатьЗначениеXML(ЗаписьXML, "Grain_Kind", ИдентификаторВидаЗерна);
		Заполнен(СкладскаяКвитанция, ИдентификаторВидаЗерна, НСтр("ru='идентификатор вида зерна';uk='ідентифікатор виду зерна'"));   
		// <!--  Ідентифікатор класу зерна 
		ЗаписатьЗначениеXML(ЗаписьXML, "Grain_Class",ИдентификаторКлассаЗерна);
		Заполнен(СкладскаяКвитанция, ИдентификаторВидаЗерна, НСтр("ru='идентификатор класса зерна';uk='ідентифікатор класу зерна'"));      
		// <!--  Рік врожаю 
		ЗаписатьЗначениеXML(ЗаписьXML, "Harvest_Year", Урожай);
		Заполнен(СкладскаяКвитанция, Урожай, "урожай");
		// <!--  вага зерна залікова 
		ЗаписатьЗначениеXML(ЗаписьXML, "Grain_Weight", ЗачетныйВес);
		Заполнен(СкладскаяКвитанция, ЗачетныйВес, НСтр("ru='зачетный вес';uk='залікова вага'"));   
		// <!--  вага зерна фізична 
		ЗаписатьЗначениеXML(ЗаписьXML, "Grain_Weight_All", ФизическийВес);
		Заполнен(СкладскаяКвитанция,ФизическийВес, НСтр("ru='физический вес';uk='фізична вага'"));      
		// <!-- 		інші показники якості зерна
		// в квитанції використовується тільки якщо тег Grain_Protein відсутній
		// в свідоцтві використовується завжди  
		
		Если ТипДокумента = 1 Тогда
			ДругиеПоказателиКачества = ?(ТипДокумента = 1, СформироваПоказателиКачества(СтруктураХарактеристик), "");		
			ЗаписатьЗначениеXML(ЗаписьXML, "Grain_Quality_Other", ДругиеПоказателиКачества);
		Иначе
			//ЗаписатьЗначениеXML(XML, "Grain_Quality_Other","");
		КонецЕсли; 
		
		/////////////////////////////////////////////////////////////
		// <!--  кількість зерна для видачі   
		ЗаписатьЗначениеXML(ЗаписьXML, "Grain_For_Issue", Количество);
		// <!--  номер документа, що засвідчує якість зерна 
		ЗаписатьЗначениеXML(ЗаписьXML, "Attest_Document_Number", ИНАГРО_Общий.ВернутьКодБезПрефикса(ЛабораторныйАнализ.Номер, Объект.КоличествоСимволовНомераЛабораторногоАнализа));
		// <!--  назва документа, що засвідчує якість зерна 			
		ЗаписатьЗначениеXML(ЗаписьXML, "Attest_Document_Name", "Аналізна картка");
		// <!--  дата документа, що засвідчує якість зерна 
		ЗаписатьЗначениеXML(ЗаписьXML, "Attest_Document_Date", ПолучитьДату(ЛабораторныйАнализ.Дата));
		// <!--  ким видано документ, що засвідчує якість зерна 
		ЗаписатьЗначениеXML(ЗаписьXML, "Attest_Document_Issuer", "" + "ВТЛ " + Организация);
		// <!--  кінцева дата зберігання зерна 		
		Если НЕ ПечатьДоВостребования Тогда
			//xml.ЗаписатьЗначение("STORAGE_TERM", "до запитання");
		ИначеЕсли ПечатьДоВостребования Тогда
			ЗаписатьЗначениеXML(ЗаписьXML, "Shelf_Life_Date", ДатаВыдачи);
		КонецЕсли;
		// <!-- тип зберігання 
		// 1 - 'Відокремлене' 
		// 2 - 'Знеособлене'
		Если ТипХранения = Перечисления.ИНАГРО_ТипыХранения.Обезличенное Тогда
			ЗаписатьЗначениеXML(ЗаписьXML, "Storage_Type", "2");
		ИначеЕсли ТипХранения = Перечисления.ИНАГРО_ТипыХранения.Раздельное Тогда
			ЗаписатьЗначениеXML(ЗаписьXML, "Storage_Type", "1");
		КонецЕсли;
		// <!--  примітки 
		ЗаписатьЗначениеXML(ЗаписьXML, "Description", Комментарий);
		
		Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			ЗаписатьЗначениеXML(ЗаписьXML, "Client_Type", 2);
			ЗаписатьЗначениеXML(ЗаписьXML, "Client_Code", СокрЛП(ИНН));	
		Иначе
			//	 <!-- тип особи (значения common.DICTIONARIES.VALUE при DOMAIN = 'DIC_SU_TYPE' ):1 - 'Юридична особа';2 - 'Фізична особа'
			ЗаписатьЗначениеXML(ЗаписьXML, "Client_Type", 1);
			// - <!--  код ЄДРПОУ/ідентиф.код клієнта (поклажедавця) 
			ЗаписатьЗначениеXML(ЗаписьXML, "Client_Code", СокрЛП(ЕДРПОУ));				
		КонецЕсли;
		
		// <!--  Назва організації/ПІБ особи клієнта (поклажедавця)
		ЗаписатьЗначениеXML(ЗаписьXML, "Client_Name", Владелец);
		// <!--  адреса клієнта (поклажедавця)
		ЗаписатьЗначениеXML(ЗаписьXML, "Client_Address", Адрес); 			
		// <!--  номер договору з клієнтом (поклажедавцем) 
		ЗаписатьЗначениеXML(ЗаписьXML, "Agreement_Number", НомерДоговора);
		// <!--  дата договору з клієнтом (поклажедавцем) 
		ЗаписатьЗначениеXML(ЗаписьXML, "Agreement_Date", ДатаДоговора);
		// <!--  Надходженя зерна (поклажедавцем)
		// 1 - Да
		// 0 - Нет
		Если ТипЗнч(СкладскаяКвитанция.ДокументОснование)=Тип("ДокументСсылка.ИНАГРО_РеестрТТНВвоз")
			//ИЛИ ТипЗнч(СкладскаяКвитанция.ДокументОснование)=Тип("ДокументСсылка.ИНАГРО_ТТНВвоз") 
			ИЛИ ТипЗнч(СкладскаяКвитанция.ДокументОснование)=Тип("ДокументСсылка.ИНАГРО_РеестрТТНВвозЖД") Тогда
			ЗаписатьЗначениеXML(ЗаписьXML, "Revenue", "1");
		Иначе
			ЗаписатьЗначениеXML(ЗаписьXML, "Revenue", "0");
		КонецЕсли;
		
		// <!-- показники якості зерна
		ЗаписьXML.ЗаписатьНачалоЭлемента("GrainParameters");
		Для Каждого СтрСсылкаЛабАнализ Из СкладскаяКвитанция.Характеристики Цикл
			
			Значение1 = СтрСсылкаЛабАнализ.Характеристика.DRU_КодХарактеристикиСкладскойКвитанции;
			Значение2 = СтрСсылкаЛабАнализ.Характеристика.DRU_КодХарактеристикиСкладскогоСвидетельства;
			Значение3 = СтрСсылкаЛабАнализ.Характеристика.DRU_ТипХарактеристики;
			
			ЗаписьРегистра = РегистрыСведений.ИНАГРО_ДополнительныеРеквизитыНоменклатуры.Получить(Новый Структура("Номенклатура", СкладскаяКвитанция.Номенклатура)); 
			Если НЕ ЗаписьРегистра = Неопределено Тогда
				Если НЕ ЗаписьРегистра.ВидКультуры.Пустая() Тогда
					НайденныеСтроки = ЗаписьРегистра.ВидКультуры.ВидыХарактеристик.НайтиСтроки(Новый Структура("ВидХарактеристики",СтрСсылкаЛабАнализ.Характеристика));	
					Если НайденныеСтроки.Количество()>0 Тогда
						Значение1 = ?(ЗначениеЗаполнено(НайденныеСтроки[0].DRU_КодХарактеристикиСкладскойКвитанции),	  НайденныеСтроки[0].DRU_КодХарактеристикиСкладскойКвитанции, Значение1);
						Значение2 = ?(ЗначениеЗаполнено(НайденныеСтроки[0].DRU_КодХарактеристикиСкладскогоСвидетельства), НайденныеСтроки[0].DRU_КодХарактеристикиСкладскогоСвидетельства, Значение2);
						Значение3 = ?(ЗначениеЗаполнено(НайденныеСтроки[0].DRU_ТипХарактеристики), 						  НайденныеСтроки[0].DRU_ТипХарактеристики, Значение3);
					КонецЕсли; 
				КонецЕсли;  
				
			КонецЕсли;
			
			Если Значение1 = 0 И Значение2 = 0 И Значение3 = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("GrainParameter");
			// <!-- код показника
			Если ТипДокумента = 1 Тогда
				ЗаписатьЗначениеXML(ЗаписьXML, "Id", СокрЛП(Значение1));
				Заполнен(СкладскаяКвитанция,Значение1, "код характеристики складской квитанции """ + СтрСсылкаЛабАнализ.Характеристика + """");
			Иначе
				ЗаписатьЗначениеXML(ЗаписьXML, "Id", СокрЛП(Значение2));
				Заполнен(СкладскаяКвитанция,Значение2, "код характеристики складского свидетельства """ + СтрСсылкаЛабАнализ.Характеристика + """");
			КонецЕсли;
			// <!-- тип показателя
			ЗаписатьЗначениеXML(ЗаписьXML, "TypeOfValue", СокрЛП(Значение3));
			Заполнен(СкладскаяКвитанция, Значение3, "тип характеристики """ + СтрСсылкаЛабАнализ.Характеристика + """");
			// <!-- значение показателя
			//ЗаписатьЗначениеXML(ЗаписьXML, "Value",НРег(СокрЛП(?(ТипДокумента = 1,СтрСсылкаЛабАнализ.Значение,СтрСсылкаЛабАнализ.ЗначениеХар))));
			ЗаписатьЗначениеXML(ЗаписьXML, "Value", НРег(СокрЛП(СтрСсылкаЛабАнализ.Значение))); 
			ЗаписьXML.ЗаписатьКонецЭлемента();
			
		КонецЦикла;  
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
		// Запишем и установим признак "Выгружено" документа который выгружаем
		ДокументОбъект = Документы[ИмяДокумента].НайтиПоНомеру(НомерДокумента, ДатаДокумента).ПолучитьОбъект();
		ДокументОбъект.ВыгруженоВАРМ = Истина;	
		ДокументОбъект.Записать();
		
		СтрокаТабличнойЧасти.Выгружено = Истина;
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();	
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Экспорт завершен! Выгружено %1 документов.';uk='Експорт завершено! Вивантажено %1 документів.'"), КоличествоДокументов);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения); 

	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
    АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ЭтотОбъект.УникальныйИдентификатор);
    
    УдалитьФайлы(ИмяВременногоФайла);
    
    Возврат АдресХранилища;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьПапку(Команда)
	
	ИмяКаталогаНаДиске = КаталогВыгрузкиДанных;
	
	КаталогНаДиске = Новый Файл(ИмяКаталогаНаДиске);
	Если КаталогНаДиске.Существует() Тогда
		Файлы = КаталогНаДиске.ПолноеИмя + "\";
		Попытка
			УдалитьФайлы(Файлы,"*.xml");
			УдалитьФайлы(Файлы,"*.bak");
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьВыборкуДокументов(СсылкаНач, ВидДокумента)
		
	Запрос = Новый Запрос();
		
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	" + ВидДокумента + ".Ссылка КАК Ссылка,
	|	" + ВидДокумента + ".Организация КАК Организация,
	|	" + ВидДокумента + ".Склад КАК Склад
	|ИЗ
	|	Документ." + ВидДокумента + " КАК " + ВидДокумента + "
	|
	|ГДЕ " + ВидДокумента + ".ПометкаУдаления = ЛОЖЬ
	|	 И " + ВидДокумента + ".Проведен = ИСТИНА
	|	 И " + ВидДокумента + ".ВыгруженоВАРМ = ЛОЖЬ
	|    И " + ВидДокумента + ".Организация = &Организация";
	
	Если СписокСкладов.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + " И " + ВидДокумента + ".Склад В (&Склад)"; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаНачала) И ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда		
		Запрос.Текст = Запрос.Текст + " И " + ВидДокумента + ".Дата >= &ДатаНачала
		|							    И " + ВидДокумента + ".Дата <= &ДатаОкончания";
	ИначеЕсли ЗначениеЗаполнено(Объект.ДатаНачала) И НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Запрос.Текст = Запрос.Текст + " И " + ВидДокумента + ".Дата >= &ДатаНачала";
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ДатаНачала) И ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Запрос.Текст = Запрос.Текст + " И " + ВидДокумента + ".Дата <= &ДатаНачала";
	КонецЕсли;	
	
	Запрос.Текст = Запрос.Текст + ?(СсылкаНач = Неопределено, "", "
	|И Ссылка > &СсылкаНач ");
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("СсылкаНач",     СсылкаНач);
	Запрос.УстановитьПараметр("ДатаНачала",    НачалоДня(Объект.ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.ДатаОкончания));
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Склад",         СписокСкладов);

	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

&НаСервере
Процедура ЗаписатьЗначениеXML(ЗаписьXML, Тег, Значение)
	
	ЗаписьXML.ЗаписатьНачалоЭлемента(Тег);
	ЗаписьXML.ЗаписатьТекст(XMLСтрока(Значение));
	ЗаписьXML.ЗаписатьКонецЭлемента();	
	
КонецПроцедуры

&НаСервере
Процедура Заполнен(СкладскаяКвитанция, ИмяРеквизита, Сообщение)
	
	Если НЕ ЗначениеЗаполнено(ИмяРеквизита) Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В %1 не заполнен - %2 .';uk='У %1 не заповнений - %2 .'"), СкладскаяКвитанция, Сообщение);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	   				
		ВсеЗаполнено = Ложь;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДату(Дата)
	
	Возврат ?(ЗначениеЗаполнено(Дата), (Формат(Дата, "ДЛФ = Д") + " 00:00:00"), "");	
	
КонецФункции

&НаСервере
Функция СформироваПоказателиКачества(СтруктураХарактеристик)
	
	СтрокаПоказателей = "";
	
	Для Каждого СтрокаСтруктуры Из СтруктураХарактеристик Цикл
		Если    СтрокаСтруктуры.Ключ = "Влажность"
			ИЛИ СтрокаСтруктуры.Ключ = "ЗерноваяПримесь"
			ИЛИ СтрокаСтруктуры.Ключ = "СорнаяПримесь"
			ИЛИ СтрокаСтруктуры.Ключ = "КлейковинаКоличество"
			ИЛИ СтрокаСтруктуры.Ключ = "КлейковинаКачество"
			ИЛИ СтрокаСтруктуры.Ключ = "Зараженность" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПоказателей = СтрокаПоказателей + ?(НЕ СтрокаПоказателей = "", "; ", "") + НРег(СокрЛП(СтрокаСтруктуры.Значение));
		
	КонецЦикла; 
	
	Если СтрокаПоказателей = "" Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрокаПоказателей;
	
КонецФункции 

#КонецОбласти