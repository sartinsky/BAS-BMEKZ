
&НаКлиенте
Процедура ДоговораПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
		
	ТекущиеДанные 				  = Элементы.Договора.ТекущиеДанные;
	ТекущиеДанныеТаблицыДоговоров = Элементы.ТаблицаДоговоров.ТекущиеДанные;
	
	мТекущиеДанныеДоговоров.СтавкаНДС 	= ТекущиеДанные.СтавкаНДС;
	мТекущиеДанныеДоговоров.ЗаТару 		= ТекущиеДанные.ЗаТару;
	мТекущиеДанныеДоговоров.Сумма 		= ТекущиеДанные.Сумма;
	мТекущиеДанныеДоговоров.СуммаНДС 	= ТекущиеДанные.СуммаНДС;
	Для каждого ДопПараметр Из ДопПараметры Цикл
		мТекущиеДанныеДоговоров.Вставить(ДопПараметр.Ключ, ТекущиеДанные[ДопПараметр.Ключ]);	
	КонецЦикла; 	
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные.Дата				 = ТекущиеДанныеТаблицыДоговоров.Дата;
		ТекущиеДанные.ДоговорКонтрагента = ТекущиеДанныеТаблицыДоговоров.ДоговорКонтрагента;
		ТекущиеДанные.Сделка			 = ТекущиеДанныеТаблицыДоговоров.Сделка;
		ТекущиеДанные.РасчетыВозврат	 = ТекущиеДанныеТаблицыДоговоров.РасчетыВозврат;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
		
	Если ТекущаяСтраница.Имя = "ГруппаСтраницаДополнительно" Тогда
		
		ТекущиеДанныеДоговора = Элементы.ТаблицаДоговоров.ТекущиеДанные;
		
		// Установим отбор в таблице формы Договора
		ОтборДоговора  = Новый Структура("Дата, ДоговорКонтрагента, Сделка, РасчетыВозврат");	
		
		ОтборДоговора.Дата					= ?(ТекущиеДанныеДоговора = Неопределено, '00010101', ТекущиеДанныеДоговора.Дата);
		ОтборДоговора.ДоговорКонтрагента 	= ?(ТекущиеДанныеДоговора = Неопределено, ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"), ТекущиеДанныеДоговора.ДоговорКонтрагента);
		ОтборДоговора.Сделка 				= ?(ТекущиеДанныеДоговора = Неопределено, Неопределено, ТекущиеДанныеДоговора.Сделка);
		ОтборДоговора.РасчетыВозврат 		= ?(ТекущиеДанныеДоговора = Неопределено, ПредопределенноеЗначение("Перечисление.РасчетыВозврат.ПустаяСсылка"), ТекущиеДанныеДоговора.РасчетыВозврат);
		
		Элементы.Договора.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборДоговора);		
		
		ОтобранныеСтрокиДоговоров = Объект.Договора.НайтиСтроки(ОтборДоговора);
		Если ОтобранныеСтрокиДоговоров.Количество() > 0 Тогда
			Элементы.Договора.ТекущаяСтрока = ОтобранныеСтрокиДоговоров[0].ПолучитьИдентификатор();
		КонецЕсли;
		
		ДоговораПриАктивизацииСтроки(Элементы.Договора);
		
		Если НЕ ТекущиеДанныеДоговора = Неопределено Тогда
			Элементы.ДекорацияИнфНадписьРеквизитыДокумента.Заголовок =
			?(Объект.РежимПоДатам, НСтр("ru='Дата: ';uk='Дата: '") + Формат(ТекущиеДанныеДоговора.Дата,"ДФ=dd.MM.yyyy") + ". ","")+
			
			НСтр("ru='Контрагент: ';uk='Контрагент: '") 		+ СокрЛП(ТекущиеДанныеДоговора.Контрагент) 			
			
			+НСтр("ru=', 
|Договор: ';uk=', 
|Договір: '") 		+ СокрЛП(ТекущиеДанныеДоговора.ДоговорКонтрагента) 	
			
			+НСтр("ru=', 
|Документ расчетов: ';uk=', 
|Документ розрахунків: '") 		+ СокрЛП(ТекущиеДанныеДоговора.Сделка) 	
			
			+НСтр("ru=', 
|Расчеты/возврат: ';uk=', 
|Розрахунки/повернення: '") + СокрЛП(ТекущиеДанныеДоговора.РасчетыВозврат);
		Иначе
		    Элементы.ДекорацияИнфНадписьРеквизитыДокумента.Заголовок = НСтр("ru='Договор не выбран.';uk='Договір не обраний.'")
		КонецЕсли;
		
	КонецЕсли; 	

КонецПроцедуры

&НаКлиенте
Процедура ДоговораПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанныеДоговораНаФорме = Элементы.Договора.ТекущиеДанные;
	
	СтруктураОтбора = Новый Структура("Дата, ДоговорКонтрагента, Сделка, РасчетыВозврат, СтавкаНДС, ЗаТару");
	
	СтруктураОтбора.Дата 				= ?(ТекущиеДанныеДоговораНаФорме = Неопределено, '00010101', ТекущиеДанныеДоговораНаФорме.Дата);
	СтруктураОтбора.ДоговорКонтрагента 	= ?(ТекущиеДанныеДоговораНаФорме = Неопределено, ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"), ТекущиеДанныеДоговораНаФорме.ДоговорКонтрагента);
	СтруктураОтбора.Сделка 				= ?(ТекущиеДанныеДоговораНаФорме = Неопределено, Неопределено, ТекущиеДанныеДоговораНаФорме.Сделка);
	СтруктураОтбора.РасчетыВозврат 		= ?(ТекущиеДанныеДоговораНаФорме = Неопределено, ПредопределенноеЗначение("Перечисление.РасчетыВозврат.ПустаяСсылка"), ТекущиеДанныеДоговораНаФорме.РасчетыВозврат);
	СтруктураОтбора.СтавкаНДС 			= ?(ТекущиеДанныеДоговораНаФорме = Неопределено, ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка"), ТекущиеДанныеДоговораНаФорме.СтавкаНДС);
	СтруктураОтбора.ЗаТару 				= ?(ТекущиеДанныеДоговораНаФорме = Неопределено, Ложь, ТекущиеДанныеДоговораНаФорме.ЗаТару);
	
	Если НЕ ТекущиеДанныеДоговораНаФорме = Неопределено Тогда
		Для каждого ДопПараметр Из ДопПараметры Цикл
			
			СтруктураОтбора.Вставить(ДопПараметр.Ключ, ТекущиеДанныеДоговораНаФорме[ДопПараметр.Ключ]);
			
		КонецЦикла; 	
	КонецЕсли;
	
	Элементы.ИсточникиНоменклатуры.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОбновить(Команда)
	
	ТекстПредупреждения = "";
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстПредупреждения = НСтр("ru='Не указана организация! Заполнение невозможно.';uk='Не зазначена організація! Заповнення неможливо.'");
	ИначеЕсли Объект.РежимПоДатам 
		И ((Объект.Дата = '00010101' ИЛИ Объект.ДатаКон = '00010101') ИЛИ Объект.ДатаКон < Объект.Дата) Тогда
		ТекстПредупреждения = НСтр("ru='Не правильно задан период или не заполнены даты начала и конца периода! Заполнение невозможно.';uk='Не правильно вказаний період або не заповнени дати початку чи кінця періоду! Заповнення неможливо.'");
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстПредупреждения) Тогда
		ДействиеОбновитьОкончание();
	Иначе
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ДействиеОбновитьОкончание", ЭтаФорма), ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОбновитьОкончание(Параметр = Неопределено) Экспорт
	
	ОбновитьДоговораНаСервереПоОтбору();
	
	ПерезаполнитьТаблицуДоговоров(Истина);
	
	ОбновитьСоставИсточниковНоменклатурыНаСервере();
	
	Если Объект.РежимПоДатам Тогда
		
		ТекущиеДанныеДоговора = Элементы.ТаблицаДоговоров.ТекущиеДанные;
	
		Если Не ТекущиеДанныеДоговора = Неопределено Тогда
		
			СтруктураОтбора = Новый Структура();
			СтруктураОтбора.Вставить("Дата",				ТекущиеДанныеДоговора.Дата); 
			СтруктураОтбора.Вставить("ДоговорКонтрагента",	ТекущиеДанныеДоговора.ДоговорКонтрагента); 
			СтруктураОтбора.Вставить("Сделка",				ТекущиеДанныеДоговора.Сделка); 
			СтруктураОтбора.Вставить("РасчетыВозврат",		ТекущиеДанныеДоговора.РасчетыВозврат); 
			
			ПерезаполнитьТаблицуДокументов(СтруктураОтбора);
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ТекущийЭлемент = Элементы.ГруппаСтраницаДанные;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьДоговораНаСервереПоОтбору()

	ОтборДоговоров = Объект.Договора.Выгрузить();
	КолонкиГруппировок = "Дата, ДоговорКонтрагента, Сделка, РасчетыВозврат, ЗаТару, СтавкаНДС";
	
	Для каждого ДопПараметр Из ДопПараметры Цикл
		КолонкиГруппировок = КолонкиГруппировок +"," + ДопПараметр.Ключ;
	КонецЦикла;
	ОтборДоговоров.Свернуть(КолонкиГруппировок, "");
	
	ОбновитьДоговораНаСервере(ОтборДоговоров);
	
КонецФункции

&НаКлиенте
Процедура ДействиеЗаполнить(Команда)
		
	ТекстПредупреждения = "";
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстПредупреждения = НСтр("ru='Не указана организация! Заполнение невозможно.';uk='Не зазначена організація! Заповнення неможливо.'");
	ИначеЕсли Объект.РежимПоДатам 
		И ((Объект.Дата = '00010101' ИЛИ Объект.ДатаКон = '00010101') ИЛИ Объект.ДатаКон < Объект.Дата) Тогда
		ТекстПредупреждения = НСтр("ru='Не правильно задан период или не заполнены даты начала и конца периода! Заполнение невозможно.';uk='Не правильно вказаний період або не заповнени дати початку чи кінця періоду! Заповнення неможливо.'");
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстПредупреждения) Тогда
		ДействиеЗаполнитьОкончание();
	Иначе
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ДействиеЗаполнитьОкончание", ЭтаФорма), ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеЗаполнитьОкончание(Параметр = Неопределено) Экспорт
	
	ОбновитьДоговораНаСервере();

    ПерезаполнитьТаблицуДоговоров();
	
	ОбновитьСоставИсточниковНоменклатурыНаСервере();
	
	ТекущийЭлемент = Элементы.ГруппаСтраницаДанные;
	
	Если ТаблицаДоговоров.Количество() > 0 Тогда
		Если Элементы.ТаблицаДоговоров.ТекущаяСтрока = Неопределено Тогда
			Элементы.ТаблицаДоговоров.ТекущаяСтрока = ТаблицаДоговоров[0].ПолучитьИдентификатор(); 
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьДоговораНаСервере(ОтборДоговоров = Неопределено)

	Обработки.ФормированиеНалоговыхНакладных.ОбновитьДоговора(Объект, ОтборДоговоров);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
		
	Если  Копирование 
	  ИЛИ Элементы.ТаблицаДоговоров.ТекущиеДанные = Неопределено Тогда
	  
	  Отказ = Истина;	
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	мТекущиеДанныеТаблицыДоговоров 	= Новый Структура("Дата, ДоговорКонтрагента, Сделка, РасчетыВозврат");
	мТекущиеДанныеТаблицыОтборов 	= Новый Структура("ДоговорКонтрагента, Контрагент");
	
	мТекущиеДанныеДоговоров		 	= Новый Структура("ЗаТару, СтавкаНДС, Сумма, СуммаНДС");
	
	ДопПараметры = Обработки.ФормированиеНалоговыхНакладных.ПолучитьДопПараметры();
	
	Для каждого ДопПараметр Из ДопПараметры Цикл
		мТекущиеДанныеДоговоров.Вставить(ДопПараметр.Ключ);	
	КонецЦикла; 
	
	мСписокКолонокПоСтавкамНДС = Новый Структура("НеНДСТара");
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Если Параметры.Свойство("Организация") Тогда
			Объект.Организация = Параметры.Организация;
		Иначе
			Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");	
		КонецЕсли; 
		
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Объект.ОбособленноеПодразделение) Тогда
		
		Если Параметры.Свойство("ОбособленноеПодразделение") Тогда
			Объект.ОбособленноеПодразделение = Параметры.ОбособленноеПодразделение;
		Иначе
			Объект.ОбособленноеПодразделение = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеОбособленноеПодразделениеОрганизации");	
		КонецЕсли; 
		
		Если НЕ Объект.ОбособленноеПодразделение.Владелец = Объект.Организация Тогда
			Объект.ОбособленноеПодразделение = Неопределено;				
		КонецЕсли; 
		
	КонецЕсли;
		
	СоздатьСтруктуруТаблицНаСервере();
	
	УправлениеФормой(ЭтаФорма);
	
	мТекущийРежимПоДатам = Объект.РежимПоДатам;
	
	
	 СоздатьСписокВыбораДляСтавкиНДСДоговоров(Элементы.ДоговораСтавкаНДС.СписокВыбора);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСписокВыбораДляСтавкиНДСДоговоров(Список)

	Список.Очистить();
	
	Для каждого СтавкаНДС Из Перечисления.СтавкиНДС Цикл
	
		Список.Добавить(СтавкаНДС);	
	
	КонецЦикла;
	
	Список.Вставить(0,Перечисления.СтавкиНДС.ПустаяСсылка(), НСтр("ru='Аванс';uk='Аванс'"));
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ПриИзмененииРежимаПоДатамНаСервере();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРежимаПоДатамНаСервере()
	
	

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ДействияПриОткрытииФормы()
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	ДействияПриОткрытииФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПриОткрытииФормы()

	ПерезаполнитьТаблицуДоговоров();
	ОбновитьСоставИсточниковНоменклатурыНаСервере();
	
	УстановитьДоступностьНаКлиенте();

КонецПроцедуры



&НаКлиенте
Процедура ПерезаполнитьТаблицуДоговоров(ТолькоОбновитьСуммы = Ложь)
	
	ТекущаяСтрока = Элементы.ТаблицаДоговоров.ТекущиеДанные;
	
	// запомним текущую строку
	СтруктураПоискаТекущейСтроки = Новый Структура();
	Если Не ТекущаяСтрока = Неопределено Тогда 
		Если Объект.РежимПоДатам Тогда
			СтруктураПоискаТекущейСтроки.Вставить("Дата", ТекущаяСтрока.Дата);
		Иначе	
			СтруктураПоискаТекущейСтроки.Вставить("Дата", Объект.Дата);
		КонецЕсли;
		СтруктураПоискаТекущейСтроки.Вставить("РасчетыВозврат",		ТекущаяСтрока.РасчетыВозврат);
		СтруктураПоискаТекущейСтроки.Вставить("ДоговорКонтрагента",	ТекущаяСтрока.ДоговорКонтрагента);
		СтруктураПоискаТекущейСтроки.Вставить("Сделка",				ТекущаяСтрока.Сделка);
	КонецЕсли;
		
	// Перезаполним таблицу
	Если ТолькоОбновитьСуммы Тогда
		ОчиститьСуммыВТаблицеДоговоров();
		Если НЕ Объект.РежимПоДатам Тогда
			
			Для каждого Строка Из ТаблицаДоговоров Цикл
			
				Строка.Дата = Объект.Дата;	
			
			КонецЦикла;
			
		КонецЕсли;
	Иначе	
		
		ТаблицаДоговоров.Очистить();
		
	КонецЕсли; 
		
	Для каждого СтрокаДоговоров Из Объект.Договора Цикл
		
		СтруктураПоиска = Новый Структура("Дата, РасчетыВозврат,ДоговорКонтрагента, Сделка",
		                                   СтрокаДоговоров.Дата,
										   СтрокаДоговоров.РасчетыВозврат,
										   СтрокаДоговоров.ДоговорКонтрагента,
										   СтрокаДоговоров.Сделка);
											
		НайденныеСтроки = ТаблицаДоговоров.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			// добавим новую строку
			СтрокаТаблицыДоговоров = ТаблицаДоговоров.Добавить();
			СтрокаТаблицыДоговоров.Дата			 	  = СтрокаДоговоров.Дата;
			СтрокаТаблицыДоговоров.РасчетыВозврат 	  = СтрокаДоговоров.РасчетыВозврат;
			СтрокаТаблицыДоговоров.ДоговорКонтрагента = СтрокаДоговоров.ДоговорКонтрагента;
			СтрокаТаблицыДоговоров.Сделка			  = СтрокаДоговоров.Сделка;
			
			СтруктураДанныхДоговора = ПолучитьРеквизитыДоговораНаСервере(СтрокаДоговоров.ДоговорКонтрагента);
			
			СтрокаТаблицыДоговоров.Контрагент 		  = СтруктураДанныхДоговора.Владелец;
			СтрокаТаблицыДоговоров.Схема		      = СтруктураДанныхДоговора.МоментОбязательств;
			СтрокаТаблицыДоговоров.СхемаТара	      = СтруктураДанныхДоговора.МоментОбязательствТара;
			СтрокаТаблицыДоговоров.Валюта		      = СтруктураДанныхДоговора.ВалютаВзаиморасчетов;
			СтрокаТаблицыДоговоров.ВедениеВзаиморасчетовНУ = СтруктураДанныхДоговора.ВедениеВзаиморасчетовНУ;
			
		Иначе
			// будем заполнять реквизиты существующей строки
			СтрокаТаблицыДоговоров = НайденныеСтроки[0];
		КонецЕсли;
		
		ВыделитьСтрокуДоговоров(СтрокаТаблицыДоговоров);					

		ЗаполнитьДанныеВСтрокеТаблицыДоговоров(СтрокаТаблицыДоговоров, СтрокаДоговоров);	
		
	КонецЦикла; 
	
	// попытаемся активировать бывшую текущую строку
	НайденныеСтроки = ТаблицаДоговоров.НайтиСтроки(СтруктураПоискаТекущейСтроки);
	Если НЕ НайденныеСтроки.Количество() = 0 Тогда
		Элементы.ТаблицаДоговоров.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПерезаполнитьТаблицуДокументов(СтруктураОтбора)
    // запомним текущую строку
	ТекущаяСтрока = Элементы.ТаблицаДокументов.ТекущиеДанные;
		
	СтруктураПоискаТекущейСтроки = Новый Структура();
	Если Не ТекущаяСтрока = Неопределено Тогда 
		СтруктураПоискаТекущейСтроки.Вставить("Дата", ТекущаяСтрока.Документ);
		СтруктураПоискаТекущейСтроки.Вставить("СуществующийДокумент", ТекущаяСтрока.СуществующийДокумент);
		СтруктураПоискаТекущейСтроки.Вставить("РасчетыВозврат", ТекущаяСтрока.РасчетыВозврат);
		СтруктураПоискаТекущейСтроки.Вставить("Документ", ТекущаяСтрока.Документ);
		СтруктураПоискаТекущейСтроки.Вставить("ДоговорКонтрагента", ТекущаяСтрока.ДоговорКонтрагента);
		СтруктураПоискаТекущейСтроки.Вставить("Сделка", ТекущаяСтрока.Сделка);
	КонецЕсли;
	
	// Перезаполним таблицу по переданной структуре отбора.
	ТаблицаДокументов.Очистить();
	
	ОтобранныеИсточникиНоменклатуры = Объект.ИсточникиНоменклатуры.НайтиСтроки(СтруктураОтбора);
	
	Если ОтобранныеИсточникиНоменклатуры = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Для каждого СтрокаДокументов Из ОтобранныеИсточникиНоменклатуры Цикл
		
		СтруктураПоиска = Новый Структура("Дата,СуществующийДокумент,РасчетыВозврат,Документ",
		                                   СтрокаДокументов.Дата,
										   СтрокаДокументов.СуществующийДокумент,
										   СтрокаДокументов.РасчетыВозврат,
										   СтрокаДокументов.Документ);
											
		НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			// добавим новую строку
			СтрокаТаблицыДокументов = ТаблицаДокументов.Добавить();
			СтрокаТаблицыДокументов.Дата		 		  = СтрокаДокументов.Дата;
			СтрокаТаблицыДокументов.СуществующийДокумент  = СтрокаДокументов.СуществующийДокумент;
			СтрокаТаблицыДокументов.РасчетыВозврат 		  = СтрокаДокументов.РасчетыВозврат;
			СтрокаТаблицыДокументов.ДоговорКонтрагента 	  = СтрокаДокументов.ДоговорКонтрагента;
			СтрокаТаблицыДокументов.Сделка 	 			  = СтрокаДокументов.Сделка;
			СтрокаТаблицыДокументов.Документ 			  = СтрокаДокументов.Документ;
			СтрокаТаблицыДокументов.БезДокументаОснования = (СтрокаДокументов.Документ = Неопределено);
		Иначе
			// будем заполнять реквизиты существующей строки
			СтрокаТаблицыДокументов = НайденныеСтроки[0];
		КонецЕсли;
		
		ЗаполнитьДанныеВСтрокеТаблицыДокументов(СтрокаТаблицыДокументов, СтрокаДокументов);
		
	КонецЦикла; 
	
	Для каждого СтрокаТаблицыДокументов Из ТаблицаДокументов Цикл
	
		Если     СтрокаТаблицыДокументов.СуществующийДокумент
			И НЕ СтрокаТаблицыДокументов.БезДокументаОснования Тогда
			СтрокаТаблицыДокументов.ОписаниеСуществующегоДокумента = ЗаполнитьОписаниеСуществующегоДокумента(СтрокаТаблицыДокументов.Документ, СтрокаТаблицыДокументов.РасчетыВозврат);	
		КонецЕсли;
	
	КонецЦикла;
	
	// попытаемся активировать бывшую текущую строку
	НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(СтруктураПоискаТекущейСтроки);
	Если НЕ НайденныеСтроки.Количество() = 0 Тогда
		Элементы.ТаблицаДокументов.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	РассчитатьИтогиПоТаблицеДокументов(ЭтаФорма, мСписокКолонокПоСтавкамНДС);		

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьОписаниеСуществующегоДокумента(Документ, РасчетыВозврат)

	Если РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
		ПредставлениеОснования = СокрЛП("" + Документ.ДокументОснование);
	Иначе	
		ПредставлениеОснования = СокрЛП("" + Документ.НалоговаяНакладная);
	КонецЕсли;
	
	Возврат  "" + Документ + Символы.ПС + "(" + 
				  НСтр("ru='док. основание: ';uk='док. підстава: '") +
				  ?(ПустаяСтрока(ПредставлениеОснования), НСтр("ru='не указан';uk='не зазначений'"), ПредставлениеОснования) + ")";

КонецФункции


&НаКлиенте
Процедура ПерезаполнитьСуммыВСтрокеТаблицыДокументов(СтрокаТаблицыДокументов)

	Если СтрокаТаблицыДокументов = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	// Очистим числовые показатели строки
	ОчиститьСуммыВСтрокеТаблицыДокументов(СтрокаТаблицыДокументов, мСписокКолонокПоСтавкамНДС);
	
	// Заполним новыми данными
	СтруктураОтбора = ПолучитьСтруктуруОтбораНоменклатуры(СтрокаТаблицыДокументов);		
	ОтобранныеИсточникиНоменклатуры = Объект.ИсточникиНоменклатуры.НайтиСтроки(СтруктураОтбора);
	
	Если ОтобранныеИсточникиНоменклатуры = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Для каждого СтрокаДокументов Из ОтобранныеИсточникиНоменклатуры Цикл

		 ЗаполнитьДанныеВСтрокеТаблицыДокументов(СтрокаТаблицыДокументов, СтрокаДокументов)
		
	КонецЦикла;
	
	РассчитатьИтогиПоТаблицеДокументов(ЭтаФорма, мСписокКолонокПоСтавкамНДС);		

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСуммыВСтрокеТаблицыДокументовНаСервере(СтрокаТаблицыДокументов)

	Если СтрокаТаблицыДокументов = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	// Очистим числовые показатели строки
	ОчиститьСуммыВСтрокеТаблицыДокументов(СтрокаТаблицыДокументов, мСписокКолонокПоСтавкамНДС);
	
	// Заполним новыми данными
	СтруктураОтбора = ПолучитьСтруктуруОтбораНоменклатуры(СтрокаТаблицыДокументов);		
	ОтобранныеИсточникиНоменклатуры = Объект.ИсточникиНоменклатуры.НайтиСтроки(СтруктураОтбора);
	
	Если ОтобранныеИсточникиНоменклатуры = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Для каждого СтрокаДокументов Из ОтобранныеИсточникиНоменклатуры Цикл

		 ЗаполнитьДанныеВСтрокеТаблицыДокументов(СтрокаТаблицыДокументов, СтрокаДокументов)
		
	КонецЦикла;
	
	РассчитатьИтогиПоТаблицеДокументов(ЭтаФорма, мСписокКолонокПоСтавкамНДС);		

КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьСуммыВСтрокеТаблицыДокументов(СтрокаТаблицыДокументов, СписокКолонокПоСтавкамНДС)

	СтрокаТаблицыДокументов.НеНДСТара  = 0;
	
	Для каждого Колонка  Из СписокКолонокПоСтавкамНДС Цикл
		
		ИмяКолонки = Колонка.Ключ;
		// очищаем только числовые значения
		СтрокаТаблицыДокументов[ИмяКолонки] = 0;
		
	КонецЦикла;	

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеВСтрокеТаблицыДокументов(СтрокаТаблицыДокументов, СтрокаДокументов)

	Если НЕ ЗначениеЗаполнено(СтрокаДокументов.СтавкаНДС) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонкиСуммы = ПолучитьИмяПеречисленияСтавкиНДС(СтрокаДокументов.СтавкаНДС);
	Если СтрокаДокументов.ЗаТару Тогда
		ИмяКолонкиСуммы = ИмяКолонкиСуммы + "Тара";
	КонецЕсли;
	
	Если НЕ СтрокаТаблицыДокументов.Свойство(ИмяКолонкиСуммы) Тогда
		Сообщить(НСтр("ru='Неверное имя колонки!';uk=""Невірне ім'я колонки!"""));
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыДокументов[ИмяКолонкиСуммы] = СтрокаТаблицыДокументов[ИмяКолонкиСуммы] + СтрокаДокументов.Сумма;
	
	Если НЕ СтрокаДокументов.СуммаНДС = 0 Тогда 
		
		ИмяКолонкиНДС = ИмяКолонкиСуммы+"СуммаНДС";
		Если НЕ СтрокаТаблицыДокументов.Свойство(ИмяКолонкиНДС) Тогда
			Сообщить(НСтр("ru='Неверное имя колонки!';uk=""Невірне ім'я колонки!"""));
			Возврат;
		КонецЕсли;
		
		СтрокаТаблицыДокументов[ИмяКолонкиНДС] = СтрокаТаблицыДокументов[ИмяКолонкиНДС] + СтрокаДокументов.СуммаНДС;
		
	КонецЕсли;

КонецПроцедуры	

&НаКлиенте
Процедура ОчиститьСуммыВТаблицеДоговоров()

	Для каждого СтрокаТаблицыДоговоров Из ТаблицаДоговоров Цикл
		
		СтрокаТаблицыДоговоров.Оплата 	  = 0;
		СтрокаТаблицыДоговоров.ОплатаТара = 0;
		СтрокаТаблицыДоговоров.НеНДСТара  = 0;
		
		Для каждого Колонка  Из мСписокКолонокПоСтавкамНДС Цикл
			
			ИмяКолонки = Колонка.Ключ;
			// очищаем только числовые значения
			СтрокаТаблицыДоговоров[ИмяКолонки] = 0;
			
		КонецЦикла;	
		
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеВСтрокеТаблицыДоговоров(СтрокаТаблицыДоговоров, СтрокаДоговоров, Суммировать = Истина)

	Знак = +1;
	Если НЕ Суммировать Тогда
		Знак = -1;
	КонецЕсли; 
	
	ИмяКолонкиСуммы = "";
	Если НЕ ЗначениеЗаполнено(СтрокаДоговоров.СтавкаНДС) Тогда
		Если СтрокаДоговоров.ЗаТару Тогда
			ИмяКолонкиСуммы = "ОплатаТара";
		Иначе
			ИмяКолонкиСуммы = "Оплата";
		КонецЕсли;
	Иначе
		ИмяКолонкиСуммы = ПолучитьИмяПеречисленияСтавкиНДС(СтрокаДоговоров.СтавкаНДС);
		Если СтрокаДоговоров.ЗаТару Тогда
			ИмяКолонкиСуммы = ИмяКолонкиСуммы + "Тара";
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ СтрокаТаблицыДоговоров.Свойство(ИмяКолонкиСуммы) Тогда
		Сообщить(НСтр("ru='Неверное имя колонки!';uk=""Невірне ім'я колонки!"""));
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыДоговоров[ИмяКолонкиСуммы] = СтрокаТаблицыДоговоров[ИмяКолонкиСуммы] + Знак*СтрокаДоговоров.Сумма;
	
	Если НЕ СтрокаДоговоров.СуммаНДС = 0 Тогда 
		
		ИмяКолонкиНДС = ИмяКолонкиСуммы + "СуммаНДС";
		Если НЕ мСписокКолонокПоСтавкамНДС.Свойство(ИмяКолонкиНДС) Тогда
			Сообщить(НСтр("ru='Неверное имя колонки!';uk=""Невірне ім'я колонки!"""));
			Возврат;
		КонецЕсли;
		
		СтрокаТаблицыДоговоров[ИмяКолонкиНДС] = СтрокаТаблицыДоговоров[ИмяКолонкиНДС] + Знак*СтрокаДоговоров.СуммаНДС;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоговоровПриАктивизацииСтроки(Элемент)
	
	// Установим отбор в таблице документов
	ТекущиеДанныеДоговора = Элементы.ТаблицаДоговоров.ТекущиеДанные;
	
	Если Не ТекущиеДанныеДоговора = Неопределено Тогда 
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Дата",				ТекущиеДанныеДоговора.Дата); 
		СтруктураОтбора.Вставить("ДоговорКонтрагента",	ТекущиеДанныеДоговора.ДоговорКонтрагента); 
		СтруктураОтбора.Вставить("Сделка",				ТекущиеДанныеДоговора.Сделка); 
		СтруктураОтбора.Вставить("РасчетыВозврат",		ТекущиеДанныеДоговора.РасчетыВозврат); 
		
		ПерезаполнитьТаблицуДокументов(СтруктураОтбора);
		
	Иначе
		
		ТаблицаДокументов.Очистить();
		
	КонецЕсли;
	
	УстановитьДоступностьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоговоровПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ТаблицаДоговоров.ТекущиеДанные;
	
    // Удалим информацию из договоров и источников
	// ИсточникиНоменклатуры + ТаблицаДокументов
	СтруктураОтбора = Новый Структура("Дата, ДоговорКонтрагента, Сделка, РасчетыВозврат");
	СтруктураОтбора.Дата			 	= ТекущиеДанные.Дата; 
	СтруктураОтбора.ДоговорКонтрагента 	= ТекущиеДанные.ДоговорКонтрагента; 
	СтруктураОтбора.Сделка 				= ТекущиеДанные.Сделка; 
	СтруктураОтбора.РасчетыВозврат 		= ТекущиеДанные.РасчетыВозврат; 
	
	СтрокиТаблицыДокументов = ТаблицаДокументов.НайтиСтроки(СтруктураОтбора);
	Для каждого Строка Из СтрокиТаблицыДокументов Цикл
		 УдалитьСтрокуИзТаблицыДокументов(ПолучитьСтруктуруОтбораНоменклатуры(Строка));
	КонецЦикла; 
	
	// Договора 
	СтрокиДоговоров = Объект.Договора.НайтиСтроки(СтруктураОтбора);
	Для каждого Строка Из СтрокиДоговоров Цикл
		 Объект.Договора.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуИзТаблицыДокументов(СтруктураУдаляемыхСтрок)
	
	Обработки.ФормированиеНалоговыхНакладных.УдалитьСтрокиТабличныхЧастейНоменклатуры(Объект, СтруктураУдаляемыхСтрок);
	Обработки.ФормированиеНалоговыхНакладных.УдалитьСтрокиТабличнойЧасти(Объект.ИсточникиНоменклатуры, СтруктураУдаляемыхСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоговоровПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ТаблицаДоговоров.ТекущиеДанные;
	
	мТекущиеДанныеТаблицыДоговоров.Дата			 		= ТекущиеДанные.Дата;
	мТекущиеДанныеТаблицыДоговоров.ДоговорКонтрагента 	= ТекущиеДанные.ДоговорКонтрагента;
	мТекущиеДанныеТаблицыДоговоров.Сделка 				= ТекущиеДанные.Сделка;
	мТекущиеДанныеТаблицыДоговоров.РасчетыВозврат 		= ТекущиеДанные.РасчетыВозврат;
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные.РасчетыВозврат = ПредопределенноеЗначение("Перечисление.РасчетыВозврат.Расчеты");
		
		Если Объект.РежимПоДатам Тогда
			
			ТекущиеДанные.Дата = НачалоДня(Объект.Дата);	
			
		Иначе
			
			ТекущиеДанные.Дата = Объект.Дата;	
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоговоровПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование  Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоговоровПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.ТаблицаДоговоров.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
	
		Отказ = Истина;
		Возврат;
	
	КонецЕсли;  
	
	Если ОтменаРедактирования Тогда
		// восстановим старые значения (кроме числовых)
		ТекущиеДанные.Дата				 = мТекущиеДанныеТаблицыДоговоров.Дата;	
		ТекущиеДанные.ДоговорКонтрагента = мТекущиеДанныеТаблицыДоговоров.ДоговорКонтрагента;	
		ТекущиеДанные.Сделка 			 = мТекущиеДанныеТаблицыДоговоров.Сделка;	
		ТекущиеДанные.РасчетыВозврат 	 = мТекущиеДанныеТаблицыДоговоров.РасчетыВозврат;		 
		
		Если ЗначениеЗаполнено(мТекущиеДанныеТаблицыДоговоров.ДоговорКонтрагента) Тогда
			СтруктураДанныхДоговора = ПолучитьРеквизитыДоговораНаСервере(мТекущиеДанныеТаблицыДоговоров.ДоговорКонтрагента);
			ТекущиеДанные.Контрагент 		 = СтруктураДанныхДоговора.Владелец;
			ТекущиеДанные.Схема		     	 = СтруктураДанныхДоговора.МоментОбязательств;
			ТекущиеДанные.СхемаТара	      	 = СтруктураДанныхДоговора.МоментОбязательствТара;
			ТекущиеДанные.Валюта		      = СтруктураДанныхДоговора.ВалютаВзаиморасчетов;
			ТекущиеДанные.ВедениеВзаиморасчетовНУ = СтруктураДанныхДоговора.ВедениеВзаиморасчетовНУ;
		КонецЕсли;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекущиеДанные.Дата)
		    И Объект.РежимПоДатам  Тогда
		// Нальзя оставлять строку с незаполненной датой в этом случае
		
		Отказ = Истина;
		Сообщить(НСтр("ru='Необходимо указать дату!';uk='Необхідно вказати дату!'"));
		
		
	ИначеЕсли  НЕ ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента)
		   ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.РасчетыВозврат) Тогда
		// Нальзя оставлять строку с незаполненными реквизитами "ДоговорКонтрагента", РасчетыВозврат
		
		Отказ = Истина;
		Сообщить(НСтр("ru='Необходимо выбрать Договор и указать значние в поле ""Расчеты/возврат""!';uk='Необхідно вибрати Договір і вказати значення в поле ""Розрахунки/повернення""!'"));
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекущиеДанные.Сделка)
		    И (ТекущиеДанные.ВедениеВзаиморасчетовНУ = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоРасчетнымДокументам")) Тогда
					
		// Нальзя оставлять строку с незаполненной Сделкой		
		Отказ = Истина;
		Сообщить(НСтр("ru='Необходимо указать документ расчетов!';uk='Необхідно зазначити документ розрахунків!'"));
		
	ИначеЕсли   НЕ ТекущиеДанные.ДоговорКонтрагента = мТекущиеДанныеТаблицыДоговоров.ДоговорКонтрагента	
		    ИЛИ НЕ ТекущиеДанные.Сделка 			= мТекущиеДанныеТаблицыДоговоров.Сделка	
		    ИЛИ НЕ ТекущиеДанные.РасчетыВозврат 	= мТекущиеДанныеТаблицыДоговоров.РасчетыВозврат	
			ИЛИ ( Объект.РежимПоДатам И НЕ (ТекущиеДанные.Дата = мТекущиеДанныеТаблицыДоговоров.Дата)) Тогда
			
			Если ТекущиеДанные.ВедениеВзаиморасчетовНУ = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом") Тогда
				 ТекущиеДанные.Сделка = Неопределено;
			КонецЕсли;
			
			// Изменили ключевые поля
			// если такая строка в таблице договоров уже имеется - нужно продолжить редактирование				
			СтруктураОтбора = Новый Структура("Дата, ДоговорКонтрагента, Сделка, РасчетыВозврат");
			СтруктураОтбора.Дата 				= ТекущиеДанные.Дата;
			СтруктураОтбора.ДоговорКонтрагента 	= ТекущиеДанные.ДоговорКонтрагента;
			СтруктураОтбора.Сделка 				= ТекущиеДанные.Сделка;
			СтруктураОтбора.РасчетыВозврат		= ТекущиеДанные.РасчетыВозврат;
			Если ТаблицаДоговоров.НайтиСтроки(СтруктураОтбора).Количество() > 1 Тогда
				
				Отказ = Истина;
				Если НЕ Объект.РежимПоДатам Тогда
					Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Данные по договору: %1, Расчеты/возврат: %2 уже содержатся в таблице!';uk='Дані за договором: %1, Розрахунки/повернення: %2 вже містяться в таблиці!'"), ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.РасчетыВозврат));
				Иначе	
				    Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Данные за %3 по договору: %1, Расчеты/возврат: %2 уже содержатся в таблице!';uk='Дані за %3 за договором: %1, Розрахунки/повернення: %2 вже містяться в таблиці!'"), ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.РасчетыВозврат, Формат(ТекущиеДанные.Дата, "ДФ=dd.MM.yyyy")));
				КонецЕсли;
				
			Иначе	    	
				
				// нужно удалить старые данные и подготовить новые
				СтруктураОтбораСтарыхСтрок = Новый Структура("Дата, ДоговорКонтрагента, Сделка, РасчетыВозврат");
				СтруктураОтбораСтарыхСтрок.Дата				 	= мТекущиеДанныеТаблицыДоговоров.Дата;
				СтруктураОтбораСтарыхСтрок.ДоговорКонтрагента 	= мТекущиеДанныеТаблицыДоговоров.ДоговорКонтрагента;
				СтруктураОтбораСтарыхСтрок.Сделка 				= мТекущиеДанныеТаблицыДоговоров.Сделка;
				СтруктураОтбораСтарыхСтрок.РасчетыВозврат		= мТекущиеДанныеТаблицыДоговоров.РасчетыВозврат;
				
				// ИсточникиНоменклатуры + ТаблицаДокументов
				СтрокиТаблицыДокументов = ТаблицаДокументов.НайтиСтроки(СтруктураОтбораСтарыхСтрок);
				Для каждого Строка Из СтрокиТаблицыДокументов Цикл
					УдалитьСтрокуИзТаблицыДокументов(ПолучитьСтруктуруОтбораНоменклатуры(Строка));
				КонецЦикла; 
				
				// В строках Договоров старые дата/договор/ВидРасчетов заменим на новые
				// мы же суммы не меняли.
                СтарыеСтрокиДоговоров = Объект.Договора.НайтиСтроки(СтруктураОтбораСтарыхСтрок);
			Для каждого Строка Из СтарыеСтрокиДоговоров Цикл
					Строка.Дата				 	= ТекущиеДанные.Дата;
					Строка.ДоговорКонтрагента 	= ТекущиеДанные.ДоговорКонтрагента;
					Строка.Сделка		 		= ТекущиеДанные.Сделка;
					Строка.РасчетыВозврат		= ТекущиеДанные.РасчетыВозврат;
				КонецЦикла; 
				
				Если ТекущиеДанные.РасчетыВозврат = ПредопределенноеЗначение("Перечисление.РасчетыВозврат.Расчеты") Тогда
					СтрокаИсточниковНоменклатуры 						= Объект.ИсточникиНоменклатуры.Добавить();
					СтрокаИсточниковНоменклатуры.Дата				 	= СтруктураОтбора.Дата;
					СтрокаИсточниковНоменклатуры.ДоговорКонтрагента 	= СтруктураОтбора.ДоговорКонтрагента;
					СтрокаИсточниковНоменклатуры.Сделка 				= СтруктураОтбора.Сделка;
					СтрокаИсточниковНоменклатуры.РасчетыВозврат 		= СтруктураОтбора.РасчетыВозврат;
					СтрокаИсточниковНоменклатуры.Документ	 	 		= Неопределено;	
				КонецЕсли;
				
				ПерезаполнитьТаблицуДокументов(СтруктураОтбора);
				УстановитьДоступностьНаКлиенте();

			КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ  И НЕ ОтменаРедактирования Тогда
		
		//добавим в договора строку, если  ее еще там нет
		СтруктураОтбора = Новый Структура("Дата, ДоговорКонтрагента, Сделка, РасчетыВозврат");
		СтруктураОтбора.Дата 				= ТекущиеДанные.Дата;
		СтруктураОтбора.ДоговорКонтрагента 	= ТекущиеДанные.ДоговорКонтрагента;
		СтруктураОтбора.Сделка 				= ТекущиеДанные.Сделка;
		СтруктураОтбора.РасчетыВозврат		= ТекущиеДанные.РасчетыВозврат;
        Если Объект.Договора.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
			СтрокаДоговоров = Объект.Договора.Добавить();
			
			СтрокаДоговоров.Дата			 	= СтруктураОтбора.Дата;
			СтрокаДоговоров.ДоговорКонтрагента 	= СтруктураОтбора.ДоговорКонтрагента;
			СтрокаДоговоров.Сделка 				= СтруктураОтбора.Сделка;
			СтрокаДоговоров.РасчетыВозврат		= СтруктураОтбора.РасчетыВозврат;
		КонецЕсли;
		
		ВыделитьСтрокуДоговоров(ТекущиеДанные);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьСтрокуДоговоров(СтрокаТаблицыДоговоров)
	
	// выделим строку
	СтрокаТаблицыДоговоров.ВыделятьСтроку = Ложь;
	
	СтруктураПоиска = Новый Структура("Дата, ДоговорКонтрагента, Сделка, РасчетыВозврат", СтрокаТаблицыДоговоров.Дата, СтрокаТаблицыДоговоров.ДоговорКонтрагента, СтрокаТаблицыДоговоров.Сделка, СтрокаТаблицыДоговоров.РасчетыВозврат);
	СтрокиИсточниковНоменклатуры = Объект.ИсточникиНоменклатуры.НайтиСтроки(СтруктураПоиска);
	Для каждого Строка Из СтрокиИсточниковНоменклатуры Цикл
	
		Если Строка.Сумма > 0 ИЛИ Строка.СуммаНДС > 0 Тогда
		
			СтрокаТаблицыДоговоров.ВыделятьСтроку = Истина;		
			Прервать;
		
		КонецЕсли; 
	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставИсточниковНоменклатурыНаСервере()

	Обработки.ФормированиеНалоговыхНакладных.ОбновитьСоставИсточниковНоменклатуры(Объект);

КонецПроцедуры

&НаСервере
Процедура СоздатьСтруктуруТаблицНаСервере()
	
	////////////////////////////
	// СОЗДАНИЕ СТРУКТУРЫ ТАБЛИЦ
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КвалификаторЧисла = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный);
	ТипЧисловойКолонкиТаблиц = Новый ОписаниеТипов(МассивТипов, КвалификаторЧисла);
	
	МассивТиповДляКолонкиДокумент = Новый Массив();
	Для каждого ДопустимыйТип из Обработки.ФормированиеНалоговыхНакладных.ПолучитьДопустимыеТипыДокументов() Цикл
		МассивТиповДляКолонкиДокумент.Добавить(ДопустимыйТип);	
	КонецЦикла; 
	МассивТиповДляКолонкиДокумент.Добавить(Тип("ДокументСсылка.Приложение2КНалоговойНакладной"));		
	
	
	///////////////////////////////////////////////
	///////////////////////////////////////////////
	// Создадим струтуру 
	// ТаблицаДоговоров и ТаблицыДокументов
	
	МассивДобавленныхРеквизитов = Новый Массив();
	
	// реквизит для итога
	мСписокКолонокПоСтавкамНДС = Новый Структура("НеНДСТара");
	Реквизит = Новый РеквизитФормы("ИтогиТаблицаДокументовНеНДСТара", ТипЧисловойКолонкиТаблиц);            	
	МассивДобавленныхРеквизитов.Добавить(Реквизит);
	
	Для каждого СтавкаНДС Из Метаданные.Перечисления.СтавкиНДС.ЗначенияПеречисления Цикл
		
		ИмяКолонки	 	 = СтавкаНДС.Имя;
		ЗаголовокКолонки = Строка(Перечисления.СтавкиНДС[ИмяКолонки]);  
		
		Реквизит = Новый РеквизитФормы(ИмяКолонки, ТипЧисловойКолонкиТаблиц, "ТаблицаДоговоров", ЗаголовокКолонки);            	
		МассивДобавленныхРеквизитов.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы(ИмяКолонки, ТипЧисловойКолонкиТаблиц, "ТаблицаДокументов", ЗаголовокКолонки);            	
		МассивДобавленныхРеквизитов.Добавить(Реквизит);
		
		// реквизит для итога
		мСписокКолонокПоСтавкамНДС.Вставить(ИмяКолонки);
		Реквизит = Новый РеквизитФормы("ИтогиТаблицаДокументов" + ИмяКолонки, ТипЧисловойКолонкиТаблиц);            	
		МассивДобавленныхРеквизитов.Добавить(Реквизит);
		
		
		Если НЕ УчетНДС.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС[ИмяКолонки]) = 0 Тогда
			
			мСписокКолонокПоСтавкамНДС.Вставить(ИмяКолонки + "СуммаНДС");
			
			// Ставка НДС отлична от 0. Добавим колонку с суммой НДС
			Реквизит = Новый РеквизитФормы(ИмяКолонки+"СуммаНДС", ТипЧисловойКолонкиТаблиц, "ТаблицаДоговоров", НСтр("ru='НДС (в т.ч.)';uk='ПДВ (у т.ч.)'"));
			МассивДобавленныхРеквизитов.Добавить(Реквизит);
			
			Реквизит = Новый РеквизитФормы(ИмяКолонки+"СуммаНДС", ТипЧисловойКолонкиТаблиц, "ТаблицаДокументов", НСтр("ru='НДС (в т.ч.)';uk='ПДВ (у т.ч.)'"));
			МассивДобавленныхРеквизитов.Добавить(Реквизит);
			
			// реквизит для итога
			мСписокКолонокПоСтавкамНДС.Вставить(ИмяКолонки + "СуммаНДС");
			Реквизит = Новый РеквизитФормы("ИтогиТаблицаДокументов" + ИмяКолонки+"СуммаНДС", ТипЧисловойКолонкиТаблиц);            	
			МассивДобавленныхРеквизитов.Добавить(Реквизит);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	
	Реквизит = Новый РеквизитФормы("Документ", 	Новый ОписаниеТипов(МассивТиповДляКолонкиДокумент), "ТаблицаДокументов", НСтр("ru='Документ основание';uk='Документ підстава'"));
	МассивДобавленныхРеквизитов.Добавить(Реквизит);
	
	МассивУдаляемыхРеквизитов = Новый Массив();
	
	ИзменитьРеквизиты(МассивДобавленныхРеквизитов, МассивУдаляемыхРеквизитов);

	//////////////////////////////////////////////
	// выводим колонки на форму
	
	ТекЭлемент = Элементы.Вставить("ТаблицаДокументовДокумент", Тип("ПолеФормы") ,Элементы.ТаблицаДокументов, Элементы.ТаблицаДокументовНеНДСТара);
	ТекЭлемент.ПутьКДанным = "ТаблицаДокументов.Документ";
	ТекЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	ТекЭлемент.КнопкаОткрытия = Истина;
	ТекЭлемент.РедактированиеТекста = Ложь;
	ТекЭлемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
	ТекЭлемент.УстановитьДействие("ПриИзменении", "ТаблицаДокументовДокументПриИзменении");
	ТекЭлемент.УстановитьДействие("НачалоВыбора", "ТаблицаДокументовДокументНачалоВыбора");
	ТекЭлемент.УстановитьДействие("Очистка", 	  "ТаблицаДокументовДокументОчистка");
	
	Для каждого СтавкаНДС Из Метаданные.Перечисления.СтавкиНДС.ЗначенияПеречисления Цикл
		
		ИмяКолонки	 	 = СтавкаНДС.Имя;
		
		// суммы по ставкам вставляем после определенных колонок
		ГруппаРеквизитовДоговора  = Элементы.Вставить("ТаблицаДоговоровГруппа"  + ИмяКолонки, Тип("ГруппаФормы"), Элементы.ТаблицаДоговоров,  Элементы.ТаблицаДоговоровГруппаАвансТара);
		ГруппаРеквизитовДокументы = Элементы.Вставить("ТаблицаДокументовГруппа" + ИмяКолонки, Тип("ГруппаФормы"), Элементы.ТаблицаДокументов, Элементы.ТаблицаДокументовНеНДСТара);
		
		ТекЭлемент = Элементы.Добавить("ТаблицаДоговоров" + ИмяКолонки, Тип("ПолеФормы"), ГруппаРеквизитовДоговора);
		ТекЭлемент.ПутьКДанным = "ТаблицаДоговоров." + ИмяКолонки;
		ТекЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		ТекЭлемент.ТолькоПросмотр = Истина;
		
		ТекЭлемент = Элементы.Добавить("ТаблицаДокументов" + ИмяКолонки, Тип("ПолеФормы"), ГруппаРеквизитовДокументы);
		ТекЭлемент.ПутьКДанным = "ТаблицаДокументов." + ИмяКолонки;
		ТекЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		ТекЭлемент.ТолькоПросмотр = Истина;
		ТекЭлемент.ПутьКДаннымПодвала = "ИтогиТаблицаДокументов" + ИмяКолонки;
		
		Если НЕ УчетНДС.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС[ИмяКолонки]) = 0 Тогда
			ТекЭлемент = Элементы.Добавить("ТаблицаДоговоров" + ИмяКолонки + "СуммаНДС", Тип("ПолеФормы"), ГруппаРеквизитовДоговора);
			ТекЭлемент.ПутьКДанным = "ТаблицаДоговоров." + ИмяКолонки + "СуммаНДС";
			ТекЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			ТекЭлемент.ТолькоПросмотр = Истина;
			
			ТекЭлемент = Элементы.Добавить("ТаблицаДокументов" + ИмяКолонки + "СуммаНДС", Тип("ПолеФормы"), ГруппаРеквизитовДокументы);
			ТекЭлемент.ПутьКДанным = "ТаблицаДокументов." + ИмяКолонки + "СуммаНДС";
			ТекЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			ТекЭлемент.ТолькоПросмотр = Истина;
			ТекЭлемент.ПутьКДаннымПодвала = "ИтогиТаблицаДокументов" + ИмяКолонки + "СуммаНДС";
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	
	Элементы.ПечататьНаПринтер.Доступность = Объект.ПечататьДокументы;
	
	Элементы.НадписьДатаПо.Видимость 			= Объект.РежимПоДатам;
	Элементы.ДатаКон.Видимость 					= Объект.РежимПоДатам;
	Элементы.ДействиеНастройкаПериода.Видимость = Объект.РежимПоДатам;
	
	Элементы.ГруппаТаблицыДоговоров.Заголовок	= ?(Объект.РежимПоДатам,НСтр("ru='Суммы возникших налоговых обязательств';uk=""Суми виниклих податкових зобов'язань"""),НСтр("ru='Суммы неподтвержденных налоговых обязательств (в гривнях)';uk=""Суми непідтверджених податкових зобов'язань (у гривнях)"""));
	Элементы.Дата.Заголовок 					= ?(Объект.РежимПоДатам, НСтр("ru='Период с';uk='Період з'"),НСтр("ru='Дата';uk='Дата'"));
	Элементы.Дата.Формат 						= ?(Объект.РежимПоДатам,"ДФ=dd.MM.yyyy","");
	Элементы.Дата.ФорматРедактирования 			= ?(Объект.РежимПоДатам,"ДФ=dd.MM.yyyy","");
	
	Элементы.ТаблицаДоговоровДата.Заголовок = ?(Объект.РежимПоДатам,НСтр("ru='За дату';uk='За дату'"),НСтр("ru='На дату:';uk='На дату:'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьНаКлиенте()

	ЕстьДокументы = ТаблицаДокументов.Количество();
	
	Элементы.ТаблицаДокументовИзменитьКоличествоПропорциональноБезУчетаВыбранного.Доступность = ЕстьДокументы;
	Элементы.ТаблицаДокументовИзменитьКоличествоПропорциональноСУчетомВыбранного.Доступность  = ЕстьДокументы;
	Элементы.ТаблицаДокументовИзменитьКоличествоПоВыписаннымНалоговымНакладным.Доступность    = ЕстьДокументы;
	
	Элементы.ТаблицаДокументовДействиеПодбор.Доступность = НЕ (Элементы.ТаблицаДоговоров.ТекущиеДанные = Неопределено);

КонецПроцедуры

&НаСервере
Функция МожноФормироватьНалоговыеНакладныеНаСервере(СтруктураОтбораДокументов)

	Возврат Обработки.ФормированиеНалоговыхНакладных.МожноФормироватьНалоговыеНакладные(Объект, СтруктураОтбораДокументов);

КонецФункции // ()


&НаКлиенте
Процедура ДействиеСформировать(Команда)
	
	СтруктураОтбора = Новый Структура();
	
	ТекстВопроса = "";
	Для каждого СтрокаТаблицыДоговоров Из ТаблицаДоговоров Цикл
		СтруктураОтбора.Вставить("Дата", 				СтрокаТаблицыДоговоров.Дата);	
		СтруктураОтбора.Вставить("ДоговорКонтрагента", 	СтрокаТаблицыДоговоров.ДоговорКонтрагента);	
		СтруктураОтбора.Вставить("Сделка", 				СтрокаТаблицыДоговоров.Сделка);	
		СтруктураОтбора.Вставить("РасчетыВозврат", 		СтрокаТаблицыДоговоров.РасчетыВозврат);	
		
		Если НЕ МожноФормироватьНалоговыеНакладныеНаСервере(СтруктураОтбора) Тогда
			Если НЕ ТекстВопроса = "" Тогда
				ТекстВопроса = ТекстВопроса  + Символы.ПС + Символы.ПС;	
			КонецЕсли;
			ТекстВопроса = НСтр("ru='Контрагент: ';uk='Контрагент: '") + ПолучитьКонтрагентаПоДоговору(СтруктураОтбора.ДоговорКонтрагента) + "," + Символы.ПС;
			Если Объект.РежимПоДатам Тогда
				ТекстВопроса = ТекстВопроса  + НСтр("ru='Дата: ';uk='Дата: '") + Формат(СтруктураОтбора.Дата,"ДФ=dd.MM.yyyy") + "," + Символы.ПС;				
			КонецЕсли;
			ТекстВопроса = ТекстВопроса  + НСтр("ru='Договор: ';uk='Договір: '") + СтруктураОтбора.ДоговорКонтрагента + "," + Символы.ПС;
			ТекстВопроса = ТекстВопроса  + НСтр("ru='Документ расчетов: ';uk='Документ розрахунків: '") + СтруктураОтбора.Сделка + "," + Символы.ПС;
			ТекстВопроса = ТекстВопроса  + НСтр("ru='Вид расчетов: ';uk='Вид розрахунків: '") + СтруктураОтбора.РасчетыВозврат + "." + Символы.ПС;
		КонецЕсли;
		                              
	КонецЦикла; 	
	
	Если ЗначениеЗаполнено(ТекстВопроса) Тогда
	
		ТекстВопроса = НСтр("ru='Cумма выбранной номенклатуры (с учетом аванса, в разрезе ставок НДС) превышает сумму неподтвержденных налоговых обязательств!';uk=""Сума обраної номенклатури (з урахуванням авансу, в розрізі ставок ПДВ) перевищує суму непідтверджених податкових зобов'язань!""")
					 + Символы.ПС
					 + Символы.ПС
					 + НСтр("ru='Сформировать налоговые накладные с указанным номенклатурным составом?';uk='Сформувати податкові накладні із вказаним номенклатурним складом?'")
					 + Символы.ПС
					 + Символы.ПС
					 + ТекстВопроса;
					 
		Оповещение = Новый ОписаниеОповещения("ДействиеСформироватьПослеЗакрытияВопроса", ЭтаФорма, Новый Структура());
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
					 
	 Иначе 
		 
		 ДействиеСформироватьПослеЗакрытияВопроса(КодВозвратаДиалога.Да);
					 
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте	
Процедура ДействиеСформироватьПослеЗакрытияВопроса(Ответ, ДопПараметры = Неопределено) Экспорт
	
	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// при интерактивном создании документов, даже если обработка была открыта при вводе на основании - документы должны быть записаны
	Объект.НеЗаписыватьДокументы = Ложь;
	
	МассивСозданныхДокументов = СформироватьНалоговыеДокументыНаСервере();
		
	// открываем документы
	Если Объект.ОткрыватьДокументы Тогда
		
		Для каждого Документ Из МассивСозданныхДокументов Цикл
			
			Если ТипЗнч(Документ) = Тип("ДокументСсылка.НалоговаяНакладная") Тогда
				ИмяДок = "НалоговаяНакладная";
			Иначе
				ИмяДок = "Приложение2КНалоговойНакладной";
			КонецЕсли;
			
			ОткрытьФорму("Документ." + ИмяДок + ".ФормаОбъекта", Новый Структура("Ключ", Документ));	
			
		КонецЦикла;
		
	Иначе// или сообщим о создании документов
		
		Для каждого Документ Из МассивСозданныхДокументов Цикл
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.КлючДанных = Документ;
			Сообщение.Текст = НСтр("ru='Создан документ: ';uk='Створений документ: '") + Документ;
			Сообщение.Сообщить();
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Объект.ПечататьДокументы Тогда
		
		МассивНН = Новый Массив;
		МассивП2 = Новый Массив;
		Для каждого Документ Из МассивСозданныхДокументов Цикл
			Если ТипЗнч(Документ) = Тип("ДокументСсылка.НалоговаяНакладная") Тогда
				МассивНН.Добавить(Документ);
			Иначе
				МассивП2.Добавить(Документ);				
			КонецЕсли;
		КонецЦикла;
		
		Если Объект.ПечататьДокументыНаПринтер Тогда
			
			Если МассивНН.Количество() > 0 Тогда
				УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.НалоговаяНакладная", "НалоговаяНакладная", МассивСозданныхДокументов);
			КонецЕсли;
			Если МассивП2.Количество() > 0 Тогда
				УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.Приложение2КНалоговойНакладной", "Приложение2КНалоговойНакладной", МассивСозданныхДокументов);
			КонецЕсли;
		Иначе
			Если МассивНН.Количество() > 0 Тогда
				УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.НалоговаяНакладная", "НалоговаяНакладная", МассивСозданныхДокументов, ЭтаФорма);
			КонецЕсли;
			Если МассивП2.Количество() > 0 Тогда
				УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.Приложение2КНалоговойНакладной", "Приложение2КНалоговойНакладной", МассивСозданныхДокументов, ЭтаФорма);
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ДействиеФормыСформироватьЗавершение",ЭтаФорма, МассивСозданныхДокументов.Количество());
	ПоказатьПредупреждение(Оповещение, НСтр("ru='Формирование документов закончено. Сформировано документов: ';uk='Формування документів закінчено. Сформовано документів: '") + МассивСозданныхДокументов.Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеФормыСформироватьЗавершение(КоличествоСформированныхДокументов) Экспорт
	
	Если КоличествоСформированныхДокументов > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Закрыть форму обработки?';uk='Закрити форму обробки?'");

		Оповещение = Новый ОписаниеОповещения("ДействиеСформироватьПослеФормированияПослеЗакрытияВопроса", ЭтаФорма, Новый Структура());
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		
	КонецЕсли	
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеСформироватьПослеФормированияПослеЗакрытияВопроса(Ответ, ДопПараметр = Неопределено) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		// закрываем форму
		мЗакрыватьФормуПринудительно = Истина;
		Закрыть();
					
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы Тогда
		Отказ = Модифицированность;
		Возврат;
	КонецЕсли;
	
	Если НЕ мЗакрыватьФормуПринудительно Тогда
		
		ТекстВопроса = НСтр("ru='Закрыть форму обработки?';uk='Закрити форму обробки?'");
		
		Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыПослеВопроса", ЭтаФорма, Новый Структура());
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыПослеВопроса(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		мЗакрыватьФормуПринудительно = Истина;
		Закрыть();
	КонецЕсли;

КонецПроцедуры


&НаСервере
Функция СформироватьНалоговыеДокументыНаСервере()

	МасивОбъектов =  Обработки.ФормированиеНалоговыхНакладных.СформироватьНалоговыеДокументы(Объект);		
	
	МассивСсылок = Новый Массив();
	Для каждого ТекОбъект Из МасивОбъектов Цикл
		МассивСсылок.Добавить(ТекОбъект.Ссылка);
	КонецЦикла;

	Возврат МассивСсылок;
	
КонецФункции // ()

&НаКлиенте
Процедура ДействиеНастройкаПериода(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Объект.Дата, Объект.ДатаКон);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ДействиеНастройкаПериода, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Объект.Дата = РезультатВыбора.НачалоПериода;
	Объект.ДатаКон = РезультатВыбора.КонецПериода;

КонецПроцедуры


&НаКлиенте
Процедура ТаблицаДоговоровРеквизитПриИзменении(Элемент)
	
	ИмяКолонки 	  = СтрЗаменить(Элемент.Имя, "ТаблицаДоговоров", "");
	
	ТекущаяСтрока = Элементы.ТаблицаДоговоров.ТекущиеДанные;

	Если ИмяКолонки = "ДоговорКонтрагента" Тогда
		
		ДанныеДоговора = ПолучитьРеквизитыДоговораНаСервере(ТекущаяСтрока.ДоговорКонтрагента);
		
		ТекущаяСтрока.Контрагент = ДанныеДоговора.Владелец;
		ТекущаяСтрока.Схема		 = ДанныеДоговора.МоментОбязательств;
		ТекущаяСтрока.СхемаТара	 = ДанныеДоговора.МоментОбязательствТара;
		ТекущаяСтрока.Валюта     = ДанныеДоговора.ВалютаВзаиморасчетов;
		ТекущаяСтрока.ВедениеВзаиморасчетовНУ = ДанныеДоговора.ВедениеВзаиморасчетовНУ;
		ТекущаяСтрока.Сделка	 = Неопределено;
		
	ИначеЕсли ИмяКолонки = "Контрагент" Тогда 
		
		Если НЕ ПолучитьРеквизитыДоговораНаСервере(ТекущаяСтрока.ДоговорКонтрагента).Владелец = ТекущаяСтрока.Контрагент Тогда
			
			ТекущаяСтрока.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
			
		КонецЕсли;
		
		ТекущаяСтрока.Сделка	 = Неопределено;
		
	ИначеЕсли ИмяКолонки = "Дата" Тогда  
		
		 ТекущаяСтрока.Дата = НачалоДня(ТекущаяСтрока.Дата);
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоговоровДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	МассивПараметров = Новый Массив();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец",    Элементы.ТаблицаДоговоров.ТекущиеДанные.Контрагент));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
	
	ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элемент.ПараметрыВыбора = ПараметрыВыбора;
 	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоговоровСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ПараметрыОбъекта = Новый Структура;
	ПараметрыОбъекта.Вставить("Дата"                 , Объект.Дата);
	ПараметрыОбъекта.Вставить("ДоговорКонтрагента"   , Элементы.ТаблицаДоговоров.ТекущиеДанные.ДоговорКонтрагента);
	ПараметрыОбъекта.Вставить("Контрагент"           , Элементы.ТаблицаДоговоров.ТекущиеДанные.Контрагент);
	ПараметрыОбъекта.Вставить("Организация"          , Объект.Организация);
	ПараметрыОбъекта.Вставить("ТипыДокументов"       , "Метаданные.Документы.НалоговаяНакладная.Реквизиты.Сделка.Тип");

	ПараметрыФормы = Новый Структура("ПараметрыОбъекта", ПараметрыОбъекта);
	ОткрытьФорму("Документ.ДокументРасчетовСКонтрагентом.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовДокументПриИзменении(Элемент)

	ДанныеСтроки = Элементы.ТаблицаДокументов.ТекущиеДанные;
	
	НовыйДокумент = ДанныеСтроки.Документ;
	
	// Дубли документов не допускаются
	СтруктураПоискаДублей = Новый Структура("Документ", НовыйДокумент);
	НайденныеСтроки = ТаблицаДокументов.НайтиСтроки(СтруктураПоискаДублей);
	Если НайденныеСтроки.Количество() > 1 Тогда
		
		Ошибка = Ложь;
		Если ДанныеСтроки.Документ = Неопределено Тогда
			Возврат;
		ИначеЕсли НайденныеСтроки.Количество() > 2 Тогда
			Ошибка = Истина;	
		ИначеЕсли НЕ НайденныеСтроки[0].СуществующийДокумент И НЕ НайденныеСтроки[1].СуществующийДокумент Тогда
			Ошибка = Истина;		
		КонецЕсли;
		
		Если Ошибка Тогда
			
			Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Документ %1 уже содержится в таблице!';uk='Документ %1 вже міститься в таблиці!'"), НовыйДокумент));
			ДанныеСтроки.Документ = мТекущийДокумент;
			
			Возврат;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мТекущийДокумент) Тогда
		//Удалим строки из табличных частей по старому документу
		СтруктураУдаляемыхСтрок = Новый Структура();
		СтруктураУдаляемыхСтрок.Вставить("Дата",				ДанныеСтроки.Дата);
		СтруктураУдаляемыхСтрок.Вставить("СуществующийДокумент", Ложь);
		СтруктураУдаляемыхСтрок.Вставить("Документ", 			мТекущийДокумент);
		СтруктураУдаляемыхСтрок.Вставить("РасчетыВозврат",  	ДанныеСтроки.РасчетыВозврат);
		СтруктураУдаляемыхСтрок.Вставить("ДоговорКонтрагента", 	ДанныеСтроки.ДоговорКонтрагента);
		СтруктураУдаляемыхСтрок.Вставить("Сделка", 				ДанныеСтроки.Сделка);
		
		УдалитьСтрокуИзТаблицыДокументов(ПолучитьСтруктуруОтбораНоменклатуры(СтруктураУдаляемыхСтрок));
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыйДокумент) Тогда
		// Добавим новые данные
		СтрокаИсточниковНоменклатуры = Объект.ИсточникиНоменклатуры.Добавить();
		СтрокаИсточниковНоменклатуры.Дата			    = ДанныеСтроки.Дата;
		СтрокаИсточниковНоменклатуры.СуществующийДокумент = Ложь;
		СтрокаИсточниковНоменклатуры.Документ 			= НовыйДокумент;
		СтрокаИсточниковНоменклатуры.ДоговорКонтрагента = ДанныеСтроки.ДоговорКонтрагента;
		СтрокаИсточниковНоменклатуры.Сделка				= ДанныеСтроки.Сделка;
		СтрокаИсточниковНоменклатуры.РасчетыВозврат 	= ДанныеСтроки.РасчетыВозврат;
		
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Дата", 				ДанныеСтроки.Дата);
		СтруктураОтбора.Вставить("СуществующийДокумент", Ложь);
		СтруктураОтбора.Вставить("Документ", 			НовыйДокумент);
		СтруктураОтбора.Вставить("РасчетыВозврат", 		ДанныеСтроки.РасчетыВозврат);
		СтруктураОтбора.Вставить("ДоговорКонтрагента", 	ДанныеСтроки.ДоговорКонтрагента);
		СтруктураОтбора.Вставить("Сделка", 				ДанныеСтроки.Сделка);
		
		ЗаполнитьТабличныеЧастиНаСервере(СтруктураОтбора);
		
	КонецЕсли;
	
	ПерезаполнитьСуммыВСтрокеТаблицыДокументов(ДанныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличныеЧастиНаСервере(СтруктураОтбора)
	
	Обработки.ФормированиеНалоговыхНакладных.ЗаполнитьТабличныеЧасти(Объект, СтруктураОтбора);	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеСтроки = Элементы.ТаблицаДокументов.ТекущиеДанные;
	
	мТекущийДокумент = ДанныеСтроки.Документ;
	
	СтандартнаяОбработка = Ложь;
	
	СписокТипов = ПолучитьСписокТиповДляВыбораДокументаОснования(ДанныеСтроки.РасчетыВозврат);
	
	Если СписокТипов.Количество() > 1 Тогда
	
		ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ТаблицаДокументовДокументНачалоВыбораВыборТипа", ЭтаФорма, Новый Структура("Элемент", Элемент)),
													   СписокТипов,
													   Элементы.ТаблицаДокументовДокумент);
	Иначе
		
		ТаблицаДокументовДокументНачалоВыбораЗавершение(СписокТипов[0].Значение, Элемент);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовДокументНачалоВыбораВыборТипа(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	ДанныеСтроки = Элементы.ТаблицаДокументов.ТекущиеДанные;

	Если ВыбранныйЭлемент = Неопределено Тогда // Отказ от выбора
		Возврат;
	КонецЕсли;
	
	ТаблицаДокументовДокументНачалоВыбораЗавершение(ВыбранныйЭлемент.Значение, ДополнительныеПараметры.Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовДокументНачалоВыбораЗавершение(ВыбранныйТип, Элемент)
	
	ДанныеСтроки = Элементы.ТаблицаДокументов.ТекущиеДанные;
	
	Если ТипЗнч(ДанныеСтроки.Документ) <> Тип("ДокументСсылка." + ВыбранныйТип) Тогда
		ДанныеСтроки.Документ = ПредопределенноеЗначение("Документ."+ВыбранныйТип+".ПустаяСсылка");
	КонецЕсли; 

	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ДоговорКонтрагента", ДанныеСтроки.ДоговорКонтрагента);
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Сделка) Тогда
		Если ТипЗнч(ДанныеСтроки.Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
			СтруктураОтбора.Вставить("Сделка", 			   ДанныеСтроки.Сделка);
			СтруктураОтбора.Вставить("СделкаПоРеализации", ДанныеСтроки.Сделка);
		КонецЕсли;
	КонецЕсли;
  	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Документ) Тогда
		ПараметрыОткрытия.Вставить("ТекущаяСтрока", ДанныеСтроки.Документ);
	КонецЕсли;
	
	ФормаВыбора = ОткрытьФорму("Документ."+ВыбранныйТип+".ФормаВыбора", ПараметрыОткрытия, Элемент);
 
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокТиповДляВыбораДокументаОснования(РасчетыВозврат)

	// Заполним возможный список типов документов, которые могут быть в этом реквизите.
	СписокТипов = Новый СписокЗначений;
	
	МассивТипов = Новый Массив();
    Если РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат Тогда
		// только Налоговые накладные
		МассивТипов.Добавить(Тип("ДокументСсылка.НалоговаяНакладная"));
	Иначе		
		МассивТипов = Обработки.ФормированиеНалоговыхНакладных.ПолучитьДопустимыеТипыДокументов();
	КонецЕсли; 
	
	Для каждого ЭлементМассива Из МассивТипов Цикл

		ПустоеЗначение = Новый(ЭлементМассива);
		ОбъектОписанияМетаданных = ПустоеЗначение.Метаданные();
		СписокТипов.Добавить(ОбъектОписанияМетаданных.Имя, ОбъектОписанияМетаданных.Представление());

	КонецЦикла; 
	
	Возврат СписокТипов;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаДокументовДокументОчистка(Элемент, СтандартнаяОбработка)

	ТекущаяСтрока = Элементы.ТаблицаДокументов.ТекущиеДанные;
	УдалитьСтрокуИзТаблицыДокументов(ПолучитьСтруктуруОтбораНоменклатуры(ТекущаяСтрока));

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовПриИзменении(Элемент)
	
	РассчитатьИтогиПоТаблицеДокументов(ЭтаФорма, мСписокКолонокПоСтавкамНДС);
	ВыделитьСтрокуДоговоров(Элементы.ТаблицаДоговоров.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтогиПоТаблицеДокументов(Форма, СписокКолонокПоСтавкамНДС)

	Для каждого Ставка Из СписокКолонокПоСтавкамНДС Цикл
		
		Форма["ИтогиТаблицаДокументов" + Ставка.Ключ] = Форма.ТаблицаДокументов.Итог(Ставка.Ключ);
	
	КонецЦикла;

КонецПроцедуры


&НаКлиенте
Процедура РежимПоДатамПриИзменении(Элемент)
	
	Если  Объект.Договора.Количество() > 0 И НЕ Объект.РежимПоДатам = мТекущийРежимПоДатам Тогда
		
		// нужно либо очистить все таблицы либо отказаться от изменения
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("РежимПоДатамПриИзмененииПослеЗакрытияВопроса", ЭтаФорма, Новый Структура());
		ПоказатьВопрос(Оповещение, НСтр("ru='При изменении режима работы все данные будут очищены. Продолжить?';uk='При зміні режима работи всі дані будуть очищені. Продовжити?'"), Режим);
		
		Возврат;

	КонецЕсли;

	мТекущийРежимПоДатам = Объект.РежимПоДатам;	
	
	УстановитьДоступностьНаКлиенте();
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры
	
&НаКлиенте
Процедура РежимПоДатамПриИзмененииПослеЗакрытияВопроса(Результат, Параметры) Экспорт
 	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.РежимПоДатам = мТекущийРежимПоДатам;
		
	Иначе
		
		Объект.Договора.Очистить();
	    ПерезаполнитьТаблицуДоговоров();
		
		ОбновитьСоставИсточниковНоменклатурыНаСервере();
		
	КонецЕсли;
	
	мТекущийРежимПоДатам = Объект.РежимПоДатам;	
	
	УстановитьДоступностьНаКлиенте();
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяПеречисленияСтавкиНДС(СтавкаНДС)
	
	Если СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0") Тогда
		Возврат "НДС0";
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС7") Тогда
		Возврат "НДС7";
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС14") Тогда
		Возврат "НДС14";
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20") Тогда
		Возврат "НДС20";
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НеНДС") Тогда
		Возврат "НеНДС";
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС") Тогда
		Возврат "БезНДС";
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруОтбораНоменклатуры(Данные)
	
	СтруктураОтбора = Новый Структура();
	
	СтруктураОтбора.Вставить("Дата",	 		   Данные.Дата);
	СтруктураОтбора.Вставить("СуществующийДокумент", Данные.СуществующийДокумент);
	СтруктураОтбора.Вставить("Документ", 		   Данные.Документ);
	СтруктураОтбора.Вставить("ДоговорКонтрагента", Данные.ДоговорКонтрагента);
	СтруктураОтбора.Вставить("Сделка", 			   Данные.Сделка);
	СтруктураОтбора.Вставить("РасчетыВозврат", 	   Данные.РасчетыВозврат);
	
	Возврат СтруктураОтбора;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыДоговораНаСервере(ДоговорКонтрагента)

	Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДоговорКонтрагента, "Владелец, ВедениеВзаиморасчетовНУ, ВалютаВзаиморасчетов, СхемаНалоговогоУчета, СхемаНалоговогоУчетаПоТаре");	
	
	Если НЕ ЗначениеЗаполнено(Данные.СхемаНалоговогоУчета) Тогда
		Данные.СхемаНалоговогоУчета = Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.ПустаяСсылка();	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Данные.СхемаНалоговогоУчетаПоТаре) Тогда
		Данные.СхемаНалоговогоУчетаПоТаре = Справочники.СхемыНалоговогоУчетаПоДоговорамКонтрагентов.ПустаяСсылка();	
	КонецЕсли;
	
	Данные.Вставить("МоментОбязательств", 		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.СхемаНалоговогоУчета, 		  "МоментОпределенияБазыНДСПоПродажам"));
	Данные.Вставить("МоментОбязательствТара", 	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Данные.СхемаНалоговогоУчетаПоТаре, "МоментОпределенияБазыНДСПоПродажам"));

	Возврат Данные;
	
КонецФункции 

&НаКлиенте
Процедура ТаблицаДокументовПередУдалением(Элемент, Отказ)
		
	ТекущиеДанныеТаблицыДокументов = Элементы.ТаблицаДокументов.ТекущиеДанные;

	УдалитьСтрокуИзТаблицыДокументов(ПолучитьСтруктуруОтбораНоменклатуры(ТекущиеДанныеТаблицыДокументов));
	
	Если  ТекущиеДанныеТаблицыДокументов.БезДокументаОснования Тогда
		// удалим содержимое
		Отказ = Истина;
		ОчиститьСуммыВСтрокеТаблицыДокументов(ТекущиеДанныеТаблицыДокументов, мСписокКолонокПоСтавкамНДС);
		
		СтрокаИсточниковНоменклатуры = Объект.ИсточникиНоменклатуры.Вставить(0);
		СтрокаИсточниковНоменклатуры.Дата				 	= ТекущиеДанныеТаблицыДокументов.Дата;
		СтрокаИсточниковНоменклатуры.ДоговорКонтрагента 	= ТекущиеДанныеТаблицыДокументов.ДоговорКонтрагента;
		СтрокаИсточниковНоменклатуры.Сделка				 	= ТекущиеДанныеТаблицыДокументов.Сделка;
		СтрокаИсточниковНоменклатуры.РасчетыВозврат 		= ТекущиеДанныеТаблицыДокументов.РасчетыВозврат;
		СтрокаИсточниковНоменклатуры.Документ	 	 		= Неопределено;	
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
		
	ТекущиеДанные = Элементы.ТаблицаДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
	
		Отказ = Истина;
		Возврат;
	
	КонецЕсли;  

	// Нальзя оставлять строку с незаполненными реквизитом "Документ"
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
		
		Если ОтменаРедактирования Тогда
			Если Не НоваяСтрока Тогда
				ТаблицаДокументов.Удалить(ТекущиеДанные);
			КонецЕсли; 
		Иначе	
			Отказ = Истина;
			Сообщить(НСтр("ru='Необходимо выбрать документ! (для отказа нажмите Esc)';uk='Необхідно вибрати документ! (для відмови натисніть Esc)'"));
		КонецЕсли;
		
	КонецЕсли;

	УстановитьДоступностьНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
		
	Если НоваяСтрока Тогда
		
		ТекущаяСтрока 			= Элементы.ТаблицаДокументов.ТекущиеДанные;
		ТекущаяСтрокаДоговоров 	= Элементы.ТаблицаДоговоров.ТекущиеДанные;
		
		//Заполним реквизиты
		ТекущаяСтрока.Дата				 = ТекущаяСтрокаДоговоров.Дата;
		ТекущаяСтрока.ДоговорКонтрагента = ТекущаяСтрокаДоговоров.ДоговорКонтрагента;
		ТекущаяСтрока.Сделка			 = ТекущаяСтрокаДоговоров.Сделка;
		ТекущаяСтрока.РасчетыВозврат 	 = ТекущаяСтрокаДоговоров.РасчетыВозврат;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговораПередУдалением(Элемент, Отказ)
		
	ТекущиеДанные 				  = Элементы.Договора.ТекущиеДанные;
	ТекущиеДанныеТаблицыДоговоров = Элементы.ТаблицаДоговоров.ТекущиеДанные;
	
	// обновим информацию в строке ТаблицыДоговоров (вычтем суммы)
	ЗаполнитьДанныеВСтрокеТаблицыДоговоров(ТекущиеДанныеТаблицыДоговоров, ТекущиеДанные, Ложь);
	
	// очистим суммы:
	ТекущиеДанные.Сумма = 0;
	ТекущиеДанные.СуммаНДС = 0;
	

	//если в источниках указаны данные по тек. строке -  удалять строку не будем
	СтруктураПоиска = Новый   Структура( "Дата,
										 |ДоговорКонтрагента,
										 |Сделка,
										 |РасчетыВозврат, 
										 |СтавкаНДС,
										 |ЗаТару",
										 ТекущиеДанные.Дата,
										 ТекущиеДанные.ДоговорКонтрагента,
										 ТекущиеДанные.Сделка,
										 ТекущиеДанные.РасчетыВозврат, 
										 ТекущиеДанные.СтавкаНДС,
										 ТекущиеДанные.ЗаТару);

	Для каждого ДопПараметр Из ДопПараметры Цикл
		СтруктураПоиска.Вставить(ДопПараметр.Ключ,ТекущиеДанные[ДопПараметр.Ключ]);	
	КонецЦикла; 	
	
	Если Объект.ИсточникиНоменклатуры.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговораПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.Договора.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
	
		Отказ = Истина;
		Возврат;
	
	КонецЕсли;  
	
	ТекущиеДанныеТаблицыДоговоров = Элементы.ТаблицаДоговоров.ТекущиеДанные;

	Если ТекущиеДанные.ЗаТару Тогда
		ТекущиеДанные.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НеНДС");
		ТекущиеДанные.СуммаНДС  = 0;
		Если ДопПараметры.Свойство("СчетУчетаНДС") Тогда
			ТекущиеДанные.СчетУчетаНДС  = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");	
		КонецЕсли;	
	КонецЕсли;
	
	Если УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС) = 0 Тогда
		 ТекущиеДанные.СуммаНДС  = 0;
	КонецЕсли;
	
	Если ОтменаРедактирования Тогда
		
		// восстановим старые значения 
		ТекущиеДанные.СтавкаНДС = мТекущиеДанныеДоговоров.СтавкаНДС;
		ТекущиеДанные.ЗаТару 	= мТекущиеДанныеДоговоров.ЗаТару;
		Для каждого ДопПараметр Из ДопПараметры Цикл
			ТекущиеДанные[ДопПараметр.Ключ] = мТекущиеДанныеДоговоров[ДопПараметр.Ключ];	
		КонецЦикла;		
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекущиеДанные.СтавкаНДС) Тогда
		
		ТекущиеДанные.СуммаНДС = 0;
		
	Иначе
		
		КлючевыеПоляНеИзменились = Истина;
		КлючевыеПоляНеИзменились = (КлючевыеПоляНеИзменились И (ТекущиеДанные.СтавкаНДС = мТекущиеДанныеДоговоров.СтавкаНДС));
		КлючевыеПоляНеИзменились = (КлючевыеПоляНеИзменились И (ТекущиеДанные.ЗаТару 	= мТекущиеДанныеДоговоров.ЗаТару));
		Для каждого ДопПараметр Из ДопПараметры Цикл
			КлючевыеПоляНеИзменились = (КлючевыеПоляНеИзменились И (ТекущиеДанные[ДопПараметр.Ключ] = мТекущиеДанныеДоговоров[ДопПараметр.Ключ]));	
		КонецЦикла;	
		
		Если  НЕ КлючевыеПоляНеИзменились Тогда
			
			// Изменили ключевые поля
			// если такая строка в договорах уже имеется - нужно продолжить редактирование				
			СтруктураОтбора = Новый Структура("Дата, ДоговорКонтрагента, Сделка, РасчетыВозврат, ЗаТару, СтавкаНДС");
			СтруктураОтбора.Дата			 	= ТекущиеДанные.Дата;
			СтруктураОтбора.ДоговорКонтрагента 	= ТекущиеДанные.ДоговорКонтрагента;
			СтруктураОтбора.Сделка			 	= ТекущиеДанные.Сделка;
			СтруктураОтбора.РасчетыВозврат		= ТекущиеДанные.РасчетыВозврат;
			СтруктураОтбора.ЗаТару 				= ТекущиеДанные.ЗаТару;
			СтруктураОтбора.СтавкаНДС			= ТекущиеДанные.СтавкаНДС;
			Для каждого ДопПараметр Из ДопПараметры Цикл
				СтруктураОтбора.Вставить(ДопПараметр.Ключ, ТекущиеДанные[ДопПараметр.Ключ]);	
			КонецЦикла;
			
			Если Объект.Договора.НайтиСтроки(СтруктураОтбора).Количество() > 1 Тогда
				
				Отказ = Истина;
				Сообщить(НСтр("ru='Нельзя содавать дубли строк в этой таблице!';uk='Не можна створювати дублі рядків у цій таблиці!'"));
			
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		// Удалим в таблице договоров старые суммы и добавим новые
		ЗаполнитьДанныеВСтрокеТаблицыДоговоров(ТекущиеДанныеТаблицыДоговоров, мТекущиеДанныеДоговоров, Ложь);
		ЗаполнитьДанныеВСтрокеТаблицыДоговоров(ТекущиеДанныеТаблицыДоговоров, ТекущиеДанные);

	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговораПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
		
	Если Копирование ИЛИ 
		Элементы.ТаблицаДоговоров.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговораЗаТаруПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Договора.ТекущиеДанные;
		
	ТекущиеДанные.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НеНДС");
	ТекущиеДанные.СуммаНДС  = 0;
	Если ДопПараметры.Свойство("СчетУчетаНДС") Тогда
		ТекущиеДанные.СчетУчетаНДС  = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");	
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговораСуммаПриИзменении(Элемент)
		
	ТекущиеДанные = Элементы.Договора.ТекущиеДанные;
    СтавкаНДС = УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС);
	Если ТекущиеДанные.ЗаТару Тогда
		 СтавкаНДС = 0;
	КонецЕсли;
	
	ТекущиеДанные.СуммаНДС = ТекущиеДанные.Сумма /(1 + СтавкаНДС/100) * СтавкаНДС/100

КонецПроцедуры

&НаКлиенте
Процедура ОтборПоКонтрагентамПриИзменении(Элемент)
	
	Если ОтборПоКонтрагентам Тогда
		
		Для каждого СтрокаОбора Из Объект.ОтборДоговоровКонтрагентов Цикл
			СтрокаОбора.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");	
		КонецЦикла; 		
		
		// разрешим выбор групп
		Элементы.ОтборДоговоровКонтрагентовКонтрагент.ВыборГруппИЭлементов =  ГруппыИЭлементы.ГруппыИЭлементы;
		
	Иначе
				
		Объект.ОтборДоговоровКонтрагентов.Очистить();		
		
		// Запретим выбор групп
		Элементы.ОтборДоговоровКонтрагентовКонтрагент.ВыборГруппИЭлементов =  ГруппыИЭлементы.Элементы;

	КонецЕсли;
	
	УстановитьДоступностьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДоговоровКонтрагентовДоговорКонтрагентаПриИзменении(Элемент)
		
	ТекущиеДанные = Элементы.ОтборДоговоровКонтрагентов.ТекущиеДанные;
	ТекущиеДанные.Контрагент = ПолучитьКонтрагентаПоДоговору(ТекущиеДанные.ДоговорКонтрагента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКонтрагентаПоДоговору(Договор)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "Владелец")

КонецФункции // ()

&НаКлиенте
Процедура ОтборДоговоровКонтрагентовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
		
	ТекущиеДанные = Элементы.ОтборДоговоровКонтрагентов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
	
		Отказ = Истина;
		Возврат;
	
	КонецЕсли;  

	Если ОтменаРедактирования Тогда
		// восстановим старые значения
		ТекущиеДанные.ДоговорКонтрагента = мТекущиеДанныеТаблицыОтборов.ДоговорКонтрагента;	
		ТекущиеДанные.Контрагент		 = мТекущиеДанныеТаблицыОтборов.Контрагент;	
		
	ИначеЕсли ОтборПоКонтрагентам Тогда
		
		// Нальзя оставлять строку с незаполненными реквизитами	
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
			Отказ = Истина;
			Сообщить(НСтр("ru='Необходимо выбрать контрагента!';uk='Необхідно вибрати контрагента!'"));
		КонецЕсли;	
		
	Иначе
		
		// Нальзя оставлять строку с незаполненными реквизитами	
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда
			Отказ = Истина;
			Сообщить(НСтр("ru='Необходимо выбрать договор!';uk='Необхідно вибрати договір!'"));
		КонецЕсли;	
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборДоговоровКонтрагентовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.ОтборДоговоровКонтрагентов.ТекущиеДанные;
	
	мТекущиеДанныеТаблицыОтборов.ДоговорКонтрагента = ТекущаяСтрока.ДоговорКонтрагента;
	мТекущиеДанныеТаблицыОтборов.Контрагент 		= ТекущаяСтрока.Контрагент;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если  Объект.Договора.Количество() > 0 
		И ЗначениеЗаполнено(Объект.Организация) 
		И НЕ Объект.Организация = мТекущаяОрганизация Тогда
		// нужно либо очистить все таблицы либо отказаться от изменения
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ОрганизацияПриИзмененииПослеЗакрытияВопроса", ЭтаФорма, Новый Структура());
		ПоказатьВопрос(Оповещение, НСтр("ru='При изменении Организации все данные будут очищены. Продолжить?';uk='При зміні Організації всі дані будуть очищені. Продовжити?'"), Режим);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииПослеЗакрытияВопроса(Ответ, ДопПараметры) Экспорт
		
	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			
		Объект.Организация = мТекущаяОрганизация;
		Возврат;	
		
	Иначе
		
		Объект.Договора.Очистить();
	    ПерезаполнитьТаблицуДоговоров();
		ОбновитьСоставИсточниковНоменклатурыНаСервере();
		
		ОбособленноеПодразделение = Неопределено;				
		
	КонецЕсли;			

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мТекущаяОрганизация = Объект.Организация;

КонецПроцедуры

&НаКлиенте
Процедура ПечататьДокументыПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьКоличество(Данные, ТолькоВыделенныеПозиции=Ложь)

	//  Для каждого документа установим количество в налоговый документ равный количеству.
	//  Строки, введенные вручную или относящиеся к существующим документам не изменяются.
	//  Затем вычислим коэффициент для каждой ставки и будем пропорционально уменьшать количество (с учетом ошибок округления)
	СтруктураОтбораНоменклатуры = Новый Структура("Дата, СуществующийДокумент, ДоговорКонтрагента, Сделка, РасчетыВозврат, СуществующийДокумент", Данные.Дата, Ложь, Данные.ДоговорКонтрагента, Данные.Сделка, Данные.РасчетыВозврат, Ложь);
	СтруктураОтбораДокументов   = Новый Структура("Дата, СуществующийДокумент, ДоговорКонтрагента, Сделка, РасчетыВозврат", 					  Данные.Дата, Ложь, Данные.ДоговорКонтрагента, Данные.Сделка, Данные.РасчетыВозврат);
	
	ВыделитьВсюНоменклатуру(Объект.Товары, 				СтруктураОтбораДокументов, ТолькоВыделенныеПозиции); 
	ВыделитьВсюНоменклатуру(Объект.Услуги, 				СтруктураОтбораДокументов, ТолькоВыделенныеПозиции); 
	ВыделитьВсюНоменклатуру(Объект.ВозвратнаяТара, 		СтруктураОтбораДокументов, ТолькоВыделенныеПозиции); 
	ВыделитьВсюНоменклатуру(Объект.ОС, 					СтруктураОтбораДокументов, ТолькоВыделенныеПозиции); 
	ВыделитьВсюНоменклатуру(Объект.НМА,					СтруктураОтбораДокументов, ТолькоВыделенныеПозиции); 
	
	ЕстьДокументы = Ложь;
	//Теперь рассчитаем суммы по всем документам
	Для каждого ТекущийДокумент Из ТаблицаДокументов Цикл
		
		Если    ТекущийДокумент.БезДокументаОснования 
			ИЛИ ТекущийДокумент.СуществующийДокумент Тогда
			// строки, добавленные вручную или по существующим документам не редактируются
			Продолжить;
		КонецЕсли;
		
		ЕстьДокументы = Истина;
		
		СтруктураОтбораНоменклатуры.Вставить("Документ", ТекущийДокумент.Документ);
		// обновляем суммы в таблице документов
		ОбновитьИсточникиНоменклатурыНаСервере(СтруктураОтбораНоменклатуры);
		ПерезаполнитьСуммыВСтрокеТаблицыДокументовНаСервере(ТекущийДокумент);
	
	КонецЦикла; 
	
	Если ЕстьДокументы = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	// получим суммы частичных отгрузок
	//  с учетом введенных вручную позиций номенклатуры
	ТаблицаЧастичнойОтгрузки = Неопределено;
	Если Обработки.ФормированиеНалоговыхНакладных.МожноФормироватьНалоговыеНакладные(Объект, СтруктураОтбораДокументов, ТаблицаЧастичнойОтгрузки) Тогда
		// ничего более делать не нужно, выделив все количество в документах мы не вышли за сумм неподтвержденных обязательтв.
		Сообщить(НСтр("ru='Суммы указанных документов не превышают сумм неподтвержденных налоговых обязательств';uk=""Суми вказаних документів не перевищують сум непідтверджених податкових зобов'язань"""));
		Возврат;
	КонецЕсли;
		
	// В таблице ИсточниковНоменклатуры содержатся актуальные суммы документов
	// В таблице ТаблицаЧастичнойОтгрузки - суммы, на которые можно выписать налоговые.
	// получим коэффициент по каждой из ставок и пропорционально изменим количество в документах.
	
	// в начале удалим строки означющие тот факт, что по ставке/таре номенклатура не переносится в налоговый документ
	УдаляемыеСтроки = ТаблицаЧастичнойОтгрузки.НайтиСтроки(Новый Структура("ЧастичнаяОтгрузка, 	ЗаСчетАванса",
																			Ложь, 				Истина));
	Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ТаблицаЧастичнойОтгрузки.Удалить(УдаляемаяСтрока);
	КонецЦикла; 
	
	КолонкиГруппировок = "СтавкаНДС, ЗаТару";
	Для каждого ДопПараметр Из ДопПараметры Цикл
		КолонкиГруппировок = КолонкиГруппировок +"," + ДопПараметр.Ключ;
	КонецЦикла;
	ТаблицаЧастичнойОтгрузки.Свернуть(КолонкиГруппировок, "СуммаВДокумент");
	
	// для пересчетов
	ДанныеВалРегл = МодульВалютногоУчета.ПолучитьКурсВалюты(ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), Объект.Дата);

	//получим все возможные сочетания Ставки/тары/доп.параметров в докуменах
	ТаблицаСочетаний = Объект.ИсточникиНоменклатуры.Выгрузить();
	КолонкиГруппировок = "СтавкаНДС, ЗаТару";
	Для каждого ДопПараметр Из ДопПараметры Цикл
		КолонкиГруппировок = КолонкиГруппировок +"," + ДопПараметр.Ключ;
	КонецЦикла;
	ТаблицаСочетаний.Свернуть(КолонкиГруппировок);
	
	СтруктураОтбораСтрокЧастичнойОтгрузки = Новый Структура();
	
	// ВОЗВРАТНАЯ ТАРА
	Для каждого ВариантПараметров Из ТаблицаСочетаний Цикл
		
		Если НЕ ВариантПараметров.ЗаТару Тогда
			Продолжить;
		КонецЕсли;
		Для каждого Параметр Из ТаблицаСочетаний.Колонки Цикл
			СтруктураОтбораДокументов.Вставить(Параметр.Имя, ВариантПараметров[Параметр.Имя]);	
			СтруктураОтбораСтрокЧастичнойОтгрузки.Вставить(Параметр.Имя, ВариантПараметров[Параметр.Имя]);	
		КонецЦикла; 				
		
		СтрокиИсточников = Объект.ИсточникиНоменклатуры.НайтиСтроки(СтруктураОтбораДокументов);
		СуммаПоДокументам = 0;
		//Суммы в строках, заданный вручную не изменяются
		НеизменяемаяСумма = 0;
		Для каждого СтрокаИсточников Из СтрокиИсточников Цикл
			
			Если СтрокаИсточников.Документ = Неопределено Тогда
				НеизменяемаяСумма = НеизменяемаяСумма + СтрокаИсточников.Сумма;
			Иначе
				СуммаПоДокументам = СуммаПоДокументам + СтрокаИсточников.Сумма;
			КонецЕсли;
			
		КонецЦикла; 
		
		// эта строка должна быть единственной
		СтрокаТаблицыЧастичнойОтгрузки = ТаблицаЧастичнойОтгрузки.НайтиСтроки(СтруктураОтбораСтрокЧастичнойОтгрузки);
		Если    СтрокаТаблицыЧастичнойОтгрузки.Количество() = 0
			ИЛИ СуммаПоДокументам = 0 
			ИЛИ СтрокаТаблицыЧастичнойОтгрузки[0].СуммаВДокумент <= НеизменяемаяСумма Тогда
			Коэфф = 0;
		Иначе 
			Коэфф = (СтрокаТаблицыЧастичнойОтгрузки[0].СуммаВДокумент - НеизменяемаяСумма) / СуммаПоДокументам;
		КонецЕсли;
		
		ПогрешностиОкругления 	  = Новый Соответствие();
		
		// изменим количество тары во всех документах
		Для каждого ТекущийДокумент Из ТаблицаДокументов Цикл 
			
			Если ТекущийДокумент.БезДокументаОснования Тогда
				Продолжить;
			КонецЕсли;

			СтруктураОтбораНоменклатуры.Вставить("Документ", ТекущийДокумент.Документ);
			Для каждого Параметр Из ТаблицаСочетаний.Колонки Цикл
				СтруктураОтбораНоменклатуры.Вставить(Параметр.Имя, ВариантПараметров[Параметр.Имя]);	
			КонецЦикла; 				
			СтруктураОтбораНоменклатуры.Удалить("ЗаТару");
			СтруктураОтбораНоменклатуры.Удалить("СтавкаНДС");
			
			СтрокиНоменклатуры = Объект.ВозвратнаяТара.НайтиСтроки(СтруктураОтбораНоменклатуры);
				
			// получим реквизиты документа, связанные с НДС
			Документ = СтруктураОтбораНоменклатуры.Документ;
			ВалютаДокумента  = Документ.ВалютаДокумента;
			
			ДанныеВалДок  = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Объект.Дата);
			
			// пересчитаем накопленную погрешность в валюту документа без округления
			ТекущаяПогрешность = ПогрешностиОкругления["Сумма"];
			Если НЕ ТекущаяПогрешность = Неопределено Тогда
				Попытка
					ПогрешностиОкругления.Вставить("Сумма", ТекущаяПогрешность*(ДанныеВалРегл.Курс/ДанныеВалРегл.Кратность)/(ДанныеВалДок.Курс/ДанныеВалДок.Кратность)); 
				Исключение
					ПогрешностиОкругления.Вставить("Сумма",0);	
				КонецПопытки;								
			КонецЕсли;

			Для каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
				СтрокаНоменклатуры.КоличествоВДокумент = СтрокаНоменклатуры.КоличествоВДокумент * Коэфф;
				СтрокаНоменклатуры.СуммаВДокумент 	   = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(СтрокаНоменклатуры.СуммаВДокумент * Коэфф, 2, ,ПогрешностиОкругления, "Сумма");
			КонецЦикла;
			
			// пересчитаем накопленную погрешность в гривни без округления
			ТекущаяПогрешность = ПогрешностиОкругления["Сумма"];
			Если НЕ ТекущаяПогрешность = Неопределено Тогда
				Попытка
					ПогрешностиОкругления.Вставить("Сумма", ТекущаяПогрешность*(ДанныеВалДок.Курс/ДанныеВалДок.Кратность)/(ДанныеВалРегл.Курс/ДанныеВалРегл.Кратность)); 
				Исключение
					ПогрешностиОкругления.Вставить("Сумма",0);	
				КонецПопытки;								
			КонецЕсли;
			
		КонецЦикла;		

	КонецЦикла;	
	
	// Товары/Услуги/НМА/ОС
	Для каждого ВариантПараметров Из ТаблицаСочетаний Цикл
		
		Если ВариантПараметров.ЗаТару Тогда
			Продолжить;
		КонецЕсли;
		Для каждого Параметр Из ТаблицаСочетаний.Колонки Цикл
			СтруктураОтбораДокументов.Вставить(Параметр.Имя, ВариантПараметров[Параметр.Имя]);	
			СтруктураОтбораСтрокЧастичнойОтгрузки.Вставить(Параметр.Имя, ВариантПараметров[Параметр.Имя]);	
		КонецЦикла; 				
	
		СтрокиИсточников = Объект.ИсточникиНоменклатуры.НайтиСтроки(СтруктураОтбораДокументов);
		СуммаПоДокументам = 0;
		НеизменяемаяСумма = 0;
		Для каждого СтрокаИсточников Из СтрокиИсточников Цикл
			Если СтрокаИсточников.Документ = Неопределено Тогда
				НеизменяемаяСумма = НеизменяемаяСумма + СтрокаИсточников.Сумма;
			Иначе
				СуммаПоДокументам = СуммаПоДокументам + СтрокаИсточников.Сумма;
			КонецЕсли;
		КонецЦикла; 
		
		// эта строка должна быть единственной
		СтрокиТаблицыЧастичнойОтгрузки = ТаблицаЧастичнойОтгрузки.НайтиСтроки(СтруктураОтбораСтрокЧастичнойОтгрузки);
		Если    СтрокиТаблицыЧастичнойОтгрузки.Количество() = 0
			ИЛИ СуммаПоДокументам = 0 
			ИЛИ СтрокиТаблицыЧастичнойОтгрузки[0].СуммаВДокумент <= НеизменяемаяСумма Тогда
			Коэфф = 0;
		Иначе 
			Коэфф = (СтрокиТаблицыЧастичнойОтгрузки[0].СуммаВДокумент - НеизменяемаяСумма) / СуммаПоДокументам;
		КонецЕсли;
		
		ПогрешностиОкругления 	  = Новый Соответствие();
		
		// изменим количество во всех документах
		Для каждого ТекущийДокумент Из ТаблицаДокументов Цикл 
			
			Если ТекущийДокумент.БезДокументаОснования Тогда
				Продолжить;
			КонецЕсли;

			СтруктураОтбораНоменклатуры.Вставить("Документ", ТекущийДокумент.Документ);
			Для каждого Параметр Из ТаблицаСочетаний.Колонки Цикл
				СтруктураОтбораНоменклатуры.Вставить(Параметр.Имя, ВариантПараметров[Параметр.Имя]);	
			КонецЦикла; 
			СтруктураОтбораНоменклатуры.Удалить("ЗаТару");
			
			СтрокиНоменклатуры = Объект.Товары.НайтиСтроки(СтруктураОтбораНоменклатуры);
			ВременныйМассив = Объект.Услуги.НайтиСтроки(СтруктураОтбораНоменклатуры);
			Для каждого Элемент Из ВременныйМассив Цикл
				СтрокиНоменклатуры.Добавить(Элемент);
			КонецЦикла; 
			ВременныйМассив = Объект.ОС.НайтиСтроки(СтруктураОтбораНоменклатуры);
			Для каждого Элемент Из ВременныйМассив Цикл
				СтрокиНоменклатуры.Добавить(Элемент);
			КонецЦикла; 
			ВременныйМассив = Объект.НМА.НайтиСтроки(СтруктураОтбораНоменклатуры);
			Для каждого Элемент Из ВременныйМассив Цикл
				СтрокиНоменклатуры.Добавить(Элемент);
			КонецЦикла; 
			
			Документ = СтруктураОтбораНоменклатуры.Документ;
			ВалютаДокумента  = Документ.ВалютаДокумента;
			
			ДанныеВалДок  = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Объект.Дата);
			
			// пересчитаем накопленную погрешность в валюту документа без округления
			ТекущаяПогрешность = ПогрешностиОкругления["Сумма"];
			Если НЕ ТекущаяПогрешность = Неопределено Тогда
				Попытка
					ПогрешностиОкругления.Вставить("Сумма", ТекущаяПогрешность*(ДанныеВалРегл.Курс/ДанныеВалРегл.Кратность)/(ДанныеВалДок.Курс/ДанныеВалДок.Кратность)); 
				Исключение
					ПогрешностиОкругления.Вставить("Сумма", 0);
				КонецПопытки;								
			КонецЕсли;
			ТекущаяПогрешность = ПогрешностиОкругления["СуммаНДС"];
			Если НЕ ТекущаяПогрешность = Неопределено Тогда
				Попытка
					ПогрешностиОкругления.Вставить("СуммаНДС", ТекущаяПогрешность*(ДанныеВалРегл.Курс/ДанныеВалРегл.Кратность)/(ДанныеВалДок.Курс/ДанныеВалДок.Кратность)); 
				Исключение
					ПогрешностиОкругления.Вставить("СуммаНДС", 0);
				КонецПопытки;								
			КонецЕсли;
			ТекущаяПогрешность = ПогрешностиОкругления["СуммаБезСкидки"];
			Если НЕ ТекущаяПогрешность = Неопределено Тогда
				Попытка
					ПогрешностиОкругления.Вставить("СуммаБезСкидки", ТекущаяПогрешность*(ДанныеВалРегл.Курс/ДанныеВалРегл.Кратность)/(ДанныеВалДок.Курс/ДанныеВалДок.Кратность)); 
				Исключение
					ПогрешностиОкругления.Вставить("СуммаБезСкидки", 0);
				КонецПопытки;								
			КонецЕсли;
			ТекущаяПогрешность = ПогрешностиОкругления["СуммаСкидки"];
			Если НЕ ТекущаяПогрешность = Неопределено Тогда
				Попытка
					ПогрешностиОкругления.Вставить("СуммаСкидки", ТекущаяПогрешность*(ДанныеВалРегл.Курс/ДанныеВалРегл.Кратность)/(ДанныеВалДок.Курс/ДанныеВалДок.Кратность)); 
				Исключение
					ПогрешностиОкругления.Вставить("СуммаСкидки", 0);
				КонецПопытки;								
			КонецЕсли;
			
			Для каждого СтрокаНоменклатуры Из СтрокиНоменклатуры Цикл
				Попытка
					СтрокаНоменклатуры.КоличествоВДокумент = СтрокаНоменклатуры.КоличествоВДокумент * Коэфф;
				Исключение
					// ОС, НМА
				КонецПопытки; 
				СтрокаНоменклатуры.СуммаВДокумент 	   = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(СтрокаНоменклатуры.СуммаВДокумент * Коэфф, 2, ,ПогрешностиОкругления, "Сумма");
				СтрокаНоменклатуры.СуммаНДСВДокумент   = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(СтрокаНоменклатуры.СуммаНДСВДокумент * Коэфф, 2, ,ПогрешностиОкругления, "СуммаНДС");	
				Попытка
					СтрокаНоменклатуры.СуммаБезСкидкиВДокумент 	   = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(СтрокаНоменклатуры.СуммаБезСкидки * Коэфф, 2, ,ПогрешностиОкругления, "СуммаБезСкидки");
					СтрокаНоменклатуры.СуммаСкидкиВДокумент        = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(СтрокаНоменклатуры.СуммаСкидки * Коэфф, 2, ,ПогрешностиОкругления, "СуммаСкидки");	
				Исключение
				    // ОС, НМА
				КонецПопытки;
			КонецЦикла;
			
			// пересчитаем накопленную погрешность в гривни без округления
			ТекущаяПогрешность = ПогрешностиОкругления["Сумма"];
			Если НЕ ТекущаяПогрешность = Неопределено Тогда
				Попытка
					ПогрешностиОкругления.Вставить("Сумма", ТекущаяПогрешность*(ДанныеВалДок.Курс/ДанныеВалДок.Кратность)/(ДанныеВалРегл.Курс/ДанныеВалРегл.Кратность)); 
				Исключение
					ПогрешностиОкругления.Вставить("Сумма", 0);	
				КонецПопытки;								
			КонецЕсли;
			ТекущаяПогрешность = ПогрешностиОкругления["СуммаНДС"];
			Если НЕ ТекущаяПогрешность = Неопределено Тогда
				Попытка
					ПогрешностиОкругления.Вставить("СуммаНДС", ТекущаяПогрешность*(ДанныеВалДок.Курс/ДанныеВалДок.Кратность)/(ДанныеВалРегл.Курс/ДанныеВалРегл.Кратность)); 
				Исключение
					ПогрешностиОкругления.Вставить("СуммаНДС", 0);	
				КонецПопытки;								
			КонецЕсли;
			ТекущаяПогрешность = ПогрешностиОкругления["СуммаБезСкидки"];
			Если НЕ ТекущаяПогрешность = Неопределено Тогда
				Попытка
					ПогрешностиОкругления.Вставить("СуммаБезСкидки", ТекущаяПогрешность*(ДанныеВалДок.Курс/ДанныеВалДок.Кратность)/(ДанныеВалРегл.Курс/ДанныеВалРегл.Кратность)); 
				Исключение
					ПогрешностиОкругления.Вставить("СуммаБезСкидки", 0);	
				КонецПопытки;								
			КонецЕсли;
			ТекущаяПогрешность = ПогрешностиОкругления["СуммаСкидки"];
			Если НЕ ТекущаяПогрешность = Неопределено Тогда
				Попытка
					ПогрешностиОкругления.Вставить("СуммаСкидки", ТекущаяПогрешность*(ДанныеВалДок.Курс/ДанныеВалДок.Кратность)/(ДанныеВалРегл.Курс/ДанныеВалРегл.Кратность)); 
				Исключение
					ПогрешностиОкругления.Вставить("СуммаСкидки", 0);	
				КонецПопытки;								
			КонецЕсли;
			
		КонецЦикла;		
		
	КонецЦикла;						
						
	// обновим информацию о суммах выбранной номенклатуры
	Для каждого ТекущийДокумент Из ТаблицаДокументов Цикл 
		
		Если    ТекущийДокумент.БезДокументаОснования 
			ИЛИ ТекущийДокумент.СуществующийДокумент Тогда
			Продолжить;
		КонецЕсли;

		ОбновитьИсточникиНоменклатурыНаСервере(Новый Структура("Дата,		ДоговорКонтрагента,			Сделка, 		РасчетыВозврат,			Документ, 					СуществующийДокумент",
													   Данные.Дата,	Данные.ДоговорКонтрагента, 	Данные.Сделка,	Данные.РасчетыВозврат,	ТекущийДокумент.Документ,	ТекущийДокумент.СуществующийДокумент));
		
		ПерезаполнитьСуммыВСтрокеТаблицыДокументовНаСервере(ТекущийДокумент);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ВыделитьВсюНоменклатуру(ТабличнаяЧасть, СтруктураОтбора, ТолькоВыделенныеПозиции=Ложь)
	
	ЕстьРеквизитСуммаНДС = Истина;
	Если ТабличнаяЧасть = Объект.ВозвратнаяТара Тогда
		ЕстьРеквизитСуммаНДС = Ложь;	
	КонецЕсли;
	
	ЕстьРеквизитКоличество = Истина;
	Если  ТабличнаяЧасть = Объект.ОС
	  ИЛИ ТабличнаяЧасть = Объект.НМА Тогда
		ЕстьРеквизитКоличество = Ложь;	
	КонецЕсли;
	
	ЕстьРеквизитСуммаСкидки = Ложь;
	Если  ТабличнаяЧасть = Объект.Товары
	  ИЛИ ТабличнаяЧасть = Объект.Услуги Тогда
		ЕстьРеквизитСуммаСкидки = Истина;	
	КонецЕсли;
	
	// устанавливаем количество и суммы в документ равными количеству и суммам документа основания
	НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
	Для каждого Строка Из НайденныеСтроки Цикл
		// выделяем только позиции по документам-основаниям.
		// строки введенные пользователем вручную не рассматриваем
		Если Строка.Документ = Неопределено Тогда
			Продолжить
		КонецЕсли;
		Если ТолькоВыделенныеПозиции 
			И ((ЕстьРеквизитКоличество И Строка.КоличествоВДокумент = 0) ИЛИ (НЕ ЕстьРеквизитКоличество И Строка.СуммаВДокумент = 0)) Тогда
			
			// пропустим эту строку (и обнулим суммы)
			Строка.СуммаВДокумент		= 0;
			Если ЕстьРеквизитСуммаНДС Тогда
				Строка.СуммаНДСВДокумент = 0;
			КонецЕсли;
			
			Если ЕстьРеквизитСуммаСкидки Тогда
				Строка.СуммаСкидкиВДокумент 	= 0;
				Строка.СуммаБезСкидкиВДокумент  = 0;
			КонецЕсли;
			
		Иначе	
		
			Если ЕстьРеквизитКоличество Тогда
				Строка.КоличествоВДокумент 	= Строка.Количество;
			КонецЕсли;
			
			Строка.СуммаВДокумент		= Строка.Сумма;
			
			Если ЕстьРеквизитСуммаНДС Тогда
				Строка.СуммаНДСВДокумент	= Строка.СуммаНДС;
			КонецЕсли;
			
			Если ЕстьРеквизитСуммаСкидки Тогда
				Строка.СуммаСкидкиВДокумент 	= Строка.СуммаСкидки;
				Строка.СуммаБезСкидкиВДокумент  = Строка.СуммаБезСкидки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;     

КонецПроцедуры

&НаСервере
Процедура ОбновитьИсточникиНоменклатурыНаСервере(СтруктураОтбораНоменклатуры)

	Обработки.ФормированиеНалоговыхНакладных.ОбновитьИсточникиНоменклатуры(Объект, СтруктураОтбораНоменклатуры);	

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКоличествоПропорциональноБезУчетаВыбранного(Команда)
	
	ДанныеСтруктура = Новый Структура("Дата, СуществующийДокумент, ДоговорКонтрагента, Сделка, РасчетыВозврат");
	ЗаполнитьЗначенияСвойств(ДанныеСтруктура, Элементы.ТаблицаДоговоров.ТекущиеДанные);
	
	РаспределитьКоличество(ДанныеСтруктура, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКоличествоПропорциональноСУчетомВыбранного(Команда)
	
	ДанныеСтруктура = Новый Структура("Дата, СуществующийДокумент, ДоговорКонтрагента, Сделка, РасчетыВозврат");
	ЗаполнитьЗначенияСвойств(ДанныеСтруктура, Элементы.ТаблицаДоговоров.ТекущиеДанные);
	
	РаспределитьКоличество(ДанныеСтруктура, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговораСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Договора.ТекущиеДанные;
    СтавкаНДС = УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС);
	Если ТекущиеДанные.ЗаТару Тогда
		 СтавкаНДС = 0;
	КонецЕсли;
	
	ТекущиеДанные.СуммаНДС = ТекущиеДанные.Сумма /(1 + СтавкаНДС/100) * СтавкаНДС/100

КонецПроцедуры

&НаСервере
Процедура ВыделитьНеПодтвежденнуюНоменклатуру(ИмяТабличнойЧасти, СтруктураОтбораНоменклатуры, ВыборкаПоТабличнымЧастям, ПогрешностиОкругления)
	
	ВыборкаПоТабличнымЧастям.Сбросить();
	Если ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("ИмяТабличнойЧасти", ИмяТабличнойЧасти)) Тогда
		
		ТаблицаВыписанныхНалоговых = ПеренестиВыборкуВТаблицу(ВыборкаПоТабличнымЧастям);
		
		СтрокиДокумента = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбораНоменклатуры);
		Для каждого СтрокаДокументаОснования Из СтрокиДокумента Цикл
			СтруктураПоиска = Новый Структура();
			Если ИмяТабличнойЧасти = "Товары" Тогда
				
				СтруктураПоиска.Вставить("Номенклатура", 				СтрокаДокументаОснования.Номенклатура); 
				СтруктураПоиска.Вставить("ЕдиницаИзмерения", 			СтрокаДокументаОснования.ЕдиницаИзмерения); 
				СтруктураПоиска.Вставить("Цена", 						СтрокаДокументаОснования.Цена); 
				//СтруктураПоиска.Вставить("ПроцентАвтоматическихСкидок", СтрокаДокументаОснования.ПроцентАвтоматическихСкидок); 
				//СтруктураПоиска.Вставить("ПроцентСкидкиНаценки", 		СтрокаДокументаОснования.ПроцентСкидкиНаценки); 
				СтруктураПоиска.Вставить("СтавкаНДС", 					СтрокаДокументаОснования.СтавкаНДС); 
				Для каждого ДопПараметр Из ДопПараметры Цикл
					СтруктураПоиска.Вставить(ДопПараметр.Ключ,			СтрокаДокументаОснования[ДопПараметр.Ключ]);
				КонецЦикла;
				
			ИначеЕсли ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
				
				СтруктураПоиска.Вставить("Номенклатура", 				СтрокаДокументаОснования.Номенклатура); 
				СтруктураПоиска.Вставить("Цена", 						СтрокаДокументаОснования.Цена); 
				
			ИначеЕсли ИмяТабличнойЧасти = "Услуги" Тогда
				
				СтруктураПоиска.Вставить("Номенклатура", 				СтрокаДокументаОснования.Номенклатура); 
				СтруктураПоиска.Вставить("Содержание", 					СтрокаДокументаОснования.Содержание); 
				СтруктураПоиска.Вставить("Цена", 						СтрокаДокументаОснования.Цена); 
				//СтруктураПоиска.Вставить("ПроцентСкидкиНаценки", 		СтрокаДокументаОснования.ПроцентСкидкиНаценки); 
				СтруктураПоиска.Вставить("СтавкаНДС", 					СтрокаДокументаОснования.СтавкаНДС); 
				Для каждого ДопПараметр Из ДопПараметры Цикл
					СтруктураПоиска.Вставить(ДопПараметр.Ключ,			СтрокаДокументаОснования[ДопПараметр.Ключ]);
				КонецЦикла;
				
			ИначеЕсли ИмяТабличнойЧасти = "ОС" Тогда
				
				СтруктураПоиска.Вставить("Номенклатура", 				СтрокаДокументаОснования.ОсновноеСредство); 
				СтруктураПоиска.Вставить("Цена", 						СтрокаДокументаОснования.Цена); 
				СтруктураПоиска.Вставить("СтавкаНДС", 					СтрокаДокументаОснования.СтавкаНДС); 
				Для каждого ДопПараметр Из ДопПараметры Цикл
					СтруктураПоиска.Вставить(ДопПараметр.Ключ,			СтрокаДокументаОснования[ДопПараметр.Ключ]);
				КонецЦикла;
				
			ИначеЕсли ИмяТабличнойЧасти = "НМА" Тогда
				
				СтруктураПоиска.Вставить("Номенклатура", 				СтрокаДокументаОснования.НематериальныйАктив); 
				СтруктураПоиска.Вставить("Цена", 						СтрокаДокументаОснования.Цена); 
				СтруктураПоиска.Вставить("СтавкаНДС", 					СтрокаДокументаОснования.СтавкаНДС); 
				Для каждого ДопПараметр Из ДопПараметры Цикл
					СтруктураПоиска.Вставить(ДопПараметр.Ключ,			СтрокаДокументаОснования[ДопПараметр.Ключ]);
				КонецЦикла;
				
			КонецЕсли;
			
			
			НайденныеСтроки = ТаблицаВыписанныхНалоговых.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 0 Тогда
				// Перенесем количество полностью
				//Если  НЕ ИмяТабличнойЧасти = "ОС" 
				//	И НЕ ИмяТабличнойЧасти = "НМА"  Тогда
				СтрокаДокументаОснования.КоличествоВДокумент = СтрокаДокументаОснования.Количество;	
				//КонецЕсли;				
				Если    ИмяТабличнойЧасти = "Товары" 
					ИЛИ ИмяТабличнойЧасти = "Услуги"  Тогда
					СтрокаДокументаОснования.СуммаБезСкидкиВДокумент = СтрокаДокументаОснования.СуммаБезСкидки;	
					СтрокаДокументаОснования.СуммаСкидкиВДокумент = СтрокаДокументаОснования.СуммаСкидки;	
				КонецЕсли;				
				СтрокаДокументаОснования.СуммаВДокумент 	 = СтрокаДокументаОснования.Сумма;
				Если НЕ ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
					СтрокаДокументаОснования.СуммаНДСВДокумент = СтрокаДокументаОснования.СуммаНДС;	
				КонецЕсли; 
			Иначе
				// строка в таблице - единственная
				СтрокаТаблицыВыписанныхНалоговых = НайденныеСтроки[0];
				
				//Если  ИмяТабличнойЧасти = "ОС" 
				//  ИЛИ ИмяТабличнойЧасти = "НМА"  Тогда
				//  
				//	Если СтрокаДокументаОснования.Сумма > СтрокаТаблицыВыписанныхНалоговых.КоличествоПодтвержденных Тогда
				//		
				//		СуммаВДокумент = СтрокаДокументаОснования.Сумма - СтрокаТаблицыВыписанныхНалоговых.КоличествоПодтвержденных;
				//		
				//		// обнулим количество в таблице
				//		СтрокаТаблицыВыписанныхНалоговых.КоличествоПодтвержденных = 0;
				//		
				//		Если  СтрокаДокументаОснования.Сумма = 0 Тогда
				//			Коэфф = 0;
				//		Иначе
				//			Коэфф = СуммаВДокумент/СтрокаДокументаОснования.Сумма;
				//		КонецЕсли;
				//		
				//		СтрокаДокументаОснования.СуммаНДСВДокумент 	 = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(СтрокаДокументаОснования.СуммаНДС * Коэфф,2,,ПогрешностиОкругления, "СуммаНДС");
				//		
				//	Иначе
				//		// уменьшим количество в таблице
				//		СтрокаТаблицыВыписанныхНалоговых.КоличествоПодтвержденных = СтрокаТаблицыВыписанныхНалоговых.КоличествоПодтвержденных - СтрокаДокументаОснования.Сумма;
				//		
				//		// установим нулевые количества/суммы попадающие в налоговый документ
				//		СтрокаДокументаОснования.СуммаВДокумент 	 = 0;
				//		СтрокаДокументаОснования.СуммаНДСВДокумент = 0;	
				//		
				//	КонецЕсли;
				//  
				//  
				//Иначе
				Если СтрокаДокументаОснования.Количество > СтрокаТаблицыВыписанныхНалоговых.КоличествоПодтвержденных Тогда
					КоличествоВДокумент = СтрокаДокументаОснования.Количество - СтрокаТаблицыВыписанныхНалоговых.КоличествоПодтвержденных;
					
					// обнулим количество в таблице
					СтрокаТаблицыВыписанныхНалоговых.КоличествоПодтвержденных = 0;
					
					Если  СтрокаДокументаОснования.Количество = 0 Тогда
						Коэфф = 0;
					Иначе
						Коэфф = КоличествоВДокумент/СтрокаДокументаОснования.Количество;
					КонецЕсли;
					
					СтрокаДокументаОснования.КоличествоВДокумент = КоличествоВДокумент;
					СтрокаДокументаОснования.СуммаВДокумент 	 = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(СтрокаДокументаОснования.Сумма * Коэфф,2,,ПогрешностиОкругления, "Сумма");
					Если НЕ ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
						СтрокаДокументаОснования.СуммаНДСВДокумент 	 = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(СтрокаДокументаОснования.СуммаНДС * Коэфф,2,,ПогрешностиОкругления, "СуммаНДС");
						Если НЕ ИмяТабличнойЧасти = "ОС" И НЕ ИмяТабличнойЧасти = "НМА" Тогда
							СтрокаДокументаОснования.СуммаБезСкидкиВДокумент = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(СтрокаДокументаОснования.СуммаБезСкидки * Коэфф,2,,ПогрешностиОкругления, "СуммаБезСкидки");
							СтрокаДокументаОснования.СуммаСкидкиВДокумент 	 = ОбщегоНазначенияРед12.ОкруглитьСУчетомПогрешности(СтрокаДокументаОснования.СуммаСкидки * Коэфф,2,,ПогрешностиОкругления, "СуммаСкидки");
						КонецЕсли;
					КонецЕсли; 
					
				Иначе
					// уменьшим количество в таблице
					СтрокаТаблицыВыписанныхНалоговых.КоличествоПодтвержденных = СтрокаТаблицыВыписанныхНалоговых.КоличествоПодтвержденных - СтрокаДокументаОснования.Количество;
					
					// установим нулевые количества/суммы попадающие в налоговый документ
					СтрокаДокументаОснования.КоличествоВДокумент = 0;
					СтрокаДокументаОснования.СуммаВДокумент 	 = 0;
					Если НЕ ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
						СтрокаДокументаОснования.СуммаНДСВДокумент = 0;
						Если НЕ ИмяТабличнойЧасти = "ОС" И НЕ ИмяТабличнойЧасти = "НМА" Тогда
							СтрокаДокументаОснования.СуммаБезСкидкиВДокумент = 0;
							СтрокаДокументаОснования.СуммаСкидкиВДокумент = 0;
						КонецЕсли;
					КонецЕсли; 
					
				КонецЕсли;
				//КонецЕсли;	
			КонецЕсли; 
			
		КонецЦикла; 
		
	Иначе
		ВыделитьВсюНоменклатуру(Объект[ИмяТабличнойЧасти],СтруктураОтбораНоменклатуры);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИзменитьКоличествоПоВыписаннымНалоговымНакладнымНаСервере(Данные)
	
	СтруктураОтбораНоменклатуры = Новый Структура("Дата, СуществующийДокумент, ДоговорКонтрагента, Сделка, РасчетыВозврат", Данные.Дата, Ложь, Данные.ДоговорКонтрагента, Данные.Сделка, Данные.РасчетыВозврат);
	
	Запрос = Новый Запрос();
	
	// Получим список выбранных документов-оснований.
	ТаблицаКопия = ТаблицаДокументов.Выгрузить(, "Документ,СуществующийДокумент");
	ТаблицаКопия.Свернуть("Документ,СуществующийДокумент","");
	
	// удалим ссылку на строки, добавляемые вручную
	СтркаБезДокументаОснования =  ТаблицаКопия.Найти(Неопределено);
	Если НЕ СтркаБезДокументаОснования = Неопределено Тогда
		ТаблицаКопия.Удалить(СтркаБезДокументаОснования);
	КонецЕсли;
	//удалим строки ссылками на существующие документы
	СуществующиеДокументы = ТаблицаКопия.НайтиСтроки(Новый Структура("СуществующийДокумент", Истина));
	Для каждого Строка Из СуществующиеДокументы Цикл
		
		ТаблицаКопия.Удалить(Строка);
	
	КонецЦикла; 	
	
	Если ТаблицаКопия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Запрос.УстановитьПараметр("ДокументОснование", ТаблицаКопия);
	Запрос.УстановитьПараметр("Сделка", 			Данные.Сделка);
	
	Если Данные.РасчетыВозврат = Перечисления.РасчетыВозврат.Расчеты Тогда
		 ВидДокумента = "НалоговаяНакладная";
		 НазваниеРеквизитаОснования  = "ДокументОснование";
		 ФормулаКоличества = "НалоговаяНакладная.Количество";
		 //ФормулаКоличестваОСНМА = "НалоговаяНакладная.Сумма";
		 ФормулаКоличестваОСНМА = "ВЫБОР КОГДА НалоговаяНакладная.Количество = 0 ТОГДА 1 ИНАЧЕ НалоговаяНакладная.Количество КОНЕЦ";
	Иначе
		 ВидДокумента = "Приложение2КНалоговойНакладной";
		 НазваниеРеквизитаОснования = "НалоговаяНакладная";
		 ФормулаКоличества = "-НалоговаяНакладная.ИзменениеКоличества";
		 ФормулаКоличестваОСНМА = "-НалоговаяНакладная.ИзменениеКоличества";
	КонецЕсли;  
		
	// построим запрос по налоговым документам с указанными документами-основаниями
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		УсловиеОграничивающееДату="";
	Иначе		
		УсловиеОграничивающееДату="И НалоговаяНакладная.Ссылка.Дата <= &Дата";	
		Запрос.УстановитьПараметр("Дата", 	Объект.Дата);
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	НалоговаяНакладная.Ссылка."+НазваниеРеквизитаОснования+" КАК Документ,
	               |	""Товары"" КАК ИмяТабличнойЧасти,
	               |	НалоговаяНакладная.Номенклатура КАК Номенклатура,
	               |	NULL КАК Содержание,
	               |	НалоговаяНакладная.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	НалоговаяНакладная.Цена КАК Цена,
				   //|	НалоговаяНакладная.ПроцентАвтоматическихСкидок КАК ПроцентАвтоматическихСкидок,
				   //|	НалоговаяНакладная.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	               |	НалоговаяНакладная.СтавкаНДС КАК СтавкаНДС,";
				   
	Для каждого ДопПараметр Из ДопПараметры Цикл
		Запрос.Текст = Запрос.Текст + "
					|НалоговаяНакладная." + ДопПараметр.Ключ+" КАК " + ДопПараметр.Ключ +",";
	КонецЦикла;
				   
	Запрос.Текст = Запрос.Текст + "  
				   |	СУММА("+ФормулаКоличества+") КАК КоличествоПодтвержденных
	               |ИЗ
	               |	Документ."+ВидДокумента+".Товары КАК НалоговаяНакладная
	               |ГДЕ
	               |	НалоговаяНакладная.Ссылка.Проведен = Истина
	               |"+УсловиеОграничивающееДату+"     
				   |	И НалоговаяНакладная.Ссылка.Сделка = &Сделка
	               |	И НалоговаяНакладная.Ссылка."+НазваниеРеквизитаОснования+" В(&ДокументОснование)
	               |	И НалоговаяНакладная.Ссылка.ВалютаДокумента = НалоговаяНакладная.Ссылка."+НазваниеРеквизитаОснования+".ВалютаДокумента
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговаяНакладная.Ссылка."+НазваниеРеквизитаОснования+",
	               |	НалоговаяНакладная.Номенклатура,
	               |	НалоговаяНакладная.СтавкаНДС,
	               |	НалоговаяНакладная.ЕдиницаИзмерения,
				   //|	НалоговаяНакладная.ПроцентАвтоматическихСкидок,
				   //|	НалоговаяНакладная.ПроцентСкидкиНаценки,
	               |	НалоговаяНакладная.Цена";
				   
				   Для каждого ДопПараметр Из ДопПараметры Цикл
		Запрос.Текст = Запрос.Текст + ",
					|НалоговаяНакладная." + ДопПараметр.Ключ;
	КонецЦикла;
				   
	Запрос.Текст = Запрос.Текст + "
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговаяНакладная.Ссылка."+НазваниеРеквизитаОснования+",
	               |	""Услуги"",
	               |	НалоговаяНакладная.Номенклатура,
	               |	ВЫРАЗИТЬ(НалоговаяНакладная.Содержание КАК СТРОКА (200)),
	               |	NULL,
	               |	НалоговаяНакладная.Цена,
				   //|	NULL,
				   //|	НалоговаяНакладная.ПроцентСкидкиНаценки,
	               |	НалоговаяНакладная.СтавкаНДС,";
	Для каждого ДопПараметр Из ДопПараметры Цикл
		Запрос.Текст = Запрос.Текст + "
				   |	НалоговаяНакладная." + ДопПараметр.Ключ+" КАК " + ДопПараметр.Ключ +",";
	КонецЦикла;
				   
	Запрос.Текст = Запрос.Текст + "  
	               |	СУММА("+ФормулаКоличества+")
	               |ИЗ
	               |	Документ."+ВидДокумента+".Услуги КАК НалоговаяНакладная
	               |ГДЕ
	               |	НалоговаяНакладная.Ссылка.Проведен = Истина
	               |"+УсловиеОграничивающееДату+"
				   |	И НалоговаяНакладная.Ссылка.Сделка = &Сделка
	               |	И НалоговаяНакладная.Ссылка."+НазваниеРеквизитаОснования+" В(&ДокументОснование)
	               |	И НалоговаяНакладная.Ссылка.ВалютаДокумента = НалоговаяНакладная.Ссылка."+НазваниеРеквизитаОснования+".ВалютаДокумента
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговаяНакладная.Ссылка."+НазваниеРеквизитаОснования+",
	               |	НалоговаяНакладная.Номенклатура,
	               |	ВЫРАЗИТЬ(НалоговаяНакладная.Содержание КАК СТРОКА (200)),
	               |	НалоговаяНакладная.Цена,
				   //|	НалоговаяНакладная.ПроцентСкидкиНаценки,
	               |	НалоговаяНакладная.СтавкаНДС";
	Для каждого ДопПараметр Из ДопПараметры Цикл
		Запрос.Текст = Запрос.Текст + ",
				   |	НалоговаяНакладная." + ДопПараметр.Ключ;
	КонецЦикла;
				   
	Запрос.Текст = Запрос.Текст + "
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговаяНакладная.Ссылка."+НазваниеРеквизитаОснования+",
	               |	""ОС"",
	               |	НалоговаяНакладная.ОсновноеСредство,
	               |	NULL,
	               |	NULL,
				   // |	NULL,
				   |	ВЫБОР КОГДА НалоговаяНакладная.Цена = 0 ТОГДА НалоговаяНакладная.Сумма ИНАЧЕ НалоговаяНакладная.Цена КОНЕЦ,
				   //|	NULL,
				   //|	NULL,
	               |	НалоговаяНакладная.СтавкаНДС,";
	Для каждого ДопПараметр Из ДопПараметры Цикл
		Запрос.Текст = Запрос.Текст + "
				   |	НалоговаяНакладная." + ДопПараметр.Ключ+" КАК " + ДопПараметр.Ключ +",";
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "  
	               |	СУММА("+ФормулаКоличестваОСНМА+")
	               |ИЗ
	               |	Документ."+ВидДокумента+".ОС КАК НалоговаяНакладная
	               |ГДЕ
	               |	НалоговаяНакладная.Ссылка.Проведен = Истина
	               |"+УсловиеОграничивающееДату+"
				   |	И НалоговаяНакладная.Ссылка.Сделка = &Сделка
	               |	И НалоговаяНакладная.Ссылка."+НазваниеРеквизитаОснования+" В(&ДокументОснование)
	               |	И НалоговаяНакладная.Ссылка.ВалютаДокумента = НалоговаяНакладная.Ссылка."+НазваниеРеквизитаОснования+".ВалютаДокумента
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговаяНакладная.Ссылка."+НазваниеРеквизитаОснования+",
	               |	НалоговаяНакладная.ОсновноеСредство,
				   |	ВЫБОР КОГДА НалоговаяНакладная.Цена = 0 ТОГДА НалоговаяНакладная.Сумма ИНАЧЕ НалоговаяНакладная.Цена КОНЕЦ,
	               |	НалоговаяНакладная.СтавкаНДС";
	Для каждого ДопПараметр Из ДопПараметры Цикл
		Запрос.Текст = Запрос.Текст + ",
				   |	НалоговаяНакладная." + ДопПараметр.Ключ;
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговаяНакладная.Ссылка."+НазваниеРеквизитаОснования+",
	               |	""НМА"",
	               |	НалоговаяНакладная.НематериальныйАктив,
	               |	NULL,
	               |	NULL,
				   // |	NULL,
				   |	ВЫБОР КОГДА НалоговаяНакладная.Цена = 0 ТОГДА НалоговаяНакладная.Сумма ИНАЧЕ НалоговаяНакладная.Цена КОНЕЦ,
				   //|	NULL,
				   //|	NULL,
	               |	НалоговаяНакладная.СтавкаНДС,";
	Для каждого ДопПараметр Из ДопПараметры Цикл
		Запрос.Текст = Запрос.Текст + "
					|НалоговаяНакладная." + ДопПараметр.Ключ+" КАК " + ДопПараметр.Ключ +",";
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "  
	               |	СУММА("+ФормулаКоличестваОСНМА+")
	               |ИЗ
	               |	Документ."+ВидДокумента+".НМА КАК НалоговаяНакладная
	               |ГДЕ
	               |	НалоговаяНакладная.Ссылка.Проведен = Истина
	               |"+УсловиеОграничивающееДату+"
				   |	И НалоговаяНакладная.Ссылка.Сделка = &Сделка
	               |	И НалоговаяНакладная.Ссылка."+НазваниеРеквизитаОснования+" В(&ДокументОснование)
	               |	И НалоговаяНакладная.Ссылка.ВалютаДокумента = НалоговаяНакладная.Ссылка."+НазваниеРеквизитаОснования+".ВалютаДокумента
	               |
				   |СГРУППИРОВАТЬ ПО
	               |	НалоговаяНакладная.Ссылка."+НазваниеРеквизитаОснования+",
	               |	НалоговаяНакладная.НематериальныйАктив,
				   |	ВЫБОР КОГДА НалоговаяНакладная.Цена = 0 ТОГДА НалоговаяНакладная.Сумма ИНАЧЕ НалоговаяНакладная.Цена КОНЕЦ,
	               |	НалоговаяНакладная.СтавкаНДС";
	Для каждого ДопПараметр Из ДопПараметры Цикл
		Запрос.Текст = Запрос.Текст + ",
				   |	НалоговаяНакладная." + ДопПараметр.Ключ;
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НалоговаяНакладная.Ссылка."+НазваниеРеквизитаОснования+",
	               |	""ВозвратнаяТара"",
	               |	НалоговаяНакладная.Номенклатура,
	               |	NULL,
	               |	NULL,
	               |	НалоговаяНакладная.Цена,
				   //|	NULL,
				   //|	NULL,
	               |	NULL,";
	Для каждого ДопПараметр Из ДопПараметры Цикл
		Запрос.Текст = Запрос.Текст + "
				   |	NULL,";
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
	               |	СУММА("+ФормулаКоличества+")
	               |ИЗ
	               |	Документ."+ВидДокумента+".ВозвратнаяТара КАК НалоговаяНакладная
	               |ГДЕ
	               |	НалоговаяНакладная.Ссылка.Проведен = Истина
	               |"+УсловиеОграничивающееДату+"
				   |	И НалоговаяНакладная.Ссылка.Сделка = &Сделка
	               |	И НалоговаяНакладная.Ссылка."+НазваниеРеквизитаОснования+" В(&ДокументОснование)
	               |	И НалоговаяНакладная.Ссылка.ВалютаДокумента = НалоговаяНакладная.Ссылка."+НазваниеРеквизитаОснования+".ВалютаДокумента
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НалоговаяНакладная.Ссылка."+НазваниеРеквизитаОснования+",
	               |	НалоговаяНакладная.Номенклатура,
	               |	НалоговаяНакладная.Цена
	               |ИТОГИ ПО
	               |	Документ,
				   |	ИмяТабличнойЧасти";

	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// заполним количества в документах
	Для каждого ТекущийДокумент Из ТаблицаДокументов Цикл 
		
		Если ТекущийДокумент.СуществующийДокумент Тогда
			//это существующий документ, менять ничего нельзя
			Продолжить;	
		КонецЕсли;
		
		СтруктураОтбораНоменклатуры.Вставить("Документ", ТекущийДокумент.Документ);
		
		ВыборкаПоДокументам.Сбросить();
		// найдем информацию по уже выписанным налоговым документам
		Если ВыборкаПоДокументам.НайтиСледующий(Новый Структура("Документ", ТекущийДокумент.Документ)) Тогда
			
			ВыборкаПоТабличнымЧастям = ВыборкаПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ПогрешностиОкругления 	  = Новый Соответствие();
			ВыделитьНеПодтвежденнуюНоменклатуру("Товары", СтруктураОтбораНоменклатуры, ВыборкаПоТабличнымЧастям, ПогрешностиОкругления);
			ВыделитьНеПодтвежденнуюНоменклатуру("Услуги", СтруктураОтбораНоменклатуры, ВыборкаПоТабличнымЧастям, ПогрешностиОкругления);
			ВыделитьНеПодтвежденнуюНоменклатуру("ОС", 	  СтруктураОтбораНоменклатуры, ВыборкаПоТабличнымЧастям, ПогрешностиОкругления);
			ВыделитьНеПодтвежденнуюНоменклатуру("НМА", 	  СтруктураОтбораНоменклатуры, ВыборкаПоТабличнымЧастям, ПогрешностиОкругления);
			
			ПогрешностиОкругления 	  = Новый Соответствие();
			ВыделитьНеПодтвежденнуюНоменклатуру("ВозвратнаяТара", СтруктураОтбораНоменклатуры, ВыборкаПоТабличнымЧастям, ПогрешностиОкругления);
			
		Иначе
			// по данному документу-основанию еще не было выписано налоговых документов
			// попадает весь номенклатурный состав
			ВыделитьВсюНоменклатуру(Объект.Товары, 		СтруктураОтбораНоменклатуры);
			ВыделитьВсюНоменклатуру(Объект.Услуги, 		СтруктураОтбораНоменклатуры);
			ВыделитьВсюНоменклатуру(Объект.ОС, 			СтруктураОтбораНоменклатуры);
			ВыделитьВсюНоменклатуру(Объект.НМА,			СтруктураОтбораНоменклатуры);
			ВыделитьВсюНоменклатуру(Объект.ВозвратнаяТара, СтруктураОтбораНоменклатуры);
		КонецЕсли;
		
		Обработки.ФормированиеНалоговыхНакладных.ОбновитьИсточникиНоменклатуры(Объект, СтруктураОтбораНоменклатуры);
		ПерезаполнитьСуммыВСтрокеТаблицыДокументовНаСервере(ТекущийДокумент);
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Функция ПеренестиВыборкуВТаблицу(ВыборкаПоТабличнымЧастям)
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений();
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура");
	ТаблицаНоменклатуры.Колонки.Добавить("Содержание");
	ТаблицаНоменклатуры.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаНоменклатуры.Колонки.Добавить("Цена");
	//ТаблицаНоменклатуры.Колонки.Добавить("ПроцентАвтоматическихСкидок");
	//ТаблицаНоменклатуры.Колонки.Добавить("ПроцентСкидкиНаценки");
	ТаблицаНоменклатуры.Колонки.Добавить("СтавкаНДС");
	ТаблицаНоменклатуры.Колонки.Добавить("КоличествоПодтвержденных");
	Для каждого ДопПараметр Из ДопПараметры Цикл
		ТаблицаНоменклатуры.Колонки.Добавить(ДопПараметр.Ключ);
	КонецЦикла;
	
	Выборка = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицыНоменклатуры = ТаблицаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыНоменклатуры, Выборка);
	КонецЦикла;
	
	Возврат  ТаблицаНоменклатуры;
	
КонецФункции 

&НаКлиенте
Процедура ИзменитьКоличествоПоВыписаннымНалоговымНакладным(Команда)
	
	Данные = Элементы.ТаблицаДоговоров.ТекущиеДанные;
	
	ДанныеСтруктура = Новый Структура("Дата, СуществующийДокумент, ДоговорКонтрагента, Сделка, РасчетыВозврат");
	ЗаполнитьЗначенияСвойств(ДанныеСтруктура, Данные);
	
	ИзменитьКоличествоПоВыписаннымНалоговымНакладнымНаСервере(ДанныеСтруктура);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяДокумента(Ссылка)
	
	Возврат Метаданные.НайтиПоТипу(ТипЗнч(Ссылка)).Имя;
	
КонецФункции

&НаКлиенте
Процедура ТаблицаДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеДоговоров		 = Элементы.ТаблицаДоговоров.ТекущиеДанные;
	ДанныеСтроки 		 = Элементы.ТаблицаДокументов.ТекущиеДанные;
	
	СуществующийДокумент  = ДанныеСтроки.СуществующийДокумент;
	БезДокументаОснования = ДанныеСтроки.БезДокументаОснования;
	
	Если Поле.Имя = "ТаблицаДокументовДокумент" И НЕ (БезДокументаОснования ИЛИ СуществующийДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ОтборСтрокНоменклатуры", ПолучитьСтруктуруОтбораНоменклатуры(ДанныеСтроки));
	
	Если  НЕ ЗначениеЗаполнено(ДанныеСтроки.Документ) 
		И НЕ БезДокументаОснования Тогда
		
		Возврат
		
	ИначеЕсли БезДокументаОснования Тогда
		
		ПараметрыОткрытия.Вставить("Контрагент",			ДанныеДоговоров.Контрагент);
		ПараметрыОткрытия.Вставить("Дата",					ДанныеДоговоров.Дата);
		ПараметрыОткрытия.Вставить("ДоговорКонтрагента",	ДанныеСтроки.ДоговорКонтрагента);		
		ПараметрыОткрытия.Вставить("Сделка",				ДанныеСтроки.Сделка);		
		ПараметрыОткрытия.Вставить("ВалютаДокумента",       ДанныеДоговоров.Валюта);
		ПараметрыОткрытия.Вставить("СуммаВключаетНДС", 		Истина);
		
		
		Форма = ОткрытьФорму("Обработка.ФормированиеНалоговыхНакладных.Форма.ФормаНоменклатурногоСоставаБезДокументаОснования", ПараметрыОткрытия, ЭтаФорма,,,,
							 Новый ОписаниеОповещения("ТаблицаДокументовВыборОкончаниеРедактирования", ЭтаФорма, ПараметрыОткрытия), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
							 
	ИначеЕсли СуществующийДокумент Тогда	
		
		Форма = ОткрытьФорму("Документ." + ПолучитьИмяДокумента(ДанныеСтроки.Документ) + ".ФормаОбъекта",Новый Структура("Ключ", ДанныеСтроки.Документ), ЭтаФорма,,,,
							 Новый ОписаниеОповещения("ТаблицаДокументовВыборОкончаниеРедактирования", ЭтаФорма, ПараметрыОткрытия), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ОбрабатываемыйДокумент = ДанныеДокументаДляРедактированияТоварногоСостава(ДанныеСтроки.Документ);
	
		ПараметрыОткрытия.Вставить("Дата", 					ДанныеСтроки.Дата);
		ПараметрыОткрытия.Вставить("Документ", 				ДанныеСтроки.Документ);
		ПараметрыОткрытия.Вставить("Организация", 			ОбрабатываемыйДокумент.Организация);
		ПараметрыОткрытия.Вставить("Контрагент",			ОбрабатываемыйДокумент.Контрагент);
		ПараметрыОткрытия.Вставить("ДоговорКонтрагента", 	ОбрабатываемыйДокумент.ДоговорКонтрагента);		
		ПараметрыОткрытия.Вставить("Сделка",				?(ОбрабатываемыйДокумент.Свойство("Сделка"),ОбрабатываемыйДокумент.Сделка,Неопределено));		
		ПараметрыОткрытия.Вставить("Комментарий",		 	ОбрабатываемыйДокумент.Комментарий);		
		ПараметрыОткрытия.Вставить("ВалютаДокумента", 		ОбрабатываемыйДокумент.ВалютаДокумента);
		ПараметрыОткрытия.Вставить("СуммаВключаетНДС",		ОбрабатываемыйДокумент.СуммаВключаетНДС);
		
		Форма = ОткрытьФорму("Обработка.ФормированиеНалоговыхНакладных.Форма.ФормаНоменклатурногоСостава", ПараметрыОткрытия, ЭтаФорма,,,,
							 Новый ОписаниеОповещения("ТаблицаДокументовВыборОкончаниеРедактирования", ЭтаФорма, ПараметрыОткрытия), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте			
Процедура ТаблицаДокументовВыборОкончаниеРедактирования(Результат, ДополнительныеПараметры) Экспорт

	//Обновим таблицу документов и ИсточниковНоменклатуры
	СтруктураОтбора = ДополнительныеПараметры.ОтборСтрокНоменклатуры;
	
	Если СтруктураОтбора.СуществующийДокумент Тогда
		
		// в начале удалим предыдущие данные 
		УдалитьСтрокуИзТаблицыДокументов(СтруктураОтбора);
		ЗаполнитьТабличныеЧастиНаСервере(СтруктураОтбора);
		
	Иначе	
		
		ОбновитьИсточникиНоменклатурыНаСервере(СтруктураОтбора);
		
	КонецЕсли; 
	
	Для каждого СтрокаТаблицыДокументов Из ТаблицаДокументов.НайтиСтроки(СтруктураОтбора) Цикл
	
		ПерезаполнитьСуммыВСтрокеТаблицыДокументов(СтрокаТаблицыДокументов);		
	
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеДокументаДляРедактированияТоварногоСостава(Ссылка)
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Дата, Организация, ДоговорКонтрагента, Контрагент, Комментарий, ВалютаДокумента, СуммаВключаетНДС");
	
	Попытка
		СтруктураРеквизитов.Вставить("Сделка", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Сделка"));
	Исключение
	КонецПопытки;

	Возврат СтруктураРеквизитов;
		
КонецФункции // ()

&НаКлиенте
Процедура ИсточникиНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеДоговоров		 = Элементы.ТаблицаДоговоров.ТекущиеДанные;
	
	ДанныеСтрокиИсточников = Элементы.ИсточникиНоменклатуры.ТекущиеДанные;
	СтруктураПоиска = Новый Структура("Дата, ДоговорКонтрагента, РасчетыВозврат, Сделка, СуществующийДокумент, Документ");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеСтрокиИсточников);
	
	ДанныеСтроки 		 = ТаблицаДокументов.НайтиСтроки(СтруктураПоиска);
	Если ДанныеСтроки.Количество() = 0 Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	Иначе
		ДанныеСтроки = ДанныеСтроки[0];
	КонецЕсли;
	
	СуществующийДокумент  = ДанныеСтроки.СуществующийДокумент;
	БезДокументаОснования = ДанныеСтроки.БезДокументаОснования;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ОтборСтрокНоменклатуры", ПолучитьСтруктуруОтбораНоменклатуры(ДанныеСтроки));
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", 		 Элементы.ИсточникиНоменклатуры.ТекущаяСтрока);
	
	Если БезДокументаОснования Тогда
		
		ПараметрыОткрытия.Вставить("Контрагент",			ДанныеДоговоров.Контрагент);
		ПараметрыОткрытия.Вставить("Дата",					ДанныеДоговоров.Дата);
		ПараметрыОткрытия.Вставить("ДоговорКонтрагента",	ДанныеСтроки.ДоговорКонтрагента);		
		ПараметрыОткрытия.Вставить("Сделка",				ДанныеСтроки.Сделка);		
		ПараметрыОткрытия.Вставить("ВалютаДокумента",       ДанныеДоговоров.Валюта);
		ПараметрыОткрытия.Вставить("СуммаВключаетНДС", 		Истина);
		
		
		Форма = ОткрытьФорму("Обработка.ФормированиеНалоговыхНакладных.Форма.ФормаНоменклатурногоСоставаБезДокументаОснования", ПараметрыОткрытия, ЭтаФорма,,,,
							 Новый ОписаниеОповещения("ИсточникиНоменклатурыВыборОкончаниеРедактирования", ЭтаФорма, ПараметрыОткрытия), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
							 
	ИначеЕсли СуществующийДокумент Тогда	
		
		Форма = ОткрытьФорму("Документ." + ПолучитьИмяДокумента(ДанныеСтроки.Документ) + ".ФормаОбъекта",Новый Структура("Ключ", ДанныеСтроки.Документ), ЭтаФорма,,,,
							 Новый ОписаниеОповещения("ИсточникиНоменклатурыВыборОкончаниеРедактирования", ЭтаФорма, ПараметрыОткрытия), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ОбрабатываемыйДокумент = ДанныеДокументаДляРедактированияТоварногоСостава(ДанныеСтроки.Документ);
	
		ПараметрыОткрытия.Вставить("Дата", 					ДанныеСтроки.Дата);
		ПараметрыОткрытия.Вставить("Документ", 				ДанныеСтроки.Документ);
		ПараметрыОткрытия.Вставить("Организация", 			ОбрабатываемыйДокумент.Организация);
		ПараметрыОткрытия.Вставить("ДоговорКонтрагента", 	ОбрабатываемыйДокумент.ДоговорКонтрагента);		
		ПараметрыОткрытия.Вставить("Сделка",				?(ОбрабатываемыйДокумент.Свойство("Сделка"),ОбрабатываемыйДокумент.Сделка,Неопределено));
		ПараметрыОткрытия.Вставить("Контрагент",			ОбрабатываемыйДокумент.Контрагент);
		ПараметрыОткрытия.Вставить("Комментарий",		 	ОбрабатываемыйДокумент.Комментарий);		
		ПараметрыОткрытия.Вставить("ВалютаДокумента", 		ОбрабатываемыйДокумент.ВалютаДокумента);
		ПараметрыОткрытия.Вставить("СуммаВключаетНДС",		ОбрабатываемыйДокумент.СуммаВключаетНДС);
		ПараметрыОткрытия.Вставить("Комментарий",			ОбрабатываемыйДокумент.Комментарий);
		
		Форма = ОткрытьФорму("Обработка.ФормированиеНалоговыхНакладных.Форма.ФормаНоменклатурногоСостава", ПараметрыОткрытия, ЭтаФорма,,,,
							 Новый ОписаниеОповещения("ИсточникиНоменклатурыВыборОкончаниеРедактирования", ЭтаФорма, ПараметрыОткрытия), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
							 
	КонецЕсли;
	
КонецПроцедуры	

& НаКлиенте			
Процедура ИсточникиНоменклатурыВыборОкончаниеРедактирования(Результат, ДополнительныеПараметры) Экспорт

	//Обновим таблицу документов и ИсточниковНоменклатуры
	СтруктураОтбора = ДополнительныеПараметры.ОтборСтрокНоменклатуры;
	
	Если СтруктураОтбора.СуществующийДокумент Тогда
		
		// в начале удалим предыдущие данные 
		УдалитьСтрокуИзТаблицыДокументов(СтруктураОтбора);
		ЗаполнитьТабличныеЧастиНаСервере(СтруктураОтбора);
		
	Иначе	
		
		ОбновитьИсточникиНоменклатурыНаСервере(СтруктураОтбора);
		
	КонецЕсли; 
	
	ТекСуществующийДокумент = СтруктураОтбора.СуществующийДокумент;
	ТекДокумент				= СтруктураОтбора.Документ;
	
	
	СтруктураОтбора.Удалить("Документ");
	СтруктураОтбора.Удалить("СуществующийДокумент");
	ПерезаполнитьТаблицуДокументов(СтруктураОтбора);
	
	// попытаемся спозиционироваться на строку (таблица были перезаполнены)
	ТекущиеДанныеДоговора = Элементы.Договора.ТекущиеДанные;
	
	Если Не ТекущиеДанныеДоговора = Неопределено Тогда
	
		СтруктураОтбора.Вставить("Дата", 					ТекущиеДанныеДоговора.Дата);
		СтруктураОтбора.Вставить("Документ", 				ТекДокумент);
		СтруктураОтбора.Вставить("СуществующийДокумент", 	ТекСуществующийДокумент);
		СтруктураОтбора.Вставить("ЗаТару", 					ТекущиеДанныеДоговора.ЗаТару);
		СтруктураОтбора.Вставить("СтавкаНДС", 				ТекущиеДанныеДоговора.СтавкаНДС);
		Для каждого ДопПараметр Из ДопПараметры Цикл
			 СтруктураОтбора.Вставить(ДопПараметр.Ключ, ТекущиеДанныеДоговора[ДопПараметр.Ключ]);
		КонецЦикла;
		
		СтрокиИсточников = Объект.ИсточникиНоменклатуры.НайтиСтроки(СтруктураОтбора);
		Если СтрокиИсточников.Количество()>0 Тогда
		
			Элементы.ИсточникиНоменклатуры.ТекущаяСтрока = СтрокиИсточников[0].ПолучитьИдентификатор();	
		
		КонецЕсли;
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПодбор(Команда)
		
	ТекущиеДанныеДоговоров = Элементы.ТаблицаДоговоров.ТекущиеДанные;
	Если ТекущиеДанныеДоговоров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	//ПараметрыОткрытия.Вставить("Отбор", Новый ФиксированнаяСтруктура(СтруктураОтбора));
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Истина);
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	ПараметрыОткрытия.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	
	ПараметрыОткрытия.Вставить("ОтборОрганизация", Объект.Организация);
	
	ФормаПодбора = ОткрытьФорму("ЖурналДокументов.ЖурналОпераций.Форма.ФормаСписка",ПараметрыОткрытия,ЭтаФорма);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ФормаПодбора.Список, "ДоговорКонтрагента", ТекущиеДанныеДоговоров.ДоговорКонтрагента, ВидСравненияКомпоновкиДанных.Равно, , Истина
		, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто);
	
	Если ТекущиеДанныеДоговоров.РасчетыВозврат = ПредопределенноеЗначение("Перечисление.РасчетыВозврат.Возврат") Тогда
		// наложим фильтр на вид документа
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ФормаПодбора.Список, "Тип", Тип("ДокументСсылка.НалоговаяНакладная"), ВидСравненияКомпоновкиДанных.Равно, , Истина
			, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто);
	КонецЕсли;
	
	мТекущаяСтруктураПодбора = Новый Структура();
	мТекущаяСтруктураПодбора.Вставить("Дата", 				ТекущиеДанныеДоговоров.Дата);
	мТекущаяСтруктураПодбора.Вставить("ДоговорКонтрагента", ТекущиеДанныеДоговоров.ДоговорКонтрагента);
	мТекущаяСтруктураПодбора.Вставить("Сделка", 			ТекущиеДанныеДоговоров.Сделка);
	мТекущаяСтруктураПодбора.Вставить("РасчетыВозврат", 	ТекущиеДанныеДоговоров.РасчетыВозврат);

КонецПроцедуры

&НаСервереБезКонтекста
Функция МожноДобавлятьДокументИзПодбора(ТипДокумента)
	
	МожноДобавлять = Ложь;
	Для каждого ДопустимыйТип  Из Обработки.ФормированиеНалоговыхНакладных.ПолучитьДопустимыеТипыДокументов() Цикл
		
		Если ДопустимыйТип = ТипДокумента Тогда
			МожноДобавлять = Истина;	
			Прервать;
		КонецЕсли;
		
	КонецЦикла;  		
	
	Возврат МожноДобавлять	
	
КонецФункции


&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если Объект.Договора.НайтиСтроки(мТекущаяСтруктураПодбора).Количество() = 0 Тогда
		// этого договора уже нет в таблицах
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура();
	Для каждого ЭлементСтруктуры Из мТекущаяСтруктураПодбора Цикл
		СтруктураОтбора.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);	
	КонецЦикла;
	
	СтруктураОтбора.Вставить("Документ");
	
	Для каждого Документ  Из ВыбранноеЗначение  Цикл
		
		ТипДокумента = ТипЗнч(Документ);
		
		Если НЕ МожноДобавлятьДокументИзПодбора(ТипДокумента) Тогда
			
			Сообщить(НСтр("ru='Нельзя выбирать документы вида: ';uk='Не можна вибирати документи виду: '") + ТипДокумента);
			Продолжить;
			
		КонецЕсли;
		
		СтруктураОтбора.Документ = Документ;
		СуществующиеДокументы = Объект.ИсточникиНоменклатуры.НайтиСтроки(СтруктураОтбора);
		Если СуществующиеДокументы.Количество() > 0 Тогда
			Если    СуществующиеДокументы.Количество()>1
				ИЛИ НЕ СуществующиеДокументы[0].СуществующийДокумент Тогда
			
				Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Документ %1 уже выбран в качестве документа-основания!';uk='Документ %1 уже обраний як документ-підстава!'"), Документ));
				Продолжить;
			
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаИсточниковНоменклатуры = Объект.ИсточникиНоменклатуры.Добавить();
		СтрокаИсточниковНоменклатуры.Дата	 			= СтруктураОтбора.Дата;
		СтрокаИсточниковНоменклатуры.СуществующийДокумент = Ложь;
		СтрокаИсточниковНоменклатуры.Документ 			= СтруктураОтбора.Документ;
		СтрокаИсточниковНоменклатуры.ДоговорКонтрагента = СтруктураОтбора.ДоговорКонтрагента;
		СтрокаИсточниковНоменклатуры.Сделка				= СтруктураОтбора.Сделка;
		СтрокаИсточниковНоменклатуры.РасчетыВозврат 	= СтруктураОтбора.РасчетыВозврат;
		
		ЗаполнитьТабличныеЧастиНаСервере(СтруктураОтбора);
		
	КонецЦикла; 
	
	ТекущиеДанныеТаблицыДоговоров = Элементы.ТаблицаДоговоров.ТекущиеДанные;
	Если НЕ  ТекущиеДанныеТаблицыДоговоров = Неопределено 
		   И ТекущиеДанныеТаблицыДоговоров.ДоговорКонтрагента = СтруктураОтбора.ДоговорКонтрагента 
		   И ТекущиеДанныеТаблицыДоговоров.Сделка 			  = СтруктураОтбора.Сделка 
		   И ТекущиеДанныеТаблицыДоговоров.РасчетыВозврат 	  = СтруктураОтбора.РасчетыВозврат Тогда
		   
		   СтруктураОтбора.Удалить("Документ");
		   СтруктураОтбора.Удалить("СуществующийДокумент");
		   ПерезаполнитьТаблицуДокументов(СтруктураОтбора);
		
		   УстановитьДоступностьНаКлиенте();
		   
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДействиеОткрытьОтчет(Команда)
	
	Возврат;
	

КонецПроцедуры

