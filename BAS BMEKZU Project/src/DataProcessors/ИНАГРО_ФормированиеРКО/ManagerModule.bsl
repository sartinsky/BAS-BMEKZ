#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

Процедура АвтозаполнениеПоВедомостям(ПараметрыЗаполнения, АдресХранилища) Экспорт
	
	Объект             = ПараметрыЗаполнения.Объект;
	ПлатежныеВедомости = Объект.ДокументыНачисления.ВыгрузитьКолонку("ПлатежнаяВедомость");
	
	Если ПлатежныеВедомости.Количество() = 0 Тогда
		РезультатВыполнения = Новый Структура("Объект", Объект);
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ИНАГРО_ЗарплатаКВыплатеОрганизаций.Сотрудник КАК Контрагент,
		|	NULL КАК ДоговорКонтрагента,
		|	ЕСТЬNULL(РасходныйКассовыйОрдер.Ссылка, &ПустойРКО) КАК РКО,
		|	СУММА(ИНАГРО_ЗарплатаКВыплатеОрганизаций.Выплата) КАК Сумма,
		|	ИНАГРО_ЗарплатаКВыплатеОрганизаций.Ссылка КАК ПлатежнаяВедомость,
		|	&СчетУчетаРасчетовПоЗП КАК СчетУчетаРасчетовСКонтрагентом
		|ИЗ
		|	Документ.ИНАГРО_ЗарплатаКВыплатеОрганизаций.РаботникиОрганизации КАК ИНАГРО_ЗарплатаКВыплатеОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
		|		ПО ИНАГРО_ЗарплатаКВыплатеОрганизаций.Ссылка = РасходныйКассовыйОрдер.ПлатежнаяВедомость
		|			И ИНАГРО_ЗарплатаКВыплатеОрганизаций.Сотрудник = РасходныйКассовыйОрдер.Контрагент
		|			И (РасходныйКассовыйОрдер.ВидОперации = &ВыплатаЗаработнойПлатыРаботнику)
		|ГДЕ
		|	ИНАГРО_ЗарплатаКВыплатеОрганизаций.ВыплаченностьЗарплаты = &Выплачено
		|	И ИНАГРО_ЗарплатаКВыплатеОрганизаций.СпособВыплаты = &ЧерезКассу
		|	И ИНАГРО_ЗарплатаКВыплатеОрганизаций.Ссылка В(&ПлатежныеВедомости)
		|
		|СГРУППИРОВАТЬ ПО
		|	ИНАГРО_ЗарплатаКВыплатеОрганизаций.Сотрудник,
		|	РасходныйКассовыйОрдер.Ссылка,
		|	НЕ ЕСТЬNULL(РасходныйКассовыйОрдер.Ссылка.Проведен, ЛОЖЬ),
		|	ИНАГРО_ЗарплатаКВыплатеОрганизаций.Ссылка,
		|	&СчетУчетаРасчетовПоЗП
		|";
	
	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() Тогда 
		
		Запрос.Текст = Запрос.Текст + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Контрагент,
			|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.ДоговорКонтрагента,
			//|	ЕСТЬNULL(РасходныйКассовыйОрдер.Ссылка, &ПустойРКО),
			|	ВЫБОР
			|		КОГДА РасходныйКассовыйОрдер.Ссылка ЕСТЬ NULL
			|				ИЛИ РасходныйКассовыйОрдер.ПометкаУдаления = ИСТИНА
			|			ТОГДА &ПустойРКО
			|		ИНАЧЕ РасходныйКассовыйОрдер.Ссылка
			|	КОНЕЦ ,
			|	СУММА(ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Выплата),
			|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Ссылка,
			|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.СчетУчетаРасчетовСКонтрагентом 
			|ИЗ
			|	Документ.ИНАГРО_ВедомостьВыплатПайщикам.СписокПайщиков КАК ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
			|		ПО ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Ссылка = РасходныйКассовыйОрдер.ИНАГРО_ВедомостьВыплатПайщикам
			|			И ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Контрагент = РасходныйКассовыйОрдер.Контрагент
			|			И (РасходныйКассовыйОрдер.ВидОперации = &ВыплатаПаяПайщику)
			|ГДЕ
			|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.СпособВыплаты = &ЧерезКассу
			|	И ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Ссылка В(&ПлатежныеВедомости)
			|
			|СГРУППИРОВАТЬ ПО
			|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Контрагент,
			|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.ДоговорКонтрагента,
			|	РасходныйКассовыйОрдер.Ссылка,
			|	НЕ ЕСТЬNULL(РасходныйКассовыйОрдер.Ссылка.Проведен, ЛОЖЬ),
			|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.Ссылка,
			|	ИНАГРО_ВедомостьВыплатПайщикамСписокПайщиков.СчетУчетаРасчетовСКонтрагентом 
			
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ИНАГРО_НачислениеДругихВыплат.Контрагент,
			|	ИНАГРО_НачислениеДругихВыплат.ДоговорКонтрагента,
			//|	ЕСТЬNULL(РасходныйКассовыйОрдер.Ссылка, &ПустойРКО),
			|	ВЫБОР
			|		КОГДА РасходныйКассовыйОрдер.Ссылка ЕСТЬ NULL
			|				ИЛИ РасходныйКассовыйОрдер.ПометкаУдаления = ИСТИНА
			|			ТОГДА &ПустойРКО
			|		ИНАЧЕ РасходныйКассовыйОрдер.Ссылка
			|	КОНЕЦ ,
			|	СУММА(ИНАГРО_НачислениеДругихВыплат.КВыдаче),
			|	ИНАГРО_НачислениеДругихВыплат.Ссылка,
			|	ИНАГРО_НачислениеДругихВыплат.Ссылка.СчетВзаиморасчетов 
			|ИЗ
			|	Документ.ИНАГРО_НачислениеДругихВыплат.Товары КАК ИНАГРО_НачислениеДругихВыплат
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
			|		ПО ИНАГРО_НачислениеДругихВыплат.Ссылка = РасходныйКассовыйОрдер.ИНАГРО_ВедомостьВыплатПайщикам
			|			И ИНАГРО_НачислениеДругихВыплат.Контрагент = РасходныйКассовыйОрдер.Контрагент
			|			И (РасходныйКассовыйОрдер.ВидОперации = &ВыплатаПаяПайщику)
			|ГДЕ
			|	ИНАГРО_НачислениеДругихВыплат.Ссылка В(&ПлатежныеВедомости)
			|
			|СГРУППИРОВАТЬ ПО
			|	ИНАГРО_НачислениеДругихВыплат.Контрагент,
			|	ИНАГРО_НачислениеДругихВыплат.ДоговорКонтрагента,
			|	РасходныйКассовыйОрдер.Ссылка,
			|	НЕ ЕСТЬNULL(РасходныйКассовыйОрдер.Ссылка.Проведен, ЛОЖЬ),
			|	ИНАГРО_НачислениеДругихВыплат.Ссылка,
			|	ИНАГРО_НачислениеДругихВыплат.Ссылка.СчетВзаиморасчетов 

			|";
		
	КонецЕсли;
		
	// ИНАГРО_ЗарплатаКВыплатеОрганизаций                                                                        
	Запрос.УстановитьПараметр("Выплачено",					 		Перечисления.ВыплаченностьЗарплаты.Выплачено);	
	Запрос.УстановитьПараметр("ВыплатаЗаработнойПлатыРаботнику",	Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику);
	Запрос.УстановитьПараметр("ВыплатаЗаработнойПлатыПоВедомостям",	Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям);
	Запрос.УстановитьПараметр("СчетУчетаРасчетовПоЗП",				ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате);
	
	// ИНАГРО_ВедомостьВыплатПайщикам
	Запрос.УстановитьПараметр("ПлатежныеВедомости", 		        ПлатежныеВедомости);
	Запрос.УстановитьПараметр("ПустойРКО", 					        Документы.РасходныйКассовыйОрдер.ПустаяСсылка());
	Запрос.УстановитьПараметр("ЧерезКассу",					        Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу);
	Запрос.УстановитьПараметр("ВыплатаПаяПайщику",			        Перечисления.ВидыОперацийРКО.ИНАГРО_ВыплатаПаяПайщику);
	
	Объект.Налоги = Запрос.Выполнить().Выгрузить();
	
	РезультатВыполнения = Новый Структура("Объект", Объект);
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры

Процедура АвтозаполнениеДокументов(ПараметрыЗаполнения, АдресХранилища) Экспорт
	
	Объект             = ПараметрыЗаполнения.Объект;
	ТабНалоги 	  	   = Объект.Налоги;
	ПлатежныеДокументы = ТабНалоги.ВыгрузитьКолонку("РКО");
	
	Если ТабНалоги.Количество() = 0 Тогда
		РезультатВыполнения = Новый Структура("Объект", Объект);
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
		Возврат;
	КонецЕсли;	
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	Запрос.УстановитьПараметр("ТабНалоги",  ТабНалоги);
	Запрос.УстановитьПараметр("ПлатежныеДокументы",  ПлатежныеДокументы);

	Запрос.Текст = 	
	"ВЫБРАТЬ 
	|   Налоги.ПлатежнаяВедомость,
	|   Налоги.Сумма,
	|   Налоги.ДоговорКонтрагента,
	|   Налоги.РКО,
	|   Налоги.СчетУчетаРасчетовСКонтрагентом,
	|   Налоги.Контрагент
	|ПОМЕСТИТЬ ВТНалоги
	|ИЗ
	|	&ТабНалоги КАК Налоги";
		
	Запрос.Выполнить();
	
	Запрос.Текст = 	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.Проведен,
	|	РасходныйКассовыйОрдер.ПометкаУдаления
	|ПОМЕСТИТЬ ВТ_РКОрдера
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Ссылка В(&ПлатежныеДокументы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Налоги.ПлатежнаяВедомость,
	|	Налоги.Сумма,
	|	Налоги.Контрагент,
	|	Налоги.РКО,
	|	ВЫБОР
	|		КОГДА ВТ_РКОрдера.Ссылка ЕСТЬ NULL
	|			ТОГДА 3
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_РКОрдера.Проведен
	|					ТОГДА 1
	|				КОГДА ВТ_РКОрдера.ПометкаУдаления
	|					ТОГДА 2
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СостояниеДокумента,
	|   Налоги.СчетУчетаРасчетовСКонтрагентом,
	|	Налоги.ДоговорКонтрагента
	|ПОМЕСТИТЬ ВТ_РКОрдераИНалоги
	|ИЗ
	|	ВТНалоги КАК Налоги
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РКОрдера КАК ВТ_РКОрдера
	|		ПО Налоги.РКО = ВТ_РКОрдера.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РКОрдераИНалоги.ПлатежнаяВедомость,
	|	СУММА(ВТ_РКОрдераИНалоги.Сумма) КАК Сумма,
	|	ВТ_РКОрдераИНалоги.Контрагент,
	|	ВТ_РКОрдераИНалоги.РКО,
	|	ВТ_РКОрдераИНалоги.СостояниеДокумента,
	|   ВТ_РКОрдераИНалоги.СчетУчетаРасчетовСКонтрагентом,
	|	ВТ_РКОрдераИНалоги.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ВТ_РКОрдераИНалоги.РКО = ЗНАЧЕНИЕ(Документ.РасходныйКассовыйОрдер.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Отметка
	|ИЗ
	|	ВТ_РКОрдераИНалоги КАК ВТ_РКОрдераИНалоги
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РКОрдераИНалоги.ПлатежнаяВедомость,
	|	ВТ_РКОрдераИНалоги.РКО,
	|	ВТ_РКОрдераИНалоги.Контрагент,
	|	ВТ_РКОрдераИНалоги.СостояниеДокумента,
	|	ВТ_РКОрдераИНалоги.СчетУчетаРасчетовСКонтрагентом,
	|	ВТ_РКОрдераИНалоги.ДоговорКонтрагента";
		
	Объект.Платежки = Запрос.Выполнить().Выгрузить();
	
	РезультатВыполнения = Новый Структура("Объект", Объект);
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры

Процедура СоздатьДокументы(ПараметрыСоздания, АдресХранилища) Экспорт
	
	Объект                        = ПараметрыСоздания.Объект;
	Организация                   = Объект.Организация;
	СтатьяДвиженияДенежныхСредств = Объект.СтатьяДвиженияДенежныхСредств;
	ДатаРКО                 	  = Объект.ДатаРКО;
	ТабПлатежки                   = Объект.Платежки;
	ТабНалоги                     = Объект.Налоги;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ПодходящаяПлатежка = Неопределено;

	Для Каждого СтрТабПлатежки Из ТабПлатежки Цикл
		
		Если СтрТабПлатежки.Отметка И НЕ ЗначениеЗаполнено(СтрТабПлатежки.РКО) Тогда
			
			ДокументРКО = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			ДокументРКО.Дата		 		= ДатаРКО;			
			ДокументРКО.Организация			= Организация;
			ДокументРКО.СчетОрганизации		= Организация.ОсновнойБанковскийСчет;
			ДокументРКО.СчетКасса			= ПланыСчетов.Хозрасчетный.КассаВНациональнойВалюте;
			ДокументРКО.СуммаДокумента		= СтрТабПлатежки.Сумма;
			ДокументРКО.Контрагент			= СтрТабПлатежки.Контрагент;
			ДокументРКО.ВалютаДокумента		= ВалютаРегламентированногоУчета;
			
			Если ТипЗнч(СтрТабПлатежки.ПлатежнаяВедомость) = Тип("ДокументСсылка.ИНАГРО_ЗарплатаКВыплатеОрганизаций") Тогда 
				ДокументРКО.ВидОперации						= Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику;
				ДокументРКО.СтатьяДвиженияДенежныхСредств	= СтатьяДвиженияДенежныхСредств;
				ДокументРКО.СчетУчетаРасчетовПоЗП			= ПланыСчетов.Хозрасчетный.РасчетыПоЗаработнойПлате;
				ДокументРКО.ПлатежнаяВедомость 				= СтрТабПлатежки.ПлатежнаяВедомость;
				
				ОтборКонтрагента = Новый Структура("Контрагент");

				ОтборКонтрагента.Контрагент = СтрТабПлатежки.Контрагент;
				СтрокиНалогов = ТабНалоги.НайтиСтроки(ОтборКонтрагента);
				
				Для Каждого СтрокаНалогов Из СтрокиНалогов Цикл
					
					Если ЗначениеЗаполнено(СтрокаНалогов.РКО) Тогда
						ПодходящаяПлатежка = СтрокаНалогов.РКО;
						Продолжить;
					КонецЕсли;	
					
					Если ДокументРКО.Ссылка.Пустая() Тогда
						ДокументРКО.Записать();
					КонецЕсли;
					
					СтрокаНалогов.РКО = ДокументРКО.Ссылка;
					
				КонецЦикла;
				
			Иначе
				ДокументРКО.ВидОперации                     = Перечисления.ВидыОперацийРКО.ИНАГРО_ВыплатаПаяПайщику;
				ДокументРКО.ДоговорКонтрагента				= СтрТабПлатежки.ДоговорКонтрагента;
				ДокументРКО.СтатьяДвиженияДенежныхСредств	= СтатьяДвиженияДенежныхСредств;
				ДокументРКО.СчетУчетаРасчетовСКонтрагентом	= СтрТабПлатежки.СчетУчетаРасчетовСКонтрагентом;
				//ДокументРКО.СчетУчетаРасчетовСКонтрагентом	= ПланыСчетов.Хозрасчетный.РасчетыАрендыЗемлиИИмущества;
				ДокументРКО.ИНАГРО_ВедомостьВыплатПайщикам 	= СтрТабПлатежки.ПлатежнаяВедомость;
				ДокументРКО.Основание 						= "Платіжна відомість № "+ ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрТабПлатежки.ПлатежнаяВедомость.Номер) + " від " + Формат(СтрТабПлатежки.ПлатежнаяВедомость.Дата, "ДФ=dd.MM.yyyy");	
				ДокументРКО.Выдать 							= СтрТабПлатежки.Контрагент.Наименование; 
				ДокументРКО.ПоДокументу 					= ?(СтрТабПлатежки.Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, СтрТабПлатежки.Контрагент.ДокументУдостоверяющийЛичность, "");
				
				ОтборКонтрагента = Новый Структура("Контрагент, ДоговорКонтрагента");
				
				ОтборКонтрагента.Контрагент 		= СтрТабПлатежки.Контрагент;
				ОтборКонтрагента.ДоговорКонтрагента = СтрТабПлатежки.ДоговорКонтрагента;
				СтрокиНалогов = ТабНалоги.НайтиСтроки(ОтборКонтрагента);
				
				Для Каждого СтрокаНалогов Из СтрокиНалогов Цикл
					
					Если ЗначениеЗаполнено(СтрокаНалогов.РКО) Тогда
						ПодходящаяПлатежка = СтрокаНалогов.РКО;
						Продолжить;
					КонецЕсли;	
					
					Если ДокументРКО.Ссылка.Пустая() Тогда
						ДокументРКО.Записать();
					КонецЕсли;
					
					СтрокаНалогов.РКО = ДокументРКО.Ссылка;
					
				КонецЦикла;
				
			КонецЕсли;
			
			СтрТабПлатежки.РКО = ДокументРКО.Ссылка;
			СтрТабПлатежки.СостояниеДокумента = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатВыполнения = Новый Структура("Объект", Объект);
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ПровестиДокументы(ПараметрыПроведения, АдресХранилища) Экспорт

	Объект 		   = ПараметрыПроведения.Объект;
	ТабПлатежки    = Объект.Платежки;
	
	Отказ = Ложь;

	Для Каждого СтрТабПлатежки Из ТабПлатежки Цикл
		Если СтрТабПлатежки.Отметка И ЗначениеЗаполнено(СтрТабПлатежки.РКО) Тогда
			ДокРКО = СтрТабПлатежки.РКО.ПолучитьОбъект();
			Если ДокРКО.Проведен Тогда
				Продолжить;
			КонецЕсли;	
			Если ДокРКО.ПометкаУдаления Тогда
				ДокРКО.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			Попытка
				ДокРКО.Записать(РежимЗаписиДокумента.Проведение);
				СтрТабПлатежки.СостояниеДокумента	= 1;
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось провести документ: %1';uk='Не вдалося провести документ: %1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка(СтрТабПлатежки));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецПопытки;
			СтрТабПлатежки.Отметка = Не СтрТабПлатежки.Отметка;
		КонецЕсли;
	КонецЦикла;
	
	РезультатВыполнения = Новый Структура("Отказ, Объект", Отказ, Объект);
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли