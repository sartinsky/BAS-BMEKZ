
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Контрагент1 = Справочники.Контрагенты.НайтиПоРеквизиту("КодПоЕДРПОУ", "111111");
	Контрагент2 = Справочники.Контрагенты.НайтиПоРеквизиту("КодПоЕДРПОУ", "222222");
	
	ИДКонфигурации  = скEDI_НастройкиПодКонфигурацию.ИДКонфигурации();
	
	Запрос = Новый Запрос;
	Если ИДКонфигурации = "БП"
		ИЛИ ИДКонфигурации = "УТП"
		ИЛИ ИДКонфигурации = "УПП" Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА КодыОрганизацииСрезПоследних.КодПоЕДРПОУ = &КодПоЕДРПОУ1
		|			ТОГДА КодыОрганизацииСрезПоследних.Организация
		|	КОНЕЦ КАК Организация1,
		|	ВЫБОР
		|		КОГДА КодыОрганизацииСрезПоследних.КодПоЕДРПОУ = &КодПоЕДРПОУ2
		|			ТОГДА КодыОрганизацииСрезПоследних.Организация
		|	КОНЕЦ КАК Организация2
		|ИЗ
		|	РегистрСведений.КодыОрганизации.СрезПоследних КАК КодыОрганизацииСрезПоследних
		|ГДЕ
		|	(КодыОрганизацииСрезПоследних.КодПоЕДРПОУ = &КодПоЕДРПОУ1
		|			ИЛИ КодыОрганизацииСрезПоследних.КодПоЕДРПОУ = &КодПоЕДРПОУ2)";
	ИначеЕсли ИДКонфигурации = "БП20"
		ИЛИ ИДКонфигурации = "БП20ИНАГРО"
		ИЛИ ИДКонфигурации = "УТ"
		ИЛИ ИДКонфигурации = "УТ30"
		ИЛИ ИДКонфигурации = "УТ31" 
		ИЛИ ИДКонфигурации = "FlyDoc" 
		ИЛИ ИДКонфигурации = "УНФ" Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Организации.КодПоЕДРПОУ = &КодПоЕДРПОУ1
		|			ТОГДА Организации.Ссылка
		|	КОНЕЦ КАК Организация1,
		|	ВЫБОР
		|		КОГДА Организации.КодПоЕДРПОУ = &КодПоЕДРПОУ2
		|			ТОГДА Организации.Ссылка
		|	КОНЕЦ КАК Организация2
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	(Организации.КодПоЕДРПОУ = &КодПоЕДРПОУ1
		|			ИЛИ Организации.КодПоЕДРПОУ = &КодПоЕДРПОУ2)";
	КонецЕсли;
	Запрос.УстановитьПараметр("КодПоЕДРПОУ1", "111111");
	Запрос.УстановитьПараметр("КодПоЕДРПОУ2", "222222");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если ЗначениеЗаполнено(Выборка.Организация1) Тогда
			Организация1С1 = Выборка.Организация1;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.Организация2) Тогда
			Организация1С2 = Выборка.Организация2;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Контрагент1) 
		ИЛИ НЕ ЗначениеЗаполнено(Контрагент2)
		ИЛИ Не ЗначениеЗаполнено(Организация1С1) Тогда
		Элементы.ЗагрузитьСертификатыОрганизация1.Доступность = Ложь;
		Элементы.ФормаПрименитьНастройки.Доступность = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент2) 
		ИЛИ НЕ ЗначениеЗаполнено(Контрагент1)
		ИЛИ Не ЗначениеЗаполнено(Организация1С2) Тогда
		Элементы.ЗагрузитьСертификатыОрганизация2.Доступность = Ложь;
		Элементы.ФормаПрименитьНастройки.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСертификаты(НомерКомплекта)
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		СтруктураПараметров = Новый Структура("Организация, Владелец", Организация1С1, ЭтаФорма);
		лДиалогВыбораФайлов = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		лДиалогВыбораФайлов.ПолноеИмяФайла = "";
		лДиалогВыбораФайлов.Фильтр = НСтр("ru = 'Сертификат '; en = 'Сертифікат '")	+ "(*.cer; *.crt)|*.cer;*.crt";
		лДиалогВыбораФайлов.МножественныйВыбор = Истина;
		лДиалогВыбораФайлов.Заголовок = "Выберите файлы сертификатов";
		лДиалогВыбораФайлов.Показать(Новый ОписаниеОповещения("ПослеВыбораФайловСертификатов", ЭтаФорма, НомерКомплекта));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСертификатыОрганизация1(Команда)
	ЗагрузитьСертификаты(1);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСертификатыОрганизация2(Команда)
	ЗагрузитьСертификаты(2);
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайловСертификатов(ВыбранныеФайлы, НомерКомплекта) Экспорт 
	Если НомерКомплекта = 1 Тогда
		ЗаполнитьМассивФайловСертификатов(ВыбранныеФайлы, ЕДРПОУ1, ТаблицаСертификатов1);
	ИначеЕсли НомерКомплекта = 2 Тогда
		ЗаполнитьМассивФайловСертификатов(ВыбранныеФайлы, ЕДРПОУ2, ТаблицаСертификатов2);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМассивФайловСертификатов(МассивФайловСертификатов, ЕДРПОУ, ТаблицаСертификатов)
	ТаблицаСертификатов.Очистить();
	ЕДРПОУ = "";
	
	Для Каждого ТекФайл Из МассивФайловСертификатов Цикл
		ТекФайлОбъект = Новый Файл(ТекФайл);
		Если ТекФайлОбъект.Существует() Тогда
			лСтрокаBase64_Сертификат = Base64Строка(Новый ДвоичныеДанные(ТекФайл));
			лИнформацияОСертификате = ПолучитьИнформациюОСертификате(лСтрокаBase64_Сертификат);
			Если ЗначениеЗаполнено(лИнформацияОСертификате) Тогда
				Если ЗначениеЗаполнено(лИнформацияОСертификате.EDRPOU) Тогда
					Если ЕДРПОУ = "" Тогда
						ЕДРПОУ = лИнформацияОСертификате.EDRPOU;
					ИначеЕсли ЕДРПОУ <> лИнформацияОСертификате.EDRPOU Тогда
						Продолжить;
					КонецЕсли;
					НоваяСтрока = ТаблицаСертификатов.Добавить();
					НоваяСтрока.ПутьКФайлу = ТекФайл;
					НоваяСтрока.Едрпоу = лИнформацияОСертификате.EDRPOU;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСертификатыИзФайла_ПослеВыбораФайлов(ВыбранныеФайлы, Организация1С, ОрганизацияEDI, Контрагент1С, Контрагент1С_ДляУсловийДокументов) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		ОбработатьМассивФайловСертификатов(ВыбранныеФайлы, Организация1С, ОрганизацияEDI, Контрагент1С, Контрагент1С_ДляУсловийДокументов);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьМассивФайловСертификатов(МассивФайловСертификатов, Организация1С, ОрганизацияEDI, Контрагент1С, Контрагент1С_ДляУсловийДокументов)
	МассивСертификатов = Новый Массив;
	Для Каждого ТекФайл Из МассивФайловСертификатов Цикл
		ТекФайлОбъект = Новый Файл(ТекФайл);
		Если ТекФайлОбъект.Существует() Тогда
			лСтрокаBase64_Сертификат = Base64Строка(Новый ДвоичныеДанные(ТекФайл));
			лИнформацияОСертификате = ПолучитьИнформациюОСертификате(лСтрокаBase64_Сертификат);
			Если ЗначениеЗаполнено(лИнформацияОСертификате) Тогда
				Если ЗначениеЗаполнено(лИнформацияОСертификате.EDRPOU) Тогда
					Сертификат = Новый Структура;
					Сертификат.Вставить("ПутьКФайлу", ТекФайл);
					Сертификат.Вставить("Информация", лИнформацияОСертификате);
					Сертификат.Вставить("ТелоСертификата", лСтрокаBase64_Сертификат);
					МассивСертификатов.Добавить(Сертификат);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	Если МассивСертификатов.Количество() > 0 Тогда
		ОбработатьМассивСертификатов(МассивСертификатов, Организация1С, ОрганизацияEDI, Контрагент1С, Контрагент1С_ДляУсловийДокументов);
	КонецЕсли;
КонецПроцедуры // ОбработатьМассивФайловСертификатов

&НаКлиенте
Функция ПолучитьИнформациюОСертификате(СтрокаBase64_Сертификат)
	ИнформацияОСертификате = Неопределено;
	
	лПараметрыКомандыEDIПровайдеру = Новый Структура;
	лПараметрыКомандыEDIПровайдеру.Вставить("Cert", СтрокаBase64_Сертификат);
	
	лСтруктураСОтветомEDIПровайдера = скEDI_КомандыEDIПровайдеру.ПолучитьРезультатКомандыEDIПровайдеру("getcertinfo", лПараметрыКомандыEDIПровайдеру);
	
	Если лСтруктураСОтветомEDIПровайдера.Code <> 0 Тогда
		
		//Сообщить("Ошибка получения информации о сертификате: " + лСтруктураСОтветомEDIПровайдера.Message + " (код ошибки: " + лСтруктураСОтветомEDIПровайдера.Code + ")");
		Сообщить("Ошибка получения информации о сертификате: " + лСтруктураСОтветомEDIПровайдера.Message);
		
	Иначе
		
		ИнформацияОСертификате = лСтруктураСОтветомEDIПровайдера.Info;
		
	КонецЕсли;
	
	Возврат ИнформацияОСертификате;
	
КонецФункции // ПолучитьИнформациюОСертификате()

&НаСервере
Процедура ОбработатьМассивСертификатов(МассивСертификатов, Организация1С, ОрганизацияEDI, Контрагент1С, Контрагент1С_ДляУсловийДокументов)
	Для Каждого ТекСертификат Из МассивСертификатов Цикл
		EDRPOU = ТекСертификат.Информация.EDRPOU;
		Если ЗначениеЗаполнено(EDRPOU) Тогда
			ОрганизацияEDI = Справочники.скEDI_Организации.НайтиПоКоду(EDRPOU);
			Если ОрганизацияEDI = Справочники.скEDI_Организации.ПустаяСсылка() Тогда
				ОрганизацияEDIОбъект 				= Справочники.скEDI_Организации.СоздатьЭлемент();
				ОрганизацияEDIОбъект.Код 			= EDRPOU;
				ОрганизацияEDIОбъект.Организация1С = Организация1С;
				ОрганизацияEDIОбъект.Наименование  = ТекСертификат.Информация.OrganizationName;
				ОрганизацияEDIОбъект.ЮрФизЛицо		= Перечисления.скEDI_ЮрФизЛицо.ЮрЛицо;
				ОрганизацияEDIОбъект.СпособОтправкиНалоговыхДокументовКонтрагенту = Перечисления.скEDI_СпособыОтправкиНалоговыхДокументовКонтрагенту.ЧерезДФС;
				ОрганизацияEDIОбъект.ВыводитьИнформациюОПодписантах = Истина;
				ОрганизацияEDIОбъект.Записать();
				ОрганизацияEDI = ОрганизацияEDIОбъект.Ссылка;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
	ОбработатьМассивСертификатовНаСервере(МассивСертификатов, ОрганизацияEDI);	
	ПроставитьЕДРПОУКонтрагентаОрганизации(Контрагент1С, Организация1С, ОрганизацияEDI);
	ПрочитатьXMLНачальныеНастройки(ОрганизацияEDI, Контрагент1С_ДляУсловийДокументов);
КонецПроцедуры // ОбработатьМассивФайловСертификатов

&НаСервере
Процедура ОбработатьМассивСертификатовНаСервере(МассивСертификатов, ОрганизацияEDI) Экспорт
	
	ОрганизацияОбъект = ОрганизацияEDI.ПолучитьОбъект();
	
	Для Каждого СтрокаМассиваСертификатов Из МассивСертификатов Цикл
		Если ОрганизацияEDI.Код = СтрокаМассиваСертификатов.Информация.EDRPOU Тогда
			ДРФО = СтрокаМассиваСертификатов.Информация.DRFO;
			ИспользованиеКлюча = скEDI_ОбщегоНазначения.ПолучитьИспользованиеКлючаПоКоду(СтрокаМассиваСертификатов.Информация.KeyUsage);
			РольПодписи = скEDI_ОбщегоНазначения.ПолучитьРольПодписиПоКоду(СтрокаМассиваСертификатов.Информация.Type);
			
			ДатаНачалаДействияСертификата = скEDI_ОбщегоНазначения.СтрокаВДату(СтрокаМассиваСертификатов.Информация.DateBeg);
			ДатаОкончанияДействияСертификата = скEDI_ОбщегоНазначения.СтрокаВДату(СтрокаМассиваСертификатов.Информация.DateEnd);
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	скEDI_Подписи.Ссылка
			|ИЗ
			|	Справочник.скEDI_Подписи КАК скEDI_Подписи
			|ГДЕ
			|	скEDI_Подписи.Владелец = &Владелец
			|	И скEDI_Подписи.ДРФО = &ДРФО
			|	И скEDI_Подписи.Роль = &Роль
			|	И скEDI_Подписи.ИспользованиеКлюча = &ИспользованиеКлюча
			|	И НЕ скEDI_Подписи.ПометкаУдаления";
			Запрос.УстановитьПараметр("Владелец", ОрганизацияEDI);
			Запрос.УстановитьПараметр("ДРФО", ДРФО);
			Запрос.УстановитьПараметр("Роль", РольПодписи);
			Запрос.УстановитьПараметр("ИспользованиеКлюча", ИспользованиеКлюча);
			ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
			
			СертификатНайден = Ложь;
			Если ВыборкаРезультатаЗапроса.Следующий() Тогда
				Подпись = ВыборкаРезультатаЗапроса.Ссылка;
				Для Каждого СтрокаТЧСертификаты из Подпись.Сертификаты Цикл
					Если СтрокаТЧСертификаты.СерийныйНомер = СтрокаМассиваСертификатов.Информация.serialNumber Тогда
						СертификатНайден = Истина;
						Прервать;
					КонецЕсли; 
				КонецЦикла;
				Если Не СертификатНайден Тогда
					ПодписьОбъект = Подпись.ПолучитьОбъект();
				КонецЕсли;
			Иначе
				ПодписьОбъект = Справочники.скEDI_Подписи.СоздатьЭлемент();
				ПодписьОбъект.Владелец = ОрганизацияEDI;
				ПодписьОбъект.ДРФО = ДРФО;
				ПодписьОбъект.Роль = РольПодписи;
				ПодписьОбъект.ИспользованиеКлюча = ИспользованиеКлюча;
				ПодписьОбъект.Фамилия = СтрокаМассиваСертификатов.Информация.Surname;
				ПодписьОбъект.Имя = СтрокаМассиваСертификатов.Информация.GivenName;
				ПодписьОбъект.Должность = СтрокаМассиваСертификатов.Информация.Title;
				ПодписьОбъект.email = СтрокаМассиваСертификатов.Информация.Email;
				
				НаименованиеПодписи = "";
				скEDI_ОбщегоНазначения.ПрисоединитьСтроку(НаименованиеПодписи, СтрокаМассиваСертификатов.Информация.Title);
				Если НаименованиеПодписи = "" Тогда
					скEDI_ОбщегоНазначения.ПрисоединитьСтроку(НаименованиеПодписи, РольПодписи);
				КонецЕсли;
				скEDI_ОбщегоНазначения.ПрисоединитьСтроку(НаименованиеПодписи, СтрокаМассиваСертификатов.Информация.Surname);
				скEDI_ОбщегоНазначения.ПрисоединитьСтроку(НаименованиеПодписи, СтрокаМассиваСертификатов.Информация.GivenName);
				скEDI_ОбщегоНазначения.ПрисоединитьСтроку(НаименованиеПодписи, ИспользованиеКлюча);
				ПодписьОбъект.Наименование = НаименованиеПодписи;
			КонецЕсли;
			Если Не СертификатНайден Тогда
				НовыйСертификат = ПодписьОбъект.Сертификаты.Добавить();
				НовыйСертификат.СерийныйНомер = СтрокаМассиваСертификатов.Информация.serialNumber;
				НовыйСертификат.ТелоСертификата = СтрокаМассиваСертификатов.ТелоСертификата;
				НовыйСертификат.ДатаНачалаДействия = ДатаНачалаДействияСертификата;
				НовыйСертификат.ДатаОкончанияДействия = ДатаОкончанияДействияСертификата;
				НовыйСертификат.ИздательСертификата   = СтрокаМассиваСертификатов.Информация.iName;
				ТекущаяДата = ТекущаяДата();
				Если (НовыйСертификат.ДатаНачалаДействия <= ТекущаяДата) и (НовыйСертификат.ДатаОкончанияДействия >= ТекущаяДата) Тогда
					НовыйСертификат.Использовать = Истина;
					Для Каждого СтрокаТЧСертификаты Из ПодписьОбъект.Сертификаты Цикл
						Если (НовыйСертификат <> СтрокаТЧСертификаты) и не ((СтрокаТЧСертификаты.ДатаНачалаДействия <= ТекущаяДата) и (СтрокаТЧСертификаты.ДатаОкончанияДействия >= ТекущаяДата)) Тогда
							СтрокаТЧСертификаты.Использовать = Ложь;
						КонецЕсли; 
					КонецЦикла;
				КонецЕсли; 
				ПодписьОбъект.Записать();
			КонецЕсли;
		Иначе
			Сообщить(""""
			+ СтрокаМассиваСертификатов.ПутьКФайлу
			+ """ "
			+ НСтр("ru = 'не соответствует выбранной организации'; uk = 'не відповідає обраній організації'"));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройку_Сервер(ОрганизацияEDI, НастройкиПоШаблону, Контрагент1С)
	
	// получим подписантов для дальнейшей настройки	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	скEDI_Подписи.Ссылка
		|ИЗ
		|	Справочник.скEDI_Подписи КАК скEDI_Подписи
		|ГДЕ
		|	скEDI_Подписи.Роль = &РольБухгалтер
		|	И скEDI_Подписи.ИспользованиеКлюча = &ИспользованиеКлюча";
	
	Запрос.УстановитьПараметр("РольБухгалтер", ПредопределенноеЗначение("Перечисление.скEDI_РолиПодписей.ПодписьБухгалтера"));
	Запрос.УстановитьПараметр("ИспользованиеКлюча", ПредопределенноеЗначение("Перечисление.скEDI_ИспользованиеКлючей.Подписание"));
	
	ВыборкаПодписьБухгалтера = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПодписьБухгалтера.Следующий() Цикл
		ПодписьБухгалтера = ВыборкаПодписьБухгалтера.Ссылка;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	скEDI_Подписи.Ссылка
		|ИЗ
		|	Справочник.скEDI_Подписи КАК скEDI_Подписи
		|ГДЕ
		|	скEDI_Подписи.Роль = &РольПечать
		|	И скEDI_Подписи.ИспользованиеКлюча = &ИспользованиеКлюча";
	
	Запрос.УстановитьПараметр("РольПечать", ПредопределенноеЗначение("Перечисление.скEDI_РолиПодписей.ПечатьОрганизации"));
	Запрос.УстановитьПараметр("ИспользованиеКлюча", ПредопределенноеЗначение("Перечисление.скEDI_ИспользованиеКлючей.Подписание"));
	
	ВыборкаПечать = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПечать.Следующий() Цикл
		Печать = ВыборкаПечать.Ссылка;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	скEDI_Подписи.Ссылка
		|ИЗ
		|	Справочник.скEDI_Подписи КАК скEDI_Подписи
		|ГДЕ
		|	скEDI_Подписи.Роль <> &РольПечатьШифрования
		|	И скEDI_Подписи.ИспользованиеКлюча = &ИспользованиеКлюча";
	
	Запрос.УстановитьПараметр("РольПечатьШифрования", ПредопределенноеЗначение("Перечисление.скEDI_РолиПодписей.СертификатШифрования"));
	Запрос.УстановитьПараметр("ИспользованиеКлюча", ПредопределенноеЗначение("Перечисление.скEDI_ИспользованиеКлючей.Шифрование"));
	
	ВыборкаПодпись = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПодпись.Следующий() Цикл
		Подпись = ВыборкаПодпись.Ссылка;
	КонецЦикла;
	
	МассивНастроек = НастройкиПоШаблону.ВыгрузитьЗначения();
	
	ВидыЭлектронныхДокументов = Новый СписокЗначений;
	
	Для Каждого ЭлементМассива Из НастройкиПоШаблону Цикл
		НоваяСтрока = ВидыЭлектронныхДокументов.Добавить();
		НоваяСтрока.Значение = ЭлементМассива.Значение.ИмяЭлектронногоДокумента;
		//Проверка наличия выбранного вида документа
		Ссылка = Справочники.скEDI_ВидыЭлектронныхДокументов.НайтиПоНаименованию(НоваяСтрока.Значение, Истина,,ОрганизацияEDI);
		Если Ссылка = Справочники.скEDI_ВидыЭлектронныхДокументов.ПустаяСсылка() Тогда
			НоваяСтрока.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из ВидыЭлектронныхДокументов Цикл
		Если Не Элемент.Пометка Тогда 
			Продолжить;
		КонецЕсли;
		
		ИмяЭлектронногоДокумента = Элемент.Значение;
		
		Для Каждого ЭлементМассива Из МассивНастроек Цикл
			Если ЭлементМассива.ИмяЭлектронногоДокумента = ИмяЭлектронногоДокумента Тогда
				СписокВидовДокументов1С = Новый СписокЗначений;
				Для Каждого ЭлементНастройкиВыгрузки Из ЭлементМассива.НастройкиВыгрузки Цикл
					Если СписокВидовДокументов1С.НайтиПоЗначению(ЭлементНастройкиВыгрузки.ВидДокумента1С) = Неопределено Тогда
						СписокВидовДокументов1С.Добавить(ЭлементНастройкиВыгрузки.ВидДокумента1С);
					КонецЕсли;
				КонецЦикла;
				
				ВидЭлектронногоДокумента = Справочники.скEDI_ВидыЭлектронныхДокументов.НайтиПоНаименованию(ИмяЭлектронногоДокумента, Истина,,ОрганизацияEDI);
				ТипЭлектронногоДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов[ЭлементМассива.ТипЭлектронногоДокумента];
				ВариантОпределенияСуммыПоДокументу = Перечисления.скEDI_ВариантыОпределенияСуммыПоДокументу[ЭлементМассива.ВариантОпределенияСуммыПоДокументу];
				
				Если ВидЭлектронногоДокумента = Справочники.скEDI_ВидыЭлектронныхДокументов.ПустаяСсылка() Тогда
					ВидЭлектронногоДокументаОбъект 				= Справочники.скEDI_ВидыЭлектронныхДокументов.СоздатьЭлемент();
					ВидЭлектронногоДокументаОбъект.Владелец 	= ОрганизацияEDI;
					ВидЭлектронногоДокументаОбъект.Наименование = ИмяЭлектронногоДокумента;
					ВидЭлектронногоДокументаОбъект.ЭтоПредопределенный = Истина;
					ВидЭлектронногоДокументаОбъект.ТипДокумента = ТипЭлектронногоДокумента;
					ВидЭлектронногоДокументаОбъект.ВариантОпределенияСуммыПоДокументу = ВариантОпределенияСуммыПоДокументу;
					Если ТипЭлектронногоДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.НалоговаяНакладная
							ИЛИ ТипЭлектронногоДокумента = Перечисления.скEDI_ТипыЭлектронныхДокументов.Приложение2КНалоговойНакладной Тогда
						ВидЭлектронногоДокументаОбъект.ТипПериодаСчетчика = Перечисления.скEDI_ТипПериодаСчетчика.Месяц;
					КонецЕсли;
					ВидЭлектронногоДокументаОбъект.НалоговыйДокументПроверятьСоответствиеПодписантаИСертификата = ЭлементМассива.НалоговыйДокументПроверятьСоответствиеПодписантаИСертификата;
					ВидЭлектронногоДокументаОбъект.НалоговыйДокументВыполнятьПроверкуПоXSDСхеме = ЭлементМассива.НалоговыйДокументВыполнятьПроверкуПоXSDСхеме;
					ВидЭлектронногоДокументаОбъект.НалоговыйДокументВыполнятьЛогическуюПроверку = ЭлементМассива.НалоговыйДокументВыполнятьЛогическуюПроверку;
					ВидЭлектронногоДокументаОбъект.НалоговыйДокументДействияПриОбнаруженииОшибок = ЭлементМассива.НалоговыйДокументДействияПриОбнаруженииОшибок;
					
					ВидЭлектронногоДокументаОбъект.ПометкаУдаления  = Ложь;
					Если ЗначениеЗаполнено(ПодписьБухгалтера) Тогда 
						НоваяПодпись = ВидЭлектронногоДокументаОбъект.Подписи.Добавить();
						НоваяПодпись.Подпись = ПодписьБухгалтера;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Печать) Тогда
						НоваяПодпись = ВидЭлектронногоДокументаОбъект.Подписи.Добавить();
						НоваяПодпись.Подпись = Печать;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Подпись) 
						И НЕ ЗначениеЗаполнено(ПодписьБухгалтера)
						И НЕ ЗначениеЗаполнено(Печать) Тогда
						НоваяПодпись = ВидЭлектронногоДокументаОбъект.Подписи.Добавить();
						НоваяПодпись.Подпись = Подпись;
					КонецЕсли;
					
					ВидЭлектронногоДокументаОбъект.Записать();
					ВидЭлектронногоДокумента = ВидЭлектронногоДокументаОбъект.Ссылка;
				КонецЕсли;
				
				Для Каждого ЭлементСпискаВидДокумента1С Из СписокВидовДокументов1С Цикл
					
					ВидДокумента1С = Перечисления.скEDI_ВидыДокументов1С[ЭлементСпискаВидДокумента1С.Значение];
					
					// исходящие документы
					НаборЗаписейПравилВыгрузки = РегистрыСведений.скEDI_ПравилаВыгрузки.СоздатьНаборЗаписей();
					НаборЗаписейПравилВыгрузки.Отбор.ВидЭлектронногоДокумента.Установить(ВидЭлектронногоДокумента);
					НаборЗаписейПравилВыгрузки.Отбор.ВидДокумента1С.Установить(ВидДокумента1С);
					НаборЗаписейПравилВыгрузки.Прочитать();
					
					Приоритет = 0;
					Для Каждого СтрокаНабораЗаписейПравилВыгрузки Из НаборЗаписейПравилВыгрузки Цикл
						СтрокаНабораЗаписейПравилВыгрузки.Использование = Ложь;
						СтрокаНабораЗаписейПравилВыгрузки.Комментарий   = СокрЛП("Заменено при обновлении шаблонов; " + СтрокаНабораЗаписейПравилВыгрузки.Комментарий);
						Если Приоритет < СтрокаНабораЗаписейПравилВыгрузки.Приоритет Тогда
							Приоритет = СтрокаНабораЗаписейПравилВыгрузки.Приоритет;
						КонецЕсли;
					КонецЦикла;
					
					Для Каждого ЭлементМассиваНастройкиВыгрузки Из ЭлементМассива.НастройкиВыгрузки Цикл
						Если ЭлементМассиваНастройкиВыгрузки.ВидДокумента1С = ЭлементСпискаВидДокумента1С.Значение Тогда
							Приоритет = Приоритет + 1;
							МакетШапка= Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет(ЭлементМассиваНастройкиВыгрузки.ИмяМакетаШапка);
							ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
							МакетШапка.Записать(ИмяВременногоФайла);
							ЧтениеХМЛ = новый ЧтениеXML;
							ЧтениеХМЛ.ОткрытьФайл(ИмяВременногоФайла);
							СхемаВыгрузки0 = СериализаторXDTO.ПрочитатьXML(ЧтениеХМЛ,Тип("СхемаКомпоновкиДанных"));  
							
							ИмяМакетаТЧ = "";
							Если ЭлементМассиваНастройкиВыгрузки.Свойство("ИмяМакетаТЧ", ИмяМакетаТЧ) Тогда 
								Если ЗначениеЗаполнено(ИмяМакетаТЧ) Тогда
									МакетТЧ= Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет(ЭлементМассиваНастройкиВыгрузки.ИмяМакетаТЧ);
									ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
									МакетТЧ.Записать(ИмяВременногоФайла);
									ЧтениеХМЛ = новый ЧтениеXML;
									ЧтениеХМЛ.ОткрытьФайл(ИмяВременногоФайла);
									СхемаВыгрузки1 = СериализаторXDTO.ПрочитатьXML(ЧтениеХМЛ,Тип("СхемаКомпоновкиДанных")); 
								КонецЕсли;
							Иначе
								СхемаВыгрузки1 = Неопределено;
							КонецЕсли;
							
							НоваяСтрокаНабораЗаписейПравилВыгрузки = НаборЗаписейПравилВыгрузки.Добавить();
							НоваяСтрокаНабораЗаписейПравилВыгрузки.ВидЭлектронногоДокумента = ВидЭлектронногоДокумента;
							НоваяСтрокаНабораЗаписейПравилВыгрузки.ВидДокумента1С 			= ВидДокумента1С;
							НоваяСтрокаНабораЗаписейПравилВыгрузки.ЕДРПОУВладельцаШаблона	 = ЭлементМассиваНастройкиВыгрузки.ЕДРПОУВладельцаШаблона;
							НоваяСтрокаНабораЗаписейПравилВыгрузки.ИмяШаблона				 = ЭлементМассиваНастройкиВыгрузки.ИмяШаблона;
							НоваяСтрокаНабораЗаписейПравилВыгрузки.ВерсияШаблона			 = ЭлементМассиваНастройкиВыгрузки.ВерсияШаблона;
							НоваяСтрокаНабораЗаписейПравилВыгрузки.Наименование				= ЭлементМассиваНастройкиВыгрузки.Наименование;
							НоваяСтрокаНабораЗаписейПравилВыгрузки.Приоритет				 = Приоритет;
							НоваяСтрокаНабораЗаписейПравилВыгрузки.Схема0 = Новый ХранилищеЗначения(СхемаВыгрузки0);
							Если СхемаВыгрузки1 <> Неопределено Тогда
								НоваяСтрокаНабораЗаписейПравилВыгрузки.Схема1 = Новый ХранилищеЗначения(СхемаВыгрузки1);
							КонецЕсли;
							НоваяСтрокаНабораЗаписейПравилВыгрузки.Использование = Истина;
							НоваяСтрокаНабораЗаписейПравилВыгрузки.ЭтоПредопределенный = Истина;
						КонецЕсли;
					КонецЦикла;
					НаборЗаписейПравилВыгрузки.Записать(Истина);
				КонецЦикла;
				
				Для Каждого УсловиеДокумента Из ЭлементМассива.НастройкиСоответствияВидовЭлектронныхИУчетныхДокументов Цикл
					СоответствиеВидовЭлектронныхИУчетныхДокументов = РегистрыСведений.скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.СоздатьМенеджерЗаписи();
					СоответствиеВидовЭлектронныхИУчетныхДокументов.ВидЭлектронногоДокумента = ВидЭлектронногоДокумента;
					
					лпВидДокумент1С = Перечисления.скEDI_ВидыДокументов1С[УсловиеДокумента.ВидДокументаДляНастройки];
					СоответствиеВидовЭлектронныхИУчетныхДокументов.ВидДокумента1С = лпВидДокумент1С;
					
					СоответствиеВидовЭлектронныхИУчетныхДокументов.Прочитать();
					Если не СоответствиеВидовЭлектронныхИУчетныхДокументов.Выбран() Тогда
						СоответствиеВидовЭлектронныхИУчетныхДокументов = РегистрыСведений.скEDI_СоответствиеВидовЭлектронныхИУчетныхДокументов.СоздатьМенеджерЗаписи();
						СоответствиеВидовЭлектронныхИУчетныхДокументов.ВидЭлектронногоДокумента = ВидЭлектронногоДокумента;
						
						лпВидДокумент1С = Перечисления.скEDI_ВидыДокументов1С[УсловиеДокумента.ВидДокументаДляНастройки];
						СоответствиеВидовЭлектронныхИУчетныхДокументов.ВидДокумента1С = лпВидДокумент1С;
						
						СоответствиеВидовЭлектронныхИУчетныхДокументов.ДолжныБытьУслуги = УсловиеДокумента.ЗаполненыУслуги = "Истина";
						СоответствиеВидовЭлектронныхИУчетныхДокументов.ДолжныБытьТовары = УсловиеДокумента.ЗаполненыТовары = "Истина";
						
						лпВхИсх = Перечисления.скEDI_ВхИсхЭлектронныйДокумент[УсловиеДокумента.ВходящийИсходящий];
						СоответствиеВидовЭлектронныхИУчетныхДокументов.ВхИсх	   = лпВхИсх;
						СоответствиеВидовЭлектронныхИУчетныхДокументов.Использование = Истина;
						СоответствиеВидовЭлектронныхИУчетныхДокументов.ТекстЗапроса= УсловиеДокумента.ТекстЗапроса;
						СоответствиеВидовЭлектронныхИУчетныхДокументов.Записать(Истина);
					КонецЕсли;
				КонецЦикла;	
				
				// входящие документы
				Для Каждого ЭлементМассиваНастройкиЗагрузки Из ЭлементМассива.НастройкиЗагрузки Цикл
					ВидДокумента1С = Перечисления.скEDI_ВидыДокументов1С[ЭлементМассиваНастройкиЗагрузки.ВидДокумента1С];
					ЕДРПОУВладельцаШаблона = ЭлементМассиваНастройкиЗагрузки.ЕДРПОУВладельцаШаблона;
					ИмяШаблона = ЭлементМассиваНастройкиЗагрузки.ИмяШаблона;
					ВерсияШаблона = ЭлементМассиваНастройкиЗагрузки.ВерсияШаблона;
					НаименованиеШаблона = ЭлементМассиваНастройкиЗагрузки.Наименование;
					
					НаборЗаписейПравилЗагрузки = РегистрыСведений.скEDI_ПравилаЗагрузки.СоздатьНаборЗаписей();
					НаборЗаписейПравилЗагрузки.Отбор.Организация.Установить(ОрганизацияEDI);
					НаборЗаписейПравилЗагрузки.Отбор.ЕДРПОУВладельцаШаблона.Установить(ЕДРПОУВладельцаШаблона);
					НаборЗаписейПравилЗагрузки.Отбор.ИмяШаблона.Установить(ИмяШаблона);
					НаборЗаписейПравилЗагрузки.Отбор.ВерсияШаблона.Установить(ВерсияШаблона);
					НаборЗаписейПравилЗагрузки.Прочитать();
					
					Приоритет = 0;
					Для Каждого СтрокаНабораЗаписейПравилЗагрузки Из НаборЗаписейПравилЗагрузки Цикл
						СтрокаНабораЗаписейПравилЗагрузки.Использование = Ложь;
						СтрокаНабораЗаписейПравилЗагрузки.Комментарий   = СокрЛП("Заменено при обновлении шаблонов; " + СтрокаНабораЗаписейПравилЗагрузки.Комментарий);
						Если Приоритет < СтрокаНабораЗаписейПравилЗагрузки.Приоритет Тогда
							Приоритет = СтрокаНабораЗаписейПравилЗагрузки.Приоритет;
						КонецЕсли;
					КонецЦикла;
					
					Приоритет = Приоритет + 1;
					МакетЗагрузки = Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет(ЭлементМассиваНастройкиЗагрузки.ИмяМакетаЗагрузки);
					
					ПравилаЗагрузки = НаборЗаписейПравилЗагрузки.Добавить();
					ПравилаЗагрузки.Организация = ОрганизацияEDI;
					ПравилаЗагрузки.ЕДРПОУВладельцаШаблона  = ЕДРПОУВладельцаШаблона;
					ПравилаЗагрузки.ИмяШаблона  = ИмяШаблона;
					ПравилаЗагрузки.ВерсияШаблона  = ВерсияШаблона;
					ПравилаЗагрузки.Приоритет   = Приоритет;
					ПравилаЗагрузки.ВидЭлектронногоДокумента = ВидЭлектронногоДокумента;
					ПравилаЗагрузки.Схема 		   = Новый ХранилищеЗначения(МакетЗагрузки);;
					ПравилаЗагрузки.Использование  = Истина;
					ПравилаЗагрузки.ВидДокумента1С = ВидДокумента1С;
					ПравилаЗагрузки.Наименование   = НаименованиеШаблона;
					ПравилаЗагрузки.ЭтоПредопределенный = Истина;
					ПравилаЗагрузки.ТиповаяСхемма = ЭлементМассиваНастройкиЗагрузки.ТиповаяСхемма;
					НаборЗаписейПравилЗагрузки.Записать();
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ПрочитатьXMLНачальныеНастройки(ОрганизацияEDI, Контрагент1С)
	
	ИДКонфигурации = скEDI_НастройкиПодКонфигурацию.ИДКонфигурации();
	
	Если ИДКонфигурации = "БП" Тогда
		НачальныеНастройки = Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет("НачальноеЗаполнение_БУХ").ПолучитьТекст();
	ИначеЕсли ИДКонфигурации = "БП20" Тогда
		НачальныеНастройки = Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет("НачальноеЗаполнение_БУХ_2_0").ПолучитьТекст();
	ИначеЕсли ИДКонфигурации = "БП20ИНАГРО" Тогда
		НачальныеНастройки = Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет("НачальноеЗаполнение_БУХ_2_0_ИНАГРО").ПолучитьТекст();
	ИначеЕсли ИДКонфигурации = "УТП" Тогда
		НачальныеНастройки = Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет("НачальноеЗаполнение_УТП").ПолучитьТекст();
	ИначеЕсли ИДКонфигурации = "УПП" Тогда
		НачальныеНастройки = Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет("НачальноеЗаполнение_УПП").ПолучитьТекст();
	ИначеЕсли ИДКонфигурации = "УТ" Тогда
		НачальныеНастройки = Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет("НачальноеЗаполнение_УТ").ПолучитьТекст();
	ИначеЕсли ИДКонфигурации = "FlyDoc" Тогда
		НачальныеНастройки = Справочники.скEDI_ВидыЭлектронныхДокументов.ПолучитьМакет("НачальноеЗаполнение_FlyDoc").ПолучитьТекст();
	Иначе 
		Возврат;
	КонецЕсли;
	
	ЧтениеXML = новый ЧтениеXML;
	
	ЧтениеXML.УстановитьСтроку(НачальныеНастройки);
	ЧтениеXML.Прочитать();
	
	мДОМ = Новый ПостроительDOM;
	мДокументДОМ 	  = мДОМ.Прочитать(ЧтениеXML);
	
	МассивНастроек = Новый Массив;
	
	Для Каждого ДочернийУзел1 Из мДокументДОМ.ДочерниеУзлы Цикл
		Если ВРег(ДочернийУзел1.ИмяУзла) = ВРег("ВидыЭлектронныхДокументов") Тогда
			Для Каждого ДочернийУзел2 Из ДочернийУзел1.ДочерниеУзлы Цикл
				Если ВРег(ДочернийУзел2.ИмяУзла) = ВРег("ВидЭлектронногоДокумента") Тогда
					АтрибутИмяДокумента = ДочернийУзел2.Атрибуты.ПолучитьИменованныйЭлемент("ИмяДокумента"); 
					Если АтрибутИмяДокумента = Неопределено Тогда
						Продолжить;
					КонецЕсли; 
					
					АтрибутТипДокумента = ДочернийУзел2.Атрибуты.ПолучитьИменованныйЭлемент("ТипЭлектронногоДокумента");
					АтрибутВариантОпределенияСумм = ДочернийУзел2.Атрибуты.ПолучитьИменованныйЭлемент("ВариантОпределенияСуммыПоДокументу");
					Если АтрибутТипДокумента =  Неопределено Тогда
						Продолжить;
					КонецЕсли;

					СтруктураНастройки_XML = Новый Структура;
					СтруктураНастройки_XML.Вставить("ИмяЭлектронногоДокумента", АтрибутИмяДокумента.ТекстовоеСодержимое);  
					СтруктураНастройки_XML.Вставить("ТипЭлектронногоДокумента", АтрибутТипДокумента.ТекстовоеСодержимое);
					СтруктураНастройки_XML.Вставить("ВариантОпределенияСуммыПоДокументу", АтрибутВариантОпределенияСумм.ТекстовоеСодержимое);
					
					АтрибутНалоговыйДокументПроверятьСоответствиеПодписантаИСертификата = ДочернийУзел2.Атрибуты.ПолучитьИменованныйЭлемент("НалоговыйДокументПроверятьСоответствиеПодписантаИСертификата");
					Если АтрибутНалоговыйДокументПроверятьСоответствиеПодписантаИСертификата = Неопределено Тогда
						СтруктураНастройки_XML.Вставить("НалоговыйДокументПроверятьСоответствиеПодписантаИСертификата", Ложь);
					Иначе
						СтруктураНастройки_XML.Вставить("НалоговыйДокументПроверятьСоответствиеПодписантаИСертификата", ВРег(АтрибутНалоговыйДокументПроверятьСоответствиеПодписантаИСертификата.ТекстовоеСодержимое) = ВРег("Истина"));
					КонецЕсли;
					
					АтрибутНалоговыйДокументВыполнятьПроверкуПоXSDСхеме = ДочернийУзел2.Атрибуты.ПолучитьИменованныйЭлемент("НалоговыйДокументВыполнятьПроверкуПоXSDСхеме");
					Если АтрибутНалоговыйДокументВыполнятьПроверкуПоXSDСхеме = Неопределено Тогда
						СтруктураНастройки_XML.Вставить("НалоговыйДокументВыполнятьПроверкуПоXSDСхеме", Ложь);
					Иначе
						СтруктураНастройки_XML.Вставить("НалоговыйДокументВыполнятьПроверкуПоXSDСхеме", ВРег(АтрибутНалоговыйДокументВыполнятьПроверкуПоXSDСхеме.ТекстовоеСодержимое) = ВРег("Истина"));
					КонецЕсли;
					
					АтрибутНалоговыйДокументВыполнятьЛогическуюПроверку = ДочернийУзел2.Атрибуты.ПолучитьИменованныйЭлемент("НалоговыйДокументВыполнятьЛогическуюПроверку");
					Если АтрибутНалоговыйДокументВыполнятьЛогическуюПроверку = Неопределено Тогда
						СтруктураНастройки_XML.Вставить("НалоговыйДокументВыполнятьЛогическуюПроверку", Ложь);
					Иначе
						СтруктураНастройки_XML.Вставить("НалоговыйДокументВыполнятьЛогическуюПроверку", ВРег(АтрибутНалоговыйДокументВыполнятьЛогическуюПроверку.ТекстовоеСодержимое) = ВРег("Истина"));
					КонецЕсли;
					
					АтрибутНалоговыйДокументДействияПриОбнаруженииОшибок = ДочернийУзел2.Атрибуты.ПолучитьИменованныйЭлемент("НалоговыйДокументДействияПриОбнаруженииОшибок");
					Если АтрибутНалоговыйДокументДействияПриОбнаруженииОшибок = Неопределено Тогда
						СтруктураНастройки_XML.Вставить("НалоговыйДокументДействияПриОбнаруженииОшибок", Перечисления.скEDI_ДействияПриОбнаруженииОшибок.ПустаяСсылка());
					Иначе
						СтруктураНастройки_XML.Вставить("НалоговыйДокументДействияПриОбнаруженииОшибок", Перечисления.скEDI_ДействияПриОбнаруженииОшибок[АтрибутНалоговыйДокументДействияПриОбнаруженииОшибок.ТекстовоеСодержимое]);
					КонецЕсли;
					
					МассивНастройкиВыгрузки = Новый Массив;
					МассивНастройкиЗагрузки = Новый Массив;
					МассивНастройкиСоответствияВидовЭлектронныхИУчетныхДокументов = Новый Массив;
					
					Для Каждого ДочернийУзел3 Из ДочернийУзел2.ДочерниеУзлы Цикл 
						Если ВРег(ДочернийУзел3.ИмяУзла) = ВРег("НастройкиВыгрузки") Тогда
							Для Каждого ДочернийУзел4 Из ДочернийУзел3.ДочерниеУзлы Цикл 
								Если ВРег(ДочернийУзел4.ИмяУзла) = ВРег("ИмяШаблона") Тогда
									АтрибутИмяШаблона = ДочернийУзел4.Атрибуты.ПолучитьИменованныйЭлемент("ИмяШаблона"); 
									Если АтрибутИмяШаблона = Неопределено Тогда
										Продолжить;
									КонецЕсли;
									
									СтруктураНастроекВыгрузки = Новый Структура("Наименование,ЕДРПОУВладельцаШаблона,ИмяШаблона,ВерсияШаблона,ВидДокумента1С,ИмяМакетаШапка,ИмяМакетаТЧ");
									СтруктураНастроекВыгрузки.ИмяШаблона = АтрибутИмяШаблона.ТекстовоеСодержимое;
									
									АтрибутЕДРПОУВладельцаШаблона = ДочернийУзел4.Атрибуты.ПолучитьИменованныйЭлемент("ЕДРПОУВладельцаШаблона"); 
									Если АтрибутЕДРПОУВладельцаШаблона <> Неопределено Тогда
										СтруктураНастроекВыгрузки.ЕДРПОУВладельцаШаблона = АтрибутЕДРПОУВладельцаШаблона.ТекстовоеСодержимое;
									КонецЕсли;
									АтрибутВерсияШаблона = ДочернийУзел4.Атрибуты.ПолучитьИменованныйЭлемент("ВерсияШаблона"); 
									Если АтрибутВерсияШаблона <> Неопределено Тогда
										СтруктураНастроекВыгрузки.ВерсияШаблона = АтрибутВерсияШаблона.ТекстовоеСодержимое;
									КонецЕсли;
									
									Для Каждого ДочернийУзел5 Из ДочернийУзел4.ДочерниеУзлы Цикл 
										Если ВРег(ДочернийУзел5.ИмяУзла) = ВРег("ВидДокумента1С") Тогда
											СтруктураНастроекВыгрузки.ВидДокумента1С = ДочернийУзел5.ТекстовоеСодержимое;
										ИначеЕсли ВРег(ДочернийУзел5.ИмяУзла) = ВРег("ИмяМакетаШапка") Тогда
											СтруктураНастроекВыгрузки.ИмяМакетаШапка = ДочернийУзел5.ТекстовоеСодержимое;
										ИначеЕсли ВРег(ДочернийУзел5.ИмяУзла) = ВРег("ИмяМакетаТЧ") Тогда
											СтруктураНастроекВыгрузки.ИмяМакетаТЧ = ДочернийУзел5.ТекстовоеСодержимое;
										ИначеЕсли ВРег(ДочернийУзел5.ИмяУзла) = ВРег("Наименование") Тогда
											СтруктураНастроекВыгрузки.Наименование = ДочернийУзел5.ТекстовоеСодержимое;
										КонецЕсли;
									КонецЦикла;
									МассивНастройкиВыгрузки.Добавить(СтруктураНастроекВыгрузки);
								КонецЕсли;
							КонецЦикла;
						ИначеЕсли ВРег(ДочернийУзел3.ИмяУзла) = ВРег("НастройкиЗагрузки") Тогда
							Для Каждого ДочернийУзел4 Из ДочернийУзел3.ДочерниеУзлы Цикл 
								Если ВРег(ДочернийУзел4.ИмяУзла) = ВРег("ИмяШаблона") Тогда
									АтрибутИмяШаблона = ДочернийУзел4.Атрибуты.ПолучитьИменованныйЭлемент("ИмяШаблона"); 
									Если АтрибутИмяШаблона = Неопределено Тогда
										Продолжить;
									КонецЕсли;
									
									СтруктураНастроекЗагрузки = Новый Структура("Наименование,ЕДРПОУВладельцаШаблона,ИмяШаблона,ВерсияШаблона,ВидДокумента1С,ИмяМакетаЗагрузки,ТиповаяСхемма");
									СтруктураНастроекЗагрузки.ИмяШаблона = АтрибутИмяШаблона.ТекстовоеСодержимое;
									СтруктураНастроекЗагрузки.ТиповаяСхемма = Ложь;
									
									АтрибутЕДРПОУВладельцаШаблона = ДочернийУзел4.Атрибуты.ПолучитьИменованныйЭлемент("ЕДРПОУВладельцаШаблона"); 
									Если АтрибутЕДРПОУВладельцаШаблона <> Неопределено Тогда
										СтруктураНастроекЗагрузки.ЕДРПОУВладельцаШаблона = АтрибутЕДРПОУВладельцаШаблона.ТекстовоеСодержимое;
									КонецЕсли;
									АтрибутВерсияШаблона = ДочернийУзел4.Атрибуты.ПолучитьИменованныйЭлемент("ВерсияШаблона"); 
									Если АтрибутВерсияШаблона <> Неопределено Тогда
										СтруктураНастроекЗагрузки.ВерсияШаблона = АтрибутВерсияШаблона.ТекстовоеСодержимое;
									КонецЕсли;
									
									Для Каждого ДочернийУзел5 Из ДочернийУзел4.ДочерниеУзлы Цикл 
										Если ВРег(ДочернийУзел5.ИмяУзла) = ВРег("ВидДокумента1С") Тогда
											СтруктураНастроекЗагрузки.ВидДокумента1С = ДочернийУзел5.ТекстовоеСодержимое;
										ИначеЕсли ВРег(ДочернийУзел5.ИмяУзла) = ВРег("ИмяМакетаЗагрузки") Тогда
											СтруктураНастроекЗагрузки.ИмяМакетаЗагрузки = ДочернийУзел5.ТекстовоеСодержимое;
										ИначеЕсли ВРег(ДочернийУзел5.ИмяУзла) = ВРег("Наименование") Тогда
											СтруктураНастроекЗагрузки.Наименование = ДочернийУзел5.ТекстовоеСодержимое;
										ИначеЕсли ВРег(ДочернийУзел5.ИмяУзла) = ВРег("ТиповаяСхемма") Тогда
											СтруктураНастроекЗагрузки.ТиповаяСхемма = ?(ВРег(СокрЛП(ДочернийУзел5.ТекстовоеСодержимое)) = "ИСТИНА", Истина, Ложь);
										КонецЕсли;
									КонецЦикла;
									МассивНастройкиЗагрузки.Добавить(СтруктураНастроекЗагрузки);
								КонецЕсли;
							КонецЦикла;
						ИначеЕсли ВРег(ДочернийУзел3.ИмяУзла) = ВРег("НастройкиСоответствияВидовЭлектронныхИУчетныхДокументов") Тогда
							Для Каждого ДочернийУзел4 Из ДочернийУзел3.ДочерниеУзлы Цикл 
								Если ВРег(ДочернийУзел4.ИмяУзла) = ВРег("Условие") Тогда
									
									СтруктураНастроекСоответствияВидовЭлектронныхИУчетныхДокументов = Новый Структура("ВидДокументаДляНастройки,ЗаполненыУслуги,ЗаполненыТовары,ВходящийИсходящий,ТекстЗапроса");
									
									Для Каждого ДочернийУзел5 Из ДочернийУзел4.ДочерниеУзлы Цикл 
										Если ВРег(ДочернийУзел5.ИмяУзла) = ВРег("ВидДокументаДляНастройки") Тогда
											СтруктураНастроекСоответствияВидовЭлектронныхИУчетныхДокументов.ВидДокументаДляНастройки = ДочернийУзел5.ТекстовоеСодержимое;
										ИначеЕсли ВРег(ДочернийУзел5.ИмяУзла) = ВРег("ЗаполненыУслуги") Тогда
											СтруктураНастроекСоответствияВидовЭлектронныхИУчетныхДокументов.ЗаполненыУслуги = ДочернийУзел5.ТекстовоеСодержимое;
										ИначеЕсли ВРег(ДочернийУзел5.ИмяУзла) = ВРег("ЗаполненыТовары") Тогда
											СтруктураНастроекСоответствияВидовЭлектронныхИУчетныхДокументов.ЗаполненыТовары = ДочернийУзел5.ТекстовоеСодержимое;
										ИначеЕсли ВРег(ДочернийУзел5.ИмяУзла) = ВРег("ВходящийИсходящий") Тогда
											СтруктураНастроекСоответствияВидовЭлектронныхИУчетныхДокументов.ВходящийИсходящий = ДочернийУзел5.ТекстовоеСодержимое;
										ИначеЕсли ВРег(ДочернийУзел5.ИмяУзла) = ВРег("ТекстЗапроса") Тогда
											СтруктураНастроекСоответствияВидовЭлектронныхИУчетныхДокументов.ТекстЗапроса = ДочернийУзел5.ТекстовоеСодержимое;											
										КонецЕсли;
									КонецЦикла;
									МассивНастройкиСоответствияВидовЭлектронныхИУчетныхДокументов.Добавить(СтруктураНастроекСоответствияВидовЭлектронныхИУчетныхДокументов);
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						СтруктураНастройки_XML.Вставить("НастройкиВыгрузки", МассивНастройкиВыгрузки);
						СтруктураНастройки_XML.Вставить("НастройкиЗагрузки", МассивНастройкиЗагрузки);
						СтруктураНастройки_XML.Вставить("НастройкиСоответствияВидовЭлектронныхИУчетныхДокументов", МассивНастройкиСоответствияВидовЭлектронныхИУчетныхДокументов);
					КонецЦикла;
					МассивНастроек.Добавить(СтруктураНастройки_XML);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	НастройкиПоШаблону = Новый СписокЗначений;
	НастройкиПоШаблону.ЗагрузитьЗначения(МассивНастроек);
	
	ЧтениеXML.Закрыть();
	
	ЗагрузитьНастройку_Сервер(ОрганизацияEDI, НастройкиПоШаблону, Контрагент1С);
	
КонецПроцедуры

&НаСервере
Процедура ПроставитьЕДРПОУКонтрагентаОрганизации(Контрагент, Организация, ОрганизацияEDI)
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		КонтрагентОбъект = Контрагент.ПолучитьОбъект();
		КонтрагентОбъект.КодПоЕДРПОУ = ОрганизацияEDI.Код;
		КонтрагентОбъект.Наименование = ОрганизацияEDI.Наименование;
		КонтрагентОбъект.НаименованиеПолное = ОрганизацияEDI.Наименование;
		КонтрагентОбъект.Записать();
	КонецЕсли;
		
	ИДКонфигурации  = скEDI_НастройкиПодКонфигурацию.ИДКонфигурации();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Если ИДКонфигурации = "БП"
			ИЛИ ИДКонфигурации = "УТП"
			ИЛИ ИДКонфигурации = "УПП" Тогда
			
			МенеджерЗаписи = РегистрыСведений.КодыОрганизации.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Организация = Организация;
			МенеджерЗаписи.Период = Дата("20050101");
			МенеджерЗаписи.КодПоЕДРПОУ = ОрганизацияEDI.Код;
			МенеджерЗаписи.Записать();
			
			Организация1СОбъект = Организация.ПолучитьОбъект();
			Организация1СОбъект.Наименование = ОрганизацияEDI.Наименование;
			Организация1СОбъект.НаименованиеПолное = ОрганизацияEDI.Наименование;
			Организация1СОбъект.Записать();
			
		ИначеЕсли ИДКонфигурации = "БП20"
			ИЛИ ИДКонфигурации = "БП20ИНАГРО"
			ИЛИ ИДКонфигурации = "УТ"
			ИЛИ ИДКонфигурации = "УТ30"
			ИЛИ ИДКонфигурации = "УТ31" 
			ИЛИ ИДКонфигурации = "FlyDoc" 
			ИЛИ ИДКонфигурации = "УНФ" Тогда
			
			Организация1СОбъект = Организация.ПолучитьОбъект();
			Организация1СОбъект.КодПоЕДРПОУ = ОрганизацияEDI.Код;
			Организация1СОбъект.Наименование = ОрганизацияEDI.Наименование; 
			Организация1СОбъект.НаименованиеПолное = ОрганизацияEDI.Наименование;
			Организация1СОбъект.Записать();
			
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРС_ЭлектронныеДокументы(Организация1С, Контрагент)
	
	ИДКонфигурации = скEDI_НастройкиПодКонфигурацию.ИДКонфигурации();
	Запрос = Новый Запрос;
	Если ИДКонфигурации = "УТП"
		Или ИДКонфигурации = "УТ"
		ИЛИ ИДКонфигурации = "УПП" Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|   Документ1С.Организация,
		|   Документ1С.Контрагент,
		|   Документ1С.Ссылка
		|ИЗ
		|   Документ.ЗаказПокупателя КАК Документ1С
		|ГДЕ
		|	Документ1С.Контрагент = &Контрагент
		|	И Документ1С.Организация = &Организация		
		|	И Документ1С.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|   Документ1С.Организация,
		|   Документ1С.Контрагент,
		|   Документ1С.Ссылка
		|ИЗ
		|   Документ.ЗаказПоставщику КАК Документ1С
		|ГДЕ
		|	Документ1С.Контрагент = &Контрагент
		|	И Документ1С.Организация = &Организация		
		|	И Документ1С.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ";
	Иначе
		Запрос.Текст = "";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
	"
	|	ВЫБРАТЬ
	|	Документ1С.Организация,
	|	Документ1С.Контрагент,
	|	Документ1С.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.НалоговаяНакладная КАК Документ1С
	|ГДЕ
	|	Документ1С.Контрагент = &Контрагент
	|	И Документ1С.Организация = &Организация		
	|	И Документ1С.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ1С.Организация,
	|	Документ1С.Контрагент,
	|	Документ1С.Ссылка
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной КАК Документ1С
	|ГДЕ
	|	Документ1С.Контрагент = &Контрагент
	|	И Документ1С.Организация = &Организация		
	|	И Документ1С.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ1С.Организация,
	|	Документ1С.Контрагент,
	|	Документ1С.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Документ1С
	|ГДЕ
	|	Документ1С.Контрагент = &Контрагент
	|	И Документ1С.Организация = &Организация		
	|	И Документ1С.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ1С.Организация,
	|	Документ1С.Контрагент,
	|	Документ1С.Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК Документ1С
	|ГДЕ
	|	Документ1С.Контрагент = &Контрагент
	|	И Документ1С.Организация = &Организация		
	|	И Документ1С.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ1С.Организация,
	|	Документ1С.Контрагент,
	|	Документ1С.Ссылка
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК Документ1С
	|ГДЕ
	|	Документ1С.Контрагент = &Контрагент
	|	И Документ1С.Организация = &Организация		
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ1С.Организация,
	|	Документ1С.Контрагент,
	|	Документ1С.Ссылка
	|ИЗ
	|	Документ.СчетНаОплатуПоставщика КАК Документ1С
	|ГДЕ
	|	Документ1С.Контрагент = &Контрагент
	|	И Документ1С.Организация = &Организация";
	Запрос.УстановитьПараметр("Контрагент"    , Контрагент);
	Запрос.УстановитьПараметр("Организация"   , Организация1С);
	
	Выборка = Запрос.Выполнить().Выбрать();    
	Пока Выборка.Следующий() Цикл
		Попытка
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Дата = ТекущаяДата();
			ДокументОбъект.УстановитьНовыйНомер();
			ДокументОбъект.Записать();
		Исключение
			скEDI_ОбщегоНазначения.скEDI_РегистрацияЭлектронногоДокументаПриЗаписи(Выборка.Ссылка, Ложь);		
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройки(Команда)
	Если ЕДРПОУ1 = "" Тогда
		Сообщить("Не выбраны сертификаты первой организации");
		Возврат;
	КонецЕсли;
	Если ЕДРПОУ2 = "" Тогда
		Сообщить("Не выбраны сертификаты второй организации");
		Возврат;
	КонецЕсли;
	Если ЕДРПОУ1 = ЕДРПОУ2 Тогда
		Сообщить("Выбраны сертификаты по одной и той же организации");
		Возврат;
	КонецЕсли;
	
	Массив1 = Новый Массив;
	Массив2 = Новый Массив;
	Для Каждого Стр Из ТаблицаСертификатов1 Цикл
		Массив1.Добавить(Стр.ПутьКФайлу);
	КонецЦикла;
	Для Каждого Стр Из ТаблицаСертификатов2 Цикл
		Массив2.Добавить(Стр.ПутьКФайлу);
	КонецЦикла;
	
	ЗагрузитьСертификатыИзФайла_ПослеВыбораФайлов(Массив1, Организация1С1, ОрганизацияEDI1, Контрагент1, Контрагент2);	
	ЗаполнитьРС_ЭлектронныеДокументы(Организация1С1, Контрагент2);
	Элементы.ЗагрузитьСертификатыОрганизация1.Доступность = Ложь;
	
	ЗагрузитьСертификатыИзФайла_ПослеВыбораФайлов(Массив2, Организация1С2, ОрганизацияEDI2, Контрагент2, Контрагент1);
	ЗаполнитьРС_ЭлектронныеДокументы(Организация1С2, Контрагент1);
	Элементы.ЗагрузитьСертификатыОрганизация2.Доступность = Ложь;
	
	Элементы.ФормаПрименитьНастройки.Доступность = Ложь;
КонецПроцедуры

