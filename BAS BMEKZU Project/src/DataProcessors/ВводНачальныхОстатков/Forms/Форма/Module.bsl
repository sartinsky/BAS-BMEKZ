////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДатуУчетнойПолитики(ДатаВводаОстатков)

	Возврат ДатаВводаОстатков + 86400;

КонецФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	Объект.ДатаВводаОстатков = ПолучитьДатуНачалаУчета(Объект.Организация);
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КоличествоДокументовВводаОстатков = ПолучитьКоличествоДокументовВводаОстатков(Объект.Организация);
	ЗаполнитьСпискиСчетов();
	ОбновитьФормуНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуНаСервере()

	ДатаУчетнойПолитики = ПолучитьДатуУчетнойПолитики(Объект.ДатаВводаОстатков);
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстДатаВвода = "";
		ЦветДатаВвода =  ЦветаСтиля.ЦветФонаФормы;
	Иначе		
		Если ЗначениеЗаполнено(Объект.ДатаВводаОстатков) Тогда
			ТекстДатаВвода = НСтр("ru='Дата ввода остатков: %1 г.';uk='Дата введення залишків: %1 р.'");
			ТекстДатаВвода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДатаВвода, Формат(Объект.ДатаВводаОстатков, "ДФ=dd.MM.yyyy"));
			ЦветДатаВвода =  ЦветаСтиля.ГиперссылкаТабличнойЧасти;
			ДоступностьУчетнойПолитики = Истина;
		Иначе
			ТекстДатаВвода = НСтр("ru='Установить дату ввода остатков';uk='Встановити дату введення залишків'");
			ЦветДатаВвода =  ЦветаСтиля.НезаполненныйРеквизит;
			ДоступностьУчетнойПолитики = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДекорацияДатаВводаначальныхОстатков.Заголовок  = ТекстДатаВвода;	
	Элементы.ДекорацияДатаВводаначальныхОстатков.ЦветТекста =  ЦветДатаВвода;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаВводаОстатков) Тогда
		
		ДоступностьУчетнойПолитики = Ложь;
		ТекстУчетнаяПолитика       = "";
		ЦветУчетнаяПолитика =  ЦветаСтиля.ЦветФонаФормы;
		
	Иначе
		
		УчетнаяПолитикаЗадана = Ложь;
		Если ЗначениеЗаполнено(ДатаУчетнойПолитики) Тогда
			УчетнаяПолитикаЗадана = УчетнаяПолитикаСуществует(Объект.Организация, ДатаУчетнойПолитики);
		КонецЕсли;
		
		Если УчетнаяПолитикаЗадана Тогда
			ДоступностьУчетнойПолитики = Ложь;
			ТекстУчетнаяПолитика       = "";
			ЦветУчетнаяПолитика =  ЦветаСтиля.ЦветФонаФормы;
		Иначе
			ТекстУчетнаяПолитика = НСтр("ru='Настроить учетную политику';uk='Настроїти облікову політику'");
			ЦветУчетнаяПолитика =  ЦветаСтиля.НезаполненныйРеквизит;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДекорацияУчетнаяПолитика.Доступность = ДоступностьУчетнойПолитики;
	Элементы.ДекорацияУчетнаяПолитика.Заголовок   = ТекстУчетнаяПолитика;	
	Элементы.ДекорацияУчетнаяПолитика.ЦветТекста  =  ЦветУчетнаяПолитика;
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(
		ЭтаФорма,
		Объект.Организация,
		ДатаУчетнойПолитики);

	ЗаголовокКолонки = НСтр("ru='Сальдо (%1)';uk='Сальдо (%1)'");
	ЗаголовокКолонки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокКолонки, СокрЛП(ВалютаРегламентированногоУчета));
	
	МожноИзменятьОстатки = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.ДатаВводаОстатков)
				И УчетнаяПолитика.Существует(Объект.Организация, ДатаУчетнойПолитики);

	ОбновитьОстатки();
	УправлениеФормой();

КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()

	ДатаУчетнойПолитики = ПолучитьДатуУчетнойПолитики(Объект.ДатаВводаОстатков);
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, ДатаУчетнойПолитики);

	Элементы.ОсновныеСчета.ТолькоПросмотр = НЕ МожноИзменятьОстатки;
	Элементы.ОсновныеСчета.КонтекстноеМеню.Доступность = МожноИзменятьОстатки;
	Элементы.ОсновныеСчета.КоманднаяПанель.Доступность = МожноИзменятьОстатки;
	
	Элементы.ЗабалансовыеСчета.ТолькоПросмотр = НЕ МожноИзменятьОстатки;
	Элементы.ЗабалансовыеСчета.КонтекстноеМеню.Доступность = МожноИзменятьОстатки;
	Элементы.ЗабалансовыеСчета.КоманднаяПанель.Доступность = МожноИзменятьОстатки;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокСчетовИсключений()

	СписокИсключений = Новый Массив;
	
	СписокИсключений.Добавить(Планысчетов.Хозрасчетный.МалоценныеАктивыВЭксплуатации);
	СписокИсключений.Добавить(Планысчетов.Хозрасчетный.УценкиЗапасов);	

	Возврат СписокИсключений;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокСчетовИсключенийОценкаТоваровВРознице(РозницаВПродажныхЦенах)
	
	СписокСчетовИсключений = Новый Массив;
	
	Если РозницаВПродажныхЦенах Тогда
		// не должен попасть счет 289
		СписокСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВТорговлеПоПокупнойСтоимости);
	Иначе
		// не должен попасть счет 282, 285
		СписокСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВТорговле);
		СписокСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
		СписокСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
		СписокСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.ТорговаяНаценка);
		СписокСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ);
		СписокСчетовИсключений.Добавить(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ);
	КонецЕсли;
	
	Возврат СписокСчетовИсключений;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоличествоДокументовВводаОстатков(Знач Организация)

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат 0;
	КонецЕсли;

	ЗапросПоДокументам = Новый Запрос;
	ЗапросПоДокументам.УстановитьПараметр("Организация", Организация);
	ЗапросПоДокументам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                           |	КОЛИЧЕСТВО(ВводНачальныхОстатков.Ссылка) КАК Документов
	                           |ИЗ
	                           |	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
	                           |ГДЕ
	                           |	ВводНачальныхОстатков.Организация = &Организация";

	РезультатЗапроса = ЗапросПоДокументам.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Документов;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ЗаполнитьСписокРазделов()

	СписокРазделов.Очистить();

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ВзаиморасчетыСКонтрагентами;
	СтрокаРаздела.КодыГрупп      = ",36,63,371,3771,3772,681,6851,6852,643,644,";
	СтрокаРаздела.КодыИсключений = ",364,36Р,";
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ВзаиморасчетыСПодотчетнымиЛицами;
	СтрокаРаздела.КодыГрупп      = ",372,";
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства;
	СтрокаРаздела.КодыГрупп      = ",30,31,333,334,";
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ЗапасыПереданные;
	СтрокаРаздела.КодыГрупп      = ",206,283,";
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ЗапасыСебестоимость;
	СтрокаРаздела.КодыГрупп      = ",20,221,281,284,289,234,25,26,27,08,";
	СтрокаРаздела.КодыИсключений = ",200,206,";
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ЗарплатаИОтчисления;
	СтрокаРаздела.КодыГрупп      = ",65,66,6411,";
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеИнвестиции;
	СтрокаРаздела.КодыГрупп      = ",15,";
	СтрокаРаздела.КодыИсключений = ",155,";
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.МалоценныеАктивыВЭксплуатации;
	СтрокаРаздела.КодыГрупп      = ",1112,1122,1322,";
	СтрокаРаздела.КодыСчетов     = ",МЦ,";
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.НематериальныеАктивы;
	СтрокаРаздела.КодыГрупп      = ",12,133,";
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ОсновныеСредства;
	СтрокаРаздела.КодыГрупп      = ",10,11,13,286,";
	СтрокаРаздела.КодыИсключений = ",1112,1122,1322,133,1091,";
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ВременнаяРазницаОСЗа2020;
	СтрокаРаздела.КодыГрупп      = ",109,";
	СтрокаРаздела.КодыИсключений = ",1092,";
	
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство;
	СтрокаРаздела.КодыГрупп      = ",23,";
	СтрокаРаздела.КодыИсключений = ",234,235,";
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета;
	СтрокаРаздела.КодыГрупп      = ",021,022,04,07,14,155,16,17,18,19,21,235,34,35,364,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,60,61,62,641,67,69,70,71,72,73,74,75,76,79,80,81,82,83,84,85,90,91,92,93,94,95,96,97,98,99,00,01,023,025,03,05,06,09,24,331,332,373,374,375,376,3773,378,379,642,680,682,683,684,6853,";
	СтрокаРаздела.КодыСчетов     = ",УЗ,";
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов;
	СтрокаРаздела.КодыГрупп      = ",39,";
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыНаКомиссии;
	СтрокаРаздела.КодыГрупп      = ",024,";
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыПоПродажнойЦене;
	СтрокаРаздела.КодыГрупп      = ",282,285,";
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ТранспортноЗаготовительныеРасходыНаОтдельныхСубсчетах;
	СтрокаРаздела.КодыГрупп      = ",200,280,";
	
	




















КонецПроцедуры

&НаКлиенте
Функция ОпределитьРазделУчета(Счет)

	СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет);
	КодСчета = СвойстваСчета.Код;
	Если СвойстваСчета.Родитель.Пустая() Тогда
	    МассивКодовРодителейСчета = Новый Массив;
	Иначе
	    МассивКодовРодителейСчета = ПолучитьКодыРодителейСчета(Счет);
	КонецЕсли; 
	
	Для Каждого СтрокаРаздела Из СписокРазделов Цикл

		Если Найти(СтрокаРаздела.КодыСчетов, "," + КодСчета + ",") > 0 Тогда
			Если Найти(СтрокаРаздела.КодыИсключений, "," + КодСчета + ",") = 0 Тогда
				Возврат СтрокаРаздела.РазделУчета;
			КонецЕсли;
		КонецЕсли;

		Для каждого КодРодителя Из МассивКодовРодителейСчета Цикл
			Если Найти(СтрокаРаздела.КодыГрупп, "," + КодРодителя + ",") > 0 Тогда
				Если Найти(СтрокаРаздела.КодыИсключений, "," + КодСчета + ",") = 0 Тогда
					Возврат СтрокаРаздела.РазделУчета;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 

	КонецЦикла;

	Возврат ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета");

КонецФункции

// Функция получает массив кодов родителей счета
//
// Параметры:
//  Счет  - ссылка на счет, для которого получить массив еодов родителей
//
// Возвращаемое значение:
//   Массив   - массив кодов родителей счета
&НаСервереБезКонтекста
Функция ПолучитьКодыРодителейСчета(Счет)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Счет);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Ссылка,
		|	Хозрасчетный.Код КАК Код
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка = &Ссылка
		|ИТОГИ ПО
		|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Код");
	
КонецФункции // ПолучитьКодыРодителейСчета()
 

&НаКлиенте
Функция ОпределитьТекущийСчетВФорме()

	СтрокаСчета  = Неопределено;
	Если Элементы.ГруппаСпискаСчетов.ТекущаяСтраница = Элементы.ОсновныеСчетаПланаСчетов Тогда
		СтрокаСчета = Элементы.ОсновныеСчета.ТекущиеДанные;
	ИначеЕсли Элементы.ГруппаСпискаСчетов.ТекущаяСтраница = Элементы.ЗабалансовыеСчетаПланаСчетов Тогда
		СтрокаСчета = Элементы.ЗабалансовыеСчета.ТекущиеДанные;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	Если СтрокаСчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат СтрокаСчета.Счет;

КонецФункции

&НаСервере
Процедура ЗаполнитьСпискиСчетов()

	ДатаУчетнойПолитики = ПолучитьДатуУчетнойПолитики(Объект.ДатаВводаОстатков);
	РозницаВПродажныхЦенахНовая = УчетнаяПолитика.СпособОценкиТоваровВРознице(Объект.Организация, ДатаУчетнойПолитики) = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	
	Если РозницаВПродажныхЦенах = РозницаВПродажныхЦенахНовая И ОсновныеСчета.Количество() > 0 И ЗабалансовыеСчета.Количество() > 0 Тогда
		Возврат;
	Иначе
		РозницаВПродажныхЦенах = РозницаВПродажныхЦенахНовая;
	КонецЕсли; 
	
	ОсновныеСчета.Очистить();
	ЗабалансовыеСчета.Очистить();

	Если ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ()Тогда // ИНАГРО
		ЗаполнитьСписокРазделовБСПУ()
	Иначе
		ЗаполнитьСписокРазделов();
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокИсключений", ПолучитьСписокСчетовИсключений());
	Запрос.УстановитьПараметр("НачДата", КонецДня(Объект.ДатаВводаОстатков));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Если БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет() Тогда
		УсловиеПоВалюте = "";
	Иначе
		УсловиеПоВалюте = "И СчетаХР.Валютный = Ложь";
	КонецЕсли;
	Запрос.УстановитьПараметр("СписокИсключенийОценкаТоваровВРознице", 
		ПолучитьСписокСчетовИсключенийОценкаТоваровВРознице(РозницаВПродажныхЦенах));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаХР.Ссылка КАК Счет,
	|	СчетаХР.Наименование,
	|	СчетаХР.Валютный,
	|	СчетаХР.НалоговыйУчет,
	|	СчетаХР.ЗапретитьИспользоватьВПроводках,
	|	СчетаХР.Вид КАК СчетВид,
	|	ВЫБОР
	|		КОГДА СчетаХР.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|			ТОГДА 0
	|		КОГДА СчетаХР.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК НомерКартинки
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК СчетаХР
	|ГДЕ
	|	СчетаХР.Забалансовый = ЛОЖЬ
	|	И СчетаХР.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный)
	|	И ВЫРАЗИТЬ(СчетаХР.Код КАК СТРОКА(1)) В (""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""0"")
	|	И НЕ СчетаХР.Ссылка В (&СписокИсключенийОценкаТоваровВРознице) 
	|	" + УсловиеПоВалюте + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетаХР.Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаХР.Ссылка КАК Счет,
	|	СчетаХР.Наименование,
	|	СчетаХР.Валютный,
	|	СчетаХР.НалоговыйУчет,
	|	СчетаХР.ЗапретитьИспользоватьВПроводках,
	|	СчетаХР.Вид КАК СчетВид,
	|	ВЫБОР
	|		КОГДА СчетаХР.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|			ТОГДА 0
	|		КОГДА СчетаХР.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК НомерКартинки
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК СчетаХР
	|ГДЕ
	|	СчетаХР.Забалансовый = ИСТИНА
	|	" + УсловиеПоВалюте + "
	|	И (ВЫРАЗИТЬ(СчетаХР.Код КАК СТРОКА(1)) В (""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""0"")
	|			ИЛИ СчетаХР.Ссылка В (&СписокИсключений))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетаХР.Порядок";

	ПакетРезультатов = Запрос.ВыполнитьПакет();

	ОсновныеСчета.Загрузить(ПакетРезультатов[0].Выгрузить());
	ЗабалансовыеСчета.Загрузить(ПакетРезультатов[1].Выгрузить());

КонецПроцедуры

&НаСервере
Процедура ОбновитьОстатки()

	ДатаВводаОстатков = Объект.ДатаВводаОстатков+86400;
	
	ДатаУчетнойПолитики = ПолучитьДатуУчетнойПолитики(ДатаВводаОстатков);
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, ДатаУчетнойПолитики);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата", ДатаВводаОстатков);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("СписокИсключений", ПолучитьСписокСчетовИсключений());
	Запрос.УстановитьПараметр("СписокИсключенийОценкаТоваровВРознице", 
		ПолучитьСписокСчетовИсключенийОценкаТоваровВРознице(РозницаВПродажныхЦенах));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланСчетовХозрасчетный.Ссылка КАК Счет,
	|	ПланСчетовХозрасчетный.Порядок КАК Порядок,
	|	ПланСчетовХозрасчетный.Код КАК Код,
	|	ВЫБОР
	|		КОГДА ПланСчетовХозрасчетный.Ссылка В (&СписокИсключений)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоИсключение,
	|	ПланСчетовХозрасчетный.Валютный КАК Валютный,
	|	ПланСчетовХозрасчетный.НалоговыйУчет КАК НалоговыйУчет,
	|	ПланСчетовХозрасчетный.Забалансовый КАК Забалансовый,
	|	ПланСчетовХозрасчетный.ЗапретитьИспользоватьВПроводках,
	|	ПланСчетовХозрасчетный.Вид КАК СчетВид
	|ПОМЕСТИТЬ ПланСчетовХР
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетовХозрасчетный
	|ГДЕ
	|	(ПланСчетовХозрасчетный.Забалансовый = ЛОЖЬ
	|	И ПланСчетовХозрасчетный.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный)
	|	И ВЫРАЗИТЬ(ПланСчетовХозрасчетный.Код КАК СТРОКА(1)) В (""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""0"")
	|	И НЕ ПланСчетовХозрасчетный.Ссылка В (&СписокИсключенийОценкаТоваровВРознице))
	|	ИЛИ
	|	(ПланСчетовХозрасчетный.Забалансовый = ИСТИНА
	|	И (ВЫРАЗИТЬ(ПланСчетовХозрасчетный.Код КАК СТРОКА(1)) В (""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""0"")
	|			ИЛИ ПланСчетовХозрасчетный.Ссылка В (&СписокИсключений)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Счет.Порядок КАК Порядок,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет В (&СписокИсключений)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоИсключение,
	|	ХозрасчетныйОстатки.Счет.Валютный КАК Валютный,
	|	ХозрасчетныйОстатки.Счет.НалоговыйУчет КАК НалоговыйУчет,
	|	ХозрасчетныйОстатки.Счет.Забалансовый КАК Забалансовый,
	|	ХозрасчетныйОстатки.Счет.ЗапретитьИспользоватьВПроводках,
	|	ХозрасчетныйОстатки.Счет.Вид КАК СчетВид,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный)
	|				ТОГДА ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокДт
	|		КОНЕЦ, 0) КАК СальдоНачальноеДт,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный)
	|				ТОГДА ХозрасчетныйОстатки.СуммаРазвернутыйОстатокКт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ, 0) КАК СальдоНачальноеКт,
	|	ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДт КАК СальдоНачальноеДтРазвернутое,
	|	ХозрасчетныйОстатки.СуммаРазвернутыйОстатокКт КАК СальдоНачальноеКтРазвернутое
	|ПОМЕСТИТЬ ОстаткиХР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		&НачДата,
	|		Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ ПланСчетовХР.Счет ИЗ ПланСчетовХР КАК ПланСчетовХР),
	|		,
	|			Организация = &Организация
	|			) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Счет.Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланСчетовХозрасчетный.Счет КАК Счет,
	|	ПланСчетовХозрасчетный.Порядок КАК Порядок,
	|	ПланСчетовХозрасчетный.ЭтоИсключение КАК ЭтоИсключение,
	|	ПланСчетовХозрасчетный.Валютный КАК Валютный,
	|	ПланСчетовХозрасчетный.НалоговыйУчет КАК НалоговыйУчет,
	|	ПланСчетовХозрасчетный.Забалансовый КАК Забалансовый,
	|	ПланСчетовХозрасчетный.ЗапретитьИспользоватьВПроводках КАК ЭтоГруппа,
	|	ПланСчетовХозрасчетный.СчетВид КАК СчетВид,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СальдоНачальноеДт, 0) КАК СальдоНачальноеДт,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СальдоНачальноеКт, 0) КАК СальдоНачальноеКт,
	|	ВЫБОР
	|		КОГДА ПланСчетовХозрасчетный.Забалансовый = ЛОЖЬ
	|			ТОГДА ЕСТЬNULL(ХозрасчетныйОстатки.СальдоНачальноеДтРазвернутое, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СальдоДтРазвернутоеПоОсновнымСчетам,
	|	ВЫБОР
	|		КОГДА ПланСчетовХозрасчетный.Забалансовый = ЛОЖЬ
	|			ТОГДА ЕСТЬNULL(ХозрасчетныйОстатки.СальдоНачальноеКтРазвернутое, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СальдоКтРазвернутоеПоОсновнымСчетам,
	|	ВЫБОР
	|		КОГДА ПланСчетовХозрасчетный.Забалансовый = ИСТИНА
	|			ТОГДА ЕСТЬNULL(ХозрасчетныйОстатки.СальдоНачальноеДтРазвернутое, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СальдоДтРазвернутоеПоЗабалансовымСчетам,
	|	ВЫБОР
	|		КОГДА ПланСчетовХозрасчетный.Забалансовый = ИСТИНА
	|			ТОГДА ЕСТЬNULL(ХозрасчетныйОстатки.СальдоНачальноеКтРазвернутое, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СальдоКтРазвернутоеПоЗабалансовымСчетам,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СальдоНачальноеДтРазвернутое, 0) КАК СальдоНачальноеДтРазвернутое,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СальдоНачальноеКтРазвернутое, 0) КАК СальдоНачальноеКтРазвернутое
	|ИЗ
	|	ПланСчетовХР КАК ПланСчетовХозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиХР КАК ХозрасчетныйОстатки
	|		ПО (ХозрасчетныйОстатки.Счет = ПланСчетовХозрасчетный.Счет)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстатки.Порядок
	|ИТОГИ
	|	МАКСИМУМ(ЭтоИсключение),
	|	МАКСИМУМ(Валютный),
	|	МАКСИМУМ(НалоговыйУчет),
	|	МАКСИМУМ(Забалансовый),
	|	СУММА(СальдоНачальноеДт),
	|	СУММА(СальдоНачальноеКт),
	|	СУММА(СальдоДтРазвернутоеПоОсновнымСчетам),
	|	СУММА(СальдоКтРазвернутоеПоЗабалансовымСчетам),
	|	СУММА(СальдоДтРазвернутоеПоЗабалансовымСчетам),
	|	СУММА(СальдоКтРазвернутоеПоОсновнымСчетам),
	|	СУММА(СальдоНачальноеДтРазвернутое),
	|	СУММА(СальдоНачальноеКтРазвернутое)
	|ПО
	|	ОБЩИЕ,
	|	Счет ИЕРАРХИЯ";
	
	




	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаГрупп = РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Счет");
	ОбработатьВыборкуОстатка(ВыборкаГрупп, Неопределено);

	ВыборкаОбщие = РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "ОБЩИЕ");
	ВыборкаОбщие.Следующий();
	Элементы.ОсновныеСчетаСальдоНачальноеДт.ТекстПодвала     = Формат(ВыборкаОбщие.СальдоДтРазвернутоеПоОсновнымСчетам, "ЧДЦ=2; ЧН=' '") ;
	Элементы.ОсновныеСчетаСальдоНачальноеКт.ТекстПодвала     = Формат(ВыборкаОбщие.СальдоКтРазвернутоеПоОсновнымСчетам, "ЧДЦ=2; ЧН=' '");
	Элементы.ЗабалансовыеСчетаСальдоНачальноеДт.ТекстПодвала = Формат(ВыборкаОбщие.СальдоДтРазвернутоеПоЗабалансовымСчетам, "ЧДЦ=2; ЧН=' '");
	Элементы.ЗабалансовыеСчетаСальдоНачальноеКт.ТекстПодвала = Формат(ВыборкаОбщие.СальдоКтРазвернутоеПоЗабалансовымСчетам, "ЧДЦ=2; ЧН=' '");


	













КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборкуОстатка(ВыборкаГрупп, СчетРодитель)

	Пока ВыборкаГрупп.Следующий() Цикл

		ТипЗаписи = ВыборкаГрупп.ТипЗаписи();
		Если ТипЗаписи = ТипЗаписиЗапроса.ИтогПоГруппировке И СчетРодитель = ВыборкаГрупп.Счет Тогда
			Продолжить;
		КонецЕсли;

		Если ВыборкаГрупп.Забалансовый Тогда
			СтрокиОстатка = ЗабалансовыеСчета.НайтиСтроки(Новый Структура("Счет", ВыборкаГрупп.Счет));
		Иначе
			СтрокиОстатка = ОсновныеСчета.НайтиСтроки(Новый Структура("Счет", ВыборкаГрупп.Счет));
		КонецЕсли;

		Если СтрокиОстатка.Количество() > 0 Тогда
			СтрокаОстатка = СтрокиОстатка[0];
			ЗаполнитьЗначенияСвойств(СтрокаОстатка, ВыборкаГрупп, "СальдоНачальноеДт,СальдоНачальноеКт,СальдоНачальноеДтРазвернутое,СальдоНачальноеКтРазвернутое");
		КонецЕсли;

		Если ТипЗаписи = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
			ОбработатьВыборкуОстатка(ВыборкаГрупп.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Счет"), ВыборкаГрупп.Счет);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДатуНачалаУчета(Знач Организация)

	МенеджерЗаписиРегистра = РегистрыСведений.ДатыВводаНачальныхОстатков.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРегистра.Организация = Организация;
	МенеджерЗаписиРегистра.Прочитать();
	Если МенеджерЗаписиРегистра.Выбран() Тогда
		Возврат МенеджерЗаписиРегистра.ДатаВводаНачальныхОстатков;
	Иначе
		Возврат '00010101';
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиУчетнойПолитики(Знач Организация, Знач ДатаНачалаУчета)

	Отбор = Новый Структура("Организация", Организация);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("ДатаНачалаУчета", ДатаНачалаУчета);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизацийСрезПоследних.Период
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&ДатаНачалаУчета, Организация = &Организация) КАК УчетнаяПолитикаОрганизацийСрезПоследних";
	РезультатЗапроса = Запрос.Выполнить();



	Если РезультатЗапроса.Пустой() Тогда
		ПериодЗаписи = НачалоМесяца(ДатаНачалаУчета);
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ПериодЗаписи = Выборка.Период;
	КонецЕсли;

	СтруктураОтбора = Новый Структура("Период,Организация", ПериодЗаписи, Организация);
	Возврат РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьКлючЗаписи(СтруктураОтбора);

КонецФункции

&НаСервере
Процедура УстановитьДатуНачалаУчета(ДатаНачалаУчета)

	МенеджерЗаписиРегистра = РегистрыСведений.ДатыВводаНачальныхОстатков.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРегистра.Организация = Объект.Организация;
	МенеджерЗаписиРегистра.Прочитать();
	Если НЕ МенеджерЗаписиРегистра.Выбран() Тогда
		МенеджерЗаписиРегистра.Организация = Объект.Организация;
	КонецЕсли;
	МенеджерЗаписиРегистра.ДатаВводаНачальныхОстатков = ДатаНачалаУчета;
	Если КоличествоДокументовВводаОстатков > 0 Тогда
		ПерезаписатьДокументыНаНовуюДату(Объект.Организация, ДатаНачалаУчета);
	КонецЕсли;
	МенеджерЗаписиРегистра.Записать();
	Объект.ДатаВводаОстатков = ПолучитьДатуНачалаУчета(Объект.Организация);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПерезаписатьДокументыНаНовуюДату(Знач Организация, Знач ДатаНачалаУчета)



	ЗапросПоДокументам = Новый Запрос;
	ЗапросПоДокументам.УстановитьПараметр("Организация", Организация);
	ЗапросПоДокументам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                           |	ВводНачальныхОстатков.Ссылка,
	                           |	ВводНачальныхОстатков.Организация,
	                           |	ВводНачальныхОстатков.Проведен
	                           |ИЗ
	                           |	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
	                           |ГДЕ
	                           |	ВводНачальныхОстатков.Организация = &Организация";

	СписокДокументов = ЗапросПоДокументам.Выполнить().Выгрузить();

	Если СписокДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	НачатьТранзакцию();

	Попытка
		Для Каждого ДокументВводаОстатков Из СписокДокументов Цикл

			ДокументОбъект = ДокументВводаОстатков.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Дата = ДатаНачалаУчета;
			Если ДокументОбъект.Проведен Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			Иначе
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
			КонецЕсли;
		КонецЦикла;

	Исключение

		ОтменитьТранзакцию();

		ТекстСообщения = НСтр("ru='Не удалось заменить дату в документах ввода начальных остатков по причине: ';uk='Не вдалося замінити дату в документах введення початкових залишків по причині: '");
		ТекстСообщения = ТекстСообщения + Символы.ПС + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

		Возврат;

	КонецПопытки;

	ЗафиксироватьТранзакцию();

	ТекстСообщения = НСтр("ru='Изменение даты в документах ввода начальных остатков успешно завершено';uk='Зміна дати в документах введення початкових залишків успішно завершена'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДатыНачалаУчетаСервер()

	УстановитьДатуНачалаУчета(Объект.ДатаВводаОстатков);

	ДатаУчетнойПолитики = ПолучитьДатуУчетнойПолитики(Объект.ДатаВводаОстатков);

	МожноИзменятьОстатки = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.ДатаВводаОстатков)
				И УчетнаяПолитика.Существует(Объект.Организация, ДатаУчетнойПолитики);
	ОбновитьОстатки();
	УправлениеФормой();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()

	Объект.ДатаВводаОстатков = ПолучитьДатуНачалаУчета(Объект.Организация);
	КоличествоДокументовВводаОстатков = ПолучитьКоличествоДокументовВводаОстатков(Объект.Организация);

	ЗаполнитьСпискиСчетов();
	ОбновитьФормуНаСервере();

КонецПроцедуры




&НаСервереБезКонтекста
Функция УчетнаяПолитикаСуществует(Знач Организация, Знач Дата)
	
	Возврат УчетнаяПолитика.Существует(Организация, Дата);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Обновить(Команда)

	ОбновитьОстатки();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокДокументов()
	
	Если НЕ МожноИзменятьОстатки Тогда
		Возврат;
	КонецЕсли;

	Счет = ОпределитьТекущийСчетВФорме();
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат;
	КонецЕсли;

	РазделУчета = ОпределитьРазделУчета(Счет);
	Если НЕ ЗначениеЗаполнено(РазделУчета) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыОтбора = Новый Структура("Дата, Организация, РазделУчета",
				Объект.ДатаВводаОстатков, Объект.Организация, РазделУчета);
	
	ПараметрыОтбора.Вставить("ПомощникВводаНачальныхОстатков", Истина);

	ПараметрыФормы = Новый Структура("ПараметрыОтбораСписка", ПараметрыОтбора);
	ОткрытьФорму("Документ.ВводначальныхОстатков.ФормаСписка", ПараметрыФормы, ЭтаФорма, РазделУчета);

КонецПроцедуры










////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияПриИзмененииСервер();

КонецПроцедуры




&НаКлиенте
Процедура ДекорацияДатаВводаначальныхОстатковНажатие(Элемент)
	
	ДатаНачалаУчета = Объект.ДатаВводаОстатков;
	Если Объект.ДатаВводаОстатков = '00010101' Тогда
		ТекстЗаголовка = НСтр("ru='Установка даты ввода остатков';uk='Установка дати введення залишків'") ;
	Иначе
		ТекстЗаголовка = НСтр("ru='Изменение даты ввода остатков';uk='Зміна дати введення залишків'") ;
	КонецЕсли;
	ПараметрыФормы = Новый Структура("ДатаВводаОстатков, ТекстЗаголовка", Объект.ДатаВводаОстатков, ТекстЗаголовка);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДатаНачалаУчета", ДатаНачалаУчета);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДекорацияДатаВводаначальныхОстатковНажатиеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.ВводНачальныхОстатков.Форма.ФормаУстановкиДатыНачалаВеденияУчета", ПараметрыФормы, ЭтаФорма,,,,ОповещениеОЗакрытии);
		
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДатаВводаначальныхОстатковНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РезультатУстановки = РезультатЗакрытия;
	
	Если РезультатУстановки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачалаУчета = ДополнительныеПараметры.ДатаНачалаУчета;
	
	Объект.ДатаВводаОстатков = РезультатУстановки;
	Если Объект.ДатаВводаОстатков = ДатаНачалаУчета Тогда
		Возврат;
	КонецЕсли;
	
	ДатаУчетнойПолитики = ПолучитьДатуУчетнойПолитики(Объект.ДатаВводаОстатков);
	
	УчетнаяПолитикаНеЗадана = НЕ УчетнаяПолитикаСуществует(Объект.Организация, ДатаУчетнойПолитики);
	
	Если УчетнаяПолитикаНеЗадана И КоличествоДокументовВводаОстатков > 0 Тогда
		ТекстПредупреждения = НСтр("ru='На указанную дату не задана учетная политика организации!';uk='На зазначену дату не задана облікова політика організації!'");
		ПоказатьПредупреждение( , ТекстПредупреждения);
		Объект.ДатаВводаОстатков = ДатаНачалаУчета;
		Возврат;
	КонецЕсли;
	
	Если КоличествоДокументовВводаОстатков > 0 И ЗначениеЗаполнено(Объект.ДатаВводаОстатков) Тогда
		ТекстВопроса = НСтр("ru='Изменена дата ввода начальных остатков.
|
|Документы ввода остатков текущей организации будут
|перепроведены на новую дату. 
|
|Продолжить?';uk='Змінена дата введення початкових залишків.
|
|Документи введення залишків поточної організації будуть
|перепроведені на нову дату. 
|
|Продовжити?'");
		ДополнительныеПараметры = Новый Структура("ДатаНачалаУчета", ДатаНачалаУчета);
		Оповещение = Новый ОписаниеОповещения(
			"ВопросИзмененияДатыВводаНачальныхОстатковЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПриИзмененииДатыНачалаУчетаСервер();
		ОбновитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросИзмененияДатыВводаНачальныхОстатковЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПриИзмененииДатыНачалаУчетаСервер();
	Иначе
		Объект.ДатаВводаОстатков = ДополнительныеПараметры.ДатаНачалаУчета;
	КонецЕсли;
	
	ОбновитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУчетнаяПолитикаНажатие(Элемент)
	
	ДатаУчетнойПолитики = ПолучитьДатуУчетнойПолитики(Объект.ДатаВводаОстатков);
	УчетнаяПолитикаСуществует = УчетнаяПолитикаСуществует(Объект.Организация, ДатаУчетнойПолитики);
	Если УчетнаяПолитикаСуществует Тогда
		ПараметрыФормы = Новый Структура("Ключ", ПолучитьКлючЗаписиУчетнойПолитики(Объект.Организация, ДатаУчетнойПолитики));
	Иначе
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", Новый Структура("Организация, Период", Объект.Организация, ДатаУчетнойПолитики));
	КонецЕсли;
	ОткрытьФорму("РегистрСведений.УчетнаяПолитикаОрганизаций.ФормаЗаписи",  ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ <ОсновныеСчета>

&НаКлиенте
Процедура ОсновныеСчетаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеЗаполнено(ВыбраннаяСтрока) И МожноИзменятьОстатки Тогда
		Возврат;
	КонецЕсли;

	ОткрытьСписокДокументов();

КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Отказ = Истина;

	Счет = ОпределитьТекущийСчетВФорме();
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат;
	КонецЕсли;

	РазделУчета = ОпределитьРазделУчета(Счет);
	Если НЕ ЗначениеЗаполнено(РазделУчета) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыОтбора = Новый Структура("Дата, Организация, РазделУчета",
		Объект.ДатаВводаОстатков,
		Объект.Организация,
		РазделУчета);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, ОткрытиеИзОбработкиВводаНачальныхОстатков", ПараметрыОтбора, Истина);
	ОткрытьФорму("Документ.ВводначальныхОстатков.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, РазделУчета);

КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСчетаПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;

	ОткрытьСписокДокументов();

КонецПроцедуры


































////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Объект.Организация = Параметры.Организация;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		Объект.ДатаВводаОстатков = ПолучитьДатуНачалаУчета(Объект.Организация);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.ДатаВводаОстатков) Тогда
		Объект.ДатаВводаОстатков = ПолучитьДатуНачалаУчета(Объект.Организация);
	КонецЕсли;
	
	ПодготовитьФормуНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ИзменениеУчетнойПолитики" Тогда
		ОрганизацияПриИзменении(Неопределено);
	ИначеЕсли ИмяСобытия = "ОбновитьФормуПомощникаВводаОстатков" И Источник = "ВводНачальныхОстатков" И Параметр = Объект.Организация Тогда
		ОбновитьФормуНаСервере();
	ИначеЕсли ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		Объект.Организация = Параметр;
		ОрганизацияПриИзменении(Неопределено);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//

&НаКлиенте
Процедура Подключаемый_НажатиеНаИнформационнуюСсылку(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаИнформационнуюСсылку(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НажатиеНаСсылкуВсеИнформационныеСсылки(Элемент)
	
	ИнформационныйЦентрКлиент.НажатиеНаСсылкуВсеИнформационныеСсылки(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокРазделовБСПУ() // ИНАГРО

	СписокРазделов.Очистить();
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ОсновныеСредства;
	СтрокаРаздела.КодыГрупп      = ",10,11,13,286,1622,1642,1662,";
	СтрокаРаздела.КодыИсключений = ",1112,1122,1322,133,";
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.МалоценныеАктивыВЭксплуатации;
	СтрокаРаздела.КодыГрупп      = ",1112,1122,1322,";
	СтрокаРаздела.КодыСчетов     = ",МЦ,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.НематериальныеАктивы;
	СтрокаРаздела.КодыГрупп      = ",12,133,";
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеИнвестиции;
	СтрокаРаздела.КодыГрупп      = ",15,";
	СтрокаРаздела.КодыИсключений = ",1551,";
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ОтсроченныеНалоговыеАктивыИОбязательства;
	СтрокаРаздела.КодыГрупп      = ",17,54,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ЗапасыСебестоимость;
	СтрокаРаздела.КодыГрупп      = ",20,221,281,284,289,234,25,26,27,08,";
	СтрокаРаздела.КодыИсключений = ",200,206,";
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ТранспортноЗаготовительныеРасходыНаОтдельныхСубсчетах;
	СтрокаРаздела.КодыГрупп      = ",200,280,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ЗапасыПереданные;
	СтрокаРаздела.КодыГрупп      = ",206,283,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство;
	СтрокаРаздела.КодыГрупп      = ",23,";
	СтрокаРаздела.КодыИсключений = ",234,235,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыПоПродажнойЦене;
	СтрокаРаздела.КодыГрупп      = ",282,285,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства;
	СтрокаРаздела.КодыГрупп      = ",30,31,333,334,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ВзаиморасчетыСКонтрагентами;
	СтрокаРаздела.КодыГрупп      = ",36,63,371,3771,3772,681,6851,6852,6856,6857,643,644,";
	СтрокаРаздела.КодыИсключений = ",364,36Р,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ВзаиморасчетыСПодотчетнымиЛицами;
	СтрокаРаздела.КодыГрупп      = ",372,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов;
	СтрокаРаздела.КодыГрупп      = ",39,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ЗарплатаИОтчисления;
	СтрокаРаздела.КодыГрупп      = ",65,66,6411,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыНаКомиссии;
	СтрокаРаздела.КодыГрупп      = ",024,";
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.БиологическиеАктивы;
	СтрокаРаздела.КодыГрупп      = ",013,1551,16,21,";
	СтрокаРаздела.КодыИсключений = ",1622,1642,1662,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета;
	СтрокаРаздела.КодыГрупп      = ",021,022,04,07,14,155,   18,19,   235,34,35,364,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,60,61,62,641,67,69,70,71,72,73,74,75,76,79,80,81,82,83,84,85,90,91,92,93,94,95,96,97,98,99,00,01,023,025,03,05,06,09,24,331,332,335,373,374,375,376,3773,378,379,642,680,682,683,684,6853,";
	СтрокаРаздела.КодыСчетов     = ",УЗ,";
	
КонецПроцедуры
