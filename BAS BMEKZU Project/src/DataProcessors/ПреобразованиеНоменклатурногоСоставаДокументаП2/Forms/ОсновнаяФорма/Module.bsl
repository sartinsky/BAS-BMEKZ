
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Открыта по кнопке заполнения из формы документа
	Если Параметры.Свойство("ОбъектыНазначения") Тогда
		Если Параметры.ОбъектыНазначения.Количество() = 0 Тогда
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Не передан документ в котором необходимо выполнить преобразование номенклатурного состава';uk= 'Не переданий документ в якому необхідно виконати перетворення номенклатурного складу'"),,,,Отказ);
			Возврат;
		Иначе
			Объект.ДокументП2 = Параметры.ОбъектыНазначения[0];
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru='Обработка может быть открыта только из документа ""Приложение 2 к налоговой накладной""!';uk= 'Обробка може бути відкрита лише із документа ""Додаток 2 до податкової накладної""'");
	КонецЕсли;
	
	ТекстСообщенияПользователю = "";
	ЗаполнитьНоменклатурнымСоставомНаСервере(ТекстСообщенияПользователю);
	Если Не ПустаяСтрока(ТекстСообщенияПользователю) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияПользователю);	
	КонецЕсли;
	
	Элементы.ОткрытьДокумент.Заголовок = Строка(Объект.ДокументП2); 
	
	ВыполнялосьПриведениеКНовымПравилам = Объект.ПреобразованиеВыполнялось > 0;

	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Элементы.ИтогиВсего.Заголовок = НСтр("ru='Всего (<>):';uk='Всього (<>):'");
	Иначе
		Элементы.ИтогиВсего.Заголовок = НСтр("ru='Всего (';uk='Всього ('") + СокрЛП(Объект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если Объект.СуммаВключаетНДС Тогда
		Элементы.ИтогиВсегоНДС.Заголовок = НСтр("ru='НДС (в т.ч.):';uk='ПДВ (у т.ч.):'");
	Иначе
		Элементы.ИтогиВсегоНДС.Заголовок = НСтр("ru='НДС (сверху):';uk='ПДВ (зверху):'");
	КонецЕсли;
	
	
	///////////////////////////////////////////////////////
	//управление колонками скидок
	
	ПоказыватьСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьСкидки");
	
	Элементы.ТоварыСуммаСкидки.Видимость    = ПоказыватьСкидки;
	Элементы.ТоварыСуммаБезСкидки.Видимость = ПоказыватьСкидки;
	
	Элементы.УслугиСуммаСкидки.Видимость    = ПоказыватьСкидки;
	Элементы.УслугиСуммаБезСкидки.Видимость = ПоказыватьСкидки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	РассчитатьКоличествоПозицийНомСостава();
	ОбновитьИтоги(ЭтаФорма);
	УправлениеФормой();
	
	УстановитьТекущуюСтраницу();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы Тогда
		Отказ = Модифицированность;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗакрытьФормуПринудительно И ЕстьИзмененияВНоменклатурномСоставе Тогда
		
		ТекстВопроса = НСтр("ru='Данные могут быть утеряны и результат не будет перенесен в документ.';uk= 'Дані можуть бути втрачені і результат не буде перенесений в документ.'");
							 
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да,  	НСтр("ru='Закрыть и перенести данные';uk='Закрити і перенести дані'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, 	НСтр("ru='Закрыть и не переносить данные';uk='Закрити і не переносити дані'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, 	НСтр("ru='Отмена';uk='Скасування'"));					 
							 
		Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыПослеВопроса", ЭтотОбъект, Новый Структура("Отказ", Отказ));
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки);
		
		Отказ = Истина;
		
	Иначе
		Если ДанныеПеренесеныВДокумент Тогда
			Оповестить("СтрокиНоменклатурногоСоставаПреобразованы", Объект.ДокументП2);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыПослеВопроса(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗакрытьФормуПринудительно = Истина;
		ПеренестиНоменклатурныйСоставВДокумент();
		Закрыть();
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		ЗакрытьФормуПринудительно = Истина;
		Закрыть();
	Иначе
		ДопПараметры.Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиТабличныхЧастейОбщие

&НаКлиенте
Процедура НоменклатурныйСоставПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
		
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Возврат;	
	КонецЕсли; 
	
	Если НоваяСтрока Тогда
		РассчитатьКоличествоПозицийНомСостава();
	КонецЕсли;
	
	ЕстьИзмененияВНоменклатурномСоставе = Истина;
	
	ОбновитьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатурныйСоставПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы[Элемент.Имя].ТекущиеДанные;
	
	ЭлементКодПричины = Элементы[Элемент.Имя + "КодПричины"];
	
	СписокВыбораЭлементаКодПричиныТекущейСтроки = ЭлементКодПричины.СписокВыбора;
	СписокВыбораЭлементаКодПричиныТекущейСтроки.Очистить();
	
	Если ПустаяСтрока(ТекущаяСтрока.ПричинаКорректировкиНовая) Тогда
		Возврат;
	КонецЕсли; 
	
	КлючСтруктуры = СтрЗаменить(ТекущаяСтрока.ПричинаКорректировкиНовая, " ", "_");
	СписокВыбораКодов = Неопределено;
	Объект.СоответствиеПричинКорректировкиКодамПричин.Свойство(КлючСтруктуры, СписокВыбораКодов);
	
	Если СписокВыбораКодов <> Неопределено Тогда
		Если СписокВыбораКодов.Количество() = 1 Тогда
			ЭлементКодПричины.КнопкаВыпадающегоСписка = Ложь;
		ИначеЕсли СписокВыбораКодов.Количество() > 1 Тогда
			ЭлементКодПричины.КнопкаВыпадающегоСписка = Истина;
			Для каждого ЭлементСписка Из СписокВыбораКодов Цикл
				СписокВыбораЭлементаКодПричиныТекущейСтроки.Добавить(ЭлементСписка.Значение);	
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатурныйСоставПослеУдаления(Элемент)
	
	РассчитатьКоличествоПозицийНомСостава();
	ОбновитьИтоги(ЭтотОбъект);
	
	ЕстьИзмененияВНоменклатурномСоставе = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТабличнойЧастиТовары

&НаКлиенте
Процедура ТоварыПричинаКорректировкиНоваяПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	УстановитьСписокВыбораИКодПричиныПоУмолчанию(ТекущаяСтрока, "Товары"); 
	ИзменитьСпособВСвязанныхПоНомеруГруппыСтроках(ТекущаяСтрока, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДанныеСтрокиТаблицы = Новый Структура(
		"Номенклатура, ЕдиницаИзмерения, Коэффициент, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС,
		|КодУКТВЭД, НомерГТД,
		|СуммаБезСкидки, СуммаСкидки");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	// заполняем ставку НДС
	ЗаполнитьСтавкуНДС(ДанныеСтрокиТаблицы);
	
	ДанныеОбъекта = Новый Структура(
		"Дата, Организация,
		|ТипЦен, ВалютаДокумента,
		|СуммаВключаетНДС, ДоговорКонтрагента,
		|ЭтоКомиссия, Реализация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.ЭтоКомиссия = Ложь;
	ДанныеОбъекта.Реализация  = Истина;
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ДанныеСтрокиТаблицы", 	ДанныеСтрокиТаблицы);
	ПараметрыОбработки.Вставить("ДанныеОбъекта", 		ДанныеОбъекта);
	
	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Всего", ТекущиеДанные.Всего);
	
	ТоварыНоменклатураПриИзмененииНаСервере(
		ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
							СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения		= СведенияОНоменклатуре.БазоваяЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Коэффициент			= СведенияОНоменклатуре.Коэффициент;
	СтрокаТабличнойЧасти.Цена					= СведенияОНоменклатуре.Цена;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	Документы.Приложение2КНалоговойНакладной.УстановитьКодУКТВЭДВстрокеТоваров(СтрокаТабличнойЧасти);	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТабличнойЧасти, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Товары", 1);
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Товары", 1);
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаБезСкидкиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаБезСкидки(ЭтаФорма, "Товары");
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаСкидки(ЭтаФорма, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличныхЧастейКлиентСервер.СуммаСкидкиНачалоВыбора(ЭтаФорма, "Товары", Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Товары");
	РассчитатьСуммыИзменений(Элементы.Товары.ТекущиеДанные, "Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "Товары");
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИзменениеКоличестваПриИзменении(Элемент)
	
	ИзменениеКоличестваПриИзменении("Товары");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыИзменениеЦеныПриИзменении(Элемент)
	
	ИзменениеЦеныПриИзменении("Товары");
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодУКТВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораНоменклатурыГТД(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодУКТВЭДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НоменклатураГТД") Тогда
	
		ТекущаяСтрокаТоваров = Элементы.Товары.ТекущиеДанные;
		Если НЕ ТекущаяСтрокаТоваров = Неопределено Тогда
			ТекущаяСтрокаТоваров.НомерГТД = ПолучитьРеквизитНоменклатурыГТДНаСервере(ВыбранноеЗначение, "НомерГТД");
		КонецЕсли;

		ВыбранноеЗначение = ПолучитьРеквизитНоменклатурыГТДНаСервере(ВыбранноеЗначение, "КодУКТВЭД");	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитНоменклатурыГТДНаСервере(Ссылка, ИмяРекзвизита)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРекзвизита);	

КонецФункции 

&НаКлиенте
Процедура НачалоВыбораНоменклатурыГТД(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрокаТоваров = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрокаТоваров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыВыбора = Новый СписокЗначений();
	ВариантыВыбора.Добавить(Ложь,   НСтр("ru='Выбрать по данным номенклатуры';uk='Вибрати по даним номенклатури'"));
	ВариантыВыбора.Добавить(Истина, НСтр("ru='Произвольный выбор';uk='Довільний вибір'"));
	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("НачалоВыбораНоменклатурыГТДЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент)), ВариантыВыбора, Элемент, 0);

КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораНоменклатурыГТДЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    Элемент = ДополнительныеПараметры.Элемент;
	
	РезультатВыбора = ВыбранныйЭлемент;
    
    Если РезультатВыбора = Неопределено Тогда
        Возврат;
    КонецЕсли;
    

	ТекущаяСтрокаТоваров = Элементы.Товары.ТекущиеДанные;
	
	Если РезультатВыбора.Значение = Истина Тогда
		ПараметрыВыбора = Новый Структура("ТекущаяСтрока");
		Если ТекущаяСтрокаТоваров <> Неопределено И ЗначениеЗаполнено(ТекущаяСтрокаТоваров.КодУКТВЭД) Тогда
			ПараметрыВыбора.Вставить("ТекущаяСтрока", ТекущаяСтрокаТоваров.КодУКТВЭД);	
		КонецЕсли;  
		ОткрытьФорму("Справочник.КлассификаторУКТВЭД.Форма.ФормаВыбора", ПараметрыВыбора, Элемент);
	Иначе
	    ДанныеСтроки = Новый Структура("КодУКТВЭД, НомерГТД, Номенклатура");
	    ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущаяСтрокаТоваров); 
	    ПараметрыВыбора = ЗаполнитьПараметрыВыбораНоменклатурыГТД(ДанныеСтроки);
		
		ОткрытьФорму("Справочник.НоменклатураГТД.Форма.ФормаВыбора", ПараметрыВыбора, Элемент);
	КонецЕсли; 
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТабличнойЧастиУслуги

&НаКлиенте
Процедура УслугиПричинаКорректировкиНоваяПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Услуги.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	УстановитьСписокВыбораИКодПричиныПоУмолчанию(ТекущаяСтрока, "Услуги"); 
	ИзменитьСпособВСвязанныхПоНомеруГруппыСтроках(ТекущаяСтрока, "Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;

	// Получим общие параметры обработки для реквизитов документа
	ДанныеСтрокиТаблицы = Новый Структура("Номенклатура, Содержание, Количество,
		|Цена, Сумма, СтавкаНДС, СуммаНДС,
		|КодУКТВЭД, 
		|СуммаБезСкидки, СуммаСкидки");
	ЗаполнитьЗначенияСвойств(ДанныеСтрокиТаблицы, ТекущиеДанные);
	
	// заполняем ставку НДС
	ЗаполнитьСтавкуНДС(ДанныеСтрокиТаблицы);
	
	ДанныеОбъекта = Новый Структура("Дата, Организация,
		|ТипЦен, ВалютаДокумента,
		|СуммаВключаетНДС, ДоговорКонтрагента,
		|ЭтоКомиссия, Реализация");
	ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
	
	ДанныеОбъекта.Организация 		= Объект.Организация;
	ДанныеОбъекта.СуммаВключаетНДС	= Объект.СуммаВключаетНДС;
	
	ДанныеОбъекта.ЭтоКомиссия = Ложь;
	ДанныеОбъекта.Реализация  = Истина;
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("ДанныеСтрокиТаблицы", 	ДанныеСтрокиТаблицы);
	ПараметрыОбработки.Вставить("ДанныеОбъекта", 		ДанныеОбъекта);
	
	// Дополнительные поля, требующиеся для заполнения добавленных колонок табличного поля текущей формы.
	ПараметрыОбработки.ДанныеСтрокиТаблицы.Вставить("Всего", ТекущиеДанные.Всего);
	
	УслугиНоменклатураПриИзмененииНаСервере(
		ПараметрыОбработки.ДанныеСтрокиТаблицы, ПараметрыОбработки.ДанныеОбъекта);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ПараметрыОбработки.ДанныеСтрокиТаблицы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УслугиНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти, ДанныеОбъекта)

	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
		СтрокаТабличнойЧасти.Номенклатура, ДанныеОбъекта);
	Если СведенияОНоменклатуре = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Содержание	= СведенияОНоменклатуре.НаименованиеПолное;
	СтрокаТабличнойЧасти.Цена		= СведенияОНоменклатуре.Цена;
	
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДанныеОбъекта.СуммаВключаетНДС);
	
	Документы.Приложение2КНалоговойНакладной.УстановитьКодУКТВЭДВстрокеТоваров(СтрокаТабличнойЧасти); 
	
	ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТабличнойЧасти, ДанныеОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура УслугиКодУКТВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораНоменклатурыГТДУслуги(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКодУКТВЭДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.НоменклатураГТД") Тогда
				
		ВыбранноеЗначение = ПолучитьРеквизитНоменклатурыГТДНаСервере(ВыбранноеЗначение, "КодУКТВЭД");	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораНоменклатурыГТДУслуги(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрокаУслуг = Элементы.Услуги.ТекущиеДанные;
	Если ТекущаяСтрокаУслуг = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантыВыбора = Новый СписокЗначений();
	ВариантыВыбора.Добавить(Ложь,   НСтр("ru='Выбрать по данным номенклатуры';uk='Вибрати по даним номенклатури'"));
	ВариантыВыбора.Добавить(Истина, НСтр("ru='Произвольный выбор';uk='Довільний вибір'"));
	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("НачалоВыбораНоменклатурыГТДУслугиЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент)), ВариантыВыбора, Элемент, 0);

КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораНоменклатурыГТДУслугиЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    Элемент = ДополнительныеПараметры.Элемент;
	
	РезультатВыбора = ВыбранныйЭлемент;
    
    Если РезультатВыбора = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    ТекущаяСтрокаУслуг = Элементы.Услуги.ТекущиеДанные;
	
    Если РезультатВыбора.Значение = Истина Тогда
		ПараметрыВыбора = Новый Структура("ТекущаяСтрока");
		Если ТекущаяСтрокаУслуг <> Неопределено И ЗначениеЗаполнено(ТекущаяСтрокаУслуг.КодУКТВЭД) Тогда
			ПараметрыВыбора.Вставить("ТекущаяСтрока", ТекущаяСтрокаУслуг.КодУКТВЭД);	
		КонецЕсли;
		ОткрытьФорму("Справочник.КлассификаторУКТВЭД.Форма.ФормаВыбора", ПараметрыВыбора, Элемент);
	Иначе
	    ДанныеСтроки = Новый Структура("КодУКТВЭД, Номенклатура");
	    ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущаяСтрокаУслуг); 
	    ПараметрыВыбора = ЗаполнитьПараметрыВыбораНоменклатурыГТДУслуги(ДанныеСтроки);
		
		ОткрытьФорму("Справочник.НоменклатураГТД.Форма.ФормаВыбора", ПараметрыВыбора, Элемент);
	КонецЕсли;
    
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ЗаполнитьПараметрыВыбораНоменклатурыГТД(ТекущаяСтрокаТоваров)
	
	Параметры = Новый Структура("Отбор, ТекущаяСтрока");
	
	Параметры.Отбор = Новый Структура("Владелец", ТекущаяСтрокаТоваров.Номенклатура); 
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КодУКТВЭД", ТекущаяСтрокаТоваров.КодУКТВЭД);
	Запрос.УстановитьПараметр("НомерГТД",  ТекущаяСтрокаТоваров.НомерГТД);
	Запрос.УстановитьПараметр("Владелец",  ТекущаяСтрокаТоваров.Номенклатура);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	НоменклатураГТД.Ссылка
	               |ИЗ
	               |	Справочник.НоменклатураГТД КАК НоменклатураГТД
	               |ГДЕ
	               |	НоменклатураГТД.КодУКТВЭД  = &КодУКТВЭД
	               |	И НоменклатураГТД.НомерГТД = &НомерГТД
	               |	И НоменклатураГТД.Владелец = &Владелец";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Параметры.ТекущаяСтрока = Выборка.Ссылка;	
	КонецЕсли;
	
	Возврат Параметры; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьПараметрыВыбораНоменклатурыГТДУслуги(ТекущаяСтрокаТоваров)
	
	Параметры = Новый Структура("Отбор, ТекущаяСтрока");
	
	Параметры.Отбор = Новый Структура("Владелец", ТекущаяСтрокаТоваров.Номенклатура); 
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КодУКТВЭД", ТекущаяСтрокаТоваров.КодУКТВЭД);
	Запрос.УстановитьПараметр("Владелец",  ТекущаяСтрокаТоваров.Номенклатура);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	НоменклатураГТД.Ссылка
	               |ИЗ
	               |	Справочник.НоменклатураГТД КАК НоменклатураГТД
	               |ГДЕ
	               |	НоменклатураГТД.КодУКТВЭД  = &КодУКТВЭД
	               |	И НоменклатураГТД.Владелец = &Владелец";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Параметры.ТекущаяСтрока = Выборка.Ссылка;	
	КонецЕсли;
	
	Возврат Параметры; 
	
КонецФункции 

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Услуги", 1);
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Услуги");

	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтаФорма, "Услуги", 1);
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Услуги");

КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаБезСкидкиПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаБезСкидки(ЭтаФорма, "Услуги", 1);
	РассчитатьСуммыИзменений(Элементы.Услуги.ТекущиеДанные, "Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаСкидкиПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммаСкидки(ЭтаФорма, "Услуги");
	РассчитатьСуммыИзменений(Элементы.Услуги.ТекущиеДанные, "Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаСкидкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаТабличныхЧастейКлиентСервер.СуммаСкидкиНачалоВыбора(ЭтаФорма, "Услуги", Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтаФорма, "Услуги", 1);
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Услуги");

КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "Услуги");
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "Услуги");

КонецПроцедуры

&НаКлиенте
Процедура УслугиИзменениеКоличестваПриИзменении(Элемент)
	
	ИзменениеКоличестваПриИзменении("Услуги");
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиИзменениеЦеныПриИзменении(Элемент)
	
	ИзменениеЦеныПриИзменении("Услуги");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТабличнойЧастиОС

&НаКлиенте
Процедура ОСПричинаКорректировкиНоваяПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОС.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	УстановитьСписокВыбораИКодПричиныПоУмолчанию(ТекущаяСтрока, "ОС"); 
	ИзменитьСпособВСвязанныхПоНомеруГруппыСтроках(ТекущаяСтрока, "ОС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОсновноеСредствоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	// Рассчитываем суммы
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "ОС");
	
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "ОС");
	
КонецПроцедуры	

&НаКлиенте
Процедура ОССтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	// Рассчитываем суммы
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "ОС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОССуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ОС.ТекущиеДанные;
	
	// Рассчитываем суммы
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "ОС");
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "ОС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОСИзменениеКоличестваПриИзменении(Элемент)
	
	ИзменениеКоличестваПриИзменении("ОС");
	
КонецПроцедуры

&НаКлиенте
Процедура ОСИзменениеЦеныПриИзменении(Элемент)
	
	ИзменениеЦеныПриИзменении("ОС");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТабличнойЧастиНМА

&НаКлиенте
Процедура НМАПричинаКорректировкиНоваяПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.НМА.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	УстановитьСписокВыбораИКодПричиныПоУмолчанию(ТекущаяСтрока, "НМА");
	ИзменитьСпособВСвязанныхПоНомеруГруппыСтроках(ТекущаяСтрока, "НМА");
	
КонецПроцедуры

&НаКлиенте
Процедура НМАНематериальныйАктивПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.НМА.ТекущиеДанные;
	
	// Рассчитываем суммы
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "НМА");
	
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "НМА");
	
КонецПроцедуры	

&НаКлиенте
Процедура НМАСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.НМА.ТекущиеДанные;
	
	// Рассчитываем суммы
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "НМА");

КонецПроцедуры

&НаКлиенте
Процедура НМАСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.НМА.ТекущиеДанные;
	
	// Рассчитываем суммы
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтаФорма, "НМА");
	
	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, "НМА");
	
КонецПроцедуры

&НаКлиенте
Процедура НМАИзменениеКоличестваПриИзменении(Элемент)
	ИзменениеКоличестваПриИзменении("НМА");
КонецПроцедуры

&НаКлиенте
Процедура НМАИзменениеЦеныПриИзменении(Элемент)
	ИзменениеЦеныПриИзменении("НМА");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьДокумент(Команда)
	
	ПоказатьЗначение(,Объект.ДокументП2);
	
КонецПроцедуры

&НаКлиенте
Процедура ПривестиКСоответствиюПравиламШлюза(Команда)
	
	Если ВыполнялосьПриведениеКНовымПравилам Тогда
		
		Если Объект.ПреобразованиеВыполнялось = 1 Тогда
			ТекстВопроса = НСтр("ru='Возможно строки уже преобразовывались.';uk= 'Ймовірно рядки вже перетворювалися.'"); 
		Иначе	
			ТекстВопроса = НСтр("ru='Строки уже преобразовывались.';uk= 'Рядки вже перетворювалися.'");
		КонецЕсли; 
		
		ТекстВопроса = ТекстВопроса + Символы.ПС + 
			НСтр("ru='При повторном преобразовании результат может быть не корректным.
                  |Продолжить в любом случае?';uk= 'При повторному перетворені результат може бути не коректним. 
                  |Продовжити в будь-якому випадку?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПривестиКСоответствиюПравиламШлюзаЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли; 
	
	ПривестиКСоответствиюПравиламШлюзаЗавершение(КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПривестиКСоответствиюПравиламШлюзаЗавершение(Ответ = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	Если Не Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли; 
	
	ТекстСообщенияПредупреждение = "";
	ПроверитьЗаполнениеСтрок(ТекстСообщенияПредупреждение);
	
	Если Не ПустаяСтрока(ТекстСообщенияПредупреждение) Тогда
		
		ТекстВопроса = ТекстСообщенияПредупреждение + Символы.ПС + НСтр("ru='Продолжить?';uk= 'Продовжити?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПривестиКСоответствиюПравиламШлюзаЗавершение2", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;	
	
	КонецЕсли; 
	
	ПривестиКСоответствиюПравиламШлюзаЗавершение2(КодВозвратаДиалога.Да); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПривестиКСоответствиюПравиламШлюзаЗавершение2(Ответ = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	Если Не Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли; 
	
	ПривестиКСоответствиюПравиламШлюзаНаСервере();
	ВыполнялосьПриведениеКНовымПравилам = Истина;
	Объект.ПреобразованиеВыполнялось = 2;
	ЕстьИзмененияВНоменклатурномСоставе = Истина;
	
	РассчитатьКоличествоПозицийНомСостава();
	УправлениеФормой(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиДанныеВДокумент(Команда)
	
	Если Не ВыполнялосьПриведениеКНовымПравилам Тогда
	
		ТекстВопроса = НСтр("ru='Преобразование строк не выполнено. 
                             |Вы уверенны, что хотите перенести не преобразованные данные в документ?
                             |Данные табличных частей документа будут полностью заменены на данные из обработки.';uk= 'Перетворенняя рядків не виконано.
                             |Ви впевнені, що хочете перенести не перетворені дані в документ? 
                             |Дані табличних частин документа будуть повністю замінені на дані із обробки.'");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Перенести и закрыть';uk='Перенести і закрити'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПеренестиДанныеВДокументЗавершение", ЭтотОбъект), ТекстВопроса, Кнопки);
		Возврат;
		
	КонецЕсли; 
	
	ПеренестиДанныеВДокументЗавершение(КодВозвратаДиалога.Да);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиДанныеВДокументЗавершение(Ответ = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	Если Не Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;	
	КонецЕсли; 
	
	ПеренестиНоменклатурныйСоставВДокумент();
	
	ЗакрытьФормуПринудительно = Истина;
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьНоменклатурнымСоставомНаСервере(СообщенияВПроцессеЗаполнения = Неопределено)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаполнитьНоменклатурнымСоставом(СообщенияВПроцессеЗаполнения);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДобавленныеКолонкиТаблиц(ИмяТаблицы = "") Экспорт
	
	ПараметрыОбъекта = Новый Структура("СуммаВключаетНДС", Объект.СуммаВключаетНДС);

	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Товары" Тогда
		Для каждого СтрокаТаблицы Из Объект.Товары Цикл 
			ПолучитьВсегоСтрокиТаблицы(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "Услуги" Тогда
		Для каждого СтрокаТаблицы Из Объект.Услуги Цикл
			ПолучитьВсегоСтрокиТаблицы(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "ОС" Тогда
		Для каждого СтрокаТаблицы Из Объект.ОС Цикл
			ПолучитьВсегоСтрокиТаблицы(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяТаблицы) ИЛИ ИмяТаблицы = "НМА" Тогда
		Для каждого СтрокаТаблицы Из Объект.НМА Цикл
			ПолучитьВсегоСтрокиТаблицы(СтрокаТаблицы, ПараметрыОбъекта);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Объект = Форма.Объект;
	
	ИзменениеВсего = 0;
	ИзменениеВсегоНДС = 0;
	
	СтрокиДокумента = Объект.Товары;
	Для каждого Строка Из СтрокиДокумента Цикл
		ИзменениеВсего = ИзменениеВсего + Строка.ИзменениеСуммы;
		ИзменениеВсегоНДС = ИзменениеВсегоНДС + Строка.ИзменениеСуммыНДС;
	КонецЦикла;
	
	СтрокиДокумента = Объект.Услуги;
	Для каждого Строка Из СтрокиДокумента Цикл
		ИзменениеВсего = ИзменениеВсего + Строка.ИзменениеСуммы;
		ИзменениеВсегоНДС = ИзменениеВсегоНДС + Строка.ИзменениеСуммыНДС;
	КонецЦикла;
	
	СтрокиДокумента = Объект.ОС;
	Для каждого Строка Из СтрокиДокумента Цикл
		ИзменениеВсего = ИзменениеВсего + Строка.ИзменениеСуммы;
		ИзменениеВсегоНДС = ИзменениеВсегоНДС + Строка.ИзменениеСуммыНДС;
	КонецЦикла;
	
	СтрокиДокумента = Объект.НМА;
	Для каждого Строка Из СтрокиДокумента Цикл
		ИзменениеВсего = ИзменениеВсего + Строка.ИзменениеСуммы;
		ИзменениеВсегоНДС = ИзменениеВсегоНДС + Строка.ИзменениеСуммыНДС;
	КонецЦикла;
	
	Форма.ИтогиВсего    = ?(Объект.СуммаВключаетНДС, ИзменениеВсего, ИзменениеВсего + ИзменениеВсегоНДС);
	Форма.ИтогиВсегоНДС = ИзменениеВсегоНДС;

	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		Форма.Элементы.ИтогиВсего.Заголовок = НСтр("ru='Всего изменений(<>):';uk='Всього змін(<>):'");
	Иначе
		Форма.Элементы.ИтогиВсего.Заголовок = НСтр("ru='Всего изменений(';uk='Всього змін('") + СокрЛП(Объект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если Объект.СуммаВключаетНДС Тогда
		Форма.Элементы.ИтогиВсегоНДС.Заголовок = НСтр("ru='Изменение НДС(в т. ч.):';uk='Зміна ПДВ(у т.ч.):'");
	Иначе
		Форма.Элементы.ИтогиВсегоНДС.Заголовок = НСтр("ru='Изменение НДС(сверху):';uk='Зміна ПДВ(зверху):'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПривестиКСоответствиюПравиламШлюзаНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ПривестиКСоответствиюПравиламШлюза();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСтавкуНДС(СтрокаТабличнойЧасти)

	// СтавкаНДС прироритетно определеятся видом операции документа
	Если СтрокаТабличнойЧасти.Свойство("Номенклатура") Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
	Иначе
		СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;	
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиСтрокиТаблицы(СтрокаТаблицы, Знач ПараметрыОбъекта)

	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВсегоСтрокиТаблицы(СтрокаТаблицы, Знач ПараметрыОбъекта)

	СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПараметрыОбъекта.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьКоличествоПозицийНомСостава()

	// Покажем сколько строк на какой вкладке
	КоличествоСтрокТовары = Объект.Товары.Количество();
	КоличествоСтрокУслуги = Объект.Услуги.Количество();
	КоличествоСтрокОС	  = Объект.ОС.Количество();
	КоличествоСтрокНМА	  = Объект.НМА.Количество();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммыИзменений(СтрокаТЧ, ИмяТабЧасти)
	// для совпадения сумм изменений с исходными суммами при вовратах
	// расчет производим пропорционально суммам
	
	Коэф = 0;
	Если НЕ СтрокаТЧ.ИзменениеКоличества = 0 Тогда
		
		Если ИмяТабЧасти = "Товары" Тогда
			ИсходноеКоличество =  СтрокаТЧ.Количество;
		ИначеЕсли ИмяТабЧасти = "ОС"
			  ИЛИ ИмяТабЧасти = "НМА" Тогда
			ИсходноеКоличество = 1;
		Иначе 
		    ИсходноеКоличество = СтрокаТЧ.Количество;
		КонецЕсли;
		
		Если ИсходноеКоличество = 0 Тогда
			ИсходноеКоличество = 1;
		КонецЕсли;
			 
		Коэф =  СтрокаТЧ.ИзменениеКоличества/ИсходноеКоличество;
		
	ИначеЕсли НЕ СтрокаТЧ.ИзменениеЦены = 0 Тогда
		
		Если ИмяТабЧасти = "ОС"
		 ИЛИ ИмяТабЧасти = "НМА" Тогда
			ИсходнаяЦена = СтрокаТЧ.Сумма;
		Иначе 
		    ИсходнаяЦена = СтрокаТЧ.Цена;
		КонецЕсли;
		
		Если ИсходнаяЦена = 0 Тогда
			ИсходнаяЦена = 1;
		КонецЕсли;

		Коэф =  СтрокаТЧ.ИзменениеЦены/ИсходнаяЦена;
		
	КонецЕсли;
	
	СтрокаТЧ.ИзменениеСуммы		= СтрокаТЧ.Сумма * Коэф;
	СтрокаТЧ.ИзменениеСуммыНДС	= СтрокаТЧ.СуммаНДС * Коэф;

КонецПроцедуры

&НаКлиенте
Процедура ИзменениеКоличестваПриИзменении(ИмяТабличнойЧасти = "Товары")
	
	СтрокаТабличнойЧасти = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ИзменениеКоличества <> 0 Тогда
		Если СтрокаТабличнойЧасти.ИзменениеЦены <> 0 Тогда
		    СтрокаТабличнойЧасти.ИзменениеЦены = 0;
		    ТекстОповещения = НСтр("ru='Разрешается корректировать или цену или количество';uk='Дозволяється коригувати або ціну або кількість'");
			ПоказатьОповещениеПользователя(НСтр("ru='Изменена цена';uk='Змінена ціна'"),,ТекстОповещения);
		КонецЕсли;
	КонецЕсли;

	Если СтрокаТабличнойЧасти.ИзменениеКоличества < 0 Тогда
		СтрокаТабличнойЧасти.ИзменениеКоличества = Макс(СтрокаТабличнойЧасти.ИзменениеКоличества, - СтрокаТабличнойЧасти.Количество);
	КонецЕсли;

	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, ИмяТабличнойЧасти);	

КонецПроцедуры

&НаКлиенте
Процедура ИзменениеЦеныПриИзменении(ИмяТабличнойЧасти = "Товары")
	
	СтрокаТабличнойЧасти = Элементы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ИзменениеЦены <> 0 Тогда
		Если СтрокаТабличнойЧасти.ИзменениеКоличества <> 0 Тогда
		    СтрокаТабличнойЧасти.ИзменениеКоличества = 0;
			ПоказатьОповещениеПользователя(НСтр("ru='Изменено количество';uk='Змінено кількість'"),,НСтр("ru='Разрешается корректировать или цену или количество';uk='Дозволяється коригувати або ціну або кількість'"));
		КонецЕсли;
	КонецЕсли;

	Если СтрокаТабличнойЧасти.ИзменениеЦены < 0 Тогда
		СтрокаТабличнойЧасти.ИзменениеЦены = Макс(СтрокаТабличнойЧасти.ИзменениеЦены, - СтрокаТабличнойЧасти.Цена);
	КонецЕсли;

	РассчитатьСуммыИзменений(СтрокаТабличнойЧасти, ИмяТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСписокВыбораИКодПричиныПоУмолчанию(ТекущаяСтрока, ИмяТЧ)
	
	ЭлементКодПричины = Элементы[ИмяТЧ + "КодПричины"];
	
	СписокВыбораЭлемента = ЭлементКодПричины.СписокВыбора;
	СписокВыбораЭлемента.Очистить();
	
	Если ПустаяСтрока(ТекущаяСтрока.ПричинаКорректировкиНовая)  Тогда
		ТекущаяСтрока.КодПричины = 0;
	Иначе
		КлючСтруктуры = СтрЗаменить(ТекущаяСтрока.ПричинаКорректировкиНовая, " ", "_"); 
		
		СписокВыбораКодов = Неопределено;
		Объект.СоответствиеПричинКорректировкиКодамПричин.Свойство(КлючСтруктуры, СписокВыбораКодов);
		Если СписокВыбораКодов <> Неопределено Тогда
			Если СписокВыбораКодов.Количество() = 1 Тогда
				ЭлементКодПричины.КнопкаВыпадающегоСписка = Ложь;
			ИначеЕсли СписокВыбораКодов.Количество() > 1 Тогда
				ЭлементКодПричины.КнопкаВыпадающегоСписка = Истина;
				Для каждого ЭлементСписка Из СписокВыбораКодов Цикл
					СписокВыбораЭлемента.Добавить(ЭлементСписка.Значение);	
				КонецЦикла;
			КонецЕсли;
			ТекущаяСтрока.КодПричины = СписокВыбораКодов[0].Значение;
		Иначе
			ТекущаяСтрока.КодПричины = 0;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()

	Элементы.ДекорацияСтатусПреобразования.Заголовок = ?(Не ВыполнялосьПриведениеКНовымПравилам, 
		НСтр("ru='Преобразование не выполнялось';uk= 'Перетворення не виконувалося'"), 
			?(Объект.ПреобразованиеВыполнялось = 1, 
				НСтр("ru='Предположительно преобразование уже выполнялось (повторное выполнение не рекомендуется)';uk= 'Ймовірно перетворення вже виконувалось (повторне виконання не рекомендується)'"),
				НСтр("ru='Преобразование выполнено (повторное выполнение не рекомендуется)';uk= 'Перетворення виконано (повторне виконання не рекомендується)'")));
	Элементы.ДекорацияСтатусПреобразования.ЦветТекста = ?(Не ВыполнялосьПриведениеКНовымПравилам, 
	    Новый Цвет(0, 128, 0),
		Новый Цвет(255, 0, 0));

КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНоменклатурныйСоставВДокумент()

	ДанныеФормыДокумента = ВладелецФормы.Объект;
	ДанныеФормыДокумента.Товары.Очистить();
	ДанныеФормыДокумента.Услуги.Очистить();
	ДанныеФормыДокумента.ОС.Очистить();
	ДанныеФормыДокумента.НМА.Очистить();
	
	Для каждого Строка Из Объект.Товары Цикл
		ЗаполнитьЗначенияСвойств(ДанныеФормыДокумента.Товары.Добавить(), Строка);	
	КонецЦикла;
	Для каждого Строка Из Объект.Услуги Цикл
		ЗаполнитьЗначенияСвойств(ДанныеФормыДокумента.Услуги.Добавить(), Строка);	
	КонецЦикла;
	Для каждого Строка Из Объект.ОС Цикл
		ЗаполнитьЗначенияСвойств(ДанныеФормыДокумента.ОС.Добавить(), Строка);	
	КонецЦикла;
	Для каждого Строка Из Объект.НМА Цикл
		ЗаполнитьЗначенияСвойств(ДанныеФормыДокумента.НМА.Добавить(), Строка);	
	КонецЦикла;
	
	ВладелецФормы.Модифицированность = Истина;
	
	ДанныеПеренесеныВДокумент = Истина;

КонецПроцедуры 

&НаСервере
Процедура ПроверитьЗаполнениеСтрок(ТекстСообщенияПредупреждение = Неопределено)

	ТекстСообщенияПредупреждение = "";
	
	// Проверим, что выбран способ корректировки, во всех строках
	ПроверитьЗаполненияСпособовКорректировки("Товары", 	ТекстСообщенияПредупреждение);
	ПроверитьЗаполненияСпособовКорректировки("Услуги", 	ТекстСообщенияПредупреждение);
	ПроверитьЗаполненияСпособовКорректировки("ОС", 		ТекстСообщенияПредупреждение);
	ПроверитьЗаполненияСпособовКорректировки("НМА", 	ТекстСообщенияПредупреждение);
	
	// Проверим, что заполнены коды причин во всех строках
	ИмяКолонки = "КодПричины";
	ПредставлениеКодаПричины = НСтр("ru='Код причины корректировки';uk= 'Код причини коригування'");
	ПроверитьЗаполненияЧисловогоРеквизитаСтроки("Товары", 	ИмяКолонки, ПредставлениеКодаПричины, ТекстСообщенияПредупреждение);
	ПроверитьЗаполненияЧисловогоРеквизитаСтроки("Услуги",	ИмяКолонки, ПредставлениеКодаПричины, ТекстСообщенияПредупреждение);
	ПроверитьЗаполненияЧисловогоРеквизитаСтроки("ОС", 		ИмяКолонки, ПредставлениеКодаПричины, ТекстСообщенияПредупреждение);
	ПроверитьЗаполненияЧисловогоРеквизитаСтроки("НМА", 		ИмяКолонки, ПредставлениеКодаПричины, ТекстСообщенияПредупреждение);
	
	// Корерктное и полное заполнение реквизитов строк для способа "Зміна номенклатури"
	ПроверитьСтрокиНаНаличиеОшибокСпособИзменениеНоменклатуры("Товары", 	ТекстСообщенияПредупреждение); 
	ПроверитьСтрокиНаНаличиеОшибокСпособИзменениеНоменклатуры("Услуги", 	ТекстСообщенияПредупреждение);
	ПроверитьСтрокиНаНаличиеОшибокСпособИзменениеНоменклатуры("ОС", 		ТекстСообщенияПредупреждение);
	ПроверитьСтрокиНаНаличиеОшибокСпособИзменениеНоменклатуры("НМА", 		ТекстСообщенияПредупреждение);

КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполненияСпособовКорректировки(ИмяТЧ, ТекстСообщенияПредупреждение)

	Если Объект[ИмяТЧ].Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	СтрокиСНезаполненымСпособомКорректировки = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("ПричинаКорректировкиНовая", ""));
	Если СтрокиСНезаполненымСпособомКорректировки.Количество() > 0 Тогда
		
		ТекстСообщенияПредупреждение = ТекстСообщенияПредупреждение + ?(Не ПустаяСтрока(ТекстСообщенияПредупреждение), Символы.ПС, "") +
 				НСтр("ru='На вкладке ""%1"" есть строки с незаполненной причиной (способом корректировки). Такие строки не будут обработаны.';uk= 'На вкладці ""%1"" є рядки з незаповненою причиною (способом коригування). Такі рядки не будуть опрацьовані.'");
				
		ВставитьИмяТЧвСообщение(ТекстСообщенияПредупреждение, ИмяТЧ, "%1");		
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполненияЧисловогоРеквизитаСтроки(ИмяТЧ, ИмяРеквизитаПроверки, ПредставлениеРеквизитаПроверки, ТекстСообщенияПредупреждение)

	Если Объект[ИмяТЧ].Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	СтрокиСНезаполненымСпособомКорректировки = Объект[ИмяТЧ].НайтиСтроки(Новый Структура(ИмяРеквизитаПроверки, 0));
	Если СтрокиСНезаполненымСпособомКорректировки.Количество() > 0 Тогда
		
		ТекстСообщенияПредупреждение = ТекстСообщенияПредупреждение + ?(Не ПустаяСтрока(ТекстСообщенияПредупреждение), Символы.ПС, "") +
 				НСтр("ru='На вкладке ""%1"" есть строки с незаполненным значением колонки ""%2"". Такие строки могут быть обработаны не корректно.';uk= 'На вкладці ""%1"" є рядки з незаповненим значенням колонки ""%2"". Такі рядки можуть бути опрацьовані не коректно.'");
				
		ВставитьИмяТЧвСообщение(ТекстСообщенияПредупреждение, ИмяТЧ, "%1");
		ТекстСообщенияПредупреждение = СтрЗаменить(ТекстСообщенияПредупреждение, "%2", ПредставлениеРеквизитаПроверки);
	КонецЕсли;	

КонецПроцедуры
 
&НаСервере
Процедура ПроверитьСтрокиНаНаличиеОшибокСпособИзменениеНоменклатуры(ИмяТЧ, ТекстСообщенияПредупреждение)

	Если Объект[ИмяТЧ].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиСоСпособомИзменениеНоменклатуры = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("ПричинаКорректировкиНовая", "Зміна номенклатури"));
	Если СтрокиСоСпособомИзменениеНоменклатуры.Количество() > 0 Тогда
		
		// Проверка, чтобы в рамках одной группы были обязательно сторно строка и одна и более заменяющая строка
		НомераГруппСНекорректнымЗаполнением = "";
		СоответствиеНомеровГруппИСтрок = Новый Соответствие;
		
		// Проверка, чтобы в рамках одной группы были только одинаковые коды причин
		НомераГруппСРазнымиКодамиПричинВРамкахОднойГруппы = "";
		СоответствиеНомеровГруппИКодовПричин = Новый Соответствие;
		
		ТЗСтрокиИзменениеНоменклатуры = Объект[ИмяТЧ].Выгрузить(СтрокиСоСпособомИзменениеНоменклатуры, "НомерГруппы, КодПричины, ИзменениеКоличества");		
		ТЗСтрокиИзменениеНоменклатуры.Сортировать("НомерГруппы");
		
		СтрокиСНезаполненнымНомеромГруппы = ТЗСтрокиИзменениеНоменклатуры.НайтиСтроки(Новый Структура("НомерГруппы", 0));
		
		Если СтрокиСНезаполненнымНомеромГруппы.Количество() > 0 Тогда
		
			ТекстСообщенияПредупреждение = ТекстСообщенияПредупреждение + ?(Не ПустаяСтрока(ТекстСообщенияПредупреждение), Символы.ПС, "") +
 				НСтр("ru='На вкладке ""%1"" есть строки с причиной (способом корректировки) ""Зміна номенклатури"", в которых незаполнено значение колонки ""Номер группы"".';uk= 'На вкладці ""%1"" є рядки з причиною (способом коригування) ""Зміна номенклатури"", в яких не заповнено значення колонки ""Номер групи"".'");			
		
		КонецЕсли;
		
		Для каждого СтрокаИзменениеНоменклатуры Из ТЗСтрокиИзменениеНоменклатуры Цикл
			Если СтрокаИзменениеНоменклатуры.НомерГруппы = 0 Тогда
				// Эта обработано в верхней части процедуры, как незаполнен номер группы
				Продолжить;
			КонецЕсли; 
			ЗначениеНомерГруппы = СоответствиеНомеровГруппИСтрок.Получить(СтрокаИзменениеНоменклатуры.НомерГруппы);
			Если ЗначениеНомерГруппы = Неопределено Тогда
				СтруктураОтрицательныеИПоложительныеСтроки = Новый Структура("КоличествоСторноСтрок, КоличествоЗаменяющихСтрок", 0,0); 
				СоответствиеНомеровГруппИСтрок.Вставить(СтрокаИзменениеНоменклатуры.НомерГруппы, СтруктураОтрицательныеИПоложительныеСтроки);
				
				МассивКодовПричин = Новый Массив;
				СоответствиеНомеровГруппИКодовПричин.Вставить(СтрокаИзменениеНоменклатуры.НомерГруппы, МассивКодовПричин);
			КонецЕсли;
			
			// Строки в рамках одной группы
			СтруктураОтрицательныеИПоложительныеСтроки = СоответствиеНомеровГруппИСтрок[СтрокаИзменениеНоменклатуры.НомерГруппы];
			Если СтрокаИзменениеНоменклатуры.ИзменениеКоличества < 0 Тогда
				СтруктураОтрицательныеИПоложительныеСтроки.Вставить("КоличествоСторноСтрок",
					СтруктураОтрицательныеИПоложительныеСтроки["КоличествоСторноСтрок"] + 1);
			ИначеЕсли СтрокаИзменениеНоменклатуры.ИзменениеКоличества > 0 Тогда 	
				СтруктураОтрицательныеИПоложительныеСтроки.Вставить("КоличествоЗаменяющихСтрок",
					СтруктураОтрицательныеИПоложительныеСтроки["КоличествоЗаменяющихСтрок"] + 1);
			КонецЕсли; 
			
			// Коды причин в рамках одной группы
			МассивКодовПричин = СоответствиеНомеровГруппИКодовПричин[СтрокаИзменениеНоменклатуры.НомерГруппы];
			Если МассивКодовПричин.Найти(СтрокаИзменениеНоменклатуры.КодПричины) = Неопределено Тогда
				МассивКодовПричин.Добавить(СтрокаИзменениеНоменклатуры.КодПричины);
			КонецЕсли;
			
		КонецЦикла;
		
		// Строки в рамках одной группы
		Для каждого ЭлементСоответствия Из СоответствиеНомеровГруппИСтрок Цикл
			Если Не (ЭлементСоответствия.Значение["КоличествоСторноСтрок"] = 1 И ЭлементСоответствия.Значение["КоличествоЗаменяющихСтрок"] >= 1)  Тогда
				
				НомераГруппСНекорректнымЗаполнением = НомераГруппСНекорректнымЗаполнением + ?(Не ПустаяСтрока(НомераГруппСНекорректнымЗаполнением), ", ", "") + Формат(ЭлементСоответствия.Ключ, "ЧГ=0");				
			КонецЕсли;
		КонецЦикла;
		
		Если Не ПустаяСтрока(НомераГруппСНекорректнымЗаполнением) Тогда
			ТекстСообщенияПредупреждение = ТекстСообщенияПредупреждение + ?(Не ПустаяСтрока(ТекстСообщенияПредупреждение), Символы.ПС, "") +
			НСтр("ru='На вкладке ""%1"" есть строки с причиной (способом корректировки) ""Зміна номенклатури"", в которых некорретные данные в рамках одной группы.
                  |Должна быть одна сторно строка (отрицательное изменение количества) и хотя бы одна заменяющая строка (положительное изменение количества), 
                  |в противном случае такие строки не будут преобразованы корректно. Такие номера групп: %2.';uk= 'На вкладці ""%1"" є рядки з причиною (способом коригування) ""Зміна номенклатури"", в яких некоректні дані в рамках однієї групи. 
                  |Повинен бути один сторно рядок (від''ємна зміна кількості) і хоча б один рядок, що заміняє (позитивна зміна кількості). 
                  |в противному випадку такі рядки не будуть перетворені коректно. Такі номера груп: %2.'");
		КонецЕсли;	
		
		// Коды причин в рамках одной группы
		Для каждого ЭлементСоответствия Из СоответствиеНомеровГруппИКодовПричин Цикл
			Если ЭлементСоответствия.Значение.Количество() > 1 Тогда
				
				НомераГруппСРазнымиКодамиПричинВРамкахОднойГруппы = НомераГруппСРазнымиКодамиПричинВРамкахОднойГруппы + ?(Не ПустаяСтрока(НомераГруппСНекорректнымЗаполнением), ", ", "") + Формат(ЭлементСоответствия.Ключ, "ЧГ=0");				
			КонецЕсли;
		КонецЦикла;
		
		Если Не ПустаяСтрока(НомераГруппСРазнымиКодамиПричинВРамкахОднойГруппы) Тогда
			ТекстСообщенияПредупреждение = ТекстСообщенияПредупреждение + ?(Не ПустаяСтрока(ТекстСообщенияПредупреждение), Символы.ПС, "") +
			НСтр("ru='На вкладке ""%1"" есть строки с причиной (способом корректировки) ""Зміна номенклатури"", в которых для одной группы корректировки установлены разные коды причин корректировки.
                  |Коды причин корректировки в рамках одной группы должны быть одинаковыми. Такие номера групп: %3.';uk= 'На вкладці ""%1"" є рядки з причиною (способом коригування) ""Зміна номенклатури"", в яких для однієї групи коригування встановлені різні коди причин коригування. 
                  |Коди причин коригування в рамках однієї групи повині бути однакові. Такі номера груп: %3.'");
		КонецЕсли;	
		
		ВставитьИмяТЧвСообщение(ТекстСообщенияПредупреждение, ИмяТЧ, "%1");
		ТекстСообщенияПредупреждение = СтрЗаменить(ТекстСообщенияПредупреждение, "%2", НомераГруппСНекорректнымЗаполнением);
		ТекстСообщенияПредупреждение = СтрЗаменить(ТекстСообщенияПредупреждение, "%3", НомераГруппСРазнымиКодамиПричинВРамкахОднойГруппы);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВставитьИмяТЧвСообщение(Сообщение, ИмяТЧ, Параметр)

	Если ИмяТЧ = "Товары" Тогда
		НаименованиеТЧ = НСтр("ru='Товары';uk= 'Товари'");
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		НаименованиеТЧ = НСтр("ru='Услуги';uk= 'Послуги'");
	ИначеЕсли ИмяТЧ = "ОС" Тогда
		НаименованиеТЧ = НСтр("ru='Основные средства';uk= 'Основні засоби'");
	ИначеЕсли ИмяТЧ = "НМА" Тогда
		НаименованиеТЧ = НСтр("ru='Нематериальные активы';uk= 'Нематеріальні активи'");
	КонецЕсли;
	
	Сообщение = СтрЗаменить(Сообщение, Параметр, НаименованиеТЧ);

КонецПроцедуры 

&НаКлиенте
Процедура УстановитьТекущуюСтраницу()
	
	СтраницаУстановлена = Ложь;
	
	Если Объект.Товары.Количество() > 0 Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТовары;
		СтраницаУстановлена = Истина;
	КонецЕсли;
	
	Если Не СтраницаУстановлена И Объект.Услуги.Количество() > 0 Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаУслуги;
		СтраницаУстановлена = Истина;
	КонецЕсли;
	
	Если Не СтраницаУстановлена И Объект.ОС.Количество() > 0 Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОС;
		СтраницаУстановлена = Истина;
	КонецЕсли;
	
	Если Не СтраницаУстановлена И Объект.НМА.Количество() > 0 Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНМА;
		СтраницаУстановлена = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСпособВСвязанныхПоНомеруГруппыСтроках(ТекущаяСтрока, ИмяТЧ)

	Если ЗначениеЗаполнено(ТекущаяСтрока.НомерГруппы) Тогда
		МассивСтрокПоНомеруГруппы = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("НомерГруппы", ТекущаяСтрока.НомерГруппы));
		Если МассивСтрокПоНомеруГруппы.Количество() > 1 Тогда
			Для каждого Строка Из МассивСтрокПоНомеруГруппы Цикл
				Строка.ПричинаКорректировкиНовая = ТекущаяСтрока.ПричинаКорректировкиНовая;
				Строка.КодПричины = ТекущаяСтрока.КодПричины;
			КонецЦикла; 	
		КонецЕсли;
	КонецЕсли; 	

КонецПроцедуры

#КонецОбласти 