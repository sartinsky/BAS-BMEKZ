#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьНоменклатурнымСоставом(СообщенияВПроцессеЗаполнения = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Приложение2КНалоговойНакладной.Ссылка КАК ДокументП2,
	|	Приложение2КНалоговойНакладной.Дата,
	|	Приложение2КНалоговойНакладной.НалоговаяНакладная,
	|	Приложение2КНалоговойНакладной.НалоговаяНакладная.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены КАК ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены,
	|	Приложение2КНалоговойНакладной.ВидОперации,
	|	Приложение2КНалоговойНакладной.Организация,
	|	Приложение2КНалоговойНакладной.Контрагент,
	|	Приложение2КНалоговойНакладной.ДоговорКонтрагента,
	|	Приложение2КНалоговойНакладной.ВалютаДокумента,
	|	Приложение2КНалоговойНакладной.СуммаДокумента,
	|	Приложение2КНалоговойНакладной.СуммаНДСДокумента,
	|	Приложение2КНалоговойНакладной.СуммаВключаетНДС,
	|	Приложение2КНалоговойНакладной.КурсВзаиморасчетов,
	|	Приложение2КНалоговойНакладной.КратностьВзаиморасчетов,
	|	Приложение2КНалоговойНакладной.ТипЦен,
	|	ВалютаРегламентированногоУчета.Значение КАК ВалютаРегламентированногоУчета,
	|	ЕстьNULL(Приложение2КНалоговойНакладной.НалоговаяНакладная.РеквизитыНомерСтрокиННАктуальны, Истина) КАК НалоговаяНакладнаяРеквизитыНомерСтрокиННАктуальны
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной КАК Приложение2КНалоговойНакладной
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Приложение2КНалоговойНакладной.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приложение2КНалоговойНакладнойНомСостав.НомерСтроки КАК НомерСтроки,
	|	Приложение2КНалоговойНакладнойНомСостав.Номенклатура,
	|	Приложение2КНалоговойНакладнойНомСостав.Коэффициент,
	|	Приложение2КНалоговойНакладнойНомСостав.Количество,
	|	Приложение2КНалоговойНакладнойНомСостав.Цена,
	|	Приложение2КНалоговойНакладнойНомСостав.Сумма,
	|	Приложение2КНалоговойНакладнойНомСостав.СтавкаНДС,
	|	Приложение2КНалоговойНакладнойНомСостав.СуммаНДС,
	|	Приложение2КНалоговойНакладнойНомСостав.ИзменениеКоличества,
	|	Приложение2КНалоговойНакладнойНомСостав.ИзменениеЦены,
	|	Приложение2КНалоговойНакладнойНомСостав.ИзменениеСуммы,
	|	Приложение2КНалоговойНакладнойНомСостав.ИзменениеСуммыНДС,
	|	Приложение2КНалоговойНакладнойНомСостав.Причина,
	|	Приложение2КНалоговойНакладнойНомСостав.СтатьяДекларацииНДСНалоговыеОбязательства,
	|	Приложение2КНалоговойНакладнойНомСостав.ДатаКорректировки,
	|	Приложение2КНалоговойНакладнойНомСостав.ЕдиницаИзмерения,
	|	Приложение2КНалоговойНакладнойНомСостав.СуммаБезСкидки,
	|	Приложение2КНалоговойНакладнойНомСостав.СуммаСкидки,
	|	Приложение2КНалоговойНакладнойНомСостав.КодУКТВЭД,
	|	Приложение2КНалоговойНакладнойНомСостав.НомерГТД,
	|	Приложение2КНалоговойНакладнойНомСостав.НомерСтрокиНН,
	|	Приложение2КНалоговойНакладнойНомСостав.НомерГруппы,
	|	Приложение2КНалоговойНакладнойНомСостав.КодПричины,
	|	Приложение2КНалоговойНакладнойНомСостав.ЕдиницаИзмерения.Код,
	|	Приложение2КНалоговойНакладнойНомСостав.Номенклатура.НаименованиеПолное КАК НоменклатураДляПечати
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной.Товары КАК Приложение2КНалоговойНакладнойНомСостав
	|ГДЕ
	|	Приложение2КНалоговойНакладнойНомСостав.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приложение2КНалоговойНакладнойНомСостав.НомерСтроки КАК НомерСтроки,
	|	Приложение2КНалоговойНакладнойНомСостав.Номенклатура,
	|	Приложение2КНалоговойНакладнойНомСостав.Содержание,
	|	Приложение2КНалоговойНакладнойНомСостав.Количество,
	|	Приложение2КНалоговойНакладнойНомСостав.Цена,
	|	Приложение2КНалоговойНакладнойНомСостав.Сумма,
	|	Приложение2КНалоговойНакладнойНомСостав.СтавкаНДС,
	|	Приложение2КНалоговойНакладнойНомСостав.СуммаНДС,
	|	Приложение2КНалоговойНакладнойНомСостав.ИзменениеКоличества,
	|	Приложение2КНалоговойНакладнойНомСостав.ИзменениеЦены,
	|	Приложение2КНалоговойНакладнойНомСостав.ИзменениеСуммы,
	|	Приложение2КНалоговойНакладнойНомСостав.ИзменениеСуммыНДС,
	|	Приложение2КНалоговойНакладнойНомСостав.Причина,
	|	Приложение2КНалоговойНакладнойНомСостав.СтатьяДекларацииНДСНалоговыеОбязательства,
	|	Приложение2КНалоговойНакладнойНомСостав.ДатаКорректировки,
	|	Приложение2КНалоговойНакладнойНомСостав.ПроцентСкидкиНаценки,
	|	Приложение2КНалоговойНакладнойНомСостав.СуммаБезСкидки,
	|	Приложение2КНалоговойНакладнойНомСостав.СуммаСкидки,
	|	Приложение2КНалоговойНакладнойНомСостав.НомерСтрокиНН,
	|	Приложение2КНалоговойНакладнойНомСостав.НомерГруппы,
	|	Приложение2КНалоговойНакладнойНомСостав.КодПричины,
	|	Приложение2КНалоговойНакладнойНомСостав.КодУКТВЭД,
	|	Приложение2КНалоговойНакладнойНомСостав.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	Приложение2КНалоговойНакладнойНомСостав.Содержание КАК НоменклатураДляПечати
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной.Услуги КАК Приложение2КНалоговойНакладнойНомСостав
	|ГДЕ
	|	Приложение2КНалоговойНакладнойНомСостав.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приложение2КНалоговойНакладнойНомСостав.НомерСтроки КАК НомерСтроки,
	|	Приложение2КНалоговойНакладнойНомСостав.ОсновноеСредство,
	|	Приложение2КНалоговойНакладнойНомСостав.Сумма,
	|	Приложение2КНалоговойНакладнойНомСостав.СтавкаНДС,
	|	Приложение2КНалоговойНакладнойНомСостав.СуммаНДС,
	|	Приложение2КНалоговойНакладнойНомСостав.ИзменениеКоличества,
	|	Приложение2КНалоговойНакладнойНомСостав.ИзменениеЦены,
	|	Приложение2КНалоговойНакладнойНомСостав.ИзменениеСуммы,
	|	Приложение2КНалоговойНакладнойНомСостав.ИзменениеСуммыНДС,
	|	Приложение2КНалоговойНакладнойНомСостав.Причина,
	|	Приложение2КНалоговойНакладнойНомСостав.СтатьяДекларацииНДСНалоговыеОбязательства,
	|	Приложение2КНалоговойНакладнойНомСостав.ДатаКорректировки,
	|	Приложение2КНалоговойНакладнойНомСостав.КодУКТВЭД,
	|	Приложение2КНалоговойНакладнойНомСостав.НомерГТД,
	|	Приложение2КНалоговойНакладнойНомСостав.НомерСтрокиНН,
	|	Приложение2КНалоговойНакладнойНомСостав.НомерГруппы,
	|	Приложение2КНалоговойНакладнойНомСостав.КодПричины,
	|	""2009"" КАК ЕдиницаИзмеренияКод,
	|	Приложение2КНалоговойНакладнойНомСостав.ОсновноеСредство.НаименованиеПолное КАК НоменклатураДляПечати
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной.ОС КАК Приложение2КНалоговойНакладнойНомСостав
	|ГДЕ
	|	Приложение2КНалоговойНакладнойНомСостав.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приложение2КНалоговойНакладнойНомСостав.НомерСтроки КАК НомерСтроки,
	|	Приложение2КНалоговойНакладнойНомСостав.НематериальныйАктив,
	|	Приложение2КНалоговойНакладнойНомСостав.Сумма,
	|	Приложение2КНалоговойНакладнойНомСостав.СтавкаНДС,
	|	Приложение2КНалоговойНакладнойНомСостав.СуммаНДС,
	|	Приложение2КНалоговойНакладнойНомСостав.ИзменениеКоличества,
	|	Приложение2КНалоговойНакладнойНомСостав.ИзменениеЦены,
	|	Приложение2КНалоговойНакладнойНомСостав.ИзменениеСуммы,
	|	Приложение2КНалоговойНакладнойНомСостав.ИзменениеСуммыНДС,
	|	Приложение2КНалоговойНакладнойНомСостав.Причина,
	|	Приложение2КНалоговойНакладнойНомСостав.СтатьяДекларацииНДСНалоговыеОбязательства,
	|	Приложение2КНалоговойНакладнойНомСостав.ДатаКорректировки,
	|	Приложение2КНалоговойНакладнойНомСостав.КодУКТВЭД,
	|	Приложение2КНалоговойНакладнойНомСостав.НомерГТД,
	|	Приложение2КНалоговойНакладнойНомСостав.НомерСтрокиНН,
	|	Приложение2КНалоговойНакладнойНомСостав.НомерГруппы,
	|	Приложение2КНалоговойНакладнойНомСостав.КодПричины,
	|	""2009"" КАК ЕдиницаИзмеренияКод,
	|	Приложение2КНалоговойНакладнойНомСостав.НематериальныйАктив.НаименованиеПолное КАК НоменклатураДляПечати
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной.НМА КАК Приложение2КНалоговойНакладнойНомСостав
	|ГДЕ
	|	Приложение2КНалоговойНакладнойНомСостав.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументП2);
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДокументовРК = МассивРезультатовЗапроса[0].Выбрать();
	
	ЗаполнятьТовары		= Не МассивРезультатовЗапроса[1].Пустой();	
	ЗаполнятьУслуги		= Не МассивРезультатовЗапроса[2].Пустой();
	ЗаполнятьОС			= Не МассивРезультатовЗапроса[3].Пустой();
	ЗаполнятьНМА		= Не МассивРезультатовЗапроса[4].Пустой();
	
	ВыборкаТовары 		= ?(ЗаполнятьТовары, 	МассивРезультатовЗапроса[1].Выбрать(), Неопределено);
	ВыборкаУслуги 		= ?(ЗаполнятьУслуги, 	МассивРезультатовЗапроса[2].Выбрать(), Неопределено);
	ВыборкаОС 			= ?(ЗаполнятьОС, 		МассивРезультатовЗапроса[3].Выбрать(), Неопределено);
	ВыборкаНМА 			= ?(ЗаполнятьНМА, 		МассивРезультатовЗапроса[4].Выбрать(), Неопределено);
	
	ЗаполнитьСоответствиеПричинКорректировкиКодамПричин();
	
 	Пока ВыборкаДокументовРК.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаДокументовРК); 
		
		УсловнаяПродажаВозврат 	= ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат;
		ПечатнаяФормаНН 		= ПолучитьТаблицуНоменклатурыНалоговогоДокументаДляПечати(ВыборкаДокументовРК);
		
		// До заполнения табличных частей предположим, что преобразование уже выполнялось 
		// (это ни на что не влияет, но для информативности и предупреждения пользователя)
		// Будем считать, что П2 готова к выгрузке и ее не нужно преобразовывать, если заполнены в строке следующие реквизиты ТЧ:
		// НомерСтрокиНН, НомерГруппы, КодПричины
		ПреобразованиеВыполнялось = 1;
		
		ДобавитьСтрокиВТЧ(ЗаполнятьТовары, 	ВыборкаТовары, 	Товары,	"Товары", 	ПечатнаяФормаНН);
		ДобавитьСтрокиВТЧ(ЗаполнятьУслуги, 	ВыборкаУслуги, 	Услуги, "Услуги",	ПечатнаяФормаНН);
		ДобавитьСтрокиВТЧ(ЗаполнятьОС, 		ВыборкаОС, 		ОС, 	"ОС",		ПечатнаяФормаНН);
		ДобавитьСтрокиВТЧ(ЗаполнятьНМА,	 	ВыборкаНМА, 	НМА,	"НМА",		ПечатнаяФормаНН); 
		
		ПроверитьЗаполненияНомеровНННалоговойНакладной(ВыборкаДокументовРК, СообщенияВПроцессеЗаполнения);
		
	КонецЦикла;
	
КонецПроцедуры
 
Процедура ПривестиКСоответствиюПравиламШлюза() Экспорт

	ТаблицаТоваров 			= Товары.	ВыгрузитьКолонки();
	ТаблицаУслуг 			= Услуги.	ВыгрузитьКолонки();
	ТаблицаОС 				= ОС.		ВыгрузитьКолонки();
	ТаблицаНМА 				= НМА.		ВыгрузитьКолонки(); 
		
	// Если в документе в некоторых строках уже указан номер группы, то найдем максимальный и начнем с него проставления номера групп
	// для незаполненных
	ПолучитьНачальныйНомерГруппы();
	
	ПривестиСтрокиКНовымПравилам(ТаблицаТоваров,"Товары");
	ПривестиСтрокиКНовымПравилам(ТаблицаУслуг, 	"Услуги");
	ПривестиСтрокиКНовымПравилам(ТаблицаОС, 	"ОС");
	ПривестиСтрокиКНовымПравилам(ТаблицаНМА, 	"НМА");
	
	ВыполнитьСортировкуТабЧастей();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьСтрокиВТЧ(ЗаполнятьТЧ, Выборка, ТабличнаяЧасть, ИмяТабЧасти, ПечатнаяФормаНН)

	ТабличнаяЧасть.Очистить();
	
	Если НЕ ЗаполнятьТЧ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоискаНомераСтрокиННПолная 	 = Новый Структура("Номенклатура,ЦенаБезНДС,ЕдиницаИзмеренияКод");
	СтруктураПоискаНомераСтрокиННСокращенная = Новый Структура("Номенклатура,ЦенаБезНДС");
	
	ВидыОперацийВозврат 		= ВидыОперацийВозврат();
	ВидыОперацийКорректировка 	= ВидыОперацийКорректировка();
		
	Пока Выборка.Следующий() Цикл
		
		СтрокаТЧ = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка);
		
		Если Не (ЗначениеЗаполнено(СтрокаТЧ.НомерСтрокиНН) И ЗначениеЗаполнено(СтрокаТЧ.НомерГруппы) И ЗначениеЗаполнено(СтрокаТЧ.КодПричины)) Тогда
			ПреобразованиеВыполнялось = 0;
		КонецЕсли;
		
		СтрокаТЧ.НомерСтр = Выборка.НомерСтроки; 
		
		СтрокаТЧ.НоменклатураДляПечати = СокрП("" + СтрокаТЧ.НоменклатураДляПечати);
		Если УсловнаяПродажаВозврат Тогда
			СтрокаТЧ.ЕдиницаИзмеренияКод = "грн";
		Иначе	
			СтрокаТЧ.ЕдиницаИзмеренияКод = УчетНДС.КодЕдиницыИзмеренияДляПечатиНалоговых(СтрокаТЧ.ЕдиницаИзмеренияКод);
		КонецЕсли;
		СтрокаТЧ.ЦенаБезНДС = ПолучитьЦенуБезНДСРеглДокументП2(СтрокаТЧ, ИмяТабЧасти);
		
		Если (ИмяТабЧасти = "Товары" Или ИмяТабЧасти = "Услуги") И СтрокаТЧ.СуммаСкидки <> 0 Тогда
			// Если есть сумма скидки, то если ее оставить из документа П2 можем получить неправильную цену, 
			// если количество из НН отличается от количества возвращенного товара
			// По-этому если есть сумми скидок, будем рассчитывать цену уже без скидки, а скидки обнулять
			СтрокаТЧ.СуммаСкидки = 0;
			СтрокаТЧ.Цена = СтрокаТЧ.ЦенаБезНДС;
			
			Если СтрокаТЧ.ИзменениеЦены <> 0 Тогда
				СтрокаТЧ.ИзменениеЦены = ПолучитьИзменениеЦеныБезНДСДокументП2(СтрокаТЧ, ИмяТабЧасти);
			КонецЕсли; 
			
			Если ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
				
				СтрокаТЧ.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.Цена, 
												ВалютаРегламентированногоУчета,
												ВалютаДокумента, 
												1,
												КурсВзаиморасчетов, 
												1,
												КратностьВзаиморасчетов);
																
			КонецЕсли; 
			
			Если СуммаВключаетНДС Тогда
				
				СтрокаТЧ.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТЧ.Цена,
					Ложь, Истина, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС));
											
			КонецЕсли;
				
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТЧ,1);
			РассчитатьСуммыИзменений(СтрокаТЧ, ИмяТабЧасти);
		КонецЕсли; 
		
		// определим номер строки исходной НН
		СтруктураПоискаНомераСтрокиННПолная.Номенклатура 			= СтрокаТЧ.НоменклатураДляПечати;
		СтруктураПоискаНомераСтрокиННПолная.ЦенаБезНДС   			= СтрокаТЧ.ЦенаБезНДС;
		СтруктураПоискаНомераСтрокиННПолная.ЕдиницаИзмеренияКод   	= СтрокаТЧ.ЕдиницаИзмеренияКод;
		
		НайденныеСтроки = ПечатнаяФормаНН.НайтиСтроки(СтруктураПоискаНомераСтрокиННПолная);
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтруктураПоискаНомераСтрокиННСокращенная.Номенклатура = СтрокаТЧ.НоменклатураДляПечати;
			СтруктураПоискаНомераСтрокиННСокращенная.ЦенаБезНДС   = СтрокаТЧ.ЦенаБезНДС;
							
			НайденныеСтроки = ПечатнаяФормаНН.НайтиСтроки(СтруктураПоискаНомераСтрокиННСокращенная);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НомерСтрокиНН) Тогда
					Если НайденныеСтроки[0].НомерСтрокиНН = 0 Тогда
						СтрокаТЧ.НеНайденаСтрокаННПричина = НСтр("ru='Строка НН найдена, но в ней не указано значение номера строки.';uk= 'Рядок ПН знайдений, але в ньому не вказано значення номера рядка.'");
					КонецЕсли; 
					СтрокаТЧ.НомерСтрокиНН = НайденныеСтроки[0].НомерСтрокиНН;
				КонецЕсли;
				Если Не УсловнаяПродажаВозврат Тогда
					СтрокаТЧ.Количество = НайденныеСтроки[0].Количество;
				КонецЕсли;
				Если ЗначениеЗаполнено(НайденныеСтроки[0].ЦенаПриИзмененииЦены) 
					И НайденныеСтроки[0].ЦенаПриИзмененииЦены > 0
					И СтрокаТЧ.ЦенаБезНДС <> НайденныеСтроки[0].ЦенаПриИзмененииЦены Тогда
					
					СтрокаТЧ.ЦенаБезНДССУчетомКорректировок = НайденныеСтроки[0].ЦенаПриИзмененииЦены;
				КонецЕсли;
			Иначе
				СтрокаТЧ.Количество = 0;
				СтрокаТЧ.НеНайденаСтрокаННПричина = НСтр("ru='Не найдена строка НН';uk= 'Не знайдений рядок ПН'");
			КонецЕсли;
		Иначе	
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НомерСтрокиНН) Тогда
				Если НайденныеСтроки[0].НомерСтрокиНН = 0 Тогда
					СтрокаТЧ.НеНайденаСтрокаННПричина = НСтр("ru='Строка НН найдена, но в ней не указано значение номера строки.';uk= 'Рядок ПН знайдений, але в ньому не вказано значення номера рядка.'");
				КонецЕсли; 
				СтрокаТЧ.НомерСтрокиНН = НайденныеСтроки[0].НомерСтрокиНН;
			КонецЕсли;
			Если Не УсловнаяПродажаВозврат Тогда
				СтрокаТЧ.Количество = НайденныеСтроки[0].Количество;	
			КонецЕсли;
			Если ЗначениеЗаполнено(НайденныеСтроки[0].ЦенаПриИзмененииЦены) 
				И НайденныеСтроки[0].ЦенаПриИзмененииЦены > 0
				И СтрокаТЧ.ЦенаБезНДС <> НайденныеСтроки[0].ЦенаПриИзмененииЦены Тогда
				
				СтрокаТЧ.ЦенаБезНДССУчетомКорректировок = НайденныеСтроки[0].ЦенаПриИзмененииЦены;
			КонецЕсли; 
		КонецЕсли;
		
		// Постараемся определить причину корректировки
		// Это не точное определение, бухгалтеру все-равно необходимо будет перепроверить
		Если СтрокаТЧ.Количество = 0 Тогда
			СтрокаТЧ.ПричинаКорректировкиНовая = "";
		ИначеЕсли СтрокаТЧ.ИзменениеЦены <> 0 
			И УсловнаяПродажаВозврат Тогда
			СтрокаТЧ.ПричинаКорректировкиНовая = "Умовний продаж";	
		ИначеЕсли СтрокаТЧ.ИзменениеЦены <> 0 Тогда
			СтрокаТЧ.ПричинаКорректировкиНовая = "Зміна ціни";
		ИначеЕсли -СтрокаТЧ.ИзменениеКоличества = СтрокаТЧ.Количество 
			И ВидыОперацийВозврат.Найти(ВидОперации) <> Неопределено Тогда
			СтрокаТЧ.ПричинаКорректировкиНовая = "Повернення товару або авансових платежів";
		ИначеЕсли СтрокаТЧ.ИзменениеКоличества <> 0
			И ВидыОперацийВозврат.Найти(ВидОперации) <> Неопределено Тогда
			СтрокаТЧ.ПричинаКорректировкиНовая = "Зміна кількості";
		ИначеЕсли СтрокаТЧ.ИзменениеКоличества < 0
			И ВидыОперацийКорректировка.Найти(ВидОперации) <> Неопределено Тогда
			СтрокаТЧ.ПричинаКорректировкиНовая = "Зміна номенклатури";
		КонецЕсли; 
		
		УстановитьКодПричиныСтрокиПоУмолчанию(СтрокаТЧ);  
		
	КонецЦикла;
	
	// Установим способ корректировки для заменяющих строки изменение номенклатуры
	СтрокиСоСпособомИзменениеНоменклатуры = ТабличнаяЧасть.НайтиСтроки(Новый Структура("ПричинаКорректировкиНовая", "Зміна номенклатури"));
	Если СтрокиСоСпособомИзменениеНоменклатуры.Количество() > 0 Тогда
		Для каждого Строка Из СтрокиСоСпособомИзменениеНоменклатуры Цикл
			СтрокиПоОдномуНомеруГруппы = ТабличнаяЧасть.НайтиСтроки(Новый Структура("НомерГруппы", Строка.НомерГруппы));	 
			Для каждого СтрокаГруппы Из СтрокиПоОдномуНомеруГруппы Цикл
				Если Не СтрокаГруппы.ПричинаКорректировкиНовая = "Зміна номенклатури" Тогда
					СтрокаГруппы.ПричинаКорректировкиНовая = "Зміна номенклатури";
					СтрокаГруппы.КодПричины = Строка.КодПричины;
					СтрокаГруппы.НеНайденаСтрокаННПричина = "";
				КонецЕсли;
				// Даже если нашли заменяющую номенклатуру в ПН, это все-равно новая строка
				Если СтрокаГруппы.ИзменениеКоличества > 0 Тогда
					СтрокаГруппы.НомерСтрокиНН = 0;
					СтрокаГруппы.Количество = 0;
				КонецЕсли; 
			КонецЦикла;
		КонецЦикла; 	
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ЦенаБезНДССУчетомКорректировок) 
			И СтрокаТЧ.ЦенаБезНДС <> СтрокаТЧ.ЦенаБезНДССУчетомКорректировок
			И Не (СтрокаТЧ.ПричинаКорректировкиНовая = "Зміна номенклатури" И СтрокаТЧ.ИзменениеКоличества > 0) Тогда
			
			ЦенаИзДокумента = СтрокаТЧ.Цена;
			СтрокаТЧ.ЦенаБезНДС = СтрокаТЧ.ЦенаБезНДССУчетомКорректировок;
			СтрокаТЧ.Цена = СтрокаТЧ.ЦенаБезНДССУчетомКорректировок;
			
			Если СуммаВключаетНДС Тогда
				СтрокаТЧ.Цена = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТЧ.Цена,
					Ложь, Истина, УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС));
			КонецЕсли;
			
			Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='В строке %1 табличной части ""%2"" изменена цена. Предыдущее значение - %3, новое - %4. 
                      |Цена получена с учетом предыдущих корректировок данной строки другими документами ""Приложение 2 к налоговой накладной""!';uk= 'В рядку %1 табличної частини ""%2"" змінена ціна. Попереднє значення - %3, нове - %4. 
                      |Ціна отримана з урахуванням попередніх коригувань даного рядка іншими документами ""Додаток 2 до податкової накладної""!'"),
				СтрокаТЧ.НомерСтр, ПолучитьПредставлениеТЧПоимени(ИмяТабЧасти), ЦенаИзДокумента, СтрокаТЧ.Цена));	
		КонецЕсли; 	
		
		// Рассчитать реквизиты табличной части.
		Если (ИмяТабЧасти = "Товары" Или ИмяТабЧасти = "Услуги") Тогда 
			ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТЧ, 1);
		КонецЕсли;
		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, СуммаВключаетНДС);	
		РассчитатьСуммыИзменений(СтрокаТЧ, ИмяТабЧасти);
	
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЦенуБезНДСРеглДокументП2(СтрокаТаблицы, ИмяТабЧасти)
		
	Если ИмяТабЧасти = "ОС" Или ИмяТабЧасти = "НМА" Тогда
		СуммаСкидки = 0;
		Цена = СтрокаТаблицы.Сумма;
		Количество = 1;
	Иначе
		СуммаСкидки = СтрокаТаблицы.СуммаСкидки;
		Цена = СтрокаТаблицы.Цена;
		Количество = СтрокаТаблицы.Количество;
	КонецЕсли; 
	
	Если     ВалютаДокумента = ВалютаРегламентированногоУчета 
		И НЕ СуммаВключаетНДС 
		И СуммаСкидки = 0 Тогда
		ЦенаБезНДСРегл = Цена;
	Иначе
		
		СуммаСНДСВал    = СтрокаТаблицы.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		СуммаНДСВал     = СтрокаТаблицы.СуммаНДС;
		СуммаБезНДСВал  = СуммаСНДСВал - СуммаНДСВал;
		
		Если ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
			СуммаБезНДСРегл = СуммаБезНДСВал;
		Иначе
			Если ВидОперации = Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка Тогда
				СуммаБезНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаБезНДСВал, 
													ВалютаДокумента,
													ВалютаРегламентированногоУчета, 
													КурсВзаиморасчетов, 
													1,
													КратностьВзаиморасчетов,
													1);			
			    
			Иначе
				СуммаСНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаСНДСВал, 
													ВалютаДокумента,
													ВалютаРегламентированногоУчета, 
													КурсВзаиморасчетов, 
													1,
													КратностьВзаиморасчетов,
													1);
											
				СуммаНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаНДСВал, 
													ВалютаДокумента,
													ВалютаРегламентированногоУчета, 
													КурсВзаиморасчетов, 
													1,
													КратностьВзаиморасчетов,
													1);
													
				СуммаБезНДСРегл = СуммаСНДСРегл - СуммаНДСРегл;
			КонецЕсли;				
		КонецЕсли;				
		
		ЦенаБезНДСРегл = ?(Количество = 0, СуммаБезНДСРегл, Окр(СуммаБезНДСРегл / Количество, 2));
	КонецЕсли;
		
	Возврат ЦенаБезНДСРегл;

КонецФункции

Функция ПолучитьИзменениеЦеныБезНДСДокументП2(СтрокаТаблицы, ИмяТабЧасти)

	ИзменениеСуммыСНДСВал    = СтрокаТаблицы.ИзменениеСуммы + ?(СуммаВключаетНДС, 0, СтрокаТаблицы.ИзменениеСуммыНДС);
	ИзменениеСуммыНДСВал     = СтрокаТаблицы.ИзменениеСуммыНДС;
	ИзменениеСуммыБезНДСВал  = ИзменениеСуммыСНДСВал - ИзменениеСуммыНДСВал;
	
	Если СтрокаТаблицы.ИзменениеЦены = 0 Тогда
		ИзменениеЦеныСоСкидкойВал = 0;
	Иначе
		Если СуммаВключаетНДС Тогда
			ИзменениеЦеныСоСкидкойВал = ИзменениеСуммыСНДСВал / ?(СтрокаТаблицы.Количество = 0, 1, СтрокаТаблицы.Количество);
		Иначе
			ИзменениеЦеныСоСкидкойВал = ИзменениеСуммыБезНДСВал / ?(СтрокаТаблицы.Количество = 0, 1, СтрокаТаблицы.Количество);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат ИзменениеЦеныСоСкидкойВал;

КонецФункции

Процедура ПривестиСтрокиКНовымПравилам(ТаблицаНомСостава, ИмяТабЧасти)

	// Обрабатываем причины (способы):
	// 1. "Повернення товару або авансових платежів"
	// 2. "Зміна кількості"
	// 3. "Зміна ціни"
	// 4. "Зміна номенклатури"
	// 5. "Умовний продаж"
		
	СтрокиНомСоставаДокумента = ЭтотОбъект[ИмяТабЧасти];
	
	// Для порядка
	НомерСтр = 1;
	МассивСтрокКЗамещению = Новый Массив;
	
	Для каждого СтрокаТЧ Из СтрокиНомСоставаДокумента Цикл
			
		// 1. "Повернення товару або авансових платежів"
		// Здесь просто проставляем номер группы
		Если СтрокаТЧ.ПричинаКорректировкиНовая = "Повернення товару або авансових платежів"
			И СтрокаТЧ.ИзменениеКоличества < 0 Тогда
			
			УстановитьНомерСтроки(СтрокаТЧ.НомерСтр, НомерСтр);
			УстановитьНомерГруппы(СтрокаТЧ.НомерГруппы, НачальныйНомерГруппы);  
			
		ИначеЕсли СтрокаТЧ.ПричинаКорректировкиНовая = "Зміна кількості"
			И СтрокаТЧ.ИзменениеКоличества < 0 Тогда
			
			ОстатокУПокупателя = СтрокаТЧ.Количество + СтрокаТЧ.ИзменениеКоличества;
			Если ОстатокУПокупателя = 0 Тогда 
				ТекстСообщения = НСтр("ru='В табличной части ""%1"" для строки №%2 указана причина ""Зміна кількості"", но выполняется полный возврат!';uk= 'В табличній частині ""%1"" для рядка №%2 вказана причина ""Зміна кількості"", але виконується повне повернення!'");   
				ВставитьИмяТЧвСообщение(ТекстСообщения, ИмяТабЧасти, "%1");
				Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИмяТабЧасти, НомерСтр));
				УстановитьНомерСтроки(СтрокаТЧ.НомерСтр, НомерСтр);
				Продолжить;	
			КонецЕсли;
			
			// Строка - снятие прошлой позиции
			СтрокаТоваровСнятыеПозиции = ТаблицаНомСостава.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоваровСнятыеПозиции, СтрокаТЧ);
			УстановитьНомерСтроки(СтрокаТоваровСнятыеПозиции.НомерСтр, НомерСтр);
			УстановитьНомерГруппы(СтрокаТоваровСнятыеПозиции.НомерГруппы, НачальныйНомерГруппы);
			
			СтрокаТоваровСнятыеПозиции.ИзменениеКоличества = -СтрокаТЧ.Количество;
			ИзменениеКоличестваПриИзменении(СтрокаТоваровСнятыеПозиции, ИмяТабЧасти);
			
			// Строка - остаток у покупателя
			СтрокаТоваровОставшаясяЧасть = ТаблицаНомСостава.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоваровОставшаясяЧасть, СтрокаТЧ);
			УстановитьНомерСтроки(СтрокаТоваровОставшаясяЧасть.НомерСтр, НомерСтр);
			СтрокаТоваровОставшаясяЧасть.НомерГруппы = СтрокаТоваровСнятыеПозиции.НомерГруппы;
			
			СтрокаТоваровОставшаясяЧасть.ИзменениеКоличества = ОстатокУПокупателя;
			ИзменениеКоличестваПриИзменении(СтрокаТоваровОставшаясяЧасть, ИмяТабЧасти);
			
			УстановитьНомерСтроки(СтрокаТоваровОставшаясяЧасть.НомерСтрокиНН, НачальныйНомерСтроки);
			
			МассивСтрокКЗамещению.Добавить(СтрокаТЧ);
			
		ИначеЕсли СтрокаТЧ.ПричинаКорректировкиНовая = "Зміна ціни" Или СтрокаТЧ.ПричинаКорректировкиНовая = "Умовний продаж" Тогда
			
			// Строка - снятие прошлой позиции
			СтрокаТоваровСнятыеПозиции = ТаблицаНомСостава.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоваровСнятыеПозиции, СтрокаТЧ);
			УстановитьНомерСтроки(СтрокаТоваровСнятыеПозиции.НомерСтр, НомерСтр);
			УстановитьНомерГруппы(СтрокаТоваровСнятыеПозиции.НомерГруппы, НачальныйНомерГруппы);
			
			Если ИмяТабЧасти = "ОС" Или ИмяТабЧасти = "НМА" Тогда
				СтрокаТоваровСнятыеПозиции.ИзменениеЦены = -СтрокаТЧ.Сумма
			Иначе
				СтрокаТоваровСнятыеПозиции.ИзменениеЦены = -СтрокаТЧ.Цена;
			КонецЕсли; 
			ИзменениеЦеныПриИзменении(СтрокаТоваровСнятыеПозиции, ИмяТабЧасти);
			
			// Строка - остаток у покупателя
			СтрокаТоваровОставшаясяЧасть = ТаблицаНомСостава.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоваровОставшаясяЧасть, СтрокаТЧ);
			УстановитьНомерСтроки(СтрокаТоваровОставшаясяЧасть.НомерСтр, НомерСтр);
			СтрокаТоваровОставшаясяЧасть.НомерГруппы = СтрокаТоваровСнятыеПозиции.НомерГруппы;
			
			Если ИмяТабЧасти = "ОС" Или ИмяТабЧасти = "НМА" Тогда
				СтрокаТоваровОставшаясяЧасть.ИзменениеЦены = СтрокаТЧ.Сумма + СтрокаТЧ.ИзменениеЦены;
			Иначе
				СтрокаТоваровОставшаясяЧасть.ИзменениеЦены = СтрокаТЧ.Цена + СтрокаТЧ.ИзменениеЦены;
			КонецЕсли;
			ИзменениеЦеныПриИзменении(СтрокаТоваровОставшаясяЧасть, ИмяТабЧасти);
			
			УстановитьНомерСтроки(СтрокаТоваровОставшаясяЧасть.НомерСтрокиНН, НачальныйНомерСтроки);
			
			МассивСтрокКЗамещению.Добавить(СтрокаТЧ);
			
		ИначеЕсли СтрокаТЧ.ПричинаКорректировкиНовая = "Зміна номенклатури" Тогда	
			Если СтрокаТЧ.ИзменениеКоличества < 0 И -СтрокаТЧ.ИзменениеКоличества < СтрокаТЧ.Количество Тогда
			
				// Обрабатываем "отрицательную" строку, похоже со способом "Зміна кількості", с тем лишь различием,
				// что номер группы уже должен быть установлен предварительно пользователем перед преобразованием
				ОстатокУПокупателя = СтрокаТЧ.Количество + СтрокаТЧ.ИзменениеКоличества;
				
				// Строка - снятие прошлой позиции
				СтрокаТоваровСнятыеПозиции = ТаблицаНомСостава.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТоваровСнятыеПозиции, СтрокаТЧ);
				УстановитьНомерСтроки(СтрокаТоваровСнятыеПозиции.НомерСтр, НомерСтр);
				
				СтрокаТоваровСнятыеПозиции.ИзменениеКоличества = -СтрокаТЧ.Количество;
				ИзменениеКоличестваПриИзменении(СтрокаТоваровСнятыеПозиции, ИмяТабЧасти);
				
				// Строка - остаток у покупателя
				СтрокаТоваровОставшаясяЧасть = ТаблицаНомСостава.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТоваровОставшаясяЧасть, СтрокаТЧ);
				УстановитьНомерСтроки(СтрокаТоваровОставшаясяЧасть.НомерСтр, НомерСтр);
				
				СтрокаТоваровОставшаясяЧасть.ИзменениеКоличества = ОстатокУПокупателя;
				ИзменениеКоличестваПриИзменении(СтрокаТоваровОставшаясяЧасть, ИмяТабЧасти);
				
				УстановитьНомерСтроки(СтрокаТоваровОставшаясяЧасть.НомерСтрокиНН, НачальныйНомерСтроки);
				
				МассивСтрокКЗамещению.Добавить(СтрокаТЧ);
				
			ИначеЕсли СтрокаТЧ.ИзменениеКоличества > 0 Или (СтрокаТЧ.ИзменениеКоличества < 0 И -СтрокаТЧ.ИзменениеКоличества = СтрокаТЧ.Количество) Тогда
				
				УстановитьНомерСтроки(СтрокаТЧ.НомерСтр, НомерСтр);
				Если Не ЗначениеЗаполнено(СтрокаТЧ.НомерСтрокиНН) Тогда
					УстановитьНомерСтроки(СтрокаТЧ.НомерСтрокиНН, НачальныйНомерСтроки);
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			// Для сохранения порядка
			УстановитьНомерСтроки(СтрокаТЧ.НомерСтр, НомерСтр);	
			
		КонецЕсли;
	КонецЦикла;
	
	ТабличнаяЧасть = ЭтотОбъект[ИмяТабЧасти];
	
	// Удалим строки, которые обработали
	Для каждого СтрокаТЧ Из МассивСтрокКЗамещению Цикл
		ТабличнаяЧасть.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	// Добавим преобразованные строки
	Для каждого СтрокаТЧ Из ТаблицаНомСостава Цикл
		ЗаполнитьЗначенияСвойств(ТабличнаяЧасть.Добавить(), СтрокаТЧ);		
	КонецЦикла;
	
	Если ТаблицаНомСостава.Количество() Тогда
		ТаблицаНомСостава.Очистить();
	КонецЕсли; 

КонецПроцедуры

Процедура УстановитьНомерСтроки(НомерСтрТекСтроки, НомерСтрОбщий)

	НомерСтрТекСтроки = НомерСтрОбщий;
	НомерСтрОбщий = НомерСтрОбщий + 1;	

КонецПроцедуры

Процедура УстановитьНомерГруппы(НомерГруппыТекСтроки, НомерГруппыОбщий)

	Если Не ЗначениеЗаполнено(НомерГруппыТекСтроки) Тогда
		НомерГруппыТекСтроки = НомерГруппыОбщий;
		НомерГруппыОбщий = НомерГруппыОбщий + 1;
	КонецЕсли;	

КонецПроцедуры

Функция ПолучитьТаблицуНоменклатурыНалоговогоДокументаДляПечати(Шапка)
	
	Попытка
		ИспользоватьДанныеЗЦ = Ложь;
		Если ЗначениеЗаполнено(Шапка.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены) Тогда
			НалоговыйДокументОбъект = Шапка.ОсновнаяНалоговаяПриРезервеНомераПриПродажаНижеОбычнойЦены;	
		    ИспользоватьДанныеЗЦ = Истина;
		Иначе	
			НалоговыйДокументОбъект = Шапка.НалоговаяНакладная;	
		КонецЕсли;
	 
		МассивОбъектовНННижеОбычнойЦены = Новый Массив;
		МассивОбъектовНННижеОбычнойЦены.Добавить(НалоговыйДокументОбъект);  
		КоллекцияПечатныхФормНН = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм("НалоговаяНакладная");
		ПараметрыВыводаНН = УправлениеПечатью.ПодготовитьСтруктуруПараметровВывода();
		ПечатнаяФормаНН = Документы.НалоговаяНакладная.ПечатьДокумента(МассивОбъектовНННижеОбычнойЦены, Новый Структура, ПараметрыВыводаНН, Истина);
		Если ИспользоватьДанныеЗЦ Тогда
			ПечатнаяФормаНН 	= ПечатнаяФормаНН.НалоговыйДокументЗЦ.R;	
		Иначе	
			ПечатнаяФормаНН 	= ПечатнаяФормаНН.НалоговыйДокумент.R;	
		КонецЕсли;	
		
		Если ПечатнаяФормаНН.Колонки.Найти("G3S") = Неопределено Тогда
		    ПечатнаяФормаНН.Колонки.Добавить("Номенклатура");
		Иначе	
			ПечатнаяФормаНН.Колонки.G3S.Имя = "Номенклатура";
		КонецЕсли;
		
		Если Не УсловнаяПродажаВозврат Тогда
			Если ПечатнаяФормаНН.Колонки.Найти("G105_2S") = Неопределено Тогда
			    ПечатнаяФормаНН.Колонки.Добавить("ЕдиницаИзмеренияКод");
			Иначе	
				ПечатнаяФормаНН.Колонки.G105_2S.Имя = "ЕдиницаИзмеренияКод";
			КонецЕсли;
		Иначе	
		    Если ПечатнаяФормаНН.Колонки.Найти("G4S") = Неопределено Тогда
			    ПечатнаяФормаНН.Колонки.Добавить("ЕдиницаИзмеренияКод");
			Иначе	
				ПечатнаяФормаНН.Колонки.G4S.Имя = "ЕдиницаИзмеренияКод";
			КонецЕсли;
		КонецЕсли;
		
		Если ПечатнаяФормаНН.Колонки.Найти("G5") = Неопределено Тогда
		    ПечатнаяФормаНН.Колонки.Добавить("Количество");
		Иначе	
			ПечатнаяФормаНН.Колонки.G5.Имя = "Количество";
		КонецЕсли;
		Если УсловнаяПродажаВозврат Тогда
			ПечатнаяФормаНН.Колонки.Удалить("Количество");
			ПечатнаяФормаНН.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		КонецЕсли;
		
		Если Не УсловнаяПродажаВозврат Тогда
			Если ПечатнаяФормаНН.Колонки.Найти("G6") = Неопределено Тогда
			    ПечатнаяФормаНН.Колонки.Добавить("ЦенаБезНДС");
			Иначе	
				ПечатнаяФормаНН.Колонки.G6.Имя = "ЦенаБезНДС";
			КонецЕсли;
		Иначе
			Если ПечатнаяФормаНН.Колонки.Найти("G010") = Неопределено Тогда
			    ПечатнаяФормаНН.Колонки.Добавить("ЦенаБезНДС");
			Иначе	
				ПечатнаяФормаНН.Колонки.G010.Имя = "ЦенаБезНДС";
			КонецЕсли;
		КонецЕсли;	
		
		Если ПечатнаяФормаНН.Колонки.Найти("ROWNUM") = Неопределено Тогда
			ПечатнаяФормаНН.Колонки.Добавить("НомерСтрокиНН", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(7,0)));
		Иначе	
			ПечатнаяФормаНН.Колонки.ROWNUM.Имя = "НомерСтрокиНН";
		КонецЕсли;
		
		// Колонки которые нужны из П2
		ПечатнаяФормаНН.Колонки.Добавить("НомерГруппыКорректировки");
		ПечатнаяФормаНН.Колонки.Добавить("ЭтоСтрокаНН", Новый ОписаниеТипов("Булево"));
		ПечатнаяФормаНН.Колонки.Добавить("Документ");
		ПечатнаяФормаНН.Колонки.Добавить("МоментВремени");
		
		ПечатнаяФормаНН.ЗаполнитьЗначения(Истина, "ЭтоСтрокаНН");
		ПечатнаяФормаНН.ЗаполнитьЗначения(НалоговыйДокументОбъект, "Документ");
		ПечатнаяФормаНН.ЗаполнитьЗначения(НалоговыйДокументОбъект.МоментВремени(), "МоментВремени");
		
	Исключение 
		ПечатнаяФормаНН = Новый ТаблицаЗначений;
		ПечатнаяФормаНН.Колонки.добавить("НомерСтрокиНН");
		ПечатнаяФормаНН.Колонки.добавить("Номенклатура");
		ПечатнаяФормаНН.Колонки.добавить("ЕдиницаИзмеренияКод");
		ПечатнаяФормаНН.Колонки.добавить("ЦенаБезНДС");
		ПечатнаяФормаНН.Колонки.добавить("Количество");
		// Колонки которые нужны из П2
		ПечатнаяФормаНН.Колонки.Добавить("НомерГруппыКорректировки");
		ПечатнаяФормаНН.Колонки.Добавить("ЭтоСтрокаНН", Новый ОписаниеТипов("Булево"));
		ПечатнаяФормаНН.Колонки.Добавить("Документ");
		ПечатнаяФормаНН.Колонки.Добавить("МоментВремени");
	КонецПопытки;
	
	// Также получим все приложения 2, кроме текущего, которыми раньше уже корректировалась данная НН
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Приложение2КНалоговойНакладной.Ссылка
	|ИЗ
	|	Документ.Приложение2КНалоговойНакладной КАК Приложение2КНалоговойНакладной
	|ГДЕ
	|	Приложение2КНалоговойНакладной.НалоговаяНакладная = &НалоговаяНакладная
	|	И Приложение2КНалоговойНакладной.МоментВремени < &МоментВремени
	|	И Приложение2КНалоговойНакладной.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приложение2КНалоговойНакладной.МоментВремени";
	
	Запрос.УстановитьПараметр("НалоговаяНакладная", НалоговыйДокументОбъект);
	Запрос.УстановитьПараметр("МоментВремени", 		ДокументП2.МоментВремени());
	
	ЕстьП2КНН = Ложь;
	
	РезультатЗапроса = Запрос.Выполнить();	
	Если Не РезультатЗапроса.Пустой() Тогда 
		
		ЕстьП2КНН = Истина;
		
		МассивСтрокИзменениеЦены = Новый Массив;
		МассивСтрокИзменениеКоличества = Новый Массив;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Попытка 
				МассивОбъектов = Новый Массив;
				МассивОбъектов.Добавить(Выборка.Ссылка);  
				
				КоллекцияПечатныхФормНН = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм("Приложение2КНалоговойНакладной");
				ПараметрыВыводаП2 = УправлениеПечатью.ПодготовитьСтруктуруПараметровВывода();
				ПечатнаяФормаП2 = Документы.Приложение2КНалоговойНакладной.ПечатьПриложения2КНалоговойНакладной(МассивОбъектов, Новый Структура, ПараметрыВыводаП2,, Истина);
				
				ПечатнаяФормаП2 	= ПечатнаяФормаП2.НалоговыйДокумент.R;
				
				Если ПечатнаяФормаП2.Колонки.Найти("G22") = Неопределено Тогда
				    ПечатнаяФормаП2.Колонки.Добавить("НомерГруппыКорректировки");
				Иначе	
					ПечатнаяФормаП2.Колонки.G22.Имя = "НомерГруппыКорректировки";
				КонецЕсли;
				
				Если ПечатнаяФормаП2.Колонки.Найти("G3S") = Неопределено Тогда
				    ПечатнаяФормаП2.Колонки.Добавить("Номенклатура");
				Иначе	
					ПечатнаяФормаП2.Колонки.G3S.Имя = "Номенклатура";
				КонецЕсли;
				
				Если Не УсловнаяПродажаВозврат Тогда
					Если ПечатнаяФормаП2.Колонки.Найти("G105_2S") = Неопределено Тогда
					    ПечатнаяФормаП2.Колонки.Добавить("ЕдиницаИзмеренияКод");
					Иначе	
						ПечатнаяФормаП2.Колонки.G105_2S.Имя = "ЕдиницаИзмеренияКод";
					КонецЕсли;
				Иначе	
				    Если ПечатнаяФормаП2.Колонки.Найти("G4S") = Неопределено Тогда
					    ПечатнаяФормаП2.Колонки.Добавить("ЕдиницаИзмеренияКод");
					Иначе	
						ПечатнаяФормаП2.Колонки.G4S.Имя = "ЕдиницаИзмеренияКод";
					КонецЕсли;
				КонецЕсли;
				
				Если ПечатнаяФормаП2.Колонки.Найти("G5") = Неопределено Тогда
				    ПечатнаяФормаП2.Колонки.Добавить("Количество");
				Иначе	
					ПечатнаяФормаП2.Колонки.G5.Имя = "Количество";
				КонецЕсли;
				
				Если ПечатнаяФормаП2.Колонки.Найти("G8") = Неопределено Тогда
				    ПечатнаяФормаП2.Колонки.Добавить("КоличествоПриИзмененииЦены");
				Иначе	
					ПечатнаяФормаП2.Колонки.G8.Имя = "КоличествоПриИзмененииЦены";
				КонецЕсли;
				
				Если Не УсловнаяПродажаВозврат Тогда
					Если ПечатнаяФормаП2.Колонки.Найти("G6") = Неопределено Тогда
					    ПечатнаяФормаП2.Колонки.Добавить("ЦенаБезНДС");
					Иначе	
						ПечатнаяФормаП2.Колонки.G6.Имя = "ЦенаБезНДС";
					КонецЕсли;
				Иначе
					Если ПечатнаяФормаП2.Колонки.Найти("G010") = Неопределено Тогда
					    ПечатнаяФормаП2.Колонки.Добавить("ЦенаБезНДС");
					Иначе	
						ПечатнаяФормаП2.Колонки.G010.Имя = "ЦенаБезНДС";
					КонецЕсли;
				КонецЕсли;
				
				Если ПечатнаяФормаП2.Колонки.Найти("G7") = Неопределено Тогда
				    ПечатнаяФормаП2.Колонки.Добавить("ИзменениеЦеныБезНДС");
				Иначе	
					ПечатнаяФормаП2.Колонки.G7.Имя = "ИзменениеЦеныБезНДС";
				КонецЕсли;
				
				Если ПечатнаяФормаП2.Колонки.Найти("G001") = Неопределено Тогда
				    ПечатнаяФормаП2.Колонки.Добавить("НомерСтрокиНН");
				Иначе	
					ПечатнаяФормаП2.Колонки.G001.Имя = "НомерСтрокиНН";
				КонецЕсли;
				
				ПечатнаяФормаП2.Колонки.Добавить("Документ");
				ПечатнаяФормаП2.Колонки.Добавить("МоментВремени");
				
				ПечатнаяФормаП2.ЗаполнитьЗначения(Выборка.Ссылка, "Документ");
				ПечатнаяФормаП2.ЗаполнитьЗначения(Выборка.Ссылка.МоментВремени(), "МоментВремени");
				
			Исключение
				ПечатнаяФормаП2 = Новый ТаблицаЗначений;
				ПечатнаяФормаП2.Колонки.добавить("НомерСтрокиНН");
				ПечатнаяФормаП2.Колонки.добавить("Номенклатура");
				ПечатнаяФормаП2.Колонки.добавить("ЕдиницаИзмеренияКод");
				ПечатнаяФормаП2.Колонки.добавить("ЦенаБезНДС");
				ПечатнаяФормаП2.Колонки.добавить("Количество");
				ПечатнаяФормаП2.Колонки.Добавить("НомерГруппыКорректировки");
				ПечатнаяФормаП2.Колонки.Добавить("КоличествоПриИзмененииЦены");
				ПечатнаяФормаП2.Колонки.Добавить("ИзменениеЦеныБезНДС");
				ПечатнаяФормаП2.Колонки.Добавить("Документ");
				ПечатнаяФормаП2.Колонки.Добавить("МоментВремени");
			КонецПопытки;	
			
			Для каждого СтрокаП2 Из ПечатнаяФормаП2 Цикл
				СтрокаРезультирующейТаблицы = ПечатнаяФормаНН.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРезультирующейТаблицы, СтрокаП2);
				СтрокаРезультирующейТаблицы.ЦенаБезНДС = Окр(СтрокаРезультирующейТаблицы.ЦенаБезНДС, 2);
				
				Если СтрокаП2.Количество = 0 И (Не СтрокаП2.КоличествоПриИзмененииЦены = 0 Или УсловнаяПродажаВозврат) Тогда
					Если Не УсловнаяПродажаВозврат Тогда
						СтрокаРезультирующейТаблицы.Количество = СтрокаП2.КоличествоПриИзмененииЦены;
						СтрокаРезультирующейТаблицы.ЦенаБезНДС = Окр(СтрокаП2.ИзменениеЦеныБезНДС, 2);
					КонецЕсли;
					МассивСтрокИзменениеЦены.Добавить(СтрокаРезультирующейТаблицы);
				Иначе
					МассивСтрокИзменениеКоличества.Добавить(СтрокаРезультирующейТаблицы);
				КонецЕсли;	
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;	
	
	Если ЕстьП2КНН Тогда
		
		// Дополнительно включим и строки из НН, которые будут соответствовать номеру строки, строкам из массивов цены и количества
		ДополнитьМассивСтрокП2КорректируемымиСтрокамиНН(ПечатнаяФормаНН, МассивСтрокИзменениеКоличества);
		ДополнитьМассивСтрокП2КорректируемымиСтрокамиНН(ПечатнаяФормаНН, МассивСтрокИзменениеЦены);
		
		ТаблицаИзменениеКоличества 	= ПолучитьСвернутыеТаблицы(ПечатнаяФормаНН, МассивСтрокИзменениеКоличества, Ложь);
		ТаблицаИзменениеЦены 		= ПолучитьСвернутыеТаблицы(ПечатнаяФормаНН, МассивСтрокИзменениеЦены);
		
		РезультирующаяТаблица = ПечатнаяФормаНН.СкопироватьКолонки("Номенклатура,ЕдиницаИзмеренияКод,НомерСтрокиНН,ЦенаБезНДС,Количество");
		РезультирующаяТаблица.Колонки.Добавить("ЦенаПриИзмененииЦены");
		РезультирующаяТаблица.Колонки.Добавить("ЭтоИзменениеЦены", Новый ОписаниеТипов("Булево"));
		РезультирующаяТаблица.Колонки.Добавить("СтрокаНеКорректировалась", Новый ОписаниеТипов("Булево"));
		
		ЗаполнитьРезультирующуюТаблицу(РезультирующаяТаблица, ТаблицаИзменениеКоличества, Ложь);
		ЗаполнитьРезультирующуюТаблицу(РезультирующаяТаблица, ТаблицаИзменениеЦены);
		
		ФинализироватьТаблицу(РезультирующаяТаблица, ПечатнаяФормаНН);
		
		ЗаполнитьСостояниеНалоговойСУчетомКорректировок(ПечатнаяФормаНН, РезультирующаяТаблица);
		
		ПечатнаяФормаНН = РезультирующаяТаблица;
		
	Иначе
		ПечатнаяФормаНН.Колонки.Добавить("ЦенаПриИзмененииЦены");
		ЗаполнитьСостояниеНалоговойСУчетомКорректировок(ПечатнаяФормаНН);
	КонецЕсли;
	
	ПечатнаяФормаНН.Сортировать("НомерСтрокиНН");
	Если ПечатнаяФормаНН.Количество() > 0 Тогда
		Попытка
			НачальныйНомерСтроки = ПечатнаяФормаНН[ПечатнаяФормаНН.Количество()-1].НомерСтрокиНН + 1;
		Исключение
		    НачальныйНомерСтроки = 0;
		КонецПопытки;	
	Иначе	
	    НачальныйНомерСтроки = 0;
	КонецЕсли;
	
	Возврат ПечатнаяФормаНН;

КонецФункции

Процедура ДополнитьМассивСтрокП2КорректируемымиСтрокамиНН(ПечатнаяФормаНН, МассивСтрокП2)

	СтруктураПоискаСтрок = Новый Структура("НомерСтрокиНН");
	МассивСтрокКДобавлениюИзНН = Новый Массив;
	
	Для каждого Строка Из МассивСтрокП2 Цикл
		СтруктураПоискаСтрок.НомерСтрокиНН = Строка.НомерСтрокиНН;
		МассивНайденныхСтрокПоНомеруСтрокиНН = ПечатнаяФормаНН.НайтиСтроки(СтруктураПоискаСтрок);
		Для каждого НайденаяСтрока Из МассивНайденныхСтрокПоНомеруСтрокиНН Цикл
			Если МассивСтрокП2.Найти(НайденаяСтрока) = Неопределено
				И (НайденаяСтрока.МоментВремени.Сравнить(Строка.МоментВремени) < 0 Или НайденаяСтрока.ЭтоСтрокаНН)
				И МассивСтрокКДобавлениюИзНН.Найти(НайденаяСтрока) = Неопределено Тогда	
				МассивСтрокКДобавлениюИзНН.Добавить(НайденаяСтрока);
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
	
	Для каждого СтрокаКДобавлению Из МассивСтрокКДобавлениюИзНН Цикл
		МассивСтрокП2.Добавить(СтрокаКДобавлению);	
	КонецЦикла; 

КонецПроцедуры

Функция ПолучитьСвернутыеТаблицы(ПечатнаяФормаНН, МассивСтрокИзменение, ЭтоИзменениеЦены = Истина)

	НаборКолонокКопирования = "Номенклатура,ЕдиницаИзмеренияКод,НомерСтрокиНН,ЦенаБезНДС,Количество";
	РезультирующаяТаблица = Неопределено;
	
	Если МассивСтрокИзменение.Количество() > 0 Тогда
		РезультирующаяТаблица = ПечатнаяФормаНН.Скопировать(МассивСтрокИзменение, НаборКолонокКопирования);
		
		Если ЭтоИзменениеЦены Тогда
			РезультирующаяТаблица.Свернуть("Номенклатура,ЕдиницаИзмеренияКод,НомерСтрокиНН,Количество","ЦенаБезНДС");
		Иначе
			РезультирующаяТаблица.Свернуть("Номенклатура,ЕдиницаИзмеренияКод,НомерСтрокиНН,ЦенаБезНДС","Количество");	
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультирующаяТаблица;

КонецФункции

Процедура ЗаполнитьРезультирующуюТаблицу(РезультирующаяТаблица, ТаблицаИсточник, ЭтоИзменениеЦены = Истина)

	Если ТаблицаИсточник = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Для каждого Строка Из ТаблицаИсточник Цикл 
		СтрокаРезультирующейТаблицы = РезультирующаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРезультирующейТаблицы, Строка);
		СтрокаРезультирующейТаблицы.ЭтоИзменениеЦены = ЭтоИзменениеЦены; 
	КонецЦикла; 

КонецПроцедуры

Функция НайтиИзначальнуюЦенуДляСтрокиПриИзмененииЦены(Строка, ПечатнаяФормаНН)

	ИскомаяИзначальнаяЦенаИзНН = Неопределено;
	
	СтруктураПоискаСтрок = Новый Структура("НомерСтрокиНН,СтрокаОбрабатывалась");
	
	СтруктураПоискаСтрок.НомерСтрокиНН = Строка.НомерСтрокиНН;
	СтруктураПоискаСтрок.СтрокаОбрабатывалась = Ложь;
	МассивСтрокИсходнойТаблицыНН = ПечатнаяФормаНН.НайтиСтроки(СтруктураПоискаСтрок);
	
	Если МассивСтрокИсходнойТаблицыНН.Количество() > 0 Тогда
		
		Для каждого СтрокаПоНомеруСтрокиНН Из МассивСтрокИсходнойТаблицыНН Цикл
			
			СтрокаПоНомеруСтрокиНН.СтрокаОбрабатывалась = Истина;
			
			Если СтрокаПоНомеруСтрокиНН.ЭтоСтрокаНН Тогда
				// Найдена изначальная строка НН
				ИскомаяИзначальнаяЦенаИзНН = СтрокаПоНомеруСтрокиНН.ЦенаБезНДС;
				Прервать;
			Иначе
				ПараметрыПоискаПоГруппе = Новый Структура("НомерГруппыКорректировки,Документ",
					СтрокаПоНомеруСтрокиНН.НомерГруппыКорректировки,
					СтрокаПоНомеруСтрокиНН.Документ);
				
			    МассивСтрокПоНомеруГруппыДокумента = ПечатнаяФормаНН.НайтиСтроки(ПараметрыПоискаПоГруппе);
				
				Если МассивСтрокПоНомеруГруппыДокумента.Количество() > 0 Тогда
					// Нас ИнтересуетСторноСтрока, а именно ее НомерСтрокиНН
					Для каждого СтрокаНомераГруппы Из МассивСтрокПоНомеруГруппыДокумента Цикл
						Если СтрокаНомераГруппы = СтрокаПоНомеруСтрокиНН Тогда
							Продолжить;
						КонецЕсли; 
						Если СтрокаНомераГруппы.ЦенаБезНДС < 0 Или СтрокаНомераГруппы.Количество < 0 Тогда
							Если СтрокаНомераГруппы.Номенклатура <> СтрокаПоНомеруСтрокиНН.Номенклатура Тогда
								// В этом месте замена номенклатуры, и изначальная цена, это цена этой номенклатуры (заменяющей), дальше йти не нужно
								ИскомаяИзначальнаяЦенаИзНН = СтрокаПоНомеруСтрокиНН.ЦенаБезНДС;
								Прервать; 
							Иначе
								ИскомаяИзначальнаяЦенаИзНН = НайтиИзначальнуюЦенуДляСтрокиПриИзмененииЦены(СтрокаНомераГруппы, ПечатнаяФормаНН);
								Если ИскомаяИзначальнаяЦенаИзНН <> Неопределено Тогда
									Прервать;
								КонецЕсли;	
							КонецЕсли; 
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если ИскомаяИзначальнаяЦенаИзНН <> Неопределено Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат ИскомаяИзначальнаяЦенаИзНН;

КонецФункции

Процедура ФинализироватьТаблицу(РезультирующаяТаблица, ПечатнаяФормаНН)

	// Изначально добавим еще строки из НН, которые ни разу не корректировались
	СтрокиИзНН = ПечатнаяФормаНН.НайтиСтроки(Новый Структура("ЭтоСтрокаНН", Истина));
	Для каждого СтрокаИзНН Из СтрокиИзНН Цикл
		СтрокиКорректировкиПоНомеруСтроки = РезультирующаяТаблица.НайтиСтроки(Новый Структура("НомерСтрокиНН", СтрокаИзНН.НомерСтрокиНН));
		// Если количество = 0, значить строка из НН не корректировкалась ни разу и ее необходимо добавить в результирующую таблицу
		Если СтрокиКорректировкиПоНомеруСтроки.Количество() = 0 Тогда
			СтрокаРезультирующейТаблицы = РезультирующаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультирующейТаблицы, СтрокаИзНН);
			СтрокаРезультирующейТаблицы.СтрокаНеКорректировалась = Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	// Удалены должны быть не только строки с нулевым количеством при изменении количества и с нулевой ценой при изменении цены,
	//но также и строки, которые имееют не нулевые количество или цену, но которые имеют тот же номер строки НН, что и нулевые в другом массиве
	//такая ситуация возможна если, одна строка НН корректируется разными документами П2 разными способами (изменение цены или количества) 
	МассивСтрокКУдалению = Новый Массив;
	
	Если Не УсловнаяПродажаВозврат Тогда
		СтрокиСНулевымКоличеством = РезультирующаяТаблица.НайтиСтроки(Новый Структура("ЭтоИзменениеЦены,Количество", Ложь, 0));
		Для каждого Строка Из СтрокиСНулевымКоличеством Цикл
			МассивСтрокКУдалению.Добавить(Строка);
			// разные способы корректировки одной строки в разных документах П2
			СтруктураПоискаСтрокиИзменениеЦены = Новый Структура("НомерСтрокиНН, ЭтоИзменениеЦены",
				Строка.НомерСтрокиНН, Истина);
			МассивСтрокИзменениеЦены = РезультирующаяТаблица.НайтиСтроки(СтруктураПоискаСтрокиИзменениеЦены);
			
			Для каждого СтрокаПоНомеруСтрокиНН Из МассивСтрокИзменениеЦены Цикл
				Если МассивСтрокКУдалению.Найти(СтрокаПоНомеруСтрокиНН) = Неопределено Тогда
					МассивСтрокКУдалению.Добавить(СтрокаПоНомеруСтрокиНН);
				КонецЕсли; 	
			КонецЦикла;
		КонецЦикла;	
	КонецЕсли;
	
	СтрокиСНулевойЦеной = РезультирующаяТаблица.НайтиСтроки(Новый Структура("ЭтоИзменениеЦены,ЦенаБезНДС", Истина, 0));
	Для каждого Строка Из СтрокиСНулевойЦеной Цикл
		Если МассивСтрокКУдалению.Найти(Строка) = Неопределено Тогда
			МассивСтрокКУдалению.Добавить(Строка);
		КонецЕсли;
		СтруктураПоискаСтрокиИзменениеКоличества = Новый Структура("НомерСтрокиНН, ЭтоИзменениеЦены",
			Строка.НомерСтрокиНН, Ложь);
		МассивСтрокИзменениеКоличества = РезультирующаяТаблица.НайтиСтроки(СтруктураПоискаСтрокиИзменениеКоличества);
		Для каждого СтрокаПоНомеруСтрокиНН Из МассивСтрокИзменениеКоличества Цикл
			Если МассивСтрокКУдалению.Найти(СтрокаПоНомеруСтрокиНН) = Неопределено Тогда
				МассивСтрокКУдалению.Добавить(СтрокаПоНомеруСтрокиНН);
			КонецЕсли; 	
		КонецЦикла;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МассивСтрокКУдалению) Тогда
		РезультирующаяТаблица.Колонки.Добавить("НеУчитывать", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	Для каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
		СтрокаКУдалению.НеУчитывать = Истина;
	КонецЦикла; 
	
	// Чтобы исключить возможное зацикливание при рекурсии при поиске цены
	ПечатнаяФормаНН.Колонки.Добавить("СтрокаОбрабатывалась", Новый ОписаниеТипов("Булево"));
	
	// Также заполним цену поиска из изначальной НН для строк изменения цены
	Для каждого Строка Из РезультирующаяТаблица Цикл
		//Цену при изменении желательно получить для всех строк, а не только, которые в данной П2 имеют изменение цены.
		//Возможно некоторые строки, которые сейчас имеют изменение количества, раньше (предыдущими П2) корректировались как изменение цены
		Строка.ЦенаПриИзмененииЦены = Строка.ЦенаБезНДС;
		
		Если Строка.СтрокаНеКорректировалась Или Не ЗначениеЗаполнено(Строка.НомерСтрокиНН) Тогда
			Продолжить;
		КонецЕсли;
		
		ЦенаИзначальнаяИзНН = НайтиИзначальнуюЦенуДляСтрокиПриИзмененииЦены(Строка, ПечатнаяФормаНН);
		Если ЦенаИзначальнаяИзНН <> Неопределено Тогда
			// Для поиска строки НН при заполении ТЧ обработки, ожидаем, что цену в НН никто не будет менять
			Строка.ЦенаБезНДС = ЦенаИзначальнаяИзНН;
		КонецЕсли;
	КонецЦикла;		

КонецПроцедуры

Процедура ЗаполнитьСостояниеНалоговойСУчетомКорректировок(ПечатнаяФормаНН, ТаблицаСУчетомП2 = Неопределено)
	
	Если ТаблицаСУчетомП2 <> Неопределено Тогда
		ТаблицаОбработки = ТаблицаСУчетомП2; 
	Иначе
		ТаблицаОбработки = ПечатнаяФормаНН;	
	КонецЕсли;
	
	ПроверятьНулевыеСтроки = ТаблицаОбработки.Колонки.Найти("НеУчитывать") <> Неопределено;
	
	Для каждого Строка Из ТаблицаОбработки Цикл
		
		Если ПроверятьНулевыеСтроки И Строка.НеУчитывать Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПредставленияНН = НалоговаяНакладнаяСУчетомКорректировок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПредставленияНН, Строка);
		
		Если ЗначениеЗаполнено(Строка.ЦенаПриИзмененииЦены) И Строка.ЦенаПриИзмененииЦены <> Строка.ЦенаБезНДС Тогда
			СтрокаПредставленияНН.ЦенаБезНДС = Строка.ЦенаПриИзмененииЦены;
		КонецЕсли;
		
		Если ТаблицаСУчетомП2 <> Неопределено Тогда
		
			СтруктураПоискаСтроки = Новый Структура("НомерСтрокиНН,Номенклатура,ЦенаБезНДС,ЕдиницаИзмеренияКод,Количество", 
				Строка.НомерСтрокиНН,Строка.Номенклатура,Строка.ЦенаБезНДС,Строка.ЕдиницаИзмеренияКод,Строка.Количество);	
			Если ЗначениеЗаполнено(Строка.ЦенаПриИзмененииЦены) И Строка.ЦенаПриИзмененииЦены <> Строка.ЦенаБезНДС Тогда
				СтруктураПоискаСтроки.Вставить("ЦенаБезНДС", Строка.ЦенаПриИзмененииЦены);
			КонецЕсли; 	
			
			СтрокиПечатнойФормыНН = ПечатнаяФормаНН.НайтиСтроки(СтруктураПоискаСтроки);
			Если СтрокиПечатнойФормыНН.Количество() > 0 Тогда
				ЗначениеОстальныхПараметров = СтрокиПечатнойФормыНН[0];
			Иначе
				ЗначениеОстальныхПараметров = Неопределено;
			КонецЕсли;	
		Иначе
			ЗначениеОстальныхПараметров = Строка;
		КонецЕсли; 
		
		Если ЗначениеОстальныхПараметров = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ПечатнаяФормаНН.Колонки.Найти("G4") <> Неопределено Тогда
			СтрокаПредставленияНН.КодУКТВЭД = ЗначениеОстальныхПараметров.G4;	
		КонецЕсли;
		
		Если ПечатнаяФормаНН.Колонки.Найти("G32") <> Неопределено Тогда
			СтрокаПредставленияНН.Импортированный = ЗначениеОстальныхПараметров.G32;	
		КонецЕсли;
		
		Если ПечатнаяФормаНН.Колонки.Найти("G33") <> Неопределено Тогда
			СтрокаПредставленияНН.КодДКПП = ЗначениеОстальныхПараметров.G33;	
		КонецЕсли;
		
		Если ПечатнаяФормаНН.Колонки.Найти("G4S") <> Неопределено Тогда
			СтрокаПредставленияНН.ЕдиницаИзмерения = ЗначениеОстальныхПараметров.G4S;	
		КонецЕсли;
		
		Если ПечатнаяФормаНН.Колонки.Найти("G008") <> Неопределено Тогда
			СтрокаПредставленияНН.КодСтавки = ЗначениеОстальныхПараметров.G008;	
		КонецЕсли;
		
		Если ПечатнаяФормаНН.Колонки.Найти("G009") <> Неопределено Тогда
			СтрокаПредставленияНН.КодЛьготы = ЗначениеОстальныхПараметров.G009;	
		КонецЕсли;
		
		Если ПечатнаяФормаНН.Колонки.Найти("G010") <> Неопределено Тогда
			СтрокаПредставленияНН.Сумма = ЗначениеОстальныхПараметров.G010;	
		КонецЕсли;
		
		Если ПечатнаяФормаНН.Колонки.Найти("G11_10") <> Неопределено Тогда
			СтрокаПредставленияНН.СуммаНДС = ЗначениеОстальныхПараметров.G11_10;	
		КонецЕсли;
		
		Если УсловнаяПродажаВозврат Тогда
			СтрокаПредставленияНН.ЕдиницаИзмерения = СтрокаПредставленияНН.ЕдиницаИзмеренияКод;
			СтрокаПредставленияНН.ЕдиницаИзмеренияКод  = "";
			СтрокаПредставленияНН.Сумма = ?(Строка.ЦенаПриИзмененииЦены = Неопределено, Строка.ЦенаБезНДС, Строка.ЦенаПриИзмененииЦены);
			СтрокаПредставленияНН.ЦенаБезНДС = 0;
		КонецЕсли;
	
	КонецЦикла;
	
	НалоговаяНакладнаяСУчетомКорректировок.Сортировать("НомерСтрокиНН");	

КонецПроцедуры

Процедура ИзменениеКоличестваПриИзменении(СтрокаТЧ, ИмяТабЧасти)

	Если СтрокаТЧ.ИзменениеКоличества < 0 И (ИмяТабЧасти = "ОС" Или ИмяТабЧасти = "НМА") Тогда
		СтрокаТЧ.ИзменениеКоличества = Макс(СтрокаТЧ.ИзменениеКоличества, - 1);
	ИначеЕсли СтрокаТЧ.ИзменениеКоличества < 0 Тогда
		СтрокаТЧ.ИзменениеКоличества = Макс(СтрокаТЧ.ИзменениеКоличества, - СтрокаТЧ.Количество);
	КонецЕсли;

	РассчитатьСуммыИзменений(СтрокаТЧ, ИмяТабЧасти);	
КонецПроцедуры

Процедура ИзменениеЦеныПриИзменении(СтрокаТЧ, ИмяТабЧасти)
	
	Если СтрокаТЧ.ИзменениеЦены < 0 И (ИмяТабЧасти = "ОС" Или ИмяТабЧасти = "НМА") Тогда
		СтрокаТЧ.ИзменениеЦены = Макс(СтрокаТЧ.ИзменениеЦены, - СтрокаТЧ.Сумма);
	ИначеЕсли СтрокаТЧ.ИзменениеЦены < 0 Тогда
		СтрокаТЧ.ИзменениеЦены = Макс(СтрокаТЧ.ИзменениеЦены, - СтрокаТЧ.Цена);
	КонецЕсли;

	РассчитатьСуммыИзменений(СтрокаТЧ, ИмяТабЧасти);
КонецПроцедуры

Процедура РассчитатьСуммыИзменений(СтрокаТЧ, ИмяТабЧасти) Экспорт
	// для совпадения сумм изменений с исходными суммами при вовратах
	// расчет производим пропорционально суммам
	
	Коэф = 0;
	Если НЕ СтрокаТЧ.ИзменениеКоличества = 0 Тогда
		
		Если ИмяТабЧасти = "Товары" Тогда
			ИсходноеКоличество =  СтрокаТЧ.Количество;
		ИначеЕсли ИмяТабЧасти = "ОС"
			  ИЛИ ИмяТабЧасти = "НМА" Тогда
			ИсходноеКоличество = 1;
		Иначе 
		    ИсходноеКоличество = СтрокаТЧ.Количество;
		КонецЕсли;
		
		Если ИсходноеКоличество = 0 Тогда
			ИсходноеКоличество = 1;
		КонецЕсли;
			 
		Коэф =  СтрокаТЧ.ИзменениеКоличества/ИсходноеКоличество;
		
	ИначеЕсли НЕ СтрокаТЧ.ИзменениеЦены = 0 Тогда
		
		Если ИмяТабЧасти = "ОС"
		 ИЛИ ИмяТабЧасти = "НМА" Тогда
			ИсходнаяЦена = СтрокаТЧ.Сумма;
		Иначе 
		    ИсходнаяЦена = СтрокаТЧ.Цена;
		КонецЕсли;
		
		Если ИсходнаяЦена = 0 Тогда
			ИсходнаяЦена = 1;
		КонецЕсли;

		Коэф =  СтрокаТЧ.ИзменениеЦены/ИсходнаяЦена;
		
	КонецЕсли;
	
	СтрокаТЧ.ИзменениеСуммы		= СтрокаТЧ.Сумма * Коэф;
	
	Если  НЕ ИмяТабЧасти = "ВозвратнаяТара" Тогда
		СтрокаТЧ.ИзменениеСуммыНДС	= СтрокаТЧ.СуммаНДС * Коэф;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполненияНомеровНННалоговойНакладной(ВыборкаДокументовРК, СообщенияВПроцессеЗаполнения)
	
	Если Не ВыборкаДокументовРК.НалоговаяНакладнаяРеквизитыНомерСтрокиННАктуальны Тогда
		
		СообщенияВПроцессеЗаполнения = СообщенияВПроцессеЗаполнения +
			НСтр("ru='Не установлены номера строк НН (или они не актуальны) в документе налоговой накладной, который корректируется текущим документом Приложение 2.
                  |Автоматическая установка корректируемых номеров строк НН может быть не правильной или не выполнена вовсе.
                  |Необходимо предварительно зайти в налоговую накладную, записать документ, после чего повторить действие!';uk= 'Не встановлені номери рядків ПН (або вони не актуальні) в документі податкової накладної, яка коригується поточним документом Додаток 2.
                  |Автоматичне встановлення номерів рядків ПН може бути не правильним або не виконане взагалі.
                  |Необхідно попередньо зайти в податкову накладну, записати документ, після чого повторити дію!'");		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПолучитьНачальныйНомерГруппы()
	
	НачальныйНомерГруппы = 0;
	
	ПолучитьНачальныйНомерГруппыТабличнойЧасти("Товары");
	ПолучитьНачальныйНомерГруппыТабличнойЧасти("Услуги");
	ПолучитьНачальныйНомерГруппыТабличнойЧасти("ОС");
	ПолучитьНачальныйНомерГруппыТабличнойЧасти("НМА");
	
	НачальныйНомерГруппы = НачальныйНомерГруппы + 1;

КонецПроцедуры

Процедура ПолучитьНачальныйНомерГруппыТабличнойЧасти(ИмяТЧ)
	
	Если ЭтотОбъект[ИмяТЧ].Количество() > 0 Тогда
		ТаблицаНомерГруппы = ЭтотОбъект[ИмяТЧ].Выгрузить(,"НомерГруппы"); 
		
		ТаблицаНомерГруппы.Сортировать("НомерГруппы УБЫВ");
		Если НачальныйНомерГруппы < ТаблицаНомерГруппы[0].НомерГруппы Тогда
			НачальныйНомерГруппы = ТаблицаНомерГруппы[0].НомерГруппы;
		КонецЕсли;		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСоответствиеПричинКорректировкиКодамПричин()
	
	// Каждому способу (причине) корректировки будет соответствовать свой список выбора кодов причин
	СоответствиеПричинКорректировкиКодамПричин = Новый Структура;
	
	// Способ (причина) корректировки "Зміна ціни"
	СписокВыбораКодов = Новый СписокЗначений;
	СписокВыбораКодов.Добавить(101);
	СоответствиеПричинКорректировкиКодамПричин.Вставить("Зміна_ціни", СписокВыбораКодов);
	
	// Способ (причина) корректировки "Зміна кількості"
	СписокВыбораКодов = Новый СписокЗначений;
	СписокВыбораКодов.Добавить(102);
	СоответствиеПричинКорректировкиКодамПричин.Вставить("Зміна_кількості", СписокВыбораКодов);
	
	// Способ (причина) корректировки "Повернення товару або авансових платежів"
	СписокВыбораКодов = Новый СписокЗначений;
	СписокВыбораКодов.Добавить(103);
	СоответствиеПричинКорректировкиКодамПричин.Вставить("Повернення_товару_або_авансових_платежів", СписокВыбораКодов);
	
	// Способ (причина) корректировки "Зміна номенклатури"
	СписокВыбораКодов = Новый СписокЗначений;
	СписокВыбораКодов.Добавить(104);
	СоответствиеПричинКорректировкиКодамПричин.Вставить("Зміна_номенклатури", СписокВыбораКодов);
	
	// Способ (причина) корректировки "Умовний продаж"
	СписокВыбораКодов = Новый СписокЗначений;
	СписокВыбораКодов.Добавить(201);
	СписокВыбораКодов.Добавить(202);
	СоответствиеПричинКорректировкиКодамПричин.Вставить("Умовний_продаж", СписокВыбораКодов);
	
КонецПроцедуры

Процедура УстановитьКодПричиныСтрокиПоУмолчанию(Строка)

	Если Не ПустаяСтрока(Строка.ПричинаКорректировкиНовая) И Не ЗначениеЗаполнено(Строка.КодПричины)  Тогда
		КлючСтруктуры = СтрЗаменить(Строка.ПричинаКорректировкиНовая, " ", "_"); 
		
		СписокВыбораКодов = Неопределено;
		СоответствиеПричинКорректировкиКодамПричин.Свойство(КлючСтруктуры, СписокВыбораКодов);
		Если СписокВыбораКодов <> Неопределено И СписокВыбораКодов.Количество() > 0 Тогда
			Строка.КодПричины = СписокВыбораКодов[0].Значение;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

Функция ВидыОперацийВозврат()

	ВидыОперацийВозврат = Новый Массив;
	ВидыОперацийВозврат.Добавить(Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОблагаемыеОперацииВозврат);
	ВидыОперацийВозврат.Добавить(Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОсвобожденныеОперацииВозврат);
	ВидыОперацийВозврат.Добавить(Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ИтоговаяРозницаОблагаемыеОперацииВозврат);
	ВидыОперацийВозврат.Добавить(Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОблагаемыеОперацииВозврат);
	ВидыОперацийВозврат.Добавить(Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РозницаКонрагентуОсвобожденныеОперацииВозврат);
	
	Возврат ВидыОперацийВозврат;

КонецФункции

Функция ВидыОперацийКорректировка()

	ВидыОперацийКорректировка = Новый Массив;
	ВидыОперацийКорректировка.Добавить(Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОблагаемыеОперацииКорректировка);
	ВидыОперацийКорректировка.Добавить(Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.ОсвобожденныеОперацииКорректировка);
	
	Возврат ВидыОперацийКорректировка;

КонецФункции

Процедура ВыполнитьСортировкуТабЧастей()

	Товары.	Сортировать("НомерСтр");
	Услуги.	Сортировать("НомерСтр");
	ОС.		Сортировать("НомерСтр");
	НМА.	Сортировать("НомерСтр");

КонецПроцедуры

Процедура ВставитьИмяТЧвСообщение(Сообщение, ИмяТЧ, Параметр)

	ПредставлениеТЧ = ПолучитьПредставлениеТЧПоимени(ИмяТЧ);	
	Сообщение = СтрЗаменить(Сообщение, Параметр, ПредставлениеТЧ);

КонецПроцедуры

Функция ПолучитьПредставлениеТЧПоимени(ИмяТЧ)

	ПредставлениеТЧ = "";
	
	Если ИмяТЧ = "Товары" Тогда
		ПредставлениеТЧ = НСтр("ru='Товары';uk= 'Товари'");
	ИначеЕсли ИмяТЧ = "Услуги" Тогда
		ПредставлениеТЧ = НСтр("ru='Услуги';uk= 'Послуги'");
	ИначеЕсли ИмяТЧ = "ОС" Тогда
		ПредставлениеТЧ = НСтр("ru='Основные средства';uk= 'Основні засоби'");
	ИначеЕсли ИмяТЧ = "НМА" Тогда
		ПредставлениеТЧ = НСтр("ru='Нематериальные активы';uk= 'Нематеріальні активи'");
	КонецЕсли;
	
	Возврат ПредставлениеТЧ;

КонецФункции

#КонецОбласти

#КонецЕсли