
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не МониторПортала1СИТС.ДоступноИспользованиеМонитора() Тогда
		ВызватьИсключение НСтр("ru='Использование Монитора Портала ИТС недоступно в текущем режиме работы.';uk='Використання Монітора Порталу ІТС недоступне в поточному режимі роботи.'");
	КонецЕсли;
	
	ОбрабатыватьСобытиеПриОткрытии = Истина;
	
	ПараметрыОбработчикаПриОткрытии = Новый Структура;
	Если Не ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки() Тогда
		ПараметрыОбработчикаПриОткрытии.Вставить("ПодключитьИнтернетПоддержку", Истина);
		Возврат;
	Иначе
		ПараметрыОбработчикаПриОткрытии.Вставить("ПодключитьИнтернетПоддержку", Ложь);
	КонецЕсли;
	
	ОбщиеПараметрыМонитора = МониторПортала1СИТС.ОбщиеПараметрыМонитора();
	Если ОбщиеПараметрыМонитора.ИспользоватьОтображениеПриНачалеРаботы Тогда
		ПоказыватьПриНачалеРаботы = МониторПортала1СИТС.ЗначениеНастройкиПоказыватьПриНачалеРаботы();
	Иначе
		Элементы.ПоказыватьПриНачалеРаботы.Видимость = Ложь;
	КонецЕсли;
	
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("СсылкиСмТакже", НовыйТаблицаСсылкиСмТакже());
	МониторПортала1СИТСПереопределяемый.ПриСозданииФормыМонитора(ЭтотОбъект, ПараметрыСоздания);
	ЗаполнитьСсылкиСмТакже(ПараметрыСоздания.СсылкиСмТакже);
	
	ОчиститьКонтекстФормы(ЭтотОбъект);
	ИнициализироватьОписаниеЗаданий();
	
	НачатьОбновлениеСодержимогоМонитораНаСервере(Ложь, Параметры.ПриНачалеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ОбрабатыватьСобытиеПриОткрытии Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОбработчикаПриОткрытии.ПодключитьИнтернетПоддержку Тогда
		Отказ = Истина;
		МониторПортала1СИТСКлиент.ОткрытьМониторСПодключениемИнтернетПоддержки();
		Возврат;
	КонецЕсли;
	
	ПриНачалеЗадания("СМ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьСостояниеЗаданий");
		ОтключитьОбработчикОжидания("Подключаемый_ОбработатьОжидание");
		Если ЕстьАктивныеЗадания(Задания) Тогда
			ОтменитьВыполнениеВсехЗаданий();
		КонецЕсли;
	КонецЕсли;
	
	МониторПортала1СИТСКлиентПереопределяемый.ПриЗакрытииФормыМонитора(ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИнтернетПоддержкаПодключена" Тогда
		НачатьОбновлениеСодержимогоМонитора();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоказыватьПриНачалеРаботыПриИзменении(Элемент)
	
	НастройкаПоказПриСтартеПриИзмененииНаСервере(ПоказыватьПриНачалеРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСсылкаЖурналРегистрацииНажатие(Элемент)
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", Новый Структура("Пользователь", ИмяПользователя()));
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСсылкаНастройкиПроксиНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаПроксиНаКлиенте", (ВРег(Лев(СтрокаСоединенияИнформационнойБазы(), 5)) = "FILE="));
	ПолучениеФайловИзИнтернетаКлиент.ОткрытьФормуПараметровПроксиСервера(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСсылкаНаписатьВТехподдержкуНажатие(Элемент)
	
	ОтправитьСообщениеВТехПоддержку(
		НСтр("ru='Не удалось получить данные Монитора Портала ИТС.';uk='Не вдалося отримати дані Монітора Порталу ІТС.'")
		+ Символы.ПС
		+ ИнтернетПоддержкаПользователейКлиентСервер.ТекстФорматированногоЗаголовка(
			Элементы.ДекорацияОшибкаЗаголовок.Заголовок)
		+ Символы.ПС
		+ ПодробноеОписаниеОшибкиДляТехПоддержки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИПППродуктаНеОказываетсяОписаниеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОтправитьСообщениеВТехПоддержку(НСтр("ru='Интернет-поддержка программного продукта не оказывается.';uk='Інтернет-підтримка програмного продукту не надається.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДекорацияНажатие(Элемент)
	
	МониторПортала1СИТСКлиентПереопределяемый.ПриНажатииДекорацииВФормеМонитора(
		ЭтотОбъект,
		Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьНавигационнуюСсылку(
	Элемент,
	НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)
	
	МониторПортала1СИТСКлиентПереопределяемый.ОбработатьНавигационнуюСсылкуВФормеМонитора(
		ЭтотОбъект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

#Область БлокШапка

&НаКлиенте
Процедура ЛогинНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтернетПоддержкаПользователейКлиент.ОткрытьЛичныйКабинетПользователя();
	
КонецПроцедуры

#КонецОбласти

#Область БлокУсловияСопровожденияВыполнены

&НаКлиенте
Процедура ДекорацияУсловияВыполненыДеталиНажатие(Элемент)
	
	ДекорацияУсловияВыполненыДеталиНажатиеНаСервере();
	ПриНачалеЗадания("СВУ");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКакОформитьДоговорИТСУсловияВыполненыСсылкаНажатие(Элемент)
	
	Элементы.ДекорацияКакОформитьДоговорИТСУсловияВыполненыИнструкция.Видимость =
		Не Элементы.ДекорацияКакОформитьДоговорИТСУсловияВыполненыИнструкция.Видимость;
	Элементы.ДекорацияКакОформитьДоговорИТСУсловияВыполненыСсылка.Заголовок =
		ЗаголовокГруппы(
			ЗаголовокКакПродлитьДействиеДоговора(),
			Элементы.ДекорацияКакОформитьДоговорИТСУсловияВыполненыИнструкция.Видимость);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКакАктивироватьСервисСопровожденияУсловияВыполненыСсылкаНажатие(Элемент)
	
	Элементы.ДекорацияКакАктивироватьСервисСопровожденияУсловияВыполненыИнструкция.Видимость =
		Не Элементы.ДекорацияКакАктивироватьСервисСопровожденияУсловияВыполненыИнструкция.Видимость;
	Элементы.ДекорацияКакАктивироватьСервисСопровожденияУсловияВыполненыСсылка.Заголовок =
		ЗаголовокГруппы(
			ЗаголовокКакПродлитьДействиеСервиса(),
			Элементы.ДекорацияКакАктивироватьСервисСопровожденияУсловияВыполненыИнструкция.Видимость);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКакОформитьДоговорИТСУсловияВыполненыИнструкцияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНавигационнуюСсылку(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКакАктивироватьСервисСопровожденияУсловияВыполненыИнструкцияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНавигационнуюСсылку(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область БлокНеВыполненыУсловияСопровождения

&НаКлиенте
Процедура ДекорацияПравилаСопровожденияППСсылкаНажатие(Элемент)
	
	Элементы.ГруппаНеВыполненыУсловияСопровожденияДетали.Видимость =
		Не Элементы.ГруппаНеВыполненыУсловияСопровожденияДетали.Видимость;
	Элементы.ДекорацияПравилаСопровожденияППСсылка.Заголовок =
		ЗаголовокГруппы(ЗаголовокПравилаСопровожденияПП(), Элементы.ГруппаНеВыполненыУсловияСопровожденияДетали.Видимость);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКакЗарегистрироватьПродуктСсылкаНажатие(Элемент)
	
	ИнтернетПоддержкаПользователейКлиент.ОткрытьСтраницуОфициальнаяПоддержка();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКакЗаключитьДоговорИТССсылкаНажатие(Элемент)
	
	Элементы.ДекорацияКакЗаключитьДоговорИТСИнструкция.Видимость =
		Не Элементы.ДекорацияКакЗаключитьДоговорИТСИнструкция.Видимость;
	Элементы.ДекорацияКакЗаключитьДоговорИТССсылка.Заголовок =
		ЗаголовокГруппы(
			ЗаголовокКакОформитьДоговорИТС(),
			Элементы.ДекорацияКакЗаключитьДоговорИТСИнструкция.Видимость);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКакАктивироватьСервисСопровожденияСсылкаНажатие(Элемент)
	
	Элементы.ДекорацияКакАктивироватьСервисСопровожденияИнструкция.Видимость =
		Не Элементы.ДекорацияКакАктивироватьСервисСопровожденияИнструкция.Видимость;
	Элементы.ДекорацияКакАктивироватьСервисСопровожденияСсылка.Заголовок =
		ЗаголовокГруппы(
			ЗаголовокКакАктивироватьСервисСопровождения(),
			Элементы.ДекорацияКакАктивироватьСервисСопровожденияИнструкция.Видимость);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКакЗаключитьДоговорИТСИнструкцияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНавигационнуюСсылку(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКакАктивироватьСервисСопровожденияИнструкцияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНавигационнуюСсылку(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДоговорИТССсылкаДеталиНажатие(Элемент)
	
	ДекорацияДоговорИТССсылкаДеталиНажатиеНаСервере();
	ПриНачалеЗадания("ИТСНУ");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСервисыСопровожденияДеталиСсылкаНажатие(Элемент)
	
	ДекорацияСервисыСопровожденияДеталиСсылкаНажатиеНаСервере();
	ПриНачалеЗадания("СервисыСопровожденияНевыполненныеУсловия");
	
КонецПроцедуры

#КонецОбласти

#Область БлокДоговоры1С

&НаКлиенте
Процедура ДекорацияКакПродлитьСервис1ССсылкаНажатие(Элемент)
	
	Элементы.ДекорацияКакПродлитьСервис1СИнструкция.Видимость =
		Не Элементы.ДекорацияКакПродлитьСервис1СИнструкция.Видимость;
	Элементы.ДекорацияКакПродлитьСервис1ССсылка.Заголовок =
		ЗаголовокГруппы(
			ЗаголовокКакПродлитьСрокДействияСервиса(),
			Элементы.ДекорацияКакПродлитьСервис1СИнструкция.Видимость);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСервисы1СДеталиСсылкаНажатие(Элемент)
	
	ДекорацияДоговорыНаСервисыДеталиСсылкаНажатиеНаСервере();
	ПриНачалеЗадания("Сервисы1С");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКакПродлитьСервис1СИнструкцияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНавигационнуюСсылку(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКакПодключитьСервис1ССсылкаНажатие(Элемент)
	
	Элементы.ДекорацияКакПодключитьСервис1СИнструкция.Видимость =
		Не Элементы.ДекорацияКакПодключитьСервис1СИнструкция.Видимость;
	Элементы.ДекорацияКакПодключитьСервис1ССсылка.Заголовок =
		ЗаголовокГруппы(
			ЗаголовокКакОформитьДоговорыНаСервисы(),
			Элементы.ДекорацияКакПодключитьСервис1СИнструкция.Видимость);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСервисы1СПояснениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНавигационнуюСсылку(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКакПодключитьСервис1СИнструкцияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНавигационнуюСсылку(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область БлокОбновлениеПрограммы

&НаКлиенте
Процедура ДекорацияИнформацияОбОбновленииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНавигационнуюСсылку(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУстановитьОбновлениеНажатие(Элемент)
	
	МодульПолучениеОбновленийПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеОбновленийПрограммыКлиент");
	МодульПолучениеОбновленийПрограммыКлиент.ОбновитьПрограмму();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбновлениеПрограммыДеталиСсылкаНажатие(Элемент)
	
	ДекорацияОбновлениеПрограммыДеталиСсылкаНажатиеНаСервере();
	ПриНачалеЗадания("ИнформацияОбОбновлении");
	
КонецПроцедуры

#КонецОбласти

#Область СмТакже

&НаКлиенте
Процедура ДекорацияСмТакжеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНавигационнуюСсылку(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПовторитьПопыткуПодключения(Команда)
	
	НачатьОбновлениеСодержимогоМонитора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСодержимое(Команда)
	
	НачатьОбновлениеСодержимогоМонитора();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьКоманду(Команда)
	
	МониторПортала1СИТСКлиентПереопределяемый.ОбработатьКомандуВФормеМонитора(
		ЭтотОбъект,
		Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

&НаСервереБезКонтекста
Процедура НастройкаПоказПриСтартеПриИзмененииНаСервере(Знач НастройкаПоказПриСтарте)
	
	Если НастройкаПоказПриСтарте = 0 Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ИнтернетПоддержкаПользователей",
			"ВсегдаПоказыватьПриСтартеПрограммы",
			Истина);
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ИнтернетПоддержкаПользователей",
			"ПоказПриСтартеТолькоПриИзменении",
			Ложь);
	ИначеЕсли НастройкаПоказПриСтарте = 1 Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ИнтернетПоддержкаПользователей",
			"ВсегдаПоказыватьПриСтартеПрограммы",
			Истина);
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ИнтернетПоддержкаПользователей",
			"ПоказПриСтартеТолькоПриИзменении",
			Истина);
	Иначе
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ИнтернетПоддержкаПользователей",
			"ВсегдаПоказыватьПриСтартеПрограммы",
			Ложь);
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ИнтернетПоддержкаПользователей",
			"ПоказПриСтартеТолькоПриИзменении",
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСообщениеВТехПоддержку(ТекстСообщения)
	
	ИнтернетПоддержкаПользователейКлиент.ОтправитьСообщениеВСлужбуТехническойПоддержки(
		НСтр("ru='Интернет-поддержка. Монитор Портала ИТС';uk='Інтернет-підтримка. Монітор Порталу ІТС'"),
		ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНавигационнуюСсылку(Элемент, Ссылка, СтандартнаяОбработка)
	
	СсылкаНРег = НРег(СокрЛП(Ссылка));
	Если СтрНачинаетсяС(СсылкаНРег, "action:openportal") Тогда
		
		СтандартнаяОбработка = Ложь;
		ИнтернетПоддержкаПользователейКлиент.ОткрытьГлавнуюСтраницуПортала();
		
	ИначеЕсли СтрНачинаетсяС(СсылкаНРег, "action:profile") Тогда
		
		СтандартнаяОбработка = Ложь;
		ИнтернетПоддержкаПользователейКлиент.ОткрытьЛичныйКабинетПользователя();
		
	ИначеЕсли СтрНачинаетсяС(СсылкаНРег, "action:techsuppmonitorproblem") Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстСообщения = НСтр("ru='При использовании Монитора Портала ИТС возникли следующие проблемы:
            |<Опишите проблемы>'
            |;uk='При використанні Монітора Порталу ІТС виникли наступні проблеми:
            |<Опишіть проблеми>'");
		ОтправитьСообщениеВТехПоддержку(ТекстСообщения);
		
	ИначеЕсли СтрНачинаетсяС(СсылкаНРег, "http://") Или СтрНачинаетсяС(СсылкаНРег, "https://") Тогда
		
		СтандартнаяОбработка = Ложь;
		ИнтернетПоддержкаПользователейКлиент.ОткрытьВебСтраницуСДополнительнымиПараметрами(Ссылка);
		
	ИначеЕсли СтрНачинаетсяС(СсылкаНРег, "mailto:") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(Ссылка);
		
	Иначе
		
		МониторПортала1СИТСКлиентПереопределяемый.ОбработатьНавигационнуюСсылкуВФормеМонитора(
			ЭтотОбъект,
			Элемент,
			Ссылка,
			СтандартнаяОбработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МаркированныйСписокСПериодами(ДанныеСписка, СписокСервисов1С)
	
	
	Если ДанныеСписка = Неопределено
		Или ДанныеСписка.serviceContracts = Неопределено
		Или ДанныеСписка.serviceContracts.Количество() = 0 Тогда
		Возврат НСтр("ru='<Нет данных>';uk='<Немає даних>'");
	КонецЕсли;
	
	СписокДоговоров = ДанныеСписка.serviceContracts;
	
	ТекДата       = ТекущаяДата();
	ТекДатаСеанса = ТекущаяДатаСеанса();
	Смещение = (ТекДатаСеанса - ТекДата);
	
	ЧастиСтроки = Новый Массив;
	ЧастиСтроки.Добавить("<body>");
	Для ИндексЭлемента = 0 По СписокДоговоров.ВГраница() Цикл
		
		ЭлементСписка = СписокДоговоров[ИндексЭлемента];
		ЧастиСтроки.Добавить(
			?(ИндексЭлемента > 0, "<br />", "")
			+ "● "
			+ ИнтернетПоддержкаПользователейКлиентСервер.НормализованнаяСтрокаXML(ЭлементСписка.name)
			+ " ");
		
		// Приведение времени сервера ко времени сеанса.
		ТекущийПериод = ЭлементСписка.period;
		ДатаОт = (ТекущийПериод.from + Смещение);
		ДатаПо = (ТекущийПериод.to + Смещение);
		ЧастиСтроки.Добавить(
			?(СписокСервисов1С И (ДатаОт < ТекДатаСеанса),
				"",
				НСтр("ru='с';uk='з'") + " " + Формат(ДатаОт, "ДЛФ=D") + " ")
			+ ?(СписокСервисов1С, НСтр("ru='до';uk='до'"), НСтр("ru='по';uk='по'"))
			+ " "
			+ ?(ТекущийПериод.warning,
				"<span style=""color:#FF0000"">" + Формат(ДатаПо, "ДЛФ=D") + "</span>",
				Формат(ДатаПо, "ДЛФ=D")));
		
	КонецЦикла;
	
	ЧастиСтроки.Добавить("</body>");
	Возврат ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(СтрСоединить(ЧастиСтроки));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МаркированныйФорматированныйСписокСсылокСмТакже(ТаблицаСсылок, НомерКолонки)
	
	СтрокиТаблицы = ТаблицаСсылок.НайтиСтроки(Новый Структура("Колонка", НомерКолонки));
	Если СтрокиТаблицы.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ЧастиСтроки = Новый Массив;
	ЧастиСтроки.Добавить("<body>");
	Для Итератор = 0 По СтрокиТаблицы.ВГраница() Цикл
		СтрокаТаблицы = СтрокиТаблицы[Итератор];
		ЧастиСтроки.Добавить("<span style=""color: #333333"">");
		ЧастиСтроки.Добавить(
			?(Итератор > 0, "<br />", "")
			+ "&nbsp;&nbsp;●&nbsp;"
			+ "<a href=""" + СтрокаТаблицы.Ссылка + """>"
			+ ИнтернетПоддержкаПользователейКлиентСервер.НормализованнаяСтрокаXML(СтрокаТаблицы.Заголовок)
			+ "</a>");
		ЧастиСтроки.Добавить("</span>");
	КонецЦикла;
	
	ЧастиСтроки.Добавить("</body>");
	Возврат ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(СтрСоединить(ЧастиСтроки));
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗаголовокИзМакета(ЭлементДекорация, ИмяМакета)
	
	Если ТипЗнч(ЭлементДекорация.Заголовок) <> Тип("ФорматированнаяСтрока") Тогда
		ЭлементДекорация.Заголовок = ТекстИнструкцииИзМакета(ИмяМакета, Домен);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьКонтекстФормы(Форма)
	
	ПодробноеОписаниеОшибкиДляТехПоддержки = "";
	
	Элементы = Форма.Элементы;
	Элементы.ДекорацияДоговорИТССписокНУ.Заголовок                             = "";
	Элементы.ДекорацияСервисыСопровожденияСписокНевыполненныеУсловия.Заголовок = "";
	
	Элементы.ДекорацияДоговорИТССписок.Заголовок           = "";
	Элементы.ДекорацияСервисыСопровожденияСписок.Заголовок = "";
	
	Элементы.ДекорацияСервисы1ССписок.Заголовок = "";
	
	ОчиститьТекстыИнструкций(Форма);
	
	ДанныеМонитора = Неопределено;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТекстыИнструкций(Форма)
	
	Элементы = Форма.Элементы;
	Элементы.ДекорацияКакЗаключитьДоговорИТСИнструкция.Заголовок                = "";
	Элементы.ДекорацияКакАктивироватьСервисСопровожденияИнструкция.Заголовок    = "";
	Элементы.ДекорацияКакОформитьДоговорИТСУсловияВыполненыИнструкция.Заголовок = "";
	Элементы.ДекорацияКакПодключитьСервис1СИнструкция.Заголовок            = "";
	Элементы.ДекорацияКакПродлитьСервис1СИнструкция.Заголовок = "";
	Элементы.ДекорацияКакАктивироватьСервисСопровожденияУсловияВыполненыИнструкция.Заголовок = "";
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокГруппы(Заголовок, Развернута)
	Возврат Заголовок + " " + ?(Развернута, "▼", "►");
КонецФункции

&НаСервереБезКонтекста
Функция ТекстИнструкцииИзМакета(ИмяМакета, Домен)
	
	Макет = Обработки.МониторПортала1СИТС.ПолучитьМакет(ИмяМакета + "_EU");
	ФДок = Новый ФорматированныйДокумент;
	ФДок.УстановитьHTML(Макет.ПолучитьТекст(), Новый Структура);
	Возврат ФДок.ПолучитьФорматированнуюСтроку();
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьОтпечатокДанныхМонитора(Логин, ДанныеМонитора)
	
	Если ДанныеМонитора.supportConditionsImplStatus <> Неопределено
		И ДанныеМонитора.supportConditionsImplStatus.blockStatus <> "200"
		И ДанныеМонитора.supportConditionsImplStatus.blockStatus <> 200
		Или ДанныеМонитора.serviceContractsStatus <> Неопределено
		И ДанныеМонитора.serviceContractsStatus.blockStatus <> "200"
		И ДанныеМонитора.serviceContractsStatus.blockStatus <> 200
		Или ДанныеМонитора.updateInfo <> Неопределено
		И ДанныеМонитора.updateInfo.blockStatus <> "200"
		И ДанныеМонитора.updateInfo.blockStatus <> 200 Тогда
		// При ошибке получения данных не сохранять отпечаток.
		Возврат;
	КонецЕсли;
	
	МониторПортала1СИТС.СохранитьОтпечатокДанныхМонитора(Логин, ДанныеМонитора);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьОжидание()
	
	МониторПортала1СИТСКлиентПереопределяемый.ПриВыполненииОбработчикаОжиданияВФормеМонитора(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПолученияДанных

&НаСервере
Процедура ИнициализироватьОписаниеЗаданий()
	
	ИдентификаторЭтойФормы = ЭтотОбъект.УникальныйИдентификатор;
	
	НоваяСтрока = Задания.Добавить();
	НоваяСтрока.Имя             = "СМ"; // Содержимое монитора.
	НоваяСтрока.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторЭтойФормы);
	
	НоваяСтрока = Задания.Добавить();
	НоваяСтрока.Имя             = "СВУ"; // Содержимое блока выполненных условий.
	НоваяСтрока.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторЭтойФормы);
	
	НоваяСтрока = Задания.Добавить();
	НоваяСтрока.Имя             = "ИТСНУ"; // Договор ИТС в блоке невыполненных условий сопровождения.
	НоваяСтрока.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторЭтойФормы);
	
	НоваяСтрока = Задания.Добавить();
	НоваяСтрока.Имя             = "СервисыСопровожденияНевыполненныеУсловия"; // Сервисы сопровождения в блоке невыполненных условий сопровождения.
	НоваяСтрока.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторЭтойФормы);
	
	НоваяСтрока = Задания.Добавить();
	НоваяСтрока.Имя             = "Сервисы1С"; // Сервисы 1С.
	НоваяСтрока.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторЭтойФормы);
	
	НоваяСтрока = Задания.Добавить();
	НоваяСтрока.Имя             = "ИнформацияОбОбновлении"; // Обновление программы.
	НоваяСтрока.АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено, ИдентификаторЭтойФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНачалеЗадания(ИмяЗадания)
	
	Если ЕстьАктивныеЗадания(Задания, ИмяЗадания) Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьСостояниеЗаданий",
			ПараметрыОбработчикаОжидания.ТекущийИнтервал,
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьСостояниеЗаданий()
	
	АктивныеЗадания = Новый Массив;
	Для Каждого СтрокаЗадания Из Задания Цикл
		Если ЗначениеЗаполнено(СтрокаЗадания.Идентификатор) Тогда
			АктивныеЗадания.Добавить(Новый Структура("Имя, Идентификатор", СтрокаЗадания.Имя, СтрокаЗадания.Идентификатор));
		КонецЕсли;
	КонецЦикла;
	
	Завершенные = ЗавершенныеЗадания(АктивныеЗадания);
	Если Завершенные.Количество() > 0 Тогда
		
		// Очистить идентификаторы заданий.
		ПустойИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		Для Каждого Задание Из Завершенные Цикл
			ОписательЗадания(Задания, Задание.Имя).Идентификатор = ПустойИдентификатор;
		КонецЦикла;
		
		// Обработать завершение заданий.
		ПриЗавершенииЗаданий(Завершенные);
		
	КонецЕсли;
	
	
	Если Завершенные.Количество() < АктивныеЗадания.Количество() Тогда
		// Завершены не все задания, перейти на новую итерацию проверки состояния.
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьСостояниеЗаданий",
			ПараметрыОбработчикаОжидания.ТекущийИнтервал,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписательЗадания(ТаблицаЗаданий, Имя)
	
	Для Каждого СтрокаЗадания Из ТаблицаЗаданий Цикл
		Если СтрокаЗадания.Имя = Имя Тогда
			Возврат СтрокаЗадания;
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Неизвестное имя задания (%1).';uk='Невідоме ім''я завдання (%1).'"),
		Имя);
	
КонецФункции

&НаСервере
Процедура ОтменитьВыполнениеВсехЗаданий()
	
	ПустойИдентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
	Для Каждого СтрокаЗадания Из Задания Цикл
		Если ЗначениеЗаполнено(СтрокаЗадания.Идентификатор) Тогда
			ДлительныеОперации.ОтменитьВыполнениеЗадания(СтрокаЗадания.Идентификатор);
			СтрокаЗадания.Идентификатор = ПустойИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьЗадание(Имя)
	
	Для Каждого СтрокаЗадания Из Задания Цикл
		Если СтрокаЗадания.Имя = Имя Тогда
			Если ЗначениеЗаполнено(СтрокаЗадания.Идентификатор) Тогда
				ДлительныеОперации.ОтменитьВыполнениеЗадания(СтрокаЗадания.Идентификатор);
				СтрокаЗадания.Идентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьАктивныеЗадания(ТаблицаЗаданий, ИмяЗадания = Неопределено)
	
	Для Каждого СтрокаЗадания Из ТаблицаЗаданий Цикл
		Если ЗначениеЗаполнено(СтрокаЗадания.Идентификатор)
			И (ИмяЗадания = Неопределено
			Или СтрокаЗадания.Имя = ИмяЗадания) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗавершенныеЗадания(Знач АктивныеЗадания)
	
	Результат = Новый Массив;
	
	Для Каждого ТекущееЗадание Из АктивныеЗадания Цикл
		
		Попытка
			
			Выполнено = ДлительныеОперации.ЗаданиеВыполнено(ТекущееЗадание.Идентификатор);
			Если Не Выполнено Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеВыполненного = Новый Структура;
			ОписаниеВыполненного.Вставить("Имя"               , ТекущееЗадание.Имя);
			ОписаниеВыполненного.Вставить("СообщениеОбОшибке" , "");
			ОписаниеВыполненного.Вставить("ИнформацияОбОшибке", "");
			Результат.Добавить(ОписаниеВыполненного);
			
		Исключение
			
			ИнформацияОшибка = ИнформацияОбОшибке();
			
			ОписаниеВыполненного = Новый Структура;
			ОписаниеВыполненного.Вставить("Имя"               , ТекущееЗадание.Имя);
			ОписаниеВыполненного.Вставить("СообщениеОбОшибке" , КраткоеПредставлениеОшибки(ИнформацияОшибка));
			ОписаниеВыполненного.Вставить("ИнформацияОбОшибке",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка при выполнении задания.
                        |%1'
                        |;uk='Помилка при виконанні завдання.
                        |%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОшибка)));
			
			МониторПортала1СИТС.ЗаписатьОшибкуВЖурналРегистрации(ОписаниеВыполненного.ИнформацияОбОшибке);
			Результат.Добавить(ОписаниеВыполненного);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПриЗавершенииЗаданий(Знач ЗавершенныеЗадания)
	
	Для Каждого ТекущееЗадание Из ЗавершенныеЗадания Цикл
		
		Если ТекущееЗадание.Имя = "СМ" Тогда
			Если ПустаяСтрока(ТекущееЗадание.СообщениеОбОшибке) Тогда
				ПриПолученииСодержимогоМонитора();
			Иначе
				ОтобразитьСостояниеОшибка(
					ТекущееЗадание.СообщениеОбОшибке,
					ТекущееЗадание.ИнформацияОбОшибке,
					Ложь);
			КонецЕсли;
		ИначеЕсли ТекущееЗадание.Имя = "СВУ" Тогда
			Если ПустаяСтрока(ТекущееЗадание.СообщениеОбОшибке) Тогда
				ПриПолученииДеталиУсловияВыполнены();
			Иначе
				ОтобразитьОшибкаПолученияДеталиУсловияВыполнены(ТекущееЗадание.СообщениеОбОшибке);
			КонецЕсли;
		ИначеЕсли ТекущееЗадание.Имя = "ИТСНУ" Тогда
			Если ПустаяСтрока(ТекущееЗадание.СообщениеОбОшибке) Тогда
				ПриПолученииДеталиИТСНУ();
			Иначе
				ОтобразитьОшибкаПолученияДеталиИТСНУ(ТекущееЗадание.СообщениеОбОшибке);
			КонецЕсли;
		ИначеЕсли ТекущееЗадание.Имя = "СервисыСопровожденияНевыполненныеУсловия" Тогда
			Если ПустаяСтрока(ТекущееЗадание.СообщениеОбОшибке) Тогда
				ПриПолученииДеталиСервисыСопровожденияНевыполненныеУсловия();
			Иначе
				ОтобразитьОшибкаПолученияДеталиСервисыСопровожденияНевыполненныеУсловия(ТекущееЗадание.СообщениеОбОшибке);
			КонецЕсли;
		ИначеЕсли ТекущееЗадание.Имя = "Сервисы1С" Тогда
			Если ПустаяСтрока(ТекущееЗадание.СообщениеОбОшибке) Тогда
				ПриПолученииДеталиСервисы1С();
			Иначе
				ОтобразитьОшибкаПолученияДеталиСервисы1С(ТекущееЗадание.СообщениеОбОшибке);
			КонецЕсли;
		ИначеЕсли ТекущееЗадание.Имя = "ИнформацияОбОбновлении" Тогда
			Если ПустаяСтрока(ТекущееЗадание.СообщениеОбОшибке) Тогда
				ПриПолученииДеталиИнформацияОбОбновлении();
			Иначе
				ОтобразитьОшибкаПолученияДеталиИнформацияОбОбновлении(ТекущееЗадание.СообщениеОбОшибке);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Главное

&НаСервере
Процедура ОтобразитьСодержимоеМонитора(РезультатОперацииСервиса)
	
	// Видимость была отключена в НачатьОбновлениеСодержимогоМонитораНаСервере().
	Элементы.СтраницаСодержимое.Видимость = Истина;
	
	ДанныеМонитора = РезультатОперацииСервиса.Данные;
	Логин = РезультатОперацииСервиса.Логин;
	
	Если Домен <> РезультатОперацииСервиса.Домен Тогда
		Домен = РезультатОперацииСервиса.Домен;
		// При смене домена тексты инструкций должны быть очищены
		// и заполнены заново, т.к. зависят от домена.
		ОчиститьТекстыИнструкций(ЭтотОбъект);
	КонецЕсли;
	
	СохранитьОтпечатокДанныхМонитора(Логин, ДанныеМонитора);
	
	ОтобразитьБлокШапка();
	
	Если ДанныеМонитора.supportConditionsImplStatus.blockStatus <> "200"
		И ДанныеМонитора.supportConditionsImplStatus.blockStatus <> 200 Тогда
		Элементы.ГруппаУсловияСопровожденияОшибка.Видимость      = Истина;
		Элементы.ГруппаУсловияСопровожденияВыполнены.Видимость   = Ложь;
		Элементы.ГруппаНеВыполненыУсловияСопровождения.Видимость = Ложь;
	ИначеЕсли ДанныеМонитора.supportConditionsImplStatus.status = "NOT_COMPLIED" Тогда
		ОтобразитьБлокНеВыполненыУсловияСопровождения();
	Иначе
		ОтобразитьБлокУсловияСопровожденияВыполнены();
	КонецЕсли;
	
	Если ДанныеМонитора.serviceContractsStatus.blockStatus <> "200"
		И ДанныеМонитора.serviceContractsStatus.blockStatus <> 200 Тогда
		Элементы.ДекорацияКартинкаБлокДоговорыНаСервисы.Картинка = БиблиотекаКартинок.ИнтернетПоддержкаВнимание;
		Элементы.ДекорацияСервисы1ССообщениеОбОшибке.Видимость   = Истина;
		Элементы.ГруппаСервисы1ССодержимое.Видимость             = Ложь;
	Иначе
		ОтобразитьБлокДоговорыНаСервисы();
	КонецЕсли;
	
	Если ДанныеМонитора.updateInfo.blockStatus <> "200" И ДанныеМонитора.updateInfo.blockStatus <> 200 Тогда
		Элементы.ДекорацияСтатусБлокаОбновлениеПрограммы.Картинка = БиблиотекаКартинок.ИнтернетПоддержкаВнимание;
		Элементы.ДекорацияОбновлениеСообщениеОбОшибке.Видимость   = Истина;
		Элементы.ГруппаОбновлениеСодержимое.Видимость             = Ложь;
	Иначе
		ОтобразитьБлокОбновлениеПрограммы();
	КонецЕсли;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСодержимое;
	
	МониторПортала1СИТСПереопределяемый.ОтобразитьДополнительныеДанныеМонитора(
		ЭтотОбъект,
		РезультатОперацииСервиса.ДополнительныеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСостояниеОшибка(КраткоеОписаниеОшибки, ПодробноеОписаниеОшибки, ОшибкаСоединения = Истина)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОшибка;
	Если ОшибкаСоединения Тогда
		Элементы.ДекорацияОшибкаЗаголовок.Заголовок = НСтр("ru='Не удалось подключиться к сервису';uk='Не вдалося підключитися до сервісу'");
		Элементы.ДекорацияРекомендацияСетеваяОшибка.Видимость = Истина;
		Элементы.ДекорацияКраткоеОписаниеОшибки.Заголовок = КраткоеОписаниеОшибки;
	Иначе
		Элементы.ДекорацияОшибкаЗаголовок.Заголовок = НСтр("ru='Ошибка';uk='Помилка'");
		Элементы.ДекорацияРекомендацияСетеваяОшибка.Видимость = Ложь;
		Элементы.ДекорацияКраткоеОписаниеОшибки.Заголовок =
			НСтр("ru='Возникла ошибка при получении информации из сервиса Монитора Портала ИТС:';uk='Виникла помилка при отриманні інформації з сервісу Монітора Порталу ІТС:'")
			+ Символы.ПС
			+ КраткоеОписаниеОшибки;
	КонецЕсли;
	
	Элементы.ДекорацияСсылкаЖурналРегистрации.Видимость =
		ПравоДоступа("Просмотр", Метаданные.Обработки.ЖурналРегистрации);
	
	Элементы.ДекорацияСсылкаНастройкиПрокси.Видимость =
		ОшибкаСоединения
		И (ОбщегоНазначения.ИнформационнаяБазаФайловая()
		Или ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.ПараметрыПроксиСервера));
	
	ПодробноеОписаниеОшибкиДляТехПоддержки = ПодробноеОписаниеОшибки;
	Элементы.ПовторитьПопыткуПодключения.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСостояниеИПППродуктаНеОказывается()
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПоддержкаПродуктаНеОказывается;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОбновлениеСодержимогоМонитора()
	
	ОчиститьКонтекстФормы(ЭтотОбъект);
	ОтключитьОбработчикОжидания("Подключаемый_ОбработатьОжидание");
	МониторПортала1СИТСКлиентПереопределяемый.ПередПолучениемДанныхМонитора(ЭтотОбъект);
	НачатьОбновлениеСодержимогоМонитораНаСервере();
	ПриНачалеЗадания("СМ");
	
КонецПроцедуры

&НаСервере
Процедура НачатьОбновлениеСодержимогоМонитораНаСервере(ОжидатьЗавершения = Истина, ТолькоФоновыйРежим = Истина)
	
	МониторПортала1СИТС.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru='Подготовка к получению данных Монитора';uk='Підготовка до отримання даних Монітора'"));
	
	ОтменитьВыполнениеВсехЗаданий();
	
	// Исключить отображение полосы прокрутки в форме.
	Элементы.СтраницаСодержимое.Видимость = Ложь;
	
	Описатель = ОписательЗадания(Задания, "СМ");
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	Если Не ОжидатьЗавершения Тогда
		ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
	КонецЕсли;
	
	ПараметрыВыполненияВФоне.КлючФоновогоЗадания = "ПолучениеИнформацииМонитора" + Строка(Новый УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.АдресРезультата     = Описатель.АдресРезультата;
	ПараметрыВыполненияВФоне.ЗапуститьВФоне      = ТолькоФоновыйРежим;
	
	ПараметрыПолученияДополнительныхДанных = Неопределено;
	МониторПортала1СИТСПереопределяемый.ПередПолучениемДанныхМонитора(
		ЭтотОбъект,
		ПараметрыПолученияДополнительныхДанных);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ПараметрыПолученияДополнительныхДанных", ПараметрыПолученияДополнительныхДанных);
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.МониторПортала1СИТС.ПолучитьДанныеМонитора",
		ПараметрыЗадания,
		ПараметрыВыполненияВФоне);
	
	Если РезультатВыполнения.Статус = "Выполняется" Тогда
		
		Описатель.Идентификатор = РезультатВыполнения.ИдентификаторЗадания;
		ОтобразитьСостояниеДлительнаяОперация();
		
	ИначеЕсли РезультатВыполнения.Статус = "Выполнено" Тогда
		
		ПриПолученииСодержимогоМонитора();
		
	ИначеЕсли РезультатВыполнения.Статус = "Отменено" Тогда
		
		МониторПортала1СИТС.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru='Не удалось отобразить данные Монитора. Задание получение данных Монитора отменено администратором.';uk='Не вдалося відобразити дані Монітора. Завдання отримання даних Монітора скасовано адміністратором.'"));
		ОтобразитьСостояниеОшибка(НСтр("ru='Задание отменено администратором.';uk='Завдання скасовано адміністратором.'"), "", Ложь);
		
	Иначе
		
		// Ошибка.
		СообщениеЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось получить данные Монитора.
                |%1'
                |;uk='Не вдалося отримати дані Монітора.
                |%1'"),
			РезультатВыполнения.ПодробноеПредставлениеОшибки);
		МониторПортала1СИТС.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		ОтобразитьСостояниеОшибка(
			РезультатВыполнения.КраткоеПредставлениеОшибки,
			РезультатВыполнения.ПодробноеПредставлениеОшибки,
			Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСостояниеДлительнаяОперация()
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДлительнаяОперация;
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииСодержимогоМонитора()
	
	Описатель = ОписательЗадания(Задания, "СМ");
	РезультатОперацииСервиса = ПолучитьИзВременногоХранилища(Описатель.АдресРезультата);
	Если ПустаяСтрока(РезультатОперацииСервиса.ИмяОшибки) Тогда
		
		ДанныеМонитора = РезультатОперацииСервиса.Данные;
		Если Не ДанныеМонитора.authResult.authenticated Тогда
			
			СообщениеЖурнала = НСтр("ru='Не удалось отобразить содержимое Монитора.
                |Некорректные данные аутентификации пользователя Интернет-поддержки.'
                |;uk='Не вдалося відобразити вміст Монітора.
                |Некоректні дані автентифікації користувача Інтернет-підтримки.'");
			МониторПортала1СИТС.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
			ОтобразитьСостояниеОшибка(
				НСтр("ru='Некорректные данные аутентификации пользователя Интернет-поддержки.
                    |Подключите Интернет-поддержку пользователей в настройках программы.'
                    |;uk='Некоректні дані аутентифікації користувача Інтернет-підтримки.
                    |Підключіть Інтернет-підтримку в настройках програми.'"),
				СообщениеЖурнала,
				Ложь);
			
		ИначеЕсли ДанныеМонитора.programName = Неопределено Тогда
			
			ОтобразитьСостояниеИПППродуктаНеОказывается();
			
		Иначе
			
			Попытка
				ОтобразитьСодержимоеМонитора(РезультатОперацииСервиса);
			Исключение
				ИнформацияОшибка = ИнформацияОбОшибке();
				СообщениеЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не удалось отобразить содержимое Монитора.
                        |%1'
                        |;uk='Не вдалося відобразити вміст Монітора.
                        |%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОшибка));
				МониторПортала1СИТС.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
				ОтобразитьСостояниеОшибка(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Не удалось отобразить содержимое Монитора.
                            |%1'
                            |;uk='Не вдалося відобразити вміст Монітора.
                            |%1'"),
						КраткоеПредставлениеОшибки(ИнформацияОшибка)),
					СообщениеЖурнала,
					Ложь);
				Возврат;
			КонецПопытки;
			
			ОписаниеОшибкиДанных = МониторПортала1СИТС.ОписаниеОшибкиПолученияДанныхМонитора(
				РезультатОперацииСервиса.Данные);
			Если Не ПустаяСтрока(ОписаниеОшибкиДанных) Тогда
				МониторПортала1СИТС.ЗаписатьПредупреждениеВЖурналРегистрации(
					НСтр("ru='Не удалось получить часть данных Монитора.';uk='Не вдалося отримати частину даних Монітора.'")
					+ Символы.ПС
					+ ОписаниеОшибкиДанных);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли РезультатОперацииСервиса.ИмяОшибки = "ОшибкаСоединения" Тогда
		
		ОтобразитьСостояниеОшибка(
			РезультатОперацииСервиса.СообщениеОбОшибке,
			РезультатОперацииСервиса.ИнформацияОбОшибке,
			Истина);
		
	ИначеЕсли РезультатОперацииСервиса.ИмяОшибки = "НеЗаполненыДанныеАутентификации"
		Или РезультатОперацииСервиса.ИмяОшибки = "НекорректныеДанныеАутентификации" Тогда
		
		СообщениеЖурнала = НСтр("ru='Не удалось отобразить содержимое Монитора.
            |Не подключена Интернет-поддержка пользователей.'
            |;uk='Не вдалося відобразити вміст Монітора.
            |Не підключена Інтернет-підтримка користувачів.'");
		МониторПортала1СИТС.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		ОтобразитьСостояниеОшибка(
			НСтр("ru='Некорректные данные аутентификации пользователя Интернет-поддержки.
                |Не подключена Интернет-поддержка пользователей.'
                |;uk='Некоректні дані аутентифікації користувача Інтернет-підтримки.
                |Не підключена Інтернет-підтримка користувачів.'"),
			СообщениеЖурнала,
			Ложь);
		
	Иначе
		
		// Все остальные ошибки.
		ОтобразитьСостояниеОшибка(
			РезультатОперацииСервиса.СообщениеОбОшибке,
			РезультатОперацииСервиса.ИнформацияОбОшибке,
			Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокКакОформитьДоговорИТС()
	Возврат НСтр("ru='Как оформить договор ИТС?';uk='Як оформити договір ІТС?'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокКакАктивироватьСервисСопровождения()
	Возврат НСтр("ru='Как активировать сервис сопровождения конфигурации?';uk='Як активувати сервіс супроводу конфігурації?'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокКакПродлитьДействиеДоговора()
	Возврат НСтр("ru='Как продлить действие договора?';uk='Як продовжити дію договору?'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокКакПродлитьСрокДействияСервиса()
	Возврат НСтр("ru='Как продлить срок действия сервиса?';uk='Як продовжити термін дії сервісу?'");
КонецФункции

&НаСервере
Процедура ПроверитьОбработатьИзмененииСостоянияВыполненияУсловийСопровождения(НовоеСостояниеУсловий)
	
	ТекущееСостояниеУсловий = ДанныеМонитора.supportConditionsImplStatus;
	СостояниеВыполненияИзменилось = Ложь;
	
	Если ТекущееСостояниеУсловий.status = "OK" Или ТекущееСостояниеУсловий.status = "WARNING" Тогда
		
		Если НовоеСостояниеУсловий.status = "NOT_COMPLIED" Тогда
			
			ДанныеМонитора.supportConditionsImplStatus = НовоеСостояниеУсловий;
			ОтобразитьБлокНеВыполненыУсловияСопровождения();
			СостояниеВыполненияИзменилось = Истина;
			
		ИначеЕсли ТекущееСостояниеУсловий.status <> НовоеСостояниеУсловий.status
			Или ТекущееСостояниеУсловий.itsStatus <> НовоеСостояниеУсловий.itsStatus
			Или ТекущееСостояниеУсловий.supportServiceActivationStatus <> НовоеСостояниеУсловий.supportServiceActivationStatus Тогда
			
			ДанныеМонитора.supportConditionsImplStatus = НовоеСостояниеУсловий;
			ОтобразитьОбщийСтатусВыполненыУсловия(ДанныеМонитора.supportConditionsImplStatus);
			СостояниеВыполненияИзменилось = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТекущееСостояниеУсловий.status = "NOT_COMPLIED" Тогда
		
		Если (НовоеСостояниеУсловий.status = "OK" Или НовоеСостояниеУсловий.status = "WARNING") Тогда
			
			ДанныеМонитора.supportConditionsImplStatus = НовоеСостояниеУсловий;
			ОтобразитьБлокУсловияСопровожденияВыполнены();
			СостояниеВыполненияИзменилось = Истина;
			
		Иначе
			
			// Отработка изменения отдельных пунктов условий.
			Если ТекущееСостояниеУсловий.productRegistrationStatus <> НовоеСостояниеУсловий.productRegistrationStatus Тогда
				ТекущееСостояниеУсловий.productRegistrationStatus = НовоеСостояниеУсловий.productRegistrationStatus;
				ОтобразитьРегистрацияПрограммногоПродуктаНеВыполненыУсловия(ТекущееСостояниеУсловий);
				СостояниеВыполненияИзменилось = Истина;
			КонецЕсли;
			
			Если ТекущееСостояниеУсловий.itsStatus <> НовоеСостояниеУсловий.itsStatus
				И Не (ТекущееСостояниеУсловий.itsStatus = "OK"
				И НовоеСостояниеУсловий.itsStatus = "WARNING"
				Или ТекущееСостояниеУсловий.itsStatus = "WARNING"
				И НовоеСостояниеУсловий.itsStatus = "OK") Тогда
				// Изменение "OK" на "WARNING" (и наоборот) не влияет на отображение.
				ТекущееСостояниеУсловий.itsStatus = НовоеСостояниеУсловий.itsStatus;
				ОтобразитьДоговорИТСНеВыполненыУсловия(ТекущееСостояниеУсловий);
				СостояниеВыполненияИзменилось = Истина;
			КонецЕсли;
			
			Если ТекущееСостояниеУсловий.supportServiceActivationStatus <> НовоеСостояниеУсловий.supportServiceActivationStatus
				И Не (ТекущееСостояниеУсловий.supportServiceActivationStatus = "OK"
				И НовоеСостояниеУсловий.supportServiceActivationStatus = "WARNING"
				Или ТекущееСостояниеУсловий.supportServiceActivationStatus = "WARNING"
				И НовоеСостояниеУсловий.supportServiceActivationStatus = "OK") Тогда
				// Изменение "OK" на "WARNING" (и наоборот) не влияет на отображение.
				ТекущееСостояниеУсловий.supportServiceActivationStatus = НовоеСостояниеУсловий.supportServiceActivationStatus;
				ОтобразитьСервисыСопровожденияНеВыполненыУсловия(ТекущееСостояниеУсловий);
				СостояниеВыполненияИзменилось = Истина;
			КонецЕсли;
			
			Если СостояниеВыполненияИзменилось Тогда
				ОтобразитьБлокНеВыполненыУсловияСопровожденияЗавершение();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СостояниеВыполненияИзменилось Тогда
		СохранитьОтпечатокДанныхМонитора(Логин, ДанныеМонитора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НовыйТаблицаСсылкиСмТакже()
	
	Результат = Новый ТаблицаЗначений;
	ТипСтрока = Новый ОписаниеТипов("Строка");
	Результат.Колонки.Добавить("Ссылка"   , ТипСтрока);
	Результат.Колонки.Добавить("Заголовок", ТипСтрока);
	Результат.Колонки.Добавить("Колонка"  , Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	
	СтрокаСсылки = Результат.Добавить();
	СтрокаСсылки.Ссылка    = "action:OpenPortal";
	СтрокаСсылки.Заголовок = НСтр("ru='Портал ИТС';uk='Портал ІТС'");
	СтрокаСсылки.Колонка   = 1;
	
	СтрокаСсылки = Результат.Добавить();
	СтрокаСсылки.Ссылка    = "action:TechSuppMonitorProblem";
	СтрокаСсылки.Заголовок = НСтр("ru='Сообщить в техподдержку о проблеме в Мониторе';uk='Повідомити в техпідтримку про проблеми в Моніторі'");
	СтрокаСсылки.Колонка   = 1;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСсылкиСмТакже(ТаблицаСсылки)
	
	Если ТаблицаСсылки.Количество() = 0 Тогда
		Элементы.ГруппаСмТакже.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаСсылки Из ТаблицаСсылки Цикл
		Если СтрокаСсылки.Колонка <> 1 И СтрокаСсылки.Колонка <> 2 Тогда
			СтрокаСсылки.Колонка = 1;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ДекорацияСмТакжеКолонкаОдин.Заголовок =
		МаркированныйФорматированныйСписокСсылокСмТакже(ТаблицаСсылки, 1);
	Элементы.ДекорацияСмТакжеКолонкаДва.Заголовок =
		МаркированныйФорматированныйСписокСсылокСмТакже(ТаблицаСсылки, 2);
	
КонецПроцедуры

#КонецОбласти

#Область БлокШапка

&НаСервере
Процедура ОтобразитьБлокШапка()
	
	Элементы.ДекорацияНазваниеПП.Заголовок = ДанныеМонитора.programName;
	Элементы.ДекорацияВремя.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Данные на %1';uk='Дані на %1'"),
		Формат(ТекущаяДатаСеанса(), "ДЛФ=DT"));
	
КонецПроцедуры

#КонецОбласти

#Область БлокУсловияСопровожденияВыполнены

&НаСервере
Процедура ОтобразитьБлокУсловияСопровожденияВыполнены()
	
	// Приведение к начальному отображению.
	Элементы.ГруппаУсловияСопровожденияОшибка.Видимость      = Ложь;
	Элементы.ГруппаНеВыполненыУсловияСопровождения.Видимость = Ложь;
	Элементы.ГруппаУсловияСопровожденияВыполнены.Видимость   = Истина;
	Элементы.ГруппаУсловияВыполненыДетали.Видимость          = Ложь;
	
	ВыполнениеУсловий = ДанныеМонитора.supportConditionsImplStatus;
	ОтобразитьОбщийСтатусВыполненыУсловия(ВыполнениеУсловий);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьОбщийСтатусВыполненыУсловия(ВыполнениеУсловий)
	
	Если Не ЗначениеЗаполнено(ВыполнениеУсловий.itsStatus)
		И Не ЗначениеЗаполнено(ВыполнениеУсловий.supportServiceActivationStatus) Тогда
		
		// Нет данных для просмотра.
		Элементы.ДекорацияУсловияВыполненыКартинка.Картинка = БиблиотекаКартинок.МониторПортала1СИТСПоложительноеСобытие;
		Элементы.ДекорацияУсловияВыполненыДетали.Видимость  = Ложь;
		
	Иначе
		
		Элементы.ДекорацияУсловияВыполненыДетали.Видимость = Истина;
		Если ВыполнениеУсловий.status = "WARNING" Тогда
			Элементы.ДекорацияУсловияВыполненыКартинка.Картинка = БиблиотекаКартинок.ИнтернетПоддержкаВнимание;
			Элементы.ДекорацияУсловияВыполненыДетали.Заголовок =
				ЗаголовокГруппы(ЗаголовокОбратитеВнимание(), Элементы.ГруппаУсловияВыполненыДетали.Видимость);
		Иначе
			Элементы.ДекорацияУсловияВыполненыКартинка.Картинка = БиблиотекаКартинок.МониторПортала1СИТСПоложительноеСобытие;
			Элементы.ДекорацияУсловияВыполненыДетали.Заголовок =
				ЗаголовокГруппы(ЗаголовокПосмотретьДетали(), Элементы.ГруппаУсловияВыполненыДетали.Видимость);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДекорацияУсловияВыполненыДеталиНажатиеНаСервере()
	
	Элементы.ГруппаУсловияВыполненыДетали.Видимость =
		Не Элементы.ГруппаУсловияВыполненыДетали.Видимость;
	Элементы.ДекорацияУсловияВыполненыДетали.Заголовок =
		ЗаголовокГруппы(ЗаголовокПосмотретьДетали(), Элементы.ГруппаУсловияВыполненыДетали.Видимость);
	
	Если ДанныеМонитора.supportConditionsImplStatus.status = "WARNING" Тогда
		Элементы.ДекорацияУсловияВыполненыДетали.Заголовок =
			ЗаголовокГруппы(ЗаголовокОбратитеВнимание(), Элементы.ГруппаУсловияВыполненыДетали.Видимость);
	Иначе
		Элементы.ДекорацияУсловияВыполненыДетали.Заголовок =
			ЗаголовокГруппы(ЗаголовокПосмотретьДетали(), Элементы.ГруппаУсловияВыполненыДетали.Видимость);
	КонецЕсли;
	
	Если Элементы.ГруппаУсловияВыполненыДетали.Видимость Тогда
		НачатьПолучениеДеталиУсловияВыполненыНаСервере();
	Иначе
		ОтменитьЗадание("СВУ");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьПолучениеДеталиУсловияВыполненыНаСервере()
	
	МониторПортала1СИТС.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru='Подготовка к получению деталей выполненных условий сопровождения.';uk='Підготовка до отримання деталей виконаних умов супроводу.'"));
	
	Описатель = ОписательЗадания(Задания, "СВУ");
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.КлючФоновогоЗадания = "ПолучениеИнформацииМонитораУсловияСопровождения"
		+ Строка(Новый УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.АдресРезультата = Описатель.АдресРезультата;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Логин", Логин);
	ПараметрыЗадания.Вставить("Договоры1СИТС",
		ЗначениеЗаполнено(ДанныеМонитора.supportConditionsImplStatus.itsStatus));
	ПараметрыЗадания.Вставить("АктивацияСервисовСопровождения",
		ЗначениеЗаполнено(ДанныеМонитора.supportConditionsImplStatus.supportServiceActivationStatus));
	ПараметрыЗадания.Вставить("ДоговорыНаСервисы", Ложь);
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.МониторПортала1СИТС.ПолучитьДеталиДанныхМонитора",
		ПараметрыЗадания,
		ПараметрыВыполненияВФоне);
	
	Если РезультатВыполнения.Статус = "Выполняется" Тогда
		
		Описатель.Идентификатор = РезультатВыполнения.ИдентификаторЗадания;
		ОтобразитьСостояниеДлительнаяОперацияУсловияВыполнены();
		
	ИначеЕсли РезультатВыполнения.Статус = "Выполнено" Тогда
		
		ПриПолученииДеталиУсловияВыполнены();
		
	ИначеЕсли РезультатВыполнения.Статус = "Отменено" Тогда
		
		МониторПортала1СИТС.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru='Не удалось отобразить детали выполненных условий сопровождения. Задание получение данных отменено.';uk='Не вдається відобразити деталі виконаних умов супроводу. Завдання отримання даних скасовано.'"));
		ОтобразитьОшибкаПолученияДеталиУсловияВыполнены(НСтр("ru='Задание отменено.';uk='Завдання скасовано.'"));
		
	Иначе
		
		// Ошибка.
		СообщениеЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось получить детали выполненных условий.
                |%1'
                |;uk='Не вдалося отримати деталі виконаних умов.
                |%1'"),
			РезультатВыполнения.ПодробноеПредставлениеОшибки);
		МониторПортала1СИТС.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		ОтобразитьОшибкаПолученияДеталиУсловияВыполнены(РезультатВыполнения.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСостояниеДлительнаяОперацияУсловияВыполнены()
	
	Элементы.ГруппаВыполненоДоговорИТС.Видимость           = Ложь;
	Элементы.ГруппаВыполненоСервисыСопровождения.Видимость = Ложь;
	Элементы.ДекорацияВУОшибка.Заголовок                   = "";
	
	Элементы.СтраницыДлительнаяОперацияУсловияВыполнены.Видимость = Истина;
	Элементы.СтраницыДлительнаяОперацияУсловияВыполнены.ТекущаяСтраница =
		Элементы.СтраницаВыполненныеУсловияДлительнаяОперация;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьОшибкаПолученияДеталиУсловияВыполнены(СообщениеОбОшибке)
	
	Элементы.СтраницыДлительнаяОперацияУсловияВыполнены.ТекущаяСтраница = Элементы.СтраницаВыполненныеУсловияОшибка;
	Элементы.ДекорацияВУОшибка.Заголовок = СообщениеОбОшибке;
	
	Элементы.СтраницыДлительнаяОперацияУсловияВыполнены.Видимость = Истина;
	Элементы.ГруппаВыполненоДоговорИТС.Видимость           = Ложь;
	Элементы.ГруппаВыполненоСервисыСопровождения.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДеталиУсловияВыполнены()
	
	Описатель = ОписательЗадания(Задания, "СВУ");
	РезультатОперацииСервиса = ПолучитьИзВременногоХранилища(Описатель.АдресРезультата);
	Если ПустаяСтрока(РезультатОперацииСервиса.ИмяОшибки) Тогда
		
		Данные = РезультатОперацииСервиса.Данные;
		
		Попытка
			ОтобразитьДеталиВыполненныеУсловия(Данные);
		Исключение
			
			ИнформацияОшибка = ИнформацияОбОшибке();
			СообщениеЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось отобразить детали выполненных условий сопровождения.
                    |%1'
                    |;uk='Не вдається відобразити деталі виконаних умов супроводу.
                    |%1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОшибка));
			МониторПортала1СИТС.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
			ОтобразитьОшибкаПолученияДеталиУсловияВыполнены(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка отображения данных.
                        |%1'
                        |;uk='Помилка відображення даних.
                        |%1'"),
					КраткоеПредставлениеОшибки(ИнформацияОшибка)));
			Возврат;
			
		КонецПопытки;
		
		ПроверитьОбработатьИзмененииСостоянияВыполненияУсловийСопровождения(Данные.supportConditionsImplStatus);
		
	Иначе
		
		ОтобразитьОшибкаПолученияДеталиУсловияВыполнены(РезультатОперацииСервиса.СообщениеОбОшибке);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДеталиВыполненныеУсловия(Данные)
	
	ВыполнениеУсловий = Данные.supportConditionsImplStatus;
	
	Элементы.СтраницыДлительнаяОперацияУсловияВыполнены.Видимость = Ложь;
	
	Если Не ЗначениеЗаполнено(ВыполнениеУсловий.itsStatus) Тогда
		
		Элементы.ГруппаВыполненоДоговорИТС.Видимость = Ложь;
		
	Иначе
		
		Элементы.ГруппаВыполненоДоговорИТС.Видимость = Истина;
		
		НетДанныхДляОтображения =
			(Данные.itsContracts.serviceContracts = Неопределено
			Или Данные.itsContracts.serviceContracts.Количество() = 0);
		
		Если ВыполнениеУсловий.itsStatus = "WARNING" Тогда
			Если НетДанныхДляОтображения Тогда
				Элементы.ДекорацияЗаголовокДоговорИТСВУ.Заголовок =
					НСтр("ru='Договор ИТС заканчивается';uk='Договір ІТС закінчується'");
			Иначе
				Элементы.ДекорацияЗаголовокДоговорИТСВУ.Заголовок =
					НСтр("ru='Договор ИТС заканчивается:';uk='Договір ІТС закінчується:'");
			КонецЕсли;
		Иначе
			Если НетДанныхДляОтображения Тогда
				Элементы.ДекорацияЗаголовокДоговорИТСВУ.Заголовок =
					НСтр("ru='Договор ИТС';uk='Договір ІТС'");
			Иначе
				Элементы.ДекорацияЗаголовокДоговорИТСВУ.Заголовок =
					НСтр("ru='Договор ИТС:';uk='Договір ІТС:'");
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ДекорацияДоговорИТССписок.Заголовок =
			МаркированныйСписокСПериодами(
				Данные.itsContracts,
				Ложь);
		
		Если НетДанныхДляОтображения Тогда
			Элементы.ДекорацияКакОформитьДоговорИТСУсловияВыполненыСсылка.Видимость = Ложь;
		Иначе
			Элементы.ДекорацияКакОформитьДоговорИТСУсловияВыполненыСсылка.Видимость = Истина;
			Элементы.ДекорацияКакОформитьДоговорИТСУсловияВыполненыСсылка.Заголовок =
				ЗаголовокГруппы(
					ЗаголовокКакПродлитьДействиеДоговора(),
					Ложь);
			ЗаполнитьЗаголовокИзМакета(
				Элементы.ДекорацияКакОформитьДоговорИТСУсловияВыполненыИнструкция,
				"ИнструкцияОформитьДоговорИТС");
		КонецЕсли;
		
		Элементы.ДекорацияКакОформитьДоговорИТСУсловияВыполненыИнструкция.Видимость = Ложь;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыполнениеУсловий.supportServiceActivationStatus) Тогда
		
		Элементы.ГруппаВыполненоСервисыСопровождения.Видимость = Ложь;
		
	Иначе
		
		Элементы.ГруппаВыполненоСервисыСопровождения.Видимость = Истина;
		
		НетДанныхДляОтображения =
			(Данные.supportServiceActivations.serviceContracts = Неопределено
			Или Данные.supportServiceActivations.serviceContracts.Количество() = 0);
		
		Если ВыполнениеУсловий.supportServiceActivationStatus = "WARNING" Тогда
			Если НетДанныхДляОтображения Тогда
				Элементы.ДекорацияЗаголовокСервисыСопровожденияВУ.Заголовок =
					НСтр("ru='Срок сервиса сопровождения конфигурации заканчивается';uk='Термін сервісу супроводу конфігурації закінчується'");
			Иначе
				Элементы.ДекорацияЗаголовокСервисыСопровожденияВУ.Заголовок =
					НСтр("ru='Срок сервиса сопровождения конфигурации заканчивается:';uk='Термін сервісу супроводу конфігурації закінчується:'");
			КонецЕсли;
		Иначе
			Если НетДанныхДляОтображения Тогда
				Элементы.ДекорацияЗаголовокСервисыСопровожденияВУ.Заголовок =
					НСтр("ru='Сервис сопровождения конфигурации';uk='Сервіс супроводу конфігурації'");
			Иначе
				Элементы.ДекорацияЗаголовокСервисыСопровожденияВУ.Заголовок =
					НСтр("ru='Активирован сервис сопровождения конфигурации:';uk='Активований сервіс супроводу конфігурації:'");
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ДекорацияСервисыСопровожденияСписок.Заголовок =
			МаркированныйСписокСПериодами(
				Данные.supportServiceActivations,
				Ложь);
		
		Если НетДанныхДляОтображения Тогда
			Элементы.ДекорацияКакАктивироватьСервисСопровожденияУсловияВыполненыСсылка.Видимость = Ложь;
		Иначе
			Элементы.ДекорацияКакАктивироватьСервисСопровожденияУсловияВыполненыСсылка.Видимость = Истина;
			Элементы.ДекорацияКакАктивироватьСервисСопровожденияУсловияВыполненыСсылка.Заголовок =
				ЗаголовокГруппы(
					ЗаголовокКакПродлитьДействиеСервиса(),
					Ложь);
			ЗаполнитьЗаголовокИзМакета(
				Элементы.ДекорацияКакАктивироватьСервисСопровожденияУсловияВыполненыИнструкция,
				"ИнструкцияАктивироватьСервисСопровождения");
		КонецЕсли;
		
		Элементы.ДекорацияКакАктивироватьСервисСопровожденияУсловияВыполненыИнструкция.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокОбратитеВнимание()
	Возврат НСтр("ru='Обратите внимание';uk='Зверніть увагу'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокПосмотретьДетали()
	Возврат НСтр("ru='Посмотреть детали';uk='Подивитися деталі'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокКакПродлитьДействиеСервиса()
	Возврат НСтр("ru='Как продлить действие сервиса?';uk='Як продовжити дію сервісу?'");
КонецФункции

#КонецОбласти

#Область БлокНеВыполненыУсловияСопровождения

&НаСервере
Процедура ОтобразитьБлокНеВыполненыУсловияСопровождения()
	
	СостояниеВыполненияУсловий = ДанныеМонитора.supportConditionsImplStatus;
	
	ОтобразитьРегистрацияПрограммногоПродуктаНеВыполненыУсловия(СостояниеВыполненияУсловий);
	ОтобразитьДоговорИТСНеВыполненыУсловия(СостояниеВыполненияУсловий);
	ОтобразитьСервисыСопровожденияНеВыполненыУсловия(СостояниеВыполненияУсловий);
	
	ОтобразитьБлокНеВыполненыУсловияСопровожденияЗавершение();
	
	Элементы.ГруппаУсловияСопровожденияОшибка.Видимость      = Ложь;
	Элементы.ГруппаУсловияСопровожденияВыполнены.Видимость   = Ложь;
	Элементы.ГруппаНеВыполненыУсловияСопровождения.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРегистрацияПрограммногоПродуктаНеВыполненыУсловия(СостояниеВыполненияУсловий)
	
	Если СостояниеВыполненияУсловий.productRegistrationStatus <> "NOT_REGISTERED" Тогда
		Элементы.ГруппаНеВыполненоРегистрационныйНомер.Видимость = Ложь;
	Иначе
		Элементы.ГруппаНеВыполненоРегистрационныйНомер.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДоговорИТСНеВыполненыУсловия(СостояниеВыполненияУсловий)
	
	Если СостояниеВыполненияУсловий.itsStatus = Неопределено Тогда
		
		Элементы.ГруппаНеВыполненоИТС.Видимость                   = Ложь;
		Элементы.ГруппаВыполненоИТСНевыполненныеУсловия.Видимость = Ложь;
		
	ИначеЕсли СостояниеВыполненияУсловий.itsStatus = "NO_CONTRACT" Тогда
		
		Элементы.ГруппаНеВыполненоИТС.Видимость                   = Истина;
		Элементы.ГруппаВыполненоИТСНевыполненныеУсловия.Видимость = Ложь;
		Элементы.ДекорацияКакЗаключитьДоговорИТССсылка.Заголовок =
			ЗаголовокГруппы(ЗаголовокКакОформитьДоговорИТС(), Ложь);
		Элементы.ДекорацияКакЗаключитьДоговорИТСИнструкция.Видимость = Ложь;
		ЗаполнитьЗаголовокИзМакета(
			Элементы.ДекорацияКакЗаключитьДоговорИТСИнструкция,
			"ИнструкцияОформитьДоговорИТС");
		
	Иначе
		
		Элементы.ГруппаНеВыполненоИТС.Видимость = Ложь;
		Элементы.ГруппаВыполненоИТСНевыполненныеУсловия.Видимость = Истина;
		Элементы.ГруппаИТСНевыполненныеУсловия.Видимость = Ложь;
		Элементы.ДекорацияДоговорИТССсылкаДетали.Заголовок =
			ЗаголовокГруппы(ЗаголовокСписокДоговоров(), Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСервисыСопровожденияНеВыполненыУсловия(СостояниеВыполненияУсловий)
	
	Если СостояниеВыполненияУсловий.supportServiceActivationStatus = Неопределено Тогда
		
		Элементы.ГруппаНеВыполненоСервисыСопровождения.Видимость                   = Ложь;
		Элементы.ГруппаВыполненоСервисыСопровожденияНевыполненныеУсловия.Видимость = Ложь;
		
	ИначеЕсли СостояниеВыполненияУсловий.supportServiceActivationStatus = "NO_ACTIVATIONS" Тогда
		
		Элементы.ГруппаНеВыполненоСервисыСопровождения.Видимость                   = Истина;
		Элементы.ГруппаВыполненоСервисыСопровожденияНевыполненныеУсловия.Видимость = Ложь;
		Элементы.ДекорацияКакАктивироватьСервисСопровожденияСсылка.Заголовок =
			ЗаголовокГруппы(ЗаголовокКакАктивироватьСервисСопровождения(), Ложь);
		Элементы.ДекорацияКакАктивироватьСервисСопровожденияИнструкция.Видимость = Ложь;
		ЗаполнитьЗаголовокИзМакета(
			Элементы.ДекорацияКакАктивироватьСервисСопровожденияИнструкция,
			"ИнструкцияАктивироватьСервисСопровождения");
		
	Иначе
		
		Элементы.ГруппаНеВыполненоСервисыСопровождения.Видимость = Ложь;
		Элементы.ГруппаВыполненоСервисыСопровожденияНевыполненныеУсловия.Видимость = Истина;
		Элементы.ГруппаСервисыСопровожденияНевыполненныеУсловия.Видимость = Ложь;
		Элементы.ДекорацияСервисыСопровожденияДеталиСсылка.Заголовок =
			ЗаголовокГруппы(ЗаголовокСписокСервисов(), Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьБлокНеВыполненыУсловияСопровожденияЗавершение()
	
	Элементы.ГруппаНеВыполненыУсловияСопровожденияДетали.Видимость =
		Элементы.ГруппаНеВыполненоРегистрационныйНомер.Видимость
		Или Элементы.ГруппаНеВыполненоИТС.Видимость
		Или Элементы.ГруппаНеВыполненоСервисыСопровождения.Видимость
		Или Элементы.ГруппаВыполненоИТСНевыполненныеУсловия.Видимость
		Или Элементы.ГруппаВыполненоСервисыСопровожденияНевыполненныеУсловия.Видимость;
	Элементы.ДекорацияПравилаСопровожденияППСсылка.Видимость =
		Элементы.ГруппаНеВыполненыУсловияСопровожденияДетали.Видимость;
	Если Элементы.ДекорацияПравилаСопровожденияППСсылка.Видимость Тогда
		Элементы.ДекорацияПравилаСопровожденияППСсылка.Заголовок =
			ЗаголовокГруппы(ЗаголовокПравилаСопровожденияПП(), Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДекорацияДоговорИТССсылкаДеталиНажатиеНаСервере()
	
	Элементы.ГруппаИТСНевыполненныеУсловия.Видимость = Не Элементы.ГруппаИТСНевыполненныеУсловия.Видимость;
	Элементы.ДекорацияДоговорИТССсылкаДетали.Заголовок =
		ЗаголовокГруппы(ЗаголовокСписокДоговоров(), Элементы.ГруппаИТСНевыполненныеУсловия.Видимость);
	
	Если Элементы.ГруппаИТСНевыполненныеУсловия.Видимость Тогда
		НачатьПолучениеДеталиИТСНУНаСервере();
	Иначе
		ОтменитьЗадание("ИТСНУ");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДекорацияСервисыСопровожденияДеталиСсылкаНажатиеНаСервере()
	
	Элементы.ГруппаСервисыСопровожденияНевыполненныеУсловия.Видимость =
		Не Элементы.ГруппаСервисыСопровожденияНевыполненныеУсловия.Видимость;
	Элементы.ДекорацияСервисыСопровожденияДеталиСсылка.Заголовок =
		ЗаголовокГруппы(ЗаголовокСписокСервисов(), Элементы.ГруппаСервисыСопровожденияНевыполненныеУсловия.Видимость);
	
	Если Элементы.ГруппаСервисыСопровожденияНевыполненныеУсловия.Видимость Тогда
		НачатьПолучениеДеталиСервисыСопровожденияНевыполненныеУсловияНаСервере();
	Иначе
		ОтменитьЗадание("СервисыСопровожденияНевыполненныеУсловия");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьПолучениеДеталиИТСНУНаСервере()
	
	МониторПортала1СИТС.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru='Подготовка к получению деталей договора ИТС невыполненных условий.';uk='Підготовка до отримання деталей договору ІТС невиконаних умов.'"));
	
	Описатель = ОписательЗадания(Задания, "ИТСНУ");
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.КлючФоновогоЗадания = "ПолучениеИнформацииМонитораДоговорыИТС"
		+ Строка(Новый УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.АдресРезультата = Описатель.АдресРезультата;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Логин", Логин);
	ПараметрыЗадания.Вставить("Договоры1СИТС"                 , Истина);
	ПараметрыЗадания.Вставить("АктивацияСервисовСопровождения", Ложь);
	ПараметрыЗадания.Вставить("ДоговорыНаСервисы"             , Ложь);
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.МониторПортала1СИТС.ПолучитьДеталиДанныхМонитора",
		ПараметрыЗадания,
		ПараметрыВыполненияВФоне);
	
	Если РезультатВыполнения.Статус = "Выполняется" Тогда
		
		Описатель.Идентификатор = РезультатВыполнения.ИдентификаторЗадания;
		ОтобразитьСостояниеДлительнаяОперацияИТСНУ();
		
	ИначеЕсли РезультатВыполнения.Статус = "Выполнено" Тогда
		
		ПриПолученииДеталиИТСНУ();
		
	ИначеЕсли РезультатВыполнения.Статус = "Отменено" Тогда
		
		МониторПортала1СИТС.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru='Не удалось отобразить детали договора ИТС невыполненных условий сопровождения. Задание получение данных отменено.';uk='Не вдається відобразити деталі договору ІТС невиконаних умов супроводу. Завдання отримання даних скасовано.'"));
		ОтобразитьОшибкаПолученияДеталиИТСНУ(НСтр("ru='Задание отменено.';uk='Завдання скасовано.'"));
		
	Иначе
		
		// Ошибка.
		СообщениеЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось получить детали договора ИТС невыполненных условий.
                |%1'
                |;uk='Не вдалося отримати деталі договору ІТС невиконаних умов.
                |%1'"),
			РезультатВыполнения.ПодробноеПредставлениеОшибки);
		МониторПортала1СИТС.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		ОтобразитьОшибкаПолученияДеталиИТСНУ(РезультатВыполнения.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСостояниеДлительнаяОперацияИТСНУ()
	
	Элементы.ДекорацияДоговорИТССписокНУ.Видимость = Ложь;
	Элементы.ДекорацияИТСНУОшибка.Заголовок        = "";
	
	Элементы.СтраницыДлительнаяОперацияИТСНеВыполненыУсловия.Видимость = Истина;
	Элементы.СтраницыДлительнаяОперацияИТСНеВыполненыУсловия.ТекущаяСтраница =
		Элементы.СтраницаИТСНеВыполненныеУсловияДлительнаяОперация;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьОшибкаПолученияДеталиИТСНУ(СообщениеОбОшибке)
	
	Элементы.СтраницыДлительнаяОперацияИТСНеВыполненыУсловия.ТекущаяСтраница =
		Элементы.СтраницаИТСНеВыполненныеУсловияОшибка;
	Элементы.ДекорацияИТСНУОшибка.Заголовок = СообщениеОбОшибке;
	
	Элементы.СтраницыДлительнаяОперацияИТСНеВыполненыУсловия.Видимость = Истина;
	Элементы.ДекорацияДоговорИТССписокНУ.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДеталиИТСНУ()
	
	Описатель = ОписательЗадания(Задания, "ИТСНУ");
	РезультатОперацииСервиса = ПолучитьИзВременногоХранилища(Описатель.АдресРезультата);
	Если ПустаяСтрока(РезультатОперацииСервиса.ИмяОшибки) Тогда
		
		Данные = РезультатОперацииСервиса.Данные;
		
		Попытка
			ОтобразитьДеталиИТСНУ(Данные);
		Исключение
			
			ИнформацияОшибка = ИнформацияОбОшибке();
			СообщениеЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось отобразить детали договора ИТС невыполненных условий сопровождения.
                    |%1'
                    |;uk='Не вдається відобразити деталі договору ІТС невиконаних умов супроводу.
                    |%1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОшибка));
			МониторПортала1СИТС.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
			ОтобразитьОшибкаПолученияДеталиИТСНУ(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка отображения данных.
                        |%1'
                        |;uk='Помилка відображення даних.
                        |%1'"),
					КраткоеПредставлениеОшибки(ИнформацияОшибка)));
			Возврат;
			
		КонецПопытки;
		
		ПроверитьОбработатьИзмененииСостоянияВыполненияУсловийСопровождения(Данные.supportConditionsImplStatus);
		
	Иначе
		
		ОтобразитьОшибкаПолученияДеталиИТСНУ(РезультатОперацииСервиса.СообщениеОбОшибке);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДеталиИТСНУ(Данные)
	
	ВыполнениеУсловий = Данные.supportConditionsImplStatus;
	
	Элементы.СтраницыДлительнаяОперацияИТСНеВыполненыУсловия.Видимость = Ложь;
	
	Если Не ЗначениеЗаполнено(ВыполнениеУсловий.itsStatus) Тогда
		Элементы.ГруппаИТСНевыполненныеУсловия.Видимость = Ложь;
	Иначе
		Элементы.ДекорацияДоговорИТССписокНУ.Видимость = Истина;
		Элементы.ДекорацияДоговорИТССписокНУ.Заголовок = МаркированныйСписокСПериодами(
			Данные.itsContracts,
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьПолучениеДеталиСервисыСопровожденияНевыполненныеУсловияНаСервере()
	
	МониторПортала1СИТС.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru='Подготовка к получению деталей сервисов сопровождения невыполненных условий.';uk='Підготовка до отримання деталей сервісів супроводу невиконаних умов.'"));
	
	Описатель = ОписательЗадания(Задания, "СервисыСопровожденияНевыполненныеУсловия");
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.КлючФоновогоЗадания = "ПолучениеИнформацииМонитораСервисыСопровождения"
		+ Строка(Новый УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.АдресРезультата = Описатель.АдресРезультата;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Логин"                         , Логин);
	ПараметрыЗадания.Вставить("Договоры1СИТС"                 , Ложь);
	ПараметрыЗадания.Вставить("АктивацияСервисовСопровождения", Истина);
	ПараметрыЗадания.Вставить("ДоговорыНаСервисы"             , Ложь);
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.МониторПортала1СИТС.ПолучитьДеталиДанныхМонитора",
		ПараметрыЗадания,
		ПараметрыВыполненияВФоне);
	
	Если РезультатВыполнения.Статус = "Выполняется" Тогда
		
		Описатель.Идентификатор = РезультатВыполнения.ИдентификаторЗадания;
		ОтобразитьСостояниеДлительнаяОперацияСервисыСопровожденияНевыполненныеУсловия();
		
	ИначеЕсли РезультатВыполнения.Статус = "Выполнено" Тогда
		
		ПриПолученииДеталиСервисыСопровожденияНевыполненныеУсловия();
		
	ИначеЕсли РезультатВыполнения.Статус = "Отменено" Тогда
		
		МониторПортала1СИТС.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru='Не удалось отобразить детали сервисов сопровождения невыполненных условий сопровождения. Задание получение данных отменено.';uk='Не вдається відобразити деталі сервісів супроводу невиконаних умов супроводу. Завдання отримання даних скасовано.'"));
		ОтобразитьОшибкаПолученияДеталиИТСНУ(НСтр("ru='Задание отменено.';uk='Завдання скасовано.'"));
		
	Иначе
		
		// Ошибка.
		СообщениеЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось получить детали сервисов сопровождения невыполненных условий.
                |%1'
                |;uk='Не вдалося отримати деталі сервісів супроводу невиконаних умов.
                |%1'"),
			РезультатВыполнения.ПодробноеПредставлениеОшибки);
		МониторПортала1СИТС.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		ОтобразитьОшибкаПолученияДеталиСервисыСопровожденияНевыполненныеУсловия(РезультатВыполнения.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСостояниеДлительнаяОперацияСервисыСопровожденияНевыполненныеУсловия()
	
	Элементы.ДекорацияСервисыСопровожденияСписокНевыполненныеУсловия.Видимость = Ложь;
	Элементы.ДекорацияСервисыСопровожденияНевыполненныеУсловияОшибка.Заголовок = "";
	
	Элементы.СтраницыДлительнаяОперацияСервисыСопровожденияНевыполненныеУсловия.Видимость = Истина;
	Элементы.СтраницыДлительнаяОперацияСервисыСопровожденияНевыполненныеУсловия.ТекущаяСтраница =
		Элементы.СтраницаСервисыСопровожденияНевыполненныеУсловияДлительнаяОперация;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьОшибкаПолученияДеталиСервисыСопровожденияНевыполненныеУсловия(СообщениеОбОшибке)
	
	Элементы.СтраницыДлительнаяОперацияСервисыСопровожденияНевыполненныеУсловия.ТекущаяСтраница =
		Элементы.СтраницаСервисыСопровожденияНевыполненныеУсловияОшибка;
	Элементы.ДекорацияСервисыСопровожденияНевыполненныеУсловияОшибка.Заголовок = СообщениеОбОшибке;
	
	Элементы.СтраницыДлительнаяОперацияСервисыСопровожденияНевыполненныеУсловия.Видимость = Истина;
	Элементы.ДекорацияСервисыСопровожденияСписокНевыполненныеУсловия.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДеталиСервисыСопровожденияНевыполненныеУсловия()
	
	Описатель = ОписательЗадания(Задания, "СервисыСопровожденияНевыполненныеУсловия");
	РезультатОперацииСервиса = ПолучитьИзВременногоХранилища(Описатель.АдресРезультата);
	Если ПустаяСтрока(РезультатОперацииСервиса.ИмяОшибки) Тогда
		
		Данные = РезультатОперацииСервиса.Данные;
		
		Попытка
			ОтобразитьДеталиСервисыСопровожденияНевыполненныеУсловия(Данные);
		Исключение
			
			ИнформацияОшибка = ИнформацияОбОшибке();
			СообщениеЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось отобразить детали сервисов сопровождения невыполненных условий сопровождения.
                    |%1'
                    |;uk='Не вдається відобразити деталі сервісів супроводу невиконаних умов супроводу.
                    |%1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОшибка));
			МониторПортала1СИТС.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
			ОтобразитьОшибкаПолученияДеталиСервисыСопровожденияНевыполненныеУсловия(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка отображения данных.
                        |%1'
                        |;uk='Помилка відображення даних.
                        |%1'"),
					КраткоеПредставлениеОшибки(ИнформацияОшибка)));
			Возврат;
			
		КонецПопытки;
		
		ПроверитьОбработатьИзмененииСостоянияВыполненияУсловийСопровождения(Данные.supportConditionsImplStatus);
		
	Иначе
		
		ОтобразитьОшибкаПолученияДеталиСервисыСопровожденияНевыполненныеУсловия(РезультатОперацииСервиса.СообщениеОбОшибке);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДеталиСервисыСопровожденияНевыполненныеУсловия(Данные)
	
	ВыполнениеУсловий = Данные.supportConditionsImplStatus;
	
	Элементы.СтраницыДлительнаяОперацияСервисыСопровожденияНевыполненныеУсловия.Видимость = Ложь;
	
	Если Не ЗначениеЗаполнено(ВыполнениеУсловий.supportServiceActivationStatus) Тогда
		Элементы.ГруппаСервисыСопровожденияНевыполненныеУсловия.Видимость = Ложь;
	Иначе
		Элементы.ДекорацияСервисыСопровожденияСписокНевыполненныеУсловия.Видимость = Истина;
		Элементы.ДекорацияСервисыСопровожденияСписокНевыполненныеУсловия.Заголовок = МаркированныйСписокСПериодами(
			Данные.supportServiceActivations,
			Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокПравилаСопровожденияПП()
	Возврат НСтр("ru='Правила сопровождения программного продукта';uk='Правила супроводу програмного продукту'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокСписокДоговоров()
	Возврат НСтр("ru='Список договоров';uk='Список договорів'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокСписокСервисов()
	Возврат НСтр("ru='Список сервисов сопровождения';uk='Список сервісів супроводу'");
КонецФункции

#КонецОбласти

#Область БлокДоговорыНаСервисы

&НаСервере
Процедура ОтобразитьБлокДоговорыНаСервисы()
	
	Элементы.ДекорацияСервисы1ССообщениеОбОшибке.Видимость = Ложь;
	Элементы.ГруппаСервисы1ССодержимое.Видимость = Истина;
	Элементы.ГруппаСервисы1СДетали.Видимость = Ложь;
	
	Если ДанныеМонитора.serviceContractsStatus.status = "NO_CONTRACTS" Тогда
		
		// Нет договоров на сервисы.
		Элементы.ДекорацияКартинкаБлокДоговорыНаСервисы.Картинка =
			БиблиотекаКартинок.ИнтернетПоддержкаВнимание;
		Элементы.ДекорацияСервисы1СДеталиСсылка.Видимость = Ложь;
		
		Элементы.ДекорацияКакПодключитьСервис1ССсылка.Видимость = Истина;
		Элементы.ДекорацияКакПодключитьСервис1СИнструкция.Видимость = Ложь;
		Элементы.ДекорацияКакПодключитьСервис1ССсылка.Заголовок =
			ЗаголовокГруппы(
				ЗаголовокКакОформитьДоговорыНаСервисы(),
				Ложь);
		
		ЗаполнитьЗаголовокИзМакета(
			Элементы.ДекорацияКакПодключитьСервис1СИнструкция,
			"ИнструкцияКакПодключитьСервисы1С");
		
	Иначе
		
		Элементы.ДекорацияКакПодключитьСервис1ССсылка.Видимость = Ложь;
		Элементы.ДекорацияКакПодключитьСервис1СИнструкция.Видимость = Ложь;
		
		ОтобразитьОбщееСостояниеДоговоровНаСервисы();
		
		ЗаполнитьЗаголовокИзМакета(
			Элементы.ДекорацияКакПродлитьСервис1СИнструкция,
			"ИнструкцияКакПродлитьСервис1С");
		Элементы.ДекорацияКакПродлитьСервис1СИнструкция.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьОбщееСостояниеДоговоровНаСервисы()
	
	Если ДанныеМонитора.serviceContractsStatus.status = "WARNING" Тогда
		Элементы.ДекорацияКартинкаБлокДоговорыНаСервисы.Картинка =
			БиблиотекаКартинок.ИнтернетПоддержкаВнимание;
		Элементы.ДекорацияСервисы1СДеталиСсылка.Заголовок =
			ЗаголовокГруппы(
				ЗаголовокЗаканчиваетсяСрокДействияСервиса(),
				Элементы.ГруппаСервисы1СДетали.Видимость);
	Иначе
		Элементы.ДекорацияКартинкаБлокДоговорыНаСервисы.Картинка =
			БиблиотекаКартинок.МониторПортала1СИТСПоложительноеСобытие;
		Элементы.ДекорацияСервисы1СДеталиСсылка.Заголовок =
			ЗаголовокГруппы(
				ЗаголовокЕстьДействующиеДоговорыНаСервисы(),
				Элементы.ГруппаСервисы1СДетали.Видимость);
	КонецЕсли;
	
	Элементы.ДекорацияСервисы1СДеталиСсылка.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДекорацияДоговорыНаСервисыДеталиСсылкаНажатиеНаСервере()
	
	Элементы.ГруппаСервисы1СДетали.Видимость =
		Не Элементы.ГруппаСервисы1СДетали.Видимость;
	Если ДанныеМонитора.serviceContractsStatus.status = "WARNING" Тогда
		Элементы.ДекорацияСервисы1СДеталиСсылка.Заголовок =
			ЗаголовокГруппы(
				ЗаголовокЗаканчиваетсяСрокДействияСервиса(),
				Элементы.ГруппаСервисы1СДетали.Видимость);
	Иначе
		Элементы.ДекорацияСервисы1СДеталиСсылка.Заголовок =
			ЗаголовокГруппы(
				ЗаголовокЕстьДействующиеДоговорыНаСервисы(),
				Элементы.ГруппаСервисы1СДетали.Видимость);
	КонецЕсли;
	
	Если Элементы.ГруппаСервисы1СДетали.Видимость Тогда
		НачатьПолучениеДеталиСервисы1СНаСервере();
	Иначе
		ОтменитьЗадание("Сервисы1С");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьПолучениеДеталиСервисы1СНаСервере()
	
	МониторПортала1СИТС.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru='Подготовка к получению деталей договоров на сервисы.';uk='Підготовка до отримання деталей договорів на сервіси.'"));
	
	Описатель = ОписательЗадания(Задания, "Сервисы1С");
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.КлючФоновогоЗадания = "ПолучениеИнформацииМонитораДоговорыНаСервисы"
		+ Строка(Новый УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.АдресРезультата = Описатель.АдресРезультата;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Логин"                         , Логин);
	ПараметрыЗадания.Вставить("Договоры1СИТС"                 , Ложь);
	ПараметрыЗадания.Вставить("АктивацияСервисовСопровождения", Ложь);
	ПараметрыЗадания.Вставить("ДоговорыНаСервисы"             , Истина);
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.МониторПортала1СИТС.ПолучитьДеталиДанныхМонитора",
		ПараметрыЗадания,
		ПараметрыВыполненияВФоне);
	
	Если РезультатВыполнения.Статус = "Выполняется" Тогда
		
		Описатель.Идентификатор = РезультатВыполнения.ИдентификаторЗадания;
		ОтобразитьСостояниеДлительнаяОперацияСервисы1С();
		
	ИначеЕсли РезультатВыполнения.Статус = "Выполнено" Тогда
		
		ПриПолученииДеталиСервисы1С();
		
	ИначеЕсли РезультатВыполнения.Статус = "Отменено" Тогда
		
		МониторПортала1СИТС.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru='Не удалось отобразить детали договоров на сервисы. Задание получение данных отменено.';uk='Не вдається відобразити деталі договорів на сервіси. Завдання отримання даних скасовано.'"));
		ОтобразитьОшибкаПолученияДеталиСервисы1С(НСтр("ru='Задание отменено.';uk='Завдання скасовано.'"));
		
	Иначе
		
		// Ошибка.
		СообщениеЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось получить детали договоров на сервисы.
                |%1'
                |;uk='Не вдалося отримати деталі договорів на сервіси.
                |%1'"),
			РезультатВыполнения.ПодробноеПредставлениеОшибки);
		МониторПортала1СИТС.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		ОтобразитьОшибкаПолученияДеталиСервисы1С(РезультатВыполнения.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСостояниеДлительнаяОперацияСервисы1С()
	
	Элементы.ГруппаСервисы1СДеталиСодержимое.Видимость = Ложь;
	Элементы.ДекорацияСервисы1СОшибка.Заголовок = "";
	
	Элементы.СтраницыДлительнаяОперацияСервисы1С.Видимость = Истина;
	Элементы.СтраницыДлительнаяОперацияСервисы1С.ТекущаяСтраница =
		Элементы.СтраницаСервисы1СДлительнаяОперация;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьОшибкаПолученияДеталиСервисы1С(СообщениеОбОшибке)
	
	Элементы.СтраницыДлительнаяОперацияСервисы1С.ТекущаяСтраница = Элементы.СтраницаСервисы1СОшибка;
	Элементы.ДекорацияСервисы1СОшибка.Заголовок = СообщениеОбОшибке;
	
	Элементы.СтраницыДлительнаяОперацияСервисы1С.Видимость = Истина;
	Элементы.ГруппаСервисы1СДеталиСодержимое.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДеталиСервисы1С()
	
	Описатель = ОписательЗадания(Задания, "Сервисы1С");
	РезультатОперацииСервиса = ПолучитьИзВременногоХранилища(Описатель.АдресРезультата);
	Если ПустаяСтрока(РезультатОперацииСервиса.ИмяОшибки) Тогда
		
		Данные = РезультатОперацииСервиса.Данные;
		
		Попытка
			ОтобразитьДеталиСервисы1С(Данные);
		Исключение
			ИнформацияОшибка = ИнформацияОбОшибке();
			СообщениеЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось отобразить детали договоров на сервисы.
                    |%1'
                    |;uk='Не вдається відобразити деталі договорів на сервіси.
                    |%1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОшибка));
			МониторПортала1СИТС.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
			ОтобразитьОшибкаПолученияДеталиСервисы1С(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка отображения данных.
                        |%1'
                        |;uk='Помилка відображення даних.
                        |%1'"),
					КраткоеПредставлениеОшибки(ИнформацияОшибка)));
		КонецПопытки;
		
		ПроверитьОбработатьИзменениеСостоянияДоговоровНаСервисы(Данные.serviceContractsStatus.status);
		
	Иначе
		
		ОтобразитьОшибкаПолученияДеталиСервисы1С(РезультатОперацииСервиса.СообщениеОбОшибке);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьОбработатьИзменениеСостоянияДоговоровНаСервисы(НовоеСостояниеДоговоров)
	
	ТекущееСостояниеДоговоров = ДанныеМонитора.serviceContractsStatus.status;
	СостояниеИзменилось       = Ложь;
	
	Если ТекущееСостояниеДоговоров = "OK" Или ТекущееСостояниеДоговоров = "WARNING" Тогда
		
		ДанныеМонитора.serviceContractsStatus.status = НовоеСостояниеДоговоров;
		Если Не ЗначениеЗаполнено(НовоеСостояниеДоговоров) Тогда
			ОтобразитьБлокДоговорыНаСервисы();
			СостояниеВыполненияИзменилось = Истина;
		ИначеЕсли ТекущееСостояниеДоговоров <> НовоеСостояниеДоговоров Тогда
			ОтобразитьОбщееСостояниеДоговоровНаСервисы();
			СостояниеВыполненияИзменилось = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СостояниеИзменилось Тогда
		СохранитьОтпечатокДанныхМонитора(Логин, ДанныеМонитора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДеталиСервисы1С(Данные)
	
	Элементы.СтраницыДлительнаяОперацияСервисы1С.Видимость = Ложь;
	
	Если Данные.serviceContractsStatus.status = "NO_CONTRACTS" Тогда
		Элементы.ГруппаСервисы1СДетали.Видимость = Ложь;
	Иначе
		Элементы.ГруппаСервисы1СДеталиСодержимое.Видимость = Истина;
		Элементы.ДекорацияСервисы1ССписок.Заголовок = МаркированныйСписокСПериодами(
			Данные.serviceContracts,
			Истина);
		Элементы.ДекорацияКакПродлитьСервис1ССсылка.Заголовок =
			ЗаголовокГруппы(ЗаголовокКакПродлитьСрокДействияСервиса(), Ложь);
		Элементы.ДекорацияКакПродлитьСервис1СИнструкция.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокЕстьДействующиеДоговорыНаСервисы()
	Возврат НСтр("ru='Срок действия сервисов';uk='Термін дії сервісів'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокКакОформитьДоговорыНаСервисы()
	Возврат НСтр("ru='Как подключить сервисы?';uk='Як підключити сервіси?'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокЗаканчиваетсяСрокДействияСервиса()
	Возврат НСтр("ru='Заканчивается срок действия сервиса';uk='Закінчується термін дії сервісу'");
КонецФункции

#КонецОбласти

#Область БлокОбновлениеПрограммы

&НаСервере
Процедура ОтобразитьБлокОбновлениеПрограммы()
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		Элементы.ГруппаОбновлениеПрограммы.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ДекорацияОбновлениеСообщениеОбОшибке.Видимость = Ложь;
	Элементы.ГруппаОбновлениеСодержимое.Видимость           = Истина;
	
	Элементы.ДекорацияОбновлениеПрограммыДеталиСсылка.Видимость = Истина;
	Элементы.ГруппаИнформацияОбОбновленииДетали.Видимость       = Ложь;
	НастроитьОтображениеБлокаОбновлениеПрограммы();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеБлокаОбновлениеПрограммы()
	
	Если ДанныеМонитора.updateInfo.updateAvailable Тогда
		
		Элементы.ДекорацияСтатусБлокаОбновлениеПрограммы.Картинка =
			БиблиотекаКартинок.ИнтернетПоддержкаВнимание;
		
		Элементы.ДекорацияОбновлениеПрограммыДеталиСсылка.Заголовок =
			ЗаголовокГруппы(ЗаголовокДоступноОбновлениеПрограммы(), Ложь);
		
		МодульПолучениеОбновленийПрограммы = ОбщегоНазначения.ОбщийМодуль("ПолучениеОбновленийПрограммы");
		Если МодульПолучениеОбновленийПрограммы.ДоступноИспользованиеОбновленияПрограммы(Истина, Ложь) Тогда
			Элементы.ДекорацияУстановитьОбновление.Видимость = Истина;
			Элементы.ДекорацияНадписьОбновлениеОбратитесьКАдминистратору.Видимость = Ложь;
		Иначе
			Элементы.ДекорацияУстановитьОбновление.Видимость = Ложь;
			Элементы.ДекорацияНадписьОбновлениеОбратитесьКАдминистратору.Видимость = Истина;
		КонецЕсли;
		
	Иначе
		
		Элементы.ДекорацияСтатусБлокаОбновлениеПрограммы.Картинка =
			БиблиотекаКартинок.МониторПортала1СИТСПоложительноеСобытие;
		
		Элементы.ДекорацияОбновлениеПрограммыДеталиСсылка.Заголовок =
			ЗаголовокГруппы(ЗаголовокУстановленаАктуальнаяВерсияПрограммы(), Ложь);
		
		Элементы.СтраницыДлительнаяОперацияОбновлениеПрограммы.Видимость = Ложь;
		Элементы.ГруппаИнформацияОбОбновлении.Видимость = Истина;
		Элементы.ДекорацияУстановитьОбновление.Видимость = Ложь;
		Элементы.ДекорацияНадписьОбновлениеОбратитесьКАдминистратору.Видимость = Ложь;
		
		Элементы.ДекорацияИнформацияОбОбновленииКонфигурация.Заголовок =
			ТекстОбновлениеКонфигурацииНеТребуется();
		
		Элементы.ДекорацияИнформацияОбОбновленииПлатформа.Заголовок =
			ТекстОбновлениеПлатформыНеТребуется();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НачатьПолучениеДеталиИнформацияОбОбновленииНаСервере()
	
	МониторПортала1СИТС.ЗаписатьИнформациюВЖурналРегистрации(
		НСтр("ru='Подготовка к получению деталей информации о доступном обновлении.';uk='Підготовка до отримання деталей інформації про доступне оновлення.'"));
	
	Описатель = ОписательЗадания(Задания, "ИнформацияОбОбновлении");
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.КлючФоновогоЗадания = "ПолучениеИнформацииМонитораИнформацияОбОбновлении"
		+ Строка(Новый УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.АдресРезультата = Описатель.АдресРезультата;
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.МониторПортала1СИТС.ПолучитьДеталиИнформацияОДоступномОбновлении",
		Неопределено,
		ПараметрыВыполненияВФоне);
	
	Если РезультатВыполнения.Статус = "Выполняется" Тогда
		
		Описатель.Идентификатор = РезультатВыполнения.ИдентификаторЗадания;
		ОтобразитьСостояниеДлительнаяОперацияИнформацияОбОбновлении();
		
	ИначеЕсли РезультатВыполнения.Статус = "Выполнено" Тогда
		
		ПриПолученииДеталиИнформацияОбОбновлении();
		
	ИначеЕсли РезультатВыполнения.Статус = "Отменено" Тогда
		
		МониторПортала1СИТС.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru='Не удалось отобразить детали информации о доступном обновлении. Задание получение данных отменено.';uk='Не вдається відобразити деталі інформації про доступне оновлення. Завдання отримання даних скасовано.'"));
		ОтобразитьОшибкаПолученияДеталиИнформацияОбОбновлении(НСтр("ru='Задание отменено.';uk='Завдання скасовано.'"));
		
	Иначе
		
		// Ошибка.
		СообщениеЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось получить детали информации о доступном обновлении.
                |%1'
                |;uk='Не вдалося отримати деталі інформації про доступне оновлення.
                |%1'"),
			РезультатВыполнения.ПодробноеПредставлениеОшибки);
		МониторПортала1СИТС.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
		ОтобразитьОшибкаПолученияДеталиИнформацияОбОбновлении(РезультатВыполнения.КраткоеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСостояниеДлительнаяОперацияИнформацияОбОбновлении()
	
	Элементы.ГруппаИнформацияОбОбновлении.Видимость = Ложь;
	Элементы.ДекорацияОбновлениеПрограммыОшибка.Заголовок = "";
	
	Элементы.СтраницыДлительнаяОперацияОбновлениеПрограммы.Видимость = Истина;
	Элементы.СтраницыДлительнаяОперацияОбновлениеПрограммы.ТекущаяСтраница =
		Элементы.СтраницаОбновлениеПрограммыДлительнаяОперация;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьОшибкаПолученияДеталиИнформацияОбОбновлении(СообщениеОбОшибке)
	
	Элементы.СтраницыДлительнаяОперацияОбновлениеПрограммы.ТекущаяСтраница =
		Элементы.СтраницаОбновлениеПрограммыОшибка;
	Элементы.ДекорацияОбновлениеПрограммыОшибка.Заголовок =
		ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(СообщениеОбОшибке);
	
	Элементы.СтраницыДлительнаяОперацияОбновлениеПрограммы.Видимость = Истина;
	Элементы.ГруппаИнформацияОбОбновлении.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПриПолученииДеталиИнформацияОбОбновлении()
	
	Описатель = ОписательЗадания(Задания, "ИнформацияОбОбновлении");
	ИнформацияОбОбновлении = ПолучитьИзВременногоХранилища(Описатель.АдресРезультата);
	Если ПустаяСтрока(ИнформацияОбОбновлении.ИмяОшибки) Тогда
		
		Попытка
			ОтобразитьДеталиИнформацияОбОбновлении(ИнформацияОбОбновлении);
		Исключение
			ИнформацияОшибка = ИнформацияОбОшибке();
			СообщениеЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось отобразить информацию об обновлении.
                    |%1'
                    |;uk='Не вдалося відобразити інформацію про оновлення.
                    |%1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОшибка));
			МониторПортала1СИТС.ЗаписатьОшибкуВЖурналРегистрации(СообщениеЖурнала);
			ОтобразитьОшибкаПолученияДеталиИнформацияОбОбновлении(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка отображения данных.
                        |%1'
                        |;uk='Помилка відображення даних.
                        |%1'"),
					КраткоеПредставлениеОшибки(ИнформацияОшибка)));
		КонецПопытки;
		
	Иначе
		
		ОтобразитьОшибкаПолученияДеталиИнформацияОбОбновлении(ИнформацияОбОбновлении.Сообщение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДеталиИнформацияОбОбновлении(Данные)
	
	Элементы.СтраницыДлительнаяОперацияОбновлениеПрограммы.Видимость = Ложь;
	Элементы.ГруппаИнформацияОбОбновлении.Видимость                  = Истина;
	
	Элементы.ДекорацияИнформацияОбОбновленииКонфигурация.Заголовок =
		ТекстОбновлениеКонфигурации(Данные.Конфигурация);
	Элементы.ДекорацияИнформацияОбОбновленииПлатформа.Заголовок =
		ТекстОбновлениеПлатформы(Данные.Платформа, Данные.Конфигурация);
	
	ДоступноОбновление = Данные.Конфигурация <> Неопределено
		И Не ПустаяСтрока(Данные.Конфигурация.Версия)
		Или Данные.Платформа <> Неопределено
		И Не ПустаяСтрока(Данные.Платформа.Версия);
	
	Если ДоступноОбновление <> ДанныеМонитора.updateInfo.updateAvailable Тогда
		ДанныеМонитора.updateInfo.updateAvailable = ДоступноОбновление;
		НастроитьОтображениеБлокаОбновлениеПрограммы();
		СохранитьОтпечатокДанныхМонитора(Логин, ДанныеМонитора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДекорацияОбновлениеПрограммыДеталиСсылкаНажатиеНаСервере()
	
	Если ДанныеМонитора.updateInfo.updateAvailable Тогда
		
		Элементы.ГруппаИнформацияОбОбновленииДетали.Видимость =
			Не Элементы.ГруппаИнформацияОбОбновленииДетали.Видимость;
		Элементы.ДекорацияОбновлениеПрограммыДеталиСсылка.Заголовок =
			ЗаголовокГруппы(
				ЗаголовокДоступноОбновлениеПрограммы(),
				Элементы.ГруппаИнформацияОбОбновленииДетали.Видимость);
		
		Если Элементы.ГруппаИнформацияОбОбновленииДетали.Видимость Тогда
			НачатьПолучениеДеталиИнформацияОбОбновленииНаСервере();
		Иначе
			ОтменитьЗадание("ИнформацияОбОбновлении");
		КонецЕсли;
		
	Иначе
		
		Элементы.ГруппаИнформацияОбОбновленииДетали.Видимость =
			Не Элементы.ГруппаИнформацияОбОбновленииДетали.Видимость;
		Элементы.ДекорацияОбновлениеПрограммыДеталиСсылка.Заголовок =
			ЗаголовокГруппы(
				ЗаголовокУстановленаАктуальнаяВерсияПрограммы(),
				Элементы.ГруппаИнформацияОбОбновленииДетали.Видимость);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстОбновлениеКонфигурацииНеТребуется()
	
	Возврат ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='<body>● Обновление конфигурации<br />
                |&nbsp;&nbsp;&nbsp;Обновление не требуется. Текущая версия конфигурации <strong>%1</strong><br />
                |&nbsp;&nbsp;&nbsp;%2</body>'
                |;uk='<body>● Оновлення конфігурації<br />
                |&nbsp;&nbsp;&nbsp;Оновлення не потрібне. Поточна версія конфігурації <strong>%1</strong><br />
                |&nbsp;&nbsp;&nbsp;%2</body>'"),
			ИнтернетПоддержкаПользователей.ВерсияКонфигурации(),
			ИнтернетПоддержкаПользователей.СинонимКонфигурации()));
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстОбновлениеПлатформыНеТребуется()
	
	Возврат ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='<body>● Информация о платформе<br />
                |&nbsp;&nbsp;&nbsp;Текущая версия платформы <strong>%1</strong></body>'
                |;uk='<body>● Інформація про платформу<br />
                |&nbsp;&nbsp;&nbsp;Поточна версія платформи <strong>%1</strong></body>'"),
			ИнтернетПоддержкаПользователейКлиентСервер.ТекущаяВерсияПлатформы1СПредприятие()));
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстОбновлениеКонфигурации(ОбновлениеКонфигурации)
	
	Если Не ОбновлениеКонфигурации.ДоступноОбновление Тогда
		
		Возврат ТекстОбновлениеКонфигурацииНеТребуется();
		
	ИначеЕсли Не ПустаяСтрока(ОбновлениеКонфигурации.URLНовоеВВерсии) Тогда
		
		Возврат ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='<body>● Обновление конфигурации<br />
                    |&nbsp;&nbsp;&nbsp;<strong>Версия %1</strong>   <span style=""color: #333333""><a href=""%2"">Новое в версии</a></span><br />
                    |&nbsp;&nbsp;&nbsp;Текущая версия конфигурации <strong>%3</strong><br />
                    |&nbsp;&nbsp;&nbsp;%4</body>'
                    |;uk='<body>● Оновлення конфігурації<br />
                    |&nbsp;&nbsp;&nbsp;<strong>Версія %1</strong> <span style=""color: #333333""><a href=""%2"">Нове у версії</a></span><br />
                    |&nbsp;&nbsp;&nbsp;Поточна версія конфігурації <strong>%3</strong><br />
                    |&nbsp;&nbsp;&nbsp;%4</body>'"),
				ОбновлениеКонфигурации.Версия,
				ОбновлениеКонфигурации.URLНовоеВВерсии,
				ИнтернетПоддержкаПользователей.ВерсияКонфигурации(),
				ИнтернетПоддержкаПользователей.СинонимКонфигурации()));
		
	Иначе
		
		Возврат ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='<body>● Обновление конфигурации<br />
                    |&nbsp;&nbsp;&nbsp;<strong>Версия %1</strong><br />
                    |&nbsp;&nbsp;&nbsp;Текущая версия конфигурации <strong>%2</strong><br />
                    |&nbsp;&nbsp;&nbsp;%3</body>'
                    |;uk='<body>● Оновлення конфігурації<br />
                    |&nbsp;&nbsp;&nbsp;<strong>Версія %1</strong><br />
                    |&nbsp;&nbsp;&nbsp;Поточна версія конфігурації <strong>%2</strong><br />
                    |&nbsp;&nbsp;&nbsp;%3</body>'"),
				ОбновлениеКонфигурации.Версия,
				ИнтернетПоддержкаПользователей.ВерсияКонфигурации(),
				ИнтернетПоддержкаПользователей.СинонимКонфигурации()));
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстОбновлениеПлатформы(ОбновлениеПлатформы, ОбновлениеКонфигурации)
	
	Если Не ОбновлениеПлатформы.ДоступноОбновление Тогда
		
		Возврат ТекстОбновлениеПлатформыНеТребуется();
		
	Иначе
		
		ТекстПояснениеПлатформа = "";
		Если ОбновлениеКонфигурации.ДоступноОбновление Тогда
			
			Если ОбновлениеПлатформы.ОбязательностьУстановки = 0 Тогда
				ТекстПояснениеПлатформа =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Обновление платформы является обязательным для работы с новой версией конфигурации %1.';uk='Оновлення платформи є обов''язковим для роботи з новою версією конфігурації %1.'"),
						ОбновлениеКонфигурации.Версия);
			ИначеЕсли ОбновлениеПлатформы.ОбязательностьУстановки = 1 Тогда
				ТекстПояснениеПлатформа =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Новая версия %1 платформы рекомендуется для работы с новой версией конфигурации %2.';uk='Нова версія %1 платформи рекомендується для роботи з новою версією конфігурації %2.'"),
						ОбновлениеПлатформы.Версия,
						ОбновлениеКонфигурации.Версия);
			Иначе
				ТекстПояснениеПлатформа =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Обновление платформы не является обязательным для работы с новой версией конфигурации %1.';uk='Оновлення платформи не є обов''язковим для роботи з новою версією конфігурації %1.'"),
						ОбновлениеКонфигурации.Версия);
			КонецЕсли;
			
		ИначеЕсли ОбновлениеПлатформы.ОбязательностьУстановки < 2 Тогда
			
			ТекстПояснениеПлатформа =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Рекомендуется установить новую версию платформы.';uk='Рекомендується встановити нову версію платформи.'"),
					ОбновлениеКонфигурации.Версия);
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ОбновлениеПлатформы.URLОсобенностиПерехода) Тогда
			
			Возврат ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
				"<body>"
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='● Обновление платформы<br />
                        |&nbsp;&nbsp;&nbsp;<strong>Версия %1</strong>   <span style=""color: #333333""><a href=""%2"">Особенности перехода на новую версию платформы</a></span><br />
                        |&nbsp;&nbsp;&nbsp;Текущая версия платформы <strong>%3</strong>'
                        |;uk='● Оновлення платформи<br />
                        |&nbsp;&nbsp;&nbsp;<strong>Версія %1</strong> <span style=""color: #333333""><a href=""%2"">Особливості переходу на нову версію платформи</a></span><br />
                        |&nbsp;&nbsp;&nbsp;Поточна версія платформи <strong>%3</strong>'"),
					ОбновлениеПлатформы.Версия,
					ОбновлениеПлатформы.URLОсобенностиПерехода,
					ИнтернетПоддержкаПользователейКлиентСервер.ТекущаяВерсияПлатформы1СПредприятие())
				+ ?(ПустаяСтрока(ТекстПояснениеПлатформа), "", "<br />&nbsp;&nbsp;&nbsp;" + ТекстПояснениеПлатформа)
				+ "</body>");
			
		Иначе
			
			Возврат ИнтернетПоддержкаПользователейКлиентСервер.ФорматированныйЗаголовок(
				"<body>"
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='● Обновление платформы<br />
                        |&nbsp;&nbsp;&nbsp;<strong>Версия %1</strong><br />
                        |&nbsp;&nbsp;&nbsp;Текущая версия платформы <strong>%2</strong>'
                        |;uk='● Оновлення платформи<br />
                        |&nbsp;&nbsp;&nbsp;<strong>Версія %1</strong><br />
                        |&nbsp;&nbsp;&nbsp;Поточна версія платформи <strong>%2</strong>'"),
					ОбновлениеПлатформы.Версия,
					ИнтернетПоддержкаПользователейКлиентСервер.ТекущаяВерсияПлатформы1СПредприятие())
				+ ?(ПустаяСтрока(ТекстПояснениеПлатформа), "", "<br />&nbsp;&nbsp;&nbsp;" + ТекстПояснениеПлатформа)
				+ "</body>");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокДоступноОбновлениеПрограммы()
	Возврат НСтр("ru='Доступно обновление программы';uk='Доступно оновлення програми'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокУстановленаАктуальнаяВерсияПрограммы()
	Возврат НСтр("ru='Установлена актуальная версия программы';uk='Встановлена актуальна версія програми'");
КонецФункции

#КонецОбласти

#КонецОбласти
