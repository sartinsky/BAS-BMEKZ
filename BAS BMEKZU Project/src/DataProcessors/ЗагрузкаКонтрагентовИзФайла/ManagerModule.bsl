#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Считывает данные файла в табличный документ и определяет загружаемые колонки.
//
// Параметры:
//   ПараметрыЗадания - Структура - структура с ключами:
//      * ХранилищеДанныхФайла - ХранилищеЗначения - двоичные данные файла, упакованные в хранилище значений.
//      * РасширениеФайла - Строка - расширение файла.
//      * ОписаниеКолонок - ТаблицаЗначений - описание загружаемых колонок, см. НовыйОписаниеЗагружаемыхКолонок().
//   АдресРезультата - УникальныйИдентификатор - адрес во временном хранилище для сохранения результатов.
//
Процедура ОбработатьДанныеИзФайла(ПараметрыЗадания, АдресРезультата) Экспорт
	
	ПараметрыЗадания.Вставить("МакетЗаголовка", ПолучитьМакет("МакетЗаголовка"));
	
	ТабличныйДокумент = ЗагрузкаДанныхИзВнешнихФайлов.ЗагрузитьФайлВТабличныйДокумент(ПараметрыЗадания);
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеФайла", Новый ХранилищеЗначения(ТабличныйДокумент, Новый СжатиеДанных(9)));
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// По данным табличного документа заполняет таблицу контрагентов для загрузки.
// Выполняет поиск существующих контрагентов.
//
// Параметры:
//   ПараметрыЗадания - Структура - структура с ключами:
//      * ХранилищеДанных - ХранилищеЗначения - табличный документ, содержащий данные.
//   АдресРезультата - УникальныйИдентификатор - адрес во временном хранилище для сохранения результатов.
//
Процедура ПолучитьТаблицуДанныхДляЗагрузки(ПараметрыЗадания, АдресРезультата) Экспорт
	
	ТабличныйДокумент = ПараметрыЗадания.ХранилищеДанных.Получить();
	
	ЗагружаемыеДанные = НовыйТаблицаЗагружаемыхДанных();
	
	ВысотаТаблицы = ТабличныйДокумент.ВысотаТаблицы;
	ШиринаТаблицы = ТабличныйДокумент.ШиринаТаблицы;
	
	// Строки с пустым наименованием будем удалять.
	СтрокиКУдалению = Новый Массив;
	
	Для НомерСтроки = 2 По ВысотаТаблицы Цикл
		
		НоваяСтрока = ЗагружаемыеДанные.Добавить();
		НоваяСтрока.НомерСтроки = НомерСтроки;
		
		Для НомерКолонки = 1 По ШиринаТаблицы Цикл
			
			ИмяКолонки = ТабличныйДокумент.Область(1, НомерКолонки).ПараметрРасшифровки;
			ТекущаяОбласть = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки);
			Если ТекущаяОбласть.ПараметрРасшифровки <> "НеЗагружать" Тогда
				НоваяСтрока.ЗначенияКолонок.Вставить(ИмяКолонки, СокрЛП(ТекущаяОбласть.Текст));
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НоваяСтрока.ЗначенияКолонок);
		
		НоваяСтрока.Статус = ЗагрузкаДанныхИзВнешнихФайловКлиентСервер.СтатусНовый();
		НоваяСтрока.Представление = НСтр("ru='Новый: ';uk='Новий: '") + НоваяСтрока.Наименование;
		
		Если ПустаяСтрока(НоваяСтрока.Наименование) Тогда
			СтрокиКУдалению.Добавить(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ЗагружаемыеДанные.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	// Ищем контрагентов в базе и проставляем статусы для найденных строк.
	НайтиКонтрагентов(ЗагружаемыеДанные);
	
	ПоместитьВоВременноеХранилище(ЗагружаемыеДанные, АдресРезультата);
	
КонецПроцедуры

// Загружает подготовленные данные в информационную базу.
// Создает новых контрагентов, банковские счета, контактных лиц.
//
// Параметры:
//   ПараметрыЗадания - Структура - структура с ключами:
//      * ЗагружаемыеДанные - ТаблицаЗначений - таблица значений с данными для загрузки.
//      * ГруппаДляНовыхКонтрагентов - СправочникСсылка.Контрагенты - группа для новых контрагентов.
//   АдресРезультата - УникальныйИдентификатор - адрес во временном хранилище для сохранения результатов.
//
Процедура ЗагрузитьДанныеИзФайла(ПараметрыЗадания, АдресРезультата) Экспорт
	
	ЗагружаемыеДанные = ПараметрыЗадания.ЗагружаемыеДанные;
	ГруппаДляНовыхКонтрагентов = ПараметрыЗадания.ГруппаДляНовыхКонтрагентов;
	
	Ошибки = Неопределено;
	ТекстОшибки = НСтр("ru='Не удалось записать контрагента %1 по причине:
        |%2'
        |;uk='Не вдалося записати контрагента %1 з причини:
        |%2'");
	
	Для Каждого СтрокаДанных Из ЗагружаемыеДанные Цикл
		
		Если ЗначениеЗаполнено(СтрокаДанных.Контрагент) Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			ДанныеЗаполненияКонтрагента = ДанныеЗаполненияКонтрагента(СтрокаДанных);
			ДанныеЗаполненияКонтрагента.Вставить("ЭтоЗагрузкаИзФайла", Истина);
			
			ДанныеЗаполненияБанковскихСчетов = ДанныеЗаполненияБанковскихСчетов(СтрокаДанных.ЗначенияКолонок);
			ДанныеЗаполненияКонтактногоЛица = РаспознанныеДанныеКонтактногоЛица(СтрокаДанных.ЗначенияКолонок);
			СхемаНалогообложения = ЗначениеКолонкиПоИдентификатору(СтрокаДанных.ЗначенияКолонок, "СхемаНалогообложения");
			
			НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
			НовыйКонтрагент.Заполнить(ДанныеЗаполненияКонтрагента);			
			НовыйКонтрагент.Родитель = ГруппаДляНовыхКонтрагентов;
			НовыйКонтрагент.Записать();
			
			ОсновнойБанковскийСчет = СоздатьБанковскийСчет(НовыйКонтрагент.Ссылка, ДанныеЗаполненияБанковскихСчетов, Ошибки);
			
			Если ЗначениеЗаполнено(ОсновнойБанковскийСчет) Тогда
				НовыйКонтрагент.ДополнительныеСвойства.Очистить();
				НовыйКонтрагент.ОсновнойБанковскийСчет = ОсновнойБанковскийСчет;
				НовыйКонтрагент.Записать();
			КонецЕсли;
			
			ОсновноеКонтактноеЛицо = СоздатьКонтактноеЛицо(НовыйКонтрагент.Ссылка, ДанныеЗаполненияКонтактногоЛица, Ошибки);
			
			Если ЗначениеЗаполнено(ОсновноеКонтактноеЛицо) Тогда
				НовыйКонтрагент.ДополнительныеСвойства.Очистить();
				НовыйКонтрагент.ОсновноеКонтактноеЛицо = ОсновноеКонтактноеЛицо;
				НовыйКонтрагент.Записать();
			КонецЕсли;
			
			СхемаНалогообложенияКонтрагента = ЗаписатьВРегистрСведений(НовыйКонтрагент.Ссылка, СхемаНалогообложения, Ошибки);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			ТекстСообщения = СтрШаблон(ТекстОшибки, СтрокаДанных.Наименование, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "", ТекстСообщения, "");
			
			ТекстСообщения = СтрШаблон(ТекстОшибки, СтрокаДанных.Наименование, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ЗагрузкаДанныхИзВнешнихФайлов.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				Справочники.Контрагенты, , ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибки", Ошибки);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Удаляет строки и колонки, не содержащие полезной информации для загрузки.
//
// Параметры:
//   ПараметрыЗадания - Структура - структура с ключами:
//      * ХранилищеДанных - ХранилищеЗначения - табличный документ, содержащий данные.
//   АдресРезультата - УникальныйИдентификатор - адрес во временном хранилище для сохранения результатов.
//
Процедура УдалитьВсеНенужныеСтрокиТаблицы(ПараметрыЗадания, АдресРезультата) Экспорт
	
	ТабличныйДокумент = ПараметрыЗадания.ХранилищеДанных.Получить();
	
	НайденыНенужныеСтроки = Ложь;
	ЗагрузкаДанныхИзВнешнихФайлов.УдалитьВсеНенужныеСтрокиТаблицы(ТабличныйДокумент, НайденыНенужныеСтроки);
	
	Результат = Новый Структура;
	Результат.Вставить("НайденыНенужныеСтроки", НайденыНенужныеСтроки);
	Результат.Вставить("ХранилищеДанных", Новый ХранилищеЗначения(ТабличныйДокумент, Новый СжатиеДанных(9)));
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункции

Функция ОписаниеЗагружаемыхКолонок() Экспорт
	
	ОписаниеКолонок = ЗагрузкаДанныхИзВнешнихФайлов.НовыйОписаниеЗагружаемыхКолонок();
	
	// Наименование
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "Наименование";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru='Наименование';uk='Найменування'");
	НоваяСтрока.ОбязательнаДляЗаполнения = Истина;
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ПодходящиеЗаголовкиНаименования();
	
	// Полное наименование
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "НаименованиеПолное";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru='Полное наименование';uk='Повне найменування'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ПодходящиеЗаголовкиПолноеНаименование();
	
	// КодПоЕДРПОУ
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "КодПоЕДРПОУ";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru='Код по ЕДРПОУ';uk='Код за ЄДРПОУ'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ПодходящиеЗаголовкиКодПоЕДРПОУ();
	
	// ИНН
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "ИНН";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru='ИНН';uk='ІПН'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ПодходящиеЗаголовкиИНН();
	
	// Схема налогообложения
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "СхемаНалогообложения";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru='Схема налогообложения';uk='Схема оподаткування'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ПодходящиеЗаголовкиСхемаНалогообложения();
	
	// Код филиала (FREDO)
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "КодФилиала";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru='Код филиала';uk='Код філії'");
	//НоваяСтрока.ПодходящиеЗаголовкиФайла = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("КодФилиала");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ПодходящиеЗаголовкиКодФилиала();
	
	// ЮридическоеФизическоеЛицо
	
	// Юридический адрес
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "ЮридическийАдрес";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru='Юридический адрес';uk='Юридична адреса'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ПодходящиеЗаголовкиЮридическогоАдреса();
	
	// Фактический адрес
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "ФактическийАдрес";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru='Фактический адрес';uk='Фактична адреса'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ПодходящиеЗаголовкиФактическогоАдреса();
	
	
	// Расчетный счет
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "НомерСчета";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru='Номер банковского счета';uk='Номер банківського рахунку'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ПодходящиеЗаголовкиРасчетногоСчета();
	
	// МФО банка
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "Банк";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru='МФО Банка';uk='МФО Банку'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ПодходящиеЗаголовкиМФОБанка();

	// Контактное лицо
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "КонтактноеЛицо";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru='Контактное лицо';uk='Контактна особа'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ПодходящиеЗаголовкиКонтактноеЛицо();
	
	// Телефон
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "Телефон";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru='Телефон';uk='Телефон'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ПодходящиеЗаголовкиТелефон();
	
	// Email
	НоваяСтрока = ОписаниеКолонок.Добавить();
	НоваяСтрока.Идентификатор = "Email";
	НоваяСтрока.ПредставлениеКолонки = НСтр("ru='Email';uk='Email'");
	НоваяСтрока.ПодходящиеЗаголовкиФайла = ПодходящиеЗаголовкиАдресЭлектроннойПочты();
	
	Возврат ОписаниеКолонок;
	
КонецФункции

#Область ОписаниеВозможныхЗаголовковВЗагружаемыхФайлах

Функция ПодходящиеЗаголовкиНаименования()
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(НСтр("ru='Наименование';uk='Найменування'"));
	МассивЗаголовков.Добавить(НСтр("ru='Название контрагента';uk='Назва контрагента'"));
	МассивЗаголовков.Добавить(НСтр("ru='Наименование контрагента';uk='Назва контрагента'"));
	МассивЗаголовков.Добавить(НСтр("ru='Название';uk='Назва'"));
	
	Возврат МассивЗаголовков;
	
КонецФункции

Функция ПодходящиеЗаголовкиПолноеНаименование()
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(НСтр("ru='Наименование полное';uk='Найменування повне'"));
	МассивЗаголовков.Добавить(НСтр("ru='Полное наименование';uk='Повне найменування'"));
	
	Возврат МассивЗаголовков;
	
КонецФункции


Функция ПодходящиеЗаголовкиЮридическогоАдреса()
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(НСтр("ru='Юридический адрес';uk='Юридична адреса'"));
	МассивЗаголовков.Добавить(НСтр("ru='Адрес контрагента';uk='Адреса контрагента'"));
	
	Возврат МассивЗаголовков;
	
КонецФункции

Функция ПодходящиеЗаголовкиФактическогоАдреса()
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(НСтр("ru='Фактический адрес';uk= 'Фактична адреса'"));
	
	Возврат МассивЗаголовков;
	
КонецФункции

Функция ПодходящиеЗаголовкиРасчетногоСчета()
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(НСтр("ru='Расчетный счет';uk='Розрахунковий рахунок'"));
	МассивЗаголовков.Добавить(НСтр("ru='Номер счета';uk='Номер рахунку'"));
	МассивЗаголовков.Добавить(НСтр("ru='Номер банковского счета';uk='Номер банківського рахунку'"));
	МассивЗаголовков.Добавить(НСтр("ru='Номер расчетного счета';uk='Номер розрахункового рахунку'"));
	МассивЗаголовков.Добавить(НСтр("ru='р/с';uk='р/р'"));
	
	Возврат МассивЗаголовков;
	
КонецФункции

Функция ПодходящиеЗаголовкиМФОБанка()
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(НСтр("ru='МФО';uk='МФО'"));
	МассивЗаголовков.Добавить(НСтр("ru='Код банка';uk='Код банку'"));
	МассивЗаголовков.Добавить(НСтр("ru='МФО банка';uk='МФО банку'"));
	
	Возврат МассивЗаголовков;
	
КонецФункции

Функция ПодходящиеЗаголовкиКонтактноеЛицо()
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(НСтр("ru='Контактное лицо';uk='Контактна особа'"));
	МассивЗаголовков.Добавить(НСтр("ru='Контакт';uk='Контакт'"));
	
	Возврат МассивЗаголовков;
	
КонецФункции

Функция ПодходящиеЗаголовкиТелефон()
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(НСтр("ru='Телефон';uk='Телефон'"));
	МассивЗаголовков.Добавить(НСтр("ru='Номер телефона';uk='Номер телефону'"));
	
	Возврат МассивЗаголовков;
	
КонецФункции

Функция ПодходящиеЗаголовкиАдресЭлектроннойПочты()
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(НСтр("ru='Email';uk='Email'"));
	МассивЗаголовков.Добавить(НСтр("ru='E-mail';uk='E-mail'"));
	МассивЗаголовков.Добавить(НСтр("ru='Электронная почта';uk='Електронна пошта'"));
	МассивЗаголовков.Добавить(НСтр("ru='Адрес электронной почты';uk='Адреса електронної пошти'"));
	
	Возврат МассивЗаголовков;
	
КонецФункции

Функция ПодходящиеЗаголовкиКодФилиала()
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(НСтр("ru='Код филиала';uk='Код філії'"));
	
	Возврат МассивЗаголовков;
	
КонецФункции

Функция ПодходящиеЗаголовкиСхемаНалогообложения()
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(НСтр("ru='Схема налогообложения';uk='Схема оподаткування'"));
	
	Возврат МассивЗаголовков;
	
КонецФункции

Функция ПодходящиеЗаголовкиКодПоЕДРПОУ()
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(НСтр("ru='Код по ЕДРПОУ';uk='Код за ЄДРПОУ'"));
	
	Возврат МассивЗаголовков;
	
КонецФункции

Функция ПодходящиеЗаголовкиИНН()
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(НСтр("ru='ИНН';uk='ІПН'"));
	
	Возврат МассивЗаголовков;
	
КонецФункции

#КонецОбласти

#Область ПоискИСозданиеЭлементов

Функция НовыйТаблицаЗагружаемыхДанных()
	
	ЗагружаемыеДанные = Новый ТаблицаЗначений;
	
	Для Каждого Реквизит Из Метаданные.Обработки.ЗагрузкаКонтрагентовИзФайла.ТабличныеЧасти.ЗагружаемыеДанные.Реквизиты Цикл
	
		ЗагружаемыеДанные.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
	
	КонецЦикла;
	
	ЗагружаемыеДанные.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	ЗагружаемыеДанные.Колонки.Добавить("ЗначенияКолонок", Новый ОписаниеТипов("Структура"));
	
	Возврат ЗагружаемыеДанные;
	
КонецФункции

Функция ЗначениеКолонкиПоИдентификатору(ЗначенияКолонок, Идентификатор)
	
	ЗначениеКолонки = Неопределено;
	Если ПустаяСтрока(Идентификатор) Тогда
		Возврат ЗначениеКолонки;
	КонецЕсли;
	
	Для Каждого Элемент Из ЗначенияКолонок Цикл
		Если Элемент.Ключ = Идентификатор Тогда
			ЗначениеКолонки = Элемент.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначениеКолонки;
	
КонецФункции

#Область КонтрагентыКонтактныеЛица

Процедура НайтиКонтрагентов(ЗагружаемыеДанные)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТаблицаДляПоиска", ЗагружаемыеДанные);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Наименование КАК Наименование,
	|	Таблица.ИНН КАК ИНН,
	|	Таблица.КодПоЕДРПОУ КАК КодПоЕДРПОУ
	|ПОМЕСТИТЬ ТаблицаДляПоиска
	|ИЗ
	|	&ТаблицаДляПоиска КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДляПоиска.НомерСтроки КАК НомерСтроки,
	|	Контрагенты.Ссылка КАК Контрагент,
	|	ТаблицаДляПоиска.Наименование КАК Наименование,
	|	ТаблицаДляПоиска.ИНН КАК ИНН,
	|	ТаблицаДляПоиска.КодПоЕДРПОУ КАК КодПоЕДРПОУ,
	|	0 КАК ВесВыборки
	|ИЗ
	|	ТаблицаДляПоиска КАК ТаблицаДляПоиска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (Контрагенты.КодПоЕДРПОУ = ТаблицаДляПоиска.КодПоЕДРПОУ)
	|			И ТаблицаДляПоиска.КодПоЕДРПОУ <> &ПустаяСтрока
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления
	|	И НЕ Контрагенты.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДляПоиска.НомерСтроки,
	|	Контрагенты.Ссылка,
	|	ТаблицаДляПоиска.Наименование,
	|	ТаблицаДляПоиска.ИНН,
	|	ТаблицаДляПоиска.КодПоЕДРПОУ,
	|	1
	|ИЗ
	|	ТаблицаДляПоиска КАК ТаблицаДляПоиска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (Контрагенты.КодПоЕДРПОУ = ТаблицаДляПоиска.КодПоЕДРПОУ)
	|			И ТаблицаДляПоиска.КодПоЕДРПОУ <> &ПустаяСтрока
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления
	|	И НЕ Контрагенты.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДляПоиска.НомерСтроки,
	|	Контрагенты.Ссылка,
	|	ТаблицаДляПоиска.Наименование,
	|	ТаблицаДляПоиска.ИНН,
	|	ТаблицаДляПоиска.КодПоЕДРПОУ,
	|	ВЫБОР
	|		КОГДА Контрагенты.КодПоЕДРПОУ = &ПустаяСтрока
	|			ТОГДА 2
	|		ИНАЧЕ 4
	|	КОНЕЦ
	|ИЗ
	|	ТаблицаДляПоиска КАК ТаблицаДляПоиска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (Контрагенты.Наименование = ТаблицаДляПоиска.Наименование)
	|			И ТаблицаДляПоиска.Наименование <> &ПустаяСтрока
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления
	|	И НЕ Контрагенты.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДляПоиска.НомерСтроки,
	|	Контрагенты.Ссылка,
	|	ТаблицаДляПоиска.Наименование,
	|	ТаблицаДляПоиска.ИНН,
	|	ТаблицаДляПоиска.КодПоЕДРПОУ,
	|	ВЫБОР
	|		КОГДА Контрагенты.КодПоЕДРПОУ = &ПустаяСтрока
	|			ТОГДА 3
	|		ИНАЧЕ 4
	|	КОНЕЦ
	|ИЗ
	|	ТаблицаДляПоиска КАК ТаблицаДляПоиска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (Контрагенты.НаименованиеПолное = ТаблицаДляПоиска.Наименование)
	|			И ТаблицаДляПоиска.Наименование <> &ПустаяСтрока
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления
	|	И НЕ Контрагенты.ЭтоГруппа
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	ВесВыборки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПараметрыПоиска = Новый Структура("НомерСтроки");
	Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		
		Выборка.Сбросить();
		ПараметрыПоиска.НомерСтроки = СтрокаТаблицы.НомерСтроки;
		Если Выборка.НайтиСледующий(ПараметрыПоиска) Тогда
			Если Не ПустаяСтрока(Выборка.КодПоЕДРПОУ) И Выборка.ВесВыборки = 4 Тогда
				// Нашли контрагента с тем же наименование, что и в файле, но с другим КодПоЕДРПОУ. Сопоставлять нельзя.
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы.Контрагент = Выборка.Контрагент;
			СтрокаТаблицы.Статус = ЗагрузкаДанныхИзВнешнихФайловКлиентСервер.СтатусНайденный();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеЗаполненияКонтрагента(СтрокаДанных)
	
	ДанныеЗаполнения = Новый Структура;
	
	// Основная информация о контрагенте
	ДанныеЗаполнения.Вставить("Наименование", СтрокаДанных.Наименование);
	ДанныеЗаполнения.Вставить("ИНН", СтрокаДанных.ИНН);
	ДанныеЗаполнения.Вставить("КодПоЕДРПОУ", СтрокаДанных.КодПоЕДРПОУ);
	
	Если Не ПустаяСтрока(ДанныеЗаполнения.КодПоЕДРПОУ) Тогда
		Если СтрДлина(ДанныеЗаполнения.КодПоЕДРПОУ) = 8 Тогда
			ДанныеЗаполнения.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
		Иначе
			ДанныеЗаполнения.Вставить("ЮридическоеФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
		КонецЕсли;
	Иначе			
		ДанныеЗаполнения.Вставить("ЮридическоеФизическоеЛицо",Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	КонецЕсли;

	КодФилиала = ЗначениеКолонкиПоИдентификатору(СтрокаДанных.ЗначенияКолонок, "КодФилиала");
	ДанныеЗаполнения.Вставить("КодФилиала", КодФилиала);

	НаименованиеПолное = ЗначениеКолонкиПоИдентификатору(СтрокаДанных.ЗначенияКолонок, "НаименованиеПолное");
	Если НаименованиеПолное <> Неопределено И Не ПустаяСтрока(НаименованиеПолное) Тогда
		ДанныеЗаполнения.Вставить("НаименованиеПолное", НаименованиеПолное);
	Иначе
		ДанныеЗаполнения.Вставить("НаименованиеПолное", СтрокаДанных.Наименование);
	КонецЕсли;
	
	// Адреса
	ЮридическийАдрес = ЗначениеКолонкиПоИдентификатору(СтрокаДанных.ЗначенияКолонок, "ЮридическийАдрес");
	Если ЮридическийАдрес <> Неопределено И Не ПустаяСтрока(ЮридическийАдрес) Тогда
		//ЮридическийАдресЗначениеJSON = ПривестиАдресКФорматуБСП(ЮридическийАдрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		ЮридическийАдресЗначениеJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
			ЮридическийАдрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		ДанныеЗаполнения.Вставить("ЮридическийАдресЗначениеJSON", ЮридическийАдресЗначениеJSON);
	Иначе
		ДанныеЗаполнения.Вставить("ЮридическийАдресЗначениеJSON", "");
	КонецЕсли;
	
	ФактическийАдрес = ЗначениеКолонкиПоИдентификатору(СтрокаДанных.ЗначенияКолонок, "ФактическийАдрес");
	Если ФактическийАдрес <> Неопределено И Не ПустаяСтрока(ФактическийАдрес) Тогда
		//ФактическийАдресЗначениеJSON = ПривестиАдресКФорматуБСП(ФактическийАдрес, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
		ФактическийАдресЗначениеJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
			ФактическийАдрес, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
		ДанныеЗаполнения.Вставить("ФактическийАдресЗначениеJSON", ФактическийАдресЗначениеJSON);
	КонецЕсли;
	
	// Контактная информация
	Телефон = ЗначениеКолонкиПоИдентификатору(СтрокаДанных.ЗначенияКолонок, "Телефон");
	Если Телефон <> Неопределено И Не ПустаяСтрока(Телефон) Тогда
		ТелефонЗначениеJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
			Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента);
		ДанныеЗаполнения.Вставить("ТелефонЗначениеJSON", ТелефонЗначениеJSON);
	КонецЕсли;
	
	Email = ЗначениеКолонкиПоИдентификатору(СтрокаДанных.ЗначенияКолонок, "Email");
	Если Email <> Неопределено И Не ПустаяСтрока(Email) Тогда
		EmailЗначениеJSON = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
			Email, Справочники.ВидыКонтактнойИнформации.EmailКонтрагенты);
		ДанныеЗаполнения.Вставить("АдресЭлектроннойПочтыЗначениеJSON", EmailЗначениеJSON);
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция РаспознанныеДанныеКонтактногоЛица(ЗначенияКолонок)
	
	КонтактноеЛицо = ЗначениеКолонкиПоИдентификатору(ЗначенияКолонок, "КонтактноеЛицо");
	Если КонтактноеЛицо = Неопределено Или ПустаяСтрока(КонтактноеЛицо) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеКонтактногоЛица = Новый Структура;
	
	ФИОДолжность = СтрРазделить(КонтактноеЛицо, ",", Ложь);
	НаименованиеКонтактногоЛица = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КонтактноеЛицо,",")[0];
	ДанныеКонтактногоЛица.Вставить("Наименование", НаименованиеКонтактногоЛица);
	
	Если ФИОДолжность.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФИОЛица = СтрРазделить(ФИОДолжность[0], " ", Ложь);
	
	КоличествоСлов = ФИОЛица.Количество();
	Если КоличествоСлов >= 1 Тогда
		ДанныеКонтактногоЛица.Вставить("Фамилия", ФИОЛица[0]);
	КонецЕсли;
	
	Если КоличествоСлов >= 2 Тогда
		ДанныеКонтактногоЛица.Вставить("Имя", ФИОЛица[1]);
	КонецЕсли;
	
	Если КоличествоСлов >= 3 Тогда
		ДанныеКонтактногоЛица.Вставить("Отчество", ФИОЛица[2]);
	КонецЕсли;
	
	Если ФИОДолжность.Количество() > 1 Тогда
		ДанныеКонтактногоЛица.Вставить("Должность", ФИОДолжность[1]);
	КонецЕсли;
			
	Возврат ДанныеКонтактногоЛица;
	
КонецФункции

Функция СоздатьКонтактноеЛицо(Контрагент, ДанныеЗаполненияКонтактногоЛица, Ошибки)
	
	Если ТипЗнч(ДанныеЗаполненияКонтактногоЛица) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СозданноеКонтактноеЛицо = Новый Массив;
		
	НовоеКонтактноеЛицо = Справочники.КонтактныеЛица.СоздатьЭлемент();
	НовоеКонтактноеЛицо.ОбъектВладелец = Контрагент;
	НовоеКонтактноеЛицо.Заполнить(ДанныеЗаполненияКонтактногоЛица);
		
	НовоеКонтактноеЛицо.Записать();
	СозданноеКонтактноеЛицо.Добавить(НовоеКонтактноеЛицо.Ссылка);
			
	Если СозданноеКонтактноеЛицо.Количество() = 1 Тогда
		ОсновноеКонтактноеЛицо = СозданноеКонтактноеЛицо[0];
	Иначе
		ОсновноеКонтактноеЛицо = Неопределено;
	КонецЕсли;
	
	Возврат ОсновноеКонтактноеЛицо;
	
КонецФункции

#КонецОбласти

#Область БанковскиеСчета

Функция СоздатьБанковскийСчет(Контрагент, ДанныеЗаполненияБанковскихСчетов, Ошибки)
	
	Если ТипЗнч(ДанныеЗаполненияБанковскихСчетов) <> Тип("Массив") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СозданныеСчета = Новый Массив;
	Для Каждого ДанныеЗаполнения Из ДанныеЗаполненияБанковскихСчетов Цикл
		
		НовыйБанковскийСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
		НовыйБанковскийСчет.Владелец = Контрагент;
		НовыйБанковскийСчет.Заполнить(ДанныеЗаполнения);
		
		НовыйБанковскийСчет.Записать();
		СозданныеСчета.Добавить(НовыйБанковскийСчет.Ссылка);
		
	КонецЦикла;
	
	Если СозданныеСчета.Количество() = 1 Тогда
		ОсновнойБанковскийСчет = СозданныеСчета[0];
	Иначе
		ОсновнойБанковскийСчет = Неопределено;
	КонецЕсли;
	
	Возврат ОсновнойБанковскийСчет;
	
КонецФункции

Функция ДанныеЗаполненияБанковскихСчетов(ЗначенияКолонок)
	
	СтруктураБанковскогоСчета = НовыйСтруктураБанковскогоСчета();
	
	ЗаполнитьЗначенияСвойств(СтруктураБанковскогоСчета, ЗначенияКолонок);
	Если СтруктураБанковскогоСчета.НомерСчета = Неопределено Тогда
		Возврат Неопределено;
		
	ИначеЕсли Не ПустаяСтрока(СтруктураБанковскогоСчета.НомерСчета) Тогда
		БанковскиеСчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтруктураБанковскогоСчета);
	Иначе
		БанковскиеСчета = Новый Массив;
	КонецЕсли;
	
	Для Каждого БанковскийСчет Из БанковскиеСчета Цикл
			
		Банк = " ";
		БанковскийСчет.НомерСчета = БанковскийСчет.НомерСчета;
		КодБанкаПоСчету = УправлениеДенежнымиСредствами.ПолучитьКодБанкаПоНомеруСчетаIBAN(БанковскийСчет.НомерСчета);
		
		Если ЗначениеЗаполнено(БанковскийСчет.Банк) Тогда
			
			Банк = Справочники.Банки.НайтиПоКоду(СокрЛП(БанковскийСчет.Банк));
			
		ИначеЕсли ЗначениеЗаполнено(КодБанкаПоСчету) Тогда
			
			Банк = Справочники.Банки.НайтиПоКоду(СокрЛП(КодБанкаПоСчету));
			
		КонецЕсли;
		БанковскийСчет.Банк = Банк;
		БанковскийСчет.Наименование = БанковскийСчет.НомерСчета + ", " + БанковскийСчет.Банк;
		
	КонецЦикла;
	
	Возврат БанковскиеСчета;
	
КонецФункции

Функция НовыйСтруктураБанковскогоСчета()
	
	СтруктураБанковскогоСчета = Новый Структура;
	СтруктураБанковскогоСчета.Вставить("НомерСчета");
	СтруктураБанковскогоСчета.Вставить("Банк");
	СтруктураБанковскогоСчета.Вставить("Наименование");
	
	Возврат СтруктураБанковскогоСчета;
	
КонецФункции

#КонецОбласти

#Область СхемаНалогообложения

Функция ЗаписатьВРегистрСведений(Контрагент, ДанныеЗаполнения, Ошибки)
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Строка") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ИмяОбъекта.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СхемыНалогообложения КАК ИмяОбъекта
	|ГДЕ
	|	ИмяОбъекта.Предопределенный
	|	И ИмяОбъекта.Наименование = &ИмяПредопределенныхДанных";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИмяПредопределенныхДанных", ДанныеЗаполнения);
	Выборка = Запрос.Выполнить().Выбрать(); 
	Пока Выборка.Следующий() Цикл  
		СсылкаСпр = Выборка.Ссылка;
	КонецЦикла;
	
	МенеджерЗаписи = РегистрыСведений.СхемыНалогообложенияКонтрагентов.СоздатьМенеджерЗаписи(); 
	МенеджерЗаписи.Период = ТекущаяДата();
	МенеджерЗаписи.Контрагент = Контрагент;
	МенеджерЗаписи.СхемаНалогообложения = СсылкаСпр; 
	МенеджерЗаписи.Записать(); 
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли