
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем ВозрастРелизаКонфигурации;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура СформироватьТаблицуОтчета(СтрЗначений)
	
	ТаблицаВывода.Очистить();
	
	ТаблицаОтчета = Новый ТаблицаЗначений;
	
	ТаблицаОтчета.Колонки.Добавить("Группировка");
	ТаблицаОтчета.Колонки.Добавить("СчетУчета");
	ТаблицаОтчета.Колонки.Добавить("ОбъектУчета");
	ТаблицаОтчета.Колонки.Добавить("Ошибка");
	ТаблицаОтчета.Колонки.Добавить("Сообщения");
	ТаблицаОтчета.Колонки.Добавить("Рекомендация");
	ТаблицаОтчета.Колонки.Добавить("ВывестиСтрокуОшибки"); 
	ТаблицаОтчета.Колонки.Добавить("ВывестиСтрокуРекомендации");
	ТаблицаОтчета.Колонки.Добавить("ЭтоПроверка");
	
	ЗначениеСтроки = СтрЗаменить(СтрЗначений, "#", Символы.ПС);
	
	Для А = 1 По СтрЧислоСтрок(ЗначениеСтроки) Цикл
		НоваяСтрока = ТаблицаОтчета.Добавить();
		ТекЗначениеСтроки = СтрПолучитьСтроку(ЗначениеСтроки, А);
		
		ЗначениеКолонки = СтрЗаменить(ТекЗначениеСтроки, "|", Символы.ПС);
		
		Для Б = 1 По СтрЧислоСтрок(ЗначениеКолонки) Цикл
			ТекЗначениеКолонки = СтрПолучитьСтроку(ЗначениеКолонки, Б);
			НоваяСтрока.Установить(Б-1, ТекЗначениеКолонки);
		КонецЦикла;	
	КонецЦикла;
	
	Макет = Обработки.ПереносДанныхИзИнформационныхБаз1СПредприятия77.ПолучитьМакет("СписокОшибокПроверкиДанных77");
	
	ОбластьШапка  = Макет.ПолучитьОбласть("Шапка");
	ТаблицаВывода.Вывести(ОбластьШапка);
	ТаблицаВывода.ФиксацияСверху = 2;
	
	ОбластьГруппировка1    = Макет.ПолучитьОбласть("Группировка1");
	ОбластьГруппировка2    = Макет.ПолучитьОбласть("Группировка2");
	ОбластьГруппировка3    = Макет.ПолучитьОбласть("Группировка3");
	ОбластьОшибка          = Макет.ПолучитьОбласть("Ошибка");
	ОбластьСтрока          = Макет.ПолучитьОбласть("Строка");
	ОбластьСтрокаСПробелом = Макет.ПолучитьОбласть("СтрокаСПробелом");
	ОбластьРекомендация    = Макет.ПолучитьОбласть("Рекомендация");
	
	СчетчикГруппировки1 = 0;
	СчетчикГруппировки2 = 0;
	СчетчикГруппировки3 = 0;
	НомерПроверки       = 0;
	КолОшибок           = 0;
	ВсегоОшибок         = "";
	
	ВсегоОшибокГруппы1  = 0;
	ВсегоОшибокГруппы2  = 0;
	ВсегоОшибокГруппы3  = 0;
	
	Кол = ТаблицаОтчета.Количество();
	Для Каждого СтрокаТаблицы Из ТаблицаОтчета Цикл 
		Если СтрокаТаблицы.Группировка = "1" Тогда 
			ВсегоОшибокГруппы1 = ВсегоОшибокГруппы1 + 1;
		ИначеЕсли СтрокаТаблицы.Группировка = "2" Тогда 
			ВсегоОшибокГруппы2 = ВсегоОшибокГруппы2 + 1;
		ИначеЕсли СтрокаТаблицы.Группировка = "3" Тогда
			ВсегоОшибокГруппы3 = ВсегоОшибокГруппы3 + 1;
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОтчета Цикл
		Если СтрокаТаблицы.Группировка = "1" Тогда
			Если ВсегоОшибокГруппы1 > 0 Тогда
				СчетчикГруппировки1 = СчетчикГруппировки1 + 1;
				
				Если СчетчикГруппировки1 = 1 Тогда
					ОбластьГруппировка1.Параметры.ВсегоОшибок = Строка(ВсегоОшибокГруппы1);
					ТаблицаВывода.Вывести(ОбластьГруппировка1);
					ТаблицаВывода.НачатьГруппуСтрок("", Истина);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрокаТаблицы.Группировка = "2" Тогда
			Если ВсегоОшибокГруппы2 > 0 Тогда
				СчетчикГруппировки2 = СчетчикГруппировки2 + 1;
				
				Если СчетчикГруппировки2 = 1 Тогда
					ТаблицаВывода.ЗакончитьГруппуСтрок();
					ОбластьГруппировка2.Параметры.ВсегоОшибок = Строка(ВсегоОшибокГруппы2);
					ТаблицаВывода.Вывести(ОбластьГруппировка2);
					ТаблицаВывода.НачатьГруппуСтрок("", Истина);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрокаТаблицы.Группировка = "3" Тогда
			Если ВсегоОшибокГруппы3 > 0 Тогда
				СчетчикГруппировки3 = СчетчикГруппировки3 + 1;	
				
				Если СчетчикГруппировки3 = 1 Тогда
					ТаблицаВывода.ЗакончитьГруппуСтрок();
					ОбластьГруппировка3.Параметры.ВсегоОшибок = Строка(ВсегоОшибокГруппы3);
					ТаблицаВывода.Вывести(ОбластьГруппировка3);
					ТаблицаВывода.НачатьГруппуСтрок("", Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
		
		КолОшибок = КолОшибок + 1;
		
		Если (СтрокаТаблицы.ВывестиСтрокуОшибки = "1") или (СтрокаТаблицы.ЭтоПроверка = "1") Тогда 
			НомерПроверки = НомерПроверки + 1; 
			ОбластьОшибка.Параметры.СтрОшибка = СтрокаТаблицы.Ошибка; 
			ОбластьОшибка.Параметры.СтрНПП = "  " + НомерПроверки;
			ОбластьСтрокаСПробелом.Параметры.СтрНПП = "  " + НомерПроверки; 
			
			Если СтрокаТаблицы.ЭтоПроверка = "1" Тогда
				КолОшибок = 0;
			КонецЕсли;	
			
			Если СтрокаТаблицы.ВывестиСтрокуОшибки = "1" Тогда 
				КолОшибок = 1;
				ТаблицаВывода.Вывести(ОбластьОшибка); 
			КонецЕсли;
		КонецЕсли;
		
		ОбластьСтрока.Параметры.СтрНПП = "  " + Строка(НомерПроверки) + ?(КолОшибок=0, "", "." + КолОшибок);
		ОбластьСтрока.Параметры.СтрСообщение = СтрокаТаблицы.Сообщения;
		ОбластьСтрокаСПробелом.Параметры.СтрСообщение = СтрокаТаблицы.Сообщения;
		
		Если СтрокаТаблицы.ЭтоПроверка = "1" Тогда  
			ТаблицаВывода.Вывести(ОбластьСтрокаСПробелом);
		Иначе
			ТаблицаВывода.Вывести(ОбластьСтрока);
		КонецЕсли;
		
		Если СтрокаТаблицы.ВывестиСтрокуРекомендации = "1" Тогда 
			ОбластьРекомендация.Параметры.СтрРекомендация = СтрокаТаблицы.Рекомендация;
			ТаблицаВывода.Вывести(ОбластьРекомендация); 
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаВывода.ЗакончитьГруппуСтрок();
	
	ТаблицаВывода.ОтображатьЗаголовки = Ложь;
	ТаблицаВывода.ОтображатьСетку = Ложь;
	ТаблицаВывода.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТаблицаВывода.ПолеСверху = 0;
	ТаблицаВывода.ПолеСлева = 0;
	ТаблицаВывода.ПолеСнизу = 0;
	ТаблицаВывода.ПолеСправа = 0;
	ТаблицаВывода.АвтоМасштаб = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияПроведениеДокументов()
	
	ПроведениеДокументов();
	
	Если НЕ Ошибка Тогда
		Перерисовать(4, "Успех", Истина);
	КонецЕсли;
	
	// Шаг № 3 проверка загруженных данных
	ЭтапКонвертации = "Проверка данных";
	Перерисовать(5, "Выполняется", Истина);
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПроверкаДанных", 0.5, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияПроверкаДанных()
	
	ОповеститьОбИзмененииЗадачБухгалтера = Ложь;
	ПроверитьДанныеНаСервере(ОповеститьОбИзмененииЗадачБухгалтера);
	Если Ошибка Тогда
		Перерисовать(5);
		Элементы.СтраницыРезультат.ТекущаяСтраница = Элементы.Ошибки;
	Иначе
		Перерисовать(5, "Успех", Истина);
		Элементы.СтраницыРезультат.ТекущаяСтраница = Элементы.Успех;			
	КонецЕсли;
	Элементы.КомандаЗакрыть.Доступность = Истина;

	Элементы.СтраницыЗаголовокПеренос.ТекущаяСтраница = Элементы.СтраницаЗаголовокПереносЗавершен;
	Оповестить("ЗавершениеЗагрузкиИз1СПредприятия77");
	
	
	Если ОсновнаяОрганизация Тогда
		ОбщегоНазначенияБПКлиент.УстановитьОсновнуюОрганизацию(Организация);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ПодключитьсяКИБ()
	
	Если Элементы.ТаблицаПути.ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Не удалось произвести подключение к информационной базе';uk='Не вдалося зробити підключення до інформаційної бази'");		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения, НСтр("ru='Возможно, на Вашем компьютере не установлена платформа 7.7, либо используется БАЗОВАЯ версия программы. Воспользуйтесь вариантом загрузки данных из файла, предварительно сформировав его в информационной базе, из которой производится перенос данных.';uk=""Можливо, на Вашому комп'ютері не встановлена платформа 7.7, або використовується БАЗОВА версія програми. Скористайтеся варіантом завантаження даних з файлу, попередньо сформувавши його в інформаційній базі, з якої виконується перенесення даних."""));
		Ошибка = Истина;
		Возврат 0;
	КонецЕсли;
	
	ПутьКИБ = Элементы.ТаблицаПути.ТекущиеДанные.Путь;
	ИмяИБ   = Элементы.ТаблицаПути.ТекущиеДанные.Имя;
	
	// Шаг №1 - подключение к ИБ
	ЭтапКонвертации = "Подключение к информационной базе";
	Перерисовать(1, "Выполняется", Истина);
	Попытка
		v7 = Новый COMObject("V1CEnterprise.Application"); 
	Исключение
		Перерисовать(1);
		ТекстСообщения = НСтр("ru='Не удалось произвести подключение к информационной базе';uk='Не вдалося зробити підключення до інформаційної бази'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения, НСтр("ru='Возможно, на Вашем компьютере не установлена платформа 7.7, либо используется БАЗОВАЯ версия программы. Воспользуйтесь вариантом загрузки данных из файла, предварительно сформировав его в информационной базе, из которой производится перенос данных.';uk=""Можливо, на Вашому комп'ютері не встановлена платформа 7.7, або використовується БАЗОВА версія програми. Скористайтеся варіантом завантаження даних з файлу, попередньо сформувавши його в інформаційній базі, з якої виконується перенесення даних."""));
		Ошибка = Истина;
		Возврат 0;
	КонецПопытки;
	
	Открыта = v7.Initialize(v7.RMTrade, "/D""" + ПутьКИБ + """ /M ", "NO_SPLASH_SHOW");
	
	Если НЕ Открыта Тогда
		Перерисовать(1);
		ТекстСообщения = НСтр("ru='Не удалось произвести подключение к информационной базе';uk='Не вдалося зробити підключення до інформаційної бази'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения, НСтр("ru='Возможно, пользователь отменил подключение к информационной базе, либо была попытка немонопольного подключения.';uk='Можливо, користувач скасував підключення до інформаційної бази, або була спроба немонопольного підключення.'"));
		Ошибка = Истина;
		Возврат 0;
	КонецЕсли;
	
	Возврат v7;
	
КонецФункции

&НаКлиенте
Функция ВыгрузитьИзИБ(v7)
	ДатаНачалаСтр = КонецДня(ДатаНачала);
	
	
	ДатаОкончанияСтр = КонецДня(ДатаНачала);
	ВыгружатьСправочники       = ?(ВариантВыгрузкиСправочники,1,0);
	ВыгружатьОстатки           = ?(ВариантВыгрузкиОстатки,1,0);
	
	Объект.ИмяФайлаДанных = ИмяФайлаДанных;
	
	ПроверкаДанныхЧисло = 0;
	
	Если ПроверкаДанных Тогда
		ПроверкаДанныхЧисло = 1;
	КонецЕсли;	
	
	Если ВыгружатьОстатки Тогда
		Результат = v7.ВыгрузкаВ1СБухгалтерию8(Строка(ДатаНачалаСтр), Строка(ДатаОкончанияСтр), ИмяФайлаОбработки, ИмяФайлаПравил, ИмяФайлаДанных, КодФирмы);
	Иначе
		Результат = v7.ВыгрузкаВ1СБухгалтерию8(Строка(ДатаНачалаСтр), Строка(ДатаОкончанияСтр), ИмяФайлаОбработки, ИмяФайлаПравилСправочники, ИмяФайлаДанных, КодФирмы);
	КонецЕсли;
	
	Если ПроверкаДанных Тогда
		Если ИдентификаторКонфигурации <> "UBUTK" Тогда
			ТекстСообщения = НСтр("ru='Проверка данных перед выгрузкой выполняется только для конфигурации ""Бухгалтерия 7.7""';uk='Перевірка даних перед вивантаженням виконується тільки для конфігурації ""Бухгалтерія 7.7""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ИначеЕсли ВозрастРелизаКонфигурации < 317 Тогда
			ТекстСообщения = НСтр("ru='Для проверки данных перед выгрузкой из ""Бухгалтерии 7.7"" требуется релиз не ниже 7.70.317';uk='Для перевірки даних перед вивантаженням з ""Бухгалтерії 7.7"" потрібний реліз не нижче 7.70.317'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПолучитьФайлДанных(v7)
	
	мПустаяСтрока = "";
	
	Попытка
		ИдентификаторКонфигурации = v7.глИдентификаторКонфигурации();
		НомерРелизаКонфигурации = v7.Константа.НомерРелиза;
	Исключение
		Перерисовать(1);
		ТекстСообщения = НСтр("ru='Производится перенос данных из конфигурации, для которой не предусмотрена конвертация';uk='Проводиться перенесення даних з конфігурації, для якої не передбачена конвертація'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения, НСтр("ru='Перенос из выбранной конфигурации не поддерживается.';uk='Перенос із обраної конфігурації не підтримується.'"));
		Ошибка = Истина;
		Возврат мПустаяСтрока;
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ИдентификаторКонфигурации)
		И НомерРелизаКонфигурации <> Неопределено Тогда
		
		Если ИдентификаторКонфигурации = "UBUTK" Тогда
			ИмяКонвертацияОбработка = "ACC_ert";				
			ИмяКонвертацияПравила   = "ACC_xml";
			ИмяКонвертацияПравилаСправочники = "ACC_Справочники_xml";
		Иначе
			Перерисовать(1);
			ТекстСообщения = НСтр("ru='Для выбранной конфигурации конвертация не поддерживается';uk='Для обраної конфігурації конвертація не підтримується'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения, НСтр("ru='Перенос из выбранной конфигурации не поддерживается.';uk='Перенос із обраної конфігурації не підтримується.'"));
			Ошибка = Истина;
			Возврат мПустаяСтрока;
		КонецЕсли;
		
		ВозрастРелизаКонфигурации = Число(Прав(СокрЛП(НомерРелизаКонфигурации), 3));
		
		ИмяВременногоФайлаПравил     = "";
		ИмяВременногоФайлаПравилСправочники     = "";
		ИмяВременногоФайлаОбработки  = "";
		ИмяВременногоФайлаДанных     = "";
		
		Ошибка =  ОпределитьКонфигурациюИПолучитьФайлы(ВозрастРелизаКонфигурации, ИмяКонвертацияПравила, ИмяКонвертацияПравилаСправочники, ИмяВременногоФайлаПравил, ИмяВременногоФайлаПравилСправочники, ИмяКонвертацияОбработка, ИмяВременногоФайлаОбработки, ИмяВременногоФайлаДанных);
		Если Ошибка Тогда
			Перерисовать(1);
			Возврат мПустаяСтрока;
		КонецЕсли;
		
		Если НЕ ПроверкаДанных Тогда
			Если СокрЛП(v7.Метаданные.Константа("ПрефиксДляВыгрузкиВ1СБухгалтерию8").ПолныйИдентификатор())<>"" Тогда
				//в базе назначения есть константа префикса
				//прочитаем ее, и если она пуста - то запросим ее
				Если  СокрЛП(v7.Константа.ПрефиксДляВыгрузкиВ1СБухгалтерию8) = "" Тогда
					ПараметрыФормыВводаПрефикса = Новый Структура("ПрефиксОрганизации", "");
					
					ДополнительныеПараметры = Новый Структура;
					ДополнительныеПараметры.Вставить("v7", v7);
					ДополнительныеПараметры.Вставить("ИмяВременногоФайлаОбработки", ИмяВременногоФайлаОбработки);
					ДополнительныеПараметры.Вставить("ИмяВременногоФайлаПравил",    ИмяВременногоФайлаПравил);
					ДополнительныеПараметры.Вставить("ИмяВременногоФайлаПравилСправочники",    ИмяВременногоФайлаПравилСправочники);
					ДополнительныеПараметры.Вставить("ИмяВременногоФайлаДанных",    ИмяВременногоФайлаДанных);
					
					ОповещениеОЗакрытии = Новый ОписаниеОповещения("КонвертацияИнформационнойБазыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
					
					ОткрытьФорму("Обработка.ПереносДанныхИзИнформационныхБаз1СПредприятия77.Форма.ПрефиксОрганизации", ПараметрыФормыВводаПрефикса,,,,, ОповещениеОЗакрытии);
					Возврат мПустаяСтрока;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ИмяФайлаОбработки = ИмяВременногоФайлаОбработки;
		ИмяФайлаПравил    = ИмяВременногоФайлаПравил;
		ИмяФайлаПравилСправочники = ИмяВременногоФайлаПравилСправочники;
		ИмяФайлаДанных    = ИмяВременногоФайлаДанных;
		
		Возврат ИмяВременногоФайлаДанных;
		
	Иначе
		ТекстСообщения = НСтр("ru='Для выбранной конфигурации конвертация не поддерживается';uk='Для обраної конфігурації конвертація не підтримується'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения, НСтр("ru='Перенос из выбранной конфигурации не поддерживается.';uk='Перенос із обраної конфігурації не підтримується.'"));
		Перерисовать(1);
		Ошибка = Истина;
		Возврат мПустаяСтрока;
	КонецЕсли;
	
	Возврат мПустаяСтрока;
	
КонецФункции

&НаКлиенте
Процедура ПереносДанныхИзИБ(v7)
	
	Если КодФирмы = "" Тогда
	
		Попытка
			Текст = v7.СформироватьСписокОрганизацийДля1СБухгалтерии8();
		Исключение
			ЗафиксироватьОшибку(ЭтаФорма, НСтр("ru='Определение организации';uk='Визначення організації'"), НСтр("ru='Производится считываение организаций.';uk='Виконується зчитування організацій.'"), НСтр("ru='Считываение организаций не выполненно.';uk='Зчитування організацій не виконано.'"));
			Ошибка = Истина;
			Возврат;
		КонецПопытки;
		
		ПараметрыФормыВыбораОрганизации = Новый Структура("ТекстФирмы", Текст);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("v7", v7);
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПереносДанныхИзИБЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Обработка.ПереносДанныхИзИнформационныхБаз1СПредприятия77.Форма.ВыборФирмы", ПараметрыФормыВыбораОрганизации,,,,, ОповещениеОЗакрытии);
		
	КонецЕсли;
		
КонецПроцедуры
	
&НаКлиенте
Процедура ПереносДанныхИзИБЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	v7 = ДополнительныеПараметры.v7;
	
	КодФирмы = РезультатЗакрытия;
	
	ВыгрузкаДанныхИзИБ(v7);
	
	Если НЕ Ошибка Тогда
		// Шаг № 3 инициализация обмена и загрузка данных
		ЭтапКонвертации = "Загрузка данных";
		Перерисовать(3, "Выполняется", Истина);
		ЗагрузкаИнформационнойБазы();
		Если НЕ Ошибка Тогда
			Перерисовать(3, "Успех", Истина);
			// Шаг № 4 проведение документов только при условии что выгружались остатки
			ЭтапКонвертации = "Проведение документов";
			Перерисовать(4, "Выполняется", Истина);
			ПодключитьОбработчикОжидания("ОбработчикОжиданияПроведениеДокументов", 0.5, Истина);
		КонецЕсли;
	КонецЕсли;			
	
	Если Ошибка Тогда
		Элементы.СтраницыРезультат.ТекущаяСтраница = Элементы.Ошибки;				
		Элементы.КомандаЗакрыть.Доступность = Истина;
		Элементы.СтраницыЗаголовокПеренос.ТекущаяСтраница = Элементы.СтраницаЗаголовокПереносЗавершен;
		Оповестить("ЗавершениеЗагрузкиИз1СПредприятия77");
		
		Если ОсновнаяОрганизация Тогда
			ОбщегоНазначенияБПКлиент.УстановитьОсновнуюОрганизацию(Организация);
		КонецЕсли;
		
	КонецЕсли;
		
	
КонецПроцедуры

&НаКлиенте
Процедура  ВыгрузкаДанныхИзИБ(v7)
	
	Перерисовать(1, "Успех", Истина);
	
	// Шаг № 2 выгрузка данных
	ЭтапКонвертации = "Выгрузка данных";
	
	Попытка
		Перерисовать(2, "Выполняется", Истина);
		
		Результат = ВыгрузитьИзИБ(v7);
		v7 = "";
		
		ТипЧисло = Тип("Число");
		Если ТипЗнч(Результат) = ТипЧисло Тогда
			Перерисовать(2);
			ТекстСообщения = НСтр("ru='Не удалось произвести выгрузку данных из информационной базы';uk='Не вдалося провести вивантаження даних з інформаційної бази'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения, НСтр("ru='Проверьте корректность данных в информационной базе, из которой осуществляется перенос информации. Возможно, с информационной базой работают пользователи. Перенос данных возможен только при наличии монопольного доступа к информационной базе, из которой выгружаются данные.';uk='Перевірте коректність даних в інформаційній базі, з якої здійснюється перенос інформації. Можливо, з інформаційною базою працюють користувачі. Перенесення даних можливе тільки при наявності монопольного доступу до інформаційної бази, з якого вивантажуються дані.'"));
			Ошибка = Истина;
			Возврат;
		КонецЕсли;
		
		#Если Не ВебКлиент Тогда
		
		ФайлДанных = Новый Файл(ИмяФайлаДанных);
		Если НЕ ФайлДанных.Существует() Тогда
			Перерисовать(2);
			СписокОшибок = СтрЗаменить(Результат, ",", Символы.ПС);
			Для НомерСтроки = 1 По СтрЧислоСтрок(СписокОшибок) Цикл
				ШаблонСообщения = НСтр("ru='Ошибка выгрузки данных из информационной базы Бухгалтерии 7.7: %1';uk='Помилка вивантаження даних з інформаційної бази Бухгалтерії 7.7: %1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрПолучитьСтроку(СписокОшибок, НомерСтроки));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения, НСтр("ru='Проверьте корректность параметров выгрузки.';uk='Перевірте коректність параметрів вивантаження.'"));				
			КонецЦикла;
			Ошибка = Истина;
			Возврат;
		КонецЕсли;
		
		#КонецЕсли
		
		Если Результат = "" Тогда
			Перерисовать(2, "Успех", Истина);
			Возврат;
		Иначе
			Перерисовать(2);
			СписокОшибок = СтрЗаменить(Результат, ",", Символы.ПС);
			Для НомерСтроки = 1 По СтрЧислоСтрок(СписокОшибок) Цикл
				ШаблонСообщения = НСтр("ru='Ошибка получения данных из информационной базы Бухгалтерии 7.7: %1';uk='Помилка отримання даних з інформаційної бази Бухгалтерії 7.7: %1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрПолучитьСтроку(СписокОшибок, НомерСтроки));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения, НСтр("ru='Проверьте корректность данных в информационной базе, из которой осуществляется перенос информации.';uk='Перевірте коректність даних в інформаційній базі, з якої здійснюється перенос інформації.'"));				
			КонецЦикла;
			Ошибка = Истина;
			Возврат;
		КонецЕсли;
		
	Исключение
		
		v7 = "";
		Перерисовать(2);
		ТекстСообщения = НСтр("ru='Не удалось произвести выгрузку данных из информационной базы.';uk='Не вдалося провести вивантаження даних з інформаційної бази.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения, НСтр("ru='Возможно, с информационной базой работают пользователи. Перенос данных возможен только при наличии монопольного доступа к информационной базе, из которой выгружаются данные.';uk='Можливо, з інформаційною базою працюють користувачі. Перенесення даних можливе тільки при наявності монопольного доступу до інформаційної бази, з якого вивантажуються дані.'"));		
		Ошибка = Истина;
		Возврат;
		
	КонецПопытки;
	Перерисовать(2, "Успех", Истина);
	
КонецПроцедуры
	
&НаКлиенте
Процедура КонвертацияИнформационнойБазыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	v7 = ДополнительныеПараметры.v7;
	
	ИмяФайлаОбработки = ДополнительныеПараметры.ИмяВременногоФайлаОбработки;
	ИмяФайлаПравил    = ДополнительныеПараметры.ИмяВременногоФайлаПравил;
	ИмяФайлаПравилСправочники = ДополнительныеПараметры.ИмяВременногоФайлаПравилСправочники;
	ИмяФайлаДанных    = ДополнительныеПараметры.ИмяВременногоФайлаДанных;
	
	v7.Константа.ПрефиксДляВыгрузкиВ1СБухгалтерию8 = РезультатЗакрытия;
	
	ПереносДанныхИзИБ(v7);
	
КонецПроцедуры

&НаСервере
Функция ОпределитьКонфигурациюИПолучитьФайлы(ВозрастРелизаКонфигурации, ИмяКонвертацияПравила, ИмяКонвертацияПравилаСправочники,  
	                                         ИмяВременногоФайлаПравил, ИмяВременногоФайлаПравилСправочники, ИмяКонвертацияОбработка, 
								             ИмяВременногоФайлаОбработки, ИмяВременногоФайлаДанных)
	 ИмяВременногоФайлаДанных  = ПолучитьИмяВременногоФайла("xml");
	 
	 ИмяВременногоФайлаПравил  = ПолучитьИмяВременногоФайла("xml");
	 ДвоичныеДанныеФайлаПравил = Обработки.ПереносДанныхИзИнформационныхБаз1СПредприятия77.ПолучитьМакет(ИмяКонвертацияПравила);
	 ДвоичныеДанныеФайлаПравил.Записать(ИмяВременногоФайлаПравил);
	 
	 ИмяВременногоФайлаПравилСправочники  = ПолучитьИмяВременногоФайла("xml");
	 ДвоичныеДанныеФайлаПравилСправочники = Обработки.ПереносДанныхИзИнформационныхБаз1СПредприятия77.ПолучитьМакет(ИмяКонвертацияПравилаСправочники);
	 ДвоичныеДанныеФайлаПравилСправочники.Записать(ИмяВременногоФайлаПравилСправочники);
	 
	 ИмяВременногоФайлаОбработки  = ПолучитьИмяВременногоФайла("ert");
	 ДвоичныеДанныеФайлаОбработки = Обработки.ПереносДанныхИзИнформационныхБаз1СПредприятия77.ПолучитьМакет(ИмяКонвертацияОбработка);
	 ДвоичныеДанныеФайлаОбработки.Записать(ИмяВременногоФайлаОбработки);
	 
	 ФайлОбмена = Новый ЧтениеXML();
	 ФайлОбмена.ОткрытьФайл(ИмяВременногоФайлаПравил);
	 Пока ФайлОбмена.Прочитать() Цикл
		 Если ФайлОбмена.ЛокальноеИмя = "Источник" Тогда
			 НомерРелиза =  ФайлОбмена.ПолучитьАтрибут("ВерсияКонфигурации");
			 Прервать;				
		 КонецЕсли;
	 КонецЦикла;
	 
	 ВозрастРелизаПравил = Число(Прав(СокрЛП(НомерРелиза), 3));
	 Если ВозрастРелизаПравил > ВозрастРелизаКонфигурации Тогда
		 СообщениеОбОшибке = 
		 СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		 НСтр("ru='Текущая версия правил предназначена для релиза конфигурации не ниже %1';uk='Поточна версія правил призначена для релізу конфігурації не нижче %1'"), 
		 НомерРелиза);
		 ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		 ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения, НСтр("ru='Рекомендуется обновить релиз конфигурации информационной базы, из которой производится перенос данных.';uk='Рекомендується оновити реліз конфігурації інформаційної бази, з якої виконується перенесення даних.'"));
		 Возврат Истина;
	 КонецЕсли;
	 Возврат Ложь;
		
КонецФункции

&НаСервере
Процедура ПодготовитьОтчетОбОшибкахСервер(ОтчетОбОшибках)
	
	Обработки.ПереносДанныхИзИнформационныхБаз1СПредприятия77.ПолучитьОтчетОбОшибках(ОтчетОбОшибках, ЭтаФорма.ИмяИБ, 
	                                                                                 ПутьКИБ, Объект.ИмяФайлаДанных, 
																					 ТаблицаОшибок)
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьОтчетОбОшибках()
	
	ОтчетОбОшибках = Новый ТабличныйДокумент;
	ПодготовитьОтчетОбОшибкахСервер(ОтчетОбОшибках);
	ОтчетОбОшибках.ТолькоПросмотр = Истина;
	ОтчетОбОшибках.ОтображатьЗаголовки = Ложь;
	ОтчетОбОшибках.ОтображатьСетку = Ложь;	
	ОтчетОбОшибках.Показать(НСтр("ru='Список ошибок';uk='Список помилок'"));
    	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗафиксироватьОшибку(Форма, ТекстОшибки, ТекстРекомендации = "", Расшифровка = Неопределено)
	
	Этап = Форма.ЭтапКонвертации;
	
	Если НЕ ЗначениеЗаполнено(Этап) Тогда
		Возврат;
	КонецЕсли;
	
	Если Этап = "Проверка данных" И НЕ ЗначениеЗаполнено(ТекстРекомендации) Тогда
		ТекстРекомендации = "Проверьте, все ли загруженные документы были проведены.";
	КонецЕсли;
	
	НоваяОшибка = Форма.ТаблицаОшибок.Добавить();
	НоваяОшибка.Этап = Этап;
	НоваяОшибка.Ошибка = ТекстОшибки;
	НоваяОшибка.Рекомендации = ТекстРекомендации;
	НоваяОшибка.Расшифровка = Расшифровка;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Функция ВыполнитьЗагрузкуДанныхНаСервере(АдресФайла)
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ДвоичныеДанныеФайла", ДвоичныеДанныеФайла);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	Обработки.ПереносДанныхИзИнформационныхБаз1СПредприятия77.ЗагрузитьДанныеВИБ(ПараметрыВыгрузки, АдресХранилища);
	Результат = Новый Структура("ЗаданиеВыполнено", Истина);		
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьРезультат();
	КонецЕсли;

	Возврат Результат;
		
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
				ЗагрузитьРезультат();
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗадания", 
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
					Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультат()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("ИдентификаторКонфигурации") Тогда
			ИдентификаторКонфигурации = Результат.ИдентификаторКонфигурации;
		КонецЕсли;
		Если Результат.Свойство("ТекстСообщения",) Тогда
			ТекстСообщения = Результат.ТекстСообщения;
			Ошибка = Результат.Ошибка;
			Если НЕ Ошибка Тогда
				НачалоПериодаВыгрузки     = Результат.НачалоПериодаВыгрузки;
				ОкончаниеПериодаВыгрузки  = Результат.ОкончаниеПериодаВыгрузки;
				ЕстьСправочники           = ?(Результат.ЕстьСправочники = 1, Истина, Ложь);
				ЕстьОстатки               = ?(Результат.ЕстьОстатки = 1, Истина, Ложь);
				Организация               = Результат.Организация;
				КонрольныеДанные          = Результат.КонрольныеДанные;
				КонрольныеЗначения        = Результат.КонрольныеЗначения;
				Если Результат.Свойство("ОсновнаяОрганизация",) Тогда
					ОсновнаяОрганизация = Результат.ОсновнаяОрганизация;					
				КонецЕсли;
			Иначе
				Если Результат.Свойство("СписокОшибок",) Тогда
					СписокОшибок = Результат.СписокОшибок;
					Если СписокОшибок.Количество() <> 0 Тогда
						Для Каждого СтрокаСписка ИЗ СписокОшибок Цикл
							ЗафиксироватьОшибку(ЭтаФорма, СтрокаСписка.Представление);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроведениеДокументов()
		
	Если НЕ ЕстьОстатки  Тогда
		Возврат;
	КонецЕсли;
		
	ЭтаФорма.ТекстСообщения = "";
	
	Результат = ВыполнитьПроведениеНаСервере();
	
	Если Ошибка Тогда
		Перерисовать(4);
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения, "");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПроведениеНаСервере()
	
	ПараметрыПроведения = Новый Структура("Организация, НачалоПериодаВыгрузки, ОкончаниеПериодаВыгрузки, ЕстьОстатки", ЭтаФорма.Организация, ЭтаФорма.НачалоПериодаВыгрузки, ЭтаФорма.ОкончаниеПериодаВыгрузки, ЭтаФорма.ЕстьОстатки);
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	Обработки.ПереносДанныхИзИнформационныхБаз1СПредприятия77.ПровестиДокументы(ПараметрыПроведения, АдресХранилища);
	ЗагрузитьРезультатПроведения();

	Возврат Истина;
		
КонецФункции

&НаСервере
Процедура ЗагрузитьРезультатПроведения()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда		
		Если Результат.Свойство("ТекстСообщения",) Тогда
			ТекстСообщения = Результат.ТекстСообщения;
			Ошибка = Результат.Ошибка;
			Если Ошибка Тогда
				Если Результат.Свойство("СписокОшибок",) Тогда
					СписокОшибок = Результат.СписокОшибок;
					Если СписокОшибок.Количество() <> 0 Тогда
						Для Каждого СтрокаСписка ИЗ СписокОшибок Цикл
							ЗафиксироватьОшибку(ЭтаФорма, СтрокаСписка.Представление, НСтр("ru='Рекомендуется провести указанный документ вручную.';uk='Рекомендується провести зазначений документ вручну.'"), СтрокаСписка.Значение);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДанныеНаСервере(ОповеститьОбИзмененииЗадачБухгалтера)

 	ПараметрыПроверки = Новый Структура("ИдентификаторКонфигурации, Организация, НачалоПериодаВыгрузки, ОкончаниеПериодаВыгрузки, 
                                      |ЕстьОстатки, КонрольныеДанные, КонрольныеЗначения, СписокОшибок", 
									  ЭтаФорма.ИдентификаторКонфигурации, ЭтаФорма.Организация, ЭтаФорма.НачалоПериодаВыгрузки, ЭтаФорма.ОкончаниеПериодаВыгрузки, 
									  ЭтаФорма.ЕстьОстатки,
									  ЭтаФорма.КонрольныеДанные, ЭтаФорма.КонрольныеЗначения, Новый СписокЗначений);

									  
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	Обработки.ПереносДанныхИзИнформационныхБаз1СПредприятия77.ПроверитьДанные(ПараметрыПроверки, АдресХранилища);
	ЗагрузитьРезультатПроверки();
	
	ОповеститьОбИзмененииЗадачБухгалтера = Ложь;
		
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатПроверки()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда		
		Если Результат.Свойство("ТекстСообщения",) Тогда
			ТекстСообщения = Результат.ТекстСообщения;
			Ошибка = Результат.Ошибка;
			Если Ошибка Тогда
				Если Результат.Свойство("СписокОшибок",) Тогда
					СписокОшибок = Результат.СписокОшибок;
					Если СписокОшибок.Количество() <> 0 Тогда
						Для Каждого СтрокаСписка ИЗ СписокОшибок Цикл
							ЗафиксироватьОшибку(ЭтаФорма, СтрокаСписка.Значение);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры
	
&НаКлиенте
Процедура Перерисовать(Этап, Состояние = "Ошибка", ОднаКартинка = Ложь)
	
	ИмяЗакладки = "НеВыполняется";
	Если Состояние = "ВОчереди" Тогда
		НомерСостояния = 1;
	ИначеЕсли Состояние = "Выполняется" Тогда
		НомерСостояния = 2;
		ИмяЗакладки = "Выполняется";
	ИначеЕсли Состояние = "Ошибка" Тогда
		НомерСостояния = 3;
		ИмяЗакладки = "Выполнено";
	ИначеЕсли Состояние = "Успех" Тогда
		НомерСостояния = 4;
		ИмяЗакладки = "Выполнено";
	Иначе
		НомерСостояния = 3;
		ИмяЗакладки = "Выполнено";
	КонецЕсли;
		
	Если ОднаКартинка Тогда
		
		ЭтапСтрока = Этапы.Получить(Этап);
		Элементы[ЭтапСтрока].ТекущаяСтраница    = Элементы[ЭтапСтрока + НомерСостояния];
		Элементы[ЭтапСтрока + "Надпись"].ТекущаяСтраница = Элементы[ЭтапСтрока + "Надпись" + ИмяЗакладки];

	Иначе
		
		Для НомерКартинки = Этап По 5 Цикл
			ЭтапСтрока = Этапы.Получить(НомерКартинки);
			Элементы[ЭтапСтрока].ТекущаяСтраница    = Элементы[ЭтапСтрока + НомерСостояния];
			Элементы[ЭтапСтрока + "Надпись"].ТекущаяСтраница = Элементы[ЭтапСтрока + "Надпись" + ИмяЗакладки];
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормойВыгрузки()
		
		ОписаниеПериодов();
		
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПериодов()
	
		ПериодГодСтрокаДоИзменения = ПериодГодСтрока;
		Период = ПериодГодСтрока;
		
		ДатаНачала          = КонецДня(Период);
		

		
КонецПроцедуры

&НаКлиенте
Процедура СкоординироватьПериоды()
	

	
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьПериод(ШагПериода, ИмяЭлемента)
	

		ЗначениеПериода = ЭтаФорма["Период" + ИмяЭлемента];
		НовоеЗначениеПериода = ЗначениеПериода + ШагПериода;
			МинимальноеЗначениеПериода = 1;
			МаксимальноеЗначениеПериода = 12;
		
		Если НовоеЗначениеПериода < МинимальноеЗначениеПериода ИЛИ НовоеЗначениеПериода > МаксимальноеЗначениеПериода Тогда
			Возврат;
		Иначе
			ЭтаФорма["Период" + ИмяЭлемента] = НовоеЗначениеПериода;	
		КонецЕсли;	
		СкоординироватьПериоды();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработатьНажатиеВперед()
	
	Если НомерСтраницы = 2 Тогда
		ТаблицаОшибок.Очистить();
		Элементы.СтраницыРезультат.ТекущаяСтраница = Элементы.Процесс;
		Элементы.СтраницыКонвертацииДанных.ТекущаяСтраница = Элементы.СтраницаВыгрузкаЗагрузка;			
		Элементы.СтраницыПереносДанных.ТекущаяСтраница = Элементы.СтраницаПеренос;
		Элементы.СтраницыЗаголовокПеренос.ТекущаяСтраница = Элементы.СтраницаЗаголовокПереносВыполняется;
		
		Перерисовать(1, "ВОчереди");
		
		v7 = ПодключитьсяКИБ();
		
		Если v7 = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ИмяФайлаДанных = ПолучитьФайлДанных(v7);
		
		Если ПустаяСтрока(ИмяФайлаДанных) Тогда
			Возврат;
		КонецЕсли;	
		
		
		ПереносДанныхИзИБ(v7);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСписокИБ() 
	
		Попытка
			ScrptCtrl=Новый COMObject("MSScriptControl.ScriptControl");
			ScrptCtrl.Language="vbscript";
			ScrptCtrl.AddCode("
			|Function Get1CV77Titles()
			|	const HKEY_CURRENT_USER = &H80000001
			|	Set oReg=GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv"")
			|	strKeyPath = ""Software\1C\1Cv7\7.7\Titles""
			|	oReg.EnumValues HKEY_CURRENT_USER, strKeyPath, arrValues
			|	strInfo=vbNullString
			|   Get1CV77Titles = strInfo
			|	On Error Resume Next
			|	For i = LBound(arrValues) To UBound(arrValues)
			|		call oReg.GetStringValue(HKEY_CURRENT_USER,strKeyPath,arrValues(i),Value)
			|		strInfo=strInfo & arrValues(i) & vbTab & Value & vbCrLf
			|	Next		
			| 	Get1CV77Titles = strInfo
			|End Function
			|");
			Текст=СокрЛП(ScrptCtrl.Run("Get1CV77Titles"));
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		ТаблицаПути.Очистить();
		
		Если НЕ ЗначениеЗаполнено(Текст) Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьТаблицуПути(Текст);

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьТаблицуПути(Текст)
	
	ТаблицаИБ = Новый ТаблицаЗначений;
	ТаблицаИБ.Колонки.Добавить("Имя");
	ТаблицаИБ.Колонки.Добавить("Путь");
	
	Для Ном=1 По СтрЧислоСтрок(Текст) Цикл
		СтрБазы=СтрПолучитьСтроку(Текст,Ном);
		Разд=Найти(СтрБазы,Символы.Таб);
		Путь=Лев(СтрБазы,Разд-1);
		Название=Прав(СтрБазы,СтрДлина(СтрБазы)-Разд);
		
		НоваяСтрока = ТаблицаИБ.Добавить();
		НоваяСтрока.Имя = Название;
		НоваяСтрока.Путь = Путь;
	КонецЦикла;
	
	ТаблицаИБ.Сортировать("Имя");
	
	ЗначениеВДанныеФормы(ТаблицаИБ, ТаблицаПути);
	
КонецПроцедуры

&НаКлиенте
Процедура Шагнуть(ПолучитьСписокИБ = Ложь)
	
	Если НомерСтраницы = 0 Тогда
		
		Элементы.СтраницыКонвертацииДанных.ТекущаяСтраница = Элементы.СтраницаПереносДанных;
		
		Если ПолучитьСписокИБ Тогда
			ПолучитьСписокИБ();
		КонецЕсли;
		
		Если ТаблицаПути.Количество() = 0 Тогда				
			Элементы.ИБСтраницы.ТекущаяСтраница = Элементы.ИБСтраницаНетИБ;				
			Элементы.ГруппаКомандСтраницы.ТекущаяСтраница = Элементы.ГруппаКомандЗакрыть;
		Иначе
			Элементы.ИБСтраницы.ТекущаяСтраница = Элементы.ИБСтраницаЕстьИБ;				
			Элементы.ГруппаКомандСтраницы.ТекущаяСтраница = Элементы.ГруппаКомандЗагрузить;
		КонецЕсли;
		
	КонецЕсли;
	
	НомерСтраницы = НомерСтраницы + 1;
	
	Если НомерСтраницы = 2 Тогда

			Если ТаблицаПути.Количество() = 0 Тогда
				Сообщить("Список информационных баз платформы 7.7 пуст.", СтатусСообщения.Важное);
				НомерСтраницы = НомерСтраницы - 1;
				Возврат;
			КонецЕсли;
			Если ВариантВыгрузкиСправочники + ВариантВыгрузкиОстатки = 0 Тогда
				Сообщить("Укажите, какую информацию следует перенести.", СтатусСообщения.Важное);
				НомерСтраницы = НомерСтраницы - 1;
				Возврат;
			КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаИнформационнойБазы()
	
	ЭтаФорма.ТекстСообщения = "";
	
	АдресФайла = Неопределено;
	
	ОчиститьСообщения();
	
	ПомещаемыеФайлы = Новый Массив;
	ПомещенныеФайлы = Новый Массив;
	
	ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(Объект.ИмяФайлаДанных);
	
	ПомещаемыеФайлы.Добавить(ОписаниеФайла);
	
	Попытка
		#Если НЕ ВебКлиент Тогда
		ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь);
		ОписаниеФайлов = ПомещенныеФайлы.Получить(0);
		АдресФайла = ОписаниеФайлов.Хранение;
		#КонецЕсли
	Исключение
		ШаблонСообщения = НСтр("ru='При чтении файла возникла ошибка:
|%1';uk='При читанні файлу виникла помилка:
|%1'");
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
		ОписаниеОшибки());
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения);
		Перерисовать(3);
		Ошибка = Истина;
		Возврат;
	КонецПопытки;
	
	Если АдресФайла = Неопределено Тогда
		Перерисовать(3);
		ТекстСообщения = НСтр("ru='Не удалось получить данные для загрузки';uk='Не вдалося отримати дані для завантаження'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения,  НСтр("ru='Укажите корректный путь к файлу данных';uk='Вкажіть правильний шлях до файлу даних'"));
		Ошибка = Истина;
		Возврат;
	КонецЕсли;
	
	Результат = ВыполнитьЗагрузкуДанныхНаСервере(АдресФайла);
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		
	Иначе
		Если Ошибка Тогда
			Перерисовать(3);
			Если ЗначениеЗаполнено(ТекстСообщения) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ЗафиксироватьОшибку(ЭтаФорма, ТекстСообщения,  НСтр("ru='Укажите корректный файл данных';uk='Вкажіть правильний файл даних'"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификаторКонфигурации = "UBUTK" Тогда
		СинхронизацияДанныхV77Сервер.УстановитьПараметрыСинхронизации(Объект.ИмяФайлаДанных, Ложь);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура ГиперссылкаПопробуйтеНажатие(Элемент)
	
	ОткрытьФорму("Обработка.ПереносДанныхИзИнформационныхБаз1СПредприятия77.Форма.ФормаЗагрузкаИзФайла");
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантВыгрузкиСправочникиПриИзменении(Элемент)
	
	УправлениеФормойВыгрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантВыгрузкиОстаткиПриИзменении(Элемент)
	
	УправлениеФормойВыгрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодГодСтрокаПриИзменении(Элемент)
	
	УправлениеФормойВыгрузки();
		
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПерехода(Команда)
	
	ОткрытьФорму("Обработка.ПереносДанныхИзИнформационныхБаз1СПредприятия77.Форма.ОписаниеВариантовВыгрузки",,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНДНОЙ ПАНЕЛИ

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	Шагнуть();
	ОтработатьНажатиеВперед();

КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаОшибкиНажатие(Элемент)
	
	ПодготовитьОтчетОбОшибках();

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрыть(Команда)
	
	Если Окно.Основное Тогда
		ПерейтиПоНавигационнойСсылке("e1cib/navigationpoint/СправочникиИНастройкиУчета82");
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПараметрыСоединения = СтроковыеФункцииКлиентСервер.ПолучитьПараметрыИзСтроки(СтрокаСоединенияИнформационнойБазы());
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Если ЗначениеЗаполнено(СистемнаяИнфо.ИнформацияПрограммыПросмотра)
		ИЛИ НЕ ПараметрыСоединения.Свойство("File") Тогда
		// веб-клиент или сервер
		Отказ= Истина;
		Возврат;
	КонецЕсли;
	
	НомерСтраницы = 0;
	
	Период      	= ТекущаяДата();
	ПериодГодСтрока = Период;
	ВариантВыгрузкиСправочники = Истина;
	ВариантВыгрузкиОстатки = Истина;
	
	ОписаниеЭтапов = Новый Соответствие;
	ОписаниеЭтапов.Вставить(1, "Подключение");
	ОписаниеЭтапов.Вставить(2, "Выгрузка");
	ОписаниеЭтапов.Вставить(3, "Загрузка");
	ОписаниеЭтапов.Вставить(4, "Проведение");
	ОписаниеЭтапов.Вставить(5, "Проверка");
	
	Этапы = Новый ФиксированноеСоответствие(ОписаниеЭтапов);
	
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверкаДанных = Истина;
	Шагнуть(Истина);
	УправлениеФормойВыгрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрытьПроверку(Команда)
	
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПродолжить(Команда)
	
	НомерСтраницы = 2;
	ПроверкаДанных = Ложь;
	Элементы.СтраницыКонвертацииДанных.РастягиватьПоГоризонтали = Ложь;
	ОтработатьНажатиеВперед();
	
КонецПроцедуры