#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

///////////////////////////////////////////////////////////////////////////////////////////////////
// Процедура загрузки данных закрытия месяца

Процедура ЗагрузитьДанныеВИБ(ПараметрыВыгрузки, АдресХранилища) Экспорт
	
	СписокОшибок = Новый СписокЗначений;
	
	ИдентификаторКонфигурации = "";
	
	ВебКлиент = Ложь;
	Если ПараметрыВыгрузки.Свойство("ВебКлиент") Тогда
		ВебКлиент = ПараметрыВыгрузки.ВебКлиент;
	КонецЕсли;
	
	ЭтоАрхив = Ложь;
	Если ПараметрыВыгрузки.Свойство("ЭтоАрхив") Тогда
		ЭтоАрхив = ПараметрыВыгрузки.ЭтоАрхив;
	КонецЕсли;
	
	Если ЭтоАрхив Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("zip");
	Иначе
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	КонецЕсли;	
	ДвоичныеДанныеФайла = ПараметрыВыгрузки.ДвоичныеДанныеФайла;
	ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);
	
	// считывание заголовка
	ОбработкаОбмена = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	ОбработкаОбмена.РежимОбмена = "Загрузка";
	ОбработкаОбмена.ИмяФайлаОбмена = ИмяВременногоФайла;
	Попытка
		ОбработкаОбмена.ОткрытьФайлЗагрузки(Истина);
	Исключение
		ТекстСообщения = НСтр("ru='При чтении данных произошла ошибка:';uk='При читанні даних сталася помилка:'") + Символы.ПС
		                 + ОписаниеОшибки()+ Символы.ПС 
						 + НСтр("ru='Ошибка в формате файла данных.';uk='Помилка у форматі файлу даних.'");
		РезультатВыполнения = Новый Структура("ТекстСообщения, Ошибка", ТекстСообщения, Истина);
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
		Возврат;
	КонецПопытки;
		
	Если НЕ ОбработкаОбмена.мБылиПрочитаныПравилаОбменаПриЗагрузке Тогда
		ТекстСообщения = НСтр("ru='При чтении данных произошла ошибка.';uk='При читанні даних сталася помилка.'");
		РезультатВыполнения = Новый Структура("ТекстСообщения, Ошибка", ТекстСообщения, Истина);
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
		Возврат;
	Иначе		
		ФайлОбмена = Новый ЧтениеXML();
		ФайлОбмена.ОткрытьФайл(ИмяВременногоФайла);
		ФайлОбмена.Прочитать();		
		ИдентификаторКонфигурации = ФайлОбмена.ПолучитьАтрибут("ИдентификаторКонфигурации");
		Если ИдентификаторКонфигурации = Неопределено Тогда
			ТекстСообщения = НСтр("ru='Не удалось определить программу-источник данных.';uk='Не вдалося визначити програму-джерело даних.'");
			РезультатВыполнения = Новый Структура("ТекстСообщения, Ошибка, ИдентификаторКонфигурации", ТекстСообщения, Истина, "");
			ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
			Возврат;
		Иначе
				
				ИдентификаторКонфигурации = СОКРЛП(ИдентификаторКонфигурации);
				Если ИдентификаторКонфигурации = "UBUTK" Тогда
					ИмяОбработкиЗагрузчика = "ОбработчикиЗагрузкиИзБухгалтерии77";				
				Иначе
					ТекстСообщения = НСтр("ru='Не удалось определить программу-источник данных.';uk='Не вдалося визначити програму-джерело даних.'");
					РезультатВыполнения = Новый Структура("ТекстСообщения, Ошибка, ИдентификаторКонфигурации", ТекстСообщения, Истина, ИдентификаторКонфигурации);
					ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
					Возврат;
				КонецЕсли;
				// считывание параметров загружаемого файла
				ЕстьСправочники          = 1;
				ЕстьОстатки              = 1;
				ЕстьОбороты              = 0;
				ЕстьДокументы            = 0;
				
				КонрольныеДанные    = ФайлОбмена.ПолучитьАтрибут("КонрольныеДанные");
				КонрольныеЗначения  = ФайлОбмена.ПолучитьАтрибут("КонрольныеЗначения");
				
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаОбмена = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	ОбработкаОбмена.РежимОбмена                  = "Загрузка";
	ОбработкаОбмена.ИмяФайлаОбмена               = ИмяВременногоФайла;
	ОбработкаОбмена.РежимОтладкиАлгоритмов       = 3;
	ОбработкаОбмена.ФлагРежимОтладкиОбработчиков = Истина;
	ОбработкаОбмена.ФлагРежимОтладки             = Истина;	
	ОбработкаОбмена.ОбрезатьСтрокиСправа         = Истина;	
		
	ОбработкаОбмена.ИмяФайлаВнешнейОбработкиОбработчиковСобытий = ИмяОбработкиЗагрузчика;
	Если НЕ ВебКлиент Тогда
		ОбработкаОбмена.ИмяФайлаПротоколаОбмена = ПолучитьИмяВременногоФайла("txt");
	КонецЕсли;
			
	ОбработкаОбмена.ВыполнитьЗагрузку();
	
	Если ОбработкаОбмена.ФлагОшибки Тогда		
		ТекстСообщения = НСтр("ru='При загрузке данных произошла ошибка.';uk='При завантаженні даних сталася помилка.'");		
		РезультатВыполнения = Новый Структура("ТекстСообщения, Ошибка, СписокОшибок, ИдентификаторКонфигурации", ТекстСообщения, Истина, СписокОшибок, ИдентификаторКонфигурации);
	Иначе		
		ТекстСообщения =  НСтр("ru='Загрузка данных завершена.';uk='Завантаження даних завершено.'");	
		РезультатВыполнения = Новый Структура("ТекстСообщения, ИдентификаторКонфигурации, Организация, НачалоПериодаВыгрузки, 
											   |ОкончаниеПериодаВыгрузки, 
											   |ЕстьСправочники, ЕстьОстатки, ЕстьОбороты, ЕстьДокументы, Ошибка, 
											   |КонрольныеДанные, КонрольныеЗначения, СписокОшибок", 
											   ТекстСообщения, ИдентификаторКонфигурации, ОбработкаОбмена.Параметры.Организация, ОбработкаОбмена.ДатаНачала, 
											   ОбработкаОбмена.ДатаОкончания, 
											   ЕстьСправочники, ЕстьОстатки, ЕстьОбороты, ЕстьДокументы, Ложь,
		                                       КонрольныеДанные, КонрольныеЗначения, СписокОшибок);
	КонецЕсли;

	
	Если НЕ ОбработкаОбмена.ФлагОшибки Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Организации.Ссылка) КАК КоличествоОрганизаций
		|ИЗ
		|	Справочник.Организации КАК Организации";
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ВыборкаЗапроса = Результат.Выбрать();
			ВыборкаЗапроса.Следующий();
			Если ВыборкаЗапроса.КоличествоОрганизаций = 1 Тогда
				РезультатВыполнения.Вставить("ОсновнаяОрганизация", Истина);				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
	Если НЕ ОбработкаОбмена.ФлагОшибки Тогда
		
		Если ВебКлиент Тогда
			ПараметрыПроведения = Новый Структура("ВебКлиент, Организация, НачалоПериодаВыгрузки, ОкончаниеПериодаВыгрузки, ЕстьОстатки, ЕстьОбороты, ЕстьДокументы", 
			Истина, РезультатВыполнения.Организация, РезультатВыполнения.НачалоПериодаВыгрузки, РезультатВыполнения.ОкончаниеПериодаВыгрузки, РезультатВыполнения.ЕстьОстатки, РезультатВыполнения.ЕстьОбороты, РезультатВыполнения.ЕстьДокументы);
			ПровестиДокументы(ПараметрыПроведения, АдресХранилища, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Процедура проведения документов

Процедура ПровестиДокументы(ПараметрыПроведения, АдресХранилища, РезультатВыполнения = Неопределено) Экспорт
		
	Ошибка = Ложь;
	
	СписокОшибок = Новый СписокЗначений;
	
	ВебКлиент = Ложь;
	Если ПараметрыПроведения.Свойство("ВебКлиент") Тогда
		ВебКлиент = ПараметрыПроведения.ВебКлиент;
	КонецЕсли;
		
	Попытка
		Организация = ПараметрыПроведения.Организация.ПолучитьОбъект();
	Исключение
		ТекстСообщения = НСтр("ru='Не удалось прочитать файл данных и получить сведения о загружаемой организации';uk='Не вдалося прочитати файл даних і одержати відомості про завантажувану організацію'");		
		Если НЕ ВебКлиент Тогда		
			РезультатВыполнения = Новый Структура("ТекстСообщения, Ошибка", ТекстСообщения, Истина);
		Иначе
			РезультатВыполнения.Вставить("ТекстСообщения", ТекстСообщения);
			РезультатВыполнения.Вставить("Ошибка", Истина);
		КонецЕсли;
		ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
		Возврат;
	КонецПопытки;
	
	
	ДатаНач                 = НачалоДня(ПараметрыПроведения.НачалоПериодаВыгрузки - 1);
	ДатаКон                 = ПараметрыПроведения.ОкончаниеПериодаВыгрузки;
		
	мНаборыШаблон = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация.Ссылка);
	
	Для Каждого ДокументМетаданные ИЗ Метаданные.Документы Цикл
		
		
		Если ДокументМетаданные.Реквизиты.Найти("Организация") <> Неопределено Тогда
			Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "", "
			|ОБЪЕДИНИТЬ ВСЕ
			|") + "ВЫБРАТЬ """ + ДокументМетаданные.Имя + """ КАК ИмяДокумента, Представление КАК Представление, Ссылка КАК Ссылка, НАЧАЛОПЕРИОДА(Дата, Месяц) КАК МесяцДокумента, Дата КАК Дата ИЗ Документ." + ДокументМетаданные.Имя + "
			|ГДЕ НЕ ПометкаУдаления И Дата <= &ДатаКон И Организация = &Организация";
		КонецЕсли;
		
		Если ДокументМетаданные.Имя = "УстановкаЦенНоменклатуры" Тогда
			Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "", "
			|ОБЪЕДИНИТЬ ВСЕ
			|") + "ВЫБРАТЬ """ + ДокументМетаданные.Имя + """ КАК ИмяДокумента, Представление КАК Представление, Ссылка КАК Ссылка, НАЧАЛОПЕРИОДА(Дата, Месяц) КАК МесяцДокумента, Дата КАК Дата ИЗ Документ." + ДокументМетаданные.Имя + "
			|ГДЕ НЕ ПометкаУдаления И Дата <= &ДатаКон";
		КонецЕсли;

	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО Дата, Ссылка";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));	
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	ТаблицаДокументов.Колонки.Добавить("БылаОшибка", Новый ОписаниеТипов("Булево"));
	ВсегоДокументов = ТаблицаДокументов.Количество();

	ИндексСтрокиНачалаДаты = Неопределено;
	ТекущаяДатаПроведения = Неопределено;
	
	ТекущийМесяц = '00010101';
	Для индекс = 0 ПО ВсегоДокументов - 1 Цикл
		СтрокаДокумента = ТаблицаДокументов[индекс];

		ДокументОбъект = СтрокаДокумента.Ссылка.ПолучитьОбъект();
		ЭтоРегОперация = ДокументОбъект.Метаданные().Имя = "РегламентнаяОперация";
		
		Если ДокументОбъект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить И НЕ ЭтоРегОперация Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяДатаПроведения <> ДокументОбъект.Дата Тогда
			ИндексСтрокиНачалаДаты = индекс;
			ТекущаяДатаПроведения = ДокументОбъект.Дата;
		КонецЕсли;
		
		Попытка
			Если ЭтоРегОперация Тогда
				ДокументОбъект.ОтменитьОперацию();
			Иначе
				Если ДокументОбъект.ПроверитьЗаполнение() Тогда
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				Иначе
					
					Ошибка = Истина;
					
					ШаблонСообщения = НСтр("ru='Документ %1 не проведен!
| По причине: %2';uk='Документ %1 не проведено!
| Через: %2'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					Строка(ДокументОбъект), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
					СписокОшибок.Добавить(ДокументОбъект.Ссылка, ТекстСообщения);
					
				КонецЕсли;
				
			КонецЕсли;
		Исключение
			Ошибка = Истина;
						
			ШаблонСообщения = НСтр("ru='Документ %1 не проведен!
| По причине: %2';uk='Документ %1 не проведено!
| Через: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			Строка(ДокументОбъект), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			СписокОшибок.Добавить(ДокументОбъект.Ссылка, ТекстСообщения);
						
			Если НЕ ЭтоРегОперация Тогда
				Попытка
					ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения, РежимПроведенияДокумента.Неоперативный);					
				Исключение
					ШаблонСообщения = НСтр("ru='Документ %1 не удалось отменить проведение!
| По причине: %2';uk='Документ %1 не вдалося скасувати проведення!
| Через: %2'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					Строка(ДокументОбъект), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
					СписокОшибок.Добавить(ДокументОбъект.Ссылка, ТекстСообщения);
				КонецПопытки;
			КонецЕсли;			
		КонецПопытки;
	КонецЦикла;
	

	Если НЕ Ошибка Тогда		
		ТекстСообщения =  НСтр("ru='Проведение документов завершено.';uk='Проведення документів завершене.'");	
	Иначе		
		ТекстСообщения = НСтр("ru='При проведении документов произошли ошибки.';uk='При проведенні документів сталися помилки.'");		
	КонецЕсли;
	
	Если НЕ ВебКлиент Тогда
		РезультатВыполнения = Новый Структура("ТекстСообщения, СписокОшибок, Ошибка", ТекстСообщения, СписокОшибок, Ошибка);
	Иначе
		РезультатВыполнения.Вставить("ТекстСообщения", ТекстСообщения);
		РезультатВыполнения.Вставить("Ошибка", Ошибка);
		РезультатВыполнения.Вставить("СписокОшибок", СписокОшибок);
	КонецЕсли;
		
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
	Если НЕ Ошибка Тогда		
		Если ВебКлиент Тогда
			ПроверитьДанные(РезультатВыполнения, АдресХранилища, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////////////////////
// Процедура проверки данных

Процедура ПроверитьДанные(ПараметрыПроверки, АдресХранилища,РезультатВыполнения = Неопределено) Экспорт
	
	
	ВебКлиент = Ложь;
	Если ПараметрыПроверки.Свойство("ВебКлиент") Тогда
		ВебКлиент = ПараметрыПроверки.ВебКлиент;
	КонецЕсли;
	
	ИдентификаторКонфигурации = ПараметрыПроверки.ИдентификаторКонфигурации;
	СписокОшибок = ПараметрыПроверки.СписокОшибок;
	
	Если НЕ ИдентификаторКонфигурации = "UBUTK" Тогда
		
		ТекстСообщения = НСтр("ru='Для выбранной конфигурации проверка данных не поддерживается';uk='Для обраної конфігурації перевірка даних не підтримується'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		СписокОшибок.Добавить(ТекстСообщения);
		Ошибка = Истина;
		Если НЕ ВебКлиент Тогда
			РезультатВыполнения = Новый Структура("ТекстСообщения, Ошибка", ТекстСообщения, Ошибка);
		Иначе
			РезультатВыполнения.Вставить("ТекстСообщения", ТекстСообщения);
			РезультатВыполнения.Вставить("Ошибка", Ошибка);
			РезультатВыполнения.Вставить("СписокОшибок", СписокОшибок);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Попытка
		
		РезультатПроверки = Новый СписокЗначений;		
		Если ИдентификаторКонфигурации = "UBUTK" Тогда
			ПроверитьДанныеПереносаИзБухгалтерии(ПараметрыПроверки, РезультатПроверки);
		КонецЕсли;
		
	Исключение
		
		ТекстСообщения = НСтр("ru='Не удалось провести проверку данных';uk='Не вдалося провести перевірку даних'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		СписокОшибок.Добавить(ТекстСообщения);
		Ошибка = Истина;
		Если НЕ ВебКлиент Тогда
			РезультатВыполнения = Новый Структура("ТекстСообщения, Ошибка", ТекстСообщения, Ошибка);
		Иначе
			РезультатВыполнения.Вставить("ТекстСообщения", ТекстСообщения);
			РезультатВыполнения.Вставить("Ошибка", Ошибка);
			РезультатВыполнения.Вставить("СписокОшибок", СписокОшибок);
		КонецЕсли;
		Возврат;
		
	КонецПопытки;
	
	Если РезультатПроверки.Количество() <> 0 Тогда
		Ошибка = Истина;
		Для Каждого ОписаниеОшибки ИЗ РезультатПроверки Цикл				
			СписокОшибок.Добавить(ОписаниеОшибки.Значение);				
		КонецЦикла;			
	КонецЕсли;
	
	Если НЕ ВебКлиент Тогда
		РезультатВыполнения = Новый Структура("ТекстСообщения, СписокОшибок, Ошибка", ТекстСообщения, СписокОшибок, Ошибка);
	Иначе
		РезультатВыполнения.Вставить("Ошибка", Ошибка);
		РезультатВыполнения.Вставить("СписокОшибок", СписокОшибок);
		РезультатВыполнения.Вставить("ЭтапКонвертации", "Проверка данных");
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры

Процедура ПроверитьДанныеПереносаИзБухгалтерии(ПараметрыПроверки, СписокОшибок)
	
	НачПериода     = ПараметрыПроверки.НачалоПериодаВыгрузки;	
	КонПериода     = ПараметрыПроверки.ОкончаниеПериодаВыгрузки;
	Организация    = ПараметрыПроверки.Организация;
	СписокИменБП   = ПараметрыПроверки.КонрольныеДанные;
	СписокДанныхБП = ПараметрыПроверки.КонрольныеЗначения;
	ЕстьОстатки    = ПараметрыПроверки.ЕстьОстатки;
		
	Если НЕ ЕстьОстатки Тогда
		Возврат;
	КонецЕсли;
	
	
	//Преобразуем строки в многострочную часть
	СписокИмен = СтрЗаменить(СписокИменБП, ",", Символы.ПС);
	СписокДанных = СтрЗаменить(СписокДанныхБП, ",", Символы.ПС);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода", НачПериода);
	Запрос.УстановитьПараметр("КонПериода", КонПериода);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	//********************************************************
	// Итоговая сверка
	
	ВсегоСНД = 0;
	ВсегоСНК = 0;
	ВсегоДО	= 0;
	ВсегоКО	= 0;
	ВсегоСКД = 0;
	ВсегоСКК = 0;
	
	Для НомерСтроки = 1 По СтрЧислоСтрок(СписокИмен) Цикл
		Если Лев(СтрПолучитьСтроку(СписокИмен, НомерСтроки),3) = "СНД"  Тогда
			ВсегоСНД	= ВсегоСНД + Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки));
			ВсегоСНК	= ВсегоСНК + Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+1));
			ВсегоДО		= ВсегоДО + Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+2));
			ВсегоКО		= ВсегоКО + Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+3));
			ВсегоСКД	= ВсегоСКД + Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+4));
			ВсегоСКК	= ВсегоСКК + Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+5));
		КонецЕсли;
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт) КАК СуммаНачальныйОстатокДт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт) КАК СуммаНачальныйОстатокКт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотКт) КАК СуммаОборотКт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт) КАК СуммаКонечныйОстатокДт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт) КАК СуммаКонечныйОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачПериода,
	|			&КонПериода,
	|			,
	|			,
	|			НЕ Счет.Забалансовый
	|				И Счет.Код <> ""000""
	|				И НЕ Счет.ЗапретитьИспользоватьВПроводках,
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|ГДЕ
	|	ХозрасчетныйОстаткиИОбороты.Счет.Забалансовый = ЛОЖЬ
	|	И ХозрасчетныйОстаткиИОбороты.Счет.Код <> ""000""
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиИОбороты.Счет
	|ИТОГИ ПО
	|	Счет ИЕРАРХИЯ";
	
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Если ЕстьОстатки Тогда
		
		ТекстСообщения = НСтр("ru='Проверка итогового начального сальдо';uk='Перевірка підсумкового початкового сальдо'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Если Результат.Строки.Итог("СуммаНачальныйОстатокДт") <> ВсегоСНД  Тогда
			ШаблонСообщения = НСтр("ru='Не совпадает итоговое начальное сальдо по дебету
|	Значение в базе-источнике: %1
|	Значение в базе-приемнике: %2';uk='Не збігається підсумкове початкове сальдо за дебетом
|	Значення в базі-джерелі: %1
|	Значення в базі-приймачі: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ВсегоСНД, Результат.Строки.Итог("СуммаНачальныйОстатокДт"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			СписокОшибок.Добавить(ТекстСообщения);
		Иначе
			ТекстСообщения = НСтр("ru='Проверка итогового начального сальдо по дебету прошла успешно';uk='Перевірка підсумкового початкового сальдо по дебету пройшла успішно'");				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Если Результат.Строки.Итог("СуммаНачальныйОстатокКт") <> ВсегоСНК  Тогда
			ШаблонСообщения = НСтр("ru='Не совпадает итоговое начальное сальдо по кредиту
|	Значение в базе-источнике: %1
|	Значение в базе-приемнике: %2';uk='Не збігається підсумкове початкове сальдо по кредиту
|	Значення в базі-джерелі: %1
|	Значення в базі-приймачі: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ВсегоСНК, Результат.Строки.Итог("СуммаНачальныйОстатокКт"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			СписокОшибок.Добавить(ТекстСообщения);
		Иначе
			ТекстСообщения = НСтр("ru='Проверка итогового начального сальдо по кредиту прошла успешно';uk='Перевірка підсумкового початкового сальдо по кредиту пройшла успішно'");				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	//********************************************************
	// Сверка по счетам
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт) КАК СуммаНачальныйОстатокДт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт) КАК СуммаНачальныйОстатокКт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотКт) КАК СуммаОборотКт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт) КАК СуммаКонечныйОстатокДт,
	|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт) КАК СуммаКонечныйОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачПериода, &КонПериода, , , , , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|ГДЕ
	|	ХозрасчетныйОстаткиИОбороты.Счет.Забалансовый = ЛОЖЬ
	|	И ХозрасчетныйОстаткиИОбороты.Счет.Код <> ""000""
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиИОбороты.Счет
	|ИТОГИ
	|	СУММА(СуммаНачальныйОстатокДт),
	|	СУММА(СуммаНачальныйОстатокКт),
	|	СУММА(СуммаОборотДт),
	|	СУММА(СуммаОборотКт),
	|	СУММА(СуммаКонечныйОстатокДт),
	|	СУММА(СуммаКонечныйОстатокКт)
	|ПО
	|	Счет ИЕРАРХИЯ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Для Каждого СтрокаРезультата ИЗ Результат.Строки Цикл
		Найден = Ложь;
		
		// В строке имен найдем номер строки с которой начинаем проверку счетов соответствующих БП
		Для НомерСтроки = 1 По СтрЧислоСтрок(СписокИмен) Цикл
			Если СтрПолучитьСтроку(СписокИмен, НомерСтроки) = "СНД" + СокрЛП(СтрокаРезультата.Счет.Код) Тогда
				Найден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Найден Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверка итогов по найденному счету
		
		СНД		= Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки));
		СНК		= Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+1));
		ДО		= Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+2));
		КО		= Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+3));
		СКД		= Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+4));
		СКК		= Число(СтрПолучитьСтроку(СписокДанных, НомерСтроки+5));
		
		Если ЕстьОстатки Тогда
			ШаблонСообщения = НСтр("ru='Проверка начального сальдо для счета %1';uk='Перевірка початкового сальдо для рахунку %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Если СтрокаРезультата.СуммаНачальныйОстатокДт <> СНД Тогда
				ШаблонСообщения = НСтр("ru='Не совпадает начальное сальдо по дебету счета %1
|	Значение в базе-источнике: %2
|	Значение в базе-приемнике: %3';uk='Не збігається початкове сальдо за дебетом рахунка %1
|	Значення в базі-джерелі: %2
|	Значення в базі-приймачі: %3'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код,
				СНД, СтрокаРезультата.СуммаНачальныйОстатокДт);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				СписокОшибок.Добавить(ТекстСообщения);
			Иначе
				ШаблонСообщения = НСтр("ru='Проверка начального сальдо по дебету для счета %1 прошла успешно';uk='Перевірка початкового сальдо по дебету рахунку для %1 пройшла успішно'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
			Если СтрокаРезультата.СуммаНачальныйОстатокКт <> СНК Тогда
				ШаблонСообщения = НСтр("ru='Не совпадает начальное сальдо по кредиту счета %1
|	Значение в базе-источнике: %2
|	Значение в базе-приемнике: %3';uk='Не збігається початкове сальдо за кредитом рахунка %1
|	Значення в базі-джерелі: %2
|	Значення в базі-приймачі: %3'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код,
				СНК, СтрокаРезультата.СуммаНачальныйОстатокКт);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				СписокОшибок.Добавить(ТекстСообщения);
			Иначе
				ШаблонСообщения = НСтр("ru='Проверка начального сальдо по кредиту для счета %1 прошла успешно';uk='Перевірка початкового сальдо по кредиту для рахунку %1 пройшла успішно'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаРезультата.Счет.Код);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////////////////////
// Процедура печати отчета

Процедура ПолучитьОтчетОбОшибках(ОтчетОбОшибках, ИмяИБ = "", ПутьКИБ = "", ИмяФайлаВыгруженныхДанных = "", ТаблицаОшибок) Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Обработка.ПереносДанныхИзИнформационныхБаз1СПредприятия77.СписокОшибок");	

	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	Если ЗначениеЗаполнено(ИмяИБ) Тогда
		ОбластьШапка.Параметры.ИмяИБ = ИмяИБ;
		ОбластьШапка.Параметры.ПутьКИБ = ПутьКИБ;
	Иначе
		ОбластьШапка.Параметры.ИмяИБ = "Файл данных";
		ОбластьШапка.Параметры.ПутьКИБ = ИмяФайлаВыгруженныхДанных;
	КонецЕсли;
	
	ОтчетОбОшибках.Вывести(ОбластьШапка);
	
	Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
		ОбластьСтрока.Параметры.Этап = СтрокаТаблицы.Этап;
		ОбластьСтрока.Параметры.Ошибка = СтрокаТаблицы.Ошибка;
		ОбластьСтрока.Параметры.Рекомендации = СтрокаТаблицы.Рекомендации;
		ОбластьСтрока.Параметры.Расшифровка = СтрокаТаблицы.Расшифровка;

		ОтчетОбОшибках.Вывести(ОбластьСтрока);
	КонецЦикла;
	
КонецПроцедуры


#КонецЕсли