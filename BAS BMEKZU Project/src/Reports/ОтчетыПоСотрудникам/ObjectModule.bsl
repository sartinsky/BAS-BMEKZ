#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Для общей формы "Форма отчета" подсистемы "Варианты отчетов".
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	
	КлючВарианта = НеОпределено;
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("КлючВарианта", КлючВарианта);
	
	Если КлючВарианта = "П2" ИЛИ КадровыйУчетВнутренний.ОтчетВидаКарточкаСотрудника(КлючВарианта) Тогда
		
		Попытка
			
			СтандартнаяОбработка = Ложь;
			
			// Параметры документа
			ДокументРезультат.ТолькоПросмотр = Истина;
			ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТиповаяФормаП2";
			ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			ДокументРезультат.Очистить();
			ДокументРезультат.АвтоМасштаб = Истина;
			ДокументРезультат.НачатьАвтогруппировкуСтрок();
			
			НастройкиОтчета = ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки();
			НастройкиОтчета.Выбор.Элементы.Очистить();
			СоответствиеПользовательскихПолей = ЗарплатаКадры.СоответствиеПользовательскихПолей(НастройкиОтчета.ПользовательскиеПоля.Элементы);
			ПроверитьЗначенияПараметров(НастройкиОтчета, Истина);
			
			ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
			Если ТипЗнч(ЗначениеПараметра.Значение) = Тип("СтандартнаяДатаНачала") Тогда
				ДатаОтчета = ЗначениеПараметра.Значение.Дата;
			Иначе
				ДатаОтчета = ЗначениеПараметра.Значение;
			КонецЕсли;
			
			РаботникКадровойСлужбыРасшифровкаПодписи = "";
			ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("РаботникКадровойСлужбы"));
			Если ЗначениеПараметра <> Неопределено
				И ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда
				
				КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ЗначениеПараметра.Значение, "Фамилия, Имя, Отчество", ДатаОтчета);
				Если КадровыеДанные.Количество() > 0 Тогда
					РаботникКадровойСлужбыРасшифровкаПодписи = ФизическиеЛицаКлиентСервер.ИмяФамилияВФорматеДСТУ(КадровыеДанные[0]);
				КонецЕсли; 
				
			КонецЕсли; 
			
			Данные = Новый ДеревоЗначений;
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных, НастройкиОтчета,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			//Создадим и инициализируем процессор компоновки
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ПроцессорВывода.УстановитьОбъект(Данные);
			
			//Обозначим начало вывода
			ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
			Группировки = БухгалтерскиеОтчеты.ПолучитьПоляГруппировок(ЭтотОбъект.КомпоновщикНастроек);
			
			Если КадровыйУчетВнутренний.ОтчетВидаКарточкаСотрудника(КлючВарианта) Тогда
				КадровыйУчетВнутренний.ВывестиМакетыОтчетовПоСотрудникам(КлючВарианта, ДокументРезультат, Данные, Группировки, ДатаОтчета, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи);
			Иначе
				ВывестиМакетыСГруппировкамиП2(ДокументРезультат, Данные, Группировки, ДатаОтчета, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи);
			КонецЕсли;
			
			ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
			
			ДопСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
			ДопСвойства.Вставить("ОтчетПустой", Данные.Строки.Количество() = 0);
			
		Исключение
			Инфо = ИнформацияОбОшибке();
			ВызватьИсключение НСтр("ru='В настройку отчета внесены критичные изменения. Отчет не будет сформирован.';uk='У настройку звіту внесені критичні зміни. Звіт не буде сформований.'") + " " + Инфо.Описание;
		КонецПопытки;
		
	Иначе
		
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		ПроверитьЗначенияПараметров(НастройкиОтчета);
		
		СтандартнаяОбработка = ложь;
		
		ДокументРезультат.Очистить();
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
		
		//Создадим и инициализируем процессор компоновки
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
		
		//Обозначим начало вывода
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		
		ДопСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
		ДопСвойства.Вставить("ОтчетПустой", ОтчетыСервер.ОтчетПустой(ЭтотОбъект, ПроцессорКомпоновки));
		
	КонецЕсли;
	
КонецПроцедуры

// Типовая форма П-2

Процедура ВывестиМакетыСГруппировкамиП2(ДокументРезультат, Данные, Группировки, ДатаОтчета, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи)
	Если Группировки.Количество() > 0 Тогда
		Для Каждого СтрокаДанных Из Данные.Строки Цикл
		
			ПолеДанных = Группировки[0].Значение;
			ВывестиГруппировкуП2(ДокументРезультат, СтрокаДанных, ПолеДанных, 0, СоответствиеПользовательскихПолей);
			ВывестиВложенныеГруппировкиСМакетамиП2(ДокументРезультат, СтрокаДанных, Группировки, 1, ДатаОтчета, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи);
		
		КонецЦикла;
	
	Иначе
		
		ДополнительныеСведения = КадровыйУчет.ДополнительныеСведенияТиповойФормыП2(Данные.Строки, ДатаОтчета);
		
		Для Каждого СтрокаДанных Из Данные.Строки Цикл
			
			ВывестиМакетП2(ДокументРезультат, СтрокаДанных, 0, ДатаОтчета, ДополнительныеСведения, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи);
			
			Если СтрокаДанных <> Данные.Строки.Получить(Данные.Строки.Количество() - 1) Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиВложенныеГруппировкиСМакетамиП2(ДокументРезультат, Данные, Группировки, Уровень, ДатаОтчета, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи)
	
	Если Группировки.Количество() > Уровень Тогда 
		
		Для Каждого СтрокаДанных Из Данные.Строки Цикл
		
			ПолеДанных = Группировки[Уровень].Значение;
			ВывестиГруппировкуП2(ДокументРезультат, СтрокаДанных, ПолеДанных, Уровень,  СоответствиеПользовательскихПолей);
			ВывестиВложенныеГруппировкиСМакетамиП2(ДокументРезультат, СтрокаДанных, Группировки, Уровень + 1, ДатаОтчета,  СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи);
		
		КонецЦикла;
		
	Иначе
		
		ДополнительныеСведения = КадровыйУчет.ДополнительныеСведенияТиповойФормыП2(Данные.Строки, ДатаОтчета);
		
		Для Каждого СтрокаДанных Из Данные.Строки Цикл
			
			ВывестиМакетП2(ДокументРезультат, СтрокаДанных, Уровень, ДатаОтчета, ДополнительныеСведения,  СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиГруппировкуП2(ДокументРезультат, СтрокаДанных, Поле, Уровень, СоответствиеПользовательскихПолей)
	
	МакетГруппировки  = УправлениеПечатью.МакетПечатнойФормы("Отчет.ОтчетыПоСотрудникам.ПФ_MXL_UK_П2");
	ОбластьГруппировки = МакетГруппировки.ПолучитьОбласть("Группировка");
	
	ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.НайтиПоле(Новый ПолеКомпоновкиДанных(Поле));
	
	ОбластьГруппировки.Параметры.НазваниеПараметра = ДоступноеПоле.Заголовок;
	ОбластьГруппировки.Параметры.Значение = СтрокаДанных[СтрЗаменить(Поле, ".", "")];
	
	ДокументРезультат.Вывести(ОбластьГруппировки, Уровень);
	
КонецПроцедуры 

Процедура ВывестиМакетП2(ДокументРезультат, СтрокаДанных, Уровень, ДатаОтчета, ДополнительныеСведения, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи) 
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.ОтчетыПоСотрудникам.ПФ_MXL_UK_П2");
	
	ОбщиеСведения					= Макет.ПолучитьОбласть("ОбщиеСведения");
	СоставСемьи						= Макет.ПолучитьОбласть("СоставСемьи");
	Адрес							= Макет.ПолучитьОбласть("Адрес");
	УдостоверениеЛичности			= Макет.ПолучитьОбласть("УдостоверениеЛичности");
	ВоинскийУчет					= Макет.ПолучитьОбласть("ВоинскийУчет");
	ПрофОбразование					= Макет.ПолучитьОбласть("ПрофОбразование");
	НазначенияИПеремещения			= Макет.ПолучитьОбласть("НазначенияИПеремещения");
	Отпуска							= Макет.ПолучитьОбласть("Отпуска");
	ОбластьДополнительныеСведения	= Макет.ПолучитьОбласть("ДополнительныеСведения");
	
	ОбщиеСведения.Параметры.ДатаАктуальности   = ДатаОтчета;
	
	ОбщиеСведения.Параметры.Заполнить(СтрокаДанных);
	ЗарплатаКадры.ЗаполнитьПараметрыПользовательскихПолей(ОбщиеСведения, СтрокаДанных, СоответствиеПользовательскихПолей);
	Если ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеСтрана) Тогда
		ОбщиеСведения.Параметры.Гражданство = СтрокаДанных.ЛичныеДанныеСтрана;
	КонецЕсли; 
	
	ОбщиеСведения.Параметры.Пенсионер = ?(СтрокаДанных.ЛичныеДанныеПенсионер, "є пенсіонером", "не є пенсіонером");
	
	// ТЕЛЕФОН
	ТелефонДомашнийПредставление = "";
	ТелефонДомашнийПредставление = ?(СокрЛП(СтрокаДанных.ЛичныеДанныеКонтактнаяИнформацияТелефонДомашний) = "","","тел.: "+СокрЛП(СтрокаДанных.ЛичныеДанныеКонтактнаяИнформацияТелефонДомашний));

	// АДРЕСА
	
	Адрес.Параметры.ЮрАдресПроживания       = СтрокаДанных.ЛичныеДанныеКонтактнаяИнформацияАдресПоПропискеПредставление;
	Если НЕ СокрЛП(СтрокаДанных.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияПредставление) = "" И НЕ ТелефонДомашнийПредставление = "" Тогда
		РазделительАдресТелефон = ", "
	Иначе
		РазделительАдресТелефон = ""
	КонецЕсли;	
	Адрес.Параметры.ФактАдресПроживания = СтрокаДанных.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияПредставление +
										РазделительАдресТелефон + ТелефонДомашнийПредставление;
	
	// ПАСПОРТ
	Если ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументВид) Тогда
		
		УдостоверениеЛичности.Параметры.ДокументСерия = ?(ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументСерия),СтрокаДанных.ЛичныеДанныеУдостоверениеДокументСерия,"");
		УдостоверениеЛичности.Параметры.ДокументНомер = ?(ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументНомер),СтрокаДанных.ЛичныеДанныеУдостоверениеДокументНомер,"");
		УдостоверениеЛичности.Параметры.ДокументДатаВыдачи = Формат(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументДатаВыдачи, "ДЛФ=DD");
		УдостоверениеЛичности.Параметры.ДокументКемВыдан = ?(ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументКемВыдан),СтрокаДанных.ЛичныеДанныеУдостоверениеДокументКемВыдан,"");
		
	КонецЕсли;
	
	ОбщиеСведения.Параметры.РабочееМестоОрганизацияНаименованиеПолное = ВРег(ОбщиеСведения.Параметры.РабочееМестоОрганизацияНаименованиеПолное);
	
	ДокументРезультат.Вывести(ОбщиеСведения);

	ДанныеЗаполнения = ДополнительныеСведения.Получить("ДанныеЗаполненияСоставСемьи");
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполненияПоСотруднику = Новый Массив;
	Иначе
		ДанныеЗаполненияПоСотруднику = ДанныеЗаполнения.Получить(СтрокаДанных.ЛичныеДанныеФизическоеЛицо);
		Если ДанныеЗаполненияПоСотруднику = Неопределено Тогда
			ДанныеЗаполненияПоСотруднику = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	Инд = 0;
	Если ДанныеЗаполненияПоСотруднику.Количество() <> 0 Тогда
		Пока Инд <= 4 Цикл
			Если Инд < ДанныеЗаполненияПоСотруднику.Количество() Тогда
				СтрокаСоставСемьи = ДанныеЗаполненияПоСотруднику[Инд];
				ИндексПараметра = Инд + 1;
				СоставСемьи.Параметры["СтепеньРодства" + ИндексПараметра] = СтрокаСоставСемьи.СтепеньРодства;
				СоставСемьи.Параметры["ФИОРодственника" + ИндексПараметра] = СтрокаСоставСемьи.ФИОРодственника;
				СоставСемьи.Параметры["ГодРожденияРодственника" + ИндексПараметра] = СтрокаСоставСемьи.ГодРожденияРодственника;
			КонецЕсли;
			Инд = Инд + 1;
		КонецЦикла;
	КонецЕсли;
	
	ДокументРезультат.Вывести(СоставСемьи);
	ДокументРезультат.Вывести(Адрес);
	ДокументРезультат.Вывести(УдостоверениеЛичности);
	ДокументРезультат.Вывести(ВоинскийУчет);
	ДокументРезультат.Вывести(Профобразование);

	//ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	
	// Прием на работу и переводы на другую работу
	ДанныеЗаполнения = ДополнительныеСведения.Получить("ДанныеЗаполненияКадровойИстории");
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполненияПоСотруднику = Новый Массив;
	Иначе
		ДанныеЗаполненияПоСотруднику = ДанныеЗаполнения.Получить(СтрокаДанных.РабочееМестоСотрудник);
		Если ДанныеЗаполненияПоСотруднику = Неопределено Тогда
			ДанныеЗаполненияПоСотруднику = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	Инд = 0;
	Если ДанныеЗаполненияПоСотруднику.Количество() <> 0 Тогда
		Пока Инд <= 9 Цикл
			Если Инд < ДанныеЗаполненияПоСотруднику.Количество() Тогда
				СтрокаНазначенияИПеремещения = ДанныеЗаполненияПоСотруднику[Инд];
				ИндексПараметра = Инд + 1;
				НазначенияИПеремещения.Параметры["ДатаПеревода" + ИндексПараметра] = Формат(СтрокаНазначенияИПеремещения.ДатаПеревода,"ДФ=""дд.ММ.гггг""");
				НазначенияИПеремещения.Параметры["ПодразделениеПеревода" + ИндексПараметра] = СтрокаНазначенияИПеремещения.ПодразделениеПеревода;
				НазначенияИПеремещения.Параметры["ДолжностьПеревода" + ИндексПараметра] = СтрокаНазначенияИПеремещения.ДолжностьПеревода;
				НазначенияИПеремещения.Параметры["Код" + ИндексПараметра] = СтрокаНазначенияИПеремещения.ДолжностьПеревода.КодКП;
				НазначенияИПеремещения.Параметры["ОснованиеПеревода" + ИндексПараметра] = СтрокаНазначенияИПеремещения.ОснованиеПеревода;
				НазначенияИПеремещения.Параметры["ТарифнаяСтавка" + ИндексПараметра] = Формат(СтрокаНазначенияИПеремещения.ТарифнаяСтавка,"ЧДЦ=2");
			КонецЕсли;	
			Инд = Инд + 1;
		КонецЦикла;	
	КонецЕсли;
	ДокументРезультат.Вывести(НазначенияИПеремещения);
	ДокументРезультат.Вывести(Отпуска);
	
	ОбластьДополнительныеСведения.Параметры.Заполнить(СтрокаДанных);
	ОбластьДополнительныеСведения.Параметры.РаботникКадровойСлужбыРасшифровкаПодписи = РаботникКадровойСлужбыРасшифровкаПодписи;
	ДокументРезультат.Вывести(ОбластьДополнительныеСведения);

	
КонецПроцедуры


Функция СведенияОСтажахПоУмолчанию()
	
	МассивСведенийОСтаже = Новый Массив;
	
	МассивСведенийОСтаже.Добавить(Новый Структура("СтажВид,СтажЛет,СтажМесяцев,СтажДней",
		"Общий", 0, 0, 0));
	МассивСведенийОСтаже.Добавить(Новый Структура("СтажВид,СтажЛет,СтажМесяцев,СтажДней",
		"Непрерывный", 0, 0, 0));
	МассивСведенийОСтаже.Добавить(Новый Структура("СтажВид,СтажЛет,СтажМесяцев,СтажДней",
		"Дающий право на надбавку за выслугу лет", 0, 0, 0));
	МассивСведенийОСтаже.Добавить(СтруктураПустогоСтажа());
		
	Возврат МассивСведенийОСтаже;
	
КонецФункции

Функция СтруктураПустогоСтажа()
	
	Возврат Новый Структура("СтажВид,СтажЛет,СтажМесяцев,СтажДней", "___________________________________", 0, 0, 0);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и Функции

Процедура ПроверитьЗначенияПараметров(НастройкиОтчета, ВыводитьПодписантов = Ложь)
	
	ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));

	Если ЗначениеПараметра <> Неопределено Тогда
		
		УстановитьДатуОтчета = Ложь;
		Если ТипЗнч(ЗначениеПараметра.Значение) = Тип("Неопределено") Тогда
			УстановитьДатуОтчета = Истина;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеПараметра.Значение) = Тип("Дата")
			И ЗначениеПараметра.Значение = '00010101' Тогда
			УстановитьДатуОтчета = Истина;
		КонецЕсли; 
		
		Если ТипЗнч(ЗначениеПараметра.Значение) = Тип("СтандартнаяДатаНачала")
			И Дата(ЗначениеПараметра.Значение) = '00010101' Тогда
			УстановитьДатуОтчета = Истина;
		КонецЕсли; 
		
		Если УстановитьДатуОтчета Тогда
			ЗначениеПараметра.Значение = ТекущаяДатаСеанса();
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ВыводитьПодписантов Тогда
		
		ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("РаботникКадровойСлужбы"));
		Если НЕ ЗначениеПараметра.Использование Тогда
			ЗначениеПараметра.Значение = Неопределено;
		КонецЕсли; 
		ЗначениеПараметра.Использование = Истина;
		
		ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДолжностьРаботникаКадровойСлужбы"));
		Если НЕ ЗначениеПараметра.Использование Тогда
			ЗначениеПараметра.Значение = Неопределено;
		КонецЕсли; 
		ЗначениеПараметра.Использование = Истина;
			
	КонецЕсли;
	
КонецПроцедуры

ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(ЭтотОбъект);

#КонецЕсли