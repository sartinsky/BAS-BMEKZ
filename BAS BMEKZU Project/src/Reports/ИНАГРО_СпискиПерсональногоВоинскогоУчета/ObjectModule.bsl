#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ИнициализироватьОтчет(); 
	
	СтандартнаяОбработка = Ложь;
	
	НастройкиОтчета = ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки();				   

	//УстановитьЗначенияПараметров(НастройкиОтчета);
	
	ДокументРезультат.Очистить();
	
	ДокументРезультат.ТолькоПросмотр = Истина;
	ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СпискиПерсональногоВоинскогоУчета";
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	УстановитьДатуОтчета(НастройкиОтчета);
	
	ДанныеОтчета = Новый ДеревоЗначений;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	//СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
	// Создадим и инициализируем процессор компоновки.
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
	
	// Обозначим начало вывода
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	ВывестиМакетСпискиПерсональногоВоинскогоУчета(ДокументРезультат, ДанныеОтчета);

КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьОтчет() Экспорт
	
	//ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(ЭтотОбъект);
	
КонецПроцедуры

// Для общей формы "Форма отчета" подсистемы "Варианты отчетов".
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ИнициализироватьОтчет();
	ЗначениеВДанныеФормы(ЭтотОбъект, Форма.Отчет);
	
КонецПроцедуры

Процедура УстановитьДатуОтчета(НастройкиОтчета)
	
	ЗначениеПараметраПериод = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	
	ЗначениеПараметраДатаОтчета = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаОтчета"));
	ЗначениеПараметраДатаФормирования = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаФормирования"));

		Если ЗначениеПараметраПериод <> Неопределено Тогда
			ПараметрДатаОтчета = ЗначениеПараметраДатаОтчета.Значение.Дата;
			ПараметрДатаФормирования = ЗначениеПараметраДатаФормирования.Значение;
			
			Если ТипЗнч(ЗначениеПараметраДатаОтчета.Значение) = Тип("СтандартнаяДатаНачала") Тогда
			     ПараметрДатаОтчета = ЗначениеПараметраДатаОтчета.Значение.Дата;
			КонецЕсли; 
			Если ТипЗнч(ЗначениеПараметраДатаФормирования.Значение) = Тип("СтандартнаяДатаНачала") Тогда
			     ПараметрДатаФормирования = ЗначениеПараметраДатаФормирования.Значение.Дата;
			КонецЕсли; 
			
			
			ПараметрПериод = ?(ПараметрДатаОтчета > ПараметрДатаФормирования, ПараметрДатаОтчета, ПараметрДатаФормирования);
			
			НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"), ПараметрПериод);
			
		КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиМакетСпискиПерсональногоВоинскогоУчета(ДокументРезультат, Данные) Экспорт
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Макет 		  = УправлениеПечатью.МакетПечатнойФормы("Отчет.ИНАГРО_СпискиПерсональногоВоинскогоУчета.ПФ_СпискиПерсональногоВоинскогоУчета");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТаблицаФизическихЛиц = Новый ТаблицаЗначений;
	ТаблицаФизическихЛиц.Колонки.Добавить("ФизЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));

	ТаблицаУвольнений = Новый ТаблицаЗначений;
	ТаблицаУвольнений.Колонки.Добавить("ФизЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаУвольнений.Колонки.Добавить("ДатаУвольнения", Новый ОписаниеТипов("Дата"));
	
	Для Каждого ДанныеОрганизации Из Данные.Строки Цикл
		Для Каждого ДанныеСотрудников Из ДанныеОрганизации.Строки Цикл 
			НоваяСтрокаТаблицыСотрудников = ТаблицаФизическихЛиц.Добавить();
			НоваяСтрокаТаблицыСотрудников.ФизЛицо = ДанныеСотрудников.ФизЛицо;
		КонецЦикла;	
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаФизическихЛиц", ТаблицаФизическихЛиц); 
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаФизическихЛиц.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ ВТФизическиеЛица
	|ИЗ
	|	&ТаблицаФизическихЛиц КАК ТаблицаФизическихЛиц";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛицаОбразование.ВидОбразования КАК ВидОбразования,
	|	ФизическиеЛицаОбразование.Специальность КАК Специальность,
	|	ФизическиеЛицаОбразование.Диплом КАК Диплом,
	|	ФизическиеЛицаОбразование.Ссылка КАК ФизическоеЛицо
	|ИЗ
	|	ВТФизическиеЛица КАК ТаблицаОтборовФизическихЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.ИНАГРО_Образование КАК ФизическиеЛицаОбразование
	|		ПО ТаблицаОтборовФизическихЛиц.ФизЛицо = ФизическиеЛицаОбразование.Ссылка";
	ОбразованияФизическихЛиц = Запрос.Выполнить().Выбрать();  
	
	Запрос.УстановитьПараметр("Период", Период);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СемейноеПоложениеФизЛицСрезПоследних.Физлицо КАК ФизическоеЛицо,     
	|	СемейноеПоложениеФизЛицСрезПоследних.СемейноеПоложение КАК СемейноеПоложение
	|ИЗ
	|	РегистрСведений.ИНАГРО_СемейноеПоложениеФизЛиц.СрезПоследних(
	|			&Период,
	|				 Физлицо В
	|					(ВЫБРАТЬ
	|						ТаблицаОтборовФизическихЛиц.Физлицо КАК Физлицо
	|					ИЗ
	|						ВТФизическиеЛица КАК ТаблицаОтборовФизическихЛиц)) КАК СемейноеПоложениеФизЛицСрезПоследних";  
	СемейноеПоложениеФизЛиц = Запрос.Выполнить().Выбрать();
	
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СоставСемьи.Ссылка КАК ФизическоеЛицо,
	               |	СоставСемьи.СтепеньРодства КАК СтепеньРодства,
	               |	СоставСемьи.ФизЛицо КАК Родственник,
	               |	ВЫБОР
	               |		КОГДА ФИОФизЛиц.Фамилия ЕСТЬ NULL
	               |			ТОГДА СоставСемьи.ФизЛицо.Наименование
	               |		ИНАЧЕ ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество
	               |	КОНЕЦ КАК ФиоРодственника,
	               |	СоставСемьи.ФизЛицо.ДатаРождения КАК ДатаРожденияРодственника,
	               |	СоставСемьи.ГодРождения
	               |ИЗ
	               |	ВТФизическиеЛица КАК ТаблицаОтборовФизическихЛиц
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.СоставСемьи КАК СоставСемьи
	               |		ПО (СоставСемьи.Ссылка = ТаблицаОтборовФизическихЛиц.Физлицо)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Период, ) КАК ФИОФизЛиц
	               |		ПО (СоставСемьи.ФизЛицо = ФИОФизЛиц.ФизическоеЛицо)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ФизическоеЛицо,
	               |	СоставСемьи.ГодРождения УБЫВ";
	РодственникиФизическихЛиц = Запрос.Выполнить().Выбрать();     
	
	СписокПаспортов = Новый Массив;
   	СписокПаспортов.Добавить(Справочники.ВидыДокументовФизическихЛиц.Паспорт);
   	СписокПаспортов.Добавить(Справочники.ВидыДокументовФизическихЛиц.Загранпаспорт);
	
	Запрос.УстановитьПараметр("СписокПаспортов", СписокПаспортов); 
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументыФизическихЛицСрезПоследних.Физлицо КАК ФизическоеЛицо,     
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ДокументВид,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК Серия,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК Номер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачи,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыдан
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
	|			,
	|			ВидДокумента В (&СписокПаспортов)
	|				И Физлицо В
	|					(ВЫБРАТЬ
	|						ТаблицаОтборовФизическихЛиц.ФизЛицо КАК ФизическоеЛицо
	|					ИЗ
	|						ВТФизическиеЛица КАК ТаблицаОтборовФизическихЛиц)) КАК ДокументыФизическихЛицСрезПоследних";  
	ДокументыФизическихЛиц = Запрос.Выполнить().Выбрать();
	
	
	Для Каждого ДанныеОрганизации Из Данные.Строки Цикл

		ОбластьЗаголовок.Параметры.ПолноеНаименованиеОрганизации = ДанныеОрганизации.Организация.НаименованиеПолное;
		ДокументРезультат.Вывести(ОбластьЗаголовок);
		Для Каждого ДанныеСотрудников Из ДанныеОрганизации.Строки Цикл
			СтрокаТаблицы.Параметры.Заполнить(ДанныеСотрудников);
			
			НомерРегистратора = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеСотрудников.Регистратор.Номер);
	    	ДатаРегистратора = Формат(ДанныеСотрудников.Регистратор.Дата,"ДФ='dd.MM.yyyy'");
			
			Если ЗначениеЗаполнено(ДанныеСотрудников.КодПоДРФО) И ЗначениеЗаполнено(ДанныеСотрудников.НомерЗаписиВРеестреВоеннообязанных) Тогда  
				СтрокаТаблицы.Параметры.НомерЗаписиВРеестреВоеннообязанных = ДанныеСотрудников.НомерЗаписиВРеестреВоеннообязанных + "/" + ДанныеСотрудников.КодПоДРФО
			Иначе 
				СтрокаТаблицы.Параметры.НомерЗаписиВРеестреВоеннообязанных = ?(ЗначениеЗаполнено(ДанныеСотрудников.КодПоДРФО),ДанныеСотрудников.КодПоДРФО, ДанныеСотрудников.НомерЗаписиВРеестреВоеннообязанных ) 
			КонецЕсли;      
			
			ОтборПоУвольнению = Новый Структура;         
			ОтборПоУвольнению.Вставить("Сотрудник", ДанныеСотрудников.Сотрудник); 
			
			НомерРегистратораДоУвольнения = "";
			ДатаРегистратораДоУвольнения = "";
			РегистраторДоУвольнения = Неопределено;
			
			Если ЗначениеЗаполнено(ДанныеСотрудников.ДатаУвольнения) Тогда
				ЗаписиПередУвольнением = РегистрыСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(ДанныеСотрудников.ДеньПередУвольнением, ОтборПоУвольнению);
				Если ЗаписиПередУвольнением <> Неопределено И ЗаписиПередУвольнением.Количество() > 0 Тогда
					РегистраторДоУвольнения = ЗаписиПередУвольнением[0].Регистратор;
					НомерРегистратораДоУвольнения = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(РегистраторДоУвольнения.Номер);
	    			ДатаРегистратораДоУвольнения = Формат(РегистраторДоУвольнения.Дата,"ДФ='dd.MM.yyyy'");
				КонецЕсли;	
			КонецЕсли;	
			
			Если НЕ РегистраторДоУвольнения = Неопределено Тогда    
				СтрокаТаблицы.Параметры.РеквизитыРегистратора = "Наказ № " + НомерРегистратораДоУвольнения + " від " + ДатаРегистратораДоУвольнения + "/" + Символы.ПС + Символы.ПС +
				"Наказ про звільнення № " + НомерРегистратора + " від " + ДатаРегистратора;
			Иначе	
				СтрокаТаблицы.Параметры.РеквизитыРегистратора = "Наказ № " + НомерРегистратора + " від " + ДатаРегистратора;
			КонецЕсли; 
			
			Отбор = Новый Структура;         
			Отбор.Вставить("ФизическоеЛицо", ДанныеСотрудников.ФизЛицо); 
			
   		    ТекстСоставСемьи = ""; 
			ТекстОбразование = "";  
			ТекстДокументы = "";
			
			СемейноеПоложениеФизЛиц.Сбросить(); 
			Если СемейноеПоложениеФизЛиц.НайтиСледующий(Отбор, "ФизическоеЛицо") Тогда
				ТекстСоставСемьи = Строка(СемейноеПоложениеФизЛиц.СемейноеПоложение)
			КонецЕсли;
			
			РодственникиФизическихЛиц.Сбросить();
			Пока РодственникиФизическихЛиц.НайтиСледующий(Отбор, "ФизическоеЛицо") Цикл 
				ГодРожденияРодственника = "";
				Если ЗначениеЗаполнено(РодственникиФизическихЛиц.ГодРождения) Или ЗначениеЗаполнено(РодственникиФизическихЛиц.ДатаРожденияРодственника) Тогда
					ГодРожденияРодственника = ?(ЗначениеЗаполнено(РодственникиФизическихЛиц.ГодРождения), Строка(РодственникиФизическихЛиц.ГодРождения),Год(РодственникиФизическихЛиц.ДатаРожденияРодственника));
            		ТекстСоставСемьи = ТекстСоставСемьи + Символы.ПС + Символы.ПС +  РодственникиФизическихЛиц.ФИОРодственника + ?(ЗначениеЗаполнено(ГодРожденияРодственника),", ","") 
					+ ГодРожденияРодственника; 
				Иначе
					ТекстСоставСемьи = ТекстСоставСемьи + Символы.ПС + Символы.ПС +  РодственникиФизическихЛиц.ФИОРодственника
				КонецЕсли	
			КонецЦикла;          
			СтрокаТаблицы.Параметры.ТекстСоставСемьи = ТекстСоставСемьи;     
			
			ОбразованияФизическихЛиц.Сбросить();
			Пока ОбразованияФизическихЛиц.НайтиСледующий(Отбор, "ФизическоеЛицо") Цикл                  
				ТекстДокумент = "";
				ТекстДокумент = ОбразованияФизическихЛиц.Диплом;
				Если ТекстОбразование = "" Тогда
        			ТекстОбразование = ТекстОбразование + Строка(ОбразованияФизическихЛиц.ВидОбразования) +  
					?(ЗначениеЗаполнено(ОбразованияФизическихЛиц.Специальность), ", ", "") + ОбразованияФизическихЛиц.Специальность + ?(СокрЛП(ТекстДокумент) = "","", ", ") +
					ТекстДокумент;
				Иначе	
            		ТекстОбразование = ТекстОбразование + Символы.ПС + Символы.ПС + Строка(ОбразованияФизическихЛиц.ВидОбразования) +  
					?(ЗначениеЗаполнено(ОбразованияФизическихЛиц.Специальность), ", ", "") + ОбразованияФизическихЛиц.Специальность + ?(СокрЛП(ТекстДокумент) = "","", ", ") +
					ТекстДокумент;
				КонецЕсли	
			КонецЦикла;    
			СтрокаТаблицы.Параметры.ТекстОбразование = ТекстОбразование; 
			
			ДокументыФизическихЛиц.Сбросить(); 
			Если ДокументыФизическихЛиц.НайтиСледующий(Отбор, "ФизическоеЛицо") Тогда 
				ТекстДокументы = Строка(ДокументыФизическихЛиц.ДокументВид) + " " + ДокументыФизическихЛиц.Серия + " " + ДокументыФизическихЛиц.Номер +
				?(СокрЛП(ДокументыФизическихЛиц.КемВыдан) = "", "", ", ") + ДокументыФизическихЛиц.КемВыдан + ?(СокрЛП(ДокументыФизическихЛиц.ДатаВыдачи) = "", "", ", ") +
				Формат(ДокументыФизическихЛиц.ДатаВыдачи,"ДФ=dd.MM.yyyy");
			КонецЕсли;	
			
			СтрокаТаблицы.Параметры.ТекстДокументы = ТекстДокументы; 
			ДокументРезультат.Вывести(СтрокаТаблицы);
		КонецЦикла;
		
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЦикла;
КонецПроцедуры	

#КонецОбласти


#КонецЕсли
