
#Область ОписаниеПеременных

&НаКлиенте
Перем ОтключитьФормированиеОтчета;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	Если ЗначениеЗаполнено(Параметры.Контрагент) Тогда
		КодКонтрагента = ЗначениеКодаКонтрагента(Параметры.Контрагент);
		Если ЗначениеЗаполнено(КодКонтрагента) Тогда
			СтрокаПоиска = КодКонтрагента;
			Контрагент   = Параметры.Контрагент;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Параметры.ФизическоеЛицо) Тогда
		ФИОФизическогоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ФизическоеЛицо, "Наименование");
		Если ЗначениеЗаполнено(ФИОФизическогоЛица) Тогда
			СтрокаПоиска = ФИОФизическогоЛица;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Параметры.СтрокаПоиска) Тогда
		СтрокаПоиска = Параметры.СтрокаПоиска;
	КонецЕсли;
	
	
	Элементы.Регион.СписокВыбора.Очистить();
	Список = Отчеты.Опендатабот.ВернутьЗначениеРегиона();
	Для Каждого ЭлементСписка Из Список Цикл
		Элементы.Регион.СписокВыбора.Добавить(ЭлементСписка.Значение,ЭлементСписка.Представление);
	КонецЦикла;
	Регион = 0;
	
	Элементы.Регион.Видимость = Ложь;
	ИспользоватьДобавлениеВСправочник = Ложь; 
	
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИмяДокумента = "ТаблицаРезультат";
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
		Элементы[ИмяДокумента], "ФормированиеОтчета");
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация,
		Новый ОписаниеОповещения("ПриЗавершенииЗадания", ЭтотОбъект),
		ПараметрыОжидания);
	ИначеЕсли ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПредупреждениеОбОшибке", 0.1, Истина);
	ИначеЕсли ОжиданиеОтвета Тогда
		ПодключитьОбработчикОжидания("Подключаемый_СформироватьОтчет", 3, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
		Элементы[ИмяДокумента], "ФормированиеОтчета");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания)
		ИЛИ ОжиданиеОтвета 
		ИЛИ ЭтотОбъект[ИмяДокумента].ВысотаТаблицы > 0 Тогда
		ТекущийЭлемент = Элементы[ИмяДокумента];
	Иначе
		ТекущийЭлемент = Элементы.СтрокаПоиска;
	КонецЕсли;
	

КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействиеПриЗакрытии()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Отчеты.Опендатабот.ВыполнитьДействиеПриЗакрытииНаСервере",ПараметрыОтчета,ПараметрыВыполнения);
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ВызватьИсключение ДлительнаяОперация.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьДействиеПриЗакрытии();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ТолькоЦифры = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СокрЛП(СтрокаПоиска));
	Элементы.Регион.Видимость = Не ТолькоЦифры;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	Если ОтключитьФормированиеОтчета <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СокрЛП(СтрокаПоиска)) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		НСтр("ru='Поле ""Код по ЕДРПОУ/ДРФО или ФИО"" не заполнено';uk='Поле ""Код за ЄДРПОУ/ДРФО або ПІБ"" не заповнено'"), , "СтрокаПоиска");
		Возврат;
	КонецЕсли;
	
	СформироватьОтчетНаКлиенте(СокрЛП(СтрокаПоиска));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеФормойНаСервере()
	
	ТекущийЭлемент = ?(ЗначениеЗаполнено(ОписаниеОшибки), 
	Элементы.СтрокаПоиска, 
	Элементы.ТаблицаРезультат);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетНаКлиенте(ТекстПоиска, ЭтоПроверкаРезультата = Ложь)
	
	Если НЕ ЗначениеЗаполнено(ТекстПоиска) Тогда
		Возврат;
	КонецЕсли;

	ИмяДокумента = "ТаблицаРезультат";
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
	Элементы[ИмяДокумента], "ФормированиеОтчета");
	
	Результат = СформироватьОтчетНаСервере(ЭтоПроверкаРезультата);
	
	Если Не Результат Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация,
		Новый ОписаниеОповещения("ПриЗавершенииЗадания", ЭтотОбъект),
		ПараметрыОжидания);
	Иначе
		
		ОбработатьОшибкиФормированияОтчета();
		
		Если ОжиданиеОтвета Тогда
			// Повторный вызов процедуры формирования при асинхронном получении данных от сервиса.
			ПодключитьОбработчикОжидания("Подключаемый_СформироватьОтчет", 3, Истина);
		Иначе
			Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
				Элементы[ИмяДокумента], "НеИспользовать");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОтключитьФормированиеОтчета = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ВключитьФормированиеОтчета", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетНаСервере(ЭтоПроверкаРезультата = Ложь)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено;
	ОписаниеОшибки       = "";
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ЭтоПроверкаРезультата Тогда
		// Очистка результата при формировании нового отчета.
		ОжиданиеОтвета = Ложь;
		СостояниеФормированияОтчета = Новый Структура;
		СостояниеФормированияОтчета.Вставить("СостояниеДосье"             , "");
		СостояниеФормированияОтчета.Вставить("СостояниеПроверки"          , "");
		СостояниеФормированияОтчета.Вставить("ОчищеноСодержимоеДокументов", Ложь);
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("СтрокаПоиска"         , СокрЛП(СтрокаПоиска));
	ПараметрыОтчета.Вставить("СостояниеДосье"       , СостояниеФормированияОтчета.СостояниеДосье);
	ПараметрыОтчета.Вставить("СостояниеПроверки"    , СостояниеФормированияОтчета.СостояниеПроверки);
	ПараметрыОтчета.Вставить("Регион"				, Регион);
	
	Если ЗначениеЗаполнено(Контрагент) И ЗначениеКодаКонтрагента(Контрагент) <> СокрЛП(СтрокаПоиска) Тогда
		Контрагент = Неопределено;
	КонецЕсли;
	ПараметрыОтчета.Вставить("Контрагент", Контрагент);
	ПараметрыОтчета.Вставить("ОбновлятьКэш", ОбновлятьКэш);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru='Формирование отчета: Опендатабот. Риcки: %1';uk='Формуванння звіту: Опендатабот. Ризики контрагента: %1'"),
	СокрЛП(СтрокаПоиска));
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне("Отчеты.Опендатабот.ФормированиеОтчета",
	ПараметрыОтчета,
	ПараметрыВыполнения);
	АдресХранилища = ДлительнаяОперация.АдресРезультата;
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
		Возврат Ложь;
	Иначе
		ИдентификаторЗадания = Неопределено;
		Если ДлительнаяОперация.Статус = "Выполнено" Тогда
			
			ЗагрузитьПодготовленныеДанные();
			
			Возврат Истина;
		ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
			ВызватьИсключение ДлительнаяОперация.КраткоеПредставлениеОшибки;
		Иначе
			ВызватьИсключение НСтр("ru='Задание отменено.';uk='Завдання відмінено.'");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПоказатьПредупреждениеОбОшибке()
	
	ОбработатьОшибкиФормированияОтчета();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВключитьФормированиеОтчета()
	
	ОтключитьФормированиеОтчета = Неопределено;
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_СформироватьОтчет()
	
	СформироватьОтчетНаКлиенте(СокрЛП(СтрокаПоиска), Истина);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриЗавершенииЗадания(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено;
	ЗагрузитьПодготовленныеДанные();
	
	Если ПустаяСтрока(ОписаниеОшибки) Тогда 
		ОписаниеОшибки = Результат.КраткоеПредставлениеОшибки;	
	КонецЕсли;	
	ОбработатьОшибкиФормированияОтчета();
	
	Если ОжиданиеОтвета Тогда
		// Повторный вызов процедуры формирования при асинхронном получении данных от сервиса.
		ПодключитьОбработчикОжидания("Подключаемый_СформироватьОтчет", 3, Истина);
	Иначе
		ИмяДокумента = "ТаблицаРезультат";
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(
		Элементы[ИмяДокумента], "НеИспользовать");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоНаименованиюЗавершение(Результат, ДопПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Результат) 
		ИЛИ ТипЗнч(Результат) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьОтчетНаКлиенте(Результат);
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	
	ДанныеОтчета = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	// Очистка временного хранилища.
	УдалитьИзВременногоХранилища(АдресХранилища);
	
	// Если результат не сформирован или нет данных во временном хранилище
	// выполнять обработку не требуется.
	Если ДанныеОтчета = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ДанныеОтчета.Свойство("СостояниеДосье") Тогда
		СостояниеФормированияОтчета.СостояниеДосье = ДанныеОтчета.СостояниеДосье;
	КонецЕсли;
	
	ОписаниеОшибки = ДанныеОтчета.ОписаниеОшибки;
	Контрагент     = ДанныеОтчета.Контрагент;
	ОжиданиеОтвета = ПустаяСтрока(ОписаниеОшибки)
	И (СостояниеФормированияОтчета.СостояниеДосье = "Ожидание"
	Или СостояниеФормированияОтчета.СостояниеПроверки = "Ожидание");
	
	// Очистка
	Если Не СостояниеФормированияОтчета.ОчищеноСодержимоеДокументов Тогда
		
		НайденныйКод = "";
		НаименованиеКонтрагента = "";
		ОбластиРасшифровки.Очистить();
		
		ТаблицаРезультат.Очистить();
		Элементы.ТаблицаРезультат.ИспользуемоеИмяФайла = Неопределено;
		ТаблицаРезультат.ТекущаяОбласть = ТаблицаРезультат.Область(1, 2, 1, 2);
		
		СостояниеФормированияОтчета.ОчищеноСодержимоеДокументов = Истина;
		
	КонецЕсли;
	
	ДанныеДосье    = Неопределено;
	
	Если СостояниеФормированияОтчета.СостояниеДосье = "СформированОтчет" Тогда
		ДанныеДосье = ДанныеОтчета.ДанныеДосье;
		СостояниеФормированияОтчета.СостояниеДосье = "Завершено";
	КонецЕсли;
	
	// Заполнение
	Если Не ОжиданиеОтвета И Не ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		
		Если ДанныеДосье.Свойство("РезультатДанные") Тогда
			ТаблицаРезультат.Вывести(ДанныеДосье.РезультатДанные);
			ИмяФайла = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(НСтр("ru='Опендатабот.Риски ';uk='Опендатабот.Ризики '")+
			ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
			ДанныеДосье.ИмяФайлаДанные, ""));
			Элементы.ТаблицаРезультат.ИспользуемоеИмяФайла = СокрЛП(ИмяФайла);
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОшибкиФормированияОтчета()
	
	Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	
	Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации"
		Или ОписаниеОшибки = "НеУказанПароль" Тогда
		
		ПоказатьПредупреждение(
		,
		НСтр("ru='Для формирования ""Опендатабот. Риcки""
              |необходимо приобрести ключ доступа.
              |Обратитесь к администратору.';uk= 'Для формування ""Опендатабот. Ризики""
              |необхідно придбати ключ доступа.
              |Зверніться до адміністратора.'"));
		
	Иначе
		ПоказатьПредупреждение(, ОписаниеОшибки);
	КонецЕсли;
	
	ОписаниеОшибки = "";
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеКодаКонтрагента(КонтрагентСсылка)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтрагентСсылка, "КодПоЕДРПОУ");
	
КонецФункции

#КонецОбласти
