#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Создает таблицу данных программы для использования в методе
// РаботаСКонтрагентамиПереопределяемый.ДополнитьИнформациюДаннымиПрограммы().
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица данных программы. Колонки:
//		* Ссылка - СправочникСсылка - ссылка на данные программы;
//		* Представление - Строка - представление данных программы;
//		* Описание - Строка - описание данных программы.
//
Функция НоваяТаблицаДанныеПрограммы() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Ссылка",        Справочники.ТипВсеСсылки());
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Описание",      Новый ОписаниеТипов("Строка"));
	Возврат Результат;
	
КонецФункции

// Создает описание данных программы для использования в методе
// РаботаСКонтрагентамиПереопределяемый.ДополнитьИнформациюДаннымиПрограммы().
//
// Возвращаемое значение:
//	Структура - описание данных программы. Поля:
//		* Ссылка - ЛюбаяСсылка - ссылка на программы;
//		* Представление - Строка - представление данных программы;
//		* Описание - Строка - описание данных программы;
//		* ПримечаниеПредставление - Строка - представление примечания;
//		* ПримечаниеОписание - Строка - описание примечания.
//
Функция НовыеДанныеПрограммы() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Ссылка");
	Результат.Вставить("Представление");
	Результат.Вставить("Описание");
	Результат.Вставить("ПримечаниеПредставление");
	Результат.Вставить("ПримечаниеОписание");
	Возврат Результат;

КонецФункции

#КонецОбласти


#Область ОчисткаОпендатаботКеш

Процедура ВыполнитьДействиеПриЗакрытииНаСервере(ПараметрыОтчета, АдресХранилища) Экспорт
	
	Если НЕ ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
		ОчиститьОпендатаботКеш();
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьДатуОтбораДляОчистикиКеша()
	
	КоличествоЧасов = 24;
	
	ДатаОтбора = ТекущаяДата()-(60*60*КоличествоЧасов);
	
	Возврат ДатаОтбора;
	
КонецФункции

Процедура ОчиститьОпендатаботКеш()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОпендатаботКэш.СтрокаПоиска КАК СтрокаПоиска,
		|	ОпендатаботКэш.Дата КАК Дата,
		|	ОпендатаботКэш.Ответ КАК Ответ
		|ИЗ
		|	РегистрСведений.ОпендатаботКэш КАК ОпендатаботКэш
		|ГДЕ                          
		|	ОпендатаботКэш.Дата > &ДатаОтбора";
	
	Запрос.УстановитьПараметр("ДатаОтбора", ОпределитьДатуОтбораДляОчистикиКеша());
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();	
	
	НаборЗаписей = РегистрыСведений.ОпендатаботКэш.СоздатьНаборЗаписей();
	НаборЗаписей.Загрузить(РезультатЗапроса);
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти


#Область ФормированиеОтчета

Процедура ФормированиеОтчета(ПараметрыОтчета, АдресХранилища) Экспорт
	
	ДанныеОтчета = Новый Структура;
	ДанныеОтчета.Вставить("Контрагент"    	, ПараметрыОтчета.Контрагент);
	ДанныеОтчета.Вставить("ОписаниеОшибки"	, "");
	ДанныеОтчета.Вставить("Регион"    		, ПараметрыОтчета.Регион);
	ДанныеОтчета.Вставить("ОбновлятьКэш"    , ПараметрыОтчета.ОбновлятьКэш);
	ДанныеОтчета.Вставить("ОтчетСформирован", Ложь);
	
	ДанныеДосье = Новый Структура;
	
	ЭтоЮридическоеЛицо = Ложь;
	ЭтоФОП = Ложь;
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПараметрыОтчета.СтрокаПоиска) Тогда
		ЭтоЮридическоеЛицо = (СтрДлина(ПараметрыОтчета.СтрокаПоиска) = 8);
		ЭтоФОП = (СтрДлина(ПараметрыОтчета.СтрокаПоиска) = 10);
		Если НЕ (ЭтоЮридическоеЛицо  ИЛИ ЭтоФОП) Тогда 
			ДанныеОтчета.ОписаниеОшибки = "Не коректна довжина коду контрагента.";
			ПоместитьВоВременноеХранилище(ДанныеОтчета, АдресХранилища);
			Возврат;
		КонецЕсли;
		ДанныеОтчета.Вставить("ЭтоЮридическоеЛицо", ЭтоЮридическоеЛицо);
		СформироватьРезультатОтчетаЮрлицаФОП(ПараметрыОтчета.СтрокаПоиска, ДанныеОтчета, ДанныеДосье);
	Иначе 
		СформироватьРезультатОтчетаФИО(ПараметрыОтчета.СтрокаПоиска, ДанныеОтчета, ДанныеДосье);
	КонецЕсли;
	
	ДанныеОтчета.Вставить("ДанныеДосье", ДанныеДосье);
	ДанныеОтчета.Вставить("СостояниеДосье", "СформированОтчет");
	
	ПоместитьВоВременноеХранилище(ДанныеОтчета, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти


#Область ОбщиеВспомогательныеПроцедуры

//Получение областей макета
//
Функция ВсеОбластиМакета(ИмяМакета)
	
	Макет     = ПолучитьМакет(ИмяМакета);
	Результат = Новый Структура;
	Для каждого Область Из Макет.Области Цикл
		Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Результат.Вставить(Область.Имя, Макет.ПолучитьОбласть(Область.Имя));
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции 

#КонецОбласти


#Область ПодготовкаДанныхДляОтчетаПоФИО

//Запись структуры в массивы
//Если в форме выбран регион, то данные по выбранному региону записываются в массив "МассивРегион"
//Данные из других регионов записываются в "МассивДругие"
//Если в форме отчета выбрано "Все регионы", то вся информация записывается в массив "МассивРегион"
//
Процедура ЗаписатьДанныеВСтруктуруСМассивамиДляОтчетаПОФИО(Структура,фОсновнойМассив,ДанныеДляМассива)
	
	ПреобразованнаяСтруктура = ОпендатаботЗаполнениеКонтрагентаСервер.ПреобразоватьДанныеСтруктурыДляОтчета(ДанныеДляМассива);
	Если фОсновнойМассив Тогда
		МассивДанных = "МассивРегион";
	иначе
		МассивДанных = "МассивДругие";
	КонецЕсли;
	Структура[МассивДанных].Добавить(ПреобразованнаяСтруктура);
	
КонецПроцедуры

//Записывает информацию в табличный документ для отображения
//
Процедура ВывестиИнформациюВТабличныйДокументДляОтчетаПОФИО(СтруктураФакторов,ТабличныйДокумент,СтруктураЗаписи,КлючМассива,Регион)
	
	Если КлючМассива = "МассивДругие" И Регион = 0 Тогда
		Возврат;
	КонецЕсли;
	Массив = СтруктураЗаписи[КлючМассива];
	Если Массив.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ОбластьМакета = СтруктураЗаписи.ОбластьМакета;
	ОбластиМакетаФИО     = ВсеОбластиМакета("UK_ФизическиеЛица");
	Группировка = ОбластиМакетаФИО.ГруппировкаПоТипуФакторов;
	ДопЗаголовок = "";
	Если (Не Регион = 0) И КлючМассива = "МассивРегион" Тогда
		Если СтруктураФакторов.ФакторыБезРегиона.Найти(СтруктураЗаписи.Тип) = Неопределено Тогда
			ДопЗаголовок = " (за обраним регіоном)";
		КонецЕсли;
	ИначеЕсли (Не Регион = 0) И КлючМассива = "МассивДругие" Тогда
		ДопЗаголовок = " (інші регіони)";
	ИначеЕсли (Не Регион = 0) И КлючМассива = "МассивДругие" Тогда
		
	КонецЕсли;
	Если Не ПустаяСтрока(СтруктураЗаписи.Заголовок) Тогда
		Группировка.Параметры.НазваниеГруппировкиПоТипуФакторов = СтруктураЗаписи.Заголовок + ДопЗаголовок;
		ТабличныйДокумент.Вывести(Группировка);
		ТабличныйДокумент.НачатьГруппуСтрок(, Истина);
	КонецЕсли;
	Для Каждого ЭлементМассива Из Массив Цикл
		ГруппировкаИндикатор = ОбластиМакетаФИО.ГруппировкаПоТипуФакторов;
		ПолеИндикатор = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"indicator");
		ГруппировкаПоИндикатору = Ложь;
		Если Не ПолеИндикатор = "" Тогда
			Если ПолеИндикатор = "positive" Тогда   
				ГруппировкаИндикатор = ОбластиМакетаФИО.ФакторСтандарт;
			ИначеЕсли ПолеИндикатор = "critical" ИЛИ ПолеИндикатор = "negative" Тогда
				ГруппировкаИндикатор = ОбластиМакетаФИО.ФакторКритический;
			ИначеЕсли Лев(ПолеИндикатор,7) = "warning" Тогда  // в данных JSON бывает лишний невидимый символ
				ГруппировкаИндикатор = ОбластиМакетаФИО.ФакторВнимание;
			КонецЕсли;
			
			Если ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"specificText") = "" Тогда
				Если ЭлементМассива.type = "session" Тогда
					ТекстФактора = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"icon") + "Дата засідання: " + Лев(ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"date"),10) + ". Номер справи: " + ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"number");
				ИначеЕсли ЭлементМассива.type = "aliment" Тогда
					ТекстФактора = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"icon") +  ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"text") +". Дата народження: " +Лев(ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"birthDate"),10);
				ИначеЕсли  ЭлементМассива.type = "corrupt" Тогда
					ТекстФактора = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"icon") +  ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"text") +". Номер судового рішення " + ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"decisionNumber");
				ИначеЕсли ЭлементМассива.type = "wanted" Тогда
					ТекстФактора = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"icon") +  ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"statusText");
				ИначеЕсли ЭлементМассива.type = "fop" Тогда
					ТекстФактора = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"text") + " - Адреса: " + ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"location");
				ИначеЕсли ЭлементМассива.type = "oldCeo"
					ИЛИ ЭлементМассива.type = "ceo"
					ИЛИ ЭлементМассива.type = "beneficiaries"
					ИЛИ ЭлементМассива.type = "oldBeneficiaries"
					ИЛИ ЭлементМассива.type = "founders" Тогда	
					ТекстФактора = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"text") + " - " + ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"fullName");
				ИначеЕсли ЭлементМассива.type = "declarant" Тогда	
					ТекстФактора = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"text") + " - Посада: " + ТРег(ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"lastWorkPost"));
				ИначеЕсли ЭлементМассива.type = "lawyer" Тогда	
					ТекстФактора = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"text") + " - № Свідоцтва " + ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"certnum");
				ИначеЕсли ЭлементМассива.type = "performer" Тогда	
					ТекстФактора = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"text") + " - Адреса виконавчої служби: " + ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"address");
				ИначеЕсли ЭлементМассива.type = "rnboSanction" Тогда	
					ТекстФактора = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"icon") + "Санкція РНБОУ на " + НРег(ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"period"));
				Иначе
					ТекстФактора = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"icon") + ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементМассива,"text");
				КонецЕсли;
				
				Если Не ТекстФактора = "" Тогда
					ГруппировкаИндикатор.Параметры.ТекстИндикатораФактора = ТекстФактора;
				КонецЕсли;
			Иначе
				ГруппировкаИндикатор.Параметры.ТекстИндикатораФактора = ЭлементМассива.specificText;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ГруппировкаИндикатор);
			Если Не ОбластьМакета = Ложь Тогда
				ТабличныйДокумент.НачатьГруппуСтрок(, Ложь);
				ГруппировкаПоИндикатору = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ОбластьМакета = Ложь Тогда
			ОбластьМакета.Параметры.Заполнить(ЭлементМассива);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			Если ГруппировкаПоИндикатору = Истина Тогда
				ТабличныйДокумент.ЗакончитьГруппуСтрок();	
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(СтруктураЗаписи.Заголовок) Тогда
		ТабличныйДокумент.ЗакончитьГруппуСтрок();
	КонецЕсли;
	
КонецПроцедуры

//Инициализация структуры данных для отчета
//
Функция СоздатьСтруктуруДляЗаполненияДляОтчетаПОФИО(СтруктураДанныхПоФИО,СтруктураФакторов,ОбластьМакета,ТипФактора)
	Перем СтруктураНайденныйФактор;
	СтруктураИзестныхФакторов = СтруктураФакторов.ИзвестныеФакторы;
	Если Не СтруктураДанныхПоФИО.Свойство(ТипФактора) Тогда
		
		Если Не СтруктураИзестныхФакторов.Свойство(ТипФактора,СтруктураНайденныйФактор) Тогда
			Заголовок = "";
			СтруктураДанныхПоФИО.Вставить(ТипФактора,Новый Структура("Тип,ОбластьМакета,Заголовок,МассивРегион,МассивДругие",ТипФактора,Ложь,Заголовок,Новый Массив,Новый Массив));
			//Добавим в структуру факторов неизвестный фактор
			Структура = СтруктураФакторов.ГруппыФакторовПоТипу[СтруктураФакторов.ГруппыФакторовПоТипу.Количество() - 1];
			Если Структура.Факторы.Найти(ТипФактора) = Неопределено Тогда
				Структура.Факторы.Добавить(ТипФактора);
			КОнецЕсли;
		Иначе
			//Известные факторы
			Заголовок = СтруктураНайденныйФактор.Заголовок;
			СтруктураДанныхПоФИО.Вставить(ТипФактора,Новый Структура("Тип,ОбластьМакета,Заголовок,МассивРегион,МассивДругие",ТипФактора,ОбластьМакета[СтруктураНайденныйФактор.ОбластьМакета],Заголовок,Новый Массив,Новый Массив));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураДанныхПоФИО;
	
КонецФункции

//Функция создания структуры факторов
//Возвращается структура с данными о известных факторах, необходимыми группировками факторов по типам
//также указываются факторы, которые не имеют поле Регион
Функция ПолучитьСтруктуруФакторовДляОтчетаПОФИО()
	
	СтруктураФакторов = Новый Структура;
	//Перечень факторов на текущий момент
	//Если попадается новый фактор, то он будет выводиться отдельно как "Інші"
	ИзвестныеФакторы = Новый Структура;
	ИзвестныеФакторы.Вставить("founders",Новый Структура("ОбластьМакета,Заголовок","ФизЛицаСЕО","Засновники юридичної особи"));
	ИзвестныеФакторы.Вставить("ceo",Новый Структура("ОбластьМакета,Заголовок","ФизЛицаСЕО","Керівники юридичної особи"));
	ИзвестныеФакторы.Вставить("oldCeo",Новый Структура("ОбластьМакета,Заголовок","ФизЛицаСЕО","Минулі керівники юридичної особи"));
	ИзвестныеФакторы.Вставить("beneficiaries",Новый Структура("ОбластьМакета,Заголовок","ФизЛицаСЕО","Кінцеві бенефіціарні власники компаній"));
	ИзвестныеФакторы.Вставить("oldBeneficiaries",Новый Структура("ОбластьМакета,Заголовок","ФизЛицаСЕО","Минулі засновники та/або бенефеціари юридичної особи"));
	ИзвестныеФакторы.Вставить("fop",Новый Структура("ОбластьМакета,Заголовок","ФизЛицаФОП","Фізичні особи - підприємці"));
	ИзвестныеФакторы.Вставить("aliment",Новый Структура("ОбластьМакета,Заголовок","ФизЛицаАлименты",""));
	ИзвестныеФакторы.Вставить("declarant",Новый Структура("ОбластьМакета,Заголовок","ФизЛицаДекларанты",""));
	ИзвестныеФакторы.Вставить("session",Новый Структура("ОбластьМакета,Заголовок","ФизЛицаСуды","Судові засідання, в яких фізична особа приймає участь"));
	ИзвестныеФакторы.Вставить("lawyer",Новый Структура("ОбластьМакета,Заголовок","ФизЛицаАдвокаты","Фізичні особи з наявністю свідоцтва адвоката"));
	ИзвестныеФакторы.Вставить("performer",Новый Структура("ОбластьМакета,Заголовок","ФизЛицаИсполнители","Фізичні особи, які є приватиними виконавцями"));
	ИзвестныеФакторы.Вставить("corrupt",Новый Структура("ОбластьМакета,Заголовок","ФизЛицаКоррупционеры","Фізичні особи, які є в базі корупціонерів"));
	ИзвестныеФакторы.Вставить("wanted",Новый Структура("ОбластьМакета,Заголовок","ФизЛицаВРозыске","Фізичні особи, які є в базі розшуку"));
	ИзвестныеФакторы.Вставить("rnboSanction",Новый Структура("ОбластьМакета,Заголовок","ФизЛицаСанкцииРНБО","Фізичні особи, на яких накладено санції РНБО"));
	
	СтруктураФакторов.Вставить("ИзвестныеФакторы",ИзвестныеФакторы);
	
	//Используется для группировки в макете
	ГруппыФакторовПоТипу = Новый Массив;
	Группировка = Новый Структура;
	Массив = Новый Массив;
	Массив.Добавить("founders");
	Массив.Добавить("ceo");
	Массив.Добавить("oldCeo");
	Массив.Добавить("beneficiaries");
	Массив.Добавить("oldBeneficiaries");
	Массив.Добавить("fop");
	Группировка.Вставить("Заголовок","Засновники, керівники, власники компаній та ФОП");
	Группировка.Вставить("Факторы",Массив);
	ГруппыФакторовПоТипу.Добавить(Группировка);
	
	Группировка = Новый Структура;
	Массив = Новый Массив;
	Массив.Добавить("wanted");
	Массив.Добавить("corrupt");
	Массив.Добавить("rnboSanction");
	Группировка.Вставить("Заголовок","Особи, на яких накладено санції, що знаходяться у розшуку та корупціонери");
	Группировка.Вставить("Факторы",Массив);
	ГруппыФакторовПоТипу.Добавить(Группировка);
	
	Группировка = Новый Структура;
	Массив = Новый Массив;
	Массив.Добавить("session");
	Группировка.Вставить("Заголовок","Судові провадження");
	Группировка.Вставить("Факторы",Массив);
	ГруппыФакторовПоТипу.Добавить(Группировка);
	
	Группировка = Новый Структура;
	Массив = Новый Массив;
	Массив.Добавить("lawyer");
	Массив.Добавить("performer");
	Группировка.Вставить("Заголовок","Особи з наявністю ліцензіі адвоката, нотаріуса або приватного виконавця");
	Группировка.Вставить("Факторы",Массив);
	ГруппыФакторовПоТипу.Добавить(Группировка);
	
	Группировка = Новый Структура;
	Массив = Новый Массив;
	Массив.Добавить("declarant");
	Группировка.Вставить("Заголовок","Фізичні особи, які є декларантами");
	Группировка.Вставить("Факторы",Массив);
	ГруппыФакторовПоТипу.Добавить(Группировка);
	
	Группировка = Новый Структура;
	Массив = Новый Массив;
	Массив.Добавить("aliment");
	Группировка.Вставить("Заголовок","Фізичні особи, які є в базі неплатників аліментів");
	Группировка.Вставить("Факторы",Массив);
	ГруппыФакторовПоТипу.Добавить(Группировка);
	
	//Для неизвестных факторов
	Группировка = Новый Структура;
	Группировка.Вставить("Заголовок","Інші");
	Группировка.Вставить("Факторы",Новый Массив);
	ГруппыФакторовПоТипу.Добавить(Группировка);

	ФакторыБезРегиона = Новый Массив;
	ФакторыБезРегиона.Добавить("performer");
	ФакторыБезРегиона.Добавить("corrupt");
	ФакторыБезРегиона.Добавить("wanted");
	ФакторыБезРегиона.Добавить("aliment");
	ФакторыБезРегиона.Добавить("declarant");
	ФакторыБезРегиона.Добавить("rnboSanction");
	
	СтруктураФакторов.Вставить("ИзвестныеФакторы",ИзвестныеФакторы);
	СтруктураФакторов.Вставить("ГруппыФакторовПоТипу",ГруппыФакторовПоТипу);
	СтруктураФакторов.Вставить("ФакторыБезРегиона",ФакторыБезРегиона);
	
	Возврат СтруктураФакторов;
	
КонецФункции

//Проверям количество записей в массивах структуры данных
Функция ПроверитьМассивыДанныхДляОтчетаПОФИО(СтруктураДанныхПоФИО,СписокМассивов)
	
	КоличествоЗаписей = 0;
	Для каждого ИмяМассива из СписокМассивов Цикл
		Если СтруктураДанныхПоФИО.Свойство(ИмяМассива) Тогда
			КоличествоЗаписей = КоличествоЗаписей + СтруктураДанныхПоФИО[ИмяМассива].МассивРегион.Количество() + СтруктураДанныхПоФИО[ИмяМассива].МассивДругие.Количество(); 		
		КонецЕсли;
	КонецЦикла;
	Возврат КоличествоЗаписей;
	
КонецФункции

#КонецОбласти


#Область ПодготовкаДанныхДляОтчетаПоКоду

//Формирование отчета по Ф.И.О
//
Процедура СформироватьРезультатОтчетаФИО(СтрокаПоиска, ДанныеОтчета, ДанныеДосье)
	
	//Создание табличного документа для формирования отчета
	ТабличныйДокументФИО  = Новый ТабличныйДокумент;
	//Получаем макет для отчета
	ОбластиМакетаФИО     = ВсеОбластиМакета("UK_ФизическиеЛица");
	
	НаименованиеКраткое = "";
	СтрокаПоиска=СокрЛП(СтрокаПоиска);
	
	Если НЕ ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Сообщить(НСтр("ru='Не заполнено ФИО поиска';uk= 'Не заповнено ПІБ пошуку'"));
		Возврат;
	КонецЕсли;
	//Получаем данные с сервера
	РезультатЧтения = ОпендатаботСервер.ПолучитьРезультатПоСтрокеПоиска(СтрокаПоиска, ДанныеОтчета.ОбновлятьКэш, ?(ДанныеОтчета.Регион = 0,Неопределено,ДанныеОтчета.Регион));
	//Выводим шапку отчета
	ТабличныйДокументФИО.Вывести(ОбластиМакетаФИО.Шапка);
	
	ФакторыМассив = "";
	
	//Получение структуры факторов
	//Структура нужна для группирования факторов в отчете
	//В этой структуре указаны известные факторы, группировки по факторам
	//И факторы без поля регион (это нужно для группировок по регионам
	СтруктураФакторов = ПолучитьСтруктуруФакторовДляОтчетаПОФИО();
	
	Если НЕ РезультатЧтения.Ошибка Тогда
		РезультатЧтениеJSON = РезультатЧтения.РезультатЧтениеJSON;
		
		Если РезультатЧтениеJSON.status = "ok" Тогда
			СтруктураДанные = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(РезультатЧтениеJSON, "data");
			Если ТипЗнч(СтруктураДанные) = Тип("Структура") Тогда
				ФакторыМассив = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(СтруктураДанные, "factors");
				Если НЕ ТипЗнч(ФакторыМассив) = Тип("Массив") Тогда
					ФакторыМассив = Новый Массив;
				КонецЕсли;
			Иначе
				РезультатЧтения.Ошибка = Истина;
			КонецЕсли
		Иначе
			РезультатЧтения.Ошибка = Истина;
		КонецЕсли;
		Если РезультатЧтения.Ошибка Тогда
			РезультатЧтения.ТекстОшибки = "Помилка розбору відповіді сервісу.";
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатЧтения.Ошибка Тогда
		ОбластиМакетаФИО.ИнформацияОбОшибке.Параметры.Заполнить(РезультатЧтения);
		ТабличныйДокументФИО.Вывести(ОбластиМакетаФИО.ИнформацияОбОшибке);
	Иначе
		//Никаких ошибок при получении информации. Формируем отчет
		НаименованиеКраткое = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(СтруктураДанные,"pib");
		ОбластиМакетаФИО.ШапкаИнформация.Параметры.ДатаАктуальности = РезультатЧтения.Дата;
		ОбластиМакетаФИО.ШапкаИнформация.Параметры.НаименованиеКонтрагента = НаименованиеКраткое;
		
		ТабличныйДокументФИО.Вывести(ОбластиМакетаФИО.ШапкаИнформация);
		
		//Создание структуры данных. В этой структуре содержится информация по факторам в виде массивов
		СтруктураДанныхПоФИО = Новый Структура;
		
		Для Каждого СтруктураФакторы Из ФакторыМассив Цикл
			ТипСтруктуры = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(СтруктураФакторы,"type");
			Регион = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(СтруктураФакторы,"regionId");
			
			Если ПустаяСтрока(ТипСтруктуры) Тогда
				Сообщить(НСтр("ru='Ошибка при чтении информации!';uk='Помилка при зчитуванні інформації!'"));
				Прервать;
			КонецЕсли;
			
			//Проверка, есть ли у фактора поле регион
			Если СтруктураФакторов.ФакторыБезРегиона.Найти(ТипСтруктуры) <> Неопределено Тогда
				ФакторБезРегиона = Истина;
			Иначе	
				ФакторБезРегиона = ?(ДанныеОтчета.Регион =0,Истина,(Строка(Регион) = Строка(ДанныеОтчета.Регион)));
			КонецЕсли;

			Если СтруктураФакторов.ИзвестныеФакторы.Свойство(ТипСтруктуры) Тогда
				// Записывем данные по судебным заседаниям
				// У данных по судебным заседаниям другая структура
				Если ТипСтруктуры = "session" Тогда
					МассивСудов = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(СтруктураФакторы, "items");
					Для Каждого СтруктураСуд Из МассивСудов Цикл
						РегионСуд = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(СтруктураСуд,"regionId");
						СтруктураСуд.Вставить("indicator",СтруктураФакторы.indicator);
						СтруктураСуд.Вставить("icon",СтруктураФакторы.icon);
						СтруктураСуд.Вставить("type","session");
						//Если в данных нет фактора по сдуебным заседаниям, то создадим и запишем туда данные
						СтруктураДанныхПоФИО = СоздатьСтруктуруДляЗаполненияДляОтчетаПОФИО(СтруктураДанныхПоФИО,СтруктураФакторов,ОбластиМакетаФИО,ТипСтруктуры);
						ЗаписатьДанныеВСтруктуруСМассивамиДляОтчетаПОФИО(СтруктураДанныхПоФИО[ТипСтруктуры],?(ДанныеОтчета.Регион = 0, Истина,Строка(РегионСуд) = Строка(ДанныеОтчета.Регион)),СтруктураСуд);
					Конеццикла;
				Иначе
					//Получаем и записываем информацию о других известных нам факторах
					СтруктураДанныхПоФИО = СоздатьСтруктуруДляЗаполненияДляОтчетаПОФИО(СтруктураДанныхПоФИО,СтруктураФакторов,ОбластиМакетаФИО,ТипСтруктуры);
					ЗаписатьДанныеВСтруктуруСМассивамиДляОтчетаПОФИО(СтруктураДанныхПоФИО[ТипСтруктуры],ФакторБезРегиона,СтруктураФакторы);
				КонецЕсли;
			Иначе
				//Какая-то новая структура и нужно из нее получить данные
				СтруктураДанныхПоФИО = СоздатьСтруктуруДляЗаполненияДляОтчетаПОФИО(СтруктураДанныхПоФИО,СтруктураФакторов,ОбластиМакетаФИО,ТипСтруктуры);
				ЗаписатьДанныеВСтруктуруСМассивамиДляОтчетаПОФИО(СтруктураДанныхПоФИО[ТипСтруктуры],ФакторБезРегиона,СтруктураФакторы);
			КонецЕсли;
		Конеццикла;
		
		Группировка = ОбластиМакетаФИО.ГруппировкаПоФактору;
		//Получаем группировки по факторам
		СписокГруппировокПоФакторам = СтруктураФакторов.ГруппыФакторовПоТипу;
		Для каждого ГруппировкаПоФакторам Из СписокГруппировокПоФакторам Цикл
			//Проверка массивов данных. Если данных нет, то в отчет не выводим
			Если Не ПроверитьМассивыДанныхДляОтчетаПОФИО(СтруктураДанныхПоФИО,ГруппировкаПоФакторам.Факторы) = 0 Тогда
				Группировка.Параметры.НазваниеГруппировкиФактору = ГруппировкаПоФакторам.Заголовок;
				ТабличныйДокументФИО.Вывести(Группировка);
				ТабличныйДокументФИО.НачатьГруппуСтрок(, Истина);
				Для Каждого Фактор из ГруппировкаПоФакторам.Факторы Цикл
					Если СтруктураДанныхПоФИО.Свойство(Фактор) Тогда
						//Выводим в отчет даные
						ВывестиИнформациюВТабличныйДокументДляОтчетаПОФИО(СтруктураФакторов,ТабличныйДокументФИО,СтруктураДанныхПоФИО[Фактор],"МассивРегион",ДанныеОтчета.Регион);
						ВывестиИнформациюВТабличныйДокументДляОтчетаПОФИО(СтруктураФакторов,ТабличныйДокументФИО,СтруктураДанныхПоФИО[Фактор],"МассивДругие",ДанныеОтчета.Регион);
					КонецЕсли;
				КонецЦикла;
				ТабличныйДокументФИО.ЗакончитьГруппуСтрок();
			КонецЕсли;
		КонецЦикла;
		
		ДанныеОтчета.ОтчетСформирован = Истина;
		
	КонецЕсли;
	
	ДанныеДосье.Вставить("РезультатДанные", ТабличныйДокументФИО);
	ДанныеДосье.Вставить("ИмяФайлаДанные",СтрокаПоиска);
	
КонецПроцедуры

Функция ПолучитьСтруктуруГруппировкиРискФакторовДляОтчетаЮрлицаФОП(ОбластиМакета)
	
	СтруктураФакторов = Новый Структура;
	
	ИспользуемыеГруппыФакторов = Новый Структура;
	
	Группировка = Новый Структура;
	Факторы = Новый Структура;
	Факторы.Вставить("vat",Новый Структура("ОбластьМакета,Данные",ОбластиМакета["РискФакторИнформацияНДС"],Ложь));
	Факторы.Вставить("audit",Новый Структура("ОбластьМакета,Данные",ОбластиМакета["ЭлементФактора"],Ложь));
	Факторы.Вставить("singletax",Новый Структура("ОбластьМакета,Данные",ОбластиМакета["РискФакторИнформацияНДС"],Ложь));
	Факторы.Вставить("debt",Новый Структура("ОбластьМакета,Данные",ОбластиМакета["РискФакторИнформацияНалоговыйДолг"],Ложь));
	
	Группировка.Вставить("Заголовок","Податкова");
	Группировка.Вставить("Использование",Ложь);
	Группировка.Вставить("Факторы",Факторы);
	ИспользуемыеГруппыФакторов.Вставить("tax",Группировка);
	
	Группировка = Новый Структура;
	Факторы = Новый Структура;
	Факторы.Вставить("wagedebt",Новый Структура("ОбластьМакета,Данные",ОбластиМакета["ЭлементФактора"],Ложь));
	Факторы.Вставить("courtDecision",Новый Структура("ОбластьМакета,Данные",ОбластиМакета["ЭлементФактора"],Ложь));
	Факторы.Вставить("courtCompany",Новый Структура("ОбластьМакета,Данные",ОбластиМакета["ЭлементФактора"],Ложь));
	Факторы.Вставить("penalty",Новый Структура("ОбластьМакета,Данные",ОбластиМакета["ИсполнительноеПроизводство"],Ложь));
	
	Группировка.Вставить("Заголовок","Суди");
	Группировка.Вставить("Использование",Ложь);
	Группировка.Вставить("Факторы",Факторы);
	ИспользуемыеГруппыФакторов.Вставить("court",Группировка);
	
	Группировка = Новый Структура;
	Факторы = Новый Структура;
	Факторы.Вставить("bankruptcy",Новый Структура("ОбластьМакета,Данные",ОбластиМакета["ПроцедураБанкротства"],Ложь));
	Факторы.Вставить("massAddress",Новый Структура("ОбластьМакета,Данные",ОбластиМакета["РискФакторИнформацияМассоваяРегистрация"],Ложь));
	Факторы.Вставить("history",Новый Структура("ОбластьМакета,Данные",ОбластиМакета["ЗаписьИсторииРеестра"],Ложь));
	
	Группировка.Вставить("Заголовок","Дані ЄДР");
	Группировка.Вставить("Использование",Ложь);
	Группировка.Вставить("Факторы",Факторы);
	ИспользуемыеГруппыФакторов.Вставить("edr",Группировка);
	
	
	Группировка = Новый Структура;
	Факторы = Новый Структура;
	Факторы.Вставить("amcu",Новый Структура("ОбластьМакета,Данные",ОбластиМакета["СанкцияАМКУ"],Ложь));
	Факторы.Вставить("sanction",Новый Структура("ОбластьМакета,Данные",ОбластиМакета["СанкцииРНБО"],Ложь));
	Группировка.Вставить("Заголовок","Санкції");
	Группировка.Вставить("Использование",Ложь);
	Группировка.Вставить("Факторы",Факторы);
	ИспользуемыеГруппыФакторов.Вставить("sanction",Группировка);
	
	Группировка = Новый Структура;
	Группировка.Вставить("Заголовок","Інше");
	Группировка.Вставить("Использование",Ложь);
	Группировка.Вставить("Факторы",Новый Структура);
	Факторы.Вставить("declarantOwner",Новый Структура("ОбластьМакета,Данные",ОбластиМакета["РискФакторВладелецДекларант"],Ложь));
	ИспользуемыеГруппыФакторов.Вставить("other",Группировка);
	
	Возврат ИспользуемыеГруппыФакторов;
	
КонецФункции

Функция ПолучитьСтруктуруГруппировкиДанныхДляОтчетаЮрлицаФОП(ОбластиМакета,ЭтоЮридическоеЛицо)
	
	РегистрацияСтруктура = Новый Структура;
	РегистрацияСтруктура.Вставить("registrations",Новый Структура("ОбластьМакета,Заголовок",ОбластиМакета["РегистрационнаяИнформация"],"Реєстраційна інформація"));
	РегистрацияСтруктура.Вставить("heads",Новый Структура("ОбластьМакета,Заголовок",ОбластиМакета["Руководители"],"Керівники"));
	РегистрацияСтруктура.Вставить("activities",Новый Структура("ОбластьМакета,Заголовок",ОбластиМакета["ВидДеятельности"],"Види діяльності"));
	РегистрацияСтруктура.Вставить("beneficiaries",Новый Структура("ОбластьМакета,Заголовок",ОбластиМакета["Бенефициары"],"Бенефіціари компанії"));
	РегистрацияСтруктура.Вставить("branches",Новый Структура("ОбластьМакета,Заголовок",ОбластиМакета["Филиалы"],"Філії"));
	РегистрацияСтруктура.Вставить("registration",Новый Структура("ОбластьМакета,Заголовок",ОбластиМакета["РегистрацияЕГР"],"Реєстрація у ЄДР"));
	РегистрацияСтруктура.Вставить("executivePower",Новый Структура("ОбластьМакета,Заголовок",ОбластиМакета["ОрганИсполнительнойВласти"],"Орган виконавчої влади, до сфери управління якого належить державне підприємство"));
	
	ДанныеДПАСтруктура = Новый Структура;
	ДанныеДПАСтруктура.Вставить("taxDepartments",Новый Структура("ОбластьМакета,Заголовок",ОбластиМакета["ФОПНалоговаяИнспекция"],"Реквізити податкової інспекції"));
	ДанныеДПАСтруктура.Вставить("taxRequisites",Новый Структура("ОбластьМакета,Заголовок",ОбластиМакета["ФОПУплатаНалогов"],"Реквізити сплати податків"));

	СтруктураГруппировкиИнформации = Новый Структура;
	СтруктураГруппировкиИнформации.Вставить("ОбластьМакетаЗаголовок",ОбластиМакета[?(ЭтоЮридическоеЛицо,"ЮрлицаДанныеРегистрацииЗаголовок","ФОПДанныеРегистрацииЗаголовок")]);
	СтруктураГруппировкиИнформации.Вставить("ОбластьМакетаДанныеРегистрации",ОбластиМакета[?(ЭтоЮридическоеЛицо,"ЮрлицаДанныеРегистрации","ФОПДанныеРегистрации")]);
	СтруктураГруппировкиИнформации.Вставить("ОбластьМакетаГруппировка",ОбластиМакета["ГруппировкаСтрок"]);
	СтруктураГруппировкиИнформации.Вставить("КоличествоЭлементовДляГруппировки",1);
	СтруктураГруппировкиИнформации.Вставить("РегистрацияСтруктура",РегистрацияСтруктура);
	СтруктураГруппировкиИнформации.Вставить("ДанныеДПАСтруктура",ДанныеДПАСтруктура);
	
	Возврат СтруктураГруппировкиИнформации;
	
КонецФункции

//Процедуры формирования отчета по регистрационным данным

Процедура ВывестиИнформациюИзСтруктурыДанных(СтруктураДанных,СтруктураГруппировок,ЭлементГруппировки,ТабличныйДокумент)
	
	Свойство = ЭлементГруппировки.Ключ;
	ОбластьШапка = СтруктураГруппировок.ОбластьМакетаГруппировка;
	ОбластьЭлемент = ЭлементГруппировки.Значение.ОбластьМакета;
	Заголовок = ЭлементГруппировки.Значение.Заголовок;
	КоличествоЭлементовДляГруппировки = СтруктураГруппировок.КоличествоЭлементовДляГруппировки; 
	НужнаГруппировкаСтрок = Ложь;
	
	ОпендатаботЗаполнениеКонтрагентаСервер.ПреобразоватьДанныеСтруктурыДляОтчета(СтруктураДанных);
	ОбластьЭлемент.Параметры.Заполнить(СтруктураДанных);

	ВыводитьУплатуНалогов = Ложь;
	Если Свойство = "taxRequisites" Или Свойство = "taxDepartments" Тогда
		Если ВыводитьУплатуНалогов = Ложь Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	//Заголовок для списка видов деятельности
	Если (Свойство = "activities") Тогда
		ОбластьЭлемент.Области.ВидДеятельности.Шрифт = Новый Шрифт(,,СтруктураДанных.isPrimary);
		ОбластьЭлемент.Параметры.name = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(СтруктураДанных, "code") + " " + ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(СтруктураДанных, "name");
	КонецЕсли;
	
	//Заголовок для списка филиалов
	Если (Свойство = "branches") Тогда
		СтруктураАдреса = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(СтруктураДанных,"address");
		Если ТипЗнч(СтруктураАдреса) = Тип("Структура") Тогда
			ОбластьЭлемент.Параметры.location = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(СтруктураАдреса,"address");
		КонецЕсли;
	КонецЕсли;
	
	Если (Свойство = "registration") Или (Свойство = "executivePower") Или  (Свойство = "taxDepartments") Тогда 
		Если СтруктураДанных.Количество()>0 Тогда
			НужнаГруппировкаСтрок = (1 >= КоличествоЭлементовДляГруппировки);
			ОбластьШапка.Параметры.Заголовок = Заголовок;
			ТабличныйДокумент.Вывести(ОбластьШапка);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НужнаГруппировкаСтрок Тогда
		ТабличныйДокумент.НачатьГруппуСтрок(, Ложь);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьЭлемент);
	
	Если НужнаГруппировкаСтрок Тогда
		ТабличныйДокумент.ЗакончитьГруппуСтрок();
	КонецЕсли;
	
КонецПроцедуры	

Процедура ОбработатьСтруктуруДанных(СтруктураДанных,СтруктураГруппировок,ЭлементГруппировки,ТабличныйДокумент)
	
	Свойство = ЭлементГруппировки.Ключ;

	Если ТипЗнч(СтруктураДанных) = Тип("Структура") Тогда
		Структура = СтруктураДанных[Свойство];
	Иначе
		Структура = СтруктураДанных;
	КонецЕсли;
	
	ВывестиИнформациюИзСтруктурыДанных(Структура,СтруктураГруппировок,ЭлементГруппировки,ТабличныйДокумент);
	
КонецПроцедуры

Процедура ОбработатьМассивДанных(СтруктураДанных,СтруктураГруппировок,ЭлементГруппировки,ТабличныйДокумент)
	
	Свойство = ЭлементГруппировки.Ключ;
	МассивДанных = СтруктураДанных[ЭлементГруппировки.Ключ];
	ОбластьШапка = СтруктураГруппировок.ОбластьМакетаГруппировка;
	ОбластьЭлемент = ЭлементГруппировки.Значение.ОбластьМакета;
	Заголовок = ЭлементГруппировки.Значение.Заголовок;
	КоличествоЭлементовДляГруппировки = СтруктураГруппировок.КоличествоЭлементовДляГруппировки; 
	
	ВыводитьУплатуНалогов = Ложь;
	Если Свойство = "taxRequisites" Или Свойство = "taxDepartments" Тогда
		Если ВыводитьУплатуНалогов = Ложь Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбластьШапка.Параметры.Заголовок = Заголовок;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	НужнаГруппировкаСтрок = МассивДанных.Количество() >= КоличествоЭлементовДляГруппировки;
	Если НужнаГруппировкаСтрок Тогда
		ТабличныйДокумент.НачатьГруппуСтрок(, Ложь);
	КонецЕсли;
	
	//Получаем основной вид деятельности
	Если Свойство = "activities" Тогда
		Для каждого ЭлементИнформации Из МассивДанных Цикл
			Если ЭлементИнформации.isPrimary = Истина Тогда
				Если ТипЗнч(ЭлементИнформации) = Тип("Структура") Тогда
					ВывестиИнформациюИзСтруктурыДанных(ЭлементИнформации,СтруктураГруппировок,ЭлементГруппировки,ТабличныйДокумент);
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Для каждого ЭлементИнформации Из МассивДанных Цикл
		
		Если (Свойство = "activities") И (ЭлементИнформации.isPrimary = Истина) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементИнформации) = Тип("Структура") Тогда
			ВывестиИнформациюИзСтруктурыДанных(ЭлементИнформации,СтруктураГруппировок,ЭлементГруппировки,ТабличныйДокумент);
		КонецЕсли;
		
	КонецЦикла;
	Если НужнаГруппировкаСтрок Тогда
		ТабличныйДокумент.ЗакончитьГруппуСтрок();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиРегистрационныеДанные(РегистрацияСтруктура,ДанныеДПАСтруктура,СтруктураГруппировкиИнформации,ТабличныйДокумент)
	
	Для Каждого ЭлементСтруктуры Из СтруктураГруппировкиИнформации.РегистрацияСтруктура Цикл
		Если Не ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(РегистрацияСтруктура,ЭлементСтруктуры.Ключ) = "" Тогда
			Если ТипЗнч(РегистрацияСтруктура[ЭлементСтруктуры.Ключ]) = Тип("Массив") И РегистрацияСтруктура[ЭлементСтруктуры.Ключ].Количество()>0 Тогда
				ОбработатьМассивДанных(РегистрацияСтруктура,СтруктураГруппировкиИнформации,ЭлементСтруктуры,ТабличныйДокумент);	
			ИначеЕсли ТипЗнч(РегистрацияСтруктура[ЭлементСтруктуры.Ключ]) = Тип("Структура") И РегистрацияСтруктура[ЭлементСтруктуры.Ключ].Количество()>0 Тогда
				ОбработатьСтруктуруДанных(РегистрацияСтруктура,СтруктураГруппировкиИнформации,ЭлементСтруктуры,ТабличныйДокумент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементСтруктуры Из СтруктураГруппировкиИнформации.ДанныеДПАСтруктура Цикл
		Если Не ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ДанныеДПАСтруктура,ЭлементСтруктуры.Ключ) = "" Тогда
			Если ТипЗнч(ДанныеДПАСтруктура[ЭлементСтруктуры.Ключ]) = Тип("Массив") И ДанныеДПАСтруктура[ЭлементСтруктуры.Ключ].Количество()>0 Тогда
				ОбработатьМассивДанных(ДанныеДПАСтруктура,СтруктураГруппировкиИнформации,ЭлементСтруктуры,ТабличныйДокумент);	
			ИначеЕсли ТипЗнч(ДанныеДПАСтруктура[ЭлементСтруктуры.Ключ]) = Тип("Структура") И ДанныеДПАСтруктура[ЭлементСтруктуры.Ключ].Количество()>0 Тогда
				ОбработатьСтруктуруДанных(ДанныеДПАСтруктура,СтруктураГруппировкиИнформации,ЭлементСтруктуры,ТабличныйДокумент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Процедуры формирования отчета по факторам

Процедура ВывестиЗаголовокФактора(Фактор,ТабличныйДокументФакторы,ОбластиМакетаФакторы)

	ЭлементИнформации = Фактор.Значение.Данные;
	
	ОпендатаботЗаполнениеКонтрагентаСервер.ПреобразоватьДанныеСтруктурыДляОтчета(ЭлементИнформации);

	ИконкаФактора = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементИнформации, "icon");
	ТипФактора   = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементИнформации, "type");
	
	Если СтрНайти(ТипФактора,"Founders") <>0 Тогда
		ИконкаФактора = "";
	КонецЕсли;
	
	Если Не ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементИнформации, "specificText") = "" Тогда
		ТекстФактора = ИконкаФактора + " " + ЭлементИнформации.specificText;
	Иначе
		ТекстФактора = ИконкаФактора + " " + ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементИнформации, "text");
		
		Если ТипФактора = "wagedebt"  И СтрДлина(ТекстФактора)<=2 Тогда // если только иконка или пусто
			ТекстФактора = ТекстФактора + "Сумма заборгованості " + ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементИнформации, "debt") + " грн, виконавчі провадження — " + ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементИнформации, "penaltiesCount");
		ИначеЕсли ТипФактора = "history"  И ПустаяСтрока(ТекстФактора) Тогда
			ТекстФактора = "✅ Історія змін даних у ЄДР";
		КонецЕсли;
	КонецЕсли;
	
	ИспользуемыйМакетРискФактор = ОбластиМакетаФакторы.РискФактор;
	
	ПолеИндикатор = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементИнформации, "indicator");
	Если ПолеИндикатор = "positive" Тогда   
		ИспользуемыйМакетРискФактор = ОбластиМакетаФакторы.РискФакторПозитивный;
	ИначеЕсли ПолеИндикатор = "critical" ИЛИ ПолеИндикатор = "negative" Тогда
		ИспользуемыйМакетРискФактор = ОбластиМакетаФакторы.РискФакторКритический;
	ИначеЕсли Лев(ПолеИндикатор,7) = "warning" Тогда  // в данных JSON бывает лишний невидимый символ
		ИспользуемыйМакетРискФактор = ОбластиМакетаФакторы.РискФакторВнимание;
	КонецЕсли;
	ИспользуемыйМакетРискФактор.Параметры.text = ТекстФактора;
	ТабличныйДокументФакторы.Вывести(ИспользуемыйМакетРискФактор);

	Если ТипФактора = "vat"
		Или ТипФактора = "singletax"
		Или ТипФактора = "debt" 
		Или ТипФактора = "massAddress"
		Или ТипФактора = "sanction" Тогда
		ТабличныйДокументФакторы.НачатьГруппуСтрок(,Ложь);
		МакетРискФакторИнформация = Фактор.Значение.ОбластьМакета;
		МакетРискФакторИнформация.Параметры.Заполнить(ЭлементИнформации);
		ТабличныйДокументФакторы.Вывести(МакетРискФакторИнформация);
		Статус = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементИнформации, "dateCancellation");
		Если ТипФактора = "vat" и Не Статус = "" Тогда
			ОбластьНДСАннуляция = ОбластиМакетаФакторы.РискФакторИнформацияНДСАннуляция;
			ОбластьНДСАннуляция.Параметры.Заполнить(ЭлементИнформации);
			ТабличныйДокументФакторы.Вывести(ОбластьНДСАннуляция);
		КонецЕсли;
		ТабличныйДокументФакторы.ЗакончитьГруппуСтрок();
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьТекстЭлементаФактора(ЭлементФактора,ТипФактора)
	
	ТекстЭлементаФактора = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементФактора, "name");
	Если Не ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементФактора, "specificText") = "" Тогда
		ТекстЭлементаФактора = ЭлементФактора.specificText;
	Иначе
		Если ТипФактора = "penalty" Тогда 
			ТекстЭлементаФактора =  ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементФактора, "category") + " (" + ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементФактора, "number") + ")";
		ИначеЕсли ТипФактора = "history" Тогда 
			ТекстЭлементаФактора =  "Зміни " + ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементФактора, "date");
		ИначеЕсли ТипФактора = "declarantOwner" Тогда 
			ТекстЭлементаФактора = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементФактора, "pib");
		ИначеЕсли ТипФактора = "bankruptcy" Тогда 
			ТекстЭлементаФактора = "" + ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементФактора, "type") + " №" + ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементФактора, "number") + ", справа "+ ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементФактора, "court");
		ИначеЕсли ТипФактора = "courtDecision" Тогда 
			ТекстЭлементаФактора = "" + ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементФактора, "type") + " №" + ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементФактора, "documentNumber") + ", справа "+ ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементФактора, "documentNumber");
		ИначеЕсли ТипФактора = "courtCompany" Тогда 
			ТекстТипСудов = "";
			Если ЭлементФактора.type = "civil" Тогда
				ТекстТипСудов =  "у загальних судах";
			ИначеЕсли ЭлементФактора.type = "criminal" Тогда
				ТекстТипСудов =  "у кримінальних судах";
			ИначеЕсли ЭлементФактора.type = "arbitrage" Тогда
				ТекстТипСудов =  "у арбітражних судах";
			ИначеЕсли ЭлементФактора.type = "administrative" Тогда
				ТекстТипСудов =  "у адміністративних судах";
			ИначеЕсли ЭлементФактора.type = "admin_offense" Тогда
				ТекстТипСудов =  "про адміністративні правопорушення";
			ИначеЕсли ЭлементФактора.type = "undefined" Тогда
				ТекстТипСудов =  "інших";
			Иначе
				ТекстТипСудов = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементФактора, "type");
			КонецЕсли;
			ТекстЭлементаФактора = "Справ " + ТекстТипСудов + " — " + ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементФактора, "count") + ", з них активних — " + ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементФактора, "liveCount");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстЭлементаФактора;
	
КонецФункции

Процедура ВывестиФакторы(ФакторыМассив,СтруктураГруппировкиФакторов,ТабличныйДокументФакторы,ОбластиМакетаФакторы,ДанныеОтчета)
	
	//Заполнение информации по группам факторов
	Для каждого ЭлементИнформации Из ФакторыМассив Цикл   
		ГруппаФактора = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(СтруктураГруппировкиФакторов, ЭлементИнформации.factorGroup);
		ЭтоНовыйФактор = Ложь;
		//Если новая группа факторов, то и фактор новый
		Если ГруппаФактора = "" Тогда
			ЭтоНовыйФактор = Истина;
		Иначе
			//Если группа фактора известна, проверим, известен ли нам фактор
			Если Не ГруппаФактора.Факторы.Свойство(ЭлементИнформации.type) Тогда
				ЭтоНовыйФактор = Истина;
			КонецЕсли;
		КонецЕсли;
		Если ЭтоНовыйФактор = Ложь Тогда
			ГруппаФактора.Факторы[ЭлементИнформации.type].Данные = ЭлементИнформации;
			ГруппаФактора.Использование = Истина;
		Иначе
			СтруктураГруппировкиФакторов["other"].Факторы.Вставить(ЭлементИнформации.type,Новый Структура("ОбластьМакета,Данные",ОбластиМакетаФакторы["ЭлементФактора"],ЭлементИнформации));
			СтруктураГруппировкиФакторов["other"].Использование = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	//Вывод информации по группам факторов в табличный документ
	Для каждого ГруппаФактора Из СтруктураГруппировкиФакторов Цикл
		Если ГруппаФактора.Значение.Использование = Ложь Тогда
			Продолжить;
		КонецЕсли;
		Заголовок = ГруппаФактора.Значение.Заголовок;
		Если Не ПустаяСтрока(Заголовок) Тогда
			ОбластиМакетаФакторы.ГруппаФакторов.Параметры.text = Заголовок;
			ТабличныйДокументФакторы.Вывести(ОбластиМакетаФакторы.ГруппаФакторов);
		КонецЕсли;
		Для Каждого Фактор из  ГруппаФактора.Значение.Факторы Цикл
			ЭлементИнформации = Фактор.Значение.Данные;
			Если ЭлементИнформации = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			ОпендатаботЗаполнениеКонтрагентаСервер.ПреобразоватьДанныеСтруктурыДляОтчета(ЭлементИнформации);
			ВывестиЗаголовокФактора(Фактор,ТабличныйДокументФакторы,ОбластиМакетаФакторы);
			
			ТипФактора   = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементИнформации, "type");
			ЭлементыФактора   = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(ЭлементИнформации, "items");
			Если НЕ ЭлементыФактора = "" Тогда
				ТабличныйДокументФакторы.НачатьГруппуСтрок(, Ложь);
				Для каждого ЭлементФактора Из ЭлементыФактора Цикл
					ВывестиЭлементФактора(ЭлементФактора,ТабличныйДокументФакторы,ТипФактора,Фактор.Значение.ОбластьМакета,ОбластиМакетаФакторы.ЭлементФактора,ДанныеОтчета);
				КонецЦикла;
				ТабличныйДокументФакторы.ЗакончитьГруппуСтрок();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиЭлементФактора(ЭлементФактора,ТабличныйДокументФакторы,ТипФактора,ОбластьМакетаФактора,ОбластиМакетаЭлементаФактора,ДанныеОтчета)
	
	ОпендатаботЗаполнениеКонтрагентаСервер.ПреобразоватьДанныеСтруктурыДляОтчета(ЭлементФактора);
	ТипДополнительнойИнформации = "";
	ТекстЭлементаФактора = СформироватьТекстЭлементаФактора(ЭлементФактора,ТипФактора);
	Если Не ПустаяСтрока(ТекстЭлементаФактора) Тогда
		ОбластиМакетаЭлементаФактора.Параметры.text = ТекстЭлементаФактора;
		ТабличныйДокументФакторы.Вывести(ОбластиМакетаЭлементаФактора);
	КонецЕсли;
	Если ТипФактора = "history" Тогда
		ТабличныйДокументФакторы.НачатьГруппуСтрок(, Ложь);
		МассивИзменений = ЭлементФактора.changes;
		Для каждого ЭлементИзменений Из МассивИзменений Цикл
			ОпендатаботЗаполнениеКонтрагентаСервер.ПреобразоватьДанныеСтруктурыДляОтчета(ЭлементИзменений,ДанныеОтчета);
			ОбластьМакетаФактора.Параметры.Заполнить(ЭлементИзменений);
			ОбластьМакетаФактора.Параметры.Заполнить(ЭлементФактора);
			ТабличныйДокументФакторы.Вывести(ОбластьМакетаФактора);
		КонецЦикла; 
		ТабличныйДокументФакторы.ЗакончитьГруппуСтрок();
	ИначеЕсли ТипФактора = "declarantOwner" Тогда
		ТабличныйДокументФакторы.НачатьГруппуСтрок(, Ложь);
		МассивГодДекларации = ЭлементФактора.years;
		Для каждого ГодДекларации Из МассивГодДекларации Цикл
			ОбластьМакетаФактора.Параметры.text = "Рік подання декларації - " + Формат(Формат(ГодДекларации, "ЧГ=0"), "ДФ=гггг");
			ТабличныйДокументФакторы.Вывести(ОбластьМакетаФактора);
		КонецЦикла; 
		ТабличныйДокументФакторы.ЗакончитьГруппуСтрок();
	ИначеЕсли ТипФактора = "penalty"
		Или ТипФактора = "bankruptcy" 
		Или ТипФактора = "rnboSanction" 
		Или ТипФактора = "amcu" Тогда
		ТабличныйДокументФакторы.НачатьГруппуСтрок(, Ложь);
		ОбластьМакетаФактора.Параметры.Заполнить(ЭлементФактора);
		ТабличныйДокументФакторы.Вывести(ОбластьМакетаФактора);
		ТабличныйДокументФакторы.ЗакончитьГруппуСтрок();
	ИначеЕсли ТипФактора = "audit" Тогда
		ОбластьМакетаФактора.Параметры.text = ЭлементФактора.agency + " - " + ЭлементФактора.date;
		ТабличныйДокументФакторы.Вывести(ОбластьМакетаФактора);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//Формирование отчета по регистрационным данным и риск-факторам
Процедура СформироватьРезультатОтчетаЮрлицаФОП(СтрокаПоиска, ДанныеОтчета, ДанныеДосье)
	
	ТабличныйДокумент  = Новый ТабличныйДокумент;
	ОбластиМакета      = ВсеОбластиМакета("UK_ЮридическиеЛицаФОП");
	
	НаименованиеКраткое = "";
	СтрокаПоиска=СокрЛП(СтрокаПоиска);

	Если НЕ ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Сообщить(НСтр("ru='Не заполнен код поиска';uk='Не заповнений код пошуку'"));
		Возврат;
	КонецЕсли;
	
	РезультатЧтения = ОпендатаботСервер.ПолучитьРезультатПоСтрокеПоиска(СтрокаПоиска, ДанныеОтчета.ОбновлятьКэш);
	
	ТабличныйДокумент.Вывести(ОбластиМакета.Шапка);
	
	// Получим Структуры с данными
	РегистрацияСтруктура = "";
	ДанныеДПА = "";
	ФакторыМассив = "";
		
	Если НЕ РезультатЧтения.Ошибка Тогда
		РезультатЧтениеJSON = РезультатЧтения.РезультатЧтениеJSON;
		
		Если РезультатЧтениеJSON.status = "ok" Тогда
			// как тут для ФОП
			СтруктураДанные = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(РезультатЧтениеJSON, "data");
			Если ТипЗнч(СтруктураДанные) = Тип("Структура") Тогда
				РегистрацияСтруктура = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(СтруктураДанные, "registry");
				ФакторыМассив = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(СтруктураДанные, "factors");
				ДанныеДПАСтруктура  = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(СтруктураДанные, "dpa");
				Если НЕ ТипЗнч(РегистрацияСтруктура) = Тип("Структура") ИЛИ НЕ ТипЗнч(ФакторыМассив) = Тип("Массив") Тогда
					ФакторыМассив = Новый Массив;
				КонецЕсли;
				Если НЕ ТипЗнч(РегистрацияСтруктура) = Тип("Структура") ИЛИ НЕ ТипЗнч(ДанныеДПАСтруктура) = Тип("Структура") Тогда
					ДанныеДПАСтруктура = Новый Структура;
				КонецЕсли;
			Иначе
				РезультатЧтения.Ошибка = Истина;
			КонецЕсли
		Иначе
			РезультатЧтения.Ошибка = Истина;
		КонецЕсли;
		Если РезультатЧтения.Ошибка Тогда
			РезультатЧтения.ТекстОшибки = "Помилка розбору відповіді сервісу.";
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатЧтения.Ошибка Тогда
		
		ОбластиМакета.ИнформацияОбОшибке.Параметры.Заполнить(РезультатЧтения);
		ТабличныйДокумент.Вывести(ОбластиМакета.ИнформацияОбОшибке);

	Иначе
		
		ОпендатаботЗаполнениеКонтрагентаСервер.ПреобразоватьДанныеСтруктурыДляОтчета(РегистрацияСтруктура);
		
		НаименованиеКраткое = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(РегистрацияСтруктура,"shortName");
		Если ПустаяСтрока(НаименованиеКраткое) Тогда
			НаименованиеКраткое = ОпендатаботЗаполнениеКонтрагентаСервер.ПолучитьПолеСтруктуры(РегистрацияСтруктура,"fullName");
		КонецЕсли;
		
		ОбластиМакета.ШапкаИнформация.Параметры.ДатаАктуальности = РезультатЧтения.Дата;
		ОбластиМакета.ШапкаИнформация.Параметры.НаименованиеКонтрагента = СтрокаПоиска + " " + НаименованиеКраткое;
		ТабличныйДокумент.Вывести(ОбластиМакета.ШапкаИнформация);
		
		СтруктураГруппировкиДанных = ПолучитьСтруктуруГруппировкиДанныхДляОтчетаЮрлицаФОП(ОбластиМакета,ДанныеОтчета.ЭтоЮридическоеЛицо);
		
		//Выводим информацию о данных регистрации
		ОбластиМакетаДанныеРегистрации = СтруктураГруппировкиДанных.ОбластьМакетаЗаголовок;
		ОбластиМакетаДанныеРегистрации.Параметры.Заполнить(РегистрацияСтруктура);
		ТабличныйДокумент.Вывести(ОбластиМакетаДанныеРегистрации);
		
		Если ФакторыМассив.Количество() = 0 Тогда 
			ТабличныйДокумент.Вывести(ОбластиМакета.ШапкаНетДанных);
		Иначе
			СтруктураГруппировкиФакторов = ПолучитьСтруктуруГруппировкиРискФакторовДляОтчетаЮрлицаФОП(ОбластиМакета);
			ВывестиФакторы(ФакторыМассив,СтруктураГруппировкиФакторов,ТабличныйДокумент,ОбластиМакета,ДанныеОтчета);
		КонецЕсли;	
		
		ШапкаРегистрационныеДанные = ОбластиМакета.ГруппаФакторов;
		ШапкаРегистрационныеДанные.Параметры.text = "Реєстраційні дані";
		ТабличныйДокумент.Вывести(ШапкаРегистрационныеДанные);
		
		ОбластьГруппаФакторов = ОбластиМакета.ГруппировкаСтрок;
		ОбластьГруппаФакторов.Параметры.Заголовок = "Загальна інформація";
		ТабличныйДокумент.Вывести(ОбластьГруппаФакторов);
	
		ТабличныйДокумент.НачатьГруппуСтрок(,Ложь);
		ОбластиМакетаДанныеРегистрации = СтруктураГруппировкиДанных.ОбластьМакетаДанныеРегистрации;
		ОбластиМакетаДанныеРегистрации.Параметры.Заполнить(РегистрацияСтруктура);
		ТабличныйДокумент.Вывести(ОбластиМакетаДанныеРегистрации);
		ТабличныйДокумент.ЗакончитьГруппуСтрок();
		
		ВывестиРегистрационныеДанные(РегистрацияСтруктура,ДанныеДПАСтруктура,СтруктураГруппировкиДанных,ТабличныйДокумент);
		
		ДанныеОтчета.ОтчетСформирован = Истина;

	КонецЕсли;
	
	ДанныеДосье.Вставить("РезультатДанные", ТабличныйДокумент);
	ДанныеДосье.Вставить("ИмяФайлаДанные",НаименованиеКраткое);
					
КонецПроцедуры


#КонецЕсли