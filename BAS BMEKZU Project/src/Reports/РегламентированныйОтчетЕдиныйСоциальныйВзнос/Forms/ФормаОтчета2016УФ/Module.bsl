&НаСервере
Перем мБухИтоги;
&НаСервере
Перем ТаблицаРасшифровки;
&НаСервере
Перем ОбщиеПараметрыРасшифровки;

&НаСервере
Перем мОбъектОтчета;

//ИНАГРО ++
&НаСервере
Перем тзРаботники;
Перем мИдГруппы5;
Перем мИдГруппы6;
Перем мИдГруппы7;
Перем тзГПХ;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
		
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2016УФ";
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
		
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	// Идентификаторы многострочных групп
	СтруктураРеквизитовФормы.мИдГруппы5    = "T5T1R";
	СтруктураРеквизитовФормы.мИдГруппы6    = "T6T1R";
	СтруктураРеквизитовФормы.мИдГруппы7    = "T7T1R";
		
	// количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда)
	КолИсхСтрокИдГруппы1 = 1;
	
	СтруктураДанныхПереченьТаблиц	= Новый Структура;
	СтруктураДанныхТаблица1			= Новый Структура;
	СтруктураДанныхТаблица5			= Новый Структура;
	СтруктураДанныхТаблица7			= Новый Структура;
	СтруктураДанныхТаблица6			= Новый Структура;
	СтруктураДанныхСлужебныеДанные	= Новый Структура;
	
	//ИнициализацияМногостраничныхРазделов();
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5, 	СтруктураРеквизитовФормы.мИдГруппы5);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6, 	СтруктураРеквизитовФормы.мИдГруппы6);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы7, 	СтруктураРеквизитовФормы.мИдГруппы7);
	
	мСтруктураМногостраничныхРазделов = Новый Структура;
	//мСтруктураМногостраничныхРазделов.Вставить("ПриложениеПН", "ТаблицаСтраницыРаздела1");
	
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5, 	КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы6, 	КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы7, 	КолИсхСтрокИдГруппы1);
	
	ЗаполнитьСтруктурыКолонокМногострочныхЧастей();
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
		
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "01/06/2016";
	
	СтруктураРеквизитовФормы.мПечатныеформы 	= Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "ПереченьТаблиц";
		
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	ДатаПодписи                                       = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати 	   = Ложь;
	
	ПеречислениеПериодичностьМесяц = Перечисления.Периодичность.Месяц;
	
	СтруктураРеквизитовФормы.ЕстьДуплекс = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность", "ЕстьДуплекс", Ложь);
	
	Элементы.ЕстьДуплекс.Пометка		 = СтруктураРеквизитовФормы.ЕстьДуплекс;
	
	ВывестиМакетВТаблДокНаСервере(ИмяРаздела, 1);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяРаздела);
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяРаздела);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	
	СтруктураРеквизитовФормы.Вставить("мИдГруппы5");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы6");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы7");
	
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ОрганизацияЮридическоеФизическоеЛицо");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкиДопСтрок", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкиДопСтраниц", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуВыгрузить", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	
	СтруктураРеквизитовФормы.Вставить("ТекущиеОбластиСтраниц");
	СтруктураРеквизитовФормы.Вставить("КолонкиМногострочныхРазделов");
	СтруктураРеквизитовФормы.Вставить("ЕстьДуплекс", Ложь);
	
	СтруктураРеквизитовФормы.Вставить("ПолучениеДанныхДляЗвит1С", Ложь);
	СтруктураРеквизитовФормы.Вставить("ДопПоказателиОтчетаЗвит1С", Новый Структура);
	
	
	
	СтруктураРеквизитовФормы.Вставить("СпецРежим", 0);
	
КонецПроцедуры

//&НаСервере
//Процедура ИнициализацияМногостраничныхРазделов()
// 
//	Элементы.ДопСтроки.Видимость = Истина;
//	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздела1.Добавить();
//	СтрПерваяСтраница.Представление               = НСтр("ru='Стр. ';uk='Стр. '") + 1;
//	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
//	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

//КонецПроцедуры // ИнициализацияМногостраничныхРазделов()

// Функция возвращает параметры числа Е для различных разделов отчета
//
// Параметры
//  ИмяРаздела  - Строка
//
// Возвращаемое значение:
//  Результат   - ОписаниеТипа
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОписаниеТипаЧислаЕДляРаздела(ИмяРаздела = "")
	
	Результат = Новый Структура("ОписаниеТипа, Длина, Точность");
	
	//Если ИмяРаздела = "Раздел1" 
	// ИЛИ ИмяРаздела = "Раздел2" 
	// ИЛИ ИмяРаздела = "Раздел3" 
	// ИЛИ ИмяРаздела = "Раздел3_Прил2" Тогда
	//	Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));
	//ИначеЕсли ИмяРаздела = "Раздел7" Тогда
	//	Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2));	
	//Иначе
    Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	//КонецЕсли; 

	Возврат Результат; 
	
КонецФункции


&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьНачальныеНастройки();

	СформироватьТаблицуНужныхСтатей();
	
	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ЗаполнитьПустыеСтруктурыДанных();	
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если НЕ БезОткрытияФормы Тогда
		СформироватьСпискиВыбора();
	КонецЕсли;

	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		НачальныеОперацииСМногострочнымиБлоками();
			
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
			ЗаполнитьНастраиваемыеПараметрыЗаполнения();

		КонецЕсли;
		
	Иначе
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуВыгрузить Тогда
		Элементы.Выгрузка.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкиДопСтрок Тогда
		Элементы.ДопСтроки.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкиДопСтраниц Тогда
		Элементы.ДопСтраницы.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	СтруктураРеквизитовФормы.ОрганизацияЮридическоеФизическоеЛицо = СтруктураРеквизитовФормы.Организация.ЮридическоеФизическоеЛицо;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
    	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПрорисоватьПодменюПечать(ЭтаФорма);
	КонецЕсли;
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры // Инициализация()

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // НачальныеОперацииСМногострочнымиБлоками()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);	
	
	МассивТиповТаблицаЗначений = Новый Массив; 
	МассивТиповТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТиповТаблицаЗначений);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда         
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда		
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы 
	//

	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ПереченьТаблиц";
	СтрокаУровня1.Представление            = НСтр("ru='Перечень таблиц отчета';uk='Перелік таблиць звіту'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица1";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 1';uk='Таблиця 1'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечати";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица5";
	//ИНАГРО ++ 
	//СтрокаУровня1.Представление            = НСтр("ru='Таблица 5';uk='Додаток 5'");
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 5';uk='Таблиця 5'");
	//ИНАГРО -- 
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
 
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица6";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 6';uk='Таблиця 6'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица7";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 7';uk='Таблиця 7'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "СлужебныеДанные";
	СтрокаУровня1.Представление            = НСтр("ru='Служебные данные';uk='Службові дані'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки.
//
&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
		
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ПереченьТаблиц";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; 
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Истина;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Таблица1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Истина;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Таблица5";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы5;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Таблица6";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы6;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Таблица7";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы7;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "СлужебныеДанные";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
КонецПроцедуры // ФормироватьСтруктуруСвойствСтраниц()

// СформироватьДеревоРазделовОтчетаНаСервере()
//
&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаСервере()

// СформироватьДеревоРазделовОтчетаНаКлиенте()
//
&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаКлиенте()

// СформироватьДеревоРазделовОтчета()
//
&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = НайденноеЗначение[НомерСтраницы-1].Представление;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры // СформироватьДеревоРазделовОтчета()
&НаСервере
Процедура СформироватьТаблицуНужныхСтатей()
	
	СтрокиДекларации = Справочники.СтатьиНалоговыхДеклараций;

	//ТаблицаНужныхСтатей = Новый ТаблицаЗначений;
	//ТаблицаНужныхСтатей.Колонки.Добавить("Статья");
	//ТаблицаНужныхСтатей.Колонки.Добавить("ПолеБазаОсновное");
	//ТаблицаНужныхСтатей.Колонки.Добавить("ПолеВзносОсновное");
	//ТаблицаНужныхСтатей.Колонки.Добавить("ПолеБазаДоначисление");
	//ТаблицаНужныхСтатей.Колонки.Добавить("ПолеВзносДоначисление");
	//ТаблицаНужныхСтатей.Колонки.Добавить("ПолеБазаТип24");
	//ТаблицаНужныхСтатей.Колонки.Добавить("ПолеВзносТип24");
	//ТаблицаНужныхСтатей.Колонки.Добавить("ПолеБазаТип35");
	//ТаблицаНужныхСтатей.Колонки.Добавить("ПолеВзносТип35");

	//Основные используемые статьи 
	НС_ФОТ = ТаблицаНужныхСтатей.Добавить();
	НС_ФОТ.Статья = СтрокиДекларации.ЕСВ_ФОТ;
	НС_ФОТ.ПолеБазаОсновное = "R021G3";
	НС_ФОТ.ПолеВзносОсновное = "R031G3";
	НС_ФОТ.ПолеБазаДоначисление = "R025G3";
	НС_ФОТ.ПолеВзносДоначисление = "R035G3";
	НС_ФОТ.ПолеБазаТип24 = "R044G3";
	НС_ФОТ.ПолеВзносТип24 = "R04101G3";
	НС_ФОТ.ПолеБазаТип35 = "R054G3";
	НС_ФОТ.ПолеВзносТип35 = "R05101G3";
	
	НС_ФОТИнвалиды = ТаблицаНужныхСтатей.Добавить();
	НС_ФОТИнвалиды.Статья = СтрокиДекларации.ЕСВ_ФОТИнвалиды;
	НС_ФОТИнвалиды.ПолеБазаОсновное = "R022G3";
	НС_ФОТИнвалиды.ПолеВзносОсновное = "R032G3";
	НС_ФОТИнвалиды.ПолеБазаДоначисление = "";
	НС_ФОТИнвалиды.ПолеВзносДоначисление = "";
	НС_ФОТИнвалиды.ПолеБазаТип24 = "R044G3";
	НС_ФОТИнвалиды.ПолеВзносТип24 = "R04104G3";
	НС_ФОТИнвалиды.ПолеБазаТип35 = "R054G3";
	НС_ФОТИнвалиды.ПолеВзносТип35 = "R05104G3";
	
	НС_ФОТИнвалиды50 = ТаблицаНужныхСтатей.Добавить();
	НС_ФОТИнвалиды50.Статья = СтрокиДекларации.ЕСВ_ФОТИнвалиды50;
	НС_ФОТИнвалиды50.ПолеБазаОсновное = "R024G3";
	НС_ФОТИнвалиды50.ПолеВзносОсновное = "R034G3";
	НС_ФОТИнвалиды50.ПолеБазаДоначисление = "";
	НС_ФОТИнвалиды50.ПолеВзносДоначисление = "";
	НС_ФОТИнвалиды50.ПолеБазаТип24 = "R044G3";
	НС_ФОТИнвалиды50.ПолеВзносТип24 = "R04106G3";
	НС_ФОТИнвалиды50.ПолеБазаТип35 = "R054G3";
	НС_ФОТИнвалиды50.ПолеВзносТип35 = "R05106G3";
	
	НС_ФОТУТОГ = ТаблицаНужныхСтатей.Добавить();
	НС_ФОТУТОГ.Статья = СтрокиДекларации.ЕСВ_ФОТУТОГ;
	НС_ФОТУТОГ.ПолеБазаОсновное = "R023G3";
	НС_ФОТУТОГ.ПолеВзносОсновное = "R033G3";
	НС_ФОТУТОГ.ПолеБазаДоначисление = "";
	НС_ФОТУТОГ.ПолеВзносДоначисление = "";
	НС_ФОТУТОГ.ПолеБазаТип24 = "R044G3";
	НС_ФОТУТОГ.ПолеВзносТип24 = "R04105G3";
	НС_ФОТУТОГ.ПолеБазаТип35 = "R054G3";
	НС_ФОТУТОГ.ПолеВзносТип35 = "R05105G3";
	
	
	//Статьи устарели, но используются для совместимости и для отражения корректировок
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТБольничные;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТ,,"Статья");
	НС.ПолеВзносТип24 = "R04108G3";
	НС.ПолеВзносТип35 = "R05108G3";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТБюджетники;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТ,,"Статья");
	НС.ПолеВзносТип24 = "R04102G3";
	НС.ПолеВзносТип35 = "R05102G3";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТГПХ;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТ,,"Статья");
	НС.ПолеВзносТип24 = "R04107G3";
	НС.ПолеВзносТип35 = "R05107G3";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТЛетчики;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТ,,"Статья");
	НС.ПолеВзносТип24 = "R04103G3";
	НС.ПолеВзносТип35 = "R05103G3";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТСудостр;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТ,,"Статья");
	НС.ПолеВзносТип24 = "R04108G3";
	НС.ПолеВзносТип35 = "R05108G3";

	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТГПХСудостр;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТ,,"Статья");
	НС.ПолеВзносТип24 = "R04108G3";
	НС.ПолеВзносТип35 = "R05108G3";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТДекретные;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТ,,"Статья");
	НС.ПолеВзносТип24 = "R04108G3";
	НС.ПолеВзносТип35 = "R05108G3";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТБольничныеИнвалиды;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТИнвалиды,,"Статья");
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТДекретныеИнвалиды;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТИнвалиды,,"Статья");
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТБольничныеИнвалиды50;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТИнвалиды50,,"Статья");
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТДекретныеИнвалиды50;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТИнвалиды50,,"Статья");
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТБольничныеУТОГ;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТУТОГ,,"Статья");
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТДекретныеУТОГ;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТУТОГ,,"Статья");
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТГПХУТОГ;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТУТОГ,,"Статья");
	
	//Статьи взносов больше в отчет не попадают, только для отражения корректировок
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_Работники;
	НС.ПолеБазаОсновное = "";
	НС.ПолеВзносОсновное = "";
	НС.ПолеБазаДоначисление = "";
	НС.ПолеВзносДоначисление = "";
	НС.ПолеБазаТип24 = "";
	НС.ПолеВзносТип24 = "R04301G3";
	НС.ПолеБазаТип35 = "";
	НС.ПолеВзносТип35 = "R05301G3";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_Больничные;
	НС.ПолеБазаОсновное = "";
	НС.ПолеВзносОсновное = "";
	НС.ПолеБазаДоначисление = "";
	НС.ПолеВзносДоначисление = "";
	НС.ПолеБазаТип24 = "";
	НС.ПолеВзносТип24 = "R04305G3";
	НС.ПолеБазаТип35 = "";
	НС.ПолеВзносТип35 = "R05305G3";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ГПХ;
	НС.ПолеБазаОсновное = "";
	НС.ПолеВзносОсновное = "";
	НС.ПолеБазаДоначисление = "";
	НС.ПолеВзносДоначисление = "";
	НС.ПолеБазаТип24 = "";
	НС.ПолеВзносТип24 = "R04304G3";
	НС.ПолеБазаТип35 = "";
	НС.ПолеВзносТип35 = "R05304G3";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ИнвалидыУТОГ;
	НС.ПолеБазаОсновное = "";
	НС.ПолеВзносОсновное = "";
	НС.ПолеБазаДоначисление = "";
	НС.ПолеВзносДоначисление = "";
	НС.ПолеБазаТип24 = "";
	НС.ПолеВзносТип24 = "R04302G3";
	НС.ПолеБазаТип35 = "";
	НС.ПолеВзносТип35 = "R05302G3";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_РаботникиСР;
	НС.ПолеБазаОсновное = "";
	НС.ПолеВзносОсновное = "";
	НС.ПолеБазаДоначисление = "";
	НС.ПолеВзносДоначисление = "";
	НС.ПолеБазаТип24 = "";
	НС.ПолеВзносТип24 = "R04303G3";
	НС.ПолеБазаТип35 = "";
	НС.ПолеВзносТип35 = "R05303G3";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_Декретные;
	НС.ПолеБазаОсновное = "";
	НС.ПолеВзносОсновное = "";
	НС.ПолеБазаДоначисление = "";
	НС.ПолеВзносДоначисление = "";
	НС.ПолеБазаТип24 = "";
	НС.ПолеВзносТип24 = "R04305G3";
	НС.ПолеБазаТип35 = "";
	НС.ПолеВзносТип35 = "R05305G3";

КонецПроцедуры

&НаСервере
Процедура ДобавитьЗначениеВСтруктуру(СтруктураДанных, Ключ, Значение)
	
	Если Ключ = "" ИЛИ Значение = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	НайденноеЗначение = 0;
	
	Если СтруктураДанных.Свойство(Ключ, НайденноеЗначение) Тогда
		СтруктураДанных.Вставить(Ключ, НайденноеЗначение + Значение);
	Иначе
		СтруктураДанных.Вставить(Ключ, Значение);
	КонецЕсли;	
	
Конецпроцедуры
&НаСервере
Функция СформироватьСтруктуруДанныхДопСтрокСтраницы(Форма, ИмяСтраницы) Экспорт
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяСтраницы = "ПриложениеПН" Тогда

		РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппыPN);

		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппыPN, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппыPN].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппыPN, ТаблицаДопСтрокГруппы);
		
	КонецЕсли;

	Возврат СтруктураДанныхДопСтрокРаздела;

КонецФункции

// РазделыОтчетаПриАктивизацииСтроки()
//
&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент) Экспорт
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	// сохраним текущее положение курсора на странице
	Если СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Неопределено Тогда
		СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Новый Структура;
	КонецЕсли;
	ТекущийНомерСтраницы = "_" + Строка(СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	
	КоординатыОбласти = Новый Структура();
	КоординатыОбласти.Вставить("Верх", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Верх);
	КоординатыОбласти.Вставить("Низ", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ);
	КоординатыОбласти.Вставить("Лево", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево);
	КоординатыОбласти.Вставить("Право", Элементы.ТабличныйДокумент.ТекущаяОбласть.Право);
	
	СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц.Вставить(ТекущийНомерСтраницы, КоординатыОбласти);	

	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Элементы.ДобавитьСтраницу.Доступность   = Ложь;
	Элементы.УдалитьСтраницу.Доступность    = Ложь;
	Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
	Элементы.ДобавитьСтроку.Доступность     = Ложь;
	Элементы.УдалитьСтроку.Доступность      = Ложь;
				
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
																
		КонецЕсли;														
				
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		
		Элементы.ДобавитьСтраницу.Доступность   = Истина;
		Элементы.УдалитьСтраницу.Доступность    = Истина;
		Элементы.УдалитьВсеСтраницы.Доступность = Истина;
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			
			Элементы.УдалитьСтраницу.Доступность = Ложь;
							   			
			Если Элемент.ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
				Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
			КонецЕсли;
			
		ИначеЕсли Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
			
			Элементы.УдалитьСтраницу.Доступность    = Ложь;
			Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если    Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Таблица5" 
		ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Таблица6" 
		ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Таблица7" Тогда
	
		Элементы.ДобавитьСтроку.Доступность = Истина;
		Элементы.УдалитьСтроку.Доступность  = Истина;
		
	КонецЕсли;
	
	// восстановим текущее положение курсора
	ТекущийНомерСтраницы = "_"+Строка(СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	Если СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц.Свойство(ТекущийНомерСтраницы) Тогда
		
		КоординатыОбласти = СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц[ТекущийНомерСтраницы];
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(КоординатыОбласти.Верх, КоординатыОбласти.Лево, КоординатыОбласти.Низ, КоординатыОбласти.Право);	
		
	Иначе	
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1, 1, 1);	
		
	КонецЕсли;
	
КонецПроцедуры // РазделыОтчетаПриАктивизацииСтроки()

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
			
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
	//Если ИмяТекРаздела = "Раздел2" Тогда
	//	ИзменитьЦветЯчеекНаСервере();
	//КонецЕсли;
						
КонецПроцедуры // ВывестиМакетСтраницыВТабличныйДокументНаСервере()

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменитьПризнакАктивностиСтраницы = Истина)
	
	// Многостраничные и многострочные разделы.
	//
	Если    НаимРаздела = "ПриложениеПН" Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
				
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
			
			// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина)
			
			СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
			
			ОпределитьПредставлениеДопСтраниц(НаимРаздела);

			СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(ЭтаФорма, НаимРаздела);
			
			Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
				СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
			Иначе
				СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
			КонецЕсли;
							
			Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
				СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
			Иначе
				СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			КонецЕсли;
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменитьПризнакАктивностиСтраницы;
			
		КонецЕсли;
		
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппыМассив = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы);	
		КонецЦикла;
		
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Процедура ОпределитьПредставлениеДопСтраниц(ИмяСтраницы = Неопределено, ТолькоУАктивнойСтраницы = Неопределено)
	Перем ТаблицаСтраницРаздела;
	Перем ТекущееПредставлениеСтраницы;

	ТолькоАктивная = ?(ТолькоУАктивнойСтраницы = Неопределено, Ложь, ТолькоУАктивнойСтраницы);
	
	Для Каждого Страница Из мСтруктураМногостраничныхРазделов Цикл
		ИмяТекСтраницы        = Страница.Ключ;
		ТаблицаСтраницРаздела = ЭтаФорма[Страница.Значение];

		Если ИмяСтраницы <> Неопределено Тогда
			Если ИмяТекСтраницы <> ИмяСтраницы Тогда
				Продолжить; // Пропускаем не нужные страницы
			КонецЕсли;
		КонецЕсли;

		// Если есть хоть одна страница - определим её представление
		Если ТаблицаСтраницРаздела.Количество() > 0 Тогда

			НомерСтраницы = 0;

			Для Каждого СтрокаТаблицы Из ТаблицаСтраницРаздела Цикл

				НомерСтраницы = НомерСтраницы + 1;

				СохрПредставлениеСтраницы = СтрокаТаблицы.Представление;

				// Если колонки нет, тогда автоматическое представление включено по умолчанию.
				Если ТаблицаСтраницРаздела[0].Свойство("АвтоматическоеПредставление") Тогда
					АвтоматическоеПредставление = СтрокаТаблицы.АвтоматическоеПредставление;
				Иначе
					АвтоматическоеПредставление = Истина;
				КонецЕсли;

				Если НЕ АвтоматическоеПредставление Тогда
					Продолжить;
				КонецЕсли;

				Если (НЕ ТолькоАктивная) Или ((ТолькоАктивная) И (СтрокаТаблицы.АктивнаяСтраница))Тогда

					ТекущееПредставлениеСтраницы = НСтр("ru='Стр. ';uk='Стр. '") + Строка(НомерСтраницы);
					СтрокаТаблицы.Представление = ТекущееПредставлениеСтраницы;

				КонецЕсли; // ТолькоАктивная

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры


&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	
	Если ТабличныйДокумент.Области.Найти("ПредупреждениеОПечати") = Неопределено Тогда
		ТабличныйДокумент.ОбластьПечати = Неопределено;
	Иначе
		ТабличныйДокумент.ОбластьПечати 					  = ТабличныйДокумент.Области.ПредупреждениеОПечати;
	    ТабличныйДокумент.Области.ПредупреждениеОПечати.Текст = Нстр("ru = 'ВНИМАНИЕ! Печать отчета необходимо осуществлять из меню ''Печать''.'; uk = 'УВАГА! Друк звіту необхідно здійснювати за допомогою меню ''Друк''.'");
	КонецЕсли;
	
	Если НЕ ИмяТекРаздела = "ПриложениеПН" Тогда 
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Если НЕ ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) = Неопределено Тогда
				Попытка
					ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
				Исключение
				КонецПопытки;
			КонецЕсли;	
		КонецЦикла;
		
		ИмяГруппыМассив = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
		
			СтруктураГруппы = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
			
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		
		КонецЦикла;
						
//	 Многострочные и обычные разделы.
	Иначе
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;

		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		 	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			
			Если НЕ ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) = Неопределено Тогда
				
				Попытка
					ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;

		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяТекРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		                                                        		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
				
		НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
		
		Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
			И (НовДанныеДопСтрокРаздела.Количество() > 0)
			И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
			
			НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
			
		Иначе
			
			НовДанныеДопСтрокРаздела = Неопределено;
			
		КонецЕсли;

		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
				
				ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
				ДанныеГруппыСтрок = ГруппаСтрок.Значение;
				
				ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	//ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяТекРаздела);
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
	
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	
	
КонецПроцедуры // ВывестиМакетВТаблДокНаСервере()

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(НаимРаздела)
	
	Если НаимРаздела = "ПриложениеПН" Тогда
		//ЗаполнитьШапкуПодписиПриложенияПН(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоказателиЗначениямиПоУмолчанию()

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт

	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы5", СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы6", СтруктураРеквизитовФормы.мИдГруппы6);
	ИдГрупп.Вставить("мИдГруппы7", СтруктураРеквизитовФормы.мИдГруппы7);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
		
КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте()

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт

	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы5", СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы6", СтруктураРеквизитовФормы.мИдГруппы6);
	ИдГрупп.Вставить("мИдГруппы7", СтруктураРеквизитовФормы.мИдГруппы7);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт

	Перем ТекТабличноеПоле;
		
	Если   ИдГруппы = ИдГрупп.мИдГруппы5 Тогда
		
		ТекТабличноеПоле = "Таблица5";
		
	ИначеЕсли   ИдГруппы = ИдГрупп.мИдГруппы6 Тогда
		
		ТекТабличноеПоле = "Таблица6";
		
	ИначеЕсли   ИдГруппы = ИдГрупп.мИдГруппы7 Тогда
		
		ТекТабличноеПоле = "Таблица7";
		
	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере()
//
&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы5", СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы6", СтруктураРеквизитовФормы.мИдГруппы6);
	ИдГрупп.Вставить("мИдГруппы7", СтруктураРеквизитовФормы.мИдГруппы7);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере()

// ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте()
//
&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы5", СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы6", СтруктураРеквизитовФормы.мИдГруппы6);
	ИдГрупп.Вставить("мИдГруппы7", СтруктураРеквизитовФормы.мИдГруппы7);
		
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	
	Перем ИмяГруппы;
	
	ИмяГруппы = Новый Массив;
	
	Если ИмяЛиста = Неопределено Тогда
        ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Таблица5" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы5);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Таблица6" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы6);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Таблица7" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы7);
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры // УстановитьФорматВыводаВПоляхВводаНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;

	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(СокрЛ(КодПоказателя), 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
				ФорматируемаяОбласть.ТипЗначения = Новый ОписаниеТипов(ФорматируемаяОбласть.ТипЗначения,,,Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					
					ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
					ФорматируемаяОбласть.ТипЗначения = Новый ОписаниеТипов(ФорматируемаяОбласть.ТипЗначения,,,Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	

КонецПроцедуры // УстановитьФорматВыводаВПоляхВвода()

&НаСервере
Процедура ЗаполнитьДатуПодписиНаСервере()

	ЗаполнитьДатуПодписи(ЭтаФорма);	

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)

	ДатаПодписиСтр = Формат(Форма.ДатаПодписи, "ДФ=ddMMyyyy");
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Таблица1", "HFILL_", 8, ДатаПодписиСтр, Ложь);			
	
КонецПроцедуры

//&НаКлиентеНаСервереБезКонтекста
//Процедура ЗаполнитьШапкуПодписиПриложенияПН(Форма)

//	HZ   = ПолучитьПоказательНаСервере("HZ",	Форма,"Декларация");
//	HZN  = ПолучитьПоказательНаСервере("HZN",	Форма,"Декларация");
//	HZU  = ПолучитьПоказательНаСервере("HZU",	Форма,"Декларация");
//	
//КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры // ПоказатьПериод()

// УстановитьЦветФонаЯчейкиНаКлиенте()
//
&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // УстановитьЦветФонаЯчейкиНаКлиенте()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // УстановитьЦветФонаЯчейкиНаСервере()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					
					ПозицияXXXX = Найти(ИмяПоказателя, "XXXX");
					Если ПозицияXXXX = 0 Тогда
						ВБлокеВсеПоказателиЗаполняются = Истина;
					Иначе
						ИмяГруппы = Лев(ИмяПоказателя, ПозицияXXXX - 1);
						ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
					КонецЕсли;
					
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЦветФонаЯчейки()

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя) Экспорт
    	
	ПозицияXXXX = Найти(ИмяПоказателя, "XXXX");
	Если ПозицияXXXX > 0 Тогда
		
		ИмяГруппы = Лев(ИмяПоказателя, ПозицияXXXX - 1);

	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
	СтруктураГруппы = Неопределено;

	Если НЕ Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы) Тогда
		Возврат 0;
	Иначе
		СтруктураГруппы = Форма[СтруктураГруппы];
		Возврат СтруктураГруппы.Количество();
	КонецЕсли;

КонецФункции


// ЗаполнитьСведенияОбОрганизацииНаСервере()
//
&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере()
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма);
		
КонецПроцедуры // ЗаполнитьСведенияОбОрганизацииНаСервере()

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма)
	//ИНАГРО ++
	//ЗаполнитьПоказательНаСервере("R001G3", "-", Форма, "ПереченьТаблиц");
	ЗаполнитьПоказательНаСервере("R001G3", "Х", Форма, "ПереченьТаблиц");
	//ИНАГРО --
	Организация = Форма.СтруктураРеквизитовФормы.Организация;	
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СписокПоказателей.Добавить("","ФормаСобственности");
    СписокПоказателей.Добавить("","НомерРегистрацииПФ");
	СписокПоказателей.Добавить("","НалоговаяИнспекция");
	СписокПоказателей.Добавить("","КодКВЕД");
	СписокПоказателей.Добавить("","ОПФГ");
	СписокПоказателей.Добавить("","ЮридическийАдрес");
	СписокПоказателей.Добавить("","Телефон");

	Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, СписокПоказателей);
	
	КодЕДРПОУ          	= Сведения.КодПоЕДРПОУ;
	ФормаСобственности  = Сведения.ФормаСобственности;
	НомерРегистрацииПФ  = Сведения.НомерРегистрацииПФ;
	НалоговаяИнспекция  = Сведения.НалоговаяИнспекция;
	КодКВЕД          	= Сведения.КодКВЕД;
	ОПФГ          		= Сведения.ОПФГ;
	HLOC			    = Сведения.ЮридическийАдрес;
	Телефон  		    = Сведения.Телефон;	
	
	ЗаполнитьПоказательНаСервере("TIN",  КодЕДРПОУ, Форма, "СлужебныеДанные");
	ЗаполнитьПоказательНаСервере("HTIN", КодЕДРПОУ, Форма, "СлужебныеДанные");
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "ПереченьТаблиц", "HTIN_",  10, КодЕДРПОУ, Ложь);			
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Таблица1", "HTIN_",  	  10, КодЕДРПОУ, Ложь);			
	
	ЗаполнитьПоказательНаСервере("HNAME", Организация.НаименованиеПолное, Форма, "СлужебныеДанные");
	ЗаполнитьПоказательНаСервере("HNAME", Организация.НаименованиеПолное, Форма, "ПереченьТаблиц");
	ЗаполнитьПоказательНаСервере("HNAME", Организация.НаименованиеПолное, Форма, "Таблица1");
	
	ЗаполнитьПоказательНаСервере("HLOC", HLOC, Форма, "ПереченьТаблиц");
	ЗаполнитьПоказательНаСервере("HLOC", HLOC, Форма, "Таблица1");
	
	ЗаполнитьПоказательНаСервере("HTEL", Телефон, Форма, "ПереченьТаблиц");	
	ЗаполнитьПоказательНаСервере("HTEL", Телефон, Форма, "Таблица1");	

	ЗаполнитьПоказательНаСервере("HKOPFG", 	ОПФГ, 				Форма, "Таблица1");	
	
	ЗаполнитьПоказательНаСервере("HKVED", 	КодКВЕД, 			Форма, "Таблица1");	
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Таблица1", "HKVED_",  	5, КодКВЕД,  Ложь);			
	
	ЗаполнитьПоказательНаСервере("HNREG", 	НомерРегистрацииПФ, Форма, "Таблица1");	
    Если (НалоговаяИнспекция <> Неопределено) Тогда 
		ЗаполнитьПоказательНаСервере("HKSTI", НалоговаяИнспекция.Код, Форма, "ПереченьТаблиц");	
		
		ЗаполнитьПоказательНаСервере("C_RAJ", НалоговаяИнспекция.КодАдмРайона, Форма, "СлужебныеДанные");	
		ЗаполнитьПоказательНаСервере("C_REG", НалоговаяИнспекция.Родитель.Код, Форма, "СлужебныеДанные");	
		ЗаполнитьПоказательНаСервере("C_STI_ORIG", НалоговаяИнспекция.Код, Форма, "СлужебныеДанные");	
		ЗаполнитьПоказательНаСервере("C_STI", НалоговаяИнспекция.Код, Форма, "СлужебныеДанные");	
		
	КонецЕсли;
	
	ЗаполнитьПоказательНаСервере("C_DOC_TYPE", 0, Форма, "СлужебныеДанные");	
	ЗаполнитьПоказательНаСервере("C_DOC_CNT",  1, Форма, "СлужебныеДанные");	
	ЗаполнитьПоказательНаСервере("C_DOC_STAN",  1, Форма, "СлужебныеДанные");	
	
	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации()  =  "ЕРП" Тогда
		ДопСведенияОбОрганизации        = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,ПолучитьБанковскийСчетПоУмолчанию(Организация));
	Иначе
		ДопСведенияОбОрганизации        = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,);
	КонецЕсли;
	ЗаполнитьПоказательНаСервере("HBANKACC", 	ДопСведенияОбОрганизации.НомерСчета, Форма, "Таблица1");	
	ЗаполнитьПоказательНаСервере("HBANKNAME", 	ДопСведенияОбОрганизации.Банк, 	 	 Форма, "Таблица1");	
	ЗаполнитьПоказательНаСервере("HMFO", 		СокрЛП(ДопСведенияОбОрганизации.МФО), 	 	 Форма, "Таблица1");	
	
	//дата подачи отчета в деларации и во всех приложниях 
	ЗаполнитьПоказательНаСервере("HFILL", 	Форма.ДатаПодписи, Форма, "СлужебныеДанные");	
	
	ЗаполнитьПоказательНаСервере("HZY", 		Год(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), Форма, "СлужебныеДанные");	
	ЗаполнитьПоказательНаСервере("PERIOD_YEAR", Год(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), Форма, "СлужебныеДанные");	
	
	ЗаполнитьПоказательНаСервере("HZM", 		 Месяц(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), Форма, "СлужебныеДанные");	
	ЗаполнитьПоказательНаСервере("PERIOD_MONTH", Месяц(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), Форма, "СлужебныеДанные");	
	ЗаполнитьПоказательНаСервере("PERIOD_TYPE",  1, Форма, "СлужебныеДанные");	
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");
	СписокПоказателей.Добавить("","ФИОБух");
	СписокПоказателей.Добавить("","ИННРук");
	СписокПоказателей.Добавить("","ИННБух");
	СведенияДатаПодписи = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.ДатаПодписи, СписокПоказателей);
	
	ФИОДиректора       = СведенияДатаПодписи.ФИОРук;
	ФИОГлавБуха        = СведенияДатаПодписи.ФИОБух;
	ИННДиректора       = СведенияДатаПодписи.ИННРук;
	ИННГлавБуха        = СведенияДатаПодписи.ИННБух;
	
	// преобразуем ФИО в ИОФ :)
	ПозицияТочки = Найти(ФИОДиректора, ".");
	Если ПозицияТочки > 0 Тогда
		ФИОДиректора = Сред(ФИОДиректора, ПозицияТочки - 1) + " " + Лев(ФИОДиректора, ПозицияТочки - 3);	
	КонецЕсли;
	
	// преобразуем ФИО в ИОФ
	ПозицияТочки = Найти(ФИОГлавБуха, ".");
	Если ПозицияТочки > 0 Тогда
		ФИОГлавБуха = Сред(ФИОГлавБуха, ПозицияТочки - 1) + " " + Лев(ФИОГлавБуха, ПозицияТочки - 3);	
	КонецЕсли;
	
	ЗаполнитьПоказательНаСервере("HBUH",  ФИОГлавБуха, Форма, "СлужебныеДанные");		
	ЗаполнитьПоказательНаСервере("HBOS",  ФИОДиректора,  Форма, "СлужебныеДанные");		
	ЗаполнитьПоказательНаСервере("HBUH",  ФИОГлавБуха, Форма, "ПереченьТаблиц");		
	ЗаполнитьПоказательНаСервере("HBOS",  ФИОДиректора,  Форма, "ПереченьТаблиц");		
	ЗаполнитьПоказательНаСервере("HBUH",  ФИОГлавБуха, Форма, "Таблица1");		
	ЗаполнитьПоказательНаСервере("HBOS",  ФИОДиректора,  Форма, "Таблица1");		
	
	ЗаполнитьПоказательНаСервере("HKBUH", ИННГлавБуха, Форма, "СлужебныеДанные");		
	ЗаполнитьПоказательНаСервере("HKBOS", ИННДиректора,  Форма, "СлужебныеДанные");		
	ЗаполнитьПоказательНаСервере("HKBUH", ИННГлавБуха, Форма, "ПереченьТаблиц");		
	ЗаполнитьПоказательНаСервере("HKBOS", ИННДиректора,  Форма, "ПереченьТаблиц");		
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Таблица1", "HKBOS_",  10, ИННДиректора, Ложь);				
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Таблица1", "HKBUH_",  	10, ИННГлавБуха,  Ложь);			
	
	
	ЗаполнитьПоказательНаСервере("HZB", "Х", Форма, "ПереченьТаблиц");		
	ЗаполнитьПоказательНаСервере("HZB", "Х", Форма, "Таблица5");		
	ЗаполнитьПоказательНаСервере("HZB", "Х", Форма, "Таблица6");		
	ЗаполнитьПоказательНаСервере("HZB", "Х", Форма, "Таблица7");		
	
	ЗаполнитьПоказательНаСервере("HZS", "", Форма, "ПереченьТаблиц");		
	ЗаполнитьПоказательНаСервере("HZS", "", Форма, "Таблица5");		
	ЗаполнитьПоказательНаСервере("HZS", "", Форма, "Таблица6");		
	ЗаполнитьПоказательНаСервере("HZS", "", Форма, "Таблица7");		
	
	ЗаполнитьПоказательНаСервере("HZD", "", Форма, "ПереченьТаблиц");		
	ЗаполнитьПоказательНаСервере("HZD", "", Форма, "Таблица5");		
	ЗаполнитьПоказательНаСервере("HZD", "", Форма, "Таблица7");		
	
	мес = Месяц(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	мес = Формат(мес, "ЧЦ=2; ЧВН=");
	год = Год(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	год = Формат(Год, "ЧГ=0;");
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "ПереченьТаблиц", "HZM_", 2, Мес, Истина,Истина);			
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "ПереченьТаблиц", "HZY_", 4, Год, Ложь);			
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Таблица1", "HZM_", 2, Мес, Истина,Истина);			
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Таблица1", "HZY_", 4, Год, Ложь);			
	
	ЗаполнитьДатуПодписи(Форма);
	
	Форма.Модифицированность = Истина;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьБанковскийСчетПоУмолчанию(Организация)

	Запрос = Новый Запрос("
			|	ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|   	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчетОрганизации
			|	ИЗ
			|   	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
			|	ГДЕ
			|   	Не БанковскиеСчетаОрганизаций.ПометкаУдаления
			|       И Не БанковскиеСчетаОрганизаций.Закрыт
			|       И  БанковскиеСчетаОрганизаций.Владелец = &Организация
			|       И БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств = &Валюта
			|");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Валюта",  Константы.ВалютаРегламентированногоУчета.Получить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		БанковскийСчетОрганизации = Выборка.БанковскийСчетОрганизации;
	Иначе
		БанковскийСчетОрганизации = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
	КонецЕсли;
	Возврат БанковскийСчетОрганизации;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПоказательНаСервере(ИмяОбласти, Значение, Форма, ИмяРазделаПоказателя);

	ТекРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Если ТекРаздел = ИмяРазделаПоказателя Тогда
	
		Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение = Значение;
		
	Иначе	
		
		Форма["СтруктураДанных" + ИмяРазделаПоказателя].Вставить(ИмяОбласти, Значение);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПоказательНаСервере(ИмяОбласти, Форма, ИмяРазделаПоказателя)

	ТекРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Если ТекРаздел = ИмяРазделаПоказателя Тогда
		
		Возврат Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение;
		
	Иначе	
		
		Значение = Неопределено;
		Форма["СтруктураДанных" + ИмяРазделаПоказателя].Свойство(ИмяОбласти, Значение);
		
		Если Значение = Неопределено Тогда
			
			ДанныеПоказателя = Форма.мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента, КодПоказателяПоФорме", ИмяРазделаПоказателя, ИмяОбласти));
			Если ДанныеПоказателя.Количество() > 0
				И (    ДанныеПоказателя[0].ТипДанныхПоказателя = "Ч"
				   ИЛИ ДанныеПоказателя[0].ТипДанныхПоказателя = "Е") Тогда
				Значение = 0;	   
			Иначе
				Значение = "";	
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Значение;
		
	КонецЕсли;	

КонецФункции // ()

// СобратьДанныеТекущегоТаблПоляНаСервере()
//
&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции // СобратьДанныеТекущегоТаблПоляНаСервере()

// СобратьДанныеТекущегоТаблПоляНаКлиенте()
//
&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции // СобратьДанныеТекущегоТаблПоляНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаСервере()

// ОбновитьСтруктуруМногострочногоРазделаНаКлиенте()
//
&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаКлиенте()

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
    Перем ЕстьДуплекс;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация =	СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи			                              = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий					                      = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
				
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
				
			КонецЕсли;
						
		КонецЦикла;
						
	КонецЕсли;
    	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
	КонецЕсли;
	

	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
					
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
									 				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("ДополнительныеДанные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДополнительныеДанные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.ДополнительныеДанные.Очистить();
							СтрокаТаблЗнач.ДополнительныеДанные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].ДополнительныеДанные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
								
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							СтруктураДопСтрок = Новый Структура;
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
								
								СтруктураДопСтрок.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
                                								
							КонецЦикла;
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтруктураДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
								   				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;

	СписокСохранения.Свойство("ЕстьДуплекс", ЕстьДуплекс);
	Если ЕстьДуплекс = Неопределено Тогда
		ЕстьДуплекс = Ложь;
	КонецЕсли;
	СтруктураРеквизитовФормы.ЕстьДуплекс = ЕстьДуплекс;
	Элементы.ЕстьДуплекс.Пометка         = ЕстьДуплекс;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;
	ИмяТекРаздела = "ПереченьТаблиц";
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, 1);
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);

	Модифицированность   = Ложь;
	
КонецПроцедуры // ВосстановитьСохраненныеДанные()

// ВывестиРазделВТабличныйДокументНаКлиенте()
//
&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры // ВывестиРазделВТабличныйДокументНаКлиенте()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры // ВывестиРазделВТабличныйДокументНаСервере()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//  ПерерисоватьСтроки - Истина из процедуры удаления доп. строк, для перерисовки областей.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = Неопределено)
	Перем ИсходноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
		
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	ПерерисоватьСтроки = (НЕ ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы);
		
	Раздел = Форма[ТекТабличноеПолеИмя];
	
	КолонкиГруппы = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];		
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе");
		
		КолонкиМногострочныхРазделов = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов;
		ИмяОбластиПечати			 = "";
		
		ДанныеОПечатиОтчета = Форма.мДеревоСтраницОтчета.ПолучитьЭлементы();
		Для Сч = 1 По ДанныеОПечатиОтчета.Количество() Цикл
			ДанныеОПечатиСтраницы = ДанныеОПечатиОтчета[Сч - 1];	
			Если ДанныеОПечатиСтраницы.ИмяСтраницы = ТекущаяСтраница Тогда
				ИмяОбластиПечати = ДанныеОПечатиСтраницы.ИмяОбластиТабличногоПоля;	
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		
		РегламентированнаяОтчетностьВызовСервера.ВывестиРазделВТабличныйДокументНаСервере(НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, КолонкиМногострочныхРазделов, ИмяОбластиПечати);
		
		Форма[ТекТабличноеПолеИмя] = Раздел;
		ТекТабличноеПоле           = Форма[ТекТабличноеПолеИмя];
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
		
		Для Каждого КолонкаТаблицыИмя Из КолонкиГруппы Цикл
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;
				
				ОбластьЯчейкиТаблицы          = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
	
	СтрокВГруппе 		= СтруктураГруппы.Количество();
	СтрокВТабличномПоле = Форма.мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы];
	КоличествоСтрок = МАКС(СтрокВГруппе, СтрокВТабличномПоле);
	Если ИмяКолонкиНомера <> Неопределено Тогда
		
		Для НомерСтрокиВФормеТаблицы = 1 По КоличествоСтрок Цикл
			
			НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
			ИмяЯчейки                	= ИмяКолонкиНомера + "_" + НомерСтрокиВФормеТаблицыСтр;
			ОбластьЯчейкиТаблицы     	= ТекТабличноеПоле.Области[ИмяЯчейки];
	
			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				ОбластьЯчейкиТаблицы.Значение = НомерСтрокиВФормеТаблицы + НомерПервойСтроки - 1;
			Иначе
				ОбластьЯчейкиТаблицы.Текст = НомерСтрокиВФормеТаблицы + НомерПервойСтроки - 1;
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	
	
КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

&НаКлиенте
Процедура СохранитьОтчет(Команда)
		
	СохранитьНаКлиенте();
		
КонецПроцедуры

// СохранитьНаКлиенте()
//
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт

	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, Автосохранение) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(Автосохранение, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
				
КонецПроцедуры // СохранитьНаКлиенте()

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// ПередСохранением()
//
&НаСервере
Функция ПередСохранением(Автосохранение, НаимТекРаздела)
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Возврат Сохранить(Автосохранение, НаимТекРаздела);
		
КонецФункции // ПередСохранением()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
&НаСервере
Функция Сохранить(Автосохранение = Ложь, НаимТекРаздела) Экспорт	
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
			
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, Автосохранение, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета 			 = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета 		 = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;

	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ТаблЗнач.Колонки.Найти("ДополнительныеДанные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("ДополнительныеДанные");
				ТаблЗнач.Колонки.Добавить("ДополнительныеДанные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.ДополнительныеДанные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДополнительныеДанные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение Цикл
														
						СтруктураДанныхДопСтрок.Вставить(ЭлСтруктуры.Ключ, ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
					
					Ном = Ном + 1;
			
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;

		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	СписокСохранения.Вставить("ЕстьДуплекс", СтруктураРеквизитовФормы.ЕстьДуплекс);
	
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1';uk='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
			
	Модифицированность   = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Возврат Истина;

КонецФункции // Сохранить()

&НаСервере
Функция ПреобразоватьМассивВТаблицу(ИмяКолонки, Массив)
	
	Таблица =  Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить(ИмяКолонки);
	Для Сч = 1 По Массив.Количество() Цикл
		Таблица.Добавить();
	КонецЦикла;
	Если ЗначениеЗаполнено(Массив)
		И Массив.Количество() > 0 Тогда
	
		Таблица.ЗагрузитьКолонку(Массив, ИмяКолонки);
	
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоказателиОтчетаНаСервере()

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			ЗаполнитьПоказателиЗначениямиПоУмолчанию(Раздел.ИмяСтраницы);
			
		КонецЕсли;
		
		Если Раздел.ИмяСтраницы = "ПриложениеПН" Тогда
			Для Каждого Страница Из ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]] Цикл
		   		Если Страница.ДополнительныеДанные.Количество() = 0 Тогда
					Страница.ДополнительныеДанные.Очистить();
					Страница.ДополнительныеДанные.Добавить(Новый Структура);
					Страница.ДополнительныеДанные[0].Пометка = Ложь;
				КонецЕсли;
				
		   		Если Страница.Данные.Количество() = 0 Тогда
					Страница.Данные.Очистить();
					Страница.Данные.Добавить(Новый Структура);
					Страница.Данные[0].Пометка = Ложь;
				КонецЕсли;
				
		   		Если Страница.ДанныеДопСтрок.Количество() = 0 Тогда
					Страница.ДанныеДопСтрок.Очистить();
					Страница.ДанныеДопСтрок.Добавить(Новый Структура);
					Страница.ДанныеДопСтрок[0].Пометка = Ложь;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры // ЗаполнитьПустыеСтруктурыДанных()

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры // СохранитьДеревоНастройкиСтраниц()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы <> Неопределено Тогда 
		
		Если ЗавершениеРаботы И Модифицированность Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ЗавершениеРаботы <> Неопределено Тогда
		
		Если ЗавершениеРаботы Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
		
КонецПроцедуры // ПриЗакрытии()

// ПриЗакрытииНаСервере()
//
&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("РегламентированнаяОтчетность", "ЕстьДуплекс", СтруктураРеквизитовФормы.ЕстьДуплекс);
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытииНаСервере()

// ПоказатьСтраницуМногостраничногоРазделаНаКлиенте()
//
&НаКлиенте
Процедура ПоказатьСтраницуМногостраничногоРазделаНаКлиенте(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	
	ПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРазделаНаКлиенте()

// ПоказатьСтраницуМногостраничногоРазделаНаСервере()
//
&НаСервере
Процедура ПоказатьСтраницуМногостраничногоРазделаНаСервере(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	
	ПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
		
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРазделаНаСервере()

// ПоказатьСтраницуМногостраничногоРаздела()
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСтраницуМногостраничногоРаздела(Форма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьСтраницуМногостраничногоРаздела(Форма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	//Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
	//	#Если НаКлиенте Тогда
	//		Форма.ИзменитьЦветЯчеекНаКлиенте();
	//	#Иначе
	//		Форма.ИзменитьЦветЯчеекНаСервере();
	//	#КонецЕсли
	//КонецЕсли;
	
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

&НаКлиенте
Процедура ИзменитьЦветЯчеекНаКлиенте() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры // ИзменитьЦветЯчеекНаКлиенте()

&НаСервере
Процедура ИзменитьЦветЯчеекНаСервере() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры // ИзменитьЦветЯчеекНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьЦветЯчеек(Форма)

	//КодОперации = СокрЛП(Форма.ТабличныйДокумент.Области.П000200007003.Значение);
	//
	//Если КодОперации = "1011705" ИЛИ КодОперации = "1011707" Тогда
	//	
	//	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
	//		ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200006003");
	//	Иначе	
	//		ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000200006003");
	//	КонецЕсли;
	//
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200008003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200009003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200010003");
	//	
	//Иначе	
	//	
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200006003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200008003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200009003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200010003");
	//	
	//	Форма.ТабличныйДокумент.Области.П000200008003.Значение = "";
	//	Форма.ТабличныйДокумент.Области.П000200009003.Значение = "";
	//	Форма.ТабличныйДокумент.Области.П000200010003.Значение = "";
	//			
	//КонецЕсли;
		
КонецПроцедуры // ИзменитьЦветЯчеек()

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьВариантЗаполненияЯчейки(Форма, НовыйВариант, Показатель = Неопределено)
    		
	ИмяТекущейСтраницыПанели = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
    		
	#Если НаКлиенте Тогда
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
	#Иначе
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
	#КонецЕсли
	
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть;
	Если Показатель = Неопределено Тогда
		ИмяПоказателя   = ТекущаяОбласть.Имя;
	Иначе
		ИмяПоказателя = Показатель;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.НайтиСтроки(Новый Структура("КодПоказателя", ИмяПоказателя));
	Если НайденнаяСтрока.Количество() > 0 Тогда
		НайденнаяСтрока = НайденнаяСтрока[0];
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	УстановитьЦветФонаЯчейки(Форма, ИмяПоказателя, НовыйВариант);
		
КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// ОбновитьПеременныеМодуляНаСервере()
//
&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции // ОбновитьПеременныеМодуляНаСервере()

// ОбновитьПеременныеМодуляНаКлиенте()
//
&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции // ОбновитьПеременныеМодуляНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(Форма, ИмяПоказателя, ЗначениеПоказателя)
	
	ИзмененияПроизошли = Ложь;
	
	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;
	
	////Если (ИмяПоказателя = "Сумма30Раздел1")
	//// Или (ИмяПоказателя = "Сумма40Раздел1")
	//// Или (ИмяПоказателя = "Сумма50Раздел1")
	//// Или (ИмяПоказателя = "Сумма60Раздел1") Тогда
	////	Форма.мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	////	ИзмененияПроизошли = Истина;
	////ИначеЕсли ИмяПоказателя = "КБКРаздел1" Тогда
	////	Форма.мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	////	ИзмененияПроизошли = Истина;
	////ИначеЕсли ИмяПоказателя = "ОКАТОРаздел1" Тогда
	////	Форма.мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	////	ИзмененияПроизошли = Истина;
	////КонецЕсли;

	Возврат ИзмененияПроизошли;
	
КонецФункции // ОбновитьПеременныеМодуля()

// ОчиститьТабличноеПолеНаКлиенте()
//
&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры // ОчиститьТабличноеПолеНаКлиенте()

// ОчиститьТабличноеПолеНаСервере()
//
&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры // ОчиститьТабличноеПолеНаСервере()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	Если  ВыбТабличноеПолеИмя = "Таблица1" Тогда
		HSPODU = ВыбТабличноеПоле.Области["HSPODU"].Значение;
	КонецЕсли;
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	// Непосредственно очищаем ячейки табличного документа. РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле делает то же самое
	// Повторно, так как в результате расчета многостраничного многострочного блока заполняются итоговые ячейки, 
	// в арифметике которых есть показатели не из многострочного блока
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		Если Найти(Врег(ТекущаяОбласть.Имя), ВРег("Штампик")) > 0  Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;

	ЗаполнитьСведенияОбОрганизации(Форма);
	
	Если  ВыбТабличноеПолеИмя = "Таблица1" Тогда
		ВыбТабличноеПоле.Области["HSPODU"].Значение = HSPODU;
	КонецЕсли;

	
КонецПроцедуры // ОчиститьТабличноеПоле()

// РасчетНаКлиенте()
//
&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры // РасчетНаКлиенте()

// РасчетНаСервере()
//
&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры // РасчетНаСервере()

// РАСЧЕТ()
// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет
// Параметры:
//  ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//
&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", ОбластьИмя = "")
	Перем ТаблицаБлока;
	
	Если (Форма.СтруктураРеквизитовФормы.мРежимПечати) Тогда
		Возврат; // служебный вызов в процессе печати
	КонецЕсли;
	
	Если (Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
		Возврат; // отключен режим авторасчета
	КонецЕсли;

	// обновим данные многострочных групп
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда

		ИдГрупп = Новый Структура;
		ИдГрупп.Вставить("мИдГруппы5", Форма.СтруктураРеквизитовФормы.мИдГруппы5);
		ИдГрупп.Вставить("мИдГруппы6", Форма.СтруктураРеквизитовФормы.мИдГруппы6);
		ИдГрупп.Вставить("мИдГруппы7", Форма.СтруктураРеквизитовФормы.мИдГруппы7);
		
		ИмяГруппыМассив =  ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяСтраницыПанели, , ИдГрупп);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
			РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
		КонецЦикла;
		
	КонецЕсли;
	
	R01G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R011G3", Форма, "Таблица1"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R012G3", Форма, "Таблица1"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R013G3", Форма, "Таблица1"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R014G3", Форма, "Таблица1"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R015G3", Форма, "Таблица1"));
	ЗаполнитьПоказательНаСервере("R01G3", R01G3, Форма, "Таблица1");	
	
	R02G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R021G3", Форма, "Таблица1")) 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R022G3", Форма, "Таблица1"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R023G3", Форма, "Таблица1"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R024G3", Форма, "Таблица1"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R025G3", Форма, "Таблица1"));
	ЗаполнитьПоказательНаСервере("R02G3", R02G3, Форма, "Таблица1");	
								  
	R03G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R031G3", Форма, "Таблица1")) 
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R032G3", Форма, "Таблица1"))
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R033G3", Форма, "Таблица1"))
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R034G3", Форма, "Таблица1"))
									+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R035G3", Форма, "Таблица1"));
	ЗаполнитьПоказательНаСервере("R03G3", R03G3, Форма, "Таблица1");	
	
	R041G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04101G3", Форма, "Таблица1")) 
								      + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04102G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04103G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04104G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04105G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04106G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04107G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04108G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04109G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04110G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04111G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04112G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04113G3", Форма, "Таблица1"));
	ЗаполнитьПоказательНаСервере("R041G3", R041G3, Форма, "Таблица1");	
									  
	R043G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04301G3", Форма, "Таблица1")) 
								      + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04302G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04303G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04304G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04305G3", Форма, "Таблица1"));
	ЗаполнитьПоказательНаСервере("R043G3", R043G3, Форма, "Таблица1");	
	
	R04G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R041G3", Форма, "Таблица1")) 
									   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R042G3", Форма, "Таблица1"))
									   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R043G3", Форма, "Таблица1"));
	ЗаполнитьПоказательНаСервере("R04G3", R04G3, Форма, "Таблица1");	
									   
									
	R051G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05101G3", Форма, "Таблица1")) 
								      + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05102G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05103G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05104G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05105G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05106G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05107G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05108G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05109G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05110G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05111G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05112G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05113G3", Форма, "Таблица1"));
	ЗаполнитьПоказательНаСервере("R051G3", R051G3, Форма, "Таблица1");	
									  
	R053G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05301G3", Форма, "Таблица1")) 
								      + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05302G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05303G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05304G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05305G3", Форма, "Таблица1"));
	ЗаполнитьПоказательНаСервере("R053G3", R053G3, Форма, "Таблица1");	
									  
	R05G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R051G3", Форма, "Таблица1")) 
									   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R052G3", Форма, "Таблица1"))
									   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R053G3", Форма, "Таблица1"));
	ЗаполнитьПоказательНаСервере("R05G3", R05G3, Форма, "Таблица1");	
									   
	R06G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R03G3", Форма, "Таблица1")) 
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04G3", Форма, "Таблица1"))
									- ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05G3", Форма, "Таблица1"));
	ЗаполнитьПоказательНаСервере("R06G3", R06G3, Форма, "Таблица1");	
									
	R0601G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R031G3", Форма, "Таблица1")) 
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R035G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04101G3", Форма, "Таблица1"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04109G3", Форма, "Таблица1"))
								 	  - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05101G3", Форма, "Таблица1"))
									  - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05109G3", Форма, "Таблица1"));
	ЗаполнитьПоказательНаСервере("R0601G3", R0601G3, Форма, "Таблица1");	
									
	R0602G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04102G3", Форма, "Таблица1")) 
								      + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04110G3", Форма, "Таблица1"))
								 	  - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05102G3", Форма, "Таблица1"))
									  - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05110G3", Форма, "Таблица1"));
	ЗаполнитьПоказательНаСервере("R0602G3", R0602G3, Форма, "Таблица1");	
									
	R0603G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04103G3", Форма, "Таблица1")) 
								      + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04111G3", Форма, "Таблица1"))
								 	  - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05103G3", Форма, "Таблица1"))
									  - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05111G3", Форма, "Таблица1"));
	ЗаполнитьПоказательНаСервере("R0603G3", R0603G3, Форма, "Таблица1");	
									  
	R0604G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R032G3", Форма, "Таблица1")) 
								      + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04104G3", Форма, "Таблица1"))
								 	  - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05104G3", Форма, "Таблица1"));
	ЗаполнитьПоказательНаСервере("R0604G3", R0604G3, Форма, "Таблица1");	
									  
	R0605G3  = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R033G3", Форма, "Таблица1")) 
								      + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04105G3", Форма, "Таблица1"))
								 	  - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05105G3", Форма, "Таблица1"));
	ЗаполнитьПоказательНаСервере("R0605G3", R0605G3, Форма, "Таблица1");	
									  
	R0606G3   = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R034G3", Форма, "Таблица1")) 
								      + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04106G3", Форма, "Таблица1"))
								 	  - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05106G3", Форма, "Таблица1"));
	ЗаполнитьПоказательНаСервере("R0606G3", R0606G3, Форма, "Таблица1");	
									  
									  
	R0607G3   = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04107G3", Форма, "Таблица1")) 
								      + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04112G3", Форма, "Таблица1"))
								 	  - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05107G3", Форма, "Таблица1")) 
								      - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05112G3", Форма, "Таблица1"));
	ЗаполнитьПоказательНаСервере("R0607G3", R0607G3, Форма, "Таблица1");	
									  
	R0608G3   = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04108G3", Форма, "Таблица1")) 
								      + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04113G3", Форма, "Таблица1"))
								 	  - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05108G3", Форма, "Таблица1")) 
								      - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05113G3", Форма, "Таблица1"));
	ЗаполнитьПоказательНаСервере("R0608G3", R0608G3, Форма, "Таблица1");	

	R0609G3   = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04301G3", Форма, "Таблица1")) 
								 	  - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05301G3", Форма, "Таблица1"));
	ЗаполнитьПоказательНаСервере("R0609G3", R0609G3, Форма, "Таблица1");	
									  
	R0610G3   = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04302G3", Форма, "Таблица1")) 
								 	  - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05302G3", Форма, "Таблица1"));
	ЗаполнитьПоказательНаСервере("R0610G3", R0610G3, Форма, "Таблица1");	
									  
	R0611G3   = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04303G3", Форма, "Таблица1")) 
								 	  - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05303G3", Форма, "Таблица1"));
	ЗаполнитьПоказательНаСервере("R0611G3", R0611G3, Форма, "Таблица1");	
									  
	R0612G3   = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04304G3", Форма, "Таблица1")) 
								 	  - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05304G3", Форма, "Таблица1"));
	ЗаполнитьПоказательНаСервере("R0612G3", R0612G3, Форма, "Таблица1");	
									  
	R0613G3   = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04305G3", Форма, "Таблица1")) 
								 	  - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R05305G3", Форма, "Таблица1"));
	ЗаполнитьПоказательНаСервере("R0613G3", R0613G3, Форма, "Таблица1");	
									  
	R0614G3   = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R042G3", Форма, "Таблица1")) 
								 	  - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R052G3", Форма, "Таблица1"));
	ЗаполнитьПоказательНаСервере("R0614G3", R0614G3, Форма, "Таблица1");	
									  
	СтруктураГруппы5 = Форма[Форма.СтруктураРеквизитовФормы.мИдГруппы5];
	СтруктураГруппы6 = Форма[Форма.СтруктураРеквизитовФормы.мИдГруппы6];
	СтруктураГруппы7 = Форма[Форма.СтруктураРеквизитовФормы.мИдГруппы7];
	
	R005G3 = ?(ТаблицаМногострочнойЧастиПуста(СтруктураГруппы5, Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы5]), "", "-");
	R006G3 = ?(ТаблицаМногострочнойЧастиПуста(СтруктураГруппы6, Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы6]), "", "-");
	R007G3 = ?(ТаблицаМногострочнойЧастиПуста(СтруктураГруппы7, Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы7]), "", "-");
	ЗаполнитьПоказательНаСервере("R005G3", R005G3, Форма, "ПереченьТаблиц");	
	ЗаполнитьПоказательНаСервере("R006G3", R006G3, Форма, "ПереченьТаблиц");	
	ЗаполнитьПоказательНаСервере("R007G3", R007G3, Форма, "ПереченьТаблиц");	
	
	ЗаполнитьПоказательНаСервере("R01G17", СтруктураГруппы6.Итог("T6T1RXXXXG17"), Форма, "Таблица6");	
	ЗаполнитьПоказательНаСервере("R01G18", СтруктураГруппы6.Итог("T6T1RXXXXG18"), Форма, "Таблица6");	
	ЗаполнитьПоказательНаСервере("R01G19", СтруктураГруппы6.Итог("T6T1RXXXXG19"), Форма, "Таблица6");	
	ЗаполнитьПоказательНаСервере("R01G20", СтруктураГруппы6.Итог("T6T1RXXXXG20"), Форма, "Таблица6");	
	ЗаполнитьПоказательНаСервере("R01G21", СтруктураГруппы6.Итог("T6T1RXXXXG21"), Форма, "Таблица6");	
	
КонецПроцедуры // Расчет()

&НаКлиентеНаСервереБезКонтекста
Функция ТаблицаМногострочнойЧастиПуста(СтруктураГруппы, СтруктураКолонок)

	Если СтруктураГруппы.Количество() > 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаГруппы из СтруктураГруппы Цикл
		
		Для каждого Колонка Из СтруктураКолонок Цикл
			
			Если Найти(Колонка, "НомерСтроки") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаГруппы[Колонка]) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;		
	
	КонецЦикла;

	Возврат Истина;

КонецФункции

// ОкруглитьЧислоПоФормату(Форма, )
//
&НаКлиентеНаСервереБезКонтекста
Функция ОкруглитьЧислоПоФормату(Форма, ИсходноеЧисло)
	
	Перем Делитель;
	
	Если Форма.СоответствиеЕдиницыИзмеренияДелителю.Свойство("Окр" + СтрЗаменить(Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения, " ", ""), Делитель) Тогда
		
		Возврат Окр(ИсходноеЧисло / Делитель, Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения) * Делитель;
		
	КонецЕсли;
	
КонецФункции // ОкруглитьЧислоПоФормату(Форма, )

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект), НСтр("ru='Удалить текущую страницу?';uk='Видалити поточну сторінку?'"), РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
			
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
    
    КопияТекущиеДанные = ТекущиеДанные;
    
    ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
    
    Если ТекущиеДанные = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
        Возврат;
    КонецЕсли;
    
    ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
    Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
        ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
        СтруктураРеквизитовФормы.НомерТекущейСтраницы = ТекущаяСтраницаРазделаПослеУдаления.КолонкаНомерСтраницыРазделаОтчета;
    КонецЕсли;
    
    УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
    
    ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
	    
	    СтраницаРаздела.КолонкаРазделыОтчета              = НСтр("ru='Стр. ';uk='Стр. '") + НомерСтраницы;
	    СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
	    
	    НомерСтраницы = НомерСтраницы + 1;
	    
	КонецЦикла;
    
    Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
        Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеСтраницы(Команда)
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	Если ТекущиеДанные.ПолучитьРодителя() = Неопределено
	   И ТекущиеДанные.ПолучитьЭлементы().Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Если ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() <= 1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийРаздел" + ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
			
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз <> 0 И ЭтаФорма[мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ИмяТекущейСтраницыПанели;
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.';uk='В розділі ""%1"" максимальна кількість екземплярів сторінок дорівнює "
"%2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = ЭтаФорма[ИмяТекТабличногоПоля];
		
	// Сначала сохраним данные текущей страницы.
	СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТекТабличногоПоля);

	// Для страниц многостраничного раздела, содержащих многострочную часть,
	// дополнительно сохраняем данные многострочной части.
	СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(ЭтаФорма, ИмяТекущейСтраницыПанели);	
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));
	
	Если СтрТаблицаСтраницы.Количество() = 0 Тогда
		Возврат;
	Иначе
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
	КонецЕсли;
	
	ОпределитьПредставлениеДопСтраниц(ИмяТекущейСтраницыПанели);
	
	Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
		СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
	Иначе
		СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
	КонецЕсли;
	Если (ИмяТекущейСтраницыПанели = "Декларация") Тогда
		
		Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
			СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
		Иначе
			СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
		КонецЕсли;
		
	КонецЕсли;
	
	// Добавляем новую страницу
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	
	// Присваиваем представление по умолчанию
	СтрНоваяСтраница.Представление = НСтр("ru='Стр. ';uk='Стр. '") + ТаблицаСтраницРаздела.Количество();
	СтрНоваяСтраница.АвтоматическоеПредставление = Истина;
	
	// Ставим признак активной страницы
	СтрНоваяСтраница.АктивнаяСтраница = Истина;
	
	ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели);
	
	Модифицированность = Истина;
			
КонецПроцедуры // ВставитьДополнительнуюСтраницуНаСервере()

&НаСервере
Процедура ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели)
	
	ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
		
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // ПослеДобавленияДопСтрНаСервере()

&НаСервере
Процедура ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели)
	
	Если ИмяТекущейСтраницыПанели = "Декларация" Тогда
		ИзменитьЦветЯчеекНаСервере();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
		
КонецПроцедуры // ПослеВставкиДополнительнойСтраницыНаСервере()

&НаСервере
Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели)
	
	//итоговые ячейки не очистились - необходимо провести расчет
	//для этого сохраним данные страницы
	РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);
	
КонецПроцедуры // СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере()

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	РасчетНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
КонецПроцедуры // УдалитьДополнительнуюСтраницуНаСервере()

// ДобавитьСтроку()
//
&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		
		ВставитьДополнительнуюСтрокуНаСервере();
		
	#Иначе
		
		ВставитьДополнительнуюСтрокуНаКлиенте();
		
	#КонецЕсли
	
КонецПроцедуры // ДобавитьСтроку()

// УдалитьСтроку()
//
&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];

	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.';uk='Не обрано строку багаторядкового розділу, що видаляється'");
	
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;

	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Удалить выбранную строку?%1(Внимание! Данная операция необратима)';uk='Вилучити вибраний рядок?%1(Увага! Дана операція необоротна)'"), Символы.ПС), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    #Если ВебКлиент Тогда
        УдалитьДополнительнуюСтрокуНаСервере();
    #Иначе
        УдалитьДополнительнуюСтрокуНаКлиенте();
    #КонецЕсли
	
КонецПроцедуры // УдалитьСтроку()

&НаСервере
Процедура ВставитьДополнительнуюСтрокуНаСервере()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // ВставитьДополнительнуюСтрокуНаСервере()

&НаКлиенте
Процедура ВставитьДополнительнуюСтрокуНаКлиенте()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // ВставитьДополнительнуюСтрокуНаКлиенте()

// Создает новую строку многострочного раздела.
// Процедура вставляет строку в многострочный блок.
//
// Параметры:
//  Форма          - ссылка на форму отчета
//  ИмяГруппыБлока - имя группы, в том случае, если необходимо вставить строки в процедурах автозаполнения, без фокусировок.
//  СпециальноеДобавление - режим добавления строк по нестандартному алгоритму, когда в правой части распологаются данные.
//  ИмяКолонкиНомера - имя колонки, в которой необходимо проставлять номер при вставки строки.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ИмяГруппыБлока = Неопределено, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = 1) Экспорт
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	Если ИмяГруппыБлока = Неопределено Тогда
		// Сначала выполним проверку на активную страницу панели формы,
		// которая содержит многострочный раздел
			
		ТекущаяСтраница = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		ТекТабличноеПоле = Форма.ТабличныйДокумент;

		ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
		#Если НаКлиенте Тогда
			ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
		#Иначе
			ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
		#КонецЕсли

		Если ИмяГруппы = Неопределено Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.';uk='Не обрано багаторядковий розділ, у який необхідно додати рядок.'");

			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
	Иначе
		ИмяГруппы = ИмяГруппыБлока;
	КонецЕсли;

	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	
	КолонкиГруппы = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];
	
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	ИмяПервойКолонки = КолонкиГруппы[0];
	ИмяПервойЯчейкиПоследнейСтроки = ИмяПервойКолонки + "_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	НазначитьИмяОбластиМЧ = Ложь;
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	Если Найти(ВставляемаяОбласть.Имя, "МногострочнаяЧасть") > 0 Тогда
		НазначитьИмяОбластиМЧ = Истина;
		ИмяМногострочнойЧасти = ВставляемаяОбласть.Имя;
	КонецЕсли;

	Если СпециальноеДобавление Тогда
		
	Иначе
				
		// добавляем в таблицу новую строку
		РегламентированнаяОтчетностьВызовСервера.ВставитьОбластьВТабличныйДокумент(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	Если НазначитьИмяОбластиМЧ Тогда
		ТекТабличноеПоле.Область(НомерНижнЯчейкиОбласти + 1, , НомерНижнЯчейкиОбласти + (НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти) + 1, ).Имя = "";
		ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, ).Имя = ИмяМногострочнойЧасти;
	КонецЕсли;

	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	
	Для Каждого ИмяКолонки ИЗ КолонкиГруппы Цикл
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
			Если ИмяКолонкиНомера <> Неопределено Тогда
				Если ИмяКолонкиНомера = ИмяКолонки Тогда
					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ОбластьЯчейки.Значение = КолСтрок + НомерПервойСтроки;
					Иначе
						ОбластьЯчейки.Текст = КолСтрок + НомерПервойСтроки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Если ИмяГруппыБлока = Неопределено Тогда

		// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
		// Определяем текущую область таблицы
		
		//ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;
		ИмяТекущейОбласти = ИмяПервойКолонки + "_" + КолСтрокСтр1;

		Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
				
		// установим фокус на поле табличн. документа
		ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
		
	КонецЕсли;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры // ВставитьДополнительнуюСтроку()

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // УдалитьДополнительнуюСтрокуНаСервере()

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // УдалитьДополнительнуюСтрокуНаКлиенте()

// Удаляет строку многострочного раздела формы.
&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = 1) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
    	
	ТекущаяСтраница = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	ТекТабличноеПоле = Форма.ТабличныйДокумент;

	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	ИмяЯчейки	   = ТекущаяОбласть.Имя;
	
	#Если НаКлиенте Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли
	
	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы  = Форма[СтруктураГруппы];
   	КолонкиГруппы    = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];
	ИмяПервойКолонки = КолонкиГруппы[0];
	
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		
		//ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + Формат(НомУдаляемойСтроки, "ЧГ=0");
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяПервойКолонки + "_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		МногострочностьВРазделе = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ДанныеФормыКоллекция") Тогда
			ИмяОбластиМнгЧ = МногострочностьВРазделе.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].Область;
		КонецЕсли;
		// Найдем координаты области, для последующего восстановления.

		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;

		Если СпециальноеДобавление Тогда
			
		Иначе
					
			РегламентированнаяОтчетностьВызовСервера.УдалитьОбластьИзТабличногоДокумента(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
			Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
			
		КонецЕсли;
		// Восстановим область.
		ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр - 1];

				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				
				Для Каждого КолонкаИмя ИЗ КолонкиГруппы Цикл
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ИмяКолонкиНомера <> Неопределено Тогда
							Если ИмяКолонкиНомера = КолонкаИмя Тогда
								// обновляем порядковый номер строки
								
								НовыйПорядковыйНомер = НСтр - 1 + НомерПервойСтроки - 1;
								
								Если ОбластьСдвинутойЯчейки.СодержитЗначение = Истина Тогда
									ОбластьСдвинутойЯчейки.Значение = НовыйПорядковыйНомер;
								Иначе
									ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1 + НомерПервойСтроки - 1;
			
			Для Каждого КолонкаТаблицыИмя ИЗ КолонкиГруппы Цикл
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					Если ИмяКолонкиНомера <> Неопределено Тогда
						Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
							// обновляем порядковый номер строки
							СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла;
		
		КонецЦикла;

		// Данные в многострочном блоке обновляются в декларациях!
		// Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	//ИмяТекущейОбласти = ИмяГруппы + "01_" + Формат(НомТекущейСтроки, "ЧГ=0");
	ИмяТекущейОбласти = ИмяПервойКолонки + "_" + Формат(НомТекущейСтроки, "ЧГ=0");
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];

	Форма.Модифицированность = Истина;
	
	#Если НаКлиенте Тогда
		Форма.РасчетНаКлиенте(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#Иначе
		Форма.РасчетНаСервере(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#КонецЕсли

КонецПроцедуры // УдалитьДополнительнуюСтроку()
		
&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки 			 = Область.Имя;
	НаименованиеТекЛиста = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
			
	Если Врег(ЛЕВ(ИмяЯчейки, 5)) = "HTIN_" Тогда
		
		Если НЕ НаименованиеТекЛиста = "ПереченьТаблиц" Тогда
			Возврат;
		КонецЕсли;
		
		Значение = СтруктураДанныхСлужебныеДанные.HTIN;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводПоказателяВПолеТабличногоДокументЗавершение",
													   ЭтаФорма, Новый Структура("ИмяЯчейки, ИмяСтраницы,
																				 |ИмяЯчейкиКвадратов, ИмяСтраницыКвадратов, 
																				 |Размерность, ДополнитьЗначение, НольКакНоль", 
																				 "HTIN",  "СлужебныеДанные",
																				 "HTIN_", НаименованиеТекЛиста,
																				 10, Ложь, Неопределено));
		
		ПоказатьВводСтроки(ОписаниеОповещения,Значение, НСтр("ru='Введите значение';uk='Введіть значення'"), 10);
		
	ИначеЕсли Врег(ЛЕВ(ИмяЯчейки, 6)) = "HTIN1_" Тогда
		
		Если НЕ НаименованиеТекЛиста = "ПереченьТаблиц" Тогда
			Возврат;
		КонецЕсли;
		
		Значение = СтруктураДанныхСлужебныеДанные.HTIN1;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводПоказателяВПолеТабличногоДокументЗавершение",
													   ЭтаФорма, Новый Структура("ИмяЯчейки, ИмяСтраницы,
																				 |ИмяЯчейкиКвадратов, ИмяСтраницыКвадратов, 
																				 |Размерность, ДополнитьЗначение, НольКакНоль", 
																				 "HTIN1",  "СлужебныеДанные",
																				 "HTIN1_", НаименованиеТекЛиста,
																				 10, Ложь, Неопределено));
		
		ПоказатьВводСтроки(ОписаниеОповещения,Значение, НСтр("ru='Введите значение';uk='Введіть значення'"), 10);
		
	ИначеЕсли Врег(ИмяЯчейки) = "HKBOS"
		  ИЛИ Врег(ИмяЯчейки) = "HKBUH" Тогда
		
		Если НЕ НаименованиеТекЛиста = "ПереченьТаблиц" Тогда
			Возврат;
		КонецЕсли;
		
		Значение = СтруктураДанныхСлужебныеДанные[ИмяЯчейки];
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводПоказателяВПолеТабличногоДокументЗавершение",
													   ЭтаФорма, Новый Структура("ИмяЯчейки, ИмяСтраницы,
																				 |ИмяЯчейкиКвадратов, ИмяСтраницыКвадратов, 
																				 |Размерность, ДополнитьЗначение, НольКакНоль", 
																				 ИмяЯчейки,  "СлужебныеДанные",
																				 ИмяЯчейки + "_", ,
																				 10, Ложь, Неопределено));
		
		ПоказатьВводСтроки(ОписаниеОповещения,Значение, НСтр("ru='Введите значение';uk='Введіть значення'"), 10);
		
		
	ИначеЕсли Врег(ИмяЯчейки) = "HNAME"
		  ИЛИ  Врег(ИмяЯчейки) = "HBOS" 
		  ИЛИ  Врег(ИмяЯчейки) = "HBUH" Тогда
		
		Если НЕ НаименованиеТекЛиста = "ПереченьТаблиц" Тогда
			Возврат;
		КонецЕсли;
		
		
		Значение = СтруктураДанныхСлужебныеДанные[ИмяЯчейки];
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводПоказателяВПолеТабличногоДокументЗавершение",
													   ЭтаФорма, Новый Структура("ИмяЯчейки, ИмяСтраницы,
																				 |ИмяЯчейкиКвадратов, ИмяСтраницыКвадратов, 
																				 |Размерность, ДополнитьЗначение, НольКакНоль", 
																				 ИмяЯчейки,  "СлужебныеДанные",
																				 , ,
																				 10, Ложь, Неопределено));
		
		ПоказатьВводСтроки(ОписаниеОповещения,Значение, НСтр("ru='Введите значение';uk='Введіть значення'"));
		
	ИначеЕсли ИмяЯчейки = "HZB" Тогда 
		
		Область.Значение  = "X";
		
		Если НаименованиеТекЛиста = "Таблица6" Тогда
		
			ТабличныйДокумент.Области.HZS.Значение  	  = "";
			
		Иначе
			
			ТабличныйДокумент.Области.HZS.Значение  	  = "";
			ТабличныйДокумент.Области.HZD.Значение = "";
		
		КонецЕсли;
		
	ИначеЕсли ИмяЯчейки = "HZS" Тогда 
		
		Область.Значение  = "X";
		
		Если НаименованиеТекЛиста = "Таблица6" Тогда
		
			ТабличныйДокумент.Области.HZB.Значение  	  = "";
			
		Иначе
			
			ТабличныйДокумент.Области.HZB.Значение  	  = "";
			ТабличныйДокумент.Области.HZD.Значение = "";
		
		КонецЕсли;
		
	ИначеЕсли ИмяЯчейки = "HZD" Тогда 
		
		Область.Значение  = "X";
		
		ТабличныйДокумент.Области.HZB.Значение  = "";
		ТабличныйДокумент.Области.HZS.Значение = "";

	ИначеЕсли ЛЕВ(ИмяЯчейки, 2)  = "H0" Тогда 
		
		Если НЕ НаименованиеТекЛиста = "Таблица1" Тогда
			Возврат;
		КонецЕсли;
		
		НовоеЗначение = ?(ЗначениеЗаполнено(Область.Значение), "", "X");		
		
		ТабличныйДокумент.Области.H01.Значение  = "";
		ТабличныйДокумент.Области.H02.Значение = "";
		ТабличныйДокумент.Области.H03.Значение = "";
		
		Область.Значение = НовоеЗначение;
		
	ИначеЕсли Врег(ЛЕВ(ИмяЯчейки, 5)) = "HKVED" Тогда
		
		Если НЕ НаименованиеТекЛиста = "Таблица1" Тогда
			Возврат;
		КонецЕсли;
		
		Значение = СтруктураДанныхТаблица1.HKVED;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводПоказателяВПолеТабличногоДокументЗавершение",
													   ЭтаФорма, Новый Структура("ИмяЯчейки, ИмяСтраницы,
																				 |ИмяЯчейкиКвадратов, ИмяСтраницыКвадратов, 
																				 |Размерность, ДополнитьЗначение, НольКакНоль", 
																				 "HKVED",  НаименованиеТекЛиста,
																				 "HKVED_", НаименованиеТекЛиста,
																				 5, Ложь, Неопределено));
		
		ПоказатьВводСтроки(ОписаниеОповещения,Значение, НСтр("ru='Введите значение';uk='Введіть значення'"), 5);
		
	КонецЕсли;
	
	ПараметрВводаПоля = НайтиСвойстваПоказателя(ИмяЯчейки);
	//создание динамического списка выбора
	Если ПараметрВводаПоля <> Неопределено И ПараметрВводаПоля.ТаблицаЗначений.Количество() > 0 Тогда
		//обработка таблицы значений - удаление вариантов, не проходящих по условиям
		КодПоказателя = ПараметрВводаПоля.Показатель;
		КопироватьДанныеФормы(ПараметрВводаПоля.ТаблицаЗначений, ТЗВыбора);
		
		Модифицированность = Истина;
		ВвестиПоказатель(Элемент, Область, КодПоказателя, Ложь, ПараметрВводаПоля.ТекстПриВыборе, ТЗВыбора, СтандартнаяОбработка);
		
	КонецЕсли;	
	
КонецПроцедуры // ОбработкаВыбораВПолеТабличногоДокумента()

&НаКлиенте		
Процедура ВводПоказателяВПолеТабличногоДокументЗавершение(Значение, ДополнительныеПараметры) Экспорт
			
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки = ДополнительныеПараметры.ИмяЯчейки;
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		
		Значение = Формат(Значение, "ЧГ=0");
		
	КонецЕсли;
	
	ЗаполнитьПоказательНаСервере(ДополнительныеПараметры.ИмяЯчейки, Значение, ЭтаФорма, ДополнительныеПараметры.ИмяСтраницы);

	Если   Врег(ИмяЯчейки) = "HNAME"
	  ИЛИ  Врег(ИмяЯчейки) = "HBOS" 
	  ИЛИ  Врег(ИмяЯчейки) = "HBUH" Тогда
	
		ЗаполнитьПоказательНаСервере(ДополнительныеПараметры.ИмяЯчейки, Значение, ЭтаФорма, "ПереченьТаблиц");	
		ЗаполнитьПоказательНаСервере(ДополнительныеПараметры.ИмяЯчейки, Значение, ЭтаФорма, "Таблица1");
		
	ИначеЕсли Врег(ИмяЯчейки) = "HTIN" Тогда	
		
		ЗаполнитьПоказательНаСервере("TIN", Значение, ЭтаФорма, "СлужебныеДанные");
		
	ИначеЕсли Врег(ИмяЯчейки) = "HKBOS" 
		  ИЛИ Врег(ИмяЯчейки) = "HKBUH" Тогда	
		
		ЗаполнитьПоказательНаСервере(ИмяЯчейки, Значение, ЭтаФорма, "ПереченьТаблиц");	
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ИмяСтраницыКвадратов) Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, ДополнительныеПараметры.ИмяСтраницыКвадратов, ДополнительныеПараметры.ИмяЯчейкиКвадратов, ДополнительныеПараметры.Размерность, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
	КонецЕсли;
	
	// заполнение квадратов на связанных листах
	Если Найти(ДополнительныеПараметры.ИмяЯчейкиКвадратов, "HTIN") > 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Таблица1", ДополнительныеПараметры.ИмяЯчейкиКвадратов, 10, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
	ИначеЕсли Найти(ДополнительныеПараметры.ИмяЯчейкиКвадратов, "HKBOS") > 0
		  ИЛИ Найти(ДополнительныеПараметры.ИмяЯчейкиКвадратов, "HKBUH") > 0 Тогда	
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "ПереченьТаблиц", ДополнительныеПараметры.ИмяЯчейкиКвадратов, 10, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Таблица1", ДополнительныеПараметры.ИмяЯчейкиКвадратов, 10, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	Модифицированность = Истина;
		
	
	ИмяОбласти = Область.Имя;
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если ИмяРаздела = "Таблица1" Тогда
		Если ИмяОбласти = "HSPODU"  Тогда
			СтруктураДанныхТаблица1[ИмяОбласти] = ТабличныйДокумент.Области[ИмяОбласти].Значение;
		КонецЕсли;
	КонецЕсли;
	
	////Если ИмяРаздела = "Декларация" Тогда
	////	Если    ИмяОбласти = "HNAME"
	////		ИЛИ ИмяОбласти = "HDDGVIN" 
	////		ИЛИ ИмяОбласти = "HNDGVIN" 
	////		ИЛИ ИмяОбласти = "HTIN" 
	////		ИЛИ ИмяОбласти = "HNPDV" 
	////		ИЛИ ИмяОбласти = "HBUH" 
	////		ИЛИ ИмяОбласти = "HBOS" 
	////		Тогда
	////		СтруктураДанныхТаблица1[ИмяОбласти] = ТабличныйДокумент.Области[ИмяОбласти].Значение;
	////		СтруктураДанныхПриложение2[ИмяОбласти] = ТабличныйДокумент.Области[ИмяОбласти].Значение;
	////		СтруктураДанныхПриложение3[ИмяОбласти] = ТабличныйДокумент.Области[ИмяОбласти].Значение;
	////		СтруктураДанныхПриложение4[ИмяОбласти] = ТабличныйДокумент.Области[ИмяОбласти].Значение;
	////		СтруктураДанныхПриложение5[ИмяОбласти] = ТабличныйДокумент.Области[ИмяОбласти].Значение;
	////		СтруктураДанныхСправка[ИмяОбласти]     = ТабличныйДокумент.Области[ИмяОбласти].Значение;
	////		СтруктураДанныхТаблица7[ИмяОбласти] = ТабличныйДокумент.Области[ИмяОбласти].Значение;
	////		СтруктураДанныхПриложение8[ИмяОбласти] = ТабличныйДокумент.Области[ИмяОбласти].Значение;
	////		Если НЕ ИмяОбласти = "HDDGVIN" 
	////		   И НЕ ИмяОбласти = "HNDGVIN" Тогда
	////		
	////			СтруктураДанныхТаблица6[ИмяОбласти] = ТабличныйДокумент.Области[ИмяОбласти].Значение;
	////			СтруктураДанныхПриложение10[ИмяОбласти]= ТабличныйДокумент.Области[ИмяОбласти].Значение;
	////			СтруктураДанныхЗаявление[ИмяОбласти]   = ТабличныйДокумент.Области[ИмяОбласти].Значение;
	////		
	////		КонецЕсли;
	////		СтруктураДанныхТаблица5[ИмяОбласти]     = ТабличныйДокумент.Области[ИмяОбласти].Значение;
	////		
	////		Если ИмяОбласти = "HTIN" Тогда
	////			СтруктураДанныхСлужебныеДанные["TIN"] = ТабличныйДокумент.Области[ИмяОбласти].Значение;	
	////		КонецЕсли;
	////		
	////	КонецЕсли;
	////КонецЕсли;
	
КонецПроцедуры // ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента()

&НаКлиенте
Процедура ДатаПодписиПриИзменении(Элемент)
	
	ЗаполнитьДатуПодписиНаСервере();
	
	Модифицированность = Истина;
		
КонецПроцедуры // ДатаПодписиПриИзменении()

&НаСервере
Процедура ПослеСменыЕдИзмеренияИТочности()

	ЗаполнитьПустыеСтруктурыДанных();
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
		
КонецПроцедуры // ПослеСменыЕдИзмеренияИТочности()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
&НаСервере
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в гривнах точность не может превышать 2 знака';uk='%1: при виведенні сум у гривнях точність не може перевищувати 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах гривен точность не может превышать 3 знака';uk='%1: при виведенні сум в тисячах гривень точність не може перевищувати 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах гривен точность не может превышать 6 знаков';uk='%1: при виведенні сум у мільйонах гривень точність не може перевищувати 6 знаків'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
		
КонецПроцедуры // Обновить()

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	    
КонецПроцедуры // ОткрытьФормуНастроек()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("Автосохранение", Ложь);
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет",		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", 		СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
					
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
    
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Если РезультатВыбора <> Неопределено Тогда
		КопироватьДанныеФормы(РезультатВыбора, мДеревоВыбранныхСтраниц);
		РегламентированнаяОтчетностьКлиентСервер.ПрорисоватьПодменюПечать(ЭтаФорма);
		Модифицированность = Истина;
					
		флЗначенияИдентичны = Истина;
		
		Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
			
			Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = РезультатВыбора.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
				флЗначенияИдентичны = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			
			#Если ВебКлиент Тогда
				ИзменитьТаблицуВариантовЗаполненияНаСервере();
			#Иначе
				РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			#КонецЕсли	
			
			Расчет(ЭтаФорма);
			
		КонецЕсли;
		
		Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		 ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
			ПослеСменыЕдИзмеренияИТочности();
		КонецЕсли;
		
		// Управляем видимостью страниц основной панели формы
	    РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
		
		Если НЕ флЗначенияИдентичны Тогда
			
			СформироватьДеревоРазделовОтчетаНаКлиенте();
			
			Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
				
				// Пытаемся найти ранее запомненный раздел.
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
				
				Если НЕ НайденнаяСтрока = Неопределено 
					И НЕ НомерСтраницыРазделаОтчета = Неопределено 
					И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
					
					НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
					
				КонецЕсли;
				
				// В случае успешного поиска, устанавливаем курсор на найденный раздел.
				Если НЕ НайденнаяСтрока = Неопределено Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				КонецЕсли;
				
			КонецЕсли;
			
			// обнулим информацию о выделенных областях, так как набор страниц были изменен.
			СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Неопределено;
			
		КонецЕсли;
		
	Иначе
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры // ИзменитьТаблицуВариантовЗаполненияНаСервере()

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
		
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)

	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела" + Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);

КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхПереченьТаблиц.Очистить();
	
	HSPODU = Неопределено;
	СтруктураДанныхТаблица1.Свойство("HSPODU", HSPODU);
	
	СтруктураДанныхТаблица1.Очистить();
	
	СтруктураДанныхТаблица5.Очистить();
	СтруктураДанныхТаблица6.Очистить();
	СтруктураДанныхТаблица7.Очистить();
	СтруктураДанныхСлужебныеДанные.Очистить();
	
	//ТаблицаСтраницыРаздела1.Очистить();
	//ИнициализацияМногостраничныхРазделов();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураДанныхТаблица1.Вставить("HSPODU", HSPODU);
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	
КонецПроцедуры // ОчиститьНаСервере()

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры // ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере()

&НаКлиенте
Функция НайтиСвойстваПоказателя(КодПоказателя)
	
	СвойстваПоказателя = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", КодПоказателя));
		
	Если СвойстваПоказателя.Количество() = 0 Тогда
		
		СвойстваПоказателя = Неопределено;
		
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(КодПоказателя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				СвойстваПоказателя = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		СвойстваПоказателя = СвойстваПоказателя[0];
		
	КонецЕсли;
		
	Возврат СвойстваПоказателя;
	
КонецФункции // НайтиСвойстваПоказателя()


&НаКлиенте
Процедура Выгрузить(Команда)

	ВыгрузитьОтчет();

КонецПроцедуры // Выгрузить()      

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьГривны(Число)
	
	Значение = Цел(Число);
	
	Если Значение = 0 Тогда
		Если Число = 0 Тогда
		    Значение = "";
		Иначе	
			Значение = "0";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;

КонецФункции // ПолучитьГривны()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьКопейки(Число)
	
	Модуль = ?(Число < 0, -Число, Число);
	
	Значение = (Модуль - Цел(Модуль)) * 100;
	
	Если Значение = 0 Тогда
		Если Число = 0 Тогда
		    Значение = " -";
		Иначе	
			Значение = "00";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Значение;

КонецФункции // ПолучитьГривны()

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Открыть();
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт

	Ячейка.ИмяЯчейки = СтрЗаменить(Ячейка.ИмяЯчейки, "T1RXXXXR111_", "T1RXXXXR111D_");	
	Ячейка.ИмяЯчейки = СтрЗаменить(Ячейка.ИмяЯчейки, "T1RXXXXR112_", "T1RXXXXR111D_");	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
		
КонецПроцедуры // АктивизироватьЯчейку()


// ПоказатьБланк()
//
&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры // ПоказатьБланк()

// ПечататьСразу()
//
&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры // ПечататьСразу()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено, НеИзФормыОтчета = Ложь) Экспорт
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и%1задать его в качестве используемого по умолчанию!';uk='Перед формуванням друкованих форм необхідно визначити в системі принтер%1задати його в якості використовуваного за замовчуванням!'"), Символы.ПС));				
		Возврат;
	КонецЕсли;
              	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...';uk='%1. Формується друкована форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
				
	ПечатьНаСервере(ВидПечати, ЧтоИскать);
		
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

КонецПроцедуры // Печать()

// ПечатьНаСервере()
//
&НаСервере
Процедура ПечатьНаСервере(ВидПечати, ЧтоИскать = Неопределено);
				
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
				
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	ОбщиеРеквизитыРазделов = Новый Структура();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЕстьДуплекс",        СтруктураРеквизитовФормы.ЕстьДуплекс);
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
КонецПроцедуры // ПечатьНаСервере()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов)
	
	Перем ИмяСтраницы, Ориентация;           // имя выводимого на печать листа;
	
	Парам1.Свойство("ИмяСтраницы",  	  ИмяСтраницы);
	Парам1.Свойство("ОриентацияЛиста",    Ориентация);
	
	Если    Ориентация = ОриентацияСтраницы.Портрет
		ИЛИ Ориентация = ОриентацияСтраницы.Ландшафт Тогда
	Иначе	
		Ориентация = ?(ВРЕГ(Ориентация) = ВРЕГ("Портрет"), ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
	КонецЕсли;
	
	Если ИмяСтраницы = "ПереченьТаблиц" Тогда
		
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
	ИначеЕсли ИмяСтраницы = "Таблица1" Тогда
		
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
	ИначеЕсли ИмяСтраницы = "Таблица5" Тогда	
		
		Если ТаблицаМногострочнойЧастиПуста(T5T1R, СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[СтруктураРеквизитовФормы.мИдГруппы5]) Тогда		
			Возврат;
		КонецЕсли;
		
		ТабДокумент  = Новый ТабличныйДокумент;
		ТабДокумент.ОриентацияСтраницы = Ориентация;
		
		Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("Таблица5_2016");
		
		Шапка  = Макет.ПолучитьОбласть("Шапка");
		ЗначениеВКлетку(СтруктураДанныхСлужебныеДанные.HTIN + "          ", Ложь, 10, "ЕДРПОУ", Шапка, Истина);
		ЗначениеВКлетку(СтруктураДанныхСлужебныеДанные.HTIN1 + "     ", Ложь, 10, "ЛиквЕДРПОУ", Шапка, Истина);
		
		ЗначениеВКлетку(Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), Истина, 2, "Мес", Шапка, Истина);
		ЗначениеВКлетку(Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), Истина, 4, "Год", Шапка, Истина);
		Шапка.Параметры.НазваниеОрганизации = СтруктураДанныхСлужебныеДанные.HNAME;
		Шапка.Параметры.Начальная 		= СтруктураДанныхТаблица5.HZB;
		Шапка.Параметры.Отменяющая 		= СтруктураДанныхТаблица5.HZS;
		Шапка.Параметры.Дополнительная  = СтруктураДанныхТаблица5.HZD;
		                                     
		Строка = Макет.ПолучитьОбласть("Строка");
		
		Подвал = Макет.ПолучитьОбласть("Подвал");		
		ЗначениеВКлетку(День(ДатаПодписи),  Истина,    2, "деньПодписи",   Подвал, Истина);
		ЗначениеВКлетку(Месяц(ДатаПодписи), Истина,    2, "месПодписи",    Подвал, Истина);
		ЗначениеВКлетку(Год(ДатаПодписи),   Истина,    4, "годПодписи",    Подвал, Истина);
		ЗначениеВКлетку(СтруктураДанныхСлужебныеДанные.HKBOS + "          ", Ложь, 10, "РуководительИНН", Подвал, Истина);
		ЗначениеВКлетку(СтруктураДанныхСлужебныеДанные.HKBUH + "          ", Ложь, 10, "БухгалтерИНН", Подвал, Истина);
		Подвал.Параметры.РуководительФИО = СтруктураДанныхСлужебныеДанные.HBOS;
		Подвал.Параметры.БухгалтерФИО 	 = СтруктураДанныхСлужебныеДанные.HBUH;
		
		НоваяСтраница = Истина;
		КоличествоСтрок = 1;
		Для каждого СтрокаГруппы Из T5T1R Цикл
			
			Если НоваяСтраница Тогда
				
				ТабДокумент.Вывести(Шапка);
				
				КоличествоСтрок = 1;
				НоваяСтраница = Ложь;
				
			КонецЕсли;
			
			Строка.Параметры.НомерСтроки  = КоличествоСтрок;
			
			Строка.Параметры.Гражданин  = Формат(СтрокаГруппы.T5T1RXXXXG6,"ЧЦ=1; ЧН=");
			Строка.Параметры.Категория  = СтрокаГруппы.T5T1RXXXXG7;
			
			Строка.Параметры.ГПХ  = Формат(СтрокаГруппы.T5T1RXXXXG8,"ЧЦ=1; ЧН=");
			
			ЗначениеВКлетку(СтрокаГруппы.T5T1RXXXXG9S + "          ", Ложь,    10, "ДРФО",    Строка, Истина);
			Строка.Параметры.Фамилия  = СтрокаГруппы.T5T1RXXXXG101S;
			Строка.Параметры.Имя 	  = СтрокаГруппы.T5T1RXXXXG102S;
			Строка.Параметры.Отчество = СтрокаГруппы.T5T1RXXXXG103S;
			
			Если ЗначениеЗаполнено(СтрокаГруппы.T5T1RXXXXG111D) Тогда
				ЗначениеВКлетку(День(СтрокаГруппы.T5T1RXXXXG111D), Истина,    2, "ДатаНачала",    Строка, Истина);
			Иначе			
			    ЗначениеВКлетку("", Ложь,    2, "ДатаНачала",    Строка, Истина);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаГруппы.T5T1RXXXXG112D) Тогда
			    ЗначениеВКлетку(День(СтрокаГруппы.T5T1RXXXXG112D), Истина,    2, "ДатаОкончания", Строка, Истина);
			Иначе	
				ЗначениеВКлетку("", Ложь,    2, "ДатаОкончания", Строка, Истина);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаГруппы.T5T1RXXXXG12D) Тогда
			    ЗначениеВКлетку(Формат(СтрокаГруппы.T5T1RXXXXG12D, "ДФ=ddMMyyyy"), Ложь, 8, "ДатаСозданияРМ", Строка, Истина);
			Иначе	
				ЗначениеВКлетку("", Ложь,    8, "ДатаСозданияРМ", Строка, Истина);
			КонецЕсли;
			
			Строка.Параметры.Причина = СтрокаГруппы.T5T1RXXXXG13S;
			
			ТабДокумент.Вывести(Строка);
			
			Если КоличествоСтрок = 15 Тогда
				ТабДокумент.Вывести(Подвал);
				НоваяСтраница = Истина;
			Иначе
				КоличествоСтрок = КоличествоСтрок + 1;
			КонецЕсли;
		
		КонецЦикла;
		
		Если НЕ НоваяСтраница Тогда
			
			// последняя не полная страница
			
			// дополним пустыми строками
			Строка = Макет.ПолучитьОбласть("Строка");
			Для НомПараметра = 0 По Строка.Параметры.Количество() - 1 Цикл
				Строка.Параметры[НомПараметра] = "";
			КонецЦикла;
			
			Для НомерСтркиПустышки = КоличествоСтрок По 15 Цикл
				Строка.Параметры.НомерСтроки = НомерСтркиПустышки;
				ТабДокумент.Вывести(Строка);
			КонецЦикла;
			
			ТабДокумент.Вывести(Подвал);
		КонецЕсли;		
		
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
		
	ИначеЕсли ИмяСтраницы = "Таблица6" Тогда
		
		Если ТаблицаМногострочнойЧастиПуста(T6T1R, СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[СтруктураРеквизитовФормы.мИдГруппы6]) Тогда		
			Возврат;
		КонецЕсли;
		
		ТабДокумент  = Новый ТабличныйДокумент;
		ТабДокумент.ОриентацияСтраницы = Ориентация;
		
		Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("Таблица6_2016");
		
		Шапка  = Макет.ПолучитьОбласть("Шапка");
		ЗначениеВКлетку(СтруктураДанныхСлужебныеДанные.HTIN + "          ", Ложь, 10, "ЕДРПОУ", Шапка, Истина);
		ЗначениеВКлетку(СтруктураДанныхСлужебныеДанные.HTIN1 + "     ", Ложь, 10, "ЛиквЕДРПОУ", Шапка, Истина);
		
		ЗначениеВКлетку(Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), Истина, 2, "Мес", Шапка, Истина);
		ЗначениеВКлетку(Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), Истина, 4, "Год", Шапка, Истина);
		Шапка.Параметры.НазваниеОрганизации = СтруктураДанныхСлужебныеДанные.HNAME;
		Шапка.Параметры.Начальная 		= СтруктураДанныхТаблица6.HZB;
		Шапка.Параметры.Отменяющая 		= СтруктураДанныхТаблица6.HZS;
		                                     
		Строка = Макет.ПолучитьОбласть("Строка");
		
		Подвал = Макет.ПолучитьОбласть("Подвал");		
		ЗначениеВКлетку(День(ДатаПодписи),  Истина,    2, "деньПодписи",   Подвал, Истина);
		ЗначениеВКлетку(Месяц(ДатаПодписи), Истина,    2, "месПодписи",    Подвал, Истина);
		ЗначениеВКлетку(Год(ДатаПодписи),   Истина,    4, "годПодписи",    Подвал, Истина);
		ЗначениеВКлетку(СтруктураДанныхСлужебныеДанные.HKBOS + "          ", Ложь, 10, "РуководительИНН", Подвал, Истина);
		ЗначениеВКлетку(СтруктураДанныхСлужебныеДанные.HKBUH + "          ", Ложь, 10, "БухгалтерИНН", Подвал, Истина);
		Подвал.Параметры.РуководительФИО = СтруктураДанныхСлужебныеДанные.HBOS;
		Подвал.Параметры.БухгалтерФИО 	 = СтруктураДанныхСлужебныеДанные.HBUH;
		
		НоваяСтраница = Истина;
		КоличествоСтрок = 1;
		ИтогоНачислено = 0;
		ИтогоНачисленоМаксБаза = 0;
		ИтогоРазницы 			= 0;
		ИтогоВзносыУдержано		= 0;
		ИтогоВзносыНачислено    = 0;
		
		Для каждого СтрокаГруппы Из T6T1R Цикл
			
			Если НоваяСтраница Тогда
				
				ТабДокумент.Вывести(Шапка);
				
				КоличествоСтрок = 1;
				НоваяСтраница = Ложь;
			КонецЕсли;
			
			Строка.Параметры.НомерСтроки  = КоличествоСтрок;
			
			ЗначениеВКлетку(СтрокаГруппы.T6T1RXXXXG8S + "          ", Ложь,    10, "ДРФО",    Строка, Истина);
			Строка.Параметры.ФИО    =  СтрокаГруппы.T6T1RXXXXG121S 
									+ " " + СтрокаГруппы.T6T1RXXXXG122S
									+ " " + СтрокаГруппы.T6T1RXXXXG123S;
			
			Строка.Параметры.Гражданин    =  Формат(СтрокаГруппы.T6T1RXXXXG6,"ЧЦ=1; ЧН=");; 						
			Строка.Параметры.МЖ    		  =  СтрокаГруппы.T6T1RXXXXG7;						
									
			ЗначениеВКлетку(СтрокаГруппы.T6T1RXXXXG9, Ложь,    2, "Категория",    Строка, Истина);
			ЗначениеВКлетку(СтрокаГруппы.T6T1RXXXXG10, Ложь,    2, "ТипСтавки",    Строка, Истина);
			
			Если ЗначениеЗаполнено(СтрокаГруппы.T6T1RXXXXG111D) Тогда
				ЗначениеВКлетку(Месяц(СтрокаГруппы.T6T1RXXXXG111D), Истина,  2,  "Месяц",    Строка, Истина);
				ЗначениеВКлетку(Год(СтрокаГруппы.T6T1RXXXXG111D), Истина,  4,  "Год",    Строка, Истина);
			Иначе
				ЗначениеВКлетку("    ", Истина,  2,  "Месяц",    Строка, Истина);
				ЗначениеВКлетку("    ", Истина,  4,  "Год",    Строка, Истина);
			КонецЕсли;
			
			ЗначениеВКлетку(СтрокаГруппы.T6T1RXXXXG13, Ложь,    2, "КвоБольничных",    Строка, Истина);			
			ЗначениеВКлетку(СтрокаГруппы.T6T1RXXXXG14, Ложь,         2, "КвоБезЗП",         Строка, Истина);			
			
			ЗначениеВКлетку(СтрокаГруппы.T6T1RXXXXG15, Ложь, 3, "КвоТрудОтношений", Строка, Истина);			
			
			ЗначениеВКлетку(СтрокаГруппы.T6T1RXXXXG16, Ложь, 3, "КвоДекрет", Строка, Истина);			
			
			ЗначениеВКлетку(ПолучитьГривны(СтрокаГруппы.T6T1RXXXXG17), Ложь,    9, "СуммаНачисленоГрн",    Строка, Истина);			
			ЗначениеВКлетку(ПолучитьКопейки(СтрокаГруппы.T6T1RXXXXG17), Истина,   2, "СуммаНачисленоКоп",    Строка, Истина);			
			
			ЗначениеВКлетку(ПолучитьГривны(СтрокаГруппы.T6T1RXXXXG18), Ложь,    9, "СуммаНачисленоМаксБазаГрн",    Строка, Истина);			
			ЗначениеВКлетку(ПолучитьКопейки(СтрокаГруппы.T6T1RXXXXG18), Истина,   2, "СуммаНачисленоМаксБазаКоп",    Строка, Истина);			
			
			ЗначениеВКлетку(ПолучитьГривны(СтрокаГруппы.T6T1RXXXXG19), Ложь,    6, "СуммаРазницыГрн",    Строка, Истина);			
			ЗначениеВКлетку(ПолучитьКопейки(СтрокаГруппы.T6T1RXXXXG19), Истина,   2, "СуммаРазницыКоп",    Строка, Истина);			
			
			ЗначениеВКлетку(ПолучитьГривны(СтрокаГруппы.T6T1RXXXXG20), Ложь,    6, "СуммаВзносовУдержаноГрн",    Строка, Истина);			
			ЗначениеВКлетку(ПолучитьКопейки(СтрокаГруппы.T6T1RXXXXG20), Истина,   2, "СуммаВзносовУдержаноКоп",    Строка, Истина);			
			
			ЗначениеВКлетку(ПолучитьГривны(СтрокаГруппы.T6T1RXXXXG21), Ложь,    6, "СуммаВзносовНачисленоГрн",    Строка, Истина);			
			ЗначениеВКлетку(ПолучитьКопейки(СтрокаГруппы.T6T1RXXXXG21), Истина,   2, "СуммаВзносовНачисленоКоп",    Строка, Истина);			
			
			
			ИтогоНачислено 			= ИтогоНачислено 		 + СтрокаГруппы.T6T1RXXXXG17;
			ИтогоНачисленоМаксБаза  = ИтогоНачисленоМаксБаза + СтрокаГруппы.T6T1RXXXXG18;
			ИтогоРазницы 			= ИтогоРазницы 			 + СтрокаГруппы.T6T1RXXXXG19;
			ИтогоВзносыУдержано		= ИтогоВзносыУдержано	 + СтрокаГруппы.T6T1RXXXXG20;
			ИтогоВзносыНачислено	= ИтогоВзносыНачислено	 + СтрокаГруппы.T6T1RXXXXG21;
			
			Строка.Параметры.ТрудКнижка  = Формат(СтрокаГруппы.T6T1RXXXXG22,"ЧЦ=1; ЧН=");
			Строка.Параметры.СпецСтаж    = Формат(СтрокаГруппы.T6T1RXXXXG23,"ЧЦ=1; ЧН=");
			
			Строка.Параметры.НеполноеРВ  = Формат(СтрокаГруппы.T6T1RXXXXG24,"ЧЦ=1; ЧН=");
			Строка.Параметры.НовоеРМ    =  Формат(СтрокаГруппы.T6T1RXXXXG25,"ЧЦ=1; ЧН=");;
			
			ТабДокумент.Вывести(Строка);
			
			Если КоличествоСтрок = 10 Тогда
				
				ЗначениеВКлетку(ПолучитьГривны(ИтогоНачислено), Ложь,    9, "СуммаНачисленоГрн",    Подвал, Истина);			
				ЗначениеВКлетку(ПолучитьКопейки(ИтогоНачислено), Истина,   2, "СуммаНачисленоКоп",    Подвал, Истина);			
				
				ЗначениеВКлетку(ПолучитьГривны(ИтогоНачисленоМаксБаза), Ложь,    9, "СуммаНачисленоМаксБазаГрн",    Подвал, Истина);			
				ЗначениеВКлетку(ПолучитьКопейки(ИтогоНачисленоМаксБаза), Истина,   2, "СуммаНачисленоМаксБазаКоп",    Подвал, Истина);			
				
				ЗначениеВКлетку(ПолучитьГривны(ИтогоРазницы), Ложь,    6, "СуммаРазницыГрн",    Подвал, Истина);			
				ЗначениеВКлетку(ПолучитьКопейки(ИтогоРазницы), Истина,   2, "СуммаРазницыКоп",    Подвал, Истина);			
				
				ЗначениеВКлетку(ПолучитьГривны(ИтогоВзносыУдержано), Ложь,    6, "СуммаВзносовУдержаноГрн",    Подвал, Истина);			
				ЗначениеВКлетку(ПолучитьКопейки(ИтогоВзносыУдержано), Истина,   2, "СуммаВзносовУдержаноКоп",    Подвал, Истина);			
				
				ЗначениеВКлетку(ПолучитьГривны(ИтогоВзносыНачислено), Ложь,    6, "СуммаВзносовНачисленоГрн",    Подвал, Истина);			
				ЗначениеВКлетку(ПолучитьКопейки(ИтогоВзносыНачислено), Истина,   2, "СуммаВзносовНачисленоКоп",    Подвал, Истина);			
				
				ТабДокумент.Вывести(Подвал);
				
				НоваяСтраница = Истина;
				ИтогоНачислено = 0;
				ИтогоНачисленоМаксБаза = 0;
				ИтогоРазницы 			= 0;
				ИтогоВзносыУдержано		= 0;
				ИтогоВзносыНачислено    = 0;
				
			Иначе
				КоличествоСтрок = КоличествоСтрок + 1;
			КонецЕсли;
		
		КонецЦикла;
		
		Если НЕ НоваяСтраница Тогда
			
			// последняя не полная страница
			
			// дополним пустыми строками
			Строка = Макет.ПолучитьОбласть("Строка");
			Для НомПараметра = 0 По Строка.Параметры.Количество() - 1 Цикл
				Строка.Параметры[НомПараметра] = "";
			КонецЦикла;
			
			Для НомерСтркиПустышки = КоличествоСтрок По 10 Цикл
				Строка.Параметры.НомерСтроки = НомерСтркиПустышки;
				ТабДокумент.Вывести(Строка);
			КонецЦикла;
				
			ЗначениеВКлетку(ПолучитьГривны(ИтогоНачислено), Ложь,    9, "СуммаНачисленоГрн",    Подвал, Истина);			
			ЗначениеВКлетку(ПолучитьКопейки(ИтогоНачислено), Истина,   2, "СуммаНачисленоКоп",    Подвал, Истина);			
			
			ЗначениеВКлетку(ПолучитьГривны(ИтогоНачисленоМаксБаза), Ложь,    9, "СуммаНачисленоМаксБазаГрн",    Подвал, Истина);			
			ЗначениеВКлетку(ПолучитьКопейки(ИтогоНачисленоМаксБаза), Истина,   2, "СуммаНачисленоМаксБазаКоп",    Подвал, Истина);			
			
			ЗначениеВКлетку(ПолучитьГривны(ИтогоРазницы), Ложь,    6, "СуммаРазницыГрн",    Подвал, Истина);			
			ЗначениеВКлетку(ПолучитьКопейки(ИтогоРазницы), Истина,   2, "СуммаРазницыКоп",    Подвал, Истина);			
			
			ЗначениеВКлетку(ПолучитьГривны(ИтогоВзносыУдержано), Ложь,    6, "СуммаВзносовУдержаноГрн",    Подвал, Истина);			
			ЗначениеВКлетку(ПолучитьКопейки(ИтогоВзносыУдержано), Истина,   2, "СуммаВзносовУдержаноКоп",    Подвал, Истина);			
			
			ЗначениеВКлетку(ПолучитьГривны(ИтогоВзносыНачислено), Ложь,    6, "СуммаВзносовНачисленоГрн",    Подвал, Истина);			
			ЗначениеВКлетку(ПолучитьКопейки(ИтогоВзносыНачислено), Истина,   2, "СуммаВзносовНачисленоКоп",    Подвал, Истина);			
			
			ТабДокумент.Вывести(Подвал);
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
	ИначеЕсли ИмяСтраницы = "Таблица7" Тогда
		
		Если ТаблицаМногострочнойЧастиПуста(T7T1R, СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[СтруктураРеквизитовФормы.мИдГруппы7]) Тогда		
			Возврат;
		КонецЕсли;
		
		ТабДокумент  = Новый ТабличныйДокумент;
		ТабДокумент.ОриентацияСтраницы = Ориентация;
		
		Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("Таблица7_2016");
		
		Шапка  = Макет.ПолучитьОбласть("Шапка");
		ЗначениеВКлетку(СтруктураДанныхСлужебныеДанные.HTIN + "          ", Ложь, 10, "ЕДРПОУ", Шапка, Истина);
		ЗначениеВКлетку(СтруктураДанныхСлужебныеДанные.HTIN1 + "     ", Ложь, 10, "ЛиквЕДРПОУ", Шапка, Истина);
		
		ЗначениеВКлетку(Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), Истина, 2, "Мес", Шапка, Истина);
		ЗначениеВКлетку(Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), Истина, 4, "Год", Шапка, Истина);
		Шапка.Параметры.НазваниеОрганизации = СтруктураДанныхСлужебныеДанные.HNAME;
		Шапка.Параметры.Начальная 		= СтруктураДанныхТаблица7.HZB;
		Шапка.Параметры.Отменяющая 		= СтруктураДанныхТаблица7.HZS;
		                                     
		Строка = Макет.ПолучитьОбласть("Строка");
		
		Подвал = Макет.ПолучитьОбласть("Подвал");		
		ЗначениеВКлетку(День(ДатаПодписи),  Истина,    2, "деньПодписи",   Подвал, Истина);
		ЗначениеВКлетку(Месяц(ДатаПодписи), Истина,    2, "месПодписи",    Подвал, Истина);
		ЗначениеВКлетку(Год(ДатаПодписи),   Истина,    4, "годПодписи",    Подвал, Истина);
		ЗначениеВКлетку(СтруктураДанныхСлужебныеДанные.HKBOS + "          ", Ложь, 10, "РуководительИНН", Подвал, Истина);
		ЗначениеВКлетку(СтруктураДанныхСлужебныеДанные.HKBUH + "          ", Ложь, 10, "БухгалтерИНН", Подвал, Истина);
		Подвал.Параметры.РуководительФИО = СтруктураДанныхСлужебныеДанные.HBOS;
		Подвал.Параметры.БухгалтерФИО 	 = СтруктураДанныхСлужебныеДанные.HBUH;
		
		НоваяСтраница = Истина;
		КоличествоСтрок = 1;
		Для каждого СтрокаГруппы Из T7T1R Цикл
			
			Если НоваяСтраница Тогда
				ТабДокумент.Вывести(Шапка);
				
				КоличествоСтрок = 1;
				НоваяСтраница = Ложь;
			КонецЕсли;
			
			Строка.Параметры.НомерСтроки  = КоличествоСтрок;
			
			Строка.Параметры.Гражданин    =  СтрокаГруппы.T7T1RXXXXG6; 						
			
			ЗначениеВКлетку(СтрокаГруппы.T7T1RXXXXG7S + "          ", Ложь,    10, "ДРФО",    Строка, Истина);
			Строка.Параметры.ФИО    =  СтрокаГруппы.T7T1RXXXXG91S 
									+ " " + СтрокаГруппы.T7T1RXXXXG92S
									+ " " + СтрокаГруппы.T7T1RXXXXG93S;
			
			ЗначениеВКлетку(СтрокаГруппы.T7T1RXXXXG8S, Ложь,    8, "КодОснования",    Строка, Истина);
			
			Если ЗначениеЗаполнено(СтрокаГруппы.T7T1RXXXXG10) Тогда
				ЗначениеВКлетку(День(СтрокаГруппы.T7T1RXXXXG10), Истина,    2, "ДатаНач",    Строка, Истина);
			Иначе
				ЗначениеВКлетку("", Ложь,    2, "ДатаНач",    Строка, Истина);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаГруппы.T7T1RXXXXG11) Тогда
				ЗначениеВКлетку(День(СтрокаГруппы.T7T1RXXXXG11), Истина,    2, "ДатаКон",    Строка, Истина);
			Иначе				
			    ЗначениеВКлетку("", Ложь,    2, "ДатаКон",    Строка, Истина);
			КонецЕсли;
			
			ЗначениеВКлетку(СтрокаГруппы.T7T1RXXXXG12,      Ложь,    4, "Дней",         Строка, Истина);
			Если ЗначениеЗаполнено(СтрокаГруппы.T7T1RXXXXG131) ИЛИ ЗначениеЗаполнено(СтрокаГруппы.T7T1RXXXXG132) Тогда
				ЧасовМинут = Формат(СтрокаГруппы.T7T1RXXXXG131, "ЧЦ=3; ЧН=; ЧГ=0") + ":" + Формат(СтрокаГруппы.T7T1RXXXXG132, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=0");
			Иначе	
			    ЧасовМинут = "";
			КонецЕсли;
			ЗначениеВКлетку(ЧасовМинут,            Ложь,    6, "ЧасовМинут", Строка, Истина);
			
			ЗначениеВКлетку(СтрокаГруппы.T7T1RXXXXG141,      Ложь,    4, "НормаДней",         Строка, Истина);
			Если ЗначениеЗаполнено(СтрокаГруппы.T7T1RXXXXG142) ИЛИ ЗначениеЗаполнено(СтрокаГруппы.T7T1RXXXXG143) Тогда
				НормаЧасовМинут = Формат(СтрокаГруппы.T7T1RXXXXG142, "ЧЦ=3; ЧН=; ЧГ=0") + ":" + Формат(СтрокаГруппы.T7T1RXXXXG143, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=0");
			Иначе	
			    НормаЧасовМинут = "";
			КонецЕсли;
			ЗначениеВКлетку(НормаЧасовМинут,            Ложь,    6, "НормаЧасовМинут", Строка, Истина);
			
			ЗначениеВКлетку(СтрокаГруппы.T7T1RXXXXG15S, Ложь,  8,  "ПриказНомер",    Строка, Истина);
			ЗначениеВКлетку(Формат(СтрокаГруппы.T7T1RXXXXG16D, "ДФ=ddMMyyyy"), Ложь,  8,   "ПриказДата",     Строка, Истина);
			
			Строка.Параметры.Сезон  = СтрокаГруппы.T7T1RXXXXG17;
			
			ТабДокумент.Вывести(Строка);
			
			Если КоличествоСтрок = 10 Тогда
				
				ТабДокумент.Вывести(Подвал);
				
				НоваяСтраница = Истина;
				
			Иначе
				КоличествоСтрок = КоличествоСтрок + 1;
			КонецЕсли;
		
		КонецЦикла;
		
		Если НЕ НоваяСтраница Тогда
			
			// последняя не полная страница
			
			// дополним пустыми строками
			Строка = Макет.ПолучитьОбласть("Строка");
			Для НомПараметра = 0 По Строка.Параметры.Количество() - 1 Цикл
				Строка.Параметры[НомПараметра] = "";
			КонецЦикла;
			
			Для НомерСтркиПустышки = КоличествоСтрок По 10 Цикл
				Строка.Параметры.НомерСтроки = НомерСтркиПустышки;
				ТабДокумент.Вывести(Строка);
			КонецЦикла;
			
			ТабДокумент.Вывести(Подвал);
			
		КонецЕсли;
		
		РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
	КонецЕсли;	
		
КонецПроцедуры // ВывестиНаПечатьЛист()

&НаСервере
Процедура ЗначениеВКлетку(Знач Значение, ВыводитьНули, Размер, ИмяПараметра, ТекущаяОбластьМакета, ЗаполнятьПараметр = Ложь)
	
	Пустышка = ?(ВыводитьНули, "0", " ");
	
	ЗначСтр = "";
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		ЗначСтр = Формат(Значение, "ЧГ=");
	Иначе	
		ЗначСтр = Строка(Значение);
	КонецЕсли;
	
	ДлинаЗнач = СтрДлина(ЗначСтр);
	Пока ДлинаЗнач < Размер Цикл
		Если (Размер = 27) или (Размер = 25) или (Размер = 18) или (Размер = 16) или (Размер = 15) или (Размер = 17)  Тогда
			ЗначСтр = ЗначСтр + Пустышка;
		Иначе  
			// дозаполним значение пустышками (слева)
			ЗначСтр = Пустышка + ЗначСтр;
		КонецЕсли;
		ДлинаЗнач = ДлинаЗнач + 1;
	КонецЦикла;
	
	// заполним массив
	Для Ном = 1 По Размер Цикл
		Если ЗаполнятьПараметр Тогда
			ТекущаяОбластьМакета.Параметры[ИмяПараметра + Строка(Ном)] = Сред(ЗначСтр,Ном,1) 
		Иначе	
		    ТекущаяОбластьМакета.Области[ИмяПараметра + Строка(Ном)].Значение = Сред(ЗначСтр,Ном,1) 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		СохрАктивнаяСтраница = ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница;
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = СохрАктивнаяСтраница;
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
    		
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()
      
&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	Если Найти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(Найти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если Найти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если Найти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
	ИначеЕсли Найти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
			
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если Найти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
	ИначеЕсли Найти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СформироватьДеревоРазделовОтчетаНаКлиенте();
	
КонецПроцедуры // ОчисткаРегламентированногоОтчетаНаКлиенте()

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	ПараметрыЗаполненияЗвит1С = Неопределено;
	
	ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С);
	
	ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьАвто()

&НаСервере
Процедура ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С)
	
	ОчиститьНаСервере();
	//ОчисткаРегламентированногоОтчетаНаСервере("Декларация",Ложь,"ОчиститьТекущийРаздел",Истина, 2);	

	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	Заполнить(ПараметрыЗаполненияЗвит1С);
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура Заполнить(ПараметрыЗаполненияЗвит1С)
	
	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "ЕРП" Тогда
		Возврат;
	КонецЕсли;
	//ИНАГРО ++	
	//ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	//
	//ПараметрыПолученияСотрудников.Организация = СтруктураРеквизитовФормы.Организация;
	//ПараметрыПолученияСотрудников.НачалоПериода = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	//ПараметрыПолученияСотрудников.ОкончаниеПериода = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	//ТаблицаСотрудниковОрганизации = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
	//
	//ТаблицаКадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
	//	Истина, 
	//	ТаблицаСотрудниковОрганизации.ВыгрузитьКолонку("Сотрудник"),                                                     
	//	"ДатаПриема, ДатаУвольнения, ФизическоеЛицо, ВидЗанятости, ПринятНаНовоеРабочееМесто, ДатаСозданияРабочегоМеста, ПриказОбУвольненииСтатьяКЗоТ",
	//	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	//	
	//ТаблицаКадровыеДанныеФизическихЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(
	//	Истина, 
	//	ТаблицаСотрудниковОрганизации.ВыгрузитьКолонку("ФизическоеЛицо"), 
	//	"Фамилия, Имя, Отчество, Страна, ДокументСерия, ДокументНомер", 
	//	КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));


	//
	//ПараметрыСредняяЧисленность = Новый Структура;
	//ПараметрыСредняяЧисленность.Вставить("ВидПериода", "МЕСЯЦ") ;
	//ПараметрыСредняяЧисленность.Вставить("НачалоПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	//ПараметрыСредняяЧисленность.Вставить("КонецПериода", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	//ПараметрыСредняяЧисленность.Вставить("ВидСредней", "ССЧ") ;
	//ПараметрыСредняяЧисленность.Вставить("ОтборШтат", Истина);
	//ПараметрыСредняяЧисленность.Вставить("ОтборПол", Неопределено);
	//ПараметрыСредняяЧисленность.Вставить("ОтборИнвалиды", Ложь);
	//ПараметрыСредняяЧисленность.Вставить("ОтборНеИнвалиды", Ложь);
	//ПараметрыСредняяЧисленность.Вставить("ОтборПенсионеры", Ложь);
	//ПараметрыСредняяЧисленность.Вставить("ОтборНеПенсионеры", Ложь);
	//ПараметрыСредняяЧисленность.Вставить("ОтборИностранцы", Ложь);
	//ПараметрыСредняяЧисленность.Вставить("ОтборДопГарантии", Ложь);
	//ТаблСреднеспЧисленности = КадровыйУчет.ПолучитьСреднююЧисленность(СтруктураРеквизитовФормы.Организация, ПараметрыСредняяЧисленность);
	//
	//СтруктураДанныхТаблица1.HNACTL =  ТаблСреднеспЧисленности[0].Средняя;
	//
	//ПараметрыСредняяЧисленность.Вставить("ОтборИнвалиды", Истина);
	//ТаблСреднеспЧисленности = КадровыйУчет.ПолучитьСреднююЧисленность(СтруктураРеквизитовФормы.Организация, ПараметрыСредняяЧисленность); 
	//СтруктураДанныхТаблица1.HNACTL1 =  ТаблСреднеспЧисленности[0].Средняя;
	//
	//ПараметрыСредняяЧисленность.Вставить("ОтборДопГарантии", Истина);
	//ТаблСреднеспЧисленности = КадровыйУчет.ПолучитьСреднююЧисленность(СтруктураРеквизитовФормы.Организация, ПараметрыСредняяЧисленность); 
	//СтруктураДанныхТаблица1.HNACTL2 =  ТаблСреднеспЧисленности[0].Средняя;
	//
	//КолГПХ = 0;
	//СозданоНовыхРМ = 0;
	//ШтатнаяЧисленность = 0;
	//
	//Запрос = Новый Запрос;
	//
	//МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	//Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	//
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
	//|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
	//|	СотрудникиОрганизации.ВидЗанятости КАК ВидЗанятости,
	//|	СотрудникиОрганизации.ДатаПриема КАК ДатаПриема,
	//|	СотрудникиОрганизации.ДатаУвольнения КАК ДатаУвольнения,
	//|	СотрудникиОрганизации.ПриказОбУвольненииСтатьяКЗоТ КАК ПриказОбУвольненииСтатьяКЗоТ,
	//|	СотрудникиОрганизации.ПринятНаНовоеРабочееМесто КАК ПринятНаНовоеРабочееМесто,
	//|	СотрудникиОрганизации.ДатаСозданияРабочегоМеста КАК ДатаСозданияРабочегоМеста
	//|ПОМЕСТИТЬ ВТСотрудникиОрганизации
	//|ИЗ &ТаблицаКадровыеДанныеСотрудников КАК СотрудникиОрганизации";
	//Запрос.УстановитьПараметр("ТаблицаКадровыеДанныеСотрудников",ТаблицаКадровыеДанныеСотрудников);
	//Запрос.Выполнить();
	//
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
	//|	ВЫБОР
	//|		КОГДА ЕСТЬNULL(ФизическиеЛица.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	//|			ИЛИ ЕСТЬNULL(ФизическиеЛица.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.Украина)
	//|				ТОГДА 1
	//|			ИНАЧЕ 0
	//|		КОНЕЦ КАК Гражданин,
	//|	ФизическиеЛица.ДокументСерия КАК ДокументСерия,
	//|	ФизическиеЛица.ДокументНомер КАК ДокументНомер,
	//|	ФизическиеЛица.Фамилия КАК Фамилия,
	//|	ФизическиеЛица.Имя КАК Имя,
	//|	ФизическиеЛица.Отчество КАК Отчество
	//|ПОМЕСТИТЬ ВТФизическиеЛица
	//|ИЗ &ТаблицаКадровыеДанныеФизическихЛиц КАК ФизическиеЛица";
	//Запрос.УстановитьПараметр("ТаблицаКадровыеДанныеФизическихЛиц",ТаблицаКадровыеДанныеФизическихЛиц);
	//Запрос.Выполнить();

	//
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПлановыеНачисления.Сотрудник.ФизическоеЛицо) КАК Количество
	//|ИЗ
	//|	РегистрСведений.ПлановыеНачисления.СрезПоследних(
	//|			&ДатаНач,
	//|			Сотрудник В (ВЫБРАТЬ ВТСотрудникиОрганизации.Сотрудник ИЗ ВТСотрудникиОрганизации КАК ВТСотрудникиОрганизации)
	//|				И Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоДоговоруГПХ)
	//|				) КАК ПлановыеНачисления
	//|ГДЕ ПлановыеНачисления.Размер > 0
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПлановыеНачисления.Сотрудник.ФизическоеЛицо) КАК Количество
	//|ИЗ
	//|	РегистрСведений.ПлановыеНачисления КАК ПлановыеНачисления
	//|ГДЕ 
	//|   ПлановыеНачисления.Период МЕЖДУ &ДатаНач И &ДатаКон
	//|	И ПлановыеНачисления.Размер > 0
	//|	И ПлановыеНачисления.Сотрудник В (ВЫБРАТЬ ВТСотрудникиОрганизации.Сотрудник ИЗ ВТСотрудникиОрганизации КАК ВТСотрудникиОрганизации)
	//|   И Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоДоговоруГПХ)
	//|";
	//Запрос.УстановитьПараметр("ДатаНач", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	//Запрос.УстановитьПараметр("ДатаКон", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	//Запрос.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
	//Запрос.Параметры.Вставить("ДнейВМесяце", День(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	//
	//ВыборкаГПХ = Запрос.Выполнить().Выбрать();
	//Пока ВыборкаГПХ.Следующий() Цикл
	//	КолГПХ = ВыборкаГПХ.Количество;
	//КонецЦикла;
	//
	//СтруктураДанныхТаблица1.HNACTL3 = ШтатнаяЧисленность;
	//СтруктураДанныхТаблица1.HNACTL4 = КолГПХ;
	//СтруктураДанныхТаблица1.H014G1 = СозданоНовыхРМ;
	//
	//Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	ЕСВПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
	//|	ЕСВПоСотрудникам.ФизическоеЛицо.Пол КАК Пол,
	//|	ЕСВПоСотрудникам.ФизическоеЛицо.КодПоДРФО КАК КодПоДРФО,
	//|	ЕСВПоСотрудникам.СтатьяНалоговойДекларации КАК СтатьяНалоговойДекларации,
	//|	ЕСВПоСотрудникам.ТипНачисления КАК ТипНачисления,
	//|	СУММА(ЕСВПоСотрудникам.БазаОборот) КАК База,
	//|	СУММА(ЕСВПоСотрудникам.БазаВзносаОборот) КАК БазаВзноса,
	//|	СУММА(ЕСВПоСотрудникам.БазаДоначислениеОборот) КАК БазаДоначисление,
	//|	СУММА(ЕСВПоСотрудникам.РезультатДоначислениеОборот) КАК СуммаВзносаДоначисление,
	//|	СУММА(ЕСВПоСотрудникам.БазаОтпускныеОборот) КАК БазаОтпускные,
	//|	СУММА(ЕСВПоСотрудникам.СуммаОборот) КАК СуммаВзноса,
	//|	ЕСВПоСотрудникам.ВидЕСВ КАК ВидЕСВ,
	//|	ЕСВПоСотрудникам.КатегорияЕСВ КАК КатегорияЕСВ,
	//|	ЕСВПоСотрудникам.НалоговыйПериод КАК Период,
	//|	ЕСВПоСотрудникам.СпособРасчета КАК СпособРасчета
	//|ПОМЕСТИТЬ ВТЕСВПоСотрудникам
	//|ИЗ
	//|	РегистрНакопления.ЕСВПоСотрудникам.Обороты(
	//|			НАЧАЛОПЕРИОДА(&ДатаНач, МЕСЯЦ),
	//|			КОНЕЦПЕРИОДА(&ДатаКон, МЕСЯЦ),
	//|			,
	//|			Организация = &Организация
	//|				И ФизическоеЛицо В
	//|					(ВЫБРАТЬ
	//|						ВТСотрудникиОрганизации.ФизическоеЛицо
	//|					ИЗ
	//|						ВТСотрудникиОрганизации КАК ВТСотрудникиОрганизации
	//|					ГДЕ
	//|						ВТСотрудникиОрганизации.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство))) КАК ЕСВПоСотрудникам
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ЕСВПоСотрудникам.ФизическоеЛицо,
	//|	ЕСВПоСотрудникам.КатегорияЕСВ,
	//|	ЕСВПоСотрудникам.ТипНачисления,
	//|	ЕСВПоСотрудникам.СтатьяНалоговойДекларации,
	//|	ЕСВПоСотрудникам.ФизическоеЛицо.Пол,
	//|	ЕСВПоСотрудникам.ФизическоеЛицо.КодПоДРФО,
	//|	ЕСВПоСотрудникам.ВидЕСВ,
	//|	ЕСВПоСотрудникам.НалоговыйПериод,
	//|	ЕСВПоСотрудникам.СпособРасчета
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ФизическоеЛицо,
	//|	Период,
	//|	КатегорияЕСВ,
	//|	ТипНачисления,
	//|	СпособРасчета
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//
	//|ВЫБРАТЬ
	//|	ЕСВПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
	//|	ЕСВПоСотрудникам.Пол КАК Пол,
	//|	ЕСВПоСотрудникам.СтатьяНалоговойДекларации КАК СтатьяНалоговойДекларации,
	//|	ЕСВПоСотрудникам.ТипНачисления КАК ТипНачисления,
	//|	ЕСВПоСотрудникам.База КАК База,
	//|	ЕСВПоСотрудникам.БазаВзноса КАК БазаВзноса,
	//|	ЕСВПоСотрудникам.СуммаВзноса КАК СуммаВзноса,
	//|	ЕСВПоСотрудникам.БазаДоначисление КАК БазаДоначисление,
	//|	ЕСВПоСотрудникам.СуммаВзносаДоначисление КАК СуммаВзносаДоначисление,
	//|	ЕСВПоСотрудникам.БазаОтпускные КАК БазаОтпускные,
	//|	ЕСВПоСотрудникам.ВидЕСВ КАК ВидЕСВ,
	//|	ЕСВПоСотрудникам.КатегорияЕСВ КАК КатегорияЕСВ,
	//|	ЕСВПоСотрудникам.Период КАК Период
	//|ИЗ
	//|	ВТЕСВПоСотрудникам КАК ЕСВПоСотрудникам
	//|";
	//РезультатЗапроса = Запрос.Выполнить();
	//
	//Если НЕ РезультатЗапроса.Пустой() Тогда
	//
	//	ТаблицаБазВзносов = РезультатЗапроса.Выгрузить();
	//	ТаблицаБазВзносов.Свернуть("СтатьяНалоговойДекларации, ТипНачисления", "База, БазаВзноса, СуммаВзноса, БазаДоначисление, СуммаВзносаДоначисление, БазаОтпускные");
	//	ТаблицаНужныхСтатей_ = ТаблицаНужныхСтатей.Выгрузить();
	//	Для Каждого СтрокаБаз Из ТаблицаБазВзносов Цикл
	//		СтрокаТаблицы = ТаблицаНужныхСтатей_.Найти(СтрокаБаз.СтатьяНалоговойДекларации, "Статья");
	//		Если СтрокаТаблицы <> Неопределено Тогда
	//			Если СтрокаБаз.ТипНачисления < 2 Тогда
	//				База = СтрокаБаз.БазаВзноса - СтрокаБаз.БазаДоначисление;
	//				БазаДоначисление = СтрокаБаз.БазаДоначисление;
	//				СуммаВзноса = СтрокаБаз.СуммаВзноса - СтрокаБаз.СуммаВзносаДоначисление;
	//				СуммаВзносаДоначисление = СтрокаБаз.СуммаВзносаДоначисление;
	//				
	//				ДобавитьЗначениеВСтруктуру(СтруктураДанныхТаблица1, СтрокаТаблицы.ПолеБазаОсновное, База);
	//				ДобавитьЗначениеВСтруктуру(СтруктураДанныхТаблица1, СтрокаТаблицы.ПолеВзносОсновное, СуммаВзноса);
	//				ДобавитьЗначениеВСтруктуру(СтруктураДанныхТаблица1, СтрокаТаблицы.ПолеБазаДоначисление, БазаДоначисление);
	//				ДобавитьЗначениеВСтруктуру(СтруктураДанныхТаблица1, СтрокаТаблицы.ПолеВзносДоначисление, СуммаВзносаДоначисление);
	//			ИначеЕсли СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4 Тогда
	//				ДобавитьЗначениеВСтруктуру(СтруктураДанныхТаблица1, СтрокаТаблицы.ПолеБазаТип24, СтрокаБаз.БазаВзноса);
	//				ДобавитьЗначениеВСтруктуру(СтруктураДанныхТаблица1, СтрокаТаблицы.ПолеВзносТип24, СтрокаБаз.СуммаВзноса);
	//			ИначеЕсли СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5 Тогда
	//				ДобавитьЗначениеВСтруктуру(СтруктураДанныхТаблица1, СтрокаТаблицы.ПолеБазаТип35, СтрокаБаз.БазаВзноса);
	//				ДобавитьЗначениеВСтруктуру(СтруктураДанныхТаблица1, СтрокаТаблицы.ПолеВзносТип35, СтрокаБаз.СуммаВзноса);
	//			КонецЕсли;	
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//
	//БольничныеПредприятие 	= 0;
	//БольничныеФСС 			= 0;
	//БольничныеФССНесчСлучай = 0;
	//ГПХ						= 0;
	//Зарплата				= 0;
	//ОтпускБеременностьИРоды = 0;
	//	
	//Запрос.Текст = "ВЫБРАТЬ
	//|	СУММА(НачисленияУдержанияПоСотрудникам.СуммаОборот) КАК Результат,
	//|	НачисленияУдержанияПоСотрудникам.Сотрудник КАК Сотрудник,
	//|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
	//|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание КАК Начисление,
	//|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияНачисленияИлиНеоплаченногоВремени,
	//|	НачисленияУдержанияПоСотрудникам.Период КАК Период,
	//|	НачисленияУдержанияПоСотрудникам.ПериодДействия КАК ПериодДействия,
	//|	СУММА(ВЫБОР
	//|			КОГДА СотрудникиОрганизации.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
	//|					И НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя), ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве))
	//|				ТОГДА НачисленияУдержанияПоСотрудникам.КалендарныеДниОборот
	//|		КОНЕЦ) КАК КалендарныеДниБольничные,
	//|	СУММА(ВЫБОР
	//|			КОГДА СотрудникиОрганизации.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
	//|					И НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускБезОплаты)
	//|				ТОГДА НачисленияУдержанияПоСотрудникам.КалендарныеДниОборот
	//|		КОНЕЦ) КАК КалендарныеДниОтпускаБезСохраненияЗП,
	//|	СУММА(ВЫБОР
	//|			КОГДА СотрудникиОрганизации.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
	//|					И НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам)
	//|				ТОГДА НачисленияУдержанияПоСотрудникам.КалендарныеДниОборот
	//|		КОНЕЦ) КАК КалендарныеДниОтпускПоБеременностиИРодам,
	//|	ВЫБОР
	//|		КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоДоговоруГПХ)
	//|			ТОГДА 3
	//|		КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоУходуЗаРебенкомДо6Лет)
	//|			ТОГДА 4
	//|		КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам)
	//|			ТОГДА 5
	//|	КОНЕЦ КАК КодКатегорииНачисления
	//|ПОМЕСТИТЬ ВТНачисленияУдержанияПоРаботникам
	//|ИЗ
	//|	РегистрНакопления.НачисленияУдержанияПоСотрудникам.Обороты(
	//|			&ДатаНач,
	//|			&ДатаКон,
	//|			Месяц,
	//|			Организация = &Организация
	//|				И НачислениеУдержание.ВидЕСВ <> ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.НеУчитывается)
	//|				И ТИПЗНАЧЕНИЯ(НачислениеУдержание) = ТИП(ПланВидовРасчета.Начисления)
	//|				И Сотрудник В
	//|					(ВЫБРАТЬ
	//|						ВТСотрудникиОрганизации.Сотрудник
	//|					ИЗ
	//|						ВТСотрудникиОрганизации КАК ВТСотрудникиОрганизации)) КАК НачисленияУдержанияПоСотрудникам
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	//|		ПО НачисленияУдержанияПоСотрудникам.Сотрудник = СотрудникиОрганизации.Сотрудник
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание,
	//|	НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени,
	//|	НачисленияУдержанияПоСотрудникам.ФизическоеЛицо,
	//|	НачисленияУдержанияПоСотрудникам.Сотрудник,
	//|	НачисленияУдержанияПоСотрудникам.Период,
	//|	НачисленияУдержанияПоСотрудникам.ПериодДействия,
	//|
	//|	ВЫБОР
	//|		КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоДоговоруГПХ)
	//|			ТОГДА 3
	//|		КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоУходуЗаРебенкомДо6Лет)
	//|			ТОГДА 4
	//|		КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам)
	//|			ТОГДА 5
	//|	КОНЕЦ 
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ФизическоеЛицо
	//|;
	//|
	//|ВЫБРАТЬ
	//|	НачисленияУдержанияПоРаботникам.Результат КАК Результат,
	//|	НачисленияУдержанияПоРаботникам.ФизическоеЛицо,	
	//|   НачисленияУдержанияПоРаботникам.Начисление КАК Начисление,
	//|   НачисленияУдержанияПоРаботникам.КатегорияНачисленияИлиНеоплаченногоВремени КАК КатегорияНачисленияИлиНеоплаченногоВремени,
	//|   НачисленияУдержанияПоРаботникам.Период КАК Период,
	//|   НачисленияУдержанияПоРаботникам.ПериодДействия КАК ПериодДействия,
	//|	НачисленияУдержанияПоРаботникам.КалендарныеДниБольничные КАК КалендарныеДниБольничные,
	//|	НачисленияУдержанияПоРаботникам.КалендарныеДниОтпускаБезСохраненияЗП КАК КалендарныеДниОтпускаБезСохраненияЗП,
	//|	НачисленияУдержанияПоРаботникам.КалендарныеДниОтпускПоБеременностиИРодам КАК КалендарныеДниОтпускПоБеременностиИРодам,
	//|	НачисленияУдержанияПоРаботникам.КодКатегорииНачисления КАК КодКатегорииНачисления
	//|ПОМЕСТИТЬ ВТНачисленияУдержания
	//|ИЗ ВТНачисленияУдержанияПоРаботникам КАК НачисленияУдержанияПоРаботникам
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	СУММА(НачисленияУдержания.Результат) КАК Результат,
	//|	НачисленияУдержания.Начисление
	//|ИЗ
	//|	ВТНачисленияУдержания КАК НачисленияУдержания
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	НачисленияУдержания.Начисление
	//|";
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Пока Выборка.Следующий() Цикл
	//	
	//	Если Выборка.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛистаЗаСчетРаботодателя Тогда
	//		
	//		БольничныеПредприятие = БольничныеПредприятие + Выборка.Результат;
	//		
	//	ИначеЕсли Выборка.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоЛиста Тогда
	//		
	//		БольничныеФСС = БольничныеФСС + Выборка.Результат;
	//		
	//	ИначеЕсли Выборка.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаБольничногоНесчастныйСлучайНаПроизводстве Тогда
	//		
	//		БольничныеФССНесчСлучай = БольничныеФССНесчСлучай + Выборка.Результат;
	//		
	//	ИначеЕсли Выборка.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоДоговоруГПХ Тогда	
	//		
	//		ГПХ = ГПХ + Выборка.Результат; 
	//		
	//	ИначеЕсли Выборка.Начисление.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОтпускПоБеременностиИРодам Тогда	
	//		
	//		ОтпускБеременностьИРоды = ОтпускБеременностьИРоды + Выборка.Результат; 
	//	Иначе
	//		// все остальное попадает в п. 1.1.
	//		Зарплата = Зарплата + Выборка.Результат;
	//		
	//	КонецЕсли;
	//	
	//КонецЦикла; 

	//СтруктураДанныхТаблица1.R011G3 = Зарплата;
	//СтруктураДанныхТаблица1.R012G3 = ГПХ;
	//СтруктураДанныхТаблица1.R013G3 = БольничныеПредприятие;
	//СтруктураДанныхТаблица1.R014G3 = БольничныеФСС + БольничныеФССНесчСлучай;
	//СтруктураДанныхТаблица1.R015G3 = ОтпускБеременностьИРоды;
	//
	////////////////////////////////////////////////////////////////////	
	//
	//
	//// Таблица 5 - трудовые отношения
	//ДанныеФормы 	= ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы5];
	//СтруктураГруппы = ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		

	//СтруктураРеквизитовФормы.мИдГруппы5 = "T5T1R";
	//
	//Запрос.Текст = "ВЫБРАТЬ
	//|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
	//|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
	//|	ВЫБОР
	//|		КОГДА СотрудникиОрганизации.ДатаПриема МЕЖДУ &ДатаНач И &ДатаКон
	//|			ТОГДА СотрудникиОрганизации.ДатаПриема
	//|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	//|	КОНЕЦ КАК ДатаНачала,
	//|	ВЫБОР
	//|		КОГДА СотрудникиОрганизации.ДатаУвольнения МЕЖДУ &ДатаНач И &ДатаКон
	//|			ТОГДА СотрудникиОрганизации.ДатаУвольнения
	//|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	//|	КОНЕЦ КАК ДатаОкончания,
	//|	ВЫБОР
	//|		КОГДА СотрудникиОрганизации.ДатаУвольнения МЕЖДУ &ДатаНач И &ДатаКон
	//|			ТОГДА СотрудникиОрганизации.ПриказОбУвольненииСтатьяКЗоТ
	//|		ИНАЧЕ Неопределено
	//|	КОНЕЦ КАК ПриказОбУвольненииСтатьяКЗоТ,
	//|	ВЫБОР
	//|		КОГДА СотрудникиОрганизации.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	//|			ТОГДА 1
	//|		КОГДА СотрудникиОрганизации.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы) И 
	//|			ЕСТЬNULL(НачисленияУдержанияПоРаботникам.КатегорияНачисленияИлиНеоплаченногоВремени,0) = ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоДоговоруГПХ) 
	//|          	ТОГДА 3
	//|		ИНАЧЕ 2
	//|	КОНЕЦ КАК Категория
	//|ПОМЕСТИТЬ ВТПериодыИКатегорииСотрудников
	//|ИЗ
	//|ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияУдержанияПоРаботникам КАК НачисленияУдержанияПоРаботникам 
	//|		ПО СотрудникиОрганизации.Сотрудник = НачисленияУдержанияПоРаботникам.Сотрудник
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ФизическоеЛицо";
	//Запрос.Выполнить();
	//
	//Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ПериодыИКатегорииСотрудников.ФизическоеЛицо КАК ФизическоеЛицо 
	//|ПОМЕСТИТЬ ВТОсновноеМестоРаботы
	//|ИЗ
	//|	ВТПериодыИКатегорииСотрудников КАК ПериодыИКатегорииСотрудников
	//|ГДЕ ПериодыИКатегорииСотрудников.Категория = 1
	//|			
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ФизическоеЛицо";
	//Запрос.Выполнить();
	//
	//Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
	//|	СотрудникиОрганизации.ДатаСозданияРабочегоМеста КАК ДатаСозданияРабочегоМеста
	//|ПОМЕСТИТЬ ВТПринятыхНаНовоеРабочееМесто
	//|ИЗ
	//|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
	//|ГДЕ СотрудникиОрганизации.ПринятНаНовоеРабочееМесто = ИСТИНА
	//|			
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ФизическоеЛицо";
	//Запрос.Выполнить();


	//Запрос.Текст = "ВЫБРАТЬ
	//|	ПериодыИКатегорииСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	//|	ПериодыИКатегорииСотрудников.Сотрудник КАК Сотрудник, 
	//|	ПериодыИКатегорииСотрудников.ДатаНачала КАК ДатаНачала,
	//|	ПериодыИКатегорииСотрудников.ДатаОкончания КАК ДатаОкончания,
	//|	ПериодыИКатегорииСотрудников.ПриказОбУвольненииСтатьяКЗоТ КАК ПриказОбУвольненииСтатьяКЗоТ,
	//|	ПериодыИКатегорииСотрудников.Категория КАК Категория
	//|ПОМЕСТИТЬ ВТПринятыеУволенные
	//|ИЗ
	//|	ВТПериодыИКатегорииСотрудников КАК ПериодыИКатегорииСотрудников
	//|ГДЕ ПериодыИКатегорииСотрудников.ДатаНачала МЕЖДУ &ДатаНач И &ДатаКон
	//|				ИЛИ ПериодыИКатегорииСотрудников.ДатаОкончания МЕЖДУ &ДатаНач И &ДатаКон
	//|			
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ФизическоеЛицо";
	//Запрос.Выполнить();
	//
	//Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	НачисленияУдержания.ФизическоеЛицо КАК ФизическоеЛицо,
	//|   ПериодыИКатегорииСотрудников.Категория КАК Категория
	//|ПОМЕСТИТЬ ВТГПХПоОсновномуМР
	//|ИЗ
	//|	ВТНачисленияУдержания КАК НачисленияУдержания
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыИКатегорииСотрудников КАК ПериодыИКатегорииСотрудников
	//|		ПО НачисленияУдержания.ФизическоеЛицо = ПериодыИКатегорииСотрудников.ФизическоеЛицо
	//|ГДЕ
	//|	НачисленияУдержания.КатегорияНачисленияИлиНеоплаченногоВремени В (ЗНАЧЕНИЕ(Перечисление.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоДоговоруГПХ))
	//|   И ПериодыИКатегорииСотрудников.Категория = 1";

	//Запрос.Выполнить();
	//
	//Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ВТПринятыеУволенныеВТекущемПериоде.ФизическоеЛицо КАК ФизическоеЛицо,
	//|	ВТФизическиеЛица.ФизическоеЛицо.КодПоДРФО КАК КодПоДРФО,
	//|	ВТПринятыеУволенныеВТекущемПериоде.ДатаНачала КАК ДатаНачала,
	//|	ВТПринятыеУволенныеВТекущемПериоде.ДатаОкончания КАК ДатаОкончания,
	//|	ВТПринятыеУволенныеВТекущемПериоде.ПриказОбУвольненииСтатьяКЗоТ КАК ПриказОбУвольненииСтатьяКЗоТ,
	//|	ВТФизическиеЛица.Гражданин,
	//|	ВТФизическиеЛица.Фамилия КАК Фамилия,
	//|	ВТФизическиеЛица.Имя КАК Имя,
	//|	ВТФизическиеЛица.Отчество КАК Отчество,
	//|	ВЫБОР
	//|		КОГДА ЕСТЬNULL(НачисленияУдержания.КодКатегорииНачисления, ВТПринятыеУволенныеВТекущемПериоде.Категория) = 3
	//|			ТОГДА ЕСТЬNULL(ГПХПоОсновномуМР.Категория, 0)
	//|	КОНЕЦ КАК ГПХПоОснМестуРаботы,
	//|	ЕСТЬNULL(НачисленияУдержания.КодКатегорииНачисления, ВТПринятыеУволенныеВТекущемПериоде.Категория) КАК Категория,
	//|   ВЫБОР
	//|       КОГДА ЕСТЬNULL(НачисленияУдержания.КодКатегорииНачисления, ВТПринятыеУволенныеВТекущемПериоде.Категория) = 1
	//|         ИЛИ ЕСТЬNULL(НачисленияУдержания.КодКатегорииНачисления, ВТПринятыеУволенныеВТекущемПериоде.Категория) = 2
	//|           ТОГДА ПринятыхНаНовоеРабочееМесто.ДатаСозданияРабочегоМеста
	//|   КОНЕЦ КАК ДатаСозданияРабочегоМеста
	//|ПОМЕСТИТЬ ВТДанныеПоНачислениямПринятымУволенным
	//|ИЗ
	//|	ВТПринятыеУволенные КАК ВТПринятыеУволенныеВТекущемПериоде
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ВТФизическиеЛица
	//|		ПО ВТПринятыеУволенныеВТекущемПериоде.ФизическоеЛицо = ВТФизическиеЛица.ФизическоеЛицо
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияУдержанияПоРаботникам КАК НачисленияУдержания
	//|		ПО ВТПринятыеУволенныеВТекущемПериоде.Сотрудник = НачисленияУдержания.Сотрудник
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГПХПоОсновномуМР КАК ГПХПоОсновномуМР
	//|		ПО ВТПринятыеУволенныеВТекущемПериоде.ФизическоеЛицо = ГПХПоОсновномуМР.ФизическоеЛицо
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПринятыхНаНовоеРабочееМесто КАК ПринятыхНаНовоеРабочееМесто
	//|		ПО ВТПринятыеУволенныеВТекущемПериоде.ФизическоеЛицо = ПринятыхНаНовоеРабочееМесто.ФизическоеЛицо
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ВТДанныеПоНачислениямПринятымУволенным.ФизическоеЛицо,
	//|	ВТДанныеПоНачислениямПринятымУволенным.ДатаНачала,
	//|	ВТДанныеПоНачислениямПринятымУволенным.ДатаОкончания,
	//|	ВТДанныеПоНачислениямПринятымУволенным.ПриказОбУвольненииСтатьяКЗоТ КАК ПриказОбУвольненииСтатьяКЗоТ,
	//|	ВТДанныеПоНачислениямПринятымУволенным.Категория,
	//|	ВТДанныеПоНачислениямПринятымУволенным.КодПоДРФО,
	//|	ВТДанныеПоНачислениямПринятымУволенным.Гражданин,
	//|	ВТДанныеПоНачислениямПринятымУволенным.Фамилия КАК Фамилия,
	//|	ВТДанныеПоНачислениямПринятымУволенным.Имя КАК Имя,
	//|	ВТДанныеПоНачислениямПринятымУволенным.Отчество КАК Отчество,
	//|	ВТДанныеПоНачислениямПринятымУволенным.ГПХПоОснМестуРаботы,
	//|	ВТДанныеПоНачислениямПринятымУволенным.ДатаСозданияРабочегоМеста
	//|ИЗ
	//|	ВТДанныеПоНачислениямПринятымУволенным КАК ВТДанныеПоНачислениямПринятымУволенным
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Фамилия,
	//|	Имя,
	//|	Отчество,
	//|	КодПоДРФО";

	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Номер = 0;
	//
	//Пока Выборка.Следующий() Цикл
	//	Если ЗначениеЗаполнено(Выборка.ДатаНачала) И ЗначениеЗаполнено(Выборка.ДатаОкончания) И НачалоДня(Выборка.ДатаНачала) = НачалоДня(Выборка.ДатаОкончания) Тогда
	//	    // прием и увольнение в один день - отражать нечего
	//		Продолжить;
	//	КонецЕсли;	
	//	Если Номер > 0 Тогда
	//		Строка = СтруктураГруппы.Добавить();
	//	Иначе
	//		Строка = СтруктураГруппы[0];
	//	КонецЕсли;
	//	
	//	//Строка["T5T1RXXXXG9S"]  	= Выборка.КодПоДРФО;
	//	Строка["T5T1RXXXXG9S"]  	= ОбработатьДРФО(Выборка.КодПоДРФО);
	//	Строка["T5T1RXXXXG6"]  		= Выборка.Гражданин;
	//	Строка["T5T1RXXXXG7"]  		= Выборка.Категория;
	//	Строка["T5T1RXXXXG8"]  		= Выборка.ГПХПоОснМестуРаботы;
	//	Строка["T5T1RXXXXG101S"]  	= Выборка.Фамилия;
	//	Строка["T5T1RXXXXG102S"]  	= Выборка.Имя;
	//	Строка["T5T1RXXXXG103S"]  	= Выборка.Отчество;
	//	Строка["T5T1RXXXXG111D"]  	= Выборка.ДатаНачала;
	//	Строка["T5T1RXXXXG112D"]  	= Выборка.ДатаОкончания;
	//	
	//	Если ЗначениеЗаполнено(Выборка.ДатаНачала) Тогда
	//		ДатаСозданияРМ = Выборка.ДатаСозданияРабочегоМеста;
	//		Строка["T5T1RXXXXG12D"]  = ДатаСозданияРМ;
	//	КонецЕсли;		
	//	
	//	Строка["T5T1RXXXXG13S"]  	= Выборка.ПриказОбУвольненииСтатьяКЗоТ;
	//	Номер = Номер + 1;
	//	
	//КонецЦикла;
	//ЗначениеВРеквизитФормы(СтруктураГруппы, СтруктураРеквизитовФормы.мИдГруппы5);
	//
	//ДанныеФормы 	= ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы6];
	//СтруктураГруппы = ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		

	//СтруктураРеквизитовФормы.мИдГруппы6 = "T6T1R";
	//Запрос.Текст = "ВЫБРАТЬ
	//|	ПараметрыКатегорийЕСВСрезПоследних.Категория,
	//|	ПараметрыКатегорийЕСВСрезПоследних.Код КАК КодКатегорииЗЛ,
	//|	ПараметрыКатегорийЕСВСрезПоследних.Вид
	//|ПОМЕСТИТЬ ВТКодыКатегорийЗЛ
	//|ИЗ
	//|	РегистрСведений.ПараметрыКатегорийЕСВ.СрезПоследних(&ДатаКон, ) КАК ПараметрыКатегорийЕСВСрезПоследних";
	//Запрос.Выполнить();
	//
	//Запрос.Текст = "ВЫБРАТЬ
	//|	КодыКатегорийЗЛ.КодКатегорииЗЛ КАК КодКатегорииЗЛ,
	//|	ЕСВСотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	//|	ЕСВСотрудники.ФизическоеЛицо.Пол КАК ФизическоеЛицоПол,
	//|	ЕСВСотрудники.ФизическоеЛицо.КодПоДРФО КАК КодПоДРФО,
	//|	ЕСВСотрудники.ТипНачисления КАК ТипНачисления,
	//|	ЕСВСотрудники.Период КАК Период,
	//|	ЕСВСотрудники.База КАК База,
	//|	ЕСВСотрудники.БазаОтпускные КАК БазаОтпускные,
	//|	ЕСВСотрудники.БазаВзноса КАК БазаВзноса,
	//|	ЕСВСотрудники.БазаДоначисление КАК ДоначислениеФОТ,
	//|	ЕСВСотрудники.СуммаВзноса КАК НалогФОТ,
	//|	ЕСВСотрудники.СуммаВзносаДоначисление КАК ДоначислениеНалогФОТ,
	//|	ЕСВСотрудники.ВидЕСВ КАК ВидЕСВ
	//|ПОМЕСТИТЬ ВТЕСВФОТ
	//|ИЗ
	//|	ВТЕСВПоСотрудникам КАК ЕСВСотрудники
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКодыКатегорийЗЛ КАК КодыКатегорийЗЛ
	//|		ПО ЕСВСотрудники.КатегорияЕСВ = КодыКатегорийЗЛ.Категория
	//|			И ЕСВСотрудники.ВидЕСВ = КодыКатегорийЗЛ.Вид
	//|ГДЕ
	//|	ЕСВСотрудники.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаВзносов.ВзносыФОТ)
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ФизическоеЛицо,
	//|	Период,
	//|	КодКатегорииЗЛ,
	//|	ТипНачисления
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	КодыКатегорийЗЛ.КодКатегорииЗЛ КАК КодКатегорииЗЛ,
	//|	ЕСВСотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	//|	ЕСВСотрудники.Период КАК Период,
	//|	СУММА(ЕСВСотрудники.СуммаВзноса) КАК Налог
	//|ПОМЕСТИТЬ ВТЕСВСотрудников
	//|ИЗ
	//|	ВТЕСВПоСотрудникам КАК ЕСВСотрудники
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКодыКатегорийЗЛ КАК КодыКатегорийЗЛ
	//|		ПО ЕСВСотрудники.КатегорияЕСВ = КодыКатегорийЗЛ.Категория
	//|			И ЕСВСотрудники.ВидЕСВ = КодыКатегорийЗЛ.Вид
	//|ГДЕ
	//|	ЕСВСотрудники.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаВзносов.Взносы)
	//|	И ЕСВСотрудники.СуммаВзноса <> 0
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	КодыКатегорийЗЛ.КодКатегорииЗЛ,
	//|	ЕСВСотрудники.ФизическоеЛицо,
	//|	ЕСВСотрудники.Период
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	ФизическоеЛицо,
	//|	Период
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	ЕСВФОТ.ФизическоеЛицо,
	//|	ЕСВФОТ.КодПоДРФО КАК КодПоДРФО,
	//|	ЕСВФОТ.ТипНачисления,
	//|	ЕСВФОТ.Период,
	//|	ЕСВФОТ.КодКатегорииЗЛ,
	//|	ВТФизическиеЛица.Гражданин,
	//|	ВТФизическиеЛица.Фамилия КАК Фамилия,
	//|	ВТФизическиеЛица.Имя КАК Имя,
	//|	ВТФизическиеЛица.Отчество КАК Отчество,
	//|	ЕСВФОТ.ВидЕСВ КАК ВидЕСВ,
	//|	ЕСВФОТ.НалогФОТ КАК НалогФОТ,
	//|	ЕСВФОТ.БазаОтпускные КАК РезультатОтпускные,
	//|	ЕСВФОТ.БазаВзноса КАК РезультатСПределом,
	//|	ЕСВФОТ.База КАК Результат,
	//|	ЕСТЬNULL(ЕСВСотрудников.Налог, 0) КАК Налог,
	//|	ЕСВФОТ.ДоначислениеФОТ КАК ДоначислениеФОТ,
	//|	ЕСВФОТ.ДоначислениеНалогФОТ КАК ДоначислениеНалогФОТ,
	//|	СУММА(НачисленияУдержания.КалендарныеДниБольничные) КАК КалендарныеДниБольничные,
	//|	СУММА(НачисленияУдержания.КалендарныеДниОтпускаБезСохраненияЗП) КАК КалендарныеДниОтпускаБезСохраненияЗП,
	//|	СУММА(НачисленияУдержания.КалендарныеДниОтпускПоБеременностиИРодам) КАК КалендарныеДниОтпускПоБеременностиИРодам,
	//|	ВЫБОР
	//|		КОГДА ЕСВФОТ.ВидЕСВ В (ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ПоДоговорамГПХ))
	//|			ТОГДА 0
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА ЕСТЬNULL(ОсновноеМестоРаботы.ФизическоеЛицо, 0) = 0
	//|					ТОГДА 0
	//|				ИНАЧЕ 1
	//|			КОНЕЦ
	//|	КОНЕЦ КАК ПризнакНаличияТрудовойКнижки,
	//|	ВЫБОР
	//|		КОГДА ЕСВФОТ.ВидЕСВ В (ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ПоДоговорамГПХ))
	//|			ТОГДА 0
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА ЕСТЬNULL(ПринятыхНаНовоеРабочееМесто.ФизическоеЛицо, 0) = 0
	//|					ТОГДА 0
	//|				ИНАЧЕ 1
	//|			КОНЕЦ
	//|	КОНЕЦ КАК ПринятНаНовоеРабочееМесто,
	//|	ВЫБОР
	//|		КОГДА ДанныеПоНачислениямПринятымУволенным.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
	//|				ИЛИ ДанныеПоНачислениямПринятымУволенным.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	//|			ТОГДА ВЫБОР
	//|					КОГДА ДанныеПоНачислениямПринятымУволенным.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	//|						ТОГДА &ДнейВМесяце
	//|					КОГДА ДанныеПоНачислениямПринятымУволенным.ДатаОкончания > КОНЕЦПЕРИОДА(&ДатаНач, МЕСЯЦ)
	//|						ТОГДА &ДнейВМесяце
	//|				КОГДА ДанныеПоНачислениямПринятымУволенным.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
	//|					ТОГДА ДЕНЬ(ДанныеПоНачислениямПринятымУволенным.ДатаОкончания) - 1
	//|				ИНАЧЕ ДЕНЬ(ДанныеПоНачислениямПринятымУволенным.ДатаОкончания)
	//|				КОНЕЦ - ВЫБОР
	//|					КОГДА ДанныеПоНачислениямПринятымУволенным.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1) 
	//|						ТОГДА 1
	//|					КОГДА ДанныеПоНачислениямПринятымУволенным.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	//|						ТОГДА ДЕНЬ(ДанныеПоНачислениямПринятымУволенным.ДатаНачала) - 1
	//|					ИНАЧЕ ДЕНЬ(ДанныеПоНачислениямПринятымУволенным.ДатаНачала)
	//|				КОНЕЦ + 1
	//|		ИНАЧЕ &ДнейВМесяце
	//|	КОНЕЦ КАК ОтработанныеДни,
	//|	ПринятыхНаНовоеРабочееМесто.ДатаСозданияРабочегоМеста КАК ДатаСозданияРабочегоМеста
	//|ИЗ
	//|	ВТЕСВФОТ КАК ЕСВФОТ
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияУдержания КАК НачисленияУдержания
	//|		ПО ЕСВФОТ.ФизическоеЛицо = НачисленияУдержания.ФизическоеЛицо
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеПоНачислениямПринятымУволенным КАК ДанныеПоНачислениямПринятымУволенным
	//|		ПО ЕСВФОТ.ФизическоеЛицо = ДанныеПоНачислениямПринятымУволенным.ФизическоеЛицо
	////|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияУдержания КАК Начисления
	////|		ПО ЕСВФОТ.ФизическоеЛицо = Начисления.ФизическоеЛицо
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ВТФизическиеЛица
	//|		ПО ЕСВФОТ.ФизическоеЛицо = ВТФизическиеЛица.ФизическоеЛицо
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЕСВСотрудников КАК ЕСВСотрудников
	//|		ПО ЕСВФОТ.ФизическоеЛицо = ЕСВСотрудников.ФизическоеЛицо
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОсновноеМестоРаботы КАК ОсновноеМестоРаботы
	//|		ПО ЕСВФОТ.ФизическоеЛицо = ОсновноеМестоРаботы.ФизическоеЛицо
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПринятыхНаНовоеРабочееМесто КАК ПринятыхНаНовоеРабочееМесто
	//|		ПО ЕСВФОТ.ФизическоеЛицо = ПринятыхНаНовоеРабочееМесто.ФизическоеЛицо
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ЕСВФОТ.ФизическоеЛицо,
	//|	ЕСВФОТ.КодПоДРФО,
	//|	ЕСВФОТ.ТипНачисления,
	//|	ЕСВФОТ.Период,
	//|	ЕСВФОТ.КодКатегорииЗЛ,
	//|	ВТФизическиеЛица.Гражданин,
	//|	ВТФизическиеЛица.Фамилия,
	//|	ВТФизическиеЛица.Имя,
	//|	ВТФизическиеЛица.Отчество,
	//|	ЕСВФОТ.ВидЕСВ,
	//|	ЕСВФОТ.НалогФОТ,
	//|	ЕСВФОТ.БазаОтпускные,
	//|	ЕСВФОТ.БазаВзноса,
	//|	ЕСВФОТ.База,
	//|	ЕСТЬNULL(ЕСВСотрудников.Налог, 0),
	//|	ЕСВФОТ.ДоначислениеФОТ,
	//|	ЕСВФОТ.ДоначислениеНалогФОТ,
	//|	ВЫБОР
	//|		КОГДА ЕСВФОТ.ВидЕСВ В (ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ПоДоговорамГПХ))
	//|			ТОГДА 0
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА ЕСТЬNULL(ОсновноеМестоРаботы.ФизическоеЛицо, 0) = 0
	//|					ТОГДА 0
	//|				ИНАЧЕ 1
	//|			КОНЕЦ
	//|	КОНЕЦ,
	//|	ВЫБОР
	//|		КОГДА ЕСВФОТ.ВидЕСВ В (ЗНАЧЕНИЕ(Перечисление.ВидыЕСВ.ПоДоговорамГПХ))
	//|			ТОГДА 0
	//|		ИНАЧЕ ВЫБОР
	//|				КОГДА ЕСТЬNULL(ПринятыхНаНовоеРабочееМесто.ФизическоеЛицо, 0) = 0
	//|					ТОГДА 0
	//|				ИНАЧЕ 1
	//|			КОНЕЦ
	//|	КОНЕЦ,
	//|	ПринятыхНаНовоеРабочееМесто.ДатаСозданияРабочегоМеста, 
	//|	ВЫБОР
	//|		КОГДА ДанныеПоНачислениямПринятымУволенным.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
	//|				ИЛИ ДанныеПоНачислениямПринятымУволенным.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	//|			ТОГДА ВЫБОР
	//|					КОГДА ДанныеПоНачислениямПринятымУволенным.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	//|						ТОГДА &ДнейВМесяце
	//|					КОГДА ДанныеПоНачислениямПринятымУволенным.ДатаОкончания > КОНЕЦПЕРИОДА(&ДатаНач, МЕСЯЦ)
	//|						ТОГДА &ДнейВМесяце
	//|				КОГДА ДанныеПоНачислениямПринятымУволенным.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
	//|					ТОГДА ДЕНЬ(ДанныеПоНачислениямПринятымУволенным.ДатаОкончания) - 1
	//|				ИНАЧЕ ДЕНЬ(ДанныеПоНачислениямПринятымУволенным.ДатаОкончания)
	//|				КОНЕЦ - ВЫБОР
	//|					КОГДА ДанныеПоНачислениямПринятымУволенным.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1) 
	//|						ТОГДА 1
	//|					КОГДА ДанныеПоНачислениямПринятымУволенным.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	//|						ТОГДА ДЕНЬ(ДанныеПоНачислениямПринятымУволенным.ДатаНачала) - 1
	//|					ИНАЧЕ ДЕНЬ(ДанныеПоНачислениямПринятымУволенным.ДатаНачала)
	//|				КОНЕЦ + 1
	//|		ИНАЧЕ &ДнейВМесяце
	//|	КОНЕЦ
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Фамилия,
	//|	Имя,
	//|	Отчество,
	//|	КодПоДРФО";
	//Выборка = Запрос.Выполнить().Выбрать();	
	//
	//Номер = 0;
	//Пока Выборка.Следующий() Цикл
	//	Результат = Выборка.Результат - Выборка.РезультатОтпускные;
	//	РезультатОтпускные = Выборка.РезультатОтпускные;
	//	РезультатСПределом = МИН(Выборка.РезультатСПределом - Выборка.ДоначислениеФОТ,Результат);
	//	РезультатСПределомОтпускные = Выборка.РезультатСПределом - Выборка.ДоначислениеФОТ - РезультатСПределом;
	//	КоэффициентДеления = ?(Выборка.РезультатСПределом - Выборка.ДоначислениеФОТ = 0 ИЛИ РезультатСПределом = Выборка.РезультатСПределом - Выборка.ДоначислениеФОТ, 1, РезультатСПределом/(Выборка.РезультатСПределом - Выборка.ДоначислениеФОТ));
	//	Налог 		   = Окр(Выборка.Налог*КоэффициентДеления, 2);
	//	НалогОтпускные = Выборка.Налог - Налог;
	//	ДоначислениеФОТ = Выборка.ДоначислениеФОТ;
	//	ДоначислениеНалогФОТ = Выборка.ДоначислениеНалогФОТ;
	//	
	//	НалогФОТ        = Окр((Выборка.НалогФОТ-ДоначислениеНалогФОТ)*КоэффициентДеления, 2);
	//	НалогФОТОтпускные = Окр((Выборка.НалогФОТ-ДоначислениеНалогФОТ) - НалогФОТ,2);

	//	Если Номер > 0 Тогда
	//		Строка = СтруктураГруппы.Добавить();
	//	Иначе
	//		Строка = СтруктураГруппы[0];
	//	КонецЕсли;
	//	
	//	Строка["T6T1RXXXXG6"]  		= Выборка.Гражданин;
	//	Строка["T6T1RXXXXG7"]  		= КодПолаФизическогоЛица(Выборка.ФизическоеЛицо.Пол);
	//	
	//	//Строка["T6T1RXXXXG8S"]	= Выборка.КодПоДРФО;
	//	Строка["T6T1RXXXXG8S"] 		= ОбработатьДРФО(Выборка.КодПоДРФО);
	//	Строка["T6T1RXXXXG9"]  		= Выборка.КодКатегорииЗЛ;
	//	
	//	Если Выборка.Результат = Выборка.РезультатОтпускные И Выборка.РезультатОтпускные > 0 Тогда
	//		//Начислен только отпуск
	//		Строка["T6T1RXXXXG10"]  	= 10;
	//	Иначе	
	//		Строка["T6T1RXXXXG10"]  	= Выборка.ТипНачисления;
	//	КонецЕсли;	
	//	Строка["T6T1RXXXXG111D"]  	= Выборка.Период;
	//	
	//	Строка["T6T1RXXXXG121S"]  	= Выборка.Фамилия;
	//	Строка["T6T1RXXXXG122S"]  	= Выборка.Имя;
	//	Строка["T6T1RXXXXG123S"]  	= Выборка.Отчество;
	//	
	//	Если Выборка.ВидЕСВ = Перечисления.ВидыЕСВ.Больничные Тогда
	//		Строка["T6T1RXXXXG13"]      = Выборка.КалендарныеДниБольничные;
	//	Иначе
	//		Строка["T6T1RXXXXG13"]      = 0;
	//	КонецЕсли;	
	//	Если Выборка.ВидЕСВ = Перечисления.ВидыЕСВ.ОсновнаяЗарплата  Тогда
	//		Строка["T6T1RXXXXG14"]      = Выборка.КалендарныеДниОтпускаБезСохраненияЗП;
	//	Иначе
	//		Строка["T6T1RXXXXG14"]      = 0;
	//	КонецЕсли;
	//	Если Выборка.ВидЕСВ = Перечисления.ВидыЕСВ.ОсновнаяЗарплата И Выборка.Период <= СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета Тогда
	//		Строка["T6T1RXXXXG15"]      = Выборка.ОтработанныеДни;
	//	Иначе
	//		Строка["T6T1RXXXXG15"]      = 0;
	//	Конецесли;	
	//	Если Выборка.ВидЕСВ = Перечисления.ВидыЕСВ.Декретные Тогда
	//		Строка["T6T1RXXXXG16"]      = Выборка.КалендарныеДниОтпускПоБеременностиИРодам;
	//	Иначе
	//		Строка["T6T1RXXXXG16"]      = 0;
	//	КонецЕсли;	
	//	Строка["T6T1RXXXXG22"]      = Выборка.ПризнакНаличияТрудовойКнижки;
	//	//Если в отчетном периоде кроме ЗП есть отпускные - показываем их отдельной строкой с типом 10
	//	Если Результат <> 0 И РезультатОтпускные <> 0 И Выборка.Период = НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
	//    	Строка["T6T1RXXXXG17"]	= Результат;
	//		Строка["T6T1RXXXXG18"] 	= РезультатСПределом;
	//		Строка["T6T1RXXXXG20"] 	= Налог;
	//		Строка["T6T1RXXXXG21"] 	= НалогФОТ;
	//	Иначе
	//		Строка["T6T1RXXXXG17"]	= Выборка.Результат;
	//		Строка["T6T1RXXXXG18"] 	= Выборка.РезультатСПределом - Выборка.ДоначислениеФОТ;
	//		Строка["T6T1RXXXXG20"]  = Выборка.Налог;
	//		Если Результат = 0 И РезультатОтпускные <> 0 Тогда 
	//			//Это отпускные за следующий период
	//			Строка["T6T1RXXXXG21"]  = НалогФОТОтпускные;
	//		Иначе	
	//			Строка["T6T1RXXXXG21"]  = НалогФОТ;
	//		КонецЕсли;	
	//	КонецЕсли;	
	//	Строка["T6T1RXXXXG25"]  	= Выборка.ПринятНаНовоеРабочееМесто;
	//	Если  ЗначениеЗаполнено(Выборка.ДатаСозданияРабочегоМеста) 
	//		И (    Год(Выборка.ДатаСозданияРабочегоМеста) + 2 < Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)
	//		   ИЛИ Год(Выборка.ДатаСозданияРабочегоМеста) + 2 = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) 
	//		   И Месяц(Выборка.ДатаСозданияРабочегоМеста) <= Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)) Тогда
	//		Строка["T6T1RXXXXG25"] = 0;
	//	КонецЕсли;
	//	
	//	//Если в отчетном периоде кроме ЗП есть отпускные - показываем их отдельной строкой с типом 10
	//	Если Результат <> 0 И РезультатОтпускные <> 0 И Выборка.Период = НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
	//		Строка = СтруктураГруппы.Добавить();
	//        Номер = Номер + 1;
	//		
	//		Строка["T6T1RXXXXG6"]  		= Выборка.Гражданин;
	//		Строка["T6T1RXXXXG7"]  		= КодПолаФизическогоЛица(Выборка.ФизическоеЛицо.Пол);
	//		//Строка["T6T1RXXXXG8S"]	= Выборка.КодПоДРФО;
	//		Строка["T6T1RXXXXG8S"] 		= ОбработатьДРФО(Выборка.КодПоДРФО);
	//		Строка["T6T1RXXXXG9"]  		= Выборка.КодКатегорииЗЛ;
	//		Строка["T6T1RXXXXG10"]  	= 10;
	//		Строка["T6T1RXXXXG111D"]  	= Выборка.Период;
	//		
	//		Строка["T6T1RXXXXG121S"]  	= Выборка.Фамилия;
	//		Строка["T6T1RXXXXG122S"]  	= Выборка.Имя;
	//		Строка["T6T1RXXXXG123S"]  	= Выборка.Отчество;
	//		
	//		Строка["T6T1RXXXXG13"]      = 0;
	//		Строка["T6T1RXXXXG14"]      = 0;
	//		Строка["T6T1RXXXXG15"]      = 0;
	//		Строка["T6T1RXXXXG16"]      = 0;
	//		
	//		Строка["T6T1RXXXXG17"]      = РезультатОтпускные;
	//		Строка["T6T1RXXXXG18"]      = РезультатСПределомОтпускные;
	//		
	//		Строка["T6T1RXXXXG20"]  	= НалогОтпускные;
	//		Строка["T6T1RXXXXG21"]  	= НалогФОТОтпускные;
	//		
	//		Строка["T6T1RXXXXG22"]      = Выборка.ПризнакНаличияТрудовойКнижки;
	//		Строка["T6T1RXXXXG25"] 	    = Выборка.ПринятНаНовоеРабочееМесто;
	//		Если  ЗначениеЗаполнено(Выборка.ДатаСозданияРабочегоМеста) 
	//			И (    Год(Выборка.ДатаСозданияРабочегоМеста) + 2 < Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)
	//			   ИЛИ Год(Выборка.ДатаСозданияРабочегоМеста) + 2 = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) 
	//			   И Месяц(Выборка.ДатаСозданияРабочегоМеста) <= Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)) Тогда
	//			Строка["T6T1RXXXXG25"] = 0;
	//		КонецЕсли;
	//		
	//	КонецЕсли;	
	//	
	//	//Если есть доначисления - показываем их отдельной строкой с типом 13
	//	Если ДоначислениеФОТ <> 0 ИЛИ ДоначислениеНалогФОТ <> 0 Тогда
	//		Если Строка["T6T1RXXXXG17"] = 0 И Строка["T6T1RXXXXG18"] = 0 И Строка["T6T1RXXXXG20"] = 0 Тогда
	//			//В этой строке ничего нет, используем ту же строку
	//			Номер = Номер - 1;
	//		Иначе
	//			Строка = СтруктураГруппы.Добавить();
	//		КонецЕсли;	
	//        Номер = Номер + 1;
	//		
	//		Строка["T6T1RXXXXG6"]  		= Выборка.Гражданин;
	//		Строка["T6T1RXXXXG7"]  		= КодПолаФизическогоЛица(Выборка.ФизическоеЛицо.Пол);
	//		//Строка["T6T1RXXXXG8S"]	= Выборка.КодПоДРФО;
	//		Строка["T6T1RXXXXG8S"] 		= ОбработатьДРФО(Выборка.КодПоДРФО);
	//		
	//		Строка["T6T1RXXXXG9"]  		= Выборка.КодКатегорииЗЛ;
	//		Строка["T6T1RXXXXG10"]  	= 13;
	//		Строка["T6T1RXXXXG111D"]  	= Выборка.Период;
	//		
	//		Строка["T6T1RXXXXG121S"]  	= Выборка.Фамилия;
	//		Строка["T6T1RXXXXG122S"]  	= Выборка.Имя;
	//		Строка["T6T1RXXXXG123S"]  	= Выборка.Отчество;
	//		
	//		Строка["T6T1RXXXXG13"]      = 0;
	//		Строка["T6T1RXXXXG14"]      = 0;
	//		Строка["T6T1RXXXXG15"]      = 0;
	//		Строка["T6T1RXXXXG16"]      = 0;
	//		
	//		Строка["T6T1RXXXXG17"]      = 0;
	//		Строка["T6T1RXXXXG18"]      = 0;
	//		
	//		Строка["T6T1RXXXXG19"]  	= ДоначислениеФОТ;
	//		Строка["T6T1RXXXXG20"]  	= 0;
	//		Строка["T6T1RXXXXG21"]  	= ДоначислениеНалогФОТ;
	//		
	//		Строка["T6T1RXXXXG22"]      = Выборка.ПризнакНаличияТрудовойКнижки;
	//		Строка["T6T1RXXXXG25"] 	    = Выборка.ПринятНаНовоеРабочееМесто;
	//		Если  ЗначениеЗаполнено(Выборка.ДатаСозданияРабочегоМеста) 
	//			И (    Год(Выборка.ДатаСозданияРабочегоМеста) + 2 < Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)
	//			   ИЛИ Год(Выборка.ДатаСозданияРабочегоМеста) + 2 = Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) 
	//			   И Месяц(Выборка.ДатаСозданияРабочегоМеста) <= Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)) Тогда
	//			Строка["T6T1RXXXXG25"] = 0;
	//		КонецЕсли;
	//	КонецЕсли;	

	//	Номер = Номер + 1;
	//	
	//КонецЦикла;
	//ЗначениеВРеквизитФормы(СтруктураГруппы, СтруктураРеквизитовФормы.мИдГруппы6);

	//Запрос.Текст = "ВЫБРАТЬ
	//|    ЕСВФОТ.ФизическоеЛицо,
	//|    ЕСВФОТ.ФизическоеЛицоПол
	//|ИЗ
	//|    ВТЕСВФОТ КАК ЕСВФОТ";
	//ТаблицаКоличестваЗастрахованныхЛиц = Запрос.Выполнить().Выгрузить();
	//СтруктураДанныхТаблица1.HNACTL5 = ТаблицаКоличестваЗастрахованныхЛиц.Количество();
	//
	//НайденныеСтроки = ТаблицаКоличестваЗастрахованныхЛиц.НайтиСтроки(Новый Структура("ФизическоеЛицоПол",Перечисления.ПолФизическогоЛица.Мужской));
	//СтруктураДанныхТаблица1.HNACTL6 = НайденныеСтроки.Количество();	
	//
	//НайденныеСтроки = ТаблицаКоличестваЗастрахованныхЛиц.НайтиСтроки(Новый Структура("ФизическоеЛицоПол",Перечисления.ПолФизическогоЛица.Женский));
	//СтруктураДанныхТаблица1.HNACTL7 = НайденныеСтроки.Количество();	
	//
	

	ТаблСреднеспЧисленности = ИНАГРО_ПроведениеРасчетов.ПолучитьСреднююЧисленность(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ССЧ", "МЕСЯЦ", СтруктураРеквизитовФормы.Организация,"ШТАТ"); 
	СтруктураДанныхТаблица1.HNACTL = ТаблСреднеспЧисленности[0].Средняя;
	
	ТаблСреднеспЧисленности = ИНАГРО_ПроведениеРасчетов.ПолучитьСреднююЧисленность(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ССЧ", "МЕСЯЦ", СтруктураРеквизитовФормы.Организация,"ИНВШТАТ");
	СтруктураДанныхТаблица1.HNACTL1 = ТаблСреднеспЧисленности[0].Средняя;
	
	ТаблСреднеспЧисленности = ИНАГРО_ПроведениеРасчетов.ПолучитьСреднююЧисленность(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ССЧ", "МЕСЯЦ", СтруктураРеквизитовФормы.Организация,"ДОПГАРАНТИИШТАТ");
	СтруктураДанныхТаблица1.HNACTL2 = ТаблСреднеспЧисленности[0].Средняя;
	
	КолГПХ = 0;
	СозданоНовыхРМ = 0;
	ШтатнаяЧисленность = 0;
	
	
	ЗапросГПХ = Новый Запрос;
	ЗапросГПХ.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Работники.Сотрудник.ФизическоеЛицо
	|ИЗ  Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом КАК Работники
	|ГДЕ 
	|   Работники.Проведен
	| И Работники.ДатаОкончания >= &парамНачало
	| И Работники.ДатаНачала    <= &парамКонец
	| И Работники.Организация = &Организация
	|";	
	ЗапросГПХ.УстановитьПараметр("парамНачало",СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ЗапросГПХ.УстановитьПараметр("парамКонец",СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ЗапросГПХ.УстановитьПараметр("Организация",СтруктураРеквизитовФормы.Организация);
	
	ВыборкаГПХ = ЗапросГПХ.Выполнить().Выбрать();
	КолГПХ = ВыборкаГПХ.Количество();
	
	ЗапросШР = Новый Запрос;
	ЗапросШР.УстановитьПараметр("парамНачало",СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ЗапросШР.УстановитьПараметр("парамКонец",СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ЗапросШР.УстановитьПараметр("Организация",СтруктураРеквизитовФормы.Организация);
	
	ЗапросШР.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ШтатноеРасписаниеОрганизаций.СозданоНовыхРабочихМест) КАК СозданоНовыхРабочихМест 
	|ИЗ  РегистрСведений.ИНАГРО_ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписаниеОрганизаций
	|ГДЕ 
	| ШтатноеРасписаниеОрганизаций.Период >= &парамНачало
	| И ШтатноеРасписаниеОрганизаций.Период <= &парамКонец
	| И ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации.Владелец = &Организация
	|";	
	
	ВыборкаШР = ЗапросШР.Выполнить().Выбрать();
	Если ВыборкаШР.Следующий() Тогда
		СозданоНовыхРМ = ВыборкаШР.СозданоНовыхРабочихМест;
	КонецЕсли;	

	ЗапросШР.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ШтатноеРасписаниеОрганизаций.КоличествоСтавок) КАК КоличествоСтавок 
	|ИЗ  РегистрСведений.ИНАГРО_ШтатноеРасписаниеОрганизаций.СрезПоследних(&парамНачало, ПодразделениеОрганизации.Владелец = &Организация) КАК ШтатноеРасписаниеОрганизаций
	|";
	
	ВыборкаШР = ЗапросШР.Выполнить().Выбрать();
	Если ВыборкаШР.Следующий() Тогда
		ШтатнаяЧисленность = ВыборкаШР.КоличествоСтавок;
	КонецЕсли;
		
	СтруктураДанныхТаблица1.HNACTL3 =  ШтатнаяЧисленность;
	СтруктураДанныхТаблица1.HNACTL4 = КолГПХ;
	СтруктураДанныхТаблица1.H014G1 =  СозданоНовыхРМ;
	
	РассчитатьСуммуФактическихЗатратНаОплатуТруда();
	
	Запрос = Новый Запрос();
	
	ТаблицаНужныхСтатей_ = ТаблицаНужныхСтатей.Выгрузить();

	Запрос.УстановитьПараметр("ПарамНач",            СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ПарамКон",            СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",         СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр("МассивНужныхСтатей",  ТаблицаНужныхСтатей_.ВыгрузитьКолонку("Статья"));
	
	Запрос.Текст = "ВЫБРАТЬ
	           |    ВзносыВФондыИНалоги.Сотрудник.ФизическоеЛицо 				 КАК ФизЛицо,
			   |    ВзносыВФондыИНалоги.Сотрудник.ФизическоеЛицо.Пол			 КАК ФизЛицоПол,
			   |    ВзносыВФондыИНалоги.СтатьяНалоговойДекларации		 КАК СтатьяНалоговойДекларации,
			   |    ВзносыВФондыИНалоги.ТипНачисления		 			 КАК ТипНачисления,
	           |	СУММА(ВзносыВФондыИНалоги.БазаВзноса) 				 КАК База,
	           |	СУММА(ВзносыВФондыИНалоги.Результат)  				 КАК СуммаВзноса,
			   |	СУММА(ВзносыВФондыИНалоги.БазаДоначисление)			 КАК БазаДоначисление,
			   |	СУММА(ВзносыВФондыИНалоги.РезультатДоначисление)	 КАК СуммаВзносаДоначисление
			   |ИЗ
	           |	РегистрРасчета.ИНАГРО_ВзносыВФонды КАК ВзносыВФондыИНалоги
			   |
			   |ГДЕ
			   |    ВзносыВФондыИНалоги.ПериодРегистрации МЕЖДУ &ПарамНач И &ПарамКон
			   |  И ВзносыВФондыИНалоги.Организация = &Организация
			   |  И ВзносыВФондыИНалоги.СтатьяНалоговойДекларации В (&МассивНужныхСтатей)
	           |
			   |СГРУППИРОВАТЬ ПО 
			   |	ВзносыВФондыИНалоги.Сотрудник.ФизическоеЛицо,
			   |	ВзносыВФондыИНалоги.СтатьяНалоговойДекларации,
			   |	ВзносыВФондыИНалоги.ТипНачисления
			   |";
			   
	   
	   РезультатЗапроса = Запрос.Выполнить();
	   ТаблицаБазВзносов = РезультатЗапроса.Выгрузить();
	   ТаблицаБазВзносов.Свернуть("СтатьяНалоговойДекларации, ТипНачисления", "База, СуммаВзноса, БазаДоначисление, СуммаВзносаДоначисление");
	  
		   
	   Если НЕ РезультатЗапроса.Пустой() Тогда
		   Для Каждого СтрокаБаз Из ТаблицаБазВзносов Цикл
			   СтрокаТаблицы = ТаблицаНужныхСтатей_.Найти(СтрокаБаз.СтатьяНалоговойДекларации, "Статья");
			   Если СтрокаТаблицы <> Неопределено Тогда
				   Если СтрокаБаз.ТипНачисления < 2 Тогда
					   База = СтрокаБаз.База - СтрокаБаз.БазаДоначисление;
					   БазаДоначисление = СтрокаБаз.БазаДоначисление;
					   СуммаВзноса = СтрокаБаз.СуммаВзноса - СтрокаБаз.СуммаВзносаДоначисление;
					   СуммаВзносаДоначисление = СтрокаБаз.СуммаВзносаДоначисление;
					   
					   ДобавитьЗначениеВСтруктуру(СтруктураДанныхТаблица1, СтрокаТаблицы.ПолеБазаОсновное, База);
					   ДобавитьЗначениеВСтруктуру(СтруктураДанныхТаблица1, СтрокаТаблицы.ПолеВзносОсновное, СуммаВзноса);
					   ДобавитьЗначениеВСтруктуру(СтруктураДанныхТаблица1, СтрокаТаблицы.ПолеБазаДоначисление, БазаДоначисление);
					   ДобавитьЗначениеВСтруктуру(СтруктураДанныхТаблица1, СтрокаТаблицы.ПолеВзносДоначисление, СуммаВзносаДоначисление);
				   ИначеЕсли СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4 Тогда
					   ДобавитьЗначениеВСтруктуру(СтруктураДанныхТаблица1, СтрокаТаблицы.ПолеБазаТип24, СтрокаБаз.БазаВзноса);
					   ДобавитьЗначениеВСтруктуру(СтруктураДанныхТаблица1, СтрокаТаблицы.ПолеВзносТип24, СтрокаБаз.СуммаВзноса);
				   ИначеЕсли СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5 Тогда
					   ДобавитьЗначениеВСтруктуру(СтруктураДанныхТаблица1, СтрокаТаблицы.ПолеБазаТип35, СтрокаБаз.БазаВзноса);
					   ДобавитьЗначениеВСтруктуру(СтруктураДанныхТаблица1, СтрокаТаблицы.ПолеВзносТип35, СтрокаБаз.СуммаВзноса);
				   КонецЕсли;	
			   КонецЕсли;
		   КонецЦикла;
	   КонецЕсли;
	   
	   
	   
	   //////////////////////////////////////////////////////////////////	
	   // Таблица 5 - трудовые отношения
	   ТаблицаПриемовУвольнений = СформироватьСписокТрудовыхОтношенийТаблица5();
	   
	   //////////////////////////////////////////////////////////////////	
	   // Таблица 7 - спец стаж
	   СписокРаботниковСоСпецСтажем = СформироватьСпецСтажТаблица7(ТаблицаПриемовУвольнений);
	   
	   //////////////////////////////////////////////////////////////////	
	   // Таблицы 6 - начисления/взносы
	   СформироватьНачисленияВзносыТаблица6(СписокРаботниковСоСпецСтажем);
	   
	   Расчет(ЭтаФорма);
	   
	   Модифицированность = Истина;
	   //ИНАГРО -- 
	
КонецПроцедуры

&НаКлиенте
Процедура ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С)
	
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСтруктурыКолонокМногострочныхЧастей()
	
	Если СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов = Неопределено Тогда
		СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов = Новый Структура;	
	КонецЕсли;
	
	Для каждого Многострочка Из мСтруктураМногострочныхРазделов Цикл
		
		ИмяМногострочки = Многострочка.Ключ;
		
		ДанныеФормы 	= ЭтаФорма[Многострочка.Значение];
		Таблица 		= ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		
		
		СтруктураКолонок = Новый Массив;
		Для каждого Колонка Из Таблица.Колонки Цикл
			СтруктураКолонок.Добавить(Колонка.Имя);
		КонецЦикла;
		
		СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов.Вставить(ИмяМногострочки, СтруктураКолонок);
		
	КонецЦикла;

КонецФункции

&НаСервереБезКонтекста
Функция КодПолаФизическогоЛица(Пол)
	
	КодПола = "";
	
	Если Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
		КодПола = "Ж";
	ИначеЕсли Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
		КодПола = "Ч";
	КонецЕсли;
	
	Возврат КодПола;
	
КонецФункции

&НаКлиенте
Процедура ПоддержкаДуплекса(Команда)
	
	// инвертируем пометку и значение
	ЕстьДуплекс = СтруктураРеквизитовФормы.ЕстьДуплекс;
	
	СтруктураРеквизитовФормы.Вставить("ЕстьДуплекс", НЕ ЕстьДуплекс);
	Элементы.ЕстьДуплекс.Пометка = НЕ ЕстьДуплекс;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеФормыНаСервере();
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	// расшифровка для Звит1С
	Если  СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровки")
		И ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки) 
		И СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С") Тогда
		
		ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки),
									  СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С); 
		
	КонецЕсли;
	
	ПоказателиОтчета = Новый Структура();
	
	РеквизитыФормы = ПолучитьРеквизиты();
	Для каждого Реквизит Из РеквизитыФормы Цикл
		Если Лев(ВРЕГ(Реквизит.Имя), 15)  = ВРЕГ("СтруктураДанных") Тогда
			ПоказателиОтчета.Вставить(Сред(Реквизит.Имя, 16), ЭтаФорма[Реквизит.Имя]);		
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИдМногострочногоРаздела Из мСтруктураМногострочныхРазделов Цикл
		
		СтруктураДанных = Новый Структура;
		
		Таблица = РеквизитФормыВЗначение(ИдМногострочногоРаздела.Значение, Тип("ТаблицаЗначений"));
		КолонкиТаблицы = Таблица.Колонки;
		
		Для каждого Строка Из Таблица Цикл
			
			Для каждого Колонка Из КолонкиТаблицы Цикл
				Если  ИдМногострочногоРаздела.Значение = СтруктураРеквизитовФормы.мИдГруппы5 И Колонка.Имя = "T5T1RXXXXG111D" Тогда
					Если ЗначениеЗаполнено(Строка[Колонка.Имя]) Тогда
						ТекДень = День(Строка[Колонка.Имя]);	
					Иначе
						ТекДень = "";
					КонецЕсли;
					СтруктураДанных.Вставить("T5T1RXXXXG111" + "_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ=0"), ТекДень);
				ИначеЕсли  ИдМногострочногоРаздела.Значение = СтруктураРеквизитовФормы.мИдГруппы5 И Колонка.Имя = "T5T1RXXXXG112D" Тогда
					Если ЗначениеЗаполнено(Строка[Колонка.Имя]) Тогда
						ТекДень = День(Строка[Колонка.Имя]);	
					Иначе
						ТекДень = "";
					КонецЕсли;
					СтруктураДанных.Вставить("T5T1RXXXXG112" + "_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ=0"), ТекДень);
				ИначеЕсли  ИдМногострочногоРаздела.Значение = СтруктураРеквизитовФормы.мИдГруппы6 И Колонка.Имя = "T6T1RXXXXG111D" Тогда
					СтруктураДанных.Вставить("T6T1RXXXXG111" + "_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ=0"), Месяц(Строка[Колонка.Имя]));
					СтруктураДанных.Вставить("T6T1RXXXXG112" + "_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ=0"), Год(Строка[Колонка.Имя]));
				ИначеЕсли ИдМногострочногоРаздела.Значение = СтруктураРеквизитовФормы.мИдГруппы7 
						И (Колонка.Имя = "T7T1RXXXXG10" ИЛИ Колонка.Имя = "T7T1RXXXXG11") Тогда
					СтруктураДанных.Вставить(Колонка.Имя + "_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ=0"), День(Строка[Колонка.Имя]));
				Иначе	
					СтруктураДанных.Вставить(Колонка.Имя + "_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ=0"), Строка[Колонка.Имя]);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		ПоказателиОтчета.Вставить(ИдМногострочногоРаздела.Значение, СтруктураДанных);		
		
	КонецЦикла;	
	
	ПоказателиОтчета.Вставить("ДопПоказателиОтчета", СтруктураРеквизитовФормы.ДопПоказателиОтчетаЗвит1С);
		
	// показатели
	СписокСохранения.Вставить("ДанныеОтчета", ПоказателиОтчета);
	
	Возврат СписокСохранения;
	
КонецФункции

&НаКлиенте
Функция СоздатьДанныеОтчетаДляВыгрузки() Экспорт
	
	АдресВХранилище = СоздатьДанныеОтчетаДляВыгрузкиНаСервере();
	Возврат АдресВХранилище;

КонецФункции

&НаСервере
Функция СоздатьДанныеОтчетаДляВыгрузкиНаСервере()
	
	ДанныеОтчета = ПолучитьДанныеФормыНаСервере();
	Возврат ПоместитьВоВременноеХранилище(ДанныеОтчета, Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста	
Функция ОбработатьДРФО(Знач ДРФО)
	
	ДРФО = СОКРЛП(ДРФО);
	ДРФО = ВРЕГ(ДРФО);
	
	Если СтрДлина(ДРФО) = 8 Тогда
		
		Симв1 = Сред(ДРФО, 1, 1);
		Симв2 = Сред(ДРФО, 2, 1);
		Симв3 = Сред(ДРФО, 3);
		Если  Найти("АБВГДЕЄЖЗИІКЛМНОПРСТУФХЦЧШЩЮЯ", Симв1) > 0
			И Найти("АБВГДЕЄЖЗИІКЛМНОПРСТУФХЦЧШЩЮЯ", Симв2) > 0 Тогда
		
			Для Сч = 3 по 8 Цикл
				Если Найти("0123456789", Сред(ДРФО, Сч, 1)) = 0 Тогда
					// не соответствует формату паспорта
					Возврат ДРФО;
				КонецЕсли;
			КонецЦикла;	
			
			// к номеру паспорта добавляем "БК"
			Возврат "БК" + ДРФО;
			
		Иначе
			
			// не соответствует формату паспорта
			Возврат ДРФО;
			
		КонецЕсли;
		
	Иначе
		
		// не соответствует формату паспорта
		Возврат ДРФО;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция СоздатьТаблицуВыгружаемыхОтчетныхФорм() Экспорт

	АдресВХранилище = СоздатьТаблицуВыгружаемыхОтчетныхФормНаСервере();
	Возврат АдресВХранилище;

КонецФункции


&НаСервере
Функция СоздатьТаблицуВыгружаемыхОтчетныхФормНаСервере()

	ТаблицаСхемXML = ЗаполнитьТаблицуСоСхемамиВыгрузки();
	ОпределитьСписокВыгружаемыхСхем(ТаблицаСхемXML);

	Возврат ПоместитьВоВременноеХранилище(ТаблицаСхемXML, Новый УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Функция СоздатьСтруктуруСоСхемамиВыгрузки() Экспорт

	АдресВХранилище = СоздатьСтруктуруСоСхемамиВыгрузкиНаСервере();
	Возврат АдресВХранилище;

КонецФункции

&НаСервере
Функция СоздатьСтруктуруСоСхемамиВыгрузкиНаСервере()

	ТипМакетаСхемыXSD = Метаданные.СвойстваОбъектов.ТипМакета.ДвоичныеДанные;

	СтруктураXSD = Новый Структура;
	Объект = ОбъектОтчета(ЭтаФорма.ИмяФормы);

	МетаданныеМактов = Объект.Метаданные().Макеты;

	Для Каждого Макет Из МетаданныеМактов Цикл
		
		Если ВРЕГ(Макет.Имя) = ВРЕГ("АрхивСхемXSD") Тогда
			
			АрхивСхемXSD = Объект.ПолучитьМакет("АрхивСхемXSD");
			
			ВременноеИмяZIP      = ПолучитьИмяВременногоФайла(".zip");
			ВременноеИмяКаталога = ПолучитьИмяВременногоФайла();
			
			АрхивСхемXSD.Записать(ВременноеИмяZIP);
			ЧтениеZIP = Новый ЧтениеZipФайла(ВременноеИмяZIP);
			
			Для каждого Схема Из ЧтениеZIP.Элементы Цикл
				
				ЧтениеZIP.Извлечь(Схема, ВременноеИмяКаталога);
				
				СтруктураXSD.Вставить(Схема.ИмяБезРасширения , Новый ДвоичныеДанные(ВременноеИмяКаталога + "\" + Схема.Имя));
			
			КонецЦикла;
			
			Попытка
				УдалитьФайлы(ВременноеИмяZIP);
			Исключение КонецПопытки;
			
			Попытка
				УдалитьФайлы(ВременноеИмяКаталога);
			Исключение КонецПопытки;
		
		КонецЕсли;
		
		Если Макет.ТипМакета = ТипМакетаСхемыXSD  Тогда
		
			СтруктураXSD.Вставить(Макет.Имя, Объект.ПолучитьМакет(Макет));		
		
		КонецЕсли;	
		
	КонецЦикла;

	Возврат ПоместитьВоВременноеХранилище(СтруктураXSD, Новый УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура  ОпределитьСписокВыгружаемыхСхем(тбСхемыXML);

	Для Каждого стр Из  тбСхемыXML Цикл
		
		Если стр.НазваниеСтраницыПанели = "Таблица5" Тогда
			
			Если ТаблицаМногострочнойЧастиПуста(ЭтаФОрма[СтруктураРеквизитовФормы.мИдГруппы5], СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[СтруктураРеквизитовФормы.мИдГруппы5]) Тогда
				стр.фВыгрузка = 0;
			Иначе
				стр.фВыгрузка = 1;
			КонецЕсли;
			
		ИначеЕсли стр.НазваниеСтраницыПанели = "Таблица6" Тогда	
			
			Если ТаблицаМногострочнойЧастиПуста(ЭтаФОрма[СтруктураРеквизитовФормы.мИдГруппы6], СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[СтруктураРеквизитовФормы.мИдГруппы6]) Тогда
				стр.фВыгрузка = 0;
			Иначе
				стр.фВыгрузка = 1;
			КонецЕсли;
			
		ИначеЕсли стр.НазваниеСтраницыПанели = "Таблица7" Тогда	
			
			Если ТаблицаМногострочнойЧастиПуста(ЭтаФОрма[СтруктураРеквизитовФормы.мИдГруппы7], СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[СтруктураРеквизитовФормы.мИдГруппы7]) Тогда
				стр.фВыгрузка = 0;
			Иначе
				стр.фВыгрузка = 1;
			КонецЕсли;

		Иначе	
			//по-умолчанию выгружаем все приложения
			стр.фВыгрузка = 1;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры	

&НаСервере
Функция ЗаполнитьТаблицуСоСхемамиВыгрузки()


	//для возможности выгрузки в XML файл	
	тбСхемыXML = Новый ТаблицаЗначений;
	ТипКолИмяСхемы = СоздатьОписанияТипов("Строка",8);
	тбСхемыXML.Колонки.Добавить("ИмяСхемы",ТипКолИмяСхемы,НСтр("ru='Имя файла-схемы';uk=""Ім'я файлу-схеми"""));
	ТипКолПредставлениеСхемы = СоздатьОписанияТипов("Строка",80);
	тбСхемыXML.Колонки.Добавить("ПредставлениеСхемы",ТипКолПредставлениеСхемы,НСтр("ru='Наименование регл.отчета';uk='Найменування регл.звіту'"));
	ТипКолНазваниеСтраницыПанели = СоздатьОписанияТипов("Строка",60);
	тбСхемыXML.Колонки.Добавить("НазваниеСтраницыПанели",ТипКолНазваниеСтраницыПанели,НСтр("ru='Наименование страницы панели';uk='Найменування сторінки панелі'"));

	ТипКолфВыгрузка = СоздатьОписанияТипов("Число",1,0);
	тбСхемыXML.Колонки.Добавить("фВыгрузка",ТипКолфВыгрузка,НСтр("ru='Выгружать?';uk='Вивантажувати?'"));
	ТипКолНазваниеСтраницыПанели = СоздатьОписанияТипов("Строка",60);
	ТипПрефикса = СоздатьОписанияТипов("Строка",10);
	тбСхемыXML.Колонки.Добавить("Префикс",ТипПрефикса,НСтр("ru='Префикс';uk='Префікс'"));

	тбСхемыXML.Колонки.Добавить("Тип", ,НСтр("ru='Тип';uk='Тип'"));

	ЮрЛицо = (СтруктураРеквизитовФормы.ОрганизацияЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);

	НовСтрока = тбСхемыXML.Добавить();
	НовСтрока.ИмяСхемы = ?(ЮрЛицо, "J3000411", "F3000411"); 
	НовСтрока.ПредставлениеСхемы =НСтр("ru='Перечень таблиц';uk='Перелік таблиць'");
	НовСтрока.НазваниеСтраницыПанели ="ПереченьТаблиц";

	НовСтрока = тбСхемыXML.Добавить();
	НовСтрока.ИмяСхемы = ?(ЮрЛицо, "J3040111", "F3040111"); 
	НовСтрока.ПредставлениеСхемы =НСтр("ru='Таблциа 1';uk='Таблиця 1'");
	НовСтрока.НазваниеСтраницыПанели ="Таблица1";
	
	НовСтрока= тбСхемыXML.Добавить();
	НовСтрока.ИмяСхемы = ?(ЮрЛицо, "J3040511", "F3040511"); 
	НовСтрока.ПредставлениеСхемы =НСтр("ru='Таблциа 5';uk='Таблиця 5'");
	НовСтрока.НазваниеСтраницыПанели ="Таблица5";
	НовСтрока.Префикс ="T5";

	НовСтрока= тбСхемыXML.Добавить();
	НовСтрока.ИмяСхемы = ?(ЮрЛицо, "J3040611", "F3040611"); 
	НовСтрока.ПредставлениеСхемы =НСтр("ru='Таблциа 6';uk='Таблиця 6'");
	НовСтрока.НазваниеСтраницыПанели ="Таблица6";
	НовСтрока.Префикс ="T6";

	НовСтрока = тбСхемыXML.Добавить();
	НовСтрока.ИмяСхемы = ?(ЮрЛицо, "J3040711", "F3040711");
	НовСтрока.ПредставлениеСхемы =НСтр("ru='Таблциа 7';uk='Таблиця 7'");
	НовСтрока.НазваниеСтраницыПанели ="Таблица7";
	НовСтрока.Префикс ="T7";
	
	тбСхемыXML.ЗаполнитьЗначения(Перечисления.ВерсииФорматовВыгрузки.ГНСУ_XML, "Тип");

	Возврат  тбСхемыXML

КонецФункции


&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(Сред(Лев(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7), Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ИДИменПоказателей, ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПараметровДляЗвит1С(ОписаниеОповещения) Экспорт
	
	глКомпонентаЗвит1С.Bring1CToFront();
	СтруктураРеквизитовФормы.Вставить("ОповещениеНастройкиПараметровЗвит1С", ОписаниеОповещения);
	
	СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина;
	
	Если глМенеджерЗвит1С.ФлагОтладки Тогда

		ФормаСохраненныхРеглОтчетов = ПолучитьФорму("Документ.РегламентированныйОтчет.Форма.ФормаВыбораТестЗвит1С",,ЭтаФорма);
		
		ФормаСохраненныхРеглОтчетов.ОписаниеОповещенияОЗакрытии =  Новый ОписаниеОповещения("РежимТестированияЗвит1СЗавершениеВыбораОтчета", ЭтотОбъект);
		ФормаСохраненныхРеглОтчетов.Параметры.РежимВыбора        = Истина; 
		ФормаСохраненныхРеглОтчетов.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаСохраненныхРеглОтчетов.Открыть();
		
	Иначе
		
		//ОткрытьФормуПараметров(Неопределено);	
				
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РежимТестированияЗвит1СЗавершениеВыбораОтчета(Результат, ДопПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ТекОповещение = СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С;
		СтруктураРеквизитовФормы.Удалить("ОповещениеНастройкиПараметровЗвит1С");
			
		СтруктураРеквизитовФормы.мСохраненныйДок = Результат;	
		ВосстановитьСохраненныеДанные();	
			
		СтруктураРеквизитовФормы.Вставить("ОповещениеНастройкиПараметровЗвит1С", ТекОповещение);
		
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
		
	Иначе
		
		//ОткрытьФормуПараметров(Неопределено);	
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПараметровЗавершение(ПараметрыВозврата, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.Свойство("ОповещениеНастройкиПараметровЗвит1С") Тогда
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьДанныеДляЗвит1С(ОтчетЗвит1С = Неопределено) Экспорт 
	
	мСписокСообщенийЗвит1С 	= Новый СписокЗначений;
	
	// Настроим модуль объекта на получене данных для Звита
	СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина;
	Если СтруктураРеквизитовФормы.Свойство("ОповещениеНастройкиПараметровЗвит1С") Тогда
		СтруктураРеквизитовФормы.Удалить("ОповещениеНастройкиПараметровЗвит1С")	
	КонецЕсли;

		
	Если НЕ глМенеджерЗвит1С.ФлагОтладки Тогда
		
		ПараметрыЗаполненияЗвит1С = Неопределено;
		ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С);
		ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);
		
	КонецЕсли;
	
	Результат = ПолучитьДанныеФормыНаСервере();
	
	Для каждого Сообщение Из мСписокСообщенийЗвит1С Цикл
		глМенеджерЗвит1С.ПредупреждениеЗвит1С(Сообщение.Представление, ,Сообщение.Значение);
	КонецЦикла;
	
	мСписокСообщенийЗвит1С.Очистить();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СоздатьОписанияТипов(НазваниеТипа, Длина,Точность="")
	
	мас = Новый Массив;
	мас.Добавить(Тип(НазваниеТипа));
	Если Точность = "" Тогда
		КвалифСтроки = Новый КвалификаторыСтроки(Длина,ДопустимаяДлина.Переменная); 
	Иначе
		КвалифЧисла = Новый КвалификаторыЧисла(Длина,Точность,ДопустимыйЗнак.Неотрицательный); 
	КонецЕсли;	   
	Возврат Новый ОписаниеТипов(мас,КвалифСтроки,КвалифЧисла);
  
КонецФункции	

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя)
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПараметров(Команда)

	мПараметрыФормы = Новый Структура;
	мПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", 	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	мПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета", 	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	//мПараметрыФормы.Вставить("ТаблицаВРБольничныеПредприятие", 		СтруктураРеквизитовФормы.ТаблицаВРБольничныеПредприятие);
	//мПараметрыФормы.Вставить("ТаблицаВРБольничныеФСС", 				СтруктураРеквизитовФормы.ТаблицаВРБольничныеФСС);
	//мПараметрыФормы.Вставить("ТаблицаВРБольничныеФССНесчСлучай", 	СтруктураРеквизитовФормы.ТаблицаВРБольничныеФССНесчСлучай);
	//мПараметрыФормы.Вставить("ТаблицаВРОтпускПоБеременностиИРодам", СтруктураРеквизитовФормы.ТаблицаВРОтпускПоБеременностиИРодам);
	//мПараметрыФормы.Вставить("ТаблицаВРОтпускДо3", 					СтруктураРеквизитовФормы.ТаблицаВРОтпускДо3);
	//мПараметрыФормы.Вставить("ТаблицаВРОтпускОт3До6", 				СтруктураРеквизитовФормы.ТаблицаВРОтпускОт3До6);
	//мПараметрыФормы.Вставить("ТаблицаВРГПХ", 						СтруктураРеквизитовФормы.ТаблицаВРГПХ);
	//мПараметрыФормы.Вставить("ТаблицаВРБезСохраненияЗП", 			СтруктураРеквизитовФормы.ТаблицаВРБезСохраненияЗП);
	
	мПараметрыФормы.Вставить("Организация", 			СтруктураРеквизитовФормы.Организация);
	
	ИмяФормыПараметровНастройки = СтрЗаменить(ЭтаФорма.ИмяФормы, "ФормаОтчета", "ПараметрыОтчета");
	
	ФормаНастройкиОтчета = ПолучитьФорму(ИмяФормыПараметровНастройки, мПараметрыФормы, ЭтаФорма);
	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуПараметровЗавершение", ЭтотОбъект);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьНастраиваемыеПараметрыЗаполнения()
	
	ЗапросДеклПрошл = Новый Запрос ("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	| РегламентированныйОтчет.ДанныеОтчета,
	| РегламентированныйОтчет.Ссылка
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|
	|ГДЕ
	|	НЕ РегламентированныйОтчет.ПометкаУдаления И
	|	РегламентированныйОтчет.Организация = &Организация И
	|	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета И
	|	РегламентированныйОтчет.ДатаОкончания <= &ДатаОкончания
	|УПОРЯДОЧИТЬ ПО ДатаОкончания УБЫВ"
	);
	
	ЗапросДеклПрошл.УстановитьПараметр ("ПометкаУдаления",ЛОЖЬ);
	ЗапросДеклПрошл.УстановитьПараметр ("ДатаОкончания",СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ЗапросДеклПрошл.УстановитьПараметр ("Организация",	СтруктураРеквизитовФормы.Организация);
	ЗапросДеклПрошл.УстановитьПараметр ("ИсточникОтчета","РегламентированныйОтчетЕдиныйСоциальныйВзнос");						   
	
	Выборка = ЗапросДеклПрошл.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ДанныеОтчета = Выборка.ДанныеОтчета.Получить();

		
		Если ДанныеОтчета.Свойство("ПоказателиОтчета") Тогда
			Если ДанныеОтчета.ПоказателиОтчета.Свойство("ПолеТабличногоДокументаТаблица5") Тогда
				Если ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТаблица1.Свойство("HSPODU") Тогда
					СтруктураДанныхТаблица1.HSPODU = ДанныеОтчета.ПоказателиОтчета.ПолеТабличногоДокументаТаблица1.HSPODU;	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура СформироватьСпискиВыбора()
	
	//МакетСоставаПоказателей = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет("Списки2014");
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("Списки2016");
	
	КоллекцияСписковВыбора = Новый Соответствие;
	Для Каждого Область Из МакетСоставаПоказателей.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			ВерхОбласти = Область.Верх;
			НизОбласти = Область.Низ;
			ТаблСписка = Новый ТаблицаЗначений;
			ТаблСписка.Колонки.Добавить("Код",,, МакетСоставаПоказателей.Область(ВерхОбласти, 1, ВерхОбласти, 1).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("Название",,, МакетСоставаПоказателей.Область(ВерхОбласти, 2, ВерхОбласти, 2).ШиринаКолонки);
			ТаблСписка.Колонки.Добавить("РезультатПроверки",,, 0);
			Для НомСтр = ВерхОбласти По НизОбласти Цикл
				КодПоказателя = СокрП(МакетСоставаПоказателей.Область(НомСтр, 1).Текст);
				Если КодПоказателя <> "###" Тогда
					НовСтрока = ТаблСписка.Добавить();
					НовСтрока.Код = КодПоказателя;
					НовСтрока.Название = СокрП(МакетСоставаПоказателей.Область(НомСтр, 2).Текст);
					НовСтрока.РезультатПроверки = СокрП(МакетСоставаПоказателей.Область(НомСтр, 3).Текст);
				КонецЕсли;
			КонецЦикла;
			КоллекцияСписковВыбора.Вставить(Область.Имя, ТаблСписка);
		КонецЕсли;
	КонецЦикла;
	
	СвойстваПоказателей.Очистить();
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "T5T1RXXXXG6", 1, , "Громадянин України", КоллекцияСписковВыбора["ДаНет"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "T6T1RXXXXG6", 1, , "Громадянин України", КоллекцияСписковВыбора["ДаНет"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "T7T1RXXXXG6", 1, , "Громадянин України", КоллекцияСписковВыбора["ДаНет"]);

	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "T5T1RXXXXG8", 1, , "Договір ЦПХ за основним місцем роботи", КоллекцияСписковВыбора["ДаНет"]);
	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "T6T1RXXXXG7", 1, , "Стать", КоллекцияСписковВыбора["Пол"]);
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "T6T1RXXXXG22", 1, , "Ознака наявності трудової книжки", КоллекцияСписковВыбора["ДаНет"]);	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "T6T1RXXXXG23", 1, , "Ознака наявності спецстажу", КоллекцияСписковВыбора["ДаНет"]);	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "T6T1RXXXXG24", 1, , "Ознака неповного робочого часу", КоллекцияСписковВыбора["ДаНет"]);	
	ДобавитьСтрокуОписанияВвода(СвойстваПоказателей, "T6T1RXXXXG25", 1, , "Ознака нового робочого місця", КоллекцияСписковВыбора["ДаНет"]);	
	
КонецПроцедуры

&НаСервере
Функция ДобавитьСтрокуОписанияВвода(ТаблицаПараметров, Показатель, Длина, Тип = Неопределено, ТекстПриВыборе = Неопределено, Значения = Неопределено)
	
	НовСтр = ТаблицаПараметров.Добавить();
	НовСтр.Показатель = Показатель;
	НовСтр.Тип = Тип;
	НовСтр.Длина = Длина;
	НовСтр.ТекстПриВыборе = ТекстПриВыборе;
	Если ТипЗнч(Значения) = Тип("ТаблицаЗначений") Тогда
		НовСтр.ТаблицаЗначений.Загрузить(Значения);
	КонецЕсли;
		
КонецФункции // ДобавитьСтрокуОписанияВвода()

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда

		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ВвестиПоказатель()

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
	
КонецПроцедуры

//ИНАГРО ++
&НаСервере
Функция ПолучитьПричинуУвольнения(Сотрудник, ДатаУвольнения)
	
    ИмяРеквизита = "ОснованиеУвольнения";
    
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("Сотрудник",Сотрудник);
    Запрос.УстановитьПараметр("ДатаУвольнения",НачалоДня(ДатаУвольнения));
    Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
       |          УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник,
       |          УвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения,
       |          УвольнениеИзОрганизацийРаботникиОрганизации."+ИмяРеквизита+" КАК СтатьяКЗОТ
       |ИЗ
       |          Документ.ИНАГРО_УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацийРаботникиОрганизации
       |ГДЕ
       |          УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник = &Сотрудник
       |          И УвольнениеИзОрганизацийРаботникиОрганизации.ДатаУвольнения = &ДатаУвольнения";
	   
	Основание = "";   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Основание = Выборка.СтатьяКЗОТ.Наименование;
		Позиция = Найти(ВРЕГ(Основание),ВРЕГ("КЗпП"));
		Если Позиция = 0 Тогда
			Позиция = Найти(ВРЕГ(Основание),ВРЕГ("КЗоТ"));
		КонецЕсли;
		Если Позиция > 0 Тогда
			Основание = Сред(Основание,1,Позиция+3);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Основание;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокБезСохранения() Экспорт // Экспортируем для использования в форме настройки 1С-Звит
	
	ВидыРасчетов = Новый Массив;

	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("СпособНулеваяСумма", Перечисления.СпособыРасчетаНачислений.НулеваяСумма);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Ссылка КАК ВидРасчета 
		|ИЗ 
		|	ПланВидовРасчета.ИНАГРО_Начисления КАК Начисления
		|ГДЕ
		|	Начисления.СпособРасчета = &СпособНулеваяСумма
		|";
	
	Выборка = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"); 
	
	ПВР = ПланыВидовРасчета["ИНАГРО_Начисления"];		
	Для каждого ВидРасчета Из Выборка Цикл
		ИмяПредопределенного = ПВР.ПолучитьИмяПредопределенного(ВидРасчета);
		Если    ИмяПредопределенного = "Замещение"
			ИЛИ ИмяПредопределенного = "Совмещение" Тогда
			Продолжить;
		КонецЕсли;
		
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;

	Возврат ВидыРасчетов;

КонецФункции //

&НаСервере
Функция ПолучитьСписокВидовРасчетовПоВидуНалога(Налог) Экспорт // Экспортируем для использования в форме настройки 1С-Звит 
	
	ВидыРасчетов = Новый Массив;

	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ПериодОтчета", НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.Параметры.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	Запрос.Параметры.Вставить("Налог", Налог);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Базовые.ВидРасчета 
	|ИЗ 
	|	ПланВидовРасчета.ИНАГРО_ВзносыВФонды.БазовыеВидыРасчета КАК Базовые
	|ГДЕ
	|	Базовые.Ссылка В (ВЫБРАТЬ ВидРасчета ИЗ РегистрСведений.ИНАГРО_ВидыРасчетовВзносовВФонды.СрезПоследних(&ПериодОтчета, Налог В (&Налог)))
	|";
	ВидыРасчетовПоНалогу = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"); 
	Для каждого ВидРасчета Из ВидыРасчетовПоНалогу Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;

	Возврат ВидыРасчетов;

КонецФункции // ()

&НаСервере
Функция ПолучитьСписокДекретные() Экспорт // Экспортируем для использования в форме настройки 1С-Звит
	
	ВидыРасчетов = Новый Массив;
	
	ВидыРасчетов.Добавить(ПланыВидовРасчета.ИНАГРО_Начисления.ОплатаПоСреднемуБЛПоБеременностиИРодам);

	Возврат ВидыРасчетов;

КонецФункции //

&НаСервере
Функция ПолучитьБольничныеФССНесчСлучай() Экспорт // Экспортируем для использования в форме настройки 1С-Звит
	
	ВидыРасчетов = Новый Массив;
	
	ВидыРасчетов.Добавить(ПланыВидовРасчета.ИНАГРО_Начисления.ОплатаПоСреднемуБЛ);

	Возврат ВидыРасчетов;

КонецФункции //

&НаСервере
Функция ПолучитьБольничныеПредприятия() Экспорт // Экспортируем для использования в форме настройки 1С-Звит
	
	ВидыРасчетов = Новый Массив;
	
	ВидыРасчетов.Добавить(ПланыВидовРасчета.ИНАГРО_Начисления.ОплатаПоСреднемуБЛОрганизации);

	ВидыРасчетов.Добавить(ПланыВидовРасчета.ИНАГРО_Начисления.ОплатаПоСреднемуБЛТравмаНаПроизводстве);

	Возврат ВидыРасчетов;

КонецФункции //

&НаСервере
Функция  ПолучитьСписокДоговоровГПХ()
	
	ЗапросГПХ = Новый Запрос;
	ЗапросГПХ.Текст = "ВЫБРАТЬ
	                  |	Работники.Сотрудник КАК Сотрудник,
                      |	ВЫБОР КОГДА Работники.Сотрудник.ОсновноеНазначение.ИНАГРО_ВидЗанятости = Значение(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК ГПХпоОснМестуРаботы,
					  |	Работники.Сотрудник.Физическоелицо КАК ФизЛицо,
				      |	Работники.Сотрудник.Физическоелицо.КодПоДРФО КАК КодПоДРФО,
					  |	МИНИМУМ(ВЫБОР
	                  |			КОГДА Работники.ДатаНачала >= &ДатаНач
	                  |					И Работники.ДатаНачала <= &ДатаКон
	                  |				ТОГДА Работники.ДатаНачала
	                  |			ИНАЧЕ NULL
	                  |		КОНЕЦ) КАК ДатаНач,
	                  |	МАКСИМУМ(ВЫБОР
	                  |			КОГДА Работники.ДатаОкончания >= &ДатаНач
	                  |					И Работники.ДатаОкончания <= &ДатаКон
	                  |				ТОГДА Работники.ДатаОкончания
	                  |			ИНАЧЕ NULL
	                  |		КОНЕЦ) КАК ДатаКон,
	                  |	МАКСИМУМ(ФИОФизЛицСрезПоследних.Фамилия) КАК Фамилия,
	                  |	МАКСИМУМ(ФИОФизЛицСрезПоследних.Имя) КАК Имя,
	                  |	МАКСИМУМ(ФИОФизЛицСрезПоследних.Отчество) КАК Отчество,
					  |	МАКСИМУМ(ЛОЖЬ) КАК ПринятНаНовоеРабочееМесто,
					  |	МАКСИМУМ(ВЫБОР
	                  |			КОГДА ЕСТЬNULL(ГражданствоФизЛиц.ИНАГРО_НеЯвляетсяНалоговымРезидентом, ЛОЖЬ)
	                  |				ТОГДА 0
	                  |			КОГДА ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	                  |					ИЛИ ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.Украина)
	                  |				ТОГДА 1
	                  |			ИНАЧЕ 0
	                  |		КОНЕЦ) КАК Гражданин
	                  |ИЗ
	                  |	Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом КАК Работники
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаКон, ) КАК ФИОФизЛицСрезПоследних
	                  |		ПО Работники.Сотрудник.Физическоелицо = ФИОФизЛицСрезПоследних.Физическоелицо
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(&ДатаКон, ) КАК ГражданствоФизЛиц
	                  |		ПО Работники.Сотрудник.Физическоелицо = ГражданствоФизЛиц.Физическоелицо
	                  |ГДЕ
	                  |		Работники.Проведен
	                  |   И Работники.Организация = &Организация
	                  |   И (     Работники.ДатаОкончания >= &ДатаНач И Работники.ДатаОкончания <= &ДатаКон
	                  |		  ИЛИ Работники.ДатаНачала    >= &ДатаНач И Работники.ДатаНачала    <= &ДатаКон)
	                  |
	                  |СГРУППИРОВАТЬ ПО
					  |	Работники.Сотрудник,
					  |	Работники.Сотрудник.Физическоелицо,
					  |	Работники.Сотрудник.Физическоелицо.КодПоДРФО
					  |УПОРЯДОЧИТЬ ПО
	                  |	ФизЛицо";	
					  
	ЗапросГПХ.УстановитьПараметр("ДатаНач",СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ЗапросГПХ.УстановитьПараметр("ДатаКон",СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ЗапросГПХ.УстановитьПараметр("Организация",СтруктураРеквизитовФормы.Организация);
	
	Результат = ЗапросГПХ.Выполнить().Выгрузить();
					
	тзГПХ = Результат.Скопировать();
	
	Возврат Результат;		

КонецФункции

&НаСервере
Функция  ПолучитьСписокЛиц()
	
	// Текст запроса: работники организации за период 
	Запрос = Новый Запрос;
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДатаНач", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета - 1);
	Запрос.УстановитьПараметр("ДатаКон", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета +  1);
	Запрос.УстановитьПараметр("ДатаКонНеВключая", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаНачВключая", Новый Граница(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ДатаКонВключая", Новый Граница(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета + 1, ВидГраницы.Включая));
	
	Запрос.УстановитьПараметр("Организация" , СтруктураРеквизитовФормы.Организация);
	
	Если    (РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "УПП") 
		ИЛИ (РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "ЗУП") Тогда
		ТекстСокращенноеВремя = "РаботникиОрганизаций.ГрафикРаботы.СокращенноеРабочееВремя";
	Иначе
		ТекстСокращенноеВремя = "ВЫБОР КОГДА РаботникиОрганизаций.ЗанимаемыхСтавок < 1 ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ";
	КонецЕсли;	
	
	Попытка
		ТекстЗапросаРаботавшие =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизаций.Сотрудник.Физическоелицо КАК ФизЛицо,
		|	РаботникиОрганизаций.ЗанимаемыхСтавок КАК СтавокНаНачало,
		|	0 КАК СтавокНаКонец,
		|	NULL КАК ДатаПриема,
		|	NULL КАК СокращенноеРабочееВремя,
		|	NULL КАК ДатаУвольнения,
		|	NULL КАК ДатаСозданияРабочегоМеста,
		|	NULL КАК ПринятНаНовоеРабочееМесто		
		|ПОМЕСТИТЬ СписокРаботников
		|ИЗ
		|	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаНач, Организация = &Организация) КАК РаботникиОрганизаций
		| 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник,
		|	РаботникиОрганизаций.Сотрудник.Физическоелицо,
		|	0,
		|	РаботникиОрганизаций.ЗанимаемыхСтавок,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL КАК ПринятНаНовоеРабочееМесто		
		|ИЗ
		|	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаКонВключая, Организация = &Организация) КАК РаботникиОрганизаций
		| 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник,
		|	РаботникиОрганизаций.Сотрудник.Физическоелицо,
		|	0,
		|	0,
		|	РаботникиОрганизаций.Период,
		|	"+ТекстСокращенноеВремя+" КАК СокращенноеРабочееВремя,
		|	NULL,
		|	РаботникиОрганизаций.ДатаСозданияРабочегоМеста,
		|	РаботникиОрганизаций.ПринятНаНовоеРабочееМесто
		|ИЗ
		|	РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ
		|	РаботникиОрганизаций.Период >= &ДатаНач 
		|	И РаботникиОрганизаций.Период < &ДатаКон
		|	И РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|	И РаботникиОрганизаций.Организация = &Организация
		|  
		|   И НЕ РаботникиОрганизаций.Сотрудник.ИНАГРО_ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник,	
		|	РаботникиОрганизаций.Сотрудник.Физическоелицо,
		|	0,
		|	0,
		|	NULL,
		|	NULL,
		|	РаботникиОрганизаций.Период,
		|	NULL,
		|	NULL КАК ПринятНаНовоеРабочееМесто		
		|ИЗ
		|	РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ
		|	РаботникиОрганизаций.Период МЕЖДУ &ДатаНач И &ДатаКон
		|	И РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|	И РаботникиОрганизаций.Организация = &Организация
		|  
		|   И НЕ РаботникиОрганизаций.Сотрудник.ИНАГРО_ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник,
		|	РаботникиОрганизаций.Сотрудник.Физическоелицо,
		|	0,
		|	0,
		|	NULL,
		|	"+ТекстСокращенноеВремя+" КАК СокращенноеРабочееВремя,
		|	NULL,
		|	NULL,
		|	РаботникиОрганизаций.ПринятНаНовоеРабочееМесто
		|ИЗ
		|	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаКонНеВключая, Организация = &Организация И НЕ ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиОрганизаций
		|  
		|  
		|;
		|       
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СписокРаботников.Сотрудник.ИНАГРО_ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Категория,
		|	СписокРаботников.Сотрудник,
		|	СписокРаботников.ФизЛицо,
		|	СписокРаботников.ФизЛицо.КодПоДРФО КАК КодПоДРФО,
		|	СУММА(СписокРаботников.СтавокНаНачало) КАК СтавокНаНачало,
		|	СУММА(СписокРаботников.СтавокНаКонец) КАК СтавокНаКонец,
		|	МИНИМУМ(СписокРаботников.ДатаПриема) КАК ДатаПриема,
		|	МАКСИМУМ(СписокРаботников.ДатаУвольнения) КАК ДатаУвольнения,
		|	МАКСИМУМ(СписокРаботников.ДатаСозданияРабочегоМеста) КАК ДатаСозданияРабочегоМеста,
		|	МАКСИМУМ(СписокРаботников.ПринятНаНовоеРабочееМесто) КАК ПринятНаНовоеРабочееМесто,
		|	МАКСИМУМ(СписокРаботников.СокращенноеРабочееВремя) КАК СокращенноеРабочееВремя,
		|	МАКСИМУМ(ФИОФизЛицСрезПоследних.Фамилия) КАК Фамилия,
		|	МАКСИМУМ(ФИОФизЛицСрезПоследних.Имя) КАК Имя,
		|	МАКСИМУМ(ФИОФизЛицСрезПоследних.Отчество) КАК Отчество,
		
		|МАКСИМУМ(ВЫБОР 
		|	КОГДА ЕстьNULL(ГражданствоФизЛиц.ИНАГРО_НеЯвляетсяНалоговымРезидентом, ЛОЖЬ)
		|		ТОГДА 0
		|	КОГДА ЕстьNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) 
		|	  ИЛИ ЕстьNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.Украина) 
		|		ТОГДА 1
		|	ИНАЧЕ 0
		|КОНЕЦ) КАК Гражданин, 	
		
		|	ВЫБОР
		|		КОГДА (НЕ ФИОФизЛицСрезПоследних.Фамилия = ФИОФизЛицСрезНач.Фамилия)
		|				ИЛИ (НЕ ФИОФизЛицСрезПоследних.Имя = ФИОФизЛицСрезНач.Имя)
		|				ИЛИ (НЕ ФИОФизЛицСрезПоследних.Отчество = ФИОФизЛицСрезНач.Отчество)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИзменилосьФИО
		|ИЗ
		|	СписокРаботников КАК СписокРаботников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаКонНеВключая, ) КАК ФИОФизЛицСрезПоследних
		|		ПО СписокРаботников.ФизЛицо = ФИОФизЛицСрезПоследних.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаНач, ) КАК ФИОФизЛицСрезНач
		|		ПО СписокРаботников.ФизЛицо = ФИОФизЛицСрезНач.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(&ДатаКон, ) КАК ГражданствоФизЛиц
		|		ПО СписокРаботников.ФизЛицо = ГражданствоФизЛиц.ФизическоеЛицо
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА СписокРаботников.Сотрудник.ИНАГРО_ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ,
		|	СписокРаботников.Сотрудник,
		|	СписокРаботников.ФизЛицо,
		|	ВЫБОР
		|		КОГДА (НЕ ФИОФизЛицСрезПоследних.Фамилия = ФИОФизЛицСрезНач.Фамилия)
		|				ИЛИ (НЕ ФИОФизЛицСрезПоследних.Имя = ФИОФизЛицСрезНач.Имя)
		|				ИЛИ (НЕ ФИОФизЛицСрезПоследних.Отчество = ФИОФизЛицСрезНач.Отчество)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|	УПОРЯДОЧИТЬ ПО 
		|Фамилия,Имя,Отчество,КодПоДРФО		
		|";
	
		Запрос.Текст = ТекстЗапросаРаботавшие;
		РаботавшиеВОрганизации = Запрос.Выполнить().Выгрузить();
		
	Исключение	
		ТекстЗапросаРаботавшие =
		"ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизаций.Сотрудник.Физическоелицо КАК ФизЛицо,
		|	РаботникиОрганизаций.ЗанимаемыхСтавок КАК СтавокНаНачало,
		|	0 КАК СтавокНаКонец,
		|	NULL КАК ДатаПриема,
		|	NULL КАК ДатаУвольнения
		|ПОМЕСТИТЬ СписокРаботников
		|ИЗ
		|	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаНач, Организация = &Организация) КАК РаботникиОрганизаций
		| 
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник,
		|	РаботникиОрганизаций.Сотрудник.Физическоелицо,
		|	0,
		|	РаботникиОрганизаций.ЗанимаемыхСтавок,
		|	NULL,
		|	NULL
		|ИЗ
		|	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаКонВключая, Организация = &Организация) КАК РаботникиОрганизаций
		|
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник,
		|	РаботникиОрганизаций.Сотрудник.Физическоелицо,
		|	0,
		|	0,
		|	РаботникиОрганизаций.Период,
		|	NULL
		|ИЗ
		|	РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ
		|	РаботникиОрганизаций.Период МЕЖДУ &ДатаНач И &ДатаКон
		|	И РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
		|	И РаботникиОрганизаций.Организация = &Организация
		|  
		|   И НЕ РаботникиОрганизаций.Сотрудник.ИНАГРО_ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник,	
		|	РаботникиОрганизаций.Сотрудник.Физическоелицо,
		|	0,
		|	0,
		|	NULL,
		|	РаботникиОрганизаций.Период
		|ИЗ
		|	РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ
		|	РаботникиОрганизаций.Период МЕЖДУ &ДатаНач И &ДатаКон
		|	И РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|	И РаботникиОрганизаций.Организация = &Организация
		|  
		|   И НЕ РаботникиОрганизаций.Сотрудник.ИНАГРО_ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СписокРаботников.Сотрудник.ИНАГРО_ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Категория,
		|	СписокРаботников.Сотрудник,
		|	СписокРаботников.ФизЛицо,
		|	СписокРаботников.ФизЛицо.КодПоДРФО КАК КодПоДРФО,
		|	СУММА(СписокРаботников.СтавокНаНачало) КАК СтавокНаНачало,
		|	СУММА(СписокРаботников.СтавокНаКонец) КАК СтавокНаКонец,
		|	МИНИМУМ(СписокРаботников.ДатаПриема) КАК ДатаПриема,
		|	МАКСИМУМ(СписокРаботников.ДатаУвольнения) КАК ДатаУвольнения,
		|	МАКСИМУМ(ЛОЖЬ) КАК ПринятНаНовоеРабочееМесто,
		|	МАКСИМУМ(ФИОФизЛицСрезПоследних.Фамилия) КАК Фамилия,
		|	МАКСИМУМ(ФИОФизЛицСрезПоследних.Имя) КАК Имя,
		|	МАКСИМУМ(ФИОФизЛицСрезПоследних.Отчество) КАК Отчество,
		
		|МАКСИМУМ(ВЫБОР 
		|	КОГДА ЕстьNULL(ГражданствоФизЛиц.ИНАГРО_НеЯвляетсяНалоговымРезидентом, ЛОЖЬ)
		|		ТОГДА 0
		|	КОГДА ЕстьNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) 
		|	  ИЛИ ЕстьNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.Украина) 
		|		ТОГДА 1
		|	ИНАЧЕ 0
		|КОНЕЦ) КАК Гражданин, 	
		
		|	ВЫБОР
		|		КОГДА (НЕ ФИОФизЛицСрезПоследних.Фамилия = ФИОФизЛицСрезНач.Фамилия)
		|				ИЛИ (НЕ ФИОФизЛицСрезПоследних.Имя = ФИОФизЛицСрезНач.Имя)
		|				ИЛИ (НЕ ФИОФизЛицСрезПоследних.Отчество = ФИОФизЛицСрезНач.Отчество)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИзменилосьФИО
		|ИЗ
		|	СписокРаботников КАК СписокРаботников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаКонНеВключая, ) КАК ФИОФизЛицСрезПоследних
		|		ПО СписокРаботников.ФизЛицо = ФИОФизЛицСрезПоследних.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаНач, ) КАК ФИОФизЛицСрезНач
		|		ПО СписокРаботников.ФизЛицо = ФИОФизЛицСрезНач.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(&ДатаКон, ) КАК ГражданствоФизЛиц
		|		ПО СписокРаботников.ФизЛицо = ГражданствоФизЛиц.ФизическоеЛицо
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА СписокРаботников.Сотрудник.ИНАГРО_ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ,
		|	СписокРаботников.Сотрудник,
		|	СписокРаботников.ФизЛицо,
		|	ВЫБОР
		|		КОГДА (НЕ ФИОФизЛицСрезПоследних.Фамилия = ФИОФизЛицСрезНач.Фамилия)
		|				ИЛИ (НЕ ФИОФизЛицСрезПоследних.Имя = ФИОФизЛицСрезНач.Имя)
		|				ИЛИ (НЕ ФИОФизЛицСрезПоследних.Отчество = ФИОФизЛицСрезНач.Отчество)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|";
	
		Запрос.Текст = ТекстЗапросаРаботавшие;
		РаботавшиеВОрганизации = Запрос.Выполнить().Выгрузить();
	
	КонецПопытки;
	тзРаботники = РаботавшиеВОрганизации.Скопировать();
	
	Возврат РаботавшиеВОрганизации;
	
КонецФункции	

&НаСервере
Функция ПолучитьСписокОтпуска(СписокВидовРасчета)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНач",СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("нДатаКон",НачалоДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Организация",СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр("ВР",СписокВидовРасчета);	
	
	Запрос.УстановитьПараметр("ДатаПроверкиНачало",НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета-1));
	Запрос.УстановитьПараметр("ДатаПроверкиКонец",ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,1));
	ТекстЗапросаВТНачало ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.ПериодДействияКонец КАК Конец
	|ПОМЕСТИТЬ ВТНачало
	|ИЗ
	|	РегистрРасчета.ИНАГРО_Начисления.ФактическийПериодДействия КАК Начисления
	|ГДЕ
	|	Начисления.Организация = &Организация
	|	И Начисления.ПериодДействияКонец = &ДатаПроверкиНачало
	|	И Начисления.ПериодРегистрации <= &ДатаНач
	|	И Начисления.ВидРасчета В (&ВР)
	|	И НЕ Начисления.Сторно
	|	И Начисления.Сотрудник = Начисления.Назначение
	|";
	
	ТекстЗапросаВТКонец ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.ПериодДействияНачало КАК Начало
	|ПОМЕСТИТЬ ВТКонец
	|ИЗ
	|	РегистрРасчета.ИНАГРО_Начисления.ФактическийПериодДействия КАК Начисления
	|ГДЕ
	|	Начисления.Организация = &Организация
	|	И Начисления.ПериодДействияНачало = &ДатаПроверкиКонец
	|	И Начисления.ПериодРегистрации <= &ДатаНач
	|	И Начисления.ВидРасчета В (&ВР)
	|	И НЕ Начисления.Сторно
	|	И Начисления.Сотрудник = Начисления.Назначение
	|";
	
	ТекстЗапросаВТПлановыеНачало ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.Действует КАК Действует
	|ПОМЕСТИТЬ ВТПлановыеНачало
	|ИЗ
	|	РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&ДатаПроверкиНачало,Организация = &Организация И ВидРасчета В (&ВР)) КАК Начисления
	|ГДЕ
	|	Начисления.Действует//Размер
	|";
	
	ТекстЗапросаВТПлановыеКонец ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.Действует КАК Действует
	|ПОМЕСТИТЬ ВТПлановыеКонец
	|ИЗ
	|	РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&ДатаПроверкиКонец,Организация = &Организация И ВидРасчета В (&ВР)) КАК Начисления
	|ГДЕ
	|	Начисления.Действует//Размер
	|";
	
	ТекстЗапроса ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.Сотрудник.Физическоелицо КАК ФизЛицо,
	|	Начисления.Сотрудник.Физическоелицо.КодПоДРФО КАК КодПоДРФО,
	|	ВЫБОР КОГДА Начисления.ПериодДействияНачало<> &ДатаНач
	|	ТОГДА Начисления.ПериодДействияНачало 
	|	КОГДА ПроверкаНачало.Сотрудник ЕСТЬ NULL И ПроверкаПлановыеНачало.Сотрудник ЕСТЬ NULL
	|	ТОГДА Начисления.ПериодДействияНачало 
	|	ИНАЧЕ NULL
	|	КОНЕЦ КАК Начало,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(Начисления.ПериодДействияКонец,ДЕНЬ) <> &нДатаКон
	|	ТОГДА Начисления.ПериодДействияКонец 
	|	КОГДА ПроверкаКонец.Сотрудник ЕСТЬ NULL И ПроверкаПлановыеКонец.Сотрудник ЕСТЬ NULL
	|	ТОГДА Начисления.ПериодДействияКонец 
	|	ИНАЧЕ NULL
	|	КОНЕЦ КАК Конец,
	|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
	|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
	|	ВЫБОР
    |		КОГДА ЕСТЬNULL(ГражданствоФизЛиц.ИНАГРО_НеЯвляетсяНалоговымРезидентом, ЛОЖЬ)
    |			ТОГДА 0
    |		КОГДА ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
    |				ИЛИ ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.Украина)
    |			ТОГДА 1
    |		ИНАЧЕ 0
    |	КОНЕЦ КАК Гражданин
	|ИЗ
	|	РегистрРасчета.ИНАГРО_Начисления.ФактическийПериодДействия КАК Начисления
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТНачало КАК ПроверкаНачало
	|	ПО Начисления.Сотрудник = ПроверкаНачало.Сотрудник
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТКонец КАК ПроверкаКонец
	|	ПО Начисления.Сотрудник = ПроверкаКонец.Сотрудник
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачало КАК ПроверкаПлановыеНачало
	|	ПО Начисления.Сотрудник = ПроверкаПлановыеНачало.Сотрудник
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеКонец КАК ПроверкаПлановыеКонец
	|	ПО Начисления.Сотрудник = ПроверкаПлановыеКонец.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаКон, ) КАК ФИОФизЛицСрезПоследних
	|		ПО Начисления.Сотрудник.Физическоелицо = ФИОФизЛицСрезПоследних.Физическоелицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(&ДатаКон, ) КАК ГражданствоФизЛиц
	|		ПО Начисления.Сотрудник.Физическоелицо = ГражданствоФизЛиц.Физическоелицо
	|ГДЕ
	|	Начисления.Организация = &Организация
	|	И Начисления.ПериодДействия = &ДатаНач
	|	И Начисления.ПериодРегистрации <= &ДатаНач
	|	И Начисления.ВидРасчета В (&ВР)
	|	И НЕ Начисления.Сторно
	|	И Начисления.Сотрудник = Начисления.Назначение
	|	И ((Начисления.ПериодДействияНачало <> &ДатаНач ИЛИ (ПроверкаНачало.Сотрудник ЕСТЬ NULL  И ПроверкаПлановыеНачало.Сотрудник ЕСТЬ NULL))
	|	 ИЛИ (Начисления.ПериодДействияКонец <> &нДатаКон ИЛИ (ПроверкаКонец.Сотрудник ЕСТЬ NULL И ПроверкаПлановыеКонец.Сотрудник ЕСТЬ NULL)))
	|УПОРЯДОЧИТЬ ПО
	| ФизЛицо
	|";
	
	Запрос.Текст = ТекстЗапросаВТНачало;
	Запрос.Выполнить();
	Запрос.Текст = ТекстЗапросаВТКонец;
	Запрос.Выполнить();
	Запрос.Текст = ТекстЗапросаВТПлановыеНачало;
	Запрос.Выполнить();
	Запрос.Текст = ТекстЗапросаВТПлановыеКонец;
	Запрос.Выполнить();
	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить().Выгрузить();		
	
КонецФункции	

&НаСервере
Функция ПолучитьСписокПоУходу() Экспорт // Экспортируем для использования в форме настройки 1С-Звит
	
	ВидыРасчетов = Новый Массив;

	
	Запрос = Новый Запрос();
	Выполнить("Запрос.Параметры.Вставить(""ВидВремениПоУходу"", Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком);");
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Ссылка КАК ВидРасчета 
		|ИЗ 
		|	ПланВидовРасчета.ИНАГРО_Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &ВидВремениПоУходу
		|	И НЕ Начисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.НулеваяСумма)
		|";
		
	Выборка = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"); 
	Для каждого ВидРасчета Из Выборка Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;

	Возврат ВидыРасчетов;

КонецФункции //

&НаСервере
Функция ПолучитьСписокПоУходуДо3() Экспорт // Экспортируем для использования в форме настройки 1С-Звит
	
	ВидыРасчетов = Новый Массив;

	
	Запрос = Новый Запрос();
	Выполнить("Запрос.Параметры.Вставить(""ВидВремениПоУходу"", Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком);");
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Ссылка КАК ВидРасчета 
		|ИЗ 
		|	ПланВидовРасчета.ИНАГРО_Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &ВидВремениПоУходу
		|	И Начисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.НулеваяСумма)
		|";
		
	Выборка = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"); 
	Для каждого ВидРасчета Из Выборка Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;

	Возврат ВидыРасчетов;

КонецФункции //

&НаСервере
Функция СформироватьСпецСтажТаблица7(ТаблицаПриемовУвольнений)
	
	Перем СтруктураГруппы7;
	Перем ИсходноеКоличествоСтрокГруппы7;
	
	// сформируем список значений: Значение - ссылка на физ.лицо, а представление - основание для льготного стажа
	Список = Новый СписокЗначений;	
	
	Запрос = Новый Запрос();
	ЗапросГПХ = Новый Запрос;
	ЗапросГПХ.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Работники.Сотрудник.ФизическоеЛицо,
	|	Работники.Сотрудник
	|ИЗ  Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом КАК Работники
	|ГДЕ 
	|   Работники.Проведен
	| И Работники.ДатаОкончания >= &парамНачало
	| И Работники.ДатаНачала    <= &парамКонец
	| И Работники.Организация = &Организация
	|";	
	ЗапросГПХ.УстановитьПараметр("парамНачало",СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ЗапросГПХ.УстановитьПараметр("парамКонец",СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ЗапросГПХ.УстановитьПараметр("Организация",СтруктураРеквизитовФормы.Организация);
		
	ВыборкаГПХ = ЗапросГПХ.Выполнить().Выбрать();
	КолГПХ = ВыборкаГПХ.Количество();

	ТаблицаТекГПХпоПодразделению = ЗапросГПХ.Выполнить().Выгрузить();
	МассивГПХПоПодразделению = Новый Списокзначений;
	Для каждого СтрокаГПХ Из ТаблицаТекГПХпоПодразделению Цикл
					МассивГПХПоПодразделению.Добавить(СтрокаГПХ.Сотрудник, СтрокаГПХ.Сотрудник);        
    КонецЦикла;
	
	// сформируем список значений: Значение - ссылка на физ.лицо, а представление - основание для льготного стажа
	Список = Новый СписокЗначений;	
		
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	СпецСтаж.Сотрудник КАК ФИЗЛИЦО,
	               |	СпецСтаж.Сотрудник.ФизическоеЛицо.КодПоДРФО КАК ДРФО,
	               |	СпецСтаж.ВидСтажа.КодПФ КАК Основание,
	               |	ФИОФизЛицСрезПоследних.Фамилия КАК ФизЛицоФамилия,
	               |	ФИОФизЛицСрезПоследних.Имя КАК ФизЛицоИмя,
	               |	ФИОФизЛицСрезПоследних.Отчество КАК ФизЛицоОтчество,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ГражданствоФизЛиц.ИНАГРО_НеЯвляетсяНалоговымРезидентом, ЛОЖЬ)
	               |			ТОГДА 0
	               |		КОГДА ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	               |				ИЛИ ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.Украина)
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Гражданин,
	               |	СпецСтаж.ДнейСтажа КАК Результат
	               |ИЗ
	               |	РегистрСведений.ИНАГРО_НачальныеСведенияОСтажеРаботниковОрганизации КАК СпецСтаж
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Дата, ) КАК ФИОФизЛицСрезПоследних
	               |		ПО СпецСтаж.Сотрудник.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизическоеЛицо
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(&Дата, ) КАК ГражданствоФизЛиц
	               |		ПО СпецСтаж.Сотрудник.ФизическоеЛицо = ГражданствоФизЛиц.ФизическоеЛицо
	               |ГДЕ
	               |	СпецСтаж.ВидСтажа.ЛьготныйСтаж
	               |	И СпецСтаж.Организация = &Организация
	               |	И НЕ СпецСтаж.Сотрудник.ФизическоеЛицо.ЭтоГруппа
	               |	И (СпецСтаж.Сотрудник В
	               |				(ВЫБРАТЬ
	               |					РаботникиОрганизацийСрезПоследних.Сотрудник
	               |				ИЗ
	               |					РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&Дата, Организация = &Организация) КАК РаботникиОрганизацийСрезПоследних
	               |				ГДЕ
	               |					НЕ(РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	               |							И НАЧАЛОПЕРИОДА(РаботникиОрганизацийСрезПоследних.Период, МЕСЯЦ) <> НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ)))
	               |			ИЛИ СпецСтаж.Сотрудник.ФизическоеЛицо В (&МассивГПХПоПодразделению))
				   |	И НАЧАЛОПЕРИОДА(СпецСтаж.Период, МЕСЯЦ) >= &ПериодРегистрации"
				   ;
	
	
	Запрос.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр("Дата", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("МассивГПХПоПодразделению", МассивГПХПоПодразделению);
	Запрос.УстановитьПараметр("ПериодРегистрации", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	МРаботники = тзРаботники.ВыгрузитьКолонку("Сотрудник");
	СРаботники =  Новый СписокЗначений;
	СРаботники.ЗагрузитьЗначения(МРаботники);
	Запрос.Параметры.Вставить("тзРаботники", СРаботники);
	ТаблицаСпецСтажа = Запрос.Выполнить().Выгрузить();
	
	
	// теперь заполним таблицу 7
	мСтруктураИсхКолвоСтрокРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы7, ИсходноеКоличествоСтрокГруппы7);
	ДанныеФормы 	= ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы7];
	СтруктураГруппы7 = ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		

	СтруктураРеквизитовФормы.мИдГруппы7 = "T7T1R";
	
	НомСтроки = 1;
	Для каждого СтрокаСпецСтажа Из ТаблицаСпецСтажа Цикл
		
		Список.Добавить(СтрокаСпецСтажа.ФизЛицо, СтрокаСпецСтажа.Основание);        
		
		Если НомСтроки <= ИсходноеКоличествоСтрокГруппы7 Тогда
			ДобавленнаяСтрока = СтруктураГруппы7[НомСтроки - 1];
		Иначе
			ДобавленнаяСтрока = СтруктураГруппы7.Добавить();            
		КонецЕсли;
		НомСтроки = НомСтроки + 1;
		
		ДобавленнаяСтрока.T7T1RXXXXG6 	= СтрокаСпецСтажа.Гражданин;
		
		ДРФО = ОбработатьДРФО(СтрокаСпецСтажа.ДРФО);
		
		Если ЭтоЧисло(ДРФО) И СтрДлина(ДРФО) = 10 Тогда 
			ДобавленнаяСтрока.T7T1RXXXXG7S 			= ДРФО;
		Иначе
			ДобавленнаяСтрока.T7T1RXXXXG7S 			="БК" + ДРФО;
		КонецЕсли;
		
		
		ДобавленнаяСтрока.T7T1RXXXXG91S = СтрокаСпецСтажа.ФизЛицоФамилия;
		ДобавленнаяСтрока.T7T1RXXXXG92S = СтрокаСпецСтажа.ФизЛицоИмя;                      
		ДобавленнаяСтрока.T7T1RXXXXG93S	= СтрокаСпецСтажа.ФизЛицоОтчество;                             
		
		ДобавленнаяСтрока.T7T1RXXXXG8S  = СтрЗаменить(СтрокаСпецСтажа.Основание,"_","");
		
		ДатаНач = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
		ДатаКон = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
		Дней    = День(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		СтрокаПриемаУвольнений = ТаблицаПриемовУвольнений.Найти(СтрокаСпецСтажа.Физлицо);
		Если НЕ СтрокаПриемаУвольнений = Неопределено Тогда
			ДатаПриема     = СтрокаПриемаУвольнений.ДатаПриема;
			ДатаУвольнения = СтрокаПриемаУвольнений.ДатаУвольнения;
			Если НЕ ЗначениеЗаполнено(ДатаПриема)
				  И ЗначениеЗаполнено(ДатаУвольнения) Тогда
				// было увольнение
				ДатаКон = ДатаУвольнения;
				Дней    = День(ДатаУвольнения);					
			ИначеЕсли    ЗначениеЗаполнено(ДатаПриема)
				    И НЕ ЗначениеЗаполнено(ДатаУвольнения) Тогда
				// был прием
				ДатаНач = ДатаПриема;
				Дней = День(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - День(ДатаПриема) + 1;					
			ИначеЕсли ЗначениеЗаполнено(ДатаПриема)
				    И ЗначениеЗаполнено(ДатаУвольнения) Тогда
				// два варианта: был уволен, потом вновь принят; 
				//				 в начале принят, потом уволен	
				Если ДатаПриема <= ДатаУвольнения Тогда
					//в начале принят, потом уволен
					ДатаНач = ДатаПриема;
					ДатаКон = ДатаУвольнения;
					Дней = День(ДатаУвольнения) - День(ДатаПриема) + 1;					
				Иначе	
				    // был уволен, потом вновь принят;
					// значит на начало и конец месяца он работал - поэтому даты начала и конца совпадают
					// с границами периода.
					
					// но отработано дней здесь по-другому рассчитываются
					Дней = День(ДатаУвольнения) + (День(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) - День(ДатаПриема) + 1);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ДобавленнаяСтрока.T7T1RXXXXG10 	= ДатаНач;
        ДобавленнаяСтрока.T7T1RXXXXG11	= ДатаКон;
		ДобавленнаяСтрока.T7T1RXXXXG12  	= Дней;
		
		ДобавленнаяСтрока.T7T1RXXXXG141 	= День(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ДобавленнаяСтрока.T7T1RXXXXG17	= 1;
		
	КонецЦикла;   
			
	
	ЗначениеВРеквизитФормы(СтруктураГруппы7, СтруктураРеквизитовФормы.мИдГруппы7);
	Возврат Список;

КонецФункции

&НаСервере
Функция  СформироватьСписокТрудовыхОтношенийТаблица5()
	
	перем Работавшие, СтруктураГруппы5, ИсходноеКоличествоСтрокГруппы5;
	
	мСтруктураИсхКолвоСтрокРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы5, ИсходноеКоличествоСтрокГруппы5);
	
	ДанныеФормы 	= ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы5];
	СтруктураГруппы5 = ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		

	СтруктураРеквизитовФормы.мИдГруппы5 = "T5T1R";

	
	ТаблицаПриемовУвольнений = Новый ТаблицаЗначений();
	ТаблицаПриемовУвольнений.Колонки.Добавить("ФизЛицо",        Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПриемовУвольнений.Колонки.Добавить("ДатаПриема",     Новый ОписаниеТипов("Дата"));
	ТаблицаПриемовУвольнений.Колонки.Добавить("ДатаУвольнения", Новый ОписаниеТипов("Дата"));
	
	// заполним по работниками
	Работавшие = ПолучитьСписокЛиц();
	
	Если (РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БП" ИЛИ РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БСП") Тогда
		СписокПринятыхСотрудниковБП = Новый Соответствие;
	КонецЕсли;
	
	Номер = 1;
	Для Каждого стр ИЗ Работавшие Цикл
		
		ДатаНач = Неопределено;
		ДатаКон = Неопределено;
		
		Если стр.СтавокНаНачало <= 0 И стр.СтавокНаКонец <= 0
			И ЗначениеЗаполнено(Стр.ДатаПриема)     И (Стр.ДатаПриема <= СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)
			И ЗначениеЗаполнено(Стр.ДатаУвольнения) И (Стр.ДатаУвольнения >= СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) И (Стр.ДатаУвольнения <= СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
			ДатаНач = Стр.ДатаПриема;
			ДатаКон = Стр.ДатаУвольнения;
			
			
		ИначеЕсли стр.СтавокНаНачало <= 0 И стр.СтавокНаКонец > 0 
		   И ЗначениеЗаполнено(Стр.ДатаПриема) И (Стр.ДатаПриема <= СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
			ДатаНач = Стр.ДатаПриема;
		ИначеЕсли стр.СтавокНаНачало > 0 И стр.СтавокНаКонец <= 0 
				И ЗначениеЗаполнено(Стр.ДатаУвольнения) И (Стр.ДатаУвольнения >= СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) И (Стр.ДатаУвольнения <= СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
			ДатаКон = Стр.ДатаУвольнения;
			
		ИначеЕсли стр.СтавокНаНачало > 0 И стр.СтавокНаКонец > 0
			    И ЗначениеЗаполнено(Стр.ДатаУвольнения) И (Стр.ДатаУвольнения >= СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) И (Стр.ДатаУвольнения <= СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)
				И ЗначениеЗаполнено(Стр.ДатаПриема)     И (Стр.ДатаПриема <= СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда				
			// увольнение и прием в течение месяца				
			ДатаНач = Стр.ДатаПриема;
			ДатаКон = Стр.ДатаУвольнения;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если  ЗначениеЗаполнено(ДатаНач) 
			И ЗначениеЗаполнено(ДатаКон)
			И НачалоДня(ДатаНач) = НачалоДня(ДатаКон) Тогда
		    // прием и увольнение в один день - отражать нечего
			Продолжить;	
		КонецЕсли;
		
		СтрокаТаблицыПриемовУвольнений = ТаблицаПриемовУвольнений.Добавить();
		СтрокаТаблицыПриемовУвольнений.ФизЛицо        = стр.ФизЛицо;
		СтрокаТаблицыПриемовУвольнений.ДатаПриема     = ДатаНач;
		СтрокаТаблицыПриемовУвольнений.ДатаУвольнения = ДатаКон;
		
		Если (Номер > ИсходноеКоличествоСтрокГруппы5) Тогда
			ТекСтрока = СтруктураГруппы5.Добавить();
		Иначе
			ТекСтрока = СтруктураГруппы5[Номер - 1];
		КонецЕсли;
		
		ТекСтрока.T5T1RXXXXG6  = стр.Гражданин;
		
	
		ДРФО = ОбработатьДРФО(стр.КодПоДРФО);
		
		Если ЭтоЧисло(ДРФО) И СтрДлина(ДРФО) = 10 Тогда 
			ТекСтрока.T5T1RXXXXG9S 			= ДРФО;
		Иначе
			ТекСтрока.T5T1RXXXXG9S 			="БК" + ДРФО;
		КонецЕсли;
			
		ТекСтрока.T5T1RXXXXG101S   = стр.Фамилия;
		ТекСтрока.T5T1RXXXXG102S   = стр.Имя;
		ТекСтрока.T5T1RXXXXG103S   = стр.Отчество;
	
		ТекСтрока.T5T1RXXXXG111D   = ?(ЗначениеЗаполнено(ДатаНач),ДатаНач,0);
		ТекСтрока.T5T1RXXXXG112D   = ?(ЗначениеЗаполнено(ДатаКон),ДатаКон,0);
		
		ТекСтрока.T5T1RXXXXG7   = стр.Категория;
		
		Если ЗначениеЗаполнено(ДатаКон) Тогда
			ТекСтрока.T5T1RXXXXG13S   = ПолучитьПричинуУвольнения(Стр.Сотрудник,ДатаКон);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаНач) Тогда
			ДатаСозданияРМ = Стр.ДатаПриема;
			ТекСтрока.T5T1RXXXXG12D  = ДатаСозданияРМ;
		КонецЕсли;		
		
		Если (РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БП" ИЛИ РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БСП") Тогда
			// собираем список сотрудников, которые могут быть сотрудниками по ГПХ. 
			// в месяц приема информация без такого фильтра будет отображаться дважды.
			Если    (ЗначениеЗаполнено(ДатаНач) ИЛИ ЗначениеЗаполнено(ДатаКон)) И стр.Категория = 2 Тогда
				Если ЗначениеЗаполнено(стр.КодПоДРФО) Тогда
					СписокПринятыхСотрудниковБП.Вставить(стр.КодПоДРФО, Номер);		
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Номер = Номер + 1;
		
	КонецЦикла;
	
	
	// добавим информацию по ГПХ
	ДоговораГПХ = ПолучитьСписокДоговоровГПХ();
	
	Для Каждого стр ИЗ ДоговораГПХ Цикл
		
		СуществующийНомерСтроки = Неопределено;
		Если (РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БП" ИЛИ РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БСП") Тогда
			// ищем в списке сотрудников, которые могут быть сотрудниками по ГПХ. 
			// в месяц приема информация без такого фильтра будет отображаться дважды.
			Если ЗначениеЗаполнено(стр.КодПоДРФО) Тогда
				СуществующийНомерСтроки = СписокПринятыхСотрудниковБП.Получить(стр.КодПоДРФО);
			КонецЕсли;
		КонецЕсли;	
		Если СуществующийНомерСтроки = Неопределено Тогда
			ТекНомер = Номер;
			Если (ТекНомер > ИсходноеКоличествоСтрокГруппы5) Тогда
				ТекСтрока = СтруктураГруппы5.Добавить();
			Иначе
				ТекСтрока = СтруктураГруппы5[Номер - 1];
			КонецЕсли;
		Иначе
			ТекСтрока = СтруктураГруппы5[СуществующийНомерСтроки - 1];
		КонецЕсли;
		
		
		ТекСтрока.T5T1RXXXXG6 	  = стр.Гражданин;
		
		ДРФО = ОбработатьДРФО(стр.КодПоДРФО);
		
		Если ЭтоЧисло(ДРФО) И СтрДлина(ДРФО)= 10 Тогда 
			ТекСтрока.T5T1RXXXXG9S 			= ДРФО;
		Иначе
			ТекСтрока.T5T1RXXXXG9S 			="БК" + ДРФО;
		КонецЕсли;
		
		
		ТекСтрока.T5T1RXXXXG101S   = стр.Фамилия;
		ТекСтрока.T5T1RXXXXG102S   = стр.Имя;
		ТекСтрока.T5T1RXXXXG103S   = стр.Отчество;
		
		ТекСтрока.T5T1RXXXXG111D   = ?(ЗначениеЗаполнено(стр.ДатаНач),стр.ДатаНач,0);
		ТекСтрока.T5T1RXXXXG112D   = ?(ЗначениеЗаполнено(стр.ДатаКон),стр.ДатаКон,0);
		
		ТекСтрока.T5T1RXXXXG7   = 3;
		ТекСтрока.T5T1RXXXXG8   = Стр.ГПХпоОснМестуРаботы;
		
		Если СуществующийНомерСтроки = Неопределено Тогда
			Номер = Номер + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	
	////Добавим информацию об отпусках
	Отпуска = ПолучитьСписокОтпуска(ПолучитьСписокПоУходуДо3());

	Для Каждого стр ИЗ Отпуска Цикл
		
		Если (Номер > ИсходноеКоличествоСтрокГруппы5) Тогда
			ТекСтрока = СтруктураГруппы5.Добавить();
		Иначе
			ТекСтрока = СтруктураГруппы5[Номер-1];
		КонецЕсли;
		
		ТекСтрока.T5T1RXXXXG6  		= стр.Гражданин;
		
		ДРФО = ОбработатьДРФО(стр.КодПоДРФО);
		
		Если ЭтоЧисло(ДРФО) И СтрДлина(ДРФО) = 10 Тогда 
			ТекСтрока.T5T1RXXXXG9S			= ДРФО;
		Иначе
			ТекСтрока.T5T1RXXXXG9S 			="БК" + ДРФО;
		КонецЕсли;
	
		
		ТекСтрока.T5T1RXXXXG101S   	= стр.Фамилия;
		ТекСтрока.T5T1RXXXXG102S 		= стр.Имя;
		ТекСтрока.T5T1RXXXXG103S   	= стр.Отчество;
		
		ТекСтрока.T5T1RXXXXG111D   = ?(ЗначениеЗаполнено(стр.Начало),стр.Начало,0);
		ТекСтрока.T5T1RXXXXG112D   = ?(ЗначениеЗаполнено(стр.Конец),стр.Конец,0);
	
		
		ТекСтрока.T5T1RXXXXG7   = 6;
		
		Номер = Номер + 1;
		
	КонецЦикла;
	Отпуска = ПолучитьСписокОтпуска(ПолучитьСписокПоУходу());
	Для Каждого стр ИЗ Отпуска Цикл
		
		Если (Номер > ИсходноеКоличествоСтрокГруппы5) Тогда
			ТекСтрока = СтруктураГруппы5.Добавить();
		Иначе
			ТекСтрока = СтруктураГруппы5[Номер-1];
		КонецЕсли;
		
		ТекСтрока.T5T1RXXXXG6  	= стр.Гражданин;
		
		ДРФО = ОбработатьДРФО(стр.КодПоДРФО);
		
		Если ЭтоЧисло(ДРФО) И СтрДлина(ДРФО) = 10 Тогда 
			ТекСтрока.T5T1RXXXXG9S 			= ДРФО;
		Иначе
			ТекСтрока.T5T1RXXXXG9S 			="БК" + ДРФО;
		КонецЕсли;
	
		
		ТекСтрока.T5T1RXXXXG101S   = стр.Фамилия;
		ТекСтрока.T5T1RXXXXG102S   = стр.Имя;
		ТекСтрока.T5T1RXXXXG103S   = стр.Отчество;
		
		ТекСтрока.T5T1RXXXXG111D   = ?(ЗначениеЗаполнено(стр.Начало),стр.Начало,0);
		ТекСтрока.T5T1RXXXXG112D   = ?(ЗначениеЗаполнено(стр.Конец),стр.Конец,0);
			
		ТекСтрока.T5T1RXXXXG7   = 4;
		Номер = Номер + 1;
		
	КонецЦикла;
	
	Отпуска = ПолучитьСписокОтпуска(ПолучитьСписокДекретные());
	Для Каждого стр ИЗ Отпуска Цикл
		
		Если (Номер > ИсходноеКоличествоСтрокГруппы5) Тогда
			ТекСтрока = СтруктураГруппы5.Добавить();
		Иначе
			ТекСтрока = СтруктураГруппы5[Номер-1];
		КонецЕсли;
		
		ТекСтрока.T5T1RXXXXG6  	= стр.Гражданин;
		
		ДРФО = ОбработатьДРФО(стр.КодПоДРФО);
		
		Если ЭтоЧисло(ДРФО) И СтрДлина(ДРФО) = 10 Тогда 
			ТекСтрока.T5T1RXXXXG9S 			= ДРФО;
		Иначе
			ТекСтрока.T5T1RXXXXG9S 			="БК" + ДРФО;
		КонецЕсли;
	
		
		ТекСтрока.T5T1RXXXXG101S   = стр.Фамилия;
		ТекСтрока.T5T1RXXXXG102S 	= стр.Имя;
		ТекСтрока.T5T1RXXXXG103S   = стр.Отчество;
		
		ТекСтрока.T5T1RXXXXG111D   = ?(ЗначениеЗаполнено(стр.Начало),стр.Начало,0);
		ТекСтрока.T5T1RXXXXG112D   = ?(ЗначениеЗаполнено(стр.Конец),стр.Конец,0);

		ТекСтрока.T5T1RXXXXG7   = 5;
		
		Номер = Номер + 1;
		
	КонецЦикла;
	

	ЗначениеВРеквизитФормы(СтруктураГруппы5, СтруктураРеквизитовФормы.мИдГруппы5);

	
	Возврат ТаблицаПриемовУвольнений;
	

КонецФункции	

&НаСервере
Функция ЭтоЧисло(Слово)
	
	Цифры = "1234567890";
	
	Для НомСимвола = 1 По СтрДлина(Слово) Цикл
		
		Если Найти(Цифры, Сред(Слово, НомСимвола, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина
	
КонецФункции

&НаСервере
Процедура РассчитатьСуммуФактическихЗатратНаОплатуТруда()

	
	БольничныеПредприятие 	= 0;
	БольничныеФСС 			= 0;
	БольничныеФССНесчСлучай = 0;
	ГПХ						= 0;
	Зарплата				= 0;
	ОтпускБеременностьИРоды = 0;
	
	ИмяРегистра = "ИНАГРО_Начисления";
	
	//запросы по суммам начислений
	ЗапросНачисленияБольн = Новый Запрос ();
	ЗапросНачисленияБольн.Текст = "ВЫБРАТЬ
	                              |	ОсновныеНачисленияРаботников.ВидРасчета КАК ВидРасчета,
	                              |	СУММА(ОсновныеНачисленияРаботников.Результат) КАК Результат
	                              |ИЗ
	                              |	РегистрРасчета."+ИмяРегистра+" КАК ОсновныеНачисленияРаботников
	                              |ГДЕ
	                              |	ОсновныеНачисленияРаботников.Организация = &Организация
	                              |	И ОсновныеНачисленияРаботников.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
	                              |
	                              |СГРУППИРОВАТЬ ПО
	                              |	ОсновныеНачисленияРаботников.ВидРасчета";
	
	ЗапросНачисленияБольн.УстановитьПараметр("ДатаНач", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ЗапросНачисленияБольн.УстановитьПараметр("ДатаКон" , СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ЗапросНачисленияБольн.УстановитьПараметр("Организация",   СтруктураРеквизитовФормы.Организация);
	
	// виды расчетов по больничным
	ВидыРасчетов = ПолучитьБольничныеПредприятия();
	Для каждого ВидРасчета Из ПолучитьСписокВидовРасчетовПоВидуНалога(Справочники.Налоги.ЕСВФОТБольничные) Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;
	Для каждого ВидРасчета Из ПолучитьБольничныеФССНесчСлучай() Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;
	Для каждого ВидРасчета Из ПолучитьСписокДекретные() Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;
	// виды расчетов по ГПХ
	ОблагаемоеЕСВГПХ = ПолучитьСписокВидовРасчетовПоВидуНалога(Справочники.Налоги.ЕСВФОТГПХ); 
	Для каждого ВидРасчета Из ОблагаемоеЕСВГПХ Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;
	// остальные виды расчетов, которые имеют отношение к ЕСВ
	СЗ = Новый Массив;
	СЗ.Добавить(Справочники.Налоги.ЕСВФОТРаботники);
	Попытка
		СЗ.Добавить(Справочники.Налоги.ЕСВФОТМобил);
	Исключение
	КонецПопытки;	
	
	ВсеОблагаемоеЕСВ = ПолучитьСписокВидовРасчетовПоВидуНалога(СЗ); 
	Для каждого ВидРасчета Из ВсеОблагаемоеЕСВ Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;

	// выполняем запрос по начислениям
	ЗапросНачисленияБольн.УстановитьПараметр("ВидыРасчетов",   ВидыРасчетов);
	Выборка = ЗапросНачисленияБольн.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ПолучитьБольничныеПредприятия().Найти(Выборка.ВидРасчета) = Неопределено Тогда
			
			БольничныеПредприятие = БольничныеПредприятие + Выборка.Результат;
			
		ИначеЕсли НЕ  ПолучитьСписокВидовРасчетовПоВидуНалога(Справочники.Налоги.ЕСВФОТБольничные).Найти(Выборка.ВидРасчета) = Неопределено Тогда
			
			БольничныеФСС = БольничныеФСС + Выборка.Результат;
			
		ИначеЕсли НЕ ПолучитьБольничныеФССНесчСлучай().Найти(Выборка.ВидРасчета) = Неопределено Тогда
			
			БольничныеФССНесчСлучай = БольничныеФССНесчСлучай + Выборка.Результат;
			
		ИначеЕсли НЕ ОблагаемоеЕСВГПХ.Найти(Выборка.ВидРасчета) = Неопределено Тогда	
			
			ГПХ = ГПХ + Выборка.Результат; 
			
		ИначеЕсли НЕ ПолучитьСписокДекретные().Найти(Выборка.ВидРасчета) = Неопределено Тогда	
			
			ОтпускБеременностьИРоды = ОтпускБеременностьИРоды + Выборка.Результат; 
		Иначе
			// все остальное попадает в п. 1.1.
			Зарплата = Зарплата + Выборка.Результат;
			
		КонецЕсли;
		
	КонецЦикла; 
	

	СтруктураДанныхТаблица1.R011G3 = Зарплата;
	СтруктураДанныхТаблица1.R012G3 = ГПХ;
	СтруктураДанныхТаблица1.R013G3 = БольничныеПредприятие;
	СтруктураДанныхТаблица1.R014G3 = БольничныеФСС + БольничныеФССНесчСлучай;
	СтруктураДанныхТаблица1.R015G3 = ОтпускБеременностьИРоды;
	
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНачисленияВзносыТаблица6(СписокРаботниковСоСпецСтажем)
	
	Перем 	СтруктураГруппы6, ИсходноеКоличествоСтрокГруппы6;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ПериодОтчета", НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.Параметры.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Параметры.Вставить("ВРБезСохранения", ПолучитьСписокБезСохранения());
	
	// виды расчетов по больничным
	ВидыРасчетов = ПолучитьБольничныеПредприятия();
	Для каждого ВидРасчета Из ПолучитьСписокВидовРасчетовПоВидуНалога(Справочники.Налоги.ЕСВФОТБольничные) Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;
	Для каждого ВидРасчета Из ПолучитьБольничныеФССНесчСлучай() Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;
	
	Запрос.Параметры.Вставить("ВРБольничные", ВидыРасчетов);
	
	Запрос.Параметры.Вставить("ВРДекретные",  ПолучитьСписокДекретные());
	
	МассивКодыБольничные = Новый Массив();
	МассивКодыБольничные.Вставить(0, 29);
	МассивКодыБольничные.Вставить(1, 36);
	МассивКодыБольничные.Вставить(2, 37);
	МассивКодыБольничные.Вставить(3, 39);
	
	МассивКодыБольничные.Вставить(4, 42);
	МассивКодыБольничные.Вставить(5, 43);
	МассивКодыБольничные.Вставить(6, 44);
	МассивКодыБольничные.Вставить(7, 45);
	
	Запрос.Параметры.Вставить("МассивКодыБольничные", МассивКодыБольничные);
	
	МассивКодыДекретные = Новый Массив();
	МассивКодыДекретные.Вставить(0, 42);
	МассивКодыДекретные.Вставить(1, 43);
	МассивКодыДекретные.Вставить(2, 44);
	МассивКодыДекретные.Вставить(3, 45);
	
	Запрос.Параметры.Вставить("МассивКодыДекретные", МассивКодыДекретные);
	
	МассивКодыГПХ = Новый Массив();
	МассивКодыГПХ.Вставить(0, 26);
	МассивКодыГПХ.Вставить(1, 38);
	Запрос.Параметры.Вставить("МассивКодыГПХ", МассивКодыГПХ);
	
	МассивКодыМобилизованные = Новый Массив();
	МассивКодыМобилизованные.Вставить(0, 48);
	Запрос.Параметры.Вставить("МассивКодыМобилизованные", МассивКодыМобилизованные);
	
	
	//Тексты запросов общий
	//Для отдельных конфигураций модифицируются ниже по коду
	
	ТекстЗапросаВТФОТ ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                   |	ВзносыВФонды.Сотрудник,
	                   |	ВзносыВФонды.ВидРасчета.КатегорияРасчета КАК КатегорияРасчета,
	                   |	НАЧАЛОПЕРИОДА(ВзносыВФонды.БазовыйПериодНачало, МЕСЯЦ) КАК Период,
	                   |	ВзносыВФонды.КодКатегорииЗЛ,
	                   |	ВзносыВФонды.ТипНачисления,
	                   |	ВзносыВФонды.База,
	                   |	ВзносыВФонды.БазаОтпускные,
	                   |	ВзносыВФонды.БазаВзноса,
	                   |	ВзносыВФонды.БазаДоначисление КАК ДоначислениеФОТ,
	                   |	ВзносыВФонды.Результат КАК НалогФОТ,
	                   |	ВзносыВФонды.РезультатДоначисление КАК ДоначислениеНалогФОТ
	                   |ПОМЕСТИТЬ ВТВзносыФОТ
	                   |ИЗ
	                   |	РегистрРасчета.ИНАГРО_ВзносыВФонды КАК ВзносыВФонды
	                   |ГДЕ
	                   |	ВзносыВФонды.Организация = &Организация
	                   |	И ВзносыВФонды.ПериодРегистрации = &ПериодОтчета
					   |	И ВзносыВФонды.ВидРасчета В
					   |	(ВЫБРАТЬ
					   |				РегистрСведений.ИНАГРО_ВидыРасчетовВзносовВФонды.СрезПоследних.ВидРасчета
					   |			ИЗ
					   |				РегистрСведений.ИНАГРО_ВидыРасчетовВзносовВФонды.СрезПоследних(&ПериодОтчета, Налог.Родитель = ЗНАЧЕНИЕ(Справочник.Налоги.ВзносыФОТ)))
	                   |	И ВзносыВФонды.ВидРасчета.ЕСВ
	                   |
	                   |ИНДЕКСИРОВАТЬ ПО
	                   |	ВзносыВФонды.Сотрудник,
	                   |	Период,
	                   |	ВзносыВФонды.КодКатегорииЗЛ,
	                   |	ВзносыВФонды.ТипНачисления";
	
	ТекстЗапросаВТ ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзносыВФонды.Сотрудник,
	|	ВзносыВФонды.ВидРасчета.КатегорияРасчета КАК КатегорияРасчета,
	|	НАЧАЛОПЕРИОДА(ВзносыВФонды.БазовыйПериодНачало,МЕСЯЦ) КАК Период,
	|	СУММА(ВзносыВФонды.Результат) КАК Налог
	|ПОМЕСТИТЬ ВТВзносы
	|ИЗ
	|	РегистрРасчета.ИНАГРО_ВзносыВФонды КАК ВзносыВФонды
	|ГДЕ
	|	ВзносыВФонды.Организация = &Организация
	|	И ВзносыВФонды.ПериодРегистрации = &ПериодОтчета
	|	И ВзносыВФонды.ВидРасчета В
	|			(ВЫБРАТЬ
	|				РегистрСведений.ИНАГРО_ВидыРасчетовВзносовВФонды.СрезПоследних.ВидРасчета
	|			ИЗ
	|				РегистрСведений.ИНАГРО_ВидыРасчетовВзносовВФонды.СрезПоследних(&ПериодОтчета, Налог.Родитель = ЗНАЧЕНИЕ(Справочник.Налоги.Взносы)))
	|	И ВзносыВФонды.ВидРасчета.ЕСВ
	|СГРУППИРОВАТЬ ПО
	| ВзносыВФонды.Сотрудник, ВзносыВФонды.ВидРасчета.КатегорияРасчета,  НАЧАЛОПЕРИОДА(ВзносыВФонды.БазовыйПериодНачало,МЕСЯЦ)
	|ИНДЕКСИРОВАТЬ ПО
	| Сотрудник, Период
	|";
	
	ТекстЗапросаВТОтработанныеДни ="ВЫБРАТЬ
	|	ТЗ.Сотрудник,
	|	ВЫБОР 
	|		КОГДА ТЗ.ДатаУвольнения ЕСТЬ NULL ТОГДА &ДнейВМесяце
	|		КОГДА ТЗ.ДатаУвольнения > КОНЕЦПЕРИОДА(&ПериодОтчета,МЕСЯЦ)  ТОГДА &ДнейВМесяце
	|       ИНАЧЕ ДЕНЬ(ТЗ.ДатаУвольнения)-1
	|   КОНЕЦ -
	|	ВЫБОР 
	|		КОГДА ТЗ.ДатаПриема ЕСТЬ NULL ТОГДА 1
	|       ИНАЧЕ ДЕНЬ(ТЗ.ДатаПриема)
	|   КОНЕЦ +1 КАК ОтработанныеДни,
	|	ВЫБОР 
	|		КОГДА ТЗ.ПринятНаНовоеРабочееМесто ТОГДА 1
	|       ИНАЧЕ 0
	|   КОНЕЦ КАК ПринятНаНовоеРабочееМесто,
	|	ВЫБОР 
	|		КОГДА ТЗ.СокращенноеРабочееВремя ТОГДА 1
	|       ИНАЧЕ 0
	|   КОНЕЦ КАК СокращенноеРабочееВремя
	|ПОМЕСТИТЬ ВТОтработанныеДниРаботники
	|ИЗ &тзРаботники КАК ТЗ
	|ИНДЕКСИРОВАТЬ ПО
	| Сотрудник
	|;
	|
	|ВЫБРАТЬ
	|	ТЗ.Сотрудник КАК Сотрудник,
	|	ВЫБОР 
	|		КОГДА ТЗ.ДатаКон ЕСТЬ NULL ТОГДА &ДнейВМесяце
	|		КОГДА ТЗ.ДатаКон > КОНЕЦПЕРИОДА(&ПериодОтчета,МЕСЯЦ)  ТОГДА &ДнейВМесяце
	|       ИНАЧЕ ДЕНЬ(ТЗ.ДатаКон)
	|   КОНЕЦ -
	|	ВЫБОР 
	|		КОГДА ТЗ.ДатаНач ЕСТЬ NULL ТОГДА 1
	|       ИНАЧЕ ДЕНЬ(ТЗ.ДатаНач)
	|   КОНЕЦ +1 КАК ОтработанныеДни,
	|	ВЫБОР 
	|		КОГДА ТЗ.ПринятНаНовоеРабочееМесто ТОГДА 1
	|       ИНАЧЕ 0
	|   КОНЕЦ КАК ПринятНаНовоеРабочееМесто
	|ПОМЕСТИТЬ ВТСписокГПХ
	|ИЗ &тзГПХ КАК ТЗ
	|ИНДЕКСИРОВАТЬ ПО
	| Сотрудник
	|
	|;
	|ВЫБРАТЬ
	|	СписокГПХ.Сотрудник,
	|	СписокГПХ.Сотрудник.ОсновноеНазначение КАК ОсновноеНазначение,
	|	СписокГПХ.ОтработанныеДни,
	|	СписокГПХ.ПринятНаНовоеРабочееМесто,
	|   0 КАК СокращенноеРабочееВремя
	|ПОМЕСТИТЬ ВТОтработанныеДниГПХ
	|ИЗ ВТСписокГПХ КАК СписокГПХ
	|ИНДЕКСИРОВАТЬ ПО
	| Сотрудник
	|;
	|
	|ВЫБРАТЬ
	|	ЕстьNULL(ВТ.Сотрудник, ВТГПХ.Сотрудник) КАК Сотрудник,
	|	ЕстьNULL(ВТ.ОтработанныеДни, 0) КАК ОтработанныеДни,
	|	ЕстьNULL(ВТГПХ.ОтработанныеДни, 0) КАК ОтработанныеДниГПХ,
	|	ЕстьNULL(ВТ.ПринятНаНовоеРабочееМесто, ВТГПХ.ПринятНаНовоеРабочееМесто) КАК ПринятНаНовоеРабочееМесто,
	|	ЕстьNULL(ВТ.СокращенноеРабочееВремя, ВТГПХ.СокращенноеРабочееВремя) КАК СокращенноеРабочееВремя
	|ПОМЕСТИТЬ ВТОтработанныеДни
	|ИЗ ВТОтработанныеДниРаботники КАК ВТ
	|   ПОЛНОЕ СОЕДИНЕНИЕ
	|   ВТОтработанныеДниГПХ КАК ВТГПХ
	|   ПО ВТ.Сотрудник = ВТГПХ.Сотрудник ИЛИ ВТ.Сотрудник = ВТГПХ.ОсновноеНазначение
	|ИНДЕКСИРОВАТЬ ПО
	| Сотрудник
	|";
	Запрос.Параметры.Вставить("тзРаботники", тзРаботники);
	Запрос.Параметры.Вставить("тзГПХ", тзГПХ);
	Запрос.Параметры.Вставить("ДнейВМесяце", День(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	
	ТекстЗапросаВТБезСохранения ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.ПериодДействия КАК Период,
	|	СУММА(РАЗНОСТЬДАТ(Начисления.ПериодДействияНачало,Начисления.ПериодДействияКонец,ДЕНЬ)
	|	+ ВЫБОР КОГДА Начисления.ПериодДействияНачало = НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало,ДЕНЬ) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК Дней
	|ПОМЕСТИТЬ ВТБезСохранения
	|ИЗ
	|	РегистрРасчета.ИНАГРО_Начисления.ФактическийПериодДействия КАК Начисления
	|ГДЕ
	|	Начисления.Организация = &Организация
	|	И Начисления.ПериодДействия = &ПериодОтчета
	|	И Начисления.ПериодРегистрации <= &ПериодОтчета
	|	И Начисления.ВидРасчета В (&ВРБезСохранения)
	|	И НЕ Начисления.Сторно
	|	И Начисления.Сотрудник = Начисления.Назначение
	|СГРУППИРОВАТЬ ПО
	| Начисления.Сотрудник, Начисления.ПериодДействия
	|
	|ОБЪЕДИНИТЬ ВСЕ
    |
	|ВЫБРАТЬ
	|	//Невыходы предыдущих периодов - обычные и сторно
	|	Начисления.Сотрудник,
	|	Начисления.ПериодДействия КАК Период,
	|	СУММА(ВЫБОР КОГДА Начисления.Сторно ТОГДА -1 ИНАЧЕ 1 КОНЕЦ * (РАЗНОСТЬДАТ(Начисления.ПериодДействияНачало,Начисления.ПериодДействияКонец,ДЕНЬ)
	|	+ ВЫБОР КОГДА Начисления.ПериодДействияНачало = НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало,ДЕНЬ) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ))	КАК Дней
	|ИЗ
	|	РегистрРасчета.ИНАГРО_Начисления.ФактическийПериодДействия КАК Начисления
	|ГДЕ
	|	Начисления.Организация = &Организация
	|	И Начисления.ПериодДействия < &ПериодОтчета
	|	И Начисления.ПериодРегистрации = &ПериодОтчета
	|	И Начисления.ВидРасчета В (&ВРБезСохранения)
	|	И Начисления.Сотрудник = Начисления.Назначение
	|СГРУППИРОВАТЬ ПО
	|  Начисления.Сотрудник, Начисления.ПериодДействия
	|ИНДЕКСИРОВАТЬ ПО
	| Сотрудник, Период
	|";

	ТекстЗапросаВТБольничные ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |" + ?(РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БСП", "", "
	|Начисления.СторнируемыйДокумент
	|ПОМЕСТИТЬ ВТСторноБольничные 
	|ИЗ
	|	РегистрРасчета.ИНАГРО_Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Организация = &Организация
	|	И Начисления.ПериодРегистрации = &ПериодОтчета
	|	И (Начисления.ВидРасчета В(&ВРБольничные) ИЛИ Начисления.ВидРасчета В(&ВРДекретные))
	|   И (Начисления.СторнируемыйДокумент ССЫЛКА Документ.ИНАГРО_НачислениеПоБольничномуЛисту)
	|; 
	|ВЫБРАТЬ
	|") + "
	|	Начисления.Сотрудник,
	|	Начисления.ПериодДействия КАК Период,
	|   СУММА(
	|		ВЫБОР КОГДА Начисления.ВидРасчета В(&ВРБольничные)
	|		ТОГДА РАЗНОСТЬДАТ(Начисления.ПериодДействияНачало,Начисления.ПериодДействияКонец,ДЕНЬ)+1 
	|		ИНАЧЕ 0
	|		КОНЕЦ) КАК ДнейБольничные,
	|   СУММА(
	|		ВЫБОР КОГДА Начисления.ВидРасчета В(&ВРДекретные)
	|		ТОГДА РАЗНОСТЬДАТ(Начисления.ПериодДействияНачало,Начисления.ПериодДействияКонец,ДЕНЬ)+1 
	|		ИНАЧЕ 0
	|		КОНЕЦ) КАК ДнейДекретные
	|ПОМЕСТИТЬ ВТБольничные
	|ИЗ
	|	РегистрРасчета.ИНАГРО_Начисления.ФактическийПериодДействия КАК Начисления
	|ГДЕ
	|	Начисления.Организация = &Организация
	|	И Начисления.ПериодРегистрации = &ПериодОтчета
	|	И (Начисления.ВидРасчета В(&ВРБольничные) ИЛИ Начисления.ВидРасчета В(&ВРДекретные))
	|	И Начисления.Сотрудник = Начисления.Назначение
	|	И НЕ Начисления.Сторно
    |" + ?(РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БСП", "", "
    |	И Начисления.Регистратор НЕ В (ВЫБРАТЬ СторнируемыйДокумент ИЗ ВТСторноБольничные)
	|") + "
	|СГРУППИРОВАТЬ ПО
	| Начисления.Сотрудник, Начисления.ПериодДействия
	|ИНДЕКСИРОВАТЬ ПО
	| Сотрудник, Период
	|";
	
	ТекстТаблица6 = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|   ВзносыФОТ.Сотрудник,
	|	ВзносыФОТ.ФизЛицо,
	|	ВзносыФОТ.ФизЛицо.Пол КАК ФизЛицоПол,
	|	ВзносыФОТ.ФизЛицо.КодПоДРФО КАК КодПоДРФО,
	|	ВЫБОР 
	|	КОГДА ЕстьNULL(ГражданствоФизЛиц.ИНАГРО_НеЯвляетсяНалоговымРезидентом, ЛОЖЬ)
	|		ТОГДА 0
	|	КОГДА ЕстьNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) 
	|	  ИЛИ ЕстьNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.Украина) 
	|		ТОГДА 1
	|	ИНАЧЕ 0 КОНЕЦ КАК Гражданин,
	|   ВзносыФОТ.КодКатегорииЗЛ,
	|   ВзносыФОТ.ТипНачисления,
	|   ВзносыФОТ.Период,
	|	ВЫБОР
	|		КОГДА ФИОФизЛиц.ФизическоеЛицо ЕСТЬ NULL 
	|			ТОГДА ВзносыФОТ.Наименование
	|		ИНАЧЕ ФИОФизЛиц.Фамилия
	|	КОНЕЦ              КАК ФизЛицоФио,
	|	ФИОФизЛиц.Имя 	   КАК ФизЛицоИмя,
	|	ФИОФизЛиц.Отчество КАК ФизЛицоОтчество,
	|   ВзносыФОТ.Результат,
	|   ВзносыФОТ.РезультатОтпускные,
	|   ВзносыФОТ.РезультатСПределом,
	|   ЕСТЬNULL(ВзносыВФонды.Налог, 0) КАК Налог,
	|   ВзносыФОТ.ДоначислениеФОТ,
	|   ВзносыФОТ.НалогФОТ,
	|   ВзносыФОТ.ДоначислениеНалогФОТ,
	|	ВЫБОР КОГДА ВзносыФОТ.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы) ТОГДА 1 Иначе 0 КОНЕЦ КАК ПризнакНаличияТрудовойКнижки,
	|	ВЫБОР 
	|	 КОГДА ВзносыФОТ.ТипНачисления = 0 И ВзносыФОТ.КодКатегорииЗЛ В (&МассивКодыБольничные) 
	|	 ТОГДА ЕСТЬNULL(Больничные.ДнейБольничные,0)
	|	 ИНАЧЕ 0
	|	КОНЕЦ КАК ДнейБольничные, 
	
	|	ВЫБОР 
	|	КОГДА  ВзносыФОТ.ТипНачисления = 0 И ВзносыФОТ.КодКатегорииЗЛ В (&МассивКодыДекретные) 
	|	 ТОГДА ЕСТЬNULL(Больничные.ДнейДекретные,0)
	|	 ИНАЧЕ 0
	|	КОНЕЦ КАК ДнейДекретные, 
	
	|	ВЫБОР КОГДА 
	|	 ВзносыФОТ.ТипНачисления = 0 И ВзносыФОТ.КодКатегорииЗЛ НЕ В (&МассивКодыБольничные)  
	|	 ТОГДА ЕСТЬNULL(БезСохранения.Дней,0)
	|	 ИНАЧЕ 0
	|	КОНЕЦ КАК ДнейБезСохранения,
	|	ВЫБОР 
	|    КОГДА 
	|   	 ВзносыФОТ.ТипНачисления = 0 И ВзносыФОТ.КодКатегорииЗЛ НЕ В (&МассивКодыГПХ) И ВзносыФОТ.КодКатегорииЗЛ НЕ В (&МассивКодыБольничные) И ВзносыФОТ.Период = &ПериодОтчета 
	|	 ТОГДА ЕСТЬNULL(Отработанные.ОтработанныеДни,0)
	|    КОГДА 
	|   	 ВзносыФОТ.ТипНачисления = 0 И ВзносыФОТ.КодКатегорииЗЛ В (&МассивКодыГПХ) И ВзносыФОТ.Период = &ПериодОтчета 
	|	 ТОГДА ЕСТЬNULL(Отработанные.ОтработанныеДниГПХ,&ДнейВМесяце)
	|    КОГДА 
	|	 	ВзносыФОТ.ТипНачисления = 0 И ВзносыФОТ.КодКатегорииЗЛ В (&МассивКодыДекретные) И ВзносыФОТ.Период <> &ПериодОтчета
	|	 ТОГДА ЕСТЬNULL(Больничные.ДнейДекретные,0)
	|	 ИНАЧЕ 0
	|	КОНЕЦ КАК ОтработанныеДни,
	|	Отработанные.ПринятНаНовоеРабочееМесто КАК ПринятНаНовоеРабочееМесто,
	|   Отработанные.СокращенноеРабочееВремя КАК СокращенноеРабочееВремя
	|	
	|
	|ИЗ
	| (ВЫБРАТЬ
	|   ВзносыВФонды.Сотрудник,
	|   ВзносыВФонды.Сотрудник.ИНАГРО_ВидЗанятости КАК ВидЗанятости,
	|   ВзносыВФонды.Сотрудник.ФизическоеЛицо КАК ФизЛицо,
	|   ВзносыВФонды.Сотрудник.ФизическоеЛицо.Наименование КАК Наименование,
	|   ВзносыВФонды.КатегорияРасчета,
	|   ВзносыВФонды.Период,
	|   ВзносыВФонды.КодКатегорииЗЛ,
	|   ВзносыВФонды.ТипНачисления,
	|   СУММА(ВзносыВФонды.База) КАК Результат,
    |   СУММА(ВзносыВФонды.БазаОтпускные) КАК РезультатОтпускные,
	|   СУММА(ВзносыВФонды.БазаВзноса) КАК РезультатСПределом,
	|   СУММА(ВзносыВФонды.ДоначислениеФОТ) КАК ДоначислениеФОТ,
	|   СУММА(ВзносыВФонды.ДоначислениеНалогФОТ) КАК ДоначислениеНалогФОТ,
	|   СУММА(ВзносыВФонды.НалогФОТ) КАК НалогФОТ
	|  ИЗ ВТВзносыФОТ КАК ВзносыВФонды
	|  СГРУППИРОВАТЬ ПО
	|   ВзносыВФонды.Сотрудник, ВзносыВФонды.Сотрудник.ИНАГРО_ВидЗанятости, ВзносыВФонды.Сотрудник.ФизическоеЛицо, ВзносыВФонды.Сотрудник.ФизическоеЛицо.Наименование, ВзносыВФонды.КатегорияРасчета, ВзносыВФонды.Период, ВзносыВФонды.КодКатегорииЗЛ, ВзносыВФонды.ТипНачисления
	| ) КАК ВзносыФОТ
	| ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.ФиоФизическихЛиц.СрезПоследних(КОНЕЦПЕРИОДА(&ПериодОтчета,МЕСЯЦ)) КАК ФИОФизЛиц
	|	ПО ВзносыФОТ.ФизЛицо = ФИОФизЛиц.ФизическоеЛицо
	| ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(КОНЕЦПЕРИОДА(&ПериодОтчета,МЕСЯЦ)) КАК ГражданствоФизЛиц
	|	ПО ВзносыФОТ.ФизЛицо = ГражданствоФизЛиц.ФизическоеЛицо
	| ЛЕВОЕ СОЕДИНЕНИЕ 
	|   ВТБезСохранения КАК БезСохранения
	|   ПО ВзносыФОТ.Период = БезСохранения.Период
	|    И ВзносыФОТ.Сотрудник = БезСохранения.Сотрудник
	| ЛЕВОЕ СОЕДИНЕНИЕ 
	|   ВТБольничные КАК Больничные
	|   ПО ВзносыФОТ.Период = Больничные.Период
	|    И ВзносыФОТ.Сотрудник = Больничные.Сотрудник
	| ЛЕВОЕ СОЕДИНЕНИЕ 
	|   ВТОтработанныеДни КАК Отработанные
	|   ПО ВзносыФОТ.Сотрудник = Отработанные.Сотрудник
	| ЛЕВОЕ СОЕДИНЕНИЕ 
	|   ВТВзносы КАК ВзносыВФонды
	|   ПО ВзносыВФонды.Период = ВзносыФОТ.Период
	|    И ВзносыВФонды.Сотрудник = ВзносыФОТ.Сотрудник
	|    И ВзносыВФонды.КатегорияРасчета = ВзносыФОТ.КатегорияРасчета
	|    И ВзносыФОТ.КодКатегорииЗЛ НЕ В(&МассивКодыМобилизованные)
	|				
	|ГДЕ
	|	ВзносыФОТ.Результат <> 0 ИЛИ ВзносыФОТ.РезультатСПределом <> 0 ИЛИ ВзносыФОТ.НалогФОТ <> 0
	|	ИЛИ ВзносыФОТ.ДоначислениеФОТ <> 0 ИЛИ ЕСТЬNULL(ВзносыВФонды.Налог, 0) <> 0 ИЛИ ВзносыФОТ.ДоначислениеНалогФОТ <> 0 
	|   ИЛИ ВЫБОР 
	|    КОГДА 
	|   	 ВзносыФОТ.ТипНачисления = 0 И ВзносыФОТ.КодКатегорииЗЛ НЕ В (&МассивКодыГПХ) И ВзносыФОТ.КодКатегорииЗЛ НЕ В (&МассивКодыБольничные) И ВзносыФОТ.Период = &ПериодОтчета 
	|	 ТОГДА ЕСТЬNULL(Отработанные.ОтработанныеДни,0)
	|    КОГДА 
	|   	 ВзносыФОТ.ТипНачисления = 0 И ВзносыФОТ.КодКатегорииЗЛ В (&МассивКодыГПХ) И ВзносыФОТ.Период = &ПериодОтчета 
	|	 ТОГДА ЕСТЬNULL(Отработанные.ОтработанныеДниГПХ,&ДнейВМесяце)
	|	 ИНАЧЕ 0
	|	КОНЕЦ <> 0
	|   ИЛИ ВЫБОР КОГДА 
	|	 ВзносыФОТ.ТипНачисления = 0 И ВзносыФОТ.КодКатегорииЗЛ В (&МассивКодыДекретные) 
	|	 ТОГДА ЕСТЬNULL(Больничные.ДнейДекретные,0)
	|	 КОГДА ВзносыФОТ.ТипНачисления = 0 И ВзносыФОТ.КодКатегорииЗЛ В (&МассивКодыБольничные) 
	|	 ТОГДА ЕСТЬNULL(Больничные.ДнейБольничные,0)
	|	 ИНАЧЕ 0
	|	 КОНЕЦ <> 0
	|	ИЛИ ВЫБОР КОГДА 
	|	 ВзносыФОТ.ТипНачисления = 0 И ВзносыФОТ.КодКатегорииЗЛ НЕ В (&МассивКодыБольничные)  
	|	 ТОГДА ЕСТЬNULL(БезСохранения.Дней,0)
	|	 ИНАЧЕ 0
	|	КОНЕЦ  <> 0
	|УПОРЯДОЧИТЬ ПО
	|  ФизЛицоФио, КодПоДРФО, ВзносыФОТ.Период, КодКатегорииЗЛ, ТипНачисления
	|";
	
	
	ТекстЗапросаВТОтработанныеДни = СтрЗаменить(ТекстЗапросаВТОтработанныеДни,"-1","");
		
	Запрос.Текст    = ТекстЗапросаВТ;
	Запрос.Выполнить();

	Запрос.Текст    = ТекстЗапросаВТОтработанныеДни;
	Запрос.Выполнить();

	Запрос.Текст    = ТекстЗапросаВТФОТ;
	Запрос.Выполнить();
	
	Запрос.Текст    = ТекстЗапросаВТБезСохранения;
	Запрос.Выполнить();
	Запрос.Текст    = ТекстЗапросаВТБольничные;
	Запрос.Выполнить();
	Запрос.Текст    = ТекстТаблица6;
	
	РезультатЗапросаТаблица6 = Запрос.Выполнить();
	РассчитатьЧислоЗастрахованныхЛиц(РезультатЗапросаТаблица6.Выгрузить());
	
	ВыборкаТаблица6 = РезультатЗапросаТаблица6.Выбрать();
	
	// таблица 6
	мСтруктураИсхКолвоСтрокРазделов.Свойство(СтруктураРеквизитовФормы.мИдГруппы6, ИсходноеКоличествоСтрокГруппы6);
	ДанныеФормы 	= ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы6];
	СтруктураГруппы6 = ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		

	СтруктураРеквизитовФормы.мИдГруппы6 = "T6T1R";

	
	НомСтроки = 1;
	Пока ВыборкаТаблица6.Следующий() Цикл
		
		Результат = ВыборкаТаблица6.Результат - ВыборкаТаблица6.РезультатОтпускные;
		РезультатОтпускные = ВыборкаТаблица6.РезультатОтпускные;
		
		//Вариант 2 - сумма с пределом и налог делим пропорционально, но с приоритетом основной
		
		РезультатСПределом = МИН(ВыборкаТаблица6.РезультатСПределом - ВыборкаТаблица6.ДоначислениеФОТ,Результат);
		РезультатСПределомОтпускные = ВыборкаТаблица6.РезультатСПределом - ВыборкаТаблица6.ДоначислениеФОТ - РезультатСПределом;
		
		КоэффициентДеления = ?(ВыборкаТаблица6.РезультатСПределом - ВыборкаТаблица6.ДоначислениеФОТ = 0 ИЛИ РезультатСПределом = ВыборкаТаблица6.РезультатСПределом - ВыборкаТаблица6.ДоначислениеФОТ, 1, РезультатСПределом/(ВыборкаТаблица6.РезультатСПределом - ВыборкаТаблица6.ДоначислениеФОТ));
		
		Налог 		   = Окр(ВыборкаТаблица6.Налог*КоэффициентДеления, 2);
		НалогОтпускные = ВыборкаТаблица6.Налог - Налог;
		
		ДоначислениеФОТ = ВыборкаТаблица6.ДоначислениеФОТ;
		ДоначислениеНалогФОТ = ВыборкаТаблица6.ДоначислениеНалогФОТ;
		
		НалогФОТ        = Окр((ВыборкаТаблица6.НалогФОТ-ДоначислениеНалогФОТ)*КоэффициентДеления, 2);
		НалогФОТОтпускные = Окр((ВыборкаТаблица6.НалогФОТ-ДоначислениеНалогФОТ) - НалогФОТ,2);
		
		Если НомСтроки <= ИсходноеКоличествоСтрокГруппы6 Тогда
			ДобавленнаяСтрока = СтруктураГруппы6[НомСтроки - 1];
		Иначе
			ДобавленнаяСтрока = СтруктураГруппы6.Добавить();	
		КонецЕсли;
        НомСтроки = НомСтроки + 1;
		
	
		ДРФО = ОбработатьДРФО(ВыборкаТаблица6.КодПоДРФО);
		
		Если ЭтоЧисло(ДРФО) И СтрДлина(ДРФО) = 10 Тогда 
			ДобавленнаяСтрока["T6T1RXXXXG8S"] 			= ДРФО;
		Иначе
			ДобавленнаяСтрока["T6T1RXXXXG8S"] 			="БК" + ДРФО;
		КонецЕсли;
	
			
		Если ВыборкаТаблица6.ФизЛицо.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
			ДобавленнаяСтрока["T6T1RXXXXG7"] 			= "Ч";
		ИначеЕсли ВыборкаТаблица6.ФизЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
			ДобавленнаяСтрока["T6T1RXXXXG7"] 			= "Ж";
		КонецЕсли;
		ДобавленнаяСтрока["T6T1RXXXXG6"]		= ВыборкаТаблица6.Гражданин;
		
		ДобавленнаяСтрока["T6T1RXXXXG121S"] 			= ВыборкаТаблица6.ФизЛицоФио;
		ДобавленнаяСтрока["T6T1RXXXXG122S"] 			= ВыборкаТаблица6.ФизЛицоИмя;		
		ДобавленнаяСтрока["T6T1RXXXXG123S"]    		    = ВыборкаТаблица6.ФизЛицоОтчество;		
		
		ДобавленнаяСтрока["T6T1RXXXXG9"] 	= ВыборкаТаблица6.КодКатегорииЗЛ;

		Если ВыборкаТаблица6.КодКатегорииЗЛ=0 Тогда
			Сообщить("В таблице 6 по сотруднику "+ВыборкаТаблица6.Сотрудник+" не определен ""Код категорії ЗО"". Установлен как ""1""!",СтатусСообщения.Внимание);
			ДобавленнаяСтрока["T6T1RXXXXG9"] 	= 1;
		КонецЕсли; 
		
        ДобавленнаяСтрока["T6T1RXXXXG10"] 	= ВыборкаТаблица6.ТипНачисления;
		//Если это отпускные за будущий период - показываем тип 10
		Если Результат = 0 И РезультатОтпускные <> 0 Тогда
        	ДобавленнаяСтрока["T6T1RXXXXG10"] 	= 10;
		КонецЕсли;	
		
		ДобавленнаяСтрока["T6T1RXXXXG111D"]	= ВыборкаТаблица6.Период;	
		ДобавленнаяСтрока["T6T1RXXXXG13"] 	= ВыборкаТаблица6.ДнейБольничные;
        ДобавленнаяСтрока["T6T1RXXXXG14"] 	= ВыборкаТаблица6.ДнейБезСохранения;
		
		ДобавленнаяСтрока["T6T1RXXXXG16"] 	= ВыборкаТаблица6.ДнейДекретные;
		
		//Если в отчетном периоде кроме ЗП есть отпускные - показываем их отдельной строкой с типом 10
		Если Результат <> 0 И РезультатОтпускные <> 0 И ВыборкаТаблица6.Период = НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
        	ДобавленнаяСтрока["T6T1RXXXXG17"]= Результат;
			ДобавленнаяСтрока["T6T1RXXXXG18"] = РезультатСПределом;
			ДобавленнаяСтрока["T6T1RXXXXG20"]  = Налог;
			ДобавленнаяСтрока["T6T1RXXXXG21"]  = НалогФОТ;
			
		Иначе
			ДобавленнаяСтрока["T6T1RXXXXG17"]= ВыборкаТаблица6.Результат;
			ДобавленнаяСтрока["T6T1RXXXXG18"] = ВыборкаТаблица6.РезультатСПределом - ВыборкаТаблица6.ДоначислениеФОТ;
			ДобавленнаяСтрока["T6T1RXXXXG20"]  = ВыборкаТаблица6.Налог;
			Если Результат = 0 И РезультатОтпускные <> 0 Тогда 
				//Это отпускные за следующий период
				ДобавленнаяСтрока["T6T1RXXXXG21"]  = НалогФОТОтпускные;
			Иначе	
				ДобавленнаяСтрока["T6T1RXXXXG21"]  = НалогФОТ;
			КонецЕсли;	
		КонецЕсли;	
        
        ДобавленнаяСтрока["T6T1RXXXXG22"] 	= ВыборкаТаблица6.ПризнакНаличияТрудовойКнижки;
		
		Если НЕ СписокРаботниковСоСпецСтажем.НайтиПоЗначению(ВыборкаТаблица6.Сотрудник.ФизическоеЛицо) = Неопределено Тогда
			ДобавленнаяСтрока["T6T1RXXXXG23"] = 1;
		КонецЕсли;
	
        ДобавленнаяСтрока["T6T1RXXXXG15"] = ВыборкаТаблица6.ОтработанныеДни;
        ДобавленнаяСтрока["T6T1RXXXXG25"] = ВыборкаТаблица6.ПринятНаНовоеРабочееМесто;
		
		ДобавленнаяСтрока["T6T1RXXXXG24"] 	     = ВыборкаТаблица6.СокращенноеРабочееВремя;
		
		//Если в отчетном периоде кроме ЗП есть отпускные - показываем их отдельной строкой с типом 10
		Если Результат <> 0 И РезультатОтпускные <> 0 И ВыборкаТаблица6.Период = НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) Тогда
			Если НомСтроки <= ИсходноеКоличествоСтрокГруппы6 Тогда
				ДобавленнаяСтрока = СтруктураГруппы6[НомСтроки - 1];
			Иначе
				ДобавленнаяСтрока = СтруктураГруппы6.Добавить();	
			КонецЕсли;
	        НомСтроки = НомСтроки + 1;
			
			ДРФО = ОбработатьДРФО(ВыборкаТаблица6.КодПоДРФО);
			Если ЭтоЧисло(ДРФО) И СтрДлина(ДРФО) = 10 Тогда 
				ДобавленнаяСтрока["T6T1RXXXXG8S"] 			= ДРФО;
			Иначе
				ДобавленнаяСтрока["T6T1RXXXXG8S"] 			="БК" + ДРФО;
			КонецЕсли;
		
			
			Если ВыборкаТаблица6.ФизЛицо.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
				ДобавленнаяСтрока["T6T1RXXXXG7"] 			= "Ч";
			ИначеЕсли ВыборкаТаблица6.ФизЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
				ДобавленнаяСтрока["T6T1RXXXXG7"] 			= "Ж";
			КонецЕсли;
			ДобавленнаяСтрока["T6T1RXXXXG6"]		= ВыборкаТаблица6.Гражданин;
			
			ДобавленнаяСтрока["T6T1RXXXXG121S"] 			= ВыборкаТаблица6.ФизЛицоФио;
			ДобавленнаяСтрока["T6T1RXXXXG122S"] 			= ВыборкаТаблица6.ФизЛицоИмя;		
			ДобавленнаяСтрока["T6T1RXXXXG123S"]        		= ВыборкаТаблица6.ФизЛицоОтчество;		
			
			ДобавленнаяСтрока["T6T1RXXXXG9"] 	= ВыборкаТаблица6.КодКатегорииЗЛ;
			Если ВыборкаТаблица6.КодКатегорииЗЛ=0 Тогда
				Сообщить("В таблице 6 по сотруднику "+ВыборкаТаблица6.Сотрудник+" не определен ""Код категорії ЗО"". Установлен как ""1""!",СтатусСообщения.Внимание);
				ДобавленнаяСтрока["T6T1RXXXXG9"] 	= 1;
			КонецЕсли; 
	        ДобавленнаяСтрока["T6T1RXXXXG10"] 	= 10;
			
			ДобавленнаяСтрока["T6T1RXXXXG111D"]	= ВыборкаТаблица6.Период;
			
			ДобавленнаяСтрока["T6T1RXXXXG13"] 	= 0;
	        ДобавленнаяСтрока["T6T1RXXXXG14"] 	= 0;
			
			ДобавленнаяСтрока["T6T1RXXXXG17"]= РезультатОтпускные;
	        ДобавленнаяСтрока["T6T1RXXXXG18"] = РезультатСПределомОтпускные;
			ДобавленнаяСтрока["T6T1RXXXXG20"]  = НалогОтпускные;
			ДобавленнаяСтрока["T6T1RXXXXG21"]  = НалогФОТОтпускные;
			
			ДобавленнаяСтрока["T6T1RXXXXG22"] 	= ВыборкаТаблица6.ПризнакНаличияТрудовойКнижки;
			Если НЕ СписокРаботниковСоСпецСтажем.НайтиПоЗначению(ВыборкаТаблица6.Сотрудник.ФизическоеЛицо) = Неопределено Тогда
				ДобавленнаяСтрока["T6T1RXXXXG23"] = 1;
			КонецЕсли;
	        ДобавленнаяСтрока["T6T1RXXXXG15"] = 0;
	        ДобавленнаяСтрока["T6T1RXXXXG25"] 	     = ВыборкаТаблица6.ПринятНаНовоеРабочееМесто;
			
			ДобавленнаяСтрока["T6T1RXXXXG24"] 	     = ВыборкаТаблица6.СокращенноеРабочееВремя;
		КонецЕсли;	
		
		//Если есть доначисления - показываем их отдельной строкой с типом 13
		Если ДоначислениеФОТ <> 0 ИЛИ ДоначислениеНалогФОТ <> 0 Тогда
			Если НомСтроки <= ИсходноеКоличествоСтрокГруппы6 Тогда
				ДобавленнаяСтрока = СтруктураГруппы6[НомСтроки - 1];
			Иначе
				Если ДобавленнаяСтрока["T6T1RXXXXG17"] = 0 И ДобавленнаяСтрока["T6T1RXXXXG18"] = 0 И ДобавленнаяСтрока["T6T1RXXXXG20"] = 0 Тогда
					//В этой строке ничего нет, используем ту же строку
					НомСтроки = НомСтроки - 1;
				Иначе
					ДобавленнаяСтрока = СтруктураГруппы6.Добавить();
				КонецЕсли;	
			КонецЕсли;
	        НомСтроки = НомСтроки + 1;
			
			ДРФО = ОбработатьДРФО(ВыборкаТаблица6.КодПоДРФО);
			
			Если ЭтоЧисло(ДРФО) И СтрДлина(ДРФО) = 10 Тогда 
				ДобавленнаяСтрока["T6T1RXXXXG8S"] 			= ДРФО;
			Иначе
				ДобавленнаяСтрока["T6T1RXXXXG8S"] 			="БК" + ДРФО;
			КонецЕсли;
			
			
			Если ВыборкаТаблица6.ФизЛицо.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
				ДобавленнаяСтрока["T6T1RXXXXG7"] 			= "Ч";
			ИначеЕсли ВыборкаТаблица6.ФизЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
				ДобавленнаяСтрока["T6T1RXXXXG7"] 			= "Ж";
			КонецЕсли;
			ДобавленнаяСтрока["T6T1RXXXXG6"]		= ВыборкаТаблица6.Гражданин;
			
			ДобавленнаяСтрока["T6T1RXXXXG121S"] 			= ВыборкаТаблица6.ФизЛицоФио;
			ДобавленнаяСтрока["T6T1RXXXXG122S"] 			= ВыборкаТаблица6.ФизЛицоИмя;		
			ДобавленнаяСтрока["T6T1RXXXXG123S"]        		= ВыборкаТаблица6.ФизЛицоОтчество;		
			
			ДобавленнаяСтрока["T6T1RXXXXG9"] 	= ВыборкаТаблица6.КодКатегорииЗЛ;
			Если ВыборкаТаблица6.КодКатегорииЗЛ=0 Тогда
				Сообщить("В таблице 6 по сотруднику "+ВыборкаТаблица6.Сотрудник+" не определен ""Код категорії ЗО"". Установлен как ""1""!",СтатусСообщения.Внимание);
				ДобавленнаяСтрока["T6T1RXXXXG9"] 	= 1;
			КонецЕсли; 
	        ДобавленнаяСтрока["T6T1RXXXXG10"] 	= 13;
			
			ДобавленнаяСтрока["T6T1RXXXXG111D"]	= ВыборкаТаблица6.Период;
			
			ДобавленнаяСтрока["T6T1RXXXXG13"] 	= 0;
	        ДобавленнаяСтрока["T6T1RXXXXG14"] 	= 0;
			
			ДобавленнаяСтрока["T6T1RXXXXG17"]= 0;
	        ДобавленнаяСтрока["T6T1RXXXXG18"] = 0;
			
			ДобавленнаяСтрока["T6T1RXXXXG20"]  = 0;
			ДобавленнаяСтрока["T6T1RXXXXG21"]  = ДоначислениеНалогФОТ;
			
			ДобавленнаяСтрока["T6T1RXXXXG19"]  = ДоначислениеФОТ;
			
			
			ДобавленнаяСтрока["T6T1RXXXXG22"] 	= ВыборкаТаблица6.ПризнакНаличияТрудовойКнижки;
			Если НЕ СписокРаботниковСоСпецСтажем.НайтиПоЗначению(ВыборкаТаблица6.Сотрудник.ФизическоеЛицо) = Неопределено Тогда
				ДобавленнаяСтрока["T6T1RXXXXG23"] = 1;
			КонецЕсли;
	        ДобавленнаяСтрока["T6T1RXXXXG15"] = 0;
	        ДобавленнаяСтрока["T6T1RXXXXG25"] 	     = ВыборкаТаблица6.ПринятНаНовоеРабочееМесто;
			
			ДобавленнаяСтрока["T6T1RXXXXG24"] 	     = ВыборкаТаблица6.СокращенноеРабочееВремя;
		КонецЕсли;	
		
	КонецЦикла;	
	ЗначениеВРеквизитФормы(СтруктураГруппы6, СтруктураРеквизитовФормы.мИдГруппы6);

	
КонецПроцедуры

&НаСервере
//выпоняет расчет числа застрахованных лиц и лиц, получающих пособие по уходу за ребенком
Процедура РассчитатьЧислоЗастрахованныхЛиц (ТаблицаБазВзносовОтчетногоПериода)
	
	ТаблицаКоличестваЗастрахованныхЛиц = ТаблицаБазВзносовОтчетногоПериода.Скопировать();
	ТаблицаКоличестваЗастрахованныхЛиц.Свернуть("ФизЛицо, ФизЛицоПол", "");
	
	СообщениеВыводилось = Ложь;
	Для каждого ФизЛицо Из ТаблицаКоличестваЗастрахованныхЛиц Цикл
		Если НЕ ЗначениеЗаполнено(ФизЛицо.ФизЛицоПол) Тогда
			Если СообщениеВыводилось = Ложь Тогда
				СообщениеВыводилось = Истина;
				Сообщить(НСтр("ru = 'В карточках следующих физ.лиц не указан их пол. Заполнение показателя в шапке Таблицы 1 ""Кількість застрахованих осіб у звітному періоді, у тому числі"" будет не корректным:'; uk = 'У картках наступних фіз. осіб не зазначена їхня стать. Заповнення показника у шапці Таблиці 1 ""Кількість застрахованих осіб у звітному періоді, у тому числі"" буде не коректним:'"));
			КонецЕсли;
			Сообщить(Символы.Таб + ФизЛицо.ФизЛицо);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДанныхТаблица1.HNACTL5 = ТаблицаКоличестваЗастрахованныхЛиц.Количество();	
	
	НайденныеСтроки = ТаблицаКоличестваЗастрахованныхЛиц.НайтиСтроки(Новый Структура("ФизЛицоПол",Перечисления.ПолФизическогоЛица.Мужской));
	СтруктураДанныхТаблица1.HNACTL6 = НайденныеСтроки.Количество();	

	НайденныеСтроки = ТаблицаКоличестваЗастрахованныхЛиц.НайтиСтроки(Новый Структура("ФизЛицоПол",Перечисления.ПолФизическогоЛица.Женский));
	СтруктураДанныхТаблица1.HNACTL7 = НайденныеСтроки.Количество();	
	
КонецПроцедуры
//ИНАГРО -- 
