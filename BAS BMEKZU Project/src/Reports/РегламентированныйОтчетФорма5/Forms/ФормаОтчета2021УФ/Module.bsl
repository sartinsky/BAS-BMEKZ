&НаСервере
Перем мБухИтоги;
&НаСервере
Перем ТаблицаРасшифровки;
&НаСервере
Перем ОбщиеПараметрыРасшифровки;

&НаСервере
Перем мОбъектОтчета;
// хранит версию формы отчета
Перем мВерсияФормы;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
		
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2021УФ";
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
		
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	
	
	СтруктураДанныхРазделI			= Новый Структура;
	СтруктураДанныхРазделII			= Новый Структура;
	СтруктураДанныхРазделIII_IV		= Новый Структура;
	СтруктураДанныхРазделV_VI		= Новый Структура;
	СтруктураДанныхРазделVII_VIII	= Новый Структура;
	СтруктураДанныхРазделIX_XII		= Новый Структура;
	СтруктураДанныхРазделXIII		= Новый Структура;
	СтруктураДанныхРазделXIV		= Новый Структура;
	СтруктураДанныхРазделXV			= Новый Структура;
	СтруктураДанныхНалоговыеРазницы	= Новый Структура;
	
	мСтруктураМногострочныхРазделов = Новый Структура;

	мСтруктураМногостраничныхРазделов = Новый Структура;
	
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
		
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "09/07/2021";
	
	СтруктураРеквизитовФормы.мПечатныеформы 	= Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "РазделI";
		
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	ДатаПодписи                                       = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати 	   = Ложь;
	
	ПеречислениеПериодичностьМесяц = Перечисления.Периодичность.Месяц;
	
	СтруктураРеквизитовФормы.ЕстьДуплекс = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность", "ЕстьДуплекс", Ложь);
	Элементы.ЕстьДуплекс.Пометка		 = СтруктураРеквизитовФормы.ЕстьДуплекс;
	
	ВывестиМакетВТаблДокНаСервере(ИмяРаздела, 1);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяРаздела);
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяРаздела);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	
	
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("ОргНазв");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкиДопСтрок", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкиДопСтраниц", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Истина);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуВыгрузить", Ложь);
	
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	
	СтруктураРеквизитовФормы.Вставить("ТекущиеОбластиСтраниц");
	СтруктураРеквизитовФормы.Вставить("КолонкиМногострочныхРазделов");
	СтруктураРеквизитовФормы.Вставить("ЕстьДуплекс", Ложь);
	
	СтруктураРеквизитовФормы.Вставить("ПолучениеДанныхДляЗвит1С", Ложь);
	СтруктураРеквизитовФормы.Вставить("ДопПоказателиОтчетаЗвит1С", Новый Структура);
	
КонецПроцедуры


// Функция возвращает параметры числа Е для различных разделов отчета
//
// Параметры
//  ИмяРаздела  - Строка
//
// Возвращаемое значение:
//  Результат   - ОписаниеТипа
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОписаниеТипаЧислаЕДляРаздела(ИмяРаздела = "")
	
	Результат = Новый Структура("ОписаниеТипа, Длина, Точность");
	
	//Если ИмяРаздела = "Раздел1" 
	// ИЛИ ИмяРаздела = "Раздел2" 
	// ИЛИ ИмяРаздела = "Раздел3" 
	// ИЛИ ИмяРаздела = "Раздел3_Прил2" Тогда
	//	Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));
	//ИначеЕсли ИмяРаздела = "Раздел7" Тогда
	//	Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2));	
	//Иначе
    Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	//КонецЕсли; 

	Возврат Результат; 
	
КонецФункции


&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьНачальныеНастройки();

	
	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ЗаполнитьПустыеСтруктурыДанных();	
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		НачальныеОперацииСМногострочнымиБлоками();
			
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
		КонецЕсли;
		
	Иначе
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуВыгрузить Тогда
		Элементы.Выгрузить.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкиДопСтрок Тогда
		Элементы.ДопСтроки.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкиДопСтраниц Тогда
		Элементы.ДопСтраницы.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
    	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПрорисоватьПодменюПечать(ЭтаФорма);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ОргНазв = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры // Инициализация()

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // НачальныеОперацииСМногострочнымиБлоками()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);	
	
	МассивТиповТаблицаЗначений = Новый Массив; 
	МассивТиповТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТиповТаблицаЗначений);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда         
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда		
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы 
	//

	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "РазделI";
	СтрокаУровня1.Представление            = НСтр("ru='Раздел I';uk='Розділ I'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ПечатьПоВысоте";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "РазделII";
	СтрокаУровня1.Представление            = НСтр("ru='Раздел II';uk='Розділ II'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ПечатьПоВысоте";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "РазделIII_IV";
	СтрокаУровня1.Представление            = НСтр("ru='Разделы III-IV';uk='Розділи III-IV'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ПечатьПоВысоте";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "РазделV_VI";
	СтрокаУровня1.Представление            = НСтр("ru='Разделы V-VI';uk='Розділи V-VI'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ПечатьПоВысоте";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "РазделVII_VIII";
	СтрокаУровня1.Представление            = НСтр("ru='Разделы VII-VIII';uk='Розділи VII-VIII'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ПечатьПоВысоте";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "РазделIX_XII";
	СтрокаУровня1.Представление            = НСтр("ru='Разделы IX-XII';uk='Розділи IX-XII'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ПечатьПоВысоте";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "НалоговыеРазницы";
	СтрокаУровня1.Представление            = НСтр("ru='Налоговые разницы';uk='Податкові різниці'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ПечатьПоВысоте";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "РазделXIII";
	СтрокаУровня1.Представление            = НСтр("ru='Раздел XIII';uk='Розділ XIII'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ПечатьПоВысоте";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "РазделXIV";
	СтрокаУровня1.Представление            = НСтр("ru='Раздел XIV';uk='Розділ XIV'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ПечатьПоВысоте";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "РазделXV";
	СтрокаУровня1.Представление            = НСтр("ru='Раздел XV';uk='Розділ XV'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ПечатьПоВысоте";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки.
//
&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
		
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "РазделI";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "РазделII";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "РазделIII_IV";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "РазделV_VI";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "РазделVII_VIII";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "РазделIX_XII";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "НалоговыеРазницы";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "РазделXIII";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "РазделXIV";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "РазделXV";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	
	

КонецПроцедуры // ФормироватьСтруктуруСвойствСтраниц()

// СформироватьДеревоРазделовОтчетаНаСервере()
//
&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаСервере()

// СформироватьДеревоРазделовОтчетаНаКлиенте()
//
&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаКлиенте()

// СформироватьДеревоРазделовОтчета()
//
&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Страница " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры // СформироватьДеревоРазделовОтчета()

// РазделыОтчетаПриАктивизацииСтроки()
//
&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент) Экспорт
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	// сохраним текущее положение курсора на странице
	Если СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Неопределено Тогда
		СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Новый Структура;
	КонецЕсли;
	ТекущийНомерСтраницы = "_" + Строка(СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	
	КоординатыОбласти = Новый Структура();
	КоординатыОбласти.Вставить("Верх", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Верх);
	КоординатыОбласти.Вставить("Низ", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ);
	КоординатыОбласти.Вставить("Лево", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево);
	КоординатыОбласти.Вставить("Право", Элементы.ТабличныйДокумент.ТекущаяОбласть.Право);
	
	СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц.Вставить(ТекущийНомерСтраницы, КоординатыОбласти);	

	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Элементы.ДобавитьСтраницу.Доступность   = Ложь;
	Элементы.УдалитьСтраницу.Доступность    = Ложь;
	Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
	Элементы.ДобавитьСтроку.Доступность     = Ложь;
	Элементы.УдалитьСтроку.Доступность      = Ложь;
					
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
																
		КонецЕсли;														
				
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		
		Элементы.ДобавитьСтраницу.Доступность   = Истина;
		Элементы.УдалитьСтраницу.Доступность    = Истина;
		Элементы.УдалитьВсеСтраницы.Доступность = Истина;
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			
			Элементы.УдалитьСтраницу.Доступность = Ложь;
							   			
			Если Элемент.ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
				Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
			КонецЕсли;
			
		ИначеЕсли Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
			
			Элементы.УдалитьСтраницу.Доступность    = Ложь;
			Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	// восстановим текущее положение курсора
	ТекущийНомерСтраницы = "_"+Строка(СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	Если СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц.Свойство(ТекущийНомерСтраницы) Тогда
		
		КоординатыОбласти = СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц[ТекущийНомерСтраницы];
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(КоординатыОбласти.Верх, КоординатыОбласти.Лево, КоординатыОбласти.Низ, КоординатыОбласти.Право);	
		
	Иначе	
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1, 1, 1);	
		
	КонецЕсли;
	
КонецПроцедуры // РазделыОтчетаПриАктивизацииСтроки()

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
			
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
	//Если ИмяТекРаздела = "Раздел2" Тогда
	//	ИзменитьЦветЯчеекНаСервере();
	//КонецЕсли;
						
КонецПроцедуры // ВывестиМакетСтраницыВТабличныйДокументНаСервере()

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность)
	
	ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
	ИмяГруппыМассив = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
	Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
		ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы);	
	КонецЦикла;
	
КонецПроцедуры // СохранитьДанныеРаздела()

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	 ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	
	Если ТабличныйДокумент.Области.Найти("ПредупреждениеОПечати") = Неопределено Тогда
		ТабличныйДокумент.ОбластьПечати = Неопределено;
	Иначе
		ТабличныйДокумент.ОбластьПечати 					  = ТабличныйДокумент.Области.ПредупреждениеОПечати;
	    ТабличныйДокумент.Области.ПредупреждениеОПечати.Текст = НСтр("ru='ВНИМАНИЕ! Печать отчета необходимо осуществлять из меню ''Печать''.';uk= 'УВАГА! Друк звіту необхідно здійснювати за допомогою меню ''Друк''.'");
	КонецЕсли;
	
	// Многостраничные разделы.
	//
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Если НЕ ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) = Неопределено Тогда
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;
	
	ИмяГруппыМассив = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
	Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
		
		СтруктураГруппы = Неопределено;
		
		мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		
		СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
		
		ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		
		
	КонецЦикла;
	
	ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяТекРаздела);

	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
	
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	
КонецПроцедуры // ВывестиМакетВТаблДокНаСервере()

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(НаимРаздела)
	
	Если НаимРаздела = "РазделI" Тогда
		ЗаполнитьДатуПодписи(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоказателиЗначениямиПоУмолчанию()


&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры // УстановитьФорматВыводаВПоляхВводаНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;

	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(СокрЛ(КодПоказателя), 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
				ФорматируемаяОбласть.ТипЗначения = Новый ОписаниеТипов(ФорматируемаяОбласть.ТипЗначения,,,Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					
					ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
					ФорматируемаяОбласть.ТипЗначения = Новый ОписаниеТипов(ФорматируемаяОбласть.ТипЗначения,,,Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьФорматВыводаВПоляхВвода()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)

	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "Л = ""uk_UA""; ФП = Истина" );

	ЗаполнитьПоказательНаСервере("ПериодОтчета",   СтрПериодОтчета,  Форма, "РазделI");	
	
	ЗаполнитьПоказательНаСервере("ДатаКонцаПериодаОтчетаГод",    Формат(КонецДня(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) + 1, "ДФ = 'гггг'"),  Форма, "РазделI");	
	ЗаполнитьПоказательНаСервере("ДатаКонцаПериодаОтчетаМесяц",  Формат(КонецДня(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) + 1, "ДФ = 'ММ'"),  Форма, "РазделI");	
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры // ПоказатьПериод()

// УстановитьЦветФонаЯчейкиНаКлиенте()
//
&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // УстановитьЦветФонаЯчейкиНаКлиенте()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // УстановитьЦветФонаЯчейкиНаСервере()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					
					ПозицияXXXX = Найти(ИмяПоказателя, "XXXX");
					Если ПозицияXXXX = 0 Тогда
						ВБлокеВсеПоказателиЗаполняются = Истина;
					Иначе
						ИмяГруппы = Лев(ИмяПоказателя, ПозицияXXXX - 1);
						ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
					КонецЕсли;
					
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЦветФонаЯчейки()

// ЗаполнитьСведенияОбОрганизацииНаСервере()
//
&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере()
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма);
		
КонецПроцедуры // ЗаполнитьСведенияОбОрганизацииНаСервере()

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма)
	
	//сначала все постоянные сведения из справочника "Организации"
	ОргНазв   = Форма.СтруктураРеквизитовФормы.Организация.НаименованиеПолное;
	
	ЗаполнитьПоказательНаСервере("ОргНазв", ОргНазв, Форма, "РазделI");
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");
	СписокПоказателей.Добавить("","ФИОБух");
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СписокПоказателей.Добавить("","КодКАТОТТГ");
	СписокПоказателей.Добавить("","КодКОАТУУ");
	СписокПоказателей.Добавить("","КодСПОДУ");
	СписокПоказателей.Добавить("","КодОПФГ");
	СписокПоказателей.Добавить("","КодКВЕД");
	СписокПоказателей.Добавить("","Территория");
	СписокПоказателей.Добавить("","ОрганГУ");
	СписокПоказателей.Добавить("","ОПФГ");
	СписокПоказателей.Добавить("","ВЭД");
  
	ФИОДиректора = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СписокПоказателей).ФИОРук;
	ФИОГлавБуха = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.ДатаПодписи, СписокПоказателей).ФИОБух;
	
	Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Форма.СтруктураРеквизитовФормы.Организация, Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, СписокПоказателей);
	
	КодЕДРПОУ  = Сведения.КодПоЕДРПОУ;
	КодКОАТУУ  = Сведения.КодКАТОТТГ;
	КодКОАТУУ  = ?(ЗначениеЗаполнено(КодКОАТУУ),КодКОАТУУ,Сведения.КодКОАТУУ);
	КодСПОДУ   = Сведения.КодСПОДУ;
	КодОПФГ    = Сведения.КодОПФГ;
	КодКВЕД    = Сведения.КодКВЕД;
	Территория = Сведения.Территория;
	ОрганГУ    = Сведения.ОрганГУ;
	ВЭД        = Сведения.ВЭД;
	ОПФГ       = Сведения.ОПФГ;
	
	ЗаполнитьПоказательНаСервере("ОргБухгалтер", ФИОГлавБуха, Форма, "РазделXV");
	ЗаполнитьПоказательНаСервере("ОргДиректор",ФИОДиректора, Форма, "РазделXV");
	ЗаполнитьПоказательНаСервере("ОргКодЕДРПОУ",КодЕДРПОУ, Форма, "РазделI");
	ЗаполнитьПоказательНаСервере("ОргКодКОАТУУ",КодКОАТУУ, Форма, "РазделI");
	ЗаполнитьПоказательНаСервере("ОргКодСПОДУ",КодСПОДУ, Форма, "РазделI");
	ЗаполнитьПоказательНаСервере("ОргКодОПФГ",КодОПФГ, Форма, "РазделI");
	ЗаполнитьПоказательНаСервере("ОргКодКВЕД",КодКВЕД, Форма, "РазделI");
	ЗаполнитьПоказательНаСервере("ОргТерритория",Территория, Форма, "РазделI");
	ЗаполнитьПоказательНаСервере("ОргОрганГУ",ОрганГУ, Форма, "РазделI");
	ЗаполнитьПоказательНаСервере("ОргОПФГ",ОПФГ, Форма, "РазделI");
	ЗаполнитьПоказательНаСервере("ОргВЭД",ВЭД, Форма, "РазделI");
	
КонецПроцедуры


&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПоказательНаСервере(ИмяОбласти, Значение, Форма, ИмяРазделаПоказателя);

	ТекРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Если ТекРаздел = ИмяРазделаПоказателя Тогда
	
		Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение = Значение;
		
	Иначе	
		
		Форма["СтруктураДанных" + ИмяРазделаПоказателя].Вставить(ИмяОбласти, Значение);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПоказательНаСервере(ИмяОбласти, Форма, ИмяРазделаПоказателя)

	ТекРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Если ТекРаздел = ИмяРазделаПоказателя Тогда
		
		Возврат Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение;
		
	Иначе	
		
		Значение = Неопределено;
		Форма["СтруктураДанных" + ИмяРазделаПоказателя].Свойство(ИмяОбласти, Значение);
		
		Если Значение = Неопределено Тогда
			
			ДанныеПоказателя = Форма.мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента, КодПоказателяПоФорме", ИмяРазделаПоказателя, ИмяОбласти));
			Если ДанныеПоказателя.Количество() > 0
				И (    ДанныеПоказателя[0].ТипДанныхПоказателя = "Ч"
				   ИЛИ ДанныеПоказателя[0].ТипДанныхПоказателя = "Е") Тогда
				Значение = 0;	   
			Иначе
				Значение = "";	
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Значение;
		
	КонецЕсли;	

КонецФункции // ()

// СобратьДанныеТекущегоТаблПоляНаСервере()
//
&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции // СобратьДанныеТекущегоТаблПоляНаСервере()

// СобратьДанныеТекущегоТаблПоляНаКлиенте()
//
&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции // СобратьДанныеТекущегоТаблПоляНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере()
//
&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
		
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере()

// ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте()
//
&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	
	Перем ИмяГруппы;
	
	ИмяГруппы = Новый Массив;
	
	Если ИмяЛиста = Неопределено Тогда
        ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;


	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаСервере()

// ОбновитьСтруктуруМногострочногоРазделаНаКлиенте()
//
&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаКлиенте()

&НаСервере
Процедура ОбновитьПользовательскиеНастройки(СписокСохранения, ВыполнялосьОбновлениеДанных)
	
	Сообщить(НСтр("ru='Измененилась версия формы отчета."
	"Выполняется обновление пользовательских настроек.';uk='Змінилася версія форми звіту."
	"Виконується відновлення користувальницьких настройок.'"), СтатусСообщения.Информация);
	
	ВерсияФормы = СписокСохранения.ВерсияФормы;
	
	//Если ВерсияФормы = "01/07/2013" Тогда
	//	
	//     СписокСохранения.ВерсияФормы = "01/11/2020";
	//  ВыполнялосьОбновлениеДанных = Истина;
	//  
	//КонецЕсли;
	
	Если ВыполнялосьОбновлениеДанных = Истина Тогда
		

		Сообщить(НСтр("ru='Обновление пользовательских настроек успешно завершено!';uk='Оновлення користувальницьких настройок успішно завершене!'"));

	Иначе

		Сообщить(НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!';uk='Зміни в структурі користувальницьких настройок не виявлені!'"));

	КонецЕсли;
	
КонецПроцедуры

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
    Перем ЕстьДуплекс;
	Перем ВыполнялосьОбновлениеДанных;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация =	СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи			                              = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий					                      = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// восстанавливаем версию формы
	ВерсияФормы = Неопределено;
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки(СписокСохранения, ВыполнялосьОбновлениеДанных);
		КонецЕсли;
	КонецЕсли;
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
				
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
				
			КонецЕсли;
						
		КонецЦикла;
						
	КонецЕсли;
    	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
	КонецЕсли;
	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
					
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				                     				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
								
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								ИмяГруппыМассив =  ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ);
								
								ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ИмяГруппыМассив[0]].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
								
								НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
								
							КонецЦикла;
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							ИмяГруппыМассив =  ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ);
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ИмяГруппыМассив[0]].Добавить().Таблица;
														
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
								   				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;

	СписокСохранения.Свойство("ЕстьДуплекс", ЕстьДуплекс);
	Если ЕстьДуплекс = Неопределено Тогда
		ЕстьДуплекс = Ложь;
	КонецЕсли;
	СтруктураРеквизитовФормы.ЕстьДуплекс = ЕстьДуплекс;
	Элементы.ЕстьДуплекс.Пометка         = ЕстьДуплекс;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;
	ИмяТекРаздела = "РазделI";
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, 1);
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);

	Модифицированность   = Ложь;
	
КонецПроцедуры // ВосстановитьСохраненныеДанные()

// ВывестиРазделВТабличныйДокументНаКлиенте()
//
&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры // ВывестиРазделВТабличныйДокументНаКлиенте()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры // ВывестиРазделВТабличныйДокументНаСервере()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//  ПерерисоватьСтроки - Истина из процедуры удаления доп. строк, для перерисовки областей.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = Неопределено)
	Перем ИсходноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
		
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	ПерерисоватьСтроки = (НЕ ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы);
		
	Раздел = Форма[ТекТабличноеПолеИмя];
	
	КолонкиГруппы = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];		
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе");
		
		КолонкиМногострочныхРазделов = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов;
		ИмяОбластиПечати			 = "";
		
		ДанныеОПечатиОтчета = Форма.мДеревоСтраницОтчета.ПолучитьЭлементы();
		Для Сч = 1 По ДанныеОПечатиОтчета.Количество() Цикл
			ДанныеОПечатиСтраницы = ДанныеОПечатиОтчета[Сч - 1];	
			Если ДанныеОПечатиСтраницы.ИмяСтраницы = ТекущаяСтраница Тогда
				ИмяОбластиПечати = ДанныеОПечатиСтраницы.ИмяОбластиТабличногоПоля;	
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		
		РегламентированнаяОтчетностьВызовСервера.ВывестиРазделВТабличныйДокументНаСервере(НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, КолонкиМногострочныхРазделов, ИмяОбластиПечати);
		
		Форма[ТекТабличноеПолеИмя] = Раздел;
		ТекТабличноеПоле           = Форма[ТекТабличноеПолеИмя];
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
		
		Для Каждого КолонкаТаблицыИмя Из КолонкиГруппы Цикл
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;
				
				ОбластьЯчейкиТаблицы          = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
	
	СтрокВГруппе 		= СтруктураГруппы.Количество();
	СтрокВТабличномПоле = Форма.мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы];
	КоличествоСтрок = МАКС(СтрокВГруппе, СтрокВТабличномПоле);
	Если ИмяКолонкиНомера <> Неопределено Тогда
		
		Для НомерСтрокиВФормеТаблицы = 1 По КоличествоСтрок Цикл
			
			НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
			ИмяЯчейки                	= ИмяКолонкиНомера + "_" + НомерСтрокиВФормеТаблицыСтр;
			ОбластьЯчейкиТаблицы     	= ТекТабличноеПоле.Области[ИмяЯчейки];
	
			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				ОбластьЯчейкиТаблицы.Значение = НомерСтрокиВФормеТаблицы + НомерПервойСтроки - 1;
			Иначе
				ОбластьЯчейкиТаблицы.Текст = НомерСтрокиВФормеТаблицы + НомерПервойСтроки - 1;
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

&НаКлиенте
Процедура СохранитьОтчет(Команда)
		
	СохранитьНаКлиенте();
		
КонецПроцедуры

// СохранитьНаКлиенте()
//
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт

	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, Автосохранение) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(Автосохранение, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
				
КонецПроцедуры // СохранитьНаКлиенте()

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// ПередСохранением()
//
&НаСервере
Функция ПередСохранением(Автосохранение, НаимТекРаздела)
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Возврат Сохранить(Автосохранение, НаимТекРаздела);
		
КонецФункции // ПередСохранением()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
&НаСервере
Функция Сохранить(Автосохранение = Ложь, НаимТекРаздела) Экспорт	
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
			
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, Автосохранение, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета 			 = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета 		 = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;

	СохранитьДанныеРаздела(НаимТекРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
					   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
																			
						СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						
						Ном = Ном + 1;
						
						Продолжить;
							
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
														
						СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			
					Ном = Ном + 1;
								
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;
		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	// вставляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	СписокСохранения.Вставить("ЕстьДуплекс", СтруктураРеквизитовФормы.ЕстьДуплекс);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1';uk='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
			
	Модифицированность   = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Возврат Истина;

КонецФункции // Сохранить()

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоказателиОтчетаНаСервере()

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			ЗаполнитьПоказателиЗначениямиПоУмолчанию(Раздел.ИмяСтраницы);
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);	
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры // ЗаполнитьПустыеСтруктурыДанных()

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры // СохранитьДеревоНастройкиСтраниц()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы <> Неопределено Тогда 
		
		Если ЗавершениеРаботы И Модифицированность Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ЗавершениеРаботы <> Неопределено Тогда
		
		Если ЗавершениеРаботы Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
		
КонецПроцедуры // ПриЗакрытии()

// ПриЗакрытииНаСервере()
//
&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("РегламентированнаяОтчетность", "ЕстьДуплекс", СтруктураРеквизитовФормы.ЕстьДуплекс);
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытииНаСервере()

// ПоказатьСтраницуМногостраничногоРазделаНаКлиенте()
//
&НаКлиенте
Процедура ПоказатьСтраницуМногостраничногоРазделаНаКлиенте(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	
	ПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРазделаНаКлиенте()

// ПоказатьСтраницуМногостраничногоРазделаНаСервере()
//
&НаСервере
Процедура ПоказатьСтраницуМногостраничногоРазделаНаСервере(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	
	ПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
		
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРазделаНаСервере()

// ПоказатьСтраницуМногостраничногоРаздела()
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСтраницуМногостраничногоРаздела(Форма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьСтраницуМногостраничногоРаздела(Форма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	//Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
	//	#Если НаКлиенте Тогда
	//		Форма.ИзменитьЦветЯчеекНаКлиенте();
	//	#Иначе
	//		Форма.ИзменитьЦветЯчеекНаСервере();
	//	#КонецЕсли
	//КонецЕсли;
	
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

&НаКлиенте
Процедура ИзменитьЦветЯчеекНаКлиенте() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры // ИзменитьЦветЯчеекНаКлиенте()

&НаСервере
Процедура ИзменитьЦветЯчеекНаСервере() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры // ИзменитьЦветЯчеекНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьЦветЯчеек(Форма)

	//КодОперации = СокрЛП(Форма.ТабличныйДокумент.Области.П000200007003.Значение);
	//
	//Если КодОперации = "1011705" ИЛИ КодОперации = "1011707" Тогда
	//	
	//	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
	//		ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200006003");
	//	Иначе	
	//		ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000200006003");
	//	КонецЕсли;
	//
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200008003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200009003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200010003");
	//	
	//Иначе	
	//	
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200006003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200008003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200009003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200010003");
	//	
	//	Форма.ТабличныйДокумент.Области.П000200008003.Значение = "";
	//	Форма.ТабличныйДокумент.Области.П000200009003.Значение = "";
	//	Форма.ТабличныйДокумент.Области.П000200010003.Значение = "";
	//			
	//КонецЕсли;
		
КонецПроцедуры // ИзменитьЦветЯчеек()

// ОбновитьПеременныеМодуляНаСервере()
//
&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции // ОбновитьПеременныеМодуляНаСервере()

// ОбновитьПеременныеМодуляНаКлиенте()
//
&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции // ОбновитьПеременныеМодуляНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(Форма, ИмяПоказателя, ЗначениеПоказателя)
	
	ИзмененияПроизошли = Ложь;
	
	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;
	
	////Если (ИмяПоказателя = "Сумма30Раздел1")
	//// Или (ИмяПоказателя = "Сумма40Раздел1")
	//// Или (ИмяПоказателя = "Сумма50Раздел1")
	//// Или (ИмяПоказателя = "Сумма60Раздел1") Тогда
	////	Форма.мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	////	ИзмененияПроизошли = Истина;
	////ИначеЕсли ИмяПоказателя = "КБКРаздел1" Тогда
	////	Форма.мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	////	ИзмененияПроизошли = Истина;
	////ИначеЕсли ИмяПоказателя = "ОКАТОРаздел1" Тогда
	////	Форма.мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	////	ИзмененияПроизошли = Истина;
	////КонецЕсли;

	Возврат ИзмененияПроизошли;
	
КонецФункции // ОбновитьПеременныеМодуля()

// ОчиститьТабличноеПолеНаКлиенте()
//
&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры // ОчиститьТабличноеПолеНаКлиенте()

// ОчиститьТабличноеПолеНаСервере()
//
&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры // ОчиститьТабличноеПолеНаСервере()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	// Непосредственно очищаем ячейки табличного документа. РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле делает то же самое
	// Повторно, так как в результате расчета многостраничного многострочного блока заполняются итоговые ячейки, 
	// в арифметике которых есть показатели не из многострочного блока
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		Если Найти(Врег(ТекущаяОбласть.Имя), ВРег("Штампик")) > 0  Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;

	ЗаполнитьСведенияОбОрганизации(Форма);
	
КонецПроцедуры // ОчиститьТабличноеПоле()

// РасчетНаКлиенте()
//
&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры // РасчетНаКлиенте()

// РасчетНаСервере()
//
&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры // РасчетНаСервере()

// РАСЧЕТ()
// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет
// Параметры:
//  ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//
&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", ОбластьИмя = "")
	Перем ТаблицаБлока;
	
	Если (Форма.СтруктураРеквизитовФормы.мРежимПечати) Тогда
		Возврат; // служебный вызов в процессе печати
	КонецЕсли;
	
	Если (Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
		Возврат; // отключен режим авторасчета
	КонецЕсли;
	
	
	
		//	I. Нематеріальні активи
	    //Заполняем значения в скобках
	  //ЗаполнитьЗначенияВСкобках();
			
	//Залишок на початок року
	//Разом
	//первісна (переоцінена) вартість
	П080_3 = ПолучитьПоказательНаСервере("П010_3", Форма, "РазделI") 
	                                 + ПолучитьПоказательНаСервере("П020_3", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П030_3", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П040_3", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П050_3", Форма, "РазделI")
									 + ПолучитьПоказательНаСервере("П060_3", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П070_3", Форма, "РазделI");
	ЗаполнитьПоказательНаСервере("П080_3", П080_3, Форма, "РазделI");
	
	//знос
	П080_4 = ПолучитьПоказательНаСервере("П010_4", Форма, "РазделI") 
	                                 + ПолучитьПоказательНаСервере("П020_4", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П030_4", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П040_4", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П050_4", Форма, "РазделI")
									 + ПолучитьПоказательНаСервере("П060_4", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П070_4", Форма, "РазделI");
	ЗаполнитьПоказательНаСервере("П080_4", П080_4, Форма, "РазделI");
	
	//Надійшло за рік
	П080_5 = ПолучитьПоказательНаСервере("П010_5", Форма, "РазделI") 
	                                 + ПолучитьПоказательНаСервере("П020_5", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П030_5", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П040_5", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П050_5", Форма, "РазделI")
									 + ПолучитьПоказательНаСервере("П060_5", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П070_5", Форма, "РазделI");
	ЗаполнитьПоказательНаСервере("П080_5", П080_5, Форма, "РазделI");
	
	//Переоцінка (дооцінка +, уцінка -)
	//первісної (переоціненої) вартості 
	П080_6 = ПолучитьПоказательНаСервере("П010_6", Форма, "РазделI") 
	                                 + ПолучитьПоказательНаСервере("П020_6", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П030_6", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П040_6", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П050_6", Форма, "РазделI")
									 + ПолучитьПоказательНаСервере("П060_6", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П070_6", Форма, "РазделI");
	ЗаполнитьПоказательНаСервере("П080_6", П080_6, Форма, "РазделI");
	
	//зносу
	П080_7 = ПолучитьПоказательНаСервере("П010_7", Форма, "РазделI") 
	                                 + ПолучитьПоказательНаСервере("П020_7", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П030_7", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П040_7", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П050_7", Форма, "РазделI")
									 + ПолучитьПоказательНаСервере("П060_7", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П070_7", Форма, "РазделI");
	ЗаполнитьПоказательНаСервере("П080_7", П080_7, Форма, "РазделI");
	
	 //Вибуло за рік
	//первісна (переоцінена) вартість
	П080_8 = ПолучитьПоказательНаСервере("П010_8", Форма, "РазделI") 
	                                 + ПолучитьПоказательНаСервере("П020_8", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П030_8", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П040_8", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П050_8", Форма, "РазделI")
									 + ПолучитьПоказательНаСервере("П060_8", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П070_8", Форма, "РазделI");
	ЗаполнитьПоказательНаСервере("П080_8", П080_8, Форма, "РазделI");
	
	//знос
	П080_9 = ПолучитьПоказательНаСервере("П010_9", Форма, "РазделI") 
	                                 + ПолучитьПоказательНаСервере("П020_9", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П030_9", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П040_9", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П050_9", Форма, "РазделI")
									 + ПолучитьПоказательНаСервере("П060_9", Форма, "РазделI") 
									 + ПолучитьПоказательНаСервере("П070_9", Форма, "РазделI");
	ЗаполнитьПоказательНаСервере("П080_9", П080_9, Форма, "РазделI");
	
	//Нараховано амортизації за рік
	П080_10 = ПолучитьПоказательНаСервере("П010_10", Форма, "РазделI") 
	                                  + ПолучитьПоказательНаСервере("П020_10", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П030_10", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П040_10", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П050_10", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П060_10", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П070_10", Форма, "РазделI");
	ЗаполнитьПоказательНаСервере("П080_10", П080_10, Форма, "РазделI");
	
	//Втрати від зменшення корисності за рік
	П080_11 = ПолучитьПоказательНаСервере("П010_11", Форма, "РазделI") 
	                                  + ПолучитьПоказательНаСервере("П020_11", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П030_11", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П040_11", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П050_11", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П060_11", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П070_11", Форма, "РазделI");
	ЗаполнитьПоказательНаСервере("П080_11", П080_11, Форма, "РазделI");
		  
	//Інші зміни за рік                                                           
	//первісної (переоціне- ної) вартості
	П080_12 = ПолучитьПоказательНаСервере("П010_12", Форма, "РазделI") 
	                                  + ПолучитьПоказательНаСервере("П020_12", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П030_12", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П040_12", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П050_12", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П060_12", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П070_12", Форма, "РазделI");
	ЗаполнитьПоказательНаСервере("П080_12", П080_12, Форма, "РазделI");
	
	//зносу
	П080_13 = ПолучитьПоказательНаСервере("П010_13", Форма, "РазделI") 
	                                  + ПолучитьПоказательНаСервере("П020_13", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П030_13", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П040_13", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П050_13", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П060_13", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П070_13", Форма, "РазделI");
	ЗаполнитьПоказательНаСервере("П080_13", П080_13, Форма, "РазделI");
	
	//Залишок на кінець року
	//первісна (переоцінена) вартість
	П080_14 = ПолучитьПоказательНаСервере("П010_14", Форма, "РазделI") 
	                                  + ПолучитьПоказательНаСервере("П020_14", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П030_14", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П040_14", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П050_14", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П060_14", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П070_14", Форма, "РазделI");
	ЗаполнитьПоказательНаСервере("П080_14", П080_14, Форма, "РазделI");
	
	//знос
	П080_15 = ПолучитьПоказательНаСервере("П010_15", Форма, "РазделI") 
	                                  + ПолучитьПоказательНаСервере("П020_15", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П030_15", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П040_15", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П050_15", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П060_15", Форма, "РазделI") 
									  + ПолучитьПоказательНаСервере("П070_15", Форма, "РазделI");
	ЗаполнитьПоказательНаСервере("П080_15", П080_15, Форма, "РазделI");

	//	II. Основні засоби
	
	//Залишок на початок року
	//Разом
	//первісна (переоцінена) вартість
	П260_3 = ПолучитьПоказательНаСервере("П100_3", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П105_3", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П110_3", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П120_3", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П130_3", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П140_3", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П150_3", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П160_3", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П170_3", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П180_3", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П190_3", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П200_3", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П210_3", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П220_3", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П230_3", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П240_3", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П250_3", Форма, "РазделII");
	ЗаполнитьПоказательНаСервере("П260_3", П260_3, Форма, "РазделII");

	//знос
	П260_4 = ПолучитьПоказательНаСервере("П100_4", Форма, "РазделII") 
	                                 + ПолучитьПоказательНаСервере("П105_4", Форма, "РазделII") 
	                                 + ПолучитьПоказательНаСервере("П110_4", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П120_4", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П130_4", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П140_4", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П150_4", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П160_4", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П170_4", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П180_4", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П190_4", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П200_4", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П210_4", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П220_4", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П230_4", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П240_4", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П250_4", Форма, "РазделII");
	ЗаполнитьПоказательНаСервере("П260_4", П260_4, Форма, "РазделII");

	//Надійшло за рік
	П260_5 = ПолучитьПоказательНаСервере("П100_5", Форма, "РазделII") 
	                                 + ПолучитьПоказательНаСервере("П105_5", Форма, "РазделII") 
	                                 + ПолучитьПоказательНаСервере("П110_5", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П120_5", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П130_5", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П140_5", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П150_5", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П160_5", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П170_5", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П180_5", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П190_5", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П200_5", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П210_5", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П220_5", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П230_5", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П240_5", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П250_5", Форма, "РазделII");
	ЗаполнитьПоказательНаСервере("П260_5", П260_5, Форма, "РазделII");

			 
	//Переоцінка (дооцінка +, уцінка -)
	//первісної (переоціненої) вартості 
	П260_6 = ПолучитьПоказательНаСервере("П100_6", Форма, "РазделII") 
	                                 + ПолучитьПоказательНаСервере("П105_6", Форма, "РазделII") 
	                                 + ПолучитьПоказательНаСервере("П110_6", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П120_6", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П130_6", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П140_6", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П150_6", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П160_6", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П170_6", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П180_6", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П190_6", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П200_6", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П210_6", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П220_6", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П230_6", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П240_6", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П250_6", Форма, "РазделII");
	ЗаполнитьПоказательНаСервере("П260_6", П260_6, Форма, "РазделII");

	//зносу
	П260_7 = ПолучитьПоказательНаСервере("П100_7", Форма, "РазделII") 
	                                 + ПолучитьПоказательНаСервере("П105_7", Форма, "РазделII") 
	                                 + ПолучитьПоказательНаСервере("П110_7", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П120_7", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П130_7", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П140_7", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П150_7", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П160_7", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П170_7", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П180_7", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П190_7", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П200_7", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П210_7", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П220_7", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П230_7", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П240_7", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П250_7", Форма, "РазделII");
	ЗаполнитьПоказательНаСервере("П260_7", П260_7, Форма, "РазделII");

	//Вибуло за рік
	//первісна (переоцінена) вартість
	П260_8 = ПолучитьПоказательНаСервере("П100_8", Форма, "РазделII") 
	                                 + ПолучитьПоказательНаСервере("П105_8", Форма, "РазделII") 
	                                 + ПолучитьПоказательНаСервере("П110_8", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П120_8", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П130_8", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П140_8", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П150_8", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П160_8", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П170_8", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П180_8", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П190_8", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П200_8", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П210_8", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П220_8", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П230_8", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П240_8", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П250_8", Форма, "РазделII");
	ЗаполнитьПоказательНаСервере("П260_8", П260_8, Форма, "РазделII");

	//знос
	П260_9 = ПолучитьПоказательНаСервере("П100_9", Форма, "РазделII") 
	                                 + ПолучитьПоказательНаСервере("П105_9", Форма, "РазделII") 
	                                 + ПолучитьПоказательНаСервере("П110_9", Форма, "РазделII") 
									 + ПолучитьПоказательНаСервере("П120_9", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П130_9", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П140_9", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П150_9", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П160_9", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П170_9", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П180_9", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П190_9", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П200_9", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П210_9", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П220_9", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П230_9", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П240_9", Форма, "РазделII")
									 + ПолучитьПоказательНаСервере("П250_9", Форма, "РазделII");
	ЗаполнитьПоказательНаСервере("П260_9", П260_9, Форма, "РазделII");

			 
	//Нараховано амортизації за рік
	П260_10 = ПолучитьПоказательНаСервере("П100_10", Форма, "РазделII") 
	                                  + ПолучитьПоказательНаСервере("П105_10", Форма, "РазделII") 
	                                  + ПолучитьПоказательНаСервере("П110_10", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П120_10", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П130_10", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П140_10", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П150_10", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П160_10", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П170_10", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П180_10", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П190_10", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П200_10", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П210_10", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П220_10", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П230_10", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П240_10", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П250_10", Форма, "РазделII");
	ЗаполнитьПоказательНаСервере("П260_10", П260_10, Форма, "РазделII");

			 
	//Втрати від зменшення корисності за рік
	П260_11 = ПолучитьПоказательНаСервере("П100_11", Форма, "РазделII") 
	                                  + ПолучитьПоказательНаСервере("П105_11", Форма, "РазделII") 
	                                  + ПолучитьПоказательНаСервере("П110_11", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П120_11", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П130_11", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П140_11", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П150_11", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П160_11", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П170_11", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П180_11", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П190_11", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П200_11", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П210_11", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П220_11", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П230_11", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П240_11", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П250_11", Форма, "РазделII");
	ЗаполнитьПоказательНаСервере("П260_11", П260_11, Форма, "РазделII");

			  
    //Інші зміни за рік                                                           
	//первісної (переоціне- ної) вартості
	П260_12 = ПолучитьПоказательНаСервере("П100_12", Форма, "РазделII") 
	                                  + ПолучитьПоказательНаСервере("П105_12", Форма, "РазделII") 
	                                  + ПолучитьПоказательНаСервере("П110_12", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П120_12", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П130_12", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П140_12", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П150_12", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П160_12", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П170_12", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П180_12", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П190_12", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П200_12", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П210_12", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П220_12", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П230_12", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П240_12", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П250_12", Форма, "РазделII");
	ЗаполнитьПоказательНаСервере("П260_12", П260_12, Форма, "РазделII");

	//зносу
	П260_13 = ПолучитьПоказательНаСервере("П100_13", Форма, "РазделII") 
	                                  + ПолучитьПоказательНаСервере("П105_13", Форма, "РазделII") 
	                                  + ПолучитьПоказательНаСервере("П110_13", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П120_13", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П130_13", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П140_13", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П150_13", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П160_13", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П170_13", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П180_13", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П190_13", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П200_13", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П210_13", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П220_13", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П230_13", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П240_13", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П250_13", Форма, "РазделII");
	ЗаполнитьПоказательНаСервере("П260_13", П260_13, Форма, "РазделII");

	//Залишок на кінець року
	//первісна (переоцінена) вартість
	П260_14 = ПолучитьПоказательНаСервере("П100_14", Форма, "РазделII") 
	                                  + ПолучитьПоказательНаСервере("П105_14", Форма, "РазделII") 
	                                  + ПолучитьПоказательНаСервере("П110_14", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П120_14", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П130_14", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П140_14", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П150_14", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П160_14", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П170_14", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П180_14", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П190_14", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П200_14", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П210_14", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П220_14", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П230_14", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П240_14", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П250_14", Форма, "РазделII");
	ЗаполнитьПоказательНаСервере("П260_14", П260_14, Форма, "РазделII");

			  
	//знос
	П260_15 = ПолучитьПоказательНаСервере("П100_15", Форма, "РазделII") 
	                                  + ПолучитьПоказательНаСервере("П105_15", Форма, "РазделII") 
	                                  + ПолучитьПоказательНаСервере("П110_15", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П120_15", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П130_15", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П140_15", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П150_15", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П160_15", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П170_15", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П180_15", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П190_15", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П200_15", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П210_15", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П220_15", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П230_15", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П240_15", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П250_15", Форма, "РазделII");
	ЗаполнитьПоказательНаСервере("П260_15", П260_15, Форма, "РазделII");

	//у тому числі
	//одержані за фінансовою орендою
	//первісна (переоцінена) вартість
	П260_16 = ПолучитьПоказательНаСервере("П100_16", Форма, "РазделII") 
	                                  + ПолучитьПоказательНаСервере("П105_16", Форма, "РазделII") 
	                                  + ПолучитьПоказательНаСервере("П110_16", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П120_16", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П130_16", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П140_16", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П150_16", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П160_16", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П170_16", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П180_16", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П190_16", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П200_16", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П210_16", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П220_16", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П230_16", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П240_16", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П250_16", Форма, "РазделII");
	ЗаполнитьПоказательНаСервере("П260_16", П260_16, Форма, "РазделII");

	//знос
	П260_17 = ПолучитьПоказательНаСервере("П100_17", Форма, "РазделII") 
	                                  + ПолучитьПоказательНаСервере("П105_17", Форма, "РазделII") 
	                                  + ПолучитьПоказательНаСервере("П110_17", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П120_17", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П130_17", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П140_17", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П150_17", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П160_17", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П170_17", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П180_17", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П190_17", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П200_17", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П210_17", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П220_17", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П230_17", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П240_17", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П250_17", Форма, "РазделII");
	ЗаполнитьПоказательНаСервере("П260_17", П260_17, Форма, "РазделII");

	//передані в оперативну оренду
	//первісна (переоцінена) вартість
	П260_18 = ПолучитьПоказательНаСервере("П100_18", Форма, "РазделII") 
	                                  + ПолучитьПоказательНаСервере("П105_18", Форма, "РазделII") 
	                                  + ПолучитьПоказательНаСервере("П110_18", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П120_18", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П130_18", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П140_18", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П150_18", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П160_18", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П170_18", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П180_18", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П190_18", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П200_18", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П210_18", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П220_18", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П230_18", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П240_18", Форма, "РазделII")
									  + ПолучитьПоказательНаСервере("П250_18", Форма, "РазделII");
	ЗаполнитьПоказательНаСервере("П260_18", П260_18, Форма, "РазделII");

	//знос
	П260_19 = ПолучитьПоказательНаСервере("П100_19", Форма, "РазделII") 
	                                  + ПолучитьПоказательНаСервере("П105_19", Форма, "РазделII") 
	                                  + ПолучитьПоказательНаСервере("П110_19", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П120_19", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П130_19", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П140_19", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П150_19", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П160_19", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П170_19", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П180_19", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П190_19", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П200_19", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П210_19", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П220_19", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П230_19", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П240_19", Форма, "РазделII") 
									  + ПолучитьПоказательНаСервере("П250_19", Форма, "РазделII");
	ЗаполнитьПоказательНаСервере("П260_19", П260_19, Форма, "РазделII");

									  
	//III. Капітальні інвестиції
	//Разом 
	//За рік
	П340_3 =  ПолучитьПоказательНаСервере("П280_3", Форма, "РазделIII_IV") 
	                                 +  ПолучитьПоказательНаСервере("П290_3", Форма, "РазделIII_IV")
									 +  ПолучитьПоказательНаСервере("П300_3", Форма, "РазделIII_IV")
									 +  ПолучитьПоказательНаСервере("П310_3", Форма, "РазделIII_IV")
									 +  ПолучитьПоказательНаСервере("П320_3", Форма, "РазделIII_IV")
									 +  ПолучитьПоказательНаСервере("П330_3", Форма, "РазделIII_IV");
	ЗаполнитьПоказательНаСервере("П340_3", П340_3, Форма, "РазделIII_IV");

	//На кінець року
	П340_4 =  ПолучитьПоказательНаСервере("П280_4", Форма, "РазделIII_IV") 
	                                 +  ПолучитьПоказательНаСервере("П290_4", Форма, "РазделIII_IV") 
									 +  ПолучитьПоказательНаСервере("П300_4", Форма, "РазделIII_IV") 
									 +  ПолучитьПоказательНаСервере("П310_4", Форма, "РазделIII_IV") 
									 +  ПолучитьПоказательНаСервере("П320_4", Форма, "РазделIII_IV")
									 +  ПолучитьПоказательНаСервере("П330_4", Форма, "РазделIII_IV");
	ЗаполнитьПоказательНаСервере("П340_4", П340_4, Форма, "РазделIII_IV");

	//IV. Фінансові інвестиції 
	//За рік
	П420_3 =  ПолучитьПоказательНаСервере("П350_3", Форма, "РазделIII_IV") 
	                                 +  ПолучитьПоказательНаСервере("П360_3", Форма, "РазделIII_IV") 
									 +  ПолучитьПоказательНаСервере("П370_3", Форма, "РазделIII_IV") 
									 +  ПолучитьПоказательНаСервере("П380_3", Форма, "РазделIII_IV") 
									 +  ПолучитьПоказательНаСервере("П390_3", Форма, "РазделIII_IV")
									 +  ПолучитьПоказательНаСервере("П400_3", Форма, "РазделIII_IV") 
									 +  ПолучитьПоказательНаСервере("П410_3", Форма, "РазделIII_IV");
	ЗаполнитьПоказательНаСервере("П420_3", П420_3, Форма, "РазделIII_IV");

	//На кінець року
	//довгострокові
	П420_4 =  ПолучитьПоказательНаСервере("П350_4", Форма, "РазделIII_IV") 
	                                 +  ПолучитьПоказательНаСервере("П360_4", Форма, "РазделIII_IV")
									 +  ПолучитьПоказательНаСервере("П370_4", Форма, "РазделIII_IV")
									 +  ПолучитьПоказательНаСервере("П380_4", Форма, "РазделIII_IV")
									 +  ПолучитьПоказательНаСервере("П390_4", Форма, "РазделIII_IV")
									 +  ПолучитьПоказательНаСервере("П400_4", Форма, "РазделIII_IV") 
									 +  ПолучитьПоказательНаСервере("П410_4", Форма, "РазделIII_IV");
	ЗаполнитьПоказательНаСервере("П420_4", П420_4, Форма, "РазделIII_IV");

	//поточні
	П420_5 = ПолучитьПоказательНаСервере("П350_5", Форма, "РазделIII_IV") 
	                                 +  ПолучитьПоказательНаСервере("П360_5", Форма, "РазделIII_IV") 
									 +  ПолучитьПоказательНаСервере("П370_5", Форма, "РазделIII_IV") 
									 +  ПолучитьПоказательНаСервере("П380_5", Форма, "РазделIII_IV") 
									 +  ПолучитьПоказательНаСервере("П390_5", Форма, "РазделIII_IV")
									 +  ПолучитьПоказательНаСервере("П400_5", Форма, "РазделIII_IV") 
									 +  ПолучитьПоказательНаСервере("П410_5", Форма, "РазделIII_IV");
	ЗаполнитьПоказательНаСервере("П420_5", П420_5, Форма, "РазделIII_IV");

	//VI. Грошові кошти
	//Разом
	П690_3 = ПолучитьПоказательНаСервере("П640_3", Форма, "РазделV_VI") 
	                                 + ПолучитьПоказательНаСервере("П650_3", Форма, "РазделV_VI") 
									 + ПолучитьПоказательНаСервере("П660_3", Форма, "РазделV_VI") 
									 + ПолучитьПоказательНаСервере("П670_3", Форма, "РазделV_VI") 
									 + ПолучитьПоказательНаСервере("П680_3", Форма, "РазделV_VI");
	ЗаполнитьПоказательНаСервере("П690_3", П690_3, Форма, "РазделV_VI");

	//VII. Забезпечення
	//Залишок забезпечення на кінець року
	//Забезпечення на виплату відпусток працівникам
	П710_9 = ПолучитьПоказательНаСервере("П710_3", Форма, "РазделVII_VIII") 
	                                 + ПолучитьПоказательНаСервере("П710_4", Форма, "РазделVII_VIII") 
									 + ПолучитьПоказательНаСервере("П710_5", Форма, "РазделVII_VIII") 
									 - ПолучитьПоказательНаСервере("П710_6", Форма, "РазделVII_VIII")
									 - ПолучитьПоказательНаСервере("П710_7", Форма, "РазделVII_VIII");
	ЗаполнитьПоказательНаСервере("П710_9", П710_9, Форма, "РазделVII_VIII");

	//Забезпечення наступних витрат на додаткове пенсійне забезпечення
	П720_9 = ПолучитьПоказательНаСервере("П720_3", Форма, "РазделVII_VIII") 
	                                 + ПолучитьПоказательНаСервере("П720_4", Форма, "РазделVII_VIII") 
									 + ПолучитьПоказательНаСервере("П720_5", Форма, "РазделVII_VIII") 
									 - ПолучитьПоказательНаСервере("П720_6", Форма, "РазделVII_VIII")
									 - ПолучитьПоказательНаСервере("П720_7", Форма, "РазделVII_VIII");
	ЗаполнитьПоказательНаСервере("П720_9", П720_9, Форма, "РазделVII_VIII");

	//Забезпечення наступних витрат на виконання гарантійних зобов'язань
	П730_9 = ПолучитьПоказательНаСервере("П730_3", Форма, "РазделVII_VIII") 
	                                 + ПолучитьПоказательНаСервере("П730_4", Форма, "РазделVII_VIII") 
									 + ПолучитьПоказательНаСервере("П730_5", Форма, "РазделVII_VIII")
									 - ПолучитьПоказательНаСервере("П730_6", Форма, "РазделVII_VIII") 
									 - ПолучитьПоказательНаСервере("П730_7", Форма, "РазделVII_VIII");
	ЗаполнитьПоказательНаСервере("П730_9", П730_9, Форма, "РазделVII_VIII");

	//Забезпечення наступних витрат на реструктуризацію
	П740_9 = ПолучитьПоказательНаСервере("П740_3", Форма, "РазделVII_VIII") 
	                                 + ПолучитьПоказательНаСервере("П740_4", Форма, "РазделVII_VIII") 
									 + ПолучитьПоказательНаСервере("П740_5", Форма, "РазделVII_VIII")
									 - ПолучитьПоказательНаСервере("П740_6", Форма, "РазделVII_VIII")
									 - ПолучитьПоказательНаСервере("П740_7", Форма, "РазделVII_VIII");
	ЗаполнитьПоказательНаСервере("П740_9", П740_9, Форма, "РазделVII_VIII");

									 
	//Забезпечення наступних витрат на виконання зобов'язань щодо обтяжливих контрактів
	П750_9 = ПолучитьПоказательНаСервере("П750_3", Форма, "РазделVII_VIII")
	                                 + ПолучитьПоказательНаСервере("П750_4", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П750_5", Форма, "РазделVII_VIII")
									 - ПолучитьПоказательНаСервере("П750_6", Форма, "РазделVII_VIII")
									 - ПолучитьПоказательНаСервере("П750_7", Форма, "РазделVII_VIII");
	ЗаполнитьПоказательНаСервере("П750_9", П750_9, Форма, "РазделVII_VIII");

	//
	П760_9 = ПолучитьПоказательНаСервере("П760_3", Форма, "РазделVII_VIII")
	                                 + ПолучитьПоказательНаСервере("П760_4", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П760_5", Форма, "РазделVII_VIII")
									 - ПолучитьПоказательНаСервере("П760_6", Форма, "РазделVII_VIII")
									 - ПолучитьПоказательНаСервере("П760_7", Форма, "РазделVII_VIII");
	ЗаполнитьПоказательНаСервере("П760_9", П760_9, Форма, "РазделVII_VIII");

									 
	П770_9 = ПолучитьПоказательНаСервере("П770_3", Форма, "РазделVII_VIII")
	                                 + ПолучитьПоказательНаСервере("П770_4", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П770_5", Форма, "РазделVII_VIII")
									 - ПолучитьПоказательНаСервере("П770_6", Форма, "РазделVII_VIII")
									 - ПолучитьПоказательНаСервере("П770_7", Форма, "РазделVII_VIII");
	ЗаполнитьПоказательНаСервере("П770_9", П770_9, Форма, "РазделVII_VIII");
	
	П775_9 = ПолучитьПоказательНаСервере("П775_3", Форма, "РазделVII_VIII")
	                                 + ПолучитьПоказательНаСервере("П775_4", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П775_5", Форма, "РазделVII_VIII")
									 - ПолучитьПоказательНаСервере("П775_6", Форма, "РазделVII_VIII")
									 - ПолучитьПоказательНаСервере("П775_7", Форма, "РазделVII_VIII");
	ЗаполнитьПоказательНаСервере("П775_9", П775_9, Форма, "РазделVII_VIII");

	//Разом
	//Залишок забезпечення на початок року
	П780_3 = ПолучитьПоказательНаСервере("П710_3", Форма, "РазделVII_VIII")
	                                 + ПолучитьПоказательНаСервере("П720_3", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П730_3", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П740_3", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П750_3", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П760_3", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П770_3", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П775_3", Форма, "РазделVII_VIII");
	ЗаполнитьПоказательНаСервере("П780_3", П780_3, Форма, "РазделVII_VIII");

									 
	//Збільшення забезпечення протягом звітного періоду внаслідок
	//створення забезпечення
	П780_4 = ПолучитьПоказательНаСервере("П710_4", Форма, "РазделVII_VIII")
	                                 + ПолучитьПоказательНаСервере("П720_4", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П730_4", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П740_4", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П750_4", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П760_4", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П770_4", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П775_4", Форма, "РазделVII_VIII");
	ЗаполнитьПоказательНаСервере("П780_4", П780_4, Форма, "РазделVII_VIII");

	//додаткових відрахувань
	П780_5 = ПолучитьПоказательНаСервере("П710_5", Форма, "РазделVII_VIII")
	                                 + ПолучитьПоказательНаСервере("П720_5", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П730_5", Форма, "РазделVII_VIII") 
									 + ПолучитьПоказательНаСервере("П740_5", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П750_5", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П760_5", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П770_5", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П775_5", Форма, "РазделVII_VIII");
	ЗаполнитьПоказательНаСервере("П780_5", П780_5, Форма, "РазделVII_VIII");

									 
   //Сума забезпечення, що використана протягом року
	П780_6 = ПолучитьПоказательНаСервере("П710_6", Форма, "РазделVII_VIII") 
	                                 + ПолучитьПоказательНаСервере("П720_6", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П730_6", Форма, "РазделVII_VIII") 
									 + ПолучитьПоказательНаСервере("П740_6", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П750_6", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П760_6", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П770_6", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П775_6", Форма, "РазделVII_VIII");
	ЗаполнитьПоказательНаСервере("П780_6", П780_6, Форма, "РазделVII_VIII");

			 
	//Невикористана сума забезпечення, що сторнована у звітному періоді
	П780_7 = ПолучитьПоказательНаСервере("П710_7", Форма, "РазделVII_VIII") 
	                                 + ПолучитьПоказательНаСервере("П720_7", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П730_7", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П740_7", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П750_7", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П760_7", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П770_7", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П775_7", Форма, "РазделVII_VIII");
	ЗаполнитьПоказательНаСервере("П780_7", П780_7, Форма, "РазделVII_VIII");

			 
	//Сума очікуваного відшкодування витрат іншою стороною, що врахована при оцінці 
	//забезпечення
	П780_8 = ПолучитьПоказательНаСервере("П710_8", Форма, "РазделVII_VIII")
	                                 + ПолучитьПоказательНаСервере("П720_8", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П730_8", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П740_8", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П750_8", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П760_8", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П770_8", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П775_8", Форма, "РазделVII_VIII");
	ЗаполнитьПоказательНаСервере("П780_8", П780_8, Форма, "РазделVII_VIII");

			 
	//Залишок забезпечення на кінець року
	П780_9 = ПолучитьПоказательНаСервере("П710_9", Форма, "РазделVII_VIII") 
	                                 + ПолучитьПоказательНаСервере("П720_9", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П730_9", Форма, "РазделVII_VIII") 
									 + ПолучитьПоказательНаСервере("П740_9", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П750_9", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П760_9", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П770_9", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П775_9", Форма, "РазделVII_VIII");
	ЗаполнитьПоказательНаСервере("П780_9", П780_9, Форма, "РазделVII_VIII");

	
	//VIII. Запаси
	//Разом
	//Балансова вартість на кінець року
	П920_3 = ПолучитьПоказательНаСервере("П800_3", Форма, "РазделVII_VIII") 
	                                 + ПолучитьПоказательНаСервере("П810_3", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П820_3", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П830_3", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П840_3", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П850_3", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П860_3", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П870_3", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П880_3", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П890_3", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П900_3", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П910_3", Форма, "РазделVII_VIII");
	ЗаполнитьПоказательНаСервере("П920_3", П920_3, Форма, "РазделVII_VIII");

	//Переоцінка за рік
	//збільшення чистої вартості реалізації*
	П920_4 = ПолучитьПоказательНаСервере("П800_4", Форма, "РазделVII_VIII") 
	                                 + ПолучитьПоказательНаСервере("П810_4", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П820_4", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П830_4", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П840_4", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П850_4", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П860_4", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П870_4", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П880_4", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П890_4", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П900_4", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П910_4", Форма, "РазделVII_VIII");
	ЗаполнитьПоказательНаСервере("П920_4", П920_4, Форма, "РазделVII_VIII");

	//уцінка
	П920_5 = ПолучитьПоказательНаСервере("П800_5", Форма, "РазделVII_VIII") 
	                                 + ПолучитьПоказательНаСервере("П810_5", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П820_5", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П830_5", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П840_5", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П850_5", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П860_5", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П870_5", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П880_5", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П890_5", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П900_5", Форма, "РазделVII_VIII")
									 + ПолучитьПоказательНаСервере("П910_5", Форма, "РазделVII_VIII");   
	ЗаполнитьПоказательНаСервере("П920_5", П920_5, Форма, "РазделVII_VIII");

						 
 	//Відображено у складі власного капіталу - усього 
  	П1250_3 = ПолучитьПоказательНаСервере("П1251_3", Форма, "РазделIX_XII") 
                                    + ПолучитьПоказательНаСервере("П1252_3", Форма, "РазделIX_XII")
									+ ПолучитьПоказательНаСервере("П1253_3", Форма, "РазделIX_XII");
	ЗаполнитьПоказательНаСервере("П1250_3", П1250_3, Форма, "РазделIX_XII");
								 
  	//Використано за рік - усього
  	П1310_3 = ПолучитьПоказательНаСервере("П1311_3", Форма, "РазделXIII") 
                                    + ПолучитьПоказательНаСервере("П1312_3", Форма, "РазделXIII")
									+ ПолучитьПоказательНаСервере("П1313_3", Форма, "РазделXIII")
									+ ПолучитьПоказательНаСервере("П1314_3", Форма, "РазделXIII")
									+ ПолучитьПоказательНаСервере("П1315_3", Форма, "РазделXIII")
									+ ПолучитьПоказательНаСервере("П1316_3", Форма, "РазделXIII")
									+ ПолучитьПоказательНаСервере("П1317_3", Форма, "РазделXIII");	 
	ЗаполнитьПоказательНаСервере("П1310_3", П1310_3, Форма, "РазделXIII");
		
	
	//	XIV. Біологічні активи 
			
	//Довгострокові біологічні активи    - усього
	//Залишок на початок року
	//первісна вартість
	П1410_3 = ПолучитьПоказательНаСервере("П1411_3", Форма, "РазделXIV") 
	                                  + ПолучитьПоказательНаСервере("П1412_3", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1413_3", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1414_3", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1415_3", Форма, "РазделXIV");
	ЗаполнитьПоказательНаСервере("П1410_3", П1410_3, Форма, "РазделXIV");
	
	//накопичена амортизація
	П1410_4 = ПолучитьПоказательНаСервере("П1411_4", Форма, "РазделXIV") 
	                                  + ПолучитьПоказательНаСервере("П1412_4", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1413_4", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1414_4", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1415_4", Форма, "РазделXIV");
	ЗаполнитьПоказательНаСервере("П1410_4", П1410_4, Форма, "РазделXIV");
	
	//Надійшло за рік
	П1410_5 = ПолучитьПоказательНаСервере("П1411_5", Форма, "РазделXIV") 
	                                  + ПолучитьПоказательНаСервере("П1412_5", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1413_5", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1414_5", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1415_5", Форма, "РазделXIV");
	ЗаполнитьПоказательНаСервере("П1410_5", П1410_5, Форма, "РазделXIV");
	
									 
	//вибуло за рік 
	//первісна вартість 
	П1410_6 = ПолучитьПоказательНаСервере("П1411_6", Форма, "РазделXIV") 
	                                  + ПолучитьПоказательНаСервере("П1412_6", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1413_6", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1414_6", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1415_6", Форма, "РазделXIV");
	ЗаполнитьПоказательНаСервере("П1410_6", П1410_6, Форма, "РазделXIV");
	
	//накопичена амортизація
	П1410_7 = ПолучитьПоказательНаСервере("П1411_7", Форма, "РазделXIV") 
	                                  + ПолучитьПоказательНаСервере("П1412_7", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1413_7", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1414_7", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1415_7", Форма, "РазделXIV");
	ЗаполнитьПоказательНаСервере("П1410_7", П1410_7, Форма, "РазделXIV");
	
			 
	//нараховано амортизації за рік
	П1410_8 = ПолучитьПоказательНаСервере("П1411_8", Форма, "РазделXIV") 
	                                  + ПолучитьПоказательНаСервере("П1412_8", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1413_8", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1414_8", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1415_8", Форма, "РазделXIV");
	ЗаполнитьПоказательНаСервере("П1410_8", П1410_8, Форма, "РазделXIV");
	
	//втрати від зменшення корисності
	П1410_9 = ПолучитьПоказательНаСервере("П1411_9", Форма, "РазделXIV") 
	                                  + ПолучитьПоказательНаСервере("П1412_9", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1413_9", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1414_9", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1415_9", Форма, "РазделXIV");
	ЗаполнитьПоказательНаСервере("П1410_9", П1410_9, Форма, "РазделXIV");
	
									  
	//вигоди від відновлення корисності 
	П1410_10 = ПолучитьПоказательНаСервере("П1411_10", Форма, "РазделXIV") 
	                                   + ПолучитьПоказательНаСервере("П1412_10", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1413_10", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1414_10", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1415_10", Форма, "РазделXIV");
	ЗаполнитьПоказательНаСервере("П1410_10", П1410_10, Форма, "РазделXIV");
	
			  
	//залишок на кінець року 
	//первісна вартість 
	П1410_11 = ПолучитьПоказательНаСервере("П1411_11", Форма, "РазделXIV") 
	                                   + ПолучитьПоказательНаСервере("П1412_11", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1413_11", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1414_11", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1415_11", Форма, "РазделXIV");
	ЗаполнитьПоказательНаСервере("П1410_11", П1410_11, Форма, "РазделXIV");
								   
	//накопичена амортизація
	П1410_12 = ПолучитьПоказательНаСервере("П1411_12", Форма, "РазделXIV") 
	                                   + ПолучитьПоказательНаСервере("П1412_12", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1413_12", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1414_12", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1415_12", Форма, "РазделXIV");
	ЗаполнитьПоказательНаСервере("П1410_12", П1410_12, Форма, "РазделXIV");
									   
	//Обліковуються за справедливою вартістю 
 	//залишок на початок року 
	П1410_13 = ПолучитьПоказательНаСервере("П1411_13", Форма, "РазделXIV") 
	                                   + ПолучитьПоказательНаСервере("П1412_13", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1413_13", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1414_13", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1415_13", Форма, "РазделXIV");
  	ЗаполнитьПоказательНаСервере("П1410_13", П1410_13, Форма, "РазделXIV");
									   
	//надійшло за рік  
	П1410_14 = ПолучитьПоказательНаСервере("П1411_14", Форма, "РазделXIV") 
	                                   + ПолучитьПоказательНаСервере("П1412_14", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1413_14", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1414_14", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1415_14", Форма, "РазделXIV");
  	ЗаполнитьПоказательНаСервере("П1410_14", П1410_14, Форма, "РазделXIV");
									   
	//зміни вартості за рік 
	П1410_15 = ПолучитьПоказательНаСервере("П1411_15", Форма, "РазделXIV") 
	                                   + ПолучитьПоказательНаСервере("П1412_15", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1413_15", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1414_15", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1415_15", Форма, "РазделXIV");
    ЗаполнитьПоказательНаСервере("П1410_15", П1410_15, Форма, "РазделXIV");
									   
	//вибуло за рік 
	П1410_16 = ПолучитьПоказательНаСервере("П1411_16", Форма, "РазделXIV") 
	                                   + ПолучитьПоказательНаСервере("П1412_16", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1413_16", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1414_16", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1415_16", Форма, "РазделXIV");
    ЗаполнитьПоказательНаСервере("П1410_16", П1410_16, Форма, "РазделXIV");
									   
	//залишок на кінець року 
	П1410_17 = ПолучитьПоказательНаСервере("П1411_17", Форма, "РазделXIV") 
	                                   + ПолучитьПоказательНаСервере("П1412_17", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1413_17", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1414_17", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1415_17", Форма, "РазделXIV");
 	ЗаполнитьПоказательНаСервере("П1410_17", П1410_17, Форма, "РазделXIV");
									   
	//Поточні біологічні активи - усього
	//Залишок на початок року
	//первісна вартість
	П1420_3 = ПолучитьПоказательНаСервере("П1421_3", Форма, "РазделXIV") 
	                                  + ПолучитьПоказательНаСервере("П1422_3", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1423_3", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1424_3", Форма, "РазделXIV"); 
	ЗаполнитьПоказательНаСервере("П1420_3", П1420_3, Форма, "РазделXIV");
									   
	//Надійшло за рік
	П1420_5 = ПолучитьПоказательНаСервере("П1421_5", Форма, "РазделXIV") 
	                                  + ПолучитьПоказательНаСервере("П1422_5", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1423_5", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1424_5", Форма, "РазделXIV"); 
	ЗаполнитьПоказательНаСервере("П1420_5", П1420_5, Форма, "РазделXIV");
									   
									 
	//вибуло за рік 
	//первісна вартість 
	П1420_6 = ПолучитьПоказательНаСервере("П1421_6", Форма, "РазделXIV") 
	                                  + ПолучитьПоказательНаСервере("П1422_6", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1423_6", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1424_6", Форма, "РазделXIV"); 
	ЗаполнитьПоказательНаСервере("П1420_6", П1420_6, Форма, "РазделXIV");
									  
	//втрати від зменшення корисності
	П1420_9 = ПолучитьПоказательНаСервере("П1421_9", Форма, "РазделXIV") 
	                                  + ПолучитьПоказательНаСервере("П1422_9", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1423_9", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1424_9", Форма, "РазделXIV"); 
	ЗаполнитьПоказательНаСервере("П1420_9", П1420_9, Форма, "РазделXIV");
									  
	//вигоди від відновлення корисності 
	П1420_10 = ПолучитьПоказательНаСервере("П1421_10", Форма, "РазделXIV") 
	                                   + ПолучитьПоказательНаСервере("П1422_10", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1423_10", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1424_10", Форма, "РазделXIV"); 
	ЗаполнитьПоказательНаСервере("П1420_10", П1420_10, Форма, "РазделXIV");
									  
			  
	//залишок на кінець року 
	//первісна вартість 
	П1420_11 = ПолучитьПоказательНаСервере("П1421_11", Форма, "РазделXIV") 
	                                   + ПолучитьПоказательНаСервере("П1422_11", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1423_11", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1424_11", Форма, "РазделXIV"); 
	ЗаполнитьПоказательНаСервере("П1420_11", П1420_11, Форма, "РазделXIV");
									   
	//Обліковуються за справедливою вартістю 
 	//залишок на початок року 
	П1420_13 = ПолучитьПоказательНаСервере("П1421_13", Форма, "РазделXIV") 
	                                   + ПолучитьПоказательНаСервере("П1422_13", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1423_13", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1424_13", Форма, "РазделXIV"); 
  	ЗаполнитьПоказательНаСервере("П1420_13", П1420_13, Форма, "РазделXIV");
									   
	//надійшло за рік  
	П1420_14 = ПолучитьПоказательНаСервере("П1421_14", Форма, "РазделXIV") 
	                                   + ПолучитьПоказательНаСервере("П1422_14", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1423_14", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1424_14", Форма, "РазделXIV"); 
  	ЗаполнитьПоказательНаСервере("П1420_14", П1420_14, Форма, "РазделXIV");
									   
	//зміни вартості за рік 
	П1420_15 = ПолучитьПоказательНаСервере("П1421_15", Форма, "РазделXIV") 
	                                   + ПолучитьПоказательНаСервере("П1422_15", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1423_15", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1424_15", Форма, "РазделXIV"); 
    ЗаполнитьПоказательНаСервере("П1420_15", П1420_15, Форма, "РазделXIV");
									   
	//вибуло за рік 
	П1420_16 = ПолучитьПоказательНаСервере("П1421_16", Форма, "РазделXIV") 
	                                   + ПолучитьПоказательНаСервере("П1422_16", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1423_16", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1424_16", Форма, "РазделXIV"); 
    ЗаполнитьПоказательНаСервере("П1420_16", П1420_16, Форма, "РазделXIV");
									   
	//залишок на кінець року 
	П1420_17 = ПолучитьПоказательНаСервере("П1421_17", Форма, "РазделXIV") 
	                                   + ПолучитьПоказательНаСервере("П1422_17", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1423_17", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1424_17", Форма, "РазделXIV"); 
	ЗаполнитьПоказательНаСервере("П1420_17", П1420_17, Форма, "РазделXIV");
									   
	
  	//Разом
	//Залишок на початок року
	//первісна вартість
	П1430_3 = ПолучитьПоказательНаСервере("П1410_3", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1420_3", Форма, "РазделXIV"); 
	ЗаполнитьПоказательНаСервере("П1430_3", П1430_3, Форма, "РазделXIV");
									  
	//накопичена амортизація
	П1430_4 = ПолучитьПоказательНаСервере("П1410_4", Форма, "РазделXIV"); 
	ЗаполнитьПоказательНаСервере("П1430_4", П1430_4, Форма, "РазделXIV");
	
	//Надійшло за рік
	П1430_5 = ПолучитьПоказательНаСервере("П1410_5", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1420_5", Форма, "РазделXIV"); 
	ЗаполнитьПоказательНаСервере("П1430_5", П1430_5, Форма, "РазделXIV");
									 
	//вибуло за рік 
	//первісна вартість 
	П1430_6 = ПолучитьПоказательНаСервере("П1410_6", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1420_6", Форма, "РазделXIV"); 
	ЗаполнитьПоказательНаСервере("П1430_6", П1430_6, Форма, "РазделXIV");
	
	//накопичена амортизація
	П1430_7 = ПолучитьПоказательНаСервере("П1410_7", Форма, "РазделXIV"); 
	ЗаполнитьПоказательНаСервере("П1430_7", П1430_7, Форма, "РазделXIV");
		 
	//нараховано амортизації за рік
	П1430_8 = ПолучитьПоказательНаСервере("П1410_8", Форма, "РазделXIV"); 
	ЗаполнитьПоказательНаСервере("П1430_8", П1430_8, Форма, "РазделXIV");
		 
	//втрати від зменшення корисності
	П1430_9 = ПолучитьПоказательНаСервере("П1410_9", Форма, "РазделXIV") 
									  + ПолучитьПоказательНаСервере("П1420_9", Форма, "РазделXIV"); 
	ЗаполнитьПоказательНаСервере("П1430_9", П1430_9, Форма, "РазделXIV");
									  
	//вигоди від відновлення корисності 
	П1430_10 = ПолучитьПоказательНаСервере("П1410_10", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1420_10", Форма, "РазделXIV"); 
	ЗаполнитьПоказательНаСервере("П1430_10", П1430_10, Форма, "РазделXIV");
			  
	//залишок на кінець року 
	//первісна вартість 
	П1430_11 = ПолучитьПоказательНаСервере("П1410_11", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1420_11", Форма, "РазделXIV"); 
	ЗаполнитьПоказательНаСервере("П1430_11", П1430_11, Форма, "РазделXIV");
									   
	//накопичена амортизація
	П1430_12 = ПолучитьПоказательНаСервере("П1410_12", Форма, "РазделXIV"); 
	ЗаполнитьПоказательНаСервере("П1430_12", П1430_12, Форма, "РазделXIV");
									   
	//Обліковуються за справедливою вартістю 
 	//залишок на початок року 
	П1430_13 = ПолучитьПоказательНаСервере("П1410_13", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1420_13", Форма, "РазделXIV"); 
  	ЗаполнитьПоказательНаСервере("П1430_13", П1430_13, Форма, "РазделXIV");
									   
	//надійшло за рік  
	П1430_14 = ПолучитьПоказательНаСервере("П1410_14", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1420_14", Форма, "РазделXIV"); 
  	ЗаполнитьПоказательНаСервере("П1430_14", П1430_14, Форма, "РазделXIV");
									   
	//зміни вартості за рік 
	П1430_15 = ПолучитьПоказательНаСервере("П1410_15", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1420_15", Форма, "РазделXIV"); 
    ЗаполнитьПоказательНаСервере("П1430_15", П1430_15, Форма, "РазделXIV");
									   
	//вибуло за рік 
	П1430_16 = ПолучитьПоказательНаСервере("П1410_16", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1420_16", Форма, "РазделXIV"); 
    ЗаполнитьПоказательНаСервере("П1430_16", П1430_16, Форма, "РазделXIV");
									   
	//залишок на кінець року 
	П1430_17 = ПолучитьПоказательНаСервере("П1410_17", Форма, "РазделXIV") 
									   + ПолучитьПоказательНаСервере("П1420_17", Форма, "РазделXIV"); 
	ЗаполнитьПоказательНаСервере("П1430_17", П1430_17, Форма, "РазделXIV");
									   
									   
	//XV. Фінансові результати від первісного визнання та реалізації сільськогосподарської продукції 
	//Продукція та додаткові біологічні активи рослинництва - усього 
	//Вартість первісного визнання 
	П1500_3 = ПолучитьПоказательНаСервере("П1510_3", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1513_3", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1514_3", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1515_3", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1516_3", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1517_3", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1518_3", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1519_3", Форма, "РазделXV");
 	ЗаполнитьПоказательНаСервере("П1500_3", П1500_3, Форма, "РазделXV");
									   
	//Витрати, пов'язані з біологічними перетвореннями
	П1500_4 = ПолучитьПоказательНаСервере("П1510_4", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1513_4", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1514_4", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1515_4", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1516_4", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1517_4", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1518_4", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1519_4", Форма, "РазделXV");
	ЗаполнитьПоказательНаСервере("П1500_4", П1500_4, Форма, "РазделXV");
									   
	
	//Результат від первісного визнання (доход) 
	П1500_5 = ПолучитьПоказательНаСервере("П1510_5", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1513_5", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1514_5", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1515_5", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1516_5", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1517_5", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1518_5", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1519_5", Форма, "РазделXV");
	ЗаполнитьПоказательНаСервере("П1500_5", П1500_5, Форма, "РазделXV");
									  
	//Результат від первісного визнання (витрати) 
	П1500_6 = ПолучитьПоказательНаСервере("П1510_6", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1513_6", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1514_6", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1515_6", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1516_6", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1517_6", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1518_6", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1519_6", Форма, "РазделXV");
	ЗаполнитьПоказательНаСервере("П1500_6", П1500_6, Форма, "РазделXV");
	
	//Уцінка 
	П1500_7 = ПолучитьПоказательНаСервере("П1510_7", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1513_7", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1514_7", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1515_7", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1516_7", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1517_7", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1518_7", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1519_7", Форма, "РазделXV");
	ЗаполнитьПоказательНаСервере("П1500_7", П1500_7, Форма, "РазделXV");
	
	
	//Виручка від реалізації
	П1500_8 = ПолучитьПоказательНаСервере("П1510_8", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1513_8", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1514_8", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1515_8", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1516_8", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1517_8", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1518_8", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1519_8", Форма, "РазделXV");
	ЗаполнитьПоказательНаСервере("П1500_8", П1500_8, Форма, "РазделXV");

	//Собівартість реалізації 
	П1500_9 = ПолучитьПоказательНаСервере("П1510_9", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1513_9", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1514_9", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1515_9", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1516_9", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1517_9", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1518_9", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1519_9", Форма, "РазделXV");
	ЗаполнитьПоказательНаСервере("П1500_9", П1500_9, Форма, "РазделXV");

	//Фінансовий результат (прибуток +, збиток -) від 
    //Реализации
	П1500_10 = ПолучитьПоказательНаСервере("П1510_10", Форма, "РазделXV") 
	                                   + ПолучитьПоказательНаСервере("П1513_10", Форма, "РазделXV") 
	                                   + ПолучитьПоказательНаСервере("П1514_10", Форма, "РазделXV") 
									   + ПолучитьПоказательНаСервере("П1515_10", Форма, "РазделXV")
									   + ПолучитьПоказательНаСервере("П1516_10", Форма, "РазделXV") 
									   + ПолучитьПоказательНаСервере("П1517_10", Форма, "РазделXV")
									   + ПолучитьПоказательНаСервере("П1518_10", Форма, "РазделXV")
									   + ПолучитьПоказательНаСервере("П1519_10", Форма, "РазделXV");
	ЗаполнитьПоказательНаСервере("П1500_10", П1500_10, Форма, "РазделXV");

	//первісного визнання та реалізаці 
	П1500_11 = ПолучитьПоказательНаСервере("П1510_11", Форма, "РазделXV") 
	                                   + ПолучитьПоказательНаСервере("П1513_11", Форма, "РазделXV") 
	                                   + ПолучитьПоказательНаСервере("П1514_11", Форма, "РазделXV") 
									   + ПолучитьПоказательНаСервере("П1515_11", Форма, "РазделXV")
									   + ПолучитьПоказательНаСервере("П1516_11", Форма, "РазделXV") 
									   + ПолучитьПоказательНаСервере("П1517_11", Форма, "РазделXV")
									   + ПолучитьПоказательНаСервере("П1518_11", Форма, "РазделXV")
									   + ПолучитьПоказательНаСервере("П1519_11", Форма, "РазделXV");
	ЗаполнитьПоказательНаСервере("П1500_11", П1500_11, Форма, "РазделXV");
								   
	//Продукція та додаткові біологічні активи тваринництва - усього 
	//Вартість первісного визнання 
	П1520_3 = ПолучитьПоказательНаСервере("П1530_3", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1533_3", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1534_3", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1535_3", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1536_3", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1537_3", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1538_3", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1539_3", Форма, "РазделXV");
 	ЗаполнитьПоказательНаСервере("П1520_3", П1520_3, Форма, "РазделXV");
								   
								   
	//Витрати, пов'язані з біологічними перетвореннями
	П1520_4 = ПолучитьПоказательНаСервере("П1530_4", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1533_4", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1534_4", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1535_4", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1536_4", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1537_4", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1538_4", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1539_4", Форма, "РазделXV");
	ЗаполнитьПоказательНаСервере("П1520_4", П1520_4, Форма, "РазделXV");
								   
	
	//Результат від первісного визнання (доход) 
	П1520_5 = ПолучитьПоказательНаСервере("П1530_5", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1533_5", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1534_5", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1535_5", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1536_5", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1537_5", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1538_5", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1539_5", Форма, "РазделXV");
	ЗаполнитьПоказательНаСервере("П1520_5", П1520_5, Форма, "РазделXV");
									  
	//Результат від первісного визнання (витрати) 
	П1520_6 = ПолучитьПоказательНаСервере("П1530_6", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1533_6", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1534_6", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1535_6", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1536_6", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1537_6", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1538_6", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1539_6", Форма, "РазделXV");
	ЗаполнитьПоказательНаСервере("П1520_6", П1520_5, Форма, "РазделXV");
	
	//Уцінка 
	П1520_7 = ПолучитьПоказательНаСервере("П1530_7", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1533_7", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1534_7", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1535_7", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1536_7", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1537_7", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1538_7", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1539_7", Форма, "РазделXV");
	ЗаполнитьПоказательНаСервере("П1520_7", П1520_7, Форма, "РазделXV");
	
	//Виручка від реалізації
	П1520_8 = ПолучитьПоказательНаСервере("П1530_8", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1533_8", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1534_8", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1535_8", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1536_8", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1537_8", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1538_8", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1539_8", Форма, "РазделXV");
	ЗаполнитьПоказательНаСервере("П1520_8", П1520_8, Форма, "РазделXV");

	//Собівартість реалізації 
	П1520_9 = ПолучитьПоказательНаСервере("П1530_9", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1533_9", Форма, "РазделXV") 
	                                  + ПолучитьПоказательНаСервере("П1534_9", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1535_9", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1536_9", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1537_9", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1538_9", Форма, "РазделXV")
									  + ПолучитьПоказательНаСервере("П1539_9", Форма, "РазделXV");
	ЗаполнитьПоказательНаСервере("П1520_9", П1520_9, Форма, "РазделXV");

	//Фінансовий результат (прибуток +, збиток -) від 
    //Реализации
	П1520_10 = ПолучитьПоказательНаСервере("П1530_10", Форма, "РазделXV") 
	                                   + ПолучитьПоказательНаСервере("П1533_10", Форма, "РазделXV") 
	                                   + ПолучитьПоказательНаСервере("П1534_10", Форма, "РазделXV") 
									   + ПолучитьПоказательНаСервере("П1535_10", Форма, "РазделXV")
									   + ПолучитьПоказательНаСервере("П1536_10", Форма, "РазделXV") 
									   + ПолучитьПоказательНаСервере("П1537_10", Форма, "РазделXV")
									   + ПолучитьПоказательНаСервере("П1538_10", Форма, "РазделXV")
									   + ПолучитьПоказательНаСервере("П1539_10", Форма, "РазделXV");
	ЗаполнитьПоказательНаСервере("П1520_10", П1520_10, Форма, "РазделXV");

	//первісного визнання та реалізаці 
	П1520_11 = ПолучитьПоказательНаСервере("П1530_11", Форма, "РазделXV") 
	                                   + ПолучитьПоказательНаСервере("П1533_11", Форма, "РазделXV") 
	                                   + ПолучитьПоказательНаСервере("П1534_11", Форма, "РазделXV") 
									   + ПолучитьПоказательНаСервере("П1535_11", Форма, "РазделXV")
									   + ПолучитьПоказательНаСервере("П1536_11", Форма, "РазделXV") 
									   + ПолучитьПоказательНаСервере("П1537_11", Форма, "РазделXV")
									   + ПолучитьПоказательНаСервере("П1538_11", Форма, "РазделXV")
									   + ПолучитьПоказательНаСервере("П1539_11", Форма, "РазделXV");
	ЗаполнитьПоказательНаСервере("П1520_11", П1520_11, Форма, "РазделXV");

 	//Сільськогосподарська продукція та додаткові біологічні активи - разом 
	//Вартість первісного визнання 
	П1540_3 = ПолучитьПоказательНаСервере("П1500_3", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1520_3", Форма, "РазделXV");
 	ЗаполнитьПоказательНаСервере("П1540_3", П1540_3, Форма, "РазделXV");

 	//Витрати, пов'язані з біологічними перетвореннями
	П1540_4 = ПолучитьПоказательНаСервере("П1500_4", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1520_4", Форма, "РазделXV");
	ЗаполнитьПоказательНаСервере("П1540_4", П1540_4, Форма, "РазделXV");

	//Результат від первісного визнання (доход) 
	П1540_5 = ПолучитьПоказательНаСервере("П1500_5", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1520_5", Форма, "РазделXV");
	ЗаполнитьПоказательНаСервере("П1540_5", П1540_5, Форма, "РазделXV");
								  
	//Результат від первісного визнання (витрати) 
	П1540_6 = ПолучитьПоказательНаСервере("П1500_6", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1520_6", Форма, "РазделXV");
	ЗаполнитьПоказательНаСервере("П1540_6", П1540_6, Форма, "РазделXV");
	
	//Уцінка 
	П1540_7 = ПолучитьПоказательНаСервере("П1500_7", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1520_7", Форма, "РазделXV");
	ЗаполнитьПоказательНаСервере("П1540_7", П1540_7, Форма, "РазделXV");

	//Виручка від реалізації
	П1540_8 = ПолучитьПоказательНаСервере("П1500_8", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1520_8", Форма, "РазделXV");
	ЗаполнитьПоказательНаСервере("П1540_8", П1540_8, Форма, "РазделXV");

	//Собівартість реалізації 
	П1540_9 = ПолучитьПоказательНаСервере("П1500_9", Форма, "РазделXV") 
									  + ПолучитьПоказательНаСервере("П1520_9", Форма, "РазделXV");
	ЗаполнитьПоказательНаСервере("П1540_9", П1540_9, Форма, "РазделXV");

	//Фінансовий результат (прибуток +, збиток -) від 
    //Реализации
	П1540_10 = ПолучитьПоказательНаСервере("П1500_10", Форма, "РазделXV") 
									   + ПолучитьПоказательНаСервере("П1520_10", Форма, "РазделXV");
	ЗаполнитьПоказательНаСервере("П1540_10", П1540_10, Форма, "РазделXV");

	//первісного визнання та реалізаці 
	П1540_11 = ПолучитьПоказательНаСервере("П1500_11", Форма, "РазделXV") 
									   + ПолучитьПоказательНаСервере("П1520_11", Форма, "РазделXV");
	ЗаполнитьПоказательНаСервере("П1540_11", П1540_11, Форма, "РазделXV");
								   
									   
	// налоговые разницы							   
	П4803 = ПолучитьПоказательНаСервере("П4003", Форма, "НалоговыеРазницы")
	                               + ПолучитьПоказательНаСервере("П4103", Форма, "НалоговыеРазницы")
	                               + ПолучитьПоказательНаСервере("П4203", Форма, "НалоговыеРазницы");
	ЗаполнитьПоказательНаСервере("П4803", П4803, Форма, "НалоговыеРазницы");
								   
	П4804 = ПолучитьПоказательНаСервере("П4304", Форма, "НалоговыеРазницы")
	                               + ПолучитьПоказательНаСервере("П4404", Форма, "НалоговыеРазницы")
	                               + ПолучитьПоказательНаСервере("П4504", Форма, "НалоговыеРазницы");
	ЗаполнитьПоказательНаСервере("П4804", П4804, Форма, "НалоговыеРазницы");
								   
	П4805 = ПолучитьПоказательНаСервере("П4005", Форма, "НалоговыеРазницы")
	                               + ПолучитьПоказательНаСервере("П4105", Форма, "НалоговыеРазницы")
	                               + ПолучитьПоказательНаСервере("П4205", Форма, "НалоговыеРазницы");
	ЗаполнитьПоказательНаСервере("П4805", П4805, Форма, "НалоговыеРазницы");
								   
	П4806 = ПолучитьПоказательНаСервере("П4306", Форма, "НалоговыеРазницы")
	                               + ПолучитьПоказательНаСервере("П4406", Форма, "НалоговыеРазницы")
	                               + ПолучитьПоказательНаСервере("П4506", Форма, "НалоговыеРазницы");
	ЗаполнитьПоказательНаСервере("П4806", П4806, Форма, "НалоговыеРазницы");
								   
	// согласнование финреза и налогового дохода (убытка)							   
	П5303 = ПолучитьПоказательНаСервере("П5003", Форма, "НалоговыеРазницы")
	                               + ПолучитьПоказательНаСервере("П5203", Форма, "НалоговыеРазницы");
	ЗаполнитьПоказательНаСервере("П5303", П5303, Форма, "НалоговыеРазницы");
								   
	П5304 = ПолучитьПоказательНаСервере("П5004", Форма, "НалоговыеРазницы")
	                               + ПолучитьПоказательНаСервере("П5204", Форма, "НалоговыеРазницы");									   
	ЗаполнитьПоказательНаСервере("П5304", П5304, Форма, "НалоговыеРазницы");
	
	
КонецПроцедуры // Расчет()

//&НаКлиентеНаСервереБезКонтекста
//Функция ОкруглитьЧислоПоФормату(Форма, ИсходноеЧисло)
//	
//	Перем Делитель;
//	
//	Если Форма.СоответствиеЕдиницыИзмеренияДелителю.Свойство("Окр" + СтрЗаменить(Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения, " ", ""), Делитель) Тогда
//		
//		Возврат Окр(ИсходноеЧисло / Делитель, Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения) * Делитель;
//		
//	КонецЕсли;
//	
//КонецФункции // ОкруглитьЧислоПоФормату(Форма, )

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
				
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект), НСтр("ru='Удалить текущую страницу?';uk='Видалити поточну сторінку?'"), РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
			
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
    
    КопияТекущиеДанные = ТекущиеДанные;
    
    ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
    
    Если ТекущиеДанные = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
        Возврат;
    КонецЕсли;
    
    ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
    Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
        ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
        СтруктураРеквизитовФормы.НомерТекущейСтраницы = ТекущаяСтраницаРазделаПослеУдаления.КолонкаНомерСтраницыРазделаОтчета;
    КонецЕсли;
    
    УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
    
    ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
    
    НомерСтраницы = 1;
    
    Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
        
        СтраницаРаздела.КолонкаРазделыОтчета              = "Страница " + НомерСтраницы;
        СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
        
        НомерСтраницы = НомерСтраницы + 1;
        
    КонецЦикла;
    
    Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
        Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеСтраницы(Команда)
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	Если ТекущиеДанные.ПолучитьРодителя() = Неопределено
	   И ТекущиеДанные.ПолучитьЭлементы().Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Если ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() <= 1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийРаздел" + ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
			
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз <> 0 И ЭтаФорма[мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ИмяТекущейСтраницыПанели;
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.';uk='В розділі ""%1"" максимальна кількість екземплярів сторінок дорівнює 
|%2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);

			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = ЭтаФорма[ИмяТекТабличногоПоля];
		
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));
	
	Если СтрТаблицаСтраницы.Количество() > 0 Тогда

		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		
		// Убираем активность у текущей страницы
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
        		
	КонецЕсли;
	
	// Добавляем новую страницу
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	
	// Присваиваем представление по умолчанию
	СтрНоваяСтраница.Представление      = "Новая страница";
	СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;
	
	// Ставим признак активной страницы
	СтрНоваяСтраница.АктивнаяСтраница   = Истина;
	
	ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели);
	
	Модифицированность = Истина;
			
КонецПроцедуры // ВставитьДополнительнуюСтраницуНаСервере()

&НаСервере
Процедура ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели)
	
	ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
		
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // ПослеДобавленияДопСтрНаСервере()

&НаСервере
Процедура ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели)
	
	//Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
	//	ИзменитьЦветЯчеекНаСервере();
	//КонецЕсли;
	
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
		
КонецПроцедуры // ПослеВставкиДополнительнойСтраницыНаСервере()

&НаСервере
Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели)
	
	//итоговые ячейки не очистились - необходимо провести расчет
	//для этого сохраним данные страницы
	РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);
	
КонецПроцедуры // СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере()

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	РасчетНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
КонецПроцедуры // УдалитьДополнительнуюСтраницуНаСервере()

// ДобавитьСтроку()
//
&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		
		ВставитьДополнительнуюСтрокуНаСервере();
		
	#Иначе
		
		ВставитьДополнительнуюСтрокуНаКлиенте();
		
	#КонецЕсли
		
КонецПроцедуры // ДобавитьСтроку()

// УдалитьСтроку()
//
&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];

	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.';uk='Не обрано строку багаторядкового розділу, що видаляється'");
	
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;

	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Удалить выбранную строку?%1(Внимание! Данная операция необратима)';uk='Вилучити вибраний рядок?%1(Увага! Дана операція необоротна)'"), Символы.ПС), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    #Если ВебКлиент Тогда
        УдалитьДополнительнуюСтрокуНаСервере();
    #Иначе
        УдалитьДополнительнуюСтрокуНаКлиенте();
    #КонецЕсли

КонецПроцедуры // УдалитьСтроку()

&НаСервере
Процедура ВставитьДополнительнуюСтрокуНаСервере()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // ВставитьДополнительнуюСтрокуНаСервере()

&НаКлиенте
Процедура ВставитьДополнительнуюСтрокуНаКлиенте()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // ВставитьДополнительнуюСтрокуНаКлиенте()

// Создает новую строку многострочного раздела.
// Процедура вставляет строку в многострочный блок.
//
// Параметры:
//  Форма          - ссылка на форму отчета
//  ИмяГруппыБлока - имя группы, в том случае, если необходимо вставить строки в процедурах автозаполнения, без фокусировок.
//  СпециальноеДобавление - режим добавления строк по нестандартному алгоритму, когда в правой части распологаются данные.
//  ИмяКолонкиНомера - имя колонки, в которой необходимо проставлять номер при вставки строки.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ИмяГруппыБлока = Неопределено, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = 1) Экспорт
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	Если ИмяГруппыБлока = Неопределено Тогда
		// Сначала выполним проверку на активную страницу панели формы,
		// которая содержит многострочный раздел
			
		ТекущаяСтраница = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		ТекТабличноеПоле = Форма.ТабличныйДокумент;

		ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
		#Если НаКлиенте Тогда
			ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
		#Иначе
			ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
		#КонецЕсли

		Если ИмяГруппы = Неопределено Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.';uk='Не обрано багаторядковий розділ, у який необхідно додати рядок.'");

			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
	Иначе
		ИмяГруппы = ИмяГруппыБлока;
	КонецЕсли;

	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	
	КолонкиГруппы = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];
	
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	ИмяПервойКолонки = КолонкиГруппы[0];
	ИмяПервойЯчейкиПоследнейСтроки = ИмяПервойКолонки + "_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	НазначитьИмяОбластиМЧ = Ложь;
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	Если Найти(ВставляемаяОбласть.Имя, "МногострочнаяЧасть") > 0 Тогда
		НазначитьИмяОбластиМЧ = Истина;
		ИмяМногострочнойЧасти = ВставляемаяОбласть.Имя;
	КонецЕсли;

	Если СпециальноеДобавление Тогда
		
	Иначе
				
		// добавляем в таблицу новую строку
		РегламентированнаяОтчетностьВызовСервера.ВставитьОбластьВТабличныйДокумент(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	Если НазначитьИмяОбластиМЧ Тогда
		ТекТабличноеПоле.Область(НомерНижнЯчейкиОбласти + 1, , НомерНижнЯчейкиОбласти + (НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти) + 1, ).Имя = "";
		ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, ).Имя = ИмяМногострочнойЧасти;
	КонецЕсли;

	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	
	Для Каждого ИмяКолонки ИЗ КолонкиГруппы Цикл
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
			Если ИмяКолонкиНомера <> Неопределено Тогда
				Если ИмяКолонкиНомера = ИмяКолонки Тогда
					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ОбластьЯчейки.Значение = КолСтрок + НомерПервойСтроки;
					Иначе
						ОбластьЯчейки.Текст = КолСтрок + НомерПервойСтроки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Если ИмяГруппыБлока = Неопределено Тогда

		// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
		// Определяем текущую область таблицы
		
		//ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;
		ИмяТекущейОбласти = ИмяПервойКолонки + "_" + КолСтрокСтр1;

		Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
				
		// установим фокус на поле табличн. документа
		ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
		
	КонецЕсли;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	Форма.Модифицированность = Истина;
			
КонецПроцедуры // ВставитьДополнительнуюСтроку()

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // УдалитьДополнительнуюСтрокуНаСервере()

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // УдалитьДополнительнуюСтрокуНаКлиенте()

// Удаляет строку многострочного раздела формы.
&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = 1) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
    	
	ТекущаяСтраница = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	ТекТабличноеПоле = Форма.ТабличныйДокумент;

	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	#Если НаКлиенте Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли

	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
   	КолонкиГруппы = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];
	ИмяПервойКолонки = КолонкиГруппы[0];
	
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	ИмяЯчейки = ТекущаяОбласть.Имя;

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		
		//ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + Формат(НомУдаляемойСтроки, "ЧГ=0");
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяПервойКолонки + "_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		МногострочностьВРазделе = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ДанныеФормыКоллекция") Тогда
			ИмяОбластиМнгЧ = МногострочностьВРазделе.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].Область;
		КонецЕсли;
		// Найдем координаты области, для последующего восстановления.

		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;

		Если СпециальноеДобавление Тогда
			
		Иначе
					
			РегламентированнаяОтчетностьВызовСервера.УдалитьОбластьИзТабличногоДокумента(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
			Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
			
		КонецЕсли;
		// Восстановим область.
		ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр - 1];

				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				
				Для Каждого КолонкаИмя ИЗ КолонкиГруппы Цикл
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ИмяКолонкиНомера <> Неопределено Тогда
							Если ИмяКолонкиНомера = КолонкаИмя Тогда
								// обновляем порядковый номер строки
								
								НовыйПорядковыйНомер = НСтр - 1 + НомерПервойСтроки - 1;
								
								Если ОбластьСдвинутойЯчейки.СодержитЗначение = Истина Тогда
									ОбластьСдвинутойЯчейки.Значение = НовыйПорядковыйНомер;
								Иначе
									ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1 + НомерПервойСтроки - 1;
			
			Для Каждого КолонкаТаблицыИмя ИЗ КолонкиГруппы Цикл
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					Если ИмяКолонкиНомера <> Неопределено Тогда
						Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
							// обновляем порядковый номер строки
							СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла;
		
		КонецЦикла;

		// Данные в многострочном блоке обновляются в декларациях!
		// Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	//ИмяТекущейОбласти = ИмяГруппы + "01_" + Формат(НомТекущейСтроки, "ЧГ=0");
	ИмяТекущейОбласти = ИмяПервойКолонки + "_" + Формат(НомТекущейСтроки, "ЧГ=0");
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];

	Форма.Модифицированность = Истина;
		
	#Если НаКлиенте Тогда
		Форма.РасчетНаКлиенте(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#Иначе
		Форма.РасчетНаСервере(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#КонецЕсли

КонецПроцедуры // УдалитьДополнительнуюСтроку()
		
&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки 			 = Область.Имя;
	НаименованиеТекЛиста = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	
	Если Лев(ИмяЯчейки, 1) = "_" Тогда
		
		ИмяЯчейкиБезСкобок = Сред(ИмяЯчейки, 2);
		ТекЗначениеБезСкобок = ТабличныйДокумент.Области[ИмяЯчейкиБезСкобок].Значение;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводЧислаВСкобкахЗавершение",ЭтаФорма, Новый Структура("ИмяЯчейки", ИмяЯчейкиБезСкобок));
		ПоказатьВводЧисла(ОписаниеОповещения, ТекЗначениеБезСкобок, НСтр("ru='Значение в скобках';uk='Значення в дужках'"), 15, 2);
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;		
	
КонецПроцедуры // ОбработкаВыбораВПолеТабличногоДокумента()

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	Модифицированность = Истина;
		
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", Область.Имя));
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяРаздела = "РазделI" 
	 ИЛИ ИмяРаздела = "РазделII" 
	 ИЛИ ИмяРаздела = "РазделIII_IV" 
	 ИЛИ ИмяРаздела = "РазделV_VI" 
	 ИЛИ ИмяРаздела = "РазделVII_VIII" 
	 ИЛИ ИмяРаздела = "РазделIX_XII" 
	 ИЛИ ИмяРаздела = "РазделXIII" 
	 ИЛИ ИмяРаздела = "РазделXIV" 
	 ИЛИ ИмяРаздела = "РазделXV" 
	 ИЛИ ИмяРаздела = "НалоговыеРазницы" Тогда
		
		ИмяОбласти = Область.Имя;
		
		Если Сред(Область.Имя,1,1)<> "_" Тогда 
			РасчетНаКлиенте();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента()

&НаКлиенте
Процедура ДатаПодписиПриИзменении(Элемент)
	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
	Модифицированность = Истина;
		
КонецПроцедуры // ДатаПодписиПриИзменении()

&НаСервере
Процедура ПослеСменыЕдИзмеренияИТочности()

	ЗаполнитьПустыеСтруктурыДанных();
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
		
КонецПроцедуры // ПослеСменыЕдИзмеренияИТочности()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
&НаСервере
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в гривнах точность не может превышать 2 знака';uk='%1: при виведенні сум у гривнях точність не може перевищувати 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах гривен точность не может превышать 3 знака';uk='%1: при виведенні сум в тисячах гривень точність не може перевищувати 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах гривен точность не может превышать 6 знаков';uk='%1: при виведенні сум у мільйонах гривень точність не може перевищувати 6 знаків'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
		
КонецПроцедуры // Обновить()

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	    
КонецПроцедуры // ОткрытьФормуНастроек()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("Автосохранение", Ложь);
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет",		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", 		СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
					
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
    
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Если РезультатВыбора <> Неопределено Тогда
		КопироватьДанныеФормы(РезультатВыбора, мДеревоВыбранныхСтраниц);
		РегламентированнаяОтчетностьКлиентСервер.ПрорисоватьПодменюПечать(ЭтаФорма);
		Модифицированность = Истина;
					
		флЗначенияИдентичны = Истина;
		
		Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
			
			Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = РезультатВыбора.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
				флЗначенияИдентичны = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			
			#Если ВебКлиент Тогда
				ИзменитьТаблицуВариантовЗаполненияНаСервере();
			#Иначе
				РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			#КонецЕсли	
			
			Расчет(ЭтаФорма);
			
		КонецЕсли;
		
		Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		 ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
			ПослеСменыЕдИзмеренияИТочности();
		КонецЕсли;
		
		// Управляем видимостью страниц основной панели формы
	    РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
		
		Если НЕ флЗначенияИдентичны Тогда
			
			СформироватьДеревоРазделовОтчетаНаКлиенте();
			
			Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
				
				// Пытаемся найти ранее запомненный раздел.
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
				
				Если НЕ НайденнаяСтрока = Неопределено 
					И НЕ НомерСтраницыРазделаОтчета = Неопределено 
					И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
					
					НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
					
				КонецЕсли;
				
				// В случае успешного поиска, устанавливаем курсор на найденный раздел.
				Если НЕ НайденнаяСтрока = Неопределено Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				КонецЕсли;
				
			КонецЕсли;
			
			// обнулим информацию о выделенных областях, так как набор страниц были изменен.
			СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Неопределено;
			
		КонецЕсли;
		
	Иначе
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры // ИзменитьТаблицуВариантовЗаполненияНаСервере()

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
		
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)

	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела" + Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхРазделI.Очистить();
	СтруктураДанныхРазделII.Очистить();
	СтруктураДанныхРазделIII_IV.Очистить();
	СтруктураДанныхРазделV_VI.Очистить();
	СтруктураДанныхРазделVII_VIII.Очистить();
	СтруктураДанныхРазделIX_XII.Очистить();
	СтруктураДанныхНалоговыеРазницы.Очистить();
	СтруктураДанныхРазделXIII.Очистить();
	СтруктураДанныхРазделXIV.Очистить();
	СтруктураДанныхРазделXV.Очистить();
		
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
КонецПроцедуры // ОчиститьНаСервере()

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры // ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере()

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда

		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ВвестиПоказатель()

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
	
КонецПроцедуры


// ПоказатьБланк()
//
&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры // ПоказатьБланк()

// ПечататьСразу()
//
&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры // ПечататьСразу()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено, НеИзФормыОтчета = Ложь) Экспорт
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и%1задать его в качестве используемого по умолчанию!';uk='Перед формуванням друкованих форм необхідно визначити в системі принтер%1задати його в якості використовуваного за замовчуванням!'"), Символы.ПС));				
		Возврат;
	КонецЕсли;
              	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...';uk='%1. Формується друкована форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
				
	ПечатьНаСервере(ВидПечати, ЧтоИскать);
		
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

КонецПроцедуры // Печать()

// ПечатьНаСервере()
//
&НаСервере
Процедура ПечатьНаСервере(ВидПечати, ЧтоИскать = Неопределено);
				
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
				
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	ОбщиеРеквизитыРазделов = Новый Структура();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЕстьДуплекс",        СтруктураРеквизитовФормы.ЕстьДуплекс);
		СтруктураПараметров.Вставить("Автомасштаб",        Истина);
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
КонецПроцедуры // ПечатьНаСервере()
	
// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов)
		
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
КонецПроцедуры // ВывестиНаПечатьЛист()

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		СохрАктивнаяСтраница = ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница;
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = СохрАктивнаяСтраница;
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
    		
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()
      
&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	Если Найти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ВнешнийСтр = НСтр("ru='- внешний отчет';uk='- зовнішній звіт'");
	Заголовок = Заголовок + ?(Найти(ЭтаФорма.ИмяФормы, "Внешний") > 0, ВнешнийСтр, "");
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.ОргНазв + ")";
	Если Найти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если Найти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
	ИначеЕсли Найти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
			
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры // ОчисткаРегламентированногоОтчетаНаСервере()

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если Найти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
	ИначеЕсли Найти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СформироватьДеревоРазделовОтчетаНаКлиенте();
	
КонецПроцедуры // ОчисткаРегламентированногоОтчетаНаКлиенте()

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	ПараметрыЗаполненияЗвит1С = Новый Структура;
	
	ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);
	
	ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьАвто()

&НаСервере
Процедура ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С)
	
	ОчиститьНаСервере();
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	Заполнить(ПараметрыЗаполненияЗвит1С);
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура Заполнить(ПараметрыЗаполненияЗвит1С)
	
	
    ТаблицаРасшифровки = Неопределено;
	Если СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровки") И ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки) Тогда
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	КонецЕсли;
	
	Если ТаблицаРасшифровки = Неопределено Тогда
		ТаблицаРасшифровки = Новый ТаблицаЗначений;
		ТаблицаРасшифровки.Колонки.Добавить("ИмяПоказателя");
		ТаблицаРасшифровки.Колонки.Добавить("НаименованиеПоказателя");
		ТаблицаРасшифровки.Колонки.Добавить("ЗнакОперации");
		ТаблицаРасшифровки.Колонки.Добавить("НаименованиеСлагаемого");
		ТаблицаРасшифровки.Колонки.Добавить("Сумма");
		ТаблицаРасшифровки.Колонки.Добавить("ИмяРаздела");
		ТаблицаРасшифровки.Колонки.Добавить("ДополнительныеПараметры");
	КонецЕсли;
	
	ТаблицаРасшифровки.Очистить();
	
	ОбщиеПараметрыРасшифровки = Новый Структура;
	ОбщиеПараметрыРасшифровки.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ОбщиеПараметрыРасшифровки.Вставить("НачалоПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ОбщиеПараметрыРасшифровки.Вставить("КонецПериода", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	флЕРП25 = ?(РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации(Истина) = "ERP25",Истина,Ложь);
	
	// Инициализация
	МассивСчетов = Новый Массив();
	
	ПС      = ПланыСчетов["Хозрасчетный"];
	Счет02   = ПС.АктивыНаОтветственномХранении;
	Счет10   = ПС.ОсновныеСредства;
	Счет10_0 = ПС.ИнвестиционнаяНедвижимость;
	Счет10_1 = ПС.ЗемельныеУчастки;
	Счет10_2 = ПС.КапитальныеЗатратыПоУлучшениюЗемель;
	Счет10_3 = ПС.ДомаИСооружения;
	Счет10_4 = ПС.МашиныИОборудование;
	Счет10_5 = ПС.ТранспортныеСредства;
	Счет10_6 = ПС.ИнструментыПриборыИИнвентарь;
	Счет10_7 = ПС.Животные;
	Счет10_8 = ПС.МноголетниеНасаждения;
	Счет11   = ПС.ДругиеНеоборотныеМатериальныеАктивыГруппа;
	Счет11_1 = ПС.БиблиотечныеФонды;
	Счет11_2 = ПС.МалоценныеНеоборотныеМатериальныеАктивы;
	Счет11_3 = ПС.ВременныеНетитульныеСооружения;
	Счет11_4 = ПС.ПриродныеРесурсы;
	Счет11_5 = ПС.ИнвентарнаяТара;
	Счет11_6 = ПС.ПредметыПроката;
	Счет12   = ПС.НематериальныеАктивы;      
	Счет12_1 = ПС.ПраваНаИспользованиеПриродныхРесурсов;
	Счет12_2 = ПС.ПраваНаИспользованиеИмущества;
	Счет12_3 = ПС.ПраваНаЗнакиДляТоваровИУслуг;
	Счет12_4 = ПС.ПраваНаОбъектыПромышленнойСобственности;
	Счет12_5 = ПС.АвторскиеИСмежныеСНимиПрава;
	Счет13   = ПС.ИзносАмортизацияНеоборотныхАктивов;
	Счет15_1 = ПС.КапитальноеСтроительство;
	Счет15_2 = ПС.ПриобретениеИзготовлениеОсновныхСредств;
	Счет15_21= ПС.ПриобретениеОсновныхСредств;
	Счет15_22= ПС.ИзготовлениеОсновныхСредств;
	Счет15_31= ПС.ПриобретениеДругихНеоборотныхМатериальныхАктивов;
	Счет15_32= ПС.ИзготовлениеДругихНеоборотныхМатериальныхАктивов;
	Счет15_4 = ПС.ПриобретениеИзготовлениеНематериальныхАктивов;
	Счет15_5 = ПС.ПриобретениеВыращиваниеДолгосрочныхБиологическихАктивов;
	Счет17   = ПС.ОтсроченныеНалоговыеАктивы;
	Счет19   = ПС.Гудвил;
	Счет20   = ПС.ПроизводственныеЗапасы;    
	Попытка
		Счет20_0 = ПС.ТранспортноЗаготовительныеРасходыМатериалы;
	Исключение
		Счет20_0  = ПС.ПустаяСсылка();
	КонецПопытки;	
    Счет20_2 = ПС.ПокупныеПолуфабрикатыИКомплектующиеИзделия;
	Счет20_3 = ПС.Топливо;
	Счет20_4 = ПС.ТараИТарныеМатериалы;
	Счет20_5 = ПС.СтроительныеМатериалы;
	Счет20_6 = ПС.МатериалыПереданныеВПереработку;
	Счет20_7 = ПС.ЗапасныеЧасти;
	Счет20_8 = ПС.МатериалыСельскохозяйственногоНазначения;
    Счет21   = ПС.ТекущиеБиологическиеАктивы;
    Счет22   = ПС.МалоценныеИБыстроизнашивающиесяПредметы;
    Счет23   = ПС.Производство;
    Счет25   = ПС.Полуфабрикаты;
    Счет26   = ПС.ГотоваяПродукция;
    Счет27   = ПС.ПродукцияСельскохозяйственногоПроизводства;
    Счет28   = ПС.Товары;
    Счет28_3 = ПС.ТоварыНаКомиссии;
    Счет28_6 = ПС.НеоборотныеАктивыИГруппыВыбытияУдерживаемыеДляПродажи;
    Счет30   = ПС.Касса;
    Счет31   = ПС.СчетаВБанках;     
	Счет31_1 = ПС.ТекущиеСчетаВНациональнойВалюте;
    Счет31_2 = ПС.ТекущиеСчетаВИностраннойВалюте;
	Счет33   = ПС.ПрочиеДенежныеСредства;     
	Счет33_1 = ПС.ДенежныеДокументыВНациональнойВалюте;
    Счет33_2 = ПС.ДенежныеДокументыВИностраннойВалюте;
	Счет35_1 = ПС.ЭквивалентыДенежныхСредств;     
	Счет38   = ПС.РезервСомнительныхДолгов;
    Счет47   = ПС.ОбеспечениеБудущихЗатратИПлатежей;  
    Счет47_1 = ПС.ОбеспечениеВыплатОтпусков;
	Счет47_2 = ПС.ДополнительноеПенсионноеОбеспечение;
	Счет47_3 = ПС.ОбеспечениеГарантийныхОбязательств;
	Счет47_5 = ПС.ОбеспечениеИнвестиционнаяДеятельность;
	Счет47_6 = ПС.ОбеспечениеФинансоваяДеятельность;
	Счет47_7 = ПС.ОбеспечениеМатериальногоПоощерения;
	Счет47_8 = ПС.ОбеспечениеВосстановленияЗемельныхУчастков;
	Счет54   = ПС.ОтсроченныеНалоговыеОбязательства;
	Счет64_13= ПС.РасчетыПоНалогуНаПрибыль;
	Счет71   = ПС.ДругойОперационныйДоход;     
	Счет71_2 = ПС.ДоходОтРеализацииДругихОборотныхАктивов;
	Счет71_3 = ПС.ДоходОтОперационнойАрендыАктивов;
	Счет71_4 = ПС.ДоходОтОперационнойКурсовойРазницы;
	Счет71_5 = ПС.ПолученныеШтрафыПениНеустойки;
    Счет72_1 = ПС.ДоходОтИнвестицийВАссоциированныеПредприятия;
    Счет72_2 = ПС.ДоходОтСовместнойДеятельности;
    Счет72_3 = ПС.ДоходОтИнвестицийВДочерниеПредприятия;
    Счет73_1 = ПС.ДивидендыПолученные;
    Счет73_2 = ПС.ПроцентыПолученные;
    Счет73_3 = ПС.ПрочиеДоходыОтФинансовыхОпераций;
	Счет74   = ПС.ДругиеДоходы;     
    Счет74_1 = ПС.ДоходОтРеализацииФинансовыхИнвестиций;
    Счет74_2 = ПС.ДоходОтРеализацииНеоборотныхАктивов;
	Счет74_4 = ПС.ДоходОтНеоперационнойКурсовойРазницы;
    Счет74_5 = ПС.ДоходОтБесплатноПолученныхАктивов;
    Счет74_6 = ПС.ДругиеДоходыОтОбычнойДеятельности;
	Счет79_1 = ПС.РезультатОперационнойДеятельности;
	Счет79_2 = ПС.РезультатФинансовыхОпераций;
	Счет79_3 = ПС.РезультатДругойОбычнойДеятельности;
	Счет94   = ПС.ДругиеЗатратыОперационнойДеятельностиГруппа;     
	Счет94_3 = ПС.СебестоимостьРеализованныхПроизводственныхЗапасов;
	Счет94_4 = ПС.СомнительныеИБезнадежныеДолги;
	Счет94_5 = ПС.ЗатратыОтОперационнойКурсовойРазницы;
	Счет94_6 = ПС.ЗатратыОтОбесцениванияЗапасов;
	Счет94_7 = ПС.НедостачиИПотериОтПорчиЦенностей;
	Счет94_8 = ПС.ПризнанныеШтрафыПениНеустойки;
	Счет94_9 = ПС.ДругиеЗатратыОперационнойДеятельности;
	Счет95   = ПС.ФинансовыеЗатраты;     
	Счет95_1 = ПС.ПроцентыЗаКредит;
    Счет96_1 = ПС.ПотериОтИнвестицийВАссоциированныеПредприятия;
	Счет96_2 = ПС.ПотериОтСовместнойДеятельности;
	Счет96_3 = ПС.ПотериОтИнвестицийВДочерниеПредприятия;
	Счет97   = ПС.ДругиеЗатратыДеятельности;    
	Счет97_1 = ПС.СебестоимостьРеализованныхФинансовыхИнвестиций;
	Счет97_2 = ПС.СебестоимостьРеализованныхНеоборотныхАктивов;
    Счет97_4 = ПС.ПотериОтНеоперационныхКурсовыхРазниц;
    Счет97_6 = ПС.СписаниеНеоборотныхАктивов;
    Счет97_7 = ПС.ДругиеЗатратыОбычнойДеятельности;
	Cчет98   = ПС.НалогНаПрибыль;
	
	// Заполнение текстового представления периодов отчетов (для расшифровок необоротных показателей)
	РезФинРез_Период 				= ПредставлениеПериода( НачалоДня(НачалоКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "Л = ""uk_UA""; ФП = Истина" );
	РезБаланс_Период				= ПредставлениеПериода( НачалоДня(НачалоКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "Л = ""uk_UA""; ФП = Истина" );
	
	РезФинРез 			   = ПараметрыЗаполненияЗвит1С.РезФинРез;
	РезБаланс 			   = ПараметрыЗаполненияЗвит1С.РезБаланс;
	
	// Бухгалтерский итоги по счетам
	мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать();

	Итоги = "НачальныйОстатокДт, НачальныйОстатокКт,
	        |КонечныйОстатокДт,  КонечныйОстатокКт,
            |ОборотДт, ОборотКт, 
			|КорОборотДт, КорОборотКт";

	// Бухгалтерские итоги по счетам, без аналитики
	мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет,КорСчет", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, , , , , , "Организация", СтруктураРеквизитовФормы.Организация);
	                 
	Если флЕРП25 Тогда
		ТаблицаИзносаОС  = СформироватьЗапросДляОСERP25(НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,СтруктураРеквизитовФормы.Организация);
		ТаблицаИзносаНМА = СформироватьЗапросДляНМАERP25(НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,СтруктураРеквизитовФормы.Организация);
	Иначе
		ТаблицаИзносаОС  = СформироватьЗапросДляОС(НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,СтруктураРеквизитовФормы.Организация);
		ТаблицаИзносаНМА = СформироватьЗапросДляНМА(НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета),СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,СтруктураРеквизитовФормы.Организация);
	КонецЕсли;	
	ОбработатьТаблицуРезультатов(ТаблицаИзносаОС, 0);
	ОбработатьТаблицуРезультатов(ТаблицаИзносаНМА, 1);

	////	I. Нематеріальні активи
	////Залишок на початок року
	////первісна (переоцінена) вартість
	
	П010_3 = СНД(Счет12_1);
	УстановитьЗначениеПоказателя("П010_3", П010_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П010_3", "Показник ""Права користування природними ресурсами"", графа ""Залишок на початок року"", ""первісна (переоцінена) вартість""",	"+", "!СНД",П010_3, Счет12_1);

	П020_3 = СНД(Счет12_2);
	УстановитьЗначениеПоказателя("П020_3", П020_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П020_3", "Показник ""Права користування майном"", графа ""Залишок на початок року"", ""первісна (переоцінена) вартість""",	"+", "!СНД",П020_3, Счет12_2);
	
	П030_3 = СНД(Счет12_3);
	УстановитьЗначениеПоказателя("П030_3", П030_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П030_3", "Показник ""Права на комерційні позначення"", графа ""Залишок на початок року"", ""первісна (переоцінена) вартість""",	"+", "!СНД",П030_3, Счет12_3);
	
	П040_3 = СНД(Счет12_4);
	УстановитьЗначениеПоказателя("П040_3", П040_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П040_3", "Показник ""Права на об'єкти промислової власності"", графа ""Залишок на початок року"", ""первісна (переоцінена) вартість""",	"+", "!СНД",П040_3, Счет12_4);
	
	П050_3 = СНД(Счет12_5);
	УстановитьЗначениеПоказателя("П050_3", П050_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П050_3", "Показник ""Авторське право та суміжні з ними права"", графа ""Залишок на початок року"", ""первісна (переоцінена) вартість""",	"+", "!СНД",П050_3, Счет12_5);
	
	//Гудвил
	П090_3 = СНД(Счет19);
	УстановитьЗначениеПоказателя("П090_3", П090_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П090_3", "Показник ""Гудвіл"", графа ""Залишок на початок року"", ""первісна (переоцінена) вартість""",	"+", "!СНД",П090_3, Счет19);

	П090_5 = ДО(Счет19);
	УстановитьЗначениеПоказателя("П090_5", П090_5);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П090_5", "Показник ""Гудвіл"", графа ""Надійшло за рік""",	"+", "!ДО",П090_5, Счет19);

	П090_8 = ОБ(Счет97_6, Счет19);
	УстановитьЗначениеПоказателя("П090_8", П090_8);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П090_8", "Показник ""Гудвіл"", графа ""Вибуло за рік"", ""первісна (переоцінена) вартість""", "+", "!ОБ",П090_8, Счет97_6, Счет19);
	
	П090_11 = ОБ(Счет97_2, Счет19);
	УстановитьЗначениеПоказателя("П090_11", П090_11);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П090_11", "Показник ""Гудвіл"", графа ""Вибуло за рік"", ""первісна (переоцінена) вартість""", "+", "!ОБ",П090_11, Счет97_2, Счет19);

	//Залишок на кінець року
	//первісна (переоцінена) вартість
	П010_14 = СКД(Счет12_1);
	УстановитьЗначениеПоказателя("П010_14", П010_14);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П010_14", "Показник ""Права користування природними ресурсами"", графа ""Залишок на кінець року"", ""первісна (переоцінена) вартість""",	"+", "!СКД",П010_14, Счет12_1);
	
	П020_14 = СКД(Счет12_2);
	УстановитьЗначениеПоказателя("П020_14", П020_14);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П020_14", "Показник ""Права користування майном"", графа ""Залишок на кінець року"", ""первісна (переоцінена) вартість""",	"+", "!СКД",П020_14, Счет12_2);

	
	П030_14 = СКД(Счет12_3);
	УстановитьЗначениеПоказателя("П030_14", П030_14);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П030_14", "Показник ""Права на комерційні позначення"", графа ""Залишок на кінець року"", ""первісна (переоцінена) вартість""",	"+", "!СКД",П030_14, Счет12_3);
	
	П040_14 = СКД(Счет12_4);
	УстановитьЗначениеПоказателя("П040_14", П040_14);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П040_14", "Показник ""Права на об'єкти промислової власності"", графа ""Залишок на кінець року"", ""первісна (переоцінена) вартість""",	"+", "!СКД",П040_14, Счет12_4);
	
	П050_14 = СКД(Счет12_5);
	УстановитьЗначениеПоказателя("П050_14", П050_14);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П050_14", "Показник ""Авторське право та суміжні з ними права"", графа ""Залишок на кінець року"", ""первісна (переоцінена) вартість""",	"+", "!СКД",П050_14, Счет12_5);

	//Гудвил
	П090_14 = СКД(Счет19);
	УстановитьЗначениеПоказателя("П090_14", П090_14);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П090_14", "Показник ""Гудвіл"", графа ""Залишок на кінець року"", ""первісна (переоцінена) вартість""",	"+", "!СКД",П090_14, Счет19);

	П070_3 = 0; П070_14 = 0;
	Пер3 = 0;  Пер14 = 0;
	Стр3 = "Показник ""Інші нематеріальні активи"", графа ""Залишок на початок року"", ""первісна (переоцінена) вартість""";
	Стр14 = "Показник ""Інші нематеріальні активи"", графа ""Залишок на кінець року"", ""первісна (переоцінена) вартість""";
	мСчета = Новый Массив;
	мСчета = ПланыСчетов.Хозрасчетный.Выбрать(Счет12);
	Пока мСчета.Следующий() Цикл
		// Счета исключения
		Если (мСчета.Ссылка = Счет12_1) ИЛИ  (мСчета.Ссылка = Счет12_2) ИЛИ  
			 (мСчета.Ссылка = Счет12_5) ИЛИ  (мСчета.Ссылка.ПринадлежитЭлементу(Счет12_5)) ИЛИ
			 (мСчета.Ссылка.ПринадлежитЭлементу(Счет12_1)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет12_2)) ИЛИ 
			 (мСчета.Ссылка.ПринадлежитЭлементу(Счет12_3)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет12_4)) ИЛИ 
			 (мСчета.Ссылка = Счет12_3) ИЛИ (мСчета.Ссылка = Счет12_4) Тогда
			 Продолжить;
		КонецЕсли;
		Пер3 = СНД(мСчета.Ссылка);
		П070_3  = П070_3 + Пер3;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П070_3", Стр3,	"+", "!СНД",Пер3, мСчета.Ссылка);
		Пер14 = СКД(мСчета.Ссылка);
		П070_14  = П070_14 + Пер14;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П070_14", Стр14,	"+", "!СКД",Пер14, мСчета.Ссылка);
		Стр3 = "";  Стр14 = "";
	КонецЦикла;
	УстановитьЗначениеПоказателя("П070_3", П070_3);
	УстановитьЗначениеПоказателя("П070_14", П070_14);
	
	//II. Основні засоби
	//Залишок на початок року
	//первісна (переоцінена) вартість
	П100_3 = СНД(Счет10_1);
	УстановитьЗначениеПоказателя("П100_3",П100_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П100_3", "Показник ""Земельні ділянки"", графа ""Залишок на початок року"", ""первісна (переоцінена) вартість""",	"+", "!СНД",П100_3, Счет10_1);
	
	П105_3 = СНД(Счет10_0);
	УстановитьЗначениеПоказателя("П105_3",П105_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П105_3", "Показник ""Інвестиційна нерухомість"", графа ""Залишок на початок року"", ""первісна (переоцінена) вартість""",	"+", "!СНД",П105_3, Счет10_0);

	П110_3 = СНД(Счет10_2);
	УстановитьЗначениеПоказателя("П110_3",П110_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П110_3", "Показник ""Капітальні витрати на поліпшення земель"", графа ""Залишок на початок року"", ""первісна (переоцінена) вартість""",	"+", "!СНД",П110_3, Счет10_2);
		
	П120_3 = СНД(Счет10_3);
	УстановитьЗначениеПоказателя("П120_3",П120_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П120_3", "Показник ""Будинки, споруди та передавальні пристрої"", графа ""Залишок на початок року"", ""первісна (переоцінена) вартість""",	"+", "!СНД",П120_3, Счет10_3);
	
	П130_3 = СНД(Счет10_4);
	УстановитьЗначениеПоказателя("П130_3",П130_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П130_3", "Показник ""Машини та обладнання"", графа ""Залишок на початок року"", ""первісна (переоцінена) вартість""",	"+", "!СНД",П130_3, Счет10_4);
	
	П140_3 = СНД(Счет10_5);
	УстановитьЗначениеПоказателя("П140_3",П140_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П140_3", "Показник ""Транспортні засоби"", графа ""Залишок на початок року"", ""первісна (переоцінена) вартість""",	"+", "!СНД",П140_3, Счет10_5);
	
	П150_3 = СНД(Счет10_6);
	УстановитьЗначениеПоказателя("П150_3",П150_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П150_3", "Показник ""Інструменти, прилади, інвентар(меблі)"", графа ""Залишок на початок року"", ""первісна (переоцінена) вартість""",	"+", "!СНД",П150_3, Счет10_6);
	
	П160_3 = СНД(Счет10_7);
	УстановитьЗначениеПоказателя("П160_3",П160_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П160_3", "Показник ""Тварини"", графа ""Залишок на початок року"", ""первісна (переоцінена) вартість""",	"+", "!СНД",П160_3, Счет10_7);
	
	П170_3 = СНД(Счет10_8);
	УстановитьЗначениеПоказателя("П170_3",П170_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П170_3", "Показник ""Багаторічні насадження"", графа ""Залишок на початок року"", ""первісна (переоцінена) вартість""",	"+", "!СНД",П170_3, Счет10_8);
	
	П190_3 = СНД(Счет11_1);
	УстановитьЗначениеПоказателя("П190_3",П190_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П190_3", "Показник ""Бібліотечні фонди"", графа ""Залишок на початок року"", ""первісна (переоцінена) вартість""",	"+", "!СНД",П190_3, Счет11_1);
	
	П200_3 = СНД(Счет11_2);
	УстановитьЗначениеПоказателя("П200_3",П200_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П200_3", "Показник ""Малоцінні необоротні матеріальні активи"", графа ""Залишок на початок року"", ""первісна (переоцінена) вартість""",	"+", "!СНД",П200_3, Счет11_2);
	
	П210_3 = СНД(Счет11_3);
	УстановитьЗначениеПоказателя("П210_3",П210_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П210_3", "Показник ""Тимчасові (нетитульні) споруди"", графа ""Залишок на початок року"", ""первісна (переоцінена) вартість""",	"+", "!СНД",П210_3, Счет11_3);
	
	П220_3 = СНД(Счет11_4);
	УстановитьЗначениеПоказателя("П220_3",П220_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П220_3", "Показник ""Природні ресурси"", графа ""Залишок на початок року"", ""первісна (переоцінена) вартість""",	"+", "!СНД",П220_3, Счет11_4);
	
	П230_3 = СНД(Счет11_5);
	УстановитьЗначениеПоказателя("П230_3",П230_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П230_3", "Показник ""Інвентарна тара"", графа ""Залишок на початок року"", ""первісна (переоцінена) вартість""",	"+", "!СНД",П230_3, Счет11_5);
	
	П240_3 = СНД(Счет11_6);
	УстановитьЗначениеПоказателя("П240_3",П240_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П240_3", "Показник ""Предмети прокату"", графа ""Залишок на початок року"", ""первісна (переоцінена) вартість""",	"+", "!СНД",П240_3, Счет11_6);
	
	//Залишок на кінець року
	//первісна (переоцінена) вартість
	П100_14 = СКД(Счет10_1);
	УстановитьЗначениеПоказателя("П100_14",П100_14);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П100_14", "Показник ""Земельні ділянки"", графа ""Залишок на кінець року"", ""первісна (переоцінена) вартість""",	"+", "!СКД",П100_14, Счет10_1);
	
	П105_14 = СКД(Счет10_0);
	УстановитьЗначениеПоказателя("П105_14",П105_14);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П105_14", "Показник ""Інвестиційна нерухомість"", графа ""Залишок на кінець року"", ""первісна (переоцінена) вартість""",	"+", "!СКД",П105_14, Счет10_0);
	
	П110_14 = СКД(Счет10_2);
	УстановитьЗначениеПоказателя("П110_14",П110_14);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П110_14", "Показник ""Капітальні витрати на поліпшення земель"", графа ""Залишок на кінець року"", ""первісна (переоцінена) вартість""",	"+", "!СКД",П110_14, Счет10_2);
	
	П120_14 = СКД(Счет10_3);
	УстановитьЗначениеПоказателя("П120_14",П120_14);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П120_14", "Показник ""Будинки, споруди та передавальні пристрої"", графа ""Залишок на кінець року"", ""первісна (переоцінена) вартість""",	"+", "!СКД",П120_14, Счет10_3);
	
	П130_14 = СКД(Счет10_4);
	УстановитьЗначениеПоказателя("П130_14",П130_14);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П130_14", "Показник ""Машини та обладнання"", графа ""Залишок на кінець року"", ""первісна (переоцінена) вартість""",	"+", "!СКД",П130_14, Счет10_4);
	
	П140_14 = СКД(Счет10_5);
	УстановитьЗначениеПоказателя("П140_14",П140_14);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П140_14", "Показник ""Транспортні засоби"", графа ""Залишок на кінець року"", ""первісна (переоцінена) вартість""",	"+", "!СКД",П140_14, Счет10_5);
	
	П150_14 = СКД(Счет10_6);
	УстановитьЗначениеПоказателя("П150_14",П150_14);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П150_14", "Показник ""Інструменти, прилади, інвентар(меблі)"", графа ""Залишок на кінець року"", ""первісна (переоцінена) вартість""",	"+", "!СКД",П150_14, Счет10_6);
	
	П160_14 = СКД(Счет10_7);
	УстановитьЗначениеПоказателя("П160_14",П160_14);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П160_14", "Показник ""Тварини"", графа ""Залишок на кінець року"", ""первісна (переоцінена) вартість""",	"+", "!СКД",П160_14, Счет10_7);
	
	П170_14 = СКД(Счет10_8);
	УстановитьЗначениеПоказателя("П170_14",П170_14);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П170_14", "Показник ""Багаторічні насадження"", графа ""Залишок на кінець року"", ""первісна (переоцінена) вартість""",	"+", "!СКД",П170_14, Счет10_8);
	
	П180_3 = 0; П180_14 = 0;
	Пер3 = 0;  Пер14 = 0;
	Стр3 = "Показник ""Інші основні засоби"", графа ""Залишок на початок року"", ""первісна (переоцінена) вартість""";
	Стр14 = "Показник ""Інші основні засоби"", графа ""Залишок на кінець року"", ""первісна (переоцінена) вартість""";
	мСчета = Новый Массив;
	мСчета = ПланыСчетов.Хозрасчетный.Выбрать(Счет10);
	Пока мСчета.Следующий() Цикл
		// Счета исключения
		Если (мСчета.Ссылка = Счет10_1) ИЛИ (мСчета.Ссылка = Счет10_2) ИЛИ (мСчета.Ссылка = Счет10_3) ИЛИ  
			 (мСчета.Ссылка = Счет10_4) ИЛИ (мСчета.Ссылка = Счет10_5) ИЛИ (мСчета.Ссылка = Счет10_6) ИЛИ
			 (мСчета.Ссылка = Счет10_7) ИЛИ (мСчета.Ссылка = Счет10_8) ИЛИ 
			 (мСчета.Ссылка = Счет10_0) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет10_0)) ИЛИ 
			 (мСчета.Ссылка.ПринадлежитЭлементу(Счет10_1)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет10_2)) ИЛИ 
			 (мСчета.Ссылка.ПринадлежитЭлементу(Счет10_3)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет10_4)) ИЛИ 
			 (мСчета.Ссылка.ПринадлежитЭлементу(Счет10_5)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет10_6)) ИЛИ
			 (мСчета.Ссылка.ПринадлежитЭлементу(Счет10_7)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет10_8)) Тогда
			 Продолжить;
		КонецЕсли;
		Пер3 = СНД(мСчета.Ссылка);
		П180_3  = П180_3 + Пер3;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П180_3", Стр3, "+", "!СНД",Пер3, мСчета.Ссылка);		
		Пер14 = СКД(мСчета.Ссылка);
		П180_14  = П180_14 + Пер14;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П180_14", Стр14,	"+", "!СКД",Пер14, мСчета.Ссылка);
		Стр3 = "";  Стр14 = "";
	КонецЦикла;
	УстановитьЗначениеПоказателя("П180_3",П180_3);
	УстановитьЗначениеПоказателя("П180_14",П180_14);
	
	П190_14 = СКД(Счет11_1);
	УстановитьЗначениеПоказателя("П190_14",П190_14);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П190_14", "Показник ""Бібліотечні фонди"", графа ""Залишок на кінець року"", ""первісна (переоцінена) вартість""",	"+", "!СКД",П190_14, Счет11_1);
	
	П200_14 = СКД(Счет11_2);
	УстановитьЗначениеПоказателя("П200_14",П200_14);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П200_14", "Малоцінні необоротні матеріальні активи"", графа ""Залишок на кінець року"", ""первісна (переоцінена) вартість""",	"+", "!СКД",П200_14, Счет11_2);
	
	П210_14 = СКД(Счет11_3);
	УстановитьЗначениеПоказателя("П210_14",П210_14);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П210_14", "Показник ""Тимчасові (нетитульні) споруди"", графа ""Залишок на кінець року"", ""первісна (переоцінена) вартість""",	"+", "!СКД",П210_14, Счет11_3);
	
	П220_14 = СКД(Счет11_4);
	УстановитьЗначениеПоказателя("П220_14",П220_14);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П220_14", "Показник ""Природні ресурси"", графа ""Залишок на кінець року"", ""первісна (переоцінена) вартість""",	"+", "!СКД",П220_14, Счет11_4);
	
	П230_14 = СКД(Счет11_5);
	УстановитьЗначениеПоказателя("П230_14",П230_14);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П230_14", "Показник ""Інвентарна тара"", графа ""Залишок на кінець року"", ""первісна (переоцінена) вартість""",	"+", "!СКД",П230_14, Счет11_5);
	
	П240_14 = СКД(Счет11_6);
	УстановитьЗначениеПоказателя("П240_14",П240_14);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П240_14", "Показник ""Предмети прокату"", графа ""Залишок на кінець року"", ""первісна (переоцінена) вартість""",	"+", "!СКД",П240_14, Счет11_6);
	
	П250_3 = 0; П250_14 = 0;
	Пер3 = 0; Пер14 = 0;
	Стр3 = "Показник ""Інші необоротні матеріальні активи"", графа ""Залишок на початок року"", ""первісна (переоцінена) вартість""";
	Стр14 = "Показник ""Інші необоротні матеріальні активи"", графа ""Залишок на кінець року"", ""первісна (переоцінена) вартість""";
	мСчета = Новый Массив;
	мСчета = ПланыСчетов.Хозрасчетный.Выбрать(Счет11);
	Пока мСчета.Следующий() Цикл
		// Счета исключения
		Если (мСчета.Ссылка = Счет11_1) ИЛИ (мСчета.Ссылка = Счет11_2) ИЛИ (мСчета.Ссылка = Счет11_3) ИЛИ  
			 (мСчета.Ссылка = Счет11_4) ИЛИ (мСчета.Ссылка = Счет11_5) ИЛИ (мСчета.Ссылка = Счет11_6) ИЛИ
			 (мСчета.Ссылка.ПринадлежитЭлементу(Счет11_1)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет11_2)) ИЛИ 
			 (мСчета.Ссылка.ПринадлежитЭлементу(Счет11_3)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет11_4)) ИЛИ 
			 (мСчета.Ссылка.ПринадлежитЭлементу(Счет11_5)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет11_6)) Тогда
			 Продолжить;
		КонецЕсли;
		Пер3 = СНД(мСчета.Ссылка);
		П250_3  = П250_3 + Пер3;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П250_3", Стр3, "+", "!СНД",Пер3, мСчета.Ссылка);		
		Пер14 = СКД(мСчета.Ссылка);
		П250_14  = П250_14 + Пер14;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П250_14", Стр14,	"+", "!СКД",Пер14, мСчета.Ссылка);
		Стр3 = "";  Стр14 = "";
	КонецЦикла;
	УстановитьЗначениеПоказателя("П250_3",П250_3);
	УстановитьЗначениеПоказателя("П250_14",П250_14);
	
	//вартість основних засобів, призначених для продажу
	П265 = ДО(Счет28_6);
	УстановитьЗначениеПоказателя("П265",П265);

	
	//III. Капітальні інвестиції
	//Капітальне будівництво
	//За рік
	П280_3 = ДО(Счет15_1);
	УстановитьЗначениеПоказателя("П280_3",П280_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П280_3", "Показник ""Капітальне будівництво"", графа ""За рік""",	"+", "!ДО",П280_3, Счет15_1);
	
	//На кінець року
    П280_4 = СКД(Счет15_1);
	УстановитьЗначениеПоказателя("П280_4",П280_4);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П280_4", "Показник ""Капітальне будівництво"", графа ""На кінець року""",	"+", "!СКД",П280_4, Счет15_1);
	
	//Придбання (виготовлення) основних засобів
	//За рік
	П290_3 = ДО(Счет15_21) + ДО(Счет15_22) - ОБ(Счет15_22,Счет15_21);
	УстановитьЗначениеПоказателя("П290_3",П290_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П290_3", "Показник ""Придбання (виготовлення) основних засобів"", графа ""За рік""",	"+", "!ДО",ДО(Счет15_21), Счет15_21);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П290_3", "",	"+", "!ДО",ДО(Счет15_22), Счет15_22);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П290_3", "",	"-", "!ОБ",ОБ(Счет15_22,Счет15_21), Счет15_22,Счет15_21);
	
	
	//На кінець року
    П290_4 = СКД(Счет15_21) + СКД(Счет15_22);
	УстановитьЗначениеПоказателя("П290_4",П290_4);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П290_4", "Показник ""Придбання (виготовлення) основних засобів"", графа ""На кінець року""",	"+", "!СКД",СКД(Счет15_21), Счет15_21);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П290_4", "",	"+", "!СКД",СКД(Счет15_22), Счет15_22);
    	
	//Придбання (виготовлення) інших необоротних матеріальних активів
	//За рік
	П300_3 = ДО(Счет15_31) + ДО(Счет15_32);
	УстановитьЗначениеПоказателя("П300_3",П300_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П300_3", "Показник ""Придбання (виготовлення) інших необоротних матеріальних активів"", графа ""За рік""",	"+", "!ДО",ДО(Счет15_31), Счет15_31);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П300_3", "",	"+", "!ДО",ДО(Счет15_32), Счет15_32);
	
	//На кінець року
    П300_4 = СКД(Счет15_31) + СКД(Счет15_32);
	УстановитьЗначениеПоказателя("П300_4",П300_4);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П300_4", "Показник ""Придбання (виготовлення) інших необоротних матеріальних активів"", графа ""На кінець року""",	"+", "!СКД",СКД(Счет15_31), Счет15_31);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П300_4", "",	"+", "!СКД",СКД(Счет15_32), Счет15_32);
	
	//Придбання (створення) нематеріальних активів
	//За рік
	П310_3 = ДО(Счет15_4);
	УстановитьЗначениеПоказателя("П310_3",П310_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П310_3", "Показник ""Придбання (створення) нематеріальних активів"", графа ""За рік""",	"+", "!ДО",П310_3, Счет15_4);
	//На кінець року
    П310_4 = СКД(Счет15_4);
	УстановитьЗначениеПоказателя("П310_4",П310_4);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П310_4", "Показник ""Придбання (створення) нематеріальних активів"", графа ""На кінець року""",	"+", "!СКД",П310_4, Счет15_4);
	//Формування основного стада
	//За рік
	П320_3 = ДО(Счет15_5);
	УстановитьЗначениеПоказателя("П320_3",П320_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П320_3", "Показник ""Придбання (вирощування) довгострокових біологічних активів"", графа ""За рік""",	"+", "!ДО",П320_3, Счет15_5);
	//На кінець року
    П320_4 = СКД(Счет15_5);
	УстановитьЗначениеПоказателя("П320_4",П320_4);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П320_4", "Показник ""Придбання (вирощування) довгострокових біологічних активів"", графа ""На кінець року""",	"+", "!СКД",П320_4, Счет15_5);
	
	Если флЕРП25 Тогда
		РасчетПервичнойСтоимостиОсНаКонсервацииБУERP25();
		РасчетПервичнойСтоимостиПолностьюАмортОСБУERP25();
	Иначе
		РасчетПервичнойСтоимостиОсНаКонсервацииБУ();
		РасчетПервичнойСтоимостиПолностьюАмортОСБУ();
	КонецЕсли;
	//V. Доходи і витрати
	//А. Інші операційні доходи і витрати
	//Операційна оренда активів
	//Доходи
	П440_3 = ОБ(Счет71_3,Счет79_1);
	УстановитьЗначениеПоказателя("П440_3",П440_3);
	//_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П440_3", "Операційна оренда активів"", графа ""Доходи""",	"+", "!КО",П440_3, Счет71_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П440_3", "Показник ""Операційна оренда активів"", графа ""Доходи""",	"+", "!ОБ",П440_3, Счет71_3, Счет79_1);
    	
	//Операційна курсова різниця
	//Доходи
	П450_3 = ОБ(Счет71_4,Счет79_1);
	УстановитьЗначениеПоказателя("П450_3",П450_3);
	//_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П450_3", "Операційна курсова різниця"", графа ""Доходи""",	"+", "!КО",П450_3, Счет71_4);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П450_3", "Показник ""Операційна курсова різниця"", графа ""Доходи""",	"+", "!ОБ",П450_3, Счет71_4, Счет79_1);
	
	//Витрати                 
	П450_4 = ОБ(Счет79_1,Счет94_5);
	УстановитьЗначениеПоказателя("П450_4",П450_4);
	//_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П450_4", "Операційна курсова різниця"", графа ""Витрати""",	"+", "!ДО",П450_4, Счет94_5);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П450_4", "Показник ""Операційна курсова різниця"", графа ""Витрати""",	"+", "!ОБ",П450_4, Счет79_1, Счет94_5);
	
	//Реалізація інших оборотних активів
	//Доходи
	П460_3 = ОБ(Счет71_2,Счет79_1);
	УстановитьЗначениеПоказателя("П460_3",П460_3);
	//_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П460_3", "Реалізація інших оборотних активів"", графа ""Доходи""",	"+", "!КО",П460_3, Счет71_2);	
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П460_3", "Показник ""Реалізація інших оборотних активів"", графа ""Доходи""",	"+", "!ОБ",П460_3, Счет71_2, Счет79_1);	
	
	//Витрати                 
	П460_4 = ОБ(Счет79_1,Счет94_3);
	УстановитьЗначениеПоказателя("П460_4",П460_4);
	//_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П460_4", "Реалізація інших оборотних активів"", графа ""Витрати""",	"+", "!ДО",П460_4, Счет94_3);	
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П460_4", "Показник ""Реалізація інших оборотних активів"", графа ""Витрати""",	"+", "!ОБ",П460_4, Счет79_1, Счет94_3);	
	
	//Штрафи, пені, неустойки
	//Доходи
	П470_3 = ОБ(Счет71_5,Счет79_1);
	УстановитьЗначениеПоказателя("П470_3",П470_3);
	//_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П470_3", "Штрафи, пені, неустойки"", графа ""Доходи""",	"+", "!КО",П470_3, Счет71_5);	
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П470_3", "Показник ""Штрафи, пені, неустойки"", графа ""Доходи""",	"+", "!ОБ",П470_3, Счет71_5, Счет79_1);	
	
	//Витрати                 
	П470_4 = ОБ(Счет79_1,Счет94_8);
	УстановитьЗначениеПоказателя("П470_4",П470_4);
	//_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П470_4", "Штрафи, пені, неустойки"", графа ""Витрати""",	"+", "!ДО",П470_3, Счет94_8);	
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П470_4", "Показник ""Штрафи, пені, неустойки"", графа ""Витрати""",	"+", "!ОБ",П470_3, Счет79_1, Счет94_8);	
	
	//Інші операційні доходи і витрати
  	//Доходи
	П490_3 = 0;
	Пер3 = 0;  
	Стр3 = "Показник ""Інші операційні доходи і витрати"", графа ""Доходи""";
	мСчета = Новый Массив;
	мСчета = ПланыСчетов.Хозрасчетный.Выбрать(Счет71);
	Пока мСчета.Следующий() Цикл
		// Счета исключения
		Если (мСчета.Ссылка = Счет71_2) ИЛИ (мСчета.Ссылка = Счет71_3) ИЛИ  
			 (мСчета.Ссылка = Счет71_4) ИЛИ (мСчета.Ссылка = Счет71_5) ИЛИ
			 (мСчета.Ссылка.ПринадлежитЭлементу(Счет71_2)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет71_5)) ИЛИ
			 (мСчета.Ссылка.ПринадлежитЭлементу(Счет71_3)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет71_4)) Тогда 
			 Продолжить;
		КонецЕсли;
		Пер3 = ОБ(мСчета.Ссылка,Счет79_1);
		П490_3  = П490_3 + Пер3;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П490_3", Стр3, "+", "!ОБ",Пер3, мСчета.Ссылка, Счет79_1);		
		Стр3 = "";
	КонецЦикла;
	УстановитьЗначениеПоказателя("П490_3",П490_3);
	
	//Витрати                 
	П490_4 = 0;
	Пер4 = 0;  
	Стр4 = "Показник ""Інші операційні доходи і витрати"", графа ""Витрати""";
	//у тому числі:
    //відрахування до резерву сумнівних боргів
	мСчета = Новый Массив;
	мСчета = ПланыСчетов.Хозрасчетный.Выбрать(Счет94);
	Пока мСчета.Следующий() Цикл
		// Счета исключения
		Если (мСчета.Ссылка = Счет94_3) ИЛИ (мСчета.Ссылка = Счет94_5) ИЛИ (мСчета.Ссылка = Счет94_8) ИЛИ
			 (мСчета.Ссылка.ПринадлежитЭлементу(Счет94_3)) ИЛИ  
			 (мСчета.Ссылка.ПринадлежитЭлементу(Счет94_5)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет94_8)) Тогда
			Продолжить;
		КонецЕсли;
		Пер4 = ОБ(Счет79_1,мСчета.Ссылка);
		П490_4  = П490_4 + Пер4;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П490_4", Стр4, "+", "!ОБ",Пер4, Счет79_1, мСчета.Ссылка);		
		Стр4 = ""; 
	КонецЦикла;
	УстановитьЗначениеПоказателя("П490_4",П490_4);
	
	//у тому числі:
    //відрахування до резерву сумнівних боргів
	П491_4 = ДО(Счет94_4);
	УстановитьЗначениеПоказателя("П491_4",П491_4);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П491_4", "Показник ""Відрахування до резерву сумнівних боргів"", графа ""Витрати""", "+", "!ДО",П491_4, Счет94_4);		
	
	//у тому числі:
    //непродуктивні витрати і втрати 
	П492_4 = ДО(Счет94_6) + ДО(Счет94_7);
	УстановитьЗначениеПоказателя("П492_4",П492_4);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П492_4", "Показник ""Непродуктивні витрати і втрати"", графа ""Витрати""", "+", "!ДО",ДО(Счет94_6), Счет94_6);		
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П492_4", "", "+", "!ДО",ДО(Счет94_7), Счет94_7);		
	
	//Б_ Доходи і втрати від участі в капіталі за інвестиціями в:
	//асоційовані підприємства
  	//Доходи
	П500_3 = ОБ(Счет72_1, Счет79_2);
	УстановитьЗначениеПоказателя("П500_3",П500_3);
	//_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П500_3", "Доходи і втрати від участі в капіталі за інвестиціями в асоційовані підприємства"", графа ""Доходи""",	"+", "!КО",П500_3, Счет72_1);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П500_3", "Показник ""Доходи і втрати від участі в капіталі за інвестиціями в асоційовані підприємства"", графа ""Доходи""",	"+", "!ОБ",П500_3, Счет72_1, Счет79_2);
	
	//Витрати                 
	П500_4 = ОБ(Счет79_2,Счет96_1);
	УстановитьЗначениеПоказателя("П500_4",П500_4);
	//_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П500_4", "Доходи і втрати від участі в капіталі за інвестиціями в асоційовані підприємства"", графа ""Витрати""",	"+", "!ДО",П500_4, Счет96_1);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П500_4", "Показник ""Доходи і втрати від участі в капіталі за інвестиціями в асоційовані підприємства"", графа ""Витрати""",	"+", "!ОБ",П500_4, Счет79_2, Счет96_1);
	
	//дочірні підприємства
  	//Доходи
	П510_3 = ОБ(Счет72_3, Счет79_2);
	УстановитьЗначениеПоказателя("П510_3",П510_3);
	//_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П510_3", "Доходи і втрати від участі в капіталі за інвестиціями в дочірні підприємства"", графа ""Доходи""",	"+", "!КО",П510_3, Счет72_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П510_3", "Показник ""Доходи і втрати від участі в капіталі за інвестиціями в дочірні підприємства"", графа ""Доходи""",	"+", "!ОБ",П510_3, Счет72_3, Счет79_2);
	
	//Витрати                 
	П510_4 = ОБ(Счет79_2,Счет96_3);
	УстановитьЗначениеПоказателя("П510_4",П510_4);
	//_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П510_4", "Доходи і втрати від участі в капіталі за інвестиціями в дочірні підприємства"", графа ""Витрати""",	"+", "!ДО",П510_4, Счет96_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П510_4", "Показник ""Доходи і втрати від участі в капіталі за інвестиціями в дочірні підприємства"", графа ""Витрати""",	"+", "!ОБ",П510_4, Счет79_2, Счет96_3);
	
	//спільну діяльність 
  	//Доходи
	П520_3 = КО(Счет72_2);
	УстановитьЗначениеПоказателя("П520_3",П520_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П520_3", "Показник ""Доходи і втрати від участі в капіталі за інвестиціями в спільну діяльність"", графа ""Доходи""",	"+", "!КО",П510_3, Счет72_2);
	
	//Витрати                 
	П520_4 = ДО(Счет96_2);
	УстановитьЗначениеПоказателя("П520_4",П520_4);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П520_4", "Показник ""Доходи і втрати від участі в капіталі за інвестиціями в спільну діяльність"", графа ""Витрати""",	"+", "!ДО",П520_4, Счет96_2);
	
	//В_ Інші фінансові доходи і витрати
	//Дивіденди 
	П530_3 = ОБ(Счет73_1,Счет79_2);
	УстановитьЗначениеПоказателя("П530_3",П530_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П530_3", "Показник ""Інші фінансові доходи і витрати: Дивіденди"", графа ""Доходи""",	"+", "!ОБ",П530_3, Счет73_1, Счет79_2);
	
	//Проценти 
	П540_4 = КО(Счет95_1);
	УстановитьЗначениеПоказателя("П540_4",П540_4);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П540_4", "Показник ""Інші фінансові доходи і витрати: Проценти"", графа ""Витрати""",	"+", "!КО",П540_4, Счет95_1);
	
	//Інші фінансові доходи і витрати
	//Доходи
	П560_3 = ОБ(Счет73_2,Счет79_2) + ОБ(Счет73_3,Счет79_2);
	УстановитьЗначениеПоказателя("П560_3",П560_3);
	//_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П560_3", "Інші фінансові доходи і витрати"", графа ""Доходи""",	"+", "!КО",КО(Счет73), Счет73);
	//_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П560_3", "",	"-", "!КО",П530_3, Счет73_1);
	//_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П560_3", "",	"-", "!КО",КО(Счет73_2), Счет73_2);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П560_3", "Показник ""Інші фінансові доходи і витрати"", графа ""Доходи""",	"+", "!ОБ",ОБ(Счет73_2,Счет79_2), Счет73_2,Счет79_2);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П560_3", "",	"-", "!ОБ",ОБ(Счет73_3,Счет79_2), Счет73_3,Счет79_2);;
	
	//Витрати  
	П560_4 = КО(Счет95) - П540_4;  
	УстановитьЗначениеПоказателя("П560_4",П560_4);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П560_4", "Інші фінансові доходи і витрати"", графа ""Витрати""",	"+", "!КО",КО(Счет95), Счет95);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П560_4", "",	"-", "!ДО",П540_4, Счет95_1);

    //Г_ Інші доходи і витрати
	//Реалізація фінансових інвестицій 
	//Доходи
	П570_3 = ОБ(Счет74_1,Счет79_3);
	УстановитьЗначениеПоказателя("П570_3",П570_3);
	//_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П570_3", "Реалізація фінансових інвестицій"", графа ""Доходи""",	"+", "!КО",П570_3, Счет74_1);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П570_3", "Показник ""Реалізація фінансових інвестицій"", графа ""Доходи""",	"+", "!ОБ",П570_3, Счет74_1, Счет79_3);
	
    //Витрати  
	П570_4 = ОБ(Счет79_3,Счет97_1);   
	УстановитьЗначениеПоказателя("П570_4",П570_4);
	//_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П570_4", "Реалізація фінансових інвестицій"", графа ""Витрати""",	"+", "!ДО",П570_4, Счет97_1);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П570_4", "Показник ""Реалізація фінансових інвестицій"", графа ""Витрати""",	"+", "!ОБ",П570_4, Счет79_3, Счет97_1);
	
	//Реалізація майнових комплексів
	//Доходи
	П590_3 = ОБ(Счет74_2, Счет79_1) + ОБ(Счет74_6, Счет79_1);
	УстановитьЗначениеПоказателя("П590_3",П590_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П590_3", "Показник ""Результат оцінки корисності"", графа ""Доходи""",	"+", "!ОБ",ОБ(Счет74_2, Счет79_1), Счет74_2, Счет79_1);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П590_3", "",	"+", "!ОБ",ОБ(Счет74_6, Счет79_1), Счет74_6, Счет79_1);
	
    //Витрати  
	П590_4 = ОБ(Счет79_1,Счет97_2) + ОБ(Счет79_1,Счет97_7); 
	УстановитьЗначениеПоказателя("П590_4",П590_4);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П590_4", "Показник ""Результат оцінки корисності"", графа ""Витрати""",	"+", "!ОБ",ОБ(Счет79_1,Счет97_2),Счет79_1, Счет97_2);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П590_4", "",	"+", "!ОБ",ОБ(Счет79_1,Счет97_7),Счет79_1, Счет97_7);
	
	//Неопераційна курсова різниця 
    //Доходи
	П600_3 = ОБ(Счет74_4,Счет79_3);
	УстановитьЗначениеПоказателя("П600_3",П600_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П600_3", "Показник ""Неопераційна курсова різниця"", графа ""Доходи""",	"+", "!ОБ",П600_3, Счет74_4,Счет79_3);
	
    //Витрати  
	П600_4 = ОБ(Счет79_3,Счет97_4);  
	УстановитьЗначениеПоказателя("П600_4",П600_4);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П600_4", "Показник ""Неопераційна курсова різниця"", графа ""Витрати""",	"+", "!ОБ",П600_4, Счет79_3,Счет97_4);
	
	//Безоплатно одержані активи  
    //Доходи
	П610_3 = ОБ(Счет74_5,Счет79_3);
	УстановитьЗначениеПоказателя("П610_3",П610_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П610_3", "Показник ""Безоплатно одержані активи"", графа ""Доходи""",	"+", "!ОБ",П610_3, Счет74_5,Счет79_3);
	
	//Списання необоротних активів
    //Витрати  
	П620_4 = ОБ(Счет79_3,Счет97_6); 
	УстановитьЗначениеПоказателя("П620_4",П620_4);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П620_4", "Показник ""Списання необоротних активів"", графа ""Витрати""",	"+", "!ОБ",П620_4, Счет79_3,Счет97_6);
	
	//Інші доходи і витрати
    //Доходи
	П630_3 = 0;
	Пер3 = 0;  
	Стр3 = "Показник ""Інші доходи і витрати"", графа ""Доходи""";
	мСчета = Новый Массив;
	мСчета = ПланыСчетов.Хозрасчетный.Выбрать(Счет74);
	Пока мСчета.Следующий() Цикл
		// Счета исключения
		Если (мСчета.Ссылка = Счет74_1) ИЛИ (мСчета.Ссылка = Счет74_2) ИЛИ   
			 (мСчета.Ссылка = Счет74_4) ИЛИ (мСчета.Ссылка = Счет74_5) ИЛИ 
			 (мСчета.Ссылка.ПринадлежитЭлементу(Счет74_1)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет74_2)) ИЛИ 
			 (мСчета.Ссылка.ПринадлежитЭлементу(Счет74_4)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет74_5)) Тогда
			 Продолжить;
		КонецЕсли;
		Пер3 = ОБ(мСчета.Ссылка,Счет79_3);
		П630_3  = П630_3 + Пер3;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П630_3", Стр3, "+", "!ОБ",Пер3, мСчета.Ссылка,Счет79_3);		
		Стр3 = "";
	КонецЦикла;
	УстановитьЗначениеПоказателя("П630_3",П630_3);
	
    //Витрати  
	П630_4 = 0;
	Пер4 = 0;  
	Стр4 = "Показник ""Інші доходи і витрати"", графа ""Витрати""";
	мСчета = Новый Массив;
	мСчета = ПланыСчетов.Хозрасчетный.Выбрать(Счет97);
	Пока мСчета.Следующий() Цикл
		// Счета исключения
		Если (мСчета.Ссылка = Счет97_1) ИЛИ (мСчета.Ссылка = Счет97_2) ИЛИ   
			 (мСчета.Ссылка = Счет97_4) ИЛИ (мСчета.Ссылка = Счет97_6) ИЛИ
			 (мСчета.Ссылка.ПринадлежитЭлементу(Счет97_1)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет97_2)) ИЛИ 
			 (мСчета.Ссылка.ПринадлежитЭлементу(Счет97_4)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет97_6)) Тогда
			 Продолжить;
		КонецЕсли;
		Пер4 = ОБ(Счет79_3,мСчета.Ссылка);
		П630_4  = П630_4 + Пер4;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П630_4", Стр4, "+", "!ОБ",Пер4,Счет79_3, мСчета.Ссылка);		
		Стр4 = "";
	КонецЦикла;
	УстановитьЗначениеПоказателя("П630_4",П630_4);
	
    //VI_ Грошові кошти
	//Каса
	П640_3 = СКД(Счет30);
	УстановитьЗначениеПоказателя("П640_3",П640_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П640_3", "Показник ""Грошові кошти: Каса"", графа ""На кінець року""",	"+", "!СКД",П640_3, Счет30);
	
	//Поточний рахунок банку
	П650_3_1 = СКД(Счет31_1);
	П650_3_2 = СКД(Счет31_2);
	П650_3 = П650_3_1 + П650_3_2; 
	УстановитьЗначениеПоказателя("П650_3",П650_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П650_3", "Показник ""Грошові кошти: Поточний рахунок банку"", графа ""На кінець року""",	"+", "!СКД",П650_3_1, Счет31_1);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П650_3", "",	"+", "!СКД",П650_3_2, Счет31_2);
	
	//Інші рахунки в банку (акредитиви, чекові книжки)   
	П660_3 = СКД(Счет31) - П650_3_1 - П650_3_2; 
	УстановитьЗначениеПоказателя("П660_3",П660_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П660_3", "Показник ""Грошові кошти: Інші рахунки в банку (акредитиви, чекові книжки)"", графа ""На кінець року""",	"+", "!СКД",СКД(Счет31), Счет31);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П660_3", "",	"-", "!СКД",П650_3_1, Счет31_1);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П660_3", "",	"-", "!СКД",П650_3_2, Счет31_2);
	
	//Грошові кошти в дорозі
	П670_3 = СКД(Счет33) - СКД(Счет33_1) - СКД(Счет33_2);  
	УстановитьЗначениеПоказателя("П670_3",П670_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П670_3", "Показник ""Грошові кошти: Грошові кошти в дорозі"", графа ""На кінець року""",	"+", "!СКД",СКД(Счет33), Счет33);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П670_3", "",	"-", "!СКД",СКД(Счет33_1), Счет33_1);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П670_3", "",	"-", "!СКД",СКД(Счет33_2), Счет33_2);
	
	//Еквіваленти грошових коштів
	П680_3 = СКД(Счет35_1);  
	УстановитьЗначениеПоказателя("П680_3",П680_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П680_3", "Показник ""Грошові кошти: Еквіваленти грошових коштів"", графа ""На кінець року""",	"+", "!СКД",П680_3, Счет35_1);
    
	//VII_ Забезпечення
	//Залишок забезпечення на початок року
	//Забезпечення на виплату відпусток працівникам
	П710_3 = СНК(Счет47_1);
	УстановитьЗначениеПоказателя("П710_3",П710_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П710_3", "Показник ""Забезпечення на виплату відпусток працівникам"", графа ""Залишок забезпечення на початок року""",	"+", "!СНК",П710_3, Счет47_1);
	
	//Забезпечення наступних витрат на додаткове пенсійне забезпечення
	П720_3 = СНК(Счет47_2);
	УстановитьЗначениеПоказателя("П720_3",П720_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П720_3", "Показник ""Забезпечення наступних витрат на додаткове пенсійне забезпечення"", графа ""Залишок забезпечення на початок року""",	"+", "!СНК",П720_3, Счет47_2);
	
	//Забезпечення наступних витрат на виконання гарантійних зобов'язань
	П730_3 = СНК(Счет47_3);
	УстановитьЗначениеПоказателя("П730_3",П730_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П730_3", "Показник ""Забезпечення наступних витрат на виконання гарантійних зобов'язань"", графа ""Залишок забезпечення на початок року""",	"+", "!СНК",П730_3, Счет47_3);
	
	//Забезпечення наступних витрат на виконання зобов'язань щодо обтяжливих контрактів
    П750_3 = 0; 
	УстановитьЗначениеПоказателя("П750_3",П750_3);
	
	//Резерв сумнівних боргів на початок року
	П775_3 = СНК(Счет38); 
	УстановитьЗначениеПоказателя("П775_3",П775_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П775_3", "Показник ""Резерв сумнівних боргів на початок року""",	"+", "!СНК",П775_3, Счет38);
	
	//Резерв сумнівних боргів Збільшення за звітний рік
	П775_4 = П491_4; 
	УстановитьЗначениеПоказателя("П775_4",П775_4);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П775_4", "Показник ""Резерв сумнівних боргів (збільшення за звітний рік)""",	"+", "!ОБ",П775_4, Счет94_4,Счет38);
	
	//Резерв сумнівних боргів на кінець року
	П775_9 = СКК(Счет38);
	УстановитьЗначениеПоказателя("П775_9",П775_9);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П775_9", "Показник ""Резерв сумнівних боргів на кінець року""",	"+", "!СКК",П775_9, Счет38);
	
	//нараховано (створено)
	//Забезпечення на виплату відпусток працівникам
	П710_4 = КО(Счет47_1);
	УстановитьЗначениеПоказателя("П710_4",П710_4);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П710_4", "Показник ""Забезпечення на виплату відпусток працівникам"", графа ""нараховано (створено)""",	"+", "!КО",П710_4, Счет47_1);
	
	//Забезпечення наступних витрат на додаткове пенсійне забезпечення
	П720_4 = КО(Счет47_2);
	УстановитьЗначениеПоказателя("П720_4",П720_4);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П720_4", "Показник ""Забезпечення наступних витрат на додаткове пенсійне забезпечення"", графа ""нараховано (створено)""",	"+", "!КО",П720_4, Счет47_2);
	
	//Забезпечення наступних витрат на виконання гарантійних зобов'язань
	П730_4 = КО(Счет47_3);
	УстановитьЗначениеПоказателя("П730_4",П730_4);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П730_4", "Показник ""Забезпечення наступних витрат на виконання гарантійних зобов'язань"", графа ""нараховано (створено)""",	"+", "!КО",П730_4, Счет47_3);
	
	//використано
	//Забезпечення на виплату відпусток працівникам
	П710_6 = ДО(Счет47_1);
	УстановитьЗначениеПоказателя("П710_6",П710_6);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П710_6", "Показник ""Забезпечення на виплату відпусток працівникам"", графа ""використано""",	"+", "!ДО",П710_6, Счет47_1);
	
	
	//Забезпечення наступних витрат на додаткове пенсійне забезпечення
	П720_6 = ДО(Счет47_2);
	УстановитьЗначениеПоказателя("П720_6",П720_6);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П720_6", "Показник ""Забезпечення наступних витрат на додаткове пенсійне забезпечення"", графа ""використано""",	"+", "!ДО",П720_6, Счет47_2);
	
	//Забезпечення наступних витрат на виконання гарантійних зобов'язань
	П730_6 = ДО(Счет47_3);
	УстановитьЗначениеПоказателя("П730_6",П730_6);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П730_6", "Показник ""Забезпечення наступних витрат на виконання гарантійних зобов'язань"", графа ""використано""",	"+", "!ДО",П730_6, Счет47_3);
	
	//залишок на кінець року
	//Забезпечення на виплату відпусток працівникам
	П710_8 = СКК(Счет47_1);
	УстановитьЗначениеПоказателя("П710_8",П710_8);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П710_8", "Показник ""Забезпечення на виплату відпусток працівникам"", графа ""залишок на кінець року""",	"+", "!СКК",П710_8, Счет47_1);
	
	//Забезпечення наступних витрат на додаткове пенсійне забезпечення
	П720_8 = СКК(Счет47_2);
	УстановитьЗначениеПоказателя("П720_8",П720_8);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П720_8", "Показник ""Забезпечення наступних витрат на додаткове пенсійне забезпечення"", графа ""залишок на кінець року""",	"+", "!СКК",П720_8, Счет47_2);
	
	//Забезпечення наступних витрат на виконання гарантійних зобов'язань
	П730_8 = СКК(Счет47_3);
	УстановитьЗначениеПоказателя("П730_8",П730_8);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П730_8", "Показник ""Забезпечення наступних витрат на виконання гарантійних зобов'язань"", графа ""залишок на кінець року""",	"+", "!СКК",П730_8, Счет47_3);
	
	//Забезпечення наступних витрат на реструктуризацію
	//Забезпечення наступних витрат на реструктуризацію
 	П740_3 = 0; П740_4 = 0;
 	П740_6 = 0; П740_8 = 0;
	Пер3 = 0;  Пер4 = 0;
	Пер6 = 0;  Пер8 = 0;
	Стр3 = "Показник ""Забезпечення наступних витрат на реструктуризацію"", графа ""Залишок забезпечення на початок року""";
	Стр4 = "Показник ""Забезпечення наступних витрат на реструктуризацію"", графа ""нараховано (створено)""";
	Стр6 = "Показник ""Забезпечення наступних витрат на реструктуризацію"", графа ""використано""";
	Стр8 = "Показник ""Забезпечення наступних витрат на реструктуризацію"", графа ""залишок на кінець року""";
	мСчета = Новый Массив;
	мСчета = ПланыСчетов.Хозрасчетный.Выбрать(Счет47);
	Пока мСчета.Следующий() Цикл
		// Счета исключения
		Если (мСчета.Ссылка = Счет47_1) ИЛИ (мСчета.Ссылка = Счет47_2) ИЛИ (мСчета.Ссылка = Счет47_3) ИЛИ  
			 (мСчета.Ссылка = Счет47_5) ИЛИ (мСчета.Ссылка = Счет47_6) ИЛИ (мСчета.Ссылка = Счет47_7) ИЛИ 
			 (мСчета.Ссылка = Счет47_8) ИЛИ
			 (мСчета.Ссылка.ПринадлежитЭлементу(Счет47_1)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет47_2)) ИЛИ 
			 (мСчета.Ссылка.ПринадлежитЭлементу(Счет47_3)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет47_7)) ИЛИ 
			 (мСчета.Ссылка.ПринадлежитЭлементу(Счет47_8)) ИЛИ  
			 (мСчета.Ссылка.ПринадлежитЭлементу(Счет47_5)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет47_6)) Тогда
			Продолжить;
		КонецЕсли;
		Пер3 = СНК(мСчета.Ссылка);
		П740_3  = П740_3 + Пер3;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П740_3", Стр3,	"+", "!СНК",Пер3, мСчета.Ссылка);
		Пер4 = КО(мСчета.Ссылка);
		П740_4  = П740_4 + Пер4;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П740_4", Стр4,	"+", "!КО",Пер4, мСчета.Ссылка);
		Пер6 = ДО(мСчета.Ссылка);
		П740_6  = П740_6 + Пер6;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П740_6", Стр6,	"+", "!ДО",Пер6, мСчета.Ссылка);
		Пер8 = СКК(мСчета.Ссылка);
		П740_8  = П740_8 + Пер8;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П740_8", Стр8,	"+", "!СКК",Пер8, мСчета.Ссылка);
		Стр3 = "";  Стр4 = "";
		Стр6 = "";  Стр8 = "";
	КонецЦикла;
	УстановитьЗначениеПоказателя("П740_3",П740_3);
	УстановитьЗначениеПоказателя("П740_4",П740_4);
	УстановитьЗначениеПоказателя("П740_6",П740_6);
	УстановитьЗначениеПоказателя("П740_8",П740_8);
	
	 //VIII. Запаси
	//Балансова вартість на кінець року
	//Сировина і матеріали
	П800_3 = 0;
	Пер3 = 0;  
	Стр3 = "Сировина і матеріали"", графа ""Балансова вартість на кінець року""";
	мСчета = Новый Массив;
	мСчета = ПланыСчетов.Хозрасчетный.Выбрать(Счет20);
	Пока мСчета.Следующий() Цикл
		// Счета исключения
		Если (мСчета.Ссылка = Счет20_0) ИЛИ (мСчета.Ссылка = Счет20_2) ИЛИ (мСчета.Ссылка = Счет20_3) ИЛИ  
			 (мСчета.Ссылка = Счет20_4) ИЛИ (мСчета.Ссылка = Счет20_5) ИЛИ (мСчета.Ссылка = Счет20_6) ИЛИ
			 (мСчета.Ссылка = Счет20_7) ИЛИ (мСчета.Ссылка = Счет20_8) ИЛИ 
			 (мСчета.Ссылка.ПринадлежитЭлементу(Счет20_0)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет20_2)) ИЛИ 
			 (мСчета.Ссылка.ПринадлежитЭлементу(Счет20_3)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет20_4)) ИЛИ 
			 (мСчета.Ссылка.ПринадлежитЭлементу(Счет20_7)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет20_8)) ИЛИ 
			 (мСчета.Ссылка.ПринадлежитЭлементу(Счет20_5)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет20_6)) Тогда
			 Продолжить;
		КонецЕсли;
		Пер3 = СКД(мСчета.Ссылка);
		П800_3  = П800_3 + Пер3;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П800_3", Стр3, "+", "!СКД",Пер3, мСчета.Ссылка);		
		Стр3 = "";
	КонецЦикла;
	УстановитьЗначениеПоказателя("П800_3",П800_3);
	
	//Купівельні напівфабрикати та комплектуючі вироби
	П810_3 = СКД(Счет20_2);
	УстановитьЗначениеПоказателя("П810_3",П810_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П810_3", "Купівельні напівфабрикати та комплектуючі вироби"", графа ""Балансова вартість на кінець року""",	"+", "!СКД",П810_3, Счет20_2);
	
	//Паливо
	П820_3 = СКД(Счет20_3);
	УстановитьЗначениеПоказателя("П820_3",П820_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П820_3", "Показник ""Паливо"", графа ""Балансова вартість на кінець року""",	"+", "!СКД",П820_3, Счет20_3);
	
	//Тара і тарні матеріали
	П830_3 = СКД(Счет20_4);
	УстановитьЗначениеПоказателя("П830_3",П830_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П830_3", "Показник ""Тара і тарні матеріали"", графа ""Балансова вартість на кінець року""",	"+", "!СКД",П830_3, Счет20_4);
	
	//Будівельні матеріали
	П840_3 = СКД(Счет20_5);
	УстановитьЗначениеПоказателя("П840_3",П840_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П840_3", "Показник ""Будівельні матеріали"", графа ""Балансова вартість на кінець року""",	"+", "!СКД",П840_3, Счет20_5);
	
	//Запасні частини
	П850_3 = СКД(Счет20_7);
	УстановитьЗначениеПоказателя("П850_3",П850_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П850_3", "Показник ""Запасні частини"", графа ""Балансова вартість на кінець року""",	"+", "!СКД",П850_3, Счет20_7);
	
	//Матеріали сільськогосподарського призначення
	П860_3 = СКД(Счет20_8);
	УстановитьЗначениеПоказателя("П860_3",П860_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П860_3", "Показник ""Матеріали сільськогосподарського призначення"", графа ""Балансова вартість на кінець року""",	"+", "!СКД",П860_3, Счет20_8);
	
	//Поточні біологічні активи
	П870_3 = СКД(Счет21);
	УстановитьЗначениеПоказателя("П870_3",П870_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П870_3", "Показник ""Поточні біологічні активи"", графа ""Балансова вартість на кінець року""",	"+", "!СКД",П870_3, Счет21);
	
	//Малоцінні та швидкозношувані предмети
	П880_3 = СКД(Счет22);
	УстановитьЗначениеПоказателя("П880_3",П880_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П880_3", "Показник ""Малоцінні та швидкозношувані предмети"", графа ""Балансова вартість на кінець року""",	"+", "!СКД",П880_3, Счет22);
	
	//Незавершене виробництво
	П890_3 = СКД(Счет23) + СКД(Счет25);
	УстановитьЗначениеПоказателя("П890_3",П890_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П890_3", "Показник ""Незавершене виробництво"", графа ""Балансова вартість на кінець року""",	"+", "!СКД",СКД(Счет23), Счет23);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П890_3", "",	"+", "!СКД",СКД(Счет25), Счет25);
	
	//Готова продукція
	П900_3 = СКД(Счет26) + СКД(Счет27);
	УстановитьЗначениеПоказателя("П900_3",П900_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П900_3", "Показник ""Готова продукція"", графа ""Балансова вартість на кінець року""",	"+", "!СКД",СКД(Счет26), Счет26);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П900_3", "",	"+", "!СКД",СКД(Счет27), Счет27);
	
	//Товари
	П910_3 = СКД(Счет28);
	УстановитьЗначениеПоказателя("П910_3",П910_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П910_3", "Показник ""Товари"", графа ""Товари""",	"+", "!СКД",П910_3, Счет28);
	
	//з рядка  920 рядка 3 запаси передані в переробку
    П922 = СКД(Счет20_6);
	УстановитьЗначениеПоказателя("П922",П922);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П922", "Показник ""Запаси передані в переробку""",	"+", "!СКД",П922, Счет20_6);
	
	//з рядка  920 рядка 3 запаси передані на комісію
    П924 = СКД(Счет28_3);
	УстановитьЗначениеПоказателя("П922",П922);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П924", "запаси передані на комісію""",	"+", "!СКД",П924, Счет28_3);
	
	//з рядка  920 рядка 3 активи на відповідальному збріганні
    П925 = СКД(Счет02);
	УстановитьЗначениеПоказателя("П925",П925);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П925", "Показник ""Активи на відповідальному збріганні""",	"+", "!СКД",П925, Счет02);
	
 	Если НЕ (РезБаланс = Неопределено)  Тогда
		
		ЗаполнитьПоказательПоДаннымФинОтчетности("926", "", "Б", РезБаланс, "1200", "4");
		
		ЗаполнитьПоказательПоДаннымФинОтчетности("940_", "3", "Б", РезБаланс, "1125", "4");
		
		//Інша поточна дебіторська заборгованість          
		ЗаполнитьПоказательПоДаннымФинОтчетности("950_", "3", "Б", РезБаланс, "1155", "4");
	Иначе
		УстановитьЗначениеПоказателя("П926",0);
		УстановитьЗначениеПоказателя("П940_3",0);
		УстановитьЗначениеПоказателя("П950_3",0);
	КонецЕсли;
	//IX. Дебіторська заборгованість
	//Всього на кінець року
	//Дебіторська заборгованість за товари, роботи, послуги

   //Поточний податок на прибуток
	П1210_3 = КО(Счет64_13);
	УстановитьЗначениеПоказателя("П1210_3",П1210_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П1210_3", "Показник ""Поточний податок на прибуток""",	"+", "!КО",П1210_3, Счет64_13);
	
	//Відстрочені податкові активи: 
	//на початок звітного року
	П1220_3 = СНД(Счет17); 
	УстановитьЗначениеПоказателя("П1220_3",П1220_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П1220_3", "Показник ""Відстрочені податкові активи: на початок звітного року""",	"+", "!СНД",П1220_3, Счет17);
	
	//на кінець звітного року 
	П1225_3 = СКД(Счет17);   
	УстановитьЗначениеПоказателя("П1225_3",П1225_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П1225_3", "Показник ""Відстрочені податкові активи: на кінець звітного року""",	"+", "!СКД",П1225_3, Счет17);
	
	//Відстрочені податкові зобов'язання:
	//на початок звітного року  
	П1230_3 = СНК(Счет54); 
	УстановитьЗначениеПоказателя("П1230_3",П1230_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П1230_3", "Показник ""Відстрочені податкові зобов'язання: на початок звітного року""",	"+", "!СНК",П1230_3, Счет54);
	         
	//на кінець звітного року 
	П1235_3 =  СКК(Счет54); 
	УстановитьЗначениеПоказателя("П1235_3",П1235_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П1235_3", "Показник ""Відстрочені податкові зобов'язання: на кінець звітного року""",	"+", "!СКК",П1235_3, Счет54);
	
   Если НЕ (РезФинРез = Неопределено)  Тогда
	   ЗаполнитьПоказательПоДаннымФинОтчетности("1240_", "3", "Ф", РезФинРез, "2300", "3");
   Иначе
	   УстановитьЗначениеПоказателя("П1240_3",0);
   КонецЕсли; 	
	
	//поточний податок на прибуток
	П1241_3 = КО(Счет64_13); 
	УстановитьЗначениеПоказателя("П1241_3",П1241_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П1241_3", "Показник ""Поточний податок на прибуток""",	"+", "!КО",П1241_3, Счет64_13);
	
	//зменшення (збільшення) відстрочених податкових активів
	П1242_3_1 = ОБ(Cчет98,Счет17);
	П1242_3_2 = ОБ(Счет54,Счет17);
	П1242_3_3 = ОБ(Счет17,Счет64_13);
	П1242_3_4 = ОБ(Счет17,Счет54); 
	П1242_3   = ( П1242_3_1+ П1242_3_2 )  - (П1242_3_3 + П1242_3_4);   
	УстановитьЗначениеПоказателя("П1242_3",П1242_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П1242_3", "Показник ""Зменшення (збільшення) відстрочених податкових активів""",	"+", "!ОБ",П1242_3_1, Cчет98,Счет17);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П1242_3", "",	"+", "!ОБ",П1242_3_2, Счет54,Счет17);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П1242_3", "",	"-", "!ОБ",П1242_3_3, Счет17,Счет64_13);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П1242_3", "",	"-", "!ОБ",П1242_3_4, Счет17,Счет54);
	
		
	//збільшення (зменшення) відстрочених податкових зобов'язань
	П1243_3_1 = ОБ(Cчет98,Счет54);
	П1243_3_3 = ОБ(Счет54,Счет64_13);
	П1243_3   = (П1243_3_1 + П1242_3_4) - (П1243_3_3 + П1242_3_2);   
	УстановитьЗначениеПоказателя("П1243_3",П1243_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П1243_3", "Показник ""Збільшення (зменшення) відстрочених податкових зобов'язань",	"+", "!ОБ",П1243_3_1, Cчет98,Счет54);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П1243_3", "",	"+", "!ОБ",П1242_3_4, Счет17,Счет54);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П1243_3", "",	"-", "!ОБ",П1243_3_3, Счет54,Счет64_13);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П1243_3", "",	"-", "!ОБ",П1242_3_2, Счет54,Счет17);
	
	//Нараховано за звітний рік (амортизації)
	П1300_3 = КО(Счет13); 
	УстановитьЗначениеПоказателя("П1300_3",П1300_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П1300_3", "Показник ""Нараховано за звітний рік (амортизації)",	"+", "!КО",П1300_3, Счет13);
	
	// будівництво об'єктів
	П1311_3 = ОБ(Счет15_1,Счет13); 
	УстановитьЗначениеПоказателя("П1311_3",П1311_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П1311_3", "Показник ""Будівництво об'єктів",	"+", "!ОБ",П1311_3, Счет15_1,Счет13);
	
	//придбання (виготовлення) та поліпшення основних засобів 
	П1312_3 = ОБ(Счет15_2,Счет13);
	УстановитьЗначениеПоказателя("П1312_3",П1312_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П1312_3", "Показник ""Придбання (виготовлення) та поліпшення основних засобів",	"+", "!ОБ",П1312_3, Счет15_2,Счет13);
	
	//придбання (створення) нематеріальних активів 
	П1314_3 = ОБ(Счет15_4,Счет13);
	УстановитьЗначениеПоказателя("П1314_3",П1314_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П1314_3", "Показник ""Придбання (створення) нематеріальних активів",	"+", "!ОБ",П1314_3, Счет15_4,Счет13);

	СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
	
	Расчет(ЭтаФорма);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
//Процедура заполняет ячейки первого и второго разделов отчета по полученным таблицам 
//с результатами выполнения запросов по ОСам и НМА
Процедура ОбработатьТаблицуРезультатов(ТаблицаРезультатов, ФлагОС)
	Перем СтрИменЯчеек;
	Если ФлагОС = 0 Тогда
		СтрИменЯчеек = "П100_4, П100_5, П100_8, П100_9, П100_10, П100_12, П100_15, " +
					"П105_4, П105_5, П105_8, П105_9, П105_10, П105_12, П105_15, " +
					"П110_4, П110_5, П110_8, П110_9, П110_10, П110_12, П110_15, " +
					"П120_4, П120_5, П120_8, П120_9, П120_10, П120_12, П120_15, " +
					"П130_4, П130_5, П130_8, П130_9, П130_10, П130_12, П130_15, " + 
					"П140_4, П140_5, П140_8, П140_9, П140_10, П140_12, П140_15, " +
					"П150_4, П150_5, П150_8, П150_9, П150_10, П150_12, П150_15, " +
					"П160_4, П160_5, П160_8, П160_9, П160_10, П160_12, П160_15, " +
					"П170_4, П170_5, П170_8, П170_9, П170_10, П170_12, П170_15, " +
					"П180_4, П180_5, П180_8, П180_9, П180_10, П180_12, П180_15, " +
					"П190_4, П190_5, П190_8, П190_9, П190_10, П190_12, П190_15, " +
					"П200_4, П200_5, П200_8, П200_9, П200_10, П200_12, П200_15, " +
					"П210_4, П210_5, П210_8, П210_9, П210_10, П210_12, П210_15, " +
					"П220_4, П220_5, П220_8, П220_9, П220_10, П220_12, П220_15, " +
					"П230_4, П230_5, П230_8, П230_9, П230_10, П230_12, П230_15, " +
					"П240_4, П240_5, П240_8, П240_9, П240_10, П240_12, П240_15, " +
					"П250_4, П250_5, П250_8, П250_9, П250_10, П250_12, П250_15";
	Иначе
		СтрИменЯчеек =  "П010_4, П010_5, П010_8, П010_9, П010_10, П010_12, П010_15, " +
					"П020_4, П020_5, П020_8, П020_9, П020_10, П020_12, П020_15, " +
					"П030_4, П030_5, П030_8, П030_9, П030_10, П030_12, П030_15, " +
					"П040_4, П040_5, П040_8, П040_9, П040_10, П040_12, П040_15, " +
					"П050_4, П050_5, П050_8, П050_9, П050_10, П050_12, П050_15, " +
					"П070_4, П070_5, П070_8, П070_9, П070_10, П070_12, П070_15, ";  
	КонецЕсли;				
					
	СтруктураЯчеек = Новый Структура(СтрИменЯчеек);
	Для каждого ИмяЯчейки Из СтруктураЯчеек Цикл
			СтруктураЯчеек.Вставить(ИмяЯчейки.Ключ, 0);		
	КонецЦикла; 
	Если ТаблицаРезультатов.Количество() <> 0 Тогда
		Для каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
			СчетОбъекта =  СтрокаТаблицы.СчетУчета;
			Если НЕ ЗначениеЗаполнено(СчетОбъекта) Тогда
				Продолжить;
			КонецЕсли;	
			//износ на начало года
			ДобавитьВЯчейку(СтруктураЯчеек, СчетОбъекта,4,СтрокаТаблицы.АмортизацияНачальныйОстаток );
			//износ на конец года
			ДобавитьВЯчейку(СтруктураЯчеек, СчетОбъекта,15,СтрокаТаблицы.АмортизацияКонечныйОстаток);
			//начислено амортизации
			ДобавитьВЯчейку(СтруктураЯчеек, СчетОбъекта,10,СтрокаТаблицы.АмортизацияОборот);
			//поступило
			Если (СтрокаТаблицы.ИзменениеСтоимостиДт <> 0) Тогда
				ДобавитьВЯчейку(СтруктураЯчеек, СчетОбъекта,5,СтрокаТаблицы.ИзменениеСтоимостиДт);
			КонецЕсли;
			//выбыло
			Если (СтрокаТаблицы.СтоимостьКонечныйОстаток = 0) Тогда
				ДобавитьВЯчейку(СтруктураЯчеек, СчетОбъекта,8,СтрокаТаблицы.ИзменениеСтоимостиКт);
				ДобавитьВЯчейку(СтруктураЯчеек, СчетОбъекта,9,СтрокаТаблицы.АмортизацияОборотДт);
			ИначеЕсли СтрокаТаблицы.СтоимостьКонечныйОстаток - СтрокаТаблицы.СтоимостьНачальныйОстаток - СтрокаТаблицы.ИзменениеСтоимостиДт > 0 Тогда
				ДобавитьВЯчейку(СтруктураЯчеек, СчетОбъекта,12,СтрокаТаблицы.ИзменениеСтоимостиДт - СтрокаТаблицы.ИзменениеСтоимостиКт);
			КонецЕсли;
		КонецЦикла; 
		Для каждого ИмяЯчейки Из СтруктураЯчеек Цикл
			Если ИмяЯчейки.Значение = Неопределено Тогда 
				УстановитьЗначениеПоказателя(ИмяЯчейки.Ключ, 0);		
			Иначе
				Сумма = ИмяЯчейки.Значение;
				УстановитьЗначениеПоказателя(ИмяЯчейки.Ключ, Сумма);		
			КонецЕсли;
			
		КонецЦикла; 
		СтруктураЯчеек.Очистить();
	КонецЕсли; 

КонецПроцедуры

&НаСервере
//Процедура выполняет расчет показателя первичной стоимости ОС на консервации
Процедура  РасчетПервичнойСтоимостиОсНаКонсервацииБУ();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр ("мДатаКонцаПериодаОтчета", Новый Граница(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, ВидГраницы.Включая));
	Запрос.УстановитьПараметр ("Организация",СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр ("СубконтоОС"    , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Запрос.УстановитьПараметр ("НеНачислять",ЛОЖЬ);
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЕстьNULL(СУММА(ЕСТЬNULL(СтоимостьОстатки.СуммаОстатокДт, 0) - ЕСТЬNULL(АмортизацияОстатки.СуммаОстатокКт, 0)), 0) КАК КонОстаток
	               |ИЗ
	               |	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(&мДатаКонцаПериодаОтчета, Организация = &Организация) КАК НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	               |				&мДатаКонцаПериодаОтчета,
	               |				Счет В
	               |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |						СчетаБУ.СчетУчета
	               |					ИЗ
	               |						РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&мДатаКонцаПериодаОтчета, Организация = &Организация) КАК СчетаБУ),
	               |				&СубконтоОС,
	               |				Организация = &Организация) КАК СтоимостьОстатки
	               |		ПО НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СтоимостьОстатки.Субконто1
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	               |				&мДатаКонцаПериодаОтчета,
	               |				Счет В
	               |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |						СчетаБУ.СчетНачисленияАмортизации
	               |					ИЗ
	               |						РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&мДатаКонцаПериодаОтчета, Организация = &Организация) КАК СчетаБУ),
	               |				&СубконтоОС,
	               |				Организация = &Организация) КАК АмортизацияОстатки
	               |		ПО НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = АмортизацияОстатки.Субконто1
	               |ГДЕ
	               |	НЕ НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию";
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		УстановитьЗначениеПоказателя("П263", Выборка.КонОстаток);
	Иначе
		УстановитьЗначениеПоказателя("П263", 0);
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
//Процедура выполняет расчет показателя первичной стоимости полностью амортизированных ОС для Бух
Процедура  РасчетПервичнойСтоимостиПолностьюАмортОСБУ();
  	// Бухгалтерский итоги по счетам в разрезе Субконто1
	мБухИтогиАм = Обработки.БухгалтерскиеИтоги.Создать();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр ("мДатаКонцаПериодаОтчета", Новый Граница(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, ВидГраницы.Включая));
	
	Запрос.УстановитьПараметр ("мДатаКонцаПериодаОтчета_Дата", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Запрос.УстановитьПараметр ("Организация",СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр ("Списано",Перечисления.СостоянияОС.СнятоСУчета);
	ТекстЗапроса = "ВЫБРАТЬ
	               |	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	               |	ЕстьNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ЛиквидационнаяСтоимость, 0) КАК ЛиквидационнаяСтоимость,
				   |	ЕстьNULL(СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета, Значение(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетУчета,
				   |	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации
	               |ИЗ
	               |	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	               |			&мДатаКонцаПериодаОтчета,
	               |			Организация = &Организация
	               |				И (НЕ ОсновноеСредство В
	               |						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |							СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	               |						ИЗ
	               |							РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	               |						ГДЕ
	               |							СостоянияОСОрганизаций.Организация = &Организация
	               |							И СостоянияОСОрганизаций.ДатаСостояния < &мДатаКонцаПериодаОтчета_Дата
	               |							И СостоянияОСОрганизаций.Состояние = &Списано))) КАК НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&мДатаКонцаПериодаОтчета, Организация = &Организация) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	               |		ПО НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&мДатаКонцаПериодаОтчета, Организация = &Организация) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	               |		ПО НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
				   |ГДЕ
	               |	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию = Истина";
				   
	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "ЕРП" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".ПараметрыАмортизацииОСБухгалтерскийУчет.", ".ПервоначальныеСведенияОСБухгалтерскийУчет.");	
	КонецЕсли;				   
				   
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаПолнАмортОС = РезультатЗапроса.Выгрузить();
		П264_ = 0;
		Для Сч = 0 По ТаблицаПолнАмортОС.Количество()-1 Цикл
			Если  (Лев(ТаблицаПолнАмортОС[Сч].СчетУчета.Код,2) = "10") ИЛИ (Лев(ТаблицаПолнАмортОС[Сч].СчетУчета.Код,2) = "11") Тогда
				КонОстаток = мБухИтогиАм.Остаток("Хозрасчетный", "Сумма", "Дт", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, ТаблицаПолнАмортОС[Сч].СчетУчета, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства,"Субконто1",ТаблицаПолнАмортОС[Сч].ОсновноеСредство);	
				СуммаАморт = мБухИтогиАм.Остаток("Хозрасчетный", "Сумма", "Кт", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, ТаблицаПолнАмортОС[Сч].СчетНачисленияАмортизации, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства,"Субконто1",ТаблицаПолнАмортОС[Сч].ОсновноеСредство);	
				Если  ТаблицаПолнАмортОС[Сч].ЛиквидационнаяСтоимость >= КонОстаток - СуммаАморт Тогда
					П264_ = П264_ + КонОстаток;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		УстановитьЗначениеПоказателя("П264", П264_);
		Иначе
		УстановитьЗначениеПоказателя("П264", 0);
	КонецЕсли;
КонецПроцедуры	

	
&НаСервере
//Процедура выполняет расчет показателя первичной стоимости ОС на консервации 
Процедура  РасчетПервичнойСтоимостиОсНаКонсервацииБУERP25();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр ("мДатаКонцаПериодаОтчета", Новый Граница(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, ВидГраницы.Включая));
	Запрос.УстановитьПараметр ("Организация",СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр ("СубконтоОС"    , ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	Запрос.УстановитьПараметр ("НеНачислять",ЛОЖЬ);
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЕстьNULL(СУММА(ЕСТЬNULL(СтоимостьОстатки.СуммаОстатокДт, 0) - ЕСТЬNULL(АмортизацияОстатки.СуммаОстатокКт, 0)), 0) КАК КонОстаток
	               |ИЗ
	               |	РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(&мДатаКонцаПериодаОтчета, Организация = &Организация) КАК ПорядокУчетаОСБУСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	               |				&мДатаКонцаПериодаОтчета,
	               |				Счет В
	               |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |						СчетаБУ.СчетУчета
	               |					ИЗ
	               |						РегистрСведений.ПорядокУчетаОС.СрезПоследних(&мДатаКонцаПериодаОтчета) КАК СчетаБУ),
	               |				&СубконтоОС,
	               |				Организация = &Организация) КАК СтоимостьОстатки
	               |		ПО ПорядокУчетаОСБУСрезПоследних.ОсновноеСредство = СтоимостьОстатки.Субконто1
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	               |				&мДатаКонцаПериодаОтчета,
	               |				Счет В
	               |					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |						СчетаБУ.СчетНачисленияАмортизации
	               |					ИЗ
	               |						РегистрСведений.ПорядокУчетаОС.СрезПоследних(&мДатаКонцаПериодаОтчета) КАК СчетаБУ),
	               |				&СубконтоОС,
	               |				Организация = &Организация) КАК АмортизацияОстатки
	               |		ПО ПорядокУчетаОСБУСрезПоследних.ОсновноеСредство = АмортизацияОстатки.Субконто1
	               |ГДЕ
	               |	НЕ ПорядокУчетаОСБУСрезПоследних.НачислятьАмортизациюБУ";
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		УстановитьЗначениеПоказателя("П263", Выборка.КонОстаток);
	Иначе
		УстановитьЗначениеПоказателя("П263", 0);
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
//Процедура выполняет расчет показателя первичной стоимости полностью амортизированных ОС для Бух  
Процедура  РасчетПервичнойСтоимостиПолностьюАмортОСБУERP25();
  	// Бухгалтерский итоги по счетам в разрезе Субконто1
	мБухИтогиАм = Обработки.БухгалтерскиеИтоги.Создать();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр ("мДатаКонцаПериодаОтчета", Новый Граница(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, ВидГраницы.Включая));
	
	Запрос.УстановитьПараметр ("мДатаКонцаПериодаОтчета_Дата", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Запрос.УстановитьПараметр ("Организация",СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр ("Списано",Перечисления.СостоянияОС.СнятоСУчета);
	ТекстЗапроса = "ВЫБРАТЬ
	               |	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
				   |	ЕстьNULL(ПараметрыАмортизацииОСУУСрезПоследних.ЛиквидационнаяСтоимостьРегл, 0) КАК ЛиквидационнаяСтоимость,
				   |	ЕстьNULL(СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета, Значение(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетУчета,
				   |	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации
	               |ИЗ
	               |	РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(
	               |			&мДатаКонцаПериодаОтчета,
	               |			Организация = &Организация
	               |				И (НЕ ОсновноеСредство В
	               |						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |							СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	               |						ИЗ
	               |							РегистрСведений.ПорядокУчетаОСБУ КАК СостоянияОСОрганизаций
	               |						ГДЕ
	               |							СостоянияОСОрганизаций.Организация = &Организация
	               |							И СостоянияОСОрганизаций.Период < &мДатаКонцаПериодаОтчета_Дата
	               |							И СостоянияОСОрганизаций.Состояние = &Списано))) КАК НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСУУ.СрезПоследних(&мДатаКонцаПериодаОтчета, Организация = &Организация) КАК ПараметрыАмортизацииОСУУСрезПоследних
	               |		ПО НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииОСУУСрезПоследних.ОсновноеСредство
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС.СрезПоследних(&мДатаКонцаПериодаОтчета) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	               |		ПО НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
				   |ГДЕ
	               |	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.НачислятьАмортизациюБУ = Истина";
				   
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаПолнАмортОС = РезультатЗапроса.Выгрузить();
		П264_ = 0;
		Для Сч = 0 По ТаблицаПолнАмортОС.Количество()-1 Цикл
			Если  (Лев(ТаблицаПолнАмортОС[Сч].СчетУчета.Код,2) = "10") ИЛИ (Лев(ТаблицаПолнАмортОС[Сч].СчетУчета.Код,2) = "11") Тогда
				КонОстаток = мБухИтогиАм.Остаток("Хозрасчетный", "Сумма", "Дт", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, ТаблицаПолнАмортОС[Сч].СчетУчета, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства,"Субконто1",ТаблицаПолнАмортОС[Сч].ОсновноеСредство);	
				СуммаАморт = мБухИтогиАм.Остаток("Хозрасчетный", "Сумма", "Кт", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, ТаблицаПолнАмортОС[Сч].СчетНачисленияАмортизации, ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства,"Субконто1",ТаблицаПолнАмортОС[Сч].ОсновноеСредство);	
				Если  ТаблицаПолнАмортОС[Сч].ЛиквидационнаяСтоимость >= КонОстаток - СуммаАморт Тогда
					П264_ = П264_ + КонОстаток;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		УстановитьЗначениеПоказателя("П264", П264_);
		Иначе
		УстановитьЗначениеПоказателя("П264", 0);
	КонецЕсли;
КонецПроцедуры	

// ТипОтчета - "Ф"  финрез, "Б" - баланс
&НаСервере
Функция ЗаполнитьПоказательПоДаннымФинОтчетности(КодСтрокиКапитал, КодКолонкиКапитал, ТипОтчета, ДанныеОтчета, КодСтрокиОтчета, КодКолонкиОтчета, ЗаПрошлыйГод = Ложь, Знак = "+");
	
	ПолныйКодПоказателя = "П" + КодСтрокиКапитал + КодКолонкиКапитал;
	
	ИмяПоказателяЗвит1С = ?(КодКолонкиОтчета = 3, "A", "B") + КодСтрокиОтчета;
	
	НаименованиеОтчета = ?(ТипОтчета = "Ф", 
						   "Звіт про фінансові результати (Звіт про сукупний дохід)",
						   "Баланс");
						   
	РезФинРез_Период 				= ПредставлениеПериода( НачалоДня(НачалоКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "Л = ""uk_UA""; ФП = Истина" );
	РезБаланс_Период				= ПредставлениеПериода( НачалоДня(НачалоКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "Л = ""uk_UA""; ФП = Истина" );
	
	ОписаниеПериода = ?(ТипОтчета = "Ф",
						РезФинРез_Период,
						РезБаланс_Период//?(ЗаПрошлыйГод,РезБалансПрошлыйПериод_Период,РезБаланс_Период)
						); 
						  
	Коэффициент = 1;//?((КодКолонкиКапитал = "8") или (КодКолонкиКапитал = "9"), -1, 1);
						  
	Значение = Неопределено;
	
	Если ДанныеОтчета.Свойство("П" + КодСтрокиОтчета + КодКолонкиОтчета, Значение) Тогда
		// данные из 1С
	Иначе	
		// данные из FREDO Звіт
		ДанныеОтчета.Свойство(ИмяПоказателяЗвит1С, Значение)
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Если Значение = Неопределено Тогда
			Если (НЕ ТипОтчета = "Ф" И (КодСтрокиОтчета = "2290" ИЛИ КодСтрокиОтчета = "2295")) Тогда
				Сообщить("> Помилка при розрахунку рядка" + КодСтрокиКапитал + ?(ЗначениеЗаполнено(КодКолонкиКапитал), " (графа " + КодКолонкиКапитал + ")", "") + ": не вдалося отримати показник рядка " + КодСтрокиОтчета + "(графа " + КодКолонкиОтчета + ") звіту " + НаименованиеОтчета + " за " + ОписаниеПериода);	
			КонецЕсли;
		КонецЕсли;
		Значение = 0;
	КонецЕсли;
	
	Значение = Коэффициент * Значение;
	
	// устанавливаем показатель
	УстановитьЗначениеПоказателя(ПолныйКодПоказателя, Значение);

	_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
															ПолныйКодПоказателя,
															"Рядок " + КодСтрокиКапитал +", графа " +КодКолонкиКапитал,	
															Знак, 
															"Показник зі звіту """ + НаименованиеОтчета + """ за " + ОписаниеПериода + "
															   |(рядок " + КодСтрокиОтчета + " , графа " + КодКолонкиОтчета + ")", 
															Значение,,, 
															?(ЗаПрошлыйГод,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), Неопределено),
															?(ЗаПрошлыйГод,КонецГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12)), Неопределено)
															);
	Возврат Значение;
	
КонецФункции

&НаСервере
//Процедура выполняет расчет и заполнений показателей об остатках на начало и конец
//года начальной и конечной стоимостей нематериальных активов и основных средств
Процедура ДобавитьВЯчейку(СтруктураЯчеек, Счет, Графа, Знач Сумма)
	Если Сумма <> NULL И Счет <> NULL Тогда
		СчетКод = Лев(Счет.Код,3);
		Если СчетКод = "101" Тогда
			Если Графа = 4 Тогда
				Если СтруктураЯчеек.Свойство("П100_4",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П100_4;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П100_4",Сумма);
			ИначеЕсли Графа = 5 Тогда
				Если СтруктураЯчеек.Свойство("П100_5",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П100_5;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П100_5",Сумма);
			ИначеЕсли Графа = 8 Тогда
				Если СтруктураЯчеек.Свойство("П100_8",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П100_8;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П100_8",Сумма);
			ИначеЕсли Графа = 9 Тогда
				Если СтруктураЯчеек.Свойство("П100_9",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П100_9;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П100_9",Сумма);
			ИначеЕсли Графа = 10 Тогда
				Если СтруктураЯчеек.Свойство("П100_10",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П100_10;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П100_10",Сумма);
			ИначеЕсли Графа = 12 Тогда
				Если СтруктураЯчеек.Свойство("П100_12",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П100_12;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П100_12",Сумма);
			ИначеЕсли Графа = 15 Тогда
				Если СтруктураЯчеек.Свойство("П100_15",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П100_15;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П100_15",Сумма);
			КонецЕсли;
		КонецЕсли;
		Если СчетКод = "100" Тогда
			Если Графа = 4 Тогда
				Если СтруктураЯчеек.Свойство("П105_4",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П105_4;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П105_4",Сумма);
			ИначеЕсли Графа = 5 Тогда
				Если СтруктураЯчеек.Свойство("П105_5",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П105_5;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П105_5",Сумма);
			ИначеЕсли Графа = 8 Тогда
				Если СтруктураЯчеек.Свойство("П105_8",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П105_8;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П105_8",Сумма);
			ИначеЕсли Графа = 9 Тогда
				Если СтруктураЯчеек.Свойство("П105_9",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П105_9;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П105_9",Сумма);
			ИначеЕсли Графа = 10 Тогда
				Если СтруктураЯчеек.Свойство("П105_10",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П105_10;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П105_10",Сумма);
			ИначеЕсли Графа = 12 Тогда
				Если СтруктураЯчеек.Свойство("П105_12",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П105_12;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П105_12",Сумма);
			ИначеЕсли Графа = 15 Тогда
				Если СтруктураЯчеек.Свойство("П105_15",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П105_15;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П105_15",Сумма);
			КонецЕсли;
		КонецЕсли;
		Если СчетКод = "102" Тогда
			Если Графа = 4 Тогда
				Если СтруктураЯчеек.Свойство("П110_4",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П110_4;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П110_4",Сумма);
			ИначеЕсли Графа = 5 Тогда
				Если СтруктураЯчеек.Свойство("П110_5",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П110_5;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П110_5",Сумма);
			ИначеЕсли Графа = 8 Тогда
				Если СтруктураЯчеек.Свойство("П110_8",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П110_8;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П110_8",Сумма);
			ИначеЕсли Графа = 9 Тогда
				Если СтруктураЯчеек.Свойство("П110_9",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П110_9;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П110_9",Сумма);
			ИначеЕсли Графа = 10 Тогда
				Если СтруктураЯчеек.Свойство("П110_10",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П110_10;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П110_10",Сумма);
			ИначеЕсли Графа = 12 Тогда
				Если СтруктураЯчеек.Свойство("П110_12",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П110_12;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П110_12",Сумма);
			ИначеЕсли Графа = 15 Тогда
				Если СтруктураЯчеек.Свойство("П110_15",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П110_15;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П110_15",Сумма);
			КонецЕсли;
		КонецЕсли;
		Если СчетКод = "103" Тогда
			Если Графа = 4 Тогда
				Если СтруктураЯчеек.Свойство("П120_4",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П120_4;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П120_4",Сумма);
			ИначеЕсли Графа = 5 Тогда
				Если СтруктураЯчеек.Свойство("П120_5",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П120_5;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П120_5",Сумма);
			ИначеЕсли Графа = 8 Тогда
				Если СтруктураЯчеек.Свойство("П120_8",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П120_8;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П120_8",Сумма);
			ИначеЕсли Графа = 9 Тогда
				Если СтруктураЯчеек.Свойство("П120_9",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П120_9;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П120_9",Сумма);
			ИначеЕсли Графа = 10 Тогда
				Если СтруктураЯчеек.Свойство("П120_10",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П120_10;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П120_10",Сумма);
			ИначеЕсли Графа = 12 Тогда
				Если СтруктураЯчеек.Свойство("П120_12",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П120_12;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П120_12",Сумма);
			ИначеЕсли Графа = 15 Тогда
				Если СтруктураЯчеек.Свойство("П120_15",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П120_15;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П120_15",Сумма);
			КонецЕсли;
		КонецЕсли;
		Если СчетКод = "104" Тогда
			Если Графа = 4 Тогда
				Если СтруктураЯчеек.Свойство("П130_4",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П130_4;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П130_4",Сумма);
			ИначеЕсли Графа = 5 Тогда
				Если СтруктураЯчеек.Свойство("П130_5",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П130_5;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П130_5",Сумма);
			ИначеЕсли Графа = 8 Тогда
				Если СтруктураЯчеек.Свойство("П130_8",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П130_8;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П130_8",Сумма);
			ИначеЕсли Графа = 9 Тогда
				Если СтруктураЯчеек.Свойство("П130_9",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П130_9;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П130_9",Сумма);
			ИначеЕсли Графа = 10 Тогда
				Если СтруктураЯчеек.Свойство("П130_10",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П130_10;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П130_10",Сумма);
			ИначеЕсли Графа = 12 Тогда
				Если СтруктураЯчеек.Свойство("П130_12",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П130_12;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П130_12",Сумма);
			ИначеЕсли Графа = 15 Тогда
				Если СтруктураЯчеек.Свойство("П130_15",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П130_15;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П130_15",Сумма);
			КонецЕсли;
		КонецЕсли;
		Если СчетКод = "105" Тогда
			Если Графа = 4 Тогда
				Если СтруктураЯчеек.Свойство("П140_4",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П140_4;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П140_4",Сумма);
			ИначеЕсли Графа = 5 Тогда
				Если СтруктураЯчеек.Свойство("П140_5",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П140_5;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П140_5",Сумма);
			ИначеЕсли Графа = 8 Тогда
				Если СтруктураЯчеек.Свойство("П140_8",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П140_8;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П140_8",Сумма);
			ИначеЕсли Графа = 9 Тогда
				Если СтруктураЯчеек.Свойство("П140_9",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П140_9;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П140_9",Сумма);
			ИначеЕсли Графа = 10 Тогда
				Если СтруктураЯчеек.Свойство("П140_10",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П140_10;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П140_10",Сумма);
			ИначеЕсли Графа = 12 Тогда
				Если СтруктураЯчеек.Свойство("П140_12",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П140_12;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П140_12",Сумма);
			ИначеЕсли Графа = 15 Тогда
				Если СтруктураЯчеек.Свойство("П140_15",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П140_15;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П140_15",Сумма);
			КонецЕсли;
		КонецЕсли;
		Если СчетКод = "106" Тогда
			Если Графа = 4 Тогда
				Если СтруктураЯчеек.Свойство("П150_4",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П150_4;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П150_4",Сумма);
			ИначеЕсли Графа = 5 Тогда
				Если СтруктураЯчеек.Свойство("П150_5",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П150_5;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П150_5",Сумма);
			ИначеЕсли Графа = 8 Тогда
				Если СтруктураЯчеек.Свойство("П150_8",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П150_8;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П150_8",Сумма);
			ИначеЕсли Графа = 9 Тогда
				Если СтруктураЯчеек.Свойство("П150_9",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П150_9;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П150_9",Сумма);
			ИначеЕсли Графа = 10 Тогда
				Если СтруктураЯчеек.Свойство("П150_10",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П150_10;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П150_10",Сумма);
			ИначеЕсли Графа = 12 Тогда
				Если СтруктураЯчеек.Свойство("П150_12",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П150_12;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П150_12",Сумма);
			ИначеЕсли Графа = 15 Тогда
				Если СтруктураЯчеек.Свойство("П150_15",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П150_15;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П150_15",Сумма);
			КонецЕсли;
		КонецЕсли;
		Если СчетКод = "107" Тогда
			Если Графа = 4 Тогда
				Если СтруктураЯчеек.Свойство("П160_4",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П160_4;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П160_4",Сумма);
			ИначеЕсли Графа = 5 Тогда
				Если СтруктураЯчеек.Свойство("П160_5",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П160_5;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П160_5",Сумма);
			ИначеЕсли Графа = 8 Тогда
				Если СтруктураЯчеек.Свойство("П160_8",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П160_8;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П160_8",Сумма);
			ИначеЕсли Графа = 9 Тогда
				Если СтруктураЯчеек.Свойство("П160_9",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П160_9;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П160_9",Сумма);
			ИначеЕсли Графа = 10 Тогда
				Если СтруктураЯчеек.Свойство("П160_10",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П160_10;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П160_10",Сумма);
			ИначеЕсли Графа = 12 Тогда
				Если СтруктураЯчеек.Свойство("П160_12",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П160_12;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П160_12",Сумма);
			ИначеЕсли Графа = 15 Тогда
				Если СтруктураЯчеек.Свойство("П160_15",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П160_15;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П160_15",Сумма);
			КонецЕсли;
		КонецЕсли;
		Если СчетКод = "108" Тогда
			Если Графа = 4 Тогда
				Если СтруктураЯчеек.Свойство("П170_4",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П170_4;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П170_4",Сумма);
			ИначеЕсли Графа = 5 Тогда
				Если СтруктураЯчеек.Свойство("П170_5",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П170_5;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П170_5",Сумма);
			ИначеЕсли Графа = 8 Тогда
				Если СтруктураЯчеек.Свойство("П170_8",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П170_8;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П170_8",Сумма);
			ИначеЕсли Графа = 9 Тогда
				Если СтруктураЯчеек.Свойство("П170_9",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П170_9;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П170_9",Сумма);
			ИначеЕсли Графа = 10 Тогда
				Если СтруктураЯчеек.Свойство("П170_10",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П170_10;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П170_10",Сумма);
			ИначеЕсли Графа = 12 Тогда
				Если СтруктураЯчеек.Свойство("П170_12",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П170_12;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П170_12",Сумма);
			ИначеЕсли Графа = 15 Тогда
				Если СтруктураЯчеек.Свойство("П170_15",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П170_15;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П170_15",Сумма);
			КонецЕсли;
		КонецЕсли;
		Если СчетКод = "109" Тогда
			Если Графа = 4 Тогда
				Если СтруктураЯчеек.Свойство("П180_4",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П180_4;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П180_4",Сумма);
			ИначеЕсли Графа = 5 Тогда
				Если СтруктураЯчеек.Свойство("П180_5",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П180_5;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П180_5",Сумма);
			ИначеЕсли Графа = 8 Тогда
				Если СтруктураЯчеек.Свойство("П180_8",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П180_8;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П180_8",Сумма);
			ИначеЕсли Графа = 9 Тогда
				Если СтруктураЯчеек.Свойство("П180_9",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П180_9;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П180_9",Сумма);
			ИначеЕсли Графа = 10 Тогда
				Если СтруктураЯчеек.Свойство("П180_10",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П180_10;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П180_10",Сумма);
			ИначеЕсли Графа = 12 Тогда
				Если СтруктураЯчеек.Свойство("П180_12",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П180_12;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П180_12",Сумма);
			ИначеЕсли Графа = 15 Тогда
				Если СтруктураЯчеек.Свойство("П180_15",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П180_15;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П180_15",Сумма);
			КонецЕсли;
		КонецЕсли;
		Если СчетКод = "111" Тогда
			Если Графа = 4 Тогда
				Если СтруктураЯчеек.Свойство("П190_4",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П190_4;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П190_4",Сумма);
			ИначеЕсли Графа = 5 Тогда
				Если СтруктураЯчеек.Свойство("П190_5",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П190_5;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П190_5",Сумма);
			ИначеЕсли Графа = 8 Тогда
				Если СтруктураЯчеек.Свойство("П190_8",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П190_8;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П190_8",Сумма);
			ИначеЕсли Графа = 9 Тогда
				Если СтруктураЯчеек.Свойство("П190_9",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П190_9;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П190_9",Сумма);
			ИначеЕсли Графа = 10 Тогда
				Если СтруктураЯчеек.Свойство("П190_10",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П190_10;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П190_10",Сумма);
			ИначеЕсли Графа = 12 Тогда
				Если СтруктураЯчеек.Свойство("П190_12",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П190_12;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П190_12",Сумма);
			ИначеЕсли Графа = 15 Тогда
				Если СтруктураЯчеек.Свойство("П190_15",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П190_15;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П190_15",Сумма);
			КонецЕсли;
		КонецЕсли;
		Если СчетКод = "112" Тогда
			Если Графа = 4 Тогда
				Если СтруктураЯчеек.Свойство("П200_4",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П200_4;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П200_4",Сумма);
			ИначеЕсли Графа = 5 Тогда
				Если СтруктураЯчеек.Свойство("П200_5",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П200_5;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П200_5",Сумма);
			ИначеЕсли Графа = 8 Тогда
				Если СтруктураЯчеек.Свойство("П200_8",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П200_8;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П200_8",Сумма);
			ИначеЕсли Графа = 9 Тогда
				Если СтруктураЯчеек.Свойство("П200_9",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П200_9;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П200_9",Сумма);
			ИначеЕсли Графа = 10 Тогда
				Если СтруктураЯчеек.Свойство("П200_10",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П200_10;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П200_10",Сумма);
			ИначеЕсли Графа = 12 Тогда
				Если СтруктураЯчеек.Свойство("П200_12",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П200_12;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П200_12",Сумма);
			ИначеЕсли Графа = 15 Тогда
				Если СтруктураЯчеек.Свойство("П200_15",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П200_15;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П200_15",Сумма);
			КонецЕсли;
		КонецЕсли;
		Если СчетКод = "113" Тогда
			Если Графа = 4 Тогда
				Если СтруктураЯчеек.Свойство("П210_4",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П210_4;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П210_4",Сумма);
			ИначеЕсли Графа = 5 Тогда
				Если СтруктураЯчеек.Свойство("П210_5",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П210_5;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П210_5",Сумма);
			ИначеЕсли Графа = 8 Тогда
				Если СтруктураЯчеек.Свойство("П210_8",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П210_8;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П210_8",Сумма);
			ИначеЕсли Графа = 9 Тогда
				Если СтруктураЯчеек.Свойство("П210_9",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П210_9;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П210_9",Сумма);
			ИначеЕсли Графа = 10 Тогда
				Если СтруктураЯчеек.Свойство("П210_10",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П210_10;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П210_10",Сумма);
			ИначеЕсли Графа = 12 Тогда
				Если СтруктураЯчеек.Свойство("П210_12",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П210_12;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П210_12",Сумма);
			ИначеЕсли Графа = 15 Тогда
				Если СтруктураЯчеек.Свойство("П210_15",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П210_15;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П210_15",Сумма);
			КонецЕсли;
		КонецЕсли;
		Если СчетКод = "114" Тогда
			Если Графа = 4 Тогда
				Если СтруктураЯчеек.Свойство("П220_4",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П220_4;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П220_4",Сумма);
			ИначеЕсли Графа = 5 Тогда
				Если СтруктураЯчеек.Свойство("П220_5",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П220_5;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П220_5",Сумма);
			ИначеЕсли Графа = 8 Тогда
				Если СтруктураЯчеек.Свойство("П220_8",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П220_8;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П220_8",Сумма);
			ИначеЕсли Графа = 9 Тогда
				Если СтруктураЯчеек.Свойство("П220_9",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П220_9;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П220_9",Сумма);
			ИначеЕсли Графа = 10 Тогда
				Если СтруктураЯчеек.Свойство("П220_10",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П220_10;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П220_10",Сумма);
			ИначеЕсли Графа = 12 Тогда
				Если СтруктураЯчеек.Свойство("П220_12",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П220_12;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П220_12",Сумма);
			ИначеЕсли Графа = 15 Тогда
				Если СтруктураЯчеек.Свойство("П220_15",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П220_15;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П220_15",Сумма);
			КонецЕсли;
		КонецЕсли;
		Если СчетКод = "115" Тогда
			Если Графа = 4 Тогда
				Если СтруктураЯчеек.Свойство("П230_4",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П230_4;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П230_4",Сумма);
			ИначеЕсли Графа = 5 Тогда
				Если СтруктураЯчеек.Свойство("П230_5",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П230_5;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П230_5",Сумма);
			ИначеЕсли Графа = 8 Тогда
				Если СтруктураЯчеек.Свойство("П230_8",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П230_8;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П230_8",Сумма);
			ИначеЕсли Графа = 9 Тогда
				Если СтруктураЯчеек.Свойство("П230_9",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П230_9;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П230_9",Сумма);
			ИначеЕсли Графа = 10 Тогда
				Если СтруктураЯчеек.Свойство("П230_10",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П230_10;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П230_10",Сумма);
			ИначеЕсли Графа = 12 Тогда
				Если СтруктураЯчеек.Свойство("П230_12",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П230_12;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П230_12",Сумма);
			ИначеЕсли Графа = 15 Тогда
				Если СтруктураЯчеек.Свойство("П230_15",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П230_15;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П230_15",Сумма);
			КонецЕсли;
		КонецЕсли;
		Если СчетКод = "116" Тогда
			Если Графа = 4 Тогда
				Если СтруктураЯчеек.Свойство("П240_4",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П240_4;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П240_4",Сумма);
			ИначеЕсли Графа = 5 Тогда
				Если СтруктураЯчеек.Свойство("П240_5",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П240_5;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П240_5",Сумма);
			ИначеЕсли Графа = 8 Тогда
				Если СтруктураЯчеек.Свойство("П240_8",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П240_8;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П240_8",Сумма);
			ИначеЕсли Графа = 9 Тогда
				Если СтруктураЯчеек.Свойство("П240_9",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П240_9;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П240_9",Сумма);
			ИначеЕсли Графа = 10 Тогда
				Если СтруктураЯчеек.Свойство("П240_10",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П240_10;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П240_10",Сумма);
			ИначеЕсли Графа = 12 Тогда
				Если СтруктураЯчеек.Свойство("П240_12",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П240_12;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П240_12",Сумма);
			ИначеЕсли Графа = 15 Тогда
				Если СтруктураЯчеек.Свойство("П240_15",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П240_15;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П240_15",Сумма);
			КонецЕсли;
		КонецЕсли;
		Если СчетКод = "117" Тогда
			Если Графа = 4 Тогда
				Если СтруктураЯчеек.Свойство("П250_4",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П250_4;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П250_4",Сумма);
			ИначеЕсли Графа = 5 Тогда
				Если СтруктураЯчеек.Свойство("П250_5",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П250_5;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П250_5",Сумма);
			ИначеЕсли Графа = 8 Тогда
				Если СтруктураЯчеек.Свойство("П250_8",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П250_8;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П250_8",Сумма);
			ИначеЕсли Графа = 9 Тогда
				Если СтруктураЯчеек.Свойство("П250_9",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П250_9;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П250_9",Сумма);
			ИначеЕсли Графа = 10 Тогда
				Если СтруктураЯчеек.Свойство("П250_10",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П250_10;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П250_10",Сумма);
			ИначеЕсли Графа = 12 Тогда
				Если СтруктураЯчеек.Свойство("П250_12",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П250_12;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П250_12",Сумма);
			ИначеЕсли Графа = 15 Тогда
				Если СтруктураЯчеек.Свойство("П250_15",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П250_15;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П250_15",Сумма);
			КонецЕсли;
		КонецЕсли;
		Если СчетКод = "121" Тогда
			Если Графа = 4 Тогда
				Если СтруктураЯчеек.Свойство("П010_4",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П010_4;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П010_4",Сумма);
			ИначеЕсли Графа = 5 Тогда
				Если СтруктураЯчеек.Свойство("П010_5",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П010_5;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П010_5",Сумма);
			ИначеЕсли Графа = 8 Тогда
				Если СтруктураЯчеек.Свойство("П010_8",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П010_8;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П010_8",Сумма);
			ИначеЕсли Графа = 9 Тогда
				Если СтруктураЯчеек.Свойство("П010_9",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П010_9;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П010_9",Сумма);
			ИначеЕсли Графа = 10 Тогда
				Если СтруктураЯчеек.Свойство("П010_10",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П010_10;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П010_10",Сумма);
			ИначеЕсли Графа = 12 Тогда
				Если СтруктураЯчеек.Свойство("П010_12",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П010_12;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П010_12",Сумма);
			ИначеЕсли Графа = 15 Тогда
				Если СтруктураЯчеек.Свойство("П010_15",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П010_15;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П010_15",Сумма);
			КонецЕсли;
		КонецЕсли;
		Если СчетКод = "122" Тогда
			Если Графа = 4 Тогда
				Если СтруктураЯчеек.Свойство("П020_4",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П020_4;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П020_4",Сумма);
			ИначеЕсли Графа = 5 Тогда
				Если СтруктураЯчеек.Свойство("П020_5",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П020_5;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П020_5",Сумма);
			ИначеЕсли Графа = 8 Тогда
				Если СтруктураЯчеек.Свойство("П020_8",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П020_8;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П020_8",Сумма);
			ИначеЕсли Графа = 9 Тогда
				Если СтруктураЯчеек.Свойство("П020_9",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П020_9;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П020_9",Сумма);
			ИначеЕсли Графа = 10 Тогда
				Если СтруктураЯчеек.Свойство("П020_10",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П020_10;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П020_10",Сумма);
			ИначеЕсли Графа = 12 Тогда
				Если СтруктураЯчеек.Свойство("П020_12",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П020_12;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П020_12",Сумма);
			ИначеЕсли Графа = 15 Тогда
				Если СтруктураЯчеек.Свойство("П020_15",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П020_15;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П020_15",Сумма);
			КонецЕсли;
		КонецЕсли;
		Если СчетКод = "123" Тогда
			Если Графа = 4 Тогда
				Если СтруктураЯчеек.Свойство("П030_4",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П030_4;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П030_4",Сумма);
			ИначеЕсли Графа = 5 Тогда
				Если СтруктураЯчеек.Свойство("П030_5",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П030_5;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П030_5",Сумма);
			ИначеЕсли Графа = 8 Тогда
				Если СтруктураЯчеек.Свойство("П030_8",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П030_8;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П030_8",Сумма);
			ИначеЕсли Графа = 9 Тогда
				Если СтруктураЯчеек.Свойство("П030_9",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П030_9;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П030_9",Сумма);
			ИначеЕсли Графа = 10 Тогда
				Если СтруктураЯчеек.Свойство("П030_10",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П030_10;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П030_10",Сумма);
			ИначеЕсли Графа = 12 Тогда
				Если СтруктураЯчеек.Свойство("П030_12",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П030_12;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П030_12",Сумма);
			ИначеЕсли Графа = 15 Тогда
				Если СтруктураЯчеек.Свойство("П030_15",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П030_15;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П030_15",Сумма);
			КонецЕсли;
		КонецЕсли;
		Если СчетКод = "124" Тогда
			Если Графа = 4 Тогда
				Если СтруктураЯчеек.Свойство("П040_4",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П040_4;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П040_4",Сумма);
			ИначеЕсли Графа = 5 Тогда
				Если СтруктураЯчеек.Свойство("П040_5",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П040_5;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П040_5",Сумма);
			ИначеЕсли Графа = 8 Тогда
				Если СтруктураЯчеек.Свойство("П040_8",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П040_8;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П040_8",Сумма);
			ИначеЕсли Графа = 9 Тогда
				Если СтруктураЯчеек.Свойство("П040_9",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П040_9;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П040_9",Сумма);
			ИначеЕсли Графа = 10 Тогда
				Если СтруктураЯчеек.Свойство("П040_10",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П040_10;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П040_10",Сумма);
			ИначеЕсли Графа = 12 Тогда
				Если СтруктураЯчеек.Свойство("П040_12",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П040_12;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П040_12",Сумма);
			ИначеЕсли Графа = 15 Тогда
				Если СтруктураЯчеек.Свойство("П040_15",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П040_15;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П040_15",Сумма);
			КонецЕсли;
		КонецЕсли;
		Если СчетКод = "125" Тогда
			Если Графа = 4 Тогда
				Если СтруктураЯчеек.Свойство("П050_4",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П050_4;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П050_4",Сумма);
			ИначеЕсли Графа = 5 Тогда
				Если СтруктураЯчеек.Свойство("П050_5",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П050_5;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П050_5",Сумма);
			ИначеЕсли Графа = 8 Тогда
				Если СтруктураЯчеек.Свойство("П050_8",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П050_8;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П050_8",Сумма);
			ИначеЕсли Графа = 9 Тогда
				Если СтруктураЯчеек.Свойство("П050_9",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П050_9;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П050_9",Сумма);
			ИначеЕсли Графа = 10 Тогда
				Если СтруктураЯчеек.Свойство("П050_10",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П050_10;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П050_10",Сумма);
			ИначеЕсли Графа = 12 Тогда
				Если СтруктураЯчеек.Свойство("П050_12",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П050_12;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П050_12",Сумма);
			ИначеЕсли Графа = 15 Тогда
				Если СтруктураЯчеек.Свойство("П050_15",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П050_15;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П050_15",Сумма);
			КонецЕсли;
		КонецЕсли;
		Если СчетКод = "127" Тогда
			Если Графа = 4 Тогда
				Если СтруктураЯчеек.Свойство("П070_4",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П070_4;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П070_4",Сумма);
			ИначеЕсли Графа = 5 Тогда
				Если СтруктураЯчеек.Свойство("П070_5",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П070_5;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П070_5",Сумма);
			ИначеЕсли Графа = 8 Тогда
				Если СтруктураЯчеек.Свойство("П070_8",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П070_8;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П070_8",Сумма);
			ИначеЕсли Графа = 9 Тогда
				Если СтруктураЯчеек.Свойство("П070_9",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П070_9;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П070_9",Сумма);
			ИначеЕсли Графа = 10 Тогда
				Если СтруктураЯчеек.Свойство("П070_10",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П070_10;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П070_10",Сумма);
			ИначеЕсли Графа = 12 Тогда
				Если СтруктураЯчеек.Свойство("П070_12",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П070_12;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П070_12",Сумма);
			ИначеЕсли Графа = 15 Тогда
				Если СтруктураЯчеек.Свойство("П070_15",) Тогда 
					Сумма = Сумма + СтруктураЯчеек.П070_15;
				КонецЕсли;	
				СтруктураЯчеек.Вставить("П070_15",Сумма);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат;
КонецЕсли	
КонецПроцедуры	


&НаКлиенте
Процедура ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С)
    Перем Ст8, Ст23;
	
	Если НЕ ТипЗнч(ПараметрыЗаполненияЗвит1С) = Тип("Структура") Тогда
		ПараметрыЗаполненияЗвит1С = Новый Структура;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда
		// данные текущего баланса и финреза получаем из Звита
		РезФинРез = неопределено;
		РезБаланс = неопределено;
		РезБалансПрошлыйПериод = неопределено;
		
		// финрез
		Попытка
			ИмяСхемы = "S0100214";
			МножительФинРез = 1000;
			Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)= 2015 ИЛИ Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)= 2014 Тогда
				ИмяСхемы = "S0100212";
				МножительФинРез = 1;
			ИначеЕсли Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) < 2021 или 
				(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2021 и Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) < 9) Тогда
				ИмяСхемы = "S0100213";
			КонецЕсли;				
			РезФинРез = глКомпонентаЗвит1С.GetReport(ИмяСхемы, 30, 1, Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
			Если РезФинРез = Неопределено Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='За %1 не обнаружено ни одного сохраненного отчета %2!';uk='За %1 не виявлено жодного збереженого звіту %2!'"), ПредставлениеПериода( НачалоКвартала(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "Л = ""uk_UA""; ФП = Истина" ), НСтр("ru='Отчет о финансовых результатах';uk='Звіт про фінансові результати'"));
				глМенеджерЗвит1С.ПредупреждениеЗвит1С(ТекстСообщения, "Завантаження даних з ""FREDO Звіт""");
			КонецЕсли;	
		Исключение
			Если глМенеджерЗвит1С.ФлагОтладки Тогда
				Сообщить("FREDO Звіт. Исключение при получении данных из ""FREDO Звіт"" ("+ИмяСхемы+", 30, 1, " +Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)+")", СтатусСообщения.Важное);
				Сообщить(ОписаниеОшибки(), СтатусСообщения.Информация);
			КонецЕсли;
		КонецПопытки;
		
		// баланс
		Попытка
			ИмяСхемы = "S0100114";
			МножительБаланс = 1000;
			Если Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)= 2015 ИЛИ Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)= 2014 Тогда
				ИмяСхемы = "S0100112";
				МножительБаланс = 1;
			ИначеЕсли Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) < 2021 или 
				(Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 2021 и Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) < 9) Тогда
				ИмяСхемы = "S0100113";
			КонецЕсли;				
			РезБаланс = глКомпонентаЗвит1С.GetReport(ИмяСхемы, 30, 1, Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
			Если РезБаланс = Неопределено Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='За %1 не обнаружено ни одного сохраненного отчета %2!';uk='За %1 не виявлено жодного збереженого звіту %2!'"), ПредставлениеПериода( НачалоКвартала(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "Л = ""uk_UA""; ФП = Истина" ), "Баланс");
				глМенеджерЗвит1С.ПредупреждениеЗвит1С(ТекстСообщения, "Завантаження даних з ""FREDO Звіт""");
			КонецЕсли;
		Исключение
			Если глМенеджерЗвит1С.ФлагОтладки Тогда
				Сообщить("FREDO Звіт. Исключение при получении данных из ""FREDO Звіт"" ("+ИмяСхемы+", 30, 1, " +Год(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)+")", СтатусСообщения.Важное);
				Сообщить(ОписаниеОшибки(), СтатусСообщения.Информация);
			КонецЕсли;
		КонецПопытки;
		
		Если НЕ РезФинРез = Неопределено Тогда
			РезФинРез = ПолучитьПоказателиОтчетаИзЗвит(РезФинРез, 2000, 2650, МножительФинРез);		
		КонецЕсли;
		Если НЕ РезБаланс = Неопределено Тогда
			РезБаланс = ПолучитьПоказателиОтчетаИзЗвит(РезБаланс, 1000, 1900, МножительБаланс);		
		КонецЕсли;
		
	Иначе
		// данные текущего баланса и финреза получаем из 1С
		РезФинРез 			   = ПолучитьПоказателиИзТребуемогоОтчета(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,"РегламентированныйОтчетФинансовыйРезультат", НСтр("ru='Отчет о финансовых результатах';uk='Звіт про фінансові результати'"));
		РезБаланс 			   = ПолучитьПоказателиИзТребуемогоОтчета(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,"РегламентированныйОтчетБаланс", "Баланс");
	КонецЕсли;
	
	ПараметрыЗаполненияЗвит1С.Вставить("РезФинРез", РезФинРез);
	ПараметрыЗаполненияЗвит1С.Вставить("РезБаланс", РезБаланс);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПоказателиОтчетаИзЗвит(ОтчетЗвит1С, НачСтрока, КонСтрока, Множитель = 1)
	
	Результат = Новый Структура();
	
	Для Сч = НачСтрока По КонСтрока Цикл
		СчСтрока = Формат(Сч, "ЧГ=0");
		
		Попытка
			ТекЗначение = ОтчетЗвит1С.GetValue("MAIN", "A"+СчСтрока);
			Если ТекЗначение = Неопределено Тогда
				ТекЗначение = 0;
			КонецЕсли;
			ТекЗначение = ТекЗначение * Множитель;
			Результат.Вставить("A"+СчСтрока, ТекЗначение);
			
			
			ТекЗначение = ОтчетЗвит1С.GetValue("MAIN", "B"+СчСтрока);
			Если ТекЗначение = Неопределено Тогда
				ТекЗначение = 0;
			КонецЕсли;
			ТекЗначение = ТекЗначение * Множитель;
			Результат.Вставить("B"+СчСтрока, ТекЗначение);
		Исключение КонецПопытки;
	
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	_ИмяФормы = СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", "");
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(Сред(Лев(_ИмяФормы, Найти(_ИмяФормы, ".Форма.") - 1), 7), Сред(_ИмяФормы, Найти(_ИмяФормы, ".Форма.") + 7), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

&НаКлиенте
Процедура ПоддержкаДуплекса(Команда)
	
	// инвертируем пометку и значение
	ЕстьДуплекс = СтруктураРеквизитовФормы.ЕстьДуплекс;
	
	СтруктураРеквизитовФормы.Вставить("ЕстьДуплекс", НЕ ЕстьДуплекс);
	Элементы.ЕстьДуплекс.Пометка = НЕ ЕстьДуплекс;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеФормыНаСервере();
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	// расшифровка для Звит1С
	Если  СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровки")
		И ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки) 
		И СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С") Тогда
		
		ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки),
									  СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С); 
		
	КонецЕсли;
	
	ПоказателиОтчета = Новый Структура();
	РеквизитыФормы = ПолучитьРеквизиты();
	Для каждого Реквизит Из РеквизитыФормы Цикл
		Если Лев(ВРЕГ(Реквизит.Имя), 15)  = ВРЕГ("СтруктураДанных") Тогда
			ПоказателиОтчета.Вставить(Сред(Реквизит.Имя, 16), ЭтаФорма[Реквизит.Имя]);		
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИдМногострочногоРаздела Из мСтруктураМногострочныхРазделов Цикл
		
		СтруктураДанных = Новый Структура;
		
		Таблица = РеквизитФормыВЗначение(ИдМногострочногоРаздела.Значение, Тип("ТаблицаЗначений"));
		КолонкиТаблицы = Таблица.Колонки;
		
		Для каждого Строка Из Таблица Цикл
			
			Для каждого Колонка Из КолонкиТаблицы Цикл
				СтруктураДанных.Вставить(Колонка.Имя + "_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ=0"), Строка[Колонка.Имя]);
			КонецЦикла;
			
		КонецЦикла;
		
		ПоказателиОтчета.Вставить(ИдМногострочногоРаздела.Значение, СтруктураДанных);		
		
	КонецЦикла;
 	
	ПоказателиОтчета.Вставить("ДопПоказателиОтчета", СтруктураРеквизитовФормы.ДопПоказателиОтчетаЗвит1С);
		
	// показатели
	СписокСохранения.Вставить("ДанныеОтчета", ПоказателиОтчета);
	
	Возврат СписокСохранения;
	
КонецФункции

&НаКлиенте
Функция СоздатьДанныеОтчетаДляВыгрузки() Экспорт
	
	АдресВХранилище = СоздатьДанныеОтчетаДляВыгрузкиНаСервере();
	Возврат АдресВХранилище;

КонецФункции

&НаСервере
Функция СоздатьДанныеОтчетаДляВыгрузкиНаСервере()
	
	ДанныеОтчета = ПолучитьДанныеФормыНаСервере();
	Возврат ПоместитьВоВременноеХранилище(ДанныеОтчета, Новый УникальныйИдентификатор);
	
КонецФункции


&НаКлиенте
Процедура ОткрытьФормуПараметровДляЗвит1С(ОписаниеОповещения) Экспорт
	
	глКомпонентаЗвит1С.Bring1CToFront();
	СтруктураРеквизитовФормы.Вставить("ОповещениеНастройкиПараметровЗвит1С", ОписаниеОповещения);
	
	Если глМенеджерЗвит1С.ФлагОтладки Тогда

		ФормаСохраненныхРеглОтчетов = ПолучитьФорму("Документ.РегламентированныйОтчет.Форма.ФормаВыбораТестЗвит1С",,ЭтаФорма);
		
		ФормаСохраненныхРеглОтчетов.ОписаниеОповещенияОЗакрытии =  Новый ОписаниеОповещения("РежимТестированияЗвит1СЗавершениеВыбораОтчета", ЭтотОбъект);
		ФормаСохраненныхРеглОтчетов.Параметры.РежимВыбора        = Истина; 
		ФормаСохраненныхРеглОтчетов.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаСохраненныхРеглОтчетов.Открыть();
		
	Иначе
		
		//ОткрытьФормуПараметров(Неопределено);	
				
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РежимТестированияЗвит1СЗавершениеВыбораОтчета(Результат, ДопПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ТекОповещение = СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С;
		СтруктураРеквизитовФормы.Удалить("ОповещениеНастройкиПараметровЗвит1С");
			
		СтруктураРеквизитовФормы.мСохраненныйДок = Результат;	
		ВосстановитьСохраненныеДанные();	
			
		СтруктураРеквизитовФормы.Вставить("ОповещениеНастройкиПараметровЗвит1С", ТекОповещение);
		
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
		
	Иначе
		
		//ОткрытьФормуПараметров(Неопределено);	
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПараметровЗавершение(ПараметрыВозврата, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.Свойство("ОповещениеНастройкиПараметровЗвит1С") Тогда
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьДанныеДляЗвит1С(ОтчетЗвит1С = Неопределено) Экспорт 
	
	
	мСписокСообщенийЗвит1С 	= Новый СписокЗначений;
	
	// Настроим модуль объекта на получене большего доп.параметров
	СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина;
	
	// Заполнение зависит от формы реестра
	ПараметрыЗаполненияЗвит1С = Неопределено;
	Если СтруктураРеквизитовФормы.Свойство("ОповещениеНастройкиПараметровЗвит1С") Тогда
		СтруктураРеквизитовФормы.Удалить("ОповещениеНастройкиПараметровЗвит1С")	
	КонецЕсли;
	
	Если НЕ глМенеджерЗвит1С.ФлагОтладки Тогда
		ПараметрыЗаполненияЗвит1С = Неопределено;
		//////ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С);
		//////ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);
		ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);
		ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С);
	КонецЕсли;

	Результат = ПолучитьДанныеФормыНаСервере();
	
	Для каждого Сообщение Из мСписокСообщенийЗвит1С Цикл
		глМенеджерЗвит1С.ПредупреждениеЗвит1С(Сообщение.Представление, ,Сообщение.Значение);
	КонецЦикла;
	
	мСписокСообщенийЗвит1С.Очистить();
	
	Возврат Результат;
	
КонецФункции


&НаСервере
//Функция вычисляет дебетовый оборот счета
Функция ДО(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // ДО()

&НаСервере
// Функция вычисляет начальный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по дебету счета, указанного в параметре.
//
Функция СНД(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНД()

&НаСервере
// Функция вычисляет начальный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по кредиту счета, указанного в параметре.
//
Функция СНК(Счет)

	Перем Итог;

	Возврат мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СНК()

&НаСервере
// Функция вычисляет конечный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - конечный остаток по дебету счета, указанного в параметре.
//
Функция СКД(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКД()

&НаСервере
// Функция вычисляет конечный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма конечного остатка по кредиту указаного счета.
//
Функция СКК(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // СКК()

&НаСервере
// Функция вычисляет перекрестный оборот в дебет счета, указанного в качестве 
// первого параметра функции, с кредита счета, указанного в качестве второго 
// параметра. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  СчетД        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот в дебет счета;
//  СчетК        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот с кредита счета.
//
// Возвращаемое значение:
//  Число        - сумма перекрестного оборота.
//
Функция ОБ(СчетД, СчетК)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетД, СчетК);

	Возврат Итог;

КонецФункции // ОБ()

&НаСервере
//Функция возвращает кредитовый оборот счета, переданного
//в параметре Счет
Функция КО(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Счет);

	Возврат Итог;

КонецФункции // КО()


&НаКлиенте
// Функция возвращает список нужных показателей из сохраненных отчетов "Баланс"
// и "Финансовые результаты"
Функция ПолучитьПоказателиИзТребуемогоОтчета(ДатаОкончанияПериода,ИсточникОтчета, НаименованиеОтчета)
	
	перем ПоказателиОтчета;
	перем ПоказателиДекларации;
	перем ЗначениеПоказателя;
	перем СтруктураПоказателейСтраницы,ЗначениеВСтруктуре;  
	
	СоответствиеРезультат = ПолучитьТаблицуРезультатов(ДатаОкончанияПериода,ИсточникОтчета, НаименованиеОтчета);

	Если НЕ СоответствиеРезультат.Получить("Результат") = 0 Тогда
		
		Если  СоответствиеРезультат.Получить("Результат") = 2 Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='За %1обнаружено более одного сохраненного отчета %2  Корректное заполнение показателей из него невозможно!';uk='За %1виявлено більше одного збереженого звіту %2 Коректне заповнення показників з нього неможливе!'"), ПредставлениеПериода( НачалоДня(НачалоКвартала(ДатаОкончанияПериода)), КонецДня(ДатаОкончанияПериода), "Л = ""uk_UA""; ФП = Истина" ), НаименованиеОтчета); 
			Если СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда
				глМенеджерЗвит1С.ПредупреждениеЗвит1С(ТекстСообщения, "Завантаження даних з 1С");
			Иначе
				Сообщить(ТекстСообщения);
			КонецЕсли;
			
			Возврат ПоказателиОтчета;
			
		КонецЕсли;	
		
		Возврат СоответствиеРезультат.Получить("ПоказателиОтчета");
		
	Иначе
		
		//не обнаружено не одного требуемого сохраненного отчета	
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='За %1 не обнаружено ни одного сохраненного отчета %2!';uk='За %1 не виявлено жодного збереженого звіту %2!'"), ПредставлениеПериода( НачалоДня(НачалоКвартала(ДатаОкончанияПериода)), КонецДня(ДатаОкончанияПериода), "Л = ""uk_UA""; ФП = Истина" ), НаименованиеОтчета, НаименованиеОтчета); 
		Если СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда
			глМенеджерЗвит1С.ПредупреждениеЗвит1С(ТекстСообщения, "Завантаження даних з 1С");
		Иначе
			Сообщить(ТекстСообщения);	
		КонецЕсли;
		
		Возврат ПоказателиОтчета;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
// Функция возвращает список нужных показателей из сохраненных отчетов "Баланс"
// и "Финансовые результаты"
Функция ПолучитьТаблицуРезультатов(ДатаОкончанияПериода,ИсточникОтчета, НаименованиеОтчета)
	
	перем ПоказателиОтчета;
	
	//сначала пытаемся найти сохраненный отчет в информационной базе
	ЗапросСохраненныйОтчет = Новый Запрос ("
	|ВЫБРАТЬ
	| РегламентированныйОтчет.ДанныеОтчета
	|
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|
	|ГДЕ
	|	РегламентированныйОтчет.ПометкаУдаления = &ПометкаУдаления И
	|	РегламентированныйОтчет.Организация = &Организация И
	|	РегламентированныйОтчет.НаименованиеОтчета = &НаименованиеОтчета И
	|	РегламентированныйОтчет.ДатаОкончания = &ДатаОкончания"
	);
	
	ЗапросСохраненныйОтчет.УстановитьПараметр ("ПометкаУдаления",ЛОЖЬ);
	ЗапросСохраненныйОтчет.УстановитьПараметр ("ДатаОкончания",ДатаОкончанияПериода);
	ЗапросСохраненныйОтчет.УстановитьПараметр ("Организация",СтруктураРеквизитовФормы.Организация);
	ЗапросСохраненныйОтчет.УстановитьПараметр ("НаименованиеОтчета",НаименованиеОтчета);
	
	РезультатЗапроса = ЗапросСохраненныйОтчет.Выполнить();
	
	СоответствиеРезультат = новый Соответствие;
	СоответствиеРезультат.Вставить("Результат");
	СоответствиеРезультат.Вставить("ПоказателиОтчета");
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ТаблицаРезультатов = РезультатЗапроса.Выгрузить();
		Если  ТаблицаРезультатов.Количество() > 1 Тогда
			СоответствиеРезультат["Результат"] = 2;
		Иначе 
			СоответствиеРезультат["Результат"] = 1;
			ДанныеОтчета = ТаблицаРезультатов[0].ДанныеОтчета.Получить();
			ДанныеОтчета.Свойство("ПоказателиОтчета",ПоказателиОтчета);
			
			Если НаименованиеОтчета = "Баланс" Тогда
				ИмяСтраницыПанели = "ПолеТабличногоДокументаБаланс";
			Иначе
				ИмяСтраницыПанели = "ПолеТабличногоДокументаФинРез";
			КонецЕсли;	
			
			ПоказателиОтчета.Свойство(ИмяСтраницыПанели,ПоказателиОтчета);
			СоответствиеРезультат["ПоказателиОтчета"] = ПоказателиОтчета;

		КонецЕсли;
				
	Иначе
		
		СоответствиеРезультат["Результат"] = 0;
		
	КонецЕсли;
	
	Возврат СоответствиеРезультат
	
КонецФункции

&НаСервереБезКонтекста
// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//  требуется редакция по наименованиям ПолейТабличныхДокументов
//функция возвращает таблицу с данными для ОС для заполнения примечаний к финансовой отчетности (формы № 5)
Функция СформироватьЗапросДляОС(НачалоПериода,КонецПериода,Организация) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НачалоПериода", НачалоПериода);
	СтруктураПараметров.Вставить("КонецПериода" , КонецПериода);
	СтруктураПараметров.Вставить("КонецПериодаГраница", Новый Граница(КонецПериода, ВидГраницы.Включая));
	СтруктураПараметров.Вставить("Организация"  , Организация);
	
	Запрос = Новый Запрос();
	
	Для каждого КлючЗначение Из СтруктураПараметров Цикл
	
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);	
	
	КонецЦикла;
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	""СписокОС"" КАК ТипЗаписи,
	|	НачислениеАмортизации.ОсновноеСредство КАК Поле
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК НачислениеАмортизации
	|ГДЕ
	|	НачислениеАмортизации.НачислятьАмортизацию
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ
	|	""СписокОС"" КАК ТипЗаписи,
	|	НачислениеАмортизации.ОсновноеСредство КАК Поле
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет КАК НачислениеАмортизации
	|ГДЕ
	|	НачислениеАмортизации.НачислятьАмортизацию
	|	И НачислениеАмортизации.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НачислениеАмортизации.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаУчета"",
	|	СчетаБухгалтерскогоУчета.СчетУчета
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК СчетаБухгалтерскогоУчета
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаАмортизации"",
	|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК СчетаБухгалтерскогоУчета
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаУчета"",
	|	СчетаБухгалтерскогоУчета.СчетУчета
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС КАК СчетаБухгалтерскогоУчета
	|ГДЕ
	|	СчетаБухгалтерскогоУчета.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СчетаБухгалтерскогоУчета.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаАмортизации"",
	|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС КАК СчетаБухгалтерскогоУчета
	|ГДЕ
	|	СчетаБухгалтерскогоУчета.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СчетаБухгалтерскогоУчета.Организация = &Организация
	|
	|ИТОГИ ПО
	|	ТипЗаписи";
	
	ДеревоРезультатов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтруктураПараметров.Вставить("СписокОС"                      , Неопределено);
	СтруктураПараметров.Вставить("СчетаУчета"                    , Неопределено);
	СтруктураПараметров.Вставить("СчетаАмортизации"              , Неопределено);
	
	Для каждого СтрокаТипаЗаписи Из ДеревоРезультатов.Строки Цикл
	
		СтруктураПараметров.Вставить(СтрокаТипаЗаписи.ТипЗаписи, 
		                             СтрокаТипаЗаписи.Строки.ВыгрузитьКолонку("Поле"));	
	
	КонецЦикла;
								 
		Запрос = Новый Запрос();
	
	Для каждого КлючЗначение Из СтруктураПараметров Цикл
	
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);	
	
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПервоначальныеСведения.ОсновноеСредство                                       КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчета.СчетУчета                                            КАК СчетУчета,
	|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации                            КАК СчетНачисленияАмортизации,
	|	ЕСТЬNULL(СтоимостьОстатки.СуммаОстатокДт, 0)                                  КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияОстаткиНач.СуммаОстатокКт, 0)                             КАК АмортизацияНачальныйОстаток,
    |	ЕСТЬNULL(НачисленнаяАмортизация.СуммаОборот, 0)                               КАК АмортизацияОборот,
	|	ЕСТЬNULL(ИзменениеСтоимостиПлюс.СуммаОборот, 0)                               КАК ИзменениеСтоимостиДт,
	|	ЕСТЬNULL(СписаннаяАмортизация.СуммаОборот, 0)                                 КАК АмортизацияОборотДт,
	|	ЕСТЬNULL(ИзменениеСтоимостиМинус.СуммаОборот, 0)                              КАК ИзменениеСтоимостиКт,
    |	ЕСТЬNULL(АмортизацияОстаткиКон.СуммаОстатокКт, 0)                             КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(СтоимостьОстаткиКон.СуммаОстатокДт, 0)                               КАК СтоимостьКонечныйОстаток
	|
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|		            &КонецПериодаГраница,
	|		            Организация = &Организация
	|		            И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &НачалоПериода,
	|		                       Счет В (&СчетаУчета),
	|		                       &СубконтоОС,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (&СписокОС)) КАК СтоимостьОстатки
	|		ПО ПервоначальныеСведения.ОсновноеСредство = СтоимостьОстатки.Субконто1
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &КонецПериодаГраница,
	|		                       Счет В (&СчетаУчета),
	|		                       &СубконтоОС,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (&СписокОС)) КАК СтоимостьОстаткиКон
	|		ПО ПервоначальныеСведения.ОсновноеСредство = СтоимостьОстаткиКон.Субконто1
    |
    |
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &НачалоПериода,
	|		                       Счет В (&СчетаАмортизации),
	|		                       &СубконтоОС,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (&СписокОС)) КАК АмортизацияОстаткиНач
	|		ПО ПервоначальныеСведения.ОсновноеСредство = АмортизацияОстаткиНач.Субконто1
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|		                       &НачалоПериода,
	|		                       &КонецПериодаГраница, ,
	|		                       (СчетДт В (&СчетаУчета)),&СубконтоОС,
	|		                       Не СчетКт В (&СчетаУчета),  ,
	|		                       Организация = &Организация
	|		                       И СубконтоДт1 В (&СписокОС)
	|		                       ) КАК ИзменениеСтоимостиПлюс
	|		ПО ПервоначальныеСведения.ОсновноеСредство = ИзменениеСтоимостиПлюс.СубконтоДт1
    |
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|		                       &НачалоПериода,
	|		                       &КонецПериодаГраница, ,
	|		                       (НЕ СчетДт В (&СчетаАмортизации)), ,
	|		                       СчетКт В (&СчетаАмортизации),
	|		                       &СубконтоОС,
	|		                       Организация = &Организация
	|		                       И СубконтоКт1 В (&СписокОС)
	|		                       ) КАК НачисленнаяАмортизация
	|		ПО ПервоначальныеСведения.ОсновноеСредство = НачисленнаяАмортизация.СубконтоКт1
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|		                       &НачалоПериода,
	|		                       &КонецПериодаГраница, ,
	|		                       (Не СчетДт В (&СчетаУчета)), ,
	|		                       СчетКт В (&СчетаУчета),
	|		                       &СубконтоОС,
	|		                       Организация = &Организация
	|		                       И СубконтоКт1 В (&СписокОС)
	|		                       ) КАК ИзменениеСтоимостиМинус
	|		ПО ПервоначальныеСведения.ОсновноеСредство = ИзменениеСтоимостиМинус.СубконтоКт1
    |
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|		                       &НачалоПериода,
	|		                       &КонецПериодаГраница, ,
	|		                       (СчетДт В (&СчетаАмортизации)),&СубконтоОС,
	|		                       Не СчетКт В (&СчетаАмортизации), ,
	|		                       Организация = &Организация
	|		                       И СубконтоДт1 В (&СписокОС)
	|		                       ) КАК СписаннаяАмортизация
	|		ПО ПервоначальныеСведения.ОсновноеСредство = СписаннаяАмортизация.СубконтоДт1
    |
    |
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &КонецПериодаГраница,
	|		                       Счет В (&СчетаАмортизации),
	|		                       &СубконтоОС,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (&СписокОС)) КАК АмортизацияОстаткиКон
	|		ПО ПервоначальныеСведения.ОсновноеСредство = АмортизацияОстаткиКон.Субконто1
	|
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПервых(
	|		                    ,
	|		                    Организация = &Организация
	|		                    И ОсновноеСредство В (&СписокОС)) КАК СчетаБухгалтерскогоУчета
	|		ПО ПервоначальныеСведения.ОсновноеСредство = СчетаБухгалтерскогоУчета.ОсновноеСредство";

	
	ТаблицаИзносаОС = Запрос.Выполнить().Выгрузить();
	
	// внесем в таблицу данные по малоценным необор. активам, учитываемым количественно
	Запрос.УстановитьПараметр("СубконтоНоменклатура", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);	
	
	СчетаУчета = Новый Массив();
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.БиблиотечныеФондыКоличественно);
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.МалоценныеНеоборотныеМатериальныеАктивыКоличественно);
	Запрос.УстановитьПараметр("СчетаУчета",		   	  СчетаУчета);	
	Запрос.УстановитьПараметр("СчетаАмортизации", 	  ПланыСчетов.Хозрасчетный.ИзносДругихНеоборотныхМатериальныхАктивовКоличественно);	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.ОсновноеСредство КАК ОсновноеСредство,
	               |	МАКСИМУМ(ВложенныйЗапрос.СчетУчета) КАК СчетУчета,
	               |	СУММА(ЕСТЬNULL(ВложенныйЗапрос.СтоимостьНачальныйОстаток, 0)) КАК СтоимостьНачальныйОстаток,
	               |	СУММА(ЕСТЬNULL(ВложенныйЗапрос.АмортизацияНачальныйОстаток, 0)) КАК АмортизацияНачальныйОстаток,
	               |	СУММА(ЕСТЬNULL(ВложенныйЗапрос.АмортизацияОборот, 0)) КАК АмортизацияОборот,
	               |	СУММА(ЕСТЬNULL(ВложенныйЗапрос.АмортизацияОборотДт, 0)) КАК АмортизацияОборотДт,
	               |	СУММА(ЕСТЬNULL(ВложенныйЗапрос.АмортизацияКонечныйОстаток, 0)) КАК АмортизацияКонечныйОстаток,
	               |	СУММА(ЕСТЬNULL(ВложенныйЗапрос.СтоимостьКонечныйОстаток, 0)) КАК СтоимостьКонечныйОстаток,
	               |	СУММА(ЕСТЬNULL(ВложенныйЗапрос.ИзменениеСтоимостиДт, 0)) КАК ИзменениеСтоимостиДт,
	               |	СУММА(ЕСТЬNULL(ВложенныйЗапрос.ИзменениеСтоимостиКт, 0)) КАК ИзменениеСтоимостиКт
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		СтоимостьОстатки.Субконто1 КАК ОсновноеСредство,
	               |		СтоимостьОстатки.Счет КАК СчетУчета,
	               |		СтоимостьОстатки.СуммаОстатокДт КАК СтоимостьНачальныйОстаток,
	               |		0 КАК АмортизацияНачальныйОстаток,
	               |		0 КАК АмортизацияОборот,
	               |		0 КАК АмортизацияОборотДт,
	               |		0 КАК АмортизацияКонечныйОстаток,
	               |		0 КАК СтоимостьКонечныйОстаток,
	               |		0 КАК ИзменениеСтоимостиДт,
	               |		0 КАК ИзменениеСтоимостиКт
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, Счет В (&СчетаУчета), &СубконтоНоменклатура, Организация = &Организация) КАК СтоимостьОстатки
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		СтоимостьОстаткиКон.Субконто1,
	               |		СтоимостьОстаткиКон.Счет,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		СтоимостьОстаткиКон.СуммаОстатокДт,
	               |		0,
	               |		0
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериодаГраница, Счет В (&СчетаУчета), &СубконтоНоменклатура, Организация = &Организация) КАК СтоимостьОстаткиКон
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		АмортизацияОстаткиНач.Субконто1,
	               |		NULL,
	               |		0,
	               |		АмортизацияОстаткиНач.СуммаОстатокКт,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		0
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, Счет В (&СчетаАмортизации), &СубконтоНоменклатура, Организация = &Организация) КАК АмортизацияОстаткиНач
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		НачисленнаяАмортизация.СубконтоКт1,
	               |		NULL,
	               |		0,
	               |		0,
	               |		НачисленнаяАмортизация.СуммаОборот,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		0
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериодаГраница, , НЕ СчетДт В (&СчетаАмортизации), , СчетКт В (&СчетаАмортизации), &СубконтоНоменклатура, Организация = &Организация) КАК НачисленнаяАмортизация
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		СписаннаяАмортизация.СубконтоДт1,
	               |		NULL,
	               |		0,
	               |		0,
	               |		0,
	               |		СписаннаяАмортизация.СуммаОборот,
	               |		0,
	               |		0,
	               |		0,
	               |		0
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериодаГраница, , СчетДт В (&СчетаАмортизации), &СубконтоНоменклатура, НЕ СчетКт В (&СчетаАмортизации), , Организация = &Организация) КАК СписаннаяАмортизация
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		АмортизацияОстаткиКон.Субконто1,
	               |		NULL,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		АмортизацияОстаткиКон.СуммаОстатокКт,
	               |		0,
	               |		0,
	               |		0
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериодаГраница, Счет В (&СчетаАмортизации), &СубконтоНоменклатура, Организация = &Организация) КАК АмортизацияОстаткиКон
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ИзменениеСтоимостиПлюс.СубконтоДт1,
				   //|		NULL,
	               |		СчетДт,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		ИзменениеСтоимостиПлюс.СуммаОборот,
	               |		0
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериодаГраница, , СчетДт В (&СчетаУчета), &СубконтоНоменклатура, НЕ СчетКт В (&СчетаУчета), , Организация = &Организация) КАК ИзменениеСтоимостиПлюс
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ИзменениеСтоимостиМинус.СубконтоКт1,
				   //|		NULL,
	               |		СчетКт,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		ИзменениеСтоимостиМинус.СуммаОборот
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериодаГраница, , НЕ СчетДт В (&СчетаУчета), , СчетКт В (&СчетаУчета), &СубконтоНоменклатура, Организация = &Организация) КАК ИзменениеСтоимостиМинус) КАК ВложенныйЗапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.ОсновноеСредство";
				   
	// разблокируем тип значения у колонки "Основное средство"				   
	ТаблицаИзносаОС.Колонки.ОсновноеСредство.Имя = "_ОсновноеСредство";			   			   
	ТаблицаИзносаОС.Колонки.Добавить("ОсновноеСредство");			   
	ТаблицаИзносаОС.ЗагрузитьКолонку(ТаблицаИзносаОС.ВыгрузитьКолонку("_ОсновноеСредство"), "ОсновноеСредство");
	
	ВыборкаМНМА = Запрос.Выполнить().Выбрать();
	Пока ВыборкаМНМА.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаИзносаОС.Добавить(), ВыборкаМНМА);
	КонецЦикла;
	
	Возврат ТаблицаИзносаОС;
	
КонецФункции

&НаСервереБезКонтекста
//функция возвращает таблицу с данными для НМА для заполнения примечаний к финансовой отчетности (формы № 5)
Функция СформироватьЗапросДляНМА(НачалоПериода,КонецПериода,Организация) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НачалоПериода", НачалоПериода);
	СтруктураПараметров.Вставить("КонецПериода" , КонецПериода);
	СтруктураПараметров.Вставить("КонецПериодаГраница", Новый Граница(КонецПериода, ВидГраницы.Включая));
	СтруктураПараметров.Вставить("Организация"  , Организация);

	
	Запрос = Новый Запрос();
	
	Для каждого КлючЗначение Из СтруктураПараметров Цикл
	
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);	
	
	КонецЦикла;
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	""СписокНМА""                           КАК ТипЗаписи,
	|	НачислениеАмортизации.НематериальныйАктив КАК Поле
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|		            &НачалоПериода,
	|		            Организация = &Организация)
	|		            КАК НачислениеАмортизации
	|ГДЕ
	|	НачислениеАмортизации.НачислятьАмортизацию
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаУчета"",
	|	СчетаБухгалтерскогоУчета.СчетУчета
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|		            &НачалоПериода,
	|		            Организация = &Организация)
	|		            КАК СчетаБухгалтерскогоУчета
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаАмортизации"",
	|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|		            &НачалоПериода,
	|		            Организация = &Организация)
	|		            КАК СчетаБухгалтерскогоУчета
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ
	|	""СписокНМА""                           КАК ТипЗаписи,
	|	НачислениеАмортизации.НематериальныйАктив КАК Поле
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет
	|		            КАК НачислениеАмортизации
	|ГДЕ
	|	НачислениеАмортизации.НачислятьАмортизацию
	|	И НачислениеАмортизации.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НачислениеАмортизации.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаУчета"",
	|	СчетаБухгалтерскогоУчета.СчетУчета
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА
	|		            КАК СчетаБухгалтерскогоУчета
	|ГДЕ
	|	СчетаБухгалтерскогоУчета.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СчетаБухгалтерскогоУчета.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаАмортизации"",
	|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА
	|		            КАК СчетаБухгалтерскогоУчета
	|ГДЕ
	|	СчетаБухгалтерскогоУчета.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СчетаБухгалтерскогоУчета.Организация = &Организация
	|
	|ИТОГИ ПО
	|	ТипЗаписи";
	
	ДеревоРезультатов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтруктураПараметров.Вставить("СписокНМА"                     , Неопределено);
	СтруктураПараметров.Вставить("СчетаУчета"                    , Неопределено);
	СтруктураПараметров.Вставить("СчетаАмортизации"              , Неопределено);
	
	Для каждого СтрокаТипаЗаписи Из ДеревоРезультатов.Строки Цикл
	
		СтруктураПараметров.Вставить(СтрокаТипаЗаписи.ТипЗаписи, 
		                             СтрокаТипаЗаписи.Строки.ВыгрузитьКолонку("Поле"));	
	
	КонецЦикла;
								 
	Запрос = Новый Запрос();
	
	Для каждого КлючЗначение Из СтруктураПараметров Цикл
	
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);	
	
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СубконтоНМА", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПервоначальныеСведения.НематериальныйАктив                                    КАК НематериальныйАктив,
	|	СчетаБухгалтерскогоУчета.СчетУчета                                            КАК СчетУчета,
	|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации                            КАК СчетНачисленияАмортизации,
	|	ЕСТЬNULL(СтоимостьОстатки.СуммаОстатокДт, 0)                                  КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияОстаткиНач.СуммаОстатокКт, 0)                             КАК АмортизацияНачальныйОстаток,
    |	ЕСТЬNULL(НачисленнаяАмортизация.СуммаОборот, 0)                               КАК АмортизацияОборот,
	|	ЕСТЬNULL(ИзменениеСтоимостиПлюс.СуммаОборот, 0)                               КАК ИзменениеСтоимостиДт,
	|	ЕСТЬNULL(СписаннаяАмортизация.СуммаОборот, 0)                                 КАК АмортизацияОборотДт,
	|	ЕСТЬNULL(ИзменениеСтоимостиМинус.СуммаОборот, 0)                              КАК ИзменениеСтоимостиКт,
    |	ЕСТЬNULL(АмортизацияОстаткиКон.СуммаОстатокКт, 0)                             КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(СтоимостьОстаткиКон.СуммаОстатокДт, 0)                               КАК СтоимостьКонечныйОстаток
	|
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|		            &КонецПериодаГраница,
	|		            Организация = &Организация
	|		            И НематериальныйАктив В (&СписокНМА)) КАК ПервоначальныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &НачалоПериода,
	|		                       Счет В (&СчетаУчета),
	|		                       &СубконтоНМА,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (&СписокНМА)) КАК СтоимостьОстатки
	|		ПО ПервоначальныеСведения.НематериальныйАктив = СтоимостьОстатки.Субконто1
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &КонецПериодаГраница,
	|		                       Счет В (&СчетаУчета),
	|		                       &СубконтоНМА,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (&СписокНМА)) КАК СтоимостьОстаткиКон
	|		ПО ПервоначальныеСведения.НематериальныйАктив = СтоимостьОстаткиКон.Субконто1
    |
    |
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &НачалоПериода,
	|		                       Счет В (&СчетаАмортизации),
	|		                       &СубконтоНМА,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (&СписокНМА)) КАК АмортизацияОстаткиНач
	|		ПО ПервоначальныеСведения.НематериальныйАктив = АмортизацияОстаткиНач.Субконто1
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|		                       &НачалоПериода,
	|		                       &КонецПериодаГраница, ,
	|		                       (СчетДт В (&СчетаУчета)),
	|		                       &СубконтоНМА,
	|		                       Не СчетКт В (&СчетаУчета), ,
	|		                       Организация = &Организация
	|		                       И СубконтоДт1 В (&СписокНМА)
	|		                       ) КАК ИзменениеСтоимостиПлюс
	|		ПО ПервоначальныеСведения.НематериальныйАктив = ИзменениеСтоимостиПлюс.СубконтоДт1
    |
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|		                       &НачалоПериода,
	|		                       &КонецПериодаГраница, ,
	|		                       (НЕ СчетДт В (&СчетаАмортизации)), ,
	|		                       СчетКт В (&СчетаАмортизации),
	|		                       &СубконтоНМА,
	|		                       Организация = &Организация
	|		                       И СубконтоКт1 В (&СписокНМА)
	|		                       ) КАК НачисленнаяАмортизация
	|		ПО ПервоначальныеСведения.НематериальныйАктив = НачисленнаяАмортизация.СубконтоКт1
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|		                       &НачалоПериода,
	|		                       &КонецПериодаГраница, ,
	|		                       (Не СчетДт В (&СчетаУчета)), ,
	|		                       СчетКт В (&СчетаУчета),
	|		                       &СубконтоНМА,
	|		                       Организация = &Организация
	|		                       И СубконтоКт1 В (&СписокНМА)
	|		                       ) КАК ИзменениеСтоимостиМинус
	|		ПО ПервоначальныеСведения.НематериальныйАктив = ИзменениеСтоимостиМинус.СубконтоКт1
    |
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|		                       &НачалоПериода,
	|		                       &КонецПериодаГраница, ,
	|		                       (СчетДт В (&СчетаАмортизации)),
	|		                       &СубконтоНМА,
	|		                       Не СчетКт В (&СчетаАмортизации), ,
	|		                       Организация = &Организация
	|		                       И СубконтоДт1 В (&СписокНМА)
	|		                       ) КАК СписаннаяАмортизация
	|		ПО ПервоначальныеСведения.НематериальныйАктив = СписаннаяАмортизация.СубконтоДт1
    |
    |
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &КонецПериодаГраница,
	|		                       Счет В (&СчетаАмортизации),
	|		                       &СубконтоНМА,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (&СписокНМА)) КАК АмортизацияОстаткиКон
	|		ПО ПервоначальныеСведения.НематериальныйАктив = АмортизацияОстаткиКон.Субконто1
	|
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|		                    &КонецПериодаГраница,
	|		                    Организация = &Организация
	|		                    И НематериальныйАктив В (&СписокНМА)) КАК СчетаБухгалтерскогоУчета
	|		ПО ПервоначальныеСведения.НематериальныйАктив = СчетаБухгалтерскогоУчета.НематериальныйАктив";

    ТаблицаИзносаНМА = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаИзносаНМА;
	
КонецФункции

Функция СформироватьЗапросДляОСERP25(НачалоПериода,КонецПериода,Организация) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НачалоПериода", НачалоПериода);
	СтруктураПараметров.Вставить("КонецПериода" , КонецПериода);
	СтруктураПараметров.Вставить("КонецПериодаГраница", Новый Граница(КонецПериода, ВидГраницы.Включая));
	СтруктураПараметров.Вставить("Организация"  , Организация);
	
	Запрос = Новый Запрос();
	
	Для каждого КлючЗначение Из СтруктураПараметров Цикл
	
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);	
	
	КонецЦикла;
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	""СписокОС"" КАК ТипЗаписи,
	|	НачислениеАмортизации.ОсновноеСредство КАК Поле
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК НачислениеАмортизации
	|ГДЕ
	|	НачислениеАмортизации.НачислятьАмортизациюБУ
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ
	|	""СписокОС"" КАК ТипЗаписи,
	|	НачислениеАмортизации.ОсновноеСредство КАК Поле
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОСБУ КАК НачислениеАмортизации
	|ГДЕ
	|	НачислениеАмортизации.НачислятьАмортизациюБУ
	|	И НачислениеАмортизации.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НачислениеАмортизации.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаУчета"",
	|	СчетаБухгалтерскогоУчета.СчетУчета
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОС.СрезПоследних(&НачалоПериода) КАК СчетаБухгалтерскогоУчета
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаАмортизации"",
	|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОС.СрезПоследних(&НачалоПериода) КАК СчетаБухгалтерскогоУчета
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаУчета"",
	|	СчетаБухгалтерскогоУчета.СчетУчета
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОС КАК СчетаБухгалтерскогоУчета
	|ГДЕ
	|	СчетаБухгалтерскогоУчета.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаАмортизации"",
	|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОС КАК СчетаБухгалтерскогоУчета
	|ГДЕ
	|	СчетаБухгалтерскогоУчета.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ИТОГИ ПО
	|	ТипЗаписи";
	
	ДеревоРезультатов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтруктураПараметров.Вставить("СписокОС"                      , Неопределено);
	СтруктураПараметров.Вставить("СчетаУчета"                    , Неопределено);
	СтруктураПараметров.Вставить("СчетаАмортизации"              , Неопределено);
	
	Для каждого СтрокаТипаЗаписи Из ДеревоРезультатов.Строки Цикл
	
		СтруктураПараметров.Вставить(СтрокаТипаЗаписи.ТипЗаписи, 
		                             СтрокаТипаЗаписи.Строки.ВыгрузитьКолонку("Поле"));	
	
	КонецЦикла;
								 
		Запрос = Новый Запрос();
	
	Для каждого КлючЗначение Из СтруктураПараметров Цикл
	
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);	
	
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СубконтоОС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПервоначальныеСведения.ОсновноеСредство                                       КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчета.СчетУчета                                            КАК СчетУчета,
	|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации                            		  КАК СчетНачисленияАмортизации,
	|	ЕСТЬNULL(СтоимостьОстатки.СуммаОстатокДт, 0)                                  КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияОстаткиНач.СуммаОстатокКт, 0)                             КАК АмортизацияНачальныйОстаток,
    |	ЕСТЬNULL(НачисленнаяАмортизация.СуммаОборот, 0)                               КАК АмортизацияОборот,
	|	ЕСТЬNULL(ИзменениеСтоимостиПлюс.СуммаОборот, 0)                               КАК ИзменениеСтоимостиДт,
	|	ЕСТЬNULL(СписаннаяАмортизация.СуммаОборот, 0)                                 КАК АмортизацияОборотДт,
	|	ЕСТЬNULL(ИзменениеСтоимостиМинус.СуммаОборот, 0)                              КАК ИзменениеСтоимостиКт,
    |	ЕСТЬNULL(АмортизацияОстаткиКон.СуммаОстатокКт, 0)                             КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(СтоимостьОстаткиКон.СуммаОстатокДт, 0)                               КАК СтоимостьКонечныйОстаток
	|
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
	|		            &КонецПериодаГраница,
	|		            Организация = &Организация
	|		            И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &НачалоПериода,
	|		                       Счет В (&СчетаУчета),
	|		                       &СубконтоОС,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (&СписокОС)) КАК СтоимостьОстатки
	|		ПО ПервоначальныеСведения.ОсновноеСредство = СтоимостьОстатки.Субконто1
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &КонецПериодаГраница,
	|		                       Счет В (&СчетаУчета),
	|		                       &СубконтоОС,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (&СписокОС)) КАК СтоимостьОстаткиКон
	|		ПО ПервоначальныеСведения.ОсновноеСредство = СтоимостьОстаткиКон.Субконто1
    |
    |
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &НачалоПериода,
	|		                       Счет В (&СчетаАмортизации),
	|		                       &СубконтоОС,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (&СписокОС)) КАК АмортизацияОстаткиНач
	|		ПО ПервоначальныеСведения.ОсновноеСредство = АмортизацияОстаткиНач.Субконто1
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|		                       &НачалоПериода,
	|		                       &КонецПериодаГраница, ,
	|		                       (СчетДт В (&СчетаУчета)),&СубконтоОС,
	|		                       Не СчетКт В (&СчетаУчета),  ,
	|		                       Организация = &Организация
	|		                       И СубконтоДт1 В (&СписокОС)
	|		                       ) КАК ИзменениеСтоимостиПлюс
	|		ПО ПервоначальныеСведения.ОсновноеСредство = ИзменениеСтоимостиПлюс.СубконтоДт1
    |
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|		                       &НачалоПериода,
	|		                       &КонецПериодаГраница, ,
	|		                       (НЕ СчетДт В (&СчетаАмортизации)), ,
	|		                       СчетКт В (&СчетаАмортизации),
	|		                       &СубконтоОС,
	|		                       Организация = &Организация
	|		                       И СубконтоКт1 В (&СписокОС)
	|		                       ) КАК НачисленнаяАмортизация
	|		ПО ПервоначальныеСведения.ОсновноеСредство = НачисленнаяАмортизация.СубконтоКт1
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|		                       &НачалоПериода,
	|		                       &КонецПериодаГраница, ,
	|		                       (Не СчетДт В (&СчетаУчета)), ,
	|		                       СчетКт В (&СчетаУчета),
	|		                       &СубконтоОС,
	|		                       Организация = &Организация
	|		                       И СубконтоКт1 В (&СписокОС)
	|		                       ) КАК ИзменениеСтоимостиМинус
	|		ПО ПервоначальныеСведения.ОсновноеСредство = ИзменениеСтоимостиМинус.СубконтоКт1
    |
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|		                       &НачалоПериода,
	|		                       &КонецПериодаГраница, ,
	|		                       (СчетДт В (&СчетаАмортизации)),&СубконтоОС,
	|		                       Не СчетКт В (&СчетаАмортизации), ,
	|		                       Организация = &Организация
	|		                       И СубконтоДт1 В (&СписокОС)
	|		                       ) КАК СписаннаяАмортизация
	|		ПО ПервоначальныеСведения.ОсновноеСредство = СписаннаяАмортизация.СубконтоДт1
    |
    |
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &КонецПериодаГраница,
	|		                       Счет В (&СчетаАмортизации),
	|		                       &СубконтоОС,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (&СписокОС)) КАК АмортизацияОстаткиКон
	|		ПО ПервоначальныеСведения.ОсновноеСредство = АмортизацияОстаткиКон.Субконто1
	|
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.ПорядокУчетаОС.СрезПервых(
	|		                    ,
	|		                    ОсновноеСредство В (&СписокОС)) КАК СчетаБухгалтерскогоУчета
	|		ПО ПервоначальныеСведения.ОсновноеСредство = СчетаБухгалтерскогоУчета.ОсновноеСредство";

	
	ТаблицаИзносаОС = Запрос.Выполнить().Выгрузить();
	
	// внесем в таблицу данные по малоценным необор. активам, учитываемым количественно
	Запрос.УстановитьПараметр("СубконтоНоменклатура", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);	
	
	СчетаУчета = Новый Массив();
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.БиблиотечныеФондыКоличественно);
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.МалоценныеНеоборотныеМатериальныеАктивыКоличественно);
	Запрос.УстановитьПараметр("СчетаУчета",		   	  СчетаУчета);	
	Запрос.УстановитьПараметр("СчетаАмортизации", 	  ПланыСчетов.Хозрасчетный.ИзносДругихНеоборотныхМатериальныхАктивовКоличественно);	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВложенныйЗапрос.ОсновноеСредство КАК ОсновноеСредство,
	               |	МАКСИМУМ(ВложенныйЗапрос.СчетУчета) КАК СчетУчета,
	               |	СУММА(ЕСТЬNULL(ВложенныйЗапрос.СтоимостьНачальныйОстаток, 0)) КАК СтоимостьНачальныйОстаток,
	               |	СУММА(ЕСТЬNULL(ВложенныйЗапрос.АмортизацияНачальныйОстаток, 0)) КАК АмортизацияНачальныйОстаток,
	               |	СУММА(ЕСТЬNULL(ВложенныйЗапрос.АмортизацияОборот, 0)) КАК АмортизацияОборот,
	               |	СУММА(ЕСТЬNULL(ВложенныйЗапрос.АмортизацияОборотДт, 0)) КАК АмортизацияОборотДт,
	               |	СУММА(ЕСТЬNULL(ВложенныйЗапрос.АмортизацияКонечныйОстаток, 0)) КАК АмортизацияКонечныйОстаток,
	               |	СУММА(ЕСТЬNULL(ВложенныйЗапрос.СтоимостьКонечныйОстаток, 0)) КАК СтоимостьКонечныйОстаток,
	               |	СУММА(ЕСТЬNULL(ВложенныйЗапрос.ИзменениеСтоимостиДт, 0)) КАК ИзменениеСтоимостиДт,
	               |	СУММА(ЕСТЬNULL(ВложенныйЗапрос.ИзменениеСтоимостиКт, 0)) КАК ИзменениеСтоимостиКт
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		СтоимостьОстатки.Субконто1 КАК ОсновноеСредство,
	               |		СтоимостьОстатки.Счет КАК СчетУчета,
	               |		СтоимостьОстатки.СуммаОстатокДт КАК СтоимостьНачальныйОстаток,
	               |		0 КАК АмортизацияНачальныйОстаток,
	               |		0 КАК АмортизацияОборот,
	               |		0 КАК АмортизацияОборотДт,
	               |		0 КАК АмортизацияКонечныйОстаток,
	               |		0 КАК СтоимостьКонечныйОстаток,
	               |		0 КАК ИзменениеСтоимостиДт,
	               |		0 КАК ИзменениеСтоимостиКт
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, Счет В (&СчетаУчета), &СубконтоНоменклатура, Организация = &Организация) КАК СтоимостьОстатки
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		СтоимостьОстаткиКон.Субконто1,
	               |		СтоимостьОстаткиКон.Счет,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		СтоимостьОстаткиКон.СуммаОстатокДт,
	               |		0,
	               |		0
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериодаГраница, Счет В (&СчетаУчета), &СубконтоНоменклатура, Организация = &Организация) КАК СтоимостьОстаткиКон
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		АмортизацияОстаткиНач.Субконто1,
	               |		NULL,
	               |		0,
	               |		АмортизацияОстаткиНач.СуммаОстатокКт,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		0
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, Счет В (&СчетаАмортизации), &СубконтоНоменклатура, Организация = &Организация) КАК АмортизацияОстаткиНач
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		НачисленнаяАмортизация.СубконтоКт1,
	               |		NULL,
	               |		0,
	               |		0,
	               |		НачисленнаяАмортизация.СуммаОборот,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		0
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериодаГраница, , НЕ СчетДт В (&СчетаАмортизации), , СчетКт В (&СчетаАмортизации), &СубконтоНоменклатура, Организация = &Организация) КАК НачисленнаяАмортизация
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		СписаннаяАмортизация.СубконтоДт1,
	               |		NULL,
	               |		0,
	               |		0,
	               |		0,
	               |		СписаннаяАмортизация.СуммаОборот,
	               |		0,
	               |		0,
	               |		0,
	               |		0
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериодаГраница, , СчетДт В (&СчетаАмортизации), &СубконтоНоменклатура, НЕ СчетКт В (&СчетаАмортизации), , Организация = &Организация) КАК СписаннаяАмортизация
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		АмортизацияОстаткиКон.Субконто1,
	               |		NULL,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		АмортизацияОстаткиКон.СуммаОстатокКт,
	               |		0,
	               |		0,
	               |		0
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериодаГраница, Счет В (&СчетаАмортизации), &СубконтоНоменклатура, Организация = &Организация) КАК АмортизацияОстаткиКон
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ИзменениеСтоимостиПлюс.СубконтоДт1,
	               |		СчетДт,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		ИзменениеСтоимостиПлюс.СуммаОборот,
	               |		0
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериодаГраница, , СчетДт В (&СчетаУчета), &СубконтоНоменклатура, НЕ СчетКт В (&СчетаУчета), , Организация = &Организация) КАК ИзменениеСтоимостиПлюс
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ИзменениеСтоимостиМинус.СубконтоКт1,
	               |		СчетКт,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		0,
	               |		ИзменениеСтоимостиМинус.СуммаОборот
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&НачалоПериода, &КонецПериодаГраница, , НЕ СчетДт В (&СчетаУчета), , СчетКт В (&СчетаУчета), &СубконтоНоменклатура, Организация = &Организация) КАК ИзменениеСтоимостиМинус) КАК ВложенныйЗапрос
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВложенныйЗапрос.ОсновноеСредство";
				   
	// разблокируем тип значения у колонки "Основное средство"				   
	ТаблицаИзносаОС.Колонки.ОсновноеСредство.Имя = "_ОсновноеСредство";			   			   
	ТаблицаИзносаОС.Колонки.Добавить("ОсновноеСредство");			   
	ТаблицаИзносаОС.ЗагрузитьКолонку(ТаблицаИзносаОС.ВыгрузитьКолонку("_ОсновноеСредство"), "ОсновноеСредство");
	
	ВыборкаМНМА = Запрос.Выполнить().Выбрать();
	Пока ВыборкаМНМА.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаИзносаОС.Добавить(), ВыборкаМНМА);
	КонецЦикла;
	
	Возврат ТаблицаИзносаОС;
	
КонецФункции

&НаСервереБезКонтекста
//функция возвращает таблицу с данными для НМА для заполнения примечаний к финансовой отчетности (формы № 5)
Функция СформироватьЗапросДляНМАERP25(НачалоПериода,КонецПериода,Организация) Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НачалоПериода", НачалоПериода);
	СтруктураПараметров.Вставить("КонецПериода" , КонецПериода);
	СтруктураПараметров.Вставить("КонецПериодаГраница", Новый Граница(КонецПериода, ВидГраницы.Включая));
	СтруктураПараметров.Вставить("Организация"  , Организация);

	Запрос = Новый Запрос();
	
	Для каждого КлючЗначение Из СтруктураПараметров Цикл
	
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);	
	
	КонецЦикла;
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	""СписокНМА""                           КАК ТипЗаписи,
	|	НачислениеАмортизации.НематериальныйАктив КАК Поле
	|ИЗ
	|	РегистрСведений.ПорядокУчетаНМАБУ.СрезПоследних(
	|		            &НачалоПериода,
	|		            Организация = &Организация)
	|		            КАК НачислениеАмортизации
	|ГДЕ
	|	НачислениеАмортизации.НачислятьАмортизациюБУ
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаУчета"",
	|	СчетаБухгалтерскогоУчета.СчетУчета
	|ИЗ
	|	РегистрСведений.ПорядокУчетаНМА.СрезПоследних(
	|		            &НачалоПериода)
	|		            КАК СчетаБухгалтерскогоУчета
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаАмортизации"",
	|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации
	|ИЗ
	|	РегистрСведений.ПорядокУчетаНМА.СрезПоследних(
	|		            &НачалоПериода)
	|		            КАК СчетаБухгалтерскогоУчета
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ
	|	""СписокНМА""                           КАК ТипЗаписи,
	|	НачислениеАмортизации.НематериальныйАктив КАК Поле
	|ИЗ
	|	РегистрСведений.ПорядокУчетаНМАБУ
	|		            КАК НачислениеАмортизации
	|ГДЕ
	|	НачислениеАмортизации.НачислятьАмортизациюБУ
	|	И НачислениеАмортизации.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НачислениеАмортизации.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаУчета"",
	|	СчетаБухгалтерскогоУчета.СчетУчета
	|ИЗ
	|	РегистрСведений.ПорядокУчетаНМА
	|		            КАК СчетаБухгалтерскогоУчета
	|ГДЕ
	|	СчетаБухгалтерскогоУчета.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""СчетаАмортизации"",
	|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации
	|ИЗ
	|	РегистрСведений.ПорядокУчетаНМА
	|		            КАК СчетаБухгалтерскогоУчета
	|ГДЕ
	|	СчетаБухгалтерскогоУчета.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ИТОГИ ПО
	|	ТипЗаписи";
	
	ДеревоРезультатов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтруктураПараметров.Вставить("СписокНМА"                     , Неопределено);
	СтруктураПараметров.Вставить("СчетаУчета"                    , Неопределено);
	СтруктураПараметров.Вставить("СчетаАмортизации"              , Неопределено);
	
	Для каждого СтрокаТипаЗаписи Из ДеревоРезультатов.Строки Цикл
	
		СтруктураПараметров.Вставить(СтрокаТипаЗаписи.ТипЗаписи, 
		                             СтрокаТипаЗаписи.Строки.ВыгрузитьКолонку("Поле"));	
	
	КонецЦикла;
								 
	Запрос = Новый Запрос();
	
	Для каждого КлючЗначение Из СтруктураПараметров Цикл
	
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);	
	
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СубконтоНМА", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);	
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПервоначальныеСведения.НематериальныйАктив                                    КАК НематериальныйАктив,
	|	СчетаБухгалтерскогоУчета.СчетУчета                                            КАК СчетУчета,
	|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации                            КАК СчетНачисленияАмортизации,
	|	ЕСТЬNULL(СтоимостьОстатки.СуммаОстатокДт, 0)                                  КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияОстаткиНач.СуммаОстатокКт, 0)                             КАК АмортизацияНачальныйОстаток,
    |	ЕСТЬNULL(НачисленнаяАмортизация.СуммаОборот, 0)                               КАК АмортизацияОборот,
	|	ЕСТЬNULL(ИзменениеСтоимостиПлюс.СуммаОборот, 0)                               КАК ИзменениеСтоимостиДт,
	|	ЕСТЬNULL(СписаннаяАмортизация.СуммаОборот, 0)                                 КАК АмортизацияОборотДт,
	|	ЕСТЬNULL(ИзменениеСтоимостиМинус.СуммаОборот, 0)                              КАК ИзменениеСтоимостиКт,
    |	ЕСТЬNULL(АмортизацияОстаткиКон.СуммаОстатокКт, 0)                             КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(СтоимостьОстаткиКон.СуммаОстатокДт, 0)                               КАК СтоимостьКонечныйОстаток
	|
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(
	|		            &КонецПериодаГраница,
	|		            Организация = &Организация
	|		            И НематериальныйАктив В (&СписокНМА)) КАК ПервоначальныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &НачалоПериода,
	|		                       Счет В (&СчетаУчета),
	|		                       &СубконтоНМА,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (&СписокНМА)) КАК СтоимостьОстатки
	|		ПО ПервоначальныеСведения.НематериальныйАктив = СтоимостьОстатки.Субконто1
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &КонецПериодаГраница,
	|		                       Счет В (&СчетаУчета),
	|		                       &СубконтоНМА,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (&СписокНМА)) КАК СтоимостьОстаткиКон
	|		ПО ПервоначальныеСведения.НематериальныйАктив = СтоимостьОстаткиКон.Субконто1
    |
    |
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &НачалоПериода,
	|		                       Счет В (&СчетаАмортизации),
	|		                       &СубконтоНМА,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (&СписокНМА)) КАК АмортизацияОстаткиНач
	|		ПО ПервоначальныеСведения.НематериальныйАктив = АмортизацияОстаткиНач.Субконто1
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|		                       &НачалоПериода,
	|		                       &КонецПериодаГраница, ,
	|		                       (СчетДт В (&СчетаУчета)), 
	|		                       &СубконтоНМА,
	|		                       Не СчетКт В (&СчетаУчета), ,
	|		                       Организация = &Организация
	|		                       И СубконтоДт1 В (&СписокНМА)
	|		                       ) КАК ИзменениеСтоимостиПлюс
	|		ПО ПервоначальныеСведения.НематериальныйАктив = ИзменениеСтоимостиПлюс.СубконтоДт1
    |
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|		                       &НачалоПериода,
	|		                       &КонецПериодаГраница, ,
	|		                       (НЕ СчетДт В (&СчетаАмортизации)), ,
	|		                       СчетКт В (&СчетаАмортизации),
	|		                       &СубконтоНМА,
	|		                       Организация = &Организация
	|		                       И СубконтоКт1 В (&СписокНМА)
	|		                       ) КАК НачисленнаяАмортизация
	|		ПО ПервоначальныеСведения.НематериальныйАктив = НачисленнаяАмортизация.СубконтоКт1
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|		                       &НачалоПериода,
	|		                       &КонецПериодаГраница, ,
	|		                       (Не СчетДт В (&СчетаУчета)), ,
	|		                       СчетКт В (&СчетаУчета),
	|		                       &СубконтоНМА,
	|		                       Организация = &Организация
	|		                       И СубконтоКт1 В (&СписокНМА)
	|		                       ) КАК ИзменениеСтоимостиМинус
	|		ПО ПервоначальныеСведения.НематериальныйАктив = ИзменениеСтоимостиМинус.СубконтоКт1
    |
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|		                       &НачалоПериода,
	|		                       &КонецПериодаГраница, ,
	|		                       (СчетДт В (&СчетаАмортизации)),
	|		                       &СубконтоНМА,
	|		                       Не СчетКт В (&СчетаАмортизации), ,
	|		                       Организация = &Организация
	|		                       И СубконтоДт1 В (&СписокНМА)
	|		                       ) КАК СписаннаяАмортизация
	|		ПО ПервоначальныеСведения.НематериальныйАктив = СписаннаяАмортизация.СубконтоДт1
    |
    |
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		                       &КонецПериодаГраница,
	|		                       Счет В (&СчетаАмортизации),
	|		                       &СубконтоНМА,
	|		                       Организация = &Организация
	|		                       И Субконто1 В (&СписокНМА)) КАК АмортизацияОстаткиКон
	|		ПО ПервоначальныеСведения.НематериальныйАктив = АмортизацияОстаткиКон.Субконто1
	|
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.ПорядокУчетаНМА.СрезПоследних(
	|		                    &КонецПериодаГраница,
	|		                    НематериальныйАктив В (&СписокНМА)) КАК СчетаБухгалтерскогоУчета
	|		ПО ПервоначальныеСведения.НематериальныйАктив = СчетаБухгалтерскогоУчета.НематериальныйАктив";

    ТаблицаИзносаНМА = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаИзносаНМА;
	
КонецФункции

&НаКлиенте
Процедура ВводЧислаВСкобкахЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки = ДополнительныеПараметры.ИмяЯчейки;
	
	ТабличныйДокумент.Области[ИмяЯчейки].Значение = РезультатВыбора; 
	ЗаполнитьПоказательНаСервере(ИмяЯчейки, РезультатВыбора, ЭтаФорма, "Баланс");
	
	// отобразим показатель "в скобках"
	ТабличныйДокумент.Области["_" +ИмяЯчейки].Значение = Формат(-РезультатВыбора,  "ЧО=0" + СтруктураРеквизитовФормы.мСтрокаФормата);// формат отображения
	
	Расчет(ЭтаФорма,,ИмяЯчейки);
		
КонецПроцедуры


&НаСервере
// Функция определяет страницу основной панели формы, на которой табличный документ
// содержит показатель по переданному параметром "КодПоказателя" коду.
//
// Параметры:
//  КодПоказателя - строка, код показателя.
//
// Возвращаемое значение:
//  строка, имя найденной страницы основной панели формы.
//  Если страница не найдена, возвращает Неопределено.
//  унифицирована для всех отчетов
Функция ОпределитьРазделПоКодуПоказателя(КодПоказателя)
	Перем ИмяСтраницы;
	
	Отбор = новый Структура("КодПоказателяПоСоставу", КодПоказателя);
	НайденнаяСтрока = мТаблицаСоставПоказателей.НайтиСтроки(Отбор);
	
	Если НайденнаяСтрока <> Неопределено Тогда
		ИмяСтраницы = НайденнаяСтрока[0].ИмяПоляТаблДокумента;
	КонецЕсли;
	
	Отбор = новый Структура("КодПоказателяПоФорме", КодПоказателя);
	НайденнаяСтрока = мТаблицаСоставПоказателей.НайтиСтроки(Отбор);
	
	Если НайденнаяСтрока <> Неопределено Тогда
		ИмяСтраницы = НайденнаяСтрока[0].ИмяПоляТаблДокумента;
	КонецЕсли;

	Возврат ИмяСтраницы;
	
КонецФункции // ОпределитьСтраницуПанелиПоКодуПоказателя()

&НаСервере
Процедура УстановитьЗначениеПоказателя(Имя, Значение)

	ИмяРаздела = ОпределитьРазделПоКодуПоказателя(Имя);

	ЭтаФорма["СтруктураДанных" + ИмяРаздела][Имя] = Значение;
	
КонецПроцедуры


&НаСервере
Процедура _ДобавитьСтрокуРасшифровки(Форма, ИмяЯчейки, ИмяПоказателя, ЗнакОперации, ИмяСлагаемого, Сумма, Счет = Неопределено, КорСчет = Неопределено, Сдвиг = Неопределено, ПраваяГраница = Неопределено, ИмяРаздела = Неопределено, НомерЛиста = Неопределено, МнЧ = Неопределено, НомерСтроки = Неопределено, Субконто1 = Неопределено, Субконто2 = Неопределено, Субконто3 = Неопределено)
	
	ИмяСлагаемого = СтрЗаменить(ИмяСлагаемого, "!СНДРС", "!СНДР");
	ИмяСлагаемого = СтрЗаменить(ИмяСлагаемого, "!СКДРС", "!СКДР");
	ИмяСлагаемого = СтрЗаменить(ИмяСлагаемого, "!СНКРС", "!СНКР");
	ИмяСлагаемого = СтрЗаменить(ИмяСлагаемого, "!СККРС", "!СККР");
	
	ДополнительныеПараметры = НастройкиОСВПоСчету(ОбщиеПараметрыРасшифровки, Счет);
	
	Если    Лев(ИмяСлагаемого, 5) = "!СНДР" 
		ИЛИ Лев(ИмяСлагаемого, 5) = "!СКДР" 
		ИЛИ Лев(ИмяСлагаемого, 5) = "!СНКР" 
		ИЛИ Лев(ИмяСлагаемого, 5) = "!СККР" Тогда
	
		ДополнительныеПараметры.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("РазвернутоеСальдо", Истина);	
		
		
		ТабличнаяЧастьГруппировка = Новый Массив;
		СчВидовСубконто = 0;
		Для каждого СтрокаВидовСубконто Из Счет.ВидыСубконто Цикл
			
			СчВидовСубконто = СчВидовСубконто + 1;
			ОписаниеГруппировки = Новый Структура;
			ОписаниеГруппировки.Вставить("Использование", Истина);
			ОписаниеГруппировки.Вставить("Поле", "Субконто" + СчВидовСубконто);
			ОписаниеГруппировки.Вставить("Представление", СтрокаВидовСубконто.ВидСубконто);
			ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
			ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
		
		КонецЦикла;
		
		ДополнительныеПараметры.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка", ТабличнаяЧастьГруппировка);
		
	КонецЕсли;
	
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяЯчейки, ИмяПоказателя, ЗнакОперации, ИмяСлагаемого + " " + ?(ЗначениеЗаполнено(Счет), Счет.Код, "") + " " + ?(ЗначениеЗаполнено(КорСчет), КорСчет.Код, ""), Сумма, "ДДС", ДополнительныеПараметры);
	

КонецПроцедуры

&НаСервере
Функция НастройкиОСВПоСчету(ОбщиеНастройки, Счет, ОтборПоАналитике = Неопределено) Экспорт
	
	Если ОбщиеНастройки.Свойство("ПараметрыРасшифровки") Тогда
		Организация   = ОбщиеНастройки.ПараметрыРасшифровки.Организация;
		НачалоПериода = ОбщиеНастройки.ПараметрыРасшифровки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.ПараметрыРасшифровки.КонецПериода;
	Иначе
		Организация   = ОбщиеНастройки.Организация;
		НачалоПериода = ОбщиеНастройки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.КонецПериода;
	КонецЕсли;
	
	НастройкиРасшифровки = Новый Структура;
	НастройкиРасшифровки.Вставить("Организация", Организация);
	
	НастройкиРасшифровки.Вставить("Отчет", Новый Структура);
	НастройкиРасшифровки.Отчет.Вставить("ИмяОтчета", "Отчет.ОборотноСальдоваяВедомостьПоСчету.Форма.ФормаОтчета");
	
	НастройкиРасшифровки.Отчет.Вставить("ПараметрыФормы", Новый Структура);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация",   Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецПериода);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Счет", Счет);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоСубсчетам", Истина);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательБУ",            Истина);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВалютнаяСумма", Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКоличество",    Ложь);
	
	Если ОтборПоАналитике <> Неопределено Тогда
		Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
		
		Для Каждого ЭлементОтбора Из ОтборПоАналитике Цикл
			ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ);
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Структура") Тогда
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ЭлементОтбора.Значение.ВидСравненияКомпоновкиДанных, ЭлементОтбора.Значение.Значение);
			Иначе
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияКомпоновкиДанных.Равно, ЭлементОтбора.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НастройкиРасшифровки.Отчет.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

&НаСервере
Процедура ДобавитьЗначениеВОтбор(Отбор, ЛевоеЗначение, ВидСравнения, ПравоеЗначение)
	
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение    = ЛевоеЗначение;
	ЭлементОтбора.ВидСравнения     = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
КонецПроцедуры


&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя)
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Возврат;
	
КонецПроцедуры

