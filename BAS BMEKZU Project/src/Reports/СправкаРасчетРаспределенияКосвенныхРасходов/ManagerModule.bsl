#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


Функция ПолучитьПараметрыИсполненияОтчета() Экспорт
	
	Возврат Новый Структура("ИспользоватьПередКомпоновкойМакета,
	|ИспользоватьПослеКомпоновкиМакета,
	|ИспользоватьПослеВыводаРезультата,
	|ИспользоватьДанныеРасшифровки,
	|ИспользоватьПриВыводеЗаголовка",
	Истина, Истина, Истина, Ложь,Истина);
	
КонецФункции

Процедура ПриВыводеЗаголовка(ПараметрыОтчета,Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Организация");
	
	//Организация
	ТекстОрганизация = БухгалтерскиеОтчетыВызовСервераПовтИсп.ПолучитьТекстОрганизация(ПараметрыОтчета.Организация);
	ОбластьОрганизация.Параметры.НазваниеОрганизации = ТекстОрганизация;
	Результат.Вывести(ОбластьОрганизация);
	
	//Заголовок
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = "" + ПолучитьТекстЗаголовка(ПараметрыОтчета) + " (" + ПараметрыОтчета.НазваниеНабораПоказателейОтчета + ")";
	Результат.Вывести(ОбластьЗаголовок);
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	
	// Единица измерения
	Если ПараметрыОтчета.Свойство("ВыводитьЕдиницуИзмерения")
		И ПараметрыОтчета.ВыводитьЕдиницуИзмерения Тогда
		ОбластьОписаниеЕдиницыИзмерения = Макет.ПолучитьОбласть("ОписаниеЕдиницыИзмерения");
		Результат.Вывести(ОбластьОписаниеЕдиницыИзмерения);
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиПоИмени(Структура, Имя)
	Группировка = Неопределено;
	Для каждого Элемент Из Структура Цикл
		Если ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Если Элемент.Имя = Имя Тогда
				Возврат Элемент;
			КонецЕсли;	
		Иначе
			Если Элемент.Имя = Имя Тогда
				Возврат Элемент;
			КонецЕсли;	
			Для каждого Поле Из Элемент.ПоляГруппировки.Элементы Цикл
				Если Не ТипЗнч(Поле) = Тип("АвтоПолеГруппировкиКомпоновкиДанных") Тогда
					Если Поле.Поле = Новый ПолеКомпоновкиДанных(Имя) Тогда
						Возврат Элемент;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если Элемент.Структура.Количество() = 0 Тогда
				Продолжить;
			Иначе
				Группировка = НайтиПоИмени(Элемент.Структура, Имя);
				Если Не Группировка = Неопределено Тогда
					Возврат	Группировка;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Группировка;
	
КонецФункции

Функция ПолучитьТекстЗаголовка(ПараметрыОтчета, ОрганизацияВНачале = Истина) Экспорт 
	
	Возврат НСтр("ru='Справка-расчет распределения косвенных расходов ';uk='Довідка-розрахунок розподілу непрямих витрат '") + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(?(ПараметрыОтчета.СНачалаГода,НачалоГода(ПараметрыОтчета.НачалоПериода),ПараметрыОтчета.НачалоПериода),
																										ПараметрыОтчета.КонецПериода);
	
КонецФункции

// В процедуре можно доработать компоновщик перед выводом в отчет
// Изменения сохранены не будут
Процедура ПередКомпоновкойМакета(ПараметрыОтчета, Схема, КомпоновщикНастроек) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НачалоПериода", ?(ПараметрыОтчета.СначалаГода,НачалоГода(ПараметрыОтчета.НачалоПериода),НачалоДня(ПараметрыОтчета.НачалоПериода)));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	КонецЕсли;
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "НалоговыйУчет", ПараметрыОтчета.ПоказательНУ);
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(КомпоновщикНастроек,"УчитыватьВсеДоходы",Истина);
	
	КоличествоПоказателей = БухгалтерскиеОтчетыВызовСервера.КоличествоПоказателей(ПараметрыОтчета);
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("БУ");
	МассивПоказателей.Добавить("НУ");

	ТаблицаОПР = НайтиПоИмени(КомпоновщикНастроек.Настройки.Структура,"Общепроизводственные");
	
	ОтборТаблицаОПР = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборТаблицаОПР.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппировкаПериод 	= НайтиПоИмени(ТаблицаОПР.Строки,"Группировка");
	ГруппировкаПериод.Использование = Истина;
	
	ГруппировкаПодразделениеСтатья = НайтиПоИмени(ГруппировкаПериод.Структура,"ГруппировкаПодразделениеСтатья");
	ГруппировкаНомГруппа = НайтиПоИмени(ГруппировкаПодразделениеСтатья.Структура,"НоменклатурнаяГруппа");
	
	ОтборГруппировкаПериод = ГруппировкаПериод.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппировкаПериод.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборГруппировкаПодразделениеСтатья = ГруппировкаПодразделениеСтатья.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппировкаПодразделениеСтатья.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборГруппировкаНомГруппа = ГруппировкаНомГруппа.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппировкаНомГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	//Показатели группировки по периоду
	/////////////////////////////////////////////////////////
	//ОПР
	ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	Группа = ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	ГруппировкаПериодСумма 						= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	
	Группа = ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"Группировки.СчетСписанияПериод");
    
	Группа = ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"Группировки.НалоговоеНазначениеПериод");
	
	Группа = ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"Группировки.НоменклатурнаяГруппаПериод");
	
	Группа = ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"Группировки.БазаПериод");
	
	Группа = ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "Ресурсы.СуммаБазы" + ?(ПараметрыОтчета.ПоказательНУ,"НУ","БУ"));
	
	Группа = ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "Ресурсы.КоэффициентПериод");
	
	Группа = ГруппировкаПериод.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	ГруппировкаПериодРаспределеноРасходов									= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	
	ГруппировкаПериодСумма.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппировкаПериодРаспределеноРасходов.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	//Показатели группировки по подразделению и статье затрат
	/////////////////////////////////////////////////////////
	//ОПР
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппировкаПодразделениеСтатья.Выбор,"ВидОперации");
    БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппировкаПодразделениеСтатья.Выбор,"НалоговоеНазначениеУчета");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппировкаПодразделениеСтатья.Выбор,"Подразделение");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппировкаПодразделениеСтатья.Выбор,"СтатьяЗатрат");
	
	Группа = ГруппировкаПодразделениеСтатья.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	ГруппировкаПодразделениеСтатьяСумма					= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));

	Группа = ГруппировкаПодразделениеСтатья.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"Группировки.СчетСписанияГруппировка");
    
	Группа = ГруппировкаПодразделениеСтатья.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"Группировки.НалоговоеНазначениеГруппировка");
	
	Группа = ГруппировкаПодразделениеСтатья.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"Группировки.НоменклатурнаяГруппаГруппировка");
	
	Группа = ГруппировкаПодразделениеСтатья.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"Группировки.БазаГруппировка");
	
	Группа = ГруппировкаПодразделениеСтатья.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	ГруппировкаПодразделениеСтатьяСуммаБазы				= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	
	Группа = ГруппировкаПодразделениеСтатья.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа, "Ресурсы.ТекущийКоэффициент");
	
	Группа = ГруппировкаПодразделениеСтатья.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	ГруппировкаПодразделениеСтатьяРаспределеноРасходов		= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));

	
	ГруппировкаПодразделениеСтатьяСумма.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппировкаПодразделениеСтатьяСуммаБазы.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
	ГруппировкаПодразделениеСтатьяРаспределеноРасходов.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	//Показатели группировки по Ном группам
	/////////////////////////////////////////////////////////
	//ОПР
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппировкаНомГруппа.Выбор,"ВидОперации");
    БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппировкаНомГруппа.Выбор,"НалоговоеНазначениеУчета");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппировкаНомГруппа.Выбор,"Подразделение");
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппировкаНомГруппа.Выбор,"СтатьяЗатрат");
	
	Группа = ГруппировкаНомГруппа.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	ГруппировкаНомГруппаСумма								= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
    ГруппировкаНомГруппаСумма.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	Группа = ГруппировкаНомГруппа.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"Группировки.СчетЗатрат");
    
	Группа = ГруппировкаНомГруппа.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"Группировки.НалоговоеНазначение");

	Группа = ГруппировкаНомГруппа.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"НоменклатурнаяГруппа");
	
	Группа = ГруппировкаНомГруппа.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(Группа,"Группировки.База");
	
	Группа = ГруппировкаНомГруппа.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	ГруппировкаНомГруппаСуммаБазы								= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
    ГруппировкаНомГруппаСуммаБазы.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	Группа = ГруппировкаНомГруппа.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	ГруппировкаНомГруппаКоэффициент	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
    ГруппировкаНомГруппаКоэффициент.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	Группа = ГруппировкаНомГруппа.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	Группа.Расположение = РасположениеПоляКомпоновкиДанных.ОтдельнаяКолонка;
	ГруппировкаНомГруппаРаспределеноРасходов	= Группа.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
    ГруппировкаНомГруппаРаспределеноРасходов.Расположение = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	//Добавляем показатели в группы
	Для Каждого ИмяПоказателя Из МассивПоказателей Цикл
		Если ПараметрыОтчета["Показатель" + ИмяПоказателя] Тогда 
						
			//Показатели группировки по периоду
			//ОПР
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппировкаПериодСумма, "Ресурсы.Сумма" + ИмяПоказателя);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппировкаПериодРаспределеноРасходов, "Ресурсы.СуммаРаспределено" + ИмяПоказателя);
			
			//Показатели группировки по подразделению
			//ОПР
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппировкаПодразделениеСтатьяСумма, "Ресурсы.Сумма" + ИмяПоказателя);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппировкаПодразделениеСтатьяРаспределеноРасходов, "Ресурсы.СуммаРаспределено" + ИмяПоказателя);
			
			//Показатели группировки по Ном группе
			//ОПР
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппировкаНомГруппаСумма, "Ресурсы.Сумма" + ИмяПоказателя);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппировкаНомГруппаРаспределеноРасходов, "Ресурсы.СуммаРаспределено" + ИмяПоказателя);
			
			//Показатели выводимые только по БУ и НУ
			Если Найти("БУ,НУ",ИмяПоказателя) <> 0 Тогда
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппировкаНомГруппаКоэффициент, "Ресурсы.Коэффициент" + ИмяПоказателя);
				
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппировкаНомГруппаСуммаБазы, "Ресурсы.СуммаБазы" + ИмяПоказателя);
				БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппировкаПодразделениеСтатьяСуммаБазы, "Ресурсы.СуммаБазы" + ИмяПоказателя);
				
			КонецЕсли;

			
			//Отборы. Расходы должны быть обязательно
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборТаблицаОПР, "Ресурсы.Сумма" + ИмяПоказателя,0,ВидСравненияКомпоновкиДанных.НеРавно);
			
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировкаПериод, "Ресурсы.Сумма" + ИмяПоказателя,0,ВидСравненияКомпоновкиДанных.НеРавно);
	
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировкаПодразделениеСтатья, "Ресурсы.Сумма" + ИмяПоказателя,0,ВидСравненияКомпоновкиДанных.НеРавно);
			
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ОтборГруппировкаНомГруппа, "Ресурсы.Сумма" + ИмяПоказателя,0,ВидСравненияКомпоновкиДанных.НеРавно);
			
		КонецЕсли;
	КонецЦикла;
	
	БухгалтерскиеОтчетыВызовСервера.ДобавитьОтборПоОрганизации(ПараметрыОтчета, КомпоновщикНастроек);
	
КонецПроцедуры

Функция НайтиТелоВМекетеКомпановки(Тело,Имя)
	Для п = 0 по Тело.Количество() - 1 Цикл
		Если ТипЗнч(Тело[п]) <> Тип("МакетОбластиМакетаКомпоновкиДанных") Тогда
			Если Тело[п].Имя = Имя тогда
				Возврат Тело[п];	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции	

Процедура ПослеКомпоновкиМакета(ПараметрыОтчета, МакетКомпоновки) Экспорт
		
	ТелоГруппировкиТаблицы = НайтиТелоВМекетеКомпановки(МакетКомпоновки.Тело,"ЗаголовокТаблицыОбщехозяйственные");
	ТелоГруппировкиТаблицыОПР = НайтиТелоВМекетеКомпановки(МакетКомпоновки.Тело,"ЗаголовокТаблицыОбщепроизводственные");
	
	МакетыГруппировок = Новый Массив();
	
	Если Не ТелоГруппировкиТаблицы = Неопределено Тогда
		ИтогиГруппировкиТаблицы 					= ТелоГруппировкиТаблицы.Тело[1].Строки[0].Тело[2];
		МакетыГруппировок.Добавить(МакетКомпоновки.Макеты[ТелоГруппировкиТаблицы.Тело[1].Строки[0].Тело[1].Тело[0].Макет].Макет[0]);
		ТелоГруппировкиТаблицы.Тело[1].Строки[0].Тело.Удалить(ИтогиГруппировкиТаблицы);
	Конецесли;	
	
	Если Не ТелоГруппировкиТаблицыОПР = Неопределено Тогда
		ИтогиГруппировкиТаблицыОПР 					= ТелоГруппировкиТаблицыОПР.Тело[1].Строки[0].Тело[2];
		МакетыГруппировок.Добавить(МакетКомпоновки.Макеты[ТелоГруппировкиТаблицыОПР.Тело[1].Строки[0].Тело[1].Тело[0].Макет].Макет[0]);
		ТелоГруппировкиТаблицыОПР.Тело[1].Строки[0].Тело.Удалить(ИтогиГруппировкиТаблицыОПР);
	Конецесли;	
	
	СплошнаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	Для Каждого МакетГруппиовки Из МакетыГруппировок Цикл
		Для Каждого Ячейка Из МакетГруппиовки.Ячейки Цикл
			Ячейка.Оформление.УстановитьЗначениеПараметра("СтильГраницы.Сверху", СплошнаяЛиния);	
		КонецЦикла;	
	КонецЦикла;	
	
	//МакетКомпоновки.Тело.Удалить(МакетКомпоновки.Тело[3]);
	
КонецПроцедуры

Процедура ПослеВыводаРезультата(ПараметрыОтчета, Результат) Экспорт
	
	БухгалтерскиеОтчетыВызовСервера.ОбработкаРезультатаОтчета(ПараметрыОтчета.ИдентификаторОтчета, Результат);
	
	Результат.ФиксацияСверху = 0;
	
	Результат.ФиксацияСлева = 0;	
	
КонецПроцедуры

Функция ПолучитьНаборПоказателей() Экспорт
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ");
	
	Возврат НаборПоказателей;
	
КонецФункции

Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, Вариант.Имя).Размещение.Вставить(Метаданные.Подсистемы.Отчеты.Подсистемы.СправкиРасчеты.Подсистемы.БухгалтерскийИНалоговыйУчет, "");
	КонецЦикла;	
	
КонецПроцедуры

//Процедура используется подсистемой варианты отчетов
//
Процедура НастройкиОтчета(Настройки) Экспорт
	
	ВариантыНастроек = ВариантыНастроек();
	Для Каждого Вариант Из ВариантыНастроек Цикл
		Настройки.ОписаниеВариантов.Вставить(Вариант.Имя,Вариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

Функция ВариантыНастроек() Экспорт
	
	Массив = Новый Массив;
	
	Массив.Добавить(Новый Структура("Имя, Представление","СправкаРасчетРаспределенияКосвенныхРасходов", "Распределение косвенных расходов"));
	
	Возврат Массив;
	
КонецФункции

#КонецЕсли