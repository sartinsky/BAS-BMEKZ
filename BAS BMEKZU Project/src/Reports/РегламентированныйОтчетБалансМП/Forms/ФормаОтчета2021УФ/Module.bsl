&НаСервере
Перем мБухИтоги, мБухИтоги22;
&НаСервере
Перем ТаблицаРасшифровки;
&НаСервере
Перем ОбщиеПараметрыРасшифровки;
&НаСервере
Перем ОбщиеПараметрыРасшифровкиПрошлыйПериод;

&НаСервере
Перем мОбъектОтчета;
// хранит версию формы отчета
Перем мВерсияФормы;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
		
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2021";
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
		
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	
	
	СтруктураДанныхОтчетМП	= Новый Структура;
	
	мСтруктураМногострочныхРазделов = Новый Структура;

	мСтруктураМногостраничныхРазделов = Новый Структура;
	
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
		
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "09/07/2021";
	
	СтруктураРеквизитовФормы.мПечатныеформы 	= Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "ОтчетМП";
		
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	ДатаПодписи                                       = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати 	   = Ложь;
	
	ПеречислениеПериодичностьМесяц = Перечисления.Периодичность.Месяц;
	
	СтруктураРеквизитовФормы.ЕстьДуплекс = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность", "ЕстьДуплекс", Ложь);
	Элементы.ЕстьДуплекс.Пометка		 = СтруктураРеквизитовФормы.ЕстьДуплекс;
	
	ВывестиМакетВТаблДокНаСервере(ИмяРаздела, 1);

    Если УчетнаяПолитика.Существует(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
		ИспКлассыСчетов = УчетнаяПолитика.ИспользуемыеКлассыСчетовРасходов(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Иначе
		//предприятие работает не с начала года
		ИспКлассыСчетов = ОпределитьУчетнуюПолитикуВПериоде(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	КонецЕсли;
    Если УчетнаяПолитика.Существует(СтруктураРеквизитовФормы.Организация, НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -12))) Тогда
		ИспКлассыСчетовПрошлГода = УчетнаяПолитика.ИспользуемыеКлассыСчетовРасходов(СтруктураРеквизитовФормы.Организация, НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -12)));
	Иначе
		//предприятие работает не с начала прошлого года 
		ИспКлассыСчетовПрошлГода = ОпределитьУчетнуюПолитикуВПериоде(НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));
	КонецЕсли;

	ВывестиМакетВТаблДокНаСервере(ИмяРаздела, 1);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяРаздела);
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяРаздела);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	
	
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкиДопСтрок", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкиДопСтраниц", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Истина);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуВыгрузить", Ложь);
	
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	
	СтруктураРеквизитовФормы.Вставить("ТекущиеОбластиСтраниц");
	СтруктураРеквизитовФормы.Вставить("КолонкиМногострочныхРазделов");
	СтруктураРеквизитовФормы.Вставить("ИспКлассыСчетов");
	СтруктураРеквизитовФормы.Вставить("ИспКлассыСчетовПрошлГода");
	СтруктураРеквизитовФормы.Вставить("ЕстьДуплекс", Ложь);
	
	СтруктураРеквизитовФормы.Вставить("ПолучениеДанныхДляЗвит1С", Ложь);
	СтруктураРеквизитовФормы.Вставить("ДопПоказателиОтчетаЗвит1С", Новый Структура);
	
КонецПроцедуры


// Функция возвращает параметры числа Е для различных разделов отчета
//
// Параметры
//  ИмяРаздела  - Строка
//
// Возвращаемое значение:
//  Результат   - ОписаниеТипа
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОписаниеТипаЧислаЕДляРаздела(ИмяРаздела = "")
	
	Результат = Новый Структура("ОписаниеТипа, Длина, Точность");
	
    Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));

	Возврат Результат; 
	
КонецФункции


&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьНачальныеНастройки();

	
	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ЗаполнитьПустыеСтруктурыДанных();	
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		НачальныеОперацииСМногострочнымиБлоками();
			
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 1;
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
		КонецЕсли;
		
	Иначе
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуВыгрузить Тогда
		Элементы.Выгрузка.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкиДопСтрок Тогда
		Элементы.ДопСтроки.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкиДопСтраниц Тогда
		Элементы.ДопСтраницы.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
    	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПрорисоватьПодменюПечать(ЭтаФорма);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры // Инициализация()

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // НачальныеОперацииСМногострочнымиБлоками()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);	
	
	МассивТиповТаблицаЗначений = Новый Массив; 
	МассивТиповТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТиповТаблицаЗначений);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда         
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда		
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы 
	//

	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОтчетМП";
	СтрокаУровня1.Представление            = НСтр("ru='Баланс';uk='Баланс'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки.
//
&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
		
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ОтчетМП";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	
	

КонецПроцедуры // ФормироватьСтруктуруСвойствСтраниц()

// СформироватьДеревоРазделовОтчетаНаСервере()
//
&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаСервере()

// СформироватьДеревоРазделовОтчетаНаКлиенте()
//
&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаКлиенте()

// СформироватьДеревоРазделовОтчета()
//
&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Страница " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры // СформироватьДеревоРазделовОтчета()

// РазделыОтчетаПриАктивизацииСтроки()
//
&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент) Экспорт
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	// сохраним текущее положение курсора на странице
	Если СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Неопределено Тогда
		СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Новый Структура;
	КонецЕсли;
	ТекущийНомерСтраницы = "_" + Строка(СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	
	КоординатыОбласти = Новый Структура();
	КоординатыОбласти.Вставить("Верх", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Верх);
	КоординатыОбласти.Вставить("Низ", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ);
	КоординатыОбласти.Вставить("Лево", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево);
	КоординатыОбласти.Вставить("Право", Элементы.ТабличныйДокумент.ТекущаяОбласть.Право);
	
	СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц.Вставить(ТекущийНомерСтраницы, КоординатыОбласти);	

	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Элементы.ДобавитьСтраницу.Доступность   = Ложь;
	Элементы.УдалитьСтраницу.Доступность    = Ложь;
	Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
	Элементы.ДобавитьСтроку.Доступность     = Ложь;
	Элементы.УдалитьСтроку.Доступность      = Ложь;
					
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
																
		КонецЕсли;														
				
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		
		Элементы.ДобавитьСтраницу.Доступность   = Истина;
		Элементы.УдалитьСтраницу.Доступность    = Истина;
		Элементы.УдалитьВсеСтраницы.Доступность = Истина;
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			
			Элементы.УдалитьСтраницу.Доступность = Ложь;
							   			
			Если Элемент.ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
				Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
			КонецЕсли;
			
		ИначеЕсли Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
			
			Элементы.УдалитьСтраницу.Доступность    = Ложь;
			Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	// восстановим текущее положение курсора
	ТекущийНомерСтраницы = "_"+Строка(СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	Если СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц.Свойство(ТекущийНомерСтраницы) Тогда
		
		КоординатыОбласти = СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц[ТекущийНомерСтраницы];
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(КоординатыОбласти.Верх, КоординатыОбласти.Лево, КоординатыОбласти.Низ, КоординатыОбласти.Право);	
		
	Иначе	
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1, 1, 1);	
		
	КонецЕсли;
	
КонецПроцедуры // РазделыОтчетаПриАктивизацииСтроки()

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
			
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
	//Если ИмяТекРаздела = "Раздел2" Тогда
	//	ИзменитьЦветЯчеекНаСервере();
	//КонецЕсли;
						
КонецПроцедуры // ВывестиМакетСтраницыВТабличныйДокументНаСервере()

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность)
	
	// Многостраничные разделы.
	
	//Если НаимРаздела = "Раздел2" Тогда
	Если Ложь Тогда
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НаимРаздела = "Раздел2" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела2";
		
		КонецЕсли;
		
		АктивнаяСтраница = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивнаяСтраница.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивнаяСтраница[0];
			
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			АктивнаяСтраница.АктивнаяСтраница = Ложь;
			
		КонецЕсли;
					
	// Многострочные и обычные разделы.
	//
	ИначеЕсли НаимРаздела = "ОтчетМП" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппыМассив = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы);	
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры // СохранитьДанныеРаздела()

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	
	Если ТабличныйДокумент.Области.Найти("ПредупреждениеОПечати") = Неопределено Тогда
		ТабличныйДокумент.ОбластьПечати = Неопределено;
	Иначе
		ТабличныйДокумент.ОбластьПечати 					  = ТабличныйДокумент.Области.ПредупреждениеОПечати;
	    ТабличныйДокумент.Области.ПредупреждениеОПечати.Текст = НСтр("ru='ВНИМАНИЕ! Печать отчета необходимо осуществлять из меню ''Печать''.';uk= 'УВАГА! Друк звіту необхідно здійснювати за допомогою меню ''Друк''.'");
	КонецЕсли;
	
	// Многостраничные разделы.
	//
	//Если ИмяТекРаздела = "Раздел2" Тогда 
	Если Ложь Тогда  
		
		Если ИмяТекРаздела = "Раздел2" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела2";
		КонецЕсли;
	    
	    СтруктураДанных = Новый Структура;
	    
	    СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
	    
	    ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
	    
	    Если СписокДанных.Количество() > 0 Тогда
	    	СтруктураДанных = СписокДанных[0].Значение;
	    КонецЕсли;
	     	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
	    КонецЦикла;
						
	// Многострочные и обычные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "ОтчетМП" Тогда
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Если НЕ ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) = Неопределено Тогда
				Попытка
					ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
				Исключение
				КонецПопытки;
			КонецЕсли;	
		КонецЦикла;
		
		ИмяГруппыМассив = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
		
			СтруктураГруппы = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
			
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
			
		
		КонецЦикла;
		
	КонецЕсли;	
	
	ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяТекРаздела);

	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
	
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	
КонецПроцедуры // ВывестиМакетВТаблДокНаСервере()

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(НаимРаздела)
	
		ЗаполнитьДатуПодписи(ЭтаФорма);
	
КонецПроцедуры // ЗаполнитьПоказателиЗначениямиПоУмолчанию()


&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры // УстановитьФорматВыводаВПоляхВводаНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;

	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(СокрЛ(КодПоказателя), 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
				ФорматируемаяОбласть.ТипЗначения = Новый ОписаниеТипов(ФорматируемаяОбласть.ТипЗначения,,,Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					
					ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
					ФорматируемаяОбласть.ТипЗначения = Новый ОписаниеТипов(ФорматируемаяОбласть.ТипЗначения,,,Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ТипДанныхПоказателя = "О" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
			ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
			ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
			ФорматируемаяОбласть.ТипЗначения = Новый ОписаниеТипов(ФорматируемаяОбласть.ТипЗначения,,,Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
			
			ФорматируемаяОбласть.Формат = "ЧО=0;" + "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьЗначенияВСкобках(Форма);

КонецПроцедуры // УстановитьФорматВыводаВПоляхВвода()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)
	
	ЗаполнитьПоказательНаСервере("ДатаБаланса",   "на " + Формат(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'дд ММММ гггг';Л = uk_UA") + " р.",  Форма, "ОтчетМП");	
	ЗаполнитьПоказательНаСервере("ПериодОтчета",    "за " + ПредставлениеПериода(НачалоГода(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "Л = uk_UA; ФП = Истина" ),  Форма, "ОтчетМП");	
	
	// Период в списке кодов в форме баланса
	ДатаНачалаПериодаОтчетаСлед = НачалоМесяца(ДобавитьМесяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,1));
	
	ЗаполнитьПоказательНаСервере("ДатаКонцаПериодаОтчетаГод",    Формат(ДатаНачалаПериодаОтчетаСлед, "ДФ = 'гггг'"),  Форма, "ОтчетМП");	
	ЗаполнитьПоказательНаСервере("ДатаКонцаПериодаОтчетаМесяц",  Формат(ДатаНачалаПериодаОтчетаСлед, "ДФ = 'ММ'"),  Форма, "ОтчетМП");	
	ЗаполнитьПоказательНаСервере("ДатаКонцаПериодаОтчетаЧисло",  Формат(ДатаНачалаПериодаОтчетаСлед, "ДФ = 'дд'"),  Форма, "ОтчетМП");	
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры // ПоказатьПериод()

// УстановитьЦветФонаЯчейкиНаКлиенте()
//
&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // УстановитьЦветФонаЯчейкиНаКлиенте()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // УстановитьЦветФонаЯчейкиНаСервере()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					
					ПозицияXXXX = Найти(ИмяПоказателя, "XXXX");
					Если ПозицияXXXX = 0 Тогда
						ВБлокеВсеПоказателиЗаполняются = Истина;
					Иначе
						ИмяГруппы = Лев(ИмяПоказателя, ПозицияXXXX - 1);
						ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
					КонецЕсли;
					
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЦветФонаЯчейки()

// ЗаполнитьСведенияОбОрганизацииНаСервере()
//
&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере()
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма);
		
КонецПроцедуры // ЗаполнитьСведенияОбОрганизацииНаСервере()

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма)
	
	Организация 				= Форма.СтруктураРеквизитовФормы.Организация;	
	
	ЗаполнитьПоказательНаСервере("ОргНазв", Организация.НаименованиеПолное, Форма, "ОтчетМП");

	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СписокПоказателей.Добавить("","КодКАТОТТГ");
	СписокПоказателей.Добавить("","КодКОАТУУ");
	СписокПоказателей.Добавить("","КодСПОДУ");
	СписокПоказателей.Добавить("","КодОПФГ");
	СписокПоказателей.Добавить("","КодКВЕД");
	СписокПоказателей.Добавить("","Территория");
	СписокПоказателей.Добавить("","ОПФГ");
	СписокПоказателей.Добавить("","ВЭД");
	СписокПоказателей.Добавить("","ЮридическийАдрес");
	СписокПоказателей.Добавить("","Телефон");

	Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, СписокПоказателей);
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");
	СписокПоказателей.Добавить("","ФИОБух");
	СведенияДатаПодписи = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.ДатаПодписи, СписокПоказателей);
	
	КодЕДРПОУ         = Сведения.КодПоЕДРПОУ;
	КодКОАТУУ         = Сведения.КодКАТОТТГ;
	КодКОАТУУ         = ?(ЗначениеЗаполнено(КодКОАТУУ),КодКОАТУУ,Сведения.КодКОАТУУ);
	КодСПОДУ          = Сведения.КодСПОДУ;
	КодОПФГ    		  = Сведения.КодОПФГ;
	КодКВЕД    		  = Сведения.КодКВЕД;
	Территория    	  = Сведения.Территория;
	ОПФГ    		  = Сведения.ОПФГ;
	ВЭД    			  = Сведения.ВЭД;
	ЮридическийАдрес  = Сведения.ЮридическийАдрес;
	Телефон  	      = Сведения.Телефон;	
	ФИОДиректора      = СведенияДатаПодписи.ФИОРук;
	ФИОГлавБуха       = СведенияДатаПодписи.ФИОБух;
	
	ЗаполнитьПоказательНаСервере("ОргБухгалтер", ФИОГлавБуха, Форма, "ОтчетМП");
	ЗаполнитьПоказательНаСервере("ОргДиректор", ФИОДиректора, Форма, "ОтчетМП");
	ЗаполнитьПоказательНаСервере("ОргКодЕДРПОУ", КодЕДРПОУ, Форма, "ОтчетМП");
	ЗаполнитьПоказательНаСервере("ОргКодКОАТУУ", КодКОАТУУ, Форма, "ОтчетМП");
	ЗаполнитьПоказательНаСервере("ОргКодОПФГ", КодОПФГ, Форма, "ОтчетМП");
	ЗаполнитьПоказательНаСервере("ОргКодКВЕД", КодКВЕД, Форма, "ОтчетМП");
	ЗаполнитьПоказательНаСервере("ОргТерритория", Территория, Форма, "ОтчетМП");
	ЗаполнитьПоказательНаСервере("ОргОПФГ", ОПФГ, Форма, "ОтчетМП");
	ЗаполнитьПоказательНаСервере("ОргВЭД", ВЭД, Форма, "ОтчетМП");
	
	ОргПочтАдрес = ЮридическийАдрес + ", " + Телефон;
	
	ЗаполнитьПоказательНаСервере("ОргПочтАдрес", ОргПочтАдрес, Форма, "ОтчетМП");
	
КонецПроцедуры






&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПоказательНаСервере(ИмяОбласти, Значение, Форма, ИмяРазделаПоказателя);

	ТекРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Если ТекРаздел = ИмяРазделаПоказателя Тогда
	
		Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение = Значение;
		
	Иначе	
		
		Форма["СтруктураДанных" + ИмяРазделаПоказателя].Вставить(ИмяОбласти, Значение);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПоказательНаСервере(ИмяОбласти, Форма, ИмяРазделаПоказателя)

	ТекРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Если ТекРаздел = ИмяРазделаПоказателя Тогда
		
		Возврат Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение;
		
	Иначе	
		
		Значение = Неопределено;
		Форма["СтруктураДанных" + ИмяРазделаПоказателя].Свойство(ИмяОбласти, Значение);
		
		Если Значение = Неопределено Тогда
			
			ДанныеПоказателя = Форма.мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента, КодПоказателяПоФорме", ИмяРазделаПоказателя, ИмяОбласти));
			Если ДанныеПоказателя.Количество() > 0
				И (    ДанныеПоказателя[0].ТипДанныхПоказателя = "Ч"
				   ИЛИ ДанныеПоказателя[0].ТипДанныхПоказателя = "Е") Тогда
				Значение = 0;	   
			Иначе
				Значение = "";	
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Значение;
		
	КонецЕсли;	

КонецФункции // ()

// СобратьДанныеТекущегоТаблПоляНаСервере()
//
&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции // СобратьДанныеТекущегоТаблПоляНаСервере()

// СобратьДанныеТекущегоТаблПоляНаКлиенте()
//
&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции // СобратьДанныеТекущегоТаблПоляНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере()
//
&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
		
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере()

// ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте()
//
&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	
	Перем ИмяГруппы;
	
	ИмяГруппы = Новый Массив;
	
	Если ИмяЛиста = Неопределено Тогда
        ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;


	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаСервере()

// ОбновитьСтруктуруМногострочногоРазделаНаКлиенте()
//
&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаКлиенте()

&НаСервере
Процедура ОбновитьПользовательскиеНастройки(СписокСохранения, ВыполнялосьОбновлениеДанных)
	
	Сообщить(НСтр("ru='Измененилась версия формы отчета."
	"Выполняется обновление пользовательских настроек.';uk='Змінилася версія форми звіту."
	"Виконується відновлення користувальницьких настройок.'"), СтатусСообщения.Информация);
	
	ВерсияФормы = СписокСохранения.ВерсияФормы;
	
	//Если ВерсияФормы = "01/07/2013" Тогда
	//	
	//     СписокСохранения.ВерсияФормы = "01/11/2020";
	//  ВыполнялосьОбновлениеДанных = Истина;
	//  
	//КонецЕсли;
	
	Если ВыполнялосьОбновлениеДанных = Истина Тогда
		

		Сообщить(НСтр("ru='Обновление пользовательских настроек успешно завершено!';uk='Оновлення користувальницьких настройок успішно завершене!'"));

	Иначе

		Сообщить(НСтр("ru='Изменения в структуре пользовательских настроек не обнаружены!';uk='Зміни в структурі користувальницьких настройок не виявлені!'"));

	КонецЕсли;
	
КонецПроцедуры

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
    Перем ЕстьДуплекс;
	Перем ВыполнялосьОбновлениеДанных;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация =	СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи			                              = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий					                      = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// восстанавливаем версию формы
	ВерсияФормы = Неопределено;
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) Тогда
		Если ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы Тогда
			// Версия формы изменилась.
			// Обновляем пользовательские настройки.
			ОбновитьПользовательскиеНастройки(СписокСохранения, ВыполнялосьОбновлениеДанных);
		КонецЕсли;
	КонецЕсли;
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
				
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
				
			КонецЕсли;
						
		КонецЦикла;
						
	КонецЕсли;
    	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
	КонецЕсли;
	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
					
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				                     				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
								
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								ИмяГруппыМассив =  ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ);
								
								ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ИмяГруппыМассив[0]].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
								
								НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
								
							КонецЦикла;
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							ИмяГруппыМассив =  ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ);
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ИмяГруппыМассив[0]].Добавить().Таблица;
														
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
								   				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;

	СписокСохранения.Свойство("ЕстьДуплекс", ЕстьДуплекс);
	Если ЕстьДуплекс = Неопределено Тогда
		ЕстьДуплекс = Ложь;
	КонецЕсли;
	СтруктураРеквизитовФормы.ЕстьДуплекс = ЕстьДуплекс;
	Элементы.ЕстьДуплекс.Пометка         = ЕстьДуплекс;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;
	ИмяТекРаздела = "ОтчетМП";
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, 1);
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);

	Модифицированность = (ВыполнялосьОбновлениеДанных = Истина);
	
КонецПроцедуры // ВосстановитьСохраненныеДанные()

// ВывестиРазделВТабличныйДокументНаКлиенте()
//
&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры // ВывестиРазделВТабличныйДокументНаКлиенте()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры // ВывестиРазделВТабличныйДокументНаСервере()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//  ПерерисоватьСтроки - Истина из процедуры удаления доп. строк, для перерисовки областей.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = Неопределено)
	Перем ИсходноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
		
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	ПерерисоватьСтроки = (НЕ ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы);
		
	Раздел = Форма[ТекТабличноеПолеИмя];
	
	КолонкиГруппы = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];		
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе");
		
		КолонкиМногострочныхРазделов = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов;
		ИмяОбластиПечати			 = "";
		
		ДанныеОПечатиОтчета = Форма.мДеревоСтраницОтчета.ПолучитьЭлементы();
		Для Сч = 1 По ДанныеОПечатиОтчета.Количество() Цикл
			ДанныеОПечатиСтраницы = ДанныеОПечатиОтчета[Сч - 1];	
			Если ДанныеОПечатиСтраницы.ИмяСтраницы = ТекущаяСтраница Тогда
				ИмяОбластиПечати = ДанныеОПечатиСтраницы.ИмяОбластиТабличногоПоля;	
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		
		РегламентированнаяОтчетностьВызовСервера.ВывестиРазделВТабличныйДокументНаСервере(НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, КолонкиМногострочныхРазделов, ИмяОбластиПечати);
		
		Форма[ТекТабличноеПолеИмя] = Раздел;
		ТекТабличноеПоле           = Форма[ТекТабличноеПолеИмя];
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
		
		Для Каждого КолонкаТаблицыИмя Из КолонкиГруппы Цикл
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;
				
				ОбластьЯчейкиТаблицы          = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
	
	СтрокВГруппе 		= СтруктураГруппы.Количество();
	СтрокВТабличномПоле = Форма.мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы];
	КоличествоСтрок = МАКС(СтрокВГруппе, СтрокВТабличномПоле);
	Если ИмяКолонкиНомера <> Неопределено Тогда
		
		Для НомерСтрокиВФормеТаблицы = 1 По КоличествоСтрок Цикл
			
			НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
			ИмяЯчейки                	= ИмяКолонкиНомера + "_" + НомерСтрокиВФормеТаблицыСтр;
			ОбластьЯчейкиТаблицы     	= ТекТабличноеПоле.Области[ИмяЯчейки];
	
			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				ОбластьЯчейкиТаблицы.Значение = НомерСтрокиВФормеТаблицы + НомерПервойСтроки - 1;
			Иначе
				ОбластьЯчейкиТаблицы.Текст = НомерСтрокиВФормеТаблицы + НомерПервойСтроки - 1;
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

&НаКлиенте
Процедура СохранитьОтчет(Команда)
		
	СохранитьНаКлиенте();
		
КонецПроцедуры

// СохранитьНаКлиенте()
//
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт

	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, Автосохранение) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(Автосохранение, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
				
КонецПроцедуры // СохранитьНаКлиенте()

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// ПередСохранением()
//
&НаСервере
Функция ПередСохранением(Автосохранение, НаимТекРаздела)
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Возврат Сохранить(Автосохранение, НаимТекРаздела);
		
КонецФункции // ПередСохранением()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
&НаСервере
Функция Сохранить(Автосохранение = Ложь, НаимТекРаздела) Экспорт	
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
			
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, Автосохранение, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета 			 = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета 		 = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;

	СохранитьДанныеРаздела(НаимТекРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
					   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
																			
						СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						
						Ном = Ном + 1;
						
						Продолжить;
							
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
														
						СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			
					Ном = Ном + 1;
								
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;
		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	// вставляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	СписокСохранения.Вставить("ЕстьДуплекс", СтруктураРеквизитовФормы.ЕстьДуплекс);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1';uk='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
			
	Модифицированность   = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Возврат Истина;

КонецФункции // Сохранить()

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоказателиОтчетаНаСервере()

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			ЗаполнитьПоказателиЗначениямиПоУмолчанию(Раздел.ИмяСтраницы);
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);	
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры // ЗаполнитьПустыеСтруктурыДанных()

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры // СохранитьДеревоНастройкиСтраниц()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы <> Неопределено Тогда 
		
		Если ЗавершениеРаботы И Модифицированность Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы <> Неопределено Тогда
		
		Если ЗавершениеРаботы Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ПриЗакрытииНаСервере();
		
КонецПроцедуры // ПриЗакрытии()

// ПриЗакрытииНаСервере()
//
&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("РегламентированнаяОтчетность", "ЕстьДуплекс", СтруктураРеквизитовФормы.ЕстьДуплекс);
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытииНаСервере()

// ПоказатьСтраницуМногостраничногоРазделаНаКлиенте()
//
&НаКлиенте
Процедура ПоказатьСтраницуМногостраничногоРазделаНаКлиенте(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	
	ПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРазделаНаКлиенте()

// ПоказатьСтраницуМногостраничногоРазделаНаСервере()
//
&НаСервере
Процедура ПоказатьСтраницуМногостраничногоРазделаНаСервере(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	
	ПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
		
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРазделаНаСервере()

// ПоказатьСтраницуМногостраничногоРаздела()
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСтраницуМногостраничногоРаздела(Форма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьСтраницуМногостраничногоРаздела(Форма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	//Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
	//	#Если НаКлиенте Тогда
	//		Форма.ИзменитьЦветЯчеекНаКлиенте();
	//	#Иначе
	//		Форма.ИзменитьЦветЯчеекНаСервере();
	//	#КонецЕсли
	//КонецЕсли;
	
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

&НаКлиенте
Процедура ИзменитьЦветЯчеекНаКлиенте() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры // ИзменитьЦветЯчеекНаКлиенте()

&НаСервере
Процедура ИзменитьЦветЯчеекНаСервере() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры // ИзменитьЦветЯчеекНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьЦветЯчеек(Форма)

	//КодОперации = СокрЛП(Форма.ТабличныйДокумент.Области.П000200007003.Значение);
	//
	//Если КодОперации = "1011705" ИЛИ КодОперации = "1011707" Тогда
	//	
	//	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
	//		ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200006003");
	//	Иначе	
	//		ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000200006003");
	//	КонецЕсли;
	//
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200008003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200009003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200010003");
	//	
	//Иначе	
	//	
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200006003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200008003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200009003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200010003");
	//	
	//	Форма.ТабличныйДокумент.Области.П000200008003.Значение = "";
	//	Форма.ТабличныйДокумент.Области.П000200009003.Значение = "";
	//	Форма.ТабличныйДокумент.Области.П000200010003.Значение = "";
	//			
	//КонецЕсли;
		
КонецПроцедуры // ИзменитьЦветЯчеек()





// ОбновитьПеременныеМодуляНаСервере()
//
&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции // ОбновитьПеременныеМодуляНаСервере()

// ОбновитьПеременныеМодуляНаКлиенте()
//
&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции // ОбновитьПеременныеМодуляНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(Форма, ИмяПоказателя, ЗначениеПоказателя)
	
	ИзмененияПроизошли = Ложь;
	
	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;
	

	Возврат ИзмененияПроизошли;
	
КонецФункции // ОбновитьПеременныеМодуля()

// ОчиститьТабличноеПолеНаКлиенте()
//
&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры // ОчиститьТабличноеПолеНаКлиенте()

// ОчиститьТабличноеПолеНаСервере()
//
&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры // ОчиститьТабличноеПолеНаСервере()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	// Непосредственно очищаем ячейки табличного документа. РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле делает то же самое
	// Повторно, так как в результате расчета многостраничного многострочного блока заполняются итоговые ячейки, 
	// в арифметике которых есть показатели не из многострочного блока
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		Если Найти(Врег(ТекущаяОбласть.Имя), ВРег("Штампик")) > 0  Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;

	ЗаполнитьСведенияОбОрганизации(Форма);
	
КонецПроцедуры // ОчиститьТабличноеПоле()

// РасчетНаКлиенте()
//
&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры // РасчетНаКлиенте()

// РасчетНаСервере()
//
&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры // РасчетНаСервере()

// РАСЧЕТ()
// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет
// Параметры:
//  ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//
&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", ОбластьИмя = "")
	Перем ТаблицаБлока;
	
	Если (Форма.СтруктураРеквизитовФормы.мРежимПечати) Тогда
		Возврат; // служебный вызов в процессе печати
	КонецЕсли;
	
	Если (Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
		ЗаполнитьЗначенияВСкобках(Форма);
		Возврат; // отключен режим авторасчета
	КонецЕсли;

	// Нематериальные активы
	Форма.ТабличныйДокумент.Области.П10003.Значение = Форма.ТабличныйДокумент.Области.П10013.Значение
									- Форма.ТабличныйДокумент.Области.П10023.Значение;
	Форма.ТабличныйДокумент.Области.П10004.Значение = Форма.ТабличныйДокумент.Области.П10014.Значение
									- Форма.ТабличныйДокумент.Области.П10024.Значение;
	
	//Основные средства: остаточная стоимость
	Форма.ТабличныйДокумент.Области.П10103.Значение = Форма.ТабличныйДокумент.Области.П10113.Значение
									- Форма.ТабличныйДокумент.Области.П10123.Значение;
	Форма.ТабличныйДокумент.Области.П10104.Значение = Форма.ТабличныйДокумент.Области.П10114.Значение
									- Форма.ТабличныйДокумент.Области.П10124.Значение;
	//
	//Всего по разделу I
	Форма.ТабличныйДокумент.Области.П10953.Значение = Форма.ТабличныйДокумент.Области.П10003.Значение
									+ Форма.ТабличныйДокумент.Области.П10053.Значение
									+ Форма.ТабличныйДокумент.Области.П10103.Значение
								    + Форма.ТабличныйДокумент.Области.П10203.Значение
									+ Форма.ТабличныйДокумент.Области.П10303.Значение
									+ Форма.ТабличныйДокумент.Области.П10903.Значение;
	
	Форма.ТабличныйДокумент.Области.П10954.Значение = Форма.ТабличныйДокумент.Области.П10004.Значение
									+ Форма.ТабличныйДокумент.Области.П10054.Значение
									+ Форма.ТабличныйДокумент.Области.П10104.Значение
									+ Форма.ТабличныйДокумент.Области.П10204.Значение
									+ Форма.ТабличныйДокумент.Области.П10304.Значение
									+ Форма.ТабличныйДокумент.Области.П10904.Значение;
	
	//Всего по разделу II
	Форма.ТабличныйДокумент.Области.П11953.Значение = Форма.ТабличныйДокумент.Области.П11003.Значение
									+ Форма.ТабличныйДокумент.Области.П11103.Значение
									+ Форма.ТабличныйДокумент.Области.П11253.Значение
									+ Форма.ТабличныйДокумент.Области.П11353.Значение
									+ Форма.ТабличныйДокумент.Области.П11553.Значение
									+ Форма.ТабличныйДокумент.Области.П11603.Значение
									+ Форма.ТабличныйДокумент.Области.П11653.Значение
									+ Форма.ТабличныйДокумент.Области.П11703.Значение
									+ Форма.ТабличныйДокумент.Области.П11903.Значение;
	//
	Форма.ТабличныйДокумент.Области.П11954.Значение = Форма.ТабличныйДокумент.Области.П11004.Значение
									+ Форма.ТабличныйДокумент.Области.П11104.Значение
									+ Форма.ТабличныйДокумент.Области.П11254.Значение
									+ Форма.ТабличныйДокумент.Области.П11354.Значение
									+ Форма.ТабличныйДокумент.Области.П11554.Значение
									+ Форма.ТабличныйДокумент.Области.П11604.Значение
									+ Форма.ТабличныйДокумент.Области.П11654.Значение
									+ Форма.ТабличныйДокумент.Области.П11704.Значение
									+ Форма.ТабличныйДокумент.Области.П11904.Значение;
	//  БАЛАНС  (Актив)
	Форма.ТабличныйДокумент.Области.П13003.Значение = Форма.ТабличныйДокумент.Области.П10953.Значение
									+ Форма.ТабличныйДокумент.Области.П11953.Значение
									+ Форма.ТабличныйДокумент.Области.П12003.Значение;
	
	
	Форма.ТабличныйДокумент.Области.П13004.Значение = Форма.ТабличныйДокумент.Области.П10954.Значение
									+ Форма.ТабличныйДокумент.Области.П11954.Значение
									+ Форма.ТабличныйДокумент.Области.П12004.Значение;
	
	//Пасcив
	//Всего по разделу I
	Форма.ТабличныйДокумент.Области.П14953.Значение = Форма.ТабличныйДокумент.Области.П14003.Значение
									+ Форма.ТабличныйДокумент.Области.П14103.Значение
									+ Форма.ТабличныйДокумент.Области.П14153.Значение
									+ Форма.ТабличныйДокумент.Области.П14203.Значение
									- Форма.ТабличныйДокумент.Области.П14253.Значение;
	
	Форма.ТабличныйДокумент.Области.П14954.Значение = Форма.ТабличныйДокумент.Области.П14004.Значение
									+ Форма.ТабличныйДокумент.Области.П14104.Значение
									+ Форма.ТабличныйДокумент.Области.П14154.Значение
									+ Форма.ТабличныйДокумент.Области.П14204.Значение
									- Форма.ТабличныйДокумент.Области.П14254.Значение;
	//Всего по разделу IV
	Форма.ТабличныйДокумент.Области.П16953.Значение = Форма.ТабличныйДокумент.Области.П16003.Значение
									+ Форма.ТабличныйДокумент.Области.П16103.Значение
									+ Форма.ТабличныйДокумент.Области.П16153.Значение
									+ Форма.ТабличныйДокумент.Области.П16203.Значение
									+ Форма.ТабличныйДокумент.Области.П16253.Значение
									+ Форма.ТабличныйДокумент.Области.П16303.Значение
									+ Форма.ТабличныйДокумент.Области.П16653.Значение
									+ Форма.ТабличныйДокумент.Области.П16903.Значение;
	
	Форма.ТабличныйДокумент.Области.П16954.Значение = Форма.ТабличныйДокумент.Области.П16004.Значение
									+ Форма.ТабличныйДокумент.Области.П16104.Значение
									+ Форма.ТабличныйДокумент.Области.П16154.Значение
									+ Форма.ТабличныйДокумент.Области.П16204.Значение
									+ Форма.ТабличныйДокумент.Области.П16254.Значение
									+ Форма.ТабличныйДокумент.Области.П16304.Значение
									+ Форма.ТабличныйДокумент.Области.П16654.Значение
									+ Форма.ТабличныйДокумент.Области.П16904.Значение; 
	//  БАЛАНС  (Пассив)
	Форма.ТабличныйДокумент.Области.П19003.Значение = Форма.ТабличныйДокумент.Области.П14953.Значение
									+ Форма.ТабличныйДокумент.Области.П15953.Значение
									+ Форма.ТабличныйДокумент.Области.П16953.Значение
									+ Форма.ТабличныйДокумент.Области.П17003.Значение;
	
	Форма.ТабличныйДокумент.Области.П19004.Значение = Форма.ТабличныйДокумент.Области.П14954.Значение
									+ Форма.ТабличныйДокумент.Области.П15954.Значение
									+ Форма.ТабличныйДокумент.Области.П16954.Значение
									+ Форма.ТабличныйДокумент.Области.П17004.Значение;
	
	//2. Отчет о финансовых результатах
	//І. Финансовые результаты

	//Вместе чистые доходы(2000 + 2120 + 2240) 
	Форма.ТабличныйДокумент.Области.ПП22803.Значение = Форма.ТабличныйДокумент.Области.ПП20003.Значение
									 + Форма.ТабличныйДокумент.Области.ПП21203.Значение
									 + Форма.ТабличныйДокумент.Области.ПП22403.Значение;
	
	Форма.ТабличныйДокумент.Области.ПП22804.Значение = Форма.ТабличныйДокумент.Области.ПП20004.Значение 
									 + Форма.ТабличныйДокумент.Области.ПП21204.Значение
									 + Форма.ТабличныйДокумент.Области.ПП22404.Значение;
	
	//Итого затраты (2180 + 2270 + 2050) 
	ПП22853 = Форма.ТабличныйДокумент.Области.ПП21803.Значение 
		   + Форма.ТабличныйДокумент.Области.ПП22703.Значение
		   + Форма.ТабличныйДокумент.Области.ПП20503.Значение;
	
	ЗаполнитьПоказательНаСервере("ПП22853", ПП22853, Форма, "ОтчетМП");
	
	
	ПП22854 = Форма.ТабличныйДокумент.Области.ПП21804.Значение
		   + Форма.ТабличныйДокумент.Области.ПП22704.Значение
		   + Форма.ТабличныйДокумент.Области.ПП20504.Значение;
	
	ЗаполнитьПоказательНаСервере("ПП22854", ПП22854, Форма, "ОтчетМП");
	
	//Фінансовий результат до оподаткування (2280 - 2285)				
	Форма.ТабличныйДокумент.Области.ПП22903.Значение = Форма.ТабличныйДокумент.Области.ПП22803.Значение
									 - Форма.ТабличныйДокумент.Области.ПП22853.Значение;
	
	Форма.ТабличныйДокумент.Области.ПП22904.Значение = Форма.ТабличныйДокумент.Области.ПП22804.Значение
									 - Форма.ТабличныйДокумент.Области.ПП22854.Значение;
	
	//Чистий прибуток (збиток) (2290 - 2300)								
	Форма.ТабличныйДокумент.Области.ПП23503.Значение = Форма.ТабличныйДокумент.Области.ПП22903.Значение
									 - Форма.ТабличныйДокумент.Области.ПП23003.Значение;
	
	Форма.ТабличныйДокумент.Области.ПП23504.Значение = Форма.ТабличныйДокумент.Области.ПП22904.Значение
									 - Форма.ТабличныйДокумент.Области.ПП23004.Значение;
									 
	Если НЕ Форма.СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда	
	   // Не отображаем сообщения при пакетном тестировании
	   
	   Если Форма.ТабличныйДокумент.Области.П13003.Значение <> Форма.ТабличныйДокумент.Области.П19003.Значение Тогда
		   Сообщить (НСтр("ru='             $$$ ВНИМАНИЕ $$$';uk='             $$$ УВАГА $$$'"),);
		   Сообщить (НСтр("ru='Не совпадают суммы актива и пассива(на начало периода), проверьте оборотно-сальдовую ведомость';uk='Не збігаються суми активу і пасиву(на початок періоду), перевірте оборотно-сальдову відомість'"),);
		   Сообщить (НСтр("ru='АКТИВ  = ';uk='АКТИВ  = '") + Форма.ТабличныйДокумент.Области.П13003.Значение);
		   Сообщить (НСтр("ru='ПАССИВ  = ';uk='ПАСИВ  = '") + Форма.ТабличныйДокумент.Области.П19003.Значение);
	   КонецЕсли;
	   
	   Если Форма.ТабличныйДокумент.Области.П13004.Значение <> Форма.ТабличныйДокумент.Области.П19004.Значение Тогда
		   Сообщить (НСтр("ru='             $$$ ВНИМАНИЕ $$$';uk='             $$$ УВАГА $$$'"),);
		   Сообщить (НСтр("ru='Не совпадают суммы актива и пассива(на конец периода), проверьте оборотно-сальдовую ведомость';uk='Не збігаються суми активу і пасиву(на кінець періоду), перевірте оборотно-сальдову відомість'"),);
		   Сообщить (НСтр("ru='АКТИВ  = ';uk='АКТИВ  = '") + Форма.ТабличныйДокумент.Области.П13004.Значение);
		   Сообщить (НСтр("ru='ПАССИВ  = ';uk='ПАСИВ  = '") + Форма.ТабличныйДокумент.Области.П19004.Значение);
	   КонецЕсли;
	   
   КонецЕсли;

	ЗаполнитьЗначенияВСкобках(Форма);
	
КонецПроцедуры // Расчет()


&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
				
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект), НСтр("ru='Удалить текущую страницу?';uk='Видалити поточну сторінку?'"), РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
			
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
    
    КопияТекущиеДанные = ТекущиеДанные;
    
    ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
    
    Если ТекущиеДанные = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
        Возврат;
    КонецЕсли;
    
    ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
    Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
        ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
        СтруктураРеквизитовФормы.НомерТекущейСтраницы = ТекущаяСтраницаРазделаПослеУдаления.КолонкаНомерСтраницыРазделаОтчета;
    КонецЕсли;
    
    УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
    
    ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
    
    НомерСтраницы = 1;
    
    Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
        
        СтраницаРаздела.КолонкаРазделыОтчета              = "Страница " + НомерСтраницы;
        СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
        
        НомерСтраницы = НомерСтраницы + 1;
        
    КонецЦикла;
    
    Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
        Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеСтраницы(Команда)
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	Если ТекущиеДанные.ПолучитьРодителя() = Неопределено
	   И ТекущиеДанные.ПолучитьЭлементы().Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Если ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() <= 1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийРаздел" + ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
			
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз <> 0 И ЭтаФорма[мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ИмяТекущейСтраницыПанели;
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.';uk='В розділі ""%1"" максимальна кількість екземплярів сторінок дорівнює 
|%2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);

			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = ЭтаФорма[ИмяТекТабличногоПоля];
		
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));
	
	Если СтрТаблицаСтраницы.Количество() > 0 Тогда

		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		
		// Убираем активность у текущей страницы
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
        		
	КонецЕсли;
	
	// Добавляем новую страницу
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	
	// Присваиваем представление по умолчанию
	СтрНоваяСтраница.Представление      = "Новая страница";
	СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;
	
	// Ставим признак активной страницы
	СтрНоваяСтраница.АктивнаяСтраница   = Истина;
	
	ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели);
	
	Модифицированность = Истина;
			
КонецПроцедуры // ВставитьДополнительнуюСтраницуНаСервере()

&НаСервере
Процедура ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели)
	
	ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
		
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // ПослеДобавленияДопСтрНаСервере()

&НаСервере
Процедура ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели)
	
	//Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
	//	ИзменитьЦветЯчеекНаСервере();
	//КонецЕсли;
	
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
		
КонецПроцедуры // ПослеВставкиДополнительнойСтраницыНаСервере()

&НаСервере
Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели)
	
	//итоговые ячейки не очистились - необходимо провести расчет
	//для этого сохраним данные страницы
	РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);
	
КонецПроцедуры // СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере()

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	РасчетНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
КонецПроцедуры // УдалитьДополнительнуюСтраницуНаСервере()

// ДобавитьСтроку()
//
&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		
		ВставитьДополнительнуюСтрокуНаСервере();
		
	#Иначе
		
		ВставитьДополнительнуюСтрокуНаКлиенте();
		
	#КонецЕсли
		
КонецПроцедуры // ДобавитьСтроку()

// УдалитьСтроку()
//
&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];

	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.';uk='Не обрано строку багаторядкового розділу, що видаляється'");
	
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;

	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Удалить выбранную строку?%1(Внимание! Данная операция необратима)';uk='Вилучити вибраний рядок?%1(Увага! Дана операція необоротна)'"), Символы.ПС), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    #Если ВебКлиент Тогда
        УдалитьДополнительнуюСтрокуНаСервере();
    #Иначе
        УдалитьДополнительнуюСтрокуНаКлиенте();
    #КонецЕсли

КонецПроцедуры // УдалитьСтроку()

&НаСервере
Процедура ВставитьДополнительнуюСтрокуНаСервере()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // ВставитьДополнительнуюСтрокуНаСервере()

&НаКлиенте
Процедура ВставитьДополнительнуюСтрокуНаКлиенте()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // ВставитьДополнительнуюСтрокуНаКлиенте()

// Создает новую строку многострочного раздела.
// Процедура вставляет строку в многострочный блок.
//
// Параметры:
//  Форма          - ссылка на форму отчета
//  ИмяГруппыБлока - имя группы, в том случае, если необходимо вставить строки в процедурах автозаполнения, без фокусировок.
//  СпециальноеДобавление - режим добавления строк по нестандартному алгоритму, когда в правой части распологаются данные.
//  ИмяКолонкиНомера - имя колонки, в которой необходимо проставлять номер при вставки строки.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ИмяГруппыБлока = Неопределено, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = 1) Экспорт
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	Если ИмяГруппыБлока = Неопределено Тогда
		// Сначала выполним проверку на активную страницу панели формы,
		// которая содержит многострочный раздел
			
		ТекущаяСтраница = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		ТекТабличноеПоле = Форма.ТабличныйДокумент;

		ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
		#Если НаКлиенте Тогда
			ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
		#Иначе
			ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
		#КонецЕсли

		Если ИмяГруппы = Неопределено Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.';uk='Не обрано багаторядковий розділ, у який необхідно додати рядок.'");

			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
	Иначе
		ИмяГруппы = ИмяГруппыБлока;
	КонецЕсли;

	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	
	КолонкиГруппы = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];
	
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	ИмяПервойКолонки = КолонкиГруппы[0];
	ИмяПервойЯчейкиПоследнейСтроки = ИмяПервойКолонки + "_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	НазначитьИмяОбластиМЧ = Ложь;
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	Если Найти(ВставляемаяОбласть.Имя, "МногострочнаяЧасть") > 0 Тогда
		НазначитьИмяОбластиМЧ = Истина;
		ИмяМногострочнойЧасти = ВставляемаяОбласть.Имя;
	КонецЕсли;

	Если СпециальноеДобавление Тогда
		
	Иначе
				
		// добавляем в таблицу новую строку
		РегламентированнаяОтчетностьВызовСервера.ВставитьОбластьВТабличныйДокумент(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	Если НазначитьИмяОбластиМЧ Тогда
		ТекТабличноеПоле.Область(НомерНижнЯчейкиОбласти + 1, , НомерНижнЯчейкиОбласти + (НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти) + 1, ).Имя = "";
		ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, ).Имя = ИмяМногострочнойЧасти;
	КонецЕсли;

	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	
	Для Каждого ИмяКолонки ИЗ КолонкиГруппы Цикл
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
			Если ИмяКолонкиНомера <> Неопределено Тогда
				Если ИмяКолонкиНомера = ИмяКолонки Тогда
					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ОбластьЯчейки.Значение = КолСтрок + НомерПервойСтроки;
					Иначе
						ОбластьЯчейки.Текст = КолСтрок + НомерПервойСтроки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Если ИмяГруппыБлока = Неопределено Тогда

		// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
		// Определяем текущую область таблицы
		
		//ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;
		ИмяТекущейОбласти = ИмяПервойКолонки + "_" + КолСтрокСтр1;

		Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
				
		// установим фокус на поле табличн. документа
		ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
		
	КонецЕсли;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	Форма.Модифицированность = Истина;
			
КонецПроцедуры // ВставитьДополнительнуюСтроку()

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // УдалитьДополнительнуюСтрокуНаСервере()

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // УдалитьДополнительнуюСтрокуНаКлиенте()

// Удаляет строку многострочного раздела формы.
&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = 1) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
    	
	ТекущаяСтраница = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	ТекТабличноеПоле = Форма.ТабличныйДокумент;

	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	#Если НаКлиенте Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли

	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
   	КолонкиГруппы = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];
	ИмяПервойКолонки = КолонкиГруппы[0];
	
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	ИмяЯчейки = ТекущаяОбласть.Имя;

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		
		//ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + Формат(НомУдаляемойСтроки, "ЧГ=0");
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяПервойКолонки + "_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		МногострочностьВРазделе = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ДанныеФормыКоллекция") Тогда
			ИмяОбластиМнгЧ = МногострочностьВРазделе.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].Область;
		КонецЕсли;
		// Найдем координаты области, для последующего восстановления.

		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;

		Если СпециальноеДобавление Тогда
			
		Иначе
					
			РегламентированнаяОтчетностьВызовСервера.УдалитьОбластьИзТабличногоДокумента(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
			Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
			
		КонецЕсли;
		// Восстановим область.
		ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр - 1];

				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				
				Для Каждого КолонкаИмя ИЗ КолонкиГруппы Цикл
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ИмяКолонкиНомера <> Неопределено Тогда
							Если ИмяКолонкиНомера = КолонкаИмя Тогда
								// обновляем порядковый номер строки
								
								НовыйПорядковыйНомер = НСтр - 1 + НомерПервойСтроки - 1;
								
								Если ОбластьСдвинутойЯчейки.СодержитЗначение = Истина Тогда
									ОбластьСдвинутойЯчейки.Значение = НовыйПорядковыйНомер;
								Иначе
									ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1 + НомерПервойСтроки - 1;
			
			Для Каждого КолонкаТаблицыИмя ИЗ КолонкиГруппы Цикл
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					Если ИмяКолонкиНомера <> Неопределено Тогда
						Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
							// обновляем порядковый номер строки
							СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла;
		
		КонецЦикла;

		// Данные в многострочном блоке обновляются в декларациях!
		// Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	//ИмяТекущейОбласти = ИмяГруппы + "01_" + Формат(НомТекущейСтроки, "ЧГ=0");
	ИмяТекущейОбласти = ИмяПервойКолонки + "_" + Формат(НомТекущейСтроки, "ЧГ=0");
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];

	Форма.Модифицированность = Истина;
		
	#Если НаКлиенте Тогда
		Форма.РасчетНаКлиенте(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#Иначе
		Форма.РасчетНаСервере(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#КонецЕсли

КонецПроцедуры // УдалитьДополнительнуюСтроку()
		
&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки 			 = Область.Имя;
	НаименованиеТекЛиста = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	
	Если Лев(ИмяЯчейки, 1) = "_" Тогда
		
		ИмяЯчейкиБезСкобок = Сред(ИмяЯчейки, 2);
		ТекЗначениеБезСкобок = ТабличныйДокумент.Области[ИмяЯчейкиБезСкобок].Значение;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводЧислаВСкобкахЗавершение",ЭтаФорма, Новый Структура("ИмяЯчейки", ИмяЯчейкиБезСкобок));
		ПоказатьВводЧисла(ОписаниеОповещения, ТекЗначениеБезСкобок, НСтр("ru='Значение в скобках';uk='Значення в дужках'"), 15, 2);
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;		
	
КонецПроцедуры // ОбработкаВыбораВПолеТабличногоДокумента()

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	Модифицированность = Истина;
		
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", Область.Имя));
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если    ИмяРаздела = "ОтчетМП" Тогда
		
		ИмяОбласти = Область.Имя;
		
		Если Сред(Область.Имя,1,1)<> "_" Тогда 
			РасчетНаКлиенте();
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры // ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента()

&НаКлиенте
Процедура ДатаПодписиПриИзменении(Элемент)
	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
	Модифицированность = Истина;
		
КонецПроцедуры // ДатаПодписиПриИзменении()

&НаСервере
Процедура ПослеСменыЕдИзмеренияИТочности()

	ЗаполнитьПустыеСтруктурыДанных();
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
		
КонецПроцедуры // ПослеСменыЕдИзмеренияИТочности()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
&НаСервере
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в гривнах точность не может превышать 2 знака';uk='%1: при виведенні сум у гривнях точність не може перевищувати 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах гривен точность не может превышать 3 знака';uk='%1: при виведенні сум в тисячах гривень точність не може перевищувати 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах гривен точность не может превышать 6 знаков';uk='%1: при виведенні сум у мільйонах гривень точність не може перевищувати 6 знаків'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
		
КонецПроцедуры // Обновить()

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	    
КонецПроцедуры // ОткрытьФормуНастроек()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("Автосохранение", Ложь);
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет",		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", 		СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
					
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
    
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета,ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Если РезультатВыбора <> Неопределено Тогда
		КопироватьДанныеФормы(РезультатВыбора, мДеревоВыбранныхСтраниц);
		РегламентированнаяОтчетностьКлиентСервер.ПрорисоватьПодменюПечать(ЭтаФорма);
		Модифицированность = Истина;
					
		флЗначенияИдентичны = Истина;
		
		Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
			
			Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = РезультатВыбора.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
				флЗначенияИдентичны = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			
			#Если ВебКлиент Тогда
				ИзменитьТаблицуВариантовЗаполненияНаСервере();
			#Иначе
				РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			#КонецЕсли	
			
			Расчет(ЭтаФорма);
			
		КонецЕсли;
		
		Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		 ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
			ПослеСменыЕдИзмеренияИТочности();
		КонецЕсли;
		
		// Управляем видимостью страниц основной панели формы
	    РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
		
		Если НЕ флЗначенияИдентичны Тогда
			
			СформироватьДеревоРазделовОтчетаНаКлиенте();
			
			Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
				
				// Пытаемся найти ранее запомненный раздел.
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
				
				Если НЕ НайденнаяСтрока = Неопределено 
					И НЕ НомерСтраницыРазделаОтчета = Неопределено 
					И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
					
					НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
					
				КонецЕсли;
				
				// В случае успешного поиска, устанавливаем курсор на найденный раздел.
				Если НЕ НайденнаяСтрока = Неопределено Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				КонецЕсли;
				
			КонецЕсли;
			
			// обнулим информацию о выделенных областях, так как набор страниц были изменен.
			СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Неопределено;
			
		КонецЕсли;
		
	Иначе
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры // ИзменитьТаблицуВариантовЗаполненияНаСервере()

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
		
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)

	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела" + Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхОтчетМП.Очистить();
	
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	ЗаполнитьЗначенияВСкобках(ЭтаФорма);
	
КонецПроцедуры // ОчиститьНаСервере()

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры // ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере()

&НаКлиенте
Функция НайтиСвойстваПоказателя(КодПоказателя)
	
	СвойстваПоказателя = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", КодПоказателя));
		
	Если СвойстваПоказателя.Количество() = 0 Тогда
		
		СвойстваПоказателя = Неопределено;
		
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(КодПоказателя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				СвойстваПоказателя = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		СвойстваПоказателя = СвойстваПоказателя[0];
		
	КонецЕсли;
		
	Возврат СвойстваПоказателя;
	
КонецФункции // НайтиСвойстваПоказателя()

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда

		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ВвестиПоказатель()

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
	
КонецПроцедуры


// ПоказатьБланк()
//
&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры // ПоказатьБланк()

// ПечататьСразу()
//
&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры // ПечататьСразу()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено, НеИзФормыОтчета = Ложь) Экспорт
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и%1задать его в качестве используемого по умолчанию!';uk='Перед формуванням друкованих форм необхідно визначити в системі принтер%1задати його в якості використовуваного за замовчуванням!'"), Символы.ПС));				
		Возврат;
	КонецЕсли;
              	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...';uk='%1. Формується друкована форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
				
	ПечатьНаСервере(ВидПечати, ЧтоИскать);
		
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

КонецПроцедуры // Печать()

// ПечатьНаСервере()
//
&НаСервере
Процедура ПечатьНаСервере(ВидПечати, ЧтоИскать = Неопределено);
				
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
				
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	ОбщиеРеквизитыРазделов = Новый Структура();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЕстьДуплекс",        СтруктураРеквизитовФормы.ЕстьДуплекс);
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
КонецПроцедуры // ПечатьНаСервере()
	
// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов)
		
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
КонецПроцедуры // ВывестиНаПечатьЛист()

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		СохрАктивнаяСтраница = ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница;
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = СохрАктивнаяСтраница;
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
    		
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()
      
&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	Если Найти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ВнешнийСтр = НСтр("ru='- внешний отчет';uk='- зовнішній звіт'");
	Заголовок = Заголовок + ?(Найти(ЭтаФорма.ИмяФормы, "Внешний") > 0, ВнешнийСтр, "");
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если Найти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если Найти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
	ИначеЕсли Найти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
			
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры // ОчисткаРегламентированногоОтчетаНаСервере()

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если Найти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
	ИначеЕсли Найти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СформироватьДеревоРазделовОтчетаНаКлиенте();
	
КонецПроцедуры // ОчисткаРегламентированногоОтчетаНаКлиенте()

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	ПараметрыЗаполненияЗвит1С = Неопределено;
	Если НЕ ЗначениеЗаполнено(ИспКлассыСчетов) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не установлены ""Используемые классы счетов расходов"" за %1 год! Автоматическое заполнение отчета невозможно!';uk='Не встановлени ""Використовувані класи рахунків витрат"" за %1 рік! Автоматичне заповнення звіту неможливо!'"), Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета)); 
		ПоказатьПредупреждение(, ТекстСообщения);				
		Возврат
	КонецЕсли;
	флЗаполнятьПрошлыйПериод = Истина;
	Если НЕ ЗначениеЗаполнено(ИспКлассыСчетовПрошлГода) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не установлены ""Используемые классы счетов расходов"" за %1 год! Автоматическое заполнение показателей прошлого года невозможно!';uk='Не встановлени ""Використовувані класи рахунків витрат"" за %1 рік! Автоматичне заповнення показників минулого року неможливо!'"), Год(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -12))); 
		ПоказатьПредупреждение(, ТекстСообщения);				
		флЗаполнятьПрошлыйПериод = Ложь;
	КонецЕсли;

	
	ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С, флЗаполнятьПрошлыйПериод);
	
	ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьАвто()

&НаСервере
Процедура ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С, флЗаполнятьПрошлыйПериод=Истина) Экспорт
	
	ОчиститьНаСервере();
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	Заполнить(ПараметрыЗаполненияЗвит1С, флЗаполнятьПрошлыйПериод);
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура Заполнить(ПараметрыЗаполненияЗвит1С, флЗаполнятьПрошлыйПериод)
	
    ТаблицаРасшифровки = Неопределено;
	Если СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровки") И ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки) Тогда
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	КонецЕсли;
	
	Если ТаблицаРасшифровки = Неопределено Тогда
		ТаблицаРасшифровки = Новый ТаблицаЗначений;
		ТаблицаРасшифровки.Колонки.Добавить("ИмяПоказателя");
		ТаблицаРасшифровки.Колонки.Добавить("НаименованиеПоказателя");
		ТаблицаРасшифровки.Колонки.Добавить("ЗнакОперации");
		ТаблицаРасшифровки.Колонки.Добавить("НаименованиеСлагаемого");
		ТаблицаРасшифровки.Колонки.Добавить("Сумма");
		ТаблицаРасшифровки.Колонки.Добавить("ИмяРаздела");
		ТаблицаРасшифровки.Колонки.Добавить("ДополнительныеПараметры");
	КонецЕсли;
	
	ТаблицаРасшифровки.Очистить();
	
	ОбщиеПараметрыРасшифровки = Новый Структура;
	ОбщиеПараметрыРасшифровки.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ОбщиеПараметрыРасшифровки.Вставить("НачалоПериода", НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
	ОбщиеПараметрыРасшифровки.Вставить("КонецПериода", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);

	ОбщиеПараметрыРасшифровкиПрошлыйПериод = Новый Структура;
	ОбщиеПараметрыРасшифровкиПрошлыйПериод.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ОбщиеПараметрыРасшифровкиПрошлыйПериод.Вставить("НачалоПериода", НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -12)));
	ОбщиеПараметрыРасшифровкиПрошлыйПериод.Вставить("КонецПериода",  ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, - 12));
	
	////////
	// *** Здесь необходимо написать алгоритм заполнения отчета.***
	//
	// Для присвоения показателям отчета вычисленного значения необходимо
	// использовать процедуру
	//
	//     УстановитьЗначениеПоказателя(ИмяПоказателя, ЗначениеПоказателя).
	//
	////////
	// Инициализация
	ПС = ПланыСчетов["Хозрасчетный"];
	Счет10      = ПС.ОсновныеСредства;
	Попытка
		Счет10_0    = ПС.ИнвестиционнаяНедвижимость;
	Исключение
	КонецПопытки;
	Счет11      = ПС.ДругиеНеоборотныеМатериальныеАктивыГруппа;
	Счет12      = ПС.НематериальныеАктивы;
	Счет13      = ПС.ИзносАмортизацияНеоборотныхАктивов;
    Счет13_3    = ПС.НакопленнаяАмортизацияНематериальныхАктивов;
	Счет13_4    = ПС.НакопленнаяАмортизацияДолгосрочныхБиологическихАктивов;
	Счет14      = ПС.ДолгосрочныеФинансовыеИнвестиции;
	Счет15      = ПС.КапитальныеИнвестиции;
	Счет16      = ПС.ДолгосрочныеБиологическиеАктивы;
	Счет17      = ПС.ОтсроченныеНалоговыеАктивы;
    Счет19      = ПС.Гудвил;
	Счет18      = ПС.ДолгосрочнаяДебиторскаяЗадолженностьИПрочиеНеоборотныеАктивы;
	Счет20      = ПС.ПроизводственныеЗапасы;
	Счет22      = ПС.МалоценныеИБыстроизнашивающиесяПредметы;
	Счет21      = ПС.ТекущиеБиологическиеАктивы;
	Счет23      = ПС.Производство;
	Счет24      = ПС.БракВПроизводстве;
	Счет25      = ПС.Полуфабрикаты;
	Счет26      = ПС.ГотоваяПродукция;
	Счет27      = ПС.ПродукцияСельскохозяйственногоПроизводства;
	Счет28      = ПС.Товары;
	Попытка
		Счет28_6    = ПС.НеоборотныеАктивыИГруппыВыбытияУдерживаемыеДляПродажи;
	Исключение
	КонецПопытки;
	Счет30      = ПС.Касса;
	Счет301     = ПС.КассаВНациональнойВалюте;
	Счет31      = ПС.СчетаВБанках;
    Счет33      = ПС.ПрочиеДенежныеСредства;
	Счет33_1    = ПС.ДенежныеДокументыВНациональнойВалюте;
	Счет33_2    = ПС.ДенежныеДокументыВИностраннойВалюте;
	Счет34      = ПС.КраткосрочныеВекселяПолученные;
    Счет35      = ПС.ТекущиеФинансовыеИнвестиции;
    Счет35_1    = ПС.ЭквивалентыДенежныхСредств;
	Счет35_2    = ПС.ПрочиеТекущиеФинансовыеИнвестиции;
	Счет36      = ПС.РасчетыСПокупателямиИЗаказчиками;
    Счет37      = ПС.РасчетыСРазнымиДебиторами;
    Счет37_8    = ПС.РасчетыСГосударственнымиЦелевымиФондами;
	Счет38      = ПС.РезервСомнительныхДолгов;
	Счет38_2    = ПС.ПоЗадолженностиЗаРасчетыСБюджетом;
	Счет38_5    = ПС.ПоЗадолженностиЗаВнутренниеРасчеты;
	Счет38_6    = ПС.ПоПрочейДебиторскойЗадолженности;
	Счет39      = ПС.ЗатратыБудущихПериодов;
   //Счет40      = ПС.УставныйКапитал;
   //Счет41      = ПС.ПаевойКапитал;
   Попытка
	  Счет40   = ПС.ЗарегистрированныйПаевойКапитал;
	  Счет40_4 = ПС.ВзносыВНезарегистрированныйУставнойКапитал;
	  Счет41   = ПС.ДооценкаАктивов;
   Исключение 
	  Счет40    = ПС.ПустаяСсылка(); 
	  Счет40_4  = ПС.ПустаяСсылка();
	  Счет41    = ПС.ПустаяСсылка();
   КонецПопытки;	
	Счет42      = ПС.ДополнительныйКапитал;
	Счет43      = ПС.РезервныйКапитал;
	Счет44      = ПС.НераспределеннаяПрибыльНепокрытыеУбытки;
	Счет45      = ПС.ИзъятыйКапитал;
	Счет46      = ПС.НеоплаченныйКапитал;
	Счет47      = ПС.ОбеспечениеБудущихЗатратИПлатежей;
	Счет47_1    = ПС.ОбеспечениеВыплатОтпусков;
	Попытка
		Счет47_7    = ПС.ОбеспечениеМатериальногоПоощерения; 
	Исключение
	КонецПопытки;
	Счет48      = ПС.ЦелевоеФинансированиеИЦелевыеПоступления;
	Счет49      = ПС.СтраховыеРезервы;
	Счет52      = ПС.ДолгосрочныеОбязательстваПоОблигациям;
	Счет50      = ПС.ДолгосрочныеЗаймы;
	Счет54      = ПС.ОтсроченныеНалоговыеОбязательства;
	Счет51      = ПС.ДолгосрочныеВекселяВыданные;
	Счет53      = ПС.ДолгосрочныеОбязательстваПоАренде;
	Счет55      = ПС.ПрочиеДолгосрочныеОбязательства;
    Счет60      = ПС.КраткосрочныеЗаймы;
	Счет60_5    = ПС.ПросроченныеЗаймыВНациональнойВалюте;
	Счет60_6    = ПС.ПросроченныеЗаймыВИностраннойВалюте;
	Счет61      = ПС.ТекущаяЗадолженностьПоДолгосрочнымОбязательствам;
	Счет62      = ПС.КраткосрочныеВекселяВыданные;
	Счет63      = ПС.РасчетыСПоставщикамиИПодрядчиками;
	Счет64_1    = ПС.РасчетыПоНалогам;
	Счет64_12   = ПС.РасчетыПоНДС;
	Счет64_13   = ПС.РасчетыПоНалогуНаПрибыль;
	Счет64_15   = ПС.РасчетыПоДругимНалогам;
	Счет64_16   = ПС.РасчетыПоАкцизу;
	Счет64_2    = ПС.РасчетыПоОбязательнымПлатежам;
	Счет64_3    = ПС.НалоговыеОбязательстваВсего;
	Счет64_4    = ПС.НалоговыйКредитВсего;
    Если НЕ ПС.НайтиПоКоду(645) = ПС.ПустаяССылка() Тогда
		Счет64_5    = ПС.НайтиПоКоду(645);
    КонецЕсли;
	Счет65      = ПС.РасчетыПоСтрахованию;
	Счет65_1    = ПС.РасчетыПоПенсионномуОбеспечению;
	Счет65_2    = ПС.РасчетыПоСоциальномуСтрахованию;
	Счет65_3    = ПС.РасчетыПоСтрахованиюНаСлучайБезработицы;
	Счет65_6    = ПС.РасчетыПоСтрахованиюОтНесчастныхСлучаев;
	Счет66      = ПС.РасчетыПоОплатеТруда;
	Счет67      = ПС.РасчетыСУчастниками;
    Счет68      = ПС.РасчетыПоДругимОперациям;
	Попытка
		Счет68_0    = ПС.РасчетыПоНеоборотнымАктивамИГруппамВыбытияУдерживаемымиДляПродажи;
	Исключение
	КонецПопытки;
	Счет68_5    = ПС.РасчетыСДругимиКредиторами;
	Счет69      = ПС.ДоходыБудущихПериодов;
	Счет70      = ПС.ДоходыОтРеализации;
	Счет70_1    = ПС.ДоходОтРеализацииГотовойПродукции;
	Счет70_2    = ПС.ДоходОтРеализацииТоваров;
	Счет70_3    = ПС.ДоходОтРеализацииРаботИУслуг;
	Счет70_4    = ПС.ВычетыИзДохода;
	Попытка
		Счет70_9_1  = ПС.ДоходОтРозницы;
	Исключение
		Счет70_9_1  = ПС.ПустаяСсылка();
	КонецПопытки;	
	Счет71      = ПС.ДругойОперационныйДоход;
	Счет72      = ПС.ДоходОтУчастияВКапитале;
	Счет73      = ПС.ПрочиеФинансовыеДоходы;
	Счет74      = ПС.ДругиеДоходы;
	Попытка
		Счет75  = ПС.ЧрезвычайныеДоходы;
	Исключение
		Счет75  = ПС.ПустаяСсылка();
	КонецПопытки;	
	Счет79      = ПС.ФинансовыеРезультаты;
	Счет79_1    = ПС.РезультатОперационнойДеятельности;
	Счет80      = ПС.МатериальныеЗатраты;
	Счет81      = ПС.ЗатратыНаОплатуТруда;
	Счет82      = ПС.ОтчисленияНаСоциальныеМероприятия;
	Счет83      = ПС.Амортизация;
	Счет84      = ПС.ДругиеОперационныеЗатраты;
	Счет85      = ПС.ДругиеЗатратыПоЭлементам;
	Счет90      = ПС.СебестоимостьРеализации;
	Счет91      = ПС.ОбщепроизводственныеРасходы;
	Счет92      = ПС.АдминистративныеРасходы;
	Счет93      = ПС.РасходыНаСбыт;
	Счет94      = ПС.ДругиеЗатратыОперационнойДеятельностиГруппа;
	Счет94_2    = ПС.СебестоимостьРеализованнойИностраннойВалюты;
	Счет94_3    = ПС.СебестоимостьРеализованныхПроизводственныхЗапасов;
	Счет95      = ПС.ФинансовыеЗатраты;
	Счет96      = ПС.ПотериОтУчастияВКапитале;
	Счет97      = ПС.ДругиеЗатратыДеятельности;
	Счет98      = ПС.НалогНаПрибыль;
	Попытка
		Счет99      = ПС.ЧрезвычайныеЗатраты;
	Исключение
		Счет99  = ПС.ПустаяСсылка();
	КонецПопытки;	
	
	
	ПараметрыСредняяЧисленность = Новый Структура;
	ПараметрыСредняяЧисленность.Вставить("ВидПериода", "КВАРТАЛСНАЧАЛАГОДА") ;
	ПараметрыСредняяЧисленность.Вставить("НачалоПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыСредняяЧисленность.Вставить("КонецПериода", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыСредняяЧисленность.Вставить("ВидСредней", "ССЧ") ;
	ПараметрыСредняяЧисленность.Вставить("ОтборШтат", Ложь);
	ПараметрыСредняяЧисленность.Вставить("ОтборПол", Неопределено);
	ПараметрыСредняяЧисленность.Вставить("ОтборИнвалиды", Ложь);
	ПараметрыСредняяЧисленность.Вставить("ОтборНеИнвалиды", Ложь);
	ПараметрыСредняяЧисленность.Вставить("ОтборПенсионеры", Ложь);
	ПараметрыСредняяЧисленность.Вставить("ОтборНеПенсионеры", Ложь);
	ПараметрыСредняяЧисленность.Вставить("ОтборИностранцы", Ложь);
	ПараметрыСредняяЧисленность.Вставить("ОтборДопГарантии", Ложь);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") Тогда
		Если РегламентированнаяОтчетностьПереопределяемый.ИДПодсистемыЗарплаты() = "ЕРПЗИК"  Тогда
			ТаблЧисленностиССЧ = КадровыйУчет.СреднесписочнаяЧисленностьРаботающих(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета); 
			УстановитьЗначениеПоказателя("СреднеспКво", ТаблЧисленностиССЧ.ЧисленностьРаботников);
		Иначе	
			//ТаблСреднеспЧисленности = КадровыйУчет.ПолучитьСреднююЧисленность(СтруктураРеквизитовФормы.Организация, ПараметрыСредняяЧисленность); 
			ТаблСреднеспЧисленности = ИНАГРО_ПроведениеРасчетов.ПолучитьСреднююЧисленность(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ССЧ", "МЕСЯЦ", СтруктураРеквизитовФормы.Организация, "Штат"); 
			СреднеспКво = ТаблСреднеспЧисленности[0].Средняя;
			УстановитьЗначениеПоказателя("СреднеспКво", СреднеспКво);
		КонецЕсли;
	КонецЕсли;
	
	// Бухгалтерский итоги по счетам
	мБухИтоги = Обработки.БухгалтерскиеИтоги.Создать();
	
	// Бухгалтерские итоги по аналитике
	мБухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();
	
	//Бухгалтерские итоги за аналогичный период прошлого года
	мБухИтоги22 = Обработки.БухгалтерскиеИтоги.Создать();
	
	Итоги = "НачальныйОстатокДт, НачальныйРазвернутыйОстатокДт, 
	|НачальныйОстатокКт, НачальныйРазвернутыйОстатокКт,
	|КонечныйОстатокДт,  КонечныйРазвернутыйОстатокДт, 
	|КонечныйОстатокКт,  КонечныйРазвернутыйОстатокКт,
	|ОборотДт, ОборотКт, 
	|КорОборотДт, КорОборотКт";
	
	// Бухгалтерские итоги по счетам, без аналитики
	мБухИтоги.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет,КорСчет", НачалоГода (СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, , , , , , "Организация", СтруктураРеквизитовФормы.Организация);
	
    //строка 1000
	//   авторасчет
	
	//строка 1001 нематериальные активы, первоначальная стоимость
	П10013 = СНД(Счет12);
	Попытка
		УстановитьЗначениеПоказателя("П10013", П10013);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма,"П10013", "Показник ""Нематеріальні активи:первiсна вартiсть"", графа ""На початок звітного періоду""","+","!СНД", П10013,Счет12,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Исключение
	КонецПопытки;
	
	П10014 = СКД(Счет12);
	
	Попытка
		УстановитьЗначениеПоказателя("П10014", П10014);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма,"П10014", "Показник ""Нематеріальні активи:первiсна вартiсть"", графа ""На кінець звітного періоду""","+","!СКД", П10014,Счет12);
	Исключение
	КонецПопытки;

	//строка 1002 нематериальные активы: накопленная амортизация
	П10023 = СНК(Счет13_3);
	
	Попытка
		УстановитьЗначениеПоказателя("П10023",  П10023);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П10023", "Показник ""Нематеріальні активи: накопичена амортизація"", графа ""На початок звітного періоду""",	"+", "!СНК",П10023, Счет13_3,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Исключение
	КонецПопытки;

	
	П10024 = СКК(Счет13_3);
	
	Попытка
		УстановитьЗначениеПоказателя("П10024",  П10024);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П10024", "Показник ""Нематеріальні активи: накопичена амортизація"", графа ""На кінець звітного періоду""",	"+","!СКК",П10024, Счет13_3);
	Исключение
	КонецПопытки;
	
	// строка 1005 незавершенное строительство
	П10053 = СНД(Счет15);
	УстановитьЗначениеПоказателя("П10053", П10053);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10053", "Показник ""Незавершене будівництво"", графа ""На початок звітного періоду""",	"+", "!СНД",П10053, Счет15,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	П10054 = СКД(Счет15);
	УстановитьЗначениеПоказателя("П10054", П10054);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П10054", "Показник ""Незавершене будівництво"", графа ""На кінець звітного періоду""",	"+", "!СКД",П10054, Счет15);
	
	// строка 031 основные средства:начальная стоимость 
	П10113_10 = СНД(Счет10);
	П10113_11 = СНД(Счет11);
	
	П10113 = П10113_10 + П10113_11;
	УстановитьЗначениеПоказателя("П10113", П10113);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П10113", "Показник ""Основні засоби: первісна вартісь"", графа ""На початок звітного періоду""",	"+", "!СНД",П10113_10, Счет10,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10113", "",	"+", "!СНД",П10113_11,Счет11,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	П10114_10 = СКД(Счет10);
	П10114_11 = СКД(Счет11);
	
	П10114 = П10114_10 + П10114_11;
	УстановитьЗначениеПоказателя("П10114", П10114);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П10114", "Показник ""Основні засоби: первісна вартісь"", графа ""На кінець звітного періоду""",	"+", "!СКД",П10114_10, Счет10);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10114", "",	"+", "!СКД",П10114_11,Счет11);
	
	//строка 032 основные средства: износ
	П10123_  = СНК(Счет13);
	П10123_3 = СНК(Счет13_3);
	П10123_4 = СНК(Счет13_4);
	
	П10123 = П10123_ - П10123_4 - П10123_3;
	УстановитьЗначениеПоказателя("П10123", П10123);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П10123", "Показник ""Основні засоби: знос"", графа ""На початок звітного періоду""",	"+", "!СНК",П10123_, Счет13,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П10123", "",	"-", "!СНК",П10123_3,Счет13_3,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П10123", "",	"-", "!СНК",П10123_4,Счет13_4,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	П10124_  = СКК(Счет13); 
	П10124_3 = СКК(Счет13_3);
	П10124_4 = СКК(Счет13_4);
	
	П10124 = П10124_ - П10124_4 - П10124_3;
	УстановитьЗначениеПоказателя("П10124", П10124);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П10124", "Показник ""Основні засоби: знос"", графа ""На кінець звітного періоду""",	"+", "!СКК",П10124_, Счет13);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П10124", "",	"-", "!СКК",П10124_3,Счет13_3);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"_П10124", "",	"-", "!СКК",П10124_4,Счет13_4);
	
	//строка 1020 биологические активы, первоначальная стоимость
	П10203 = СНД(Счет16) - СНК(Счет13_4);
	УстановитьЗначениеПоказателя("П10203", П10203);
	_ДобавитьСтрокуРасшифровки(ЭтаФорма,"П10203", "Показник ""Довгострокові біологічні активи"", графа ""На початок звітного періоду""","+","!СНД", СНД(Счет16) ,Счет16,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10203", "Показник ""Довгострокові біологічні активи"", графа ""На початок звітного періоду""",	"+", "!СНК",СНК(Счет13_4), Счет13_4,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	П10204 = СКД(Счет16) - СКК(Счет13_4);
	УстановитьЗначениеПоказателя("П10204", П10204);
	_ДобавитьСтрокуРасшифровки(ЭтаФорма,"П10204", "Показник ""Довгострокові біологічні активи"", графа ""На кінець звітного періоду""", "+","!СКД",СКД(Счет16) ,Счет16);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П10204", "Показник ""Довгострокові біологічні активи"", графа ""На кінець звітного періоду""","-","!СКК",СКК(Счет13_4), Счет13_4);
	
	
	//строка 040 Долгосрочные финансовые инвестиции, учет которых ведется методом участия 
	//в капитале других предприятий
	П10303 = СНД(Счет14);
	УстановитьЗначениеПоказателя("П10303", П10303);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П10303", "Показник ""Довгострокові фінансові інвестиції: які обліковуються за методом участі в капіталі інших підприємств"", графа ""На початок звітного періоду""",	"+", "!СНД",П10303, Счет14,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	
	П10304 = СКД(Счет14);
	УстановитьЗначениеПоказателя("П10304", П10304);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П10304", "Показник ""Довгострокові фінансові інвестиції: які обліковуються за методом участі в капіталі інших підприємств"", графа ""На кінець звітного періоду""",	"+", "!СКД",П10304, Счет14);
	
	// строка 070 Другие необоротные активы
	П10903 = СНД(Счет18) + СНД(Счет17);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П10903", "Показник ""Інші необоротні активи"", графа ""На початок звітного періоду""",	"+", "!СНД",СНД(Счет18), Счет18,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П10903", "",	"+", "!СНД",СНД(Счет17),Счет17,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	П10904 = СКД(Счет18) + СКД(Счет17);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П10904", "Показник ""Інші необоротні активи"", графа ""На кінець звітного періоду""",	"+", "!СКД",СКД(Счет18), Счет18);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П10904", "",	"+", "!СКД",СКД(Счет17),Счет17);
	
	мСчета = ПланыСчетов.Хозрасчетный.Выбрать(Счет19);
	Пока мСчета.Следующий() Цикл
		Если мСчета.Вид = ВидСчета.Пассивный Тогда
			П10903_ = СНК(мСчета.Ссылка);
			П10903  = П10903 - П10903_;
			_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10903", "","-", "!СНК",П10903_,мСчета.Ссылка,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета );
			П10904_ = СКК(мСчета.Ссылка);
			П10904  = П10904 - П10904_;
			_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10904", "","-", "!СКК",П10904_,мСчета.Ссылка);
		Иначе	
			П10903_ = СНД(мСчета.Ссылка);
			П10903  = П10903 + П10903_;
			_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10903", "","+", "!СНД",П10903_,мСчета.Ссылка,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета );
			П10904_ = СКД(мСчета.Ссылка);
			П10904  = П10904 + П10904_;
			_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П10904", "","+", "!СКД",П10904_,мСчета.Ссылка);
		КонецЕсли;
	КонецЦикла;
	УстановитьЗначениеПоказателя("П10903", П10903);
	УстановитьЗначениеПоказателя("П10904", П10904);
	
	//строка 100 запасы
	П11003 = СНД(Счет20) + СНД(Счет22) + СНД(Счет23)+ СНД(Счет24)+ СНД(Счет25) + СНД(Счет28) - СНД(Счет28_6) + СНД(Счет26) + СНД(Счет27);
	УстановитьЗначениеПоказателя("П11003", П11003);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11003", "Показник ""Запаси"", графа ""На початок звітного періоду""",	"+", "!СНД",СНД(Счет20), Счет20,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11003", "",	"+", "!СНД",СНД(Счет22),Счет22,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11003", "",	"+", "!СНД",СНД(Счет23),Счет23,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11003", "",	"+", "!СНД",СНД(Счет24),Счет24,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11003", "",	"+", "!СНД",СНД(Счет25),Счет25,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11003", "",	"+", "!СНД",СНД(Счет28),Счет28,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11003", "",	"-", "!СНД",СНД(Счет28_6),Счет28_6,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11003", "",	"+", "!СНД",СНД(Счет26),Счет26,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11003", "",	"+", "!СНД",СНД(Счет27),Счет27,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	П11004 = СКД(Счет20) + СКД(Счет22) + СКД(Счет23)+ СКД(Счет24)+ СКД(Счет25)+ СКД(Счет28) - СКД(Счет28_6) + СКД(Счет26) + СКД(Счет27);
	УстановитьЗначениеПоказателя("П11004", П11004);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11004", "Показник ""Запаси"", графа ""На кінець звітного періоду""",	"+", "!СКД",СКД(Счет20), Счет20);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11004", "",	"+", "!СКД",СКД(Счет22),Счет22);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11004", "",	"+", "!СКД",СКД(Счет23),Счет23);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11004", "",	"+", "!СКД",СКД(Счет24),Счет24);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11004", "",	"+", "!СКД",СКД(Счет25),Счет25);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11004", "",	"+", "!СКД",СКД(Счет28),Счет28);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11004", "",	"-", "!СКД",СКД(Счет28_6),Счет28_6);
	
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11004", "",	"+", "!СКД",СКД(Счет26),Счет26);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11004", "",	"+", "!СКД",СКД(Счет27),Счет27);
	
	//строка 130: готовая продукция
	// также в этой строке указываются и товары.2.6 НП(С)БУ 25: "Окремо відображається готова продукція ..., а також наводиться покупна вартість товарів, придбаних підприємствами для подальшого продажу"
	П11033 = СНД(Счет26) + СНД(Счет27) + СНД(Счет28) - СНД(Счет28_6);
	УстановитьЗначениеПоказателя("П11033", П11033);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11033", "Показник ""у тому числі готова продукція"", графа ""На початок звітного періоду""",	"+", "!СНД",СНД(Счет26), Счет26,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11033", "",	"+", "!СНД",СНД(Счет27),Счет27,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11033", "",	"+", "!СНД",СНД(Счет28),Счет28,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11033", "",	"-", "!СНД",СНД(Счет28_6),Счет28_6,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	П11034 = СКД(Счет26) + СКД(Счет27) + СКД(Счет28) - СКД(Счет28_6);
	УстановитьЗначениеПоказателя("П11034", П11034);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11034", "Показник ""у тому числі готова продукція"", графа ""На кінець звітного періоду""",	"+", "!СКД",СКД(Счет26), Счет26);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11034", "",	"+", "!СКД",СКД(Счет27),Счет27);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11034", "",	"+", "!СКД",СКД(Счет28),Счет28);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11034", "",	"-", "!СКД",СКД(Счет28_6),Счет28_6);
	
	П11103 = СНД(Счет21);
	УстановитьЗначениеПоказателя("П11103", П11103);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11103", "Показник ""Запаси: поточні біологічні активи"", графа ""На початок звітного періоду""",	"+", "!СНД",СНД(Счет21), Счет21,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	П11104 = СКД(Счет21);
	УстановитьЗначениеПоказателя("П11104", П11104);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11104", "Показник ""Запаси: поточні біологічні активи"", графа ""На кінець звітного періоду""",	"+", "!СКД",СКД(Счет21), Счет21);
	
	//строка 160 Дебиторская задолженность за товары
	// Развернутые итоги по счету 36
	П11253 = СНД(Счет34);
	П11254 = СКД(Счет34);
	ИтогиРС = "НачальныйРазвернутыйОстатокДт, НачальныйРазвернутыйОстатокКт, КонечныйРазвернутыйОстатокДт, КонечныйРазвернутыйОстатокКт";
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);

	//Расчет итогов изменен. Итоги должны рассчитываться на начало года а не периода отчета!
	мБухИтогиРС.РассчитатьИтоги("Хозрасчетный", ИтогиРС, "Сумма", "Счет,Субконто1,Субконто2,Субконто3", НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, , "36,63,68,64,65,37", , , , "Организация", СтруктураРеквизитовФормы.Организация);
	
	ВыборкаНачСчет36 = 0;	
	ВыборкаКонСчет36 = 0;
	
	ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет36);
	ВыборкаНачСчет36 = 0;
	ВыборкаКонСчет36 = 0;
	Если НЕ ВыборкаПоСчету = Неопределено Тогда
		П11253 = П11253 + ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
		ВыборкаНачСчет36 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
		
		П11254 = П11254 + ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;
		ВыборкаКонСчет36 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;
	КонецЕсли;
	
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11253", "Показник ""Дебіторська заборгованість за товари, роботи, послуги"", графа ""На початок звітного періоду""",	"+", "!СНД",СНД(Счет34), Счет34,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11253", "",	"+", "!СНДРС",ВыборкаНачСчет36, Счет36,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11254", "Показник ""Дебіторська заборгованість за товари, роботи, послуги"", графа ""На кінець звітного періоду""",	"+", "!СКД",СКД(Счет34), Счет34);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11254", "",	"+", "!СКДРС",ВыборкаКонСчет36, Счет36);
	
	// строка 160 Дебитораская задолженность за товары, резерв сомнительных долгов
	П11253 = П11253 - (СНК(Счет38) - СНК(Счет38_2) - СНК(Счет38_5) - СНК(Счет38_6));
	_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11253", "",	"-", "!СНК",СНК(Счет38), Счет38,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11253", "",	"+", "!СНК",СНК(Счет38_2), Счет38_2,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11253", "",	"+", "!СНК",СНК(Счет38_5), Счет38_5,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11253", "",	"+", "!СНК",СНК(Счет38_6), Счет38_6,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	П11254 = П11254 - (СКК(Счет38) - СКК(Счет38_2) - СКК(Счет38_5) - СКК(Счет38_6));
	
	_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11254", "",	"-", "!СКК",СКК(Счет38), Счет38);
	_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11254", "",	"+", "!СКК",СКК(Счет38_2), Счет38_2);
	_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11254", "",	"+", "!СКК",СКК(Счет38_5), Счет38_5);
	_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11254", "",	"+", "!СКК",СКК(Счет38_6), Счет38_6);
	
	УстановитьЗначениеПоказателя("П11253", П11253);		
	УстановитьЗначениеПоказателя("П11254", П11254);
	
	// строка 170 Дебиторская задолженность по расчетам с бюджетом 
	С1703 = "Показник ""Дебіторська заборгованість за розрахунками з бюджетом"", графа ""На початок звітного періоду""";
	С1704 = "Показник ""Дебіторська заборгованість за розрахунками з бюджетом"", графа ""На кінець звітного періоду""";
	П11353 = 0; П11354 = 0; 
	мСчета = ПланыСчетов.Хозрасчетный.Выбрать(Счет64_1);
	Пока мСчета.Следующий() Цикл
		// Счета исключения
		Если (мСчета.Ссылка = Счет64_15) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет64_15)) Тогда
			Продолжить;
		КонецЕсли;
		П11353_ = СНД(мСчета.Ссылка);
		П11353  = П11353 + П11353_;
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11353", С1703,"+", "!СНД",П11353_,мСчета.Ссылка,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета );
		П11354_ = СКД(мСчета.Ссылка);
		П11354  = П11354 + П11354_;
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11354", С1704,"+", "!СКД",П11354_,мСчета.Ссылка);
		С1703 = "";
		С1704 = "";
	КонецЦикла;
	
	ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет64_15);
	Если НЕ ВыборкаПоСчету = Неопределено Тогда
		П11353_ = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
		П11353  = П11353 + П11353_;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11353", "","+","!СНДРС",П11353_, Счет64_15,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		П11354_ = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;
		П11354  = П11354 + П11354_;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11354", "","+","!СКДРС",П11354_, Счет64_15);
	КонецЕсли;	
	
	П11353_ = 0;
	П11354_ = 0;
	ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет64_2);
	
	Если НЕ ВыборкаПоСчету = Неопределено Тогда
		П11353_ = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
		П11353  = П11353 + П11353_;
	  	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11353", "Сальдо на начало периода по дебету счета 64.2, развернутое по субконто ""Налоги""",	"+","!СНДРС",П11353_, Счет64_2,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		П11354_ = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;
		П11354  = П11354 + П11354_;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11354", "Сальдо на конец периода по дебету счета 64.2, развернутое по субконто ""Налоги""",	"+","!СКДРС" ,П11354_, Счет64_2);
	КонецЕсли;	
	
	П11353_ = 0;
	П11354_ = 0;
	ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет65_1);
	
	Если НЕ ВыборкаПоСчету = Неопределено Тогда
		П11353_ = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
		П11353  = П11353 + П11353_;
	  	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11353", "",	"+","!СНДРС",П11353_, Счет65_1,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		П11354_ = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;
		П11354  = П11354 + П11354_;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11354", "",	"+","!СКДРС" ,П11354_, Счет65_1);
	КонецЕсли;	
	
	П11353_ = 0;
	П11354_ = 0;
	ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет65_2);
	
	Если НЕ ВыборкаПоСчету = Неопределено Тогда
		П11353_ = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
		П11353  = П11353 + П11353_;
	  	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11353", "",	"+","!СНДРС",П11353_, Счет65_2,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		П11354_ = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;
		П11354  = П11354 + П11354_;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11354", "",	"+","!СКДРС" ,П11354_, Счет65_2);
	КонецЕсли;	
	
	ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет37_8);
	Если НЕ ВыборкаПоСчету = Неопределено Тогда
		П11353_ = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
		П11353  = П11353 + П11353_;
	  	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11353", "",	"+","!СНДРС",П11353_, Счет37_8,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		П11354_ = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;
		П11354  = П11354 + П11354_;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11354", "",	"+","!СКДРС" ,П11354_, Счет37_8);
	КонецЕсли;	
	
	П11353_382  = СНК(Счет38_2);
	П11353 = П11353 - П11353_382; 
		  
	Попытка	  
	  УстановитьЗначениеПоказателя("П11353", П11353);
	  _ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11353", "",	"-", "!СНК",П11353_382, Счет38_2,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Исключение
	КонецПопытки;

	П11354_382  = СКК(Счет38_2);
	П11354 = П11354 - П11354_382; 

	Попытка
		  УстановитьЗначениеПоказателя("П11354", П11354);
		  _ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11354", "",	"-", "!СКК",П11354_382, Счет38_2);
	Исключение
	КонецПопытки;

	// в т. ч. по налогу на прибыль (деб. задолженность)
	П11363 = СНД(Счет64_13);
	_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11363", "Рядок 1136, графа ""На початок звітного періоду""","+", "!СНД",СНД(Счет64_13),Счет64_13,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета );
	УстановитьЗначениеПоказателя("П11363", П11363);
	
	П11364 = СКД(Счет64_13);
	_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11364", "Рядок 1136, графа ""На кінець звітного періоду""","+", "!СКД",СКД(Счет64_13),Счет64_13);
	УстановитьЗначениеПоказателя("П11364", П11364);
	
	// строка 1155: другая текущая дебиторская задолженность
	мСчетаЗадолженность = Новый Массив;
    мСчетаЗадолженность.Добавить(Счет37); 
    мСчетаЗадолженность.Добавить(Счет68); 
	С2103 = "Показник ""Інша поточна дебіторська заборгованість"", графа ""На початок звітного періоду""";
	С2104 = "Показник ""Інша поточна дебіторська заборгованість"", графа ""На кінець звітного періоду""";
	П11553 = 0; П11554 = 0; П11553_ = 0; П11554_ = 0;
	Для каждого Счет Из мСчетаЗадолженность Цикл
		мСчета = ПланыСчетов.Хозрасчетный.Выбрать(Счет);
		Пока мСчета.Следующий() Цикл
			// Счета исключения
			Если (мСчета.Ссылка = Счет37_8) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет37_8)) Тогда
				Продолжить;
			КонецЕсли;	
			Если мСчета.Вид = ВидСчета.АктивноПассивный Тогда
				ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", мСчета.Ссылка);
				Если НЕ ВыборкаПоСчету = Неопределено Тогда
					П11553_ = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
					П11553  = П11553 + П11553_;
					_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11553", С2103,"+","!СНДРС",П11553_, мСчета.Ссылка,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
					П11554_ = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;
					П11554  = П11554 + П11554_;
					_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11554", С2104,"+","!СКДРС",П11554_, мСчета.Ссылка);
				КонецЕсли;	
			Иначе 
				// учтем такую ситуацию: на чисто активном (чисто пассивном) счете может быть отрицательные сальдо
				// пример: на счете 6431 (если "первое событие" - по оплате) сальдо после отгрузки - отрицательное
				// не будем учитывать такие ситуации развернуто по субконто. Только итоговое сальдо по счету
				П11553_ = СНД(мСчета.Ссылка);
				Если П11553_ = 0 И СНК(мСчета.Ссылка) < 0 Тогда
					П11553_ = - СНК(мСчета.Ссылка);
					_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11553", С2103,"-", "!СНК",-П11553_,мСчета.Ссылка,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета );	
				ИначеЕсли П11553_ < 0 Тогда
					П11553_ = 0;	
				Иначе
					_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11553", С2103,"+", "!СНД",П11553_,мСчета.Ссылка,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
				КонецЕсли;
				П11553  = П11553 + П11553_;
				
				П11554_ = СКД(мСчета.Ссылка);
				Если П11554_ = 0 И СКК(мСчета.Ссылка) < 0 Тогда
					П11554_ = - СКК(мСчета.Ссылка);
					_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11554", С2104,"-", "!СКК",-П11554_,мСчета.Ссылка);	
				ИначеЕсли П11554_ < 0 Тогда
					П11554_ = 0;	
				Иначе				
					_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11554", С2104,"+", "!СКД",П11554_,мСчета.Ссылка);
				КонецЕсли;
				П11554  = П11554 + П11554_;
			КонецЕсли;
			С2103 = ""; С2104 = "";
			П11553_ = 0; П11554_ = 0;
		КонецЦикла;
	КонецЦикла;
	мСчетаЗадолженность = Новый Массив;
	мСчетаЗадолженность.Добавить(Счет63); 
	//мСчетаЗадолженность.Добавить(Счет65); 
	Субсчета65 = ПланыСчетов.Хозрасчетный.Выбрать(Счет65);
	Пока Субсчета65.Следующий() Цикл
		Если (Субсчета65.Ссылка = Счет65_1) или (Субсчета65.Ссылка = Счет65_2) Тогда
			Продолжить;
		КонецЕсли;
		мСчетаЗадолженность.Добавить(Субсчета65.Ссылка); 
	КонецЦикла;
	Для каждого Счет Из мСчетаЗадолженность Цикл
		Если Счет.Вид = ВидСчета.АктивноПассивный Тогда
			ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет.Ссылка);
			Если НЕ ВыборкаПоСчету = Неопределено Тогда
				П11553_ = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
				П11553  = П11553 + П11553_;
				_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11553", "","+","!СНДРС",П11553_, Счет.Ссылка,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
				П11554_ = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;
				П11554  = П11554 + П11554_;
				_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11554", "","+","!СКДРС",П11554_, Счет.Ссылка);
			КонецЕсли;	
		Иначе
				П11553_ = СНД(Счет.Ссылка);
				П11553  = П11553 + П11553_;
				_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11553", ,"+", "!СНД",П11553_,Счет.Ссылка ,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
				П11554_ = СКД(Счет.Ссылка);
				П11554  = П11554 + П11554_;
				_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11554", ,"+", "!СКД",П11554_,Счет.Ссылка);
		КонецЕсли;	
		П11553_ = 0; П11554_ = 0;
	КонецЦикла;
	П11553_386 = СНК(Счет38_6);
	П11554_386 = СКК(Счет38_6);
	П11553_385 = СНК(Счет38_5);
	П11554_385 = СКК(Счет38_5);
	П11553 = П11553 - П11553_385 - П11553_386;
	П11554 = П11554 - П11554_385 - П11554_386;
		
	УстановитьЗначениеПоказателя("П11553", П11553);
	
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11553", "",	"-", "!СНК",П11553_385, Счет38_5,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11553", "",  "-", "!СНК",П11553_386, Счет38_6,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	УстановитьЗначениеПоказателя("П11554", П11554);
		
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11554", "",   "-", "!СКК",П11554_385, Счет38_5);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11554", "",   "-", "!СКК",П11554_386, Счет38_6);
	
	
	
	// строка 220 Текущие финансовые инвестиции
	П11603 = СНД(Счет35_2);
	УстановитьЗначениеПоказателя("П11603", П11603);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11603", "Показник ""Поточні фінансові інвестиції"", графа ""На початок звітного періоду""",	"+", "!СНД",П11603, Счет35_2,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	П11604 = СКД(Счет35_2);
	УстановитьЗначениеПоказателя("П11604", П11604);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11604", "Показник ""Поточні фінансові інвестиції"", графа ""На кінець звітного періоду""",	"+", "!СКД",П11604, Счет35_2);
	
	
	// строка 230: денежные средства 
	С2303 = "Показник ""Гроші та їх еквіваленти"", графа ""На початок звітного періоду""";
	С2304 = "Показник ""Гроші та їх еквіваленти"", графа ""На кінець звітного періоду""";
	СчетаДенежные = Новый Массив;
   	СчетаДенежные.Добавить(Счет30);       
   	СчетаДенежные.Добавить(Счет31);         
   	СчетаДенежные.Добавить(Счет33);     
   	СчетаДенежные.Добавить(Счет35_1);      
	П11653 = 0; П11654 = 0;
	Для каждого Счет Из СчетаДенежные Цикл
		мСчета = ПланыСчетов.Хозрасчетный.ВыбратьИерархически(Счет);
		Пока мСчета.Следующий() Цикл
			// Если счет является родителем, мы его не берем
			мСчетаПоИерархии = ПланыСчетов.Хозрасчетный.ВыбратьИерархически(мСчета.Ссылка);
			Если мСчетаПОИерархии.Следующий() Тогда
				Продолжить;
			КонецЕсли;	
			// Счета исключения
			Если (мСчета.Ссылка = Счет33_1) ИЛИ  (мСчета.Ссылка = Счет33_2) ИЛИ 
				 (мСчета.Ссылка.ПринадлежитЭлементу(Счет33_1)) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет33_2)) ИЛИ 
				 (мСчета.Вид = ВидСчета.Пассивный) Тогда
				Продолжить;
			КонецЕсли;	
			
			П11653_ = СНД(мСчета.Ссылка);
			П11653  = П11653 + П11653_;
			_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11653", С2303,"+", "!СНД",П11653_,мСчета.Ссылка,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
			П11654_ = СКД(мСчета.Ссылка);
			П11654  = П11654 + П11654_;
			_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11654", С2304,"+", "!СКД",П11654_,мСчета.Ссылка);
			С2303 = "";
			С2304 = "";
			
		КонецЦикла;	
	КонецЦикла;

	УстановитьЗначениеПоказателя("П11653", П11653);
	УстановитьЗначениеПоказателя("П11654", П11654);
				
	// строка 250: другие оборотные активы
	П11903 = СНД(Счет33_1) + СНД(Счет33_2);
	П11904 = СКД(Счет33_1) + СКД(Счет33_2);
	//_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11903", "Показник ""Інші оборотні активи"", графа ""На початок звітного періоду""",	"+", "!СНД",СНД(Счет24),Счет24);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11903", "Показник ""Інші оборотні активи"", графа ""На початок звітного періоду""",	"+", "!СНД", СНД(Счет33_1), Счет33_1);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11903", "",	"+", "!СНД", СНД(Счет33_2), Счет33_2);
	
	//_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11904", "Показник ""Інші оборотні активи"", графа ""На кінець звітного періоду""",	"+", "!СКД",СКД(Счет24),Счет24);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11904", "Показник ""Інші оборотні активи"", графа ""На кінець звітного періоду""",	"+", "!СКД", СКД(Счет33_1), Счет33_1);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11904", "",	"+", "!СКД", СКД(Счет33_2), Счет33_2);
	
	мСчетаЗадолженность = Новый Массив;
    мСчетаЗадолженность.Добавить(Счет64_3);
    мСчетаЗадолженность.Добавить(Счет64_4);
	Если НЕ Счет64_5 = Неопределено Тогда
		мСчетаЗадолженность.Добавить(Счет64_5);
	КонецЕсли;
	Для каждого Счет Из мСчетаЗадолженность Цикл
		мСчета = ПланыСчетов.Хозрасчетный.Выбрать(Счет);
		Пока мСчета.Следующий() Цикл
			Если мСчета.Вид = ВидСчета.АктивноПассивный Тогда
				ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", мСчета.Ссылка);
				Если НЕ ВыборкаПоСчету = Неопределено Тогда
					П11903_ = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокДт;
					П11903  = П11903 + П11903_;
					_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11903", "","+","!СНДРС",П11903_, мСчета.Ссылка,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
					П11904_ = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокДт;
					П11904  = П11904 + П11904_;
					_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П11904", "","+","!СКДРС",П11904_, мСчета.Ссылка);
				КонецЕсли;	
			Иначе 
				// учтем такую ситуацию: на чисто активном (чисто пассивном) счете может быть отрицательные сальдо
				// пример: на счете 6431 (если "первое событие" - по оплате) сальдо после отгрузки - отрицательное
				// не будем учитывать такие ситуации развернуто по субконто. Только итоговое сальдо по счету
				П11903_ = СНД(мСчета.Ссылка);
				Если П11903_ = 0 И СНК(мСчета.Ссылка) < 0 Тогда
					П11903_ = - СНК(мСчета.Ссылка);
					_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11903", "","-", "!СНК",-П11903_,мСчета.Ссылка,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);	
				ИначеЕсли П11903_ < 0 Тогда
					П11903_ = 0;	
				Иначе	
					_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11903", "","+", "!СНД",П11903_,мСчета.Ссылка,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
				КонецЕсли;
				П11903  = П11903 + П11903_;
				
				
				П11904_ = СКД(мСчета.Ссылка);
				Если П11904_ = 0 И СКК(мСчета.Ссылка) < 0 Тогда
					П11904_ = - СКК(мСчета.Ссылка);
					_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11904", "","-", "!СКК",-П11904_,мСчета.Ссылка);	
				ИначеЕсли П11904_ < 0 Тогда
					П11904_ = 0;	
				Иначе	
					_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П11904", "","+", "!СКД",П11904_,мСчета.Ссылка);
				КонецЕсли;
				П11904  = П11904 + П11904_;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	УстановитьЗначениеПоказателя("П11903", П11903);
	УстановитьЗначениеПоказателя("П11904", П11904);   
		
	// строка 270 Затраты будущих периодов
	П11703 = СНД(Счет39);
	УстановитьЗначениеПоказателя("П11703", П11703);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11703", "Показник ""Витрати майбутніх періодів"", графа ""На початок звітного періоду""",	"+", "!СНД",П11703, Счет39,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	П11704 = СКД(Счет39);
	УстановитьЗначениеПоказателя("П11704", П11704);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П11704", "Показник ""Витрати майбутніх періодів"", графа ""На кінець звітного періоду""",	"+", "!СКД",П11704, Счет39);
	
	// строка 275 Необоротные активы предназначенные для продажи
	Попытка
		П12003 = СНД(Счет28_6);
	Исключение
	КонецПопытки;
	
	Попытка
		УстановитьЗначениеПоказателя("П12003", П12003);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П12003", "Показник ""Необоротні активи та групи вибуття"", графа ""На початок звітного періоду""",	"+", "!СНД",П12003, Счет28_6);
	Исключение
		
	КонецПопытки;
	
	Попытка
		П12004 = СКД(Счет28_6);
	Исключение
	КонецПопытки;
	
	Попытка
		УстановитьЗначениеПоказателя("П12004", П12004);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П12004", "Показник ""Необоротні активи та групи вибуття"", графа ""На кінець звітного періоду""",	"+", "!СКД",П12004, Счет28_6);
	Исключение
		
	КонецПопытки;
	
	// ПАССИВ
	// строка 300 Уставной капитал
	//П14003 = СНК(Счет40);
	П14003 = СНК(Счет40) - СНК(Счет40_4);
	УстановитьЗначениеПоказателя("П14003", П14003);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14003", "Показник ""Уставний капітал"", графа ""На початок звітного періоду""",	"+", "!СНК",СНК(Счет40), Счет40,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14003", "",	"-", "!СНК",СНК(Счет40_4), Счет40_4,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	//П14004 = СКК(Счет40);
	П14004 = СКК(Счет40) - СКК(Счет40_4);
	УстановитьЗначениеПоказателя("П14004", П14004);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14004", "Показник ""Уставний капітал"", графа ""На кінець звітного періоду""",	"+", "!СКК",СКК(Счет40), Счет40);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14004", "",	"-", "!СКК",СКК(Счет40_4), Счет40_4);
	
	// строка 320 Дополнительный вложенный капитал
	//П14103 = СНК(Счет42) +  СНК(Счет41);
	П14103 = СНК(Счет42) + СНК(Счет41) + СНК(Счет40_4);
	УстановитьЗначениеПоказателя("П14103", П14103);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14103", "Показник ""Додатковий вкладений капітал"", графа ""На початок звітного періоду""",	"+", "!СНК",СНК(Счет42), Счет42,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14103", "",	"+", "!СНК",СНК(Счет41), Счет41,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14103", "",	"+", "!СНК",СНК(Счет40_4), Счет40_4,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	//П14104 = СКК(Счет42) + СКК(Счет41);
	П14104 = СКК(Счет42) + СКК(Счет41) + СКК(Счет40_4);
	УстановитьЗначениеПоказателя("П14104", П14104);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14104", "Показник ""Додатковий вкладений капітал"", графа ""На кінець звітного періоду""",	"+", "!СКК",СКК(Счет42), Счет42);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14104", "",	"+", "!СКК",СКК(Счет41), Счет41);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14104", "",	"+", "!СКК",СКК(Счет40_4), Счет40_4);
	
	//строка 340 Резервный капитал
	П14153 = СНК(Счет43);
	УстановитьЗначениеПоказателя("П14153", П14153);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14153", "Показник ""Резервний капітал"", графа ""На початок звітного періоду""",	"+", "!СНК",П14153, Счет43,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	П14154 = СКК(Счет43);
	УстановитьЗначениеПоказателя("П14154", П14154);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14154", "Показник ""Резервний капітал"", графа ""На кінець звітного періоду""",	"+", "!СКК",П14154, Счет43);
	
	//строка 350 Нераспределенная прибыль
	П14203 = (СНКР(Счет79) - СНДР(Счет79)) + (СНКР(Счет44) - СНДР(Счет44));
	УстановитьЗначениеПоказателя("П14203", П14203);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14203", "Показник ""Нерозподілений прибуток"", графа ""На початок звітного періоду""",	"+", "!СНКР",СНКР(Счет79), Счет79,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14203", "",	"-", "!СНДР",СНДР(Счет79),Счет79,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14203", "",	"+", "!СНКР",СНКР(Счет44),Счет44,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14203", "",	"-", "!СНДР",СНДР(Счет44),Счет44,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	П14204 = (СККР(Счет79) - СКДР(Счет79)) + (СККР(Счет44) - СКДР(Счет44));
	УстановитьЗначениеПоказателя("П14204", П14204);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14204", "Показник ""Нерозподілений прибуток"", графа ""На кінець звітного періоду""",	"+", "!СККР",СККР(Счет79), Счет79);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14204", "",	"-", "!СКДР",СКДР(Счет79),Счет79);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14204", "",	"+", "!СККР",СККР(Счет44),Счет44);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П14204", "",	"-", "!СКДР",СКДР(Счет44),Счет44);
	
	//строка 360 Неоплаченный капитал 
	П14253 = СНД(Счет46) + СНД(Счет45); 
	УстановитьЗначениеПоказателя("П14253", П14253);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_П14253", "Показник ""Неоплачений капітал"", графа ""На початок звітного періоду""",	"+", "!СНД",СНД(Счет46), Счет46,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_П14253", "",	"+", "!СНД",СНД(Счет45),Счет45,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	П14254 = СКД(Счет46) + СКД(Счет45); 
	УстановитьЗначениеПоказателя("П14254", П14254);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_П14254", "Показник ""Неоплачений капітал"", графа ""На кінець звітного періоду""",	"+", "!СКД",СКД(Счет46), Счет46);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_П14254", "",	"+", "!СКД",СКД(Счет45),Счет45);
	
	
	//строка 430 Довгострокові зобов'язання, цільове фінансування та забезпечення
	П15953 = СНК(Счет47) + СНК(Счет48) + СНК(Счет49) + СНК(Счет50) + СНК(Счет51) + СНК(Счет52) + СНК(Счет53) + СНК(Счет54) + СНК(Счет55);
	УстановитьЗначениеПоказателя("П15953", П15953);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П15953", "Показник ""Цільове фінансування та забезпечення майбутніх витрат"", графа ""На початок звітного періоду""",	"+", "!СНК",СНК(Счет47), Счет47,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П15953", "",	"+", "!СНК",СНК(Счет48),Счет48,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П15953", "",	"+", "!СНК",СНК(Счет49),Счет49,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П15953", "",	"+", "!СНК",СНК(Счет50),Счет50,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П15953", "",	"+", "!СНК",СНК(Счет51),Счет51,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П15953", "",	"+", "!СНК",СНК(Счет52),Счет52,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П15953", "",	"+", "!СНК",СНК(Счет53),Счет53,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П15953", "",	"+", "!СНК",СНК(Счет54),Счет54,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П15953", "",	"+", "!СНК",СНК(Счет55),Счет55,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	
	П15954 = СКК(Счет47) + СКК(Счет48) + СКК(Счет49) + СКК(Счет50) + СКК(Счет51) + СКК(Счет52) + СКК(Счет53) + СКК(Счет54) + СКК(Счет55);
	УстановитьЗначениеПоказателя("П15954", П15954);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П15954", "Показник ""Цільове фінансування та забезпечення майбутніх витрат"", графа ""На кінець звітного періоду""",	"+", "!СКК",СКК(Счет47), Счет47);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П15954", "",	"+", "!СКК",СКК(Счет48),Счет48);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П15954", "",	"+", "!СКК",СКК(Счет49),Счет49);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П15954", "",	"+", "!СКК",СКК(Счет50),Счет50);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П15954", "",	"+", "!СКК",СКК(Счет51),Счет51);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П15954", "",	"+", "!СКК",СКК(Счет52),Счет52);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П15954", "",	"+", "!СКК",СКК(Счет53),Счет53);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П15954", "",	"+", "!СКК",СКК(Счет54),Счет54);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П15954", "",	"+", "!СКК",СКК(Счет55),Счет55);
	
	//строка 500 Краткосрочные кредиты банков
	П16003 = СНК(Счет60) - СНК(Счет60_5) - СНК(Счет60_6);
	УстановитьЗначениеПоказателя("П16003", П16003);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16003", "Показник ""Короткострокові кредити банкiв"", графа ""На початок року""",	"+", "!СНК",СНК(Счет60), Счет60,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16003", "",	"-", "!СНК",СНК(Счет60_5), Счет60_5,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16003", "",	"-", "!СНК",СНК(Счет60_6), Счет60_6,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	П16004 = СКК(Счет60) - СКК(Счет60_5) - СКК(Счет60_6);
	
	УстановитьЗначениеПоказателя("П16004", П16004);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16004", "Показник ""Короткострокові кредити банкiв"", графа ""На кінець звітного періоду""",	"+", "!СКК",СКК(Счет60), Счет60);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16004", "",	"-", "!СКК",СКК(Счет60_5), Счет60_5);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16004", "",	"-", "!СКК",СКК(Счет60_6), Счет60_6);
	
	//строка 510 Текущая задолженность по долгосрочным обязателтствам 
	П16103 = СНК(Счет61);
	УстановитьЗначениеПоказателя("П16103", П16103);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П16103", "Показник ""Поточна заборгованість за довгостроковими зобов'язаннями"", графа ""На початок звітного періоду""",	"+", "!СНК",П16103, Счет61,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	П16104 = СКК(Счет61);
	УстановитьЗначениеПоказателя("П16104", П16104);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П16104", "Показник ""Поточна заборгованість за довгостроковими зобов'язаннями"", графа ""На початок звітного періоду""",	"+", "!СКК",П16104, Счет61);
	
	//строка 530 Кредиторская задолженность за товары, работы 
	П16153 = СНК(Счет62);
	П16154 = СКК(Счет62);
	
	ВыборкаНачСчет63 = 0;
	ВыборкаКонСчет63 = 0;
	
	ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет63);
	Если НЕ ВыборкаПоСчету = Неопределено Тогда
		П16153 = П16153 + ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
		ВыборкаНачСчет63 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
		
		П16154 = П16154 + ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;
		ВыборкаКонСчет63 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;
	КонецЕсли;
	
	УстановитьЗначениеПоказателя("П16153", П16153);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П16153", "Показник ""Кредиторська заборгованість за товари, роботи, послуги"", графа ""На початок звітного періоду""",	"+", "!СНК",СНК(Счет62), Счет62,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П16153", "","+","!СНКРС" , ВыборкаНачСчет63,Счет63,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	
	УстановитьЗначениеПоказателя("П16154", П16154);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П16154", "Показник ""Кредиторська заборгованість за товари, роботи, послуги"", графа ""На початок звітного періоду""",	"+", "!СКК",СКК(Счет62), Счет62);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П16154", "","+" ,"!СККРС" , ВыборкаКонСчет63,Счет63);
	
	
	// строка 550 текущие обязательства по расчетам с бюджетом
	С5503 = "Показник ""Поточні зобов'язання  за розрахунками: з бюджетом"", графа ""На початок звітного періоду""";
	С5504 = "Показник ""Поточні зобов'язання  за розрахунками: з бюджетом"", графа ""На кінець звітного періоду""";
	П16203 = 0; П16204 = 0; 
	мСчета = ПланыСчетов.Хозрасчетный.Выбрать(Счет64_1);
	Пока мСчета.Следующий() Цикл
		// Счета исключения
		Если (мСчета.Ссылка = Счет64_15) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет64_15)) Тогда
			Продолжить;
		КонецЕсли;
		П16203_ = СНК(мСчета.Ссылка);
		П16203  = П16203 + П16203_;
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П16203", С5503,"+", "!СНК",П16203_,мСчета.Ссылка ,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		П16204_ = СКК(мСчета.Ссылка);
		П16204  = П16204 + П16204_;
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П16204", С5504,"+", "!СКК",П16204_,мСчета.Ссылка);
		С5503 = "";
		С5504 = "";
	КонецЦикла;
	П16203_ = 0;
	П16204_ = 0;
	
	ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет64_15);
	
	Если НЕ ВыборкаПоСчету = Неопределено Тогда
		П16203_ = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
		П16203  = П16203 + П16203_;
	    _ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16203", "Сальдо на начало периода по кредиту счета 64.15, развернутое по субконто ""Налоги""",	"+","!СНКРС" ,П16203_, Счет64_15,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		П16204_ = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;
		П16204  = П16204 + П16204_;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16204", "Сальдо на конец периода по кредиту счета 64.15, развернутое по субконто ""Налоги""",	"+","!СККРС",П16204_, Счет64_15);
	КонецЕсли;	
	П16203_ = 0;
	П16204_ = 0;
	
	ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет64_2);
	Если НЕ ВыборкаПоСчету = Неопределено Тогда
		П16203_ = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
		П16203  = П16203 + П16203_;
	    _ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16203", "Сальдо на начало периода по кредиту счета 64.15, развернутое по субконто ""Налоги""",	"+","!СНКРС" ,П16203_, Счет64_2,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		П16204_ = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;
		П16204  = П16204 + П16204_;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16204", "Сальдо на конец периода по кредиту счета 64.15, развернутое по субконто ""Налоги""",	"+","!СККРС",П16204_, Счет64_2);
	КонецЕсли;
	
    УстановитьЗначениеПоказателя("П16203", П16203);
    УстановитьЗначениеПоказателя("П16204", П16204);
	
	// 1621 - в т.ч. по налогу на прибыль
	П16213  = СНК(Счет64_13);
	_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П16213", "Рядок 1621, графа ""На початок звітного періоду""","+", "!СНК",СНК(Счет64_13),Счет64_13,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	УстановитьЗначениеПоказателя("П16213", П16213);
	
	П16214 =  СКК(Счет64_13);
	_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П16214", "Рядок 1621, графа ""На кінец звітного періоду""","+", "!СКК",СКК(Счет64_13),Счет64_13);
    УстановитьЗначениеПоказателя("П16214", П16214);
	
	// строка 570 Текущие об-ва по страхованию
	П16253 = 0;
	П16254 = 0;
	
	//развернутое сальдо по счету 65
	Субсчета65 = ПланыСчетов.Хозрасчетный.ВыбратьИерархически(Счет65);
	Пока Субсчета65.Следующий() Цикл
	    ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Субсчета65.Ссылка);
		Если НЕ ВыборкаПоСчету = Неопределено Тогда
	    	П16253 = П16253 + ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
	    	П16254 = П16254 + ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;
			
			_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16253", "Показник ""Поточна кредиторська заборгованість за розрахунками зі страхування"", графа ""На початок року""",	"+", "!СНКРС",ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт, Субсчета65.Ссылка);
	    	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16254", "Показник ""Поточна кредиторська заборгованість за розрахунками зі страхування"", графа ""На кінець звітного періоду""", "+", "!СККРС",ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт, Субсчета65.Ссылка);
	    КонецЕсли;		
	КонецЦикла;
	УстановитьЗначениеПоказателя("П16253", П16253);
   	УстановитьЗначениеПоказателя("П16254", П16254);
	
	
	// строка 580 Текущие об-ва по оплате труда
	П16303 = СНК(Счет66);
	УстановитьЗначениеПоказателя("П16303", П16303);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П16303", "Показник ""Поточні зобов'язання за розрахунками: з оплати праці"", графа ""На початок звітного періоду""",	"+", "!СНК",П16303, Счет66,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	П16304 = СКК(Счет66);
	УстановитьЗначениеПоказателя("П16304", П16304);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П16304", "Показник ""Поточні зобов'язання за розрахунками: з оплати праці"", графа ""На кінець звітного періоду""",	"+", "!СКК",П16304, Счет66);
	
	// строка 605 Необоротные активы предназначенные для продажи    
	Попытка
	    ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет68_0);
		П17003 = 0;
		Если НЕ ВыборкаПоСчету = Неопределено Тогда
	    	П17003 = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
		КонецЕсли;
		УстановитьЗначениеПоказателя("П17003", П17003);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П17003", "Показник ""Необоротні активи та групи вибуття"", графа ""На початок року""",	"+", "!СНКРС",П17003, Счет68_0,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Исключение
	КонецПопытки;
	
	Попытка
	    ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет68_0);
		П17004 = 0;
		Если НЕ ВыборкаПоСчету = Неопределено Тогда
	    	П17004 = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;
		КонецЕсли;
		УстановитьЗначениеПоказателя("П17004", П17004);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П17004", "Показник ""Необоротні активи та групи вибуття"", графа ""На кінець звітного періоду""",	"+", "!СККРС",П17004, Счет68_0);
	Исключение
		
	КонецПопытки;
	// Строка 610 Другие об-ва
	П16903 = СНК(Счет60_5) + СНК(Счет60_6) + СНК(Счет67);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16903", "Показник ""Інші поточні зобов'язання"", графа ""На початок року""",	"+", "!СНК",СНК(Счет60_5), Счет60_5,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16903", "",	"+", "!СНК",СНК(Счет60_6), Счет60_6,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16903", "",	"+", "!СНК",СНК(Счет67), Счет67,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	П16904 = СКК(Счет60_5) + СКК(Счет60_6)  + СКК(Счет67);
    _ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16904", "Показник ""Інші поточні зобов'язання"", графа ""На кінець звітного періоду""",	"+", "!СКК",СКК(Счет60_5), Счет60_5);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16904", "",	"+", "!СКК",СКК(Счет60_6), Счет60_6);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16904", "",	"+", "!СКК",СКК(Счет67), Счет67);
	
	ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", Счет36);
	П16903_ = 0;
    П16904_ = 0;
	
	Если НЕ ВыборкаПоСчету = Неопределено Тогда
		П16903_ = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
		П16903 = П16903 + П16903_;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16903", "",	"+", "!СНКРС",П16903_, Счет36,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
        П16904_ = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;
		П16904 = П16904 + П16904_;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма,  "П16904", "",	"+", "!СККРС",П16904_, Счет36);
	КонецЕсли;
	
    мСчетаЗадолженность = Новый Массив;
    мСчетаЗадолженность.Добавить(Счет37);
    мСчетаЗадолженность.Добавить(Счет64_3);
    мСчетаЗадолженность.Добавить(Счет64_4);
	Если НЕ Счет64_5 = Неопределено Тогда
		мСчетаЗадолженность.Добавить(Счет64_5);
	КонецЕсли;
    мСчетаЗадолженность.Добавить(Счет68); 
	Для каждого Счет Из мСчетаЗадолженность Цикл
		мСчета = ПланыСчетов.Хозрасчетный.Выбрать(Счет);
		Пока мСчета.Следующий() Цикл
			// Счета исключения
			Если (мСчета.Ссылка = Счет68_0) ИЛИ (мСчета.Ссылка.ПринадлежитЭлементу(Счет68_0)) Тогда
				Продолжить;
			КонецЕсли;
			Если мСчета.Вид = ВидСчета.АктивноПассивный Тогда
				ВыборкаПоСчету = мБухИтогиРС.ПолучитьОстаткиИОбороты("Счет", мСчета.Ссылка);
				Если НЕ ВыборкаПоСчету = Неопределено Тогда
					П16903_ = ВыборкаПоСчету.СуммаНачальныйРазвернутыйОстатокКт;
					П16903  = П16903 + П16903_;
					_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П16903", "","+","!СНКРС",П16903_, мСчета.Ссылка,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
					П16904_ = ВыборкаПоСчету.СуммаКонечныйРазвернутыйОстатокКт;
					П16904  = П16904 + П16904_;
					_ДобавитьСтрокуРасшифровки( ЭтаФорма,"П16904", "","+","!СККРС",П16904_, мСчета.Ссылка);
				КонецЕсли;	
			Иначе 
				
				// учтем такую ситуацию: на чисто активном (чисто пассивном) счете может быть отрицательные сальдо
				// пример: на счете 6431 (если "первое событие" - по оплате) сальдо после отгрузки - отрицательное
				// не будем учитывать такие ситуации развернуто по субконто. Только итоговое сальдо по счету
				П16903_ = СНК(мСчета.Ссылка);
				Если П16903_ = 0 И СНД(мСчета.Ссылка) < 0 Тогда
					П16903_ = - СНД(мСчета.Ссылка);
					_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П16903", "","-", "!СНД",-П16903_,мСчета.Ссылка,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);	
				ИначеЕсли П16903_ < 0 Тогда
					П16903_ = 0;	
				Иначе
					_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П16903", "","+", "!СНК",П16903_,мСчета.Ссылка,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
				КонецЕсли;	
				П16903  = П16903 + П16903_;
	
				П16904_ = СКК(мСчета.Ссылка);
				Если П16904_ = 0 И СКД(мСчета.Ссылка) < 0 Тогда
					П16904_ = - СКД(мСчета.Ссылка);
					_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П16904", "","-", "!СКД",-П16904_,мСчета.Ссылка);	
				ИначеЕсли П16904_ < 0 Тогда
					П16904_ = 0;	
				Иначе
					_ДобавитьСтрокуРасшифровки(ЭтаФорма, "П16904", "","+", "!СКК",П16904_,мСчета.Ссылка);
				КонецЕсли;	
				П16904  = П16904 + П16904_;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	УстановитьЗначениеПоказателя("П16903", П16903);
	УстановитьЗначениеПоказателя("П16904", П16904);
	
	//V. Доходы будущих периодов  строка 630 
	П16653 = СНК(Счет69);
	УстановитьЗначениеПоказателя("П16653", П16653);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П16653", "Показник ""Доходи майбутніх періодів"", графа ""На початок звітного періоду""",	"+", "!СНК",П16653, Счет69,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	П16654 = СКК(Счет69);
	УстановитьЗначениеПоказателя("П16654", П16654);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "П16654", "Показник ""Доходи майбутніх періодів"", графа ""На початок звітного періоду""",	"+", "!СКК",П16654, Счет69);
	
	////////////////////////////////////////////////////////////////////
	//                                                                //
	// Отчет о финансовых результатах                                 //
	// Расчет итогов за аналогичный период прошлого года              //
	//                                                                //
	////////////////////////////////////////////////////////////////////
	
	мБухИтоги22.РассчитатьИтоги("Хозрасчетный", Итоги, "Сумма", "Счет, КорСчет", НачалоГода (ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12), , , , , , "Организация", СтруктураРеквизитовФормы.Организация);
		
	//Доход (выручка) от реализации продукции (работ, услуг)                                                                                             
	ПП20003 = КО(Счет70_1) + КО(Счет70_2) + КО(Счет70_3) + КО(Счет70_9_1) - ОБ(Счет70_9_1,Счет70_1) - ОБ(Счет70_9_1,Счет70_2) - ОБ(Счет70_9_1,Счет70_3) - ОБ(Счет70,Счет70_9_1);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20003", "Показник ""Дохід (виручка) від реалізації продукції (товарів, послуг)"", графа ""За звітний період""",	"+", "!КО",КО(Счет70_1), Счет70_1,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20003", "",	"+", "!КО",КО(Счет70_2),Счет70_2,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20003", "",	"+", "!КО",КО(Счет70_3),Счет70_3,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20003", "",	"+", "!КО",КО(Счет70_9_1),Счет70_9_1,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20003", "",	"-", "!ОБ",ОБ(Счет70_9_1,Счет70_1),Счет70_9_1, Счет70_1,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20003", "",	"-", "!ОБ",ОБ(Счет70_9_1,Счет70_2),Счет70_9_1, Счет70_2,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20003", "",	"-", "!ОБ",ОБ(Счет70_9_1,Счет70_3),Счет70_9_1, Счет70_3,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20003", "",	"-", "!ОБ",ОБ(Счет70,Счет70_9_1),Счет70, Счет70_9_1,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	//Непрямые налоги и другие вычеты из дохода
	ПП20003 = ПП20003 - (	  ОБ(Счет70, Счет64_1) + ОБ(Счет70, Счет64_2) + ОБ(Счет70, Счет64_3) 
	    				+ ОБ(Счет70,Счет36)	+ ОБ(Счет70, Счет30) + ОБ(Счет70, Счет31) 
						+ ОБ(Счет70, Счет68_5) - ОБ(Счет30, Счет70_4) - ОБ(Счет31, Счет70_4) + ОБ(Счет70_4, Счет63)
						- ОБ(Счет64_3, Счет70_4) - ОБ(Счет64_4, Счет70_4));
	Попытка
		ПП20003 = ПП20003 - ОБ(Счет70, Счет64_5);
	Исключение
	КонецПопытки;
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20003", "",	"-", "!ОБ",ОБ(Счет70, Счет64_1), Счет70_1, Счет64_1,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);	
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20003", "",	"-", "!ОБ",ОБ(Счет70, Счет64_2),Счет70, Счет64_2,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20003", "",	"-", "!ОБ",ОБ(Счет70, Счет64_3),Счет70, Счет64_3,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20003", "",	"-", "!ОБ",ОБ(Счет70, Счет36),Счет70, Счет36,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20003", "",	"-", "!ОБ",ОБ(Счет70, Счет30),Счет70, Счет30,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20003", "",	"-", "!ОБ",ОБ(Счет70, Счет31),Счет70, Счет31,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20003", "",	"-", "!ОБ",ОБ(Счет70, Счет68_5),Счет70, Счет68_5,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20003", "",	"+", "!ОБ",ОБ(Счет30, Счет70_4),Счет30, Счет70_4,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20003", "",	"+", "!ОБ",ОБ(Счет31, Счет70_4),Счет31, Счет70_4,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20003", "",	"-", "!ОБ",ОБ(Счет70_4, Счет63),Счет70_4, Счет63,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20003", "",	"+", "!ОБ",ОБ(Счет64_3, Счет70_4),Счет64_3, Счет70_4,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20003", "",	"+", "!ОБ",ОБ(Счет64_4, Счет70_4),Счет64_4, Счет70_4,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Попытка
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20003", "",	"-", "!ОБ",ОБ(Счет70, Счет64_5),Счет70, Счет64_5,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Исключение
	КонецПопытки;
	
	ПП20004 = 0;
	Если флЗаполнятьПрошлыйПериод Тогда	
		ПП20004=КО2(Счет70_1) + КО2(Счет70_2) + КО2(Счет70_3)+ КО2(Счет70_9_1) - ОБ2(Счет70_9_1,Счет70_1) - ОБ2(Счет70_9_1,Счет70_2) - ОБ2(Счет70_9_1,Счет70_3) - ОБ2(Счет70,Счет70_9_1);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20004", "Показник ""Дохід (виручка) від реалізації продукції (товарів, послуг)"", графа ""За аналогічний період попереднього року""",	"+", "!КО",КО2(Счет70_1), Счет70_1,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20004", "",	"+", "!КО",КО2(Счет70_2),Счет70_2,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20004", "",	"+", "!КО",КО2(Счет70_3),Счет70_3,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20004", "",	"+", "!КО",КО2(Счет70_9_1),Счет70_9_1,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20004", "",	"-", "!ОБ",ОБ2(Счет70_9_1,Счет70_1),Счет70_9_1, Счет70_1,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20004", "",	"-", "!ОБ",ОБ2(Счет70_9_1,Счет70_2),Счет70_9_1, Счет70_2,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20004", "",	"-", "!ОБ",ОБ2(Счет70_9_1,Счет70_3),Счет70_9_1, Счет70_3,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20004", "",	"-", "!ОБ",ОБ2(Счет70,Счет70_9_1),Счет70, Счет70_9_1,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		
		ПП20004 = ПП20004 - (   ОБ2(Счет70, Счет64_1) + ОБ2(Счет70, Счет64_2) + ОБ2(Счет70, Счет64_3) + ОБ2(Счет70,Счет36) + ОБ2(Счет70, Счет30) 
							+ ОБ2(Счет70, Счет31)+ ОБ2(Счет70, Счет68_5) - ОБ2(Счет30, Счет70_4) - ОБ2(Счет31, Счет70_4) + ОБ2(Счет70_4, Счет63)
							- ОБ2(Счет64_3, Счет70_4)- ОБ2(Счет64_4, Счет70_4));
		Попытка
			ПП20004 = ПП20004 - ОБ2(Счет70, Счет64_5);
		Исключение
		КонецПопытки;
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20004", "",	"+", "!ОБ",ОБ2(Счет70, Счет64_1), Счет70_1, Счет64_1,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));	
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20004", "",	"-", "!ОБ",ОБ2(Счет70, Счет64_2),Счет70, Счет64_2,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20004", "",	"-", "!ОБ",ОБ2(Счет70, Счет64_3),Счет70, Счет64_3,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20004", "",	"-", "!ОБ",ОБ2(Счет70,Счет36),Счет70, Счет36,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20004", "",	"-", "!ОБ",ОБ2(Счет70, Счет30),Счет70, Счет30,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20004", "",	"-", "!ОБ",ОБ2(Счет70, Счет31),Счет70, Счет31,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20004", "",	"-", "!ОБ",ОБ2(Счет70, Счет68_5),Счет70, Счет68_5,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20004", "",	"+", "!ОБ",ОБ2(Счет30, Счет70_4),Счет30, Счет70_4,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20004", "",	"+", "!ОБ",ОБ2(Счет31, Счет70_4),Счет31, Счет70_4,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20004", "",	"-", "!ОБ",ОБ2(Счет70_4, Счет63),Счет70_4, Счет63,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20004", "",	"+", "!ОБ",ОБ2(Счет64_3, Счет70_4),Счет64_3, Счет70,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20004", "",	"+", "!ОБ",ОБ2(Счет64_4, Счет70_4),Счет64_4, Счет70,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		Попытка
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП20004", "",	"-", "!ОБ",ОБ2(Счет70, Счет64_5),Счет70, Счет64_5,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	УстановитьЗначениеПоказателя("ПП20003", ПП20003);
	УстановитьЗначениеПоказателя("ПП20004", ПП20004);
	
	//Другие операционные доходы
	ПП21203 = КО(Счет71) - ОБ(Счет71,Счет64_1) - ОБ(Счет71,Счет64_3);
	УстановитьЗначениеПоказателя("ПП21203", ПП21203);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП21203", "Показник ""Інші операційні доходи"", графа ""За звітний період""",	"+", "!КО",КО(Счет71), Счет71,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);	
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП21203", "",	"-", "!ОБ",ОБ(Счет71,Счет64_1),Счет71,Счет64_1,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП21203", "",	"-", "!ОБ",ОБ(Счет71,Счет64_3),Счет71,Счет64_3,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	//Другие доходы
	ПП22403 = КО(Счет72) + КО(Счет73) +	КО(Счет74) - ОБ(Счет74,Счет64_1) - ОБ(Счет74,Счет64_3) + КО(Счет75);
	УстановитьЗначениеПоказателя("ПП22403", ПП22403);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП22403", "Показник ""Інші доходи"", графа ""За звітний період""",	"+", "!КО",КО(Счет72), Счет72,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);	
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП22403", "09",	"+", "!КО",КО(Счет73),Счет73,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП22403", "08",	"+", "!КО",КО(Счет74),Счет74,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП22403", "07",	"-", "!ОБ",ОБ(Счет74,Счет64_1),Счет74, Счет64_1,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП22403", "06",	"-", "!ОБ",ОБ(Счет74,Счет64_3),Счет74,Счет64_3,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП22403", "05",	"+", "# оборот по счету 75 актуален в отчетах 2013 года",0);
	_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП22403", "04",	"+", "!КО",КО(Счет75),Счет75,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ПП21204 = 0; ПП22404 = 0; ПП20504 = 0;
	ПП21804 = 0; ПП22704 = 0; ПП23004 = 0;
	Если флЗаполнятьПрошлыйПериод Тогда	
		//Другие операционные доходы
		ПП21204 = КО2(Счет71) - ОБ2(Счет71,Счет64_1) - ОБ2(Счет71,Счет64_3);
		УстановитьЗначениеПоказателя("ПП21204", ПП21204);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП21204", "Показник ""Інші операційні доходи"", графа ""За аналогічний період попереднього року""",	"+", "!КО",КО2(Счет71), Счет71,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));	
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП21204", "",	"-", "!ОБ",ОБ2(Счет71,Счет64_1),Счет71,Счет64_1,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП21204", "",	"-", "!ОБ",ОБ2(Счет71,Счет64_3),Счет71,Счет64_3,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
	
		//Другие доходы
		ПП22404 = КО2(Счет72) + КО2(Счет73) + КО2(Счет74) - ОБ2(Счет74,Счет64_1) - ОБ2(Счет74,Счет64_3) + КО2(Счет75);
		УстановитьЗначениеПоказателя("ПП22404", ПП22404);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП22404", "Показник ""Інші доходи"", графа ""За аналогічний період попереднього року""",	"+", "!КО",КО2(Счет72), Счет72,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));	
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП22404", "09",	"+", "!КО",КО2(Счет73),Счет73,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП22404", "08",	"+", "!КО",КО2(Счет74),Счет74,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП22404", "07",	"-", "!ОБ",ОБ2(Счет74,Счет64_1),Счет74, Счет64_1,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП22404", "06",	"-", "!ОБ",ОБ2(Счет74,Счет64_3),Счет74, Счет64_3,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП22404", "05",	"+", "# оборот по счету 75 актуален в отчетах 2013 и 2014 годов",0);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "ПП22404", "04",	"+", "!КО",КО2(Счет75),Счет75,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
	КонецЕсли;
	
	Если ИспКлассыСчетов = Перечисления.КлассыСчетовРасходов.Класс8 Тогда
		
		ПП20503 = ОБ(Счет79_1,Счет26) + ОБ(Счет79_1,Счет23) + ОБ(Счет84,Счет28) + ОБ(Счет84,Счет25);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП20503", "Показник ""Собівартість реалізованої продукції (товарів, робіт, послуг)"", графа ""За звітний період""",	"+", "!ОБ",ОБ(Счет79_1,Счет26),Счет79_1, Счет26,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП20503", "",	"+", "!ОБ",ОБ(Счет79_1,Счет23),Счет79_1, Счет23,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП20503", "",	"+", "!ОБ",ОБ(Счет84,Счет28),Счет84, Счет28,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП20503", "",	"+", "!ОБ",ОБ(Счет84,Счет25),Счет84, Счет25,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
		Если флЗаполнятьПрошлыйПериод Тогда	
			ПП20504 = ОБ2(Счет79_1,Счет26) + ОБ2(Счет79_1,Счет23) + ОБ2(Счет84,Счет28)+ ОБ2(Счет84,Счет25);
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП20504", "Показник ""Собівартість реалізованої продукції (товарів, робіт, послуг)"", графа ""За аналогічний період попереднього року""",	"+", "!ОБ",ОБ2(Счет79_1,Счет26),Счет79_1, Счет26,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП20504", "",	"+", "!ОБ",ОБ2(Счет79_1,Счет23),Счет79_1, Счет23,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП20504", "",	"+", "!ОБ",ОБ2(Счет84,Счет28),Счет84, Счет28,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП20504", "",	"+", "!ОБ",ОБ2(Счет84,Счет25),Счет84, Счет25,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		КонецЕсли;
		
		// прочие операционные расходы
		ПП21803 =  ДО(Счет80) + ДО(Счет81) + ДО(Счет82) + ДО(Счет83) + ДО(Счет84) 
				- ОБ(Счет84,Счет28) - ОБ(Счет84,Счет25) // товары и полуфабрикаты
				- ОБ(Счет23,Счет80) - ОБ(Счет23,Счет81) - ОБ(Счет23,Счет82) - ОБ(Счет23,Счет83) - ОБ(Счет23,Счет84);//продукция
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21803", "Показник ""Інші витрати"", графа ""За звітний період""",	"+", "!ДО",ДО(Счет80), Счет80,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21803", "",	"+", "!ДО",ДО(Счет81), Счет81,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21803", "",	"+", "!ДО",ДО(Счет82), Счет82,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21803", "",	"+", "!ДО",ДО(Счет83), Счет83,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21803", "",	"+", "!ДО",ДО(Счет84), Счет84,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21803", "",	"-", "!ОБ",ОБ(Счет84,Счет25),Счет84, Счет25,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21803", "",	"-", "!ОБ",ОБ(Счет84,Счет28),Счет84, Счет28,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21803", "",	"-", "!ОБ",ОБ(Счет23,Счет80),Счет23, Счет80,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21803", "",	"-", "!ОБ",ОБ(Счет23,Счет81),Счет23, Счет81,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21803", "",	"-", "!ОБ",ОБ(Счет23,Счет82),Счет23, Счет82,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21803", "",	"-", "!ОБ",ОБ(Счет23,Счет83),Счет23, Счет83,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21803", "",	"-", "!ОБ",ОБ(Счет23,Счет84),Счет23, Счет84,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);

		Если флЗаполнятьПрошлыйПериод Тогда	
			ПП21804 =  ДО2(Счет80) + ДО2(Счет81) + ДО2(Счет82) + ДО2(Счет83) + ДО2(Счет84) 
					- ОБ2(Счет84,Счет28) - ОБ2(Счет84,Счет25) // товары и полуфабрикаты
					- ОБ2(Счет23,Счет80) - ОБ2(Счет23,Счет81) - ОБ2(Счет23,Счет82) - ОБ2(Счет23,Счет83) - ОБ2(Счет23,Счет84);//продукция
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21804", "Показник ""Інші витрати"", графа ""За аналогічний період попереднього року""",	"+", "!ДО",ДО2(Счет80), Счет80,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21804", "",	"+", "!ДО",ДО2(Счет81), Счет81,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21804", "",	"+", "!ДО",ДО2(Счет82), Счет82,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21804", "",	"+", "!ДО",ДО2(Счет83), Счет83,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21804", "",	"+", "!ДО",ДО2(Счет84), Счет84,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21804", "",	"-", "!ОБ",ОБ2(Счет84,Счет25),Счет84, Счет25,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21804", "",	"-", "!ОБ",ОБ2(Счет84,Счет28),Счет84, Счет28,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21804", "",	"-", "!ОБ",ОБ2(Счет23,Счет80),Счет23, Счет80,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21804", "",	"-", "!ОБ",ОБ2(Счет23,Счет81),Счет23, Счет81,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21804", "",	"-", "!ОБ",ОБ2(Счет23,Счет82),Счет23, Счет82,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21804", "",	"-", "!ОБ",ОБ2(Счет23,Счет83),Счет23, Счет83,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21804", "",	"-", "!ОБ",ОБ2(Счет23,Счет84),Счет23, Счет84,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		КонецЕсли;
		
		
		// Інші витрати				
		ПП22703 = ДО(Счет85) - ОБ(Счет85,Счет64_13);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП22703", "Показник ""Надзвичайні витрати"", графа ""За звітний період""",	"+", "!ДО",ДО(Счет85), Счет85,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП22703", "",	"-", "!ОБ",ОБ(Счет85,Счет64_13),Счет85,Счет64_13,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		Если флЗаполнятьПрошлыйПериод Тогда	
			ПП22704 = ДО2(Счет85) - ОБ2(Счет85,Счет64_13);
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП22704", "Показник ""Надзвичайні витрати"", графа ""За аналогічний період попереднього року""",	"+", "!ДО",ДО2(Счет85), Счет85,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП22704", "",	"-", "!ОБ",ОБ2(Счет85,Счет64_13),Счет85,Счет64_13,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		КонецЕсли;
		
		//Податок на прибуток
		ПП23003 = ОБ(Счет85,Счет64_13);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП23003", "Показник ""Податок на прибуток"", графа ""За звітний період""",	"+", "!ОБ",ПП23003,Счет85,Счет64_13,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		Если флЗаполнятьПрошлыйПериод Тогда	
			ПП23004 = ОБ2(Счет85,Счет64_13);
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП23004", "Показник ""Податок на прибуток"", графа ""За аналогічний період попереднього року""",	"+", "!ОБ",ПП23004,Счет85,Счет64_13,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		КонецЕсли;
	Иначе	
		
		// себестоимость реализованной продукции, товаров
		ПП20503 = ДО(Счет90);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП20503", "Показник ""Собівартість реалізованої продукції (товарів, робіт, послуг)"", графа ""За звітний період""",	"+", "!ДО",ДО(Счет90),Счет90, ,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		Если флЗаполнятьПрошлыйПериод Тогда	
			ПП20504 = ДО2(Счет90);
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП20504", "Показник ""Собівартість реалізованої продукції (товарів, робіт, послуг)"", графа ""За звітний період""",	"+", "!ДО",ДО2(Счет90),Счет90, ,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		КонецЕсли;
		
		// прочие операционные расходы
		ПП21803 =  ДО(Счет92) + ДО(Счет93) + ДО(Счет94);
		
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21803", "Показник ""Інші витрати"", графа ""За звітний період""",	"+", "!ДО",ДО(Счет92), Счет92,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21803", "Показник ""Інші витрати"", графа ""За звітний період""",	"+", "!ДО",ДО(Счет93), Счет93,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21803", "Показник ""Інші витрати"", графа ""За звітний період""",	"+", "!ДО",ДО(Счет94), Счет94,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);

		Если флЗаполнятьПрошлыйПериод Тогда	
			ПП21804 =  ДО2(Счет92) + ДО2(Счет93) + ДО2(Счет94);
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21804", "Показник ""Інші витрати"", графа ""За звітний період""",	"+", "!ДО",ДО2(Счет92), Счет92,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21804", "Показник ""Інші витрати"", графа ""За звітний період""",	"+", "!ДО",ДО2(Счет93), Счет93,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП21804", "Показник ""Інші витрати"", графа ""За звітний період""",	"+", "!ДО",ДО2(Счет94), Счет94,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		КонецЕсли;
		
		//Інші витрати
		ПП22703 = ДО(Счет95) + ДО(Счет96) + ДО(Счет97) + ДО(Счет99);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП22703", "Показник ""Інші звичайні витрати"", графа ""За звітний період""",	"+", "!ДО",ДО(Счет95), Счет95,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП22703", "5",	"+", "!ДО",ДО(Счет96),Счет96,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП22703", "4",	"+", "!ДО",ДО(Счет97),Счет97,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП22703", "3",	"+", "# оборот по счету 99 актуален в отчетах 2013 года",0);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП22703", "2",	"+", "!ДО",ДО(Счет99),Счет99,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		Если флЗаполнятьПрошлыйПериод Тогда	
			ПП22704 = ДО2(Счет95) + ДО2(Счет96) + ДО2(Счет97) + ДО2(Счет99);
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП22704", "Показник ""Інші звичайні витрати"", графа ""За аналогічний період попереднього року""",	"+", "!ДО",ДО2(Счет95), Счет95,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП22704", "5",	"+", "!ДО",ДО2(Счет96),Счет96,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП22704", "4",	"+", "!ДО",ДО2(Счет97),Счет97,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП22704", "3",	"+", "# оборот по счету 99 актуален в отчетах 2013 и 2014 годов",0);
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП22704", "2",	"+", "!ДО",ДО2(Счет99),Счет99,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		КонецЕсли;
		
		//Налог на прибыль
		ПП23003 = ДО(Счет98);
		_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП23003", "Показник ""Податок на прибуток"", графа ""За звітний період""",	"+", "!ДО",ПП23003, Счет98,,НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		Если флЗаполнятьПрошлыйПериод Тогда	
			ПП23004 = ДО2(Счет98);
			_ДобавитьСтрокуРасшифровки( ЭтаФорма, "_ПП23004", "Показник ""Податок на прибуток"", графа ""За аналогічний період попереднього року""",	"+", "!ДО",ПП23004, Счет98,,НачалоГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-12)), ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета,-12));
		КонецЕсли;
		
	КонецЕсли;
	
	// себестоимость реализованной продукции, товаров
	УстановитьЗначениеПоказателя("ПП20503", ПП20503);
	УстановитьЗначениеПоказателя("ПП20504", ПП20504);
	
	// прочие операционные расходы
	УстановитьЗначениеПоказателя("ПП21803", ПП21803);
	УстановитьЗначениеПоказателя("ПП21804", ПП21804);

	//Другие затраты
	УстановитьЗначениеПоказателя("ПП22703", ПП22703);
	УстановитьЗначениеПоказателя("ПП22704", ПП22704);
	
	//Налог на прибыль
	УстановитьЗначениеПоказателя("ПП23003", ПП23003);
	УстановитьЗначениеПоказателя("ПП23004", ПП23004);
	
	Модифицированность = Истина;
	
	СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
	
КонецПроцедуры





&НаКлиенте
Процедура ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С)
    Перем Ст8, Ст23;
	
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(Сред(Лев(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7), Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры



&НаКлиенте
Процедура ПоддержкаДуплекса(Команда)
	
	// инвертируем пометку и значение
	ЕстьДуплекс = СтруктураРеквизитовФормы.ЕстьДуплекс;
	
	СтруктураРеквизитовФормы.Вставить("ЕстьДуплекс", НЕ ЕстьДуплекс);
	Элементы.ЕстьДуплекс.Пометка = НЕ ЕстьДуплекс;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеФормыНаСервере();
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	// расшифровка для Звит1С
	Если  СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровки")
		И ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки) 
		И СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С") Тогда
		
		ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки),
									  СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С); 
		
	КонецЕсли;
	
	ПоказателиОтчета = Новый Структура();
	РеквизитыФормы = ПолучитьРеквизиты();
	Для каждого Реквизит Из РеквизитыФормы Цикл
		Если Лев(ВРЕГ(Реквизит.Имя), 15)  = ВРЕГ("СтруктураДанных") Тогда
			ПоказателиОтчета.Вставить(Сред(Реквизит.Имя, 16), ЭтаФорма[Реквизит.Имя]);		
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИдМногострочногоРаздела Из мСтруктураМногострочныхРазделов Цикл
		
		СтруктураДанных = Новый Структура;
		
		Таблица = РеквизитФормыВЗначение(ИдМногострочногоРаздела.Значение, Тип("ТаблицаЗначений"));
		КолонкиТаблицы = Таблица.Колонки;
		
		Для каждого Строка Из Таблица Цикл
			
			Для каждого Колонка Из КолонкиТаблицы Цикл
				СтруктураДанных.Вставить(Колонка.Имя + "_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ=0"), Строка[Колонка.Имя]);
			КонецЦикла;
			
		КонецЦикла;
		
		ПоказателиОтчета.Вставить(ИдМногострочногоРаздела.Значение, СтруктураДанных);		
		
	КонецЦикла;
 	
	СтруктураРеквизитовФормы.ДопПоказателиОтчетаЗвит1С.Вставить("мДатаКонцаПериодаОтчета", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПоказателиОтчета.Вставить("ДопПоказателиОтчета", СтруктураРеквизитовФормы.ДопПоказателиОтчетаЗвит1С);
		
	// показатели
	СписокСохранения.Вставить("ДанныеОтчета", ПоказателиОтчета);
	
	Возврат СписокСохранения;
	
КонецФункции

&НаКлиенте
Функция СоздатьДанныеОтчетаДляВыгрузки() Экспорт
	
	АдресВХранилище = СоздатьДанныеОтчетаДляВыгрузкиНаСервере();
	Возврат АдресВХранилище;

КонецФункции

&НаСервере
Функция СоздатьДанныеОтчетаДляВыгрузкиНаСервере()
	
	ДанныеОтчета = ПолучитьДанныеФормыНаСервере();
	Возврат ПоместитьВоВременноеХранилище(ДанныеОтчета, Новый УникальныйИдентификатор);
	
КонецФункции


&НаКлиенте
Процедура ОткрытьФормуПараметровДляЗвит1С(ОписаниеОповещения) Экспорт
	
	глКомпонентаЗвит1С.Bring1CToFront();
	СтруктураРеквизитовФормы.Вставить("ОповещениеНастройкиПараметровЗвит1С", ОписаниеОповещения);
	
	Если глМенеджерЗвит1С.ФлагОтладки Тогда

		ФормаСохраненныхРеглОтчетов = ПолучитьФорму("Документ.РегламентированныйОтчет.Форма.ФормаВыбораТестЗвит1С",,ЭтаФорма);
		
		ФормаСохраненныхРеглОтчетов.ОписаниеОповещенияОЗакрытии =  Новый ОписаниеОповещения("РежимТестированияЗвит1СЗавершениеВыбораОтчета", ЭтотОбъект);
		ФормаСохраненныхРеглОтчетов.Параметры.РежимВыбора        = Истина; 
		ФормаСохраненныхРеглОтчетов.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаСохраненныхРеглОтчетов.Открыть();
		
	Иначе
		
		//ОткрытьФормуПараметров(Неопределено);	
				
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РежимТестированияЗвит1СЗавершениеВыбораОтчета(Результат, ДопПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ТекОповещение = СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С;
		СтруктураРеквизитовФормы.Удалить("ОповещениеНастройкиПараметровЗвит1С");
			
		СтруктураРеквизитовФормы.мСохраненныйДок = Результат;	
		ВосстановитьСохраненныеДанные();	
			
		СтруктураРеквизитовФормы.Вставить("ОповещениеНастройкиПараметровЗвит1С", ТекОповещение);
		
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
		
	Иначе
		
		//ОткрытьФормуПараметров(Неопределено);	
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПараметровЗавершение(ПараметрыВозврата, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.Свойство("ОповещениеНастройкиПараметровЗвит1С") Тогда
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьДанныеДляЗвит1С(ОтчетЗвит1С = Неопределено) Экспорт 
	
	
	
	флЗаполнятьПрошлыйПериод = Истина;
	Если НЕ ЗначениеЗаполнено(ИспКлассыСчетовПрошлГода) Тогда
		флЗаполнятьПрошлыйПериод = Ложь;
	КонецЕсли;
	
	мСписокСообщенийЗвит1С 	= Новый СписокЗначений;
	
	// Настроим модуль объекта на получение доп.параметров
	СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина;
	
	ПараметрыЗаполненияЗвит1С = Неопределено;
	Если СтруктураРеквизитовФормы.Свойство("ОповещениеНастройкиПараметровЗвит1С") Тогда
		СтруктураРеквизитовФормы.Удалить("ОповещениеНастройкиПараметровЗвит1С")	
	КонецЕсли;
	
	Если НЕ глМенеджерЗвит1С.ФлагОтладки Тогда
		// Заполнение зависит от формы отчета
		ПараметрыЗаполненияЗвит1С = Неопределено;
		ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С, флЗаполнятьПрошлыйПериод);
		ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);
	КонецЕсли;

	Результат = ПолучитьДанныеФормыНаСервере();
	
	Для каждого Сообщение Из мСписокСообщенийЗвит1С Цикл
		глМенеджерЗвит1С.ПредупреждениеЗвит1С(Сообщение.Представление, ,Сообщение.Значение);
	КонецЦикла;
	
	мСписокСообщенийЗвит1С.Очистить();
	
	Возврат Результат;
	
КонецФункции


&НаСервере
Функция ОпределитьУчетнуюПолитикуВПериоде(НачалоПериода, КонецПериода)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", СтруктураРеквизитовФормы.Организация); 
	Запрос.УстановитьПараметр("НачалоПериода", 		 НачалоПериода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период КАК Период,
	|	УчетнаяПолитикаОрганизаций.ИспользуемыеКлассыСчетовРасходов КАК ИспользуемыеКлассыСчетовРасходов
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(, Организация = &ГоловнаяОрганизация) КАК УчетнаяПолитикаОрганизаций
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.Период >= &НачалоПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	УчетнаяПолитикаОрганизаций.Период";

		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат 	= Выборка.ИспользуемыеКлассыСчетовРасходов;
		Если Выборка.Период >= КонецПериода Тогда
			//период учетной политики не попадает в период отчета
			Результат 	= Неопределено;
		КонецЕсли;
	КонецЕсли;
    Возврат Результат;
КонецФункции

&НаСервере
// Функция вычисляет начальный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по дебету счета, указанного в параметре.
//
Функция СНД(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции

&НаСервере
// Функция вычисляет начальный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - начальный остаток по кредиту счета, указанного в параметре.
//
Функция СНК(Счет)

	Перем Итог;

	Возврат мБухИтоги.ПолучитьИтог("СуммаНачальныйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции

&НаСервере
// Функция вычисляет конечный остаток по дебету счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - конечный остаток по дебету счета, указанного в параметре.
//
Функция СКД(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции

&НаСервере
// Функция вычисляет конечный остаток по кредиту счета, указанного в качестве 
// параметра функции. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма конечного остатка по кредиту указаного счета.
//
Функция СКК(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции

&НаСервере
// Функция вычисляет начальный остаток счета, указанного в качестве параметра 
// функции, развернутый по дебету субсчетов счета. Бухгалтерские итоги должны 
// быть предварительно рассчитаны процедурой  РассчитатьИтоги() обработки 
// БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма начального остатка, развернутого по субсчетам 
//                 указанного счета.
//
Функция СНДР(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции

&НаСервере
// Функция вычисляет начальный остаток счета, указанного в качестве параметра 
// функции, развернутый по кредиту субсчетов счета. Бухгалтерские итоги должны 
// быть предварительно рассчитаны процедурой  РассчитатьИтоги() обработки 
// БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма начального остатка, развернутого по субсчетам 
//                 указанного счета.
//
Функция СНКР(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаНачальныйРазвернутыйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции

&НаСервере
// Функция вычисляет конечный остаток счета, указанного в качестве параметра 
// функции, развернутый по дебету субсчетов счета. Бухгалтерские итоги должны 
// быть предварительно рассчитаны процедурой  РассчитатьИтоги() обработки 
// БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма конечного остатка, развернутого по субсчетам 
//                 указанного счета.
//
Функция СКДР(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокДт", "Счет", Счет);

	Возврат Итог;

КонецФункции

&НаСервере
// Функция вычисляет конечный остаток счета, указанного в качестве параметра 
// функции, развернутый по кредиту субсчетов счета. Бухгалтерские итоги должны 
// быть предварительно рассчитаны процедурой  РассчитатьИтоги() обработки 
// БухгалтерскиеИтоги.
//
// Параметры:
//  Счет         - значение типа ПланСчетов - счет, для которого требуется
//                 получить итог.
//
// Возвращаемое значение:
//  Число        - сумма конечного остатка, развернутого по субсчетам 
//                 указанного счета.
//
Функция СККР(Счет)

	Перем Итог;

	Итог = мБухИтоги.ПолучитьИтог("СуммаКонечныйРазвернутыйОстатокКт", "Счет", Счет);

	Возврат Итог;

КонецФункции

&НаСервере
Функция ДО(Счет)
	
	Перем Итог;
	
	Итог = мБухИтоги.ПолучитьИтог("СуммаОборотДт", "Счет", Счет);
	
	Возврат Итог;
	
КонецФункции // ДО()

&НаСервере
Функция КО(Счет)
	
	Перем Итог;
	
	Итог = мБухИтоги.ПолучитьИтог("СуммаОборотКт", "Счет", Счет);
	
	Возврат Итог;
	
КонецФункции // КО()

&НаСервере
// Функция вычисляет перекрестный оборот в дебет счета, указанного в качестве 
// первого параметра функции, с кредита счета, указанного в качестве второго 
// параметра. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  СчетД        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот в дебет счета;
//  СчетК        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот с кредита счета.
//
// Возвращаемое значение:
//  Число        - сумма перекрестного оборота.
//
Функция ОБ(СчетД, СчетК)
	
	Перем Итог;
	Попытка
	Итог = мБухИтоги.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетД, СчетК);
Исключение
	Итог=0
	КонецПопытки;
	Возврат Итог;
	
КонецФункции // ОБ()

&НаСервере
Функция ДО2(Счет)
	
	Перем Итог;
	
	Итог = мБухИтоги22.ПолучитьИтог("СуммаОборотДт", "Счет", Счет);
	
	Возврат Итог;
	
КонецФункции // ДО()

&НаСервере
Функция КО2(Счет)
	
	Перем Итог;
	
	Итог = мБухИтоги22.ПолучитьИтог("СуммаОборотКт", "Счет", Счет);
	
	Возврат Итог;
	
КонецФункции // КО()

&НаСервере
// Функция вычисляет перекрестный оборот в дебет счета, указанного в качестве 
// первого параметра функции, с кредита счета, указанного в качестве второго 
// параметра. Бухгалтерские итоги должны быть предварительно рассчитаны
// процедурой РассчитатьИтоги() обработки БухгалтерскиеИтоги.
//
// Параметры:
//  СчетД        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот в дебет счета;
//  СчетК        - значение типа ПланСчетов - счет, для будет вычисляться 
//                 оборот с кредита счета.
//
// Возвращаемое значение:
//  Число        - сумма перекрестного оборота.
//
Функция ОБ2(СчетД, СчетК)
	
	Перем Итог;
	
	Попытка
	Итог = мБухИтоги22.ПолучитьИтог("СуммаКорОборотДт", "Счет, КорСчет", СчетД, СчетК);
Исключение
	Итог=0
	КонецПопытки;
	
	Возврат Итог;
	
КонецФункции // ОБ()


//Процедура заполняет значения в скобках по всему отчету  
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьЗначенияВСкобках(Форма) Экспорт
	
	ТекТабличноеПоле = Форма.ТабличныйДокумент;

	Для Каждого ТекущаяОбласть Из ТекТабличноеПоле.Области Цикл 
		Если Сред(ТекущаяОбласть.Имя,1,1)= "_" Тогда 
			
			КодПоказателяБезСкобок = Сред(ТекущаяОбласть.Имя,2);
			ТекущаяОбласть.Значение = Формат(-ТекТабличноеПоле.Области[КодПоказателяБезСкобок].Значение, "ЧО=0" +Форма.СтруктураРеквизитовФормы.мСтрокаФормата);// формат отображения

		КонецЕсли;  	
	КонецЦикла 	
	
КонецПроцедуры	

&НаКлиенте
Процедура ВводЧислаВСкобкахЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки = ДополнительныеПараметры.ИмяЯчейки;
	
	ТабличныйДокумент.Области[ИмяЯчейки].Значение = РезультатВыбора; 
	ЗаполнитьПоказательНаСервере(ИмяЯчейки, РезультатВыбора, ЭтаФорма, "ОтчетМП");
	
	// отобразим показатель "в скобках"
	ТабличныйДокумент.Области["_" +ИмяЯчейки].Значение = Формат(-РезультатВыбора,  "ЧО=0" + СтруктураРеквизитовФормы.мСтрокаФормата);// формат отображения
	
	Расчет(ЭтаФорма,,ИмяЯчейки);
		
КонецПроцедуры



&НаСервере
Процедура УстановитьЗначениеПоказателя(Имя, Значение)
	
	СтруктураДанныхОтчетМП[Имя] = Значение;
	
КонецПроцедуры


&НаСервере
Процедура _ДобавитьСтрокуРасшифровки(Форма, ИмяЯчейки, ИмяПоказателя, ЗнакОперации, ИмяСлагаемого, Сумма, Счет = Неопределено, КорСчет = Неопределено, Сдвиг = Неопределено, ПраваяГраница = Неопределено, ИмяРаздела = Неопределено, НомерЛиста = Неопределено, МнЧ = Неопределено, НомерСтроки = Неопределено, Субконто1 = Неопределено, Субконто2 = Неопределено, Субконто3 = Неопределено)
	
	ИмяСлагаемого = СтрЗаменить(ИмяСлагаемого, "!СНДРС", "!СНДР");
	ИмяСлагаемого = СтрЗаменить(ИмяСлагаемого, "!СКДРС", "!СКДР");
	ИмяСлагаемого = СтрЗаменить(ИмяСлагаемого, "!СНКРС", "!СНКР");
	ИмяСлагаемого = СтрЗаменить(ИмяСлагаемого, "!СККРС", "!СККР");
	
	ТребуемыеОбщиеПараметры =  ОбщиеПараметрыРасшифровки;
	Если Сдвиг = ОбщиеПараметрыРасшифровкиПрошлыйПериод.НачалоПериода Тогда
		ТребуемыеОбщиеПараметры =  ОбщиеПараметрыРасшифровкиПрошлыйПериод;	
	КонецЕсли;
	
	Если Лев(ИмяСлагаемого, 1) = "#" Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Организация", Форма.СтруктураРеквизитовФормы.Организация);
	ИначеЕсли ИмяСлагаемого = "!ОБ"
		ИЛИ ИмяСлагаемого = "!КО"
		ИЛИ ИмяСлагаемого = "!ДО" Тогда
	    ДополнительныеПараметры = НастройкиАнализаСчета(ТребуемыеОбщиеПараметры, Счет, КорСчет);
	Иначе	
		ДополнительныеПараметры = НастройкиОСВПоСчету(ТребуемыеОбщиеПараметры, Счет);
	КонецЕсли;
	
	Если    Лев(ИмяСлагаемого, 5) = "!СНДР" 
		ИЛИ Лев(ИмяСлагаемого, 5) = "!СКДР" 
		ИЛИ Лев(ИмяСлагаемого, 5) = "!СНКР" 
		ИЛИ Лев(ИмяСлагаемого, 5) = "!СККР" Тогда
	
		ДополнительныеПараметры.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("РазвернутоеСальдо", Истина);	
		
		
		ТабличнаяЧастьГруппировка = Новый Массив;
		СчВидовСубконто = 0;
		Для каждого СтрокаВидовСубконто Из Счет.ВидыСубконто Цикл
			
			СчВидовСубконто = СчВидовСубконто + 1;
			ОписаниеГруппировки = Новый Структура;
			ОписаниеГруппировки.Вставить("Использование", Истина);
			ОписаниеГруппировки.Вставить("Поле", "Субконто" + СчВидовСубконто);
			ОписаниеГруппировки.Вставить("Представление", СтрокаВидовСубконто.ВидСубконто);
			ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
			ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
		
		КонецЦикла;
		
		ДополнительныеПараметры.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка", ТабличнаяЧастьГруппировка);
		
	КонецЕсли;
	
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяЯчейки, ИмяПоказателя, ЗнакОперации, ИмяСлагаемого + " " + ?(ЗначениеЗаполнено(Счет), Счет.Код, "") + " " + ?(ЗначениеЗаполнено(КорСчет), КорСчет.Код, ""), Сумма, "ОтчетМП", ДополнительныеПараметры);
	

КонецПроцедуры

&НаСервере
Функция НастройкиАнализаСчета(ОбщиеНастройки, Счет, КорСчет, ОтборПоАналитике = Неопределено)
	
	Если ОбщиеНастройки.Свойство("ПараметрыРасшифровки") Тогда
		Организация   = ОбщиеНастройки.ПараметрыРасшифровки.Организация;
		НачалоПериода = ОбщиеНастройки.ПараметрыРасшифровки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.ПараметрыРасшифровки.КонецПериода;
	Иначе
		Организация   = ОбщиеНастройки.Организация;
		НачалоПериода = ОбщиеНастройки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.КонецПериода;
	КонецЕсли;
	
	НастройкиРасшифровки = Новый Структура;
	НастройкиРасшифровки.Вставить("Организация", Организация);
	
	НастройкиРасшифровки.Вставить("Отчет", Новый Структура);
	НастройкиРасшифровки.Отчет.Вставить("ИмяОтчета", "Отчет.АнализСчета.Форма.ФормаОтчета");
	
	НастройкиРасшифровки.Отчет.Вставить("ПараметрыФормы", Новый Структура);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация",   Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецПериода);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Счет", Счет);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоСубсчетам", НЕ ЗначениеЗаполнено(КорСчет));
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательБУ",            Истина);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательНУ",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательПР",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВР",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКонтроль",      Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВалютнаяСумма", Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКоличество",    Ложь);
	
	Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Если ЗначениеЗаполнено(КорСчет) Тогда
		ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных("КорСчет");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияКомпоновкиДанных.ВИерархии, КорСчет);
	КонецЕсли;
	
	Если ОтборПоАналитике <> Неопределено Тогда
		Для Каждого ЭлементОтбора Из ОтборПоАналитике Цикл
			ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ);
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияКомпоновкиДанных.Равно, ЭлементОтбора.Значение);
		КонецЦикла;
	КонецЕсли;
	
	НастройкиРасшифровки.Отчет.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

&НаСервере
Функция НастройкиОСВПоСчету(ОбщиеНастройки, Счет, ОтборПоАналитике = Неопределено) Экспорт
	
	Если ОбщиеНастройки.Свойство("ПараметрыРасшифровки") Тогда
		Организация   = ОбщиеНастройки.ПараметрыРасшифровки.Организация;
		НачалоПериода = ОбщиеНастройки.ПараметрыРасшифровки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.ПараметрыРасшифровки.КонецПериода;
	Иначе
		Организация   = ОбщиеНастройки.Организация;
		НачалоПериода = ОбщиеНастройки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.КонецПериода;
	КонецЕсли;
	
	НастройкиРасшифровки = Новый Структура;
	НастройкиРасшифровки.Вставить("Организация", Организация);
	
	НастройкиРасшифровки.Вставить("Отчет", Новый Структура);
	НастройкиРасшифровки.Отчет.Вставить("ИмяОтчета", "Отчет.ОборотноСальдоваяВедомостьПоСчету.Форма.ФормаОтчета");
	
	НастройкиРасшифровки.Отчет.Вставить("ПараметрыФормы", Новый Структура);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация",   Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецПериода);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Счет", Счет);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоСубсчетам", Истина);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательБУ",            Истина);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВалютнаяСумма", Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКоличество",    Ложь);
	
	Если ОтборПоАналитике <> Неопределено Тогда
		Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
		
		Для Каждого ЭлементОтбора Из ОтборПоАналитике Цикл
			ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ);
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Структура") Тогда
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ЭлементОтбора.Значение.ВидСравненияКомпоновкиДанных, ЭлементОтбора.Значение.Значение);
			Иначе
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияКомпоновкиДанных.Равно, ЭлементОтбора.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НастройкиРасшифровки.Отчет.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

&НаСервере
Процедура ДобавитьЗначениеВОтбор(Отбор, ЛевоеЗначение, ВидСравнения, ПравоеЗначение)
	
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение    = ЛевоеЗначение;
	ЭлементОтбора.ВидСравнения     = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
КонецПроцедуры


&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя)
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции


&НаКлиенте
Процедура Выгрузить(Команда)
	Возврат;
КонецПроцедуры
