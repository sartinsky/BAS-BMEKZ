#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


Процедура СформироватьОтчет(ПараметрыОтчета, АдресХранилища) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Макет = Отчеты.ТоварныйОтчет.ПолучитьМакет("Макет");
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм();
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;

	СведенияОПокупателе = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ПараметрыОтчета.Организация, ПараметрыОтчета.КонецПериода);

	ВыбМОЛ = РегистрыСведений.ОтветственныеЛица.ПолучитьПоследнее(КонецДня(ПараметрыОтчета.КонецПериода), Новый Структура("СтруктурнаяЕдиница", ПараметрыОтчета.Склад)).ФизическоеЛицо;

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ОрганизацияПредставление = ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(СведенияОПокупателе,,,КодЯзыкаПечать);
	ОбластьМакета.Параметры.Склад = ПараметрыОтчета.Склад;
	ОбластьМакета.Параметры.ДатаСоставления = ТекущаяДата();
	ОбластьМакета.Параметры.ДатаНачала = ПараметрыОтчета.НачалоПериода;
	ОбластьМакета.Параметры.ДатаКонца = ПараметрыОтчета.КонецПериода;
	ОбластьМакета.Параметры.МОЛ = ?(НЕ ЗначениеЗаполнено(ВыбМОЛ), "", ВыбМОЛ);

	ОбластьМакета.Параметры.Номер = ПараметрыОтчета.НомерОтчета;
	ВысотаЗаголовка = ОбластьМакета.ВысотаТаблицы;

	ТабличныйДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ПовторятьПриПечатиСтроки = ТабличныйДокумент.Область(1 + ВысотаЗаголовка, ,2 + ВысотаЗаголовка);

	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата1", НачалоДня(ПараметрыОтчета.НачалоПериода));
	Запрос.УстановитьПараметр("Дата2", Новый Граница(КонецДня(ПараметрыОтчета.КонецПериода), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Запрос.УстановитьПараметр("Склад", ПараметрыОтчета.Склад);

	Если ПараметрыОтчета.Склад.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин Тогда
		
		Запрос.УстановитьПараметр("Счет", ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХозрасчетныйОстаткиИОбороты.Период КАК ДатаДок,
		|	ХозрасчетныйОстаткиИОбороты.Регистратор КАК Док,
		|	ХозрасчетныйОстаткиИОбороты.Регистратор.Номер КАК НомерДок,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт - ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт) КАК НачОст,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотДт) КАК Приход,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотКт) КАК Расход,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт - ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт) КАК КонОст
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&Дата1, &Дата2, Регистратор, , Счет = &Счет, &ВидСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		|ГДЕ
		|	ХозрасчетныйОстаткиИОбороты.Субконто1 = &Склад
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстаткиИОбороты.Период,
		|	ХозрасчетныйОстаткиИОбороты.Регистратор,
		|	ХозрасчетныйОстаткиИОбороты.Регистратор.Номер
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаДок";
		
	Иначе
		Запрос.УстановитьПараметр("Счет", ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХозрасчетныйОстаткиИОбороты.Период КАК ДатаДок,
		|	ХозрасчетныйОстаткиИОбороты.Регистратор КАК Док,
		|	ХозрасчетныйОстаткиИОбороты.Регистратор.Номер КАК НомерДок,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт - ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт) КАК НачОст,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотДт) КАК Приход,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаОборотКт) КАК Расход,
		|	СУММА(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт - ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт) КАК КонОст
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&Дата1, &Дата2, Регистратор, , Счет = &Счет, &ВидСубконто, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
		|ГДЕ
		|	ХозрасчетныйОстаткиИОбороты.Субконто1 = &Склад
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстаткиИОбороты.Период,
		|	ХозрасчетныйОстаткиИОбороты.Регистратор,
		|	ХозрасчетныйОстаткиИОбороты.Регистратор.Номер
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаДок";
		
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();

	ТЗОстатки = РезультатЗапроса.Выгрузить();
	Если ТЗОстатки.Количество() = 0 Тогда
		НачОст = 0;
		КонОст = 0;
	Иначе
		НачОст = ТЗОстатки[0].НачОст;
		КонОст = ТЗОстатки[ТЗОстатки.Количество() - 1].КонОст;
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("ОстатокНачала");
	ОбластьМакета.Параметры.ДатаНачала = НСтр("ru='Остаток на ';uk='Залишок на'",КодЯзыкаПечать) + Формат(ПараметрыОтчета.НачалоПериода, "ДЛФ=Д");
	ОбластьМакета.Параметры.НачСтоимостьВсего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(НачОст);
	ТабличныйДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Приход");
	ТабличныйДокумент.Вывести(ОбластьМакета);

	ТЗПриходы = ОтобратьСтрокиПоКритериям(РезультатЗапроса, Новый Структура("Приход", 0),
	            Новый Структура("Приход", ВидСравнения.НеРавно)).Выгрузить();

	ТЗПриходы.Сортировать("ДатаДок Возр");

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");

	Для Каждого СтрокаПрихода Из ТЗПриходы Цикл
		ОбластьМакета.Параметры.Докум = СтрокаПрихода.Док;
		ОбластьМакета.Параметры.Расшифровка = СтрокаПрихода.Док;
		ОбластьМакета.Параметры.ДатаДокумента = СтрокаПрихода.ДатаДок;
		ОбластьМакета.Параметры.НомерДокумента = СтрокаПрихода.НомерДок;
		ОбластьМакета.Параметры.СуммаТовара = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаПрихода.Приход);
		ОбластьМакета.Параметры.СуммаТары = ОбщегоНазначенияБПВызовСервера.ФорматСумм(0);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	Приход = ТЗПриходы.Итог("Приход");

	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоПриход");
	ОбластьМакета.Параметры.ПрихСтоимостьВсего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Приход);
	ТабличныйДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ВсегоПриход");
	ОбластьМакета.Параметры.ПриходСОстатком = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Приход + НачОст);
	ТабличныйДокумент.Вывести(ОбластьМакета);

	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	ОбластьМакета = Макет.ПолучитьОбласть("Расход");
	ТабличныйДокумент.Вывести(ОбластьМакета);

	ТЗРасходы = ОтобратьСтрокиПоКритериям(РезультатЗапроса, Новый Структура("Расход", 0),
				Новый Структура("Расход", ВидСравнения.НеРавно)).Выгрузить(); 
			
	ТЗРасходы.Сортировать("ДатаДок Возр");

	ОбластьМакета = Макет.ПолучитьОбласть("Строка");

	Для Каждого СтрокаРасхода Из ТЗРасходы Цикл
		ОбластьМакета.Параметры.Докум = СтрокаРасхода.Док;
		ОбластьМакета.Параметры.Расшифровка = СтрокаРасхода.Док;
		ОбластьМакета.Параметры.ДатаДокумента = СтрокаРасхода.ДатаДок;
		ОбластьМакета.Параметры.НомерДокумента = СтрокаРасхода.НомерДок;
		ОбластьМакета.Параметры.СуммаТовара = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаРасхода.Расход);
		ОбластьМакета.Параметры.СуммаТары = ОбщегоНазначенияБПВызовСервера.ФорматСумм(0);
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЦикла;

	Расход = ТЗРасходы.Итог("Расход");

	ОбластьМакета = Макет.ПолучитьОбласть("ИтогоРасход");
	ОбластьМакета.Параметры.РасхСтоимостьВсего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Расход);
	ТабличныйДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ОстатокКонец");
	ОбластьМакета.Параметры.ДатаКонца = НСтр("ru='Остаток на ';uk='Залишок на'",КодЯзыкаПечать) + Формат(ПараметрыОтчета.КонецПериода, "ДЛФ=Д");
	ОбластьМакета.Параметры.КонСтоимостьВсего = ОбщегоНазначенияБПВызовСервера.ФорматСумм(КонОст);
	ТабличныйДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
	ТабличныйДокумент.Вывести(ОбластьМакета);

	ТабличныйДокумент.ПовторятьПриПечатиСтроки = ПовторятьПриПечатиСтроки;
	
	ПоместитьВоВременноеХранилище(ТабличныйДокумент, АдресХранилища);
	
КонецПроцедуры

Функция ОтобратьСтрокиПоКритериям(Источник, СтруктураКритериев, СтруктураСложныхКритериев = Неопределено)
	
	Перем ВидСравненияСложный;
	
	Если СтруктураСложныхКритериев = Неопределено Тогда
		СтруктураСложныхКритериев = Новый Структура;
	КонецЕсли;
	
	ПостроительЗапроса 				  = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(Источник);
	
	Для Каждого Критерий Из СтруктураКритериев Цикл
		НовыйОтбор = ПостроительЗапроса.Отбор.Добавить(Критерий.Ключ);
		
		СтруктураСложныхКритериев.Свойство(Критерий.Ключ, ВидСравненияСложный);
		
		Если ВидСравненияСложный = Неопределено Тогда
			НовыйОтбор.Установить(Критерий.Значение);
		Иначе
			НовыйОтбор.Использование = Истина;
			НовыйОтбор.ВидСравнения  = ВидСравненияСложный;
			НовыйОтбор.Значение 	 = Критерий.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПостроительЗапроса.Результат;
	
КонецФункции // ОтобратьСтрокиПоКритериям()


#КонецЕсли