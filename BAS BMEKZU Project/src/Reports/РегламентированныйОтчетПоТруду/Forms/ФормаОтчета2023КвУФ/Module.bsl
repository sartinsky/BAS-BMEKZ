&НаСервере
Перем мОбъектОтчета;

&НаКлиенте
Перем ОбработкаКС Экспорт;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Обход ошибки платформы Параметр сеанса отсутствует или удален
	ТабличныйДокумент.Очистить();
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2023Кв";
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
		
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(17, 2));
	
	СтруктураДанныхОтчетПоТруду = Новый Структура;
	
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	СтруктураРеквизитовФормы.мОписаниеТиповБулево = Новый ОписаниеТипов(МассивБулево);
	
	мСтруктураМногострочныхРазделов = Новый Структура;	
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика    = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен

	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);

	мСтруктураМногостраничныхРазделов = Новый Структура;
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
		
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "01/01/2023";

	СтруктураРеквизитовФормы.мПечатныеформы = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "ОтчетПоТруду";
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация      		  = Параметры.Организация;
	
	ДатаПодписи	= ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.ЕстьДуплекс = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность", "ЕстьДуплекс", Ложь);
	Элементы.ЕстьДуплекс.Пометка		 = СтруктураРеквизитовФормы.ЕстьДуплекс;
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати 	   = Ложь;
	ВывестиМакетВТаблДокНаСервере(ИмяРаздела, 1);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяРаздела);
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДокументПредставителя");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	СтруктураРеквизитовФормы.Вставить("мИмяПредставителя");
	СтруктураРеквизитовФормы.Вставить("мКодОтчета");
	СтруктураРеквизитовФормы.Вставить("мНазваниеПредставителя");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мПредставительФизЛицо");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("мФамилияПредставителя");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповБулево");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуВыгрузить", Ложь);
	СтруктураРеквизитовФормы.Вставить("ТекущиеОбластиСтраниц");	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("ГруппаОрганизаций", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("мПроверятьСоотношенияПриПечатиИВыгрузки");
	СтруктураРеквизитовФормы.Вставить("МассивЖенщин");
	СтруктураРеквизитовФормы.Вставить("МассивСовм");
	СтруктураРеквизитовФормы.Вставить("МассивШтПоследнийМес");
	СтруктураРеквизитовФормы.Вставить("МассивГПХ");
	СтруктураРеквизитовФормы.Вставить("МассивФизЛицЖенщин");
	СтруктураРеквизитовФормы.Вставить("МассивФизЛицСовм");
	СтруктураРеквизитовФормы.Вставить("МассивФизЛицШтПоследнийМес");
	СтруктураРеквизитовФормы.Вставить("МассивФизЛицГПХ");
	СтруктураРеквизитовФормы.Вставить("ВерсияБСП", СтандартныеПодсистемыСервер.ВерсияБиблиотеки());
	
	СтруктураРеквизитовФормы.Вставить("ЕстьДуплекс", Ложь);
	
	СтруктураРеквизитовФормы.Вставить("ПолучениеДанныхДляЗвит1С", Ложь);
	СтруктураРеквизитовФормы.Вставить("ДопПоказателиОтчетаЗвит1С", Новый Структура);
	ЗарплатаКадрыРасширенная = Ложь;
	Если РегламентированнаяОтчетностьПереопределяемый.ИДПодсистемыЗарплаты() = "ЕРПЗИК" Тогда
		ЗарплатаКадрыРасширенная = Истина;
	КонецЕсли;
	СтруктураРеквизитовФормы.Вставить("ЗарплатаКадрыРасширенная", ЗарплатаКадрыРасширенная);
	
КонецПроцедуры

// СформироватьДеревоРазделовОтчетаНаСервере()
//
&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаСервере()

// СформироватьДеревоРазделовОтчетаНаКлиенте()
//
&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаКлиенте()

// СформироватьДеревоРазделовОтчета()
//
&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Страница " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры // СформироватьДеревоРазделовОтчета()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОписаниеТипаЧислаЕДляРаздела(ИмяРаздела = "")
	
	Результат = Новый Структура("ОписаниеТипа, Длина, Точность");
	
	Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	Возврат Результат; 
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета()
	
	СтруктураЗависимыхЯчеекДляАвторасчета = Новый Структура;
	
КонецПроцедуры

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьСтруктуруЗависимыхЯчеекДляАвторасчета();
	
	ЗаполнитьНачальныеНастройки();
	
	ФормироватьСтруктуруСтраницОтчета();
	
	ФормироватьСтруктуруСвойствСтраниц();
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ЗаполнитьПустыеСтруктурыДанных();

	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1000;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 1;
			СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет     = Ложь;
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);

			УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);

		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
	КонецЕсли;
	
	//Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуВыгрузить Тогда
	//	Элементы.Выгрузка.Видимость = Ложь;
	//КонецЕсли;
	//
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено
	 ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
            			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);	
	
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	ОписаниеТиповЧисло1    = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));
	
	МассивТиповТаблицаЗначений = Новый Массив; 
	МассивТиповТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТиповТаблицаЗначений);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
				
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда         
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);

			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда		
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы в ИМНС.
	//

	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ОтчетПоТруду";
	СтрокаУровня1.Представление            = НСтр("ru='Отчет по труду';uk='Звіт із праці'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 0;
	
КонецПроцедуры

&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
		
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	
	СтрокаУровня1.ИмяСтраницы                          = "ОтчетПоТруду";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Ложь;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	    	
КонецПроцедуры

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
			
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменятьАктивнуюСтраницу = Истина)	
	
	ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
	
КонецПроцедуры
		
&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры
		
&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	ИмяЯчейки 			 = Область.Имя;
	НаименованиеТекЛиста = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ВРЕГ(Лев(ИмяЯчейки, 6))  = "ЕДРПОУ" Тогда

		ИмяОбластиЗначения = Лев(ИмяЯчейки, 6);  
		  
		Значение = ТабличныйДокумент.Области[ИмяОбластиЗначения].Значение;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводПоказателяВПолеТабличногоДокументЗавершение",
													   ЭтаФорма, Новый Структура("ИмяЯчейки, ИмяСтраницы,
																				 |ИмяЯчейкиКвадратов, ИмяСтраницыКвадратов, 
																				 |Размерность, ДополнитьЗначение, НольКакНоль", 
																				 ИмяОбластиЗначения,  НаименованиеТекЛиста,
																				 ИмяОбластиЗначения + "_", НаименованиеТекЛиста,
																				 8, Ложь, Неопределено));
		
		ПоказатьВводСтроки(ОписаниеОповещения,Значение, НСтр("ru='Введите значение';uk='Введіть значення'"), 8);
		
	ИначеЕсли ВРЕГ(Лев(ИмяЯчейки, 7))  = "КАТОТТГ" Тогда

		ИмяОбластиЗначения = Лев(ИмяЯчейки, 7);  
		  
		Значение = ТабличныйДокумент.Области[ИмяОбластиЗначения].Значение;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводПоказателяВПолеТабличногоДокументЗавершение",
													   ЭтаФорма, Новый Структура("ИмяЯчейки, ИмяСтраницы,
																				 |ИмяЯчейкиКвадратов, ИмяСтраницыКвадратов, 
																				 |Размерность, ДополнитьЗначение, НольКакНоль", 
																				 ИмяОбластиЗначения,  НаименованиеТекЛиста,
																				 ИмяОбластиЗначения + "_", НаименованиеТекЛиста,
																				 19, Ложь, Неопределено));
		
		ПоказатьВводСтроки(ОписаниеОповещения,Значение, НСтр("ru='Введите значение';uk='Введіть значення'"), 19);
		ЗаполнитьПоказательНаСервере("КАТОТТГ1", Сред(Значение, 3), ЭтаФорма, "ОтчетПоТруду");
		
	ИначеЕсли ВРЕГ(Лев(ИмяЯчейки, 2)) = "HK" Тогда
		//причина отсутствия данных 
		НовЗначение = ?(ЗначениеЗаполнено(ТабличныйДокумент.Области[ИмяЯчейки].Значение), "", "V");
		
		ТабличныйДокумент.Области["HK1"].Значение = "";
		ТабличныйДокумент.Области["HK2"].Значение = "";
		ТабличныйДокумент.Области["HK3"].Значение = "";
		ТабличныйДокумент.Области["HK4"].Значение = "";
		ТабличныйДокумент.Области["HK5"].Значение = "";
		ТабличныйДокумент.Области["HK6"].Значение = "";
		 
		ТабличныйДокумент.Области[ИмяЯчейки].Значение = НовЗначение;
		
	ИначеЕсли ВРЕГ(Лев(ИмяЯчейки, 4)) = "KVED" Тогда
		
		ИмяОбластиЗначения = Лев(ИмяЯчейки, 4);  
		  
		Значение = ТабличныйДокумент.Области[ИмяОбластиЗначения].Значение;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводПоказателяВПолеТабличногоДокументЗавершение",
													   ЭтаФорма, Новый Структура("ИмяЯчейки, ИмяСтраницы,
																				 |ИмяЯчейкиКвадратов, ИмяСтраницыКвадратов, 
																				 |Размерность, ДополнитьЗначение, НольКакНоль", 
																				 ИмяОбластиЗначения,  НаименованиеТекЛиста,
																				 ИмяОбластиЗначения, НаименованиеТекЛиста,
																				 5, Ложь, Неопределено));
		
		ПоказатьВводСтроки(ОписаниеОповещения,Значение, НСтр("ru='Введите значение';uk='Введіть значення'"), 5);
		
	ИначеЕсли ВРЕГ(ИмяЯчейки) = "H001" Тогда
		//отметка нет данных
		ТабличныйДокумент.Области[ИмяЯчейки].Значение = ?(ЗначениеЗаполнено(ТабличныйДокумент.Области[ИмяЯчейки].Значение), "", "V");
		
		Если НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области[ИмяЯчейки].Значение) Тогда
		    //очищаем
			ТабличныйДокумент.Области["HK1"].Значение = "";
			ТабличныйДокумент.Области["HK2"].Значение = "";
			ТабличныйДокумент.Области["HK3"].Значение = "";
			ТабличныйДокумент.Области["HK4"].Значение = "";
			ТабличныйДокумент.Области["HK5"].Значение = "";
			ТабличныйДокумент.Области["HK6"].Значение = "";
		КонецЕсли;		
		
	КонецЕсли;		
	
КонецПроцедуры // ОбработкаВыбораВПолеТабличногоДокумента()

&НаКлиенте		
Процедура ВводПоказателяВПолеТабличногоДокументЗавершение(Значение, ДополнительныеПараметры) Экспорт
			
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Значение = Формат(Значение, "ЧГ=0");
	КонецЕсли;
	
	ИмяЯчейки = ДополнительныеПараметры.ИмяЯчейки;
	
	ЗаполнитьПоказательНаСервере(ДополнительныеПараметры.ИмяЯчейки, Значение, ЭтаФорма, ДополнительныеПараметры.ИмяСтраницы);

	Если ЗначениеЗаполнено(ДополнительныеПараметры.ИмяСтраницыКвадратов) Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, ДополнительныеПараметры.ИмяСтраницыКвадратов, ДополнительныеПараметры.ИмяЯчейкиКвадратов, ДополнительныеПараметры.Размерность, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
	КонецЕсли;
	                         
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	Модифицированность = Истина;
		
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", Область.Имя));
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	РасчетНаКлиенте();
	
	
КонецПроцедуры // ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента()

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета, ЗаголовокРаздела = Ложь)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	Если ТабличныйДокумент.Области.Найти("ПредупреждениеОПечати") = Неопределено Тогда
		ТабличныйДокумент.ОбластьПечати = Неопределено;
	Иначе
		ТабличныйДокумент.ОбластьПечати 					  = ТабличныйДокумент.Области.ПредупреждениеОПечати;
	    ТабличныйДокумент.Области.ПредупреждениеОПечати.Текст = НСтр("ru='ВНИМАНИЕ! Печать отчета необходимо осуществлять из меню ''Печать''.';uk= 'УВАГА! Друк звіту необхідно здійснювати за допомогою меню ''Друк''.'");
	КонецЕсли;
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Если ИмяТекРаздела = "ОтчетПоТруду" Тогда
		
		УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
		
		УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
		
КонецФункции

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт
	
	Перем ТекТабличноеПоле;
		
	Возврат ТекТабличноеПоле;
	
КонецФункции

&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;

	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
				
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						ЧислоЕЗнак = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					КонецЕсли;
					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина; Л="+РегламентированнаяОтчетностьКлиентСервер.ПолучитьКодЯзыкаИнтерфейса());
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

					Если ЗначениеВКвадратах Тогда
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизации(Форма, ИзмененаДатаПодписи = Ложь)
 	
	Организация = Форма.СтруктураРеквизитовФормы.Организация;	
	
	ЗаполнитьПоказательНаСервере("ОргНазв", Организация.НаименованиеПолное, Форма, "ОтчетПоТруду");

	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СписокПоказателей.Добавить("","ЮридическийАдрес");
	СписокПоказателей.Добавить("","ФактическийАдрес");
	СписокПоказателей.Добавить("","Телефон");
	СписокПоказателей.Добавить("","Email");
	СписокПоказателей.Добавить("","КодКВЕД");
	СписокПоказателей.Добавить("","КодКАТОТТГ");
	СписокПоказателей.Добавить("","ВЭД");
	
	Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, СписокПоказателей);
	КодЕДРПОУ 	= Сведения.КодПоЕДРПОУ;
	ОргЮрАдрес	= Сведения.ЮридическийАдрес;
	ОргАдрес	= Сведения.ФактическийАдрес;
	Телефон		= Сведения.Телефон;
	EMAIL           = Сведения.Email;
	Телефон  	    = Сведения.Телефон;	
	КодКАТОТТГ      = Сведения.КодКАТОТТГ;
	КодКВЕД    		= Сведения.КодКВЕД;
	ВЭД    			= Сведения.ВЭД;
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ИмяФАМИЛИЯРук");
	СведенияДатаПодписи = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.ДатаПодписи, СписокПоказателей);
	ФИОДиректора      = СведенияДатаПодписи.ИмяФАМИЛИЯРук;
	
	ЗаполнитьПоказательНаСервере("ЕДРПОУ",  		КодЕДРПОУ, 			Форма, "ОтчетПоТруду");
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "ОтчетПоТруду", "ЕДРПОУ_",  8, КодЕДРПОУ, Ложь);		
	
	ЗаполнитьПоказательНаСервере("ОргДиректор",   	ФИОДиректора, 		Форма, "ОтчетПоТруду");

	ЗаполнитьПоказательНаСервере("ОргЮрАдрес", ОргЮрАдрес, Форма, "ОтчетПоТруду");
	
	ЗаполнитьПоказательНаСервере("ОргАдрес", ОргАдрес, Форма, "ОтчетПоТруду");
	
	ЗаполнитьПоказательНаСервере("EMAIL", EMAIL, Форма, "ОтчетПоТруду");

	ЗаполнитьПоказательНаСервере("Телефон", Телефон, Форма, "ОтчетПоТруду");
	
	ЗаполнитьПоказательНаСервере("КАТОТТГ", КодКАТОТТГ, Форма, "ОтчетПоТруду");
	ЗаполнитьПоказательНаСервере("КАТОТТГ1", Сред(КодКАТОТТГ, 3), Форма, "ОтчетПоТруду");
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "ОтчетПоТруду", "КАТОТТГ"+"_",  19, КодКАТОТТГ, Ложь);		
	
	ЗаполнитьПоказательНаСервере("KVED", КодКВЕД, Форма, "ОтчетПоТруду");
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "ОтчетПоТруду", "KVED",  5, КодКВЕД, Ложь);		
	ЗаполнитьПоказательНаСервере("ОргВЭД", ВЭД, Форма, "ОтчетПоТруду");
	
	//если нет структурного подразделения- равен 1
	ЗаполнитьПоказательНаСервере("КодПодразделения4", 1, Форма, "ОтчетПоТруду");  
	
	НомерКвартала = Месяц(КонецКвартала(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета))/3;
	НомерКварталРимск = ?(НомерКвартала = 1, "I", ?(НомерКвартала = 2, "II", ?(НомерКвартала = 3, "III", "IV")));
	ЗаполнитьПоказательНаСервере("ПериодОтчета",  "за " + НомерКварталРимск + " квартал " + Формат(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ = 'гггг';Л = uk_UA") + " р.", Форма, "ОтчетПоТруду");
	
	ЗаполнитьПоказательНаСервере("ДатаРаздел6",  " грудня " + Формат(Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧДЦ=0; ЧГ=0") + " року", Форма, "ОтчетПоТруду");
	
	// заполним глоб переменные
	МинОплатаТруда = 0;
	ЗапросЗначениеМинЗарплаты = Новый Запрос;
	ЗапросЗначениеМинЗарплаты.УстановитьПараметр("Дата", НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	ЗапросЗначениеМинЗарплаты.Текст = "
	|ВЫБРАТЬ 
	|   ЕстьNULL(Размер,0) КАК Размер
	|ИЗ
	|	РегистрСведений.МинимальнаяОплатаТруда.СрезПоследних (&Дата) 
	|";
	РезультатЗапроса = ЗапросЗначениеМинЗарплаты.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		МинОплатаТруда = РезультатЗапроса.Размер;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Розмір мінімальної оплати праці на " + Формат(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ДФ=dd.MM.yyyy") + ": " + Формат(МинОплатаТруда, "ЧЦ=15; ЧДЦ=2");
		Сообщение.Сообщить();
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заданий розмір мінімальної заробітної праці! Перевірте регістр відомостей ""Мінімальна оплата праці""";
		Сообщение.Сообщить();
	КонецЕсли;

	ПрожиточныйМинимум = 0;
	ЗапросЗначениеПрожиточногоМинимума = Новый Запрос;
	ЗапросЗначениеПрожиточногоМинимума.УстановитьПараметр("Дата", НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	ЗапросЗначениеПрожиточногоМинимума.УстановитьПараметр("Трудящиеся", Перечисления.СоциальныеГруппыНаселения.Трудоспособные);
	ЗапросЗначениеПрожиточногоМинимума.Текст = "
	|ВЫБРАТЬ 
	|   ЕстьNULL(Размер,0) КАК Размер
	|ИЗ
	|	РегистрСведений.ПрожиточныеМинимумы.СрезПоследних (&Дата,СоциальнаяГруппа = &Трудящиеся) 
	|";
	РезультатЗапроса = ЗапросЗначениеПрожиточногоМинимума.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		ПрожиточныйМинимум = РезультатЗапроса.Размер;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере(ВПрограммеИзмененаДатаПодписи = Ложь)
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма, ВПрограммеИзмененаДатаПодписи);
	
КонецПроцедуры

&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции

&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0 И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;

КонецФункции

&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
		
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции

&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	Перем ИмяГруппы;
    	
	Если ИмяЛиста = Неопределено Тогда
        ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции

&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	Перем ВерсияФормы;
    Перем ЕстьДуплекс;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация = СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи                                       = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий                                       = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	ВерсияФормыИзменилась = Ложь;
	Если СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы) И (ВерсияФормы <> СтруктураРеквизитовФормы.мВерсияФормы) Тогда
		ВерсияФормыИзменилась = Истина;
	КонецЕсли;
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	
	// Установим актуальные представления разделов.
	Для Каждого СтрокаДерева Из ДеревоНастройкиСтраниц.Строки Цикл
		Счетчик = ?(Счетчик = Неопределено, 0, Счетчик);
		ЭлементмДеревоСтраницОтчета = мДеревоСтраницОтчета.ПолучитьЭлементы().Получить(Счетчик);
		Если СтрокаДерева.ИмяСтраницы = ЭлементмДеревоСтраницОтчета.ИмяСтраницы Тогда
			Если НЕ СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление Тогда
				СтрокаДерева.Представление = ЭлементмДеревоСтраницОтчета.Представление;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;
	
	СписокСохранения.Свойство("ЕстьДуплекс", ЕстьДуплекс);
	Если ЕстьДуплекс = Неопределено Тогда
		ЕстьДуплекс = Ложь;
	КонецЕсли;
	СтруктураРеквизитовФормы.ЕстьДуплекс = ЕстьДуплекс;
	Элементы.ЕстьДуплекс.Пометка         = ЕстьДуплекс;
	
	СформироватьДеревоРазделовОтчетаНаСервере();	
	
	Префикс = "ТабличныйДокумент";
    	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
			
	КонецЦикла;
	
	ИмяТекРаздела = "ОтчетПоТруду";
	
	Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
		Попытка
			ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры

&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы)
	Перем ИсходноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
		
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	ПерерисоватьСтроки = (НЕ ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы);
		
	Раздел = Форма[ТекТабличноеПолеИмя];
	
	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.
		Форма.ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки);

		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
		
		Для НомерГрафы = 1 По Форма.мСтруктураКолвоКолонокРазделов[ИмяГруппы] Цикл
			
			КолонкаТаблицыИмя = ИмяГруппы + Формат(НомерГрафы, "ЧЦ=2; ЧВН=");
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;
				
				ОбластьЯчейкиТаблицы          = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьНеобходимоеКоличествоДопСтрокНаСервере(ТекТабличноеПоле, ТекТабличноеПолеИмя, ИсходноеКоличествоСтрокГруппы, ТекущееКоличествоСтрокГруппы, ИмяГруппы, СтруктураГруппы, ВысотаСтроки) Экспорт
		
	ОбластьДопСтроки = ТекТабличноеПоле.ПолучитьОбласть("МногострочнаяЧасть");
	
	КоординатыОбластей = Новый Структура();
	
	Для Каждого Область Из ТекТабличноеПоле.Области Цикл
		
		Если Найти(Область.Имя, "_") Тогда
			
			КоординатыОбластей.Вставить(Область.Имя, Область.Верх);
			
		КонецЕсли;
		
	КонецЦикла;
		
	МногострочнаяЧастьВерх = ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх;
	
	МногострочнаяЧастьНиз = ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ;
			
	ТекТабличноеПоле.ВставитьОбласть(ОбластьДопСтроки.Область(), ТекТабличноеПоле.Область(МногострочнаяЧастьНиз + 1, , МногострочнаяЧастьНиз + (ТекущееКоличествоСтрокГруппы - 1) * ВысотаСтроки), ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	Для НомНовойСтроки = ИсходноеКоличествоСтрокГруппы По ТекущееКоличествоСтрокГруппы Цикл
						
		Для Каждого Область Из ОбластьДопСтроки.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			
				ОбластьТаблДок = ТекТабличноеПоле.Область(КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Лево, КоординатыОбластей[Область.Имя] + (ТекущееКоличествоСтрокГруппы - НомНовойСтроки) * ВысотаСтроки, Область.Право);
							
				Если ОбластьТаблДок.СодержитЗначение Тогда
					ОбластьТаблДок.Очистить();
				КонецЕсли;
				
				ОбластьТаблДок.Имя = Лев(Область.Имя, Найти(Область.Имя, "_")) + Строка(ТекущееКоличествоСтрокГруппы - НомНовойСтроки + 1);
				
			КонецЕсли;
			
		КонецЦикла;
						
	КонецЦикла;	
		
	ТекТабличноеПоле.Область(ТекТабличноеПоле.Области.МногострочнаяЧасть.Верх, , ТекТабличноеПоле.Области.МногострочнаяЧасть.Низ).Имя = "";
	
	ТекТабличноеПоле.Область(МногострочнаяЧастьВерх, , МногострочнаяЧастьНиз).Имя = "МногострочнаяЧасть";
	
КонецПроцедуры

&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
    	
	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт

	ПеременныеМодуля = Новый Структура;
	ПеременныеМодуля.Вставить("мПредставительФизЛицо",  СтруктураРеквизитовФормы.мПредставительФизЛицо);
	
	флОбновитьПеременныеМодуля = ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля);
	
	СтруктураРеквизитовФормы.мПредставительФизЛицо  = ПеременныеМодуля.мПредставительФизЛицо;
	
	Возврат флОбновитьПеременныеМодуля;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя, ПеременныеМодуля)

	ИзмененияПроизошли = Ложь;

	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		Возврат Истина;
	КонецЕсли;

	Если ИмяПоказателя = "ПредставительФизЛицо" Тогда
		ПеременныеМодуля.мПредставительФизЛицо = ЗначениеПоказателя;
		ИзмененияПроизошли = Истина;
	КонецЕсли;

	Возврат ИзмененияПроизошли;

КонецФункции

// РазделыОтчетаПриАктивизацииСтроки()
//
&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент) Экспорт
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	// сохраним текущее положение курсора на странице
	Если СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Неопределено Тогда
		СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Новый Структура;
	КонецЕсли;
	ТекущийНомерСтраницы = "_" + Строка(СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	
	КоординатыОбласти = Новый Структура();
	КоординатыОбласти.Вставить("Верх", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Верх);
	КоординатыОбласти.Вставить("Низ", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ);
	КоординатыОбласти.Вставить("Лево", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево);
	КоординатыОбласти.Вставить("Право", Элементы.ТабличныйДокумент.ТекущаяОбласть.Право);
	
	СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц.Вставить(ТекущийНомерСтраницы, КоординатыОбласти);	

	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	//
	//Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	//
	//Элементы.ДобавитьСтраницу.Доступность   = Ложь;
	//Элементы.УдалитьСтраницу.Доступность    = Ложь;
	//Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
	//Элементы.ДобавитьСтроку.Доступность     = Ложь;
	//Элементы.УдалитьСтроку.Доступность      = Ложь;
					
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
																
		КонецЕсли;														
				
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		
		//Элементы.ДобавитьСтраницу.Доступность   = Истина;
		//Элементы.УдалитьСтраницу.Доступность    = Истина;
		//Элементы.УдалитьВсеСтраницы.Доступность = Истина;
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			//
			//Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			//
			//Элементы.УдалитьСтраницу.Доступность = Ложь;
							   			
			//Если Элемент.ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
			//	Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
			//КонецЕсли;
			
		ИначеЕсли Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
			
			//Элементы.УдалитьСтраницу.Доступность    = Ложь;
			//Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если    Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ОтчетПоТруду" Тогда
	
		//Элементы.ДобавитьСтроку.Доступность = Истина;
		//Элементы.УдалитьСтроку.Доступность  = Истина;
		
	КонецЕсли;
	
	// восстановим текущее положение курсора
	ТекущийНомерСтраницы = "_"+Строка(СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	Если СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц.Свойство(ТекущийНомерСтраницы) Тогда
		
		КоординатыОбласти = СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц[ТекущийНомерСтраницы];
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(КоординатыОбласти.Верх, КоординатыОбласти.Лево, КоординатыОбласти.Низ, КоординатыОбласти.Право);	
		
	Иначе	
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1, 1, 1);	
		
	КонецЕсли;
	
КонецПроцедуры // РазделыОтчетаПриАктивизацииСтроки()

&НаКлиенте
Процедура СохранитьОтчет(Команда)
	
	СохранитьНаКлиенте();
	
КонецПроцедуры

// СохранитьНаКлиенте()
//
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт
	
	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, Автосохранение) Тогда
		Возврат;
	КонецЕсли;
	
	ПодобныйОтчетСуществует = Ложь;
	ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки = Ложь;
	
	РезультатСохранения = ПередСохранением(ПодобныйОтчетСуществует, Автосохранение);
	
	Если ПодобныйОтчетСуществует И Автосохранение Тогда
		Возврат;
	КонецЕсли;
	
	НуженВопросПередСохранением = (ПодобныйОтчетСуществует ИЛИ ОткрытьФормуВопросаПриИзмененииВидаДокументаНомераКорректировки);
	
	Если НуженВопросПередСохранением Тогда
		
		СохранитьНаКлиентеСВопросом(Автосохранение, ВыполняемоеОповещение, ПодобныйОтчетСуществует);
		
	Иначе
		
		ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросом(Автосохранение, ВыполняемоеОповещение, ПодобныйОтчетСуществует)
	
	Если ПодобныйОтчетСуществует Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Сохранить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		ТекстВопроса = НСтр("ru='Отчет уже существует.
|Сохранить отчет с таким же видом?';uk='Звіт вже існує.
|Зберегти звіт з таким же видом?'");
		ДополнительныеПараметры = Новый Структура("Автосохранение, ВыполняемоеОповещение", Автосохранение, ВыполняемоеОповещение);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросСохранитьОтчетСТакимЖеВидомЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , Кнопки.Получить(1).Значение);
		
	Иначе
		
		СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, ВыполняемоеОповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСохранитьОтчетСТакимЖеВидомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Автосохранение = ДополнительныеПараметры.Автосохранение;
	ВыполняемоеОповещение = ДополнительныеПараметры.ВыполняемоеОповещение;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНаКлиентеСВопросомПродолжение(Автосохранение, ВыполняемоеОповещение)
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраняется %1...';uk='Зберігається %1...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Записать);
	РезультатСохранения = Сохранить(Автосохранение);
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПередСохранением(ПодобныйОтчетСуществует, Автосохранение)
	
	Если РегламентированнаяОтчетность.БылиИзмененыКлючевыеРеквизитыОтчета(ЭтаФорма)
		И РегламентированнаяОтчетность.СуществуетДокументСАналогичнымиРеквизитами(ЭтаФорма) Тогда
		
		ПодобныйОтчетСуществует = Истина;
		
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Если ПодобныйОтчетСуществует
		Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Сохранить(Автосохранение);
		
КонецФункции

&НаСервере
Функция Сохранить(Автосохранение = Ложь) Экспорт	
	
	НаимТекРаздела = "ОтчетПоТруду";
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
			
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, Автосохранение, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета 			 = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета 		 = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;

	СтруктураРеквизитовФормы.мСохраненныйДок.ФорматВыгрузки = "Автоматически";
	
	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// вствляем флажок пересчета страниц
	СписокСохранения.Вставить("ФлПодсчетСтраниц", СтруктураРеквизитовФормы.мСчетчикСтраниц);
	
	СписокСохранения.Вставить("ФлПроверятьСоотношенияПриПечатиИВыгрузки", СтруктураРеквизитовФормы.мПроверятьСоотношенияПриПечатиИВыгрузки);
	
	// вствляем флажок отключения
	СписокСохранения.Вставить("ФлОтклВыборЗначений", СтруктураРеквизитовФормы.мАвтоВыборКодов);

	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	СписокСохранения.Вставить("ЕстьДуплекс", СтруктураРеквизитовФормы.ЕстьДуплекс);

	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1';uk='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));
			Сообщение.Сообщить();
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
	
	Модифицированность = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ТабличныйДокумент";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы <> Неопределено Тогда 
		
		Если ЗавершениеРаботы И Модифицированность Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы <> Неопределено Тогда
		
		Если ЗавершениеРаботы Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("РегламентированнаяОтчетность", "ЕстьДуплекс", СтруктураРеквизитовФормы.ЕстьДуплекс);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЦветЯчеекНаКлиенте() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЦветЯчеекНаСервере() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьЦветЯчеек(Форма)


		
КонецПроцедуры





&НаКлиенте
Процедура ЗаполнениеЗначенийВКвадратикахНаКлиенте(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеЗначенийВКвадратикахНаСервере(Знач ИмяСтраницы) Экспорт

	ЗаполнениеЗначенийВКвадратиках(ЭтаФорма, ИмяСтраницы);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнениеЗначенийВКвадратиках(Форма, Знач ИмяСтраницы)
	
	Возврат;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт
	
	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	// Непосредственно очищаем ячейки табличного документа.
	// Повторно, так как в результате расчета многостраничного многострочного блока заполняются итоговые ячейки, 
	// в арифметике которых есть показатели не из многострочного блока
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаКлиенте(Знач ИмяРаздела) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);

КонецПроцедуры

&НаСервере
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделуНаСервере(Знач ИмяРаздела) Экспорт

	ПеременныеМодуля = Новый Структура;
	
	ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяРаздела, ПеременныеМодуля);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(Знач ИмяРаздела, ПеременныеМодуля)
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", ОбластьИмя = "")
	Перем ТаблицаБлока;
	
	Если Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;
	
	Если (Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
		Возврат; // отключен режим авторасчета
	КонецЕсли;

	П5010_1 = ПолучитьПоказательНаСервере("П5020_1", Форма, "ОтчетПоТруду")
			+ ПолучитьПоказательНаСервере("П5030_1", Форма, "ОтчетПоТруду")
			+ ПолучитьПоказательНаСервере("П5060_1", Форма, "ОтчетПоТруду");
	ЗаполнитьПоказательНаСервере("П5010_1", П5010_1, Форма, "ОтчетПоТруду");
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	
КонецПроцедуры

 // Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;

	мПараметры = Новый Структура;
	мПараметры.Вставить("Автосохранение", Ложь);

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет",		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
	
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
	
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
	
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт", ЗначениеАвторасчета, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим, ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Если РезультатВыбора <> Неопределено Тогда
		КопироватьДанныеФормы(РезультатВыбора, мДеревоВыбранныхСтраниц);
		РегламентированнаяОтчетностьКлиентСервер.ПрорисоватьПодменюПечать(ЭтаФорма);
		Модифицированность = Истина;
					
		флЗначенияИдентичны = Истина;
		
		Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
			
			Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = РезультатВыбора.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
				флЗначенияИдентичны = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			
			#Если ВебКлиент Тогда
				ИзменитьТаблицуВариантовЗаполненияНаСервере();
			#Иначе
				РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			#КонецЕсли	
			
			Расчет(ЭтаФорма);
			
		КонецЕсли;
		
		Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		 ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
			ПослеСменыЕдИзмеренияИТочности();
		КонецЕсли;
		
		// Управляем видимостью страниц основной панели формы
	    РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
		
		Если НЕ флЗначенияИдентичны Тогда
			
			СформироватьДеревоРазделовОтчетаНаКлиенте();
			
			Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
				
				// Пытаемся найти ранее запомненный раздел.
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
				
				Если НЕ НайденнаяСтрока = Неопределено 
					И НЕ НомерСтраницыРазделаОтчета = Неопределено 
					И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
					
					НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
					
				КонецЕсли;
				
				// В случае успешного поиска, устанавливаем курсор на найденный раздел.
				Если НЕ НайденнаяСтрока = Неопределено Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				КонецЕсли;
				
			КонецЕсли;
			
			// обнулим информацию о выделенных областях, так как набор страниц были изменен.
			СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Неопределено;
			
		КонецЕсли;
		
	Иначе
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

&НаСервере
Процедура ПослеСменыЕдИзмеренияИТочности()

	ЗаполнитьПустыеСтруктурыДанных();
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
		
КонецПроцедуры


&НаСервере
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в гривнах точность не может превышать 2 знака';uk='%1: при виведенні сум у гривнях точність не може перевищувати 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах гривен точность не может превышать 3 знака';uk='%1: при виведенні сум в тисячах гривень точність не може перевищувати 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах гривен точность не может превышать 6 знаков';uk='%1: при виведенні сум у мільйонах гривень точність не може перевищувати 6 знаків'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
    	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
		
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры




&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхОтчетПоТруду.Очистить();
	
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	
КонецПроцедуры // ОчиститьНаСервере()


&НаКлиенте
Функция ЗаголовокРегламентированногоОтчета(ДатаНач, ДатаКон, Периодичность = Неопределено) Экспорт
		
	СтрПериодОтчета = ПредставлениеПериода( НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина; Л="+РегламентированнаяОтчетностьКлиентСервер.ПолучитьКодЯзыкаИнтерфейса() );
		
	Если Найти(ЭтаФорма.Заголовок, СтрПериодОтчета) = 0 Тогда
		Возврат ЭтаФорма.Заголовок + " за " + СтрПериодОтчета;
	Иначе
		Возврат ЭтаФорма.Заголовок;
	КонецЕсли;
	
КонецФункции


//&НаСервере
//Функция ЗначениеСуммыЗаполнено(ЗначениеСуммы)
//	
//	Возврат (Окр(ЗначениеСуммы) <> 0)
//	
//КонецФункции

//&НаСервере
//Функция ЭкземплярРазделаПуст(ДеревоВыгрузки, ИДРаздела, Данные, ПоказателиИсключения = Неопределено)
//	
//	Исключения = Новый Структура;
//	Если ПоказателиИсключения <> Неопределено Тогда
//		Исключения = Новый Структура(ПоказателиИсключения);
//	КонецЕсли;
//	
//	РезультатыПоиска = ДеревоВыгрузки.Строки.НайтиСтроки(Новый Структура("Раздел", ИДРаздела), Истина);
//	Для Каждого РезультатПоиска Из РезультатыПоиска Цикл
//		ИДПоказателя = СокрЛП(РезультатПоиска.Ключ);
//		ПоказательЯвляетсяСуммой = (РезультатПоиска.Формат = "N" И РезультатПоиска.МаксРазмерность >= 10 И РезультатПоиска.МинРазмерность = 99999);
//		Если НЕ ЗначениеЗаполнено(ИДПоказателя) ИЛИ Исключения.Свойство(ИДПоказателя) Тогда
//			Продолжить;
//		КонецЕсли;
//		Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Данные, ИДПоказателя) И ЗначениеПоказателяЗаполнено(Данные[ИДПоказателя], ПоказательЯвляетсяСуммой) Тогда
//			Возврат Ложь;
//		ИначеЕсли РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Данные, ИДПоказателя + "_1") Тогда
//			Инд = 1;
//			Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Данные, ИДПоказателя + "_" + Формат(Инд, "ЧГ=")) Цикл
//				Если ЗначениеПоказателяЗаполнено(Данные[ИДПоказателя + "_" + Формат(Инд, "ЧГ=")], ПоказательЯвляетсяСуммой) Тогда
//					Возврат Ложь;
//				КонецЕсли;
//				Инд = Инд + 1;
//			КонецЦикла;
//		КонецЕсли;
//	КонецЦикла;
//	Возврат Истина;
//	
//КонецФункции

//&НаСервере
//Функция МногострочнаяЧастьПуста(Данные, СтрПоказатели, СтрПоказателиСуммы = Неопределено)
//	
//	Если ЗначениеЗаполнено(СтрПоказателиСуммы) Тогда
//		ПоказателиСуммы = Новый Структура(СтрПоказателиСуммы);
//	Иначе
//		ПоказателиСуммы = Новый Структура;
//	КонецЕсли;
//	
//	СтруктураПоказателей = Новый Структура(СтрПоказатели);
//	Для Каждого Эл Из СтруктураПоказателей Цикл
//		Инд = 1;
//		Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(Данные, Эл.Ключ + "_" + Формат(Инд, "ЧГ=")) Цикл
//			Если ЗначениеПоказателяЗаполнено(Данные[Эл.Ключ + "_" + Формат(Инд, "ЧГ=")], ПоказателиСуммы.Свойство(Эл.Ключ)) Тогда
//				Возврат Ложь;
//			КонецЕсли;
//			Инд = Инд + 1;
//		КонецЦикла;
//	КонецЦикла;
//	Возврат Истина;
//	
//КонецФункции


//&НаСервере
//Функция ЗначениеПоказателяЗаполнено(ЗначениеПоказателя, ЯвляетсяСуммой)
//	
//	Если ТипЗнч(ЯвляетсяСуммой) = Тип("Булево") Тогда
//		ПоказательЯвляетсяСуммой = ЯвляетсяСуммой;
//	Иначе
//		ПоказательЯвляетсяСуммой = (ЯвляетсяСуммой.Формат = "N" И ЯвляетсяСуммой.МаксРазмерность >= 10 И ЯвляетсяСуммой.МинРазмерность = 99999);
//	КонецЕсли;
//	
//	Возврат ?(ПоказательЯвляетсяСуммой, ЗначениеСуммыЗаполнено(ЗначениеПоказателя), ЗначениеЗаполнено(ЗначениеПоказателя));
//	
//КонецФункции

//&НаСервере
//Функция ВывестиПоказательВXML(Узел, ЗначениеПоказателя)
//	
//	МинШирина = Узел.МинРазмерность;
//	МаксШирина = Узел.МаксРазмерность;
//	
//	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" ИЛИ Узел.Формат = "S" Тогда // учтем оба варианта: кириллицу и латиницу	
//		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
//			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
//		Иначе
//			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
//		КонецЕсли;
//		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр), СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)), ЗначениеПоказателяСтр);
//	ИначеЕсли Узел.Формат = "N" Тогда
//		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
//		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
//			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
//		КонецЕсли;
//		Если Узел.МинРазмерность <> 99999 Тогда
//			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
//		КонецЕсли;
//		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
//	ИначеЕсли Узел.Формат = "gYear" Тогда
//		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
//			Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, "ДФ=гггг"));
//		Иначе
//			Узел.Значение = Прав(СокрЛП(ЗначениеПоказателя), 4);
//		КонецЕсли;
//	КонецЕсли;
//	
//КонецФункции

//&НаСервере
//Функция УзелПуст(Узел)
//	
//	Для Каждого Стр из Узел.Строки Цикл
//		Если НЕ УзелПуст(Стр) Тогда
//			Возврат Ложь;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Если Узел.Формат = "S" Тогда
//		Возврат Истина;
//		
//	ИначеЕсли Узел.Формат = "N" Тогда
//		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
//		
//	Иначе
//		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
//		
//	КонецЕсли;
//	
//КонецФункции

//&НаСервере
//Функция ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента)
//	
//	Для Каждого Стр Из Узел.Строки Цикл
//		Если Стр.Код = КодЭлемента Тогда
//			Возврат Стр;
//		КонецЕсли;
//	КонецЦикла;
//	
//КонецФункции

//&НаСервере
//Процедура ЗадатьЗначениеЭлемента(Узел, КодЭлемента, Значение)
//	
//	ВывестиПоказательВXML(ПолучитьПодчиненныйЭлемент(Узел, КодЭлемента), Значение);
//	
//КонецПроцедуры

//&НаСервере
//Функция СкопироватьУзел(Родитель, Узел)
//	
//	// находим узел в максимальным индексом с тем же кодом, что и у копируемого и добавляем его сразу после найденного элемента
//	СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
//	МаксИндекс = -1;
//	Для Каждого СтрокаСТемЖеКодом Из СтрокиСТемЖеКодом Цикл
//		ТекИндекс = Родитель.Строки.Индекс(СтрокаСТемЖеКодом);
//		Если ТекИндекс > МаксИндекс Тогда
//			МаксИндекс = ТекИндекс;
//		КонецЕсли;
//	КонецЦикла;
//	
//	ИндексСоздаваемогоУзла = МаксИндекс + 1;
//	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда // если аналогичный узел не найден или найденный узел - последний
//		НовыйУзел = Родитель.Строки.Добавить();
//	Иначе
//		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
//	КонецЕсли;
//	
//	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
//	Для Каждого Стр из Узел.Строки Цикл
//		СкопироватьУзел(НовыйУзел, Стр);
//	КонецЦикла;
//	Возврат НовыйУзел;
//	
//КонецФункции

//&НаСервере
//Процедура ВыгрузитьСтрокуМногострочнойЧасти(Данные, Узел, НомерСтроки, ПоказателиИсключения = Неопределено)
//	
//	Если ПоказателиИсключения = Неопределено Тогда
//		СтрИсключения = Новый Структура;
//	Иначе
//		СтрИсключения = Новый Структура(ПоказателиИсключения);
//	КонецЕсли;
//	
//	СуффиксТекущейСтроки = "_" + Формат(НомерСтроки, "ЧГ=");
//	
//	СтрокаПустая = Истина;
//	Для Каждого Стр Из Узел.Строки Цикл
//		Если НЕ СтрИсключения.Свойство(Стр.Ключ) И ЗначениеПоказателяЗаполнено(Данные[Стр.Ключ + СуффиксТекущейСтроки], Стр) Тогда
//			СтрокаПустая = Ложь;
//			Прервать;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Если НЕ СтрокаПустая Тогда
//		Для Каждого Стр Из Узел.Строки Цикл
//			ВывестиПоказательВXML(Стр, Данные[Стр.Ключ + СуффиксТекущейСтроки]);
//		КонецЦикла;
//	КонецЕсли;
//	
//КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт
	
	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоддержкаДуплекса(Команда)
	
	// инвертируем пометку и значение
	ЕстьДуплекс = СтруктураРеквизитовФормы.ЕстьДуплекс;
	
	СтруктураРеквизитовФормы.Вставить("ЕстьДуплекс", НЕ ЕстьДуплекс);
	Элементы.ЕстьДуплекс.Пометка = НЕ ЕстьДуплекс;
		
КонецПроцедуры

&НаКлиенте
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено, НеИзФормыОтчета = Ложь) Экспорт
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и%1задать его в качестве используемого по умолчанию!';uk='Перед формуванням друкованих форм необхідно визначити в системі принтер%1задати його в якості використовуваного за замовчуванням!'"), Символы.ПС));				
		Возврат;
	КонецЕсли;
              	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...';uk='%1. Формується друкована форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
				
	ПечатьНаСервере(ВидПечати, ЧтоИскать);
		
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

КонецПроцедуры // Печать()

&НаСервере
Процедура ПечатьНаСервере(ВидПечати, ЧтоИскать = Неопределено);
				
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
				
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	ОбщиеРеквизитыРазделов = Новый Структура();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЕстьДуплекс",        СтруктураРеквизитовФормы.ЕстьДуплекс);
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
КонецПроцедуры // ПечатьНаСервере()

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		СохрАктивнаяСтраница = ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница;
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = СохрАктивнаяСтраница;
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
    		
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()

&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов)
		
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
КонецПроцедуры // ВывестиНаПечатьЛист()

//&НаСервере
//Функция РазобратьСтрокуФормата(Знач СтрокаФормата)
//	
//	ЗначенияПараметров = Новый Соответствие;
//	Пока Найти(СтрокаФормата, ";") <> 0 Цикл
//		ВхождениеРазделителя = Найти(СтрокаФормата, ";");
//		ДоРазделителя = Лев(СтрокаФормата, ВхождениеРазделителя - 1);
//		ВхождениеРавно = Найти(ДоРазделителя, "=");
//		Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
//			ЗначенияПараметров.Вставить(Лев(ДоРазделителя, ВхождениеРавно - 1), Сред(ДоРазделителя, ВхождениеРавно + 1));
//		КонецЕсли;
//		СтрокаФормата = Сред(СтрокаФормата, ВхождениеРазделителя + 1);
//	КонецЦикла;
//	ВхождениеРавно = Найти(СтрокаФормата, "=");
//	Если ВхождениеРавно <> 0 И ВхождениеРавно <> 1 Тогда
//		ЗначенияПараметров.Вставить(Лев(СтрокаФормата, ВхождениеРавно - 1), Сред(СтрокаФормата, ВхождениеРавно + 1));
//	КонецЕсли;
//	Возврат ЗначенияПараметров;
//	
//КонецФункции

//&НаСервере
//Функция СобратьСтрокуФормата(ПараметрыФормата)
//	
//	СтрокаФормата = "";
//	Для Каждого Параметр Из ПараметрыФормата Цикл
//		СтрокаФормата = СтрокаФормата + "; " + Параметр.Ключ + "=" + Параметр.Значение;
//	КонецЦикла;
//	Если НЕ ПустаяСтрока(СтрокаФормата) Тогда
//		СтрокаФормата = Сред(СтрокаФормата, 3);
//	КонецЕсли;
//	Возврат СтрокаФормата;
//	
//КонецФункции
      
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Найти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
		
	ВнешнийСтр = НСтр("ru='- внешний отчет';uk='- зовнішній звіт'");
	Заголовок = Заголовок + ?(Найти(ЭтаФорма.ИмяФормы, "Внешний") > 0, ВнешнийСтр, "");

	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если Найти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	

КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	ПараметрыЗаполненияЗвит1С = Неопределено;
	ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С);
	
	ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьАвто()

&НаКлиенте
Процедура ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С)
    Перем Ст8, Ст23;
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С) Экспорт
	
	ОчиститьНаСервере();
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	Заполнить(ПараметрыЗаполненияЗвит1С);
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;	
	
КонецПроцедуры

&НаСервере
Процедура Заполнить(ПараметрыЗаполненияЗвит1С)
	
	Запрос = Новый Запрос;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаНач", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Если СтруктураРеквизитовФормы.ЗарплатаКадрыРасширенная Тогда
		Запрос.УстановитьПараметр("ДатаКон", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Иначе	
		Запрос.УстановитьПараметр("ДатаКон", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета + 1);
	КонецЕсли;	
	Запрос.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
	Запрос.Параметры.Вставить("ДнейВМесяце", День(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Если СтруктураРеквизитовФормы.ЗарплатаКадрыРасширенная Тогда
		ТекстНеполноеРабочееВремя = "	СотрудникиОрганизации.ДоляНеполногоРабочегоВремени КАК ДоляНеполногоРабочегоВремени,"; 
		ТекстЗапросаДоговорыГПХ = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
			|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо
			|ПОМЕСТИТЬ ВТДоговорыГПХ
			|ИЗ
			|	&ТаблицаКадровыеДанныеСотрудников КАК СотрудникиОрганизации
			|
			|ГДЕ
			|	СотрудникиОрганизации.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник,
			|	ФизическоеЛицо
			|";

	Иначе
		ТекстНеполноеРабочееВремя = "";
		ТекстЗапросаДоговорыГПХ = "";
	КонецЕсли;	

	Если СтруктураРеквизитовФормы.ЗарплатаКадрыРасширенная Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УчетРабочегоВремени");
		ПараметрыЗаполнения = Модуль.ПараметрыДляЗапросВТДанныеУчетаВремениИСостоянийСотрудников();
		
		ПараметрыЗаполнения.ИмяВТСотрудники = "ВТСотрудникиОрганизацииОсновныеИВнутренниеСовместители";
		ПараметрыЗаполнения.ИмяВТРезультат = "ВТДанныеУчетаВремениИСостоянийСотрудников";
		ПараметрыЗаполнения.РассчитыватьПлановоеВремя = Ложь;
		ПараметрыЗаполнения.Организация  = СтруктураРеквизитовФормы.Организация;
		ПараметрыЗаполнения.ДатаАктуальности  = КонецМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ПараметрыЗаполнения.ДатаНачала = НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ПараметрыЗаполнения.ДатаОкончания = КонецКвартала(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ПараметрыЗаполнения.МесяцДатаНачала = НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ПараметрыЗаполнения.МесяцДатаОкончания = КонецКвартала(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ПараметрыЗаполнения.ПолучатьУжеРассчитанныеДанные = Ложь;
		ПараметрыЗаполнения.ПолучатьУсловияТрудаИТерритории = Ложь;
		
		Модуль.СоздатьВТДанныеУчетаВремениИСостоянийСотрудников(Запрос.МенеджерВременныхТаблиц, Истина, ПараметрыЗаполнения);
	КонецЕсли;

	РасчетПоказателейКоличестваРаботников(); // ИНАГРО ++
	//Раздел II Использование рабочего времени штатных работников
	РасчетИспользованиеРабочегоВремениШтатныхРаботников(МенеджерВременныхТаблиц);
	
	//Расчет показателей раздела III состав ФОТ и прочих выплат
	РасчетФОТиПрочихВыплат(МенеджерВременныхТаблиц); 
 	
	// Расчет показателей раздела V
	РасчетКоличестваИФОПКатегорийРаботников(МенеджерВременныхТаблиц); 

	ДатаПрошлогоГода = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12);
	ПараметрыСредняяЧисленность = Новый Структура;
	ПараметрыСредняяЧисленность.Вставить("ВидПериода", "КВАРТАЛСНАЧАЛАГОДА");
	ПараметрыСредняяЧисленность.Вставить("НачалоПериода", НачалоГода(ДатаПрошлогоГода));
	ПараметрыСредняяЧисленность.Вставить("КонецПериода", КонецГода(ДатаПрошлогоГода));
	ПараметрыСредняяЧисленность.Вставить("ВидСредней", "ССЧ");
	ПараметрыСредняяЧисленность.Вставить("ОтборШтат", Ложь);
	ПараметрыСредняяЧисленность.Вставить("ОтборПол", Неопределено);
	ПараметрыСредняяЧисленность.Вставить("ОтборИнвалиды", Ложь);
	ПараметрыСредняяЧисленность.Вставить("ОтборНеИнвалиды", Ложь);
	ПараметрыСредняяЧисленность.Вставить("ОтборПенсионеры", Ложь);
	ПараметрыСредняяЧисленность.Вставить("ОтборНеПенсионеры", Ложь);
	ПараметрыСредняяЧисленность.Вставить("ОтборИностранцы", Ложь);
	ПараметрыСредняяЧисленность.Вставить("ОтборДопГарантии", Ложь);
	
КонецПроцедуры

&НаСервере
Функция СформироватьМассивЛиц(ИмяМассиваИсх,ТолькоЖенщины)
	ИмяМассиваРезультат = Новый Массив;
	Для каждого эл из ИмяМассиваИсх Цикл
		Если ТолькоЖенщины Тогда
			Если эл.Сотрудник.ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
				ИмяМассиваРезультат.Добавить(эл.Сотрудник);
			КонецЕсли;
		Иначе
			ИмяМассиваРезультат.Добавить(эл.Сотрудник);
		КонецЕсли
	КонецЦикла;	
	Возврат(ИмяМассиваРезультат);
КонецФункции

&НаСервере
Функция СформироватьМассивФизЛиц(ИмяМассиваИсх,ТолькоЖенщины)
	ИмяМассиваРезультат = Новый Массив;
	Для каждого эл из ИмяМассиваИсх Цикл
		Если ТолькоЖенщины Тогда
			Если эл.Сотрудник.ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
				ИмяМассиваРезультат.Добавить(эл.ФизическоеЛицо);
			КонецЕсли;
		Иначе
			ИмяМассиваРезультат.Добавить(эл.ФизическоеЛицо);
		КонецЕсли
	КонецЦикла;	
	Возврат(ИмяМассиваРезультат);
КонецФункции

&НаСервере
Функция ОбработатьТаблицу(РезультатЗапроса)
	Если Не РезультатЗапроса.Пустой() Тогда
		ТаблицаНачислено = РезультатЗапроса.Выгрузить();
		Если ТаблицаНачислено[0].Результат<>NULL Тогда
			Сумма = ТаблицаНачислено[0].Результат;	
		Иначе
			Сумма = 0;	
		КонецЕсли;
	КонецЕсли; 
	Возврат (Сумма);
КонецФункции

&НаСервере
Процедура СформироватьМассивыРазличныхКатегорийРаботников(МенеджерВременныхТаблиц)
	Если СтруктураРеквизитовФормы.ЗарплатаКадрыРасширенная Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	СотрудникиОрганизации.Сотрудник КАК Сотрудник,
		|	СотрудникиОрганизации.ВидЗанятости КАК ВидЗанятости,
		|	СотрудникиОрганизации.ФизическоеЛицо КАК ФизическоеЛицо,
		|	СотрудникиОрганизации.Пол КАК Пол
		|ИЗ
		|	ВТСотрудникиОрганизации КАК СотрудникиОрганизации
		|ГДЕ
		|	НЕ СотрудникиОрганизации.Сотрудник В
		|				(ВЫБРАТЬ
		|					ВТСотрудникиОрганизацииУволенные.Сотрудник
		|				ИЗ
		|					ВТСотрудникиОрганизацииУволенные КАК ВТСотрудникиОрганизацииУволенные)";
		ЗапросПоШтатнымСовм = Новый Запрос();
		ЗапросПоШтатнымСовм.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ЗапросПоШтатнымСовм.Текст = ТекстЗапроса;
		ТаблицаШтатныхСовместителей = ЗапросПоШтатнымСовм.Выполнить().Выгрузить();
                                                                                                                                                                 
	Иначе	
		//ТекстЗапроса = "
		//|ВЫБРАТЬ  РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		//|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		//|	РаботникиОрганизаций.ВидЗанятости КАК ВидЗанятости,
		//|	РаботникиОрганизаций.ФизическоеЛицо  КАК ФизическоеЛицо,
		//|	РаботникиОрганизаций.ФизическоеЛицо.Пол  КАК Пол
		//|ИЗ
		//|	РегистрСведений.КадроваяИсторияСотрудников	КАК РаботникиОрганизаций
		//|ГДЕ
		//|	  РаботникиОрганизаций.Период МЕЖДУ &ДатаНач И &ДатаКон
		//|   И РаботникиОрганизаций.Организация = &Организация
		//|   И РаботникиОрганизаций.ВидСобытия <> &Увольнение
		//|
		//|ОБЪЕДИНИТЬ 
		//|
		//|ВЫБРАТЬ
		//|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		//|	РаботникиОрганизаций.ВидЗанятости КАК ВидЗанятости,
		//|	РаботникиОрганизаций.ФизическоеЛицо  КАК ФизическоеЛицо,
		//|	РаботникиОрганизаций.ФизическоеЛицо.Пол  КАК Пол
		//|ИЗ
		//|	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(&ДатаНач,Организация = &Организация) КАК РаботникиОрганизаций
		//|ГДЕ
		//|   РаботникиОрганизаций.ВидСобытия <> &Увольнение
		//|";
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
           |	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
           |	РаботникиОрганизаций.Сотрудник.ИНАГРО_ВидЗанятости КАК ВидЗанятости,
           |	РаботникиОрганизаций.Сотрудник.ФизическоеЛицо.Пол КАК Пол,
           |	РаботникиОрганизаций.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо
           |ИЗ
           |	РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизаций
           |ГДЕ
           |	РаботникиОрганизаций.Период МЕЖДУ &ДатаНач И &ДатаКон
           |	И РаботникиОрганизаций.Организация = &Организация
           |	И РаботникиОрганизаций.ЗанимаемыхСтавок > 0
           |
           |ОБЪЕДИНИТЬ
           |
           |ВЫБРАТЬ
           |	РаботникиОрганизаций.Сотрудник,
           |	РаботникиОрганизаций.Сотрудник.ИНАГРО_ВидЗанятости,
           |	РаботникиОрганизаций.Сотрудник.ФизическоеЛицо.Пол,
           |	РаботникиОрганизаций.Сотрудник.ФизическоеЛицо
           |ИЗ
           |	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаНач, Организация = &Организация) КАК РаботникиОрганизаций
           |ГДЕ
           |	РаботникиОрганизаций.ЗанимаемыхСтавок > 0";

		//ИНАГРО -- 
				

		
		//получаем число женщин штатного состава и число внешних совместителей за период
		ЗапросПоШтатнымСовм = Новый Запрос();
		ЗапросПоШтатнымСовм.Текст = ТекстЗапроса;
		ЗапросПоШтатнымСовм.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
		//ЗапросПоШтатнымСовм.УстановитьПараметр("ДатаНач",НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
		ЗапросПоШтатнымСовм.УстановитьПараметр("ДатаНач",СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ЗапросПоШтатнымСовм.УстановитьПараметр("ДатаКон",СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		//ЗапросПоШтатнымСовм.УстановитьПараметр("Увольнение", Перечисления.ВидыКадровыхСобытий.Увольнение);

		ТаблицаШтатныхСовместителей = ЗапросПоШтатнымСовм.Выполнить().Выгрузить();
	КонецЕсли;
	СтрокиШтатных 		= ТаблицаШтатныхСовместителей.НайтиСтроки(Новый Структура("ВидЗанятости",Перечисления.ВидыЗанятости.ОсновноеМестоРаботы));
	СтруктураРеквизитовФормы.МассивЖенщин 		= СформироватьМассивЛиц(СтрокиШтатных,Истина);
	СтруктураРеквизитовФормы.МассивФизЛицЖенщин = СформироватьМассивФизЛиц(СтрокиШтатных,Истина);
	
	СтрокиСовместителей = ТаблицаШтатныхСовместителей.НайтиСтроки(Новый Структура("ВидЗанятости",Перечисления.ВидыЗанятости.Совместительство));
	СтруктураРеквизитовФормы.МассивСовм 	  = СформироватьМассивЛиц(СтрокиСовместителей,Ложь);
	СтруктураРеквизитовФормы.МассивФизЛицСовм = СформироватьМассивФизЛиц(СтрокиСовместителей,Ложь);
	
	// получим список штатников только за последний месяц
	ЗапросПоШтатнымСовм.УстановитьПараметр("ДатаНач",НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	ЗапросПоШтатнымСовм.УстановитьПараметр("ДатаКон",СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ТаблицаШтатныхСовместителей = ЗапросПоШтатнымСовм.Выполнить().Выгрузить();
	СтрокиШтатных 		= ТаблицаШтатныхСовместителей.НайтиСтроки(Новый Структура("ВидЗанятости",Перечисления.ВидыЗанятости.ОсновноеМестоРаботы));
	СтруктураРеквизитовФормы.МассивШтПоследнийМес       = СформироватьМассивЛиц(СтрокиШтатных,Ложь);
	СтруктураРеквизитовФормы.МассивФизЛицШтПоследнийМес = СформироватьМассивФизЛиц(СтрокиШтатных,Ложь);
	
	//ИНАГРО ++ 
	// получим список работников по ГПХ
	ТекстЗапросаГПХ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Сотрудник.ФизическоеЛицо КАК Сотрудник
	|ИЗ
	|	Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом КАК Работники
	|ГДЕ
	|	  Работники.Проведен
	|	И Работники.ДатаНачала <= &парамКонец
	|	И Работники.ДатаОкончания >= &парамНачало
	|	И Работники.Организация = &Организация";
	
	ЗапросПоГПХ = Новый Запрос();
	ЗапросПоГПХ.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
	ЗапросПоГПХ.УстановитьПараметр("парамНачало", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ЗапросПоГПХ.УстановитьПараметр("парамКонец",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ЗапросПоГПХ.Текст = ТекстЗапросаГПХ; 
	ТаблицаГПХ = ЗапросПоГПХ.Выполнить().Выгрузить();
	
	СтруктураРеквизитовФормы.МассивГПХ = СформироватьМассивЛиц(ТаблицаГПХ,Ложь);
	//ИНАГРО -- 
	
КонецПроцедуры	
     

&НаСервере
Процедура РасчетПоказателейКоличестваРаботников()
	
	//получения числа принятых/уволенных
	ЗапросПриемУвольнение = Новый Запрос;
	ЗапросПриемУвольнение.УстановитьПараметр("ДатаНач", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ЗапросПриемУвольнение.УстановитьПараметр("ДатаКон", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета + 1);
	ЗапросПриемУвольнение.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
	ЗапросПриемУвольнение.УстановитьПараметр("ОсновноеМестоРаботы", Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
	ЗапросПриемУвольнение.УстановитьПараметр("ПриемНаРаботу", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	ЗапросПриемУвольнение.УстановитьПараметр("Увольнение",Перечисления.ПричиныИзмененияСостояния.Увольнение);
	
	ЗапросПриемУвольнение.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ Различные                     
	|РаботникиОрганизаций.Сотрудник							КАК Сотрудник,
	|РаботникиОрганизаций.Сотрудник.ФизическоеЛицо.Пол      КАК Пол,
	|РаботникиОрганизаций.ПринятНаНовоеРабочееМесто 		КАК ПринятНаНовоеРабочееМесто,
	|РаботникиОрганизаций.ПричинаИзмененияСостояния 		КАК ПричинаИзмененияСостояния
	|
	|ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ РаботникиОрганизаций.Период МЕЖДУ &ДатаНач И &ДатаКон 
	|И (РаботникиОрганизаций.Организация = &Организация)
	|И (РаботникиОрганизаций.Сотрудник.ИНАГРО_ВидЗанятости = &ОсновноеМестоРаботы)
	|И (РаботникиОрганизаций.ПричинаИзмененияСостояния = &ПриемНаРаботу    ИЛИ РаботникиОрганизаций.ПричинаИзмененияСостояния = &Увольнение)
	|И НЕ (РаботникиОрганизаций.ПричинаИзмененияСостояния = &ПриемНаРаботу И   РаботникиОрганизаций.Период = &ДатаКон)
	|И НЕ (РаботникиОрганизаций.ПричинаИзмененияСостояния = &Увольнение    И   РаботникиОрганизаций.Период = &ДатаНач)";
	//ИНАГРО -- 
	
	ТаблицаПриемУвольнение = ЗапросПриемУвольнение.Выполнить().Выгрузить();
	
	ПараметрыОтбора = Новый Структура();
	// принятые все
	ПараметрыОтбора.Вставить("ПричинаИзмененияСостояния",Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	СтруктураДанныхОтчетПоТруду["П3020_1"] = ТаблицаПриемУвольнение.НайтиСтроки(ПараметрыОтбора).Количество();
	
	// принятые женщины
	ПараметрыОтбора.Вставить("Пол",Перечисления.ПолФизическогоЛица.Женский);
	СтруктураДанныхОтчетПоТруду["П3020_2"] = ТаблицаПриемУвольнение.НайтиСтроки(ПараметрыОтбора).Количество();
	
	// уволенные женщины
	ПараметрыОтбора.Вставить("ПричинаИзмененияСостояния",Перечисления.ПричиныИзмененияСостояния.Увольнение);
	СтруктураДанныхОтчетПоТруду["П3040_2"] = ТаблицаПриемУвольнение.НайтиСтроки(ПараметрыОтбора).Количество();

	// уволенные все
	ПараметрыОтбора.Удалить("Пол");
	СтруктураДанныхОтчетПоТруду["П3040_1"] = ТаблицаПриемУвольнение.НайтиСтроки(ПараметрыОтбора).Количество();

	//число штатных на конец месяца	
	ЗапросПоШтатным = Новый Запрос();
	ЗапросПоШтатным.УстановитьПараметр("Организация",         СтруктураРеквизитовФормы.Организация);
	ЗапросПоШтатным.УстановитьПараметр("ОсновноеМестоРаботы", Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
	ЗапросПоШтатным.УстановитьПараметр("ДатаКон",  			  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ЗапросПоШтатным.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	КОЛИЧЕСТВО(Сотрудник) КАК КоличествоВсего,
	|	СУММА(ВЫБОР КОГДА Сотрудник.ФизическоеЛицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК КоличествоЖенщин
	|
	|ИЗ
	|	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаКон, Организация = &Организация 
	|																  И Сотрудник.ИНАГРО_ВидЗанятости = &ОсновноеМестоРаботы)	КАК РаботникиОрганизаций
	|
	|ГДЕ 	
	|	ЗанимаемыхСтавок > 0
	|";
	//ИНАГРО -- 
	Результат = ЗапросПоШтатным.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		СтруктураДанныхОтчетПоТруду["П3070_1"] = Результат.КоличествоВсего;
		СтруктураДанныхОтчетПоТруду["П3070_2"] = Результат.КоличествоЖенщин;		
	КонецЕсли;
	//ИНАГРО ++ 
	// состояния работников организаций
	ЗапросПоСостоянию = Новый Запрос();
	ЗапросПоСостоянию.УстановитьПараметр("Организация",         		СтруктураРеквизитовФормы.Организация);
	ЗапросПоСостоянию.УстановитьПараметр("ОтпускПоБеременностиИРодам", 	Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам);
	ЗапросПоСостоянию.УстановитьПараметр("ОтпускПоУходуЗаРебенком", 	Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенкомДо3Лет);
	ЗапросПоСостоянию.УстановитьПараметр("ОсновноеМестоРаботы", 	    Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
	ЗапросПоСостоянию.УстановитьПараметр("ДатаКон",  			  		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);

	ЗапросПоСостоянию.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВЫБОР КОГДА Состояние = &ОтпускПоБеременностиИРодам 												   ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК КоличествоДекретные,
	|	СУММА(ВЫБОР КОГДА Состояние = &ОтпускПоУходуЗаРебенком ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК КоличествоОтпускВсего,
	|	СУММА(ВЫБОР КОГДА Состояние = &ОтпускПоУходуЗаРебенком 
	|					И Сотрудник.ФизическоеЛицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский) 			   	   ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК КоличествоОтпускЖенщин
	|
	|ИЗ
	|	РегистрСведений.ИНАГРО_СостояниеРаботниковОрганизаций.СрезПоследних(&ДатаКон, Организация = &Организация) КАК Состояние 
	|ГДЕ  Сотрудник.ИНАГРО_ВидЗанятости = &ОсновноеМестоРаботы
	|   И (Состояние = &ОтпускПоБеременностиИРодам ИЛИ Состояние = &ОтпускПоУходуЗаРебенком)
	|";
	
	Результат = ЗапросПоСостоянию.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		СтруктураДанныхОтчетПоТруду["П3090_2"] = Результат.КоличествоДекретные;
		СтруктураДанныхОтчетПоТруду["П3100_1"] = Результат.КоличествоОтпускВсего;
		СтруктураДанныхОтчетПоТруду["П3100_2"] = Результат.КоличествоОтпускЖенщин;	
	КонецЕсли;
	//ИНАГРО -- 
КонецПроцедуры	

&НаСервере
Процедура РасчетИспользованиеРабочегоВремениШтатныхРаботников(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;

	Если СтруктураРеквизитовФормы.ЗарплатаКадрыРасширенная Тогда
		
		СтрокиДекларации = Справочники.СтатьиНалоговыхДеклараций;

		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДанныеУчетаВремениПоСостояниям.Сотрудник КАК Сотрудник,
		|	СУММА(ДанныеУчетаВремениПоСостояниям.Часы) КАК КвоЧасов
		|ПОМЕСТИТЬ ВТДанныеУчетаВремениПоСостояниямЗабастовка
		|ИЗ
		|	ВТДанныеУчетаВремениПоСостояниям КАК ДанныеУчетаВремениПоСостояниям
		|ГДЕ
		|	ДанныеУчетаВремениПоСостояниям.ВидУчетаВремени = ЗНАЧЕНИЕ(Справочник.ВидыИспользованияРабочегоВремени.Забастовка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеУчетаВремениПоСостояниям.Сотрудник
		|";
		Запрос.Выполнить();
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ДанныеУчетаВремениПоСостояниямЗабастовка.Сотрудник КАК Сотрудник,
		|	СУММА(ДанныеУчетаВремениПоСостояниямЗабастовка.КвоЧасов) КАК КвоЧасов,
		|	ЗНАЧЕНИЕ(Справочник.СтатьиНалоговыхДеклараций.ОтчетОбИспользованииРабочегоВремени_НеОтработаноМасовыйНеВыход) КАК СтатьяДекларации
		|ИЗ
		|	ВТДанныеУчетаВремениПоСостояниямЗабастовка КАК ДанныеУчетаВремениПоСостояниямЗабастовка
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеУчетаВремениПоСостояниямЗабастовка.Сотрудник";
		Запрос.Выполнить();
		РезультатЗапроса = Запрос.Выполнить();
		ТаблицаРезультатов = РезультатЗапроса.Выгрузить();
		Если Не РезультатЗапроса.Пустой() Тогда
			НужнаяСтатья = СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_НеОтработаноМасовыйНеВыход;
			РасчетПоСтатьеРаздел2(ТаблицаРезультатов, НужнаяСтатья,"П4100_1", "П4100_2"); 
		КонецЕсли

	Иначе
			
			
		//ИмяРегистра = "Начисления"; 
		//
		//УсловиеПериод = "ДатаНачала";
		ИмяРегистра = "ИНАГРО_Начисления";
		УсловиеПериод = "ПериодДействия";		
		
		СтрокиДекларации = Справочники.СтатьиНалоговыхДеклараций;
		
		Запрос.Текст = "ВЫБРАТЬ  РАЗРЕШЕННЫЕ
		|	ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.ВидИспользованияРабочегоВремени КАК СтатьяДекларации,  // ИНАГРО ++
		|	ОсновныеНачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник,
		|	СУММА(ВЫБОР
		|				КОГДА ОсновныеНачисленияРаботниковОрганизации.ОтработаноЧасов = 0
		|						ТОГДА ОсновныеНачисленияРаботниковОрганизации.НормаЧасов
		|				ИНАЧЕ ОсновныеНачисленияРаботниковОрганизации.ОтработаноЧасов
		|				КОНЕЦ)  КАК КвоЧасов
		|ИЗ РегистрРасчета." + ИмяРегистра + " КАК ОсновныеНачисленияРаботниковОрганизации
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(
		//|				&НачалоПериода,
		//|				ВидЗанятости = &ОсновноеМестоРаботы
		//|					ИЛИ ВидЗанятости = &ВнутреннееСовместительство
		//|					И Организация = &парамОрганизация) КАК КадроваяИсторияСотрудниковСрезПоследних
		//|		ПО ОсновныеНачисленияРаботниковОрганизации.Сотрудник = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
		|ГДЕ
		|	ОсновныеНачисленияРаботниковОрганизации." + УсловиеПериод + " МЕЖДУ &НачалоПериода И &КонецПериода
		|	И ОсновныеНачисленияРаботниковОрганизации.Организация = &парамОрганизация
		|	И (    ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ИНАГРО_ВидЗанятости = &ОсновноеМестоРаботы
		|      ИЛИ ОсновныеНачисленияРаботниковОрганизации.Сотрудник.ИНАГРО_ВидЗанятости = &ВнутреннееСовместительство)
		|	И ОсновныеНачисленияРаботниковОрганизации.Активность
		|
		|СГРУППИРОВАТЬ ПО
		|	ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.ВидИспользованияРабочегоВремени,
		|	ОсновныеНачисленияРаботниковОрганизации.Сотрудник";
		
		//Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета));
		Запрос.УстановитьПараметр("НачалоПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		Запрос.УстановитьПараметр("КонецПериода" ,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		Запрос.УстановитьПараметр("парамОрганизация",  СтруктураРеквизитовФормы.Организация);
		Запрос.УстановитьПараметр("ОсновноеМестоРаботы",Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
		Запрос.УстановитьПараметр("ВнутреннееСовместительство",Перечисления.ВидыЗанятости.ВнутреннееСовместительство);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ТаблицаРезультатов = РезультатЗапроса.Выгрузить();
			
			НужнаяСтатья = СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_НеОтработаноПростои;
			РасчетПоСтатьеРаздел2(ТаблицаРезультатов, НужнаяСтатья,"П4080_1", "П4080_2"); 
			
			
			НужнаяСтатья = СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_НеОтработаноНеявкаСвязаннаяСПереводомНаСокращенныйГрафик;
			РасчетПоСтатьеРаздел2(ТаблицаРезультатов, НужнаяСтатья,"П4090_1", "П4090_2"); 
			
			
			НужнаяСтатья = СтрокиДекларации.ОтчетОбИспользованииРабочегоВремени_НеОтработаноМасовыйНеВыход;
			РасчетПоСтатьеРаздел2(ТаблицаРезультатов, НужнаяСтатья,"П4100_1", "П4100_2"); 
			
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура РасчетПоСтатьеРаздел2(ТаблицаРезультатов, СтатьяПоиска, ИмяПоказателяГрафыКвоЧасов="",ИмяПоказателяГрафыКвоРаботников="")
	
	спРаботники = Новый Массив();
	
	ПоказательКвоЧасов = 0;
	ПоказательКвоРаботников = 0;
	Если ТипЗнч(СтатьяПоиска) = Тип("Массив") Тогда
	
		МассивСтатей = СтатьяПоиска;	
		
	Иначе
		
		МассивСтатей = Новый Массив();
		МассивСтатей.Добавить(СтатьяПоиска);
		
	КонецЕсли;
	
	Для каждого ТекСтатьяПоиска Из МассивСтатей Цикл
	
		НайденныеСтроки = ТаблицаРезультатов.НайтиСтроки(Новый Структура("СтатьяДекларации", ТекСтатьяПоиска));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для каждого СтрокаТЗ Из НайденныеСтроки Цикл
				Если ИмяПоказателяГрафыКвоЧасов<>"" Тогда
					ПоказательКвоЧасов = ПоказательКвоЧасов+СтрокаТЗ.КвоЧасов;
				КонецЕсли;
				Если ИмяПоказателяГрафыКвоРаботников<>"" Тогда
					Если спРаботники.Найти(СтрокаТЗ.Сотрудник)= Неопределено Тогда
						спРаботники.Добавить(СтрокаТЗ.Сотрудник);
						ПоказательКвоРаботников = ПоказательКвоРаботников+1;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;		
	
	КонецЦикла;
	
	Если ИмяПоказателяГрафыКвоЧасов<>"" Тогда
		СтруктураДанныхОтчетПоТруду[ИмяПоказателяГрафыКвоЧасов] = СтруктураДанныхОтчетПоТруду[ИмяПоказателяГрафыКвоЧасов] + ПоказательКвоЧасов;
	КонецЕсли;
	Если ИмяПоказателяГрафыКвоРаботников<>"" Тогда
		СтруктураДанныхОтчетПоТруду[ИмяПоказателяГрафыКвоРаботников] = СтруктураДанныхОтчетПоТруду[ИмяПоказателяГрафыКвоРаботников] + ПоказательКвоРаботников;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура  РасчетФОТиПрочихВыплат(МенеджерВременныхТаблиц)
	
	//ИНАГРО ++
	//ИмяРегистра = "Начисления";
	//УсловиеПериод = "ДатаНачала";
	ИмяРегистра = "ИНАГРО_Начисления";
	УсловиеПериод = "ПериодДействия";
	
	
	СтрокиДекларации = Справочники.СтатьиНалоговыхДеклараций;
	Если СтруктураРеквизитовФормы.ЗарплатаКадрыРасширенная Тогда
		ТекстЗапроса =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                |	СУММА(Начисления.СуммаОборот) КАК Сумма,
		                |	Начисления.НачислениеУдержание.Отчет1ПВПоказателиВидовОплатыТруда КАК СтатьяДекларации
		                |ИЗ
		                |	РегистрНакопления.НачисленияУдержанияПоСотрудникам.Обороты(
		                |			&НачалоПериода,
		                |			&КонецПериода,
		                |			,
		                |			Организация = &парамОрганизация
		                |				И НачислениеУдержание ССЫЛКА ПланВидовРасчета.Начисления) КАК Начисления
		                |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизацииОсновныеИВнутренниеСовместители КАК КадроваяИсторияСотрудниковСрезПоследних
		                |		ПО Начисления.Сотрудник = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
		                |
		                |СГРУППИРОВАТЬ ПО
		                |	Начисления.НачислениеУдержание.Отчет1ПВПоказателиВидовОплатыТруда
		                |	";
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("НачалоПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		Запрос.УстановитьПараметр("КонецПериода" , СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		Запрос.УстановитьПараметр("парамОрганизация",  СтруктураРеквизитовФормы.Организация);
	Иначе
		//ТекстЗапроса =  "ВЫБРАТЬ  РАЗРЕШЕННЫЕ
		//			|	СУММА(Начисления.Результат) КАК Сумма,
		//			|	Начисления.ВидРасчета.Отчет1ПВПоказателиВидовОплатыТруда КАК СтатьяДекларации
		//			|ИЗ
		//			|	РегистрРасчета."+ИмяРегистра+" КАК Начисления
		//			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудникиОрганизацииОсновныеИВнутренниеСовместители КАК КадроваяИсторияСотрудниковСрезПоследних
		//			|		ПО Начисления.Сотрудник = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
		//			|ГДЕ
		//			|	  Начисления." + УсловиеПериод + " МЕЖДУ &НачалоПериода И &КонецПериода
		//			|	И Начисления.Организация = &парамОрганизация
		//			|	И Начисления.Активность
		//			|
		//			|СГРУППИРОВАТЬ ПО
		//			|	ВидРасчета.Отчет1ПВПоказателиВидовОплатыТруда";
		
		ТекстЗапроса =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СУММА(Начисления.Результат) КАК Сумма,
			|	Начисления.ВидРасчета.ПоказателиВидовОплатыТруда КАК СтатьяДекларации
			|ИЗ
			|	РегистрРасчета."+ИмяРегистра+" КАК Начисления


			|ГДЕ
			|	  Начисления." + УсловиеПериод + " МЕЖДУ &НачалоПериода И &КонецПериода
			|	И Начисления.Организация = &парамОрганизация
			|	И (    Начисления.Сотрудник.ИНАГРО_ВидЗанятости = &ОсновноеМестоРаботы
			|      ИЛИ Начисления.Сотрудник.ИНАГРО_ВидЗанятости = &ВнутреннееСовместительство)
			|	И Начисления.Активность
			|
			|СГРУППИРОВАТЬ ПО
			|	ВидРасчета.ПоказателиВидовОплатыТруда";
		//ИНАГРО --
		
		Запрос = Новый Запрос ();
		//Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц; 
		Запрос.УстановитьПараметр("НачалоПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		Запрос.УстановитьПараметр("КонецПериода" , СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		Запрос.УстановитьПараметр("парамОрганизация",  СтруктураРеквизитовФормы.Организация);
		Запрос.УстановитьПараметр("ОсновноеМестоРаботы",Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
		Запрос.УстановитьПараметр("ВнутреннееСовместительство",Перечисления.ВидыЗанятости.ВнутреннееСовместительство);
	КонецЕсли;	
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ТаблицаРезультатов = РезультатЗапроса.Выгрузить();
		
		НужнаяСтатья =  СтрокиДекларации.ОтчетПоТруду_ФОТ;
		РасчетПоСтатьеРаздел3(ТаблицаРезультатов, НужнаяСтатья,"П5020_1");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_ФОТ_ДополнЗП;
		РасчетПоСтатьеРаздел3(ТаблицаРезультатов, НужнаяСтатья,"П5030_1");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_НадбавкиКОкладам;
		РасчетПоСтатьеРаздел3(ТаблицаРезультатов, НужнаяСтатья,"П5040_1","П5030_1");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_Премии;
		РасчетПоСтатьеРаздел3(ТаблицаРезультатов, НужнаяСтатья,"П5050_1","П5030_1");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_КомпенНевыплачЗП;
		РасчетПоСтатьеРаздел3(ТаблицаРезультатов, НужнаяСтатья,"П5052_1", "П5030_1"); 
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_КомпенРостЦен;
		РасчетПоСтатьеРаздел3(ТаблицаРезультатов, НужнаяСтатья,"П5051_1", "П5030_1"); 
		
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_ФОТ_Компенсация;
		РасчетПоСтатьеРаздел3(ТаблицаРезультатов, НужнаяСтатья,"П5060_1");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_МатПомощь;
		РасчетПоСтатьеРаздел3(ТаблицаРезультатов, НужнаяСтатья,"П5070_1","П5060_1");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_СоцЛьготы;
		РасчетПоСтатьеРаздел3(ТаблицаРезультатов, НужнаяСтатья,"П5080_1","П5060_1");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_ФОТ_НеотработанноеВремя;
		РасчетПоСтатьеРаздел3(ТаблицаРезультатов, НужнаяСтатья,"П5090_1","П5060_1");
		
		НужнаяСтатья = СтрокиДекларации.ОтчетПоТруду_Отпуск;
		РасчетПоСтатьеРаздел3(ТаблицаРезультатов, НужнаяСтатья,"П5090_1","П5030_1");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасчетПоСтатьеРаздел3(ТаблицаРезультатов, СтатьяПоиска, ИмяПоказателяГрафы="", ИмяПоказателяГрафыИзКоторойЭтаВТомЧисле="")
	
	Перем НайденнаяСтрока, ПоказательГрафы;
	НайденнаяСтрока = ТаблицаРезультатов.Найти (СтатьяПоиска,"СтатьяДекларации" ); 
	Если (НайденнаяСтрока <> Неопределено ) Тогда
		ПоказательГрафы = НайденнаяСтрока.Сумма;
	Иначе
		ПоказательГрафы = 0;
	КонецЕсли;
	СтруктураДанныхОтчетПоТруду[ИмяПоказателяГрафы] = СтруктураДанныхОтчетПоТруду[ИмяПоказателяГрафы] + ПоказательГрафы;
	Если ЗначениеЗаполнено(ИмяПоказателяГрафыИзКоторойЭтаВТомЧисле) Тогда
		СтруктураДанныхОтчетПоТруду[ИмяПоказателяГрафыИзКоторойЭтаВТомЧисле] = СтруктураДанныхОтчетПоТруду[ИмяПоказателяГрафыИзКоторойЭтаВТомЧисле] + ПоказательГрафы;
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервере
Процедура РасчетКоличестваИФОПКатегорийРаботников(МенеджерВременныхТаблиц)	
	
	Если СтруктураРеквизитовФормы.ЗарплатаКадрыРасширенная Тогда
		ТаблЧисленностиССЧ= КадровыйУчет.СреднесписочнаяЧисленностьРаботающих(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета); 
		СтруктураДанныхОтчетПоТруду["П7010_1"] = ТаблЧисленностиССЧ.ЧисленностьЖенщин;
		СтруктураДанныхОтчетПоТруду["П7030_1"] = ТаблЧисленностиССЧ.ЧисленностьВнешнихСовместителей;
		СтруктураДанныхОтчетПоТруду["П7040_1"] = ТаблЧисленностиССЧ.ЧисленностьЧисленностьРаботниковГПХ;
	Иначе
		//ИНАГРО ++ 
		ТаблЧисленностиССЧЖ = ИНАГРО_ПроведениеРасчетов.ПолучитьСреднююЧисленность(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ССЧ", "КВАРТАЛ", СтруктураРеквизитовФормы.Организация, "ЖШТАТ"); 
		СтруктураДанныхОтчетПоТруду["П7010_1"] = ТаблЧисленностиССЧЖ[0].Средняя;
		
		ТаблЧисленностиСовм = ИНАГРО_ПроведениеРасчетов.ПолучитьСреднююЧисленность(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ССЧ", "КВАРТАЛ", СтруктураРеквизитовФормы.Организация, "СОВМ"); 
		СтруктураДанныхОтчетПоТруду["П7030_1"] = ТаблЧисленностиСовм[0].Средняя;
		
		ТаблЧисленностиССЧГПХ = ИНАГРО_ПроведениеРасчетов.ПолучитьСреднююЧисленность(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, "ССЧ", "КВАРТАЛ", СтруктураРеквизитовФормы.Организация, "ГПХ"); 
		СтруктураДанныхОтчетПоТруду["П7040_1"] = ТаблЧисленностиССЧГПХ[0].Средняя;
	КонецЕсли;	

	СформироватьМассивыРазличныхКатегорийРаботников(МенеджерВременныхТаблиц);
	РасчетНачисленийПоКатегориямРаботников(МенеджерВременныхТаблиц);
	
КонецПроцедуры	

     
&НаСервере
Процедура РасчетНачисленийПоКатегориямРаботников(МенеджерВременныхТаблиц)
	Если СтруктураРеквизитовФормы.ЗарплатаКадрыРасширенная Тогда
		СписокКатегорий = Новый Массив;
		СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаОтпуска);
		СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПоСреднемуЗаработку);
		СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаКомандировки);
		СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Премия);
		СписокКатегорий.Добавить(Перечисления.КатегорииНачисленийИНеоплаченногоВремени.ОплатаПростояПоВинеРаботодателя);
		//начисления работников без разбиения - за весь отчетный период
		//ФОТ штатных работников
		ТекстЗапроса =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(Начисления.СуммаОборот) КАК Результат
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам.Обороты(
		|			&НачДата,
		|			&КонДата,
		|			,
		|			Организация = &Организация
		|				И НачислениеУдержание ССЫЛКА ПланВидовРасчета.Начисления
		|				И (НачислениеУдержание.ВключатьВФОТ = ИСТИНА ИЛИ НачислениеУдержание.КатегорияНачисленияИлиНеоплаченногоВремени В (&СписокКатегорий))
		|				И Сотрудник В (&МассЛиц)) КАК Начисления";
		ЗапросНачислено = Новый Запрос();
		ЗапросНачислено.Текст = ТекстЗапроса;
		ЗапросНачислено.УстановитьПараметр("НачДата", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ЗапросНачислено.УстановитьПараметр("КонДата" ,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ЗапросНачислено.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
		ЗапросНачислено.УстановитьПараметр("МассЛиц", СтруктураРеквизитовФормы.МассивЖенщин);
		ЗапросНачислено.УстановитьПараметр("СписокКатегорий",  СписокКатегорий);
		
		РезультатЗапроса = ЗапросНачислено.Выполнить();
		
		СтруктураДанныхОтчетПоТруду["П7010_2"] = ОбработатьТаблицу(РезультатЗапроса);
		
		ЗапросНачислено.УстановитьПараметр("МассЛиц", СтруктураРеквизитовФормы.МассивСовм);
		
		РезультатЗапроса = ЗапросНачислено.Выполнить();

		СтруктураДанныхОтчетПоТруду["П7030_2"] = ОбработатьТаблицу(РезультатЗапроса);
		
		// ИНАГРО ++
		//ТекстЗапроса =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	СУММА(Начисления.СуммаОборот) КАК Результат
		//|ИЗ
		//|	РегистрНакопления.НачисленияУдержанияПоСотрудникам.Обороты(
		//|			&НачДата,
		//|			&КонДата,
		//|			,
		//|			Организация = &Организация
		//|				И НачислениеУдержание В (ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорРаботыУслуги), ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.ДоговорАвторскогоЗаказа))
		//|				) КАК Начисления";
		//  ЗапросНачислено.Текст = ТекстЗапроса;
		//РезультатЗапроса = ЗапросНачислено.Выполнить();
		//СтруктураДанныхОтчетПоТруду["П7040_2"] = ОбработатьТаблицу(РезультатЗапроса);
		//
		//Попытка
		//	ТекстЗапроса =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//	|	СУММА(Начисления.СуммаОборот) КАК Результат
		//	|ИЗ
		//	|	РегистрНакопления.НачисленияУдержанияПоСотрудникам.Обороты(
		//	|			&НачДата,
		//	|			&КонДата,
		//	|			,
		//	|			Организация = &Организация
		//	|				И НачислениеУдержание ССЫЛКА ПланВидовРасчета.Начисления
		//	|				И НачислениеУдержание.ГруппаУчета В (ЗНАЧЕНИЕ(Справочник.ГруппыУчетаНачисленийИУдержаний.ВыплатыПоГигКонтрактам))
		//	|				) КАК Начисления";
		//  	ЗапросНачислено.Текст = ТекстЗапроса;
		//	РезультатЗапроса = ЗапросНачислено.Выполнить();
		//	СтруктураДанныхОтчетПоТруду["П7040_2"] = СтруктураДанныхОтчетПоТруду["П7040_2"] + ОбработатьТаблицу(РезультатЗапроса);
		//Исключение
		//	
		//КонецПопытки;	
		
		ЗапросНачислено.УстановитьПараметр("МассЛиц", СтруктураРеквизитовФормы.МассивГПХ);
		РезультатЗапроса = ЗапросНачислено.Выполнить();
		СтруктураДанныхОтчетПоТруду["П7040_2"] = ОбработатьТаблицу(РезультатЗапроса);
		// ИНАГРО --
	Иначе
		Счет661 = ПланыСчетов["Хозрасчетный"].РасчетыПоЗаработнойПлате;
		
		//начисления работников без разбиения - за весь отчетный период
		//ФОТ штатных работников
		ТекстЗапроса = "
		|ВЫБРАТЬ  РАЗРЕШЕННЫЕ
		| СУММА(ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовПриход) КАК Результат
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыССотрудниками.Обороты(&НачДата,&КонДата,, Организация = &Организация
		|																					 И СчетУчета = &парамСчет
		| 																					 И ФизическоеЛицо В (&МассЛиц)) КАК ВзаиморасчетыСРаботниками
		|";
		ЗапросНачислено = Новый Запрос();
		ЗапросНачислено.Текст = ТекстЗапроса;
		ЗапросНачислено.УстановитьПараметр("НачДата", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ЗапросНачислено.УстановитьПараметр("КонДата" ,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ЗапросНачислено.УстановитьПараметр("парамСчет", Счет661);
		ЗапросНачислено.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
		
		ЗапросНачислено.УстановитьПараметр("МассЛиц", СтруктураРеквизитовФормы.МассивФизЛицЖенщин);
		РезультатЗапроса = ЗапросНачислено.Выполнить();
		СтруктураДанныхОтчетПоТруду["П7010_2"] = ОбработатьТаблицу(РезультатЗапроса);
		
		ЗапросНачислено.УстановитьПараметр("МассЛиц", СтруктураРеквизитовФормы.МассивФизЛицСовм);
		РезультатЗапроса = ЗапросНачислено.Выполнить();
		СтруктураДанныхОтчетПоТруду["П7030_2"] = ОбработатьТаблицу(РезультатЗапроса);
		
		//ИНАГРО ++
		//ЗапросНачислено.УстановитьПараметр("МассЛиц", СтруктураРеквизитовФормы.МассивФизЛицГПХ);
		ЗапросНачислено.УстановитьПараметр("МассЛиц", СтруктураРеквизитовФормы.МассивГПХ);
		//ИНАГРО -- 
		РезультатЗапроса = ЗапросНачислено.Выполнить();
		СтруктураДанныхОтчетПоТруду["П7040_2"] = ОбработатьТаблицу(РезультатЗапроса);
	КонецЕсли;   
	
	Если СтруктураРеквизитовФормы.ЗарплатаКадрыРасширенная Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеУчетаВремениПоСостояниям.Сотрудник В (&МассЛиц)
		|				ТОГДА 1
		|		КОНЕЦ * ДанныеУчетаВремениПоСостояниям.Часы) КАК Результат
		|ИЗ
		|	ВТДанныеУчетаВремениПоСостояниям КАК ДанныеУчетаВремениПоСостояниям";
		ЗапросОтработано = Новый Запрос();
		ЗапросОтработано.Текст = ТекстЗапроса;
		ЗапросОтработано.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ЗапросОтработано.УстановитьПараметр("МассЛиц", СтруктураРеквизитовФормы.МассивЖенщин);
		РезультатЗапроса = ЗапросОтработано.Выполнить();
		СтруктураДанныхОтчетПоТруду["П7010_3"] = ОбработатьТаблицу(РезультатЗапроса);
		
		
	Иначе	
		//ИНАГРО ++
		//ИмяРегистра = "Начисления";
		ИмяРегистра = "ИНАГРО_Начисления";
		//ИНАГРО --	
		ТекстЗапроса = "
		|ВЫБРАТЬ  РАЗРЕШЕННЫЕ
		|	СУММА( ВЫБОР
		|				КОГДА Рег.Сторно
		|				ТОГДА -1
		|				ИНАЧЕ 1
		|			КОНЕЦ * Рег.ОтработаноЧасов) КАК Результат
		|ИЗ
		|	РегистрРасчета."+ИмяРегистра+" КАК Рег
		|ГДЕ
		|	  Рег.ПериодРегистрации МЕЖДУ &НачДата И &КонДата
		|	И Рег.Организация = &Организация
		|	И Рег.Активность
		|	И Сотрудник В (&МассЛиц);
		|";
		ЗапросОтработано = Новый Запрос();
		ЗапросОтработано.Текст = ТекстЗапроса;
		ЗапросОтработано.УстановитьПараметр("НачДата", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ЗапросОтработано.УстановитьПараметр("КонДата" ,СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ЗапросОтработано.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
		ЗапросОтработано.УстановитьПараметр("МассЛиц", СтруктураРеквизитовФормы.МассивЖенщин);
		РезультатЗапроса = ЗапросОтработано.Выполнить();
		СтруктураДанныхОтчетПоТруду["П7010_3"] = ОбработатьТаблицу(РезультатЗапроса);
	КонецЕсли;	
КонецПроцедуры	




//&НаСервере
//Функция АдресПоказателя(СтрокаПоказателя)
//	
//	Результат = СтрокаПоказателя.Код;
//	
//	СтрокаВерхнегоУровня = СтрокаПоказателя.Родитель;
//	
//	Пока ЗначениеЗаполнено(СтрокаВерхнегоУровня) Цикл
//		Результат = СтрокаВерхнегоУровня.Код + "\" + Результат;
//		СтрокаВерхнегоУровня = СтрокаВерхнегоУровня.Родитель;
//	КонецЦикла;
//	
//	Возврат Результат;
//	
//КонецФункции








&НаСервере
Функция ОбновитьВариантыЗаполнения()
	
	Перем МассивВариантовЗаполненияСтраниц;
	
	ЕстьИзменения = Ложь;
	
	МакетСоставаПоказателей = Отчеты[Сред(Лев(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7)].ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);
	
	ОписаниеТиповЧисло1 = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1));
	
	ОписаниеТиповСтрока15  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(15));
	ОписаниеТиповСтрока50  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	
	Для Каждого ОбластьОтчета Из МакетСоставаПоказателей.Области Цикл
		
		ИмяСтраницы = ОбластьОтчета.Имя;
		
		ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателя",            ОписаниеТиповСтрока50);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения",        ОписаниеТиповЧисло1);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("ЗначениеАвто",             СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Дельта",                   СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("Комментарий",              ОписаниеТиповСтрока100);
		ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателяПоСтруктуре", ОписаниеТиповСтрока50);
		
		Для Ном = ОбластьОтчета.Верх По ОбластьОтчета.Низ Цикл
			// Код показателя (по составу показателей) определяется по первой колонке макета.
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;
			
			Если КодПоказателя = "===" Тогда
				Прервать; // конечная строка
			КонецЕсли;
			
			Если Лев(КодПоказателя, 2) = "//" Тогда
				Продолжить; // комментарий
			КонецЕсли;
			
			// Код показателя по форме отчете (имя ячейки в полях табличного документа формы).
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// Вариант заполнения ячейки определяется по колонке 6 макета.
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			
			чВариантЗаполнения = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));
			Если чВариантЗаполнения <> 0 Тогда
				НоваяСтрока = ТаблицаВариантыЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() > 0 Тогда
				
				МассивВариантовЗаполненияСтраниц.Очистить();
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
				
				мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
				
				ЕстьИзменения = Истина;				
				
			КонецЕсли;	
		Иначе
			
			МассивВариантовЗаполненияСтраниц = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы];
			
			Если ТаблицаВариантыЗаполнения.Количество() = 0 Тогда
				
				мСтруктураВариантыЗаполнения.Удалить(ИмяСтраницы);
				
				ЕстьИзменения = Истина;	
				
			Иначе
				// Актуализация вариантов автозаполнения текущей страницы.
				Для Каждого ЭлементМассива Из МассивВариантовЗаполненияСтраниц Цикл
					
					ЭлементМассива = ЭлементМассива.ТаблицаВариантовЗаполнения;
					
					Для каждого СтрокаТаблицы Из ТаблицаВариантыЗаполнения Цикл
						КодПоказателя     = СтрокаТаблицы.КодПоказателя;
						ВариантЗаполнения = СтрокаТаблицы.ВариантЗаполнения;
						
						ДействующийВариантАвтозаполнения = Неопределено;
						
						НайденныеСтроки = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя));
						
						Если НайденныеСтроки.Количество() > 0 Тогда
							ДействующийВариантАвтозаполнения = НайденныеСтроки[0];
						КонецЕсли;
												
						Если ДействующийВариантАвтозаполнения = Неопределено Тогда
							// Новый автозаполняемый показатель.
							НоваяСтрока = ЭлементМассива.Добавить();
							НоваяСтрока.КодПоказателя     = КодПоказателя;
							НоваяСтрока.ВариантЗаполнения = ВариантЗаполнения;
							
							ЕстьИзменения = Истина;
							
						Иначе
							// Показатель должен соответствовать эталону, кроме удовлетворяющих следующим критериям:
							// - вариант эталона не 4 (авторасчет)и не 5 (запрет ввода значения);
							// - действующий вариант допускает корректировку (варианты 1-3).
							ИспользоватьДействующийВариант = ((ДействующийВариантАвтозаполнения.ВариантЗаполнения = 1
							ИЛИ ДействующийВариантАвтозаполнения.ВариантЗаполнения = 2
							ИЛИ ДействующийВариантАвтозаполнения.ВариантЗаполнения = 3)
							И (ВариантЗаполнения <> 4) И (ВариантЗаполнения <> 4));
							Если Не ИспользоватьДействующийВариант Тогда
								ДействующийВариантАвтозаполнения.КодПоказателя     = КодПоказателя;
								ДействующийВариантАвтозаполнения.ВариантЗаполнения = ВариантЗаполнения;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					ТаблДляЦикла = ЭлементМассива.Выгрузить();
					
					Для Каждого СтрокаТаблицы Из ТаблДляЦикла Цикл
						КодПоказателя = СтрокаТаблицы.КодПоказателя;
						
						Если ТаблицаВариантыЗаполнения.Найти(КодПоказателя, "КодПоказателя") = Неопределено Тогда
							// В новой версии отчета автозаполнение показателя не предусмотрено.
							СтрокиВЭлементеМассива = ЭлементМассива.НайтиСтроки(Новый Структура("КодПоказателя", КодПоказателя));
							Если СтрокиВЭлементеМассива.Количество() > 0 Тогда
								ЭлементМассива.Удалить(СтрокиВЭлементеМассива[0]);
								
								ЕстьИзменения = Истина;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьИзменения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПоказательНаСервере(ИмяОбласти, Значение, Форма, ИмяРазделаПоказателя);

	ТекРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Если ТекРаздел = ИмяРазделаПоказателя Тогда
	
		Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение = Значение;
		
	Иначе	
		
		Форма["СтруктураДанных" + ИмяРазделаПоказателя].Вставить(ИмяОбласти, Значение);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПоказательНаСервере(ИмяОбласти, Форма, ИмяРазделаПоказателя)

	ТекРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Если ТекРаздел = ИмяРазделаПоказателя Тогда
		
		Возврат Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение;
		
	Иначе	
		
		Значение = Неопределено;
		Форма["СтруктураДанных" + ИмяРазделаПоказателя].Свойство(ИмяОбласти, Значение);
		
		Если Значение = Неопределено Тогда
			
			ДанныеПоказателя = Форма.мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента, КодПоказателяПоФорме", ИмяРазделаПоказателя, ИмяОбласти));
			Если ДанныеПоказателя.Количество() > 0
				И (    ДанныеПоказателя[0].ТипДанныхПоказателя = "Ч"
				   ИЛИ ДанныеПоказателя[0].ТипДанныхПоказателя = "Е") Тогда
				Значение = 0;	   
			Иначе
				Значение = "";	
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Значение;
		
	КонецЕсли;	

КонецФункции // ()

&НаКлиенте
Процедура ОткрытьФормуПараметровДляЗвит1С(ОписаниеОповещения) Экспорт
	
	глКомпонентаЗвит1С.Bring1CToFront();
	СтруктураРеквизитовФормы.Вставить("ОповещениеНастройкиПараметровЗвит1С", ОписаниеОповещения);
	
	Если глМенеджерЗвит1С.ФлагОтладки Тогда

		ФормаСохраненныхРеглОтчетов = ПолучитьФорму("Документ.РегламентированныйОтчет.Форма.ФормаВыбораТестЗвит1С",,ЭтаФорма);
		
		ФормаСохраненныхРеглОтчетов.ОписаниеОповещенияОЗакрытии =  Новый ОписаниеОповещения("РежимТестированияЗвит1СЗавершениеВыбораОтчета", ЭтотОбъект);
		ФормаСохраненныхРеглОтчетов.Параметры.РежимВыбора        = Истина; 
		ФормаСохраненныхРеглОтчетов.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаСохраненныхРеглОтчетов.Открыть();
		
	Иначе
		
		////ОткрытьФормуПараметров(Неопределено);	
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РежимТестированияЗвит1СЗавершениеВыбораОтчета(Результат, ДопПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ТекОповещение = СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С;
		СтруктураРеквизитовФормы.Удалить("ОповещениеНастройкиПараметровЗвит1С");
			
		СтруктураРеквизитовФормы.мСохраненныйДок = Результат;	
		ВосстановитьСохраненныеДанные();	
			
		СтруктураРеквизитовФормы.Вставить("ОповещениеНастройкиПараметровЗвит1С", ТекОповещение);
		
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
		
	Иначе
		
		////ОткрытьФормуПараметров(Неопределено);	
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПараметровЗавершение(ПараметрыВозврата, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.Свойство("ОповещениеНастройкиПараметровЗвит1С") Тогда
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьДанныеДляЗвит1С(ОтчетЗвит1С = Неопределено) Экспорт 
	
	мСписокСообщенийЗвит1С 	= Новый СписокЗначений;
	
	// Настроим модуль объекта на получене большего доп.параметров
	СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина;
	Если СтруктураРеквизитовФормы.Свойство("ОповещениеНастройкиПараметровЗвит1С") Тогда
		СтруктураРеквизитовФормы.Удалить("ОповещениеНастройкиПараметровЗвит1С")	
	КонецЕсли;
	

	// Заполнение зависит от формы реестра
	Если НЕ глМенеджерЗвит1С.ФлагОтладки Тогда
		ПараметрыЗаполненияЗвит1С = Неопределено;
		ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С);
		ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);
	КонецЕсли;
	
	Результат = ПолучитьДанныеФормыНаСервере();
	
	Для каждого Сообщение Из мСписокСообщенийЗвит1С Цикл
		глМенеджерЗвит1С.ПредупреждениеЗвит1С(Сообщение.Представление, ,Сообщение.Значение);
	КонецЦикла;
	
	мСписокСообщенийЗвит1С.Очистить();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеФормыНаСервере();
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	// расшифровка для ФРЕДО
	Если  СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровки")
		И ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки) 
		И СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С") Тогда
		
		ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки),
									  СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С); 
		
	КонецЕсли;

	ПоказателиОтчета = Новый Структура();
	РеквизитыФормы = ПолучитьРеквизиты();
	Для каждого Реквизит Из РеквизитыФормы Цикл
		Если Лев(ВРЕГ(Реквизит.Имя), 15)  = ВРЕГ("СтруктураДанных") Тогда
			ПоказателиОтчета.Вставить(Сред(Реквизит.Имя, 16), ЭтаФорма[Реквизит.Имя]);		
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИдМногострочногоРаздела Из мСтруктураМногострочныхРазделов Цикл
		
		СтруктураДанных = Новый Структура;
		
		Таблица = РеквизитФормыВЗначение(ИдМногострочногоРаздела.Значение, Тип("ТаблицаЗначений"));
		КолонкиТаблицы = Таблица.Колонки;
		
		Для каждого Строка Из Таблица Цикл
			
			Для каждого Колонка Из КолонкиТаблицы Цикл
				СтруктураДанных.Вставить(Колонка.Имя + "_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ=0"), Строка[Колонка.Имя]);
			КонецЦикла;
			
		КонецЦикла;
		
		ПоказателиОтчета.Вставить(ИдМногострочногоРаздела.Значение, СтруктураДанных);		
		
	КонецЦикла;	
	
	СтруктураРеквизитовФормы.ДопПоказателиОтчетаЗвит1С.Вставить("мДатаКонцаПериодаОтчета", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПоказателиОтчета.Вставить("ДопПоказателиОтчета", СтруктураРеквизитовФормы.ДопПоказателиОтчетаЗвит1С);
		
	// показатели
	СписокСохранения.Вставить("ДанныеОтчета", ПоказателиОтчета);
	
	Возврат СписокСохранения;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// ПРОРИСОВКА И КОМАНДЫ ПАНЕЛИ ОТПРАВКИ

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтаФорма);
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФормыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	СохранитьНаКлиенте(, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.Форма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(Сред(Лев(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7), Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ИДИменПоказателей, ПараметрыОтчета)
	
КонецПроцедуры

//&НаКлиенте
//Процедура Выгрузить(Команда)
//	Возврат;
//КонецПроцедуры

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя)
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции