&НаСервере
Перем мБухИтоги;
&НаСервере
Перем ТаблицаРасшифровки;
&НаСервере
Перем ОбщиеПараметрыРасшифровки;

&НаСервере
Перем мОбъектОтчета;     

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2021Кв1УФ";
		
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
		
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	// Идентификаторы многострочных групп
	СтруктураРеквизитовФормы.мИдГруппы    = "T1R";
	СтруктураРеквизитовФормы.мИдГруппы2   = "T2R";
	СтруктураРеквизитовФормы.мИдГруппыPZ1 = "PZT1R";
	СтруктураРеквизитовФормы.мИдГруппыPZ2 = "PZT2R";
	СтруктураРеквизитовФормы.мИдГруппыPN  = "PNT2R";
	СтруктураРеквизитовФормы.мИдГруппыTC1 = "TCT1R";
	СтруктураРеквизитовФормы.мИдГруппыTC2 = "TCT2R";
	СтруктураРеквизитовФормы.мИдГруппыPP  = "PPT1R";
	СтруктураРеквизитовФормы.мИдГруппыKT1 = "KTT1R";
	СтруктураРеквизитовФормы.мИдГруппыKT2 = "KTT2R";
	
	// количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда)
	КолИсхСтрокИдГруппы1 = 1;
	
	СтруктураДанныхДекларация	= Новый Структура;
	СтруктураДанныхПриложениеАВ	= Новый Структура;
	СтруктураДанныхПриложениеАМ	= Новый Структура;
	СтруктураДанныхПриложениеВП	= Новый Структура;
	СтруктураДанныхПриложениеЗП	= Новый Структура;
	СтруктураДанныхПриложениеПЗ	= Новый Структура;
	СтруктураДанныхПриложениеПН	= Новый Структура;
	СтруктураДанныхПриложениеРИ	= Новый Структура;
	СтруктураДанныхПриложениеТЦ	= Новый Структура;
	СтруктураДанныхПриложениеЦП	= Новый Структура;
	СтруктураДанныхПриложениеПП	= Новый Структура;
	СтруктураДанныхПриложениеКИК = Новый Структура;
	СтруктураДанныхПриложениеКК	 = Новый Структура;
	СтруктураДанныхПриложениеКТЦ = Новый Структура;
	СтруктураДанныхПриложениеКЦП = Новый Структура;
	СтруктураДанныхСлужебныеДанные	= Новый Структура;
	
	ИнициализацияМногостраничныхРазделов();
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы, 	СтруктураРеквизитовФормы.мИдГруппы);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, 	СтруктураРеквизитовФормы.мИдГруппы2);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыPZ1, СтруктураРеквизитовФормы.мИдГруппыPZ1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыPZ2, СтруктураРеквизитовФормы.мИдГруппыPZ2);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыPN, 	СтруктураРеквизитовФормы.мИдГруппыPN);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыTC1, СтруктураРеквизитовФормы.мИдГруппыTC1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыTC2, СтруктураРеквизитовФормы.мИдГруппыTC2);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыPP,  СтруктураРеквизитовФормы.мИдГруппыPP);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыKT1, СтруктураРеквизитовФормы.мИдГруппыKT1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыKT2, СтруктураРеквизитовФормы.мИдГруппыKT2);

	мСтруктураМногостраничныхРазделов = Новый Структура;
	мСтруктураМногостраничныхРазделов.Вставить("ПриложениеПН", "ТаблицаСтраницыРаздела1");
	мСтруктураМногостраничныхРазделов.Вставить("ПриложениеКИК", "ТаблицаСтраницыРаздела2");
	мСтруктураМногостраничныхРазделов.Вставить("ПриложениеКК",  "ТаблицаСтраницыРаздела3");
	мСтруктураМногостраничныхРазделов.Вставить("ПриложениеКТЦ", "ТаблицаСтраницыРаздела4");
	мСтруктураМногостраничныхРазделов.Вставить("ПриложениеКЦП", "ТаблицаСтраницыРаздела5");
	
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы, 	КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, 	КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыPZ1, КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыPZ2, КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыPN, 	КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыTC1, КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыTC2, КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыPP, 	КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыKT1, КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыKT2, КолИсхСтрокИдГруппы1);
	
	ЗаполнитьСтруктурыКолонокМногострочныхЧастей();
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
		
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "01/01/2021";
		
	СтруктураРеквизитовФормы.мПечатныеформы 	= Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Декларация";
		
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	ДатаПодписи                                       = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати 	   = Ложь;
	
	ПеречислениеПериодичностьМесяц = Перечисления.Периодичность.Месяц;
	
	СтруктураРеквизитовФормы.ЕстьДуплекс = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность", "ЕстьДуплекс", Ложь);
	Элементы.ЕстьДуплекс.Пометка		 = СтруктураРеквизитовФормы.ЕстьДуплекс;
	
	ВывестиМакетВТаблДокНаСервере(ИмяРаздела, 1);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяРаздела);
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяРаздела);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	
	СтруктураРеквизитовФормы.Вставить("мИдГруппы");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыPZ1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыPZ2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыPN");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыTC1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыTC2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыPP");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыKT1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыKT2");
	
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ОрганизацияЮридическоеФизическоеЛицо");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкиДопСтрок", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкиДопСтраниц", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Истина);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуВыгрузить", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	
	СтруктураРеквизитовФормы.Вставить("ТекущиеОбластиСтраниц");
	СтруктураРеквизитовФормы.Вставить("КолонкиМногострочныхРазделов");
	СтруктураРеквизитовФормы.Вставить("ЕстьДуплекс", Ложь);
	
	СтруктураРеквизитовФормы.Вставить("ПолучениеДанныхДляЗвит1С", Ложь);
	СтруктураРеквизитовФормы.Вставить("ДопПоказателиОтчетаЗвит1С", Новый Структура);
	
	СтруктураРеквизитовФормы.Вставить("ОтчетЗаДваПериода", 				Ложь);
	СтруктураРеквизитовФормы.Вставить("ВидФинОтчетности", 				0);
	СтруктураРеквизитовФормы.Вставить("ОблагаемаяПрибыльПрошлогоГода",  0);
	СтруктураРеквизитовФормы.Вставить("РИАмортизацияБУБиблФондовМНМА",	Ложь);
	СтруктураРеквизитовФормы.Вставить("ЛимитСуммыДоходаНалоговыеРазницы",	40000000);
	СтруктураРеквизитовФормы.Вставить("ДляФредоТипПериода",	Ложь);
	
	СтруктураРеквизитовФормы.Вставить("СписаниеНеБезнадежнойЗадолженности_Статьи", Новый Массив);
	СтруктураРеквизитовФормы.Вставить("Штрафы_Статьи", Новый Массив);
	СтруктураРеквизитовФормы.Вставить("ПередачаНеприбыльным_СтатьиЗатрат", Новый Массив);
	СтруктураРеквизитовФормы.Вставить("Контрагенты_Неприбыльные", Новый Массив);
	СтруктураРеквизитовФормы.Вставить("Контрагенты_Оффшоры", Новый Массив);
	СтруктураРеквизитовФормы.Вставить("Контрагенты_ОффшорыОргформа", Новый Массив);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияМногостраничныхРазделов()
 
	Элементы.ДопСтроки.Видимость = Истина;
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздела1.Добавить();
	СтрПерваяСтраница.Представление               = НСтр("ru='Стр. ';uk='Стр. '") + 1;
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

	Элементы.ДопСтроки.Видимость = Истина;
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздела2.Добавить();
	СтрПерваяСтраница.Представление               = НСтр("ru='Стр. ';uk='Стр. '") + 1;
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

	Элементы.ДопСтроки.Видимость = Истина;
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздела3.Добавить();
	СтрПерваяСтраница.Представление               = НСтр("ru='Стр. ';uk='Стр. '") + 1;
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

	Элементы.ДопСтроки.Видимость = Истина;
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздела4.Добавить();
	СтрПерваяСтраница.Представление               = НСтр("ru='Стр. ';uk='Стр. '") + 1;
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

	Элементы.ДопСтроки.Видимость = Истина;
	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздела5.Добавить();
	СтрПерваяСтраница.Представление               = НСтр("ru='Стр. ';uk='Стр. '") + 1;
	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

КонецПроцедуры // ИнициализацияМногостраничныхРазделов()

// Функция возвращает параметры числа Е для различных разделов отчета
//
// Параметры
//  ИмяРаздела  - Строка
//
// Возвращаемое значение:
//  Результат   - ОписаниеТипа
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОписаниеТипаЧислаЕДляРаздела(ИмяРаздела = "")
	
	Результат = Новый Структура("ОписаниеТипа, Длина, Точность");
	
    Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));

	Возврат Результат; 
	
КонецФункции

&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьНачальныеНастройки();

	
	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ЗаполнитьПустыеСтруктурыДанных();	
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		НачальныеОперацииСМногострочнымиБлоками();
			
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
			ЗаполнитьНастраиваемыеПараметрыЗаполнения();
			
		КонецЕсли;
		
	Иначе
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуВыгрузить Тогда
		Элементы.Выгрузить.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкиДопСтрок Тогда
		Элементы.ДопСтроки.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкиДопСтраниц Тогда
		Элементы.ДопСтраницы.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	СтруктураРеквизитовФормы.ОрганизацияЮридическоеФизическоеЛицо = СтруктураРеквизитовФормы.Организация.ЮридическоеФизическоеЛицо;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
    	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПрорисоватьПодменюПечать(ЭтаФорма);
	КонецЕсли;
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры // Инициализация()

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			Строка = СтруктураГруппы.Добавить();
			
			Если ИмяГруппы = "PZT1R" Тогда
				
				НомТекущейСтроки = 1;
				СимвСтр 		 = "А";
				
				Строка["PZT1RXXXXP1"] = СтрЗаменить("на підставі ""#""                     (рядок #1 + рядок #2 - рядок #3)", "#", СимвСтр);
				Строка["PZT1RXXXXK1"] = "05."+НомТекущейСтроки;
				Строка["PZT1RXXXXK2"] = СтрЗаменить("#1", "#", СимвСтр);
				Строка["PZT1RXXXXK3"] = СтрЗаменить("#2", "#", СимвСтр);
				Строка["PZT1RXXXXK4"] = СтрЗаменить("#3", "#", СимвСтр);
			
			ИначеЕсли ИмяГруппы = "PZT2R" Тогда	
				
				Строка.PZT2RXXXXОснование = """А""";
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // НачальныеОперацииСМногострочнымиБлоками()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);	
	
	МассивТиповТаблицаЗначений = Новый Массив; 
	МассивТиповТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТиповТаблицаЗначений);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда         
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда		
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащую варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы 
	//

	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Декларация";
	СтрокаУровня1.Представление            = НСтр("ru='Декларация по прибыли';uk='Декларація з податку на прибуток'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	
	
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ПриложениеАВ";
	СтрокаУровня1.Представление            = НСтр("ru='Приложение АВ';uk='Додаток АВ'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ПриложениеЗП";
	СтрокаУровня1.Представление            = НСтр("ru='Приложение ЗП';uk='Додаток ЗП'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ПриложениеПН";
	СтрокаУровня1.Представление            = НСтр("ru='Приложение ПН';uk='Додаток ПН'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ПриложениеТЦ";
	СтрокаУровня1.Представление            = НСтр("ru='Приложение ТЦ';uk='Додаток ТЦ'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ПриложениеВП";
	СтрокаУровня1.Представление            = НСтр("ru='Приложение ВП';uk='Додаток ВП'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ПриложениеРИ";
	СтрокаУровня1.Представление            = НСтр("ru='Приложение РИ';uk='Додаток РІ'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ПриложениеПЗ";
	СтрокаУровня1.Представление            = НСтр("ru='Приложение ПЗ';uk='Додаток ПЗ'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ПриложениеАМ";
	СтрокаУровня1.Представление            = НСтр("ru='Приложение АМ';uk='Додаток АМ'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ПриложениеЦП";
	СтрокаУровня1.Представление            = НСтр("ru='Приложение ЦП';uk='Додаток ЦП'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ПриложениеПП";
	СтрокаУровня1.Представление            = НСтр("ru='Приложение ПП';uk='Додаток ПП'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ПриложениеКИК";
	СтрокаУровня1.Представление            = НСтр("ru='Приложение КИК';uk='Додаток КІК'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ПриложениеКК";
	СтрокаУровня1.Представление            = НСтр("ru='Приложение КИК-К';uk='Додаток КІК-К'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ПриложениеКТЦ";
	СтрокаУровня1.Представление            = НСтр("ru='Приложение КИК-ТЦ';uk='Додаток КІК-ТЦ'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "ПриложениеКЦП";
	СтрокаУровня1.Представление            = НСтр("ru='Приложение КИК-ЦП';uk='Додаток КІК-ЦП'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "СлужебныеДанные";
	СтрокаУровня1.Представление            = НСтр("ru='Служебные данные';uk='Службові дані'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки.
//
&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
		
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Декларация";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; 
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 1;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы2;
	НовСтр.Область = "МногострочнаяЧасть_2";
	НовСтр.ВысотаСтроки =1;
	
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ПриложениеАВ";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; 
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ПриложениеЗП";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; 
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ПриложениеПН";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; 
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппыPN;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки =1;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ПриложениеТЦ";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; 
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппыTC1;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 1;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппыTC2;
	НовСтр.Область = "МногострочнаяЧасть_2";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ПриложениеВП";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; 
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ПриложениеРИ";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; 
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ПриложениеПЗ";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; 
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппыPZ1;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 4;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппыPZ2;
	НовСтр.Область = "МногострочнаяЧасть_2";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ПриложениеАМ";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; 
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ПриложениеЦП";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; 
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ПриложениеПП";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; 
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппыPP;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки =1;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ПриложениеКИК";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; 
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ПриложениеКК";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; 
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ПриложениеКТЦ";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; 
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппыKT1;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 1;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппыKT2;
	НовСтр.Область = "МногострочнаяЧасть_2";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "ПриложениеКЦП";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; 
	СтрокаУровня1.МногостраничностьВРазделе            = Истина;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "СлужебныеДанные";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

КонецПроцедуры // ФормироватьСтруктуруСвойствСтраниц()

// СформироватьДеревоРазделовОтчетаНаСервере()
//
&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаСервере()

// СформироватьДеревоРазделовОтчетаНаКлиенте()
//
&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаКлиенте()

// СформироватьДеревоРазделовОтчета()
//
&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = НСтр("ru='Стр. ';uk='Стор. '") + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры // СформироватьДеревоРазделовОтчета()

&НаСервере
Функция СформироватьСтруктуруДанныхДопСтрокСтраницы(Форма, ИмяСтраницы) Экспорт
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяСтраницы = "ПриложениеПН" Тогда

		РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппыPN);

		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппыPN, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппыPN].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппыPN, ТаблицаДопСтрокГруппы);
		
	КонецЕсли;

	Если ИмяСтраницы = "ПриложениеКТЦ" Тогда

		РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппыKT1);

		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппыKT1, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппыKT1].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппыKT1, ТаблицаДопСтрокГруппы);
		
		РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппыKT2);

		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппыKT2, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппыKT2].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппыKT2, ТаблицаДопСтрокГруппы);
		
	КонецЕсли;
	Возврат СтруктураДанныхДопСтрокРаздела;

КонецФункции

// РазделыОтчетаПриАктивизацииСтроки()
//
&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент) Экспорт
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	// сохраним текущее положение курсора на странице
	Если СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Неопределено Тогда
		СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Новый Структура;
	КонецЕсли;
	ТекущийНомерСтраницы = "_" + Строка(СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	
	КоординатыОбласти = Новый Структура();
	КоординатыОбласти.Вставить("Верх", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Верх);
	КоординатыОбласти.Вставить("Низ", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ);
	КоординатыОбласти.Вставить("Лево", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево);
	КоординатыОбласти.Вставить("Право", Элементы.ТабличныйДокумент.ТекущаяОбласть.Право);
	
	СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц.Вставить(ТекущийНомерСтраницы, КоординатыОбласти);	

	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Элементы.ДобавитьСтраницу.Доступность   = Ложь;
	Элементы.УдалитьСтраницу.Доступность    = Ложь;
	Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
	Элементы.ДобавитьСтроку.Доступность     = Ложь;
	Элементы.УдалитьСтроку.Доступность      = Ложь;
				
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
																
		КонецЕсли;														
				
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		
		Элементы.ДобавитьСтраницу.Доступность   = Истина;
		Элементы.УдалитьСтраницу.Доступность    = Истина;
		Элементы.УдалитьВсеСтраницы.Доступность = Истина;
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			
			Элементы.УдалитьСтраницу.Доступность = Ложь;
							   			
			Если Элемент.ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
				Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
			КонецЕсли;
			
		ИначеЕсли Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
			
			Элементы.УдалитьСтраницу.Доступность    = Ложь;
			Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если    Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Декларация"
		ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ПриложениеПН" 
		ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ПриложениеПЗ" 
		ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ПриложениеПП" 
		ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ПриложениеТЦ" 
		ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "ПриложениеКТЦ" Тогда
	
		Элементы.ДобавитьСтроку.Доступность = Истина;
		Элементы.УдалитьСтроку.Доступность  = Истина;
		
	КонецЕсли;
	
	// восстановим текущее положение курсора
	ТекущийНомерСтраницы = "_"+Строка(СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	Если СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц.Свойство(ТекущийНомерСтраницы) Тогда
		
		КоординатыОбласти = СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц[ТекущийНомерСтраницы];
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(КоординатыОбласти.Верх, КоординатыОбласти.Лево, КоординатыОбласти.Низ, КоординатыОбласти.Право);	
		
	Иначе	
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1, 1, 1);	
		
	КонецЕсли;
	
КонецПроцедуры // РазделыОтчетаПриАктивизацииСтроки()

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
			
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
						
КонецПроцедуры // ВывестиМакетСтраницыВТабличныйДокументНаСервере()

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменитьПризнакАктивностиСтраницы = Истина)
	
	// Многостраничные и многострочные разделы.
	//
	Если    НаимРаздела = "ПриложениеПН" или НаимРаздела = "ПриложениеКТЦ" Тогда       //многостраничные разделы с многострочками
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
				
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
			
			// Сохраним данные активной страницы, с присвоением Представления страницы и с очисткой многострочных частей (Истина)
			
			СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
			
			ОпределитьПредставлениеДопСтраниц(НаимРаздела);

			СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(ЭтаФорма, НаимРаздела);
			
			Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
				СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
			Иначе
				СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
			КонецЕсли;
							
			Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
				СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
			Иначе
				СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			КонецЕсли;
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменитьПризнакАктивностиСтраницы;
			
		КонецЕсли;
		
	ИначеЕсли    НаимРаздела = "ПриложениеКИК" или НаимРаздела = "ПриложениеКК" или НаимРаздела = "ПриложениеКЦП" Тогда //многостраничные разделы без многострочек
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
				
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
			
			// Сохраним данные активной страницы, с присвоением Представления страницы и с очисткой многострочных частей (Истина)
			
			СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
			
			ОпределитьПредставлениеДопСтраниц(НаимРаздела);

			//СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(ЭтаФорма, НаимРаздела);
			//
			Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
				СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
			Иначе
				СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
			КонецЕсли;
							
			//Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
			//	СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
			//Иначе
			//	СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			//КонецЕсли;
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменитьПризнакАктивностиСтраницы;
			
		КонецЕсли;
		
		// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппыМассив = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы);	
		КонецЦикла;
		
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Процедура ОпределитьПредставлениеДопСтраниц(ИмяСтраницы = Неопределено, ТолькоУАктивнойСтраницы = Неопределено)
	Перем ТаблицаСтраницРаздела;
	Перем ТекущееПредставлениеСтраницы;

	ТолькоАктивная = ?(ТолькоУАктивнойСтраницы = Неопределено, Ложь, ТолькоУАктивнойСтраницы);
	
	Для Каждого Страница Из мСтруктураМногостраничныхРазделов Цикл
		ИмяТекСтраницы        = Страница.Ключ;
		ТаблицаСтраницРаздела = ЭтаФорма[Страница.Значение];

		Если ИмяСтраницы <> Неопределено Тогда
			Если ИмяТекСтраницы <> ИмяСтраницы Тогда
				Продолжить; // Пропускаем не нужные страницы
			КонецЕсли;
		КонецЕсли;

		// Если есть хоть одна страница - определим её представление
		Если ТаблицаСтраницРаздела.Количество() > 0 Тогда

			НомерСтраницы = 0;

			Для Каждого СтрокаТаблицы Из ТаблицаСтраницРаздела Цикл

				НомерСтраницы = НомерСтраницы + 1;

				СохрПредставлениеСтраницы = СтрокаТаблицы.Представление;

				// Если колонки нет, тогда автоматическое представление включено по умолчанию.
				Если ТаблицаСтраницРаздела[0].Свойство("АвтоматическоеПредставление") Тогда
					АвтоматическоеПредставление = СтрокаТаблицы.АвтоматическоеПредставление;
				Иначе
					АвтоматическоеПредставление = Истина;
				КонецЕсли;

				Если НЕ АвтоматическоеПредставление Тогда
					Продолжить;
				КонецЕсли;

				Если (НЕ ТолькоАктивная) Или ((ТолькоАктивная) И (СтрокаТаблицы.АктивнаяСтраница))Тогда

					ТекущееПредставлениеСтраницы = НСтр("ru='Стр. ';uk='Стр. '") + Строка(НомерСтраницы);
					СтрокаТаблицы.Представление = ТекущееПредставлениеСтраницы;

				КонецЕсли; // ТолькоАктивная

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры


&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	
	Если ТабличныйДокумент.Области.Найти("ПредупреждениеОПечати") = Неопределено Тогда
		ТабличныйДокумент.ОбластьПечати = Неопределено;
	Иначе
		ТабличныйДокумент.ОбластьПечати 					  = ТабличныйДокумент.Области.ПредупреждениеОПечати;
	    ТабличныйДокумент.Области.ПредупреждениеОПечати.Текст = НСтр("ru='ВНИМАНИЕ! Печать отчета необходимо осуществлять из меню ''Печать''.';uk= 'УВАГА! Друк звіту необхідно здійснювати за допомогою меню ''Друк''.'");
	КонецЕсли;
	
	Если  НЕ(  ИмяТекРаздела = "ПриложениеПН" или ИмяТекРаздела = "ПриложениеКИК"  или
			ИмяТекРаздела = "ПриложениеКК" или ИмяТекРаздела = "ПриложениеКТЦ" или ИмяТекРаздела = "ПриложениеКЦП") Тогда
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Если НЕ ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) = Неопределено Тогда
				Попытка
					ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
				Исключение
				КонецПопытки;
			КонецЕсли;	
		КонецЦикла;
		
		ИмяГруппыМассив = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
		
			СтруктураГруппы = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
			
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		
		КонецЦикла;
						
//	 Многострочные и обычные разделы.
	Иначе
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;

		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		 	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			
			Если НЕ ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) = Неопределено Тогда
				
				Попытка
					ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;

		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяТекРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		                                                        		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
				
		Если  ИмяТекРаздела = "ПриложениеПН" или ИмяТекРаздела = "ПриложениеКТЦ"  Тогда
			
			НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
			
			Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
				И (НовДанныеДопСтрокРаздела.Количество() > 0)
				И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
				
				НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
				
			Иначе
				
				НовДанныеДопСтрокРаздела = Неопределено;
				
			КонецЕсли;
			
			
			Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
				
				Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
					
					ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
					ДанныеГруппыСтрок = ГруппаСтрок.Значение;
					
					Если ДанныеГруппыСтрок.Количество() = 0 Тогда
						ПустаяСтрока = ДанныеГруппыСтрок.Добавить();
						Если  ИмяТекРаздела = "ПриложениеПН" Тогда
							ПустаяСтрока.PNT2RXXXXНомерСтроки = 1;
						КонецЕсли;
					КонецЕсли;
					
					ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
					
					КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
					
					// Заменяем таблицу значений с данными текущей страницы.
					КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
					
					ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
	
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	
	
КонецПроцедуры // ВывестиМакетВТаблДокНаСервере()

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(НаимРаздела)
	
	Если    НаимРаздела = "ПриложениеПН" или НаимРаздела = "ПриложениеКИК" или
	    	НаимРаздела = "ПриложениеКК" или НаимРаздела = "ПриложениеКТЦ" или НаимРаздела = "ПриложениеКЦП" Тогда
		ЗаполнитьШапкуПодписиПриложенияПН(ЭтаФорма, НаимРаздела);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоказателиЗначениямиПоУмолчанию()

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт

	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы", СтруктураРеквизитовФормы.мИдГруппы);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппыPN", СтруктураРеквизитовФормы.мИдГруппыPN);
	ИдГрупп.Вставить("мИдГруппыPZ1", СтруктураРеквизитовФормы.мИдГруппыPZ1);
	ИдГрупп.Вставить("мИдГруппыPZ2", СтруктураРеквизитовФормы.мИдГруппыPZ2);
	ИдГрупп.Вставить("мИдГруппыTC1", СтруктураРеквизитовФормы.мИдГруппыTC1);
	ИдГрупп.Вставить("мИдГруппыTC2", СтруктураРеквизитовФормы.мИдГруппыTC2);
	ИдГрупп.Вставить("мИдГруппыPP", СтруктураРеквизитовФормы.мИдГруппыPP);
	ИдГрупп.Вставить("мИдГруппыKT1", СтруктураРеквизитовФормы.мИдГруппыKT1);
	ИдГрупп.Вставить("мИдГруппыKT2", СтруктураРеквизитовФормы.мИдГруппыKT2);

	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
		
КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте()

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт

	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы", СтруктураРеквизитовФормы.мИдГруппы);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппыPN", СтруктураРеквизитовФормы.мИдГруппыPN);
	ИдГрупп.Вставить("мИдГруппыPZ1", СтруктураРеквизитовФормы.мИдГруппыPZ1);
	ИдГрупп.Вставить("мИдГруппыPZ2", СтруктураРеквизитовФормы.мИдГруппыPZ2);
	ИдГрупп.Вставить("мИдГруппыTC1", СтруктураРеквизитовФормы.мИдГруппыTC1);
	ИдГрупп.Вставить("мИдГруппыTC2", СтруктураРеквизитовФормы.мИдГруппыTC2);
	ИдГрупп.Вставить("мИдГруппыPP", СтруктураРеквизитовФормы.мИдГруппыPP);
	ИдГрупп.Вставить("мИдГруппыKT1", СтруктураРеквизитовФормы.мИдГруппыKT1);
	ИдГрупп.Вставить("мИдГруппыKT2", СтруктураРеквизитовФормы.мИдГруппыKT2);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт

	Перем ТекТабличноеПоле;
		
	Если  ИдГруппы = ИдГрупп.мИдГруппы
	  ИЛИ ИдГруппы = ИдГрупп.мИдГруппы2 Тогда
		
		ТекТабличноеПоле = "Декларация";
		
	ИначеЕсли  ИдГруппы = ИдГрупп.мИдГруппыPZ1
	       ИЛИ ИдГруппы = ИдГрупп.мИдГруппыPZ2 Тогда
		
		ТекТабличноеПоле = "ПриложениеПЗ";
		
	ИначеЕсли  ИдГруппы = ИдГрупп.мИдГруппыTC1
	       ИЛИ ИдГруппы = ИдГрупп.мИдГруппыTC2 Тогда
		
		ТекТабличноеПоле = "ПриложениеТЦ";
		
	ИначеЕсли  ИдГруппы = ИдГрупп.мИдГруппыPN Тогда
		
		ТекТабличноеПоле = "ПриложениеПН";
		
	ИначеЕсли  ИдГруппы = ИдГрупп.мИдГруппыPP Тогда
		
		ТекТабличноеПоле = "ПриложениеПП";
		
	ИначеЕсли  ИдГруппы = ИдГрупп.мИдГруппыKT1   
		   ИЛИ ИдГруппы = ИдГрупп.мИдГруппыKT2 Тогда
		
		ТекТабличноеПоле = "ПриложениеКТЦ";
		
	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()


&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры // УстановитьФорматВыводаВПоляхВводаНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;

	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(СокрЛ(КодПоказателя), 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
				ФорматируемаяОбласть.ТипЗначения = Новый ОписаниеТипов(ФорматируемаяОбласть.ТипЗначения,,,Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					
					ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
					ФорматируемаяОбласть.ТипЗначения = Новый ОписаниеТипов(ФорматируемаяОбласть.ТипЗначения,,,Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	

КонецПроцедуры // УстановитьФорматВыводаВПоляхВвода()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)

	ЗаполнитьПоказательНаСервере("HFILL",  Форма.ДатаПодписи, Форма, "Декларация");
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Декларация", "Д_",  8, Формат(Форма.ДатаПодписи, "ДФ=ddMMyyyy"), Ложь);		

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста

Процедура ЗаполнитьШапкуПодписиПриложенияПН(Форма, НаимРаздела)

	HZ   = ПолучитьПоказательНаСервере("HZ",	Форма,"Декларация");
	HZN  = ПолучитьПоказательНаСервере("HZN",	Форма,"Декларация");
	HZU  = ПолучитьПоказательНаСервере("HZU",	Форма,"Декларация");
	
	HTIN = ПолучитьПоказательНаСервере("HTIN",	Форма,"Декларация");
	
	HZY  = ПолучитьПоказательНаСервере("HZY",	Форма,"Декларация");
	
	
	HBOS = ПолучитьПоказательНаСервере("HBOS",	Форма,"Декларация");
	HBUH = ПолучитьПоказательНаСервере("HBUH",	Форма,"Декларация");
	
	ЗаполнитьПоказательНаСервере("HZ",   HZ, 	Форма, НаимРаздела);
	ЗаполнитьПоказательНаСервере("HZN",  HZN, 	Форма, НаимРаздела);
	ЗаполнитьПоказательНаСервере("HZU",  HZU, 	Форма, НаимРаздела);
	
	ЗаполнитьПоказательНаСервере("HTIN", HTIN, 	Форма, НаимРаздела);
	
	ЗаполнитьПоказательНаСервере("HZY",  HZY, 	Форма, НаимРаздела);
	
		H1KV = ПолучитьПоказательНаСервере("H1KV",	Форма,"Декларация");
		HHY  = ПолучитьПоказательНаСервере("HHY",	Форма,"Декларация");
		H3KV = ПолучитьПоказательНаСервере("H3KV",	Форма,"Декларация");
		HY   = ПолучитьПоказательНаСервере("HY",	Форма,"Декларация");
		
		ЗаполнитьПоказательНаСервере("H1KV", H1KV, 	Форма, НаимРаздела);
		ЗаполнитьПоказательНаСервере("HHY",  HHY, 	Форма, НаимРаздела);
		ЗаполнитьПоказательНаСервере("H3KV", H3KV, 	Форма, НаимРаздела);
		ЗаполнитьПоказательНаСервере("HY",   HY, 	Форма, НаимРаздела);
	ЗаполнитьПоказательНаСервере("HBOS", HBOS, 	Форма, НаимРаздела);
	ЗаполнитьПоказательНаСервере("HBUH", HBUH, 	Форма, НаимРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры // ПоказатьПериод()

// УстановитьЦветФонаЯчейкиНаКлиенте()
//
&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // УстановитьЦветФонаЯчейкиНаКлиенте()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // УстановитьЦветФонаЯчейкиНаСервере()

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя) Экспорт
    	
	ПозицияXXXX = Найти(ИмяПоказателя, "XXXX");
	Если ПозицияXXXX > 0 Тогда
		
		ИмяГруппы = Лев(ИмяПоказателя, ПозицияXXXX - 1);

		Если    Лев(ИмяПоказателя,2) = "PN" Тогда
			Возврат 1;
		КонецЕсли;
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
	СтруктураГруппы = Неопределено;

	Если НЕ Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы) Тогда
		Возврат 0;
	Иначе
		СтруктураГруппы = Форма[СтруктураГруппы];
		Возврат СтруктураГруппы.Количество();
	КонецЕсли;

КонецФункции

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;
			
			КолвоСтрокВМногострочнойЧасти = ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
			Иначе
				Многострочность = Ложь;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЦветФонаЯчейки()


&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере()
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма);
		
КонецПроцедуры // ЗаполнитьСведенияОбОрганизацииНаСервере()

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма)
	
	СписокУстанавливаемыхЗначений = Новый СписокЗначений;
	
	ЗаполнитьПоказательНаВсехЗакладках("HZ", "X", Форма);
	ЗаполнитьПоказательНаВсехЗакладках("HZN", "", Форма);
	ЗаполнитьПоказательНаВсехЗакладках("HZU", "", Форма,"|ПриложениеВП|");
	
	ГодОтчета   = Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	МесяцОтчета = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ЗаполнитьПоказательНаВсехЗакладках("HZY",  ГодОтчета, Форма);	
	
	Если МесяцОтчета = 3 Тогда
		ЗаполнитьПоказательНаВсехЗакладках("H1KV", "X", Форма, "|ПриложениеТЦ|");
	ИначеЕсли МесяцОтчета = 6 Тогда
		ЗаполнитьПоказательНаВсехЗакладках("HHY",  "X", Форма, "|ПриложениеТЦ|");
	ИначеЕсли МесяцОтчета = 9 Тогда
		ЗаполнитьПоказательНаВсехЗакладках("H3KV", "X", Форма, "|ПриложениеТЦ|");
	ИначеЕсли МесяцОтчета = 12 Тогда
		ЗаполнитьПоказательНаВсехЗакладках("HY",   "X", Форма, "|ПриложениеТЦ|");
	КонецЕсли;
	
	H02 = ""; H01 = "Х";
	ГодоваяДекларация = (Форма.СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Год);
	Если ГодоваяДекларация Тогда
		H02 = "Х"; H01 = "";
	КонецЕсли;
	ЗаполнитьПоказательНаСервере("H01", H01, Форма, "Декларация");
	ЗаполнитьПоказательНаСервере("H02", H02, Форма, "Декларация");
	
	Организация 				= Форма.СтруктураРеквизитовФормы.Организация;	
	ЗаполнитьПоказательНаСервере("HNAME", Организация.НаименованиеПолное, Форма, "Декларация");
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СписокПоказателей.Добавить("","НалоговаяИнспекция");
	СписокПоказателей.Добавить("","КодКВЕД");
	СписокПоказателей.Добавить("","ЮридическийАдрес");
	СписокПоказателей.Добавить("","Email");
	СписокПоказателей.Добавить("","Телефон");
	СписокПоказателей.Добавить("","Факс");
	СписокПоказателей.Добавить("","Индекс");

	Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, СписокПоказателей);
	КодЕДРПОУ             = Сведения.КодПоЕДРПОУ;
	НалоговаяИнспекция    = Сведения.НалоговаяИнспекция;
	КодКВЕД               = Сведения.КодКВЕД;
	ЮридическийАдрес 	  = Сведения.ЮридическийАдрес;
	HEMAIL  			  = Сведения.Email;	
	Телефон  		      = Сведения.Телефон;	
	Факс  		    	  = Сведения.Факс;	
	Индекс  			  = Сведения.Индекс;	
	
	ЗаполнитьПоказательНаСервере("TIN",  КодЕДРПОУ, Форма, "СлужебныеДанные");
	
	ЗаполнитьПоказательНаВсехЗакладках("HTIN", КодЕДРПОУ, Форма);
	
	ЗаполнитьПоказательНаСервере("HKVED", КодКВЕД, Форма, "Декларация");
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Декларация", "HKVED_",  5, КодКВЕД, Ложь);		
	
	ЗаполнитьПоказательНаСервере("HZIP", Индекс, Форма, "Декларация");
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Декларация", "HZIP_",  5, Индекс, Ложь);		

	ЗаполнитьПоказательНаСервере("HLOC", ЮридическийАдрес, Форма, "Декларация");

	ЗаполнитьПоказательНаСервере("HTEL", Телефон, Форма, "Декларация");
	ПроставитьВКвадратыЗначенияНаВсехЗакладках(Форма, "HTEL_",  10, Телефон, Ложь);	
	
	ЗаполнитьПоказательНаСервере("HFAX", Факс,    Форма, "Декларация");
	ПроставитьВКвадратыЗначенияНаВсехЗакладках(Форма, "HFAX_",  10, Факс, Ложь);	
	   
	ЗаполнитьПоказательНаСервере("HEMAIL", HEMAIL, Форма, "Декларация");
		
	// налоговая инспекция из справочника налоговых инспекций
	Если ЗначениеЗаполнено(НалоговаяИнспекция) Тогда 
		НалоговаяИнспекция_НаименованиеПолное 	= НалоговаяИнспекция.НаименованиеПолное;
		НалоговаяИнспекция_Наименование 		= ?(ЗначениеЗаполнено(НалоговаяИнспекция_НаименованиеПолное),
													НалоговаяИнспекция_НаименованиеПолное, НалоговаяИнспекция.Наименование); 
		ЗаполнитьПоказательНаСервере("HSTI", 		НалоговаяИнспекция_Наименование, 	Форма, "Декларация");
		ЗаполнитьПоказательНаСервере("C_RAJ", 		НалоговаяИнспекция.КодАдмРайона, 	Форма, "СлужебныеДанные");
		ЗаполнитьПоказательНаСервере("C_REG", 		НалоговаяИнспекция.Родитель.Код, 	Форма, "СлужебныеДанные");
		ЗаполнитьПоказательНаСервере("C_STI_ORIG", 	НалоговаяИнспекция.Код, 			Форма, "СлужебныеДанные");
		ЗаполнитьПоказательНаСервере("C_STI", 		НалоговаяИнспекция.Код, 			Форма, "СлужебныеДанные");
	КонецЕсли;
	
	ЗаполнитьПоказательНаСервере("C_DOC_TYPE", 0, Форма, "СлужебныеДанные"); //номер исправленного доекумента. Для первого подающегося документа  = 0
	ЗаполнитьПоказательНаСервере("C_DOC_CNT",  1, Форма, "СлужебныеДанные");;
	ЗаполнитьПоказательНаСервере("C_DOC_STAN", 1, Форма, "СлужебныеДанные");	
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ИмяФАМИЛИЯРук");
	СписокПоказателей.Добавить("","ИмяФАМИЛИЯБух");
	СписокПоказателей.Добавить("","ИННРук");
	СписокПоказателей.Добавить("","ИННБух");
	СведенияДатаПодписи = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.ДатаПодписи, СписокПоказателей);
	
	ФИОДиректора       = СведенияДатаПодписи.ИмяФАМИЛИЯРук;
	ФИОГлавБуха        = СведенияДатаПодписи.ИмяФАМИЛИЯБух;
	ИННДиректора       = СведенияДатаПодписи.ИННРук;
	ИННГлавБуха        = СведенияДатаПодписи.ИННБух;
	
	ЗаполнитьПоказательНаВсехЗакладках("HBOS",  ФИОДиректора, Форма);	
	ЗаполнитьПоказательНаВсехЗакладках("HBUH",  ФИОГлавБуха, Форма);	
	
	ЗаполнитьПоказательНаСервере("HKBOS",  ИННДиректора, Форма, "Декларация");	
	ЗаполнитьПоказательНаСервере("HKBUH",  ИННГлавБуха, Форма,  "Декларация");	
	
	ПроставитьВКвадратыЗначенияНаВсехЗакладках(Форма, "HKBOS_",  10, ИННДиректора, Ложь);
	ПроставитьВКвадратыЗначенияНаВсехЗакладках(Форма, "HKBUH_",  10, ИННГлавБуха, Ложь);
	
	ЗаполнитьПоказательНаСервере("PERIOD_MONTH", МесяцОтчета, Форма, "СлужебныеДанные");
	PERIOD_TYPE = 1;
	Если МесяцОтчета = 3 Тогда
		PERIOD_TYPE = 2;
	ИначеЕсли МесяцОтчета = 6 Тогда
		PERIOD_TYPE = 3;
	ИначеЕсли МесяцОтчета = 9 Тогда
		PERIOD_TYPE = 4;
	ИначеЕсли МесяцОтчета = 12 Тогда
		PERIOD_TYPE = 5;
	КонецЕсли;		
	ЗаполнитьПоказательНаСервере("PERIOD_TYPE",  PERIOD_TYPE,  		  Форма, "СлужебныеДанные");
	ЗаполнитьПоказательНаСервере("PERIOD_YEAR",  ГодОтчета,   Форма, "СлужебныеДанные");
	
	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "ЕРП" Тогда
		Ставка = ПолучитьСтавкуНалогаНаПрибыльЕРП(Организация, Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Иначе
		Ставка = ПолучитьСтавкуНалогаНаПрибыль(Организация, Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	КонецЕсли;	
	
	ЗаполнитьПоказательНаСервере("R006G1",  Ставка,  Форма, "Декларация");
	ЗаполнитьПоказательНаСервере("R006G1",  Ставка,  Форма, "ПриложениеВП");
	ЗаполнитьПоказательНаСервере("R006G1",  Ставка,  Форма, "ПриложениеАВ");
	
	Если Форма.СтруктураРеквизитовФормы.ОрганизацияЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ЗаполнитьПоказательНаСервере("H100",  "Х",  Форма, "Декларация");
	КонецЕсли;
	
	ЗаполнитьДатуПодписи(Форма);
	
	Форма.Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказательНаВсехЗакладкахНаСервере(СписокЗначений, СписокИсключений = "")
	
	Для каждого УстанавливаемоеЗначение Из СписокЗначений Цикл
	
		ЗаполнитьПоказательНаВсехЗакладках(УстанавливаемоеЗначение.Представление, УстанавливаемоеЗначение.Значение, ЭтаФорма, СписокИсключений);	
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПоказательНаВсехЗакладках(ИмяПоказателя, Значение, Форма, СписокИсключений = "")

	Если Найти(СписокИсключений, "|Декларация|") = 0 Тогда
		ЗаполнитьПоказательНаСервере(ИмяПоказателя, Значение, Форма, "Декларация");
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеАВ|") = 0 Тогда
		ЗаполнитьПоказательНаСервере(ИмяПоказателя, Значение, Форма, "ПриложениеАВ");
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеЗП|") = 0 Тогда
		ЗаполнитьПоказательНаСервере(ИмяПоказателя, Значение, Форма, "ПриложениеЗП");
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеПН|") = 0 Тогда
		
		Для каждого ДанныеПН Из Форма.ТаблицаСтраницыРаздела1 Цикл
			ДанныеПН.Данные[0].Значение.Вставить(ИмяПоказателя, Значение)
		КонецЦикла;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ПриложениеПН" Тогда
			Форма.ТабличныйДокумент.Области[ИмяПоказателя].Значение = Значение;
		КонецЕсли;	
		
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеТЦ|") = 0 Тогда
		ЗаполнитьПоказательНаСервере(ИмяПоказателя, Значение, Форма, "ПриложениеТЦ");
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеВП|") = 0 Тогда
		ЗаполнитьПоказательНаСервере(ИмяПоказателя, Значение, Форма, "ПриложениеВП");
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеРИ|") = 0 Тогда
		ЗаполнитьПоказательНаСервере(ИмяПоказателя, Значение, Форма, "ПриложениеРИ");
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеПЗ|") = 0 Тогда
		ЗаполнитьПоказательНаСервере(ИмяПоказателя, Значение, Форма, "ПриложениеПЗ");
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеАМ|") = 0 Тогда
		ЗаполнитьПоказательНаСервере(ИмяПоказателя, Значение, Форма, "ПриложениеАМ");
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеЦП|") = 0 Тогда
		ЗаполнитьПоказательНаСервере(ИмяПоказателя, Значение, Форма, "ПриложениеЦП");
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеПП|") = 0 Тогда
		ЗаполнитьПоказательНаСервере(ИмяПоказателя, Значение, Форма, "ПриложениеПП");
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеКИК|") = 0 Тогда
		Для каждого ДанныеКИК Из Форма.ТаблицаСтраницыРаздела2 Цикл
			ДанныеКИК.Данные[0].Значение.Вставить(ИмяПоказателя, Значение)
		КонецЦикла;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ПриложениеКИК" Тогда
			Форма.ТабличныйДокумент.Области[ИмяПоказателя].Значение = Значение;
		КонецЕсли;	
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеКК|") = 0 Тогда
		Для каждого ДанныеКК Из Форма.ТаблицаСтраницыРаздела3 Цикл
			ДанныеКК.Данные[0].Значение.Вставить(ИмяПоказателя, Значение)
		КонецЦикла;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ПриложениеКК" Тогда
			Форма.ТабличныйДокумент.Области[ИмяПоказателя].Значение = Значение;
		КонецЕсли;	
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеКТЦ|") = 0 Тогда
		Для каждого ДанныеКИК Из Форма.ТаблицаСтраницыРаздела4 Цикл
			ДанныеКИК.Данные[0].Значение.Вставить(ИмяПоказателя, Значение)
		КонецЦикла;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ПриложениеКТЦ" Тогда
			Форма.ТабличныйДокумент.Области[ИмяПоказателя].Значение = Значение;
		КонецЕсли;	
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеКЦП|") = 0 Тогда
		Для каждого ДанныеКИК Из Форма.ТаблицаСтраницыРаздела5 Цикл
			ДанныеКИК.Данные[0].Значение.Вставить(ИмяПоказателя, Значение)
		КонецЦикла;
		Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ПриложениеКЦП" Тогда
			Форма.ТабличныйДокумент.Области[ИмяПоказателя].Значение = Значение;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроставитьВКвадратыЗначенияНаВсехЗакладках(Форма, ИмяПоказателя, Длина, Значение, ДополнитьЗначение = Ложь, НольКакНоль = Ложь, СписокИсключений = "")

	Если Найти(СписокИсключений, "|Декларация|") = 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Декларация", ИмяПоказателя,  Длина, Значение, ДополнитьЗначение, НольКакНоль);		
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеАВ|") = 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "ПриложениеАВ", ИмяПоказателя,  Длина, Значение, ДополнитьЗначение, НольКакНоль);		
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеЗП|") = 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "ПриложениеЗП", ИмяПоказателя,  Длина, Значение, ДополнитьЗначение, НольКакНоль);		
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеПН|") = 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "ПриложениеПН", ИмяПоказателя,  Длина, Значение, ДополнитьЗначение, НольКакНоль);		
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеВП|") = 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "ПриложениеВП", ИмяПоказателя,  Длина, Значение, ДополнитьЗначение, НольКакНоль);		
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеРИ|") = 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "ПриложениеРИ", ИмяПоказателя,  Длина, Значение, ДополнитьЗначение, НольКакНоль);		
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеПЗ|") = 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "ПриложениеПЗ", ИмяПоказателя,  Длина, Значение, ДополнитьЗначение, НольКакНоль);		
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеАМ|") = 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "ПриложениеАМ", ИмяПоказателя,  Длина, Значение, ДополнитьЗначение, НольКакНоль);		
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеЦП|") = 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "ПриложениеЦП", ИмяПоказателя,  Длина, Значение, ДополнитьЗначение, НольКакНоль);		
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеПП|") = 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "ПриложениеПП", ИмяПоказателя,  Длина, Значение, ДополнитьЗначение, НольКакНоль);		
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеКИК|") = 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "ПриложениеКИК", ИмяПоказателя,  Длина, Значение, ДополнитьЗначение, НольКакНоль);		
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеКК|") = 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "ПриложениеКК", ИмяПоказателя,  Длина, Значение, ДополнитьЗначение, НольКакНоль);		
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеКТЦ|") = 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "ПриложениеКТЦ", ИмяПоказателя,  Длина, Значение, ДополнитьЗначение, НольКакНоль);		
	КонецЕсли;
	Если Найти(СписокИсключений, "|ПриложениеКЦП|") = 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "ПриложениеКЦП", ИмяПоказателя,  Длина, Значение, ДополнитьЗначение, НольКакНоль);		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПоказательНаСервере(ИмяОбласти, Значение, Форма, ИмяРазделаПоказателя);

	ТекРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Если ТекРаздел = ИмяРазделаПоказателя Тогда
	
		Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение = Значение;
		
	Иначе	
		
		Форма["СтруктураДанных" + ИмяРазделаПоказателя].Вставить(ИмяОбласти, Значение);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПоказательНаСервере(ИмяОбласти, Форма, ИмяРазделаПоказателя)

	ТекРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Если ТекРаздел = ИмяРазделаПоказателя Тогда
		
		Возврат Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение;
		
	Иначе	
		
		Значение = Неопределено;
		Форма["СтруктураДанных" + ИмяРазделаПоказателя].Свойство(ИмяОбласти, Значение);
		
		Если Значение = Неопределено Тогда
			
			ДанныеПоказателя = Форма.мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента, КодПоказателяПоФорме", ИмяРазделаПоказателя, ИмяОбласти));
			Если ДанныеПоказателя.Количество() > 0
				И (    ДанныеПоказателя[0].ТипДанныхПоказателя = "Ч"
				   ИЛИ ДанныеПоказателя[0].ТипДанныхПоказателя = "Е") Тогда
				Значение = 0;	   
			Иначе
				Значение = "";	
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Значение;
		
	КонецЕсли;	

КонецФункции // ()

// СобратьДанныеТекущегоТаблПоляНаСервере()
//
&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции // СобратьДанныеТекущегоТаблПоляНаСервере()

// СобратьДанныеТекущегоТаблПоляНаКлиенте()
//
&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции // СобратьДанныеТекущегоТаблПоляНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере()
//
&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы", СтруктураРеквизитовФормы.мИдГруппы);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппыPN", СтруктураРеквизитовФормы.мИдГруппыPN);
	ИдГрупп.Вставить("мИдГруппыPZ1", СтруктураРеквизитовФормы.мИдГруппыPZ1);
	ИдГрупп.Вставить("мИдГруппыPZ2", СтруктураРеквизитовФормы.мИдГруппыPZ2);
	ИдГрупп.Вставить("мИдГруппыTC1", СтруктураРеквизитовФормы.мИдГруппыTC1);
	ИдГрупп.Вставить("мИдГруппыTC2", СтруктураРеквизитовФормы.мИдГруппыTC2);
	ИдГрупп.Вставить("мИдГруппыPP", СтруктураРеквизитовФормы.мИдГруппыPP);
	ИдГрупп.Вставить("мИдГруппыKT1", СтруктураРеквизитовФормы.мИдГруппыKT1);
	ИдГрупп.Вставить("мИдГруппыKT2", СтруктураРеквизитовФормы.мИдГруппыKT2);
		
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере()

// ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте()
//
&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы", СтруктураРеквизитовФормы.мИдГруппы);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппыPN", СтруктураРеквизитовФормы.мИдГруппыPN);
	ИдГрупп.Вставить("мИдГруппыPZ1", СтруктураРеквизитовФормы.мИдГруппыPZ1);
	ИдГрупп.Вставить("мИдГруппыPZ2", СтруктураРеквизитовФормы.мИдГруппыPZ2);
	ИдГрупп.Вставить("мИдГруппыTC1", СтруктураРеквизитовФормы.мИдГруппыTC1);
	ИдГрупп.Вставить("мИдГруппыTC2", СтруктураРеквизитовФормы.мИдГруппыTC2);
	ИдГрупп.Вставить("мИдГруппыPP", СтруктураРеквизитовФормы.мИдГруппыPP);
	ИдГрупп.Вставить("мИдГруппыKT1", СтруктураРеквизитовФормы.мИдГруппыKT1);
	ИдГрупп.Вставить("мИдГруппыKT2", СтруктураРеквизитовФормы.мИдГруппыKT2);
		
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	
	Перем ИмяГруппы;
	
	ИмяГруппы = Новый Массив;
	
	Если ИмяЛиста = Неопределено Тогда
        ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Декларация" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы);
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы2);
	ИначеЕсли ИмяТекущейСтраницыПанели = "ПриложениеПН" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппыPN);
	ИначеЕсли ИмяТекущейСтраницыПанели = "ПриложениеПЗ" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппыPZ1);
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппыPZ2);
	ИначеЕсли ИмяТекущейСтраницыПанели = "ПриложениеТЦ" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппыTC1);
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппыTC2);
	ИначеЕсли ИмяТекущейСтраницыПанели = "ПриложениеПП" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппыPP);
	ИначеЕсли ИмяТекущейСтраницыПанели = "ПриложениеКТЦ" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппыKT1);
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппыKT2);
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаСервере()

// ОбновитьСтруктуруМногострочногоРазделаНаКлиенте()
//
&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаКлиенте()

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
    Перем ЕстьДуплекс;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация =	СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи			                              = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий					                      = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
				
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
				
			КонецЕсли;
						
		КонецЦикла;
						
	КонецЕсли;
    	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("ОблагаемаяПрибыльПрошлогоГода", СтруктураРеквизитовФормы.ОблагаемаяПрибыльПрошлогоГода);
	СписокСохранения.Свойство("ВидФинОтчетности", 			   СтруктураРеквизитовФормы.ВидФинОтчетности);
	Если НЕ СписокСохранения.Свойство("ОтчетЗаДваПериода", 	   СтруктураРеквизитовФормы.ОтчетЗаДваПериода) Тогда
		СтруктураРеквизитовФормы.ОтчетЗаДваПериода = Ложь;	
	КонецЕсли;	
	Если НЕ СписокСохранения.Свойство("РИАмортизацияБУБиблФондовМНМА", СтруктураРеквизитовФормы.РИАмортизацияБУБиблФондовМНМА) Тогда
		СтруктураРеквизитовФормы.РИАмортизацияБУБиблФондовМНМА = Ложь;	
	КонецЕсли;	
	Если НЕ СписокСохранения.Свойство("ЛимитСуммыДоходаНалоговыеРазницы", СтруктураРеквизитовФормы.ЛимитСуммыДоходаНалоговыеРазницы) Тогда
		СтруктураРеквизитовФормы.ЛимитСуммыДоходаНалоговыеРазницы = 40000000;	
	КонецЕсли;	
	Если НЕ СписокСохранения.Свойство("ДляФредоТипПериода", 	   СтруктураРеквизитовФормы.ДляФредоТипПериода) Тогда
		СтруктураРеквизитовФормы.ДляФредоТипПериода = Ложь;	
	КонецЕсли;	
	
	ТекДанные = Неопределено;
	СписокСохранения.Свойство("СписаниеНеБезнадежнойЗадолженности_Статьи", ТекДанные);
	Если НЕ ТекДанные = Неопределено Тогда
		СтруктураРеквизитовФормы.СписаниеНеБезнадежнойЗадолженности_Статьи = ТекДанные.Получить();
	КонецЕсли;
	
	ТекДанные = Неопределено;
	СписокСохранения.Свойство("Штрафы_Статьи", ТекДанные);
	Если НЕ ТекДанные = Неопределено Тогда
		СтруктураРеквизитовФормы.Штрафы_Статьи = ТекДанные.Получить();
	КонецЕсли;
	
	ТекДанные = Неопределено;
	СписокСохранения.Свойство("ПередачаНеприбыльным_СтатьиЗатрат", ТекДанные);
	Если НЕ ТекДанные = Неопределено Тогда
		СтруктураРеквизитовФормы.ПередачаНеприбыльным_СтатьиЗатрат = ТекДанные.Получить();
	КонецЕсли;
	
	ТекДанные = Неопределено;
	СписокСохранения.Свойство("Контрагенты_Неприбыльные", ТекДанные);
	Если НЕ ТекДанные = Неопределено Тогда
		СтруктураРеквизитовФормы.Контрагенты_Неприбыльные = ТекДанные.Получить();
	КонецЕсли;
	
	ТекДанные = Неопределено;
	СписокСохранения.Свойство("Контрагенты_Оффшоры", ТекДанные);
	Если НЕ ТекДанные = Неопределено Тогда
		СтруктураРеквизитовФормы.Контрагенты_Оффшоры = ТекДанные.Получить();
	КонецЕсли;
	
	ТекДанные = Неопределено;
	СписокСохранения.Свойство("Контрагенты_ОффшорыОргформа", ТекДанные);
	Если НЕ ТекДанные = Неопределено Тогда
		СтруктураРеквизитовФормы.Контрагенты_ОффшорыОргформа = ТекДанные.Получить();
	КонецЕсли;

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
					
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
									 				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("ДополнительныеДанные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДополнительныеДанные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.ДополнительныеДанные.Очистить();
							СтрокаТаблЗнач.ДополнительныеДанные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].ДополнительныеДанные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
								
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							СтруктураДопСтрок = Новый Структура;
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
								
								СтруктураДопСтрок.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
                                								
							КонецЦикла;
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтруктураДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
								   				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;

	СписокСохранения.Свойство("ЕстьДуплекс", ЕстьДуплекс);
	Если ЕстьДуплекс = Неопределено Тогда
		ЕстьДуплекс = Ложь;
	КонецЕсли;
	СтруктураРеквизитовФормы.ЕстьДуплекс = ЕстьДуплекс;
	Элементы.ЕстьДуплекс.Пометка         = ЕстьДуплекс;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;
	ИмяТекРаздела = "Декларация";
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, 1);
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);

	Модифицированность   = Ложь;
	
КонецПроцедуры // ВосстановитьСохраненныеДанные()

// ВывестиРазделВТабличныйДокументНаКлиенте()
//
&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры // ВывестиРазделВТабличныйДокументНаКлиенте()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры // ВывестиРазделВТабличныйДокументНаСервере()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//  ПерерисоватьСтроки - Истина из процедуры удаления доп. строк, для перерисовки областей.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = Неопределено)
	Перем ИсходноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
		
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	ПерерисоватьСтроки = (НЕ ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы);
		
	Раздел = Форма[ТекТабличноеПолеИмя];
	
	КолонкиГруппы = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];		
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе");
		
		КолонкиМногострочныхРазделов = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов;
		ИмяОбластиПечати			 = "";
		
		ДанныеОПечатиОтчета = Форма.мДеревоСтраницОтчета.ПолучитьЭлементы();
		Для Сч = 1 По ДанныеОПечатиОтчета.Количество() Цикл
			ДанныеОПечатиСтраницы = ДанныеОПечатиОтчета[Сч - 1];	
			Если ДанныеОПечатиСтраницы.ИмяСтраницы = ТекущаяСтраница Тогда
				ИмяОбластиПечати = ДанныеОПечатиСтраницы.ИмяОбластиТабличногоПоля;	
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		
		РегламентированнаяОтчетностьВызовСервера.ВывестиРазделВТабличныйДокументНаСервере(НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, КолонкиМногострочныхРазделов, ИмяОбластиПечати);
		
		Форма[ТекТабличноеПолеИмя] = Раздел;
		ТекТабличноеПоле           = Форма[ТекТабличноеПолеИмя];
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
		
		Для Каждого КолонкаТаблицыИмя Из КолонкиГруппы Цикл
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;
				
				ОбластьЯчейкиТаблицы          = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

&НаКлиенте
Процедура СохранитьОтчет(Команда)
		
	СохранитьНаКлиенте();
		
КонецПроцедуры

// СохранитьНаКлиенте()
//
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт

	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, Автосохранение) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(Автосохранение, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
				
КонецПроцедуры // СохранитьНаКлиенте()

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// ПередСохранением()
//
&НаСервере
Функция ПередСохранением(Автосохранение, НаимТекРаздела)
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Возврат Сохранить(Автосохранение, НаимТекРаздела);
		
КонецФункции // ПередСохранением()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
&НаСервере
Функция Сохранить(Автосохранение = Ложь, НаимТекРаздела) Экспорт	
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
			
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, Автосохранение, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета 			 = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета 		 = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;

	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	СписокСохранения.Вставить("ОтчетЗаДваПериода",  			СтруктураРеквизитовФормы.ОтчетЗаДваПериода);
	СписокСохранения.Вставить("ВидФинОтчетности",  				СтруктураРеквизитовФормы.ВидФинОтчетности);
	СписокСохранения.Вставить("ОблагаемаяПрибыльПрошлогоГода",	СтруктураРеквизитовФормы.ОблагаемаяПрибыльПрошлогоГода);
	СписокСохранения.Вставить("РИАмортизацияБУБиблФондовМНМА",	СтруктураРеквизитовФормы.РИАмортизацияБУБиблФондовМНМА);
	СписокСохранения.Вставить("ЛимитСуммыДоходаНалоговыеРазницы",	СтруктураРеквизитовФормы.ЛимитСуммыДоходаНалоговыеРазницы);
	СписокСохранения.Вставить("ДляФредоТипПериода",  			СтруктураРеквизитовФормы.ДляФредоТипПериода);

	СписокСохранения.Вставить("Контрагенты_Оффшоры",  						Новый ХранилищеЗначения(СтруктураРеквизитовФормы.Контрагенты_Оффшоры));
	СписокСохранения.Вставить("Контрагенты_ОффшорыОргформа",  						Новый ХранилищеЗначения(СтруктураРеквизитовФормы.Контрагенты_ОффшорыОргформа));
	СписокСохранения.Вставить("Контрагенты_Неприбыльные",  					Новый ХранилищеЗначения(СтруктураРеквизитовФормы.Контрагенты_Неприбыльные));
	СписокСохранения.Вставить("ПередачаНеприбыльным_СтатьиЗатрат",  		Новый ХранилищеЗначения(СтруктураРеквизитовФормы.ПередачаНеприбыльным_СтатьиЗатрат));
	СписокСохранения.Вставить("СписаниеНеБезнадежнойЗадолженности_Статьи",  Новый ХранилищеЗначения(СтруктураРеквизитовФормы.СписаниеНеБезнадежнойЗадолженности_Статьи));
	СписокСохранения.Вставить("Штрафы_Статьи",  							Новый ХранилищеЗначения(СтруктураРеквизитовФормы.Штрафы_Статьи));
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ТаблЗнач.Колонки.Найти("ДополнительныеДанные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("ДополнительныеДанные");
				ТаблЗнач.Колонки.Добавить("ДополнительныеДанные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.ДополнительныеДанные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДополнительныеДанные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение Цикл
														
						СтруктураДанныхДопСтрок.Вставить(ЭлСтруктуры.Ключ, ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
					
					Ном = Ном + 1;
			
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;

		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	// вставляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	// вставляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	СписокСохранения.Вставить("ЕстьДуплекс", СтруктураРеквизитовФормы.ЕстьДуплекс);
	
	Если СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда
		СписокСохранения.Вставить("СозданКакХранилищеПараметровДляЗвит1С", Истина);
	КонецЕсли;
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1';uk='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
			
	Модифицированность   = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Возврат Истина;

КонецФункции // Сохранить()

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоказателиОтчетаНаСервере()

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			ЗаполнитьПоказателиЗначениямиПоУмолчанию(Раздел.ИмяСтраницы);
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь, Ложь);	

		КонецЕсли;
		
		Если Раздел.ИмяСтраницы = "ПриложениеПН" или Раздел.ИмяСтраницы = "ПриложениеКТЦ" Тогда  
			//многостраничные разделы с многострочками
			Для Каждого Страница Из ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]] Цикл
		   		Если Страница.ДополнительныеДанные.Количество() = 0 Тогда
					Страница.ДополнительныеДанные.Очистить();
					Страница.ДополнительныеДанные.Добавить(Новый Структура);
					Страница.ДополнительныеДанные[0].Пометка = Ложь;
				КонецЕсли;
				
		   		Если Страница.Данные.Количество() = 0 Тогда
					Страница.Данные.Очистить();
					Страница.Данные.Добавить(Новый Структура);
					Страница.Данные[0].Пометка = Ложь;
				КонецЕсли;
				
		   		Если Страница.ДанныеДопСтрок.Количество() = 0 Тогда
					Страница.ДанныеДопСтрок.Очистить();
					Страница.ДанныеДопСтрок.Добавить(Новый Структура);
					Страница.ДанныеДопСтрок[0].Пометка = Ложь;
				КонецЕсли;
				
			КонецЦикла;
		ИначеЕсли Раздел.ИмяСтраницы = "ПриложениеКИК" или Раздел.ИмяСтраницы = "ПриложениеКК" или Раздел.ИмяСтраницы = "ПриложениеКЦП" Тогда   
			//многостраничные разделы без многострочек
			Для Каждого Страница Из ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]] Цикл
		   		Если Страница.ДополнительныеДанные.Количество() = 0 Тогда
					Страница.ДополнительныеДанные.Очистить();
					Страница.ДополнительныеДанные.Добавить(Новый Структура);
					Страница.ДополнительныеДанные[0].Пометка = Ложь;
				КонецЕсли;
				
		   		Если Страница.Данные.Количество() = 0 Тогда
					Страница.Данные.Очистить();
					Страница.Данные.Добавить(Новый Структура);
					Страница.Данные[0].Пометка = Ложь;
				КонецЕсли;
				
				//Если Страница.ДанныеДопСтрок.Количество() = 0 Тогда
				//	Страница.ДанныеДопСтрок.Очистить();
				//	Страница.ДанныеДопСтрок.Добавить(Новый Структура);
				//	Страница.ДанныеДопСтрок[0].Пометка = Ложь;
				//КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры // ЗаполнитьПустыеСтруктурыДанных()

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры // СохранитьДеревоНастройкиСтраниц()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы <> Неопределено Тогда 
		
		Если ЗавершениеРаботы И Модифицированность Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы <> Неопределено Тогда
		
		Если ЗавершениеРаботы Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ПриЗакрытииНаСервере();
		
КонецПроцедуры // ПриЗакрытии()

// ПриЗакрытииНаСервере()
//
&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("РегламентированнаяОтчетность", "ЕстьДуплекс", СтруктураРеквизитовФормы.ЕстьДуплекс);
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытииНаСервере()

// ПоказатьСтраницуМногостраничногоРазделаНаКлиенте()
//
&НаКлиенте
Процедура ПоказатьСтраницуМногостраничногоРазделаНаКлиенте(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	
	ПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРазделаНаКлиенте()

// ПоказатьСтраницуМногостраничногоРазделаНаСервере()
//
&НаСервере
Процедура ПоказатьСтраницуМногостраничногоРазделаНаСервере(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	
	ПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
		
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРазделаНаСервере()

// ПоказатьСтраницуМногостраничногоРаздела()
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСтраницуМногостраничногоРаздела(Форма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьСтраницуМногостраничногоРаздела(Форма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

&НаКлиенте
Процедура ИзменитьЦветЯчеекНаКлиенте() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры // ИзменитьЦветЯчеекНаКлиенте()

&НаСервере
Процедура ИзменитьЦветЯчеекНаСервере() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры // ИзменитьЦветЯчеекНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьЦветЯчеек(Форма)

		
КонецПроцедуры // ИзменитьЦветЯчеек()





// ОбновитьПеременныеМодуляНаСервере()
//
&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции // ОбновитьПеременныеМодуляНаСервере()

// ОбновитьПеременныеМодуляНаКлиенте()
//
&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции // ОбновитьПеременныеМодуляНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(Форма, ИмяПоказателя, ЗначениеПоказателя)
	
	ИзмененияПроизошли = Ложь;
	
	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;
	

	Возврат ИзмененияПроизошли;
	
КонецФункции // ОбновитьПеременныеМодуля()

// ОчиститьТабличноеПолеНаКлиенте()
//
&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры // ОчиститьТабличноеПолеНаКлиенте()

// ОчиститьТабличноеПолеНаСервере()
//
&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры // ОчиститьТабличноеПолеНаСервере()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	// Непосредственно очищаем ячейки табличного документа. РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле делает то же самое
	// Повторно, так как в результате расчета многостраничного многострочного блока заполняются итоговые ячейки, 
	// в арифметике которых есть показатели не из многострочного блока
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		Если Найти(Врег(ТекущаяОбласть.Имя), ВРег("Штампик")) > 0  Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;

	ЗаполнитьСведенияОбОрганизации(Форма);
	
КонецПроцедуры // ОчиститьТабличноеПоле()

// РасчетНаКлиенте()
//
&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры // РасчетНаКлиенте()

// РасчетНаСервере()
//
&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры // РасчетНаСервере()

// РАСЧЕТ()
// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет
// Параметры:
//  ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//
&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", ОбластьИмя = "")
	Перем ТаблицаБлока;
	
	Если (Форма.СтруктураРеквизитовФормы.мРежимПечати) Тогда
		Возврат; // служебный вызов в процессе печати
	КонецЕсли;
	
	Если (Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
		Возврат; // отключен режим авторасчета
	КонецЕсли;
	
	// обновим данные многострочных групп
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда

		ИдГрупп = Новый Структура;
		ИдГрупп.Вставить("мИдГруппы", Форма.СтруктураРеквизитовФормы.мИдГруппы);
		ИдГрупп.Вставить("мИдГруппы2", Форма.СтруктураРеквизитовФормы.мИдГруппы2);
		ИдГрупп.Вставить("мИдГруппыPN", Форма.СтруктураРеквизитовФормы.мИдГруппыPN);
		ИдГрупп.Вставить("мИдГруппыPZ1", Форма.СтруктураРеквизитовФормы.мИдГруппыPZ1);
		ИдГрупп.Вставить("мИдГруппыPZ2", Форма.СтруктураРеквизитовФормы.мИдГруппыPZ2);
		ИдГрупп.Вставить("мИдГруппыTC1", Форма.СтруктураРеквизитовФормы.мИдГруппыTC1);
		ИдГрупп.Вставить("мИдГруппыTC2", Форма.СтруктураРеквизитовФормы.мИдГруппыTC2);
		ИдГрупп.Вставить("мИдГруппыPP", Форма.СтруктураРеквизитовФормы.мИдГруппыPP);
		ИдГрупп.Вставить("мИдГруппыKT1", Форма.СтруктураРеквизитовФормы.мИдГруппыKT1);
		ИдГрупп.Вставить("мИдГруппыKT2", Форма.СтруктураРеквизитовФормы.мИдГруппыKT2);

		ИмяГруппыМассив =  ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяСтраницыПанели, , ИдГрупп);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
			РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
		КонецЦикла;
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////////////////
	// ТЦ
	Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппыTC1, ТаблицаБлока);
	ТекСтруктура = Форма[ТаблицаБлока];

	R01G14 = ОкруглитьЧислоПоФормату(Форма, ТекСтруктура.Итог("TCT1RXXXXG14"));
	R01G15 = ОкруглитьЧислоПоФормату(Форма, ТекСтруктура.Итог("TCT1RXXXXG15"));
	R01G16 = ОкруглитьЧислоПоФормату(Форма, ТекСтруктура.Итог("TCT1RXXXXG16"));
	R01G17 = ОкруглитьЧислоПоФормату(Форма, ТекСтруктура.Итог("TCT1RXXXXG17"));
	ЗаполнитьПоказательНаСервере("R01G14", R01G14, Форма, "ПриложениеТЦ");
	ЗаполнитьПоказательНаСервере("R01G15", R01G15, Форма, "ПриложениеТЦ");
	ЗаполнитьПоказательНаСервере("R01G16", R01G16, Форма, "ПриложениеТЦ");
	ЗаполнитьПоказательНаСервере("R01G17", R01G17, Форма, "ПриложениеТЦ");
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппыTC2, ТаблицаБлока);
	ТекСтруктура = Форма[ТаблицаБлока];
	R02G14 = ОкруглитьЧислоПоФормату(Форма, ТекСтруктура.Итог("TCT2RXXXXG14"));
	R02G15 = ОкруглитьЧислоПоФормату(Форма, ТекСтруктура.Итог("TCT2RXXXXG15"));
	R02G16 = ОкруглитьЧислоПоФормату(Форма, ТекСтруктура.Итог("TCT2RXXXXG16"));
	R02G17 = ОкруглитьЧислоПоФормату(Форма, ТекСтруктура.Итог("TCT2RXXXXG17"));
	ЗаполнитьПоказательНаСервере("R02G14", R02G14, Форма, "ПриложениеТЦ");
	ЗаполнитьПоказательНаСервере("R02G15", R02G15, Форма, "ПриложениеТЦ");
	ЗаполнитьПоказательНаСервере("R02G16", R02G16, Форма, "ПриложениеТЦ");
	ЗаполнитьПоказательНаСервере("R02G17", R02G17, Форма, "ПриложениеТЦ");
	
	//////////////////////////////////////////////////////////////////////////////////////////
	// ЦП
	ЗаполнитьПоказательНаСервере("R0112G3", R02G15, Форма, "ПриложениеЦП");
	ЗаполнитьПоказательНаСервере("R0212G3", R02G17, Форма, "ПриложениеЦП");
	
	R01G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R011G3", Форма, "ПриложениеЦП"))
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R012G3", Форма, "ПриложениеЦП"))
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R013G3", Форма, "ПриложениеЦП"))
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R014G3", Форма, "ПриложениеЦП"))
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R015G3", Форма, "ПриложениеЦП"))
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R016G3", Форма, "ПриложениеЦП"))
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R017G3", Форма, "ПриложениеЦП"))
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R018G3", Форма, "ПриложениеЦП"))
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R019G3", Форма, "ПриложениеЦП"))
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0110G3", Форма, "ПриложениеЦП"))
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01110G3", Форма, "ПриложениеЦП"))
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0112G3", Форма, "ПриложениеЦП"))
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0113G3", Форма, "ПриложениеЦП"));
	ЗаполнитьПоказательНаСервере("R01G3", R01G3, Форма, "ПриложениеЦП");
										 
	R02G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R021G3", Форма, "ПриложениеЦП"))
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R022G3", Форма, "ПриложениеЦП"))
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R023G3", Форма, "ПриложениеЦП"))
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R024G3", Форма, "ПриложениеЦП"))
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R025G3", Форма, "ПриложениеЦП"))
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R026G3", Форма, "ПриложениеЦП"))
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R027G3", Форма, "ПриложениеЦП"))
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R028G3", Форма, "ПриложениеЦП"))
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R029G3", Форма, "ПриложениеЦП"))
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0210G3", Форма, "ПриложениеЦП"))
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R02110G3", Форма, "ПриложениеЦП"))
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0212G3", Форма, "ПриложениеЦП"))
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0213G3", Форма, "ПриложениеЦП"));
	ЗаполнитьПоказательНаСервере("R02G3", R02G3, Форма, "ПриложениеЦП");
										 
	R0413G3 = ПолучитьПоказательНаСервере("R04131G3", Форма, "ПриложениеЦП")
			 -ПолучитьПоказательНаСервере("R04132G3", Форма, "ПриложениеЦП");
	ЗаполнитьПоказательНаСервере("R0413G3", R0413G3, Форма, "ПриложениеЦП");
	
	R0414G3 = ПолучитьПоказательНаСервере("R01G3", Форма, "ПриложениеЦП")
			 -ПолучитьПоказательНаСервере("R02G3", Форма, "ПриложениеЦП")
			 -ПолучитьПоказательНаСервере("R03G3", Форма, "ПриложениеЦП")
			 -ПолучитьПоказательНаСервере("R04G3", Форма, "ПриложениеЦП");
	ЗаполнитьПоказательНаСервере("R0414G3", R0414G3, Форма, "ПриложениеЦП");
	
	//////////////////////////////////////////////////////////////////////////////////////////
	// АМ
	R0117G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0102G3", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0103G3", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01031G3", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0104G3", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01041G3", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0105G3", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01051G3", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0106G3", Форма, "ПриложениеАМ"))	
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0107G3", Форма, "ПриложениеАМ"))	
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0108G3", Форма, "ПриложениеАМ"))	
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0109G3", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01091G3", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0112G3", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0114G3", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0115G3", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0116G3", Форма, "ПриложениеАМ"));	
	ЗаполнитьПоказательНаСервере("R0117G3", R0117G3, Форма, "ПриложениеАМ");
	
	R0117G4 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0102G4", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0103G4", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01031G4", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0104G4", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01041G4", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0105G4", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01051G4", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0106G4", Форма, "ПриложениеАМ"))	
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0107G4", Форма, "ПриложениеАМ"))	
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0108G4", Форма, "ПриложениеАМ"))	
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0109G4", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01091G4", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0112G4", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0114G4", Форма, "ПриложениеАМ"))	
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0115G4", Форма, "ПриложениеАМ"))	
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0116G4", Форма, "ПриложениеАМ"));	
	ЗаполнитьПоказательНаСервере("R0117G4", R0117G4, Форма, "ПриложениеАМ");
	
	R0117G5 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0102G5", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0103G5", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01031G5", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0104G5", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01041G5", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0105G5", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01051G5", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0106G5", Форма, "ПриложениеАМ"))	
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0107G5", Форма, "ПриложениеАМ"))	
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0108G5", Форма, "ПриложениеАМ"))	
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0109G5", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01091G5", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0112G5", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0114G5", Форма, "ПриложениеАМ"))	
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0115G5", Форма, "ПриложениеАМ"))	
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0116G5", Форма, "ПриложениеАМ"));	
	ЗаполнитьПоказательНаСервере("R0117G5", R0117G5, Форма, "ПриложениеАМ");
	

	R0207G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0201G3", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0202G3", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0203G3", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0204G3", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0205G3", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0206G3", Форма, "ПриложениеАМ"));	
	ЗаполнитьПоказательНаСервере("R0207G3", R0207G3, Форма, "ПриложениеАМ");
										   
	R0207G4 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0201G4", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0202G4", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0203G4", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0204G4", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0205G4", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0206G4", Форма, "ПриложениеАМ"));	
	ЗаполнитьПоказательНаСервере("R0207G4", R0207G4, Форма, "ПриложениеАМ");
										   
	R0207G5 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0201G5", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0202G5", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0203G5", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0204G5", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0205G5", Форма, "ПриложениеАМ"))
										   + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0206G5", Форма, "ПриложениеАМ"));
	ЗаполнитьПоказательНаСервере("R0207G5", R0207G5, Форма, "ПриложениеАМ");
										   
	R00121G3 =  ПолучитьПоказательНаСервере("R0117G5", Форма, "ПриложениеАМ")
											+  ПолучитьПоказательНаСервере("R0207G5", Форма, "ПриложениеАМ");
	ЗаполнитьПоказательНаСервере("R00121G3", R00121G3, Форма, "ПриложениеАМ");
	//таблица 2									   
	R03G3 =  ПолучитьПоказательНаСервере("R03G1", Форма, "ПриложениеАМ")
											-  ПолучитьПоказательНаСервере("R03G2", Форма, "ПриложениеАМ");
	ЗаполнитьПоказательНаСервере("R03G3", R03G3, Форма, "ПриложениеАМ");
										   
	//////////////////////////////////////////////////////////////////////////////////////////
	// ПЗ
	ЗаполнитьПоказательНаСервере("R005G3", 0, Форма, "ПриложениеПЗ");
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппыPZ1, ТаблицаБлока);
	СтруктураПЗ1 = Форма[ТаблицаБлока];
	Для каждого СтрокаПЗ1 Из СтруктураПЗ1 Цикл
	
		СтрокаПЗ1.PZT1RXXXXG1 =   ОкруглитьЧислоПоФормату(Форма, СтрокаПЗ1.PZT1RXXXXG2)
						  +	ОкруглитьЧислоПоФормату(Форма, СтрокаПЗ1.PZT1RXXXXG3)
						  - ОкруглитьЧислоПоФормату(Форма, СтрокаПЗ1.PZT1RXXXXG4);
						  
		ЗаполнитьПоказательНаСервере("PZT1RXXXXG1_"+Формат(СтруктураПЗ1.Индекс(СтрокаПЗ1) + 1, "ЧГ=;"), СтрокаПЗ1.PZT1RXXXXG1, Форма, "ПриложениеПЗ");

		R005G3 = ПолучитьПоказательНаСервере("R005G3", Форма, "ПриложениеПЗ") + СтрокаПЗ1.PZT1RXXXXG1;
		ЗаполнитьПоказательНаСервере("R005G3", R005G3, Форма, "ПриложениеПЗ");
		
	КонецЦикла;
											
	//////////////////////////////////////////////////////////////////////////////////////////
	// РИ
	ЗаполнитьПоказательНаСервере("R0121G3", ПолучитьПоказательНаСервере("R00121G3", Форма, "ПриложениеАМ"), Форма, "ПриложениеРИ");									
	
	ЗаполнитьПоказательНаСервере("R0313G3", ПолучитьПоказательНаСервере("R01G15", Форма, "ПриложениеТЦ"), Форма, "ПриложениеРИ");
	ЗаполнитьПоказательНаСервере("R0314G3", ПолучитьПоказательНаСервере("R01G17", Форма, "ПриложениеТЦ"), Форма, "ПриложениеРИ");
	
	R0413G3 = -ПолучитьПоказательНаСервере("R0413G3", Форма, "ПриложениеЦП");
	Если R0413G3 < 0 Тогда
		R0413G3 = 0;
	КонецЕсли;	
	ЗаполнитьПоказательНаСервере("R0413G3", R0413G3, Форма, "ПриложениеРИ");
	
	R0414G3 = ПолучитьПоказательНаСервере("R0414G3", Форма, "ПриложениеЦП");
	Если R0414G3 < 0 Тогда
		R0414G3 = 0;
	КонецЕсли;	
	ЗаполнитьПоказательНаСервере("R0414G3", R0414G3, Форма, "ПриложениеРИ");

	Если ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04117G3", Форма, "ПриложениеРИ")) > ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04216G3", Форма, "ПриложениеРИ")) Тогда
		ЗаполнитьПоказательНаСервере("R04117G3", ПолучитьПоказательНаСервере("R04216G3", Форма, "ПриложениеРИ"), Форма, "ПриложениеРИ");
	КонецЕсли;												

	R001G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0111G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01111G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0112G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0113G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0114G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0211G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0212G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0213G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0214G3", Форма, "ПриложениеРИ"))  
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0215G3", Форма, "ПриложениеРИ"))   
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0311G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0312G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0313G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0314G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0315G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0316G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R03161G3", Форма, "ПриложениеРИ"))  
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R03162G3", Форма, "ПриложениеРИ"))  
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R03163G3", Форма, "ПриложениеРИ"))  
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0317G3", Форма, "ПриложениеРИ"))   
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R03171G3", Форма, "ПриложениеРИ"))  
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R03172G3", Форма, "ПриложениеРИ"))  
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0318G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0319G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R03110G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R031101G3", Форма, "ПриложениеРИ"))  
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R03111G3", Форма, "ПриложениеРИ"))   
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R03112G3", Форма, "ПриложениеРИ"))   
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R03113G3", Форма, "ПриложениеРИ"))   
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R03114G3", Форма, "ПриложениеРИ"))   
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0411G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0412G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0413G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0414G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04141G3", Форма, "ПриложениеРИ"))  
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0415G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04151G3", Форма, "ПриложениеРИ"))  
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0416G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0417G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0418G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0419G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04110G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04111G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04112G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04113G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04114G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04115G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04116G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04117G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R041171G3", Форма, "ПриложениеРИ")) 
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04118G3", Форма, "ПриложениеРИ"))  
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04119G3", Форма, "ПриложениеРИ")) 
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04120G3", Форма, "ПриложениеРИ"))  
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04121G3", Форма, "ПриложениеРИ")); 
	ЗаполнитьПоказательНаСервере("R001G3", R001G3, Форма, "ПриложениеРИ");

	R002G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0121G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01211G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01212G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0122G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0123G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0221G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R02211G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0222G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0223G3", Форма, "ПриложениеРИ")) 
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0224G3", Форма, "ПриложениеРИ"))  
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R02241G3", Форма, "ПриложениеРИ"))  
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0321G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0322G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0323G3", Форма, "ПриложениеРИ"))  
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R03231G3", Форма, "ПриложениеРИ")) 
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R03232G3", Форма, "ПриложениеРИ")) 
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R03233G3", Форма, "ПриложениеРИ")) 
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R03234G3", Форма, "ПриложениеРИ")) 
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0324G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R03241G3", Форма, "ПриложениеРИ")) 
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0325G3", Форма, "ПриложениеРИ"))  
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0421G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0422G3", Форма, "ПриложениеРИ")) 
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0423G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0424G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0425G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0426G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0427G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0428G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0429G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04210G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04211G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04212G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04213G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04214G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04215G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04216G3", Форма, "ПриложениеРИ"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R042161G3", Форма, "ПриложениеРИ"))  
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R042162G3", Форма, "ПриложениеРИ"))  
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04217G3", Форма, "ПриложениеРИ"))  
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04218G3", Форма, "ПриложениеРИ"))  
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04219G3", Форма, "ПриложениеРИ")) 
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04220G3", Форма, "ПриложениеРИ"))  
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R04221G3", Форма, "ПриложениеРИ")); 
										  
	ЗаполнитьПоказательНаСервере("R002G3", R002G3, Форма, "ПриложениеРИ");
	
	R003G3 =   ПолучитьПоказательНаСервере("R001G3", Форма, "ПриложениеРИ") 
											- ПолучитьПоказательНаСервере("R002G3", Форма, "ПриложениеРИ"); 
	ЗаполнитьПоказательНаСервере("R003G3", R003G3, Форма, "ПриложениеРИ");
											
	//////////////////////////////////////////////////////////////////////////////////////////
	// ВП
	R004G3 =  ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R002G3", Форма, "ПриложениеВП"))
											+ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R003G3", Форма, "ПриложениеВП"));
	ЗаполнитьПоказательНаСервере("R004G3", R004G3, Форма, "ПриложениеВП");
											
	R006G3 = (ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R004G3", Форма, "ПриложениеВП"))
											 -ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R005G3", Форма, "ПриложениеВП"))
											)* ПолучитьПоказательНаСервере("R006G1", Форма, "ПриложениеВП") / 100;
	ЗаполнитьПоказательНаСервере("R006G3", R006G3, Форма, "ПриложениеВП");
	
	R008G3 = (ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R007G3", Форма, "ПриложениеВП"))
											 -ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0071G3", Форма, "ПриложениеВП"))
											 -ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0072G3", Форма, "ПриложениеВП"))
											)* ПолучитьПоказательНаСервере("R008G1", Форма, "ПриложениеВП") / 100;
	ЗаполнитьПоказательНаСервере("R008G3", R008G3, Форма, "ПриложениеВП");
	
	R0091G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R00911G3", Форма, "ПриложениеВП"))
			 -ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R00912G3", Форма, "ПриложениеВП"));
			 
	Если R0091G3 < 0 Тогда
		R0091G3 = 0;
	КонецЕсли;		 
	ЗаполнитьПоказательНаСервере("R0091G3", R0091G3, Форма, "ПриложениеВП");
	
	R009G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0091G3", Форма, "ПриложениеВП"))
			+ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0092G3", Форма, "ПриложениеВП"));
	ЗаполнитьПоказательНаСервере("R009G3", R009G3, Форма, "ПриложениеВП");
	
	R010G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R009G3", Форма, "ПриложениеВП"))
											* ПолучитьПоказательНаСервере("R010G1", Форма, "ПриложениеВП") / 100;
	ЗаполнитьПоказательНаСервере("R010G3", R010G3, Форма, "ПриложениеВП");
											
	R012G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R011G3", Форма, "ПриложениеВП"))
											* ПолучитьПоказательНаСервере("R012G1", Форма, "ПриложениеВП") / 100;
	ЗаполнитьПоказательНаСервере("R012G3", R012G3, Форма, "ПриложениеВП");
											
	R015G3 = (ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R013G3", Форма, "ПриложениеВП"))
											 -ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R014G3", Форма, "ПриложениеВП"))
											)* ПолучитьПоказательНаСервере("R015G1", Форма, "ПриложениеВП") / 100;
	ЗаполнитьПоказательНаСервере("R015G3", R015G3, Форма, "ПриложениеВП");
											
	R017G3 =  ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R006G3", Форма, "ПриложениеВП"))
											+ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R008G3", Форма, "ПриложениеВП"))
											+ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0061G3", Форма, "ПриложениеВП"))
											+ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R010G3", Форма, "ПриложениеВП"))
											+ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R012G3", Форма, "ПриложениеВП"))
											+ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R015G3", Форма, "ПриложениеВП"))
											-ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R016G3", Форма, "ПриложениеВП"));
	ЗаполнитьПоказательНаСервере("R017G3",R017G3, Форма, "ПриложениеВП");
											
	R019G3 =  ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R017G3", Форма, "ПриложениеВП"))
											-ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R018G3", Форма, "ПриложениеВП"));
	ЗаполнитьПоказательНаСервере("R019G3", R019G3, Форма, "ПриложениеВП");
											
	R022G3 =  ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R020G3", Форма, "ПриложениеВП"))
											-ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R021G3", Форма, "ПриложениеВП"));
	ЗаполнитьПоказательНаСервере("R022G3", R022G3, Форма, "ПриложениеВП");
											
	R025G3 =  ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R023G3", Форма, "ПриложениеВП"))
											-ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R024G3", Форма, "ПриложениеВП"));
	ЗаполнитьПоказательНаСервере("R025G3", R025G3, Форма, "ПриложениеВП");
											
	R028G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R026G3", Форма, "ПриложениеВП"))* 0.05;
	Если R028G3 < 0 Тогда
		R028G3 = 0;
	КонецЕсли;
	ЗаполнитьПоказательНаСервере("R028G3", R028G3, Форма, "ПриложениеВП");
	
	R031G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R030G3", Форма, "ПриложениеВП"))* 0.05;
	Если R031G3 < 0 Тогда
		R031G3 = 0;
	КонецЕсли;
	ЗаполнитьПоказательНаСервере("R031G3", R031G3, Форма, "ПриложениеВП");	
	
										   
	//////////////////////////////////////////////////////////////////////////////////////////
	// ПН
	Если ИмяСтраницыПанели = "ПриложениеПН" Тогда
		R0218G5 = 0;
		R0218G6 = 0;
		
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппыPN, ТаблицаБлока);
		СтруктураПН = Форма[ТаблицаБлока];
		Для каждого СтрокаПН Из СтруктураПН Цикл
			
			СтрокаПН.PNT2RXXXXG5 =  ОкруглитьЧислоПоФормату(Форма, СтрокаПН.PNT2RXXXXG4)
							- ОкруглитьЧислоПоФормату(Форма, СтрокаПН.PNT2RXXXXG3);
			ЗаполнитьПоказательНаСервере("PNT2RXXXXG5_"+Формат(СтруктураПН.Индекс(СтрокаПН) + 1, "ЧГ=;"), СтрокаПН.PNT2RXXXXG5, Форма, "ПриложениеПН");
			R0218G5 = R0218G5 + ОкруглитьЧислоПоФормату(Форма, СтрокаПН.PNT2RXXXXG5);
			
			СтрокаПН.PNT2RXXXXG6 = ОкруглитьЧислоПоФормату(Форма, СтрокаПН.PNT2RXXXXG5)
							*0.18;
			ЗаполнитьПоказательНаСервере("PNT2RXXXXG6_"+Формат(СтруктураПН.Индекс(СтрокаПН) + 1, "ЧГ=;"), СтрокаПН.PNT2RXXXXG6, Форма, "ПриложениеПН");
			R0218G6 = R0218G6 + ОкруглитьЧислоПоФормату(Форма, СтрокаПН.PNT2RXXXXG6);

		КонецЦикла;
		ЗаполнитьПоказательНаСервере("R0218G5", R0218G5, Форма, "ПриложениеПН");
		ЗаполнитьПоказательНаСервере("R0218G6", R0218G6, Форма, "ПриложениеПН");
		
		ЗаполнитьПоказательНаСервере("R0118G3", R0218G5, Форма, "ПриложениеПН");
		ЗаполнитьПоказательНаСервере("R0118G6", R0218G6, Форма, "ПриложениеПН");
		
		R0134G3 = 0;
		R0134G6 = 0;
		R0134G7 = 0;
		R0134G8 = 0;
		
		Для КодСтроки = 1 По 33 Цикл
			
			ТекПроцент = 15;
			Если КодСтроки = 4 Тогда
				ТекПроцент = 6;	
			ИначеЕсли КодСтроки = 18 Тогда
				ТекПроцент = 18;	
			ИначеЕсли КодСтроки = 19
				  ИЛИ КодСтроки = 21 Тогда
				ТекПроцент = 0;	
			ИначеЕсли КодСтроки = 20 Тогда
				ТекПроцент = 4;	
			ИначеЕсли КодСтроки = 22 Тогда
				ТекПроцент = 12;	
			ИначеЕсли КодСтроки = 23 Тогда
				ТекПроцент = 20;	
			ИначеЕсли КодСтроки = 26 Тогда
				ТекПроцент = 5;	
			КонецЕсли;
			
			КодСтрокиСтр = Формат(КодСтроки, "ЧЦ=2; ЧДЦ=0; ЧВН=");
			Если КодСтроки < 24 ИЛИ КодСтроки = 26 ИЛИ КодСтроки > 29 Тогда	
				Если ПолучитьПоказательНаСервере("R01"+КодСтрокиСтр+"G9", Форма, "ПриложениеПН") = Истина Тогда // используются нулевые ставки
					ЗаполнитьПоказательНаСервере("R01"+КодСтрокиСтр+"G5", 0, Форма, "ПриложениеПН");
					ТекПроцент = 0;
				ИначеЕсли ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01"+КодСтрокиСтр+"G5", Форма, "ПриложениеПН")) > 0 Тогда
					ТекПроцент = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01"+КодСтрокиСтр+"G5", Форма, "ПриложениеПН"));
				КонецЕсли;	
				R01G3_Значение = ПолучитьПоказательНаСервере("R01" +КодСтрокиСтр+"G3", Форма, "ПриложениеПН");
				Если ПолучитьПоказательНаСервере("R01"+КодСтрокиСтр+"G10", Форма, "ПриложениеПН") = Истина Тогда // заполняем графу 7
					//(графа 3 х 100/(100 - графа 4) - графа 3) або (графа 3 х 100/(100 - графа 5) - графа 3)

					R01G7_Значение = R01G3_Значение * 100 / (100 - ТекПроцент) - R01G3_Значение;
					
					ЗаполнитьПоказательНаСервере("R01" +КодСтрокиСтр+"G7", R01G7_Значение, Форма, "ПриложениеПН");
					ЗаполнитьПоказательНаСервере("R01" +КодСтрокиСтр+"G6", 0, Форма, "ПриложениеПН");
					ЗаполнитьПоказательНаСервере("R01" +КодСтрокиСтр+"G8", R01G7_Значение, Форма, "ПриложениеПН");
				Иначе	
					R01G6_Значение = R01G3_Значение * ТекПроцент / 100;
					ЗаполнитьПоказательНаСервере("R01" +КодСтрокиСтр+"G6", R01G6_Значение, Форма, "ПриложениеПН");
					ЗаполнитьПоказательНаСервере("R01" +КодСтрокиСтр+"G7", 0, Форма, "ПриложениеПН");
					ЗаполнитьПоказательНаСервере("R01" +КодСтрокиСтр+"G8", R01G6_Значение, Форма, "ПриложениеПН");
				КонецЕсли;	
																		  
				R0134G3 = R0134G3 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01" +КодСтрокиСтр+"G3", Форма, "ПриложениеПН"));
				R0134G6 = R0134G6 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01" +КодСтрокиСтр+"G6", Форма, "ПриложениеПН"));
				R0134G7 = R0134G7 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01" +КодСтрокиСтр+"G7", Форма, "ПриложениеПН"));
				R0134G8 = R0134G8 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01" +КодСтрокиСтр+"G8", Форма, "ПриложениеПН"));
																	  
			Иначе										
				R0134G3 = R0134G3 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01" +КодСтрокиСтр+"G3", Форма, "ПриложениеПН"));
			КонецЕсли;	
		КонецЦикла;
		ЗаполнитьПоказательНаСервере("R0134G3", R0134G3, Форма, "ПриложениеПН");
		ЗаполнитьПоказательНаСервере("R0134G6", R0134G6, Форма, "ПриложениеПН");
		ЗаполнитьПоказательНаСервере("R0134G7", R0134G7, Форма, "ПриложениеПН");
		ЗаполнитьПоказательНаСервере("R0134G8", R0134G8, Форма, "ПриложениеПН");
	КонецЕсли;
	//////////////////////////////////////////////////////////////////////////////////////////
	// АВ
	
	R005G3 =  ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R001G3", Форма, "ПриложениеАВ"))
											-ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R011G3", Форма, "ПриложениеАВ"))
											-ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R012G3", Форма, "ПриложениеАВ"))
											-ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R013G3", Форма, "ПриложениеАВ"))
											-ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R002G3", Форма, "ПриложениеАВ"))
											-ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R003G3", Форма, "ПриложениеАВ"));	
											
	Если R005G3 > ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R004G3", Форма, "ПриложениеАВ")) Тогда
		R005G3 = ПолучитьПоказательНаСервере("R004G3", Форма, "ПриложениеАВ");
	КонецЕсли;												
	ЗаполнитьПоказательНаСервере("R005G3", R005G3, Форма, "ПриложениеАВ");
	
	R006G3 =  ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R005G3", Форма, "ПриложениеАВ"))
											*ПолучитьПоказательНаСервере("R006G1", Форма, "ПриложениеАВ")/100;	
	ЗаполнитьПоказательНаСервере("R006G3", R006G3, Форма, "ПриложениеАВ");
											
	//////////////////////////////////////////////////////////////////////////////////////////
	// Декларация (до 16ЗП)
	
	R003G3 = ПолучитьПоказательНаСервере("R003G3", Форма, "ПриложениеРИ");
	ЗаполнитьПоказательНаСервере("R003G3", R003G3, Форма, "Декларация");
	
	R004G3 =   ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R002G3", Форма, "Декларация"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R003G3", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R004G3", R004G3, Форма, "Декларация");
	
	R005G3 = ПолучитьПоказательНаСервере("R005G3", Форма, "ПриложениеПЗ");
	ЗаполнитьПоказательНаСервере("R005G3", R005G3, Форма, "Декларация");
	
	R006G3 = ( ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R004G3", Форма, "Декларация"))
										   -ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R005G3", Форма, "Декларация"))
	                                      ) * ПолучитьПоказательНаСервере("R006G1", Форма, "Декларация") / 100;
	Если R006G3 < 0 Тогда
		R006G3 = 0;
	КонецЕсли;										  
	ЗаполнитьПоказательНаСервере("R006G3", R006G3, Форма, "Декларация");
										  
	R008G3 = ( ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R007G3", Форма, "Декларация"))
										   -ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0071G3", Форма, "Декларация"))
										   -ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0072G3", Форма, "Декларация"))
	                                      ) * ПолучитьПоказательНаСервере("R008G1", Форма, "Декларация") / 100;
	ЗаполнитьПоказательНаСервере("R008G3", R008G3, Форма, "Декларация");
	
	R0091G3 = ПолучитьПоказательНаСервере("R00911G3", Форма, "Декларация")
	        - ПолучитьПоказательНаСервере("R00912G3", Форма, "Декларация");
	Если R0091G3 < 0 Тогда
		R0091G3 = 0;
	КонецЕсли;		
	ЗаполнитьПоказательНаСервере("R0091G3", R0091G3, Форма, "Декларация");
	
	R009G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0091G3", Форма, "Декларация"))
	        +ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0092G3", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R009G3", R009G3, Форма, "Декларация");	
	
	R010G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R009G3", Форма, "Декларация"))
	                                      * ПолучитьПоказательНаСервере("R010G1", Форма, "Декларация") / 100;
	ЗаполнитьПоказательНаСервере("R010G3", R010G3, Форма, "Декларация");
										  
	R012G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R011G3", Форма, "Декларация"))
	                                      * ПолучитьПоказательНаСервере("R012G1", Форма, "Декларация") / 100;
	ЗаполнитьПоказательНаСервере("R012G3", R012G3, Форма, "Декларация");
										  
	R015G3 = ( ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R013G3", Форма, "Декларация"))
										   -ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R014G3", Форма, "Декларация"))
	                                      ) * ПолучитьПоказательНаСервере("R015G1", Форма, "Декларация") / 100;
	Если R015G3 < 0 Тогда
		R015G3 = 0;
	КонецЕсли;
	ЗаполнитьПоказательНаСервере("R015G3", R015G3, Форма, "Декларация");
	
	//////////////////////////////////////////////////////////////////////////////////////////
	// ЗП
											
	R0164G3	 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0162G3", Форма, "ПриложениеЗП"))
			  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0163G3", Форма, "ПриложениеЗП"));
			  
	R01642G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0164G3", Форма, "ПриложениеЗП"))
			  - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01641G3", Форма, "ПриложениеЗП"));
			   
	R016G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0161G3", Форма, "ПриложениеЗП"))
			+ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01641G3", Форма, "ПриложениеЗП"));
	
	ЗаполнитьПоказательНаСервере("R0164G3", R0164G3, Форма, "ПриложениеЗП");
	ЗаполнитьПоказательНаСервере("R01642G3", R01642G3, Форма, "ПриложениеЗП");
	ЗаполнитьПоказательНаСервере("R016G3", R016G3, Форма, "ПриложениеЗП");
											
	//////////////////////////////////////////////////////////////////////////////////////////
	// группа КИК
	// КИК-ТЦ  (КТЦ)
	Если ИмяСтраницыПанели = "ПриложениеКТЦ" Тогда
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппыKT1, ТаблицаБлока);
		ТекСтруктура = Форма[ТаблицаБлока];

		R01G14 = ОкруглитьЧислоПоФормату(Форма, ТекСтруктура.Итог("KTT1RXXXXG14"));
		R01G15 = ОкруглитьЧислоПоФормату(Форма, ТекСтруктура.Итог("KTT1RXXXXG15"));
		R01G16 = ОкруглитьЧислоПоФормату(Форма, ТекСтруктура.Итог("KTT1RXXXXG16"));
		R01G17 = ОкруглитьЧислоПоФормату(Форма, ТекСтруктура.Итог("KTT1RXXXXG17"));
		ЗаполнитьПоказательНаСервере("R01G14", R01G14, Форма, "ПриложениеКТЦ");
		ЗаполнитьПоказательНаСервере("R01G15", R01G15, Форма, "ПриложениеКТЦ");
		ЗаполнитьПоказательНаСервере("R01G16", R01G16, Форма, "ПриложениеКТЦ");
		ЗаполнитьПоказательНаСервере("R01G17", R01G17, Форма, "ПриложениеКТЦ");
		
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппыKT2, ТаблицаБлока);
		ТекСтруктура = Форма[ТаблицаБлока];
		R02G14 = ОкруглитьЧислоПоФормату(Форма, ТекСтруктура.Итог("KTT2RXXXXG14"));
		R02G15 = ОкруглитьЧислоПоФормату(Форма, ТекСтруктура.Итог("KTT2RXXXXG15"));
		R02G16 = ОкруглитьЧислоПоФормату(Форма, ТекСтруктура.Итог("KTT2RXXXXG16"));
		R02G17 = ОкруглитьЧислоПоФормату(Форма, ТекСтруктура.Итог("KTT2RXXXXG17"));
		ЗаполнитьПоказательНаСервере("R02G14", R02G14, Форма, "ПриложениеКТЦ");
		ЗаполнитьПоказательНаСервере("R02G15", R02G15, Форма, "ПриложениеКТЦ");
		ЗаполнитьПоказательНаСервере("R02G16", R02G16, Форма, "ПриложениеКТЦ");
		ЗаполнитьПоказательНаСервере("R02G17", R02G17, Форма, "ПриложениеКТЦ");
	КонецЕсли; 

	// КИК-ЦП  (КЦП)
	Если ИмяСтраницыПанели = "ПриложениеКЦП" Тогда
		
		R01G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R011G3", Форма, "ПриложениеКЦП"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R012G3", Форма, "ПриложениеКЦП"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R013G3", Форма, "ПриложениеКЦП"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R014G3", Форма, "ПриложениеКЦП"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R015G3", Форма, "ПриложениеКЦП"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R016G3", Форма, "ПриложениеКЦП"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R017G3", Форма, "ПриложениеКЦП"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R018G3", Форма, "ПриложениеКЦП"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R019G3", Форма, "ПриложениеКЦП"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0110G3", Форма, "ПриложениеКЦП"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01110G3", Форма, "ПриложениеКЦП"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0112G3", Форма, "ПриложениеКЦП"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0113G3", Форма, "ПриложениеКЦП"));
		ЗаполнитьПоказательНаСервере("R01G3", R01G3, Форма, "ПриложениеКЦП");
											 
		R02G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R021G3", Форма, "ПриложениеКЦП"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R022G3", Форма, "ПриложениеКЦП"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R023G3", Форма, "ПриложениеКЦП"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R024G3", Форма, "ПриложениеКЦП"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R025G3", Форма, "ПриложениеКЦП"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R026G3", Форма, "ПриложениеКЦП"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R027G3", Форма, "ПриложениеКЦП"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R028G3", Форма, "ПриложениеКЦП"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R029G3", Форма, "ПриложениеКЦП"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0210G3", Форма, "ПриложениеКЦП"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R02110G3", Форма, "ПриложениеКЦП"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0212G3", Форма, "ПриложениеКЦП"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0213G3", Форма, "ПриложениеКЦП"));
		ЗаполнитьПоказательНаСервере("R02G3", R02G3, Форма, "ПриложениеКЦП");
											 
		R0012G3 = ПолучитьПоказательНаСервере("R00121G3", Форма, "ПриложениеКЦП")
				 -ПолучитьПоказательНаСервере("R00122G3", Форма, "ПриложениеКЦП");
		ЗаполнитьПоказательНаСервере("R0012G3", R0012G3, Форма, "ПриложениеКЦП");
		
		R0013G3 = ПолучитьПоказательНаСервере("R01G3", Форма, "ПриложениеКЦП")
				 -ПолучитьПоказательНаСервере("R02G3", Форма, "ПриложениеКЦП")
				 -ПолучитьПоказательНаСервере("R03G3", Форма, "ПриложениеКЦП")
				 -ПолучитьПоказательНаСервере("R04G3", Форма, "ПриложениеКЦП");
		ЗаполнитьПоказательНаСервере("R0013G3", R0013G3, Форма, "ПриложениеКЦП");
	КонецЕсли; 

	// КИК-К  (КК)
	Если ИмяСтраницыПанели = "ПриложениеКК" Тогда
		
		R01G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R011G3", Форма, "ПриложениеКК"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R012G3", Форма, "ПриложениеКК"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R013G3", Форма, "ПриложениеКК"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R014G3", Форма, "ПриложениеКК"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R015G3", Форма, "ПриложениеКК"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R016G3", Форма, "ПриложениеКК"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R017G3", Форма, "ПриложениеКК"))   
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R018G3", Форма, "ПриложениеКК"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R019G3", Форма, "ПриложениеКК"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0110G3", Форма, "ПриложениеКК"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0111G3", Форма, "ПриложениеКК"));
		ЗаполнитьПоказательНаСервере("R01G3", R01G3, Форма, "ПриложениеКК");

		R02G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R021G3", Форма, "ПриложениеКК"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R022G3", Форма, "ПриложениеКК"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R023G3", Форма, "ПриложениеКК"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R024G3", Форма, "ПриложениеКК"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R025G3", Форма, "ПриложениеКК"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R026G3", Форма, "ПриложениеКК"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R027G3", Форма, "ПриложениеКК")) 
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R028G3", Форма, "ПриложениеКК"))  
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R029G3", Форма, "ПриложениеКК"))  
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0210G3", Форма, "ПриложениеКК"))
										  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0211G3", Форма, "ПриложениеКК"));
										  
		ЗаполнитьПоказательНаСервере("R02G3", R02G3, Форма, "ПриложениеКК");
		
		R03G3 =   ПолучитьПоказательНаСервере("R01G3", Форма, "ПриложениеКК") 
											- ПолучитьПоказательНаСервере("R02G3", Форма, "ПриложениеКК"); 
		ЗаполнитьПоказательНаСервере("R03G3", R03G3, Форма, "ПриложениеКК");
	КонецЕсли; 
	
	// КИК
	Если ИмяСтраницыПанели = "ПриложениеКИК" Тогда
		
		R03G3 = ПолучитьПоказательНаСервере("R01G3", Форма, "ПриложениеКИК")
				 +ПолучитьПоказательНаСервере("R02G3", Форма, "ПриложениеКИК");
		ЗаполнитьПоказательНаСервере("R03G3", R03G3, Форма, "ПриложениеКИК");
		
		R04G3 = ПолучитьПоказательНаСервере("R03G3", Форма, "ПриложениеКИК")
				 *ПолучитьПоказательНаСервере("R04G1", Форма, "ПриложениеКИК")/100
				 *ПолучитьПоказательНаСервере("R04G2", Форма, "ПриложениеКИК")/100;
		Если R04G3 > 0 Тогда //положительное значение			 
			ЗаполнитьПоказательНаСервере("R04G3", R04G3, Форма, "ПриложениеКИК");
		Иначе
			ЗаполнитьПоказательНаСервере("R04G3", 0, Форма, "ПриложениеКИК");
		КонецЕсли; 
			
		R06G3 = ПолучитьПоказательНаСервере("R04G3", Форма, "ПриложениеКИК")
				 -(ПолучитьПоказательНаСервере("R05G3", Форма, "ПриложениеКИК")
				 *ПолучитьПоказательНаСервере("R06G1", Форма, "ПриложениеКИК")/100);
		Если R06G3 > 0 Тогда //положительное значение			 
			ЗаполнитьПоказательНаСервере("R06G3", R06G3, Форма, "ПриложениеКИК");
		Иначе
			ЗаполнитьПоказательНаСервере("R06G3", 0, Форма, "ПриложениеКИК");
		КонецЕсли; 
			
	КонецЕсли; 

	//////////////////////////////////////////////////////////////////////////////////////////
	// Декларация (после 16ЗП и КИК)
	// КИК
	R061G3 = 0;
	Если ИмяСтраницыПанели = "ПриложениеКИК" Тогда
		R061G3 = R061G3 + ПолучитьПоказательНаСервере("R06G3", Форма, "ПриложениеКИК");
	КонецЕсли;
	Для каждого ДанныеКИК Из Форма.ТаблицаСтраницыРаздела2 Цикл
		
		Если ДанныеКИК.АктивнаяСтраница = Ложь Тогда
			
			R06G3 = 0;                                         
			Если ДанныеКИК.Данные[0].Значение.Свойство("R06G3", R06G3) Тогда
	 			R061G3 = R061G3 + R06G3;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	ЗаполнитьПоказательНаСервере("R0061G3", R061G3, Форма, "Декларация");
	//ЗП
	ЗаполнитьПоказательНаСервере("R016G3", ПолучитьПоказательНаСервере("R016G3", Форма, "ПриложениеЗП"), Форма, "Декларация");
	
	R017G3 =  ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R006G3", Форма, "Декларация")) 
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0061G3", Форма, "Декларация")) 	
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R008G3", Форма, "Декларация")) 	
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R010G3", Форма, "Декларация")) 
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R012G3", Форма, "Декларация")) 
										 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R015G3", Форма, "Декларация")) 
										 - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R016G3", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R017G3", R017G3, Форма, "Декларация");
	
	// не все показатели должны заполнять в годовой отчетности
	Если Форма.СтруктураРеквизитовФормы.мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		ЗаполнитьПоказательНаСервере("R018G3", 0, Форма, "Декларация");
		ЗаполнитьПоказательНаСервере("R021G3", 0, Форма, "Декларация");
		ЗаполнитьПоказательНаСервере("R024G3", 0, Форма, "Декларация");
	КонецЕсли;
										 
	R019G3 =  ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R017G3", Форма, "Декларация")) 
										 - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R018G3", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R019G3", R019G3, Форма, "Декларация");
										 
	ЗаполнитьПоказательНаСервере("R020G3", ПолучитьПоказательНаСервере("R006G3", Форма, "ПриложениеАВ"), Форма, "Декларация");
	
	R022G3 =  ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R020G3", Форма, "Декларация")) 
										 - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R021G3", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R022G3", R022G3, Форма, "Декларация");
	
	R023G3 = 0;
	Если ИмяСтраницыПанели = "ПриложениеПН" Тогда
		R023G3 = R023G3 + ПолучитьПоказательНаСервере("R0134G8", Форма, "ПриложениеПН");
	КонецЕсли;
	Для каждого ДанныеПН Из Форма.ТаблицаСтраницыРаздела1 Цикл
		
		Если ДанныеПН.АктивнаяСтраница = Ложь Тогда
			
			R0134G8 = 0;                                         
			Если ДанныеПН.Данные[0].Значение.Свойство("R0134G8", R0134G8) Тогда
	 			R023G3 = R023G3 + R0134G8;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	ЗаполнитьПоказательНаСервере("R023G3", R023G3, Форма, "Декларация");
	
	R025G3 =  ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R023G3", Форма, "Декларация")) 
										 - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R024G3", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R025G3",R025G3, Форма, "Декларация");
	
	Если ЗначениеЗаполнено(ПолучитьПоказательНаСервере("HZU", Форма, "Декларация"))Тогда
		// это уточняющая декларация
		
		R030G3  =  ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R026G3", Форма, "Декларация"))* 0.03;
		ЗаполнитьПоказательНаСервере("R030G3", R030G3, Форма, "Декларация");
		R034G3  =  ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R031G3", Форма, "Декларация"))* 0.03;
		ЗаполнитьПоказательНаСервере("R034G3", R034G3, Форма, "Декларация");
		
	Иначе
		
		// уточнение подается в составе текущей декларации
		ЗаполнитьПоказательНаСервере("R026G3", ПолучитьПоказательНаСервере("R026G3", Форма, "ПриложениеВП"), Форма, "Декларация");
		ЗаполнитьПоказательНаСервере("R027G3", ПолучитьПоказательНаСервере("R027G3", Форма, "ПриложениеВП"), Форма, "Декларация");
		ЗаполнитьПоказательНаСервере("R028G3", ПолучитьПоказательНаСервере("R028G3", Форма, "ПриложениеВП"), Форма, "Декларация");
		ЗаполнитьПоказательНаСервере("R029G3", ПолучитьПоказательНаСервере("R029G3", Форма, "ПриложениеВП"), Форма, "Декларация");
		ЗаполнитьПоказательНаСервере("R030G3", 0, Форма, "Декларация");
		
		ЗаполнитьПоказательНаСервере("R031G3", ПолучитьПоказательНаСервере("R030G3", Форма, "ПриложениеВП"), Форма, "Декларация");
		ЗаполнитьПоказательНаСервере("R032G3", ПолучитьПоказательНаСервере("R031G3", Форма, "ПриложениеВП"), Форма, "Декларация");
		ЗаполнитьПоказательНаСервере("R033G3", ПолучитьПоказательНаСервере("R032G3", Форма, "ПриложениеВП"), Форма, "Декларация");
		ЗаполнитьПоказательНаСервере("R034G3", 0, Форма, "Декларация");
		
	КонецЕсли;	
		
КонецПроцедуры // Расчет()

// ОкруглитьЧислоПоФормату(Форма, )
//
&НаКлиентеНаСервереБезКонтекста
Функция ОкруглитьЧислоПоФормату(Форма, ИсходноеЧисло)
	
	Перем Делитель;
	
	Если Форма.СоответствиеЕдиницыИзмеренияДелителю.Свойство("Окр" + СтрЗаменить(Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения, " ", ""), Делитель) Тогда
		
		Возврат Окр(ИсходноеЧисло / Делитель, Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения) * Делитель;
		
	КонецЕсли;
	
КонецФункции // ОкруглитьЧислоПоФормату(Форма, )

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект), НСтр("ru='Удалить текущую страницу?';uk='Видалити поточну сторінку?'"), РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
			
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
    
    КопияТекущиеДанные = ТекущиеДанные;
    
    ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
    
    Если ТекущиеДанные = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
        Возврат;
    КонецЕсли;
    
    ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
    Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
        ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
        СтруктураРеквизитовФормы.НомерТекущейСтраницы = ТекущаяСтраницаРазделаПослеУдаления.КолонкаНомерСтраницыРазделаОтчета;
    КонецЕсли;
    
    УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
    
    ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
	    
	    СтраницаРаздела.КолонкаРазделыОтчета              = НСтр("ru='Стр. ';uk='Стр. '") + НомерСтраницы;
	    СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
	    
	    НомерСтраницы = НомерСтраницы + 1;
	    
	КонецЦикла;
    
    Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
        Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеСтраницы(Команда)
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	Если ТекущиеДанные.ПолучитьРодителя() = Неопределено
	   И ТекущиеДанные.ПолучитьЭлементы().Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Если ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() <= 1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийРаздел" + ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
			
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз <> 0 И ЭтаФорма[мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ИмяТекущейСтраницыПанели;
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.';uk='В розділі ""%1"" максимальна кількість екземплярів сторінок дорівнює 
|%2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = ЭтаФорма[ИмяТекТабличногоПоля];
		
	// Сначала сохраним данные текущей страницы.
	СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТекТабличногоПоля);

	// Для страниц многостраничного раздела, содержащих многострочную часть,
	// дополнительно сохраняем данные многострочной части.
	СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(ЭтаФорма, ИмяТекущейСтраницыПанели);	
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));
	
	Если СтрТаблицаСтраницы.Количество() = 0 Тогда
		Возврат;
	Иначе
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
	КонецЕсли;
	
	ОпределитьПредставлениеДопСтраниц(ИмяТекущейСтраницыПанели);
	
	Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
		СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
	Иначе
		СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
	КонецЕсли;
	Если (ИмяТекущейСтраницыПанели = "Декларация") Тогда
		
		Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
			СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
		Иначе
			СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
		КонецЕсли;
		
	КонецЕсли;
	
	// Добавляем новую страницу
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	
	// Присваиваем представление по умолчанию
	СтрНоваяСтраница.Представление = НСтр("ru='Стр. ';uk='Стр. '") + ТаблицаСтраницРаздела.Количество();
	СтрНоваяСтраница.АвтоматическоеПредставление = Истина;
	
	// Ставим признак активной страницы
	СтрНоваяСтраница.АктивнаяСтраница = Истина;
	
	ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели);
	
	Модифицированность = Истина;
			
КонецПроцедуры // ВставитьДополнительнуюСтраницуНаСервере()

&НаСервере
Процедура ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели)
	
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
		
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // ПослеДобавленияДопСтрНаСервере()

&НаСервере
Процедура ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели)
	
	Если ИмяТекущейСтраницыПанели = "Декларация" Тогда
		ИзменитьЦветЯчеекНаСервере();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
		
КонецПроцедуры // ПослеВставкиДополнительнойСтраницыНаСервере()

&НаСервере
Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели)
	
	//итоговые ячейки не очистились - необходимо провести расчет
	//для этого сохраним данные страницы
	РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);
	
КонецПроцедуры // СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере()

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	РасчетНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
КонецПроцедуры // УдалитьДополнительнуюСтраницуНаСервере()

// ДобавитьСтроку()
//
&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		
		ВставитьДополнительнуюСтрокуНаСервере();
		
	#Иначе
		
		ВставитьДополнительнуюСтрокуНаКлиенте();
		
	#КонецЕсли
	
КонецПроцедуры // ДобавитьСтроку()

// УдалитьСтроку()
//
&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];

	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.';uk='Не обрано строку багаторядкового розділу, що видаляється'");
	
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;

	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Удалить выбранную строку?%1(Внимание! Данная операция необратима)';uk='Вилучити вибраний рядок?%1(Увага! Дана операція необоротна)'"), Символы.ПС), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    #Если ВебКлиент Тогда
        УдалитьДополнительнуюСтрокуНаСервере();
    #Иначе
        УдалитьДополнительнуюСтрокуНаКлиенте();
    #КонецЕсли
	
КонецПроцедуры // УдалитьСтроку()

&НаСервере
Процедура ВставитьДополнительнуюСтрокуНаСервере()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // ВставитьДополнительнуюСтрокуНаСервере()

&НаКлиенте
Процедура ВставитьДополнительнуюСтрокуНаКлиенте()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // ВставитьДополнительнуюСтрокуНаКлиенте()

// Создает новую строку многострочного раздела.
// Процедура вставляет строку в многострочный блок.
//
// Параметры:
//  Форма          - ссылка на форму отчета
//  ИмяГруппыБлока - имя группы, в том случае, если необходимо вставить строки в процедурах автозаполнения, без фокусировок.
//  СпециальноеДобавление - режим добавления строк по нестандартному алгоритму, когда в правой части распологаются данные.
//  ИмяКолонкиНомера - имя колонки, в которой необходимо проставлять номер при вставки строки.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ИмяГруппыБлока = Неопределено, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = 1) Экспорт
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	Если ИмяГруппыБлока = Неопределено Тогда
		// Сначала выполним проверку на активную страницу панели формы,
		// которая содержит многострочный раздел
			
		ТекущаяСтраница = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		ТекТабличноеПоле = Форма.ТабличныйДокумент;

		ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
		#Если НаКлиенте Тогда
			ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
		#Иначе
			ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
		#КонецЕсли

		Если ИмяГруппы = Неопределено Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.';uk='Не обрано багаторядковий розділ, у який необхідно додати рядок.'");

			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
	Иначе
		ИмяГруппы = ИмяГруппыБлока;
	КонецЕсли;

	Если ИмяГруппы = "PZT1R" И СпециальноеДобавление = Ложь Тогда
		ВставитьДополнительнуюСтроку(Форма, "PZT2R", Истина);
	ИначеЕсли ИмяГруппы = "PZT2R" И СпециальноеДобавление = Ложь Тогда
		ВставитьДополнительнуюСтроку(Форма, "PZT1R", Истина);
	ИначеЕсли СпециальноеДобавление = Истина Тогда
		СпециальноеДобавление = Ложь;	
	КонецЕсли;
	
	// запрещаем добавлять строку в таблицу о решении о неиспользовании разниц (не может быть нескольких строк по факту)
	Если ИмяГруппы = Форма.СтруктураРеквизитовФормы.мИдГруппы2 Тогда
		Возврат;
	КонецЕсли;
	
	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	
	КолонкиГруппы = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];
	
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	ИмяПервойКолонки = КолонкиГруппы[0];
	ИмяПервойЯчейкиПоследнейСтроки = ИмяПервойКолонки + "_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	НазначитьИмяОбластиМЧ = Ложь;
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	Если Найти(ВставляемаяОбласть.Имя, "МногострочнаяЧасть") > 0 Тогда
		НазначитьИмяОбластиМЧ = Истина;
		ИмяМногострочнойЧасти = ВставляемаяОбласть.Имя;
	КонецЕсли;

	Если СпециальноеДобавление Тогда
		
	Иначе
				
		// добавляем в таблицу новую строку
		РегламентированнаяОтчетностьВызовСервера.ВставитьОбластьВТабличныйДокумент(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	Если НазначитьИмяОбластиМЧ Тогда
		ТекТабличноеПоле.Область(НомерНижнЯчейкиОбласти + 1, , НомерНижнЯчейкиОбласти + (НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти) + 1, ).Имя = "";
		ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, ).Имя = ИмяМногострочнойЧасти;
	КонецЕсли;

	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	
	Для Каждого ИмяКолонки ИЗ КолонкиГруппы Цикл
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
			Если ИмяКолонкиНомера <> Неопределено Тогда
				Если ИмяКолонкиНомера = ИмяКолонки Тогда
					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ОбластьЯчейки.Значение = КолСтрок + НомерПервойСтроки;
					Иначе
						ОбластьЯчейки.Текст = КолСтрок + НомерПервойСтроки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Если ИмяГруппыБлока = Неопределено Тогда

		// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
		// Определяем текущую область таблицы
		
		ИмяТекущейОбласти = ИмяПервойКолонки + "_" + КолСтрокСтр1;

		Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
				
		// установим фокус на поле табличн. документа
		ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
		
	КонецЕсли;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	Если ИмяГруппы = "PZT1R" Тогда
		ВывестиТекстыЗаголовковВПриложениеПЗ(Форма, 1);
	ИначеЕсли ИмяГруппы = "PZT2R" Тогда
		ВывестиТекстыЗаголовковВПриложениеПЗ(Форма, 2);
	КонецЕсли;
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры // ВставитьДополнительнуюСтроку()

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // УдалитьДополнительнуюСтрокуНаСервере()

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // УдалитьДополнительнуюСтрокуНаКлиенте()

// Удаляет строку многострочного раздела формы.
&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = 1) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
    	
	ТекущаяСтраница = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	ТекТабличноеПоле = Форма.ТабличныйДокумент;

	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	ИмяЯчейки	   = ТекущаяОбласть.Имя;
	
	#Если НаКлиенте Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли
	
	ПроизводитьРасчет = Истина;
	Если СпециальноеДобавление = Истина Тогда
		
		ПроизводитьРасчет     = Ложь;
		СпециальноеДобавление = Ложь;
		
		ИмяЯчейки = ИмяКолонкиНомера;  ИмяКолонкиНомера = Неопределено;
		ИмяГруппы = НомерПервойСтроки; НомерПервойСтроки = 1;
		
	ИначеЕсли ИмяГруппы = "PZT1R" Тогда
		
		УдалитьДополнительнуюСтроку(Форма, Истина, "" + ИмяЯчейки, "PZT2R");
		
	ИначеЕсли ИмяГруппы = "PZT2R" Тогда	
		  
		  УдалитьДополнительнуюСтроку(Форма, Истина, "" + ИмяЯчейки, "PZT1R");
		
	КонецЕсли;

	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы  = Форма[СтруктураГруппы];
   	КолонкиГруппы    = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];
	ИмяПервойКолонки = КолонкиГруппы[0];
	
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяПервойКолонки + "_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		МногострочностьВРазделе = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ДанныеФормыКоллекция") Тогда
			ИмяОбластиМнгЧ = МногострочностьВРазделе.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].Область;
		КонецЕсли;
		// Найдем координаты области, для последующего восстановления.

		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;

		Если СпециальноеДобавление Тогда
			
		Иначе
					
			РегламентированнаяОтчетностьВызовСервера.УдалитьОбластьИзТабличногоДокумента(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
			Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
			
		КонецЕсли;
		// Восстановим область.
		ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр - 1];

				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				
				Для Каждого КолонкаИмя ИЗ КолонкиГруппы Цикл
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ИмяКолонкиНомера <> Неопределено Тогда
							Если ИмяКолонкиНомера = КолонкаИмя Тогда
								// обновляем порядковый номер строки
								
								НовыйПорядковыйНомер = НСтр - 1 + НомерПервойСтроки - 1;
								
								Если ОбластьСдвинутойЯчейки.СодержитЗначение = Истина Тогда
									ОбластьСдвинутойЯчейки.Значение = НовыйПорядковыйНомер;
								Иначе
									ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1 + НомерПервойСтроки - 1;
			
			Для Каждого КолонкаТаблицыИмя ИЗ КолонкиГруппы Цикл
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					Если ИмяКолонкиНомера <> Неопределено Тогда
						Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
							// обновляем порядковый номер строки
							СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла;
		
		КонецЦикла;

		// Данные в многострочном блоке обновляются в декларациях!
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	ИмяТекущейОбласти = ИмяПервойКолонки + "_" + Формат(НомТекущейСтроки, "ЧГ=0");
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];

	Форма.Модифицированность = Истина;
	
	Если ПроизводитьРасчет Тогда
		#Если НаКлиенте Тогда
			Форма.РасчетНаКлиенте(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		#Иначе
			Форма.РасчетНаСервере(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		#КонецЕсли
	КонецЕсли;

	Если ИмяГруппы = "PZT1R" Тогда
		ВывестиТекстыЗаголовковВПриложениеПЗ(Форма, 1);
	ИначеЕсли ИмяГруппы = "PZT2R" Тогда
		ВывестиТекстыЗаголовковВПриложениеПЗ(Форма, 2);
	КонецЕсли;
	
КонецПроцедуры // УдалитьДополнительнуюСтроку()
		
&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки 			 = Область.Имя;
	НаименованиеТекЛиста = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если  ИмяЯчейки = "HZ" Тогда
		
		Если НЕ НаименованиеТекЛиста = "Декларация" Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		ТабличныйДокумент.Области["HZ"].Значение = "X";
		ТабличныйДокумент.Области["HZN"].Значение = "";
		ТабличныйДокумент.Области["HZU"].Значение = "";
		
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(ТабличныйДокумент.Области["HZ"].Значение,"HZ");
		СписокЗначений.Добавить(ТабличныйДокумент.Области["HZN"].Значение,"HZN");
		ЗаполнитьПоказательНаВсехЗакладкахНаСервере(СписокЗначений);
		
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(ТабличныйДокумент.Области["HZU"].Значение,"HZU");
		ЗаполнитьПоказательНаВсехЗакладкахНаСервере(СписокЗначений,"|ПриложениеВП|");
		
		ЗаполнитьПоказательНаСервере("C_DOC_STAN", 1, ЭтаФорма, "СлужебныеДанные");
		
	ИначеЕсли ИмяЯчейки = "HZN" Тогда
		
		Если НЕ НаименованиеТекЛиста = "Декларация" Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		ТабличныйДокумент.Области["HZ"].Значение = "";
		ТабличныйДокумент.Области["HZN"].Значение = "X";
		ТабличныйДокумент.Области["HZU"].Значение = "";
		
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(ТабличныйДокумент.Области["HZ"].Значение,"HZ");
		СписокЗначений.Добавить(ТабличныйДокумент.Области["HZN"].Значение,"HZN");
		ЗаполнитьПоказательНаВсехЗакладкахНаСервере(СписокЗначений);
		
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(ТабличныйДокумент.Области["HZU"].Значение,"HZU");
		ЗаполнитьПоказательНаВсехЗакладкахНаСервере(СписокЗначений,"|ПриложениеВП|");
		
		ЗаполнитьПоказательНаСервере("C_DOC_STAN", 2, ЭтаФорма, "СлужебныеДанные");
		
	ИначеЕсли ИмяЯчейки = "HZU" Тогда
		
		Если НЕ НаименованиеТекЛиста = "Декларация" Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		ТабличныйДокумент.Области["HZ"].Значение = "";
		ТабличныйДокумент.Области["HZN"].Значение = "";
		ТабличныйДокумент.Области["HZU"].Значение = "X";
		
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(ТабличныйДокумент.Области["HZ"].Значение,"HZ");
		СписокЗначений.Добавить(ТабличныйДокумент.Области["HZN"].Значение,"HZN");
		ЗаполнитьПоказательНаВсехЗакладкахНаСервере(СписокЗначений);
		
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(ТабличныйДокумент.Области["HZU"].Значение,"HZU");
		ЗаполнитьПоказательНаВсехЗакладкахНаСервере(СписокЗначений,"|ПриложениеВП|");
		
		ЗаполнитьПоказательНаСервере("C_DOC_STAN", 3, ЭтаФорма, "СлужебныеДанные");
		
   ИначеЕсли ИмяЯчейки = "H1KVP"
		 ИЛИ ИмяЯчейки = "HHYP"
		 ИЛИ ИмяЯчейки = "H3KVP"
		 ИЛИ ИмяЯчейки = "HYP" Тогда
		 
		НовЗначение = ?(ЗначениеЗаполнено(ТабличныйДокумент.Области[ИмяЯчейки].Значение), "", "X");
		
		ТабличныйДокумент.Области["H1KVP"].Значение = "";
		ТабличныйДокумент.Области["HHYP"].Значение = "";
		ТабличныйДокумент.Области["H3KVP"].Значение = "";
		ТабличныйДокумент.Области["HYP"].Значение = "";
		 
		ТабличныйДокумент.Области[ИмяЯчейки].Значение = НовЗначение;
		
		Если НаименованиеТекЛиста = "Декларация" Тогда
			ИмяЛистаДубля = "ПриложениеВП";
		ИначеЕсли НаименованиеТекЛиста = "ПриложениеВП" Тогда
			ИмяЛистаДубля = "Декларация";
		КонецЕсли;
		
		ЗаполнитьПоказательНаСервере("H1KVP",	ТабличныйДокумент.Области["H1KVP"].Значение,	ЭтаФорма,ИмяЛистаДубля);
		ЗаполнитьПоказательНаСервере("HHYP",	ТабличныйДокумент.Области["HHYP"].Значение,		ЭтаФорма,ИмяЛистаДубля);
		ЗаполнитьПоказательНаСервере("H3KVP",	ТабличныйДокумент.Области["H3KVP"].Значение,	ЭтаФорма,ИмяЛистаДубля);
		ЗаполнитьПоказательНаСервере("HYP",		ТабличныйДокумент.Области["HYP"].Значение,		ЭтаФорма,ИмяЛистаДубля);
		
   ИначеЕсли ИмяЯчейки = "HHY1"     //Приложение АМ
		 ИЛИ ИмяЯчейки = "H3KV1"
		 ИЛИ ИмяЯчейки = "HY1" Тогда
		 
		НовЗначение = ?(ЗначениеЗаполнено(ТабличныйДокумент.Области[ИмяЯчейки].Значение), "", "X");
		
		ТабличныйДокумент.Области["HHY1"].Значение = "";
		ТабличныйДокумент.Области["H3KV1"].Значение = "";
		ТабличныйДокумент.Области["HY1"].Значение = "";
		 
		ТабличныйДокумент.Области[ИмяЯчейки].Значение = НовЗначение;
		
	ИначеЕсли ВРЕГ(ИмяЯчейки) = "H091" Тогда
		Если СтруктураРеквизитовФормы.мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
			ТабличныйДокумент.Области[ИмяЯчейки].Значение = ?(ЗначениеЗаполнено(ТабличныйДокумент.Области[ИмяЯчейки].Значение), "", "X");
		Иначе
			ТабличныйДокумент.Области[ИмяЯчейки].Значение = "";
		КонецЕсли;

	ИначеЕсли ВРЕГ(Лев(ИмяЯчейки, 3)) = "H09"
						ИЛИ ИмяЯчейки = "HLIQ" ИЛИ ИмяЯчейки = "H01G3" 
						ИЛИ (ИмяЯчейки = "H01" И НЕ НаименованиеТекЛиста = "Декларация")
						ИЛИ ВРЕГ(Лев(ИмяЯчейки, 3)) = "H10" Тогда
		
		ТабличныйДокумент.Области[ИмяЯчейки].Значение = ?(ЗначениеЗаполнено(ТабличныйДокумент.Области[ИмяЯчейки].Значение), "", "X");
		
	ИначеЕсли ИмяЯчейки >= "HD1" И ИмяЯчейки <= "HD9"  
		  И НЕ( ИмяЯчейки = "HD3" И НаименованиеТекЛиста = "Декларация")
		  ИЛИ ИмяЯчейки >= "HD10" И ИмяЯчейки <= "HD12" Тогда
		  	
		ТабличныйДокумент.Области[ИмяЯчейки].Значение = ?(ЗначениеЗаполнено(ТабличныйДокумент.Области[ИмяЯчейки].Значение), "", "+");
		
	ИначеЕсли ИмяЯчейки >= "HF1" И ИмяЯчейки <= "HF9" Тогда
		
		НомерЯч = Прав(ИмяЯчейки,1);
		//группы: 1/2+3,4,5; 6/7; 8/9
		НовЗначение = ?(ЗначениеЗаполнено(ТабличныйДокумент.Области[ИмяЯчейки].Значение), "", "+");
		Если ЗначениеЗаполнено(НовЗначение) 
			И НЕ (НомерЯч>="3" и НомерЯч<="5") Тогда //очищаем все группы
			
			ТабличныйДокумент.Области.HF1.Значение = "";
			ТабличныйДокумент.Области.HF2.Значение = "";
			ТабличныйДокумент.Области.HF6.Значение = "";
			ТабличныйДокумент.Области.HF7.Значение = "";
			ТабличныйДокумент.Области.HF8.Значение = "";
			ТабличныйДокумент.Области.HF9.Значение = "";
		КонецЕсли;	
		Если НомерЯч = "1" или НомерЯч = "2" Тогда
			ТабличныйДокумент.Области.HF1.Значение = НовЗначение;
			ТабличныйДокумент.Области.HF2.Значение = НовЗначение;
		ИначеЕсли НомерЯч = "6" или НомерЯч = "7" Тогда
			ТабличныйДокумент.Области.HF6.Значение = НовЗначение;
			ТабличныйДокумент.Области.HF7.Значение = НовЗначение;
		ИначеЕсли НомерЯч = "8" или НомерЯч = "9" Тогда
			ТабличныйДокумент.Области.HF8.Значение = НовЗначение;
			ТабличныйДокумент.Области.HF9.Значение = НовЗначение;
		Иначе  //3,4,5
			ТабличныйДокумент.Области[ИмяЯчейки].Значение = НовЗначение;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТабличныйДокумент.Области.HF1.Значение) Тогда //очищаем 3,4,5
			ТабличныйДокумент.Области.HF3.Значение = "";
			ТабличныйДокумент.Области.HF4.Значение = "";
			ТабличныйДокумент.Области.HF5.Значение = "";
		КонецЕсли;	
		
	ИначеЕсли  ВРЕГ(Лев(ИмяЯчейки, 4)) = "HZYP" Тогда
		
		Значение = ТабличныйДокумент.Области.HZYP.Значение;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводПоказателяВПолеТабличногоДокументЗавершение",
													   ЭтаФорма, Новый Структура("ИмяЯчейки, ИмяСтраницы,
																				 |ИмяЯчейкиКвадратов, ИмяСтраницыКвадратов, 
																				 |Размерность, ДополнитьЗначение, НольКакНоль", 
																				 "HZYP",  "Декларация",
																				 "HZYP_", "Декларация",
																				 4, Ложь, Неопределено));
		
		ПоказатьВводЧисла(ОписаниеОповещения,Значение, НСтр("ru='Введите значение';uk='Введіть значення'"), 4,0);
		
	ИначеЕсли  ВРЕГ(Лев(ИмяЯчейки, 5)) = "HKVED" Тогда

		Значение = ТабличныйДокумент.Области.HKVED.Значение;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводПоказателяВПолеТабличногоДокументЗавершение",
													   ЭтаФорма, Новый Структура("ИмяЯчейки, ИмяСтраницы,
																				 |ИмяЯчейкиКвадратов, ИмяСтраницыКвадратов, 
																				 |Размерность, ДополнитьЗначение, НольКакНоль", 
																				 "HKVED",  "Декларация",
																				 "HKVED_", "Декларация",
																				 5, Ложь, Неопределено));
		
		ПоказатьВводСтроки(ОписаниеОповещения,Значение, НСтр("ru='Введите значение';uk='Введіть значення'"), 5);
		
	ИначеЕсли  ВРЕГ(Лев(ИмяЯчейки, 4)) = "HZIP" Тогда

		Значение = ТабличныйДокумент.Области.HZIP.Значение;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводПоказателяВПолеТабличногоДокументЗавершение",
													   ЭтаФорма, Новый Структура("ИмяЯчейки, ИмяСтраницы,
																				 |ИмяЯчейкиКвадратов, ИмяСтраницыКвадратов, 
																				 |Размерность, ДополнитьЗначение, НольКакНоль", 
																				 "HZIP",  "Декларация",
																				 "HZIP_", "Декларация",
																				 5, Ложь, Неопределено));
		
		ПоказатьВводСтроки(ОписаниеОповещения,Значение, НСтр("ru='Введите значение';uk='Введіть значення'"), 5);
		
	ИначеЕсли ВРЕГ(Лев(ИмяЯчейки, 4))  = "HTEL"
		  ИЛИ ВРЕГ(Лев(ИмяЯчейки, 5))  = "HMTEL"
		  ИЛИ ВРЕГ(Лев(ИмяЯчейки, 4))  = "HFAX" Тогда

		ИмяОбластиЗначения = Лев(ИмяЯчейки, 4);
		Если ВРЕГ(Лев(ИмяЯчейки, 5))  = "HMTEL"  Тогда
			ИмяОбластиЗначения = Лев(ИмяЯчейки, 5);
		КонецЕсли;
		  
		Значение = ТабличныйДокумент.Области[ИмяОбластиЗначения].Значение;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводПоказателяВПолеТабличногоДокументЗавершение",
													   ЭтаФорма, Новый Структура("ИмяЯчейки, ИмяСтраницы,
																				 |ИмяЯчейкиКвадратов, ИмяСтраницыКвадратов, 
																				 |Размерность, ДополнитьЗначение, НольКакНоль", 
																				 ИмяОбластиЗначения,  "Декларация",
																				 ИмяОбластиЗначения + "_", "Декларация",
																				 10, Ложь, Неопределено));
		
		ПоказатьВводСтроки(ОписаниеОповещения,Значение, НСтр("ru='Введите значение';uk='Введіть значення'"), 10);
		
	  ИначеЕсли ВРЕГ(Лев(ИмяЯчейки, 5))  = "H01G2" и НЕ ВРЕГ(ИмяЯчейки)  = "H01G2S" Тогда

		ИмяОбластиЗначения = Лев(ИмяЯчейки, 5);  
		  
		Значение = ТабличныйДокумент.Области[ИмяОбластиЗначения].Значение;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводПоказателяВПолеТабличногоДокументЗавершение",
													   ЭтаФорма, Новый Структура("ИмяЯчейки, ИмяСтраницы,
																				 |ИмяЯчейкиКвадратов, ИмяСтраницыКвадратов, 
																				 |Размерность, ДополнитьЗначение, НольКакНоль", 
																				 ИмяОбластиЗначения,  НаименованиеТекЛиста,
																				 ИмяОбластиЗначения + "_", НаименованиеТекЛиста,
																				 3, Ложь, Неопределено));
		
		ПоказатьВводСтроки(ОписаниеОповещения,Значение, НСтр("ru='Введите значение';uk='Введіть значення'"), 3);
		                                
	  ИначеЕсли ВРЕГ(Лев(ИмяЯчейки, 6))  = "HTINNR" Тогда

		ИмяОбластиЗначения = Лев(ИмяЯчейки, 6);  
		  
		Значение = ТабличныйДокумент.Области[ИмяОбластиЗначения].Значение;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводПоказателяВПолеТабличногоДокументЗавершение",
													   ЭтаФорма, Новый Структура("ИмяЯчейки, ИмяСтраницы,
																				 |ИмяЯчейкиКвадратов, ИмяСтраницыКвадратов, 
																				 |Размерность, ДополнитьЗначение, НольКакНоль", 
																				 ИмяОбластиЗначения,  НаименованиеТекЛиста,
																				 ИмяОбластиЗначения + "_", НаименованиеТекЛиста,
																				 15, Ложь, Неопределено));
		
		ПоказатьВводСтроки(ОписаниеОповещения,Значение, НСтр("ru='Введите значение';uk='Введіть значення'"), 15);
		                                
										
									
	ИначеЕсли Найти(ИмяЯчейки, "HKBOS") > 0 Тогда
			
		Значение = ТабличныйДокумент.Области.HKBOS.Значение;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводПоказателяВПолеТабличногоДокументЗавершение",
													   ЭтаФорма, Новый Структура("ИмяЯчейки, ИмяСтраницы,
																				 |ИмяЯчейкиКвадратов, ИмяСтраницыКвадратов, 
																				 |Размерность, ДополнитьЗначение, НольКакНоль", 
																				 "HKBOS",  "Декларация",
																				 "HKBOS_", "Декларация",
																				 10, Ложь, Неопределено));
		
		ПоказатьВводСтроки(ОписаниеОповещения,Значение, НСтр("ru='Введите значение';uk='Введіть значення'"), 10);

	ИначеЕсли Найти(ИмяЯчейки, "HKBUH") > 0 Тогда
			
		Значение = ТабличныйДокумент.Области.HKBUH.Значение;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводПоказателяВПолеТабличногоДокументЗавершение",
													   ЭтаФорма, Новый Структура("ИмяЯчейки, ИмяСтраницы,
																				 |ИмяЯчейкиКвадратов, ИмяСтраницыКвадратов, 
																				 |Размерность, ДополнитьЗначение, НольКакНоль", 
																				 "HKBUH",  "Декларация",
																				 "HKBUH_", "Декларация",
																				 10, Ложь, Неопределено));
		
		ПоказатьВводСтроки(ОписаниеОповещения,Значение, НСтр("ru='Введите значение';uk='Введіть значення'"), 10);

	ИначеЕсли Найти(ИмяЯчейки, "HNSI") > 0 Тогда
			
		Значение = ТабличныйДокумент.Области.HNSI.Значение;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводПоказателяВПолеТабличногоДокументЗавершение",
													   ЭтаФорма, Новый Структура("ИмяЯчейки, ИмяСтраницы,
																				 |ИмяЯчейкиКвадратов, ИмяСтраницыКвадратов, 
																				 |Размерность, ДополнитьЗначение, НольКакНоль", 
																				 "HNSI",  "Декларация",
																				 "HNSI_", "Декларация",
																				 8, Ложь, Неопределено));
		
		ПоказатьВводСтроки(ОписаниеОповещения,Значение, НСтр("ru='Введите значение';uk='Введіть значення'"), 8);
		
	ИначеЕсли НаименованиеТекЛиста = "ПриложениеПН"
		И (Прав(ИмяЯчейки, 2) = "G9" ИЛИ Прав(ИмяЯчейки, 3) = "G10") Тогда
		
		ТабличныйДокумент.Области[ИмяЯчейки].Значение = ?(ТабличныйДокумент.Области[ИмяЯчейки].Значение, Ложь, Истина);
		Расчет(ЭтаФорма, "ПриложениеПН");
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбораВПолеТабличногоДокумента()

&НаКлиенте		
Процедура ВводПоказателяВПолеТабличногоДокументЗавершение(Значение, ДополнительныеПараметры) Экспорт
			
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Значение = Формат(Значение, "ЧГ=0");
	КонецЕсли;
	
	ИмяЯчейки = ДополнительныеПараметры.ИмяЯчейки;
	
	ЗаполнитьПоказательНаСервере(ДополнительныеПараметры.ИмяЯчейки, Значение, ЭтаФорма, ДополнительныеПараметры.ИмяСтраницы);

	// заполнение кодов организация для юр. физ. лиц...
	Если ИмяЯчейки = "HZYP" Тогда
	
		ЗаполнитьПоказательНаСервере("HZYP", Значение, ЭтаФорма, "Декларация");	
		ЗаполнитьПоказательНаСервере("HZYP", Значение, ЭтаФорма, "ПриложениеВП");	
		ЗаполнитьПоказательНаСервере("HZYP", Значение, ЭтаФорма, "ПриложениеПП");	
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ИмяСтраницыКвадратов) Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, ДополнительныеПараметры.ИмяСтраницыКвадратов, ДополнительныеПараметры.ИмяЯчейкиКвадратов, ДополнительныеПараметры.Размерность, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
	КонецЕсли;
	                         
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	Модифицированность = Истина;
		
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", Область.Имя));
	ИмяОбласти = Область.Имя;
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если ИмяРаздела = "Декларация" Тогда
		Если    ИмяОбласти = "HTIN" 
			ИЛИ ИмяОбласти = "HBUH" 
			ИЛИ ИмяОбласти = "HBOS" Тогда
			
			СтруктураДанныхПриложениеАВ[ИмяОбласти] = ТабличныйДокумент.Области[ИмяОбласти].Значение;
			СтруктураДанныхПриложениеЗП[ИмяОбласти] = ТабличныйДокумент.Области[ИмяОбласти].Значение;
			Для каждого ДанныеПН Из ТаблицаСтраницыРаздела1 Цикл
				ДанныеПН.Данные[0].Значение.Вставить(ИмяОбласти, ТабличныйДокумент.Области[ИмяОбласти].Значение);
			КонецЦикла;
			СтруктураДанныхПриложениеТЦ[ИмяОбласти] = ТабличныйДокумент.Области[ИмяОбласти].Значение;
			СтруктураДанныхПриложениеВП[ИмяОбласти] = ТабличныйДокумент.Области[ИмяОбласти].Значение;
			СтруктураДанныхПриложениеРИ[ИмяОбласти] = ТабличныйДокумент.Области[ИмяОбласти].Значение;
			СтруктураДанныхПриложениеПЗ[ИмяОбласти] = ТабличныйДокумент.Области[ИмяОбласти].Значение;
			СтруктураДанныхПриложениеАМ[ИмяОбласти] = ТабличныйДокумент.Области[ИмяОбласти].Значение;
			СтруктураДанныхПриложениеЦП[ИмяОбласти] = ТабличныйДокумент.Области[ИмяОбласти].Значение;
			СтруктураДанныхПриложениеПП[ИмяОбласти] = ТабличныйДокумент.Области[ИмяОбласти].Значение;
			Для каждого ДанныеКИК Из ТаблицаСтраницыРаздела2 Цикл
				ДанныеКИК.Данные[0].Значение.Вставить(ИмяОбласти, ТабличныйДокумент.Области[ИмяОбласти].Значение);
			КонецЦикла;
			Для каждого ДанныеКК Из ТаблицаСтраницыРаздела3 Цикл
				ДанныеКК.Данные[0].Значение.Вставить(ИмяОбласти, ТабличныйДокумент.Области[ИмяОбласти].Значение);
			КонецЦикла;
			Для каждого ДанныеКТЦ Из ТаблицаСтраницыРаздела4 Цикл
				ДанныеКТЦ.Данные[0].Значение.Вставить(ИмяОбласти, ТабличныйДокумент.Области[ИмяОбласти].Значение);
			КонецЦикла;
			Для каждого ДанныеКЦП Из ТаблицаСтраницыРаздела5 Цикл
				ДанныеКЦП.Данные[0].Значение.Вставить(ИмяОбласти, ТабличныйДокумент.Области[ИмяОбласти].Значение);
			КонецЦикла;
			
			Если ИмяОбласти = "HTIN" Тогда
				СтруктураДанныхСлужебныеДанные["TIN"] = ТабличныйДокумент.Области[ИмяОбласти].Значение;	
			КонецЕсли;
			
		ИначеЕсли    ИмяОбласти = "T1RXXXXG2S_1" Тогда
			Если ЗначениеЗаполнено(ТабличныйДокумент.Области[ИмяОбласти].Значение) Тогда
				ТабличныйДокумент.Области["HJ1"].Значение = "X";
			Иначе
				ТабличныйДокумент.Области["HJ1"].Значение = "";
			КонецЕсли;
		ИначеЕсли    ИмяОбласти = "T2RXXXXG2S_1" Тогда
			Если ЗначениеЗаполнено(ТабличныйДокумент.Области[ИмяОбласти].Значение) Тогда
				ТабличныйДокумент.Области["HJ2"].Значение = "X";
			Иначе
				ТабличныйДокумент.Области["HJ2"].Значение = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента()

&НаКлиенте
Процедура ДатаПодписиПриИзменении(Элемент)
	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
	Модифицированность = Истина;
		
КонецПроцедуры // ДатаПодписиПриИзменении()

&НаСервере
Процедура ПослеСменыЕдИзмеренияИТочности()

	ЗаполнитьПустыеСтруктурыДанных();
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
		
КонецПроцедуры // ПослеСменыЕдИзмеренияИТочности()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
&НаСервере
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в гривнах точность не может превышать 2 знака';uk='%1: при виведенні сум у гривнях точність не може перевищувати 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах гривен точность не может превышать 3 знака';uk='%1: при виведенні сум в тисячах гривень точність не може перевищувати 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах гривен точность не может превышать 6 знаков';uk='%1: при виведенні сум у мільйонах гривень точність не може перевищувати 6 знаків'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
		
КонецПроцедуры // Обновить()

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	    
КонецПроцедуры // ОткрытьФормуНастроек()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("Автосохранение", Ложь);
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет",		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", 		СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
					
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
    
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Если РезультатВыбора <> Неопределено Тогда
		КопироватьДанныеФормы(РезультатВыбора, мДеревоВыбранныхСтраниц);
		РегламентированнаяОтчетностьКлиентСервер.ПрорисоватьПодменюПечать(ЭтаФорма);
		Модифицированность = Истина;
					
		флЗначенияИдентичны = Истина;
		
		Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
			
			Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = РезультатВыбора.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
				флЗначенияИдентичны = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			
			#Если ВебКлиент Тогда
				ИзменитьТаблицуВариантовЗаполненияНаСервере();
			#Иначе
				РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			#КонецЕсли	
			
			Расчет(ЭтаФорма);
			
		КонецЕсли;
		
		Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		 ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
			ПослеСменыЕдИзмеренияИТочности();
		КонецЕсли;
		
		// Управляем видимостью страниц основной панели формы
	    РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
		
		Если НЕ флЗначенияИдентичны Тогда
			
			СформироватьДеревоРазделовОтчетаНаКлиенте();
			
			Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
				
				// Пытаемся найти ранее запомненный раздел.
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
				
				Если НЕ НайденнаяСтрока = Неопределено 
					И НЕ НомерСтраницыРазделаОтчета = Неопределено 
					И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
					
					НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
					
				КонецЕсли;
				
				// В случае успешного поиска, устанавливаем курсор на найденный раздел.
				Если НЕ НайденнаяСтрока = Неопределено Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				КонецЕсли;
				
			КонецЕсли;
			
			// обнулим информацию о выделенных областях, так как набор страниц были изменен.
			СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Неопределено;
			
		КонецЕсли;
		
	Иначе
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры // ИзменитьТаблицуВариантовЗаполненияНаСервере()

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
		
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)

	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела" + Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);

КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхДекларация.Очистить();
	СтруктураДанныхПриложениеАВ.Очистить();
	СтруктураДанныхПриложениеАМ.Очистить();
	СтруктураДанныхПриложениеВП.Очистить();
	СтруктураДанныхПриложениеЗП.Очистить();
	СтруктураДанныхПриложениеПЗ.Очистить();
	СтруктураДанныхПриложениеПН.Очистить();
	СтруктураДанныхПриложениеРИ.Очистить();
	СтруктураДанныхПриложениеТЦ.Очистить();
	СтруктураДанныхПриложениеЦП.Очистить();
	СтруктураДанныхПриложениеПП.Очистить();
	СтруктураДанныхПриложениеКИК.Очистить();
	СтруктураДанныхПриложениеКК.Очистить();
	СтруктураДанныхПриложениеКТЦ.Очистить();
	СтруктураДанныхПриложениеКЦП.Очистить();
	
	СтруктураДанныхСлужебныеДанные.Очистить();
	
	ТаблицаСтраницыРаздела1.Очистить();
	ТаблицаСтраницыРаздела2.Очистить();
	ТаблицаСтраницыРаздела3.Очистить();
	ТаблицаСтраницыРаздела4.Очистить();
	ТаблицаСтраницыРаздела5.Очистить();
	
	ИнициализацияМногостраничныхРазделов();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	
	Если СтруктураРеквизитовФормы.НаимТекущегоРаздела = "ПриложениеПЗ" Тогда
		ВывестиТекстыЗаголовковВПриложениеПЗ(ЭтаФорма, 1);
		ВывестиТекстыЗаголовковВПриложениеПЗ(ЭтаФорма, 2);
	КонецЕсли;
	
КонецПроцедуры // ОчиститьНаСервере()

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры // ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере()



&НаКлиенте
Процедура Выгрузить(Команда)

	ВыгрузитьОтчет();

КонецПроцедуры // Выгрузить()      

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Открыть();
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт

	Если ЛЕВ(Ячейка.Раздел, 11) = "Приложение6" Тогда
		
		Ячейка.ИмяЯчейки = "D6" + Ячейка.ИмяЯчейки + "_" + Сред(Ячейка.Раздел, 12);
		Ячейка.Раздел = "Декларация";
	
	ИначеЕсли ЛЕВ(Ячейка.Раздел, 11) = "Приложение8" Тогда
		
		Ячейка.ИмяЯчейки = "D8" + Ячейка.ИмяЯчейки + "_" + Сред(Ячейка.Раздел, 12);
		Ячейка.Раздел = "Декларация";
	
	КонецЕсли;

	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
		
КонецПроцедуры // АктивизироватьЯчейку()


// ПоказатьБланк()
//
&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры // ПоказатьБланк()

// ПечататьСразу()
//
&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры // ПечататьСразу()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено, НеИзФормыОтчета = Ложь) Экспорт
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и%1задать его в качестве используемого по умолчанию!';uk='Перед формуванням друкованих форм необхідно визначити в системі принтер%1задати його в якості використовуваного за замовчуванням!'"), Символы.ПС));				
		Возврат;
	КонецЕсли;
              	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...';uk='%1. Формується друкована форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
				
	ПечатьНаСервере(ВидПечати, ЧтоИскать);
		
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

КонецПроцедуры // Печать()

// ПечатьНаСервере()
//
&НаСервере
Процедура ПечатьНаСервере(ВидПечати, ЧтоИскать = Неопределено);
				
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
				
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	ОбщиеРеквизитыРазделов = Новый Структура();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЕстьДуплекс",        СтруктураРеквизитовФормы.ЕстьДуплекс);
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
КонецПроцедуры // ПечатьНаСервере()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов)
		
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
КонецПроцедуры // ВывестиНаПечатьЛист()

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		СохрАктивнаяСтраница = ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница;
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = СохрАктивнаяСтраница;
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
    		
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()
      
&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	Если Найти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета + " (форма 1кв.2021) ";
	КонецЕсли;
	
	ВнешнийСтр = НСтр("ru='- внешний отчет';uk='- зовнішній звіт'");                                   
	Заголовок = Заголовок + ?(Найти(ЭтаФорма.ИмяФормы, "Внешний") > 0, ВнешнийСтр, "");
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если Найти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если Найти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
	ИначеЕсли Найти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
			
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если Найти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
	ИначеЕсли Найти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СформироватьДеревоРазделовОтчетаНаКлиенте();
	
КонецПроцедуры // ОчисткаРегламентированногоОтчетаНаКлиенте()

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	ПараметрыЗаполненияЗвит1С = Неопределено;
	
	ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С);
	
	ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьАвто()

&НаСервере
Процедура ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С)
	
	ОчиститьНаСервере();

	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	Заполнить(ПараметрыЗаполненияЗвит1С);
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТаблицаСтраницыРаздела1.Количество());
	//ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТаблицаСтраницыРаздела2.Количество());
	//ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТаблицаСтраницыРаздела3.Количество());
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТаблицаСтраницыРаздела4.Количество());
	//ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, ТаблицаСтраницыРаздела5.Количество());
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура Заполнить(ПараметрыЗаполненияЗвит1С)
	
    ТаблицаРасшифровки = Неопределено;
	Если СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровки") И ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки) Тогда
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	КонецЕсли;
	
	Если ТаблицаРасшифровки = Неопределено Тогда
		ТаблицаРасшифровки = Новый ТаблицаЗначений;
		ТаблицаРасшифровки.Колонки.Добавить("ИмяПоказателя");
		ТаблицаРасшифровки.Колонки.Добавить("НаименованиеПоказателя");
		ТаблицаРасшифровки.Колонки.Добавить("ЗнакОперации");
		ТаблицаРасшифровки.Колонки.Добавить("НаименованиеСлагаемого");
		ТаблицаРасшифровки.Колонки.Добавить("Сумма");
		ТаблицаРасшифровки.Колонки.Добавить("ИмяРаздела");
		ТаблицаРасшифровки.Колонки.Добавить("ДополнительныеПараметры");
	КонецЕсли;
	
	ТаблицаРасшифровки.Очистить();
	
	ОбщиеПараметрыРасшифровки = Новый Структура;
	ОбщиеПараметрыРасшифровки.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ОбщиеПараметрыРасшифровки.Вставить("НачалоПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ОбщиеПараметрыРасшифровки.Вставить("КонецПериода", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БП" ИЛИ РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БСП" 
		или РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации(Истина) = "BASERP" Тогда
		НалогНаПрибыльБезКорректировокФинансовогоРезультата = УчетнаяПолитика.НалогНаПрибыльБезКорректировокФинансовогоРезультата(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Иначе
		ПараметрыУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаОрганизаций.ПараметрыУчетнойПолитики(СтруктураРеквизитовФормы.Организация, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		НалогНаПрибыльБезКорректировокФинансовогоРезультата = ПараметрыУчетнойПолитики.НалогНаПрибыльБезКорректировокФинансовогоРезультата;
	КонецЕсли;
	
	Если НЕ ТипЗнч(ПараметрыЗаполненияЗвит1С) = Тип("Структура") Тогда
		ПараметрыЗаполненияЗвит1С = Новый Структура;
	КонецЕсли;
	
	ДанныеФормы = ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы2];
	СтруктураГруппы2 = ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		
	
	///////////////////////////////////////////////////////////////////////////
	// Показатели фин. отчетности
	ЗаполнитьДанныеИзФинОтчетности(ПараметрыЗаполненияЗвит1С);
	
	Если СтруктураРеквизитовФормы.ОтчетЗаДваПериода = Неопределено Тогда
		СтруктураРеквизитовФормы.ОтчетЗаДваПериода =0;
	КонецЕсли;	

	Если СтруктураРеквизитовФормы.ОтчетЗаДваПериода Тогда
		// будем получать данные начиная с последнего квартала прошлого года.
		// Например, если фирма начала свою деятельность с 15.10.11 г. то подаёт Декларацию о прибыли она только за 1 кв 2012 года.
		ЗаполнитьДанныеИзФинОтчетности(ПараметрыЗаполненияЗвит1С, 1);
	КонецЕсли;
	
	СтруктураДанныхДекларация["HD11"] = "+";
	
	///////////////////////////////////////////////////////////////////////////
	// Разницы по налогу на прибыль
	Если НалогНаПрибыльБезКорректировокФинансовогоРезультата = Ложь Тогда
		ЗаполнитьПриложениеРИ_АМ_ТЦ();
	Иначе
		
		СтруктураГруппы2[0].T2RXXXXG2S =  "Прийнято рішення  про незастосування коригувань фінансового результату до оподаткування на усі різниці";
		СтруктураДанныхДекларация["HJ2"] = "X";
		
		Если ОкруглитьЧислоПоФормату(ЭтаФорма, СтруктураДанныхДекларация.R001G3) > СтруктураРеквизитовФормы.ЛимитСуммыДоходаНалоговыеРазницы Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Доход (строка 01 Декларации) превысил %1 грн, при этом в учетной политике указано, что учет разниц по налогу на прибыль не ведется. В данном случае учет разниц является обязательным!';uk= 'Дохід (рядок 01 Декларації) перевищив %1 грн, при цьому в обліковій політиці зазначено, що облік різниць з податку на прибуток не ведеться. В даному випадку облік різниць є обов''язковим!'"),
																				   СтруктураРеквизитовФормы.ЛимитСуммыДоходаНалоговыеРазницы);
			
			Если НЕ СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Ложь Тогда
				мСписокСообщенийЗвит1С.Добавить(4,ТекстСообщения);
			Иначе
				Сообщить(ТекстСообщения, СтатусСообщения.Важное);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	///////////////////////////////////////////////////////////////////////////
	// 3.2.4 РИ - Убытки прошлых периодов			
	ЗаполнитьУбытокПрошлогоГода(ПараметрыЗаполненияЗвит1С);
	
	///////////////////////////////////////////////////////////////////////////
	// Приложение ЗП
	ЗаполнитьПриложениеЗП();
	
	///////////////////////////////////////////////////////////////////////////
	// КИК
	Ставка = СтруктураДанныхДекларация.R006G1;
	Для каждого ДанныеКК Из ЭтаФорма.ТаблицаСтраницыРаздела3 Цикл
		ДанныеКК.Данные[0].Значение.Вставить("R04G1", Ставка)
	КонецЦикла;

	///////////////////////////////////////////////////////////////////////////
	// Декларация
	ЗаполнитьПоказателиПрошогоПериода(ПараметрыЗаполненияЗвит1С);
	
	ЗначениеВРеквизитФормы(СтруктураГруппы2, СтруктураРеквизитовФормы.мИдГруппы2);
	
	СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтавкуНалогаНаПрибыль(Организация, Дата)
	
	Запрос = Новый Запрос();
	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации(Истина) = "BASERP" Тогда
		Запрос.УстановитьПараметр("ВидНалоговойДеятельности", Перечисления.ТипНалоговойДеятельности.ОблагаемыйПоОбычнойСтавке);
	Иначе
		Запрос.УстановитьПараметр("ВидНалоговойДеятельности", Справочники.ВидыНалоговойДеятельности.ОблагаемаяПоОбычнойСтавке);
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаСреза", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СтавкиНалогаНаПрибыльСрезПоследних.Ставка,
	               |	ВЫБОР
	               |		КОГДА СтавкиНалогаНаПрибыльСрезПоследних.Организация = &Организация
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК Порядок
	               |ИЗ
	               |	РегистрСведений.СтавкиНалогаНаПрибыль.СрезПоследних(
	               |			&ДатаСреза,
	               |			ВидНалоговойДеятельности = &ВидНалоговойДеятельности
	               |				И (Организация = &Организация
	               |					ИЛИ Организация = &ПустаяОрганизация)) КАК СтавкиНалогаНаПрибыльСрезПоследних
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок";
	
	ДанныеПоСтавке = Запрос.Выполнить().Выгрузить();
	
	Ставка = 0;
	Если ДанныеПоСтавке.Количество() > 0 Тогда
		Ставка = ДанныеПоСтавке[0].Ставка;
	КонецЕсли;
	
	Возврат Ставка;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтавкуНалогаНаПрибыльЕРП(Организация, Дата)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаСреза", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтавкиНалогаНаПрибыльСрезПоследних.Ставка,
	               |	ВЫБОР
	               |		КОГДА СтавкиНалогаНаПрибыльСрезПоследних.Организация = &Организация
	               |			ТОГДА 0
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК Порядок
	               |ИЗ
	               |	РегистрСведений.СтавкиНалогаНаПрибыль.СрезПоследних(
	               |			&ДатаСреза,
	               |			(Организация = &Организация
	               |					ИЛИ Организация = &ПустаяОрганизация)) КАК СтавкиНалогаНаПрибыльСрезПоследних
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок";
	
	ДанныеПоСтавке = Запрос.Выполнить().Выгрузить();
	
	Ставка = 0;
	Если ДанныеПоСтавке.Количество() > 0 Тогда
		Ставка = ДанныеПоСтавке[0].Ставка;
	КонецЕсли;
	
	Возврат Ставка;

КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеИзФинОтчетности(ПараметрыЗаполненияЗвит1С, КварталПрошлГод = 0)
	
	R001G3 = 0;
	R002G3 = 0;
	
	ДатаПериодаОтчета = КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	НомерКвартала = Месяц(КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета))/3;
	Если КварталПрошлГод = 1 Тогда
		// последний квартал прошлого года
		ДатаПериодаОтчета = КонецГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));	
		НомерКвартала = 4;
	КонецЕсли;

	Если СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Ложь Тогда
	
		Если СтруктураРеквизитовФормы.ВидФинОтчетности = 0 Тогда
			
			ИсточникОтчета = "РегламентированныйОтчетФинансовыйРезультат";
			ИмяПоля = "ПолеТабличногоДокументаФинРез";
			ИмяДля01 	  = Новый Массив();
			ИмяДля01.Добавить("П20003");
			ИмяДля01.Добавить("П21203");
			ИмяДля01.Добавить("П22003");
			ИмяДля01.Добавить("П22203");
			ИмяДля01.Добавить("П22403");
			
			ИмяДля02Плюс  = "П22903";
			ИмяДля02Минус = "П22953";
			СписокСтрокДляРасшифровки01 = "2000, 2120, 2200, 2220, 2240";
			СписокСтрокДляРасшифровки02 = "2290/2295";
			
			НазваниеФормыОтчетности	= "Розділу I Звіту про фінансовий результат (Звіту про сукупний дохід)";
			
			СтруктураДанныхДекларация.HF2 =  "+";
			СтруктураДанныхДекларация.HF1 =  "+";
			
			Если НомерКвартала = 4  И КварталПрошлГод = 0 Тогда
				СтруктураДанныхДекларация.HF3 =  "+";
				СтруктураДанныхДекларация.HF4 =  "+";
				СтруктураДанныхДекларация.HF5 =  "+";
			КонецЕсли;
			
		ИначеЕсли СтруктураРеквизитовФормы.ВидФинОтчетности = 1 Тогда
			
			ИсточникОтчета = "РегламентированныйОтчетБалансМП";
			ИмяПоля 	  = "ПолеТабличногоДокументаОтчетМП";
			ИмяДля01 	  = Новый Массив();
			ИмяДля01.Добавить("ПП22803");
			
			ИмяДля02Плюс  = "ПП22903";
			ИмяДля02Минус = "";
			
			СписокСтрокДляРасшифровки01 = "2280";
			СписокСтрокДляРасшифровки02 = "2290";
			
			НазваниеФормыОтчетности	= "Розділу 2 Фінансового звіту суб'єкта малого підприємництва";
			
			СтруктураДанныхДекларация.HF6 =  "+";
			СтруктураДанныхДекларация.HF7 =  "+";
			
		ИначеЕсли СтруктураРеквизитовФормы.ВидФинОтчетности = 2 Тогда
			
			ИсточникОтчета = "РегламентированныйОтчетБалансМПС";
			ИмяПоля 	  = "ПолеТабличногоДокументаОтчетМП";
			ИмяДля01 	  = Новый Массив();
			ИмяДля01.Добавить("ПП22803");
			ИмяДля02Плюс  = "ПП22903";
			ИмяДля02Минус = "";
			
			СписокСтрокДляРасшифровки01 = "2280";
			СписокСтрокДляРасшифровки02 = "2290";
			
			НазваниеФормыОтчетности	= "Розділу 2 Фінансового звіту суб'єкта малого підприємництва (скороченого)";
			
			СтруктураДанныхДекларация.HF8 =  "+";
			СтруктураДанныхДекларация.HF9 =  "+";
			
		КонецЕсли;
		
		ФинЗапрос = Новый Запрос ("
		|ВЫБРАТЬ
		| РегламентированныйОтчет.ДанныеОтчета
		
		|ИЗ
		|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
		|
		|ГДЕ
		|	НЕ РегламентированныйОтчет.ПометкаУдаления И
		|	РегламентированныйОтчет.Организация = &Организация И
		|	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета И
		|	РегламентированныйОтчет.ДатаОкончания = &ДатаОкончания"
		);
		
		ФинЗапрос.УстановитьПараметр ("ДатаОкончания",	ДатаПериодаОтчета);
		ФинЗапрос.УстановитьПараметр ("Организация",		СтруктураРеквизитовФормы.Организация);
		ФинЗапрос.УстановитьПараметр ("ИсточникОтчета", 	ИсточникОтчета);
		
		ТаблицаРезультатов = ФинЗапрос.Выполнить().Выгрузить();
		
		Если  НЕ ТаблицаРезультатов.Количество() = 1 Тогда

			Сообщить(НСтр("ru='Не удалось получить данных из отчета о финансовом состоянии. Строки 01 и 02 Декларации заполнены не будут!';uk= 'Не вдалося отримати дані зі звіту про фінансовий стан, рядки 01 та 02 Декларації заповнені не будуть!'"));
			Сообщить(НСтр("ru='	Обнаружено сохраненных отчетов без пометок удаления: ';uk= '	Виявлено збережених звітів без помітки про вилучення: '") + ТаблицаРезультатов.Количество() + Символы.ПС);
			
		Иначе	
			
			ПоказателиОтчета    = Неопределено;
			ЗначенияПоказателей = Неопределено;
			ДанныеОтчета = ТаблицаРезультатов[0].ДанныеОтчета.Получить();
			ДанныеОтчета.Свойство("ПоказателиОтчета",ПоказателиОтчета);
			ПоказателиОтчета.Свойство(ИмяПоля, ЗначенияПоказателей);
			
			Для каждого ТекИмяДля01 Из ИмяДля01 Цикл
				R001G3 = R001G3 + ЗначенияПоказателей[ТекИмяДля01];
			КонецЦикла;
			
			R002G3 =  ЗначенияПоказателей[ИмяДля02Плюс];
			Если ЗначениеЗаполнено(ИмяДля02Минус) Тогда
				R002G3 =  R002G3 - ЗначенияПоказателей[ИмяДля02Минус];
			КонецЕсли;
			
		КонецЕсли;
		
		// Теперь округлим показатели так как они отражаются в фин. отчетности (с точностью до 1000 или 100 грн)
		Если СтруктураРеквизитовФормы.ВидФинОтчетности = 0 Тогда
			
			// округляем до 1000 грн
			R002G3 = Окр(R002G3, -3);
			
		Иначе
			
			// округляем до 100 грн
			R002G3 = Окр(R002G3, -2);
		
		КонецЕсли;
		
		Если КварталПрошлГод = 1 Тогда
			// последний квартал прошлого года
			НазваниеФормыОтчетности = НазваниеФормыОтчетности + " за 4 квартал минулого року";
		КонецЕсли;
		СтруктураДанныхДекларация.R001G3 =  СтруктураДанныхДекларация.R001G3 + R001G3;
		СтруктураДанныхДекларация.R002G3 =  СтруктураДанныхДекларация.R002G3 + R002G3;
		
		
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
														    "R001G3", 
															"Показник 01 Декларації",
															"+",
															"Значення рядка(ів) " + СписокСтрокДляРасшифровки01 + " " + НазваниеФормыОтчетности
															,R001G3
															,,,,,"Декларация");

		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
														    "R002G3", 
															"Показник 02 Декларації",
															"+",
															"Значення рядка(ів) " + СписокСтрокДляРасшифровки02 + " " + НазваниеФормыОтчетности
															,R002G3
															,,,,,"Декларация");
		
	Иначе	
		
		// получаем данные из Фредо 
		Если НомерКвартала = 1 Тогда
			ТипПериода = 10;
		ИначеЕсли НомерКвартала = 2 Тогда
			ТипПериода = 20;	
		ИначеЕсли НомерКвартала = 3 Тогда
			ТипПериода = 25;	
		ИначеЕсли НомерКвартала = 4 Тогда
			ТипПериода = 30;	
		КонецЕсли;
		
		НомерПериода = 1;
		ГодПериода   = Год(ДатаПериодаОтчета);		                            
		
		Если СтруктураРеквизитовФормы.ВидФинОтчетности = 0 Тогда
			
			ИмяСхемы = "S0100213";
			
			ИмяДля01 	  = Новый Массив();
			ИмяДля01.Добавить("A2000");
			ИмяДля01.Добавить("A2120");
			ИмяДля01.Добавить("A2200");
			ИмяДля01.Добавить("A2220");
			ИмяДля01.Добавить("A2240");
			
			
			ИмяДля02Плюс  = "A2290";
			ИмяДля02Минус = "A2295";
			СписокСтрокДляРасшифровки01 = "2000, 2120, 2200, 2220, 2240";
			СписокСтрокДляРасшифровки02 = "2290/2295";
			
			НазваниеФормыОтчетности	= "Розділу I Звіту про фінансовий результат (Звіту про сукупний дохід)";
			
			СтруктураДанныхДекларация.HF2 = "+";
			СтруктураДанныхДекларация.HF1 = "+";
			
			Если НомерКвартала = 4  и КварталПрошлГод = 0 Тогда
				СтруктураДанныхДекларация.HF3 = "+";
				СтруктураДанныхДекларация.HF4 = "+";
				СтруктураДанныхДекларация.HF5 = "+";
			КонецЕсли;
			
		ИначеЕсли СтруктураРеквизитовФормы.ВидФинОтчетности = 1 Тогда
			
			ИмяСхемы = "S0110012";
			Если Год(ДатаПериодаОтчета) <= 2019 и Месяц(ДатаПериодаОтчета) < 9 Тогда
				ИмяСхемы = "S0110011";
			КонецЕсли;
			
			ИмяДля01 	  = Новый Массив();
			ИмяДля01.Добавить("B2280_3");
			
			ИмяДля02Плюс  = "B2290_3";
			ИмяДля02Минус = "";
			
			СписокСтрокДляРасшифровки01 = "2280";
			СписокСтрокДляРасшифровки02 = "2290";
			
			НазваниеФормыОтчетности	= "Розділу 2 Фінансового звіту суб'єкта малого підприємництва";
			
			СтруктураДанныхДекларация.HF6 = "+";
			СтруктураДанныхДекларация.HF7 = "+";
			
		ИначеЕсли СтруктураРеквизитовФормы.ВидФинОтчетности = 2 Тогда    
			
			ИмяСхемы      = "S0111005";  
			
			ИмяДля01 	  = Новый Массив();
			ИмяДля01.Добавить("B2280_3");
			
			ИмяДля02Плюс  = "B2290_3";
			ИмяДля02Минус = "";
			
			СписокСтрокДляРасшифровки01 = "2280";
			СписокСтрокДляРасшифровки02 = "2290";
			
			НазваниеФормыОтчетности	= "Розділу 2 Фінансового звіту суб'єкта малого підприємництва (скороченого)";
			
			СтруктураДанныхДекларация.HF8 = "+";
			СтруктураДанныхДекларация.HF9 = "+";
			
		КонецЕсли;
				
		Если КварталПрошлГод = 1 Тогда
			// последний квартал прошлого года
			НазваниеФормыОтчетности = НазваниеФормыОтчетности + " за 4 квартал минулого року";
			ПараметрыЗаполненияИзФинОтчетностиПрошл = Новый Структура;
			ПараметрыЗаполненияИзФинОтчетностиПрошл.Вставить("ПараметрыЗапроса", Новый Структура("ИмяСхемы, ТипПериода, НомерПериода, ГодПериода", ИмяСхемы, ТипПериода, НомерПериода, ГодПериода));
			ПараметрыЗаполненияИзФинОтчетностиПрошл.Вставить("ИмяСхемы", ИмяСхемы);
			ПараметрыЗаполненияИзФинОтчетностиПрошл.Вставить("ИмяДля01", ИмяДля01);
			ПараметрыЗаполненияИзФинОтчетностиПрошл.Вставить("ИмяДля02Плюс", ИмяДля02Плюс);
			ПараметрыЗаполненияИзФинОтчетностиПрошл.Вставить("ИмяДля02Минус", ИмяДля02Минус);
			ПараметрыЗаполненияИзФинОтчетностиПрошл.Вставить("СписокСтрокДляРасшифровки01", СписокСтрокДляРасшифровки01);
			ПараметрыЗаполненияИзФинОтчетностиПрошл.Вставить("СписокСтрокДляРасшифровки02", СписокСтрокДляРасшифровки02);	
			ПараметрыЗаполненияИзФинОтчетностиПрошл.Вставить("НазваниеФормыОтчетности", НазваниеФормыОтчетности);		
			ПараметрыЗаполненияЗвит1С.Вставить("ПараметрыЗаполненияИзФинОтчетностиПрошл", ПараметрыЗаполненияИзФинОтчетностиПрошл);
		Иначе	
			ПараметрыЗаполненияИзФинОтчетности = Новый Структура;
			ПараметрыЗаполненияИзФинОтчетности.Вставить("ПараметрыЗапроса", Новый Структура("ИмяСхемы, ТипПериода, НомерПериода, ГодПериода", ИмяСхемы, ТипПериода, НомерПериода, ГодПериода));
			ПараметрыЗаполненияИзФинОтчетности.Вставить("ИмяСхемы", ИмяСхемы);
			ПараметрыЗаполненияИзФинОтчетности.Вставить("ИмяДля01", ИмяДля01);
			ПараметрыЗаполненияИзФинОтчетности.Вставить("ИмяДля02Плюс", ИмяДля02Плюс);
			ПараметрыЗаполненияИзФинОтчетности.Вставить("ИмяДля02Минус", ИмяДля02Минус);
			ПараметрыЗаполненияИзФинОтчетности.Вставить("СписокСтрокДляРасшифровки01", СписокСтрокДляРасшифровки01);
			ПараметрыЗаполненияИзФинОтчетности.Вставить("СписокСтрокДляРасшифровки02", СписокСтрокДляРасшифровки02);	
			ПараметрыЗаполненияИзФинОтчетности.Вставить("НазваниеФормыОтчетности", НазваниеФормыОтчетности);		
			ПараметрыЗаполненияЗвит1С.Вставить("ПараметрыЗаполненияИзФинОтчетности", ПараметрыЗаполненияИзФинОтчетности);
		КонецЕсли;

	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПриложениеРИ_АМ_ТЦ()
	
	//////////////////////////////////////////////////////////////////
	//	амортизация  и другие данные по ОС
	Если ИСТИНА Тогда // группировка кода
		
	СтруктураДанныхДекларация.HD8 = "+";	
	СтруктураДанныхДекларация.HD6 = "+";	
		
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация", 	СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр("ДатаНач", 		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Если СтруктураРеквизитовФормы.ОтчетЗаДваПериода Тогда
		// будем получать данные начиная с последнего квартала прошлого года.
		// Например, если фирма начала свою деятельность с 15.10.11 г., то подаёт Декларацию о прибыли она только за 1 кв 2012 года.
		Запрос.УстановитьПараметр("ДатаНач",	ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -3));	
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаКон", 		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	СчетаУчета = Новый Массив;
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ДругиеНеоборотныеМатериальныеАктивыГруппа);
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
	Запрос.УстановитьПараметр("СчетаУчета", СчетаУчета);
	
	Запрос.УстановитьПараметр("СчетАмортизации", ПланыСчетов.Хозрасчетный.ИзносАмортизацияНеоборотныхАктивов);
	
	СчетаЗатратПоУценке = Новый Массив;
	СчетаЗатратПоУценке.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьРеализованныхНеоборотныхАктивов);
	СчетаЗатратПоУценке.Добавить(ПланыСчетов.Хозрасчетный.УценкаНеоборотныхАктивовИФинансовыхИнвестиций);
	Запрос.УстановитьПараметр("СчетаЗатратПоУценке", СчетаЗатратПоУценке);

	СчетаДоходов = Новый Массив;
	СчетаДоходов.Добавить(ПланыСчетов.Хозрасчетный.ДоходыОтРеализации);
	СчетаДоходов.Добавить(ПланыСчетов.Хозрасчетный.ДругойОперационныйДоход);
	СчетаДоходов.Добавить(ПланыСчетов.Хозрасчетный.ДоходОтУчастияВКапитале);
	СчетаДоходов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеФинансовыеДоходы);
	СчетаДоходов.Добавить(ПланыСчетов.Хозрасчетный.ДругиеДоходы);
	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БП" ИЛИ РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БСП" Тогда
		СчетаДоходов.Добавить(ПланыСчетов.Хозрасчетный.ЧрезвычайныеДоходы);
	КонецЕсли;	
	Запрос.УстановитьПараметр("СчетаДоходов", СчетаДоходов);      	
	
	Запрос.УстановитьПараметр("Счет745", ПланыСчетов.Хозрасчетный.ДоходОтБесплатноПолученныхАктивов);
	Запрос.УстановитьПараметр("Счет742", ПланыСчетов.Хозрасчетный.ДоходОтРеализацииНеоборотныхАктивов);
	Запрос.УстановитьПараметр("Счет286", ПланыСчетов.Хозрасчетный.НеоборотныеАктивыИГруппыВыбытияУдерживаемыеДляПродажи);
	Запрос.УстановитьПараметр("Счет943", ПланыСчетов.Хозрасчетный.СебестоимостьРеализованныхПроизводственныхЗапасов);
	Запрос.УстановитьПараметр("НеоблНеХозДеят", Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность);
	
   // Амортизация = обороты Кт 13 не в корреспонденции с 10 и 13. По любому нал. назначению Поддерживается изменение нал. назначения в середине года
   // Уценка      = Кт оборот 10,11,12 в корр 975, 972
   // Дооценка    = Дт оборот 10,11,12 в корр 7 кл счетов кроме 745
   // Восстановление полезности  = Дт оборот 10,11,12 в корр 742
   // Списание    = Кт оборот 10,11,12,286 - не в корр с 10,11,12,13,286 при условии, что на конец приода нет остатка по этим счетам учета (по Дт)
	
	ИДКонф = РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации();
		
	Запрос.Текст = "ВЫБРАТЬ
	               |	СведенияГруппа.ОсновноеСредство КАК НеоборотныйАктив,
	               |	СведенияГруппа.НалоговаяГруппаОС КАК Группа,
	               |	СведенияНалНазначение.НалоговоеНазначение КАК НалоговоеНазначение
	               |ПОМЕСТИТЬ Сведения
	               |ИЗ
	               |	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(&ДатаКон, Организация = &Организация) КАК СведенияГруппа
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НалоговыеНазначенияОС.СрезПоследних(&ДатаКон, Организация = &Организация) КАК СведенияНалНазначение
	               |		ПО СведенияГруппа.ОсновноеСредство = СведенияНалНазначение.ОсновноеСредство
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Сведения.НематериальныйАктив,
	               |	Сведения.НалоговаяГруппаОС,
	               |	Сведения.НалоговоеНазначение
	               |ИЗ
	               |	РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(&ДатаКон, Организация = &Организация) КАК Сведения
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА ХозрасчетныйОстаткиИОбороты.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.БиблиотечныеФондыКоличественно)
	               |				ТОГДА ЗНАЧЕНИЕ(Справочник.НалоговыеГруппыОсновныхСредств.ОСГруппа10)
	               |			КОГДА ХозрасчетныйОстаткиИОбороты.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МалоценныеНеоборотныеМатериальныеАктивыКоличественно)
	               |				ТОГДА ЗНАЧЕНИЕ(Справочник.НалоговыеГруппыОсновныхСредств.ОСГруппа11)
	               |		КОНЕЦ),
	               |	МАКСИМУМ(ХозрасчетныйОстаткиИОбороты.НалоговоеНазначение)
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			,
	               |			,
	               |			Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.БиблиотечныеФондыКоличественно)
	               |				ИЛИ Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.МалоценныеНеоборотныеМатериальныеАктивыКоличественно),
	               |			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура),
	               |			Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ХозрасчетныйОстаткиИОбороты.Субконто1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА Остатки.Субконто1 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ Остатки.Субконто1 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ Остатки.Субконто1 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА Остатки.Субконто1
	               |		КОГДА Остатки.Субконто2 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ Остатки.Субконто2 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ Остатки.Субконто2 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА Остатки.Субконто2
	               |		КОГДА Остатки.Субконто3 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ Остатки.Субконто3 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ Остатки.Субконто3 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА Остатки.Субконто3
	               |	КОНЕЦ КАК НеоборотныйАктив,
				   
				   
				   |	СУММА(ВЫБОР 
			   	   |			КОГДА СЧЕТ.Родитель В (&СчетаУчета) ИЛИ СЧЕТ.Родитель.Родитель В (&СчетаУчета) 
			   	   |				ТОГДА Остатки.СуммаНУНачальныйОстатокДт
			   	   |			ИНАЧЕ 0 КОНЕЦ) КАК ОстаточнаяСтоимостьНУ10Нач,
				   
				   |	СУММА(ВЫБОР 
			   	   |			КОГДА СЧЕТ.Родитель В (&СчетаУчета) ИЛИ СЧЕТ.Родитель.Родитель В (&СчетаУчета) 
			   	   |				ТОГДА Остатки.СуммаНУКонечныйОстатокДт
			   	   |			ИНАЧЕ 0 КОНЕЦ) КАК ОстаточнаяСтоимостьНУ10Кон,
				   
				   |	СУММА(ВЫБОР 
				   |			КОГДА СЧЕТ.Родитель В (&СчетАмортизации) ИЛИ СЧЕТ.Родитель.Родитель В (&СчетАмортизации) 
				   |				ТОГДА Остатки.СуммаНУНачальныйОстатокКт 
			   	   |			ИНАЧЕ 0 КОНЕЦ) КАК ОстаточнаяСтоимостьНУ13Нач,
				   
				   |	СУММА(ВЫБОР 
				   |			КОГДА СЧЕТ.Родитель В (&СчетАмортизации) ИЛИ СЧЕТ.Родитель.Родитель В (&СчетАмортизации) 
				   |				ТОГДА Остатки.СуммаНУКонечныйОстатокКт 
			   	   |			ИНАЧЕ 0 КОНЕЦ) КАК ОстаточнаяСтоимостьНУ13Кон,
				   
				   
				   |	СУММА(ВЫБОР 
			   	   |			КОГДА СЧЕТ.Родитель В (&СчетаУчета) ИЛИ СЧЕТ.Родитель.Родитель В (&СчетаУчета)ИЛИ Счет = &Счет286
				   |			 ТОГДА Остатки.СуммаКонечныйОстатокДт
				   |		  КОНЕЦ) КАК ОстатокБУ,
	               |	СУММА(ВЫБОР 
			   	   |			КОГДА СЧЕТ.Родитель В (&СчетаУчета) ИЛИ СЧЕТ.Родитель.Родитель В (&СчетаУчета)ИЛИ Счет = &Счет286
				   |			 ТОГДА Остатки.СуммаНУКонечныйОстатокДт
				   |		  КОНЕЦ)  КАК ОстатокНУ
	               |ПОМЕСТИТЬ Остатки
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
				   |			&ДатаНач,
				   |			&ДатаКон,,,
	               |			Счет В ИЕРАРХИИ (&СчетаУчета)
	               |				ИЛИ Счет = &Счет286 ИЛИ Счет в ИЕРАРХИИ (&СчетАмортизации),
	               |			,
	               |			Организация = &Организация) КАК Остатки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЫБОР
	               |		КОГДА Остатки.Субконто1 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ Остатки.Субконто1 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ Остатки.Субконто1 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА Остатки.Субконто1
	               |		КОГДА Остатки.Субконто2 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ Остатки.Субконто2 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ Остатки.Субконто2 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА Остатки.Субконто2
	               |		КОГДА Остатки.Субконто3 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ Остатки.Субконто3 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ Остатки.Субконто3 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА Остатки.Субконто3
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОбороты.Субконто1 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто1
	               |		КОГДА ХозрасчетныйОбороты.Субконто2 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ ХозрасчетныйОбороты.Субконто2 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто2 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто2
	               |		КОГДА ХозрасчетныйОбороты.Субконто3 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ ХозрасчетныйОбороты.Субконто3 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто3 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто3
	               |	КОНЕЦ КАК НеоборотныйАктив,
	               |	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК АмортизацияБУ,
	               |	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК АмортизацияНУ,
	               |	0 КАК УценкаБУ,
	               |	0 КАК ДооценкаБУ,
				   |	0 КАК ВосстПолезнБУ,
				   
				   |	0 КАК ПервоначальнаяСтоимостьБУ,
	               |	0 КАК ОстаточнаяСтоимостьБУ,
	               |	0 КАК ОстаточнаяСтоимостьНУ,
				   
				   |	0 КАК ОстаточнаяСтоимостьНУ10Нач,
				   |	0 КАК ОстаточнаяСтоимостьНУ10Кон,
				   |	0 КАК ОстаточнаяСтоимостьНУ13Нач,
				   |	0 КАК ОстаточнаяСтоимостьНУ13Кон
				   
				   |ПОМЕСТИТЬ Данные
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			,
	               |			Счет В ИЕРАРХИИ (&СчетАмортизации),
	               |			,
	               |			Организация = &Организация,
	               |			НЕ КорСчет В ИЕРАРХИИ (&СчетаУчета)
	               |				И НЕ КорСчет В ИЕРАРХИИ (&СчетАмортизации),
	               |			) КАК ХозрасчетныйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОбороты.Субконто1 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто1
	               |		КОГДА ХозрасчетныйОбороты.Субконто2 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ ХозрасчетныйОбороты.Субконто2 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто2 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто2
	               |		КОГДА ХозрасчетныйОбороты.Субконто3 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ ХозрасчетныйОбороты.Субконто3 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто3 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто3
	               |	КОНЕЦ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОбороты.Субконто1 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто1
	               |		КОГДА ХозрасчетныйОбороты.Субконто2 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ ХозрасчетныйОбороты.Субконто2 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто2 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто2
	               |		КОГДА ХозрасчетныйОбороты.Субконто3 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ ХозрасчетныйОбороты.Субконто3 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто3 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто3
	               |	КОНЕЦ,
	               |	0,
	               |	0,
	               |	СУММА(ХозрасчетныйОбороты.СуммаОборотКт),
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
				   
				   |	0 КАК ОстаточнаяСтоимостьНУ10Нач,
				   |	0 КАК ОстаточнаяСтоимостьНУ10Кон,
				   |	0 КАК ОстаточнаяСтоимостьНУ13Нач,
				   |	0 КАК ОстаточнаяСтоимостьНУ13Кон
				   
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&СчетаУчета), , Организация = &Организация, КорСчет В (&СчетаЗатратПоУценке), ) КАК ХозрасчетныйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОбороты.Субконто1 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто1
	               |		КОГДА ХозрасчетныйОбороты.Субконто2 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ ХозрасчетныйОбороты.Субконто2 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто2 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто2
	               |		КОГДА ХозрасчетныйОбороты.Субконто3 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ ХозрасчетныйОбороты.Субконто3 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто3 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто3
	               |	КОНЕЦ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОбороты.Субконто1 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто1
	               |		КОГДА ХозрасчетныйОбороты.Субконто2 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ ХозрасчетныйОбороты.Субконто2 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто2 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто2
	               |		КОГДА ХозрасчетныйОбороты.Субконто3 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ ХозрасчетныйОбороты.Субконто3 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто3 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто3
	               |	КОНЕЦ,
	               |	0,
	               |	0,
	               |	0,
				   |	СУММА(ВЫБОР КОГДА КорСчет = &Счет742 ТОГДА 0 ИНАЧЕ ХозрасчетныйОбороты.СуммаОборотДт КОНЕЦ),
				   |	СУММА(ВЫБОР КОГДА КорСчет = &Счет742 ТОГДА ХозрасчетныйОбороты.СуммаОборотДт ИНАЧЕ 0 КОНЕЦ),
	               |	0,
	               |	0,
	               |	0,
				   
				   |	0 КАК ОстаточнаяСтоимостьНУ10Нач,
				   |	0 КАК ОстаточнаяСтоимостьНУ10Кон,
				   |	0 КАК ОстаточнаяСтоимостьНУ13Нач,
				   |	0 КАК ОстаточнаяСтоимостьНУ13Кон
				   
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			,
	               |			Счет В ИЕРАРХИИ (&СчетаУчета),
	               |			,
	               |			Организация = &Организация,
	               |			КорСчет В ИЕРАРХИИ (&СчетаДоходов)
	               |				И НЕ КорСчет = &Счет745,
	               |			) КАК ХозрасчетныйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОбороты.Субконто1 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто1
	               |		КОГДА ХозрасчетныйОбороты.Субконто2 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ ХозрасчетныйОбороты.Субконто2 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто2 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто2
	               |		КОГДА ХозрасчетныйОбороты.Субконто3 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ ХозрасчетныйОбороты.Субконто3 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто3 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто3
	               |	КОНЕЦ
	               |
				   
				   
				   
				   
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
				   |ВЫБРАТЬ
	               |	ХозрасчетныйОбороты.КорСубконто1,
				   
				   |	0,
	               |	0,
				   
				   |	0,
	               |	0,
				   |	0,
				   
				   |	СУММА(ВложенныйЗапрос.ПервоначальнаяСтоимость),
				   |	0,
	               |	0,
				   
				   |	0,
	               |	0,
	               |	0,
	               |	0
				   |ИЗ
				   |	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет = &Счет943, , Организация = &Организация, КорСчет = &Счет286, ) КАК ХозрасчетныйОбороты
				   |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				   |			ПервоначальныеСведенияНМАБухгалтерскийУчет.НематериальныйАктив КАК ОсновноеСредство,
				   |			ПервоначальныеСведенияНМАБухгалтерскийУчет.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость
				   |		ИЗ
				   |			РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет КАК ПервоначальныеСведенияНМАБухгалтерскийУчет
				   |		
				   |		ОБЪЕДИНИТЬ ВСЕ
				   |		
				   |		ВЫБРАТЬ
				   |			ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство,
				   |			ПервоначальныеСведенияОСБухгалтерскийУчет.ПервоначальнаяСтоимость
				   |		ИЗ
				   |			РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет КАК ПервоначальныеСведенияОСБухгалтерскийУчет) КАК ВложенныйЗапрос
				   |		ПО ХозрасчетныйОбороты.КорСубконто1 = ВложенныйЗапрос.ОсновноеСредство
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НалоговыеНазначенияОС КАК НалоговыеНазначенияОС
                   |		ПО ХозрасчетныйОбороты.КорСубконто1 = НалоговыеНазначенияОС.ОсновноеСредство
	               |ГДЕ
				   |	НалоговыеНазначенияОС.НалоговоеНазначение = &НеоблНеХозДеят
				   
	               |СГРУППИРОВАТЬ ПО
				   |	ХозрасчетныйОбороты.КорСубконто1
				   // - I по НМА и МНМА
				   |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА       ХозрасчетныйОбороты.Субконто1 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто1
	               |		КОГДА       ХозрасчетныйОбороты.Субконто2 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто2 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто2
	               |		КОГДА       ХозрасчетныйОбороты.Субконто3 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто3 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто3
	               |	КОНЕЦ,
				   
				   |	0,
	               |	0,
				   
				   |	0,
	               |	0,
				   |	0,
				   
				   |	СУММА(ХозрасчетныйОбороты.СуммаОборотКт),	
				   |	0,
	               |	0,
				   
				   |	0,
	               |	0,
	               |	0,
	               |	0
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
				   |			&ДатаНач,
	               |			&ДатаКон,
	               |			,
	               |			Счет В ИЕРАРХИИ (&СчетаУчета),
	               |			,
	               |			Организация = &Организация) КАК ХозрасчетныйОбороты
	               |ГДЕ
				   |			ХозрасчетныйОбороты.Субконто1 ССЫЛКА Справочник.НематериальныеАктивы
	               |		ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Справочник.Номенклатура
	               |		ИЛИ ХозрасчетныйОбороты.Субконто2 ССЫЛКА Справочник.НематериальныеАктивы
	               |		ИЛИ ХозрасчетныйОбороты.Субконто2 ССЫЛКА Справочник.Номенклатура
	               |		ИЛИ ХозрасчетныйОбороты.Субконто3 ССЫЛКА Справочник.НематериальныеАктивы
	               |		ИЛИ ХозрасчетныйОбороты.Субконто3 ССЫЛКА Справочник.Номенклатура
				   |
				   |СГРУППИРОВАТЬ ПО
	               |	ВЫБОР
	               |		КОГДА  ХозрасчетныйОбороты.Субконто1 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто1
	               |		КОГДА  ХозрасчетныйОбороты.Субконто2 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто2 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто2
	               |		КОГДА  ХозрасчетныйОбороты.Субконто3 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто3 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто3
	               |	КОНЕЦ
				   
				   |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОбороты.Субконто1 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто1
	               |		КОГДА ХозрасчетныйОбороты.Субконто2 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ ХозрасчетныйОбороты.Субконто2 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто2 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто2
	               |		КОГДА ХозрасчетныйОбороты.Субконто3 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ ХозрасчетныйОбороты.Субконто3 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто3 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто3
	               |	КОНЕЦ,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	СУММА(ХозрасчетныйОбороты.СуммаОборотКт),
	               |	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт),
				   
				   |	0,
				   |	0,
				   |	0,
				   |	0
				   
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			,
	               |			Счет В ИЕРАРХИИ (&СчетаУчета)
	               |				ИЛИ Счет = &Счет286,
	               |			,
	               |			Организация = &Организация,
	               |			НЕ (КорСчет В ИЕРАРХИИ (&СчетаУчета) ИЛИ КорСчет В ИЕРАРХИИ (&СчетАмортизации) ИЛИ КорСчет В (&СчетаЗатратПоУценке) ИЛИ КорСчет = &Счет286),
	               |			) КАК ХозрасчетныйОбороты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	               |		ПО (ВЫБОР
	               |				КОГДА ХозрасчетныйОбороты.Субконто1 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |						ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Справочник.НематериальныеАктивы
	               |						ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Справочник.Номенклатура
	               |					ТОГДА ХозрасчетныйОбороты.Субконто1
	               |				КОГДА ХозрасчетныйОбороты.Субконто2 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |						ИЛИ ХозрасчетныйОбороты.Субконто2 ССЫЛКА Справочник.НематериальныеАктивы
	               |						ИЛИ ХозрасчетныйОбороты.Субконто2 ССЫЛКА Справочник.Номенклатура
	               |					ТОГДА ХозрасчетныйОбороты.Субконто2
	               |				КОГДА ХозрасчетныйОбороты.Субконто3 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |						ИЛИ ХозрасчетныйОбороты.Субконто3 ССЫЛКА Справочник.НематериальныеАктивы
	               |						ИЛИ ХозрасчетныйОбороты.Субконто3 ССЫЛКА Справочник.Номенклатура
	               |					ТОГДА ХозрасчетныйОбороты.Субконто3
	               |			КОНЕЦ = Остатки.НеоборотныйАктив)
				   |ГДЕ ЕСТЬNULL(Остатки.ОстатокБУ, 0) = 0 И ЕСТЬNULL(Остатки.ОстатокНУ, 0) = 0 
				   |СГРУППИРОВАТЬ ПО
	               |	ВЫБОР
	               |		КОГДА ХозрасчетныйОбороты.Субконто1 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто1 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто1
	               |		КОГДА ХозрасчетныйОбороты.Субконто2 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ ХозрасчетныйОбороты.Субконто2 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто2 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто2
	               |		КОГДА ХозрасчетныйОбороты.Субконто3 ССЫЛКА" + ?(ИДКонф = "БП" ИЛИ ИДКонф = "БСП" , " Справочник.ОсновныеСредства"," Справочник.ОбъектыЭксплуатации")+"
	               |				ИЛИ ХозрасчетныйОбороты.Субконто3 ССЫЛКА Справочник.НематериальныеАктивы
	               |				ИЛИ ХозрасчетныйОбороты.Субконто3 ССЫЛКА Справочник.Номенклатура
	               |			ТОГДА ХозрасчетныйОбороты.Субконто3
	               |	КОНЕЦ
				   |
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Остатки.НеоборотныйАктив,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
				   
				   |	Остатки.ОстаточнаяСтоимостьНУ10Нач КАК ОстаточнаяСтоимостьНУ10Нач,
				   |	Остатки.ОстаточнаяСтоимостьНУ10Кон КАК ОстаточнаяСтоимостьНУ10Кон,
				   |	Остатки.ОстаточнаяСтоимостьНУ13Нач КАК ОстаточнаяСтоимостьНУ13Нач,
				   |	Остатки.ОстаточнаяСтоимостьНУ13Кон КАК ОстаточнаяСтоимостьНУ13Кон
				   
	               |ИЗ
	               |	Остатки КАК Остатки
				   
				   |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(Сведения.Группа) КАК НалоговаяГруппаОсновныхСредств,
	               |	МАКСИМУМ(Сведения.НалоговоеНазначение) КАК НалоговоеНазначение,
	               |	Данные.НеоборотныйАктив КАК НеоборотныйАктив,
	               |	СУММА(Данные.АмортизацияБУ) КАК АмортизацияБУ,
				   |ВЫБОР
	               |	КОГДА Сведения.НалоговоеНазначение = &НеоблНеХозДеят
	               |		ТОГДА Истина
	               |		ИНАЧЕ Ложь
	               |КОНЕЦ КАК Непроизводственное,				   
	               |	СУММА(ВЫБОР
	               |			КОГДА Сведения.НалоговоеНазначение = &НеоблНеХозДеят
	               |				ТОГДА 0
	               |			ИНАЧЕ Данные.АмортизацияНУ
	               |		КОНЕЦ) КАК АмортизацияНУ,
	               |	СУММА(Данные.УценкаБУ) КАК УценкаБУ,
	               |	СУММА(Данные.ДооценкаБУ) КАК ДооценкаБУ,
				   |	СУММА(Данные.ВосстПолезнБУ) КАК ВосстПолезнБУ,
	               |	СУММА(ПервоначальнаяСтоимостьБУ) КАК ПервоначальнаяСтоимостьБУ,
	               |	СУММА(Данные.ОстаточнаяСтоимостьБУ) КАК ОстаточнаяСтоимостьБУ,
	               |	СУММА(ВЫБОР
	               |			КОГДА Сведения.НалоговоеНазначение = &НеоблНеХозДеят
	               |				ТОГДА 0
	               |			ИНАЧЕ Данные.ОстаточнаяСтоимостьНУ
	               |		КОНЕЦ) КАК ОстаточнаяСтоимостьНУ,
	               |	СУММА(ВЫБОР
	               |			КОГДА Сведения.НалоговоеНазначение = &НеоблНеХозДеят
	               |				ТОГДА 0
	               |			ИНАЧЕ Данные.ОстаточнаяСтоимостьНУ10Нач
	               |		КОНЕЦ) КАК ОстаточнаяСтоимостьНУ10Нач,
	               |	СУММА(ВЫБОР
	               |			КОГДА Сведения.НалоговоеНазначение = &НеоблНеХозДеят
	               |				ТОГДА 0
	               |			ИНАЧЕ Данные.ОстаточнаяСтоимостьНУ10Кон
	               |		КОНЕЦ) КАК ОстаточнаяСтоимостьНУ10Кон,
	               |	СУММА(ВЫБОР
	               |			КОГДА Сведения.НалоговоеНазначение = &НеоблНеХозДеят
	               |				ТОГДА 0
	               |			ИНАЧЕ Данные.ОстаточнаяСтоимостьНУ13Нач
	               |		КОНЕЦ) КАК ОстаточнаяСтоимостьНУ13Нач,
	               |	СУММА(ВЫБОР
	               |			КОГДА Сведения.НалоговоеНазначение = &НеоблНеХозДеят
	               |				ТОГДА 0
	               |			ИНАЧЕ Данные.ОстаточнаяСтоимостьНУ13Кон
	               |		КОНЕЦ) КАК ОстаточнаяСтоимостьНУ13Кон
	               |ИЗ
	               |	Данные КАК Данные
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Сведения КАК Сведения
	               |		ПО Данные.НеоборотныйАктив = Сведения.НеоборотныйАктив
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Данные.НеоборотныйАктив,
				   |	ВЫБОР
	               |		КОГДА Сведения.НалоговоеНазначение = &НеоблНеХозДеят
	               |			ТОГДА Истина
	               |			ИНАЧЕ Ложь
	               |	КОНЕЦ
				   |УПОРЯДОЧИТЬ ПО МАКСИМУМ(Сведения.Группа), Данные.НеоборотныйАктив";
				   
	СписокОСДляАМ = Новый Соответствие;
	R0111G3_ОС = 0; R0111G3_НМА = 0; R0111G3_Номенклатура = 0; СписокОСДляR0111G3_ОС = Новый СписокЗначений;СписокОСДляR0111G3_НМА = Новый СписокЗначений;СписокОСДляR0111G3_Номенклатура = Новый СписокЗначений;
	R01111G3 = 0; СписокОСДляR01111G3 = Новый СписокЗначений;
	R0112G3 = 0; СписокОСДляR0112G3 = Новый СписокЗначений;
	R0113G3 = 0; СписокОСДляR0113G3 = Новый СписокЗначений;//непроизводственные
	R01211G3 = 0; СписокОСДляR01211G3 = Новый СписокЗначений;
	R01212G3 = 0; СписокОСДляR01212G3 = Новый СписокЗначений;
	R0122G3 = 0; СписокОСДляR0122G3 = Новый СписокЗначений;
	R0123G3 = 0; СписокОСДляR0123G3 = Новый СписокЗначений;
	R042162G3 = 0; 	
	ОстаточнаяСтоимостьРазвернуто = Новый Структура();
	Для Сч = 1 По 16 Цикл
		
		НомГр = Формат(Сч, "ЧЦ=2; ЧВН=");

		ОстаточнаяСтоимостьРазвернуто.Вставить("ОС_"+НомГр+"_10_нач", 0);
		ОстаточнаяСтоимостьРазвернуто.Вставить("ОС_"+НомГр+"_13_нач", 0);
		ОстаточнаяСтоимостьРазвернуто.Вставить("ОС_"+НомГр+"_10_кон", 0);
		ОстаточнаяСтоимостьРазвернуто.Вставить("ОС_"+НомГр+"_13_кон", 0);
		Если Сч <=6 Тогда
			ОстаточнаяСтоимостьРазвернуто.Вставить("НМА_"+НомГр+"_10_нач", 0);
			ОстаточнаяСтоимостьРазвернуто.Вставить("НМА_"+НомГр+"_13_нач", 0);
			ОстаточнаяСтоимостьРазвернуто.Вставить("НМА_"+НомГр+"_10_кон", 0);
			ОстаточнаяСтоимостьРазвернуто.Вставить("НМА_"+НомГр+"_13_кон", 0);
		КонецЕсли;
	КонецЦикла;
	Если ИДКонф = "ЕРП" Тогда
		Запрос286 = Новый Запрос();
		
		Запрос286.УстановитьПараметр("Организация", 	СтруктураРеквизитовФормы.Организация);
		Запрос286.УстановитьПараметр("ДатаКон", 		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		Запрос286.УстановитьПараметр("Счет286", ПланыСчетов.Хозрасчетный.НеоборотныеАктивыИГруппыВыбытияУдерживаемыеДляПродажи);
		
		Запрос286.Текст =  "ВЫБРАТЬ
		                   |	ХозрасчетныйОбороты.КорСчет,
		                   |	ХозрасчетныйОбороты.КорСубконто1 КАК НеоборотныйАктив,
		                   |	ХозрасчетныйОбороты.СуммаНУОборотКт,
		                   |	ХозрасчетныйОбороты.Регистратор,
		                   |	ЕСТЬNULL(ХозрасчетныйОстатки.СуммаОстаток, 0) КАК СуммаОстаток
		                   |ИЗ
		                   |	РегистрБухгалтерии.Хозрасчетный.Обороты(, &ДатаКон, Регистратор, , , Организация = &Организация, КорСчет = &Счет286, ) КАК ХозрасчетныйОбороты
		                   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет = &Счет286, , Организация = &Организация) КАК ХозрасчетныйОстатки
		                   |		ПО ХозрасчетныйОбороты.Субконто1 = ХозрасчетныйОстатки.Субконто1
		                   |ГДЕ
		                   |	ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.ПодготовкаКПередачеОС";
		
		Результат286 = Запрос286.Выполнить().Выгрузить();
	КонецЕсли;
	
	НалГруппыОС = Справочники.НалоговыеГруппыОсновныхСредств;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекНалГруппа = Выборка.НалоговаяГруппаОсновныхСредств;
		
		ТекСписок = СписокОСДляАМ[ТекНалГруппа];
		Если ТекСписок = Неопределено Тогда
			ТекСписок = Новый СписокЗначений;
		КонецЕсли;
		
		ТекСписок.Добавить(Выборка.НеоборотныйАктив);
		
		ИмяЯчейкиАМ = "";
		Если 	  ТекНалГруппа = НалГруппыОС.ОСГруппа2  Тогда ИмяЯчейкиАМ = "R0102G"
		ИначеЕсли ТекНалГруппа = НалГруппыОС.ОСГруппа3  Тогда ИмяЯчейкиАМ = "R0103G" 	
		ИначеЕсли ТекНалГруппа = НалГруппыОС.ОСГруппа4  Тогда ИмяЯчейкиАМ = "R0104G" 	
		ИначеЕсли ТекНалГруппа = НалГруппыОС.ОСГруппа5  Тогда ИмяЯчейкиАМ = "R0105G" 	
		ИначеЕсли ТекНалГруппа = НалГруппыОС.ОСГруппа6  Тогда ИмяЯчейкиАМ = "R0106G" 	
		ИначеЕсли ТекНалГруппа = НалГруппыОС.ОСГруппа7  Тогда ИмяЯчейкиАМ = "R0107G" 	
		ИначеЕсли ТекНалГруппа = НалГруппыОС.ОСГруппа8  Тогда ИмяЯчейкиАМ = "R0108G" 	
		ИначеЕсли ТекНалГруппа = НалГруппыОС.ОСГруппа9  Тогда ИмяЯчейкиАМ = "R0109G"
		ИначеЕсли ТекНалГруппа = НалГруппыОС.ОСГруппа12 Тогда ИмяЯчейкиАМ = "R0112G"
		ИначеЕсли ТекНалГруппа = НалГруппыОС.ОСГруппа14 Тогда ИмяЯчейкиАМ = "R0114G" 	
		ИначеЕсли ТекНалГруппа = НалГруппыОС.ОСГруппа15 Тогда ИмяЯчейкиАМ = "R0115G"
		ИначеЕсли ТекНалГруппа = НалГруппыОС.ОСГруппа16 Тогда ИмяЯчейкиАМ = "R0116G"
		ИначеЕсли ТекНалГруппа = НалГруппыОС.НМАГруппа1 Тогда ИмяЯчейкиАМ = "R0201G"
		ИначеЕсли ТекНалГруппа = НалГруппыОС.НМАГруппа2 Тогда ИмяЯчейкиАМ = "R0202G"
		ИначеЕсли ТекНалГруппа = НалГруппыОС.НМАГруппа3 Тогда ИмяЯчейкиАМ = "R0203G"
		ИначеЕсли ТекНалГруппа = НалГруппыОС.НМАГруппа4 Тогда ИмяЯчейкиАМ = "R0204G"
		ИначеЕсли ТекНалГруппа = НалГруппыОС.НМАГруппа5 Тогда ИмяЯчейкиАМ = "R0205G"
		ИначеЕсли ТекНалГруппа = НалГруппыОС.НМАГруппа6 Тогда ИмяЯчейкиАМ = "R0206G"
		ИначеЕсли ТекНалГруппа = НалГруппыОС.ОСВременнаяНалоговаяРазница Тогда 
			//отражается только в приложении РИ
			R042162G3 = R042162G3 + Выборка.АмортизацияНУ;
		ИначеЕсли СтруктураРеквизитовФормы.РИАмортизацияБУБиблФондовМНМА Тогда Продолжить;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ИмяЯчейкиАМ) Тогда
			СтруктураДанныхПриложениеАМ[ИмяЯчейкиАМ+"3"] = СтруктураДанныхПриложениеАМ[ИмяЯчейкиАМ+"3"] + Выборка.ОстаточнаяСтоимостьНУ10Нач - Выборка.ОстаточнаяСтоимостьНУ13Нач;
			СтруктураДанныхПриложениеАМ[ИмяЯчейкиАМ+"4"] = СтруктураДанныхПриложениеАМ[ИмяЯчейкиАМ+"4"] + Выборка.ОстаточнаяСтоимостьНУ10Кон - Выборка.ОстаточнаяСтоимостьНУ13Кон;
			СтруктураДанныхПриложениеАМ[ИмяЯчейкиАМ+"5"] = СтруктураДанныхПриложениеАМ[ИмяЯчейкиАМ+"5"] + Выборка.АмортизацияНУ;
			
			СписокОСДляАМ.Вставить(ТекНалГруппа, ТекСписок); 
			
			Если Сред(ИмяЯчейкиАМ, 3, 1) = "1" Тогда
				ИмяДляОстСтоим = "ОС_" + Сред(ИмяЯчейкиАМ, 4, 2);
			Иначе	
				ИмяДляОстСтоим = "НМА_"+ Сред(ИмяЯчейкиАМ, 4, 2);
			КонецЕсли;
			
			ОстаточнаяСтоимостьРазвернуто[ИмяДляОстСтоим + "_10_нач"] = ОстаточнаяСтоимостьРазвернуто[ИмяДляОстСтоим + "_10_нач"] + Выборка.ОстаточнаяСтоимостьНУ10Нач;
			ОстаточнаяСтоимостьРазвернуто[ИмяДляОстСтоим + "_13_нач"] = ОстаточнаяСтоимостьРазвернуто[ИмяДляОстСтоим + "_13_нач"] + Выборка.ОстаточнаяСтоимостьНУ13Нач;
			ОстаточнаяСтоимостьРазвернуто[ИмяДляОстСтоим + "_10_кон"] = ОстаточнаяСтоимостьРазвернуто[ИмяДляОстСтоим + "_10_кон"] + Выборка.ОстаточнаяСтоимостьНУ10Кон;
			ОстаточнаяСтоимостьРазвернуто[ИмяДляОстСтоим + "_13_кон"] = ОстаточнаяСтоимостьРазвернуто[ИмяДляОстСтоим + "_13_кон"] + Выборка.ОстаточнаяСтоимостьНУ13Кон;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.АмортизацияБУ) Тогда
			Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БП" ИЛИ РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БСП" Тогда
				ТипСпрОС = Тип("СправочникСсылка.ОсновныеСредства");
			Иначе	
				ТипСпрОС = Тип("СправочникСсылка.ОбъектыЭксплуатации");
			КонецЕсли;
			Если ТипЗнч(Выборка.НеоборотныйАктив) = ТипСпрОС Тогда
				СписокОСДляR0111G3_ОС.Добавить(Выборка.НеоборотныйАктив);
				R0111G3_ОС = R0111G3_ОС + Выборка.АмортизацияБУ;
			ИначеЕсли ТипЗнч(Выборка.НеоборотныйАктив) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда	
				СписокОСДляR0111G3_НМА.Добавить(Выборка.НеоборотныйАктив);	
				R0111G3_НМА = R0111G3_НМА + Выборка.АмортизацияБУ;
			Иначе
				СписокОСДляR0111G3_Номенклатура.Добавить(Выборка.НеоборотныйАктив);
				R0111G3_Номенклатура = R0111G3_Номенклатура + Выборка.АмортизацияБУ;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.УценкаБУ) Тогда
			СписокОСДляR01111G3.Добавить(Выборка.НеоборотныйАктив);
			R01111G3 = R01111G3 + Выборка.УценкаБУ;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ДооценкаБУ) Тогда
			СписокОСДляR01211G3.Добавить(Выборка.НеоборотныйАктив);
			R01211G3 = R01211G3 + Выборка.ДооценкаБУ;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ВосстПолезнБУ) Тогда
			СписокОСДляR01212G3.Добавить(Выборка.НеоборотныйАктив);
			R01212G3 = R01212G3 + Выборка.СписокОСДляR01212G3;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьБУ) Тогда
			Если Выборка.Непроизводственное Тогда
				СписокОСДляR0113G3.Добавить(Выборка.НеоборотныйАктив);
				R0113G3 = R0113G3 + Выборка.ОстаточнаяСтоимостьБУ;
			Иначе	
				СписокОСДляR0112G3.Добавить(Выборка.НеоборотныйАктив);
				R0112G3 = R0112G3 + Выборка.ОстаточнаяСтоимостьБУ;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ОстаточнаяСтоимостьНУ)
			И НЕ Выборка.Непроизводственное Тогда
			СписокОСДляR0122G3.Добавить(Выборка.НеоборотныйАктив);
			R0122G3 = R0122G3 + Выборка.ОстаточнаяСтоимостьНУ;
		ИначеЕсли  ИДКонф = "ЕРП" И НЕ Выборка.Непроизводственное Тогда   
			Результат286ОС = Результат286.Найти(Выборка.НеоборотныйАктив,"НеоборотныйАктив");
		    Если Результат286ОС <> Неопределено Тогда
				СуммаНУ286=Результат286ОС.СуммаНУОборотКт; 
				Если ЗначениеЗаполнено(СуммаНУ286) и Результат286ОС.СуммаОстаток=0 Тогда
					СписокОСДляR0122G3.Добавить(Выборка.НеоборотныйАктив);
					R0122G3 = R0122G3 + СуммаНУ286;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// первоначальная стоимость непроизводственного ОС в случае продажи
		Если  ЗначениеЗаполнено(Выборка.ПервоначальнаяСтоимостьБУ)
			И Выборка.Непроизводственное Тогда
			
			СписокОСДляR0123G3.Добавить(Выборка.НеоборотныйАктив);
			R0123G3 = R0123G3 + Выборка.ПервоначальнаяСтоимостьБУ;
		КонецЕсли;
		
	КонецЦикла;
	СчетаИзносаОС = Новый СписокЗначений();
	СчетаИзносаОС.Добавить(ПланыСчетов.Хозрасчетный.ИзносОсновныхСредств);
	СчетаИзносаОС.Добавить(ПланыСчетов.Хозрасчетный.ИзносДругихНеоборотныхМатериальныхАктивовИндивидуально);
	
	Для НомГрОС= 1 По 16 Цикл
		
		НомГр = Формат(НомГрОС, "ЧЦ=2; ЧВН=");
		
		ТекСписокОС = СписокОСДляАМ.Получить(НалГруппыОС["ОСГруппа" + НомГрОС]);
		Если ТекСписокОС = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
																"R01" + НомГр + "G3", 
																"Група ОЗ " + НомГрОС + ": Балансова вартість ОЗ на початок звітного (податкового) року (використовуються в госп. діяльності)",
																"+",
																"!СНД"
																,ОстаточнаяСтоимостьРазвернуто["ОС_" + НомГр + "_10_нач"]
																,?(НЕ(НомГрОС=10 ИЛИ НомГрОС=11), ПланыСчетов.Хозрасчетный.ОсновныеСредства, ПланыСчетов.Хозрасчетный.ДругиеНеоборотныеМатериальныеАктивыГруппа),,,,"ПриложениеАМ"
																,,,,ТекСписокОС);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
																"R01" + НомГр + "G3", 
																"Група ОЗ " + НомГрОС + ": Балансова вартість ОЗ на початок звітного (податкового) року (використовуються в госп. діяльності)",
																"-",
																"!СНК"
																,ОстаточнаяСтоимостьРазвернуто["ОС_" + НомГр + "_13_нач"]
																,СчетаИзносаОС,,,,"ПриложениеАМ"
																,,,,ТекСписокОС);
																
																
																
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
																"R01" + НомГр + "G4", 
																"Група ОЗ " + НомГрОС + ": Балансова вартість ОЗ на кінець звітного (податкового) року (використовуються в госп. діяльності)",
																"+",
																"!СКД"
																,ОстаточнаяСтоимостьРазвернуто["ОС_" + НомГр + "_10_кон"]
																,?(НЕ(НомГрОС=10 ИЛИ НомГрОС=11), ПланыСчетов.Хозрасчетный.ОсновныеСредства, ПланыСчетов.Хозрасчетный.ДругиеНеоборотныеМатериальныеАктивыГруппа),,,,"ПриложениеАМ"
																,,,,ТекСписокОС);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
																"R01" + НомГр + "G4", 
																"Група ОЗ " + НомГрОС + ": Балансова вартість ОЗ на кінець звітного (податкового) року (використовуються в госп. діяльності)",
																"-",
																"!СКК"
																,ОстаточнаяСтоимостьРазвернуто["ОС_" + НомГр + "_13_кон"]
																,СчетаИзносаОС,,,,"ПриложениеАМ"
																,,,,ТекСписокОС);
																
																
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
																"R01" + НомГр + "G5", 
																"Група ОЗ " + НомГрОС + ": Розрахована сума амортизації за п. 138.3 ПК (використовуються в госп. діяльності)",
																"+",
																"!КО"
																,СтруктураДанныхПриложениеАМ["R01" + НомГр + "G5"]
																,СчетаИзносаОС,,,,"ПриложениеАМ"
																,,,,ТекСписокОС);
	КонецЦикла;
	
	Для НомГрНМА= 1 По 6 Цикл
		
		НомГр = Формат(НомГрНМА, "ЧЦ=2; ЧВН=");
		
		ТекСписокНМА = СписокОСДляАМ.Получить(НалГруппыОС["НМАГруппа" + НомГрНМА]);
		Если ТекСписокНМА = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
															    "R02" + НомГр + "G3", 
																"Група НМА " + НомГрНМА + ": Балансова вартість ОЗ на початок звітного (податкового) року (використовуються в госп. діяльності)",
																"+",
																"!СНД"
																,ОстаточнаяСтоимостьРазвернуто["НМА_" + НомГр + "_10_нач"]
																,ПланыСчетов.Хозрасчетный.НематериальныеАктивы,,,,"ПриложениеАМ"
																,,,,ТекСписокНМА);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
															    "R02" + НомГр + "G3", 
																"Група НМА " + НомГрНМА + ": Балансова вартість ОЗ на початок звітного (податкового) року (використовуються в госп. діяльності)",
																"-",
																"!СНК"
																,ОстаточнаяСтоимостьРазвернуто["НМА_" + НомГр + "_13_нач"]
																,ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияНематериальныхАктивов,,,,"ПриложениеАМ"
																,,,,ТекСписокНМА);
		
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
															    "R02" + НомГр + "G4", 
																"Група НМА " + НомГрНМА + ": Балансова вартість ОЗ на кінець звітного (податкового) року (використовуються в госп. діяльності)",
																"-",
																"!СКД"
																,ОстаточнаяСтоимостьРазвернуто["НМА_" + НомГр + "_10_кон"]
																,ПланыСчетов.Хозрасчетный.НематериальныеАктивы,,,,"ПриложениеАМ"
																,,,,ТекСписокНМА);
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
															    "R02" + НомГр + "G4", 
																"Група НМА " + НомГрНМА + ": Балансова вартість ОЗ на кінець звітного (податкового) року (використовуються в госп. діяльності)",
																"+",
																"!СКК"
																,ОстаточнаяСтоимостьРазвернуто["НМА_" + НомГр + "_13_кон"]
																,ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияНематериальныхАктивов,,,,"ПриложениеАМ"
																,,,,ТекСписокНМА);

		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
															    "R02" + НомГр + "G5", 
																"Група НМА " + НомГрНМА + ": Розрахована сума амортизації за п. 138.3 ПК (використовуються в госп. діяльності)",
																"+",
																"!КО"
																,СтруктураДанныхПриложениеАМ["R02" + НомГр + "G5"]
																,ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияНематериальныхАктивов,,,,"ПриложениеАМ"
																,,,,ТекСписокНМА);
	КонецЦикла;
	
	Если НЕ (R0111G3_ОС + R0111G3_Номенклатура + R0111G3_НМА) = 0 Тогда
		СтруктураДанныхПриложениеРИ.R0111G3 = R0111G3_ОС + R0111G3_Номенклатура + R0111G3_НМА;
		
		Если СписокОСДляR0111G3_ОС.Количество() > 0  Тогда
			
			_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
																    "R0111G3", 
																	"Розрахована сума амортизації за правилами бухгалтерського обліку",
																	"+",
																	"!КО"
																	,R0111G3_ОС
																	,СчетаИзносаОС  ,,,,"ПриложениеРИ"
																	,,,,СписокОСДляR0111G3_ОС);
		КонецЕсли;
		
		Если СписокОСДляR0111G3_НМА.Количество() > 0  Тогда
			_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
																    "R0111G3", 
																	"Розрахована сума амортизації за правилами бухгалтерського обліку",
																	"+",
																	"!КО"
																	,R0111G3_НМА
																	,ПланыСчетов.Хозрасчетный.НакопленнаяАмортизацияНематериальныхАктивов,,,,"ПриложениеРИ"
																	,,,,СписокОСДляR0111G3_НМА);
		КонецЕсли;

		Если СписокОСДляR0111G3_Номенклатура.Количество() > 0  Тогда
			_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
																    "R0111G3", 
																	"Розрахована сума амортизації за правилами бухгалтерського обліку",
																	"+",
																	"!КО"
																	,R0111G3_Номенклатура
																	,ПланыСчетов.Хозрасчетный.ИзносДругихНеоборотныхМатериальныхАктивовКоличественно,,,,"ПриложениеРИ"
																	,,,,СписокОСДляR0111G3_Номенклатура);
		КонецЕсли;
		
		
	КонецЕсли;
	
	Если НЕ R01111G3 = 0 Тогда
		СтруктураДанныхПриложениеРИ.R01111G3 = R01111G3;
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
															    "R01111G3", 
																"Сума уцінки ОЗ за даними БО",
																"+",
																"!АС", 
																R01111G3,
																,//Счет
																,//КорСЧет
																, 
																,
																"ПриложениеРИ", //ИмяРаздела
																, //НомерЛиста
																, //МнЧ
																, //НомерСтроки
																СписокОСДляR01111G3);
	КонецЕсли;
	
	Если НЕ R0112G3 = 0 Тогда
		СтруктураДанныхПриложениеРИ.R0112G3 = R0112G3;
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
															    "R0112G3", 
																"Сума залишкової вартості виробничих ОЗ при списанні за даними БО",
																"+",
																"!АС", 
																R0112G3,
																,//Счет
																,//КорСЧет
																, 
																,
																"ПриложениеРИ", //ИмяРаздела
																, //НомерЛиста
																, //МнЧ
																, //НомерСтроки
																СписокОСДляR0112G3);
	КонецЕсли;	
	
	Если НЕ R0113G3 = 0 Тогда
		СтруктураДанныхПриложениеРИ.R0113G3 = R0113G3;
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
															    "R0113G3", 
																"Сума залишкової вартості невиробничих ОЗ при списанні за даними БО",
																"+",
																"!АС", 
																R0113G3,
																,//Счет
																,//КорСЧет
																, 
																,
																"ПриложениеРИ", //ИмяРаздела
																, //НомерЛиста
																, //МнЧ
																, //НомерСтроки
																СписокОСДляR0113G3);
	КонецЕсли;	
	
    Если НЕ R01211G3 = 0 Тогда
		СтруктураДанныхПриложениеРИ.R01211G3 = R01211G3;
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
															    "R01211G3", 
																"Сума дооцінки ОЗ за даними БО",
																"+",
																"!АС", 
																R01211G3,
																,//Счет
																,//КорСЧет
																, 
																,
																"ПриложениеРИ", //ИмяРаздела
																, //НомерЛиста
																, //МнЧ
																, //НомерСтроки
																СписокОСДляR01211G3);
	КонецЕсли;
	
    Если НЕ R01212G3 = 0 Тогда
		СтруктураДанныхПриложениеРИ.R01212G3 = R01212G3;
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
															    "R01212G3", 
																"Сума вигід від відновлення корисності ОЗ за даними БО",
																"+",
																"!АС", 
																R01212G3,
																,//Счет
																,//КорСЧет
																, 
																,
																"ПриложениеРИ", //ИмяРаздела
																, //НомерЛиста
																, //МнЧ
																, //НомерСтроки
																СписокОСДляR01212G3);
	КонецЕсли;	
	
    Если НЕ R0122G3 = 0 Тогда
		СтруктураДанныхПриложениеРИ.R0122G3 = R0122G3;
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
															    "R0122G3", 
																"Сума залишкової вартості виробничих ОЗ при списанні за даними ПО",
																"+",
																"!АС", 
																R0122G3,
																,//Счет
																,//КорСЧет
																, 
																,
																"ПриложениеРИ", //ИмяРаздела
																, //НомерЛиста
																, //МнЧ
																, //НомерСтроки
																СписокОСДляR0122G3);
	КонецЕсли;	
	
    Если НЕ R0123G3 = 0 Тогда
		СтруктураДанныхПриложениеРИ.R0123G3 = R0123G3;
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
															    "R0123G3", 
																"Сума первісної вартості невиробничих ОЗ при списанні за даними ПО",
																"+",
																"!АС", 
																R0123G3,
																,//Счет
																,//КорСЧет
																, 
																,
																"ПриложениеРИ", //ИмяРаздела
																, //НомерЛиста
																, //МнЧ
																, //НомерСтроки
																СписокОСДляR0123G3);
			ТекстСообщения = НСтр("ru='Проверьте правильность заполнения строки 1.2.3 приложения РІ. Сумма первоначальной стоимости не должна превышать выручки от продажи непроизводственных ОС.';uk= 'Перевірте правильність заповнення рядка 1.2.3 додатка РІ. Сума первісної вартості не повинна перевищувати виручки від продажу невиробничих ОЗ.'");
			Если СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Ложь Тогда
				Сообщить(ТекстСообщения,СтатусСообщения.Важное);
			Иначе
				мСписокСообщенийЗвит1С.Добавить(4,ТекстСообщения);
			КонецЕсли;																
	КонецЕсли;															
    Если НЕ R042162G3 = 0 Тогда  
		СтруктураДанныхПриложениеРИ.R042162G3 = R042162G3;
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
															    "R042162G3", 
																"Тимчасова податкова різниця: Розрахована сума амортизації",
																"+",
																"!КО"
																,R042162G3
																,СчетаИзносаОС,,,,"ПриложениеРИ"
																,,,,);
	КонецЕсли;	
	КОНЕЦЕСЛИ; //группировка кода
															
	//////////////////////////////////////////////////////////////////
	//	Автоматизированные разницы
	ЗаполнитьРемонтНепроизводственныхОС();
	ЗаполнитьШтрафы();
	ЗаполнитьСписаниеНеБезнЗадолженности();
	ЗаполнитьПередачуНеприбыльным();
	ЗаполнитьПриобретениеУНеприбыльных();
	ЗаполнитьПриобретениеИзОффшоров();
	ЗаполнитьПриобретениеИзОффшоровОргформа();
	ЗаполнитьРеализациюИзОффшоров();
	ЗаполнитьРеализациюИзОффшоровОргформа();
	
	//////////////////////////////////////////////////////////////////
	//	ручные корректировки по счету РИ
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ДатаНач", 	   СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Если СтруктураРеквизитовФормы.ОтчетЗаДваПериода Тогда
		// будем получать данные начиная с последнего квартала прошлого года.
		// Например, если фирма начал свою деятельность с 15.10.11 г. то подаёт Декларацию о прибыли она только только за 1 кв 2012 года.
		Запрос.УстановитьПараметр("ДатаНач",	ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -3));	
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаКон", 	   СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",   СтруктураРеквизитовФормы.Организация);
	
	Запрос.УстановитьПараметр("СчетКорректировок", ПланыСчетов.Хозрасчетный.РазницыПоНалогуНаПрибыльРучныеКорректировки);
	МассивСубконто = Новый Массив();
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговыхДеклараций);
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ГруппыОсновныхСредств);
	Запрос.УстановитьПараметр("МассивСубконто", МассивСубконто);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОбороты.Счет КАК Счет,
	               |	ХозрасчетныйОбороты.Субконто1 КАК Статья,
	               |	ХозрасчетныйОбороты.Субконто2 КАК Группа,
	               |	ХозрасчетныйОбороты.СуммаОборотДт КАК Сумма
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет = &СчетКорректировок, &МассивСубконто, Организация = &Организация, , ) КАК ХозрасчетныйОбороты";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтНД = Справочники.СтатьиНалоговыхДеклараций;
	Пока Выборка.Следующий() Цикл
		Если 	  Выборка.Статья = СтНД.НП15_РИ_АМ_БУ 		 								Тогда ЗаполнитьКорректировкуРИ("R0111G3", "+",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_АМ_НУ 		 								Тогда ЗаполнитьКорректировкуРИ("R0121G3", "-",  Выборка.Сумма, Выборка.Статья, Выборка.Группа)  		
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_АМ_Уценки	 								Тогда ЗаполнитьКорректировкуРИ("R01111G3", "+",  Выборка.Сумма, Выборка.Статья)  		
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_АМ_Дооценки									Тогда ЗаполнитьКорректировкуРИ("R01211G3", "-",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_АМ_ОстаточБУ								Тогда ЗаполнитьКорректировкуРИ("R0112G3", "+",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_АМ_ОстаточНУ								Тогда ЗаполнитьКорректировкуРИ("R0122G3", "-",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Резерв_47_Приход							Тогда ЗаполнитьКорректировкуРИ("R0211G3", "+",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Резерв_47_Расход							Тогда ЗаполнитьКорректировкуРИ("R0221G3", "-",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Резерв_47_Корректировка						Тогда ЗаполнитьКорректировкуРИ("R02211G3", "-",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Резерв_38_Приход							Тогда ЗаполнитьКорректировкуРИ("R0212G3", "+",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Резерв_38_Задолж							Тогда ЗаполнитьКорректировкуРИ("R0213G3", "+",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Резерв_38_Корректировка						Тогда ЗаполнитьКорректировкуРИ("R0222G3", "-",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Резерв_Банк_НебезнЗадолж                    Тогда ЗаполнитьКорректировкуРИ("R0214G3", "+",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Резерв_Банк_КорректирЗадолж					Тогда ЗаполнитьКорректировкуРИ("R0224G3", "-",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Резерв_Банк_ПогашениеЗадолж					Тогда ЗаполнитьКорректировкуРИ("R02241G3", "-",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Резерв_Банк_Связан                          Тогда ЗаполнитьКорректировкуРИ("R0215G3", "+",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_Кредиты									Тогда ЗаполнитьКорректировкуРИ("R0311G3", "+",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_КредитыАморт							Тогда ЗаполнитьКорректировкуРИ("R0321G3", "-",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_ДоходКапитал							Тогда ЗаполнитьКорректировкуРИ("R0323G3", "-",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_Дивиденды								Тогда ЗаполнитьКорректировкуРИ("R03231G3", "-",  Выборка.Сумма, Выборка.Статья)	
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_КиноСубсидии							Тогда ЗаполнитьКорректировкуРИ("R0325G3", "-",  Выборка.Сумма, Выборка.Статья)
		//статья будет заполнена при  заполнении убытков прошлого года
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_Уценка									Тогда ЗаполнитьКорректировкуРИ("R0322G3", "-",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_Дооценка								Тогда ЗаполнитьКорректировкуРИ("R0312G3", "+",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_ПотериКапитал							Тогда ЗаполнитьКорректировкуРИ("R0315G3", "+",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_Неприбыльные							Тогда ЗаполнитьКорректировкуРИ("R0316G3", "+",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_Оффшор									Тогда ЗаполнитьКорректировкуРИ("R03161G3", "+",  Выборка.Сумма, Выборка.Статья)	
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_Оргформа								Тогда ЗаполнитьКорректировкуРИ("R03162G3", "+",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_ОЦ										Тогда ЗаполнитьКорректировкуРИ("R03163G3", "+",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_Роялти									Тогда ЗаполнитьКорректировкуРИ("R0318G3", "+",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_Безоплатн								Тогда ЗаполнитьКорректировкуРИ("R0319G3", "+",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Страховики_РезервБУ						Тогда ЗаполнитьКорректировкуРИ("R0411G3", "+",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_ЦП_ФинрезМинус							Тогда ЗаполнитьКорректировкуРИ("R0412G3", "+",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Страховики_РезервНУ						Тогда ЗаполнитьКорректировкуРИ("R0421G3", "-",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_ЦП_ФинрезПлюсБУ							Тогда ЗаполнитьКорректировкуРИ("R0422G3", "-",  Выборка.Сумма, Выборка.Статья)
			
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_3_Страховик								Тогда ЗаполнитьКорректировкуРИ("R0423G3", "-",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_1_ПропорцДоход							Тогда ЗаполнитьКорректировкуРИ("R0424G3", "-",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_1_ПропорцЗатрат							Тогда ЗаполнитьКорректировкуРИ("R0425G3", "-",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_2_Страховка								Тогда ЗаполнитьКорректировкуРИ("R0415G3", "+",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_НефтегазАморт					Тогда ЗаполнитьКорректировкуРИ("R0416G3", "+",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_НефтегазУценка  				Тогда ЗаполнитьКорректировкуРИ("R0417G3","+",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_НефтегазЗатраты 				Тогда ЗаполнитьКорректировкуРИ("R0418G3", "+", Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_ЗадолженностьДоход  			Тогда ЗаполнитьКорректировкуРИ("R0419G3","+",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_ЗадолженностьСебест 			Тогда ЗаполнитьКорректировкуРИ("R0426G3", "-",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_Задолженность		  			Тогда ЗаполнитьКорректировкуРИ("R04110G","+",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_ЗадолженностьПогашПокупатель	Тогда ЗаполнитьКорректировкуРИ("R0427G3", "-",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_ЗадолженностьПогашПродавец	Тогда ЗаполнитьКорректировкуРИ("R04111G3","+",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_ЗадолженностьПогашСебест		Тогда ЗаполнитьКорректировкуРИ("R0428G3", "-",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_КассовыйДоход					Тогда ЗаполнитьКорректировкуРИ("R04112G3","+",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_КассовыйЗатраты				Тогда ЗаполнитьКорректировкуРИ("R0429G3","-",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_РезервБанкаПлюс				Тогда ЗаполнитьКорректировкуРИ("R04113G3","+",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_РезервБанкаМинус				Тогда ЗаполнитьКорректировкуРИ("R04210G3","-",  Выборка.Сумма, Выборка.Статья)
		ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_РезервОтпусков				Тогда ЗаполнитьКорректировкуРИ("R04211G3","-",  Выборка.Сумма, Выборка.Статья)
		Иначе
			Попытка		
				Если Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_ЗатратыВнешниеКредиты				Тогда ЗаполнитьКорректировкуРИ("R04114G3","+",  Выборка.Сумма, Выборка.Статья)
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_УменьшениеРезерва 			Тогда ЗаполнитьКорректировкуРИ("R04115G3","+",  Выборка.Сумма, Выборка.Статья)
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_ДоходыВнешниеКредиты			Тогда ЗаполнитьКорректировкуРИ("R04212G3","-",  Выборка.Сумма, Выборка.Статья)
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_ДоходыУменьшениеРезерва		Тогда ЗаполнитьКорректировкуРИ("R04213G3","-",  Выборка.Сумма, Выборка.Статья)
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_СписаниеНалоговогоДолга		Тогда ЗаполнитьКорректировкуРИ("R04214G3","-",  Выборка.Сумма, Выборка.Статья)
					
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_АМ_ОстаточБУ_Непроизводственные 			Тогда ЗаполнитьКорректировкуРИ("R0113G3","+",  Выборка.Сумма, Выборка.Статья)
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_АМ_РемонтМодернизация_Непроизводственные 	Тогда ЗаполнитьКорректировкуРИ("R0114G3","+",  Выборка.Сумма, Выборка.Статья)			
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_АМ_ВосстановлениеСтоимости 					Тогда ЗаполнитьКорректировкуРИ("R01212G3","-",  Выборка.Сумма, Выборка.Статья)			
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_АМ_ПервичнаяБУ_Непроизводственные 			Тогда ЗаполнитьКорректировкуРИ("R0123G3","-",  Выборка.Сумма, Выборка.Статья)			
					
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Резерв_38_Списание				 			Тогда ЗаполнитьКорректировкуРИ("R0223G3","-",  Выборка.Сумма, Выборка.Статья)			
					
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_БезвозвртнаяФинПомощь				 	Тогда ЗаполнитьКорректировкуРИ("R03110G3","-",  Выборка.Сумма, Выборка.Статья)
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_Оздоровление							Тогда ЗаполнитьКорректировкуРИ("R031101G3", "+",  Выборка.Сумма, Выборка.Статья)	
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_Штрафы				 					Тогда ЗаполнитьКорректировкуРИ("R03111G3","-",  Выборка.Сумма, Выборка.Статья)			
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_КиноРасходы								Тогда ЗаполнитьКорректировкуРИ("R03112G3", "+",  Выборка.Сумма, Выборка.Статья)
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_Спорт									Тогда ЗаполнитьКорректировкуРИ("R03113G3", "+",  Выборка.Сумма, Выборка.Статья)
					        
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_ЗатратыПоНУДо2015					Тогда ЗаполнитьКорректировкуРИ("R04116G3","+",  Выборка.Сумма, Выборка.Статья)			
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_АмортизацияУскоренная_Начисленная Тогда ЗаполнитьКорректировкуРИ("R04117G3","+",  Выборка.Сумма, Выборка.Статья)
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_МетанРеализация					Тогда ЗаполнитьКорректировкуРИ("R04118G3", "+",  Выборка.Сумма, Выборка.Статья)
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_РезервБанкОтрицРазница			Тогда ЗаполнитьКорректировкуРИ("R04119G3", "+",  Выборка.Сумма, Выборка.Статья)
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_ДоходыПоНУДо2015					Тогда ЗаполнитьКорректировкуРИ("R04215G3","-",  Выборка.Сумма, Выборка.Статья)			
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_АмортизацияУскоренная_Расчитанная	Тогда ЗаполнитьКорректировкуРИ("R04216G3","-",  Выборка.Сумма, Выборка.Статья)			
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_МетанБрак							Тогда ЗаполнитьКорректировкуРИ("R04217G3", "-",  Выборка.Сумма, Выборка.Статья)
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_РезервБанкПоложРазница			Тогда ЗаполнитьКорректировкуРИ("R04218G3", "-",  Выборка.Сумма, Выборка.Статья)
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_РезервБанкПревышение				Тогда ЗаполнитьКорректировкуРИ("R04219G3", "-",  Выборка.Сумма, Выборка.Статья)
					
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_ДивидендыКИК					Тогда ЗаполнитьКорректировкуРИ("R03232G3", "-",  Выборка.Сумма, Выборка.Статья)	
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_ДоходыНерезидент				Тогда ЗаполнитьКорректировкуРИ("R03233G3", "-",  Выборка.Сумма, Выборка.Статья)	
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_ДивидендыНерезидент				Тогда ЗаполнитьКорректировкуРИ("R03234G3", "-",  Выборка.Сумма, Выборка.Статья)	
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_УбытокРеорганизация				Тогда ЗаполнитьКорректировкуРИ("R03241G3", "-",  Выборка.Сумма, Выборка.Статья)
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_ОффшорПродажа					Тогда ЗаполнитьКорректировкуРИ("R0317G3", "+",  Выборка.Сумма, Выборка.Статья)
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_ОргформаПродажа					Тогда ЗаполнитьКорректировкуРИ("R03171G3", "+",  Выборка.Сумма, Выборка.Статья)	
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_ОЦПродажа						Тогда ЗаполнитьКорректировкуРИ("R03172G3", "+",  Выборка.Сумма, Выборка.Статья)
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_БезЦели							Тогда ЗаполнитьКорректировкуРИ("R03114G3", "+",  Выборка.Сумма, Выборка.Статья)
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_3_СтраховикПосредники			Тогда ЗаполнитьКорректировкуРИ("R04141G3", "+",  Выборка.Сумма, Выборка.Статья)			
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Фин_ОплатаТоваров_ЕН				Тогда ЗаполнитьКорректировкуРИ("R04151G3", "+",  Выборка.Сумма, Выборка.Статья)			
					
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_АмортизацияУскоренная_Начисленная_2020	Тогда ЗаполнитьКорректировкуРИ("R04171G3","+",  Выборка.Сумма, Выборка.Статья)			
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_АмортизацияУскоренная_Расчитанная_2020	Тогда ЗаполнитьКорректировкуРИ("R042161G3","-",  Выборка.Сумма, Выборка.Статья)			
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_АмортизацияПроизводственнойРазницы		Тогда ЗаполнитьКорректировкуРИ("R042162G3","-",  Выборка.Сумма, Выборка.Статья)			
					
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_РасходКовидЛечение			Тогда ЗаполнитьКорректировкуРИ("R04120G3", "+",  Выборка.Сумма, Выборка.Статья)
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_РасходКовидПредотвращение		Тогда ЗаполнитьКорректировкуРИ("R04121G3", "+",  Выборка.Сумма, Выборка.Статья)
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_ДоходКовидЛечение				Тогда ЗаполнитьКорректировкуРИ("R04220G3", "-",  Выборка.Сумма, Выборка.Статья)
				ИначеЕсли Выборка.Статья = СтНД.НП15_РИ_Др_Переходные_ДоходКовидПредотвращение		Тогда ЗаполнитьКорректировкуРИ("R04221G3", "-",  Выборка.Сумма, Выборка.Статья)
				
				КонецЕсли;
			Исключение	
			КонецПопытки;
			
		КонецЕсли;
	
	КонецЦикла;		   
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьКорректировкуРИ(ИмяЯчейки, Знак, Сумма, Статья, ТекНалГруппа=Неопределено)

	Если Статья = Справочники.СтатьиНалоговыхДеклараций.НП15_РИ_АМ_НУ Тогда
		
		НалГруппыОС = Справочники.НалоговыеГруппыОсновныхСредств;
		Если ТекНалГруппа = НалГруппыОС.ОСГруппа2  Тогда ИмяЯчейкиАМ = "R0102G5" 	
		ИначеЕсли ТекНалГруппа = НалГруппыОС.ОСГруппа3  Тогда ИмяЯчейкиАМ = "R0103G5" 	
		ИначеЕсли ТекНалГруппа = НалГруппыОС.ОСГруппа4  Тогда ИмяЯчейкиАМ = "R0104G5" 	
		ИначеЕсли ТекНалГруппа = НалГруппыОС.ОСГруппа5  Тогда ИмяЯчейкиАМ = "R0105G5" 	
		ИначеЕсли ТекНалГруппа = НалГруппыОС.ОСГруппа6  Тогда ИмяЯчейкиАМ = "R0106G5" 	
		ИначеЕсли ТекНалГруппа = НалГруппыОС.ОСГруппа7  Тогда ИмяЯчейкиАМ = "R0107G5" 	
		ИначеЕсли ТекНалГруппа = НалГруппыОС.ОСГруппа8  Тогда ИмяЯчейкиАМ = "R0108G5" 	
		ИначеЕсли ТекНалГруппа = НалГруппыОС.ОСГруппа9  Тогда ИмяЯчейкиАМ = "R0109G5"
		ИначеЕсли ТекНалГруппа = НалГруппыОС.ОСГруппа12 Тогда ИмяЯчейкиАМ = "R0112G5"
		ИначеЕсли ТекНалГруппа = НалГруппыОС.ОСГруппа14 Тогда ИмяЯчейкиАМ = "R0114G5" 	
		ИначеЕсли ТекНалГруппа = НалГруппыОС.ОСГруппа15 Тогда ИмяЯчейкиАМ = "R0115G5"
		ИначеЕсли ТекНалГруппа = НалГруппыОС.ОСГруппа16 Тогда ИмяЯчейкиАМ = "R0116G5"
		ИначеЕсли ТекНалГруппа = НалГруппыОС.НМАГруппа1 Тогда ИмяЯчейкиАМ = "R0201G5"
		ИначеЕсли ТекНалГруппа = НалГруппыОС.НМАГруппа2 Тогда ИмяЯчейкиАМ = "R0202G5"
		ИначеЕсли ТекНалГруппа = НалГруппыОС.НМАГруппа3 Тогда ИмяЯчейкиАМ = "R0203G5"
		ИначеЕсли ТекНалГруппа = НалГруппыОС.НМАГруппа4 Тогда ИмяЯчейкиАМ = "R0204G5"
		ИначеЕсли ТекНалГруппа = НалГруппыОС.НМАГруппа5 Тогда ИмяЯчейкиАМ = "R0205G5"
		ИначеЕсли ТекНалГруппа = НалГруппыОС.НМАГруппа6 Тогда ИмяЯчейкиАМ = "R0206G5"
		КонецЕсли;
		
		// корректируем через Приложение АМ
		// сумма на входе - отрицательная для увеличения суммы амортизации, положительная - для уменьшения начисленной суммы амортизации 
		СтруктураДанныхПриложениеАМ[ИмяЯчейкиАМ] = СтруктураДанныхПриложениеАМ[ИмяЯчейкиАМ] - Сумма;
		
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
																ИмяЯчейкиАМ, 
																"Група " + ?(Сред(ИмяЯчейкиАМ, 3,1) = "1","ОЗ ","НМА ") + Сред(ИмяЯчейкиАМ, 4, 2) + ": Розрахована сума амортизації за п. 138.3 ПК",
																Знак,
																"!ДО"
																, Сумма
																,ПланыСчетов.Хозрасчетный.РазницыПоНалогуНаПрибыльРучныеКорректировки,,,,"ПриложениеАМ"
																,,,,Статья, ТекНалГруппа);
		
	Иначе
																
		СтруктураДанныхПриложениеРИ[ИмяЯчейки] = СтруктураДанныхПриложениеРИ[ИмяЯчейки] + ?(Знак = "+", 1, -1)*Сумма;
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
																ИмяЯчейки, 
																"Рядок " + Сред(ИмяЯчейки,3,1) + "." + Сред(ИмяЯчейки,4,1) + "." + Сред(ИмяЯчейки,5,1) + ?(СтрДлина(ИмяЯчейки)= 8, Сред(ИмяЯчейки,6,1),"")+ ".",
																Знак,
																"!ДО"
																, Сумма
																,ПланыСчетов.Хозрасчетный.РазницыПоНалогуНаПрибыльРучныеКорректировки,,,,"ПриложениеРИ"
																,,,,Статья);
		
	КонецЕсли;	

КонецПроцедуры


///////////////////////////////////////////////
//2.1.3, 3.1.9
&НаСервере
Процедура ЗаполнитьСписаниеНеБезнЗадолженности()
	
	ЗаполнитьПоСтатьямЗатрат("R0213G3", СтруктураРеквизитовФормы.СписаниеНеБезнадежнойЗадолженности_Статьи);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьШтрафы()
	
	ЗаполнитьПоСтатьямЗатрат("R03111G3", СтруктураРеквизитовФормы.Штрафы_Статьи);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПередачуНеприбыльным()

	ПередачаНеприбыльным = ЗаполнитьПоСтатьямЗатрат("", СтруктураРеквизитовФормы.ПередачаНеприбыльным_СтатьиЗатрат);
	
	ПередачаНеприбыльным_норм = ПередачаНеприбыльным - СтруктураРеквизитовФормы.ОблагаемаяПрибыльПрошлогоГода * 0.04;
	
	Если ПередачаНеприбыльным_норм < 0 Тогда
		ПередачаНеприбыльным_норм = 0;
	КонецЕсли;
	
	СтруктураДанныхПриложениеРИ["R0319G3"] = ПередачаНеприбыльным_норм;

	_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
														    "R0319G3", 
															"Сума передачі неприбутковим організаціям що перевищує 4% від оподатковуваного прибутку минулого року",
															"+",
															"Сумма передачі неприбутковим ("+ ПередачаНеприбыльным + ") що перевищує 4 % від суми: " + СтруктураРеквизитовФормы.ОблагаемаяПрибыльПрошлогоГода
															,ПередачаНеприбыльным_норм
															,,,,,"ПриложениеРИ");
															
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПоСтатьямЗатрат(ИмяЯчейки, ФильтрСтатей)

	Разница = 0;
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация", 	СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр("ДатаНач", 		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Если СтруктураРеквизитовФормы.ОтчетЗаДваПериода Тогда
		// будем получать данные, начиная с последнего квартала прошлого года.
		// Например, если фирма начала свою деятельность с 15.10.11 г., то подаёт Декларацию о прибыли она только за 1 кв 2012 года.
		Запрос.УстановитьПараметр("ДатаНач",	ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -3));	
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаКон", 		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Запрос.УстановитьПараметр("СтатьиЗатрат",  				ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БП" ИЛИ РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БСП" Тогда
		Запрос.УстановитьПараметр("СтатьиЗатратНеоперационные", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНеоперационныхРасходов);
	    ТекстЗапр =	"РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , , &СтатьиЗатратНеоперационные, Организация В (&Организация), , ) КАК ХозрасчетныйОбороты";
		УсловиеЕРП = "";
	Иначе	
	    ТекстЗапр =	"РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , , , Организация В (&Организация), , ) КАК ХозрасчетныйОбороты";
		УсловиеЕРП = "И ЛОЖЬ";
	КонецЕсли;	
	
	Запрос.УстановитьПараметр("ФильтрСтатей", ФильтрСтатей);
	
	СчетаЗатрат = Новый Массив;
	// все счета по иерархии
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.МатериальныеЗатраты);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ЗатратыНаОплатуТруда);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОтчисленияНаСоциальныеМероприятия);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.Амортизация);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ДругиеОперационныеЗатраты);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ДругиеЗатратыПоЭлементам);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьРеализации);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.АдминистративныеРасходы);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаСбыт);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ДругиеЗатратыОперационнойДеятельностиГруппа);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ФинансовыеЗатраты);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПотериОтУчастияВКапитале);
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ДругиеЗатратыДеятельности);
	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БП" ИЛИ РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БСП" Тогда
		СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ЧрезвычайныеЗатраты);
	КонецЕсли;	
	Запрос.УстановитьПараметр("СчетаЗатрат", СчетаЗатрат);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕстьNULL(СУММА(ХозрасчетныйОбороты.СуммаОборотДт), 0) КАК Сумма
	               |ИЗ
				   |	"+ТекстЗапр +"
	               |ГДЕ
	               |	(ХозрасчетныйОбороты.Субконто1 В (&ФильтрСтатей)
	               |			ИЛИ ХозрасчетныйОбороты.Субконто1 В ИЕРАРХИИ (&ФильтрСтатей))
	               |            " + УсловиеЕРП+ "
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЕстьNULL(СУММА(ХозрасчетныйОбороты.СуммаОборотДт), 0)
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
	               |			&ДатаНач,
	               |			&ДатаКон,
	               |			,
	               |			Счет В ИЕРАРХИИ (&СчетаЗатрат) ИЛИ Счет В (&СчетаЗатрат),
	               |			&СтатьиЗатрат,
	               |			Организация В (&Организация) И (Субконто1 В (&ФильтрСтатей) ИЛИ Субконто1 В ИЕРАРХИИ (&ФильтрСтатей)),
	               |			НЕ КорСчет В ИЕРАРХИИ (&СчетаЗатрат) И НЕ КорСчет В (&СчетаЗатрат),
	               |			) КАК ХозрасчетныйОбороты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Разница = Разница + Выборка.Сумма;
	
	КонецЦикла;

	Если ИмяЯчейки = "R0213G3" Тогда
		ИмяЯчейкиПредставление = "2.1.3";
	ИначеЕсли ИмяЯчейки = "R03111G3" Тогда
		ИмяЯчейкиПредставление = "3.1.11";
	Иначе
	    ИмяЯчейкиПредставление = ИмяЯчейки;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ИмяЯчейки) Тогда
	
		СтруктураДанныхПриложениеРИ[ИмяЯчейки] = Разница;
		
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
															    ИмяЯчейки, 
																"Показник " + ИмяЯчейкиПредставление + " Додатка РІ",
																"+",
																"!АС", 
																Разница,
																,//Счет
																,//КорСЧет
																, 
																,
																"ПриложениеРИ", //ИмяРаздела
																, //НомерЛиста
																, //МнЧ
																, //НомерСтроки
																ПреобразоватьМассивВСписок(ФильтрСтатей));
	
	КонецЕсли;
	
	Возврат Разница;
	
КонецФункции

///////////////////////////////////////////////
//3.1.6, 3.1.7
&НаСервере
Процедура ЗаполнитьПриобретениеУНеприбыльных()

	ЗаполнитьПриобретения("R0316G3", СтруктураРеквизитовФормы.Контрагенты_Неприбыльные, "3.1.6");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПриобретениеИзОффшоров()
	ЗаполнитьПриобретения("R03161G3", СтруктураРеквизитовФормы.Контрагенты_Оффшоры, "3.1.6.1");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПриобретениеИзОффшоровОргформа()

	ЗаполнитьПриобретения("R03162G3", СтруктураРеквизитовФормы.Контрагенты_ОффшорыОргформа, "3.1.6.2");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПриобретения(ИмяЯчейки, ФильтрКонтрагентов, ПредставлениеПоказателя)

	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация", 	СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр("ДатаНач", 		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Если СтруктураРеквизитовФормы.ОтчетЗаДваПериода Тогда
		// будем получать данные начиная с последнего квартала прошлого года.
		// Например, если фирма начала свою деятельность с 15.10.11 г., то подаёт Декларацию о прибыли она только за 1 кв 2012 года.
		Запрос.УстановитьПараметр("ДатаНач",	ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -3));	
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаКон", 		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Запрос.УстановитьПараметр("ФильтрКонтрагентов", ФильтрКонтрагентов);
	
	СчетаИсключения = Новый Массив;
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.Касса);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.СчетаВБанках);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДенежныеСредства);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеВекселяПолученные);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ТекущиеФинансовыеИнвестиции);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторами);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РезервСомнительныхДолгов);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ЗарегистрированныйПаевойКапитал);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ДооценкаАктивов);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ДополнительныйКапитал);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РезервныйКапитал);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.НераспределеннаяПрибыльНепокрытыеУбытки);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ИзъятыйКапитал);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.НеоплаченныйКапитал);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ОбеспечениеБудущихЗатратИПлатежей);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ЦелевоеФинансированиеИЦелевыеПоступления);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.СтраховыеРезервы);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеЗаймы);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеВекселяВыданные);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ДолгосрочныеОбязательстваПоАренде);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеЗаймы);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ТекущаяЗадолженностьПоДолгосрочнымОбязательствам);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.КраткосрочныеВекселяВыданные);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНалогамИПлатежам);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоСтрахованию);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоОплатеТруда);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСУчастниками);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДругимОперациям);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ДоходыБудущихПериодов);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ДоходыОтРеализации);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ДругойОперационныйДоход);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ДоходОтУчастияВКапитале);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеФинансовыеДоходы);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ДругиеДоходы);
	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БП" ИЛИ РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БСП" Тогда
		СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ЧрезвычайныеДоходы);
	КонецЕсли;	
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.СтраховыеПлатежи);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ФинансовыеРезультаты);
	// исключаем расходны связанные с курсовыми разницами
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ЗатратыОтОперационнойКурсовойРазницы);
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ПотериОтНеоперационныхКурсовыхРазниц);
	
	Запрос.УстановитьПараметр("СчетаИсключения", СчетаИсключения);
	
	СубконтоВзаиморасчетныхСчетов = Новый Массив;
	СубконтоВзаиморасчетныхСчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоВзаиморасчетныхСчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("СубконтоВзаиморасчетныхСчетов", СубконтоВзаиморасчетныхСчетов);
	
	Запрос.Текст = "ВЫБРАТЬ
				   |	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК Сумма
				   |ИЗ
				   |	РегистрБухгалтерии.Хозрасчетный.Обороты(
				   |			&ДатаНач,
				   |			&ДатаКон,
				   |			,
				   |			,
				   |			&СубконтоВзаиморасчетныхСчетов,
				   |			Организация = &Организация И Субконто1 В (&ФильтрКонтрагентов),
				   |			НЕ КорСчет В (&СчетаИсключения) И НЕ КорСчет В ИЕРАРХИИ (&СчетаИсключения)) КАК ХозрасчетныйОбороты
				   |";
				   
				   
	ТекущиеДанные = Запрос.Выполнить().Выбрать();				   
	Если ТекущиеДанные.Следующий() Тогда
		
		СуммаРасшифровки3 = ТекущиеДанные.Сумма * 0.7;
		Комментарий3 = "віднесено до різниці лише 30% від суми постачання";
		Если ИмяЯчейки = "R0316G3" Тогда
			МинЗП = 0;
			ЗапросЗначениеМинЗарплаты = Новый Запрос;
			ЗапросЗначениеМинЗарплаты.УстановитьПараметр("Дата", НачалоГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
			ЗапросЗначениеМинЗарплаты.Текст = "
			|ВЫБРАТЬ 
			|   ЕстьNULL(Размер,0) КАК Размер
			|ИЗ
			|	РегистрСведений.МинимальнаяОплатаТруда.СрезПоследних (&Дата) 
			|";
			РезультатЗапроса = ЗапросЗначениеМинЗарплаты.Выполнить().Выбрать();
			Если РезультатЗапроса.Следующий() Тогда
				МинЗП = РезультатЗапроса.Размер;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Розмер минимальной оплаты труда на ';uk= 'Розмір мінімальної оплати праці на '") + Формат(НачалоГода(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ДФ=dd.MM.yyyy") + ": " + Формат(МинЗП, "ЧЦ=15; ЧДЦ=2");
				Сообщение.Сообщить();
			Иначе
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru='Не задан розмер минимальной оплаты труда! Проверьте регистр сведений ""Минимальная оплата труда""';uk= 'Не заданий розмір мінімальної заробітної праці! Перевірте регістр відомостей ""Мінімальна оплата праці""'");
				Сообщение.Сообщить();
			КонецЕсли;

			Если ТекущиеДанные.Сумма <= МинЗП * 25 Тогда
				СуммаРасшифровки3 = ТекущиеДанные.Сумма;
				Комментарий3 = НСтр("ru='сумма поставки не превышает 25 розмеров минимальной зароботной платы';uk= 'сума постачання не перевищує 25 розмірів мінімальної заробітної плати'");
				СтруктураДанныхПриложениеРИ[ИмяЯчейки] =  0;
			Иначе	
				СтруктураДанныхПриложениеРИ[ИмяЯчейки] =  ТекущиеДанные.Сумма * 0.3;
			КонецЕсли;	
		Иначе	
			СтруктураДанныхПриложениеРИ[ИмяЯчейки] =  ТекущиеДанные.Сумма * 0.3;
		КонецЕсли;	
		
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
															    ИмяЯчейки, 
																"Показник "+ ПредставлениеПоказателя+ " Додатка РІ",
																"+",
																"!АС", 
																ТекущиеДанные.Сумма,
																,//Счет
																,//КорСЧет
																, 
																,
																"ПриложениеРИ", //ИмяРаздела
																, //НомерЛиста
																, //МнЧ
																, //НомерСтроки
																ПреобразоватьМассивВСписок(ФильтрКонтрагентов));
																
	   _ДобавитьСтрокуРасшифровки(ЭтаФорма, 
														    ИмяЯчейки, 
															,
															"",
															"#Обороти субконто ""Контрагенти"" визначені у кореспонденції з дебетом рахунків необоротних активів (1-й клас), запасів (2-й клас), витрат (8...9-й клас)"
															,0
															,,,,,"ПриложениеРИ");
													
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
														    ИмяЯчейки, 
															"Показник "+ ПредставлениеПоказателя+ " Додатка РІ",
															"-",
															Комментарий3
															,СуммаРасшифровки3
															,,,,,"ПриложениеРИ");

	КонецЕсли;

КонецПроцедуры


&НаСервере
Процедура ЗаполнитьРеализациюИзОффшоров()
	ЗаполнитьРеализацию("R0317G3", СтруктураРеквизитовФормы.Контрагенты_Оффшоры, "3.1.7");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеализациюИзОффшоровОргформа()

	ЗаполнитьРеализацию("R03171G3", СтруктураРеквизитовФормы.Контрагенты_ОффшорыОргформа, "3.1.7.1");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеализацию(ИмяЯчейки, ФильтрКонтрагентов, ПредставлениеПоказателя)

	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Организация", 	СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр("ДатаНач", 		СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Если СтруктураРеквизитовФормы.ОтчетЗаДваПериода Тогда
		// будем получать данные начиная с последнего квартала прошлого года.
		// Например, если фирма начала свою деятельность с 15.10.11 г., то подаёт Декларацию о прибыли она только за 1 кв 2012 года.
		Запрос.УстановитьПараметр("ДатаНач",	ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -3));	
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаКон", 		СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Запрос.УстановитьПараметр("ФильтрКонтрагентов", ФильтрКонтрагентов);
	
	СчетаКредита = Новый Массив;
	СчетаКредита.Добавить(ПланыСчетов.Хозрасчетный.ДоходОтРеализацииГотовойПродукции);
	СчетаКредита.Добавить(ПланыСчетов.Хозрасчетный.ДоходОтРеализацииТоваров);
	СчетаКредита.Добавить(ПланыСчетов.Хозрасчетный.ДоходОтРеализацииРаботИУслуг);
	СчетаКредита.Добавить(ПланыСчетов.Хозрасчетный.ДоходОтРеализацииДругихОборотныхАктивов);
	
	Запрос.УстановитьПараметр("СчетаКредита", СчетаКредита);
	
	СубконтоВзаиморасчетныхСчетов = Новый Массив;
	СубконтоВзаиморасчетныхСчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоВзаиморасчетныхСчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("СубконтоВзаиморасчетныхСчетов", СубконтоВзаиморасчетныхСчетов);
	
	Запрос.Текст = "ВЫБРАТЬ
				   |	СУММА(ХозрасчетныйОбороты.СуммаОборотДт) КАК Сумма
				   |ИЗ
				   |	РегистрБухгалтерии.Хозрасчетный.Обороты(
				   |			&ДатаНач,
				   |			&ДатаКон,
				   |			,
				   |			,
				   |			&СубконтоВзаиморасчетныхСчетов,
				   |			Организация = &Организация И Субконто1 В (&ФильтрКонтрагентов),
				   |			КорСчет В (&СчетаКредита) ИЛИ КорСчет В ИЕРАРХИИ (&СчетаКредита)) КАК ХозрасчетныйОбороты
				   |";
				   
				   
	ТекущиеДанные = Запрос.Выполнить().Выбрать();				   
	Если ТекущиеДанные.Следующий() Тогда
		
		СуммаРасшифровки3 = ТекущиеДанные.Сумма * 0.7;
		Комментарий3 = "віднесено до різниці лише 30% від суми постачання";
		СтруктураДанныхПриложениеРИ[ИмяЯчейки] =  ТекущиеДанные.Сумма * 0.3;
		
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
															    ИмяЯчейки, 
																"Показник "+ ПредставлениеПоказателя+ " Додатка РІ",
																"+",
																"!АС", 
																ТекущиеДанные.Сумма,
																,//Счет
																,//КорСЧет
																, 
																,
																"ПриложениеРИ", //ИмяРаздела
																, //НомерЛиста
																, //МнЧ
																, //НомерСтроки
																ПреобразоватьМассивВСписок(ФильтрКонтрагентов));
																
	   _ДобавитьСтрокуРасшифровки(ЭтаФорма, 
														    ИмяЯчейки, 
															,
															"",
															"#Обороти субконто ""Контрагенти"" визначені у кореспонденції з кредитом рахунків 701, 702, 703, 712"
															,0
															,,,,,"ПриложениеРИ");
													
		_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
														    ИмяЯчейки, 
															"Показник "+ ПредставлениеПоказателя+ " Додатка РІ",
															"-",
															Комментарий3
															,СуммаРасшифровки3
															,,,,,"ПриложениеРИ");

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПреобразоватьМассивВСписок(Массив)
	
	Если Массив = Неопределено Тогда
	
		Возврат Неопределено;
	
	КонецЕсли; 
	
	Список = Новый СписокЗначений;
	
	Для Каждого ЭлМасс из Массив Цикл
		
		Список.Добавить(ЭлМасс);
	
	КонецЦикла;
	
	Возврат Список;

КонецФункции // ()


&НаСервере
Процедура ЗаполнитьПриложениеЗП()
	
	СтД = Справочники.СтатьиНалоговыхДеклараций;
	
	// заполним суммы выплаченных авансов по налогу на прибыль из Дт6413 по соответствующим статьям
	ЗапросАванс = Новый Запрос();
	ЗапросАванс.Текст = "ВЫБРАТЬ
	                    |	ХозрасчетныйОбороты.Субконто1 КАК Статья,
	                    |	ХозрасчетныйОбороты.СуммаОборотДт КАК Выплачено,
						|	ХозрасчетныйОбороты.СуммаОборотКт КАК Начислено
	                    |ИЗ
	                    |	РегистрБухгалтерии.Хозрасчетный.Обороты(
	                    |			&ДатаНач,
	                    |			&ДатаКон,
	                    |			,
	                    |			Счет В ИЕРАРХИИ (&Сч6413),
	                    |			&СтатьиНалоговыхДеклараций,
	                    |			Организация = &Организация
	                    |				И Субконто1 В (&МассивСтатей)) КАК ХозрасчетныйОбороты
						|";
	ЗапросАванс.УстановитьПараметр("ДатаНач", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ЗапросАванс.УстановитьПараметр("ДатаКон", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ЗапросАванс.УстановитьПараметр("Сч6413", ПланыСчетов.Хозрасчетный.РасчетыПоНалогуНаПрибыль);
	ЗапросАванс.УстановитьПараметр("СтатьиНалоговыхДеклараций", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговыхДеклараций);
    ЗапросАванс.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
	
	МассивСтатей = Новый Массив();
	МассивСтатей.Добавить(СтД.НП15_ЗП_АвансПриВыплатеДивидентов);
	Попытка
		МассивСтатей.Добавить(СтД.НП15_ЗП_Аванс);
	Исключение КонецПопытки;
	ЗапросАванс.УстановитьПараметр("МассивСтатей", МассивСтатей);
	
	ВыборкаАванс = ЗапросАванс.Выполнить().Выбрать();
	R0162G3 = 0;
	Пока ВыборкаАванс.Следующий() Цикл
		Если ВыборкаАванс.Статья = СтД.НП15_ЗП_АвансПриВыплатеДивидентов Тогда
			R0162G3 = ВыборкаАванс.Выплачено;
			СтруктураДанныхДекларация.HD2 =  "+";
		КонецЕсли;	
	КонецЦикла;
	
	СтруктураДанныхПриложениеЗП["R0162G3"] = R0162G3;
	_ДобавитьСтрокуРасшифровки(ЭтаФорма,"R0162G3", "" + СтД.НП15_ЗП_АвансПриВыплатеДивидентов,
															"+", "!ДО", R0162G3, ПланыСчетов.Хозрасчетный.РасчетыПоНалогуНаПрибыль,,
															НачалоГода (СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета
															, "ПриложениеЗП",,,,
															СтД.НП15_ЗП_АвансПриВыплатеДивидентов);	
	
															
										
КонецПроцедуры	       

&НаСервере
Процедура ЗаполнитьРемонтНепроизводственныхОС()
		
	ИспКлассыСчетовВКачествеГрупп = ложь;
	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БП" ИЛИ РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БСП" Тогда
		// заполним оборотами ДтСчетЗатрат Кт15,235, сформированными документами Модернизация по нехозяйственным ОС
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		                    |	ЕстьNULL(СУММА(ХозрасчетныйОбороты.СуммаОборотКт), 0) КАК СтоимостьРемонта
		                    |ИЗ
		                    |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		                    |			&ДатаНач,
		                    |			&ДатаКон,
		                    |			РЕГИСТРАТОР,
		                    |			Счет В ИЕРАРХИИ (&Счет15) ИЛИ Счет В Иерархии (&Счет235),
		                    |			&ОбъектСтроительства,
		                    |			Организация = &Организация
		                    |				И Субконто1.НалоговоеНазначение = &НехозДеятельность,
		                    |			КорСчет В ИЕРАРХИИ (&Счета8_9),
		                    |			) КАК ХозрасчетныйОбороты
		                    |ГДЕ
		                    |	(ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.МодернизацияОС)";
		
		Если БухгалтерскийУчетПереопределяемый.ПолучитьИспользоватьКлассыСчетовВКачествеГрупп() Тогда
			ИспКлассыСчетовВКачествеГрупп = Истина;
		КонецЕсли;
		РасшСтрокой = "Сума витрат на ремонт ОЗ та НМА, відображена документами ""Модернізації та ремонту"", що була раніше накопичена на рахункаку 15 або 235 по об'єктам будівництва з податковим призначеннями - ""негосподарська діяльність"""

	Иначе	//ЕРП
		// заполним оборотами ДтСчетЗатрат Кт15, 239, сформированными документами Ремонт по нехозяйственным ОС
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЕСТЬNULL(СУММА(ХозрасчетныйОбороты.СуммаОборотКт), 0) КАК СтоимостьРемонта
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&ДатаНач,
		               |			&ДатаКон,
		               |			РЕГИСТРАТОР,
		               |			Счет В ИЕРАРХИИ (&Счет15)
		               |				ИЛИ Счет В ИЕРАРХИИ (&Счет235),
		               |			&ОбъектСтроительства,
		               |			Организация = &Организация,
		               |			КорСчет В ИЕРАРХИИ (&Счета8_9),
		               |			) КАК ХозрасчетныйОбороты
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НалоговыеНазначенияОС КАК НалоговыеНазначенияОС
		               |		ПО ХозрасчетныйОбороты.Субконто1 = НалоговыеНазначенияОС.ОсновноеСредство
		               |			И ХозрасчетныйОбороты.Организация = НалоговыеНазначенияОС.Организация
		               |ГДЕ
		               |	ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РемонтОС
		               |	И НалоговыеНазначенияОС.НалоговоеНазначение = &НехозДеятельность";

		
		Счет9 = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(ПланыСчетов.Хозрасчетный.СебестоимостьРеализации);
		Если Счет9.Родитель = ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
			ИспКлассыСчетовВКачествеГрупп = Истина;
		КонецЕсли;
		РасшСтрокой = "Сума витрат на ремонт ОЗ та НМА, відображена документами ""Ремонт"", що була раніше накопичена на рахункаку 15 або 239 по об'єктам будівництва з податковим призначеннями - ""негосподарська діяльність"""
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНач", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Счет15",  ПланыСчетов.Хозрасчетный.КапитальныеИнвестиции);
	Запрос.УстановитьПараметр("Счет235", ПланыСчетов.Хозрасчетный.ОбслуживаниеИРемонт);
	
	Счета8_9 = Новый Массив();
	Если ИспКлассыСчетовВКачествеГрупп Тогда
		Счета8_9.Добавить(ПланыСчетов.Хозрасчетный.ЗатратыПоЭлементам);
		Счета8_9.Добавить(ПланыСчетов.Хозрасчетный.ЗатратыДеятельности);
	Иначе 
		Счета8_9.Добавить(ПланыСчетов.Хозрасчетный.МатериальныеЗатраты);
		Счета8_9.Добавить(ПланыСчетов.Хозрасчетный.ЗатратыНаОплатуТруда);
		Счета8_9.Добавить(ПланыСчетов.Хозрасчетный.ОтчисленияНаСоциальныеМероприятия);
		Счета8_9.Добавить(ПланыСчетов.Хозрасчетный.Амортизация);
		Счета8_9.Добавить(ПланыСчетов.Хозрасчетный.ДругиеОперационныеЗатраты);
		Счета8_9.Добавить(ПланыСчетов.Хозрасчетный.ДругиеЗатратыПоЭлементам);
		
		Счета8_9.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьРеализации);
		Счета8_9.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
		Счета8_9.Добавить(ПланыСчетов.Хозрасчетный.АдминистративныеРасходы);
		Счета8_9.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаСбыт);
		Счета8_9.Добавить(ПланыСчетов.Хозрасчетный.ДругиеЗатратыОперационнойДеятельностиГруппа);
		Счета8_9.Добавить(ПланыСчетов.Хозрасчетный.ФинансовыеЗатраты);
		Счета8_9.Добавить(ПланыСчетов.Хозрасчетный.ПотериОтУчастияВКапитале);
		Счета8_9.Добавить(ПланыСчетов.Хозрасчетный.ДругиеЗатратыДеятельности);
		Счета8_9.Добавить(ПланыСчетов.Хозрасчетный.НалогНаПрибыль);

	КонецЕсли;
	Запрос.УстановитьПараметр("Счета8_9", Счета8_9);
	Запрос.УстановитьПараметр("ОбъектСтроительства", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства);
	
	Запрос.УстановитьПараметр("НехозДеятельность", Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность);
	Запрос.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	R0114G3 = 0;
	Пока Выборка.Следующий() Цикл
		R0114G3 = Выборка.СтоимостьРемонта;
	КонецЦикла;
	
	СтруктураДанныхПриложениеРИ["R0114G3"] = R0114G3;
	_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
															"R0114G3", 
															"Рядок 1.1.4",
															"+",
															РасшСтрокой,
															R0114G3
															,,,,,"ПриложениеРИ");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУбытокПрошлогоГода(ПараметрыЗаполненияЗвит1С)

	//////////////////////////////////////////////////////////////////
	//	ручные корректировки по счету РИ
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ДатаНач", 	   СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Если СтруктураРеквизитовФормы.ОтчетЗаДваПериода Тогда
		// будем получать данные начиная с последнего квартала прошлого года.
		// Например, если фирма начала свою деятельность с 15.10.11 г., то подаёт Декларацию о прибыли она только за 1 кв 2012 года.
		Запрос.УстановитьПараметр("ДатаНач",	ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -3));	
	КонецЕсли;
	Запрос.УстановитьПараметр("ДатаКон", 	   СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("Организация",   СтруктураРеквизитовФормы.Организация);
	
	Запрос.УстановитьПараметр("СчетКорректировок", ПланыСчетов.Хозрасчетный.РазницыПоНалогуНаПрибыльРучныеКорректировки);
	МассивСубконто = Новый Массив();
	МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговыхДеклараций);
	Запрос.УстановитьПараметр("МассивСубконто", МассивСубконто);
	Запрос.УстановитьПараметр("Статья", Справочники.СтатьиНалоговыхДеклараций.НП15_РИ_Фин_Убыток);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОбороты.Субконто1 КАК Статья,
				   |	ХозрасчетныйОбороты.СуммаОборотДт КАК Сумма
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет = &СчетКорректировок, &МассивСубконто, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	               |ГДЕ
	               |	ХозрасчетныйОбороты.Субконто1 = &Статья";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьКорректировкуРИ("R0324G3", "-",  Выборка.Сумма, Выборка.Статья);
		СтруктураДанныхДекларация.HD6 =  "+";
	КонецЕсли;
	
	ДатаПрошлогоГода  = КонецГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));

	R0324G3 = 0;
	ИмяСтрокиПрошлойДекларации = "04";

	ПолучитьДанныеИз1С = Истина;
	Если СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация.ДатаНачалаИспользованияЗвит1С) Тогда
			ПолучитьДанныеИз1С = ДатаПрошлогоГода  < СтруктураРеквизитовФормы.Организация.ДатаНачалаИспользованияЗвит1С;
		КонецЕсли;
	КонецЕсли;

	// Для встроенных отчетов выводим предупреждения всегда
	ВыводитьПредупреждения = (СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Ложь); 

	Если ПолучитьДанныеИз1С Тогда
		// обычное заполнение отчета из встроенной подсистемы
		ДанныеПрошлогоГода = ЗначениеПоПредыдущейДекларации(ДатаПрошлогоГода,"Декларация","ru = 'строки 3.2.4 Приложение РИ к Декларации';uk= 'рядка 3.2.4 Додатку РІ до Декларації'", ВыводитьПредупреждения);
		Если ДанныеПрошлогоГода <> Неопределено  Тогда
			ДанныеПрошлогоГода.Свойство("R0" + ИмяСтрокиПрошлойДекларации + "G3", R0324G3);		
		КонецЕсли;

		Если  ЗначениеЗаполнено(R0324G3) И R0324G3 < 0 Тогда
			СтруктураДанныхПриложениеРИ.R0324G3 = СтруктураДанныхПриложениеРИ.R0324G3 - R0324G3;
			СтруктураДанныхДекларация.HD6 =  "+";
			
			_ДобавитьСтрокуРасшифровки(ЭтаФорма, 
																	"R0324G3", 
																	"Рядок 3.2.4",
																	"+",
																	"Від'ємне значення рядка " + ИмяСтрокиПрошлойДекларации + " Декларації за попередній рік"
																	, - R0324G3
																	,,,,,"ПриложениеРИ");
			
		КонецЕсли;
		
	Иначе
		// Заполнение отчета из FREDO Звіт
		ИмяСхемы1 = "J01001"; //прошлый год	
		ГодПериода   = Год(ДатаПрошлогоГода);
		
		Если ГодПериода = 2020 Тогда 
			ИмяСхемы1 = ИмяСхемы1 + "18";
		Иначе  //c 2021
			ИмяСхемы1 = ИмяСхемы1 + "19";
		КонецЕсли;
		// сельхозники
		ИмяСхемы2 = "J0100519"; 
		
		
		ТипПериода   = 30; // Год
		
		НомерПериода = 1;
		
		ПредставлениеПериодаЗвит1С = ПредставлениеПериода(НачалоГода(ДатаПрошлогоГода), КонецКвартала(ДатаПрошлогоГода), "Л=uk_UA");
		
		ПараметрыЗаполненияУбытокПрошлогоГода = Новый Структура;
		ПараметрыЗаполненияУбытокПрошлогоГода.Вставить("ПараметрыЗапроса", Новый Структура("ИмяСхемы, ТипПериода, НомерПериода, ГодПериода", ИмяСхемы1, ТипПериода, НомерПериода, ГодПериода));
		ПараметрыЗаполненияУбытокПрошлогоГода.Вставить("ИмяСхемы1", ИмяСхемы1);
		ПараметрыЗаполненияУбытокПрошлогоГода.Вставить("ИмяСхемы2", ИмяСхемы2);
		ПараметрыЗаполненияУбытокПрошлогоГода.Вставить("ИмяСтрокиПрошлойДекларации", ИмяСтрокиПрошлойДекларации);
		ПараметрыЗаполненияУбытокПрошлогоГода.Вставить("ПредставлениеПериодаЗвит1С", ПредставлениеПериодаЗвит1С);
		ПараметрыЗаполненияЗвит1С.Вставить("ПараметрыЗаполненияУбытокПрошлогоГода", ПараметрыЗаполненияУбытокПрошлогоГода);
				
	КонецЕсли;


КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказателиПрошогоПериода(ПараметрыЗаполненияЗвит1С)
	
	Если СтруктураРеквизитовФормы.мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
		// не актуально для плательщиков только годовой декларации
		Возврат;
	КонецЕсли;	

	Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 3 Тогда
		// не актуально в первом квартале
		Возврат;
	КонецЕсли;

	R018G3 = 0;
	R021G3 = 0;
	R024G3 = 0;
	R0163G3 = 0;

	ДатаПрошлогоКвартала  = КонецКвартала(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -3));
	ДатаПрошлогоГода	  = КонецГода(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, -12));

	ПолучитьДанныеЗаПрошлыйКварталИз1С = Истина;
	Если СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация.ДатаНачалаИспользованияЗвит1С) Тогда
			ПолучитьДанныеЗаПрошлыйКварталИз1С = ДатаПрошлогоКвартала  < СтруктураРеквизитовФормы.Организация.ДатаНачалаИспользованияЗвит1С;
		КонецЕсли;
	КонецЕсли;

	ПолучитьДанныеЗаПрошлыйГодИз1С = Истина;
	Если СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация.ДатаНачалаИспользованияЗвит1С) Тогда
			ПолучитьДанныеЗаПрошлыйГодИз1С = ДатаПрошлогоГода  < СтруктураРеквизитовФормы.Организация.ДатаНачалаИспользованияЗвит1С;
		КонецЕсли;
	КонецЕсли;
	
	// Для встроенных отчетов выводим предупреждения всегда
	ВыводитьПредупреждения = (СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Ложь); 

	Если ПолучитьДанныеЗаПрошлыйКварталИз1С Тогда
		// обычное заполнение отчета из встроенной подсистемы
		ДанныеПрошлогоКвартала = ЗначениеПоПредыдущейДекларации(ДатаПрошлогоКвартала,"Декларация","ru = 'строк 18, 21, 24 Декларации';uk= 'рядків 18, 21, 24 Декларації'", ВыводитьПредупреждения);
		Если ДанныеПрошлогоКвартала <> Неопределено  Тогда
			R018G3 = ДанныеПрошлогоКвартала.R017G3;              
			R021G3 = ДанныеПрошлогоКвартала.R020G3;
			R024G3 = ДанныеПрошлогоКвартала.R023G3;
		КонецЕсли;
		// данные за прошлый год
		Если ПолучитьДанныеЗаПрошлыйГодИз1С Тогда
			ДанныеПрошлогоГода = ЗначениеПоПредыдущейДекларации(ДатаПрошлогоГода,"ПриложениеЗП","ru = '16.3 Приложения ЗП';uk= '16.3 Додатка ЗП'", ВыводитьПредупреждения);
			Если ДанныеПрошлогоГода <> Неопределено Тогда
				R0163G3 = ДанныеПрошлогоГода.R01642G3;
			КонецЕсли;
		КонецЕсли;

		СтруктураДанныхДекларация.R018G3 = R018G3;
		СтруктураДанныхДекларация.R021G3 = R021G3;
		СтруктураДанныхДекларация.R024G3 = R024G3;
		СтруктураДанныхПриложениеЗП.R0163G3 = R0163G3;
	Иначе
		// Заполнение отчета из FREDO Звіт
		//прошлый период текущего года
		ГодПериода   = Год(ДатаПрошлогоКвартала);
		ИмяСхемы = "J0100119";  // Декларация о прибыли 
		Если ЗначениеЗаполнено(СтруктураДанныхДекларация.H091) И ГодПериода >= 2021 Тогда
			// сельхозники
			ИмяСхемы = "J0100519"; 
		КонецЕсли;
	
		Если Месяц(ДатаПрошлогоКвартала) = 3 Тогда
			ТипПериода   = 10; // 1 квартал					
		ИначеЕсли Месяц(ДатаПрошлогоКвартала) = 6 Тогда
			ТипПериода   = 20; // 1 полугодие
		ИначеЕсли Месяц(ДатаПрошлогоКвартала) = 9 Тогда
			ТипПериода   = 25; // 9 месяцев
		//Иначе
		//	ТипПериода   = 30; // Год
		КонецЕсли;
		
		НомерПериода = 1;
		
		ПредставлениеПериодаЗвит1С = ПредставлениеПериода(НачалоГода(ДатаПрошлогоКвартала), КонецКвартала(ДатаПрошлогоКвартала), "Л=uk_UA");
			
		ПараметрыЗаполненияПоказателиПрошогоПериода = Новый Структура;
		ПараметрыЗаполненияПоказателиПрошогоПериода.Вставить("ПараметрыЗапроса", Новый Структура("ИмяСхемы, ТипПериода, НомерПериода, ГодПериода", ИмяСхемы, ТипПериода, НомерПериода, ГодПериода));
		ПараметрыЗаполненияПоказателиПрошогоПериода.Вставить("ПредставлениеПериодаЗвит1С", ПредставлениеПериодаЗвит1С);
		ПараметрыЗаполненияПоказателиПрошогоПериода.Вставить("ВыводитьПредупреждения", ВыводитьПредупреждения);
		ПараметрыЗаполненияЗвит1С.Вставить("ПараметрыЗаполненияПоказателиПрошогоПериода", ПараметрыЗаполненияПоказателиПрошогоПериода);

		ИмяСхемы = "J01114"; // Приложение ЗП 
		//прошлый год
		Если ГодПериода <= 2020 Тогда  
			ИмяСхемы = ИмяСхемы + "18";
		Иначе
		    ИмяСхемы = ИмяСхемы + "19";
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанныхДекларация.H091) И ГодПериода >= 2021 Тогда
			// сельхозники
			ИмяСхемы = "J0151419"; 
		КонецЕсли;
		
		Если Месяц(ДатаПрошлогоКвартала) = 3 Тогда
			ТипПериода   = 10; // 1 квартал					
		ИначеЕсли Месяц(ДатаПрошлогоКвартала) = 6 Тогда
			ТипПериода   = 20; // 1 полугодие
		ИначеЕсли Месяц(ДатаПрошлогоКвартала) = 9 Тогда
			ТипПериода   = 25; // 9 месяцев
		Иначе
			ТипПериода   = 30; // Год
		КонецЕсли;
		
		НомерПериода = 1;
		
		ПредставлениеПериодаЗвит1С = ПредставлениеПериода(НачалоГода(ДатаПрошлогоКвартала), КонецКвартала(ДатаПрошлогоКвартала), "Л=uk_UA");
			
		ПараметрыЗаполненияПоказателиПрошлогоГода = Новый Структура;
		ПараметрыЗаполненияПоказателиПрошлогоГода.Вставить("ПараметрыЗапроса", Новый Структура("ИмяСхемы, ТипПериода, НомерПериода, ГодПериода", ИмяСхемы, ТипПериода, НомерПериода, ГодПериода));
		ПараметрыЗаполненияПоказателиПрошлогоГода.Вставить("ПредставлениеПериодаЗвит1С", ПредставлениеПериодаЗвит1С);
		ПараметрыЗаполненияПоказателиПрошлогоГода.Вставить("ВыводитьПредупреждения", ВыводитьПредупреждения);
		ПараметрыЗаполненияЗвит1С.Вставить("ПараметрыЗаполненияПоказателиПрошлогоГода", ПараметрыЗаполненияПоказателиПрошлогоГода);

	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Функция ЗначениеПоПредыдущейДекларации(ДатаОкончанияПериода,ИмяПоля,ИмяПоказателяРасшНаРазныхЯзыках,ВыводитьПредупреждения )
    перем ПоказателиОтчета;
	перем ПоказателиПоля;
	
	ЗапросДеклПрошл = Новый Запрос ("
	|ВЫБРАТЬ
	| РегламентированныйОтчет.ДанныеОтчета
	
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|
	|ГДЕ
	|	РегламентированныйОтчет.ПометкаУдаления = &ПометкаУдаления И
	|	РегламентированныйОтчет.Организация = &Организация И
	|	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета И
	|	РегламентированныйОтчет.ДатаОкончания = &ДатаОкончания"
	);
	
	ЗапросДеклПрошл.УстановитьПараметр ("ПометкаУдаления",ЛОЖЬ);
	ЗапросДеклПрошл.УстановитьПараметр ("ДатаОкончания",ДатаОкончанияПериода);
	ЗапросДеклПрошл.УстановитьПараметр ("Организация",СтруктураРеквизитовФормы.Организация);
	ЗапросДеклПрошл.УстановитьПараметр ("ИсточникОтчета","РегламентированныйОтчетДекларацияОПрибыли");
	
	РезультатЗапроса = ЗапросДеклПрошл.Выполнить();
	ТаблицаРезультатов = РезультатЗапроса.Выгрузить();
	
	// Предупреждения FREDO Звіт выводим только на украинском языке. Для прочих, по умолчанию
	КодЯзыка = ?(СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Ложь, "", "uk");

	Если  ТаблицаРезультатов.Количество() = 0 Тогда
		Если ВыводитьПредупреждения Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраненная декларация о прибыли за %1 не обнаружена!';uk='Збережену декларацію про прибуток за %1 не виявлено!'", КодЯзыка)
			+?(СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Ложь, " ", Символы.ПС)+НСтр("ru='Невозможно автоматическое заполнение показателя %2 !';uk='Неможливе автоматичне заповнення показника %2 !'", КодЯзыка),
				                                   ПредставлениеПериода( НачалоДня(НачалоКвартала(ДатаОкончанияПериода)), КонецДня(ДатаОкончанияПериода), "Л = ""uk_UA""; ФП = Истина" ),
												   НСтр(ИмяПоказателяРасшНаРазныхЯзыках, КодЯзыка));
												   
			Если СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Ложь Тогда
				Сообщить(ТекстСообщения);
			Иначе
				мСписокСообщенийЗвит1С.Добавить(4,ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли  ТаблицаРезультатов.Количество() > 1 Тогда

		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							 НСтр("ru='Невозможно автоматическое заполнение показателя %2 !';uk='Неможливе автоматичне заповнення показника %2 !'", КодЯзыка)
							+?(СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Ложь, " ", Символы.ПС)
							+НСтр("ru='  Сохранено %3 деклараций(ии) о прибыли за %1!';uk='   Збережено %3 декларацій(ії) про прибуток за %1!'", КодЯзыка)
											   ,ПредставлениеПериода( НачалоДня(НачалоКвартала(ДатаОкончанияПериода)), КонецДня(ДатаОкончанияПериода), "Л = ""uk_UA""; ФП = Истина" )
											   ,НСтр(ИмяПоказателяРасшНаРазныхЯзыках, КодЯзыка)
											   ,ТаблицаРезультатов.Количество());
						 
		Если СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Ложь Тогда
			Сообщить(ТекстСообщения);
		Иначе
			мСписокСообщенийЗвит1С.Добавить(4,ТекстСообщения);
		КонецЕсли;
		
	Иначе	
		
		Для каждого СтрокаТаблицыРезультатов Из ТаблицаРезультатов Цикл
			
			ДанныеОтчета = СтрокаТаблицыРезультатов.ДанныеОтчета.Получить();
			ДанныеОтчета.Свойство("ПоказателиОтчета",ПоказателиОтчета);
			ПоказателиОтчета.Свойство("ПолеТабличногоДокумента" + ИмяПоля, ПоказателиПоля);	
			Возврат ПоказателиПоля;
		
		КонецЦикла;
		
		Если ВыводитьПредупреждения Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраненная декларация о прибыли за %1 не обнаружена!';uk='Збережену декларацію про прибуток за %1 не виявлено!'", КодЯзыка)
			+?(СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Ложь, " ", Символы.ПС)+НСтр("ru='Невозможно автоматическое заполнение показателя %2 !';uk='Неможливе автоматичне заповнення показника %2 !'", КодЯзыка),
				                                   ПредставлениеПериода( НачалоДня(НачалоКвартала(ДатаОкончанияПериода)), КонецДня(ДатаОкончанияПериода), "Л = ""uk_UA""; ФП = Истина" ),
												   НСтр(ИмяПоказателяРасшНаРазныхЯзыках, КодЯзыка));
			Если СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Ложь Тогда
				Сообщить(ТекстСообщения);
			Иначе
				мСписокСообщенийЗвит1С.Добавить(4,ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат ПоказателиПоля;
	
КонецФункции

&НаКлиенте
Функция ПолучитьЗначениеПоказателяЗвит1С(ОтчетЗвит1С, ИмяПоляЗвит1С, флФин = Истина)
	
	// Функция предназначена только для получения числовых показателей.
	
	// У каждого поля во FREDO Звіт есть состояние "Неопределено". Что 
	// говорит о том что значение не устанавливалось пользователем
	Результат = ОтчетЗвит1С.GetValue("MAIN", ИмяПоляЗвит1С);
	Если Результат = Неопределено Тогда
		Результат = 0
	КонецЕсли;
	
	// данные в Звите для Финотчетов хранятся в тысячах
	Если Год(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) >=2016 и флФин Тогда
		Результат = Результат * 1000;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С)
	
	Если ТипЗнч(ПараметрыЗаполненияЗвит1С) = Тип("Структура") Тогда
		
		ПараметрыЗаполненияИзФинОтчетности = Неопределено;
		Если ПараметрыЗаполненияЗвит1С.Свойство("ПараметрыЗаполненияИзФинОтчетности", ПараметрыЗаполненияИзФинОтчетности) Тогда

			// из финотчетности
			Попытка
				
				Данные = глКомпонентаЗвит1С.GetReport(ПараметрыЗаполненияИзФинОтчетности.ПараметрыЗапроса.ИмяСхемы, 
													  ПараметрыЗаполненияИзФинОтчетности.ПараметрыЗапроса.ТипПериода, 
													  ПараметрыЗаполненияИзФинОтчетности.ПараметрыЗапроса.НомерПериода, 
													  ПараметрыЗаполненияИзФинОтчетности.ПараметрыЗапроса.ГодПериода);
				Если Данные = Неопределено Тогда
					// Выводим только связанные с заполняемым отчетом сообщения
					ТекстСообщения = "Не вдалося отримати дані зі звіту про фінансовий стан, рядки 01 та 02 Декларації заповнені не будуть!";
					глМенеджерЗвит1С.ПредупреждениеЗвит1С(ТекстСообщения, "Завантаження даних з ""FREDO Звіт""");
				Иначе
				R001G3 = 0;	
				Для каждого ТекИмяДля01 Из ПараметрыЗаполненияИзФинОтчетности.ИмяДля01 Цикл
					R001G3 = R001G3 + ПолучитьЗначениеПоказателяЗвит1С(Данные, ТекИмяДля01);
				КонецЦикла;				
				
				R002G3 =  ПолучитьЗначениеПоказателяЗвит1С(Данные, ПараметрыЗаполненияИзФинОтчетности.ИмяДля02Плюс);
				Если ЗначениеЗаполнено(ПараметрыЗаполненияИзФинОтчетности.ИмяДля02Минус) Тогда
					R002G3 =  R002G3 - ПолучитьЗначениеПоказателяЗвит1С(Данные, ПараметрыЗаполненияИзФинОтчетности.ИмяДля02Минус);
				КонецЕсли;
				
				// Теперь округлим показатели так как они отражаются в фин. отчетности (с точностью до 1000 или 100 грн)
				Если СтруктураРеквизитовФормы.ВидФинОтчетности = 0 Тогда
					
					// округляем до 1000 грн
					R002G3 = Окр(R002G3, -3);
					
				Иначе
					
					// округляем до 100 грн
					R002G3 = Окр(R002G3, -2);
				
				КонецЕсли;
				
				ЗаполнитьПоказательНаСервере("R001G3", R001G3, ЭтаФорма, "Декларация");
				ЗаполнитьПоказательНаСервере("R002G3", R002G3, ЭтаФорма, "Декларация");
				
				
				КонецЕсли;
				
			Исключение
				
				Если глМенеджерЗвит1С.ФлагОтладки Тогда
					Сообщить("FREDO Звіт. Виняток при отриманні даних з ""FREDO Звіт"" ("+ПараметрыЗаполненияИзФинОтчетности.ПараметрыЗапроса.ИмяСхемы+", "+ПараметрыЗаполненияИзФинОтчетности.ПараметрыЗапроса.ТипПериода+", "+ПараметрыЗаполненияИзФинОтчетности.ПараметрыЗапроса.НомерПериода+", " +ПараметрыЗаполненияИзФинОтчетности.ПараметрыЗапроса.ГодПериода+")", СтатусСообщения.Важное);
					Сообщить(ОписаниеОшибки(), СтатусСообщения.Информация);
				КонецЕсли;
				
			КонецПопытки;
			
		КонецЕсли;
		
		ПараметрыЗаполненияИзФинОтчетностиПрошл = Неопределено;
		Если ПараметрыЗаполненияЗвит1С.Свойство("ПараметрыЗаполненияИзФинОтчетностиПрошл", ПараметрыЗаполненияИзФинОтчетностиПрошл) Тогда

			// из финотчетности
			Попытка
				
				Данные = глКомпонентаЗвит1С.GetReport(ПараметрыЗаполненияИзФинОтчетностиПрошл.ПараметрыЗапроса.ИмяСхемы, 
													  ПараметрыЗаполненияИзФинОтчетностиПрошл.ПараметрыЗапроса.ТипПериода, 
													  ПараметрыЗаполненияИзФинОтчетностиПрошл.ПараметрыЗапроса.НомерПериода, 
													  ПараметрыЗаполненияИзФинОтчетностиПрошл.ПараметрыЗапроса.ГодПериода);
				Если Данные = Неопределено Тогда
					// Выводим только связанные с заполняемым отчетом сообщения
					ТекстСообщения = "Не вдалося отримати дані зі звіту про фінансовий стан, рядки 01 та 02 Декларації заповнені не будуть!";
					глМенеджерЗвит1С.ПредупреждениеЗвит1С(ТекстСообщения, "Завантаження даних з ""FREDO Звіт""");
				Иначе
					Точн = ?(ПараметрыЗаполненияИзФинОтчетностиПрошл.ПараметрыЗапроса.ГодПериода <2016 ,1000,1);
					R001G3 = 0;	
					Для каждого ТекИмяДля01 Из ПараметрыЗаполненияИзФинОтчетностиПрошл.ИмяДля01 Цикл
						R001G3 = R001G3 + ПолучитьЗначениеПоказателяЗвит1С(Данные, ТекИмяДля01)/Точн;
					КонецЦикла;				
					
					R002G3 =  ПолучитьЗначениеПоказателяЗвит1С(Данные, ПараметрыЗаполненияИзФинОтчетностиПрошл.ИмяДля02Плюс)/Точн;
					Если ЗначениеЗаполнено(ПараметрыЗаполненияИзФинОтчетностиПрошл.ИмяДля02Минус) Тогда
						R002G3 =  R002G3 - ПолучитьЗначениеПоказателяЗвит1С(Данные, ПараметрыЗаполненияИзФинОтчетностиПрошл.ИмяДля02Минус)/Точн;
					КонецЕсли;
					
					// Теперь округлим показатели так как они отражаются в фин. отчетности (с точностью до 1000 или 100 грн)
					Если СтруктураРеквизитовФормы.ВидФинОтчетности = 0 Тогда
						
						// округляем до 1000 грн
						R002G3 = Окр(R002G3, -3);
						
					Иначе
						
						// округляем до 100 грн
						R002G3 = Окр(R002G3, -2);
					
					КонецЕсли;
					
					ЗаполнитьПоказательНаСервере("R001G3", ПолучитьПоказательНаСервере("R001G3", ЭтаФорма, "Декларация") + R001G3, ЭтаФорма, "Декларация");
					ЗаполнитьПоказательНаСервере("R002G3", ПолучитьПоказательНаСервере("R002G3", ЭтаФорма, "Декларация") + R002G3, ЭтаФорма, "Декларация");
				
				КонецЕсли;
				
			Исключение
				
				Если глМенеджерЗвит1С.ФлагОтладки Тогда
					Сообщить("FREDO Звіт. Виняток при отриманні даних з ""FREDO Звіт"" ("+ПараметрыЗаполненияИзФинОтчетностиПрошл.ПараметрыЗапроса.ИмяСхемы+", "+ПараметрыЗаполненияИзФинОтчетностиПрошл.ПараметрыЗапроса.ТипПериода+", "+ПараметрыЗаполненияИзФинОтчетностиПрошл.ПараметрыЗапроса.НомерПериода+", " +ПараметрыЗаполненияИзФинОтчетностиПрошл.ПараметрыЗапроса.ГодПериода+")", СтатусСообщения.Важное);
					Сообщить(ОписаниеОшибки(), СтатусСообщения.Информация);
				КонецЕсли;
				
			КонецПопытки;
			
		КонецЕсли;
		
		ПараметрыЗаполненияУбытокПрошлогоГода = Неопределено;
		Если ПараметрыЗаполненияЗвит1С.Свойство("ПараметрыЗаполненияУбытокПрошлогоГода", ПараметрыЗаполненияУбытокПрошлогоГода) Тогда
			
			Попытка
				
				ИмяСхемы = ПараметрыЗаполненияУбытокПрошлогоГода.ИмяСхемы1;
				Данные = глКомпонентаЗвит1С.GetReport(ИмяСхемы, 
													  ПараметрыЗаполненияУбытокПрошлогоГода.ПараметрыЗапроса.ТипПериода, 
													  ПараметрыЗаполненияУбытокПрошлогоГода.ПараметрыЗапроса.НомерПериода, 
													  ПараметрыЗаполненияУбытокПрошлогоГода.ПараметрыЗапроса.ГодПериода);
				Если Данные = Неопределено Тогда
					
					Попытка //до 2019
						ИмяСхемы = ПараметрыЗаполненияУбытокПрошлогоГода.ИмяСхемы2;
						Данные = глКомпонентаЗвит1С.GetReport(ИмяСхемы,
																ПараметрыЗаполненияУбытокПрошлогоГода.ПараметрыЗапроса.ТипПериода, 
																ПараметрыЗаполненияУбытокПрошлогоГода.ПараметрыЗапроса.НомерПериода, 
																ПараметрыЗаполненияУбытокПрошлогоГода.ПараметрыЗапроса.ГодПериода);
					Исключение
					КонецПопытки;
					
					Если Данные = Неопределено Тогда
						
						ВыводитьПредупреждения =  (Лев(глМенеджерЗвит1С.ИмяСхемыЗвит1С, 6) = "J01001"); // Основная форма

						// Выводим только связанные с заполняемым отчетом сообщения
						Если ВыводитьПредупреждения Тогда
							ТекстСообщения = "Збереженого звіту ""Податкова декларація з податку на прибуток підприємства"" ("+ПараметрыЗаполненияУбытокПрошлогоГода.ИмяСхемы1 + "/" + ПараметрыЗаполненияУбытокПрошлогоГода.ИмяСхемы2 + ") за "+ПараметрыЗаполненияУбытокПрошлогоГода.ПредставлениеПериодаЗвит1С+" не виявлено!
							                 |Автоматичне заповнення рядка 3.2.4 Додатку РІ до Декларації не можливе!";
							глМенеджерЗвит1С.ПредупреждениеЗвит1С(ТекстСообщения, "Завантаження даних з ""FREDO Звіт""");
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ Данные = Неопределено Тогда
					R0324G3 = ПолучитьЗначениеПоказателяЗвит1С(Данные, "A"+ПараметрыЗаполненияУбытокПрошлогоГода.ИмяСтрокиПрошлойДекларации, Ложь);
				КонецЕсли;
				
				Если  ЗначениеЗаполнено(R0324G3) И R0324G3 < 0 Тогда
					ЗаполнитьПоказательНаСервере("R0324G3", ПолучитьПоказательНаСервере("R0324G3", ЭтаФорма, "ПриложениеРИ") - R0324G3, ЭтаФорма, "ПриложениеРИ");
					ЗаполнитьПоказательНаСервере("HD6",  "+", ЭтаФорма, "Декларация");										
				КонецЕсли;
				
				
			Исключение
				ТекстОшибки = "Помилка алгоритму заповнення звіту!
							  |Виняткова ситуація при отриманні даних з ""FREDO Звіт"" ("+ИмяСхемы+", "+ПараметрыЗаполненияУбытокПрошлогоГода.ПараметрыЗапроса.ТипПериода+", "+ПараметрыЗаполненияУбытокПрошлогоГода.ПараметрыЗапроса.НомерПериода+", " +ПараметрыЗаполненияУбытокПрошлогоГода.ПараметрыЗапроса.ГодПериода+")
							  |
							  |"+ОписаниеОшибки();
				глМенеджерЗвит1С.ПредупреждениеЗвит1С(ТекстОшибки, "Завантаження даних з ""FREDO Звіт""");
			КонецПопытки;
			
		КонецЕсли;
		
		ПараметрыЗаполненияПоказателиПрошогоПериода = Неопределено;
		Если ПараметрыЗаполненияЗвит1С.Свойство("ПараметрыЗаполненияПоказателиПрошогоПериода", ПараметрыЗаполненияПоказателиПрошогоПериода) Тогда
			
			R018G3 = 0;
			R021G3 = 0;
			R024G3 = 0;
			Попытка
				Данные = глКомпонентаЗвит1С.GetReport(ПараметрыЗаполненияПоказателиПрошогоПериода.ПараметрыЗапроса.ИмяСхемы, 
													  ПараметрыЗаполненияПоказателиПрошогоПериода.ПараметрыЗапроса.ТипПериода, 
													  ПараметрыЗаполненияПоказателиПрошогоПериода.ПараметрыЗапроса.НомерПериода, 
													  ПараметрыЗаполненияПоказателиПрошогоПериода.ПараметрыЗапроса.ГодПериода);
				Если Данные = Неопределено Тогда

					ВыводитьПредупреждения = (Лев(глМенеджерЗвит1С.ИмяСхемыЗвит1С, 6) = "J01001"); // Основная форма

					// Выводим только связанные с заполняемым отчетом сообщения
					Если ВыводитьПредупреждения Тогда
						ТекстСообщения = "Збереженого звіту ""Податкова декларація з податку на прибуток підприємства"" ("+ПараметрыЗаполненияПоказателиПрошогоПериода.ПараметрыЗапроса.ИмяСхемы+") за "+ПараметрыЗаполненияПоказателиПрошогоПериода.ПредставлениеПериодаЗвит1С+" не виявлено!
						                 |Автоматичне заповнення рядків 18, 21, 24 Декларації не можливе!";
						глМенеджерЗвит1С.ПредупреждениеЗвит1С(ТекстСообщения, "Завантаження даних з ""FREDO Звіт""");
					КонецЕсли;
				Иначе
					R018G3 = ПолучитьЗначениеПоказателяЗвит1С(Данные, "A17",Ложь);
					R021G3 = ПолучитьЗначениеПоказателяЗвит1С(Данные, "A20",Ложь);
					R024G3 = ПолучитьЗначениеПоказателяЗвит1С(Данные, "A23",Ложь);
				КонецЕсли;
			Исключение
				ТекстОшибки = "Помилка алгоритму заповнення звіту!
							  |Виняткова ситуація при отриманні даних з ""FREDO Звіт"" ("+ПараметрыЗаполненияПоказателиПрошогоПериода.ПараметрыЗапроса.ИмяСхемы+", "+ПараметрыЗаполненияПоказателиПрошогоПериода.ПараметрыЗапроса.ТипПериода+", "+ПараметрыЗаполненияПоказателиПрошогоПериода.ПараметрыЗапроса.НомерПериода+", " +ПараметрыЗаполненияПоказателиПрошогоПериода.ПараметрыЗапроса.ГодПериода+")
							  |
							  |"+ОписаниеОшибки();
				глМенеджерЗвит1С.ПредупреждениеЗвит1С(ТекстОшибки, "Завантаження даних з ""FREDO Звіт""");
			КонецПопытки;
		
			ЗаполнитьПоказательНаСервере("R018G3", R018G3, ЭтаФорма, "Декларация");
			ЗаполнитьПоказательНаСервере("R021G3", R021G3, ЭтаФорма, "Декларация");
			ЗаполнитьПоказательНаСервере("R024G3", R024G3, ЭтаФорма, "Декларация");
					
		КонецЕсли;
		
		ПараметрыЗаполненияПоказателиПрошлогоГода = Неопределено;
		Если ПараметрыЗаполненияЗвит1С.Свойство("ПараметрыЗаполненияПоказателиПрошлогоГода", ПараметрыЗаполненияПоказателиПрошлогоГода) Тогда
			
			R0163G3 = 0;
			Попытка
				Данные = глКомпонентаЗвит1С.GetReport(ПараметрыЗаполненияПоказателиПрошлогоГода.ПараметрыЗапроса.ИмяСхемы, 
													  ПараметрыЗаполненияПоказателиПрошлогоГода.ПараметрыЗапроса.ТипПериода, 
													  ПараметрыЗаполненияПоказателиПрошлогоГода.ПараметрыЗапроса.НомерПериода, 
													  ПараметрыЗаполненияПоказателиПрошлогоГода.ПараметрыЗапроса.ГодПериода);
				Если Данные = Неопределено Тогда

					ВыводитьПредупреждения = (Лев(глМенеджерЗвит1С.ИмяСхемыЗвит1С, 6) = "J01114"); // Приложение ЗП

					// Выводим только связанные с заполняемым отчетом сообщения
					Если ВыводитьПредупреждения Тогда
						ТекстСообщения = "Збереженого звіту ""Податкова декларація з податку на прибуток підприємства"" ("+ПараметрыЗаполненияПоказателиПрошогоПериода.ПараметрыЗапроса.ИмяСхемы+") за "+ПараметрыЗаполненияПоказателиПрошогоПериода.ПредставлениеПериодаЗвит1С+" не виявлено!
						                 |Автоматичне заповнення рядків 16.3 Додатка ЗП Декларації не можливе!";
						глМенеджерЗвит1С.ПредупреждениеЗвит1С(ТекстСообщения, "Завантаження даних з ""FREDO Звіт""");
					КонецЕсли;
				Иначе
					R0163G3 = ПолучитьЗначениеПоказателяЗвит1С(Данные, "A1642",Ложь);
				КонецЕсли;
			Исключение
				ТекстОшибки = "Помилка алгоритму заповнення звіту!
							  |Виняткова ситуація при отриманні даних з ""FREDO Звіт"" ("+ПараметрыЗаполненияПоказателиПрошогоПериода.ПараметрыЗапроса.ИмяСхемы+", "+ПараметрыЗаполненияПоказателиПрошогоПериода.ПараметрыЗапроса.ТипПериода+", "+ПараметрыЗаполненияПоказателиПрошогоПериода.ПараметрыЗапроса.НомерПериода+", " +ПараметрыЗаполненияПоказателиПрошогоПериода.ПараметрыЗапроса.ГодПериода+")
							  |
							  |"+ОписаниеОшибки();
				глМенеджерЗвит1С.ПредупреждениеЗвит1С(ТекстОшибки, "Завантаження даних з ""FREDO Звіт""");
			КонецПопытки;
		
			ЗаполнитьПоказательНаСервере("R0163G3", R0163G3, ЭтаФорма, "ПриложениеЗП");
			ЗаполнитьПоказательНаСервере("HD2",  "+", ЭтаФорма, "Декларация");								
					
		КонецЕсли;

		РасчетНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСтруктурыКолонокМногострочныхЧастей()
	
	Если СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов = Неопределено Тогда
		СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов = Новый Структура;	
	КонецЕсли;
	
	Для каждого Многострочка Из мСтруктураМногострочныхРазделов Цикл
		
		ИмяМногострочки = Многострочка.Ключ;
		
		ДанныеФормы 	= ЭтаФорма[Многострочка.Значение];
		Таблица 		= ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		
		
		СтруктураКолонок = Новый Массив;
		Для каждого Колонка Из Таблица.Колонки Цикл
			СтруктураКолонок.Добавить(Колонка.Имя);
		КонецЦикла;
		
		СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов.Вставить(ИмяМногострочки, СтруктураКолонок);
		
	КонецЦикла;

КонецФункции

&НаКлиенте
Процедура ПоддержкаДуплекса(Команда)
	
	// инвертируем пометку и значение
	ЕстьДуплекс = СтруктураРеквизитовФормы.ЕстьДуплекс;
	
	СтруктураРеквизитовФормы.Вставить("ЕстьДуплекс", НЕ ЕстьДуплекс);
	Элементы.ЕстьДуплекс.Пометка = НЕ ЕстьДуплекс;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеФормыНаСервере();
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	// расшифровка для Звит1С
	Если  СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровки")
		И ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки) 
		И СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С") Тогда
		
		ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки),
									  СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С); 
		
	КонецЕсли;
	
	ПоказателиОтчета = Новый Структура();
	
	РеквизитыФормы = ПолучитьРеквизиты();
	Для каждого Реквизит Из РеквизитыФормы Цикл
		Если Лев(ВРЕГ(Реквизит.Имя), 15)  = ВРЕГ("СтруктураДанных") Тогда
			ПоказателиОтчета.Вставить(Сред(Реквизит.Имя, 16), ЭтаФорма[Реквизит.Имя]);		
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИдМногострочногоРаздела Из мСтруктураМногострочныхРазделов Цикл
		
		СтруктураДанных = Новый Структура;
		
		Таблица = РеквизитФормыВЗначение(ИдМногострочногоРаздела.Значение, Тип("ТаблицаЗначений"));
		КолонкиТаблицы = Таблица.Колонки;
		
		Для каждого Строка Из Таблица Цикл
			
			Для каждого Колонка Из КолонкиТаблицы Цикл
				СтруктураДанных.Вставить(Колонка.Имя + "_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ=0"), Строка[Колонка.Имя]);
			КонецЦикла;
			
		КонецЦикла;
		
		ПоказателиОтчета.Вставить(ИдМногострочногоРаздела.Значение, СтруктураДанных);		
		
	КонецЦикла;	

	
	НомСтр = 0;
	Для каждого Страница Из ТаблицаСтраницыРаздела1 Цикл
		
		НомСтр = НомСтр + 1;
		НомСтрСтрока = Формат(НомСтр, "ЧГ=0");
		
		СтруктураДанныхДекларации = Страница.Данные[0].Значение;
		
		ПоказателиОтчета.Вставить("ПриложениеПН_" + НомСтрСтрока , СтруктураДанныхДекларации);
		
		Таблица = Страница.ДанныеДопСтрок[0].Значение.PNT2R.Выгрузить();
		КолонкиТаблицы = Таблица.Колонки;
		СтруктураДанных = Новый Структура;

		Для каждого Строка Из Таблица Цикл
		
			Для каждого Колонка Из КолонкиТаблицы Цикл
				СтруктураДанных.Вставить(Сред(Колонка.Имя, 2) + "_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ=0"), Строка[Колонка.Имя]);
			КонецЦикла;
			
		КонецЦикла;
		ПоказателиОтчета.Вставить("PN_" + НомСтрСтрока + "T2R", СтруктураДанных);		
		
		
	КонецЦикла;

	НомСтр = 0;   
	Для каждого Страница Из ТаблицаСтраницыРаздела2 Цикл
		
		НомСтр = НомСтр + 1;
		НомСтрСтрока = Формат(НомСтр, "ЧГ=0");
		
		СтруктураДанныхДекларации = Страница.Данные[0].Значение;
		
		ПоказателиОтчета.Вставить("ПриложениеКИК_" + НомСтрСтрока , СтруктураДанныхДекларации);
		
	КонецЦикла;

	НомСтр = 0;   
	Для каждого Страница Из ТаблицаСтраницыРаздела3 Цикл
		
		НомСтр = НомСтр + 1;
		НомСтрСтрока = Формат(НомСтр, "ЧГ=0");
		
		СтруктураДанныхДекларации = Страница.Данные[0].Значение;
		
		ПоказателиОтчета.Вставить("ПриложениеКК_" + НомСтрСтрока , СтруктураДанныхДекларации);
		
	КонецЦикла;
	
	НомСтр = 0;
	Для каждого Страница Из ТаблицаСтраницыРаздела4 Цикл
		
		НомСтр = НомСтр + 1;
		НомСтрСтрока = Формат(НомСтр, "ЧГ=0");
		
		СтруктураДанныхДекларации = Страница.Данные[0].Значение;
		
		ПоказателиОтчета.Вставить("ПриложениеКТЦ_" + НомСтрСтрока , СтруктураДанныхДекларации);
		
		Таблица = Страница.ДанныеДопСтрок[0].Значение.KTT1R.Выгрузить();
		КолонкиТаблицы = Таблица.Колонки;
		СтруктураДанных = Новый Структура;

		Для каждого Строка Из Таблица Цикл
		
			Для каждого Колонка Из КолонкиТаблицы Цикл
				СтруктураДанных.Вставить(Сред(Колонка.Имя, 3) + "_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ=0"), Строка[Колонка.Имя]);
			КонецЦикла;
			
		КонецЦикла;
		ПоказателиОтчета.Вставить("KT_" + НомСтрСтрока + "T1R", СтруктураДанных);		
		
		Таблица = Страница.ДанныеДопСтрок[0].Значение.KTT2R.Выгрузить();
		КолонкиТаблицы = Таблица.Колонки;
		СтруктураДанных = Новый Структура;

		Для каждого Строка Из Таблица Цикл
		
			Для каждого Колонка Из КолонкиТаблицы Цикл
				СтруктураДанных.Вставить(Сред(Колонка.Имя, 3) + "_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ=0"), Строка[Колонка.Имя]);
			КонецЦикла;
			
		КонецЦикла;
		ПоказателиОтчета.Вставить("KT_" + НомСтрСтрока + "T2R", СтруктураДанных);		
		
	КонецЦикла;
	
	НомСтр = 0;   
	Для каждого Страница Из ТаблицаСтраницыРаздела5 Цикл
		
		НомСтр = НомСтр + 1;
		НомСтрСтрока = Формат(НомСтр, "ЧГ=0");
		
		СтруктураДанныхДекларации = Страница.Данные[0].Значение;
		
		ПоказателиОтчета.Вставить("ПриложениеКЦП_" + НомСтрСтрока , СтруктураДанныхДекларации);
		
	КонецЦикла;
	
	ПоказателиОтчета.Вставить("ДопПоказателиОтчета", СтруктураРеквизитовФормы.ДопПоказателиОтчетаЗвит1С);
		
	// показатели
	СписокСохранения.Вставить("ДанныеОтчета", ПоказателиОтчета);
	
	Возврат СписокСохранения;
	
КонецФункции

&НаКлиенте
Функция СоздатьДанныеОтчетаДляВыгрузки() Экспорт
	
	АдресВХранилище = СоздатьДанныеОтчетаДляВыгрузкиНаСервере();
	Возврат АдресВХранилище;

КонецФункции

&НаСервере
Функция СоздатьДанныеОтчетаДляВыгрузкиНаСервере()
	
	ДанныеОтчета = ПолучитьДанныеФормыНаСервере();
	Возврат ПоместитьВоВременноеХранилище(ДанныеОтчета, Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Функция СоздатьТаблицуВыгружаемыхОтчетныхФорм() Экспорт

	АдресВХранилище = СоздатьТаблицуВыгружаемыхОтчетныхФормНаСервере();
	Возврат АдресВХранилище;

КонецФункции


&НаСервере
Функция СоздатьТаблицуВыгружаемыхОтчетныхФормНаСервере()

	ТаблицаСхемXML = ЗаполнитьТаблицуСоСхемамиВыгрузки();
	ОпределитьСписокВыгружаемыхСхем(ТаблицаСхемXML);

	Возврат ПоместитьВоВременноеХранилище(ТаблицаСхемXML, Новый УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Функция СоздатьСтруктуруСоСхемамиВыгрузки() Экспорт

	АдресВХранилище = СоздатьСтруктуруСоСхемамиВыгрузкиНаСервере();
	Возврат АдресВХранилище;

КонецФункции

&НаСервере
Функция СоздатьСтруктуруСоСхемамиВыгрузкиНаСервере()

	ТипМакетаСхемыXSD = Метаданные.СвойстваОбъектов.ТипМакета.ДвоичныеДанные;

	СтруктураXSD = Новый Структура;
	Объект = ОбъектОтчета(ЭтаФорма.ИмяФормы);

	МетаданныеМактов = Объект.Метаданные().Макеты;

	Для Каждого Макет Из МетаданныеМактов Цикл
		
		Если ВРЕГ(Макет.Имя) = ВРЕГ("АрхивСхемXSD") Тогда
			
			АрхивСхемXSD = Объект.ПолучитьМакет("АрхивСхемXSD");
			
			ВременноеИмяZIP      = ПолучитьИмяВременногоФайла(".zip");
			ВременноеИмяКаталога = ПолучитьИмяВременногоФайла();
			
			АрхивСхемXSD.Записать(ВременноеИмяZIP);
			ЧтениеZIP = Новый ЧтениеZipФайла(ВременноеИмяZIP);
			
			Для каждого Схема Из ЧтениеZIP.Элементы Цикл
				
				ЧтениеZIP.Извлечь(Схема, ВременноеИмяКаталога);
				
				СтруктураXSD.Вставить(Схема.ИмяБезРасширения , Новый ДвоичныеДанные(ВременноеИмяКаталога + "\" + Схема.Имя));
			
			КонецЦикла;
			
			Попытка
				УдалитьФайлы(ВременноеИмяZIP);
			Исключение КонецПопытки;
			
			Попытка
				УдалитьФайлы(ВременноеИмяКаталога);
			Исключение КонецПопытки;
		
		КонецЕсли;
		
		Если Макет.ТипМакета = ТипМакетаСхемыXSD  Тогда
		
			СтруктураXSD.Вставить(Макет.Имя, Объект.ПолучитьМакет(Макет));		
		
		КонецЕсли;	
		
	КонецЦикла;

	Возврат ПоместитьВоВременноеХранилище(СтруктураXSD, Новый УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура  ОпределитьСписокВыгружаемыхСхем(тбСхемыXML);

	Сообщение = Новый СообщениеПользователю;
	Для Каждого стр Из  тбСхемыXML Цикл
		стр.фВыгрузка = 1;
		
		Если Лев(Стр.Префикс,2) = "AV"  Тогда
			Если НЕ ЗначениеЗаполнено(ПолучитьПоказательНаСервере("HD1", ЭтаФорма, "Декларация")) Тогда
				Сообщение.Текст = НСтр("ru='Приложение АВ не выгружается, т.к. не установлена соответствующая пометка в разделе  ""Наявність додатків"" в Декларации';uk='Додаток АВ не вивантажується, т.щ. не встановлена відповідна позначка в розділі  ""Наявність додатків"" в Декларації'");
				Сообщение.Сообщить();
				стр.фВыгрузка = 0;
			КонецЕсли;
		КонецЕсли;

		Если Лев(Стр.Префикс,2) = "ZP"  Тогда
			Если НЕ ЗначениеЗаполнено(ПолучитьПоказательНаСервере("HD2", ЭтаФорма, "Декларация")) Тогда
				Сообщение.Текст = НСтр("ru='Приложение ЗП не выгружается, т.к. не установлена соответствующая пометка в разделе  ""Наявність додатків"" в Декларации';uk='Додаток ЗП не вивантажується, т.щ. не встановлена відповідна позначка в розділі  ""Наявність додатків"" в Декларації'");
				Сообщение.Сообщить();
				стр.фВыгрузка = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если Лев(Стр.Префикс,2) = "PN"  Тогда
			Если НЕ ЗначениеЗаполнено(ПолучитьПоказательНаСервере("HD3", ЭтаФорма, "Декларация")) Тогда
				Сообщение.Текст = НСтр("ru='Приложение ПН не выгружается, т.к. не установлена соответствующая пометка в разделе  ""Наявність додатків"" в Декларации';uk='Додаток ПН не вивантажується, т.щ. не встановлена відповідна позначка в розділі  ""Наявність додатків"" в Декларації'");
				Сообщение.Сообщить();
				стр.фВыгрузка = 0;
			КонецЕсли;
			ПроверятьПриложениеПН = (стр.фВыгрузка = 1);
		КонецЕсли;

		Если Лев(Стр.Префикс,2) = "TC"  Тогда
			Если НЕ ЗначениеЗаполнено(ПолучитьПоказательНаСервере("HD4", ЭтаФорма, "Декларация")) Тогда
				Сообщение.Текст = НСтр("ru='Приложение ТЦ не выгружается, т.к. не установлена соответствующая пометка в разделе  ""Наявність додатків"" в Декларации';uk='Додаток ТЦ не вивантажується, т.щ. не встановлена відповідна позначка в розділі  ""Наявність додатків"" в Декларації'");
				Сообщение.Сообщить();
				стр.фВыгрузка = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если Лев(Стр.Префикс,2) = "VP"  Тогда
			Если НЕ ЗначениеЗаполнено(ПолучитьПоказательНаСервере("HD5", ЭтаФорма, "Декларация")) Тогда
				Сообщение.Текст = НСтр("ru='Приложение ВП не выгружается, т.к. не установлена соответствующая пометка в разделе  ""Наявність додатків"" в Декларации';uk='Додаток ВП не вивантажується, т.щ. не встановлена відповідна позначка в розділі  ""Наявність додатків"" в Декларації'");
				Сообщение.Сообщить();
				стр.фВыгрузка = 0;
			КонецЕсли;
		КонецЕсли;

		Если Лев(Стр.Префикс,2) = "RI"  Тогда
			Если НЕ ЗначениеЗаполнено(ПолучитьПоказательНаСервере("HD6", ЭтаФорма, "Декларация")) Тогда
				Сообщение.Текст = НСтр("ru='Приложение РІ не выгружается, т.к. не установлена соответствующая пометка в разделе  ""Наявність додатків"" в Декларации';uk='Додаток РІ не вивантажується, т.щ. не встановлена відповідна позначка в розділі  ""Наявність додатків"" в Декларації'");
				Сообщение.Сообщить();
				стр.фВыгрузка = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если Лев(Стр.Префикс,2) = "PZ"  Тогда
			Если НЕ ЗначениеЗаполнено(ПолучитьПоказательНаСервере("HD7", ЭтаФорма, "Декларация")) Тогда
				Сообщение.Текст = НСтр("ru='Приложение ПЗ не выгружается, т.к. не установлена соответствующая пометка в разделе  ""Наявність додатків"" в Декларации';uk='Додаток ПЗ не вивантажується, т.щ. не встановлена відповідна позначка в розділі  ""Наявність додатків"" в Декларації'");
				Сообщение.Сообщить();
				стр.фВыгрузка = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если Лев(Стр.Префикс,2) = "AM"  Тогда
			Если НЕ ЗначениеЗаполнено(ПолучитьПоказательНаСервере("HD8", ЭтаФорма, "Декларация")) Тогда
				Сообщение.Текст = НСтр("ru='Приложение АМ не выгружается, т.к. не установлена соответствующая пометка в разделе  ""Наявність додатків"" в Декларации';uk='Додаток АМ не вивантажується, т.щ. не встановлена відповідна позначка в розділі  ""Наявність додатків"" в Декларації'");
				Сообщение.Сообщить();
				стр.фВыгрузка = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если Лев(Стр.Префикс,2) = "CP"  Тогда
			Если НЕ ЗначениеЗаполнено(ПолучитьПоказательНаСервере("HD9", ЭтаФорма, "Декларация")) Тогда
				Сообщение.Текст = НСтр("ru='Приложение ЦП не выгружается, т.к. не установлена соответствующая пометка в разделе  ""Наявність додатків"" в Декларации';uk='Додаток ЦП не вивантажується, т.щ. не встановлена відповідна позначка в розділі  ""Наявність додатків"" в Декларації'");
				Сообщение.Сообщить();
				стр.фВыгрузка = 0;
			КонецЕсли;
		КонецЕсли;

		Если Лев(Стр.Префикс,2) = "PP"  Тогда
			Если НЕ ЗначениеЗаполнено(ПолучитьПоказательНаСервере("HD10", ЭтаФорма, "Декларация")) Тогда
				Сообщение.Текст = НСтр("ru='Приложение ПП не выгружается, т.к. не установлена соответствующая пометка в разделе  ""Наявність додатків"" в Декларации';uk='Додаток ПП не вивантажується, т.щ. не встановлена відповідна позначка в розділі  ""Наявність додатків"" в Декларації'");
				Сообщение.Сообщить();
				стр.фВыгрузка = 0;
			КонецЕсли;
		КонецЕсли;
		Если Лев(Стр.Префикс,3) = "KIK"  Тогда
			Если НЕ ЗначениеЗаполнено(ПолучитьПоказательНаСервере("HD13", ЭтаФорма, "Декларация")) Тогда
				Сообщение.Текст = НСтр("ru='Приложение КИК не выгружается, т.к. не установлена соответствующая пометка в разделе  ""Наявність додатків"" в Декларации';uk='Додаток КІК не вивантажується, т.щ. не встановлена відповідна позначка в розділі  ""Наявність додатків"" в Декларації'");
				Сообщение.Сообщить();
				стр.фВыгрузка = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если Лев(Стр.Префикс,2) = "KK"  Тогда
			Если НЕ ЗначениеЗаполнено(ПолучитьПоказательНаСервере("HD2", ЭтаФорма, "ПриложениеКИК"))   
				ИЛИ НЕ ЗначениеЗаполнено(ПолучитьПоказательНаСервере("HD13", ЭтаФорма, "Декларация")) Тогда
				Сообщение.Текст = НСтр("ru='Приложение КИК-К не выгружается, т.к. не установлена соответствующая пометка в разделе  ""Наявність додатків"" в Приложении КИК';uk='Додаток КІК-К не вивантажується, т.щ. не встановлена відповідна позначка в розділі  ""Наявність додатків"" в Додатку КІК'");
				Сообщение.Сообщить();
				стр.фВыгрузка = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если Лев(Стр.Префикс,2) = "KT"  Тогда
			Если НЕ ЗначениеЗаполнено(ПолучитьПоказательНаСервере("HD1", ЭтаФорма, "ПриложениеКИК")) 
				ИЛИ НЕ ЗначениеЗаполнено(ПолучитьПоказательНаСервере("HD13", ЭтаФорма, "Декларация")) Тогда
				Сообщение.Текст = НСтр("ru='Приложение КИК-ТЦ не выгружается, т.к. не установлена соответствующая пометка в разделе  ""Наявність додатків"" в Приложении КИК';uk='Додаток КІК-ТЦ не вивантажується, т.щ. не встановлена відповідна позначка в розділі  ""Наявність додатків"" в Додатку КІК'");
				Сообщение.Сообщить();
				стр.фВыгрузка = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если Лев(Стр.Префикс,3) = "KCP"  Тогда
			Если НЕ ЗначениеЗаполнено(ПолучитьПоказательНаСервере("HD3", ЭтаФорма, "ПриложениеКИК")) 
				ИЛИ НЕ ЗначениеЗаполнено(ПолучитьПоказательНаСервере("HD13", ЭтаФорма, "Декларация")) Тогда
				Сообщение.Текст = НСтр("ru='Приложение КИК-ЦП не выгружается, т.к. не установлена соответствующая пометка в разделе  ""Наявність додатків"" в Приложении КИК';uk='Додаток КІК-ЦП не вивантажується, т.щ. не встановлена відповідна позначка в розділі  ""Наявність додатків"" в Додатку КІК'");
				Сообщение.Сообщить();
				стр.фВыгрузка = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры	

&НаСервере
Функция ЗаполнитьТаблицуСоСхемамиВыгрузки()
	
	//для возможности выгрузки в XML файл	
	тбСхемыXML = Новый ТаблицаЗначений;
	ТипКолИмяСхемы = СоздатьОписанияТипов("Строка",8);
	тбСхемыXML.Колонки.Добавить("ИмяСхемы",ТипКолИмяСхемы,НСтр("ru='Имя файла-схемы';uk=""Ім'я файлу-схеми"""));
	ТипКолПредставлениеСхемы = СоздатьОписанияТипов("Строка",80);
	тбСхемыXML.Колонки.Добавить("ПредставлениеСхемы",ТипКолПредставлениеСхемы,НСтр("ru='Наименование регл.отчета';uk='Найменування регл.звіту'"));
	ТипКолНазваниеСтраницыПанели = СоздатьОписанияТипов("Строка",60);
	тбСхемыXML.Колонки.Добавить("НазваниеСтраницыПанели",ТипКолНазваниеСтраницыПанели,НСтр("ru='Наименование страницы панели';uk='Найменування сторінки панелі'"));
	
	ТипКолфВыгрузка = СоздатьОписанияТипов("Число",1,0);
	тбСхемыXML.Колонки.Добавить("фВыгрузка",ТипКолфВыгрузка,НСтр("ru='Выгружать?';uk='Вивантажувати?'"));
	ТипКолНазваниеСтраницыПанели = СоздатьОписанияТипов("Строка",60);
	ТипПрефикса = СоздатьОписанияТипов("Строка",10);
	тбСхемыXML.Колонки.Добавить("Префикс",ТипПрефикса,НСтр("ru='Префикс';uk='Префікс'"));
	
	тбСхемыXML.Колонки.Добавить("Тип", ,НСтр("ru='Тип';uk='Тип'"));
	
	ЮрЛицо = (СтруктураРеквизитовФормы.ОрганизацияЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);

	Если ЮрЛицо Тогда
		ГодоваяДекларация = (СтруктураРеквизитовФормы.мПериодичность = Перечисления.Периодичность.Год);
		ПроизводительСХ = Ложь;
		Если ЗначениеЗаполнено(ПолучитьПоказательНаСервере("H091", ЭтаФорма, "Декларация")) И ГодоваяДекларация Тогда
			ПроизводительСХ = Истина;
		КонецЕсли;
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = ?(ПроизводительСХ, "J0100519", "J0100119");  
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Декларация о прибыли';uk='Декларація про прибуток'");
		НовСтрока.НазваниеСтраницыПанели ="Декларация";
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = ?(ПроизводительСХ, "J0151819", "J0111819");  
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение PІ';uk='Додаток РI'");
		НовСтрока.НазваниеСтраницыПанели ="ПриложениеРИ";
		НовСтрока.Префикс = "RI";
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = ?(ПроизводительСХ, "J0150319", "J0110319");  
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение ЦП';uk='Додаток ЦП'");
		НовСтрока.НазваниеСтраницыПанели ="ПриложениеЦП";
		НовСтрока.Префикс = "CP";
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = ?(ПроизводительСХ, "J0152819", "J0112819");  
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение ТЦ';uk='Додаток ТЦ'");
		НовСтрока.НазваниеСтраницыПанели ="ПриложениеТЦ";
		НовСтрока.Префикс = "TC";
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = ?(ПроизводительСХ, "J0150619", "J0110619");  
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение АМ';uk='Додаток АМ'");
		НовСтрока.НазваниеСтраницыПанели ="ПриложениеАМ";
		НовСтрока.Префикс = "AM";
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = ?(ПроизводительСХ, "J0151319", "J0111319");  
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение ПЗ';uk='Додаток ПЗ'");
		НовСтрока.НазваниеСтраницыПанели ="ПриложениеПЗ";
		НовСтрока.Префикс = "PZ";
		
		НовСтрока = тбСхемыXML.Добавить(); 
		НовСтрока.ИмяСхемы = ?(ПроизводительСХ, "J0151419", "J0111419");  
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение ЗП';uk='Додаток ЗП'");
		НовСтрока.НазваниеСтраницыПанели ="ПриложениеЗП";
		НовСтрока.Префикс = "ZP";
		
		Для  Инд = 1 ПО ТаблицаСтраницыРаздела1.Количество() Цикл
			
			НовСтрока = тбСхемыXML.Добавить();
			НовСтрока.ИмяСхемы = ?(ПроизводительСХ, "J0151519", "J0111519");  
			НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение ПН';uk='Додаток ПН'")+ НСтр("ru=' доп. стр. ';uk= ' дод. стор. '")  + Формат(Инд, "ЧГ=0");
			НовСтрока.НазваниеСтраницыПанели ="ПриложениеПН_" + Формат(Инд, "ЧГ=0"); 
			НовСтрока.Префикс = "PN_" + Формат(Инд, "ЧГ=0"); 
			
		КонецЦикла;
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = ?(ПроизводительСХ, "J0151619", "J0111619");  
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение АВ';uk='Додаток АВ'");
		НовСтрока.НазваниеСтраницыПанели ="ПриложениеАВ";
		НовСтрока.Префикс = "AV";
		
		Если НЕ ЗначениеЗаполнено(ПолучитьПоказательНаСервере("HZU", ЭтаФорма, "Декларация")) Тогда
			НовСтрока = тбСхемыXML.Добавить();
			НовСтрока.ИмяСхемы = ?(ПроизводительСХ, "J0151719", "J0111719");  
			НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение ВП';uk='Додаток ВП'");
			НовСтрока.НазваниеСтраницыПанели ="ПриложениеВП";
			НовСтрока.Префикс = "VP";
		КонецЕсли;
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = ?(ПроизводительСХ, "J0152019", "J0112019");  
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение ПП';uk='Додаток ПП'");
		НовСтрока.НазваниеСтраницыПанели ="ПриложениеПП";
		НовСтрока.Префикс = "PP";
		
			
		Для  Инд = 1 ПО ТаблицаСтраницыРаздела2.Количество() Цикл
			
			НовСтрока = тбСхемыXML.Добавить();
			НовСтрока.ИмяСхемы = ?(ПроизводительСХ, "J0154419", "J0114419");  
			НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение КИК';uk='Додаток КІК'")+ НСтр("ru=' доп. стр. ';uk= ' дод. стор. '")  + Формат(Инд, "ЧГ=0");
			НовСтрока.НазваниеСтраницыПанели ="ПриложениеКИК_" + Формат(Инд, "ЧГ=0"); 
			НовСтрока.Префикс = "KIK_" + Формат(Инд, "ЧГ=0"); 
			
		КонецЦикла;
		
		Для  Инд = 1 ПО ТаблицаСтраницыРаздела3.Количество() Цикл
			
			НовСтрока = тбСхемыXML.Добавить();
			НовСтрока.ИмяСхемы = ?(ПроизводительСХ, "J0154519", "J0114519");  
			НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение КИК-К';uk='Додаток КІК-К'")+ НСтр("ru=' доп. стр. ';uk= ' дод. стор. '")  + Формат(Инд, "ЧГ=0");
			НовСтрока.НазваниеСтраницыПанели ="ПриложениеКК_" + Формат(Инд, "ЧГ=0"); 
			НовСтрока.Префикс = "KK_" + Формат(Инд, "ЧГ=0"); 
			
		КонецЦикла;
		
		Для  Инд = 1 ПО ТаблицаСтраницыРаздела4.Количество() Цикл
			
			НовСтрока = тбСхемыXML.Добавить();
			НовСтрока.ИмяСхемы = ?(ПроизводительСХ, "J0154619", "J0114619");  
			НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение КИК-ТЦ';uk='Додаток КІК-ТЦ'")+ НСтр("ru=' доп. стр. ';uk= ' дод. стор. '")  + Формат(Инд, "ЧГ=0");
			НовСтрока.НазваниеСтраницыПанели ="ПриложениеКТЦ_" + Формат(Инд, "ЧГ=0"); 
			НовСтрока.Префикс = "KT_" + Формат(Инд, "ЧГ=0"); 
			
		КонецЦикла;
		
		Для  Инд = 1 ПО ТаблицаСтраницыРаздела5.Количество() Цикл
			
			НовСтрока = тбСхемыXML.Добавить();
			НовСтрока.ИмяСхемы = ?(ПроизводительСХ, "J0154719", "J0114719");  
			НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение КИК-ЦП';uk='Додаток КІК-ЦП'")+ НСтр("ru=' доп. стр. ';uk= ' дод. стор. '")  + Формат(Инд, "ЧГ=0");
			НовСтрока.НазваниеСтраницыПанели ="ПриложениеКЦП_" + Формат(Инд, "ЧГ=0"); 
			НовСтрока.Префикс = "KCP_" + Формат(Инд, "ЧГ=0"); 
			
		КонецЦикла;
	Иначе
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "F0100719";
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Декларация о прибыли';uk='Декларація про прибуток'");
		НовСтрока.НазваниеСтраницыПанели ="Декларация";
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "F0171819";
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение PІ';uk='Додаток РI'");
		НовСтрока.НазваниеСтраницыПанели ="ПриложениеРИ";
		НовСтрока.Префикс = "RI";
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "F0170319";
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение ЦП';uk='Додаток ЦП'");
		НовСтрока.НазваниеСтраницыПанели ="ПриложениеЦП";
		НовСтрока.Префикс = "CP";
		
		НовСтрока = тбСхемыXML.Добавить(); 
		НовСтрока.ИмяСхемы = "F0172819";
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение ТЦ';uk='Додаток ТЦ'");
		НовСтрока.НазваниеСтраницыПанели ="ПриложениеТЦ";
		НовСтрока.Префикс = "TC";
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "F0170619";
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение АМ';uk='Додаток АМ'");
		НовСтрока.НазваниеСтраницыПанели ="ПриложениеАМ";
		НовСтрока.Префикс = "AM";
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "F0171319";
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение ПЗ';uk='Додаток ПЗ'");
		НовСтрока.НазваниеСтраницыПанели ="ПриложениеПЗ";
		НовСтрока.Префикс = "PZ";
		
		НовСтрока = тбСхемыXML.Добавить(); 
		НовСтрока.ИмяСхемы ="F0171419";
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение ЗП';uk='Додаток ЗП'");
		НовСтрока.НазваниеСтраницыПанели ="ПриложениеЗП";
		НовСтрока.Префикс = "ZP";
		
		Для  Инд = 1 ПО ТаблицаСтраницыРаздела1.Количество() Цикл
			
			НовСтрока = тбСхемыXML.Добавить();
			НовСтрока.ИмяСхемы = "F0171519";
			НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение ПН';uk='Додаток ПН'")+ НСтр("ru=' доп. стр. ';uk= ' дод. стор. '")  + Формат(Инд, "ЧГ=0");
			НовСтрока.НазваниеСтраницыПанели ="ПриложениеПН_" + Формат(Инд, "ЧГ=0"); 
			НовСтрока.Префикс = "PN_" + Формат(Инд, "ЧГ=0"); 
			
		КонецЦикла;
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "F0171619";
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение АВ';uk='Додаток АВ'");
		НовСтрока.НазваниеСтраницыПанели ="ПриложениеАВ";
		НовСтрока.Префикс = "AV";
		
		Если НЕ ЗначениеЗаполнено(ПолучитьПоказательНаСервере("HZU", ЭтаФорма, "Декларация")) Тогда
			НовСтрока = тбСхемыXML.Добавить();
			НовСтрока.ИмяСхемы = "F0171719";
			НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение ВП';uk='Додаток ВП'");
			НовСтрока.НазваниеСтраницыПанели ="ПриложениеВП";
			НовСтрока.Префикс = "VP";
		КонецЕсли;
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "F0172019";
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение ПП';uk='Додаток ПП'");
		НовСтрока.НазваниеСтраницыПанели ="ПриложениеПП";
		НовСтрока.Префикс = "PP";
		
		Для  Инд = 1 ПО ТаблицаСтраницыРаздела2.Количество() Цикл
			
			НовСтрока = тбСхемыXML.Добавить();
			НовСтрока.ИмяСхемы = "F0174419";
			НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение КИК';uk='Додаток КІК'")+ НСтр("ru=' доп. стр. ';uk= ' дод. стор. '")  + Формат(Инд, "ЧГ=0");
			НовСтрока.НазваниеСтраницыПанели ="ПриложениеКИК_" + Формат(Инд, "ЧГ=0"); 
			НовСтрока.Префикс = "KIK_" + Формат(Инд, "ЧГ=0"); 
			
		КонецЦикла;
		
		Для  Инд = 1 ПО ТаблицаСтраницыРаздела3.Количество() Цикл
			
			НовСтрока = тбСхемыXML.Добавить();
			НовСтрока.ИмяСхемы = "F0174519";
			НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение КИК-К';uk='Додаток КІК-К'")+ НСтр("ru=' доп. стр. ';uk= ' дод. стор. '")  + Формат(Инд, "ЧГ=0");
			НовСтрока.НазваниеСтраницыПанели ="ПриложениеКК_" + Формат(Инд, "ЧГ=0"); 
			НовСтрока.Префикс = "KK_" + Формат(Инд, "ЧГ=0"); 
			
		КонецЦикла;
		
		Для  Инд = 1 ПО ТаблицаСтраницыРаздела4.Количество() Цикл
			
			НовСтрока = тбСхемыXML.Добавить();
			НовСтрока.ИмяСхемы = "F0174619";
			НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение КИК-ТЦ';uk='Додаток КІК-ТЦ'")+ НСтр("ru=' доп. стр. ';uk= ' дод. стор. '")  + Формат(Инд, "ЧГ=0");
			НовСтрока.НазваниеСтраницыПанели ="ПриложениеКТЦ_" + Формат(Инд, "ЧГ=0"); 
			НовСтрока.Префикс = "KT_" + Формат(Инд, "ЧГ=0"); 
			
		КонецЦикла;
		
		Для  Инд = 1 ПО ТаблицаСтраницыРаздела5.Количество() Цикл
			
			НовСтрока = тбСхемыXML.Добавить();
			НовСтрока.ИмяСхемы = "F0174719";
			НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение КИК-ЦП';uk='Додаток КІК-ЦП'")+ НСтр("ru=' доп. стр. ';uk= ' дод. стор. '")  + Формат(Инд, "ЧГ=0");
			НовСтрока.НазваниеСтраницыПанели ="ПриложениеКЦП_" + Формат(Инд, "ЧГ=0"); 
			НовСтрока.Префикс = "KCP_" + Формат(Инд, "ЧГ=0"); 
			
		КонецЦикла;
	КонецЕсли;	
	
	тбСхемыXML.ЗаполнитьЗначения(Перечисления.ВерсииФорматовВыгрузки.ГНСУ_XML, "Тип");
	
	Возврат  тбСхемыXML
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПараметровДляЗвит1С(ОписаниеОповещения) Экспорт
	
	глКомпонентаЗвит1С.Bring1CToFront();
	СтруктураРеквизитовФормы.Вставить("ОповещениеНастройкиПараметровЗвит1С", ОписаниеОповещения);
	
	СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина;
	
	Если глМенеджерЗвит1С.ФлагОтладки Тогда

		ФормаСохраненныхРеглОтчетов = ПолучитьФорму("Документ.РегламентированныйОтчет.Форма.ФормаВыбораТестЗвит1С",,ЭтаФорма);
		
		ФормаСохраненныхРеглОтчетов.ОписаниеОповещенияОЗакрытии =  Новый ОписаниеОповещения("РежимТестированияЗвит1СЗавершениеВыбораОтчета", ЭтотОбъект);
		ФормаСохраненныхРеглОтчетов.Параметры.РежимВыбора        = Истина; 
		ФормаСохраненныхРеглОтчетов.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаСохраненныхРеглОтчетов.Открыть();
		
	Иначе
		
		ОткрытьФормуПараметров(Неопределено);	
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РежимТестированияЗвит1СЗавершениеВыбораОтчета(Результат, ДопПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ТекОповещение = СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С;
		СтруктураРеквизитовФормы.Удалить("ОповещениеНастройкиПараметровЗвит1С");
			
		СтруктураРеквизитовФормы.мСохраненныйДок = Результат;	
		ВосстановитьСохраненныеДанные();	
			
		СтруктураРеквизитовФормы.Вставить("ОповещениеНастройкиПараметровЗвит1С", ТекОповещение);
		
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
		
	Иначе
		
		ОткрытьФормуПараметров(Неопределено);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПараметровЗавершение(ПараметрыВозврата, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.Свойство("ОповещениеНастройкиПараметровЗвит1С") Тогда
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьДанныеДляЗвит1С(ОтчетЗвит1С = Неопределено) Экспорт 
	
	мСписокСообщенийЗвит1С 	= Новый СписокЗначений;
	
	// Настроим модуль объекта на получение данных для Звита
	СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина;
	Если СтруктураРеквизитовФормы.Свойство("ОповещениеНастройкиПараметровЗвит1С") Тогда
		СтруктураРеквизитовФормы.Удалить("ОповещениеНастройкиПараметровЗвит1С")	
	КонецЕсли;
	
	Модифицированность = Ложь;
	Комментарий = "Звіт створений для збереження параметрів заповнення ""FREDO Звіт""";
	мСохраненныйДок = Неопределено;
	Если СтруктураРеквизитовФормы.Свойство("ХранилищеПараметровДляЗвит1С", мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = мСохраненныйДок;
	КонецЕсли;
	Сохранить(Ложь, "Декларация");
	
	// Заполнение зависит от формы реестра
	Если НЕ глМенеджерЗвит1С.ФлагОтладки Тогда
		ПараметрыЗаполненияЗвит1С = Неопределено;
		ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С);
		ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);
	КонецЕсли;
	
	Результат = ПолучитьДанныеФормыНаСервере();
	
	Для каждого Сообщение Из мСписокСообщенийЗвит1С Цикл
		глМенеджерЗвит1С.ПредупреждениеЗвит1С(Сообщение.Представление, ,Сообщение.Значение);
	КонецЦикла;
	
	мСписокСообщенийЗвит1С.Очистить();
	
	Возврат Результат;
	
КонецФункции


&НаСервере
Функция СоздатьОписанияТипов(НазваниеТипа, Длина,Точность="")
	
	мас = Новый Массив;
	мас.Добавить(Тип(НазваниеТипа));
	Если Точность = "" Тогда
		КвалифСтроки = Новый КвалификаторыСтроки(Длина,ДопустимаяДлина.Переменная); 
	Иначе
		КвалифЧисла = Новый КвалификаторыЧисла(Длина,Точность,ДопустимыйЗнак.Неотрицательный); 
	КонецЕсли;	   
	Возврат Новый ОписаниеТипов(мас,КвалифСтроки,КвалифЧисла);
  
КонецФункции	

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя)
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПараметров(Команда)

	мПараметрыФормы = Новый Структура;
	мПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", 	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	мПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета", 	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	мПараметрыФормы.Вставить("ОтчетЗаДваПериода", 				СтруктураРеквизитовФормы.ОтчетЗаДваПериода);
	мПараметрыФормы.Вставить("ВидФинОтчетности", 				СтруктураРеквизитовФормы.ВидФинОтчетности);
	мПараметрыФормы.Вставить("ОблагаемаяПрибыльПрошлогоГода", 	СтруктураРеквизитовФормы.ОблагаемаяПрибыльПрошлогоГода);
	мПараметрыФормы.Вставить("РИАмортизацияБУБиблФондовМНМА", 	СтруктураРеквизитовФормы.РИАмортизацияБУБиблФондовМНМА);
	мПараметрыФормы.Вставить("ЛимитСуммыДоходаНалоговыеРазницы", 	СтруктураРеквизитовФормы.ЛимитСуммыДоходаНалоговыеРазницы);
	мПараметрыФормы.Вставить("ДляФредоТипПериода", 				СтруктураРеквизитовФормы.ДляФредоТипПериода);
	
	мПараметрыФормы.Вставить("СписаниеНеБезнадежнойЗадолженности_Статьи", 	СтруктураРеквизитовФормы.СписаниеНеБезнадежнойЗадолженности_Статьи);
	мПараметрыФормы.Вставить("Штрафы_Статьи", 								СтруктураРеквизитовФормы.Штрафы_Статьи);
	мПараметрыФормы.Вставить("ПередачаНеприбыльным_СтатьиЗатрат", 			СтруктураРеквизитовФормы.ПередачаНеприбыльным_СтатьиЗатрат);
	мПараметрыФормы.Вставить("Контрагенты_Неприбыльные", 					СтруктураРеквизитовФормы.Контрагенты_Неприбыльные);
	мПараметрыФормы.Вставить("Контрагенты_Оффшоры", 						СтруктураРеквизитовФормы.Контрагенты_Оффшоры);
	мПараметрыФормы.Вставить("Контрагенты_ОффшорыОргформа", 						СтруктураРеквизитовФормы.Контрагенты_ОффшорыОргформа);
	
	мПараметрыФормы.Вставить("Организация", 			СтруктураРеквизитовФормы.Организация);
	
	мПараметрыФормы.Вставить("ПолучениеДанныхДляЗвит1С", СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С);
	
	
	ИмяФормыПараметровНастройки = СтрЗаменить(ЭтаФорма.ИмяФормы, "ФормаОтчета", "ПараметрыОтчета");
	
	ФормаНастройкиОтчета = ПолучитьФорму(ИмяФормыПараметровНастройки, мПараметрыФормы, ЭтаФорма);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуПараметровЗавершение", ЭтотОбъект);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры	

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	ПараметрыОтчета.Вставить("НаимТекущегоРаздела", СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(Сред(Лев(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7), Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ИДИменПоказателей, ПараметрыОтчета);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастраиваемыеПараметрыЗаполнения()
	
	ЗапросДеклПрошл = Новый Запрос ("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	| РегламентированныйОтчет.ДанныеОтчета,
	| РегламентированныйОтчет.Ссылка
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|
	|ГДЕ
	|	НЕ РегламентированныйОтчет.ПометкаУдаления И
	|	РегламентированныйОтчет.Организация = &Организация И
	|	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета И
	|	РегламентированныйОтчет.ДатаОкончания <= &ДатаОкончания
	|УПОРЯДОЧИТЬ ПО ДатаОкончания УБЫВ"
	);
	
	ЗапросДеклПрошл.УстановитьПараметр ("ПометкаУдаления",ЛОЖЬ);
	ЗапросДеклПрошл.УстановитьПараметр ("ДатаОкончания",СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ЗапросДеклПрошл.УстановитьПараметр ("Организация",	СтруктураРеквизитовФормы.Организация);
	ЗапросДеклПрошл.УстановитьПараметр ("ИсточникОтчета","РегламентированныйОтчетДекларацияОПрибыли");						   
	
	Выборка = ЗапросДеклПрошл.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ДанныеОтчета = Выборка.ДанныеОтчета.Получить();

		ТекДанные = Неопределено;
		ДанныеОтчета.Свойство("СписаниеНеБезнадежнойЗадолженности_Статьи", ТекДанные);
		Если НЕ ТекДанные = Неопределено Тогда
			СтруктураРеквизитовФормы.СписаниеНеБезнадежнойЗадолженности_Статьи = ТекДанные.Получить();
		КонецЕсли;
		
		ДанныеОтчета.Свойство("Штрафы_Статьи", ТекДанные);
		Если НЕ ТекДанные = Неопределено Тогда
			СтруктураРеквизитовФормы.Штрафы_Статьи = ТекДанные.Получить();
		КонецЕсли;
		
		ТекДанные = Неопределено;
		ДанныеОтчета.Свойство("ПередачаНеприбыльным_СтатьиЗатрат", ТекДанные);
		Если НЕ ТекДанные = Неопределено Тогда
			СтруктураРеквизитовФормы.ПередачаНеприбыльным_СтатьиЗатрат = ТекДанные.Получить();
		КонецЕсли;
		
		ТекДанные = Неопределено;
		ДанныеОтчета.Свойство("Контрагенты_Неприбыльные", ТекДанные);
		Если НЕ ТекДанные = Неопределено Тогда
			СтруктураРеквизитовФормы.Контрагенты_Неприбыльные = ТекДанные.Получить();
		КонецЕсли;
		
		ТекДанные = Неопределено;
		ДанныеОтчета.Свойство("Контрагенты_Оффшоры", ТекДанные);
		Если НЕ ТекДанные = Неопределено Тогда
			СтруктураРеквизитовФормы.Контрагенты_Оффшоры = ТекДанные.Получить();
		КонецЕсли;
		ТекДанные = Неопределено;
		ДанныеОтчета.Свойство("Контрагенты_ОффшорыОргформа", ТекДанные);
		Если НЕ ТекДанные = Неопределено Тогда
			СтруктураРеквизитовФормы.Контрагенты_ОффшорыОргформа = ТекДанные.Получить();
		КонецЕсли;
		
		ДанныеОтчета.Свойство("ВидФинОтчетности", СтруктураРеквизитовФормы.ВидФинОтчетности);
		Если  НЕ СтруктураРеквизитовФормы.ВидФинОтчетности = 0
			И НЕ СтруктураРеквизитовФормы.ВидФинОтчетности = 1
			И НЕ СтруктураРеквизитовФормы.ВидФинОтчетности = 2 Тогда
			СтруктураРеквизитовФормы.ВидФинОтчетности = 0;
		КонецЕсли;
		
		ДанныеОтчета.Свойство("ОтчетЗаДваПериода", СтруктураРеквизитовФормы.ОтчетЗаДваПериода);
		Если  СтруктураРеквизитовФормы.ОтчетЗаДваПериода = Неопределено Тогда
			СтруктураРеквизитовФормы.ОтчетЗаДваПериода = Ложь;
		КонецЕсли;
		
		ДанныеОтчета.Свойство("РИАмортизацияБУБиблФондовМНМА", СтруктураРеквизитовФормы.РИАмортизацияБУБиблФондовМНМА);
		Если  СтруктураРеквизитовФормы.РИАмортизацияБУБиблФондовМНМА = Неопределено Тогда
			СтруктураРеквизитовФормы.РИАмортизацияБУБиблФондовМНМА = Ложь;
		КонецЕсли;
		ДанныеОтчета.Свойство("ЛимитСуммыДоходаНалоговыеРазницы", СтруктураРеквизитовФормы.ЛимитСуммыДоходаНалоговыеРазницы);
		Если  СтруктураРеквизитовФормы.ЛимитСуммыДоходаНалоговыеРазницы = Неопределено Тогда
			СтруктураРеквизитовФормы.ЛимитСуммыДоходаНалоговыеРазницы = 40000000;
		КонецЕсли;
		ДанныеОтчета.Свойство("ДляФредоТипПериода", СтруктураРеквизитовФормы.ДляФредоТипПериода);
		Если  СтруктураРеквизитовФормы.ДляФредоТипПериода = Неопределено Тогда
			СтруктураРеквизитовФормы.ДляФредоТипПериода = Ложь;
		КонецЕсли;
		
		Если  ДанныеОтчета.Свойство("СозданКакХранилищеПараметровДляЗвит1С") Тогда
			// чтобы не плодить отчеты при повторном заполнении из Фредо
			// будем записывать параметры в один и тот же отчет
			СтруктураРеквизитовФормы.Вставить("ХранилищеПараметровДляЗвит1С", Выборка.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура _ДобавитьСтрокуРасшифровки(Форма, ИмяЯчейки, ИмяПоказателя, ЗнакОперации, ИмяСлагаемого, Сумма, Счет = Неопределено, КорСчет = Неопределено, Сдвиг = Неопределено, ПраваяГраница = Неопределено, ИмяРаздела = Неопределено, НомерЛиста = Неопределено, МнЧ = Неопределено, НомерСтроки = Неопределено, Субконто1 = Неопределено, Субконто2 = Неопределено, Субконто3 = Неопределено)
	
	ИмяСлагаемого = СтрЗаменить(ИмяСлагаемого, "!СНДРС", "!СНДР");
	ИмяСлагаемого = СтрЗаменить(ИмяСлагаемого, "!СКДРС", "!СКДР");
	ИмяСлагаемого = СтрЗаменить(ИмяСлагаемого, "!СНКРС", "!СНКР");
	ИмяСлагаемого = СтрЗаменить(ИмяСлагаемого, "!СККРС", "!СККР");
	
	Если Лев(ИмяСлагаемого, 1) = "#" Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Организация", Форма.СтруктураРеквизитовФормы.Организация);
		
	ИначеЕсли ИмяСлагаемого = "!АС" Тогда
		
	    ДополнительныеПараметры = НастройкиАнализаСубконто(ОбщиеПараметрыРасшифровки, Счет, Субконто1, Субконто2, Субконто3);
		
	ИначеЕсли ИмяСлагаемого = "!ОБ"
		ИЛИ ИмяСлагаемого = "!КО"
		ИЛИ ИмяСлагаемого = "!ДО" Тогда
	    ДополнительныеПараметры = НастройкиАнализаСчета(ОбщиеПараметрыРасшифровки, Счет, КорСчет);
	Иначе	
		ДополнительныеПараметры = НастройкиОСВПоСчету(ОбщиеПараметрыРасшифровки, Счет);
	КонецЕсли;
	
	
	Если    Лев(ИмяСлагаемого, 5) = "!СНДР" 
		ИЛИ Лев(ИмяСлагаемого, 5) = "!СКДР" 
		ИЛИ Лев(ИмяСлагаемого, 5) = "!СНКР" 
		ИЛИ Лев(ИмяСлагаемого, 5) = "!СККР" Тогда
	
		ДополнительныеПараметры.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("РазвернутоеСальдо", Истина);	
		
		
		ТабличнаяЧастьГруппировка = Новый Массив;
		СчВидовСубконто = 0;
		Для каждого СтрокаВидовСубконто Из Счет.ВидыСубконто Цикл
			
			СчВидовСубконто = СчВидовСубконто + 1;
			ОписаниеГруппировки = Новый Структура;
			ОписаниеГруппировки.Вставить("Использование", Истина);
			ОписаниеГруппировки.Вставить("Поле", "Субконто" + СчВидовСубконто);
			ОписаниеГруппировки.Вставить("Представление", СтрокаВидовСубконто.ВидСубконто);
			ОписаниеГруппировки.Вставить("ТипГруппировки", 0);
			ТабличнаяЧастьГруппировка.Добавить(ОписаниеГруппировки);
		
		КонецЦикла;
		
		ДополнительныеПараметры.Отчет.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Группировка", ТабличнаяЧастьГруппировка);
		
	КонецЕсли;
	
	ПредставлениеСчета = "";
	Если ТипЗнч(Счет) = Тип("СписокЗначений") Тогда
		Для каждого СчетИзСписка Из Счет Цикл
			ПредставлениеСчета = ПредставлениеСчета + ?(НЕ ПустаяСтрока(ПредставлениеСчета),"; ", "") + СчетИзСписка.Значение.Код;
		КонецЦикла; 
	ИначеЕсли ЗначениеЗаполнено(Счет) Тогда 
		ПредставлениеСчета = Счет.Код;
	КонецЕсли; 
	Представление = ИмяСлагаемого + " " + ?(НЕ ПустаяСтрока(ПредставлениеСчета)," " + ПредставлениеСчета, "");
	
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяЯчейки, ИмяПоказателя, ЗнакОперации, Представление, Сумма, ИмяРаздела, ДополнительныеПараметры);
	

КонецПроцедуры

&НаСервере
Функция НастройкиОСВПоСчету(ОбщиеНастройки, Счет, ОтборПоАналитике = Неопределено) Экспорт
	
	Если ОбщиеНастройки.Свойство("ПараметрыРасшифровки") Тогда
		Организация   = ОбщиеНастройки.ПараметрыРасшифровки.Организация;
		НачалоПериода = ОбщиеНастройки.ПараметрыРасшифровки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.ПараметрыРасшифровки.КонецПериода;
	Иначе
		Организация   = ОбщиеНастройки.Организация;
		НачалоПериода = ОбщиеНастройки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.КонецПериода;
	КонецЕсли;
	
	НастройкиРасшифровки = Новый Структура;
	НастройкиРасшифровки.Вставить("Организация", Организация);
	
	НастройкиРасшифровки.Вставить("Отчет", Новый Структура);
	НастройкиРасшифровки.Отчет.Вставить("ИмяОтчета", "Отчет.ОборотноСальдоваяВедомостьПоСчету.Форма.ФормаОтчета");
	
	НастройкиРасшифровки.Отчет.Вставить("ПараметрыФормы", Новый Структура);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация",   Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецПериода);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Счет", Счет);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоСубсчетам", Истина);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательБУ",            Истина);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВалютнаяСумма", Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКоличество",    Ложь);
	
	Если ОтборПоАналитике <> Неопределено Тогда
		Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
		
		Для Каждого ЭлементОтбора Из ОтборПоАналитике Цикл
			ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ);
			Если ТипЗнч(ЭлементОтбора.Значение) = Тип("Структура") Тогда
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ЭлементОтбора.Значение.ВидСравненияКомпоновкиДанных, ЭлементОтбора.Значение.Значение);
			Иначе
				ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияКомпоновкиДанных.Равно, ЭлементОтбора.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НастройкиРасшифровки.Отчет.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

&НаСервере
Функция НастройкиАнализаСчета(ОбщиеНастройки, Счет, КорСчет, ОтборПоАналитике = Неопределено)
	
	Если ОбщиеНастройки.Свойство("ПараметрыРасшифровки") Тогда
		Организация   = ОбщиеНастройки.ПараметрыРасшифровки.Организация;
		НачалоПериода = ОбщиеНастройки.ПараметрыРасшифровки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.ПараметрыРасшифровки.КонецПериода;
	Иначе
		Организация   = ОбщиеНастройки.Организация;
		НачалоПериода = ОбщиеНастройки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.КонецПериода;
	КонецЕсли;
	
	НастройкиРасшифровки = Новый Структура;
	НастройкиРасшифровки.Вставить("Организация", Организация);
	
	НастройкиРасшифровки.Вставить("Отчет", Новый Структура);
	НастройкиРасшифровки.Отчет.Вставить("ИмяОтчета", "Отчет.АнализСчета.Форма.ФормаОтчета");
	
	НастройкиРасшифровки.Отчет.Вставить("ПараметрыФормы", Новый Структура);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация",   Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецПериода);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Счет", Счет);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоСубсчетам", НЕ ЗначениеЗаполнено(КорСчет));
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательБУ",            Истина);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательНУ",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательРазница",       Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВалютнаяСумма", Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКоличество",    Ложь);
	
	Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Если ЗначениеЗаполнено(КорСчет) Тогда
		ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных("КорСчет");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияКомпоновкиДанных.ВИерархии, КорСчет);
	КонецЕсли;
	
	Если ОтборПоАналитике <> Неопределено Тогда
		Для Каждого ЭлементОтбора Из ОтборПоАналитике Цикл
			ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ЭлементОтбора.Ключ);
			ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияКомпоновкиДанных.Равно, ЭлементОтбора.Значение);
		КонецЦикла;
	КонецЕсли;
	
	НастройкиРасшифровки.Отчет.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

&НаСервере
Функция ОпределитьВидСубконто(Знач ЗначениеСубконто, Счет, НомерСубконто)
	
	Если  ТипЗнч(ЗначениеСубконто) = Тип("СписокЗначений")
		И ЗначениеСубконто.Количество() > 0 Тогда
		
		ТипыСовпадают = Истина;
		Для каждого ТекЭлемент Из ЗначениеСубконто Цикл
			Если НЕ ТипЗнч(ТекЭлемент.Значение) = ТипЗнч(ЗначениеСубконто[0].Значение) Тогда
				ТипыСовпадают = Ложь;	
				Прервать;				
			КонецЕсли;	
		КонецЦикла;
		
		Если ТипыСовпадают Тогда
			ЗначениеСубконто = ЗначениеСубконто[0].Значение;
		КонецЕсли;
	
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БП" ИЛИ РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БСП" Тогда
		Если ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.СтатьиНеоперационныхРасходов") Тогда
			Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНеоперационныхРасходов;
			
		ИначеЕсли ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
			
		ИначеЕсли ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.СтатьиДоходов") Тогда
			Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов;
			
		ИначеЕсли ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства;
		КонецЕсли;	
		
	Иначе	
		Если ТипЗнч(ЗначениеСубконто) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
			Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат;
			
		ИначеЕсли ТипЗнч(ЗначениеСубконто) = Тип("ПланВидовХарактеристикСсылка.СтатьиДоходов") Тогда
			Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДоходов;
			
		ИначеЕсли ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.ОбъектыЭксплуатации") Тогда
			Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства;
		КонецЕсли;	
	КонецЕсли;	
	
		
	Если ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.СтатьиНалоговыхДеклараций") Тогда
		Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиНалоговыхДеклараций;
		
	ИначеЕсли ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда
		Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы;
		
	ИначеЕсли ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
		
	ИначеЕсли ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
		
	Иначе	
		Если ЗначениеЗаполнено(Счет) Тогда
			Если ТипЗнч(Счет) = Тип("СписокЗначений") Тогда
				Возврат Счет[0].Значение.ВидыСубконто[НомерСубконто - 1].ВидСубконто;		
			Иначе
				Возврат Счет.ВидыСубконто[НомерСубконто - 1].ВидСубконто;
			КонецЕсли;
		Иначе		
			Возврат ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка();	
		КонецЕсли;
	КонецЕсли;

КонецФункции // ()

&НаСервере
Функция НастройкиАнализаСубконто(ОбщиеНастройки, Счет, Субконто1 = Неопределено, Субконто2 = Неопределено, Субконто3 = Неопределено)
	
	Если ОбщиеНастройки.Свойство("ПараметрыРасшифровки") Тогда
		Организация   = ОбщиеНастройки.ПараметрыРасшифровки.Организация;
		НачалоПериода = ОбщиеНастройки.ПараметрыРасшифровки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.ПараметрыРасшифровки.КонецПериода;
	Иначе
		Организация   = ОбщиеНастройки.Организация;
		НачалоПериода = ОбщиеНастройки.НачалоПериода;
		КонецПериода  = ОбщиеНастройки.КонецПериода;
	КонецЕсли;
	
	НастройкиРасшифровки = Новый Структура;
	НастройкиРасшифровки.Вставить("Организация", Организация);
	
	НастройкиРасшифровки.Вставить("Отчет", Новый Структура);
	НастройкиРасшифровки.Отчет.Вставить("ИмяОтчета", "Отчет.АнализСубконто.Форма.ФормаОтчета");
	
	НастройкиРасшифровки.Отчет.Вставить("ПараметрыФормы", Новый Структура);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	НастройкиРасшифровки.Отчет.ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация",   Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода",  КонецПериода);
	
	Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Если ЗначениеЗаполнено(Счет) Тогда
		ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных("Счет");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияКомпоновкиДанных.ВИерархии, Счет);
	КонецЕсли;

	СписокВидовСубконто = Новый СписокЗначений;
	Если Субконто1 <> Неопределено Тогда
		ВидСубконто = ОпределитьВидСубконто(Субконто1,Счет,1);
		СписокВидовСубконто.Добавить(ВидСубконто);
		ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных("Субконто1");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияКомпоновкиДанных.ВСписке, Субконто1);
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ВидСубконто", ВидСубконто);
		СтруктураРасшифровки.Вставить("ЗначениеСубконто", Субконто1);
		НастройкиРасшифровки.Вставить("Субконто1", СтруктураРасшифровки);
	КонецЕсли;
	Если Субконто2 <> Неопределено Тогда
		ВидСубконто = ОпределитьВидСубконто(Субконто2,Счет,2);
		СписокВидовСубконто.Добавить(ВидСубконто);
		ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных("Субконто2");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияКомпоновкиДанных.ВСписке, Субконто2);
		НастройкиРасшифровки.Вставить("Субконто2", Субконто2);
	КонецЕсли;
	Если Субконто3 <> Неопределено Тогда
		ВидСубконто = ОпределитьВидСубконто(Субконто3,Счет,3);
		СписокВидовСубконто.Добавить(ВидСубконто);
		ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных("Субконто3");
		ДобавитьЗначениеВОтбор(Отбор, ПолеКомпоновкиДанных, ВидСравненияКомпоновкиДанных.ВСписке, Субконто3);
		НастройкиРасшифровки.Вставить("Субконто3", Субконто3);
	КонецЕсли;
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокВидовСубконто", СписокВидовСубконто);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоСубсчетам", Истина);
	
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательБУ",            Истина);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательНУ",            Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательРазница",       Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательВалютнаяСумма", Ложь);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПоказательКоличество",    Ложь);
	
		
	НастройкиРасшифровки.Отчет.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	Возврат НастройкиРасшифровки;
	
КонецФункции

&НаСервере
Процедура ДобавитьЗначениеВОтбор(Отбор, ЛевоеЗначение, ВидСравнения, ПравоеЗначение)
	
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение    = ЛевоеЗначение;
	ЭлементОтбора.ВидСравнения     = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиТекстыЗаголовковВПриложениеПЗ(Форма, Раздел)
	
	ТабличныйДокумент = Форма.ТабличныйДокумент;
	
	Если Раздел = 1 Тогда
		Для НомТекущейСтроки = 1 ПО Форма.PZT1R.Количество() Цикл
			
			СимвСтр = БукваУкраинскогоАлфавитаПоНомеру(НомТекущейСтроки);
			
			НомСтр= Формат(НомТекущейСтроки,"ЧГ=;");
			ТабличныйДокумент.Области["PZT1RXXXXP1_" + НомСтр].Значение = СтрЗаменить("на підставі ""#""                     (рядок #1 + рядок #2 - рядок #3)", "#", СимвСтр);
			
			ТабличныйДокумент.Области["PZT1RXXXXK1_" + НомСтр].Значение = "05."+НомТекущейСтроки;
			ТабличныйДокумент.Области["PZT1RXXXXK2_" + НомСтр].Значение = СтрЗаменить("#1", "#", СимвСтр);
			ТабличныйДокумент.Области["PZT1RXXXXK3_" + НомСтр].Значение = СтрЗаменить("#2", "#", СимвСтр);
			ТабличныйДокумент.Области["PZT1RXXXXK4_" + НомСтр].Значение = СтрЗаменить("#3", "#", СимвСтр);
		
		КонецЦикла;	
	Иначе	
		Для НомТекущейСтроки = 1 ПО Форма.PZT2R.Количество() Цикл
			
			СимвСтр = БукваУкраинскогоАлфавитаПоНомеру(НомТекущейСтроки);
			
			НомСтр= Формат(НомТекущейСтроки,"ЧГ=;");
			                                                                     
			ТабличныйДокумент.Области["PZT2RXXXXОснование_" + НомСтр].Значение = """" + СимвСтр + """";
		
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция БукваУкраинскогоАлфавитаПоНомеру(НомерБуквы)

	Возврат Сред("АБВГҐДЕЄЖЗИІЇЙКЛМНОПРСТУФХЦЧШЩЬЮЯ",НомерБуквы,1);

КонецФункции // ()