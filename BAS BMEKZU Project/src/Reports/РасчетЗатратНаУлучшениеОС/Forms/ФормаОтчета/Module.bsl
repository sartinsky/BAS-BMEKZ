////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Ссылка") Тогда
		Отчет.ДокументИсключения 	= Параметры.Ссылка;
		Отчет.ДатаСведений 			= Параметры.Ссылка.Дата;
		Отчет.Организация  			= Параметры.Ссылка.Организация
	КонецЕсли;	
	
	Отчет.ВыводитьРасшифровкуСуммы = Истина;
	
	Если НЕ ЗначениеЗаполнено(Отчет.ДатаСведений) Тогда
		Отчет.ДатаСведений   = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Отчет.Организация) Тогда
		Отчет.Организация   = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Период = Формат(Год(Отчет.ДатаСведений), "ЧГ=");
	
	ВывестиОтчет();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Сформировать(Команда)
	
	ВывестиОтчет();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ВывестиОтчет()
	
	Документ = Новый ТабличныйДокумент;
	
	Макет = РеквизитФормыВЗначение("Отчет").ПолучитьМакет("Макет");
	
	НаДату    = ?(НЕ ЗначениеЗаполнено(Отчет.ДатаСведений), ТекущаяДата(), Отчет.ДатаСведений);
	НаДату    = КонецДня(НаДату);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.ДатаСведений = Формат(Год(НаДату),"ЧГ=0");
	
	Документ.Вывести(ОбластьМакета);
	
	ЗапросСтоимостьБалансовая = Новый Запрос;
	
	Если Год(НаДату) <= 2011 Тогда
		ТекстСообщения = НСтр("ru='Данные за период до 2011 года могут быть некорректными.';uk='Дані за період до 2011 року можуть бути некоректними.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , );
	КонецЕсли;	
		
	УсловиеОрганизация = ?(ЗначениеЗаполнено(Отчет.Организация), " И Организация = &Организация", "");
	УсловиеОрганизацияБезИ = ?(ЗначениеЗаполнено(Отчет.Организация), " Организация = &Организация", "");
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ХозрасчетныйОстатки.СуммаНУОстаток - ЕСТЬNULL(АмортизацияОстатки.СуммаНУОстатокКт, 0)) КАК СтоимостьНачПериода
	|ИЗ
 	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, Счет В ИЕРАРХИИ (&Счет10_11), &СубконтоОС, НалоговоеНазначение <> &НеоблНехоз " + УсловиеОрганизация + ") КАК ХозрасчетныйОстатки
 	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, Счет В ИЕРАРХИИ (&Счет13), , НалоговоеНазначение <> &НеоблНехоз " + УсловиеОрганизация + ") КАК АмортизацияОстатки
	|		ПО ХозрасчетныйОстатки.Субконто1 = АмортизацияОстатки.Субконто1 И ХозрасчетныйОстатки.НалоговоеНазначение = АмортизацияОстатки.НалоговоеНазначение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(&НачалоПериода, " + УсловиеОрганизацияБезИ + ") КАК СведенияОбОС
	|		ПО (СведенияОбОС.ОсновноеСредство = ХозрасчетныйОстатки.Субконто1)
	|ГДЕ 
	|	(НЕ ЕстьNULL(СведенияОбОС.НалоговаяГруппаОС, 0) В (&НеАмортизируемыеГруппыОС))
	|";
	
	ЗапросСтоимостьБалансовая.Текст = ТекстЗапроса;
	
	НачалоПериода = НачалоГода(НаДату);
	
	СписокСчет10_11 = Новый СписокЗначений;
	СписокСчет10_11.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	СписокСчет10_11.Добавить(ПланыСчетов.Хозрасчетный.ДругиеНеоборотныеМатериальныеАктивыГруппа);
	ЗапросСтоимостьБалансовая.УстановитьПараметр("Счет10_11",	СписокСчет10_11);
	ЗапросСтоимостьБалансовая.УстановитьПараметр("Счет13",		ПланыСчетов.Хозрасчетный.ИзносАмортизацияНеоборотныхАктивов);
	ЗапросСтоимостьБалансовая.УстановитьПараметр("НеоблНехоз", 	Справочники.НалоговыеНазначенияАктивовИЗатрат.НДС_НеоблагаемаяНеХозДеятельность);
	
	ЗапросСтоимостьБалансовая.УстановитьПараметр("СубконтоОС", 	ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	НеАмортизируемыеГруппыОС = Новый Массив();
	НеАмортизируемыеГруппыОС.Добавить(Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа1);
	НеАмортизируемыеГруппыОС.Добавить(Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа13);
	НеАмортизируемыеГруппыОС.Добавить(Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа10);
	НеАмортизируемыеГруппыОС.Добавить(Справочники.НалоговыеГруппыОсновныхСредств.ОСГруппа11);
 	НеАмортизируемыеГруппыОС.Добавить(Справочники.НалоговыеГруппыОсновныхСредств.ОСВременнаяНалоговаяРазница);
	
	НеАмортизируемыеГруппыОС.Добавить();
	ЗапросСтоимостьБалансовая.УстановитьПараметр("НеАмортизируемыеГруппыОС", НеАмортизируемыеГруппыОС);
		
	ЗапросСтоимостьБалансовая.УстановитьПараметр("Организация", Отчет.Организация);
	
	ЗапросСтоимостьБалансовая.УстановитьПараметр("НачалоПериода", НачалоПериода);

	ОбластьМакета = Макет.ПолучитьОбласть("СуммыЗатрат");
	
	СтоимостьБалансоваяВыборка = ЗапросСтоимостьБалансовая.Выполнить().Выбрать();
	
	Если СтоимостьБалансоваяВыборка.Следующий() Тогда
		
		СтоимостьНачПериода = ?(СтоимостьБалансоваяВыборка.СтоимостьНачПериода = Null, 0, СтоимостьБалансоваяВыборка.СтоимостьНачПериода);
		ОбластьМакета.Параметры.СтоимостьНачПериода = СтоимостьНачПериода;
		
		СтруктураПараметров = Новый Структура("ГодовойПроцентОтнесенияНаРасходыСуммУлучшенияОС");
		СрезПоследнихПараметрыНалоговогоУчета = РегистрыСведений.ПараметрыНалоговогоУчета.СрезПоследних(НачалоПериода,СтруктураПараметров);
		НормаЛимита = ?(СрезПоследнихПараметрыНалоговогоУчета.Количество() = 0, 0, СрезПоследнихПараметрыНалоговогоУчета[0].ГодовойПроцентОтнесенияНаРасходыСуммУлучшенияОС);
		
		СуммаЛимита = СтоимостьНачПериода * НормаЛимита / 100;
		
		СуммаЗатратНаРемонт1кв2011 = 0;
		
		СуммаЛимита = Макс(0, СуммаЛимита);	
		ОбластьМакета.Параметры.СуммаЛимита = СуммаЛимита;
		
	Иначе
		
		ОбластьМакета.Параметры.СтоимостьНачПериода = 0;
		ОбластьМакета.Параметры.СуммаЛимита = 0;
		
	КонецЕсли;
	
	Выборка = ЗаполнитьНачальныеНастройки();
	Если Выборка.Следующий() Тогда
		ОбластьМакета.Параметры.СуммаОтнесенная = Выборка.Сумма;
		ОбластьМакета.Параметры.СуммаОставшаяся = ОбластьМакета.Параметры.СуммаЛимита - Выборка.Сумма;
	Иначе 
		ОбластьМакета.Параметры.СуммаОтнесенная = 0;
		ОбластьМакета.Параметры.СуммаОставшаяся = ОбластьМакета.Параметры.СуммаЛимита;
	КонецЕсли;
	
	Документ.Вывести(ОбластьМакета);
	
	Если Отчет.ВыводитьРасшифровкуСуммы Тогда
		ОбластьРасшифровкаЗаголовок = Макет.ПолучитьОбласть("РасшифровкаЗаголовок");
		ВыводитьРасшифровкаЗаголовок = Истина;
	Иначе
		Возврат;
	КонецЕсли;
			
	Пока Выборка.Следующий() Цикл
		Если ВыводитьРасшифровкаЗаголовок Тогда
			Документ.Вывести(ОбластьРасшифровкаЗаголовок);
			ВыводитьРасшифровкаЗаголовок = Ложь;
		КонецЕсли;
		СтрокаМакета = Макет.ПолучитьОбласть("Строка");
		СтрокаМакета.Параметры.Заполнить(Выборка);
		Документ.Вывести(СтрокаМакета);

	КонецЦикла;
	
	Документ.ЗакончитьАвтогруппировкуСтрок();
	Документ.ТолькоПросмотр                = Истина;
	Документ.ВерхнийКолонтитул.Выводить    = Истина;
	Документ.НижнийКолонтитул.Выводить     = Истина;
	Документ.ОбластьПечати = Документ.Область(1, 2, Документ.ВысотаТаблицы, Документ.ШиринаТаблицы);
	Документ.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РасчетЗатратНаУлучшениеОС";	
КонецПроцедуры

&НаСервере
// Процедура - заполняет начальные настройки заполнения
//
Функция ЗаполнитьНачальныеНастройки() Экспорт
	
	УсловиеРегистратор = ?(ЗначениеЗаполнено(Отчет.ДокументИсключения),"И ХозрасчетныйДвиженияССубконто.Регистратор <> &Регистратор", "");	
	УсловиеОрганизация = ?(ЗначениеЗаполнено(Отчет.Организация)		,"И ХозрасчетныйДвиженияССубконто.Организация = &Организация", "");	
	
	Запрос = новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК СтатьяЗатрат
	|ПОМЕСТИТЬ СтатьиЗатратСписок
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.СтатьяДекларацииПоНалогуНаПрибыль В(&СтатьиДекларации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйДвиженияССубконто.Регистратор,
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйДвиженияССубконто.Регистратор) КАК ПредставлениеРегистратор,
	|	СУММА(ХозрасчетныйДвиженияССубконто.СуммаНУДт) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(&НачалоПериода, &КонецПериода, Активность И СчетДт В ИЕРАРХИИ (&СчетаЗатрат) И ВидСубконто1 = &ВидСубконтоСтатьяЗатрат 
	|					И Субконто1 В
	|					(ВЫБРАТЬ
	|						СтатьиЗатратСписок.СтатьяЗатрат
	|					ИЗ
	|						СтатьиЗатратСписок КАК СтатьиЗатратСписок) И НЕ (СчетДт В ИЕРАРХИИ (&СчетаЗатрат) И СчетКт В ИЕРАРХИИ (&СчетаЗатрат))
	|			) КАК ХозрасчетныйДвиженияССубконто
	|ГДЕ
	|	ИСТИНА
	|	" + УсловиеОрганизация + "
	|	" + УсловиеРегистратор + "
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйДвиженияССубконто.Регистратор
	|
	|   ИТОГИ
	|   СУММА(Сумма)
	|ПО
	|   ОБЩИЕ";
	СчетаЗатрат = новый СписокЗначений;
	
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы); // 91
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.АдминистративныеРасходы); // 92
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаСбыт); // 93
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ДругиеЗатратыОперационнойДеятельности); // 94

	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство); // 231
	СчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства); // 232
	
	Запрос.УстановитьПараметр("СчетаЗатрат", СчетаЗатрат);
	
	Запрос.УстановитьПараметр("ВидСубконтоСтатьяЗатрат", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
	
	СтатьиДекларации = новый СписокЗначений;
	
	СтатьиДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НПНК_АМ_Ремонт_ЗВ); // ОПЗ: Улучшение и ремонт ОС общепроизводственного назначения (до 01.01.2012 - 06.1.5.2) // 06.1.5.2 Улучшение и ремонт ОС общепроизводственного назначения
	СтатьиДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НПНК_АМ_Ремонт_АВ); // из 06.1: Улучшение и ремонт ОС общехозяйственного использования (до 01.01.2012 - 06.2.3.2) // 06.2.3.2 Улучшение и ремонт ОС общехозяйственного использования
	СтатьиДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НПНК_АМ_Ремонт_ВЗ); // из 06.2: Улучшение и ремонт ОС, связанных со сбытом продукции, выполнением работ, оказанием услуг (до 01.01.2012 - 06.3.9.2) // 06.3.9.2 Улучшение и ремонт ОС, связанных со сбытом продукции, выполнением работ, оказанием услуг
	СтатьиДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НПНК_АМ_Ремонт_ИВ); // 06.4.38 Сумма расходов на улучшение и ремонт необоротных активов, переданных в оперативную аренду (до 01.01.2012 - 06.5.39) // 06.5.39 Сумма расходов на улучшение и ремонт необоротных активов, переданных в оперативную аренду
	СтатьиДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НПНК_ПЗ_Ремонт); // Прямые производственные затраты: Улучшение и ремонт ОС производственного оборудования
	СтатьиДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НПНК_АМ_Ремонт_ИВ_Информация); // из 06.4.36: Улучшение и ремонт ОС, используемых для информационного обеспечения хозяйственной деятельности
	СтатьиДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НПНК_АМ_Ремонт_ИВ_Природоохранные); // из 06.4. 8: Улучшение и ремонт фондов приридоохранного назначения
	СтатьиДекларации.Добавить(Справочники.СтатьиНалоговыхДеклараций.НПНК_АМ_Ремонт_ИВ_Аренда); // из 06.4.19: Улучшение и ремонт арендованных ОС в пределах 10% балансовой стоимости
	
	Запрос.УстановитьПараметр("СтатьиДекларации", СтатьиДекларации);
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоГода(Отчет.ДатаСведений));
	Запрос.УстановитьПараметр("КонецПериода",  КонецГода(Отчет.ДатаСведений));
	
	Запрос.УстановитьПараметр("Регистратор", Отчет.ДокументИсключения);
	Запрос.УстановитьПараметр("Организация", Отчет.Организация);
	
	Возврат Запрос.Выполнить().Выбрать();
	
	
КонецФункции // ЗаполнитьНачальныеНастройки()

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодНачалоВыбораЗавершение", ЭтотОбъект);
	
	ВыборПериодаКлиент.ПериодНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, 
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год"), НачалоГода(Отчет.ДатаСведений), ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбораЗавершение(СтруктураПериода, ДополнительныеПараметры) Экспорт
	
	// Установим полученный период
	Если СтруктураПериода <> Неопределено Тогда
		Период = СтруктураПериода.Период;
		Отчет.ДатаСведений = СтруктураПериода.НачалоПериода;
		
		ВывестиОтчет();
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыборПериодаКлиент.ПериодОбработкаВыбора(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год"), Период, НачалоГода(Отчет.ДатаСведений), Отчет.ДатаСведений);
		
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ВыборПериодаКлиент.ПериодАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка,
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год"), Период, НачалоГода(Отчет.ДатаСведений), Отчет.ДатаСведений);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборПериодаКлиент.ПериодОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год"), Период, НачалоГода(Отчет.ДатаСведений), Отчет.ДатаСведений);
	
КонецПроцедуры

