
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПанельОтчетовКлючВарианта = " - ";
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.КомандыЕще.Ширина = 11;
	КонецЕсли;
	
	// Локальные переменные
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	
	РежимРасшифровки = (Параметры.Свойство("Расшифровка") И Параметры.Расшифровка <> Неопределено);
	РежимВариантаОтчета = (Параметры.Свойство("КлючВарианта") И Параметры.КлючВарианта <> Неопределено);
	КлючОбъекта = ОтчетМетаданные.ПолноеИмя();
	НаименованиеОтчета = СокрЛП(ОтчетМетаданные.Представление());
	ПравоВывода = ПравоДоступа("Вывод", Метаданные);
	
	// Параметры формы
	ФормаПараметры = Новый Структура(
		"КлючНазначенияИспользования, КлючПользовательскихНастроек,
		|Расшифровка, СформироватьПриОткрытии, ТолькоПросмотр,
		|ФиксированныеНастройки, ОтчетСсылка, Раздел, Подсистема, ПодсистемаПредставление");
	ЗаполнитьЗначенияСвойств(ФормаПараметры, Параметры);
	Если НЕ ЗначениеЗаполнено(ФормаПараметры.ОтчетСсылка) Тогда
		ОтчетИнформация = ВариантыОтчетов.СформироватьИнформациюОбОтчетеПоПолномуИмени(КлючОбъекта);
		Если НЕ ЗначениеЗаполнено(ОтчетИнформация.ТекстОшибки) Тогда
			ФормаПараметры.ОтчетСсылка = ОтчетИнформация.Отчет;
		Иначе
			ФормаПараметры.ОтчетСсылка = КлючОбъекта;
		КонецЕсли;
	КонецЕсли;
	
	ВариантСсылка = ВариантыОтчетов.ПолучитьСсылку(ФормаПараметры.ОтчетСсылка, КлючТекущегоВарианта);
	
	// Реквизиты
	НастройкиОтчета = ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию();
	НастройкиОтчета.Вставить("Отбор", Новый Структура);
	Если ТипЗнч(Параметры.Отбор) = Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(НастройкиОтчета.Отбор, Параметры.Отбор, Истина);
		Параметры.Отбор.Очистить();
	КонецЕсли;
    //Если ВариантыОтчетовПовтИсп.ОтчетыСНастройками().Найти(ФормаПараметры.ОтчетСсылка) <> Неопределено Тогда
    //	ОтчетОбъект.ОпределитьНастройкиФормы(ЭтотОбъект, КлючТекущегоВарианта, НастройкиОтчета);
    //КонецЕсли;
	Если ОтчетМетаданные.ХранилищеНастроек = Неопределено Тогда
		НастройкиОтчета.Вставить("ХранилищеПользовательскихНастроек", Неопределено);
	Иначе
		НастройкиОтчета.Вставить("ХранилищеПользовательскихНастроек", ОтчетМетаданные.ХранилищеНастроек.ПолноеИмя());
	КонецЕсли;
	
	// Параметры по умолчанию
	Если НастройкиОтчета.Свойство("ВыводитьСуммуВыделенныхЯчеек") И Не НастройкиОтчета.ВыводитьСуммуВыделенныхЯчеек Тогда
		Элементы.АвтоСуммаГруппа.Видимость = Ложь;
		Элементы.ОтчетТабличныйДокумент.УстановитьДействие("ПриАктивизацииОбласти", "");
	КонецЕсли;
	
	// Скрытие команд вариантов
	Если Не Параметры.Свойство("ВидимостьКомандВариантовОтчетов", ВидимостьКомандВариантовОтчетов) Тогда
		ВидимостьКомандВариантовОтчетов = ВариантыОтчетовПовтИсп.ПравоДобавления();
	КонецЕсли;
	
	// Регистрация команд и реквизитов формы, которые не удаляются при перезаполнении быстрых настроек.
	НаборРеквизитов = ПолучитьРеквизиты();
	Для Каждого Реквизит Из НаборРеквизитов Цикл
		ПолноеИмяРеквизита = Реквизит.Имя + ?(ПустаяСтрока(Реквизит.Путь), "", "." + Реквизит.Путь);
		ПостоянныеРеквизиты.Добавить(ПолноеИмяРеквизита);
	КонецЦикла;
	Для Каждого Команда Из Команды Цикл
		ПостоянныеКоманды.Добавить(Команда.Имя);
	КонецЦикла;
	
	// Скрытие кнопки выбора варианта из расшифровки.
	Если РежимРасшифровки Тогда
		Элементы.ВыбратьВариант.Видимость = Ложь;
		Если ЗначениеЗаполнено(ОтчетНаименованиеТекущегоВарианта) Тогда
			РежимРасшифровкиПредставлениеВладельца = ОтчетНаименованиеТекущегоВарианта;
		КонецЕсли;
	КонецЕсли;
	
	// Приведение зависимых элементов формы к кондиции
	ВидимостьДоступностьКорректность();
	
	// Механизмы расширения
    //Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
    //	МодульРассылкаОтчетов = ОбщегоНазначения.ОбщийМодуль("РассылкаОтчетов");
    //	МодульРассылкаОтчетов.ФормаОтчетаДобавитьКоманды(ЭтотОбъект, Отказ, СтандартнаяОбработка);
    //КонецЕсли;
	Если НастройкиОтчета.События.ПриСозданииНаСервере Тогда
		ОтчетОбъект.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
	// Если в подменю одна команда, то выпадающий список не отображается.
	Если Элементы.Отправить.ПодчиненныеЭлементы.Количество() = 1 Тогда
		Элементы.Отправить.Вид = ВидГруппыФормы.ГруппаКнопок;
		Элементы.ОтправитьПоЭлектроннойПочте.Заголовок = Элементы.Отправить.Заголовок + "...";
	КонецЕсли;
	Если Элементы.ОтправитьВсеДействия.ПодчиненныеЭлементы.Количество() = 1 Тогда
		Элементы.ОтправитьВсеДействия.Вид = ВидГруппыФормы.ГруппаКнопок;
		Элементы.ОтправитьПоЭлектроннойПочтеВсеДействия.Заголовок = Элементы.ОтправитьВсеДействия.Заголовок + "...";
	КонецЕсли;
	
	ФормаПараметры = Новый ФиксированнаяСтруктура(ФормаПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПеременныеКлиента = Новый Структура;
	СформироватьПриНеобходимости();
	Если Не Отказ Тогда
		ФормаОткрыта = Истина;
	КонецЕсли;
	ПодключитьОбработчикОжидания("СформироватьПриНеобходимости", 1, Ложь);
	
	
	Элементы.ВидОтчета.СписокВыбора.Добавить("", "");
	Элементы.ВидОтчета.СписокВыбора.Добавить(Нстр("ru = 'Женщины'; uk = 'Жінки'"),Нстр("ru = 'Женщины'; uk = 'Жінки'") );              
	Элементы.ВидОтчета.СписокВыбора.Добавить(Нстр("ru = 'Пенсионеры'; uk = 'Пенсіонери'"), Нстр("ru = 'Пенсионеры'; uk = 'Пенсіонери'"));
	Элементы.ВидОтчета.СписокВыбора.Добавить(Нстр("ru = 'Пенсионеры не инвалиды'; uk = 'Пенсіонери не інваліди'"), Нстр("ru = 'Пенсионеры не инвалиды'; uk = 'Пенсіонери не інваліди'"));
	Элементы.ВидОтчета.СписокВыбора.Добавить(Нстр("ru = 'Инвалиды'; uk = 'Інваліди'"), Нстр("ru = 'Инвалиды'; uk = 'Інваліди'"));
	Элементы.ВидОтчета.СписокВыбора.Добавить(Нстр("ru = 'Инвалиды не пенсионеры'; uk = 'Інваліди не пенсіонери'"), Нстр("ru = 'Инвалиды не пенсионеры'; uk = 'Інваліди не пенсіонери'"));
	Элементы.ВидОтчета.СписокВыбора.Добавить(Нстр("ru = 'Инвалиды пенсионеры'; uk = 'Інваліди пенсіонери'"), Нстр("ru = 'Инвалиды пенсионеры'; uk = 'Інваліди пенсіонери'"));
	Элементы.ВидОтчета.СписокВыбора.Добавить(Нстр("ru = 'Иностранцы'; uk = 'Іноземці'"), Нстр("ru = 'Иностранцы'; uk = 'Іноземці'"));
	Элементы.ВидОтчета.СписокВыбора.Добавить(Нстр("ru = 'С доп. гарантиями трудоустройства'; uk = 'З дод. гарантіями працевлаштування'"), Нстр("ru = 'С доп. гарантиями трудоустройства'; uk = 'З дод. гарантіями працевлаштування'"));  

	
	Элементы.ВидРаботников.СписокВыбора.Добавить("", "");
	Элементы.ВидРаботников.СписокВыбора.Добавить(Нстр("ru = 'Штатные'; uk = 'Штатні'"), Нстр("ru = 'Штатные'; uk = 'Штатні'"));
	Элементы.ВидРаботников.СписокВыбора.Добавить(Нстр("ru = 'Совместители'; uk = 'Сумісники'"), Нстр("ru = 'Совместители'; uk = 'Сумісники'"));
	Элементы.ВидРаботников.СписокВыбора.Добавить(Нстр("ru = 'ГПХ'; uk = 'ЦПХ'"), Нстр("ru = 'ГПХ'; uk = 'ЦПХ'"));
	


КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если ФоновоеЗаданиеИдентификатор <> Неопределено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор);
		ФоновоеЗаданиеИдентификатор = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора) Экспорт
	Результат = Ложь;
	
	СуффиксФормыИсточника = ИсточникВыбора.ИмяФормы;
	ПозицияТочки = СтрДлина(СуффиксФормыИсточника);
	Пока Сред(СуффиксФормыИсточника, ПозицияТочки, 1) <> "." Цикл
		ПозицияТочки = ПозицияТочки - 1;
	КонецЦикла;
	СуффиксФормыИсточника = ВРег(Сред(СуффиксФормыИсточника, ПозицияТочки + 1));
	
	Если СуффиксФормыИсточника = ВРег("ФормаНастроекОтчета")
		Или СуффиксФормыИсточника = ВРег("ФормаНастроек") Тогда
		ИзмененияИзФормыВариантаОтчета = Ложь;
	ИначеЕсли СуффиксФормыИсточника = ВРег("ФормаВариантаОтчета")
		Или СуффиксФормыИсточника = ВРег("ФормаВарианта") Тогда
		ИзмененияИзФормыВариантаОтчета = Истина;
	Иначе
		ИзмененияИзФормыВариантаОтчета = Неопределено;
	КонецЕсли;
	
	Если ИзмененияИзФормыВариантаОтчета <> Неопределено Тогда
		СформироватьПриНеобходимости();
		Результат = Истина;
	КонецЕсли;
	
	// Механизмы расширения
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		МодульРассылкаОтчетовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РассылкаОтчетовКлиент");
		МодульРассылкаОтчетовКлиент.ФормаОтчетаОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ОповещениеОбработано = Ложь;
	Если ИмяСобытия = ВариантыОтчетовКлиентСервер.ИмяСобытияИзменениеВарианта() Тогда
		ПанельОтчетовКлючВарианта = " - ";
		ВидимостьДоступностьКорректность();
		ОповещениеОбработано = Истина;
	КонецЕсли;
	
	ОтчетыКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник, ОповещениеОбработано);
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииВариантаНаСервере(Настройки)
	
	// Заголовок
	ВидимостьДоступностьКорректность("ВариантОтчета");
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(НовыеНастройкиКД)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	НеобходимоОбновитьНастройки = Истина;
	
	// Вызов переопределяемого модуля
	Если НастройкиОтчета.События.ПередЗагрузкойВариантаНаСервере Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.ПередЗагрузкойВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	Иначе
		ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	КонецЕсли;
	
	// Загрузка фиксированных настроек для режима расшифровки.
	Если РежимРасшифровки Тогда
		Если Параметры <> Неопределено И Параметры.Свойство("Расшифровка") Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(Параметры.Расшифровка.ПрименяемыеНастройки);
			Отчет.КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(НастройкиОтчета.Отбор) = Тип("Структура") Тогда
		ПараметрыКД = Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных;
		ОтборыКД = Отчет.КомпоновщикНастроек.Настройки.Отбор;
		Недоступный = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		Для Каждого КлючИЗначение Из НастройкиОтчета.Отбор Цикл
			Имя = КлючИЗначение.Ключ;
			Значение = КлючИЗначение.Значение;
			ПараметрКД = ПараметрыКД.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(Имя));
			Если ТипЗнч(ПараметрКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				ПараметрКД.ИдентификаторПользовательскойНастройки = "";
				ПараметрКД.Использование    = Истина;
				ПараметрКД.РежимОтображения = Недоступный;
				ПараметрКД.Значение         = Значение;
			Иначе
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборыКД, Имя, Значение, , , Истина, Недоступный, "");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Параметры печати печати и сохранения положения окна.
	УстановитьКлючиФормы();
	
	// Заполнение панели быстрых настроек
	РежимВариантаОтчета = Истина;
	ВариантСсылка = ВариантыОтчетов.ПолучитьСсылку(ФормаПараметры.ОтчетСсылка, КлючТекущегоВарианта);
	
	// Вызов переопределяемого модуля
	Если НастройкиОтчета.События.ПриЗагрузкеВариантаНаСервере Тогда
		ОтчетОбъект.ПриЗагрузкеВариантаНаСервере(ЭтотОбъект, НовыеНастройкиКД);
	Иначе
		 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(ПользовательскиеНастройкиКД)
	ВариантыОтчетов.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, ПользовательскиеНастройкиКД);
	
	// Сохранение выбранных значений в дополнительных свойствах.
	Если ПользовательскиеНастройкиКД.ДополнительныеСвойства.Свойство("ЭлементыФормы") Тогда
		ДополнительныеНастройкиЭлементов = ПользовательскиеНастройкиКД.ДополнительныеСвойства.ЭлементыФормы;
		Для Каждого КлючИЗначение Из ДополнительныеНастройкиЭлементов Цикл
			ИдентификаторЭлемента = КлючИЗначение.Ключ;
			НастройкиЭлемента = КлючИЗначение.Значение;
			ИмяРеквизита = ХранимыеСпискиВыбора.Получить(ИдентификаторЭлемента);
			Если ИмяРеквизита = Неопределено Тогда
				ДополнительныеНастройкиЭлементов.Удалить(ИдентификаторЭлемента);
				Продолжить;
			КонецЕсли;
			НастройкиЭлемента.ЗначенияДляВыбора = ЭтотОбъект[ИмяРеквизита].ВыгрузитьЗначения();
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьКомандыВыбораПользовательскихНастроек();
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(НовыеПользовательскиеНастройкиКД)
	
	// Вызов переопределяемого модуля
	Если НастройкиОтчета.События.ПриЗагрузкеПользовательскихНастроекНаСервере Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетОбъект.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтотОбъект, НовыеПользовательскиеНастройкиКД);
	Иначе
		 
	КонецЕсли;
	
	Если НеобходимоОбновитьНастройки Тогда
		ПриОбновленииСоставаПользовательскихНастроекНаСервере(Истина);
	Иначе
		НеобходимоОбновитьНастройки = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	НеобходимоОбновитьНастройки = Ложь;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Событие", Новый Структура);
	ПараметрыЗаполнения.Событие.Вставить("Имя", "ПриОбновленииСоставаПользовательскихНастроекНаСервере");
	ПараметрыЗаполнения.Событие.Вставить("СтандартнаяОбработка", СтандартнаяОбработка);
	
	Если ПараметрыЗаполнения.Событие.СтандартнаяОбработка <> СтандартнаяОбработка Тогда
		СтандартнаяОбработка = ПараметрыЗаполнения.Событие.СтандартнаяОбработка;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// Табличный документ

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	ОтчетыКлиентПереопределяемый.ОбработкаРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	ОтчетыКлиентПереопределяемый.ОбработкаДополнительнойРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументПриАктивизацииОбласти(Элемент)
	Если НастройкиОтчета.ВыводитьСуммуВыделенныхЯчеек Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РассчитатьСуммуЯчеек", ИнтервалОжидания, Истина);
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Подключаемые - Стандартный период.

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_НачалоПериода_ПриИзменении(Элемент)
	// Формирование сведений по элементу.
	ПериодНачалоИмя = Элемент.Имя;
	ЗначениеИмя     = СтрЗаменить(ПериодНачалоИмя, "_Начало_", "_Значение_");
	ИдентификаторЭлемента = Прав(ПериодНачалоИмя, 32);
	
	Значение = ЭтотОбъект[ЗначениеИмя];
	Заполнено = ЗначениеЗаполнено(Значение.ДатаНачала);
	Если Заполнено Тогда
		Значение.ДатаНачала = НачалоДня(Значение.ДатаНачала);
	КонецЕсли;
	
	// Запись значения в пользовательские настройки компоновки данных.
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	Если Заполнено Тогда
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_КонецПериода_ПриИзменении(Элемент)
	// Формирование сведений по элементу.
	ПериодОкончаниеИмя = Элемент.Имя;
	ЗначениеИмя        = СтрЗаменить(ПериодОкончаниеИмя, "_Окончание_", "_Значение_");
	ИдентификаторЭлемента = Прав(ПериодОкончаниеИмя, 32);
	
	Значение = ЭтотОбъект[ЗначениеИмя];
	Заполнено = ЗначениеЗаполнено(Значение.ДатаОкончания);
	Если Заполнено Тогда
		Значение.ДатаОкончания = КонецДня(Значение.ДатаОкончания);
	КонецЕсли;
	
	// Запись значения в пользовательские настройки компоновки данных.
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	Если Заполнено Тогда
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбратьПериод(Команда)
	ОтчетыКлиент.ВыбратьПериод(ЭтотОбъект, Команда.Имя);
КонецПроцедуры


&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Отчет, РезультатВыбора, "КонецПериода,НачалоПериода");
	
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ОтчетТабличныйДокумент, "НеАктуальность");
	КонецЕсли;
	
	

КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ОтчетТабличныйДокумент, "НеАктуальность");
	КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ОтчетТабличныйДокумент, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВсеНастройки(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, ФормаПараметры, Истина);
	
	ПараметрыФормы.Вставить("Вариант", Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("КлючОбъекта",               Строка(КлючОбъекта));
	ПараметрыФормы.Вставить("КлючВарианта",              Строка(КлючТекущегоВарианта));
	ПараметрыФормы.Вставить("ВариантСсылка",             ВариантСсылка);
	ПараметрыФормы.Вставить("НастройкиОтчета",           НастройкиОтчета);
	ПараметрыФормы.Вставить("НаименованиеОтчета",        НаименованиеОтчета);
	ПараметрыФормы.Вставить("ПредставлениеВарианта",     Строка(ОтчетНаименованиеТекущегоВарианта));
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ПредставлениеПользовательскихНастроек", "");
	
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОткрытьФорму(КлючОбъекта + ".ФормаНастроек", ПараметрыФормы, ЭтотОбъект, , , , , Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Отчет.НачалоПериода, Отчет.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВычислитьСумму(Команда)
	СуммаВыделенныхЯчеек = ВычислитьСуммуСервер(ОтчетТабличныйДокумент, ВыделенныеОбласти());
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантОтчета(Команда)
	
	ПараметрыФормы = Новый Структура;
	Для Каждого КлючИЗначение Из ФормаПараметры Цикл
		ПараметрыФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	ПараметрыФормы.Вставить("Вариант",                               Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("КлючВарианта",                          Строка(КлючТекущегоВарианта));
	ПараметрыФормы.Вставить("ПользовательскиеНастройки",             Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ПредставлениеВарианта",                 Строка(ОтчетНаименованиеТекущегоВарианта));
	ПараметрыФормы.Вставить("ПредставлениеПользовательскихНастроек", "");
	
	ОткрытьФорму(КлючОбъекта + ".ФормаВарианта", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоУмолчанию(Команда)
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Событие", Новый Структура);
	ПараметрыЗаполнения.Событие.Вставить("Имя", "НастройкиПоУмолчанию");
	ПараметрыЗаполнения.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	Если ОтображениеСостояния.Видимость = Истина
		И ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность Тогда
		ТекстВопроса = НСтр("ru='Отчет не сформирован. Сформировать?';uk='Звіт не сформований. Сформувати?'");
		Обработчик = Новый ОписаниеОповещения("ОтправитьПоЭлектроннойПочтеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	Иначе
		ПоказатьДиалогОтправкиПоЭлектроннойПочте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();

КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Функция НайтиПользовательскуюНастройкуЭлемента(ИмяИлиИдентификаторЭлемента)
	// Для пользовательских настроек хранятся идентификаторы компоновки данных,
	//  поскольку они не могут храниться по ссылке (происходит копирование значения).
	Если СтрДлина(ИмяИлиИдентификаторЭлемента) = 32 Тогда
		ИдентификаторЭлемента = ИмяИлиИдентификаторЭлемента;
	Иначе
		ИдентификаторЭлемента = Прав(ИмяИлиИдентификаторЭлемента, 32);
	КонецЕсли;
	ИдентификаторКД = БыстрыйПоискПользовательскихНастроек.Получить(ИдентификаторЭлемента);
	Возврат Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(ИдентификаторКД);
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	Если ФоновоеЗаданиеВыполнено() Тогда
		ПоказатьОповещениеПользователя(НСтр("ru='Отчет сформирован';uk='Звіт сформований'"), , Заголовок);
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РассчитатьСуммуЯчеек()
	Сумма = РассчитатьСуммуВыделенныхЯчеек(ОтчетТабличныйДокумент, Неопределено);
	Если ТипЗнч(Сумма) = Тип("Число") Тогда
		СуммаВыделенныхЯчеек = Формат(Сумма, "ЧН=0");
	Иначе
		СуммаВыделенныхЯчеек = "-";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ВыделенныеОбласти()
	Результат = Новый Массив;
	Для Каждого ВыделеннаяОбласть Из ОтчетТабличныйДокумент.ВыделенныеОбласти Цикл
		Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		Структура = Новый Структура("Верх, Низ, Лево, Право, ТипОбласти");
		ЗаполнитьЗначенияСвойств(Структура, ВыделеннаяОбласть);
		Результат.Добавить(Структура);
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочтеЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СформироватьНепосредственно();
		ПоказатьДиалогОтправкиПоЭлектроннойПочте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогОтправкиПоЭлектроннойПочте()
	ТабличныеДокументы = Новый СписокЗначений;
	ТабличныеДокументы.Добавить(ЭтотОбъект.ОтчетТабличныйДокумент, ЭтотОбъект.ОтчетНаименованиеТекущегоВарианта);
	
	ФормаЗаголовок = СтрЗаменить(НСтр("ru='Отправка отчета ""%1"" по почте';uk='Відправлення звіту ""%1"" поштою'"), "%1", ЭтотОбъект.ОтчетНаименованиеТекущегоВарианта);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТабличныеДокументы", ТабличныеДокументы);
	ПараметрыФормы.Вставить("Тема",               ЭтотОбъект.ОтчетНаименованиеТекущегоВарианта);
	ПараметрыФормы.Вставить("Заголовок",          ФормаЗаголовок);
	
	ОткрытьФорму("ОбщаяФорма.ОтправкаТабличныхДокументовПоПочте", ПараметрыФормы, , );
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПриНеобходимости()
	Если НеобходимоОбновитьНастройки Тогда
		ПриОбновленииСоставаПользовательскихНастроекНаСервере(Истина);
	КонецЕсли;
	Если НадоСформировать Тогда
		НадоСформировать = Ложь;
		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Клиент или сервер

&НаКлиентеНаСервереБезКонтекста
Функция ПривестиИдентификаторКИмени(Идентификатор)
	Возврат СтрЗаменить(Строка(Идентификатор), "-", "");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПривестиИмяКИдентификатору(Имя)
	Возврат Лев(Имя, 8) + "-" + Сред(Имя, 9, 4) + "-" + Сред(Имя, 13, 4) + "-" + Сред(Имя, 17, 4) + "-" + Сред(Имя, 21);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьСуммуВыделенныхЯчеек(ТабличныйДокумент, ВыделенныеОбласти)
	
	#Если Клиент Тогда
		ВыделенныеОбласти = ТабличныйДокумент.ВыделенныеОбласти;
	#КонецЕсли
	
	#Если Клиент И Не ТолстыйКлиентОбычноеПриложение Тогда
		КоличествоВыделенныхОбластей = ВыделенныеОбласти.Количество();
		Если КоличествоВыделенныхОбластей = 0 Тогда
			Возврат 0;
		ИначеЕсли КоличествоВыделенныхОбластей >= 100 Тогда
			Возврат Неопределено; // Нужен вызов сервера.
		КонецЕсли;
		КоличествоВыделенныхЯчеек = 0;
	#КонецЕсли
	
	Сумма = 0;
	ПроверенныеЯчейки = Новый Соответствие;
	
	Для Каждого ВыделеннаяОбласть Из ВыделенныеОбласти Цикл
		#Если Клиент Тогда
			Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
				Продолжить;
			КонецЕсли;
		#КонецЕсли
		
		ВыделеннаяОбластьВерх = ВыделеннаяОбласть.Верх;
		ВыделеннаяОбластьНиз = ВыделеннаяОбласть.Низ;
		ВыделеннаяОбластьЛево = ВыделеннаяОбласть.Лево;
		ВыделеннаяОбластьПраво = ВыделеннаяОбласть.Право;
		
		Если ВыделеннаяОбластьВерх = 0 Тогда
			ВыделеннаяОбластьВерх = 1;
		КонецЕсли;
		
		Если ВыделеннаяОбластьНиз = 0 Тогда
			ВыделеннаяОбластьНиз = ТабличныйДокумент.ВысотаТаблицы;
		КонецЕсли;
		
		Если ВыделеннаяОбластьЛево = 0 Тогда
			ВыделеннаяОбластьЛево = 1;
		КонецЕсли;
		
		Если ВыделеннаяОбластьПраво = 0 Тогда
			ВыделеннаяОбластьПраво = ТабличныйДокумент.ШиринаТаблицы;
		КонецЕсли;
		
		Если ВыделеннаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда
			ВыделеннаяОбластьВерх = ВыделеннаяОбласть.Низ;
			ВыделеннаяОбластьНиз = ТабличныйДокумент.ВысотаТаблицы;
		КонецЕсли;
		
		ВыделеннаяОбластьВысота = ВыделеннаяОбластьНиз   - ВыделеннаяОбластьВерх;
		ВыделеннаяОбластьШирина = ВыделеннаяОбластьПраво - ВыделеннаяОбластьЛево;
		
		#Если Клиент И Не ТолстыйКлиентОбычноеПриложение Тогда
			КоличествоВыделенныхЯчеек = КоличествоВыделенныхЯчеек + ВыделеннаяОбластьШирина * ВыделеннаяОбластьВысота;
			Если КоличествоВыделенныхЯчеек >= 1000 Тогда
				Возврат Неопределено; // Нужен вызов сервера.
			КонецЕсли;
		#КонецЕсли
		
		Для НомерКолонки = ВыделеннаяОбластьЛево По ВыделеннаяОбластьПраво Цикл
			Для НомерСтроки = ВыделеннаяОбластьВерх По ВыделеннаяОбластьНиз Цикл
				Ячейка = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
				Если ПроверенныеЯчейки.Получить(Ячейка.Имя) = Неопределено Тогда
					ПроверенныеЯчейки.Вставить(Ячейка.Имя, Истина);
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если Ячейка.Видимость = Истина Тогда
					Если Ячейка.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Колонки
						И Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
						Сумма = Сумма + Ячейка.Значение;
					ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
						Сумма = Сумма + СтрокаВЧисло(Ячейка.Текст);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаВЧисло(ИсходнаяСтрока)
	// Превращает строку в число без вызова исключений. Стандартная функция преобразования
	//   Число() строго контролирует отсутствие каких-либо символов кроме числовых.
	
	Результат = 0;
	ЗнаковПослеЗапятой = -1;
	ЗнакОтрицательный = Ложь;
	Для НомерСимвола = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		КодСимвола = КодСимвола(ИсходнаяСтрока, НомерСимвола);
		Если КодСимвола = 32 Или КодСимвола = 160 Тогда // Пробел или неразрывный пробел.
			// Пропуск (действие не требуется).
		ИначеЕсли КодСимвола = 45 Или КодСимвола = 40 Тогда // Минус или открывающая скобка.
			Если Результат <> 0 Тогда
				Возврат 0;
			КонецЕсли;
			ЗнакОтрицательный = Истина;
		ИначеЕсли КодСимвола = 41 Тогда // Закрывающая скобка.
			Если Не ЗнакОтрицательный Или Результат = 0 Тогда // Не было открывающей скобки или нет числа.
				Возврат 0;
			КонецЕсли;
			// Пропуск (действие не требуется).
		ИначеЕсли КодСимвола = 44 Или КодСимвола = 46 Тогда // Запятая или точка.
			Если ЗнаковПослеЗапятой <> -1 Тогда
				Возврат 0; // Разделитель уже был, следовательно это не число.
			КонецЕсли;
			ЗнаковПослеЗапятой = 0; // Запуск отсчета знаков после запятой.
		ИначеЕсли КодСимвола > 47 И КодСимвола < 58 Тогда // Число.
			Если ЗнаковПослеЗапятой <> -1 Тогда
				ЗнаковПослеЗапятой = ЗнаковПослеЗапятой + 1;
			КонецЕсли;
			Число = КодСимвола - 48;
			Результат = Результат * 10 + Число;
		Иначе
			Возврат 0;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗнаковПослеЗапятой > 0 Тогда
		Результат = Результат / Pow(10, ЗнаковПослеЗапятой);
	КонецЕсли;
	Если ЗнакОтрицательный Тогда
		Результат = -Результат;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Функция ПодготовитьПараметрыОтчета() 
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация"                       , Отчет.Организация);
	ПараметрыОтчета.Вставить("Подразделение"                     , Отчет.Подразделение);
	ПараметрыОтчета.Вставить("НачалоПериода"                     , Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода"                      , Отчет.КонецПериода);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Функция СформироватьОтчетНаСервере()
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.ОтчетТабличныйДокумент, "НеИспользовать");
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	
	РезультатВыполнения = ОтчетОбъект.СформироватьОтчет(ОтчетТабличныйДокумент,Ложь,Ложь);
	
	
КонецФункции

&НаСервере
Процедура ВидимостьДоступностьКорректность(Изменения = "")
	// Быстрые настройки
	Если Изменения = "" Тогда
		
		// Вычисление параметров отображения.
		ПользовательскиеНастройкиКД = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
		ПоказыватьКомандыВариантовОтчетов = РежимВариантаОтчета И ВидимостьКомандВариантовОтчетов;
		ЕстьМедленныеНастройки = РежимВариантаОтчета И ПользовательскиеНастройкиКД.Элементы.Количество() > 0;
		
		// Применение параметров отображения.
		Элементы.ВсеНастройки.Видимость = ЕстьМедленныеНастройки;
		Элементы.КомандыВариантовОтчета.Видимость = ПоказыватьКомандыВариантовОтчетов;
		Элементы.ГруппаПользовательскиеНастройки_Левая.Видимость = ПоказыватьКомандыВариантовОтчетов И ЕстьМедленныеНастройки;
		Элементы.ГруппаПользовательскиеНастройки.Видимость = ПоказыватьКомандыВариантовОтчетов И ЕстьМедленныеНастройки;
		
		Если ВариантыПанелиКлючТекущегоВарианта <> КлючТекущегоВарианта Тогда
			ВариантыПанелиКлючТекущегоВарианта = КлючТекущегоВарианта;
			ЗаполнитьКомандыВыбораПользовательскихНастроек();
		КонецЕсли;
		
	КонецЕсли;
	
	// Заголовок
	Если Изменения = "" ИЛИ Изменения = "ВариантОтчета" Тогда
		ОтчетНаименованиеТекущегоВарианта = СокрЛП(ОтчетНаименованиеТекущегоВарианта);
		Если ЗначениеЗаполнено(ОтчетНаименованиеТекущегоВарианта) Тогда
			Заголовок = ОтчетНаименованиеТекущегоВарианта;
		Иначе
			Заголовок = НаименованиеОтчета;
		КонецЕсли;
		Если РежимРасшифровки Тогда
			Заголовок = РежимРасшифровкиПредставлениеВладельца + " (" + НРег(Заголовок) + ")";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьНепосредственно()
	
	ДопСвойства = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	
	// Формирование отчета.
	ДопСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
	НастройкиПечатиСохранить();
	ИнформацияОбОшибке = Неопределено;
	Попытка
		СкомпоноватьРезультат(РежимКомпоновкиРезультата.Авто);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;
	ДопСвойства.Удалить("КлючВарианта");
	НастройкиПечатиВосстановить();
	
	Если ИнформацияОбОшибке <> Неопределено Тогда
		ПоказатьОшибкиФормирования(ИнформацияОбОшибке);
		Возврат;
	КонецЕсли;
	
	// Перезаполнение настроек.
	РезультатФормирования = Новый Структура;
	РезультатФормирования.Вставить("ВариантМодифицирован", Ложь);
	РезультатФормирования.Вставить("ПользовательскиеНастройкиМодифицированы", Ложь);
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопСвойства, "ВариантМодифицирован") = Истина Тогда
		РезультатФормирования.ВариантМодифицирован = Истина;
	КонецЕсли;
	Если РезультатФормирования.ВариантМодифицирован
		Или ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопСвойства, "ПользовательскиеНастройкиМодифицированы") = Истина Тогда
		РезультатФормирования.ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	ДопСвойства.Удалить("ВариантМодифицирован");
	ДопСвойства.Удалить("ПользовательскиеНастройкиМодифицированы");
	
	Если РезультатФормирования.ВариантМодифицирован
		Или РезультатФормирования.ПользовательскиеНастройкиМодифицированы Тогда
		РезультатФормирования.Вставить("Событие", Новый Структура);
		РезультатФормирования.Событие.Вставить("Имя", "ПослеФормирования");
		РезультатФормирования.Событие.Вставить("Непосредственно", Истина);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ФоновоеЗаданиеВыполнено()
	Попытка
		ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор);
	Исключение
		ПоказатьОшибкиФормирования(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
	Если ЗаданиеВыполнено Тогда
		ФоновоеЗаданиеЗагрузитьРезультат();
	КонецЕсли;
	
	Возврат ЗаданиеВыполнено;
КонецФункции

&НаСервереБезКонтекста
Процедура ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор)
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВычислитьСуммуСервер(Знач ОтчетТабличныйДокумент, Знач ВыделенныеОбласти)
	Сумма = РассчитатьСуммуВыделенныхЯчеек(ОтчетТабличныйДокумент, ВыделенныеОбласти);
	Возврат Формат(Сумма, "ЧН=0");
КонецФункции

&НаСервере
Процедура УстановитьКлючиФормы()
	Если ПравоВывода Тогда
		Уникальность = КлючОбъекта;
		Если ЗначениеЗаполнено(КлючТекущегоВарианта) Тогда
			Уникальность = Уникальность + "/КлючВарианта." + КлючТекущегоВарианта;
		КонецЕсли;
		
		КлючСохраненияПоложенияОкна = Уникальность;
		
		НастройкиОтчета.Печать.Вставить("КлючПараметровПечати", Уникальность);
		НастройкиПечатиВосстановить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НастройкиПечатиСохранить()
	ЗаполнитьЗначенияСвойств(НастройкиОтчета.Печать, ОтчетТабличныйДокумент);
КонецПроцедуры

&НаСервере
Процедура НастройкиПечатиВосстановить()
	ЗаполнитьЗначенияСвойств(ОтчетТабличныйДокумент, НастройкиОтчета.Печать);
КонецПроцедуры

&НаСервере
Процедура ФоновоеЗаданиеЗагрузитьРезультат()
	
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Ложь;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = "";
	
	РезультатФормирования = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	
	Если РезультатФормирования = Неопределено Тогда
		
		СформироватьНепосредственно();
		
	Иначе
		
		НастройкиПечатиСохранить();
		ОтчетТабличныйДокумент = РезультатФормирования.ОтчетТабличныйДокумент;
		НастройкиПечатиВосстановить();
		
		Если ЗначениеЗаполнено(ОтчетДанныеРасшифровки) И ЭтоАдресВременногоХранилища(ОтчетДанныеРасшифровки) Тогда
			УдалитьИзВременногоХранилища(ОтчетДанныеРасшифровки);
		КонецЕсли;
		ОтчетДанныеРасшифровки = ПоместитьВоВременноеХранилище(РезультатФормирования.ОтчетРасшифровка, УникальныйИдентификатор);
		
		Если РезультатФормирования.ВариантМодифицирован
			Или РезультатФормирования.ПользовательскиеНастройкиМодифицированы Тогда
			РезультатФормирования.Вставить("Событие", Новый Структура);
			РезультатФормирования.Событие.Вставить("Имя", "ПослеФормирования");
			РезультатФормирования.Событие.Вставить("Непосредственно", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	ФоновоеЗаданиеАдресХранилища = Неопределено;
	ФоновоеЗаданиеИдентификатор = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиФормирования(ИнформацияОбОшибке)
	
	ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = ?(ПустаяСтрока(ОписаниеОшибки), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), ОписаниеОшибки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКомандыВыбораПользовательскихНастроек()
	Если ЗначениеЗаполнено(НастройкиОтчета.ХранилищеПользовательскихНастроек) Тогда
		МенеджерХранилища = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(НастройкиОтчета.ХранилищеПользовательскихНастроек);
	Иначе
		МенеджерХранилища = ХранилищеПользовательскихНастроекОтчетов;
	КонецЕсли;
	КлючНастроек = КлючОбъекта + "/" + КлючТекущегоВарианта;
	СписокНастроек = МенеджерХранилища.ПолучитьСписок(КлючНастроек);
	СписокНастроек.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	Группа = Элементы.ВариантыПользовательскихНастроек_Левая;
	КнопкиГруппы = Группа.ПодчиненныеЭлементы;
	
	Количество = КнопкиГруппы.Количество();
	Для Номер = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Номер;
		
		Кнопка = КнопкиГруппы[ОбратныйИндекс];
		Команда = Команды[Кнопка.Имя];
		
		КнопкаИдентификатор = Прав(Кнопка.Имя, 32);
		КнопкаУникальныйИдентификатор = ПривестиИмяКИдентификатору(КнопкаИдентификатор);
		
		ОписаниеНастройки = СписокНастроек.НайтиПоЗначению(КнопкаУникальныйИдентификатор);
		Если ОписаниеНастройки = Неопределено Тогда
			Элементы.Удалить(Кнопка);
			Команды.Удалить(Команда);
		Иначе
			ОписаниеНастройки.Значение = Кнопка;
			Команда.Заголовок = ОписаниеНастройки.Представление;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ОписаниеНастройки Из СписокНастроек Цикл
		Если ТипЗнч(ОписаниеНастройки.Значение) = Тип("КнопкаФормы") Тогда
			Элементы.Переместить(ОписаниеНастройки.Значение, Группа); // Сортировка.
			Продолжить;
		КонецЕсли;
		
		КомандаИмя = "ЗагрузитьПользовательскуюНастройку_" + ПривестиИдентификаторКИмени(ОписаниеНастройки.Значение);
		
		Команда = Команды.Добавить(КомандаИмя);
		Команда.Действие = "Подключаемый_ЗагрузитьПользовательскуюНастройку";
		Команда.Заголовок = ОписаниеНастройки.Представление;
		
		Кнопка = Элементы.Добавить(КомандаИмя, Тип("КнопкаФормы"), Группа);
		Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		Кнопка.ИмяКоманды = КомандаИмя;
		
		ПостоянныеКоманды.Добавить(КомандаИмя);
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти


