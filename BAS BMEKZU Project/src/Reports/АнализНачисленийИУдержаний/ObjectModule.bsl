#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает номер версии универсального механизма, с которой совместим отчет.
//
Функция ВерсияСтандартныхФункцийОтчетов() Экспорт
	Возврат "1";
КонецФункции

// Функция возвращает структуру настроек отчета
//
Функция ПолучитьНастройкиОтчета() Экспорт
	
	Настройки = ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию();  // получим настройки по умолчанию
	Настройки.СоответствиеПериодичностиПараметров.Вставить(Новый ПараметрКомпоновкиДанных("Период"), Перечисления.ДоступныеПериодыОтчета.Месяц);
	Возврат Настройки;
	
КонецФункции

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	КлючВарианта = НеОпределено;
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("КлючВарианта", КлючВарианта);
	
	Если КлючВарианта = "П6" Тогда
		
		Попытка 
			
			ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			ДокументРезультат.АвтоМасштаб = Истина;
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

			НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
			
			ЗарплатаКадры.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета.ПользовательскиеПоля.Элементы);
			ТекстЗапросаДляИзменения = СхемаКомпоновкиДанных.НаборыДанных.НачисленияУдержания.Запрос;
			ТекстЗапросаИзмененный = СтрЗаменить(ТекстЗапросаДляИзменения,"	ВЫБОР КОГДА ПолныеДанные.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
				|		ТОГДА ОсновныеСотрудникиОрганизации.Сотрудник
				|		ИНАЧЕ ПолныеДанные.Сотрудник
				|	КОНЕЦ КАК Сотрудник,",
				"	ОсновныеСотрудникиОрганизации.Сотрудник,");
			СхемаКомпоновкиДанных.НаборыДанных.НачисленияУдержания.Запрос = ТекстЗапросаИзмененный;
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
				НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

			СоответствиеПользовательскихПолей = ЗарплатаКадры.СоответствиеПользовательскихПолей(НастройкиОтчета.ПользовательскиеПоля.Элементы);
			
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);

			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ДаныеОтчета = Новый ДеревоЗначений;
			ПроцессорВывода.УстановитьОбъект(ДаныеОтчета);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			
			Макет = ПолучитьМакет("ПФ_MXL_UK_П6");
			
			Для каждого СтрокаОрганизации Из ДаныеОтчета.Строки Цикл
				Если НЕ (СтрокаОрганизации.МесяцНачисления = Неопределено И СтрокаОрганизации.Организация = Неопределено) Тогда
					ВывестиОрганизациюП6(СтрокаОрганизации, ДокументРезультат, Макет, СоответствиеПользовательскихПолей);
				КонецЕсли;
			КонецЦикла;
			
			ДопСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
			ДопСвойства.Вставить("ОтчетПустой", ДаныеОтчета.Строки.Количество() = 0);
			
			СтандартнаяОбработка = Ложь;
			
		Исключение
			Инфо = ИнформацияОбОшибке();
			ВызватьИсключение НСтр("ru='В настройку отчета Типовая форма П-6 внесены критичные изменения. Отчет не будет сформирован.';uk='У настройку звіту Типова форма П-6 внесено критичні зміни. Звіт не буде сформований.'") + " " + Инфо.Описание;
		КонецПопытки;
		
	ИначеЕсли КлючВарианта = "П7" Тогда
		
		Попытка 
			
			ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			ДокументРезультат.АвтоМасштаб = Истина;
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

			НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
			
			ЗарплатаКадры.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета.ПользовательскиеПоля.Элементы);
			
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
				НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

			СоответствиеПользовательскихПолей = ЗарплатаКадры.СоответствиеПользовательскихПолей(НастройкиОтчета.ПользовательскиеПоля.Элементы);
			
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);

			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ДаныеОтчета = Новый ДеревоЗначений;
			ПроцессорВывода.УстановитьОбъект(ДаныеОтчета);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			
			Макет = ПолучитьМакет("ПФ_MXL_UK_П7");
			
			Для каждого СтрокаОрганизации Из ДаныеОтчета.Строки Цикл
				ВывестиОрганизациюП7(СтрокаОрганизации, ДокументРезультат, Макет, СоответствиеПользовательскихПолей);
			КонецЦикла;
			
			ДопСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
			ДопСвойства.Вставить("ОтчетПустой", ДаныеОтчета.Строки.Количество() = 0);
			
			СтандартнаяОбработка = Ложь;
			
		Исключение
			Инфо = ИнформацияОбОшибке();
			ВызватьИсключение НСтр("ru='В настройку отчета Типовая форма П-7 внесены критичные изменения. Отчет не будет сформирован.';uk='У настройку звіту Типова форма П-7 внесено критичні зміни. Звіт не буде сформований.'") + " " + Инфо.Описание;
		КонецПопытки;
		
	ИначеЕсли КлючВарианта = "РасчетнаяВедомость" Тогда
		
		Попытка
			
			ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
			ДокументРезультат.АвтоМасштаб = Истина;
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			
			НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
			
			ЗарплатаКадры.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета.ПользовательскиеПоля.Элементы);
			
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
				НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			СоответствиеПользовательскихПолей = ЗарплатаКадры.СоответствиеПользовательскихПолей(НастройкиОтчета.ПользовательскиеПоля.Элементы);
			
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ДаныеОтчета = Новый ДеревоЗначений;
			ПроцессорВывода.УстановитьОбъект(ДаныеОтчета);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			Макет = УправлениеПечатью.МакетПечатнойФормы("Отчет.АнализНачисленийИУдержаний.ПФ_MXL_РасчетнаяВедомость");

			Макеты = Новый Структура("ШапкаДокумента,Шапка,Строка,ПустаяСтрока,Подвал,ИтогоПоСтранице,ИтогоПоВедомости");
			
			Макеты.ШапкаДокумента = Макет.ПолучитьОбласть("ШапкаДокумента");
			Макеты.Шапка = Макет.ПолучитьОбласть("Шапка");
			Макеты.Строка = Макет.ПолучитьОбласть("Строка");
			Макеты.ПустаяСтрока = Макет.ПолучитьОбласть("Строка");
			Макеты.Подвал = Макет.ПолучитьОбласть("Подвал");
			Макеты.ИтогоПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
			Макеты.ИтогоПоВедомости = Макет.ПолучитьОбласть("ИтогоПоВедомости");
			
			// Нужно проверить включена ли группировка по подразделениям
			ЕстьГруппировкаПоПодразделению = Ложь;
			ПараметрГруппировки = Новый ПараметрКомпоновкиДанных("РазбиватьПоПодразделениям");
			ЕстьГруппировкаПоПодразделению = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГруппировки).Значение;
			ПараметрДополнитьВедомостьПустымиСтроками = Новый ПараметрКомпоновкиДанных("ДополнитьВедомостьПустымиСтроками");
			ДополнитьВедомостьПустымиСтроками = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрДополнитьВедомостьПустымиСтроками).Значение;
			Для каждого СтрокаМесяца Из ДаныеОтчета.Строки Цикл
				Для Каждого СтрокаОрганизации Из СтрокаМесяца.Строки Цикл
					ВывестиОрганизациюРасчетнаяВедомость(СтрокаОрганизации, ДокументРезультат, Макеты, ЕстьГруппировкаПоПодразделению, СоответствиеПользовательскихПолей, ДополнитьВедомостьПустымиСтроками);
				КонецЦикла;
			КонецЦикла;
			
			ДопСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
			ДопСвойства.Вставить("ОтчетПустой", ДаныеОтчета.Строки.Количество() = 0);
			
			СтандартнаяОбработка = Ложь;
			
		Исключение
			Инфо = ИнформацияОбОшибке();
			ВызватьИсключение НСтр("ru='В настройку отчета Расчетная ведомость внесены критичные изменения. Отчет не будет сформирован.';uk='У настройку звіту Розрахункова відомість внесені критичні зміни. Звіт не буде сформований.'") + " " + Инфо.Описание;
		КонецПопытки;
		
	ИначеЕсли КлючВарианта = "РасчетныйЛисток" Тогда
		Попытка 
			
			ДокументРезультат.АвтоМасштаб = Истина;
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

			НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
			
			Если КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("Период") Тогда
				НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("Период", КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Период);
			КонецЕсли; 

			ЗарплатаКадры.ЗаполнитьПользовательскиеПоляВариантаОтчета(КлючВарианта, НастройкиОтчета.ПользовательскиеПоля.Элементы);
			ТекстЗапросаДляИзменения = СхемаКомпоновкиДанных.НаборыДанных.НачисленияУдержания.Запрос;
			СхемаКомпоновкиДанных.НаборыДанных.НачисленияУдержания.Запрос = ТекстЗапросаДляИзменения;
			
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
				НастройкиОтчета, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

			СоответствиеПользовательскихПолей = ЗарплатаКадры.СоответствиеПользовательскихПолей(НастройкиОтчета.ПользовательскиеПоля.Элементы);
			
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);

			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ДаныеОтчета = Новый ДеревоЗначений;
			ПроцессорВывода.УстановитьОбъект(ДаныеОтчета);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			
			Макет = ПолучитьМакет("ПФ_MXL_РасчетныйЛисток");
			
			Макеты = Новый Структура("Шапка,НачисленоУдержано,ПрочиеВыплачено,СтрокаДвижений,Итог12,Итог34,Сальдо,Группировка");
			
			Макеты.Шапка = Макет.ПолучитьОбласть("Шапка");
			Макеты.НачисленоУдержано = Макет.ПолучитьОбласть("НачисленоУдержано");
			Макеты.ПрочиеВыплачено = Макет.ПолучитьОбласть("ПрочиеВыплачено");
			Макеты.СтрокаДвижений = Макет.ПолучитьОбласть("СтрокаДвижений");
			Макеты.Итог12 = Макет.ПолучитьОбласть("Итог12");
			Макеты.Итог34 = Макет.ПолучитьОбласть("Итог34");
			Макеты.Сальдо = Макет.ПолучитьОбласть("Сальдо");
			Макеты.Группировка = Макет.ПолучитьОбласть("Группировка");
			
			// Нужно проверить включена ли группировка по подразделениям
			ЕстьГруппировкаПоПодразделению = Ложь;
			ПараметрГруппировки = Новый ПараметрКомпоновкиДанных("РазбиватьПоПодразделениям");
			ЕстьГруппировкаПоПодразделению = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрГруппировки).Значение;
			
			Для каждого СтрокаМесяца Из ДаныеОтчета.Строки Цикл
				Для Каждого СтрокаОрганизации Из СтрокаМесяца.Строки Цикл
					ВывестиОрганизациюРасчетныйЛисток(СтрокаОрганизации, ДокументРезультат, Макеты, ЕстьГруппировкаПоПодразделению, СоответствиеПользовательскихПолей);
				КонецЦикла;
			КонецЦикла;
			
			ДопСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
			ДопСвойства.Вставить("ОтчетПустой", ДаныеОтчета.Строки.Количество() = 0);
			
			СтандартнаяОбработка = Ложь;
			
		Исключение
			Инфо = ИнформацияОбОшибке();
			ВызватьИсключение НСтр("ru='В настройку отчета ""Расчетный листок"" внесены критичные изменения. Отчет не будет сформирован.';uk='У настройку звіту ""Розрахунковий листок"" внесено критичні зміни. Звіт не буде сформований.'") + " " + Инфо.Описание;
		КонецПопытки;
		
	ИначеЕсли КлючВарианта = "АнализЗарплатыПоПодразделениямИСотрудникам" Тогда
		
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		
		ЗарплатаКадры.УстановитьОтборВариантаОтчета(КлючВарианта, НастройкиОтчета);
		
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает значение Истина, если в группировках элементов структуры присутствует поле "Период регистрации"
//
Функция НайтиМесяцНачисления(Структура)
	
	ЕстьПоле = Ложь;
	
	Если ТипЗнч(Структура) <> Тип("ГруппировкаКомпоновкиДанных")
       и ТипЗнч(Структура) <> Тип("ГруппировкаТаблицыКомпоновкиДанных")
	   и ТипЗнч(Структура) <> Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		
		Возврат ЕстьПоле;
		
	КонецЕсли;
	
	ПолеМесяцНачисления = Новый ПолеКомпоновкиДанных("МесяцНачисления");
	
	Для каждого ПолеГруппировки из Структура.ПоляГруппировки.Элементы Цикл
		
		Если ПолеГруппировки.Использование И ПолеГруппировки.Поле = ПолеМесяцНачисления Тогда
			
			ЕстьПоле = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьПоле И Структура.Структура.Количество() <> 0 Тогда
		
		ЕстьПоле = НайтиМесяцНачисления(Структура.Структура[0]);
		
	КонецЕсли;
	
	Возврат ЕстьПоле;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции формирование отчета Типовая форма П-6

Процедура ВывестиОрганизациюП6(СтрокаОрганизации, ДокументРезультат, Макет, СоответствиеПользовательскихПолей)
	
	Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	ОбластьОтчета = Макет.ПолучитьОбласть("ОбластьОтчета");
	ОбластьОтчета.Параметры.Заполнить(СтрокаОрганизации);
	ОбластьОтчета.Параметры.Организация = СтрокаОрганизации.Организация.НаименованиеПолное;
	Если СтрокаОрганизации.СотрудникФизическоеЛицоПол = Перечисления.ПолФизическогоЛица.Женский Тогда
		ОбластьОтчета.Параметры.СотрудникФизическоеЛицоПол = "ж"
	ИначеЕсли СтрокаОрганизации.СотрудникФизическоеЛицоПол = Перечисления.ПолФизическогоЛица.Мужской Тогда	
		ОбластьОтчета.Параметры.СотрудникФизическоеЛицоПол = "ч"
	КонецЕсли;
	ОбластьОтчета.Параметры.КодДолжности = СтрокаОрганизации.Должность.КодКП;
	ОбластьОтчета.Параметры.Дата = КонецМесяца(СтрокаОрганизации.МесяцНачисления);
	ЗарплатаКадры.ЗаполнитьПараметрыПользовательскихПолей(ОбластьОтчета, СтрокаОрганизации, СоответствиеПользовательскихПолей);
	Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(СтрокаОрганизации.Организация, ТекущаяДата());
	Если ЗначениеЗаполнено(Руководители.ГлавныйБухгалтерФИО) Тогда
		ОбластьОтчета.Параметры.ФИОГлавногоБухгалтера = ОбщегоНазначенияБПВызовСервера.ПолучитьФамилиюИмяОтчество(Руководители.ГлавныйБухгалтерФИО.Фамилия, Руководители.ГлавныйБухгалтерФИО.Имя, Руководители.ГлавныйБухгалтерФИО.Отчество, Истина); // Кратко
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьОтчета);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции формирование отчета Типовая форма П-7

Процедура ВывестиОрганизациюП7(СтрокаОрганизации, ДокументРезультат, Макет, СоответствиеПользовательскихПолей)
	
	Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	ОбластьОтчета = Макет.ПолучитьОбласть("ОбластьОтчета");
	ОбластьОтчета.Параметры.Заполнить(СтрокаОрганизации);
	ОбластьОтчета.Параметры.Организация = СтрокаОрганизации.Организация.НаименованиеПолное;
	ОбластьОтчета.Параметры.Дата = КонецМесяца(СтрокаОрганизации.МесяцНачисления);
	ЗарплатаКадры.ЗаполнитьПараметрыПользовательскихПолей(ОбластьОтчета, СтрокаОрганизации, СоответствиеПользовательскихПолей);
	ДокументРезультат.Вывести(ОбластьОтчета);
	ОбластьТаблицы = Макет.ПолучитьОбласть("ОбластьТаблицы");
	Для Каждого СтрокаТаблицы Из СтрокаОрганизации.Строки Цикл
		ОбластьТаблицы.Параметры.Заполнить(СтрокаТаблицы);
		ЗарплатаКадры.ЗаполнитьПараметрыПользовательскихПолей(ОбластьТаблицы, СтрокаТаблицы, СоответствиеПользовательскихПолей);
	КонецЦикла;
	
	Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(СтрокаОрганизации.Организация, ТекущаяДата());
	Если ЗначениеЗаполнено(Руководители.ГлавныйБухгалтерФИО) Тогда
		ОбластьТаблицы.Параметры.ФИОГлавногоБухгалтера = ОбщегоНазначенияБПВызовСервера.ПолучитьФамилиюИмяОтчество(Руководители.ГлавныйБухгалтерФИО.Фамилия, Руководители.ГлавныйБухгалтерФИО.Имя, Руководители.ГлавныйБухгалтерФИО.Отчество, Истина); // Кратко
	КонецЕсли;
	
	ДокументРезультат.Вывести(ОбластьТаблицы);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции формирование отчета по макету РасчетнаяВедомость

Процедура ВывестиОрганизациюРасчетнаяВедомость(СтрокаОрганизации, ДокументРезультат, Макеты, ЕстьГруппировкаПоПодразделению, СоответствиеПользовательскихПолей, ДополнитьВедомостьПустымиСтроками)
	Если ЕстьГруппировкаПоПодразделению Тогда
		Для Каждого СтрокаПодразделения Из СтрокаОрганизации.Строки Цикл
			ВывестиПодразделениеРасчетнаяВедомость(СтрокаПодразделения, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей,, ДополнитьВедомостьПустымиСтроками);
		КонецЦикла;
	Иначе
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		Макеты.ШапкаДокумента.Параметры.Заполнить(СтрокаОрганизации);
		Макеты.ШапкаДокумента.Параметры.Организация = СтрокаОрганизации.Организация.НаименованиеПолное;
		Макеты.Шапка.Параметры.Заполнить(СтрокаОрганизации);
		
		Документ = Неопределено;
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("Документ", Документ);
		Если Документ <> Неопределено Тогда
			ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Документ,
				"Номер, Дата, Руководитель, ДолжностьРуководителя, ГлавныйБухгалтер, Кассир, ДолжностьКассира, Бухгалтер");
			
			СтруктураФИОРуководителя = ФизическиеЛицаКлиентСервер.ФамилияИмяОтчество(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДокумента.Руководитель, "ФИО"));
			СтруктураФИОГлавногоБухгалтера = ФизическиеЛицаКлиентСервер.ФамилияИмяОтчество(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДокумента.ГлавныйБухгалтер, "ФИО"));
			СтруктураФИОКассира = ФизическиеЛицаКлиентСервер.ФамилияИмяОтчество(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДокумента.Кассир, "ФИО"));
			СтруктураФИОБухгалтера = ФизическиеЛицаКлиентСервер.ФамилияИмяОтчество(
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДокумента.Бухгалтер, "ФИО"));
			
			Макеты.ШапкаДокумента.Параметры.НомерД = ДанныеДокумента.Номер;
			Макеты.ШапкаДокумента.Параметры.ФИОРуководителя = ФизическиеЛицаБП.ФамилияИнициалыФизЛица(
					Неопределено,
					СтруктураФИОРуководителя.Фамилия,
					СтруктураФИОРуководителя.Имя,
					СтруктураФИОРуководителя.Отчество);
			Макеты.ШапкаДокумента.Параметры.ДолжностьРуководителя = ДанныеДокумента.ДолжностьРуководителя;
			Макеты.ШапкаДокумента.Параметры.ФИОГлавногоБухгалтера = ФизическиеЛицаБП.ФамилияИнициалыФизЛица(
					Неопределено,
					СтруктураФИОГлавногоБухгалтера.Фамилия,
					СтруктураФИОГлавногоБухгалтера.Имя,
					СтруктураФИОГлавногоБухгалтера.Отчество);
		Иначе
			Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(СтрокаОрганизации.Организация, ТекущаяДата());
			Если ЗначениеЗаполнено(Руководители.Руководитель) Тогда
				Макеты.ШапкаДокумента.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
				Макеты.ШапкаДокумента.Параметры.ФИОРуководителя = Руководители.РуководительПредставление;
			КонецЕсли;
			Если ЗначениеЗаполнено(Руководители.ГлавныйБухгалтерФИО) Тогда
				Макеты.ШапкаДокумента.Параметры.ФИОГлавногоБухгалтера = Руководители.ГлавныйБухгалтер;
			КонецЕсли;
		КонецЕсли;
		
		ЗарплатаКадры.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ШапкаДокумента, СтрокаОрганизации, СоответствиеПользовательскихПолей);
		
		ДанныеВедомости = Неопределено;
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДанныеВедомости", ДанныеВедомости);
		Если ДанныеВедомости = Неопределено Тогда
			КВыплате = СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить("КВыплате")];
		Иначе
			КВыплате = ДанныеВедомости.Итог("КВыплате");
			СтрокаОрганизации[СоответствиеПользовательскихПолей.Получить("КВыплате")] = КВыплате;
		КонецЕсли;
		
		ДокументРезультат.Вывести(Макеты.ШапкаДокумента);
		
		ЗарплатаКадры.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаОрганизации, СоответствиеПользовательскихПолей);
		Макеты.Шапка.Параметры.ГруппаНачислений1 = НСтр("ru='Повременно';uk='Почасово'");
		Макеты.Шапка.Параметры.ГруппаНачислений2 = НСтр("ru='Сдельно';uk='Відрядно'");
		ДокументРезультат.Вывести(Макеты.Шапка);
		
		НомерСтроки = 0;
		ПромежуточныеИтоги = ПромежуточныеИтогиПоСтраницеРасчетнаяВедомость();
		
		Для Каждого СтрокаПодразделения Из СтрокаОрганизации.Строки Цикл
			Для Каждого СтрокаСотрудника Из СтрокаПодразделения.Строки Цикл
				ВывестиСотрудникаРасчетнаяВедомость(НомерСтроки, СтрокаСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ПромежуточныеИтоги, ДанныеВедомости);
			КонецЦикла;
		КонецЦикла;
		ДополнитьСтраницуРасчетнаяВедомость(НомерСтроки, Макеты, ДокументРезультат, ПромежуточныеИтоги, ДополнитьВедомостьПустымиСтроками);
		Макеты.ИтогоПоВедомости.Параметры.Заполнить(СтрокаОрганизации);
		ЗарплатаКадры.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ИтогоПоВедомости, СтрокаОрганизации, СоответствиеПользовательскихПолей);
		Макеты.Подвал.Параметры.Заполнить(СтрокаОрганизации);
		Если Документ <> Неопределено Тогда
			Макеты.Подвал.Параметры.ФИОКассира = ФизическиеЛицаБП.ФамилияИнициалыФизЛица(
					Неопределено,
					СтруктураФИОКассира.Фамилия,
					СтруктураФИОКассира.Имя,
					СтруктураФИОКассира.Отчество);
			Макеты.Подвал.Параметры.ДолжностьКассира = ДанныеДокумента.ДолжностьКассира;
			Макеты.Подвал.Параметры.ФИОБухгалтера = ФизическиеЛицаБП.ФамилияИнициалыФизЛица(
					Неопределено,
					СтруктураФИОБухгалтера.Фамилия,
					СтруктураФИОБухгалтера.Имя,
					СтруктураФИОБухгалтера.Отчество);
		КонецЕсли;
		
		ДокументРезультат.Вывести(Макеты.ИтогоПоВедомости);
		ДокументРезультат.Вывести(Макеты.Подвал);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиПодразделениеРасчетнаяВедомость(СтрокаПодразделения, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ВывестиПодразделениеРасчетнаяВедомость, ДополнитьВедомостьПустымиСтроками)
	Макеты.ШапкаДокумента.Параметры.Заполнить(СтрокаПодразделения);
	Макеты.ШапкаДокумента.Параметры.Организация = СтрокаПодразделения.Организация.НаименованиеПолное;
	//Макеты.ШапкаДокумента.Параметры.ДатаД = Формат(ЗарплатаКадрыКлиентСервер.ДатаСеанса(), "ДЛФ=D");
	Макеты.Шапка.Параметры.Заполнить(СтрокаПодразделения);
	Документ = Неопределено;
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("Документ", Документ);
	Если Документ <> Неопределено Тогда
		ДанныеДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Документ,
			"Номер, Дата, Руководитель, ДолжностьРуководителя, ГлавныйБухгалтер, Кассир, ДолжностьКассира");
		
		СтруктураФИОРуководителя = ФизическиеЛицаКлиентСервер.ФамилияИмяОтчество(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДокумента.Руководитель, "ФИО"));
		СтруктураФИОГлавногоБухгалтера = ФизическиеЛицаКлиентСервер.ФамилияИмяОтчество(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДокумента.ГлавныйБухгалтер, "ФИО"));
		СтруктураФИОКассира = ФизическиеЛицаКлиентСервер.ФамилияИмяОтчество(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДокумента.Кассир, "ФИО"));
		
		Макеты.ШапкаДокумента.Параметры.НомерДокумента = ДанныеДокумента.Номер;
		//Макеты.ШапкаДокумента.Параметры.ДатаДокумента = ДанныеДокумента.Дата;
		Макеты.ШапкаДокумента.Параметры.ФИОРуководителя = ФизическиеЛицаБП.ФамилияИнициалыФизЛица(
				Неопределено,
				СтруктураФИОРуководителя.Фамилия,
				СтруктураФИОРуководителя.Имя,
				СтруктураФИОРуководителя.Отчество);
		Макеты.ШапкаДокумента.Параметры.ДолжностьРуководителя = ДанныеДокумента.ДолжностьРуководителя;
		Макеты.ШапкаДокумента.Параметры.ФИОГлавногоБухгалтера = ФизическиеЛицаБП.ФамилияИнициалыФизЛица(
				Неопределено,
				СтруктураФИОГлавногоБухгалтера.Фамилия,
				СтруктураФИОГлавногоБухгалтера.Имя,
				СтруктураФИОГлавногоБухгалтера.Отчество);
	Иначе		
		Руководители = ОтветственныеЛицаБП.ОтветственныеЛица(СтрокаПодразделения.Организация, ТекущаяДата());
		Если ЗначениеЗаполнено(Руководители.Руководитель) Тогда
			Макеты.ШапкаДокумента.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
			Макеты.ШапкаДокумента.Параметры.ФИОРуководителя = Руководители.РуководительПредставление;
		КонецЕсли;
		Если ЗначениеЗаполнено(Руководители.ГлавныйБухгалтерФИО) Тогда
			Макеты.ШапкаДокумента.Параметры.ФИОГлавногоБухгалтера = Руководители.ГлавныйБухгалтер;
		КонецЕсли;
	КонецЕсли;
	ЗарплатаКадры.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ШапкаДокумента, СтрокаПодразделения, СоответствиеПользовательскихПолей);
	ДокументРезультат.Вывести(Макеты.ШапкаДокумента);
	ЗарплатаКадры.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаПодразделения, СоответствиеПользовательскихПолей);
	Макеты.Шапка.Параметры.ГруппаНачислений1 = НСтр("ru='Повременно';uk='Почасово'");
	Макеты.Шапка.Параметры.ГруппаНачислений2 = НСтр("ru='Сдельно';uk='Відрядно'");
	ДокументРезультат.Вывести(Макеты.Шапка);
	НомерСтроки = 0;
	ПромежуточныеИтоги = ПромежуточныеИтогиПоСтраницеРасчетнаяВедомость();
	
	ДанныеВедомости = Неопределено;
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ДанныеВедомости", ДанныеВедомости);
	Для Каждого СтрокаСотрудника Из СтрокаПодразделения.Строки Цикл
		ВывестиСотрудникаРасчетнаяВедомость(НомерСтроки, СтрокаСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ПромежуточныеИтоги, ДанныеВедомости);
	КонецЦикла;
	ДополнитьСтраницуРасчетнаяВедомость(НомерСтроки, Макеты, ДокументРезультат, ПромежуточныеИтоги, ДополнитьВедомостьПустымиСтроками);
	Макеты.ИтогоПоВедомости.Параметры.Заполнить(СтрокаПодразделения);
	ЗарплатаКадры.ЗаполнитьПараметрыПользовательскихПолей(Макеты.ИтогоПоВедомости, СтрокаПодразделения, СоответствиеПользовательскихПолей);
	Макеты.Подвал.Параметры.Заполнить(СтрокаПодразделения);
	Если Документ <> Неопределено Тогда
		Макеты.Подвал.Параметры.ФИОКассира = ФизическиеЛицаБП.ФамилияИнициалыФизЛица(
				Неопределено,
				СтруктураФИОКассира.Фамилия,
				СтруктураФИОКассира.Имя,
				СтруктураФИОКассира.Отчество);
		Макеты.Подвал.Параметры.ДолжностьКассира = ДанныеДокумента.ДолжностьКассира;
	КонецЕсли;
	ДокументРезультат.Вывести(Макеты.ИтогоПоВедомости);
	ДокументРезультат.Вывести(Макеты.Подвал);
КонецПроцедуры

Процедура ВывестиСотрудникаРасчетнаяВедомость(НомерСтроки, СтрокаСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ПромежуточныеИтоги, ДанныеВедомости)
	
	Если ДанныеВедомости <> Неопределено Тогда
		СтрокаДанныхВедомости = ДанныеВедомости.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник");
		Если СтрокаДанныхВедомости <> Неопределено Тогда
			СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("КВыплате")] = СтрокаДанныхВедомости.КВыплате;
		КонецЕсли;
	КонецЕсли;
	
	НомерСтроки = НомерСтроки + 1;
	Макеты.Строка.Параметры.Заполнить(СтрокаСотрудника);
	Макеты.Строка.Параметры.СотрудникКод = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(СтрокаСотрудника.СотрудникКод, Истина, Истина);

	ЗарплатаКадры.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Строка, СтрокаСотрудника, СоответствиеПользовательскихПолей);
	//
	//СтруктураФИО = ФизическиеЛицаКлиентСервер.ФамилияИмяОтчество(СтрокаСотрудника.Сотрудник.ФизическоеЛицо.ФИО);
	//Макеты.Строка.Параметры.СотрудникФизическоеЛицоФИО = ФизическиеЛица.ФамилияИнициалыФизЛица(Неопределено, СтруктураФИО.Фамилия, СтруктураФИО.Имя, СтруктураФИО.Отчество);
	//
	ОтработаноРабочихДней = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноРабочихДней")];
	ОтработаноРабочихЧасов = СтрокаСотрудника[СоответствиеПользовательскихПолей.Получить("ОтработаноРабочихЧасов")];
	
	Если ОтработаноРабочихДней <> NULL И ОтработаноРабочихДней > 0 ТОГДА 
		Макеты.Строка.Параметры.ОтработаноРабочихДней = "" + ОтработаноРабочихДней + " (" + ОтработаноРабочихЧасов + ")";
	Иначе
		Макеты.Строка.Параметры.ОтработаноРабочихДней = "";
	КонецЕсли;
	
	Макеты.Строка.Параметры.НомерПП = НомерСтроки;
	
	МассивВыводимыхОбластей = Новый Массив;
	МассивВыводимыхОбластей.Добавить(Макеты.Строка);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоСтранице);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоВедомости);
	МассивВыводимыхОбластей.Добавить(Макеты.Подвал);
	Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, МассивВыводимыхОбластей) Тогда
		ЗаполнитьЗначенияСвойств(Макеты.ИтогоПоСтранице.Параметры, ПромежуточныеИтоги);
		ДокументРезультат.Вывести(Макеты.ИтогоПоСтранице);
		ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		ЗарплатаКадры.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаСотрудника, СоответствиеПользовательскихПолей);
		ДокументРезультат.Вывести(Макеты.Шапка);
		ПромежуточныеИтоги = ПромежуточныеИтогиПоСтраницеРасчетнаяВедомость();
	КонецЕсли;
	
	ДобавитьВПромежуточныйИтог(ПромежуточныеИтоги, Макеты.Строка.Параметры);
	ДокументРезультат.Вывести(Макеты.Строка);
	
КонецПроцедуры

Процедура ДополнитьСтраницуРасчетнаяВедомость(НомерСтроки, Макеты, ДокументРезультат, ПромежуточныеИтоги, ДополнитьВедомостьПустымиСтроками)
	
	МассивВыводимыхОбластей = Новый Массив;
	МассивВыводимыхОбластей.Добавить(Макеты.ПустаяСтрока);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоСтранице);
	МассивВыводимыхОбластей.Добавить(Макеты.ИтогоПоВедомости);
	МассивВыводимыхОбластей.Добавить(Макеты.Подвал);
	Если ДополнитьВедомостьПустымиСтроками Тогда 
		Пока ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультат, МассивВыводимыхОбластей) Цикл
			ДокументРезультат.Вывести(Макеты.ПустаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Макеты.ИтогоПоСтранице.Параметры, ПромежуточныеИтоги);
	ДокументРезультат.Вывести(Макеты.ИтогоПоСтранице);
	
КонецПроцедуры

Функция ПромежуточныеИтогиПоСтраницеРасчетнаяВедомость()
	
	ПромежуточныеИтоги = Новый Структура;
	
	ПромежуточныеИтоги.Вставить("НачисленоПовременно", 0);
	ПромежуточныеИтоги.Вставить("НачисленоСдельно", 0);
	ПромежуточныеИтоги.Вставить("ПрочиеДоходы", 0);
//	ПромежуточныеИтоги.Вставить("ДругиеДоходы", 0);
	ПромежуточныеИтоги.Вставить("ВсегоНачислено", 0);
	ПромежуточныеИтоги.Вставить("ПользовательскоеПоле_НДФЛ", 0);
	ПромежуточныеИтоги.Вставить("Аванс", 0);
	ПромежуточныеИтоги.Вставить("ПользовательскоеПоле_ИЛ", 0);
	ПромежуточныеИтоги.Вставить("ИндексацияЗарплаты", 0);
	ПромежуточныеИтоги.Вставить("ВоенныйСбор", 0);
	ПромежуточныеИтоги.Вставить("ВсегоУдержано", 0);
	ПромежуточныеИтоги.Вставить("ПрочиеУдержания", 0);
	ПромежуточныеИтоги.Вставить("ДолгЗаОрганизацией", 0);
	ПромежуточныеИтоги.Вставить("ДолгЗаСотрудником", 0);
	ПромежуточныеИтоги.Вставить("КВыплате", 0);
	ПромежуточныеИтоги.Вставить("ВыплаченоЗаТекущийПериод", 0);
	ПромежуточныеИтоги.Вставить("ВыплаченоЗаПрошлыйПериод", 0);
	
	Возврат ПромежуточныеИтоги;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции формирование отчета по макету РасчетныйЛисток

Процедура ВывестиОрганизациюРасчетныйЛисток(СтрокаОрганизации, ДокументРезультат, Макеты, ЕстьГруппировкаПоПодразделению, СоответствиеПользовательскихПолей)
	
	Если ЕстьГруппировкаПоПодразделению Тогда
		
		Для Каждого СтрокаПодразделения Из СтрокаОрганизации.Строки Цикл
			ВывестиПодразделениеРасчетныйЛисток(СтрокаПодразделения, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей);
		КонецЦикла;
		
	Иначе
		
		Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		Макеты.Группировка.Параметры.НазваниеПараметра =НСтр("ru='Организация';uk='Організація'");
		
		Макеты.Группировка.Параметры.Значение = СтрокаОрганизации["Организация"].НаименованиеПолное;
	
		ДокументРезультат.Вывести(Макеты.Группировка);
	
		Для Каждого СтрокаПодразделения Из СтрокаОрганизации.Строки Цикл
			Для Каждого СтрокаОсновноеМестоРаботы Из СтрокаПодразделения.Строки Цикл
				ДанныеПоНДФЛ  = ДанныеПоНДФЛ(СтрокаОсновноеМестоРаботы.Строки, СтрокаОсновноеМестоРаботы.МесяцНачисления);
				ВывестиСотрудникаРасчетныйЛисток(СтрокаОсновноеМестоРаботы, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ДанныеПоНДФЛ);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеПоНДФЛ(СтрокиСотрудников, МесяцНачисления)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Сотрудники", СтрокиСотрудников.ВыгрузитьКолонку("Сотрудник"));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(МесяцНачисления));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(МесяцНачисления));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&НачалоПериода КАК МесяцНачисления,
		|	Сотрудники.Ссылка КАК Сотрудник
		|ПОМЕСТИТЬ ВТСотрудники
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&Сотрудники)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НДФЛПоСотрудникам.ФизическоеЛицо КАК ФизическоеЛицо,
		|	НДФЛПоСотрудникам.Организация КАК Организация,
		|	СУММА(НДФЛПоСотрудникам.ДоходОборот) КАК ОблагаемыйДоход,
		|	НДФЛПоСотрудникам.Период КАК МесяцНачисления
		|ПОМЕСТИТЬ ВТОблагаемыйДоход
		|{ВЫБРАТЬ
		|	ФизическоеЛицо.*,
		|	Организация.*,
		|	ОблагаемыйДоход,
		|	МесяцНачисления}
		|ИЗ
		|	РегистрНакопления.НДФЛПоСотрудникам.Обороты(&НачалоПериода, &КонецПериода, Месяц,ДоходНДФЛ.ВидСтавкиРезидента <> ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор)) КАК НДФЛПоСотрудникам
		|{ГДЕ
		|	НДФЛПоСотрудникам.ФизическоеЛицо.*,
		|	НДФЛПоСотрудникам.Организация.*,
		|	НДФЛПоСотрудникам.Период КАК МесяцНачисления}
		|
		|СГРУППИРОВАТЬ ПО
		|	НДФЛПоСотрудникам.Период,
		|	НДФЛПоСотрудникам.Организация,
		|	НДФЛПоСотрудникам.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТСотрудники.МесяцНачисления,
		|	ВТСотрудники.Сотрудник,
		|	ВТОблагаемыйДоход.ОблагаемыйДоход
		|ИЗ
		|	ВТСотрудники КАК ВТСотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОблагаемыйДоход КАК ВТОблагаемыйДоход
		|		ПО ВТСотрудники.МесяцНачисления = ВТОблагаемыйДоход.МесяцНачисления
		|			И ВТСотрудники.Сотрудник.ФизическоеЛицо = ВТОблагаемыйДоход.ФизическоеЛицо
		|			И ВТСотрудники.Сотрудник.ГоловнаяОрганизация = ВТОблагаемыйДоход.Организация";
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ВывестиПодразделениеРасчетныйЛисток(СтрокаПодразделения, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей)
	
	Макеты.Группировка.Параметры.НазваниеПараметра =НСтр("ru='Подразделение';uk='Підрозділ'");
	Макеты.Группировка.Параметры.Значение = СтрокаПодразделения["ПодразделениеОсновноеМестоРаботы"];
	
	ДокументРезультат.Вывести(Макеты.Группировка);
	
	ДанныеПоНДФЛ  = ДанныеПоНДФЛ(СтрокаПодразделения.Строки, СтрокаПодразделения.МесяцНачисления);
	
	Для Каждого СтрокаСотрудника Из СтрокаПодразделения.Строки Цикл
		ВывестиСотрудникаРасчетныйЛисток(СтрокаСотрудника, ДокументРезультат, Макеты, СоответствиеПользовательскихПолей, ДанныеПоНДФЛ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиСотрудникаРасчетныйЛисток(СтрокаОсновноеМестоРаботы, ДокументРезультатПромежуточный, Макеты, СоответствиеПользовательскихПолей, ДанныеПоНДФЛ)
	
	ФОИспользоватьКадровыйУчет = ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет");
	
	ДокументРезультат = Новый ТабличныйДокумент;
		
	Макеты.Шапка.Параметры.Заполнить(СтрокаОсновноеМестоРаботы);
	Макеты.Шапка.Параметры.ПериодПредставление = Формат(СтрокаОсновноеМестоРаботы.МесяцНачисления, "ДФ='ММММ гггг'");
	Макеты.Шапка.Параметры.Организация = СтрокаОсновноеМестоРаботы.Организация.НаименованиеПолное;
	ЗарплатаКадры.ЗаполнитьПараметрыПользовательскихПолей(Макеты.Шапка, СтрокаОсновноеМестоРаботы, СоответствиеПользовательскихПолей);
	
	СтрокаСотрудника = Неопределено;
	СтрокаСотрудника = СтрокаОсновноеМестоРаботы.Строки.Найти(Перечисления.ВидыЗанятости.ОсновноеМестоРаботы,"ВидЗанятости");
	Если СтрокаСотрудника = Неопределено Тогда 
		СтрокаСотрудника = СтрокаОсновноеМестоРаботы.Строки.Найти(Перечисления.ВидыЗанятости.Совместительство,"ВидЗанятости");
	КонецЕсли;
	
	Если СтрокаСотрудника = Неопределено Тогда
		Возврат;
	КонецЕсли;	
		
	Макеты.Шапка.Параметры.ТабельныйНомер = СтрокаСотрудника.Сотрудник.Код;
	Макеты.Шапка.Параметры.КодПоДРФО = СтрокаСотрудника.Сотрудник.ФизическоеЛицо.КодПоДРФО;
	Макеты.Шапка.Параметры.Должность = СтрокаСотрудника.Должность;
	Макеты.Шапка.Параметры.ТарифнаяСтавка = СтрокаСотрудника.ТарифнаяСтавка;
	
	СтрокаДанныхПоНДФЛ = ДанныеПоНДФЛ.Найти(СтрокаСотрудника.Сотрудник, "Сотрудник");
	Если СтрокаДанныхПоНДФЛ <> Неопределено Тогда
		Макеты.Шапка.Параметры.Заполнить(СтрокаДанныхПоНДФЛ);
	КонецЕсли; 
	
	ДокументРезультат.Вывести(Макеты.Шапка);
	
	СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено, "Группа");
	Если СтрокаГруппы = Неопределено Тогда
		СтрокиНачислений = Новый Массив;
	Иначе
		СтрокиНачислений = СтрокаГруппы.Строки;
	КонецЕсли;
	
	СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано, "Группа");
	Если СтрокаГруппы = Неопределено Тогда
		СтрокиУдержаний = Новый Массив;
	Иначе
		СтрокиУдержаний = СтрокаГруппы.Строки;
	КонецЕсли;
	
	СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Справочно, "Группа");
	Если СтрокаГруппы = Неопределено Тогда
		СтрокиСправочно = Новый Массив;
	Иначе
		СтрокиСправочно = СтрокаГруппы.Строки;
	КонецЕсли;
	
	СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Выплачено, "Группа");
	Если СтрокаГруппы = Неопределено Тогда
		СтрокиВыплачено = Новый Массив;
	Иначе
		СтрокиВыплачено = СтрокаГруппы.Строки;
	КонецЕсли;
	СтрокаСотрудникаВнутреннееСовместительство = СтрокаОсновноеМестоРаботы.Строки.Найти(Перечисления.ВидыЗанятости.ВнутреннееСовместительство,"ВидЗанятости");
	Если Не СтрокаСотрудникаВнутреннееСовместительство = Неопределено Тогда 
		
		СтрокаГруппыВнутрСовм = СтрокаСотрудникаВнутреннееСовместительство.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Начислено, "Группа");
		Если НЕ СтрокаГруппыВнутрСовм = Неопределено Тогда
			Для Каждого СтрокаНачисленийВнутрСовм Из СтрокаГруппыВнутрСовм.Строки Цикл
				НоваяСтрока = СтрокиНачислений.Добавить();
				НоваяСтрока.МесяцНачисления = СтрокаНачисленийВнутрСовм.МесяцНачисления;
				НоваяСтрока.ВидЗанятости = СтрокаНачисленийВнутрСовм.ВидЗанятости;
				НоваяСтрока.Группа = СтрокаНачисленийВнутрСовм.Группа;
				НоваяСтрока.ВидРасчета = СтрокаНачисленийВнутрСовм.ВидРасчета;
				НоваяСтрока.ОтработаноДней = СтрокаГруппыВнутрСовм.ОтработаноДней;
				НоваяСтрока.ОтработаноЧасов = СтрокаНачисленийВнутрСовм.ОтработаноЧасов;
				НоваяСтрока.ПериодДействия = СтрокаНачисленийВнутрСовм.ПериодДействия;
				НоваяСтрока.Сумма = СтрокаНачисленийВнутрСовм.Сумма;
				НоваяСтрока.ПользовательскиеПоляПоле2 = СтрокаНачисленийВнутрСовм.ПользовательскиеПоляПоле2;
				НоваяСтрока.ПользовательскиеПоляПоле4 = Строка(СтрокаНачисленийВнутрСовм.ПользовательскиеПоляПоле4)+НСтр("ru=' (внутр.совм-во)';uk=' (внутр.сум-во)'");
				НоваяСтрока.ОплаченоДней = СтрокаНачисленийВнутрСовм.ОплаченоДней;
				НоваяСтрока.ОплаченоЧасов = СтрокаНачисленийВнутрСовм.ОплаченоЧасов;
			КонецЦикла;
		КонецЕсли;
		СтрокаГруппыВнутрСовм = СтрокаСотрудникаВнутреннееСовместительство.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.Удержано, "Группа");
		Если НЕ СтрокаГруппыВнутрСовм = Неопределено Тогда
			Для Каждого СтрокаУдержанийВнутрСовм Из СтрокаГруппыВнутрСовм.Строки Цикл
				НоваяСтрока = СтрокиУдержаний.Добавить();
				НоваяСтрока.МесяцНачисления = СтрокаУдержанийВнутрСовм.МесяцНачисления;
				НоваяСтрока.ВидЗанятости = СтрокаУдержанийВнутрСовм.ВидЗанятости;
				НоваяСтрока.Группа = СтрокаУдержанийВнутрСовм.Группа;
				НоваяСтрока.ВидРасчета = СтрокаУдержанийВнутрСовм.ВидРасчета;
				НоваяСтрока.ОтработаноДней = СтрокаУдержанийВнутрСовм.ОтработаноДней;
				НоваяСтрока.ОтработаноЧасов = СтрокаУдержанийВнутрСовм.ОтработаноЧасов;
				НоваяСтрока.ПериодДействия = СтрокаУдержанийВнутрСовм.ПериодДействия;
				НоваяСтрока.Сумма = СтрокаУдержанийВнутрСовм.Сумма;
				НоваяСтрока.ПользовательскиеПоляПоле3 = СтрокаУдержанийВнутрСовм.ПользовательскиеПоляПоле3;
				НоваяСтрока.ПользовательскиеПоляПоле5 = Строка(СтрокаУдержанийВнутрСовм.ПользовательскиеПоляПоле5)+НСтр("ru=' (внутр.совм-во)';uk=' (внутр.сум-во)'");
				НоваяСтрока.ОплаченоДней = СтрокаУдержанийВнутрСовм.ОплаченоДней;
				НоваяСтрока.ОплаченоЧасов = СтрокаУдержанийВнутрСовм.ОплаченоЧасов;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокиНачислений.Количество() > 0 ИЛИ СтрокиУдержаний.Количество() > 0 Тогда
		ДокументРезультат.Вывести(Макеты.НачисленоУдержано);
		НомерСтроки = 0;
		Пока НомерСтроки < СтрокиНачислений.Количество() ИЛИ НомерСтроки < СтрокиУдержаний.Количество() Цикл
			
			Для НомерПараметра = 0 По Макеты.СтрокаДвижений.Параметры.Количество() -1 Цикл
				Макеты.СтрокаДвижений.Параметры.Установить(НомерПараметра, "");
			КонецЦикла;
			
			Если НомерСтроки < СтрокиНачислений.Количество() Тогда
				
				СтрокаНачислений = СтрокиНачислений[НомерСтроки];
				
				Макеты.СтрокаДвижений.Параметры.ПериодДействияНачислений = СтрокаНачислений.ПериодДействия;
				
				Если СтрокаНачислений.ОплаченоДней > 0 Тогда
					ОплаченныеДниЧасы = Формат(СтрокаНачислений.ОплаченоДней, "ЧДЦ=0; ЧН=") + НСтр("ru=' дн.';uk=' дн.'");
				ИначеЕсли СтрокаНачислений.ОплаченоЧасов > 0 Тогда
					ОплаченныеДниЧасы = Формат(СтрокаНачислений.ОплаченоЧасов, "ЧДЦ=0; ЧН=") + НСтр("ru=' чс.';uk=' год.'");
				КонецЕсли;
				
				Макеты.СтрокаДвижений.Параметры.ОплаченныеДниЧасы = ОплаченныеДниЧасы;
				ЗаполнитьЗначенияСвойств(Макеты.СтрокаДвижений.Параметры, СтрокаНачислений, "ОтработаноДней,ОтработаноЧасов");
				
				ЗарплатаКадры.ЗаполнитьПараметрыПользовательскихПолей(
					Макеты.СтрокаДвижений,
					СтрокаНачислений,
					СоответствиеПользовательскихПолей,
					"ПользовательскоеПоле_Начисление,СуммаНачислено");
				
			КонецЕсли;
			
			Если НомерСтроки < СтрокиУдержаний.Количество() Тогда
				
				СтрокаУдержаний = СтрокиУдержаний[НомерСтроки];
				
				Макеты.СтрокаДвижений.Параметры.ПериодДействияУдержаний = СтрокаУдержаний.ПериодДействия;
				ЗарплатаКадры.ЗаполнитьПараметрыПользовательскихПолей(
					Макеты.СтрокаДвижений,
					СтрокаУдержаний,
					СоответствиеПользовательскихПолей,
					"ПользовательскоеПоле_Удержание,СуммаУдержано");
				
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
			ДокументРезультат.Вывести(Макеты.СтрокаДвижений);
			
		КонецЦИкла;
		
		Если ТипЗнч(СтрокиНачислений) = Тип("Массив") Тогда
			Макеты.Итог12.Параметры.СуммаНачисления = 0;
		Иначе
			Макеты.Итог12.Параметры.СуммаНачисления = СтрокиНачислений.Итог(СоответствиеПользовательскихПолей.Получить("СуммаНачислено"));
		КонецЕсли;
		
		Если ТипЗнч(СтрокиУдержаний) = Тип("Массив") Тогда
			Макеты.Итог12.Параметры.СуммаУдержания = 0;
		Иначе
			Макеты.Итог12.Параметры.СуммаУдержания = СтрокиУдержаний.Итог(СоответствиеПользовательскихПолей.Получить("СуммаУдержано"));
		КонецЕсли;
		
		ДокументРезультат.Вывести(Макеты.Итог12);
		
	КонецЕсли;
	
	Если СтрокиСправочно.Количество() > 0 ИЛИ СтрокиВыплачено.Количество() > 0 Тогда
		
		ДокументРезультат.Вывести(Макеты.ПрочиеВыплачено);
		НомерСтроки = 0;
		Пока НомерСтроки < СтрокиСправочно.Количество() ИЛИ НомерСтроки < СтрокиВыплачено.Количество() Цикл
			
			Для НомерПараметра = 0 По Макеты.СтрокаДвижений.Параметры.Количество() -1 Цикл
				Макеты.СтрокаДвижений.Параметры.Установить(НомерПараметра, "");
			КонецЦикла;
			
			Если НомерСтроки < СтрокиСправочно.Количество() Тогда
				
				СтрокаСправочно = СтрокиСправочно[НомерСтроки];
				
				Макеты.СтрокаДвижений.Параметры.Заполнить(СтрокаСправочно);
				ЗарплатаКадры.ЗаполнитьПараметрыПользовательскихПолей(Макеты.СтрокаДвижений, СтрокаСправочно, СоответствиеПользовательскихПолей);
				
			КонецЕсли;
			
			Если НомерСтроки < СтрокиВыплачено.Количество() Тогда
				
				СтрокаВыплачено = СтрокиВыплачено[НомерСтроки];
				
				Макеты.СтрокаДвижений.Параметры.Заполнить(СтрокаВыплачено);
				Макеты.СтрокаДвижений.Параметры.ПериодДействияУдержаний = СтрокаВыплачено.ПериодВзаиморасчетов;
				ЗарплатаКадры.ЗаполнитьПараметрыПользовательскихПолей(Макеты.СтрокаДвижений, СтрокаВыплачено, СоответствиеПользовательскихПолей);
				
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
			ДокументРезультат.Вывести(Макеты.СтрокаДвижений);
			
		КонецЦИкла;
		
		Если ТипЗнч(СтрокиСправочно) = Тип("Массив") Тогда
			Макеты.Итог34.Параметры.СуммаНачисления = 0;
		Иначе
			Макеты.Итог34.Параметры.СуммаНачисления = СтрокиСправочно.Итог(СоответствиеПользовательскихПолей.Получить("СуммаНачислено"));
		КонецЕсли;
		
		Если ТипЗнч(СтрокиВыплачено) = Тип("Массив") Тогда
			Макеты.Итог34.Параметры.СуммаВыплат	 = 0;
		Иначе
			Макеты.Итог34.Параметры.СуммаВыплат	 = СтрокиВыплачено.Итог(СоответствиеПользовательскихПолей.Получить("СуммаУдержано"));
		КонецЕсли;
		
		ДокументРезультат.Вывести(Макеты.Итог34);
		
	КонецЕсли; 

	СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.НачальноеСальдо, "Группа");
	Если СтрокаГруппы = Неопределено Тогда
		СуммаДолгаНаНачалоМесяца = 0;
	Иначе
		СуммаДолгаНаНачалоМесяца = СтрокаГруппы.Сумма;
	КонецЕсли;
	
	СтрокаГруппы = СтрокаСотрудника.Строки.Найти(Перечисления.ГруппыНачисленияУдержанияВыплаты.КонечноеСальдо, "Группа");
	Если СтрокаГруппы = Неопределено Тогда
		СуммаДолгаНаКонецМесяца = 0;
	Иначе
		СуммаДолгаНаКонецМесяца = СтрокаГруппы.Сумма;
	КонецЕсли;
	
	Если СуммаДолгаНаКонецМесяца <> Null И СуммаДолгаНаКонецМесяца >= 0 Тогда
		Макеты.Сальдо.Параметры.ТекстДолгНаКонецПериода = НСтр("ru='Долг за предприятием на конец месяца';uk='Борг за підприємством на кінець місяця'");
		Макеты.Сальдо.Параметры.СуммаДолгНаКонецПериода = СуммаДолгаНаКонецМесяца;
	ИначеЕсли СуммаДолгаНаКонецМесяца <> Null И СуммаДолгаНаКонецМесяца < 0 Тогда
		Макеты.Сальдо.Параметры.ТекстДолгНаКонецПериода = НСтр("ru='Долг за работником на конец месяца';uk='Борг за працівником на кінець місяця'");
		Макеты.Сальдо.Параметры.СуммаДолгНаКонецПериода = -СуммаДолгаНаКонецМесяца;
	Иначе
		Макеты.Сальдо.Параметры.ТекстДолгНаКонецПериода = НСтр("ru='Долг за предприятием на конец месяца';uk='Борг за підприємством на кінець місяця'");
		Макеты.Сальдо.Параметры.СуммаДолгНаКонецПериода = "";
	КонецЕсли;
	
	Если СуммаДолгаНаНачалоМесяца <> Null И СуммаДолгаНаНачалоМесяца >= 0 Тогда
		Макеты.Сальдо.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru='Долг за предприятием на начало месяца';uk='Борг за підприємством на початок місяця'");
		Макеты.Сальдо.Параметры.СуммаДолгНаНачалоПериода = СуммаДолгаНаНачалоМесяца;
	ИначеЕсли СуммаДолгаНаНачалоМесяца <> Null И СуммаДолгаНаНачалоМесяца < 0 Тогда
		Макеты.Сальдо.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru='Долг за работником на начало месяца';uk='Борг за працівником на початок місяця'");
		Макеты.Сальдо.Параметры.СуммаДолгНаНачалоПериода = -СуммаДолгаНаНачалоМесяца;
	Иначе
		Макеты.Сальдо.Параметры.ТекстДолгНаНачалоПериода = НСтр("ru='Долг за предприятием на начало месяца';uk='Борг за підприємством на початок місяця'");
		Макеты.Сальдо.Параметры.СуммаДолгНаНачалоПериода = "";
	КонецЕсли;
	
	ДокументРезультат.Вывести(Макеты.Сальдо);
	
	Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДокументРезультатПромежуточный, ДокументРезультат) Тогда
		ДокументРезультатПромежуточный.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	ДокументРезультатПромежуточный.Вывести(ДокументРезультат);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и Функции

Процедура ДобавитьВПромежуточныйИтог(ПромежуточныеИтоги, ДанныеСтроки)
	
	Для каждого ПромежуточныйИтог Из ПромежуточныеИтоги Цикл
		ПромежуточныеИтоги.Вставить(ПромежуточныйИтог.Ключ, ПромежуточныйИтог.Значение + ДанныеСтроки[ПромежуточныйИтог.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(ЭтотОбъект);

#КонецЕсли