#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИфункции

// Процедура заполняет области табличного документа, предназанченные для вывода удержаний.
Процедура ЗаполнитьУдержания(Регистратор, ВидРасчета, НачДата, КонДата, Сумма, НомерСтроки,
	
	ВременныйТабличныйДокумент, ФорматСумм, Язык)
	
	// ВидРасчетаУдержания
	Область = ВременныйТабличныйДокумент.Область(НомерСтроки, 9);
	Область.Текст        = ВидРасчета;
	Область.Расшифровка  = Регистратор;
	
	// ПериодУдержания
	Область = ВременныйТабличныйДокумент.Область(НомерСтроки, 12);
	Область.Текст        = ОписаниеПериода(НачДата, КонДата, Истина, Язык);
	Область.Расшифровка  = Регистратор;
	
	// СуммаУдержания
	Область = ВременныйТабличныйДокумент.Область(НомерСтроки, 14);
	Область.Текст        = Формат(Сумма, ФорматСумм);
	Область.Расшифровка  = Регистратор;
		
КонецПроцедуры
	
// Процедура выводить область "Всего" и заполняет параметры
Процедура ВывестиОбластьВсего(ВсегоНачислено, ВсегоУдержаноВыплачено, ПараметрыВсего, 
	
	ВременныйТабличныйДокумент, ФорматСумм, ОбластьВсего)
	
	ПараметрыВсего.Сумма          = Формат(ВсегоНачислено, ФорматСумм);
	ПараметрыВсего.СуммаУдержания = Формат(ВсегоУдержаноВыплачено, ФорматСумм);
	ПараметрыВсего.КВыплате       = Формат(ВсегоНачислено - ВсегоУдержаноВыплачено, ФорматСумм);
	
	ВременныйТабличныйДокумент.Вывести(ОбластьВсего);
	
	ОчиститьПараметры(ПараметрыВсего);
	
	ВсегоНачислено = 0;
	ВсегоУдержаноВыплачено = 0;
	
КонецПроцедуры
	
// Процедура очищает структуру, переданную в качестве параметра. 
Процедура ОчиститьПараметры(Параметры)
	
	Для Счетчик = 0 По Параметры.Количество() - 1 Цикл
		
		Параметры[Счетчик] = Неопределено;
		
	КонецЦикла;
		
КонецПроцедуры 

// Возвращает число
Функция ПреобразоватьВЧисло(Значение)

	Если (Значение = Null) Или (Значение = Неопределено) Тогда
		Возврат 0	
	Иначе	
		Попытка	
			Возврат Число(Значение)	
		Исключение	
			Возврат 0	
		КонецПопытки
	КонецЕсли;	

КонецФункции

// Функция формирует представление периода по дате начала и дате окончания.
Функция ОписаниеПериода(ДатаНачала, ДатаОкончания, БезДат = Истина, Язык = "")

	ЧислоНачала		= День(ДатаНачала);
	ЧислоОкончания	= День(ДатаОкончания);
	ОписаниеМесяцаГода = Лев(Формат(ДатаНачала, "Л=" + Язык +"; ДФ = 'MMMM'"),3)+" "+ Формат(ДатаНачала, "Л=" + Язык +"; ДФ = 'гг'");
	ОписаниеМесяца2    = Лев(Формат(ДатаОкончания,"Л=" + Язык +"; ДФ = 'MMMM'"),3)+" "+ Формат(ДатаОкончания, "Л=" + Язык +"; ДФ = 'гг'");
		
	Если Месяц(ДатаНачала) <> Месяц(ДатаОкончания) Тогда  
		
		Если (ДатаНачала = НачалоМесяца(ДатаНачала)) Тогда
			Перваяполовинадат = "" + ОписаниеМесяцаГода;
		Иначе
			Перваяполовинадат = ?(БезДат, "" + ЧислоНачала, "") + " " + ОписаниеМесяцаГода; 
		КонецЕсли;
		
		Если (ДатаОкончания = КонецМесяца(ДатаОкончания)) Тогда
			ВтораяПоловинаДат = ОписаниеМесяца2 ;
		Иначе
			ВтораяПоловинаДат = ?(БезДат, "" + ЧислоОкончания, "") + " " + ОписаниеМесяца2;
		КонецЕсли;
		
		Возврат Перваяполовинадат + "-" + ВтораяПоловинаДат;
		
	Иначе
		
		Если (ДатаНачала = НачалоМесяца(ДатаНачала)) И (ДатаОкончания + 86399 = КонецМесяца(ДатаОкончания)) Тогда
			Возврат ОписаниеМесяцаГода;
		ИначеЕсли ЧислоНачала = ЧислоОкончания Тогда
			Возврат ?(БезДат, "" + ЧислоНачала, "") + " " + ОписаниеМесяцаГода;
		Иначе
			Возврат ?(БезДат ,"" + ЧислоНачала + "-" + ЧислоОкончания, "") + " " + ОписаниеМесяцаГода;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции 

// Формирует запрос отчета
Функция СформироватьЗапрос(СворачиватьПоВР)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачПериода",             НачалоПериода);
	Запрос.УстановитьПараметр("НачПериодаСмещенное",    КонецДня(НачалоПериода) + 1);
	Запрос.УстановитьПараметр("КонПериода",             КонецДня(КонецПериода));
	
	МассивРасчетов = Новый Массив;
	МассивРасчетов.Добавить(Неопределено);
	МассивРасчетов.Добавить(ПланыВидовРасчета.ИНАГРО_Начисления.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВидРасчета",       МассивРасчетов);
	
	Запрос.УстановитьПараметр("СпособРасчетаВзносы", Перечисления.СпособыРасчетаНачислений.Взносы);
	Запрос.УстановитьПараметр("ВидДвиженияРасход",   ВидДвиженияНакопления.Расход );
	
	ВидыВзаиморасчетов = Новый Массив(3);
	ВидыВзаиморасчетов[0] = ПланыСчетов.Хозрасчетный.РасчетыПоНачисленнымДивидендам;
	ВидыВзаиморасчетов[1] = ПланыСчетов.Хозрасчетный.ДивидендыПолученные;
	Запрос.УстановитьПараметр("ПарамДивиденды", ВидыВзаиморасчетов);
	
	Запрос.УстановитьПараметр("парамУвольнение",	Перечисления.ПричиныИзмененияСостояния.Увольнение);
	
	КодыОперацииВыплата = Новый СписокЗначений;
	КодыОперацииВыплата.Добавить(Перечисления.КодыОперацийВзаиморасчетыСРаботникамиОрганизаций.Выплата);
	Запрос.УстановитьПараметр("ПарамКодыОперацииВыплата", КодыОперацииВыплата);
	
	ЗапросОтбор = Новый Запрос;
	ЗапросОтбор.УстановитьПараметр("НачПериода",		НачалоДня(НачалоПериода));
	ЗапросОтбор.УстановитьПараметр("КонПериода",		КонецДня(КонецПериода));
	ЗапросОтбор.УстановитьПараметр("парамУвольнение",	Перечисления.ПричиныИзмененияСостояния.Увольнение);
	
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм();

	// ТекстЗапросаРаботники
	ТекстЗапросаОтбор = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизаций.Организация КАК Организация,
		|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период
		|ПОМЕСТИТЬ Работники
		|ИЗ
		|	РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ
		|	РаботникиОрганизаций.Период <= &КонПериода
		|	И (РаботникиОрганизаций.ЗанимаемыхСтавок > 0
		|			ИЛИ РаботникиОрганизаций.ЗанимаемыхСтавок = 0
		|				И РаботникиОрганизаций.ПричинаИзмененияСостояния = &парамУвольнение)
		|
		|СГРУППИРОВАТЬ ПО
		|	РаботникиОрганизаций.Организация,
		|	РаботникиОрганизаций.Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	ДоговорникиОрганизаций.Организация,
		|	ДоговорникиОрганизаций.Сотрудник,
		|	ДоговорникиОрганизаций.ДатаОкончания
		|ИЗ
		|	Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорникиОрганизаций
		|ГДЕ
		|	ДоговорникиОрганизаций.ДатаНачала <= &КонПериода
		|	И ДоговорникиОрганизаций.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Работники.Организация,
		|	Работники.Сотрудник,
		|	ИНАГРО_РаботникиОрганизаций.ПодразделениеОрганизации
		|ИЗ
		|	Работники КАК Работники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК ИНАГРО_РаботникиОрганизаций
		|		ПО Работники.Организация = ИНАГРО_РаботникиОрганизаций.Организация
		|			И Работники.Сотрудник = ИНАГРО_РаботникиОрганизаций.Сотрудник
		|			И Работники.Период = ИНАГРО_РаботникиОрганизаций.Период
		|ГДЕ
		|	ИСТИНА";
	
	Если ЗначениеЗаполнено(Организация) Тогда		
		ЗапросОтбор.УстановитьПараметр("ПарамОрганизация", Организация);
		ТекстЗапросаОтбор = ТекстЗапросаОтбор + "
		|		И Работники.Организация = &ПарамОрганизация";
	КонецЕсли;	
		
	Если  ЗначениеЗаполнено(Подразделение) Тогда	
		ЗапросОтбор.УстановитьПараметр("ПарамПодразделение", Подразделение);
		ТекстЗапросаОтбор = ТекстЗапросаОтбор + "
		|		И ИНАГРО_РаботникиОрганизаций.ПодразделениеОрганизации = &ПарамПодразделение";	 
	КонецЕсли;
	
	Если  ЗначениеЗаполнено(Сотрудник) Тогда  			
		ЗапросОтбор.УстановитьПараметр("ПарамСотрудник", Сотрудник);
		ТекстЗапросаОтбор = ТекстЗапросаОтбор + "
		|		И Работники.Сотрудник = &ПарамСотрудник";
	КонецЕсли; 
	
	ЗапросОтбор.Текст = ТекстЗапросаОтбор;
	ТаблицаФизЛиц = ЗапросОтбор.Выполнить().Выгрузить();
	ТаблицаОрганизаций = ТаблицаФизЛиц.Скопировать();
	
	ТаблицаФизЛиц.Свернуть("Сотрудник");
	МассивФизЛиц = ТаблицаФизЛиц.ВыгрузитьКолонку("Сотрудник");
	Запрос.УстановитьПараметр("ПарамСотрудник",	МассивФизЛиц);
	
	Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	
	ТаблицаОрганизаций.Свернуть("Организация");
	МассивОрганизаций = ТаблицаОрганизаций.ВыгрузитьКолонку("Организация");
	Запрос.УстановитьПараметр("ПарамОрганизация",	МассивОрганизаций);
	
	
	МенеджерВременныхТаблиц =  Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстЗапросаВТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	ВзаиморасчетыСРаботниками.Организация КАК Организация,
	                 |	ВзаиморасчетыСРаботниками.Сотрудник КАК Сотрудник,
	                 |	ВзаиморасчетыСРаботниками.Период КАК Период
	                 |ПОМЕСТИТЬ ВТВзаиморасчетыСРаботниками
	                 |ИЗ
	                 |	РегистрНакопления.ВзаиморасчетыССотрудниками.ОстаткиИОбороты(
	                 |			&НачПериода,
	                 |			&КонПериода,
	                 |			Месяц,
	                 |			,
	                 |			Сотрудник В (&ПарамСотрудник)
	                 |				И Организация В (&ПарамОрганизация)) КАК ВзаиморасчетыСРаботниками
	                 |
	                 |ИНДЕКСИРОВАТЬ ПО
	                 |	Организация,
	                 |	Сотрудник,
	                 |	Период";
	Запрос.Текст = ТекстЗапросаВТ;
	Запрос.Выполнить();
	
	ТекстЗапросаВТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	ПлановыеНачисления.Организация КАК Организация,
	                 |	ПлановыеНачисления.Сотрудник КАК Сотрудник,
	                 |	ПлановыеНачисления.Регистратор КАК Регистратор,
	                 |	&НачПериода КАК Период,
	                 |	ПлановыеНачисления.Показатель1 КАК Размер
	                 |ПОМЕСТИТЬ ВТПлановыеНачисленияЗаПериод
	                 |ИЗ
	                 |	РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	                 |			&НачПериода,
	                 |			Сотрудник В (&ПарамСотрудник)
	                 |				И Организация В (&ПарамОрганизация)) КАК ПлановыеНачисления
	                 |ГДЕ
	                 |	ПлановыеНачисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное)
	                 |	И ПлановыеНачисления.Действует
	                 |
	                 |ОБЪЕДИНИТЬ ВСЕ
	                 |
	                 |ВЫБРАТЬ
	                 |	ПлановыеНачисления.Организация,
	                 |	ПлановыеНачисления.Сотрудник,
	                 |	ПлановыеНачисления.Регистратор,
	                 |	ПлановыеНачисления.Период,
	                 |	ПлановыеНачисления.Показатель1
	                 |ИЗ
	                 |	РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисления
	                 |ГДЕ
	                 |	ПлановыеНачисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное)
	                 |	И ПлановыеНачисления.Период > &НачПериода
	                 |	И ПлановыеНачисления.Период <= &КонПериода
	                 |	И ПлановыеНачисления.Сотрудник В(&ПарамСотрудник)
	                 |	И ПлановыеНачисления.Организация В(&ПарамОрганизация)
	                 |	И ПлановыеНачисления.Действует";
	Запрос.Текст = ТекстЗапросаВТ;
	Запрос.Выполнить();
	
	ТекстЗапросаВТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	РаботникиОрганизаций.Организация КАК Организация,
	                 |	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
	                 |	РаботникиОрганизаций.Регистратор КАК Регистратор,
	                 |	&НачПериода КАК Период,
	                 |	РаботникиОрганизаций.ПодразделениеОрганизации,
	                 |	РаботникиОрганизаций.Должность
	                 |ПОМЕСТИТЬ ВТРаботникиОрганизацийЗаПериод
	                 |ИЗ
	                 |	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(
	                 |			&НачПериода,
	                 |			ПричинаИзмененияСостояния <> &парамУвольнение
	                 |				И Сотрудник В (&ПарамСотрудник)
	                 |				И Организация В (&ПарамОрганизация)) КАК РаботникиОрганизаций
	                 |
	                 |ОБЪЕДИНИТЬ ВСЕ
	                 |
	                 |ВЫБРАТЬ
	                 |	РаботникиОрганизаций.Организация,
	                 |	РаботникиОрганизаций.Сотрудник,
	                 |	РаботникиОрганизаций.Регистратор,
	                 |	РаботникиОрганизаций.Период,
	                 |	РаботникиОрганизаций.ПодразделениеОрганизации,
	                 |	РаботникиОрганизаций.Должность
	                 |ИЗ
	                 |	РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизаций
	                 |ГДЕ
	                 |	РаботникиОрганизаций.Сотрудник В(&ПарамСотрудник)
	                 |	И РаботникиОрганизаций.Организация В(&ПарамОрганизация)
	                 |	И РаботникиОрганизаций.Период > &НачПериода
	                 |	И РаботникиОрганизаций.Период <= &КонПериода";
	
	Запрос.Текст = ТекстЗапросаВТ;
	Запрос.Выполнить();
	
	ТекстЗапросаВТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	ВзаиморасчетыСРаботниками.Период КАК ПериодРегистрации,
	                 |	ПлановыеНачисления.Сотрудник КАК Сотрудник,
	                 |	ПлановыеНачисления.Организация КАК Организация,
	                 |	ПлановыеНачисления.Размер КАК Размер,
	                 |	ПлановыеНачисления.Регистратор КАК Регистратор
	                 |ПОМЕСТИТЬ ВТПлановыеНачисления
	                 |ИЗ
	                 |	ВТВзаиморасчетыСРаботниками КАК ВзаиморасчетыСРаботниками
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                 |			ВзаиморасчетыСРаботниками.Период КАК ПериодРегистрации,
	                 |			МАКСИМУМ(ПлановыеНачисления.Период) КАК Период,
	                 |			ПлановыеНачисления.Организация КАК Организация,
	                 |			ПлановыеНачисления.Сотрудник КАК Сотрудник
	                 |		ИЗ
	                 |			ВТВзаиморасчетыСРаботниками КАК ВзаиморасчетыСРаботниками
	                 |				ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияЗаПериод КАК ПлановыеНачисления
	                 |				ПО (ПлановыеНачисления.Сотрудник = ВзаиморасчетыСРаботниками.Сотрудник)
	                 |					И (ПлановыеНачисления.Организация = ВзаиморасчетыСРаботниками.Организация)
	                 |					И (КОНЕЦПЕРИОДА(ПлановыеНачисления.Период, МЕСЯЦ) <= КОНЕЦПЕРИОДА(ВзаиморасчетыСРаботниками.Период, МЕСЯЦ))
	                 |		
	                 |		СГРУППИРОВАТЬ ПО
	                 |			ВзаиморасчетыСРаботниками.Период,
	                 |			ПлановыеНачисления.Организация,
	                 |			ПлановыеНачисления.Сотрудник) КАК СрезыПлановыхНачислений
	                 |		ПО (СрезыПлановыхНачислений.Сотрудник = ВзаиморасчетыСРаботниками.Сотрудник)
	                 |			И (СрезыПлановыхНачислений.Организация = ВзаиморасчетыСРаботниками.Организация)
	                 |			И ВзаиморасчетыСРаботниками.Период = СрезыПлановыхНачислений.ПериодРегистрации
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисленияЗаПериод КАК ПлановыеНачисления
	                 |		ПО (ПлановыеНачисления.Сотрудник = ВзаиморасчетыСРаботниками.Сотрудник)
	                 |			И (ПлановыеНачисления.Организация = ВзаиморасчетыСРаботниками.Организация)
	                 |			И (ПлановыеНачисления.Период = СрезыПлановыхНачислений.Период)
	                 |
	                 |ИНДЕКСИРОВАТЬ ПО
	                 |	ПериодРегистрации,
	                 |	Организация,
	                 |	Сотрудник";

	Запрос.Текст = ТекстЗапросаВТ;
	Запрос.Выполнить();

	ТекстЗапросаВТ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                 |	ВзаиморасчетыСРаботниками.Период КАК Период,
	                 |	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
	                 |	РаботникиОрганизаций.Организация КАК Организация,
	                 |	РаботникиОрганизаций.Регистратор КАК Регистратор,
	                 |	РаботникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	                 |	РаботникиОрганизаций.Должность КАК Должность
	                 |ПОМЕСТИТЬ ВТРаботникиОрганизаций
	                 |ИЗ
	                 |	ВТВзаиморасчетыСРаботниками КАК ВзаиморасчетыСРаботниками
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                 |			ВзаиморасчетыСРаботниками.Период КАК ПериодРегистрации,
	                 |			МАКСИМУМ(РаботникиОрганизаций.Период) КАК Период,
	                 |			РаботникиОрганизаций.Организация КАК Организация,
	                 |			РаботникиОрганизаций.Сотрудник КАК Сотрудник
	                 |		ИЗ
	                 |			ВТВзаиморасчетыСРаботниками КАК ВзаиморасчетыСРаботниками
	                 |				ЛЕВОЕ СОЕДИНЕНИЕ ВТРаботникиОрганизацийЗаПериод КАК РаботникиОрганизаций
	                 |				ПО (РаботникиОрганизаций.Сотрудник = ВзаиморасчетыСРаботниками.Сотрудник)
	                 |					И (РаботникиОрганизаций.Организация = ВзаиморасчетыСРаботниками.Организация)
	                 |					И (КОНЕЦПЕРИОДА(РаботникиОрганизаций.Период, МЕСЯЦ) <= КОНЕЦПЕРИОДА(ВзаиморасчетыСРаботниками.Период, МЕСЯЦ))
	                 |		
	                 |		СГРУППИРОВАТЬ ПО
	                 |			ВзаиморасчетыСРаботниками.Период,
	                 |			РаботникиОрганизаций.Организация,
	                 |			РаботникиОрганизаций.Сотрудник) КАК СрезыРаботникиОрганизаций
	                 |		ПО (СрезыРаботникиОрганизаций.Сотрудник = ВзаиморасчетыСРаботниками.Сотрудник)
	                 |			И (СрезыРаботникиОрганизаций.Организация = ВзаиморасчетыСРаботниками.Организация)
	                 |			И ВзаиморасчетыСРаботниками.Период = СрезыРаботникиОрганизаций.ПериодРегистрации
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаботникиОрганизацийЗаПериод КАК РаботникиОрганизаций
	                 |		ПО (РаботникиОрганизаций.Сотрудник = ВзаиморасчетыСРаботниками.Сотрудник)
	                 |			И (РаботникиОрганизаций.Организация = ВзаиморасчетыСРаботниками.Организация)
	                 |			И (РаботникиОрганизаций.Период = СрезыРаботникиОрганизаций.Период)
	                 |
	                 |ИНДЕКСИРОВАТЬ ПО
	                 |	Период,
	                 |	Организация,
	                 |	Сотрудник";

	Запрос.Текст = ТекстЗапросаВТ;
	Запрос.Выполнить();

	
	ТекстНеполаченоФСС = "не оплачено";
	
	Если ТекстНеполаченоФСС <> "" Тогда
		ЗапросФСС = Новый Запрос();
		ЗапросФСС.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ЗапросФСС.УстановитьПараметр("ПериодРегистрации", 	  	    НачалоПериода);
		ЗапросФСС.УстановитьПараметр("КонецПериодаРегистрации", 	КонецДня(КонецПериода));
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		| ОсновныеНачисленияРаботниковОрганизации.Регистратор КАК Документ
		|ПОМЕСТИТЬ ВТНачисленияФСС
		|ИЗ
		| РегистрРасчета.ИНАГРО_Начисления КАК ОсновныеНачисленияРаботниковОрганизации
		|ГДЕ
		| ОсновныеНачисленияРаботниковОрганизации.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации
		| И ОсновныеНачисленияРаботниковОрганизации.ВидРасчета.НачислениеЗаСчетФСС
		| И ОсновныеНачисленияРаботниковОрганизации.Результат <> 0
		|";
		ЗапросФСС.Текст = ТекстЗапроса;
		ЗапросФСС.Выполнить();
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		| ВзаиморасчетыФСС.Документ КАК Документ
		|ПОМЕСТИТЬ ВТПолученоОтФСС
		|ИЗ  РегистрНакопления.ИНАГРО_ВзаиморасчетыПоНачислениямЗаСчетФСС КАК ВзаиморасчетыФСС
		|ГДЕ
		|	ВзаиморасчетыФСС.Документ.ПериодРегистрации МЕЖДУ &ПериодРегистрации И &КонецПериодаРегистрации 
		|	И ВзаиморасчетыФСС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|";
		ЗапросФСС.Текст = ТекстЗапроса;
		ЗапросФСС.Выполнить();
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		| НачисленияФСС.Документ КАК Документ
		|ИЗ  ВТНачисленияФСС КАК НачисленияФСС
		| ЛЕВОЕ СОЕДИНЕНИЕ
		| ВТПолученоОтФСС КАК ПолученоОтФСС
		| ПО НачисленияФСС.Документ = ПолученоОтФСС.Документ
		|ГДЕ
		|	ПолученоОтФСС.Документ ЕСТЬ NULL
		|";
		ЗапросФСС.Текст = ТекстЗапроса;
		НеоплаченоФСС = ЗапросФСС.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");
		ТекстНеполаченоФСС = " " + ТекстНеполаченоФСС;
	Иначе
		НеоплаченоФСС = Новый Массив();
	КонецЕсли;	
	Запрос.УстановитьПараметр("НеоплаченоФСС",  НеоплаченоФСС);
	Запрос.УстановитьПараметр("ТекстНеполаченоФСС",  ТекстНеполаченоФСС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА (ФИОФизЛиц.Фамилия) ЕСТЬ NULL  
	|			ТОГДА НачисленияУдержания.Сотрудник.Представление 
	|		ИНАЧЕ ФИОФизЛиц.Фамилия + "" "" + ФИОФизЛиц.Имя + "" "" + ФИОФизЛиц.Отчество 
	|	КОНЕЦ                                              КАК ФИОФизЛицо,
	|	НачисленияУдержания.Сотрудник                      КАК Сотрудник,
	|	НачисленияУдержания.Организация                    КАК Организация,
	|	ВЫРАЗИТЬ(НачисленияУдержания.Организация.НаименованиеПолное
	|	                             КАК СТРОКА(1000))     КАК ОрганизацияНаименованиеПолное,
	|	НачисленияУдержания.ПериодРегистрации              КАК ПериодРегистрации,
	|	НачисленияУдержания.ВидДвижения                    КАК ВидДвижения,
	|	НачисленияУдержания.Регистратор                    КАК Регистратор,
	|	НачисленияУдержания.Порядок                        КАК Порядок,
	|	НачисленияУдержания.Поле1                          КАК Поле1,
	|	НачисленияУдержания.Поле2                          КАК Поле2,
	|	НачисленияУдержания.Поле3                          КАК Поле3,
	|	НачисленияУдержания.Поле4                          КАК Поле4,
	|	НачисленияУдержания.Поле5                          КАК Поле5,
	|	НачисленияУдержания.Поле6                          КАК Поле6,
	|	НачисленияУдержания.КодПоДРФО					   КАК КодПоДРФО 
	|
	|ИЗ  
	|	(ВЫБРАТЬ
	|		""00.ДанныеШапки""                                          КАК ВидДвижения,
	|		РаботникиОрганизаций.Сотрудник                              КАК Сотрудник,
	|		РаботникиОрганизаций.Организация                            КАК Организация,
	|		ВзаиморасчетыСРаботниками.Период     						КАК ПериодРегистрации,
	|		РаботникиОрганизаций.Регистратор                          	КАК Регистратор,
	|		РаботникиОрганизаций.Период                               	КАК Порядок,	
	|		РаботникиОрганизаций.Сотрудник.ИНАГРО_ТабельныйНомер		КАК Поле1,
	|		ПлановыеНачисления.Регистратор                              КАК Поле2,
	|		NULL                     									КАК Поле3, 
	|		РаботникиОрганизаций.ПодразделениеОрганизации				КАК Поле4,
	|		РаботникиОрганизаций.Должность.Представление                КАК Поле5,
	|		ПлановыеНачисления.Размер                                   КАК Поле6,
	|		РаботникиОрганизаций.Сотрудник.ФизическоеЛицо.КодПоДРФО 	КАК КодПоДРФО 
	|       ИЗ ВТВзаиморасчетыСРаботниками КАК ВзаиморасчетыСРаботниками
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачисления КАК ПлановыеНачисления
	|			ПО		ВзаиморасчетыСРаботниками.Сотрудник = ПлановыеНачисления.Сотрудник 
	|			И	ВзаиморасчетыСРаботниками.Организация  = ПлановыеНачисления.Организация
	|           И ПлановыеНачисления.ПериодРегистрации = ВзаиморасчетыСРаботниками.Период
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТРаботникиОрганизаций КАК РаботникиОрганизаций
	|			ПО		РаботникиОрганизаций.Сотрудник = ВзаиморасчетыСРаботниками.Сотрудник 
	|			И	РаботникиОрганизаций.Организация  = ВзаиморасчетыСРаботниками.Организация
	|           И РаботникиОрганизаций.Период = ВзаиморасчетыСРаботниками.Период

	|	
	|	
		|	ОБЪЕДИНИТЬ ВСЕ "+
		?(Не СворачиватьПоВР,
		"	
	|	ВЫБРАТЬ
	|		ВЫБОР 
	|			КОГДА ОсновныеНачисления.ВидРасчета.СчетУчета В (&ПарамДивиденды)
	|				ТОГДА ""09.ОсновныеНачисленияДивидендов"" 
	|			ИНАЧЕ ""01.ОсновныеНачисления"" 
	|		КОНЕЦ,
	|		ОсновныеНачисления.Сотрудник,
	|		ОсновныеНачисления.Организация,
	|		ОсновныеНачисления.ПериодРегистрации,
	|		ОсновныеНачисления.Регистратор,
	|		ОсновныеНачисления.ВидРасчета.Код,
	|		ВЫБОР КОГДА ОсновныеНачисления.ДокументОснование ССЫЛКА Документ.ИНАГРО_ЗаменыРаботниковОрганизаций 
	|				И ОсновныеНачисления.ДокументОснование.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Начисления.Замещение)
	|				ТОГДА ""Замена: ""
	|			 КОГДА ОсновныеНачисления.ДокументОснование ССЫЛКА Документ.ИНАГРО_ЗаменыРаботниковОрганизаций 
	|				И ОсновныеНачисления.ДокументОснование.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Начисления.Совмещение)
	|				ТОГДА ""Совмещение: ""
	|				ИНАЧЕ """"
	|		КОНЕЦ
	|		 + ОсновныеНачисления.ВидРасчета.Наименование + ВЫБОР
	|			КОГДА ЕСТЬNULL(ОсновныеНачисления.Сотрудник.ИНАГРО_ВидЗанятости, Значение(Перечисление.ВидыЗанятости.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
	|				ТОГДА """"
	|			ИНАЧЕ "" (по внутр. совмест-ву)""
	|		КОНЕЦ
	|		 + ВЫБОР
	|			КОГДА ОсновныеНачисления.ВидРасчета.НачислениеЗаСчетФСС И ОсновныеНачисления.Регистратор В (&НеоплаченоФСС)
	|				ТОГДА &ТекстНеполаченоФСС
	|			ИНАЧЕ """"
	|		КОНЕЦ КАК ВидРасчета,
	|		ОсновныеНачисления.ПериодДействияНачало,
	|		ОсновныеНачисления.ПериодДействияКонец,
	|		ОсновныеНачисления.Результат,
	|		ВЫБОР
	|				КОГДА ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|					ТОГДА ОсновныеНачисления.ОтработаноДней
	|				КОГДА ОсновныеНачисления.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимДням)
	|					ИЛИ ОсновныеНачисления.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремениДляСредней.ПоКалендарнымДням)
	|					ТОГДА ОсновныеНачисления.ОплаченоДнейЧасов
	|				КОГДА ОсновныеНачисления.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимЧасам)
	|					ТОГДА 0
	|				КОГДА ОсновныеНачисления.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
	|					ТОГДА ОсновныеНачисления.ОплаченоДнейЧасов
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК ОтработаноДней, 
	|		ВЫБОР
	|				КОГДА ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|					ТОГДА ОсновныеНачисления.ОтработаноЧасов
	|				КОГДА ОсновныеНачисления.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимДням)
	|					ИЛИ ОсновныеНачисления.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремениДляСредней.ПоКалендарнымДням)
	|					ТОГДА 0
	|				КОГДА ОсновныеНачисления.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимЧасам)
	|					ТОГДА ОсновныеНачисления.ОплаченоДнейЧасов
	|				КОГДА ОсновныеНачисления.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоЧасам)
	|					ИЛИ ОсновныеНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ДоплатаЗаВечерниеЧасы)
	|					ИЛИ ОсновныеНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ДоплатаЗаНочныеЧасы)
	|					ТОГДА ОсновныеНачисления.ОплаченоДнейЧасов
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК ОтработаноЧасов, 
	|           NULL 
	|	ИЗ
	|		РегистрРасчета.ИНАГРО_Начисления КАК ОсновныеНачисления
	|	
	|	ГДЕ
	|		ОсновныеНачисления.ПериодРегистрации МЕЖДУ &НачПериода И &КонПериода
	|		И ОсновныеНачисления.Сотрудник В (&ПарамСотрудник)  
	|		И ОсновныеНачисления.Организация В (&ПарамОрганизация)",
		
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.ВидРасчета.СчетУчета В (&ПарамДивиденды)
	|			ТОГДА ""09.ОсновныеНачисленияДивидендов""
	|		ИНАЧЕ ""01.ОсновныеНачисления""
	|	КОНЕЦ КАК Поле1,
	|	ОсновныеНачисления.Сотрудник,
	|	ОсновныеНачисления.Организация,
	|	ОсновныеНачисления.ПериодРегистрации,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОсновныеНачисления.Регистратор) КАК Регистратор,
	|	ОсновныеНачисления.ВидРасчета.Код,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.ДокументОснование ССЫЛКА Документ.ИНАГРО_ЗаменыРаботниковОрганизаций
	|				И ОсновныеНачисления.ДокументОснование.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Начисления.Замещение)
	|			ТОГДА ""Замена: ""
	|		КОГДА ОсновныеНачисления.ДокументОснование ССЫЛКА Документ.ИНАГРО_ЗаменыРаботниковОрганизаций
	|				И ОсновныеНачисления.ДокументОснование.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Начисления.Совмещение)
	|			ТОГДА ""Совмещение: ""
	|		ИНАЧЕ """"
	|	КОНЕЦ + ОсновныеНачисления.ВидРасчета.Наименование + ВЫБОР
	|		КОГДА ЕСТЬNULL(ОсновныеНачисления.Сотрудник.ИНАГРО_ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
	|			ТОГДА """"
	|		ИНАЧЕ "" (по внутр. совмест-ву)""
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ОсновныеНачисления.ВидРасчета.НачислениеЗаСчетФСС
	|				И ОсновныеНачисления.Регистратор В (&НеоплаченоФСС)
	|			ТОГДА &ТекстНеполаченоФСС
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВидРасчета,
	|	МИНИМУМ(ОсновныеНачисления.ПериодДействияНачало) КАК ПериодДействияНачало,
	|	МАКСИМУМ(ОсновныеНачисления.ПериодДействияКонец) КАК ПериодДействияКонец,
	|	СУММА(ОсновныеНачисления.Результат) КАК Результат,
	|	СУММА(ВЫБОР
	|			КОГДА ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|				ТОГДА ОсновныеНачисления.ОтработаноДней
	|			КОГДА ОсновныеНачисления.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимДням)
	|					ИЛИ ОсновныеНачисления.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремениДляСредней.ПоКалендарнымДням)
	|				ТОГДА ОсновныеНачисления.ОплаченоДнейЧасов
	|			КОГДА ОсновныеНачисления.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимЧасам)
	|				ТОГДА 0
	|			КОГДА ОсновныеНачисления.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоДням)
	|				ТОГДА ОсновныеНачисления.ОплаченоДнейЧасов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОтработаноДней,
	|	СУММА(ВЫБОР
	|			КОГДА ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени
	|				ТОГДА ОсновныеНачисления.ОтработаноЧасов
	|			КОГДА ОсновныеНачисления.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимДням)
	|					ИЛИ ОсновныеНачисления.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремениДляСредней.ПоКалендарнымДням)
	|				ТОГДА 0
	|			КОГДА ОсновныеНачисления.ВидУчетаВремениДляСредней = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремениДляСредней.ПоРабочимЧасам)
	|				ТОГДА ОсновныеНачисления.ОплаченоДнейЧасов
	|			КОГДА ОсновныеНачисления.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыУчетаВремени.ПоЧасам)
	|					ИЛИ ОсновныеНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ДоплатаЗаВечерниеЧасы)
	|					ИЛИ ОсновныеНачисления.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.ДоплатаЗаНочныеЧасы)
	|				ТОГДА ОсновныеНачисления.ОплаченоДнейЧасов
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОтработаноЧасов,
	|	NULL КАК Поле2
	|ИЗ
	|	РегистрРасчета.ИНАГРО_Начисления КАК ОсновныеНачисления
	|ГДЕ
	|	ОсновныеНачисления.ПериодРегистрации МЕЖДУ &НачПериода И &КонПериода
	|	И ОсновныеНачисления.Сотрудник В(&ПарамСотрудник)
	|	И ОсновныеНачисления.Организация В(&ПарамОрганизация)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.ВидРасчета.СчетУчета В (&ПарамДивиденды)
	|			ТОГДА ""09.ОсновныеНачисленияДивидендов""
	|		ИНАЧЕ ""01.ОсновныеНачисления""
	|	КОНЕЦ,
	|	ОсновныеНачисления.Сотрудник,
	|	ОсновныеНачисления.Организация,
	|	ОсновныеНачисления.ПериодРегистрации,
	|	ОсновныеНачисления.ВидРасчета.Код,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.ДокументОснование ССЫЛКА Документ.ИНАГРО_ЗаменыРаботниковОрганизаций
	|				И ОсновныеНачисления.ДокументОснование.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Начисления.Замещение)
	|			ТОГДА ""Замена: ""
	|		КОГДА ОсновныеНачисления.ДокументОснование ССЫЛКА Документ.ИНАГРО_ЗаменыРаботниковОрганизаций
	|				И ОсновныеНачисления.ДокументОснование.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ИНАГРО_Начисления.Совмещение)
	|			ТОГДА ""Совмещение: ""
	|		ИНАЧЕ """"
	|	КОНЕЦ + ОсновныеНачисления.ВидРасчета.Наименование + ВЫБОР
	|		КОГДА ЕСТЬNULL(ОсновныеНачисления.Сотрудник.ИНАГРО_ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ВнутреннееСовместительство)
	|			ТОГДА """"
	|		ИНАЧЕ "" (по внутр. совмест-ву)""
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ОсновныеНачисления.ВидРасчета.НачислениеЗаСчетФСС
	|				И ОсновныеНачисления.Регистратор В (&НеоплаченоФСС)
	|			ТОГДА &ТекстНеполаченоФСС
	|		ИНАЧЕ """"
	|	КОНЕЦ ")+"
	|	                                                                           
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""03.Удержания"" КАК ВидДвижения,
	|			УдержанияРаботниковОрганизаций.Сотрудник,
	|			УдержанияРаботниковОрганизаций.Организация,
	|			УдержанияРаботниковОрганизаций.ПериодРегистрации,
	|			УдержанияРаботниковОрганизаций.Регистратор,
	|			УдержанияРаботниковОрганизаций.ВидРасчета.Код,
	|			УдержанияРаботниковОрганизаций.ВидРасчета.Наименование,
	|			УдержанияРаботниковОрганизаций.БазовыйПериодНачало,
	|			КОНЕЦПЕРИОДА(УдержанияРаботниковОрганизаций.БазовыйПериодНачало,МЕСЯЦ),
	|			УдержанияРаботниковОрганизаций.Результат,
	|			NULL,
	|			NULL,
	|			NULL 
	|		ИЗ
	|			РегистрРасчета.ИНАГРО_Удержания КАК УдержанияРаботниковОрганизаций
	|		
	|		ГДЕ 	УдержанияРаботниковОрганизаций.ПериодРегистрации МЕЖДУ &НачПериода И &КонПериода
	|			И	УдержанияРаботниковОрганизаций.Сотрудник В (&ПарамСотрудник)  
	|			И	УдержанияРаботниковОрганизаций.Организация В (&ПарамОрганизация)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""04.НДФЛ"" КАК ВидДвижения,
	|			ВзаиморасчетыПоНДФЛ.Контрагент,
	|			ВзаиморасчетыПоНДФЛ.Организация,
	|			НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛ.Период, МЕСЯЦ),
	|			ВзаиморасчетыПоНДФЛ.Регистратор,
	|			ВзаиморасчетыПоНДФЛ.Период,
	// ВОЕННЫЙ СБОР
	|		ВЫБОР 
	|		 КОГДА ВзаиморасчетыПоНДФЛ.ДоходНДФЛ.ВидСтавкиРезидента = Значение(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор)
	|		 ТОГДА """+НСтр("ru='Военный сбор';uk='Військовий збір'", КодЯзыкаПечать)+"""
	|		 ИНАЧЕ """+НСтр("ru='НДФЛ';uk='ПДФО'", КодЯзыкаПечать)+"""
	|       КОНЕЦ,
	|			ВзаиморасчетыПоНДФЛ.Период,
	|			КОНЕЦПЕРИОДА(ВзаиморасчетыПоНДФЛ.Период, МЕСЯЦ),
	|			СУММА(ВзаиморасчетыПоНДФЛ.НалогПриход),
	|			NULL,
	|			NULL,
	|			NULL 
	|		ИЗ
	|			РегистрНакопления.ВзаиморасчетыПоНДФЛ.Обороты(&НачПериода, &КонПериода, Регистратор,
	|								Контрагент В (&ПарамСотрудник)  
	|							И	Организация В (&ПарамОрганизация)
	|			     			  ) КАК ВзаиморасчетыПоНДФЛ
	|		ГДЕ ВзаиморасчетыПоНДФЛ.Контрагент ССЫЛКА Справочник.Сотрудники
	|		
	|		СГРУППИРОВАТЬ ПО
	|			""04.НДФЛ"",
	|			ВзаиморасчетыПоНДФЛ.Контрагент,
	// ВОЕННЫЙ СБОР
	|		ВЫБОР 
	|		 КОГДА ВзаиморасчетыПоНДФЛ.ДоходНДФЛ.ВидСтавкиРезидента = Значение(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор)
	|		 ТОГДА """+НСтр("ru='Военный сбор';uk='Військовий збір'", КодЯзыкаПечать)+"""
	|		 ИНАЧЕ """+НСтр("ru='НДФЛ';uk='ПДФО'", КодЯзыкаПечать)+"""
	|       КОНЕЦ,
	|			ВзаиморасчетыПоНДФЛ.Организация,
	|			НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛ.Период, МЕСЯЦ),
	|			ВзаиморасчетыПоНДФЛ.Регистратор,
	|			ВзаиморасчетыПоНДФЛ.Период
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			""05.ВзносыВФонды"" КАК ВидДвижения,
	|			ВзносыВФонды.ФизическоеЛицо,
	|			ВзносыВФонды.Организация,
	|			НАЧАЛОПЕРИОДА(ВзносыВФонды.Период,МЕСЯЦ),
	|			NULL,
	|			ВзносыВФонды.СтатьяНалоговойДекларации.Код,
	|			ВзносыВФонды.СтатьяНалоговойДекларации.Наименование,
	|			НАЧАЛОПЕРИОДА(ВзносыВФонды.ПериодВзаиморасчетов, МЕСЯЦ),
	|			КОНЕЦПЕРИОДА(ВзносыВФонды.ПериодВзаиморасчетов, МЕСЯЦ),
	|			СУММА(ВзносыВФонды.Сумма),
	|			NULL,
	|			NULL,
	|			NULL 
	|		
	|		ИЗ	РегистрНакопления.ВзаиморасчетыПоВзносамВФонды КАК ВзносыВФонды
	|		
	|		ГДЕ ВзносыВФонды.Сумма <> 0 И
	|			ВзносыВФонды.Период МЕЖДУ &НачПериода И &КонПериода
	|		  И
	|			ВзносыВФонды.ВидДвижения 		=	&Приход
	|		  И 
	|			ВзносыВФонды.Налог.Родитель = ЗНАЧЕНИЕ(Справочник.Налоги.Взносы)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			""05.ВзносыВФонды"",
	|			ВзносыВФонды.ФизическоеЛицо,
	|			ВзносыВФонды.Организация,
	|			НАЧАЛОПЕРИОДА(ВзносыВФонды.Период,МЕСЯЦ),
	|			NULL,
	|			ВзносыВФонды.СтатьяНалоговойДекларации.Код,
	|			ВзносыВФонды.СтатьяНалоговойДекларации.Наименование,
	|			НАЧАЛОПЕРИОДА(ВзносыВФонды.ПериодВзаиморасчетов, МЕСЯЦ),
	|			КОНЕЦПЕРИОДА(ВзносыВФонды.ПериодВзаиморасчетов, МЕСЯЦ)
	|		
	|	
	|		ОБЪЕДИНИТЬ ВСЕ
	|	
	|		ВЫБРАТЬ
	|			ВЫБОР 
	|				КОГДА ВзаиморасчетыСРаботниками.СчетУчета В (&ПарамДивиденды)
	|					ТОГДА ""13.ВыплатаДивидендов"" 
	|				ИНАЧЕ ""07.ВыплатаЗарплаты"" 
	|			КОНЕЦ,
	|			ВзаиморасчетыСРаботниками.Сотрудник,
	|			ВзаиморасчетыСРаботниками.Организация,
	|			НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботниками.Период, МЕСЯЦ),
	|			ВзаиморасчетыСРаботниками.Регистратор,
	|			ВзаиморасчетыСРаботниками.Период,
	|			ВзаиморасчетыСРаботниками.КодОперации,
	|			ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов,
	|			КОНЕЦПЕРИОДА(ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов, МЕСЯЦ),
	|			СУММА(ВзаиморасчетыСРаботниками.СуммаВзаиморасчетов - ВзаиморасчетыСРаботниками.СуммаОкругления),
	|			NULL,
	|			NULL,
	|			NULL 
	|		ИЗ
	|			РегистрНакопления.ВзаиморасчетыССотрудниками КАК ВзаиморасчетыСРаботниками
	|		
	|		ГДЕ
	|			ВзаиморасчетыСРаботниками.Период МЕЖДУ &НачПериода И &КонПериода И
	|			ВзаиморасчетыСРаботниками.КодОперации В (&ПарамКодыОперацииВыплата)
	|			И	ВзаиморасчетыСРаботниками.Сотрудник В (&ПарамСотрудник)  
	|			И	ВзаиморасчетыСРаботниками.Организация В (&ПарамОрганизация)
	|  	
	|	СГРУППИРОВАТЬ ПО
	|			ВЫБОР 
	|				КОГДА ВзаиморасчетыСРаботниками.СчетУчета В (&ПарамДивиденды)
	|					ТОГДА ""13.ВыплатаДивидендов"" 
	|				ИНАЧЕ ""07.ВыплатаЗарплаты"" 
	|			КОНЕЦ,
	|			ВзаиморасчетыСРаботниками.Сотрудник,
	|			ВзаиморасчетыСРаботниками.Организация,
	|			НАЧАЛОПЕРИОДА(ВзаиморасчетыСРаботниками.Период, МЕСЯЦ),
	|			ВзаиморасчетыСРаботниками.Регистратор,
	|			ВзаиморасчетыСРаботниками.Период,
	|			ВзаиморасчетыСРаботниками.КодОперации,
	|			ВзаиморасчетыСРаботниками.ПериодВзаиморасчетов
	|	
	|		ОБЪЕДИНИТЬ ВСЕ
	|	
	|		ВЫБРАТЬ
	|				""14.ОстаткиДивиденды"",
	|			ВзаиморасчетыСРаботниками.Сотрудник,
	|			ВзаиморасчетыСРаботниками.Организация,
	|			ВзаиморасчетыСРаботниками.Период,
	|			NULL,
	|			NULL,
	|			NULL,
	|			NULL,
	|			NULL,
	|			СУММА(ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовНачальныйОстаток),
	|			СУММА(ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовКонечныйОстаток),
	|			NULL,
	|			NULL 
	|		ИЗ
	|			РегистрНакопления.ВзаиморасчетыССотрудниками.ОстаткиИОбороты(
	|			                  &НачПериода, &КонПериода, Месяц, , 
	|								Сотрудник В (&ПарамСотрудник)  
	|							И	Организация В (&ПарамОрганизация)
	|							И СчетУчета В (&ПарамДивиденды)
	|							  ) КАК ВзаиморасчетыСРаботниками
	|		
	|		СГРУППИРОВАТЬ ПО
	|				""14.ОстаткиДивиденды"",
	|			ВзаиморасчетыСРаботниками.Сотрудник,
	|			ВзаиморасчетыСРаботниками.Организация,
	|			ВзаиморасчетыСРаботниками.Период
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|	
	|		ВЫБРАТЬ
	|			""08.ОстаткиЗарплата"",
	|			ВзаиморасчетыСРаботниками.Сотрудник,
	|			ВзаиморасчетыСРаботниками.Организация,
	|			ВзаиморасчетыСРаботниками.Период,
	|			NULL,
	|			NULL,
	|			NULL,
	|			NULL,
	|			NULL,
	|			СУММА(ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовНачальныйОстаток),
	|			СУММА(ВзаиморасчетыСРаботниками.СуммаВзаиморасчетовКонечныйОстаток),
	|			NULL,
	|			NULL 
	|		ИЗ
	|			РегистрНакопления.ВзаиморасчетыССотрудниками.ОстаткиИОбороты(
	|			                  &НачПериода, &КонПериода, Месяц, , 
	|								Сотрудник В (&ПарамСотрудник)  
	|							И	Организация В (&ПарамОрганизация)
	|							И СчетУчета НЕ В (&ПарамДивиденды)
	|							  ) КАК ВзаиморасчетыСРаботниками
	|		
	|		СГРУППИРОВАТЬ ПО
	|			""08.ОстаткиЗарплата"",
	|			ВзаиморасчетыСРаботниками.Сотрудник,
	|			ВзаиморасчетыСРаботниками.Организация,
	|			ВзаиморасчетыСРаботниками.Период
    |
	|			) КАК НачисленияУдержания
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних( &КонПериода) КАК ФИОФизЛиц
	|		ПО	НачисленияУдержания.Сотрудник.ФизическоеЛицо = ФИОФизЛиц.ФизическоеЛицо
	|
	|		// список уволенных по которым были обороты + все кто актуальны для периода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (	
	|			ВЫБРАТЬ
	|				Взаиморасчеты.Сотрудник		КАК Сотрудник,
	|				Взаиморасчеты.Организация,
	|				СУММА(Взаиморасчеты.СуммаВзаиморасчетовНачальныйОстаток + Взаиморасчеты.СуммаВзаиморасчетовПриход + Взаиморасчеты.СуммаВзаиморасчетовРасход)
	|			
	|			ИЗ	РегистрНакопления.ВзаиморасчетыССотрудниками.ОстаткиИОбороты(
	|			                  &НачПериода, &КонПериода, Месяц, , Сотрудник В (&ПарамСотрудник)  
	|							И	Организация В (&ПарамОрганизация) ) КАК Взаиморасчеты
	|			СГРУППИРОВАТЬ ПО
	|				Взаиморасчеты.Сотрудник,
	|				Взаиморасчеты.Организация
	|
	|           ОБЪЕДИНИТЬ ВСЕ
	|			ВЫБРАТЬ 
	|				РаботникиОрганизаций.Организация		КАК Организация,
	|				РаботникиОрганизаций.Сотрудник			КАК Сотрудник,
	|				МАКСИМУМ(РаботникиОрганизаций.Период)	КАК Период
	|			ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизаций 
	|			ГДЕ		РаботникиОрганизаций.Период <= &КонПериода    
	|				И	РаботникиОрганизаций.Период >= &НачПериода
	|				ИЛИ	РаботникиОрганизаций.ЗанимаемыхСтавок = 0 И ПричинаИзмененияСостояния = &парамУвольнение
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиОрганизаций.Организация,
	|				РаботникиОрганизаций.Сотрудник
	|
	|           ОБЪЕДИНИТЬ ВСЕ
	|			ВЫБРАТЬ 
	|				РаботникиОрганизаций.Организация		КАК Организация,
	|				РаботникиОрганизаций.Сотрудник			КАК Сотрудник,
	|				&КонПериода								КАК Период
	|			ИЗ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних( &КонПериода, Сотрудник В (&ПарамСотрудник) И	Организация В (&ПарамОрганизация) ) КАК РаботникиОрганизаций 
	|			ГДЕ		РаботникиОрганизаций.Период <= &КонПериода    
	|				И	РаботникиОрганизаций.Период >= &НачПериода
	|				ИЛИ	РаботникиОрганизаций.ЗанимаемыхСтавок = 0 И ПричинаИзмененияСостояния = &парамУвольнение
	|			
	|							  ) КАК ВзаиморасчетыСРаботниками
	|		ПО	НачисленияУдержания.Сотрудник = ВзаиморасчетыСРаботниками.Сотрудник
	|		И	НачисленияУдержания.Организация = ВзаиморасчетыСРаботниками.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФИОФизЛицо,
	|	Организация,
	|	ПериодРегистрации,
	|	ВидДвижения,
	|	Порядок
	|
	|ИТОГИ ПО
	|	Сотрудник,
	|	ФИОФизЛицо,
	|	Организация,
	|	ПериодРегистрации,
	|	ВидДвижения";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // СформироватьЗапрос()

// Обрабатка запроса и формирования макета отчета 
Функция СформироватьНаКлиенте(ТабДок, СвернутьПоВР) Экспорт

	Макет  = ПолучитьМакет("Макет");
	
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм();
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
		
	Если НЕ ЗначениеЗаполнено(НачалоПериода) Тогда
		ТекстСообщения = НСтр("ru='Не указана дата начала периода!';uk='Не зазначена дата початку періоду!'", КодЯзыкаПечать);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат ТабДок;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КонецПериода) Тогда	
		ТекстСообщения = НСтр("ru='Не указана дата окончания периода!';uk='Не зазначена дата закінчення періоду!'", КодЯзыкаПечать);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат ТабДок;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда	
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		Если Организация = Справочники.Организации.ПустаяСсылка() Тогда
			ТекстСообщения = НСтр("ru='Не указана организация!';uk='Необхідно вказати організацію!'", КодЯзыкаПечать);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат ТабДок;
		КонецЕсли;	
	КонецЕсли;
	
	НачалоПериода = НачалоМесяца(НачалоПериода);
	КонецПериода = КонецМесяца(КонецПериода);
	ТабДок.Очистить();
	
	// Запоинаем области макета
	ОбластьШапка 	  		          = Макет.ПолучитьОбласть("Шапка");             
	ОбластьДопИнформация	          = Макет.ПолучитьОбласть("ДопИнформация");               
	ОбластьЗаголовокТЧЗарплата        = Макет.ПолучитьОбласть("Заголовок");
	ОбластьНачисленоУдержаноЗарплата  = Макет.ПолучитьОбласть("НачисленоУдержано");
	ОбластьЗаголовокТЧДивиденды       = Макет.ПолучитьОбласть("ЗаголовокДивиденды");
	ОбластьНачисленоУдержаноДивиденды = Макет.ПолучитьОбласть("НачисленоУдержаноДивиденды");
	ОбластьВсего                      = Макет.ПолучитьОбласть("Всего");
	ОбластьШапкаВыплата               = Макет.ПолучитьОбласть("ШапкаВыплата");
	ОбластьВыплата                    = Макет.ПолучитьОбласть("Выплата");
	ОбластьВсегоВыплата               = Макет.ПолучитьОбласть("ВсегоВыплата");
	ОбластьДолг                       = Макет.ПолучитьОбласть("Долг");
	ОбластьПодвал			          = Макет.ПолучитьОбласть("Подвал");
	
	ПараметрыШапка                      = ОбластьШапка.Параметры;
	ПараметрыДопИнформация              = ОбластьДопИнформация.Параметры;
	ПараметрыНачисленоУдержаноЗарплата  = ОбластьНачисленоУдержаноЗарплата.Параметры;
	ПараметрыНачисленоУдержаноДивиденды = ОбластьНачисленоУдержаноДивиденды.Параметры;
	ПараметрыВсего                      = ОбластьВсего.Параметры;
	ПараметрыШапкаВыплата               = ОбластьШапкаВыплата.Параметры;
	ПараметрыВыплата                    = ОбластьВыплата.Параметры;
	ПараметрыВсегоВыплата               = ОбластьВсегоВыплата.Параметры;
	ПараметрыДолг                       = ОбластьДолг.Параметры;
	
	РезультатЗапроса = СформироватьЗапрос(СвернутьПоВР);
	
	Если РезультатЗапроса.Пустой() Тогда
		ТекстСообщения = НСтр("ru='Данные для формирования расчетных листков не обнаружены!';uk='Дані для формування розрахункових листків не знайдені!'", КодЯзыкаПечать);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат ТабДок;	
	КонецЕсли;
	
	// В этот табличный документ будет собираться данные для РЛ
	// до проверки на возвможность его вывода (по количеству строк).
	ВременныйТабличныйДокумент = Новый ТабличныйДокумент;
	ФорматСумм      = "ЧЦ=15; ЧДЦ=2";
	ФорматПериода   = "ДФ = 'MMMM yyyy';Л="+ КодЯзыкаПечать;
	
	Язык            = "Л="+ КодЯзыкаПечать+";";
		
	ВыборкаСотр = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСотр.Следующий() Цикл
		ВыборкаФизЛицо = ВыборкаСотр.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаФизЛицо.Следующий() Цикл
			ПараметрыШапка.ФИОФизЛицо = ВыборкаФизЛицо.ФИОФизЛицо;
			
			ВыборкаОрганизация        = ВыборкаФизЛицо.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаОрганизация.Следующий() Цикл
				ПараметрыШапка.Организация = СокрП(ВыборкаОрганизация.ОрганизацияНаименованиеПолное);
				
				ВыборкаПериоды             = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				ОтбрасыватьКопейки = Ложь;
				
				Пока ВыборкаПериоды.Следующий() Цикл
					
					КоличествоСтрокНачислений         = 0;
					ВыводилсяЗаголовокЗарплата        = Ложь;
					ВыводилсяЗаголовокДивиденды       = Ложь;
					НеВыводиласьОбластьДолг           = Истина;
					ВсегоНачислено                    = 0;
					ВсегоУдержаноВыплачено            = 0;
					
					ПараметрыШапка.Заголовок  = НСтр("ru='Расчетный листок за ';uk='Розрахунковий листок за '", КодЯзыкаПечать)  + "
					|" + ПредставлениеПериода(НачалоМесяца(ВыборкаПериоды.ПериодРегистрации), КонецМесяца(ВыборкаПериоды.ПериодРегистрации), "Л = "+Локализация.ОпределитьКодЯзыкаДляФормат(КодЯзыкаПечать)+"; ФП = Истина");
					ВременныйТабличныйДокумент.Вывести(ОбластьШапка);
					ВыборкаВидДвижения        = ВыборкаПериоды.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаВидДвижения.Следующий() Цикл
						
						ВидДвижения = ВыборкаВидДвижения.ВидДвижения;
						Выборка     = ВыборкаВидДвижения.Выбрать();
						НачисленияЗарплата  = Ложь;
						УдержанияЗарплата   = Ложь;
						ПогашениеЗаймов     = Ложь;
						НачисленияДивиденды = Ложь;
						УдержанияДивиденды  = Ложь;
						
						Если Найти("01.ОсновныеНачисления,
							|02.ДополнительныеНачисления", ВидДвижения) > 0 Тогда
							
							НачисленияЗарплата = Истина
							
						ИначеЕсли Найти("03.Удержания,
							|04.НДФЛ,
							|05.ВзносыВФонды", ВидДвижения) > 0 Тогда
							
							УдержанияЗарплата = Истина
							
						ИначеЕсли Найти("06.ПогашениеЗаймов", ВидДвижения) > 0 Тогда
							
							ПогашениеЗаймов = Истина
							
						ИначеЕсли Найти("09.ОсновныеНачисленияДивидендов,
							|10.ДополнительныеНачисленияДивидендов
							|", ВидДвижения) > 0 Тогда
							
							НачисленияДивиденды	= Истина
							
						ИначеЕсли Найти("11.УдержанияДивидендов,
							|12.НДФЛДивидендов
							|", ВидДвижения) > 0 Тогда
							
							УдержанияДивиденды = Истина
							
						КонецЕсли;
						
						// Проверка предыдущего вывода
						Если ВыводилсяЗаголовокЗарплата Тогда
							
							Если НЕ (НачисленияЗарплата ИЛИ УдержанияЗарплата ИЛИ ПогашениеЗаймов) Тогда
								
								// Необходимо вывести секцию Всего
								ВывестиОбластьВсего(ВсегоНачислено, ВсегоУдержаноВыплачено, ПараметрыВсего,
								ВременныйТабличныйДокумент, ФорматСумм, ОбластьВсего);
								ВыводилсяЗаголовокЗарплата = Ложь;
								КоличествоСтрокНачислений   = 0;
								
							КонецЕсли;
							
						Иначе
							
							Если НачисленияЗарплата ИЛИ УдержанияЗарплата ИЛИ ПогашениеЗаймов Тогда
								
								// Необходимо вывести ЗаголовокЗарплат
								ВременныйТабличныйДокумент.Вывести(ОбластьЗаголовокТЧЗарплата);
								ВыводилсяЗаголовокЗарплата = Истина;
								ПараметрыНачисленоУдержано = ПараметрыНачисленоУдержаноЗарплата;
								ОбластьНачисленоУдержано   = ОбластьНачисленоУдержаноЗарплата
								
							КонецЕсли;
							
							// Проверка предыдущего вывода
							// по дивидендам
							Если ВыводилсяЗаголовокДивиденды Тогда
								
								Если НЕ (НачисленияДивиденды ИЛИ УдержанияДивиденды) Тогда
									
									// Необходимо вывести секцию Всего
									ВывестиОбластьВсего(ВсегоНачислено, ВсегоУдержаноВыплачено, ПараметрыВсего,
									ВременныйТабличныйДокумент, ФорматСумм, ОбластьВсего);
									ВыводилсяЗаголовокДивиденды = Ложь;
									
								КонецЕсли;
								
							Иначе
								
								Если НачисленияДивиденды ИЛИ НачисленияДивиденды Тогда
									
									// Необходимо вывести ЗаголовокДивиденды
									ВременныйТабличныйДокумент.Вывести(ОбластьЗаголовокТЧДивиденды);
									ВыводилсяЗаголовокДивиденды = Истина;
									ПараметрыНачисленоУдержано = ПараметрыНачисленоУдержаноДивиденды;
									ОбластьНачисленоУдержано   = ОбластьНачисленоУдержаноДивиденды
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
						
						Если ВидДвижения = "00.ДанныеШапки" Тогда
							
							Пока Выборка.Следующий() Цикл
								
								ПараметрыДопИнформация.Подразделение    = НСтр("ru='Подразделение: ';uk='Підрозділ: '",КодЯзыкаПечать) + Выборка.Поле4;
								ПараметрыДопИнформация.Должность        = НСтр("ru='Должность: ';uk='Посада: '",КодЯзыкаПечать) + Выборка.Поле5;
								ПараметрыДопИнформация.ТабельныйНомер   = НСтр("ru='Табельный номер: ';uk='Табельний номер: '",КодЯзыкаПечать) + Выборка.Поле1;
								ПараметрыДопИнформация.КодПоДРФО   = НСтр("ru='Код по ГРФЛ: ';uk='Код за ДРФО: '",КодЯзыкаПечать) + Выборка.КодПоДРФО; 
								ПараметрыДопИнформация.ОкладТариф       = НСтр("ru='Оклад/Тариф: ';uk='Оклад/Тариф: '",КодЯзыкаПечать) 
								+ Формат(Выборка.Поле6, ФорматСумм)
								+ " " + Выборка.Поле3;
								
								ПараметрыДопИнформация.Регистратор      = Выборка.Регистратор;
								ПараметрыДопИнформация.РегистраторТариф = Выборка.Поле2;
								ВременныйТабличныйДокумент.Вывести(ОбластьДопИнформация);
								
							КонецЦикла;
							
						ИначеЕсли НачисленияЗарплата ИЛИ НачисленияДивиденды Тогда
							
							Пока Выборка.Следующий() Цикл
								
								ПараметрыНачисленоУдержано.ВидРасчета  = Выборка.Поле1;
								
								ПараметрыНачисленоУдержано.Период      = ОписаниеПериода(Выборка.Поле2,	Выборка.Поле3, Истина, КодЯзыкаПечать);
								Если НачисленияЗарплата Тогда
									
									Если Выборка.Поле5 = Окр(Выборка.Поле5) Тогда 
										ПараметрыНачисленоУдержано.Дни         = Формат(Выборка.Поле5, "ЧЦ=3");
									Иначе
										ПараметрыНачисленоУдержано.Дни         = Формат(Выборка.Поле5, "ЧЦ=7; ЧДЦ=2");
									КонецЕсли;
									Если Выборка.Поле6 = Окр(Выборка.Поле6) Тогда 
										ПараметрыНачисленоУдержано.Часы        = Формат(Выборка.Поле6, "ЧЦ=4");
									Иначе
										ПараметрыНачисленоУдержано.Часы        = Формат(Выборка.Поле6, "ЧЦ=7; ЧДЦ=2");
									КонецЕсли;	
									
								КонецЕсли;																		
								ПараметрыНачисленоУдержано.Сумма       = Формат(Выборка.Поле4, ФорматСумм);
								ПараметрыНачисленоУдержано.Регистратор = Выборка.Регистратор;
								
								ВсегоНачислено = ВсегоНачислено + ПреобразоватьВЧисло(Выборка.Поле4);
								
								ВременныйТабличныйДокумент.Вывести(ОбластьНачисленоУдержано);
								КоличествоСтрокНачислений = КоличествоСтрокНачислений + 1;
								
							КонецЦикла;
							
							ОчиститьПараметры(ПараметрыНачисленоУдержано);
							
						ИначеЕсли УдержанияЗарплата ИЛИ УдержанияДивиденды Тогда
							
							ВысотаТаблицы = ВременныйТабличныйДокумент.ВысотаТаблицы;
							НомерСтроки   = ВысотаТаблицы;
							
							Пока Выборка.Следующий() Цикл
								
								Если КоличествоСтрокНачислений = 0 Тогда
									
									// Нужен вывод новых областей
									ВременныйТабличныйДокумент.Вывести(ОбластьНачисленоУдержано);
									НомерСтроки = НомерСтроки + 1;
									
								Иначе
									// Заполнение уже выведенных областей
									// Одна строка будет обработана
									КоличествоСтрокНачислений = КоличествоСтрокНачислений - 1;
									НомерСтроки               = ВысотаТаблицы - КоличествоСтрокНачислений;
									
								КонецЕсли;
								
								ЗаполнитьУдержания(Выборка.Регистратор, Выборка.Поле1, Выборка.Поле2,
								Выборка.Поле3, Выборка.Поле4, НомерСтроки,
								ВременныйТабличныйДокумент, ФорматСумм, КодЯзыкаПечать);
								
								ВсегоУдержаноВыплачено = ВсегоУдержаноВыплачено + ПреобразоватьВЧисло(Выборка.Поле4);
							КонецЦикла;
							
						ИначеЕсли ПогашениеЗаймов Тогда
							
							ВысотаТаблицы = ВременныйТабличныйДокумент.ВысотаТаблицы;
							НомерСтроки   = ВысотаТаблицы;
							
							Пока Выборка.Следующий() Цикл
								
								Для Счетчик = 4 По 5 Цикл
									
									СуммаПогашения = Выборка["Поле" + Счетчик];
									
									Если НЕ ЗначениеЗаполнено(СуммаПогашения) Тогда
										
										Продолжить;
										
									КонецЕсли;
									
									ВидРасчета = ?(Счетчик = 4, НСтр("ru='Погашения займа';uk='Погашення позики'",КодЯзыкаПечать), НСтр("ru='Проценты по займу';uk='Відсотки по позиці'",КодЯзыкаПечать));
									
									Если КоличествоСтрокНачислений = 0 Тогда
										
										// Нужен вывод новых областей
										ВременныйТабличныйДокумент.Вывести(ОбластьНачисленоУдержано);
										НомерСтроки = НомерСтроки + 1;
										
									Иначе
										// Заполнение уже выведенных областей
										
										// Одна строка будет обработана
										КоличествоСтрокНачислений = КоличествоСтрокНачислений - 1;
										НомерСтроки               = ВысотаТаблицы - КоличествоСтрокНачислений;
										
									КонецЕсли;
									
									ЗаполнитьУдержания(Выборка.Регистратор, ВидРасчета, Выборка.Поле2,
									, СуммаПогашения, НомерСтроки,
									ВременныйТабличныйДокумент, ФорматСумм, Язык);
									
									ВсегоУдержаноВыплачено = ВсегоУдержаноВыплачено + ПреобразоватьВЧисло(СуммаПогашения);
								КонецЦикла;
								
							КонецЦикла;
							
						ИначеЕсли Найти("07.ВыплатаЗарплаты, 13.ВыплатаДивидендов", ВидДвижения) > 0 Тогда
							
							Если ВидДвижения = "07.ВыплатаЗарплаты" Тогда
								ПараметрыШапкаВыплата.Выплата = НСтр("ru='Выплаты';uk='Виплати'",КодЯзыкаПечать);
							Иначе
								
								Если НеВыводиласьОбластьДолг Тогда
									
									// необходимо показать, что долгов по зарплате нет
									ПараметрыДолг.НачалоМесяца = НСтр("ru='Долг за предприятием на начало месяца: ';uk='Борг за підприємством на початок місяця: '",КодЯзыкаПечать);
									ПараметрыДолг.КонецМесяца  = НСтр("ru='Долг за предприятием на конец месяца: ';uk='Борг за підприємством на кінець місяця: '",КодЯзыкаПечать);
									ВременныйТабличныйДокумент.Вывести(ОбластьДолг);
									НеВыводиласьОбластьДолг = Ложь;
									
								КонецЕсли;
								
								ПараметрыШапкаВыплата.Выплата = НСтр("ru='Выплаты дивидендов';uk='Виплати дивідендів'",КодЯзыкаПечать);
								
							КонецЕсли;
							
							ВременныйТабличныйДокумент.Вывести(ОбластьШапкаВыплата);
							
							Пока Выборка.Следующий() Цикл
								
								ПараметрыВыплата.ВидВыплаты  = Выборка.Поле1;
								ПараметрыВыплата.ДатаВыплаты = Формат(Выборка.Порядок, "ДЛФ=D");
								ПараметрыВыплата.ЗаПериод    = ОписаниеПериода(Выборка.Поле2,	Выборка.Поле3, Ложь, КодЯзыкаПечать);
								
								Сумма = ПреобразоватьВЧисло(Выборка.Поле4);
								
								Если ОтбрасыватьКопейки Тогда
									Сумма = Цел(Сумма);
								КонецЕсли;	
								ПараметрыВыплата.Сумма       = Формат(Сумма, ФорматСумм);
								ПараметрыВыплата.Регистратор = Выборка.Регистратор;
								
								ВсегоУдержаноВыплачено = ВсегоУдержаноВыплачено + Сумма;
								ВременныйТабличныйДокумент.Вывести(ОбластьВыплата);
								
							КонецЦикла;
							
							ПараметрыВсегоВыплата.Сумма = ВсегоУдержаноВыплачено;
							ВременныйТабличныйДокумент.Вывести(ОбластьВсегоВыплата);
							ВсегоУдержаноВыплачено      = 0;
							
						ИначеЕсли Найти("08.ОстаткиЗарплата, 14.ОстаткиДивиденды", ВидДвижения) > 0 Тогда
							
							Пока Выборка.Следующий() Цикл
								
								Если Найти("08.ОстаткиЗарплата", ВидДвижения) > 0 Тогда
									
									ПараметрыДолг.НачалоМесяца = НСтр("ru='Долг предприятия на начало месяца: ';uk='Борг за підприємством на початок місяця: '",КодЯзыкаПечать);
									ПараметрыДолг.КонецМесяца  = НСтр("ru='Долг предприятия на конец месяца: ';uk='Борг за підприємством на кінець місяця: '",КодЯзыкаПечать);
									
								Иначе
									
									Если НеВыводиласьОбластьДолг Тогда
										
										// необходимо показать, что долгов по зарплате нет
										ПараметрыДолг.НачалоМесяца = НСтр("ru='Долг предприятия на начало месяца: ';uk='Борг за підприємством на початок місяця: '",КодЯзыкаПечать);
										ПараметрыДолг.КонецМесяца  = НСтр("ru='Долг предприятия на конец месяца: ';uk='Борг за підприємством на кінець місяця: '",КодЯзыкаПечать);
										ВременныйТабличныйДокумент.Вывести(ОбластьДолг);
										
									КонецЕсли;
									
									ПараметрыДолг.НачалоМесяца = НСтр("ru='Долг по дивидендам на начало месяца:';uk='Борг по дивідендах на початок місяця:'",КодЯзыкаПечать);
									ПараметрыДолг.КонецМесяца  = НСтр("ru='Долг по дивидендам на конец месяца:';uk='Борг по дивідендах на кінець місяця:'",КодЯзыкаПечать);
									
								КонецЕсли;
								
								ПараметрыДолг.СуммаНачМесяца = Формат(Выборка.Поле4, ФорматСумм);
								ПараметрыДолг.СуммаКонМесяца = Формат(Выборка.Поле5, ФорматСумм);
								ВременныйТабличныйДокумент.Вывести(ОбластьДолг);
								НеВыводиласьОбластьДолг = Ложь;
								
								// Очистка Параметров
								ОчиститьПараметры(ПараметрыДолг);
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЦикла;
					
					// Проверка предыдущего вывода
					Если ВыводилсяЗаголовокЗарплата Тогда
						
						// Необходимо вывести секцию Всего
						ВывестиОбластьВсего(ВсегоНачислено, ВсегоУдержаноВыплачено, ПараметрыВсего,
						ВременныйТабличныйДокумент, ФорматСумм, ОбластьВсего);
						ВыводилсяЗаголовокЗарплата = Ложь;
						
					Иначе
						
						// Проверка предыдущего вывода
						// по дивидендам
						Если ВыводилсяЗаголовокДивиденды Тогда
							
							// Необходимо вывести секцию Всего
							ВывестиОбластьВсего(ВсегоНачислено, ВсегоУдержаноВыплачено, ПараметрыВсего,
							ВременныйТабличныйДокумент, ФорматСумм, ОбластьВсего);
							ВыводилсяЗаголовокДивиденды = Ложь;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если НеВыводиласьОбластьДолг Тогда
						
						// необходимо показать, что долгов по зарплате нет					
						ПараметрыДолг.НачалоМесяца = НСтр("ru='Долг за предприятием на начало месяца: ';uk='Борг за підприємством на початок місяця: '",КодЯзыкаПечать);
						ПараметрыДолг.КонецМесяца  = НСтр("ru='Долг за предприятием на конец месяца: ';uk='Борг за підприємством на кінець місяця: '",КодЯзыкаПечать);
						ВременныйТабличныйДокумент.Вывести(ОбластьДолг);
						
					КонецЕсли;
					
					ВременныйТабличныйДокумент.Вывести(ОбластьПодвал);
					
					Если НЕ ТабДок.ПроверитьВывод(ВременныйТабличныйДокумент) Тогда
						
						ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
						
					КонецЕсли; 
					
					ТабДок.Вывести(ВременныйТабличныйДокумент);
					ВременныйТабличныйДокумент.Очистить();
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	ТабДок.ОбластьПечати  = ТабДок.Область( , 2, , 15);
	ТабДок.ТолькоПросмотр = Истина;
	
	Возврат ТабДок;

КонецФункции

#КонецОбласти

#КонецЕсли
