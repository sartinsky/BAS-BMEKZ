&НаСервере
Перем мБухИтоги;
&НаСервере
Перем ТаблицаРасшифровки;
&НаСервере
Перем ОбщиеПараметрыРасшифровки;

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Перем R11GA, R11GB;
&НаСервере
Перем R12GA, R12GB;
&НаСервере
Перем R41GA, R41GB, R42GA, R42GB;
&НаСервере
Перем R001G4, R001G5, R001G6;
&НаСервере
Перем R011G4, R011G5, R011G6;
&НаСервере
Перем R101GA, R101GB;
&НаСервере
Перем R102GA, R102GB;
&НаСервере
Перем R103GA;
&НаСервере
Перем R021G4, R021G5;
&НаСервере
Перем R111GA, R111GB;
&НаСервере
Перем R112GA, R112GB;
&НаСервере
Перем R1021GA, R1022GA;
&НаСервере
Перем R141GA;
&НаСервере
Перем R152GA;
&НаСервере
Перем R151GA, R151GB;
&НаСервере
Перем R012G4, R012G5;
&НаСервере
Перем R011G7;
&НаСервере
Перем R012G4_20, R012G4_7, R012G6, R012G7;
&НаСервере
Перем R60GA, R60GB;
&НаСервере
Перем R130GA, R130GB;

&НаСервере
Перем ТаблицаРезультатов, ИмяКолонкиНО, ИмяКолонкиНК;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
		
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2017УФ";
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
		
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	// Идентификаторы многострочных групп
	//СтруктураРеквизитовФормы.мИдГруппы      = "ДT1R";
	СтруктураРеквизитовФормы.мИдГруппы_2    = "ДT2R";
	СтруктураРеквизитовФормы.мИдГруппы1     = "T1R";
	СтруктураРеквизитовФормы.мИдГруппы2     = "T2R";
	СтруктураРеквизитовФормы.мИдГруппы21    = "П2T1R";
	СтруктураРеквизитовФормы.мИдГруппы22    = "П2T2R";
	СтруктураРеквизитовФормы.мИдГруппы23    = "П2T3R";
	СтруктураРеквизитовФормы.мИдГруппы31    = "П3T1R";
	СтруктураРеквизитовФормы.мИдГруппы43    = "П4T3R";
	СтруктураРеквизитовФормы.мИдГруппы45    = "П4T5R";
	СтруктураРеквизитовФормы.мИдГруппы46    = "П4T6R";
	СтруктураРеквизитовФормы.мИдГруппы51    = "П5T1R";
	СтруктураРеквизитовФормы.мИдГруппы52    = "П5T2R";
	СтруктураРеквизитовФормы.мИдГруппыС1    = "С1T1R";
	СтруктураРеквизитовФормы.мИдГруппыС2    = "С1T2R";
	СтруктураРеквизитовФормы.мИдГруппыС3    = "С1T3R";
	СтруктураРеквизитовФормы.мИдГруппы7     = "П7T2R";
	//СтруктураРеквизитовФормы.мИдГруппы81    = "П8T1R";
	//СтруктураРеквизитовФормы.мИдГруппыФ1    = "ФT1R";
		
	// количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда)
	КолИсхСтрокИдГруппы1 = 1;
	
	СтруктураДанныхДекларация	= Новый Структура;
	СтруктураДанныхПриложение1	= Новый Структура;
	СтруктураДанныхПриложение2	= Новый Структура;
	СтруктураДанныхПриложение3	= Новый Структура;
	СтруктураДанныхПриложение4	= Новый Структура;
	СтруктураДанныхПриложение5	= Новый Структура;
	СтруктураДанныхСправка		= Новый Структура;
	СтруктураДанныхПриложение7	= Новый Структура;
	//СтруктураДанныхПриложение8	= Новый Структура;
	СтруктураДанныхПриложение9	= Новый Структура;
	//СтруктураДанныхФилиалы		= Новый Структура;
	//СтруктураДанныхЗаявление	= Новый Структура;
	СтруктураДанныхСлужебныеДанные	= Новый Структура;
	
	//ИнициализацияМногостраничныхРазделов();
	мСтруктураМногострочныхРазделов = Новый Структура;
	//мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы, 	СтруктураРеквизитовФормы.мИдГруппы);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы_2, 	СтруктураРеквизитовФормы.мИдГруппы_2);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, 	СтруктураРеквизитовФормы.мИдГруппы1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, 	СтруктураРеквизитовФормы.мИдГруппы2);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы21, 	СтруктураРеквизитовФормы.мИдГруппы21);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы22, 	СтруктураРеквизитовФормы.мИдГруппы22);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы23, 	СтруктураРеквизитовФормы.мИдГруппы23);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы31, 	СтруктураРеквизитовФормы.мИдГруппы31);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы43, 	СтруктураРеквизитовФормы.мИдГруппы43);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы45, 	СтруктураРеквизитовФормы.мИдГруппы45);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы46, 	СтруктураРеквизитовФормы.мИдГруппы46);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы51, 	СтруктураРеквизитовФормы.мИдГруппы51);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы52, 	СтруктураРеквизитовФормы.мИдГруппы52);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыС1, 	СтруктураРеквизитовФормы.мИдГруппыС1);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыС2, 	СтруктураРеквизитовФормы.мИдГруппыС2);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыС3, 	СтруктураРеквизитовФормы.мИдГруппыС3);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы7, 	СтруктураРеквизитовФормы.мИдГруппы7);
	//мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы81, 	СтруктураРеквизитовФормы.мИдГруппы81);
	//мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыФ1, 	СтруктураРеквизитовФормы.мИдГруппыФ1);
	
	мСтруктураМногостраничныхРазделов = Новый Структура;
	//мСтруктураМногостраничныхРазделов.Вставить("ПриложениеПН", "ТаблицаСтраницыРаздела1");
	
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	//мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы, 	1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы_2, 	1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, 	1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы2, 	1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы21, 	1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы22, 	1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы23, 	1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы31, 	1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы43, 	1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы45, 	1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы46, 	1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы51, 	1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы52, 	1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыС1, 	1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыС2, 	1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыС3, 	1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы7, 	1);
	//мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы81, 	1);
	//мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппыФ1, 	1);
	
	ЗаполнитьСтруктурыКолонокМногострочныхЧастей();
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
		
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "01/03/2017";
	
	СтруктураРеквизитовФормы.мПечатныеформы 	= Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Декларация";
		
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	СтруктураРеквизитовФормы.ДатаНач              = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.ДатаКон              = Параметры.мДатаКонцаПериодаОтчета;
	
	ДатаПодписи                                       = ТекущаяДатаСеанса();
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати 	   = Ложь;
	
	ПеречислениеПериодичностьМесяц = Перечисления.Периодичность.Месяц;
	
	СтруктураРеквизитовФормы.ЕстьДуплекс = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность", "ЕстьДуплекс", Ложь);
	Элементы.ЕстьДуплекс.Пометка		 = СтруктураРеквизитовФормы.ЕстьДуплекс;
	
	ВывестиМакетВТаблДокНаСервере(ИмяРаздела, 1);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяРаздела);
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяРаздела);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	
	//СтруктураРеквизитовФормы.Вставить("мИдГруппы");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы_2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы21");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы22");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы23");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы31");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы43");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы45");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы46");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы51");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы52");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыС1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыС2");
	СтруктураРеквизитовФормы.Вставить("мИдГруппыС3");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы7");
	//СтруктураРеквизитовФормы.Вставить("мИдГруппы81");
	//СтруктураРеквизитовФормы.Вставить("мИдГруппыФ1");
	
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ОрганизацияЮридическоеФизическоеЛицо");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкиДопСтрок", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкиДопСтраниц", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Истина);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуВыгрузить", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	
	СтруктураРеквизитовФормы.Вставить("ТекущиеОбластиСтраниц");
	СтруктураРеквизитовФормы.Вставить("КолонкиМногострочныхРазделов");
	СтруктураРеквизитовФормы.Вставить("ЕстьДуплекс", Ложь);
	
	СтруктураРеквизитовФормы.Вставить("ПолучениеДанныхДляЗвит1С", Ложь);
	СтруктураРеквизитовФормы.Вставить("ДопПоказателиОтчетаЗвит1С", Новый Структура);
	
	//СтруктураРеквизитовФормы.Вставить("ОтчетЗаДваМесяца", Ложь);
	СтруктураРеквизитовФормы.Вставить("ПроцентШтрафа", 3);
	СтруктураРеквизитовФормы.Вставить("УточняемыйОтчет", Неопределено);
	СтруктураРеквизитовФормы.Вставить("ДатаНач", '00010101');
	СтруктураРеквизитовФормы.Вставить("ДатаКон", '00010101');
	
	СтруктураРеквизитовФормы.Вставить("СпецРежим", 0);
	
	СтруктураРеквизитовФормы.Вставить("НеВыдаватьСообщенияОбОшибкахВРасчете", Ложь);
	СтруктураРеквизитовФормы.Вставить("мНеВыдаватьСообщенияОбОшибкахВРасчете", Ложь);
	
КонецПроцедуры

//&НаСервере
//Процедура ИнициализацияМногостраничныхРазделов()
// 
//	Элементы.ДопСтроки.Видимость = Истина;
//	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздела1.Добавить();
//	СтрПерваяСтраница.Представление               = НСтр("ru='Стр. ';uk='Стр. '") + 1;
//	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
//	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

//КонецПроцедуры // ИнициализацияМногостраничныхРазделов()

// Функция возвращает параметры числа Е для различных разделов отчета
//
// Параметры
//  ИмяРаздела  - Строка
//
// Возвращаемое значение:
//  Результат   - ОписаниеТипа
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОписаниеТипаЧислаЕДляРаздела(ИмяРаздела = "")
	
	Результат = Новый Структура("ОписаниеТипа, Длина, Точность");
	
	//Если ИмяРаздела = "Раздел1" 
	// ИЛИ ИмяРаздела = "Раздел2" 
	// ИЛИ ИмяРаздела = "Раздел3" 
	// ИЛИ ИмяРаздела = "Раздел3_Прил2" Тогда
	//	Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));
	//ИначеЕсли ИмяРаздела = "Раздел7" Тогда
	//	Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2));	
	//Иначе
    Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	//КонецЕсли; 

	Возврат Результат; 
	
КонецФункции


&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьНачальныеНастройки();

	
	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ЗаполнитьПустыеСтруктурыДанных();	
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		НачальныеОперацииСМногострочнымиБлоками();
			
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 0;
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	
			ЭтаФорма.СтруктураРеквизитовФормы.СпецРежим = 0;         
			
		КонецЕсли;
		
		Модифицированность = Истина;

	Иначе
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуВыгрузить Тогда
		Элементы.Выгрузка.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкиДопСтрок Тогда
		Элементы.ДопСтроки.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкиДопСтраниц Тогда
		Элементы.ДопСтраницы.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	СтруктураРеквизитовФормы.ОрганизацияЮридическоеФизическоеЛицо = СтруктураРеквизитовФормы.Организация.ЮридическоеФизическоеЛицо;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
		ЗаполнитьПриложение9НаСервере();
	КонецЕсли;
    	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПрорисоватьПодменюПечать(ЭтаФорма);
	КонецЕсли;
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры // Инициализация()

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // НачальныеОперацииСМногострочнымиБлоками()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);	
	
	МассивТиповТаблицаЗначений = Новый Массив; 
	МассивТиповТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТиповТаблицаЗначений);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда         
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда		
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы 
	//

	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Декларация";
	СтрокаУровня1.Представление            = НСтр("ru='Уточняющий расчет по НДС';uk='Уточнюючий розрахунок з ПДВ'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение1";
	СтрокаУровня1.Представление            = НСтр("ru='Приложение Д1';uk='Додаток Д1'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение2";
	СтрокаУровня1.Представление            = НСтр("ru='Приложение Д2';uk='Додаток Д2'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение3";
	СтрокаУровня1.Представление            = НСтр("ru='Приложение Д3';uk='Додаток Д3'");
	СтрокаУровня1.ИмяПоляТабличногоДокум   = "ПолеТабличногоДокументаПриложение3";
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение4";
	СтрокаУровня1.Представление            = НСтр("ru='Приложение Д4';uk='Додаток Д4'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение5";
	СтрокаУровня1.Представление            = НСтр("ru='Приложение Д5';uk='Додаток Д5'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Справка";
	СтрокаУровня1.Представление            = НСтр("ru='Приложение Д6 (Справка)';uk='Додаток Д6 (Довідка)'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение7";
	СтрокаУровня1.Представление            = НСтр("ru='Приложение Д7';uk='Додаток Д7'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	//СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	//СтрокаУровня1.ИмяСтраницы              = "Приложение8";
	//СтрокаУровня1.Представление            = НСтр("ru='Приложение Д8';uk='Додаток Д8'");
	//СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	//СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	//СтрокаУровня1.ВыводНаПечать            = 1;
	//СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Приложение9";
	СтрокаУровня1.Представление            = НСтр("ru='Приложение ДС9';uk='Додаток ДС9'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	//СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	//СтрокаУровня1.ИмяСтраницы              = "Заявление";
	//СтрокаУровня1.Представление            = НСтр("ru='Заявление  о выборе квартального отчетного (налогового) периода ';uk='Заява про вибір квартального звітного (податкового) періоду '");
	//СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	//СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	//СтрокаУровня1.ВыводНаПечать            = 1;
	//СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 1;

	//СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	//СтрокаУровня1.ИмяСтраницы              = "Филиалы";
	//СтрокаУровня1.Представление            = НСтр("ru='Сообщение о делегировании филиалам права выписки налоговых накладных';uk= 'Повідомлення про делегування філіям права виписки податкових накладних'");
	//СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	//СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	//СтрокаУровня1.ВыводНаПечать            = 1;
	//СтрокаУровня1.ПоказатьСтраницу         = 1;
	//СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "СлужебныеДанные";
	СтрокаУровня1.Представление            = НСтр("ru='Служебные данные';uk='Службові дані'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки.
//
&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
		
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Декларация";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; 
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	//НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	//НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы;
	//НовСтр.Область = "МногострочнаяЧасть_1";
	//НовСтр.ВысотаСтроки = 1;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы_2;
	НовСтр.Область = "МногострочнаяЧасть_2";
	НовСтр.ВысотаСтроки =1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Приложение1";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 1;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы2;
	НовСтр.Область = "МногострочнаяЧасть_2";
	НовСтр.ВысотаСтроки =1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Приложение2";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы21;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 1;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы22;
	НовСтр.Область = "МногострочнаяЧасть_2";
	НовСтр.ВысотаСтроки = 1;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы23;
	НовСтр.Область = "МногострочнаяЧасть_3";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Приложение3";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы31;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Приложение4";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы43;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 1;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы45;
	НовСтр.Область = "МногострочнаяЧасть_2";
	НовСтр.ВысотаСтроки = 1;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы46;
	НовСтр.Область = "МногострочнаяЧасть_3";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Приложение5";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы51;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 1;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы52;
	НовСтр.Область = "МногострочнаяЧасть_2";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Справка";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппыС1;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 1;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппыС2;
	НовСтр.Область = "МногострочнаяЧасть_2";
	НовСтр.ВысотаСтроки = 1;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппыС3;
	НовСтр.Область = "МногострочнаяЧасть_3";
	НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Приложение7";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы7;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 1;
	
	//СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	//СтрокаУровня1.ИмяСтраницы                          = "Приложение8";
	//СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	//СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	//СтрокаУровня1.МаксКолвоЭкз						   = 0;
	//СтрокаУровня1.ОчищатьРаздел                        = Истина;
	//СтрокаУровня1.ИмяПредставления                     = "";
	//СтрокаУровня1.ПредставлениеДанных                  = Истина;
	//СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	//СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	//
	//НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	//НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы81;
	//НовСтр.Область = "МногострочнаяЧасть_1";
	//НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Приложение9";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	//СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	//СтрокаУровня1.ИмяСтраницы                          = "Заявление";
	//СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	//СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	//СтрокаУровня1.МаксКолвоЭкз						   = 0;
	//СтрокаУровня1.ОчищатьРаздел                        = Истина;
	//СтрокаУровня1.ИмяПредставления                     = "";
	//СтрокаУровня1.ПредставлениеДанных                  = Истина;
	//СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	//СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	//
	//СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	//СтрокаУровня1.ИмяСтраницы                          = "Филиалы";
	//СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	//СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	//СтрокаУровня1.МаксКолвоЭкз						   = 0;
	//СтрокаУровня1.ОчищатьРаздел                        = Истина;
	//СтрокаУровня1.ИмяПредставления                     = "";
	//СтрокаУровня1.ПредставлениеДанных                  = Истина;
	//СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	//СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	//НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	//НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппыФ1;
	//НовСтр.Область = "МногострочнаяЧасть_1";
	//НовСтр.ВысотаСтроки = 1;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "СлужебныеДанные";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
КонецПроцедуры // ФормироватьСтруктуруСвойствСтраниц()

// СформироватьДеревоРазделовОтчетаНаСервере()
//
&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаСервере()

// СформироватьДеревоРазделовОтчетаНаКлиенте()
//
&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаКлиенте()

// СформироватьДеревоРазделовОтчета()
//
&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = НайденноеЗначение[НомерСтраницы-1].Представление;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры // СформироватьДеревоРазделовОтчета()

&НаСервере
Функция СформироватьСтруктуруДанныхДопСтрокСтраницы(Форма, ИмяСтраницы) Экспорт
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяСтраницы = "ПриложениеПН" Тогда

		РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппыPN);

		СтруктураДанныхДопСтрокРаздела = Новый Структура;
		
		ПромТаблицаДопСтрокРаздела = Неопределено;
		Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппыPN, ПромТаблицаДопСтрокРаздела);
		ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
		ТаблицаДопСтрокГруппы = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппыPN].Добавить().Таблица;
		КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
		СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппыPN, ТаблицаДопСтрокГруппы);
		
	КонецЕсли;

	Возврат СтруктураДанныхДопСтрокРаздела;

КонецФункции

// РазделыОтчетаПриАктивизацииСтроки()
//
&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент) Экспорт
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	// сохраним текущее положение курсора на странице
	Если СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Неопределено Тогда
		СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Новый Структура;
	КонецЕсли;
	ТекущийНомерСтраницы = "_" + Строка(СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	
	КоординатыОбласти = Новый Структура();
	КоординатыОбласти.Вставить("Верх", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Верх);
	КоординатыОбласти.Вставить("Низ", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ);
	КоординатыОбласти.Вставить("Лево", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево);
	КоординатыОбласти.Вставить("Право", Элементы.ТабличныйДокумент.ТекущаяОбласть.Право);
	
	СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц.Вставить(ТекущийНомерСтраницы, КоординатыОбласти);	

	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Элементы.ДобавитьСтраницу.Доступность   = Ложь;
	Элементы.УдалитьСтраницу.Доступность    = Ложь;
	Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
	Элементы.ДобавитьСтроку.Доступность     = Ложь;
	Элементы.УдалитьСтроку.Доступность      = Ложь;
				
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
																
		КонецЕсли;														
				
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		
		Элементы.ДобавитьСтраницу.Доступность   = Истина;
		Элементы.УдалитьСтраницу.Доступность    = Истина;
		Элементы.УдалитьВсеСтраницы.Доступность = Истина;
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			
			Элементы.УдалитьСтраницу.Доступность = Ложь;
							   			
			Если Элемент.ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
				Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
			КонецЕсли;
			
		ИначеЕсли Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
			
			Элементы.УдалитьСтраницу.Доступность    = Ложь;
			Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если    Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Декларация"
		ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение1" 
		ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение2" 
		ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение3" 
		ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение4" 
		ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение5" 
		ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Справка" 
		ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение7" 
		//ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Приложение8" 
		ИЛИ Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Филиалы" Тогда
	
		Элементы.ДобавитьСтроку.Доступность = Истина;
		Элементы.УдалитьСтроку.Доступность  = Истина;
		
	КонецЕсли;
	
	// восстановим текущее положение курсора
	ТекущийНомерСтраницы = "_"+Строка(СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	Если СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц.Свойство(ТекущийНомерСтраницы) Тогда
		
		КоординатыОбласти = СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц[ТекущийНомерСтраницы];
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(КоординатыОбласти.Верх, КоординатыОбласти.Лево, КоординатыОбласти.Низ, КоординатыОбласти.Право);	
		
	Иначе	
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1, 1, 1);	
		
	КонецЕсли;
	
КонецПроцедуры // РазделыОтчетаПриАктивизацииСтроки()

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
			
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
	//Если ИмяТекРаздела = "Раздел2" Тогда
	//	ИзменитьЦветЯчеекНаСервере();
	//КонецЕсли;
						
КонецПроцедуры // ВывестиМакетСтраницыВТабличныйДокументНаСервере()

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменитьПризнакАктивностиСтраницы = Истина)
	
	// Многостраничные и многострочные разделы.
	//
	Если    НаимРаздела = "ПриложениеПН" Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
				
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
			
			// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина)
			
			СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
			
			ОпределитьПредставлениеДопСтраниц(НаимРаздела);

			СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(ЭтаФорма, НаимРаздела);
			
			Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
				СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
			Иначе
				СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
			КонецЕсли;
							
			Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
				СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
			Иначе
				СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			КонецЕсли;
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменитьПризнакАктивностиСтраницы;
			
		КонецЕсли;
		
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппыМассив = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы);	
		КонецЦикла;
		
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Процедура ОпределитьПредставлениеДопСтраниц(ИмяСтраницы = Неопределено, ТолькоУАктивнойСтраницы = Неопределено)
	Перем ТаблицаСтраницРаздела;
	Перем ТекущееПредставлениеСтраницы;

	ТолькоАктивная = ?(ТолькоУАктивнойСтраницы = Неопределено, Ложь, ТолькоУАктивнойСтраницы);
	
	Для Каждого Страница Из мСтруктураМногостраничныхРазделов Цикл
		ИмяТекСтраницы        = Страница.Ключ;
		ТаблицаСтраницРаздела = ЭтаФорма[Страница.Значение];

		Если ИмяСтраницы <> Неопределено Тогда
			Если ИмяТекСтраницы <> ИмяСтраницы Тогда
				Продолжить; // Пропускаем не нужные страницы
			КонецЕсли;
		КонецЕсли;

		// Если есть хоть одна страница - определим её представление
		Если ТаблицаСтраницРаздела.Количество() > 0 Тогда

			НомерСтраницы = 0;

			Для Каждого СтрокаТаблицы Из ТаблицаСтраницРаздела Цикл

				НомерСтраницы = НомерСтраницы + 1;

				СохрПредставлениеСтраницы = СтрокаТаблицы.Представление;

				// Если колонки нет, тогда автоматическое представление включено по умолчанию.
				Если ТаблицаСтраницРаздела[0].Свойство("АвтоматическоеПредставление") Тогда
					АвтоматическоеПредставление = СтрокаТаблицы.АвтоматическоеПредставление;
				Иначе
					АвтоматическоеПредставление = Истина;
				КонецЕсли;

				Если НЕ АвтоматическоеПредставление Тогда
					Продолжить;
				КонецЕсли;

				Если (НЕ ТолькоАктивная) Или ((ТолькоАктивная) И (СтрокаТаблицы.АктивнаяСтраница))Тогда

					ТекущееПредставлениеСтраницы = НСтр("ru='Стр. ';uk='Стр. '") + Строка(НомерСтраницы);
					СтрокаТаблицы.Представление = ТекущееПредставлениеСтраницы;

				КонецЕсли; // ТолькоАктивная

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры


&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	
	Если ТабличныйДокумент.Области.Найти("ПредупреждениеОПечати") = Неопределено Тогда
		ТабличныйДокумент.ОбластьПечати = Неопределено;
	Иначе
		ТабличныйДокумент.ОбластьПечати 					  = ТабличныйДокумент.Области.ПредупреждениеОПечати;
	    ТабличныйДокумент.Области.ПредупреждениеОПечати.Текст = НСтр("ru='ВНИМАНИЕ! Печать отчета необходимо осуществлять из меню ''Печать''.';uk= 'УВАГА! Друк звіту необхідно здійснювати за допомогою меню ''Друк''.'");
	КонецЕсли;
	
	Если НЕ ИмяТекРаздела = "ПриложениеПН" Тогда 
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Если НЕ ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) = Неопределено Тогда
				Попытка
					ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
				Исключение
				КонецПопытки;
			КонецЕсли;	
		КонецЦикла;
		
		ИмяГруппыМассив = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
		
			СтруктураГруппы = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
			
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		
		КонецЦикла;
						
//	 Многострочные и обычные разделы.
	Иначе
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;

		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		 	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			
			Если НЕ ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) = Неопределено Тогда
				
				Попытка
					ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;

		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяТекРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		                                                        		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
				
		НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
		
		Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
			И (НовДанныеДопСтрокРаздела.Количество() > 0)
			И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
			
			НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
			
		Иначе
			
			НовДанныеДопСтрокРаздела = Неопределено;
			
		КонецЕсли;

		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
				
				ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
				ДанныеГруппыСтрок = ГруппаСтрок.Значение;
				
				ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	//ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяТекРаздела);
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
	
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	
	
КонецПроцедуры // ВывестиМакетВТаблДокНаСервере()

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(НаимРаздела)
	
	Если НаимРаздела = "ПриложениеПН" Тогда
		//ЗаполнитьШапкуПодписиПриложенияПН(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоказателиЗначениямиПоУмолчанию()

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт

	ИдГрупп = Новый Структура;
	//ИдГрупп.Вставить("мИдГруппы", СтруктураРеквизитовФормы.мИдГруппы);
	ИдГрупп.Вставить("мИдГруппы_2", СтруктураРеквизитовФормы.мИдГруппы_2);
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы21", СтруктураРеквизитовФормы.мИдГруппы21);
	ИдГрупп.Вставить("мИдГруппы22", СтруктураРеквизитовФормы.мИдГруппы22);
	ИдГрупп.Вставить("мИдГруппы23", СтруктураРеквизитовФормы.мИдГруппы23);
	ИдГрупп.Вставить("мИдГруппы31", СтруктураРеквизитовФормы.мИдГруппы31);
	ИдГрупп.Вставить("мИдГруппы43", СтруктураРеквизитовФормы.мИдГруппы43);
	ИдГрупп.Вставить("мИдГруппы45", СтруктураРеквизитовФормы.мИдГруппы45);
	ИдГрупп.Вставить("мИдГруппы46", СтруктураРеквизитовФормы.мИдГруппы46);
	ИдГрупп.Вставить("мИдГруппы51", СтруктураРеквизитовФормы.мИдГруппы51);
	ИдГрупп.Вставить("мИдГруппы52", СтруктураРеквизитовФормы.мИдГруппы52);
	ИдГрупп.Вставить("мИдГруппыС1", СтруктураРеквизитовФормы.мИдГруппыС1);
	ИдГрупп.Вставить("мИдГруппыС2", СтруктураРеквизитовФормы.мИдГруппыС2);
	ИдГрупп.Вставить("мИдГруппыС3", СтруктураРеквизитовФормы.мИдГруппыС3);
	ИдГрупп.Вставить("мИдГруппы7", СтруктураРеквизитовФормы.мИдГруппы7);
	//ИдГрупп.Вставить("мИдГруппы81", СтруктураРеквизитовФормы.мИдГруппы81);
	//ИдГрупп.Вставить("мИдГруппыФ1", СтруктураРеквизитовФормы.мИдГруппыФ1);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
		
КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте()

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт

	ИдГрупп = Новый Структура;
	//ИдГрупп.Вставить("мИдГруппы", СтруктураРеквизитовФормы.мИдГруппы);
	ИдГрупп.Вставить("мИдГруппы_2", СтруктураРеквизитовФормы.мИдГруппы_2);
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы21", СтруктураРеквизитовФормы.мИдГруппы21);
	ИдГрупп.Вставить("мИдГруппы22", СтруктураРеквизитовФормы.мИдГруппы22);
	ИдГрупп.Вставить("мИдГруппы23", СтруктураРеквизитовФормы.мИдГруппы23);
	ИдГрупп.Вставить("мИдГруппы31", СтруктураРеквизитовФормы.мИдГруппы31);
	ИдГрупп.Вставить("мИдГруппы43", СтруктураРеквизитовФормы.мИдГруппы43);
	ИдГрупп.Вставить("мИдГруппы45", СтруктураРеквизитовФормы.мИдГруппы45);
	ИдГрупп.Вставить("мИдГруппы46", СтруктураРеквизитовФормы.мИдГруппы46);
	ИдГрупп.Вставить("мИдГруппы51", СтруктураРеквизитовФормы.мИдГруппы51);
	ИдГрупп.Вставить("мИдГруппы52", СтруктураРеквизитовФормы.мИдГруппы52);
	ИдГрупп.Вставить("мИдГруппыС1", СтруктураРеквизитовФормы.мИдГруппыС1);
	ИдГрупп.Вставить("мИдГруппыС2", СтруктураРеквизитовФормы.мИдГруппыС2);
	ИдГрупп.Вставить("мИдГруппыС3", СтруктураРеквизитовФормы.мИдГруппыС3);
	ИдГрупп.Вставить("мИдГруппы7", СтруктураРеквизитовФормы.мИдГруппы7);
	//ИдГрупп.Вставить("мИдГруппы81", СтруктураРеквизитовФормы.мИдГруппы81);
	//ИдГрупп.Вставить("мИдГруппыФ1", СтруктураРеквизитовФормы.мИдГруппыФ1);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт

	Перем ТекТабличноеПоле;
		
	//Если  ИдГруппы = ИдГрупп.мИдГруппы
	//  ИЛИ ИдГруппы = ИдГрупп.мИдГруппы_2 Тогда
	Если  ИдГруппы = ИдГрупп.мИдГруппы_2 Тогда
		
		ТекТабличноеПоле = "Декларация";
		
	ИначеЕсли  ИдГруппы = ИдГрупп.мИдГруппы1
	       ИЛИ ИдГруппы = ИдГрупп.мИдГруппы2 Тогда
		
		ТекТабличноеПоле = "Приложение1";
		
	ИначеЕсли  ИдГруппы = ИдГрупп.мИдГруппы21
		   ИЛИ ИдГруппы = ИдГрупп.мИдГруппы22 
		   ИЛИ ИдГруппы = ИдГрупп.мИдГруппы23  Тогда
		
		ТекТабличноеПоле = "Приложение2";
		
	ИначеЕсли  ИдГруппы = ИдГрупп.мИдГруппы31 Тогда
		
		ТекТабличноеПоле = "Приложение3";
		
	ИначеЕсли   ИдГруппы = ИдГрупп.мИдГруппы43 
			ИЛИ ИдГруппы = ИдГрупп.мИдГруппы45
			ИЛИ ИдГруппы = ИдГрупп.мИдГруппы46 Тогда
		
		ТекТабличноеПоле = "Приложение4";
		
	ИначеЕсли   ИдГруппы = ИдГрупп.мИдГруппы51 
			ИЛИ ИдГруппы = ИдГрупп.мИдГруппы52 Тогда
		
		ТекТабличноеПоле = "Приложение5";
		
	ИначеЕсли   ИдГруппы = ИдГрупп.мИдГруппыС1 
			ИЛИ ИдГруппы = ИдГрупп.мИдГруппыС2 
			ИЛИ ИдГруппы = ИдГрупп.мИдГруппыС3 Тогда
		
		ТекТабличноеПоле = "Справка";
		
	ИначеЕсли   ИдГруппы = ИдГрупп.мИдГруппы7 Тогда
		
		ТекТабличноеПоле = "Приложение7";
		
	//ИначеЕсли   ИдГруппы = ИдГрупп.мИдГруппы81 Тогда
	//	
	//	ТекТабличноеПоле = "Приложение8";
	//	
	//ИначеЕсли   ИдГруппы = ИдГрупп.мИдГруппыФ1 Тогда
	//	
	//	ТекТабличноеПоле = "Филиалы";
		
	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере()
//
&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп = Новый Структура;
	//ИдГрупп.Вставить("мИдГруппы", СтруктураРеквизитовФормы.мИдГруппы);
	ИдГрупп.Вставить("мИдГруппы_2", СтруктураРеквизитовФормы.мИдГруппы_2);
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы21", СтруктураРеквизитовФормы.мИдГруппы21);
	ИдГрупп.Вставить("мИдГруппы22", СтруктураРеквизитовФормы.мИдГруппы22);
	ИдГрупп.Вставить("мИдГруппы23", СтруктураРеквизитовФормы.мИдГруппы23);
	ИдГрупп.Вставить("мИдГруппы31", СтруктураРеквизитовФормы.мИдГруппы31);
	ИдГрупп.Вставить("мИдГруппы43", СтруктураРеквизитовФормы.мИдГруппы43);
	ИдГрупп.Вставить("мИдГруппы45", СтруктураРеквизитовФормы.мИдГруппы45);
	ИдГрупп.Вставить("мИдГруппы46", СтруктураРеквизитовФормы.мИдГруппы46);
	ИдГрупп.Вставить("мИдГруппы51", СтруктураРеквизитовФормы.мИдГруппы51);
	ИдГрупп.Вставить("мИдГруппы52", СтруктураРеквизитовФормы.мИдГруппы52);
	ИдГрупп.Вставить("мИдГруппыС1", СтруктураРеквизитовФормы.мИдГруппыС1);
	ИдГрупп.Вставить("мИдГруппыС2", СтруктураРеквизитовФормы.мИдГруппыС2);
	ИдГрупп.Вставить("мИдГруппыС3", СтруктураРеквизитовФормы.мИдГруппыС3);
	ИдГрупп.Вставить("мИдГруппы7", СтруктураРеквизитовФормы.мИдГруппы7);
	//ИдГрупп.Вставить("мИдГруппы81", СтруктураРеквизитовФормы.мИдГруппы81);
	//ИдГрупп.Вставить("мИдГруппыФ1", СтруктураРеквизитовФормы.мИдГруппыФ1);
		
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере()

// ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте()
//
&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп = Новый Структура;
	//ИдГрупп.Вставить("мИдГруппы", СтруктураРеквизитовФормы.мИдГруппы);
	ИдГрупп.Вставить("мИдГруппы_2", СтруктураРеквизитовФормы.мИдГруппы_2);
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
	ИдГрупп.Вставить("мИдГруппы21", СтруктураРеквизитовФормы.мИдГруппы21);
	ИдГрупп.Вставить("мИдГруппы22", СтруктураРеквизитовФормы.мИдГруппы22);
	ИдГрупп.Вставить("мИдГруппы23", СтруктураРеквизитовФормы.мИдГруппы23);
	ИдГрупп.Вставить("мИдГруппы31", СтруктураРеквизитовФормы.мИдГруппы31);
	ИдГрупп.Вставить("мИдГруппы43", СтруктураРеквизитовФормы.мИдГруппы43);
	ИдГрупп.Вставить("мИдГруппы45", СтруктураРеквизитовФормы.мИдГруппы45);
	ИдГрупп.Вставить("мИдГруппы46", СтруктураРеквизитовФормы.мИдГруппы46);
	ИдГрупп.Вставить("мИдГруппы51", СтруктураРеквизитовФормы.мИдГруппы51);
	ИдГрупп.Вставить("мИдГруппы52", СтруктураРеквизитовФормы.мИдГруппы52);
	ИдГрупп.Вставить("мИдГруппыС1", СтруктураРеквизитовФормы.мИдГруппыС1);
	ИдГрупп.Вставить("мИдГруппыС2", СтруктураРеквизитовФормы.мИдГруппыС2);
	ИдГрупп.Вставить("мИдГруппыС3", СтруктураРеквизитовФормы.мИдГруппыС3);
	ИдГрупп.Вставить("мИдГруппы7", СтруктураРеквизитовФормы.мИдГруппы7);
	//ИдГрупп.Вставить("мИдГруппы81", СтруктураРеквизитовФормы.мИдГруппы81);
	//ИдГрупп.Вставить("мИдГруппыФ1", СтруктураРеквизитовФормы.мИдГруппыФ1);
		
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	
	Перем ИмяГруппы;
	
	ИмяГруппы = Новый Массив;
	
	Если ИмяЛиста = Неопределено Тогда
        ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Декларация" Тогда
		//ИмяГруппы.Добавить(ИдГрупп.мИдГруппы);
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы_2);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение1" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы1);
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы2);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение2" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы21);
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы22);
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы23);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение3" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы31);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение4" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы43);
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы45);
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы46);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение5" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы51);
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы52);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Справка" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппыС1);
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппыС2);
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппыС3);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение7" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы7);
	//ИначеЕсли ИмяТекущейСтраницыПанели = "Приложение8" Тогда
	//	ИмяГруппы.Добавить(ИдГрупп.мИдГруппы81);
	//ИначеЕсли ИмяТекущейСтраницыПанели = "Филиалы" Тогда
	//	ИмяГруппы.Добавить(ИдГрупп.мИдГруппыФ1);
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры // УстановитьФорматВыводаВПоляхВводаНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;

	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(СокрЛ(КодПоказателя), 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
				ФорматируемаяОбласть.ТипЗначения = Новый ОписаниеТипов(ФорматируемаяОбласть.ТипЗначения,,,Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					
					ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
					ФорматируемаяОбласть.ТипЗначения = Новый ОписаниеТипов(ФорматируемаяОбласть.ТипЗначения,,,Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	

КонецПроцедуры // УстановитьФорматВыводаВПоляхВвода()

&НаСервере
Процедура ЗаполнитьДатуПодписиНаСервере()

	ЗаполнитьДатуПодписи(ЭтаФорма);	

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)

	ЗаполнитьПоказательНаСервере("HFILL",  Форма.ДатаПодписи, Форма, "СлужебныеДанные");
	
	ПроставитьВКвадратыЗначенияНаВсехЗакладках(Форма, "Д_",        8, Формат(Форма.ДатаПодписи, "ДФ=ddMMyyyy"),  Ложь,,"");		
	
КонецПроцедуры

//&НаКлиентеНаСервереБезКонтекста
//Процедура ЗаполнитьШапкуПодписиПриложенияПН(Форма)

//	HZ   = ПолучитьПоказательНаСервере("HZ",	Форма,"Декларация");
//	HZN  = ПолучитьПоказательНаСервере("HZN",	Форма,"Декларация");
//	HZU  = ПолучитьПоказательНаСервере("HZU",	Форма,"Декларация");
//	
//	HTIN = ПолучитьПоказательНаСервере("HTIN",	Форма,"Декларация");
//	
//	HZY  = ПолучитьПоказательНаСервере("HZY",	Форма,"Декларация");
//	
//	H1KV = ПолучитьПоказательНаСервере("H1KV",	Форма,"Декларация");
//	HHY  = ПолучитьПоказательНаСервере("HHY",	Форма,"Декларация");
//	H3KV = ПолучитьПоказательНаСервере("H3KV",	Форма,"Декларация");
//	HHY  = ПолучитьПоказательНаСервере("HHY",	Форма,"Декларация");
//	
//	HBOS = ПолучитьПоказательНаСервере("HBOS",	Форма,"Декларация");
//	HBUH = ПолучитьПоказательНаСервере("HBUH",	Форма,"Декларация");
//	
//	ЗаполнитьПоказательНаСервере("HZ",   HZ, 	Форма, "ПриложениеПН");
//	ЗаполнитьПоказательНаСервере("HZN",  HZN, 	Форма, "ПриложениеПН");
//	ЗаполнитьПоказательНаСервере("HZU",  HZU, 	Форма, "ПриложениеПН");
//	
//	ЗаполнитьПоказательНаСервере("HTIN", HTIN, 	Форма, "ПриложениеПН");
//	
//	ЗаполнитьПоказательНаСервере("HZY",  HZY, 	Форма, "ПриложениеПН");
//	
//	ЗаполнитьПоказательНаСервере("H1KV", H1KV, 	Форма, "ПриложениеПН");
//	ЗаполнитьПоказательНаСервере("HHY",  HHY, 	Форма, "ПриложениеПН");
//	ЗаполнитьПоказательНаСервере("H3KV", H3KV, 	Форма, "ПриложениеПН");
//	ЗаполнитьПоказательНаСервере("HHY",  HHY, 	Форма, "ПриложениеПН");
//	
//	ЗаполнитьПоказательНаСервере("HBOS", HBOS, 	Форма, "ПриложениеПН");
//	ЗаполнитьПоказательНаСервере("HBUH", HBUH, 	Форма, "ПриложениеПН");
//	
//КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры // ПоказатьПериод()

// УстановитьЦветФонаЯчейкиНаКлиенте()
//
&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // УстановитьЦветФонаЯчейкиНаКлиенте()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // УстановитьЦветФонаЯчейкиНаСервере()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					
					ПозицияXXXX = Найти(ИмяПоказателя, "XXXX");
					Если ПозицияXXXX = 0 Тогда
						ВБлокеВсеПоказателиЗаполняются = Истина;
					Иначе
						ИмяГруппы = Лев(ИмяПоказателя, ПозицияXXXX - 1);
						ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
					КонецЕсли;
					
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЦветФонаЯчейки()

&НаКлиентеНаСервереБезКонтекста
Функция ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя) Экспорт
    	
	ПозицияXXXX = Найти(ИмяПоказателя, "XXXX");
	Если ПозицияXXXX > 0 Тогда
		
		ИмяГруппы = Лев(ИмяПоказателя, ПозицияXXXX - 1);

	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
	СтруктураГруппы = Неопределено;

	Если НЕ Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы) Тогда
		Возврат 0;
	Иначе
		СтруктураГруппы = Форма[СтруктураГруппы];
		Возврат СтруктураГруппы.Количество();
	КонецЕсли;

КонецФункции


// ЗаполнитьСведенияОбОрганизацииНаСервере()
//
&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере()
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма);
		
КонецПроцедуры // ЗаполнитьСведенияОбОрганизацииНаСервере()

&НаСервере
Процедура ЗаполнитьПриложение9НаСервере()
	
	ЗаполнитьПриложение9(ЭтаФорма);
		
КонецПроцедуры // ЗаполнитьСведенияОбОрганизацииНаСервере()

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма)
	
	//ЗаполнитьПоказательНаВсехЗакладках("HZ", "X", Форма, "|Филиалы|Заявление|");
	ЗаполнитьПоказательНаВсехЗакладках("HZU", "X", Форма, "|Декларация|");
	
	ГодОтчета   = Формат(Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета),   "ЧГ=0");
	Если Форма.СтруктураРеквизитовФормы.мПериодичность = Форма.ПеречислениеПериодичностьМесяц Тогда
	    МесяцОтчета = Формат(Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧЦ=2; ЧВН=");
		КварталОтчета = "";
	Иначе	
		МесяцОтчета = "";
		КварталОтчета = Месяц(КонецКвартала(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета))/3;
	КонецЕсли;
	
	ЗаполнитьПоказательНаСервере("HZY", ГодОтчета, Форма, "СлужебныеДанные");
	ПроставитьВКвадратыЗначенияНаВсехЗакладках(Форма, "Год_",  4, ГодОтчета, Ложь,,"");	
	
	ЗаполнитьПоказательНаСервере("HZM", МесяцОтчета, Форма, "СлужебныеДанные");
	ПроставитьВКвадратыЗначенияНаВсехЗакладках(Форма, "Мес_",  2, МесяцОтчета, Ложь,,"");	
	//
	//ЗаполнитьПоказательНаСервере("HZKV", КварталОтчета, Форма, "СлужебныеДанные");
	//ЗаполнитьПоказательНаВсехЗакладках("Кв", КварталОтчета, Форма);

	Организация 				= Форма.СтруктураРеквизитовФормы.Организация;	
	ЗаполнитьПоказательНаВсехЗакладках("HNAME", Организация.НаименованиеПолное, Форма);
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СписокПоказателей.Добавить("","ИНН");
	СписокПоказателей.Добавить("","НалоговаяИнспекция");
	СписокПоказателей.Добавить("","ЮридическийАдрес");
	СписокПоказателей.Добавить("","Email");
	СписокПоказателей.Добавить("","Телефон");
	СписокПоказателей.Добавить("","Факс");
	СписокПоказателей.Добавить("","Индекс");

	Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, СписокПоказателей);
	КодЕДРПОУ          = Сведения.КодПоЕДРПОУ;
	ИНН                = Сведения.ИНН;
	НалоговаяИнспекция = Сведения.НалоговаяИнспекция;
	ЮридическийАдрес   = Сведения.ЮридическийАдрес;
	HEMAIL  		   = Сведения.Email;	
	Телефон  	       = Сведения.Телефон;	
	Факс  		       = Сведения.Факс;	
	Индекс  		   = Сведения.Индекс;	
	
	ЗаполнитьПоказательНаСервере("TIN",  КодЕДРПОУ, Форма, "СлужебныеДанные");
	ЗаполнитьПоказательНаВсехЗакладках("HTIN", КодЕДРПОУ, Форма);
	
	ЗаполнитьПоказательНаВсехЗакладках("HNPDV", ИНН, Форма);
	
	ЗаполнитьПоказательНаСервере("HZIP", Индекс, Форма, "СлужебныеДанные");
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Декларация", "Инд_",  5, Индекс, Ложь);		

	ЗаполнитьПоказательНаСервере("HLOC", ЮридическийАдрес, Форма, "Декларация");

	ЗаполнитьПоказательНаСервере("HTEL", Телефон, Форма, "Декларация");
	
	ЗаполнитьПоказательНаСервере("HFAX", Факс,    Форма, "Декларация");
	   
	ЗаполнитьПоказательНаСервере("HEMAIL", HEMAIL, Форма, "Декларация");
		
	// налоговая инспекция из справочника налоговых инспекций
	Если ЗначениеЗаполнено(НалоговаяИнспекция) Тогда 
		ЗаполнитьПоказательНаСервере("HSTI", НалоговаяИнспекция.Наименование, 	Форма, "Декларация");
		//ЗаполнитьПоказательНаСервере("HSTI", НалоговаяИнспекция.Наименование, 	Форма, "Филиалы");
		//ЗаполнитьПоказательНаСервере("HSTI", НалоговаяИнспекция.Наименование, 	Форма, "Заявление");
		ЗаполнитьПоказательНаСервере("C_RAJ", НалоговаяИнспекция.КодАдмРайона, 	Форма, "СлужебныеДанные");
		ЗаполнитьПоказательНаСервере("C_REG", НалоговаяИнспекция.Родитель.Код, 	Форма, "СлужебныеДанные");
		ЗаполнитьПоказательНаСервере("C_STI_ORIG", НалоговаяИнспекция.Код, 		Форма, "СлужебныеДанные");
		ЗаполнитьПоказательНаСервере("C_STI", НалоговаяИнспекция.Код, 			Форма, "СлужебныеДанные");
	КонецЕсли;
	
	ЗаполнитьПоказательНаСервере("C_DOC_TYPE", 0, Форма, "СлужебныеДанные"); //номер исправленного доекумента. Для первого подающегося документа  = 0
	ЗаполнитьПоказательНаСервере("C_DOC_CNT",  1, Форма, "СлужебныеДанные");;
	//ЗаполнитьПоказательНаВсехЗакладках("C_DOC_STAN", 1, Форма);
	ЗаполнитьПоказательНаВсехЗакладках("C_DOC_STAN", 3, Форма, "|Декларация|");
	
	//ИНАГРО ++
	//ЗаполнитьПоказательНаСервере("C_DOC_STAN", 1, Форма, "СлужебныеДанные");	
	ЗаполнитьПоказательНаСервере("C_DOC_STAN", 3, Форма, "СлужебныеДанные");	
	//ИНАГРО --
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");
	СписокПоказателей.Добавить("","ФИОБух");
	СписокПоказателей.Добавить("","ИННРук");
	СписокПоказателей.Добавить("","ИННБух");
	СведенияДатаПодписи = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.ДатаПодписи, СписокПоказателей);
	
	ФИОДиректора       = СведенияДатаПодписи.ФИОРук;
	ФИОГлавБуха        = СведенияДатаПодписи.ФИОБух;
	ИННДиректора       = СведенияДатаПодписи.ИННРук;
	ИННГлавБуха        = СведенияДатаПодписи.ИННБух;
	
	ФИОДиректора 		= РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.ДатаПодписи, СписокПоказателей).ФИОРук;
	// преобразуем ФИО в ИОФ :)
	ПозицияТочки = Найти(ФИОДиректора, ".");
	Если ПозицияТочки > 0 Тогда
		ФИОДиректора = Сред(ФИОДиректора, ПозицияТочки - 1) + " " + Лев(ФИОДиректора, ПозицияТочки - 3);	
	КонецЕсли;
	
	ФИОГлавБуха 		= РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.ДатаПодписи, СписокПоказателей).ФИОБух;
	// преобразуем ФИО в ИОФ
	ПозицияТочки = Найти(ФИОГлавБуха, ".");
	Если ПозицияТочки > 0 Тогда
		ФИОГлавБуха = Сред(ФИОГлавБуха, ПозицияТочки - 1) + " " + Лев(ФИОГлавБуха, ПозицияТочки - 3);	
	КонецЕсли;
	
	ЗаполнитьПоказательНаСервере("HKBOS",  ИННДиректора, Форма, "СлужебныеДанные");
	ЗаполнитьПоказательНаСервере("HKBUH",  ИННГлавБуха,  Форма, "СлужебныеДанные");
	
	ЗаполнитьПоказательНаВсехЗакладках("HBOS", ФИОДиректора, Форма);
	ЗаполнитьПоказательНаВсехЗакладках("HBUH", ФИОГлавБуха, Форма);
	
	Если Форма.СтруктураРеквизитовФормы.мПериодичность = Форма.ПеречислениеПериодичностьМесяц   Тогда    
		ЗаполнитьПоказательНаСервере("PERIOD_MONTH", МесяцОтчета, Форма, "СлужебныеДанные");
		ЗаполнитьПоказательНаСервере("PERIOD_TYPE",  1,  		  Форма, "СлужебныеДанные");
	Иначе   
		ЗаполнитьПоказательНаСервере("PERIOD_MONTH", КварталОтчета*3, Форма, "СлужебныеДанные");
		ЗаполнитьПоказательНаСервере("PERIOD_TYPE",  2,  		  Форма, "СлужебныеДанные");
	КонецЕсли;
	ЗаполнитьПоказательНаСервере("PERIOD_YEAR", ГодОтчета, Форма, "СлужебныеДанные");
	
	ЗаполнитьДатуПодписи(Форма);
	
	ПроставитьВКвадратыЗначенияНаВсехЗакладках(Форма, "ИННРук_",  10, ИННДиректора, Ложь,,"");	
	ПроставитьВКвадратыЗначенияНаВсехЗакладках(Форма, "ИННГБ_",   10, ИННГлавБуха,  Ложь,,"");	
	
	Форма.Модифицированность = Истина;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПриложение9(Форма)
	
	// заполним приложение 3, колонку с месяцами
	
	//ИНАГРО ++
	//КонПериод = НачалоМесяца(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)-1; 
	Если Форма.СтруктураРеквизитовФормы.УточняемыйОтчет <> Неопределено Тогда
		КонПериод = КонецМесяца(Форма.СтруктураРеквизитовФормы.УточняемыйОтчет.ДатаОкончания);
	Иначе
		КонПериод = НачалоМесяца(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)-1; 
	КонецЕсли;
	//ИНАГРО --

	Для Счётчик = 0 по 11 Цикл
		
		ТекПериод = ДобавитьМесяц(КонПериод, -Счётчик);
		
		Прил3Месяц   = Месяц(ТекПериод);

		Прил3Год	 = Год(ТекПериод);
		
		Прил3НомерСтроки = Формат(12 - Счётчик,"ЧЦ=2;ЧВН=0;ЧГ=;");
		
		ЗаполнитьПоказательНаСервере("R02"+Прил3НомерСтроки+"G2A",  Прил3Месяц, Форма, "Приложение9");
		ЗаполнитьПоказательНаСервере("R02"+Прил3НомерСтроки+"G2B",  Прил3Год, Форма, "Приложение9");
		
	КонецЦикла;	
	
	Форма.Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоказательНаВсехЗакладкахНаСервере(СписокЗначений, СписокИсключений = "")
	
	Для каждого УстанавливаемоеЗначение Из СписокЗначений Цикл
	
		ЗаполнитьПоказательНаВсехЗакладках(УстанавливаемоеЗначение.Представление, УстанавливаемоеЗначение.Значение, ЭтаФорма, СписокИсключений);	
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПоказательНаВсехЗакладках(ИмяПоказателя, Значение, Форма, СписокИсключений = "")

	Если Найти(СписокИсключений, "|Декларация|") = 0 Тогда
		ЗаполнитьПоказательНаСервере(ИмяПоказателя, Значение, Форма, "Декларация");
	КонецЕсли;
	Если Найти(СписокИсключений, "|Приложение1|") = 0 Тогда
		ЗаполнитьПоказательНаСервере(ИмяПоказателя, Значение, Форма, "Приложение1");
	КонецЕсли;
	Если Найти(СписокИсключений, "|Приложение2|") = 0 Тогда
		ЗаполнитьПоказательНаСервере(ИмяПоказателя, Значение, Форма, "Приложение2");
	КонецЕсли;
	Если Найти(СписокИсключений, "|Приложение3|") = 0 Тогда
		ЗаполнитьПоказательНаСервере(ИмяПоказателя, Значение, Форма, "Приложение3");
	КонецЕсли;
	Если Найти(СписокИсключений, "|Приложение4|") = 0 Тогда
		ЗаполнитьПоказательНаСервере(ИмяПоказателя, Значение, Форма, "Приложение4");
	КонецЕсли;
	Если Найти(СписокИсключений, "|Приложение5|") = 0 Тогда
		ЗаполнитьПоказательНаСервере(ИмяПоказателя, Значение, Форма, "Приложение5");
	КонецЕсли;
	Если Найти(СписокИсключений, "|Справка|") = 0 Тогда
		ЗаполнитьПоказательНаСервере(ИмяПоказателя, Значение, Форма, "Справка");
	КонецЕсли;
	Если Найти(СписокИсключений, "|Приложение7|") = 0 Тогда
		ЗаполнитьПоказательНаСервере(ИмяПоказателя, Значение, Форма, "Приложение7");
	КонецЕсли;
	//Если Найти(СписокИсключений, "|Приложение8|") = 0 Тогда
	//	ЗаполнитьПоказательНаСервере(ИмяПоказателя, Значение, Форма, "Приложение8");
	//КонецЕсли;
	Если Найти(СписокИсключений, "|Приложение9|") = 0 Тогда
		ЗаполнитьПоказательНаСервере(ИмяПоказателя, Значение, Форма, "Приложение9");
	КонецЕсли;
	//Если Найти(СписокИсключений, "|Заявление|") = 0 Тогда
	//	ЗаполнитьПоказательНаСервере(ИмяПоказателя, Значение, Форма, "Заявление");
	//КонецЕсли;
	//Если Найти(СписокИсключений, "|Филиалы|") = 0 Тогда
	//	ЗаполнитьПоказательНаСервере(ИмяПоказателя, Значение, Форма, "Филиалы");
	//КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроставитьВКвадратыЗначенияНаВсехЗакладках(Форма, ИмяПоказателя, Длина, Значение, ДополнитьЗначение = Ложь, НольКакНоль = Ложь, СписокИсключений = "")

	Если Найти(СписокИсключений, "|Декларация|") = 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Декларация", ИмяПоказателя,  Длина, Значение, ДополнитьЗначение, НольКакНоль);		
	КонецЕсли;
	Если Найти(СписокИсключений, "|Приложение1|") = 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Приложение1", ИмяПоказателя,  Длина, Значение, ДополнитьЗначение, НольКакНоль);		
	КонецЕсли;
	Если Найти(СписокИсключений, "|Приложение2|") = 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Приложение2", ИмяПоказателя,  Длина, Значение, ДополнитьЗначение, НольКакНоль);		
	КонецЕсли;
	Если Найти(СписокИсключений, "|Приложение3|") = 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Приложение3", ИмяПоказателя,  Длина, Значение, ДополнитьЗначение, НольКакНоль);		
	КонецЕсли;
	Если Найти(СписокИсключений, "|Приложение4|") = 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Приложение4", ИмяПоказателя,  Длина, Значение, ДополнитьЗначение, НольКакНоль);		
	КонецЕсли;
	Если Найти(СписокИсключений, "|Приложение5|") = 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Приложение5", ИмяПоказателя,  Длина, Значение, ДополнитьЗначение, НольКакНоль);		
	КонецЕсли;
	Если Найти(СписокИсключений, "|Справка|") = 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Справка", ИмяПоказателя,  Длина, Значение, ДополнитьЗначение, НольКакНоль);		
	КонецЕсли;
	Если Найти(СписокИсключений, "|Приложение7|") = 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Приложение7", ИмяПоказателя,  Длина, Значение, ДополнитьЗначение, НольКакНоль);		
	КонецЕсли;
	//Если Найти(СписокИсключений, "|Приложение8|") = 0 Тогда
	//	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Приложение8", ИмяПоказателя,  Длина, Значение, ДополнитьЗначение, НольКакНоль);		
	//КонецЕсли;
	Если Найти(СписокИсключений, "|Приложение9|") = 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Приложение9", ИмяПоказателя,  Длина, Значение, ДополнитьЗначение, НольКакНоль);		
	КонецЕсли;
	//Если Найти(СписокИсключений, "|Заявление|") = 0 Тогда
	//	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Заявление", ИмяПоказателя,  Длина, Значение, ДополнитьЗначение, НольКакНоль);		
	//КонецЕсли;
	//Если Найти(СписокИсключений, "|Филиалы|") = 0 Тогда
	//	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Филиалы", ИмяПоказателя,  Длина, Значение, ДополнитьЗначение, НольКакНоль);		
	//КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПоказательНаСервере(ИмяОбласти, Значение, Форма, ИмяРазделаПоказателя);

	ТекРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Если ТекРаздел = ИмяРазделаПоказателя Тогда
		
		Если НЕ Форма.ТабличныйДокумент.Области.Найти(ИмяОбласти) = Неопределено Тогда
		
			Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение = Значение;
		
		КонецЕсли;
		
	Иначе	
		
		Форма["СтруктураДанных" + ИмяРазделаПоказателя].Вставить(ИмяОбласти, Значение);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПоказательНаСервере(ИмяОбласти, Форма, ИмяРазделаПоказателя)

	ТекРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Если ТекРаздел = ИмяРазделаПоказателя Тогда
		
		Возврат Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение;
		
	Иначе	
		
		Значение = Неопределено;
		Форма["СтруктураДанных" + ИмяРазделаПоказателя].Свойство(ИмяОбласти, Значение);
		
		Если Значение = Неопределено Тогда
			
			ДанныеПоказателя = Форма.мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента, КодПоказателяПоФорме", ИмяРазделаПоказателя, ИмяОбласти));
			Если ДанныеПоказателя.Количество() > 0
				И (    ДанныеПоказателя[0].ТипДанныхПоказателя = "Ч"
				   ИЛИ ДанныеПоказателя[0].ТипДанныхПоказателя = "Е") Тогда
				Значение = 0;	   
			Иначе
				Значение = "";	
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Значение;
		
	КонецЕсли;	

КонецФункции // ()

// СобратьДанныеТекущегоТаблПоляНаСервере()
//
&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции // СобратьДанныеТекущегоТаблПоляНаСервере()

// СобратьДанныеТекущегоТаблПоляНаКлиенте()
//
&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции // СобратьДанныеТекущегоТаблПоляНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаСервере()

// ОбновитьСтруктуруМногострочногоРазделаНаКлиенте()
//
&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаКлиенте()

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
    Перем ЕстьДуплекс;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация =	СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи			                              = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий					                      = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
				
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
				
			КонецЕсли;
						
		КонецЦикла;
						
	КонецЕсли;
    	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
	КонецЕсли;
	
	//Если НЕ СписокСохранения.Свойство("ОтчетЗаДваМесяца", 	   СтруктураРеквизитовФормы.ОтчетЗаДваМесяца) Тогда
	//	СтруктураРеквизитовФормы.ОтчетЗаДваМесяца = Ложь;	
	//КонецЕсли;	
	Если НЕ СписокСохранения.Свойство("СпецРежим", 	   СтруктураРеквизитовФормы.СпецРежим) Тогда
		СтруктураРеквизитовФормы.СпецРежим = 0;	
	КонецЕсли;	
	Если НЕ СписокСохранения.Свойство("ПроцентШтрафа", 	   СтруктураРеквизитовФормы.ПроцентШтрафа) Тогда
		СтруктураРеквизитовФормы.ПроцентШтрафа = 3;	
	КонецЕсли;	
	Если НЕ СписокСохранения.Свойство("УточняемыйОтчет", 	   СтруктураРеквизитовФормы.УточняемыйОтчет) Тогда
		СтруктураРеквизитовФормы.УточняемыйОтчет = Неопределено;	
	КонецЕсли;	
	Если НЕ СписокСохранения.Свойство("ДатаНач", 	   СтруктураРеквизитовФормы.ДатаНач) Тогда
		СтруктураРеквизитовФормы.ДатаНач = '00010101';	
	КонецЕсли;	
	Если НЕ СписокСохранения.Свойство("ДатаКон", 	   СтруктураРеквизитовФормы.ДатаКон) Тогда
		СтруктураРеквизитовФормы.ДатаКон = '00010101';	
	КонецЕсли;	
	Если НЕ СписокСохранения.Свойство("СпецРежим", 	   СтруктураРеквизитовФормы.СпецРежим) Тогда
		СтруктураРеквизитовФормы.ДатаКон = 0;	
	КонецЕсли;	
	
	Если НЕ СписокСохранения.Свойство("НеВыдаватьСообщенияОбОшибкахВРасчете", СтруктураРеквизитовФормы.НеВыдаватьСообщенияОбОшибкахВРасчете) Тогда
		СтруктураРеквизитовФормы.НеВыдаватьСообщенияОбОшибкахВРасчете = Ложь;
	КонецЕсли;	

	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
					
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
									 				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("ДополнительныеДанные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДополнительныеДанные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.ДополнительныеДанные.Очистить();
							СтрокаТаблЗнач.ДополнительныеДанные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].ДополнительныеДанные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
								
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							СтруктураДопСтрок = Новый Структура;
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
								
								СтруктураДопСтрок.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
                                								
							КонецЦикла;
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтруктураДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
								   				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;

	СписокСохранения.Свойство("ЕстьДуплекс", ЕстьДуплекс);
	Если ЕстьДуплекс = Неопределено Тогда
		ЕстьДуплекс = Ложь;
	КонецЕсли;
	СтруктураРеквизитовФормы.ЕстьДуплекс = ЕстьДуплекс;
	Элементы.ЕстьДуплекс.Пометка         = ЕстьДуплекс;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;
	ИмяТекРаздела = "Декларация";
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, 1);
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);

	Модифицированность   = Ложь;
	
КонецПроцедуры // ВосстановитьСохраненныеДанные()

// ВывестиРазделВТабличныйДокументНаКлиенте()
//
&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры // ВывестиРазделВТабличныйДокументНаКлиенте()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры // ВывестиРазделВТабличныйДокументНаСервере()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//  ПерерисоватьСтроки - Истина из процедуры удаления доп. строк, для перерисовки областей.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = Неопределено)
	Перем ИсходноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
		
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	ПерерисоватьСтроки = (НЕ ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы);
		
	Раздел = Форма[ТекТабличноеПолеИмя];
	
	КолонкиГруппы = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];		
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе");
		
		КолонкиМногострочныхРазделов = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов;
		ИмяОбластиПечати			 = "";
		
		ДанныеОПечатиОтчета = Форма.мДеревоСтраницОтчета.ПолучитьЭлементы();
		Для Сч = 1 По ДанныеОПечатиОтчета.Количество() Цикл
			ДанныеОПечатиСтраницы = ДанныеОПечатиОтчета[Сч - 1];	
			Если ДанныеОПечатиСтраницы.ИмяСтраницы = ТекущаяСтраница Тогда
				ИмяОбластиПечати = ДанныеОПечатиСтраницы.ИмяОбластиТабличногоПоля;	
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		
		РегламентированнаяОтчетностьВызовСервера.ВывестиРазделВТабличныйДокументНаСервере(НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, КолонкиМногострочныхРазделов, ИмяОбластиПечати);
		
		Форма[ТекТабличноеПолеИмя] = Раздел;
		ТекТабличноеПоле           = Форма[ТекТабличноеПолеИмя];
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
		
		Для Каждого КолонкаТаблицыИмя Из КолонкиГруппы Цикл
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;
				
				ОбластьЯчейкиТаблицы          = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
	
	СтрокВГруппе 		= СтруктураГруппы.Количество();
	СтрокВТабличномПоле = Форма.мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы];
	КоличествоСтрок = МАКС(СтрокВГруппе, СтрокВТабличномПоле);
	Если ИмяКолонкиНомера <> Неопределено Тогда
		
		Для НомерСтрокиВФормеТаблицы = 1 По КоличествоСтрок Цикл
			
			НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
			ИмяЯчейки                	= ИмяКолонкиНомера + "_" + НомерСтрокиВФормеТаблицыСтр;
			ОбластьЯчейкиТаблицы     	= ТекТабличноеПоле.Области[ИмяЯчейки];
	
			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				ОбластьЯчейкиТаблицы.Значение = НомерСтрокиВФормеТаблицы + НомерПервойСтроки - 1;
			Иначе
				ОбластьЯчейкиТаблицы.Текст = НомерСтрокиВФормеТаблицы + НомерПервойСтроки - 1;
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	
	
КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

&НаКлиенте
Процедура СохранитьОтчет(Команда)
		
	СохранитьНаКлиенте();
		
КонецПроцедуры

// СохранитьНаКлиенте()
//
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт

	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, Автосохранение) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(Автосохранение, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
				
КонецПроцедуры // СохранитьНаКлиенте()

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// ПередСохранением()
//
&НаСервере
Функция ПередСохранением(Автосохранение, НаимТекРаздела)
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Возврат Сохранить(Автосохранение, НаимТекРаздела);
		
КонецФункции // ПередСохранением()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
&НаСервере
Функция Сохранить(Автосохранение = Ложь, НаимТекРаздела) Экспорт	
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
			
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, Автосохранение, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета 			 = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета 		 = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;

	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	//СписокСохранения.Вставить("ОтчетЗаДваМесяца",  		СтруктураРеквизитовФормы.ОтчетЗаДваМесяца);
	СписокСохранения.Вставить("СпецРежим", 				СтруктураРеквизитовФормы.СпецРежим);
	СписокСохранения.Вставить("НеВыдаватьСообщенияОбОшибкахВРасчете", СтруктураРеквизитовФормы.НеВыдаватьСообщенияОбОшибкахВРасчете);
	СписокСохранения.Вставить("ПроцентШтрафа",  			СтруктураРеквизитовФормы.ПроцентШтрафа);
	СписокСохранения.Вставить("УточняемыйОтчет",  			СтруктураРеквизитовФормы.УточняемыйОтчет);
	СписокСохранения.Вставить("ДатаНач",  					СтруктураРеквизитовФормы.ДатаНач);
	СписокСохранения.Вставить("ДатаКон", 		 			СтруктураРеквизитовФормы.ДатаКон);

	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ТаблЗнач.Колонки.Найти("ДополнительныеДанные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("ДополнительныеДанные");
				ТаблЗнач.Колонки.Добавить("ДополнительныеДанные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.ДополнительныеДанные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДополнительныеДанные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение Цикл
														
						СтруктураДанныхДопСтрок.Вставить(ЭлСтруктуры.Ключ, ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
					
					Ном = Ном + 1;
			
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;

		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	СписокСохранения.Вставить("ЕстьДуплекс", СтруктураРеквизитовФормы.ЕстьДуплекс);
		
	Если СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда
		СписокСохранения.Вставить("СозданКакХранилищеПараметровДляЗвит1С", Истина);
	КонецЕсли;
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1';uk='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
			
	Модифицированность   = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Возврат Истина;

КонецФункции // Сохранить()

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоказателиОтчетаНаСервере()

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			ЗаполнитьПоказателиЗначениямиПоУмолчанию(Раздел.ИмяСтраницы);
			
		КонецЕсли;
		
		Если Раздел.ИмяСтраницы = "ПриложениеПН" Тогда
			Для Каждого Страница Из ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]] Цикл
		   		Если Страница.ДополнительныеДанные.Количество() = 0 Тогда
					Страница.ДополнительныеДанные.Очистить();
					Страница.ДополнительныеДанные.Добавить(Новый Структура);
					Страница.ДополнительныеДанные[0].Пометка = Ложь;
				КонецЕсли;
				
		   		Если Страница.Данные.Количество() = 0 Тогда
					Страница.Данные.Очистить();
					Страница.Данные.Добавить(Новый Структура);
					Страница.Данные[0].Пометка = Ложь;
				КонецЕсли;
				
		   		Если Страница.ДанныеДопСтрок.Количество() = 0 Тогда
					Страница.ДанныеДопСтрок.Очистить();
					Страница.ДанныеДопСтрок.Добавить(Новый Структура);
					Страница.ДанныеДопСтрок[0].Пометка = Ложь;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры // ЗаполнитьПустыеСтруктурыДанных()

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры // СохранитьДеревоНастройкиСтраниц()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
Процедура ПриЗакрытии()
	
	ПриЗакрытииНаСервере();
		
КонецПроцедуры // ПриЗакрытии()

// ПриЗакрытииНаСервере()
//
&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("РегламентированнаяОтчетность", "ЕстьДуплекс", СтруктураРеквизитовФормы.ЕстьДуплекс);
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытииНаСервере()

// ПоказатьСтраницуМногостраничногоРазделаНаКлиенте()
//
&НаКлиенте
Процедура ПоказатьСтраницуМногостраничногоРазделаНаКлиенте(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	
	ПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРазделаНаКлиенте()

// ПоказатьСтраницуМногостраничногоРазделаНаСервере()
//
&НаСервере
Процедура ПоказатьСтраницуМногостраничногоРазделаНаСервере(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	
	ПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
		
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРазделаНаСервере()

// ПоказатьСтраницуМногостраничногоРаздела()
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСтраницуМногостраничногоРаздела(Форма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьСтраницуМногостраничногоРаздела(Форма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	//Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
	//	#Если НаКлиенте Тогда
	//		Форма.ИзменитьЦветЯчеекНаКлиенте();
	//	#Иначе
	//		Форма.ИзменитьЦветЯчеекНаСервере();
	//	#КонецЕсли
	//КонецЕсли;
	
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

&НаКлиенте
Процедура ИзменитьЦветЯчеекНаКлиенте() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры // ИзменитьЦветЯчеекНаКлиенте()

&НаСервере
Процедура ИзменитьЦветЯчеекНаСервере() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры // ИзменитьЦветЯчеекНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьЦветЯчеек(Форма)

	//КодОперации = СокрЛП(Форма.ТабличныйДокумент.Области.П000200007003.Значение);
	//
	//Если КодОперации = "1011705" ИЛИ КодОперации = "1011707" Тогда
	//	
	//	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
	//		ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200006003");
	//	Иначе	
	//		ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000200006003");
	//	КонецЕсли;
	//
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200008003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200009003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200010003");
	//	
	//Иначе	
	//	
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200006003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200008003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200009003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200010003");
	//	
	//	Форма.ТабличныйДокумент.Области.П000200008003.Значение = "";
	//	Форма.ТабличныйДокумент.Области.П000200009003.Значение = "";
	//	Форма.ТабличныйДокумент.Области.П000200010003.Значение = "";
	//			
	//КонецЕсли;
		
КонецПроцедуры // ИзменитьЦветЯчеек()

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьВариантЗаполненияЯчейки(Форма, НовыйВариант, Показатель = Неопределено)
    		
	ИмяТекущейСтраницыПанели = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
    		
	#Если НаКлиенте Тогда
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
	#Иначе
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
	#КонецЕсли
	
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть;
	Если Показатель = Неопределено Тогда
		ИмяПоказателя   = ТекущаяОбласть.Имя;
	Иначе
		ИмяПоказателя = Показатель;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.НайтиСтроки(Новый Структура("КодПоказателя", ИмяПоказателя));
	Если НайденнаяСтрока.Количество() > 0 Тогда
		НайденнаяСтрока = НайденнаяСтрока[0];
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	УстановитьЦветФонаЯчейки(Форма, ИмяПоказателя, НовыйВариант);
		
КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// ОбновитьПеременныеМодуляНаСервере()
//
&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции // ОбновитьПеременныеМодуляНаСервере()

// ОбновитьПеременныеМодуляНаКлиенте()
//
&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции // ОбновитьПеременныеМодуляНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(Форма, ИмяПоказателя, ЗначениеПоказателя)
	
	ИзмененияПроизошли = Ложь;
	
	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;
	
	////Если (ИмяПоказателя = "Сумма30Раздел1")
	//// Или (ИмяПоказателя = "Сумма40Раздел1")
	//// Или (ИмяПоказателя = "Сумма50Раздел1")
	//// Или (ИмяПоказателя = "Сумма60Раздел1") Тогда
	////	Форма.мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	////	ИзмененияПроизошли = Истина;
	////ИначеЕсли ИмяПоказателя = "КБКРаздел1" Тогда
	////	Форма.мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	////	ИзмененияПроизошли = Истина;
	////ИначеЕсли ИмяПоказателя = "ОКАТОРаздел1" Тогда
	////	Форма.мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	////	ИзмененияПроизошли = Истина;
	////КонецЕсли;

	Возврат ИзмененияПроизошли;
	
КонецФункции // ОбновитьПеременныеМодуля()

// ОчиститьТабличноеПолеНаКлиенте()
//
&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры // ОчиститьТабличноеПолеНаКлиенте()

// ОчиститьТабличноеПолеНаСервере()
//
&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры // ОчиститьТабличноеПолеНаСервере()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	
	HZYP  = ПолучитьПоказательНаСервере("HZYP", Форма,"СлужебныеДанные");
	HZKVP = ПолучитьПоказательНаСервере("HZKVP",Форма,"СлужебныеДанные");
	HZMP  = ПолучитьПоказательНаСервере("HZMP", Форма,"СлужебныеДанные");
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	// Непосредственно очищаем ячейки табличного документа. РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле делает то же самое
	// Повторно, так как в результате расчета многостраничного многострочного блока заполняются итоговые ячейки, 
	// в арифметике которых есть показатели не из многострочного блока
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		Если Найти(Врег(ТекущаяОбласть.Имя), ВРег("Штампик")) > 0  Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;

	ЗаполнитьСведенияОбОрганизации(Форма);
	ЗаполнитьПриложение9(Форма);
	
	ЗаполнитьПоказательНаСервере("HZYP",HZYP,Форма,ВыбТабличноеПолеИмя);
	ЗаполнитьПоказательНаСервере("HZKVP",HZKVP,Форма,ВыбТабличноеПолеИмя);
	ЗаполнитьПоказательНаСервере("HZMP",HZMP,Форма,ВыбТабличноеПолеИмя);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, ВыбТабличноеПолеИмя,  "ГодОш_", 4, Формат(HZYP, "ЧЦ=4; ЧГ="), Ложь, Ложь);
	РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, ВыбТабличноеПолеИмя,  "МесОш_", 2, Формат(HZMP, "ЧЦ=2; ЧВН=; ЧГ="), Ложь, Ложь);
	ЗаполнитьПоказательНаСервере("КвОш",HZKVP,Форма,ВыбТабличноеПолеИмя);
	
КонецПроцедуры // ОчиститьТабличноеПоле()

// РасчетНаКлиенте()
//
&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры // РасчетНаКлиенте()

// РасчетНаСервере()
//
&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры // РасчетНаСервере()

// РАСЧЕТ()
// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет
// Параметры:
//  ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//
&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", ОбластьИмя = "")
	Перем ТаблицаБлока;

	Если (Форма.СтруктураРеквизитовФормы.мРежимПечати) Тогда
		Возврат; // служебный вызов в процессе печати
	КонецЕсли;
	
	Если (Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
		Возврат; // отключен режим авторасчета
	КонецЕсли;
	
	// обновим данные многострочных групп
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда

		ИдГрупп = Новый Структура;
		//ИдГрупп.Вставить("мИдГруппы",   Форма.СтруктураРеквизитовФормы.мИдГруппы);
		ИдГрупп.Вставить("мИдГруппы_2", Форма.СтруктураРеквизитовФормы.мИдГруппы_2);
		ИдГрупп.Вставить("мИдГруппы1",  Форма.СтруктураРеквизитовФормы.мИдГруппы1);
		ИдГрупп.Вставить("мИдГруппы2",  Форма.СтруктураРеквизитовФормы.мИдГруппы2);
		ИдГрупп.Вставить("мИдГруппы21", Форма.СтруктураРеквизитовФормы.мИдГруппы21);
		ИдГрупп.Вставить("мИдГруппы22", Форма.СтруктураРеквизитовФормы.мИдГруппы22);
		ИдГрупп.Вставить("мИдГруппы23", Форма.СтруктураРеквизитовФормы.мИдГруппы23);
		ИдГрупп.Вставить("мИдГруппы31", Форма.СтруктураРеквизитовФормы.мИдГруппы31);
		ИдГрупп.Вставить("мИдГруппы43", Форма.СтруктураРеквизитовФормы.мИдГруппы43);
		ИдГрупп.Вставить("мИдГруппы45", Форма.СтруктураРеквизитовФормы.мИдГруппы45);
		ИдГрупп.Вставить("мИдГруппы46", Форма.СтруктураРеквизитовФормы.мИдГруппы46);
		ИдГрупп.Вставить("мИдГруппы51", Форма.СтруктураРеквизитовФормы.мИдГруппы51);
		ИдГрупп.Вставить("мИдГруппы52", Форма.СтруктураРеквизитовФормы.мИдГруппы52);
		ИдГрупп.Вставить("мИдГруппыС1", Форма.СтруктураРеквизитовФормы.мИдГруппыС1);
		ИдГрупп.Вставить("мИдГруппыС2", Форма.СтруктураРеквизитовФормы.мИдГруппыС2);
		ИдГрупп.Вставить("мИдГруппыС3", Форма.СтруктураРеквизитовФормы.мИдГруппыС3);
		ИдГрупп.Вставить("мИдГруппы7",  Форма.СтруктураРеквизитовФормы.мИдГруппы7);
		//ИдГрупп.Вставить("мИдГруппы81", Форма.СтруктураРеквизитовФормы.мИдГруппы81);
		//ИдГрупп.Вставить("мИдГруппыФ1", Форма.СтруктураРеквизитовФормы.мИдГруппыФ1);
		
		ИмяГруппыМассив =  ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяСтраницыПанели, , ИдГрупп);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
			РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстСообщенияОбОшибкахРасчета = "";
											 
	////////////////////////////////////////////////
	// Расчет Приложения 1
	R001G4 = ПолучитьПоказательНаСервере("R0011G4", Форма, "Приложение1")
									+ ПолучитьПоказательНаСервере("R0012G4", Форма, "Приложение1") 
									+ ПолучитьПоказательНаСервере("R0013G4", Форма, "Приложение1") 
									+ ПолучитьПоказательНаСервере("R0014G4", Форма, "Приложение1");
	ЗаполнитьПоказательНаСервере("R001G4", R001G4, Форма, "Приложение1"); 																
								  
	R001G5 = ПолучитьПоказательНаСервере("R0011G5", Форма, "Приложение1")
									+ ПолучитьПоказательНаСервере("R0012G5", Форма, "Приложение1") 
									+ ПолучитьПоказательНаСервере("R0013G5", Форма, "Приложение1") 
									+ ПолучитьПоказательНаСервере("R0014G5", Форма, "Приложение1");
	ЗаполнитьПоказательНаСервере("R001G5", R001G5, Форма, "Приложение1"); 																
	
	R001G6 = ПолучитьПоказательНаСервере("R0011G6", Форма, "Приложение1")
									+ ПолучитьПоказательНаСервере("R0012G6", Форма, "Приложение1") 
									+ ПолучитьПоказательНаСервере("R0013G6", Форма, "Приложение1") 
									+ ПолучитьПоказательНаСервере("R0014G6", Форма, "Приложение1");
	ЗаполнитьПоказательНаСервере("R001G6", R001G6, Форма, "Приложение1"); 																
	
	R001G7 = ПолучитьПоказательНаСервере("R0011G7", Форма, "Приложение1")
									+ ПолучитьПоказательНаСервере("R0012G7", Форма, "Приложение1") 
									+ ПолучитьПоказательНаСервере("R0013G7", Форма, "Приложение1") 
									+ ПолучитьПоказательНаСервере("R0014G7", Форма, "Приложение1");
	ЗаполнитьПоказательНаСервере("R001G7", R001G7, Форма, "Приложение1"); 																
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы1, ТаблицаБлока);
	ТаблицаБлока = Форма[ТаблицаБлока];
	R010G4 = ТаблицаБлока.Итог("T1RXXXXG4") + ПолучитьПоказательНаСервере("R001G4", Форма, "Приложение1");
	R010G5 = ТаблицаБлока.Итог("T1RXXXXG5") + ПолучитьПоказательНаСервере("R001G5", Форма, "Приложение1");
	R010G6 = ТаблицаБлока.Итог("T1RXXXXG6") + ПолучитьПоказательНаСервере("R001G6", Форма, "Приложение1");
	R010G7 = ТаблицаБлока.Итог("T1RXXXXG7") + ПолучитьПоказательНаСервере("R001G7", Форма, "Приложение1");
	ЗаполнитьПоказательНаСервере("R010G4", R010G4, Форма, "Приложение1");
	ЗаполнитьПоказательНаСервере("R010G5", R010G5, Форма, "Приложение1");
	ЗаполнитьПоказательНаСервере("R010G6", R010G6, Форма, "Приложение1");
	ЗаполнитьПоказательНаСервере("R010G7", R010G7, Форма, "Приложение1");
                                                                                   
	//R70GA = ПолучитьПоказательНаСервере("R010G4", Форма, "Приложение1") + ПолучитьПоказательНаСервере("R010G7", Форма, "Приложение1");
	//ЗаполнитьПоказательНаСервере("R70GA", R70GA, Форма, "Декларация");
	//R70GB = ПолучитьПоказательНаСервере("R010G5", Форма, "Приложение1") + ПолучитьПоказательНаСервере("R010G6", Форма, "Приложение1");
	//ЗаполнитьПоказательНаСервере("R70GB", R70GB, Форма, "Декларация");
	//
	//R60GA = ПолучитьПоказательНаСервере("R013G4", Форма, "Приложение1") + ПолучитьПоказательНаСервере("R013G7", Форма, "Приложение1");
	//ЗаполнитьПоказательНаСервере("R60GA", R60GA, Форма, "Декларация");
	//R60GB = ПолучитьПоказательНаСервере("R013G5", Форма, "Приложение1") + ПолучитьПоказательНаСервере("R013G6", Форма, "Приложение1");
	//ЗаполнитьПоказательНаСервере("R60GB", R60GB, Форма, "Декларация");
	
	Если Форма.СтруктураРеквизитовФормы.мНеВыдаватьСообщенияОбОшибкахВРасчете = Истина ИЛИ Форма.СтруктураРеквизитовФормы.НеВыдаватьСообщенияОбОшибкахВРасчете  Тогда
	Иначе
		
		R70GA6 = ПолучитьПоказательНаСервере("R70GA", Форма, "Декларация") - ПолучитьПоказательНаСервере("R70GA4", Форма, "Декларация");
		ЗаполнитьПоказательНаСервере("R70GA6", R70GA6, Форма, "Декларация");
		
		R70GB6 = ПолучитьПоказательНаСервере("R70GB", Форма, "Декларация") - ПолучитьПоказательНаСервере("R70GB4", Форма, "Декларация");
		ЗаполнитьПоказательНаСервере("R70GB6", R70GB6, Форма, "Декларация");
		
		R60GA6 = ПолучитьПоказательНаСервере("R60GA", Форма, "Декларация") - ПолучитьПоказательНаСервере("R60GA4", Форма, "Декларация");
		ЗаполнитьПоказательНаСервере("R60GA6", R60GA6, Форма, "Декларация");
		
		R60GB6 = ПолучитьПоказательНаСервере("R60GB", Форма, "Декларация") - ПолучитьПоказательНаСервере("R60GB4", Форма, "Декларация");
		ЗаполнитьПоказательНаСервере("R60GB6", R60GB6, Форма, "Декларация");
		
		Если    ОкруглитьЧислоПоФормату(Форма, R70GA6) <> ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R010G4", Форма, "Приложение1")) 
			ИЛИ ОкруглитьЧислоПоФормату(Форма, R70GB6) <> ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R010G5", Форма, "Приложение1") + ПолучитьПоказательНаСервере("R010G6", Форма, "Приложение1")) Тогда	
			ТекстСообщенияОбОшибкахРасчета = ТекстСообщенияОбОшибкахРасчета + Символы.ПС + Символы.Таб 
			+ НСтр("ru='значения строки 7 не совпадает с итогом по Таблцие 1 Приложения Д1 к декларации';uk='значення рядка 7 декларації не співпадає з підсумком по Таблиці 1 Додатку Д1 до декларації'");
		КонецЕсли;		
		
		Если    ОкруглитьЧислоПоФормату(Форма, R60GA6) <> ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R013G4", Форма, "Приложение1") + ПолучитьПоказательНаСервере("R013G7", Форма, "Приложение1")) 
			ИЛИ ОкруглитьЧислоПоФормату(Форма, R60GB6) <> ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R013G5", Форма, "Приложение1") + ПолучитьПоказательНаСервере("R013G6", Форма, "Приложение1")) Тогда	
			ТекстСообщенияОбОшибкахРасчета = ТекстСообщенияОбОшибкахРасчета + Символы.ПС + Символы.Таб 
			+ НСтр("ru='значения строки 6 не совпадает с данными из соответствующей строки Таблциы 1 Приложения Д1 к декларации';uk='значення рядка 6 декларації не співпадає з відповідним рядком Таблиці 1 Додатка Д1 до декларації'");
		КонецЕсли;		
		
	КонецЕсли;	
	
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы2, ТаблицаБлока);
	ТаблицаБлока = Форма[ТаблицаБлока];
	ЗаполнитьПоказательНаСервере("R020G4", ТаблицаБлока.Итог("T2RXXXXG4"), Форма, "Приложение1");
	ЗаполнитьПоказательНаСервере("R020G5", ТаблицаБлока.Итог("T2RXXXXG5"), Форма, "Приложение1");
	ЗаполнитьПоказательНаСервере("R020G6", ТаблицаБлока.Итог("T2RXXXXG6"), Форма, "Приложение1");
	
	R022G4 = 0;
	R022G5 = 0;
	R022G6 = 0;
	Для каждого Строка Из ТаблицаБлока Цикл
		Если Строка.T2RXXXXG32 = Истина Тогда
			R022G4 = R022G4 + Строка.T2RXXXXG4;
			R022G5 = R022G5 + Строка.T2RXXXXG5;
			R022G6 = R022G6 + Строка.T2RXXXXG6;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьПоказательНаСервере("R022G4", R022G4, Форма, "Приложение1");
	ЗаполнитьПоказательНаСервере("R022G5", R022G5, Форма, "Приложение1");
	ЗаполнитьПоказательНаСервере("R022G6", R022G6, Форма, "Приложение1");

	// перенесем работы от нерезидента в строку 13 Декларации
	//R130GA = ПолучитьПоказательНаСервере("R023G4", Форма, "Приложение1");
	//R130GB = ПолучитьПоказательНаСервере("R023G5", Форма, "Приложение1") + ПолучитьПоказательНаСервере("R023G6", Форма, "Приложение1");
	//ЗаполнитьПоказательНаСервере("R130GA", R130GA, Форма, "Декларация");
	//ЗаполнитьПоказательНаСервере("R130GB", R130GB, Форма, "Декларация");
	//
	//// перенесем в строку 14 Декларации
	//R140GA = ПолучитьПоказательНаСервере("R020G4", Форма, "Приложение1");
	//R140GB = ПолучитьПоказательНаСервере("R020G5", Форма, "Приложение1") + ПолучитьПоказательНаСервере("R020G6", Форма, "Приложение1");
	//ЗаполнитьПоказательНаСервере("R140GA", R140GA, Форма, "Декларация");
	//ЗаполнитьПоказательНаСервере("R140GB", R140GB, Форма, "Декларация");
	
	Если Форма.СтруктураРеквизитовФормы.мНеВыдаватьСообщенияОбОшибкахВРасчете = Истина ИЛИ Форма.СтруктураРеквизитовФормы.НеВыдаватьСообщенияОбОшибкахВРасчете  Тогда
	Иначе
		R130GA6 = ПолучитьПоказательНаСервере("R130GA", Форма, "Декларация") - ПолучитьПоказательНаСервере("R130GA4", Форма, "Декларация");
		ЗаполнитьПоказательНаСервере("R130GA6", R130GA6, Форма, "Декларация");
		R130GB6 = ПолучитьПоказательНаСервере("R130GB", Форма, "Декларация") - ПолучитьПоказательНаСервере("R130GB4", Форма, "Декларация");
		ЗаполнитьПоказательНаСервере("R130GB6", R130GB6, Форма, "Декларация");
		
		R140GA6 = ПолучитьПоказательНаСервере("R140GA", Форма, "Декларация") - ПолучитьПоказательНаСервере("R140GA4", Форма, "Декларация");
		ЗаполнитьПоказательНаСервере("R140GA6", R140GA6, Форма, "Декларация");
		R140GB6 = ПолучитьПоказательНаСервере("R140GB", Форма, "Декларация") - ПолучитьПоказательНаСервере("R140GB4", Форма, "Декларация");
		ЗаполнитьПоказательНаСервере("R140GB6", R140GB6, Форма, "Декларация");
		
		Если    ОкруглитьЧислоПоФормату(Форма, R130GA6) <> ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R023G4", Форма, "Приложение1")) 
			ИЛИ ОкруглитьЧислоПоФормату(Форма, R130GB6) <> ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R023G5", Форма, "Приложение1") + ПолучитьПоказательНаСервере("R023G6", Форма, "Приложение1")) Тогда	
			ТекстСообщенияОбОшибкахРасчета = ТекстСообщенияОбОшибкахРасчета + Символы.ПС + Символы.Таб 
			+ НСтр("ru='значения строки 13 не совпадает с cоответствующей строкой Таблциы 2 Приложения Д1 к декларации';uk='значення рядка 13 декларації не співпадає з відповідним рядком Таблиці 2 Додатку Д1 до декларації'");
		КонецЕсли;		
		
		Если    ОкруглитьЧислоПоФормату(Форма, R140GA6) <> ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R020G4", Форма, "Приложение1")) 
			ИЛИ ОкруглитьЧислоПоФормату(Форма, R140GB6) <> ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R020G5", Форма, "Приложение1") + ПолучитьПоказательНаСервере("R020G6", Форма, "Приложение1")) Тогда	
			ТекстСообщенияОбОшибкахРасчета = ТекстСообщенияОбОшибкахРасчета + Символы.ПС + Символы.Таб 
			+ НСтр("ru='значения строки 14 не совпадает с итогом по Таблцие 2 Приложения Д1 к декларации';uk='значення рядка 14 декларації не співпадає з підсумком по Таблиці 2 Додатку Д1 до декларації'");
		КонецЕсли;		
	КонецЕсли;		
	
	////////////////////////////////////////////////
	// Расчет Приложения 2
	Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы21, ТаблицаБлока);
	ТаблицаБлока = Форма[ТаблицаБлока];
	
	R02G5 = ОкруглитьЧислоПоФормату(Форма, ТаблицаБлока.Итог("П2T1RXXXXG5")) + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01G5", Форма, "Приложение2"));
	ЗаполнитьПоказательНаСервере("R02G5", R02G5, Форма, "Приложение2");
	R02G6 = ОкруглитьЧислоПоФормату(Форма, ТаблицаБлока.Итог("П2T1RXXXXG6"));
	ЗаполнитьПоказательНаСервере("R02G6", R02G6, Форма, "Приложение2");
	
	СуммаСловами = Окр(ПолучитьПоказательНаСервере("R03G2", Форма, "Приложение2"), 0);
	СуммаСловами = ЧислоПрописью(СуммаСловами, "Л=uk_UA; ДП=Ложь","гривня,гривні,гривень,ж,,,,,0");
	ЗаполнитьПоказательНаСервере("R03G1S", СуммаСловами, Форма, "Приложение2");
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы22, ТаблицаБлока);
	ТаблицаБлока = Форма[ТаблицаБлока];
	R04G3 = ОкруглитьЧислоПоФормату(Форма, ТаблицаБлока.Итог("П2T2RXXXXG3"));
	ЗаполнитьПоказательНаСервере("R04G3", R04G3, Форма, "Приложение2");
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы23, ТаблицаБлока);
	ТаблицаБлока = Форма[ТаблицаБлока];
	R05G5 = ОкруглитьЧислоПоФормату(Форма, ТаблицаБлока.Итог("П2T3RXXXXG5"));
	ЗаполнитьПоказательНаСервере("R05G5", R05G5, Форма, "Приложение2");
	
	////////////////////////////////////////////////
	// Расчет Приложения 5
		
	R001G4 = ПолучитьПоказательНаСервере("R0011G4", Форма, "Приложение5")
			+ ПолучитьПоказательНаСервере("R0012G4", Форма, "Приложение5") 
			+ ПолучитьПоказательНаСервере("R0014G4", Форма, "Приложение5");
	ЗаполнитьПоказательНаСервере("R001G4", R001G4, Форма, "Приложение5");
								  
	R001G5 = ПолучитьПоказательНаСервере("R0011G5", Форма, "Приложение5")
			+ ПолучитьПоказательНаСервере("R0012G5", Форма, "Приложение5") 
			+ ПолучитьПоказательНаСервере("R0014G5", Форма, "Приложение5");
	ЗаполнитьПоказательНаСервере("R001G5", R001G5, Форма, "Приложение5");
	
	R001G6 = ПолучитьПоказательНаСервере("R0011G6", Форма, "Приложение5")
			+ ПолучитьПоказательНаСервере("R0012G6", Форма, "Приложение5") 
			+ ПолучитьПоказательНаСервере("R0014G6", Форма, "Приложение5");
	ЗаполнитьПоказательНаСервере("R001G6", R001G6, Форма, "Приложение5");
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы51, ТаблицаБлока);
	ТаблицаБлока = Форма[ТаблицаБлока];
	R010G4 = ТаблицаБлока.Итог("П5T1RXXXXG4") + ПолучитьПоказательНаСервере("R001G4", Форма, "Приложение5");
	R010G5 = ТаблицаБлока.Итог("П5T1RXXXXG5") + ПолучитьПоказательНаСервере("R001G5", Форма, "Приложение5");
	R010G6 = ТаблицаБлока.Итог("П5T1RXXXXG6") + ПолучитьПоказательНаСервере("R001G6", Форма, "Приложение5");
	ЗаполнитьПоказательНаСервере("R010G4", R010G4, Форма, "Приложение5");
	ЗаполнитьПоказательНаСервере("R010G5", R010G5, Форма, "Приложение5");
	ЗаполнитьПоказательНаСервере("R010G6", R010G6, Форма, "Приложение5");
	
	R012G4 = 0;
	R012G5 = 0;
	Для каждого Строка Из ТаблицаБлока Цикл
		Если Строка.П5T1RXXXXG42 = Истина Тогда
			R012G4 = R012G4 + Строка.П5T1RXXXXG4;
			R012G5 = R012G5 + Строка.П5T1RXXXXG5;
		КонецЕсли;
	КонецЦикла;	
	ЗаполнитьПоказательНаСервере("R012G4", R012G4, Форма, "Приложение5");
	ЗаполнитьПоказательНаСервере("R012G5", R012G5, Форма, "Приложение5");
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы52, ТаблицаБлока);
	ТаблицаБлока = Форма[ТаблицаБлока];
	ЗаполнитьПоказательНаСервере("R020G4", ТаблицаБлока.Итог("П5T2RXXXXG4"), Форма, "Приложение5");
	ЗаполнитьПоказательНаСервере("R020G5", ТаблицаБлока.Итог("П5T2RXXXXG5"), Форма, "Приложение5");
	ЗаполнитьПоказательНаСервере("R020G6", ТаблицаБлока.Итог("П5T2RXXXXG6"), Форма, "Приложение5");

	R023G4 = 0;R023G5 = 0;R023G6 = 0;
	R025G4 = 0;R025G5 = 0;R025G6 = 0;
	Для каждого Строка52 Из ТаблицаБлока Цикл
		Если ЗначениеЗаполнено(Строка52.П5T2RXXXXG41) Тогда
			R023G4 = R023G4 + Строка52.П5T2RXXXXG4;
			R023G5 = R023G5 + Строка52.П5T2RXXXXG5;
			R023G6 = R023G6 + Строка52.П5T2RXXXXG6;
		КонецЕсли;
		Если Строка52.П5T2RXXXXG42 = Истина Тогда
			R025G4 = R025G4 + Строка52.П5T2RXXXXG4;
			R025G5 = R025G5 + Строка52.П5T2RXXXXG5;
			R025G6 = R025G6 + Строка52.П5T2RXXXXG6;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьПоказательНаСервере("R023G4", R023G4, Форма, "Приложение5");
	ЗаполнитьПоказательНаСервере("R023G5", R023G5, Форма, "Приложение5");
	ЗаполнитьПоказательНаСервере("R023G6", R023G6, Форма, "Приложение5");
	ЗаполнитьПоказательНаСервере("R025G4", R025G4, Форма, "Приложение5");
	ЗаполнитьПоказательНаСервере("R025G5", R025G5, Форма, "Приложение5");
	ЗаполнитьПоказательНаСервере("R025G6", R025G6, Форма, "Приложение5");
	
	Если Форма.СтруктураРеквизитовФормы.НеВыдаватьСообщенияОбОшибкахВРасчете = Истина ИЛИ Форма.СтруктураРеквизитовФормы.НеВыдаватьСообщенияОбОшибкахВРасчете  Тогда
	Иначе
		
		Если (ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R101GA", Форма, "Декларация") + ПолучитьПоказательНаСервере("R102GA", Форма, "Декларация")) <> ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R020G4", Форма, "Приложение5")))
				или
			 (ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R101GB", Форма, "Декларация")) <> ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R020G5", Форма, "Приложение5")))
				или
			 (ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R102GB", Форма, "Декларация")) <> ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R020G6", Форма, "Приложение5")))	Тогда
			
			ТекстСообщенияОбОшибкахРасчета = ТекстСообщенияОбОшибкахРасчета + Символы.ПС + Символы.Таб 
			+ НСтр("ru='значения строк 10.1, 10.2 декларации не совпадает с итогом по таблице 2 Раздела II Приложения №5 к декларации!';uk='значення рядків 10.1, 10.2 декларації не співпадає з підсумком таблиці 2 Розділу II Додатку 5 до декларації'");
			
		КонецЕсли;
		
	КонецЕсли;

	////////////////////////////////////////////////
	//Расчет для Приложения 6 (Справки к деларации)
	Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппыС1, ТаблицаБлока);
	ТаблицаБлока = Форма[ТаблицаБлока];
	ЗаполнитьПоказательНаСервере("R010G4", ТаблицаБлока.Итог("С1T1RXXXXG4"), Форма, "Справка");
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппыС2, ТаблицаБлока);
	ТаблицаБлока = Форма[ТаблицаБлока];                       
	ЗаполнитьПоказательНаСервере("R020G4", ТаблицаБлока.Итог("С1T2RXXXXG4"), Форма, "Справка");
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппыС3, ТаблицаБлока);
	ТаблицаБлока = Форма[ТаблицаБлока];
	R030G4 = ТаблицаБлока.Итог("С1T3RXXXXG4");
	ЗаполнитьПоказательНаСервере("R030G4", R030G4, Форма, "Справка");
	
	R01G4 = ПолучитьПоказательНаСервере("R010G4", Форма, "Справка") 
		+ ПолучитьПоказательНаСервере("R020G4", Форма, "Справка")
		+ ПолучитьПоказательНаСервере("R030G4", Форма, "Справка");
	ЗаполнитьПоказательНаСервере("R01G4", R01G4, Форма, "Справка");
	
	//ЗаполнитьПоказательНаСервере("R50GA", R01G4, Форма, "Декларация");
	Если Форма.СтруктураРеквизитовФормы.мНеВыдаватьСообщенияОбОшибкахВРасчете = Истина ИЛИ Форма.СтруктураРеквизитовФормы.НеВыдаватьСообщенияОбОшибкахВРасчете  Тогда
	Иначе
		
		R50GA6 = ПолучитьПоказательНаСервере("R50GA", Форма, "Декларация") - ПолучитьПоказательНаСервере("R50GA4", Форма, "Декларация");
		ЗаполнитьПоказательНаСервере("R50GA6", R50GA6, Форма, "Декларация");
		
		Если    ОкруглитьЧислоПоФормату(Форма, R50GA6) <> ОкруглитьЧислоПоФормату(Форма, R01G4) Тогда	
			ТекстСообщенияОбОшибкахРасчета = ТекстСообщенияОбОшибкахРасчета + Символы.ПС + Символы.Таб 
		КонецЕсли;		
		
	КонецЕсли;	

	////////////////////////////////////////////////
	//Расчет для Приложения 7
	// таблица 1
	Если ПолучитьПоказательНаСервере("R011G4", Форма, "Приложение7") > 0 Тогда
		R011G6 = Окр(ПолучитьПоказательНаСервере("R011G5", Форма, "Приложение7") / ПолучитьПоказательНаСервере("R011G4", Форма, "Приложение7"), 4) * 100;
		R011G7 = 100 - R011G6;
	Иначе	
	    R011G6 = 0;
		R011G7 = 0;
	КонецЕсли;
	ЗаполнитьПоказательНаСервере("R011G6", R011G6, Форма, "Приложение7");
	ЗаполнитьПоказательНаСервере("R011G7", R011G7, Форма, "Приложение7");
	
	Если ПолучитьПоказательНаСервере("R012G4", Форма, "Приложение7") > 0 Тогда
		R012G6 = Окр(ПолучитьПоказательНаСервере("R012G5", Форма, "Приложение7") / ПолучитьПоказательНаСервере("R012G4", Форма, "Приложение7"), 4) * 100;
		R012G7 = 100 - R012G6;
	Иначе	
	    R012G6 = 0;
		R012G7 = 0;
	КонецЕсли;
	ЗаполнитьПоказательНаСервере("R012G6", R012G6, Форма, "Приложение7");
	ЗаполнитьПоказательНаСервере("R012G7", R012G7, Форма, "Приложение7");
	
	Если ПолучитьПоказательНаСервере("R0131G4", Форма, "Приложение7") > 0 Тогда
		R0131G6 = Окр(ПолучитьПоказательНаСервере("R0131G5", Форма, "Приложение7") / ПолучитьПоказательНаСервере("R0131G4", Форма, "Приложение7"), 4) * 100;
		R0131G7 = 100 - R0131G6;
	Иначе	
	    R0131G6 = 0;
		R0131G7 = 0;
	КонецЕсли;
	ЗаполнитьПоказательНаСервере("R0131G6", R0131G6, Форма, "Приложение7");
	ЗаполнитьПоказательНаСервере("R0131G7", R0131G7, Форма, "Приложение7");
	
	Если ПолучитьПоказательНаСервере("R0132G4", Форма, "Приложение7") > 0 Тогда
		R0132G6 = Окр(ПолучитьПоказательНаСервере("R0132G5", Форма, "Приложение7") / ПолучитьПоказательНаСервере("R0132G4", Форма, "Приложение7"), 4) * 100;
		R0132G7 = 100 - R0132G6;
	Иначе	
	    R0132G6 = 0;
		R0132G7 = 0;
	КонецЕсли;
	ЗаполнитьПоказательНаСервере("R0132G6", R0132G6, Форма, "Приложение7");
	ЗаполнитьПоказательНаСервере("R0132G7", R0132G7, Форма, "Приложение7");
	
	Если ПолучитьПоказательНаСервере("R0133G4", Форма, "Приложение7") > 0 Тогда
		R0133G6 = Окр(ПолучитьПоказательНаСервере("R0133G5", Форма, "Приложение7") / ПолучитьПоказательНаСервере("R0133G4", Форма, "Приложение7"), 4) * 100;
		R0133G7 = 100 - R0133G6;
	Иначе	
	    R0133G6 = 0;
		R0133G7 = 0;
	КонецЕсли;
	ЗаполнитьПоказательНаСервере("R0133G6", R0133G6, Форма, "Приложение7");
	ЗаполнитьПоказательНаСервере("R0133G7", R0133G7, Форма, "Приложение7");
	
	Если    Форма.СтруктураРеквизитовФормы.мНеВыдаватьСообщенияОбОшибкахВРасчете = Истина
		ИЛИ Форма.СтруктураРеквизитовФормы.НеВыдаватьСообщенияОбОшибкахВРасчете Тогда
	ИначеЕсли (ПолучитьПоказательНаСервере("R011G4", Форма, "Приложение7") > 0  И  ПолучитьПоказательНаСервере("R012G4", Форма, "Приложение7") > 0)
			ИЛИ 
			  (ПолучитьПоказательНаСервере("R011G5", Форма, "Приложение7") > 0  И  ПолучитьПоказательНаСервере("R012G5", Форма, "Приложение7") > 0)  Тогда									
		ТекстСообщенияОбОшибкахРасчета = ТекстСообщенияОбОшибкахРасчета + Символы.ПС + Символы.Таб 
		+ НСтр("ru='Внимание: В таблице 1 Приложения 7 заполнены обе строки 1 и 2. Заполнять можно только одну строку из двух!';uk= 'Увага: В таблиці 1 Додатка 7 заповнені обидва рядки 1 и 2. Заповнювати можна тільки один з двох рядків!'");
	КонецЕсли;
	
	HCHV = ?(ПолучитьПоказательНаСервере("R011G6", Форма, "Приложение7") = 0, ПолучитьПоказательНаСервере("R012G6", Форма, "Приложение7"), ПолучитьПоказательНаСервере("R011G6", Форма, "Приложение7"));
	ЗаполнитьПоказательНаСервере("HCHV", HCHV, Форма, "Приложение7");
	
	// таблица 2
	Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы7, ТаблицаБлока);
	ТаблицаБлока = Форма[ТаблицаБлока];
	ЗаполнитьПоказательНаСервере("R02G6", ТаблицаБлока.Итог("П7T2RXXXXG6"), Форма, "Приложение7");
	ЗаполнитьПоказательНаСервере("R02G7", ТаблицаБлока.Итог("П7T2RXXXXG7"), Форма, "Приложение7");
	ЗаполнитьПоказательНаСервере("R02G8", ТаблицаБлока.Итог("П7T2RXXXXG8"), Форма, "Приложение7");
	ЗаполнитьПоказательНаСервере("R02G9", ТаблицаБлока.Итог("П7T2RXXXXG9"), Форма, "Приложение7");
	
	R150GB = 0;
	
	R031G7 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R031G6", Форма, "Приложение7")) - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R031G5", Форма, "Приложение7"));
	R032G7 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R032G6", Форма, "Приложение7")) - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R032G5", Форма, "Приложение7"));
	R033G7 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R033G6", Форма, "Приложение7")) - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R033G5", Форма, "Приложение7"));
	
	R150GB = R150GB + R031G7 + R032G7 + R033G7;	
	
	ЗаполнитьПоказательНаСервере("R031G7", R031G7, Форма, "Приложение7");
	ЗаполнитьПоказательНаСервере("R032G7", R032G7, Форма, "Приложение7");
	ЗаполнитьПоказательНаСервере("R033G7", R033G7, Форма, "Приложение7");
	
	//ЗаполнитьПоказательНаСервере("R150GB", R150GB, Форма, "Декларация");
	Если Форма.СтруктураРеквизитовФормы.мНеВыдаватьСообщенияОбОшибкахВРасчете = Истина ИЛИ Форма.СтруктураРеквизитовФормы.НеВыдаватьСообщенияОбОшибкахВРасчете  Тогда
	Иначе
		R150GB6 = ПолучитьПоказательНаСервере("R150GB", Форма, "Декларация") - ПолучитьПоказательНаСервере("R150GB4", Форма, "Декларация");
		ЗаполнитьПоказательНаСервере("R150GB6", R150GB6, Форма, "Декларация");
		Если  ОкруглитьЧислоПоФормату(Форма, R150GB6) <> ОкруглитьЧислоПоФормату(Форма, R150GB) Тогда	
			ТекстСообщенияОбОшибкахРасчета = ТекстСообщенияОбОшибкахРасчета + Символы.ПС + Символы.Таб 
			+ НСтр("ru='значения строки 15 не совпадает с итогом по Таблцие 3 Приложения Д7 к декларации';uk='значення рядка 15 декларації не співпадає з підсумком по Таблиці 3 Додатку Д7 до декларації'");
		КонецЕсли;		
	КонецЕсли;		
	
	////////////////////////////////////////////////
	// Расчет Приложения 9
	
	R0101G3 = ПолучитьПоказательНаСервере("R0101G3", Форма, "Приложение9");
	R0102G3 = ПолучитьПоказательНаСервере("R0102G3", Форма, "Приложение9");
	Если R0101G3 > R0102G3 Тогда
		R0103G3 =  ОкруглитьЧислоПоФормату(Форма, R0101G3)
		        -  ОкруглитьЧислоПоФормату(Форма, R0102G3);
	Иначе											  
		R0103G3 = 0;
	КонецЕсли;
	ЗаполнитьПоказательНаСервере("R0103G3", R0103G3, Форма, "Приложение9");
	
	СуммаПоСтолбцу3 = 0;
	СуммаПоСтолбцу4 = 0;
	СуммаПоСтолбцу5 = 0;
	СуммаПоСтолбцу6 = 0;
	
	ЗаполнитьПоказательНаСервере("R02G3", 0, Форма, "Приложение9");
	ЗаполнитьПоказательНаСервере("R02G4", 0, Форма, "Приложение9");
	ЗаполнитьПоказательНаСервере("R02G5", 0, Форма, "Приложение9");
	ЗаполнитьПоказательНаСервере("R02G6", 0, Форма, "Приложение9");
	
	Для СтрНомер = 1 По 12 Цикл
		ИмяТекущейЯчейкиСтолбца3 = "R02" +  Формат(СтрНомер,"ЧЦ=2;ЧВН=0;ЧГ=;") + "G3";
		ИмяТекущейЯчейкиСтолбца4 = "R02" +  Формат(СтрНомер,"ЧЦ=2;ЧВН=0;ЧГ=;") + "G4";
		ИмяТекущейЯчейкиСтолбца5 = "R02" +  Формат(СтрНомер,"ЧЦ=2;ЧВН=0;ЧГ=;") + "G5";
		ИмяТекущейЯчейкиСтолбца6 = "R02" +  Формат(СтрНомер,"ЧЦ=2;ЧВН=0;ЧГ=;") + "G6";
		
		ЗначениеСтолбца6 = ПолучитьПоказательНаСервере(ИмяТекущейЯчейкиСтолбца3, Форма, "Приложение9") 
						 + ПолучитьПоказательНаСервере(ИмяТекущейЯчейкиСтолбца5, Форма, "Приложение9");
		ЗаполнитьПоказательНаСервере(ИмяТекущейЯчейкиСтолбца6, ЗначениеСтолбца6, Форма, "Приложение9");
		
		СуммаПоСтолбцу3 = СуммаПоСтолбцу3 + ПолучитьПоказательНаСервере(ИмяТекущейЯчейкиСтолбца3, Форма, "Приложение9");
		СуммаПоСтолбцу4 = СуммаПоСтолбцу4 + ПолучитьПоказательНаСервере(ИмяТекущейЯчейкиСтолбца4, Форма, "Приложение9");
		СуммаПоСтолбцу5 = СуммаПоСтолбцу5 + ПолучитьПоказательНаСервере(ИмяТекущейЯчейкиСтолбца5, Форма, "Приложение9");
		СуммаПоСтолбцу6 = СуммаПоСтолбцу6 + ПолучитьПоказательНаСервере(ИмяТекущейЯчейкиСтолбца6, Форма, "Приложение9");
	КонецЦикла;	
	
	ЗаполнитьПоказательНаСервере("R02G3", СуммаПоСтолбцу3, Форма, "Приложение9");
	ЗаполнитьПоказательНаСервере("R02G4", СуммаПоСтолбцу4, Форма, "Приложение9");
	ЗаполнитьПоказательНаСервере("R02G5", СуммаПоСтолбцу5, Форма, "Приложение9");
	ЗаполнитьПоказательНаСервере("R02G6", СуммаПоСтолбцу6, Форма, "Приложение9");
	
	Если Не СуммаПоСтолбцу6 = 0 Тогда
	    ЗаполнитьПоказательНаСервере("R021G3", 100 * СуммаПоСтолбцу3 / СуммаПоСтолбцу6, Форма, "Приложение9");
	    ЗаполнитьПоказательНаСервере("R021G4", 100 * СуммаПоСтолбцу4 / СуммаПоСтолбцу6, Форма, "Приложение9");
	    ЗаполнитьПоказательНаСервере("R021G5", 100 * СуммаПоСтолбцу5 / СуммаПоСтолбцу6, Форма, "Приложение9");
	Иначе
	    ЗаполнитьПоказательНаСервере("R021G3", 0, Форма, "Приложение9");
	    ЗаполнитьПоказательНаСервере("R021G4", 0, Форма, "Приложение9");
	    ЗаполнитьПоказательНаСервере("R021G5", 0, Форма, "Приложение9");
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////
	// Декларация, 
	R90GB = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R11GB", Форма, "Декларация"))
	                                        + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R12GB", Форма, "Декларация"))
											+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R41GB", Форма, "Декларация"))
											+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R42GB", Форма, "Декларация"))
											+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R60GB", Форма, "Декларация"))
											+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R70GB", Форма, "Декларация"))
											+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R80GB", Форма, "Декларация"));

	ЗаполнитьПоказательНаСервере("R90GB", R90GB, Форма, "Декларация");
	
	R90GB4 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R11GB4", Форма, "Декларация"))
	                                        + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R12GB4", Форма, "Декларация"))
											+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R41GB4", Форма, "Декларация"))
											+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R42GB4", Форма, "Декларация"))
											+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R60GB4", Форма, "Декларация"))
											+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R70GB4", Форма, "Декларация"))
											+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R80GB4", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R90GB4", R90GB4, Форма, "Декларация");
	
	
	R160GB = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R161GB", Форма, "Декларация"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R162GB", Форма, "Декларация"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R163GB", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R160GB", R160GB, Форма, "Декларация");
	
	R160GB4 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R161GB4", Форма, "Декларация"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R162GB4", Форма, "Декларация"))
											 + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R163GB4", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R160GB4", R160GB4, Форма, "Декларация");
	
	R170GB = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R101GB", Форма, "Декларация"))
	                                        + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R102GB", Форма, "Декларация"))
											+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R111GB", Форма, "Декларация"))
											+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R112GB", Форма, "Декларация"))
											+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R120GB", Форма, "Декларация"))
											+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R130GB", Форма, "Декларация"))
											+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R140GB", Форма, "Декларация"))
											+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R150GB", Форма, "Декларация"))
											+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R160GB", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R170GB", R170GB, Форма, "Декларация");
	
	R170GB4 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R101GB4", Форма, "Декларация"))
	                                        + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R102GB4", Форма, "Декларация"))
											+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R111GB4", Форма, "Декларация"))
											+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R112GB4", Форма, "Декларация"))
											+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R120GB4", Форма, "Декларация"))
											+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R130GB4", Форма, "Декларация"))
											+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R140GB4", Форма, "Декларация"))
											+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R150GB4", Форма, "Декларация"))
											+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R160GB4", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R170GB4", R170GB4, Форма, "Декларация");
	
	R90GB = ПолучитьПоказательНаСервере("R90GB", Форма, "Декларация");
	R170GB = ПолучитьПоказательНаСервере("R170GB", Форма, "Декларация");
	Если R90GB > R170GB Тогда
		R180GB = R90GB - R170GB;
		R190GB  = 0;
	Иначе	
		R180GB = 0;
		R190GB = -(R90GB - R170GB);
	КонецЕсли;
	
	ЗаполнитьПоказательНаСервере("R180GB", R180GB, Форма, "Декларация");
	ЗаполнитьПоказательНаСервере("R190GB", R190GB, Форма, "Декларация");

	R90GB4 = ПолучитьПоказательНаСервере("R90GB4", Форма, "Декларация");
	R170GB4 = ПолучитьПоказательНаСервере("R170GB4", Форма, "Декларация");
	Если R90GB4 > R170GB4 Тогда
		R180GB4 = R90GB4 - R170GB4;
		R190GB4  = 0;
	Иначе	
		R180GB4 = 0;
		R190GB4 = -(R90GB4 - R170GB4);
	КонецЕсли;
	
	ЗаполнитьПоказательНаСервере("R180GB4", R180GB4, Форма, "Декларация");
	ЗаполнитьПоказательНаСервере("R190GB4", R190GB4, Форма, "Декларация");
	
	R190GB = ПолучитьПоказательНаСервере("R190GB", Форма, "Декларация");
	Если R190GB > 0 Тогда
		R191GB =  ОкруглитьЧислоПоФормату(Форма, R190GB)
												  - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R191G3", Форма, "Декларация"));
		R191GB = ?(R191GB < 0, 0, R191GB);
	Иначе											  
		R191GB = 0;
	КонецЕсли;
	ЗаполнитьПоказательНаСервере("R191GB", R191GB, Форма, "Декларация");
	
	R200GB =  ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R190GB", Форма, "Декларация"))
											  - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R191GB", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R200GB", R200GB, Форма, "Декларация");

	R201GB = ПолучитьПоказательНаСервере("R201GB", Форма, "Декларация");
	Если R201GB > ОкруглитьЧислоПоФормату(Форма, R200GB) Тогда
		
		R201GB = ОкруглитьЧислоПоФормату(Форма, R200GB);
	
	КонецЕсли;										  
	ЗаполнитьПоказательНаСервере("R201GB", R201GB, Форма, "Декларация");

	R190GB4 = ПолучитьПоказательНаСервере("R190GB4", Форма, "Декларация");
	Если R190GB4 > 0 Тогда
		R191GB4 =  ОкруглитьЧислоПоФормату(Форма, R190GB4)
												  - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R191G3", Форма, "Декларация"));
		R191GB4 = ?(R191GB4 < 0, 0, R191GB4);
	Иначе											  
		R191GB4 = 0;
	КонецЕсли;
	ЗаполнитьПоказательНаСервере("R191GB4", R191GB4, Форма, "Декларация");
	
	R200GB4 =  ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R190GB4", Форма, "Декларация"))
											  - ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R191GB4", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R200GB4", R200GB4, Форма, "Декларация");

	R201GB4 = ПолучитьПоказательНаСервере("R201GB4", Форма, "Декларация");
	Если R201GB4 > ОкруглитьЧислоПоФормату(Форма, R200GB4) Тогда
		
		R201GB4 = ОкруглитьЧислоПоФормату(Форма, R200GB4);
	
	КонецЕсли;										  
	ЗаполнитьПоказательНаСервере("R201GB4", R201GB4, Форма, "Декларация");
	
	
	////////////////////////////////////////////////
	// Расчет Приложения 3
	R010G3 = R200GB - R201GB;
	ЗаполнитьПоказательНаСервере("R010G3", R010G3, Форма, "Приложение3");
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы31, ТаблицаБлока);
	ТаблицаБлока = Форма[ТаблицаБлока];
	
	R01G5 = ОкруглитьЧислоПоФормату(Форма, ТаблицаБлока.Итог("П3T1RXXXXG5"));
	ЗаполнитьПоказательНаСервере("R01G5", R01G5, Форма, "Приложение3");
	
	R01G7 = ОкруглитьЧислоПоФормату(Форма, ТаблицаБлока.Итог("П3T1RXXXXG7"));
	ЗаполнитьПоказательНаСервере("R01G7", R01G7, Форма, "Приложение3");
	
	R020G3 = ?(R01G7 > 0, R01G7, 0);
	ЗаполнитьПоказательНаСервере("R020G3", R020G3, Форма, "Приложение3");
	
	R030G3 =  ?(R020G3 < R010G3, R020G3, R010G3);
	ЗаполнитьПоказательНаСервере("R030G3", R030G3, Форма, "Приложение3");
											
	R202GB = R030G3;
	//ЗаполнитьПоказательНаСервере("R202GB", R202GB, Форма, "Декларация");
	Если Форма.СтруктураРеквизитовФормы.мНеВыдаватьСообщенияОбОшибкахВРасчете = Истина ИЛИ Форма.СтруктураРеквизитовФормы.НеВыдаватьСообщенияОбОшибкахВРасчете Тогда
	Иначе
		
		R202GB6 = ПолучитьПоказательНаСервере("R202GB", Форма, "Декларация") - ПолучитьПоказательНаСервере("R202GB4", Форма, "Декларация");
		ЗаполнитьПоказательНаСервере("R202GB6", R202GB6, Форма, "Декларация");
		
		Если ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R202GB6", Форма, "Декларация")) <> ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R030G3", Форма, "Приложение3"))  Тогда
			
			ТекстСообщенияОбОшибкахРасчета = ТекстСообщенияОбОшибкахРасчета + Символы.ПС + Символы.Таб 
			+ НСтр("ru='значения строки 20.2 не совпадает со строкой 3 Приложения Д3 к декларации';uk='значення рядка 20.2 декларації не співпадає з рядком 3 Додатку Д3 до декларації'");
			
		КонецЕсли;
		
	КонецЕсли;	
	
	R2021GB = ПолучитьПоказательНаСервере("R2021GB", Форма, "Декларация");
	R2022GB = ПолучитьПоказательНаСервере("R2022GB", Форма, "Декларация");
	Если R2021GB + R2022GB > R202GB Тогда
	
		R2021GB = ОкруглитьЧислоПоФормату(Форма, МИН(R2021GB, R202GB));
		ЗаполнитьПоказательНаСервере("R2021GB", R2021GB, Форма, "Декларация");
		
	КонецЕсли;
	
	R2022GB = ОкруглитьЧислоПоФормату(Форма, R202GB) 
											  - ОкруглитьЧислоПоФормату(Форма, R2021GB);
	ЗаполнитьПоказательНаСервере("R2022GB", R2022GB, Форма, "Декларация");
	R203GB = ОкруглитьЧислоПоФормату(Форма, R200GB)
											  -ОкруглитьЧислоПоФормату(Форма, R201GB)
											  -ОкруглитьЧислоПоФормату(Форма, R202GB);
	ЗаполнитьПоказательНаСервере("R203GB", R203GB, Форма, "Декларация");
	R210GB = ОкруглитьЧислоПоФормату(Форма, R191GB)
											  +ОкруглитьЧислоПоФормату(Форма, R203GB);
	ЗаполнитьПоказательНаСервере("R210GB", R210GB, Форма, "Декларация");
	
	R202GB4 = ПолучитьПоказательНаСервере("R202GB4", Форма, "Декларация");
	R2021GB4 = ПолучитьПоказательНаСервере("R2021GB4", Форма, "Декларация");
	R2022GB4 = ПолучитьПоказательНаСервере("R2022GB4", Форма, "Декларация");
	Если R2021GB4 + R2022GB4 > R202GB4 Тогда
	
		R2021GB4 = ОкруглитьЧислоПоФормату(Форма, МИН(R2021GB4, R202GB4));
		ЗаполнитьПоказательНаСервере("R2021GB4", R2021GB4, Форма, "Декларация");
		
	КонецЕсли;
	
	R2022GB4 = ОкруглитьЧислоПоФормату(Форма, R202GB4) 
											  - ОкруглитьЧислоПоФормату(Форма, R2021GB4);
	ЗаполнитьПоказательНаСервере("R2022GB4", R2022GB4, Форма, "Декларация");
	R203GB4 = ОкруглитьЧислоПоФормату(Форма, R200GB4)
											  -ОкруглитьЧислоПоФормату(Форма, R201GB4)
											  -ОкруглитьЧислоПоФормату(Форма, R202GB4);
	ЗаполнитьПоказательНаСервере("R203GB4", R203GB4, Форма, "Декларация");
	R210GB4 = ОкруглитьЧислоПоФормату(Форма, R191GB4)
											  +ОкруглитьЧислоПоФормату(Форма, R203GB4);
	ЗаполнитьПоказательНаСервере("R210GB4", R210GB4, Форма, "Декларация");
	
	////////////////////////////////////////////////
	// Расчет Приложения 4              
	ЗаполнитьПоказательНаСервере("R0303G2", Формат(Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧЦ=2; ЧВН="), Форма, "Приложение4");
	ЗаполнитьПоказательНаСервере("R0303G3", Формат(Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ЧЦ=4; ЧВН=; ЧГ=0"), Форма, "Приложение4");
	
	Если Окр(R2021GB, 0) > 0 Тогда
		СуммаСловами = Окр(R2021GB, 0);
		R0304G1S = ЧислоПрописью(СуммаСловами, "Л=uk_UA; ДП=Ложь","гривня,гривні,гривень,ж,,,,,0");
		R0304G2  = Окр(R2021GB, 0);
	Иначе
		R0304G1S = "";
		R0304G2  = 0;
	КонецЕсли;
	ЗаполнитьПоказательНаСервере("R0304G1S", R0304G1S, Форма, "Приложение4");
	ЗаполнитьПоказательНаСервере("R0304G2", R0304G2, Форма, "Приложение4");
	
	//R0306G5 = Окр(R2022GB, 0);
	R2022GB6 = ПолучитьПоказательНаСервере("R2022GB", Форма, "Декларация") - ПолучитьПоказательНаСервере("R2022GB4", Форма, "Декларация");
	ЗаполнитьПоказательНаСервере("R2022GB6", R2022GB6, Форма, "Декларация");
	R0306G5 = Окр(R2022GB6, 0);
	ЗаполнитьПоказательНаСервере("R0306G5", R0306G5, Форма, "Приложение4");
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы43, ТаблицаБлока);
	ТаблицаБлока = Форма[ТаблицаБлока];
	Итог = 0;
	Для каждого Строка Из ТаблицаБлока Цикл
		
		СуммаСловами = Окр(Строка.П4T3RXXXXG5, 0);
		
		ИмяЯчейкиПрописью = "П4T3RXXXXG4S_"+Формат(ТаблицаБлока.Индекс(Строка) + 1, "ЧГ=;");
		
		Если СуммаСловами > 0 Тогда	
			Строка.П4T3RXXXXG4S = ЧислоПрописью(СуммаСловами, "Л=uk_UA; ДП=Ложь","гривня,гривні,гривень,ж,,,,,0");
		Иначе
	    	Строка.П4T3RXXXXG4S = "";
		КонецЕсли;
		
		ЗаполнитьПоказательНаСервере(ИмяЯчейкиПрописью, Строка.П4T3RXXXXG4S, Форма, "Приложение4");
		
		Итог = Итог + СуммаСловами; 
		
	КонецЦикла;
	
	Если    Форма.СтруктураРеквизитовФормы.мНеВыдаватьСообщенияОбОшибкахВРасчете = Истина 
		ИЛИ Форма.СтруктураРеквизитовФормы.НеВыдаватьСообщенияОбОшибкахВРасчете Тогда
	ИначеЕсли Итог <> Окр(ПолучитьПоказательНаСервере("R0306G5", Форма, "Приложение4"), 0) Тогда
		ТекстСообщенияОбОшибкахРасчета = ТекстСообщенияОбОшибкахРасчета + Символы.ПС + Символы.Таб 
		+ НСтр("ru='Не совпадает значение строки 20.2.2 Декларации и сумма по строкам в таблице из Приложения 4, которая расшифровывает данную строку!';uk= 'Не співпадають значення рядка 20.2.2 Декларації та сума по рядкам у таблиці Додатку 4, що розшифровує даний показник!'");
	КонецЕсли;			
	
	R0401G5  =  ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0401G1", Форма, "Приложение4"))
											- ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0401G2", Форма, "Приложение4"))
											- ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0401G3", Форма, "Приложение4"));
	ЗаполнитьПоказательНаСервере("R0401G5", R0401G5, Форма, "Приложение4");
											
	R0403G2 = ПолучитьПоказательНаСервере("R0403G2", Форма, "Приложение4");
	Если Окр(R0403G2, 0) > 0 Тогда
		СуммаСловами = Окр(R0403G2, 0);
		R0403G1S = ЧислоПрописью(СуммаСловами, "Л=uk_UA; ДП=Ложь","гривня,гривні,гривень,ж,,,,,0");
	Иначе		
	    R0403G1S = "";
	КонецЕсли;				
	ЗаполнитьПоказательНаСервере("R0403G1S", R0403G1S, Форма, "Приложение4");
	
	R0405G2 = ПолучитьПоказательНаСервере("R0405G2", Форма, "Приложение4");
	Если Окр(R0405G2, 0) > 0 Тогда
		СуммаСловами = Окр(R0405G2, 0);
		R0405G1S = ЧислоПрописью(СуммаСловами, "Л=uk_UA; ДП=Ложь","гривня,гривні,гривень,ж,,,,,0");
	Иначе		
	    R0405G1S = "";
	КонецЕсли;				
	ЗаполнитьПоказательНаСервере("R0405G1S", R0405G1S, Форма, "Приложение4");
	
	R0501G2 = ПолучитьПоказательНаСервере("R0501G2", Форма, "Приложение4");
	Если Окр(R0501G2, 0) > 0 Тогда
		СуммаСловами = Окр(R0501G2, 0);
		R0501G1S = ЧислоПрописью(СуммаСловами, "Л=uk_UA; ДП=Ложь","гривня,гривні,гривень,ж,,,,,0");
	Иначе		
	    R0501G1S = "";
	КонецЕсли;				
	ЗаполнитьПоказательНаСервере("R0501G1S", R0501G1S, Форма, "Приложение4");
	
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы45, ТаблицаБлока);
	ТаблицаБлока = Форма[ТаблицаБлока];
	R0502G3 = ОкруглитьЧислоПоФормату(Форма, ТаблицаБлока.Итог("П4T5RXXXXG3"));
	ЗаполнитьПоказательНаСервере("R0502G3", R0502G3, Форма, "Приложение4");
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы46, ТаблицаБлока);
	ТаблицаБлока = Форма[ТаблицаБлока];
	R0601G4 = ОкруглитьЧислоПоФормату(Форма, ТаблицаБлока.Итог("П4T6RXXXXG4"));
	ЗаполнитьПоказательНаСервере("R0601G4", R0601G4, Форма, "Приложение4");
	
	/////////////////////////////
	// закончим расчет декларации
	ПоляСРазностью = Новый Структура();
	ОбластиДеларации = Форма.СтруктураДанныхДекларация; 									 
	Для каждого Область Из ОбластиДеларации Цикл
		ИмяОбласти = Область.Ключ;
		Если    Прав(ИмяОбласти, 2) = "GB"
			ИЛИ Прав(ИмяОбласти, 2) = "GA" Тогда
			Если  ОбластиДеларации.Свойство(ИмяОбласти + "4") 
				И ОбластиДеларации.Свойство(ИмяОбласти + "6") Тогда
				 ПоляСРазностью.Вставить(ИмяОбласти);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;									 
									 
	Для каждого Структ из ПоляСРазностью Цикл
		
		ТекЗнач6 =  ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере(Структ.Ключ, Форма, "Декларация"))
				  -	ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере(Структ.Ключ + "4", Форма, "Декларация"));
   		ЗаполнитьПоказательНаСервере(Структ.Ключ + "6", ТекЗнач6, Форма, "Декларация");
															  
	КонецЦикла;     
	
	R180GB6 = ПолучитьПоказательНаСервере("R180GB6", Форма, "Декларация");
	R181GB6 = ?(R180GB6 <= 0, 0, ОкруглитьЧислоПоФормату(форма, R180GB6 * Форма.СтруктураРеквизитовФормы.ПроцентШтрафа / 100));
	ЗаполнитьПоказательНаСервере("R181GB6", R181GB6, Форма, "Декларация");
	
	Если    Форма.СтруктураРеквизитовФормы.мНеВыдаватьСообщенияОбОшибкахВРасчете = Истина 
		ИЛИ Форма.СтруктураРеквизитовФормы.НеВыдаватьСообщенияОбОшибкахВРасчете Тогда
	ИначеЕсли ЗначениеЗаполнено(ТекстСообщенияОбОшибкахРасчета) Тогда
		ТекстСообщенияОбОшибкахРасчета = НСтр("ru='Обнаружены расхождения, обычно связанные с арифметической погрешностью либо ошибкой в данных. Проверьте следующие значения:';uk= 'Виявлені розбіжности, зазвичай пов''язані з арифметичною похибкою або помилкою в даних. Перевірте наступні значення:'")
		                                + ТекстСообщенияОбОшибкахРасчета;
		Сообщить(ТекстСообщенияОбОшибкахРасчета);								
	КонецЕсли;		
	
КонецПроцедуры // Расчет()

// ОкруглитьЧислоПоФормату(Форма, )
//
&НаКлиентеНаСервереБезКонтекста
Функция ОкруглитьЧислоПоФормату(Форма, ИсходноеЧисло)
	
	Перем Делитель;
	
	Если Форма.СоответствиеЕдиницыИзмеренияДелителю.Свойство("Окр" + СтрЗаменить(Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения, " ", ""), Делитель) Тогда
		
		Возврат Окр(ИсходноеЧисло / Делитель, Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения) * Делитель;
		
	КонецЕсли;
	
КонецФункции // ОкруглитьЧислоПоФормату(Форма, )

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект), НСтр("ru='Удалить текущую страницу?';uk='Видалити поточну сторінку?'"), РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
			
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
    
    КопияТекущиеДанные = ТекущиеДанные;
    
    ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
    
    Если ТекущиеДанные = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
        Возврат;
    КонецЕсли;
    
    ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
    Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
        ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
        СтруктураРеквизитовФормы.НомерТекущейСтраницы = ТекущаяСтраницаРазделаПослеУдаления.КолонкаНомерСтраницыРазделаОтчета;
    КонецЕсли;
    
    УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
    
    ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
	
	НомерСтраницы = 1;
	
	Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
	    
	    СтраницаРаздела.КолонкаРазделыОтчета              = НСтр("ru='Стр. ';uk='Стр. '") + НомерСтраницы;
	    СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
	    
	    НомерСтраницы = НомерСтраницы + 1;
	    
	КонецЦикла;
    
    Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
        Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеСтраницы(Команда)
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	Если ТекущиеДанные.ПолучитьРодителя() = Неопределено
	   И ТекущиеДанные.ПолучитьЭлементы().Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Если ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() <= 1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийРаздел" + ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
			
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз <> 0 И ЭтаФорма[мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ИмяТекущейСтраницыПанели;
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.';uk='В розділі ""%1"" максимальна кількість екземплярів сторінок дорівнює 
|%2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = ЭтаФорма[ИмяТекТабличногоПоля];
		
	// Сначала сохраним данные текущей страницы.
	СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТекТабличногоПоля);

	// Для страниц многостраничного раздела, содержащих многострочную часть,
	// дополнительно сохраняем данные многострочной части.
	СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(ЭтаФорма, ИмяТекущейСтраницыПанели);	
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));
	
	Если СтрТаблицаСтраницы.Количество() = 0 Тогда
		Возврат;
	Иначе
		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
	КонецЕсли;
	
	ОпределитьПредставлениеДопСтраниц(ИмяТекущейСтраницыПанели);
	
	Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
		СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
	Иначе
		СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
	КонецЕсли;
	Если (ИмяТекущейСтраницыПанели = "Декларация") Тогда
		
		Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
			СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
		Иначе
			СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
		КонецЕсли;
		
	КонецЕсли;
	
	// Добавляем новую страницу
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	
	// Присваиваем представление по умолчанию
	СтрНоваяСтраница.Представление = НСтр("ru='Стр. ';uk='Стр. '") + ТаблицаСтраницРаздела.Количество();
	СтрНоваяСтраница.АвтоматическоеПредставление = Истина;
	
	// Ставим признак активной страницы
	СтрНоваяСтраница.АктивнаяСтраница = Истина;
	
	ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели);
	
	Модифицированность = Истина;
			
КонецПроцедуры // ВставитьДополнительнуюСтраницуНаСервере()

&НаСервере
Процедура ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели)
	
	ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
		
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // ПослеДобавленияДопСтрНаСервере()

&НаСервере
Процедура ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели)
	
	Если ИмяТекущейСтраницыПанели = "Декларация" Тогда
		ИзменитьЦветЯчеекНаСервере();
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
		
КонецПроцедуры // ПослеВставкиДополнительнойСтраницыНаСервере()

&НаСервере
Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели)
	
	//итоговые ячейки не очистились - необходимо провести расчет
	//для этого сохраним данные страницы
	РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);
	
КонецПроцедуры // СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере()

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	
	РасчетНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
КонецПроцедуры // УдалитьДополнительнуюСтраницуНаСервере()

// ДобавитьСтроку()
//
&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		
		ВставитьДополнительнуюСтрокуНаСервере();
		
	#Иначе
		
		ВставитьДополнительнуюСтрокуНаКлиенте();
		
	#КонецЕсли
	
КонецПроцедуры // ДобавитьСтроку()

// УдалитьСтроку()
//
&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];

	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.';uk='Не обрано строку багаторядкового розділу, що видаляється'");
	
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;

	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Удалить выбранную строку?%1(Внимание! Данная операция необратима)';uk='Вилучити вибраний рядок?%1(Увага! Дана операція необоротна)'"), Символы.ПС), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    #Если ВебКлиент Тогда
        УдалитьДополнительнуюСтрокуНаСервере();
    #Иначе
        УдалитьДополнительнуюСтрокуНаКлиенте();
    #КонецЕсли
	
КонецПроцедуры // УдалитьСтроку()

&НаСервере
Процедура ВставитьДополнительнуюСтрокуНаСервере()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // ВставитьДополнительнуюСтрокуНаСервере()

&НаКлиенте
Процедура ВставитьДополнительнуюСтрокуНаКлиенте()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // ВставитьДополнительнуюСтрокуНаКлиенте()

// Создает новую строку многострочного раздела.
// Процедура вставляет строку в многострочный блок.
//
// Параметры:
//  Форма          - ссылка на форму отчета
//  ИмяГруппыБлока - имя группы, в том случае, если необходимо вставить строки в процедурах автозаполнения, без фокусировок.
//  СпециальноеДобавление - режим добавления строк по нестандартному алгоритму, когда в правой части распологаются данные.
//  ИмяКолонкиНомера - имя колонки, в которой необходимо проставлять номер при вставки строки.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ИмяГруппыБлока = Неопределено, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = 1) Экспорт
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	Если ИмяГруппыБлока = Неопределено Тогда
		// Сначала выполним проверку на активную страницу панели формы,
		// которая содержит многострочный раздел
			
		ТекущаяСтраница = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		ТекТабличноеПоле = Форма.ТабличныйДокумент;

		ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
		#Если НаКлиенте Тогда
			ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
		#Иначе
			ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
		#КонецЕсли

		Если ИмяГруппы = Неопределено Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.';uk='Не обрано багаторядковий розділ, у який необхідно додати рядок.'");

			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
	Иначе
		ИмяГруппы = ИмяГруппыБлока;
	КонецЕсли;

	Если ИмяГруппы = "D6" И СпециальноеДобавление = Ложь Тогда
		ВставитьДополнительнуюСтроку(Форма, "DT1R", Истина);
	ИначеЕсли ИмяГруппы = "DT1R" И СпециальноеДобавление = Ложь Тогда
		ВставитьДополнительнуюСтроку(Форма, "D6", Истина);
	ИначеЕсли СпециальноеДобавление = Истина Тогда
		СпециальноеДобавление = Ложь;	
	КонецЕсли;
	
	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	
	КолонкиГруппы = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];
	
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	ИмяПервойКолонки = КолонкиГруппы[0];
	ИмяПервойЯчейкиПоследнейСтроки = ИмяПервойКолонки + "_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	НазначитьИмяОбластиМЧ = Ложь;
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	Если Найти(ВставляемаяОбласть.Имя, "МногострочнаяЧасть") > 0 Тогда
		НазначитьИмяОбластиМЧ = Истина;
		ИмяМногострочнойЧасти = ВставляемаяОбласть.Имя;
	КонецЕсли;

	Если СпециальноеДобавление Тогда
		
	Иначе
				
		// добавляем в таблицу новую строку
		РегламентированнаяОтчетностьВызовСервера.ВставитьОбластьВТабличныйДокумент(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	Если НазначитьИмяОбластиМЧ Тогда
		ТекТабличноеПоле.Область(НомерНижнЯчейкиОбласти + 1, , НомерНижнЯчейкиОбласти + (НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти) + 1, ).Имя = "";
		ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, ).Имя = ИмяМногострочнойЧасти;
	КонецЕсли;

	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	
	Для Каждого ИмяКолонки ИЗ КолонкиГруппы Цикл
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
			Если ИмяКолонкиНомера <> Неопределено Тогда
				Если ИмяКолонкиНомера = ИмяКолонки Тогда
					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ОбластьЯчейки.Значение = КолСтрок + НомерПервойСтроки;
					Иначе
						ОбластьЯчейки.Текст = КолСтрок + НомерПервойСтроки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Если ИмяГруппыБлока = Неопределено Тогда

		// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
		// Определяем текущую область таблицы
		
		//ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;
		ИмяТекущейОбласти = ИмяПервойКолонки + "_" + КолСтрокСтр1;

		Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
				
		// установим фокус на поле табличн. документа
		ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
		
	КонецЕсли;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры // ВставитьДополнительнуюСтроку()

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // УдалитьДополнительнуюСтрокуНаСервере()

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // УдалитьДополнительнуюСтрокуНаКлиенте()

// Удаляет строку многострочного раздела формы.
&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = 1) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
    	
	ТекущаяСтраница = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	ТекТабличноеПоле = Форма.ТабличныйДокумент;

	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	ИмяЯчейки	   = ТекущаяОбласть.Имя;
	
	#Если НаКлиенте Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли
	
	ПроизводитьРасчет = Истина;
	Если СпециальноеДобавление = Истина Тогда
		
		ПроизводитьРасчет     = Ложь;
		СпециальноеДобавление = Ложь;
		
		ИмяЯчейки = ИмяКолонкиНомера;  ИмяКолонкиНомера = Неопределено;
		ИмяГруппы = НомерПервойСтроки; НомерПервойСтроки = 1;
		
	ИначеЕсли ИмяГруппы = "D6" Тогда
		
		УдалитьДополнительнуюСтроку(Форма, Истина, "" + ИмяЯчейки, "DT1R");
		
	ИначеЕсли ИмяГруппы = "DT1R" Тогда	
		  
		  УдалитьДополнительнуюСтроку(Форма, Истина, "" + ИмяЯчейки, "D6");
		
	КонецЕсли;

	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы  = Форма[СтруктураГруппы];
   	КолонкиГруппы    = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];
	ИмяПервойКолонки = КолонкиГруппы[0];
	
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		
		//ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + Формат(НомУдаляемойСтроки, "ЧГ=0");
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяПервойКолонки + "_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		МногострочностьВРазделе = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ДанныеФормыКоллекция") Тогда
			ИмяОбластиМнгЧ = МногострочностьВРазделе.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].Область;
		КонецЕсли;
		// Найдем координаты области, для последующего восстановления.

		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;

		Если СпециальноеДобавление Тогда
			
		Иначе
					
			РегламентированнаяОтчетностьВызовСервера.УдалитьОбластьИзТабличногоДокумента(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
			Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
			
		КонецЕсли;
		// Восстановим область.
		ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр - 1];

				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				
				Для Каждого КолонкаИмя ИЗ КолонкиГруппы Цикл
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ИмяКолонкиНомера <> Неопределено Тогда
							Если ИмяКолонкиНомера = КолонкаИмя Тогда
								// обновляем порядковый номер строки
								
								НовыйПорядковыйНомер = НСтр - 1 + НомерПервойСтроки - 1;
								
								Если ОбластьСдвинутойЯчейки.СодержитЗначение = Истина Тогда
									ОбластьСдвинутойЯчейки.Значение = НовыйПорядковыйНомер;
								Иначе
									ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1 + НомерПервойСтроки - 1;
			
			Для Каждого КолонкаТаблицыИмя ИЗ КолонкиГруппы Цикл
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					Если ИмяКолонкиНомера <> Неопределено Тогда
						Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
							// обновляем порядковый номер строки
							СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла;
		
		КонецЦикла;

		// Данные в многострочном блоке обновляются в декларациях!
		// Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	//ИмяТекущейОбласти = ИмяГруппы + "01_" + Формат(НомТекущейСтроки, "ЧГ=0");
	ИмяТекущейОбласти = ИмяПервойКолонки + "_" + Формат(НомТекущейСтроки, "ЧГ=0");
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];

	Форма.Модифицированность = Истина;
	
	Если ПроизводитьРасчет Тогда
		#Если НаКлиенте Тогда
			Форма.РасчетНаКлиенте(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		#Иначе
			Форма.РасчетНаСервере(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
		#КонецЕсли
	КонецЕсли;

КонецПроцедуры // УдалитьДополнительнуюСтроку()
		
&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки 			 = Область.Имя;
	НаименованиеТекЛиста = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	 Если Врег(ЛЕВ(ИмяЯчейки, 5)) = "МЕСОШ" Тогда
		Если НЕ НаименованиеТекЛиста = "Декларация" Тогда
			Возврат;
		КонецЕсли;
		
		//Значение = ТабличныйДокумент.Области.HZMP.Значение;
		Значение = СтруктураДанныхСлужебныеДанные.HZMP;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводПоказателяВПолеТабличногоДокументЗавершение",
													   ЭтаФорма, Новый Структура("ИмяЯчейки, ИмяСтраницы,
																				 |ИмяЯчейкиКвадратов, ИмяСтраницыКвадратов, 
																				 |Размерность, ДополнитьЗначение, НольКакНоль", 
																				 //"HZMP",  НаименованиеТекЛиста,
																				 //"МЕСОШ_", НаименованиеТекЛиста,
																				 "HZMP",  "СлужебныеДанные",
																				 "МесОш_",,
																				 2, Истина, Неопределено));
		
		ПоказатьВводЧисла(ОписаниеОповещения,Значение, НСтр("ru='Введите значение';uk='Введіть значення'"), 2,0);
		
	 //ИначеЕсли Врег(ЛЕВ(ИмяЯчейки, 4)) = "КВОШ" Тогда
	 //   
	 //   Значение = ТабличныйДокумент.Области.HZKVP.Значение;
	 //   ОписаниеОповещения = Новый ОписаниеОповещения("ВводПоказателяВПолеТабличногоДокументЗавершение",
	 //   											   ЭтаФорма, Новый Структура("ИмяЯчейки, ИмяСтраницы,
	 //   																		 |ИмяЯчейкиКвадратов, ИмяСтраницыКвадратов, 
	 //   																		 |Размерность, ДополнитьЗначение, НольКакНоль", 
	 //   																		 "HZKVP",  НаименованиеТекЛиста,
	 //   																		 , ,
	 //   																		 1, Ложь, Неопределено));
	 //   
	 //   ПоказатьВводЧисла(ОписаниеОповещения,Значение, НСтр("ru='Введите значение';uk='Введіть значення'"), 1,0);
	 //   
	 ИначеЕсли Врег(ЛЕВ(ИмяЯчейки, 5)) = "ГОДОШ" Тогда
		Если НЕ НаименованиеТекЛиста = "Декларация" Тогда
			Возврат;
		КонецЕсли;
		
		Значение = СтруктураДанныхСлужебныеДанные.HZYP;
		//Значение = ТабличныйДокумент.Области.HZYP.Значение;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводПоказателяВПолеТабличногоДокументЗавершение",
													   ЭтаФорма, Новый Структура("ИмяЯчейки, ИмяСтраницы,
																				 |ИмяЯчейкиКвадратов, ИмяСтраницыКвадратов, 
																				 |Размерность, ДополнитьЗначение, НольКакНоль", 
																				 //"HZYP",  НаименованиеТекЛиста,
																				 //"ГодОш_", НаименованиеТекЛиста,
																				 "HZYP",  "СлужебныеДанные",
																				 "ГодОш_", ,
																				 4, Ложь, Неопределено));
		
		ПоказатьВводЧисла(ОписаниеОповещения,Значение, НСтр("ru='Введите значение';uk='Введіть значення'"), 4,0);
		
		
	ИначеЕсли Врег(ЛЕВ(ИмяЯчейки, 3)) = "ИНД" Тогда
		
		Если НЕ НаименованиеТекЛиста = "Декларация" Тогда
			Возврат;
		КонецЕсли;
		
		Значение = СтруктураДанныхСлужебныеДанные.HZIP;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводПоказателяВПолеТабличногоДокументЗавершение",
													   ЭтаФорма, Новый Структура("ИмяЯчейки, ИмяСтраницы,
																				 |ИмяЯчейкиКвадратов, ИмяСтраницыКвадратов, 
																				 |Размерность, ДополнитьЗначение, НольКакНоль", 
																				 "HZIP",  "СлужебныеДанные",
																				 "Инд_", НаименованиеТекЛиста,
																				 5, Ложь, Неопределено));
		
		ПоказатьВводСтроки(ОписаниеОповещения,Значение, НСтр("ru='Введите значение';uk='Введіть значення'"), 5);
		
	ИначеЕсли Врег(ЛЕВ(ИмяЯчейки, 6)) = "ИННРУК" Тогда
		
		Если НЕ НаименованиеТекЛиста = "Декларация" Тогда
			Возврат;
		КонецЕсли;
		
		Значение = СтруктураДанныхСлужебныеДанные.HKBOS;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводПоказателяВПолеТабличногоДокументЗавершение",
													   ЭтаФорма, Новый Структура("ИмяЯчейки, ИмяСтраницы,
																				 |ИмяЯчейкиКвадратов, ИмяСтраницыКвадратов, 
																				 |Размерность, ДополнитьЗначение, НольКакНоль", 
																				 "HKBOS",  "СлужебныеДанные",
																				 "ИННРук_", НаименованиеТекЛиста,
																				 10, Ложь, Неопределено));
		
		ПоказатьВводСтроки(ОписаниеОповещения,Значение, НСтр("ru='Введите значение';uk='Введіть значення'"), 10);
		
	ИначеЕсли Врег(ЛЕВ(ИмяЯчейки, 5)) = "ИННГБ" Тогда
		
		Если НЕ НаименованиеТекЛиста = "Декларация" Тогда
			Возврат;
		КонецЕсли;
		
		Значение = СтруктураДанныхСлужебныеДанные.HKBUH;
		ОписаниеОповещения = Новый ОписаниеОповещения("ВводПоказателяВПолеТабличногоДокументЗавершение",
													   ЭтаФорма, Новый Структура("ИмяЯчейки, ИмяСтраницы,
																				 |ИмяЯчейкиКвадратов, ИмяСтраницыКвадратов, 
																				 |Размерность, ДополнитьЗначение, НольКакНоль", 
																				 "HKBUH",  "СлужебныеДанные",
																				 "ИННГБ_", НаименованиеТекЛиста,
																				 10, Ложь, Неопределено));
		
		ПоказатьВводСтроки(ОписаниеОповещения,Значение, НСтр("ru='Введите значение';uk='Введіть значення'"), 10);
		
	//ИначеЕсли  ИмяЯчейки = "HZ" Тогда
	//	
	//	ТабличныйДокумент.Области["HZ"].Значение = "X";
	//	ТабличныйДокумент.Области["HZN"].Значение = "";
	//	Если (НЕ НаименованиеТекЛиста = "Декларация")
	//		//И(НЕ НаименованиеТекЛиста = "Приложение8")
	//		Тогда
	//		ТабличныйДокумент.Области["HZU"].Значение = "";
	//	КонецЕсли;
	//	
	//	ТабличныйДокумент.Области["C_DOC_STAN"].Значение = 1;
	//	
	//ИначеЕсли ИмяЯчейки = "HZN" Тогда
	//	
	//	ТабличныйДокумент.Области["HZ"].Значение = "";
	//	ТабличныйДокумент.Области["HZN"].Значение = "X";
	//	Если (НЕ НаименованиеТекЛиста = "Декларация")
	//		//И(НЕ НаименованиеТекЛиста = "Приложение8")
	//		Тогда
	//		ТабличныйДокумент.Области["HZU"].Значение = "";
	//	КонецЕсли;
	//	
	//	ТабличныйДокумент.Области["C_DOC_STAN"].Значение = 2;
	//	
	//ИначеЕсли ИмяЯчейки = "HZU" Тогда
	//	
	//	ТабличныйДокумент.Области["HZ"].Значение = "";
	//	ТабличныйДокумент.Области["HZN"].Значение = "";
	//	ТабличныйДокумент.Области["HZU"].Значение = "X";
	//	
	//	ТабличныйДокумент.Области["C_DOC_STAN"].Значение = 3;
	//	
	//	Расчет(ЭтаФорма);
		
	ИначеЕсли ИмяЯчейки = "HVM"
		  ИЛИ ИмяЯчейки = "HSK" 
		  ИЛИ ИмяЯчейки = "HSP"
		  ИЛИ ИмяЯчейки = "HUR"
		  ИЛИ (Лев(ИмяЯчейки, 2) = "HD" И СтрДлина(ИмяЯчейки) = 3)
		  ИЛИ ИмяЯчейки = "HD1P"
		  ИЛИ ИмяЯчейки = "HD2P"
		  ИЛИ ИмяЯчейки = "HJAR"
		  ИЛИ ИмяЯчейки = "HA"
		  ИЛИ ИмяЯчейки = "HM"
		  ИЛИ ИмяЯчейки = "HK"
		  ИЛИ ИмяЯчейки = "HVPP"
		  Тогда

		Область.Значение  = ?(ЗначениеЗаполнено(Область.Значение), "", "X");
		
	// приложение 1
	ИначеЕсли НаименованиеТекЛиста = "Приложение1"
		   И (ЛЕВ(ИмяЯчейки, 1) = "T")
		   И  (Найти(ИмяЯчейки, "G32") > 0) Тогда 
		
		Область.Значение  = НЕ Область.Значение;
		Расчет(ЭтаФорма, "Приложение1");
		
	// приложение 3
	ИначеЕсли НаименованиеТекЛиста = "Приложение3"
		И (ЛЕВ(ИмяЯчейки, 3) = "П3T")
		И  Прав(ИмяЯчейки,2) = "G6" Тогда 
		
		Область.Значение  = НЕ Область.Значение;
		Расчет(ЭтаФорма, "Приложение3");
		
	// приложение 4
	ИначеЕсли НаименованиеТекЛиста = "Приложение4"
		   И (ИмяЯчейки = "R0103G3" ИЛИ ИмяЯчейки = "R0104G3") Тогда 
		
		Область.Значение  = ?(ЗначениеЗаполнено(Область.Значение), "", "+");
		
	ИначеЕсли НаименованиеТекЛиста = "Приложение4"
		   И (ИмяЯчейки = "R0301G3") Тогда 
		
		ТабличныйДокумент.Области.R0301G3.Значение  = "+";
		ТабличныйДокумент.Области.R0302G3.Значение  = "";
		
	ИначеЕсли НаименованиеТекЛиста = "Приложение4"
		   И (ИмяЯчейки = "R0302G3") Тогда 
		
		ТабличныйДокумент.Области.R0301G3.Значение  = "";
		ТабличныйДокумент.Области.R0302G3.Значение  = "+";
		
	// приложение 5
	ИначеЕсли НаименованиеТекЛиста = "Приложение5"
		   И (ЛЕВ(ИмяЯчейки, 5) = "П5T2R")
		   И (Найти(ИмяЯчейки, "G41") > 0) Тогда 	
		
		Область.Значение  = ?(ЗначениеЗаполнено(Область.Значение), "", "+");
		
		Расчет(ЭтаФорма, "Приложение5");
		
	ИначеЕсли НаименованиеТекЛиста = "Приложение5"
		   И (Найти(ИмяЯчейки, "G42") > 0) Тогда 	
		
		Область.Значение  = НЕ Область.Значение;
		
		Расчет(ЭтаФорма, "Приложение5");

	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбораВПолеТабличногоДокумента()

&НаКлиенте		
Процедура ВводПоказателяВПолеТабличногоДокументЗавершение(Значение, ДополнительныеПараметры) Экспорт
			
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки = ДополнительныеПараметры.ИмяЯчейки;
	
	Если ИмяЯчейки = "HZYP" Тогда
		Если Значение < 0 Тогда
			Значение = 0;
		КонецЕсли;	
	КонецЕсли;
	
	Если ИмяЯчейки = "HZMP" Тогда
		Если    Значение < 0 
			ИЛИ Значение > 12 Тогда
			Значение = 0;
		КонецЕсли;	
		Значение = Формат(Значение, "ЧЦ=2; ЧВН=; ЧГ=0");
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		Значение = Формат(Значение, "ЧГ=0");
	КонецЕсли;
	
	ЗаполнитьПоказательНаСервере(ИмяЯчейки, Значение, ЭтаФорма, ДополнительныеПараметры.ИмяСтраницы);

	// заполнение кодов руководителей по всем приложениям
	Если    Найти(ДополнительныеПараметры.ИмяЯчейкиКвадратов, "ИННРук") > 0 
		ИЛИ Найти(ДополнительныеПараметры.ИмяЯчейкиКвадратов, "ИННГБ") > 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Декларация",  ДополнительныеПараметры.ИмяЯчейкиКвадратов, 10, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Приложение1", ДополнительныеПараметры.ИмяЯчейкиКвадратов, 10, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Приложение2", ДополнительныеПараметры.ИмяЯчейкиКвадратов, 10, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Приложение3", ДополнительныеПараметры.ИмяЯчейкиКвадратов, 10, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Приложение4", ДополнительныеПараметры.ИмяЯчейкиКвадратов, 10, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Приложение5", ДополнительныеПараметры.ИмяЯчейкиКвадратов, 10, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Справка", 	  ДополнительныеПараметры.ИмяЯчейкиКвадратов, 10, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Приложение7", ДополнительныеПараметры.ИмяЯчейкиКвадратов, 10, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		//РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Приложение8", ДополнительныеПараметры.ИмяЯчейкиКвадратов, 10, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Приложение9", ДополнительныеПараметры.ИмяЯчейкиКвадратов, 10, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		//РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Заявление",   ДополнительныеПараметры.ИмяЯчейкиКвадратов, 10, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		//РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Филиалы",     ДополнительныеПараметры.ИмяЯчейкиКвадратов, 10, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		
	//ИначеЕсли ИмяЯчейки = "HZKVP" Тогда
	//	ЗаполнитьПоказательНаСервере("КВОШ", Значение, ЭтаФорма, ДополнительныеПараметры.ИмяСтраницы);	
	
	ИначеЕсли    Найти(ДополнительныеПараметры.ИмяЯчейкиКвадратов, "МесОш") > 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Декларация",  ДополнительныеПараметры.ИмяЯчейкиКвадратов, 2, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Приложение1", ДополнительныеПараметры.ИмяЯчейкиКвадратов, 2, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Приложение2", ДополнительныеПараметры.ИмяЯчейкиКвадратов, 2, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Приложение3", ДополнительныеПараметры.ИмяЯчейкиКвадратов, 2, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Приложение4", ДополнительныеПараметры.ИмяЯчейкиКвадратов, 2, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Приложение5", ДополнительныеПараметры.ИмяЯчейкиКвадратов, 2, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Справка", 	  ДополнительныеПараметры.ИмяЯчейкиКвадратов, 2, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Приложение7", ДополнительныеПараметры.ИмяЯчейкиКвадратов, 2, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Приложение9", ДополнительныеПараметры.ИмяЯчейкиКвадратов, 2, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
	ИначеЕсли    Найти(ДополнительныеПараметры.ИмяЯчейкиКвадратов, "ГодОш") > 0 Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Декларация",  ДополнительныеПараметры.ИмяЯчейкиКвадратов, 4, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Приложение1", ДополнительныеПараметры.ИмяЯчейкиКвадратов, 4, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Приложение2", ДополнительныеПараметры.ИмяЯчейкиКвадратов, 4, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Приложение3", ДополнительныеПараметры.ИмяЯчейкиКвадратов, 4, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Приложение4", ДополнительныеПараметры.ИмяЯчейкиКвадратов, 4, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Приложение5", ДополнительныеПараметры.ИмяЯчейкиКвадратов, 4, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Справка", 	  ДополнительныеПараметры.ИмяЯчейкиКвадратов, 4, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Приложение7", ДополнительныеПараметры.ИмяЯчейкиКвадратов, 4, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, "Приложение9", ДополнительныеПараметры.ИмяЯчейкиКвадратов, 4, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ИмяСтраницыКвадратов) Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(ЭтаФорма, ДополнительныеПараметры.ИмяСтраницыКвадратов, ДополнительныеПараметры.ИмяЯчейкиКвадратов, ДополнительныеПараметры.Размерность, Значение, ДополнительныеПараметры.ДополнитьЗначение, ДополнительныеПараметры.НольКакНоль);
	КонецЕсли;
	                         
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	Модифицированность = Истина;
		
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", Область.Имя));
	ИмяОбласти = Область.Имя;
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	Если ИмяРаздела = "Декларация" Тогда
		Если    ИмяОбласти = "HNAME"
			ИЛИ ИмяОбласти = "HDDGV" 
			ИЛИ ИмяОбласти = "HNDGV" 
			ИЛИ ИмяОбласти = "HTIN" 
			ИЛИ ИмяОбласти = "HNPDV" 
			ИЛИ ИмяОбласти = "HBUH" 
			ИЛИ ИмяОбласти = "HBOS" 
			ИЛИ ИмяОбласти = "КвОш" 
			Тогда
			
			Если ИмяОбласти = "КвОш" Тогда
				ТекЗнач = ТабличныйДокумент.Области[ИмяОбласти].Значение;
				Если    ТекЗнач > 4
					ИЛИ ТекЗнач < 0 Тогда
					ТекЗнач = 0;	
				КонецЕсли;
				ТабличныйДокумент.Области[ИмяОбласти].Значение = ТекЗнач;
			КонецЕсли;			
			
			СтруктураДанныхПриложение1[ИмяОбласти] = ТабличныйДокумент.Области[ИмяОбласти].Значение;
			СтруктураДанныхПриложение2[ИмяОбласти] = ТабличныйДокумент.Области[ИмяОбласти].Значение;
			СтруктураДанныхПриложение3[ИмяОбласти] = ТабличныйДокумент.Области[ИмяОбласти].Значение;
			СтруктураДанныхПриложение4[ИмяОбласти] = ТабличныйДокумент.Области[ИмяОбласти].Значение;
			СтруктураДанныхПриложение5[ИмяОбласти] = ТабличныйДокумент.Области[ИмяОбласти].Значение;
			СтруктураДанныхСправка[ИмяОбласти]     = ТабличныйДокумент.Области[ИмяОбласти].Значение;
			СтруктураДанныхПриложение7[ИмяОбласти] = ТабличныйДокумент.Области[ИмяОбласти].Значение;
			СтруктураДанныхПриложение9[ИмяОбласти] = ТабличныйДокумент.Области[ИмяОбласти].Значение;
			//СтруктураДанныхПриложение8[ИмяОбласти] = ТабличныйДокумент.Области[ИмяОбласти].Значение;
			//Если НЕ ИмяОбласти = "HDDGV" 
			//   И НЕ ИмяОбласти = "HNDGV" Тогда
			//
			//	СтруктураДанныхЗаявление[ИмяОбласти]   = ТабличныйДокумент.Области[ИмяОбласти].Значение;
			//
			//КонецЕсли;
			//СтруктураДанныхФилиалы[ИмяОбласти]     = ТабличныйДокумент.Области[ИмяОбласти].Значение;
			
			Если ИмяОбласти = "HTIN" Тогда
				СтруктураДанныхСлужебныеДанные["TIN"] = ТабличныйДокумент.Области[ИмяОбласти].Значение;	
			КонецЕсли;
			
			Если ИмяОбласти = "КвОш" Тогда
				СтруктураДанныхСлужебныеДанные["HZKVP"] = ТабличныйДокумент.Области[ИмяОбласти].Значение;	
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента()

&НаКлиенте
Процедура ДатаПодписиПриИзменении(Элемент)
	
	ЗаполнитьДатуПодписиНаСервере();
	
	Модифицированность = Истина;
		
КонецПроцедуры // ДатаПодписиПриИзменении()

&НаСервере
Процедура ПослеСменыЕдИзмеренияИТочности()

	ЗаполнитьПустыеСтруктурыДанных();
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
		
КонецПроцедуры // ПослеСменыЕдИзмеренияИТочности()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
&НаСервере
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в гривнах точность не может превышать 2 знака';uk='%1: при виведенні сум у гривнях точність не може перевищувати 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах гривен точность не может превышать 3 знака';uk='%1: при виведенні сум в тисячах гривень точність не може перевищувати 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах гривен точность не может превышать 6 знаков';uk='%1: при виведенні сум у мільйонах гривень точність не може перевищувати 6 знаків'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
		
КонецПроцедуры // Обновить()

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	    
КонецПроцедуры // ОткрытьФормуНастроек()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("Автосохранение", Ложь);
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет",		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", 		СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
					
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
    
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Если РезультатВыбора <> Неопределено Тогда
		КопироватьДанныеФормы(РезультатВыбора, мДеревоВыбранныхСтраниц);
		РегламентированнаяОтчетностьКлиентСервер.ПрорисоватьПодменюПечать(ЭтаФорма);
		Модифицированность = Истина;
					
		флЗначенияИдентичны = Истина;
		
		Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
			
			Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = РезультатВыбора.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
				флЗначенияИдентичны = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			
			#Если ВебКлиент Тогда
				ИзменитьТаблицуВариантовЗаполненияНаСервере();
			#Иначе
				РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			#КонецЕсли	
			
			Расчет(ЭтаФорма);
			
		КонецЕсли;
		
		Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		 ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
			ПослеСменыЕдИзмеренияИТочности();
		КонецЕсли;
		
		// Управляем видимостью страниц основной панели формы
	    РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
		
		Если НЕ флЗначенияИдентичны Тогда
			
			СформироватьДеревоРазделовОтчетаНаКлиенте();
			
			Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
				
				// Пытаемся найти ранее запомненный раздел.
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
				
				Если НЕ НайденнаяСтрока = Неопределено 
					И НЕ НомерСтраницыРазделаОтчета = Неопределено 
					И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
					
					НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
					
				КонецЕсли;
				
				// В случае успешного поиска, устанавливаем курсор на найденный раздел.
				Если НЕ НайденнаяСтрока = Неопределено Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				КонецЕсли;
				
			КонецЕсли;
			
			// обнулим информацию о выделенных областях, так как набор страниц были изменен.
			СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Неопределено;
			
		КонецЕсли;
		
	Иначе
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры // ИзменитьТаблицуВариантовЗаполненияНаСервере()

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
		
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)

	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела" + Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);

КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	HBD = ПолучитьПоказательНаСервере("HBD",ЭтаФорма,"Декларация");
	HZYP  = ПолучитьПоказательНаСервере("HZYP", ЭтаФорма,"СлужебныеДанные");
	HZKVP = ПолучитьПоказательНаСервере("HZKVP",ЭтаФорма,"СлужебныеДанные");
	HZMP  = ПолучитьПоказательНаСервере("HZMP", ЭтаФорма,"СлужебныеДанные");
	
	СтруктураДанныхДекларация.Очистить();
	СтруктураДанныхПриложение1.Очистить();
	СтруктураДанныхПриложение2.Очистить();
	СтруктураДанныхПриложение3.Очистить();
	СтруктураДанныхПриложение4.Очистить();
	СтруктураДанныхПриложение5.Очистить();
	СтруктураДанныхПриложение7.Очистить();
	//СтруктураДанныхПриложение8.Очистить();
	СтруктураДанныхПриложение9.Очистить();
	//СтруктураДанныхЗаявление.Очистить();
	СтруктураДанныхСправка.Очистить();
	//СтруктураДанныхФилиалы.Очистить();
	СтруктураДанныхСлужебныеДанные.Очистить();
	
	//ТаблицаСтраницыРаздела1.Очистить();
	//ИнициализацияМногостраничныхРазделов();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	СписокУстанавливаемыхЗначений = Новый СписокЗначений;
	СписокУстанавливаемыхЗначений.Добавить(HBD, "HBD");
	СписокУстанавливаемыхЗначений.Добавить(HZKVP, "КвОш");
	//ЗаполнитьПоказательНаВсехЗакладкахНаСервере(СписокУстанавливаемыхЗначений, "|Декларация|");
	ЗаполнитьПоказательНаВсехЗакладкахНаСервере(СписокУстанавливаемыхЗначений);
	
	ЗаполнитьПоказательНаСервере("HZYP",HZYP,ЭтаФорма,"СлужебныеДанные");
	ЗаполнитьПоказательНаСервере("HZMP",HZMP,ЭтаФорма,"СлужебныеДанные");
	ЗаполнитьПоказательНаСервере("HZKVP",HZKVP,ЭтаФорма,"СлужебныеДанные");
	
	ПроставитьВКвадратыЗначенияНаВсехЗакладках(ЭтаФорма,"ГодОш_", 4, Формат(HZYP, "ЧЦ=4; ЧГ="), Ложь, Ложь);
	ПроставитьВКвадратыЗначенияНаВсехЗакладках(ЭтаФорма,"МесОш_", 2, Формат(HZMP, "ЧЦ=2; ЧВН=; ЧГ="), Ложь, Ложь);
	
КонецПроцедуры // ОчиститьНаСервере()

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры // ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере()

&НаКлиенте
Функция НайтиСвойстваПоказателя(КодПоказателя)
	
	СвойстваПоказателя = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", КодПоказателя));
		
	Если СвойстваПоказателя.Количество() = 0 Тогда
		
		СвойстваПоказателя = Неопределено;
		
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(КодПоказателя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				СвойстваПоказателя = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		СвойстваПоказателя = СвойстваПоказателя[0];
		
	КонецЕсли;
		
	Возврат СвойстваПоказателя;
	
КонецФункции // НайтиСвойстваПоказателя()


&НаКлиенте
Процедура Выгрузить(Команда)

	ВыгрузитьОтчет();

КонецПроцедуры // Выгрузить()      

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Открыть();
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт

	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
		
КонецПроцедуры // АктивизироватьЯчейку()


// ПоказатьБланк()
//
&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры // ПоказатьБланк()

// ПечататьСразу()
//
&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры // ПечататьСразу()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено, НеИзФормыОтчета = Ложь) Экспорт
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и%1задать его в качестве используемого по умолчанию!';uk='Перед формуванням друкованих форм необхідно визначити в системі принтер%1задати його в якості використовуваного за замовчуванням!'"), Символы.ПС));				
		Возврат;
	КонецЕсли;
              	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...';uk='%1. Формується друкована форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
				
	ПечатьНаСервере(ВидПечати, ЧтоИскать);
		
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

КонецПроцедуры // Печать()

// ПечатьНаСервере()
//
&НаСервере
Процедура ПечатьНаСервере(ВидПечати, ЧтоИскать = Неопределено);
				
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь, Ложь);
				
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	ОбщиеРеквизитыРазделов = Новый Структура();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("ЕстьДуплекс",        СтруктураРеквизитовФормы.ЕстьДуплекс);
		
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
КонецПроцедуры // ПечатьНаСервере()

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов)
		
	РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабличныйДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
КонецПроцедуры // ВывестиНаПечатьЛист()

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		СохрАктивнаяСтраница = ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница;
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = СохрАктивнаяСтраница;
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
    		
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()
      
&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	Если Найти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	Заголовок = Заголовок + ?(Найти(ЭтаФорма.ИмяФормы, "Внешний") > 0, " - внешний отчет", "");
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если Найти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если Найти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
	ИначеЕсли Найти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
			
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если Найти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
	ИначеЕсли Найти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СформироватьДеревоРазделовОтчетаНаКлиенте();
	
КонецПроцедуры // ОчисткаРегламентированногоОтчетаНаКлиенте()

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	УточняемыйГод = ПолучитьПоказательНаСервере("HZYP",  ЭтаФорма, "СлужебныеДанные");
	УточняемыйКв  = ПолучитьПоказательНаСервере("HZKVP", ЭтаФорма, "СлужебныеДанные");
	УточняемыйМес = ПолучитьПоказательНаСервере("HZMP",  ЭтаФорма, "СлужебныеДанные");
	
	Если     НЕ ЗначениеЗаполнено(УточняемыйГод) 
		ИЛИ (НЕ ЗначениеЗаполнено(УточняемыйМес) И НЕ ЗначениеЗаполнено(УточняемыйКв))
		ИЛИ (ЗначениеЗаполнено(УточняемыйМес) И ЗначениеЗаполнено(УточняемыйКв))Тогда
	
		ПоказатьПредупреждение(,НСтр("ru='Необходимо правильно указать уточняемый период на форме отчета (поле 03).
                             |Отчет заполнен не будет!';uk= 'Необхідно правильно зазначити уточнюючий період на формі звіту (поле 03).
                             |Звіт заповнений не буде!'"));
		Возврат;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.УточняемыйОтчет) Тогда
		
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтаФорма) ,НСтр("ru='Не указана Декларация или последний уточняющий расчет к декларации, в которой исправляются ошибки.
                              |Колонка 4 (""Показник, який уточнюється"") заполнена не будет!';uk= 'Не зазначена Декларація або останній уточнюючий розрахунок до декларації, в якій виправляютсья помилки.
                              |Колонка 4 (""Показник, який уточнюється"") заповнена не буде!'"));
							  
		Возврат;
		
	Иначе
		
		УточняемыйОтчет = ПолучитьСвойстваУточняемогоОтчетаНаСервере(СтруктураРеквизитовФормы.УточняемыйОтчет);
		
		Если    УточняемыйОтчет.ИсточникОтчета = "РегламентированныйОтчетДекларацияНДС" Тогда
			
			Если ЗначениеЗаполнено(УточняемыйМес) Тогда
				ТекПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц");
				ТекДатаОкончания = КонецМесяца(Дата(УточняемыйГод,УточняемыйМес,1));
			Иначе
				ТекПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал");					
				ТекДатаОкончания = КонецМесяца(Дата(УточняемыйГод,УточняемыйКв*3,1));
			КонецЕсли;
			
			Если    УточняемыйОтчет.Периодичность <> ТекПериодичность 
				ИЛИ УточняемыйОтчет.ДатаОкончания <> ТекДатаОкончания
				ИЛИ УточняемыйОтчет.Организация   <> СтруктураРеквизитовФормы.Организация Тогда
				
				ПоказатьПредупреждение(Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтаФорма, Новый Структура("ЗаполнитьКолонку4", Истина)), НСтр("ru='В качестве уточняемой декларации указана декларация у которой не соответствующая Организация, периодичность или отчетный период. Возможно, колонка 4 будет заполнена некорретными данными!';uk= 'У якості уточнюємої декларації зазначена декларація з невідповідною Організацією, періодичністю або звітний період. Можливо, колонка 4 буде заповнена некоретними даними!'"));
				
			Иначе
								
				ЗаполнитьАвтоЗавершение(Новый Структура("ЗаполнитьКолонку4", Истина));

			КонецЕсли;

		ИначеЕсли УточняемыйОтчет.ИсточникОтчета = "РегламентированныйОтчетУточняющийРасчетДекларацияНДС" Тогда
		
			Если ПроверитьУточняемыйОтчет(СтруктураРеквизитовФормы.Организация, УточняемыйОтчет.Ссылка, УточняемыйГод, УточняемыйКв, УточняемыйМес) Тогда	
				
				ЗаполнитьАвтоЗавершение(Новый Структура("ЗаполнитьКолонку4", Истина));
				
			Иначе	
				
				ПоказатьПредупреждение(Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтаФорма), НСтр("ru='Указан уточняющий расчет к декларации, в котором уточняемый период отличается от указанного в форме.
                                     |Колонка 4 (""Показник, який уточнюється"") заполнена не будет!';uk= 'Зазначений уточнюючий розрахунок до декларації, в якій уточнюємий період відрізняється від зазначеного на формі.
                                     |Колонка 4 (""Показник, який уточнюється"") заповнена не буде!'"));
			
			КонецЕсли;
			
		Иначе
			
			ПоказатьПредупреждение(Новый ОписаниеОповещения("ЗаполнитьАвтоЗавершение", ЭтаФорма), НСтр("ru='Указан некорректный отчет в качестве Декларации или последнего уточняющего расчета к декларации, в которой исправляются ошибки.
                                 |Колонка 4 (""Показник, який уточнюється"")  заполнена не будет!';uk= 'Зазначений некоректний звіт у якості Декларації або останнього уточнюючого розрахунку до декларації, в якій виправляютсья помилки.
                                 |Колонка 4 (""Показник, який уточнюється"") заповнена не буде!'"));
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСвойстваУточняемогоОтчетаНаСервере(УточняемыйОтчет)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УточняемыйОтчет, "Ссылка, ИсточникОтчета, Периодичность, ДатаОкончания, Организация");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьУточняемыйОтчет(Организация, УточняемыйОтчет, УточняемыйГод, УточняемыйКв, УточняемыйМес)

	ДанныеОтчета = УточняемыйОтчет.ДанныеОтчета.Получить();
	ПоказателиОтчета = ""; СлужебныеДанные = ""; HZYP = ""; HZKVP = ""; HZMP = "";
	Если  УточняемыйОтчет.Организация  = Организация
		И ТипЗнч(ДанныеОтчета) = Тип("Структура")
		И ДанныеОтчета.Свойство("ПоказателиОтчета", ПоказателиОтчета)
		И ПоказателиОтчета.Свойство("ПолеТабличногоДокументаСлужебныеДанные",СлужебныеДанные)
		И СлужебныеДанные.Свойство("HZYP",  HZYP) 
		И СлужебныеДанные.Свойство("HZKVP", HZKVP) 
		И СлужебныеДанные.Свойство("HZMP",  HZMP)
		И Число(HZYP)  = Число(УточняемыйГод) 
		И HZKVP = УточняемыйКв 
		И Число(HZMP)  = Число(УточняемыйМес)
		Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьАвтоЗавершение(ДополнительныеПараметры) Экспорт
	
	Перем ЗаполнитьКолонку4;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Свойство("ЗаполнитьКолонку4", ЗаполнитьКолонку4);	
	КонецЕсли;
	
	СтруктураРеквизитовФормы.Вставить("ЗаполнитьКолонку4", ЗаполнитьКолонку4);
	
	ПараметрыЗаполненияЗвит1С = Неопределено;
	
	ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С);
	
	ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьАвто()

&НаСервере
Процедура ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С)
	
	ОчиститьНаСервере();
	//ОчисткаРегламентированногоОтчетаНаСервере("Декларация",Ложь,"ОчиститьТекущийРаздел",Истина, 2);	

	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	Заполнить(ПараметрыЗаполненияЗвит1С);
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеДляПриложения5ВРазрезеКонтрагентов(Таблица,МассивСтатей,ИмяКолонки,ИмяГруппы)
	
	//ОписаниеТиповЧисло  = СоздатьОписанияТипов("Число", 15, 2);
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло  = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15, 2));

	ОписаниеТиповСтрока =  СоздатьОписанияТипов("Строка", 254);
	СтрокиДекларацииНДС = Справочники.СтатьиНалоговыхДеклараций;

	ТаблицаКонтрагентов = Новый ТаблицаЗначений;
	ТаблицаКонтрагентов.Колонки.Добавить("Контрагент",		ОписаниеТиповСтрока);
	ТаблицаКонтрагентов.Колонки.Добавить("ИННКонтрагента",	СоздатьОписанияТипов("Строка",12));
	ТаблицаКонтрагентов.Колонки.Добавить("БазаНДС",			ОписаниеТиповЧисло);
	ТаблицаКонтрагентов.Колонки.Добавить("НДС",				ОписаниеТиповЧисло);
	ТаблицаКонтрагентов.Колонки.Добавить("НДС7",			ОписаниеТиповЧисло);
	ТаблицаКонтрагентов.Колонки.Добавить("Дата");	
	ТаблицаКонтрагентов.Колонки.Добавить("КассовыйМетод");
	ТаблицаКонтрагентов.Колонки.Добавить("СХПоставка");
	
	Для i = 0 по МассивСтатей.Количество()- 1 Цикл
		
		СтатьяДекларации = МассивСтатей[i];
		
		Отбор = Новый Структура;
		Отбор.Вставить(ИмяКолонки, СтатьяДекларации);
		НужныеСтроки = Таблица.НайтиСтроки(Отбор);
		
		Для каждого строка Из НужныеСтроки Цикл
			
			КассовыйМетод = "";
			Если  ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы51 Тогда
				
				Если Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС7 Тогда
					
					Если СтатьяДекларации = СтрокиДекларацииНДС.НДС_НОПоСтавке20ПоставкаОФ Тогда
						// такого быть не должно!
						Сообщить(НСтр("ru = 'Обнаружена поставка основных фондов по ставке 7%. Проверьте заполнение налоговых накладных!'; uk = 'Виявлено постачання основних засобів за ставкою ПДВ 7%. Перевірте заповнення податкових накладних!'"));		
					КонецЕсли;
					
					Если Строка.ЭтоУсловнаяПродажа = Истина и Строка.СпецРежим = 2 Тогда
						// такого быть не должно!
						Сообщить(НСтр("ru = 'Обнаружена поставка по спец. режиму ""2"" по ставке 7%. Проверьте заполнение налоговых накладных!'; uk = 'Виявлено постачання за спец.режимом ""2"" за ставкою ПДВ 7%. Перевірте заповнення податкових накладних!'"));		
					КонецЕсли;
					
					Если Строка.ЭтоУсловнаяПродажа = Истина Тогда
						R42GA = R42GA +  строка.БазаНДСОборот;
						R42GB = R42GB +  строка.НДСОборот;
					Иначе	
						R12GA = R12GA +  строка.БазаНДСОборот;
						R12GB = R12GB +  строка.НДСОборот;
					КонецЕсли;
					
				Иначе
					//20%
					
					Если СтатьяДекларации = СтрокиДекларацииНДС.НДС_НОПоСтавке20ПоставкаОФ Тогда
						R011G4 = R011G4 +  строка.БазаНДСОборот;
						R011G5 = R011G5 +  строка.НДСОборот;
					КонецЕсли;
					
					Если  Строка.СпецРежим = 2 И НЕ Строка.ИННКонтрагента = "600000000000" Тогда
						R012G4 = R012G4 +  строка.БазаНДСОборот;
						R012G5 = R012G5 +  строка.НДСОборот;
					КонецЕсли;
					
					Если Строка.ЭтоУсловнаяПродажа = Истина Тогда
						R41GA = R41GA +  строка.БазаНДСОборот;
						R41GB = R41GB +  строка.НДСОборот;
					Иначе
						R11GA = R11GA +  строка.БазаНДСОборот;
						R11GB = R11GB +  строка.НДСОборот;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы52 Тогда	
				
				Если  НЕ Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС7
					И НЕ Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20
					И НЕ Строка.СтавкаНДС = Перечисления.СтавкиНДС.СпецСт8 Тогда //ИНАГРО
				
					R103GA = R103GA + строка.БазаНДСОборот;
				    Продолжить;
					
				КонецЕсли;
				
				Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "ЕРП" Тогда
					ТипДокументаИмпорт = "ДокументСсылка.ТаможеннаяДекларацияИмпорт";
				Иначе
					ТипДокументаИмпорт = "ДокументСсылка.ГТДИмпорт";
				КонецЕсли;	
				Если ТипЗнч(Строка.Регистратор) = Тип(ТипДокументаИмпорт)
		 			ИЛИ (ИНАГРО_ОбщийВызовСервераПовтИсп.ЕстьБСПУ() И НЕ Строка.Регистратор = Неопределено И Строка.Регистратор.Метаданные().Имя = "ИНАГРО_ГТДИмпортЖивотных") Тогда //ИНАГРО 
					Если Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС7 Тогда
						R112GA = R112GA + строка.БазаНДСОборот;
						R112GB = R112GB + строка.НДСОборот;
					ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
						R111GA = R111GA + строка.БазаНДСОборот;
						R111GB = R111GB + строка.НДСОборот;
					Иначе
						// импорт без НДС в Декларации не отражаются.

					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
				Если    СтатьяДекларации = СтрокиДекларацииНДС.НДС_НКПокупкаСНДСвВРОблагПриобрОФ 
					ИЛИ СтатьяДекларации = СтрокиДекларацииНДС.НДС_НКПропорциональноНеВклВКредитПоставкаОФ
					ИЛИ СтатьяДекларации = СтрокиДекларацииНДС.НДС_НКПропорциональноВклВКредитПоставкаОФ Тогда
					
					R021G4 = R021G4 +  строка.БазаНДСОборот;
					
					Если Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС7 Тогда
						Сообщить(НСтр("ru = 'Обнаружено приобретение основных фондов по ставке 7%. Проверьте заполнение входящих налоговых документов!'; uk = 'Виявлено придбання основних засобів за ставкою ПДВ 7%. Перевірте заповнення вхідних податкових накладних!'"));
					Иначе	
						R021G5 = R021G5 +  строка.НДСОборот;
					КонецЕсли;
					
				КонецЕсли;
				
				Если Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС7 Тогда
					R102GA = R102GA +  строка.БазаНДСОборот;
					R102GB = R102GB +  строка.НДСОборот;
				Иначе	
					R101GA = R101GA +  строка.БазаНДСОборот;
					R101GB = R101GB +  строка.НДСОборот;
				КонецЕсли;
			
				Если Строка.МоментОпределенияПервогоСобытия = Перечисления.МоментыОпределенияНалоговойБазы.ПоОплате Тогда
					
					КассовыйМетод = "+";
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы51 Тогда
			ИначеЕсли НЕ ЗначениеЗаполнено(Строка.ИННКонтрагента) Тогда	
				Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "ЕРП" Тогда
					НаимКонтрагента = Строка.Контрагент;
				Иначе
					НаимКонтрагента = Строка.ДоговорКонтрагента.Владелец;
				КонецЕсли;	
				Сообщить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru = 'Имеются входящие налоговые накладные от контрагента  %1 с незаполненным ИНН!'; uk = 'Є вхідні податкові налогові від контрагента  %1  з незаповненим ІПН!'"), НаимКонтрагента));
			КонецЕсли;	
			
			НоваяСтрока 		   = ТаблицаКонтрагентов.Добавить();  
			НоваяСтрока.Контрагент = СокрЛП(Строка.Контрагент);
			Если ПустаяСтрока(НоваяСтрока.Контрагент) Тогда
				НоваяСтрока.Контрагент = "<Кінцевий споживач>";
			КонецЕсли;
			
			НоваяСтрока.ИННКонтрагента = Формат(Строка.ИННКонтрагента,"ЧГ=0");  
			НоваяСтрока.БазаНДС 	   = строка.БазаНДСОборот;  
			
			Если  Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС7 Тогда
				НоваяСтрока.НДС7 = строка.НДСОборот;                                      
			Иначе	
				НоваяСтрока.НДС  = строка.НДСОборот;                                      	
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.ПериодСоставленияНН) Тогда
				НоваяСтрока.Дата = КонецМесяца(Строка.ПериодСоставленияНН);
			КонецЕсли;
			
			НоваяСтрока.КассовыйМетод = КассовыйМетод;
			НоваяСтрока.СХПоставка = (Строка.СпецРежим = 2);
				
		КонецЦикла;
	КонецЦикла;	
	
	ТаблицаСоответствияИНН = ТаблицаКонтрагентов.Скопировать();
	ТаблицаСоответствияИНН.Свернуть("Контрагент,ИННКонтрагента");
	
	ТаблицаКонтрагентов.Колонки.Добавить("КонтрагентСпецКода");
	Для каждого Строка Из ТаблицаКонтрагентов Цикл
		Если Прав(Строка.ИННКонтрагента, 11) = "00000000000" Тогда
			Строка.КонтрагентСпецКода = Строка.Контрагент;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаКонтрагентов.Свернуть("ИННКонтрагента,Дата,КассовыйМетод,КонтрагентСпецКода,СХПоставка", "БазаНДС,НДС,НДС7");
	ТаблицаКонтрагентов.Сортировать("ИННКонтрагента,Дата");
	
	ТаблицаКонтрагентов.Колонки.Добавить("Контрагент");
	
	Отбор = Новый Структура;
	Для Каждого СтрокаТаблицыКонтрагентов Из ТаблицаКонтрагентов Цикл 
		 
		 Отбор.Вставить("ИННКонтрагента",СтрокаТаблицыКонтрагентов.ИннКонтрАгента);
		 
		 МассивКонтрагентов =  ТаблицаСоответствияИНН.НайтиСтроки(Отбор);
		 
		 НазванияКонтрагентов = "";
		 Для каждого Контрагент из МассивКонтрагентов Цикл
			 НазванияКонтрагентов = НазванияКонтрагентов + Символы.ПС + Контрагент.Контрагент;		 
		 КонецЦикла; 
		 НазванияКонтрагентов = Сред(НазванияКонтрагентов,2);
		 
		 СтрокаТаблицыКонтрагентов.Контрагент = НазванияКонтрагентов;
		 
		 Если ЗначениеЗаполнено(СтрокаТаблицыКонтрагентов.КонтрагентСпецКода) Тогда
		 	СтрокаТаблицыКонтрагентов.Контрагент = СтрокаТаблицыКонтрагентов.КонтрагентСпецКода;	
		 КонецЕсли;
		 
	 КонецЦикла;	 
	
	//далее здесь вносим в таблицу
	ВнестиИнфоВПриложение5(ТаблицаКонтрагентов, ИмяГруппы);
	
КонецПроцедуры	

//Процедура вносит строки в приложение 5, в том случае, если передаваемый ей параметр
//ЗначениеПараметра отличен от нуля
&НаСервере
Процедура ВнестиИнфоВПриложение5(Таблица, ИмяГруппы)
	
	перем СтруктураГруппы, ИсходноеКоличествоСтрокГруппы;

	ДанныеФормы 	= ЭтаФорма[ИмяГруппы];
	СтруктураГруппы = ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	ПрефиксИмениКолонки = ИмяГруппы+"XXXX";
	
	СчетчикСтрок = 0;
	Для каждого строка Из Таблица Цикл
		
		// отдельно выделенные строки под условные ИНН для первой таблицы
		Если ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы51 Тогда

			Если    Строка.ИННКонтрагента = "100000000000"
				ИЛИ Строка.ИННКонтрагента = "200000000000" 
				ИЛИ Строка.ИННКонтрагента = "400000000000" 
				ИЛИ Строка.ИННКонтрагента = "600000000000" Тогда
									
					КодСтроки = "R001" + Лев(Строка.ИННКонтрагента, 1) + "G";
					
					СтруктураДанныхПриложение5[КодСтроки + "4"] = СтруктураДанныхПриложение5[КодСтроки + "4"]  + Строка.БазаНДС;
					СтруктураДанныхПриложение5[КодСтроки + "5"] = СтруктураДанныхПриложение5[КодСтроки + "5"]  + Строка.НДС;
					СтруктураДанныхПриложение5[КодСтроки + "6"] = СтруктураДанныхПриложение5[КодСтроки + "6"]  + Строка.НДС7;
					
					Если НЕ Строка.БазаНДС = 0 Тогда
						_ДобавитьСтрокуРасшифровки(ЭтаФорма,КодСтроки + "4", "Показник ""Обсяг поставки (без ПДВ)"" графи ""Інші"" ("+Строка.ИННКонтрагента+") Додатку 5, Таблиці 1","+","" 					+ Строка.Контрагент, строка.БазаНДС,,,,,"Приложение5");
					КонецЕсли;
					Если НЕ Строка.НДС = 0 Тогда
						_ДобавитьСтрокуРасшифровки(ЭтаФорма,КодСтроки + "5", "Показник ""Сумма ПДВ, основна ставка"" графи ""Інші"" ("+Строка.ИННКонтрагента+") Додатку 5, ""Податкові зобов'язання""","+","" 			+ Строка.Контрагент, строка.НДС,,,,,"Приложение5");
					КонецЕсли;
					Если НЕ Строка.НДС7 = 0 Тогда
						_ДобавитьСтрокуРасшифровки(ЭтаФорма,КодСтроки + "6", "Показник ""Сумма ПДВ, ставка 7%"" графи ""Інші"" ("+Строка.ИННКонтрагента+") Додатку 5, Таблиці 1 ""Податкові зобов'язання""","+",""			+ Строка.Контрагент, строка.НДС7,,,,,"Приложение5");
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;	
				
		КонецЕсли;			

		Если СчетчикСтрок < ИсходноеКоличествоСтрокГруппы Тогда
			ДобавленнаяСтрока = СтруктураГруппы[СчетчикСтрок];
		Иначе
			ДобавленнаяСтрока = СтруктураГруппы.Добавить();	
		КонецЕсли;

		СчетчикСтрок = СчетчикСтрок + 1;
		
        ДобавленнаяСтрока[ПрефиксИмениКолонки+"G2"] = строка.ИННКонтрагента;
		
		ИмяКолонки = ПрефиксИмениКолонки+ "Kontragent";
		Если НЕ СтруктураГруппы.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
			ДобавленнаяСтрока[ПрефиксИмениКолонки+"Kontragent"] = строка.Контрагент;	
		КонецЕсли;
		
		Если ЗначениеЗаполнено(строка.Дата) Тогда
			ДобавленнаяСтрока[ПрефиксИмениКолонки+"G3A"] = Месяц(строка.Дата);
			ДобавленнаяСтрока[ПрефиксИмениКолонки+"G3B"] = Год(строка.Дата);
		КонецЕсли;
		ДобавленнаяСтрока[ПрефиксИмениКолонки+"G4"] = строка.БазаНДС;
		ДобавленнаяСтрока[ПрефиксИмениКолонки+"G5"] = строка.НДС;
		ДобавленнаяСтрока[ПрефиксИмениКолонки+"G6"] = строка.НДС7;
		
		ИмяКолонки = ПрефиксИмениКолонки+ "G41";
		Если НЕ СтруктураГруппы.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
			ДобавленнаяСтрока[ПрефиксИмениКолонки+"G41"] = строка.КассовыйМетод;	
		КонецЕсли;
		
		ИмяКолонки = ПрефиксИмениКолонки+ "G42";
		Если НЕ СтруктураГруппы.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
			ДобавленнаяСтрока[ПрефиксИмениКолонки+"G42"] = строка.СХПоставка;	
		КонецЕсли;
		
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(СтруктураГруппы, ИмяГруппы);
	
КонецПроцедуры

//Процедура вносит строки в Справку, в том случае, если передаваемый ей параметр
//ЗначениеПараметра отличен от нуля
&НаСервере
Процедура ВнестиИнфоВСправку(Таблица, ИмяГруппы)
	
	перем СтруктураГруппы, ИсходноеКоличествоСтрокГруппы;

	ДанныеФормы 	= ЭтаФорма[ИмяГруппы];
	СтруктураГруппы = ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	ПрефиксИмениКолонки = ИмяГруппы+"XXXX";
	
	Для каждого строка Из Таблица Цикл

		Если Таблица.Индекс(Строка)+1 <= ИсходноеКоличествоСтрокГруппы Тогда
			ДобавленнаяСтрока = СтруктураГруппы[Таблица.Индекс(Строка)];
		Иначе
			ДобавленнаяСтрока = СтруктураГруппы.Добавить();	
		КонецЕсли;

        ДобавленнаяСтрока[ПрефиксИмениКолонки+"G2S"] = строка.Операция;
		
		ДобавленнаяСтрока[ПрефиксИмениКолонки+"G3S"] = строка.Статья;
		
		ДобавленнаяСтрока[ПрефиксИмениКолонки+"G4"] = строка.БазаНДС;
		
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(СтруктураГруппы, ИмяГруппы);
	
КонецПроцедуры 
 
//Процедура выполняет поиск нужных строк в таблице результатов запроса
//по регистру "Книга продаж" или "Книга приобретений"
// Параметры:
//  СтатьяПоиска - значение типа Справочник.СтатьиНалоговыхДеклараций - статья, для которого требуется
//                 получить итог.
//  ПоказательГрафыА    - наименование показателя графы А формы декларации.
//  ПоказательГрафыБ    - наименование показателя графы Б формы декларации.
//  ПрПоляПоиска        - признак поля поиска (где нужно искать строку:
//  в таблице результатов запроса к регистру "Книга продаж" или "Книга приобретений")                                                       
&НаСервере
Процедура РасчетПоСтатье(СтатьяПоискаИлиМассив,ПоказательГрафыА,ПоказательГрафыБ,ИмяПоказателяГрафыА="",ИмяПоказателяГрафыБ="",ПрПоляПоиска,ДопСтруктураПоиска = Неопределено)
	Перем НайденнаяСтрока;
	Перем БазаНДСОборот, НДСОборот;
	
	Если  ТипЗнч(СтатьяПоискаИлиМассив) = Тип("Массив") Тогда
		
		МассивСтатей = СтатьяПоискаИлиМассив; 
		
	Иначе
		
		МассивСтатей = Новый Массив;
		МассивСтатей.Добавить(СтатьяПоискаИлиМассив);
	
	КонецЕсли;
	
		
	БазаНДСОборот = 0;
	НДСОборот = 0;
	
	Для каждого СтатьяПоиска Из МассивСтатей Цикл
		
		СтруктураПоиска = Новый Структура(?(ПрПоляПоиска = 1, ИмяКолонкиНО, ИмяКолонкиНК), СтатьяПоиска);
		Если ТипЗнч(ДопСтруктураПоиска) = Тип("Структура") Тогда
			Для каждого ЭлементДопСтруктуры Из ДопСтруктураПоиска Цикл
				СтруктураПоиска.Вставить(ЭлементДопСтруктуры.Ключ, ЭлементДопСтруктуры.Значение);
			КонецЦикла;
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаРезультатов.НайтиСтроки(СтруктураПоиска);
		
		Для каждого Строка Из НайденныеСтроки Цикл
		   БазаНДСОборот = БазаНДСОборот + Строка.БазаНДСОборот;
		   НДСОборот 	 = НДСОборот 	 + Строка.НДСОборот;
		КонецЦикла;
	
	КонецЦикла;
	
	Если СтрДлина (ИмяПоказателяГрафыА) > 0 Тогда
		ПоказательГрафыА = ПоказательГрафыА + БазаНДСОборот;
	КонецЕсли;
	Если СтрДлина (ИмяПоказателяГрафыБ) > 0 Тогда
		ПоказательГрафыБ = ПоказательГрафыБ + НДСОборот;
	КонецЕсли;
	Если СтрДлина (ИмяПоказателяГрафыА) > 0 Тогда
		СтруктураДанныхДекларация[ИмяПоказателяГрафыА] = ПоказательГрафыА;
	КонецЕсли;
	Если СтрДлина (ИмяПоказателяГрафыБ) > 0 Тогда
		СтруктураДанныхДекларация[ИмяПоказателяГрафыБ] = ПоказательГрафыБ;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеДляСправки(Таблица,ИмяКолонки,Статья,ИмяГруппы)
	
	ОписаниеТиповЧисло = СоздатьОписанияТипов("Число", 15, 2);
	ОписаниеТиповСтрока =  СоздатьОписанияТипов("Строка", 254);

	ТаблицаКонтрагентов = Новый ТаблицаЗначений;
	ТаблицаКонтрагентов.Колонки.Добавить("Операция",		ОписаниеТиповСтрока);
	ТаблицаКонтрагентов.Колонки.Добавить("Статья",			ОписаниеТиповСтрока);
	ТаблицаКонтрагентов.Колонки.Добавить("БазаНДС",			ОписаниеТиповЧисло);
	
	Отбор = Новый Структура;
	Отбор.Вставить(ИмяКолонки, Статья);
	НужныеСтроки = Таблица.НайтиСтроки(Отбор);
	
	Для каждого строка Из НужныеСтроки Цикл
		
		НоваяСтрока 			   = ТаблицаКонтрагентов.Добавить();  
		НоваяСтрока.Операция       = Строка.ОперацияД6;
		НоваяСтрока.Статья     	   = Строка.СтатьяД6;
		НоваяСтрока.БазаНДС 	   = строка.БазаНДСОборот;  
		
	КонецЦикла;
	
	ТаблицаКонтрагентов.Свернуть("Статья, Операция", "БазаНДС");
	ТаблицаКонтрагентов.Сортировать("Статья, Операция");
	
	//далее здесь вносим в таблицу
	ВнестиИнфоВСправку(ТаблицаКонтрагентов, ИмяГруппы);
	
КонецПроцедуры	

&НаСервере
Процедура ПодготовитьДанныеДляПриложения1ВРазрезеКонтрагентов(Таблица,ИмяКолонки,Статья,Признак)

	Если (Признак = "НО")  Тогда
		ИмяТаблицы = СтруктураРеквизитовФормы.мИдГруппы1;
	Иначе
		ИмяТаблицы = СтруктураРеквизитовФормы.мИдГруппы2;
	КонецЕсли;

	Если НЕ ТипЗнч(Статья) = Тип("Массив") Тогда
	
		МассивСтатей = Новый Массив;
		МассивСтатей.Добавить(Статья);
		
	Иначе
		
		МассивСтатей = Статья
		
	КонецЕсли;
	
	//ОписаниеТиповЧисло  = СоздатьОписанияТипов("Число", 15, 2);
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧисло  = Новый ОписаниеТипов(МассивТипов, Новый КвалификаторыЧисла(15, 2));
	
	ОписаниеТиповСтрока = СоздатьОписанияТипов("Строка", 254);
	СтрокиДекларацииНДС = Справочники.СтатьиНалоговыхДеклараций;
	
	ТаблицаКонтрагентов = Новый ТаблицаЗначений;
	ТаблицаКонтрагентов.Колонки.Добавить("Контрагент",		ОписаниеТиповСтрока);
	ТаблицаКонтрагентов.Колонки.Добавить("ИННКонтрагента",	СоздатьОписанияТипов("Строка",12));
	ТаблицаКонтрагентов.Колонки.Добавить("БазаНДС",			ОписаниеТиповЧисло);
	ТаблицаКонтрагентов.Колонки.Добавить("НДС",				ОписаниеТиповЧисло);
	ТаблицаКонтрагентов.Колонки.Добавить("НДС7",			ОписаниеТиповЧисло);
	ТаблицаКонтрагентов.Колонки.Добавить("БазаНДСБезНДС",   ОписаниеТиповЧисло);
	ТаблицаКонтрагентов.Колонки.Добавить("Дата");	
	ТаблицаКонтрагентов.Колонки.Добавить("СХПоставка");	
	
	Для Каждого СтатьяДекларации из МассивСтатей Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить(ИмяКолонки,СтатьяДекларации);
		НайденныеСтроки = Таблица.НайтиСтроки(Отбор);
		
		Для каждого строка Из НайденныеСтроки Цикл
			
			СтрокаТаб = ТаблицаКонтрагентов.Добавить();
			
			СтрокаТаб.Контрагент = СокрЛП(Строка.ИмяКонтрагента);
			Если ПустаяСтрока(СтрокаТаб.Контрагент) Тогда
				СтрокаТаб.Контрагент = "<Кінцевий споживач>";
			КонецЕсли;
			
			СтрокаТаб.ИННКонтрагента = Формат(Строка.ИННКонтрагента,"ЧГ=0");
			
			СтрокаТаб.СХПоставка = (Строка.СпецРежим = 2);
			
			СтрокаТаб.БазаНДС = Строка.БазаНДСОборот;
			
			Если Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС7 Тогда
				
				СтрокаТаб.НДС7 = Строка.НДСОборот;
				
			ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 
				ИЛИ Строка.СтавкаНДС = Перечисления.СтавкиНДС.СпецСт8 Тогда //ИНАГРО 				
	
				СтрокаТаб.НДС = Строка.НДСОборот;
				
			Иначе	
				
				СтрокаТаб.БазаНДСБезНДС = Строка.БазаНДСОборот;
				СтрокаТаб.БазаНДС = 0;
				
			КонецЕсли;
			
			ПериодКорректируемыхНН = "";	
			Если ЗначениеЗаполнено(Строка.ННизП2) Тогда
				СтрокаТаб.Дата = КонецМесяца(Строка.ДатаННизП2);
			КонецЕсли;
			
			Если (Признак = "НК") Тогда
				
				Если    Строка[ИмяКолонки] = СтрокиДекларацииНДС.НДС_НККорректировкаПропорциональноВклВКредитПоставкаОФ
					ИЛИ Строка[ИмяКолонки] = СтрокиДекларацииНДС.НДС_НККорректировкаПропорциональноНеВклВКредитПоставкаОФ Тогда
					
					R021G4 = R021G4 + Строка.БазаНДСОборот;		
					
					Если Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС7 Тогда
					Иначе	
						R021G5 = R021G5 + Строка.НДСОборот;		
					КонецЕсли;
				
				КонецЕсли;
				
				Если Строка.ИННКонтрагента = "500000000000" Тогда
					// корректировка НО по услугам нерезидента. Отражается в Д1 и сразу в строке 13
					R130GA = R130GA + Строка.БазаНДСОборот;	
					R130GB = R130GB + Строка.НДСОборот;		
					
					ТаблицаКонтрагентов.Удалить(СтрокаТаб);
					Продолжить;
					
				КонецЕсли;
				
			Иначе
				
				Если Строка.СпецРежим = 2 И НЕ Строка.ИННКонтрагента = "600000000000" Тогда
					R011G4 = R011G4 + Строка.БазаНДСОборот;		
					Если Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС7 Тогда
						R011G6 = R011G6 + Строка.НДСОборот;		
					ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда	
						R011G5 = R011G5 + Строка.НДСОборот;		
					Иначе	
						R011G7 = R011G7 + Строка.БазаНДСОборот;		
					КонецЕсли;
				КонецЕсли;
				
				Если Строка.ИННКонтрагента = "600000000000" Тогда
					Если Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС7 Тогда
						R012G4_7 = R012G4_7 + Строка.БазаНДСОборот;	
						R012G6   = R012G6 + Строка.НДСОборот;		
					ИначеЕсли Строка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда		
						R012G4_20 = R012G4_20 + Строка.БазаНДСОборот;	
						R012G5    = R012G5 + Строка.НДСОборот;		
					Иначе	
						R012G7 = R012G7 + Строка.БазаНДСОборот;		
					КонецЕсли;
					
					// такие корректировки теперь отражаются в строке 4.х и не отражаются в строке 7
					ТаблицаКонтрагентов.Удалить(СтрокаТаб);
					Продолжить;
					
				КонецЕсли;
				
				Если Строка.ИННКонтрагента = "500000000000" Тогда
					// корректировка НО по услугам нерезидента. Отражается в Д1 и сразу в строке 6
					R60GA = R60GA + Строка.БазаНДСОборот;	
					R60GB = R60GB + Строка.НДСОборот;		
					
					ТаблицаКонтрагентов.Удалить(СтрокаТаб);
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; 		

	КонецЦикла;		
		
	ТаблицаСоответствияИНН = ТаблицаКонтрагентов.Скопировать();
	ТаблицаСоответствияИНН.Свернуть("Контрагент,ИННКонтрагента");
	
	ТаблицаКонтрагентов.Колонки.Добавить("КонтрагентСпецКода");
	Для каждого Строка Из ТаблицаКонтрагентов Цикл
		Если Прав(Строка.ИННКонтрагента, 11) = "00000000000" Тогда
			Строка.КонтрагентСпецКода = Строка.Контрагент;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаКонтрагентов.Свернуть("ИННКонтрагента,Дата,КонтрагентСпецКода,СХПоставка", "БазаНДС,НДС,НДС7,БазаНДСБезНДС");
	ТаблицаКонтрагентов.Сортировать("ИННКонтрагента,Дата");
	
	ТаблицаКонтрагентов.Колонки.Добавить("Контрагент");
	
	Отбор = Новый Структура;
	Для Каждого СтрокаТаблицыКонтрагентов Из ТаблицаКонтрагентов Цикл 
		 
		 Отбор.Вставить("ИННКонтрагента",СтрокаТаблицыКонтрагентов.ИннКонтрАгента);
		 
		 МассивКонтрагентов =  ТаблицаСоответствияИНН.НайтиСтроки(Отбор);
		 
		 НазванияКонтрагентов = "";
		 Для каждого Контрагент из МассивКонтрагентов Цикл
			 НазванияКонтрагентов = НазванияКонтрагентов + Символы.ПС + Контрагент.Контрагент;		 
		 КонецЦикла; 
		 НазванияКонтрагентов = Сред(НазванияКонтрагентов,2);
		 
		 СтрокаТаблицыКонтрагентов.Контрагент = НазванияКонтрагентов;
		 
		 Если ЗначениеЗаполнено(СтрокаТаблицыКонтрагентов.КонтрагентСпецКода) Тогда
		 	СтрокаТаблицыКонтрагентов.Контрагент = СтрокаТаблицыКонтрагентов.КонтрагентСпецКода;	
		 КонецЕсли;
		 
	КонецЦикла;		
	
	ВнестиИнфоВПриложение1(ТаблицаКонтрагентов, ИмяТаблицы);
	
КонецПроцедуры	

&НаСервере
Процедура ВнестиИнфоВПриложение1(Таблица,ИмяГруппы)
	
	перем СтруктураГруппы, ИсходноеКоличествоСтрокГруппы;

	ДанныеФормы 	= ЭтаФорма[ИмяГруппы];
	СтруктураГруппы = ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));
	мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	ПрефиксИмениКолонки = ИмяГруппы+"XXXX";
	
	СчетчикСтрок = 0;
	Для каждого Строка Из Таблица Цикл
		
		// отдельно выделенные строки под условные ИНН для первой таблицы
		Если ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы1 Тогда

			Если    Строка.ИННКонтрагента = "100000000000"
				ИЛИ Строка.ИННКонтрагента = "200000000000" 
				ИЛИ Строка.ИННКонтрагента = "300000000000" 
				ИЛИ Строка.ИННКонтрагента = "400000000000" Тогда
								
				КодСтроки = "R001" + Лев(Строка.ИННКонтрагента, 1) + "G";
				
				СтруктураДанныхПриложение1[КодСтроки + "4"] = СтруктураДанныхПриложение1[КодСтроки + "4"] + Строка.БазаНДС;
				
				СтруктураДанныхПриложение1[КодСтроки + "5"] = СтруктураДанныхПриложение1[КодСтроки + "5"] + Строка.НДС;
				СтруктураДанныхПриложение1[КодСтроки + "6"] = СтруктураДанныхПриложение1[КодСтроки + "6"] + Строка.НДС7;
				СтруктураДанныхПриложение1[КодСтроки + "7"] = СтруктураДанныхПриложение1[КодСтроки + "7"] + Строка.БазаНДСБезНДС;

				Если НЕ Строка.БазаНДС = 0 Тогда
					_ДобавитьСтрокуРасшифровки(ЭтаФорма,КодСтроки + "4", "Показник ""Обсяг поставки (без ПДВ)"" графи ""Інші"" ("+Строка.ИННКонтрагента+") Додатку 1, Таблиці 1","+","" 						   + Строка.Контрагент, строка.БазаНДС,,,,,"Приложение1");
				КонецЕсли;
				Если НЕ Строка.НДС = 0 Тогда
					_ДобавитьСтрокуРасшифровки(ЭтаФорма,КодСтроки + "5", "Показник ""Сумма ПДВ, основна ставка"" графи ""Інші"" ("+Строка.ИННКонтрагента+") Додатку 1, ""Податкові зобов'язання""","+","" 				   + Строка.Контрагент, строка.НДС,,,,,"Приложение1");
				КонецЕсли;
				Если НЕ Строка.НДС7 = 0 Тогда
					_ДобавитьСтрокуРасшифровки(ЭтаФорма,КодСтроки + "6", "Показник ""Сумма ПДВ, ставка 7%"" графи ""Інші"" ("+Строка.ИННКонтрагента+") Додатку 1, Таблиці 1 ""Податкові зобов'язання""","+",""			   + Строка.Контрагент, строка.НДС7,,,,,"Приложение1");
				КонецЕсли;
				Если НЕ Строка.БазаНДСБезНДС = 0 Тогда
					_ДобавитьСтрокуРасшифровки(ЭтаФорма,КодСтроки + "7", "Показник ""Обсяг поставки по якій не нараховувався ПДВ"" графи ""Інші"" ("+Строка.ИННКонтрагента+") Додатку 1, Таблиці 1 ""Податкові зобов'язання""","+","" + Строка.Контрагент, строка.БазаНДСБезНДС,,,,,"Приложение1");
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;	
				
			// нулевые корректировки не показываем в Приложении 1
			Если строка.НДС = 0 И строка.НДС7 = 0 И строка.БазаНДС = 0 И строка.БазаНДСБезНДС = 0 Тогда
				Продолжить;
			КонецЕсли;
				
		Иначе
			
			// нулевые корректирвки, в т.ч. от неплательщиков или по ставкам Без НДС - не показываем в Приложении 1
			Если строка.НДС = 0 И строка.НДС7 = 0 Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;			
		
		Если СчетчикСтрок < ИсходноеКоличествоСтрокГруппы Тогда
			ДобавленнаяСтрока = СтруктураГруппы[СчетчикСтрок];
		Иначе
			ДобавленнаяСтрока = СтруктураГруппы.Добавить();	
		КонецЕсли;

		СчетчикСтрок = СчетчикСтрок + 1;

        ДобавленнаяСтрока[ПрефиксИмениКолонки+"G2"] = строка.ИННКонтрагента;
		
		ИмяКолонки = ПрефиксИмениКолонки+ "Kontragent";
		ДобавленнаяСтрока[ПрефиксИмениКолонки+"Kontragent"] = строка.Контрагент;	
		
		Если ЗначениеЗаполнено(строка.Дата) Тогда
			ДобавленнаяСтрока[ПрефиксИмениКолонки+"G3A"] = Месяц(строка.Дата);
			ДобавленнаяСтрока[ПрефиксИмениКолонки+"G3B"] = Год(строка.Дата);
		КонецЕсли;
		ДобавленнаяСтрока[ПрефиксИмениКолонки+"G4"] = строка.БазаНДС;
		ДобавленнаяСтрока[ПрефиксИмениКолонки+"G5"] = строка.НДС;
		ДобавленнаяСтрока[ПрефиксИмениКолонки+"G6"] = строка.НДС7;
		
		ДобавленнаяСтрока[ПрефиксИмениКолонки+"G32"] = строка.СХПоставка;
		
		Если ИмяГруппы = СтруктураРеквизитовФормы.мИдГруппы1 Тогда
			ДобавленнаяСтрока[ПрефиксИмениКолонки+"G7"] = строка.БазаНДСБезНДС;	
		КонецЕсли;
		
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(СтруктураГруппы, ИмяГруппы);
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьКолонку4ДаннымиИзОтчета()
	
	ДанныеОтчета = СтруктураРеквизитовФормы.УточняемыйОтчет.ДанныеОтчета.Получить();
	Показатели = ДанныеОтчета.ПоказателиОтчета["ПолеТабличногоДокументаДекларация"];
	
	Для каждого Показатель Из Показатели Цикл
		ИмяПоказателя = Показатель.Ключ;
		
		Если     ВРЕГ(Прав(ИмяПоказателя, 2)) = "GA" 
			 ИЛИ ВРЕГ(Прав(ИмяПоказателя, 2)) = "GB" 
			 ИЛИ ВРЕГ(Прав(ИмяПоказателя, 2)) = "G3" Тогда
			 
			 // выполним преобразование к форме ФормаОтчета2015
			 Если НЕ Показатели.Свойство("R240GB") Тогда
				 // это форма до 2016 года. Преобразовывать ничего не нужно
			 ИначеЕсли ИмяПоказателя = "R83GA" И НЕ Показатели.Свойство("R84GA") Тогда
				ИмяПоказателя = "R841GA";
			 ИначеЕсли ИмяПоказателя = "R83GB" И НЕ Показатели.Свойство("R84GB") Тогда
				ИмяПоказателя = "R841GB";
			 ИначеЕсли ИмяПоказателя = "R82GA" И НЕ Показатели.Свойство("R84GA") Тогда
				ИмяПоказателя = "R83GA";
			 ИначеЕсли ИмяПоказателя = "R82GB" И НЕ Показатели.Свойство("R84GB") Тогда
				ИмяПоказателя = "R83GB";
			 ИначеЕсли ИмяПоказателя = "R81GA" И НЕ Показатели.Свойство("R84GA") Тогда
				ИмяПоказателя = "R811GA";
			 ИначеЕсли ИмяПоказателя = "R81GB" И НЕ Показатели.Свойство("R84GA") Тогда
				ИмяПоказателя = "R811GB";
			 ИначеЕсли ИмяПоказателя = "R811GA" И НЕ Показатели.Свойство("R84GA") Тогда
				ИмяПоказателя = "R812GA";
			 ИначеЕсли ИмяПоказателя = "R811GB" И НЕ Показатели.Свойство("R84GA") Тогда
				ИмяПоказателя = "R812GB";
			 ИначеЕсли ИмяПоказателя = "R812GA" И НЕ Показатели.Свойство("R84GA") Тогда
				ИмяПоказателя = "R813GA";
			 ИначеЕсли ИмяПоказателя = "R812GB" И НЕ Показатели.Свойство("R84GA") Тогда
				ИмяПоказателя = "R813GB";
			 ИначеЕсли ИмяПоказателя = "R10GA" Тогда
				ИмяПоказателя = "R11GA";
			 ИначеЕсли ИмяПоказателя = "R10GB" Тогда
				ИмяПоказателя = "R11GB";
			 ИначеЕсли ИмяПоказателя = "R101GA" И НЕ Показатели.Свойство("R1011GA") Тогда
				ИмяПоказателя = "R1011GA";
			 ИначеЕсли ИмяПоказателя = "R101GB" И НЕ Показатели.Свойство("R1011GB") Тогда
				ИмяПоказателя = "R1011GB";
			 ИначеЕсли ИмяПоказателя = "R102GA" И НЕ Показатели.Свойство("R1021GA") Тогда
				ИмяПоказателя = "R1021GA";
			 ИначеЕсли ИмяПоказателя = "R102GB" И НЕ Показатели.Свойство("R102GB") Тогда
				ИмяПоказателя = "R1021GB";
			 ИначеЕсли ИмяПоказателя = "R121GA" И НЕ Показатели.Свойство("R1211GA") Тогда
				ИмяПоказателя = "R1211GA";
			 ИначеЕсли ИмяПоказателя = "R121GB" И НЕ Показатели.Свойство("R1211GB")Тогда
				ИмяПоказателя = "R1211GB";
			 ИначеЕсли ИмяПоказателя = "R1611GA"  И НЕ Показатели.Свойство("R1615GA") Тогда
				ИмяПоказателя = "R1614GA";
			 ИначеЕсли ИмяПоказателя = "R1614GA"  И НЕ Показатели.Свойство("R1615GA")Тогда
				ИмяПоказателя = "R1612GA";
			 ИначеЕсли ИмяПоказателя = "R1612GA"  И НЕ Показатели.Свойство("R1615GA") Тогда
				ИмяПоказателя = "R1615GA";
			 ИначеЕсли ИмяПоказателя = "R1612GB"  И НЕ Показатели.Свойство("R1615GB")Тогда
				ИмяПоказателя = "R1615GB";
			 ИначеЕсли ИмяПоказателя = "R1613GA"  И НЕ Показатели.Свойство("R1616GA")Тогда
				ИмяПоказателя = "R1616GA";
			 КонецЕсли;
			 
			 // теперь преобразуем к данным формы ФормаОтчета2016
			 Если Показатели.Свойство("R240GB") Тогда
				 
				 Если 	   ИмяПоказателя = "R21GB" Тогда ИмяПоказателя = "R20GB"
				 ИначеЕсли ИмяПоказателя = "R21GA" Тогда ИмяПоказателя = "R20GA"
				 ИначеЕсли ИмяПоказателя = "R22GA" Тогда ИмяПоказателя = "R30GA"
				 ИначеЕсли ИмяПоказателя = "R22GB" Тогда ИмяПоказателя = "R30GB"
				 ИначеЕсли ИмяПоказателя = "R30GA" Тогда ИмяПоказателя = "R50GA"
				 ИначеЕсли ИмяПоказателя = "R40GA" Тогда ИмяПоказателя = "R50GB"
				 ИначеЕсли ИмяПоказателя = "R70GA" Тогда ИмяПоказателя = "R60GA"
				 ИначеЕсли ИмяПоказателя = "R70GB" Тогда ИмяПоказателя = "R60GB"
				 ИначеЕсли ИмяПоказателя = "R80GA" Тогда ИмяПоказателя = "R70GA"
				 ИначеЕсли ИмяПоказателя = "R80GB" Тогда ИмяПоказателя = "R70GB"
					 
				 ИначеЕсли ИмяПоказателя = "R101GA" Тогда ИмяПоказателя = "НеПереносим"
				 ИначеЕсли ИмяПоказателя = "R101GB" Тогда ИмяПоказателя = "НеПереносим"
						 
				 ИначеЕсли ИмяПоказателя = "R1011GA" Тогда ИмяПоказателя = "R101GA"
				 ИначеЕсли ИмяПоказателя = "R1011GB" Тогда ИмяПоказателя = "R101GB"
				 ИначеЕсли ИмяПоказателя = "R1012GA" Тогда ИмяПоказателя = "R102GA"
				 ИначеЕсли ИмяПоказателя = "R1012GB" Тогда ИмяПоказателя = "R102GB"
					 
				 ИначеЕсли ИмяПоказателя = "R102GA" Тогда ИмяПоказателя = "НеПереносим"
				 ИначеЕсли ИмяПоказателя = "R102GB" Тогда ИмяПоказателя = "НеПереносим"
				 ИначеЕсли ИмяПоказателя = "R111GA" Тогда ИмяПоказателя = "НеПереносим"
				 ИначеЕсли ИмяПоказателя = "R112GA" Тогда ИмяПоказателя = "НеПереносим"
				 
				 ИначеЕсли ИмяПоказателя = "R1211GA" Тогда ИмяПоказателя = "R111GA"
				 ИначеЕсли ИмяПоказателя = "R1211GB" Тогда ИмяПоказателя = "R111GB"
				 ИначеЕсли ИмяПоказателя = "R1212GA" Тогда ИмяПоказателя = "R112GA"
				 ИначеЕсли ИмяПоказателя = "R1212GB" Тогда ИмяПоказателя = "R112GB"
				 ИначеЕсли ИмяПоказателя = "R122GA"  Тогда ИмяПоказателя = "R113GA"
				 ИначеЕсли ИмяПоказателя = "R122GB"  Тогда ИмяПоказателя = "R113GB"
				 ИначеЕсли ИмяПоказателя = "R124GA"  Тогда ИмяПоказателя = "R114GA"
				 ИначеЕсли ИмяПоказателя = "R124GB"  Тогда ИмяПоказателя = "R114GB"
					 
				 ИначеЕсли ИмяПоказателя = "R151GA"  Тогда ИмяПоказателя = "R101GA"
				 ИначеЕсли ИмяПоказателя = "R151GB"  Тогда ИмяПоказателя = "R101GB"

				 ИначеЕсли ИмяПоказателя = "R160GA"  Тогда ИмяПоказателя = "R120GA"
				 ИначеЕсли ИмяПоказателя = "R160GB"  Тогда ИмяПоказателя = "R120GB"
					 
				 ИначеЕсли ИмяПоказателя = "R161GB"  Тогда ИмяПоказателя = "НеПереносим"
					 
				 ИначеЕсли ИмяПоказателя = "R162GA"  Тогда ИмяПоказателя = "R130GA"
				 ИначеЕсли ИмяПоказателя = "R162GB"  Тогда ИмяПоказателя = "R130GB"
					
				 ИначеЕсли ИмяПоказателя = "R163GB"  Тогда ИмяПоказателя = "R140GB"
					 
				 ИначеЕсли ИмяПоказателя = "R150GA"  Тогда ИмяПоказателя = "НеПереносим"
				 ИначеЕсли ИмяПоказателя = "R150GB"  Тогда ИмяПоказателя = "НеПереносим"
					 
				 ИначеЕсли ИмяПоказателя = "R164GA"  Тогда ИмяПоказателя = "R150GA"
				 ИначеЕсли ИмяПоказателя = "R164GB"  Тогда ИмяПоказателя = "R150GB"
					 
				 ИначеЕсли ИмяПоказателя = "R201GB"  Тогда ИмяПоказателя = "R161GB"				 
				 ИначеЕсли ИмяПоказателя = "R202GB"  Тогда ИмяПоказателя = "НеПереносим"				 
				 ИначеЕсли ИмяПоказателя = "R203GB"  Тогда ИмяПоказателя = "R163GB"				 
					 
				 ИначеЕсли ИмяПоказателя = "R210GB"  Тогда ИмяПоказателя = "НеПереносим"				 
					 
				 ИначеЕсли ИмяПоказателя = "R221G3"  Тогда			 
					 СтруктураДанныхДекларация.Вставить("R191G3",Показатель.Значение);
				 ИначеЕсли ИмяПоказателя = "R231GB"  Тогда ИмяПоказателя = "R201GB"				 				 
				 ИначеЕсли ИмяПоказателя = "R232GB"  Тогда ИмяПоказателя = "R2021GB"				 				 
				 КонецЕсли;
				 
			 КонецЕсли;
			 
			 // теперь преобразуем к данным формы ФормаОтчета2017
			 Если НЕ Показатели.Свойство("HBD") Тогда
				 
				 Если      ИмяПоказателя = "R113GA"  Тогда ИмяПоказателя = "R120GA"				 				 
				 ИначеЕсли ИмяПоказателя = "R113GB"  Тогда ИмяПоказателя = "R120GB"				 				 
				 ИначеЕсли ИмяПоказателя = "R114GA"  Тогда ИмяПоказателя = "R130GA"				 				 
				 ИначеЕсли ИмяПоказателя = "R114GB"  Тогда ИмяПоказателя = "R130GB"				 				 
				 ИначеЕсли ИмяПоказателя = "R120GA"  Тогда ИмяПоказателя = "R140GA"				 				 
				 ИначеЕсли ИмяПоказателя = "R120GB"  Тогда ИмяПоказателя = "R140GB"				 				 
				 ИначеЕсли ИмяПоказателя = "R130GA"  Тогда ИмяПоказателя = "НеПереносим"				 				 
				 ИначеЕсли ИмяПоказателя = "R130GB"  Тогда ИмяПоказателя = "НеПереносим"				 				 
				 ИначеЕсли ИмяПоказателя = "R140GB"  Тогда ИмяПоказателя = "НеПереносим"
				 ИначеЕсли ИмяПоказателя = "R181GB"  Тогда ИмяПоказателя = "НеПереносим"				 				 
				 ИначеЕсли ИмяПоказателя = "R182GB"  Тогда ИмяПоказателя = "НеПереносим"				 				 
				 КонецЕсли;
				 
			 КонецЕсли;
			 
			 Если СтруктураДанныхДекларация.Свойство(ИмяПоказателя + "4") Тогда
				СтруктураДанныхДекларация[ИмяПоказателя + "4"] = СтруктураДанныхДекларация[ИмяПоказателя + "4"]
															   + Показатель.Значение;
			 КонецЕсли;
			 
			 
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура Заполнить(ПараметрыЗаполненияЗвит1С)

	Перем СтрокиДекларацииНДС;
	
	Если   СтруктураРеквизитовФормы.Свойство("ЗаполнитьКолонку4") 
	     И СтруктураРеквизитовФормы.ЗаполнитьКолонку4 = Истина Тогда
		 ЗаполнитьКолонку4ДаннымиИзОтчета();
	КонецЕсли;	
	 
	ТаблицаРасшифровки = Неопределено;
	Если СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровки") И ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки) Тогда
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	КонецЕсли;
	
	Если ТаблицаРасшифровки = Неопределено Тогда
		ТаблицаРасшифровки = Новый ТаблицаЗначений;
		ТаблицаРасшифровки.Колонки.Добавить("ИмяПоказателя");
		ТаблицаРасшифровки.Колонки.Добавить("НаименованиеПоказателя");
		ТаблицаРасшифровки.Колонки.Добавить("ЗнакОперации");
		ТаблицаРасшифровки.Колонки.Добавить("НаименованиеСлагаемого");
		ТаблицаРасшифровки.Колонки.Добавить("Сумма");
		ТаблицаРасшифровки.Колонки.Добавить("ИмяРаздела");
		ТаблицаРасшифровки.Колонки.Добавить("ДополнительныеПараметры");
	КонецЕсли;
	
	ТаблицаРасшифровки.Очистить();
	
	ОбщиеПараметрыРасшифровки = Новый Структура;
	ОбщиеПараметрыРасшифровки.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	ОбщиеПараметрыРасшифровки.Вставить("НачалоПериода", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ОбщиеПараметрыРасшифровки.Вставить("КонецПериода", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	СтрокиДекларацииНДС = Справочники.СтатьиНалоговыхДеклараций;
	СтруктураОтбора = Новый Структура("Организация, СпецРежимНалогообложения", СтруктураРеквизитовФормы.Организация, 0);
	ТаблицаКоэффициентов = РегистрыСведений.КоэффициентыПропорциональногоОтнесенияНДСНаКредит.СрезПоследних(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураОтбора);
	Если ТаблицаКоэффициентов.Количество() = 0 Тогда
		мКоэффициентПропорциональногоНДС =  0;		
	Иначе
		мКоэффициентПропорциональногоНДС = ТаблицаКоэффициентов[0].Коэффициент;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.УточняемыйОтчет) Тогда
		УточняемыйОтчет = ПолучитьСвойстваУточняемогоОтчетаНаСервере(СтруктураРеквизитовФормы.УточняемыйОтчет);	
		Если    УточняемыйОтчет.ИсточникОтчета = "РегламентированныйОтчетУточняющийРасчетДекларацияНДС"
			ИЛИ УточняемыйОтчет.ИсточникОтчета = "РегламентированныйОтчетУточняющийРасчетДекларацияНДСПерер"
			ИЛИ УточняемыйОтчет.ИсточникОтчета = "РегламентированныйОтчетУточняющийРасчетДекларацияНДССокр" 
			ИЛИ УточняемыйОтчет.ИсточникОтчета = "РегламентированныйОтчетУточняющийРасчетДекларацияНДССпец" Тогда
		
			СтруктураДанныхДекларация.HVPP = "X";
		
		КонецЕсли;	
	КонецЕсли;
	
	КоличествоСтрокПриложения1 = Новый Структура;

	//СтруктураДанныхДекларация.HZ = "X";
	//СтруктураДанныхПриложение1.HZ = "X";
	//СтруктураДанныхПриложение2.HZ = "X";
	//СтруктураДанныхПриложение3.HZ = "X";
	//СтруктураДанныхПриложение4.HZ = "X";
	//СтруктураДанныхПриложение5.HZ = "X";
	//СтруктураДанныхСправка.HZ = "X";
	//СтруктураДанныхПриложение7.HZ = "X";
	////СтруктураДанныхПриложение8.HZ = "X";
	//СтруктураДанныхПриложение9.HZ = "X";

	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "ЕРП" Тогда
		ИмяРегистраНО = "НДСРеестрВыданныхНалоговыхДокументов";
		ИмяРегистраНК = "НДСРеестрПолученныхНалоговыхДокументов";
	Иначе
		ИмяРегистраНО = "НДСНалоговыеОбязательства";
		ИмяРегистраНК = "НДСНалоговыйКредит";
	КонецЕсли;
	
	ИмяКолонкиНО  = "СтатьяДекларацииНДСНалоговыеОбязательства";
	ИмяКолонкиНК  = "СтатьяДекларацииНДСНалоговыйКредит";
	
	ВидОперацииЗКП =  "ВидыОперацийРегистрацияВходящегоНалоговогоДокумента";
	
	ИмяДокументаЗКП = "РегистрацияВходящегоНалоговогоДокумента";

	УточняемыйГод = СтруктураДанныхСлужебныеДанные.HZYP;
	УточняемыйКв  = СтруктураДанныхСлужебныеДанные.HZKVP;
	УточняемыйМес = СтруктураДанныхСлужебныеДанные.HZMP;
	Если ЗначениеЗаполнено(УточняемыйМес) Тогда
		ТекПериодичность = "МЕСЯЦ";
		УточняемыйПериод = КонецМесяца(Дата(УточняемыйГод,УточняемыйМес,1));
	Иначе
		ТекПериодичность = "КВАРТАЛ";
		УточняемыйПериод = КонецМесяца(Дата(УточняемыйГод,УточняемыйКв*3,1));
	КонецЕсли;	
	
	
	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "ЕРП" Тогда
		ТекстЗапросаНалоговыеОбва = "ВЫБРАТЬ
		 							|   ЕстьNULL(НДСНалоговыеОбязательстваОбороты.Регистратор.СпецРежимНалогообложения, 0) КАК СпецРежим,
									
									|	НДСНалоговыеОбязательстваОбороты.Регистратор КАК Регистратор,
									|	НДСНалоговыеОбязательстваОбороты."+ИмяКолонкиНО+" КАК "+ИмяКолонкиНО+",
									|	НДСНалоговыеОбязательстваОбороты.АналитикаУчетаПоПартнерам.Организация КАК Организация,
									|	НДСНалоговыеОбязательстваОбороты.АналитикаУчетаПоПартнерам.Договор КАК ДоговорКонтрагента,
									
									|	МАКСИМУМ(НДСНалоговыеОбязательстваОбороты.АналитикаУчетаПоПартнерам.Договор.МоментОпределенияБазыНДС) КАК МоментОпределенияПервогоСобытия,
									
									|	НДСНалоговыеОбязательстваОбороты.СтавкаНДС КАК СтавкаНДС,
									|	НДСНалоговыеОбязательстваОбороты.ПродажаНижеОбычнойЦены КАК ПродажаНижеОбычнойЦены,
									
									|	МАКСИМУМ(ЕстьNULL(НДСНалоговыеОбязательстваОбороты.Регистратор.СпецРежимНалогообложения, 0)) КАК СпецРежимНалогообложения,
									
									|	МАКСИМУМ(НДСНалоговыеОбязательстваОбороты.Регистратор.Дата) КАК ПериодСоставленияНН,
									|   МАКСИМУМ(ВЫБОР КОГДА НДСНалоговыеОбязательстваОбороты.Регистратор.ВидОперации В (&УсловнаяПродажа) ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ) КАК ЭтоУсловнаяПродажа,
									
									|	СУММА(НДСНалоговыеОбязательстваОбороты.СуммаБезНДС) КАК БазаНДСОборот,
									|	СУММА(НДСНалоговыеОбязательстваОбороты.СуммаНДС)     КАК НДСОборот,
									
									|	МАКСИМУМ(НАЧАЛОПЕРИОДА(НДСНалоговыеОбязательстваОбороты.Период, ДЕНЬ)) КАК Период,
									|	МАКСИМУМ(ВЫРАЗИТЬ(НДСНалоговыеОбязательстваОбороты.Регистратор.Комментарий КАК Строка(200))) КАК Комментарий,
									
									
									|	МАКСИМУМ(ВЫБОР КОГДА     НДСНалоговыеОбязательстваОбороты.Регистратор ССЫЛКА Документ.НалоговаяНакладная 
									|               ИЛИ НДСНалоговыеОбязательстваОбороты.Регистратор ССЫЛКА Документ.Приложение2КНалоговойНакладной 
									|	    ТОГДА ВЫБОР КОГДА НДСНалоговыеОбязательстваОбороты.Регистратор.ВидОперации В (&ОсобыеВидыОпераций) 
									|					  ТОГДА """"
									|					  ИНАЧЕ НДСНалоговыеОбязательстваОбороты.Регистратор.Контрагент
									|			  КОНЕЦ 
									|		ИНАЧЕ НДСНалоговыеОбязательстваОбороты.АналитикаУчетаПоПартнерам.Договор.Контрагент 
									|	КОНЕЦ) КАК Контрагент,
									
									|	МАКСИМУМ(ВЫБОР КОГДА  НДСНалоговыеОбязательстваОбороты.Регистратор ССЫЛКА Документ.НалоговаяНакладная ИЛИ НДСНалоговыеОбязательстваОбороты.Регистратор ССЫЛКА Документ.Приложение2КНалоговойНакладной
									|					    ТОГДА 
									|							ВЫБОР КОГДА НДСНалоговыеОбязательстваОбороты.Регистратор.ВидОперации В (&ОсобыеВидыОпераций)
									|                                   ТОГДА &НаименованиеОрганизации
									|								  КОГДА ЕстьNULL(ПОДСТРОКА(НДСНалоговыеОбязательстваОбороты.Регистратор.Контрагент.ИННПлательщикаНДС,1,1), """") = """" 
									|                                   ТОГДА ""Неплатник""
									|                                 ИНАЧЕ ВЫРАЗИТЬ(НДСНалоговыеОбязательстваОбороты.Регистратор.Контрагент.НаименованиеПолное КАК СТРОКА (200))
									|                            КОНЕЦ
									|					ИНАЧЕ ВЫРАЗИТЬ(НДСНалоговыеОбязательстваОбороты.АналитикаУчетаПоПартнерам.Контрагент.НаименованиеПолное КАК СТРОКА(200)) 
									|			 КОНЕЦ) КАК	ИмяКонтрагента,			
									
									|	МАКСИМУМ(ВЫБОР КОГДА  НДСНалоговыеОбязательстваОбороты.Регистратор ССЫЛКА Документ.НалоговаяНакладная ИЛИ НДСНалоговыеОбязательстваОбороты.Регистратор ССЫЛКА Документ.Приложение2КНалоговойНакладной
									|					    ТОГДА 
									// ИНН контрагента определяем по правилам после 01.04.2016, приказ 1307
									|								ВЫБОР КОГДА НДСНалоговыеОбязательстваОбороты.Регистратор.ВидОперации В (&УслугиОтНерезидента) 
									|                              	   		ТОГДА ""500000000000""
									|									  КОГДА ЕстьNULL(НДСНалоговыеОбязательстваОбороты.ПродажаНижеОбычнойЦены, Ложь) = Истина
									|										ТОГДА &ИННОрганизации						
									|									  КОГДА НДСНалоговыеОбязательстваОбороты.Регистратор.ВидОперации = &СводнаяУсловнаяПродажа
									|                              	     	ТОГДА ""600000000000""
									|									  КОГДА НДСНалоговыеОбязательстваОбороты.Регистратор.ВидОперации В (&ОсобыеВидыОпераций)
									|                              	     	ТОГДА ВЫБОР КОГДА ЕстьNULL(НДСНалоговыеОбязательстваОбороты.Регистратор.НалоговаяНакладная.Сводная, НДСНалоговыеОбязательстваОбороты.Регистратор.Сводная) Тогда ""600000000000"" ИНАЧЕ ""400000000000"" КОНЕЦ
									|									  КОГДА Регистратор.ТипПричиныНевыдачиПокупателю = 1
									|                              	     	ТОГДА ""100000000000""
									|									  КОГДА Регистратор.ТипПричиныНевыдачиПокупателю = 12
									|                              	     	ТОГДА ""200000000000""
									|									  КОГДА Регистратор.ТипПричиныНевыдачиПокупателю = 7
									|                              	     	ТОГДА ""300000000000""
									|									  КОГДА ЕстьNULL(ПОДСТРОКА(НДСНалоговыеОбязательстваОбороты.Регистратор.Контрагент.ИННПлательщикаНДС,1,1), """") = """" 
									|                              	     	ТОГДА ""100000000000""
									|                              	   ИНАЧЕ НДСНалоговыеОбязательстваОбороты.Регистратор.Контрагент.ИННПлательщикаНДС
									|                            	КОНЕЦ
									|					ИНАЧЕ НДСНалоговыеОбязательстваОбороты.АналитикаУчетаПоПартнерам.Контрагент.ИННПлательщикаНДС 
									|			 КОНЕЦ) КАК	ИННКонтрагента,			
									|							
									
									|	МАКСИМУМ(ВЫБОР
									|		КОГДА НДСНалоговыеОбязательстваОбороты.Регистратор ССЫЛКА Документ.Приложение2КНалоговойНакладной
									|			ТОГДА НДСНалоговыеОбязательстваОбороты.Регистратор.НалоговаяНакладная
									|		ИНАЧЕ NULL
									|	КОНЕЦ) КАК ННизП2,
									
									|	МАКСИМУМ(ВЫБОР
									|		КОГДА НДСНалоговыеОбязательстваОбороты.Регистратор ССЫЛКА Документ.Приложение2КНалоговойНакладной
									|			ТОГДА ЕстьNULL(НДСНалоговыеОбязательстваОбороты.Регистратор.НалоговаяНакладная.Дата, НДСНалоговыеОбязательстваОбороты.Регистратор.Дата)
									|		ИНАЧЕ НДСНалоговыеОбязательстваОбороты.Регистратор.Дата
									|	КОНЕЦ) КАК ДатаННизП2,
									
									|	МАКСИМУМ(ВЫБОР КОГДА НДСНалоговыеОбязательстваОбороты.Регистратор ССЫЛКА Документ.НалоговаяНакладная ТОГДА НДСНалоговыеОбязательстваОбороты.Регистратор.ЛьготаНДСОписание КОНЕЦ) КАК ОперацияД6,
									|	МАКСИМУМ(ВЫБОР КОГДА НДСНалоговыеОбязательстваОбороты.Регистратор ССЫЛКА Документ.НалоговаяНакладная ТОГДА НДСНалоговыеОбязательстваОбороты.Регистратор.ЛьготаНДС КОНЕЦ) КАК СтатьяД6
									|	
									|ИЗ
									|	РегистрНакопления."+ИмяРегистраНО+" КАК НДСНалоговыеОбязательстваОбороты
									|ГДЕ
									|        НДСНалоговыеОбязательстваОбороты.АналитикаУчетаПоПартнерам.Организация = &Организация
									|   И    НДСНалоговыеОбязательстваОбороты.Активность
									|   И    НДСНалоговыеОбязательстваОбороты.Период >= &НачДата
									|   И    НДСНалоговыеОбязательстваОбороты.Период <= &КонДата
									//|	И НЕ ЕстьNULL(НДСНалоговыеОбязательстваОбороты.Регистратор.ВключаетсяВУточняющийРасчет, ЛОЖЬ)
									|	И 	 ЕстьNULL(НДСНалоговыеОбязательстваОбороты.Регистратор.ВключаетсяВУточняющийРасчет, ЛОЖЬ)
									|   И    &УточняемыйПериод = КОНЕЦПЕРИОДА(ЕстьNULL(НДСНалоговыеОбязательстваОбороты.Регистратор.ДатаОтгрузкиОплаты, ДАТАВРЕМЯ(1,1,1)), "+ТекПериодичность+")
									
									//|	И    (   ЕстьNULL(НДСНалоговыеОбязательстваОбороты.Регистратор.СпецРежимНалогообложения, 0) = &СпецРежим
									//|		   ИЛИ ВЫБОР КОГДА &СпецРежим = 0 ТОГДА ЕстьNULL(НДСНалоговыеОбязательстваОбороты.Регистратор.СпецРежимНалогообложения, 0) = 7 ИНАЧЕ ЛОЖЬ КОНЕЦ)
									|СГРУППИРОВАТЬ ПО 
		 							|   ЕстьNULL(НДСНалоговыеОбязательстваОбороты.Регистратор.СпецРежимНалогообложения, 0),
									|	НДСНалоговыеОбязательстваОбороты.Регистратор,
									|	НДСНалоговыеОбязательстваОбороты."+ИмяКолонкиНО+",
									|	НДСНалоговыеОбязательстваОбороты.АналитикаУчетаПоПартнерам.Организация,
									|	НДСНалоговыеОбязательстваОбороты.АналитикаУчетаПоПартнерам.Договор,
									|	НДСНалоговыеОбязательстваОбороты.ПродажаНижеОбычнойЦены,
									|	НДСНалоговыеОбязательстваОбороты.СтавкаНДС
									|";
									
		ТекстЗапросаНалоговыйКредит = "ВЫБРАТЬ
			 						  |   ЕстьNULL(НДСНалоговыйКредитОбороты.Регистратор.СпецРежимНалогообложения, 0) КАК СпецРежим,
									  |	НДСНалоговыйКредитОбороты.АналитикаУчетаПоПартнерам.Организация,
									  |	НДСНалоговыйКредитОбороты." + ИмяКолонкиНК + ",
									  |	НДСНалоговыйКредитОбороты.АналитикаУчетаПоПартнерам.Договор,
									  |	НДСНалоговыйКредитОбороты.СтавкаНДС,
									  |	МАКСИМУМ(НАЧАЛОПЕРИОДА(НДСНалоговыйКредитОбороты.Период, ДЕНЬ)) КАК Период,
									  |	НДСНалоговыйКредитОбороты.Регистратор,
									  |	НДСНалоговыйКредитОбороты.Регистратор.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
									  |	НДСНалоговыйКредитОбороты.Регистратор.ДатаВходящегоДокумента КАК ПериодСоставленияНН,
									  
									  |	НДСНалоговыйКредитОбороты.Регистратор.Дата КАК Дата,
									  |	СУММА(НДСНалоговыйКредитОбороты.СуммаБезНДС) КАК БазаНДСОборот,
									  |	СУММА(НДСНалоговыйКредитОбороты.СуммаНДС) КАК НДСОборот,
									  
									  |	МАКСИМУМ(НДСНалоговыйКредитОбороты.АналитикаУчетаПоПартнерам.Договор.МоментОпределенияБазыНДС) КАК МоментОпределенияПервогоСобытия,
									  
									  |	НДСНалоговыйКредитОбороты.Регистратор.Контрагент КАК Контрагент,
									  |	МАКСИМУМ(ВЫРАЗИТЬ(НДСНалоговыйКредитОбороты.АналитикаУчетаПоПартнерам.Контрагент.НаименованиеПолное КАК СТРОКА(1000))) КАК ИмяКонтрагента,
									  
									  | МАКСИМУМ(ВЫБОР КОГДА НДСНалоговыйКредитОбороты.Регистратор.ВидОперации = &ЗКПРаботыОтНерезидента
									  |		ТОГДА ""500000000000""
									  | ИНАЧЕ НДСНалоговыйКредитОбороты.АналитикаУчетаПоПартнерам.Контрагент.ИННПлательщикаНДС
									  | КОНЕЦ) КАК ИННКонтрагента,
									  
									  | НДСНалоговыйКредитОбороты.Регистратор.ДатаВходящегоДокумента  КАК ДатаНН,
									  |	МАКСИМУМ(ВЫБОР
									  |		КОГДА НДСНалоговыйКредитОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление." + ВидОперацииЗКП + ".РасчетКорректировкиВозврат)
									  |				ИЛИ НДСНалоговыйКредитОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление." + ВидОперацииЗКП + ".РасчетКорректировкиКорректировка)
									  |			ТОГДА ""КорректируемаяНН""
									  |		ИНАЧЕ NULL
									  |	КОНЕЦ) КАК ННизП2,
									  |	МАКСИМУМ(ВЫБОР
									  |		КОГДА НДСНалоговыйКредитОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление." + ВидОперацииЗКП + ".РасчетКорректировкиВозврат)
									  |				ИЛИ НДСНалоговыйКредитОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление." + ВидОперацииЗКП + ".РасчетКорректировкиКорректировка)
									  |			ТОГДА НДСНалоговыйКредитОбороты.Регистратор.ДатаКорректируемогоВходящегоДокумента
									  |		ИНАЧЕ NULL
									  |	КОНЕЦ) КАК ДатаННизП2,
									  |	МАКСИМУМ(ВЫБОР
									  |		КОГДА НДСНалоговыйКредитОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление." + ВидОперацииЗКП + ".ВосстановлениеНалоговогоКредита)
								      |		ТОГДА ИСТИНА
									  |		ИНАЧЕ ЛОЖЬ
									  |	КОНЕЦ) КАК ЭтоВосстановлениеНалоговогоКредита
									  |
									  |ИЗ
									  |РегистрНакопления."+ИмяРегистраНК+" КАК НДСНалоговыйКредитОбороты
									  |ГДЕ
									  |        НДСНалоговыйКредитОбороты.АналитикаУчетаПоПартнерам.Организация = &Организация
									  |   И    НДСНалоговыйКредитОбороты.Активность
									  |   И    НДСНалоговыйКредитОбороты.Период >= &НачДата
									  |   И    НДСНалоговыйКредитОбороты.Период <= &КонДата
									  //|	И НЕ ЕстьNULL(НДСНалоговыйКредитОбороты.Регистратор.ВключаетсяВУточняющийРасчет, ЛОЖЬ)
									  |	  И    ЕстьNULL(НДСНалоговыйКредитОбороты.Регистратор.ВключаетсяВУточняющийРасчет, ЛОЖЬ)
									  |   И    &УточняемыйПериод = КОНЕЦПЕРИОДА(ЕстьNULL(НДСНалоговыйКредитОбороты.Регистратор.ДатаОтгрузкиОплаты, ДАТАВРЕМЯ(1,1,1)), "+ТекПериодичность+")
									  
									  //|	И ЕстьNULL(НДСНалоговыйКредитОбороты.Регистратор.СпецРежимНалогообложения, 0) = &СпецРежим
									  |СГРУППИРОВАТЬ ПО 
			 						  |   ЕстьNULL(НДСНалоговыйКредитОбороты.Регистратор.СпецРежимНалогообложения, 0),
									  |	НДСНалоговыйКредитОбороты.АналитикаУчетаПоПартнерам.Организация,
									  |	НДСНалоговыйКредитОбороты." + ИмяКолонкиНК + ",
									  |	НДСНалоговыйКредитОбороты.АналитикаУчетаПоПартнерам.Договор,
									  |	НДСНалоговыйКредитОбороты.СтавкаНДС,
									  |	НАЧАЛОПЕРИОДА(НДСНалоговыйКредитОбороты.Период, ДЕНЬ),
									  |	НДСНалоговыйКредитОбороты.Регистратор
									  |";
									  
	Иначе
		ТекстЗапросаНалоговыеОбва = "ВЫБРАТЬ
			 						  |   ЕстьNULL(НДСНалоговыеОбязательстваОбороты.Регистратор.СпецРежимНалогообложения, 0) КАК СпецРежим,
									
									|	НДСНалоговыеОбязательстваОбороты.Регистратор КАК Регистратор,
									|	НДСНалоговыеОбязательстваОбороты."+ИмяКолонкиНО+" КАК "+ИмяКолонкиНО+",
									|	НДСНалоговыеОбязательстваОбороты.Организация КАК Организация,
									|	НДСНалоговыеОбязательстваОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
									
									|	МАКСИМУМ(НДСНалоговыеОбязательстваОбороты.ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПродажам) КАК МоментОпределенияПервогоСобытия,
									
									|	НДСНалоговыеОбязательстваОбороты.СтавкаНДС КАК СтавкаНДС,
									|	НДСНалоговыеОбязательстваОбороты.ПродажаНижеОбычнойЦены КАК ПродажаНижеОбычнойЦены,
									
									|	МАКСИМУМ(ЕстьNULL(НДСНалоговыеОбязательстваОбороты.Регистратор.СпецРежимНалогообложения, 0)) КАК СпецРежимНалогообложения,
									
									|	МАКСИМУМ(НДСНалоговыеОбязательстваОбороты.Регистратор.Дата) КАК ПериодСоставленияНН,
									|   МАКСИМУМ(ВЫБОР КОГДА НДСНалоговыеОбязательстваОбороты.Регистратор.ВидОперации В (&УсловнаяПродажа) ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ) КАК ЭтоУсловнаяПродажа,
									
									|	СУММА(НДСНалоговыеОбязательстваОбороты.БазаНДС) КАК БазаНДСОборот,
									|	СУММА(НДСНалоговыеОбязательстваОбороты.НДС)     КАК НДСОборот,
									
									|	МАКСИМУМ(НАЧАЛОПЕРИОДА(НДСНалоговыеОбязательстваОбороты.Период, ДЕНЬ)) КАК Период,
									|	МАКСИМУМ(ВЫРАЗИТЬ(НДСНалоговыеОбязательстваОбороты.Регистратор.Комментарий КАК Строка(200))) КАК Комментарий,
									
									
									|	МАКСИМУМ(ВЫБОР КОГДА     НДСНалоговыеОбязательстваОбороты.Регистратор ССЫЛКА Документ.НалоговаяНакладная 
									|               ИЛИ НДСНалоговыеОбязательстваОбороты.Регистратор ССЫЛКА Документ.Приложение2КНалоговойНакладной 
									|	    ТОГДА ВЫБОР КОГДА НДСНалоговыеОбязательстваОбороты.Регистратор.ВидОперации В (&ОсобыеВидыОпераций) 
									|					  ТОГДА """"
									|					  ИНАЧЕ НДСНалоговыеОбязательстваОбороты.Регистратор.Контрагент
									|			  КОНЕЦ 
									|		ИНАЧЕ НДСНалоговыеОбязательстваОбороты.ДоговорКонтрагента.Владелец 
									|	КОНЕЦ) КАК Контрагент,
									
									|	МАКСИМУМ(ВЫБОР КОГДА  НДСНалоговыеОбязательстваОбороты.Регистратор ССЫЛКА Документ.НалоговаяНакладная ИЛИ НДСНалоговыеОбязательстваОбороты.Регистратор ССЫЛКА Документ.Приложение2КНалоговойНакладной
									|					    ТОГДА 
									|							ВЫБОР КОГДА НДСНалоговыеОбязательстваОбороты.Регистратор.ВидОперации В (&ОсобыеВидыОпераций)
									|                                   ТОГДА &НаименованиеОрганизации
									|								  КОГДА ЕстьNULL(ПОДСТРОКА(НДСНалоговыеОбязательстваОбороты.Регистратор.Контрагент.ИНН,1,1), """") = """" 
									|                                   ТОГДА ""Неплатник""
									|                                 ИНАЧЕ ВЫРАЗИТЬ(НДСНалоговыеОбязательстваОбороты.Регистратор.Контрагент.НаименованиеПолное КАК СТРОКА (200))
									|                            КОНЕЦ
									|					ИНАЧЕ ВЫРАЗИТЬ(НДСНалоговыеОбязательстваОбороты.ДоговорКонтрагента.Владелец.НаименованиеПолное КАК СТРОКА(200)) 
									|			 КОНЕЦ) КАК	ИмяКонтрагента,			
									
									|	МАКСИМУМ(ВЫБОР КОГДА  НДСНалоговыеОбязательстваОбороты.Регистратор ССЫЛКА Документ.НалоговаяНакладная ИЛИ НДСНалоговыеОбязательстваОбороты.Регистратор ССЫЛКА Документ.Приложение2КНалоговойНакладной
									|					    ТОГДА 
									// ИНН контрагента определяем по правилам после 01.04.2016, приказ 1307
									|								ВЫБОР КОГДА НДСНалоговыеОбязательстваОбороты.Регистратор.ВидОперации В (&УслугиОтНерезидента) 
									|                              	   		ТОГДА ""500000000000""
									|									  КОГДА ЕстьNULL(НДСНалоговыеОбязательстваОбороты.ПродажаНижеОбычнойЦены, Ложь) = Истина
									|										ТОГДА &ИННОрганизации						
									|									  КОГДА НДСНалоговыеОбязательстваОбороты.Регистратор.ВидОперации В (&ОсобыеВидыОпераций)
									|                              	     	ТОГДА ВЫБОР КОГДА ЕстьNULL(НДСНалоговыеОбязательстваОбороты.Регистратор.НалоговаяНакладная.Сводная, НДСНалоговыеОбязательстваОбороты.Регистратор.Сводная) Тогда ""600000000000"" ИНАЧЕ ""400000000000"" КОНЕЦ
									////|                              	    ТОГДА ВЫБОР КОГДА НДСНалоговыеОбязательстваОбороты.Регистратор.Сводная Тогда ""600000000000"" ИНАЧЕ ""400000000000"" КОНЕЦ
									|									  КОГДА Регистратор.ТипПричиныНевыдачиПокупателю = 1
									|                              	     	ТОГДА ""100000000000""
									|									  КОГДА Регистратор.ТипПричиныНевыдачиПокупателю = 12
									|                              	     	ТОГДА ""200000000000""
									|									  КОГДА Регистратор.ТипПричиныНевыдачиПокупателю = 7
									|                              	     	ТОГДА ""300000000000""
									|									  КОГДА ЕстьNULL(ПОДСТРОКА(НДСНалоговыеОбязательстваОбороты.Регистратор.Контрагент.ИНН,1,1), """") = """" 
									|                              	     	ТОГДА ""100000000000""
									|                              	   ИНАЧЕ НДСНалоговыеОбязательстваОбороты.Регистратор.Контрагент.ИНН
									|                            	КОНЕЦ
									//===============================================  
									|					ИНАЧЕ НДСНалоговыеОбязательстваОбороты.ДоговорКонтрагента.Владелец.ИНН 
									|			 КОНЕЦ) КАК	ИННКонтрагента,			
									|							
									
									|	МАКСИМУМ(ВЫБОР
									|		КОГДА НДСНалоговыеОбязательстваОбороты.Регистратор ССЫЛКА Документ.Приложение2КНалоговойНакладной
									|			ТОГДА НДСНалоговыеОбязательстваОбороты.Регистратор.НалоговаяНакладная
									|		ИНАЧЕ NULL
									|	КОНЕЦ) КАК ННизП2,
									
									|	МАКСИМУМ(ВЫБОР
									|		КОГДА НДСНалоговыеОбязательстваОбороты.Регистратор ССЫЛКА Документ.Приложение2КНалоговойНакладной
									|			ТОГДА ЕстьNULL(НДСНалоговыеОбязательстваОбороты.Регистратор.НалоговаяНакладная.Дата, НДСНалоговыеОбязательстваОбороты.Регистратор.Дата)
									|		ИНАЧЕ НДСНалоговыеОбязательстваОбороты.Регистратор.Дата
									|	КОНЕЦ) КАК ДатаННизП2,
									
									|	МАКСИМУМ(ВЫБОР КОГДА НДСНалоговыеОбязательстваОбороты.Регистратор ССЫЛКА Документ.НалоговаяНакладная ТОГДА НДСНалоговыеОбязательстваОбороты.Регистратор.ЛьготаНДСОписание КОНЕЦ) КАК ОперацияД6,
									|	МАКСИМУМ(ВЫБОР КОГДА НДСНалоговыеОбязательстваОбороты.Регистратор ССЫЛКА Документ.НалоговаяНакладная ТОГДА НДСНалоговыеОбязательстваОбороты.Регистратор.ЛьготаНДС КОНЕЦ) КАК СтатьяД6
									|	
									|ИЗ
									|	РегистрНакопления."+ИмяРегистраНО+" КАК НДСНалоговыеОбязательстваОбороты
									|ГДЕ
									|        НДСНалоговыеОбязательстваОбороты.Организация = &Организация
									|   И    НДСНалоговыеОбязательстваОбороты.Активность
									|   И    НДСНалоговыеОбязательстваОбороты.Период >= &НачДата
									|   И    НДСНалоговыеОбязательстваОбороты.Период <= &КонДата
									//|	И НЕ ЕстьNULL(НДСНалоговыеОбязательстваОбороты.Регистратор.ВключаетсяВУточняющийРасчет, ЛОЖЬ)
									
									|	И    ЕстьNULL(НДСНалоговыеОбязательстваОбороты.Регистратор.ВключаетсяВУточняющийРасчет, ЛОЖЬ)
									|   И    &УточняемыйПериод = КОНЕЦПЕРИОДА(ЕстьNULL(НДСНалоговыеОбязательстваОбороты.Регистратор.УточняемыйПериод, ДАТАВРЕМЯ(1,1,1)), "+ТекПериодичность+")
									
									//|	И    (   ЕстьNULL(НДСНалоговыеОбязательстваОбороты.Регистратор.СпецРежимНалогообложения, 0) = &СпецРежим
									//|		   ИЛИ ВЫБОР КОГДА &СпецРежим = 0 ТОГДА ЕстьNULL(НДСНалоговыеОбязательстваОбороты.Регистратор.СпецРежимНалогообложения, 0) = 7 ИНАЧЕ ЛОЖЬ КОНЕЦ)
									|СГРУППИРОВАТЬ ПО 
			 						|   ЕстьNULL(НДСНалоговыеОбязательстваОбороты.Регистратор.СпецРежимНалогообложения, 0),
									|	НДСНалоговыеОбязательстваОбороты.Регистратор,
									|	НДСНалоговыеОбязательстваОбороты."+ИмяКолонкиНО+",
									|	НДСНалоговыеОбязательстваОбороты.Организация,
									|	НДСНалоговыеОбязательстваОбороты.ДоговорКонтрагента,
									|	НДСНалоговыеОбязательстваОбороты.ПродажаНижеОбычнойЦены,
									|	НДСНалоговыеОбязательстваОбороты.СтавкаНДС
									|";
									
		ТекстЗапросаНалоговыйКредит = "ВЫБРАТЬ
			 						  |   ЕстьNULL(НДСНалоговыйКредитОбороты.Регистратор.СпецРежимНалогообложения, 0) КАК СпецРежим,
									  |	НДСНалоговыйКредитОбороты.Организация,
									  |	НДСНалоговыйКредитОбороты." + ИмяКолонкиНК + ",
									  |	НДСНалоговыйКредитОбороты.ДоговорКонтрагента,
									  |	НДСНалоговыйКредитОбороты.СтавкаНДС,
									  |	МАКСИМУМ(НАЧАЛОПЕРИОДА(НДСНалоговыйКредитОбороты.Период, ДЕНЬ)) КАК Период,
									  |	НДСНалоговыйКредитОбороты.Регистратор,
									  |	НДСНалоговыйКредитОбороты.Регистратор.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
									  |	НДСНалоговыйКредитОбороты.Регистратор.ДатаВходящегоДокумента КАК ПериодСоставленияНН,
									  
									  |	НДСНалоговыйКредитОбороты.Регистратор.Дата КАК Дата,
									  |	СУММА(НДСНалоговыйКредитОбороты.БазаНДС) КАК БазаНДСОборот,
									  |	СУММА(НДСНалоговыйКредитОбороты.НДС) КАК НДСОборот,
									  
									  |	МАКСИМУМ(НДСНалоговыйКредитОбороты.ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПродажам) КАК МоментОпределенияПервогоСобытия,
									  
									  |	НДСНалоговыйКредитОбороты.ДоговорКонтрагента.Владелец КАК Контрагент,
									  |	МАКСИМУМ(ВЫРАЗИТЬ(НДСНалоговыйКредитОбороты.ДоговорКонтрагента.Владелец.НаименованиеПолное КАК СТРОКА(1000))) КАК ИмяКонтрагента,
									  
									  //|	НДСНалоговыйКредитОбороты.ДоговорКонтрагента.Владелец.ИНН КАК ИННКонтрагента,
									  | МАКСИМУМ(ВЫБОР КОГДА НДСНалоговыйКредитОбороты.Регистратор.ВидОперации = &ЗКПРаботыОтНерезидента
									  |		ТОГДА ""500000000000""
									  | ИНАЧЕ НДСНалоговыйКредитОбороты.ДоговорКонтрагента.Владелец.ИНН
									  | КОНЕЦ) КАК ИННКонтрагента,
									  
									  | НДСНалоговыйКредитОбороты.Регистратор.ДатаВходящегоДокумента  КАК ДатаНН,
									  |	МАКСИМУМ(ВЫБОР
									  |		КОГДА НДСНалоговыйКредитОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление." + ВидОперацииЗКП + ".РасчетКорректировкиВозврат)
									  |				ИЛИ НДСНалоговыйКредитОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление." + ВидОперацииЗКП + ".РасчетКорректировкиКорректировка)
									  |			ТОГДА ""КорректируемаяНН""
									  |		ИНАЧЕ NULL
									  |	КОНЕЦ) КАК ННизП2,
									  |	МАКСИМУМ(ВЫБОР
									  |		КОГДА НДСНалоговыйКредитОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление." + ВидОперацииЗКП + ".РасчетКорректировкиВозврат)
									  |				ИЛИ НДСНалоговыйКредитОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление." + ВидОперацииЗКП + ".РасчетКорректировкиКорректировка)
									  |			ТОГДА НДСНалоговыйКредитОбороты.Регистратор.ДатаКорректируемогоВходящегоДокумента
									  |		ИНАЧЕ NULL
									  |	КОНЕЦ) КАК ДатаННизП2,
									  |	МАКСИМУМ(ВЫБОР
									  |		КОГДА НДСНалоговыйКредитОбороты.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление." + ВидОперацииЗКП + ".ВосстановлениеНалоговогоКредита)
								      |		ТОГДА ИСТИНА
									  |		ИНАЧЕ ЛОЖЬ
									  |	КОНЕЦ) КАК ЭтоВосстановлениеНалоговогоКредита
									  |
									  |ИЗ
									  |РегистрНакопления."+ИмяРегистраНК+" КАК НДСНалоговыйКредитОбороты
									  |ГДЕ
									  |        НДСНалоговыйКредитОбороты.Организация = &Организация
									  |   И    НДСНалоговыйКредитОбороты.Активность
									  |   И    НДСНалоговыйКредитОбороты.Период >= &НачДата
									  |   И    НДСНалоговыйКредитОбороты.Период <= &КонДата
									  //|	И НЕ ЕстьNULL(НДСНалоговыйКредитОбороты.Регистратор.ВключаетсяВУточняющийРасчет, ЛОЖЬ)
									  |	  И  ЕстьNULL(НДСНалоговыйКредитОбороты.Регистратор.ВключаетсяВУточняющийРасчет, ЛОЖЬ)
									  |   И  &УточняемыйПериод = КОНЕЦПЕРИОДА(ЕстьNULL(НДСНалоговыйКредитОбороты.Регистратор.УточняемыйПериод, ДАТАВРЕМЯ(1,1,1)), "+ТекПериодичность+")
									  //|	И ЕстьNULL(НДСНалоговыйКредитОбороты.Регистратор.СпецРежимНалогообложения, 0) = &СпецРежим
									  |СГРУППИРОВАТЬ ПО 
									  | ЕстьNULL(НДСНалоговыйКредитОбороты.Регистратор.СпецРежимНалогообложения, 0),
									  |	НДСНалоговыйКредитОбороты.Организация,
									  |	НДСНалоговыйКредитОбороты." + ИмяКолонкиНК + ",
									  |	НДСНалоговыйКредитОбороты.ДоговорКонтрагента,
									  |	НДСНалоговыйКредитОбороты.СтавкаНДС,
									  |	НАЧАЛОПЕРИОДА(НДСНалоговыйКредитОбороты.Период, ДЕНЬ),
									  |	НДСНалоговыйКредитОбороты.Регистратор
									  |";
									  
  	КонецЕсли;
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр ("НачДата",СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр ("СпецРежим",СтруктураРеквизитовФормы.СпецРежим);

	//Если СтруктураРеквизитовФормы.ОтчетЗаДваМесяца Тогда
	//	Запрос.УстановитьПараметр ("НачДата",ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, -1));	
	//КонецЕсли;
	Запрос.УстановитьПараметр ("УточняемыйПериод",УточняемыйПериод);

	Запрос.УстановитьПараметр ("КонДата",СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Запрос.УстановитьПараметр ("Организация",СтруктураРеквизитовФормы.Организация);
	
	Запрос.УстановитьПараметр("НаименованиеОрганизации", Лев(СокрЛП(СтруктураРеквизитовФормы.Организация.НаименованиеПолное), 200));
	Запрос.УстановитьПараметр("ИННОрганизации",			 СтруктураДанныхДекларация.HNPDV);
	Запрос.УстановитьПараметр("ЗКПРаботыОтНерезидента",  Перечисления[ВидОперацииЗКП].РаботыОтНерезидентаПрошлогоПериода);
	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "ЕРП" Тогда
		Запрос.УстановитьПараметр("СводнаяУсловнаяПродажа",  Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа);
	КонецЕсли;
	
	ТекстЗапросаНалоговыеОбва = СтрЗаменить(ТекстЗапросаНалоговыеОбва, "//#ЭтоБП", "");
	Запрос.УстановитьПараметр("ВалютаРеглУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "ЕРП" Тогда
		ОсобыеОперации = Новый Массив();
		ОсобыеОперации.Добавить(Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа);
		ОсобыеОперации.Добавить(Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа);
		ОсобыеОперации.Добавить(Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента);
		Запрос.УстановитьПараметр ("ОсобыеВидыОпераций",ОсобыеОперации);
		
		УсловнаяПродажа = Новый Массив();
		УсловнаяПродажа.Добавить(Перечисления.ВидыОперацийНалоговыхДокументов.УсловнаяПродажа);
		УсловнаяПродажа.Добавить(Перечисления.ВидыОперацийНалоговыхДокументов.СводнаяУсловнаяПродажа);
		Запрос.УстановитьПараметр ("УсловнаяПродажа", УсловнаяПродажа);
		
		УслугиОтНерезидента = Новый Массив();
		УслугиОтНерезидента.Добавить(Перечисления.ВидыОперацийНалоговыхДокументов.РаботыОтНерезидента);
		Запрос.УстановитьПараметр ("УслугиОтНерезидента",УслугиОтНерезидента);
			
	Иначе	
		ОсобыеОперации = Новый Массив();
		ОсобыеОперации.Добавить(Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа);
		ОсобыеОперации.Добавить(Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС);	  
		ОсобыеОперации.Добавить(Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента);
		ОсобыеОперации.Добавить(Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка);
		ОсобыеОперации.Добавить(Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат);
		Запрос.УстановитьПараметр ("ОсобыеВидыОпераций",ОсобыеОперации);
		
		УсловнаяПродажа = Новый Массив();
		УсловнаяПродажа.Добавить(Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажа);
		УсловнаяПродажа.Добавить(Перечисления.ВидыОперацийНалоговаяНакладная.УсловнаяПродажаСписаниеОС);
		УсловнаяПродажа.Добавить(Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.УсловнаяПродажаВозврат);
		Запрос.УстановитьПараметр ("УсловнаяПродажа", УсловнаяПродажа);
		
		
		УслугиОтНерезидента = Новый Массив();
		УслугиОтНерезидента.Добавить(Перечисления.ВидыОперацийНалоговаяНакладная.РаботыОтНерезидента);
		УслугиОтНерезидента.Добавить(Перечисления.ВидыОперацийПриложение2КНалоговойНакладной.РаботыОтНерезидентаКорректировка);
		Запрос.УстановитьПараметр ("УслугиОтНерезидента",УслугиОтНерезидента);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаНалоговыеОбва;
    ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
	
	//І. Податкові зобов'язання 
	// ст. 1 и 4 и приложение 5 (1-я таблица)
	R11GA = 0;
	R11GB = 0;
	R12GA = 0;
	R12GB = 0;
	
	R41GA = 0;
	R41GB = 0;
	R42GA = 0;
	R42GB = 0;

	// Поставка ОС в приложении 5, табл.  
	R011G4 = 0;
	R011G5 = 0;
	
	// Поставка с/х производителей
	R012G4  = 0;
	R012G5  = 0;
	
	// пропорциональные НДС из ГТД должен отражать в 11 строке
	R111GA = 0;
	R111GB = 0;
	R112GA = 0;
	R112GB = 0;
	
	МассивНужныхСтатей = Новый Массив; 
	МассивНужныхСтатей.Добавить(СтрокиДекларацииНДС.НДС_НОПоСтавке20);
	МассивНужныхСтатей.Добавить(СтрокиДекларацииНДС.НДС_НОПоСтавке20ПоставкаОФ);
	
	ПодготовитьДанныеДляПриложения5ВРазрезеКонтрагентов(ТаблицаРезультатов,МассивНужныхСтатей,ИмяКолонкиНО,СтруктураРеквизитовФормы.мИдГруппы51);
	
	СтруктураДанныхДекларация.R11GA = R11GA;
	СтруктураДанныхДекларация.R12GA = R12GA;
	СтруктураДанныхДекларация.R11GB = R11GB;
	СтруктураДанныхДекларация.R12GB = R12GB;
	
	//СтруктураДанныхДекларация.R41GA = R41GA;
	//СтруктураДанныхДекларация.R42GA = R42GA;
	//СтруктураДанныхДекларация.R41GB = R41GB;
	//СтруктураДанныхДекларация.R42GB = R42GB;
	
	СтруктураДанныхПриложение5.R011G4 = R011G4;
	СтруктураДанныхПриложение5.R011G5 = R011G5;
	
	СтруктураДанныхПриложение5.R012G4 = R012G4;
	СтруктураДанныхПриложение5.R012G5 = R012G5;
	
	// 2
	//експортні операції							
	НужнаяСтатья =  СтрокиДекларацииНДС.НДС_НОПоСтавке0Экспорт;
	R20GA = 0;
	РасчетПоСтатье(НужнаяСтатья,R20GA,0,"R20GA","",1);
	
	// 3	
	//інші операції, що оподатковуються за нульовою ставкою:
	НужнаяСтатья =  СтрокиДекларацииНДС.НДС_НОПоСтавке0Другие;
	R30GA = 0;
	РасчетПоСтатье(НужнаяСтатья,R30GA,0,"R30GA","",1);
	
	// 5 
	//Операції, що не є об'єктом оподаткування и другие без НДС-ные операции
	НужнаяСтатья =  СтрокиДекларацииНДС.НДС_НОНеОбъектНалог;
	ПодготовитьДанныеДляСправки(ТаблицаРезультатов,ИмяКолонкиНО,НужнаяСтатья,СтруктураРеквизитовФормы.мИдГруппыС1);
	
	НужнаяСтатья =  СтрокиДекларацииНДС.НДС_НОУслугиВнеУкраины;
	ПодготовитьДанныеДляСправки(ТаблицаРезультатов,ИмяКолонкиНО,НужнаяСтатья,СтруктураРеквизитовФормы.мИдГруппыС2);
	
	НужнаяСтатья =  СтрокиДекларацииНДС.НДС_НООсвобожден;
	ПодготовитьДанныеДляСправки(ТаблицаРезультатов,ИмяКолонкиНО,НужнаяСтатья,СтруктураРеквизитовФормы.мИдГруппыС3);
	
	// 6.Роботи (послуги), отримані від нерезидента на митній території України
	R60GA = 0;
	R60GB = 0;
	НужнаяСтатья =  СтрокиДекларацииНДС.НДС_НОНерезидентУслуги;
	// услуги от нерезидента могут быть только по ставке 20%
	// и отражаются вместе с корректировками в Приложении 1.
	РасчетПоСтатье(НужнаяСтатья,R60GA,R60GB,"R60GA","R60GB",1);
	
	// 7 + ПРИЛОЖЕНИЕ 1
	R011G4 = 0;
	R011G5 = 0;
	R011G6 = 0;
	R011G7 = 0;
	
	R012G4 = 0;
	R012G4_20 = 0;
	R012G4_7  = 0;
	R012G5 = 0;
	R012G6 = 0;
	R012G7 = 0;
	
	МассивСтатей = Новый Массив;
	МассивСтатей.Добавить(СтрокиДекларацииНДС.НДС_НОИзменениеСтоимости);
	МассивСтатей.Добавить(СтрокиДекларацииНДС.НДС_НОКорректировкаТрансфЦенообразование);
	ПодготовитьДанныеДляПриложения1ВРазрезеКонтрагентов(ТаблицаРезультатов,ИмяКолонкиНО,МассивСтатей,"НО");
	
	// данные по СХ Операциям
	СтруктураДанныхПриложение1.R011G4 = R011G4; 
	СтруктураДанныхПриложение1.R011G5 = R011G5; 
	СтруктураДанныхПриложение1.R011G6 = R011G6; 
	СтруктураДанныхПриложение1.R011G7 = R011G7; 
	// сводные условные продажи (код 60000000000) вместе с корректирвами
	СтруктураДанныхПриложение1.R012G4 = R012G4_20 + R012G4_7 + R012G7; 
	СтруктураДанныхПриложение1.R012G5 = R012G5; 
	СтруктураДанныхПриложение1.R012G6 = R012G6; 
	СтруктураДанныхПриложение1.R012G7 = R012G7; 
	СтруктураДанныхДекларация.R41GA =  R41GA + R012G4_20;
	СтруктураДанныхДекларация.R42GA =  R42GA + R012G4_7;
	СтруктураДанныхДекларация.R41GB =  R41GB + R012G5;
	СтруктураДанныхДекларация.R42GB =  R42GB + R012G6;
	
	// теоретически возможные корректировки по услугам нерезидентов 
	СтруктураДанныхПриложение1.R013G4 = R60GA; 
	СтруктураДанныхПриложение1.R013G5 = R60GB; 
	
	
	// 8
	//нецільове використання товарів, ввезених у пільговому режимі	
	R80GA = 0;
	R80GB = 0;
	НужнаяСтатья =  СтрокиДекларацииНДС.НДС_НОКорректировкаНецелевоеИсп;
	РасчетПоСтатье(НужнаяСтатья,R80GA,R80GB,"R80GA","R80GB",1);
	
	
	//////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////
	//налоговий кредит
	
	Запрос.Текст = ТекстЗапросаНалоговыйКредит;
	ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
	
	//10
	R101GA = 0;
	R101GB = 0;
	R102GA = 0;
	R102GB = 0;
	
	R103GA = 0;
	
	R021G4 = 0;
	R021G5 = 0; 
	
	МассивНужныхСтатейНК = Новый Массив; 
	МассивНужныхСтатейНК.Добавить(СтрокиДекларацииНДС.НДС_НКПокупкаСНДСвВРОблаг);
	МассивНужныхСтатейНК.Добавить(СтрокиДекларацииНДС.НДС_НКПокупкаСНДСвВРОблагПриобрОФ);
	
	МассивНужныхСтатейНК.Добавить(СтрокиДекларацииНДС.НДС_НКПокупкаСНДСвВРНеОблаг);
	МассивНужныхСтатейНК.Добавить(СтрокиДекларацииНДС.НДС_НКПокупкаСНДСвВРНеОблагУслугВнеУкраины);
	МассивНужныхСтатейНК.Добавить(СтрокиДекларацииНДС.НДС_НКПокупкаСНДСнеВР_);
	МассивНужныхСтатейНК.Добавить(СтрокиДекларацииНДС.НДС_НКПропорциональноНеВклВКредит);
	МассивНужныхСтатейНК.Добавить(СтрокиДекларацииНДС.НДС_НКПропорциональноНеВклВКредитПоставкаОФ);
	
	МассивНужныхСтатейНК.Добавить(СтрокиДекларацииНДС.НДС_НКПокупкаБезНДСвВРОблаг);
	МассивНужныхСтатейНК.Добавить(СтрокиДекларацииНДС.НДС_НКПокупкаБезНДСвВРНеОблаг);
	МассивНужныхСтатейНК.Добавить(СтрокиДекларацииНДС.НДС_НКПокупкаБезНДСвВРНеОблагУслугВнеУкраины);
	
	МассивНужныхСтатейНК.Добавить(СтрокиДекларацииНДС.НДС_НКПокупкаБезНДСнеВР_);
	МассивНужныхСтатейНК.Добавить(СтрокиДекларацииНДС.НДС_НКПропорциональноВклВКредит);
	МассивНужныхСтатейНК.Добавить(СтрокиДекларацииНДС.НДС_НКПропорциональноВклВКредитПоставкаОФ);
	
	ПодготовитьДанныеДляПриложения5ВРазрезеКонтрагентов(ТаблицаРезультатов,МассивНужныхСтатейНК,ИмяКолонкиНК,СтруктураРеквизитовФормы.мИдГруппы52);
	
	СтруктураДанныхДекларация.R101GA =  R101GA;
	СтруктураДанныхДекларация.R101GB =  R101GB;
	СтруктураДанныхДекларация.R102GA =  R102GA;
	СтруктураДанныхДекларация.R102GB =  R102GB;
	
	СтруктураДанныхДекларация.R103GA =  R103GA;
	
	СтруктураДанныхПриложение5.R021G4 = R021G4; 
	СтруктураДанныхПриложение5.R021G5 = R021G5; 
	
	//11 ПДВ, сплачений митним органам
	МассивСтатей = Новый Массив;
	МассивСтатей.Добавить(СтрокиДекларацииНДС.НДС_НКИмпортВРОблагНДСТамож);
	МассивСтатей.Добавить(СтрокиДекларацииНДС.НДС_НКИмпортВРОблагБезНДС);
	МассивСтатей.Добавить(СтрокиДекларацииНДС.НДС_НКИмпортВРНеОблагНеОбъектНДСТамож);
	МассивСтатей.Добавить(СтрокиДекларацииНДС.НДС_НКИмпортВРНеОблагНеОбъектНДСТаможУслугВнеУкраины);
	МассивСтатей.Добавить(СтрокиДекларацииНДС.НДС_НКИмпортВРНеОблагНеОбъектБезНДС);
	МассивСтатей.Добавить(СтрокиДекларацииНДС.НДС_НКИмпортВРНеОблагНеОбъектБезНДСУслугВнеУкраины);
	// по операциям импорта отражаются только операции с НДС
	ДопСтруктураПоиска = Новый Структура();
	ДопСтруктураПоиска.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.НДС20);
	РасчетПоСтатье(МассивСтатей,R111GA,R111GB,"R111GA","R111GB",0, ДопСтруктураПоиска);
	
	ДопСтруктураПоиска = Новый Структура();
	ДопСтруктураПоиска.Вставить("СтавкаНДС", Перечисления.СтавкиНДС.НДС7);
	РасчетПоСтатье(МассивСтатей,R112GA,R112GB,"R112GA","R112GB",0, ДопСтруктураПоиска);
	
	//12	погашені податкові векселі, що дають право на збільшення податкового кредиту в 
	//поточному звітному періоді							
	R120GA = 0;
	R120GB = 0;
	НужнаяСтатья =  СтрокиДекларацииНДС.НДС_НКИмпортВРОблагВексель;
	РасчетПоСтатье(НужнаяСтатья,R120GA,R120GB,"R120GA","R120GB",0);
	
	//13	роботи (послуги), отримані від нерезидента							
	R130GA = 0;
	R130GB = 0;
	НужнаяСтатья = Новый Массив;
	НужнаяСтатья.Добавить(СтрокиДекларацииНДС.НДС_НКИмпортВРОблагУслугиНерезидента);
	НужнаяСтатья.Добавить(СтрокиДекларацииНДС.НДС_НКИмпортВРНеОблагНеОбъектУслугиНерезидента);
	НужнаяСтатья.Добавить(СтрокиДекларацииНДС.НДС_НКИмпортВРНеОблагНеОбъектУслугиНерезидентаУслугВнеУкраины);
	РасчетПоСтатье(НужнаяСтатья,R130GA,R130GB,"R130GA","R130GB",0);
	
	//12 
	// корректировка налогового кредита
	R021G4 = 0;
	R021G5 = 0;
	НужнаяСтатья = Новый Массив;
	НужнаяСтатья.Добавить(СтрокиДекларацииНДС.НДС_НКИзменениеСтоимости);
	НужнаяСтатья.Добавить(СтрокиДекларацииНДС.НДС_НКИзменениеСтоимостиБезНК);
	НужнаяСтатья.Добавить(СтрокиДекларацииНДС.НДС_НККорректировкаБезНК);
	НужнаяСтатья.Добавить(СтрокиДекларацииНДС.НДС_НККорректировкаБезНКНеХоз);
	НужнаяСтатья.Добавить(СтрокиДекларацииНДС.НДС_НККорректировкаБезНКДляУслугВнеУкраины);
	НужнаяСтатья.Добавить(СтрокиДекларацииНДС.НДС_НККорректировкаПропорциональноВклВКредит);
	НужнаяСтатья.Добавить(СтрокиДекларацииНДС.НДС_НККорректировкаПропорциональноВклВКредитПоставкаОФ);
	НужнаяСтатья.Добавить(СтрокиДекларацииНДС.НДС_НККорректировкаПропорциональноНеВклВКредит);
	НужнаяСтатья.Добавить(СтрокиДекларацииНДС.НДС_НККорректировкаПропорциональноНеВклВКредитПоставкаОФ);
	НужнаяСтатья.Добавить(СтрокиДекларацииНДС.НДС_НККорректировкаТрансфЦенообразование);
	НужнаяСтатья.Добавить(СтрокиДекларацииНДС.НДС_НККорректировкаВосстановлениеКредита);
	НужнаяСтатья.Добавить(СтрокиДекларацииНДС.НДС_НККорректировкаВосстановлениеКредитаПропорциональноВклВКредит);
	НужнаяСтатья.Добавить(СтрокиДекларацииНДС.НДС_НККорректировкаВосстановлениеКредитаПропорциональноНеВклВКредит);
	
	ПодготовитьДанныеДляПриложения1ВРазрезеКонтрагентов(ТаблицаРезультатов,ИмяКолонкиНК,НужнаяСтатья,"НК");
	
	СтруктураДанныхПриложение1.R021G4 = R021G4; 
	СтруктураДанныхПриложение1.R021G5 = R021G5; 
	// учтем теоретически возвможные корректировки по услугам нерезидентов
	СтруктураДанныхПриложение1.R023G4 = R130GA;
	СтруктураДанныхПриложение1.R023G5 = R130GB;
	
	//16.2
	// корректировка кредита по результатам поданных уточняющих расчетов
	R162GB = 0;
	
	// 16.3
	// корректировка кредита по результатам проверки
	R163GB = 0;
	НужнаяСтатья =  СтрокиДекларацииНДС.НДС_ИзмененОстатокОтрицЗначенияПроверка;
	РасчетПоСтатье(НужнаяСтатья,,R163GB,"","R163GB",0);
	ДT2R[0].ДT2RXXXXG3 = R162GB + R163GB;
	
	//////////////////////////////////////////////
	// Приложение 3

	
	//////////////////////////////////////////////
	// Приложение 4
	
	//////////////////////////////////////////////
	// Приложение 7
	
	// заполним расчет коэффициента пропорционального отнесения НДС
	// в течение года действует коэффициент, рассчитанный по данным прошлого года (или первого месяца).
	Запрос.УстановитьПараметр ("Период",СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КоэффициентыПропорциональногоОтнесенияНДСНаКредитСрезПоследних.Регистратор.МесяцРасчета КАК МесяцРасчета,
	               |	КоэффициентыПропорциональногоОтнесенияНДСНаКредитСрезПоследних.Регистратор.ПоДаннымПрошлогоГода КАК ПоДаннымПрошлогоГода,
	               |	КоэффициентыПропорциональногоОтнесенияНДСНаКредитСрезПоследних.Регистратор.СуммаОблагаемыхОпераций КАК СуммаОблагаемыхОпераций,
	               |	КоэффициентыПропорциональногоОтнесенияНДСНаКредитСрезПоследних.Регистратор.СуммаВсехОпераций КАК СуммаВсехОпераций
	               |ИЗ               
	               |	РегистрСведений.КоэффициентыПропорциональногоОтнесенияНДСНаКредит.СрезПоследних(&Период, 
				   |				Организация = &Организация
				   |              И СпецРежимНалогообложения = &СпецРежим
				   |) КАК КоэффициентыПропорциональногоОтнесенияНДСНаКредитСрезПоследних
	               |ГДЕ
	               |	ГОД(КоэффициентыПропорциональногоОтнесенияНДСНаКредитСрезПоследних.Регистратор.Дата) = ГОД(&Период)";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ПоДаннымПрошлогоГода = Истина Тогда
			СтруктураДанныхПриложение7.R011G4 = Выборка.СуммаВсехОпераций;
			СтруктураДанныхПриложение7.R011G5 = Выборка.СуммаОблагаемыхОпераций;
		ИначеЕсли Выборка.МесяцРасчета <= Месяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда 	
			СтруктураДанныхПриложение7.R012G4 = Выборка.СуммаВсехОпераций;
			СтруктураДанныхПриложение7.R012G5 = Выборка.СуммаОблагаемыхОпераций;
		КонецЕсли;                                   
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "ЕРП" Тогда
		// заполним данные для перерасчета за год/два/три использования ОС. Будем использовать данные из документа ПерерасчетПропорциональногоНДСпоТоварамИОС за 12-й месяц
		Если Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) = 12 Тогда
			Запрос.Текст = "ВЫБРАТЬ Первые 1
			               |	ПерерасчетПропорциональногоНДСпоТоварамИОС.СуммаВсехОпераций,
			               |	ПерерасчетПропорциональногоНДСпоТоварамИОС.СуммаОблагаемыхОпераций,
			               |	ПерерасчетПропорциональногоНДСпоТоварамИОС.СуммаВсехОпераций2Года КАК СуммаВсехОпераций2Года,
			               |	ПерерасчетПропорциональногоНДСпоТоварамИОС.СуммаОблагаемыхОпераций2Года КАК СуммаОблагаемыхОпераций2Года,
			               |	ПерерасчетПропорциональногоНДСпоТоварамИОС.СуммаВсехОпераций3Года КАК СуммаВсехОпераций3Года,
			               |	ПерерасчетПропорциональногоНДСпоТоварамИОС.СуммаОблагаемыхОпераций3Года КАК СуммаОблагаемыхОпераций3Года,
			               |	ПерерасчетПропорциональногоНДСпоТоварамИОС.Дата
			               |ИЗ
			               |	Документ.ПерерасчетПропорциональногоНДСпоТоварамИОС КАК ПерерасчетПропорциональногоНДСпоТоварамИОС
						   |ГДЕ КОНЕЦПЕРИОДА(Дата, ГОД) = КОНЕЦПЕРИОДА(&Период, ГОД)
						   |  И Организация = &Организация
						   |  И ПерерасчетПропорциональногоНДСпоТоварамИОС.СпецРежимНалогообложения = &СпецРежим
						   |УПОРЯДОЧИТЬ ПО Дата Убыв";	
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				СтруктураДанныхПриложение7.R0131G4 = Выборка.СуммаВсехОпераций;
				СтруктураДанныхПриложение7.R0131G5 = Выборка.СуммаОблагаемыхОпераций;
				
				СтруктураДанныхПриложение7.R0132G4 = Выборка.СуммаВсехОпераций2Года;
				СтруктураДанныхПриложение7.R0132G5 = Выборка.СуммаОблагаемыхОпераций2Года;
				
				СтруктураДанныхПриложение7.R0133G4 = Выборка.СуммаВсехОпераций3Года;
				СтруктураДанныхПриложение7.R0133G5 = Выборка.СуммаОблагаемыхОпераций3Года;
				
			КонецЕсли;
		
			//////////////////////////////////
			// Таблица 2 Приложения 7
			//////////////////////////////////
			

			
			//////////////////////////////////
			// Таблица 3 Приложения 7
			//////////////////////////////////

		КонецЕсли;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.мНеВыдаватьСообщенияОбОшибкахВРасчете = Истина;
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	Расчет(ЭтаФорма);
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	СтруктураДанныхДекларация.R50GA  = СтруктураДанныхСправка.R01G4;
	СтруктураДанныхДекларация.R60GA  = СтруктураДанныхПриложение1.R013G4 + СтруктураДанныхПриложение1.R013G7;
	СтруктураДанныхДекларация.R60GB  = СтруктураДанныхПриложение1.R013G5 + СтруктураДанныхПриложение1.R013G6;
	СтруктураДанныхДекларация.R70GA  = СтруктураДанныхПриложение1.R010G4;
	СтруктураДанныхДекларация.R70GB  = СтруктураДанныхПриложение1.R010G5 + СтруктураДанныхПриложение1.R010G6;
	СтруктураДанныхДекларация.R130GA = СтруктураДанныхПриложение1.R023G4;
	СтруктураДанныхДекларация.R130GB = СтруктураДанныхПриложение1.R023G5 + СтруктураДанныхПриложение1.R023G6;
	СтруктураДанныхДекларация.R140GA = СтруктураДанныхПриложение1.R020G4;
	СтруктураДанныхДекларация.R140GB = СтруктураДанныхПриложение1.R020G5 + СтруктураДанныхПриложение1.R020G6;

	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	Расчет(ЭтаФорма);
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	СтруктураРеквизитовФормы.мНеВыдаватьСообщенияОбОшибкахВРасчете = Ложь;

	// теперь добавим к заполенным ячейкам данные из уточняемого расчета
	ПоляСРазностью = Новый Структура();
	ОбластиДеларации = СтруктураДанныхДекларация; 									 
	Для каждого Область Из ОбластиДеларации Цикл
		ИмяОбласти = Область.Ключ;
		Если    Прав(ИмяОбласти, 2) = "GB"
			ИЛИ Прав(ИмяОбласти, 2) = "GA" Тогда
			Если  ОбластиДеларации.Свойство(ИмяОбласти + "4") 
				И ОбластиДеларации.Свойство(ИмяОбласти + "6") Тогда
				 ПоляСРазностью.Вставить(ИмяОбласти);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;									 
									 
	Для каждого Структ из ПоляСРазностью Цикл
		
		ТекЗнач =   СтруктураДанныхДекларация[Структ.Ключ]
				  +	СтруктураДанныхДекларация[Структ.Ключ + "4"];
   		СтруктураДанныхДекларация.Вставить(Структ.Ключ, ТекЗнач);
															  
	КонецЦикла;     
	
	СтруктураРеквизитовФормы.мНеВыдаватьСообщенияОбОшибкахВРасчете = Истина;
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	Расчет(ЭтаФорма);
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	СтруктураРеквизитовФормы.мНеВыдаватьСообщенияОбОшибкахВРасчете = Ложь;
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	Расчет(ЭтаФорма);
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
	
	УстановитьФлаги();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлаги()


	ТекЗначениеФлага = ЗначениеЗаполнено(СтруктураДанныхПриложение1.R011G4)
				   ИЛИ ЗначениеЗаполнено(СтруктураДанныхПриложение1.R022G4)
				   ИЛИ ЗначениеЗаполнено(СтруктураДанныхПриложение5.R012G4)
				   ИЛИ ЗначениеЗаполнено(СтруктураДанныхПриложение5.R025G4);
	СтруктураДанныхДекларация.HBD = ?(ТекЗначениеФлага, "1","");
	
	ТекЗначениеФлага =  ЗначениеЗаполнено(СтруктураДанныхДекларация.R41GA)
					ИЛИ ЗначениеЗаполнено(СтруктураДанныхДекларация.R41GB)		
					ИЛИ ЗначениеЗаполнено(СтруктураДанныхДекларация.R42GA)		
					ИЛИ ЗначениеЗаполнено(СтруктураДанныхДекларация.R42GB)		
					ИЛИ ЗначениеЗаполнено(СтруктураДанныхДекларация.R60GA)		
					ИЛИ ЗначениеЗаполнено(СтруктураДанныхДекларация.R60GB)		
					ИЛИ ЗначениеЗаполнено(СтруктураДанныхДекларация.R70GA)		
					ИЛИ ЗначениеЗаполнено(СтруктураДанныхДекларация.R70GB)		
					ИЛИ ЗначениеЗаполнено(СтруктураДанныхДекларация.R130GA)		
					ИЛИ ЗначениеЗаполнено(СтруктураДанныхДекларация.R130GB)		
					ИЛИ ЗначениеЗаполнено(СтруктураДанныхДекларация.R140GA)		
					ИЛИ ЗначениеЗаполнено(СтруктураДанныхДекларация.R140GB);		
	СтруктураДанныхДекларация.HD1 = ?(ТекЗначениеФлага, "X","");
	
	ТекЗначениеФлага = ЗначениеЗаполнено(СтруктураДанныхДекларация.R210GB);
	СтруктураДанныхДекларация.HD2 = ?(ТекЗначениеФлага, "X","");

	ТекЗначениеФлага =  ЗначениеЗаполнено(СтруктураДанныхПриложение3.R010G3)
					ИЛИ ЗначениеЗаполнено(СтруктураДанныхДекларация.R202GB);
	СтруктураДанныхДекларация.HD3 = ?(ТекЗначениеФлага, "X","");
	
	ТекЗначениеФлага = ЗначениеЗаполнено(СтруктураДанныхДекларация.R202GB);
	СтруктураДанныхДекларация.HD4 = ?(ТекЗначениеФлага, "X","");
	
	ТекЗначениеФлага =  ЗначениеЗаполнено(СтруктураДанныхДекларация.R11GA)
					ИЛИ ЗначениеЗаполнено(СтруктураДанныхДекларация.R11GB)
					ИЛИ ЗначениеЗаполнено(СтруктураДанныхДекларация.R12GA)
					ИЛИ ЗначениеЗаполнено(СтруктураДанныхДекларация.R12GB)
					ИЛИ ЗначениеЗаполнено(СтруктураДанныхДекларация.R41GA)
					ИЛИ ЗначениеЗаполнено(СтруктураДанныхДекларация.R41GB)
					ИЛИ ЗначениеЗаполнено(СтруктураДанныхДекларация.R42GA)
					ИЛИ ЗначениеЗаполнено(СтруктураДанныхДекларация.R42GB)
					ИЛИ ЗначениеЗаполнено(СтруктураДанныхДекларация.R101GA)
					ИЛИ ЗначениеЗаполнено(СтруктураДанныхДекларация.R101GB)
					ИЛИ ЗначениеЗаполнено(СтруктураДанныхДекларация.R102GA)
					ИЛИ ЗначениеЗаполнено(СтруктураДанныхДекларация.R102GB);
	СтруктураДанныхДекларация.HD5 = ?(ТекЗначениеФлага, "X","");
	
	ТекЗначениеФлага = ЗначениеЗаполнено(СтруктураДанныхДекларация.R50GA);
	СтруктураДанныхДекларация.HD6 = ?(ТекЗначениеФлага, "X","");
	
	ТекЗначениеФлага = (Месяц(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)=12)
	И (    ЗначениеЗаполнено(СтруктураДанныхПриложение7.R02G8)
	   ИЛИ ЗначениеЗаполнено(СтруктураДанныхПриложение7.R02G9)
	   ИЛИ ЗначениеЗаполнено(СтруктураДанныхПриложение7.R031G7)
	   ИЛИ ЗначениеЗаполнено(СтруктураДанныхПриложение7.R032G7)
	   ИЛИ ЗначениеЗаполнено(СтруктураДанныхПриложение7.R033G7));
	СтруктураДанныхДекларация.HD7 = ?(ТекЗначениеФлага, "X","");
	
	//СтруктураДанныхДекларация.HD8 = ?(ТекЗначениеФлага, "X","");
	
	ТекЗначениеФлага = ЗначениеЗаполнено(СтруктураДанныхДекларация.HBD);
	СтруктураДанныхДекларация.HD9 = ?(ТекЗначениеФлага, "X","");
	
КонецПроцедуры

//&НаСервере
//Функция ПоказателиПредыдущейДекларации(ДатаНачалаПериода,ДатаОкончанияПериода,ИсточникОтчета,ИсточникУточненки,ПредставлениеОтчета,ИмяПоля,
//	                                   
//									   ИмяПоля2 = "",
//									   
//									   ПредставлениеПоказателя)
//    перем ПоказателиОтчета;
//	перем ПоказателиДекларации;
//	перем ЗначениеФлажка;
//	
//	Перем ГодУточненки, МесяцУточненки, КварталУточненки;
//	Перем ТекГодУточненки, ТекМесяцУточненки, ТекКварталУточненки;
//	
//	ТекстЗапроса = "ВЫБРАТЬ
//	               |	2 КАК Порядок1,
//	               |	РегламентированныйОтчет.ДатаПодписи КАК Порядок2,
//	               |	РегламентированныйОтчет.ИсточникОтчета,
//	               |	РегламентированныйОтчет.ДанныеОтчета
//	               |ИЗ
//	               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
//	               |ГДЕ
//	               |	РегламентированныйОтчет.ПометкаУдаления  = ЛОЖЬ
//	               |	И РегламентированныйОтчет.Организация    = &Организация
//	               |	И РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчетаДекларация
//	               |	И РегламентированныйОтчет.ДатаНачала     = &ДатаНачала
//	               |	И РегламентированныйОтчет.ДатаОкончания  = &ДатаОкончания
//	               |
//	               |ОБЪЕДИНИТЬ ВСЕ
//	               |
//	               |ВЫБРАТЬ
//	               |	1,
//	               |	РегламентированныйОтчет.ДатаПодписи,
//	               |	РегламентированныйОтчет.ИсточникОтчета,
//	               |	РегламентированныйОтчет.ДанныеОтчета
//	               |ИЗ
//	               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
//	               |ГДЕ
//	               |	РегламентированныйОтчет.ПометкаУдаления  = ЛОЖЬ
//	               |	И РегламентированныйОтчет.Организация    = &Организация
//	               |	И РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчетаУточненка
//	               |	И РегламентированныйОтчет.ДатаНачала    >= &ДатаНачала
//	               |	И РегламентированныйОтчет.ДатаОкончания >= &ДатаОкончания
//	               |
//	               |УПОРЯДОЧИТЬ ПО
//	               |	Порядок1,
//	               |	Порядок2 УБЫВ";
//	
//	
//	ЗапросОтчета = Новый Запрос ();
//	ЗапросОтчета.УстановитьПараметр ("ДатаНачала",		ДатаНачалаПериода);
//	ЗапросОтчета.УстановитьПараметр ("ДатаОкончания",	ДатаОкончанияПериода);
//	ЗапросОтчета.УстановитьПараметр ("Организация",		СтруктураРеквизитовФормы.Организация);
//    ЗапросОтчета.УстановитьПараметр ("ИсточникОтчетаДекларация", ИсточникОтчета);
//	ЗапросОтчета.УстановитьПараметр ("ИсточникОтчетаУточненка",	 ИсточникУточненки);

//	ЗапросОтчета.Текст = ТекстЗапроса;
//	РезультатЗапроса = ЗапросОтчета.Выполнить().Выгрузить();

//	ГодУточненки = Год(ДатаНачалаПериода);
//	Если Месяц(ДатаНачалаПериода) = Месяц(ДатаОкончанияПериода) Тогда
//		МесяцУточненки   = Месяц(ДатаНачалаПериода);
//		КварталУточненки = 0;
//	Иначе
//		МесяцУточненки   = 0;
//		КварталУточненки = Месяц(КонецКвартала(ДатаОкончанияПериода))/3;
//	КонецЕсли;
//	
//	Если  РезультатЗапроса.Количество() = 0 Тогда
//		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраненный отчет %3 за %1 не обнаружен! Автоматическое заполнения показателя %2  невозможно!';uk='Звіт %3 за %1 не виявлений! Автоматичне заповнення показника %2 неможливо!'"), ПредставлениеПериода( НачалоМесяца(ДатаНачалаПериода), КонецМесяца(ДатаОкончанияПериода), "Л = ""uk_UA""; ФП = Истина" ), ПредставлениеПоказателя, ПредставлениеОтчета); 
//		Если СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Ложь Тогда
//			Сообщить(ТекстСообщения);
//		Иначе
//			мСписокСообщенийЗвит1С.Добавить(4,ТекстСообщения)
//		КонецЕсли;
//		Возврат Неопределено;
//	Иначе	
//		
//		Для каждого СохраненныйОтчет Из РезультатЗапроса Цикл
//		
//			ДанныеОтчета = СохраненныйОтчет.ДанныеОтчета.Получить();
//			ДанныеОтчета.Свойство("ПоказателиОтчета",ПоказателиОтчета);
//			
//			// проверим уточняемый период для уточненки
//			Если СохраненныйОтчет.ИсточникОтчета = ИсточникУточненки Тогда
//				
//				СлужебныеДанные = Неопределено;
//				ПоказателиОтчета.Свойство("ПолеТабличногоДокументаСлужебныеДанные", СлужебныеДанные);
//				
//				Если  СлужебныеДанные.Свойство("HZYP", ТекГодУточненки)
//					И СлужебныеДанные.Свойство("HZKVP",ТекКварталУточненки)
//					И СлужебныеДанные.Свойство("HZMP", ТекМесяцУточненки)Тогда
//					
//					Если НЕ (  ТекГодУточненки 		= ГодУточненки 
//					  	     И ТекКварталУточненки 	= КварталУточненки
//						     И ТекМесяцУточненки 	= МесяцУточненки) Тогда
//						Продолжить;						
//					КонецЕсли;
//					
//				Иначе	
//					Продолжить;
//				КонецЕсли;
//			
//			КонецЕсли;
//			
//			НаименованиеПоля = "ПолеТабличногоДокумента" + ИмяПоля;
//			Если НЕ ПоказателиОтчета.Свойство(НаименованиеПоля,ПоказателиДекларации) Тогда
//				НаименованиеПоля = "ПолеТабличногоДокумента" + ИмяПоля2;
//				Если НЕ ПоказателиОтчета.Свойство(НаименованиеПоля,ПоказателиДекларации) Тогда
//					Продолжить;
//				КонецЕсли;
//			КонецЕсли;
//			
//			Возврат ПоказателиДекларации;
//		
//		КонецЦикла;
//		
//		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохраненный отчет %3 за %1 по указанному спец. режиму (поля 0110...0140) не обнаружен! Автоматическое заполнения показателя %2  невозможно!';uk= 'Збереженого звіту %3 за %1 по зазначеному спец. режиму (поля 0110...0140) не виявлено! Автоматичне заповнення показника %2 неможливо!'"), ПредставлениеПериода( НачалоМесяца(ДатаНачалаПериода), КонецМесяца(ДатаОкончанияПериода), "Л = ""uk_UA""; ФП = Истина" ), ПредставлениеПоказателя, ПредставлениеОтчета); 
//		Если СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Ложь Тогда
//			Сообщить(ТекстСообщения);
//		Иначе
//			мСписокСообщенийЗвит1С.Добавить(4,ТекстСообщения);
//		КонецЕсли;
//		
//		Возврат Неопределено;
//		
//	КонецЕсли;	
//	
//КонецФункции

&НаКлиенте
Процедура ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С)
	
	Если ТипЗнч(ПараметрыЗаполненияЗвит1С) = Тип("Структура") Тогда
	
		Попытка
			
			Данные = глКомпонентаЗвит1С.GetReport(ПараметрыЗаполненияЗвит1С.ПараметрыЗапроса.ИмяСхемы1, 
												  ПараметрыЗаполненияЗвит1С.ПараметрыЗапроса.ТипПериода, 
												  ПараметрыЗаполненияЗвит1С.ПараметрыЗапроса.НомерПериода, 
												  ПараметрыЗаполненияЗвит1С.ПараметрыЗапроса.ГодПериода);
			Если Данные = Неопределено Тогда
				// При групповом заполнении отчетов сообщение выводим один раз
				// так же не вывподим сообщение при заполнении приложений (там где данные прошлого периода не используются)
				Если глМенеджерЗвит1С.ИмяСхемыЗвит1С = ПараметрыЗаполненияЗвит1С.ПараметрыЗапроса.ИмяСхемы1 Тогда
					ТекстСообщения = "Збереженого звіту ""Декларація по ПДВ"" ("+ПараметрыЗаполненияЗвит1С.ПараметрыЗапроса.ИмяСхемы1+") за "+ПредставлениеПериода(ПараметрыЗаполненияЗвит1С.ДатПрошлогоПериода1, ПараметрыЗаполненияЗвит1С.ДатПрошлогоПериода2, "Л=uk_UA")+" не виявлено!
					                 |Автоматичне заповнення показника рядка 16!";
					глМенеджерЗвит1С.ПредупреждениеЗвит1С(ТекстСообщения, "Завантаження даних з ""FREDO Звіт""");
				КонецЕсли;
			Иначе
				
				R161GB = Данные.GetValue("MAIN", ПараметрыЗаполненияЗвит1С.ПараметрыЗапроса.ИмяПоказателяПредыдущейДекларации1);
				ЗаполнитьПоказательНаСервере("R161GB", R161GB, ЭтаФорма, "Декларация");
				
			КонецЕсли;
			
		Исключение
			
			Если глМенеджерЗвит1С.ФлагОтладки Тогда
				Сообщить("FREDO Звіт. Исключение при получении данных из ""FREDO Звіт"" ("+ПараметрыЗаполненияЗвит1С.ПараметрыЗапроса.ИмяСхемы1+", "+ПараметрыЗаполненияЗвит1С.ПараметрыЗапроса.ТипПериода+", "+ПараметрыЗаполненияЗвит1С.ПараметрыЗапроса.НомерПериода+", " +ПараметрыЗаполненияЗвит1С.ПараметрыЗапроса.ГодПериода+")", СтатусСообщения.Важное);
				Сообщить(ОписаниеОшибки(), СтатусСообщения.Информация);
			КонецЕсли;
			
		КонецПопытки;
		
		РасчетНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСтруктурыКолонокМногострочныхЧастей()
	
	Если СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов = Неопределено Тогда
		СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов = Новый Структура;	
	КонецЕсли;
	
	Для каждого Многострочка Из мСтруктураМногострочныхРазделов Цикл
		
		ИмяМногострочки = Многострочка.Ключ;
		
		ДанныеФормы 	= ЭтаФорма[Многострочка.Значение];
		Таблица 		= ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		
		
		СтруктураКолонок = Новый Массив;
		Для каждого Колонка Из Таблица.Колонки Цикл
			СтруктураКолонок.Добавить(Колонка.Имя);
		КонецЦикла;
		
		СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов.Вставить(ИмяМногострочки, СтруктураКолонок);
		
	КонецЦикла;

КонецФункции

&НаКлиенте
Процедура ПоддержкаДуплекса(Команда)
	
	// инвертируем пометку и значение
	ЕстьДуплекс = СтруктураРеквизитовФормы.ЕстьДуплекс;
	
	СтруктураРеквизитовФормы.Вставить("ЕстьДуплекс", НЕ ЕстьДуплекс);
	Элементы.ЕстьДуплекс.Пометка = НЕ ЕстьДуплекс;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеФормыНаСервере();
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	// расшифровка для Звит1С
	Если  СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровки")
		И ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки) 
		И СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С") Тогда
		
		ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки),
									  СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С); 
		
	КонецЕсли;
	
	ПоказателиОтчета = Новый Структура();
	
	РеквизитыФормы = ПолучитьРеквизиты();
	Для каждого Реквизит Из РеквизитыФормы Цикл
		Если Лев(ВРЕГ(Реквизит.Имя), 15)  = ВРЕГ("СтруктураДанных") Тогда
			ПоказателиОтчета.Вставить(Сред(Реквизит.Имя, 16), ЭтаФорма[Реквизит.Имя]);		
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИдМногострочногоРаздела Из мСтруктураМногострочныхРазделов Цикл
		
		СтруктураДанных = Новый Структура;
		
		Таблица = РеквизитФормыВЗначение(ИдМногострочногоРаздела.Значение, Тип("ТаблицаЗначений"));
		КолонкиТаблицы = Таблица.Колонки;
		
		Для каждого Строка Из Таблица Цикл
			
			Для каждого Колонка Из КолонкиТаблицы Цикл
				СтруктураДанных.Вставить(Колонка.Имя + "_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ=0"), Строка[Колонка.Имя]);
			КонецЦикла;
			
		КонецЦикла;
		
		ПоказателиОтчета.Вставить(ИдМногострочногоРаздела.Значение, СтруктураДанных);		
		
	КонецЦикла;	
	
	//ПоказателиОтчета.СлужебныеДанные.Вставить("HNAME",   ПоказателиОтчета.Декларация.HNAME);
	ПоказателиОтчета.СлужебныеДанные.Вставить("HBOS",    ПоказателиОтчета.Декларация.HBOS);
	ПоказателиОтчета.СлужебныеДанные.Вставить("HBUH",    ПоказателиОтчета.Декларация.HBUH);
	//ПоказателиОтчета.СлужебныеДанные.Вставить("HNPDV",   ПоказателиОтчета.Декларация.HNPDV);
	//ПоказателиОтчета.СлужебныеДанные.Вставить("HDDGV", ПоказателиОтчета.Декларация.HDDGV);
	//ПоказателиОтчета.СлужебныеДанные.Вставить("HNDGV", ПоказателиОтчета.Декларация.HNDGV);
	
	ПоказателиОтчета.Вставить("ДопПоказателиОтчета", СтруктураРеквизитовФормы.ДопПоказателиОтчетаЗвит1С);
		
	// показатели
	СписокСохранения.Вставить("ДанныеОтчета", ПоказателиОтчета);
	
	Возврат СписокСохранения;
	
КонецФункции

&НаКлиенте
Функция СоздатьДанныеОтчетаДляВыгрузки() Экспорт
	
	АдресВХранилище = СоздатьДанныеОтчетаДляВыгрузкиНаСервере();
	Возврат АдресВХранилище;

КонецФункции

&НаСервере
Функция СоздатьДанныеОтчетаДляВыгрузкиНаСервере()
	
	ДанныеОтчета = ПолучитьДанныеФормыНаСервере();
	Возврат ПоместитьВоВременноеХранилище(ДанныеОтчета, Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Функция СоздатьТаблицуВыгружаемыхОтчетныхФорм() Экспорт

	АдресВХранилище = СоздатьТаблицуВыгружаемыхОтчетныхФормНаСервере();
	Возврат АдресВХранилище;

КонецФункции


&НаСервере
Функция СоздатьТаблицуВыгружаемыхОтчетныхФормНаСервере()

	ТаблицаСхемXML = ЗаполнитьТаблицуСоСхемамиВыгрузки();
	ОпределитьСписокВыгружаемыхСхем(ТаблицаСхемXML);

	Возврат ПоместитьВоВременноеХранилище(ТаблицаСхемXML, Новый УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Функция СоздатьСтруктуруСоСхемамиВыгрузки() Экспорт

	АдресВХранилище = СоздатьСтруктуруСоСхемамиВыгрузкиНаСервере();
	Возврат АдресВХранилище;

КонецФункции

&НаСервере
Функция СоздатьСтруктуруСоСхемамиВыгрузкиНаСервере()

	ТипМакетаСхемыXSD = Метаданные.СвойстваОбъектов.ТипМакета.ДвоичныеДанные;

	СтруктураXSD = Новый Структура;
	Объект = ОбъектОтчета(ЭтаФорма.ИмяФормы);

	МетаданныеМактов = Объект.Метаданные().Макеты;

	Для Каждого Макет Из МетаданныеМактов Цикл
		
		Если ВРЕГ(Макет.Имя) = ВРЕГ("АрхивСхемXSD") Тогда
			
			АрхивСхемXSD = Объект.ПолучитьМакет("АрхивСхемXSD");
			
			ВременноеИмяZIP      = ПолучитьИмяВременногоФайла(".zip");
			ВременноеИмяКаталога = ПолучитьИмяВременногоФайла();
			
			АрхивСхемXSD.Записать(ВременноеИмяZIP);
			ЧтениеZIP = Новый ЧтениеZipФайла(ВременноеИмяZIP);
			
			Для каждого Схема Из ЧтениеZIP.Элементы Цикл
				
				ЧтениеZIP.Извлечь(Схема, ВременноеИмяКаталога);
				
				СтруктураXSD.Вставить(Схема.ИмяБезРасширения , Новый ДвоичныеДанные(ВременноеИмяКаталога + "\" + Схема.Имя));
			
			КонецЦикла;
			
			Попытка
				УдалитьФайлы(ВременноеИмяZIP);
			Исключение КонецПопытки;
			
			Попытка
				УдалитьФайлы(ВременноеИмяКаталога);
			Исключение КонецПопытки;
		
		КонецЕсли;
		
		Если Макет.ТипМакета = ТипМакетаСхемыXSD  Тогда
		
			СтруктураXSD.Вставить(Макет.Имя, Объект.ПолучитьМакет(Макет));		
		
		КонецЕсли;	
		
	КонецЦикла;

	Возврат ПоместитьВоВременноеХранилище(СтруктураXSD, Новый УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура  ОпределитьСписокВыгружаемыхСхем(тбСхемыXML);

	Для Каждого стр Из  тбСхемыXML Цикл
		
		Если стр.НазваниеСтраницыПанели = "Заявление" Тогда
			стр.фВыгрузка = 0;
		ИначеЕсли стр.НазваниеСтраницыПанели = "Филиалы" Тогда	
			Если СтруктураРеквизитовФормы.ОтчетЗаДваМесяца Тогда
				// подается при первом отчете или при изменении состава...
				стр.фВыгрузка = 1;
			иначе	
				стр.фВыгрузка = 0;
			КонецЕсли;
		ИначеЕсли стр.НазваниеСтраницыПанели = "Приложение9" Тогда	
			НомерПриложения = Прав(стр.НазваниеСтраницыПанели, 1);
			Если ЗначениеЗаполнено(ПолучитьПоказательНаСервере("HD" + НомерПриложения, ЭтаФорма, "Декларация")) Тогда
			    стр.фВыгрузка = 1;
			Иначе
				стр.фВыгрузка = 0;
			КонецЕсли;	
		Иначе	
			//по-умолчанию выгружаем все приложения
			стр.фВыгрузка = 1;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры	

&НаСервере
Функция ЗаполнитьТаблицуСоСхемамиВыгрузки()

	//для возможности выгрузки в XML файл	
	тбСхемыXML = Новый ТаблицаЗначений;
	ТипКолИмяСхемы = СоздатьОписанияТипов("Строка",8);
	тбСхемыXML.Колонки.Добавить("ИмяСхемы",ТипКолИмяСхемы,НСтр("ru='Имя файла-схемы';uk=""Ім'я файлу-схеми"""));
	ТипКолПредставлениеСхемы = СоздатьОписанияТипов("Строка",80);
	тбСхемыXML.Колонки.Добавить("ПредставлениеСхемы",ТипКолПредставлениеСхемы,НСтр("ru='Наименование регл.отчета';uk='Найменування регл.звіту'"));
	ТипКолНазваниеСтраницыПанели = СоздатьОписанияТипов("Строка",60);
	тбСхемыXML.Колонки.Добавить("НазваниеСтраницыПанели",ТипКолНазваниеСтраницыПанели,НСтр("ru='Наименование страницы панели';uk='Найменування сторінки панелі'"));

	ТипКолфВыгрузка = СоздатьОписанияТипов("Число",1,0);
	тбСхемыXML.Колонки.Добавить("фВыгрузка",ТипКолфВыгрузка,НСтр("ru='Выгружать?';uk='Вивантажувати?'"));
	ТипКолНазваниеСтраницыПанели = СоздатьОписанияТипов("Строка",60);
	ТипПрефикса = СоздатьОписанияТипов("Строка",10);
	тбСхемыXML.Колонки.Добавить("Префикс",ТипПрефикса,НСтр("ru='Префикс';uk='Префікс'"));

	тбСхемыXML.Колонки.Добавить("Тип", ,НСтр("ru='Тип';uk='Тип'"));

	ЮрЛицо = (СтруктураРеквизитовФормы.ОрганизацияЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);

	Если ЮрЛицо Тогда
		
		// 0110 - общая
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "J0217019"; 
		НовСтрока.ПредставлениеСхемы =НСтр("ru='Декларация о НДС';uk='Декларація про ПДВ'");
		НовСтрока.НазваниеСтраницыПанели ="Декларация";
        НовСтрока.Префикс = "Д";

		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "J0200519"; 
		НовСтрока.ПредставлениеСхемы =НСтр("ru='Приложение 1 (Расчет корректировки сумм НДС)';uk='Додаток 1 (Розрахунок коригування сум ПДВ)'");
		НовСтрока.НазваниеСтраницыПанели ="Приложение1";
		
		НовСтрока= тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "J0215219"; 
		НовСтрока.ПредставлениеСхемы =НСтр("ru='Приложение 2 (Справка про остаток сум прошлых периодов)';uk='Додаток 2 (Довідка щодо залишку суми попередніх періодів)'");
		НовСтрока.НазваниеСтраницыПанели ="Приложение2";
		НовСтрока.Префикс = "П2";

		НовСтрока= тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "J0200619"; 
		НовСтрока.ПредставлениеСхемы =НСтр("ru='Приложение 3 (Расчет суммы бюджетного возмещения)';uk='Додаток 3 (Розрахунок суми бюджетного відшкодування)'");
		НовСтрока.НазваниеСтраницыПанели ="Приложение3";
		НовСтрока.Префикс = "П3";
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "J0299819";
		НовСтрока.ПредставлениеСхемы =НСтр("ru='Приложение 4 (Заявление про возврат суммы бюджетного возмещения)';uk='Додаток 4(Заява про повернення сумми бюджетного відшкодування)'");
		НовСтрока.НазваниеСтраницыПанели ="Приложение4";
		НовСтрока.Префикс ="П4";

		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "J0215119";
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение 5 (Расшифровка налоговых обязательств)';uk='Додаток 5(Розшифровка податкових забов''язань)'");
		НовСтрока.НазваниеСтраницыПанели ="Приложение5";
		НовСтрока.Префикс ="П5";
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "J0299319";
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение 6 (Справка)';uk='Додаток 6 (Довідка)'");
		НовСтрока.НазваниеСтраницыПанели ="Справка";
		НовСтрока.Префикс ="С1";
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "J0215719"; 
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение 7 ';uk='Додаток 7 '");
		НовСтрока.НазваниеСтраницыПанели ="Приложение7";
		НовСтрока.Префикс ="П7";
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "J0215319";
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение 9 ';uk='Додаток 9 '");
		НовСтрока.НазваниеСтраницыПанели ="Приложение9";
		НовСтрока.Префикс ="П9";
		
		//                                    
		//НовСтрока = тбСхемыXML.Добавить();
		//НовСтрока.ИмяСхемы = "J0215819";
		//НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение 8 ';uk='Додаток 8 '");
		//НовСтрока.НазваниеСтраницыПанели ="Приложение8";
		//НовСтрока.Префикс ="П8";
		
		//НовСтрока = тбСхемыXML.Добавить();
		//НовСтрока.ИмяСхемы = "J0299708";
		//НовСтрока.ПредставлениеСхемы =НСтр("ru='Заявление о выборе квартального отчетного (налогового) периода';uk='Заява про вибір квартального звітного (податкового) періоду'");
		//НовСтрока.НазваниеСтраницыПанели ="Заявление";
		//
		//НовСтрока = тбСхемыXML.Добавить();
		//НовСтрока.ИмяСхемы = "J0215607";
		//НовСтрока.ПредставлениеСхемы =НСтр("ru='Сообщение о делегировании филиалам права выписки налоговых накладных';uk= 'Повідомлення про делегування філіям права виписки податкових накладних'");
		//НовСтрока.НазваниеСтраницыПанели ="Филиалы";
		//НовСтрока.Префикс ="Ф";
			
	Иначе // физ. лицо	
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "F0217019"; 
		НовСтрока.ПредставлениеСхемы =НСтр("ru='Декларация о НДС';uk='Декларація про ПДВ'");
		НовСтрока.НазваниеСтраницыПанели ="Декларация";
		НовСтрока.Префикс = "Д";
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "F0200419"; 
		НовСтрока.ПредставлениеСхемы =НСтр("ru='Приложение 1 (Расчет корректировки сумм НДС)';uk='Додаток 1 (Розрахунок коригування сум ПДВ)'");
		НовСтрока.НазваниеСтраницыПанели ="Приложение1";
		
		НовСтрока= тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "F0215219"; 
		НовСтрока.ПредставлениеСхемы =НСтр("ru='Приложение 2 (Расчет суммы. подлежащей уплате в бюджет)';uk='Додаток 2 (Розрахунок суми, що підлягає сплаті в бюджет)'");
		НовСтрока.НазваниеСтраницыПанели ="Приложение2";
		НовСтрока.Префикс = "П2";

		НовСтрока= тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "F0200519"; 
		НовСтрока.ПредставлениеСхемы =НСтр("ru='Приложение 3 (Расчет суммы бюджетного возмещения)';uk='Додаток 3 (Розрахунок суми бюджетного відшкодування)'");
		НовСтрока.НазваниеСтраницыПанели ="Приложение3";
		НовСтрока.Префикс = "П3";

		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "F0299819";
		НовСтрока.ПредставлениеСхемы =НСтр("ru='Приложение 4 (Заявление про возврат суммы бюджетного возмещения)';uk='Додаток 4(Заява про повернення сумми бюджетного відшкодування)'");
		НовСтрока.НазваниеСтраницыПанели ="Приложение4";
		НовСтрока.Префикс ="П4";
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "F0215119";
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение 5 (Расшифровка налоговых обязательств)';uk='Додаток 5(Розшифровка податкових забов''язань)'");
		НовСтрока.НазваниеСтраницыПанели ="Приложение5";
		НовСтрока.Префикс ="П5";
		
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "F0299319";
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Справка ""Необлагаемые и освобожденные операции от НДС "" ';uk='Довідка ""Операції, що не є об''єктом оподаткування  і звільненні від сплати НДС"" '");
		НовСтрока.НазваниеСтраницыПанели ="Справка";
		НовСтрока.Префикс ="С1";

		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "F0215719"; 
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение 7 ';uk='Додаток 7 '");
		НовСтрока.НазваниеСтраницыПанели ="Приложение7";
		НовСтрока.Префикс ="П7";
		НовСтрока = тбСхемыXML.Добавить();
		НовСтрока.ИмяСхемы = "F0215319";
		НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение 9 ';uk='Додаток 9 '");
		НовСтрока.НазваниеСтраницыПанели ="Приложение9";
		НовСтрока.Префикс ="П9";
		
		//                                    
		//НовСтрока = тбСхемыXML.Добавить();
		//НовСтрока.ИмяСхемы = "F0215818";
		//НовСтрока.ПредставлениеСхемы = НСтр("ru='Приложение 8 ';uk='Додаток 8 '");
		//НовСтрока.НазваниеСтраницыПанели ="Приложение8";
		//НовСтрока.Префикс ="П8";
		//
		//НовСтрока = тбСхемыXML.Добавить();
		//НовСтрока.ИмяСхемы = "F0299708";
		//НовСтрока.ПредставлениеСхемы =НСтр("ru='Заявление о выборе квартального отчетного (налогового) периода';uk='Заява про вибір квартального звітного (податкового) періоду'");
		//НовСтрока.НазваниеСтраницыПанели ="Заявление";
		
	Конецесли;
	
	тбСхемыXML.ЗаполнитьЗначения(Перечисления.ВерсииФорматовВыгрузки.ГНСУ_XML, "Тип");

	Возврат  тбСхемыXML

КонецФункции

&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	ПараметрыОтчета.Вставить("НаимТекущегоРаздела", СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(Сред(Лев(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7), Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ИДИменПоказателей, ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПараметровДляЗвит1С(ОписаниеОповещения) Экспорт
	
	глКомпонентаЗвит1С.Bring1CToFront();
	СтруктураРеквизитовФормы.Вставить("ОповещениеНастройкиПараметровЗвит1С", ОписаниеОповещения);
	
	Если глМенеджерЗвит1С.ФлагОтладки Тогда

		ФормаСохраненныхРеглОтчетов = ПолучитьФорму("Документ.РегламентированныйОтчет.Форма.ФормаВыбораТестЗвит1С",,ЭтаФорма);
		
		ФормаСохраненныхРеглОтчетов.ОписаниеОповещенияОЗакрытии =  Новый ОписаниеОповещения("РежимТестированияЗвит1СЗавершениеВыбораОтчета", ЭтотОбъект);
		ФормаСохраненныхРеглОтчетов.Параметры.РежимВыбора        = Истина; 
		ФормаСохраненныхРеглОтчетов.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаСохраненныхРеглОтчетов.Открыть();
		
	Иначе
		
		ОткрытьФормуПараметров(Неопределено);	
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РежимТестированияЗвит1СЗавершениеВыбораОтчета(Результат, ДопПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ТекОповещение = СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С;
		СтруктураРеквизитовФормы.Удалить("ОповещениеНастройкиПараметровЗвит1С");
			
		СтруктураРеквизитовФормы.мСохраненныйДок = Результат;	
		ВосстановитьСохраненныеДанные();	
			
		СтруктураРеквизитовФормы.Вставить("ОповещениеНастройкиПараметровЗвит1С", ТекОповещение);
		
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
		
	Иначе
		
		ОткрытьФормуПараметров(Неопределено);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПараметровЗавершение(ПараметрыВозврата, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.Свойство("ОповещениеНастройкиПараметровЗвит1С") Тогда
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьДанныеДляЗвит1С(ОтчетЗвит1С = Неопределено) Экспорт 
	
	мСписокСообщенийЗвит1С 	= Новый СписокЗначений;
	
	// Настроим модуль объекта на получене данных для Звита
	СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина;
	Если СтруктураРеквизитовФормы.Свойство("ОповещениеНастройкиПараметровЗвит1С") Тогда
		СтруктураРеквизитовФормы.Удалить("ОповещениеНастройкиПараметровЗвит1С")	
	КонецЕсли;
	
	////Модифицированность = Ложь;
	////Комментарий = "Звіт створений для збереження параметрів заповнення ""FREDO Звіт""";
	////мСохраненныйДок = Неопределено;
	////Если СтруктураРеквизитовФормы.Свойство("ХранилищеПараметровДляЗвит1С", мСохраненныйДок) Тогда
	////	СтруктураРеквизитовФормы.мСохраненныйДок = мСохраненныйДок;
	////КонецЕсли;
	////
	////Сохранить(Ложь, "Декларация");

	УстановитьФлажкиНаСервереДляЗаполнения(глМенеджерЗвит1С.ИмяСхемыЗвит1С);
	
	Если НЕ глМенеджерЗвит1С.ФлагОтладки Тогда
		ПараметрыЗаполненияЗвит1С = Неопределено;
		ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С);
		ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);
	КонецЕсли;
	
	Результат = ПолучитьДанныеФормыНаСервере();
	
	Для каждого Сообщение Из мСписокСообщенийЗвит1С Цикл
		глМенеджерЗвит1С.ПредупреждениеЗвит1С(Сообщение.Представление, ,Сообщение.Значение);
	КонецЦикла;
	
	мСписокСообщенийЗвит1С.Очистить();
	
	Возврат Результат;
	
КонецФункции

&НаСервере	
Процедура УстановитьФлажкиНаСервереДляЗаполнения(ИмяСхемы)	
	
	Возврат;
	
КонецПроцедуры	

&НаСервере
Процедура _ДобавитьСтрокуРасшифровки(Форма, ИмяЯчейки, ИмяПоказателя, ЗнакОперации, ИмяСлагаемого, Сумма, Счет = Неопределено, КорСчет = Неопределено, Сдвиг = Неопределено, ПраваяГраница = Неопределено, ИмяРаздела = Неопределено, НомерЛиста = Неопределено, МнЧ = Неопределено, НомерСтроки = Неопределено, Субконто1 = Неопределено, Субконто2 = Неопределено, Субконто3 = Неопределено)
	
	
	ТребуемыеОбщиеПараметры =  ОбщиеПараметрыРасшифровки;
	
	Если Лев(ИмяСлагаемого, 1) = "#" Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Организация", Форма.СтруктураРеквизитовФормы.Организация);

	КонецЕсли;
	
	
	Представление = ИмяСлагаемого + " " + Счет + ?(ЗначениеЗаполнено(КорСчет)," " + КорСчет, "");
	
	//ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяЯчейки, ИмяПоказателя, ЗнакОперации, Представление, Сумма, "ДекларацияНДС", ДополнительныеПараметры);
	ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(ТаблицаРасшифровки, ИмяЯчейки, ИмяПоказателя, ЗнакОперации, Представление, Сумма, ИмяРаздела, ДополнительныеПараметры);
	

КонецПроцедуры

&НаСервере
Функция СоздатьОписанияТипов(НазваниеТипа, Длина,Точность="")
	
	мас = Новый Массив;
	мас.Добавить(Тип(НазваниеТипа));
	Если Точность = "" Тогда
		КвалифСтроки = Новый КвалификаторыСтроки(Длина,ДопустимаяДлина.Переменная); 
	Иначе
		КвалифЧисла = Новый КвалификаторыЧисла(Длина,Точность,ДопустимыйЗнак.Неотрицательный); 
	КонецЕсли;	   
	Возврат Новый ОписаниеТипов(мас,КвалифСтроки,КвалифЧисла);
  
КонецФункции	

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя)
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПараметров(Команда)

	мПараметрыФормы = Новый Структура;
	мПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", 	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	мПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета", 	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	//мПараметрыФормы.Вставить("ОтчетЗаДваМесяца", 				СтруктураРеквизитовФормы.ОтчетЗаДваМесяца);
	мПараметрыФормы.Вставить("ПроцентШтрафа", 		СтруктураРеквизитовФормы.ПроцентШтрафа);
	мПараметрыФормы.Вставить("УточняемыйОтчет", 	СтруктураРеквизитовФормы.УточняемыйОтчет);
	мПараметрыФормы.Вставить("ДатаНач", 			СтруктураРеквизитовФормы.ДатаНач);
	мПараметрыФормы.Вставить("ДатаКон", 			СтруктураРеквизитовФормы.ДатаКон);
	мПараметрыФормы.Вставить("НеВыдаватьСообщенияОбОшибкахВРасчете", СтруктураРеквизитовФормы.НеВыдаватьСообщенияОбОшибкахВРасчете);
	
	мПараметрыФормы.Вставить("Организация", 			СтруктураРеквизитовФормы.Организация);
	
	мПараметрыФормы.Вставить("HZYP",  ПолучитьПоказательНаСервере("HZYP",  ЭтаФорма, "СлужебныеДанные"));
	мПараметрыФормы.Вставить("HZKVP", ПолучитьПоказательНаСервере("HZKVP", ЭтаФорма, "СлужебныеДанные"));
	мПараметрыФормы.Вставить("HZMP",  ПолучитьПоказательНаСервере("HZMP",  ЭтаФорма, "СлужебныеДанные"));
	
	мПараметрыФормы.Вставить("мСохраненныйДок", СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ИмяФормыПараметровНастройки = СтрЗаменить(ЭтаФорма.ИмяФормы, "ФормаОтчета", "ПараметрыОтчета");
	
	ФормаНастройкиОтчета = ПолучитьФорму(ИмяФормыПараметровНастройки, мПараметрыФормы, ЭтаФорма);
	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуПараметровЗавершение", ЭтотОбъект);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры	

//&НаСервере
//Процедура ЗаполнитьНастраиваемыеПараметрыЗаполнения()
//	
//	ЗапросДеклПрошл = Новый Запрос ("
//	|ВЫБРАТЬ ПЕРВЫЕ 1
//	| РегламентированныйОтчет.ДанныеОтчета,
//	| РегламентированныйОтчет.Ссылка
//	|ИЗ
//	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
//	|
//	|ГДЕ
//	|	НЕ РегламентированныйОтчет.ПометкаУдаления И
//	|	РегламентированныйОтчет.Организация = &Организация И
//	|	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета И
//	|	РегламентированныйОтчет.ДатаОкончания <= &ДатаОкончания
//	|УПОРЯДОЧИТЬ ПО ДатаОкончания УБЫВ"
//	);
//	
//	ЗапросДеклПрошл.УстановитьПараметр ("ПометкаУдаления",ЛОЖЬ);
//	ЗапросДеклПрошл.УстановитьПараметр ("ДатаОкончания",СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
//	ЗапросДеклПрошл.УстановитьПараметр ("Организация",	СтруктураРеквизитовФормы.Организация);
//	ЗапросДеклПрошл.УстановитьПараметр ("ИсточникОтчета","РегламентированныйОтчетЕдиныйСоциальныйВзнос");						   
//	
//	Выборка = ЗапросДеклПрошл.Выполнить().Выбрать();
//	Если Выборка.Следующий() Тогда
//		
//		ДанныеОтчета = Выборка.ДанныеОтчета.Получить();
//		
//		ТекДанные = Неопределено;
//		ДанныеОтчета.Свойство("ТаблицаВРБольничныеПредприятие", ТекДанные);
//		Если НЕ ТекДанные = Неопределено Тогда
//			СтруктураРеквизитовФормы.ТаблицаВРБольничныеПредприятие = ТекДанные.Получить();
//		КонецЕсли;
//		
//		Если ДанныеОтчета.Свойство("СозданКакХранилищеПараметровДляЗвит1С") Тогда
//			// чтобы не плодить отчеты при повторном заполнении из Звита
//			// будем записывать параметры в один и тот же отчет
//			СтруктураРеквизитовФормы.Вставить("ХранилищеПараметровДляЗвит1С", Выборка.Ссылка);
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//КонецПроцедуры
