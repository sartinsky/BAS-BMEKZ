&НаСервере
Перем мБухИтоги;
&НаСервере
Перем ТаблицаРасшифровки;
&НаСервере
Перем ОбщиеПараметрыРасшифровки;

&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
		
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2015УФ";
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
		
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	// Идентификаторы многострочных групп
	СтруктураРеквизитовФормы.мИдГруппы1 = "T1R";
	
	// количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда)
	КолИсхСтрокИдГруппы1 = 1;
	
	СтруктураДанныхФорма1ДФ	= Новый Структура;
	СтруктураДанныхСлужебныеДанные 		= Новый Структура;
	
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, СтруктураРеквизитовФормы.мИдГруппы1);
	

	мСтруктураМногостраничныхРазделов = Новый Структура;
	
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы1, КолИсхСтрокИдГруппы1);
	
	ЗаполнитьСтруктурыКолонокМногострочныхЧастей();
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
		
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "01/07/2015";
	
	СтруктураРеквизитовФормы.мПечатныеформы 	= Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Форма1ДФ";
		
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	ДатаПодписи                                       = ТекущаяДатаСеанса();
	
	ДатаВыплатыНач = НачалоКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета) + СтруктураРеквизитовФормы.ЧислоВыплатыЗП*86400 - 1;
	ДатаВыплатыКон = КонецКвартала(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета)  + СтруктураРеквизитовФормы.ЧислоВыплатыЗП*86400;
	СтруктураРеквизитовФормы.Вставить("ДатаВыплатыКон", 		ДатаВыплатыКон);
	СтруктураРеквизитовФормы.Вставить("ДатаВыплатыНач", 		ДатаВыплатыНач);
	
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
	СтруктураРеквизитовФормы.СправочникиВидыКонтактнойИнформацииФактАдресОрганизации = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати 	   = Ложь;
	
	ПеречислениеПериодичностьМесяц = Перечисления.Периодичность.Месяц;
	
	СтруктураРеквизитовФормы.ЕстьДуплекс = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность", "ЕстьДуплекс", Ложь);
	Элементы.ЕстьДуплекс.Пометка		 = СтруктураРеквизитовФормы.ЕстьДуплекс;
	
	ВывестиМакетВТаблДокНаСервере(ИмяРаздела, 1);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяРаздела);
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяРаздела);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	
	СтруктураРеквизитовФормы.Вставить("мИдГруппы1");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы2");
	
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("СправочникиВидыКонтактнойИнформацииФактАдресОрганизации");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкиДопСтрок", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкиДопСтраниц", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуВыгрузить", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	
	СтруктураРеквизитовФормы.Вставить("ТекущиеОбластиСтраниц");
	СтруктураРеквизитовФормы.Вставить("КолонкиМногострочныхРазделов");
	СтруктураРеквизитовФормы.Вставить("ЕстьДуплекс", Ложь);
	
	СтруктураРеквизитовФормы.Вставить("ПолучениеДанныхДляЗвит1С", Ложь);
	СтруктураРеквизитовФормы.Вставить("ДопПоказателиОтчетаЗвит1С", Новый Структура);
	
	спПараметрыСтраницы = Новый Структура;
	спПараметрыСтраницы.Вставить("КвоСтрокНаСтранице",61);
	спПараметрыСтраницы.Вставить("ВысотаОснШапки",22);
	спПараметрыСтраницы.Вставить("ВысотаДопШапки",7);
	спПараметрыСтраницы.Вставить("ВысотаПодвала",50);
	спПараметрыСтраницы.Вставить("КоличествоСтрокТаблицыНаЕдинственнойСтранице", 2);
	СтруктураРеквизитовФормы.Вставить("спПараметрыСтраницы", спПараметрыСтраницы);
	
	ВыплатыЗПНеРегулярны = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность", "РегламентированнаяОтчетность_1ДФ_ВыплатыЗПНеРегулярны", Ложь);	
	СтруктураРеквизитовФормы.Вставить("ВыплатыЗПНеРегулярны", 	ВыплатыЗПНеРегулярны);
	
	
	ЧислоВыплатыЗП		 = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность", "РегламентированнаяОтчетность_1ДФ_ЧислоВыплатыЗП", 10);	
	СтруктураРеквизитовФормы.Вставить("ЧислоВыплатыЗП", 		ЧислоВыплатыЗП);
	
	СтруктураРеквизитовФормы.Вставить("Подразделение");
	СтруктураРеквизитовФормы.Вставить("ОбособленноеПодразделение");
	СтруктураРеквизитовФормы.Вставить("НеВключатьЧПников", Ложь);
	СтруктураРеквизитовФормы.Вставить("СортироватьПоИНН",  Ложь);
	
	//ИНАГРО ++
	СтруктураРеквизитовФормы.Вставить("ЗаполнятьПоНачисленному",Ложь);
	СтруктураРеквизитовФормы.Вставить("НеВСельсовете", Ложь);
	СтруктураРеквизитовФормы.Вставить("Сельсовет");
	//ИНАГРО --	
	
КонецПроцедуры


// Функция возвращает параметры числа Е для различных разделов отчета
//
// Параметры
//  ИмяРаздела  - Строка
//
// Возвращаемое значение:
//  Результат   - ОписаниеТипа
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОписаниеТипаЧислаЕДляРаздела(ИмяРаздела = "")
	
	Результат = Новый Структура("ОписаниеТипа, Длина, Точность");
	
	//Если ИмяРаздела = "Раздел1" 
	// ИЛИ ИмяРаздела = "Раздел2" 
	// ИЛИ ИмяРаздела = "Раздел3" 
	// ИЛИ ИмяРаздела = "Раздел3_Прил2" Тогда
	//	Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));
	//ИначеЕсли ИмяРаздела = "Раздел7" Тогда
	//	Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2));	
	//Иначе
    Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	//КонецЕсли; 

	Возврат Результат; 
	
КонецФункции


&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьНачальныеНастройки();

	
	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ЗаполнитьПустыеСтруктурыДанных();	
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		НачальныеОперацииСМногострочнымиБлоками();
			
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	Иначе
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		Элементы.Расшифровать.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуВыгрузить Тогда
		Элементы.Выгрузить.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкиДопСтрок Тогда
		Элементы.ДопСтроки.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкиДопСтраниц Тогда
		Элементы.ДопСтраницы.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
    	
	// формируем список элементов подменю, связанное с кнопкой <Печать>
	Если НЕ БезОткрытияФормы Тогда
		РегламентированнаяОтчетностьКлиентСервер.ПрорисоватьПодменюПечать(ЭтаФорма);
	КонецЕсли;
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры // Инициализация()

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // НачальныеОперацииСМногострочнымиБлоками()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);	
	
	МассивТиповТаблицаЗначений = Новый Массив; 
	МассивТиповТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТиповТаблицаЗначений);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда         
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда		
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы 
	//

	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Форма1ДФ";
	СтрокаУровня1.Представление            = НСтр("ru='Форма 1ДФ';uk='Форма 1ДФ'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "СлужебныеДанные";
	СтрокаУровня1.Представление            = НСтр("ru='Служебные данные';uk='Службові дані'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 0;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки.
//
&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
		
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Форма1ДФ";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы1;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "СлужебныеДанные";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

КонецПроцедуры // ФормироватьСтруктуруСвойствСтраниц()

// СформироватьДеревоРазделовОтчетаНаСервере()
//
&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаСервере()

// СформироватьДеревоРазделовОтчетаНаКлиенте()
//
&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаКлиенте()

// СформироватьДеревоРазделовОтчета()
//
&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = "Страница " + НомерСтраницы;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры // СформироватьДеревоРазделовОтчета()

// РазделыОтчетаПриАктивизацииСтроки()
//
&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент) Экспорт
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	// сохраним текущее положение курсора на странице
	Если СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Неопределено Тогда
		СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Новый Структура;
	КонецЕсли;
	ТекущийНомерСтраницы = "_" + Строка(СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	
	КоординатыОбласти = Новый Структура();
	КоординатыОбласти.Вставить("Верх", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Верх);
	КоординатыОбласти.Вставить("Низ", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ);
	КоординатыОбласти.Вставить("Лево", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево);
	КоординатыОбласти.Вставить("Право", Элементы.ТабличныйДокумент.ТекущаяОбласть.Право);
	
	СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц.Вставить(ТекущийНомерСтраницы, КоординатыОбласти);	

	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Элементы.ДобавитьСтраницу.Доступность   = Ложь;
	Элементы.УдалитьСтраницу.Доступность    = Ложь;
	Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
	Элементы.ДобавитьСтроку.Доступность     = Ложь;
	Элементы.УдалитьСтроку.Доступность      = Ложь;
					
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
																
		КонецЕсли;														
				
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
		
		Элемент.Развернуть(Элемент.ТекущаяСтрока);
		
		Элементы.ДобавитьСтраницу.Доступность   = Истина;
		Элементы.УдалитьСтраницу.Доступность    = Истина;
		Элементы.УдалитьВсеСтраницы.Доступность = Истина;
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			
			Элементы.ОчиститьТекущуюСтраницу.Доступность = Ложь;
			
			Элементы.УдалитьСтраницу.Доступность = Ложь;
							   			
			Если Элемент.ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
				Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
			КонецЕсли;
			
		ИначеЕсли Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1 Тогда
			
			Элементы.УдалитьСтраницу.Доступность    = Ложь;
			Элементы.УдалитьВсеСтраницы.Доступность = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если    Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим = "Форма1ДФ" Тогда
	
		Элементы.ДобавитьСтроку.Доступность = Истина;
		Элементы.УдалитьСтроку.Доступность  = Истина;
		
	КонецЕсли;
	
	// восстановим текущее положение курсора
	ТекущийНомерСтраницы = "_"+Строка(СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	Если СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц.Свойство(ТекущийНомерСтраницы) Тогда
		
		КоординатыОбласти = СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц[ТекущийНомерСтраницы];
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(КоординатыОбласти.Верх, КоординатыОбласти.Лево, КоординатыОбласти.Низ, КоординатыОбласти.Право);	
		
	Иначе	
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1, 1, 1);	
		
	КонецЕсли;
	
КонецПроцедуры // РазделыОтчетаПриАктивизацииСтроки()

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
			
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
	//Если ИмяТекРаздела = "Раздел2" Тогда
	//	ИзменитьЦветЯчеекНаСервере();
	//КонецЕсли;
						
КонецПроцедуры // ВывестиМакетСтраницыВТабличныйДокументНаСервере()

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность)
	
	// Многостраничные разделы.
	
	//Если НаимРаздела = "Раздел2" Тогда
	Если Ложь Тогда
		СтруктураДанных = Новый Структура;
		
		Для Каждого Область Из ТабличныйДокумент.Области Цикл
			
			Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
				СтруктураДанных.Вставить(Область.Имя, Область.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НаимРаздела = "Раздел2" Тогда
			
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела2";
			
		КонецЕсли;
		
		АктивнаяСтраница = ЭтаФорма[НаимТаблицыСтраницы].НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если АктивнаяСтраница.Количество() > 0 Тогда
			
			АктивнаяСтраница = АктивнаяСтраница[0];
			
			АктивнаяСтраница.Данные.Очистить();
			АктивнаяСтраница.Данные.Добавить(СтруктураДанных);
			
			АктивнаяСтраница.АктивнаяСтраница = Ложь;
			
		КонецЕсли;
					
	// Многострочные и обычные разделы.
	//
	ИначеЕсли НаимРаздела = "Форма1ДФ" 
		  ИЛИ НаимРаздела = "СлужебныеДанные" Тогда
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппыМассив = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы);	
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры // СохранитьДанныеРаздела()

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	   ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	
	Если ТабличныйДокумент.Области.Найти("ПредупреждениеОПечати") = Неопределено Тогда
		ТабличныйДокумент.ОбластьПечати = Неопределено;
	Иначе
		ТабличныйДокумент.ОбластьПечати 					  = ТабличныйДокумент.Области.ПредупреждениеОПечати;
	    ТабличныйДокумент.Области.ПредупреждениеОПечати.Текст = НСтр("ru='ВНИМАНИЕ! Печать отчета необходимо осуществлять из меню ''Печать''.';uk= 'УВАГА! Друк звіту необхідно здійснювати за допомогою меню ''Друк''.'");
	КонецЕсли;
	
	// Многостраничные разделы.
	//
	//Если ИмяТекРаздела = "Раздел2" Тогда 
	Если Ложь Тогда  
		
		Если ИмяТекРаздела = "Раздел2" Тогда
			НаимТаблицыСтраницы = "ТаблицаСтраницыРаздела2";
		КонецЕсли;
	    
	    СтруктураДанных = Новый Структура;
	    
	    СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
	    
	    ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;
	    
	    Если СписокДанных.Количество() > 0 Тогда
	    	СтруктураДанных = СписокДанных[0].Значение;
	    КонецЕсли;
	     	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			Попытка
				ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
			Исключение
			КонецПопытки;
	    КонецЦикла;
						
	// Многострочные и обычные разделы.
	//
	ИначеЕсли ИмяТекРаздела = "Форма1ДФ"
		  ИЛИ ИмяТекРаздела = "СлужебныеДанные" Тогда
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Если НЕ ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) = Неопределено Тогда
				Попытка
					ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
				Исключение
				КонецПопытки;
			КонецЕсли;	
		КонецЦикла;
		
		ИмяГруппыМассив = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
		
			СтруктураГруппы = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
			
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
			
		
		КонецЦикла;
		
	КонецЕсли;	
	
	//ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяТекРаздела);

	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
	
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	
	
КонецПроцедуры // ВывестиМакетВТаблДокНаСервере()

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(НаимРаздела)
	
	Если НаимРаздела = "Форма1ДФ" Тогда
		ЗаполнитьДатуПодписи(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоказателиЗначениямиПоУмолчанию()

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт

	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);

	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
		
КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте()

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт

	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);

	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт

	Перем ТекТабличноеПоле;
		
	Если  ИдГруппы = ИдГрупп.мИдГруппы1 Тогда
		
		ТекТабличноеПоле = "Форма1ДФ";
		
	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()


&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры // УстановитьФорматВыводаВПоляхВводаНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;

	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(СокрЛ(КодПоказателя), 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
				ФорматируемаяОбласть.ТипЗначения = Новый ОписаниеТипов(ФорматируемаяОбласть.ТипЗначения,,,Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					
					ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
					ФорматируемаяОбласть.ТипЗначения = Новый ОписаниеТипов(ФорматируемаяОбласть.ТипЗначения,,,Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	

КонецПроцедуры // УстановитьФорматВыводаВПоляхВвода()

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДатуПодписи(Форма)
	
	ЗаполнитьПоказательНаСервере("HFILL",  Форма.ДатаПодписи, Форма, "Форма1ДФ");
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры // ПоказатьПериод()

// УстановитьЦветФонаЯчейкиНаКлиенте()
//
&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // УстановитьЦветФонаЯчейкиНаКлиенте()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // УстановитьЦветФонаЯчейкиНаСервере()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					
					ПозицияXXXX = Найти(ИмяПоказателя, "XXXX");
					Если ПозицияXXXX = 0 Тогда
						ВБлокеВсеПоказателиЗаполняются = Истина;
					Иначе
						ИмяГруппы = Лев(ИмяПоказателя, ПозицияXXXX - 1);
						ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
					КонецЕсли;
					
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЦветФонаЯчейки()

// ЗаполнитьСведенияОбОрганизацииНаСервере()
//
&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере()
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма);
		
КонецПроцедуры // ЗаполнитьСведенияОбОрганизацииНаСервере()

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма)
	
	Организация 				= Форма.СтруктураРеквизитовФормы.Организация;	
	
	ЗаполнитьПоказательНаСервере("HPAGES", 1,  Форма, "Форма1ДФ");	
	
	ЗаполнитьПоказательНаСервере("HF",  "", Форма, "Форма1ДФ");	
	ЗаполнитьПоказательНаСервере("HJ",  "", Форма, "Форма1ДФ");	
	Если Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ЗаполнитьПоказательНаСервере("HJ",  "X", Форма, "Форма1ДФ");	
	Иначе	
		ЗаполнитьПоказательНаСервере("HF",  "X", Форма, "Форма1ДФ");	
	КонецЕсли;
	
	ЗаполнитьПоказательНаСервере("HZ",  "X", Форма, "Форма1ДФ");	
	ЗаполнитьПоказательНаСервере("HZN", "",  Форма, "Форма1ДФ");	
	ЗаполнитьПоказательНаСервере("HZU", "",  Форма, "Форма1ДФ");	
	
	ЗаполнитьПоказательНаСервере("HNAME", Организация.НаименованиеПолное, Форма, "Форма1ДФ");
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	СписокПоказателей.Добавить("","НалоговаяИнспекция");
	СписокПоказателей.Добавить("","ЮридическийАдрес");

	Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, СписокПоказателей);
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","ФИОРук");
	СписокПоказателей.Добавить("","ФИОБух");
	СписокПоказателей.Добавить("","ИННРук");
	СписокПоказателей.Добавить("","ИННБух");
	СведенияДатаПодписи = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.ДатаПодписи, СписокПоказателей);
	
	КодЕДРПОУ         = Сведения.КодПоЕДРПОУ;
	HLOC			  = Сведения.ЮридическийАдрес;
	
	ЗаполнитьПоказательНаСервере("HLOC", HLOC, Форма, "Форма1ДФ");
	ТекДата =  Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	НалоговаяИнспекция= Сведения.НалоговаяИнспекция;
	ФИОДиректора      = СведенияДатаПодписи.ФИОРук;
	ФИОГлавБуха       = СведенияДатаПодписи.ФИОБух;
	ИННДиректора   	  = СведенияДатаПодписи.ИННРук;
	ИННГлавБуха       = СведенияДатаПодписи.ИННБух;
	
	ФИОДиректора 		= РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.ДатаПодписи, СписокПоказателей).ФИОРук;
	// преобразуем ФИО в ИОФ :)
	ПозицияТочки = Найти(ФИОДиректора, ".");
	Если ПозицияТочки > 0 Тогда
		ФИОДиректора = Сред(ФИОДиректора, ПозицияТочки - 1) + " " + Лев(ФИОДиректора, ПозицияТочки - 3);	
	КонецЕсли;
	
	ФИОГлавБуха 		= РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.ДатаПодписи, СписокПоказателей).ФИОБух;
	// преобразуем ФИО в ИОФ
	ПозицияТочки = Найти(ФИОГлавБуха, ".");
	Если ПозицияТочки > 0 Тогда
		ФИОГлавБуха = Сред(ФИОГлавБуха, ПозицияТочки - 1) + " " + Лев(ФИОГлавБуха, ПозицияТочки - 3);	
	КонецЕсли;

	//налоговая инспекция из справочника налоговых инспекций
	Если ЗначениеЗаполнено(НалоговаяИнспекция) Тогда
		НалоговаяИнспекция_НаименованиеПолное 	= НалоговаяИнспекция.НаименованиеПолное;
		НалоговаяИнспекция_Наименование 		= ?(ЗначениеЗаполнено(НалоговаяИнспекция_НаименованиеПолное), НалоговаяИнспекция_НаименованиеПолное, НалоговаяИнспекция.Наименование);
		ЗаполнитьПоказательНаСервере("HSTI",  НалоговаяИнспекция_Наименование, 	Форма, "Форма1ДФ");
		ЗаполнитьПоказательНаСервере("C_RAJ", НалоговаяИнспекция.КодАдмРайона, 	Форма, "СлужебныеДанные");
		ЗаполнитьПоказательНаСервере("C_REG", НалоговаяИнспекция.Родитель.Код, 	Форма, "СлужебныеДанные");
		ЗаполнитьПоказательНаСервере("C_STI_ORIG", НалоговаяИнспекция.Код, 		Форма, "СлужебныеДанные");
		ЗаполнитьПоказательНаСервере("C_STI", НалоговаяИнспекция.Код, 			Форма, "СлужебныеДанные");
	КонецЕсли;
	
	ЗаполнитьПоказательНаСервере("C_DOC_TYPE", 0, Форма, "СлужебныеДанные"); //номер исправленного доекумента. Для первого подающегося документа  = 0
	ЗаполнитьПоказательНаСервере("C_DOC_CNT",  1, Форма, "СлужебныеДанные");;
	ЗаполнитьПоказательНаСервере("C_DOC_STAN", 1,  Форма, "СлужебныеДанные");	
	
	ЗаполнитьПоказательНаСервере("PERIOD_TYPE",  2,  Форма, "СлужебныеДанные");
	
	PERIOD_MONTH = Месяц(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	PERIOD_YEAR	 = Год(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	HZKV		 = Месяц(КонецКвартала(Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета))/3;
	
	ЗаполнитьПоказательНаСервере("PERIOD_YEAR",  PERIOD_YEAR,  Форма, "СлужебныеДанные");
	ЗаполнитьПоказательНаСервере("PERIOD_MONTH", PERIOD_MONTH, Форма, "СлужебныеДанные");
	
	ЗаполнитьПоказательНаСервере("HZKV", HZKV,  		Форма, "СлужебныеДанные");
	ЗаполнитьПоказательНаСервере("HZY",  PERIOD_YEAR,   Форма, "СлужебныеДанные");
	
	ЗаполнитьПоказательНаСервере("ПериодОтчетаКвартал",  HZKV,  	  Форма, "Форма1ДФ");
	ЗаполнитьПоказательНаСервере("ПериодОтчетаГод",  	 PERIOD_YEAR,  Форма, "Форма1ДФ");
	
	ЗаполнитьПоказательНаСервере("R00G03I",   1, Форма, "Форма1ДФ");
	
	ЗаполнитьПоказательНаСервере("TIN",   КодЕДРПОУ, 		Форма, "СлужебныеДанные");
	ЗаполнитьПоказательНаСервере("HTIN",  КодЕДРПОУ, 		Форма, "Форма1ДФ");
	
	ТелБух = РегламентированнаяОтчетностьВызовСервера.ПолучитьТелефонОтветственногоЛица(Форма, Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	ТелРук = РегламентированнаяОтчетностьВызовСервера.ПолучитьТелефонОтветственногоЛица(Форма, Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	
	ЗаполнитьПоказательНаСервере("HBUH",   ФИОГлавБуха, 		Форма, "Форма1ДФ");
	ЗаполнитьПоказательНаСервере("HKBUH",  ИННГлавБуха, 		Форма, "Форма1ДФ");
	ЗаполнитьПоказательНаСервере("HTELBUH", ТелБух, 			Форма, "Форма1ДФ");
	
	ЗаполнитьПоказательНаСервере("HFILL",  Форма.ДатаПодписи, Форма, "Форма1ДФ");
	
	Если Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ЗаполнитьПоказательНаСервере("HBOS",   ФИОДиректора, 	Форма, "Форма1ДФ");
		ЗаполнитьПоказательНаСервере("HKBOS",  ИННДиректора, Форма, "Форма1ДФ");
		ЗаполнитьПоказательНаСервере("HTELBOS",ТелРук, 			Форма, "Форма1ДФ");
		ЗаполнитьПоказательНаСервере("HKFO",    "", 				Форма, "Форма1ДФ");		
		ЗаполнитьПоказательНаСервере("HFO",    "", 				Форма, "Форма1ДФ");
		ЗаполнитьПоказательНаСервере("HTELFO", "",	 			Форма, "Форма1ДФ");
	Иначе
		ЗаполнитьПоказательНаСервере("HBOS",   "", Форма, "Форма1ДФ");
		ЗаполнитьПоказательНаСервере("HKBOS",  "", Форма, "Форма1ДФ");
		ЗаполнитьПоказательНаСервере("HTELBOS","", Форма, "Форма1ДФ");
		ЗаполнитьПоказательНаСервере("HKFO",   ИННДиректора, 	Форма, "Форма1ДФ");		
		ЗаполнитьПоказательНаСервере("HFO",    ФИОДиректора,	Форма, "Форма1ДФ");
		ЗаполнитьПоказательНаСервере("HTELFO", ТелРук,	 		Форма, "Форма1ДФ");
	КонецЕсли;	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПоказательНаСервере(ИмяОбласти, Значение, Форма, ИмяРазделаПоказателя);

	ТекРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Если ТекРаздел = ИмяРазделаПоказателя Тогда
	
		Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение = Значение;
		
	Иначе	
		
		Форма["СтруктураДанных" + ИмяРазделаПоказателя].Вставить(ИмяОбласти, Значение);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПоказательНаСервере(ИмяОбласти, Форма, ИмяРазделаПоказателя)

	ТекРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Если ТекРаздел = ИмяРазделаПоказателя Тогда
		
		Возврат Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение;
		
	Иначе	
		
		Значение = Неопределено;
		Форма["СтруктураДанных" + ИмяРазделаПоказателя].Свойство(ИмяОбласти, Значение);
		
		Если Значение = Неопределено Тогда
			
			ДанныеПоказателя = Форма.мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента, КодПоказателяПоФорме", ИмяРазделаПоказателя, ИмяОбласти));
			Если ДанныеПоказателя.Количество() > 0
				И (    ДанныеПоказателя[0].ТипДанныхПоказателя = "Ч"
				   ИЛИ ДанныеПоказателя[0].ТипДанныхПоказателя = "Е") Тогда
				Значение = 0;	   
			Иначе
				Значение = "";	
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Значение;
		
	КонецЕсли;	

КонецФункции // ()

// СобратьДанныеТекущегоТаблПоляНаСервере()
//
&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции // СобратьДанныеТекущегоТаблПоляНаСервере()

// СобратьДанныеТекущегоТаблПоляНаКлиенте()
//
&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции // СобратьДанныеТекущегоТаблПоляНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере()
//
&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
		
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере()

// ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте()
//
&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы1", СтруктураРеквизитовФормы.мИдГруппы1);
	ИдГрупп.Вставить("мИдГруппы2", СтруктураРеквизитовФормы.мИдГруппы2);
		
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	
	Перем ИмяГруппы;
	
	ИмяГруппы = Новый Массив;
	
	Если ИмяЛиста = Неопределено Тогда
        ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Форма1ДФ" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы1);
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаСервере()

// ОбновитьСтруктуруМногострочногоРазделаНаКлиенте()
//
&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаКлиенте()

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
    Перем ЕстьДуплекс;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация =	СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	ДатаПодписи			                              = СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи;
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий					                      = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
				
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
				
			КонецЕсли;
						
		КонецЦикла;
						
	КонецЕсли;
    	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	СписокСохранения.Свойство("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("Расшифровка", ТаблицаРасшифровки);
	Если ТипЗнч(ТаблицаРасшифровки) = Тип("ТаблицаЗначений") Тогда
		СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки = ПоместитьВоВременноеХранилище(ТаблицаРасшифровки, УникальныйИдентификатор);
		Элементы.Расшифровать.Доступность = Истина;
	КонецЕсли;
	
	СписокСохранения.Свойство("ДатаВыплатыНач",  		СтруктураРеквизитовФормы.ДатаВыплатыНач);
	СписокСохранения.Свойство("ДатаВыплатыКон",  		СтруктураРеквизитовФормы.ДатаВыплатыКон);
	СписокСохранения.Свойство("Подразделение",  		СтруктураРеквизитовФормы.Подразделение);
	СписокСохранения.Свойство("ОбособленноеПодразделение", СтруктураРеквизитовФормы.ОбособленноеПодразделение);
	СписокСохранения.Свойство("ВыплатыЗПНеРегулярны",  	СтруктураРеквизитовФормы.ВыплатыЗПНеРегулярны);
	СписокСохранения.Свойство("НеВключатьЧПников",  	СтруктураРеквизитовФормы.НеВключатьЧПников);
	//ИНАГРО ++
	СписокСохранения.Свойство("ЗаполнятьПоНачисленному",СтруктураРеквизитовФормы.ЗаполнятьПоНачисленному);
	СписокСохранения.Свойство("НеВСельсовете",  	    СтруктураРеквизитовФормы.НеВСельсовете);
	СписокСохранения.Свойство("Сельсовет",  			СтруктураРеквизитовФормы.Сельсовет);
	//ИНАГРО --
	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
					
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
				                     				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
								
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								ИмяГруппыМассив =  ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ);
								
								ЭлСтруктуры.Значение = ЭтаФорма["Хранилище" + ИмяГруппыМассив[0]].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, ЭлСтруктуры.Значение);
								
								НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(ЭлСтруктуры.Значение);
								
							КонецЦикла;
							
						ИначеЕсли ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("ТаблицаЗначений") Тогда
							
							ИмяГруппыМассив =  ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ЭлементСтруктуры.Ключ);
							
							СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ИмяГруппыМассив[0]].Добавить().Таблица;
														
							ЗначениеВДанныеФормы(СтрокаТаблЗнач.ДанныеДопСтрок, СтрокаТаблЗначДанныеДопСтрок);
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтрокаТаблЗначДанныеДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
								   				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;

	СписокСохранения.Свойство("ЕстьДуплекс", ЕстьДуплекс);
	Если ЕстьДуплекс = Неопределено Тогда
		ЕстьДуплекс = Ложь;
	КонецЕсли;
	СтруктураРеквизитовФормы.ЕстьДуплекс = ЕстьДуплекс;
	Элементы.ЕстьДуплекс.Пометка         = ЕстьДуплекс;
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;
	ИмяТекРаздела = "Форма1ДФ";
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, 1);
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);

	Модифицированность   = Ложь;
	
КонецПроцедуры // ВосстановитьСохраненныеДанные()

// ВывестиРазделВТабличныйДокументНаКлиенте()
//
&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры // ВывестиРазделВТабличныйДокументНаКлиенте()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры // ВывестиРазделВТабличныйДокументНаСервере()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//  ПерерисоватьСтроки - Истина из процедуры удаления доп. строк, для перерисовки областей.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = Неопределено)
	Перем ИсходноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
		
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	ПерерисоватьСтроки = (НЕ ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы);
		
	Раздел = Форма[ТекТабличноеПолеИмя];
	
	КолонкиГруппы = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];		
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе");
		
		КолонкиМногострочныхРазделов = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов;
		ИмяОбластиПечати			 = "";
		
		ДанныеОПечатиОтчета = Форма.мДеревоСтраницОтчета.ПолучитьЭлементы();
		Для Сч = 1 По ДанныеОПечатиОтчета.Количество() Цикл
			ДанныеОПечатиСтраницы = ДанныеОПечатиОтчета[Сч - 1];	
			Если ДанныеОПечатиСтраницы.ИмяСтраницы = ТекущаяСтраница Тогда
				ИмяОбластиПечати = ДанныеОПечатиСтраницы.ИмяОбластиТабличногоПоля;	
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		
		РегламентированнаяОтчетностьВызовСервера.ВывестиРазделВТабличныйДокументНаСервере(НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, КолонкиМногострочныхРазделов, ИмяОбластиПечати);
		
		Форма[ТекТабличноеПолеИмя] = Раздел;
		ТекТабличноеПоле           = Форма[ТекТабличноеПолеИмя];
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
		
		Для Каждого КолонкаТаблицыИмя Из КолонкиГруппы Цикл
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;
				
				ОбластьЯчейкиТаблицы          = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
	
	СтрокВГруппе 		= СтруктураГруппы.Количество();
	СтрокВТабличномПоле = Форма.мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы];
	КоличествоСтрок = МАКС(СтрокВГруппе, СтрокВТабличномПоле);
	Если ИмяКолонкиНомера <> Неопределено Тогда
		
		Для НомерСтрокиВФормеТаблицы = 1 По КоличествоСтрок Цикл
			
			НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
			ИмяЯчейки                	= ИмяКолонкиНомера + "_" + НомерСтрокиВФормеТаблицыСтр;
			ОбластьЯчейкиТаблицы     	= ТекТабличноеПоле.Области[ИмяЯчейки];
	
			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				ОбластьЯчейкиТаблицы.Значение = НомерСтрокиВФормеТаблицы + НомерПервойСтроки - 1;
			Иначе
				ОбластьЯчейкиТаблицы.Текст = НомерСтрокиВФормеТаблицы + НомерПервойСтроки - 1;
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

&НаКлиенте
Процедура СохранитьОтчет(Команда)
		
	СохранитьНаКлиенте();
		
КонецПроцедуры

// СохранитьНаКлиенте()
//
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт

	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, Автосохранение) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(Автосохранение, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
				
КонецПроцедуры // СохранитьНаКлиенте()

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// ПередСохранением()
//
&НаСервере
Функция ПередСохранением(Автосохранение, НаимТекРаздела)
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Возврат Сохранить(Автосохранение, НаимТекРаздела);
		
КонецФункции // ПередСохранением()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
&НаСервере
Функция Сохранить(Автосохранение = Ложь, НаимТекРаздела) Экспорт	
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
			
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, Автосохранение, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета 			 = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета 		 = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаПодписи              = ДатаПодписи;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;

	СохранитьДанныеРаздела(НаимТекРаздела, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

	
	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	СписокСохранения.Вставить("ДатаВыплатыНач",  		СтруктураРеквизитовФормы.ДатаВыплатыНач);
	СписокСохранения.Вставить("ДатаВыплатыКон",  		СтруктураРеквизитовФормы.ДатаВыплатыКон);
	СписокСохранения.Вставить("Подразделение",  		СтруктураРеквизитовФормы.Подразделение);
	СписокСохранения.Вставить("ОбособленноеПодразделение", СтруктураРеквизитовФормы.ОбособленноеПодразделение);
	СписокСохранения.Вставить("ВыплатыЗПНеРегулярны",  	СтруктураРеквизитовФормы.ВыплатыЗПНеРегулярны);
	СписокСохранения.Вставить("НеВключатьЧПников",  	СтруктураРеквизитовФормы.НеВключатьЧПников);
	
	//ИНАГРО ++
	СписокСохранения.Вставить("ЗаполнятьПоНачисленному",СтруктураРеквизитовФормы.ЗаполнятьПоНачисленному);
	СписокСохранения.Вставить("НеВСельсовете",  	    СтруктураРеквизитовФормы.НеВСельсовете);
	СписокСохранения.Вставить("Сельсовет",  			СтруктураРеквизитовФормы.Сельсовет);
	//ИНАГРО --
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					Если (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок.Количество() > 0)
					   И (ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
																			
						СтрокаТаблЗнач.ДанныеДопСтрок = ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение, Тип("ТаблицаЗначений"));
						
						Ном = Ном + 1;
						
						Продолжить;
							
					КонецЕсли;
					
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок Цикл
														
						СтруктураДанныхДопСтрок.Вставить(ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
			
					Ном = Ном + 1;
								
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;
		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	// вствляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	СписокСохранения.Вставить("СохранятьРасшифровку", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	
	Если СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки <> Неопределено Тогда
	
		ТаблицаРасшифровки = ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);

		Если СтруктураРеквизитовФормы.мСохранятьРасшифровку = Истина Тогда
			СписокСохранения.Вставить("Расшифровка", ТаблицаРасшифровки);
		КонецЕсли;
		
	КонецЕсли;
	
	// вствляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	СписокСохранения.Вставить("ЕстьДуплекс", СтруктураРеквизитовФормы.ЕстьДуплекс);
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1';uk='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
			
	Модифицированность   = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Возврат Истина;

КонецФункции // Сохранить()

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоказателиОтчетаНаСервере()

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			ЗаполнитьПоказателиЗначениямиПоУмолчанию(Раздел.ИмяСтраницы);
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);	
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры // ЗаполнитьПустыеСтруктурыДанных()

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры // СохранитьДеревоНастройкиСтраниц()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы <> Неопределено Тогда 
		
		Если ЗавершениеРаботы И Модифицированность Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("РегламентированнаяОтчетность", "РегламентированнаяОтчетность_1ДФ_ВыплатыЗПНеРегулярны", СтруктураРеквизитовФормы.ВыплатыЗПНеРегулярны);	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("РегламентированнаяОтчетность", "РегламентированнаяОтчетность_1ДФ_ЧислоВыплатыЗП", 	  День(СтруктураРеквизитовФормы.ДатаВыплатыКон));	
	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ЗавершениеРаботы <> Неопределено Тогда
		
		Если ЗавершениеРаботы Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
		
КонецПроцедуры // ПриЗакрытии()

// ПриЗакрытииНаСервере()
//
&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("РегламентированнаяОтчетность", "ЕстьДуплекс", СтруктураРеквизитовФормы.ЕстьДуплекс);
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытииНаСервере()

// ПоказатьСтраницуМногостраничногоРазделаНаКлиенте()
//
&НаКлиенте
Процедура ПоказатьСтраницуМногостраничногоРазделаНаКлиенте(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	
	ПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРазделаНаКлиенте()

// ПоказатьСтраницуМногостраничногоРазделаНаСервере()
//
&НаСервере
Процедура ПоказатьСтраницуМногостраничногоРазделаНаСервере(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	
	ПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
		
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРазделаНаСервере()

// ПоказатьСтраницуМногостраничногоРаздела()
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСтраницуМногостраничногоРаздела(Форма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьСтраницуМногостраничногоРаздела(Форма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	//Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
	//	#Если НаКлиенте Тогда
	//		Форма.ИзменитьЦветЯчеекНаКлиенте();
	//	#Иначе
	//		Форма.ИзменитьЦветЯчеекНаСервере();
	//	#КонецЕсли
	//КонецЕсли;
	
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

&НаКлиенте
Процедура ИзменитьЦветЯчеекНаКлиенте() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры // ИзменитьЦветЯчеекНаКлиенте()

&НаСервере
Процедура ИзменитьЦветЯчеекНаСервере() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры // ИзменитьЦветЯчеекНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьЦветЯчеек(Форма)

	//КодОперации = СокрЛП(Форма.ТабличныйДокумент.Области.П000200007003.Значение);
	//
	//Если КодОперации = "1011705" ИЛИ КодОперации = "1011707" Тогда
	//	
	//	Если Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
	//		ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200006003");
	//	Иначе	
	//		ИзменитьВариантЗаполненияЯчейки(Форма, 4, "П000200006003");
	//	КонецЕсли;
	//
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200008003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200009003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200010003");
	//	
	//Иначе	
	//	
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 0, "П000200006003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200008003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200009003");
	//	ИзменитьВариантЗаполненияЯчейки(Форма, 5, "П000200010003");
	//	
	//	Форма.ТабличныйДокумент.Области.П000200008003.Значение = "";
	//	Форма.ТабличныйДокумент.Области.П000200009003.Значение = "";
	//	Форма.ТабличныйДокумент.Области.П000200010003.Значение = "";
	//			
	//КонецЕсли;
		
КонецПроцедуры // ИзменитьЦветЯчеек()

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьВариантЗаполненияЯчейки(Форма, НовыйВариант, Показатель = Неопределено)
    		
	ИмяТекущейСтраницыПанели = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
    		
	#Если НаКлиенте Тогда
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
	#Иначе
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
	#КонецЕсли
	
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяОбласть  = Форма.Элементы.ТабличныйДокумент.ТекущаяОбласть;
	Если Показатель = Неопределено Тогда
		ИмяПоказателя   = ТекущаяОбласть.Имя;
	Иначе
		ИмяПоказателя = Показатель;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.НайтиСтроки(Новый Структура("КодПоказателя", ИмяПоказателя));
	Если НайденнаяСтрока.Количество() > 0 Тогда
		НайденнаяСтрока = НайденнаяСтрока[0];
		НайденнаяСтрока.ВариантЗаполнения = НовыйВариант;
	КонецЕсли;

	УстановитьЦветФонаЯчейки(Форма, ИмяПоказателя, НовыйВариант);
		
КонецПроцедуры // ИзменитьВариантЗаполненияЯчейки()

// ОбновитьПеременныеМодуляНаСервере()
//
&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции // ОбновитьПеременныеМодуляНаСервере()

// ОбновитьПеременныеМодуляНаКлиенте()
//
&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции // ОбновитьПеременныеМодуляНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(Форма, ИмяПоказателя, ЗначениеПоказателя)
	
	ИзмененияПроизошли = Ложь;
	
	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;
	
	////Если (ИмяПоказателя = "Сумма30Раздел1")
	//// Или (ИмяПоказателя = "Сумма40Раздел1")
	//// Или (ИмяПоказателя = "Сумма50Раздел1")
	//// Или (ИмяПоказателя = "Сумма60Раздел1") Тогда
	////	Форма.мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	////	ИзмененияПроизошли = Истина;
	////ИначеЕсли ИмяПоказателя = "КБКРаздел1" Тогда
	////	Форма.мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	////	ИзмененияПроизошли = Истина;
	////ИначеЕсли ИмяПоказателя = "ОКАТОРаздел1" Тогда
	////	Форма.мСтруктураПеременных.Вставить(ИмяПоказателя, ЗначениеПоказателя);
	////	ИзмененияПроизошли = Истина;
	////КонецЕсли;

	Возврат ИзмененияПроизошли;
	
КонецФункции // ОбновитьПеременныеМодуля()

// ОчиститьТабличноеПолеНаКлиенте()
//
&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры // ОчиститьТабличноеПолеНаКлиенте()

// ОчиститьТабличноеПолеНаСервере()
//
&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры // ОчиститьТабличноеПолеНаСервере()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	// Непосредственно очищаем ячейки табличного документа. РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле делает то же самое
	// Повторно, так как в результате расчета многостраничного многострочного блока заполняются итоговые ячейки, 
	// в арифметике которых есть показатели не из многострочного блока
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		Если Найти(Врег(ТекущаяОбласть.Имя), ВРег("Штампик")) > 0  Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;

	ЗаполнитьСведенияОбОрганизации(Форма);
	
КонецПроцедуры // ОчиститьТабличноеПоле()

// РасчетНаКлиенте()
//
&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры // РасчетНаКлиенте()

// РасчетНаСервере()
//
&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры // РасчетНаСервере()

// РАСЧЕТ()
// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет
// Параметры:
//  ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//
&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", ОбластьИмя = "")
	Перем ТаблицаБлока;
	
	Если (Форма.СтруктураРеквизитовФормы.мРежимПечати) Тогда
		Возврат; // служебный вызов в процессе печати
	КонецЕсли;
	
	Если (Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
		Возврат; // отключен режим авторасчета
	КонецЕсли;
	
	// обновим данные многострочных групп
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда
		
		ИдГрупп = Новый Структура;
		ИдГрупп.Вставить("мИдГруппы1", Форма.СтруктураРеквизитовФормы.мИдГруппы1);
		
		ИмяГруппыМассив =  ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяСтраницыПанели, , ИдГрупп);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
			РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппы1, ТаблицаБлока);
	ТаблицаБлока = Форма[ТаблицаБлока];

	ЗаполнитьПоказательНаСервере("R01G03A", ТаблицаБлока.Итог("T1RXXXXG03A"), Форма, "Форма1ДФ");
	ЗаполнитьПоказательНаСервере("R01G03",  ТаблицаБлока.Итог("T1RXXXXG03"),  Форма, "Форма1ДФ");
	ЗаполнитьПоказательНаСервере("R01G04A", ТаблицаБлока.Итог("T1RXXXXG04A"), Форма, "Форма1ДФ");
	ЗаполнитьПоказательНаСервере("R01G04",  ТаблицаБлока.Итог("T1RXXXXG04"),  Форма, "Форма1ДФ");
	
	ЗаполнитьПоказательНаСервере("R02G01I", ТаблицаБлока.Количество(), Форма, "Форма1ДФ");
	ЗаполнитьПоказательНаСервере("R02G03I", НомерСтраницыПриПечати(Форма, 0), Форма, "Форма1ДФ");
	
КонецПроцедуры // Расчет()

&НаКлиентеНаСервереБезКонтекста
Функция НомерСтраницыПриПечати(Форма, Знач ТекСтрока = 0)
	
	Перем СтруктураГруппы;
	
	спПарам = Форма.СтруктураРеквизитовФормы.спПараметрыСтраницы;
	
	КвоСтрокТаблицы = Форма.T1R.Количество();
	
	Если ТекСтрока = 0 Тогда
    	//так как последняя строка таблицы будет выводится вместе с подвалом, то количество страниц
		//совпадет со страницей, на которую попадет последняя строка
		ТекСтрока = КвоСтрокТаблицы;
    КонецЕсли;	
	
	КвоСтрокНаСтранице = спПарам.КвоСтрокНаСтранице;
	ВысотаОснШапки 	   = спПарам.ВысотаОснШапки;
	ВысотаДопШапки 	   = спПарам.ВысотаДопШапки;
	ВысотаПодвала 	   = спПарам.ВысотаПодвала;
	КвоСтрокВТаблицеЕслиСтраницаОдна = спПарам.КоличествоСтрокТаблицыНаЕдинственнойСтранице;
	
	Если ТекСтрока <= КвоСтрокВТаблицеЕслиСтраницаОдна Тогда
		
		Возврат 1;
		
	ИначеЕсли ВысотаОснШапки + ВысотаДопШапки + ТекСтрока > КвоСтрокНаСтранице Тогда
		НомерСтраницы = 2 + Цел((ВысотаОснШапки + ВысотаДопШапки + ТекСтрока - КвоСтрокНаСтранице)/(КвоСтрокНаСтранице - ВысотаДопШапки)); 
	    ПустыеСтрокиНаСтранице = КвоСтрокНаСтранице - (ВысотаОснШапки + ВысотаДопШапки + ТекСтрока - КвоСтрокНаСтранице)%(КвоСтрокНаСтранице - ВысотаДопШапки);
	Иначе
		НомерСтраницы = 1;
		ПустыеСтрокиНаСтранице = КвоСтрокНаСтранице - ВысотаОснШапки - ВысотаДопШапки - ТекСтрока;	
	КонецЕсли;
	
	ОставшиесяСтрокиТаблицы = КвоСтрокТаблицы - ТекСтрока;
	
	Если (ПустыеСтрокиНаСтранице < ОставшиесяСтрокиТаблицы + ВысотаПодвала) 
		 И (ОставшиесяСтрокиТаблицы=0) Тогда
		//таблица с подвалом не поместится на этой странице
		//перенесем последнюю строку таблицы на следующую страницу
		Возврат НомерСтраницы+1
	Иначе 
		Возврат НомерСтраницы
	КонецЕсли
	
КонецФункции 

// ОкруглитьЧислоПоФормату(Форма, )
//
&НаКлиентеНаСервереБезКонтекста
Функция ОкруглитьЧислоПоФормату(Форма, ИсходноеЧисло)
	
	Перем Делитель;
	
	Если Форма.СоответствиеЕдиницыИзмеренияДелителю.Свойство("Окр" + СтрЗаменить(Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения, " ", ""), Делитель) Тогда
		
		Возврат Окр(ИсходноеЧисло / Делитель, Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения) * Делитель;
		
	КонецЕсли;
	
КонецФункции // ОкруглитьЧислоПоФормату(Форма, )

&НаКлиенте
Процедура ДобавитьСтраницу(Команда)
	
	ВставитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
				
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницу(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьСтраницуЗавершение", ЭтотОбъект), НСтр("ru='Удалить текущую страницу?';uk='Видалити поточну сторінку?'"), РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
			
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтраницуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
    
    КопияТекущиеДанные = ТекущиеДанные;
    
    ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
    
    Если ТекущиеДанные = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Если ТекущиеДанные.ПолучитьЭлементы().Количество() = 1 Тогда
        Возврат;
    КонецЕсли;
    
    ТекущаяСтраницаРазделаПослеУдаления = Неопределено;
    Если КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ТекущиеДанные.ПолучитьЭлементы().Количество() Тогда
        ТекущаяСтраницаРазделаПослеУдаления = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(ТекущиеДанные.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", КопияТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета - 1);
        СтруктураРеквизитовФормы.НомерТекущейСтраницы = ТекущаяСтраницаРазделаПослеУдаления.КолонкаНомерСтраницыРазделаОтчета;
    КонецЕсли;
    
    УдалитьДополнительнуюСтраницуНаСервере(Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
    
    ТекущиеДанные.ПолучитьЭлементы().Удалить(ТекущиеДанные.ПолучитьЭлементы().Индекс(КопияТекущиеДанные));
    
    НомерСтраницы = 1;
    
    Для Каждого СтраницаРаздела Из ТекущиеДанные.ПолучитьЭлементы() Цикл
        
        СтраницаРаздела.КолонкаРазделыОтчета              = "Страница " + НомерСтраницы;
        СтраницаРаздела.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
        
        НомерСтраницы = НомерСтраницы + 1;
        
    КонецЦикла;
    
    Если НЕ ТекущаяСтраницаРазделаПослеУдаления = Неопределено Тогда
        Элементы.РазделыОтчета.ТекущаяСтрока = ТекущаяСтраницаРазделаПослеУдаления.ПолучитьИдентификатор();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеСтраницы(Команда)
	
	ТекущиеДанные = Элементы.РазделыОтчета.ТекущиеДанные;
	
	Если ТекущиеДанные.ПолучитьРодителя() = Неопределено
	   И ТекущиеДанные.ПолучитьЭлементы().Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Если ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Количество() <= 1 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийРаздел" + ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
			
КонецПроцедуры

&НаСервере
Процедура ВставитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(ЭтаФорма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз <> 0 И ЭтаФорма[мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели]].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы = ИмяТекущейСтраницыПанели;
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В разделе ""%1"" максимальное количество экземпляров страниц равно %2.';uk='В розділі ""%1"" максимальна кількість екземплярів сторінок дорівнює 
|%2.'"), ЗаголовокСтраницы, МаксКолвоЭкз);

			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ТабличныйДокумент";
	ТекТабличноеПоле         = ЭтаФорма[ИмяТекТабличногоПоля];
		
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура ("АктивнаяСтраница", Истина));
	
	Если СтрТаблицаСтраницы.Количество() > 0 Тогда

		СтрТаблицаСтраницы = СтрТаблицаСтраницы[0];
		
		// Убираем активность у текущей страницы
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;
        		
	КонецЕсли;
	
	// Добавляем новую страницу
	СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();
	
	// Присваиваем представление по умолчанию
	СтрНоваяСтраница.Представление      = "Новая страница";
	СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;
	
	// Ставим признак активной страницы
	СтрНоваяСтраница.АктивнаяСтраница   = Истина;
	
	ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели);
	
	Модифицированность = Истина;
			
КонецПроцедуры // ВставитьДополнительнуюСтраницуНаСервере()

&НаСервере
Процедура ПослеДобавленияДопСтрНаСервере(ИмяТекТабличногоПоля, ИмяТекущейСтраницыПанели)
	
	ОчиститьТабличноеПолеНаСервере(ИмяТекущейСтраницыПанели);
		
	СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели);
	
	ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // ПослеДобавленияДопСтрНаСервере()

&НаСервере
Процедура ПослеВставкиДополнительнойСтраницыНаСервере(ИмяТекущейСтраницыПанели)
	
	//Если ИмяТекущейСтраницыПанели = "Раздел2" Тогда
	//	ИзменитьЦветЯчеекНаСервере();
	//КонецЕсли;
	
	РегламентированнаяОтчетность.ПослеВставкиДополнительнойСтраницыНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
		
КонецПроцедуры // ПослеВставкиДополнительнойСтраницыНаСервере()

&НаСервере
Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере(ИмяТекущейСтраницыПанели)
	
	//итоговые ячейки не очистились - необходимо провести расчет
	//для этого сохраним данные страницы
	РегламентированнаяОтчетностьКлиентСервер.СохранитьДанныеМногостраничногоРазделаВактивнойСтранице(ЭтаФорма, ИмяТекущейСтраницыПанели, Истина);
	
КонецПроцедуры // СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеНаСервере()

&НаСервере
Процедура УдалитьДополнительнуюСтраницуНаСервере(ИмяТекущейСтраницыПанели = Неопределено)

	РегламентированнаяОтчетность.УдалитьДополнительнуюСтраницуНаСервере(ЭтаФорма, ИмяТекущейСтраницыПанели);
	РасчетНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
		
КонецПроцедуры // УдалитьДополнительнуюСтраницуНаСервере()

// ДобавитьСтроку()
//
&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	
	#Если ВебКлиент Тогда
		
		ВставитьДополнительнуюСтрокуНаСервере();
		
	#Иначе
		
		ВставитьДополнительнуюСтрокуНаКлиенте();
		
	#КонецЕсли
	
КонецПроцедуры // ДобавитьСтроку()

// УдалитьСтроку()
//
&НаКлиенте
Процедура УдалитьСтроку(Команда)
	
	ТекТабличноеПоле = ЭтаФорма["ТабличныйДокумент"];

	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(ЭтаФорма, ТекущаяОбласть);
	
	Если ИмяГруппы = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не выбрана удаляемая строка многострочного раздела.';uk='Не обрано строку багаторядкового розділу, що видаляється'");
	
		Сообщение.Сообщить();
		
		Возврат;
		
	КонецЕсли;

	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьСтрокуЗавершение", ЭтотОбъект), СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Удалить выбранную строку?%1(Внимание! Данная операция необратима)';uk='Вилучити вибраний рядок?%1(Увага! Дана операція необоротна)'"), Символы.ПС), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    #Если ВебКлиент Тогда
        УдалитьДополнительнуюСтрокуНаСервере();
    #Иначе
        УдалитьДополнительнуюСтрокуНаКлиенте();
    #КонецЕсли
	
	СтруктураРеквизитовФормы.спПараметрыСтраницы.Вставить("КвоСтрокТаблицы", T1R.Количество());
	ТабличныйДокумент.Области.R02G01I.Значение =  T1R.Количество();
	ТабличныйДокумент.Области.R02G03I.Значение = НомерСтраницыПриПечати(ЭтаФорма);

КонецПроцедуры // УдалитьСтроку()

&НаСервере
Процедура ВставитьДополнительнуюСтрокуНаСервере()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // ВставитьДополнительнуюСтрокуНаСервере()

&НаКлиенте
Процедура ВставитьДополнительнуюСтрокуНаКлиенте()
	
	ВставитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // ВставитьДополнительнуюСтрокуНаКлиенте()

// Создает новую строку многострочного раздела.
// Процедура вставляет строку в многострочный блок.
//
// Параметры:
//  Форма          - ссылка на форму отчета
//  ИмяГруппыБлока - имя группы, в том случае, если необходимо вставить строки в процедурах автозаполнения, без фокусировок.
//  СпециальноеДобавление - режим добавления строк по нестандартному алгоритму, когда в правой части распологаются данные.
//  ИмяКолонкиНомера - имя колонки, в которой необходимо проставлять номер при вставки строки.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ВставитьДополнительнуюСтроку(Форма, ИмяГруппыБлока = Неопределено, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = 1) Экспорт
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	Если ИмяГруппыБлока = Неопределено Тогда
		// Сначала выполним проверку на активную страницу панели формы,
		// которая содержит многострочный раздел
			
		ТекущаяСтраница = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
		ТекТабличноеПоле = Форма.ТабличныйДокумент;

		ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
		#Если НаКлиенте Тогда
			ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
		#Иначе
			ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
		#КонецЕсли

		Если ИмяГруппы = Неопределено Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = НСтр("ru='Не выбран многострочный раздел, в который необходимо добавить строку.';uk='Не обрано багаторядковий розділ, у який необхідно додати рядок.'");

			Сообщение.Сообщить();
			
			Возврат;
			
		КонецЕсли;
	Иначе
		ИмяГруппы = ИмяГруппыБлока;
	КонецЕсли;

	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	
	КолонкиГруппы = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];
	
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	ИмяПервойКолонки = КолонкиГруппы[0];
	ИмяПервойЯчейкиПоследнейСтроки = ИмяПервойКолонки + "_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;
	
	НазначитьИмяОбластиМЧ = Ложь;
	ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
	Если Найти(ВставляемаяОбласть.Имя, "МногострочнаяЧасть") > 0 Тогда
		НазначитьИмяОбластиМЧ = Истина;
		ИмяМногострочнойЧасти = ВставляемаяОбласть.Имя;
	КонецЕсли;

	Если СпециальноеДобавление Тогда
		
	Иначе
				
		// добавляем в таблицу новую строку
		РегламентированнаяОтчетностьВызовСервера.ВставитьОбластьВТабличныйДокумент(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
		Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
		
	КонецЕсли;
	
	Если НазначитьИмяОбластиМЧ Тогда
		ТекТабличноеПоле.Область(НомерНижнЯчейкиОбласти + 1, , НомерНижнЯчейкиОбласти + (НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти) + 1, ).Имя = "";
		ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, ).Имя = ИмяМногострочнойЧасти;
	КонецЕсли;

	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	
	Для Каждого ИмяКолонки ИЗ КолонкиГруппы Цикл
		
		// переопределяем имена вставленной области
		Если СтруктураГруппы[0].Свойство(ИмяКолонки) Тогда
			
			ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
			ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;
			
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
			ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;
			
			// определяем границы ячейки исходной области
			НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
			НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
			НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
			НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;
			
			// Назначаем имя ячейки исходной области,
			// (т.к. в результате вставки новой области оно было очищено)
			ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
			ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;
			
			// очищаем значения ячеек вставленной области
			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ОбластьЯчейки.Очистить();
			КонецЕсли;
			
			Если ИмяКолонкиНомера <> Неопределено Тогда
				Если ИмяКолонкиНомера = ИмяКолонки Тогда
					Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
						ОбластьЯчейки.Значение = КолСтрок + НомерПервойСтроки;
					Иначе
						ОбластьЯчейки.Текст = КолСтрок + НомерПервойСтроки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Если ИмяГруппыБлока = Неопределено Тогда

		// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
		// Определяем текущую область таблицы
		
		//ИмяТекущейОбласти = ИмяГруппы + "01_" + КолСтрокСтр1;
		ИмяТекущейОбласти = ИмяПервойКолонки + "_" + КолСтрокСтр1;

		Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
				
		// установим фокус на поле табличн. документа
		ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];
		
	КонецЕсли;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();

	Форма.Модифицированность = Истина;
	
	Форма.СтруктураРеквизитовФормы.спПараметрыСтраницы.Вставить("КвоСтрокТаблицы", Форма.T1R.Количество());
	Форма.ТабличныйДокумент.Области.R02G01I.Значение =  Форма.T1R.Количество();
	Форма.ТабличныйДокумент.Области.R02G03I.Значение = НомерСтраницыПриПечати(Форма);
			
КонецПроцедуры // ВставитьДополнительнуюСтроку()

&НаСервере
Процедура УдалитьДополнительнуюСтрокуНаСервере()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // УдалитьДополнительнуюСтрокуНаСервере()

&НаКлиенте
Процедура УдалитьДополнительнуюСтрокуНаКлиенте()
	
	УдалитьДополнительнуюСтроку(ЭтаФорма);
	
КонецПроцедуры // УдалитьДополнительнуюСтрокуНаКлиенте()

// Удаляет строку многострочного раздела формы.
&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = 1) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;
    	
	ТекущаяСтраница = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;
	ТекТабличноеПоле = Форма.ТабличныйДокумент;

	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	#Если НаКлиенте Тогда
		ИмяГруппы = РегламентированнаяОтчетностьКлиент.РазделТекущейОбласти(Форма, ТекущаяОбласть);
	#Иначе
		ИмяГруппы = РегламентированнаяОтчетностьВызовСервера.РазделТекущейОбластиНаСервере(Форма, ТекущаяОбласть);
	#КонецЕсли

	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
	
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	
	СтруктураГруппы = Форма[СтруктураГруппы];
   	КолонкиГруппы = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];
	ИмяПервойКолонки = КолонкиГруппы[0];
	
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = Форма.Элементы["ТабличныйДокумент"].ТекущаяОбласть;
	ИмяЯчейки = ТекущаяОбласть.Имя;

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число(Сред(ИмяЯчейки, Найти(ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		
		//ИмяПервойЯчейкиУдаляемойСтроки = ИмяГруппы + "01_" + Формат(НомУдаляемойСтроки, "ЧГ=0");
		ИмяПервойЯчейкиУдаляемойСтроки = ИмяПервойКолонки + "_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе").НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0];
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Верх + ВысотаСтроки - 1;
		
		МногострочностьВРазделе = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ДанныеФормыКоллекция") Тогда
			ИмяОбластиМнгЧ = МногострочностьВРазделе.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].Область;
		КонецЕсли;
		// Найдем координаты области, для последующего восстановления.

		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;

		Если СпециальноеДобавление Тогда
			
		Иначе
					
			РегламентированнаяОтчетностьВызовСервера.УдалитьОбластьИзТабличногоДокумента(ТекТабличноеПоле, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		
			Форма[ТекТабличноеПолеИмя] = ТекТабличноеПоле;
			
		КонецЕсли;
		// Восстановим область.
		ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр - 1];

				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				
				Для Каждого КолонкаИмя ИЗ КолонкиГруппы Цикл
					
					Если СтруктураГруппы[0].Свойство(КолонкаИмя) Тогда
						
						ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
						НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;
						
						ОбластьСдвинутойЯчейки = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
						ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;
						
						Если ИмяКолонкиНомера <> Неопределено Тогда
							Если ИмяКолонкиНомера = КолонкаИмя Тогда
								// обновляем порядковый номер строки
								
								НовыйПорядковыйНомер = НСтр - 1 + НомерПервойСтроки - 1;
								
								Если ОбластьСдвинутойЯчейки.СодержитЗначение = Истина Тогда
									ОбластьСдвинутойЯчейки.Значение = НовыйПорядковыйНомер;
								Иначе
									ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			НомерСтрокиВТаблице = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1 + НомерПервойСтроки - 1;
			
			Для Каждого КолонкаТаблицыИмя ИЗ КолонкиГруппы Цикл
				
				Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
					
					Если ИмяКолонкиНомера <> Неопределено Тогда
						Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
							// обновляем порядковый номер строки
							СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;	
				
			КонецЦикла;
		
		КонецЦикла;

		// Данные в многострочном блоке обновляются в декларациях!
		// Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
		// Обновляем экранную форму табличного документа
		#Если НаКлиенте Тогда
			Форма.ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы);
		#Иначе
			Форма.ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы);
		#КонецЕсли
		
	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	//ИмяТекущейОбласти = ИмяГруппы + "01_" + Формат(НомТекущейСтроки, "ЧГ=0");
	ИмяТекущейОбласти = ИмяПервойКолонки + "_" + Формат(НомТекущейСтроки, "ЧГ=0");
	
	Форма.Элементы[ТекТабличноеПолеИмя].ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	ТекущийЭлемент = Форма.Элементы[ТекТабличноеПолеИмя];

	Форма.Модифицированность = Истина;
		
	#Если НаКлиенте Тогда
		Форма.РасчетНаКлиенте(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#Иначе
		Форма.РасчетНаСервере(Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	#КонецЕсли

КонецПроцедуры // УдалитьДополнительнуюСтроку()
		
&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки 			 = Область.Имя;
	НаименованиеТекЛиста = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	Если ИмяЯчейки = "HZ" Тогда
		
		ТабличныйДокумент.Области["HZ"].Значение = "X";
		ТабличныйДокумент.Области["HZN"].Значение = "";
		ТабличныйДокумент.Области["HZU"].Значение = "";
		
		ЗаполнитьПоказательНаСервере("C_DOC_STAN", 1,  ЭтаФорма, "СлужебныеДанные");
		
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	КонецЕсли;

	Если ИмяЯчейки = "HZN" Тогда
		
		ТабличныйДокумент.Области["HZ"].Значение = "";
		ТабличныйДокумент.Области["HZN"].Значение = "X";
		ТабличныйДокумент.Области["HZU"].Значение = "";
		
		ЗаполнитьПоказательНаСервере("C_DOC_STAN", 2,  ЭтаФорма, "СлужебныеДанные");
		
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Если ИмяЯчейки = "HZU" Тогда
		
		ТабличныйДокумент.Области["HZ"].Значение = "";
		ТабличныйДокумент.Области["HZN"].Значение = "";
		ТабличныйДокумент.Области["HZU"].Значение = "X";
		
		ЗаполнитьПоказательНаСервере("C_DOC_STAN", 3,  ЭтаФорма, "СлужебныеДанные");
		
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Если ИмяЯчейки = "HJ" Тогда
		
		ТабличныйДокумент.Области["HJ"].Значение = "X";
		ТабличныйДокумент.Области["HF"].Значение = "";
		
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Если ИмяЯчейки = "HF" Тогда
		
		ТабличныйДокумент.Области["HJ"].Значение = "";
		ТабличныйДокумент.Области["HF"].Значение = "X";
		
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Если Лев(ИмяЯчейки, 10) = "T1RXXXXG02" Тогда

        ДополнительныеДанные = Новый Структура("ИмяЯчейки", ИмяЯчейки);

		СписокВыбораТипа = Новый СписокЗначений;
		СписокВыбораТипа.Добавить("Строка", НСтр("ru='Ввести вручную';uk='Ввести вручну'"));
		СписокВыбораТипа.Добавить("ФизическиеЛица", НСтр("ru='Выбрать из справочника Физ. лиц                      ';uk='Вибрати з довідника Фіз. осіб '"));
		СписокВыбораТипа.Добавить("Контрагенты", НСтр("ru='Выбрать из справочника Контрагентов                     ';uk='Вибрати з довідника Контрагентів '"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборВидаСправочникаДляВыбораИНН", ЭтаФорма, ДополнительныеДанные);
		
		ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбораТипа, Элементы.ТабличныйДокумент);
		
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбораВПолеТабличногоДокумента()

&НаКлиенте
Процедура ВыборВидаСправочникаДляВыбораИНН(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборИННЗавершение", ЭтаФорма, ДополнительныеПараметры);
	
	Если ЗначениеВыбора.Значение = "Строка" Тогда
	    ПоказатьВводСтроки(ОписаниеОповещения, ТабличныйДокумент.Область(ДополнительныеПараметры.ИмяЯчейки).Значение, НСтр("ru='ИНН';uk='ІПН'"));
	Иначе		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
		ОткрытьФорму("Справочник."+ЗначениеВыбора.Значение+".ФормаВыбора",Новый Структура("Отбор", СтруктураПараметров),ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИННЗавершение(ЗначениеВыбора, ДополнительныеПараметры) Экспорт

	Если ЗначениеВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Строка") Тогда
		
		ТабличныйДокумент.Область(ДополнительныеПараметры.ИмяЯчейки).Значение = ЗначениеВыбора;		
		
	иначе
		
		ИНН = ПолучитьИНННаСервере(ЗначениеВыбора);
	
		ТабличныйДокумент.Область(ДополнительныеПараметры.ИмяЯчейки).Значение = ИНН;	
		ТабличныйДокумент.Область(СтрЗаменить(ДополнительныеПараметры.ИмяЯчейки,"G02","GFIO")).Значение = Строка(ЗначениеВыбора);	
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИНННаСервере(Объект)
	
	ИНН = "";
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФизическиеЛица.Ссылка.КодПоДРФО КАК ИНН
	               |ИЗ
	               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |ГДЕ
	               |	ФизическиеЛица.Ссылка = &Объект
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Контрагенты.Ссылка.КодПоЕДРПОУ
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.Ссылка = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
	
		ИНН = Выборка.ИНН;	
	
	КонецЕсли;

	Возврат ИНН
	
КонецФункции


&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	Модифицированность = Истина;
		
	ПараметрВводаПоля = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", Область.Имя));
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	
КонецПроцедуры // ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента()

&НаКлиенте
Процедура ДатаПодписиПриИзменении(Элемент)
	
	ЗаполнитьДатуПодписи(ЭтаФорма);
	
	Модифицированность = Истина;
		
КонецПроцедуры // ДатаПодписиПриИзменении()

&НаСервере
Процедура ПослеСменыЕдИзмеренияИТочности()

	ЗаполнитьПустыеСтруктурыДанных();
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
		
КонецПроцедуры // ПослеСменыЕдИзмеренияИТочности()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
&НаСервере
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в гривнах точность не может превышать 2 знака';uk='%1: при виведенні сум у гривнях точність не може перевищувати 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах гривен точность не может превышать 3 знака';uk='%1: при виведенні сум в тисячах гривень точність не може перевищувати 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах гривен точность не может превышать 6 знаков';uk='%1: при виведенні сум у мільйонах гривень точність не може перевищувати 6 знаків'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
		
КонецПроцедуры // Обновить()

&НаКлиенте
Процедура ОткрытьФормуНастроек(Команда)
	
	ОткрытьФормуВыбораСтраниц("ВыбратьДляНастройки");
	    
КонецПроцедуры // ОткрытьФормуНастроек()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("Автосохранение", Ложь);
	Если СтруктураРеквизитовФормы.ОтображатьКнопкуРасшифровать Тогда
		мПараметры.Вставить("СохранятьРасшифровкуАвтозаполнения", СтруктураРеквизитовФормы.мСохранятьРасшифровку);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет",		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", 		СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
					
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
    
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Если РезультатВыбора <> Неопределено Тогда
		КопироватьДанныеФормы(РезультатВыбора, мДеревоВыбранныхСтраниц);
		РегламентированнаяОтчетностьКлиентСервер.ПрорисоватьПодменюПечать(ЭтаФорма);
		Модифицированность = Истина;
					
		флЗначенияИдентичны = Истина;
		
		Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
			
			Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = РезультатВыбора.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
				флЗначенияИдентичны = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			
			#Если ВебКлиент Тогда
				ИзменитьТаблицуВариантовЗаполненияНаСервере();
			#Иначе
				РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			#КонецЕсли	
			
			Расчет(ЭтаФорма);
			
		КонецЕсли;
		
		Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		 ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
			ПослеСменыЕдИзмеренияИТочности();
		КонецЕсли;
		
		// Управляем видимостью страниц основной панели формы
	    РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
		
		Если НЕ флЗначенияИдентичны Тогда
			
			СформироватьДеревоРазделовОтчетаНаКлиенте();
			
			Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
				
				// Пытаемся найти ранее запомненный раздел.
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
				
				Если НЕ НайденнаяСтрока = Неопределено 
					И НЕ НомерСтраницыРазделаОтчета = Неопределено 
					И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
					
					НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
					
				КонецЕсли;
				
				// В случае успешного поиска, устанавливаем курсор на найденный раздел.
				Если НЕ НайденнаяСтрока = Неопределено Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				КонецЕсли;
				
			КонецЕсли;
			
			// обнулим информацию о выделенных областях, так как набор страниц были изменен.
			СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Неопределено;
			
		КонецЕсли;
		
	Иначе
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры // ИзменитьТаблицуВариантовЗаполненияНаСервере()

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
		
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)

	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела" + Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхФорма1ДФ.Очистить();
	СтруктураДанныхСлужебныеДанные.Очистить();
	
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	
КонецПроцедуры // ОчиститьНаСервере()

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры // ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере()

&НаКлиенте
Функция НайтиСвойстваПоказателя(КодПоказателя)
	
	СвойстваПоказателя = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", КодПоказателя));
		
	Если СвойстваПоказателя.Количество() = 0 Тогда
		
		СвойстваПоказателя = Неопределено;
		
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(КодПоказателя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				СвойстваПоказателя = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		СвойстваПоказателя = СвойстваПоказателя[0];
		
	КонецЕсли;
		
	Возврат СвойстваПоказателя;
	
КонецФункции // НайтиСвойстваПоказателя()

&НаКлиенте
Процедура ВвестиПоказатель(Элемент, Область, КодПоказателя, Знач ЭтоСумма, Знач ТекстВыбора, ТаблицаВыбора, СтандартнаяОбработка, КолонкаПоиска = "Код") Экспорт
	
	Если ТаблицаВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	//если показатель входит в состав многострочной части, тогда имя области не будет совпадать с переданным кодом показателя
	//необходимо это учесть
	//считаем, что в многострочной части не может быть показателя, состоящего из нескольких ячеек
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда

		ИсходноеЗначение = ?(ТипЗнч(Область.Значение) = Тип("Строка"), СокрЛП(Область.Значение), Область.Значение);
	Иначе
		Разделитель = ?(Лев(Область.Имя, СтрДлина(КодПоказателя) + 1) = КодПоказателя + "_", "_", "");
		ИндексОбласти = 1;
		ИсходноеЗначение = "";
		Пока ЭтаФорма[ТекущийЭлемент.Имя].Области.Найти(КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")) <> Неопределено Цикл
			ИсходноеЗначение = ИсходноеЗначение + Строка(ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(ИндексОбласти, "ЧГ=")].Значение);
			ИндексОбласти = ИндексОбласти + 1;
		КонецЦикла;
		ИсходноеЗначение = СокрЛП(ИсходноеЗначение);
	КонецЕсли;
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",          ТекстВыбора);
	ПараметрыФормы.Вставить("ТаблицаЗначений",    ТаблицаВыбора);
	ПараметрыФормы.Вставить("СтруктураДляПоиска", Новый Структура(КолонкаПоиска, ИсходноеЗначение));
	
	ДополнительныеПараметры = Новый Структура("ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент", ИндексОбласти, КодПоказателя, КолонкаПоиска, Область, Разделитель, Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВвестиПоказательЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.ФормаВыбораЗначенияИзТаблицы", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ВвестиПоказатель()

&НаКлиенте
Процедура ВвестиПоказательЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИндексОбласти = ДополнительныеПараметры.ИндексОбласти;
	КодПоказателя = ДополнительныеПараметры.КодПоказателя;
	КолонкаПоиска = ДополнительныеПараметры.КолонкаПоиска;
	Область = ДополнительныеПараметры.Область;
	Разделитель = ДополнительныеПараметры.Разделитель;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Область.Имя = КодПоказателя ИЛИ РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(ЭтаФорма, КодПоказателя) > 0 Тогда
		Область.Значение = РезультатВыбора[КолонкаПоиска];
	Иначе
		СтрокаРезультатВыбора = Строка(РезультатВыбора[КолонкаПоиска]);
		Для Инд = СтрДлина(СтрокаРезультатВыбора) + 1 По ИндексОбласти - 1 Цикл
			СтрокаРезультатВыбора = " " + РезультатВыбора[КолонкаПоиска];
		КонецЦикла;
		Для Инд = 1 По ИндексОбласти - 1 Цикл
			ЭтаФорма[ТекущийЭлемент.Имя].Области[КодПоказателя + Разделитель + Формат(Инд, "ЧГ=")].Значение = СокрЛП(Сред(РезультатВыбора[КолонкаПоиска], Инд, 1));
		КонецЦикла;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Область.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)

	ВыгрузитьОтчет();

КонецПроцедуры // Выгрузить()      

&НаКлиенте
Процедура ВыгрузитьОтчет() Экспорт
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьОтчетЗавершение", ЭтотОбъект);
	
	Если Модифицированность Тогда
		СохранитьНаКлиенте(,ОписаниеОповещения);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Открыть();
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт

	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
		
КонецПроцедуры // АктивизироватьЯчейку()


// ПоказатьБланк()
//
&НаКлиенте
Процедура ПоказатьБланк(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры // ПоказатьБланк()

// ПечататьСразу()
//
&НаКлиенте
Процедура ПечататьСразу(Команда)
	
	Печать(Команда.Имя);
	
КонецПроцедуры // ПечататьСразу()

// Обрабатывает полученный из формы ФормаНастройкиОтчета дерево значений,
// определяет состав помеченных для вывода на печать листов.
//
// Параметры:
//  ВидПечати - строка, задающая способ печати:
//              "ПоказатьБланк" - непосредственный вывод на печать;
//              "ПечататьСразу" - с предварительным просмотром.
//
&НаКлиенте
Процедура Печать(ВидПечати, ЧтоИскать = Неопределено, НеИзФормыОтчета = Ложь) Экспорт
	
	Если НЕ РегламентированнаяОтчетность.ПринтерДоступен() Тогда
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Перед формированием печатных форм необходимо определить в системе принтер и%1задать его в качестве используемого по умолчанию!';uk='Перед формуванням друкованих форм необхідно визначити в системі принтер%1задати його в якості використовуваного за замовчуванням!'"), Символы.ПС));				
		Возврат;
	КонецЕсли;
              	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1. Формируется печатная форма...';uk='%1. Формується друкована форма...'"), ЭтаФорма.Заголовок), , , БиблиотекаКартинок.Печать);
				
	ПечатьНаСервере(ВидПечати, ЧтоИскать);
		
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуПредварительногоПросмотра(ЭтаФорма, ВидПечати, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;

КонецПроцедуры // Печать()

// ПечатьНаСервере()
//
&НаСервере
Процедура ПечатьНаСервере(ВидПечати, ЧтоИскать = Неопределено);
				
	СтруктураРеквизитовФормы.мПечатныеФормы.Очистить();
	СтруктураРеквизитовФормы.мРежимПечати = Истина;
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
				
	сохрТаблДок = ТабличныйДокумент.ПолучитьОбласть();
	
	ОбщиеРеквизитыРазделов = Новый Структура();
	
	Для Каждого СтрокаУровня1 Из мДеревоВыбранныхСтраниц.ПолучитьЭлементы() Цикл
		
		Если СтрокаУровня1.ВыводНаПечать = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаименованиеЛиста",  СтрокаУровня1.Представление);
		СтруктураПараметров.Вставить("ОриентацияЛиста",    СтрокаУровня1.ОриентацияСтраницы);
		СтруктураПараметров.Вставить("ИмяСтраницы",        СтрокаУровня1.ИмяСтраницы);
		Структурапараметров.Вставить("ИмяОбластиТаблПоля", СтрокаУровня1.ИмяОбластиТабличногоПоля);
		СтруктураПараметров.Вставить("ВидПечати",          ВидПечати);
		СтруктураПараметров.Вставить("АвтоМасштаб",        Истина);
		СтруктураПараметров.Вставить("ЕстьДуплекс",        СтруктураРеквизитовФормы.ЕстьДуплекс);
		Если НЕ мСтруктураМногостраничныхРазделов.Свойство(СтрокаУровня1.ИмяСтраницы) Тогда
			
			ВывестиМакетВТаблДокНаСервере(СтрокаУровня1.ИмяСтраницы, 0);
			ВывестиНаПечатьЛист(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		Иначе
			
			СтруктураПараметров.Вставить("ИмяСтраницыПанели", СтрокаУровня1.ИмяСтраницы);
			ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметров, ОбщиеРеквизитыРазделов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(сохрТаблДок);
	
	РегламентированнаяОтчетностьКлиентСервер.ПроставлениеНомеровЛистов(ЭтаФорма, , СтруктураРеквизитовФормы.СписокПечатаемыхЛистов);
	
КонецПроцедуры // ПечатьНаСервере()

&НаСервереБезКонтекста
//Процедура для вывода целых чисел в массив "клеток" в "шапке" и "дне" отчета 
Процедура ЗначениеВКлетку(Знач Значение, Знач Нули, Размер,ИмяПараметра,ТекущаяОбластьМакета)
	Пустышка = ?(Нули = 1, "0", " ");
	ЗначСтр = "";
    ЗначСтр = Строка(Значение);
		ДлинаЗнач = СтрДлина(ЗначСтр);
		Пока ДлинаЗнач < Размер Цикл
			// дозаполним значение пустышками (слева!!!)
			ЗначСтр = Пустышка + ЗначСтр;
			ДлинаЗнач = ДлинаЗнач + 1;
		КонецЦикла;
	// заполним массив
	Для Инд = 1 По Размер Цикл
		ТекущаяОбластьМакета.Параметры[ИмяПараметра + Инд] = Сред(ЗначСтр,Инд,1) 
	КонецЦикла;
КонецПроцедуры

//процедура выделения копеек и вывола их в строку
Процедура КопейкиВСтроку(Знач НачЗначение, КонечСтрока) 
	НачЗначение = ? (НачЗначение < 0, - НачЗначение, НачЗначение);
	
	КоличествоКопеек = Окр((НачЗначение-Цел(НачЗначение))* 100,0);
	
	КонечСтрока = Формат(КоличествоКопеек, "ЧЦ=2; ЧН=; ЧВН=; ЧГ=0");
	
КонецПроцедуры   

// Процедура управляет выводом отдельных страниц отчета на печать.
//
// Параметры:
//   Парам1 - структура, содержащая параметры печаты страницы:
//      - Имя выводимого на печать листа;
//      - ориентация страницы;
//      - имя табличного поля, который выводится на печать;
//      - имя области дабличного документа, выводимой на печать;
//      - строка, задающая способ печати.Принимает значения:
//           "ПечататьСразу" - непосредственный вывод на печать;
//           "ПечататьБланк" - с предварительным просмотром.
//
&НаСервере
Процедура ВывестиНаПечатьЛист(Парам1, ОбщиеРеквизитыРазделов)
		
	НомерЛиста =0;
	
	ТабДокумент  = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы[Парам1.ОриентацияЛиста];
	
	Макет = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет("ПечатнаяФорма2015УФ");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	
	ОбластьМакета.Параметры["ТипФ1"] = СтруктураДанныхФорма1ДФ.HZ;
	ОбластьМакета.Параметры["ТипФ2"] = СтруктураДанныхФорма1ДФ.HZN;
	ОбластьМакета.Параметры["ТипФ3"] = СтруктураДанныхФорма1ДФ.HZU;

  	Для Инд = 1 По 10 Цикл
		ОбластьМакета.Параметры["ПД" + Инд] = Сред(СтруктураДанныхФорма1ДФ.HTIN, Инд, 1);
	КонецЦикла; 
	
	ОбластьМакета.Параметры.ОргНаименование  = СтруктураДанныхФорма1ДФ.HNAME;
	ОбластьМакета.Параметры.ОргЮрАдрес = СтруктураДанныхФорма1ДФ.HLOC;
	ОбластьМакета.Параметры.ЮрЛ  = СтруктураДанныхФорма1ДФ.HJ;
	ОбластьМакета.Параметры.ФизЛ  = СтруктураДанныхФорма1ДФ.HF;
	ОбластьМакета.Параметры.ОтделНИ       = СтруктураДанныхФорма1ДФ.HSTI;
	
	ЗначениеВКлетку(ФОрмат(СтруктураДанныхФорма1ДФ.ПериодОтчетаКвартал,"ЧГ=0"),0, 1 ,"ПерКв",ОбластьМакета);
	ЗначениеВКлетку(ФОрмат(СтруктураДанныхФорма1ДФ.ПериодОтчетаГод,"ЧГ=0"),0, 4 ,"ПерГод",ОбластьМакета);
	
	Если СтруктураДанныхФорма1ДФ.R00G01I <> 0 Тогда
		ЗначениеВКлетку(ФОрмат(СтруктураДанныхФорма1ДФ.R00G01I,"ЧГ=0"),0, 7 ,"Шт",ОбластьМакета);
	Иначе
		ОбластьМакета.Параметры.Шт7= "-";
	КонецЕсли;
	
	Если СтруктураДанныхФорма1ДФ.R00G02I <> 0 Тогда
		ЗначениеВКлетку(ФОрмат(СтруктураДанныхФорма1ДФ.R00G02I,"ЧГ=0"),0, 7 ,"свм",ОбластьМакета);
	Иначе
		ОбластьМакета.Параметры.свм7= "-";
	КонецЕсли;
	
	Если СтруктураДанныхФорма1ДФ.R00G03I <> 0 Тогда
		ЗначениеВКлетку(ФОрмат(СтруктураДанныхФорма1ДФ.R00G03I,"ЧГ=0"),0, 4 ,"Порция",ОбластьМакета);
	Иначе
		ОбластьМакета.Параметры.Порция4= "-";
	КонецЕсли;
	
  // наконец вывод на печать именованной области макета
  ТабДокумент.Вывести(ОбластьМакета);
  
  ОбластьМакета = Макет.ПолучитьОбласть("ИменаСтолбцов");
  ТабДокумент.Вывести(ОбластьМакета);

  СтруктураРеквизитовФормы.спПараметрыСтраницы.Вставить("КвоСтрокТаблицы", T1R.Количество());
  ТекСтраница = 1;
  
  Для НСтр = 1 По T1R.Количество() Цикл
	  
	  Если ТекСтраница < НомерСтраницыПриПечати(ЭтаФорма, НСтр)  Тогда
		  ТекСтраница = ТекСтраница + 1;
		  
		  ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц(); 
		  ОбластьМакета = Макет.ПолучитьОбласть("НомерСтраницы");
		  ЗначениеВКлетку(ТекСтраница, 0, 5,"НСтран",ОбластьМакета);
		  
		  ТабДокумент.Вывести(ОбластьМакета);
		  ОбластьМакета = Макет.ПолучитьОбласть("ИменаСтолбцов");
		  ТабДокумент.Вывести(ОбластьМакета);
		  
	  КонецЕсли;
	  
	  ОбластьМакета = Макет.ПолучитьОбласть("Строка");
	  ЗначениеВКлетку(НСтр, 1, 5,"НомПП",ОбластьМакета);
	  
	  ИмяНужнойЯчейки = "T1RXXXXG02_" + Формат(НСтр , "ЧГ=0");
	  ИНН = Формат(СтруктураДанныхФорма1ДФ[ИмяНужнойЯчейки], "ЧГ=");
	  Для Инд = 1 По 10 Цикл
		  ОбластьМакета.Параметры["ИНН" + Инд] = Сред(ИНН, Инд, 1);
	  КонецЦикла; 
	  
	  ИмяНужнойЯчейки = "T1RXXXXG03A_" + Формат(НСтр , "ЧГ=0");
	  Если (СтруктураДанныхФорма1ДФ[ИмяНужнойЯчейки] <> 0) Тогда
		  ОбластьМакета.Параметры.СумНачислДохГрн = Цел(СтруктураДанныхФорма1ДФ[ИмяНужнойЯчейки]);
		  КопейкиВСтроку(СтруктураДанныхФорма1ДФ[ИмяНужнойЯчейки], ОбластьМакета.Параметры.СумНачислДохКоп);
	  Иначе
		  ОбластьМакета.Параметры.СумНачислДохГрн = "" + "-"; 
		  ОбластьМакета.Параметры.СумНачислДохКоп= "" + "-"; 
	  КонецЕсли;
	  
	  ИмяНужнойЯчейки = "T1RXXXXG03_" + Формат(НСтр , "ЧГ=0");
	  Если (СтруктураДанныхФорма1ДФ[ИмяНужнойЯчейки] <> 0) Тогда
		  ОбластьМакета.Параметры.СумВыплачДохГрн = Цел(СтруктураДанныхФорма1ДФ[ИмяНужнойЯчейки]);
		  КопейкиВСтроку(СтруктураДанныхФорма1ДФ[ИмяНужнойЯчейки], ОбластьМакета.Параметры.СумВыплачДохКоп);
	  Иначе
		  ОбластьМакета.Параметры.СумВыплачДохГрн = "" + "-"; 
		  ОбластьМакета.Параметры.СумВыплачДохКоп= "" + "-"; 
	  КонецЕсли;
	  
	  ИмяНужнойЯчейки = "T1RXXXXG04A_" + Формат(НСтр , "ЧГ=0");
	  Если СтруктураДанныхФорма1ДФ[ИмяНужнойЯчейки] <> 0 Тогда
		  ОбластьМакета.Параметры.СумНачислНДФЛГрн = Цел(СтруктураДанныхФорма1ДФ[ИмяНужнойЯчейки]);
		  КопейкиВСтроку(СтруктураДанныхФорма1ДФ[ИмяНужнойЯчейки], ОбластьМакета.Параметры.СумНачислНДФЛКоп);
	  Иначе
		  ОбластьМакета.Параметры.СумНачислНДФЛГрн = "" + "-"; 
		  ОбластьМакета.Параметры.СумНачислНДФЛКоп= "" + "-"; 
	  КонецЕсли;
	  
	  ИмяНужнойЯчейки = "T1RXXXXG04_" + Формат(НСтр , "ЧГ=0");
	  Если (СтруктураДанныхФорма1ДФ[ИмяНужнойЯчейки] <> 0) Тогда
		  ОбластьМакета.Параметры.СумПеречислНДФЛГрн = Цел(СтруктураДанныхФорма1ДФ[ИмяНужнойЯчейки]);
		  КопейкиВСтроку(СтруктураДанныхФорма1ДФ[ИмяНужнойЯчейки], ОбластьМакета.Параметры.СумПеречислНДФЛКоп);
	  Иначе
		  ОбластьМакета.Параметры.СумПеречислНДФЛГрн = "" + "-"; 
		  ОбластьМакета.Параметры.СумПеречислНДФЛКоп= "" + "-"; 
	  КонецЕсли;
	  
	  ИмяНужнойЯчейки = "T1RXXXXG05_" + Формат(НСтр , "ЧГ=0");
	  ОбластьМакета.Параметры.Пр = СтруктураДанныхФорма1ДФ[ИмяНужнойЯчейки];
	  
	  ИмяНужнойЯчейки = "T1RXXXXG08_" + Формат(НСтр , "ЧГ=0");
	  Если СтрДлина(СтруктураДанныхФорма1ДФ[ИмяНужнойЯчейки])<> 0 Тогда
		  ОбластьМакета.Параметры.КодЛьг  = СтруктураДанныхФорма1ДФ[ИмяНужнойЯчейки];
	  Иначе
		  ОбластьМакета.Параметры.КодЛьг  = "-";
	  КонецЕсли;
	  
	  ИмяНужнойЯчейки = "T1RXXXXG09_" + Формат(НСтр , "ЧГ=0");
	  ОбластьМакета.Параметры.Озн  = СтруктураДанныхФорма1ДФ[ИмяНужнойЯчейки];
	  
	  ИмяНужнойЯчейки = "T1RXXXXG06D_" + Формат(НСтр , "ЧГ=0");
	  Если СтруктураДанныхФорма1ДФ[ИмяНужнойЯчейки] <> '00010101' Тогда
		  ОбластьМакета.Параметры.ДД = Сред(СтруктураДанныхФорма1ДФ[ИмяНужнойЯчейки],1,2);	
		  ОбластьМакета.Параметры.ММ = Сред(СтруктураДанныхФорма1ДФ[ИмяНужнойЯчейки],4,2);
		  ОбластьМакета.Параметры.ГГ = Сред(СтруктураДанныхФорма1ДФ[ИмяНужнойЯчейки],7,4);
	  Иначе	
		  ОбластьМакета.Параметры.ДД = "-";	
		  ОбластьМакета.Параметры.ММ = "-";
		  ОбластьМакета.Параметры.ГГ = "-";
	  КонецЕсли;
	  
	  ИмяНужнойЯчейки = "T1RXXXXG07D_" + Формат(НСтр , "ЧГ=0");
	  Если СтруктураДанныхФорма1ДФ[ИмяНужнойЯчейки] <> '00010101' Тогда
		  ОбластьМакета.Параметры.ДДД = Сред(СтруктураДанныхФорма1ДФ[ИмяНужнойЯчейки],1,2);	
		  ОбластьМакета.Параметры.МММ = Сред(СтруктураДанныхФорма1ДФ[ИмяНужнойЯчейки],4,2);
		  ОбластьМакета.Параметры.ГГГ = Сред(СтруктураДанныхФорма1ДФ[ИмяНужнойЯчейки],7,4);
	  Иначе	
		  ОбластьМакета.Параметры.ДДД = "-";	
		  ОбластьМакета.Параметры.МММ = "-";
		  ОбластьМакета.Параметры.ГГГ = "-";
	  КонецЕсли;
	  
	  ТабДокумент.Вывести(ОбластьМакета);
  КонецЦикла;			

  Если ТекСтраница < НомерСтраницыПриПечати(ЭтаФорма) Тогда
	  ТекСтраница = ТекСтраница + 1;
	  ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц(); 
  КонецЕсли;	  
  
  ОбластьМакета = Макет.ПолучитьОбласть("НомерСтраницы");
  ЗначениеВКлетку(ТекСтраница, 0, 4,"НСтран",ОбластьМакета);
  
  ОбластьМакета = Макет.ПолучитьОбласть("Дно");
  ИтСуммаНачислДохода =СтруктураДанныхФорма1ДФ["R01G03A"];
  Если ИтСуммаНачислДохода <> 0 Тогда
	  ОбластьМакета.Параметры.ИтСуммаНачислДоходаГрн = Цел(ИтСуммаНачислДохода);  
	  КопейкиВСтроку(ИтСуммаНачислДохода, ОбластьМакета.Параметры.ИтСуммаНачислДоходаКоп);
  Иначе
	  ОбластьМакета.Параметры.ИтСуммаНачислДоходаГрн ="-";  
	  ОбластьМакета.Параметры.ИтСуммаНачислДоходаКоп ="-";
  КонецЕсли;	  
  
  ИтСуммаВыплачДохода = СтруктураДанныхФорма1ДФ["R01G03"];
  Если ИтСуммаВыплачДохода <> 0 Тогда
	  ОбластьМакета.Параметры.ИтСуммаВыплачДоходаГрн = Цел(ИтСуммаВыплачДохода);  
	  КопейкиВСтроку(ИтСуммаВыплачДохода, ОбластьМакета.Параметры.ИтСуммаВыплачДоходаКоп);
  Иначе
	  ОбластьМакета.Параметры.ИтСуммаВыплачДоходаГрн ="-";  
	  ОбластьМакета.Параметры.ИтСуммаВыплачДоходаКоп ="-";
  КонецЕсли;	  
  
  ИтСуммаНачислНДФЛ = СтруктураДанныхФорма1ДФ["R01G04A"];
  Если ИтСуммаНачислНДФЛ <> 0 Тогда
	  ОбластьМакета.Параметры.ИтСуммаНачислНДФЛГрн = Цел(ИтСуммаНачислНДФЛ);  
	  КопейкиВСтроку(ИтСуммаНачислНДФЛ, ОбластьМакета.Параметры.ИтСуммаНачислНДФЛКоп);
  Иначе
	  ОбластьМакета.Параметры.ИтСуммаНачислНДФЛГрн ="-";  
	  ОбластьМакета.Параметры.ИтСуммаНачислНДФЛКоп ="-";
  КонецЕсли;	  
  
  ИтСуммаПеречислНДФЛ = СтруктураДанныхФорма1ДФ["R01G04"];
  Если ИтСуммаПеречислНДФЛ <> 0 Тогда
	  ОбластьМакета.Параметры.ИтСуммаПеречислНДФЛГрн = Цел(ИтСуммаПеречислНДФЛ);  
	  КопейкиВСтроку(ИтСуммаПеречислНДФЛ, ОбластьМакета.Параметры.ИтСуммаПеречислНДФЛКоп);
  Иначе
	  ОбластьМакета.Параметры.ИтСуммаПеречислНДФЛГрн ="-";  
	  ОбластьМакета.Параметры.ИтСуммаПеречислНДФЛКоп ="-";
  КонецЕсли;	  
  
  //////////////////////////
  Для СчРазд2 = 1 По 6 Цикл
  
	  Если (СтруктураДанныхФорма1ДФ["R020" + СчРазд2 + "G03A"] <> 0) Тогда
		  ОбластьМакета.Параметры["СумНачислДохГрн" + СчРазд2] = Цел(СтруктураДанныхФорма1ДФ["R020" + СчРазд2 + "G03A"]);
		  КопейкиВСтроку(СтруктураДанныхФорма1ДФ["R020" + СчРазд2 + "G03A"], ОбластьМакета.Параметры["СумНачислДохКоп" + СчРазд2]);
	  Иначе
		  ОбластьМакета.Параметры["СумНачислДохГрн" + СчРазд2] = "" + "-"; 
		  ОбластьМакета.Параметры["СумНачислДохКоп" + СчРазд2] = "" + "-"; 
	  КонецЕсли;
	  
	  Если СчРазд2 >=3  Тогда
		  Если (СтруктураДанныхФорма1ДФ["R020" + СчРазд2 + "G03"] <> 0) Тогда
			  ОбластьМакета.Параметры["СумВыплачДохГрн" + СчРазд2] = Цел(СтруктураДанныхФорма1ДФ["R020" + СчРазд2 + "G03"]);
			  КопейкиВСтроку(СтруктураДанныхФорма1ДФ["R020" + СчРазд2 + "G03"], ОбластьМакета.Параметры["СумВыплачДохКоп" + СчРазд2]);
		  Иначе
			  ОбластьМакета.Параметры["СумВыплачДохГрн" + СчРазд2] = "" + "-"; 
			  ОбластьМакета.Параметры["СумВыплачДохКоп" + СчРазд2] = "" + "-"; 
		  КонецЕсли;
	  КонецЕсли;
	  
	  Если (СтруктураДанныхФорма1ДФ["R020" + СчРазд2 + "G04A"] <> 0) Тогда
		  ОбластьМакета.Параметры["СумНачислНДФЛГрн" + СчРазд2] = Цел(СтруктураДанныхФорма1ДФ["R020" + СчРазд2 + "G04A"]);
		  КопейкиВСтроку(СтруктураДанныхФорма1ДФ["R020" + СчРазд2 + "G04A"], ОбластьМакета.Параметры["СумНачислНДФЛКоп" + СчРазд2]);
	  Иначе
		  ОбластьМакета.Параметры["СумНачислНДФЛГрн" + СчРазд2] = "" + "-"; 
		  ОбластьМакета.Параметры["СумНачислНДФЛКоп" + СчРазд2] = "" + "-"; 
	  КонецЕсли;
	  
	  Если (СтруктураДанныхФорма1ДФ["R020" + СчРазд2 + "G04"] <> 0) Тогда
		  ОбластьМакета.Параметры["СумПеречислНДФЛГрн" + СчРазд2] = Цел(СтруктураДанныхФорма1ДФ["R020" + СчРазд2 + "G04"]);
		  КопейкиВСтроку(СтруктураДанныхФорма1ДФ["R020" + СчРазд2 + "G04"], ОбластьМакета.Параметры["СумПеречислНДФЛКоп" + СчРазд2]);
	  Иначе
		  ОбластьМакета.Параметры["СумПеречислНДФЛГрн" + СчРазд2] = "" + "-"; 
		  ОбластьМакета.Параметры["СумПеречислНДФЛКоп" + СчРазд2] = "" + "-"; 
	  КонецЕсли;
	  
  КонецЦикла; 
  
  ЗначениеВКлетку(Формат(СтруктураДанныхФорма1ДФ.R02G01I, "ЧГ=0"), 0, 6,"Строк",ОбластьМакета);
  ЗначениеВКлетку(Формат(СтруктураДанныхФорма1ДФ.R02G02I, "ЧГ=0"), 0, 6,"ФЛ",ОбластьМакета);
  
  КоличествоСтраниц = НомерСтраницыПриПечати(ЭтаФорма,0);
  ЗначениеВКлетку(КоличествоСтраниц,0,5,"Стр",ОбластьМакета);
  ТабличныйДокумент.Области.R02G03I.Значение = КоличествоСтраниц;
  
  ЗначениеВКлетку(СтруктураДанныхФорма1ДФ.HKBOS, 0, 10,"ИННРук",ОбластьМакета);
  ЗначениеВКлетку(СтруктураДанныхФорма1ДФ.HKBUH, 0, 10,"ИННБух",ОбластьМакета);
  Если СтруктураРеквизитовФормы.Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
	  ЗначениеВКлетку(СтруктураДанныхФорма1ДФ.HTIN, 0, 10,"ИННЧЛ",ОбластьМакета);
  КонецЕсли;
  
  
  ОбластьМакета.Параметры.ФИОДиректор  = СтруктураДанныхФорма1ДФ.HBOS;
  ОбластьМакета.Параметры.ФИОБухгалтер = СтруктураДанныхФорма1ДФ.HBUH;
  ОбластьМакета.Параметры.ФИОЧЛ        = СтруктураДанныхФорма1ДФ.HFO;
  ОбластьМакета.Параметры.ТелД         = СтруктураДанныхФорма1ДФ.HTELBOS;
  ОбластьМакета.Параметры.ТелБ         = СтруктураДанныхФорма1ДФ.HTELBUH;
  ОбластьМакета.Параметры.ТелЧЛ        = СтруктураДанныхФорма1ДФ.HTELFO;
  
  ОбластьМакета.Параметры.ДП = Сред(СтруктураДанныхФорма1ДФ.HFILL,1,2);
  ОбластьМакета.Параметры.МП = Сред(СтруктураДанныхФорма1ДФ.HFILL,4,2);
  ОбластьМакета.Параметры.ГП = Сред(СтруктураДанныхФорма1ДФ.HFILL,7,4);
    
  ТабДокумент.Вывести(ОбластьМакета);
	
  РегламентированнаяОтчетность.ВывестиНаПечатьЛистОбщая(ЭтаФорма.Заголовок, Парам1, ТабДокумент, СтруктураРеквизитовФормы.мПечатныеФормы);
		
КонецПроцедуры // ВывестиНаПечатьЛист()

&НаСервере
Процедура ВывестиНаПечатьДополнительныеСтраницы(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов)
	Перем ИмяСтраницы;
	Перем ТаблицаСтраницРаздела;
	
	СтруктураПараметровСтраницы.Свойство("ИмяСтраницыПанели", ИмяСтраницы);

	Если Не мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
	
	Для Каждого Страница Из ТаблицаСтраницРаздела Цикл
		// выводим на печать каждую страницу многостраничного раздела
		ТекущийИндекс = ТаблицаСтраницРаздела.Индекс(Страница);
		СохрАктивнаяСтраница = ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница;
		ВывестиМакетВТаблДокНаСервере(ИмяСтраницы, ТекущийИндекс + 1);
		ТаблицаСтраницРаздела[ТекущийИндекс].АктивнаяСтраница = СохрАктивнаяСтраница;
		ВывестиНаПечатьЛист(СтруктураПараметровСтраницы, ОбщиеРеквизитыРазделов);
	КонецЦикла;
    		
КонецПроцедуры // ВывестиНаПечатьДополнительныеСтраницы()
      
&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	Если Найти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ВнешнийСтр = НСтр("ru='- внешний отчет';uk='- зовнішній звіт'");
	Заголовок = Заголовок + ?(Найти(ЭтаФорма.ИмяФормы, "Внешний") > 0, ВнешнийСтр, "");
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если Найти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если Найти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
	ИначеЕсли Найти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
			
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры // ОчисткаРегламентированногоОтчетаНаСервере()

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если Найти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
	ИначеЕсли Найти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СформироватьДеревоРазделовОтчетаНаКлиенте();
	
КонецПроцедуры // ОчисткаРегламентированногоОтчетаНаКлиенте()

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	ПараметрыЗаполненияЗвит1С = Неопределено;
	
	ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С);
	
	ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);
	
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.Расшифровать.Видимость Тогда
		Элементы.Расшифровать.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьАвто()

&НаСервере
Процедура ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С) Экспорт
	
	ОчиститьНаСервере();
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	Заполнить(ПараметрыЗаполненияЗвит1С);
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры


&НаСервере
Процедура Заполнить(ПараметрыЗаполненияЗвит1С)
	
	ПараметрыЗаполненияЗвит1С = Новый Структура();
	
	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "ЕРП" Тогда
		Возврат;
	КонецЕсли;	
	
	ДанныеФормы 	= ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы1];
	СтруктураГруппы = ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		
	
	//ИНАГРО ++
		
	УсловиеНаПодразделение = "";
	УсловиеНаПодразделениеСотр = "";	
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.Подразделение) Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") = Истина Тогда
			
			УсловиеНаПодразделение = "И 
									|(ВЫБОР КОГДА Контрагент ССЫЛКА Справочник.Сотрудники
									|	ТОГДА
									|		Контрагент В (ВЫБРАТЬ
									|						РаботникиОрганизацийСрезПоследних.Сотрудник
									|					 ИЗ
									|						РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаКонцаКвартала, Организация = &Организация) КАК РаботникиОрганизацийСрезПоследних
									|					 ГДЕ
									|						(РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации В ИЕРАРХИИ (&Подразделение)
									|						ИЛИ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации = &Подразделение))
									|	ИНАЧЕ НЕ &НеВключатьЧПников
									|КОНЕЦ)";
		
				
		УсловиеНаПодразделениеСотр = "И 
										|(ВЫБОР КОГДА Сотрудник ССЫЛКА Справочник.Сотрудники
										|	ТОГДА
										|		Сотрудник В (ВЫБРАТЬ
										|						РаботникиОрганизацийСрезПоследних.Сотрудник
										|					 ИЗ
										|						РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаКонцаКвартала, Организация = &Организация) КАК РаботникиОрганизацийСрезПоследних
										|					 ГДЕ
										|						(РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации В ИЕРАРХИИ (&Подразделение)
										|						ИЛИ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации = &Подразделение))
										|	ИНАЧЕ НЕ &НеВключатьЧПников
										|КОНЕЦ)";
		КонецЕсли;
		
	КонецЕсли;	
	
	УсловиеПоСельсоветам = "";
	УсловиеНЕ = "";
	
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.Сельсовет) Тогда
		ЗапросПодр = Новый Запрос;
		ЗапросПодр.Текст = "ВЫБРАТЬ
		                   |	ПодразделенияОрганизаций.Ссылка КАК Подразделение
		                   |ИЗ
		                   |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		                   |ГДЕ
		                   |	ПодразделенияОрганизаций.Владелец = &Организация
		                   |	И ПодразделенияОрганизаций.ИНАГРО_Контрагент В(&Сельсоветы)";
		
		ЗапросПодр.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
		ЗапросПодр.УстановитьПараметр("Сельсоветы",  СтруктураРеквизитовФормы.Сельсовет);
		
		Если СтруктураРеквизитовФормы.НеВСельсовете Тогда	
			УсловиеНЕ = "НЕ ";
		КонецЕсли;
		
		ТабПодр = ЗапросПодр.Выполнить().Выгрузить();
		
		СписокПодр = Новый СписокЗначений;
		Для Каждого СтрТабподр из ТабПодр Цикл
			СписокПодр.Добавить(СтрТабподр.Подразделение);
		КонецЦикла;
		
		УсловиеПоСельсоветам	= "И 
		|(Контрагент В
		|		(ВЫБРАТЬ
		|			Контрагенты.Ссылка
		|		ИЗ
		|			Справочник.Контрагенты КАК Контрагенты
		|		ГДЕ
		|	   " + УсловиеНЕ + "
		|			Контрагенты.Родитель.ИНАГРО_Сельсовет В (&Сельсоветы)
		|			)
		|	ИЛИ Контрагент В
		|		(ВЫБРАТЬ
		|			Сотрудник
		|		ИЗ
		|			РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаКонцаКвартала, Организация = &Организация) КАК РаботникиОрганизацийСрезПоследних
		|		ГДЕ
		|			(
		|	   " + УсловиеНЕ + "
		|		РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации В ИЕРАРХИИ (&СписокПодр)
		|				ИЛИ 
		|	   " + УсловиеНЕ + "
		|		РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации В (&СписокПодр))))
		|ИЛИ Контрагент В
		|(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДоговорникиОрганизаций.Сотрудник
		|ИЗ
		|	Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорникиОрганизаций
		|ГДЕ
		|	ДоговорникиОрганизаций.Проведен
		|	И ДоговорникиОрганизаций.ДатаОкончания >= &ДатаНач
		|	И ДоговорникиОрганизаций.ДатаНачала <= КОНЕЦПЕРИОДА(&ДатаНач, КВАРТАЛ)
		|	И ДоговорникиОрганизаций.Организация = &Организация
		|	И " + УсловиеНЕ + " ДоговорникиОрганизаций.ПодразделениеОрганизации.ИНАГРО_Контрагент В (&Сельсоветы))";
				
	КонецЕсли;
	//ИНАГРО --

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр("Подразделение", СтруктураРеквизитовФормы.Подразделение);
	Запрос.УстановитьПараметр("НеВключатьЧПников", СтруктураРеквизитовФормы.НеВключатьЧПников);
	Запрос.УстановитьПараметр("ДатаКонцаКвартала", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаНач", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	//ИНАГРО ++
	Запрос.УстановитьПараметр("Сельсоветы", СтруктураРеквизитовФормы.Сельсовет);
	Запрос.УстановитьПараметр("СписокПодр", СписокПодр);
	//ИНАГРО --
	
	// получим данные по начислениям/перечислениям в разрезе налоговых периодов, но без учета льгот
	// Далее мы определеям по последней записи в регистре (по сотруднику в разрезе налоговых периодов) какая же льгота применялась на самом деле
	// далее добавим в таблицу по начислениям/перечислениям информацию по применявшимся льготам
	// далее свернем таблицу в разрезе льгот (так как налоговый период нам в отчете не нужен).
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент ССЫЛКА Справочник.Сотрудники ТОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент.ФизическоеЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Контрагент КОНЕЦ КАК Контрагент,
	|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.Код КАК ДоходНДФЛ,
	|	НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОбороты.НалоговыйПериод, МЕСЯЦ) КАК НалоговыйПериод,
	
	|	ВЫБОР КОГДА ДоходНДФЛ.ВидСтавкиРезидента = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор) ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ КАК ЭтоВоенныйСбор,
	
	|	СУММА(ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА ВзаиморасчетыПоНДФЛОбороты.Доход ИНАЧЕ 0 КОНЕЦ) КАК ДоходПриход,
	|	СУММА(ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА ВзаиморасчетыПоНДФЛОбороты.Доход ИНАЧЕ 0 КОНЕЦ) КАК ДоходРасход,
	|	СУММА(ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА ВзаиморасчетыПоНДФЛОбороты.Налог ИНАЧЕ 0 КОНЕЦ) КАК НалогПриход,
	|	СУММА(ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА ВзаиморасчетыПоНДФЛОбороты.Налог ИНАЧЕ 0 КОНЕЦ) КАК НалогРасход
	|	ПОМЕСТИТЬ ТаблицаНДФЛБезЛьгот
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛОбороты
	|	ГДЕ 
	|		 Период МЕЖДУ &ДатаНач И &ДатаКон
	|  	   И Организация = &Организация
	|	   " + УсловиеНаПодразделение + "
	|	   " + УсловиеПоСельсоветам + "  //ИНАГРО
	|
	|   СГРУППИРОВАТЬ ПО
	|		ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент ССЫЛКА Справочник.Сотрудники ТОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент.ФизическоеЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Контрагент КОНЕЦ,
	|		ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.Код,
	|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОбороты.НалоговыйПериод, МЕСЯЦ),
	|		ВЫБОР КОГДА ДоходНДФЛ.ВидСтавкиРезидента = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор) ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ 
	|";
	
	Если НЕ СтруктураРеквизитовФормы.ВыплатыЗПНеРегулярны Тогда

		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ //добавим выплаты дохода вида 01 в следующем месяце за последний месяц квартала
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент ССЫЛКА Справочник.Сотрудники ТОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент.ФизическоеЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Контрагент КОНЕЦ КАК Контрагент,
		|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.Код КАК ДоходНДФЛ,
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОбороты.НалоговыйПериод, МЕСЯЦ),
		
		|	ЛОЖЬ,
		
		|	0,
		|	СУММА(ВзаиморасчетыПоНДФЛОбороты.Доход),
		|	0,
		|	СУММА(ВзаиморасчетыПоНДФЛОбороты.Налог)
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛОбороты
		|	ГДЕ 
		|		 Период МЕЖДУ &ДатаКонКвартала И &ДатаВыплатыКон
		|  	   И Организация = &Организация
		|      И ДоходНДФЛ В (&ЗП) 
		|	   И НАЧАЛОПЕРИОДА(ПериодВзаиморасчетов, МЕСЯЦ) = &ПоследнийМесяц
		|      И ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) "+УсловиеНаПодразделение+"
		|	   " + УсловиеПоСельсоветам + " //ИНАГРО
		|СГРУППИРОВАТЬ ПО 
		|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент ССЫЛКА Справочник.Сотрудники ТОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент.ФизическоеЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Контрагент КОНЕЦ,
		|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.Код,
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОбороты.НалоговыйПериод, МЕСЯЦ)
		|
		|ОБЪЕДИНИТЬ ВСЕ //удалим выплаты дохода вида 01 в первом месяце квартала за последний месяц прошлого квартала
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент ССЫЛКА Справочник.Сотрудники ТОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент.ФизическоеЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Контрагент КОНЕЦ КАК Контрагент,
		|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.Код КАК ДоходНДФЛ,
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОбороты.НалоговыйПериод, МЕСЯЦ),
		
		|	ЛОЖЬ,
		
		|	0,
		|	-СУММА(ВзаиморасчетыПоНДФЛОбороты.Доход),
		|	0,
		|	-СУММА(ВзаиморасчетыПоНДФЛОбороты.Налог)
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛОбороты
		|	ГДЕ 
		|		 Период МЕЖДУ &ДатаНачКвартала И &ДатаВыплатыНач
		|  	   И Организация = &Организация
		|      И ДоходНДФЛ В (&ЗП) 
		|	   И НАЧАЛОПЕРИОДА(ПериодВзаиморасчетов, МЕСЯЦ) = &ПрошлыйМесяц
		|      И ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) "+УсловиеНаПодразделение+"
		|	   " + УсловиеПоСельсоветам + "  //ИНАГРО
		|СГРУППИРОВАТЬ ПО 
		|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент ССЫЛКА Справочник.Сотрудники ТОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент.ФизическоеЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Контрагент КОНЕЦ,
		|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.Код,
		|	НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОбороты.НалоговыйПериод, МЕСЯЦ)
		|
		| 
		|";
	
		Запрос.УстановитьПараметр("ДатаНачКвартала", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		Запрос.УстановитьПараметр("ДатаКонКвартала", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета + 1);
		
        Запрос.УстановитьПараметр("ДатаВыплатыНач", КонецДня(СтруктураРеквизитовФормы.ДатаВыплатыНач));
		Запрос.УстановитьПараметр("ДатаВыплатыКон", КонецДня(СтруктураРеквизитовФормы.ДатаВыплатыКон));
		
        Запрос.УстановитьПараметр("ПрошлыйМесяц", 	НачалоМесяца(ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,-1)));
		Запрос.УстановитьПараметр("ПоследнийМесяц", НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
		
		ЗП = Новый Массив();
		ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.Код01);
		ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.Код01ГПХ);
		Запрос.УстановитьПараметр("ЗП", ЗП);

	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	// получим информацию по льготам
	Запрос.Текст = "
	|		ВЫБРАТЬ
	|			ВЫБОР КОГДА НДФЛ.Контрагент ССЫЛКА Справочник.Сотрудники ТОГДА НДФЛ.Контрагент.ФизическоеЛицо ИНАЧЕ НДФЛ.Контрагент КОНЕЦ КАК Контрагент,
	|			НДФЛ.НалоговыйПериод КАК НалоговыйПериод,
	|			НДФЛ.ДоходНДФЛ.Код КАК ДоходНДФЛ,
	|			МАКСИМУМ(ЕСТЬNULL(НДФЛЛьготы.Льгота,ЗНАЧЕНИЕ(Справочник.ВидыЛьготПоНДФЛ.ПустаяСсылка))) КАК Льгота
	|		ПОМЕСТИТЬ  ТаблицаЛьгот
	|		ИЗ (
	|			ВЫБРАТЬ
	|				ВзаиморасчетыПоНДФЛ.Контрагент КАК Контрагент,
	|				ВзаиморасчетыПоНДФЛ.ДоходНДФЛ КАК ДоходНДФЛ,
	|			НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛ.НалоговыйПериод, МЕСЯЦ) КАК НалоговыйПериод,
	|				МАКСИМУМ(ВзаиморасчетыПоНДФЛ.Период) КАК ПериодАктуальнойЛьготы
	|			ИЗ РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛ
	|			ГДЕ	
	//|					ВзаиморасчетыПоНДФЛ.Период >= &ДатаНач
	|					ВзаиморасчетыПоНДФЛ.Период <= &ДатаКон
	|				И	ВзаиморасчетыПоНДФЛ.Организация = &Организация
	|				И	ВзаиморасчетыПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	//ИНАГРО
	//|  	   		И   ВзаиморасчетыПоНДФЛ.ДоходНДФЛ.ВидСтавкиРезидента <> ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор)
	|				И   ВзаиморасчетыПоНДФЛ.ДоходНДФЛ.ВидСтавкиРезидента <> ВзаиморасчетыПоНДФЛ.ДоходНДФЛ.ВидСтавкиВоенныйСбор
	|			" + УсловиеНаПодразделение + "
	|			СГРУППИРОВАТЬ ПО
	|				ВзаиморасчетыПоНДФЛ.Контрагент,
	|				ВзаиморасчетыПоНДФЛ.ДоходНДФЛ,
	|			НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛ.НалоговыйПериод, МЕСЯЦ)
	|   		)КАК НДФЛ
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК НДФЛЛьготы
	|		ПО		
	|			НЕ НДФЛ.НалоговыйПериод ЕСТЬ NULL 
	//|			И	НДФЛЛьготы.Период >= &ДатаНач
	|			И	НДФЛЛьготы.Период <= &ДатаКон
	|			И	НДФЛЛьготы.Организация = &Организация
	|			И	НДФЛЛьготы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			И	НДФЛЛьготы.Контрагент = НДФЛ.Контрагент
	|			И	НДФЛЛьготы.ДоходНДФЛ = НДФЛ.ДоходНДФЛ
	|		И	НАЧАЛОПЕРИОДА(НДФЛЛьготы.НалоговыйПериод, МЕСЯЦ) = НАЧАЛОПЕРИОДА(НДФЛ.НалоговыйПериод, МЕСЯЦ)
	|			И	НДФЛЛьготы.Период = НДФЛ.ПериодАктуальнойЛьготы
	|		СГРУППИРОВАТЬ ПО 
	|			ВЫБОР КОГДА НДФЛ.Контрагент ССЫЛКА Справочник.Сотрудники ТОГДА НДФЛ.Контрагент.ФизическоеЛицо ИНАЧЕ НДФЛ.Контрагент КОНЕЦ,
	|			НДФЛ.НалоговыйПериод,
	|			НДФЛ.ДоходНДФЛ.Код
	|";
	Запрос.Выполнить();

	// соединим данные по ндфл со льготами + свернем
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	ТаблицаНДФЛБезЛьгот.Контрагент КАК Контрагент,
	|	ВЫБОР КОГДА ТаблицаНДФЛБезЛьгот.Контрагент ССЫЛКА Справочник.ФизическиеЛица
	|			ТОГДА ТаблицаНДФЛБезЛьгот.Контрагент.КодПоДРФО
	|		  КОГДА ТаблицаНДФЛБезЛьгот.Контрагент ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ТаблицаНДФЛБезЛьгот.Контрагент.КодПоЕДРПОУ
	|	ИНАЧЕ """" КОНЕЦ КАК ИННСотрудника,
	
	|	ТаблицаНДФЛБезЛьгот.ЭтоВоенныйСбор КАК ЭтоВоенныйСбор,
	
	|	ТаблицаНДФЛБезЛьгот.ДоходНДФЛ КАК ДоходНДФЛ,
	|	ЕСТЬNULL(ТаблицаЛьгот.Льгота,ЗНАЧЕНИЕ(Справочник.ВидыЛьготПоНДФЛ.ПустаяСсылка))  КАК Льгота,
	//ИНАГРО ++
	//|	СУММА(ТаблицаНДФЛБезЛьгот.ДоходПриход) КАК ДоходПриход,
	//|	СУММА(ТаблицаНДФЛБезЛьгот.ДоходРасход) КАК ДоходРасход,
	//|	СУММА(ТаблицаНДФЛБезЛьгот.НалогПриход) КАК НалогПриход,
	//|	СУММА(ТаблицаНДФЛБезЛьгот.НалогРасход) КАК НалогРасход
	|	СУММА(ТаблицаНДФЛБезЛьгот.ДоходПриход) КАК ДоходПриход,
	|	СУММА(ВЫБОР
	|			КОГДА &ЗаполнятьПоНачисленному
	|				ТОГДА ТаблицаНДФЛБезЛьгот.ДоходПриход
	|			ИНАЧЕ ТаблицаНДФЛБезЛьгот.ДоходРасход
	|		КОНЕЦ) КАК ДоходРасход,
	|	СУММА(ТаблицаНДФЛБезЛьгот.НалогПриход) КАК НалогПриход,
	|	СУММА(ВЫБОР
	|			КОГДА &ЗаполнятьПоНачисленному
	|				ТОГДА ТаблицаНДФЛБезЛьгот.НалогПриход
	|			ИНАЧЕ ТаблицаНДФЛБезЛьгот.НалогРасход
	|		КОНЕЦ) КАК НалогРасход
	//ИНАГРО --
	|ИЗ ТаблицаНДФЛБезЛьгот КАК ТаблицаНДФЛБезЛьгот
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЛьгот КАК ТаблицаЛьгот
	|	ПО  
	|		  ТаблицаНДФЛБезЛьгот.Контрагент = ТаблицаЛьгот.Контрагент
	|		И ТаблицаНДФЛБезЛьгот.ДоходНДФЛ = ТаблицаЛьгот.ДоходНДФЛ
	|		И ТаблицаНДФЛБезЛьгот.НалоговыйПериод = ТаблицаЛьгот.НалоговыйПериод
	|
	|		И ТаблицаНДФЛБезЛьгот.ЭтоВоенныйСбор = ЛОЖЬ
	|		
	|	СГРУППИРОВАТЬ ПО 
	|		ТаблицаНДФЛБезЛьгот.Контрагент,
	|		ВЫБОР КОГДА ТаблицаНДФЛБезЛьгот.Контрагент ССЫЛКА Справочник.ФизическиеЛица
	|			ТОГДА ТаблицаНДФЛБезЛьгот.Контрагент.КодПоДРФО
	|		  КОГДА ТаблицаНДФЛБезЛьгот.Контрагент ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ТаблицаНДФЛБезЛьгот.Контрагент.КодПоЕДРПОУ
	|		ИНАЧЕ """" КОНЕЦ,
	
	|		ТаблицаНДФЛБезЛьгот.ЭтоВоенныйСбор,
	
	|		ТаблицаНДФЛБезЛьгот.ДоходНДФЛ,
	|		ЕСТЬNULL(ТаблицаЛьгот.Льгота,ЗНАЧЕНИЕ(Справочник.ВидыЛьготПоНДФЛ.ПустаяСсылка))
	|ИМЕЮЩИЕ (    ЕстьNULL(СУММА(ТаблицаНДФЛБезЛьгот.ДоходПриход),0) <> 0 
	|		  ИЛИ ЕстьNULL(СУММА(ТаблицаНДФЛБезЛьгот.ДоходРасход),0) <> 0
	|		  ИЛИ ЕстьNULL(СУММА(ТаблицаНДФЛБезЛьгот.НалогПриход),0) <> 0
	|		  ИЛИ ЕстьNULL(СУММА(ТаблицаНДФЛБезЛьгот.НалогРасход),0) <> 0)
	|";
	
	Запрос.УстановитьПараметр("ЗаполнятьПоНачисленному", СтруктураРеквизитовФормы.ЗаполнятьПоНачисленному); //ИНАГРО
	
	ТаблицаНДФЛ = Запрос.Выполнить().Выгрузить();
	
	Если СтруктураРеквизитовФормы.СортироватьПоИНН Тогда
	    ТаблицаНДФЛ.Сортировать("ИННСотрудника,Контрагент,ДоходНДФЛ,Льгота");
	Иначе	
		ТаблицаНДФЛ.Сортировать("Контрагент,ИННСотрудника,ДоходНДФЛ,Льгота");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") = Истина Тогда
				
		ЗапросРаботникиНаНачало = Новый Запрос;
		ЗапросРаботникиНаНачало.УстановитьПараметр("ДатаНач", Новый Граница(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета-1, ВидГраницы.Включая));
		ЗапросРаботникиНаНачало.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
		
		//ИНАГРО ++
		//ЗапросРаботникиНаНачало.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	РаботникиОрганизацийСрезПоследних.ФизическоеЛицо КАК Контрагент,
		//|	ВЫБОР
		//|		КОГДА СУММА(ВЫБОР
		//|					КОГДА РаботникиОрганизацийСрезПоследних.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		//|						ТОГДА 0
		//|					ИНАЧЕ 1
		//|				КОНЕЦ) > 0
		//|			ТОГДА ИСТИНА
		//|		ИНАЧЕ ЛОЖЬ
		//|	КОНЕЦ КАК РаботалНаНачалоПериода,
		//|	МАКСИМУМ(ДОБАВИТЬКДАТЕ(РаботникиОрганизацийСрезПоследних.Период, СЕКУНДА, -1)) КАК ДатаУвольнения
		//|ИЗ
		//|	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(&ДатаНач, ГоловнаяОрганизация = &Организация) КАК РаботникиОрганизацийСрезПоследних
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	РаботникиОрганизацийСрезПоследних.ФизическоеЛицо";
		
		ЗапросРаботникиНаНачало.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                                |	ИНАГРО_РаботникиОрганизацийСрезПоследних.Сотрудник.ФизическоеЛицо КАК Контрагент,
		                                |	ВЫБОР
		                                |		КОГДА СУММА(ВЫБОР
		                                |					КОГДА ИНАГРО_РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		                                |						ТОГДА 0
		                                |					ИНАЧЕ 1
		                                |				КОНЕЦ) > 0
		                                |			ТОГДА ИСТИНА
		                                |		ИНАЧЕ ЛОЖЬ
		                                |	КОНЕЦ КАК РаботалНаНачалоПериода,
		                                |	МАКСИМУМ(ДОБАВИТЬКДАТЕ(ИНАГРО_РаботникиОрганизацийСрезПоследних.Период, СЕКУНДА, -1)) КАК ДатаУвольнения
		                                |ИЗ
		                                |	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаНач, Организация = &Организация) КАК ИНАГРО_РаботникиОрганизацийСрезПоследних
		                                |
		                                |СГРУППИРОВАТЬ ПО
		                                |	ИНАГРО_РаботникиОрганизацийСрезПоследних.Сотрудник.ФизическоеЛицо";
		//ИНАГРО --
		
		РаботникиНаНачало = ЗапросРаботникиНаНачало.Выполнить().Выгрузить();
		
		ЗапросДатыКадровыхИзменений = Новый Запрос;
		ЗапросДатыКадровыхИзменений.УстановитьПараметр("ДатаНач", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ЗапросДатыКадровыхИзменений.УстановитьПараметр("ДатаКон", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета + 1); // добавляем день, так как уваольнение "видно" только на следующий день
		ЗапросДатыКадровыхИзменений.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
		
		//ИНАГРО ++
		//ЗапросДатыКадровыхИзменений.Текст = "
		//|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		//|	РаботникиОрганизаций.Период КАК Период,
		//|	РаботникиОрганизаций.ФизическоеЛицо КАК Контрагент
		//|
		//|ИЗ
		//|	РегистрСведений.КадроваяИсторияСотрудников КАК РаботникиОрганизаций
		//|ГДЕ 
		//|
		//|    РаботникиОрганизаций.Период 	>= &ДатаНач 
		//|  И РаботникиОрганизаций.Период 	<= &ДатаКон
		//|  И РаботникиОрганизаций.ГоловнаяОрганизация = &Организация
		//|  И НЕ (РаботникиОрганизаций.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Перемещение))
		//|ИТОГИ ПО Период";
		
		ЗапросДатыКадровыхИзменений.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		                                    |	ИНАГРО_РаботникиОрганизаций.Период КАК Период,
		                                    |	ИНАГРО_РаботникиОрганизаций.Сотрудник.ФизическоеЛицо КАК Контрагент
		                                    |ИЗ
		                                    |	РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК ИНАГРО_РаботникиОрганизаций
		                                    |ГДЕ
		                                    |	ИНАГРО_РаботникиОрганизаций.Период >= &ДатаНач
		                                    |	И ИНАГРО_РаботникиОрганизаций.Период <= &ДатаКон
		                                    |	И ИНАГРО_РаботникиОрганизаций.Организация = &Организация
		                                    |	И НЕ ИНАГРО_РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение)
		                                    |ИТОГИ ПО
		                                    |	Период";
		//ИНАГРО --
		
		ВыборкаПериод = ЗапросДатыКадровыхИзменений.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		РаботникиПриемУвольнение = Новый ТаблицаЗначений();
		РаботникиПриемУвольнение.Колонки.Добавить("Контрагент");
		РаботникиПриемУвольнение.Колонки.Добавить("Период");
		РаботникиПриемУвольнение.Колонки.Добавить("РаботалВПериоде");
		
		ЗапросПриемУвольнение = Новый Запрос;
		ЗапросПриемУвольнение.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
		
		Пока ВыборкаПериод.Следующий() Цикл
			
			МассивФизЛиц = Новый Массив();       
			
			ВыборкаФизическоеЛицо = ВыборкаПериод.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока ВыборкаФизическоеЛицо.Следующий() Цикл
				МассивФизЛиц.Добавить(ВыборкаФизическоеЛицо.Контрагент);	
			КонецЦикла;
			ЗапросПриемУвольнение.УстановитьПараметр("Сотрудники", МассивФизЛиц);
			ЗапросПриемУвольнение.УстановитьПараметр("Период", ВыборкаПериод.Период);
			
			//ИНАГРО ++
			//ЗапросПриемУвольнение.Текст =  "
			//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			//|	РаботникиОрганизацийСрезПоследних.ФизическоеЛицо КАК Контрагент,
			//|	ВЫБОР
			//|		КОГДА МАКСИМУМ(ВЫБОР
			//|					КОГДА РаботникиОрганизацийСрезПоследних.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
			//|						ТОГДА 0
			//|					ИНАЧЕ 1
			//|				КОНЕЦ) > 0
			//|			ТОГДА ИСТИНА
			//|		ИНАЧЕ ЛОЖЬ
			//|	КОНЕЦ КАК РаботалВПериоде,
			//|	&Период КАК Период
			//|ИЗ
			//|	РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(&Период, ГоловнаяОрганизация = &Организация И ФизическоеЛицо В (&Сотрудники)) КАК РаботникиОрганизацийСрезПоследних
			//|
			//|СГРУППИРОВАТЬ ПО
			//| РаботникиОрганизацийСрезПоследних.ФизическоеЛицо
			//|";
			
			ЗапросПриемУвольнение.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			                               |	&Период КАК Период,
			                               |	ИНАГРО_РаботникиОрганизацийСрезПоследних.Сотрудник.ФизическоеЛицо КАК Контрагент,
			                               |	ВЫБОР
			                               |		КОГДА МАКСИМУМ(ВЫБОР
			                               |					КОГДА ИНАГРО_РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			                               |						ТОГДА 0
			                               |					ИНАЧЕ 1
			                               |				КОНЕЦ) > 0
			                               |			ТОГДА ИСТИНА
			                               |		ИНАЧЕ ЛОЖЬ
			                               |	КОНЕЦ КАК РаботалВПериоде
			                               |ИЗ
			                               |	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(
			                               |			&Период,
			                               |			Организация = &Организация
			                               |				И Сотрудник.ФизическоеЛицо В (&Сотрудники)) КАК ИНАГРО_РаботникиОрганизацийСрезПоследних
			                               |
			                               |СГРУППИРОВАТЬ ПО
			                               |	ИНАГРО_РаботникиОрганизацийСрезПоследних.Сотрудник.ФизическоеЛицо";
			//ИНАГРО --
			
			ВыборкаПриемУвольнение = ЗапросПриемУвольнение.Выполнить().Выбрать();
			Пока ВыборкаПриемУвольнение.Следующий() Цикл
				СтрокаТаблицы = РаботникиПриемУвольнение.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаПриемУвольнение);
			КонецЦикла;
			
		КонецЦикла;
			
	Иначе
			
		ЗапросРаботникиНаНачало = Новый Запрос;
		ЗапросРаботникиНаНачало.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
		ЗапросРаботникиНаНачало.УстановитьПараметр("ДатаНач", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ЗапросРаботникиНаНачало.УстановитьПараметр("ДатаКон", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		
		ЗапросРаботникиНаНачало.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизацийСрезПоследних.ФизическоеЛицо КАК Контрагент,
		|	МАКСИМУМ(ВЫБОР КОГДА ДатаПриема < &ДатаНач И (ДатаУвольнения = ДАТАВРЕМЯ(1,1,1) ИЛИ ДатаУвольнения > &ДатаНач) Тогда ИСТИНА Иначе ЛОЖЬ КОНЕЦ) КАК РаботалНаНачалоПериода,
		|	МАКСИМУМ(ВЫБОР КОГДА ДатаУвольнения >= &ДатаНач И ДатаУвольнения <= &ДатаКон ТОГДА ДатаУвольнения КОНЕЦ) КАК ДатаУвольнения,
		|	МИНИМУМ(ВЫБОР КОГДА ДатаПриема >= &ДатаНач И ДатаПриема <= &ДатаКон ТОГДА ДатаПриема КОНЕЦ) КАК ДатаПриема
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК РаботникиОрганизацийСрезПоследних
		|ГДЕ 
		|  	ГоловнаяОрганизация = &Организация
		|СГРУППИРОВАТЬ ПО
		|	РаботникиОрганизацийСрезПоследних.ФизическоеЛицо";
		
		РаботникиНаНачало = ЗапросРаботникиНаНачало.Выполнить().Выгрузить();
		
		
		РаботникиПриемУвольнение = Новый ТаблицаЗначений();
		РаботникиПриемУвольнение.Колонки.Добавить("Контрагент");
		РаботникиПриемУвольнение.Колонки.Добавить("Период");
		РаботникиПриемУвольнение.Колонки.Добавить("РаботалВПериоде");
		
		
		ЗапросПриемУвольнение = Новый Запрос;
		ЗапросПриемУвольнение.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
		ЗапросПриемУвольнение.УстановитьПараметр("ДатаНач", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ЗапросПриемУвольнение.УстановитьПараметр("ДатаКон", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);

		ЗапросПриемУвольнение.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РаботникиОрганизацийСрезПоследних.ФизическоеЛицо КАК Контрагент,
		|	РаботникиОрганизацийСрезПоследних.ДатаПриема КАК Период
		|ПОМЕСТИТЬ Периоды
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК РаботникиОрганизацийСрезПоследних
		|ГДЕ
		|	РаботникиОрганизацийСрезПоследних.ГоловнаяОрганизация = &Организация
		|	И РаботникиОрганизацийСрезПоследних.ДатаПриема МЕЖДУ &ДатаНач И &ДатаКон
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РаботникиОрганизацийСрезПоследних.ФизическоеЛицо,
		|	РаботникиОрганизацийСрезПоследних.ДатаУвольнения
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК РаботникиОрганизацийСрезПоследних
		|ГДЕ
		|	РаботникиОрганизацийСрезПоследних.ГоловнаяОрганизация = &Организация
		|	И РаботникиОрганизацийСрезПоследних.ДатаУвольнения МЕЖДУ &ДатаНач И &ДатаКон
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Периоды.Контрагент,
		|	Периоды.Период,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ТекКадровыеДанные.ДатаПриема <= Периоды.Период
		|					И (ТекКадровыеДанные.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|						ИЛИ ТекКадровыеДанные.ДатаУвольнения >= Периоды.Период)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК РаботалВПериоде
		|ИЗ
		|	Периоды КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекКадровыеДанные
		|		ПО (ТекКадровыеДанные.ФизическоеЛицо = Периоды.Контрагент)
		|
		|СГРУППИРОВАТЬ ПО
		|	Периоды.Контрагент,
		|	Периоды.Период";
		
	КонецЕсли;	
	
	//запрос для получения числа штатных и совместителей
	ЗапросПоШтатнымСовместителям = Новый Запрос();
	ЗапросПоШтатнымСовместителям.УстановитьПараметр("Организация",         СтруктураРеквизитовФормы.Организация);
	ЗапросПоШтатнымСовместителям.УстановитьПараметр("ОсновноеМестоРаботы", Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
	ЗапросПоШтатнымСовместителям.УстановитьПараметр("Совместительство",    Перечисления.ВидыЗанятости.Совместительство);
	
	ЗапросПоШтатнымСовместителям.УстановитьПараметр("Подразделение",     ?(СтруктураРеквизитовФормы.Подразделение = Неопределено, Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), СтруктураРеквизитовФормы.Подразделение));
	ЗапросПоШтатнымСовместителям.УстановитьПараметр("НеВключатьЧПников", СтруктураРеквизитовФормы.НеВключатьЧПников);
	ЗапросПоШтатнымСовместителям.УстановитьПараметр("ДатаКонцаКвартала", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	ЗапросПоШтатнымСовместителям.Текст = СформироватьТекстЗапросаПоШтатнымСовместителям(УсловиеНаПодразделениеСотр);
	
	ЗапросПоШтатнымСовместителям.УстановитьПараметр("ДатаНач", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ЗапросПоШтатнымСовместителям.УстановитьПараметр("ДатаКон", СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	R00G01I = ЗапросПоШтатнымСовместителям.Выполнить().Выгрузить().Количество();
	СтруктураДанныхФорма1ДФ.R00G01I = R00G01I;
	
	//ИНАГРО ++
	ЗапросГПХ = Новый Запрос;
	ЗапросГПХ.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                  |	Работники.Сотрудник.ФизическоеЛицо КАК Контрагент
	                  |ИЗ
	                  |	Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом КАК Работники
	                  |ГДЕ
	                  |	Работники.Проведен
	                  |	И Работники.ДатаОкончания >= &ДатаНачалаКваратала       
	                  |	И Работники.ДатаНачала <= &ДатаКонцаКвартала
	                  |	И Работники.Организация = &Организация " + УсловиеНаПодразделениеСотр +"  
					  |";
		
	ЗапросГПХ.УстановитьПараметр("ДатаНачалаКваратала", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ЗапросГПХ.УстановитьПараметр("ДатаКонцаКвартала",	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ЗапросГПХ.УстановитьПараметр("Организация",			СтруктураРеквизитовФормы.Организация);
	ЗапросГПХ.УстановитьПараметр("НеВключатьЧПников", 	СтруктураРеквизитовФормы.НеВключатьЧПников);
	ЗапросГПХ.УстановитьПараметр("Подразделение", 		?(СтруктураРеквизитовФормы.Подразделение = Неопределено, Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), СтруктураРеквизитовФормы.Подразделение));
	
	ТаблицаРезультатГПХ = ЗапросГПХ.Выполнить().Выгрузить();
	КолГПХ = ТаблицаРезультатГПХ.Количество();
	
	R00G02I = КолГПХ;
	СтруктураДанныхФорма1ДФ.R00G02I = R00G02I;
	//ИНАГРО --
	
	R02G02I = 0;
	R02G01I = 1;
	Номер = 0;
	СотрудникПредыдущий = Неопределено;
	
	R0205G03A = 0;
	R0205G03  = 0;
	R0205G04A = 0;
	R0205G04  = 0;
	
	ТекстСообщенияОшибкаКолСтрок = НСтр("ru='Превышен лимит строк! Согласно схеме XSD - в отчете может быть только 9999 строк. При превышении, рекомендуем заполнять по подразделениях';uk='Перевищено ліміт рядків! Згідно зі схемою XSD - у звіті може бути тільки 9999 рядків. У разі більшої кількості, рекомендуємо заповнювати по підрозділах '");
	
	Для Каждого стр ИЗ ТаблицаНДФЛ Цикл
		
		Если Стр.ЭтоВоенныйСбор = Истина Тогда
			
			// Это данные по военному сбору
			R0205G03A = R0205G03A + стр.ДоходПриход;
			R0205G03  = R0205G03  + стр.ДоходРасход;
			
			R0205G04A = R0205G04A + стр.НалогПриход;
			R0205G04  = R0205G04  + стр.НалогРасход;
			
			Продолжить;
			
		КонецЕсли;
		
		Если Номер > 0 Тогда
			
			Если Номер > 9999 Тогда
				Если НЕ СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда
					Сообщить(ТекстСообщенияОшибкаКолСтрок);
				Иначе
					ПараметрыЗаполненияЗвит1С.Вставить("ОшибкаПриЗаполнении", ТекстСообщенияОшибкаКолСтрок);
				КонецЕсли;		
				Прервать;
			КонецЕсли;
			
			Строка = СтруктураГруппы.Добавить();
			R02G01I = R02G01I + 1;
		Иначе
			Строка = СтруктураГруппы[0];
		КонецЕсли;
		
		КолСтрок = СтруктураГруппы.Количество();
		
		СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" отчета"": ';uk='У рядку номер ""%1"" звіту"": '"), СокрЛП(КолСтрок));
		
		Если НЕ ЗначениеЗаполнено(стр.ИННСотрудника) Тогда
			Сообщить(СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' у контрагента (сотрудника) не заполнен идентификационный код!';uk=' у контрагента (співробітника) не заповнений ідентифікаційний код!'"), СтатусСообщения.Важное);
		КонецЕсли;
		Строка["T1RXXXXG02"]  = стр.ИННСотрудника;
		Строка["T1RXXXXGFIO"] = стр.Контрагент;
		Строка["T1RXXXXG03A"] = стр.ДоходПриход;
		Строка["T1RXXXXG03"]  = стр.ДоходРасход;
		Строка["T1RXXXXG04A"] = стр.НалогПриход;
		Строка["T1RXXXXG04"]  = стр.НалогРасход;
		Строка["T1RXXXXG05"]  = стр.ДоходНДФЛ;
		
		Льгота = "";
		Если (СтрДлина(стр.Льгота) > 0)  Тогда
			Льгота = стр.Льгота.КодОтчетностиНДФЛ;	
		КонецЕсли;	
		Строка["T1RXXXXG08"]  = Льгота;
		
		// даты увольнения/приема
		Если (стр.Контрагент <> СотрудникПредыдущий)  Тогда
			//количество физ.лиз
			R02G02I = R02G02I + 1;
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") = Истина Тогда
				
				//ищем даты приема/увольнения 
				Если НЕ (ТипЗнч(стр.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
					ДатаПриема 	   = '00010101';
					ДатаУвольнения = '00010101';
					
					ПараметрыОтбора = Новый Структура("Контрагент");
					ПараметрыОтбора.Вставить("Контрагент", стр.Контрагент);  
					
					ЗаписьНаНачало  = РаботникиНаНачало.НайтиСтроки(ПараметрыОтбора);
					ПриемУвольнение = РаботникиПриемУвольнение.НайтиСтроки(ПараметрыОтбора);
					
					// 1. Если сотр был уволен ранее, не работал в этом периоде (в т.ч. по ГПХ), но получал доход 
					//		заполняем только дату увольнения:
					РаботалНаНачало = Ложь;
					Если ЗаписьНаНачало.Количество() > 0 Тогда
						// 1.1 определяем, что сотрудник ранее работал и был уволен
						РаботалНаНачало = ЗаписьНаНачало[0].РаботалНаНачалоПериода;
						Если НЕ РаботалНаНачало Тогда
							ДатаУвольнения = ЗаписьНаНачало[0].ДатаУвольнения;
						КонецЕсли;
					КонецЕсли;
					Если НЕ РаботалНаНачало 
		  				  И ДатаУвольнения > '00010101' Тогда
						//1.2 показанный в периоде доход не должен быть связан с ГПХ
						Если НЕ ТаблицаРезультатГПХ = Неопределено
							  И ТаблицаРезультатГПХ.НайтиСтроки(ПараметрыОтбора).Количество() > 0  Тогда
							  ДатаУвольнения = '00010101';
						КонецЕсли;
					КонецЕсли;
					Если НЕ РаботалНаНачало 
						  И ДатаУвольнения > '00010101' Тогда
						//1.3 В периоде работник не принимался на работу
						Для каждого ЗаписьПриемУвольнение Из ПриемУвольнение Цикл
							Если ЗаписьПриемУвольнение.РаботалВПериоде Тогда
								ДатаУвольнения = '00010101';
								Прервать;
							КонецЕсли;
						КонецЦикла;	
					КонецЕсли;
					
					//2. Пройдемся по таблице приема/увольнения и при необходимости добавим строки с данными по приему и увольнению
					РаботалВПредыдущемПериоде = РаботалНаНачало;
					СтрокаВыведенаВОтчет = Ложь;
					Для каждого ЗаписьПриемУвольнение Из ПриемУвольнение Цикл
						
						Если НЕ РаботалВПредыдущемПериоде 
							И ЗаписьПриемУвольнение.РаботалВПериоде Тогда
							
							Если ЗаписьПриемУвольнение.Период > СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета Тогда 
								// в выборку могут попать записи о приеме на работу в первый день след. квартала
								Продолжить;
							КонецЕсли;
							
							Если ДатаПриема > '00010101' ИЛИ ДатаУвольнения > '00010101' Тогда
								
								// это второй прием/увольнение в периоде
								// выведем строку в таблицу
								
								Если СтрокаВыведенаВОтчет Тогда
									Номер = Номер + 1;
									
									Если Номер > 9999 Тогда
										Если НЕ СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда
											Сообщить(ТекстСообщенияОшибкаКолСтрок);
										Иначе
											ПараметрыЗаполненияЗвит1С.Вставить("ОшибкаПриЗаполнении", ТекстСообщенияОшибкаКолСтрок);
										КонецЕсли;		
										Прервать;
									КонецЕсли;
									
									Строка = СтруктураГруппы.Добавить();
									R02G01I = R02G01I + 1;
									
									КолСтрок = СтруктураГруппы.Количество();
									
									Строка["T1RXXXXG02"]  = стр.ИННСотрудника;
									Строка["T1RXXXXGFIO"] = стр.Контрагент;
									
								Иначе
									СтрокаВыведенаВОтчет = Истина;
								КонецЕсли;
								
								Строка["T1RXXXXG06D"] = ДатаПриема;
								Строка["T1RXXXXG07D"] = ДатаУвольнения;
								Строка["T1RXXXXG05"]  = стр.ДоходНДФЛ;
								
							КонецЕсли;
							
							ДатаПриема 		= ЗаписьПриемУвольнение.Период;
							ДатаУвольнения  = '00010101';
							РаботалВПредыдущемПериоде = Истина;
							
						ИначеЕсли РаботалВПредыдущемПериоде
							И НЕ ЗаписьПриемУвольнение.РаботалВПериоде Тогда
							
							ДатаУвольнения = НачалоДня(ЗаписьПриемУвольнение.Период); 
							РаботалВПредыдущемПериоде = Ложь;
							
						КонецЕсли;	
						
					КонецЦикла;
					
					Если СтрокаВыведенаВОтчет Тогда
						
						Номер = Номер + 1;
						
						Если Номер > 9999 Тогда
							Если НЕ СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда
								Сообщить(ТекстСообщенияОшибкаКолСтрок);
							Иначе
								ПараметрыЗаполненияЗвит1С.Вставить("ОшибкаПриЗаполнении", ТекстСообщенияОшибкаКолСтрок);
							КонецЕсли;		
							Прервать;
						КонецЕсли;
						
						Строка = СтруктураГруппы.Добавить();
						R02G01I = R02G01I + 1;
						
						КолСтрок = СтруктураГруппы.Количество();
						
						Строка["T1RXXXXG02"]  = стр.ИННСотрудника;
						Строка["T1RXXXXGFIO"] = стр.Контрагент;
						
					КонецЕсли;				
		
					Строка["T1RXXXXG06D"] = ДатаПриема;
					Строка["T1RXXXXG07D"] = ДатаУвольнения;
					Строка["T1RXXXXG05"]  = стр.ДоходНДФЛ;

				КонецЕсли;         
				
			Иначе
				
			КонецЕсли;
			
		КонецЕсли;	
		
		СотрудникПредыдущий = стр.Контрагент;
		Номер = Номер + 1;
		
	КонецЦикла;
	
	СтруктураДанныхФорма1ДФ.R0205G03A = R0205G03A;
	СтруктураДанныхФорма1ДФ.R0205G03  = R0205G03;
	СтруктураДанныхФорма1ДФ.R0205G04A = R0205G04A;
	СтруктураДанныхФорма1ДФ.R0205G04  = R0205G04;
	
	СтруктураДанныхФорма1ДФ.R02G02I = R02G02I;
	СтруктураДанныхФорма1ДФ.R02G01I = R02G01I;
	
	ЗначениеВРеквизитФормы(СтруктураГруппы, СтруктураРеквизитовФормы.мИдГруппы1);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьТекстЗапросаПоШтатнымСовместителям(ДопУсловие = "")
	
	//ИНАГРО ++
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") = Истина Тогда
						
		ТекстЗапросаПоШтатнымСовместителям = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РаботникиОрганизаций.Сотрудник.ФизическоеЛицо КАК Сотрудник
		|ИЗ
		|	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаНач, ) КАК РаботникиОрганизаций
		|ГДЕ
		|	(РаботникиОрганизаций.Сотрудник.ИНАГРО_ВидЗанятости = &ОсновноеМестоРаботы
		|			ИЛИ РаботникиОрганизаций.Сотрудник.ИНАГРО_ВидЗанятости = &Совместительство)
		|	И РаботникиОрганизаций.Организация = &Организация
		|	И РаботникиОрганизаций.ЗанимаемыхСтавок > 0 "+ ДопУсловие +"
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РаботникиОрганизаций.Сотрудник.ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ
		|	(РаботникиОрганизаций.Сотрудник.ИНАГРО_ВидЗанятости = &ОсновноеМестоРаботы
		|			ИЛИ РаботникиОрганизаций.Сотрудник.ИНАГРО_ВидЗанятости = &Совместительство)
		|	И РаботникиОрганизаций.Организация = &Организация
		|	И РаботникиОрганизаций.ЗанимаемыхСтавок > 0 "+ ДопУсловие +"
		|	И РаботникиОрганизаций.Период МЕЖДУ &ДатаНач И &ДатаКон";	 
		
		Возврат (ТекстЗапросаПоШтатнымСовместителям);  	
		
	КонецЕсли;
	//ИНАГРО --
	 
КонецФункции

&НаКлиенте
Процедура ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С)
	//Перем Ст8, Ст23;
	
	Если ПараметрыЗаполненияЗвит1С.Свойство("ОшибкаПриЗаполнении") Тогда
		глМенеджерЗвит1С.ПредупреждениеЗвит1С(ПараметрыЗаполненияЗвит1С.ОшибкаПриЗаполнении, "Завантаження даних з FREDO Звіт");
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСтруктурыКолонокМногострочныхЧастей()
	
	Если СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов = Неопределено Тогда
		СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов = Новый Структура;	
	КонецЕсли;
	
	Для каждого Многострочка Из мСтруктураМногострочныхРазделов Цикл
		
		ИмяМногострочки = Многострочка.Ключ;
		
		ДанныеФормы 	= ЭтаФорма[Многострочка.Значение];
		Таблица 		= ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		
		
		СтруктураКолонок = Новый Массив;
		Для каждого Колонка Из Таблица.Колонки Цикл
			СтруктураКолонок.Добавить(Колонка.Имя);
		КонецЦикла;
		
		СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов.Вставить(ИмяМногострочки, СтруктураКолонок);
		
	КонецЦикла;

КонецФункции

&НаКлиенте
Процедура ПоддержкаДуплекса(Команда)
	
	// инвертируем пометку и значение
	ЕстьДуплекс = СтруктураРеквизитовФормы.ЕстьДуплекс;
	
	СтруктураРеквизитовФормы.Вставить("ЕстьДуплекс", НЕ ЕстьДуплекс);
	Элементы.ЕстьДуплекс.Пометка = НЕ ЕстьДуплекс;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеФормыНаСервере();
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	// расшифровка для Звит1С
	Если  СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровки")
		И ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки) 
		И СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С") Тогда
		
		ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки),
									  СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С); 
		
	КонецЕсли;
	
	ПоказателиОтчета = Новый Структура();
	РеквизитыФормы = ПолучитьРеквизиты();
	Для каждого Реквизит Из РеквизитыФормы Цикл
		Если Лев(ВРЕГ(Реквизит.Имя), 15)  = ВРЕГ("СтруктураДанных") Тогда
			ПоказателиОтчета.Вставить(Сред(Реквизит.Имя, 16), ЭтаФорма[Реквизит.Имя]);		
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураРеквизитовФормы.Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ПоказателиОтчета.Форма1ДФ.HKBOS 	= ПоказателиОтчета.Форма1ДФ.HKFO;
		ПоказателиОтчета.Форма1ДФ.HBOS 		= ПоказателиОтчета.Форма1ДФ.HFO;
		ПоказателиОтчета.Форма1ДФ.HTELBOS 	= ПоказателиОтчета.Форма1ДФ.HTELFO;
	КонецЕсли;
	
	Для каждого ИдМногострочногоРаздела Из мСтруктураМногострочныхРазделов Цикл
		
		СтруктураДанных = Новый Структура;
		
		Таблица = РеквизитФормыВЗначение(ИдМногострочногоРаздела.Значение, Тип("ТаблицаЗначений"));
		КолонкиТаблицы = Таблица.Колонки;
		
		Для каждого Строка Из Таблица Цикл
			
			Для каждого Колонка Из КолонкиТаблицы Цикл
			  	// не нужно выгружать колонку 9. Она только для нового отчетного и уточняющего отчета
				// возникают проблемы при загрузке сформировнного XML файла в программы отправки отчетности
				Если  СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Ложь 
					И ЗначениеЗаполнено(ПоказателиОтчета.Форма1ДФ.HZ)
					И Колонка.Имя = "T1RXXXXG09" Тогда
					Продолжить;
				КонецЕсли;
				СтруктураДанных.Вставить(Колонка.Имя + "_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ=0"), Строка[Колонка.Имя]);
			КонецЦикла;
			
		КонецЦикла;
		
		ПоказателиОтчета.Вставить(ИдМногострочногоРаздела.Значение, СтруктураДанных);		
		
	КонецЦикла;	
	
	ПоказателиОтчета.Вставить("ДопПоказателиОтчета", СтруктураРеквизитовФормы.ДопПоказателиОтчетаЗвит1С);
		
	// показатели
	СписокСохранения.Вставить("ДанныеОтчета", ПоказателиОтчета);
	
	Возврат СписокСохранения;
	
КонецФункции

&НаКлиенте
Функция СоздатьДанныеОтчетаДляВыгрузки() Экспорт
	
	АдресВХранилище = СоздатьДанныеОтчетаДляВыгрузкиНаСервере();
	Возврат АдресВХранилище;

КонецФункции

&НаСервере
Функция СоздатьДанныеОтчетаДляВыгрузкиНаСервере()
	
	ДанныеОтчета = ПолучитьДанныеФормыНаСервере();
	Возврат ПоместитьВоВременноеХранилище(ДанныеОтчета, Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Функция СоздатьТаблицуВыгружаемыхОтчетныхФорм() Экспорт

	АдресВХранилище = СоздатьТаблицуВыгружаемыхОтчетныхФормНаСервере();
	Возврат АдресВХранилище;

КонецФункции


&НаСервере
Функция СоздатьТаблицуВыгружаемыхОтчетныхФормНаСервере()

	ТаблицаСхемXML = ЗаполнитьТаблицуСоСхемамиВыгрузки();
	ОпределитьСписокВыгружаемыхСхем(ТаблицаСхемXML);

	Возврат ПоместитьВоВременноеХранилище(ТаблицаСхемXML, Новый УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Функция СоздатьСтруктуруСоСхемамиВыгрузки() Экспорт

	АдресВХранилище = СоздатьСтруктуруСоСхемамиВыгрузкиНаСервере();
	Возврат АдресВХранилище;

КонецФункции

&НаСервере
Функция СоздатьСтруктуруСоСхемамиВыгрузкиНаСервере()

	ТипМакетаСхемыXSD = Метаданные.СвойстваОбъектов.ТипМакета.ДвоичныеДанные;

	СтруктураXSD = Новый Структура;
	Объект = ОбъектОтчета(ЭтаФорма.ИмяФормы);

	МетаданныеМактов = Объект.Метаданные().Макеты;

	Для Каждого Макет Из МетаданныеМактов Цикл
		
		Если ВРЕГ(Макет.Имя) = ВРЕГ("АрхивСхемXSD") Тогда
			
			АрхивСхемXSD = Объект.ПолучитьМакет("АрхивСхемXSD");
			
			ВременноеИмяZIP      = ПолучитьИмяВременногоФайла(".zip");
			ВременноеИмяКаталога = ПолучитьИмяВременногоФайла();
			
			АрхивСхемXSD.Записать(ВременноеИмяZIP);
			ЧтениеZIP = Новый ЧтениеZipФайла(ВременноеИмяZIP);
			
			Для каждого Схема Из ЧтениеZIP.Элементы Цикл
				
				ЧтениеZIP.Извлечь(Схема, ВременноеИмяКаталога);
				
				СтруктураXSD.Вставить(Схема.ИмяБезРасширения , Новый ДвоичныеДанные(ВременноеИмяКаталога + "\" + Схема.Имя));
			
			КонецЦикла;
			
			Попытка
				УдалитьФайлы(ВременноеИмяZIP);
			Исключение КонецПопытки;
			
			Попытка
				УдалитьФайлы(ВременноеИмяКаталога);
			Исключение КонецПопытки;
		
		КонецЕсли;
		
		Если Макет.ТипМакета = ТипМакетаСхемыXSD  Тогда
		
			СтруктураXSD.Вставить(Макет.Имя, Объект.ПолучитьМакет(Макет));		
		
		КонецЕсли;	
		
	КонецЦикла;

	Возврат ПоместитьВоВременноеХранилище(СтруктураXSD, Новый УникальныйИдентификатор);

КонецФункции

&НаСервере
Процедура  ОпределитьСписокВыгружаемыхСхем(тбСхемыXML);

	Для Каждого стр Из  тбСхемыXML Цикл
		стр.фВыгрузка = 1;
	КонецЦикла;

КонецПроцедуры	

&НаСервере
Функция ЗаполнитьТаблицуСоСхемамиВыгрузки()

	//для возможности выгрузки в XML файл	
	тбСхемыXML = Новый ТаблицаЗначений;
	ТипКолИмяСхемы = СоздатьОписанияТипов("Строка",8);
	тбСхемыXML.Колонки.Добавить("ИмяСхемы",ТипКолИмяСхемы,НСтр("ru='Имя файла-схемы';uk=""Ім'я файлу-схеми"""));
	ТипКолПредставлениеСхемы = СоздатьОписанияТипов("Строка",80);
	тбСхемыXML.Колонки.Добавить("ПредставлениеСхемы",ТипКолПредставлениеСхемы,НСтр("ru='Наименование регл.отчета';uk='Найменування регл.звіту'"));
	ТипКолНазваниеСтраницыПанели = СоздатьОписанияТипов("Строка",60);
	тбСхемыXML.Колонки.Добавить("НазваниеСтраницыПанели",ТипКолНазваниеСтраницыПанели,НСтр("ru='Наименование страницы панели';uk='Найменування сторінки панелі'"));

	ТипКолфВыгрузка = СоздатьОписанияТипов("Число",1,0);
	тбСхемыXML.Колонки.Добавить("фВыгрузка",ТипКолфВыгрузка,НСтр("ru='Выгружать?';uk='Вивантажувати?'"));
	ТипКолНазваниеСтраницыПанели = СоздатьОписанияТипов("Строка",60);
	ТипПрефикса = СоздатьОписанияТипов("Строка",2);
	тбСхемыXML.Колонки.Добавить("Префикс",ТипПрефикса,НСтр("ru='Префикс';uk='Префікс'"));

	тбСхемыXML.Колонки.Добавить("Тип", ,НСтр("ru='Тип';uk='Тип'"));

	КоличествоСтраниц = 1;
	
	НовСтрока = тбСхемыXML.Добавить();
	Если СтруктураРеквизитовФормы.Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		НовСтрока.ИмяСхемы = "J0500105"; 
	Иначе	
		НовСтрока.ИмяСхемы = "F0500105"; 
	КонецЕсли;
	НовСтрока.ПредставлениеСхемы 	 = НСтр("ru='Форма 1ДФ';uk='Форма 1ДФ'");
	НовСтрока.НазваниеСтраницыПанели = "Форма1ДФ";

	тбСхемыXML.ЗаполнитьЗначения(Перечисления.ВерсииФорматовВыгрузки.ГНСУ_XML, "Тип");

	Возврат  тбСхемыXML

КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПараметровДляЗвит1С(ОписаниеОповещения) Экспорт
	
	глКомпонентаЗвит1С.Bring1CToFront();
	
	СтруктураРеквизитовФормы.Вставить("ОповещениеНастройкиПараметровЗвит1С", ОписаниеОповещения);
	Если глМенеджерЗвит1С.ФлагОтладки Тогда

		ФормаСохраненныхРеглОтчетов = ПолучитьФорму("Документ.РегламентированныйОтчет.Форма.ФормаВыбораТестЗвит1С",,ЭтаФорма);
		
		ФормаСохраненныхРеглОтчетов.ОписаниеОповещенияОЗакрытии =  Новый ОписаниеОповещения("РежимТестированияЗвит1СЗавершениеВыбораОтчета", ЭтотОбъект);
		ФормаСохраненныхРеглОтчетов.Параметры.РежимВыбора        = Истина; 
		ФормаСохраненныхРеглОтчетов.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаСохраненныхРеглОтчетов.Открыть();
		
	Иначе
		
		ОткрытьФормуПараметров(Неопределено);	
		
	КонецЕсли;


КонецПроцедуры

&НаКлиенте
Процедура РежимТестированияЗвит1СЗавершениеВыбораОтчета(Результат, ДопПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ТекОповещение = СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С;
		СтруктураРеквизитовФормы.Удалить("ОповещениеНастройкиПараметровЗвит1С");
			
		СтруктураРеквизитовФормы.мСохраненныйДок = Результат;	
		ВосстановитьСохраненныеДанные();	
			
		СтруктураРеквизитовФормы.Вставить("ОповещениеНастройкиПараметровЗвит1С", ТекОповещение);
		
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
		
	Иначе
		
		ОткрытьФормуПараметров(Неопределено);	
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Функция СформироватьДанныеДляЗвит1С(ОтчетЗвит1С = Неопределено) Экспорт 
	
	//глКомпонентаЗвит1С.Bring1CToFront();
	//ОткрытьФормуПараметров(Неопределено);	
	//глКомпонентаЗвит1С.BringZvitToFront();
	
	мСписокСообщенийЗвит1С 	= Новый СписокЗначений;
	
	// Настроим модуль объекта на получение данных для Звита
	СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина;
	Если СтруктураРеквизитовФормы.Свойство("ОповещениеНастройкиПараметровЗвит1С") Тогда
		СтруктураРеквизитовФормы.Удалить("ОповещениеНастройкиПараметровЗвит1С")	
	КонецЕсли;
	
	УстановитьФлажкиНаСервереДляЗаполнения(глМенеджерЗвит1С.ИмяСхемыЗвит1С);
	
	// Заполнение зависит от формы реестра
	Если НЕ глМенеджерЗвит1С.ФлагОтладки Тогда
		ПараметрыЗаполненияЗвит1С = Неопределено;
		ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С);
		ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);
	КонецЕсли;
	
	Результат = ПолучитьДанныеФормыНаСервере();
	
	Для каждого Сообщение Из мСписокСообщенийЗвит1С Цикл
		глМенеджерЗвит1С.ПредупреждениеЗвит1С(Сообщение.Представление, ,Сообщение.Значение);
	КонецЦикла;
	
	мСписокСообщенийЗвит1С.Очистить();
	
	Возврат Результат;
	
КонецФункции

&НаСервере	
Процедура УстановитьФлажкиНаСервереДляЗаполнения(ИмяСхемы)	
	
	Возврат;
	
КонецПроцедуры	

&НаСервере
Функция СоздатьОписанияТипов(НазваниеТипа, Длина,Точность="")
	
	мас = Новый Массив;
	мас.Добавить(Тип(НазваниеТипа));
	Если Точность = "" Тогда
		КвалифСтроки = Новый КвалификаторыСтроки(Длина,ДопустимаяДлина.Переменная); 
	Иначе
		КвалифЧисла = Новый КвалификаторыЧисла(Длина,Точность,ДопустимыйЗнак.Неотрицательный); 
	КонецЕсли;	   
	Возврат Новый ОписаниеТипов(мас,КвалифСтроки,КвалифЧисла);
  
КонецФункции	

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя)
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПараметров(Команда)

	мПараметрыФормы = Новый Структура;
	мПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", 	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	мПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета", 	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	мПараметрыФормы.Вставить("ВыплатыЗПНеРегулярны", 	СтруктураРеквизитовФормы.ВыплатыЗПНеРегулярны);
	мПараметрыФормы.Вставить("ДатаВыплатыКон", 			СтруктураРеквизитовФормы.ДатаВыплатыКон);
	мПараметрыФормы.Вставить("ДатаВыплатыНач", 			СтруктураРеквизитовФормы.ДатаВыплатыНач);
	мПараметрыФормы.Вставить("Подразделение", 			СтруктураРеквизитовФормы.Подразделение);
	мПараметрыФормы.Вставить("ОбособленноеПодразделение", СтруктураРеквизитовФормы.ОбособленноеПодразделение); 
	мПараметрыФормы.Вставить("НеВключатьЧПников", 		СтруктураРеквизитовФормы.НеВключатьЧПников);
	мПараметрыФормы.Вставить("СортироватьПоИНН", 		СтруктураРеквизитовФормы.СортироватьПоИНН);
	мПараметрыФормы.Вставить("Организация", 			СтруктураРеквизитовФормы.Организация);
	
	//ИНАГРО++
	мПараметрыФормы.Вставить("ЗаполнятьПоНачисленному", СтруктураРеквизитовФормы.ЗаполнятьПоНачисленному);
	мПараметрыФормы.Вставить("НеВСельсовете", 			СтруктураРеквизитовФормы.НеВСельсовете);
	
	Если СтруктураРеквизитовФормы.Сельсовет = Неопределено Тогда
		СтруктураРеквизитовФормы.Сельсовет = Новый СписокЗначений;
		СтруктураРеквизитовФормы.Сельсовет.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		мПараметрыФормы.Вставить("Сельсовет", СтруктураРеквизитовФормы.Сельсовет);
	Иначе	
		мПараметрыФормы.Вставить("Сельсовет", СтруктураРеквизитовФормы.Сельсовет);
	КонецЕсли;	
	//ИНАГРО --	

	ИмяФормыПараметровНастройки = СтрЗаменить(ЭтаФорма.ИмяФормы, "ФормаОтчета", "ПараметрыОтчета");
	
	ФормаНастройкиОтчета = ПолучитьФорму(ИмяФормыПараметровНастройки, мПараметрыФормы, ЭтаФорма);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуПараметровЗавершение", ЭтотОбъект);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьФормуПараметровЗавершение(ПараметрыВозврата, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.Свойство("ОповещениеНастройкиПараметровЗвит1С") Тогда
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура Расшифровать(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("Организация", 			СтруктураРеквизитовФормы.Организация);
	ПараметрыОтчета.Вставить("мДатаНачалаПериодаОтчета", СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ПараметрыОтчета.Вставить("мДатаКонцаПериодаОтчета",  СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ПараметрыОтчета.Вставить("АдресВременногоХранилищаРасшифровки", СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки);
	
	ИДИменПоказателей = Новый Массив();
	ИДИменПоказателей.Добавить(Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя);
	
	РегламентированнаяОтчетностьКлиент.ОткрытьРасшифровкуОтчета(Сред(Лев(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") - 1), 7), Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, ".Форма.") + 7), ИДИменПоказателей, ПараметрыОтчета);
	
КонецПроцедуры
