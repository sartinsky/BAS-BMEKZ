&НаСервере
Перем мБухИтоги;
&НаСервере
Перем ТаблицаРасшифровки;
&НаСервере
Перем ОбщиеПараметрыРасшифровки;

//ИНАГРО ++
&НаСервере
Перем тзРаботники;
Перем мИдГруппы5;
Перем мИдГруппы6;
Перем мИдГруппы7;
Перем тзГПХ;


&НаСервере
Перем мОбъектОтчета;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьСтруктуруРеквизитовФормы();
	
	СтруктураРеквизитовФормы.СписокПечатаемыхЛистов = Новый СписокЗначений;
		
	СтруктураРеквизитовФормы.мСоставПоказателей = "СоставПоказателей2021УФ";
	
	СоответствиеЕдиницыИзмеренияДелителю = Новый Структура;
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1", 1);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000", 1000);
	СоответствиеЕдиницыИзмеренияДелителю.Вставить("Окр1000000", 1000000);
		
	СтруктураРеквизитовФормы.мОписаниеТиповЧислоЕ = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	
	// Идентификаторы многострочных групп
	СтруктураРеквизитовФормы.мИдГруппы11 = "П1T1R";
	СтруктураРеквизитовФормы.мИдГруппы12 = "П2T1R";
	СтруктураРеквизитовФормы.мИдГруппы13 = "П3T1R";
	СтруктураРеквизитовФормы.мИдГруппы41 = "T41T1R";
	СтруктураРеквизитовФормы.мИдГруппы42 = "T42T1R";
	СтруктураРеквизитовФормы.мИдГруппы43 = "T43T1R";
	СтруктураРеквизитовФормы.мИдГруппы5  = "T5T1R";
	СтруктураРеквизитовФормы.мИдГруппы61 = "T61T1R";
	СтруктураРеквизитовФормы.мИдГруппы62 = "T62T1R";
	СтруктураРеквизитовФормы.мИдГруппы63 = "T63T1R";
		
	// количество строк многострочных разделов по "бумажной" форме отчета
	// (минимальное количество строк, которое должно присутствовать всегда)
	КолИсхСтрокИдГруппы1 = 1;
	
	СтруктураДанныхДекларация = Новый Структура;
	СтруктураДанныхТаблица11 = Новый Структура;
	СтруктураДанныхТаблица12 = Новый Структура;
	СтруктураДанныхТаблица13 = Новый Структура;
	СтруктураДанныхТаблица41 = Новый Структура;
	СтруктураДанныхТаблица42 = Новый Структура;
	СтруктураДанныхТаблица43 = Новый Структура;
	СтруктураДанныхТаблица5	 = Новый Структура;
	СтруктураДанныхТаблица61 = Новый Структура;
	СтруктураДанныхТаблица62 = Новый Структура;
	СтруктураДанныхТаблица63 = Новый Структура;
	//СтруктураДанныхСлужебныеДанные	= Новый Структура;
	
	//ИнициализацияМногостраничныхРазделов();
	// структура многострочных разделов формы
	мСтруктураМногострочныхРазделов = Новый Структура;
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы11, 	СтруктураРеквизитовФормы.мИдГруппы11);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы12, 	СтруктураРеквизитовФормы.мИдГруппы12);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы13, 	СтруктураРеквизитовФормы.мИдГруппы13);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы41, 	СтруктураРеквизитовФормы.мИдГруппы41);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы42, 	СтруктураРеквизитовФормы.мИдГруппы42);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы43, 	СтруктураРеквизитовФормы.мИдГруппы43);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5, 	СтруктураРеквизитовФормы.мИдГруппы5);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы61, 	СтруктураРеквизитовФормы.мИдГруппы61);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы62, 	СтруктураРеквизитовФормы.мИдГруппы62);
	мСтруктураМногострочныхРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы63, 	СтруктураРеквизитовФормы.мИдГруппы63);
	
	мСтруктураМногостраничныхРазделов = Новый Структура;
	//мСтруктураМногостраничныхРазделов.Вставить("ПриложениеПН", "ТаблицаСтраницыРаздела1");
	
	// структура исходных строк (минимального кол-ва) многострочных разделов формы
	мСтруктураИсхКолвоСтрокРазделов = Новый Структура;
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы11, 	КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы12, 	КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы13, 	КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы41, 	КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы42, 	КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы43, 	КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы5, 	КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы61, 	КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы62, 	КолИсхСтрокИдГруппы1);
	мСтруктураИсхКолвоСтрокРазделов.Вставить(СтруктураРеквизитовФормы.мИдГруппы63, 	КолИсхСтрокИдГруппы1);
	
	ЗаполнитьСтруктурыКолонокМногострочныхЧастей();
	
	ЦветЗаполняетсяТолькоВручную     = Новый Цвет(255, 255, 225);
	ЦветЗаполняетсяАвтоКорректир     = Новый Цвет(255, 240, 200);
	ЦветЗаполняетсяАвтоБезКорректир  = Новый Цвет(230, 240, 220);
	СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика = Новый Цвет(192, 220, 192); // ЗЕЛЕНЫЙ
	ЦветЗаполняетсяОднозначноВручную = Новый Цвет(255, 255, 192); // ЖЕЛТЫЙ
	ЦветЗаполняетсяАвтоматически     = Новый Цвет(255, 255, 255); // Белый, Ввод запрещен
	
	// структура цветов раскраски автозаполняемых ячеек
	мСтруктураЦветовРаскраски = Новый Структура;
	мСтруктураЦветовРаскраски.Вставить("_1", ЦветЗаполняетсяТолькоВручную);
	мСтруктураЦветовРаскраски.Вставить("_2", ЦветЗаполняетсяАвтоКорректир);
	мСтруктураЦветовРаскраски.Вставить("_3", ЦветЗаполняетсяАвтоБезКорректир);
	мСтруктураЦветовРаскраски.Вставить("_4", СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика);
	мСтруктураЦветовРаскраски.Вставить("_0", ЦветЗаполняетсяОднозначноВручную);
	мСтруктураЦветовРаскраски.Вставить("_5", ЦветЗаполняетсяАвтоматически);
	
	мСтруктураВариантыЗаполнения       = Новый Структура;
	мСтруктураВариантыЗаполненияЭталон = Новый Структура;
		
	// Версия формы
	СтруктураРеквизитовФормы.мВерсияФормы = "01/01/2021";
	
	СтруктураРеквизитовФормы.мПечатныеформы 	= Новый СписокЗначений;
	СтруктураРеквизитовФормы.мПечатаемыеРазделы = Новый СписокЗначений;
	
	ИмяРаздела = "Декларация";
		
	СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяРаздела;
	
	СтруктураРеквизитовФормы.мВыбраннаяФорма          = Параметры.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета  = Параметры.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета = Параметры.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мПериодичность           = Параметры.мПериодичность;
	СтруктураРеквизитовФормы.мСкопированаФорма        = Параметры.мСкопированаФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок          = Параметры.мСохраненныйДок;
	СтруктураРеквизитовФормы.Организация              = Параметры.Организация;
	
	//ДатаПодписи                                       = ТекущаяДатаСеанса();
	//
	ПорядкиОкругленияОтчетности = Новый Структура;
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1",       Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000",    Перечисления.ПорядкиОкругленияОтчетности.Окр1000);
	ПорядкиОкругленияОтчетности.Вставить("ПеречислениеПорядкиОкругленияОтчетностиОкр1000000", Перечисления.ПорядкиОкругленияОтчетности.Окр1000000);
	
    СтруктураРеквизитовФормы.Вставить("ЧислоВыплатыЗП", 		СтруктураРеквизитовФормы.ЧислоВыплатыЗП);
    СтруктураРеквизитовФормы.Вставить("НомерМесяца", 	0);

	СтруктураРеквизитовФормы.мБезОткрытияФормы = Ложь;
	СтруктураРеквизитовФормы.мРежимПечати 	   = Ложь;
	ПеречислениеПериодичностьМесяц = Перечисления.Периодичность.Месяц;	
	
	ВывестиМакетВТаблДокНаСервере(ИмяРаздела, 1);
	
	Инициализация(Параметры.БезОткрытияФормы);
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяРаздела);
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяРаздела);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура СформироватьСтруктуруРеквизитовФормы()
	
	СтруктураРеквизитовФормы = Новый Структура;
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мВерсияФормы");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("мЗаписьЗапрещена");
	
	СтруктураРеквизитовФормы.Вставить("мИдГруппы11");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы12");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы13");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы41");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы42");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы43");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы5");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы61");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы62");
	СтруктураРеквизитовФормы.Вставить("мИдГруппы63");
	
	СтруктураРеквизитовФормы.Вставить("мОписаниеТиповЧислоЕ");
	СтруктураРеквизитовФормы.Вставить("мПериодичность");
	СтруктураРеквизитовФормы.Вставить("мПечатаемыеРазделы");
	СтруктураРеквизитовФормы.Вставить("мПечатныеФормы");
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСоставПоказателей");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ЦветЗаполняетсяАвтоАрифметика");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("ОрганизацияЮридическоеФизическоеЛицо");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("НомерТекущейСтраницы");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов");
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкиДопСтрок", Истина);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкиДопСтраниц", Ложь);
	//СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуРасшифровать", Ложь);
	//СтруктураРеквизитовФормы.Вставить("АдресВременногоХранилищаРасшифровки");
	//СтруктураРеквизитовФормы.Вставить("мСохранятьРасшифровку", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуВыгрузить", Истина);
	
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	
	СтруктураРеквизитовФормы.Вставить("ТекущиеОбластиСтраниц");
	СтруктураРеквизитовФормы.Вставить("КолонкиМногострочныхРазделов");
	//СтруктураРеквизитовФормы.Вставить("ЕстьДуплекс", Ложь);
	
	СтруктураРеквизитовФормы.Вставить("ПолучениеДанныхДляЗвит1С", Ложь);
	СтруктураРеквизитовФормы.Вставить("ДопПоказателиОтчетаЗвит1С", Новый Структура);
	
	// *Параметры, которые выводятся в форме настройки параметров
	ОпцияКадровыйПереводДвумяСтроками = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность", "РегламентированнаяОтчетность_НДФЛЕСВ_ОпцияКадровыйПереводДвумяСтроками", Ложь);	
	СтруктураРеквизитовФормы.Вставить("ОпцияКадровыйПереводДвумяСтроками", ОпцияКадровыйПереводДвумяСтроками);
	
	ВыплатыЗПНеРегулярны = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность", "РегламентированнаяОтчетность_НДФЛЕСВ_ВыплатыЗПНеРегулярны", Ложь);	
	СтруктураРеквизитовФормы.Вставить("ВыплатыЗПНеРегулярны", 	ВыплатыЗПНеРегулярны);
	
	ЧислоВыплатыЗП		 = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность", "РегламентированнаяОтчетность_НДФЛЕСВ_ЧислоВыплатыЗП", 10);	
	СтруктураРеквизитовФормы.Вставить("ЧислоВыплатыЗП", 		ЧислоВыплатыЗП);
	СтруктураРеквизитовФормы.Вставить("НомерМесяца");
	
	Подразделение		 = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность", "РегламентированнаяОтчетность_НДФЛЕСВ_Подразделение");	
	СтруктураРеквизитовФормы.Вставить("Подразделение", Подразделение);
	ОбособленноеПодразделение = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность", "РегламентированнаяОтчетность_НДФЛЕСВ_ОбособленноеПодразделение");	
	СтруктураРеквизитовФормы.Вставить("ОбособленноеПодразделение", ОбособленноеПодразделение);
	
	НеВключатьЧПников = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("РегламентированнаяОтчетность", "РегламентированнаяОтчетность_НДФЛЕСВ_НеВключатьЧПников",Ложь);	
	СтруктураРеквизитовФормы.Вставить("НеВключатьЧПников", НеВключатьЧПников);
	СтруктураРеквизитовФормы.Вставить("МесяцПриложения", Ложь);
	СтруктураРеквизитовФормы.Вставить("НомерМесяца");
	СтруктураРеквизитовФормы.Вставить("СортироватьПоИНН",  Ложь);
	
	СтруктураРеквизитовФормы.Вставить("ЗаполнятьПоНачисленному",  Ложь);
	
	СтруктураРеквизитовФормы.Вставить("НазначениеПенсии",  Ложь);
	СтруктураРеквизитовФормы.Вставить("НазначениеСоцВыплат",  Ложь);
	СтруктураРеквизитовФормы.Вставить("Сотрудники", Новый Массив);
	СтруктураРеквизитовФормы.Вставить("ОпцияПриемУвольнениеОтдельнымиСтроками",  Ложь);
	
КонецПроцедуры

//&НаСервере
//Процедура ИнициализацияМногостраничныхРазделов()
// 
//	Элементы.ДопСтроки.Видимость = Истина;
//	СтрПерваяСтраница = ЭтаФорма.ТаблицаСтраницыРаздела1.Добавить();
//	СтрПерваяСтраница.Представление               = НСтр("ru='Стр. ';uk='Стр. '") + 1;
//	СтрПерваяСтраница.АктивнаяСтраница            = Истина;
//	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;

//КонецПроцедуры // ИнициализацияМногостраничныхРазделов()

// Функция возвращает параметры числа Е для различных разделов отчета
//
// Параметры
//  ИмяРаздела  - Строка
//
// Возвращаемое значение:
//  Результат   - ОписаниеТипа
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОписаниеТипаЧислаЕДляРаздела(ИмяРаздела = "")
	
	Результат = Новый Структура("ОписаниеТипа, Длина, Точность");
	
	//Если ИмяРаздела = "Раздел1" 
	// ИЛИ ИмяРаздела = "Раздел2" 
	// ИЛИ ИмяРаздела = "Раздел3" 
	// ИЛИ ИмяРаздела = "Раздел3_Прил2" Тогда
	//	Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14, 2));
	//ИначеЕсли ИмяРаздела = "Раздел7" Тогда
	//	Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(16, 2));	
	//Иначе
    Результат = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2));
	//КонецЕсли; 

	Возврат Результат; 
	
КонецФункции


&НаСервере
Процедура Инициализация(БезОткрытияФормы = Ложь) Экспорт
	
	Перем ИсходноеКоличествоСтрокГруппы;
	
	СтруктураРеквизитовФормы.мБезОткрытияФормы = БезОткрытияФормы;
	
	ЗаполнитьНачальныеНастройки();

	СформироватьТаблицуНужныхСтатей();
	
	ФормироватьСтруктуруСтраницОтчета();

	ФормироватьСтруктуруСвойствСтраниц();

	СформироватьДеревоРазделовОтчетаНаСервере();
	
	ЗаполнитьПустыеСтруктурыДанных();	
	
	СтруктураРеквизитовФормы.мРежимПечати = Ложь;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		
		НачальныеОперацииСМногострочнымиБлоками();
			
		Если СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено Тогда // документ скопирован
			ВосстановитьСохраненныеДанные();
		Иначе // новый документ
			
			СтруктураРеквизитовФормы.ЕдиницаИзмерения         = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
			КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
			
			ЗаполнитьНастраиваемыеПараметрыЗаполнения();

		КонецЕсли;
		
	Иначе
		
		ВосстановитьСохраненныеДанные();
		
		Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
			СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкуЗаполнить Тогда
		Элементы.Заполнить.Видимость = Ложь;
		//СтруктураРеквизитовФормы.мСохранятьРасшифровку = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитовФормы.ОтображатьКнопкиДопСтрок Тогда
		Элементы.ДопСтроки.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьПериод();
	
	СтруктураРеквизитовФормы.НаимОрганизации = СтруктураРеквизитовФормы.Организация.Наименование;
	
	СтруктураРеквизитовФормы.ОрганизацияЮридическоеФизическоеЛицо = СтруктураРеквизитовФормы.Организация.ЮридическоеФизическоеЛицо;
	
	Если СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ ЗначениеЗаполнено(СтруктураРеквизитовФормы.мСкопированаФорма) Тогда
		ЗаполнитьСведенияОбОрганизацииНаСервере();
	КонецЕсли;
    	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры // Инициализация()

&НаСервере
Процедура НачальныеОперацииСМногострочнымиБлоками()
	
	Перем ИсходноеКоличествоСтрокГруппы;

	// создаем исходную структуру многострочных разделов
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭтаФорма[ЭлементСтруктуры.Значение];
		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		Для НСтр = 1 По ИсходноеКоличествоСтрокГруппы Цикл

			СтруктураГруппы.Добавить();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // НачальныеОперацииСМногострочнымиБлоками()

// Выполняет начальные настройки параметров отчета.
// По данным макета "СоствПоказателей" формирует:
//   - состав показателей отчета;
//   - варианты заполнения показателей отчета;
//   - дерево выводимых на печать листов отчета.
//
&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	МакетСоставаПоказателей = ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(СтруктураРеквизитовФормы.мСоставПоказателей);	
	
	МассивТиповТаблицаЗначений = Новый Массив; 
	МассивТиповТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТиповТаблицаЗначений = Новый ОписаниеТипов(МассивТиповТаблицаЗначений);
	
	Для Инд = 0 По МакетСоставаПоказателей.Области.Количество() - 1 Цикл
				
		ТекОбласть    = МакетСоставаПоказателей.Области[Инд];
		ИмяСтраницы   = ТекОбласть.Имя;
		
		ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы].Добавить();
		
		// Таблица значений содержит информацию о вариантах заполнения показателя отчета.
		// В колонках таблицы значений отображается следующая информация:
		//   - имя ячейки (код показателя);
		//   - вариант заполнения ячейки;
		//   - вычисленное по данным ИБ значение ячейки;
		//   - величина автокорректировки значения ячейки;
		//   - примечание к ячейке.
		//
				
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
			// перебираем строки макета
            					
			// Код показателя (по составу показателей) определяется по первой колонке макета
			КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
			ИмяПоказателя = КодПоказателя;

			Если КодПоказателя = "===" Тогда         // признак конечной строки
				Прервать;
			КонецЕсли;
			
			Если КодПоказателя = "###" Тогда         
				Прервать;
			КонецЕсли;

			Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
				Продолжить;
			КонецЕсли;

			// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
			КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
			// признак многострочности определяется по третьей колонке макета
			ПризнМногострочность = СокрЛП(МакетСоставаПоказателей.Область(Ном, 3).Текст);
			// по четвертой колонке определяется тип данных реквизита
			ТипДанныхРеквизита   = СокрЛП(МакетСоставаПоказателей.Область(Ном, 4).Текст);
			// по колонке 5 определяется исходное количество строк многострочного раздела
			стрКолСтрокИсходный  = СокрЛП(МакетСоставаПоказателей.Область(Ном, 5).Текст);
			// вариант заполнения ячейки определяется по колонке 6 макета
			стрВариантЗаполнения = РегламентированнаяОтчетность.ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
			// код показателя из структуры, берется из колонки 9
			
			чКолСтрокИсходный    = ? (ПустаяСтрока(стрКолСтрокИсходный),  0, Число(стрКолСтрокИсходный));
			чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

			// формируем таблицу значений, содержащей состав показателей отчета
			НоваяСтрока = мТаблицаСоставПоказателей.Добавить();
			НоваяСтрока.ИмяПоляТаблДокумента   = ИмяСтраницы;
			НоваяСтрока.КодПоказателяПоСоставу = КодПоказателя;
			НоваяСтрока.КодПоказателяПоФорме   = КодПоказателяПоФорме;
			НоваяСтрока.ПризнМногострочности   = ПризнМногострочность;
			НоваяСтрока.ТипДанныхПоказателя    = ТипДанныхРеквизита;

			Если чВариантЗаполнения <> 0 Тогда
				// Если в колонке 6 задан вариант заполнения показателя, 
				// то его значение может определяться по данным ИБ.
				// Дополняем таблицу значений вариантов заполнения
				НоваяСтрока = ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Добавить();
				НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
				НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
			КонецЕсли;

		КонецЦикла;

		Если ЭтаФорма["ТаблицаВариантыЗаполнения" + ИмяСтраницы][0].ТаблицаВариантовЗаполнения.Количество() > 0 Тогда		
			// имеются автоматически заполняемые ячейки
            
			// Создаем структуру, содержащей варианты заполнения показателей отчета.
			//
			// В качестве ключа используется имя страницы основной панели формы, содержащей
			//   табличный документ с автоматически заполняемыми показателями.
			// В качестве значения принимаем Массив из таблицы значений - вариантов заполнения
			//   показателей по каждой странице многостраничного раздела.
			//
			мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, ИмяСтраницы);
			мСтруктураВариантыЗаполненияЭталон.Вставить(ИмяСтраницы, ИмяСтраницы);
						
		Конецесли;

	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки в ИМНС.
//
&НаСервере
Процедура ФормироватьСтруктуруСтраницОтчета() 

	// Дерево содержит коллекцию страниц отчета.
	// В колонках дерева хранятся следующие данные:
	//    - представление листа;
	//    - имя страницы основной панели формы, содержащей выводимый на печать лист;
	//    - имя поля табличного документа;
	//    - имя области ячеек табличного документа (используется в случае вывода
	//      на печать отдельных страниц титульного листа);
	//    - ориентация страницы при печати;
	//    - число, метка вывода страницы на печать;
	//    - число, метка показа страницы на основной панели формы;
	//    - число, метка выгрузки данных страницы 
	//

	мДеревоСтраницОтчета.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Декларация";
	СтрокаУровня1.Представление            = НСтр("ru='Расчет';uk='Розрахунок'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "ОбластьПечатиПоВысоте|ОбластьПечатиПоШирине";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;

	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица11";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 1(1)';uk='Таблиця 1(1)'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица12";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 1(2)';uk='Таблиця 1(2)'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица13";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 1(3)';uk='Таблиця 1(3)'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица41";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 4(1)';uk='Таблиця 4(1)'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица42";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 4(2)';uk='Таблиця 4(2)'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица43";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 4(3)';uk='Таблиця 4(3)'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица5";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 5';uk='Додаток 5'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Ландшафт;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
 
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица61";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 6(1)';uk='Таблиця 6(1)'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица62";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 6(2)';uk='Таблиця 6(2)'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
	СтрокаУровня1 = мДеревоСтраницОтчета.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы              = "Таблица63";
	СтрокаУровня1.Представление            = НСтр("ru='Таблица 6(3)';uk='Таблиця 6(3)'");
	СтрокаУровня1.ИмяОбластиТабличногоПоля = "";
	СтрокаУровня1.ОриентацияСтраницы       = ОриентацияСтраницы.Портрет;
	СтрокаУровня1.ВыводНаПечать            = 1;
	СтрокаУровня1.ПоказатьСтраницу         = 1;
	СтрокаУровня1.ВыгрузитьСтраницу        = 1;
	
КонецПроцедуры // ФормироватьСтруктуруСтраницОтчета()

// Формирует дерево значений - структуру страниц отчета,
// содержащей настройки показа страниц, вывода на печать и выгрузки.
//
&НаСервере
Процедура ФормироватьСтруктуруСвойствСтраниц() Экспорт
		
	мСвойстваРазделовДекларации.ПолучитьЭлементы().Очистить();
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Декларация";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено; 
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;

	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Таблица11";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы11;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Таблица12";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы12;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Таблица13";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы13;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Таблица41";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы41;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Таблица42";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы42;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Таблица43";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы43;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Таблица5";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы5;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Таблица61";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы61;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Таблица62";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы62;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 2;
	
	СтрокаУровня1 = мСвойстваРазделовДекларации.ПолучитьЭлементы().Добавить();
	СтрокаУровня1.ИмяСтраницы                          = "Таблица63";
	СтрокаУровня1.СохранятьМногострКакТЗ               = Неопределено;
	СтрокаУровня1.МногостраничностьВРазделе            = Ложь;
	СтрокаУровня1.МаксКолвоЭкз						   = 0;
	СтрокаУровня1.ОчищатьРаздел                        = Истина;
	СтрокаУровня1.ИмяПредставления                     = "";
	СтрокаУровня1.ПредставлениеДанных                  = Истина;
	СтрокаУровня1.РазделОбязателенДляВыгрузки          = Неопределено;
	СтрокаУровня1.РазделЯвляетсяАвтозаполняемым        = Ложь;
	
	НовСтр = СтрокаУровня1.МногострочностьВРазделе.Добавить();
	НовСтр.ИдГруппы = СтруктураРеквизитовФормы.мИдГруппы63;
	НовСтр.Область = "МногострочнаяЧасть_1";
	НовСтр.ВысотаСтроки = 2;
	
КонецПроцедуры // ФормироватьСтруктуруСвойствСтраниц()

// СформироватьДеревоРазделовОтчетаНаСервере()
//
&НаСервере
Процедура СформироватьДеревоРазделовОтчетаНаСервере() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаСервере()

// СформироватьДеревоРазделовОтчетаНаКлиенте()
//
&НаКлиенте
Процедура СформироватьДеревоРазделовОтчетаНаКлиенте() Экспорт
	
	СформироватьДеревоРазделовОтчета(ЭтаФорма);
			
КонецПроцедуры // СформироватьДеревоРазделовОтчетаНаКлиенте()

// СформироватьДеревоРазделовОтчета()
//
&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДеревоРазделовОтчета(Форма)
	
	Форма["РазделыОтчета"].ПолучитьЭлементы().Очистить();
	
	Для Каждого ЭлементДереваСтраницОтчета Из Форма["мДеревоСтраницОтчета"].ПолучитьЭлементы() Цикл
		
		Если ЭлементДереваСтраницОтчета.ПоказатьСтраницу = 1 Тогда
			
			ЭлементРазделовОтчета = Форма["РазделыОтчета"].ПолучитьЭлементы().Добавить();
			ЭлементРазделовОтчета.КолонкаРазделыОтчета         = ЭлементДереваСтраницОтчета.Представление;
			ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим = ЭлементДереваСтраницОтчета.ИмяСтраницы;
			ЭлементРазделовОтчета.ИндексКартинки               = 1;
			ЭлементРазделовОтчета.РазделМногостраничный        = Ложь;
			ЭлементРазделовОтчета.РазделМногострочный          = Ложь;
			
			НайденноеЗначение = Неопределено;
			
			Если Форма["мСтруктураМногостраничныхРазделов"].Свойство(ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим, НайденноеЗначение) Тогда
				
				Если НЕ НайденноеЗначение = Неопределено Тогда
					
					НайденноеЗначение = Форма[НайденноеЗначение];
					
					ЭлементРазделовОтчета.ИндексКартинки        = 0;
					ЭлементРазделовОтчета.РазделМногостраничный = Истина;
					
					Для НомерСтраницы = 1 По НайденноеЗначение.Количество() Цикл
						
						СтраницаРазделаОтчета = ЭлементРазделовОтчета.ПолучитьЭлементы().Добавить();
						
						СтраницаРазделаОтчета.КолонкаРазделыОтчета              = НайденноеЗначение[НомерСтраницы-1].Представление;
						СтраницаРазделаОтчета.КолонкаРазделыОтчетаСокрНаим      = ЭлементРазделовОтчета.КолонкаРазделыОтчетаСокрНаим;
						СтраницаРазделаОтчета.КолонкаНомерСтраницыРазделаОтчета = НомерСтраницы;
						СтраницаРазделаОтчета.ИндексКартинки                    = 1;
						СтраницаРазделаОтчета.РазделМногостраничный             = ЭлементРазделовОтчета.РазделМногостраничный;
						СтраницаРазделаОтчета.РазделМногострочный               = ЭлементРазделовОтчета.РазделМногострочный;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры // СформироватьДеревоРазделовОтчета()

&НаСервере
Процедура СформироватьТаблицуНужныхСтатей()
	
	СтрокиДекларации = Справочники.СтатьиНалоговыхДеклараций;

	//Основные используемые статьи 
	НС_ФОТ = ТаблицаНужныхСтатей.Добавить();
	НС_ФОТ.Статья = СтрокиДекларации.ЕСВ_ФОТ;
	НС_ФОТ.ПолеБазаОсновное = "R01021G";
	НС_ФОТ.ПолеВзносОсновное = "R01031G";
	НС_ФОТ.ПолеБазаДоначисление = "R01025G";
	НС_ФОТ.ПолеВзносДоначисление = "R01035G";
	НС_ФОТ.ПолеБазаТип24 = "R01044G";
	НС_ФОТ.ПолеВзносТип24 = "R0104101G";
	НС_ФОТ.ПолеБазаТип35 = "R01054G";
	НС_ФОТ.ПолеВзносТип35 = "R0105101G";
	
	НС_ФОТИнвалиды = ТаблицаНужныхСтатей.Добавить();
	НС_ФОТИнвалиды.Статья = СтрокиДекларации.ЕСВ_ФОТИнвалиды;
	НС_ФОТИнвалиды.ПолеБазаОсновное = "R01022G";
	НС_ФОТИнвалиды.ПолеВзносОсновное = "R01032G";
	НС_ФОТИнвалиды.ПолеБазаДоначисление = "";
	НС_ФОТИнвалиды.ПолеВзносДоначисление = "";
	НС_ФОТИнвалиды.ПолеБазаТип24 = "R01044G";
	НС_ФОТИнвалиды.ПолеВзносТип24 = "R0104104G";
	НС_ФОТИнвалиды.ПолеБазаТип35 = "R01054G";
	НС_ФОТИнвалиды.ПолеВзносТип35 = "R0105104G";
	НС_ФОТИнвалиды.ПолеВзносПолная = "R010321G";
	
	НС_ФОТИнвалиды50 = ТаблицаНужныхСтатей.Добавить();
	НС_ФОТИнвалиды50.Статья = СтрокиДекларации.ЕСВ_ФОТИнвалиды50;
	НС_ФОТИнвалиды50.ПолеБазаОсновное = "R01024G";
	НС_ФОТИнвалиды50.ПолеВзносОсновное = "R01034G";
	НС_ФОТИнвалиды50.ПолеБазаДоначисление = "";
	НС_ФОТИнвалиды50.ПолеВзносДоначисление = "";
	НС_ФОТИнвалиды50.ПолеБазаТип24 = "R01044G";
	НС_ФОТИнвалиды50.ПолеВзносТип24 = "R0104106G";
	НС_ФОТИнвалиды50.ПолеБазаТип35 = "R01054G3";
	НС_ФОТИнвалиды50.ПолеВзносТип35 = "R0105106G";
	НС_ФОТИнвалиды50.ПолеВзносПолная = "R010341G";
	
	НС_ФОТУТОГ = ТаблицаНужныхСтатей.Добавить();
	НС_ФОТУТОГ.Статья = СтрокиДекларации.ЕСВ_ФОТУТОГ;
	НС_ФОТУТОГ.ПолеБазаОсновное = "R01023G";
	НС_ФОТУТОГ.ПолеВзносОсновное = "R01033G";
	НС_ФОТУТОГ.ПолеБазаДоначисление = "";
	НС_ФОТУТОГ.ПолеВзносДоначисление = "";
	НС_ФОТУТОГ.ПолеБазаТип24 = "R01044G";
	НС_ФОТУТОГ.ПолеВзносТип24 = "R0104105G";
	НС_ФОТУТОГ.ПолеБазаТип35 = "R01054G";
	НС_ФОТУТОГ.ПолеВзносТип35 = "R0105105G";
	НС_ФОТУТОГ.ПолеВзносПолная = "R010331G";

	//Статьи устарели, но используются для совместимости и для отражения корректировок
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТБольничные;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТ,,"Статья");
	НС.ПолеВзносТип24 = "R0104108G";
	НС.ПолеВзносТип35 = "R0105108G";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТБюджетники;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТ,,"Статья");
	НС.ПолеВзносТип24 = "R0104102G";
	НС.ПолеВзносТип35 = "R0105102G";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТГПХ;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТ,,"Статья");
	НС.ПолеВзносТип24 = "R0104107G";
	НС.ПолеВзносТип35 = "R0105107G";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТЛетчики;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТ,,"Статья");
	НС.ПолеВзносТип24 = "R0104103G";
	НС.ПолеВзносТип35 = "R0105103G";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТСудостр;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТ,,"Статья");
	НС.ПолеВзносТип24 = "R0104108G";
	НС.ПолеВзносТип35 = "R0105108G";

	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТГПХСудостр;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТ,,"Статья");
	НС.ПолеВзносТип24 = "R04108G3";
	НС.ПолеВзносТип35 = "R05108G3";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТДекретные;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТ,,"Статья");
	НС.ПолеВзносТип24 = "R0104108G";
	НС.ПолеВзносТип35 = "R0105108G";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТБольничныеИнвалиды;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТИнвалиды,,"Статья");
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТДекретныеИнвалиды;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТИнвалиды,,"Статья");
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТБольничныеИнвалиды50;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТИнвалиды50,,"Статья");
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТДекретныеИнвалиды50;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТИнвалиды50,,"Статья");
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТБольничныеУТОГ;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТУТОГ,,"Статья");
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТДекретныеУТОГ;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТУТОГ,,"Статья");
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ФОТГПХУТОГ;
	ЗаполнитьЗначенияСвойств(НС, НС_ФОТУТОГ,,"Статья");
	
	//Статьи взносов больше в отчет не попадают, только для отражения корректировок
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_Работники;
	НС.ПолеБазаОсновное = "";
	НС.ПолеВзносОсновное = "";
	НС.ПолеБазаДоначисление = "";
	НС.ПолеВзносДоначисление = "";
	НС.ПолеБазаТип24 = "";
	НС.ПолеВзносТип24 = "R0104301G";
	НС.ПолеБазаТип35 = "";
	НС.ПолеВзносТип35 = "R0105301G";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_Больничные;
	НС.ПолеБазаОсновное = "";
	НС.ПолеВзносОсновное = "";
	НС.ПолеБазаДоначисление = "";
	НС.ПолеВзносДоначисление = "";
	НС.ПолеБазаТип24 = "";
	НС.ПолеВзносТип24 = "R0104305G";
	НС.ПолеБазаТип35 = "";
	НС.ПолеВзносТип35 = "R0105305G";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ГПХ;
	НС.ПолеБазаОсновное = "";
	НС.ПолеВзносОсновное = "";
	НС.ПолеБазаДоначисление = "";
	НС.ПолеВзносДоначисление = "";
	НС.ПолеБазаТип24 = "";
	НС.ПолеВзносТип24 = "R0104304G";
	НС.ПолеБазаТип35 = "";
	НС.ПолеВзносТип35 = "R0105304G";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_ИнвалидыУТОГ;
	НС.ПолеБазаОсновное = "";
	НС.ПолеВзносОсновное = "";
	НС.ПолеБазаДоначисление = "";
	НС.ПолеВзносДоначисление = "";
	НС.ПолеБазаТип24 = "";
	НС.ПолеВзносТип24 = "R0104302G";
	НС.ПолеБазаТип35 = "";
	НС.ПолеВзносТип35 = "R0105302G";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_РаботникиСР;
	НС.ПолеБазаОсновное = "";
	НС.ПолеВзносОсновное = "";
	НС.ПолеБазаДоначисление = "";
	НС.ПолеВзносДоначисление = "";
	НС.ПолеБазаТип24 = "";
	НС.ПолеВзносТип24 = "R0104303G";
	НС.ПолеБазаТип35 = "";
	НС.ПолеВзносТип35 = "R0105303G";
	
	НС = ТаблицаНужныхСтатей.Добавить();
	НС.Статья = СтрокиДекларации.ЕСВ_Декретные;
	НС.ПолеБазаОсновное = "";
	НС.ПолеВзносОсновное = "";
	НС.ПолеБазаДоначисление = "";
	НС.ПолеВзносДоначисление = "";
	НС.ПолеБазаТип24 = "";
	НС.ПолеВзносТип24 = "R0104305G";
	НС.ПолеБазаТип35 = "";
	НС.ПолеВзносТип35 = "R0105305G";

КонецПроцедуры

&НаСервере
Процедура ДобавитьЗначениеВСтруктуру(СтруктураДанных, Ключ, Значение)
	
	Если НЕ ЗначениеЗаполнено(Ключ) ИЛИ СтрДлина(Ключ) = 1 ИЛИ НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;	
	
	НайденноеЗначение = 0;
	
	Если СтруктураДанных.Свойство(Ключ, НайденноеЗначение) Тогда
		СтруктураДанных.Вставить(Ключ, НайденноеЗначение + Значение);
	Иначе
		СтруктураДанных.Вставить(Ключ, Значение);
	КонецЕсли;	
	
Конецпроцедуры

&НаСервере
Функция СформироватьСтруктуруДанныхДопСтрокСтраницы(Форма, ИмяСтраницы) Экспорт
	Перем СтруктураДанныхДопСтрокРаздела;

	//Если ИмяСтраницы = "ПриложениеПН" Тогда

	//	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, Форма.СтруктураРеквизитовФормы.мИдГруппыPN);

	//	СтруктураДанныхДопСтрокРаздела = Новый Структура;
	//	
	//	ПромТаблицаДопСтрокРаздела = Неопределено;
	//	Форма.мСтруктураМногострочныхРазделов.Свойство(Форма.СтруктураРеквизитовФормы.мИдГруппыPN, ПромТаблицаДопСтрокРаздела);
	//	ПромТаблицаДопСтрокРаздела = Форма[ПромТаблицаДопСтрокРаздела];
	//	ТаблицаДопСтрокГруппы = Форма["Хранилище" + Форма.СтруктураРеквизитовФормы.мИдГруппыPN].Добавить().Таблица;
	//	КопироватьДанныеФормы(ПромТаблицаДопСтрокРаздела, ТаблицаДопСтрокГруппы);
	//	СтруктураДанныхДопСтрокРаздела.Вставить(Форма.СтруктураРеквизитовФормы.мИдГруппыPN, ТаблицаДопСтрокГруппы);
	//	
	//КонецЕсли;

	Возврат СтруктураДанныхДопСтрокРаздела;

КонецФункции

// РазделыОтчетаПриАктивизацииСтроки()
//
&НаКлиенте
Процедура РазделыОтчетаПриАктивизацииСтроки(Элемент) Экспорт
	
	Если Элемент.ТекущиеДанные = Неопределено
	 ИЛИ Элемент.ТекущаяСтрока = СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	// сохраним текущее положение курсора на странице
	Если СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Неопределено Тогда
		СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Новый Структура;
	КонецЕсли;
	ТекущийНомерСтраницы = "_" + Строка(СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	
	КоординатыОбласти = Новый Структура();
	КоординатыОбласти.Вставить("Верх", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Верх);
	КоординатыОбласти.Вставить("Низ", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Низ);
	КоординатыОбласти.Вставить("Лево", 	Элементы.ТабличныйДокумент.ТекущаяОбласть.Лево);
	КоординатыОбласти.Вставить("Право", Элементы.ТабличныйДокумент.ТекущаяОбласть.Право);
	
	СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц.Вставить(ТекущийНомерСтраницы, КоординатыОбласти);	

	СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	
	Элементы.ОчиститьТекущуюСтраницу.Доступность = Истина;
	
	Если СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере Тогда
		
		Если Элемент.ТекущиеДанные.РазделМногостраничный Тогда
			
			Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = ?(Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = Неопределено
															        ИЛИ Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета = 0, 1, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
																
		КонецЕсли;														
				
		ВывестиМакетСтраницыВТабличныйДокументНаСервере(Элемент.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим, Элемент.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета);
		
	Иначе
		
		СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Истина;
		
	КонецЕсли;
		
	
	
	// восстановим текущее положение курсора
	ТекущийНомерСтраницы = "_"+Строка(СтруктураРеквизитовФормы.ТекущаяСтрокаРазделовОтчета);
	Если СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц.Свойство(ТекущийНомерСтраницы) Тогда
		
		КоординатыОбласти = СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц[ТекущийНомерСтраницы];
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(КоординатыОбласти.Верх, КоординатыОбласти.Лево, КоординатыОбласти.Низ, КоординатыОбласти.Право);	
		
	Иначе	
		
		Элементы.ТабличныйДокумент.ТекущаяОбласть = ТабличныйДокумент.Область(1, 1, 1, 1);	
		
	КонецЕсли;
	
КонецПроцедуры // РазделыОтчетаПриАктивизацииСтроки()

&НаСервере
Процедура ВывестиМакетСтраницыВТабличныйДокументНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
		
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Истина);
			
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета);
	
	СтруктураРеквизитовФормы.НаимТекущегоРаздела  = ИмяТекРаздела;
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = НомерСтраницыРазделаОтчета;
	
КонецПроцедуры // ВывестиМакетСтраницыВТабличныйДокументНаСервере()

&НаСервере
Процедура СохранитьДанныеРаздела(НаимРаздела, ОчищатьРазделЕслиЕстьМногострочность, ИзменитьПризнакАктивностиСтраницы = Истина)
	
	// Многостраничные и многострочные разделы.
	//
	Если    НаимРаздела = "ПриложениеПН" Тогда
		
		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(НаимРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		
		СтрТаблицыСтраниц = ТаблицаСтраницРаздела.НайтиСтроки(Новый Структура("АктивнаяСтраница", Истина));
		
		Если СтрТаблицыСтраниц.Количество() > 0 Тогда
				
			СтрТаблицаСтраницы = СтрТаблицыСтраниц[0];
			
			// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина)
			
			СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
			
			ОпределитьПредставлениеДопСтраниц(НаимРаздела);

			СтруктураДанныхДопСтрокРаздела = СформироватьСтруктуруДанныхДопСтрокСтраницы(ЭтаФорма, НаимРаздела);
			
			Если СтрТаблицаСтраницы.Данные.Количество() > 0 Тогда
				СтрТаблицаСтраницы.Данные[0].Значение = СтруктураДанныхТекущейТаблицы;
			Иначе
				СтрТаблицаСтраницы.Данные.Добавить(СтруктураДанныхТекущейТаблицы);
			КонецЕсли;
							
			Если СтрТаблицаСтраницы.ДанныеДопСтрок.Количество() > 0 Тогда
				СтрТаблицаСтраницы.ДанныеДопСтрок[0].Значение = СтруктураДанныхДопСтрокРаздела;
			Иначе
				СтрТаблицаСтраницы.ДанныеДопСтрок.Добавить(СтруктураДанныхДопСтрокРаздела, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
			КонецЕсли;
			
			СтрТаблицаСтраницы.АктивнаяСтраница = НЕ ИзменитьПризнакАктивностиСтраницы;
			
		КонецЕсли;
		
	// Обычные разделы.
	//
	Иначе
		
		ЭтаФорма["СтруктураДанных" + НаимРаздела] = СобратьДанныеТекущегоТаблПоля(ЭтаФорма, "ТабличныйДокумент");
		
		ИмяГруппыМассив = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(НаимРаздела);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
			ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы);	
		КонецЦикла;
		
	КонецЕсли;
				
КонецПроцедуры

&НаСервере
Процедура ОпределитьПредставлениеДопСтраниц(ИмяСтраницы = Неопределено, ТолькоУАктивнойСтраницы = Неопределено)
	Перем ТаблицаСтраницРаздела;
	Перем ТекущееПредставлениеСтраницы;

	ТолькоАктивная = ?(ТолькоУАктивнойСтраницы = Неопределено, Ложь, ТолькоУАктивнойСтраницы);
	
	Для Каждого Страница Из мСтруктураМногостраничныхРазделов Цикл
		ИмяТекСтраницы        = Страница.Ключ;
		ТаблицаСтраницРаздела = ЭтаФорма[Страница.Значение];

		Если ИмяСтраницы <> Неопределено Тогда
			Если ИмяТекСтраницы <> ИмяСтраницы Тогда
				Продолжить; // Пропускаем не нужные страницы
			КонецЕсли;
		КонецЕсли;

		// Если есть хоть одна страница - определим её представление
		Если ТаблицаСтраницРаздела.Количество() > 0 Тогда

			НомерСтраницы = 0;

			Для Каждого СтрокаТаблицы Из ТаблицаСтраницРаздела Цикл

				НомерСтраницы = НомерСтраницы + 1;

				СохрПредставлениеСтраницы = СтрокаТаблицы.Представление;

				// Если колонки нет, тогда автоматическое представление включено по умолчанию.
				Если ТаблицаСтраницРаздела[0].Свойство("АвтоматическоеПредставление") Тогда
					АвтоматическоеПредставление = СтрокаТаблицы.АвтоматическоеПредставление;
				Иначе
					АвтоматическоеПредставление = Истина;
				КонецЕсли;

				Если НЕ АвтоматическоеПредставление Тогда
					Продолжить;
				КонецЕсли;

				Если (НЕ ТолькоАктивная) Или ((ТолькоАктивная) И (СтрокаТаблицы.АктивнаяСтраница))Тогда

					ТекущееПредставлениеСтраницы = НСтр("ru='Стр. ';uk='Стр. '") + Строка(НомерСтраницы);
					СтрокаТаблицы.Представление = ТекущееПредставлениеСтраницы;

				КонецЕсли; // ТолькоАктивная

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, НомерСтраницыРазделаОтчета)
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + ИмяТекРаздела));
	
	Если НЕ ИмяТекРаздела = "ПриложениеПН" Тогда 
		
		Для Каждого ЭлСтруктуры Из ЭтаФорма["СтруктураДанных" + ИмяТекРаздела] Цикл
			Если НЕ ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) = Неопределено Тогда
				Попытка
					ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
				Исключение
				КонецПопытки;
			КонецЕсли;	
		КонецЦикла;
		
		ИмяГруппыМассив = ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяТекРаздела);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
		
			СтруктураГруппы = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
			
			СтруктураГруппы = ЭтаФорма[СтруктураГруппы];
			
			ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
		
		КонецЦикла;
						
//	 Многострочные и обычные разделы.
	Иначе
		НаимТаблицыСтраницы = мСтруктураМногостраничныхРазделов[ИмяТекРаздела];
		
		СтруктураДанных = Новый Структура;
		
		СписокДанных = ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].Данные;
		
		ЭтаФорма[НаимТаблицыСтраницы][НомерСтраницыРазделаОтчета - 1].АктивнаяСтраница = Истина;

		Если СписокДанных.Количество() > 0 Тогда
			СтруктураДанных = СписокДанных[0].Значение;
		КонецЕсли;
		 	 
		Для Каждого ЭлСтруктуры Из СтруктураДанных Цикл
			
			Если НЕ ТабличныйДокумент.Области.Найти(ЭлСтруктуры.Ключ) = Неопределено Тогда
				
				Попытка
					ТабличныйДокумент.Области[ЭлСтруктуры.Ключ].Значение = ЭлСтруктуры.Значение;
				Исключение
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;

		ТаблицаСтраницРаздела = Неопределено;
		
		мСтруктураМногостраничныхРазделов.Свойство(ИмяТекРаздела, ТаблицаСтраницРаздела);
				
		ТаблицаСтраницРаздела = ЭтаФорма[ТаблицаСтраницРаздела];
		                                                        		
		СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСтраницыРазделаОтчета - 1];
		
		СтрСледующаяСтраница.АктивнаяСтраница = Истина;
		
		ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(ЭтаФорма, ИмяТекРаздела);
				
		НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;
		
		Если (ТипЗнч(НовДанныеДопСтрокРаздела) = Тип("СписокЗначений"))
			И (НовДанныеДопСтрокРаздела.Количество() > 0)
			И (НовДанныеДопСтрокРаздела[0].Представление = "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела") Тогда
			
			НовДанныеДопСтрокРаздела = НовДанныеДопСтрокРаздела[0].Значение;
			
		Иначе
			
			НовДанныеДопСтрокРаздела = Неопределено;
			
		КонецЕсли;

		
		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда
			
			Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
				
				ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
				ДанныеГруппыСтрок = ГруппаСтрок.Значение;
				
				ПромТаблицаГруппыСтрок = ЭтаФорма["Хранилище" + ИмяГруппыДопСтрок].Добавить().Таблица;
				
				КопироватьДанныеФормы(ДанныеГруппыСтрок, ПромТаблицаГруппыСтрок);
				
				// Заменяем таблицу значений с данными текущей страницы.
				КопироватьДанныеФормы(ПромТаблицаГруппыСтрок, ЭтаФорма[ИмяГруппыДопСтрок]);
				
				ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
				ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппыДопСтрок);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	//ЗаполнитьПоказателиЗначениямиПоУмолчанию(ИмяТекРаздела);
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(ИмяТекРаздела);
	
	УстановитьЦветФонаЯчейкиНаСервере(,, ИмяТекРаздела);
	
	
КонецПроцедуры // ВывестиМакетВТаблДокНаСервере()

&НаСервере
Процедура ЗаполнитьПоказателиЗначениямиПоУмолчанию(НаимРаздела)
	
	Если НаимРаздела = "ПриложениеПН" Тогда
		//ЗаполнитьШапкуПодписиПриложенияПН(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоказателиЗначениямиПоУмолчанию()

&НаКлиенте
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИдГруппы) Экспорт

	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы11", СтруктураРеквизитовФормы.мИдГруппы11);
	ИдГрупп.Вставить("мИдГруппы12", СтруктураРеквизитовФормы.мИдГруппы12);
	ИдГрупп.Вставить("мИдГруппы13", СтруктураРеквизитовФормы.мИдГруппы13);
	ИдГрупп.Вставить("мИдГруппы41", СтруктураРеквизитовФормы.мИдГруппы41);
	ИдГрупп.Вставить("мИдГруппы42", СтруктураРеквизитовФормы.мИдГруппы42);
	ИдГрупп.Вставить("мИдГруппы43", СтруктураРеквизитовФормы.мИдГруппы43);
	ИдГрупп.Вставить("мИдГруппы5",  СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы61", СтруктураРеквизитовФормы.мИдГруппы61);
	ИдГрупп.Вставить("мИдГруппы62", СтруктураРеквизитовФормы.мИдГруппы62);
	ИдГрупп.Вставить("мИдГруппы63", СтруктураРеквизитовФормы.мИдГруппы63);
	                                                                                  
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);
		
КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте()

&НаСервере
Функция ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИдГруппы) Экспорт

	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы11", СтруктураРеквизитовФормы.мИдГруппы11);
	ИдГрупп.Вставить("мИдГруппы12", СтруктураРеквизитовФормы.мИдГруппы12);
	ИдГрупп.Вставить("мИдГруппы13", СтруктураРеквизитовФормы.мИдГруппы13);
	ИдГрупп.Вставить("мИдГруппы41", СтруктураРеквизитовФормы.мИдГруппы41);
	ИдГрупп.Вставить("мИдГруппы42", СтруктураРеквизитовФормы.мИдГруппы42);
	ИдГрупп.Вставить("мИдГруппы43", СтруктураРеквизитовФормы.мИдГруппы43);
	ИдГрупп.Вставить("мИдГруппы5",  СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы61", СтруктураРеквизитовФормы.мИдГруппы61);
	ИдГрупп.Вставить("мИдГруппы62", СтруктураРеквизитовФормы.мИдГруппы62);
	ИдГрупп.Вставить("мИдГруппы63", СтруктураРеквизитовФормы.мИдГруппы63);
	
	Возврат ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп);

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере()

// Функция определяет поле табличного документа формы, содержащее 
// многострочный раздел.по имени ИдГруппы.
//
// Параметры:
//  ИдГруппы - строка, имя многострочного раздела.
//
// Возвращаемое значение:
//  Поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы, ИдГрупп) Экспорт

	Перем ТекТабличноеПоле;
		
	Если   ИдГруппы = ИдГрупп.мИдГруппы5 Тогда
		ТекТабличноеПоле = "Таблица5";
		
	ИначеЕсли   ИдГруппы = ИдГрупп.мИдГруппы11 Тогда
		ТекТабличноеПоле = "Таблица11";
		
	ИначеЕсли   ИдГруппы = ИдГрупп.мИдГруппы12 Тогда
		ТекТабличноеПоле = "Таблица12";
		
	ИначеЕсли   ИдГруппы = ИдГрупп.мИдГруппы13 Тогда
		ТекТабличноеПоле = "Таблица13";
		
	ИначеЕсли   ИдГруппы = ИдГрупп.мИдГруппы41 Тогда
		ТекТабличноеПоле = "Таблица41";
		
	ИначеЕсли   ИдГруппы = ИдГрупп.мИдГруппы42 Тогда
		ТекТабличноеПоле = "Таблица42";
		
	ИначеЕсли   ИдГруппы = ИдГрупп.мИдГруппы43 Тогда
		ТекТабличноеПоле = "Таблица43";
		
	ИначеЕсли   ИдГруппы = ИдГрупп.мИдГруппы61 Тогда
		ТекТабличноеПоле = "Таблица61";
		
	ИначеЕсли   ИдГруппы = ИдГрупп.мИдГруппы62 Тогда
		ТекТабличноеПоле = "Таблица62";
		
	ИначеЕсли   ИдГруппы = ИдГрупп.мИдГруппы63 Тогда
		ТекТабличноеПоле = "Таблица63";
		
	КонецЕсли;

	Возврат ТекТабличноеПоле;

КонецФункции // ОпределитьТабличноеПолеПоИдМногострочногоРаздела()

// ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере()
//
&НаСервере
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы11", СтруктураРеквизитовФормы.мИдГруппы11);
	ИдГрупп.Вставить("мИдГруппы12", СтруктураРеквизитовФормы.мИдГруппы12);
	ИдГрупп.Вставить("мИдГруппы13", СтруктураРеквизитовФормы.мИдГруппы13);
	ИдГрупп.Вставить("мИдГруппы41", СтруктураРеквизитовФормы.мИдГруппы41);
	ИдГрупп.Вставить("мИдГруппы42", СтруктураРеквизитовФормы.мИдГруппы42);
	ИдГрупп.Вставить("мИдГруппы43", СтруктураРеквизитовФормы.мИдГруппы43);
	ИдГрупп.Вставить("мИдГруппы5",  СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы61", СтруктураРеквизитовФормы.мИдГруппы61);
	ИдГрупп.Вставить("мИдГруппы62", СтруктураРеквизитовФормы.мИдГруппы62);
	ИдГрупп.Вставить("мИдГруппы63", СтруктураРеквизитовФормы.мИдГруппы63);
	
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);
	
КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаСервере()

// ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте()
//
&НаКлиенте
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте(ИмяЛиста = Неопределено) Экспорт
	
	ИдГрупп = Новый Структура;
	ИдГрупп.Вставить("мИдГруппы11", СтруктураРеквизитовФормы.мИдГруппы11);
	ИдГрупп.Вставить("мИдГруппы12", СтруктураРеквизитовФормы.мИдГруппы12);
	ИдГрупп.Вставить("мИдГруппы13", СтруктураРеквизитовФормы.мИдГруппы13);
	ИдГрупп.Вставить("мИдГруппы41", СтруктураРеквизитовФормы.мИдГруппы41);
	ИдГрупп.Вставить("мИдГруппы42", СтруктураРеквизитовФормы.мИдГруппы42);
	ИдГрупп.Вставить("мИдГруппы43", СтруктураРеквизитовФормы.мИдГруппы43);
	ИдГрупп.Вставить("мИдГруппы5",  СтруктураРеквизитовФормы.мИдГруппы5);
	ИдГрупп.Вставить("мИдГруппы61", СтруктураРеквизитовФормы.мИдГруппы61);
	ИдГрупп.Вставить("мИдГруппы62", СтруктураРеквизитовФормы.мИдГруппы62);
	ИдГрупп.Вставить("мИдГруппы63", СтруктураРеквизитовФормы.мИдГруппы63);
		
	Возврат ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста, , ИдГрупп);

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтраницеНаКлиенте()

// Функция определяет многострочный раздел табличного документа
// на активной странице основной панели формы.
//
// Параметры:
//  Нет;
//
// Возвращаемое значение:
//  строка, имя многострочного раздела.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяЛиста = Неопределено, ТекущаяСтраница, ИдГрупп)
	
	Перем ИмяГруппы;
	
	ИмяГруппы = Новый Массив;
	
	Если ИмяЛиста = Неопределено Тогда
        ИмяТекущейСтраницыПанели = ТекущаяСтраница.Имя;
	Иначе
		ИмяТекущейСтраницыПанели = ИмяЛиста;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = "Таблица5" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы5);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Таблица11" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы11);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Таблица12" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы12);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Таблица13" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы13);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Таблица41" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы41);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Таблица42" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы42);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Таблица43" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы43);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Таблица61" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы61);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Таблица62" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы62);
	ИначеЕсли ИмяТекущейСтраницыПанели = "Таблица63" Тогда
		ИмяГруппы.Добавить(ИдГрупп.мИдГруппы63);
	КонецЕсли;

	Возврат ИмяГруппы;

КонецФункции // ОпределитьИдМногострочногоРазделаПоАктивнойСтранице()

&НаСервере
Процедура УстановитьФорматВыводаВПоляхВводаНаСервере(НаимРаздела)
	
	УстановитьФорматВыводаВПоляхВвода(ЭтаФорма, НаимРаздела);
	
КонецПроцедуры // УстановитьФорматВыводаВПоляхВводаНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматВыводаВПоляхВвода(Форма, НаимРаздела) Экспорт
	Перем СтруктураГруппы;

	Если Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
	ИначеЕсли Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения = Форма.ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда
		Форма.СтруктураРеквизитовФормы.мСтрокаФормата = "; ЧДЦ = " + Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
	КонецЕсли;

	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		Если НЕ НаимРаздела = СтрПоказатели.ИмяПоляТаблДокумента Тогда
			Продолжить;
		КонецЕсли;
		
		КодПоказателя				= СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность		= СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре	= СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме		= СокрП(СтрПоказатели.КодПоказателяПоФорме);
		ТипДанныхПоказателя			= СокрП(СтрПоказатели.ТипДанныхПоказателя);
		ИмяПоказателя				= ?(ПустаяСтрока(СтрПоказатели.КодПоказателяПоФорме), КодПоказателя, КодПоказателяПоФорме);

		Если ПустаяСтрока(КодПоказателя) ИЛИ КодПоказателя = "===" ИЛИ КодПоказателя = "###" ИЛИ Лев(СокрЛ(КодПоказателя), 2) = "//" Тогда
			Продолжить;
		КонецЕсли;

		Если ТипДанныхПоказателя = "Е" И ПустаяСтрока(КодПоказателяПоСтруктуре) Тогда
			ТекТабличноеПоле = Форма.ТабличныйДокумент;
			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
				ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
				ФорматируемаяОбласть.ТипЗначения = Новый ОписаниеТипов(ФорматируемаяОбласть.ТипЗначения,,,Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
				
				ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
			Иначе
				// определяем кол-во строк многострочного раздела и применяем процедуру форматирования к данной графе по всем строкам
				НСтр = 1;
				Пока ТекТабличноеПоле.Области.Найти(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) <> Неопределено Цикл
					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;
					
					ЧислоЕЗнак = ПолучитьОписаниеТипаЧислаЕДляРаздела(НаимРаздела);
					ФорматируемаяОбласть.ТипЗначения = Новый ОписаниеТипов(ФорматируемаяОбласть.ТипЗначения,,,Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя));
					
					ФорматируемаяОбласть.Формат = "ЧЦ = " + ЧислоЕЗнак.КвалификаторыЧисла.Разрядность + Форма.СтруктураРеквизитовФормы.мСтрокаФормата;
					НСтр = НСтр + 1;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	

КонецПроцедуры // УстановитьФорматВыводаВПоляхВвода()

//&НаСервере
//Процедура ЗаполнитьДатуПодписиНаСервере()

//	ЗаполнитьДатуПодписи(ЭтаФорма);	

//КонецПроцедуры

//&НаСервереБезКонтекста
//Процедура ЗаполнитьДатуПодписи(Форма)

//	ДатаПодписиСтр = Формат(Форма.ДатаПодписи, "ДФ=ddMMyyyy");
//	//РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Таблица1", "HFILL_", 8, ДатаПодписиСтр, Ложь);			
//	ЗаполнитьПоказательНаСервере("HFILL", Форма.ДатаПодписи, Форма, "СлужебныеДанные");	
//	
//КонецПроцедуры

&НаСервере
Процедура ПоказатьПериод()
	
	// задаем заголовок формы
	СтруктураРеквизитовФормы.СтрПериодОтчета = ПредставлениеПериода(НачалоМесяца(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета), КонецДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета), "ФП = Истина");
	
КонецПроцедуры // ПоказатьПериод()

// УстановитьЦветФонаЯчейкиНаКлиенте()
//
&НаКлиенте
Процедура УстановитьЦветФонаЯчейкиНаКлиенте(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // УстановитьЦветФонаЯчейкиНаКлиенте()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
&НаСервере
Процедура УстановитьЦветФонаЯчейкиНаСервере(ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	УстановитьЦветФонаЯчейки(ЭтаФорма, ИмяЯчейки, ВариантЗаполнения, ИмяТекущейСтраницыПанели);
	
КонецПроцедуры // УстановитьЦветФонаЯчейкиНаСервере()

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.СтруктураРеквизитовФормы.мБезОткрытияФормы ИЛИ Форма.СтруктураРеквизитовФормы.мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		#Если НаКлиенте Тогда
			ИмяСтраницыПанели = РегламентированнаяОтчетностьКлиент.ОпределитьСтраницуПанелиПоКодуПоказателяНаКлиенте(Форма, ИмяЯчейки);
		#Иначе
			ИмяСтраницыПанели = РегламентированнаяОтчетностьВызовСервера.ОпределитьСтраницуПанелиПоКодуПоказателяНаСервере(Форма, ИмяЯчейки);
		#КонецЕсли
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ТабличныйДокумент";

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = РегламентированнаяОтчетностьКлиентСервер.ОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "УстановитьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "СнятьЗащиту");
			Иначе
				Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяЯчейки, "ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		#Если НаКлиенте Тогда
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьКлиент.ПолучитьТаблицуВариантовЗаполненияНаКлиенте(Форма, ИмяТекущейСтраницыПанели);
		#Иначе
			ТаблицаВариантыЗаполнения = РегламентированнаяОтчетностьВызовСервера.ПолучитьТаблицуВариантовЗаполненияНаСервере(Форма, ИмяТекущейСтраницыПанели);
		#КонецЕсли
		
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = РегламентированнаяОтчетностьКлиентСервер.ПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);
			
			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ДанныеФормыКоллекция") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					
					ПозицияXXXX = Найти(ИмяПоказателя, "XXXX");
					Если ПозицияXXXX = 0 Тогда
						ВБлокеВсеПоказателиЗаполняются = Истина;
					Иначе
						ИмяГруппы = Лев(ИмяПоказателя, ПозицияXXXX - 1);
						ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.НайтиСтроки(Новый Структура("ИдГруппы", ИмяГруппы))[0].НезаполняемыеПоказателиЕсть;
					КонецЕсли;
					
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
				КонецЕсли;

				ТекОбластьЯчеек = Форма.ТабличныйДокумент.Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 ИЛИ ВариантЗаполнения = 5 Тогда

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "СнятьЗащиту");
					Иначе
						Форма.ТабличныйДокумент.Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					РегламентированнаяОтчетностьКлиентСервер.СвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ТабличныйДокумент.Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЦветФонаЯчейки()


// ЗаполнитьСведенияОбОрганизацииНаСервере()
//
&НаСервере
Процедура ЗаполнитьСведенияОбОрганизацииНаСервере()
	
	ЗаполнитьСведенияОбОрганизации(ЭтаФорма);
		
КонецПроцедуры // ЗаполнитьСведенияОбОрганизацииНаСервере()

&НаСервереБезКонтекста
Процедура ЗаполнитьСведенияОбОрганизации(Форма)
	
	//Организация = Форма.СтруктураРеквизитовФормы.Организация;	
	//
	//СписокПоказателей = Новый СписокЗначений;
	//СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	//СписокПоказателей.Добавить("","КодКОАТУУ");
	//СписокПоказателей.Добавить("","НалоговаяИнспекция");
	//СписокПоказателей.Добавить("","КодКВЕД");
	//СписокПоказателей.Добавить("","ЮридическийАдрес");
	//СписокПоказателей.Добавить("","Телефон");

	//Сведения = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета, СписокПоказателей);
	//
	//КодЕДРПОУ          	= Сведения.КодПоЕДРПОУ;
	//КодКОАТУУ           = Сведения.КодКОАТУУ;
	//НалоговаяИнспекция  = Сведения.НалоговаяИнспекция;
	//КодКВЕД          	= Сведения.КодКВЕД;
	//HLOC			    = Сведения.ЮридическийАдрес;
	//Телефон  		    = Сведения.Телефон;	
	//
	//ЗаполнитьПоказательНаСервере("TIN",  КодЕДРПОУ, Форма, "СлужебныеДанные");
	//ЗаполнитьПоказательНаСервере("HTIN", КодЕДРПОУ, Форма, "СлужебныеДанные");
	//ЗаполнитьПоказательНаСервере("HKOATUU", КодКОАТУУ, Форма, "Декларация");
	//
	//ЗаполнитьПоказательНаСервере("HNAME", Организация.НаименованиеПолное, Форма, "СлужебныеДанные");
	//ЗаполнитьПоказательНаСервере("HNAME", Организация.НаименованиеПолное, Форма, "Декларация");
	//
	//ЗаполнитьПоказательНаСервере("HLOC", HLOC, Форма, "ПереченьТаблиц");
	//ЗаполнитьПоказательНаСервере("HLOC", HLOC, Форма, "Декларация");
	//
	//ЗаполнитьПоказательНаСервере("HTEL", Телефон, Форма, "ПереченьТаблиц");	
	//ЗаполнитьПоказательНаСервере("HTEL", Телефон, Форма, "Декларация");	

	//ЗаполнитьПоказательНаСервере("HKVED", 	КодКВЕД, 			Форма, "Декларация");	
	//Если ЗначениеЗаполнено(НалоговаяИнспекция) Тогда 
	//	ЗаполнитьПоказательНаСервере("HSTI", НалоговаяИнспекция.Код, Форма, "Декларация");	
	//	
	//	//ЗаполнитьПоказательНаСервере("C_RAJ", НалоговаяИнспекция.КодАдмРайона, Форма, "СлужебныеДанные");	
	//	//ЗаполнитьПоказательНаСервере("C_REG", НалоговаяИнспекция.Родитель.Код, Форма, "СлужебныеДанные");	
	//	//ЗаполнитьПоказательНаСервере("C_STI_ORIG", НалоговаяИнспекция.Код, Форма, "СлужебныеДанные");	
	//	//ЗаполнитьПоказательНаСервере("C_STI", НалоговаяИнспекция.Код, Форма, "СлужебныеДанные");	
	//	
	//КонецЕсли;
	//
	////ЗаполнитьПоказательНаСервере("C_DOC_TYPE", 0, Форма, "СлужебныеДанные");	
	////ЗаполнитьПоказательНаСервере("C_DOC_CNT",  1, Форма, "СлужебныеДанные");	
	////ЗаполнитьПоказательНаСервере("C_DOC_STAN",  1, Форма, "СлужебныеДанные");	
	//
	////дата подачи отчета в деларации и во всех приложниях 
	//
	//СписокПоказателей = Новый СписокЗначений;
	//СписокПоказателей.Добавить("","ФИОРук");
	//СписокПоказателей.Добавить("","ФИОБух");
	//СписокПоказателей.Добавить("","ИННРук");
	//СписокПоказателей.Добавить("","ИННБух");
	//СведенияДатаПодписи = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, Форма.ДатаПодписи, СписокПоказателей);
	//
	//ФИОДиректора       = СведенияДатаПодписи.ФИОРук;
	//ФИОГлавБуха        = СведенияДатаПодписи.ФИОБух;
	//ИННДиректора       = СведенияДатаПодписи.ИННРук;
	//ИННГлавБуха        = СведенияДатаПодписи.ИННБух;
	//
	//ЗаполнитьПоказательНаСервере("HBUH",  ФИОГлавБуха, Форма, "СлужебныеДанные");		
	//ЗаполнитьПоказательНаСервере("HBOS",  ФИОДиректора,  Форма, "СлужебныеДанные");		
	//ЗаполнитьПоказательНаСервере("HBUH",  ФИОГлавБуха, Форма, "ПереченьТаблиц");		
	//ЗаполнитьПоказательНаСервере("HBOS",  ФИОДиректора,  Форма, "ПереченьТаблиц");		
	//ЗаполнитьПоказательНаСервере("HBUH",  ФИОГлавБуха, Форма, "Таблица1");		
	//ЗаполнитьПоказательНаСервере("HBOS",  ФИОДиректора,  Форма, "Таблица1");		
	//
	//ЗаполнитьПоказательНаСервере("HKBUH", ИННГлавБуха, Форма, "СлужебныеДанные");		
	//ЗаполнитьПоказательНаСервере("HKBOS", ИННДиректора,  Форма, "СлужебныеДанные");		
	//ЗаполнитьПоказательНаСервере("HKBUH", ИННГлавБуха, Форма, "ПереченьТаблиц");		
	//ЗаполнитьПоказательНаСервере("HKBOS", ИННДиректора,  Форма, "ПереченьТаблиц");		
	//
	//РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Таблица1", "HKBOS_",  10, ИННДиректора, Ложь);				
	//РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Таблица1", "HKBUH_",  	10, ИННГлавБуха,  Ложь);			
	//
	//
	//ЗаполнитьПоказательНаСервере("HZB", "Х", Форма, "ПереченьТаблиц");		
	//ЗаполнитьПоказательНаСервере("HZB", "Х", Форма, "Таблица5");		
	//ЗаполнитьПоказательНаСервере("HZB", "Х", Форма, "Таблица6");		
	//ЗаполнитьПоказательНаСервере("HZB", "Х", Форма, "Таблица7");		
	//
	//ЗаполнитьПоказательНаСервере("HZS", "", Форма, "ПереченьТаблиц");		
	//ЗаполнитьПоказательНаСервере("HZS", "", Форма, "Таблица5");		
	//ЗаполнитьПоказательНаСервере("HZS", "", Форма, "Таблица6");		
	//ЗаполнитьПоказательНаСервере("HZS", "", Форма, "Таблица7");		
	//
	//ЗаполнитьПоказательНаСервере("HZD", "", Форма, "ПереченьТаблиц");		
	//ЗаполнитьПоказательНаСервере("HZD", "", Форма, "Таблица5");		
	//ЗаполнитьПоказательНаСервере("HZD", "", Форма, "Таблица7");		
	//
	//мес = Месяц(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	//мес = Формат(мес, "ЧЦ=2; ЧВН=");
	//год = Год(Форма.СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	//год = Формат(Год, "ЧГ=0;");
	//
	//РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "ПереченьТаблиц", "HZM_", 2, Мес, Истина,Истина);			
	//РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "ПереченьТаблиц", "HZY_", 4, Год, Ложь);			
	//РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Таблица1", "HZM_", 2, Мес, Истина,Истина);			
	//РегламентированнаяОтчетностьКлиентСервер.ПроставитьВКвадратыЗначения(Форма, "Таблица1", "HZY_", 4, Год, Ложь);			
	//
	//ЗаполнитьДатуПодписи(Форма);
	//
	//Форма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПоказательНаСервере(ИмяОбласти, Значение, Форма, ИмяРазделаПоказателя);

	ТекРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Если ТекРаздел = ИмяРазделаПоказателя Тогда
	
		Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение = Значение;
		
	Иначе	
		
		Форма["СтруктураДанных" + ИмяРазделаПоказателя].Вставить(ИмяОбласти, Значение);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПоказательНаСервере(ИмяОбласти, Форма, ИмяРазделаПоказателя)

	ТекРаздел = Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела;

	Если ТекРаздел = ИмяРазделаПоказателя Тогда
		
		Возврат Форма.ТабличныйДокумент.Области[ИмяОбласти].Значение;
		
	Иначе	
		
		Значение = Неопределено;
		Форма["СтруктураДанных" + ИмяРазделаПоказателя].Свойство(ИмяОбласти, Значение);
		
		Если Значение = Неопределено Тогда
			
			ДанныеПоказателя = Форма.мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента, КодПоказателяПоФорме", ИмяРазделаПоказателя, ИмяОбласти));
			Если ДанныеПоказателя.Количество() > 0
				И (    ДанныеПоказателя[0].ТипДанныхПоказателя = "Ч"
				   ИЛИ ДанныеПоказателя[0].ТипДанныхПоказателя = "Е") Тогда
				Значение = 0;	   
			Иначе
				Значение = "";	
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Значение;
		
	КонецЕсли;	

КонецФункции // ()

// СобратьДанныеТекущегоТаблПоляНаСервере()
//
&НаСервере
Функция СобратьДанныеТекущегоТаблПоляНаСервере(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);

КонецФункции // СобратьДанныеТекущегоТаблПоляНаСервере()

// СобратьДанныеТекущегоТаблПоляНаКлиенте()
//
&НаКлиенте
Функция СобратьДанныеТекущегоТаблПоляНаКлиенте(ИмяТабличногоПоля) Экспорт
	
	Возврат СобратьДанныеТекущегоТаблПоля(ЭтаФорма, ИмяТабличногоПоля);
	
КонецФункции // СобратьДанныеТекущегоТаблПоляНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Функция СобратьДанныеТекущегоТаблПоля(Форма, ТабличноеПоле) Экспорт

	СтруктураДанныхПоля = Новый Структура;
	Для Каждого ТекущаяОбласть Из Форма[ТабличноеПоле].Области Цикл
		Если ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекущаяОбласть.СодержитЗначение = Истина Тогда
			СтруктураДанныхПоля.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхПоля;

КонецФункции // СобратьДанныеТекущегоТаблПоля()

// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
&НаСервере
Процедура ОбновитьСтруктуруМногострочногоРазделаНаСервере(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаСервере()

// ОбновитьСтруктуруМногострочногоРазделаНаКлиенте()
//
&НаКлиенте
Процедура ОбновитьСтруктуруМногострочногоРазделаНаКлиенте(ИмяГруппы) Экспорт
	РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(ЭтаФорма, ИмяГруппы);
КонецПроцедуры // ОбновитьСтруктуруМногострочногоРазделаНаКлиенте()

// Восстанавливает сохраненные данные отчета.
//
&НаСервере
Процедура ВосстановитьСохраненныеДанные()
	Перем ДанныеМногострочныхРазделов;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеВариановАвтоЗаполнения;
	Перем ПоказателиОтчета;
	Перем Автозаполнение;
	Перем ТаблицаМногостраничногоДокумента;
	
	Если НЕ ЗначениеЗаполнено(СтруктураРеквизитовФормы.Организация) Тогда
		СтруктураРеквизитовФормы.Организация =	СтруктураРеквизитовФормы.мСохраненныйДок.Организация;
	КонецЕсли;
	
	СтруктураРеквизитовФормы.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения;
	Комментарий					                      = СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий;

	// восстанавливаем сохраненные данные отчета
	СписокСохранения = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	// список листов, выводимых на печать
	ДеревоНастройкиСтраниц = СтруктураРеквизитовФормы.мСохраненныйДок.ДеревоНастройкиСтраниц.Получить();
	ЗначениеВРеквизитФормы(ДеревоНастройкиСтраниц.Скопировать(), "мДеревоСтраницОтчета");
	
	// восстанавливаем сохраненные данные многострочных разделов
	Если СписокСохранения.Свойство( "ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
				
		Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл
			
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногострочныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, ЭтаФорма[НайденноеЗначение]);
				
			КонецЕсли;
						
		КонецЦикла;
						
	КонецЕсли;
    	
	// восстанавливаем сохраненные данные вариантов автозаполнения ячеек
	Если СписокСохранения.Свойство("ДанныеВариантовАвтоЗаполнения", ДанныеВариановАвтоЗаполнения) Тогда
		
		Если НЕ ДанныеВариановАвтоЗаполнения = Неопределено Тогда
			
			мСтруктураВариантыЗаполнения.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ДанныеВариановАвтоЗаполнения Цикл
				
				мСтруктураВариантыЗаполнения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Ключ);
				
				ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Очистить();
				
				Для Каждого ЭлементМассива Из ЭлементСтруктуры.Значение Цикл
										
					ТаблВарЗаполнения = ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ].Добавить().ТаблицаВариантовЗаполнения;
										
					ЗначениеВДанныеФормы(ЭлементМассива, ТаблВарЗаполнения);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

	// восстановим сохраненные данные редактируемых ячеек
	СписокСохранения.Свойство("ПоказателиОтчета", ПоказателиОтчета);
	
	СписокСохранения.Свойство("ОпцияКадровыйПереводДвумяСтроками", СтруктураРеквизитовФормы.ОпцияКадровыйПереводДвумяСтроками);
	СписокСохранения.Свойство("Подразделение",  		СтруктураРеквизитовФормы.Подразделение);
	СписокСохранения.Свойство("ОбособленноеПодразделение", СтруктураРеквизитовФормы.ОбособленноеПодразделение);
	СписокСохранения.Свойство("ВыплатыЗПНеРегулярны",  	СтруктураРеквизитовФормы.ВыплатыЗПНеРегулярны);
	СписокСохранения.Свойство("НеВключатьЧПников",  	СтруктураРеквизитовФормы.НеВключатьЧПников);
	СписокСохранения.Свойство("МесяцПриложения",  		СтруктураРеквизитовФормы.МесяцПриложения);
	СписокСохранения.Свойство("ЧислоВыплатыЗП",  		СтруктураРеквизитовФормы.ЧислоВыплатыЗП);
	СписокСохранения.Свойство("НазначениеПенсии",  		СтруктураРеквизитовФормы.НазначениеПенсии);
	СписокСохранения.Свойство("НазначениеСоцВыплат",  	СтруктураРеквизитовФормы.НазначениеСоцВыплат);
	СписокСохранения.Свойство("ОпцияПриемУвольнениеОтдельнымиСтроками",  	СтруктураРеквизитовФормы.ОпцияПриемУвольнениеОтдельнымиСтроками);
	
	ТекДанные = Неопределено;
	СписокСохранения.Свойство("Сотрудники", ТекДанные);
	Если НЕ ТекДанные = Неопределено Тогда
		СтруктураРеквизитовФормы.Сотрудники = ТекДанные.Получить();
	КонецЕсли;
	
	// восстанавливаем сохраненные данные многостраничных разделов
	Если СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
		
		Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл
					
			НайденноеЗначение = Неопределено;
			
			мСтруктураМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, НайденноеЗначение);
			
			Если НЕ НайденноеЗначение = Неопределено Тогда
				
				НайденноеЗначение = ЭтаФорма[НайденноеЗначение];
				
				ЗначениеВДанныеФормы(ЭлементСтруктуры.Значение, НайденноеЗначение);
									 				
				Если НайденноеЗначение[0].Свойство("Данные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.Данные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.Данные.Очистить();
							СтрокаТаблЗнач.Данные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].Данные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НайденноеЗначение[0].Свойство("ДополнительныеДанные") Тогда
					
					Для Каждого СтрокаТаблЗнач Из НайденноеЗначение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДополнительныеДанные) = Тип("СписокЗначений") Тогда
							
							СтрокаТаблЗнач.ДополнительныеДанные.Очистить();
							СтрокаТаблЗнач.ДополнительныеДанные.Добавить(ЭлементСтруктуры.Значение[НайденноеЗначение.Индекс(СтрокаТаблЗнач)].ДополнительныеДанные);
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
								
				Если НайденноеЗначение[0].Свойство("ДанныеДопСтрок") Тогда
					
					Ном = 0;
					
					Для Каждого СтрокаТаблЗнач Из ЭлементСтруктуры.Значение Цикл
						
						Если ТипЗнч(СтрокаТаблЗнач.ДанныеДопСтрок) = Тип("Структура") Тогда
							
							СтруктураДопСтрок = Новый Структура;
							
							Для Каждого ЭлСтруктуры Из СтрокаТаблЗнач.ДанныеДопСтрок Цикл
								
								ТаблЗнач = ЭлСтруктуры.Значение;
								
								СтрокаТаблЗначДанныеДопСтрок = ЭтаФорма["Хранилище" + ЭлСтруктуры.Ключ].Добавить().Таблица;
								
								ЗначениеВДанныеФормы(ТаблЗнач, СтрокаТаблЗначДанныеДопСтрок);
								
								СтруктураДопСтрок.Вставить(ЭлСтруктуры.Ключ, СтрокаТаблЗначДанныеДопСтрок);
                                								
							КонецЦикла;
							
							НайденноеЗначение[Ном].ДанныеДопСтрок.Добавить(СтруктураДопСтрок, "ДанныеФормыКоллекцияТаблицаДопСтрокРаздела");
							
						КонецЕсли;
						
						Ном = Ном + 1;
						
					КонецЦикла;
					
				КонецЕсли;
								   				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Раздел Из мСтруктураМногостраничныхРазделов Цикл
		Для Каждого Страница Из ЭтаФорма[Раздел.Значение] Цикл
			Страница.АктивнаяСтраница = Ложь;
		КонецЦикла;
	КонецЦикла;

	СписокСохранения.Свойство("Автозаполнение", Автозаполнение);
	СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет = Автозаполнение;

	СформироватьДеревоРазделовОтчетаНаСервере();
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл	
		
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы] = ПоказателиОтчета[Префикс + Раздел.ИмяСтраницы];
		КонецЕсли;
	
	КонецЦикла;
	ИмяТекРаздела = "Декларация";
	ВывестиМакетВТаблДокНаСервере(ИмяТекРаздела, 1);
	
	РегламентированнаяОтчетность.ОперацииПриВосстановленииРегламентированногоОтчета(ЭтаФорма);

	КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);

	Модифицированность   = Ложь;
	
КонецПроцедуры // ВосстановитьСохраненныеДанные()

// ВывестиРазделВТабличныйДокументНаКлиенте()
//
&НаКлиенте
Процедура ВывестиРазделВТабличныйДокументНаКлиенте(ИмяГруппы, СтруктураГруппы) Экспорт
	
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
	
КонецПроцедуры // ВывестиРазделВТабличныйДокументНаКлиенте()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//
&НаСервере
Процедура ВывестиРазделВТабличныйДокументНаСервере(ИмяГруппы, СтруктураГруппы) Экспорт
	ВывестиРазделВТабличныйДокумент(ЭтаФорма, ИмяГруппы, СтруктураГруппы);
КонецПроцедуры // ВывестиРазделВТабличныйДокументНаСервере()

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//  ПерерисоватьСтроки - Истина из процедуры удаления доп. строк, для перерисовки областей.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы, ИмяКолонкиНомера = Неопределено, НомерПервойСтроки = Неопределено)
	Перем ИсходноеКоличествоСтрокГруппы;
	
	#Если НаКлиенте Тогда
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаКлиенте(ИмяГруппы);
	#Иначе
		ТекущаяСтраница = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРазделаНаСервере(ИмяГруппы);
	#КонецЕсли
		
	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
	
	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();
		
	ТекТабличноеПолеИмя = "ТабличныйДокумент";
	
	ТекТабличноеПоле = Форма[ТекТабличноеПолеИмя];
		
	ПерерисоватьСтроки = (НЕ ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы);
		
	Раздел = Форма[ТекТабличноеПолеИмя];
	
	КолонкиГруппы = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[ИмяГруппы];		
	Если ИмяКолонкиНомера = Неопределено Тогда
		
		Для каждого Колонка Из КолонкиГруппы Цикл
			
			Если Найти(ВРЕГ(Колонка), "НОМЕРСТРОКИ") > 0 Тогда
				ИмяКолонкиНомера = Колонка;	
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	Если НомерПервойСтроки = Неопределено Тогда
		НомерПервойСтроки = 1;
	КонецЕсли;
	
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда
		
		// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
		НастройкиМнгЧ = РегламентированнаяОтчетностьКлиентСервер.ПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе");
		
		КолонкиМногострочныхРазделов = Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов;
		ИмяОбластиПечати			 = "";
		
		ДанныеОПечатиОтчета = Форма.мДеревоСтраницОтчета.ПолучитьЭлементы();
		Для Сч = 1 По ДанныеОПечатиОтчета.Количество() Цикл
			ДанныеОПечатиСтраницы = ДанныеОПечатиОтчета[Сч - 1];	
			Если ДанныеОПечатиСтраницы.ИмяСтраницы = ТекущаяСтраница Тогда
				ИмяОбластиПечати = ДанныеОПечатиСтраницы.ИмяОбластиТабличногоПоля;	
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		
		РегламентированнаяОтчетностьВызовСервера.ВывестиРазделВТабличныйДокументНаСервере(НастройкиМнгЧ, ИмяГруппы, Раздел, СтруктураГруппы, КолонкиМногострочныхРазделов, ИмяОбластиПечати);
		
		Форма[ТекТабличноеПолеИмя] = Раздел;
		ТекТабличноеПоле           = Форма[ТекТабличноеПолеИмя];
		
	КонецЕсли;
	
	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
		
		Для Каждого КолонкаТаблицыИмя Из КолонкиГруппы Цикл
			
			Если СтруктураГруппы[0].Свойство(КолонкаТаблицыИмя) Тогда
				
				ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
				ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;
				
				ОбластьЯчейкиТаблицы          = ТекТабличноеПоле.Области[ИмяЯчейки];
				
				Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
					ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
				Иначе
					ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;

	КонецЦикла;
	
	СтрокВГруппе 		= СтруктураГруппы.Количество();
	СтрокВТабличномПоле = Форма.мСтруктураИсхКолвоСтрокРазделов[ИмяГруппы];
	КоличествоСтрок = МАКС(СтрокВГруппе, СтрокВТабличномПоле);
	Если ИмяКолонкиНомера <> Неопределено Тогда
		
		Для НомерСтрокиВФормеТаблицы = 1 По КоличествоСтрок Цикл
			
			НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
			ИмяЯчейки                	= ИмяКолонкиНомера + "_" + НомерСтрокиВФормеТаблицыСтр;
			ОбластьЯчейкиТаблицы     	= ТекТабличноеПоле.Области[ИмяЯчейки];
	
			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				ОбластьЯчейкиТаблицы.Значение = НомерСтрокиВФормеТаблицы + НомерПервойСтроки - 1;
			Иначе
				ОбластьЯчейкиТаблицы.Текст = НомерСтрокиВФормеТаблицы + НомерПервойСтроки - 1;
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры // ВывестиРазделВТабличныйДокумент()

&НаКлиенте
Процедура СохранитьОтчет(Команда)
		
	СохранитьНаКлиенте();
		
КонецПроцедуры

// СохранитьНаКлиенте()
//
&НаКлиенте
Процедура СохранитьНаКлиенте(Автосохранение = Ложь, ВыполняемоеОповещение = Неопределено) Экспорт

	Если НЕ РегламентированнаяОтчетностьКлиент.ПриЗаписиРегламентированногоОтчетаНаКлиенте(ЭтаФорма, Автосохранение) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатСохранения = ПередСохранением(Автосохранение, Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);
	
	ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения);
				
КонецПроцедуры // СохранитьНаКлиенте()

&НаКлиенте
Процедура ПослеСохраненияНаКлиенте(ВыполняемоеОповещение, РезультатСохранения)
	
	КлючУникальности = СтруктураРеквизитовФормы.мСохраненныйДок;
	
	Если РезультатСохранения Тогда
		
		РегламентированнаяОтчетностьКлиент.ПослеЗаписиРегламентированногоОтчета(ЭтаФорма);
		
		Если ВыполняемоеОповещение <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ВыполняемоеОповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


// ПередСохранением()
//
&НаСервере
Функция ПередСохранением(Автосохранение, НаимТекРаздела)
	
	СтруктураРеквизитовФормы.мЗаписываетсяНовыйДокумент = (СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено ИЛИ СтруктураРеквизитовФормы.мСкопированаФорма <> Неопределено);
	
	Возврат Сохранить(Автосохранение, НаимТекРаздела);
		
КонецФункции // ПередСохранением()

// Формирует структуру данных отчета и помещает в реквизит типа ХранилищеЗначения
// документа РегламентированныйОтчет.
// 
// При первом сохранении данных отчета создает новый документ этого вида.
// Структура данных отчета состоит из элементов:
//   - значения редактируемых реквизитов отчета;
//   - данные по многострочным разделам отчета;
//   - данные по  многостраничным разделам отчета;
//   - данные по вариантам заполнения реквизитов,
//     участвующих в автозаполнении.
//
&НаСервере
Функция Сохранить(Автосохранение = Ложь, НаимТекРаздела) Экспорт	
	
	Если НЕ СтруктураРеквизитовФормы.мСохраненныйДок = Неопределено Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.ПолучитьОбъект();
	КонецЕсли;
			
	Если НЕ РегламентированнаяОтчетность.ПриЗаписиРегламентированногоОтчетаНаСервере(ЭтаФорма, Автосохранение, СтруктураРеквизитовФормы.мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецЕсли;
	
	// установим текущие значения реквизитов документа
	СтруктураРеквизитовФормы.мСохраненныйДок.ИсточникОтчета 			 = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].Имя;
	СтруктураРеквизитовФормы.мСохраненныйДок.НаименованиеОтчета 		 = Метаданные.Отчеты[Сред(Лев(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), Найти(СтрЗаменить(ЭтаФорма.ИмяФормы, "Внешний", ""), ".Форма.") - 1), 7)].ОсновнаяФорма.Синоним;
	
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаНачала               = СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.ДатаОкончания            = СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета;
	СтруктураРеквизитовФормы.мСохраненныйДок.Периодичность            = СтруктураРеквизитовФормы.мПериодичность;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВыбраннаяФорма           = СтруктураРеквизитовФормы.мВыбраннаяФорма;
	СтруктураРеквизитовФормы.мСохраненныйДок.Организация              = СтруктураРеквизитовФормы.Организация;
	СтруктураРеквизитовФормы.мСохраненныйДок.ЕдиницаИзмерения         = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ТочностьЕдиницыИзмерения = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	СтруктураРеквизитовФормы.мСохраненныйДок.ВидОтчетности            = Перечисления.ВидыОтчетности.РегламентированнаяОтчетность;
	СтруктураРеквизитовФормы.мСохраненныйДок.Комментарий              = Комментарий;

	СохранитьДанныеРаздела(НаимТекРаздела, Ложь, Ложь);
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	// формируем данные редактируемых ячеек таблицы
	ПоказателиОтчета = Новый Структура();
	
	ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета);
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();

	// вставляем данные редактируемых ячеек таблицы	
	СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);
	СписокСохранения.Вставить("ОпцияКадровыйПереводДвумяСтроками",	СтруктураРеквизитовФормы.ОпцияКадровыйПереводДвумяСтроками);
	СписокСохранения.Вставить("Подразделение",  		СтруктураРеквизитовФормы.Подразделение);
	СписокСохранения.Вставить("ОбособленноеПодразделение", СтруктураРеквизитовФормы.ОбособленноеПодразделение);
	СписокСохранения.Вставить("ВыплатыЗПНеРегулярны",  	СтруктураРеквизитовФормы.ВыплатыЗПНеРегулярны);
	СписокСохранения.Вставить("НеВключатьЧПников",  	СтруктураРеквизитовФормы.НеВключатьЧПников);
	СписокСохранения.Вставить("МесяцПриложения",  		СтруктураРеквизитовФормы.МесяцПриложения);
	СписокСохранения.Вставить("ЧислоВыплатыЗП",  		СтруктураРеквизитовФормы.ЧислоВыплатыЗП);
	СписокСохранения.Вставить("Сотрудники",  			Новый ХранилищеЗначения(СтруктураРеквизитовФормы.Сотрудники));
	СписокСохранения.Вставить("НазначениеПенсии",  		СтруктураРеквизитовФормы.НазначениеПенсии);
	СписокСохранения.Вставить("НазначениеСоцВыплат",  	СтруктураРеквизитовФормы.НазначениеСоцВыплат);
	СписокСохранения.Вставить("ОпцияПриемУвольнениеОтдельнымиСтроками",  	СтруктураРеквизитовФормы.ОпцияПриемУвольнениеОтдельнымиСтроками);

	ДанныеМногострочныхРазделов = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногострочныхРазделов Цикл
		
		ДанныеМногострочныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
	КонецЦикла;
	
	// вставляем данные многострочных разделов
	СписокСохранения.Вставить("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов);
	
	ДанныеМногостраничныхРазделов = Новый Структура;
	
	МассивТиповНеопределено = Новый Массив; 
	МассивТиповНеопределено.Добавить(Тип("Неопределено"));
	ОписаниеТиповНеопределено = Новый ОписаниеТипов(МассивТиповНеопределено);
	
	Для Каждого ЭлементСтруктуры Из мСтруктураМногостраничныхРазделов Цикл
		
		ДанныеМногостраничныхРазделов.Вставить(ЭлементСтруктуры.Ключ, ДанныеФормыВЗначение(ЭтаФорма[ЭлементСтруктуры.Значение], Тип("ТаблицаЗначений")));
		
		ТаблЗнач = Неопределено;
		
		Если ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблЗнач) Тогда
						
			Если НЕ ТаблЗнач.Колонки.Найти("Данные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("Данные");
				ТаблЗнач.Колонки.Добавить("Данные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.Данные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].Данные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НЕ ТаблЗнач.Колонки.Найти("ДополнительныеДанные") = Неопределено Тогда
												
				ТаблЗнач.Колонки.Удалить("ДополнительныеДанные");
				ТаблЗнач.Колонки.Добавить("ДополнительныеДанные", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
					
					СтрокаТаблЗнач.ДополнительныеДанные = ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДополнительныеДанные[0].Значение;
					
					Ном = Ном + 1;
					
				КонецЦикла;
				
			КонецЕсли;
						
			Если НЕ ТаблЗнач.Колонки.Найти("ДанныеДопСтрок") = Неопределено Тогда
															
				ТаблЗнач.Колонки.Удалить("ДанныеДопСтрок");
				ТаблЗнач.Колонки.Добавить("ДанныеДопСтрок", ОписаниеТиповНеопределено);
				
				Ном = 0;
				
				Для Каждого СтрокаТаблЗнач Из ТаблЗнач Цикл
						
					СтруктураДанныхДопСтрок = Новый Структура;
					
					Для Каждого ЭлСтруктуры Из ЭтаФорма[ЭлементСтруктуры.Значение][Ном].ДанныеДопСтрок[0].Значение Цикл
														
						СтруктураДанныхДопСтрок.Вставить(ЭлСтруктуры.Ключ, ДанныеФормыВЗначение(ЭлСтруктуры.Значение, Тип("ТаблицаЗначений")));	
							
					КонецЦикла;
					
					СтрокаТаблЗнач.ДанныеДопСтрок = СтруктураДанныхДопСтрок;
					
					Ном = Ном + 1;
			
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЦикла;

		
	// вставляем данные многостраничных разделов
	СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);
	
	ДанныеВариантовАвтоЗаполнения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из мСтруктураВариантыЗаполнения Цикл
		
		МассивТаблЗнач = Новый Массив;
		
		ДанныеВариантовАвтоЗаполнения.Вставить(ЭлементСтруктуры.Ключ, МассивТаблЗнач);
			
		Для Каждого ЭлементМассива Из ЭтаФорма["ТаблицаВариантыЗаполнения" + ЭлементСтруктуры.Ключ] Цикл
			
			МассивТаблЗнач.Добавить(ДанныеФормыВЗначение(ЭлементМассива.ТаблицаВариантовЗаполнения, Тип("ТаблицаЗначений")));
			
		КонецЦикла;
			
	КонецЦикла;
	
	// вставляем данные вариантов автозаполнения ячеек
	СписокСохранения.Вставить("ДанныеВариантовАвтоЗаполнения", ДанныеВариантовАвтоЗаполнения);
	
	// вставляем версию формы
	СписокСохранения.Вставить("ВерсияФормы", СтруктураРеквизитовФормы.мВерсияФормы);
	
	// вставляем флажок ручной ввод ВРЕМЕННАЯ ОТМЕНА
	СписокСохранения.Вставить("Автозаполнение", СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	Если СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда
		СписокСохранения.Вставить("СозданКакХранилищеПараметровДляЗвит1С", Истина);
	КонецЕсли;
	
	ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
	СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета = ХранилищеДанных;

	// записываем документ, хранящий данные отчета	
	Попытка
		СтруктураРеквизитовФормы.мСохраненныйДок.Записать();
	Исключение
		Если НЕ Автосохранение Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1';uk='%1'"), РегламентированнаяОтчетностьКлиентСервер.СформироватьТекстСообщения(ОписаниеОшибки()));

			Сообщение.Сообщить();
			
		КонецЕсли;
		СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
		Возврат Ложь;
	КонецПопытки;
			
	Модифицированность   = Ложь;
	
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	СтруктураРеквизитовФормы.мСохраненныйДок = СтруктураРеквизитовФормы.мСохраненныйДок.Ссылка;
	
	Возврат Истина;

КонецФункции // Сохранить()

&НаСервере
Функция ПреобразоватьМассивВТаблицу(ИмяКолонки, Массив)
	
	Таблица =  Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить(ИмяКолонки);
	Для Сч = 1 По Массив.Количество() Цикл
		Таблица.Добавить();
	КонецЦикла;
	Если ЗначениеЗаполнено(Массив)
		И Массив.Количество() > 0 Тогда
	
		Таблица.ЗагрузитьКолонку(Массив, ИмяКолонки);
	
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиОтчетаНаСервере(ПоказателиОтчета)
	
	Префикс = "ПолеТабличногоДокумента";
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
			
		Если НЕ Раздел.МногостраничностьВРазделе Тогда
			ПоказателиОтчета.Вставить(Префикс + Раздел.ИмяСтраницы, ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы]);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПоказателиОтчетаНаСервере()

&НаСервере
Процедура ЗаполнитьПустыеСтруктурыДанных()
	
	СохрТабличныйДокумент = Новый ТабличныйДокумент;
	
	СохрТабличныйДокумент.Вывести(ТабличныйДокумент);
	
	Для Каждого Раздел Из мСвойстваРазделовДекларации.ПолучитьЭлементы() Цикл
		
		Если НЕ Раздел.МногостраничностьВРазделе
		  И (ЭтаФорма["СтруктураДанных" + Раздел.ИмяСтраницы].Количество() = 0) Тогда
		  
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			СохранитьДанныеРаздела(Раздел.ИмяСтраницы, Ложь);
			
		ИначеЕсли Раздел.МногостраничностьВРазделе
			    И (ЭтаФорма[мСтруктураМногостраничныхРазделов[Раздел.ИмяСтраницы]][0].Данные.Количество() = 0) Тогда
				
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ОбъектОтчета(ЭтаФорма.ИмяФормы).ПолучитьМакет(Сред(ЭтаФорма.ИмяФормы, Найти(ЭтаФорма.ИмяФормы, "ФормаОтчета")) + "_" + Раздел.ИмяСтраницы));
			
			ЗаполнитьПоказателиЗначениямиПоУмолчанию(Раздел.ИмяСтраницы);
			
		КонецЕсли;
		
	
	КонецЦикла;
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(СохрТабличныйДокумент);
	
КонецПроцедуры // ЗаполнитьПустыеСтруктурыДанных()

&НаСервере
Процедура СохранитьДеревоНастройкиСтраниц(Знач мСохраненныйДок)
	
	Если мСохраненныйДок <> Неопределено Тогда
				
		Если ТипЗнч(мСохраненныйДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			мСохраненныйДок = мСохраненныйДок.ПолучитьОбъект();
		КонецЕсли;
		
		Если Не мСохраненныйДок.ЭтоНовый() Тогда
			// Сохраняем выбранные листы для печати в хранилище
			ХранилищеДанных = Новый ХранилищеЗначения(РеквизитФормыВЗначение("мДеревоСтраницОтчета"));
			мСохраненныйДок.ДеревоНастройкиСтраниц = ХранилищеДанных;
			Попытка
				мСохраненныйДок.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры // СохранитьДеревоНастройкиСтраниц()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы <> Неопределено Тогда 
		
		Если ЗавершениеРаботы И Модифицированность Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиент.ПередЗакрытиемРегламентированногоОтчета(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	Если ЗавершениеРаботы <> Неопределено Тогда
		
		Если ЗавершениеРаботы Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПриЗакрытииНаСервере();
		
КонецПроцедуры // ПриЗакрытии()

// ПриЗакрытииНаСервере()
//
&НаСервере
Процедура ПриЗакрытииНаСервере()
			
	СохранитьДеревоНастройкиСтраниц(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	РегламентированнаяОтчетность.ПриЗакрытииРегламентированногоОтчета(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытииНаСервере()

// ПоказатьСтраницуМногостраничногоРазделаНаКлиенте()
//
&НаКлиенте
Процедура ПоказатьСтраницуМногостраничногоРазделаНаКлиенте(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	
	ПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРазделаНаКлиенте()

// ПоказатьСтраницуМногостраничногоРазделаНаСервере()
//
&НаСервере
Процедура ПоказатьСтраницуМногостраничногоРазделаНаСервере(Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	
	ПоказатьСтраницуМногостраничногоРаздела(ЭтаФорма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
		
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРазделаНаСервере()

// ПоказатьСтраницуМногостраничногоРаздела()
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьСтраницуМногостраничногоРаздела(Форма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь)
	
	РегламентированнаяОтчетностьКлиентСервер.ПоказатьСтраницуМногостраничногоРаздела(Форма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу);
	
КонецПроцедуры // ПоказатьСтраницуМногостраничногоРаздела()

&НаКлиенте
Процедура ИзменитьЦветЯчеекНаКлиенте() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры // ИзменитьЦветЯчеекНаКлиенте()

&НаСервере
Процедура ИзменитьЦветЯчеекНаСервере() Экспорт
	
	ИзменитьЦветЯчеек(ЭтаФорма);
	
КонецПроцедуры // ИзменитьЦветЯчеекНаСервере()

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьЦветЯчеек(Форма)

		
КонецПроцедуры // ИзменитьЦветЯчеек()


// ОбновитьПеременныеМодуляНаСервере()
//
&НаСервере
Функция ОбновитьПеременныеМодуляНаСервере(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции // ОбновитьПеременныеМодуляНаСервере()

// ОбновитьПеременныеМодуляНаКлиенте()
//
&НаКлиенте
Функция ОбновитьПеременныеМодуляНаКлиенте(ИмяПоказателя, ЗначениеПоказателя) Экспорт
	
	Возврат ОбновитьПеременныеМодуля(ЭтаФорма, ИмяПоказателя, ЗначениеПоказателя);
	
КонецФункции // ОбновитьПеременныеМодуляНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
Функция ОбновитьПеременныеМодуля(Форма, ИмяПоказателя, ЗначениеПоказателя)
	
	ИзмененияПроизошли = Ложь;
	
	Если Лев(ИмяПоказателя, 1) = "_" Тогда
		ИзмененияПроизошли = Истина;
		Возврат ИзмененияПроизошли;
	КонецЕсли;
	
	Возврат ИзмененияПроизошли;
	
КонецФункции // ОбновитьПеременныеМодуля()

// ОчиститьТабличноеПолеНаКлиенте()
//
&НаКлиенте
Процедура ОчиститьТабличноеПолеНаКлиенте(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры // ОчиститьТабличноеПолеНаКлиенте()

// ОчиститьТабличноеПолеНаСервере()
//
&НаСервере
Процедура ОчиститьТабличноеПолеНаСервере(ВыбТабличноеПолеИмя) Экспорт

	ОчиститьТабличноеПоле(ЭтаФорма, ВыбТабличноеПолеИмя);

КонецПроцедуры // ОчиститьТабличноеПолеНаСервере()

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя)

	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	//для очистки защищенных областей итоговых ячеек
	//получим список итоговых ячеек, снимая с них защиту), а после очищения вернем защиту
	СписокИтоговыхЯчеек = Новый СписокЗначений;
	
	Для каждого Область Из ВыбТабличноеПоле.Области Цикл
		Если Область.ЦветФона = Форма.СтруктураРеквизитовФормы.ЦветЗаполняетсяАвтоАрифметика И Область.Защита Тогда
			Область.Защита = Ложь;
			СписокИтоговыхЯчеек.Добавить(Область.Имя);
		КонецЕсли;
	КонецЦикла;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле(Форма, ВыбТабличноеПолеИмя);
	
	ВыбТабличноеПоле = Форма.ТабличныйДокумент;
	
	// Непосредственно очищаем ячейки табличного документа. РегламентированнаяОтчетностьКлиентСервер.ОчиститьТабличноеПоле делает то же самое
	// Повторно, так как в результате расчета многостраничного многострочного блока заполняются итоговые ячейки, 
	// в арифметике которых есть показатели не из многострочного блока
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;
	
	Для каждого КодИтоговогоПоказателя Из СписокИтоговыхЯчеек Цикл
		ОбластьПоказателя=ВыбТабличноеПоле.Области.Найти(КодИтоговогоПоказателя.Значение);
		Если ОбластьПоказателя <> Неопределено Тогда
			ОбластьПоказателя.Защита = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ОчиститьТабличноеПоле()

// РасчетНаКлиенте()
//
&НаКлиенте
Процедура РасчетНаКлиенте(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры // РасчетНаКлиенте()

// РасчетНаСервере()
//
&НаСервере
Процедура РасчетНаСервере(ИмяСтраницыПанели = "", ОбластьИмя = "") Экспорт

	Расчет(ЭтаФорма, ИмяСтраницыПанели, ОбластьИмя);

КонецПроцедуры // РасчетНаСервере()

// РАСЧЕТ()
// Выполняет расчет вычисляемых показателей на заданной странице отчета
// (ячеек, выделенных зеленым цветом). 
// В случае неуказания листа, ничего происходить не будет
// Параметры:
//  ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//
&НаКлиентеНаСервереБезКонтекста
Процедура Расчет(Форма, ИмяСтраницыПанели = "", ОбластьИмя = "")
	Перем ТаблицаБлока;
	
	Если (Форма.СтруктураРеквизитовФормы.мРежимПечати) Тогда
		Возврат; // служебный вызов в процессе печати
	КонецЕсли;
	
	Если (Форма.СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет) Тогда
		Возврат; // отключен режим авторасчета
	КонецЕсли;

	// обновим данные многострочных групп
	Если Форма.СтруктураРеквизитовФормы.НаимТекущегоРаздела = ИмяСтраницыПанели Тогда

		ИдГрупп = Новый Структура;
		ИдГрупп.Вставить("мИдГруппы11", Форма.СтруктураРеквизитовФормы.мИдГруппы11);
		ИдГрупп.Вставить("мИдГруппы12", Форма.СтруктураРеквизитовФормы.мИдГруппы12);
		ИдГрупп.Вставить("мИдГруппы13", Форма.СтруктураРеквизитовФормы.мИдГруппы13);
		ИдГрупп.Вставить("мИдГруппы41", Форма.СтруктураРеквизитовФормы.мИдГруппы41);
		ИдГрупп.Вставить("мИдГруппы42", Форма.СтруктураРеквизитовФормы.мИдГруппы42);
		ИдГрупп.Вставить("мИдГруппы43", Форма.СтруктураРеквизитовФормы.мИдГруппы43);
		ИдГрупп.Вставить("мИдГруппы5", Форма.СтруктураРеквизитовФормы.мИдГруппы5);
		ИдГрупп.Вставить("мИдГруппы61", Форма.СтруктураРеквизитовФормы.мИдГруппы61);
		ИдГрупп.Вставить("мИдГруппы62", Форма.СтруктураРеквизитовФормы.мИдГруппы62);
		ИдГрупп.Вставить("мИдГруппы63", Форма.СтруктураРеквизитовФормы.мИдГруппы63);
		
		ИмяГруппыМассив =  ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяСтраницыПанели, , ИдГрупп);
		Для каждого ИмяГруппы Из ИмяГруппыМассив Цикл
			РегламентированнаяОтчетностьКлиентСервер.ОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
		КонецЦикла;
		
	КонецЕсли;
	
	R0101G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01011G3", Форма, "Декларация"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01012G3", Форма, "Декларация"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01013G3", Форма, "Декларация"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01014G3", Форма, "Декларация"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01015G3", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0101G3", R0101G3, Форма, "Декларация");	
	
	R0101G4 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01011G4", Форма, "Декларация"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01012G4", Форма, "Декларация"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01013G4", Форма, "Декларация"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01014G4", Форма, "Декларация"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01015G4", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0101G4", R0101G4, Форма, "Декларация");	
	
	R0101G5 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01011G5", Форма, "Декларация"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01012G5", Форма, "Декларация"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01013G5", Форма, "Декларация"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01014G5", Форма, "Декларация"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01015G5", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0101G5", R0101G5, Форма, "Декларация");	
	
	R0102G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01021G3", Форма, "Декларация")) 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01022G3", Форма, "Декларация"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01023G3", Форма, "Декларация"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01024G3", Форма, "Декларация"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01025G3", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0102G3", R0102G3, Форма, "Декларация");	
								  
	R0102G4 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01021G4", Форма, "Декларация")) 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01022G4", Форма, "Декларация"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01023G4", Форма, "Декларация"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01024G4", Форма, "Декларация"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01025G4", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0102G4", R0102G4, Форма, "Декларация");	
								  
	R0102G5 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01021G5", Форма, "Декларация")) 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01022G5", Форма, "Декларация"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01023G5", Форма, "Декларация"))	 
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01024G5", Форма, "Декларация"))
								  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01025G5", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0102G5", R0102G5, Форма, "Декларация");	
								  
	R0103G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01031G3", Форма, "Декларация")) 
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01032G3", Форма, "Декларация"))
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01033G3", Форма, "Декларация"))
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01034G3", Форма, "Декларация"))
									+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01035G3", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0103G3", R0103G3, Форма, "Декларация");	
	
	R0103G4 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01031G4", Форма, "Декларация")) 
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01032G4", Форма, "Декларация"))
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01033G4", Форма, "Декларация"))
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01034G4", Форма, "Декларация"))
									+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01035G4", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0103G4", R0103G4, Форма, "Декларация");	
	
	R0103G5 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01031G5", Форма, "Декларация")) 
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01032G5", Форма, "Декларация"))
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01033G5", Форма, "Декларация"))
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01034G5", Форма, "Декларация"))
									+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01035G5", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0103G5", R0103G5, Форма, "Декларация");	
	
	R0104G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01041G3", Форма, "Декларация")) 
								      + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01042G3", Форма, "Декларация"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01043G3", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0104G3", R0104G3, Форма, "Декларация");	
									  
	R0104G4 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01041G4", Форма, "Декларация")) 
								      + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01042G4", Форма, "Декларация"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01043G4", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0104G4", R0104G4, Форма, "Декларация");	
									  
	R0104G5 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01041G5", Форма, "Декларация")) 
								      + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01042G5", Форма, "Декларация"))
									  + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R01043G5", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0104G5", R0104G5, Форма, "Декларация");	
									  
	R0107G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0103G3", Форма, "Декларация")) 
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0104G3", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0107G3", R0107G3, Форма, "Декларация");	
									
	R0107G4 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0103G4", Форма, "Декларация")) 
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0104G4", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0107G4", R0107G4, Форма, "Декларация");	
									
	R0107G5 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0103G5", Форма, "Декларация")) 
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0104G5", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0107G5", R0107G5, Форма, "Декларация");	
									
	R0108G3 = ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0107G3", Форма, "Декларация")) 
								    + ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0107G4", Форма, "Декларация"))
									+ ОкруглитьЧислоПоФормату(Форма, ПолучитьПоказательНаСервере("R0107G5", Форма, "Декларация"));
	ЗаполнитьПоказательНаСервере("R0108G3", R0108G3, Форма, "Декларация");	
									
	СтруктураГруппы11 = Форма[Форма.СтруктураРеквизитовФормы.мИдГруппы11];
	СтруктураГруппы12 = Форма[Форма.СтруктураРеквизитовФормы.мИдГруппы12];
	СтруктураГруппы13 = Форма[Форма.СтруктураРеквизитовФормы.мИдГруппы13];
	СтруктураГруппы41 = Форма[Форма.СтруктураРеквизитовФормы.мИдГруппы41];
	СтруктураГруппы42 = Форма[Форма.СтруктураРеквизитовФормы.мИдГруппы42];
	СтруктураГруппы43 = Форма[Форма.СтруктураРеквизитовФормы.мИдГруппы43];
	СтруктураГруппы5 = Форма[Форма.СтруктураРеквизитовФормы.мИдГруппы5];
	СтруктураГруппы61 = Форма[Форма.СтруктураРеквизитовФормы.мИдГруппы61];
	СтруктураГруппы62 = Форма[Форма.СтруктураРеквизитовФормы.мИдГруппы62];
	СтруктураГруппы63 = Форма[Форма.СтруктураРеквизитовФормы.мИдГруппы63];
	
	R061G3 = ?(ТаблицаМногострочнойЧастиПуста(СтруктураГруппы11, Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы11]), 0, 1)
			+ ?(ТаблицаМногострочнойЧастиПуста(СтруктураГруппы12, Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы12]), 0, 1)
			+ ?(ТаблицаМногострочнойЧастиПуста(СтруктураГруппы13, Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы13]), 0, 1);
			
	R064G3 = ?(ТаблицаМногострочнойЧастиПуста(СтруктураГруппы41, Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы41]), 0, 1)
			+ ?(ТаблицаМногострочнойЧастиПуста(СтруктураГруппы42, Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы42]), 0, 1)
			+ ?(ТаблицаМногострочнойЧастиПуста(СтруктураГруппы43, Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы43]), 0, 1);
			
	R065G3 = ?(ТаблицаМногострочнойЧастиПуста(СтруктураГруппы5, Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы5]), 0, 1);
	
	R066G3 = ?(ТаблицаМногострочнойЧастиПуста(СтруктураГруппы61, Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы61]), 0, 1)
			+ ?(ТаблицаМногострочнойЧастиПуста(СтруктураГруппы62, Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы62]), 0, 1)
			+ ?(ТаблицаМногострочнойЧастиПуста(СтруктураГруппы63, Форма.СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов[Форма.СтруктураРеквизитовФормы.мИдГруппы63]), 0, 1);
	ЗаполнитьПоказательНаСервере("R061G3", R061G3, Форма, "Декларация");	
	ЗаполнитьПоказательНаСервере("R064G3", R064G3, Форма, "Декларация");	                                                                                              
	ЗаполнитьПоказательНаСервере("R065G3", R065G3, Форма, "Декларация");	
	ЗаполнитьПоказательНаСервере("R066G3", R066G3, Форма, "Декларация");	
	
	ЗаполнитьПоказательНаСервере("R01G16", СтруктураГруппы11.Итог("П1T1RXXXXG16"), Форма, "Таблица11");	
	ЗаполнитьПоказательНаСервере("R01G17", СтруктураГруппы11.Итог("П1T1RXXXXG17"), Форма, "Таблица11");	
	ЗаполнитьПоказательНаСервере("R01G18", СтруктураГруппы11.Итог("П1T1RXXXXG18"), Форма, "Таблица11");	
	ЗаполнитьПоказательНаСервере("R01G19", СтруктураГруппы11.Итог("П1T1RXXXXG19"), Форма, "Таблица11");	
	ЗаполнитьПоказательНаСервере("R01G20", СтруктураГруппы11.Итог("П1T1RXXXXG20"), Форма, "Таблица11");	
	
	ЗаполнитьПоказательНаСервере("R01G16", СтруктураГруппы12.Итог("П2T1RXXXXG16"), Форма, "Таблица12");	
	ЗаполнитьПоказательНаСервере("R01G17", СтруктураГруппы12.Итог("П2T1RXXXXG17"), Форма, "Таблица12");	
	ЗаполнитьПоказательНаСервере("R01G18", СтруктураГруппы12.Итог("П2T1RXXXXG18"), Форма, "Таблица12");	
	ЗаполнитьПоказательНаСервере("R01G19", СтруктураГруппы12.Итог("П2T1RXXXXG19"), Форма, "Таблица12");	
	ЗаполнитьПоказательНаСервере("R01G20", СтруктураГруппы12.Итог("П2T1RXXXXG20"), Форма, "Таблица12");	
	
	ЗаполнитьПоказательНаСервере("R01G16", СтруктураГруппы13.Итог("П3T1RXXXXG16"), Форма, "Таблица13");	
	ЗаполнитьПоказательНаСервере("R01G17", СтруктураГруппы13.Итог("П3T1RXXXXG17"), Форма, "Таблица13");	
	ЗаполнитьПоказательНаСервере("R01G18", СтруктураГруппы13.Итог("П3T1RXXXXG18"), Форма, "Таблица13");	
	ЗаполнитьПоказательНаСервере("R01G19", СтруктураГруппы13.Итог("П3T1RXXXXG19"), Форма, "Таблица13");	
	ЗаполнитьПоказательНаСервере("R01G20", СтруктураГруппы13.Итог("П3T1RXXXXG20"), Форма, "Таблица13");	
	
	ЗаполнитьПоказательНаСервере("R01G03A", СтруктураГруппы41.Итог("T41T1RXXXXG03A"), Форма, "Таблица41");
	ЗаполнитьПоказательНаСервере("R01G03",  СтруктураГруппы41.Итог("T41T1RXXXXG03"),  Форма, "Таблица41");
	ЗаполнитьПоказательНаСервере("R01G04A", СтруктураГруппы41.Итог("T41T1RXXXXG04A"), Форма, "Таблица41");
	ЗаполнитьПоказательНаСервере("R01G04",  СтруктураГруппы41.Итог("T41T1RXXXXG04"),  Форма, "Таблица41");
	ЗаполнитьПоказательНаСервере("R01G5A",  СтруктураГруппы41.Итог("T41T1RXXXXG5A"),  Форма, "Таблица41");
	ЗаполнитьПоказательНаСервере("R01G5",   СтруктураГруппы41.Итог("T41T1RXXXXG5"),   Форма, "Таблица41");
	
	ЗаполнитьПоказательНаСервере("R02G01I", СтруктураГруппы41.Количество(), Форма, "Таблица41");
	
	ЗаполнитьПоказательНаСервере("R01G03A", СтруктураГруппы42.Итог("T42T1RXXXXG03A"), Форма, "Таблица42");
	ЗаполнитьПоказательНаСервере("R01G03",  СтруктураГруппы42.Итог("T42T1RXXXXG03"),  Форма, "Таблица42");
	ЗаполнитьПоказательНаСервере("R01G04A", СтруктураГруппы42.Итог("T42T1RXXXXG04A"), Форма, "Таблица42");
	ЗаполнитьПоказательНаСервере("R01G04",  СтруктураГруппы42.Итог("T42T1RXXXXG04"),  Форма, "Таблица42");
	ЗаполнитьПоказательНаСервере("R01G5A",  СтруктураГруппы42.Итог("T42T1RXXXXG5A"),  Форма, "Таблица42");
	ЗаполнитьПоказательНаСервере("R01G5",   СтруктураГруппы42.Итог("T42T1RXXXXG5"),   Форма, "Таблица42");
	
	ЗаполнитьПоказательНаСервере("R02G01I", СтруктураГруппы42.Количество(), Форма, "Таблица42");
	
	ЗаполнитьПоказательНаСервере("R01G03A", СтруктураГруппы43.Итог("T43T1RXXXXG03A"), Форма, "Таблица43");
	ЗаполнитьПоказательНаСервере("R01G03",  СтруктураГруппы43.Итог("T43T1RXXXXG03"),  Форма, "Таблица43");
	ЗаполнитьПоказательНаСервере("R01G04A", СтруктураГруппы43.Итог("T43T1RXXXXG04A"), Форма, "Таблица43");
	ЗаполнитьПоказательНаСервере("R01G04",  СтруктураГруппы43.Итог("T43T1RXXXXG04"),  Форма, "Таблица43");
	ЗаполнитьПоказательНаСервере("R01G5A",  СтруктураГруппы43.Итог("T43T1RXXXXG5A"),  Форма, "Таблица43");
	ЗаполнитьПоказательНаСервере("R01G5",   СтруктураГруппы43.Итог("T43T1RXXXXG5"),   Форма, "Таблица43");
	
	ЗаполнитьПоказательНаСервере("R02G01I", СтруктураГруппы43.Количество(), Форма, "Таблица43");
	
КонецПроцедуры // Расчет()

&НаКлиентеНаСервереБезКонтекста
Функция ТаблицаМногострочнойЧастиПуста(СтруктураГруппы, СтруктураКолонок)

	Если СтруктураГруппы.Количество() > 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаГруппы из СтруктураГруппы Цикл
		
		Для каждого Колонка Из СтруктураКолонок Цикл
			
			Если Найти(Колонка, "НомерСтроки") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаГруппы[Колонка]) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;		
	
	КонецЦикла;

	Возврат Истина;

КонецФункции

// ОкруглитьЧислоПоФормату(Форма, )
//
&НаКлиентеНаСервереБезКонтекста
Функция ОкруглитьЧислоПоФормату(Форма, ИсходноеЧисло)
	
	Перем Делитель;
	
	Если Форма.СоответствиеЕдиницыИзмеренияДелителю.Свойство("Окр" + СтрЗаменить(Форма.СтруктураРеквизитовФормы.ЕдиницаИзмерения, " ", ""), Делитель) Тогда
		
		Возврат Окр(ИсходноеЧисло / Делитель, Форма.СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения) * Делитель;
		
	КонецЕсли;
	
КонецФункции // ОкруглитьЧислоПоФормату(Форма, )

&НаКлиенте
Процедура ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка)
	
	Если РегламентированнаяОтчетностьКлиент.ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(ЭтаФорма, Область, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЯчейки 			 = Область.Имя;
	НаименованиеТекЛиста = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
КонецПроцедуры // ОбработкаВыбораВПолеТабличногоДокумента()

&НаКлиенте		
Процедура ВводПоказателяВПолеТабличногоДокументЗавершение(Значение, ДополнительныеПараметры) Экспорт
			
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументВыбор(Элемент, Область, СтандартнаяОбработка)
	
	ОбработкаВыбораВПолеТабличногоДокумента(Элемент, Область, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента(Элемент, Область)
	
	Модифицированность = Истина;
		
	
	ИмяОбласти = Область.Имя;
	ИмяРаздела = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
	
	РасчетНаКлиенте(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
КонецПроцедуры // ОбработкаИзмененияСодержимогоВПолеТабличногоДокумента()

&НаСервере
Процедура ПослеСменыЕдИзмеренияИТочности()

	ЗаполнитьПустыеСтруктурыДанных();
	
	ПроверитьТочность();
	
	УстановитьФорматВыводаВПоляхВводаНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
		
КонецПроцедуры // ПослеСменыЕдИзмеренияИТочности()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
&НаСервере
Процедура ПроверитьТочность()
	
	Если СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 2 Тогда
									
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в гривнах точность не может превышать 2 знака';uk='%1: при виведенні сум у гривнях точність не може перевищувати 2 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 2;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 3 Тогда
			
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в тысячах гривен точность не может превышать 3 знака';uk='%1: при виведенні сум в тисячах гривень точність не може перевищувати 3 знака'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 3;
			
		КонецЕсли;

	ИначеЕсли СтруктураРеквизитовФормы.ЕдиницаИзмерения = ПорядкиОкругленияОтчетности.ПеречислениеПорядкиОкругленияОтчетностиОкр1000000 Тогда

		Если СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения > 6 Тогда
						
			Сообщение = Новый СообщениеПользователю;

			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: при выводе сумм в миллионах гривен точность не может превышать 6 знаков';uk='%1: при виведенні сум у мільйонах гривень точність не може перевищувати 6 знаків'"), ЭтаФорма.Заголовок);

			Сообщение.Сообщить();
			
			СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения = 6;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
		
КонецПроцедуры // Обновить()

// Открывает форму документа ФормаНастройкиОтчета с целью выбора 
// выводимых на печать листов отчета.
//
// Параметры:
//   ВариантВыбора - строка, назначение выбора страниц.
//
&НаКлиенте
Процедура ОткрытьФормуВыбораСтраниц(ВариантВыбора)
    Перем ТекущийРазделОтчетаСокрНаим;
	Перем НомерСтраницыРазделаОтчета;
	
	// Запоминаем текущий раздел, установленный в дереве разделов отчета.
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		ТекущийРазделОтчетаСокрНаим = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим;
		НомерСтраницыРазделаОтчета  = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	КонецЕсли;
	
	мПараметры = Новый Структура;
	мПараметры.Вставить("Автосохранение", Ложь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФлажокОтклАвтоРасчет",		СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	ПараметрыФормы.Вставить("ЕдиницаИзмерения", 		СтруктураРеквизитовФормы.ЕдиницаИзмерения);
	ПараметрыФормы.Вставить("ТочностьЕдиницыИзмерения", СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения);
	ПараметрыФормы.Вставить("мПараметры", мПараметры);
					
	ФормаНастройкиОтчета = РегламентированнаяОтчетностьКлиент.ПолучитьОбщуюФормуПоИмени("НастройкиОтчета", ПараметрыФормы, ЭтаФорма);
    
	мДеревоВыбранныхСтраниц.ПолучитьЭлементы().Очистить();
    
	КопироватьДанныеФормы(мДеревоСтраницОтчета, ФормаНастройкиОтчета.Дерево);
	
	ЗначениеАвторасчета = СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет;
	ЗначениеЕдИзм       = СтруктураРеквизитовФормы.ЕдиницаИзмерения;
	ЗначениеЗпт         = СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим", ЗначениеАвторасчета, ЗначениеЕдИзм, ЗначениеЗпт, НомерСтраницыРазделаОтчета, ТекущийРазделОтчетаСокрНаим);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораСтраницЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСтраницЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ЗначениеАвторасчета = ДополнительныеПараметры.ЗначениеАвторасчета;
	ЗначениеЕдИзм = ДополнительныеПараметры.ЗначениеЕдИзм;
	ЗначениеЗпт = ДополнительныеПараметры.ЗначениеЗпт;
	НомерСтраницыРазделаОтчета = ДополнительныеПараметры.НомерСтраницыРазделаОтчета;
	ТекущийРазделОтчетаСокрНаим = ДополнительныеПараметры.ТекущийРазделОтчетаСокрНаим;
	
	Если РезультатВыбора <> Неопределено Тогда
		КопироватьДанныеФормы(РезультатВыбора, мДеревоВыбранныхСтраниц);
		РегламентированнаяОтчетностьКлиентСервер.ПрорисоватьПодменюПечать(ЭтаФорма);
		Модифицированность = Истина;
					
		флЗначенияИдентичны = Истина;
		
		Для Индекс = 0 По мДеревоСтраницОтчета.ПолучитьЭлементы().Количество() - 1 Цикл
			
			Если НЕ мДеревоСтраницОтчета.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу = РезультатВыбора.ПолучитьЭлементы()[Индекс].ПоказатьСтраницу Тогда
				флЗначенияИдентичны = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеАвторасчета <> СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет Тогда
			
			#Если ВебКлиент Тогда
				ИзменитьТаблицуВариантовЗаполненияНаСервере();
			#Иначе
				РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
			#КонецЕсли	
			
			Расчет(ЭтаФорма);
			
		КонецЕсли;
		
		Если ЗначениеЕдИзм <> СтруктураРеквизитовФормы.ЕдиницаИзмерения
		 ИЛИ ЗначениеЗпт <> СтруктураРеквизитовФормы.ТочностьЕдиницыИзмерения Тогда
			ПослеСменыЕдИзмеренияИТочности();
		КонецЕсли;
		
		// Управляем видимостью страниц основной панели формы
	    РегламентированнаяОтчетностьКлиент.ПоказатьСтраницыОтчетаНаКлиенте(ЭтаФорма);
		
		Если НЕ флЗначенияИдентичны Тогда
			
			СформироватьДеревоРазделовОтчетаНаКлиенте();
			
			Если НЕ ТекущийРазделОтчетаСокрНаим = Неопределено Тогда
				
				// Пытаемся найти ранее запомненный раздел.
				НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(РазделыОтчета.ПолучитьЭлементы(), "КолонкаРазделыОтчетаСокрНаим", ТекущийРазделОтчетаСокрНаим);
				
				Если НЕ НайденнаяСтрока = Неопределено 
					И НЕ НомерСтраницыРазделаОтчета = Неопределено 
					И НайденнаяСтрока.ПолучитьЭлементы().Количество() > 0 Тогда
					
					НайденнаяСтрока = РегламентированнаяОтчетностьКлиентСервер.НайтиЭлементВДанныхФормыДерево(НайденнаяСтрока.ПолучитьЭлементы(), "КолонкаНомерСтраницыРазделаОтчета", НомерСтраницыРазделаОтчета);
					
				КонецЕсли;
				
				// В случае успешного поиска, устанавливаем курсор на найденный раздел.
				Если НЕ НайденнаяСтрока = Неопределено Тогда
					Элементы.РазделыОтчета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
				КонецЕсли;
				
			КонецЕсли;
			
			// обнулим информацию о выделенных областях, так как набор страниц были изменен.
			СтруктураРеквизитовФормы.ТекущиеОбластиСтраниц = Неопределено;
			
		КонецЕсли;
		
	Иначе
		КопироватьДанныеФормы(мДеревоСтраницОтчета, мДеревоВыбранныхСтраниц);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФормуВыбораСтраниц()

&НаСервере
Процедура ИзменитьТаблицуВариантовЗаполненияНаСервере()
	
	РегламентированнаяОтчетностьКлиентСервер.ИзменитьТаблицуВариантовЗаполнения(ЭтаФорма, НЕ СтруктураРеквизитовФормы.ФлажокОтклАвтоРасчет);
	
	РегламентированнаяОтчетность.ПолучитьСведенияОПоказателяхОтчета(ЭтаФорма);
	
КонецПроцедуры // ИзменитьТаблицуВариантовЗаполненияНаСервере()

&НаКлиенте
Процедура ОчиститьОтчет(Команда)
		
	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьВесьОтчет");
	
	СтруктураРеквизитовФормы.НомерТекущейСтраницы = Элементы.РазделыОтчета.ТекущиеДанные.КолонкаНомерСтраницыРазделаОтчета;
	
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(ВыполняемоеОповещение = Неопределено) Экспорт
	
	РегламентированнаяОтчетностьКлиент.Очистить(ЭтаФорма, ВыполняемоеОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекущуюСтраницу(Команда)

	РегламентированнаяОтчетностьКлиент.МеханизмыОчисткиРегламентированныхОтчетов(ЭтаФорма, "ОчиститьТекущийЭкземплярМногостраничногоРаздела" + Элементы.РазделыОтчета.ТекущиеДанные.КолонкаРазделыОтчетаСокрНаим);

КонецПроцедуры

&НаСервере
Процедура ОчиститьНаСервере() Экспорт
	
	СтруктураДанныхДекларация.Очистить();
	
	СтруктураДанныхТаблица11.Очистить();
	СтруктураДанныхТаблица12.Очистить();
	СтруктураДанныхТаблица13.Очистить();
	СтруктураДанныхТаблица41.Очистить();
	СтруктураДанныхТаблица42.Очистить();
	СтруктураДанныхТаблица43.Очистить();
	СтруктураДанныхТаблица5.Очистить();
	СтруктураДанныхТаблица61.Очистить();
	СтруктураДанныхТаблица62.Очистить();
	СтруктураДанныхТаблица63.Очистить();
	
	Для Каждого мнгРаздел Из мСтруктураМногострочныхРазделов Цикл
		ЭтаФорма[мнгРаздел.Ключ].Очистить();
	КонецЦикла;
	
	НачальныеОперацииСМногострочнымиБлоками();
	
	ЗаполнитьПустыеСтруктурыДанных();
	
	ОчиститьТабличноеПолеНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела);
	
	ВывестиМакетСтраницыВТабличныйДокументНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
		
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьВариантыЗаполнения(ЭтаФорма);
	
	ЗаполнитьСведенияОбОрганизацииНаСервере();
	
	
КонецПроцедуры // ОчиститьНаСервере()

&НаСервере
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы)
	
	РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);
	
КонецПроцедуры // ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере()

&НаКлиенте
Функция НайтиСвойстваПоказателя(КодПоказателя)
	
	СвойстваПоказателя = СвойстваПоказателей.НайтиСтроки(Новый Структура("Показатель", КодПоказателя));
		
	Если СвойстваПоказателя.Количество() = 0 Тогда
		
		СвойстваПоказателя = Неопределено;
		
		Для Каждого Стр из СвойстваПоказателей Цикл
			Если Лев(КодПоказателя, СтрДлина(Стр.Показатель)) = Стр.Показатель Тогда
				СвойстваПоказателя = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		СвойстваПоказателя = СвойстваПоказателя[0];
		
	КонецЕсли;
		
	Возврат СвойстваПоказателя;
	
КонецФункции // НайтиСвойстваПоказателя()

&НаКлиенте
Процедура ВыгрузитьОтчетЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ФормаВыгрузкиРеглОтчета = ПолучитьФорму("Документ.ВыгрузкаРегламентированныхОтчетов.Форма.ФормаДокумента", , ЭтаФорма);
	
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(СтруктураРеквизитовФормы.мСохраненныйДок);
	
	ФормаВыгрузкиРеглОтчета.Открыть();
	ФормаВыгрузкиРеглОтчета.СформироватьИЗаписать(СпДокОсн);
	
	
КонецПроцедуры

&НаКлиенте
Процедура АктивизироватьЯчейку(Ячейка) Экспорт

	РегламентированнаяОтчетностьКлиент.АктивизироватьЯчейку(ЭтаФорма, Ячейка);
		
КонецПроцедуры // АктивизироватьЯчейку()

     
&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	Если Найти(Заголовок, СтруктураРеквизитовФормы.СтрПериодОтчета) = 0 Тогда
		Заголовок = Заголовок + " за " + СтруктураРеквизитовФормы.СтрПериодОтчета;
	КонецЕсли;
	
	ВнешнийСтр = НСтр("ru='- внешний отчет';uk='- зовнішній звіт'");
	Заголовок = Заголовок + ?(Найти(ЭтаФорма.ИмяФормы, "Внешний") > 0, ВнешнийСтр, "");
	
	ОргСтр = " (" + СтруктураРеквизитовФормы.НаимОрганизации + ")";
	Если Найти(Заголовок, ОргСтр) = 0 Тогда
		Заголовок = Заголовок + ОргСтр;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ОчисткаРегламентированногоОтчетаНаСервере(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если Найти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
			
			ОчиститьПоказателиОтчетаЗаполняемыеИзИБНаСервере(ИмяСтраницы);
			
			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе
			
			ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
			
		КонецЕсли;
		
	ИначеЕсли Найти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаСервере(ИмяСтраницы);
		
	КонецЕсли;
			
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СформироватьДеревоРазделовОтчетаНаСервере();
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
КонецПроцедуры 

&НаКлиенте
Процедура ОчисткаРегламентированногоОтчетаНаКлиенте(ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, РежимОчистки, Многостраничность, КолВоСтраницВРазделе) Экспорт
	
	УдалятьсяВсеДопЭкземпляры = Ложь;
	
	Если Найти(РежимОчистки, "ОчиститьТекущийРаздел") > 0 Тогда
		
		Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда

			РегламентированнаяОтчетностьКлиентСервер.ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(ЭтаФорма, ИмяСтраницы);

			УдалятьсяВсеДопЭкземпляры = Истина;
			
		Иначе

			ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);

		КонецЕсли;
		
	ИначеЕсли Найти(РежимОчистки, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда
		
		ОчиститьТабличноеПолеНаКлиенте(ИмяСтраницы);
		
	КонецЕсли;
	
	РегламентированнаяОтчетностьКлиентСервер.ПослеОчисткиРегламентированногоОтчета(ЭтаФорма, ИмяСтраницы, ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста);
	
	СформироватьДеревоРазделовОтчетаНаКлиенте();
	
КонецПроцедуры // ОчисткаРегламентированногоОтчетаНаКлиенте()

&НаКлиенте
Процедура ЗаполнитьАвто(Команда)
	
	ПараметрыЗаполненияЗвит1С = Неопределено;
	
	ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С);
	
	ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);
	
	СтруктураРеквизитовФормы.ВыводитьСтраницуВТаблДокНаСервере = Ложь;
	
	РегламентированнаяОтчетностьКлиент.ОбновитьДеревоРазделовВФормеОтчета(ЭтаФорма);
	
	Если НЕ Элементы.РазделыОтчета.ТекущиеДанные = Неопределено Тогда
		Если НЕ Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.РазделыОтчета.ТекущаяСтрока = Элементы.РазделыОтчета.ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьАвто()

&НаСервере
Процедура ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С)
	
	ОчиститьНаСервере();

	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	Заполнить(ПараметрыЗаполненияЗвит1С);
	ВывестиМакетВТаблДокНаСервере(СтруктураРеквизитовФормы.НаимТекущегоРаздела, 1);
	
	РасчетНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура Заполнить(ПараметрыЗаполненияЗвит1С)
	перем ИсходноеКоличествоСтрокГруппы;
	
	ЗарплатаКадрыРасширенная = Ложь;
	Если РегламентированнаяОтчетностьПереопределяемый.ИДПодсистемыЗарплаты() = "ЕРПЗИК" Тогда
		ЗарплатаКадрыРасширенная = Истина;
	КонецЕсли;
	
	КолМесяцевВПериоде = 3;
	НомерМесяца = 0;
	Если СтруктураРеквизитовФормы.мПериодичность = ЭтаФорма.ПеречислениеПериодичностьМесяц Тогда
		КолМесяцевВПериоде = 1;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.НомерМесяца) Тогда 
		КолМесяцевВПериоде = 1;
		НомерМесяца = СтруктураРеквизитовФормы.НомерМесяца-1;
		СтруктураДанныхТаблица41["NMONTHKV"] = СтруктураРеквизитовФормы.НомерМесяца;
		СтруктураДанныхТаблица11["NMONTHKV"] = СтруктураРеквизитовФормы.НомерМесяца;
		СтруктураДанныхТаблица61["NMONTHKV"] = СтруктураРеквизитовФормы.НомерМесяца;
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.НазначениеПенсии Тогда 
		СтруктураДанныхТаблица5["H01"] = Истина;
		СтруктураДанныхТаблица11["H01"] = Истина;
		СтруктураДанныхТаблица61["H01"] = Истина;
	КонецЕсли;	
	Если СтруктураРеквизитовФормы.НазначениеСоцВыплат Тогда 
		СтруктураДанныхТаблица5["H02"] = Истина;
		СтруктураДанныхТаблица11["H02"] = Истина;
	КонецЕсли;	
	
	Для СчетчикМесяцев = 0 по КолМесяцевВПериоде-1 Цикл 
			
		НачалоВЦикле = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СчетчикМесяцев+НомерМесяца);
		КонецВЦикле = КонецМесяца(НачалоВЦикле);
	
		ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
		
		ПараметрыПолученияСотрудников.Организация = СтруктураРеквизитовФормы.Организация;
		ПараметрыПолученияСотрудников.НачалоПериода = НачалоВЦикле;
		ПараметрыПолученияСотрудников.ОкончаниеПериода = КонецВЦикле;
		
		Если ЗарплатаКадрыРасширенная Тогда
			ПараметрыПолученияСотрудников.РаботникиПоДоговорамГПХ = Истина;
		КонецЕсли;
		
		Если СтруктураРеквизитовФормы.НазначениеПенсии Или СтруктураРеквизитовФормы.НазначениеСоцВыплат Тогда
			ПараметрыПолученияСотрудников.СписокФизическихЛиц = СтруктураРеквизитовФормы.Сотрудники;
		КонецЕсли;
		
		
		ТаблицаСотрудниковОрганизации = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
		
		Если Не СтруктураРеквизитовФормы.НазначениеПенсии И Не СтруктураРеквизитовФормы.НазначениеСоцВыплат Тогда
			Если ЗарплатаКадрыРасширенная Тогда

				ТаблицаКадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
					Истина, 
					ТаблицаСотрудниковОрганизации.ВыгрузитьКолонку("Сотрудник"),                                                     
					"ДатаПриема, ДатаУвольнения, ФизическоеЛицо, ВидЗанятости, ПринятНаНовоеРабочееМесто, ДатаСозданияРабочегоМеста, Должность, ПриказОбУвольненииНомер, ПриказОбУвольненииДата, ПриказОбУвольненииСтатьяКЗоТ, ПриказОбУвольненииСтатьяЗакона, ДоляНеполногоРабочегоВремени",
					КонецДня(КонецВЦикле));
				
			Иначе
				
				ТаблицаКадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
					Истина, 
					ТаблицаСотрудниковОрганизации.ВыгрузитьКолонку("Сотрудник"),                                                     
					"ДатаПриема, ДатаУвольнения, ФизическоеЛицо, ВидЗанятости, ПринятНаНовоеРабочееМесто, ДатаСозданияРабочегоМеста, Должность, ПриказОбУвольненииНомер, ПриказОбУвольненииДата, ПриказОбУвольненииСтатьяКЗоТ, ПриказОбУвольненииСтатьяЗакона",
					КонецДня(КонецВЦикле));
				
				ТаблицаКадровыеДанныеСотрудников.Колонки.Добавить("ДоляНеполногоРабочегоВремени", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(1, 0));
				ТаблицаКадровыеДанныеСотрудников.ЗаполнитьЗначения(1,"ДоляНеполногоРабочегоВремени");
					
			КонецЕсли;		
				
			ТаблицаКадровыеДанныеФизическихЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(
				Истина, 
				ТаблицаСотрудниковОрганизации.ВыгрузитьКолонку("ФизическоеЛицо"), 
				"Фамилия, Имя, Отчество, Страна", 
				КонецДня(КонецВЦикле));
				
				
			ТаблЧисленностиССЧ = ИНАГРО_ПроведениеРасчетов.ПолучитьСреднююЧисленность(НачалоВЦикле, КонецВЦикле, "ССЧ", "МЕСЯЦ", СтруктураРеквизитовФормы.Организация, "ШТАТ"); 
			СтруктураДанныхДекларация["R101G"+Строка(3+СчетчикМесяцев)] = ТаблЧисленностиССЧ[0].Средняя;

			ТаблЧисленностиССЧ = ИНАГРО_ПроведениеРасчетов.ПолучитьСреднююЧисленность(НачалоВЦикле, КонецВЦикле, "ССЧ", "МЕСЯЦ", СтруктураРеквизитовФормы.Организация, "ИНВШТАТ"); 
			СтруктураДанныхДекларация["R102G"+Строка(3+СчетчикМесяцев)] = ТаблЧисленностиССЧ[0].Средняя;
			
			ТаблЧисленностиССЧ = ИНАГРО_ПроведениеРасчетов.ПолучитьСреднююЧисленность(НачалоВЦикле, КонецВЦикле, "ССЧ", "МЕСЯЦ", СтруктураРеквизитовФормы.Организация, "ДОПГАРАНТИИШТАТ"); 
			СтруктураДанныхДекларация["R103G"+Строка(3+СчетчикМесяцев)] = ТаблЧисленностиССЧ[0].Средняя;
		КонецЕсли;
		
		КолГПХ = 0;
		СозданоНовыхРМ = 0;
		ШтатнаяЧисленность = 0;
		
		
		ЗапросГПХ = Новый Запрос;
		ЗапросГПХ.Текст = "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Работники.Сотрудник.ФизическоеЛицо
				|ИЗ  Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом КАК Работники
				|ГДЕ 
				|   Работники.Проведен
				| И Работники.ДатаОкончания >= &парамНачало
				| И Работники.ДатаНачала    <= &парамКонец
				| И Работники.Организация = &Организация
				|";	
		ЗапросГПХ.УстановитьПараметр("парамНачало",СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ЗапросГПХ.УстановитьПараметр("парамКонец",СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ЗапросГПХ.УстановитьПараметр("Организация",СтруктураРеквизитовФормы.Организация);
		
		ВыборкаГПХ = ЗапросГПХ.Выполнить().Выбрать();
		КолГПХ = ВыборкаГПХ.Количество();
		
		ЗапросШР = Новый Запрос;
		ЗапросШР.УстановитьПараметр("парамНачало",СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
		ЗапросШР.УстановитьПараметр("парамКонец",СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
		ЗапросШР.УстановитьПараметр("Организация",СтруктураРеквизитовФормы.Организация);
		
		ЗапросШР.Текст = "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СУММА(ШтатноеРасписаниеОрганизаций.СозданоНовыхРабочихМест) КАК СозданоНовыхРабочихМест 
				|ИЗ  РегистрСведений.ИНАГРО_ШтатноеРасписаниеОрганизаций КАК ШтатноеРасписаниеОрганизаций
				|ГДЕ 
				| ШтатноеРасписаниеОрганизаций.Период >= &парамНачало
				| И ШтатноеРасписаниеОрганизаций.Период <= &парамКонец
				| И ШтатноеРасписаниеОрганизаций.ПодразделениеОрганизации.Владелец = &Организация
				|";	
		
		ВыборкаШР = ЗапросШР.Выполнить().Выбрать();
		Если ВыборкаШР.Следующий() Тогда
			СозданоНовыхРМ = ВыборкаШР.СозданоНовыхРабочихМест;
		КонецЕсли;	
		
		ЗапросУЧ = Новый Запрос;
		ЗапросУЧ.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
			    |	КОЛИЧЕСТВО(РаботникиОрганизаций.Сотрудник.ФизическоеЛицо) КАК Количество
			    |ИЗ
			    |	Регистрсведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&парамНачало, Организация = &Организация И Сотрудник.ИНАГРО_ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)) КАК РаботникиОрганизаций
				|ГДЕ
				|   РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
				|   И (РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаработу)
				|      ИЛИ РаботникиОрганизаций.Период < &парамНачало)
				|";
				
		
		ЗапросУЧ.УстановитьПараметр("парамНачало",СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета+86400);
		ЗапросУч.УстановитьПараметр("Организация",СтруктураРеквизитовФормы.Организация);
		
		ВыборкаУЧ = ЗапросУЧ.Выполнить().Выбрать();
		Если ВыборкаУЧ.Следующий() Тогда
			УчетнаяЧисленность = ВыборкаУЧ.Количество;
		КонецЕсли;
		
		Если Не СтруктураРеквизитовФормы.НазначениеПенсии И Не СтруктураРеквизитовФормы.НазначениеСоцВыплат Тогда
			СтруктураДанныхДекларация["R104G"+Строка(3+СчетчикМесяцев)] = УчетнаяЧисленность;
			СтруктураДанныхДекларация["R110G"+Строка(3+СчетчикМесяцев)] = СозданоНовыхРМ;
		КонецЕсли;
			
		РассчитатьСуммуФактическихЗатратНаОплатуТруда(СчетчикМесяцев, НачалоВЦикле, КонецВЦикле);
		
		Запрос = Новый Запрос();
		
		ТаблицаНужныхСтатей_ = ТаблицаНужныхСтатей.Выгрузить();

		Запрос.УстановитьПараметр("ПарамНач",            НачалоВЦикле);
		Запрос.УстановитьПараметр("ПарамКон",            КонецВЦикле);
		Запрос.УстановитьПараметр("Организация",         СтруктураРеквизитовФормы.Организация);
		Запрос.УстановитьПараметр("МассивНужныхСтатей",  ТаблицаНужныхСтатей_.ВыгрузитьКолонку("Статья"));
		
		Запрос.Текст = "ВЫБРАТЬ
		           |    ВзносыВФондыИНалоги.Сотрудник.ФизическоеЛицо 				 КАК ФизЛицо,
				   |    ВзносыВФондыИНалоги.Сотрудник.ФизическоеЛицо.Пол			 КАК ФизЛицоПол,
				   |    ВзносыВФондыИНалоги.СтатьяНалоговойДекларации		 КАК СтатьяНалоговойДекларации,
				   |    ВзносыВФондыИНалоги.ТипНачисления		 			 КАК ТипНачисления,
		           |	СУММА(ВзносыВФондыИНалоги.БазаВзноса) 				 КАК База,
		           |	СУММА(ВзносыВФондыИНалоги.Результат)  				 КАК СуммаВзноса,
				   |	СУММА(ВзносыВФондыИНалоги.БазаДоначисление)			 КАК БазаДоначисление,
				   |	СУММА(ВзносыВФондыИНалоги.РезультатДоначисление)	 КАК СуммаВзносаДоначисление,
				   |	СУММА(ВзносыВФондыИНалоги.РезультатПолная)	 		 КАК СуммаВзносаПолная
				   |ИЗ
		           |	РегистрРасчета.ИНАГРО_ВзносыВФонды КАК ВзносыВФондыИНалоги
				   |
				   |ГДЕ
				   |    ВзносыВФондыИНалоги.ПериодРегистрации МЕЖДУ &ПарамНач И &ПарамКон
				   |  И ВзносыВФондыИНалоги.Организация = &Организация
				   |  И ВзносыВФондыИНалоги.СтатьяНалоговойДекларации В (&МассивНужныхСтатей)
		           |
				   |СГРУППИРОВАТЬ ПО 
				   |	ВзносыВФондыИНалоги.Сотрудник.ФизическоеЛицо,
				   |	ВзносыВФондыИНалоги.СтатьяНалоговойДекларации,
				   |	ВзносыВФондыИНалоги.ТипНачисления
				   |";
				   
	   
	   РезультатЗапроса = Запрос.Выполнить();
	   ТаблицаБазВзносов = РезультатЗапроса.Выгрузить();
	   ТаблицаБазВзносов.Свернуть("СтатьяНалоговойДекларации, ТипНачисления", "База, СуммаВзноса, БазаДоначисление, СуммаВзносаДоначисление, СуммаВзносаПолная");
		  
	   Если НЕ РезультатЗапроса.Пустой() Тогда
		   Для Каждого СтрокаБаз Из ТаблицаБазВзносов Цикл
			   СтрокаТаблицы = ТаблицаНужныхСтатей_.Найти(СтрокаБаз.СтатьяНалоговойДекларации, "Статья");
			   Если СтрокаТаблицы <> Неопределено Тогда
				   Если СтрокаБаз.ТипНачисления < 2 Тогда
					   База = СтрокаБаз.База - СтрокаБаз.БазаДоначисление;
					   БазаДоначисление = СтрокаБаз.БазаДоначисление;
					   СуммаВзноса = СтрокаБаз.СуммаВзноса - СтрокаБаз.СуммаВзносаДоначисление;
					   СуммаВзносаДоначисление = СтрокаБаз.СуммаВзносаДоначисление;
					   СуммаВзносаПолная = СтрокаБаз.СуммаВзносаПолная;
					   Если Не СтруктураРеквизитовФормы.НазначениеПенсии И Не СтруктураРеквизитовФормы.НазначениеСоцВыплат Тогда
						   ДобавитьЗначениеВСтруктуру(СтруктураДанныхДекларация, СтрокаТаблицы.ПолеБазаОсновное+Строка(3+СчетчикМесяцев), База);
						   ДобавитьЗначениеВСтруктуру(СтруктураДанныхДекларация, СтрокаТаблицы.ПолеВзносОсновное+Строка(3+СчетчикМесяцев), СуммаВзноса);
						   ДобавитьЗначениеВСтруктуру(СтруктураДанныхДекларация, СтрокаТаблицы.ПолеБазаДоначисление+Строка(3+СчетчикМесяцев), БазаДоначисление);
						   ДобавитьЗначениеВСтруктуру(СтруктураДанныхДекларация, СтрокаТаблицы.ПолеВзносДоначисление+Строка(3+СчетчикМесяцев), СуммаВзносаДоначисление);
						   ДобавитьЗначениеВСтруктуру(СтруктураДанныхДекларация, СтрокаТаблицы.ПолеВзносПолная+Строка(3+СчетчикМесяцев), СуммаВзносаПолная);
					   КонецЕсли
				   ИначеЕсли (СтрокаБаз.ТипНачисления = 2 ИЛИ СтрокаБаз.ТипНачисления = 4) И (Не СтруктураРеквизитовФормы.НазначениеПенсии И Не СтруктураРеквизитовФормы.НазначениеСоцВыплат) Тогда
					   ДобавитьЗначениеВСтруктуру(СтруктураДанныхДекларация, СтрокаТаблицы.ПолеБазаТип24+Строка(3+СчетчикМесяцев), СтрокаБаз.База);
					   ДобавитьЗначениеВСтруктуру(СтруктураДанныхДекларация, СтрокаТаблицы.ПолеВзносТип24+Строка(3+СчетчикМесяцев), СтрокаБаз.СуммаВзноса);
				   ИначеЕсли (СтрокаБаз.ТипНачисления = 3 ИЛИ СтрокаБаз.ТипНачисления = 5) И (Не СтруктураРеквизитовФормы.НазначениеПенсии И Не СтруктураРеквизитовФормы.НазначениеСоцВыплат) Тогда
					   ДобавитьЗначениеВСтруктуру(СтруктураДанныхДекларация, СтрокаТаблицы.ПолеБазаТип35+Строка(3+СчетчикМесяцев), СтрокаБаз.База);
					   ДобавитьЗначениеВСтруктуру(СтруктураДанныхДекларация, СтрокаТаблицы.ПолеВзносТип35+Строка(3+СчетчикМесяцев), СтрокаБаз.СуммаВзноса);
				   КонецЕсли;	
			   КонецЕсли;
		   КонецЦикла;
	   КонецЕсли;
		
		// ТАБЛИЦА 6   ИНАГРО
		
		ИмяГруппы = "T6"+Строка(СчетчикМесяцев+1)+"T1R";
		ДанныеФормы 	= ЭтаФорма[ИмяГруппы];
		СтруктураГруппы = ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
					
   		ТаблицаПриемовУвольнений = ПолучитьСписокЛиц(НачалоМесяца(КонецВЦикле), КонецВЦикле);
		ДоговораГПХ = ПолучитьСписокДоговоровГПХ(КонецВЦикле);    // ПЕРЕНЕСТИ

	   
		// сформируем список значений: Значение - ссылка на физ.лицо, а представление - основание для льготного стажа
		Список = Новый СписокЗначений;	
		
		Запрос = Новый Запрос();
		ЗапросГПХ = Новый Запрос;
		ЗапросГПХ.Текст = "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	Работники.Сотрудник.ФизическоеЛицо,
				|	Работники.Сотрудник
				|ИЗ  Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом КАК Работники
				|ГДЕ 
				|   Работники.Проведен
				| И Работники.ДатаОкончания >= &парамНачало
				| И Работники.ДатаНачала    <= &парамКонец
				| И Работники.Организация = &Организация
				| И Работники.Сотрудник В (&Сотрудники)
				|";	
		ЗапросГПХ.УстановитьПараметр("парамНачало",НачалоМесяца(КонецВЦикле));
		ЗапросГПХ.УстановитьПараметр("парамКонец",КонецВЦикле);
		ЗапросГПХ.УстановитьПараметр("Организация",СтруктураРеквизитовФормы.Организация);
		ЗапросГПХ.УстановитьПараметр("Сотрудники", СтруктураРеквизитовФормы.Сотрудники);
		
		Если НЕ СтруктураРеквизитовФормы.НазначениеПенсии И НЕ СтруктураРеквизитовФормы.НазначениеСоцВыплат Тогда
			ЗапросГПХ.Текст = СтрЗаменить(ЗапросГПХ.Текст, "И Работники.Сотрудник В (&Сотрудники)", ""); 
		КонецЕсли;
		
		ВыборкаГПХ = ЗапросГПХ.Выполнить().Выбрать();
		КолГПХ = ВыборкаГПХ.Количество();

		ТаблицаТекГПХпоПодразделению = ЗапросГПХ.Выполнить().Выгрузить();
		МассивГПХПоПодразделению = Новый Списокзначений;
		Для каждого СтрокаГПХ Из ТаблицаТекГПХпоПодразделению Цикл
			МассивГПХПоПодразделению.Добавить(СтрокаГПХ.Сотрудник, СтрокаГПХ.Сотрудник);        
	    КонецЦикла;
			
		// сформируем список значений: Значение - ссылка на физ.лицо, а представление - основание для льготного стажа
		Список = Новый СписокЗначений;	
			
		ЗапросСпецСтаж = Новый Запрос();
		ЗапросСпецСтаж.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		                       |	СпецСтаж.Сотрудник.ФизическоеЛицо КАК Физлицо,
		                       |	СпецСтаж.Сотрудник.ФизическоеЛицо.КодПоДРФО КАК КодПоДРФО,
		                       |	СпецСтаж.ВидСтажа.КодПФ КАК ОснованияСпециальногоСтажа,
		                       |	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
		                       |	ФИОФизЛицСрезПоследних.Имя КАК Имя,
		                       |	ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
		                       |	ВЫБОР
		                       |		КОГДА ЕСТЬNULL(ГражданствоФизЛиц.ИНАГРО_НеЯвляетсяНалоговымРезидентом, ЛОЖЬ)
		                       |			ТОГДА 0
		                       |		КОГДА ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
		                       |				ИЛИ ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.Украина)
		                       |			ТОГДА 1
		                       |		ИНАЧЕ 0
		                       |	КОНЕЦ КАК Гражданин,
		                       |	СпецСтаж.ДнейСтажа КАК Результат,
		                       |	СпецСтаж.ДатаСтажа КАК ДатаНачала,
		                       |	СпецСтаж.Период КАК ДатаОкончания
		                       |ИЗ
		                       |	РегистрСведений.ИНАГРО_НачальныеСведенияОСтажеРаботниковОрганизации КАК СпецСтаж
		                       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Дата, ) КАК ФИОФизЛицСрезПоследних
		                       |		ПО СпецСтаж.Сотрудник.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизическоеЛицо
		                       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(&Дата, ) КАК ГражданствоФизЛиц
		                       |		ПО СпецСтаж.Сотрудник.ФизическоеЛицо = ГражданствоФизЛиц.ФизическоеЛицо
		                       |ГДЕ
		                       |	СпецСтаж.ВидСтажа.ЛьготныйСтаж
		                       |	И СпецСтаж.Организация = &Организация
		                       |	И НЕ СпецСтаж.Сотрудник.ФизическоеЛицо.ЭтоГруппа
		                       |	И (СпецСтаж.Сотрудник В
		                       |				(ВЫБРАТЬ
		                       |					РаботникиОрганизацийСрезПоследних.Сотрудник
		                       |				ИЗ
		                       |					РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&Дата, Организация = &Организация) КАК РаботникиОрганизацийСрезПоследних
		                       |				ГДЕ
		                       |					НЕ(РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		                       |							И НАЧАЛОПЕРИОДА(РаботникиОрганизацийСрезПоследних.Период, МЕСЯЦ) <> НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ)))
		                       |			ИЛИ СпецСтаж.Сотрудник В (&МассивГПХПоПодразделению))
		                       |	И НАЧАЛОПЕРИОДА(СпецСтаж.Период, МЕСЯЦ) >= &ПериодРегистрации
		                       |	И СпецСтаж.Сотрудник В (&Сотрудники)";
		
		Если НЕ СтруктураРеквизитовФормы.НазначениеПенсии И НЕ СтруктураРеквизитовФормы.НазначениеСоцВыплат Тогда
			ЗапросСпецСтаж.Текст = СтрЗаменить(ЗапросСпецСтаж.Текст, "И СпецСтаж.Сотрудник В (&Сотрудники)", ""); 
		КонецЕсли;
	
		ЗапросСпецСтаж.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
		ЗапросСпецСтаж.УстановитьПараметр("Сотрудники", СтруктураРеквизитовФормы.Сотрудники);
		ЗапросСпецСтаж.УстановитьПараметр("Дата", КонецВЦикле);
		ЗапросСпецСтаж.УстановитьПараметр("МассивГПХПоПодразделению", МассивГПХПоПодразделению);
		ЗапросСпецСтаж.УстановитьПараметр("ПериодРегистрации", НачалоМесяца(КонецВЦикле));
		МРаботники = тзРаботники.ВыгрузитьКолонку("Сотрудник");
		СРаботники =  Новый СписокЗначений;
		СРаботники.ЗагрузитьЗначения(МРаботники);
		ЗапросСпецСтаж.Параметры.Вставить("тзРаботники", СРаботники);
		ТаблицаСпецСтажа = ЗапросСпецСтаж.Выполнить().Выгрузить();
		Выборка = ЗапросСпецСтаж.Выполнить().Выбрать();
		
		Номер = 0;
		
		ПрефиксИмениКолонки = ИмяГруппы+"XXXX";
		
		СписокРаботниковСоСпецСтажем = Новый СписокЗначений;
			
		Пока Выборка.Следующий() Цикл
		
			СписокРаботниковСоСпецСтажем.Добавить(Выборка.ФизЛицо, Выборка.ОснованияСпециальногоСтажа);	
			
			Если Номер > 0 Тогда
				Строка = СтруктураГруппы.Добавить();
			Иначе
				Строка = СтруктураГруппы[0];
			КонецЕсли;
			
			Строка[ПрефиксИмениКолонки+"G6S"]  = ОбработатьДРФО(Выборка.КодПоДРФО);
			Строка[ПрефиксИмениКолонки+"G5"]  	= Выборка.Гражданин;
			Строка[ПрефиксИмениКолонки+"G7S"] = Выборка.ОснованияСпециальногоСтажа;
			Строка[ПрефиксИмениКолонки+"G81S"] = Выборка.Фамилия;
			Строка[ПрефиксИмениКолонки+"G82S"] = Выборка.Имя;
			Строка[ПрефиксИмениКолонки+"G83S"] = Выборка.Отчество;
			
			ДатаНач = День(НачалоМесяца(КонецВЦикле));
			ДатаКон = День(КонецВЦикле);
			Дней    = День(КонецВЦикле);
			ДатаПриема = ?(Выборка.ДатаНачала > НачалоМесяца(КонецВЦикле), Выборка.ДатаНачала, НачалоМесяца(КонецВЦикле)); 
			ДатаУвольнения = ?(Выборка.ДатаОкончания < КонецВЦикле, Выборка.ДатаОкончания, КонецВЦикле); 
			СтрокаПриемаУвольнений = ТаблицаПриемовУвольнений.Найти(Выборка.Физлицо);
			Если НЕ СтрокаПриемаУвольнений = Неопределено И НЕ СтрокаПриемаУвольнений.ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.Перемещение Тогда
				ДатаПриема = ?(ЗначениеЗаполнено(СтрокаПриемаУвольнений.ДатаПриема) И СтрокаПриемаУвольнений.ДатаПриема > ДатаПриема, СтрокаПриемаУвольнений.ДатаПриема, ДатаПриема); 
				ДатаУвольнения = ?(ЗначениеЗаполнено(СтрокаПриемаУвольнений.ДатаУвольнения) И СтрокаПриемаУвольнений.ДатаУвольнения < ДатаУвольнения, СтрокаПриемаУвольнений.ДатаУвольнения, ДатаУвольнения); 
			КонецЕсли;
			Если ДатаПриема <= ДатаУвольнения Тогда
				//в начале принят, потом уволен
				ДатаНач = День(ДатаПриема);
				
				ДатаКон = День(ДатаУвольнения);
				Дней = День(ДатаУвольнения) - День(ДатаПриема) + 1;					
			КонецЕсли;
			
			Строка[ПрефиксИмениКолонки+"G9"] = ДатаНач;
			Строка[ПрефиксИмениКолонки+"G10"] = ДатаКон;
			Строка[ПрефиксИмениКолонки+"G11"] = Дней;
			Строка[ПрефиксИмениКолонки+"G131"] = День(КонецВЦикле);
			Строка[ПрефиксИмениКолонки+"G132"] = 0;
			Строка[ПрефиксИмениКолонки+"G133"] = 0;
		
			Номер = Номер + 1;
		КонецЦикла;	
		ЗначениеВРеквизитФормы(СтруктураГруппы, ИмяГруппы);
				
		//ТАБЛИЦА 1

		ИмяГруппы = "П"+Строка(СчетчикМесяцев+1)+"T1R";
		ДанныеФормы 	= ЭтаФорма[ИмяГруппы];
		СтруктураГруппы = ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);
		
	
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("ПериодОтчета", НачалоМесяца(КонецВЦикле));
		Запрос.Параметры.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Параметры.Вставить("ВРБезСохранения", ПолучитьСписокБезСохранения());
		
		// виды расчетов по больничным
		ВидыРасчетов = ПолучитьБольничныеПредприятия();
		Для каждого ВидРасчета Из ПолучитьСписокВидовРасчетовПоВидуНалога(Справочники.Налоги.ЕСВФОТБольничные) Цикл
			ВидыРасчетов.Добавить(ВидРасчета);
		КонецЦикла;
		Для каждого ВидРасчета Из ПолучитьБольничныеФССНесчСлучай() Цикл
			ВидыРасчетов.Добавить(ВидРасчета);
		КонецЦикла;
			
		Запрос.Параметры.Вставить("ВРБольничные", ВидыРасчетов);
		
		Запрос.Параметры.Вставить("ВРДекретные",  ПолучитьСписокДекретные());
		Запрос.Параметры.Вставить("Сотрудники", СтруктураРеквизитовФормы.Сотрудники);

		МассивКодыБольничные = Новый Массив();
		МассивКодыБольничные.Вставить(0, 29);
		МассивКодыБольничные.Вставить(1, 36);
		МассивКодыБольничные.Вставить(2, 37);
		МассивКодыБольничные.Вставить(3, 39);
		
		МассивКодыБольничные.Вставить(4, 42);
		МассивКодыБольничные.Вставить(5, 43);
		МассивКодыБольничные.Вставить(6, 44);
		МассивКодыБольничные.Вставить(7, 45);
		
		Запрос.Параметры.Вставить("МассивКодыБольничные", МассивКодыБольничные);
		
		МассивКодыДекретные = Новый Массив();
		МассивКодыДекретные.Вставить(0, 42);
		МассивКодыДекретные.Вставить(1, 43);
		МассивКодыДекретные.Вставить(2, 44);
		МассивКодыДекретные.Вставить(3, 45);
		
		Запрос.Параметры.Вставить("МассивКодыДекретные", МассивКодыДекретные);
		
		МассивКодыГПХ = Новый Массив();
		МассивКодыГПХ.Вставить(0, 26);
		МассивКодыГПХ.Вставить(1, 38);
		Запрос.Параметры.Вставить("МассивКодыГПХ", МассивКодыГПХ);
		
		МассивКодыМобилизованные = Новый Массив();
		МассивКодыМобилизованные.Вставить(0, 48);  
		МассивКодыМобилизованные.Вставить(0, 47);
		МассивКодыМобилизованные.Вставить(0, 66);
		Запрос.Параметры.Вставить("МассивКодыМобилизованные", МассивКодыМобилизованные);
		

		// Тексты запросов общий
		// Для отдельных конфигураций модифицируются ниже по коду.
			
		ТекстЗапросаВТФОТ ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВзносыВФонды.Сотрудник,
			|	ВзносыВФонды.ВидРасчета.КатегорияРасчета КАК КатегорияРасчета,
			|	НАЧАЛОПЕРИОДА(ВзносыВФонды.БазовыйПериодНачало, МЕСЯЦ) КАК Период,
			|	ВзносыВФонды.КодКатегорииЗЛ,
			|	ВзносыВФонды.ТипНачисления,
			|	ВзносыВФонды.База,
			|	ВзносыВФонды.БазаОтпускные,
			|	ВзносыВФонды.БазаВзноса,
			|	ВзносыВФонды.БазаДоначисление КАК ДоначислениеФОТ,
			|	ВзносыВФонды.Результат КАК НалогФОТ,
			|	ВзносыВФонды.РезультатДоначисление КАК ДоначислениеНалогФОТ
			|ПОМЕСТИТЬ ВТВзносыФОТ
			|ИЗ
			|	РегистрРасчета.ИНАГРО_ВзносыВФонды КАК ВзносыВФонды
			|ГДЕ
			|	ВзносыВФонды.Организация = &Организация
			|	И ВзносыВФонды.ПериодРегистрации = &ПериодОтчета
			|	И ВзносыВФонды.ВидРасчета В
			|			(ВЫБРАТЬ
			|				РегистрСведений.ИНАГРО_ВидыРасчетовВзносовВФонды.СрезПоследних.ВидРасчета
			|			ИЗ
			|				РегистрСведений.ИНАГРО_ВидыРасчетовВзносовВФонды.СрезПоследних(&ПериодОтчета, Налог.Родитель = ЗНАЧЕНИЕ(Справочник.Налоги.ВзносыФОТ)))
			|	И ВзносыВФонды.ВидРасчета.ЕСВ
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ВзносыВФонды.Сотрудник,
			|	Период,
			|	ВзносыВФонды.КодКатегорииЗЛ,
			|	ВзносыВФонды.ТипНачисления";
			
			ТекстЗапросаВТ ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВзносыВФонды.Сотрудник,
			|	ВзносыВФонды.ВидРасчета.КатегорияРасчета КАК КатегорияРасчета,
			|	НАЧАЛОПЕРИОДА(ВзносыВФонды.БазовыйПериодНачало,МЕСЯЦ) КАК Период,
			|	СУММА(ВзносыВФонды.Результат) КАК Налог
			|ПОМЕСТИТЬ ВТВзносы
			|ИЗ
			|	РегистрРасчета.ИНАГРО_ВзносыВФонды КАК ВзносыВФонды
			|ГДЕ
			|	ВзносыВФонды.Организация = &Организация
			|	И ВзносыВФонды.ПериодРегистрации = &ПериодОтчета
			|	И ВзносыВФонды.ВидРасчета В
			|			(ВЫБРАТЬ
			|				РегистрСведений.ИНАГРО_ВидыРасчетовВзносовВФонды.СрезПоследних.ВидРасчета
			|			ИЗ
			|				РегистрСведений.ИНАГРО_ВидыРасчетовВзносовВФонды.СрезПоследних(&ПериодОтчета, Налог.Родитель = ЗНАЧЕНИЕ(Справочник.Налоги.Взносы)))
			|	И ВзносыВФонды.ВидРасчета.ЕСВ
			|СГРУППИРОВАТЬ ПО
			| ВзносыВФонды.Сотрудник, ВзносыВФонды.ВидРасчета.КатегорияРасчета,  НАЧАЛОПЕРИОДА(ВзносыВФонды.БазовыйПериодНачало,МЕСЯЦ)
			|ИНДЕКСИРОВАТЬ ПО
			| Сотрудник, Период
			|";
			
			ТекстЗапросаВТОтработанныеДни ="ВЫБРАТЬ
			|	ТЗ.Сотрудник,
			|	ВЫБОР 
			|		КОГДА ТЗ.ДатаУвольнения ЕСТЬ NULL ТОГДА &ДнейВМесяце
			|		КОГДА ТЗ.ДатаУвольнения > КОНЕЦПЕРИОДА(&ПериодОтчета,МЕСЯЦ)  ТОГДА &ДнейВМесяце
			|       ИНАЧЕ ДЕНЬ(ТЗ.ДатаУвольнения)-1
			|   КОНЕЦ -
			|	ВЫБОР 
			|		КОГДА ТЗ.ДатаПриема ЕСТЬ NULL ТОГДА 1
			|       ИНАЧЕ ДЕНЬ(ТЗ.ДатаПриема)
			|   КОНЕЦ +1 КАК ОтработанныеДни,
			|	ВЫБОР 
			|		КОГДА ТЗ.ПринятНаНовоеРабочееМесто ТОГДА 1
			|       ИНАЧЕ 0
			|   КОНЕЦ КАК ПринятНаНовоеРабочееМесто,
			|	ВЫБОР 
			|		КОГДА ТЗ.СокращенноеРабочееВремя ТОГДА 1
			|       ИНАЧЕ 0
			|   КОНЕЦ КАК СокращенноеРабочееВремя
			|ПОМЕСТИТЬ ВТОтработанныеДниРаботники
			|ИЗ &тзРаботники КАК ТЗ
			|ИНДЕКСИРОВАТЬ ПО
			| Сотрудник
			|;
			|
			|ВЫБРАТЬ
			|	ТЗ.Сотрудник КАК Сотрудник,
			|	ВЫБОР 
			|		КОГДА ТЗ.ДатаПриема ЕСТЬ NULL ТОГДА &ДнейВМесяце
			|		КОГДА ТЗ.ДатаУвольнения > КОНЕЦПЕРИОДА(&ПериодОтчета,МЕСЯЦ)  ТОГДА &ДнейВМесяце
			|       ИНАЧЕ ДЕНЬ(ТЗ.ДатаУвольнения)
			|   КОНЕЦ -
			|	ВЫБОР 
			|		КОГДА ТЗ.ДатаПриема ЕСТЬ NULL ТОГДА 1
			|       ИНАЧЕ ДЕНЬ(ТЗ.ДатаПриема)
			|   КОНЕЦ +1 КАК ОтработанныеДни,
			|	0 КАК ПринятНаНовоеРабочееМесто
			|ПОМЕСТИТЬ ВТСписокГПХ
			|ИЗ &тзГПХ КАК ТЗ
			|ИНДЕКСИРОВАТЬ ПО
			| Сотрудник
			|
			|;
			|ВЫБРАТЬ
			|	СписокГПХ.Сотрудник,
			|	СписокГПХ.Сотрудник.ОсновноеНазначение КАК ОсновноеНазначение,
			|	СписокГПХ.ОтработанныеДни,
			|	СписокГПХ.ПринятНаНовоеРабочееМесто,
			|   0 КАК СокращенноеРабочееВремя
			|ПОМЕСТИТЬ ВТОтработанныеДниГПХ
			|ИЗ ВТСписокГПХ КАК СписокГПХ
			|ИНДЕКСИРОВАТЬ ПО
			| Сотрудник
			|;
			|
			|ВЫБРАТЬ
			|	ЕстьNULL(ВТ.Сотрудник, ВТГПХ.Сотрудник) КАК Сотрудник,
			|	ЕстьNULL(ВТ.ОтработанныеДни, 0) КАК ОтработанныеДни,
			|	ЕстьNULL(ВТГПХ.ОтработанныеДни, 0) КАК ОтработанныеДниГПХ,
			|	ЕстьNULL(ВТ.ПринятНаНовоеРабочееМесто, ВТГПХ.ПринятНаНовоеРабочееМесто) КАК ПринятНаНовоеРабочееМесто,
			|	ЕстьNULL(ВТ.СокращенноеРабочееВремя, ВТГПХ.СокращенноеРабочееВремя) КАК СокращенноеРабочееВремя
			|ПОМЕСТИТЬ ВТОтработанныеДни
			|ИЗ ВТОтработанныеДниРаботники КАК ВТ
			|   ПОЛНОЕ СОЕДИНЕНИЕ
			|   ВТОтработанныеДниГПХ КАК ВТГПХ
			|   ПО ВТ.Сотрудник = ВТГПХ.Сотрудник ИЛИ ВТ.Сотрудник = ВТГПХ.ОсновноеНазначение
			|ИНДЕКСИРОВАТЬ ПО
			| Сотрудник
			|";
			Запрос.Параметры.Вставить("тзРаботники", тзРаботники);
			Запрос.Параметры.Вставить("тзГПХ", тзГПХ);
			Запрос.Параметры.Вставить("ДнейВМесяце", День(КонецВЦикле));
			
			ТекстЗапросаВТБезСохранения ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Начисления.Сотрудник,
			|	Начисления.ПериодДействия КАК Период,
			|	СУММА(РАЗНОСТЬДАТ(Начисления.ПериодДействияНачало,Начисления.ПериодДействияКонец,ДЕНЬ)
			|	+ ВЫБОР КОГДА Начисления.ПериодДействияНачало = НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало,ДЕНЬ) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК Дней
			|ПОМЕСТИТЬ ВТБезСохранения
			|ИЗ
			|	РегистрРасчета.ИНАГРО_Начисления.ФактическийПериодДействия КАК Начисления
			|ГДЕ
			|	Начисления.Организация = &Организация
			|	И Начисления.ПериодДействия = &ПериодОтчета
			|	И Начисления.ПериодРегистрации <= &ПериодОтчета
			|	И Начисления.ВидРасчета В (&ВРБезСохранения)
			|	И НЕ Начисления.Сторно
			|	И Начисления.Сотрудник = Начисления.Назначение
			|СГРУППИРОВАТЬ ПО
			| Начисления.Сотрудник, Начисления.ПериодДействия
			|
			|ОБЪЕДИНИТЬ ВСЕ
		    |
			|ВЫБРАТЬ
			|	//Невыходы предыдущих периодов - обычные и сторно
			|	Начисления.Сотрудник,
			|	Начисления.ПериодДействия КАК Период,
			|	СУММА(ВЫБОР КОГДА Начисления.Сторно ТОГДА -1 ИНАЧЕ 1 КОНЕЦ * (РАЗНОСТЬДАТ(Начисления.ПериодДействияНачало,Начисления.ПериодДействияКонец,ДЕНЬ)
			|	+ ВЫБОР КОГДА Начисления.ПериодДействияНачало = НАЧАЛОПЕРИОДА(Начисления.ПериодДействияНачало,ДЕНЬ) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ))	КАК Дней
			|ИЗ
			|	РегистрРасчета.ИНАГРО_Начисления.ФактическийПериодДействия КАК Начисления
			|ГДЕ
			|	Начисления.Организация = &Организация
			|	И Начисления.ПериодДействия < &ПериодОтчета
			|	И Начисления.ПериодРегистрации = &ПериодОтчета
			|	И Начисления.ВидРасчета В (&ВРБезСохранения)
			|	И Начисления.Сотрудник = Начисления.Назначение
			|СГРУППИРОВАТЬ ПО
			|  Начисления.Сотрудник, Начисления.ПериодДействия
			|ИНДЕКСИРОВАТЬ ПО
			| Сотрудник, Период
			|";

			ТекстЗапросаВТБольничные ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		    |" + ?(РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БСП", "", "
			|Начисления.СторнируемыйДокумент
			|ПОМЕСТИТЬ ВТСторноБольничные 
			|ИЗ
			|	РегистрРасчета.ИНАГРО_Начисления КАК Начисления
			|ГДЕ
			|	Начисления.Организация = &Организация
			|	И Начисления.ПериодРегистрации = &ПериодОтчета
			|	И (Начисления.ВидРасчета В(&ВРБольничные) ИЛИ Начисления.ВидРасчета В(&ВРДекретные))
			|   И (Начисления.СторнируемыйДокумент ССЫЛКА Документ.ИНАГРО_НачислениеПоБольничномуЛисту)
			|; 
			|ВЫБРАТЬ
			|") + "
			|	Начисления.Сотрудник,
			|	Начисления.ПериодДействия КАК Период,
			|   СУММА(
			|		ВЫБОР КОГДА Начисления.ВидРасчета В(&ВРБольничные)
			|		ТОГДА РАЗНОСТЬДАТ(Начисления.ПериодДействияНачало,Начисления.ПериодДействияКонец,ДЕНЬ)+1 
			|		ИНАЧЕ 0
			|		КОНЕЦ) КАК ДнейБольничные,
			|   СУММА(
			|		ВЫБОР КОГДА Начисления.ВидРасчета В(&ВРДекретные)
			|		ТОГДА РАЗНОСТЬДАТ(Начисления.ПериодДействияНачало,Начисления.ПериодДействияКонец,ДЕНЬ)+1 
			|		ИНАЧЕ 0
			|		КОНЕЦ) КАК ДнейДекретные
			|ПОМЕСТИТЬ ВТБольничные
			|ИЗ
			|	РегистрРасчета.ИНАГРО_Начисления.ФактическийПериодДействия КАК Начисления
			|ГДЕ
			|	Начисления.Организация = &Организация
			|	И Начисления.ПериодРегистрации = &ПериодОтчета
			|	И (Начисления.ВидРасчета В(&ВРБольничные) ИЛИ Начисления.ВидРасчета В(&ВРДекретные))
			|	И Начисления.Сотрудник = Начисления.Назначение
			|	И НЕ Начисления.Сторно
			|СГРУППИРОВАТЬ ПО
			| Начисления.Сотрудник, Начисления.ПериодДействия
			|ИНДЕКСИРОВАТЬ ПО
			| Сотрудник, Период
			|";
			
			ТекстТаблица6 = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|   ВзносыФОТ.Сотрудник,
			|	ВзносыФОТ.ФизЛицо,
			|	ВзносыФОТ.ФизЛицо.Пол КАК ФизЛицоПол,
			|	ВзносыФОТ.ФизЛицо.КодПоДРФО КАК КодПоДРФО,
			|	ВЫБОР 
			|	КОГДА ЕстьNULL(ГражданствоФизЛиц.ИНАГРО_НеЯвляетсяНалоговымРезидентом, ЛОЖЬ)
			|		ТОГДА 0
			|	КОГДА ЕстьNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка) 
			|	  ИЛИ ЕстьNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.Украина) 
			|		ТОГДА 1
			|	ИНАЧЕ 0 КОНЕЦ КАК Гражданин,
			|   ВзносыФОТ.КодКатегорииЗЛ,
			|   ВзносыФОТ.ТипНачисления,
			|   ВзносыФОТ.Период,
			|	ВЫБОР
			|		КОГДА ФИОФизЛиц.ФизическоеЛицо ЕСТЬ NULL 
			|			ТОГДА ВзносыФОТ.Наименование
			|		ИНАЧЕ ФИОФизЛиц.Фамилия
			|	КОНЕЦ              КАК ФизЛицоФио,
			|	ФИОФизЛиц.Имя 	   КАК ФизЛицоИмя,
			|	ФИОФизЛиц.Отчество КАК ФизЛицоОтчество,
			|   ВзносыФОТ.Результат,
			|   ВзносыФОТ.РезультатОтпускные,
			|   ВзносыФОТ.РезультатСПределом,
			|   ЕСТЬNULL(ВзносыВФонды.Налог, 0) КАК Налог,
			|   ВзносыФОТ.ДоначислениеФОТ,
			|   ВзносыФОТ.НалогФОТ,
			|   ВзносыФОТ.ДоначислениеНалогФОТ,
			|	ВЫБОР КОГДА ВзносыФОТ.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы) ТОГДА 1 Иначе 0 КОНЕЦ КАК ПризнакНаличияТрудовойКнижки,
			|	ВЫБОР 
			|	 КОГДА ВзносыФОТ.ТипНачисления = 0 И ВзносыФОТ.КодКатегорииЗЛ В (&МассивКодыБольничные) 
			|	 ТОГДА ЕСТЬNULL(Больничные.ДнейБольничные,0)
			|	 ИНАЧЕ 0
			|	КОНЕЦ КАК ДнейБольничные, 
			
			|	ВЫБОР 
			|	КОГДА  ВзносыФОТ.ТипНачисления = 0 И ВзносыФОТ.КодКатегорииЗЛ В (&МассивКодыДекретные) 
			|	 ТОГДА ЕСТЬNULL(Больничные.ДнейДекретные,0)
			|	 ИНАЧЕ 0
			|	КОНЕЦ КАК ДнейДекретные, 
			
			|	ВЫБОР КОГДА 
			|	 ВзносыФОТ.ТипНачисления = 0 И ВзносыФОТ.КодКатегорииЗЛ НЕ В (&МассивКодыБольничные)  
			|	 ТОГДА ЕСТЬNULL(БезСохранения.Дней,0)
			|	 ИНАЧЕ 0
			|	КОНЕЦ КАК ДнейБезСохранения,
			|	ВЫБОР 
			|    КОГДА 
			|   	 ВзносыФОТ.ТипНачисления = 0 И ВзносыФОТ.КодКатегорииЗЛ НЕ В (&МассивКодыГПХ) И ВзносыФОТ.КодКатегорииЗЛ НЕ В (&МассивКодыБольничные) И ВзносыФОТ.Период = &ПериодОтчета 
			|	 ТОГДА ЕСТЬNULL(Отработанные.ОтработанныеДни,0)
			|    КОГДА 
			|   	 ВзносыФОТ.ТипНачисления = 0 И ВзносыФОТ.КодКатегорииЗЛ В (&МассивКодыГПХ) И ВзносыФОТ.Период = &ПериодОтчета 
			|	 ТОГДА ЕСТЬNULL(Отработанные.ОтработанныеДниГПХ,&ДнейВМесяце)
			|    КОГДА 
			|	 	ВзносыФОТ.ТипНачисления = 0 И ВзносыФОТ.КодКатегорииЗЛ В (&МассивКодыДекретные) И ВзносыФОТ.Период <> &ПериодОтчета
			|	 ТОГДА ЕСТЬNULL(Больничные.ДнейДекретные,0)
			|	 ИНАЧЕ 0
			|	КОНЕЦ КАК ОтработанныеДни,
			|	ВЫБОР 
			|    КОГДА 
			|   	 ВзносыФОТ.ТипНачисления = 0 И ВзносыФОТ.КодКатегорииЗЛ В (&МассивКодыГПХ) И ВзносыФОТ.Период = &ПериодОтчета 
			|	 ТОГДА 1
			|	 ИНАЧЕ 0
			|	КОНЕЦ КАК Признак,
			|	Отработанные.ПринятНаНовоеРабочееМесто КАК ПринятНаНовоеРабочееМесто,
			|   Отработанные.СокращенноеРабочееВремя КАК СокращенноеРабочееВремя
			|	
			|
			|ИЗ
			| (ВЫБРАТЬ
			|   ВзносыВФонды.Сотрудник,
			|   ВзносыВФонды.Сотрудник.ИНАГРО_ВидЗанятости КАК ВидЗанятости,
			|   ВзносыВФонды.Сотрудник.ФизическоеЛицо КАК ФизЛицо,
			|   ВзносыВФонды.Сотрудник.ФизическоеЛицо.Наименование КАК Наименование,
			|   ВзносыВФонды.КатегорияРасчета,
			|   ВзносыВФонды.Период,
			|   ВзносыВФонды.КодКатегорииЗЛ,
			|   ВзносыВФонды.ТипНачисления,
			|   СУММА(ВзносыВФонды.База) КАК Результат,
		    |   СУММА(ВзносыВФонды.БазаОтпускные) КАК РезультатОтпускные,
			|   СУММА(ВзносыВФонды.БазаВзноса) КАК РезультатСПределом,
			|   СУММА(ВзносыВФонды.ДоначислениеФОТ) КАК ДоначислениеФОТ,
			|   СУММА(ВзносыВФонды.ДоначислениеНалогФОТ) КАК ДоначислениеНалогФОТ,
			|   СУММА(ВзносыВФонды.НалогФОТ) КАК НалогФОТ
			|  ИЗ ВТВзносыФОТ КАК ВзносыВФонды
			|  СГРУППИРОВАТЬ ПО
			|   ВзносыВФонды.Сотрудник, ВзносыВФонды.Сотрудник.ИНАГРО_ВидЗанятости, ВзносыВФонды.Сотрудник.ФизическоеЛицо, ВзносыВФонды.Сотрудник.ФизическоеЛицо.Наименование, ВзносыВФонды.КатегорияРасчета, ВзносыВФонды.Период, ВзносыВФонды.КодКатегорииЗЛ, ВзносыВФонды.ТипНачисления
			| ) КАК ВзносыФОТ
			| ЛЕВОЕ СОЕДИНЕНИЕ 
			|	РегистрСведений.ФиоФизическихЛиц.СрезПоследних(КОНЕЦПЕРИОДА(&ПериодОтчета,МЕСЯЦ)) КАК ФИОФизЛиц
			|	ПО ВзносыФОТ.ФизЛицо = ФИОФизЛиц.ФизическоеЛицо
			| ЛЕВОЕ СОЕДИНЕНИЕ 
			|	РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(КОНЕЦПЕРИОДА(&ПериодОтчета,МЕСЯЦ)) КАК ГражданствоФизЛиц
			|	ПО ВзносыФОТ.ФизЛицо = ГражданствоФизЛиц.ФизическоеЛицо
			| ЛЕВОЕ СОЕДИНЕНИЕ 
			|   ВТБезСохранения КАК БезСохранения
			|   ПО ВзносыФОТ.Период = БезСохранения.Период
			|    И ВзносыФОТ.Сотрудник = БезСохранения.Сотрудник
			| ЛЕВОЕ СОЕДИНЕНИЕ 
			|   ВТБольничные КАК Больничные
			|   ПО ВзносыФОТ.Период = Больничные.Период
			|    И ВзносыФОТ.Сотрудник = Больничные.Сотрудник
			| ЛЕВОЕ СОЕДИНЕНИЕ 
			|   ВТОтработанныеДни КАК Отработанные
			|   ПО ВзносыФОТ.Сотрудник = Отработанные.Сотрудник
			| ЛЕВОЕ СОЕДИНЕНИЕ 
			|   ВТВзносы КАК ВзносыВФонды
			|   ПО ВзносыВФонды.Период = ВзносыФОТ.Период
			|    И ВзносыВФонды.Сотрудник = ВзносыФОТ.Сотрудник
			|    И ВзносыВФонды.КатегорияРасчета = ВзносыФОТ.КатегорияРасчета
			|    И ВзносыФОТ.КодКатегорииЗЛ НЕ В(&МассивКодыМобилизованные)
			|				
			|ГДЕ
			|	(ВзносыФОТ.Результат <> 0 ИЛИ ВзносыФОТ.РезультатСПределом <> 0 ИЛИ ВзносыФОТ.НалогФОТ <> 0
			|	ИЛИ ВзносыФОТ.ДоначислениеФОТ <> 0 ИЛИ ЕСТЬNULL(ВзносыВФонды.Налог, 0) <> 0 ИЛИ ВзносыФОТ.ДоначислениеНалогФОТ <> 0 
			|   ИЛИ ВЫБОР 
			|    КОГДА 
			|   	 ВзносыФОТ.ТипНачисления = 0 И ВзносыФОТ.КодКатегорииЗЛ НЕ В (&МассивКодыГПХ) И ВзносыФОТ.КодКатегорииЗЛ НЕ В (&МассивКодыБольничные) И ВзносыФОТ.Период = &ПериодОтчета 
			|	 ТОГДА ЕСТЬNULL(Отработанные.ОтработанныеДни,0)
			|    КОГДА 
			|   	 ВзносыФОТ.ТипНачисления = 0 И ВзносыФОТ.КодКатегорииЗЛ В (&МассивКодыГПХ) И ВзносыФОТ.Период = &ПериодОтчета 
			|	 ТОГДА ЕСТЬNULL(Отработанные.ОтработанныеДниГПХ,&ДнейВМесяце)
			|	 ИНАЧЕ 0
			|	КОНЕЦ <> 0
			|   ИЛИ ВЫБОР КОГДА 
			|	 ВзносыФОТ.ТипНачисления = 0 И ВзносыФОТ.КодКатегорииЗЛ В (&МассивКодыДекретные) 
			|	 ТОГДА ЕСТЬNULL(Больничные.ДнейДекретные,0)
			|	 КОГДА ВзносыФОТ.ТипНачисления = 0 И ВзносыФОТ.КодКатегорииЗЛ В (&МассивКодыБольничные) 
			|	 ТОГДА ЕСТЬNULL(Больничные.ДнейБольничные,0)
			|	 ИНАЧЕ 0
			|	 КОНЕЦ <> 0
			|	ИЛИ ВЫБОР КОГДА 
			|	 ВзносыФОТ.ТипНачисления = 0 И ВзносыФОТ.КодКатегорииЗЛ НЕ В (&МассивКодыБольничные)  
			|	 ТОГДА ЕСТЬNULL(БезСохранения.Дней,0)
			|	 ИНАЧЕ 0
			|	КОНЕЦ  <> 0) И ВзносыФОТ.Сотрудник В (&Сотрудники)
			|УПОРЯДОЧИТЬ ПО
			|  ФизЛицоФио, КодПоДРФО, ВзносыФОТ.Период, КодКатегорииЗЛ, ТипНачисления
			|";
			
		Если НЕ СтруктураРеквизитовФормы.НазначениеПенсии И НЕ СтруктураРеквизитовФормы.НазначениеСоцВыплат Тогда
			ТекстТаблица6 = СтрЗаменить(ТекстТаблица6, "И ВзносыФОТ.Сотрудник В (&Сотрудники)", ""); 
		КонецЕсли;
	
		ТекстЗапросаВТОтработанныеДни = СтрЗаменить(ТекстЗапросаВТОтработанныеДни,"-1","");
			
		Запрос.Текст    = ТекстЗапросаВТ;
		Запрос.Выполнить();

		Запрос.Текст    = ТекстЗапросаВТОтработанныеДни;
		Запрос.Выполнить();

		Запрос.Текст    = ТекстЗапросаВТФОТ;
		Запрос.Выполнить();
		
		Запрос.Текст    = ТекстЗапросаВТБезСохранения;
		Запрос.Выполнить();
		Запрос.Текст    = ТекстЗапросаВТБольничные;
		Запрос.Выполнить();
		Запрос.Текст    = ТекстТаблица6;
		
		РезультатЗапросаТаблица6 = Запрос.Выполнить();
		РассчитатьЧислоЗастрахованныхЛиц(РезультатЗапросаТаблица6.Выгрузить(), СчетчикМесяцев);
		
		Выборка = РезультатЗапросаТаблица6.Выбрать();
	
		Номер = 0;
		ПрефиксИмениКолонки = ИмяГруппы+"XXXX";
			
		Пока Выборка.Следующий() Цикл
			
			Результат = Выборка.Результат - Выборка.РезультатОтпускные;
			РезультатОтпускные = Выборка.РезультатОтпускные;
			
			//Вариант 2 - сумма с пределом и налог делим пропорционально, но с приоритетом основной
			
			РезультатСПределом = МИН(Выборка.РезультатСПределом - Выборка.ДоначислениеФОТ,Результат);
			РезультатСПределомОтпускные = Выборка.РезультатСПределом - Выборка.ДоначислениеФОТ - РезультатСПределом;
			
			КоэффициентДеления = ?(Выборка.РезультатСПределом - Выборка.ДоначислениеФОТ = 0 ИЛИ РезультатСПределом = Выборка.РезультатСПределом - Выборка.ДоначислениеФОТ, 1, РезультатСПределом/(Выборка.РезультатСПределом - Выборка.ДоначислениеФОТ));
			
			Налог 		   = Окр(Выборка.Налог*КоэффициентДеления, 2);
			НалогОтпускные = Выборка.Налог - Налог;
			
			ДоначислениеФОТ = Выборка.ДоначислениеФОТ;
			ДоначислениеНалогФОТ = Выборка.ДоначислениеНалогФОТ;
			
			НалогФОТ        = Окр((Выборка.НалогФОТ-ДоначислениеНалогФОТ)*КоэффициентДеления, 2);
			НалогФОТОтпускные = Окр((Выборка.НалогФОТ-ДоначислениеНалогФОТ) - НалогФОТ,2);

			Если Номер > 0 Тогда
				Строка = СтруктураГруппы.Добавить();
			Иначе
				Строка = СтруктураГруппы[0];
			КонецЕсли;
			
			Строка[ПрефиксИмениКолонки+"G5"] = Выборка.Гражданин;
			Строка[ПрефиксИмениКолонки+"G6"] = КодПолаФизическогоЛица(Выборка.ФизЛицо.Пол);
			
			Строка[ПрефиксИмениКолонки+"G7S"] = ОбработатьДРФО(Выборка.КодПоДРФО);
			Строка[ПрефиксИмениКолонки+"G8"]  = Выборка.КодКатегорииЗЛ;
			
			Если Выборка.Результат = Выборка.РезультатОтпускные И Выборка.РезультатОтпускные > 0 Тогда
				//Начислен только отпуск
				Строка[ПрефиксИмениКолонки+"G9"] = 10;
			Иначе	
				Строка[ПрефиксИмениКолонки+"G9"] = Выборка.ТипНачисления;
			КонецЕсли;	
			Строка[ПрефиксИмениКолонки+"G101"] = Месяц(Выборка.Период);
			Строка[ПрефиксИмениКолонки+"G102"] = Год(Выборка.Период);
			
			Строка[ПрефиксИмениКолонки+"G111S"] = Выборка.ФизЛицоФио;
			Строка[ПрефиксИмениКолонки+"G112S"] = Выборка.ФизЛицоИмя;
			Строка[ПрефиксИмениКолонки+"G113S"] = Выборка.ФизЛицоОтчество;
			
			Строка[ПрефиксИмениКолонки+"G12"] = Выборка.ДнейБольничные;
			Строка[ПрефиксИмениКолонки+"G13"] = Выборка.ДнейБезСохранения;
			Строка[ПрефиксИмениКолонки+"G14"] = Выборка.ОтработанныеДни;
			Строка[ПрефиксИмениКолонки+"G15"] = Выборка.ДнейДекретные;
			
			Строка[ПрефиксИмениКолонки+"G21"] = Выборка.ПризнакНаличияТрудовойКнижки;
			//Если в отчетном периоде кроме ЗП есть отпускные - показываем их отдельной строкой с типом 10
			Если Результат <> 0 И РезультатОтпускные <> 0 И Выборка.Период = НачалоМесяца(КонецВЦикле) Тогда
	        	Строка[ПрефиксИмениКолонки+"G16"] = Результат;
				Строка[ПрефиксИмениКолонки+"G17"] = РезультатСПределом;
				Строка[ПрефиксИмениКолонки+"G19"] = Налог;
				Строка[ПрефиксИмениКолонки+"G20"] = НалогФОТ;
			Иначе
				Строка[ПрефиксИмениКолонки+"G16"] = Выборка.Результат;
				Строка[ПрефиксИмениКолонки+"G17"] = Выборка.РезультатСПределом - Выборка.ДоначислениеФОТ;
				Строка[ПрефиксИмениКолонки+"G19"] = Выборка.Налог;
				Если Результат = 0 И РезультатОтпускные <> 0 Тогда 
					//Это отпускные за следующий период
					Строка[ПрефиксИмениКолонки+"G20"] = НалогФОТОтпускные;
				Иначе	
					Строка[ПрефиксИмениКолонки+"G20"] = НалогФОТ;
				КонецЕсли;	
			КонецЕсли;	
			
			Строка[ПрефиксИмениКолонки+"G24"]  	= Выборка.ПринятНаНовоеРабочееМесто;
			Строка[ПрефиксИмениКолонки+"G23"] 	= Выборка.СокращенноеРабочееВремя;
			
			
			Если НЕ СписокРаботниковСоСпецСтажем.НайтиПоЗначению(Выборка.Сотрудник.ФизическоеЛицо) = Неопределено Тогда
				Строка[ПрефиксИмениКолонки+"G22"] = 1;
			КонецЕсли;
		
			Строка[ПрефиксИмениКолонки+"G25"] = 0;  //признак
				
			//Если в отчетном периоде кроме ЗП есть отпускные - показываем их отдельной строкой с типом 10
			Если Результат <> 0 И РезультатОтпускные <> 0 И Выборка.Период = НачалоМесяца(КонецВЦикле) Тогда
				Строка = СтруктураГруппы.Добавить();
		        Номер = Номер + 1;
				
				Строка[ПрефиксИмениКолонки+"G5"]   = Выборка.Гражданин;
				Строка[ПрефиксИмениКолонки+"G6"]   = КодПолаФизическогоЛица(Выборка.ФизЛицо.Пол);
				Строка[ПрефиксИмениКолонки+"G7S"]  = ОбработатьДРФО(Выборка.КодПоДРФО);
				Строка[ПрефиксИмениКолонки+"G8"]   = Выборка.КодКатегорииЗЛ;
				Строка[ПрефиксИмениКолонки+"G9"]   = 10;
				Строка[ПрефиксИмениКолонки+"G101"] = Месяц(Выборка.Период);
				Строка[ПрефиксИмениКолонки+"G102"] = Год(Выборка.Период);
				
				Строка[ПрефиксИмениКолонки+"G111S"] = Выборка.ФизЛицоФио;
				Строка[ПрефиксИмениКолонки+"G112S"] = Выборка.ФизЛицоИмя;
				Строка[ПрефиксИмениКолонки+"G113S"] = Выборка.ФизЛицоОтчество;
				
				Строка[ПрефиксИмениКолонки+"G12"] = 0;
				Строка[ПрефиксИмениКолонки+"G13"] = 0;
				Строка[ПрефиксИмениКолонки+"G14"] = 0;
				Строка[ПрефиксИмениКолонки+"G15"] = 0;
				
				Строка[ПрефиксИмениКолонки+"G16"] = РезультатОтпускные;
				Строка[ПрефиксИмениКолонки+"G17"] = РезультатСПределомОтпускные;
				
				Строка[ПрефиксИмениКолонки+"G19"] = НалогОтпускные;
				Строка[ПрефиксИмениКолонки+"G20"] = НалогФОТОтпускные;
				
				Строка[ПрефиксИмениКолонки+"G21"] = Выборка.ПризнакНаличияТрудовойКнижки;
				Строка[ПрефиксИмениКолонки+"G24"] = Выборка.ПринятНаНовоеРабочееМесто;
				
				
				
				Если НЕ СписокРаботниковСоСпецСтажем.НайтиПоЗначению(Выборка.Сотрудник.ФизическоеЛицо) = Неопределено Тогда
					Строка[ПрефиксИмениКолонки+"G22"] = 1;
				КонецЕсли;
				Строка[ПрефиксИмениКолонки+"G23"] = Выборка.СокращенноеРабочееВремя;
				Строка[ПрефиксИмениКолонки+"G25"] = 0;  //признак
		
			КонецЕсли;	
			
			//Если есть доначисления - показываем их отдельной строкой с типом 13
			Если ДоначислениеФОТ <> 0 ИЛИ ДоначислениеНалогФОТ <> 0 Тогда
				Если Строка[ПрефиксИмениКолонки+"G16"] = 0 И Строка[ПрефиксИмениКолонки+"G17"] = 0 И Строка[ПрефиксИмениКолонки+"G19"] = 0 
					И Выборка.ОтработанныеДни = 0 И Выборка.ДнейБезСохранения = 0 Тогда
					//В этой строке ничего нет, используем ту же строку
					Номер = Номер - 1;
				Иначе
					Строка = СтруктураГруппы.Добавить();
				КонецЕсли;	
		        Номер = Номер + 1;
				
				Строка[ПрефиксИмениКолонки+"G5"]  = Выборка.Гражданин;
				Строка[ПрефиксИмениКолонки+"G6"]  = КодПолаФизическогоЛица(Выборка.ФизЛицо.Пол);
				Строка[ПрефиксИмениКолонки+"G7S"] = ОбработатьДРФО(Выборка.КодПоДРФО);
				
				Строка[ПрефиксИмениКолонки+"G8"]   = Выборка.КодКатегорииЗЛ;
				Строка[ПрефиксИмениКолонки+"G9"]   = 13;
				Строка[ПрефиксИмениКолонки+"G101"] = Месяц(Выборка.Период);
				Строка[ПрефиксИмениКолонки+"G102"] = Год(Выборка.Период);
				
				Строка[ПрефиксИмениКолонки+"G111S"] = Выборка.ФизЛицоФио;
				Строка[ПрефиксИмениКолонки+"G112S"] = Выборка.ФизЛицоИмя;
				Строка[ПрефиксИмениКолонки+"G113S"] = Выборка.ФизЛицоОтчество;
				
				Строка[ПрефиксИмениКолонки+"G12"] = 0;
				Строка[ПрефиксИмениКолонки+"G13"] = 0;
				Строка[ПрефиксИмениКолонки+"G14"] = 0;
				Строка[ПрефиксИмениКолонки+"G15"] = 0;
				
				Строка[ПрефиксИмениКолонки+"G16"] = 0;
				Строка[ПрефиксИмениКолонки+"G17"] = 0;
				
				Строка[ПрефиксИмениКолонки+"G18"] = ДоначислениеФОТ;
				Строка[ПрефиксИмениКолонки+"G19"] = 0;
				Строка[ПрефиксИмениКолонки+"G20"] = ДоначислениеНалогФОТ;
				
				Строка[ПрефиксИмениКолонки+"G21"] = Выборка.ПризнакНаличияТрудовойКнижки;
				Строка[ПрефиксИмениКолонки+"G24"] = Выборка.ПринятНаНовоеРабочееМесто;
				Строка[ПрефиксИмениКолонки+"G23"] = Выборка.СокращенноеРабочееВремя;
				Если НЕ СписокРаботниковСоСпецСтажем.НайтиПоЗначению(Выборка.Сотрудник.ФизическоеЛицо) = Неопределено Тогда
					Строка[ПрефиксИмениКолонки+"G22"] = 1;
				КонецЕсли;
				Строка[ПрефиксИмениКолонки+"G25"] = 0;  //признак

			КонецЕсли;	
		
			Номер = Номер + 1;
			
		КонецЦикла;
		ЗначениеВРеквизитФормы(СтруктураГруппы, ИмяГруппы);
		
		Если Не СтруктураРеквизитовФормы.НазначениеПенсии И Не СтруктураРеквизитовФормы.НазначениеСоцВыплат Тогда

			ТаблицаКоличестваЗастрахованныхЛиц = РезультатЗапросаТаблица6.Выгрузить().Скопировать();
			ТаблицаКоличестваЗастрахованныхЛиц.Свернуть("ФизЛицо, ФизЛицоПол", "");
		
			СообщениеВыводилось = Ложь;
			Для каждого ФизЛицо Из ТаблицаКоличестваЗастрахованныхЛиц Цикл
				Если НЕ ЗначениеЗаполнено(ФизЛицо.ФизЛицоПол) Тогда
					Если СообщениеВыводилось = Ложь Тогда
						СообщениеВыводилось = Истина;
						Сообщить(НСтр("ru = 'В карточках следующих физ.лиц не указан их пол. Заполнение показателя в шапке Таблицы 1 ""Кількість застрахованих осіб у звітному періоді, у тому числі"" будет не корректным:'; uk = 'У картках наступних фіз. осіб не зазначена їхня стать. Заповнення показника у шапці Таблиці 1 ""Кількість застрахованих осіб у звітному періоді, у тому числі"" буде не коректним:'"));
					КонецЕсли;
					Сообщить(Символы.Таб + ФизЛицо.ФизЛицо);
				КонецЕсли;
			КонецЦикла;
		
			СтруктураДанныхДекларация["R105G"+Строка(СчетчикМесяцев+3)] = ТаблицаКоличестваЗастрахованныхЛиц.Количество();
			
			НайденныеСтроки = ТаблицаКоличестваЗастрахованныхЛиц.НайтиСтроки(Новый Структура("ФизЛицоПол",Перечисления.ПолФизическогоЛица.Женский));
			СтруктураДанныхДекларация["R108G"+Строка(СчетчикМесяцев+3)] = НайденныеСтроки.Количество();	
			
			НайденныеСтроки = ТаблицаКоличестваЗастрахованныхЛиц.НайтиСтроки(Новый Структура("ФизЛицоПол",Перечисления.ПолФизическогоЛица.Мужской));
			СтруктураДанныхДекларация["R109G"+Строка(СчетчикМесяцев+3)] = НайденныеСтроки.Количество();	
		КонецЕсли;	
	КонецЦикла;
	ЗначениеВРеквизитФормы(СтруктураГруппы, ИмяГруппы);
		
	//////////////////////////////////////////////////////////////////	
	
	// ТАБЛИЦА 5
	ДанныеФормы 	= ЭтаФорма[СтруктураРеквизитовФормы.мИдГруппы5];
	СтруктураГруппы = ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		
	СтруктураРеквизитовФормы.мИдГруппы5 = "T5T1R";

	ТаблицаПриемовУвольнений = Новый ТаблицаЗначений();
	ТаблицаПриемовУвольнений.Колонки.Добавить("ФизЛицо",        Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПриемовУвольнений.Колонки.Добавить("ДатаПриема",     Новый ОписаниеТипов("Дата"));
	ТаблицаПриемовУвольнений.Колонки.Добавить("ДатаУвольнения", Новый ОписаниеТипов("Дата"));
	
	Если СтруктураРеквизитовФормы.НазначениеПенсии Или СтруктураРеквизитовФормы.НазначениеСоцВыплат Тогда
		ПараметрыПолученияСотрудников.СписокФизическихЛиц = СтруктураРеквизитовФормы.Сотрудники;
	КонецЕсли;

	// заполним по работниками
	Работавшие = ПолучитьСписокЛиц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Номер = 0;
	Для Каждого стр ИЗ Работавшие Цикл
		
		Если стр.ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.Перемещение И НачалоКвартала(стр.ДатаПриема) <> НачалоКвартала(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета) Тогда
			//Если перевод уже в следующем квартале, то основную строку не выводим
			Продолжить;
		КонецЕсли;                                                                                                                  
				
		Если Номер > 0 Тогда
			Строка = СтруктураГруппы.Добавить();
		Иначе
			Строка = СтруктураГруппы[0];
		КонецЕсли;
		
		ДатаНач = Неопределено;
		ДатаКон = Неопределено;
		
		Если ЗначениеЗаполнено(Стр.ДатаПриема) Тогда
			ДатаНач = Стр.ДатаПриема;
		КонецЕсли;
		Если ЗначениеЗаполнено(Стр.ДатаУвольнения) Тогда
			ДатаКон = Стр.ДатаУвольнения - 1;
		КонецЕсли;
		
		СтрокаТаблицыПриемовУвольнений = ТаблицаПриемовУвольнений.Добавить();
		СтрокаТаблицыПриемовУвольнений.ФизЛицо        = стр.ФизЛицо;
		СтрокаТаблицыПриемовУвольнений.ДатаПриема     = ДатаНач;
		СтрокаТаблицыПриемовУвольнений.ДатаУвольнения = ДатаКон;

		Строка["T5T1RXXXXG5"]  = Стр.Гражданин;
		//Строка["T5T1RXXXXG6"]  = Стр.ГПХПоОснМестуРаботы;
		Строка["T5T1RXXXXG7"]  = Стр.Категория;
		Строка["T5T1RXXXXG8S"] = ОбработатьДРФО(Стр.КодПоДРФО);
		
		Строка["T5T1RXXXXG91S"] = Стр.Фамилия;
		Строка["T5T1RXXXXG92S"] = Стр.Имя;
		Строка["T5T1RXXXXG93S"] = Стр.Отчество;
		Если ЗначениеЗаполнено(Стр.ДатаПриема) Тогда
			Строка["T5T1RXXXXG101D"] = НачалоДня(стр.ДатаПриема);
			Если ЗначениеЗаполнено(Стр.ДатаСозданияРабочегоМеста) Тогда
				Строка["T5T1RXXXXG18D"] = Стр.ДатаСозданияРабочегоМеста;;
			КонецЕсли;		
		КонецЕсли;	
		Если ЗначениеЗаполнено(стр.ДатаУвольнения) Тогда
			Строка["T5T1RXXXXG102D"] = стр.ДатаУвольнения;
			Строка["T5T1RXXXXG17S"] = стр.СтатьяКЗОТ;
		КонецЕсли;

		ВидЗанятостиСотрудника = стр.Сотрудник.ИНАГРО_ВидЗанятости;
		Если ВидЗанятостиСотрудника = Перечисления.ВидыЗанятости.ВнутреннееСовместительство Тогда 
			ВидЗанятости = 1;
		Иначе
			ВидЗанятости = 0;
		КонецЕсли;
		
		Строка["T5T1RXXXXG11"]  = ВидЗанятости;
		Если стр.ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.Перемещение Тогда 
			Строка["T5T1RXXXXG12"]  = 1;
		КонецЕсли;
		Строка["T5T1RXXXXG13S"] = СокрЛП(Стр.ДолжностьНаименованиеПоКП);
		Строка["T5T1RXXXXG14S"] = СокрЛП(Стр.ДолжностьКодКП);
		Строка["T5T1RXXXXG15S"] = СокрЛП(Стр.Должность);
		Если ЗначениеЗаполнено(стр.Основание) И ЗначениеЗаполнено(стр.ОснованиеДата) Тогда
			Строка["T5T1RXXXXG16S"] = ОбработатьПредставлениеОснования(стр.Основание, стр.ОснованиеДата);
		КонецЕсли;	
		
		Номер = Номер + 1;
		
	КонецЦикла;


	// добавим информацию по ГПХ
	ДоговораГПХ = ПолучитьСписокДоговоровГПХ(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	Для Каждого стр ИЗ ДоговораГПХ Цикл
		
		Если Номер > 0 Тогда
			Строка = СтруктураГруппы.Добавить();
		Иначе
			Строка = СтруктураГруппы[0];
		КонецЕсли;
		
		Строка["T5T1RXXXXG5"]  = Стр.Гражданин;
		Строка["T5T1RXXXXG6"]  = 1;
		Строка["T5T1RXXXXG7"]  = 3;
		Строка["T5T1RXXXXG8S"] = ОбработатьДРФО(Стр.КодПоДРФО);
		
		Строка["T5T1RXXXXG91S"] = Стр.Фамилия;
		Строка["T5T1RXXXXG92S"] = Стр.Имя;
		Строка["T5T1RXXXXG93S"] = Стр.Отчество;
		
		ВидЗанятостиСотрудника = стр.Сотрудник.ИНАГРО_ВидЗанятости;
		Если ВидЗанятостиСотрудника = Перечисления.ВидыЗанятости.ВнутреннееСовместительство Тогда 
			ВидЗанятости = 1;
		Иначе
			ВидЗанятости = 0;
		КонецЕсли;
		
		Строка["T5T1RXXXXG11"]  = ВидЗанятости;
		
		Если ЗначениеЗаполнено(Стр.ДатаПриема) Тогда
			Строка["T5T1RXXXXG101D"] = стр.ДатаПриема;
			Строка["T5T1RXXXXG16S"] = ОбработатьПредставлениеОснования(стр.Основание, стр.ОснованиеДата);
			Если ЗначениеЗаполнено(Стр.ДатаСозданияРабочегоМеста) Тогда
				Строка["T5T1RXXXXG18D"] = Стр.ДатаСозданияРабочегоМеста;;
			КонецЕсли;		
		КонецЕсли;	
		Если ЗначениеЗаполнено(стр.ДатаУвольнения) Тогда
			Строка["T5T1RXXXXG102D"] = стр.ДатаУвольнения;
			Строка["T5T1RXXXXG16S"] = ОбработатьПредставлениеОснования(стр.Основание, стр.ОснованиеДата);
			Строка["T5T1RXXXXG17S"] = стр.СтатьяКЗОТ;
		КонецЕсли;
		
		Номер = Номер + 1;
				
	КонецЦикла;

	// Добавим информацию об отпусках
	Отпуска = ПолучитьСписокОтпуска(ПолучитьСписокПоУходуДо3());

	Для Каждого стр ИЗ Отпуска Цикл
		
			
		Если Номер > 0 Тогда
			Строка = СтруктураГруппы.Добавить();
		Иначе
			Строка = СтруктураГруппы[0];
		КонецЕсли;
		
		Строка["T5T1RXXXXG5"]  = Стр.Гражданин;
		Строка["T5T1RXXXXG7"]  = 6;
		Строка["T5T1RXXXXG8S"] = ОбработатьДРФО(Стр.КодПоДРФО);
		
		Строка["T5T1RXXXXG91S"] = Стр.Фамилия;
		Строка["T5T1RXXXXG92S"] = Стр.Имя;
		Строка["T5T1RXXXXG93S"] = Стр.Отчество;
		
		ВидЗанятостиСотрудника = стр.Сотрудник.ИНАГРО_ВидЗанятости;
		Если ВидЗанятостиСотрудника = Перечисления.ВидыЗанятости.ВнутреннееСовместительство Тогда 
			ВидЗанятости = 1;
		Иначе
			ВидЗанятости = 0;
		КонецЕсли;
		
		Строка["T5T1RXXXXG11"]  = ВидЗанятости;
		
		Если ЗначениеЗаполнено(Стр.Начало) Тогда
			Строка["T5T1RXXXXG101D"] = стр.Начало;
			Если ЗначениеЗаполнено(стр.Основание) Тогда
				Строка["T5T1RXXXXG16S"] = ОбработатьПредставлениеОснования(стр.Основание, стр.ОснованиеДата);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(стр.Конец) Тогда
			Строка["T5T1RXXXXG102D"] = стр.Конец;
		КонецЕсли;
		
		Номер = Номер + 1;
		
	КонецЦикла;
	
	Отпуска = ПолучитьСписокОтпуска(ПолучитьСписокПоУходуДо6());
	Для Каждого стр ИЗ Отпуска Цикл
		
		Если Номер > 0 Тогда
			Строка = СтруктураГруппы.Добавить();
		Иначе
			Строка = СтруктураГруппы[0];
		КонецЕсли;
		
		Строка["T5T1RXXXXG5"]  = Стр.Гражданин;
		Строка["T5T1RXXXXG7"]  = 4;
		Строка["T5T1RXXXXG8S"] = ОбработатьДРФО(Стр.КодПоДРФО);
		
		Строка["T5T1RXXXXG91S"] = Стр.Фамилия;
		Строка["T5T1RXXXXG92S"] = Стр.Имя;
		Строка["T5T1RXXXXG93S"] = Стр.Отчество;

		ВидЗанятостиСотрудника = стр.Сотрудник.ИНАГРО_ВидЗанятости;
		Если ВидЗанятостиСотрудника = Перечисления.ВидыЗанятости.ВнутреннееСовместительство Тогда 
			ВидЗанятости = 1;
		Иначе
			ВидЗанятости = 0;
		КонецЕсли;
		
		Строка["T5T1RXXXXG11"]  = ВидЗанятости;
		
		Если ЗначениеЗаполнено(Стр.Начало) Тогда
			Строка["T5T1RXXXXG101D"] = стр.Начало;
			Если ЗначениеЗаполнено(стр.Основание) Тогда
				Строка["T5T1RXXXXG16S"] = ОбработатьПредставлениеОснования(стр.Основание, стр.ОснованиеДата);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(стр.Конец) Тогда
			Строка["T5T1RXXXXG102D"] = стр.Конец;
		КонецЕсли;
		
		Номер = Номер + 1;
		
	КонецЦикла;

	Отпуска = ПолучитьСписокОтпуска(ПолучитьСписокДекретные());
	Для Каждого стр ИЗ Отпуска Цикл
		
		Если Номер > 0 Тогда
			Строка = СтруктураГруппы.Добавить();
		Иначе
			Строка = СтруктураГруппы[0];
		КонецЕсли;
		
		Строка["T5T1RXXXXG5"]  = Стр.Гражданин;
		Строка["T5T1RXXXXG7"]  = 5;
		Строка["T5T1RXXXXG8S"] = ОбработатьДРФО(Стр.КодПоДРФО);
		
		Строка["T5T1RXXXXG91S"] = Стр.Фамилия;
		Строка["T5T1RXXXXG92S"] = Стр.Имя;
		Строка["T5T1RXXXXG93S"] = Стр.Отчество;
		
		ВидЗанятостиСотрудника = стр.Сотрудник.ИНАГРО_ВидЗанятости;
		Если ВидЗанятостиСотрудника = Перечисления.ВидыЗанятости.ВнутреннееСовместительство Тогда 
			ВидЗанятости = 1;
		Иначе
			ВидЗанятости = 0;
		КонецЕсли;
		
		Строка["T5T1RXXXXG11"]  = ВидЗанятости;
		
		Если ЗначениеЗаполнено(Стр.Начало) Тогда
			Строка["T5T1RXXXXG101D"] = стр.Начало;
			Если ЗначениеЗаполнено(стр.Основание) Тогда
				Строка["T5T1RXXXXG16S"] = ОбработатьПредставлениеОснования(стр.Основание, стр.ОснованиеДата);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(стр.Конец) Тогда
			Строка["T5T1RXXXXG102D"] = стр.Конец;
		КонецЕсли;
		
		Номер = Номер + 1;
				
	КонецЦикла;

	ЗначениеВРеквизитФормы(СтруктураГруппы, СтруктураРеквизитовФормы.мИдГруппы5);
	
	Заполнить4ДФ(ПараметрыЗаполненияЗвит1С, ТаблицаКадровыеДанныеСотрудников);
	
КонецПроцедуры

&НаСервере
Процедура Заполнить4ДФ(ПараметрыЗаполненияЗвит1С, ТаблицаКадровыеДанныеСотрудников)
	перем ИсходноеКоличествоСтрокГруппы;
	
	Если СтруктураРеквизитовФормы.НазначениеПенсии Или СтруктураРеквизитовФормы.НазначениеСоцВыплат Тогда
		Возврат
	КонецЕсли;
	
	КолМесяцевВПериоде = 3;
	Если СтруктураРеквизитовФормы.мПериодичность = ЭтаФорма.ПеречислениеПериодичностьМесяц Тогда
		КолМесяцевВПериоде = 1;
	КонецЕсли;
	
	НомерМесяца = 0;
	Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.НомерМесяца) Тогда 
		КолМесяцевВПериоде = 1;
		НомерМесяца = СтруктураРеквизитовФормы.НомерМесяца-1;
	КонецЕсли;	
	
	Для СчетчикМесяцев = 0 по КолМесяцевВПериоде-1 Цикл 
			
		НачалоВЦикле = ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета, СчетчикМесяцев+НомерМесяца);
		КонецВЦикле = КонецМесяца(НачалоВЦикле);

		ИмяГруппы = "T4"+Строка(СчетчикМесяцев+1)+"T1R";
		ДанныеФормы 	= ЭтаФорма[ИмяГруппы];
		СтруктураГруппы = ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		
		мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

		УсловиеНаПодразделение = "";
		Если Не РегламентированнаяОтчетностьПереопределяемый.ИДПодсистемыЗарплаты() = "ЕРПЗИК" Тогда
			Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.Подразделение) Тогда
				
				Если ПолучитьФункциональнуюОпцию("ИспользоватьКадровыйУчет") = Истина Тогда

					УсловиеНаПодразделение = "И 
									|(ВЫБОР КОГДА Контрагент ССЫЛКА Справочник.Сотрудники
									|	ТОГДА
									|		Контрагент В (ВЫБРАТЬ
									|						РаботникиОрганизацийСрезПоследних.Сотрудник
									|					 ИЗ
									|						РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаКонцаКвартала, Организация = &Организация) КАК РаботникиОрганизацийСрезПоследних
									|					 ГДЕ
									|						(РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации В ИЕРАРХИИ (&Подразделение)
									|						ИЛИ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации = &Подразделение))
									|	ИНАЧЕ НЕ &НеВключатьЧПников
									|КОНЕЦ)";
					
					УсловиеНаПодразделениеСотр = "И 
										|(ВЫБОР КОГДА Сотрудник ССЫЛКА Справочник.Сотрудники
										|	ТОГДА
										|		Сотрудник В (ВЫБРАТЬ
										|						РаботникиОрганизацийСрезПоследних.Сотрудник
										|					 ИЗ
										|						РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаКонцаКвартала, Организация = &Организация) КАК РаботникиОрганизацийСрезПоследних
										|					 ГДЕ
										|						(РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации В ИЕРАРХИИ (&Подразделение)
										|						ИЛИ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации = &Подразделение))
										|	ИНАЧЕ НЕ &НеВключатьЧПников
										|КОНЕЦ)";
				Иначе
					
					УсловиеНаПодразделение	= "И 
											   |(ВЫБОР КОГДА Контрагент ССЫЛКА Справочник.ФизическиеЛица
											   |	ТОГДА
											   |		Контрагент В (ВЫБРАТЬ
											   |						РаботникиОрганизацийСрезПоследних.ФизическоеЛицо
					                      	   |					 ИЗ
					                      	   |						РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК РаботникиОрганизацийСрезПоследних
					                      	   |					 ГДЕ
											   |						РаботникиОрганизацийСрезПоследних.ГоловнаяОрганизация = &Организация
											   |						И (    РаботникиОрганизацийСрезПоследних.ТекущееПодразделение В ИЕРАРХИИ (&Подразделение)
											   |						   ИЛИ РаботникиОрганизацийСрезПоследних.ТекущееПодразделение = &Подразделение))
											   |	ИНАЧЕ НЕ &НеВключатьЧПников
											   |КОНЕЦ)";
					
				КонецЕсли;									   
											   
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(СтруктураРеквизитовФормы.ОбособленноеПодразделение) Тогда
					УсловиеНаПодразделение	= "И 
											  |ОбособленноеПодразделение  В ИЕРАРХИИ (&ОбособленноеПодразделение)";	
		    КонецЕсли
		КонецЕсли;

		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
		Если Не РегламентированнаяОтчетностьПереопределяемый.ИДПодсистемыЗарплаты() = "ЕРПЗИК" Тогда
			Запрос.УстановитьПараметр("Подразделение", СтруктураРеквизитовФормы.Подразделение)
		Иначе	
			Запрос.УстановитьПараметр("ОбособленноеПодразделение", СтруктураРеквизитовФормы.ОбособленноеПодразделение)
		КонецЕсли;	
		Запрос.УстановитьПараметр("НеВключатьЧПников", СтруктураРеквизитовФормы.НеВключатьЧПников);
		Запрос.УстановитьПараметр("ДатаКонцаКвартала", КонецВЦикле);
		Запрос.УстановитьПараметр("ДатаНач", НачалоВЦикле);
		Запрос.УстановитьПараметр("ДатаКон", КонецВЦикле);
		Запрос.УстановитьПараметр("ПрошлыйМесяц", ДобавитьМесяц(НачалоВЦикле,-1));
		
		Запрос.Текст = "ВЫБРАТЬ
		             |	МИНИМУМ(ВидыДоходовНДФЛ.Код) КодНДФЛ,
		             |	ВидыДоходовНДФЛ.ОблагаетсяВоеннымСбором2021.Код КАК КодВС
					 |ПОМЕСТИТЬ ВТСоответствиеВС
					 |ИЗ
		             |	Справочник.ВидыДоходовНДФЛ КАК ВидыДоходовНДФЛ
					 |ГДЕ ВидыДоходовНДФЛ.ОблагаетсяВоеннымСбором2021 <> ЗНАЧЕНИЕ(Справочник.ВидыДоходовНДФЛ.ПустаяСсылка)
					 |СГРУППИРОВАТЬ ПО
					 |	ВидыДоходовНДФЛ.ОблагаетсяВоеннымСбором2021.Код";
		Запрос.Выполнить();
		
		// получим данные по начислениям/перечислениям в разрезе налоговых периодов, но без учета льгот
		// Далее мы определеям по последней записи в регистре (по сотруднику в разрезе налоговых периодов) какая же льгота применялась на самом деле
		// далее добавим в таблицу по начислениям/перечислениям информацию по применявшимся льготам
		// далее свернем таблицу в разрезе льгот (так как налоговый период нам в отчете не нужен).
		
		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент ССЫЛКА Справочник.Сотрудники ТОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент.ФизическоеЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Контрагент КОНЕЦ КАК Контрагент,
			|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.Код КАК ДоходНДФЛ,
			|	НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОбороты.НалоговыйПериод, МЕСЯЦ) КАК НалоговыйПериод,
			|	ВЫБОР КОГДА ДоходНДФЛ.ВидСтавкиРезидента = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор) ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ КАК ЭтоВоенныйСбор,
			|	СУММА(ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА ВзаиморасчетыПоНДФЛОбороты.Доход ИНАЧЕ 0 КОНЕЦ) КАК ДоходПриход,
			|	СУММА(ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА ВзаиморасчетыПоНДФЛОбороты.Доход ИНАЧЕ 0 КОНЕЦ) КАК ДоходРасход,
			|	СУММА(ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА ВзаиморасчетыПоНДФЛОбороты.Налог ИНАЧЕ 0 КОНЕЦ) КАК НалогПриход,
			|	СУММА(ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА ВзаиморасчетыПоНДФЛОбороты.Налог ИНАЧЕ 0 КОНЕЦ) КАК НалогРасход
			|ПОМЕСТИТЬ ТаблицаНДФЛБезЛьготПредварительная
			|ИЗ
			|	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛОбороты
			|	ГДЕ 
			|		 Период МЕЖДУ &ДатаНач И &ДатаКон
			|  	   И Организация = &Организация
			|	   " + УсловиеНаПодразделение + "
			|
			|   СГРУППИРОВАТЬ ПО
			|		ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент ССЫЛКА Справочник.Сотрудники ТОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент.ФизическоеЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Контрагент КОНЕЦ,
			|		ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.Код,
			|		ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ,
			|		ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.ОблагаетсяВоеннымСбором2021,
			|		НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОбороты.НалоговыйПериод, МЕСЯЦ),
			|		ВЫБОР КОГДА ДоходНДФЛ.ВидСтавкиРезидента = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор) ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ 
			|";
		
			Если НЕ СтруктураРеквизитовФормы.ВыплатыЗПНеРегулярны Тогда
			
				ТекстЗапроса = ТекстЗапроса + "
				|
				|ОБЪЕДИНИТЬ ВСЕ //добавим выплаты дохода вида 01 в следующем месяце за последний месяц квартала
				|
				|ВЫБРАТЬ
				|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент ССЫЛКА Справочник.Сотрудники ТОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент.ФизическоеЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Контрагент КОНЕЦ КАК Контрагент,
				|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.Код КАК ДоходНДФЛ,
				|	НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОбороты.НалоговыйПериод, МЕСЯЦ),
				|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.ВидСтавкиРезидента = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор) ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ,
				|	0,
				|	СУММА(ВзаиморасчетыПоНДФЛОбороты.Доход),
				|	0,
				|	СУММА(ВзаиморасчетыПоНДФЛОбороты.Налог)
				|ИЗ
				|	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛОбороты
				|	ГДЕ 
				|		 Период МЕЖДУ &ДатаКонМесяца И &ДатаВыплатыКон
				|  	   И Организация = &Организация
				|      И ДоходНДФЛ В (&ЗП) 
				|	   И НАЧАЛОПЕРИОДА(ПериодВзаиморасчетов, МЕСЯЦ) = &ДатаНач
				|      И ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) "+УсловиеНаПодразделение+"
				|СГРУППИРОВАТЬ ПО 
				|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент ССЫЛКА Справочник.Сотрудники ТОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент.ФизическоеЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Контрагент КОНЕЦ,
				|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.Код,
				|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ,
				|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.ОблагаетсяВоеннымСбором2021,
				|	НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОбороты.НалоговыйПериод, МЕСЯЦ),
				|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.ВидСтавкиРезидента = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор) ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ
				|
				|ОБЪЕДИНИТЬ ВСЕ //удалим выплаты дохода вида 01 в первом месяце квартала за последний месяц прошлого квартала
				|
				|ВЫБРАТЬ
				|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент ССЫЛКА Справочник.Сотрудники ТОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент.ФизическоеЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Контрагент КОНЕЦ КАК Контрагент,
				|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.Код КАК ДоходНДФЛ,
				|	НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОбороты.НалоговыйПериод, МЕСЯЦ),
				|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.ВидСтавкиРезидента = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор) ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ,
				|	0,
				|	-СУММА(ВзаиморасчетыПоНДФЛОбороты.Доход),
				|	0,
				|	-СУММА(ВзаиморасчетыПоНДФЛОбороты.Налог)
				|ИЗ
				|	РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛОбороты
				|	ГДЕ 
				|		 Период МЕЖДУ &ДатаНачМесяца И &ДатаВыплатыНач
				|  	   И Организация = &Организация
				|      И ДоходНДФЛ В (&ЗП) 
				|	   И НАЧАЛОПЕРИОДА(ПериодВзаиморасчетов, МЕСЯЦ) = &ПрошлыйМесяц
				|      И ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) "+УсловиеНаПодразделение+"
				|СГРУППИРОВАТЬ ПО 
				|	ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент ССЫЛКА Справочник.Сотрудники ТОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент.ФизическоеЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Контрагент КОНЕЦ,
				|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.Код,
				|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ,
				|	ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.ОблагаетсяВоеннымСбором2021,
				|	НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛОбороты.НалоговыйПериод, МЕСЯЦ),
				|   ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.ВидСтавкиРезидента = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор) ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ
				| 
				|";
				
			КонецЕсли;
			
			Если РегламентированнаяОтчетностьПереопределяемый.ИДПодсистемыЗарплаты() = "ЕРПЗИК" Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"ВЫБОР КОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент ССЫЛКА Справочник.Сотрудники ТОГДА ВзаиморасчетыПоНДФЛОбороты.Контрагент.ФизическоеЛицо ИНАЧЕ ВзаиморасчетыПоНДФЛОбороты.Контрагент КОНЕЦ",
				"ВзаиморасчетыПоНДФЛОбороты.ФизическоеЛицо");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"РегистрНакопления.ВзаиморасчетыПоНДФЛ","РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ");	
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.ВидСтавкиРезидента = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор)",
				"ВзаиморасчетыПоНДФЛОбороты.ГруппаУчетаУдержаний = ЗНАЧЕНИЕ(Справочник.ГруппыУчетаНачисленийИУдержаний.ВоенныйСбор)");	
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ДоходНДФЛ.ВидСтавкиРезидента = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор)",
				"ВзаиморасчетыПоНДФЛОбороты.ГруппаУчетаУдержаний = ЗНАЧЕНИЕ(Справочник.ГруппыУчетаНачисленийИУдержаний.ВоенныйСбор)");	
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ.Код","ВзаиморасчетыПоНДФЛОбороты.КодДохода.Код");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ВзаиморасчетыПоНДФЛОбороты.ДоходНДФЛ","ВзаиморасчетыПоНДФЛОбороты.КодДохода");		
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И ДоходНДФЛ В (&ЗП)", "И КодДохода В (&ЗП)");
			КонецЕсли;
		
			Запрос.УстановитьПараметр("ДатаНачМесяца", НачалоВЦикле);
			Запрос.УстановитьПараметр("ДатаКонМесяца", КонецВЦикле + 1);
			
			Запрос.УстановитьПараметр("ДатаВыплатыНач", КонецДня(НачалоВЦикле+СтруктураРеквизитовФормы.ЧислоВыплатыЗП*86400-1));
			Запрос.УстановитьПараметр("ДатаВыплатыКон", КонецДня(КонецВЦикле+СтруктураРеквизитовФормы.ЧислоВыплатыЗП*86400));
			
			ЗП = Новый Массив();
			Если Не РегламентированнаяОтчетностьПереопределяемый.ИДПодсистемыЗарплаты() = "ЕРПЗИК" Тогда
				ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.Код01);
				ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.Код01ГПХ);
				ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.ВоенныйСбор);
				ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.ВоенныйСбор102);
			Иначе
				ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.Код101);
				ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.Код101ФСС);
				ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.Код102);
				ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.ВоенныйСбор);
				ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.ВоенныйСборФСС);
				ЗП.Добавить(Справочники.ВидыДоходовНДФЛ.ВоенныйСбор102);
			КонецЕсли;	
			Запрос.УстановитьПараметр("ЗП", ЗП);
		
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
			
			ТекстЗапроса = "ВЫБРАТЬ
			|	ТаблицаНДФЛБезЛьгот.Контрагент КАК Контрагент,
			|   ВЫБОР
			|	 КОГДА НЕ ТаблицаНДФЛБезЛьгот.ЭтоВоенныйСбор
			|	  ТОГДА ТаблицаНДФЛБезЛьгот.ДоходНДФЛ
			|     ИНАЧЕ ЕСТЬNULL(СоответствиеВС.КодНДФЛ,""101"")
			|   КОНЕЦ КАК ДоходНДФЛ,
			|	ТаблицаНДФЛБезЛьгот.НалоговыйПериод КАК НалоговыйПериод,
			|	ВЫБОР
			|	 КОГДА ТаблицаНДФЛБезЛьгот.ЭтоВоенныйСбор
			|	  ТОГДА 0
			|	  ИНАЧЕ ТаблицаНДФЛБезЛьгот.ДоходПриход
			|	КОНЕЦ КАК ДоходПриход,
			|	ВЫБОР
			|	 КОГДА ТаблицаНДФЛБезЛьгот.ЭтоВоенныйСбор
			|	  ТОГДА 0
			|	  ИНАЧЕ ТаблицаНДФЛБезЛьгот.ДоходРасход
			|	КОНЕЦ КАК ДоходРасход,
			|	ВЫБОР
			|	 КОГДА ТаблицаНДФЛБезЛьгот.ЭтоВоенныйСбор
			|	  ТОГДА 0
			|	  ИНАЧЕ ТаблицаНДФЛБезЛьгот.НалогПриход
			|	КОНЕЦ КАК НалогПриход,
			|	ВЫБОР
			|	 КОГДА ТаблицаНДФЛБезЛьгот.ЭтоВоенныйСбор
			|	  ТОГДА 0
			|	  ИНАЧЕ ТаблицаНДФЛБезЛьгот.НалогРасход
			|	КОНЕЦ КАК НалогРасход,
			|	ВЫБОР
			|	 КОГДА НЕ ТаблицаНДФЛБезЛьгот.ЭтоВоенныйСбор
			|	  ТОГДА 0
			|	  ИНАЧЕ ТаблицаНДФЛБезЛьгот.НалогРасход
			|	КОНЕЦ КАК ВСРасход,
			|	ВЫБОР
			|	 КОГДА НЕ ТаблицаНДФЛБезЛьгот.ЭтоВоенныйСбор
			|	  ТОГДА 0
			|	  ИНАЧЕ ТаблицаНДФЛБезЛьгот.НалогПриход
			|	КОНЕЦ КАК ВСПриход
			|ПОМЕСТИТЬ ТаблицаНДФЛВСБезЛьгот
			|ИЗ
			|	ТаблицаНДФЛБезЛьготПредварительная КАК ТаблицаНДФЛБезЛьгот
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеВС КАК СоответствиеВС
			|		ПО ТаблицаНДФЛБезЛьгот.ДоходНДФЛ = СоответствиеВС.КодВС
			|;
			|
			|ВЫБРАТЬ
			|	ТаблицаНДФЛБезЛьгот.Контрагент КАК Контрагент,
			|   ТаблицаНДФЛБезЛьгот.ДоходНДФЛ КАК ДоходНДФЛ,
			|	ТаблицаНДФЛБезЛьгот.НалоговыйПериод КАК НалоговыйПериод,
			|	СУММА(ТаблицаНДФЛБезЛьгот.ДоходПриход) КАК ДоходПриход,
			|	СУММА(ТаблицаНДФЛБезЛьгот.ДоходРасход) КАК ДоходРасход,
			|	СУММА(ТаблицаНДФЛБезЛьгот.НалогПриход) КАК НалогПриход,
			|	СУММА(ТаблицаНДФЛБезЛьгот.НалогРасход) КАК НалогРасход,
			|	СУММА(ТаблицаНДФЛБезЛьгот.ВСРасход) КАК ВСРасход,
			|	СУММА(ТаблицаНДФЛБезЛьгот.ВСПриход) КАК ВСПриход
			|ПОМЕСТИТЬ ТаблицаНДФЛБезЛьгот
			|ИЗ
			|	ТаблицаНДФЛВСБезЛьгот КАК ТаблицаНДФЛБезЛьгот
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаНДФЛБезЛьгот.Контрагент,
			|   ТаблицаНДФЛБезЛьгот.ДоходНДФЛ,
			|	ТаблицаНДФЛБезЛьгот.НалоговыйПериод
			|";
			
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
		
			// получим информацию по льготам
			Если Не РегламентированнаяОтчетностьПереопределяемый.ИДПодсистемыЗарплаты() = "ЕРПЗИК" Тогда
				Запрос.Текст = "
				|		ВЫБРАТЬ
				|			ВЫБОР КОГДА НДФЛ.Контрагент ССЫЛКА Справочник.Сотрудники ТОГДА НДФЛ.Контрагент.ФизическоеЛицо ИНАЧЕ НДФЛ.Контрагент КОНЕЦ КАК Контрагент,
				|			НДФЛ.НалоговыйПериод КАК НалоговыйПериод,
				|			НДФЛ.ДоходНДФЛ.Код КАК ДоходНДФЛ,
				|			МАКСИМУМ(ЕСТЬNULL(НДФЛЛьготы.Льгота,ЗНАЧЕНИЕ(Справочник.ВидыЛьготПоНДФЛ.ПустаяСсылка))) КАК Льгота,
				|           НДФЛЛьготы.Льгота.ГруппаЛьгот   КАК ГруппаЛьгот,
				|           НДФЛЛьготы.Льгота.Льгота1 		КАК Льгота1,
				|           НДФЛЛьготы.Льгота.Льгота2 		КАК Льгота2
				|		ПОМЕСТИТЬ  ТаблицаЛьгот
				|		ИЗ (
				|			ВЫБРАТЬ
				|				ВзаиморасчетыПоНДФЛ.Контрагент КАК Контрагент,
				|				ВзаиморасчетыПоНДФЛ.ДоходНДФЛ КАК ДоходНДФЛ,
				|			НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛ.НалоговыйПериод, МЕСЯЦ) КАК НалоговыйПериод,
				|				МАКСИМУМ(ВзаиморасчетыПоНДФЛ.Период) КАК ПериодАктуальнойЛьготы
				|			ИЗ РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК ВзаиморасчетыПоНДФЛ
				|			ГДЕ	
				|					ВзаиморасчетыПоНДФЛ.Период <= &ДатаКон
				|				И	ВзаиморасчетыПоНДФЛ.Организация = &Организация
				|				И	ВзаиморасчетыПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
				
				//ИНАГРО
				//|  	   		И   ВзаиморасчетыПоНДФЛ.ДоходНДФЛ.ВидСтавкиРезидента <> ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДФЛ.ВоенныйСбор)
				|				И   ВзаиморасчетыПоНДФЛ.ДоходНДФЛ.ВидСтавкиРезидента <> ВзаиморасчетыПоНДФЛ.ДоходНДФЛ.ВидСтавкиВоенныйСбор
				|			" + УсловиеНаПодразделение + "
				|			СГРУППИРОВАТЬ ПО
				|				ВзаиморасчетыПоНДФЛ.Контрагент,
				|				ВзаиморасчетыПоНДФЛ.ДоходНДФЛ,
				|			НАЧАЛОПЕРИОДА(ВзаиморасчетыПоНДФЛ.НалоговыйПериод, МЕСЯЦ)
				|   		)КАК НДФЛ
				|
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВзаиморасчетыПоНДФЛ КАК НДФЛЛьготы
				|		ПО		
				|			НЕ НДФЛ.НалоговыйПериод ЕСТЬ NULL 
				|			И	НДФЛЛьготы.Период <= &ДатаКон
				|			И	НДФЛЛьготы.Организация = &Организация
				|			И	НДФЛЛьготы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
				|			И	НДФЛЛьготы.Контрагент = НДФЛ.Контрагент
				|			И	НДФЛЛьготы.ДоходНДФЛ = НДФЛ.ДоходНДФЛ
				|		И	НАЧАЛОПЕРИОДА(НДФЛЛьготы.НалоговыйПериод, МЕСЯЦ) = НАЧАЛОПЕРИОДА(НДФЛ.НалоговыйПериод, МЕСЯЦ)
				|			И	НДФЛЛьготы.Период = НДФЛ.ПериодАктуальнойЛьготы
				|		СГРУППИРОВАТЬ ПО 
				|			ВЫБОР КОГДА НДФЛ.Контрагент ССЫЛКА Справочник.Сотрудники ТОГДА НДФЛ.Контрагент.ФизическоеЛицо ИНАЧЕ НДФЛ.Контрагент КОНЕЦ,
				|			НДФЛ.НалоговыйПериод,
				|			НДФЛ.ДоходНДФЛ.Код,
				|           НДФЛЛьготы.Льгота.ГруппаЛьгот,
				|           НДФЛЛьготы.Льгота.Льгота1,
				|           НДФЛЛьготы.Льгота.Льгота2
				|";
					
			Иначе
				Запрос.Текст = "
				|		ВЫБРАТЬ
				|			НДФЛ.Контрагент КАК Контрагент,
				|	        НДФЛ.Контрагент.КодПоДРФО КАК ИННСотрудника,	
				|			НДФЛ.НалоговыйПериод КАК НалоговыйПериод,
				|			НДФЛ.ДоходНДФЛ КАК ДоходНДФЛ,
				|			МАКСИМУМ(ЕСТЬNULL(НДФЛЛьготы.Льгота,ЗНАЧЕНИЕ(Справочник.ВидыЛьготПоНДФЛ.ПустаяСсылка))) КАК Льгота,
				|           НДФЛЛьготы.Льгота.ГруппаЛьгот   КАК ГруппаЛьгот,
				|           НДФЛЛьготы.Льгота.Льгота1 		КАК Льгота1,
				|           НДФЛЛьготы.Льгота.Льгота2 		КАК Льгота2
				|		ПОМЕСТИТЬ  ТаблицаЛьгот
				|		ИЗ (
				|			ВЫБРАТЬ
				|				ИсчисленныйНДФЛ.ФизическоеЛицо КАК Контрагент,
				|				ИсчисленныйНДФЛ.КодДохода.Код КАК ДоходНДФЛ,
				|			    НАЧАЛОПЕРИОДА(ИсчисленныйНДФЛ.НалоговыйПериод, МЕСЯЦ) КАК НалоговыйПериод,
				|				МАКСИМУМ(ИсчисленныйНДФЛ.Период) КАК ПериодАктуальнойЛьготы
				|			ИЗ РегистрНакопления.ИсчисленныйНДФЛ КАК ИсчисленныйНДФЛ
				|			ГДЕ	
				|					ИсчисленныйНДФЛ.Период <= &ДатаКон
				|					И	ИсчисленныйНДФЛ.Организация = &Организация
				|			СГРУППИРОВАТЬ ПО
				|				ИсчисленныйНДФЛ.ФизическоеЛицо,
				|				ИсчисленныйНДФЛ.КодДохода.Код,
				|				НАЧАЛОПЕРИОДА(ИсчисленныйНДФЛ.НалоговыйПериод, МЕСЯЦ)
				|   		)КАК НДФЛ
				|
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ИсчисленныйНДФЛ КАК НДФЛЛьготы
				|		ПО		
				|			НЕ НДФЛ.НалоговыйПериод ЕСТЬ NULL 
				|			И	НДФЛЛьготы.Период <= &ДатаКон
				|			И	НДФЛЛьготы.Организация = &Организация
				|			И	НДФЛЛьготы.ФизическоеЛицо = НДФЛ.Контрагент
				|			И	НДФЛЛьготы.КодДохода.Код = НДФЛ.ДоходНДФЛ
				|		И	НАЧАЛОПЕРИОДА(НДФЛЛьготы.НалоговыйПериод, МЕСЯЦ) = НАЧАЛОПЕРИОДА(НДФЛ.НалоговыйПериод, МЕСЯЦ)
				|			И	НДФЛЛьготы.Период = НДФЛ.ПериодАктуальнойЛьготы
				|		СГРУППИРОВАТЬ ПО 
				|			НДФЛ.Контрагент,
				|			НДФЛ.Контрагент.КодПоДРФО,
				|			НДФЛ.НалоговыйПериод,
				|			НДФЛ.ДоходНДФЛ,
				|           НДФЛЛьготы.Льгота.ГруппаЛьгот,
				|           НДФЛЛьготы.Льгота.Льгота1,
				|           НДФЛЛьготы.Льгота.Льгота2
				|";		
			КонецЕсли;

			Запрос.Выполнить();
			
			// соединим данные по ндфл со льготами + свернем
			ТекстЗапроса = "ВЫБРАТЬ
				|	ТаблицаНДФЛБезЛьгот.Контрагент КАК Контрагент,
				|	ВЫБОР КОГДА ТаблицаНДФЛБезЛьгот.Контрагент ССЫЛКА Справочник.ФизическиеЛица 
				|		ТОГДА ТаблицаНДФЛБезЛьгот.Контрагент.КодПоДРФО 
				|		ИНАЧЕ ТаблицаНДФЛБезЛьгот.Контрагент.КодПоЕДРПОУ 
				|	КОНЕЦ КАК ИННСотрудника,
				|	ТаблицаНДФЛБезЛьгот.ДоходНДФЛ КАК ДоходНДФЛ,
				|	ТаблицаНДФЛБезЛьгот.НалоговыйПериод КАК НалоговыйПериод,
				|	ВЫБОР
				|		КОГДА ТаблицаЛьгот.ГруппаЛьгот = ЛОЖЬ
				|			ТОГДА ЕСТЬNULL(ТаблицаЛьгот.Льгота, ЗНАЧЕНИЕ(Справочник.ВидыЛьготПоНДФЛ.ПустаяСсылка))
				|		ИНАЧЕ ВидыЛьготПоНДФЛ.Ссылка
				|	КОНЕЦ КАК Льгота,
				|	ВЫБОР
				|		КОГДА ТаблицаЛьгот.ГруппаЛьгот = ЛОЖЬ
				|			ТОГДА 0
				|		КОГДА ВидыЛьготПоНДФЛ.Ссылка = ТаблицаЛьгот.Льгота1
				|			ТОГДА 0
				|		КОГДА ЕСТЬNULL(ТаблицаЛьгот.Льгота, ЗНАЧЕНИЕ(Справочник.ВидыЛьготПоНДФЛ.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ВидыЛьготПоНДФЛ.ПустаяСсылка)
				|			ТОГДА 0
				|		ИНАЧЕ 1
				|	КОНЕЦ КАК Приоритет,
				// ИНАГРО ++
				|	СУММА(ТаблицаНДФЛБезЛьгот.ДоходПриход) КАК ДоходПриход,
				|	СУММА(ВЫБОР
				|			КОГДА &ЗаполнятьПоНачисленному
				|				ТОГДА ТаблицаНДФЛБезЛьгот.ДоходПриход
				|			ИНАЧЕ ТаблицаНДФЛБезЛьгот.ДоходРасход
				|		КОНЕЦ) КАК ДоходРасход,
				|	СУММА(ТаблицаНДФЛБезЛьгот.НалогПриход) КАК НалогПриход,
				|	СУММА(ВЫБОР
				|			КОГДА &ЗаполнятьПоНачисленному
				|				ТОГДА ТаблицаНДФЛБезЛьгот.НалогПриход
				|			ИНАЧЕ ТаблицаНДФЛБезЛьгот.НалогРасход
				|		КОНЕЦ) КАК НалогРасход,
				|	СУММА(ТаблицаНДФЛБезЛьгот.ВСПриход) КАК ВСПриход,
				|	СУММА(ВЫБОР
				|			КОГДА &ЗаполнятьПоНачисленному
				|				ТОГДА ТаблицаНДФЛБезЛьгот.ВСПриход
				|			ИНАЧЕ ТаблицаНДФЛБезЛьгот.ВСРасход
				|		КОНЕЦ) КАК ВСРасход
				// ИНАГРО --
				|ПОМЕСТИТЬ ВТТаблицаНДФЛ
				|ИЗ
				|	ТаблицаНДФЛБезЛьгот КАК ТаблицаНДФЛБезЛьгот
				|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЛьгот КАК ТаблицаЛьгот
				|		ПО ТаблицаНДФЛБезЛьгот.Контрагент = ТаблицаЛьгот.Контрагент
				|			И ТаблицаНДФЛБезЛьгот.ДоходНДФЛ = ТаблицаЛьгот.ДоходНДФЛ
				|			И ТаблицаНДФЛБезЛьгот.НалоговыйПериод = ТаблицаЛьгот.НалоговыйПериод
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЛьготПоНДФЛ КАК ВидыЛьготПоНДФЛ
				|		ПО (ТаблицаЛьгот.ГруппаЛьгот = ИСТИНА)
				|			И (ВидыЛьготПоНДФЛ.Ссылка = ТаблицаЛьгот.Льгота1
				|				ИЛИ ВидыЛьготПоНДФЛ.Ссылка = ТаблицаЛьгот.Льгота2)
				|
				|СГРУППИРОВАТЬ ПО
				|	ТаблицаНДФЛБезЛьгот.Контрагент,
				|	ВЫБОР КОГДА ТаблицаНДФЛБезЛьгот.Контрагент ССЫЛКА Справочник.ФизическиеЛица 
				|		ТОГДА ТаблицаНДФЛБезЛьгот.Контрагент.КодПоДРФО 
				|		ИНАЧЕ ТаблицаНДФЛБезЛьгот.Контрагент.КодПоЕДРПОУ 
				|	КОНЕЦ,
				|	ТаблицаНДФЛБезЛьгот.ДоходНДФЛ,
				|	ТаблицаНДФЛБезЛьгот.НалоговыйПериод,
				|	ВЫБОР
				|		КОГДА ТаблицаЛьгот.ГруппаЛьгот = ЛОЖЬ
				|			ТОГДА ЕСТЬNULL(ТаблицаЛьгот.Льгота, ЗНАЧЕНИЕ(Справочник.ВидыЛьготПоНДФЛ.ПустаяСсылка))
				|		ИНАЧЕ ВидыЛьготПоНДФЛ.Ссылка
				|	КОНЕЦ,
				|	ВЫБОР
				|		КОГДА ТаблицаЛьгот.ГруппаЛьгот = ЛОЖЬ
				|			ТОГДА 0
				|		КОГДА ВидыЛьготПоНДФЛ.Ссылка = ТаблицаЛьгот.Льгота1
				|			ТОГДА 0
				|		КОГДА ЕСТЬNULL(ТаблицаЛьгот.Льгота, ЗНАЧЕНИЕ(Справочник.ВидыЛьготПоНДФЛ.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ВидыЛьготПоНДФЛ.ПустаяСсылка)
				|			ТОГДА 0
				|		ИНАЧЕ 1
				|	КОНЕЦ
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТаблицаНДФЛ.Контрагент КАК Контрагент,
				|	ТаблицаНДФЛ.ИННСотрудника КАК ИННСотрудника,
				|	ТаблицаНДФЛ.ДоходНДФЛ КАК ДоходНДФЛ,
				|	ТаблицаНДФЛ.Льгота КАК Льгота,
				|	ТаблицаНДФЛ.Приоритет КАК Приоритет,
				|	СУММА(ВЫБОР
				|			КОГДА ТаблицаНДФЛ.Приоритет = 1
				|				ТОГДА 0
				|			ИНАЧЕ ТаблицаНДФЛ.ДоходПриход
				|		КОНЕЦ) КАК ДоходПриход,
				|	СУММА(ВЫБОР
				|			КОГДА ТаблицаНДФЛ.Приоритет = 1
				|				ТОГДА 0
				|			ИНАЧЕ ТаблицаНДФЛ.ДоходРасход
				|		КОНЕЦ) КАК ДоходРасход,
				|	СУММА(ВЫБОР
				|			КОГДА ТаблицаНДФЛ.Приоритет = 1
				|				ТОГДА 0
				|			ИНАЧЕ ТаблицаНДФЛ.НалогПриход
				|		КОНЕЦ) КАК НалогПриход,
				|	СУММА(ВЫБОР
				|			КОГДА ТаблицаНДФЛ.Приоритет = 1
				|				ТОГДА 0
				|			ИНАЧЕ ТаблицаНДФЛ.НалогРасход
				|		КОНЕЦ) КАК НалогРасход,
				|	СУММА(ВЫБОР
				|			КОГДА ТаблицаНДФЛ.Приоритет = 1
				|				ТОГДА 0
				|			ИНАЧЕ ТаблицаНДФЛ.ВСПриход
				|		КОНЕЦ) КАК ВСПриход,
				|	СУММА(ВЫБОР
				|			КОГДА ТаблицаНДФЛ.Приоритет = 1
				|				ТОГДА 0
				|			ИНАЧЕ ТаблицаНДФЛ.ВСРасход
				|		КОНЕЦ) КАК ВСРасход
				|ПОМЕСТИТЬ ВТТаблицаНДФЛИтоговая
				|ИЗ
				|	ВТТаблицаНДФЛ КАК ТаблицаНДФЛ
				|ГДЕ
				|	(ТаблицаНДФЛ.ДоходПриход <> 0
				|			ИЛИ ТаблицаНДФЛ.ДоходРасход <> 0
				|			ИЛИ ТаблицаНДФЛ.НалогПриход <> 0
				|			ИЛИ ТаблицаНДФЛ.НалогРасход <> 0
				|			ИЛИ ТаблицаНДФЛ.ВСРасход <> 0
				|			ИЛИ ТаблицаНДФЛ.ВСПриход <> 0
				|			ИЛИ ТаблицаНДФЛ.Приоритет = 1)
				|
				|СГРУППИРОВАТЬ ПО
				|	ТаблицаНДФЛ.ИННСотрудника,
				|	ТаблицаНДФЛ.ДоходНДФЛ,
				|	ТаблицаНДФЛ.Льгота,
				|	ТаблицаНДФЛ.Контрагент,
				|	ТаблицаНДФЛ.Приоритет
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТаблицаНДФЛ.Контрагент,
				|	ТаблицаНДФЛ.ИННСотрудника,
				|	ТаблицаНДФЛ.ДоходНДФЛ,
				|	ТаблицаНДФЛ.Льгота,
				|	ТаблицаНДФЛ.Приоритет,
				|	ТаблицаНДФЛ.ДоходПриход,
				|	ТаблицаНДФЛ.ДоходРасход,
				|	ТаблицаНДФЛ.НалогПриход,
				|	ТаблицаНДФЛ.НалогРасход,
				|	ТаблицаНДФЛ.ВСПриход,
				|	ТаблицаНДФЛ.ВСРасход
				|ИЗ
				|	ВТТаблицаНДФЛИтоговая КАК ТаблицаНДФЛ";
			
			Если РегламентированнаяОтчетностьПереопределяемый.ИДПодсистемыЗарплаты() = "ЕРПЗИК" Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
				"	ВЫБОР КОГДА ТаблицаНДФЛБезЛьгот.Контрагент ССЫЛКА Справочник.ФизическиеЛица 
				|		ТОГДА ТаблицаНДФЛБезЛьгот.Контрагент.КодПоДРФО 
				|		ИНАЧЕ ТаблицаНДФЛБезЛьгот.Контрагент.КодПоЕДРПОУ 
				|	КОНЕЦ",
				"ТаблицаНДФЛБезЛьгот.Контрагент.КодПоДРФО");
			КонецЕсли;	
		
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("ЗаполнятьПоНачисленному", СтруктураРеквизитовФормы.ЗаполнятьПоНачисленному); //ИНАГРО
			ТаблицаНДФЛ = Запрос.Выполнить().Выгрузить();
			Если СтруктураРеквизитовФормы.СортироватьПоИНН Тогда
				ТаблицаНДФЛ.Сортировать("ИННСотрудника,Контрагент,ДоходНДФЛ,Приоритет");
			Иначе	
				ТаблицаНДФЛ.Сортировать("Контрагент,ИННСотрудника,ДоходНДФЛ,Приоритет");
			КонецЕсли;
			
	        Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ТаблицаНДФЛ.Контрагент
				|ИЗ
				|	ВТТаблицаНДФЛИтоговая КАК ТаблицаНДФЛ
				|ГДЕ
				|	ТаблицаНДФЛ.ДоходНДФЛ = ""101"" ";
			
			Выборка = Запрос.Выполнить().Выбрать();
			R00G01I = Выборка.Количество();

			Если СчетчикМесяцев = 0 Тогда
				СтруктураДанныхТаблица41.R00G01I = R00G01I;
			ИначеЕсли СчетчикМесяцев = 1 Тогда
				СтруктураДанныхТаблица42.R00G01I = R00G01I;
			Иначе
				СтруктураДанныхТаблица43.R00G01I = R00G01I;
			Конецесли;
		
			// ИНАГРО ++
			ЗапросРаботникиНаНачало = Новый Запрос;
			ЗапросРаботникиНаНачало.УстановитьПараметр("ДатаНач", Новый Граница(НачалоВЦикле-1, ВидГраницы.Включая));
			ЗапросРаботникиНаНачало.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
					
			ЗапросРаботникиНаНачало.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
                |	ИНАГРО_РаботникиОрганизацийСрезПоследних.Сотрудник.ФизическоеЛицо КАК Контрагент,
                |	ВЫБОР
                |		КОГДА СУММА(ВЫБОР
                |					КОГДА ИНАГРО_РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
                |						ТОГДА 0
                |					ИНАЧЕ 1
                |				КОНЕЦ) > 0
                |			ТОГДА ИСТИНА
                |		ИНАЧЕ ЛОЖЬ
                |	КОНЕЦ КАК РаботалНаНачалоПериода,
                |	МАКСИМУМ(ДОБАВИТЬКДАТЕ(ИНАГРО_РаботникиОрганизацийСрезПоследних.Период, СЕКУНДА, -1)) КАК ДатаУвольнения
                |ИЗ
                |	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаНач, Организация = &Организация) КАК ИНАГРО_РаботникиОрганизацийСрезПоследних
                |
                |СГРУППИРОВАТЬ ПО
                |	ИНАГРО_РаботникиОрганизацийСрезПоследних.Сотрудник.ФизическоеЛицо";
		
			РаботникиНаНачало = ЗапросРаботникиНаНачало.Выполнить().Выгрузить();
			
			ЗапросДатыКадровыхИзменений = Новый Запрос;
			ЗапросДатыКадровыхИзменений.УстановитьПараметр("ДатаНач", НачалоВЦикле);
			ЗапросДатыКадровыхИзменений.УстановитьПараметр("ДатаКон", КонецВЦикле + 1); // добавляем день, так как уваольнение "видно" только на следующий день
			ЗапросДатыКадровыхИзменений.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
			
			ЗапросДатыКадровыхИзменений.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
                |	ИНАГРО_РаботникиОрганизаций.Период КАК Период,
                |	ИНАГРО_РаботникиОрганизаций.Сотрудник.ФизическоеЛицо КАК Контрагент
                |ИЗ
                |	РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК ИНАГРО_РаботникиОрганизаций
                |ГДЕ
                |	ИНАГРО_РаботникиОрганизаций.Период >= &ДатаНач
                |	И ИНАГРО_РаботникиОрганизаций.Период <= &ДатаКон
                |	И ИНАГРО_РаботникиОрганизаций.Организация = &Организация
                |	И НЕ ИНАГРО_РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение)
                |ИТОГИ ПО
                |	Период";
		
			ВыборкаПериод = ЗапросДатыКадровыхИзменений.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			РаботникиПриемУвольнение = Новый ТаблицаЗначений();
			РаботникиПриемУвольнение.Колонки.Добавить("Контрагент");
			РаботникиПриемУвольнение.Колонки.Добавить("Период");
			РаботникиПриемУвольнение.Колонки.Добавить("РаботалВПериоде");
			
			ЗапросПриемУвольнение = Новый Запрос;
			ЗапросПриемУвольнение.УстановитьПараметр("Организация", СтруктураРеквизитовФормы.Организация);
			
			Пока ВыборкаПериод.Следующий() Цикл
				
				МассивФизЛиц = Новый Массив();       
				
				ВыборкаФизическоеЛицо = ВыборкаПериод.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока ВыборкаФизическоеЛицо.Следующий() Цикл
					МассивФизЛиц.Добавить(ВыборкаФизическоеЛицо.Контрагент);	
				КонецЦикла;
				ЗапросПриемУвольнение.УстановитьПараметр("Сотрудники", МассивФизЛиц);
				ЗапросПриемУвольнение.УстановитьПараметр("Период", ВыборкаПериод.Период);
				
				ЗапросПриемУвольнение.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
                   |	&Период КАК Период,
                   |	ИНАГРО_РаботникиОрганизацийСрезПоследних.Сотрудник.ФизическоеЛицо КАК Контрагент,
                   |	ВЫБОР
                   |		КОГДА МАКСИМУМ(ВЫБОР
                   |					КОГДА ИНАГРО_РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
                   |						ТОГДА 0
                   |					ИНАЧЕ 1
                   |				КОНЕЦ) > 0
                   |			ТОГДА ИСТИНА
                   |		ИНАЧЕ ЛОЖЬ
                   |	КОНЕЦ КАК РаботалВПериоде
                   |ИЗ
                   |	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(
                   |			&Период,
                   |			Организация = &Организация
                   |				И Сотрудник.ФизическоеЛицо В (&Сотрудники)) КАК ИНАГРО_РаботникиОрганизацийСрезПоследних
                   |
                   |СГРУППИРОВАТЬ ПО
                   |	ИНАГРО_РаботникиОрганизацийСрезПоследних.Сотрудник.ФизическоеЛицо";

				ВыборкаПриемУвольнение = ЗапросПриемУвольнение.Выполнить().Выбрать();
				Пока ВыборкаПриемУвольнение.Следующий() Цикл
					СтрокаТаблицы = РаботникиПриемУвольнение.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаПриемУвольнение);
				КонецЦикла;
				
			КонецЦикла;
			
			ЗапросГПХ = Новый Запрос;
			ЗапросГПХ.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
                  |	Работники.Сотрудник.ФизическоеЛицо КАК Контрагент
                  |ИЗ
                  |	Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом КАК Работники
                  |ГДЕ
                  |	Работники.Проведен
                  |	И Работники.ДатаОкончания >= &ДатаНачалаКваратала       
                  |	И Работники.ДатаНачала <= &ДатаКонцаКвартала
                  |	И Работники.Организация = &Организация " + УсловиеНаПодразделениеСотр +"  
				  |";
	
			ЗапросГПХ.УстановитьПараметр("ДатаНачалаКваратала", НачалоВЦикле);
			ЗапросГПХ.УстановитьПараметр("ДатаКонцаКвартала",	КонецВЦикле);
			ЗапросГПХ.УстановитьПараметр("Организация",			СтруктураРеквизитовФормы.Организация);
			ЗапросГПХ.УстановитьПараметр("НеВключатьЧПников", 	СтруктураРеквизитовФормы.НеВключатьЧПников);
			ЗапросГПХ.УстановитьПараметр("Подразделение", 		?(СтруктураРеквизитовФормы.Подразделение = Неопределено, Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), СтруктураРеквизитовФормы.Подразделение));
			
			ТаблицаРезультатГПХ = ЗапросГПХ.Выполнить().Выгрузить();
			КолГПХ = ТаблицаРезультатГПХ.Количество();
		
			Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаНДФЛ.Контрагент
			|ИЗ
			|	ВТТаблицаНДФЛИтоговая КАК ТаблицаНДФЛ
			|ГДЕ
			|	ТаблицаНДФЛ.ДоходНДФЛ = ""102"" ";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			R00G02I = Выборка.Количество();
			Если СчетчикМесяцев = 0 Тогда
				СтруктураДанныхТаблица41.R00G02I = R00G02I;
			ИначеЕсли СчетчикМесяцев = 1 Тогда
				СтруктураДанныхТаблица42.R00G02I = R00G02I;
			Иначе
				СтруктураДанныхТаблица43.R00G02I = R00G02I;
			Конецесли;
			
			R02G02I = 0;
			R02G01I = 1;
			Номер = 0;
			СотрудникПредыдущий = Неопределено;
			
			ТекстСообщенияОшибкаКолСтрок = НСтр("ru='Превышен лимит строк! Согласно схеме XSD - в отчете может быть только 9999 строк. При превышении, рекомендуем заполнять по подразделениям';uk='Перевищено ліміт рядків! Згідно зі схемою XSD - у звіті може бути тільки 9999 рядків. У разі більшої кількості, рекомендуємо заповнювати по підрозділах '");
			
			ПрефиксИмениКолонки = ИмяГруппы+"XXXX";
			
			Для Каждого стр ИЗ ТаблицаНДФЛ Цикл
				
				Если Номер > 0 Тогда
					
					Если Номер > 9999 Тогда
						Если НЕ СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда
							Сообщить(ТекстСообщенияОшибкаКолСтрок);
						Иначе
							ПараметрыЗаполненияЗвит1С.Вставить("ОшибкаПриЗаполнении", ТекстСообщенияОшибкаКолСтрок);
						КонецЕсли;		
						Прервать;
					КонецЕсли;
					
					Строка = СтруктураГруппы.Добавить();
					R02G01I = R02G01I + 1;
				Иначе
					Строка = СтруктураГруппы[0];
				КонецЕсли;
				
				КолСтрок = СтруктураГруппы.Количество();
				
				СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В строке номер ""%1"" отчета"": ';uk='У рядку номер ""%1"" звіту"": '"), СокрЛП(КолСтрок));
				
				Если НЕ ЗначениеЗаполнено(стр.ИННСотрудника) Тогда
					Сообщить(СтрокаНачалаСообщенияОбОшибке + НСтр("ru=' у контрагента (сотрудника) не заполнен идентификационный код!';uk=' у контрагента (співробітника) не заповнений ідентифікаційний код!'"), СтатусСообщения.Важное);
				КонецЕсли;
				Строка[ПрефиксИмениКолонки+"G02"]  = стр.ИННСотрудника;
				Строка[ПрефиксИмениКолонки+"GFIO"] = стр.Контрагент;
				Строка[ПрефиксИмениКолонки+"G03A"] = стр.ДоходПриход;
				Строка[ПрефиксИмениКолонки+"G03"]  = стр.ДоходРасход;
				Строка[ПрефиксИмениКолонки+"G04A"] = стр.НалогПриход;
				Строка[ПрефиксИмениКолонки+"G04"]  = стр.НалогРасход;
				Строка[ПрефиксИмениКолонки+"G5A"]  = стр.ВСПриход;
				Строка[ПрефиксИмениКолонки+"G5"]   = стр.ВСРасход;
				Строка[ПрефиксИмениКолонки+"G05"]  = стр.ДоходНДФЛ;
				
				
				Льгота = "";
				Если (СтрДлина(стр.Льгота) > 0)  Тогда
					Льгота = стр.Льгота.КодОтчетностиНДФЛ;
				КонецЕсли;	
				Строка[ПрефиксИмениКолонки+"G08"]  = Льгота;
				
				// даты увольнения/приема
				Если (стр.Контрагент <> СотрудникПредыдущий)  Тогда
					//количество физ.лиз
					R02G02I = R02G02I + 1;
					
					Если НЕ (ТипЗнч(стр.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда
						
						ДатаПриема 	   = '00010101';
						ДатаУвольнения = '00010101';
						
						ПараметрыОтбора = Новый Структура("Контрагент");
						ПараметрыОтбора.Вставить("Контрагент", стр.Контрагент); 
						
						ЗаписьНаНачало  = РаботникиНаНачало.НайтиСтроки(ПараметрыОтбора);
						ПриемыУвольнения = РаботникиПриемУвольнение.НайтиСтроки(ПараметрыОтбора);
						
						// 1. Если сотр был уволен ранее, не работал в этом периоде (в т.ч. по ГПХ), но получал доход 
						//		заполняем только дату увольнения:
						РаботалНаНачало = Ложь;
						Если ЗаписьНаНачало.Количество() > 0 Тогда
							// 1.1 определяем, что сотрудник ранее работал и был уволен
							РаботалНаНачало = ЗаписьНаНачало[0].РаботалНаНачалоПериода;
							Если НЕ РаботалНаНачало Тогда
								ДатаУвольнения = ЗаписьНаНачало[0].ДатаУвольнения;
							КонецЕсли;
						КонецЕсли;
						Если НЕ РаботалНаНачало 
			  				  И ДатаУвольнения > '00010101' Тогда
							//1.2 показанный в периоде доход не должен быть связан с ГПХ
							Если НЕ ТаблицаРезультатГПХ = Неопределено
								  И ТаблицаРезультатГПХ.НайтиСтроки(ПараметрыОтбора).Количество() > 0  Тогда
								  ДатаУвольнения = '00010101';
							КонецЕсли;
						КонецЕсли;
						Если НЕ РаботалНаНачало 
							  И ДатаУвольнения > '00010101' Тогда
							//1.3 В периоде работник не принимался на работу
							Для каждого ЗаписьПриемУвольнение Из ПриемыУвольнения Цикл
								Если ЗаписьПриемУвольнение.РаботалВПериоде Тогда
									ДатаУвольнения = '00010101';
									Прервать;
								КонецЕсли;
							КонецЦикла;	
						КонецЕсли;
						
						
						//2. Пройдемся по таблице приема/увольнения и при необходимости добавим строки с данными по приему и увольнению
						РаботалВПредыдущемПериоде = РаботалНаНачало;
						СтрокаВыведенаВОтчет = Ложь;
						Для каждого ЗаписьПриемУвольнение Из ПриемыУвольнения Цикл
							
							Если НЕ РаботалВПредыдущемПериоде 
								И ЗаписьПриемУвольнение.РаботалВПериоде Тогда
								
								Если ЗаписьПриемУвольнение.Период > СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета Тогда 
									// в выборку могут попать записи о приеме на работу в первый день след. квартала
									Продолжить;
								КонецЕсли;
								Если ДатаПриема > '00010101' ИЛИ ДатаУвольнения > '00010101' Тогда
									
									// это второй прием/увольнение в периоде
									// выведем строку в таблицу
									
									Если СтрокаВыведенаВОтчет Тогда
										Номер = Номер + 1;
										
						
						
										Если Номер > 9999 Тогда
											Если НЕ СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда
												Сообщить(ТекстСообщенияОшибкаКолСтрок);
											Иначе
												ПараметрыЗаполненияЗвит1С.Вставить("ОшибкаПриЗаполнении", ТекстСообщенияОшибкаКолСтрок);
											КонецЕсли;		
											Прервать;
										КонецЕсли;
										
										
										Строка = СтруктураГруппы.Добавить();
										R02G01I = R02G01I + 1;
										
										КолСтрок = СтруктураГруппы.Количество();
										
										Строка[ПрефиксИмениКолонки+"G02"]  = стр.ИННСотрудника;
										Строка[ПрефиксИмениКолонки+"GFIO"] = стр.Контрагент;
										
									Иначе
										СтрокаВыведенаВОтчет = Истина;
									КонецЕсли;
									
									Строка[ПрефиксИмениКолонки+"G06D"] = ДатаПриема;
									Строка[ПрефиксИмениКолонки+"G07D"] = ДатаУвольнения;
									Строка[ПрефиксИмениКолонки+"G05"]  = стр.ДоходНДФЛ;
									
								КонецЕсли;
								
								ДатаПриема 		= ЗаписьПриемУвольнение.Период;
								ДатаУвольнения  = '00010101';
								РаботалВПредыдущемПериоде = Истина;
								
							ИначеЕсли РаботалВПредыдущемПериоде
								И НЕ ЗаписьПриемУвольнение.РаботалВПериоде Тогда
								
								ДатаУвольнения = НачалоДня(ЗаписьПриемУвольнение.Период); 
								РаботалВПредыдущемПериоде = Ложь;
								
							КонецЕсли;	
						КонецЦикла;
						
						Если СтрокаВыведенаВОтчет Тогда
							
							Номер = Номер + 1;
							
							Если Номер > 9999 Тогда
								Если НЕ СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина Тогда
									Сообщить(ТекстСообщенияОшибкаКолСтрок);
								Иначе
									ПараметрыЗаполненияЗвит1С.Вставить("ОшибкаПриЗаполнении", ТекстСообщенияОшибкаКолСтрок);
								КонецЕсли;		
								Прервать;
							КонецЕсли;
							
							Строка = СтруктураГруппы.Добавить();
							R02G01I = R02G01I + 1;
							
							КолСтрок = СтруктураГруппы.Количество();
							
							Строка[ПрефиксИмениКолонки+"G02"]  = стр.ИННСотрудника;
							Строка[ПрефиксИмениКолонки+"GFIO"] = стр.Контрагент;
							
						КонецЕсли;				
									
						Строка[ПрефиксИмениКолонки+"G06D"] = ДатаПриема;
						Строка[ПрефиксИмениКолонки+"G07D"] = ДатаУвольнения;
						Строка[ПрефиксИмениКолонки+"G05"]  = стр.ДоходНДФЛ;

					КонецЕсли;         
				КонецЕсли;
			
			СотрудникПредыдущий = стр.Контрагент;
			Номер = Номер + 1;
		
		КонецЦикла;
		
		Если СчетчикМесяцев = 0 Тогда
			СтруктураДанныхТаблица41.R02G02I = R02G02I;
			СтруктураДанныхТаблица41.R02G01I = R02G01I;
		ИначеЕсли СчетчикМесяцев = 1 Тогда
			СтруктураДанныхТаблица42.R02G02I = R02G02I;
			СтруктураДанныхТаблица42.R02G01I = R02G01I;
		Иначе
			СтруктураДанныхТаблица43.R02G02I = R02G02I;
			СтруктураДанныхТаблица43.R02G01I = R02G01I;
		Конецесли;
		
		ЗначениеВРеквизитФормы(СтруктураГруппы, ИмяГруппы);
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С)
	
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСтруктурыКолонокМногострочныхЧастей()
	
	Если СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов = Неопределено Тогда
		СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов = Новый Структура;	
	КонецЕсли;
	
	Для каждого Многострочка Из мСтруктураМногострочныхРазделов Цикл
		
		ИмяМногострочки = Многострочка.Ключ;
		
		ДанныеФормы 	= ЭтаФорма[Многострочка.Значение];
		Таблица 		= ДанныеФормыВЗначение(ДанныеФормы, Тип("ТаблицаЗначений"));		
		
		СтруктураКолонок = Новый Массив;
		Для каждого Колонка Из Таблица.Колонки Цикл
			СтруктураКолонок.Добавить(Колонка.Имя);
		КонецЦикла;
		
		СтруктураРеквизитовФормы.КолонкиМногострочныхРазделов.Вставить(ИмяМногострочки, СтруктураКолонок);
		
	КонецЦикла;

КонецФункции

&НаСервереБезКонтекста
Функция КодПолаФизическогоЛица(Пол)
	
	КодПола = "";
	
	Если Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
		КодПола = "Ж";
	ИначеЕсли Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
		КодПола = "Ч";
	КонецЕсли;
	
	Возврат КодПола;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеФормыНаСервере();
	
	// формируем список сохранения
	СписокСохранения = Новый Структура();
	
	СохранитьДанныеРаздела(СтруктураРеквизитовФормы.НаимТекущегоРаздела, Ложь);
	
	// расшифровка для Звит1С
	//Если  СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровки")
	//	И ЗначениеЗаполнено(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки) 
	//	И СтруктураРеквизитовФормы.Свойство("АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С") Тогда
	//	
	//	ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровки),
	//								  СтруктураРеквизитовФормы.АдресВременногоХранилищаРасшифровкиОтчетаДляЗвит1С); 
	//	
	//КонецЕсли;
	
	ПоказателиОтчета = Новый Структура();
	
	РеквизитыФормы = ПолучитьРеквизиты();
	Для каждого Реквизит Из РеквизитыФормы Цикл
		Если Лев(ВРЕГ(Реквизит.Имя), 15)  = ВРЕГ("СтруктураДанных") Тогда
			ПоказателиОтчета.Вставить(Сред(Реквизит.Имя, 16), ЭтаФорма[Реквизит.Имя]);		
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИдМногострочногоРаздела Из мСтруктураМногострочныхРазделов Цикл
		
		СтруктураДанных = Новый Структура;
		
		Таблица = РеквизитФормыВЗначение(ИдМногострочногоРаздела.Значение, Тип("ТаблицаЗначений"));
		КолонкиТаблицы = Таблица.Колонки;
		
		Для каждого Строка Из Таблица Цикл
			
			Для каждого Колонка Из КолонкиТаблицы Цикл
				
				ЗначениеПоказателя = Строка[Колонка.Имя];
				
				Если  ИдМногострочногоРаздела.Значение = СтруктураРеквизитовФормы.мИдГруппы5
					И Колонка.Имя = "T5T1RXXXXG14S" Тогда
					
					ЗначениеПоказателя = СокрЛП(ЗначениеПоказателя);
					
				КонецЕсли;

				СтруктураДанных.Вставить(Колонка.Имя + "_" + Формат(Таблица.Индекс(Строка) + 1, "ЧГ=0"), ЗначениеПоказателя);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ПоказателиОтчета.Вставить(ИдМногострочногоРаздела.Значение, СтруктураДанных);		
		
	КонецЦикла;	
	
	ПоказателиОтчета.Вставить("ДопПоказателиОтчета", СтруктураРеквизитовФормы.ДопПоказателиОтчетаЗвит1С);
		
	// показатели
	СписокСохранения.Вставить("ДанныеОтчета", ПоказателиОтчета);
	
	Возврат СписокСохранения;
	
КонецФункции

&НаКлиенте
Функция СоздатьДанныеОтчетаДляВыгрузки() Экспорт
	
	АдресВХранилище = СоздатьДанныеОтчетаДляВыгрузкиНаСервере();
	Возврат АдресВХранилище;

КонецФункции

&НаСервере
Функция СоздатьДанныеОтчетаДляВыгрузкиНаСервере()
	
	ДанныеОтчета = ПолучитьДанныеФормыНаСервере();
	Возврат ПоместитьВоВременноеХранилище(ДанныеОтчета, Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста	
Функция ОбработатьДРФО(Знач ДРФО)
	
	ДРФО = СОКРЛП(ДРФО);
	ДРФО = ВРЕГ(ДРФО);
	
	Если СтрДлина(ДРФО) = 8 Тогда
		
		Симв1 = Сред(ДРФО, 1, 1);
		Симв2 = Сред(ДРФО, 2, 1);
		Симв3 = Сред(ДРФО, 3);
		Если  Найти("АБВГДЕЄЖЗИІКЛМНОПРСТУФХЦЧШЩЮЯ", Симв1) > 0
			И Найти("АБВГДЕЄЖЗИІКЛМНОПРСТУФХЦЧШЩЮЯ", Симв2) > 0 Тогда
		
			Для Сч = 3 по 8 Цикл
				Если Найти("0123456789", Сред(ДРФО, Сч, 1)) = 0 Тогда
					// не соответствует формату паспорта
					Возврат ДРФО;
				КонецЕсли;
			КонецЦикла;	
			
			// к номеру паспорта добавляем "БК"
			Возврат "БК" + ДРФО;
			
		Иначе
			
			// не соответствует формату паспорта
			Возврат ДРФО;
			
		КонецЕсли;
	ИначеЕсли СтрДлина(ДРФО) = 9 Тогда	
		
		Для Сч = 1 по 9 Цикл
			Если Найти("0123456789", Сред(ДРФО, Сч, 1)) = 0 Тогда
				// не соответствует формату пластикового паспорта
				Возврат ДРФО;
			КонецЕсли;
		КонецЦикла;	
		
		// к номеру пластикового паспорта добавляем "П"
		Возврат "П" + ДРФО;
		
	Иначе
		
		// не соответствует формату паспорта
		Возврат ДРФО;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПараметровДляЗвит1С(ОписаниеОповещения) Экспорт
	
	глКомпонентаЗвит1С.Bring1CToFront();
	СтруктураРеквизитовФормы.Вставить("ОповещениеНастройкиПараметровЗвит1С", ОписаниеОповещения);
	
	СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина;
	
	Если глМенеджерЗвит1С.ФлагОтладки Тогда

		ФормаСохраненныхРеглОтчетов = ПолучитьФорму("Документ.РегламентированныйОтчет.Форма.ФормаВыбораТестЗвит1С",,ЭтаФорма);
		
		ФормаСохраненныхРеглОтчетов.ОписаниеОповещенияОЗакрытии =  Новый ОписаниеОповещения("РежимТестированияЗвит1СЗавершениеВыбораОтчета", ЭтотОбъект);
		ФормаСохраненныхРеглОтчетов.Параметры.РежимВыбора        = Истина; 
		ФормаСохраненныхРеглОтчетов.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаСохраненныхРеглОтчетов.Открыть();
		
	Иначе
		
		ОткрытьФормуПараметров(Неопределено);	
				
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РежимТестированияЗвит1СЗавершениеВыбораОтчета(Результат, ДопПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ТекОповещение = СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С;
		СтруктураРеквизитовФормы.Удалить("ОповещениеНастройкиПараметровЗвит1С");
			
		СтруктураРеквизитовФормы.мСохраненныйДок = Результат;	
		ВосстановитьСохраненныеДанные();	
			
		СтруктураРеквизитовФормы.Вставить("ОповещениеНастройкиПараметровЗвит1С", ТекОповещение);
		
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
		
	Иначе
		
		ОткрытьФормуПараметров(Неопределено);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПараметровЗавершение(ПараметрыВозврата, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРеквизитовФормы.Свойство("ОповещениеНастройкиПараметровЗвит1С") Тогда
		ВыполнитьОбработкуОповещения(СтруктураРеквизитовФормы.ОповещениеНастройкиПараметровЗвит1С, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьДанныеДляЗвит1С(ОтчетЗвит1С = Неопределено) Экспорт 
	
	мСписокСообщенийЗвит1С 	= Новый СписокЗначений;
	
	// Настроим модуль объекта на получение данных для Звита
	СтруктураРеквизитовФормы.ПолучениеДанныхДляЗвит1С = Истина;
	Если СтруктураРеквизитовФормы.Свойство("ОповещениеНастройкиПараметровЗвит1С") Тогда
		СтруктураРеквизитовФормы.Удалить("ОповещениеНастройкиПараметровЗвит1С")	
	КонецЕсли;
	
	Модифицированность = Ложь;
	Комментарий = "Звіт створений для збереження параметрів заповнення ""FREDO Звіт""";
	мСохраненныйДок = Неопределено;
	Если СтруктураРеквизитовФормы.Свойство("ХранилищеПараметровДляЗвит1С", мСохраненныйДок) Тогда
		СтруктураРеквизитовФормы.мСохраненныйДок = мСохраненныйДок;
	КонецЕсли;
	Сохранить(Ложь, "Декларация");
		
	НомерМесяца = 0;	
	Если СтруктураРеквизитовФормы.мПериодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") и 
		НЕ (Сред(глМенеджерЗвит1С.ИмяСхемыЗвит1С, 2,5) = "05001" ИЛИ Сред(глМенеджерЗвит1С.ИмяСхемыЗвит1С, 2,5) = "05105") Тогда
		//это приложение 1, 4 или 6 (помесячно)
		СтруктураРеквизитовФормы.НомерМесяца = СтруктураРеквизитовФормы.МесяцПриложения+1;
	КонецЕсли;
	
	Если НЕ глМенеджерЗвит1С.ФлагОтладки Тогда
		
		ПараметрыЗаполненияЗвит1С = Неопределено;
		ЗаполнитьАвтоНаСервере(ПараметрыЗаполненияЗвит1С);
		ДозаполнитьНаКлиенте(ПараметрыЗаполненияЗвит1С);
		
	КонецЕсли;
	
	Результат = ПолучитьДанныеФормыНаСервере();
	
	Для каждого Сообщение Из мСписокСообщенийЗвит1С Цикл
		глМенеджерЗвит1С.ПредупреждениеЗвит1С(Сообщение.Представление, ,Сообщение.Значение);
	КонецЦикла;
	
	мСписокСообщенийЗвит1С.Очистить();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СоздатьОписанияТипов(НазваниеТипа, Длина,Точность="")
	
	мас = Новый Массив;
	мас.Добавить(Тип(НазваниеТипа));
	Если Точность = "" Тогда
		КвалифСтроки = Новый КвалификаторыСтроки(Длина,ДопустимаяДлина.Переменная); 
	Иначе
		КвалифЧисла = Новый КвалификаторыЧисла(Длина,Точность,ДопустимыйЗнак.Неотрицательный); 
	КонецЕсли;	   
	Возврат Новый ОписаниеТипов(мас,КвалифСтроки,КвалифЧисла);
  
КонецФункции	

&НаСервере
Функция ОбъектОтчета(ЭтаФормаИмя)
	
	Если мОбъектОтчета = Неопределено Тогда 
		мОбъектОтчета = РегламентированнаяОтчетностьВызовСервера.ОбъектОтчета(ЭтаФормаИмя);
	КонецЕсли;
	
	Возврат мОбъектОтчета;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПараметров(Команда)

	мПараметрыФормы = Новый Структура;
	мПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", 	СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	мПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета", 	СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	
	мПараметрыФормы.Вставить("Организация", 			СтруктураРеквизитовФормы.Организация);
	
	мПараметрыФормы.Вставить("ОпцияКадровыйПереводДвумяСтроками", СтруктураРеквизитовФормы.ОпцияКадровыйПереводДвумяСтроками);
	мПараметрыФормы.Вставить("ВыплатыЗПНеРегулярны", 	СтруктураРеквизитовФормы.ВыплатыЗПНеРегулярны);
	мПараметрыФормы.Вставить("Подразделение", 			СтруктураРеквизитовФормы.Подразделение);
	мПараметрыФормы.Вставить("ОбособленноеПодразделение", СтруктураРеквизитовФормы.ОбособленноеПодразделение); 
	мПараметрыФормы.Вставить("НеВключатьЧПников", 		СтруктураРеквизитовФормы.НеВключатьЧПников);
	мПараметрыФормы.Вставить("МесяцПриложения", 		СтруктураРеквизитовФормы.МесяцПриложения);
	мПараметрыФормы.Вставить("СортироватьПоИНН", 		СтруктураРеквизитовФормы.СортироватьПоИНН);
	мПараметрыФормы.Вставить("Организация", 			СтруктураРеквизитовФормы.Организация);
	мПараметрыФормы.Вставить("ЧислоВыплатыЗП", 			СтруктураРеквизитовФормы.ЧислоВыплатыЗП);
	мПараметрыФормы.Вставить("НазначениеПенсии", 		СтруктураРеквизитовФормы.НазначениеПенсии);
	мПараметрыФормы.Вставить("НазначениеСоцВыплат", 	СтруктураРеквизитовФормы.НазначениеСоцВыплат);
	мПараметрыФормы.Вставить("Сотрудники", 				СтруктураРеквизитовФормы.Сотрудники);
	мПараметрыФормы.Вставить("ОпцияПриемУвольнениеОтдельнымиСтроками", СтруктураРеквизитовФормы.ОпцияПриемУвольнениеОтдельнымиСтроками);
	
	ИмяФормыПараметровНастройки = СтрЗаменить(ЭтаФорма.ИмяФормы, "ФормаОтчета", "ПараметрыОтчета");
	
	ФормаНастройкиОтчета = ПолучитьФорму(ИмяФормыПараметровНастройки, мПараметрыФормы, ЭтаФорма);
	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуПараметровЗавершение", ЭтотОбъект);
	ФормаНастройкиОтчета.ОписаниеОповещенияОЗакрытии = ОписаниеОповещения;
	
	ФормаНастройкиОтчета.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаНастройкиОтчета.Открыть();
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьНастраиваемыеПараметрыЗаполнения()
	
	ЗапросДеклПрошл = Новый Запрос ("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	| РегламентированныйОтчет.ДанныеОтчета,
	| РегламентированныйОтчет.Ссылка
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|
	|ГДЕ
	|	НЕ РегламентированныйОтчет.ПометкаУдаления И
	|	РегламентированныйОтчет.Организация = &Организация И
	|	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета И
	|	РегламентированныйОтчет.ДатаОкончания <= &ДатаОкончания
	|УПОРЯДОЧИТЬ ПО ДатаОкончания УБЫВ"
	);
	
	ЗапросДеклПрошл.УстановитьПараметр ("ПометкаУдаления",ЛОЖЬ);
	ЗапросДеклПрошл.УстановитьПараметр ("ДатаОкончания",СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	ЗапросДеклПрошл.УстановитьПараметр ("Организация",	СтруктураРеквизитовФормы.Организация);
	ЗапросДеклПрошл.УстановитьПараметр ("ИсточникОтчета","РегламентированныйОтчетРасчетДоходовИЕСВФизЛиц");						   
	
	Выборка = ЗапросДеклПрошл.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ДанныеОтчета = Выборка.ДанныеОтчета.Получить();
		
		ДанныеОтчета.Свойство("ОпцияКадровыйПереводДвумяСтроками", СтруктураРеквизитовФормы.ОпцияКадровыйПереводДвумяСтроками);
		Если  СтруктураРеквизитовФормы.ОпцияКадровыйПереводДвумяСтроками = Неопределено Тогда
			СтруктураРеквизитовФормы.ОпцияКадровыйПереводДвумяСтроками = 0;
		КонецЕсли;
		
		Если ДанныеОтчета.Свойство("СозданКакХранилищеПараметровДляЗвит1С") Тогда
			// чтобы не плодить отчеты при повторном заполнении из Звита
			// будем записывать параметры в один и тот же отчет
			СтруктураРеквизитовФормы.Вставить("ХранилищеПараметровДляЗвит1С", Выборка.Ссылка);
		КонецЕсли;
		
		ТекДанные = Неопределено;
		ДанныеОтчета.Свойство("Сотрудники", ТекДанные);
		Если НЕ ТекДанные = Неопределено Тогда
			СтруктураРеквизитовФормы.Сотрудники = ТекДанные.Получить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция  ПолучитьСписокЛиц(НачалоВЦикле, КонецВЦикле) // ИНАГРО
	
	// Текст запроса: работники организации за период 
	ЗапросСотрудники = Новый Запрос;
	ЗапросСотрудники.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Установим параметры запроса
	ЗапросСотрудники.УстановитьПараметр("ДатаНач", НачалоВЦикле - 1);
	ЗапросСотрудники.УстановитьПараметр("ДатаКон", КонецВЦикле + 1);
	ЗапросСотрудники.УстановитьПараметр("ПериодОтчета", НачалоВЦикле);
	ЗапросСотрудники.УстановитьПараметр("Сотрудники", СтруктураРеквизитовФормы.Сотрудники);
	ЗапросСотрудники.УстановитьПараметр("Организация" , СтруктураРеквизитовФормы.Организация);
	
	ЗапросСотрудники.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизаций.Должность КАК Должность,
		|	РаботникиОрганизаций.ИзменениеДолжности КАК ИзменениеДолжности,
		|	РаботникиОрганизаций.ПредыдущаяДолжность КАК ПредыдущаяДолжность,
		|	&ДатаНач КАК Период,
		|	ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПустаяСсылка) КАК ПричинаИзмененияСостояния,
		|	NULL КАК ДатаПриема,
		|	NULL КАК ДатаУвольнения,
		|	ВЫБОР КОГДА РаботникиОрганизаций.ЗанимаемыхСтавок < 1 ИЛИ РаботникиОрганизаций.РаботаСНефиксированнымРабочимВременем ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК СокращенноеРабочееВремя, 
		|	РаботникиОрганизаций.ПринятНаНовоеРабочееМесто КАК ПринятНаНовоеРабочееМесто,
		|	NULL КАК ДатаСозданияРабочегоМеста,
		|	NULL КАК СтатьяКЗОТ,
		|	NULL КАК Основание
		|ПОМЕСТИТЬ ВТСписокНачальныеДанные
		|ИЗ
		|	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаНач, Организация = &Организация) КАК РаботникиОрганизаций
		| ГДЕ Истина " + УсловиеНаПодразделение(КонецВЦикле,,ЗапросСотрудники) + "
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизаций.Должность КАК Должность,
		|	РаботникиОрганизаций.ИзменениеДолжности КАК ИзменениеДолжности,
		|	РаботникиОрганизаций.ПредыдущаяДолжность КАК ПредыдущаяДолжность,
		|	РаботникиОрганизаций.Период КАК Период,
		|	РаботникиОрганизаций.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
		|	ВЫБОР 
		|	 КОГДА РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение) 
		|	 ТОГДА РаботникиОрганизаций.Период 
		|	 ИНАЧЕ NULL
		|	КОНЕЦ КАК ДатаПриема,
		|	ВЫБОР 
		|	 КОГДА РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение) 
		|	 ТОГДА НАЧАЛОПЕРИОДА(РаботникиОрганизаций.Период, ДЕНЬ) 
		|	 ИНАЧЕ NULL
		|	КОНЕЦ КАК ДатаУвольнения,
		|	ВЫБОР КОГДА РаботникиОрганизаций.ЗанимаемыхСтавок > 0 И РаботникиОрганизаций.ЗанимаемыхСтавок < 1 ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК СокращенноеРабочееВремя,
		|	РаботникиОрганизаций.ДатаСозданияРабочегоМеста КАК ДатаСозданияРабочегоМеста,
		|	РаботникиОрганизаций.ПринятНаНовоеРабочееМесто КАК ПринятНаНовоеРабочееМесто,
		|	РаботникиОрганизаций.СтатьяКЗОТ КАК СтатьяКЗОТ, //новый реквизит
		|	РаботникиОрганизаций.Регистратор КАК Основание
		|ПОМЕСТИТЬ ВТСписокСобытияМесяца
		|ИЗ
		|	РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ
		|	( (РаботникиОрганизаций.Период >= &ДатаНач И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
		|    ИЛИ (РаботникиОрганизаций.Период > &ПериодОтчета И РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))) 
		|	И 
		|   ( (РаботникиОрганизаций.Период <= &ДатаКон И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу))
		|    ИЛИ (РаботникиОрганизаций.Период < &ДатаКон И РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)))
		|	И РаботникиОрганизаций.Организация = &Организация
		|  " + УсловиеНаПодразделение(КонецВЦикле) + "
		|//ТекстЗапросаСотрудники 
		|;
		|       
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизаций.Должность КАК Должность,
		|	РаботникиОрганизаций.ИзменениеДолжности КАК ИзменениеДолжности,
		|	РаботникиОрганизаций.ПредыдущаяДолжность КАК ПредыдущаяДолжность,
		|	РаботникиОрганизаций.Период КАК Период,
		|	РаботникиОрганизаций.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
		|	РаботникиОрганизаций.ДатаПриема КАК ДатаПриема,
		|	РаботникиОрганизаций.ДатаУвольнения КАК ДатаУвольнения,
		|	РаботникиОрганизаций.СокращенноеРабочееВремя КАК СокращенноеРабочееВремя,
		|	РаботникиОрганизаций.ПринятНаНовоеРабочееМесто КАК ПринятНаНовоеРабочееМесто,
		|	РаботникиОрганизаций.ДатаСозданияРабочегоМеста КАК ДатаСозданияРабочегоМеста,
		|	РаботникиОрганизаций.СтатьяКЗОТ КАК СтатьяКЗОТ,
		|	РаботникиОрганизаций.Основание КАК Основание
		|ПОМЕСТИТЬ ВТВсеДвижения
		|ИЗ
		|	ВТСписокНачальныеДанные КАК РаботникиОрганизаций
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизаций.Должность КАК Должность,
		|	РаботникиОрганизаций.ИзменениеДолжности КАК ИзменениеДолжности,
		|	РаботникиОрганизаций.ПредыдущаяДолжность КАК ПредыдущаяДолжность,
		|	РаботникиОрганизаций.Период КАК Период,
		|	РаботникиОрганизаций.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
		|	РаботникиОрганизаций.ДатаПриема КАК ДатаПриема,
		|	РаботникиОрганизаций.ДатаУвольнения КАК ДатаУвольнения,
		|	РаботникиОрганизаций.СокращенноеРабочееВремя КАК СокращенноеРабочееВремя,
		|	РаботникиОрганизаций.ПринятНаНовоеРабочееМесто КАК ПринятНаНовоеРабочееМесто,
		|	РаботникиОрганизаций.ДатаСозданияРабочегоМеста КАК ДатаСозданияРабочегоМеста,
		|	РаботникиОрганизаций.СтатьяКЗОТ КАК СтатьяКЗОТ,
		|	РаботникиОрганизаций.Основание КАК Основание
		|ИЗ
		|	ВТСписокСобытияМесяца КАК РаботникиОрганизаций
		|;
		|       
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Период,
		|	РаботникиОрганизаций.Сотрудник,
		|	МАКСИМУМ(РаботникиОрганизацийПредыдущие.Период) КАК ПериодПредыдущего
		|ПОМЕСТИТЬ ВТПериодыПредыдущего
		|ИЗ
		|	ВТВсеДвижения КАК РаботникиОрганизаций
		|   ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТВсеДвижения КАК РаботникиОрганизацийПредыдущие
		|   ПО РаботникиОрганизаций.Сотрудник = РаботникиОрганизацийПредыдущие.Сотрудник 
		|    И РаботникиОрганизаций.Период > РаботникиОрганизацийПредыдущие.Период 
	    |СГРУППИРОВАТЬ ПО
		|	РаботникиОрганизаций.Период,
		|	РаботникиОрганизаций.Сотрудник
		|;
		|       
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизаций.Должность КАК Должность,//
		|	РаботникиОрганизаций.ИзменениеДолжности КАК ИзменениеДолжности,
		|	РаботникиОрганизаций.ПредыдущаяДолжность КАК ПредыдущаяДолжность,
		|	РаботникиОрганизацийПредыдущие.Должность КАК ДолжностьПредыдущий,
		|	РаботникиОрганизаций.Период КАК Период,
		|	РаботникиОрганизаций.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
		|	РаботникиОрганизаций.ДатаПриема КАК ДатаПриема,
		|	РаботникиОрганизаций.ДатаУвольнения КАК ДатаУвольнения,
		|	РаботникиОрганизаций.СокращенноеРабочееВремя КАК СокращенноеРабочееВремя,
		|	РаботникиОрганизаций.ПринятНаНовоеРабочееМесто КАК ПринятНаНовоеРабочееМесто,
		|	РаботникиОрганизаций.ДатаСозданияРабочегоМеста КАК ДатаСозданияРабочегоМеста,
		|	РаботникиОрганизаций.СтатьяКЗОТ КАК СтатьяКЗОТ,
		|	РаботникиОрганизаций.Основание КАК Основание
		|ПОМЕСТИТЬ ВТКадроваяИстория
		|ИЗ
		|	ВТВсеДвижения КАК РаботникиОрганизаций
		|   ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТПериодыПредыдущего КАК ПериодыПредыдущего
		|   ПО РаботникиОрганизаций.Сотрудник = ПериодыПредыдущего.Сотрудник 
		|    И РаботникиОрганизаций.Период = ПериодыПредыдущего.Период 
		|   ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТВсеДвижения КАК РаботникиОрганизацийПредыдущие
		|   ПО РаботникиОрганизаций.Сотрудник = РаботникиОрганизацийПредыдущие.Сотрудник 
		|    И ПериодыПредыдущего.ПериодПредыдущего = РаботникиОрганизацийПредыдущие.Период
		|ГДЕ
		|   РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение) 
		|   ИЛИ (РаботникиОрганизаций.Должность <> РаботникиОрганизацийПредыдущие.Должность 
		|   И РаботникиОрганизаций.ИзменениеДолжности 
		|   И РаботникиОрганизаций.Должность <> РаботникиОрганизаций.ПредыдущаяДолжность)
		
		|   ИЛИ (РаботникиОрганизаций.Должность <> РаботникиОрганизацийПредыдущие.Должность 
		|   И Не РаботникиОрганизаций.ИзменениеДолжности 
		|   И РаботникиОрганизаций.ПредыдущаяДолжность = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка))
		|;
		|       
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизаций.Должность КАК Должность,
		|	РаботникиОрганизаций.ДолжностьПредыдущий КАК ДолжностьПредыдущий,
		|	РаботникиОрганизаций.Период КАК Период,
		|	РаботникиОрганизаций.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
		|	РаботникиОрганизаций.ДатаПриема КАК ДатаПриема,
		|	ЕСТЬNULL(Увольнения.ДатаУвольнения,РаботникиОрганизаций.ДатаУвольнения) КАК ДатаУвольнения,
		|	РаботникиОрганизаций.СокращенноеРабочееВремя КАК СокращенноеРабочееВремя,
		|	РаботникиОрганизаций.ПринятНаНовоеРабочееМесто КАК ПринятНаНовоеРабочееМесто,
		|	РаботникиОрганизаций.ДатаСозданияРабочегоМеста КАК ДатаСозданияРабочегоМеста,
		|	ЕСТЬNULL(Увольнения.СтатьяКЗОТ, РаботникиОрганизаций.СтатьяКЗОТ) КАК СтатьяКЗОТ,
		|	РаботникиОрганизаций.Основание КАК Основание
		|ПОМЕСТИТЬ ВТКадроваяИсторияМесяца
		|ИЗ
		|	ВТКадроваяИстория КАК РаботникиОрганизаций
		|   ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТКадроваяИстория КАК Увольнения
		|   ПО РаботникиОрганизаций.Сотрудник = Увольнения.Сотрудник
		|   И РаботникиОрганизаций.Основание = Увольнения.Основание
		|   И РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу) 
		|   И Увольнения.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение) 
		|   ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТКадроваяИстория КАК Приемы
		|   ПО РаботникиОрганизаций.Сотрудник = Приемы.Сотрудник
		|   И РаботникиОрганизаций.Основание = Приемы.Основание
		|   И Приемы.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу) 
		|   И РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение) 
		|ГДЕ
		|   РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПустаяСсылка) 
		|   И Приемы.Сотрудник ЕСТЬ NULL
		|";
	
	ЗапросСотрудники.Текст = СтрЗаменить(ЗапросСотрудники.Текст, "РаботникиОрганизаций.Должность КАК Должность,//","ВЫБОР КОГДА РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение) ТОГДА РаботникиОрганизацийПредыдущие.Должность ИНАЧЕ РаботникиОрганизаций.Должность КОНЕЦ КАК Должность,");

	ЗапросСотрудники.Выполнить();
	
	ЗапросСотрудники.Текст =
		"ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|	МИНИМУМ(РаботникиОрганизаций.ДатаПриема) КАК ДатаПриема,
		|	МАКСИМУМ(РаботникиОрганизаций.ДатаУвольнения) КАК ДатаУвольнения,
		|	МАКСИМУМ(РаботникиОрганизаций.СокращенноеРабочееВремя) КАК СокращенноеРабочееВремя,
		|	МАКСИМУМ(РаботникиОрганизаций.ПринятНаНовоеРабочееМесто) КАК ПринятНаНовоеРабочееМесто,
		|	МАКСИМУМ(РаботникиОрганизаций.ДатаСозданияРабочегоМеста) КАК ДатаСозданияРабочегоМеста
		|ИЗ
		|	ВТКадроваяИстория КАК РаботникиОрганизаций
		|ГДЕ
		|   РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Перемещение) 
		|СГРУППИРОВАТЬ ПО
		|   Сотрудник
		|
		|";
	
		тзРаботники = ЗапросСотрудники.Выполнить().Выгрузить();
		
	ЗапросСотрудники.Текст =
		"ВЫБРАТЬ
		|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|	РаботникиОрганизаций.Сотрудник.ФизическоеЛицо КАК ФизЛицо,
		|	РаботникиОрганизаций.Сотрудник.ФизическоеЛицо.КодПоДРФО КАК КодПоДРФО,
		|	Должности.Наименование КАК Должность,
		|	Должности.КодКП КАК ДолжностьКодКП,
		|	Должности.НаименованиеПоКП КАК ДолжностьНаименованиеПоКП,
		|	Должности.КодЗКППТР КАК КодЗКППТР,
		|	ДолжностиПредыдущий.Наименование КАК ДолжностьПредыдущий,
		|	ДолжностиПредыдущий.КодКП КАК ДолжностьКодКППредыдущий,
		|	ДолжностиПредыдущий.НаименованиеПоКП КАК ДолжностьНаименованиеПоКППредыдущий,
		|	ДолжностиПредыдущий.КодЗКППТР КАК КодЗКППТРПредыдущий,
		|	РаботникиОрганизаций.Период КАК Период,
		|	РаботникиОрганизаций.ПричинаИзмененияСостояния КАК ПричинаИзмененияСостояния,
		|	РаботникиОрганизаций.ДатаПриема КАК ДатаПриема,
		|	РаботникиОрганизаций.ДатаУвольнения КАК ДатаУвольнения,
		|	РаботникиОрганизаций.ДатаСозданияРабочегоМеста КАК ДатаСозданияРабочегоМеста,
		|	РаботникиОрганизаций.СтатьяКЗОТ КАК СтатьяКЗОТ,
		|	РаботникиОрганизаций.Основание КАК Основание,
		|	РаботникиОрганизаций.Основание.Дата КАК ОснованиеДата,
		|	РаботникиОрганизаций.Основание.Номер КАК ОснованиеНомер,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизаций.Сотрудник.ИНАГРО_ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК Категория,
		|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
		|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ГражданствоФизЛиц.ИНАГРО_НеЯвляетсяНалоговымРезидентом, ЛОЖЬ)
		|			ТОГДА 0
		|		КОГДА ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
		|				ИЛИ ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.Украина)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Гражданин
		|ИЗ
		|	ВТКадроваяИсторияМесяца КАК РаботникиОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(КОНЕЦПЕРИОДА(&ПериодОтчета, МЕСЯЦ), ) КАК ФИОФизЛицСрезПоследних
		|		ПО РаботникиОрганизаций.Сотрудник.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(КОНЕЦПЕРИОДА(&ПериодОтчета, МЕСЯЦ), ) КАК ГражданствоФизЛиц
		|		ПО РаботникиОрганизаций.Сотрудник.ФизическоеЛицо = ГражданствоФизЛиц.ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
		|		ПО (Должности.Ссылка = РаботникиОрганизаций.Должность)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК ДолжностиПредыдущий
		|		ПО (ДолжностиПредыдущий.Ссылка = РаботникиОрганизаций.ДолжностьПредыдущий)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОснованияУвольнения КАК ОснованияУвольненияИзОрганизации
		|		ПО (ОснованияУвольненияИзОрганизации.Ссылка = РаботникиОрганизаций.СтатьяКЗОТ)
		|ГДЕ РаботникиОрганизаций.Сотрудник В (&Сотрудники)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Фамилия,
		|	Имя,
		|	Отчество,
		|	КодПоДРФО,
		|	ПричинаИзмененияСостояния,
		|	ДатаПриема,
		|	ДатаУвольнения";
	
		Если НЕ СтруктураРеквизитовФормы.НазначениеПенсии И НЕ СтруктураРеквизитовФормы.НазначениеСоцВыплат Тогда
			ЗапросСотрудники.Текст = СтрЗаменить(ЗапросСотрудники.Текст, "ГДЕ РаботникиОрганизаций.Сотрудник В (&Сотрудники)", ""); 
		КонецЕсли;
	
	Результат = ЗапросСотрудники.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции	

&НаСервере
Функция УсловиеНаПодразделение(КонецВЦикле, ИмяТаблицы = "", Запрос = Неопределено)

	Если ЗначениеЗаполнено(Подразделение) Тогда
		
		// установим дополнительные параметры в запросе
		Если НЕ Запрос = Неопределено Тогда
		
			Запрос.УстановитьПараметр("Подразделение",     Подразделение);	
			Запрос.УстановитьПараметр("ДатаПодразделения", КонецВЦикле);	
		
		КонецЕсли;
		
		// сформируем текст фильтра
		Возврат  " И " + ?(ЗначениеЗаполнено(ИмяТаблицы), ИмяТаблицы + ".", "")+ "Сотрудник В (ВЫБРАТЬ
								   |				    ТекРаботники.Сотрудник
		                      	   |			  ИЗ
		                      	   |			 		РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&ДатаПодразделения, Организация = &Организация) КАК ТекРаботники
		                      	   |			  ГДЕ
		                      	   |						(ТекРаботники.ПодразделениеОрганизации В ИЕРАРХИИ (&Подразделение) ИЛИ ТекРаботники.ПодразделениеОрганизации = &Подразделение)
								   |			  )
								   |";
	Иначе
		
		Возврат ""							   
		
	КонецЕсли;

КонецФункции // ()


&НаСервере
Функция ПолучитьБольничныеПредприятия() Экспорт // ИНАГРО. Экспортируем для использования в форме настройки 1С-Звит
	
	ВидыРасчетов = Новый Массив;
	
	ВидыРасчетов.Добавить(ПланыВидовРасчета.ИНАГРО_Начисления.ОплатаПоСреднемуБЛОрганизации);

	ВидыРасчетов.Добавить(ПланыВидовРасчета.ИНАГРО_Начисления.ОплатаПоСреднемуБЛТравмаНаПроизводстве);

	Возврат ВидыРасчетов;

КонецФункции //

&НаСервере
Функция ПолучитьСписокВидовРасчетовПоВидуНалога(Налог) Экспорт // ИНАГРО 
	
	ВидыРасчетов = Новый Массив;

	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("ПериодОтчета", НачалоМесяца(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.Параметры.Вставить("Организация", СтруктураРеквизитовФормы.Организация);
	Запрос.Параметры.Вставить("Налог", Налог);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Базовые.ВидРасчета 
	|ИЗ 
	|	ПланВидовРасчета.ИНАГРО_ВзносыВФонды.БазовыеВидыРасчета КАК Базовые
	|ГДЕ
	|	Базовые.Ссылка В (ВЫБРАТЬ ВидРасчета ИЗ РегистрСведений.ИНАГРО_ВидыРасчетовВзносовВФонды.СрезПоследних(&ПериодОтчета, Налог В (&Налог)))
	|";
	ВидыРасчетовПоНалогу = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"); 
	Для каждого ВидРасчета Из ВидыРасчетовПоНалогу Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;

	Возврат ВидыРасчетов;

КонецФункции // ()

&НаСервере
Функция ПолучитьБольничныеФССНесчСлучай() Экспорт // ИНАГРО. Экспортируем для использования в форме настройки 1С-Звит
	
	ВидыРасчетов = Новый Массив;
	
	ВидыРасчетов.Добавить(ПланыВидовРасчета.ИНАГРО_Начисления.ОплатаПоСреднемуБЛ);

	Возврат ВидыРасчетов;

КонецФункции //

&НаСервере
Функция ПолучитьСписокДекретные() Экспорт // ИНАГРО
	
	ВидыРасчетов = Новый Массив;
	
	ВидыРасчетов.Добавить(ПланыВидовРасчета.ИНАГРО_Начисления.ОплатаПоСреднемуБЛПоБеременностиИРодам);

	Возврат ВидыРасчетов;

КонецФункции //

&НаСервере
Функция ПолучитьСписокБезСохранения() Экспорт // ИНАГРО Экспортируем для использования в форме настройки 1С-Звит
	
	ВидыРасчетов = Новый Массив;

	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("СпособНулеваяСумма", Перечисления.СпособыРасчетаНачислений.НулеваяСумма);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Ссылка КАК ВидРасчета 
		|ИЗ 
		|	ПланВидовРасчета.ИНАГРО_Начисления КАК Начисления
		|ГДЕ
		|	Начисления.СпособРасчета = &СпособНулеваяСумма
		|";
	
	Выборка = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"); 
	
	ПВР = ПланыВидовРасчета["ИНАГРО_Начисления"];		
	Для каждого ВидРасчета Из Выборка Цикл
		ИмяПредопределенного = ПВР.ПолучитьИмяПредопределенного(ВидРасчета);
		Если    ИмяПредопределенного = "Замещение"
			ИЛИ ИмяПредопределенного = "Совмещение" Тогда
			Продолжить;
		КонецЕсли;
		
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;

	Возврат ВидыРасчетов;

КонецФункции //

&НаСервере
Функция  ПолучитьСписокДоговоровГПХ(КонецВЦикле) // ИНАГРО
	
	ЗапросГПХ = Новый Запрос;
	ЗапросГПХ.Текст = "ВЫБРАТЬ
	                  |	Работники.Сотрудник КАК Сотрудник,
	                  |	ВЫБОР
	                  |		КОГДА Работники.Сотрудник.ОсновноеНазначение.ИНАГРО_ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	                  |			ТОГДА 1
	                  |		ИНАЧЕ 0
	                  |	КОНЕЦ КАК ГПХпоОснМестуРаботы,
	                  |	Работники.Сотрудник.ФизическоеЛицо КАК ФизЛицо,
	                  |	Работники.Сотрудник.ФизическоеЛицо.КодПоДРФО КАК КодПоДРФО,
	                  |	МИНИМУМ(ВЫБОР
	                  |			КОГДА Работники.ДатаНачала >= &ДатаНач
	                  |					И Работники.ДатаНачала <= &ДатаКон
	                  |				ТОГДА Работники.ДатаНачала
	                  |			ИНАЧЕ NULL
	                  |		КОНЕЦ) КАК ДатаПриема,
	                  |	МАКСИМУМ(ВЫБОР
	                  |			КОГДА Работники.ДатаОкончания >= &ДатаНач
	                  |					И Работники.ДатаОкончания <= &ДатаКон
	                  |				ТОГДА Работники.ДатаОкончания
	                  |			ИНАЧЕ NULL
	                  |		КОНЕЦ) КАК ДатаУвольнения,
	                  |	МАКСИМУМ(ФИОФизЛицСрезПоследних.Фамилия) КАК Фамилия,
	                  |	МАКСИМУМ(ФИОФизЛицСрезПоследних.Имя) КАК Имя,
	                  |	МАКСИМУМ(ФИОФизЛицСрезПоследних.Отчество) КАК Отчество,
	                  |	МАКСИМУМ(ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСозданияРабочегоМеста,
	                  |	МАКСИМУМ(ЛОЖЬ) КАК ПринятНаНовоеРабочееМесто,
	                  |	МАКСИМУМ(ВЫБОР
	                  |			КОГДА ЕСТЬNULL(ГражданствоФизЛиц.ИНАГРО_НеЯвляетсяНалоговымРезидентом, ЛОЖЬ)
	                  |				ТОГДА 0
	                  |			КОГДА ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	                  |					ИЛИ ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.Украина)
	                  |				ТОГДА 1
	                  |			ИНАЧЕ 0
	                  |		КОНЕЦ) КАК Гражданин,
	                  |	Работники.ОснованиеПрекращения.СтатьяЗакона КАК СтатьяКЗОТ,
	                  |	Работники.Дата КАК ОснованиеДата,
	                  |	Работники.Ссылка КАК Основание
	                  |ИЗ
	                  |	Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом КАК Работники
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаКон, ) КАК ФИОФизЛицСрезПоследних
	                  |		ПО Работники.Сотрудник.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизическоеЛицо
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(&ДатаКон, ) КАК ГражданствоФизЛиц
	                  |		ПО Работники.Сотрудник.ФизическоеЛицо = ГражданствоФизЛиц.ФизическоеЛицо
	                  |ГДЕ
	                  |	Работники.Проведен
	                  |	И Работники.Организация = &Организация
	                  |	И (Работники.ДатаОкончания >= &ДатаНач
	                  |				И Работники.ДатаОкончания <= &ДатаКон
	                  |			ИЛИ Работники.ДатаНачала >= &ДатаНач
	                  |				И Работники.ДатаНачала <= &ДатаКон)
	                  |	И Работники.Сотрудник В (&Сотрудники)
	                  |
	                  |СГРУППИРОВАТЬ ПО
	                  |	Работники.Сотрудник,
	                  |	Работники.Сотрудник.ФизическоеЛицо,
	                  |	Работники.Сотрудник.ФизическоеЛицо.КодПоДРФО,
	                  |	Работники.ОснованиеПрекращения.СтатьяЗакона,
	                  |	ВЫБОР
	                  |		КОГДА Работники.Сотрудник.ОсновноеНазначение.ИНАГРО_ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	                  |			ТОГДА 1
	                  |		ИНАЧЕ 0
	                  |	КОНЕЦ,
	                  |	Работники.Дата,
	                  |	Работники.Ссылка
	                  |
	                  |УПОРЯДОЧИТЬ ПО
	                  |	ФизЛицо";	
					  
	ЗапросГПХ.УстановитьПараметр("ДатаНач",СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ЗапросГПХ.УстановитьПараметр("ДатаКон",КонецВЦикле);
	ЗапросГПХ.УстановитьПараметр("Организация",СтруктураРеквизитовФормы.Организация);
	ЗапросГПХ.УстановитьПараметр("Сотрудники",СтруктураРеквизитовФормы.Сотрудники);
	
	Если НЕ СтруктураРеквизитовФормы.НазначениеПенсии И НЕ СтруктураРеквизитовФормы.НазначениеСоцВыплат Тогда
		ЗапросГПХ.Текст = СтрЗаменить(ЗапросГПХ.Текст, "И Работники.Сотрудник В (&Сотрудники)", ""); 
	КонецЕсли;
	
	Результат = ЗапросГПХ.Выполнить().Выгрузить();
	
	
	ЗапросГПХ = Новый Запрос;
	ЗапросГПХ.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ЗапросГПХ.УстановитьПараметр("ДатаНач",СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	ЗапросГПХ.УстановитьПараметр("ДатаКон",КонецВЦикле);
	ЗапросГПХ.УстановитьПараметр("Организация",СтруктураРеквизитовФормы.Организация);
	
	ЗапросГПХ.Текст = "ВЫБРАТЬ
              |	Работники.Сотрудник КАК Сотрудник,
			  |	ВЫБОР КОГДА Работники.Сотрудник.ОсновноеНазначение.ИНАГРО_ВидЗанятости = Значение(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК ГПХпоОснМестуРаботы,
			  |	Работники.Сотрудник.ФизическоеЛицо КАК ФизЛицо,
		      |	Работники.Сотрудник.ФизическоеЛицо.КодПоДРФО КАК КодПоДРФО,
			  |	ВЫБОР
              |			КОГДА Работники.ДатаНачала >= &ДатаНач
              |					И Работники.ДатаНачала <= &ДатаКон
              |				ТОГДА Работники.ДатаНачала
              |			ИНАЧЕ NULL
              |	КОНЕЦ КАК ДатаПриема,
              |	ВЫБОР
              |			КОГДА Работники.ДатаОкончания >= &ДатаНач
              |					И Работники.ДатаОкончания <= &ДатаКон
              |				ТОГДА Работники.ДатаОкончания
              |			ИНАЧЕ NULL
              |	КОНЕЦ КАК ДатаУвольнения,
			  |	Работники.Ссылка КАК Основание,
			  |	ЗНАЧЕНИЕ(Справочник.ОснованияУвольнения.ПустаяСсылка) КАК СтатьяКЗОТ
			  |ПОМЕСТИТЬ ВТДоговора
			  |ИЗ
              |	Документ.ИНАГРО_ДоговорНаВыполнениеРаботСФизЛицом КАК Работники
              |ГДЕ
              |		Работники.Проведен
              |   И Работники.Организация = &Организация
              |   И (Работники.ДатаОкончания >= &ДатаНач И Работники.ДатаОкончания <= &ДатаКон
			  |		  ИЛИ Работники.ДатаНачала    >= &ДатаНач И Работники.ДатаНачала    <= &ДатаКон)
              |";
				  
	ЗапросГПХ.Выполнить();
	
	ЗапросГПХ.Текст = "ВЫБРАТЬ
	                  |	Работники.Сотрудник КАК Сотрудник,
	                  |	МИНИМУМ(Работники.ДатаПриема) КАК ДатаПриема,
	                  |	МАКСИМУМ(Работники.ДатаУвольнения) КАК ДатаУвольнения,
	                  |	МАКСИМУМ(ФИОФизЛицСрезПоследних.Фамилия) КАК Фамилия,
	                  |	МАКСИМУМ(ФИОФизЛицСрезПоследних.Имя) КАК Имя,
	                  |	МАКСИМУМ(ФИОФизЛицСрезПоследних.Отчество) КАК Отчество,
	                  |	МАКСИМУМ(ВЫБОР
	                  |			КОГДА ЕСТЬNULL(ГражданствоФизЛиц.ИНАГРО_НеЯвляетсяНалоговымРезидентом, ЛОЖЬ)
	                  |				ТОГДА 0
	                  |			КОГДА ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	                  |					ИЛИ ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.Украина)
	                  |				ТОГДА 1
	                  |			ИНАЧЕ 0
	                  |		КОНЕЦ) КАК Гражданин
	                  |ИЗ
	                  |	ВТДоговора КАК Работники
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаКон, ) КАК ФИОФизЛицСрезПоследних
	                  |		ПО Работники.Сотрудник.Физическоелицо = ФИОФизЛицСрезПоследних.ФизическоеЛицо
	                  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(&ДатаКон, ) КАК ГражданствоФизЛиц
	                  |		ПО (Работники.Сотрудник.Физическоелицо = ФИОФизЛицСрезПоследних.ФизическоеЛицо)
	                  |ГДЕ Работники.Сотрудник В (&Сотрудники)
	                  |
	                  |СГРУППИРОВАТЬ ПО
	                  |	Работники.Сотрудник";
	
	Если НЕ СтруктураРеквизитовФормы.НазначениеПенсии И НЕ СтруктураРеквизитовФормы.НазначениеСоцВыплат Тогда
		ЗапросГПХ.Текст = СтрЗаменить(ЗапросГПХ.Текст, "ГДЕ Работники.Сотрудник В (&Сотрудники)", ""); 
	КонецЕсли;
	ЗапросГПХ.УстановитьПараметр("Сотрудники",СтруктураРеквизитовФормы.Сотрудники);
	
	тзГПХ = ЗапросГПХ.Выполнить().Выгрузить();				  
	
	Возврат Результат;	

КонецФункции

&НаСервере
Функция ПолучитьСписокОтпуска(СписокВидовРасчета)  // ИНАГРО
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНач",СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаКон",СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("нДатаКон",НачалоДня(СтруктураРеквизитовФормы.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("Организация",СтруктураРеквизитовФормы.Организация);
	Запрос.УстановитьПараметр("Сотрудники",СтруктураРеквизитовФормы.Сотрудники);
	Запрос.УстановитьПараметр("ВР",СписокВидовРасчета);
	
	Запрос.УстановитьПараметр("ДатаПроверкиНачало",НачалоДня(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета-1));
	Запрос.УстановитьПараметр("ДатаПроверкиКонец",ДобавитьМесяц(СтруктураРеквизитовФормы.мДатаНачалаПериодаОтчета,1));
	
	ТекстЗапросаВТНачало ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.ПериодДействияКонец КАК Конец
	|ПОМЕСТИТЬ ВТНачало
	|ИЗ
	|	РегистрРасчета.ИНАГРО_Начисления.ФактическийПериодДействия КАК Начисления   // ИНАГРО
	|ГДЕ
	|	Начисления.Организация = &Организация
	|	И Начисления.ПериодДействияКонец = &ДатаПроверкиНачало
	|	И Начисления.ПериодРегистрации <= &ДатаНач
	|	И Начисления.ВидРасчета В (&ВР)
	|	И НЕ Начисления.Сторно
	|	И Начисления.Сотрудник = Начисления.Назначение
	|";
	
	ТекстЗапросаВТКонец ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.ПериодДействияНачало КАК Начало
	|ПОМЕСТИТЬ ВТКонец
	|ИЗ
	|	РегистрРасчета.ИНАГРО_Начисления.ФактическийПериодДействия КАК Начисления
	|ГДЕ
	|	Начисления.Организация = &Организация
	|	И Начисления.ПериодДействияНачало = &ДатаПроверкиКонец
	|	И Начисления.ПериодРегистрации <= &ДатаНач
	|	И Начисления.ВидРасчета В (&ВР)
	|	И НЕ Начисления.Сторно
	|	И Начисления.Сотрудник = Начисления.Назначение
	|";
	
	ТекстЗапросаВТПлановыеНачало ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.Действует КАК Действует   // ИНАГРО
	|ПОМЕСТИТЬ ВТПлановыеНачало
	|ИЗ
	|	РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&ДатаПроверкиНачало,Организация = &Организация И ВидРасчета В (&ВР)) КАК Начисления
	|ГДЕ
	|	Начисления.Действует//Размер
	|";
	
	ТекстЗапросаВТПлановыеКонец ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.Действует КАК Действует   // ИНАГРО
	|ПОМЕСТИТЬ ВТПлановыеКонец
	|ИЗ
	|	РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&ДатаПроверкиКонец,Организация = &Организация И ВидРасчета В (&ВР)) КАК Начисления
	|ГДЕ
	|	Начисления.Действует//Размер
	|";
	
	ТекстЗапроса ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              |	ВложенныйЗапрос.Сотрудник КАК Сотрудник,
	              |	ВложенныйЗапрос.ФизЛицо КАК ФизЛицо,
	              |	ВложенныйЗапрос.КодПоДРФО КАК КодПоДРФО,
	              |	ВЫБОР
	              |		КОГДА ВложенныйЗапрос.Начало МЕЖДУ &ДатаНач И &ДатаКон
	              |			ТОГДА ВложенныйЗапрос.Начало
	              |		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	              |	КОНЕЦ КАК Начало,
	              |	ВЫБОР
	              |		КОГДА ВложенныйЗапрос.Конец МЕЖДУ &ДатаНач И &ДатаКон
	              |			ТОГДА ВложенныйЗапрос.Конец
	              |		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	              |	КОНЕЦ КАК Конец,
	              |	ВложенныйЗапрос.Основание КАК Основание,
	              |	ВложенныйЗапрос.ОснованиеДата КАК ОснованиеДата,
	              |	ВложенныйЗапрос.ОснованиеНомер КАК ОснованиеНомер,
	              |	ВложенныйЗапрос.Фамилия КАК Фамилия,
	              |	ВложенныйЗапрос.Имя КАК Имя,
	              |	ВложенныйЗапрос.Отчество КАК Отчество,
	              |	ВложенныйЗапрос.Гражданин КАК Гражданин
	              |ИЗ
	              |	(ВЫБРАТЬ
	              |		Начисления.Сотрудник КАК Сотрудник,
	              |		Начисления.Сотрудник.ФизическоеЛицо КАК ФизЛицо,
	              |		Начисления.Сотрудник.ФизическоеЛицо.КодПоДРФО КАК КодПоДРФО,
	              |		МИНИМУМ(ВЫБОР
	              |				КОГДА Начисления.ПериодДействияНачало <> &ДатаНач
	              |					ТОГДА Начисления.ПериодДействияНачало
	              |				КОГДА ПроверкаНачало.Сотрудник ЕСТЬ NULL
	              |						И ПроверкаПлановыеНачало.Сотрудник ЕСТЬ NULL
	              |					ТОГДА Начисления.ПериодДействияНачало
	              |				ИНАЧЕ NULL
	              |			КОНЕЦ) КАК Начало,
	              |		МАКСИМУМ(ВЫБОР
	              |				КОГДА НАЧАЛОПЕРИОДА(Начисления.ПериодДействияКонец, ДЕНЬ) <> &нДатаКон
	              |					ТОГДА Начисления.ПериодДействияКонец
	              |				КОГДА ПроверкаКонец.Сотрудник ЕСТЬ NULL
	              |						И ПроверкаПлановыеКонец.Сотрудник ЕСТЬ NULL
	              |					ТОГДА Начисления.ПериодДействияКонец
	              |				ИНАЧЕ NULL
	              |			КОНЕЦ) КАК Конец,
	              |		Начисления.Регистратор КАК Основание,
	              |		Начисления.Регистратор.Дата КАК ОснованиеДата,
	              |		Начисления.Регистратор.Номер КАК ОснованиеНомер,
	              |		ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
	              |		ФИОФизЛицСрезПоследних.Имя КАК Имя,
	              |		ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
	              |		ВЫБОР
	              |			КОГДА ЕСТЬNULL(ГражданствоФизЛиц.ИНАГРО_НеЯвляетсяНалоговымРезидентом, ЛОЖЬ)
	              |				ТОГДА 0
	              |			КОГДА ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	              |					ИЛИ ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.Украина)
	              |				ТОГДА 1
	              |			ИНАЧЕ 0
	              |		КОНЕЦ КАК Гражданин
	              |	ИЗ
	              |		РегистрРасчета.ИНАГРО_Начисления.ФактическийПериодДействия КАК Начисления
	              |			ЛЕВОЕ СОЕДИНЕНИЕ ВТНачало КАК ПроверкаНачало
	              |			ПО Начисления.Сотрудник = ПроверкаНачало.Сотрудник
	              |			ЛЕВОЕ СОЕДИНЕНИЕ ВТКонец КАК ПроверкаКонец
	              |			ПО Начисления.Сотрудник = ПроверкаКонец.Сотрудник
	              |			ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеНачало КАК ПроверкаПлановыеНачало
	              |			ПО Начисления.Сотрудник = ПроверкаПлановыеНачало.Сотрудник
	              |			ЛЕВОЕ СОЕДИНЕНИЕ ВТПлановыеКонец КАК ПроверкаПлановыеКонец
	              |			ПО Начисления.Сотрудник = ПроверкаПлановыеКонец.Сотрудник
	              |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаКон, ) КАК ФИОФизЛицСрезПоследних
	              |			ПО Начисления.Сотрудник.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизическоеЛицо
	              |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(&ДатаКон, ) КАК ГражданствоФизЛиц
	              |			ПО Начисления.Сотрудник.ФизическоеЛицо = ГражданствоФизЛиц.ФизическоеЛицо
	              |	ГДЕ
	              |		Начисления.Организация = &Организация
	              |		И Начисления.ВидРасчета В(&ВР)
	              |		И НЕ Начисления.Сторно
	              |		И Начисления.Сотрудник = Начисления.Назначение
	              |	
	              |	СГРУППИРОВАТЬ ПО
	              |		Начисления.Сотрудник,
	              |		Начисления.Сотрудник.ФизическоеЛицо,
	              |		Начисления.Сотрудник.ФизическоеЛицо.КодПоДРФО,
	              |		Начисления.Регистратор,
	              |		Начисления.Регистратор.Дата,
	              |		Начисления.Регистратор.Номер,
	              |		ФИОФизЛицСрезПоследних.Фамилия,
	              |		ФИОФизЛицСрезПоследних.Имя,
	              |		ФИОФизЛицСрезПоследних.Отчество,
	              |		ВЫБОР
	              |			КОГДА ЕСТЬNULL(ГражданствоФизЛиц.ИНАГРО_НеЯвляетсяНалоговымРезидентом, ЛОЖЬ)
	              |				ТОГДА 0
	              |			КОГДА ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	              |					ИЛИ ЕСТЬNULL(ГражданствоФизЛиц.Страна, ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.СтраныМира.Украина)
	              |				ТОГДА 1
	              |			ИНАЧЕ 0
	              |		КОНЕЦ) КАК ВложенныйЗапрос
	              |ГДЕ
	              |	(ВложенныйЗапрос.Начало МЕЖДУ &ДатаНач И &ДатаКон
	              |			ИЛИ ВложенныйЗапрос.Конец МЕЖДУ &ДатаНач И &ДатаКон)
	              |	И ВложенныйЗапрос.Сотрудник В (&Сотрудники)";
	
	Если НЕ СтруктураРеквизитовФормы.НазначениеПенсии И НЕ СтруктураРеквизитовФормы.НазначениеСоцВыплат Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ВложенныйЗапрос.Сотрудник В (&Сотрудники)", ""); 
	КонецЕсли;

	Запрос.Текст = ТекстЗапросаВТНачало;
	Запрос.Выполнить();
	Запрос.Текст = ТекстЗапросаВТКонец;
	Запрос.Выполнить();
	Запрос.Текст = ТекстЗапросаВТПлановыеНачало;
	Запрос.Выполнить();
	Запрос.Текст = ТекстЗапросаВТПлановыеКонец;
	Запрос.Выполнить();
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции	


&НаСервере
Функция ПолучитьСписокПоУходуДо3() Экспорт // ИНАГРО	
	ВидыРасчетов = Новый Массив;
	
	Запрос = Новый Запрос();
	Выполнить("Запрос.Параметры.Вставить(""ВидВремениПоУходу"", Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам);");
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Ссылка КАК ВидРасчета 
		|ИЗ 
		|	ПланВидовРасчета.ИНАГРО_Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &ВидВремениПоУходу
		|	И Начисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.НулеваяСумма)
		|";
		
	Выборка = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"); 
	Для каждого ВидРасчета Из Выборка Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;

	Возврат ВидыРасчетов;

КонецФункции //


&НаСервере
Функция ПолучитьСписокПоУходуДо6() Экспорт // ИНАГРО	
	ВидыРасчетов = Новый Массив;
	
	Запрос = Новый Запрос();
	Выполнить("Запрос.Параметры.Вставить(""ВидВремениПоУходу"", Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком);");
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Ссылка КАК ВидРасчета 
		|ИЗ 
		|	ПланВидовРасчета.ИНАГРО_Начисления КАК Начисления
		|ГДЕ
		|	Начисления.ОбозначениеВТабелеУчетаРабочегоВремени = &ВидВремениПоУходу
		|	И Начисления.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаНачислений.НулеваяСумма)
		|";
		
	Выборка = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"); 
	Для каждого ВидРасчета Из Выборка Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;

	Возврат ВидыРасчетов;

КонецФункции //

&НаСервере
Функция ОбработатьПредставлениеОснования(Основание, ОснованиеДата) // ИНАГРО
	
	ОснованиеНомер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Основание.Номер);
	Возврат "№ "+ОснованиеНомер+" від " + Формат(ОснованиеДата,"Л=uk; ДФ='dd.MM.yyyy р.'");
	
КонецФункции


&НаСервере
// Выпоняет расчет числа застрахованных лиц и лиц, получающих пособие по уходу за ребенком.
Процедура РассчитатьЧислоЗастрахованныхЛиц (ТаблицаБазВзносовОтчетногоПериода, СчетчикМесяцев) // ИНАГРО
	
	ТаблицаКоличестваЗастрахованныхЛиц = ТаблицаБазВзносовОтчетногоПериода.Скопировать();
	ТаблицаКоличестваЗастрахованныхЛиц.Свернуть("ФизЛицо, ФизЛицоПол", "");
	
	СообщениеВыводилось = Ложь;
	Для каждого ФизЛицо Из ТаблицаКоличестваЗастрахованныхЛиц Цикл
		Если НЕ ЗначениеЗаполнено(ФизЛицо.ФизЛицоПол) Тогда
			Если СообщениеВыводилось = Ложь Тогда
				СообщениеВыводилось = Истина;
				Сообщить(НСтр("ru = 'В карточках следующих физ.лиц не указан их пол. Заполнение показателя в шапке Таблицы 1 ""Кількість застрахованих осіб у звітному періоді, у тому числі"" будет не корректным:'; uk = 'У картках наступних фіз. осіб не зазначена їхня стать. Заповнення показника у шапці Таблиці 1 ""Кількість застрахованих осіб у звітному періоді, у тому числі"" буде не коректним:'"));
			КонецЕсли;
			Сообщить(Символы.Таб + ФизЛицо.ФизЛицо);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДанныхДекларация["R106G"+Строка(3+СчетчикМесяцев)] = ТаблицаКоличестваЗастрахованныхЛиц.Количество();
	
	НайденныеСтроки = ТаблицаКоличестваЗастрахованныхЛиц.НайтиСтроки(Новый Структура("ФизЛицоПол",Перечисления.ПолФизическогоЛица.Мужской));
	СтруктураДанныхДекларация["R109G"+Строка(3+СчетчикМесяцев)] = НайденныеСтроки.Количество();

	НайденныеСтроки = ТаблицаКоличестваЗастрахованныхЛиц.НайтиСтроки(Новый Структура("ФизЛицоПол",Перечисления.ПолФизическогоЛица.Женский));
	СтруктураДанныхДекларация["R108G"+Строка(3+СчетчикМесяцев)] = НайденныеСтроки.Количество();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуФактическихЗатратНаОплатуТруда(СчетчикМесяцев, НачалоВЦикле, КонецВЦикле)  // ИНАГРО
	
	БольничныеПредприятие 	= 0;
	БольничныеФСС 			= 0;
	БольничныеФССНесчСлучай = 0;
	ГПХ						= 0;
	Зарплата				= 0;
	ОтпускБеременностьИРоды = 0;
	
	ИмяРегистра = "ИНАГРО_Начисления";
	
	//запросы по суммам начислений
	ЗапросНачисленияБольн = Новый Запрос ();
	ЗапросНачисленияБольн.Текст = "ВЫБРАТЬ
	                              |	ОсновныеНачисленияРаботников.ВидРасчета КАК ВидРасчета,
	                              |	СУММА(ОсновныеНачисленияРаботников.Результат) КАК Результат
	                              |ИЗ
	                              |	РегистрРасчета."+ИмяРегистра+" КАК ОсновныеНачисленияРаботников
	                              |ГДЕ
	                              |	ОсновныеНачисленияРаботников.Организация = &Организация
	                              |	И ОсновныеНачисленияРаботников.ПериодРегистрации МЕЖДУ &ДатаНач И &ДатаКон
								  | И ОсновныеНачисленияРаботников.ВидРасчета В (&ВидыРасчетов)
	                              |
	                              |СГРУППИРОВАТЬ ПО
	                              |	ОсновныеНачисленияРаботников.ВидРасчета";
	
	ЗапросНачисленияБольн.УстановитьПараметр("ДатаНач", НачалоВЦикле);
	ЗапросНачисленияБольн.УстановитьПараметр("ДатаКон" , КонецВЦикле);
	ЗапросНачисленияБольн.УстановитьПараметр("Организация",   СтруктураРеквизитовФормы.Организация);
	
	// виды расчетов по больничным
	ВидыРасчетов = ПолучитьБольничныеПредприятия();
	Для каждого ВидРасчета Из ПолучитьСписокВидовРасчетовПоВидуНалога(Справочники.Налоги.ЕСВФОТБольничные) Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;
	Для каждого ВидРасчета Из ПолучитьБольничныеФССНесчСлучай() Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;
	Для каждого ВидРасчета Из ПолучитьСписокДекретные() Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;
	// виды расчетов по ГПХ
	ОблагаемоеЕСВГПХ = ПолучитьСписокВидовРасчетовПоВидуНалога(Справочники.Налоги.ЕСВФОТГПХ); 
	Для каждого ВидРасчета Из ОблагаемоеЕСВГПХ Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;
	// остальные виды расчетов, которые имеют отношение к ЕСВ
	СЗ = Новый Массив;
	СЗ.Добавить(Справочники.Налоги.ЕСВФОТРаботники);
	Попытка
		СЗ.Добавить(Справочники.Налоги.ЕСВФОТМобил);
	Исключение
	КонецПопытки;	
	
	ВсеОблагаемоеЕСВ = ПолучитьСписокВидовРасчетовПоВидуНалога(СЗ); 
	Для каждого ВидРасчета Из ВсеОблагаемоеЕСВ Цикл
		ВидыРасчетов.Добавить(ВидРасчета);
	КонецЦикла;

	// выполняем запрос по начислениям
	ЗапросНачисленияБольн.УстановитьПараметр("ВидыРасчетов",   ВидыРасчетов);
	Выборка = ЗапросНачисленияБольн.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ПолучитьБольничныеПредприятия().Найти(Выборка.ВидРасчета) = Неопределено Тогда
			
			БольничныеПредприятие = БольничныеПредприятие + Выборка.Результат;
			
		ИначеЕсли НЕ  ПолучитьСписокВидовРасчетовПоВидуНалога(Справочники.Налоги.ЕСВФОТБольничные).Найти(Выборка.ВидРасчета) = Неопределено Тогда
			
			БольничныеФСС = БольничныеФСС + Выборка.Результат;
			
		ИначеЕсли НЕ ПолучитьБольничныеФССНесчСлучай().Найти(Выборка.ВидРасчета) = Неопределено Тогда
			
			БольничныеФССНесчСлучай = БольничныеФССНесчСлучай + Выборка.Результат;
			
		ИначеЕсли НЕ ОблагаемоеЕСВГПХ.Найти(Выборка.ВидРасчета) = Неопределено Тогда	
			
			ГПХ = ГПХ + Выборка.Результат; 
			
		ИначеЕсли НЕ ПолучитьСписокДекретные().Найти(Выборка.ВидРасчета) = Неопределено Тогда	
			
			ОтпускБеременностьИРоды = ОтпускБеременностьИРоды + Выборка.Результат; 
		Иначе
			// все остальное попадает в п. 1.1.
			Зарплата = Зарплата + Выборка.Результат;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Если Не СтруктураРеквизитовФормы.НазначениеПенсии И Не СтруктураРеквизитовФормы.НазначениеСоцВыплат Тогда
		СтруктураДанныхДекларация["R01011G"+Строка(3+СчетчикМесяцев)] = Зарплата;
		СтруктураДанныхДекларация["R01012G"+Строка(3+СчетчикМесяцев)] = ГПХ;
		СтруктураДанныхДекларация["R01013G"+Строка(3+СчетчикМесяцев)] = БольничныеПредприятие;
		СтруктураДанныхДекларация["R01014G"+Строка(3+СчетчикМесяцев)] = БольничныеФСС + БольничныеФССНесчСлучай;
		СтруктураДанныхДекларация["R01015G"+Строка(3+СчетчикМесяцев)] = ОтпускБеременностьИРоды;
	КонецЕсли;
	
	
КонецПроцедуры

