&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	                                  
	СоздаватьДокументыДатойВыпискиКонтрагентом 	= Истина;
	ОтбиратьПоДатеРегистрации 					= Ложь;
	
	Организация   = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");

	Параметры.Свойство("НачПериода", НачПериода);
	Параметры.Свойство("КонПериода", КонПериода);
	
	ИдКонфигурации = РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации();
	
	Если Не ЗначениеЗаполнено(НачПериода) Тогда
		НачПериода = ТекущаяДата();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонПериода) Тогда
		КонПериода = ТекущаяДата();
	КонецЕсли;
	
	Если НачПериода > КонПериода Тогда
		НачПериода = КонПериода;
	КонецЕсли;
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	мПараметрыРаботыЗвит1С = Новый Структура("ИмяДокументаЗКП", "РегистрацияВходящегоНалоговогоДокумента");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьСписокНаКлиенте();	
	
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Укажите организацию!';uk='Укажіть організацію!'"));
		Возврат;
	КонецЕсли;
	
	Если    НачПериода = '00010101'
		ИЛИ НачПериода = '00010101' Тогда
		ПоказатьПредупреждение(,НСтр("ru='Укажите период выписки!';uk='Зазначте період виписки!'"));
		Возврат;
	КонецЕсли;
	
	ОбновитьСписокНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокНаКлиенте()
	
	Перем КодОрганизации, ИННКонтрагента; 
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Если    НачПериода = '00010101'
		ИЛИ НачПериода = '00010101' Тогда
		Возврат;
	КонецЕсли;
	
	Если Не глМенеджерЗвит1С.ЗапуститьЗвит1С(Неопределено, Организация) Тогда
		ПоказатьПредупреждение(,(НСтр("ru='Не удалось запустить ""FREDO Звіт""';uk='Не вдалося запустити ""FREDO Звіт""'")));
		Возврат;
	КонецЕсли;
	
	ДокументыЗвит1С.Очистить();

	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	КодОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(Организация, КонПериода, СписокПоказателей).КодПоЕДРПОУ;
	КодОрганизации = СокрЛП(КодОрганизации); 
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ИННКонтрагента 		= ИННКонтрагента(Контрагент);
		КонтрагентКодФилиала = КодФилиалаКонтрагента(Контрагент);
		Если ЗначениеЗаполнено(КонтрагентКодФилиала) Тогда
			ПозицияСобачки = Найти(КонтрагентКодФилиала, "@");
			Если ПозицияСобачки > 0 Тогда
				КонтрагентКодФилиала = Сред(КонтрагентКодФилиала, 1, ПозицияСобачки - 1);
			Иначе
				КонтрагентКодФилиала = КонтрагентКодФилиала;
			КонецЕсли;
		Конецесли;
	КонецЕсли;
	
	Если ОтбиратьПоДатеРегистрации Тогда
	    ТаблицаДокЗвит1С = глКомпонентаЗвит1С.GetPrimaryReestr(-1, 2, НачПериода - 3 * 365 * 24*60*60, КонецДня(КонПериода));
	Иначе	
		ТаблицаДокЗвит1С = глКомпонентаЗвит1С.GetPrimaryReestr(-1, 2, НачПериода, КонецДня(КонПериода));
	КонецЕсли;
	
	                            	
	Если ТаблицаДокЗвит1С = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФлОшибки = Ложь;
	Если ТаблицаДокЗвит1С.First("MAIN") Тогда
		ВнестиДанныеЗвит1С(ТаблицаДокЗвит1С, КодОрганизации, ИННКонтрагента, КонтрагентКодФилиала, ФлОшибки);

		Если Не ФлОшибки Тогда
		
			Пока ТаблицаДокЗвит1С.Next("MAIN") Цикл
				ВнестиДанныеЗвит1С(ТаблицаДокЗвит1С, КодОрганизации, ИННКонтрагента, КонтрагентКодФилиала, ФлОшибки);
				
				Если ФлОшибки Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;	
			
	КонецЕсли;
	
	// снимим служебную пометку о необходимости принудительной загрузки XML в документ
	Для каждого Строка Из ДокументыЗвит1С Цикл
		Строка.ФлЗагрузкиXML = Ложь;	
	КонецЦикла;
	
	ЗаполнитьСсылкиДокументовНаСервере();
	
	// принудительно пропишем XML в документы
	ПрописатьXML();
	
	ЗаполнитьКонтрагентовНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВнестиДанныеЗвит1С(ТаблицаДокЗвит1С, КодОрганизации, ИННКонтрагента, КонтрагентКодФилиала, ФлОшибки)
	//поля таблицы: STATUS, VATSUM, REGDATE, DOC_ID, DOC_TYPE, DOC_MOVE, DOC_NUM, DOC_VD, DOC_DEPT, DOC_DATE, FIRM_EDRPOU, FIRM_IPN, PATRNER_IPN, PARTNER_EDRPOU,OSOBFIO
	
	КодОрганизацииЗвит1С  	= ТаблицаДокЗвит1С.GetValue( "MAIN", "FIRM_EDRPOU" );
	Если НЕ   КодОрганизацииЗвит1С = КодОрганизации Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтбиратьПоДатеРегистрации Тогда
		
		ДатаРегистарции = ТаблицаДокЗвит1С.GetValue( "MAIN", "REGDATE" );
		
		Если НЕ ЗначениеЗаполнено(ДатаРегистарции) Тогда
			Возврат; 	
		КонецЕсли;
		
		Если    НачПериода > ДатаРегистарции 
			ИЛИ КонецДня(КонПериода) < КонецДня(ДатаРегистарции) Тогда
		    Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ИННКонтрагентаЗвит1С  	= ТаблицаДокЗвит1С.GetValue( "MAIN", "FIRM_IPN" );
	ДатаДокумента			= ТаблицаДокЗвит1С.GetValue( "MAIN", "DOC_DATE" );
	КодФилиалаКонтрагентаЗвит1С = ТаблицаДокЗвит1С.GetValue( "MAIN", "DOC_DEPT" );

	Если ЗначениеЗаполнено(ИННКонтрагента) Тогда
		Если НЕ (ИННКонтрагентаЗвит1С = ИННКонтрагента)  ИЛИ НЕ (?(КодФилиалаКонтрагентаЗвит1С = Неопределено, "", КодФилиалаКонтрагентаЗвит1С) = КонтрагентКодФилиала) Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	НоваяСтрока = ДокументыЗвит1С.Добавить();
	
	НоваяСтрока.Организация = Организация;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		НоваяСтрока.Контрагент = Контрагент;
	КонецЕсли;
	
	НоваяСтрока.КонтрагентИНН    = ИННКонтрагентаЗвит1С;
	НоваяСтрока.КонтрагентКодФилиала = КодФилиалаКонтрагентаЗвит1С;
	
	НоваяСтрока.ДатаДокумента  	  	  = ДатаДокумента;
	НоваяСтрока.ДатаРегистрации  	  = ТаблицаДокЗвит1С.GetValue( "MAIN", "REGDATE" );

	Если  ЗначениеЗаполнено(НоваяСтрока.ДатаДокумента)
		И ЗначениеЗаполнено(НоваяСтрока.ДатаРегистрации)
		И (НачалоДня(НоваяСтрока.ДатаРегистрации) - НачалоДня(НоваяСтрока.ДатаДокумента) >= 1382400) Тогда
		Если  День(НоваяСтрока.ДатаДокумента) <= 15 
			И НачалоМесяца(НоваяСтрока.ДатаДокумента) <> НачалоМесяца(НоваяСтрока.ДатаРегистрации) Тогда
			НоваяСтрока.ТипОформленияДатыРегистрации = 2;
		ИначеЕсли День(НоваяСтрока.ДатаДокумента) > 15 
			И НоваяСтрока.ДатаРегистрации > КонецМесяца(НоваяСтрока.ДатаДокумента) + 15*86400 Тогда
			НоваяСтрока.ТипОформленияДатыРегистрации = 2;
		КонецЕсли;
	КонецЕсли;	
	
	НоваяСтрока.ТипДокумента = ?(ТаблицаДокЗвит1С.GetValue( "MAIN", "DOC_TYPE" ) = 1, "ПН", "РК");
	
	Номер 		 	 = ТаблицаДокЗвит1С.GetValue( "MAIN", "DOC_NUM" );
	НомерДокЗвит1С_2 = ТаблицаДокЗвит1С.GetValue( "MAIN", "DOC_VD" );
	Если ЗначениеЗаполнено(НомерДокЗвит1С_2) Тогда
		Номер = Номер + "/" + НомерДокЗвит1С_2;
	КонецЕсли;
	НомерДокЗвит1С_3 = ТаблицаДокЗвит1С.GetValue( "MAIN", "DOC_DEPT" );
	Если ЗначениеЗаполнено(НомерДокЗвит1С_3) Тогда
		Если Найти(Номер, "/") > 0 Тогда
			Номер = Номер + "/" + НомерДокЗвит1С_3;
		Иначе	
			Номер = Номер + "//"+ НомерДокЗвит1С_3;
		КонецЕсли;
	КонецЕсли;
	НоваяСтрока.Номер = Номер;
	
	НоваяСтрока.СуммаНДС = ТаблицаДокЗвит1С.GetValue( "MAIN", "VATSUM" );
	
	НоваяСтрока.DOC_ID = ТаблицаДокЗвит1С.GetValue( "MAIN", "DOC_ID" );

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСсылкиДокументовНаСервере()
	
	// заполняем ссылки существующих документов (и контрагентов из документов) по ID
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Док.Ссылка,
	               |	Док.Организация,
	               |	Док.Контрагент,
	               |	Док.Контрагент.ИНН КАК КонтрагентИНН,
				   |	Док.Контрагент.КодФилиала КАК КонтрагентКодФилиала,
	               |	Док.НомерВходящегоДокумента,
	               |	Док.ДатаВходящегоДокумента,
	               |	Док.ВидОперации,
				   |	Док.ПометкаУдаления,
	               |	Док.Звит1С_DOC_ID КАК DOC_ID,
	               |	Док.СуммаНДСДокумента КАК СуммаНДС
	               |ИЗ
	               |	Документ.РегистрацияВходящегоНалоговогоДокумента КАК Док
	               |ГДЕ
	               |	  Док.ДатаВходящегоДокумента >= &НачДата
	               |	И Док.ДатаВходящегоДокумента <= &КонДата
				   |	И Док.Организация = &Организация
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Док.Звит1С_DOC_ID УБЫВ";
				   
	Если мПараметрыРаботыЗвит1С.ИмяДокументаЗКП <> "РегистрацияВходящегоНалоговогоДокумента" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрацияВходящегоНалоговогоДокумента", мПараметрыРаботыЗвит1С.ИмяДокументаЗКП);
	КонецЕсли;
	
	Если ИдКонфигурации = "ЕРП" ИЛИ ИдКонфигурации = "BASУТ" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Контрагент.ИНН", "Контрагент.ИННПлательщикаНДС");
	КонецЕсли;
	
	Если ДокументыЗвит1С.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТабДат = ДанныеФормыВЗначение(ДокументыЗвит1С, Тип("ТаблицаЗначений")).Скопировать(, "ДатаДокумента");ТабДат.Сортировать("ДатаДокумента");
	Запрос.УстановитьПараметр("НачДата", НачалоДня(ТабДат[0].ДатаДокумента));
	Запрос.УстановитьПараметр("КонДата", КонецДня(ТабДат[ТабДат.Количество()-1].ДатаДокумента));
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура;
		
		Если Выборка.ВидОперации = Перечисления["ВидыОпераций"+мПараметрыРаботыЗвит1С.ИмяДокументаЗКП].РасчетКорректировкиВозврат ИЛИ Выборка.ВидОперации = Перечисления["ВидыОпераций"+мПараметрыРаботыЗвит1С.ИмяДокументаЗКП].РасчетКорректировкиКорректировка Тогда
			СтруктураПоиска.Вставить("ТипДокумента",		"РК");
		ИначеЕсли Выборка.ВидОперации = Перечисления["ВидыОпераций"+мПараметрыРаботыЗвит1С.ИмяДокументаЗКП].НалоговаяНакладная Тогда
			СтруктураПоиска.Вставить("ТипДокумента",		"ПН");
		Иначе
			// не подходящий вид операции, нечего искать в таблице
			Продолжить;	
		КонецЕсли;
		
		СтруктураПоиска.Вставить("КонтрагентИНН",		СокрЛП(Выборка.КонтрагентИНН));
		Если ЗначениеЗаполнено(Выборка.КонтрагентКодФилиала) Тогда
			ПозицияСобачки = Найти(Выборка.КонтрагентКодФилиала, "@");
			Если ПозицияСобачки > 0 Тогда
				КонтрагентКодФилиала = Сред(Выборка.КонтрагентКодФилиала, 1, ПозицияСобачки - 1);
			Иначе
				КонтрагентКодФилиала = Выборка.КонтрагентКодФилиала;
			КонецЕсли;
		Иначе
			КонтрагентКодФилиала = "";
		Конецесли;
		СтруктураПоиска.Вставить("КонтрагентКодФилиала", КонтрагентКодФилиала);
		СтруктураПоиска.Вставить("Номер",				СокрЛП(Выборка.НомерВходящегоДокумента));
		СтруктураПоиска.Вставить("ДатаДокумента",		Выборка.ДатаВходящегоДокумента);
		
		СуществующиеДокБезСвязиСоЗвит = ДокументыЗвит1С.НайтиСтроки(СтруктураПоиска);
		Для каждого Строка Из СуществующиеДокБезСвязиСоЗвит Цикл
			
			Если ЗначениеЗаполнено(Строка.Ссылка) И (НЕ Выборка.ПометкаУдаления) Тогда
				Строка.Комментарий = Строка.Комментарий + ?(ПустаяСтрока(Строка.Комментарий),"", Символы.ПС) 
									 + НСтр("ru='Есть дубль документа в информационной базе: ';uk='Є дубль документу в інформаційній базі: '") 
									 + "(" + Выборка.Ссылка+")";
				Продолжить;
			КонецЕсли;
			
			Если Выборка.ПометкаУдаления Тогда
				Строка.Комментарий = Строка.Комментарий + ?(ПустаяСтрока(Строка.Комментарий),"", Символы.ПС) 
									 + НСтр("ru='Есть помеченный на удаление документ в информационной базе: ';uk='Є помічений на вилучення документ в інформаційній базі: '") 
									 + "(" + Выборка.Ссылка+")";
				Продолжить;  // в помеченный на удаление не загружаем
			КонецЕсли;
			
			Строка.Контрагент = Выборка.Контрагент;
			Строка.Ссылка 	  = Выборка.Ссылка;
			
			Если Строка.СуммаНДС <> Выборка.СуммаНДС Тогда
				Строка.Комментарий = Строка.Комментарий + НСтр("ru='Имеется расхождение в сумме НДС!';uk='Є розбіжність в сумі ПДВ!'");
			КонецЕсли;
			
			Если Выборка.DOC_ID = Строка.DOC_ID Тогда
				Продолжить;
			КонецЕсли;
			
			Строка.флЗагрузкиXML = Истина;
		
		КонецЦикла;
			
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрописатьXML()
	
	Для каждого Строка Из ДокументыЗвит1С Цикл
		
		Если Не Строка.флЗагрузкиXML Тогда
			Продолжить;
		КонецЕсли;
		
		XML = глКомпонентаЗвит1С.GetDocXml(Строка.DOC_ID);
		ПрописатьXMLНаСервере(Строка.Ссылка, Строка.DOC_ID,  Строка.Комментарий, Строка.Флаг, XML)
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПрописатьXMLНаСервере(Ссылка, DOC_ID, Комментарий, Флаг, XML)

	Попытка
		
		Если ПустаяСтрока(XML) Тогда
			ВызватьИсключение "";	
		КонецЕсли;
		
		ЗКП = Ссылка.ПолучитьОбъект();

		ЗКП.ЕстьXML   = Истина;
		ЭлектронныйДокумент = Истина;
		ЗКП.Звит1С_DOC_ID   = DOC_ID;
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		Текст = Новый ТекстовыйДокумент;
		Текст.УстановитьТекст(XML);
		Текст.Записать(ИмяВременногоФайла, "windows-1251");
		
		ЗКП.ДанныеXML = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяВременногоФайла), Новый СжатиеДанных(9));
		
		ЗКП.Записать();			
		
	Исключение
		Комментарий = НСтр("ru='Для документа информационной базы не установлена связь с документом """"FREDO Звіт"""". 
							|Необходимо загрузить XML в документ информационную базу.';uk='Для документа інформаційної бази не встановлено зв''язок з документом """"FREDO Звіт"""". 
							|Необхідно завантажити XML у документ інформаційної бази.'");

		Флаг        = Истина;
		
	КонецПопытки;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьКонтрагентовНаСервере()
	
	// ищем подходящих контрагентов
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	Спр.Ссылка,
				   |    Спр.КодФилиала КАК КонтрагентКодФилиала,
				   |	Спр.ИНН КАК КонтрагентИНН
				   |ИЗ
				   |	Справочник.Контрагенты КАК Спр
				   |ГДЕ
				   |	Спр.ИНН В(&МассивИНН)
				   |";
	
	Если ИдКонфигурации = "ЕРП" ИЛИ ИдКонфигурации = "BASУТ" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Спр.ИНН", "Спр.ИННПлательщикаНДС");
	КонецЕсли;
	
	МассивИНН    = Новый Массив();
	Для каждого Строка Из ДокументыЗвит1С Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Контрагент) Тогда
			МассивИНН.ДОбавить(Строка.КонтрагентИНН);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("МассивИНН", МассивИНН);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Для каждого Строка Из ДокументыЗвит1С.НайтиСтроки(Новый Структура("Контрагент, КонтрагентИНН, КонтрагентКодФилиала", Справочники.Контрагенты.ПустаяСсылка(), СокрЛП(Выборка.КонтрагентИНН), Лев(СокрЛП(Выборка.КонтрагентКодФилиала), 4))) Цикл
			Строка.Контрагент = Выборка.Ссылка;
		КонецЦикла;
		
	КонецЦикла;	
	
	// проставляем флажки для загрузки документов
	Для каждого Строка Из ДокументыЗвит1С Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Ссылка) Тогда
			
			Строка.Флаг = Истина;
			
			Если Строка.Контрагент.Пустая() Тогда
				Строка.Флаг = Ложь;
				Строка.Комментарий = НСтр("ru='В информационной базе не обнаружен контрагент с ИНН: ';uk='В інформаційній базі не виявлений контрагент з ІПН:'") + Строка.КонтрагентИНН +
									 ?(ЗначениеЗаполнено(Строка.КонтрагентКодФилиала), НСтр("ru=' и кодом филиала: ';uk='  та кодом філії:'") + Строка.КонтрагентКодФилиала, " ");
			КонецЕсли; 
			
		ИначеЕсли НЕ ПустаяСтрока(Строка.Комментарий) Тогда
			
			Строка.Флаг = Истина;	
			
		КонецЕсли;	
		
	КонецЦикла;
	
	ДокументыЗвит1С.Сортировать("ДатаДокумента, ДатаРегистрации, Контрагент, ТипДокумента");

КонецПроцедуры


&НаКлиенте
Процедура НастроитьПериод(Команда)

	мНастройкаПериода = Новый СтандартныйПериод();
	
	мНастройкаПериода.ДатаНачала    = НачПериода;
	мНастройкаПериода.ДатаОкончания = КонПериода;

	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = мНастройкаПериода;
	
	Диалог.Показать(Новый ОписаниеОповещения("НастроитьПериодОкончание", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПериодОкончание(мНастройкаПериода, ДопПараметры) Экспорт

	Если НЕ мНастройкаПериода = Неопределено Тогда

		НачПериода = мНастройкаПериода.ДатаНачала;
		КонПериода = мНастройкаПериода.ДатаОкончания;

	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура Загрузить(Команда)
	
	Для каждого Строка Из ДокументыЗвит1С Цикл
	
		Если НЕ Строка.Флаг Тогда
			Продолжить;
		КонецЕсли;	
		
		XML = глКомпонентаЗвит1С.GetDocXml(Строка.DOC_ID); 
		Если ПустаяСтрока(XML) Тогда
			Сообщить(НСтр("ru='Ошибка подключения к FREDO Звіт.';uk='Помилка підключення до FREDO Звіт.'"));
			Прервать;
		КонецЕсли;

		ЗагрузитьДокументНаСервере(Строка.Ссылка, Строка.Флаг, Строка.Организация, Строка.Контрагент, Строка.ТипДокумента, Строка.Номер, Строка.ДатаДокумента, Строка.ДатаРегистрации, Строка.DOC_ID, XML)
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДокументНаСервере(Ссылка, Флаг, Организация, Контрагент, ТипДокумента, Номер, ДатаДокумента, ДатаРегистрации, DOC_ID, XML)
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		
		ЗКП = Документы[мПараметрыРаботыЗвит1С.ИмяДокументаЗКП].СоздатьДокумент();
		
		ЗКП.Ответственный = Пользователи.ТекущийПользователь();
		ЗКП.Организация = Организация;
		ЗаполнениеДокументов.Заполнить(ЗКП, Новый Структура);
		
		Если СоздаватьДокументыДатойВыпискиКонтрагентом = Истина Тогда
			ЗКП.Дата    = КонецДня(ДатаДокумента) - 59;
		ИначеЕсли НЕ ЗначениеЗаполнено(ДатаРегистрации) Тогда
			ЗКП.Дата = КонецДня(ТекущаяДата()) - 59;
		ИначеЕсли  День(ДатаДокумента) <= 15 
			И НачалоМесяца(ДатаДокумента) <> НачалоМесяца(ДатаРегистрации) Тогда
			
			ЗКП.Дата = КонецДня(ДатаРегистрации) - 59;
		ИначеЕсли День(ДатаДокумента) > 15 
			И ДатаРегистрации > КонецМесяца(ДатаДокумента) + 15*86400 Тогда
			
			ЗКП.Дата = КонецДня(ДатаРегистрации) - 59;
		Иначе	
			//создан после 15 и зарегистрирован до 16 следующего месяца
			ЗКП.Дата    = КонецДня(ДатаДокумента) - 59;
		КонецЕсли;
		ЗКП.Контрагент  = Контрагент;
		
		Если ИдКонфигурации = "ЕРП" ИЛИ ИдКонфигурации = "BASУТ" Тогда
			ЗКП.Партнер  = Контрагент.Партнер;
		КонецЕсли;
		
		Если ТипДокумента = "РК" Тогда
			ЗКП.ВидОперации = Перечисления["ВидыОпераций"+мПараметрыРаботыЗвит1С.ИмяДокументаЗКП].РасчетКорректировкиВозврат;
		Иначе	
		    ЗКП.ВидОперации = Перечисления["ВидыОпераций"+мПараметрыРаботыЗвит1С.ИмяДокументаЗКП].НалоговаяНакладная;
		КонецЕсли;
		
		ЗКП.ОбособленноеПодразделение = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеОбособленноеПодразделениеОрганизации");	
		
		Если НЕ ЗКП.ОбособленноеПодразделение.Владелец = ЗКП.Организация Тогда
			ЗКП.ОбособленноеПодразделение = Неопределено;				
		КонецЕсли; 
		
		Если ИдКонфигурации = "БП" ИЛИ ИдКонфигурации = "БСП" Тогда
			Выполнить("
					|	ЗКП.СчетНДС = ПланыСчетов.Хозрасчетный.РасчетыПоНДС;
					|	
					|	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(ЗКП.Организация, ЗКП.Контрагент, ЗКП.ДоговорКонтрагента);
					|	
					|	ЗКП.СчетУчетаНДС 	 = СчетаУчета.СчетУчетаНДСПриобретений;
					|	ЗКП.СчетУчетаКорректировкиНДСКредит = ПланыСчетов.Хозрасчетный.КорректировкиНалоговогоКредита;
					|");
		КонецЕсли;
	
		
		ЗКП.НомерВходящегоДокумента = Номер;
		ЗКП.ДатаВходящегоДокумента  = ДатаДокумента;
		ЗКП.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных  = ДатаРегистрации;
		
		ЗКП.ВидДокумента = "-";
		
		ЗКП.ЕстьXML   		= Истина;
		ЗКП.ЭлектронныйДокумент = Истина;
		ЗКП.Звит1С_DOC_ID   = DOC_ID;
		
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		Текст = Новый ТекстовыйДокумент;
		Текст.УстановитьТекст(XML);
		Текст.Записать(ИмяВременногоФайла, "windows-1251");
		
		ЗКП.ДанныеXML = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяВременногоФайла), Новый СжатиеДанных(9));
		
		// заполним табличную часть документа
		// получим данны реквизитов кроме ТЧ
		РеквизитыXML = Новый Структура;
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
		ЧтениеXML.ИгнорироватьПробелы = Истина;
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ТекУзел = ВРЕГ(ЧтениеXML.Имя);
				Если    ТекУзел = "DECLAR"
					ИЛИ ТекУзел = "DECLARHEAD"
					ИЛИ ТекУзел = "DECLARBODY"
					ИЛИ ТекУзел = "LINKED_DOCS" Тогда
					Продолжить;
				ИначеЕсли Найти(ТекУзел, "XXXX") > 0 Тогда
					Продолжить;
				Иначе
					Если ВРЕГ(ЧтениеXML.ЗначениеАтрибута("xsi:nil")) = "TRUE" Тогда
						Продолжить;
					КонецЕсли;
					ЧтениеXML.Прочитать();
					РеквизитыXML.Вставить(ТекУзел, ЧтениеXML.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;		
		ЧтениеXML.Закрыть();			
			
		C_DOC     = ""; РеквизитыXML.Свойство("C_DOC",	   C_DOC);
		C_DOC_SUB = ""; РеквизитыXML.Свойство("C_DOC_SUB", C_DOC_SUB);
		C_DOC_VER = ""; РеквизитыXML.Свойство("C_DOC_VER", C_DOC_VER);
				
		// договор контрагента
		ДоговорКонтрагентаДата  = "";
		ДоговорКонтрагентаНомер = "";
		Если C_DOC_SUB = "010" Тогда
			РеквизитыXML.Свойство("H01G2D", ДоговорКонтрагентаДата);
			РеквизитыXML.Свойство("H01G3S", ДоговорКонтрагентаНомер);
		Иначе
			РеквизитыXML.Свойство("H01G1D", ДоговорКонтрагентаДата);
			РеквизитыXML.Свойство("H01G2S", ДоговорКонтрагентаНомер);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДоговорКонтрагентаДата) Тогда
			ДоговорКонтрагентаДата = СокрЛП(ДоговорКонтрагентаДата);
			ДоговорКонтрагентаДата = Дата(Сред(ДоговорКонтрагентаДата, 5, 4), Сред(ДоговорКонтрагентаДата, 3, 2), Сред(ДоговорКонтрагентаДата, 1, 2));
		КонецЕсли;
		
		Если  ЗначениеЗаполнено(ЗКП.Контрагент)
			И ЗначениеЗаполнено(ДоговорКонтрагентаДата)
			И ЗначениеЗаполнено(ДоговорКонтрагентаНомер) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
		               |	Спр.Ссылка
		               |ИЗ
		               |	Справочник.ДоговорыКонтрагентов КАК Спр
		               |ГДЕ
					   |	Спр.Владелец = &Контрагент
					   |	И Спр.Дата 	 = &ДоговорКонтрагентаДата
					   |	И Спр.Номер  = &ДоговорКонтрагентаНомер
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Спр.Код УБЫВ";
					   
			Если ИдКонфигурации = "ЕРП" ИЛИ ИдКонфигурации = "BASУТ" Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Спр.Владелец", "Спр.Контрагент");	
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "Спр.Код", "Спр.Ссылка");	
			КонецЕсли;					   
					   
			Запрос.УстановитьПараметр("Контрагент", 			 ЗКП.Контрагент);				   
			Запрос.УстановитьПараметр("ДоговорКонтрагентаДата",  ДоговорКонтрагентаДата);
			Запрос.УстановитьПараметр("ДоговорКонтрагентаНомер", ДоговорКонтрагентаНомер);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЗКП.ДоговорКонтрагента = Выборка.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
		HFILL = ""; РеквизитыXML.Свойство("HFILL", HFILL);
		Если ЗначениеЗаполнено(HFILL) Тогда
			HFILL = СокрЛП(HFILL);
			ЗКП.ДатаВходящегоДокумента = Дата(Сред(HFILL, 5, 4), Сред(HFILL, 3, 2), Сред(HFILL, 1, 2));
		КонецЕсли;
		
		// для П2 дата и номер корректируемой налоговой накладной
		Если C_DOC_SUB = "012" Тогда
			HNUM  = ""; РеквизитыXML.Свойство("HPODNUM",  HNUM);  HNUM  = СокрЛП(HNUM);
			HNUM1 = ""; РеквизитыXML.Свойство("HPODNUM1", HNUM1); HNUM1 = СокрЛП(HNUM1); HNUM1 = ?(HNUM1 = "0", "", HNUM1);
			HNUM2 = ""; РеквизитыXML.Свойство("HPODNUM2", HNUM2); HNUM2 = СокрЛП(HNUM2);
			НомерКорректируемогоВходящегоДокумента = HNUM; 
			Если ЗначениеЗаполнено(HNUM1) Тогда
				НомерКорректируемогоВходящегоДокумента = НомерКорректируемогоВходящегоДокумента + "/" + HNUM1;
			КонецЕсли;
			Если ЗначениеЗаполнено(HNUM2) Тогда
				Если ЗначениеЗаполнено(HNUM1) Тогда
					Если C_DOC_VER > "04" Тогда
						// всего два слеша
						НомерКорректируемогоВходящегоДокумента = НомерКорректируемогоВходящегоДокумента + "/" + HNUM2;	
					Иначе	
					    // всего один слеш
						НомерКорректируемогоВходящегоДокумента = НомерКорректируемогоВходящегоДокумента + HNUM2;	
					КонецЕсли;
				Иначе
					Если C_DOC_VER > "04" Тогда
						// два слеша
						НомерКорректируемогоВходящегоДокумента = НомерКорректируемогоВходящегоДокумента + "//" + HNUM2;	
					Иначе	
					    // один слеш
						НомерКорректируемогоВходящегоДокумента = НомерКорректируемогоВходящегоДокумента + "/ " + HNUM2;	
					КонецЕсли;
				
				КонецЕсли;
			КонецЕсли;
			
			ДатаКорректируемогоВходящегоДокумента = "";
			HFILL = ""; РеквизитыXML.Свойство("HPODFILL", HFILL);
			Если ЗначениеЗаполнено(HFILL) Тогда
				HFILL = СокрЛП(HFILL);
				ДатаКорректируемогоВходящегоДокумента = Дата(Сред(HFILL, 5, 4), Сред(HFILL, 3, 2), Сред(HFILL, 1, 2));
			КонецЕсли;
			
			ЗКП.НомерКорректируемогоВходящегоДокумента = НомерКорректируемогоВходящегоДокумента;
			ЗКП.ДатаКорректируемогоВходящегоДокумента  = ДатаКорректируемогоВходящегоДокумента;
			
		КонецЕсли;
		
		// суммы документа по ставкам
		БазаНДС20  = 0; СуммаНДС20 = 0;
		БазаНДС14  = 0; СуммаНДС14 = 0;
		БазаНДС7   = 0; СуммаНДС7  = 0;
		БазаНДС0   = 0;
		БазаБезНДС = 0;
		Тара = 0;
		
		// 20%
		Если C_DOC_SUB = "010" Тогда
			РеквизитыXML.Свойство("R01G7", БазаНДС20);
			РеквизитыXML.Свойство("R03G7", СуммаНДС20);
		Иначе
			РеквизитыXML.Свойство("R01G9", БазаНДС20);
			РеквизитыXML.Свойство("R02G9", СуммаНДС20);
		КонецЕсли;
		
		// 14%
		Если C_DOC_SUB = "010" Тогда
			РеквизитыXML.Свойство("R01G14", БазаНДС14);
			РеквизитыXML.Свойство("R03G14", СуммаНДС14);
		Иначе
			РеквизитыXML.Свойство("R01G14", БазаНДС14);
			РеквизитыXML.Свойство("R03G14", СуммаНДС14);
		КонецЕсли;
		
		// 7% и 0%
		Если HNUM1 = "7" Тогда
			
			Если C_DOC_SUB = "010" Тогда
				РеквизитыXML.Свойство("R01G8",  БазаНДС7);
				РеквизитыXML.Свойство("R03G8",  СуммаНДС7);
				
				// В сумме НДС по ставке 7 могут находиться ошибочно разделители триад
				СуммаНДС7 = СтрЗаменить(СуммаНДС7, " ", "");
				
			Иначе
				РеквизитыXML.Свойство("R01G10", БазаНДС7);
				РеквизитыXML.Свойство("R02G9",  СуммаНДС7);
			КонецЕсли;
			
		Иначе
			
			Если C_DOC_SUB = "010" Тогда
				РеквизитыXML.Свойство("R01G109",  БазаНДС7);
				РеквизитыXML.Свойство("R03G109",  СуммаНДС7);
				
				Если РеквизитыXML.Свойство("R01G8") Тогда
					БазаНДС0 = БазаНДС0 + РеквизитыXML.R01G8;
				КонецЕсли;
				Если РеквизитыXML.Свойство("R01G9") Тогда
					БазаНДС0 = БазаНДС0 + РеквизитыXML.R01G9;
			КонецЕсли;
			Иначе
				РеквизитыXML.Свойство("R01G111",  БазаНДС7);
				РеквизитыXML.Свойство("R02G111",  СуммаНДС7);
				
				Если НЕ РеквизитыXML.Свойство("R01G10",  БазаНДС0) Тогда
					БазаНДС0 = 0;
					Если РеквизитыXML.Свойство("R006G03") Тогда
						БазаНДС0 = БазаНДС0 + РеквизитыXML.R006G03;
					КонецЕсли;
					Если РеквизитыXML.Свойство("R007G03") Тогда
						БазаНДС0 = БазаНДС0 + РеквизитыXML.R007G03;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// БезНДС
		Если C_DOC_SUB = "010" Тогда
			РеквизитыXML.Свойство("R01G10",  БазаБезНДС);
		Иначе
			РеквизитыXML.Свойство("R01G11", БазаБезНДС);
		КонецЕсли;
		
		// Тара
		Если C_DOC_SUB = "010" Тогда
			РеквизитыXML.Свойство("R02G11",  Тара);
		КонецЕсли;
		
		// добавляем строки в ТЧ
		Если ЗначениеЗаполнено(БазаНДС20) И Число(БазаНДС20) <> 0 Тогда
			
			Если ИдКонфигурации = "БП" ИЛИ ИдКонфигурации = "БСП" Тогда
				СтрокаДок = ЗКП.Товары.Добавить();
			Иначе	
			    СтрокаДок = ЗКП.Поставка.Добавить();
			КонецЕсли;
			
			СтрокаДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
			СтрокаДок.Сумма     = БазаНДС20;
			СтрокаДок.СуммаНДС  = СуммаНДС20;
			Если ИдКонфигурации = "БП" ИЛИ ИдКонфигурации = "БСП" Тогда
				СтрокаДок.СуммаВзаиморасчетов = СтрокаДок.Сумма + СтрокаДок.СуммаНДС;    
			Иначе
				СтрокаДок.СуммаСНДС = СтрокаДок.Сумма + СтрокаДок.СуммаНДС;    
			КонецЕсли;
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БазаНДС14) И Число(БазаНДС14) <> 0 Тогда
			
			Если ИдКонфигурации = "БП" ИЛИ ИдКонфигурации = "БСП" Тогда
				СтрокаДок = ЗКП.Товары.Добавить();
			Иначе	
			    СтрокаДок = ЗКП.Поставка.Добавить();
			КонецЕсли;
			
			СтрокаДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС14;
			СтрокаДок.Сумма     = БазаНДС14;
			СтрокаДок.СуммаНДС  = СуммаНДС14;
			Если ИдКонфигурации = "БП" ИЛИ ИдКонфигурации = "БСП" Тогда
				СтрокаДок.СуммаВзаиморасчетов = СтрокаДок.Сумма + СтрокаДок.СуммаНДС;    
			Иначе
				СтрокаДок.СуммаСНДС = СтрокаДок.Сумма + СтрокаДок.СуммаНДС;    
			КонецЕсли;
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БазаНДС7) И Число(БазаНДС7) <> 0 Тогда
			
			Если ИдКонфигурации = "БП" ИЛИ ИдКонфигурации = "БСП" Тогда
				СтрокаДок = ЗКП.Товары.Добавить();
			Иначе	
			    СтрокаДок = ЗКП.Поставка.Добавить();
			КонецЕсли;
			
			СтрокаДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС7;
			СтрокаДок.Сумма     = БазаНДС7;
			СтрокаДок.СуммаНДС  = СуммаНДС7;
			Если ИдКонфигурации = "БП" ИЛИ ИдКонфигурации = "БСП" Тогда
				СтрокаДок.СуммаВзаиморасчетов = СтрокаДок.Сумма + СтрокаДок.СуммаНДС;    
			Иначе
				СтрокаДок.СуммаСНДС = СтрокаДок.Сумма + СтрокаДок.СуммаНДС;    
			КонецЕсли;
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БазаНДС0) И Число(БазаНДС0) <> 0 Тогда
			
			Если ИдКонфигурации = "БП" ИЛИ ИдКонфигурации = "БСП" Тогда
				СтрокаДок = ЗКП.Товары.Добавить();
			Иначе	
			    СтрокаДок = ЗКП.Поставка.Добавить();
			КонецЕсли;
			
			СтрокаДок.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
			СтрокаДок.Сумма     = БазаНДС0;
			Если ИдКонфигурации = "БП" ИЛИ ИдКонфигурации = "БСП" Тогда
				СтрокаДок.СуммаВзаиморасчетов = СтрокаДок.Сумма;    
			Иначе
				СтрокаДок.СуммаСНДС = СтрокаДок.Сумма;    
			КонецЕсли;
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БазаБезНДС) И Число(БазаБезНДС) <> 0 Тогда
			
			Если ИдКонфигурации = "БП" ИЛИ ИдКонфигурации = "БСП" Тогда
				СтрокаДок = ЗКП.Товары.Добавить();
			Иначе	
			    СтрокаДок = ЗКП.Поставка.Добавить();
			КонецЕсли;
			
			СтрокаДок.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			СтрокаДок.Сумма     = БазаБезНДС;
			Если ИдКонфигурации = "БП" ИЛИ ИдКонфигурации = "БСП" Тогда
				СтрокаДок.СуммаВзаиморасчетов = СтрокаДок.Сумма;    
			Иначе
				СтрокаДок.СуммаСНДС = СтрокаДок.Сумма;    
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Тара) И Число(Тара) <> 0 Тогда
			
			ЗКП.СуммаВозвратнойТары = Число(Тара);	
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаДокументаЗакрытогоПериода) Тогда
			//считаем, что все документы до даты ДатаДокументаЗакрытогоПериода - из закрытого периода
			Если ДатаДокументаЗакрытогоПериода > ЗКП.Дата Тогда
				ЗКП.Дата = КонецДня(ДатаДокументаЗакрытогоПериода) - 59;
			КонецЕсли;
		КонецЕсли;
		ЗКП.УстановитьНовыйНомер();
		Попытка
			ЗКП.Записать();
		Исключение	
		КонецПопытки;
		
		Ссылка = ЗКП.Ссылка;

	Иначе
		
		ЗКП = Ссылка.ПолучитьОбъект();
		
		Если ЗКП.Контрагент.Пустая() Тогда
			ЗКП.Контрагент = Контрагент;
		КонецЕсли;
		
		ЗКП.ДатаВключенияВЕдиныйРеестрНалоговыхНакладных  = ДатаРегистрации;
		
		ЗКП.ЕстьXML   = Истина;
		ЭлектронныйДокумент = Истина;
		ЗКП.Звит1С_DOC_ID   = DOC_ID;
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		Текст = Новый ТекстовыйДокумент;
		Текст.УстановитьТекст(XML);
		Текст.Записать(ИмяВременногоФайла, "windows-1251");
		
		ЗКП.ДанныеXML = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяВременногоФайла), Новый СжатиеДанных(9));
		
		ЗКП.Записать();
		
	КонецЕсли;
	
	Флаг = Ложь;
	
КонецПроцедуры


&НаКлиенте
Процедура ДокументыЗвит1СКонтрагентПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДокументыЗвит1С.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Контрагент) Тогда
		ТекущаяСтрока.Флаг = Ложь;
		Возврат;
	КонецЕсли;
	
	Если    СокрЛП(ИННКонтрагента(ТекущаяСтрока.Контрагент))  <> ТекущаяСтрока.КонтрагентИНН Тогда
		
		Сообщить(НСтр("ru='У контрагента не совпадает ИНН!';uk='У контрагента не збігається ІПН!'"));
		ТекущаяСтрока.Контрагент = "";
	    ТекущаяСтрока.Флаг = Ложь;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Ссылка) Тогда
		ТекущаяСтрока.Флаг = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыЗвит1СФлагПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДокументыЗвит1С.ТекущиеДанные;
	Если ТекущаяСтрока= Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Контрагент) И ТекущаяСтрока.Флаг Тогда
		
		ТекущаяСтрока.Флаг = Ложь;
		Сообщить(НСтр("ru='Необходимо указать контрагента!';uk='Необхідно зазначити контрагента!'"));	
	
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура XMLРаспечатать(Команда)
	
	ТекущаяСтрока = Элементы.ДокументыЗвит1С.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не глМенеджерЗвит1С.ЗапуститьЗвит1С(Ложь, Организация) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не удалось запустить ""FREDO Звіт""';uk='Не вдалося запустити ""FREDO Звіт""'"));
		Возврат;
	КонецЕсли;
	
	XML = глКомпонентаЗвит1С.GetDocXml(ТекущаяСтрока.DOC_ID); 
	Если ПустаяСтрока(XML) Тогда
		Сообщить(НСтр("ru='Ошибка подключения к FREDO Звіт.';uk='Помилка підключення до FREDO Звіт.'"));
		Возврат;
	КонецЕсли;
	
	// определим номер схемы документа
	C_DOC     = "";
	C_DOC_SUB = "";
	C_DOC_VER = "";
	
	ПолучитьВерсиюДокумента(XML, C_DOC, C_DOC_SUB, C_DOC_VER);
	
	ВерсияДокумента = "" + C_DOC + C_DOC_SUB + C_DOC_VER;
	
	// найдем подходящую форму налоговой (регл. отчет)
	Если  (C_DOC     = "J12" ИЛИ C_DOC     = "F12")
		И (C_DOC_SUB = "010" ИЛИ C_DOC_SUB = "012") Тогда
		
		Если C_DOC_SUB = "010" Тогда
			ИмяОтчета = "РегламентированныйОтчетНалоговаяНакладная";
		ИначеЕсли C_DOC_SUB = "012" Тогда	
			ИмяОтчета = "РегламентированныйОтчетПриложение2КНалоговойНакладной";
		КонецЕсли;
		
	Иначе
		
		// не тот XML подсунули
		ПоказатьПредупреждение(,НСтр("ru='Загруженный файл не является XML образом Налоговой накладной или Приложения 2 к налоговой накладной!';uk='Завантажений файл не є XML образом Податкової накладної або Додатка 2 до податкової накладної!'"));
		Возврат;	
		
	КонецЕсли;
	
	ТекстОшибки = "";
	ИмяФормыПросмотра = ПолучитьИмяФормыДляПросмотраДокумента(ИмяОтчета, ВерсияДокумента, ТекстОшибки);
	
	Если ИмяФормыПросмотра = Неопределено Тогда
		ПоказатьПредупреждение(,ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// откроем отчет и загрузим в него данные XML
	Попытка
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета",'00010101');
		ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", '00010101');
		ПараметрыФормы.Вставить("Организация", Организация);
		
		ФормаПросмотра = ПолучитьФорму(ИмяФормыПросмотра, ПараметрыФормы);
	Исключение
		ТекстОшибки = НСтр("ru='Не удалось открыть для просмотра требуемую форму отчета';uk='Не вдалося відкрити для перегляду необхідну форму звіту '")+ИмяОтчета+"""";
		ПоказатьПредупреждение(,ТекстОшибки);
		Возврат;	
	КонецПопытки;
	
	Попытка
		ТабличныйДокумент = ФормаПросмотра.ЗагрузитьТекстXMLНаФорму(XML);
	Исключение
		ТекстОшибки = НСтр("ru='Не удалось открыть для просмотра требуемую форму отчета. Возможно не обновлены встроенные регламентированные отчеты';uk='Не вдалося відкрити для перегляду необхідну форму звіту. Можливе не оновлені вбудовані регламентовані звіти'")+ ": " + ИмяОтчета;
		ПоказатьПредупреждение(,ТекстОшибки);
		Возврат;	
	КонецПопытки;                            
	
	// откроем печатную форму на просмотр
	ТабличныйДокумент.Показать(НСтр("ru='ОЗНАКОМИТЕЛЬНАЯ печатная форма входящего документа';uk='ОЗНАЙОМЛЮЮЧА друкована форма вхідного документа'"));	
	
	ПоказатьПредупреждение(,НСтр("ru='Обращаем внимание, что печатная форма предназначается исключительно для ознакомления. Ее нельзя использовать в качестве бумажной налоговой накладной! 
|Печатная форма имеет отличия от официально утвержденной: например, отсутствуют квадратики в полях ИНН, формат представления дат предназначен для удобного просмотра, и т.д.';uk='Звертаємо увагу, що друкована форма призначається виключно для ознайомлення. Її не можна використовувати як паперову податкову накладну!
|Друкована форма має відмінності від офіційно затвердженої: наприклад, відсутні квадратики в полях ІПН, формат представлення дат призначений для зручного перегляду, і т.д.'"), 20, НСтр("ru='Важно: о печатной форме';uk='Важливо: про друкованій формі'"));
	
КонецПроцедуры

&НаСервере	
Процедура 	ПолучитьВерсиюДокумента(XML, C_DOC, C_DOC_SUB, C_DOC_VER)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(XML);
	ЧтениеXML.ИгнорироватьПробелы = Истина;
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ТекУзел = ВРЕГ(ЧтениеXML.Имя);
			
			Если ТекУзел = "C_DOC" Тогда
				ЧтениеXML.Прочитать();
				C_DOC = ЧтениеXML.Значение;
				Продолжить;
			ИначеЕсли ТекУзел = "C_DOC_SUB" Тогда
				ЧтениеXML.Прочитать();
				C_DOC_SUB = ЧтениеXML.Значение;
				C_DOC_SUB = Формат(Число(C_DOC_SUB), "ЧЦ=3; ЧВН=");
				Продолжить;
			ИначеЕсли ТекУзел = "C_DOC_VER" Тогда                               
				ЧтениеXML.Прочитать();
				C_DOC_VER = ЧтениеXML.Значение;
				C_DOC_VER = Формат(Число(C_DOC_VER), "ЧЦ=2; ЧВН=");
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;		
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяФормыДляПросмотраДокумента(ИмяОтчета, ВерсияДокумента, ТекстОшибки)
	
	ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(ИмяОтчета);
	Если ТекОтчет = Неопределено Тогда
		ТекстОшибки = НСтр("ru='Не удалось открыть для просмотра отчет ';uk='Не вдалося відкрити для перегляду звіт '")+ИмяОтчета+"""";
		Возврат Неопределено;	
	КонецЕсли;
	
	Попытка
		МакетПоказателейЗвит1С = ТекОтчет.ПолучитьМакет("ПоказателиЗвит1С");
	Исключение
		ТекстОшибки = НСтр("ru='Не удалось определить для просмотра требуемую форму отчета ';uk='Не вдалося визначити для перегляду необхідну форму звіту  '")+ИмяОтчета+"""";
		Возврат Неопределено;	
	КонецПопытки;
	МакетПоказателейЗвит1С.КодЯзыкаМакета = "ru";
	
	ИмяФормыПросмотра = "";
	ОбластьСтруктура = МакетПоказателейЗвит1С.ПолучитьОбласть("Структура");
	Для сч = 1 По ОбластьСтруктура.ВысотаТаблицы Цикл
		
		ИмяСхемыЗвит1С = СокрЛП(ОбластьСтруктура.Область(сч, 1, сч, 1).Текст);
		
		Если ВерсияДокумента = ИмяСхемыЗвит1С Тогда
			ИмяФормыПросмотра = СокрЛП(ОбластьСтруктура.Область(сч, 3, сч, 3).Текст);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ИмяФормыПросмотра = ?(РегламентированнаяОтчетность.ЭтоВнешнийОтчет(ИмяОтчета), "ВнешнийОтчет.", "Отчет.") + ИмяОтчета  + ".Форма." + ИмяФормыПросмотра;
	
	Возврат ИмяФормыПросмотра;
	
КонецФункции

&НаКлиенте
Процедура XMLСохранить(Команда)
	
	ТекущаяСтрока = Элементы.ДокументыЗвит1С.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не глМенеджерЗвит1С.ЗапуститьЗвит1С(Ложь, Организация) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не удалось запустить ""FREDO Звіт""';uk='Не вдалося запустити ""FREDO Звіт""'"));
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	Диалог.Фильтр = НСтр("ru='Документ XML (*.xml)|*.xml';uk='Документ XML (*.xml)|*.xml'");
	Если НЕ Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	XML = глКомпонентаЗвит1С.GetDocXml(ТекущаяСтрока.DOC_ID); 
	Если ПустаяСтрока(XML) Тогда
		Сообщить(НСтр("ru='Ошибка подключения к FREDO Звіт.';uk='Помилка підключення до FREDO Звіт.'"));
		Возврат;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(XML);
	Текст.Записать(Диалог.ПолноеИмяФайла, "windows-1251");
	
КонецПроцедуры

&НаКлиенте
Процедура XMLПросмотреть(Команда)
	
	ТекущаяСтрока = Элементы.ДокументыЗвит1С.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не глМенеджерЗвит1С.ЗапуститьЗвит1С(Ложь, Организация) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не удалось запустить ""FREDO Звіт""';uk='Не вдалося запустити ""FREDO Звіт""'"));
		Возврат;
	КонецЕсли;
	
	XML = глКомпонентаЗвит1С.GetDocXml(ТекущаяСтрока.DOC_ID); 
	Если ПустаяСтрока(XML) Тогда
		Сообщить(НСтр("ru='Ошибка подключения к FREDO Звіт.';uk='Помилка підключення до FREDO Звіт.'"));
		Возврат;
	КонецЕсли;
	
	Текст = ПолучитьТекстXMLНаСервере(XML);
	Текст.Показать(НСтр("ru='Входящий документ в формате XML';uk='Вхідний документу форматі XML'"));
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстXMLНаСервере(XML)

	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(XML);
	Текст.Записать(ИмяВременногоФайла, "windows-1251");
	
	// перепрочтем файл, так как XML может быть записан без красивых отступов
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ИмяВременногоФайла);
	ЧтениеXML.ИгнорироватьПробелы = Истина;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.Отступ = Истина;
	ЗаписьXML.УстановитьСтроку("windows-1251");
	
	Пока ЧтениеXML.Прочитать() Цикл
		ЗаписьXML.ЗаписатьТекущий(ЧтениеXML);
	КонецЦикла;
	
	Текст.УстановитьТекст(ЗаписьXML.Закрыть());
	Возврат Текст;
	
КонецФункции

&НаКлиенте
Процедура XMLОткрытьВЗвит1С(Команда)
	
	ТекущаяСтрока = Элементы.ДокументыЗвит1С.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не глМенеджерЗвит1С.ЗапуститьЗвит1С(Ложь, Организация) Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не удалось запустить ""FREDO Звіт""';uk='Не вдалося запустити ""FREDO Звіт""'"));
		Возврат;
	КонецЕсли;
	
	Результат = глКомпонентаЗвит1С.ShowReport(ТекущаяСтрока.DOC_ID);
	
	Если Результат = 0 Тогда
		глКомпонентаЗвит1С.Bring1CToFront();		
		Возврат;
	КонецЕсли;

	глКомпонентаЗвит1С.BringZvitToFront();
	
КонецПроцедуры


&НаСервере
Функция ИННКонтрагента(Контрагент)

	Если ИдКонфигурации = "БП" ИЛИ ИдКонфигурации = "БСП" Тогда
		Возврат СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ИНН"));	
	Иначе	
	     Возврат СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ИННПлательщикаНДС"));	
	КонецЕсли;
	

КонецФункции // ()

&НаСервере
Функция КодФилиалаКонтрагента(Контрагент)

	 Возврат СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "КодФилиала"));

КонецФункции // ()

