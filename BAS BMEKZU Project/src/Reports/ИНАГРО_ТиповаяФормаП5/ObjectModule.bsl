#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
Перем ДатаЗаполнения;

#Область СлужебныеПроцедурыИФункции

// Процедура Формирует отчет П-5 по данным регистров
// и заполняет табличный документ - ДокументРезультат.
Функция СформироватьТабель(ДокументРезультат, ВозвращаемоеСообщениеОбОшибке = Неопределено) Экспорт
	
	ДокументРезультат = Новый ТабличныйДокумент; 
	Макет = Отчеты.ИНАГРО_ТиповаяФормаП5.ПолучитьМакет("П5");
	КодЯзыкаПечать = Локализация.ПолучитьЯзыкФормированияПечатныхФорм();
	Макет.КодЯзыкаМакета = КодЯзыкаПечать;
	
	СписокПоказателей = Новый СписокЗначений;
	СписокПоказателей.Добавить("","КодПоЕДРПОУ");
	
	ДокументРезультат.Очистить();
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.ПолеСлева = 0;
	ДокументРезультат.ПолеСправа = 0;
	ДокументРезультат.Автомасштаб = Истина;
	
	Праздники = Новый Массив;
	Праздники.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
	Праздники.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье);
	
	ЗапросТабель = Новый Запрос();
	ЗапросТабель.УстановитьПараметр("Праздник",	Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник);
	ЗапросТабель.УстановитьПараметр("Месяц",НачалоМесяца(НачалоПериода));
	ЗапросТабель.УстановитьПараметр("НачалоПериода", НачалоПериода);
	ЗапросТабель.УстановитьПараметр("НачальнаяДата", НачалоПериода);
	ЗапросТабель.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	
	ЗапросТабель.УстановитьПараметр("Явка", Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Работа);
	ЗапросТабель.УстановитьПараметр("Выходной", Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ВыходныеДни);
	ЗапросТабель.УстановитьПараметр("ПоНочнымЧасам", Перечисления.ИНАГРО_ВидыУчетаВремени.ПоНочнымЧасам);
	ЗапросТабель.УстановитьПараметр("НочныеЧасы", Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Ночные);
	ЗапросТабель.УстановитьПараметр("ОтработаноСверхНормы", Перечисления.ИНАГРО_ВидыВремени.ОтработанноеСверхНормы);
	ЗапросТабель.УстановитьПараметр("ПоВечернимЧасам", Перечисления.ИНАГРО_ВидыУчетаВремени.ПоВечернимЧасам);
	ЗапросТабель.УстановитьПараметр("ВечерниеЧасы", Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Вечерние);
	ЗапросТабель.УстановитьПараметр("ПоЧасам", Перечисления.ИНАГРО_ВидыУчетаВремени.ПоЧасам);
	ЗапросТабель.УстановитьПараметр("ПриемНаРаботу", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	ЗапросТабель.УстановитьПараметр("Увольнение", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	ЗапросТабель.УстановитьПараметр("ПоДням", Перечисления.ИНАГРО_ВидыУчетаВремени.ПоДням);
	ЗапросТабель.УстановитьПараметр("Работает", Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.Работает);
	ЗапросТабель.УстановитьПараметр("Заболевание", Перечисления.ИНАГРО_СостоянияРаботникаОрганизации.Заболевание);
	ЗапросТабель.УстановитьПараметр("Больничный", Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Болезнь);
	ЗапросТабель.УстановитьПараметр("ВидВремениПустаяСсылка", Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ПустаяСсылка());
	ЗапросТабель.УстановитьПараметр("Ответственный", Ответственный.ФизическоеЛицо);
	ЗапросТабель.УстановитьПараметр("Основное", Перечисления.ИНАГРО_ВидыНачисленийРаботникаОрганизации.Основное);
	
	
	// условия на измерения регистра
	УсловиеПоРаботникам	= "";
	УсловиеНаОрганизации = "";
	
	Если ЗначениеЗаполнено(Работник) Тогда
		ЗапросТабель.УстановитьПараметр("РаботникиОрганизации", Работник);
	Иначе
		ЗапросТабель.УстановитьПараметр("РаботникиОрганизации", Работник);
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
			ЗапросТабель.УстановитьПараметр("Организация", ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Организация));
		Иначе
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВЫБОР
			|		КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|			ТОГДА Организации.Ссылка
			|		ИНАЧЕ Организации.ГоловнаяОрганизация
			|	КОНЕЦ КАК Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.Ссылка В(&Организация)");
			
			Запрос.УстановитьПараметр("Организация", Организация);
			ЗапросТабель.УстановитьПараметр("Организация", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		КонецЕсли;
		
	Иначе
		ЗапросТабель.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	
	УсловиеВЗапрос = "";
	УсловиеПодразделение = "";
	Если ЗначениеЗаполнено(Подразделение) Тогда
		ЗапросТабель.УстановитьПараметр("ПодразделениеОрганизации", Подразделение);
	Иначе
		ЗапросТабель.УстановитьПараметр("ПодразделениеОрганизации",Подразделение);
	КонецЕсли;
	
	Если ГруппироватьПодразделения Тогда
		ПорядокГруппировки = " ПодразделениеОрганизации, ";
	Иначе
		ПорядокГруппировки = " ";
	КонецЕсли;
	
	Макет = ПолучитьМакет("П5");
	ОбластьДанныхШапка 		= Макет.ПолучитьОбласть("Шапка");
	ОбластьДанныхОбозначения = Макет.ПолучитьОбласть("УсловныеОбозначения");
	ОбластьДанныхКолонтитул = Макет.ПолучитьОбласть("Колонтитул");
	ОбластьДанныхСтрока		= Макет.ПолучитьОбласть("Строка");
	ОбластьДанныхИтоги		= Макет.ПолучитьОбласть("Итоги");
	ОбластьДанныхПодвал		= Макет.ПолучитьОбласть("Подвал");
	ОбластьДанныхПримечание	= Макет.ПолучитьОбласть("Примечание");
	
	ОбластьДанныхШапка.Параметры.ДатаНач     = НачалоДня(НачалоПериода);
	ОбластьДанныхШапка.Параметры.ДатаКон     = КонецДня(КонецПериода);
	ОбластьДанныхШапка.Параметры.ДатаЗаполнения = ДатаЗаполнения;
	//ОбластьДанныхШапка.Параметры.ДатаЗаполнения = КонецПериода;
	
	ПараметровВстроке = ОбластьДанныхСтрока.Параметры.Количество();
	
	// Формируем запрос по табелю	
	ЗапросТабель.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Запрос сотрудников
	ЗапросТабель.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РаботникиОрганизаций.Сотрудник КАК Сотрудник,
	|	ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Фамилия + "" "" + ВЫБОР
	|			КОГДА ФИОФизическихЛицСрезПоследних.Имя = """"
	|				ТОГДА """"
	|			ИНАЧЕ ФИОФизическихЛицСрезПоследних.Имя + "" ""
	|		КОНЕЦ + ВЫБОР
	|			КОГДА ФИОФизическихЛицСрезПоследних.Отчество = """"
	|				ТОГДА """"
	|			ИНАЧЕ ФИОФизическихЛицСрезПоследних.Отчество
	|		КОНЕЦ, РаботникиОрганизаций.Сотрудник.ФизическоеЛицо.Наименование) КАК СотрудникНаименование,
	|	ДолжностиРаботников.Организация,
	|	ДолжностиРаботников.ПодразделениеОрганизации,
	|	ДолжностиРаботников.Должность
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ИНАГРО_РаботникиОрганизацийСрезПоследних.Сотрудник КАК Сотрудник,
	|		ИНАГРО_РаботникиОрганизацийСрезПоследних.Организация КАК Организация,
	|		ИНАГРО_РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации
	|	ИЗ
	|		РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних (&НачалоПериода, " + ?(ПустаяСтрока(УсловиеПоРаботникам),УсловиеНаОрганизации,УсловиеПоРаботникам) + ") КАК ИНАГРО_РаботникиОрганизацийСрезПоследних
	|	ГДЕ
	|		ИНАГРО_РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИНАГРО_РаботникиОрганизаций.Сотрудник,
	|		ИНАГРО_РаботникиОрганизаций.Организация,
	|		ИНАГРО_РаботникиОрганизаций.ПодразделениеОрганизации
	|	ИЗ
	|		РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК ИНАГРО_РаботникиОрганизаций
	|	ГДЕ
	|		ИНАГРО_РаботникиОрганизаций.Период > &НачалоПериода
	|		И ИНАГРО_РаботникиОрганизаций.Период < &КонецПериода
	|		" + ?(ПустаяСтрока(УсловиеПоРаботникам),?(ПустаяСтрока(УсловиеНаОрганизации), "", " И " + УсловиеНаОрганизации), " И " + УсловиеПоРаботникам) + "
	|		И ИНАГРО_РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)) КАК РаботникиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
	|				&КонецПериода,
	|				ФизическоеЛицо В
	|					(ВЫБРАТЬ
	|						Сотрудники.ФизическоеЛицо
	|					ИЗ
	|						Справочник.Сотрудники КАК Сотрудники
	|					ГДЕ
	|						ИСТИНА
	|						" + ?(ПустаяСтрока(УсловиеПоРаботникам),?(ПустаяСтрока(УсловиеНаОрганизации),""," И " + УсловиеНаОрганизации)," И " + СтрЗаменить(УсловиеПоРаботникам,"Сотрудник","Ссылка")) + ")) КАК ФИОФизическихЛицСрезПоследних
	|		ПО РаботникиОрганизаций.Сотрудник.ФизическоеЛицо = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&КонецПериода, " + ?(ПустаяСтрока(УсловиеПоРаботникам),УсловиеНаОрганизации,УсловиеПоРаботникам) + ") КАК ДолжностиРаботников
	|		ПО РаботникиОрганизаций.Сотрудник = ДолжностиРаботников.Сотрудник
	|		" +?(ОтборПодразделения,"ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&НачалоПериода," + ?(ПустаяСтрока(УсловиеПоРаботникам),УсловиеНаОрганизации,УсловиеПоРаботникам) + ") КАК ДолжностиРаботниковНач ПО ДолжностиРаботников.Сотрудник = РаботникиОрганизаций.Сотрудник ","")+"
	|ГДЕ
	|	ИСТИНА" + УсловиеВЗапрос + "
	|	" +?(ОтборПодразделения," И РаботникиОрганизаций.ПодразделениеОрганизации = &ПодразделениеОрганизации","")+"
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|";
	ЗапросТабель.Выполнить();
	
	РабочаяДатаТекущая = ТекущаяДата();			
	// Запрос дат периода
	Если РабочаяДатаТекущая < НачалоМесяца(НачалоПериода) Тогда
		// формируем пустую таблицу
		ВозвращаемоеСообщениеОбОшибке = НСтр("ru='Отчет можно формировать только за текущий или предыдущий периоды!';uk='Отчет можно формировать только за текущий или предыдущий периоды!'");
		Возврат Неопределено ;
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ
		|	ДатаТабеля
		|	
		|ПОМЕСТИТЬ ВТДатыТабеля 
		|	ИЗ (
		|	ВЫБРАТЬ
		|	ДАТАВРЕМЯ(" + Формат(Год(НачалоПериода), "ЧГ=4") + ", " + Месяц(НачалоПериода) + " ," + День(НачалоПериода) + ") КАК ДатаТабеля
		|	";           
		Для НомерДня = День(НачалоПериода) + 1 По День(Мин(РабочаяДатаТекущая, КонецПериода)) Цикл
			ТекстЗапроса = ТекстЗапроса + 
			"ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|  ДАТАВРЕМЯ(" + Формат(Год(НачалоПериода), "ЧГ=4")+ ", " + Месяц(НачалоПериода) + " ," + НомерДня + ")
			|	";
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + ") КАК ДатыТабеля";
	КонецЕсли;
	ЗапросТабель.Текст = ТекстЗапроса;
	ЗапросТабель.Выполнить();
	
	// Запрос Сотрудник, ДатыПериода
	ЗапросТабель.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник,
	|	РаботникиОрганизаций.Сотрудник.Наименование,
	|	Сотрудники.Организация,
	|	Сотрудники.ПодразделениеОрганизации,
	|	Сотрудники.Должность,
	|	ДатыПериода.ДатаТабеля КАК ДатаТабеля,
	|	МАКСИМУМ(РаботникиОрганизаций.Период) КАК ДатаИзменения
	|ПОМЕСТИТЬ ВТСотрудникДата
	|ИЗ
	|	ВТСотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДатыТабеля КАК ДатыПериода
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО (РаботникиОрганизаций.Сотрудник = Сотрудники.Сотрудник)
	|			И (РаботникиОрганизаций.Период <= ДатыПериода.ДатаТабеля)
	|
	|СГРУППИРОВАТЬ ПО
	|	Сотрудники.Сотрудник,
	|	РаботникиОрганизаций.Сотрудник.Наименование,
	|	Сотрудники.Организация,
	|	Сотрудники.ПодразделениеОрганизации,
	|	Сотрудники.Должность,
	|	ДатыПериода.ДатаТабеля
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РаботникиОрганизаций.Сотрудник.Наименование,
	|	ДатыПериода.ДатаТабеля
	|"; 
	ЗапросТабель.Выполнить();
	
	ЗапросТабель.Текст = 
	"ВЫБРАТЬ
	|	РабочееВремяРаботниковОрганизаций.Назначение КАК Сотрудник,		
	|	СУММА(РабочееВремяРаботниковОрганизаций.Часов) КАК Часов,
	|	РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени КАК ВидВремени,
	|	РабочееВремяРаботниковОрганизаций.Период КАК ДатаТабеля
	|	ПОМЕСТИТЬ ВТРабочеВремя
	|	ИЗ
	|	РегистрНакопления.ИНАГРО_РабочееВремяРаботниковОрганизаций КАК РабочееВремяРаботниковОрганизаций
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники
	|	ПО РабочееВремяРаботниковОрганизаций.Сотрудник = ВТСотрудники.Сотрудник
	|	ГДЕ
	|	(НЕ РабочееВремяРаботниковОрганизаций.ВЦеломЗаПериод)
	|	И (НЕ РабочееВремяРаботниковОрганизаций.СводнаяЗапись)
	|	И НАЧАЛОПЕРИОДА(РабочееВремяРаботниковОрганизаций.Период, МЕСЯЦ) = &Месяц
	|	
	|	СГРУППИРОВАТЬ ПО
	|	РабочееВремяРаботниковОрганизаций.Назначение,
	|	РабочееВремяРаботниковОрганизаций.ВидИспользованияРабочегоВремени,
	|	РабочееВремяРаботниковОрганизаций.Период
	|	
	|	ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ДатаТабеля	
	|";				
	ЗапросТабель.Выполнить();
	
	ЗапросТабель.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФактическийПериодДействия.Назначение КАК Сотрудник,
	|	ФактическийПериодДействия.ВидРасчета,
	|	ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени КАК ВидВремени,
	|	ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.ВидВремени КАК ПеречислениеВидВремени,
	|	ФактическийПериодДействия.ГрафикРаботы КАК ГрафикРаботы,
	|	ФактическийПериодДействия.ПериодДействияНачало,
	|	ФактическийПериодДействия.ПериодРегистрации,
	|	ФактическийПериодДействия.Сторно,
	|	ФактическийПериодДействия.ПериодДействияКонец,
	|	ФактическийПериодДействия.ОтработаноЧасов
	|	
	|	ПОМЕСТИТЬ ВТОсновныеНачисления
	|ИЗ
	|	РегистрРасчета.ИНАГРО_Начисления.ФактическийПериодДействия(Сотрудник В (ВЫБРАТЬ Сотрудник ИЗ ВТСотрудники)) КАК ФактическийПериодДействия
	|ГДЕ
	|	ПериодДействия = &Месяц
	|	И ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени <> &ВидВремениПустаяСсылка
	|	И НЕ ФактическийПериодДействия.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени.ВидВремени  В ( Значение(Перечисление.ИНАГРО_ВидыВремени.ДополнительноОплачиваемоеВПределахНормы), Значение(Перечисление.ИНАГРО_ВидыВремени.ЧасовоеНеотработанное),ЗНАЧЕНИЕ(Перечисление.ИНАГРО_ВидыВремени.ОтработанноеСверхНормы))";
	ЗапросТабель.Выполнить();
	
	ЗапросТабель.Текст = 
	"ВЫБРАТЬ
	|	ВТДатыТабеля.ДатаТабеля,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	Начисления.ВидВремени,
	|	Начисления.ПеречислениеВидВремени,
	|	Начисления.ГрафикРаботы,
	|	ВЫБОР КОГДА Начисления.ПеречислениеВидВремени = &ОтработаноСверхНормы ТОГДА
	|		ВЫБОР КОГДА ВТДатыТабеля.ДатаТабеля = Начисления.ПериодДействияНачало ТОГДА
	|			Начисления.ОтработаноЧасов
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ
	|	ИНАЧЕ
	|		NULL
	|	КОНЕЦ КАК ОтработаноЧасов
	|	
	|ПОМЕСТИТЬ ВТОтфильтрованныеОсновныеНачисления
	|ИЗ
	|	ВТДатыТабеля
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВТОсновныеНачисления КАК Начисления
	|ПО
	|	ВТДатыТабеля.ДатаТабеля МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец
	|	И НЕ Начисления.Сторно
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВТОсновныеНачисления КАК СторноНачисления
	|ПО
	|	ВТДатыТабеля.ДатаТабеля МЕЖДУ СторноНачисления.ПериодДействияНачало И СторноНачисления.ПериодДействияКонец
	|	И СторноНачисления.Сторно
	|	И СторноНачисления.Сотрудник = Начисления.Сотрудник
	|	И СторноНачисления.ВидРасчета = Начисления.ВидРасчета
	|	И СторноНачисления.ГрафикРаботы = Начисления.ГрафикРаботы
	|	И СторноНачисления.ПериодРегистрации > Начисления.ПериодРегистрации
	|ГДЕ СторноНачисления.Сотрудник ЕСТЬ NULL";
	ЗапросТабель.Выполнить();
	
	ЗапросТабель.Текст = "ВЫБРАТЬ
	|	Работники.Сотрудник КАК Сотрудник,
	|	Работники.Период,
	|	Работники.ГрафикРаботы,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ПериодЗавершения,
	|   NULL КАК ГрафикРаботыЗавершения
	|	ПОМЕСТИТЬ ВТГрафикиРаботниковСрез
	|	ИЗ
	|	РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&НачалоПериода, Сотрудник В (ВЫБРАТЬ Сотрудник ИЗ ВТСотрудники)" + ?(ПустаяСтрока(УсловиеНаОрганизации),""," И " + УсловиеНаОрганизации) + ") КАК Работники
	|	
	|	ИНДЕКСИРОВАТЬ ПО 
	|	Сотрудник,
	|	Период";
	ЗапросТабель.Выполнить();
	
	ЗапросТабель.Текст = "ВЫБРАТЬ
	|	Работники.Сотрудник КАК Сотрудник,
	|	&НачалоПериода КАК Период,
	|	ВЫБОР КОГДА Работники.ПериодЗавершения <= &НачалоПериода И Работники.ПериодЗавершения > &НачальнаяДата ТОГДА Работники.ГрафикРаботыЗавершения ИНАЧЕ Работники.ГрафикРаботы КОНЕЦ КАК ГрафикРаботы
	|	ПОМЕСТИТЬ ВТГрафикиРаботников
	|	ИЗ
	|	ВТГрафикиРаботниковСрез КАК Работники
	|	
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|	РаботникиОрганизаций.Сотрудник,
	|	РаботникиОрганизаций.Период,
	|	РаботникиОрганизаций.ГрафикРаботы
	|	ИЗ
	|	РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизаций
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСотрудники
	|	ПО РаботникиОрганизаций.Сотрудник = ВТСотрудники.Сотрудник
	|	ГДЕ
	|	РаботникиОрганизаций.Период > &НачалоПериода
	|	И РаботникиОрганизаций.Период <= &КонецПериода
	|	
	|	
	|	ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	Период	";
	ЗапросТабель.Выполнить();
	
	ЗапросТабель.Текст = "ВЫБРАТЬ 
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|	Дата,
	|	ОсновноеЗначение,
	|	ВидУчетаВремени	
	|	ПОМЕСТИТЬ ВТГрафикиРаботыПоВидамВремени
	|	ИЗ
	|		РегистрСведений.ИНАГРО_ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
	|	ГДЕ
	|		(ГрафикиРаботыПоВидамВремени.ГрафикРаботы В (ВЫБРАТЬ Сотрудник ИЗ ВТСотрудники)
	|		ИЛИ ГрафикиРаботыПоВидамВремени.ГрафикРаботы В (ВЫБРАТЬ РАЗЛИЧНЫЕ ГрафикРаботы ИЗ ВТГрафикиРаботников))	
	|		И ВидУчетаВремени <> &ПоДням
	|	ИНДЕКСИРОВАТЬ ПО
	|	ГрафикиРаботыПоВидамВремени.ГрафикРаботы,
	|	ГрафикиРаботыПоВидамВремени.Дата,
	|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени
	|";
	ЗапросТабель.Выполнить();
	
	
	ЗапросТабель.Текст = "ВЫБРАТЬ 
	|	Основной.Сотрудник,
	|	Основной.ГрафикРаботы,
	|	Основной.Период КАК ПериодНачало,
	|	ВЫБОР КОГДА МИНИМУМ(Вспомогательный.Период) ЕСТЬ NULL ТОГДА &КонецПериода ИНАЧЕ ДОБАВИТЬКДАТЕ(МИНИМУМ(Вспомогательный.Период), СЕКУНДА, -1) КОНЕЦ КАК ПериодКонец
	|	
	|	ПОМЕСТИТЬ ВТГрафикиПериодами
	|	
	|	ИЗ ВТГрафикиРаботников КАК Основной
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботников КАК Вспомогательный
	|	ПО Вспомогательный.Сотрудник = Основной.Сотрудник
	|	И Вспомогательный.Период > Основной.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|	Основной.Сотрудник,
	|	Основной.ГрафикРаботы,
	|	Основной.Период
	|	
	|	ИНДЕКСИРОВАТЬ ПО
	|	Основной.Сотрудник,
	|	Основной.Период ";
	ЗапросТабель.Выполнить();  
	
	ЗапросТабель.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
     |	СостояниеРаботников.Сотрудник КАК Сотрудник,
     |	СостояниеРаботников.Период КАК Период,
     |	СостояниеРаботников.Состояние
     |ПОМЕСТИТЬ ВТСостояниеРаботниковСрез
     |ИЗ
     |	РегистрСведений.ИНАГРО_СостояниеРаботниковОрганизаций.СрезПоследних(
     |			&НачалоПериода,
     |			Сотрудник В (ВЫБРАТЬ Сотрудник ИЗ ВТСотрудники)
     |				) КАК СостояниеРаботников
     |
     |ИНДЕКСИРОВАТЬ ПО
     |	Сотрудник,
     |	Период";
	ЗапросТабель.Выполнить();
	
	ЗапросТабель.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
     |	СостояниеРаботников.Сотрудник КАК Сотрудник,
     |	&НачалоПериода КАК Период,
     |	СостояниеРаботников.Состояние КАК Состояние
     |ПОМЕСТИТЬ ВТСостояниеРаботников
     |ИЗ
     |	ВТСостояниеРаботниковСрез КАК СостояниеРаботников
     |
     |ОБЪЕДИНИТЬ ВСЕ
     |
     |ВЫБРАТЬ
     |	СостояниеРаботников.Сотрудник,
     |	СостояниеРаботников.Период,
     |	СостояниеРаботников.Состояние
     |ИЗ
     |	РегистрСведений.ИНАГРО_СостояниеРаботниковОрганизаций КАК СостояниеРаботников
     |ГДЕ
     |	СостояниеРаботников.Период > &НачалоПериода
     |	И СостояниеРаботников.Период <= &КонецПериода
	 |  И СостояниеРаботников.Сотрудник В(ВЫБРАТЬ Сотрудник ИЗ ВТСотрудники)
     |	                             
     |ИНДЕКСИРОВАТЬ ПО
     |	Сотрудник,
     |	Период";
	ЗапросТабель.Выполнить();
	
	ЗапросТабель.Текст = "ВЫБРАТЬ
     |	Основной.Сотрудник КАК Сотрудник,
	 |	ВЫБОР
     |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_СостоянияРаботникаОрганизации.Заболевание)
	 |			ТОГДА ЗНАЧЕНИЕ(Справочник.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Болезнь)
     |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_СостоянияРаботникаОрганизации.Командировка)
     |			ТОГДА ЗНАЧЕНИЕ(Справочник.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Командировка)
     |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_СостоянияРаботникаОрганизации.ОтпускЕжегодный)
     |			ТОГДА ЗНАЧЕНИЕ(Справочник.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск)
     |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_СостоянияРаботникаОрганизации.ОтпускУчебныйОплачиваемый)
     |			ТОГДА ЗНАЧЕНИЕ(Справочник.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение)
     |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_СостоянияРаботникаОрганизации.ОтпускУчебныйНеоплачиваемый)
     |			ТОГДА ЗНАЧЕНИЕ(Справочник.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый)
     |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_СостоянияРаботникаОрганизации.ОтпускБезСохраненияЗарплаты)
     |			ТОГДА ЗНАЧЕНИЕ(Справочник.ИНАГРО_КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя)
     |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_СостоянияРаботникаОрганизации.ОтпускПоБеременностиИРодам)
     |			ТОГДА ЗНАЧЕНИЕ(Справочник.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам)
     |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_СостоянияРаботникаОрганизации.ОтпускПоУходуЗаРебенкомДо3Лет)
     |			ТОГДА ЗНАЧЕНИЕ(Справочник.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам)
     |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_СостоянияРаботникаОрганизации.ОтсутствуетПоНевыясненнойПричине)
     |			ТОГДА ЗНАЧЕНИЕ(Справочник.ИНАГРО_КлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам)
     |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_СостоянияРаботникаОрганизации.ПриостановкаТрудовогоДоговора)
     |			ТОГДА ЗНАЧЕНИЕ(Справочник.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Простой)
	 |		КОГДА Основной.Состояние = ЗНАЧЕНИЕ(Перечисление.ИНАГРО_СостоянияРаботникаОрганизации.Мобилизован)
	 |			ТОГДА ЗНАЧЕНИЕ(Справочник.ИНАГРО_КлассификаторИспользованияРабочегоВремени.НеотработанноеВремяПоЗаконодательству)
     |	КОНЕЦ КАК ВидВремени,
     |	Основной.Период КАК ПериодНачало,
     |	ВЫБОР
     |		КОГДА МИНИМУМ(Вспомогательный.Период) ЕСТЬ NULL 
     |			ТОГДА &КонецПериода
     |		ИНАЧЕ ДОБАВИТЬКДАТЕ(МИНИМУМ(Вспомогательный.Период), СЕКУНДА, -1)
     |	КОНЕЦ КАК ПериодКонец
	 |ПОМЕСТИТЬ ВТСостояниеСотрудников
     |ИЗ
     |	ВТСостояниеРаботников КАК Основной
     |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостояниеРаботников КАК Вспомогательный
     |		ПО (Вспомогательный.Сотрудник = Основной.Сотрудник)
     |			И (Вспомогательный.Период > Основной.Период)
     |
     |СГРУППИРОВАТЬ ПО
     |	Основной.Сотрудник,
     |	Основной.Состояние,
     |	Основной.Период
     |
	 |ИНДЕКСИРОВАТЬ ПО
	 |	Сотрудник,
	 |	ПериодНачало
	 |";
	ЗапросТабель.Выполнить();
	
	
	ЗапросТабель.Текст = 
	"ВЫБРАТЬ
	|		НеотфильтрованноеВремя.Организация КАК Организация,
	|		НеотфильтрованноеВремя.Организация.НаименованиеПолное КАК ИмяОрганизации,
	|		НеотфильтрованноеВремя.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		НеотфильтрованноеВремя.ПодразделениеОрганизации.Наименование КАК ИмяПодразделения,
	|		НеотфильтрованноеВремя.Должность.Наименование КАК Должность,
	|		НеотфильтрованноеВремя.Сотрудник,
	|		НеотфильтрованноеВремя.Сотрудник.ИНАГРО_ТабельныйНомер КАК ТабельныйНомер,
	|		НеотфильтрованноеВремя.СотрудникНаименование,
	|		НеотфильтрованноеВремя.ДатаТабеля,
	|		РегламентированныйПроизводственныйКалендарь.ВидДня КАК ВидДня,	  
	|		НеотфильтрованноеВремя.ВидВремени,
	|		ВЫБОР КОГДА НеотфильтрованноеВремя.ВидВремени.РабочееВремя ТОГДА
	|			ЕстьNULL(НеотфильтрованноеВремя.Часов, 0)
	|		ИНАЧЕ 0 КОНЕЦ КАК Часов,
	|		ВЫБОР КОГДА НЕ НеотфильтрованноеВремя.ВидВремени.РабочееВремя ТОГДА
	|			ЕстьNULL(НеотфильтрованноеВремя.Часов, 0)
	|		ИНАЧЕ 0 КОНЕЦ КАК НеотработаноЧасов,
	|		ВЫБОР 
	|			КОГДА НеотфильтрованноеВремя.ВидВремени = &Явка ТОГДА 1
	|			КОГДА НеотфильтрованноеВремя.ВидВремени = &ВечерниеЧасы ТОГДА 2
	|			КОГДА НеотфильтрованноеВремя.ВидВремени = &НочныеЧасы ТОГДА 3
	|			КОГДА НеотфильтрованноеВремя.ВидВремени = &Выходной ТОГДА 5
	|			ИНАЧЕ 4
	|		КОНЕЦ КАК ПолеСортировки,
	|		Руководитель.Должность КАК ДолжностьРуководителя,
	|		ФИОРуководителя.Фамилия + "" "" + ФИОРуководителя.Имя  + "" "" + ФИОРуководителя.Отчество КАК ФИОРуководителя,		
	|		ЕСТЬNULL(РуководительКадровойСлужбыПодразделения.Должность, РуководительКадровойСлужбыОрганизации.Должность) КАК ДолжностьКадровика,
	|		ВЫБОР КОГДА ФИОКадровикаПодразделения.Фамилия ЕСТЬ NULL 
	|		ТОГДА ФИОКадровикаОрганизации.Фамилия + "" "" + ФИОКадровикаОрганизации.Имя  + "" "" + ФИОКадровикаОрганизации.Отчество 
	|		ИНАЧЕ ФИОКадровикаПодразделения.Фамилия + "" "" + ФИОКадровикаПодразделения.Имя + "" "" + ФИОКадровикаПодразделения.Отчество 
	|		КОНЕЦ КАК ФИОКадровика,
	|		Ответственный.ФИООтветственного КАК ФИООтветственного,
	|		Ответственный.ДолжностьОтветственного КАК ДолжностьОтветственного,
	|		ЕСТЬNULL(ПлановыеНачисленияРаботниковОрганизаций.Показатель1, 0) КАК Оклад,
	|		НеотфильтрованноеВремя.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени,
	|		0 КАК ВнутрисменныеОтклоненияЧасов
	|		ИЗ (
	|		ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|		ВТСотрудникДата.Организация КАК Организация,
	|		ВТСотрудникДата.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		ВТСотрудникДата.Должность,
	|		ВТСотрудникДата.Сотрудник КАК Сотрудник,
	|		ВТСотрудникДата.СотрудникНаименование КАК СотрудникНаименование,
	|		ВТСотрудникДата.ДатаТабеля КАК ДатаТабеля,
	|		ВЫБОР  
	|			КОГДА НЕ ВТРабочеВремя.ВидВремени ЕСТЬ NULL ТОГДА ВТРабочеВремя.ВидВремени
	|			КОГДА (НЕ ВТОсновныеНачисления.ВидВремени ЕСТЬ NULL ) ТОГДА 
	|				ВЫБОР 
	|					КОГДА ВТОсновныеНачисления.ВидВремени В (&НочныеЧасы, &ВечерниеЧасы) 
	|						И ГрафикПоОсновнымНачислениям.ОсновноеЗначение = 0 ТОГДА 
	|						   NULL
	|					КОГДА НЕ ВТОсновныеНачисления.ПеречислениеВидВремени В (Значение(Перечисление.ИНАГРО_ВидыВремени.ЦелодневноеНеотработанное), Значение(Перечисление.ИНАГРО_ВидыВремени.ОтработанноеСверхНормы),Значение(Перечисление.ИНАГРО_ВидыВремени.ПустаяСсылка))
	|						И ГрафикПоОсновнымНачислениям.ОсновноеЗначение = 0 ТОГДА 
	|		   				   &Выходной
	|					ИНАЧЕ  ВТОсновныеНачисления.ВидВремени
	|				КОНЕЦ  
	|			КОГДА НЕ ВТСостояниеСотрудников.ВидВремени ЕСТЬ NULL ТОГДА 
	|				ВЫБОР 
	|					КОГДА ГрафикПоСостояниюСотрудников.ОсновноеЗначение = 0 
	|						ИЛИ ИндивидуальныйГрафикПоСостояниюСотрудников.ОсновноеЗначение = 0 ТОГДА &Выходной
	|					ИНАЧЕ ВТСостояниеСотрудников.ВидВремени
	|				КОНЕЦ
	|			КОГДА НЕ ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени ЕСТЬ NULL ТОГДА
	|				ВЫБОР
	|					КОГДА ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени = &ПоНочнымЧасам ТОГДА &НочныеЧасы
	|					КОГДА ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени = &ПоВечернимЧасам ТОГДА &ВечерниеЧасы
	|					КОГДА ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение = 0 ТОГДА &Выходной
	|					ИНАЧЕ &Явка
	|				КОНЕЦ
	|			КОГДА НЕ ГрафикПоРаботникам.ВидУчетаВремени ЕСТЬ NULL ТОГДА
	|				ВЫБОР
	|					КОГДА ГрафикПоРаботникам.ВидУчетаВремени = &ПоНочнымЧасам ТОГДА &НочныеЧасы
	|					КОГДА ГрафикПоРаботникам.ВидУчетаВремени = &ПоВечернимЧасам ТОГДА &ВечерниеЧасы
	|					КОГДА ГрафикПоРаботникам.ОсновноеЗначение = 0 ТОГДА &Выходной
	|					ИНАЧЕ &Явка
	|				КОНЕЦ
	|			ИНАЧЕ &Выходной
	|		КОНЕЦ КАК ВидВремени,
	|		ВЫБОР 
	|			КОГДА НЕ ВТОсновныеНачисления.ОтработаноЧасов ЕСТЬ NULL ТОГДА ВТОсновныеНачисления.ОтработаноЧасов
	|			КОГДА НЕ ВТРабочеВремя.Часов ЕСТЬ NULL ТОГДА ВТРабочеВремя.Часов
	|			КОГДА НЕ ГрафикПоОсновнымНачислениям.ОсновноеЗначение ЕСТЬ NULL ТОГДА ГрафикПоОсновнымНачислениям.ОсновноеЗначение
	|			КОГДА НЕ ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение ЕСТЬ NULL ТОГДА ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение
	|			КОГДА НЕ ГрафикПоРаботникам.ОсновноеЗначение ЕСТЬ NULL ТОГДА ГрафикПоРаботникам.ОсновноеЗначение
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Часов,
	|		NULL КАК ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени,
	|		0 КАК ВнутрисменныеОтклоненияЧасов
	|	ИЗ ВТСотрудникДата
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО (РаботникиОрганизаций.Сотрудник = ВТСотрудникДата.Сотрудник)
	|			И (РаботникиОрганизаций.Период = ВТСотрудникДата.ДатаИзменения)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРабочеВремя
	|		ПО ВТРабочеВремя.Сотрудник = ВТСотрудникДата.Сотрудник
	|		И ВТРабочеВремя.ДатаТабеля = ВТСотрудникДата.ДатаТабеля
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиПериодами
	|		ПО ВТГрафикиПериодами.Сотрудник = ВТСотрудникДата.Сотрудник
	|		И ВТСотрудникДата.ДатаТабеля >= ВТГрафикиПериодами.ПериодНачало
	|		И ВТСотрудникДата.ДатаТабеля <= ВТГрафикиПериодами.ПериодКонец
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтфильтрованныеОсновныеНачисления КАК ВТОсновныеНачисления
	|		ПО ВТСотрудникДата.Сотрудник = ВТОсновныеНачисления.Сотрудник
	|			И ВТСотрудникДата.ДатаТабеля = ВТОсновныеНачисления.ДатаТабеля
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ГрафикПоОсновнымНачислениям
	|		ПО ГрафикПоОсновнымНачислениям.ГрафикРаботы = ВТОсновныеНачисления.ГрафикРаботы
	|		И ГрафикПоОсновнымНачислениям.Дата =  ВТСотрудникДата.ДатаТабеля
	|		И ВЫБОР 
	|			КОГДА ВТОсновныеНачисления.ВидВремени = &НочныеЧасы ТОГДА &ПоНочнымЧасам
	|			КОГДА ВТОсновныеНачисления.ВидВремени = &ВечерниеЧасы ТОГДА &ПоВечернимЧасам
	|			ИНАЧЕ &ПоЧасам 
	|		КОНЕЦ = ГрафикПоОсновнымНачислениям.ВидУчетаВремени
	|		И НЕ ВТОсновныеНачисления.ВидВремени ЕСТЬ NULL   
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостояниеСотрудников
	|		ПО ВТСотрудникДата.Сотрудник = ВТСостояниеСотрудников.Сотрудник
	|		И ВТСотрудникДата.ДатаТабеля >= ВТСостояниеСотрудников.ПериодНачало
	|		И ВТСотрудникДата.ДатаТабеля <= ВТСостояниеСотрудников.ПериодКонец
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ИндивидуальныйГрафикПоСостояниюСотрудников
	|		ПО ИндивидуальныйГрафикПоСостояниюСотрудников.ГрафикРаботы = ВТСотрудникДата.Сотрудник
	|		И ИндивидуальныйГрафикПоСостояниюСотрудников.Дата =  ВТСотрудникДата.ДатаТабеля
	|		И ВЫБОР 
	|			КОГДА ВТСостояниеСотрудников.ВидВремени = &НочныеЧасы ТОГДА &ПоНочнымЧасам
	|			КОГДА ВТСостояниеСотрудников.ВидВремени = &ВечерниеЧасы ТОГДА &ПоВечернимЧасам
	|			ИНАЧЕ &ПоЧасам 
	|		КОНЕЦ = ИндивидуальныйГрафикПоСостояниюСотрудников.ВидУчетаВремени
	|		И НЕ ВТСостояниеСотрудников.ВидВремени ЕСТЬ NULL
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ГрафикПоСостояниюСотрудников
	|		ПО ГрафикПоСостояниюСотрудников.ГрафикРаботы = ВТОсновныеНачисления.ГрафикРаботы
	|		И ГрафикПоСостояниюСотрудников.Дата =  ВТСотрудникДата.ДатаТабеля
	|		И ВЫБОР
	|			КОГДА ВТСостояниеСотрудников.ВидВремени = &НочныеЧасы ТОГДА &ПоНочнымЧасам
	|			КОГДА ВТСостояниеСотрудников.ВидВремени = &ВечерниеЧасы ТОГДА &ПоВечернимЧасам
	|			ИНАЧЕ &ПоЧасам 
	|		КОНЕЦ = ГрафикПоСостояниюСотрудников.ВидУчетаВремени
	|		И НЕ ВТСостояниеСотрудников.ВидВремени ЕСТЬ NULL 
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизацийПриемы
	|		ПО РаботникиОрганизацийПриемы.Сотрудник = ВТСотрудникДата.Сотрудник
	|		И РаботникиОрганизацийПриемы.ПричинаИзмененияСостояния = &ПриемНаРаботу
	|		И РаботникиОрганизацийПриемы.Период <= ВТСотрудникДата.ДатаТабеля
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РаботникиОрганизаций КАК РаботникиОрганизацийУвольнения
	|		ПО РаботникиОрганизацийУвольнения.Сотрудник = ВТСотрудникДата.Сотрудник
	|		И РаботникиОрганизацийУвольнения.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ИндивидуальныйГрафикПоРаботникам
	|		ПО ИндивидуальныйГрафикПоРаботникам.ГрафикРаботы = ВТСотрудникДата.Сотрудник
	|		И ИндивидуальныйГрафикПоРаботникам.Дата =  ВТСотрудникДата.ДатаТабеля
	|		И ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени <> &ПоДням
	|		И НЕ((ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени В (&ПоВечернимЧасам,&ПоНочнымЧасам))
	|			И  (ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение = 0))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГрафикиРаботыПоВидамВремени КАК ГрафикПоРаботникам
	|		ПО ГрафикПоРаботникам.ГрафикРаботы = ВТГрафикиПериодами.ГрафикРаботы
	|		И ГрафикПоРаботникам.Дата =  ВТСотрудникДата.ДатаТабеля
	|		И ГрафикПоРаботникам.ВидУчетаВремени <> &ПоДням
	|		И ((ГрафикПоРаботникам.ВидУчетаВремени = ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени)
	|			ИЛИ (ИндивидуальныйГрафикПоРаботникам.ГрафикРаботы ЕСТЬ NULL))
	|		И НЕ((ГрафикПоРаботникам.ВидУчетаВремени В (&ПоВечернимЧасам,&ПоНочнымЧасам))
	|			И  (ГрафикПоРаботникам.ОсновноеЗначение = 0))  
	|	
	|	ГДЕ (РаботникиОрганизацийУвольнения.Период ЕСТЬ NULL
	|	ИЛИ РаботникиОрганизацийУвольнения.Период > ВТСотрудникДата.ДатаТабеля)
	|	И   НЕ
	|	(НЕ ВЫБОР 
	|			КОГДА НЕ ВТРабочеВремя.ВидВремени ЕСТЬ NULL ТОГДА ВТРабочеВремя.ВидВремени
	|			КОГДА НЕ ВТОсновныеНачисления.ВидВремени ЕСТЬ NULL ТОГДА 
	|				ВЫБОР 
	|					КОГДА ВТОсновныеНачисления.ВидВремени В (&НочныеЧасы, &ВечерниеЧасы) 
	|						И ГрафикПоОсновнымНачислениям.ОсновноеЗначение = 0 ТОГДА 
	|						   NULL
	|					КОГДА ВТОсновныеНачисления.ПеречислениеВидВремени <> Значение(Перечисление.ИНАГРО_ВидыВремени.ЦелодневноеНеотработанное)
	|						И ГрафикПоОсновнымНачислениям.ОсновноеЗначение = 0 ТОГДА 
	|		   				   &Выходной
	|					ИНАЧЕ  ВТОсновныеНачисления.ВидВремени
	|				КОНЕЦ
	|			КОГДА НЕ ВТСостояниеСотрудников.ВидВремени ЕСТЬ NULL ТОГДА 
	|				ВЫБОР 
	|					КОГДА ГрафикПоСостояниюСотрудников.ОсновноеЗначение = 0 
	|						ИЛИ ИндивидуальныйГрафикПоСостояниюСотрудников.ОсновноеЗначение = 0 ТОГДА &Выходной
	|					ИНАЧЕ ВТСостояниеСотрудников.ВидВремени
	|				КОНЕЦ
	|			КОГДА НЕ ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени ЕСТЬ NULL ТОГДА
	|				ВЫБОР
	|					КОГДА ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени = &ПоНочнымЧасам ТОГДА &НочныеЧасы
	|					КОГДА ИндивидуальныйГрафикПоРаботникам.ВидУчетаВремени = &ПоВечернимЧасам ТОГДА &ВечерниеЧасы
	|					КОГДА ИндивидуальныйГрафикПоРаботникам.ОсновноеЗначение = 0 ТОГДА &Выходной
	|					ИНАЧЕ &Явка
	|				КОНЕЦ
	|			КОГДА НЕ ГрафикПоРаботникам.ВидУчетаВремени ЕСТЬ NULL ТОГДА
	|				ВЫБОР
	|					КОГДА ГрафикПоРаботникам.ВидУчетаВремени = &ПоНочнымЧасам ТОГДА &НочныеЧасы
	|					КОГДА ГрафикПоРаботникам.ВидУчетаВремени = &ПоВечернимЧасам ТОГДА &ВечерниеЧасы
	|					КОГДА ГрафикПоРаботникам.ОсновноеЗначение = 0 ТОГДА &Выходной
	|					ИНАЧЕ &Явка
	|				КОНЕЦ
	|			ИНАЧЕ &Выходной
	|		КОНЕЦ В ( &Явка, &НочныеЧасы, &ВечерниеЧасы) 
	|		И
	|		ГрафикПоРаботникам.ВидУчетаВремени В (&ПоНочнымЧасам, &ПоВечернимЧасам) )"  + "
	|	" +?(ОтборПодразделения," И РаботникиОрганизаций.ПодразделениеОрганизации = &ПодразделениеОрганизации","")+"
	|	) КАК НеотфильтрованноеВремя
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(ДОБАВИТЬКДАТЕ(&КонецПериода, СЕКУНДА, -1), ) КАК ПлановыеНачисленияРаботниковОрганизаций
	|       ПО ПлановыеНачисленияРаботниковОрганизаций.Сотрудник = НеотфильтрованноеВремя.Сотрудник
	|       И ПлановыеНачисленияРаботниковОрганизаций.ВидНачисления = &Основное
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&КонецПериода, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК Руководитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОРуководителя
	|		ПО Руководитель.ФизическоеЛицо = ФИОРуководителя.ФизическоеЛицо";
	Если ГруппироватьПодразделения Тогда
		ЗапросТабель.Текст = ЗапросТабель.Текст + "
		|	ПО НеотфильтрованноеВремя.ПодразделениеОрганизации = Руководитель.СтруктурнаяЕдиница";
	Иначе
		ЗапросТабель.Текст = ЗапросТабель.Текст + "
		|	ПО НеотфильтрованноеВремя.Организация = Руководитель.СтруктурнаяЕдиница";
	КонецЕсли;
	ЗапросТабель.Текст = ЗапросТабель.Текст + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&КонецПериода, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы)) КАК РуководительКадровойСлужбыОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОКадровикаОрганизации
	|		ПО РуководительКадровойСлужбыОрганизации.ФизическоеЛицо = ФИОКадровикаОрганизации.ФизическоеЛицо
	|	ПО НеотфильтрованноеВремя.Организация = РуководительКадровойСлужбыОрганизации.СтруктурнаяЕдиница
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&КонецПериода, ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.РуководительКадровойСлужбы)) КАК РуководительКадровойСлужбыПодразделения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОКадровикаПодразделения
	|		ПО РуководительКадровойСлужбыПодразделения.ФизическоеЛицо = ФИОКадровикаПодразделения.ФизическоеЛицо
	|	ПО НеотфильтрованноеВремя.ПодразделениеОрганизации = РуководительКадровойСлужбыПодразделения.СтруктурнаяЕдиница "+?(НЕ ГруппироватьПодразделения, " И ЛОЖЬ", "")+"
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|		МАКСИМУМ(РаботникиОрганизацийСрезПоследних.Должность) КАК ДолжностьОтветственного,
	|					МАКСИМУМ(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя  + "" "" + ФИОФизЛицСрезПоследних.Отчество) КАК ФИООтветственного
	|				ИЗ
	|				РегистрСведений.ИНАГРО_РаботникиОрганизаций.СрезПоследних(&КонецПериода, Сотрудник.Физическоелицо = &Ответственный) КАК РаботникиОрганизацийСрезПоследних
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОФизЛицСрезПоследних
	|					ПО РаботникиОрганизацийСрезПоследних.Сотрудник.Физическоелицо = ФИОФизЛицСрезПоследних.ФизическоеЛицо) КАК Ответственный
	|	ПО ИСТИНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИНАГРО_РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|   ПО РегламентированныйПроизводственныйКалендарь.ДатаКалендаря = НеотфильтрованноеВремя.ДатаТабеля
	|	ГДЕ НЕ НеотфильтрованноеВремя.ВидВремени ЕСТЬ NULL
	|   И ВЫБОР КОГДА &ОтборПоРаботнику ТОГДА НеотфильтрованноеВремя.Сотрудник В (&РаботникиОрганизации) ИНАЧЕ ИСТИНА КОНЕЦ
	|   И ВЫБОР КОГДА &ОтборПоПодразделению ТОГДА НеотфильтрованноеВремя.ПодразделениеОрганизации В (&ПодразделениеОрганизации) ИНАЧЕ ИСТИНА КОНЕЦ
	|	И ВЫБОР КОГДА &ОтборПоОрганизации ТОГДА НеотфильтрованноеВремя.Организация В(&Организация) ИНАЧЕ ИСТИНА КОНЕЦ
	|УПОРЯДОЧИТЬ ПО";
		
	Если ГруппироватьПодразделения Тогда
		ЗапросТабель.Текст = ЗапросТабель.Текст + Символы.ПС + "Организация, ПодразделениеОрганизации, СотрудникНаименование, НеотфильтрованноеВремя.Сотрудник, Должность, ДатаТабеля, ПолеСортировки";
	Иначе
		ЗапросТабель.Текст = ЗапросТабель.Текст + Символы.ПС + "Организация, СотрудникНаименование, НеотфильтрованноеВремя.Сотрудник, Должность, ДатаТабеля, ПолеСортировки";
	КонецЕсли;
	
	ЗапросТабель.УстановитьПараметр("ОтборПоОрганизации",ЗначениеЗаполнено(Организация));
	ЗапросТабель.УстановитьПараметр("ОтборПоПодразделению",ЗначениеЗаполнено(Подразделение));
	ЗапросТабель.УстановитьПараметр("ОтборПоРаботнику",ЗначениеЗаполнено(Работник));
	
	РезультатЗапроса = ЗапросТабель.Выполнить();
	ВыборкаПоРаботнику = РезультатЗапроса.Выбрать();
	
	СоответствиеЦелодневныхНевыходов = Новый Соответствие;
	СоответствиеЦелодневныхНевыходовЧасы = Новый Соответствие;
	СоответствиеЦелодневныхНевыходовВсего = Новый Соответствие;
	
	Если ГруппироватьПодразделения Тогда
		
		Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Организация") Цикл
			
			Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ПодразделениеОрганизации") Цикл
				Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ЧасыВсего = 0;
				ДниВсего = 0;
				СверхурочныеВсего = 0;
				ВечерниеВсего = 0;
				НочныеВсего = 0;
				ВыходныеВсего = 0;
				НеявкиВсего = 0; 
				НомерПП = 0;
				СоответствиеЦелодневныхНевыходовВсего.Очистить(); 
				ОбластьДанныхШапка.Параметры.Заполнить(ВыборкаПоРаботнику);
				ОбластьДанныхПодвал.Параметры.Заполнить(ВыборкаПоРаботнику);
				
				ОбластьДанныхПодвал.Параметры.ФИООтветственного = ФизическиеЛицаКлиентСервер.ИмяФамилияВФорматеДСТУ(?(ОбластьДанныхПодвал.Параметры.ФИООтветственного = null, "", ОбластьДанныхПодвал.Параметры.ФИООтветственного));
				ОбластьДанныхПодвал.Параметры.ФИОРуководителя = ФизическиеЛицаКлиентСервер.ИмяФамилияВФорматеДСТУ(?(ОбластьДанныхПодвал.Параметры.ФИОРуководителя = null, "", ОбластьДанныхПодвал.Параметры.ФИОРуководителя));
				ОбластьДанныхПодвал.Параметры.ФИОКадровика = ФизическиеЛицаКлиентСервер.ИмяФамилияВФорматеДСТУ(?(ОбластьДанныхПодвал.Параметры.ФИОКадровика = null, "", ОбластьДанныхПодвал.Параметры.ФИОКадровика));					
				
				СведенияПоОрганизации =БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ВыборкаПоРаботнику.Организация, КонецМесяца(НачалоПериода));
				ОбластьДанныхШапка.Параметры.ЕДРПОУ = СведенияПоОрганизации.КодПоЕДРПОУ;
				ОбластьДанныхШапка.Параметры.ИмяОрганизации = ВРег(ОбластьДанныхШапка.Параметры.ИмяОрганизации);
				
				ДокументРезультат.Вывести(ОбластьДанныхШапка);
				Если ВыводитьУсловныеОбозначения Тогда
					ДокументРезультат.Вывести(ОбластьДанныхОбозначения);
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;	
				ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
				Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("СотрудникНаименование") Цикл
					Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Сотрудник") Цикл
						
						НомерПП = НомерПП + 1;
						
						ДниПерваяПоловина  = 0;
						ЧасыПерваяПоловина = 0;
						ДниВтораяПоловина  = 0;
						ЧасыВтораяПоловина = 0;
						
						ЧасыСверхурочные = 0;
						ЧасыВечерние = 0;
						ЧасыНочные = 0;
						ЧасыВыходные = 0;
						
						Для Сч = 1 По ПараметровВстроке Цикл
							ОбластьДанныхСтрока.Параметры.Установить(Сч - 1,""); 
						КонецЦикла;
						СоответствиеЦелодневныхНевыходов.Очистить();
						СоответствиеЦелодневныхНевыходовЧасы.Очистить();
						
						ОбластьДанныхСтрока.Параметры.НомерПП = НомерПП;
						ОбластьДанныхСтрока.Параметры.ФИО = СокрП(ВыборкаПоРаботнику.СотрудникНаименование);
						Если ВыборкаПоРаботнику.Сотрудник.ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
							ОбластьДанныхСтрока.Параметры.Пол = "Ч";
						ИначеЕсли ВыборкаПоРаботнику.Сотрудник.ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
							ОбластьДанныхСтрока.Параметры.Пол = "Ж";
						Иначе
							ОбластьДанныхСтрока.Параметры.Пол = "";
						КонецЕсли;	
						ОбластьДанныхСтрока.Параметры.Должность = ВыборкаПоРаботнику.Должность;
						ОбластьДанныхСтрока.Параметры.Заполнить(ВыборкаПоРаботнику);
						
						Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ДатаТабеля") Цикл
							
							СимволДня = "";
							ОтработаноЧасовЗаДень = 0;
							ОтработаноЧасовЗаДеньСтр = "";
							НомерДня = Строка(День(ВыборкаПоРаботнику.ДатаТабеля));
							ПерваяПоловина = День(ВыборкаПоРаботнику.ДатаТабеля) <= 15;
							УчитыватьВыходнойДень = Истина;
							
							Пока ВыборкаПоРаботнику.Следующий() Цикл
								Если  ВыборкаПоРаботнику.ВидВремени = ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени Тогда
									ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов;
									Продолжить;
								КонецЕсли;
								
								Если ВыборкаПоРаботнику.ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ВыходныеДни И НЕ УчитыватьВыходнойДень Тогда
									Продолжить;
								КонецЕсли;
								
								Если ВыборкаПоРаботнику.ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Сверхурочные Тогда
									ЧасыСверхурочные = ЧасыСверхурочные + ВыборкаПоРаботнику.Часов;
								ИначеЕсли ВыборкаПоРаботнику.ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Вечерние Тогда
									ЧасыВечерние = ЧасыВечерние + ВыборкаПоРаботнику.Часов;
								ИначеЕсли ВыборкаПоРаботнику.ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Ночные Тогда
									ЧасыНочные = ЧасыНочные + ВыборкаПоРаботнику.Часов;		
								ИначеЕсли ВыборкаПоРаботнику.ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.РаботаВыходныеИПраздничные Тогда
									ЧасыВыходные = ЧасыВыходные + ВыборкаПоРаботнику.Часов;		
								КонецЕсли;	
								
								БуквенныйКод = ВыборкаПоРаботнику.ВидВремени.БуквенныйКод;
								СимволДня = СимволДня + "/" + БуквенныйКод;
								// Обработка внутрисменных отклонений
								Если ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени <> NULL 
									И ВыборкаПоРаботнику.ВидВремени.РабочееВремя
									И НЕ(ВыборкаПоРаботнику.ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Вечерние
									ИЛИ ВыборкаПоРаботнику.ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Ночные) Тогда
									
									ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.Часов;
									ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень - ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов;
									БуквенныйКод = ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени.БуквенныйКод;
									ГрафаНеявок = ГрафаНеявок(ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени);
									СимволДня = СимволДня + "/" + БуквенныйКод;
									ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.Часов - ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов) + "/" + Строка(ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов);
									
									Если ГрафаНеявок <> 0 Тогда
										Если СоответствиеЦелодневныхНевыходов.Получить(ГрафаНеявок) = Неопределено Тогда
											СоответствиеЦелодневныхНевыходов.Вставить(ГрафаНеявок, 0);
											СоответствиеЦелодневныхНевыходовЧасы.Вставить(ГрафаНеявок, ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов);
										Иначе
											СоответствиеЦелодневныхНевыходовЧасы.Вставить(ГрафаНеявок,  ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов + СоответствиеЦелодневныхНевыходовЧасы.Получить(ГрафаНеявок));
										КонецЕсли;
										
										Если СоответствиеЦелодневныхНевыходовВсего.Получить(ГрафаНеявок) = Неопределено Тогда
											СоответствиеЦелодневныхНевыходовВсего.Вставить(ГрафаНеявок,  ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов);  
										Иначе
											СоответствиеЦелодневныхНевыходовВсего.Вставить(ГрафаНеявок,  ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов + СоответствиеЦелодневныхНевыходовВсего.Получить(ГрафаНеявок));  
										КонецЕсли;
										
									КонецЕсли;	
									
								ИначеЕсли НЕ(ВыборкаПоРаботнику.ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Вечерние
									ИЛИ ВыборкаПоРаботнику.ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Ночные) 
									И ВыборкаПоРаботнику.ВидВремени.РабочееВремя Тогда
									
									ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.Часов;
									ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.Часов);
								ИначеЕсли ВыборкаПоРаботнику.ВидВремени.РабочееВремя Тогда
									ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.Часов);
								КонецЕсли;
								
								Если (НЕ ВыборкаПоРаботнику.ВидВремени.РабочееВремя)
									И (ВыборкаПоРаботнику.ВидВремени <> Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ВыходныеДни)Тогда
									ГрафаНеявок = ГрафаНеявок(ВыборкаПоРаботнику.ВидВремени);
									
									Если ГрафаНеявок = 1 И ВыборкаПоРаботнику.ВидДня = Перечисления.ИНАГРО_ВидыДнейПроизводственногоКалендаря.Праздник Тогда
										// отпуск в праздник не считаем
										Продолжить;
									КонецЕсли;	
									
									Если  СоответствиеЦелодневныхНевыходов.Получить(ГрафаНеявок) = Неопределено Тогда
										СоответствиеЦелодневныхНевыходов.Вставить(ГрафаНеявок,  1);
										СоответствиеЦелодневныхНевыходовЧасы.Вставить(ГрафаНеявок, ВыборкаПоРаботнику.НеотработаноЧасов);
									Иначе
										СоответствиеЦелодневныхНевыходов.Вставить(ГрафаНеявок,  1 + СоответствиеЦелодневныхНевыходов.Получить(ГрафаНеявок));
										СоответствиеЦелодневныхНевыходовЧасы.Вставить(ГрафаНеявок, ВыборкаПоРаботнику.НеотработаноЧасов + СоответствиеЦелодневныхНевыходовЧасы.Получить(ГрафаНеявок));
									КонецЕсли;
									
									Если  СоответствиеЦелодневныхНевыходовВсего.Получить(ГрафаНеявок) = Неопределено Тогда
										СоответствиеЦелодневныхНевыходовВсего.Вставить(ГрафаНеявок,  ВыборкаПоРаботнику.НеотработаноЧасов);
									Иначе
										СоответствиеЦелодневныхНевыходовВсего.Вставить(ГрафаНеявок, ВыборкаПоРаботнику.НеотработаноЧасов + СоответствиеЦелодневныхНевыходовВсего.Получить(ГрафаНеявок)); 
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЦикла;	
							СимволДня = Сред(СимволДня, 2);
							ОтработаноЧасовЗаДеньСтр = Сред(ОтработаноЧасовЗаДеньСтр, 2);
							ОбластьДанныхСтрока.Параметры["Символ"+НомерДня] = СимволДня;
							ОбластьДанныхСтрока.Параметры["ДополнительноеЗначение"+НомерДня] = Формат(ОтработаноЧасовЗаДеньСтр);
							
							
							Если ОтработаноЧасовЗаДень <> 0 Тогда
								Если ПерваяПоловина Тогда
									ДниПерваяПоловина = ДниПерваяПоловина + 1;
									ЧасыПерваяПоловина = ЧасыПерваяПоловина + ОтработаноЧасовЗаДень
								Иначе
									ДниВтораяПоловина = ДниВтораяПоловина + 1;
									ЧасыВтораяПоловина = ЧасыВтораяПоловина + ОтработаноЧасовЗаДень
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						//	заполняем раздел "Отработано за"
						ОбластьДанныхСтрока.Параметры.ДниЗаМесяц  = ДниПерваяПоловина + ДниВтораяПоловина;
						ОбластьДанныхСтрока.Параметры.ЧасыЗаМесяц = ЧасыПерваяПоловина + ЧасыВтораяПоловина;
						ОбластьДанныхСтрока.Параметры.Сверхурочные = ЧасыСверхурочные;
						ОбластьДанныхСтрока.Параметры.Вечерние = ЧасыВечерние;
						ОбластьДанныхСтрока.Параметры.Ночные = ЧасыНочные;
						ОбластьДанныхСтрока.Параметры.ВыходныеИПраздники = ЧасыВыходные;
						
						ДниВсего = ДниВсего + ДниПерваяПоловина + ДниВтораяПоловина; 
						ЧасыВсего = ЧасыВсего + ЧасыПерваяПоловина + ЧасыВтораяПоловина;
						СверхурочныеВсего = СверхурочныеВсего + ЧасыСверхурочные;
						ВечерниеВсего = ВечерниеВсего + ЧасыВечерние;
						НочныеВсего = НочныеВсего + ЧасыНочные;
						ВыходныеВсего = ВыходныеВсего + ЧасыВыходные;
						
						// заполняем раздел "Неявки по причинам"
						НеявкиВсегоДни = 0;
						НеявкиВсегоЧасы = 0;
						Для каждого Элемент Из СоответствиеЦелодневныхНевыходов Цикл
							Если Элемент.Ключ = 0 Тогда
								Продолжить;
							КонецЕсли;
							Если (Элемент.Значение > 0) Тогда
								ОбластьДанныхСтрока.Параметры["НеявкиДни" + Строка(Элемент.Ключ)] = Элемент.Значение;
								НеявкиВсегоДни = НеявкиВсегоДни + Элемент.Значение;
							КонецЕсли;
						КонецЦикла;
						Для каждого Элемент Из СоответствиеЦелодневныхНевыходовЧасы Цикл
							Если Элемент.Ключ = 0 Тогда
								Продолжить;
							КонецЕсли;
							Если (Элемент.Значение > 0) Тогда
								ОбластьДанныхСтрока.Параметры["НеявкиЧасы" + Строка(Элемент.Ключ)] = Элемент.Значение;
								НеявкиВсегоЧасы = НеявкиВсегоЧасы + Элемент.Значение;
							КонецЕсли;
						КонецЦикла; 
						ОбластьДанныхСтрока.Параметры.НеявкиВсегоДни = НеявкиВсегоДни;
						ОбластьДанныхСтрока.Параметры.НеявкиВсегоЧасы = НеявкиВсегоЧасы;
						
						НеявкиВсего = НеявкиВсего + НеявкиВсегоЧасы; 
						
						// Проверим, уместится ли строка на странице или надо открывать новую страницу
						Если Не ДокументРезультат.ПроверитьВывод(ОбластьДанныхСтрока) Тогда
							ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
							ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
						КонецЕсли;
						
						ДокументРезультат.Вывести(ОбластьДанныхСтрока);
						
					КонецЦикла;
				КонецЦикла;
				
				ОбластьДанныхИтоги.Параметры.ДниЗаМесяцВсего = ДниВсего;
				ОбластьДанныхИтоги.Параметры.ЧасыЗаМесяцВсего = ЧасыВсего;
				ОбластьДанныхИтоги.Параметры.СверхурочныеВсего = СверхурочныеВсего;
				ОбластьДанныхИтоги.Параметры.ВечерниеВсего = ВечерниеВсего;
				ОбластьДанныхИтоги.Параметры.НочныеВсего = НочныеВсего;
				ОбластьДанныхИтоги.Параметры.ВыходныеИПраздникиВсего = ВыходныеВсего;
				ОбластьДанныхИтоги.Параметры.НеявкиВсегоЧасыВсего = НеявкиВсего; 
				Если Не ДокументРезультат.ПроверитьВывод(ОбластьДанныхИтоги) Тогда
					ПоследняяСтрокаЛиста = ДокументРезультат.ПолучитьОбласть(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,);
					ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,),);
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
					ДокументРезультат.Вывести(ПоследняяСтрокаЛиста);
				КонецЕсли;
				ДокументРезультат.Вывести(ОбластьДанныхИтоги);
				
				Если Не ДокументРезультат.ПроверитьВывод(ОбластьДанныхПодвал) Тогда
					ПоследняяСтрокаЛиста = ДокументРезультат.ПолучитьОбласть(ДокументРезультат.ВысотаТаблицы - 4,,ДокументРезультат.ВысотаТаблицы,);
					ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы - 4,,ДокументРезультат.ВысотаТаблицы,),);
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
					ДокументРезультат.Вывести(ПоследняяСтрокаЛиста);
				КонецЕсли;
				ДокументРезультат.Вывести(ОбластьДанныхПодвал);
				Если ВыводитьПримечание Тогда
					Если Не ДокументРезультат.ПроверитьВывод(ОбластьДанныхПримечание) Тогда
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;	
					ДокументРезультат.Вывести(ОбластьДанныхПримечание);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;	
		
	Иначе
		Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("Организация") Цикл
			
			Если ДокументРезультат.ВысотаТаблицы > 0 Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ЧасыВсего = 0;
			ДниВсего = 0;
			СверхурочныеВсего = 0;
			ВечерниеВсего = 0;
			НочныеВсего = 0;
			ВыходныеВсего = 0;
			НеявкиВсего = 0;
			СоответствиеЦелодневныхНевыходовЧасы.Очистить();
			НомерПП = 0;
			ОбластьДанныхШапка.Параметры.Заполнить(ВыборкаПоРаботнику);
			ОбластьДанныхПодвал.Параметры.Заполнить(ВыборкаПоРаботнику);                                    
			
			ОбластьДанныхПодвал.Параметры.ФИООтветственного = ФизическиеЛицаКлиентСервер.ИмяФамилияВФорматеДСТУ(?(ОбластьДанныхПодвал.Параметры.ФИООтветственного = null, "", ОбластьДанныхПодвал.Параметры.ФИООтветственного));
			ОбластьДанныхПодвал.Параметры.ФИОРуководителя = ФизическиеЛицаКлиентСервер.ИмяФамилияВФорматеДСТУ(?(ОбластьДанныхПодвал.Параметры.ФИОРуководителя = null, "", ОбластьДанныхПодвал.Параметры.ФИОРуководителя));
			ОбластьДанныхПодвал.Параметры.ФИОКадровика = ФизическиеЛицаКлиентСервер.ИмяФамилияВФорматеДСТУ(?(ОбластьДанныхПодвал.Параметры.ФИОКадровика = null, "", ОбластьДанныхПодвал.Параметры.ФИОКадровика));
			
			СведенияПоОрганизации =БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ВыборкаПоРаботнику.Организация, КонецМесяца(КонецПериода));
			ОбластьДанныхШапка.Параметры.ЕДРПОУ = СведенияПоОрганизации.КодПоЕДРПОУ;
			
			Если Не ОтборПодразделения Тогда
				ОбластьДанныхШапка.Параметры.ИмяПодразделения = "";  
			КонецЕсли;
			ОбластьДанныхШапка.Параметры.ИмяОрганизации = ВРег(ОбластьДанныхШапка.Параметры.ИмяОрганизации);
			
			ДокументРезультат.Вывести(ОбластьДанныхШапка);
			
			Если ВыводитьУсловныеОбозначения Тогда
				ДокументРезультат.Вывести(ОбластьДанныхОбозначения);
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
			Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("СотрудникНаименование") Цикл
				Пока ВыборкаПоРаботнику. СледующийПоЗначениюПоля("Сотрудник") Цикл
					
					НомерПП = НомерПП + 1;
					
					ДниПерваяПоловина  = 0;
					ЧасыПерваяПоловина = 0;
					ДниВтораяПоловина  = 0;
					ЧасыВтораяПоловина = 0;
					
					ЧасыСверхурочные = 0;
					ЧасыВечерние = 0;
					ЧасыНочные = 0;
					ЧасыВыходные = 0;
					
					Для Сч = 1 По ПараметровВстроке Цикл
						ОбластьДанныхСтрока.Параметры.Установить(Сч - 1,""); 
					КонецЦикла;
					СоответствиеЦелодневныхНевыходов.Очистить();
					СоответствиеЦелодневныхНевыходовЧасы.Очистить();
					
					ОбластьДанныхСтрока.Параметры.НомерПП = НомерПП;
					ОбластьДанныхСтрока.Параметры.ФИО = СокрП(ВыборкаПоРаботнику.СотрудникНаименование);
					ОбластьДанныхСтрока.Параметры.Должность = ВыборкаПоРаботнику.Должность;
					ОбластьДанныхСтрока.Параметры.Пол = Лев(ВыборкаПоРаботнику.Сотрудник.Физическоелицо.Пол,1);
					ОбластьДанныхСтрока.Параметры.Заполнить(ВыборкаПоРаботнику);
					
					Пока ВыборкаПоРаботнику.СледующийПоЗначениюПоля("ДатаТабеля") Цикл
						
						СимволДня = "";
						ОтработаноЧасовЗаДень = 0;
						ОтработаноЧасовЗаДеньСтр = "";
						НомерДня = Строка(День(ВыборкаПоРаботнику.ДатаТабеля));
						ПерваяПоловина = День(ВыборкаПоРаботнику.ДатаТабеля) <= 15;
						УчитыватьВыходнойДень = Истина;
						
						Пока ВыборкаПоРаботнику.Следующий() Цикл
							Если  ВыборкаПоРаботнику.ВидВремени = ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени Тогда
								ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов;
								Продолжить;
							КонецЕсли;
							
							Если ВыборкаПоРаботнику.ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ВыходныеДни И НЕ УчитыватьВыходнойДень Тогда
								Продолжить;
							КонецЕсли;
							
							Если ВыборкаПоРаботнику.ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Сверхурочные Тогда
								ЧасыСверхурочные = ЧасыСверхурочные + ВыборкаПоРаботнику.Часов;
							ИначеЕсли ВыборкаПоРаботнику.ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Вечерние Тогда
								ЧасыВечерние = ЧасыВечерние + ВыборкаПоРаботнику.Часов;
							ИначеЕсли ВыборкаПоРаботнику.ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Ночные Тогда
								ЧасыНочные = ЧасыНочные + ВыборкаПоРаботнику.Часов;		
							ИначеЕсли ВыборкаПоРаботнику.ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.РаботаВыходныеИПраздничные Тогда
								ЧасыВыходные = ЧасыВыходные + ВыборкаПоРаботнику.Часов;		
							КонецЕсли;
							
							БуквенныйКод = ВыборкаПоРаботнику.ВидВремени.БуквенныйКод;
							СимволДня = СимволДня + "/" + БуквенныйКод;
							// Обработка внутрисменных отклонений
							Если ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени <> NULL 
								И ВыборкаПоРаботнику.ВидВремени.РабочееВремя
								И НЕ(ВыборкаПоРаботнику.ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Вечерние
								ИЛИ ВыборкаПоРаботнику.ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Ночные) Тогда
								
								ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.Часов;
								ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень - ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов;
								БуквенныйКод = ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени.БуквенныйКод;
								СимволДня = СимволДня + "/" + БуквенныйКод;
								ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.Часов - ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов) + "/" + Строка(ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов);
								
								ГрафаНеявок = ГрафаНеявок(ВыборкаПоРаботнику.ВнутрисменныеОтклоненияВидИспользованияРабочегоВремени);
								Если ГрафаНеявок <> 0 Тогда
									Если СоответствиеЦелодневныхНевыходов.Получить(ГрафаНеявок) = Неопределено Тогда
										СоответствиеЦелодневныхНевыходов.Вставить(ГрафаНеявок, 0);
										СоответствиеЦелодневныхНевыходовЧасы.Вставить(ГрафаНеявок, ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов);
									Иначе
										СоответствиеЦелодневныхНевыходовЧасы.Вставить(ГрафаНеявок,  ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов + СоответствиеЦелодневныхНевыходовЧасы.Получить(ГрафаНеявок));
									КонецЕсли;
								КонецЕсли;	
								
								Если СоответствиеЦелодневныхНевыходовВсего.Получить(ГрафаНеявок) = Неопределено Тогда
									СоответствиеЦелодневныхНевыходовВсего.Вставить(ГрафаНеявок, ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов);   
								Иначе
									СоответствиеЦелодневныхНевыходовВсего.Вставить(ГрафаНеявок,  ВыборкаПоРаботнику.ВнутрисменныеОтклоненияЧасов + СоответствиеЦелодневныхНевыходовВсего.Получить(ГрафаНеявок));    
								КонецЕсли;
								
							ИначеЕсли НЕ(ВыборкаПоРаботнику.ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Вечерние
								ИЛИ ВыборкаПоРаботнику.ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Ночные) 
								И ВыборкаПоРаботнику.ВидВремени.РабочееВремя Тогда
								
								ОтработаноЧасовЗаДень = ОтработаноЧасовЗаДень + ВыборкаПоРаботнику.Часов;
								ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.Часов);
							ИначеЕсли ВыборкаПоРаботнику.ВидВремени.РабочееВремя Тогда
								ОтработаноЧасовЗаДеньСтр = ОтработаноЧасовЗаДеньСтр + "/" + Строка(ВыборкаПоРаботнику.Часов);
							КонецЕсли;
							
							Если (НЕ ВыборкаПоРаботнику.ВидВремени.РабочееВремя)
								И (ВыборкаПоРаботнику.ВидВремени <> Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ВыходныеДни)Тогда
								ГрафаНеявок = ГрафаНеявок(ВыборкаПоРаботнику.ВидВремени);
								
								Если ГрафаНеявок = 1 И ВыборкаПоРаботнику.ВидДня = Перечисления.ИНАГРО_ВидыДнейПроизводственногоКалендаря.Праздник Тогда
									// отпуск в праздник не считаем
									Продолжить;
								КонецЕсли;	
								
								Если  СоответствиеЦелодневныхНевыходов.Получить(ГрафаНеявок) = Неопределено Тогда
									СоответствиеЦелодневныхНевыходов.Вставить(ГрафаНеявок,  1);
									СоответствиеЦелодневныхНевыходовЧасы.Вставить(ГрафаНеявок, ВыборкаПоРаботнику.НеотработаноЧасов);
								Иначе
									СоответствиеЦелодневныхНевыходов.Вставить(ГрафаНеявок,  1 + СоответствиеЦелодневныхНевыходов.Получить(ГрафаНеявок));
									СоответствиеЦелодневныхНевыходовЧасы.Вставить(ГрафаНеявок, ВыборкаПоРаботнику.НеотработаноЧасов + СоответствиеЦелодневныхНевыходовЧасы.Получить(ГрафаНеявок));
								КонецЕсли;
								
								Если  СоответствиеЦелодневныхНевыходовВсего.Получить(ГрафаНеявок) = Неопределено Тогда
									СоответствиеЦелодневныхНевыходовВсего.Вставить(ГрафаНеявок, ВыборкаПоРаботнику.НеотработаноЧасов);
								Иначе
									СоответствиеЦелодневныхНевыходовВсего.Вставить(ГрафаНеявок, ВыборкаПоРаботнику.НеотработаноЧасов + СоответствиеЦелодневныхНевыходовВсего.Получить(ГрафаНеявок));
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;	
						СимволДня = Сред(СимволДня, 2);
						ОтработаноЧасовЗаДеньСтр = Сред(ОтработаноЧасовЗаДеньСтр, 2);
						ОбластьДанныхСтрока.Параметры["Символ"+НомерДня] = СимволДня;
						ОбластьДанныхСтрока.Параметры["ДополнительноеЗначение"+НомерДня] = Формат(ОтработаноЧасовЗаДеньСтр);
						
						Если ОтработаноЧасовЗаДень <> 0 Тогда
							Если ПерваяПоловина Тогда
								ДниПерваяПоловина = ДниПерваяПоловина + 1;
								ЧасыПерваяПоловина = ЧасыПерваяПоловина + ОтработаноЧасовЗаДень
							Иначе
								ДниВтораяПоловина = ДниВтораяПоловина + 1;
								ЧасыВтораяПоловина = ЧасыВтораяПоловина + ОтработаноЧасовЗаДень
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
					//	заполняем раздел "Отработано за"
					ОбластьДанныхСтрока.Параметры.ДниЗаМесяц  = ДниПерваяПоловина + ДниВтораяПоловина;
					ОбластьДанныхСтрока.Параметры.ЧасыЗаМесяц = ЧасыПерваяПоловина + ЧасыВтораяПоловина;
					ОбластьДанныхСтрока.Параметры.Сверхурочные = ЧасыСверхурочные;
					ОбластьДанныхСтрока.Параметры.Вечерние = ЧасыВечерние;
					ОбластьДанныхСтрока.Параметры.Ночные = ЧасыНочные;
					ОбластьДанныхСтрока.Параметры.ВыходныеИПраздники = ЧасыВыходные;
					
					ДниВсего = ДниВсего + ДниПерваяПоловина + ДниВтораяПоловина; 
					ЧасыВсего = ЧасыВсего + ЧасыПерваяПоловина + ЧасыВтораяПоловина;
					СверхурочныеВсего = СверхурочныеВсего + ЧасыСверхурочные;
					ВечерниеВсего = ВечерниеВсего + ЧасыВечерние;
					НочныеВсего = НочныеВсего + ЧасыНочные;
					ВыходныеВсего = ВыходныеВсего + ЧасыВыходные;
					
					// заполняем раздел "Неявки по причинам"
					НеявкиВсегоДни = 0;
					НеявкиВсегоЧасы = 0;
					Для каждого Элемент Из СоответствиеЦелодневныхНевыходов Цикл
						Если Элемент.Ключ = 0 Тогда
							Продолжить;
						КонецЕсли;
						Если (Элемент.Значение > 0) Тогда
							ОбластьДанныхСтрока.Параметры["НеявкиДни" + Строка(Элемент.Ключ)] = Элемент.Значение;
							НеявкиВсегоДни = НеявкиВсегоДни + Элемент.Значение;
						КонецЕсли;
					КонецЦикла;
					Для каждого Элемент Из СоответствиеЦелодневныхНевыходовЧасы Цикл
						Если Элемент.Ключ = 0 Тогда
							Продолжить;
						КонецЕсли;
						Если (Элемент.Значение > 0) Тогда
							ОбластьДанныхСтрока.Параметры["НеявкиЧасы" + Строка(Элемент.Ключ)] = Элемент.Значение;
							НеявкиВсегоЧасы = НеявкиВсегоЧасы + Элемент.Значение;
						КонецЕсли;
					КонецЦикла; 
					ОбластьДанныхСтрока.Параметры.НеявкиВсегоДни = НеявкиВсегоДни;
					ОбластьДанныхСтрока.Параметры.НеявкиВсегоЧасы = НеявкиВсегоЧасы;
					НеявкиВсего = НеявкиВсего + НеявкиВсегоЧасы; 						
					// Проверим, уместится ли строка на странице или надо открывать новую страницу
					Если Не ДокументРезультат.ПроверитьВывод(ОбластьДанныхСтрока) Тогда
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
						ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
					КонецЕсли;
					
					ДокументРезультат.Вывести(ОбластьДанныхСтрока);
					
				КонецЦикла;
			КонецЦикла;
			
			ОбластьДанныхИтоги.Параметры.ДниЗаМесяцВсего = ДниВсего;
			ОбластьДанныхИтоги.Параметры.ЧасыЗаМесяцВсего = ЧасыВсего;
			ОбластьДанныхИтоги.Параметры.СверхурочныеВсего = СверхурочныеВсего;
			ОбластьДанныхИтоги.Параметры.ВечерниеВсего = ВечерниеВсего;
			ОбластьДанныхИтоги.Параметры.НочныеВсего = НочныеВсего;
			ОбластьДанныхИтоги.Параметры.ВыходныеИПраздникиВсего = ВыходныеВсего;
			ОбластьДанныхИтоги.Параметры.НеявкиВсегоЧасыВсего = НеявкиВсего; 
			
			Для сч =1 По 12 Цикл
				ОбластьДанныхИтоги.Параметры["НеявкиЧасы" + СокрЛП(Строка(сч))] = 0;
			КонецЦикла; 
			Для каждого Элемент Из СоответствиеЦелодневныхНевыходовВсего Цикл
				Если (Элемент.Значение > 0) Тогда
					ОбластьДанныхИтоги.Параметры["НеявкиЧасы" + Строка(Элемент.Ключ)] = Элемент.Значение;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ДокументРезультат.ПроверитьВывод(ОбластьДанныхИтоги) Тогда
				ПоследняяСтрокаЛиста = ДокументРезультат.ПолучитьОбласть(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,);
				ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы - 3,,ДокументРезультат.ВысотаТаблицы,),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
				ДокументРезультат.Вывести(ПоследняяСтрокаЛиста);
			КонецЕсли;
			ДокументРезультат.Вывести(ОбластьДанныхИтоги);
			
			Если Не ДокументРезультат.ПроверитьВывод(ОбластьДанныхПодвал) Тогда
				ПоследняяСтрокаЛиста = ДокументРезультат.ПолучитьОбласть(ДокументРезультат.ВысотаТаблицы - 4,,ДокументРезультат.ВысотаТаблицы,);
				ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(ДокументРезультат.ВысотаТаблицы - 4,,ДокументРезультат.ВысотаТаблицы,),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				ДокументРезультат.Вывести(ОбластьДанныхКолонтитул);
				ДокументРезультат.Вывести(ПоследняяСтрокаЛиста);
			КонецЕсли;
			ДокументРезультат.Вывести(ОбластьДанныхПодвал);
			Если ВыводитьПримечание Тогда
				Если Не ДокументРезультат.ПроверитьВывод(ОбластьДанныхПримечание) Тогда
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;	
				ДокументРезультат.Вывести(ОбластьДанныхПримечание);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	
	Возврат ДокументРезультат;
	
КонецФункции 

//  Процедура заполняет фильтр по переданным значениям
//  для заполнения документа "Табель учета рабочего времени"
//  Организация, ОтборОрганизации,Подразделение, ОтборПодразделения,
//	Работник, ОтборРаботника,ПериодРегистрации
Процедура УстановитьФильтр(ФильтрСоответствия) Экспорт
	
	Если ФильтрСоответствия["Организация"] <> Неопределено Тогда
		Организация = ФильтрСоответствия["Организация"];
	КонецЕсли;
	
	Если ФильтрСоответствия["Подразделение"] <> Неопределено Тогда
		Подразделение = ФильтрСоответствия["Подразделение"];
	КонецЕсли;
	
	Если ФильтрСоответствия["Работник"] <> Неопределено Тогда
		Работник = ФильтрСоответствия["Работник"];
	КонецЕсли;
	
	Если ФильтрСоответствия["ОтборПоОрганизации"] <> Неопределено Тогда
		ОтборОрганизации = ФильтрСоответствия["ОтборПоОрганизации"];
	КонецЕсли;
	
	Если ФильтрСоответствия["ОтборПоПодразделению"] <> Неопределено Тогда
		ОтборПодразделения = ФильтрСоответствия["ОтборПоПодразделению"];
	КонецЕсли;
	
	Если ФильтрСоответствия["ОтборПоРаботнику"] <> Неопределено Тогда
		ОтборРаботника = ФильтрСоответствия["ОтборПоРаботнику"];
	КонецЕсли;
	
	Если ФильтрСоответствия["НачалоПериода"] <> Неопределено Тогда
		НачалоПериода = ФильтрСоответствия["НачалоПериода"];
	КонецЕсли;
	
	Если ФильтрСоответствия["КонецПериода"] <> Неопределено Тогда
		КонецПериода = ФильтрСоответствия["КонецПериода"];
	КонецЕсли;
	
	
	Если ФильтрСоответствия["ПериодРегистрации"] <> Неопределено Тогда
		ДатаНач = ФильтрСоответствия["ПериодРегистрации"];
	КонецЕсли;
	
	Если ФильтрСоответствия["ДатаЗаполнения"] <> Неопределено Тогда
		ДатаЗаполнения = ФильтрСоответствия["ДатаЗаполнения"];
	КонецЕсли;
	
	Если ФильтрСоответствия["ОтветственноеЛицо"] <> Неопределено Тогда
		ОтветственноеЛицо = ФильтрСоответствия["ОтветственноеЛицо"];
	КонецЕсли;
	
КонецПроцедуры // УстановитьФильтр()  	

Функция ГрафаНеявок(ВидВремени)
	
	Если ВидВремени.РабочееВремя Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ВидВремени.Пустая() Тогда
		Возврат 0;
	КонецЕсли;
	
	Если  ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск
		Или ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск
		Или ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ОтпускЧернобыльский Тогда
		Возврат 1;
	ИначеЕсли ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучение
		Или ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ОтпускНаОбучениеНеоплачиваемый
		Или ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ОтпускТворческий
		Или ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпускБезОплаты
		Или ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ОтпускДополнительныйНаДетей
		Или ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ОтпускПоУходуЗаРебенком
		Или ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.НеотработанноеВремяПоЗаконодательству Тогда
		Возврат 2;
	ИначеЕсли ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоРазрешениюРаботодателя Тогда
		Возврат 3;	
	ИначеЕсли ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.НеоплачиваемыйОтпускПоЗаконодательству Тогда
		Возврат 4;
	ИначеЕсли ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ПереводНаНеполныйДень Тогда
		Возврат 5;	
	ИначеЕсли ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ПереводНаДругуюРаботу Тогда
		Возврат 6;		
	ИначеЕсли ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Простой Тогда
		Возврат 7;
	ИначеЕсли ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Прогул Тогда
		Возврат 8;
	ИначеЕсли ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Забастовка Тогда
		Возврат 9;
	ИначеЕсли ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.Болезнь
		Или ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.БолезньБезОплаты Тогда
		Возврат 10;
	ИначеЕсли ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам
		Или ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ДругиеНеявкиПоКолДоговору
		Или ВидВремени = Справочники.ИНАГРО_КлассификаторИспользованияРабочегоВремени.ДругиеНеявки Тогда
		Возврат 11;	
	Иначе
		Возврат 12;
	КонецЕсли;	
	
КонецФункции	

#КонецОбласти    

#КонецЕсли