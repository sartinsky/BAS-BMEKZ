#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыФункцииФормированияОтчета

///////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции формирования отчета

Процедура СформироватьОтчет(Знач ПараметрыОтчета, АдресХранилища) Экспорт
	
	ТаблицаПроверок = СоздатьТаблицуПроверок();
	ЗаполнитьОписанияПроверок(ТаблицаПроверок, ПараметрыОтчета);
	
	ВыполнитьВсеПроверки(ТаблицаПроверок, ПараметрыОтчета);
	
	ДокументРезультат = ЗаполнитьОтчетОРезультатахПроверки(ТаблицаПроверок, ПараметрыОтчета);
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Результат", ДокументРезультат);
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
							
КонецПроцедуры 

Функция СоздатьТаблицуПроверок()

	ТаблицаПроверок = Новый ТаблицаЗначений;
	
	ТаблицаПроверок.Колонки.Добавить("Идентификатор");
	ТаблицаПроверок.Колонки.Добавить("ИдентификаторРаздела");
	ТаблицаПроверок.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));
	ТаблицаПроверок.Колонки.Добавить("Наименование");
	ТаблицаПроверок.Колонки.Добавить("ПредметКонтроля");
	ТаблицаПроверок.Колонки.Добавить("КомментарийРезультатаНетОшибок");
	ТаблицаПроверок.Колонки.Добавить("КомментарийРезультатаОшибка");
	ТаблицаПроверок.Колонки.Добавить("КомментарийРезультатаНеВыполнена");
	ТаблицаПроверок.Колонки.Добавить("ПричиныОшибок");
	ТаблицаПроверок.Колонки.Добавить("Рекомендации");
	ТаблицаПроверок.Колонки.Добавить("ГиперссылкаРекомендаций");
	// В этих колонках хранятся результаты выполнения проверки
	ТаблицаПроверок.Колонки.Добавить("ПроверкаВыполнена", Новый ОписаниеТипов("Булево"));
	ТаблицаПроверок.Колонки.Добавить("ОбнаруженыОшибки",  Новый ОписаниеТипов("Булево"));
	ТаблицаПроверок.Колонки.Добавить("ТаблицаОшибок"); // Таблица значений для детального отчета об ошибках
	// Значения колонок КомментарийРезультата, ПричиныОшибокРезультата , РекомендацииРезультата могут быть переопределены в алгоритме проверки
	ТаблицаПроверок.Колонки.Добавить("КомментарийРезультата");
	ТаблицаПроверок.Колонки.Добавить("ПричиныОшибокРезультата");
	ТаблицаПроверок.Колонки.Добавить("РекомендацииРезультата");
	ТаблицаПроверок.Колонки.Добавить("РасшифровкаРезультата");
	ТаблицаПроверок.Колонки.Добавить("ГиперссылкаРезультата");

	Возврат ТаблицаПроверок;
	
КонецФункции

Процедура ЗаполнитьОписанияПроверок(ТаблицаПроверок, ПараметрыОтчета)
	
	МакетПравил   = Отчеты.ЭкспрессПроверкаВеденияУчета.ПолучитьМакет("ОписаниеПроверок");
	ОбластьПравил = МакетПравил.Область("Правила");
	
	НомПервойСтрокиПравил    = ОбластьПравил.Верх;
	НомПоследнейСтрокиПравил = ОбластьПравил.Низ;
	
	ИдентификаторРаздела = "";
	
	Для НомСтроки = НомПервойСтрокиПравил По НомПоследнейСтрокиПравил Цикл
		ОбластьСтроки    = МакетПравил.Область(НомСтроки, , НомСтроки, );
		ИмяОбластиСтроки = ОбластьСтроки.Имя;
		// Строки, для которых не задано имя области, пропускаем 
		Если ИмяОбластиСтроки = "R"+Формат(НомСтроки, "ЧГ=") Тогда
			Продолжить;
		КонецЕсли;
		// Строки проверок, для которых были сняты флажки, пропускаем 
		Если ПараметрыОтчета.ВыполняемыеПроверки.Найти(ИмяОбластиСтроки) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоГруппа = МакетПравил.Область(ИмяОбластиСтроки + "|ЭтоГруппа").Текст = "1";
		
		НоваяСтрока = ТаблицаПроверок.Добавить();
		НоваяСтрока.Идентификатор   = ИмяОбластиСтроки;
		НоваяСтрока.ЭтоГруппа       = ЭтоГруппа;
		НоваяСтрока.Наименование    = МакетПравил.Область(ИмяОбластиСтроки + "|Наименование").Текст;
		НоваяСтрока.ПредметКонтроля = МакетПравил.Область(ИмяОбластиСтроки + "|ПредметКонтроля").Текст;
		Если ЭтоГруппа Тогда
			ИдентификаторРаздела = ИмяОбластиСтроки;
		Иначе
			НоваяСтрока.ИдентификаторРаздела             = ИдентификаторРаздела;
			НоваяСтрока.КомментарийРезультатаНетОшибок   = МакетПравил.Область(ИмяОбластиСтроки + "|КомментарийРезультатаНетОшибок").Текст;
			НоваяСтрока.КомментарийРезультатаОшибка      = МакетПравил.Область(ИмяОбластиСтроки + "|КомментарийРезультатаОшибка").Текст;
			НоваяСтрока.КомментарийРезультатаНеВыполнена = МакетПравил.Область(ИмяОбластиСтроки + "|КомментарийРезультатаНеВыполнена").Текст;
			НоваяСтрока.ПричиныОшибок                    = МакетПравил.Область(ИмяОбластиСтроки + "|ПричиныОшибок").Текст;
			НоваяСтрока.Рекомендации                     = МакетПравил.Область(ИмяОбластиСтроки + "|Рекомендации").Текст;
			НоваяСтрока.ГиперссылкаРекомендаций			 = МакетПравил.Область(ИмяОбластиСтроки + "|ГиперссылкаРекомендаций").Текст;
			НоваяСтрока.РасшифровкаРезультата 		 	 = ИмяОбластиСтроки;
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьВсеПроверки(ТаблицаПроверок, ПараметрыОтчета)

	ЕстьДоступ = Истина;

	МассивДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	Если МассивДоступныхОрганизаций.Найти(ПараметрыОтчета.Организация) =  Неопределено Тогда
		// Пользователь не может просматривать данные по выбранной организации.
		ЕстьДоступ = Ложь;
		ТекстПричиныОшибокРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Нет доступа к данным организации %1';uk='Немає доступу до даних організації %1'"),
			ПараметрыОтчета.Организация);
	КонецЕсли;
	
	// Проверки выполняются строго по данным выбранной организации,
	// поэтому выполняем их в привилегированном режиме 
	// без необходимости наложения отборов с помощью RLS.
	УстановитьПривилегированныйРежим(Истина);
	
	Для каждого СтрокаПроверки Из ТаблицаПроверок Цикл
		Если ЕстьДоступ Тогда
			ВыполнитьПроверку(СтрокаПроверки, ПараметрыОтчета);
		Иначе
			СтрокаПроверки.ПроверкаВыполнена 	= Истина;
			СтрокаПроверки.ОбнаруженыОшибки 	= Истина;
			СтрокаПроверки.КомментарийРезультата 	= НСтр("ru='У пользователя недостаточно прав на исполнение операции над базой данных';uk='У користувача недостатньо прав на виконання операції над базою даних'");
			СтрокаПроверки.ПричиныОшибокРезультата 	= ТекстПричиныОшибокРезультата;
			СтрокаПроверки.РекомендацииРезультата 	= НСтр("ru='Обратитесь к администратору базы данных';uk='Зверніться до адміністратора бази даних'");
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// Заполняем признак выполненности и наличие ошибок по группам проверок
	// Группа считается выполненной, если в ней есть хотя бы одна выполненная проверка
	// Группа считается выполненной с ошибками, если в ней есть хотя бы одна выполненная проверка с ошибками
	ТаблицаПроверок.Колонки.Добавить("КолОшибок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6,0))); 
	СтрокиГрупп = ТаблицаПроверок.НайтиСтроки(Новый Структура("ЭтоГруппа", Истина));
	Для каждого СтрокаГруппы Из СтрокиГрупп Цикл
		ВыполненныеПроверки = ТаблицаПроверок.НайтиСтроки(
			Новый Структура("ИдентификаторРаздела,ПроверкаВыполнена", СтрокаГруппы.Идентификатор, Истина));
		СтрокаГруппы.ПроверкаВыполнена = ВыполненныеПроверки.Количество() > 0;
		ПроверкиСОшибками = ТаблицаПроверок.НайтиСтроки(
			Новый Структура("ИдентификаторРаздела,ОбнаруженыОшибки", СтрокаГруппы.Идентификатор, Истина));
		СтрокаГруппы.КолОшибок = ПроверкиСОшибками.Количество();
		СтрокаГруппы.ОбнаруженыОшибки = СтрокаГруппы.ПроверкаВыполнена И ПроверкиСОшибками.Количество() > 0;
	КонецЦикла;
		
КонецПроцедуры

Процедура ВыполнитьПроверку(СтрокаПроверки, ПараметрыОтчета)
	
	Если СтрокаПроверки.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Неопределено;
	
	// Раздел "Учетная политика"
	Если СтрокаПроверки.Идентификатор = "НаличиеУчП" Тогда
		Результат = ПроверитьНаличиеУчП(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НеизменностьУчП_БУ" Тогда
		Результат = ПроверитьНеизменностьУчП_БУ(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НеизменностьУчП_НУ" Тогда
		Результат = ПроверитьНеизменностьУчП_НУ(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ОценкаРозницы" Тогда
		Результат = ПроверитьОценкаРозницы(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НаличиеСведенийОбОтветственныхЛицах" Тогда
		Результат = ПроверитьНаличиеСведенийОбОтветственныхЛицах(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НаличиеКласса8" Тогда
		Результат = ПроверитьНаличиеКласса8(СтрокаПроверки, ПараметрыОтчета);
	КонецЕсли;
	
	// Раздел "Анализ состояния бухгалтерского учета"
	Если СтрокаПроверки.Идентификатор = "СоответствиеПланаСчетовТиповому" Тогда
		Результат = ПроверитьСоответствиеПланаСчетовТиповому(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НетОстатковПоСчету000" Тогда
		Результат = ПроверитьНетОстатковПоСчету000(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НетОстатковПоСчетамПодлежащимЗакрытиюТипа1" Тогда
		Результат = ПроверитьНетОстатковПоСчетамПодлежащимЗакрытиюПоТипуЗакрытия(СтрокаПроверки, ПараметрыОтчета, 1);
	ИначеЕсли СтрокаПроверки.Идентификатор = "СоответствиеОстатковИАктивностиСчетов" Тогда
		Результат = ПроверитьСоответствиеОстатковИАктивностиСчетов(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "КорректныеКорреспондецииСчетов" Тогда
		Результат = ПроверитьКорректныеКорреспондецииСчетов(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ОстаткиПоВалютам" Тогда
		Результат = ПроверитьОстаткиПоВалютам(СтрокаПроверки, ПараметрыОтчета);
	КонецЕсли;
	
	// Раздел "Кассовые операции
	Если СтрокаПроверки.Идентификатор = "НепроведенныеПКО_РКО" Тогда
		Результат = ПроверитьНепроведенныеПКО_РКО(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "МинусыПоКассе" Тогда
		Результат = ПроверитьМинусыПоКассе(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ЛимитКассы" Тогда
		Результат = ПроверитьЛимитКассы(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НумерацияПКО" Тогда
		Результат = ПроверитьНумерациюПКО(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "НумерацияРКО" Тогда
		Результат = ПроверитьНумерациюРКО(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ВыдачаПодотчетПослеОтчета" Тогда
		Результат = ПроверитьВыдачаПодотчетПослеОтчета(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ДвижениеВнутри372Счета" Тогда
		Результат = ПроверитьДвижениеВнутри372Счета(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ПодотчетТолькоРаботникам" Тогда
		Результат = ПроверитьПодотчетТолькоРаботникам(СтрокаПроверки, ПараметрыОтчета);
		
	КонецЕсли;
	
	// Раздел "НДС"
	Если СтрокаПроверки.Идентификатор = "НДСсАвансовВБУиНУ" Тогда
		Результат = ПроверитьНДСсАвансовВБУиНУ(СтрокаПроверки, ПараметрыОтчета);
	КонецЕсли;

	
	//Раздел Производство
	Если СтрокаПроверки.Идентификатор = "НаличиеПараметровЗакрытияСчетовПоПодразделениям" Тогда
		Результат = ПроверитьНаличиеПараметровЗакрытияСчетовПоПодразделениям(СтрокаПроверки, ПараметрыОтчета);
	КонецЕсли;
	
	
	//Раздел ОпределениеФинансовыхРезультатов
	Если СтрокаПроверки.Идентификатор = "РасчетПоНалогуНаПрибыль" Тогда
		Результат = ПроверитьРасчетПоНалогуНаПрибыль(СтрокаПроверки, ПараметрыОтчета);
	ИначеЕсли СтрокаПроверки.Идентификатор = "ОпределениеФинансовыхРезультатов" Тогда
		Результат = ПроверитьОпределениеФинансовыхРезультатов(СтрокаПроверки, ПараметрыОтчета);
	КонецЕсли;
	
	
	// Обработка результата
	
	Если ТипЗнч(Результат) = Тип("ТаблицаЗначений") Тогда
		СтрокаПроверки.ПроверкаВыполнена = Истина;
		СтрокаПроверки.ОбнаруженыОшибки  = Результат.Количество() > 0;
		СтрокаПроверки.ТаблицаОшибок     = Результат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Булево") Тогда
		СтрокаПроверки.ПроверкаВыполнена = Истина;
		СтрокаПроверки.ОбнаруженыОшибки  = Результат;
		СтрокаПроверки.ТаблицаОшибок     = Неопределено;
	Иначе // Неопределено
		СтрокаПроверки.ПроверкаВыполнена = Ложь;
		СтрокаПроверки.ОбнаруженыОшибки  = Ложь;
		СтрокаПроверки.ТаблицаОшибок     = Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПроверки.КомментарийРезультата) Тогда
		Если СтрокаПроверки.ПроверкаВыполнена Тогда
			Если СтрокаПроверки.ОбнаруженыОшибки Тогда
				СтрокаПроверки.КомментарийРезультата = СтрокаПроверки.КомментарийРезультатаОшибка;
			Иначе
				СтрокаПроверки.КомментарийРезультата = СтрокаПроверки.КомментарийРезультатаНетОшибок;
			КонецЕсли;
		Иначе
			СтрокаПроверки.КомментарийРезультата = СтрокаПроверки.КомментарийРезультатаНеВыполнена;
		КонецЕсли;
	КонецЕсли;
	Если СтрокаПроверки.ОбнаруженыОшибки 
		И НЕ ЗначениеЗаполнено(СтрокаПроверки.ПричиныОшибокРезультата) Тогда
		СтрокаПроверки.ПричиныОшибокРезультата = СтрокаПроверки.ПричиныОшибок;
	КонецЕсли;
	Если СтрокаПроверки.ОбнаруженыОшибки 
		И НЕ ЗначениеЗаполнено(СтрокаПроверки.РекомендацииРезультата) Тогда
		СтрокаПроверки.РекомендацииРезультата = СтрокаПроверки.Рекомендации;
	КонецЕсли;
	Если СтрокаПроверки.ОбнаруженыОшибки
		И НЕ ЗначениеЗаполнено(СтрокаПроверки.ГиперссылкаРезультата) Тогда
		СтрокаПроверки.ГиперссылкаРезультата = СтрокаПроверки.ГиперссылкаРекомендаций;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьОтчетОРезультатахПроверки(ТаблицаПроверок, ПараметрыОтчета)
	
	ВестиУчетПоПодразделениям = Ложь;
	
	ДокументРезультат     = Новый ТабличныйДокумент;
	МакетОтчета           = Отчеты.ЭкспрессПроверкаВеденияУчета.ПолучитьМакет("МакетОтчета");
	МакетОтчетовОбОшибках = Отчеты.ЭкспрессПроверкаВеденияУчета.ПолучитьМакет("ОтчетыОбОшибках");
	
	// Шапка
	ОбластьШапка = МакетОтчета.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Организация    = ПараметрыОтчета.Организация;
	ОбластьШапка.Параметры.ПериодПроверки = ПредставлениеПериода(
		ПараметрыОтчета.НачалоПериода, КонецДня(ПараметрыОтчета.КонецПериода), "ФП = Истина");
	ДокументРезультат.Вывести(ОбластьШапка);
	
	// Заголовок
	ВсегоОшибок = ТаблицаПроверок.Итог("КолОшибок");
	Если ВсегоОшибок > 0 Тогда
		ОбластьЗаголовок = МакетОтчета.ПолучитьОбласть("ЗаголовокЕстьОшибки");
		ОбластьЗаголовок.Параметры.ВсегоОшибок = ВсегоОшибок;
	Иначе
		ОбластьЗаголовок = МакетОтчета.ПолучитьОбласть("Заголовок");
	КонецЕсли;
	ВыполненныеПроверки = ТаблицаПроверок.НайтиСтроки(Новый Структура("ЭтоГруппа,ПроверкаВыполнена", Ложь, Истина));
	ОбластьЗаголовок.Параметры.ПроведеноПроверок = ВыполненныеПроверки.Количество();
	ВсегоПроверок = ТаблицаПроверок.НайтиСтроки(Новый Структура("ЭтоГруппа", Ложь));
	ОбластьЗаголовок.Параметры.ВсегоПроверок = ВсегоПроверок.Количество();
	ДокументРезультат.Вывести(ОбластьЗаголовок);
	
	// Получаем все области макета основного отчета
	ОбластьРазделУчетаНетОшибок  = МакетОтчета.ПолучитьОбласть("РазделУчета");
	ОбластьРазделУчетаЕстьОшибки = МакетОтчета.ПолучитьОбласть("РазделУчетаЕстьОшибки");
	ОбластьРазделУчетаНеВыполнен = МакетОтчета.ПолучитьОбласть("РазделУчетаНеВыполнен");
	ОбластьПроверкаНетОшибок   = МакетОтчета.ПолучитьОбласть("Проверка");
	ОбластьПроверкаЕстьОшибки  = МакетОтчета.ПолучитьОбласть("ПроверкаЕстьОшибки");
	ОбластьПроверкаНеВыполнена = МакетОтчета.ПолучитьОбласть("ПроверкаНеВыполнена");
	ОбластьПредметКонтроля = МакетОтчета.ПолучитьОбласть("ПредметКонтроля");
	ОбластьКомментарийРезультатаНетОшибок  = МакетОтчета.ПолучитьОбласть("КомментарийРезультата");
	ОбластьКомментарийРезультатаЕстьОшибки = МакетОтчета.ПолучитьОбласть("КомментарийРезультатаЕстьОшибки");
	ОбластьПричиныОшибок = МакетОтчета.ПолучитьОбласть("ПричиныОшибок");
	ОбластьРекомендации = МакетОтчета.ПолучитьОбласть("Рекомендации");
	ОбластьРазделительРазделаУчета = МакетОтчета.ПолучитьОбласть("РазделительРазделаУчета");
	ОбластьРекомендацииСГиперссылкой = МакетОтчета.ПолучитьОбласть("РекомендацииСГиперссылкой");
	
	// Получаем области макета детальных отчетов об ошибках
	ОбластьШапкаОшибок  = МакетОтчетовОбОшибках.ПолучитьОбласть("Шапка");
	ОбластьПодвалОшибок = МакетОтчетовОбОшибках.ПолучитьОбласть("Подвал");
	
	// Выводим строки отчета
	ПервыйРаздел          = Истина;
	ПерваяПроверкаРаздела = Истина;
	
	Для каждого СтрокаПроверки Из ТаблицаПроверок Цикл
	
		Если СтрокаПроверки.ЭтоГруппа Тогда
			
			// Пустая строка до раздела
			Если НЕ ПервыйРаздел Тогда
				ДокументРезультат.ЗакончитьГруппуСтрок(); // Закончить уровень 2 предыдущего раздела
			КонецЕсли;
			ДокументРезультат.Вывести(ОбластьРазделительРазделаУчета, 1);
			// Раздел
			Если НЕ СтрокаПроверки.ПроверкаВыполнена Тогда
				ОбластьРазделУчета = ОбластьРазделУчетаНеВыполнен;
			ИначеЕсли СтрокаПроверки.ОбнаруженыОшибки Тогда
				ОбластьРазделУчета = ОбластьРазделУчетаЕстьОшибки;
			Иначе
				ОбластьРазделУчета = ОбластьРазделУчетаНетОшибок;
			КонецЕсли;
			ОбластьРазделУчета.Параметры.Заполнить(СтрокаПроверки);
			ДокументРезультат.Вывести(ОбластьРазделУчета, 1);
			ПервыйРаздел          = Ложь;
			ПерваяПроверкаРаздела = Истина;
			
		Иначе
			
			// Пустая строка после раздела
			Если ПерваяПроверкаРаздела Тогда
				ДокументРезультат.НачатьГруппуСтрок(, Ложь); // Начать уровень 2
				ДокументРезультат.Вывести(ОбластьРазделительРазделаУчета, 2);
			КонецЕсли;
			// Проверка
			Если НЕ СтрокаПроверки.ПроверкаВыполнена Тогда
				ОбластьПроверка = ОбластьПроверкаНеВыполнена;
			ИначеЕсли СтрокаПроверки.ОбнаруженыОшибки Тогда
				ОбластьПроверка = ОбластьПроверкаЕстьОшибки;
			Иначе
				ОбластьПроверка = ОбластьПроверкаНетОшибок;
			КонецЕсли;
			ОбластьПроверка.Параметры.Заполнить(СтрокаПроверки);
			ДокументРезультат.Вывести(ОбластьПроверка, 2);
			ПерваяПроверкаРаздела = Ложь;
			ДокументРезультат.НачатьГруппуСтрок(, Ложь); // Начать уровень 3
			// Предмет контроля
			ОбластьПредметКонтроля.Параметры.Заполнить(СтрокаПроверки);
			ДокументРезультат.Вывести(ОбластьПредметКонтроля, 3);
			// Комментарий результата
			Если СтрокаПроверки.ОбнаруженыОшибки Тогда
				ОбластьКомментарийРезультата = ОбластьКомментарийРезультатаЕстьОшибки;
			Иначе
				ОбластьКомментарийРезультата = ОбластьКомментарийРезультатаНетОшибок;
			КонецЕсли;
			ОбластьКомментарийРезультата.Параметры.Заполнить(СтрокаПроверки);
			ДокументРезультат.Вывести(ОбластьКомментарийРезультата, 3);
			
			Если СтрокаПроверки.ОбнаруженыОшибки Тогда
				// Причины ошибок
				ОбластьПричиныОшибок.Параметры.Заполнить(СтрокаПроверки);
				ДокументРезультат.Вывести(ОбластьПричиныОшибок, 3);
				// Рекомендации
				
				Если ЗначениеЗаполнено(СтрокаПроверки.ГиперссылкаРезультата) Тогда
					Область = ОбластьРекомендацииСГиперссылкой;
				Иначе
					Область = ОбластьРекомендации;
				КонецЕсли;
				Область.Параметры.Заполнить(СтрокаПроверки);
				ДокументРезультат.Вывести(Область, 3);
				
				// Детальный отчет об ошибках
				Если ТипЗнч(СтрокаПроверки.ТаблицаОшибок) = Тип("ТаблицаЗначений")
					И СтрокаПроверки.ТаблицаОшибок.Количество() > 0 Тогда
					Если СтрокаПроверки.Идентификатор = "ЛимитКассы" и ВестиУчетПоПодразделениям Тогда
						ИмяОбластиЗалоговокОшибок = СтрокаПроверки.Идентификатор + "ЗаголовокПоОбособленнымПодразделениям";
						ИмяОбластиСтрокаОшибок    = СтрокаПроверки.Идентификатор + "СтрокаПоОбособленнымПодразделениям";
					Иначе
						ИмяОбластиЗалоговокОшибок = СтрокаПроверки.Идентификатор + "Заголовок";
						ИмяОбластиСтрокаОшибок    = СтрокаПроверки.Идентификатор + "Строка";
					КонецЕсли;
					Если МакетОтчетовОбОшибках.Области.Найти(ИмяОбластиЗалоговокОшибок) = Неопределено
						ИЛИ МакетОтчетовОбОшибках.Области.Найти(ИмяОбластиСтрокаОшибок) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ОбластьЗаголовокОшибок = МакетОтчетовОбОшибках.ПолучитьОбласть(ИмяОбластиЗалоговокОшибок);
					ОбластьСтрокаОшибок    = МакетОтчетовОбОшибках.ПолучитьОбласть(ИмяОбластиСтрокаОшибок);
					ДокументРезультат.НачатьГруппуСтрок(, Ложь); // Начать уровень 4
					ДокументРезультат.Вывести(ОбластьШапкаОшибок, 4);
					ДокументРезультат.Вывести(ОбластьЗаголовокОшибок, 4);
					Для каждого СтрокаОшибки Из СтрокаПроверки.ТаблицаОшибок Цикл
						ОбластьСтрокаОшибок.Параметры.Заполнить(СтрокаОшибки);
						ДокументРезультат.Вывести(ОбластьСтрокаОшибок, 4);
					КонецЦикла;
					ДокументРезультат.Вывести(ОбластьПодвалОшибок, 4);
					ДокументРезультат.ЗакончитьГруппуСтрок(); // Закончить уровень 4
				КонецЕсли;
				
			КонецЕсли;
			
			ДокументРезультат.ЗакончитьГруппуСтрок(); // Закончить уровень 3
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПерваяПроверкаРаздела Тогда
		ДокументРезультат.ЗакончитьГруппуСтрок(); // Закончить уровень 2 последнего раздела
	КонецЕсли;
	
	Возврат ДокументРезультат;

КонецФункции

#КонецОбласти	//ПроцедурыФункцииФормированияОтчета 	

#Область ПроверкиПоРазделам

#Область ПроверкиРазделаУчетнаяПолитика

///////////////////////////////////////////////////////////////////////////////////////
// Проверки раздела "Учетная политика"

Функция ПроверитьНаличиеУчП(СтрокаПроверки, ПараметрыОтчета)
	
	Результат = НЕ УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода);
	Возврат Результат;
	
КонецФункции

Функция ПроверитьНаличиеКласса8(СтрокаПроверки, ПараметрыОтчета)
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Организация");
	ТаблицаОшибок.Колонки.Добавить("Дата", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаОшибок.Колонки.Добавить("ИспользуемыеКлассыСчетовРасходов");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", 	ПараметрыОтчета.Организация); // у нас все по самой организации
	Запрос.УстановитьПараметр("НачалоПериода", 	ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(ПараметрыОтчета.КонецПериода));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период,
	|   УчетнаяПолитикаОрганизаций.ИспользуемыеКлассыСчетовРасходов,
	|	УчетнаяПолитикаОрганизаций.Организация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&НачалоПериода, Организация = &ГоловнаяОрганизация) КАК УчетнаяПолитикаОрганизаций
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|";

		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Период >= Дата("20200101") И (Выборка.ИспользуемыеКлассыСчетовРасходов = Перечисления.КлассыСчетовРасходов.Класс8) Тогда
			НоваяСтрока = ТаблицаОшибок.Добавить();
			НоваяСтрока.Дата 								= Выборка.Период;
			НоваяСтрока.Организация 						= Выборка.Организация;
			НоваяСтрока.ИспользуемыеКлассыСчетовРасходов 	= Выборка.ИспользуемыеКлассыСчетовРасходов;
		КонецЕсли;
	КонецЦикла;
	
	
	Возврат ТаблицаОшибок;
		
КонецФункции	


Функция ПроверитьНеизменностьУчетнойПолитики(СтрокаПроверки, ПараметрыОтчета, ИменаРесурсовУчетнойПолитики)

	ОписаниеТиповСтрока = ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(0);

   	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаОшибок.Колонки.Добавить("ЭлементУчетнойПолитики", ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("НовоеЗначение", ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("СтароеЗначение", ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("Расшифровка");

	СинонимыРесурсов = Новый Структура;
	ПредыдущаяУчетнаяПолитика = Новый Структура("Дата");
	ТекстРесурсы = "";
	Для каждого ИмяРесурса Из ИменаРесурсовУчетнойПолитики Цикл
		
		Ресурс = Метаданные.РегистрыСведений.УчетнаяПолитикаОрганизаций.Ресурсы.Найти(ИмяРесурса.Ключ);
		Если НЕ Ресурс = Неопределено Тогда
			СинонимыРесурсов.Вставить(Ресурс.Имя, Ресурс.Синоним);
			ПредыдущаяУчетнаяПолитика.Вставить(Ресурс.Имя, Неопределено);
			ТекстРесурсы = ТекстРесурсы + ", " + Ресурс.Имя;
		КонецЕсли; 
		
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", 	ПараметрыОтчета.Организация); // у нас все по самой организации
	Запрос.УстановитьПараметр("НачалоПериода", 	ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(ПараметрыОтчета.КонецПериода));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период,
	|	УчетнаяПолитикаОрганизаций.Организация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&НачалоПериода, Организация = &ГоловнаяОрганизация) КАК УчетнаяПолитикаОрганизаций
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период,
	|	УчетнаяПолитикаОрганизаций.Организация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.Организация = &ГоловнаяОрганизация
	|	И УчетнаяПолитикаОрганизаций.Период > &НачалоПериода
	|	И УчетнаяПолитикаОрганизаций.Период <= &КонецПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "УчетнаяПолитикаОрганизаций.Период,", "УчетнаяПолитикаОрганизаций.Период" + ТекстРесурсы + ",");
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПерваяЗапись = Истина;
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ПерваяЗапись И Выборка.Период <> НачалоГода(Выборка.Период) Тогда
		
			Для Каждого ЭлементУчетнойПолитики Из СинонимыРесурсов Цикл
			
				СтароеЗначение 	= ПредыдущаяУчетнаяПолитика[ЭлементУчетнойПолитики.Ключ];
				НовоеЗначение 	= Выборка[ЭлементУчетнойПолитики.Ключ];
				
				ИзменилсяЭлементУчетнойПолитики = СтароеЗначение <> НовоеЗначение;
				Если ИменаРесурсовУчетнойПолитики[ЭлементУчетнойПолитики.Ключ] = "Квартал" Тогда
					ИзменилсяЭлементУчетнойПолитики = ИзменилсяЭлементУчетнойПолитики И Выборка.Период <> НачалоКвартала(Выборка.Период);
				КонецЕсли;
				
				Если ИзменилсяЭлементУчетнойПолитики Тогда
					НоваяСтрока 		= ТаблицаОшибок.Добавить();
					НоваяСтрока.Дата 	= Выборка.Период;
					НоваяСтрока.ЭлементУчетнойПолитики = СинонимыРесурсов[ЭлементУчетнойПолитики.Ключ];
					НоваяСтрока.СтароеЗначение 	= СтароеЗначение;
					НоваяСтрока.НовоеЗначение 	= НовоеЗначение;
					НоваяСтрока.Расшифровка 	= Новый Структура();
					НоваяСтрока.Расшифровка.Вставить("Идентификатор", СтрокаПроверки.Идентификатор);
					НоваяСтрока.Расшифровка.Вставить("Период", 		Выборка.Период);
					НоваяСтрока.Расшифровка.Вставить("Организация", Выборка.Организация);
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПредыдущаяУчетнаяПолитика, Выборка);
		ПерваяЗапись = Ложь;
	
	КонецЦикла;

	Возврат ТаблицаОшибок;

КонецФункции

Функция ПроверитьНеизменностьУчП_БУ(СтрокаПроверки, ПараметрыОтчета)

	ИменаРесурсовБУ = Новый Структура;
	ИменаРесурсовБУ.Вставить("СпособОценкиМПЗ", "Год");
	ИменаРесурсовБУ.Вставить("СпособОценкиТоваровВРознице", "Год");
	ИменаРесурсовБУ.Вставить("СпособРасчетаСебестоимостиПроизводства", "Год");
	ИменаРесурсовБУ.Вставить("ИспользуемыеКлассыСчетовРасходов", "Год");
	ИменаРесурсовБУ.Вставить("ВестиУчетДенежныхСредствПоОбособленнымПодразделениям", "Год");
	ИменаРесурсовБУ.Вставить("ПорядокРаспределенияРасходовНаОказаниеУслуг", "Год");

	Возврат ПроверитьНеизменностьУчетнойПолитики(СтрокаПроверки, ПараметрыОтчета, ИменаРесурсовБУ);
	
КонецФункции

Функция ПроверитьНеизменностьУчП_НУ(СтрокаПроверки, ПараметрыОтчета)

	ИменаРесурсов = Новый Структура;
	ИменаРесурсов.Вставить("СпособОценкиМПЗНУ", "Квартал");
	ИменаРесурсов.Вставить("СхемаНалогообложения", "Квартал");
	ИменаРесурсов.Вставить("НалогНаПрибыльКонсолидированно", "Квартал");
	
	Возврат ПроверитьНеизменностьУчетнойПолитики(СтрокаПроверки, ПараметрыОтчета, ИменаРесурсов);
	
КонецФункции

Функция ПроверитьОтсутствиеОстатковИОборотов(СтрокаПроверки, ПараметрыОтчета, МассивСчета)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Счет,
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Счет) КАК СчетПредставление,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , , Счет В (&Счета), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстаткиИОбороты.Счет.Порядок";
	
	Запрос.УстановитьПараметр("НачалоПериода", 	ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация", 	ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("Счета", 			БухгалтерскийУчет.ПолучитьМассивСчетовССубсчетами(МассивСчета));
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	
	// Добавим поле для расшифровки
	Если ТаблицаРезультата.Количество() > 0 Тогда
		
		ТаблицаРезультата.Колонки.Добавить("Расшифровка");
		Для Каждого СтрокаТабРезультата Из ТаблицаРезультата Цикл
			СтрокаТабРезультата.Расшифровка = Новый Структура();
			СтрокаТабРезультата.Расшифровка.Вставить("Идентификатор", СтрокаПроверки.Идентификатор);
			СтрокаТабРезультата.Расшифровка.Вставить("Счет", СтрокаТабРезультата.Счет);
		КонецЦикла;
	
	КонецЕсли;

	Возврат ТаблицаРезультата;	

КонецФункции

Функция ПроверитьОценкаРозницы(СтрокаПроверки, ПараметрыОтчета)

	Если НЕ УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода) Тогда
		СтрокаПроверки.КомментарийРезультата = НСтр("ru='Проверка не может быть проведена, так как неопределена учетная политика организации';uk='Перевірка не може бути проведена, тому що невизначено облікову політику організації'");
		Возврат Истина;
	КонецЕсли;
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода);
	Если СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
		СтрокаПроверки.КомментарийРезультата = НСтр("ru='В учетной политике организации установлен способ оценки стоимости товаров ""По продажной стоимости""';uk='В обліковій політиці організації встановлений спосіб оцінки вартості товарів ""За продажною вартістю""'");
		Возврат Ложь;
	КонецЕсли;

	СчетаУчетаТоваровВРознице = Новый Массив;
	Если СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
		СчетаУчетаТоваровВРознице.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
		СчетаУчетаТоваровВРознице.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
		СчетаУчетаТоваровВРознице.Добавить(ПланыСчетов.Хозрасчетный.ТорговаяНаценка);
		СтрокаПроверки.КомментарийРезультатаОшибка = НСтр("ru='Обнаружены остатки или обороты по счетам, которые должны использоваться только при условии учета товаров по стоимости приобретения.';uk='Виявлено залишки або обороти по рахунках, які повинні використовуватися тільки за умови обліку товарів за вартістю придбання.'");
	ИначеЕсли СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоСтоимостиПриобретения Тогда 
		СчетаУчетаТоваровВРознице.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВТорговлеПоПокупнойСтоимости);
		СтрокаПроверки.КомментарийРезультатаОшибка = НСтр("ru='Обнаружены остатки или обороты по счетам, которые должны использоваться только при условии учета товаров по продажной стоимости.';uk='Виявлено залишки або обороти по рахунках, які повинні використовуватися тільки за умови обліку товарів за продажною вартістюі.'");
	КонецЕсли;	
	
	Возврат ПроверитьОтсутствиеОстатковИОборотов(СтрокаПроверки, ПараметрыОтчета, СчетаУчетаТоваровВРознице);

КонецФункции

Функция ПроверитьНаличиеСведенийОбОтветственныхЛицах(СтрокаПроверки, ПараметрыОтчета)

	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Организация");
	ТаблицаОшибок.Колонки.Добавить("Дата", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаОшибок.Колонки.Добавить("ОтветственноеЛицо");
	
	ПроверяемыеОтветственныеЛица = Новый Массив;
	ПроверяемыеОтветственныеЛица.Добавить("Руководитель");
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ПараметрыОтчета.Организация) Тогда
		ПроверяемыеОтветственныеЛица.Добавить("ГлавныйБухгалтер");
		ПроверяемыеОтветственныеЛица.Добавить("Кассир");
		ПроверяемыеОтветственныеЛица.Добавить("ОтветственныйЗаБухгалтерскиеРегистры");
	КонецЕсли;
	
	Структура = ОтветственныеЛицаБППереопределяемый.ОтветственныеЛица(ПараметрыОтчета.Организация, КонецДня(ПараметрыОтчета.КонецПериода));
	ОтветственноеЛицо = Неопределено;
	
	Для каждого ПроверяемоеОтветственноеЛицо Из ПроверяемыеОтветственныеЛица Цикл
		Если Структура.Свойство(ПроверяемоеОтветственноеЛицо, ОтветственноеЛицо) Тогда
			Если Не ЗначениеЗаполнено(ОтветственноеЛицо) Тогда
				НоваяСтрока = ТаблицаОшибок.Добавить();
				НоваяСтрока.Дата 				= ПараметрыОтчета.КонецПериода;
				НоваяСтрока.Организация 		= ПараметрыОтчета.Организация;
				НоваяСтрока.ОтветственноеЛицо 	= Перечисления.ОтветственныеЛицаОрганизаций[ПроверяемоеОтветственноеЛицо];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат ТаблицаОшибок;
	
КонецФункции

#КонецОбласти	//ПроверкиРазделаУчетнаяПолитика

#Область ПроверкиРазделаАнализСостоянияБухгалтерскогоУчета

///////////////////////////////////////////////////////////////////////////////////////
// Проверки раздела "Анализ состояния бухгалтерского учета"

Функция ПроверитьСоответствиеПланаСчетовТиповому(СтрокаПроверки, ПараметрыОтчета)
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Счет", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОшибок.Колонки.Добавить("СчетКод", Новый ОписаниеТипов("Строка"));
	ТаблицаОшибок.Колонки.Добавить("СчетНаименование", Новый ОписаниеТипов("Строка"));
	ТаблицаОшибок.Колонки.Добавить("Ошибка", Новый ОписаниеТипов("Строка"));
	
	ТаблицаДанныхПоЭталонномуПлануСчетов = ПодготовитьДанныеПоЭталонномуПлануСчетовДляАнализа(ПараметрыОтчета);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭталонныйПланСчетов", ТаблицаДанныхПоЭталонномуПлануСчетов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭталонныйПланСчетов.Код,
	|	ЭталонныйПланСчетов.Порядок,
	|	ЭталонныйПланСчетов.Наименование,
	|	ЭталонныйПланСчетов.Вид,
	|	ЭталонныйПланСчетов.ВидСубконто1,
	|	ЭталонныйПланСчетов.ВидСубконто2,
	|	ЭталонныйПланСчетов.ВидСубконто3,
	|	ЭталонныйПланСчетов.ИмяВидаСубконто1,
	|	ЭталонныйПланСчетов.ИмяВидаСубконто2,
	|	ЭталонныйПланСчетов.ИмяВидаСубконто3,
	|	ЭталонныйПланСчетов.ПроверятьАналитикуСчета,
	|	ЭталонныйПланСчетов.СчетСсылка
	|ПОМЕСТИТЬ ВТ_ЭталонныйПланСчетов
	|ИЗ
	|	&ЭталонныйПланСчетов КАК ЭталонныйПланСчетов
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭталонныйПланСчетов.СчетСсылка
	|;
	|
	|ВЫБРАТЬ
	|	ВТ_ЭталонныйПланСчетов.Код,
	|	ВТ_ЭталонныйПланСчетов.Наименование,
	|	ВТ_ЭталонныйПланСчетов.Вид,
	|	ВТ_ЭталонныйПланСчетов.ВидСубконто1,
	|	ВТ_ЭталонныйПланСчетов.ВидСубконто2,
	|	ВТ_ЭталонныйПланСчетов.ВидСубконто3,
	|	ВТ_ЭталонныйПланСчетов.ИмяВидаСубконто1,
	|	ВТ_ЭталонныйПланСчетов.ИмяВидаСубконто2,
	|	ВТ_ЭталонныйПланСчетов.ИмяВидаСубконто3,
	|	ВТ_ЭталонныйПланСчетов.ПроверятьАналитикуСчета,
	|	ВТ_ЭталонныйПланСчетов.СчетСсылка,
	|	ЕСТЬNULL(Хозрасчетный.Вид, НЕОПРЕДЕЛЕНО) КАК ВидСсылка,
	|	ЕСТЬNULL(ВидыСубконто1.ВидСубконто, НЕОПРЕДЕЛЕНО) КАК ВидСубконто1Ссылка,
	|	ЕСТЬNULL(ВидыСубконто2.ВидСубконто, НЕОПРЕДЕЛЕНО) КАК ВидСубконто2Ссылка,
	|	ЕСТЬNULL(ВидыСубконто3.ВидСубконто, НЕОПРЕДЕЛЕНО) КАК ВидСубконто3Ссылка
	|
	|ИЗ
	|	ВТ_ЭталонныйПланСчетов КАК ВТ_ЭталонныйПланСчетов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО ВТ_ЭталонныйПланСчетов.СчетСсылка = Хозрасчетный.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто1
	|		ПО ВТ_ЭталонныйПланСчетов.СчетСсылка = ВидыСубконто1.Ссылка
	|			И ВидыСубконто1.НомерСтроки = 1
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто2
	|		ПО ВТ_ЭталонныйПланСчетов.СчетСсылка = ВидыСубконто2.Ссылка
	|			И ВидыСубконто2.НомерСтроки = 2
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто3
	|		ПО ВТ_ЭталонныйПланСчетов.СчетСсылка = ВидыСубконто3.Ссылка
	|			И ВидыСубконто3.НомерСтроки = 3
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ЭталонныйПланСчетов.Порядок
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	СоответствиеЭталонныеВидыСубконто = Новый Соответствие();
	
	Для Каждого СтрокаТабРезультата Из ТаблицаРезультата Цикл
		
		ТекстОшибки = "";
		Если НЕ ЗначениеЗаполнено(СтрокаТабРезультата.СчетСсылка) Тогда
			// Не нашли эталонный счет в базе
			ТекстОшибки = НСтр("ru='Счет не найден в рабочем плане счетов бухгалтерского учета.';uk='Рахунок не знайдений в робочому плані рахунків бухгалтерського обліку.'");
		Иначе
			// Проверяем настройки активности/пассивности счета.
			Если СтрокаТабРезультата.Вид <> СтрокаТабРезультата.ВидСсылка Тогда
				ТекстСтрока = "";
				Если СтрокаТабРезультата.Вид = ВидСчета.Активный Тогда	
					ТекстСтрока = НСтр("ru='Счет должен быть активным.';uk='Рахунок повинен бути активним.'");
				ИначеЕсли СтрокаТабРезультата.Вид = ВидСчета.Пассивный Тогда
					ТекстСтрока = НСтр("ru='Счет должен быть пассивным.';uk='Рахунок повинен бути пасивним.'");
				Иначе
					ТекстСтрока = НСтр("ru='Счет должен быть активно-пассивным.';uk='Рахунок повинен бути активно-пасивним.'");
				КонецЕсли;
				ТекстОшибки = ТекстСтрока;
			КонецЕсли;
			
			// Проверим виды субконто.
			Если СтрокаТабРезультата.ПроверятьАналитикуСчета Тогда
				
				СоответствиеЭталонныеВидыСубконто.Очистить();
				Для Н = 1 По 3 Цикл
					ВидСубконто 	= СтрокаТабРезультата["ВидСубконто" + Н];
					ИмяВидаСубконто = СтрокаТабРезультата["ИмяВидаСубконто" + Н];
					Если ЗначениеЗаполнено(ВидСубконто) Тогда
						СоответствиеЭталонныеВидыСубконто.Вставить(ВидСубконто, Ложь);
					ИначеЕсли ЗначениеЗаполнено(ИмяВидаСубконто) Тогда
						// Возможно, что в базе не найден даже вид субконто в плане видов характеристик.
						СоответствиеЭталонныеВидыСубконто.Вставить(ИмяВидаСубконто, Ложь);
					КонецЕсли;
				КонецЦикла;
				
				Для Н = 1 По 3 Цикл
					ВидСубконто = СтрокаТабРезультата["ВидСубконто" + Н + "Ссылка"];
					Если ЗначениеЗаполнено(ВидСубконто) Тогда
						СоответствиеЭталонныеВидыСубконто.Вставить(ВидСубконто, Истина);
					КонецЕсли;
				КонецЦикла;
				
				// Проверим отсутствующие виды субконто.
				ТекстСтрока = "";
				Для Каждого КлючЗначение Из СоответствиеЭталонныеВидыСубконто Цикл
					Если КлючЗначение.Значение = ЛОЖЬ Тогда
						Если ЗначениеЗаполнено(ТекстСтрока) Тогда
							ТекстСтрока = ТекстСтрока + ", ";
						КонецЕсли;
						ТекстСтрока = ТекстСтрока + Строка(КлючЗначение.Ключ);
					КонецЕсли;
				КонецЦикла;
				
				Если ЗначениеЗаполнено(ТекстСтрока) Тогда
					Если ЗначениеЗаполнено(ТекстОшибки) Тогда
						ТекстОшибки = ТекстОшибки + Символы.ПС;
					КонецЕсли;
					ТекстОшибки = ТекстОшибки + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='На счете отсутствуют следующие виды субконто: %1';uk='На рахунку відсутні наступні види субконто: %1'"), ТекстСтрока)
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			НоваяСтрока 					= ТаблицаОшибок.Добавить();
			НоваяСтрока.Счет 				= СтрокаТабРезультата.СчетСсылка;
			НоваяСтрока.СчетКод				= СтрокаТабРезультата.Код;
			НоваяСтрока.СчетНаименование	= СтрокаТабРезультата.Наименование;
			НоваяСтрока.Ошибка				= ТекстОшибки;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТаблицаОшибок;
	
КонецФункции

Функция ПроверитьНетОстатковПоСчету000(СтрокаПроверки, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", 	ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("Организация", 	ПараметрыОтчета.Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&НачалоПериода КАК Дата,
	|	ХозрасчетныйОстатки.СуммаОстатокДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	(ХозрасчетныйОстатки.СуммаОстатокДт <> 0
	|			ИЛИ ХозрасчетныйОстатки.СуммаОстатокКт <> 0)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	Если ТаблицаРезультата.Количество() > 0 Тогда
		ТаблицаРезультата.Колонки.Добавить("Расшифровка");
		
		Расшифровка = Новый Структура();
		Расшифровка.Вставить("Идентификатор", 	СтрокаПроверки.Идентификатор);
		Расшифровка.Вставить("НачалоПериода", 	'00010101');
		Расшифровка.Вставить("КонецПериода", 	ПараметрыОтчета.НачалоПериода - 1);
		Расшифровка.Вставить("Счет", 			ПланыСчетов.Хозрасчетный.Вспомогательный);
		
		ТаблицаРезультата[0].Расшифровка = Расшифровка;
		
	КонецЕсли;
	
	Возврат ТаблицаРезультата;
	
КонецФункции

// Функция выполняет проверку закрытия счетов в соответствии с параметром типом закрытия.
//
// Параметры:
//	ТипЗакрытия - Число, одно из значений:
//		1 - Закрыты сами счет.
//		2 - Равенство остаток по Дт и Кт по всем подчиненным счетам.
//
Функция ПроверитьНетОстатковПоСчетамПодлежащимЗакрытиюПоТипуЗакрытия(СтрокаПроверки, ПараметрыОтчета, ТипЗакрытия)
	
	ТаблицаДанныхПоЭталонномуПлануСчетов = ПодготовитьДанныеПоЭталонномуПлануСчетовДляАнализа(ПараметрыОтчета);
	// Отберем только счета, подлежащие закрытию
	МассивСчетаДляПроверки = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаДанныхПоЭталонномуПлануСчетов Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.СчетСсылка)
			И СтрокаТаблицы.ПодлежитЗакрытию = ТипЗакрытия Тогда
			МассивСчетаДляПроверки.Добавить(СтрокаТаблицы.СчетСсылка);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаМесяцев = ПолучитьДанныеТаблицаМесяцев(ПараметрыОтчета);
	
	ОписаниеТиповСтрока = ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(0);
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ПериодМесяц", 		ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаОшибок.Колонки.Добавить("Счет", 				Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОшибок.Колонки.Добавить("СчетПредставление", ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("СуммаОстаток", 		ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаОшибок.Колонки.Добавить("Ошибка", 			ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("Расшифровка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", 	ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ТипЗакрытия", 	ТипЗакрытия);
	Запрос.УстановитьПараметр("МассивСчетаДляПроверки", БухгалтерскийУчет.ПолучитьМассивСчетовССубсчетами(МассивСчетаДляПроверки));

	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.СуммаОстаток
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, Счет В (&МассивСчетаДляПроверки), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|";
	
	
	ТекстЗапроса = ТекстЗапроса + 
	";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Остатки.Счет КАК Счет,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_Остатки.Счет) КАК СчетПредставление,
	|	СУММА(ВТ_Остатки.СуммаОстаток) КАК СуммаОстаток
	|ИЗ
	|	ВТ_Остатки КАК ВТ_Остатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Остатки.Счет
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВТ_Остатки.СуммаОстаток) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_Остатки.Счет";
	
	Если ТипЗакрытия = 1 Тогда
		// Необходимо анализировать счет в целом, а не отдельные субсчета.
		ТекстЗапроса = ТекстЗапроса + "
		|ИТОГИ
		|	СУММА(СуммаОстаток)
		|ПО
		|	Счет ИЕРАРХИЯ";
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	Для Каждого СтрокаПериода Из ТаблицаМесяцев Цикл
	
		Запрос.УстановитьПараметр("НачалоПериода", СтрокаПериода.НачПериода);
		Запрос.УстановитьПараметр("КонГраница", Новый Граница(КонецДня(СтрокаПериода.КонПериода), ВидГраницы.Включая));
	
		РезультатЗапроса = Запрос.Выполнить();
			ВыборкаПоСчетам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоСчетам.Следующий() Цикл
				Если МассивСчетаДляПроверки.Найти(ВыборкаПоСчетам.Счет) <> Неопределено
					И ВыборкаПоСчетам.СуммаОстаток <> 0 Тогда
					НоваяСтрока = ТаблицаОшибок.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоСчетам);
					НоваяСтрока.ПериодМесяц = СтрокаПериода.НачПериода;
				КонецЕсли;
			КонецЦикла;
		
	КонецЦикла;
	
	// Заполним тексты описания ошибок
	Для Каждого СтрокаОшибки Из ТаблицаОшибок Цикл
		СтрокаЭталонногоПланаСчетов = ТаблицаДанныхПоЭталонномуПлануСчетов.Найти(СтрокаОшибки.Счет);
		Если СтрокаЭталонногоПланаСчетов <> Неопределено Тогда
			СтрокаОшибки.Ошибка = СтрокаЭталонногоПланаСчетов.ТекстОшибкиСчетНеЗакрыт;
		Иначе
			СтрокаОшибки.Ошибка = НСтр("ru='Счет закрывается ежемесячно и сальдо на отчетную дату не имеет.';uk='Рахунок закривається щомісяця і сальдо на звітну дату не має.'");
		КонецЕсли;
		
		// Расшифровка с помощью карточки счета.
		СтрокаОшибки.Расшифровка = Новый Структура();
		СтрокаОшибки.Расшифровка.Вставить("Идентификатор", 	СтрокаПроверки.Идентификатор);
		СтрокаОшибки.Расшифровка.Вставить("НачалоПериода", 	Макс(СтрокаОшибки.ПериодМесяц, ПараметрыОтчета.НачалоПериода));
		СтрокаОшибки.Расшифровка.Вставить("КонецПериода", 	Мин(КонецМесяца(СтрокаОшибки.ПериодМесяц), КонецДня(ПараметрыОтчета.КонецПериода)));
		СтрокаОшибки.Расшифровка.Вставить("Счет", 			СтрокаОшибки.Счет);
		
	КонецЦикла;
	
	Возврат ТаблицаОшибок;
	
КонецФункции

Функция ПроверитьСоответствиеОстатковИАктивностиСчетов(СтрокаПроверки, ПараметрыОтчета)

	ОписаниеТиповСтрока = ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(0);

	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ПериодМесяц", 		ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблицаОшибок.Колонки.Добавить("Счет", 				Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаОшибок.Колонки.Добавить("СчетПредставление", ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("СуммаОстаток", 		ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаОшибок.Колонки.Добавить("Ошибка", 			ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("Расшифровка");

	ТаблицаМесяцев = ПолучитьДанныеТаблицаМесяцев(ПараметрыОтчета);

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", 	ПараметрыОтчета.Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыСубконто.Ссылка КАК Счет,
	|	СУММА(ВЫБОР
	|			КОГДА ВидыСубконто.Суммовой
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЕстьСуммовойУчет,
	|	СУММА(ВЫБОР
	|			КОГДА ВидыСубконто.Количественный И ВидыСубконто.ТолькоОбороты
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ТолькоОборотыПоКоличеству,
	|	КОЛИЧЕСТВО(*) КАК КоличествоСубконто
	|ПОМЕСТИТЬ ВТ_НастройкиСчетов
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконто
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыСубконто.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|";
	
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстатки.Счет) КАК СчетПредставление,
	|	ХозрасчетныйОстатки.СуммаОстаток,
	|	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток,
	|	ХозрасчетныйОстатки.КоличествоОстаток,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Счет.Валютный, ЛОЖЬ) КАК Валютный,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Счет.Количественный, ЛОЖЬ) КАК Количественный,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Счет.Забалансовый, ЛОЖЬ) КАК Забалансовый,
	|	ХозрасчетныйОстатки.Счет.Вид КАК Вид,
	|	ВЫБОР
	|		КОГДА ВТ_НастройкиСчетов.ЕстьСуммовойУчет ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		КОГДА ВТ_НастройкиСчетов.ЕстьСуммовойУчет > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьСуммовойУчет,
	|	ВЫБОР
	|		КОГДА ВТ_НастройкиСчетов.ТолькоОборотыПоКоличеству ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА ВТ_НастройкиСчетов.ТолькоОборотыПоКоличеству = ВТ_НастройкиСчетов.КоличествоСубконто
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТолькоОборотыПоКоличеству
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонГраница, , , Организация = &Организация) КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НастройкиСчетов КАК ВТ_НастройкиСчетов
	|		ПО ХозрасчетныйОстатки.Счет = ВТ_НастройкиСчетов.Счет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстатки.Счет";
	
	Для Каждого СтрокаПериода Из ТаблицаМесяцев Цикл
	
		Запрос.УстановитьПараметр("КонГраница", Новый Граница(КонецДня(СтрокаПериода.КонПериода), ВидГраницы.Включая));
	
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			ТекстОшибки = "";
		
			ТекстСтрока = "";
			Если Выборка.Вид = ВидСчета.Активный Тогда
				Если Выборка.СуммаОстаток < 0 Тогда
					ТекстСтрока = НСтр("ru='Отрицательный остаток в гривнях по дебету активного счета';uk=""Від'ємний залишок в гривнях по дебету активного рахунку""");
				КонецЕсли;
			ИначеЕсли Выборка.Вид = ВидСчета.Пассивный Тогда
				Если Выборка.СуммаОстаток > 0 Тогда
					ТекстСтрока = НСтр("ru='Отрицательный остаток в гривнях по кредиту пассивного счета';uk=""Від'ємний залишок в гривнях по кредиту пасивного рахунку""");
				КонецЕсли;
			КонецЕсли;
			ТекстОшибки = ТекстСтрока;
		
			Если Выборка.Валютный Тогда
				ТекстСтрока = "";
				Если Выборка.Вид = ВидСчета.Активный Тогда
					Если Выборка.ВалютнаяСуммаОстаток < 0 Тогда
						ТекстСтрока = НСтр("ru='Отрицательный остаток в валюте по дебету активного счета';uk=""Від'ємний залишок в валюті по дебету активного рахунку""");
					КонецЕсли;
				ИначеЕсли Выборка.Вид = ВидСчета.Пассивный Тогда
					Если Выборка.ВалютнаяСуммаОстаток > 0 Тогда
						ТекстСтрока = НСтр("ru='Отрицательный остаток в валюте по кредиту пассивного счета';uk=""Від'ємний залишок в валюті по кредиту пасивного рахунку""");
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекстСтрока) Тогда
					Если ЗначениеЗаполнено(ТекстОшибки) Тогда
						ТекстОшибки = ТекстОшибки + Символы.ПС;
					КонецЕсли;
					ТекстОшибки = ТекстОшибки + ТекстСтрока;
				КонецЕсли;
			КонецЕсли;
			
			Если Выборка.Количественный Тогда
				ТекстСтрока = "";
				
				Если Выборка.КоличествоОстаток = 0 И Выборка.СуммаОстаток <> 0 И НЕ Выборка.ТолькоОборотыПоКоличеству Тогда
					ТекстСтрока = НСтр("ru='Отсутствует остаток в количественном выражении при остатке в денежном выражении';uk='Відсутній залишок у кількісному вираженні при залишку в грошовому вираженні'");
				ИначеЕсли Выборка.КоличествоОстаток <> 0 И Выборка.СуммаОстаток = 0 И Выборка.ЕстьСуммовойУчет Тогда
					ТекстСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Отсутствует остаток в денежном выражении при остатке в количественном выражении %1';uk='Відсутній залишок у грошовому вираженні при залишку в кількісному вираженні %1'"),
						Формат(Выборка.КоличествоОстаток, "ЧЦ=15; ЧДЦ=3"));
				ИначеЕсли Выборка.Вид = ВидСчета.Активный Тогда
					Если Выборка.КоличествоОстаток < 0 Тогда
						ТекстСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Отрицательный остаток по количеству по дебету активного счета';uk=""Від'ємний залишок за кількістю за дебетом активного рахунку"""),
							Формат(Выборка.КоличествоОстаток, "ЧЦ=15; ЧДЦ=3"));
					КонецЕсли;
				ИначеЕсли Выборка.Вид = ВидСчета.Пассивный Тогда
					Если Выборка.КоличествоОстаток > 0 Тогда
						ТекстСтрока = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Отрицательный остаток по количеству по кредиту пассивного счета';uk=""Від'ємний залишок за кількістю по кредиту пасивного рахунку"""),
							Формат(Выборка.КоличествоОстаток, "ЧЦ=15; ЧДЦ=3"));
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекстСтрока) Тогда
					Если ЗначениеЗаполнено(ТекстОшибки) Тогда
						ТекстОшибки = ТекстОшибки + Символы.ПС;
					КонецЕсли;
					ТекстОшибки = ТекстОшибки + ТекстСтрока;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				НоваяСтрока = ТаблицаОшибок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.ПериодМесяц = СтрокаПериода.НачПериода;
				НоваяСтрока.СуммаОстаток = Выборка.СуммаОстаток;
				НоваяСтрока.Ошибка = ТекстОшибки;
				НоваяСтрока.Расшифровка = Новый Структура();
				НоваяСтрока.Расшифровка.Вставить("Идентификатор",	СтрокаПроверки.Идентификатор);
				НоваяСтрока.Расшифровка.Вставить("НачалоПериода", 	СтрокаПериода.НачПериода);
				НоваяСтрока.Расшифровка.Вставить("КонецПериода", 	СтрокаПериода.КонПериода);
				НоваяСтрока.Расшифровка.Вставить("Счет", 			Выборка.Счет);
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЦикла;

	Запрос.МенеджерВременныхТаблиц.Закрыть();

	Возврат ТаблицаОшибок;

КонецФункции

Функция ПолучитьТаблицуНедопустимыхПроводок()

	ОписаниеТиповСтрока = ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(0);
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");

	ТаблицаНедопустимыхПроводок = Новый ТаблицаЗначений;
	ТаблицаНедопустимыхПроводок.Колонки.Добавить("СчетДт", ОписаниеТиповСтрока);
	ТаблицаНедопустимыхПроводок.Колонки.Добавить("СчетКт", ОписаниеТиповСтрока);
	ТаблицаНедопустимыхПроводок.Колонки.Добавить("ИсключениеДт");
	ТаблицаНедопустимыхПроводок.Колонки.Добавить("ИсключениеКт");
	ТаблицаНедопустимыхПроводок.Колонки.Добавить("Ошибка", ОписаниеТиповСтрока);
	ТаблицаНедопустимыхПроводок.Колонки.Добавить("ДопустимаТолькоПриЗакрытииГода", ОписаниеТиповБулево);
	
	ТаблицаНедопустимыхПроводок.Индексы.Добавить("СчетДт, СчетКт");
	
	Макет = Отчеты.ЭкспрессПроверкаВеденияУчета.ПолучитьМакет("СвойстваСчетов");
	ТекОбласть = Макет.Область("НедопустимыеПроводки");
	
	СтруктураПоиска = Новый Структура("СчетДт, СчетКт");
	
	Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
		
		ДопустимаТолькоПриЗакрытииГода = СокрЛП(Макет.Область(Ном, 1).Текст);
		СчетДт = СокрЛП(Макет.Область(Ном, 2).Текст);
		СчетКт = СокрЛП(Макет.Область(Ном, 3).Текст);
		ИсключениеДт = СокрЛП(Макет.Область(Ном, 5).Текст);
		ИсключениеКт = СокрЛП(Макет.Область(Ном, 6).Текст);
		ТекстОшибки  = СокрЛП(Макет.Область(Ном, 7).Текст);
	
		МассивСчетДт = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СчетДт, ",", Ложь);
		МассивСчетКт = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СчетКт, ",", Ложь);
		
		МассивИсключениеДт = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсключениеДт, ",", Истина);
		МассивИсключениеКт = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсключениеКт, ",", Истина);
		
		// Исключим возможные пробелы.
		Для Инд = 0 по МассивИсключениеДт.Количество() - 1 Цикл
			МассивИсключениеДт[Инд] = СокрЛП(МассивИсключениеДт[Инд]);
		КонецЦикла;

		Для Инд = 0 по МассивИсключениеКт.Количество() - 1 Цикл
			МассивИсключениеКт[Инд] = СокрЛП(МассивИсключениеКт[Инд]);
		КонецЦикла;
		
		// Некорректные счета Дт, Кт могут быть заданы списком, поэтому для каждой отдельной 
		// проводки создадим свою строку в таблице недопустимых проводок.
		Для Каждого СчетДт Из МассивСчетДт Цикл
			СтруктураПоиска.СчетДт = СокрЛП(СчетДт);
			
			Для Каждого Счет Из МассивСчетКт Цикл
			
				СтруктураПоиска.СчетКт = СокрЛП(Счет);
			
				НайденныеСтроки = ТаблицаНедопустимыхПроводок.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НоваяСтрока = ТаблицаНедопустимыхПроводок.Добавить();
					НоваяСтрока.СчетДт = СокрЛП(СчетДт);
					НоваяСтрока.СчетКт = СокрЛП(Счет);
					НоваяСтрока.ИсключениеДт = МассивИсключениеДт;
					НоваяСтрока.ИсключениеКт = МассивИсключениеКт;
					НоваяСтрока.Ошибка  = ТекстОшибки;
					НоваяСтрока.ДопустимаТолькоПриЗакрытииГода  = ?(ДопустимаТолькоПриЗакрытииГода = "1", Истина, Ложь);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаНедопустимыхПроводок.Индексы.Добавить("СчетДт");
	ТаблицаНедопустимыхПроводок.Индексы.Добавить("СчетКт");
	
	Возврат ТаблицаНедопустимыхПроводок;

КонецФункции

Функция ПолучитьНедопустимыеПроводкиДляСчета(КодСчета, ДтКт, ТаблицаНедопустимыхПроводок, ЭтоЗакрытиеГода)

	СтруктураПоиска = Новый Структура();
	Если ЭтоЗакрытиеГода Тогда
		СтруктураПоиска.Вставить("ДопустимаТолькоПриЗакрытииГода", Ложь);
	КонецЕсли;
	
	МассивСтрокТаблицыНедопустимыхПроводок = Новый Массив;
	
	СтруктураПоиска.Вставить("Счет" + ДтКт, Лев(КодСчета,2));
	МассивСтрокТаблицыНедопустимыхПроводок = ТаблицаНедопустимыхПроводок.НайтиСтроки(СтруктураПоиска);
	

	Возврат МассивСтрокТаблицыНедопустимыхПроводок;

КонецФункции

Функция НайтиСтрокуТаблицыНедопустимыхПроводокДляСчета(КодСчета, ДтКт, МассивСтрокТаблицыНедопустимыхПроводок)

	СтрокаДляВсехКорСчетов = Неопределено;
	Для Каждого СтрокаТаблицы Из МассивСтрокТаблицыНедопустимыхПроводок Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы["Счет" + ДтКт]) Тогда
			Если СравнитьКодыСчетовСУчетомИерархии(КодСчета, СтрокаТаблицы["Счет" + ДтКт]) Тогда
				Возврат СтрокаТаблицы;
			КонецЕсли;
		Иначе
			СтрокаДляВсехКорСчетов = СтрокаТаблицы;
		КонецЕсли;
	КонецЦикла;

	Если СтрокаДляВсехКорСчетов <> Неопределено Тогда
		// Ни в одной строке не было явно заданного запрета,
		// проверим явно заданные разрешения.
		МассивИсключений = СтрокаДляВсехКорСчетов["Исключение" + ДтКт];
		Для Каждого СчетИсключение Из МассивИсключений Цикл
			Если СравнитьКодыСчетовСУчетомИерархии(КодСчета, СчетИсключение) Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат СтрокаДляВсехКорСчетов;

КонецФункции

Функция СравнитьКодыСчетовСУчетомИерархии(ИскомыйКодСчета, КодСчетаДляСравнения)
	
	Если ИскомыйКодСчета = КодСчетаДляСравнения Тогда
		Возврат Истина;
	Иначе
		//Возврат Найти(ИскомыйКодСчета, КодСчетаДляСравнения + ".") = 1;
		Возврат Найти(ИскомыйКодСчета,КодСчетаДляСравнения) = 1;
	КонецЕсли;

КонецФункции

Функция ПроверитьКорректныеКорреспондецииСчетов(СтрокаПроверки, ПараметрыОтчета)

	ОписаниеТиповСтрока = ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(0);

	ТаблицаНедопустимыхПроводок = ПолучитьТаблицуНедопустимыхПроводок();
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Документ");
	ТаблицаОшибок.Колонки.Добавить("ДокументПредставление", ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("НомерСтроки", 			ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(10, 0));
	ТаблицаОшибок.Колонки.Добавить("СчетДтКод", 		ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("СчетКтКод", 		ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("Сумма", 			ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаОшибок.Колонки.Добавить("Ошибка", 			ОписаниеТиповСтрока);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", 	ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 	КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация", 	ПараметрыОтчета.Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Период,
	|	НАЧАЛОПЕРИОДА(Хозрасчетный.Период, МЕСЯЦ) КАК НачПериода1,
	|	НАЧАЛОПЕРИОДА(Хозрасчетный.Период, МЕСЯЦ) КАК НачПериода2,
	|	Хозрасчетный.Регистратор КАК Документ,
	|	МИНИМУМ(Хозрасчетный.НомерСтроки) КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(Хозрасчетный.Регистратор) КАК ДокументПредставление,
	|	Хозрасчетный.СчетДт КАК СчетДт,
	|	Хозрасчетный.СчетДт.Код КАК СчетДтКод,
	|	Хозрасчетный.СчетКт КАК СчетКт,
	|	Хозрасчетный.СчетКт.Код КАК СчетКтКод,
	|	СУММА(Хозрасчетный.Сумма) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.СчетДт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный)
	|	И Хозрасчетный.СчетКт <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный)
	|	И Хозрасчетный.Организация = &Организация
	|	И Хозрасчетный.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Хозрасчетный.Активность
	|	И НЕ Хозрасчетный.СчетДт.Забалансовый
	|	И Хозрасчетный.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.Период,
	|	Хозрасчетный.Регистратор,
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетДт.Код,
	|	Хозрасчетный.СчетКт,
	|	Хозрасчетный.СчетКт.Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетДтКод,
	|	СчетКтКод,
	|	Документ,
	|	НомерСтроки
	|ИТОГИ
	|	МИНИМУМ(НачПериода1),
	|	МАКСИМУМ(НачПериода2),
	|	МАКСИМУМ(СчетДтКод),
	|	МАКСИМУМ(СчетКтКод)
	|ПО
	|	СчетДт,
	|	СчетКт
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ВыборкаПоДт = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	СтруктураПоискаДт = Новый Структура;
	СтруктураПоискаКт = Новый Структура;

	Пока ВыборкаПоДт.Следующий() Цикл
	
		ВыборкаПоКт = ВыборкаПоДт.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоКт.Следующий() Цикл
		
			ЭтоЗакрытиеГода = (ВыборкаПоКт.НачПериода1 = ВыборкаПоКт.НачПериода2 И Месяц(ВыборкаПоКт.НачПериода1) = 12);
			СтрокаТаблицыНедопустимыхПроводок = Неопределено; 
		
			МассивСтрокТаблицыНедопустимыхПроводок = ПолучитьНедопустимыеПроводкиДляСчета(ВыборкаПоКт.СчетДтКод, "Дт", ТаблицаНедопустимыхПроводок, ЭтоЗакрытиеГода);
			Если МассивСтрокТаблицыНедопустимыхПроводок.Количество() > 0 Тогда
				СтрокаТаблицыНедопустимыхПроводок = НайтиСтрокуТаблицыНедопустимыхПроводокДляСчета(ВыборкаПоКт.СчетКтКод, "Кт", МассивСтрокТаблицыНедопустимыхПроводок);
			Иначе
				// Проверяем по счету Кт
				МассивСтрокТаблицыНедопустимыхПроводок = ПолучитьНедопустимыеПроводкиДляСчета(ВыборкаПоКт.СчетКтКод, "Кт", ТаблицаНедопустимыхПроводок, ЭтоЗакрытиеГода);
				Если МассивСтрокТаблицыНедопустимыхПроводок.Количество() > 0 Тогда
					СтрокаТаблицыНедопустимыхПроводок = НайтиСтрокуТаблицыНедопустимыхПроводокДляСчета(ВыборкаПоКт.СчетДтКод, "Дт", МассивСтрокТаблицыНедопустимыхПроводок);
				КонецЕсли; 
			КонецЕсли;
		
			Если СтрокаТаблицыНедопустимыхПроводок <> Неопределено Тогда
				// Найдены недопустимые проводки, выводим их в ошибки.
				Выборка = ВыборкаПоКт.Выбрать();
				Пока Выборка.Следующий() Цикл
					НоваяСтрока = ТаблицаОшибок.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					НоваяСтрока.Ошибка = СтрокаТаблицыНедопустимыхПроводок.Ошибка;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЦикла;

	Возврат ТаблицаОшибок;

КонецФункции

// Процедура формирует реест валютных остатков, анализирет валютные итоги, 
// производит вычисления с курсом валюты, при необходимости выдает соответствующие 
// предупреждения.
//
Функция ПроверитьОстаткиПоВалютам(СтрокаПроверки, ПараметрыОтчета)

	ОписаниеТиповСтрока = ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(0);
	ОписаниеТиповСтрокаКод = ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(Метаданные.ПланыСчетов.Хозрасчетный.ДлинаКода);
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("НомерСтроки", 	ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(10, 0));
	ТаблицаОшибок.Колонки.Добавить("СчетКод", 		ОписаниеТиповСтрока);
	ТаблицаОшибок.Колонки.Добавить("Сумма", 		ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаОшибок.Колонки.Добавить("ВалютнаяСумма", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаОшибок.Колонки.Добавить("Ошибка", 		ОписаниеТиповСтрока);
	
	ПС = ПланыСчетов.Хозрасчетный;
	МоментДокумента = Новый МоментВремени(ПараметрыОтчета.КонецПериода+1);
	ДатаКон     = ПараметрыОтчета.КонецПериода;
	Организация = ПараметрыОтчета.Организация;
	
	
	Если ДатаКон > '20140819' И ДатаКон < '20150331' Тогда
		ДатаКурса = ДатаКон + 86400;
	Иначе
		ДатаКурса = ДатаКон;
	КонецЕсли;
	
	 
	ВидыСубконто = Новый массив();

	СтруктураОтбора = Новый Структура;


	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	НЕ Хозрасчетный.ПометкаУдаления
		|	И Хозрасчетный.Валютный";
	
	ВалютныеСчета = Запрос.Выполнить().Выгрузить();
	

	ТаблицаОбработанныхВалют = Новый СписокЗначений;
	Для Каждого Строка из ВалютныеСчета Цикл


		Счет = Строка.Ссылка;
		

		ВидыСубконто.Очистить();
		СтруктураОтбора.Очистить();

		СтруктураОтбора.Вставить("Организация", Организация);
		СтруктураОтбора.Вставить("Счет", Счет);

		// Соберем субконто
		Реквизиты    = "Счет,Валюта";
		Для Каждого ТекВидСубконто из Счет.ВидыСубконто Цикл

			Если Не (ТекВидСубконто.ТолькоОбороты) Тогда
				ВидыСубконто.Добавить(ТекВидСубконто.ВидСубконто);
				Реквизиты = Реквизиты + ",Субконто" + (ВидыСубконто.ВГраница() + 1);
			КонецЕсли;

		КонецЦикла;

		// Посчитаем остатки
		РеестрОстатков = РегистрыБухгалтерии.Хозрасчетный.Остатки(МоментДокумента,ВидыСубконто,СтруктураОтбора,Реквизиты,"Сумма,ВалютнаяСумма");

		Для каждого Стр из РеестрОстатков цикл

			
			
			КодВалюты = Стр.Валюта.Код;
			Если (КодВалюты = "0") ИЛИ (КодВалюты = "000") ИЛИ (КодВалюты = "980") Тогда
				Продолжить;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(Стр.Валюта) Тогда

				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Обнаружены остатки по валютному счету без указания валюты - счет: %1 <%2>';uk='Виявлено залишки по валютному рахунку без вказівки валюти - рахунок: %1 <%2>'"), Счет.Код, Счет.Наименование);

				Для НомерСубконто = 1 по ВидыСубконто.Количество() Цикл
					СтрокаСообщения=СтрокаСообщения + НСтр("ru='    - субконто <';uk='    - субконто <'")+ВидыСубконто[НомерСубконто-1].Наименование+"> : """+ Стр["Субконто"+НомерСубконто]+"""";
				КонецЦикла;

				СтрокаОшибки = ТаблицаОшибок.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОшибки,Стр);
				СтрокаОшибки.СчетКод = Счет.Код;
				СтрокаОшибки.Ошибка = СтрокаСообщения;
				Продолжить;
			КонецЕсли;

			
			СтруктураКурса 	= МодульВалютногоУчета.ПолучитьКурсВалюты(Стр.Валюта, ДатаКурса);
			Кратность 		= СтруктураКурса.Кратность;
			Курс 			= СтруктураКурса.Курс / ?(Кратность = 0, 1, Кратность);

 
			Если (Курс = 0) И (ТаблицаОбработанныхВалют.НайтиПоЗначению(Стр.Валюта.Наименование) = Неопределено) Тогда
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не установлен курс валюты %1. Валютная сумма по дебету счета %2 %3 по кредиту %4';uk='Не встановлений курс валюти %1. Валютна сума по дебету рахунку %2 %3 по кредиту %4'"), Стр.Валюта.Наименование, Стр.Счет.Код, Стр.ВалютнаяСуммаОстатокДт, Стр.ВалютнаяСуммаОстатокКт);
				
				СтрокаОшибки = ТаблицаОшибок.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОшибки,Стр);
				СтрокаОшибки.СчетКод = Счет.Код;
				СтрокаОшибки.Ошибка = СтрокаСообщения;

			КонецЕсли;

			ПоследняяДатаВОтчетномПериоде = МаксимальнаяДатаДляВалюты(Стр.Валюта, ДатаКурса);

			Если (ТипЗнч(ПоследняяДатаВОтчетномПериоде) = Тип("Число")) И (ТаблицаОбработанныхВалют.НайтиПоЗначению(Стр.Валюта.Наименование) = Неопределено) Тогда
				// Курс установлен не на последнюю дату отчетного периода
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не установлен курс валюты %1. Необходимо указать курс на дату %2';uk='Не встановлений курс валюти %1. Необхідно вказати курс на дату %2'"), Стр.Валюта.Наименование, Формат(ДатаКурса, "ДФ=дд.ММ.гггг"));
				
				СтрокаОшибки = ТаблицаОшибок.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОшибки,Стр);
				СтрокаОшибки.СчетКод = Счет.Код;
				СтрокаОшибки.Ошибка = СтрокаСообщения;
			КонецЕсли;

			Если (ПоследняяДатаВОтчетномПериоде <> ДатаКурса) И (ТаблицаОбработанныхВалют.НайтиПоЗначению(Стр.Валюта.Наименование) = Неопределено) Тогда
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Валюта %1, курс %2 установленная дата курса %3 не равна нужной дате %4';uk='Валюта %1, курс %2 встановлена дата курсу %3 не дорівнює необхідній даті %4'"), Стр.Валюта.Наименование, Курс, Формат(ПоследняяДатаВОтчетномПериоде, "ДФ=дд.ММ.гггг"), Формат(ДатаКурса, "ДФ=дд.ММ.гггг"));
			 	
				СтрокаОшибки = ТаблицаОшибок.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОшибки,Стр);
				СтрокаОшибки.СчетКод = Счет.Код;
				СтрокаОшибки.Ошибка = СтрокаСообщения;
			КонецЕсли;

			Если СчетаСособымПорядкомПереоценкиБУ(Стр.Счет) Тогда
				// Пропустим счета с особым порядком переоценки
				Продолжить;
			КонецЕсли;

			Если Стр.СуммаОстатокДт <> Окр(Стр.ВалютнаяСуммаОстатокДт * Курс, 2, 1) Или
			     Стр.СуммаОстатокКт <> Окр(Стр.ВалютнаяСуммаОстатокКт * Курс, 2, 1) Тогда
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Необходимо пересчитать валютные остатки по курсу НБУ на %1. Счет %2';uk='Необхідно перерахувати валютні залишки за курсом НБУ на %1. Рахунок %2'"), Формат(ДатаКурса, "ДФ=дд.ММ.гггг"), Стр.Счет.Код);
			
				СтрокаОшибки = ТаблицаОшибок.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаОшибки,Стр);
				СтрокаОшибки.СчетКод = Счет.Код;
				СтрокаОшибки.Ошибка = СтрокаСообщения;
			КонецЕсли;

			ТаблицаОбработанныхВалют.Добавить(Стр.Валюта.Наименование);

		КонецЦикла;

	КонецЦикла;

	Возврат ТаблицаОшибок;
	
КонецФункции

// Возвращает дату, на которую установлен курс валюты, последнюю перед переданной датой.
//
// Параметры:
//  Валюта       - Ссылка.СправочникВалюты; валюта,для которй требуется узнать дату курса;
//  ТребуемаяДата - дата; дата, не позже которой надо анализировать курс.
//
// Возвращаемое значение:
//  дата, на которую послдений раз устанавливался курс валюты.
//
Функция МаксимальнаяДатаДляВалюты(Валюта, ТребуемаяДата)

	ОтборСтру = Новый Структура("Валюта");
	ОтборСтру.Валюта = Валюта;

	Переб = РегистрыСведений.КурсыВалют.Выбрать( ,, ОтборСтру, "Убыв");

	Результат = 0;
	Пока Переб.Следующий() Цикл

		Если ТребуемаяДата >= Переб.Период Тогда
			Результат = КонецДня(Переб.Период);
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции // МаксимальнаяДатаДляВалюты()

// Проверяет вхождение счета из плана счетов бухгалтерского учета в списко
// с особым порядком переоценки валютных остатков.
// 
// Параметры:
//  АнализируемыейСчет - счет плана счетов.
//
// Возвращаемое значение
//  булево. Истина, если переданный счет является счетом с особым порядком переоценки.
//
Функция СчетаСособымПорядкомПереоценкиБУ(АнализируемыйСчет)

	ОтборСчетов = Новый Структура("Счет");
	ОтборСчетов.Счет = АнализируемыйСчет;

	Результ = РегистрыСведений.НемонетарныеСчета.Выбрать(ОтборСчетов);

	Результат = Ложь;

	Пока Результ.Следующий() Цикл
		Результат = Истина;
		Прервать;
	КонецЦикла;

	Возврат Результат;

КонецФункции // СчетаСособымпорядкомПереоценкиБУ

#КонецОбласти	//ПроверкиРазделаАнализСостоянияБухгалтерскогоУчета 

#Область ПроверкиРазделаКассовыеОперации

///////////////////////////////////////////////////////////////////////////////////////
// Проверки раздела "Кассовые операции"


Функция ПроверитьНепроведенныеПКО_РКО(СтрокаПроверки, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.Ссылка КАК Документ,
	|	ПриходныйКассовыйОрдер.Дата КАК Дата,
	|	ПриходныйКассовыйОрдер.Номер,
	|	&НаименованиеПКО КАК ВидДокумента,
	|	ПриходныйКассовыйОрдер.СуммаДокумента,
	|	ПриходныйКассовыйОрдер.Ответственный
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Проведен = ЛОЖЬ
	|	И ПриходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И ПриходныйКассовыйОрдер.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ПриходныйКассовыйОрдер.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.Дата,
	|	РасходныйКассовыйОрдер.Номер,
	|	&НаименованиеРКО КАК ВидДокумента,
	|	РасходныйКассовыйОрдер.СуммаДокумента,
	|	РасходныйКассовыйОрдер.Ответственный
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Проведен = ЛОЖЬ
	|	И РасходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И РасходныйКассовыйОрдер.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасходныйКассовыйОрдер.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ";
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация",   ПараметрыОтчета.Организация);
	
	Запрос.УстановитьПараметр("НаименованиеПКО", НСтр("ru='Приходный кассовый ордер';uk='Прибутковий касовий ордер'"));
	Запрос.УстановитьПараметр("НаименованиеРКО", НСтр("ru='Расходный кассовый ордер';uk='Видатковий касовий ордер'"));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПроверитьМинусыПоКассе(СтрокаПроверки, ПараметрыОтчета)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Период КАК Дата,
	|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйОстаткиИОбороты.Счет) КАК СчетПредставление,
	|	ХозрасчетныйОстаткиИОбороты.Счет.Порядок КАК ПорядокСчета,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, ДвиженияИГраницыПериода, Счет В (&СчетаКассы), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|ГДЕ
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстаткиИОбороты.Период,
	|	ПорядокСчета";
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация",   ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СчетаКассы",	   
			БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.Касса));
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	
	Если ТаблицаРезультата.Количество() > 0 Тогда
		ТаблицаРезультата.Колонки.Добавить("Расшифровка");
		Для Каждого СтрокаТабРезультата Из ТаблицаРезультата Цикл
			СтрокаТабРезультата.Расшифровка = Новый Структура();
			СтрокаТабРезультата.Расшифровка.Вставить("Идентификатор", СтрокаПроверки.Идентификатор);
			СтрокаТабРезультата.Расшифровка.Вставить("Счет", СтрокаТабРезультата.Счет);
			СтрокаТабРезультата.Расшифровка.Вставить("НачалоПериода", СтрокаТабРезультата.Дата);
			СтрокаТабРезультата.Расшифровка.Вставить("КонецПериода", КонецДня(СтрокаТабРезультата.Дата));
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Функция ПроверитьЛимитКассы(СтрокаПроверки, ПараметрыОтчета)
	
	Если ПараметрыОтчета.ЛимитКассы = 0 Тогда
		СтрокаПроверки.КомментарийРезультатаОшибка = НСтр("ru='Лимит кассы не установлен.';uk='Ліміт каси не встановлений.'");
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Период КАК Дата,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК Остаток,
	|	&ЛимитКассы КАК Лимит,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт - &ЛимитКассы КАК Ошибка,
	|	ХозрасчетныйОстаткиИОбороты.Счет.Представление КАК СчетПредставление
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач, &ДатаКон, День, ДвиженияИГраницыПериода, Счет В (&СчетКассы), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|ГДЕ
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт > &ЛимитКассы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Запрос.УстановитьПараметр("ДатаНач", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКон", ПараметрыОтчета.КонецПериода);
	Запрос.УстановитьПараметр("ЛимитКассы", ПараметрыОтчета.ЛимитКассы);
	
	МассивОтбора = Новый Массив;
 	ВыборкаПоСчету = ПланыСчетов.Хозрасчетный.ВыбратьИерархически(ПланыСчетов.Хозрасчетный.Касса);
	пока ВыборкаПоСчету.Следующий() Цикл
		Если ВыборкаПоСчету.Ссылка<>ПланыСчетов.Хозрасчетный.ДенежныеДокументыВНациональнойВалюте и ВыборкаПоСчету.Ссылка<>ПланыСчетов.Хозрасчетный.ДенежныеДокументыВИностраннойВалюте Тогда
    		МассивОтбора.Добавить(ВыборкаПоСчету.Ссылка);
		КонецЕсли;
	КонецЦикла;	
	
	Запрос.УстановитьПараметр("СчетКассы", МассивОтбора);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("ЛимитКассы", ПараметрыОтчета.ЛимитКассы);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Функция ПроверитьВыдачаПодотчетПослеОтчета(СтрокаПроверки, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Период КАК Дата,
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Сотрудник,
	|	ВЫРАЗИТЬ(ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Справочник.ФизическиеЛица).Наименование КАК СотрудникНаименование,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК Выдано,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК Остаток,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт - ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ОстатокПредыдущихАвансов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, Движения, Счет В (&СчетаРасчетыСПодотчетнымиЛицами), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций), Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|ГДЕ
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт > 0
	|	И ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт > ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстаткиИОбороты.Период,
	|	СотрудникНаименование";
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация",   ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СчетаРасчетыСПодотчетнымиЛицами",	   
		БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами));
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Если ТаблицаРезультата.Количество() > 0 Тогда
		
		ТаблицаРезультата.Колонки.Добавить("Расшифровка");
		Для Каждого СтрокаТабРезультата Из ТаблицаРезультата Цикл
			СтрокаТабРезультата.Расшифровка = Новый Структура();
			СтрокаТабРезультата.Расшифровка.Вставить("Идентификатор", СтрокаПроверки.Идентификатор);
			
			СтрокаТабРезультата.Расшифровка.Вставить("Счет", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами);
			СтрокаТабРезультата.Расшифровка.Вставить("Субконто1", СтрокаТабРезультата.Сотрудник);
			СтрокаТабРезультата.Расшифровка.Вставить("КонецПериода", КонецДня(СтрокаТабРезультата.Дата));
			
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Функция ПроверитьДвижениеВнутри372Счета(СтрокаПроверки, ПараметрыОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Период КАК Дата,
	|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Документ,
	|	ПРЕДСТАВЛЕНИЕ(ХозрасчетныйДвиженияССубконто.Регистратор) КАК ДокументПредставление,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК Кому,
	|	ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК Справочник.ФизическиеЛица).Наименование КАК КомуНаименование,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК ОтКого,
	|	ВЫРАЗИТЬ(ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК Справочник.ФизическиеЛица).Наименование КАК ОтКогоНаименование,
	|	ХозрасчетныйДвиженияССубконто.Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Активность = ИСТИНА
	|				И Организация = &Организация
	|				И СчетДт В (&СчетаРасчетыСПодотчетнымиЛицами)
	|				И СчетКт В (&СчетаРасчетыСПодотчетнымиЛицами),
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ";
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация",   ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СчетаРасчетыСПодотчетнымиЛицами",	   
			БухгалтерскийУчетВызовСервераПовтИсп.СчетаВИерархии(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами));
	
	Результат = Запрос.Выполнить();
	
	ТаблицаРезультата = Результат.Выгрузить();
	
	Возврат ТаблицаРезультата;
	
КонецФункции

Функция ПроверитьПодотчетТолькоРаботникам(СтрокаПроверки, ПараметрыОтчета)
	
	// Для расчетов с подотчетным лицами в валюте исключаем из анализа проводки по переоценке.

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ХозрасчетныйДвиженияССубконто.Период, ДЕНЬ) КАК Период,
	|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК ФизЛицо,
	|	ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВТ_Проводки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Активность = ИСТИНА
	|				И Организация = &Организация
	|				И СчетДт В (&СчетаРасчетыСПодотчетнымиЛицами)
	|				И ВЫБОР
	|					КОГДА СчетДт.Валютный
	|						ТОГДА ВалютнаяСумма <> 0
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ,
	|			,
	|			) КАК ХозрасчетныйДвиженияССубконто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизЛицо,
	|	ТаблицаКадровыеДанныеСотрудников.ДатаПриема,
	|	ТаблицаКадровыеДанныеСотрудников.ДатаУвольнения
	|ПОМЕСТИТЬ ВТ_Сотрудники
	|ИЗ
	|	&ТаблицаКадровыеДанныеСотрудников КАК ТаблицаКадровыеДанныеСотрудников
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Проводки.Период,
	|	ВТ_Проводки.Регистратор,
	|	ВТ_Проводки.ФизЛицо,
	|	ВТ_Проводки.Сумма,
	|	МАКСИМУМ(ВТ_Сотрудники.ДатаПриема) КАК ДатаПриема
	|ПОМЕСТИТЬ ВТ_ПоследниеДатыПриема
	|ИЗ
	|	ВТ_Проводки КАК ВТ_Проводки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сотрудники КАК ВТ_Сотрудники
	|		ПО ВТ_Проводки.ФизЛицо = ВТ_Сотрудники.ФизЛицо
	|			И (ВТ_Сотрудники.ДатаПриема <= ВТ_Проводки.Период)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Проводки.Период,
	|	ВТ_Проводки.Регистратор,
	|	ВТ_Проводки.ФизЛицо,
	|	ВТ_Проводки.Сумма
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПоследниеДатыПриема.Период КАК Дата,
	|	ВТ_ПоследниеДатыПриема.Регистратор КАК Документ,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_ПоследниеДатыПриема.Регистратор) КАК ДокументПредставление,
	|	ВТ_ПоследниеДатыПриема.ФизЛицо,
	|	ВТ_ПоследниеДатыПриема.ФизЛицо.Наименование КАК СотрудникНаименование,
	|	ВТ_ПоследниеДатыПриема.Сумма,
	|	ВТ_ПоследниеДатыПриема.ДатаПриема,
	|	ВТ_Сотрудники.ДатаУвольнения
	|ИЗ
	|	ВТ_ПоследниеДатыПриема КАК ВТ_ПоследниеДатыПриема
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сотрудники КАК ВТ_Сотрудники
	|		ПО ВТ_ПоследниеДатыПриема.ФизЛицо = ВТ_Сотрудники.ФизЛицо
	|			И ВТ_ПоследниеДатыПриема.ДатаПриема = ВТ_Сотрудники.ДатаПриема
	|ГДЕ
	|	(ВТ_Сотрудники.ФизЛицо ЕСТЬ NULL 
	|			ИЛИ ВТ_Сотрудники.ДатаУвольнения <> ДАТАВРЕМЯ(1, 1, 1)
	|				И ВТ_Сотрудники.ДатаУвольнения < ВТ_ПоследниеДатыПриема.Период)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация",   ПараметрыОтчета.Организация);
	
	МассивСчетаРасчетыСПодотчетнымиЛицами = Новый Массив;
	МассивСчетаРасчетыСПодотчетнымиЛицами.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами);  // 372
	Запрос.УстановитьПараметр("СчетаРасчетыСПодотчетнымиЛицами", БухгалтерскийУчет.ПолучитьМассивСчетовССубсчетами(МассивСчетаРасчетыСПодотчетнымиЛицами));
	
	ПараметрыПолученияСотрудников = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудников.Организация = ПараметрыОтчета.Организация;
	
	ТаблицаСотрудниковОрганизации = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудников);
	
	ТаблицаКадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(
		Истина, 
		ТаблицаСотрудниковОрганизации.ВыгрузитьКолонку("Сотрудник"),
		"ДатаПриема, ДатаУвольнения, ФизическоеЛицо",
		КонецДня(ПараметрыОтчета.КонецПериода));
		
	Запрос.УстановитьПараметр("ТаблицаКадровыеДанныеСотрудников", ТаблицаКадровыеДанныеСотрудников);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();	

	Возврат ТаблицаРезультата;
	
КонецФункции

Функция ПроверитьНумерациюПКО(СтрокаПроверки, ПараметрыОтчета)
	Возврат ПроверитьНумерациюДокументов(Метаданные.Документы.ПриходныйКассовыйОрдер.ПолноеИмя(),СтрокаПроверки, ПараметрыОтчета);
КонецФункции

Функция ПроверитьНумерациюРКО(СтрокаПроверки, ПараметрыОтчета)
	Возврат ПроверитьНумерациюДокументов(Метаданные.Документы.РасходныйКассовыйОрдер.ПолноеИмя(),СтрокаПроверки, ПараметрыОтчета);
КонецФункции

#КонецОбласти

#Область ПроверкиРазделаНДС



Функция ПроверитьНДСсАвансовВБУиНУ(СтрокаПроверки, ПараметрыОтчета)

	
	НетУчетнойПолитики = НЕ УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода);
	Если НетУчетнойПолитики Тогда
	
		ТекстКомментария = НСтр("ru='Проверка не может быть выполнена, так как не определена учетная политика организации на %1.';uk='Перевірка не може бути виконана, так як не визначена облікова політика організації на %1.'");
		СтрокаПроверки.КомментарийРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКомментария, Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd.MM.yyyy"));
		
		Возврат Ложь;
	
	КонецЕсли;
	
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода);
	Если НЕ ПлательщикНДС Тогда
	
		ТекстКомментария = НСтр("ru='Проверка не может быть выполнена, так как организация на %1 не является плательщиком НДС.';uk='Перевірка не може бути виконана, так як організація на %1 не є платником ПДВ.'");
		СтрокаПроверки.КомментарийРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКомментария, Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd.MM.yyyy"));

		Возврат Ложь;
		
	КонецЕсли;
	
	СобытияНДСПродаж 				= Перечисления.СобытияПродажиНалоговыйУчет;
	МоментыОпределенияНалоговойБазы = Перечисления.МоментыОпределенияНалоговойБазы;
	
	Запрос =  Новый Запрос;
	Запрос.Текст = "
				|	ВЫБРАТЬ
				|		ВыборкаНДСПродажи.Контрагент,
				|		ВыборкаНДСПродажи.ДоговорКонтрагента,
				|		//ВыборкаНДСПродажи.ВозвратнаяТара,
				|		ВыборкаНДСПродажи.МоментОпределенияБазыНДС,
				|		//ВыборкаНДСПродажи.Отгрузка,
				|		//ВыборкаНДСПродажи.Оплата,
				|		//ВыборкаНДСПродажи.ВозвратОтгрузка,
				|		//ВыборкаНДСПродажи.ВозвратОплата,
				|		ВЫБОР
				|			КОГДА (ВыборкаНДСПродажи.Оплата - ВыборкаНДСПродажи.Отгрузка) >0 
				|				ТОГДА ВыборкаНДСПродажи.Оплата - ВыборкаНДСПродажи.Отгрузка
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ОтгрузкаРазница,
				|		ВЫБОР
				|			КОГДА (ВыборкаНДСПродажи.ВозвратОплата - ВыборкаНДСПродажи.ВозвратОтгрузка) >0 
				|				ТОГДА ВыборкаНДСПродажи.ВозвратОплата - ВыборкаНДСПродажи.ВозвратОтгрузка
				|			ИНАЧЕ 0
				|		КОНЕЦ КАК ВозвратРазница
				|	ИЗ
				|		(ВЫБРАТЬ
				|			НДСПродажОстатки.ДоговорКонтрагента.Владелец КАК Контрагент,
				|			НДСПродажОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
				|			НДСПродажОстатки.ВозвратнаяТара КАК ВозвратнаяТара,
				|			ВЫБОР
				|				КОГДА НДСПродажОстатки.ВозвратнаяТара = ЛОЖЬ
				|					ТОГДА НДСПродажОстатки.ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПродажам
				|				КОГДА НДСПродажОстатки.ВозвратнаяТара = ИСТИНА
				|					ТОГДА НДСПродажОстатки.ДоговорКонтрагента.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПродажам
				|			КОНЕЦ КАК МоментОпределенияБазыНДС,
				|			СУММА(ВЫБОР
				|					КОГДА НДСПродажОстатки.Событие = &СобытиеОтгрузка
				|						ТОГДА НДСПродажОстатки.СуммаВзаиморасчетовОстаток
				|					ИНАЧЕ 0
				|				КОНЕЦ) КАК Отгрузка,
				|			СУММА(ВЫБОР
				|					КОГДА НДСПродажОстатки.Событие = &СобытиеОплата
				|						ТОГДА НДСПродажОстатки.СуммаВзаиморасчетовОстаток
				|					ИНАЧЕ 0
				|				КОНЕЦ) КАК Оплата,
				|			СУММА(ВЫБОР
				|					КОГДА НДСПродажОстатки.Событие = &СобытиеВозвратОтгрузка
				|						ТОГДА НДСПродажОстатки.СуммаВзаиморасчетовОстаток
				|					ИНАЧЕ 0
				|				КОНЕЦ) КАК ВозвратОтгрузка,
				|			СУММА(ВЫБОР
				|					КОГДА НДСПродажОстатки.Событие = &СобытиеВозвратОплата
				|						ТОГДА НДСПродажОстатки.СуммаВзаиморасчетовОстаток
				|					ИНАЧЕ 0
				|				КОНЕЦ) КАК ВозвратОплата
				|		ИЗ
				|			РегистрНакопления.ПродажиНалоговыйУчет.Остатки(&МоментДок, Организация = &Организация) КАК НДСПродажОстатки
				|		
				|		СГРУППИРОВАТЬ ПО
				|			НДСПродажОстатки.ДоговорКонтрагента,
				|			НДСПродажОстатки.ВозвратнаяТара,
				|			НДСПродажОстатки.ДоговорКонтрагента.Владелец,
				|			ВЫБОР
				|				КОГДА НДСПродажОстатки.ВозвратнаяТара = ЛОЖЬ
				|					ТОГДА НДСПродажОстатки.ДоговорКонтрагента.СхемаНалоговогоУчета.МоментОпределенияБазыНДСПоПродажам
				|				КОГДА НДСПродажОстатки.ВозвратнаяТара = ИСТИНА
				|					ТОГДА НДСПродажОстатки.ДоговорКонтрагента.СхемаНалоговогоУчетаПоТаре.МоментОпределенияБазыНДСПоПродажам
				|			КОНЕЦ) КАК ВыборкаНДСПродажи
				|	ГДЕ
				|		(ВыборкаНДСПродажи.МоментОпределенияБазыНДС <> &НеОпределять
				|		ИЛИ ВыборкаНДСПродажи.МоментОпределенияБазыНДС <> &ПоОтгрузке)
				|		И ВыборкаНДСПродажи.ДоговорКонтрагента.СложныйНалоговыйУчет = ИСТИНА
				|		И ((ВыборкаНДСПродажи.Оплата - ВыборкаНДСПродажи.Отгрузка)>0 ИЛИ (ВыборкаНДСПродажи.ВозвратОплата - ВыборкаНДСПродажи.ВозвратОтгрузка) > 0)
				|";
	            
	Запрос.УстановитьПараметр("МоментДок", Новый Граница(ПараметрыОтчета.КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация",ПараметрыОтчета.Организация);
	Запрос.УстановитьПараметр("СобытиеОтгрузка",СобытияНДСПродаж.РеализацияПокупателю);
	Запрос.УстановитьПараметр("СобытиеОплата",СобытияНДСПродаж.ОплатаПокупателем);
	Запрос.УстановитьПараметр("СобытиеВозвратОтгрузка",СобытияНДСПродаж.ВозвратОтПокупателя);
	Запрос.УстановитьПараметр("СобытиеВозвратОплата",СобытияНДСПродаж.ВозвратОплатыПокупателю);
	Запрос.УстановитьПараметр("НеОпределять",МоментыОпределенияНалоговойБазы.НеОпределять);
	Запрос.УстановитьПараметр("ПоОтгрузке",МоментыОпределенияНалоговойБазы.ПоОтгрузке);
	
	ТаблицаОшибок = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОшибок;
	
КонецФункции

#КонецОбласти	//ПроверкиРазделаНДС 

#Область ПроверкиРазделаПроизводство

Функция ПроверитьНаличиеПараметровЗакрытияСчетовПоПодразделениям(СтрокаПроверки, ПараметрыОтчета)

	НетУчетнойПолитики = НЕ УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода);
	Если НетУчетнойПолитики Тогда
	
		ТекстКомментария = НСтр("ru='Проверка не может быть выполнена, так как не определена учетная политика организации на %1.';uk='Перевірка не може бути виконана, так як не визначена облікова політика організації на %1.'");
		СтрокаПроверки.КомментарийРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКомментария, Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd.MM.yyyy"));
		Возврат Ложь;
	
	КонецЕсли;
	
	Если УчетнаяПолитика.СпособРасчетаСебестоимостиПроизводства(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода) = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПеределам Тогда
	
		ТекстКомментария = НСтр("ru='В учетной политике организации на %1 установлен способ расчета себестоимости продукции ';uk='В обліковій політиці організації на %1 встановлений спосіб розрахунку собівартості продукції '")
		                                    + НСтр("ru='""По переделам""';uk='""По переділах""'");
		СтрокаПроверки.КомментарийРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКомментария, Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd.MM.yyyy"));
		Возврат Ложь;

	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УстановкаПорядкаЗакрытияПодразделений.Ссылка
	|ИЗ
	|	Документ.УстановкаПорядкаЗакрытияПодразделений КАК УстановкаПорядкаЗакрытияПодразделений
	|ГДЕ
	|	УстановкаПорядкаЗакрытияПодразделений.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И УстановкаПорядкаЗакрытияПодразделений.Проведен = ИСТИНА
	|	И УстановкаПорядкаЗакрытияПодразделений.Организация = &Организация";
	
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОтчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ПараметрыОтчета.КонецПериода));
	Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
	
	ОбнаруженыОшибки = Запрос.Выполнить().Пустой();
	
	Возврат ОбнаруженыОшибки;
	
КонецФункции

#КонецОбласти	//ПроверкиРазделаПроизводство 

#Область ПроверкиРазделаОпределениеФинансовыхРезультатов

Функция ПроверитьРасчетПоНалогуНаПрибыль(СтрокаПроверки, ПараметрыОтчета)

	НетУчетнойПолитики = НЕ УчетнаяПолитика.Существует(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода);
	Если НетУчетнойПолитики Тогда
	
		ТекстКомментария = НСтр("ru='Проверка не может быть выполнена, так как не определена учетная политика организации на %1.';uk='Перевірка не може бути виконана, так як не визначена облікова політика організації на %1.'");
		СтрокаПроверки.КомментарийРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКомментария, Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd.MM.yyyy"));
		
		Возврат Ложь;
	
	КонецЕсли;
	
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(ПараметрыОтчета.Организация, ПараметрыОтчета.НачалоПериода);
	Если НЕ ПлательщикНалогаНаПрибыль Тогда
	
		ТекстКомментария = НСтр("ru='Организация на %1 не является плательщиком налога на прибыль.';uk='Організація на %1 не є платником податку на прибуток.'");
		СтрокаПроверки.КомментарийРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстКомментария, Формат(ПараметрыОтчета.НачалоПериода, "ДФ=dd.MM.yyyy"));

		Возврат Ложь;
		
	КонецЕсли;
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("НачПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаОшибок.Колонки.Добавить("КонПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаОшибок.Колонки.Добавить("Ошибка");
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("НачПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаПериодов.Колонки.Добавить("КонПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаПериодов.Колонки.Добавить("Результат", Новый ОписаниеТипов("Строка"));
	
	ТекДата = ПараметрыОтчета.НачалоПериода;
	Пока ТекДата < ПараметрыОтчета.КонецПериода Цикл
		
		ЭтоОдинГод = ?(Год(ТекДата)= Год(ПараметрыОтчета.КонецПериода), Истина, Ложь);
		Если ЭтоОдинГод И ПараметрыОтчета.КонецПериода <> КонецГода(ПараметрыОтчета.КонецПериода) Тогда 
			 Прервать;
		 КонецЕсли;
		КонПериода = КонецГода(ТекДата);
		СтрокаПериода = ТаблицаПериодов.Добавить();
		СтрокаПериода.НачПериода = ТекДата;
		СтрокаПериода.КонПериода = Мин(КонПериода, КонецДня(ПараметрыОтчета.КонецПериода));
	    ТекДата = КонецДня(КонПериода)+1;
	
	КонецЦикла;
		
	Для каждого СтрокаПериода Из ТаблицаПериодов Цикл

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасчетыПоНалогуНаПрибыль.Ссылка
		|ИЗ
		|	Документ.РасчетыПоНалогуНаПрибыль КАК РасчетыПоНалогуНаПрибыль
		|ГДЕ
		|	РасчетыПоНалогуНаПрибыль.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И РасчетыПоНалогуНаПрибыль.Проведен = ИСТИНА
		|	И РасчетыПоНалогуНаПрибыль.Организация = &Организация";
		
		Запрос.УстановитьПараметр("ДатаНач", СтрокаПериода.НачПериода);
		Запрос.УстановитьПараметр("ДатаКон", СтрокаПериода.КонПериода);
		Запрос.УстановитьПараметр("Организация", ПараметрыОтчета.Организация);
		
		Результат = Запрос.Выполнить();
		НетРасчетаПоНалогуНаПрибыль = Результат.Пустой();
		
		Если НетРасчетаПоНалогуНаПрибыль Тогда
			
			ОбнаруженыОшибки = Истина;
			
			СтрокаОшибки = ТаблицаОшибок.Добавить();
			СтрокаОшибки.НачПериода = СтрокаПериода.НачПериода;
			СтрокаОшибки.КонПериода = СтрокаПериода.КонПериода;
			СтрокаОшибки.Ошибка     = НСтр("ru='Нет документа ""Расчеты по налогу на прибыль""';uk='Немає документа ""Розрахунки по податку на прибуток""'");
			
		КонецЕсли;

	КонецЦикла;
	
	Возврат ТаблицаОшибок;
	
КонецФункции

Функция ПроверитьОпределениеФинансовыхРезультатов(СтрокаПроверки, ПараметрыОтчета)

	// Проверим месяц
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("НачПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаОшибок.Колонки.Добавить("КонПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаОшибок.Колонки.Добавить("Ошибка");
	ТаблицаОшибок.Колонки.Добавить("ДокументПослеЗакрытия");
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("НачПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаПериодов.Колонки.Добавить("КонПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаПериодов.Колонки.Добавить("Результат", Новый ОписаниеТипов("Строка"));
	
	ДатаНач = ПараметрыОтчета.НачалоПериода;
	ДатаКон = ПараметрыОтчета.КонецПериода;
	Организация = ПараметрыОтчета.Организация;
	
	ТекДата = ДатаНач;
	Пока ТекДата < ДатаКон Цикл
		
		КонПериода = КонецМесяца(ТекДата);
		СтрокаПериода = ТаблицаПериодов.Добавить();
		СтрокаПериода.НачПериода = ТекДата;
		СтрокаПериода.КонПериода = Мин(КонПериода, КонецДня(ПараметрыОтчета.КонецПериода));
		ТекДата = ДобавитьМесяц(ТекДата, 1);
	
	КонецЦикла;
	
	Для каждого СтрокаПериода Из ТаблицаПериодов Цикл

		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОпределениеФинансовыхРезультатов.Ссылка
		|ИЗ
		|	Документ.ОпределениеФинансовыхРезультатов КАК ОпределениеФинансовыхРезультатов
		|ГДЕ
		|	ОпределениеФинансовыхРезультатов.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И ОпределениеФинансовыхРезультатов.Проведен = ИСТИНА
		|	И ОпределениеФинансовыхРезультатов.Организация = &Организация
		|	И ОпределениеФинансовыхРезультатов.ЗакрыватьДоходыИРасходы = ИСТИНА";
		
		Запрос.УстановитьПараметр("ДатаНач", СтрокаПериода.НачПериода);
		Запрос.УстановитьПараметр("ДатаКон", СтрокаПериода.КонПериода);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Результат = Запрос.Выполнить();
		НетОпределениеФинансовыхРезультатов = Результат.Пустой();
		
		Если НетОпределениеФинансовыхРезультатов Тогда
			
			ОбнаруженыОшибки = Истина;
			
			СтрокаОшибки = ТаблицаОшибок.Добавить();
			СтрокаОшибки.НачПериода = СтрокаПериода.НачПериода;
			СтрокаОшибки.КонПериода = СтрокаПериода.КонПериода;
			СтрокаОшибки.Ошибка     = НСтр("ru='Нет документа ""Определение финансовых результатов""';uk='Немає документа ""Визначення фінансових результатів""'");
			СтрокаОшибки.ДокументПослеЗакрытия = НСтр("ru='Нет';uk='Ні'");;
			
		Иначе
			
			ЗапросПоВсемДокументам = Новый Запрос;
			ЗапросПоВсемДокументам.УстановитьПараметр("Организация", Организация);
			
			Для Каждого ДокументМетаданные ИЗ Метаданные.Документы Цикл
				
				Если ДокументМетаданные.Имя	= "ОпределениеФинансовыхРезультатов" Тогда
					Продолжить;
				КонецЕсли; 
				
				ЗапросПоВсемДокументам.Текст = ЗапросПоВсемДокументам.Текст + ?(ЗапросПоВсемДокументам.Текст = "", "", "
				|ОБЪЕДИНИТЬ ВСЕ
				|") + "ВЫБРАТЬ """ + ДокументМетаданные.Имя + """ КАК ИмяДокумента, Представление КАК Представление, Ссылка КАК Ссылка, Дата КАК Дата ИЗ Документ." + ДокументМетаданные.Имя + "
				|ГДЕ Проведен И Дата > &ДатаНач";
				
				ЗапросПоВсемДокументам.Текст = ЗапросПоВсемДокументам.Текст + " И Дата <= &ДатаКон";
				
				Если Организация <> Неопределено И ДокументМетаданные.Реквизиты.Найти("Организация") <> Неопределено Тогда
					Если ТипЗнч(Организация) = Тип("Массив") Тогда
						ЗапросПоВсемДокументам.Текст = ЗапросПоВсемДокументам.Текст + " И Организация В (&Организация)";
					Иначе
						ЗапросПоВсемДокументам.Текст = ЗапросПоВсемДокументам.Текст + " И Организация = &Организация";
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			ЗапросПоВсемДокументам.Текст = ЗапросПоВсемДокументам.Текст + "
			|УПОРЯДОЧИТЬ ПО Дата, Ссылка";
			
			ЗапросПоВсемДокументам.УстановитьПараметр("ДатаНач", Результат.Выгрузить()[0].Ссылка.Дата);
			ЗапросПоВсемДокументам.УстановитьПараметр("ДатаКон", СтрокаПериода.КонПериода);
			
			ТаблицаДокументов = ЗапросПоВсемДокументам.Выполнить().Выгрузить();
			
			Для каждого ДокПослеЗакрытия Из ТаблицаДокументов Цикл
				
				ОбнаруженыОшибки = Истина;
				
				СтрокаОшибки = ТаблицаОшибок.Добавить();
				СтрокаОшибки.НачПериода = СтрокаПериода.НачПериода;
				СтрокаОшибки.КонПериода = СтрокаПериода.КонПериода;
				СтрокаОшибки.Ошибка     = НСтр("ru='После документа ""Определение финансовых результатов"" существуют проведенные документы!';uk='Після документа ""Визначення фінансових результатів"" існують проведені документи!'");
				СтрокаОшибки.ДокументПослеЗакрытия = ДокПослеЗакрытия.Ссылка;
			
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверим год
	
	Если (ДатаКон = КонецГода(ДатаКон)) ИЛИ (КонецДня(ДатаКон) = КонецГода(ДатаКон)) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОпределениеФинансовыхРезультатов.Ссылка
		|ИЗ
		|	Документ.ОпределениеФинансовыхРезультатов КАК ОпределениеФинансовыхРезультатов
		|ГДЕ
		|	ОпределениеФинансовыхРезультатов.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И ОпределениеФинансовыхРезультатов.Проведен = ИСТИНА
		|	И ОпределениеФинансовыхРезультатов.Организация = &Организация
		|	И ОпределениеФинансовыхРезультатов.РассчитыватьПрибыльУбыток = ИСТИНА";
		
		Запрос.УстановитьПараметр("ДатаНач", НачалоГода(ДатаКон));
		Запрос.УстановитьПараметр("ДатаКон", КонецГода(ДатаКон));
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Результат = Запрос.Выполнить();
		НетОпределениеФинансовыхРезультатов = Результат.Пустой();
		
		Если НетОпределениеФинансовыхРезультатов Тогда
			
			ОбнаруженыОшибки = Истина;
			
			СтрокаОшибки = ТаблицаОшибок.Добавить();
			СтрокаОшибки.НачПериода = СтрокаПериода.НачПериода;
			СтрокаОшибки.КонПериода = СтрокаПериода.КонПериода;
			СтрокаОшибки.Ошибка     = НСтр("ru='Нет документа ""Определение финансовых результатов"" с распределением прибылей/убытков за год.';uk='Немає документа ""Визначення фінансових результатів"" з розподілом прибутків/збитків за рік.'");
			СтрокаОшибки.ДокументПослеЗакрытия = НСтр("ru='Нет';uk='Ні'");
			
		Иначе
			
			ЗапросПоВсемДокументам = Новый Запрос;
			ЗапросПоВсемДокументам.УстановитьПараметр("Организация", Организация);
			
			Для Каждого ДокументМетаданные ИЗ Метаданные.Документы Цикл
				
				Если ДокументМетаданные.Имя	= "ОпределениеФинансовыхРезультатов" Тогда
					Продолжить;
				КонецЕсли; 
				
				ЗапросПоВсемДокументам.Текст = ЗапросПоВсемДокументам.Текст + ?(ЗапросПоВсемДокументам.Текст = "", "", "
				|ОБЪЕДИНИТЬ ВСЕ
				|") + "ВЫБРАТЬ """ + ДокументМетаданные.Имя + """ КАК ИмяДокумента, Представление КАК Представление, Ссылка КАК Ссылка, Дата КАК Дата ИЗ Документ." + ДокументМетаданные.Имя + "
				|ГДЕ Проведен И Дата > &ДатаНач";
				
				ЗапросПоВсемДокументам.Текст = ЗапросПоВсемДокументам.Текст + " И Дата <= &ДатаКон";
				
				Если Организация <> Неопределено И ДокументМетаданные.Реквизиты.Найти("Организация") <> Неопределено Тогда
					Если ТипЗнч(Организация) = Тип("Массив") Тогда
						ЗапросПоВсемДокументам.Текст = ЗапросПоВсемДокументам.Текст + " И Организация В (&Организация)";
					Иначе
						ЗапросПоВсемДокументам.Текст = ЗапросПоВсемДокументам.Текст + " И Организация = &Организация";
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			ЗапросПоВсемДокументам.Текст = ЗапросПоВсемДокументам.Текст + "
			|УПОРЯДОЧИТЬ ПО Дата, Ссылка";
			
			ЗапросПоВсемДокументам.УстановитьПараметр("ДатаНач", Результат.Выгрузить()[0].Ссылка.Дата);
			ЗапросПоВсемДокументам.УстановитьПараметр("ДатаКон", КонецГода(ДатаКон));
			
			ТаблицаДокументов = ЗапросПоВсемДокументам.Выполнить().Выгрузить();
			
			Для каждого ДокПослеЗакрытия Из ТаблицаДокументов Цикл
				
				СтрокаОшибки = ТаблицаОшибок.Добавить();
				СтрокаОшибки.НачПериода = СтрокаПериода.НачПериода;
				СтрокаОшибки.КонПериода = СтрокаПериода.КонПериода;
				СтрокаОшибки.Ошибка     = НСтр("ru='После документа ""Определение финансовых результатов"" с распределением прибылей/убытков за год, существуют проведенные документы!';uk='Після документа ""Визначення фінансових результатів"" з розподілом прибутків/збитків за рік, існують проведені документи!'");
				СтрокаОшибки.ДокументПослеЗакрытия = ДокПослеЗакрытия.Ссылка;
			
			КонецЦикла; 
			
		КонецЕсли;
			
	КонецЕсли; 
	
// Есть организации для которых отсутсвует документ «Определение финансовых результатов». 
// Для этих организаций не будет произведен расчет себестоимости по подразделениям.

	Возврат ТаблицаОшибок;

КонецФункции

#КонецОбласти	//ПроверкиРазделаОпределениеФинансовыхРезультатов

#КонецОбласти	//ПроверкиПоРазделам 

#Область УниверсальныеПроцедурыФункции

//+++
Функция ПолучитьНомерЧислом(НомерСтрокой)

	ЧисловаяЧастьНомера = "";
	ДлинаСтроки = СтрДлина(НомерСтрокой);
	Для Счетчик = 0 По ДлинаСтроки - 1 Цикл
		НомерСимвола = ДлинаСтроки - Счетчик;
		ТекСимвол = Сред(НомерСтрокой, НомерСимвола, 1);
		ЭтоЧисло = Найти("0123456789", ТекСимвол) > 0;
		Если ЭтоЧисло Тогда
			ЧисловаяЧастьНомера = ТекСимвол + ЧисловаяЧастьНомера;
		ИначеЕсли НЕ ПустаяСтрока(ЧисловаяЧастьНомера) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НомерЧислом = Число("0"+ЧисловаяЧастьНомера);
	Возврат НомерЧислом;

КонецФункции 

Функция ПолучитьДанныеТаблицаМесяцев(ПараметрыОтчета)
	
	ТаблицаМесяцев = Новый ТаблицаЗначений;
	ТаблицаМесяцев.Колонки.Добавить("НачПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаМесяцев.Колонки.Добавить("КонПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаМесяцев.Колонки.Добавить("Результат", Новый ОписаниеТипов("Строка"));
	ТаблицаМесяцев.Колонки.Добавить("ПериодМеньшеРегламентного", Новый ОписаниеТипов("Булево"));
	ТекДата = ПараметрыОтчета.НачалоПериода;
	ДатаКон = ПараметрыОтчета.КонецПериода;
	КонецДатыКон = КонецДня(ПараметрыОтчета.КонецПериода);
	Пока ТекДата < ДатаКон Цикл
		
		ЭтоНачалоПериода = (ТекДата = НачалоМесяца(ТекДата)) ИЛИ (ТекДата = ПараметрыОтчета.НачалоПериода);
		Если ЭтоНачалоПериода Тогда
			КонПериода = КонецМесяца(ТекДата);
			СтрокаПериода = ТаблицаМесяцев.Добавить();
			СтрокаПериода.НачПериода = ТекДата;
			СтрокаПериода.КонПериода = Мин(КонПериода, КонецДатыКон);
			СтрокаПериода.ПериодМеньшеРегламентного = СтрокаПериода.КонПериода < КонПериода;
		КонецЕсли;
		ТекДата = ДобавитьМесяц(ТекДата, 1);
	
	КонецЦикла;
	
	Возврат ТаблицаМесяцев;

КонецФункции

Функция ПолучитьЭталонныйПланСчетов(ПараметрыОтчета)

	ОписаниеТиповСтрока = ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(0);
	ОписаниеТиповСтрокаКод = ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(Метаданные.ПланыСчетов.Хозрасчетный.ДлинаКода);
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТиповЧисло 	= ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(5, 0);
	ОписаниеТиповВидСубконто = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные");
	
	ТаблицаПС = Новый ТаблицаЗначений;
	ТаблицаПС.Колонки.Добавить("Имя", 			ОписаниеТиповСтрока);
	ТаблицаПС.Колонки.Добавить("Код", 			ОписаниеТиповСтрокаКод);
	ТаблицаПС.Колонки.Добавить("ЭтоГруппа", 	ОписаниеТиповБулево);
	ТаблицаПС.Колонки.Добавить("Наименование", 	ОписаниеТиповСтрока);
	ТаблицаПС.Колонки.Добавить("Вид", 			Новый ОписаниеТипов("ВидСчета"));
	ТаблицаПС.Колонки.Добавить("Забалансовый", 	ОписаниеТиповБулево);
	ТаблицаПС.Колонки.Добавить("Порядок", 		ОписаниеТиповСтрокаКод);
	ТаблицаПС.Колонки.Добавить("Валютный", 		ОписаниеТиповБулево);
	ТаблицаПС.Колонки.Добавить("Количественный",ОписаниеТиповБулево);
	ТаблицаПС.Колонки.Добавить("ВидСубконто1",	ОписаниеТиповВидСубконто);
	ТаблицаПС.Колонки.Добавить("ИмяВидаСубконто1",		ОписаниеТиповСтрока);
	ТаблицаПС.Колонки.Добавить("ВидСубконто2",			ОписаниеТиповВидСубконто);
	ТаблицаПС.Колонки.Добавить("ИмяВидаСубконто2",		ОписаниеТиповСтрока);
	ТаблицаПС.Колонки.Добавить("ВидСубконто3",			ОписаниеТиповВидСубконто);
	ТаблицаПС.Колонки.Добавить("ИмяВидаСубконто3",		ОписаниеТиповСтрока);
	ТаблицаПС.Колонки.Добавить("Субконто1ТолькоОбороты",ОписаниеТиповБулево);
	ТаблицаПС.Колонки.Добавить("Субконто2ТолькоОбороты",ОписаниеТиповБулево);
	ТаблицаПС.Колонки.Добавить("Субконто3ТолькоОбороты",ОписаниеТиповБулево);
	ТаблицаПС.Колонки.Добавить("ПроверятьАналитикуСчета",ОписаниеТиповБулево);
	ТаблицаПС.Колонки.Добавить("ПодлежитЗакрытию",		ОписаниеТиповЧисло);
	ТаблицаПС.Колонки.Добавить("ТекстОшибкиСчетНеЗакрыт",	ОписаниеТиповСтрока);
	
	
	ЭтоВерсияКОРП = Ложь;
	
	МакетСвойстваСчетов = Отчеты.ЭкспрессПроверкаВеденияУчета.ПолучитьМакет("СвойстваСчетов");
	
	ТекОбласть = МакетСвойстваСчетов.Область("ПланСчетовБПКОРПБАУ");
	
	СтруктураКэшВидовСубконто = Новый Структура;

	Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
		// перебираем строки макета

		ВерсияКонфигурации	= СокрЛП(МакетСвойстваСчетов.Область(Ном, 19).Текст);
		
		Если ЗначениеЗаполнено(ВерсияКонфигурации) Тогда
			Если ВерсияКонфигурации = "ПРОФ" Тогда
				Если ЭтоВерсияКОРП Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ВерсияКонфигурации = "КОРП" Тогда
				Если НЕ ЭтоВерсияКОРП Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Имя 				= СокрЛП(МакетСвойстваСчетов.Область(Ном, 1).Текст);

		Код 				= СокрЛП(МакетСвойстваСчетов.Область(Ном, 2).Текст);
		
		ЭтоГруппа 			= СокрЛП(МакетСвойстваСчетов.Область(Ном, 3).Текст);
		
		Наименование 		= СокрЛП(МакетСвойстваСчетов.Область(Ном, 4).Текст);

		Вид            		= ВРег(СокрЛП(МакетСвойстваСчетов.Область(Ном, 5).Текст));

		Забалансовый        = ВРег(СокрЛП(МакетСвойстваСчетов.Область(Ном, 6).Текст));
		
		Порядок        		= СокрП(МакетСвойстваСчетов.Область(Ном, 7).Текст); // Ведущие пробелы слева не обрезаем, чтобы не нарушить сортировку.

		Валютный            =  ВРег(СокрЛП(МакетСвойстваСчетов.Область(Ном, 8).Текст));

		Количественный      =  ВРег(СокрЛП(МакетСвойстваСчетов.Область(Ном, 9).Текст));

		Субконто1 			=  СокрЛП(МакетСвойстваСчетов.Область(Ном, 10).Текст);
		Субконто2 			=  СокрЛП(МакетСвойстваСчетов.Область(Ном, 11).Текст);
		Субконто3 			=  СокрЛП(МакетСвойстваСчетов.Область(Ном, 12).Текст);
		
		Субконто1ТолькоОбороты = СокрЛП(МакетСвойстваСчетов.Область(Ном, 13).Текст);
		Субконто2ТолькоОбороты = СокрЛП(МакетСвойстваСчетов.Область(Ном, 14).Текст);
		Субконто3ТолькоОбороты = СокрЛП(МакетСвойстваСчетов.Область(Ном, 15).Текст);

		// Счет используется в явном виде при заполнении регламентированной отчетности, необходимо проверять аналитику на счете.
		ПроверятьАналитикуСчета		= СокрЛП(МакетСвойстваСчетов.Область(Ном, 16).Текст);

		// Счет подлежит закрытию 1, пусто - нет
		ПодлежитЗакрытию 			= СокрЛП(МакетСвойстваСчетов.Область(Ном, 17).Текст);

		ТекстОшибкиСчетНеЗакрыт 	= СокрЛП(МакетСвойстваСчетов.Область(Ном, 18).Текст);
		

		// формируем таблицу значений, содержащей состав показателей отчета
		НоваяСтрока = ТаблицаПС.Добавить();

		НоваяСтрока.Имя          = Имя;
		НоваяСтрока.Код          = Код;
		НоваяСтрока.ЭтоГруппа    = ?(ЭтоГруппа = "1", Истина, Ложь);
		НоваяСтрока.Порядок      = Порядок;

		НоваяСтрока.Наименование = Наименование;
		Если Вид = "АКТИВНЫЙ" Тогда
			НоваяСтрока.Вид = ВидСчета.Активный;
		ИначеЕсли Вид = "ПАССИВНЫЙ" Тогда
			НоваяСтрока.Вид = ВидСчета.Пассивный;
		Иначе
			НоваяСтрока.Вид = ВидСчета.АктивноПассивный;
		КонецЕсли;
			
		НоваяСтрока.Забалансовый        = ?(Забалансовый = "ИСТИНА", Истина, Ложь);
		НоваяСтрока.Валютный            = ?(Валютный = "ИСТИНА", Истина, Ложь);
		НоваяСтрока.Количественный      = ?(Количественный = "ИСТИНА", Истина, Ложь);

		НоваяСтрока.ИмяВидаСубконто1 = Субконто1;
		НоваяСтрока.ИмяВидаСубконто2 = Субконто2;
		НоваяСтрока.ИмяВидаСубконто3 = Субконто3;
		
		НоваяСтрока.Субконто1ТолькоОбороты = ?(Субконто1ТолькоОбороты = "1", Истина, Ложь);
		НоваяСтрока.Субконто2ТолькоОбороты = ?(Субконто2ТолькоОбороты = "1", Истина, Ложь);
		НоваяСтрока.Субконто3ТолькоОбороты = ?(Субконто3ТолькоОбороты = "1", Истина, Ложь);
		
		Для Н = 1 По 3 Цикл
			ИмяВидаСубконто = НоваяСтрока["ИмяВидаСубконто" + Н];
			ЗначениеВидаСубконто = Неопределено;
			Если ЗначениеЗаполнено(ИмяВидаСубконто) Тогда
				Если СтруктураКэшВидовСубконто.Свойство(ИмяВидаСубконто, ЗначениеВидаСубконто) Тогда
					НоваяСтрока["ВидСубконто" + Н] = ЗначениеВидаСубконто;
				Иначе
					Попытка
						НоваяСтрока["ВидСубконто" + Н] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[ИмяВидаСубконто];
					Исключение
						// Записывать в журнал регистрировать не требуется, соответствие аналитики на счетах
						// проверяется в отдельной процедуре проверки.
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		НоваяСтрока.ПроверятьАналитикуСчета = ?(ПроверятьАналитикуСчета = "1", Истина, Ложь);
		НоваяСтрока.ПодлежитЗакрытию 		= ?(ПодлежитЗакрытию = "1", 1, ?(ПодлежитЗакрытию = "2", 2, 0));
		НоваяСтрока.ТекстОшибкиСчетНеЗакрыт = ТекстОшибкиСчетНеЗакрыт;

	КонецЦикла;

	Возврат ТаблицаПС;

КонецФункции

Функция ПодготовитьДанныеПоЭталонномуПлануСчетовДляАнализа(ПараметрыОтчета)

	Если ПараметрыОтчета.Свойство("ЭталонныйПланСчетов") Тогда
		// Данные уже подготовлены.
		Возврат ПараметрыОтчета.ЭталонныйПланСчетов;
	КонецЕсли;

	ТаблицаПС = ПолучитьЭталонныйПланСчетов(ПараметрыОтчета);	

	// Добавим в таблицу эталонного плана счетов данные по остаткам и оборотам
	ТаблицаПС.Колонки.Добавить("СчетСсылка", 	Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаПС.Колонки.Добавить("НомерСтроки", 	ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(5, 0));
	Для Н = 1 По ТаблицаПС.Количество() Цикл
		ТаблицаПС[Н - 1].НомерСтроки = Н;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭталонныйПланСчетов", ТаблицаПС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭталонныйПланСчетов.Код КАК Код,
	|	ЭталонныйПланСчетов.НомерСтроки
	|ПОМЕСТИТЬ ВТ_ЭталонныйПланСчетов
	|ИЗ
	|	&ЭталонныйПланСчетов КАК ЭталонныйПланСчетов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЭталонныйПланСчетов.Код,
	|	ВТ_ЭталонныйПланСчетов.НомерСтроки,
	|	ЕСТЬNULL(Хозрасчетный.Ссылка, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетСсылка
	|ИЗ
	|	ВТ_ЭталонныйПланСчетов КАК ВТ_ЭталонныйПланСчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО ВТ_ЭталонныйПланСчетов.Код = Хозрасчетный.Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВТ_ЭталонныйПланСчетов.НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы 				= ТаблицаПС[Выборка.НомерСтроки - 1];
		СтрокаТаблицы.СчетСсылка 	= Выборка.СчетСсылка;
	КонецЦикла;

	ТаблицаПС.Индексы.Добавить("СчетСсылка");

	ПараметрыОтчета.Вставить("ЭталонныйПланСчетов", ТаблицаПС);
	
	Возврат ТаблицаПС;

КонецФункции

//+++
Функция ПроверитьНумерациюДокументов(ПолноеИмяДокумента, СтрокаПроверки, ПараметрыОтбора)
	
	
	Если НЕ УчетнаяПолитика.Существует(ПараметрыОтбора.Организация,ПараметрыОтбора.НачалоПериода) Тогда
		СтрокаПроверки.КомментарийРезультата = НСтр("ru='Проверка не может быть проведена, так как неопределена учетная политика организации.';uk='Перевірка не може бути проведена, тому що невизначено облікову політику організації.'");
		Возврат Истина;
	КонецЕсли;
	
	ПоОбособленномуПодразделению = УчетнаяПолитика.УчетПоОбособленнымПодразделениям(ПараметрыОтбора.Организация,ПараметрыОтбора.НачалоПериода);
	
	ОписаниеТиповСтрока = ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(0);
	ОписаниеТиповДатаВремя = ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя);
	
	ТаблицаНарушений = Новый ТаблицаЗначений;
	
	ТаблицаНарушений.Колонки.Добавить("Валюта");
	ТаблицаНарушений.Колонки.Добавить("ОбособленноеПодразделение");
	ТаблицаНарушений.Колонки.Добавить("НомерДокумента",ОписаниеТиповСтрока);
	ТаблицаНарушений.Колонки.Добавить("ДатаДокумента",ОписаниеТиповДатаВремя);
	ТаблицаНарушений.Колонки.Добавить("Документ");
	ТаблицаНарушений.Колонки.Добавить("НомерСледующего",ОписаниеТиповСтрока);
	ТаблицаНарушений.Колонки.Добавить("ДатаСледующего",ОписаниеТиповДатаВремя);
	ТаблицаНарушений.Колонки.Добавить("СледДокумент");
	
	// Сначала проверяем последовательность нумерации приходных кассовых ордеров
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Документ,
	|	ТаблицаДокументов.Дата КАК Дата,
	|	ТаблицаДокументов.ВалютаДокумента КАК Валюта,
	|	ТаблицаДокументов.ОбособленноеПодразделениеОрганизации КАК ОбособленноеПодразделение,
	|	ТаблицаДокументов.НомерОрдера
	|ИЗ
	|	&ТаблицаДокументов КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.ПометкаУдаления = ЛОЖЬ
	|	И ТаблицаДокументов.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ТаблицаДокументов.Организация = &Организация
	|ИТОГИ ПО
	|
	|	ОбособленноеПодразделениеОрганизации,
	|	ВалютаДокумента";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаДокументов", ПолноеИмяДокумента);

	Запрос.УстановитьПараметр("ДатаНач", ПараметрыОтбора.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКон", ПараметрыОтбора.КонецПериода);
	Запрос.УстановитьПараметр("Организация", ПараметрыОтбора.Организация);
	
	РезультатПоПодразделениям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока РезультатПоПодразделениям.Следующий() цикл
		
		РезультатПоВалютам = РезультатПоПодразделениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока РезультатПоВалютам.Следующий() Цикл
		
			ТаблицаРезультата = Новый ТаблицаЗначений;
			ТаблицаРезультата.Колонки.Добавить("Номер");
			ТаблицаРезультата.Колонки.Добавить("НомерЧислом");
			ТаблицаРезультата.Колонки.Добавить("Дата");
			ТаблицаРезультата.Колонки.Добавить("Документ");
			ТаблицаРезультата.Колонки.Добавить("ОбособленноеПодразделение");
			ТаблицаРезультата.Колонки.Добавить("Валюта");
			
			
			Результат = РезультатПоВалютам.Выбрать();
			Пока Результат.Следующий() цикл 
				
				Строка = ТаблицаРезультата.Добавить();
				Строка.Номер = Результат.НомерОрдера;
				Строка.НомерЧислом = ПолучитьНомерЧислом(Результат.НомерОрдера);
				Строка.Дата = Результат.Дата;
				Строка.Документ = Результат.Документ;
				Строка.ОбособленноеПодразделение = Результат.ОбособленноеПодразделение;
				Строка.Валюта = Результат.Валюта;
			конецЦикла;
			
			ТаблицаРезультата.Сортировать("НомерЧислом ВОЗР, Дата ВОЗР");
			
			Для ИндексСтроки = 1 По ТаблицаРезультата.Количество() - 1 Цикл
				
				ДатаТекущейСтроки    = ТаблицаРезультата[ИндексСтроки].Дата;
				ДатаПредыдущейСтроки = ТаблицаРезультата[ИндексСтроки - 1].Дата;
				НарушенаНумерация    = ДатаТекущейСтроки < ДатаПредыдущейСтроки;
				
				Если НарушенаНумерация Тогда
					
					СтрокаНарушения = ТаблицаНарушений.Добавить();
					
					Если ПоОбособленномуПодразделению Тогда
						СтрокаНарушения.ОбособленноеПодразделение = ТаблицаРезультата[ИндексСтроки].ОбособленноеПодразделение;
					КонецЕсли;
					СтрокаНарушения.Валюта  		= ТаблицаРезультата[ИндексСтроки].Валюта;
					СтрокаНарушения.НомерДокумента  = ТаблицаРезультата[ИндексСтроки].Номер;
					СтрокаНарушения.ДатаДокумента   = ТаблицаРезультата[ИндексСтроки].Дата;
					СтрокаНарушения.Документ        = ТаблицаРезультата[ИндексСтроки].Документ;
					СтрокаНарушения.НомерСледующего = ТаблицаРезультата[ИндексСтроки - 1].Номер;
					СтрокаНарушения.ДатаСледующего  = ТаблицаРезультата[ИндексСтроки - 1].Дата;
					СтрокаНарушения.СледДокумент    = ТаблицаРезультата[ИндексСтроки - 1].Документ;
					
				КонецЕсли; 
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаНарушений;
	
КонецФункции

#КонецОбласти 

#КонецЕсли