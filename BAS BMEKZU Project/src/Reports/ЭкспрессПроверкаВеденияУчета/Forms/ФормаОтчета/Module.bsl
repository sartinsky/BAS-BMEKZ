&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ЗаполнитьДеревоПроверок()
	
	ГруппыПроверок = ДеревоПроверок.ПолучитьЭлементы();
	ГруппыПроверок.Очистить();
	МакетПравил   = Отчеты.ЭкспрессПроверкаВеденияУчета.ПолучитьМакет("ОписаниеПроверок");
	ОбластьПравил = МакетПравил.Область("Правила");
	
	НомПервойСтрокиПравил    = ОбластьПравил.Верх;
	НомПоследнейСтрокиПравил = ОбластьПравил.Низ;
	
	ПлательщикНДС             = УчетнаяПолитика.ПлательщикНДС(Отчет.Организация,Отчет.НачалоПериода);
	ПлательщикНалогаНаПрибыль = УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Отчет.Организация,Отчет.НачалоПериода);
	
	
	// На случай, когда строки проверок надо вставлять прямо в корень дерева
	ГруппаПроверок = ГруппыПроверок;
	
	Для НомСтроки = НомПервойСтрокиПравил По НомПоследнейСтрокиПравил Цикл
		ОбластьСтроки    = МакетПравил.Область(НомСтроки, , НомСтроки, );
		ИмяОбластиСтроки = ОбластьСтроки.Имя;
		// Правило идентифицируется по имени области - строки,
		// поэтому строки, для которых не задано имя области, пропускаем 
		ЕстьИмяУСтроки = ИмяОбластиСтроки <> "R"+Формат(НомСтроки, "ЧГ=");
		Если ЕстьИмяУСтроки Тогда
			// Разбираем строку таблицы
			
			// Правило это или группа правил
			ЭтоГруппа = МакетПравил.Область(ИмяОбластиСтроки + "|ЭтоГруппа").Текст = "1";
			
			// Необходимо показывать правила проверки, если в настройках сняты отдельные константы
			ПроверятьТолькоПриНаличииНДС = МакетПравил.Область(ИмяОбластиСтроки + "|ПроверятьТолькоПриНаличииНДС").Текст = "1";
			ПроверятьТолькоПриНаличииНалогаНаПрибыль = МакетПравил.Область(ИмяОбластиСтроки + "|ПроверятьТолькоПриНаличииНалогаНаПрибыль").Текст = "1";
			
			Если ПроверятьТолькоПриНаличииНДС Тогда
				Если НЕ ПлательщикНДС Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ПроверятьТолькоПриНаличииНалогаНаПрибыль Тогда
				Если НЕ ПлательщикНалогаНаПрибыль Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Правила не-группы проверяем на период действия, указанный в макете
			// Недействующие правила не выводим в дерево
			Если НЕ ЭтоГруппа Тогда
				НачалоДействия    = СокрЛП(МакетПравил.Область(ИмяОбластиСтроки + "|НачалоДействия").Текст);
				ОкончаниеДействия = СокрЛП(МакетПравил.Область(ИмяОбластиСтроки + "|ОкончаниеДействия").Текст);
				ДействуетС  = ?(ПустаяСтрока(НачалоДействия), 0, Число(НачалоДействия));
				ДействуетПо = ?(ПустаяСтрока(ОкончаниеДействия), 9999, Число(ОкончаниеДействия));
				Если ДействуетПо < Год(Отчет.НачалоПериода) 
					ИЛИ ДействуетС > Год(Отчет.НачалоПериода) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Наименование    = МакетПравил.Область(ИмяОбластиСтроки + "|Наименование").Текст;
			ПредметКонтроля = МакетПравил.Область(ИмяОбластиСтроки + "|ПредметКонтроля").Текст;
			
			// Добавляем новую строку в дерево
			Если ЭтоГруппа Тогда
				ЭлементДерева = ГруппыПроверок.Добавить();
				ГруппаПроверок = ЭлементДерева.ПолучитьЭлементы();
			Иначе
				ЭлементДерева = ГруппаПроверок.Добавить();
			КонецЕсли;
				
			ЭлементДерева.Идентификатор   = ИмяОбластиСтроки;
			ЭлементДерева.Наименование    = Наименование;
			ЭлементДерева.ПредметКонтроля = ПредметКонтроля;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетНаСервере() Экспорт
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчетаНаСервере();
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Отчеты.ЭкспрессПроверкаВеденияУчета.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор, 
			"Отчеты.ЭкспрессПроверкаВеденияУчета.СформироватьОтчет", 
			ПараметрыОтчета, 
			БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;		
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанныеНаСервере();
	КонецЕсли;
		
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыОтчетаНаСервере()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Организация",             Отчет.Организация);
	ПараметрыОтчета.Вставить("НачалоПериода",           Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода",            КонецДня(Отчет.КонецПериода));
	ПараметрыОтчета.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыОтчета.Вставить("ЛимитКассы",              Отчет.ЛимитКассы);
	
	ВыполняемыеПроверки = Новый Массив;
	Для каждого ГруппаПроверок Из ДеревоПроверок.ПолучитьЭлементы() Цикл
		Если ГруппаПроверок.Включить = 0 Тогда
			Продолжить;
		КонецЕсли;
		ВыполняемыеПроверки.Добавить(ГруппаПроверок.Идентификатор);
		Для каждого Проверка Из ГруппаПроверок.ПолучитьЭлементы() Цикл
			Если Проверка.Включить = 0 Тогда
				Продолжить;
			КонецЕсли;
			ВыполняемыеПроверки.Добавить(Проверка.Идентификатор);
		КонецЦикла;
	КонецЦикла;
	ПараметрыОтчета.Вставить("ВыполняемыеПроверки", ВыполняемыеПроверки);
			
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанныеНаСервере()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Результат = РезультатВыполнения.Результат;
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьФлажкиУВсехПроверок(Форма, ЗначениеФлага)
	
	Для каждого ЭлементДерева Из Форма.ДеревоПроверок.ПолучитьЭлементы() Цикл
		ЭлементДерева.Включить = ЗначениеФлага;
		Для каждого ЭлементДерева Из ЭлементДерева.ПолучитьЭлементы() Цикл
			ЭлементДерева.Включить = ЗначениеФлага;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанныеНаСервере();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиУчетнойПолитикиОрганизации(Расшифровка)
	
	// Создаем и сразу же заполняем ключ записи учетной политики.
	КлючЗаписи 	= РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьКлючЗаписи(Расшифровка);
	
	Возврат КлючЗаписи;

КонецФункции

&НаКлиенте
Процедура ОткрытьУчетнуюПолитикуОрганизации(Расшифровка)

	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("Ключ", ПолучитьКлючЗаписиУчетнойПолитикиОрганизации(Расшифровка));
	
	ОткрытьФорму("РегистрСведений.УчетнаяПолитикаОрганизаций.ФормаЗаписи", 
		ПараметрыФормы, 
		ЭтаФорма, 
		Строка(Расшифровка.Организация.УникальныйИдентификатор()) + Строка(Расшифровка.Период));

КонецПроцедуры


&НаКлиенте
Процедура ОткрытьКарточкуСчета(Расшифровка)

	// Получим параметры расшифровки
	НачалоПериодаРасшифровки 	= Отчет.НачалоПериода;
	Если Расшифровка.Свойство("НачалоПериода") Тогда
		НачалоПериодаРасшифровки 	= Расшифровка.НачалоПериода;
	КонецЕсли;
	
	КонецПериодаРасшифровки		= Отчет.КонецПериода;
	Если Расшифровка.Свойство("КонецПериода") Тогда
		КонецПериодаРасшифровки		= Расшифровка.КонецПериода;
	КонецЕсли;
	
	Счет	= Неопределено;
	Если Расшифровка.Свойство("Счет") Тогда
		Счет = Расшифровка.Счет;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат;
	КонецЕсли;

	ПоказательНУ = Неопределено;
	ЗаполнятьПоказателиПоУмолчанию = Истина;
	Если Расшифровка.Свойство("ПоказательНУ") Тогда
		ПоказательНУ = Расшифровка.ПоказательНУ;
		ЗаполнятьПоказателиПоУмолчанию = Ложь;
	КонецЕсли;
	
	// Подготавливаем структуру для отбора необходимых параметров.
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	Для Н = 1 По 3 Цикл
		ЗначениеСубконто = Неопределено;
		ИдентификаторСубконто = "Субконто" + Н;
		Если Расшифровка.Свойство(ИдентификаторСубконто) Тогда
			ЗначениеСубконто = Расшифровка[ИдентификаторСубконто];
		КонецЕсли;
		
		Если ЗначениеСубконто <> Неопределено Тогда
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ИдентификаторСубконто, ЗначениеСубконто);
		КонецЕсли;
	КонецЦикла;
	
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("Организация", 		Отчет.Организация);
	ДополнительныеСвойства.Вставить("НачалоПериода", 	НачалоПериодаРасшифровки);
	ДополнительныеСвойства.Вставить("КонецПериода", 	КонецПериодаРасшифровки);
	ДополнительныеСвойства.Вставить("Счет", 			Счет);
	Если ПоказательНУ <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("ПоказательНУ", ПоказательНУ);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимРасшифровки", 		Истина);
	ПараметрыФормы.Вставить("ВидРасшифровки", 			2); // Из пользовательских настроек
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ЗаполняемыеНастройки",		 Новый Структура("Показатели, Отбор", ЗаполнятьПоказателиПоУмолчанию, Истина));
	
	ОткрытьФорму("Отчет.КарточкаСчета.Форма", ПараметрыФормы, ЭтаФорма, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВедомостьПоСчету(Расшифровка)

	// Получим параметры расшифровки
	НачалоПериодаРасшифровки 	= Отчет.НачалоПериода;
	Если Расшифровка.Свойство("НачалоПериода") Тогда
		НачалоПериодаРасшифровки 	= Расшифровка.НачалоПериода;
	КонецЕсли;
	
	КонецПериодаРасшифровки		= Отчет.КонецПериода;
	Если Расшифровка.Свойство("КонецПериода") Тогда
		КонецПериодаРасшифровки		= Расшифровка.КонецПериода;
	КонецЕсли;
	
	Счет	= Неопределено;
	Если Расшифровка.Свойство("Счет") Тогда
		Счет = Расшифровка.Счет;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат;
	КонецЕсли;

	ПоказательНУ = Неопределено;
	ЗаполнятьПоказателиПоУмолчанию = Истина;
	Если Расшифровка.Свойство("ПоказательНУ") Тогда
		ПоказательНУ = Расшифровка.ПоказательНУ;
		ЗаполнятьПоказателиПоУмолчанию = Ложь;
	КонецЕсли;
	
	// Подготавливаем структуру для отбора необходимых параметров.
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("Организация", 		Отчет.Организация);
	ДополнительныеСвойства.Вставить("НачалоПериода", 	НачалоПериодаРасшифровки);
	ДополнительныеСвойства.Вставить("КонецПериода", 	КонецПериодаРасшифровки);
	ДополнительныеСвойства.Вставить("Счет", 			Счет);
	Если ПоказательНУ <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("ПоказательНУ", ПоказательНУ);
	КонецЕсли;
	
	Если Расшифровка.Свойство("Группировка") Тогда
		ДополнительныеСвойства.Вставить("Группировка", Расшифровка.Группировка);
	КонецЕсли;
	
	Если Расшифровка.Свойство("Отбор") Тогда
	
		ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
		
		Для Каждого ЭлементСтруктуры Из Расшифровка.Отбор Цикл
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ПользовательскиеОтборы, ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;	
		
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимРасшифровки", 		Истина);
	ПараметрыФормы.Вставить("ВидРасшифровки", 			2); // Из пользовательских настроек
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ЗаполняемыеНастройки",		 Новый Структура("Показатели, Отбор, Группировка", ЗаполнятьПоказателиПоУмолчанию, Ложь, Ложь));
	
	ОткрытьФорму("Отчет.ОборотноСальдоваяВедомостьПоСчету.Форма", ПараметрыФормы, ЭтаФорма, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАнализСчета(Расшифровка)

	// Получим параметры расшифровки
	НачалоПериодаРасшифровки 	= Отчет.НачалоПериода;
	Если Расшифровка.Свойство("НачалоПериода") Тогда
		НачалоПериодаРасшифровки 	= Расшифровка.НачалоПериода;
	КонецЕсли;
	
	КонецПериодаРасшифровки		= Отчет.КонецПериода;
	Если Расшифровка.Свойство("КонецПериода") Тогда
		КонецПериодаРасшифровки		= Расшифровка.КонецПериода;
	КонецЕсли;
	
	Счет	= Неопределено;
	Если Расшифровка.Свойство("Счет") Тогда
		Счет = Расшифровка.Счет;
	КонецЕсли;
	
	// Подготавливаем структуру для отбора необходимых параметров.
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ПользовательскиеОтборы.ИдентификаторПользовательскойНастройки = "Отбор";
	
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("Организация", 		Отчет.Организация);
	ДополнительныеСвойства.Вставить("НачалоПериода", 	НачалоПериодаРасшифровки);
	ДополнительныеСвойства.Вставить("КонецПериода", 	КонецПериодаРасшифровки);
	ДополнительныеСвойства.Вставить("Счет", 			Счет);
	ДополнительныеСвойства.Вставить("ПоСубсчетамКорСчетов", Истина);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("РежимРасшифровки", 		Истина);
	ПараметрыФормы.Вставить("ВидРасшифровки", 			2); // Из пользовательских настроек
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ЗаполняемыеНастройки",		 Новый Структура("Показатели, Отбор, Группировка", Истина, Истина, Истина));
	
	ОткрытьФорму("Отчет.АнализСчета.Форма", ПараметрыФормы, ЭтаФорма, Истина);

КонецПроцедуры







&НаКлиенте
Процедура Подключаемый_ОткрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьНастройки()
	
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДеревоПриИзмененииУчетнойПолитики()

	//Если изменили организацию и для новой отдичаются параметры учетной политики, то перестроить дерево проверок
	Если  ПлательщикНДС <> УчетнаяПолитика.ПлательщикНДС(Отчет.Организация,Отчет.НачалоПериода) 
		ИЛИ ПлательщикНалогаНаПрибыль <> УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Отчет.Организация,Отчет.НачалоПериода) Тогда
		
		ЗаполнитьДеревоПроверок();    
		
		// Включаем все проверки
		ИзменитьФлажкиУВсехПроверок(ЭтаФорма, 1);
		
	КонецЕсли;

КонецПроцедуры // ПерезаполнитьДеревоПриИзмененииУчетнойПолитики()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ИзменитьТекстОтображенияСостояния(Элементы.Результат, "НеАктуальность");
		
		ПерезаполнитьДеревоПриИзмененииУчетнойПолитики();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ИзменитьТекстОтображенияСостояния(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ИзменитьТекстОтображенияСостояния(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	ПерезаполнитьДеревоПриИзмененииУчетнойПолитики();
	 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроверокВключитьПриИзменении(Элемент)
	
	СтрокаДерева = ДеревоПроверок.НайтиПоИдентификатору(Элементы.ДеревоПроверок.ТекущаяСтрока);
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Запретим интерактивно ставить третье состояние флажка.
	СтрокаДерева.Включить = ?(СтрокаДерева.Включить = 2, 0, СтрокаДерева.Включить);
	
	Если СтрокаДерева.ПолучитьРодителя() = Неопределено Тогда
		// Поменяли состояние на верхнем уровне, распространим его на подчиненные элементы.
		ПодчиненныеСтрокиДерева = СтрокаДерева.ПолучитьЭлементы();
		Для Каждого ПодчиненнаяСтрокаДерева Из ПодчиненныеСтрокиДерева Цикл
			ПодчиненнаяСтрокаДерева.Включить = СтрокаДерева.Включить;
		КонецЦикла;
	Иначе
		// Поменяли состояние на нижнем уровне, надо отметить для родителя.
		КоличествоВключенныхПодчиненныхЭлементов = 0;
		
		РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
		ПодчиненныеСтрокиДерева = РодительскаяСтрока.ПолучитьЭлементы();
		Для Каждого ПодчиненнаяСтрокаДерева Из ПодчиненныеСтрокиДерева Цикл
			Если ПодчиненнаяСтрокаДерева.Включить <> 0 Тогда
				КоличествоВключенныхПодчиненныхЭлементов = КоличествоВключенныхПодчиненныхЭлементов + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоВключенныхПодчиненныхЭлементов = 0 Тогда
			// Отключены все элементы, значит строка верхнего уровня отключена полностью.
			РодительскаяСтрока.Включить = 0;
		ИначеЕсли КоличествоВключенныхПодчиненныхЭлементов = ПодчиненныеСтрокиДерева.Количество() Тогда
			// Включены все элементы, значит строка верхнего уровня включена полностью.
			РодительскаяСтрока.Включить = 1;
		Иначе
			// Не все включены.
			РодительскаяСтрока.Включить = 2; 
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ ТАБЛИЧНОГО ДОКУМЕНТА

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		Идентификатор = "";
		Если Расшифровка.Свойство("Идентификатор") Тогда
			Идентификатор = Расшифровка.Идентификатор;
		КонецЕсли;

		// Раздел "Учетная политика"
		Если Идентификатор = "НеизменностьУчП_БУ" Тогда
			ОткрытьУчетнуюПолитикуОрганизации(Расшифровка);
		ИначеЕсли Идентификатор = "НеизменностьУчП_НУ" Тогда
			ОткрытьУчетнуюПолитикуОрганизации(Расшифровка);
		ИначеЕсли Идентификатор = "ОценкаРозницы" Тогда
			ОткрытьКарточкуСчета(Расшифровка);
		КонецЕсли;

		// Раздел "Анализ состояния бухгалтерского учета"
		Если Идентификатор = "НетОстатковПоСчету000" Тогда
			ОткрытьАнализСчета(Расшифровка);
		ИначеЕсли Идентификатор = "НетОстатковПоСчетамПодлежащимЗакрытиюТипа1" Тогда
			ОткрытьКарточкуСчета(Расшифровка);
		ИначеЕсли Идентификатор = "СоответствиеОстатковИАктивностиСчетов" Тогда
			ОткрытьКарточкуСчета(Расшифровка);
		КонецЕсли;
		
		// Раздел "Кассовые операции"
		Если Идентификатор = "МинусыПоКассе" Тогда
			ОткрытьКарточкуСчета(Расшифровка);
		ИначеЕсли Идентификатор = "ВыдачаПодотчетПослеОтчета" Тогда
			ОткрытьКарточкуСчета(Расшифровка);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

&НаКлиенте
Процедура УстановитьФлажкиУВсехПроверок(Команда)
	
	ИзменитьФлажкиУВсехПроверок(ЭтаФорма, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиУВсехПроверок(Команда)
	
	ИзменитьФлажкиУВсехПроверок(ЭтаФорма, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверку(Команда)
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ОтказПроверкиЗаполнения") Тогда
		ПоказатьНастройки("");
	Иначе	
		ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьНастройки", 0.1, Истина);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ОткрытьНастройки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьНастройки", 0.1, Истина);		
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
		
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Отчет.НачалоПериода, Отчет.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Отчет, РезультатВыбора, "НачалоПериода,КонецПериода");
	 
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ИзменитьТекстОтображенияСостояния(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	БухгалтерскиеОтчетыВызовСервера.УстановитьНастройкиПоУмолчанию(ЭтаФорма);
	
	ЗаполнитьДеревоПроверок();
	
	СисИнфо = Новый СистемнаяИнформация;
	ЭтоВебКлиент = НЕ ПустаяСтрока(СисИнфо.ИнформацияПрограммыПросмотра);

	Если ЭтоВебКлиент Тогда
		Элементы.ГруппаСтрокаДереваПроверок.Группировка = ГруппировкаКолонок.Горизонтальная;
	КонецЕсли;
	
	// Включаем все проверки
	ИзменитьФлажкиУВсехПроверок(ЭтаФорма, 1);
		
	Если Параметры.Свойство("ПараметрыФормы") Тогда
		ЗаполнитьЗначенияСвойств(Отчет, Параметры.ПараметрыФормы, "Организация, НачалоПериода, КонецПериода");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	БухгалтерскиеОтчетыКлиент.ПриОткрытии(ЭтаФорма, Отказ);

	ИБФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	ПодключитьОбработчикОжидания = Не ИБФайловая И ЗначениеЗаполнено(ИдентификаторЗадания);
	Если ПодключитьОбработчикОжидания Тогда		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	БухгалтерскиеОтчетыКлиент.ПередЗакрытием(ЭтотОбъект, Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	БухгалтерскиеОтчетыКлиент.ПриЗакрытии(ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	
	БухгалтерскиеОтчетыВызовСервера.ПриСохраненииПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
	
	// Дополнительно добавим в настройки ДеревоПроверок
	ДеревоПроверокОбъект = РеквизитФормыВЗначение("ДеревоПроверок");
	Настройки.ДополнительныеСвойства.Вставить("ДеревоПроверок", Новый ХранилищеЗначения(ДеревоПроверокОбъект));

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)

	БухгалтерскиеОтчетыВызовСервера.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, Настройки);
	
	ПерезаполнитьДеревоПриИзмененииУчетнойПолитики();
	
	// Перепишем из сохраненного дерева значения флажков в дерево на форме.
	Если Настройки <> Неопределено Тогда
		Если Настройки.ДополнительныеСвойства.Свойство("ДеревоПроверок") Тогда
			СохраненноеДеревоПроверок = Настройки.ДополнительныеСвойства.ДеревоПроверок.Получить();
			
			ДеревоПроверокОбъект = РеквизитФормыВЗначение("ДеревоПроверок");
			
			СохраненныеСтрокиДерева = СохраненноеДеревоПроверок.Строки;
			Для Каждого СохраненныйРаздел Из СохраненныеСтрокиДерева Цикл
				// На уровне раздела
				СтрокаДерева = ДеревоПроверокОбъект.Строки.Найти(СохраненныйРаздел.Идентификатор, "Идентификатор", Истина);
				Если СтрокаДерева <> Неопределено Тогда
					СтрокаДерева.Включить = СохраненныйРаздел.Включить;
				КонецЕсли;
			
				// На уровне отдельных проверок
				Для Каждого СохраненнаяСтрокаПроверки Из СохраненныйРаздел.Строки Цикл
					СтрокаДерева = ДеревоПроверокОбъект.Строки.Найти(СохраненнаяСтрокаПроверки.Идентификатор, "Идентификатор", Истина);
					Если СтрокаДерева <> Неопределено Тогда
						СтрокаДерева.Включить = СохраненнаяСтрокаПроверки.Включить;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			ЗначениеВРеквизитФормы(ДеревоПроверокОбъект, "ДеревоПроверок");
				
		КонецЕсли;
	КонецЕсли;
	
	// Если экспресс-проверка вызвана из формы регламентированной отчетности 
	// (переданы конкретная организация и период), то используем их.
	Если Параметры.Свойство("ПараметрыФормы") Тогда
		ЗаполнитьЗначенияСвойств(Отчет, Параметры.ПараметрыФормы, "Организация, НачалоПериода, КонецПериода");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьТекстОтображенияСостояния(ПолеТабличногоДокумента, Состояние)
	
	Если ТипЗнч(ПолеТабличногоДокумента) = Тип("ПолеФормы") 
		И ПолеТабличногоДокумента.Вид = ВидПоляФормы.ПолеТабличногоДокумента Тогда
		ОтображениеСостояния = ПолеТабличногоДокумента.ОтображениеСостояния;
		Если ВРег(Состояние) = "НЕАКТУАЛЬНОСТЬ" Тогда
			ОтображениеСостояния.Видимость                      = Истина;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
			ОтображениеСостояния.Картинка                       = Новый Картинка;
			ОтображениеСостояния.Текст                          = НСтр("ru='Отчет не сформирован. Нажмите ""Выполнить проверку"" для получения отчета.';uk='Звіт не сформований. Натисніть ""Виконати перевірку"" для одержання звіту.'");;
		Иначе
			ВызватьИсключение(НСтр("ru=""Недопустимое значение параметра (параметр номер '2')"";uk=""Неприпустиме значення параметра (параметр номер '2')"""));
		КонецЕсли;
	Иначе
		ВызватьИсключение(НСтр("ru=""Недопустимое значение параметра (параметр номер '1')"";uk=""Неприпустиме значення параметра (параметр номер '1')"""));
	КонецЕсли;
	
КонецПроцедуры 
